
/Users/tianzeng/Documents/workspace/playground/bin/targets/ble_test_target/app/apps/btshell/btshell.elf:     file format elf32-littlearm
/Users/tianzeng/Documents/workspace/playground/bin/targets/ble_test_target/app/apps/btshell/btshell.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00014121

Program Header:
0x70000001 off    0x000276bc vaddr 0x000376bc paddr 0x000376bc align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00010000 paddr 0x00010000 align 2**16
         filesz 0x000276d4 memsz 0x000276d4 flags rwx
    LOAD off    0x00030100 vaddr 0x10000100 paddr 0x000376d4 align 2**16
         filesz 0x00001d78 memsz 0x00007188 flags rw-
    LOAD off    0x00040000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x00000000 memsz 0x00000100 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00014000  00014000  00004000  2**0  ALLOC
  1 .text              0002369c  00014020  00014020  00004020  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  000376bc  000376bc  00031e78  2**0  CONTENTS
  3 .ARM.exidx         00000018  000376bc  000376bc  000276bc  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 00000100  10000000  10000000  00040000  2**0  ALLOC
  5 .data              00001d78  10000100  000376d4  00030100  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bss               00005410  10001e78  0003944c  00031e78  2**3  ALLOC
  7 .stack_dummy       000001b0  10007288  10007288  00031e78  2**3  CONTENTS, READONLY
  8 .ARM.attributes    0000002a  00000000  00000000  00032028  2**0  CONTENTS, READONLY
  9 .comment           00000079  00000000  00000000  00032052  2**0  CONTENTS, READONLY
 10 .svc_table         00000004  00000000  00000000  000320cb  2**0  CONTENTS, READONLY
 11 .debug_line        0005ace9  00000000  00000000  000320cf  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_info        00126212  00000000  00000000  0008cdb8  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev      0001a92d  00000000  00000000  001b2fca  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges     00004878  00000000  00000000  001cd8f8  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_str         0001ef50  00000000  00000000  001d2170  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges      00004888  00000000  00000000  001f10c0  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame       0000d4f8  00000000  00000000  001f5948  2**2  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00049c3d  00000000  00000000  00202e40  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00014000 l    d  .imghdr	00000000 .imghdr
00014020 l    d  .text	00000000 .text
000376bc l    d  .ARM.extab	00000000 .ARM.extab
000376bc l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .vector_relocation	00000000 .vector_relocation
10000100 l    d  .data	00000000 .data
10001e78 l    d  .bss	00000000 .bss
10007288 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 gcc_startup_apollo3.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
000140e0 l       .text	00000000 __ble_patch
00014128 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 HAL_CM4.o
000141e0 l       .text	00000000 SVC_User
000141fe l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 system_apollo3.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 sbrk.c
10001e78 l     O .bss	00000004 brk
10001e7c l     O .bss	00000004 sbrk_base
10001e80 l     O .bss	00000004 sbrk_limit
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
000147a8 l     F .text	0000002c btshell_conn_find_idx
000147d4 l     F .text	00000020 btshell_conn_find
000147f4 l     F .text	00000014 btshell_svc_find_prev
00014808 l     F .text	00000028 btshell_svc_find
00014830 l     F .text	00000016 btshell_svc_find_range
00014846 l     F .text	00000014 btshell_chr_find_prev
0001485a l     F .text	00000028 btshell_chr_find
00014882 l     F .text	00000014 btshell_dsc_find_prev
00014896 l     F .text	00000028 btshell_dsc_find
000148c0 l     F .text	00000028 btshell_print_error
000148e8 l     F .text	00000024 btshell_on_mtu
0001490c l     F .text	0000001c btshell_full_disc_complete
00014928 l     F .text	00000024 btshell_on_write
0001494c l     F .text	00000010 btshell_on_reset
0001495c l     F .text	00000048 btshell_conn_add
000149a4 l     F .text	0000004c btshell_on_read
000149f0 l     F .text	00000058 btshell_on_write_reliable
00014a48 l     F .text	00000028 btshell_chr_delete
00014a70 l     F .text	00000020 btshell_svc_delete
00014a90 l     F .text	00000050 btshell_conn_delete_idx
00014ae0 l     F .text	00000040 btshell_restart_adv
00014b20 l     F .text	00000288 btshell_print_adv_fields
00014da8 l     F .text	00000048 btshell_decode_adv_data
000150b8 l     F .text	00000070 btshell_chr_add
00015128 l     F .text	00000064 btshell_svc_add
0001518c l     F .text	0000008c btshell_dsc_add
00015218 l     F .text	000000cc btshell_tx_timer_cb
000152e4 l     F .text	00000024 btshell_on_sync
00015444 l     F .text	00000040 btshell_on_disc_c
00015484 l     F .text	00000048 btshell_on_disc_c_in_s
000154cc l     F .text	00000044 btshell_on_disc_s
00015510 l     F .text	00000044 btshell_on_disc_d
0001539c l     F .text	00000070 btshell_disc_full_dscs
0001540c l     F .text	00000036 btshell_disc_full_chrs
10001e84 l     O .bss	0000001c adv_params
10001ea0 l     O .bss	00000900 btshell_chr_mem
100027a0 l     O .bss	0000001c btshell_chr_pool
100027bc l     O .bss	00000700 btshell_dsc_mem
10002ebc l     O .bss	0000001c btshell_dsc_pool
10002ee0 l     O .bss	00000480 btshell_svc_mem
10003360 l     O .bss	0000001c btshell_svc_pool
1000337c l     O .bss	00000010 btshell_tx_data
1000338c l     O .bss	00000020 btshell_tx_timer
00000000 l    df *ABS*	00000000 misc.c
00015a0c l     F .text	00000024 print_dsc
00015a30 l     F .text	00000038 print_chr
00000000 l    df *ABS*	00000000 cmd.c
00015b44 l     F .text	00000024 cmd_host_disable
00015b68 l     F .text	00000020 on_stop
00015b88 l     F .text	00000024 cmd_host_enable
00015bac l     F .text	00000078 cmd_phy_read
00015c24 l     F .text	0000005c cmd_phy_set_default
00015c80 l     F .text	000000a0 cmd_phy_set
00015d20 l     F .text	000000e8 cmd_test_tx
00015e08 l     F .text	0000004c cmd_keystore_show
00015e54 l     F .text	00000134 cmd_keystore_iterator
00015f88 l     F .text	000000a8 parse_dev_addr
00016030 l     F .text	000000a8 cmd_keystore_parse_keydata
000160d8 l     F .text	00000038 cmd_keystore_del
00016110 l     F .text	00000104 cmd_keystore_parse_valuedata
00016214 l     F .text	00000078 cmd_keystore_add
0001628c l     F .text	00000094 cmd_conn_datalen
00016320 l     F .text	00000150 cmd_conn_update_params
00016470 l     F .text	00000068 cmd_conn_rssi
000164d8 l     F .text	00000060 cmd_white_list
00016538 l     F .text	0000005c cmd_set_priv_mode
00016594 l     F .text	00000098 cmd_set_scan_opts
0001662c l     F .text	000004cc cmd_set_adv_data_or_scan_rsp
00016af8 l     F .text	0000000c cmd_set_scan_rsp
00016b04 l     F .text	0000000c cmd_set_adv_data
00016b10 l     F .text	00000040 cmd_set_addr
00016b50 l     F .text	000000b4 cmd_set
00016c04 l     F .text	000003c8 cmd_scan
00016fcc l     F .text	0000003c cmd_show_conn
00017008 l     F .text	00000064 cmd_show_addr
0001706c l     F .text	00000074 cmd_disconnect
000170e0 l     F .text	00000588 cmd_connect
00017668 l     F .text	0000024c cmd_advertise
100033b8 l     O .bss	00000038 addrs.23908
100033f0 l     O .bss	00000020 uuids16.23845
10003410 l     O .bss	00000040 uuids32.23846
10003450 l     O .bss	00000022 uuids128.23847
10003474 l     O .bss	00000004 slave_itvl_range.23849
10003478 l     O .bss	0000001d svc_data_uuid16.23850
10003498 l     O .bss	00000030 public_tgt_addrs.23848
100034c8 l     O .bss	0000001d svc_data_uuid32.23851
100034e8 l     O .bss	0000001d svc_data_uuid128.23852
10003508 l     O .bss	0000001d uri.23853
10003528 l     O .bss	0000001d mfg_data.23854
10003548 l     O .bss	0000000c listener.24064
10000104 l     O .data	00000030 cmd_ext_conn_phy_opts
10000134 l     O .data	00000028 cmd_scan_ext_types
1000015c l     O .data	00000004 g_scan_opts
00032c54 l     O .text	0000000c advertise_help
00032c60 l     O .text	00000070 advertise_params
00032cd0 l     O .text	00000260 btshell_commands
000330dc l     O .text	0000000c connect_help
000331d0 l     O .text	0000000c disconnect_help
0003338c l     O .text	0000000c gatt_show_addr_help
00033398 l     O .text	0000000c gatt_show_conn_help
000336e8 l     O .text	0000000c set_scan_opts_help
00033540 l     O .text	0000000c scan_help
00033688 l     O .text	0000000c set_help
000335cc l     O .text	0000000c set_adv_data_help
00033714 l     O .text	0000000c set_scan_rsp_help
000336bc l     O .text	0000000c set_priv_mode_help
0003375c l     O .text	0000000c white_list_help
00033074 l     O .text	0000000c conn_rssi_help
00033090 l     O .text	0000000c conn_update_params_help
00033048 l     O .text	0000000c conn_datalen_help
000331f4 l     O .text	0000000c gatt_discover_characteristic_help
00033228 l     O .text	0000000c gatt_discover_descriptor_help
00033270 l     O .text	0000000c gatt_discover_service_help
00033254 l     O .text	0000000c gatt_discover_full_help
000332b0 l     O .text	0000000c gatt_find_included_services_help
00033294 l     O .text	0000000c gatt_exchange_mtu_help
000332f8 l     O .text	0000000c gatt_read_help
000332dc l     O .text	0000000c gatt_notify_help
00033344 l     O .text	0000000c gatt_service_changed_help
00033368 l     O .text	0000000c gatt_service_visibility_help
000333a4 l     O .text	0000000c gatt_show_help
000333b0 l     O .text	0000000c gatt_show_local_help
000333c4 l     O .text	0000000c gatt_write_help
00033420 l     O .text	0000000c keystore_add_help
00033474 l     O .text	0000000c keystore_del_help
000334b0 l     O .text	0000000c keystore_show_help
00033720 l     O .text	0000000c test_tx_help
0003350c l     O .text	0000000c phy_set_help
000334e8 l     O .text	0000000c phy_set_default_help
000334cc l     O .text	0000000c phy_read_help
00033414 l     O .text	0000000c host_enable_help
00033408 l     O .text	0000000c host_disable_help
00032f30 l     O .text	00000018 cmd_addr_type
00032f48 l     O .text	00000020 cmd_adv_conn_modes
00032f68 l     O .text	00000020 cmd_adv_disc_modes
00032f88 l     O .text	00000028 cmd_adv_filt_types
00032fb0 l     O .text	00000020 cmd_keystore_entry_type
00032fd0 l     O .text	00000028 cmd_own_addr_types
00032ff8 l     O .text	00000028 cmd_peer_addr_types
00033020 l     O .text	00000028 cmd_scan_filt_policies
00033054 l     O .text	00000020 conn_datalen_params
00033080 l     O .text	00000010 conn_rssi_params
0003309c l     O .text	00000040 conn_update_params_params
000330e8 l     O .text	000000e8 connect_params
000331dc l     O .text	00000018 disconnect_params
00033200 l     O .text	00000028 gatt_discover_characteristic_params
00033234 l     O .text	00000020 gatt_discover_descriptor_params
00033260 l     O .text	00000010 gatt_discover_full_params
0003327c l     O .text	00000018 gatt_discover_service_params
000332a0 l     O .text	00000010 gatt_exchange_mtu_params
000332bc l     O .text	00000020 gatt_find_included_services_params
000332e8 l     O .text	00000010 gatt_notify_params
00033304 l     O .text	00000040 gatt_read_params
00033350 l     O .text	00000018 gatt_service_changed_params
00033374 l     O .text	00000018 gatt_service_visibility_params
000333bc l     O .text	00000008 gatt_show_params
000333d0 l     O .text	00000038 gatt_write_params
0003342c l     O .text	00000048 keystore_add_params
00033480 l     O .text	00000030 keystore_del_params
000334bc l     O .text	00000010 keystore_show_params
000334d8 l     O .text	00000010 phy_read_params
000334f4 l     O .text	00000018 phy_set_default_params
00033518 l     O .text	00000028 phy_set_params
0003354c l     O .text	00000080 scan_params
000335d8 l     O .text	000000b0 set_adv_data_params
00033694 l     O .text	00000028 set_params
000336c8 l     O .text	00000020 set_priv_mode_params
000336f4 l     O .text	00000020 set_scan_opts_params
0003372c l     O .text	00000030 test_tx_params
00033768 l     O .text	00000018 white_list_params
00000000 l    df *ABS*	00000000 cmd_gatt.c
10003554 l     O .bss	00000010 attr_handles.22121
10003564 l     O .bss	00000100 cmd_buf
00000000 l    df *ABS*	00000000 gatt_svr.c
0001806c l     F .text	0000000a extract_uuid16_from_pts_uuid128
00018076 l     F .text	00000026 gatt_svr_chr_write
0001809c l     F .text	000001a0 gatt_svr_access_test
0001823c l     F .text	00000200 gatt_svr_long_access_test
0001843c l     F .text	000000c0 gatt_svr_chr_access_sec_test
10003664 l     O .bss	0000001e gatt_svr_pts_static_long_val
10003684 l     O .bss	0000001e gatt_svr_pts_static_long_val_alt
100036a2 l     O .bss	00000001 gatt_svr_pts_static_val
100036a3 l     O .bss	00000001 gatt_svr_sec_test_static_val
10000160 l     O .data	00000011 __compound_literal.0
10000174 l     O .data	00000011 __compound_literal.1
10000188 l     O .data	00000011 __compound_literal.10
1000019c l     O .data	00000011 __compound_literal.11
100001b0 l     O .data	00000011 __compound_literal.12
100001c4 l     O .data	00000060 __compound_literal.13
10000638 l     O .data	00000011 __compound_literal.8
1000064c l     O .data	00000011 __compound_literal.9
10000224 l     O .data	000000c0 __compound_literal.14
10000348 l     O .data	00000011 __compound_literal.2
1000051c l     O .data	00000011 __compound_literal.3
100005e8 l     O .data	00000011 __compound_literal.4
100005fc l     O .data	00000011 __compound_literal.5
10000610 l     O .data	00000011 __compound_literal.6
10000624 l     O .data	00000011 __compound_literal.7
100002e4 l     O .data	00000011 __compound_literal.15
100002f8 l     O .data	00000011 __compound_literal.16
1000030c l     O .data	00000011 __compound_literal.17
10000320 l     O .data	00000011 __compound_literal.18
10000334 l     O .data	00000011 __compound_literal.19
1000035c l     O .data	00000011 __compound_literal.20
10000370 l     O .data	00000011 __compound_literal.21
10000384 l     O .data	00000011 __compound_literal.22
10000398 l     O .data	00000011 __compound_literal.23
100003ac l     O .data	00000011 __compound_literal.24
100003c0 l     O .data	00000011 __compound_literal.25
100003d4 l     O .data	00000011 __compound_literal.26
100003e8 l     O .data	00000011 __compound_literal.27
100003fc l     O .data	00000060 __compound_literal.28
1000045c l     O .data	000000c0 __compound_literal.29
10000530 l     O .data	00000060 __compound_literal.30
00033a08 l     O .text	00000011 gatt_svr_chr_sec_test_rand_uuid
00033a30 l     O .text	00000011 gatt_svr_chr_sec_test_static_uuid
00033a1c l     O .text	00000011 gatt_svr_chr_sec_test_static_auth_uuid
10000590 l     O .data	00000011 __compound_literal.31
100005a4 l     O .data	00000011 __compound_literal.32
100005b8 l     O .data	00000030 __compound_literal.33
10000660 l     O .data	00000008 inc_svcs
00033a78 l     O .text	00000040 gatt_svr_svcs
00033a44 l     O .text	00000020 gatt_svr_inc_svcs
00033a64 l     O .text	00000011 gatt_svr_svc_sec_test_uuid
00000000 l    df *ABS*	00000000 parse.c
00018590 l     F .text	00000018 parse_arg_long_base
000185a8 l     F .text	0000002c parse_reverse_bytes
000185d4 l     F .text	00000044 parse_time_unit_mult
00018618 l     F .text	00000072 parse_time_us
0001868a l     F .text	0000006a parse_arg_byte_stream_delim
100036a4 l     O .bss	00000080 cmd_args
10003724 l     O .bss	00000004 cmd_num_args
00033b9c l     O .text	00000020 schemes.22337
00033bbc l     O .text	00000070 suffixes.22341
00000000 l    df *ABS*	00000000 ble_test_target-sysinit-app.c
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 endian.c
00000000 l    df *ABS*	00000000 os.c
00018ee0 l     F .text	0000001e os_main
10003778 l     O .bss	00000100 g_idle_task_stack
10003880 l     O .bss	00000800 g_os_main_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_dev.c
0001925c l     F .text	00000060 os_dev_add
000192bc l     F .text	00000022 os_dev_initialize
000192de l     F .text	00000024 os_dev_init
100040dc l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
100040e4 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
00019d8c l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
00019f34 l     F .text	00000010 os_msys_find_biggest_pool
00019f44 l     F .text	0000002c os_msys_find_pool
00019fbc l     F .text	00000058 os_msys_init_once
100040fc l     O .bss	00000db0 os_msys_1_data
10004eac l     O .bss	0000000c os_msys_1_mbuf_pool
10004eb8 l     O .bss	0000001c os_msys_1_mempool
10000668 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_sanity.c
0001a094 l     F .text	00000020 os_sanity_check_list_lock
0001a0b4 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_task.c
0001a428 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0001a5a8 l     F .text	00000044 os_deltatime
0001a5ec l     F .text	0000001c os_time_change_notify
0001a608 l     F .text	00000064 os_time_tick
0001a73c l     F .text	00000048 os_time_populate_info
10004ef8 l     O .bss	00000030 basetod
10000680 l     O .data	00000008 os_time_change_listeners
00000000 l    df *ABS*	00000000 os_arch_arm.c
0001a8ac l     F .text	00000002 os_arch_task_return_handler
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 lrand48.c
00000000 l    df *ABS*	00000000 memcmp.c
0001ac44 l       .text	00000000 test1
0001ac38 l       .text	00000000 loop1
0001ac4a l       .text	00000000 res1
0001ac66 l       .text	00000000 test2
0001ac6e l       .text	00000000 done
0001ac5a l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0001ac7a l       .text	00000000 test1
0001ac76 l       .text	00000000 loop1
0001ac88 l       .text	00000000 test2
0001ac84 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncat.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0001adbe l     F .text	000000fc ui2a
0001aeba l     F .text	00000028 i2a
0001aee2 l     F .text	00000030 a2d
0001af12 l     F .text	00000036 a2i
0001af48 l     F .text	00000024 putf
0001af6c l     F .text	00000124 putchw
0001b090 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 jrand48.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
0001b52c l     F .text	00000004 stdin_read
0001b530 l     F .text	00000010 stdout_write
10000688 l     O .data	00000004 _stdin
1000068c l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 strntoumax.c
00000000 l    df *ABS*	00000000 strsep.c
00000000 l    df *ABS*	00000000 strpbrk.c
00000000 l    df *ABS*	00000000 console.c
0001b6ac l     F .text	0000004c add_ascii_num_with_char
0001b6f8 l     F .text	0000003c console_handle_line
0001b734 l     F .text	0000003c console_filter_out
0001b770 l     F .text	0000001e console_filter_write
0001b790 l     F .text	00000044 console_append_char
0001b7d4 l     F .text	0000001e console_write_nolock
0001b7f4 l     F .text	00000050 handle_end
0001b844 l     F .text	00000050 handle_home
0001b894 l     F .text	00000068 del_char
0001b8fc l     F .text	00000020 handle_delete
0001b91c l     F .text	00000190 handle_ansi
0001baac l     F .text	00000058 handle_backspace
0001bb04 l     F .text	0000005c console_clear_line
0001bb60 l     F .text	000000a8 insert_char
0001bc14 l     F .text	0000000a console_nlip_enable_echo
0001bc1e l     F .text	0000000a console_nlip_disable_echo
0001bc28 l     F .text	00000104 handle_nlip
10004f38 l     O .bss	00000004 ansi_val
10004f3c l     O .bss	00000004 ansi_val_2
10004f40 l     O .bss	00000010 avail_queue
10004f50 l     O .bss	00000004 completion
10004f54 l     O .bss	00000004 console_compat_rx_cb
10004f5c l     O .bss	00000010 console_prompt
10004f6c l     O .bss	0000000c console_write_lock
10004f78 l     O .bss	00000002 cur
10004f7c l     O .bss	00000004 current_line_ev
10004f80 l     O .bss	00000004 esc_state
10004f88 l     O .bss	00000004 lines_queue
10004f8c l     O .bss	00000004 nlip_state
10004f90 l     O .bss	00000001 prev_endl.19705
10004f92 l     O .bss	00000002 prompt_len
10004f94 l     O .bss	00000001 rx_stalled
10004f96 l     O .bss	00000002 trailing_chars
10000694 l     O .data	00000004 echo
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
10000698 l     O .data	00000001 do_ticks
00000000 l    df *ABS*	00000000 uart_console.c
0001c154 l     F .text	00000008 uart_blocking_tx
0001c15c l     F .text	00000014 uart_console_ring_add_char
0001c170 l     F .text	00000014 uart_console_ring_pull_char
0001c184 l     F .text	00000016 uart_console_ring_is_full
0001c19a l     F .text	0000000e uart_console_ring_is_empty
0001c1a8 l     F .text	00000030 uart_console_tx_flush
0001c1d8 l     F .text	0000001c uart_console_tx_char
0001c1f4 l     F .text	00000058 uart_console_queue_char
0001c24c l     F .text	00000044 uart_console_rx_char
0001c290 l     F .text	00000074 uart_console_rx_char_event
10004f98 l     O .bss	00000008 cr_rx
10004fa0 l     O .bss	00000020 cr_rx_buf
10004fc0 l     O .bss	00000008 cr_tx
10004fc8 l     O .bss	00000020 cr_tx_buf
10004ff8 l     O .bss	00000001 uart_console_rx_stalled
10004ffc l     O .bss	00000004 uart_dev
10005000 l     O .bss	00000004 write_char_cb
1000069c l     O .data	00000004 b.19553
00000000 l    df *ABS*	00000000 flash_map.c
0001c42c l     F .text	00000038 flash_area_find_idx
0001c464 l     F .text	00000058 flash_map_area_overlaps
0001c4bc l     F .text	00000080 flash_map_add_new_dflt_areas
00000000 l    df *ABS*	00000000 log.c
0001c5a4 l     F .text	0000001c log_registered
0001c5c0 l     F .text	0000000c log_chk_type
0001c5cc l     F .text	00000014 log_chk_max_entry_len
0001c5e0 l     F .text	00000016 log_call_append_cb
0001c5f8 l     F .text	00000138 log_append_prepare
0001c7ec l     F .text	0000003c log_read_last_hdr
0001c91c l     F .text	00000040 log_read_hdr_walk
10005014 l     O .bss	00000001 log_written
100006a0 l     O .data	00000008 g_log_list
00000000 l    df *ABS*	00000000 log_console.c
0001c95c l     F .text	00000004 log_console_read
0001c960 l     F .text	00000004 log_console_walk
0001c964 l     F .text	00000004 log_console_flush
0001c968 l     F .text	00000048 log_console_print_hdr
0001c9b0 l     F .text	00000048 log_console_dump_cbor_entry
0001c9f8 l     F .text	00000040 log_console_append_body
0001ca38 l     F .text	0000001c log_console_append
10005018 l     O .bss	0000001c log_console
00000000 l    df *ABS*	00000000 log_level.c
10005034 l     O .bss	00000080 log_level_map
00000000 l    df *ABS*	00000000 modlog.c
0001cadc l     F .text	00000028 modlog_find_by_module
0001cb04 l     F .text	0000003c modlog_insert
0001cb40 l     F .text	0000001c modlog_alloc
0001cb5c l     F .text	00000058 modlog_infer_handle
0001cbb4 l     F .text	00000046 modlog_register_no_lock
0001cbfa l     F .text	0000002a modlog_append_one
0001cc24 l     F .text	00000084 modlog_append_no_lock
100050b4 l     O .bss	00000004 modlog_first_dflt
100050b8 l     O .bss	000000c0 modlog_mapping_buf
10005194 l     O .bss	00000004 modlog_mappings
10005198 l     O .bss	00000024 modlog_rwl
00000000 l    df *ABS*	00000000 shell.c
0001ce20 l     F .text	00000038 get_prompt
0001ce58 l     F .text	0000006c print_module_commands
0001cec4 l     F .text	00000030 print_modules
0001cef4 l     F .text	00000044 print_command_params
0001cf38 l     F .text	0000004c get_destination_module
0001cf84 l     F .text	0000001c set_default_module
0001cfa0 l     F .text	00000020 select_module
0001cfc0 l     F .text	00000080 get_command_and_module
0001d040 l     F .text	000000d0 shell_find_cmd
0001d110 l     F .text	000000e0 show_cmd_help
0001d1f0 l     F .text	00000088 show_help
0001d278 l     F .text	00000038 print_prompt
0001d2b0 l     F .text	00000016 print_prompt_if_console
0001d2c8 l     F .text	000000fc complete_module
0001d3c4 l     F .text	0000010c complete_command
0001d4d0 l     F .text	00000048 get_command_from_module
0001d518 l     F .text	000000e8 complete_param
0001d600 l     F .text	0000003c get_token
0001d63c l     F .text	00000048 complete_select
0001d684 l     F .text	00000070 line2argv
0001d6f4 l     F .text	0000001e get_last_token
0001d714 l     F .text	00000164 completion
0001d878 l     F .text	00000030 shell_avail_queue_init
0001d99a l     F .text	0000002c shell
0001d974 l     F .text	00000026 shell_process_command
100051bc l     O .bss	00000010 app_cmd
100051cc l     O .bss	00000004 app_prompt_handler
100051d0 l     O .bss	00000200 buf
100053d0 l     O .bss	00000150 compat_commands
10005520 l     O .bss	00000004 module_registered
10005524 l     O .bss	00000004 num_compat_commands
10005528 l     O .bss	00000004 num_of_shell_entities
1000552c l     O .bss	00000004 prompt
10005530 l     O .bss	00000020 shell_console_ev
10005550 l     O .bss	00000018 shell_modules
100006a8 l     O .data	00000004 default_module
0003403c l     O .text	00000010 shell_cmd_help
0003404c l     O .text	00000010 shell_cmd_select_module
00000000 l    df *ABS*	00000000 shell_os.c
0001db08 l     F .text	00000024 shell_os_ls_dev
0001dcbc l     F .text	000000f0 shell_os_tasks_display_cmd
00034260 l     O .text	0000000c date_help
0003426c l     O .text	00000010 date_params
0003427c l     O .text	0000000c ls_dev_help
00034288 l     O .text	0000000c mpool_help
00034294 l     O .text	00000010 mpool_params
000342a4 l     O .text	00000060 os_commands
00034318 l     O .text	0000000c tasks_help
00034304 l     O .text	0000000c reset_help
00034310 l     O .text	00000008 reset_params
00034324 l     O .text	00000010 tasks_params
00000000 l    df *ABS*	00000000 stats.c
0001ddec l     F .text	00000010 stats_offset
0001ddfc l     F .text	0000004c stats_register_internal
0001de6c l     F .text	00000038 stats_module_init_internal
00000000 l    df *ABS*	00000000 sysdown.c
0001df44 l     F .text	00000014 sysdown_complete
0001df58 l     F .text	00000016 sysdown_timer_exp
1000557c l     O .bss	00000004 sysdown_num_in_progress
10005580 l     O .bss	00000020 sysdown_timer
00000000 l    df *ABS*	00000000 sysinit.c
0001e03c l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 datetime.c
0001e05c l     F .text	00000044 leapyear
0001e0a0 l     F .text	00000032 parse_number
0003436c l     O .text	00000030 month_days
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 rwlock.c
0001e750 l     F .text	0000000c rwlock_complete_handoff
0001e75c l     F .text	0000001a rwlock_read_must_block
0001e776 l     F .text	00000016 rwlock_write_must_block
0001e78c l     F .text	0000003a rwlock_unblock
00000000 l    df *ABS*	00000000 streamer.c
00000000 l    df *ABS*	00000000 streamer_console.c
0001e90e l     F .text	0000000c streamer_console_vprintf
0001e91a l     F .text	0000000e streamer_console_write
100006b8 l     O .data	00000004 streamer_console
0003439c l     O .text	00000008 streamer_cfg_console
00000000 l    df *ABS*	00000000 ble_att.c
0001e930 l     F .text	00000028 ble_att_rx_dispatch_entry_find
0001e958 l     F .text	000001f4 ble_att_inc_rx_stat
0001eb4c l     F .text	00000032 ble_att_rx_handle_unknown_request
0001eb7e l     F .text	00000084 ble_att_rx
100055a2 l     O .bss	00000002 ble_att_preferred_mtu_val
000343ac l     O .text	000000d8 ble_att_rx_dispatch
00000000 l    df *ABS*	00000000 ble_att_clt.c
0001ef2c l     F .text	0000002c ble_att_clt_parse_find_type_value_hinfo
0001ef58 l     F .text	0000003e ble_att_clt_parse_read_group_type_adata
0001ef96 l     F .text	00000074 ble_att_clt_parse_find_info_entry
00000000 l    df *ABS*	00000000 ble_att_cmd.c
00000000 l    df *ABS*	00000000 ble_att_svr.c
0001f6d4 l     F .text	00000010 ble_att_svr_next_id
0001f6e4 l     F .text	00000024 ble_att_svr_prep_find_prev
0001f708 l     F .text	0000005c ble_att_svr_prep_validate
0001f764 l     F .text	00000082 ble_att_svr_move_entries
0001f7e8 l     F .text	00000020 ble_att_svr_entry_alloc
0001f808 l     F .text	0000001a ble_att_svr_get_sec_state
0001f822 l     F .text	0000010c ble_att_svr_check_perms
0001f92e l     F .text	00000062 ble_att_svr_read
0001f990 l     F .text	00000064 ble_att_svr_write
0001f9f4 l     F .text	00000018 ble_att_svr_pullup_req_base
0001fa0c l     F .text	0000006e ble_att_svr_build_mtu_rsp
0001fa7a l     F .text	00000024 ble_att_svr_pkt
0001fa9e l     F .text	00000032 ble_att_svr_build_write_rsp
0001fad0 l     F .text	00000032 ble_att_svr_build_indicate_rsp
0001fb04 l     F .text	0000009c ble_att_svr_fill_info
0001fba0 l     F .text	0000005e ble_att_svr_build_find_info_rsp
0001fbfe l     F .text	00000050 ble_att_svr_read_group_type_entry_write
0001fc4e l     F .text	00000024 ble_att_svr_is_valid_find_group_type
0001fc72 l     F .text	00000058 ble_att_svr_is_valid_group_end
0001fcca l     F .text	00000016 ble_att_svr_is_valid_read_group_type
0001fce0 l     F .text	0000005c ble_att_svr_read_flat
0001fd3c l     F .text	0000005c ble_att_svr_fill_type_value_entry
0001fd98 l     F .text	000000e8 ble_att_svr_fill_type_value
0001fe80 l     F .text	0000005e ble_att_svr_build_find_type_value_rsp
0001fede l     F .text	00000034 ble_att_svr_service_uuid
0001ff14 l     F .text	00000178 ble_att_svr_build_read_group_type_rsp
0002008c l     F .text	0000001c ble_att_svr_prep_free
000200a8 l     F .text	0000003c ble_att_svr_prep_alloc
000200e4 l     F .text	00000010 ble_att_svr_entry_free
000200f4 l     F .text	0000007a ble_att_svr_insert_prep_entry
0002016e l     F .text	00000048 ble_att_svr_prep_extract
000201b8 l     F .text	00000014 ble_att_svr_free_start_mem
00020240 l     F .text	00000030 ble_att_svr_write_handle
00020270 l     F .text	00000064 ble_att_svr_prep_write
0002030c l     F .text	0000013e ble_att_svr_build_read_type_rsp
00020490 l     F .text	000000a4 ble_att_svr_build_read_mult_rsp
0002059c l     F .text	000000ac ble_att_svr_tx_rsp
10005688 l     O .bss	00000004 ble_att_svr_entry_mem
1000568c l     O .bss	0000001c ble_att_svr_entry_pool
100056a8 l     O .bss	00000008 ble_att_svr_hidden_list
100056b0 l     O .bss	00000002 ble_att_svr_id
100056b4 l     O .bss	00000008 ble_att_svr_list
100056bc l     O .bss	00000300 ble_att_svr_prep_entry_mem
100059bc l     O .bss	0000001c ble_att_svr_prep_entry_pool
00000000 l    df *ABS*	00000000 ble_eddystone.c
00020e7c l     F .text	0000001c ble_eddystone_set_svc_data_base
00020e98 l     F .text	00000074 ble_eddystone_set_adv_data_gen
100059d8 l     O .bss	00000016 ble_eddystone_svc_data
100059f0 l     O .bss	00000010 ble_eddystone_uuids16
00000000 l    df *ABS*	00000000 ble_gap.c
00020f7a l     F .text	0000002a ble_gap_call_event_cb
00020fa4 l     F .text	0000002c ble_gap_is_preempted
00020fd0 l     F .text	00000010 ble_gap_has_client
00020fe0 l     F .text	00000012 ble_gap_update_to_l2cap
00020ff4 l     F .text	00000018 ble_gap_adv_active_instance
0002100c l     F .text	00000020 ble_gap_accept_master_conn
0002102c l     F .text	0000003c ble_gap_accept_slave_conn
00021068 l     F .text	00000024 ble_gap_wl_busy
0002108c l     F .text	00000028 ble_gap_adv_type
000210b4 l     F .text	00000032 ble_gap_adv_dflt_itvls
000210e6 l     F .text	0000002e ble_gap_disc_fill_dflts
00021114 l     F .text	00000024 ble_gap_update_entry_find
00021138 l     F .text	00000046 ble_gap_validate_conn_params
00021180 l     F .text	00000020 ble_gap_event_listener_call
000211a0 l     F .text	00000034 ble_gap_extract_conn_cb
000211d4 l     F .text	00000022 ble_gap_call_conn_event_cb
000211f6 l     F .text	0000009a ble_gap_fill_conn_desc
00021290 l     F .text	00000016 ble_gap_conn_to_snapshot
000212a6 l     F .text	00000028 ble_gap_find_snapshot
000212ce l     F .text	0000001e ble_gap_rd_rem_sup_feat_tx
000212ec l     F .text	0000001a ble_gap_conn_cancel_tx
00021306 l     F .text	0000002e ble_gap_disc_enable_tx
00021334 l     F .text	0000000c ble_gap_disc_disable_tx
00021340 l     F .text	00000024 ble_gap_adv_enable_tx
00021364 l     F .text	0000001a ble_gap_wl_tx_clear
0002137e l     F .text	0000003a ble_gap_wl_tx_add
000213b8 l     F .text	00000094 ble_gap_adv_params_tx
0002144c l     F .text	00000046 ble_gap_disc_tx_params
00021492 l     F .text	00000042 ble_gap_tx_param_pos_reply
000214d4 l     F .text	00000022 ble_gap_tx_param_neg_reply
000214f6 l     F .text	00000042 ble_gap_update_tx
00021538 l     F .text	00000082 ble_gap_conn_create_tx
000215bc l     F .text	00000030 ble_gap_update_entry_remove
000215ec l     F .text	00000020 ble_gap_slave_reset_state
0002160c l     F .text	0000002c ble_gap_slave_extract_cb
00021638 l     F .text	00000038 ble_gap_adv_finished
00021670 l     F .text	00000024 ble_gap_master_reset_state
00021694 l     F .text	00000030 ble_gap_master_extract_state
000216c4 l     F .text	00000038 ble_gap_master_connect_failure
000216fc l     F .text	0000003c ble_gap_disc_complete
00021738 l     F .text	00000046 ble_gap_disc_report
0002177e l     F .text	00000046 ble_gap_master_connect_cancelled
000217c4 l     F .text	00000038 ble_gap_master_failed
000217fc l     F .text	00000014 ble_gap_update_entry_free
00021810 l     F .text	00000034 ble_gap_master_ticks_until_exp
00021844 l     F .text	00000050 ble_gap_master_timer
00021894 l     F .text	0000003c ble_gap_update_next_exp
000218d0 l     F .text	0000003c ble_gap_update_timer
0002190c l     F .text	00000034 ble_gap_slave_ticks_until_exp
00021940 l     F .text	0000002c ble_gap_slave_timer
0002196c l     F .text	00000020 ble_gap_slave_set_timer
0002198c l     F .text	00000020 ble_gap_master_set_timer
000219ac l     F .text	0000005c ble_gap_rx_adv_report_sanity_check
00021a08 l     F .text	00000074 ble_gap_log_wl
00021a7c l     F .text	00000074 ble_gap_log_adv
00021af0 l     F .text	0000002c ble_gap_log_duration
00021b1c l     F .text	00000038 ble_gap_log_disc
00021b54 l     F .text	00000078 ble_gap_log_conn
00021bcc l     F .text	00000030 ble_gap_log_update
00021bfc l     F .text	00000084 ble_gap_adv_validate
00021c80 l     F .text	00000024 ble_gap_update_entry_alloc
00022338 l     F .text	00000044 ble_gap_adv_stop_no_lock
000223a4 l     F .text	00000038 ble_gap_disc_cancel_no_lock
00022404 l     F .text	00000038 ble_gap_disc_ext_validate
0002243c l     F .text	00000048 ble_gap_disc_validate
000226e4 l     F .text	00000048 ble_gap_conn_cancel_no_lock
000227c0 l     F .text	0000003e ble_gap_update_notify
000229e8 l     F .text	0000002c ble_gap_update_l2cap_cb
00022a14 l     F .text	00000034 ble_gap_update_failed
10005a00 l     O .bss	00000004 ble_gap_event_listener_list
10005a8c l     O .bss	00000004 ble_gap_update_entries
10005a90 l     O .bss	00000018 ble_gap_update_entry_mem
10005aa8 l     O .bss	0000001c ble_gap_update_entry_pool
10005ac4 l     O .bss	00000014 ble_gap_master
10005ad8 l     O .bss	00000010 ble_gap_slave
10005ae8 l     O .bss	0000000c preempt_done_mutex
10005af4 l     O .bss	00000008 slaves.23937
000348d4 l     O .text	00000010 ble_gap_conn_params_dflt
00000000 l    df *ABS*	00000000 ble_gattc.c
00022f58 l     F .text	00000020 ble_gattc_rx_entry_find
00022f78 l     F .text	0000000c ble_gattc_err_dispatch_get
00022f84 l     F .text	0000000c ble_gattc_resume_dispatch_get
00022f90 l     F .text	0000000c ble_gattc_tmo_dispatch_get
00022f9c l     F .text	00000024 ble_gattc_proc_matches_conn_op
00022fc0 l     F .text	0000001e ble_gattc_proc_matches_expired
00022fde l     F .text	0000002c ble_gattc_proc_matches_conn_rx_entry
0002300a l     F .text	00000008 ble_gattc_proc_matches_stalled
00023012 l     F .text	00000014 ble_gattc_proc_timeout
00023028 l     F .text	0000001c ble_gattc_error
00023044 l     F .text	00000038 ble_gattc_mtu_cb
0002307c l     F .text	0000000e ble_gattc_mtu_tmo
0002308a l     F .text	0000000a ble_gattc_mtu_err
00023094 l     F .text	00000038 ble_gattc_disc_all_svcs_cb
000230cc l     F .text	0000000e ble_gattc_disc_all_svcs_tmo
000230da l     F .text	00000016 ble_gattc_disc_all_svcs_err
000230f0 l     F .text	00000038 ble_gattc_disc_svc_uuid_cb
00023128 l     F .text	0000000e ble_gattc_disc_svc_uuid_tmo
00023136 l     F .text	00000014 ble_gattc_disc_svc_uuid_err
0002314a l     F .text	0000004a ble_gattc_disc_svc_uuid_rx_hinfo
00023194 l     F .text	00000038 ble_gattc_find_inc_svcs_cb
000231cc l     F .text	0000000e ble_gattc_find_inc_svcs_tmo
000231da l     F .text	00000018 ble_gattc_find_inc_svcs_err
000231f4 l     F .text	00000038 ble_gattc_disc_all_chrs_cb
0002322c l     F .text	0000000e ble_gattc_disc_all_chrs_tmo
0002323a l     F .text	00000014 ble_gattc_disc_all_chrs_err
00023250 l     F .text	00000038 ble_gattc_disc_chr_uuid_cb
00023288 l     F .text	0000000e ble_gattc_disc_chr_uuid_tmo
00023296 l     F .text	00000014 ble_gattc_disc_chr_uuid_err
000232ac l     F .text	00000040 ble_gattc_disc_all_dscs_cb
000232ec l     F .text	0000000e ble_gattc_disc_all_dscs_tmo
000232fa l     F .text	00000014 ble_gattc_disc_all_dscs_err
0002330e l     F .text	00000046 ble_gattc_disc_all_dscs_rx_idata
00023354 l     F .text	00000038 ble_gattc_read_cb
0002338c l     F .text	0000000e ble_gattc_read_tmo
0002339a l     F .text	0000000a ble_gattc_read_err
000233a4 l     F .text	00000026 ble_gattc_read_rx_read_rsp
000233cc l     F .text	00000038 ble_gattc_read_uuid_cb
00023404 l     F .text	0000000e ble_gattc_read_uuid_tmo
00023412 l     F .text	0000000a ble_gattc_read_uuid_err
0002341c l     F .text	0000001c ble_gattc_read_uuid_rx_complete
00023438 l     F .text	00000038 ble_gattc_read_long_cb
00023470 l     F .text	0000000e ble_gattc_read_long_tmo
0002347e l     F .text	0000000a ble_gattc_read_long_err
00023488 l     F .text	00000054 ble_gattc_read_mult_cb
000234dc l     F .text	0000000e ble_gattc_read_mult_tmo
000234ea l     F .text	0000000a ble_gattc_read_mult_err
000234f4 l     F .text	00000038 ble_gattc_write_long_cb
0002352c l     F .text	0000000c ble_gattc_write_long_tmo
00023538 l     F .text	0000001a ble_gattc_write_long_rx_exec
00023554 l     F .text	00000044 ble_gattc_write_reliable_cb
00023598 l     F .text	0000000c ble_gattc_write_reliable_tmo
000235a4 l     F .text	0000000c ble_gattc_write_reliable_rx_exec
000235b0 l     F .text	0000002c ble_gattc_proc_set_resume_timer
000235dc l     F .text	00000014 ble_gattc_process_resume_status
000235f0 l     F .text	00000010 ble_gattc_proc_set_exp_timer
00023600 l     F .text	00000028 ble_gattc_ticks_until_resume
00023628 l     F .text	00000078 ble_gattc_extract
000236a0 l     F .text	0000002c ble_gattc_extract_expired
000236cc l     F .text	00000014 ble_gattc_extract_stalled
000236e0 l     F .text	00000020 ble_gattc_extract_by_conn_op
00023700 l     F .text	00000014 ble_gattc_extract_first_by_conn_op
00023714 l     F .text	00000014 ble_gattc_extract_one
00023728 l     F .text	00000028 ble_gattc_extract_with_rx_entry
00023750 l     F .text	00000020 ble_gattc_proc_insert
00023770 l     F .text	00000010 ble_gattc_indicate_tmo
00023780 l     F .text	00000044 ble_gattc_write_cb
000237c4 l     F .text	0000000c ble_gattc_write_tmo
000237d0 l     F .text	00000008 ble_gattc_write_err
000237d8 l     F .text	00000044 ble_gattc_proc_free
0002381c l     F .text	0000003e ble_gattc_fail_procs
0002385a l     F .text	00000020 ble_gattc_write_reliable_err
0002387a l     F .text	0000002a ble_gattc_write_long_err
000238a4 l     F .text	0000008a ble_gattc_write_reliable_tx
0002392e l     F .text	00000024 ble_gattc_write_reliable_resume
00023952 l     F .text	0000006e ble_gattc_write_long_tx
000239c0 l     F .text	00000024 ble_gattc_write_long_resume
000239e4 l     F .text	0000000c ble_gattc_read_tx
000239f0 l     F .text	0000001a ble_gattc_read_long_tx
00023a0a l     F .text	00000026 ble_gattc_read_long_resume
00023a30 l     F .text	0000006a ble_gattc_read_long_rx_read_rsp
00023a9a l     F .text	00000012 ble_gattc_disc_all_dscs_tx
00023aac l     F .text	00000026 ble_gattc_disc_all_dscs_resume
00023ad2 l     F .text	00000032 ble_gattc_disc_all_dscs_rx_complete
00023b04 l     F .text	00000024 ble_gattc_disc_chr_uuid_tx
00023b28 l     F .text	00000026 ble_gattc_disc_chr_uuid_resume
00023b4e l     F .text	00000032 ble_gattc_disc_chr_uuid_rx_complete
00023b80 l     F .text	00000024 ble_gattc_disc_all_chrs_tx
00023ba4 l     F .text	00000026 ble_gattc_disc_all_chrs_resume
00023bca l     F .text	00000032 ble_gattc_disc_all_chrs_rx_complete
00023bfc l     F .text	00000030 ble_gattc_find_inc_svcs_tx
00023c2c l     F .text	00000026 ble_gattc_find_inc_svcs_resume
00023c52 l     F .text	00000034 ble_gattc_find_inc_svcs_rx_complete
00023c86 l     F .text	00000012 ble_gattc_read_uuid_tx
00023c98 l     F .text	00000038 ble_gattc_disc_svc_uuid_tx
00023cd0 l     F .text	00000026 ble_gattc_disc_svc_uuid_resume
00023cf6 l     F .text	00000034 ble_gattc_disc_svc_uuid_rx_complete
00023d2c l     F .text	00000028 ble_gattc_disc_all_svcs_tx
00023d54 l     F .text	00000026 ble_gattc_disc_all_svcs_resume
00023d7a l     F .text	00000036 ble_gattc_disc_all_svcs_rx_complete
00023db0 l     F .text	00000026 ble_gattc_process_status
00023dd8 l     F .text	0000003c ble_gattc_resume_procs
00023e14 l     F .text	0000001c ble_gattc_proc_alloc
00023e30 l     F .text	00000014 ble_gattc_log_proc_init
00023e44 l     F .text	0000002c ble_gattc_log_find_inc_svcs
00023e70 l     F .text	0000002c ble_gattc_log_disc_all_chrs
00023e9c l     F .text	00000028 ble_gattc_log_disc_all_dscs
00023ec4 l     F .text	00000020 ble_gattc_log_read
00023ee4 l     F .text	00000020 ble_gattc_log_read_long
00023f04 l     F .text	00000064 ble_gattc_log_read_mult
00023f68 l     F .text	00000034 ble_gattc_log_write
00023f9c l     F .text	0000002c ble_gattc_log_write_long
00023fc8 l     F .text	00000068 ble_gattc_log_write_reliable
00024030 l     F .text	00000020 ble_gattc_log_notify
00024050 l     F .text	00000020 ble_gattc_log_indicate
00024070 l     F .text	00000036 ble_gattc_mtu_tx
000240a8 l     F .text	00000020 ble_gattc_log_uuid
000240c8 l     F .text	00000028 ble_gattc_log_disc_svc_uuid
000240f0 l     F .text	00000040 ble_gattc_log_disc_chr_uuid
00024130 l     F .text	00000040 ble_gattc_log_read_uuid
00024170 l     F .text	00000010 ble_gattc_read_mult_tx
00024180 l     F .text	00000044 ble_gattc_read_uuid_rx_adata
000241c4 l     F .text	00000028 ble_gattc_indicate_err
000241ec l     F .text	00000024 ble_gattc_indicate_rx_rsp
00024210 l     F .text	0000005a ble_gattc_disc_all_svcs_rx_adata
0002426a l     F .text	0000007c ble_gattc_disc_all_chrs_rx_adata
000242e6 l     F .text	0000008e ble_gattc_find_inc_svcs_rx_adata
00024374 l     F .text	0000009a ble_gattc_disc_chr_uuid_rx_adata
0002440e l     F .text	00000070 ble_gattc_find_inc_svcs_rx_read_rsp
0002447e l     F .text	0000008c ble_gattc_write_reliable_rx_prep
0002450a l     F .text	0000007e ble_gattc_write_long_rx_prep
10005afc l     O .bss	000000e0 ble_gattc_proc_mem
10005bdc l     O .bss	0000001c ble_gattc_proc_pool
10005bf8 l     O .bss	00000008 ble_gattc_procs
10005c00 l     O .bss	00000004 ble_gattc_resume_at
10005c9c l     O .bss	00000004 error.23609
00034b1c l     O .text	0000003c ble_gattc_err_dispatch
00034b58 l     O .text	0000003c ble_gattc_resume_dispatch
00034b94 l     O .text	00000010 ble_gattc_rx_exec_entries
00034ba4 l     O .text	00000010 ble_gattc_rx_prep_entries
00034bb4 l     O .text	00000018 ble_gattc_rx_read_rsp_entries
00034bcc l     O .text	00000020 ble_gattc_rx_read_type_complete_entries
00034bec l     O .text	00000020 ble_gattc_rx_read_type_elem_entries
00034c0c l     O .text	0000003c ble_gattc_tmo_dispatch
00000000 l    df *ABS*	00000000 ble_gatts.c
0002500c l     F .text	00000016 ble_gatts_chr_clt_cfg_allowed
00025022 l     F .text	00000056 ble_gatts_att_flags_from_chr_flags
00025078 l     F .text	00000056 ble_gatts_chr_properties
000250ce l     F .text	00000014 ble_gatts_chr_is_sane
000250e2 l     F .text	0000000c ble_gatts_chr_op
000250f0 l     F .text	00000020 ble_gatts_chr_inc_val_stat
00025110 l     F .text	0000002c ble_gatts_find_svc_entry_idx
0002513c l     F .text	00000040 ble_gatts_svc_incs_satisfied
0002517c l     F .text	0000000c ble_gatts_dsc_op
00025188 l     F .text	00000024 ble_gatts_dsc_inc_stat
000251ac l     F .text	00000014 ble_gatts_dsc_is_sane
000251c0 l     F .text	00000024 ble_gatts_clt_cfg_find_idx
000251e4 l     F .text	00000018 ble_gatts_clt_cfg_find
000251fc l     F .text	00000024 ble_gatts_svc_type_to_uuid
00025220 l     F .text	0000001a ble_gatts_svc_is_sane
0002523c l     F .text	0000000c ble_gatts_clt_cfg_size
00025248 l     F .text	00000038 ble_gatts_schedule_update
00025280 l     F .text	000000e8 ble_gatts_count_resources
00025368 l     F .text	000000f4 ble_gatts_clt_cfg_access_locked
0002545c l     F .text	00000032 ble_gatts_subscribe_event
0002551c l     F .text	00000028 ble_gatts_register_inc
000258b4 l     F .text	00000058 ble_gatts_inc_access
00025544 l     F .text	00000034 ble_gatts_register_clt_cfg_dsc
00025578 l     F .text	00000064 ble_gatts_register_dsc
000259e6 l     F .text	00000038 ble_gatts_dsc_access
000255dc l     F .text	00000108 ble_gatts_register_chr
00025858 l     F .text	0000005c ble_gatts_chr_def_access
000259ae l     F .text	00000038 ble_gatts_chr_val_access
000256e4 l     F .text	000000cc ble_gatts_register_svc
00025824 l     F .text	00000034 ble_gatts_svc_access
000257b0 l     F .text	00000074 ble_gatts_register_round
0002590c l     F .text	000000a2 ble_gatts_val_access
00025a1e l     F .text	0000002a ble_gatts_mutable
00025a48 l     F .text	00000024 ble_gatts_free_mem
00025a6c l     F .text	0000001c ble_gatts_free_svc_defs
00025a88 l     F .text	0000006c ble_gatts_tx_notifications_one_chr
10005ca0 l     O .bss	00000004 ble_gatts_clt_cfg_mem
10005ca4 l     O .bss	0000001c ble_gatts_clt_cfg_pool
10005cc0 l     O .bss	00000004 ble_gatts_clt_cfgs
10005cc4 l     O .bss	00000004 ble_gatts_num_cfgable_chrs
10005cc8 l     O .bss	00000004 ble_gatts_num_svc_defs
10005ccc l     O .bss	00000002 ble_gatts_num_svc_entries
10005d04 l     O .bss	00000004 ble_gatts_svc_defs
10005d08 l     O .bss	00000004 ble_gatts_svc_entries
100006bc l     O .data	00000004 __compound_literal.0
100006c0 l     O .data	00000004 __compound_literal.1
100006c4 l     O .data	00000004 __compound_literal.2
100006c8 l     O .data	00000004 __compound_literal.3
100006cc l     O .data	00000004 __compound_literal.4
00000000 l    df *ABS*	00000000 ble_gatts_lcl.c
000260f0 l     F .text	00000060 ble_gatt_show_local_inc_svc
00026150 l     F .text	00000084 ble_gatts_flags_to_str
000261d4 l     F .text	0000018c ble_gatt_show_local_chr
00026360 l     F .text	0000009c ble_gatt_show_local_svc
100006d0 l     O .data	00000004 __compound_literal.0
00034ddc l     O .text	00000040 ble_gatt_chr_f_names
00034e1c l     O .text	00000024 ble_gatt_dsc_f_names
00000000 l    df *ABS*	00000000 ble_hs.c
0002640c l     F .text	00000048 ble_hs_wakeup_tx_conn
00026454 l     F .text	00000018 ble_hs_event_rx_hci_ev
0002646c l     F .text	0000001c ble_hs_clear_rx_queue
00026488 l     F .text	0000002c ble_hs_rx_data
000264b4 l     F .text	00000008 ble_hs_event_tx_notify
000264c8 l     F .text	00000014 ble_hs_sched_start_stage2
000264dc l     F .text	00000008 ble_hs_event_start_stage1
00026564 l     F .text	00000008 ble_hs_event_rx_data
000265bc l     F .text	00000020 ble_hs_timer_reset
000265dc l     F .text	00000030 ble_hs_timer_sched
0002660c l     F .text	00000064 ble_hs_sync
00026670 l     F .text	00000050 ble_hs_reset
000266c0 l     F .text	00000008 ble_hs_event_reset
000266c8 l     F .text	00000054 ble_hs_timer_exp
00026838 l     F .text	0000001e ble_hs_event_start_stage2
10005d10 l     O .bss	00000010 ble_hs_ev_reset
10005d20 l     O .bss	00000010 ble_hs_ev_start_stage1
10005d30 l     O .bss	00000010 ble_hs_ev_start_stage2
10005d40 l     O .bss	00000010 ble_hs_ev_tx_notifications
10005d50 l     O .bss	00000004 ble_hs_evq
10005d70 l     O .bss	000000a0 ble_hs_hci_os_event_buf
10005e18 l     O .bss	0000000c ble_hs_mutex
10005e24 l     O .bss	00000004 ble_hs_parent_task
10005e28 l     O .bss	00000004 ble_hs_reset_reason
10005e2c l     O .bss	00000018 ble_hs_rx_q
10005e80 l     O .bss	00000020 ble_hs_timer
00000000 l    df *ABS*	00000000 ble_hs_adv.c
00026ac8 l     F .text	00000012 find_field_func
00026ada l     F .text	00000062 ble_hs_adv_set_hdr
00026b3c l     F .text	00000050 ble_hs_adv_set_flat_mbuf
00026b8c l     F .text	00000068 ble_hs_adv_set_array_uuid16
00026bf4 l     F .text	0000006c ble_hs_adv_set_array_uuid128
00026c60 l     F .text	00000072 ble_hs_adv_set_array_uuid32
00026cd2 l     F .text	00000072 ble_hs_adv_set_array16
00026d44 l     F .text	000002ce adv_set_fields
00027014 l     F .text	00000044 ble_hs_adv_parse_uuids16
00027058 l     F .text	0000004c ble_hs_adv_parse_uuids32
000270a4 l     F .text	00000060 ble_hs_adv_parse_uuids128
00027104 l     F .text	00000258 ble_hs_adv_parse_one_field
10005ea0 l     O .bss	00000011 ble_hs_adv_uuids128
10005eb4 l     O .bss	00000038 ble_hs_adv_uuids16
10005eec l     O .bss	00000038 ble_hs_adv_uuids32
00000000 l    df *ABS*	00000000 ble_hs_atomic.c
00000000 l    df *ABS*	00000000 ble_hs_conn.c
10005f24 l     O .bss	00000064 ble_hs_conn_elem_mem
10005f88 l     O .bss	0000001c ble_hs_conn_pool
10005fa4 l     O .bss	00000004 ble_hs_conns
00034ea0 l     O .text	00000006 ble_hs_conn_null_addr
00000000 l    df *ABS*	00000000 ble_hs_flow.c
00000000 l    df *ABS*	00000000 ble_hs_hci.c
000278b0 l     F .text	0000004a ble_hs_hci_rx_cmd_complete
000278fa l     F .text	00000024 ble_hs_hci_rx_cmd_status
00027920 l     F .text	0000000c ble_hs_hci_max_acl_payload_sz
0002792c l     F .text	00000014 ble_hs_hci_lock
00027940 l     F .text	00000010 ble_hs_hci_unlock
00027950 l     F .text	0000002c ble_hs_hci_wait_for_ack
0002797c l     F .text	00000090 ble_hs_hci_process_ack
00027a0c l     F .text	00000024 ble_hs_hci_rx_ack
00027a30 l     F .text	00000020 ble_hs_hci_frag_alloc
00027a50 l     F .text	0000004c ble_hs_hci_acl_hdr_prepend
10005fa8 l     O .bss	00000004 ble_hs_hci_ack
10005fae l     O .bss	00000002 ble_hs_hci_buf_sz
10005fb0 l     O .bss	0000011c ble_hs_hci_frag_data
100060cc l     O .bss	0000000c ble_hs_hci_frag_mbuf_pool
100060d8 l     O .bss	0000001c ble_hs_hci_frag_mempool
100060f4 l     O .bss	0000000c ble_hs_hci_mutex
10006100 l     O .bss	00000008 ble_hs_hci_sem
10006108 l     O .bss	00000004 ble_hs_hci_sup_feat
1000610c l     O .bss	00000001 ble_hs_hci_version
00000000 l    df *ABS*	00000000 ble_hs_hci_cmd.c
00027cc0 l     F .text	00000018 ble_hs_hci_cmd_transport
00027cd8 l     F .text	00000038 ble_hs_hci_cmd_send
00000000 l    df *ABS*	00000000 ble_hs_hci_evt.c
00027d48 l     F .text	00000024 ble_hs_hci_evt_dispatch_find
00027d6c l     F .text	00000014 ble_hs_hci_evt_le_dispatch_find
00027d80 l     F .text	0000000c ble_hs_hci_evt_encrypt_change
00027d8c l     F .text	0000000c ble_hs_hci_evt_enc_key_refresh
00027d98 l     F .text	00000026 ble_hs_hci_evt_le_meta
00027dbe l     F .text	0000004c ble_hs_hci_evt_le_adv_rpt_first_pass
00027e0a l     F .text	00000004 ble_hs_hci_evt_le_ext_adv_rpt
00027e0e l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_estab
00027e12 l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_rpt
00027e16 l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_lost
00027e1a l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_transfer
00027e1e l     F .text	00000004 ble_hs_hci_evt_le_scan_timeout
00027e22 l     F .text	00000004 ble_hs_hci_evt_le_adv_set_terminated
00027e26 l     F .text	00000004 ble_hs_hci_evt_le_scan_req_rcvd
00027e2a l     F .text	0000000c ble_hs_hci_evt_le_lt_key_req
00027e36 l     F .text	00000014 ble_hs_hci_evt_hw_error
00027e4a l     F .text	00000032 ble_hs_hci_evt_disconn_complete
00027e7c l     F .text	00000062 ble_hs_hci_evt_num_completed_pkts
00027ede l     F .text	00000014 ble_hs_hci_evt_le_phy_update_complete
00027ef2 l     F .text	00000082 ble_hs_hci_evt_le_dir_adv_rpt
00027f74 l     F .text	0000007e ble_hs_hci_evt_le_adv_rpt
00027ff2 l     F .text	00000086 ble_hs_hci_evt_le_enh_conn_complete
00028078 l     F .text	00000066 ble_hs_hci_evt_le_conn_complete
000280de l     F .text	00000014 ble_hs_hci_evt_le_conn_parm_req
000280f2 l     F .text	00000014 ble_hs_hci_evt_le_rd_rem_used_feat_complete
00028106 l     F .text	00000014 ble_hs_hci_evt_le_conn_upd_complete
00034eb8 l     O .text	00000030 ble_hs_hci_evt_dispatch
00034ee8 l     O .text	00000064 ble_hs_hci_evt_le_dispatch
00000000 l    df *ABS*	00000000 ble_hs_hci_util.c
00000000 l    df *ABS*	00000000 ble_hs_id.c
00028414 l     F .text	00000038 ble_hs_id_addr_type_usable
10006110 l     O .bss	00000006 ble_hs_id_pub
10006118 l     O .bss	00000006 ble_hs_id_rnd
00000000 l    df *ABS*	00000000 ble_hs_log.c
00000000 l    df *ABS*	00000000 ble_hs_mbuf.c
000284e0 l     F .text	0000002a ble_hs_mbuf_gen_pkt
00000000 l    df *ABS*	00000000 ble_hs_misc.c
000285a8 l     F .text	00000034 ble_hs_misc_restore_one_irk
00000000 l    df *ABS*	00000000 ble_hs_mqueue.c
00000000 l    df *ABS*	00000000 ble_hs_pvcy.c
000286d8 l     F .text	0000002e ble_hs_pvcy_set_addr_timeout
00028706 l     F .text	0000001a ble_hs_pvcy_clear_entries
00028720 l     F .text	0000001e ble_hs_pvcy_set_resolve_enabled
000287a4 l     F .text	00000084 ble_hs_pvcy_add_entry_hci
10006120 l     O .bss	00000010 ble_hs_pvcy_irk
10006130 l     O .bss	00000001 ble_hs_pvcy_started
00000000 l    df *ABS*	00000000 ble_hs_startup.c
000288d8 l     F .text	0000001a ble_hs_startup_reset_tx
000288f4 l     F .text	0000003c ble_hs_startup_read_sup_f_tx
00028930 l     F .text	00000058 ble_hs_startup_set_evmask_tx
00028988 l     F .text	00000046 ble_hs_startup_le_set_evmask_tx
000289ce l     F .text	0000002c ble_hs_startup_le_read_buf_sz_tx
000289fa l     F .text	0000002c ble_hs_startup_read_buf_sz_tx
00028a26 l     F .text	0000002a ble_hs_startup_read_local_ver_tx
00028a50 l     F .text	00000060 ble_hs_startup_read_buf_sz
00028ab0 l     F .text	00000028 ble_hs_startup_le_read_sup_f_tx
00028ad8 l     F .text	00000028 ble_hs_startup_read_bd_addr
00000000 l    df *ABS*	00000000 ble_hs_stop.c
00028b78 l     F .text	00000014 ble_hs_stop_register_listener
00028b8c l     F .text	0000002c ble_hs_stop_terminate_conn
00028bb8 l     F .text	00000050 ble_hs_stop_begin
00028c08 l     F .text	00000044 ble_hs_stop_done
00028c4c l     F .text	0000002c ble_hs_stop_gap_event
00028c78 l     F .text	00000020 ble_hs_stop_terminate_timeout_cb
10006131 l     O .bss	00000001 ble_hs_stop_conn_cnt
10006134 l     O .bss	0000000c ble_hs_stop_gap_listener
10006140 l     O .bss	00000004 ble_hs_stop_listeners
10006144 l     O .bss	00000020 ble_hs_stop_terminate_tmo
00000000 l    df *ABS*	00000000 ble_l2cap.c
00028d34 l     F .text	00000012 ble_l2cap_get_mtu
00028d46 l     F .text	00000020 ble_l2cap_append_rx
00028e46 l     F .text	0000004c ble_l2cap_rx_payload
10006164 l     O .bss	00000054 ble_l2cap_chan_mem
00000000 l    df *ABS*	00000000 ble_l2cap_sig.c
00028fec l     F .text	0000001c ble_l2cap_sig_next_id
00029008 l     F .text	00000014 ble_l2cap_sig_dispatch_get
0002901c l     F .text	0000002c ble_l2cap_sig_proc_matches
00029048 l     F .text	00000004 ble_l2cap_sig_rx_noop
0002904c l     F .text	00000020 ble_l2cap_sig_update_call_cb
0002906c l     F .text	00000024 ble_l2cap_sig_proc_insert
00029090 l     F .text	00000068 ble_l2cap_sig_proc_extract
000290f8 l     F .text	00000020 ble_l2cap_sig_proc_alloc
00029118 l     F .text	00000014 ble_l2cap_sig_proc_set_timer
0002912c l     F .text	00000058 ble_l2cap_sig_extract_expired
00029184 l     F .text	00000014 ble_l2cap_sig_proc_free
00029198 l     F .text	00000018 ble_l2cap_sig_process_status
000291b0 l     F .text	00000014 ble_l2cap_sig_rx_reject
000291c4 l     F .text	0000004a ble_l2cap_sig_update_rsp_rx
00029210 l     F .text	00000084 ble_l2cap_sig_rx
00029294 l     F .text	0000009c ble_l2cap_sig_update_req_rx
10006208 l     O .bss	00000001 ble_l2cap_sig_cur_id
1000620c l     O .bss	00000014 ble_l2cap_sig_proc_mem
10006220 l     O .bss	0000001c ble_l2cap_sig_proc_pool
1000623c l     O .bss	00000008 ble_l2cap_sig_procs
000350a0 l     O .text	0000006c ble_l2cap_sig_dispatch
00000000 l    df *ABS*	00000000 ble_l2cap_sig_cmd.c
00000000 l    df *ABS*	00000000 ble_sm.c
000295a6 l     F .text	0000003c ble_sm_rx
00000000 l    df *ABS*	00000000 ble_sm_cmd.c
00000000 l    df *ABS*	00000000 ble_store.c
00029674 l     F .text	00000018 ble_store_status
00029738 l     F .text	00000008 ble_store_persist_sec
00000000 l    df *ABS*	00000000 ble_store_util.c
00000000 l    df *ABS*	00000000 ble_uuid.c
00035164 l     O .text	00000010 ble_uuid_base
00000000 l    df *ABS*	00000000 ble_svc_ans.c
00029bbc l     F .text	00000074 ble_svc_ans_new_alert_notify
00029c30 l     F .text	0000002c ble_svc_ans_unr_alert_notify
00029c5c l     F .text	00000026 ble_svc_ans_chr_write
00029c84 l     F .text	00000200 ble_svc_ans_access
10006244 l     O .bss	00000002 ble_svc_ans_alert_not_ctrl_pt
10006246 l     O .bss	00000002 ble_svc_ans_conn_handle
10006248 l     O .bss	00000001 ble_svc_ans_new_alert_cat
1000624c l     O .bss	00000008 ble_svc_ans_new_alert_cnt
10006254 l     O .bss	00000014 ble_svc_ans_new_alert_val
10006268 l     O .bss	00000002 ble_svc_ans_new_alert_val_handle
1000626a l     O .bss	00000002 ble_svc_ans_new_alert_val_len
1000626c l     O .bss	00000001 ble_svc_ans_unr_alert_cat
10006270 l     O .bss	00000008 ble_svc_ans_unr_alert_cnt
10006278 l     O .bss	00000002 ble_svc_ans_unr_alert_stat
1000627a l     O .bss	00000002 ble_svc_ans_unr_alert_val_handle
100006fc l     O .data	00000004 __compound_literal.0
10000700 l     O .data	00000004 __compound_literal.1
10000704 l     O .data	00000004 __compound_literal.2
10000708 l     O .data	00000004 __compound_literal.3
1000070c l     O .data	00000004 __compound_literal.4
10000710 l     O .data	00000004 __compound_literal.5
10000714 l     O .data	00000090 __compound_literal.6
00035174 l     O .text	00000020 ble_svc_ans_defs
00000000 l    df *ABS*	00000000 ble_svc_gap.c
00029f08 l     F .text	00000016 ble_svc_gap_device_name_write_access
00029f1e l     F .text	00000016 ble_svc_gap_appearance_write_access
00029f34 l     F .text	00000024 ble_svc_gap_device_name_read_access
00029f58 l     F .text	00000028 ble_svc_gap_appearance_read_access
00029f80 l     F .text	00000098 ble_svc_gap_access
1000627c l     O .bss	00000002 ble_svc_gap_appearance
100007a4 l     O .data	00000004 __compound_literal.0
100007a8 l     O .data	00000004 __compound_literal.1
100007ac l     O .data	00000004 __compound_literal.2
100007b0 l     O .data	00000048 __compound_literal.3
100007f8 l     O .data	00000020 ble_svc_gap_name
00035194 l     O .text	00000020 ble_svc_gap_defs
00000000 l    df *ABS*	00000000 ble_svc_gatt.c
0002a0b4 l     F .text	00000068 ble_svc_gatt_access
1000627e l     O .bss	00000002 ble_svc_gatt_changed_val_handle
10006280 l     O .bss	00000002 ble_svc_gatt_end_handle
10006282 l     O .bss	00000002 ble_svc_gatt_start_handle
10000818 l     O .data	00000004 __compound_literal.0
1000081c l     O .data	00000004 __compound_literal.1
10000820 l     O .data	00000030 __compound_literal.2
000351b4 l     O .text	00000020 ble_svc_gatt_defs
00000000 l    df *ABS*	00000000 ble_store_config.c
0002a1b0 l     F .text	00000098 ble_store_config_find_sec
0002a248 l     F .text	00000038 ble_store_config_read_peer_sec
0002a280 l     F .text	00000038 ble_store_config_read_our_sec
0002a2b8 l     F .text	00000084 ble_store_config_find_cccd
0002a33c l     F .text	00000028 ble_store_config_read_cccd
0002a364 l     F .text	0000002e ble_store_config_print_key_sec
0002a3d2 l     F .text	00000046 ble_store_config_print_value_sec
0002a418 l     F .text	00000058 ble_store_config_write_peer_sec
0002a470 l     F .text	00000058 ble_store_config_write_our_sec
0002a4c8 l     F .text	0000004c ble_store_config_write_cccd
0002a53c l     F .text	00000022 ble_store_config_delete_obj
0002a55e l     F .text	00000024 ble_store_config_delete_sec
0002a584 l     F .text	00000014 ble_store_config_delete_peer_sec
0002a598 l     F .text	00000014 ble_store_config_delete_our_sec
0002a5ac l     F .text	00000028 ble_store_config_delete_cccd
00000000 l    df *ABS*	00000000 addr.c
0002a658 l     F .text	00000004 ble_hs_util_load_rand_addr
0002a65c l     F .text	00000030 ble_hs_util_ensure_rand_addr
00000000 l    df *ABS*	00000000 apollo3_ble_hci.c
0002a6bc l     F .text	00000058 apollo3_update_wake
0002a8b8 l     F .text	00000020 ble_hci_trans_acl_tx
0002a9f0 l     F .text	000001b8 apollo3_ble_hci_trans_rx_process
100064f4 l     O .bss	00000010 apollo3_ble_hci_api
10006504 l     O .bss	00000024 apollo3_ble_hci_pool_acl
10006528 l     O .bss	000004b0 apollo3_ble_hci_pool_acl_buf
100069d8 l     O .bss	0000000c apollo3_ble_hci_pool_acl_mbuf
100069e4 l     O .bss	0000001c apollo3_ble_hci_pool_cmd_mempool
10006a00 l     O .bss	00000104 apollo3_ble_hci_pool_cmd_mempool_buf
10006b04 l     O .bss	0000001c apollo3_ble_hci_pool_evt_hi
10006b20 l     O .bss	00000090 apollo3_ble_hci_pool_evt_hi_buf
10006bb0 l     O .bss	0000001c apollo3_ble_hci_pool_evt_lo
10006bcc l     O .bss	00000240 apollo3_ble_hci_pool_evt_lo_buf
10006e0c l     O .bss	00000010 apollo3_ble_hci_rx_data
00000000 l    df *ABS*	00000000 cbor_buf_reader.c
0002ad70 l     F .text	00000006 cbuf_buf_reader_get8
0002ad76 l     F .text	00000014 cbor_buf_reader_cpy
0002ad8a l     F .text	0000001a cbor_buf_reader_cmp
0002ada4 l     F .text	0000001c cbuf_buf_reader_get64
0002adc0 l     F .text	00000008 cbuf_buf_reader_get32
0002adc8 l     F .text	0000000a cbuf_buf_reader_get16
00000000 l    df *ABS*	00000000 cborparser.c
0002ae0c l     F .text	00000024 is_fixed_type
0002ae30 l     F .text	00000004 iterate_noop
0002ae34 l     F .text	0000013c preparse_value
0002af70 l     F .text	0000004a preparse_next_value
0002afba l     F .text	000000ba extract_length
0002b074 l     F .text	00000172 iterate_string_chunks
0002b1e6 l     F .text	000000f6 advance_internal
00000000 l    df *ABS*	00000000 cborpretty.c
0002b5ac l     F .text	00000028 hexDump
0002b5d4 l     F .text	0000022c utf8EscapedDump
0002b800 l     F .text	000003dc value_to_pretty
0002bbdc l     F .text	00000064 container_to_pretty
00000000 l    df *ABS*	00000000 cborparser_dup_string.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
00000000 l    df *ABS*	00000000 apollo3_periph.c
0002bd0c l     F .text	0000004c apollo3_periph_create_timers
0002bd58 l     F .text	0000007c apollo3_periph_create_uart
10006f24 l     O .bss	0000003c os_bsp_uart0
10006f60 l     O .bss	0000003c os_bsp_uart1
00035358 l     O .text	00000004 os_bsp_uart0_cfg
0003535c l     O .text	00000004 os_bsp_uart1_cfg
00000000 l    df *ABS*	00000000 am_hal_ble.c
0002bde0 l     F .text	00000024 buffer_compare
0002be04 l     F .text	0000002c am_hal_ble_crc_nz
0002be30 l     F .text	00000020 am_hal_ble_check_status
0002be50 l     F .text	00000008 am_hal_ble_bus_release
0002be58 l     F .text	00000088 am_hal_ble_cmd_write
0002bee0 l     F .text	0000002c am_hal_ble_fifo_read
0002bf0c l     F .text	00000060 am_hal_ble_fifo_drain
0002bf6c l     F .text	0000002c am_hal_ble_read_trimdata_from_info1
0002bf98 l     F .text	00000038 am_hal_ble_bus_lock
0002d0a0 l     F .text	0000001a am_hal_ble_load_modex_trim_set
00035360 l     O .text	00000200 ccitt_table
00000000 l    df *ABS*	00000000 am_hal_flash.c
00000000 l    df *ABS*	00000000 am_hal_interrupt.c
00000000 l    df *ABS*	00000000 am_hal_mcuctrl.c
0002d480 l     F .text	000000bc device_info_get
0002d53c l     F .text	00000038 mcuctrl_fault_status
00000000 l    df *ABS*	00000000 am_hal_pwrctrl.c
0002d5d0 l     F .text	0000007c pwrctrl_periph_disable_msk_check
0002d64c l     F .text	000000b4 simobuck_updates
00000000 l    df *ABS*	00000000 hal_flash.c
0002d92c l     F .text	0000000e apollo3_flash_sector_info
0002d93a l     F .text	00000004 apollo3_flash_init
0002d940 l     F .text	00000018 apollo3_flash_erase_sector
0002d958 l     F .text	0000004c apollo3_flash_write_odd
0002d9a4 l     F .text	000000ac apollo3_flash_write
0002da50 l     F .text	0000000e apollo3_flash_read
00037420 l     O .text	0000001c apollo3_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0002da60 l     F .text	00000044 apollo2_os_tick_set_timer
0002daa4 l     F .text	00000048 apollo2_os_tick_handler
1000706c l     O .bss	00000004 apollo2_os_tick_dur
10007070 l     O .bss	00000004 apollo2_os_tick_prev
00000000 l    df *ABS*	00000000 hal_timer.c
0002db88 l     F .text	00000010 apollo3_timer_resolve
0002db98 l     F .text	00000040 apollo3_timer_tbl_find
0002dbd8 l     F .text	0000007c apollo3_timer_sdk_cfg
0002dc54 l     F .text	00000014 apollo3_timer_isr_cfg
0002dc68 l     F .text	0000000e apollo3_timer_cur_ticks
0002dc76 l     F .text	00000060 apollo3_timer_set_ocmp
0002dcd6 l     F .text	00000042 apollo3_timer_set_ocmp_at
0002dd18 l     F .text	0000002c apollo3_timer_clear_ocmp
0002dd44 l     F .text	00000058 apollo3_timer_chk_queue
0002dd9c l     F .text	00000024 apollo3_timer_isr
10007074 l     O .bss	00000004 nvic_configured.21950
10001e34 l     O .data	00000014 apollo3_timer_0
0003743c l     O .text	00000030 apollo3_timer_tbl_hfrc
0003746c l     O .text	00000028 apollo3_timer_tbl_lfrc
00037494 l     O .text	00000028 apollo3_timer_tbl_xt
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000000 l    df *ABS*	00000000 am_hal_cachectrl.c
0002de94 l     F .text	00000044 set_LPMMODE
0002ded8 l     F .text	00000044 set_SEDELAY
0002df1c l     F .text	00000044 set_RDWAIT
00000000 l    df *ABS*	00000000 am_hal_ctimer.c
0002e118 l     F .text	00000028 ctimer_clr
10001e48 l     O .data	00000010 g_ui8ClkSrc
000374bc l     O .text	00000020 g_ui32TMRAddrTbl
000374dc l     O .text	00000020 g_ui8TmrClkSrcMask
00000000 l    df *ABS*	00000000 am_hal_global.c
00000000 l    df *ABS*	00000000 am_hal_gpio.c
0002e46c l     F .text	0000000e pincfg_equ
00037500 l     O .text	00000032 g_ui8Bit76Capabilities
00037534 l     O .text	00000032 g_ui8Inpen
00037568 l     O .text	000000c8 g_ui8NCEtable
00037630 l     O .text	00000032 g_ui8nCEpins
00000000 l    df *ABS*	00000000 am_hal_stimer.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 malloc.c
0002e900 l     F .text	00000004 malloc_lock_nop
0002e904 l     F .text	00000002 malloc_unlock_nop
0002e906 l     F .text	00000048 __malloc_from_block
0002e950 l     F .text	00000064 __free_block
10001e58 l     O .data	00000018 __malloc_head
10001e70 l     O .data	00000004 malloc_lock
10001e74 l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strrchr.c
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 ble_hs_shutdown.c
0002ebb0 l     F .text	00000028 ble_hs_shutdown_stop_cb
10007078 l     O .bss	0000000c ble_hs_shutdown_stop_listener
00000000 l    df *ABS*	00000000 uart_hal.c
0002ec34 l     F .text	00000022 uart_hal_blocking_tx
0002ec56 l     F .text	00000022 uart_hal_start_rx
0002ec78 l     F .text	00000022 uart_hal_start_tx
0002ec9a l     F .text	0000002c uart_hal_resume
0002ecc6 l     F .text	0000002c uart_hal_suspend
0002ecf2 l     F .text	00000012 uart_hal_close
0002ed04 l     F .text	00000086 uart_hal_open
00000000 l    df *ABS*	00000000 hal_uart.c
0002edf4 l     F .text	000000cc apollo3_uart_irqh_x
0002eec0 l     F .text	0000000a apollo3_uart_irqh_0
0002eeca l     F .text	0000000a apollo3_uart_irqh_1
0002eed4 l     F .text	00000030 apollo3_uart_irq_info
0002ef04 l     F .text	0000003c apollo3_uart_set_nvic
10007188 l     O .bss	00000030 uarts
00000000 l    df *ABS*	00000000 am_hal_uart.c
0002f70c l     F .text	000000b0 config_baudrate
0002f874 l     F .text	00000084 buffer_configure
100071b8 l     O .bss	000000d0 g_am_hal_uart_states
00000000 l    df *ABS*	00000000 am_hal_queue.c
00000000 l    df *ABS*	00000000 ble_test_target-sysdown-app.c
00000000 l    df *ABS*	00000000 ble_test_target-sysflash.c
00000000 l    df *ABS*	00000000 am_hal_ble_patch.c
00000000 l    df *ABS*	00000000 am_hal_ble_patch_b0.c
00000000 l    df *ABS*	00000000 ble_hs_cfg.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00000000 l    df *ABS*	00000000 srand48.c
00000000 l    df *ABS*	00000000 am_hal_reset.c
00000000 l    df *ABS*	00000000 
10001e78 l       .data	00000000 __init_array_end
10001e78 l       .data	00000000 __preinit_array_end
10001e78 l       .data	00000000 __init_array_start
10001e78 l       .data	00000000 __preinit_array_start
0002b2dc g     F .text	00000090 _cbor_value_decode_int64_internal
00019c8a g     F .text	00000054 os_mbuf_trim_front
10006400 g     O .bss	000000f0 ble_store_config_peer_secs
000141a0  w    F .text	00000002 GPIO_IRQHandler
0001f39c g     F .text	0000004a ble_att_clt_tx_read_group_type
00027678 g     F .text	0000001c ble_hs_conn_find_by_idx
00028158 g     F .text	000000a0 ble_hs_hci_evt_acl_process
0001c38c g     F .text	000000a0 uart_console_init
0001f3e6 g     F .text	0000005a ble_att_clt_rx_read_group_type
0001a9d4 g     F .text	00000030 os_arch_start
10005e44 g     O .bss	00000038 ble_hs_stats
10007288 g       .bss	00000000 __HeapBase
10004eec g     O .bss	00000008 g_os_task_list
00018e5c g     F .text	00000084 os_idle_task
0001f310 g     F .text	00000030 ble_att_clt_tx_read_blob
0002eb46 g     F .text	00000014 strcpy
0002e7c0 g     F .text	0000000c am_hal_stimer_int_clear
00026728 g     F .text	00000014 ble_hs_sched_start
0002c414 g     F .text	00000028 am_hal_ble_vs_command_build
100055a4 g     O .bss	000000e4 ble_att_stats
10004f30 g     O .bss	00000006 __rand48_seed
00000000 g       .svc_table	00000000 SVC_Count
000263fc g     F .text	00000010 ble_gatts_show_local
0001b514 g     F .text	00000018 fmemopen_w
00017d6c g     F .text	00000064 cmd_gatt_service_visibility
000247b8 g     F .text	0000006c ble_gattc_disc_chrs_by_uuid
000141a0  w    F .text	00000002 IOMASTER5_IRQHandler
0001e708 g     F .text	00000048 mem_split_frag
0001419a  w    F .text	00000002 DebugMon_Handler
000159c8 g     F .text	00000028 print_addr
00019750 g     F .text	0000005a os_mbuf_copydata
100040f4 g     O .bss	00000008 g_os_mempool_list
000190ec g     F .text	0000001a os_callout_init
00019108 g     F .text	0000003c os_callout_stop
00022c30 g     F .text	0000004a ble_gap_notify_rx_event
0002a13c g     F .text	00000074 ble_svc_gatt_init
0002e9b4 g     F .text	00000050 add_malloc_block
00024d2e g     F .text	0000002c ble_gattc_rx_err
000278a8 g     F .text	00000002 ble_hs_flow_connection_broken
00018ac0 g     F .text	00000070 parse_arg_addr
10002edc g     O .bss	00000004 btshell_num_conns
00019416 g     F .text	00000070 os_eventq_put
0002e41c g     F .text	00000034 am_hal_ctimer_int_status_get
00028330 g     F .text	0000001c ble_hs_id_set_pub
0001d8a8 g     F .text	00000008 shell_evq_set
10000100 g       .data	00000000 __data_start__
00015554 g     F .text	00000034 btshell_disc_full
0002d274 g     F .text	00000074 am_hal_ble_boot
000297d2 g     F .text	00000018 ble_store_key_from_value_cccd
00019b14 g     F .text	0000005c os_mbuf_extend
10000920 g     O .data	00000010 am_ble_nvds_patch
00024ede g     F .text	00000024 ble_gattc_rx_read_mult_rsp
0001ad7a g     F .text	00000020 strtok_r
00037314 g     O .text	00000040 g_am_hal_mcuctrl_sram_size
00029440 g     F .text	00000048 ble_l2cap_sig_timer
0002fb18 g     F .text	00000024 am_hal_uart_control
10005d54 g     O .bss	0000001c ble_hs_hci_ev_pool
000141a0  w    F .text	00000002 IOSLAVE_IOS_IRQHandler
0001b418 g     F .text	00000024 printf
00033dbc g     O .text	00000004 stdout
0002f7bc g     F .text	00000058 am_hal_uart_initialize
00029814 g     F .text	0000007a ble_store_iterate
100061b8 g     O .bss	0000001c ble_l2cap_chan_pool
0001a944 g     F .text	0000008c os_arch_os_init
0001418e  w    F .text	00000002 HardFault_Handler
000207c6 g     F .text	000000a6 ble_att_svr_rx_read_type
0001e614 g     F .text	000000c4 datetime_format
00015a68 g     F .text	00000010 chr_end_handle
0002ddc0 g     F .text	00000050 hal_timer_init
000209aa g     F .text	000000c2 ble_att_svr_rx_read_group_type
00024fb4 g     F .text	00000058 ble_gattc_init
00018a04 g     F .text	00000032 parse_arg_kv
0001aa04 g     F .text	00000060 os_arch_os_start
10005a04 g     O .bss	00000088 ble_gap_stats
00020d7c g     F .text	00000018 ble_att_svr_restore_range
10005cd0 g     O .bss	00000034 ble_gatts_stats
0002ce00 g     F .text	00000028 am_hal_ble_int_clear
10004f84 g     O .bss	00000001 g_console_ignore_non_nlip
000273e4 g     F .text	00000030 ble_hs_adv_find_field
00021e04 g     F .text	00000010 ble_gap_master_in_progress
00024880 g     F .text	00000058 ble_gattc_read
0002abf4 g     F .text	0000001a ble_hci_trans_hs_cmd_tx
00027414 g     F .text	0000002a ble_hs_atomic_conn_delete
10004f86 g     O .bss	00000001 g_console_silence_non_nlip
000184fc g     F .text	0000004e gatt_svr_register_cb
000141a0  w    F .text	00000002 STIMER_CMPR4_IRQHandler
0002b38e g     F .text	00000048 cbor_value_advance_fixed
00020e34 g     F .text	00000048 ble_att_svr_init
000141a0  w    F .text	00000002 STIMER_CMPR6_IRQHandler
0001c8fc g     F .text	00000014 log_read
000260b4 g     F .text	0000003c ble_gatts_init
00015758 g     F .text	0000000a btshell_wl_set
0002a85c g     F .text	0000005c apollo3_hci_write
000297ac g     F .text	0000000e ble_store_read_cccd
00024d5a g     F .text	00000024 ble_gattc_rx_mtu
0001422e g     F .text	0000000c SysTick_Handler
000294bc g     F .text	0000003a ble_l2cap_sig_tx
000206dc g     F .text	0000006e ble_att_svr_rx_find_info
000296f8 g     F .text	00000040 ble_store_write
0002096c g     F .text	0000003e ble_att_svr_rx_read_mult
0001875c g     F .text	0000003c parse_arg_extract
000293e8 g     F .text	00000020 ble_l2cap_sig_create_chan
0002d700 g     F .text	00000090 am_hal_pwrctrl_periph_enable
10000a54 g     O .data	00000004 am_hal_ble_default_copy_patch_array
00015610 g     F .text	00000018 btshell_read_by_uuid
00019ec2 g     F .text	0000002a os_memblock_put
10000910 g     O .data	00000010 am_ble_buffer_patch
0001a024 g     F .text	00000024 os_msys_get_pkthdr
0002d470 g     F .text	00000008 am_hal_interrupt_master_disable
00018798 g     F .text	0000003a parse_long_bounds
10005004 g     O .bss	00000004 flash_map
0001ac8e g     F .text	00000030 memmove
0001f302 g     F .text	0000000e ble_att_clt_rx_read
00026538 g     F .text	00000008 ble_hs_lock
000296e0 g     F .text	00000018 ble_store_overflow_event
00014204 g     F .text	0000002a PendSV_Handler
0001b476 g     F .text	0000001c snprintf
00028e32 g     F .text	00000014 ble_l2cap_remove_rx
0001418c  w    F .text	00000002 NMI_Handler
00025b6c g     F .text	0000005c ble_gatts_connection_broken
000141a0  w    F .text	00000002 IOMASTER1_IRQHandler
000376d4 g       .ARM.exidx	00000000 __exidx_end
0001889c g     F .text	00000012 parse_arg_long
00018554 g     F .text	0000003c gatt_svr_init
00014020 g       .text	00000000 __isr_vector_start
0001c730 g     F .text	00000048 log_init
0001b4e4 g     F .text	0000002e memfile_write
0001a8b8 g     F .text	00000014 os_arch_ctx_sw
00019096 g     F .text	0000000a os_system_reset
0001df24 g     F .text	00000020 stats_init_and_reg
0002ed8c g     F .text	00000068 uart_hal_init
00014714 g     F .text	0000002c hal_system_reset
000141a0  w    F .text	00000002 STIMER_IRQHandler
00018f0c g     F .text	00000088 os_init_idle_task
0002add4 g     F .text	00000038 cbor_buf_reader_init
000141a0  w    F .text	00000002 UART1_IRQHandler
10000100 g       .data	00000000 __aeabi_unwind_cpp_pr0
0001a224 g     F .text	0000000c os_sched_set_current_task
00028dcc g     F .text	0000002c ble_l2cap_parse_hdr
000376d4 g       .ARM.exidx	00000000 __etext
10007020 g     O .bss	00000048 g_sBLEState
00021e52 g     F .text	0000002a ble_gap_rx_l2cap_update_req
00028764 g     F .text	0000003e ble_hs_pvcy_set_mode
00024d24 g     F .text	0000000a ble_gattc_indicate
0001a834 g     F .text	0000004e os_get_uptime_usec
00017a80 g     F .text	00000050 cmd_gatt_discover_full
00020534 g     F .text	00000036 ble_att_svr_read_local
0001c0f0 g     F .text	0000003c console_vprintf
00026860 g     F .text	00000268 ble_hs_init
00022af4 g     F .text	0000012c ble_gap_update_params
0002e714 g     F .text	00000020 am_hal_stimer_counter_clear
000141a0  w    F .text	00000002 STIMER_CMPR1_IRQHandler
0002754c g     F .text	00000050 ble_hs_conn_free
10001e28 g     O .data	0000000c SRAM_write_ui32
00019b70 g     F .text	00000108 os_mbuf_pullup
00024588 g     F .text	00000068 ble_gattc_timer
00015824 g     F .text	00000018 btshell_tx_stop
00024dba g     F .text	0000001e ble_gattc_rx_find_type_value_hinfo
10004fe8 g     O .bss	00000010 rx_ev
0001aa7c g     F .text	000000c0 os_mutex_release
0001defc g     F .text	00000028 stats_register
0001be34 g     F .text	00000084 console_prompt_set
0002850a g     F .text	0000000a ble_hs_mbuf_bare_pkt
00028584 g     F .text	00000022 ble_hs_mbuf_pullup_base
00024f8c g     F .text	0000001a ble_gattc_rx_indicate_rsp
0001a0e0 g     F .text	00000020 os_sanity_check_register
000157b0 g     F .text	00000008 btshell_datalen
0001f440 g     F .text	00000036 ble_att_clt_tx_write_req
0001a6c4 g     F .text	00000026 os_time_delay
00022c7a g     F .text	00000044 ble_gap_notify_tx_event
0002a8d8 g     F .text	00000010 ble_hci_trans_reset
000141a0  w    F .text	00000002 IOMASTER2_IRQHandler
00019a48 g     F .text	00000088 os_mbuf_copyinto
000141a0  w    F .text	00000002 PDM_IRQHandler
00022128 g     F .text	00000024 ble_gap_adv_set_fields
0002c0c0 g     F .text	0000005c am_hal_ble_deinitialize
0001c148 g     F .text	0000000c console_get_ticks
10007068 g     O .bss	00000004 gAmHalResetStatus
0002cacc g     F .text	000000ec am_hal_ble_patch_copy_end_apply
0002b36c g     F .text	00000022 cbor_parser_init
00027c60 g     F .text	0000000c ble_hs_hci_set_hci_version
00019984 g     F .text	000000c4 os_mbuf_prepend
00036298 g     O .text	00000914 am_ble_performance_copy_patch_data
100006d4 g     O .data	00000028 ble_hs_cfg
00020b3e g     F .text	00000014 ble_att_svr_prep_clear
00029912 g     F .text	00000038 ble_store_util_status_rr
00024f60 g     F .text	0000002c ble_gattc_rx_exec_write_rsp
000189e0 g     F .text	00000024 parse_kv_find
00015588 g     F .text	00000018 btshell_find_inc_svcs
00015970 g     F .text	00000030 print_bytes
0001c368 g     F .text	00000014 console_rx_restart
00019f24 g     F .text	00000010 os_mempool_module_init
0001a8de g     F .text	0000000a os_arch_in_critical
00029a80 g     F .text	0000000e ble_uuid_u16
00018a5c g     F .text	00000028 parse_arg_byte_stream
0002fa04 g     F .text	0000002c am_hal_uart_interrupt_clear
00027778 g     F .text	00000080 ble_hs_conn_find_by_addr
000141a0  w    F .text	00000002 UART0_IRQHandler
0001a8ae g     F .text	0000000a timer_handler
00022e70 g     F .text	00000030 ble_gap_event_listener_register
00019368 g     F .text	00000020 os_dev_lookup
0001a230 g     F .text	00000090 os_sched_sleep
000278aa g     F .text	00000002 ble_hs_flow_track_data_mbuf
00018990 g     F .text	00000050 parse_arg_time_dflt
00015644 g     F .text	0000002c btshell_write
00025fc8 g     F .text	00000040 ble_gatts_svc_set_visibility
0001c084 g     F .text	0000000c console_set_completion_cb
0001ac74 g     F .text	0000001a memcpy
000264bc g     F .text	0000000c ble_hs_evq_get
000186f4 g     F .text	00000030 parse_arg_find_idx
00027670 g     F .text	00000008 ble_hs_conn_find_assert
0002de8a g     F .text	00000004 hal_watchdog_init
10000950 g     O .data	00000104 am_ble_performance_patch_data
00025af4 g     F .text	00000078 ble_gatts_register_svcs
0001854a g     F .text	00000008 gatt_svr_print_svcs
0002e7cc g     F .text	0000000c os_cputime_init
00037408 g     O .text	00000018 apollo3_flash_dev
10006f9c g     O .bss	00000084 g_psPatchBuffer
00020c04 g     F .text	000000b4 ble_att_svr_rx_exec_write
0002272c g     F .text	00000054 ble_gap_terminate_with_conn
0002834c g     F .text	00000078 ble_hs_id_set_rnd
000188ae g     F .text	00000010 parse_arg_bool
0001430c g     F .text	00000000 .hidden __aeabi_uldivmod
0001f5fc g     F .text	00000040 ble_att_clt_tx_indicate
000141a0  w    F .text	00000002 WATCHDOG_IRQHandler
00000020 g       *ABS*	00000000 _imghdr_size
0001a1e8 g     F .text	00000030 os_sched_ctx_sw_hook
10004f58 g     O .bss	00000004 console_is_midline
0001d8b0 g     F .text	000000c4 shell_exec
000195fa g     F .text	00000014 os_mbuf_free
00015764 g     F .text	00000018 btshell_scan
00022d2c g     F .text	00000038 ble_gap_mtu_event
0001f646 g     F .text	00000026 ble_att_cmd_prepare
00017b5c g     F .text	000001b0 cmd_gatt_read
10000100 g     O .data	00000004 SystemCoreClock
000188d6 g     F .text	00000010 parse_arg_uint8
00014700 g     F .text	00000002 hal_system_init
00029638 g     F .text	0000003c ble_sm_tx
00028d9c g     F .text	00000028 ble_l2cap_chan_free
00024ebc g     F .text	00000022 ble_gattc_rx_read_blob_rsp
000372d0 g     O .text	00000004 am_hal_ble_num_default_patches_b0
000188be g     F .text	00000018 parse_arg_bool_dflt
0001a8e8 g     F .text	00000044 os_arch_task_stack_init
00029a8e g     F .text	0000003e ble_uuid_init_from_att_buf
0002ea04 g     F .text	0000006c malloc
00020460 g     F .text	00000030 ble_att_svr_read_handle
000198c6 g     F .text	000000be os_mbuf_cmpm
00018d24 g     F .text	00000044 __assert_func
00025dd4 g     F .text	000000cc ble_gatts_rx_indicate_ack
0002e450 g     F .text	0000001c am_hal_triple_read
0001ec10 g     F .text	000001f8 ble_att_inc_tx_stat
0001a384 g     F .text	00000048 os_sched_wakeup_ticks
0001c090 g     F .text	00000060 console_pkg_init
00014194  w    F .text	00000002 UsageFault_Handler
0002e2f8 g     F .text	00000094 am_hal_ctimer_period_set
0001b43c g     F .text	0000003a vsnprintf
100040d4 g     O .bss	00000008 g_callout_list
00028828 g     F .text	00000038 ble_hs_pvcy_add_entry
0002e38c g     F .text	00000028 am_hal_ctimer_int_enable
00029acc g     F .text	00000026 ble_uuid_init_from_att_mbuf
00027c54 g     F .text	0000000c ble_hs_hci_set_le_supported_feat
00025f58 g     F .text	00000028 ble_gatts_tx_notifications
00024dd8 g     F .text	0000001e ble_gattc_rx_find_type_value_complete
0002d394 g     F .text	00000058 am_hal_flash_program_main
00026054 g     F .text	00000038 ble_gatts_lcl_svc_foreach
00017ad0 g     F .text	00000050 cmd_gatt_exchange_mtu
0001b0f4 g     F .text	00000300 tfp_format
1005fe48 g       *ABS*	00000000 __HeapLimit
10001e78 g       .bss	00000000 __bss_start__
00026540 g     F .text	00000008 ble_hs_unlock
10000850 g     O .data	000000c0 am_ble_buffer_nvds_data
00014704 g     F .text	00000010 hal_debugger_connected
00018948 g     F .text	00000024 parse_arg_uint8_dflt
00029b90 g     F .text	00000006 ble_uuid_length
0001f58a g     F .text	00000026 ble_att_clt_tx_exec_write
0001ada6 g     F .text	0000000c strtoul
000223dc g     F .text	00000014 ble_gap_disc_cancel
0001f150 g     F .text	00000050 ble_att_clt_rx_find_info
00024c6c g     F .text	000000b8 ble_gattc_indicate_custom
0001f34e g     F .text	00000040 ble_att_clt_tx_read_mult
0002bfd0 g     F .text	00000048 am_hal_ble_wakeup_set
00022cbe g     F .text	0000006e ble_gap_subscribe_event
00015750 g     F .text	00000008 btshell_term_conn
00024ab8 g     F .text	0000006c ble_gattc_write_long
00014364 g     F .text	000002be .hidden __udivmoddi4
10000a6c g     O .data	000000c8 am_ble_buffer_nvds_data_b0
00015714 g     F .text	00000018 btshell_conn_initiate
000159a0 g     F .text	00000028 print_mbuf
0002b574 g     F .text	00000038 _cbor_value_copy_string
0001ee7c g     F .text	00000050 ble_att_set_preferred_mtu
000281f8 g     F .text	0000000e ble_hs_hci_util_handle_pb_bc_join
000276a0 g     F .text	000000d8 ble_hs_conn_addrs
10004ee4 g     O .bss	00000004 g_current_task
0001a100 g     F .text	00000084 os_sanity_run
0001a8cc g     F .text	0000000c os_arch_save_sr
0002863e g     F .text	00000010 ble_hs_misc_peer_addr_type_to_id
10005578 g     O .bss	00000001 sysdown_active
0002f688 g     F .text	00000084 hal_uart_close
00019e04 g     F .text	00000014 os_mempool_init
0001a6ec g     F .text	00000038 os_gettimeofday
00024824 g     F .text	0000005c ble_gattc_disc_all_dscs
10004ef4 g     O .bss	00000001 g_task_id
00018c2c g     F .text	000000c0 parse_eddystone_url
0001e2dc g     F .text	00000140 timeval_to_clocktime
00024a14 g     F .text	00000034 ble_gattc_write_no_rsp
0002ac10 g     F .text	00000160 apollo3_ble_hci_init
10005e7c g     O .bss	00000001 ble_hs_sync_state
100006ac g     O .data	00000008 g_stats_registry
00021f80 g     F .text	00000124 ble_gap_adv_start
0001f5bc g     F .text	00000040 ble_att_clt_tx_notify
00024644 g     F .text	00000058 ble_gattc_disc_all_svcs
10000b34 g     O .data	00000010 am_ble_buffer_patch_b0
00027c44 g     F .text	00000010 ble_hs_hci_acl_tx
0002086c g     F .text	0000007e ble_att_svr_rx_read
0002fa30 g     F .text	000000e8 am_hal_uart_power_control
00018e26 g     F .text	00000016 get_le32
0002f08c g     F .text	0000002c hal_uart_blocking_tx
000376bc g       .text	00000000 __exidx_start
0001b540 g     F .text	0000011c strntoumax
00022390 g     F .text	00000014 ble_gap_disc_active
0001a184 g     F .text	00000010 os_sanity_init
0002c390 g     F .text	00000084 am_hal_ble_default_trim_set_ramcode
00017e28 g     F .text	00000044 cmd_gatt_show
00018928 g     F .text	00000020 parse_arg_uint64
0001962e g     F .text	000000a8 os_mbuf_append
0001d9c6 g     F .text	0000001c shell_register_default_module
0001f2d6 g     F .text	0000002c ble_att_clt_tx_read
000141a4 g     F .text	00000014 os_set_env
0001f548 g     F .text	00000042 ble_att_clt_rx_prep_write
0002ce28 g     F .text	000000b0 am_hal_ble_plf_reg_read
0002bcc8 g     F .text	00000010 hal_bsp_flash_dev
0002e1c0 g     F .text	00000054 am_hal_ctimer_start
00014744 g     F .text	0000004c __libc_init_array
00033db4 g     O .text	00000008 MemFile_methods
10004ed8 g     O .bss	0000000c g_os_sanity_check_mu
00015308 g     F .text	00000010 btshell_exchange_mtu
000141a0  w    F .text	00000002 CLKGEN_IRQHandler
00026548 g     F .text	0000001c ble_hs_process_rx_data_queue
00024e50 g     F .text	0000001e ble_gattc_rx_read_group_type_adata
00034f90 g     O .text	00000006 ble_hs_misc_null_addr
0001a530 g     F .text	0000005c os_task_info_get
0001c050 g     F .text	0000000c console_line_queue_set
0002df60 g     F .text	000001b8 am_hal_cachectrl_control
000146c8 g     F .text	00000038 _sbrk
000297c6 g     F .text	0000000c ble_store_delete_cccd
0002daec g     F .text	00000038 os_tick_idle
000248d8 g     F .text	0000006c ble_gattc_read_by_uuid
0001c12c g     F .text	0000001c console_printf
0001dc70 g     F .text	00000012 shell_os_reset_cmd
0001beb8 g     F .text	00000008 console_blocking_mode
0002b3d6 g     F .text	0000014e cbor_value_enter_container
00022170 g     F .text	0000000a ble_gap_adv_active
0002d388 g     F .text	0000000c am_hal_flash_page_erase
00014740  w    F .text	00000002 _init
0002e3dc g     F .text	00000020 am_hal_ctimer_int_clear
0001f688 g     F .text	0000004a ble_att_tx
000156a8 g     F .text	00000014 btshell_adv_stop
00026008 g     F .text	0000004c ble_gatts_count_cfg
00024944 g     F .text	0000005c ble_gattc_read_long
0001ad9a g     F .text	0000000c strtol
0001dbdc g     F .text	00000094 shell_os_date_cmd
0001534c g     F .text	00000018 btshell_disc_chrs_by_uuid
0002844c g     F .text	00000032 ble_hs_id_copy_addr
00024c54 g     F .text	0000000a ble_gattc_notify
00022ea0 g     F .text	00000038 ble_gap_event_listener_unregister
00028e92 g     F .text	000000ca ble_l2cap_rx
0002db24 g     F .text	00000064 os_tick_init
0002a392 g     F .text	00000040 ble_store_config_read
00028514 g     F .text	0000000a ble_hs_mbuf_acl_pkt
000141a0  w    F .text	00000002 RTC_IRQHandler
0002bdd4 g     F .text	0000000c apollo3_periph_create
0001f5b0 g     F .text	0000000c ble_att_clt_rx_exec_write
0001ca54 g     F .text	00000008 log_console_get
0002a904 g     F .text	00000048 ble_hci_trans_buf_alloc
00018f94 g     F .text	000000d8 os_init
0002ced8 g     F .text	0000004c am_hal_ble_check_32k_clock
00025bc8 g     F .text	00000148 ble_gatts_start
00014120 g     F .text	0000006c Reset_Handler
10002ed8 g     O .bss	00000004 btshell_full_disc_prev_chr_val
00027a9c g     F .text	00000020 ble_hs_hci_set_buf_sz
0002eb7a g     F .text	00000022 strrchr
0001ccdc g     F .text	00000040 modlog_append
10005fac g     O .bss	00000002 ble_hs_hci_avail_pkts
0001bc08 g     F .text	0000000c console_echo
00020d94 g     F .text	00000048 ble_att_svr_reset
00024f20 g     F .text	00000040 ble_gattc_rx_prep_write_rsp
0002cda0 g     F .text	00000044 am_hal_ble_int_enable
00019eec g     F .text	00000038 os_mempool_info_get_next
100055a0 g     O .bss	00000001 sysinit_active
10004f85 g     O .bss	00000001 g_console_silence
00025d7c g     F .text	00000058 ble_gatts_send_next_indicate
00015384 g     F .text	00000018 btshell_disc_all_dscs
000374fc g     O .text	00000004 g_AM_HAL_GPIO_DISABLE
00018e00 g     F .text	00000008 put_le16
00022c20 g     F .text	00000004 ble_gap_unpair_oldest_peer
10005e14 g     O .bss	00000002 ble_hs_max_services
00019590 g     F .text	0000000a os_mbuf_pool_init
000202d4 g     F .text	00000038 ble_att_svr_find_by_uuid
0001423a g     F .text	0000001e os_default_irq_asm
0001a3cc g     F .text	0000000c os_sched_next_task
00022800 g     F .text	0000008c ble_gap_conn_broken
0001a194 g     F .text	00000054 os_sched_insert
00019144 g     F .text	00000080 os_callout_reset
0001ee4e g     F .text	0000002c ble_att_mtu
000193cc g     F .text	00000010 os_dev_reset
0001f00a g     F .text	00000028 ble_att_clt_rx_error
00029408 g     F .text	00000038 ble_l2cap_sig_conn_broken
0001dabc g     F .text	0000004c shell_init
000277f8 g     F .text	0000007c ble_hs_conn_timer
0001b3fc g     F .text	0000001c fprintf
0002862e g     F .text	00000010 ble_hs_misc_own_addr_type_to_id
000267b0 g     F .text	0000000c ble_hs_hw_error
0002811c g     F .text	0000003c ble_hs_hci_evt_process
0001aa68 g     F .text	00000014 os_mutex_init
00022c28 g     F .text	00000008 ble_gap_conn_rssi
0002eb1c g     F .text	00000016 strcat
000146ac g     F .text	0000001c _sbrkInit
00025d30 g     F .text	0000004c ble_gatts_conn_init
00019486 g     F .text	0000001a os_eventq_get_no_wait
00014df0 g     F .text	000002c8 btshell_gap_event
0001f66c g     F .text	0000001c ble_att_cmd_get
0001c53c g     F .text	00000068 flash_map_init
0002eb9c g     F .text	00000014 vprintf
0001433c g     F .text	00000028 .hidden __popcountsi2
00018f00 g     F .text	0000000c os_started
10000000 g       .bss	00000000 _ram_start
0002999a g     F .text	0000003c ble_uuid_cmp
00027c78 g     F .text	00000048 ble_hs_hci_init
0001a348 g     F .text	0000003c os_sched_os_timer_exp
10000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
000264f0 g     F .text	00000024 ble_hs_is_parent_task
00033e08 g     O .text	0000002c log_console_handler
0001e89a g     F .text	0000001e rwlock_release_write
0002f814 g     F .text	00000030 am_hal_uart_interrupt_enable
000196f8 g     F .text	00000058 os_mbuf_appendfrom
00029af2 g     F .text	00000046 ble_uuid_to_any
000141a0  w    F .text	00000002 IOMASTER0_IRQHandler
00026790 g     F .text	00000020 ble_hs_sched_reset
00018a36 g     F .text	00000024 parse_arg_kv_dflt
00015690 g     F .text	00000018 btshell_write_reliable
000372d4 g     O .text	00000040 g_am_hal_mcuctrl_flash_size
0002074a g     F .text	0000007c ble_att_svr_rx_find_type_value
10001e78 g       .data	00000000 __data_end__
0001c828 g     F .text	000000d4 log_register
000282f8 g     F .text	00000038 ble_hs_hci_util_data_hdr_strip
00024bd4 g     F .text	00000080 ble_gattc_notify_custom
0001e820 g     F .text	00000026 rwlock_release_read
00029b38 g     F .text	00000058 ble_uuid_flat
0002c21c g     F .text	00000174 am_hal_ble_power_control
1000630c g     O .bss	00000004 ble_store_config_num_peer_secs
000295e4 g     F .text	00000020 ble_sm_create_chan
0002f8f8 g     F .text	0000010c am_hal_uart_configure
0001890a g     F .text	0000001e parse_arg_uint32
00020648 g     F .text	00000094 ble_att_svr_rx_mtu
00018aa4 g     F .text	0000001c parse_arg_mac
00015364 g     F .text	00000010 btshell_disc_svcs
000156bc g     F .text	00000058 btshell_adv_start
0002021c g     F .text	0000000c ble_att_svr_prev_handle
00022590 g     F .text	00000154 ble_gap_connect
0002968c g     F .text	0000002c ble_store_read
10004f28 g     O .bss	00000004 g_os_time
0002d478 g     F .text	00000006 am_hal_interrupt_master_set
00014196  w    F .text	00000002 SecureFault_Handler
0001ee08 g     F .text	0000000a ble_att_set_peer_mtu
0002ef40 g     F .text	00000040 hal_uart_init_cbs
0001eecc g     F .text	00000028 ble_att_create_chan
0002de90 g     F .text	00000002 hal_watchdog_tickle
10007288 g       .bss	00000000 __bss_end__
000193dc g     F .text	00000020 os_dev_walk
0001959a g     F .text	0000002e os_mbuf_get
00028650 g     F .text	00000014 ble_hs_misc_restore_irks
000298ac g     F .text	00000066 ble_store_util_delete_peer
00017e6c g     F .text	0000000a cmd_gatt_show_local
000155a0 g     F .text	00000058 btshell_read
100033ac g     O .bss	0000000c btshell_conns
00024a48 g     F .text	00000070 ble_gattc_write
00021e2c g     F .text	00000026 ble_gap_rx_rd_rem_sup_feat_complete
000155f8 g     F .text	00000018 btshell_read_long
0001ee32 g     F .text	0000001c ble_att_truncate_to_mtu
000274ca g     F .text	00000034 ble_hs_conn_chan_insert
0001c778 g     F .text	00000010 log_hdr_len
10005e10 g     O .bss	00000002 ble_hs_max_attrs
10006284 g     O .bss	00000080 ble_store_config_cccds
0001a014 g     F .text	00000010 os_msys_reset
000141a0 g     F .text	00000002 Default_Handler
00014790 g     F .text	00000018 _start
00036bb0 g     O .text	00000720 am_ble_buffer_patch_data_b0
00020ddc g     F .text	00000058 ble_att_svr_start
0001dc84 g     F .text	00000038 shell_os_ls_dev_cmd
0001c910 g     F .text	0000000c log_fill_current_img_hash
000157b8 g     F .text	0000006c btshell_tx_start
10006e1c g     O .bss	00000006 g_ble_mac_address
00022484 g     F .text	0000010c ble_gap_disc
00029e84 g     F .text	00000084 ble_svc_ans_init
10005568 g     O .bss	00000010 g_stats_stats
0001a724 g     F .text	00000018 os_time_is_set
000141b8 g     F .text	00000006 os_arch_init_task_stack
10006308 g     O .bss	00000004 ble_store_config_num_our_secs
00019522 g     F .text	00000022 os_eventq_run
00028c98 g     F .text	00000080 ble_hs_stop
00018e3c g     F .text	00000020 swap_in_place
0001a58c g     F .text	0000001c os_task_info_get_next
00019e34 g     F .text	0000003e os_memblock_from
0001bd2c g     F .text	00000034 console_lock
0002eb5a g     F .text	00000020 strncmp
0001577c g     F .text	0000001c btshell_ext_scan
0002aba8 g     F .text	0000004c apollo3_hci_int
000141a0  w    F .text	00000002 ADC_IRQHandler
00029504 g     F .text	0000003e ble_l2cap_sig_cmd_get
10003728 g     O .bss	00000050 g_idle_task
0002e3fc g     F .text	00000020 am_hal_ctimer_int_set
100006b4 g     O .data	00000004 sysinit_panic_cb
000141a0  w    F .text	00000002 IOMASTER4_IRQHandler
00028664 g     F .text	00000014 ble_mqueue_init
10007084 g     O .bss	00000002 g_pui8RxBuffer
10004ed4 g     O .bss	00000004 g_os_sanity_check_list
0002d0bc g     F .text	000001b8 am_hal_ble_patch_complete
00027640 g     F .text	00000018 ble_hs_conn_find
000283c4 g     F .text	00000050 ble_hs_id_addr
0002cbb8 g     F .text	0000002c am_hal_ble_default_copy_patch_apply
0002475c g     F .text	0000005c ble_gattc_disc_all_chrs
0002ef80 g     F .text	000000a4 hal_uart_start_tx
000296b8 g     F .text	00000028 ble_store_delete
0001acf6 g     F .text	00000034 strcasecmp
000141a0  w    F .text	00000002 CTIMER_IRQHandler
00019e72 g     F .text	00000032 os_memblock_get
0002d460 g     F .text	00000010 am_hal_flash_store_ui32
0001a2c0 g     F .text	00000088 os_sched_wakeup
0002a5fc g     F .text	0000005c ble_store_config_init
00024d7e g     F .text	0000001e ble_gattc_rx_find_info_idata
0002e7d8 g     F .text	00000010 os_sem_init
0001db2c g     F .text	000000b0 shell_os_mpool_display_cmd
000264e4 g     F .text	0000000c ble_hs_evq_set
00022d64 g     F .text	00000030 ble_gap_preempt_no_lock
0002a018 g     F .text	00000028 ble_svc_gap_device_name_set
0002ea9c g     F .text	00000060 realloc
0001ddac g     F .text	00000040 shell_os_register
0001e6d8 g     F .text	00000030 mem_init_mbuf_pool
00027694 g     F .text	0000000c ble_hs_conn_first
0002d854 g     F .text	000000d8 am_hal_pwrctrl_low_power_init
00018d68 g     F .text	00000098 os_default_irq
0002d804 g     F .text	00000050 am_hal_pwrctrl_blebuck_trim
0001df70 g     F .text	00000024 sysdown_release
0002e240 g     F .text	00000028 am_hal_ctimer_clear
10000b64 g     O .data	000012b4 am_ble_performance_patch_data_b0
10005d0c g     O .bss	00000001 ble_hs_enabled_state
00021ebc g     F .text	00000026 ble_gap_timer
00027b90 g     F .text	000000b4 ble_hs_hci_acl_tx_now
000141a0  w    F .text	00000002 IOSLAVE_ACC_IRQHandler
00019e18 g     F .text	0000001c os_mempool_ext_init
00015798 g     F .text	00000008 btshell_scan_cancel
00024e8c g     F .text	00000030 ble_gattc_rx_read_rsp
10004ee8 g     O .bss	00000004 g_os_last_ctx_sw_time
0002e7e8 g     F .text	00000064 os_sem_release
0002ebd8 g     F .text	0000005c ble_hs_shutdown
000141a0  w    F .text	00000002 SOFTWARE0_IRQHandler
0002c7b0 g     F .text	000002a8 am_hal_ble_patch_apply
0001ac2c g     F .text	00000048 memcmp
0001a92c g     F .text	00000018 os_arch_init
000141a0  w    F .text	00000002 STIMER_CMPR3_IRQHandler
00026778 g     F .text	00000018 ble_hs_notifications_sched
10006e24 g     O .bss	00000100 g_read_buf
100064f0 g     O .bss	00000004 BLE
00024d9c g     F .text	0000001e ble_gattc_rx_find_info_complete
00014624  w    F .text	00000002 .hidden __aeabi_ldiv0
0002469c g     F .text	00000064 ble_gattc_disc_svc_by_uuid
0001e044 g     F .text	0000000c sysinit_start
0002de10 g     F .text	0000007a hal_timer_config
00019388 g     F .text	00000044 os_dev_open
0002a514 g     F .text	00000028 ble_store_config_write
0001ad50 g     F .text	0000002a strncat
00024b24 g     F .text	000000b0 ble_gattc_write_reliable
00019cde g     F .text	000000ae os_mbuf_pack_chains
00025ea0 g     F .text	000000b8 ble_gatts_chr_updated
000188e6 g     F .text	00000012 parse_arg_uint16
10000a5c g     O .data	0000000c am_hal_ble_default_patch_array
0001c048 g     F .text	00000008 console_is_init
00027ae0 g     F .text	0000007c ble_hs_hci_cmd_tx
0002e84c g     F .text	000000b4 os_sem_pend
0002c11c g     F .text	00000100 am_hal_ble_config
000273a6 g     F .text	0000003c ble_hs_adv_parse
0002de8e g     F .text	00000002 hal_watchdog_enable
0001e8b8 g     F .text	00000030 rwlock_init
00028b00 g     F .text	00000078 ble_hs_startup_go
0001e7c6 g     F .text	0000005a rwlock_acquire_read
000267bc g     F .text	0000007c ble_hs_start
0002671c g     F .text	0000000a ble_hs_timer_resched
00019f70 g     F .text	0000004c os_msys_register
10003878 g     O .bss	00000004 g_os_idle_ctr
0001adb2 g     F .text	0000000c strtoull
0001984c g     F .text	0000007a os_mbuf_cmpf
000299d8 g     F .text	000000a8 ble_uuid_to_str
0002548e g     F .text	0000008e ble_gatts_clt_cfg_access
0001acbe g     F .text	00000038 memset
0001f476 g     F .text	00000066 ble_att_clt_tx_write_cmd
10000930 g     O .data	00000010 am_ble_performance_copy_patch
00014020 g       .text	00000100 __isr_vector
00020a6c g     F .text	0000006e ble_att_svr_rx_write
00015844 g     F .text	0000012c main
0002a80c g     F .text	00000050 apollo3_hci_radio_shutdown
000141a0  w    F .text	00000002 STIMER_CMPR2_IRQHandler
00020cf6 g     F .text	0000006c ble_att_svr_rx_indicate
10000a58 g     O .data	00000004 am_hal_ble_default_copy_patches
0002988e g     F .text	0000001e ble_store_util_delete_all
0001c330 g     F .text	00000038 console_out_nolock
00015a8c g     F .text	00000084 print_conn_desc
00018836 g     F .text	00000066 parse_arg_uint64_bounds
00028e26 g     F .text	0000000c ble_l2cap_get_conn_handle
0001cca8 g     F .text	00000034 modlog_register
0001e050 g     F .text	0000000c sysinit_end
00022780 g     F .text	00000040 ble_gap_terminate
0001cd58 g     F .text	000000c8 modlog_init
000141be g     F .text	00000046 SVC_Handler
00022ed8 g     F .text	00000080 ble_gap_init
000223f0 g     F .text	00000014 ble_gap_conn_active
00021d80 g     F .text	00000084 ble_gap_set_prefered_le_phy
0001940c g     F .text	0000000a os_eventq_inited
0003524c g     O .text	00000008 sysdown_cbs
0001e0d4 g     F .text	00000208 clocktime_to_timeval
0001e8f2 g     F .text	0000001c streamer_printf
00028498 g     F .text	00000018 ble_hs_id_reset
0001bd60 g     F .text	0000003c console_unlock
0002d2e8 g     F .text	000000a0 am_hal_ble_tx_power_set
00019588 g     F .text	00000008 os_eventq_dflt_get
00018b94 g     F .text	00000098 parse_arg_all
00028532 g     F .text	00000028 ble_hs_mbuf_from_flat
000194a0 g     F .text	00000082 os_eventq_get
10000940 g     O .data	00000010 am_ble_performance_patch
0001a882 g     F .text	0000002a os_time_ms_to_ticks
0001c7e0 g     F .text	0000000a log_walk
00019220 g     F .text	0000003c os_callout_wakeup_ticks
00021e14 g     F .text	00000018 ble_gap_rx_adv_report
00028df8 g     F .text	0000002e ble_l2cap_prepend_hdr
0001e8e8 g     F .text	0000000a streamer_vprintf
00028528 g     F .text	0000000a ble_hs_mbuf_att_pkt
10005008 g     O .bss	00000004 flash_map_entries
000197aa g     F .text	000000a2 os_mbuf_adj
000141a0  w    F .text	00000002 SCARD_IRQHandler
000228f0 g     F .text	00000036 ble_gap_reset_state
0001908e g     F .text	00000008 os_reboot
00014020 g       .imghdr	00000000 __text
00021ee4 g     F .text	0000009c ble_gap_wl_set
00017e78 g     F .text	000001f4 cmd_gatt_write
100061d4 g     O .bss	00000034 ble_l2cap_stats
00026856 g     F .text	00000008 ble_hs_tx_data
0001ad2a g     F .text	00000018 strcmp
0002a11c g     F .text	00000020 ble_svc_gatt_changed
0001c304 g     F .text	0000002c uart_console_blocking_mode
0001a218 g     F .text	0000000c os_sched_get_current_task
0001bdbc g     F .text	00000078 console_write
000159f0 g     F .text	0000001c print_uuid
00028dc4 g     F .text	00000008 ble_l2cap_is_mtu_req_sent
0001ac1c g     F .text	00000010 lrand48
0002cf24 g     F .text	000000a8 am_hal_ble_plf_reg_write
0001f21c g     F .text	0000004a ble_att_clt_tx_read_type
000245f0 g     F .text	00000054 ble_gattc_exchange_mtu
00014648 g     F .text	00000030 SystemInit
0002994a g     F .text	00000050 ble_uuid_init_from_buf
0002cde4 g     F .text	0000001c am_hal_ble_int_status
000284b0 g     F .text	00000024 ble_hs_log_mbuf
00019544 g     F .text	00000042 os_eventq_remove
00027658 g     F .text	00000018 ble_hs_conn_insert
0001a048 g     F .text	00000018 os_msys_num_free
00029330 g     F .text	000000b8 ble_l2cap_sig_update
0002a040 g     F .text	00000074 ble_svc_gap_init
0002e6f4 g     F .text	00000020 am_hal_stimer_counter_get
0001f4dc g     F .text	0000000a ble_att_clt_rx_write
00018e08 g     F .text	00000014 put_le32
0002e6e0 g     F .text	00000014 am_hal_stimer_config
00025f80 g     F .text	00000048 ble_gatts_add_svcs
00035560 g     O .text	00000d38 am_ble_buffer_patch_data
00017b20 g     F .text	0000003c cmd_gatt_notify
0002eafc g     F .text	00000020 sprintf
000188f8 g     F .text	00000012 parse_arg_uint16_peek
0002f844 g     F .text	00000030 am_hal_uart_interrupt_disable
00027d10 g     F .text	00000038 ble_hs_hci_cmd_send_buf
0001f63c g     F .text	0000000a ble_att_clt_rx_indicate
0001f1a0 g     F .text	00000048 ble_att_clt_tx_find_type_value
0001f340 g     F .text	0000000e ble_att_clt_rx_read_blob
0001a3d8 g     F .text	00000022 os_sched
0001f1e8 g     F .text	00000034 ble_att_clt_rx_find_type_value
000274b4 g     F .text	00000016 ble_hs_conn_chan_find_by_scid
0002f024 g     F .text	00000068 hal_uart_start_rx
0001f266 g     F .text	00000070 ble_att_clt_rx_read_type
0002855a g     F .text	0000002a ble_hs_mbuf_to_flat
10006304 g     O .bss	00000004 ble_store_config_num_cccds
0001ab3c g     F .text	000000e0 os_mutex_pend
00000000 g       .svc_table	00000000 SVC_Table
0002851e g     F .text	0000000a ble_hs_mbuf_l2cap_pkt
00024df8 g     F .text	0000002c ble_gattc_rx_read_type_adata
000376d4 g       *ABS*	00000000 _init_data
0002c43c g     F .text	00000314 am_hal_ble_blocking_transfer
1005fff8 g       .bss	00000000 __StackTop
10001e18 g     O .data	0000000c am_hal_ble_default_patch_array_b0
0001ee12 g     F .text	00000020 ble_att_chan_mtu
00028208 g     F .text	00000040 ble_hs_hci_util_read_adv_tx_pwr
10000b44 g     O .data	00000010 am_ble_nvds_patch_b0
0001a784 g     F .text	00000074 os_settimeofday
00029740 g     F .text	0000000c ble_store_write_our_sec
00015330 g     F .text	0000001c btshell_disc_all_chrs_in_svc
0002d790 g     F .text	00000074 am_hal_pwrctrl_periph_disable
00017dd0 g     F .text	00000058 cmd_gatt_find_included_services
0002860c g     F .text	00000022 ble_hs_misc_conn_chan_find_reqd
00024700 g     F .text	0000005c ble_gattc_find_inc_svcs
0002752c g     F .text	00000020 ble_hs_conn_foreach
0002e140 g     F .text	00000080 am_hal_ctimer_config_single
0001b65c g     F .text	0000001e strsep
00020cb8 g     F .text	0000003e ble_att_svr_rx_notify
0001eef4 g     F .text	00000038 ble_att_init
0002044a g     F .text	00000016 ble_att_svr_ticks_until_tmo
000141a0  w    F .text	00000002 VCOMP_IRQHandler
0002847e g     F .text	0000001a ble_hs_id_use_addr
000157a8 g     F .text	00000008 btshell_notify
00027488 g     F .text	0000002c ble_hs_conn_can_alloc
0002743e g     F .text	0000002c ble_hs_atomic_conn_flags
0002869a g     F .text	0000003e ble_mqueue_put
00021d2a g     F .text	00000056 ble_gap_set_prefered_default_le_phy
0002827e g     F .text	00000026 ble_hs_hci_util_set_random_addr
0002cc94 g     F .text	0000010c am_hal_ble_int_service
0002e734 g     F .text	00000078 am_hal_stimer_compare_delta_set
0002c018 g     F .text	000000a8 am_hal_ble_initialize
000220a4 g     F .text	00000048 ble_gap_adv_set_data
00020f0c g     F .text	0000006e ble_eddystone_set_adv_data_url
00015318 g     F .text	00000018 btshell_disc_all_chrs
000278ac g     F .text	00000004 ble_hs_flow_startup
00029488 g     F .text	00000034 ble_l2cap_sig_init
0002e268 g     F .text	00000090 am_hal_ctimer_read
000191c4 g     F .text	0000005c os_callout_tick
00027874 g     F .text	00000034 ble_hs_conn_init
00035254 g     O .text	00000048 sysflash_map_dflt
00022d94 g     F .text	00000018 ble_gap_preempt
0001c37c g     F .text	00000010 uart_console_is_init
00014120 g       .text	00000000 __isr_vector_end
0001906c g     F .text	00000022 os_start
00029588 g     F .text	0000001e ble_l2cap_sig_reject_invalid_cid_tx
00022a5c g     F .text	00000098 ble_gap_rx_param_req
0002974c g     F .text	0000000e ble_store_read_peer_sec
00017918 g     F .text	00000090 cmd_gatt_discover_characteristic
0001896c g     F .text	00000024 parse_arg_uint16_dflt
0001a440 g     F .text	0000000a os_task_stacktop_get
000187d2 g     F .text	00000020 parse_arg_long_bounds_peek
10005c04 g     O .bss	00000098 ble_gattc_stats
000141a0  w    F .text	00000002 MSPI_IRQHandler
0002f554 g     F .text	00000134 hal_uart_config
0002e7ac g     F .text	00000014 am_hal_stimer_int_enable
000294f6 g     F .text	0000000e ble_l2cap_sig_hdr_parse
0002056a g     F .text	00000030 ble_att_svr_tx_error_rsp
0002e3b4 g     F .text	00000028 am_hal_ctimer_int_disable
000187f2 g     F .text	00000020 parse_arg_long_bounds
00028860 g     F .text	00000078 ble_hs_pvcy_set_our_irk
00022928 g     F .text	000000c0 ble_gap_rx_update_complete
00019ad0 g     F .text	00000044 os_mbuf_concat
0002c750 g     F .text	00000060 am_hal_ble_blocking_hci_write
0001bec0 g     F .text	00000188 console_handle_char
0002975a g     F .text	00000052 ble_store_write_peer_sec
0002e214 g     F .text	0000002c am_hal_ctimer_stop
00018a84 g     F .text	00000020 parse_arg_byte_stream_exact_length
0002bc48 g     F .text	0000007e _cbor_value_dup_string
0002ca58 g     F .text	00000074 am_hal_ble_default_patch_apply
10001e24 g     O .data	00000004 am_hal_ble_default_patches_b0
0001d9e4 g     F .text	0000004c shell_register
000178b4 g     F .text	00000048 cmd_parse_conn_start_end
00015678 g     F .text	00000018 btshell_write_long
10000670 g     O .data	00000008 g_os_run_list
00014678 g     F .text	00000034 NVIC_Relocate
00026528 g     F .text	00000010 ble_hs_unlock_nested
00037354 g     O .text	000000b4 am_hal_pwrctrl_peripheral_control
000141a0  w    F .text	00000002 IOMASTER3_IRQHandler
00018cec g     F .text	00000038 sysinit_app
00028d68 g     F .text	00000034 ble_l2cap_chan_alloc
10000a68 g     O .data	00000004 am_hal_ble_default_patches
0001f118 g     F .text	00000038 ble_att_clt_tx_find_info
10004f2c g     O .bss	00000004 os_flags
00015374 g     F .text	00000010 btshell_disc_svc_by_uuid
00018724 g     F .text	00000038 parse_arg_peek
00015b10 g     F .text	00000034 print_svc
0001a8d8 g     F .text	00000006 os_arch_restore_sr
000141a0  w    F .text	00000002 BLE_IRQHandler
00028f9c g     F .text	00000050 ble_l2cap_init
00037694 g     O .text	00000028 g_sUartConfig
0001f032 g     F .text	00000082 ble_att_clt_tx_mtu
00021cd6 g     F .text	00000054 ble_gap_read_le_phy
0002a68c g     F .text	0000002e ble_hs_util_ensure_addr
1005fe48 g       *ABS*	000001b0 __StackLimit
00024e6e g     F .text	0000001e ble_gattc_rx_read_group_type_complete
100040d0 g     O .bss	00000004 g_os_started
00015628 g     F .text	0000001c btshell_read_mult
00017d0c g     F .text	00000060 cmd_gatt_service_changed
000141a0  w    F .text	00000002 STIMER_CMPR7_IRQHandler
000178fc g     F .text	0000001c cmd_init
0002217c g     F .text	000001bc ble_gap_rx_conn_complete
0002a94c g     F .text	000000a4 ble_hci_trans_buf_free
00028f5c g     F .text	0000003e ble_l2cap_tx
0002d414 g     F .text	00000040 am_hal_flash_delay_status_check
0002a8e8 g     F .text	00000014 ble_hci_trans_cfg_hs
00024e24 g     F .text	0000002c ble_gattc_rx_read_type_complete
0002b524 g     F .text	00000050 cbor_value_leave_container
00022c24 g     F .text	00000004 ble_gap_unpair_oldest_except
000249a0 g     F .text	00000074 ble_gattc_read_mult
000297ba g     F .text	0000000c ble_store_write_cccd
00014628 g     F .text	00000020 SystemCoreClockUpdate
0001960e g     F .text	00000020 os_mbuf_free_chain
0002a5d4 g     F .text	00000028 ble_store_config_delete
0002656c g     F .text	0000003a ble_hs_wakeup_tx
0001a7f8 g     F .text	0000003c os_get_uptime
00028248 g     F .text	00000036 ble_hs_hci_util_read_rssi
0001a060 g     F .text	00000034 os_msys_init
0002761c g     F .text	00000024 ble_hs_conn_remove
00020228 g     F .text	00000018 ble_att_svr_find_by_handle
000196d6 g     F .text	00000022 os_mbuf_off
10004f87 g     O .bss	00000001 g_is_output_nlip
00027abc g     F .text	00000024 ble_hs_hci_add_avail_pkts
0001da30 g     F .text	0000008c shell_cmd_register
0001a66c g     F .text	0000000c os_time_get
10005178 g     O .bss	0000001c modlog_mapping_pool
0002d3ec g     F .text	00000028 am_hal_flash_delay
00015670 g     F .text	00000008 btshell_write_no_rsp
00020b52 g     F .text	000000b2 ble_att_svr_rx_prep_write
0001c788 g     F .text	00000058 log_append_body
10000b54 g     O .data	00000010 am_ble_performance_patch_b0
0001f4e6 g     F .text	00000062 ble_att_clt_tx_prep_write
000195c8 g     F .text	00000032 os_mbuf_get_pkthdr
10006310 g     O .bss	000000f0 ble_store_config_our_secs
1000500c g     O .bss	00000008 g_log_info
00014624  w    F .text	00000002 .hidden __aeabi_idiv0
0001e41c g     F .text	000001f6 datetime_parse
10005e12 g     O .bss	00000002 ble_hs_max_client_configs
000208ea g     F .text	00000082 ble_att_svr_rx_read_blob
00025d10 g     F .text	00000020 ble_gatts_conn_can_alloc
00026514 g     F .text	00000014 ble_hs_lock_nested
0001572c g     F .text	0000001c btshell_ext_conn_initiate
0002735c g     F .text	00000010 ble_hs_adv_set_fields
000141a0  w    F .text	00000002 STIMER_CMPR0_IRQHandler
0001a44c g     F .text	000000e4 os_task_init
000141a0  w    F .text	00000002 BROWNOUT_IRQHandler
0002cbe4 g     F .text	000000b0 am_hal_ble_blocking_hci_read
000297ea g     F .text	0000002a ble_store_key_from_value_sec
00014192  w    F .text	00000002 BusFault_Handler
00028d18 g     F .text	0000001c ble_hs_stop_init
0001ca5c g     F .text	00000064 log_console_init
0002673c g     F .text	0000003c ble_hs_enqueue_hci_event
0001df94 g     F .text	000000a8 sysdown
00015a78 g     F .text	00000014 chr_is_empty
0001c05c g     F .text	00000028 console_line_event_put
0001ad42 g     F .text	0000000e strlen
00019304 g     F .text	00000038 os_dev_create
000274fe g     F .text	0000002c ble_hs_conn_delete_chan
00019ea4 g     F .text	0000001e os_memblock_put_from_cb
0001e846 g     F .text	00000054 rwlock_acquire_write
000193fc g     F .text	00000010 os_eventq_init
00017a00 g     F .text	00000080 cmd_gatt_discover_service
0001f38e g     F .text	0000000e ble_att_clt_rx_read_mult
0001a678 g     F .text	0000004c os_time_advance
0002d574 g     F .text	0000005c am_hal_mcuctrl_info_get
00015748 g     F .text	00000008 btshell_conn_cancel
00020d64 g     F .text	00000018 ble_att_svr_hide_range
0001a3fc g     F .text	0000002c os_sched_resort
00036bac g     O .text	00000004 am_hal_ble_num_default_patches
00029b96 g     F .text	00000024 ble_uuid_to_mbuf
0001583c g     F .text	00000008 btshell_rssi
00020b1a g     F .text	00000024 ble_att_svr_write_local
00021ca4 g     F .text	0000002a ble_gap_conn_find
10007088 g     O .bss	00000100 g_pui8TxBuffer
00019c78 g     F .text	00000012 os_mbuf_prepend_pullup
0001ec02 g     F .text	0000000e ble_att_conn_chan_find
0002bce0 g     F .text	0000002c hal_flash_init
00018e1c g     F .text	0000000a get_le16
0002a714 g     F .text	000000f8 apollo3_hci_radio_boot
0002eb32 g     F .text	00000014 strchr
0001dea4 g     F .text	00000058 stats_module_init
00021e7c g     F .text	00000040 ble_gap_rx_phy_update_complete
00014190  w    F .text	00000002 MemoryManagement_Handler
0002fb3c g     F .text	00000014 am_hal_queue_init
00022dac g     F .text	000000c4 ble_gap_preempt_done
00024f02 g     F .text	0000001e ble_gattc_rx_write_rsp
00029604 g     F .text	00000032 ble_sm_cmd_get
00027c6c g     F .text	0000000c ble_hs_hci_get_hci_version
0001f0b4 g     F .text	00000064 ble_att_clt_rx_mtu
0002a8fc g     F .text	00000008 ble_hci_trans_hs_acl_tx
000265a8 g     F .text	00000014 ble_hs_is_enabled
0001cac0 g     F .text	0000001c log_level_get
000284d4 g     F .text	0000000c ble_hs_log_flat_buf
00029544 g     F .text	00000044 ble_l2cap_sig_reject_tx
00020ada g     F .text	00000040 ble_att_svr_rx_write_no_rsp
000201cc g     F .text	00000050 ble_att_svr_register
0001933c g     F .text	0000002c os_dev_initialize_all
00028678 g     F .text	00000022 ble_mqueue_get
0002237c g     F .text	00000014 ble_gap_adv_stop
0002e47c g     F .text	00000264 am_hal_gpio_pinconfig
0001cd1c g     F .text	0000003a modlog_printf
0002608c g     F .text	00000028 ble_gatts_reset
000179a8 g     F .text	00000058 cmd_gatt_discover_descriptor
000285dc g     F .text	00000030 ble_hs_misc_conn_chan_find
00024c5e g     F .text	0000000c ble_gatts_indicate_fail_notconn
0002746a g     F .text	0000001c ble_hs_atomic_first_conn_handle
10000678 g     O .data	00000008 g_os_sleep_list
0001b494 g     F .text	00000050 jrand48
0001426c g     F .text	00000000 .hidden __aeabi_ldivmod
00028740 g     F .text	00000024 ble_hs_pvcy_ensure_started
0001e928 g     F .text	00000008 streamer_console_get
0002736c g     F .text	0000003a ble_hs_adv_parse_fields
0002bcd8 g     F .text	00000008 hal_bsp_init
000141a0  w    F .text	00000002 STIMER_CMPR5_IRQHandler
00024fa6 g     F .text	0000000c ble_gattc_connection_broken
000190a0 g     F .text	0000004c os_pkg_init
00022a48 g     F .text	00000014 ble_gap_conn_cancel
00021cce g     F .text	00000008 ble_gap_set_priv_mode
0002214c g     F .text	00000024 ble_gap_adv_rsp_set_fields
00018b30 g     F .text	00000064 parse_arg_uuid
000220ec g     F .text	0000003c ble_gap_adv_rsp_set_data
0002cfcc g     F .text	000000d4 am_hal_ble_transmitter_modex_set
0002288c g     F .text	00000064 ble_gap_rx_disconn_complete
0001a0d0 g     F .text	00000010 os_sanity_check_init
00018812 g     F .text	00000024 parse_arg_long_bounds_dflt
0002759c g     F .text	00000080 ble_hs_conn_alloc
00027b5c g     F .text	00000032 ble_hs_hci_rx_evt
0002f0b8 g     F .text	0000049a hal_uart_init
0002bc40 g     F .text	00000008 cbor_value_to_pretty_advance
000282a4 g     F .text	00000054 ble_hs_hci_util_set_data_len
0001de48 g     F .text	00000022 stats_init
0001b3f4 g     F .text	00000008 vfprintf
0001b67a g     F .text	00000032 strpbrk
0002d454 g     F .text	0000000c am_hal_flash_load_ui32
10004080 g     O .bss	00000050 g_os_main_task
0002ea70 g     F .text	0000002c free
000157a0 g     F .text	00000008 btshell_update_conn
0001bd9c g     F .text	0000001e console_out



Disassembly of section .text:

00014020 <__isr_vector>:
   14020:	1005fff8 	.word	0x1005fff8
   14024:	00014121 	.word	0x00014121
   14028:	0001418d 	.word	0x0001418d
   1402c:	0001418f 	.word	0x0001418f
   14030:	00014191 	.word	0x00014191
   14034:	00014193 	.word	0x00014193
   14038:	00014195 	.word	0x00014195
   1403c:	00014197 	.word	0x00014197
	...
   1404c:	000141bf 	.word	0x000141bf
   14050:	0001419b 	.word	0x0001419b
   14054:	00000000 	.word	0x00000000
   14058:	00014205 	.word	0x00014205
   1405c:	0001422f 	.word	0x0001422f
   14060:	000141a1 	.word	0x000141a1
   14064:	000141a1 	.word	0x000141a1
   14068:	000141a1 	.word	0x000141a1
   1406c:	000141a1 	.word	0x000141a1
   14070:	000141a1 	.word	0x000141a1
   14074:	000141a1 	.word	0x000141a1
   14078:	000141a1 	.word	0x000141a1
   1407c:	000141a1 	.word	0x000141a1
   14080:	000141a1 	.word	0x000141a1
   14084:	000141a1 	.word	0x000141a1
   14088:	000141a1 	.word	0x000141a1
   1408c:	000141a1 	.word	0x000141a1
   14090:	000141a1 	.word	0x000141a1
   14094:	000141a1 	.word	0x000141a1
   14098:	000141a1 	.word	0x000141a1
   1409c:	000141a1 	.word	0x000141a1
   140a0:	000141a1 	.word	0x000141a1
   140a4:	000141a1 	.word	0x000141a1
   140a8:	000141a1 	.word	0x000141a1
   140ac:	000141a1 	.word	0x000141a1
   140b0:	000141a1 	.word	0x000141a1
   140b4:	000141a1 	.word	0x000141a1
   140b8:	000141a1 	.word	0x000141a1
   140bc:	000141a1 	.word	0x000141a1
   140c0:	000141a1 	.word	0x000141a1
   140c4:	000141a1 	.word	0x000141a1
   140c8:	000141a1 	.word	0x000141a1
   140cc:	000141a1 	.word	0x000141a1
   140d0:	000141a1 	.word	0x000141a1
   140d4:	000141a1 	.word	0x000141a1
   140d8:	000141a1 	.word	0x000141a1
   140dc:	000141a1 	.word	0x000141a1

000140e0 <__ble_patch>:
	...

00014120 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
   14120:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
   14124:	4a0f      	ldr	r2, [pc, #60]	; (14164 <.bss_zero_loop+0x3c>)
    ldr     r3, =__bss_end__
   14126:	4b10      	ldr	r3, [pc, #64]	; (14168 <.bss_zero_loop+0x40>)

00014128 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
   14128:	429a      	cmp	r2, r3
    itt     lt
   1412a:	bfbc      	itt	lt
    strlt   r0, [r2], #4
   1412c:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
   14130:	e7fa      	blt.n	14128 <.bss_zero_loop>
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
   14132:	490e      	ldr	r1, [pc, #56]	; (1416c <.bss_zero_loop+0x44>)
    ldr    r2, =__data_start__
   14134:	4a0e      	ldr	r2, [pc, #56]	; (14170 <.bss_zero_loop+0x48>)
    ldr    r3, =__data_end__
   14136:	4b0f      	ldr	r3, [pc, #60]	; (14174 <.bss_zero_loop+0x4c>)

    subs    r3, r2
   14138:	1a9b      	subs	r3, r3, r2
    ble     .LC0
   1413a:	dd03      	ble.n	14144 <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
   1413c:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
   1413e:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
   14140:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
   14142:	dcfb      	bgt.n	1413c <.bss_zero_loop+0x14>

.LC0:

	ldr		r0, =__StackTop
   14144:	480c      	ldr	r0, [pc, #48]	; (14178 <.bss_zero_loop+0x50>)
	msr		psp, r0
   14146:	f380 8809 	msr	PSP, r0
	msr		msp, r0
   1414a:	f380 8808 	msr	MSP, r0

    LDR     R0, =__HeapBase
   1414e:	480b      	ldr	r0, [pc, #44]	; (1417c <.bss_zero_loop+0x54>)
    LDR     R1, =__HeapLimit
   14150:	490b      	ldr	r1, [pc, #44]	; (14180 <.bss_zero_loop+0x58>)
    BL      _sbrkInit
   14152:	f000 faab 	bl	146ac <_sbrkInit>

    LDR     R0, =SystemInit
   14156:	480b      	ldr	r0, [pc, #44]	; (14184 <.bss_zero_loop+0x5c>)
    BLX     R0
   14158:	4780      	blx	r0

    BL      hal_system_init
   1415a:	f000 fad1 	bl	14700 <hal_system_init>

    LDR     R0, =_start
   1415e:	480a      	ldr	r0, [pc, #40]	; (14188 <.bss_zero_loop+0x60>)
    BX      R0
   14160:	4700      	bx	r0
   14162:	0000      	.short	0x0000
    ldr     r2, =__bss_start__
   14164:	10001e78 	.word	0x10001e78
    ldr     r3, =__bss_end__
   14168:	10007288 	.word	0x10007288
    ldr    r1, =__etext
   1416c:	000376d4 	.word	0x000376d4
    ldr    r2, =__data_start__
   14170:	10000100 	.word	0x10000100
    ldr    r3, =__data_end__
   14174:	10001e78 	.word	0x10001e78
	ldr		r0, =__StackTop
   14178:	1005fff8 	.word	0x1005fff8
    LDR     R0, =__HeapBase
   1417c:	10007288 	.word	0x10007288
    LDR     R1, =__HeapLimit
   14180:	1005fe48 	.word	0x1005fe48
    LDR     R0, =SystemInit
   14184:	00014649 	.word	0x00014649
    LDR     R0, =_start
   14188:	00014791 	.word	0x00014791

0001418c <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
   1418c:	e7fe      	b.n	1418c <NMI_Handler>

0001418e <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
   1418e:	e7fe      	b.n	1418e <HardFault_Handler>

00014190 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
   14190:	e7fe      	b.n	14190 <MemoryManagement_Handler>

00014192 <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
   14192:	e7fe      	b.n	14192 <BusFault_Handler>

00014194 <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
   14194:	e7fe      	b.n	14194 <UsageFault_Handler>

00014196 <SecureFault_Handler>:


    .weak   SecureFault_Handler
    .type   SecureFault_Handler, %function
SecureFault_Handler:
    B       .
   14196:	e7fe      	b.n	14196 <SecureFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
   14198:	e7fe      	b.n	14198 <SecureFault_Handler+0x2>

0001419a <DebugMon_Handler>:


    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    B       .
   1419a:	e7fe      	b.n	1419a <DebugMon_Handler>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
   1419c:	e7fe      	b.n	1419c <DebugMon_Handler+0x2>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
   1419e:	e7fe      	b.n	1419e <DebugMon_Handler+0x4>

000141a0 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
   141a0:	e7fe      	b.n	141a0 <Default_Handler>
   141a2:	bf00      	nop

000141a4 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   141a4:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   141a8:	482b      	ldr	r0, [pc, #172]	; (14258 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   141aa:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   141ac:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   141ae:	f380 8814 	msr	CONTROL, r0
        ISB
   141b2:	f3bf 8f6f 	isb	sy
        BX      LR
   141b6:	4770      	bx	lr

000141b8 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   141b8:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   141bc:	4770      	bx	lr

000141be <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   141be:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   141c2:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   141c4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   141c8:	b951      	cbnz	r1, 141e0 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   141ca:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   141ce:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   141d0:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   141d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   141d6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   141da:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   141de:	4770      	bx	lr

000141e0 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   141e0:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   141e2:	4a1e      	ldr	r2, [pc, #120]	; (1425c <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   141e4:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   141e6:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   141e8:	d809      	bhi.n	141fe <SVC_Done>

        LDR     R4,=SVC_Table-4
   141ea:	4c1d      	ldr	r4, [pc, #116]	; (14260 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   141ec:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   141f0:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   141f4:	47a0      	blx	r4

        MRS     R12,PSP
   141f6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   141fa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

000141fe <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   141fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   14202:	4770      	bx	lr

00014204 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   14204:	4b17      	ldr	r3, [pc, #92]	; (14264 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   14206:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   14208:	4b17      	ldr	r3, [pc, #92]	; (14268 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   1420a:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   1420c:	4291      	cmp	r1, r2
        IT      EQ
   1420e:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   14210:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   14212:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
   14216:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   1421a:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1421e:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   14220:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
   14224:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
   14228:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1422c:	4770      	bx	lr

0001422e <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1422e:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   14230:	f006 fb3d 	bl	1a8ae <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   14234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   14238:	4770      	bx	lr

0001423a <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1423a:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1423e:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   14240:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   14244:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   14248:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   1424c:	4668      	mov	r0, sp
        BL      os_default_irq
   1424e:	f004 fd8b 	bl	18d68 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   14252:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   14256:	4770      	bx	lr
        LDR     R0,=os_flags
   14258:	10004f2c 	.word	0x10004f2c
        LDR     R2,=SVC_Count
   1425c:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   14260:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   14264:	10000670 	.word	0x10000670
        LDR     R3,=g_current_task      /* Get current task */
   14268:	10004ee4 	.word	0x10004ee4

0001426c <__aeabi_ldivmod>:
   1426c:	b97b      	cbnz	r3, 1428e <__aeabi_ldivmod+0x22>
   1426e:	b972      	cbnz	r2, 1428e <__aeabi_ldivmod+0x22>
   14270:	2900      	cmp	r1, #0
   14272:	bfbe      	ittt	lt
   14274:	2000      	movlt	r0, #0
   14276:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1427a:	e006      	blt.n	1428a <__aeabi_ldivmod+0x1e>
   1427c:	bf08      	it	eq
   1427e:	2800      	cmpeq	r0, #0
   14280:	bf1c      	itt	ne
   14282:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   14286:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1428a:	f000 b9cb 	b.w	14624 <__aeabi_idiv0>
   1428e:	f1ad 0c08 	sub.w	ip, sp, #8
   14292:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   14296:	2900      	cmp	r1, #0
   14298:	db09      	blt.n	142ae <__aeabi_ldivmod+0x42>
   1429a:	2b00      	cmp	r3, #0
   1429c:	db1a      	blt.n	142d4 <__aeabi_ldivmod+0x68>
   1429e:	f000 f861 	bl	14364 <__udivmoddi4>
   142a2:	f8dd e004 	ldr.w	lr, [sp, #4]
   142a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   142aa:	b004      	add	sp, #16
   142ac:	4770      	bx	lr
   142ae:	4240      	negs	r0, r0
   142b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   142b4:	2b00      	cmp	r3, #0
   142b6:	db1b      	blt.n	142f0 <__aeabi_ldivmod+0x84>
   142b8:	f000 f854 	bl	14364 <__udivmoddi4>
   142bc:	f8dd e004 	ldr.w	lr, [sp, #4]
   142c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   142c4:	b004      	add	sp, #16
   142c6:	4240      	negs	r0, r0
   142c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   142cc:	4252      	negs	r2, r2
   142ce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   142d2:	4770      	bx	lr
   142d4:	4252      	negs	r2, r2
   142d6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   142da:	f000 f843 	bl	14364 <__udivmoddi4>
   142de:	f8dd e004 	ldr.w	lr, [sp, #4]
   142e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   142e6:	b004      	add	sp, #16
   142e8:	4240      	negs	r0, r0
   142ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   142ee:	4770      	bx	lr
   142f0:	4252      	negs	r2, r2
   142f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   142f6:	f000 f835 	bl	14364 <__udivmoddi4>
   142fa:	f8dd e004 	ldr.w	lr, [sp, #4]
   142fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   14302:	b004      	add	sp, #16
   14304:	4252      	negs	r2, r2
   14306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1430a:	4770      	bx	lr

0001430c <__aeabi_uldivmod>:
   1430c:	b953      	cbnz	r3, 14324 <__aeabi_uldivmod+0x18>
   1430e:	b94a      	cbnz	r2, 14324 <__aeabi_uldivmod+0x18>
   14310:	2900      	cmp	r1, #0
   14312:	bf08      	it	eq
   14314:	2800      	cmpeq	r0, #0
   14316:	bf1c      	itt	ne
   14318:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1431c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   14320:	f000 b980 	b.w	14624 <__aeabi_idiv0>
   14324:	f1ad 0c08 	sub.w	ip, sp, #8
   14328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1432c:	f000 f81a 	bl	14364 <__udivmoddi4>
   14330:	f8dd e004 	ldr.w	lr, [sp, #4]
   14334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   14338:	b004      	add	sp, #16
   1433a:	4770      	bx	lr

0001433c <__popcountsi2>:
   1433c:	0843      	lsrs	r3, r0, #1
   1433e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
   14342:	1ac0      	subs	r0, r0, r3
   14344:	0883      	lsrs	r3, r0, #2
   14346:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
   1434a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
   1434e:	4418      	add	r0, r3
   14350:	eb00 1010 	add.w	r0, r0, r0, lsr #4
   14354:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
   14358:	eb00 2000 	add.w	r0, r0, r0, lsl #8
   1435c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
   14360:	0e00      	lsrs	r0, r0, #24
   14362:	4770      	bx	lr

00014364 <__udivmoddi4>:
   14364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14368:	9e08      	ldr	r6, [sp, #32]
   1436a:	460d      	mov	r5, r1
   1436c:	4604      	mov	r4, r0
   1436e:	468e      	mov	lr, r1
   14370:	2b00      	cmp	r3, #0
   14372:	f040 8082 	bne.w	1447a <__udivmoddi4+0x116>
   14376:	428a      	cmp	r2, r1
   14378:	4617      	mov	r7, r2
   1437a:	d946      	bls.n	1440a <__udivmoddi4+0xa6>
   1437c:	fab2 f282 	clz	r2, r2
   14380:	b14a      	cbz	r2, 14396 <__udivmoddi4+0x32>
   14382:	f1c2 0120 	rsb	r1, r2, #32
   14386:	fa05 f302 	lsl.w	r3, r5, r2
   1438a:	fa20 f101 	lsr.w	r1, r0, r1
   1438e:	4097      	lsls	r7, r2
   14390:	ea41 0e03 	orr.w	lr, r1, r3
   14394:	4094      	lsls	r4, r2
   14396:	ea4f 4817 	mov.w	r8, r7, lsr #16
   1439a:	0c23      	lsrs	r3, r4, #16
   1439c:	fbbe fcf8 	udiv	ip, lr, r8
   143a0:	b2b9      	uxth	r1, r7
   143a2:	fb08 ee1c 	mls	lr, r8, ip, lr
   143a6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
   143aa:	fb0c f001 	mul.w	r0, ip, r1
   143ae:	4298      	cmp	r0, r3
   143b0:	d90a      	bls.n	143c8 <__udivmoddi4+0x64>
   143b2:	18fb      	adds	r3, r7, r3
   143b4:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
   143b8:	f080 8116 	bcs.w	145e8 <__udivmoddi4+0x284>
   143bc:	4298      	cmp	r0, r3
   143be:	f240 8113 	bls.w	145e8 <__udivmoddi4+0x284>
   143c2:	f1ac 0c02 	sub.w	ip, ip, #2
   143c6:	443b      	add	r3, r7
   143c8:	1a1b      	subs	r3, r3, r0
   143ca:	b2a4      	uxth	r4, r4
   143cc:	fbb3 f0f8 	udiv	r0, r3, r8
   143d0:	fb08 3310 	mls	r3, r8, r0, r3
   143d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   143d8:	fb00 f101 	mul.w	r1, r0, r1
   143dc:	42a1      	cmp	r1, r4
   143de:	d909      	bls.n	143f4 <__udivmoddi4+0x90>
   143e0:	193c      	adds	r4, r7, r4
   143e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   143e6:	f080 8101 	bcs.w	145ec <__udivmoddi4+0x288>
   143ea:	42a1      	cmp	r1, r4
   143ec:	f240 80fe 	bls.w	145ec <__udivmoddi4+0x288>
   143f0:	3802      	subs	r0, #2
   143f2:	443c      	add	r4, r7
   143f4:	1a64      	subs	r4, r4, r1
   143f6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   143fa:	2100      	movs	r1, #0
   143fc:	b11e      	cbz	r6, 14406 <__udivmoddi4+0xa2>
   143fe:	40d4      	lsrs	r4, r2
   14400:	2300      	movs	r3, #0
   14402:	e9c6 4300 	strd	r4, r3, [r6]
   14406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1440a:	b902      	cbnz	r2, 1440e <__udivmoddi4+0xaa>
   1440c:	deff      	udf	#255	; 0xff
   1440e:	fab2 f282 	clz	r2, r2
   14412:	2a00      	cmp	r2, #0
   14414:	d14f      	bne.n	144b6 <__udivmoddi4+0x152>
   14416:	1bcb      	subs	r3, r1, r7
   14418:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   1441c:	fa1f f887 	uxth.w	r8, r7
   14420:	2101      	movs	r1, #1
   14422:	fbb3 fcfe 	udiv	ip, r3, lr
   14426:	0c25      	lsrs	r5, r4, #16
   14428:	fb0e 331c 	mls	r3, lr, ip, r3
   1442c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   14430:	fb08 f30c 	mul.w	r3, r8, ip
   14434:	42ab      	cmp	r3, r5
   14436:	d907      	bls.n	14448 <__udivmoddi4+0xe4>
   14438:	197d      	adds	r5, r7, r5
   1443a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1443e:	d202      	bcs.n	14446 <__udivmoddi4+0xe2>
   14440:	42ab      	cmp	r3, r5
   14442:	f200 80e7 	bhi.w	14614 <__udivmoddi4+0x2b0>
   14446:	4684      	mov	ip, r0
   14448:	1aed      	subs	r5, r5, r3
   1444a:	b2a3      	uxth	r3, r4
   1444c:	fbb5 f0fe 	udiv	r0, r5, lr
   14450:	fb0e 5510 	mls	r5, lr, r0, r5
   14454:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   14458:	fb08 f800 	mul.w	r8, r8, r0
   1445c:	45a0      	cmp	r8, r4
   1445e:	d907      	bls.n	14470 <__udivmoddi4+0x10c>
   14460:	193c      	adds	r4, r7, r4
   14462:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   14466:	d202      	bcs.n	1446e <__udivmoddi4+0x10a>
   14468:	45a0      	cmp	r8, r4
   1446a:	f200 80d7 	bhi.w	1461c <__udivmoddi4+0x2b8>
   1446e:	4618      	mov	r0, r3
   14470:	eba4 0408 	sub.w	r4, r4, r8
   14474:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   14478:	e7c0      	b.n	143fc <__udivmoddi4+0x98>
   1447a:	428b      	cmp	r3, r1
   1447c:	d908      	bls.n	14490 <__udivmoddi4+0x12c>
   1447e:	2e00      	cmp	r6, #0
   14480:	f000 80af 	beq.w	145e2 <__udivmoddi4+0x27e>
   14484:	2100      	movs	r1, #0
   14486:	e9c6 0500 	strd	r0, r5, [r6]
   1448a:	4608      	mov	r0, r1
   1448c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14490:	fab3 f183 	clz	r1, r3
   14494:	2900      	cmp	r1, #0
   14496:	d14b      	bne.n	14530 <__udivmoddi4+0x1cc>
   14498:	42ab      	cmp	r3, r5
   1449a:	d302      	bcc.n	144a2 <__udivmoddi4+0x13e>
   1449c:	4282      	cmp	r2, r0
   1449e:	f200 80b7 	bhi.w	14610 <__udivmoddi4+0x2ac>
   144a2:	1a84      	subs	r4, r0, r2
   144a4:	eb65 0303 	sbc.w	r3, r5, r3
   144a8:	2001      	movs	r0, #1
   144aa:	469e      	mov	lr, r3
   144ac:	2e00      	cmp	r6, #0
   144ae:	d0aa      	beq.n	14406 <__udivmoddi4+0xa2>
   144b0:	e9c6 4e00 	strd	r4, lr, [r6]
   144b4:	e7a7      	b.n	14406 <__udivmoddi4+0xa2>
   144b6:	f1c2 0c20 	rsb	ip, r2, #32
   144ba:	fa01 f302 	lsl.w	r3, r1, r2
   144be:	4097      	lsls	r7, r2
   144c0:	fa20 f00c 	lsr.w	r0, r0, ip
   144c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   144c8:	fa21 fc0c 	lsr.w	ip, r1, ip
   144cc:	4318      	orrs	r0, r3
   144ce:	fbbc f1fe 	udiv	r1, ip, lr
   144d2:	0c05      	lsrs	r5, r0, #16
   144d4:	fb0e cc11 	mls	ip, lr, r1, ip
   144d8:	fa1f f887 	uxth.w	r8, r7
   144dc:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   144e0:	fb01 f308 	mul.w	r3, r1, r8
   144e4:	42ab      	cmp	r3, r5
   144e6:	fa04 f402 	lsl.w	r4, r4, r2
   144ea:	d909      	bls.n	14500 <__udivmoddi4+0x19c>
   144ec:	197d      	adds	r5, r7, r5
   144ee:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   144f2:	f080 808b 	bcs.w	1460c <__udivmoddi4+0x2a8>
   144f6:	42ab      	cmp	r3, r5
   144f8:	f240 8088 	bls.w	1460c <__udivmoddi4+0x2a8>
   144fc:	3902      	subs	r1, #2
   144fe:	443d      	add	r5, r7
   14500:	1aeb      	subs	r3, r5, r3
   14502:	b285      	uxth	r5, r0
   14504:	fbb3 f0fe 	udiv	r0, r3, lr
   14508:	fb0e 3310 	mls	r3, lr, r0, r3
   1450c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   14510:	fb00 f308 	mul.w	r3, r0, r8
   14514:	42ab      	cmp	r3, r5
   14516:	d907      	bls.n	14528 <__udivmoddi4+0x1c4>
   14518:	197d      	adds	r5, r7, r5
   1451a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   1451e:	d271      	bcs.n	14604 <__udivmoddi4+0x2a0>
   14520:	42ab      	cmp	r3, r5
   14522:	d96f      	bls.n	14604 <__udivmoddi4+0x2a0>
   14524:	3802      	subs	r0, #2
   14526:	443d      	add	r5, r7
   14528:	1aeb      	subs	r3, r5, r3
   1452a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1452e:	e778      	b.n	14422 <__udivmoddi4+0xbe>
   14530:	f1c1 0c20 	rsb	ip, r1, #32
   14534:	408b      	lsls	r3, r1
   14536:	fa22 f70c 	lsr.w	r7, r2, ip
   1453a:	431f      	orrs	r7, r3
   1453c:	fa20 f40c 	lsr.w	r4, r0, ip
   14540:	fa05 f301 	lsl.w	r3, r5, r1
   14544:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   14548:	fa25 f50c 	lsr.w	r5, r5, ip
   1454c:	431c      	orrs	r4, r3
   1454e:	0c23      	lsrs	r3, r4, #16
   14550:	fbb5 f9fe 	udiv	r9, r5, lr
   14554:	fa1f f887 	uxth.w	r8, r7
   14558:	fb0e 5519 	mls	r5, lr, r9, r5
   1455c:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
   14560:	fb09 fa08 	mul.w	sl, r9, r8
   14564:	45aa      	cmp	sl, r5
   14566:	fa02 f201 	lsl.w	r2, r2, r1
   1456a:	fa00 f301 	lsl.w	r3, r0, r1
   1456e:	d908      	bls.n	14582 <__udivmoddi4+0x21e>
   14570:	197d      	adds	r5, r7, r5
   14572:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   14576:	d247      	bcs.n	14608 <__udivmoddi4+0x2a4>
   14578:	45aa      	cmp	sl, r5
   1457a:	d945      	bls.n	14608 <__udivmoddi4+0x2a4>
   1457c:	f1a9 0902 	sub.w	r9, r9, #2
   14580:	443d      	add	r5, r7
   14582:	eba5 050a 	sub.w	r5, r5, sl
   14586:	b2a4      	uxth	r4, r4
   14588:	fbb5 f0fe 	udiv	r0, r5, lr
   1458c:	fb0e 5510 	mls	r5, lr, r0, r5
   14590:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   14594:	fb00 f808 	mul.w	r8, r0, r8
   14598:	45a0      	cmp	r8, r4
   1459a:	d907      	bls.n	145ac <__udivmoddi4+0x248>
   1459c:	193c      	adds	r4, r7, r4
   1459e:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
   145a2:	d22d      	bcs.n	14600 <__udivmoddi4+0x29c>
   145a4:	45a0      	cmp	r8, r4
   145a6:	d92b      	bls.n	14600 <__udivmoddi4+0x29c>
   145a8:	3802      	subs	r0, #2
   145aa:	443c      	add	r4, r7
   145ac:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   145b0:	eba4 0408 	sub.w	r4, r4, r8
   145b4:	fba0 8902 	umull	r8, r9, r0, r2
   145b8:	454c      	cmp	r4, r9
   145ba:	46c6      	mov	lr, r8
   145bc:	464d      	mov	r5, r9
   145be:	d319      	bcc.n	145f4 <__udivmoddi4+0x290>
   145c0:	d016      	beq.n	145f0 <__udivmoddi4+0x28c>
   145c2:	b15e      	cbz	r6, 145dc <__udivmoddi4+0x278>
   145c4:	ebb3 020e 	subs.w	r2, r3, lr
   145c8:	eb64 0405 	sbc.w	r4, r4, r5
   145cc:	fa04 fc0c 	lsl.w	ip, r4, ip
   145d0:	40ca      	lsrs	r2, r1
   145d2:	ea4c 0202 	orr.w	r2, ip, r2
   145d6:	40cc      	lsrs	r4, r1
   145d8:	e9c6 2400 	strd	r2, r4, [r6]
   145dc:	2100      	movs	r1, #0
   145de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   145e2:	4631      	mov	r1, r6
   145e4:	4630      	mov	r0, r6
   145e6:	e70e      	b.n	14406 <__udivmoddi4+0xa2>
   145e8:	46ac      	mov	ip, r5
   145ea:	e6ed      	b.n	143c8 <__udivmoddi4+0x64>
   145ec:	4618      	mov	r0, r3
   145ee:	e701      	b.n	143f4 <__udivmoddi4+0x90>
   145f0:	4543      	cmp	r3, r8
   145f2:	d2e6      	bcs.n	145c2 <__udivmoddi4+0x25e>
   145f4:	ebb8 0e02 	subs.w	lr, r8, r2
   145f8:	eb69 0507 	sbc.w	r5, r9, r7
   145fc:	3801      	subs	r0, #1
   145fe:	e7e0      	b.n	145c2 <__udivmoddi4+0x25e>
   14600:	4628      	mov	r0, r5
   14602:	e7d3      	b.n	145ac <__udivmoddi4+0x248>
   14604:	4660      	mov	r0, ip
   14606:	e78f      	b.n	14528 <__udivmoddi4+0x1c4>
   14608:	4681      	mov	r9, r0
   1460a:	e7ba      	b.n	14582 <__udivmoddi4+0x21e>
   1460c:	4661      	mov	r1, ip
   1460e:	e777      	b.n	14500 <__udivmoddi4+0x19c>
   14610:	4608      	mov	r0, r1
   14612:	e74b      	b.n	144ac <__udivmoddi4+0x148>
   14614:	f1ac 0c02 	sub.w	ip, ip, #2
   14618:	443d      	add	r5, r7
   1461a:	e715      	b.n	14448 <__udivmoddi4+0xe4>
   1461c:	3802      	subs	r0, #2
   1461e:	443c      	add	r4, r7
   14620:	e726      	b.n	14470 <__udivmoddi4+0x10c>
   14622:	bf00      	nop

00014624 <__aeabi_idiv0>:
   14624:	4770      	bx	lr
   14626:	bf00      	nop

00014628 <SystemCoreClockUpdate>:
    //
    // Calculate the system frequency based upon the current register settings.
    // This function can be used to retrieve the system core clock frequeny
    // after user changed register sittings.
    //
    SystemCoreClock = __SYS_OSC_CLK / (CLKGEN->CCTRL_b.CORESEL + 1);
   14628:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1462c:	699b      	ldr	r3, [r3, #24]
   1462e:	f003 0301 	and.w	r3, r3, #1
   14632:	3301      	adds	r3, #1
   14634:	4a02      	ldr	r2, [pc, #8]	; (14640 <SystemCoreClockUpdate+0x18>)
   14636:	fb92 f3f3 	sdiv	r3, r2, r3
   1463a:	4a02      	ldr	r2, [pc, #8]	; (14644 <SystemCoreClockUpdate+0x1c>)
   1463c:	6013      	str	r3, [r2, #0]
}
   1463e:	4770      	bx	lr
   14640:	02dc6c00 	.word	0x02dc6c00
   14644:	10000100 	.word	0x10000100

00014648 <SystemInit>:
//! @return None.
//
//*****************************************************************************
void
SystemInit(void)
{
   14648:	b508      	push	{r3, lr}
    //
    // Initialize the system
    // Do not use global variables because this function is called before
    // reaching pre-main. RW section maybe overwritten afterwards.
    //
    SystemCoreClock = __SYSTEM_CLOCK;
   1464a:	4b09      	ldr	r3, [pc, #36]	; (14670 <SystemInit+0x28>)
   1464c:	4a09      	ldr	r2, [pc, #36]	; (14674 <SystemInit+0x2c>)
   1464e:	601a      	str	r2, [r3, #0]

    CLKGEN->CLKKEY = 0x47;              // Enable write to CCTRL
   14650:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   14654:	2247      	movs	r2, #71	; 0x47
   14656:	615a      	str	r2, [r3, #20]
    CLKGEN->CCTRL_b.CORESEL = 0;        // Div by 1 for 48MHz
   14658:	699a      	ldr	r2, [r3, #24]
   1465a:	f36f 0200 	bfc	r2, #0, #1
   1465e:	619a      	str	r2, [r3, #24]
    CLKGEN->CLKKEY = 0;                 // Disable write to CCTRL
   14660:	2200      	movs	r2, #0
   14662:	615a      	str	r2, [r3, #20]

    SystemCoreClockUpdate();
   14664:	f7ff ffe0 	bl	14628 <SystemCoreClockUpdate>

    NVIC_Relocate();
   14668:	f000 f806 	bl	14678 <NVIC_Relocate>
}
   1466c:	bd08      	pop	{r3, pc}
   1466e:	bf00      	nop
   14670:	10000100 	.word	0x10000100
   14674:	02dc6c00 	.word	0x02dc6c00

00014678 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   14678:	4a09      	ldr	r2, [pc, #36]	; (146a0 <NVIC_Relocate+0x28>)
   1467a:	4b0a      	ldr	r3, [pc, #40]	; (146a4 <NVIC_Relocate+0x2c>)
   1467c:	429a      	cmp	r2, r3
   1467e:	d00a      	beq.n	14696 <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   14680:	2300      	movs	r3, #0
   14682:	2b29      	cmp	r3, #41	; 0x29
   14684:	dc07      	bgt.n	14696 <NVIC_Relocate+0x1e>
            new_location[i] = current_location[i];
   14686:	4a07      	ldr	r2, [pc, #28]	; (146a4 <NVIC_Relocate+0x2c>)
   14688:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   1468c:	4a04      	ldr	r2, [pc, #16]	; (146a0 <NVIC_Relocate+0x28>)
   1468e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   14692:	3301      	adds	r3, #1
   14694:	e7f5      	b.n	14682 <NVIC_Relocate+0xa>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   14696:	4a02      	ldr	r2, [pc, #8]	; (146a0 <NVIC_Relocate+0x28>)
   14698:	4b03      	ldr	r3, [pc, #12]	; (146a8 <NVIC_Relocate+0x30>)
   1469a:	609a      	str	r2, [r3, #8]
#endif
}
   1469c:	4770      	bx	lr
   1469e:	bf00      	nop
   146a0:	10000000 	.word	0x10000000
   146a4:	00014020 	.word	0x00014020
   146a8:	e000ed00 	.word	0xe000ed00

000146ac <_sbrkInit>:
static char *brk;

void
_sbrkInit(char *base, char *limit)
{
    sbrk_base = base;
   146ac:	4b03      	ldr	r3, [pc, #12]	; (146bc <_sbrkInit+0x10>)
   146ae:	6018      	str	r0, [r3, #0]
    sbrk_limit = limit;
   146b0:	4b03      	ldr	r3, [pc, #12]	; (146c0 <_sbrkInit+0x14>)
   146b2:	6019      	str	r1, [r3, #0]
    brk = base;
   146b4:	4b03      	ldr	r3, [pc, #12]	; (146c4 <_sbrkInit+0x18>)
   146b6:	6018      	str	r0, [r3, #0]
}
   146b8:	4770      	bx	lr
   146ba:	bf00      	nop
   146bc:	10001e7c 	.word	0x10001e7c
   146c0:	10001e80 	.word	0x10001e80
   146c4:	10001e78 	.word	0x10001e78

000146c8 <_sbrk>:

void *
_sbrk(int incr)
{
   146c8:	4603      	mov	r3, r0
    char *prev_brk;
    char *new_brk = brk + incr;
   146ca:	4a0a      	ldr	r2, [pc, #40]	; (146f4 <_sbrk+0x2c>)
   146cc:	6810      	ldr	r0, [r2, #0]
   146ce:	4403      	add	r3, r0

    if (new_brk < sbrk_base || new_brk > sbrk_limit) {
   146d0:	4a09      	ldr	r2, [pc, #36]	; (146f8 <_sbrk+0x30>)
   146d2:	6812      	ldr	r2, [r2, #0]
   146d4:	429a      	cmp	r2, r3
   146d6:	d806      	bhi.n	146e6 <_sbrk+0x1e>
   146d8:	4a08      	ldr	r2, [pc, #32]	; (146fc <_sbrk+0x34>)
   146da:	6812      	ldr	r2, [r2, #0]
   146dc:	429a      	cmp	r2, r3
   146de:	d305      	bcc.n	146ec <_sbrk+0x24>
        prev_brk = (char *)-1;
    } else {
        prev_brk = brk;
        brk = new_brk;
   146e0:	4a04      	ldr	r2, [pc, #16]	; (146f4 <_sbrk+0x2c>)
   146e2:	6013      	str	r3, [r2, #0]
   146e4:	4770      	bx	lr
        prev_brk = (char *)-1;
   146e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   146ea:	4770      	bx	lr
   146ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return prev_brk;
}
   146f0:	4770      	bx	lr
   146f2:	bf00      	nop
   146f4:	10001e78 	.word	0x10001e78
   146f8:	10001e7c 	.word	0x10001e7c
   146fc:	10001e80 	.word	0x10001e80

00014700 <hal_system_init>:
am_hal_mcuctrl_device_t adevinfo;

void
hal_system_init(void)
{
}
   14700:	4770      	bx	lr
	...

00014704 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   14704:	4b02      	ldr	r3, [pc, #8]	; (14710 <hal_debugger_connected+0xc>)
   14706:	6818      	ldr	r0, [r3, #0]
}
   14708:	f000 0001 	and.w	r0, r0, #1
   1470c:	4770      	bx	lr
   1470e:	bf00      	nop
   14710:	e000edf0 	.word	0xe000edf0

00014714 <hal_system_reset>:
{
   14714:	b508      	push	{r3, lr}
        HAL_DEBUG_BREAK();
   14716:	f7ff fff5 	bl	14704 <hal_debugger_connected>
   1471a:	b100      	cbz	r0, 1471e <hal_system_reset+0xa>
#endif

static inline void
hal_debug_break(void)
{
    __BKPT(1);
   1471c:	be01      	bkpt	0x0001
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1471e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14722:	4905      	ldr	r1, [pc, #20]	; (14738 <hal_system_reset+0x24>)
   14724:	68ca      	ldr	r2, [r1, #12]
   14726:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1472a:	4b04      	ldr	r3, [pc, #16]	; (1473c <hal_system_reset+0x28>)
   1472c:	4313      	orrs	r3, r2
   1472e:	60cb      	str	r3, [r1, #12]
   14730:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14734:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14736:	e7fd      	b.n	14734 <hal_system_reset+0x20>
   14738:	e000ed00 	.word	0xe000ed00
   1473c:	05fa0004 	.word	0x05fa0004

00014740 <_init>:
}

__attribute__((weak)) void
_init(void)
{
}
   14740:	4770      	bx	lr
	...

00014744 <__libc_init_array>:
extern void (*__init_array_start[])(void);
extern void (*__init_array_end[])(void);

void
__libc_init_array(void)
{
   14744:	b538      	push	{r3, r4, r5, lr}
    size_t count;
    size_t i;

    count = __preinit_array_end - __preinit_array_start;
   14746:	4d0e      	ldr	r5, [pc, #56]	; (14780 <__libc_init_array+0x3c>)
   14748:	4b0e      	ldr	r3, [pc, #56]	; (14784 <__libc_init_array+0x40>)
   1474a:	1aed      	subs	r5, r5, r3
   1474c:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
   1474e:	2400      	movs	r4, #0
   14750:	42ac      	cmp	r4, r5
   14752:	d205      	bcs.n	14760 <__libc_init_array+0x1c>
        __preinit_array_start[i]();
   14754:	4b0b      	ldr	r3, [pc, #44]	; (14784 <__libc_init_array+0x40>)
   14756:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1475a:	4798      	blx	r3
    for (i = 0; i < count; i++)
   1475c:	3401      	adds	r4, #1
   1475e:	e7f7      	b.n	14750 <__libc_init_array+0xc>

    _init();
   14760:	f7ff ffee 	bl	14740 <_init>

    count = __init_array_end - __init_array_start;
   14764:	4d08      	ldr	r5, [pc, #32]	; (14788 <__libc_init_array+0x44>)
   14766:	4b09      	ldr	r3, [pc, #36]	; (1478c <__libc_init_array+0x48>)
   14768:	1aed      	subs	r5, r5, r3
   1476a:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
   1476c:	2400      	movs	r4, #0
   1476e:	e004      	b.n	1477a <__libc_init_array+0x36>
        __init_array_start[i]();
   14770:	4b06      	ldr	r3, [pc, #24]	; (1478c <__libc_init_array+0x48>)
   14772:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   14776:	4798      	blx	r3
    for (i = 0; i < count; i++)
   14778:	3401      	adds	r4, #1
   1477a:	42ac      	cmp	r4, r5
   1477c:	d3f8      	bcc.n	14770 <__libc_init_array+0x2c>
}
   1477e:	bd38      	pop	{r3, r4, r5, pc}
   14780:	10001e78 	.word	0x10001e78
   14784:	10001e78 	.word	0x10001e78
   14788:	10001e78 	.word	0x10001e78
   1478c:	10001e78 	.word	0x10001e78

00014790 <_start>:
{
   14790:	b508      	push	{r3, lr}
        __libc_init_array();
   14792:	f7ff ffd7 	bl	14744 <__libc_init_array>
    os_init(main);
   14796:	4803      	ldr	r0, [pc, #12]	; (147a4 <_start+0x14>)
   14798:	f004 fbfc 	bl	18f94 <os_init>
    os_start();
   1479c:	f004 fc66 	bl	1906c <os_start>
}
   147a0:	bd08      	pop	{r3, pc}
   147a2:	bf00      	nop
   147a4:	00015845 	.word	0x00015845

000147a8 <btshell_conn_find_idx>:
    }
}

static int
btshell_conn_find_idx(uint16_t handle)
{
   147a8:	4601      	mov	r1, r0
    int i;

    for (i = 0; i < btshell_num_conns; i++) {
   147aa:	2000      	movs	r0, #0
   147ac:	4b07      	ldr	r3, [pc, #28]	; (147cc <btshell_conn_find_idx+0x24>)
   147ae:	681b      	ldr	r3, [r3, #0]
   147b0:	4283      	cmp	r3, r0
   147b2:	dd08      	ble.n	147c6 <btshell_conn_find_idx+0x1e>
        if (btshell_conns[i].handle == handle) {
   147b4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   147b8:	4a05      	ldr	r2, [pc, #20]	; (147d0 <btshell_conn_find_idx+0x28>)
   147ba:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   147be:	428b      	cmp	r3, r1
   147c0:	d003      	beq.n	147ca <btshell_conn_find_idx+0x22>
    for (i = 0; i < btshell_num_conns; i++) {
   147c2:	3001      	adds	r0, #1
   147c4:	e7f2      	b.n	147ac <btshell_conn_find_idx+0x4>
            return i;
        }
    }

    return -1;
   147c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   147ca:	4770      	bx	lr
   147cc:	10002edc 	.word	0x10002edc
   147d0:	100033ac 	.word	0x100033ac

000147d4 <btshell_conn_find>:

static struct btshell_conn *
btshell_conn_find(uint16_t handle)
{
   147d4:	b508      	push	{r3, lr}
    int idx;

    idx = btshell_conn_find_idx(handle);
   147d6:	f7ff ffe7 	bl	147a8 <btshell_conn_find_idx>
    if (idx == -1) {
   147da:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   147de:	d005      	beq.n	147ec <btshell_conn_find+0x18>
        return NULL;
    } else {
        return btshell_conns + idx;
   147e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   147e4:	4b02      	ldr	r3, [pc, #8]	; (147f0 <btshell_conn_find+0x1c>)
   147e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    }
}
   147ea:	bd08      	pop	{r3, pc}
        return NULL;
   147ec:	2000      	movs	r0, #0
   147ee:	e7fc      	b.n	147ea <btshell_conn_find+0x16>
   147f0:	100033ac 	.word	0x100033ac

000147f4 <btshell_svc_find_prev>:
{
    struct btshell_svc *prev;
    struct btshell_svc *svc;

    prev = NULL;
    SLIST_FOREACH(svc, &conn->svcs, next) {
   147f4:	6843      	ldr	r3, [r0, #4]
    prev = NULL;
   147f6:	2000      	movs	r0, #0
    SLIST_FOREACH(svc, &conn->svcs, next) {
   147f8:	b12b      	cbz	r3, 14806 <btshell_svc_find_prev+0x12>
        if (svc->svc.start_handle >= svc_start_handle) {
   147fa:	889a      	ldrh	r2, [r3, #4]
   147fc:	428a      	cmp	r2, r1
   147fe:	d202      	bcs.n	14806 <btshell_svc_find_prev+0x12>
            break;
        }

        prev = svc;
   14800:	4618      	mov	r0, r3
    SLIST_FOREACH(svc, &conn->svcs, next) {
   14802:	681b      	ldr	r3, [r3, #0]
   14804:	e7f8      	b.n	147f8 <btshell_svc_find_prev+0x4>
    }

    return prev;
}
   14806:	4770      	bx	lr

00014808 <btshell_svc_find>:

static struct btshell_svc *
btshell_svc_find(struct btshell_conn *conn, uint16_t svc_start_handle,
                 struct btshell_svc **out_prev)
{
   14808:	b570      	push	{r4, r5, r6, lr}
   1480a:	4606      	mov	r6, r0
   1480c:	460d      	mov	r5, r1
   1480e:	4614      	mov	r4, r2
    struct btshell_svc *prev;
    struct btshell_svc *svc;

    prev = btshell_svc_find_prev(conn, svc_start_handle);
   14810:	f7ff fff0 	bl	147f4 <btshell_svc_find_prev>
    if (prev == NULL) {
   14814:	4603      	mov	r3, r0
   14816:	b138      	cbz	r0, 14828 <btshell_svc_find+0x20>
        svc = SLIST_FIRST(&conn->svcs);
    } else {
        svc = SLIST_NEXT(prev, next);
   14818:	6800      	ldr	r0, [r0, #0]
    }

    if (svc != NULL && svc->svc.start_handle != svc_start_handle) {
   1481a:	b110      	cbz	r0, 14822 <btshell_svc_find+0x1a>
   1481c:	8882      	ldrh	r2, [r0, #4]
   1481e:	42aa      	cmp	r2, r5
   14820:	d104      	bne.n	1482c <btshell_svc_find+0x24>
        svc = NULL;
    }

    if (out_prev != NULL) {
   14822:	b104      	cbz	r4, 14826 <btshell_svc_find+0x1e>
        *out_prev = prev;
   14824:	6023      	str	r3, [r4, #0]
    }
    return svc;
}
   14826:	bd70      	pop	{r4, r5, r6, pc}
        svc = SLIST_FIRST(&conn->svcs);
   14828:	6870      	ldr	r0, [r6, #4]
   1482a:	e7f6      	b.n	1481a <btshell_svc_find+0x12>
        svc = NULL;
   1482c:	2000      	movs	r0, #0
   1482e:	e7f8      	b.n	14822 <btshell_svc_find+0x1a>

00014830 <btshell_svc_find_range>:
static struct btshell_svc *
btshell_svc_find_range(struct btshell_conn *conn, uint16_t attr_handle)
{
    struct btshell_svc *svc;

    SLIST_FOREACH(svc, &conn->svcs, next) {
   14830:	6840      	ldr	r0, [r0, #4]
   14832:	e000      	b.n	14836 <btshell_svc_find_range+0x6>
   14834:	6800      	ldr	r0, [r0, #0]
   14836:	b128      	cbz	r0, 14844 <btshell_svc_find_range+0x14>
        if (svc->svc.start_handle <= attr_handle &&
   14838:	8883      	ldrh	r3, [r0, #4]
   1483a:	428b      	cmp	r3, r1
   1483c:	d8fa      	bhi.n	14834 <btshell_svc_find_range+0x4>
            svc->svc.end_handle >= attr_handle) {
   1483e:	88c3      	ldrh	r3, [r0, #6]
        if (svc->svc.start_handle <= attr_handle &&
   14840:	428b      	cmp	r3, r1
   14842:	d3f7      	bcc.n	14834 <btshell_svc_find_range+0x4>
            return svc;
        }
    }

    return NULL;
}
   14844:	4770      	bx	lr

00014846 <btshell_chr_find_prev>:
{
    struct btshell_chr *prev;
    struct btshell_chr *chr;

    prev = NULL;
    SLIST_FOREACH(chr, &svc->chrs, next) {
   14846:	69c3      	ldr	r3, [r0, #28]
    prev = NULL;
   14848:	2000      	movs	r0, #0
    SLIST_FOREACH(chr, &svc->chrs, next) {
   1484a:	b12b      	cbz	r3, 14858 <btshell_chr_find_prev+0x12>
        if (chr->chr.val_handle >= chr_val_handle) {
   1484c:	88da      	ldrh	r2, [r3, #6]
   1484e:	428a      	cmp	r2, r1
   14850:	d202      	bcs.n	14858 <btshell_chr_find_prev+0x12>
            break;
        }

        prev = chr;
   14852:	4618      	mov	r0, r3
    SLIST_FOREACH(chr, &svc->chrs, next) {
   14854:	681b      	ldr	r3, [r3, #0]
   14856:	e7f8      	b.n	1484a <btshell_chr_find_prev+0x4>
    }

    return prev;
}
   14858:	4770      	bx	lr

0001485a <btshell_chr_find>:

static struct btshell_chr *
btshell_chr_find(const struct btshell_svc *svc, uint16_t chr_val_handle,
                 struct btshell_chr **out_prev)
{
   1485a:	b570      	push	{r4, r5, r6, lr}
   1485c:	4606      	mov	r6, r0
   1485e:	460d      	mov	r5, r1
   14860:	4614      	mov	r4, r2
    struct btshell_chr *prev;
    struct btshell_chr *chr;

    prev = btshell_chr_find_prev(svc, chr_val_handle);
   14862:	f7ff fff0 	bl	14846 <btshell_chr_find_prev>
    if (prev == NULL) {
   14866:	4603      	mov	r3, r0
   14868:	b138      	cbz	r0, 1487a <btshell_chr_find+0x20>
        chr = SLIST_FIRST(&svc->chrs);
    } else {
        chr = SLIST_NEXT(prev, next);
   1486a:	6800      	ldr	r0, [r0, #0]
    }

    if (chr != NULL && chr->chr.val_handle != chr_val_handle) {
   1486c:	b110      	cbz	r0, 14874 <btshell_chr_find+0x1a>
   1486e:	88c2      	ldrh	r2, [r0, #6]
   14870:	42aa      	cmp	r2, r5
   14872:	d104      	bne.n	1487e <btshell_chr_find+0x24>
        chr = NULL;
    }

    if (out_prev != NULL) {
   14874:	b104      	cbz	r4, 14878 <btshell_chr_find+0x1e>
        *out_prev = prev;
   14876:	6023      	str	r3, [r4, #0]
    }
    return chr;
}
   14878:	bd70      	pop	{r4, r5, r6, pc}
        chr = SLIST_FIRST(&svc->chrs);
   1487a:	69f0      	ldr	r0, [r6, #28]
   1487c:	e7f6      	b.n	1486c <btshell_chr_find+0x12>
        chr = NULL;
   1487e:	2000      	movs	r0, #0
   14880:	e7f8      	b.n	14874 <btshell_chr_find+0x1a>

00014882 <btshell_dsc_find_prev>:
{
    struct btshell_dsc *prev;
    struct btshell_dsc *dsc;

    prev = NULL;
    SLIST_FOREACH(dsc, &chr->dscs, next) {
   14882:	6a03      	ldr	r3, [r0, #32]
    prev = NULL;
   14884:	2000      	movs	r0, #0
    SLIST_FOREACH(dsc, &chr->dscs, next) {
   14886:	b12b      	cbz	r3, 14894 <btshell_dsc_find_prev+0x12>
        if (dsc->dsc.handle >= dsc_handle) {
   14888:	889a      	ldrh	r2, [r3, #4]
   1488a:	428a      	cmp	r2, r1
   1488c:	d202      	bcs.n	14894 <btshell_dsc_find_prev+0x12>
            break;
        }

        prev = dsc;
   1488e:	4618      	mov	r0, r3
    SLIST_FOREACH(dsc, &chr->dscs, next) {
   14890:	681b      	ldr	r3, [r3, #0]
   14892:	e7f8      	b.n	14886 <btshell_dsc_find_prev+0x4>
    }

    return prev;
}
   14894:	4770      	bx	lr

00014896 <btshell_dsc_find>:

static struct btshell_dsc *
btshell_dsc_find(const struct btshell_chr *chr, uint16_t dsc_handle,
                 struct btshell_dsc **out_prev)
{
   14896:	b570      	push	{r4, r5, r6, lr}
   14898:	4606      	mov	r6, r0
   1489a:	460d      	mov	r5, r1
   1489c:	4614      	mov	r4, r2
    struct btshell_dsc *prev;
    struct btshell_dsc *dsc;

    prev = btshell_dsc_find_prev(chr, dsc_handle);
   1489e:	f7ff fff0 	bl	14882 <btshell_dsc_find_prev>
    if (prev == NULL) {
   148a2:	4603      	mov	r3, r0
   148a4:	b138      	cbz	r0, 148b6 <btshell_dsc_find+0x20>
        dsc = SLIST_FIRST(&chr->dscs);
    } else {
        dsc = SLIST_NEXT(prev, next);
   148a6:	6800      	ldr	r0, [r0, #0]
    }

    if (dsc != NULL && dsc->dsc.handle != dsc_handle) {
   148a8:	b110      	cbz	r0, 148b0 <btshell_dsc_find+0x1a>
   148aa:	8882      	ldrh	r2, [r0, #4]
   148ac:	42aa      	cmp	r2, r5
   148ae:	d104      	bne.n	148ba <btshell_dsc_find+0x24>
        dsc = NULL;
    }

    if (out_prev != NULL) {
   148b0:	b104      	cbz	r4, 148b4 <btshell_dsc_find+0x1e>
        *out_prev = prev;
   148b2:	6023      	str	r3, [r4, #0]
    }
    return dsc;
}
   148b4:	bd70      	pop	{r4, r5, r6, pc}
        dsc = SLIST_FIRST(&chr->dscs);
   148b6:	6a30      	ldr	r0, [r6, #32]
   148b8:	e7f6      	b.n	148a8 <btshell_dsc_find+0x12>
        dsc = NULL;
   148ba:	2000      	movs	r0, #0
   148bc:	e7f8      	b.n	148b0 <btshell_dsc_find+0x1a>
	...

000148c0 <btshell_print_error>:
{
   148c0:	b510      	push	{r4, lr}
   148c2:	b082      	sub	sp, #8
   148c4:	460c      	mov	r4, r1
    if (msg == NULL) {
   148c6:	4601      	mov	r1, r0
   148c8:	b140      	cbz	r0, 148dc <btshell_print_error+0x1c>
                   msg, conn_handle, error->status, error->att_handle);
   148ca:	8853      	ldrh	r3, [r2, #2]
    console_printf("%s: conn_handle=%d status=%d att_handle=%d\n",
   148cc:	9300      	str	r3, [sp, #0]
   148ce:	8813      	ldrh	r3, [r2, #0]
   148d0:	4622      	mov	r2, r4
   148d2:	4803      	ldr	r0, [pc, #12]	; (148e0 <btshell_print_error+0x20>)
   148d4:	f007 fc2a 	bl	1c12c <console_printf>
}
   148d8:	b002      	add	sp, #8
   148da:	bd10      	pop	{r4, pc}
        msg = "ERROR";
   148dc:	4901      	ldr	r1, [pc, #4]	; (148e4 <btshell_print_error+0x24>)
   148de:	e7f4      	b.n	148ca <btshell_print_error+0xa>
   148e0:	0002fb8c 	.word	0x0002fb8c
   148e4:	0002fb84 	.word	0x0002fb84

000148e8 <btshell_on_mtu>:
}

static int
btshell_on_mtu(uint16_t conn_handle, const struct ble_gatt_error *error,
               uint16_t mtu, void *arg)
{
   148e8:	b508      	push	{r3, lr}
    switch (error->status) {
   148ea:	880b      	ldrh	r3, [r1, #0]
   148ec:	b92b      	cbnz	r3, 148fa <btshell_on_mtu+0x12>
    case 0:
        console_printf("mtu exchange complete: conn_handle=%d mtu=%d\n",
   148ee:	4601      	mov	r1, r0
   148f0:	4805      	ldr	r0, [pc, #20]	; (14908 <btshell_on_mtu+0x20>)
   148f2:	f007 fc1b 	bl	1c12c <console_printf>
        btshell_print_error(NULL, conn_handle, error);
        break;
    }

    return 0;
}
   148f6:	2000      	movs	r0, #0
   148f8:	bd08      	pop	{r3, pc}
        btshell_print_error(NULL, conn_handle, error);
   148fa:	460a      	mov	r2, r1
   148fc:	4601      	mov	r1, r0
   148fe:	2000      	movs	r0, #0
   14900:	f7ff ffde 	bl	148c0 <btshell_print_error>
        break;
   14904:	e7f7      	b.n	148f6 <btshell_on_mtu+0xe>
   14906:	bf00      	nop
   14908:	0002fbb8 	.word	0x0002fbb8

0001490c <btshell_full_disc_complete>:

static void
btshell_full_disc_complete(int rc)
{
   1490c:	b508      	push	{r3, lr}
   1490e:	4601      	mov	r1, r0
    console_printf("full discovery complete; rc=%d\n", rc);
   14910:	4803      	ldr	r0, [pc, #12]	; (14920 <btshell_full_disc_complete+0x14>)
   14912:	f007 fc0b 	bl	1c12c <console_printf>
    btshell_full_disc_prev_chr_val = 0;
   14916:	4b03      	ldr	r3, [pc, #12]	; (14924 <btshell_full_disc_complete+0x18>)
   14918:	2200      	movs	r2, #0
   1491a:	601a      	str	r2, [r3, #0]
}
   1491c:	bd08      	pop	{r3, pc}
   1491e:	bf00      	nop
   14920:	0002fbe8 	.word	0x0002fbe8
   14924:	10002ed8 	.word	0x10002ed8

00014928 <btshell_on_write>:
}

static int
btshell_on_write(uint16_t conn_handle, const struct ble_gatt_error *error,
                 struct ble_gatt_attr *attr, void *arg)
{
   14928:	b508      	push	{r3, lr}
    switch (error->status) {
   1492a:	880b      	ldrh	r3, [r1, #0]
   1492c:	b933      	cbnz	r3, 1493c <btshell_on_write+0x14>
    case 0:
        console_printf("characteristic write complete; conn_handle=%d "
   1492e:	8812      	ldrh	r2, [r2, #0]
   14930:	4601      	mov	r1, r0
   14932:	4805      	ldr	r0, [pc, #20]	; (14948 <btshell_on_write+0x20>)
   14934:	f007 fbfa 	bl	1c12c <console_printf>
        btshell_print_error(NULL, conn_handle, error);
        break;
    }

    return 0;
}
   14938:	2000      	movs	r0, #0
   1493a:	bd08      	pop	{r3, pc}
        btshell_print_error(NULL, conn_handle, error);
   1493c:	460a      	mov	r2, r1
   1493e:	4601      	mov	r1, r0
   14940:	2000      	movs	r0, #0
   14942:	f7ff ffbd 	bl	148c0 <btshell_print_error>
        break;
   14946:	e7f7      	b.n	14938 <btshell_on_write+0x10>
   14948:	0002fc08 	.word	0x0002fc08

0001494c <btshell_on_reset>:
    return 0;
}

static void
btshell_on_reset(int reason)
{
   1494c:	b508      	push	{r3, lr}
   1494e:	4601      	mov	r1, r0
    console_printf("Error: Resetting state; reason=%d\n", reason);
   14950:	4801      	ldr	r0, [pc, #4]	; (14958 <btshell_on_reset+0xc>)
   14952:	f007 fbeb 	bl	1c12c <console_printf>
}
   14956:	bd08      	pop	{r3, pc}
   14958:	0002fc48 	.word	0x0002fc48

0001495c <btshell_conn_add>:
{
   1495c:	b538      	push	{r3, r4, r5, lr}
    assert(btshell_num_conns < MYNEWT_VAL(BLE_MAX_CONNECTIONS));
   1495e:	4b0f      	ldr	r3, [pc, #60]	; (1499c <btshell_conn_add+0x40>)
   14960:	681b      	ldr	r3, [r3, #0]
   14962:	2b00      	cmp	r3, #0
   14964:	dc0f      	bgt.n	14986 <btshell_conn_add+0x2a>
   14966:	4602      	mov	r2, r0
    conn = btshell_conns + btshell_num_conns;
   14968:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1496c:	490c      	ldr	r1, [pc, #48]	; (149a0 <btshell_conn_add+0x44>)
   1496e:	eb01 0084 	add.w	r0, r1, r4, lsl #2
    btshell_num_conns++;
   14972:	3301      	adds	r3, #1
   14974:	4d09      	ldr	r5, [pc, #36]	; (1499c <btshell_conn_add+0x40>)
   14976:	602b      	str	r3, [r5, #0]
    conn->handle = desc->conn_handle;
   14978:	8c13      	ldrh	r3, [r2, #32]
   1497a:	f821 3024 	strh.w	r3, [r1, r4, lsl #2]
    SLIST_INIT(&conn->svcs);
   1497e:	2300      	movs	r3, #0
   14980:	6043      	str	r3, [r0, #4]
    SLIST_INIT(&conn->coc_list);
   14982:	6083      	str	r3, [r0, #8]
}
   14984:	bd38      	pop	{r3, r4, r5, pc}
    assert(btshell_num_conns < MYNEWT_VAL(BLE_MAX_CONNECTIONS));
   14986:	f7ff febd 	bl	14704 <hal_debugger_connected>
   1498a:	b100      	cbz	r0, 1498e <btshell_conn_add+0x32>
   1498c:	be01      	bkpt	0x0001
   1498e:	2300      	movs	r3, #0
   14990:	461a      	mov	r2, r3
   14992:	4619      	mov	r1, r3
   14994:	4618      	mov	r0, r3
   14996:	f004 f9c5 	bl	18d24 <__assert_func>
   1499a:	bf00      	nop
   1499c:	10002edc 	.word	0x10002edc
   149a0:	100033ac 	.word	0x100033ac

000149a4 <btshell_on_read>:
{
   149a4:	b510      	push	{r4, lr}
    switch (error->status) {
   149a6:	880b      	ldrh	r3, [r1, #0]
   149a8:	b13b      	cbz	r3, 149ba <btshell_on_read+0x16>
   149aa:	2b0e      	cmp	r3, #14
   149ac:	d015      	beq.n	149da <btshell_on_read+0x36>
        btshell_print_error(NULL, conn_handle, error);
   149ae:	460a      	mov	r2, r1
   149b0:	4601      	mov	r1, r0
   149b2:	2000      	movs	r0, #0
   149b4:	f7ff ff84 	bl	148c0 <btshell_print_error>
        break;
   149b8:	e00d      	b.n	149d6 <btshell_on_read+0x32>
   149ba:	4614      	mov	r4, r2
                       attr->handle, OS_MBUF_PKTLEN(attr->om));
   149bc:	6853      	ldr	r3, [r2, #4]
        console_printf("characteristic read; conn_handle=%d "
   149be:	8a1b      	ldrh	r3, [r3, #16]
   149c0:	8812      	ldrh	r2, [r2, #0]
   149c2:	4601      	mov	r1, r0
   149c4:	4807      	ldr	r0, [pc, #28]	; (149e4 <btshell_on_read+0x40>)
   149c6:	f007 fbb1 	bl	1c12c <console_printf>
        print_mbuf(attr->om);
   149ca:	6860      	ldr	r0, [r4, #4]
   149cc:	f000 ffe8 	bl	159a0 <print_mbuf>
        console_printf("\n");
   149d0:	4805      	ldr	r0, [pc, #20]	; (149e8 <btshell_on_read+0x44>)
   149d2:	f007 fbab 	bl	1c12c <console_printf>
}
   149d6:	2000      	movs	r0, #0
   149d8:	bd10      	pop	{r4, pc}
        console_printf("characteristic read complete\n");
   149da:	4804      	ldr	r0, [pc, #16]	; (149ec <btshell_on_read+0x48>)
   149dc:	f007 fba6 	bl	1c12c <console_printf>
        break;
   149e0:	e7f9      	b.n	149d6 <btshell_on_read+0x32>
   149e2:	bf00      	nop
   149e4:	0002fc6c 	.word	0x0002fc6c
   149e8:	0002ff28 	.word	0x0002ff28
   149ec:	0002fcb0 	.word	0x0002fcb0

000149f0 <btshell_on_write_reliable>:
{
   149f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   149f2:	461f      	mov	r7, r3
    switch (error->status) {
   149f4:	880b      	ldrh	r3, [r1, #0]
   149f6:	b9d3      	cbnz	r3, 14a2e <btshell_on_write_reliable+0x3e>
   149f8:	4616      	mov	r6, r2
        console_printf("characteristic write reliable complete; "
   149fa:	4601      	mov	r1, r0
   149fc:	480f      	ldr	r0, [pc, #60]	; (14a3c <btshell_on_write_reliable+0x4c>)
   149fe:	f007 fb95 	bl	1c12c <console_printf>
        for (i = 0; i < num_attrs; i++) {
   14a02:	2400      	movs	r4, #0
   14a04:	42a7      	cmp	r7, r4
   14a06:	dd0d      	ble.n	14a24 <btshell_on_write_reliable+0x34>
            console_printf(" attr_handle=%d len=%d value=", attrs[i].handle,
   14a08:	eb06 05c4 	add.w	r5, r6, r4, lsl #3
                           OS_MBUF_PKTLEN(attrs[i].om));
   14a0c:	686a      	ldr	r2, [r5, #4]
            console_printf(" attr_handle=%d len=%d value=", attrs[i].handle,
   14a0e:	8a12      	ldrh	r2, [r2, #16]
   14a10:	f836 1034 	ldrh.w	r1, [r6, r4, lsl #3]
   14a14:	480a      	ldr	r0, [pc, #40]	; (14a40 <btshell_on_write_reliable+0x50>)
   14a16:	f007 fb89 	bl	1c12c <console_printf>
            print_mbuf(attrs[i].om);
   14a1a:	6868      	ldr	r0, [r5, #4]
   14a1c:	f000 ffc0 	bl	159a0 <print_mbuf>
        for (i = 0; i < num_attrs; i++) {
   14a20:	3401      	adds	r4, #1
   14a22:	e7ef      	b.n	14a04 <btshell_on_write_reliable+0x14>
        console_printf("\n");
   14a24:	4807      	ldr	r0, [pc, #28]	; (14a44 <btshell_on_write_reliable+0x54>)
   14a26:	f007 fb81 	bl	1c12c <console_printf>
}
   14a2a:	2000      	movs	r0, #0
   14a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        btshell_print_error(NULL, conn_handle, error);
   14a2e:	460a      	mov	r2, r1
   14a30:	4601      	mov	r1, r0
   14a32:	2000      	movs	r0, #0
   14a34:	f7ff ff44 	bl	148c0 <btshell_print_error>
        break;
   14a38:	e7f7      	b.n	14a2a <btshell_on_write_reliable+0x3a>
   14a3a:	bf00      	nop
   14a3c:	0002fcd0 	.word	0x0002fcd0
   14a40:	0002fd08 	.word	0x0002fd08
   14a44:	0002ff28 	.word	0x0002ff28

00014a48 <btshell_chr_delete>:
{
   14a48:	b510      	push	{r4, lr}
   14a4a:	4604      	mov	r4, r0
    while ((dsc = SLIST_FIRST(&chr->dscs)) != NULL) {
   14a4c:	6a21      	ldr	r1, [r4, #32]
   14a4e:	b129      	cbz	r1, 14a5c <btshell_chr_delete+0x14>
        SLIST_REMOVE_HEAD(&chr->dscs, next);
   14a50:	680b      	ldr	r3, [r1, #0]
   14a52:	6223      	str	r3, [r4, #32]
        os_memblock_put(&btshell_dsc_pool, dsc);
   14a54:	4804      	ldr	r0, [pc, #16]	; (14a68 <btshell_chr_delete+0x20>)
   14a56:	f005 fa34 	bl	19ec2 <os_memblock_put>
   14a5a:	e7f7      	b.n	14a4c <btshell_chr_delete+0x4>
    os_memblock_put(&btshell_chr_pool, chr);
   14a5c:	4621      	mov	r1, r4
   14a5e:	4803      	ldr	r0, [pc, #12]	; (14a6c <btshell_chr_delete+0x24>)
   14a60:	f005 fa2f 	bl	19ec2 <os_memblock_put>
}
   14a64:	bd10      	pop	{r4, pc}
   14a66:	bf00      	nop
   14a68:	10002ebc 	.word	0x10002ebc
   14a6c:	100027a0 	.word	0x100027a0

00014a70 <btshell_svc_delete>:
{
   14a70:	b510      	push	{r4, lr}
   14a72:	4604      	mov	r4, r0
    while ((chr = SLIST_FIRST(&svc->chrs)) != NULL) {
   14a74:	69e0      	ldr	r0, [r4, #28]
   14a76:	b120      	cbz	r0, 14a82 <btshell_svc_delete+0x12>
        SLIST_REMOVE_HEAD(&svc->chrs, next);
   14a78:	6803      	ldr	r3, [r0, #0]
   14a7a:	61e3      	str	r3, [r4, #28]
        btshell_chr_delete(chr);
   14a7c:	f7ff ffe4 	bl	14a48 <btshell_chr_delete>
   14a80:	e7f8      	b.n	14a74 <btshell_svc_delete+0x4>
    os_memblock_put(&btshell_svc_pool, svc);
   14a82:	4621      	mov	r1, r4
   14a84:	4801      	ldr	r0, [pc, #4]	; (14a8c <btshell_svc_delete+0x1c>)
   14a86:	f005 fa1c 	bl	19ec2 <os_memblock_put>
}
   14a8a:	bd10      	pop	{r4, pc}
   14a8c:	10003360 	.word	0x10003360

00014a90 <btshell_conn_delete_idx>:
{
   14a90:	b510      	push	{r4, lr}
    assert(idx >= 0 && idx < btshell_num_conns);
   14a92:	1e04      	subs	r4, r0, #0
   14a94:	db09      	blt.n	14aaa <btshell_conn_delete_idx+0x1a>
   14a96:	4b10      	ldr	r3, [pc, #64]	; (14ad8 <btshell_conn_delete_idx+0x48>)
   14a98:	681b      	ldr	r3, [r3, #0]
   14a9a:	42a3      	cmp	r3, r4
   14a9c:	dd05      	ble.n	14aaa <btshell_conn_delete_idx+0x1a>
    conn = btshell_conns + idx;
   14a9e:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   14aa2:	4c0e      	ldr	r4, [pc, #56]	; (14adc <btshell_conn_delete_idx+0x4c>)
   14aa4:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    while ((svc = SLIST_FIRST(&conn->svcs)) != NULL) {
   14aa8:	e00d      	b.n	14ac6 <btshell_conn_delete_idx+0x36>
    assert(idx >= 0 && idx < btshell_num_conns);
   14aaa:	f7ff fe2b 	bl	14704 <hal_debugger_connected>
   14aae:	b100      	cbz	r0, 14ab2 <btshell_conn_delete_idx+0x22>
   14ab0:	be01      	bkpt	0x0001
   14ab2:	2300      	movs	r3, #0
   14ab4:	461a      	mov	r2, r3
   14ab6:	4619      	mov	r1, r3
   14ab8:	4618      	mov	r0, r3
   14aba:	f004 f933 	bl	18d24 <__assert_func>
        SLIST_REMOVE_HEAD(&conn->svcs, next);
   14abe:	6803      	ldr	r3, [r0, #0]
   14ac0:	6063      	str	r3, [r4, #4]
        btshell_svc_delete(svc);
   14ac2:	f7ff ffd5 	bl	14a70 <btshell_svc_delete>
    while ((svc = SLIST_FIRST(&conn->svcs)) != NULL) {
   14ac6:	6860      	ldr	r0, [r4, #4]
   14ac8:	2800      	cmp	r0, #0
   14aca:	d1f8      	bne.n	14abe <btshell_conn_delete_idx+0x2e>
    btshell_num_conns--;
   14acc:	4a02      	ldr	r2, [pc, #8]	; (14ad8 <btshell_conn_delete_idx+0x48>)
   14ace:	6813      	ldr	r3, [r2, #0]
   14ad0:	3b01      	subs	r3, #1
   14ad2:	6013      	str	r3, [r2, #0]
}
   14ad4:	bd10      	pop	{r4, pc}
   14ad6:	bf00      	nop
   14ad8:	10002edc 	.word	0x10002edc
   14adc:	100033ac 	.word	0x100033ac

00014ae0 <btshell_restart_adv>:
    if (event->type != BLE_GAP_EVENT_DISCONNECT) {
   14ae0:	7803      	ldrb	r3, [r0, #0]
   14ae2:	2b01      	cmp	r3, #1
   14ae4:	d115      	bne.n	14b12 <btshell_restart_adv+0x32>
    if (!adv_params.restart) {
   14ae6:	4b0c      	ldr	r3, [pc, #48]	; (14b18 <btshell_restart_adv+0x38>)
   14ae8:	781b      	ldrb	r3, [r3, #0]
   14aea:	b90b      	cbnz	r3, 14af0 <btshell_restart_adv+0x10>
        return 0;
   14aec:	2000      	movs	r0, #0
}
   14aee:	4770      	bx	lr
{
   14af0:	b500      	push	{lr}
   14af2:	b083      	sub	sp, #12
    rc = ble_gap_adv_start(adv_params.own_addr_type, &adv_params.direct_addr,
   14af4:	4808      	ldr	r0, [pc, #32]	; (14b18 <btshell_restart_adv+0x38>)
   14af6:	2300      	movs	r3, #0
   14af8:	9301      	str	r3, [sp, #4]
   14afa:	4b08      	ldr	r3, [pc, #32]	; (14b1c <btshell_restart_adv+0x3c>)
   14afc:	9300      	str	r3, [sp, #0]
   14afe:	f100 0310 	add.w	r3, r0, #16
   14b02:	68c2      	ldr	r2, [r0, #12]
   14b04:	1c81      	adds	r1, r0, #2
   14b06:	7840      	ldrb	r0, [r0, #1]
   14b08:	f00d fa3a 	bl	21f80 <ble_gap_adv_start>
}
   14b0c:	b003      	add	sp, #12
   14b0e:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
   14b12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14b16:	4770      	bx	lr
   14b18:	10001e84 	.word	0x10001e84
   14b1c:	00014df1 	.word	0x00014df1

00014b20 <btshell_print_adv_fields>:
{
   14b20:	b570      	push	{r4, r5, r6, lr}
   14b22:	4604      	mov	r4, r0
    if (fields->flags != 0) {
   14b24:	7801      	ldrb	r1, [r0, #0]
   14b26:	b9c1      	cbnz	r1, 14b5a <btshell_print_adv_fields+0x3a>
    if (fields->uuids16 != NULL) {
   14b28:	6863      	ldr	r3, [r4, #4]
   14b2a:	2b00      	cmp	r3, #0
   14b2c:	d03d      	beq.n	14baa <btshell_print_adv_fields+0x8a>
                       fields->uuids16_is_complete ? "" : "in");
   14b2e:	7a63      	ldrb	r3, [r4, #9]
        console_printf("    uuids16(%scomplete)=",
   14b30:	f013 0f01 	tst.w	r3, #1
   14b34:	d034      	beq.n	14ba0 <btshell_print_adv_fields+0x80>
   14b36:	4985      	ldr	r1, [pc, #532]	; (14d4c <btshell_print_adv_fields+0x22c>)
   14b38:	4885      	ldr	r0, [pc, #532]	; (14d50 <btshell_print_adv_fields+0x230>)
   14b3a:	f007 faf7 	bl	1c12c <console_printf>
        for (i = 0; i < fields->num_uuids16; i++) {
   14b3e:	2500      	movs	r5, #0
   14b40:	7a23      	ldrb	r3, [r4, #8]
   14b42:	42ab      	cmp	r3, r5
   14b44:	dd2e      	ble.n	14ba4 <btshell_print_adv_fields+0x84>
            print_uuid(&fields->uuids16[i].u);
   14b46:	6860      	ldr	r0, [r4, #4]
   14b48:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   14b4c:	f000 ff50 	bl	159f0 <print_uuid>
            console_printf(" ");
   14b50:	4880      	ldr	r0, [pc, #512]	; (14d54 <btshell_print_adv_fields+0x234>)
   14b52:	f007 faeb 	bl	1c12c <console_printf>
        for (i = 0; i < fields->num_uuids16; i++) {
   14b56:	3501      	adds	r5, #1
   14b58:	e7f2      	b.n	14b40 <btshell_print_adv_fields+0x20>
        console_printf("    flags=0x%02x:\n", fields->flags);
   14b5a:	487f      	ldr	r0, [pc, #508]	; (14d58 <btshell_print_adv_fields+0x238>)
   14b5c:	f007 fae6 	bl	1c12c <console_printf>
        if (!(fields->flags & BLE_HS_ADV_F_DISC_LTD) &&
   14b60:	7823      	ldrb	r3, [r4, #0]
   14b62:	f013 0f03 	tst.w	r3, #3
   14b66:	d00f      	beq.n	14b88 <btshell_print_adv_fields+0x68>
        if (fields->flags & BLE_HS_ADV_F_DISC_LTD) {
   14b68:	7823      	ldrb	r3, [r4, #0]
   14b6a:	f013 0f01 	tst.w	r3, #1
   14b6e:	d10f      	bne.n	14b90 <btshell_print_adv_fields+0x70>
        if (fields->flags & BLE_HS_ADV_F_DISC_GEN) {
   14b70:	7823      	ldrb	r3, [r4, #0]
   14b72:	f013 0f02 	tst.w	r3, #2
   14b76:	d10f      	bne.n	14b98 <btshell_print_adv_fields+0x78>
        if (fields->flags & BLE_HS_ADV_F_BREDR_UNSUP) {
   14b78:	7823      	ldrb	r3, [r4, #0]
   14b7a:	f013 0f04 	tst.w	r3, #4
   14b7e:	d0d3      	beq.n	14b28 <btshell_print_adv_fields+0x8>
                console_printf("        BR/EDR not supported\n");
   14b80:	4876      	ldr	r0, [pc, #472]	; (14d5c <btshell_print_adv_fields+0x23c>)
   14b82:	f007 fad3 	bl	1c12c <console_printf>
   14b86:	e7cf      	b.n	14b28 <btshell_print_adv_fields+0x8>
                console_printf("        Non-discoverable mode\n");
   14b88:	4875      	ldr	r0, [pc, #468]	; (14d60 <btshell_print_adv_fields+0x240>)
   14b8a:	f007 facf 	bl	1c12c <console_printf>
   14b8e:	e7eb      	b.n	14b68 <btshell_print_adv_fields+0x48>
                console_printf("        Limited discoverable mode\n");
   14b90:	4874      	ldr	r0, [pc, #464]	; (14d64 <btshell_print_adv_fields+0x244>)
   14b92:	f007 facb 	bl	1c12c <console_printf>
   14b96:	e7eb      	b.n	14b70 <btshell_print_adv_fields+0x50>
                console_printf("        General discoverable mode\n");
   14b98:	4873      	ldr	r0, [pc, #460]	; (14d68 <btshell_print_adv_fields+0x248>)
   14b9a:	f007 fac7 	bl	1c12c <console_printf>
   14b9e:	e7eb      	b.n	14b78 <btshell_print_adv_fields+0x58>
        console_printf("    uuids16(%scomplete)=",
   14ba0:	4972      	ldr	r1, [pc, #456]	; (14d6c <btshell_print_adv_fields+0x24c>)
   14ba2:	e7c9      	b.n	14b38 <btshell_print_adv_fields+0x18>
        console_printf("\n");
   14ba4:	4872      	ldr	r0, [pc, #456]	; (14d70 <btshell_print_adv_fields+0x250>)
   14ba6:	f007 fac1 	bl	1c12c <console_printf>
    if (fields->uuids32 != NULL) {
   14baa:	68e3      	ldr	r3, [r4, #12]
   14bac:	b1d3      	cbz	r3, 14be4 <btshell_print_adv_fields+0xc4>
                       fields->uuids32_is_complete ? "" : "in");
   14bae:	7c63      	ldrb	r3, [r4, #17]
        console_printf("    uuids32(%scomplete)=",
   14bb0:	f013 0f01 	tst.w	r3, #1
   14bb4:	d011      	beq.n	14bda <btshell_print_adv_fields+0xba>
   14bb6:	4965      	ldr	r1, [pc, #404]	; (14d4c <btshell_print_adv_fields+0x22c>)
   14bb8:	486e      	ldr	r0, [pc, #440]	; (14d74 <btshell_print_adv_fields+0x254>)
   14bba:	f007 fab7 	bl	1c12c <console_printf>
        for (i = 0; i < fields->num_uuids32; i++) {
   14bbe:	2500      	movs	r5, #0
   14bc0:	7c23      	ldrb	r3, [r4, #16]
   14bc2:	42ab      	cmp	r3, r5
   14bc4:	dd0b      	ble.n	14bde <btshell_print_adv_fields+0xbe>
            print_uuid(&fields->uuids32[i].u);
   14bc6:	68e0      	ldr	r0, [r4, #12]
   14bc8:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   14bcc:	f000 ff10 	bl	159f0 <print_uuid>
            console_printf(" ");
   14bd0:	4860      	ldr	r0, [pc, #384]	; (14d54 <btshell_print_adv_fields+0x234>)
   14bd2:	f007 faab 	bl	1c12c <console_printf>
        for (i = 0; i < fields->num_uuids32; i++) {
   14bd6:	3501      	adds	r5, #1
   14bd8:	e7f2      	b.n	14bc0 <btshell_print_adv_fields+0xa0>
        console_printf("    uuids32(%scomplete)=",
   14bda:	4964      	ldr	r1, [pc, #400]	; (14d6c <btshell_print_adv_fields+0x24c>)
   14bdc:	e7ec      	b.n	14bb8 <btshell_print_adv_fields+0x98>
        console_printf("\n");
   14bde:	4864      	ldr	r0, [pc, #400]	; (14d70 <btshell_print_adv_fields+0x250>)
   14be0:	f007 faa4 	bl	1c12c <console_printf>
    if (fields->uuids128 != NULL) {
   14be4:	6963      	ldr	r3, [r4, #20]
   14be6:	b1db      	cbz	r3, 14c20 <btshell_print_adv_fields+0x100>
                       fields->uuids128_is_complete ? "" : "in");
   14be8:	7e63      	ldrb	r3, [r4, #25]
        console_printf("    uuids128(%scomplete)=",
   14bea:	f013 0f01 	tst.w	r3, #1
   14bee:	d005      	beq.n	14bfc <btshell_print_adv_fields+0xdc>
   14bf0:	4956      	ldr	r1, [pc, #344]	; (14d4c <btshell_print_adv_fields+0x22c>)
   14bf2:	4861      	ldr	r0, [pc, #388]	; (14d78 <btshell_print_adv_fields+0x258>)
   14bf4:	f007 fa9a 	bl	1c12c <console_printf>
        for (i = 0; i < fields->num_uuids128; i++) {
   14bf8:	2500      	movs	r5, #0
   14bfa:	e00b      	b.n	14c14 <btshell_print_adv_fields+0xf4>
        console_printf("    uuids128(%scomplete)=",
   14bfc:	495b      	ldr	r1, [pc, #364]	; (14d6c <btshell_print_adv_fields+0x24c>)
   14bfe:	e7f8      	b.n	14bf2 <btshell_print_adv_fields+0xd2>
            print_uuid(&fields->uuids128[i].u);
   14c00:	6960      	ldr	r0, [r4, #20]
   14c02:	eb05 1305 	add.w	r3, r5, r5, lsl #4
   14c06:	4418      	add	r0, r3
   14c08:	f000 fef2 	bl	159f0 <print_uuid>
            console_printf(" ");
   14c0c:	4851      	ldr	r0, [pc, #324]	; (14d54 <btshell_print_adv_fields+0x234>)
   14c0e:	f007 fa8d 	bl	1c12c <console_printf>
        for (i = 0; i < fields->num_uuids128; i++) {
   14c12:	3501      	adds	r5, #1
   14c14:	7e23      	ldrb	r3, [r4, #24]
   14c16:	42ab      	cmp	r3, r5
   14c18:	dcf2      	bgt.n	14c00 <btshell_print_adv_fields+0xe0>
        console_printf("\n");
   14c1a:	4855      	ldr	r0, [pc, #340]	; (14d70 <btshell_print_adv_fields+0x250>)
   14c1c:	f007 fa86 	bl	1c12c <console_printf>
    if (fields->name != NULL) {
   14c20:	69e3      	ldr	r3, [r4, #28]
   14c22:	b183      	cbz	r3, 14c46 <btshell_print_adv_fields+0x126>
                       fields->name_is_complete ? "" : "in");
   14c24:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
        console_printf("    name(%scomplete)=",
   14c28:	f013 0f01 	tst.w	r3, #1
   14c2c:	d03a      	beq.n	14ca4 <btshell_print_adv_fields+0x184>
   14c2e:	4947      	ldr	r1, [pc, #284]	; (14d4c <btshell_print_adv_fields+0x22c>)
   14c30:	4852      	ldr	r0, [pc, #328]	; (14d7c <btshell_print_adv_fields+0x25c>)
   14c32:	f007 fa7b 	bl	1c12c <console_printf>
        console_write((char *)fields->name, fields->name_len);
   14c36:	f894 1020 	ldrb.w	r1, [r4, #32]
   14c3a:	69e0      	ldr	r0, [r4, #28]
   14c3c:	f007 f8be 	bl	1bdbc <console_write>
        console_printf("\n");
   14c40:	484b      	ldr	r0, [pc, #300]	; (14d70 <btshell_print_adv_fields+0x250>)
   14c42:	f007 fa73 	bl	1c12c <console_printf>
    if (fields->tx_pwr_lvl_is_present) {
   14c46:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   14c4a:	f013 0f01 	tst.w	r3, #1
   14c4e:	d12b      	bne.n	14ca8 <btshell_print_adv_fields+0x188>
    if (fields->slave_itvl_range != NULL) {
   14c50:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14c52:	b14b      	cbz	r3, 14c68 <btshell_print_adv_fields+0x148>
        console_printf("    slave_itvl_range=");
   14c54:	484a      	ldr	r0, [pc, #296]	; (14d80 <btshell_print_adv_fields+0x260>)
   14c56:	f007 fa69 	bl	1c12c <console_printf>
        print_bytes(fields->slave_itvl_range,
   14c5a:	2104      	movs	r1, #4
   14c5c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   14c5e:	f000 fe87 	bl	15970 <print_bytes>
        console_printf("\n");
   14c62:	4843      	ldr	r0, [pc, #268]	; (14d70 <btshell_print_adv_fields+0x250>)
   14c64:	f007 fa62 	bl	1c12c <console_printf>
    if (fields->svc_data_uuid16 != NULL) {
   14c68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14c6a:	b153      	cbz	r3, 14c82 <btshell_print_adv_fields+0x162>
        console_printf("    svc_data_uuid16=");
   14c6c:	4845      	ldr	r0, [pc, #276]	; (14d84 <btshell_print_adv_fields+0x264>)
   14c6e:	f007 fa5d 	bl	1c12c <console_printf>
        print_bytes(fields->svc_data_uuid16,
   14c72:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   14c76:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   14c78:	f000 fe7a 	bl	15970 <print_bytes>
        console_printf("\n");
   14c7c:	483c      	ldr	r0, [pc, #240]	; (14d70 <btshell_print_adv_fields+0x250>)
   14c7e:	f007 fa55 	bl	1c12c <console_printf>
    if (fields->public_tgt_addr != NULL) {
   14c82:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14c84:	b1cb      	cbz	r3, 14cba <btshell_print_adv_fields+0x19a>
        console_printf("    public_tgt_addr=");
   14c86:	4840      	ldr	r0, [pc, #256]	; (14d88 <btshell_print_adv_fields+0x268>)
   14c88:	f007 fa50 	bl	1c12c <console_printf>
        u8p = fields->public_tgt_addr;
   14c8c:	6b26      	ldr	r6, [r4, #48]	; 0x30
        for (i = 0; i < fields->num_public_tgt_addrs; i++) {
   14c8e:	2500      	movs	r5, #0
   14c90:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   14c94:	42ab      	cmp	r3, r5
   14c96:	dd0d      	ble.n	14cb4 <btshell_print_adv_fields+0x194>
            print_addr(u8p);
   14c98:	4630      	mov	r0, r6
   14c9a:	f000 fe95 	bl	159c8 <print_addr>
            u8p += BLE_HS_ADV_PUBLIC_TGT_ADDR_ENTRY_LEN;
   14c9e:	3606      	adds	r6, #6
        for (i = 0; i < fields->num_public_tgt_addrs; i++) {
   14ca0:	3501      	adds	r5, #1
   14ca2:	e7f5      	b.n	14c90 <btshell_print_adv_fields+0x170>
        console_printf("    name(%scomplete)=",
   14ca4:	4931      	ldr	r1, [pc, #196]	; (14d6c <btshell_print_adv_fields+0x24c>)
   14ca6:	e7c3      	b.n	14c30 <btshell_print_adv_fields+0x110>
        console_printf("    tx_pwr_lvl=%d\n", fields->tx_pwr_lvl);
   14ca8:	f994 1022 	ldrsb.w	r1, [r4, #34]	; 0x22
   14cac:	4837      	ldr	r0, [pc, #220]	; (14d8c <btshell_print_adv_fields+0x26c>)
   14cae:	f007 fa3d 	bl	1c12c <console_printf>
   14cb2:	e7cd      	b.n	14c50 <btshell_print_adv_fields+0x130>
        console_printf("\n");
   14cb4:	482e      	ldr	r0, [pc, #184]	; (14d70 <btshell_print_adv_fields+0x250>)
   14cb6:	f007 fa39 	bl	1c12c <console_printf>
    if (fields->appearance_is_present) {
   14cba:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   14cbe:	f013 0f01 	tst.w	r3, #1
   14cc2:	d139      	bne.n	14d38 <btshell_print_adv_fields+0x218>
    if (fields->adv_itvl_is_present) {
   14cc4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   14cc8:	f013 0f01 	tst.w	r3, #1
   14ccc:	d139      	bne.n	14d42 <btshell_print_adv_fields+0x222>
    if (fields->svc_data_uuid32 != NULL) {
   14cce:	6c23      	ldr	r3, [r4, #64]	; 0x40
   14cd0:	b153      	cbz	r3, 14ce8 <btshell_print_adv_fields+0x1c8>
        console_printf("    svc_data_uuid32=");
   14cd2:	482f      	ldr	r0, [pc, #188]	; (14d90 <btshell_print_adv_fields+0x270>)
   14cd4:	f007 fa2a 	bl	1c12c <console_printf>
        print_bytes(fields->svc_data_uuid32,
   14cd8:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
   14cdc:	6c20      	ldr	r0, [r4, #64]	; 0x40
   14cde:	f000 fe47 	bl	15970 <print_bytes>
        console_printf("\n");
   14ce2:	4823      	ldr	r0, [pc, #140]	; (14d70 <btshell_print_adv_fields+0x250>)
   14ce4:	f007 fa22 	bl	1c12c <console_printf>
    if (fields->svc_data_uuid128 != NULL) {
   14ce8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   14cea:	b153      	cbz	r3, 14d02 <btshell_print_adv_fields+0x1e2>
        console_printf("    svc_data_uuid128=");
   14cec:	4829      	ldr	r0, [pc, #164]	; (14d94 <btshell_print_adv_fields+0x274>)
   14cee:	f007 fa1d 	bl	1c12c <console_printf>
        print_bytes(fields->svc_data_uuid128,
   14cf2:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
   14cf6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   14cf8:	f000 fe3a 	bl	15970 <print_bytes>
        console_printf("\n");
   14cfc:	481c      	ldr	r0, [pc, #112]	; (14d70 <btshell_print_adv_fields+0x250>)
   14cfe:	f007 fa15 	bl	1c12c <console_printf>
    if (fields->uri != NULL) {
   14d02:	6d23      	ldr	r3, [r4, #80]	; 0x50
   14d04:	b153      	cbz	r3, 14d1c <btshell_print_adv_fields+0x1fc>
        console_printf("    uri=");
   14d06:	4824      	ldr	r0, [pc, #144]	; (14d98 <btshell_print_adv_fields+0x278>)
   14d08:	f007 fa10 	bl	1c12c <console_printf>
        print_bytes(fields->uri, fields->uri_len);
   14d0c:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
   14d10:	6d20      	ldr	r0, [r4, #80]	; 0x50
   14d12:	f000 fe2d 	bl	15970 <print_bytes>
        console_printf("\n");
   14d16:	4816      	ldr	r0, [pc, #88]	; (14d70 <btshell_print_adv_fields+0x250>)
   14d18:	f007 fa08 	bl	1c12c <console_printf>
    if (fields->mfg_data != NULL) {
   14d1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   14d1e:	b153      	cbz	r3, 14d36 <btshell_print_adv_fields+0x216>
        console_printf("    mfg_data=");
   14d20:	481e      	ldr	r0, [pc, #120]	; (14d9c <btshell_print_adv_fields+0x27c>)
   14d22:	f007 fa03 	bl	1c12c <console_printf>
        print_bytes(fields->mfg_data, fields->mfg_data_len);
   14d26:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
   14d2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14d2c:	f000 fe20 	bl	15970 <print_bytes>
        console_printf("\n");
   14d30:	480f      	ldr	r0, [pc, #60]	; (14d70 <btshell_print_adv_fields+0x250>)
   14d32:	f007 f9fb 	bl	1c12c <console_printf>
}
   14d36:	bd70      	pop	{r4, r5, r6, pc}
        console_printf("    appearance=0x%04x\n", fields->appearance);
   14d38:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
   14d3a:	4819      	ldr	r0, [pc, #100]	; (14da0 <btshell_print_adv_fields+0x280>)
   14d3c:	f007 f9f6 	bl	1c12c <console_printf>
   14d40:	e7c0      	b.n	14cc4 <btshell_print_adv_fields+0x1a4>
        console_printf("    adv_itvl=0x%04x\n", fields->adv_itvl);
   14d42:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
   14d44:	4817      	ldr	r0, [pc, #92]	; (14da4 <btshell_print_adv_fields+0x284>)
   14d46:	f007 f9f1 	bl	1c12c <console_printf>
   14d4a:	e7c0      	b.n	14cce <btshell_print_adv_fields+0x1ae>
   14d4c:	00034114 	.word	0x00034114
   14d50:	0002fdc4 	.word	0x0002fdc4
   14d54:	000307ec 	.word	0x000307ec
   14d58:	0002fd28 	.word	0x0002fd28
   14d5c:	0002fda4 	.word	0x0002fda4
   14d60:	0002fd3c 	.word	0x0002fd3c
   14d64:	0002fd5c 	.word	0x0002fd5c
   14d68:	0002fd80 	.word	0x0002fd80
   14d6c:	000314d0 	.word	0x000314d0
   14d70:	0002ff28 	.word	0x0002ff28
   14d74:	0002fde0 	.word	0x0002fde0
   14d78:	0002fdfc 	.word	0x0002fdfc
   14d7c:	0002fe18 	.word	0x0002fe18
   14d80:	0002fe44 	.word	0x0002fe44
   14d84:	0002fe5c 	.word	0x0002fe5c
   14d88:	0002fe74 	.word	0x0002fe74
   14d8c:	0002fe30 	.word	0x0002fe30
   14d90:	0002febc 	.word	0x0002febc
   14d94:	0002fed4 	.word	0x0002fed4
   14d98:	0002feec 	.word	0x0002feec
   14d9c:	0002fef8 	.word	0x0002fef8
   14da0:	0002fe8c 	.word	0x0002fe8c
   14da4:	0002fea4 	.word	0x0002fea4

00014da8 <btshell_decode_adv_data>:
{
   14da8:	b570      	push	{r4, r5, r6, lr}
   14daa:	b098      	sub	sp, #96	; 0x60
   14dac:	4605      	mov	r5, r0
   14dae:	460c      	mov	r4, r1
   14db0:	4616      	mov	r6, r2
    console_printf(" data_length=%d data=", adv_data_len);
   14db2:	480d      	ldr	r0, [pc, #52]	; (14de8 <btshell_decode_adv_data+0x40>)
   14db4:	f007 f9ba 	bl	1c12c <console_printf>
    if (scan_opts) {
   14db8:	b126      	cbz	r6, 14dc4 <btshell_decode_adv_data+0x1c>
        adv_data_len = min(adv_data_len, scan_opts->limit);
   14dba:	b2a3      	uxth	r3, r4
   14dbc:	8832      	ldrh	r2, [r6, #0]
   14dbe:	4293      	cmp	r3, r2
   14dc0:	d300      	bcc.n	14dc4 <btshell_decode_adv_data+0x1c>
   14dc2:	b2d4      	uxtb	r4, r2
    print_bytes(adv_data, adv_data_len);
   14dc4:	4621      	mov	r1, r4
   14dc6:	4628      	mov	r0, r5
   14dc8:	f000 fdd2 	bl	15970 <print_bytes>
    console_printf(" fields:\n");
   14dcc:	4807      	ldr	r0, [pc, #28]	; (14dec <btshell_decode_adv_data+0x44>)
   14dce:	f007 f9ad 	bl	1c12c <console_printf>
    ble_hs_adv_parse_fields(&fields, adv_data, adv_data_len);
   14dd2:	4622      	mov	r2, r4
   14dd4:	4629      	mov	r1, r5
   14dd6:	4668      	mov	r0, sp
   14dd8:	f012 fac8 	bl	2736c <ble_hs_adv_parse_fields>
    btshell_print_adv_fields(&fields);
   14ddc:	4668      	mov	r0, sp
   14dde:	f7ff fe9f 	bl	14b20 <btshell_print_adv_fields>
}
   14de2:	b018      	add	sp, #96	; 0x60
   14de4:	bd70      	pop	{r4, r5, r6, pc}
   14de6:	bf00      	nop
   14de8:	0002ff08 	.word	0x0002ff08
   14dec:	0002ff20 	.word	0x0002ff20

00014df0 <btshell_gap_event>:
{
   14df0:	b530      	push	{r4, r5, lr}
   14df2:	b091      	sub	sp, #68	; 0x44
   14df4:	4604      	mov	r4, r0
    switch (event->type) {
   14df6:	7803      	ldrb	r3, [r0, #0]
   14df8:	2b12      	cmp	r3, #18
   14dfa:	f200 8130 	bhi.w	1505e <btshell_gap_event+0x26e>
   14dfe:	e8df f013 	tbh	[pc, r3, lsl #1]
   14e02:	0013      	.short	0x0013
   14e04:	012e0036 	.word	0x012e0036
   14e08:	007e0066 	.word	0x007e0066
   14e0c:	012e012e 	.word	0x012e012e
   14e10:	009c004c 	.word	0x009c004c
   14e14:	00a800a2 	.word	0x00a800a2
   14e18:	00c0008b 	.word	0x00c0008b
   14e1c:	00db00d1 	.word	0x00db00d1
   14e20:	00f800f0 	.word	0x00f800f0
   14e24:	010f0119 	.word	0x010f0119
                       event->connect.status == 0 ? "established" : "failed",
   14e28:	6842      	ldr	r2, [r0, #4]
        console_printf("connection %s; status=%d ",
   14e2a:	b93a      	cbnz	r2, 14e3c <btshell_gap_event+0x4c>
   14e2c:	498e      	ldr	r1, [pc, #568]	; (15068 <btshell_gap_event+0x278>)
   14e2e:	488f      	ldr	r0, [pc, #572]	; (1506c <btshell_gap_event+0x27c>)
   14e30:	f007 f97c 	bl	1c12c <console_printf>
        if (event->connect.status == 0) {
   14e34:	6863      	ldr	r3, [r4, #4]
   14e36:	b11b      	cbz	r3, 14e40 <btshell_gap_event+0x50>
        return 0;
   14e38:	2400      	movs	r4, #0
   14e3a:	e111      	b.n	15060 <btshell_gap_event+0x270>
        console_printf("connection %s; status=%d ",
   14e3c:	498c      	ldr	r1, [pc, #560]	; (15070 <btshell_gap_event+0x280>)
   14e3e:	e7f6      	b.n	14e2e <btshell_gap_event+0x3e>
            rc = ble_gap_conn_find(event->connect.conn_handle, &desc);
   14e40:	a905      	add	r1, sp, #20
   14e42:	8920      	ldrh	r0, [r4, #8]
   14e44:	f00c ff2e 	bl	21ca4 <ble_gap_conn_find>
            assert(rc == 0);
   14e48:	4604      	mov	r4, r0
   14e4a:	b930      	cbnz	r0, 14e5a <btshell_gap_event+0x6a>
            print_conn_desc(&desc);
   14e4c:	a805      	add	r0, sp, #20
   14e4e:	f000 fe1d 	bl	15a8c <print_conn_desc>
            btshell_conn_add(&desc);
   14e52:	a805      	add	r0, sp, #20
   14e54:	f7ff fd82 	bl	1495c <btshell_conn_add>
   14e58:	e102      	b.n	15060 <btshell_gap_event+0x270>
            assert(rc == 0);
   14e5a:	f7ff fc53 	bl	14704 <hal_debugger_connected>
   14e5e:	b100      	cbz	r0, 14e62 <btshell_gap_event+0x72>
   14e60:	be01      	bkpt	0x0001
   14e62:	2300      	movs	r3, #0
   14e64:	461a      	mov	r2, r3
   14e66:	4619      	mov	r1, r3
   14e68:	4618      	mov	r0, r3
   14e6a:	f003 ff5b 	bl	18d24 <__assert_func>
        console_printf("disconnect; reason=%d ", event->disconnect.reason);
   14e6e:	6841      	ldr	r1, [r0, #4]
   14e70:	4880      	ldr	r0, [pc, #512]	; (15074 <btshell_gap_event+0x284>)
   14e72:	f007 f95b 	bl	1c12c <console_printf>
        print_conn_desc(&event->disconnect.conn);
   14e76:	f104 0008 	add.w	r0, r4, #8
   14e7a:	f000 fe07 	bl	15a8c <print_conn_desc>
        conn_idx = btshell_conn_find_idx(event->disconnect.conn.conn_handle);
   14e7e:	8d20      	ldrh	r0, [r4, #40]	; 0x28
   14e80:	f7ff fc92 	bl	147a8 <btshell_conn_find_idx>
        if (conn_idx != -1) {
   14e84:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   14e88:	d104      	bne.n	14e94 <btshell_gap_event+0xa4>
        return btshell_restart_adv(event);
   14e8a:	4620      	mov	r0, r4
   14e8c:	f7ff fe28 	bl	14ae0 <btshell_restart_adv>
   14e90:	4604      	mov	r4, r0
   14e92:	e0e5      	b.n	15060 <btshell_gap_event+0x270>
            btshell_conn_delete_idx(conn_idx);
   14e94:	f7ff fdfc 	bl	14a90 <btshell_conn_delete_idx>
   14e98:	e7f7      	b.n	14e8a <btshell_gap_event+0x9a>
   14e9a:	460d      	mov	r5, r1
        console_printf("received advertisement; event_type=%d rssi=%d "
   14e9c:	7983      	ldrb	r3, [r0, #6]
   14e9e:	f990 200d 	ldrsb.w	r2, [r0, #13]
   14ea2:	7901      	ldrb	r1, [r0, #4]
   14ea4:	4874      	ldr	r0, [pc, #464]	; (15078 <btshell_gap_event+0x288>)
   14ea6:	f007 f941 	bl	1c12c <console_printf>
        print_addr(event->disc.addr.val);
   14eaa:	1de0      	adds	r0, r4, #7
   14eac:	f000 fd8c 	bl	159c8 <print_addr>
        if (event->disc.event_type == BLE_HCI_ADV_RPT_EVTYPE_DIR_IND) {
   14eb0:	7923      	ldrb	r3, [r4, #4]
   14eb2:	2b01      	cmp	r3, #1
   14eb4:	d006      	beq.n	14ec4 <btshell_gap_event+0xd4>
        btshell_decode_adv_data(event->disc.data, event->disc.length_data, arg);
   14eb6:	462a      	mov	r2, r5
   14eb8:	7961      	ldrb	r1, [r4, #5]
   14eba:	6920      	ldr	r0, [r4, #16]
   14ebc:	f7ff ff74 	bl	14da8 <btshell_decode_adv_data>
        return 0;
   14ec0:	2400      	movs	r4, #0
   14ec2:	e0cd      	b.n	15060 <btshell_gap_event+0x270>
                console_printf("\nConnectable directed advertising event\n");
   14ec4:	486d      	ldr	r0, [pc, #436]	; (1507c <btshell_gap_event+0x28c>)
   14ec6:	f007 f931 	bl	1c12c <console_printf>
                return 0;
   14eca:	2400      	movs	r4, #0
   14ecc:	e0c8      	b.n	15060 <btshell_gap_event+0x270>
        console_printf("connection updated; status=%d ",
   14ece:	6841      	ldr	r1, [r0, #4]
   14ed0:	486b      	ldr	r0, [pc, #428]	; (15080 <btshell_gap_event+0x290>)
   14ed2:	f007 f92b 	bl	1c12c <console_printf>
        rc = ble_gap_conn_find(event->conn_update.conn_handle, &desc);
   14ed6:	a905      	add	r1, sp, #20
   14ed8:	8920      	ldrh	r0, [r4, #8]
   14eda:	f00c fee3 	bl	21ca4 <ble_gap_conn_find>
        assert(rc == 0);
   14ede:	4604      	mov	r4, r0
   14ee0:	b918      	cbnz	r0, 14eea <btshell_gap_event+0xfa>
        print_conn_desc(&desc);
   14ee2:	a805      	add	r0, sp, #20
   14ee4:	f000 fdd2 	bl	15a8c <print_conn_desc>
        return 0;
   14ee8:	e0ba      	b.n	15060 <btshell_gap_event+0x270>
        assert(rc == 0);
   14eea:	f7ff fc0b 	bl	14704 <hal_debugger_connected>
   14eee:	b100      	cbz	r0, 14ef2 <btshell_gap_event+0x102>
   14ef0:	be01      	bkpt	0x0001
   14ef2:	2300      	movs	r3, #0
   14ef4:	461a      	mov	r2, r3
   14ef6:	4619      	mov	r1, r3
   14ef8:	4618      	mov	r0, r3
   14efa:	f003 ff13 	bl	18d24 <__assert_func>
        console_printf("connection update request\n");
   14efe:	4861      	ldr	r0, [pc, #388]	; (15084 <btshell_gap_event+0x294>)
   14f00:	f007 f914 	bl	1c12c <console_printf>
            *event->conn_update_req.peer_params;
   14f04:	6862      	ldr	r2, [r4, #4]
        *event->conn_update_req.self_params =
   14f06:	68a3      	ldr	r3, [r4, #8]
   14f08:	6810      	ldr	r0, [r2, #0]
   14f0a:	6851      	ldr	r1, [r2, #4]
   14f0c:	6892      	ldr	r2, [r2, #8]
   14f0e:	6018      	str	r0, [r3, #0]
   14f10:	6059      	str	r1, [r3, #4]
   14f12:	609a      	str	r2, [r3, #8]
        return 0;
   14f14:	2400      	movs	r4, #0
   14f16:	e0a3      	b.n	15060 <btshell_gap_event+0x270>
        console_printf("passkey action event; action=%d",
   14f18:	7901      	ldrb	r1, [r0, #4]
   14f1a:	485b      	ldr	r0, [pc, #364]	; (15088 <btshell_gap_event+0x298>)
   14f1c:	f007 f906 	bl	1c12c <console_printf>
        if (event->passkey.params.action == BLE_SM_IOACT_NUMCMP) {
   14f20:	7923      	ldrb	r3, [r4, #4]
   14f22:	2b04      	cmp	r3, #4
   14f24:	d004      	beq.n	14f30 <btshell_gap_event+0x140>
        console_printf("\n");
   14f26:	4859      	ldr	r0, [pc, #356]	; (1508c <btshell_gap_event+0x29c>)
   14f28:	f007 f900 	bl	1c12c <console_printf>
        return 0;
   14f2c:	2400      	movs	r4, #0
   14f2e:	e097      	b.n	15060 <btshell_gap_event+0x270>
            console_printf(" numcmp=%lu",
   14f30:	68a1      	ldr	r1, [r4, #8]
   14f32:	4857      	ldr	r0, [pc, #348]	; (15090 <btshell_gap_event+0x2a0>)
   14f34:	f007 f8fa 	bl	1c12c <console_printf>
   14f38:	e7f5      	b.n	14f26 <btshell_gap_event+0x136>
        console_printf("discovery complete; reason=%d\n",
   14f3a:	6841      	ldr	r1, [r0, #4]
   14f3c:	4855      	ldr	r0, [pc, #340]	; (15094 <btshell_gap_event+0x2a4>)
   14f3e:	f007 f8f5 	bl	1c12c <console_printf>
        return 0;
   14f42:	2400      	movs	r4, #0
   14f44:	e08c      	b.n	15060 <btshell_gap_event+0x270>
        console_printf("advertise complete; reason=%d\n",
   14f46:	6841      	ldr	r1, [r0, #4]
   14f48:	4853      	ldr	r0, [pc, #332]	; (15098 <btshell_gap_event+0x2a8>)
   14f4a:	f007 f8ef 	bl	1c12c <console_printf>
        return 0;
   14f4e:	2400      	movs	r4, #0
   14f50:	e086      	b.n	15060 <btshell_gap_event+0x270>
        console_printf("encryption change event; status=%d ",
   14f52:	6841      	ldr	r1, [r0, #4]
   14f54:	4851      	ldr	r0, [pc, #324]	; (1509c <btshell_gap_event+0x2ac>)
   14f56:	f007 f8e9 	bl	1c12c <console_printf>
        rc = ble_gap_conn_find(event->enc_change.conn_handle, &desc);
   14f5a:	a905      	add	r1, sp, #20
   14f5c:	8920      	ldrh	r0, [r4, #8]
   14f5e:	f00c fea1 	bl	21ca4 <ble_gap_conn_find>
        assert(rc == 0);
   14f62:	4604      	mov	r4, r0
   14f64:	b918      	cbnz	r0, 14f6e <btshell_gap_event+0x17e>
        print_conn_desc(&desc);
   14f66:	a805      	add	r0, sp, #20
   14f68:	f000 fd90 	bl	15a8c <print_conn_desc>
        return 0;
   14f6c:	e078      	b.n	15060 <btshell_gap_event+0x270>
        assert(rc == 0);
   14f6e:	f7ff fbc9 	bl	14704 <hal_debugger_connected>
   14f72:	b100      	cbz	r0, 14f76 <btshell_gap_event+0x186>
   14f74:	be01      	bkpt	0x0001
   14f76:	2300      	movs	r3, #0
   14f78:	461a      	mov	r2, r3
   14f7a:	4619      	mov	r1, r3
   14f7c:	4618      	mov	r0, r3
   14f7e:	f003 fed1 	bl	18d24 <__assert_func>
                       event->notify_rx.indication,
   14f82:	7b02      	ldrb	r2, [r0, #12]
                       OS_MBUF_PKTLEN(event->notify_rx.om));
   14f84:	6843      	ldr	r3, [r0, #4]
        console_printf("notification rx event; attr_handle=%d indication=%d "
   14f86:	8a1b      	ldrh	r3, [r3, #16]
   14f88:	f002 0201 	and.w	r2, r2, #1
   14f8c:	8901      	ldrh	r1, [r0, #8]
   14f8e:	4844      	ldr	r0, [pc, #272]	; (150a0 <btshell_gap_event+0x2b0>)
   14f90:	f007 f8cc 	bl	1c12c <console_printf>
        print_mbuf(event->notify_rx.om);
   14f94:	6860      	ldr	r0, [r4, #4]
   14f96:	f000 fd03 	bl	159a0 <print_mbuf>
        console_printf("\n");
   14f9a:	483c      	ldr	r0, [pc, #240]	; (1508c <btshell_gap_event+0x29c>)
   14f9c:	f007 f8c6 	bl	1c12c <console_printf>
        return 0;
   14fa0:	2400      	movs	r4, #0
   14fa2:	e05d      	b.n	15060 <btshell_gap_event+0x270>
                       event->notify_tx.indication);
   14fa4:	7b03      	ldrb	r3, [r0, #12]
        console_printf("notification tx event; status=%d attr_handle=%d "
   14fa6:	f003 0301 	and.w	r3, r3, #1
   14faa:	8942      	ldrh	r2, [r0, #10]
   14fac:	6841      	ldr	r1, [r0, #4]
   14fae:	483d      	ldr	r0, [pc, #244]	; (150a4 <btshell_gap_event+0x2b4>)
   14fb0:	f007 f8bc 	bl	1c12c <console_printf>
        return 0;
   14fb4:	2400      	movs	r4, #0
   14fb6:	e053      	b.n	15060 <btshell_gap_event+0x270>
                       event->subscribe.prev_notify,
   14fb8:	7a43      	ldrb	r3, [r0, #9]
   14fba:	f003 0201 	and.w	r2, r3, #1
                       event->subscribe.cur_notify,
   14fbe:	f3c3 0140 	ubfx	r1, r3, #1, #1
                       event->subscribe.prev_indicate,
   14fc2:	f3c3 0080 	ubfx	r0, r3, #2, #1
                       event->subscribe.cur_indicate);
   14fc6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
        console_printf("subscribe event; conn_handle=%d attr_handle=%d "
   14fca:	9303      	str	r3, [sp, #12]
   14fcc:	9002      	str	r0, [sp, #8]
   14fce:	9101      	str	r1, [sp, #4]
   14fd0:	9200      	str	r2, [sp, #0]
   14fd2:	7a23      	ldrb	r3, [r4, #8]
   14fd4:	88e2      	ldrh	r2, [r4, #6]
   14fd6:	88a1      	ldrh	r1, [r4, #4]
   14fd8:	4833      	ldr	r0, [pc, #204]	; (150a8 <btshell_gap_event+0x2b8>)
   14fda:	f007 f8a7 	bl	1c12c <console_printf>
        return 0;
   14fde:	2400      	movs	r4, #0
   14fe0:	e03e      	b.n	15060 <btshell_gap_event+0x270>
        console_printf("mtu update event; conn_handle=%d cid=%d mtu=%d\n",
   14fe2:	8903      	ldrh	r3, [r0, #8]
   14fe4:	88c2      	ldrh	r2, [r0, #6]
   14fe6:	8881      	ldrh	r1, [r0, #4]
   14fe8:	4830      	ldr	r0, [pc, #192]	; (150ac <btshell_gap_event+0x2bc>)
   14fea:	f007 f89f 	bl	1c12c <console_printf>
        return 0;
   14fee:	2400      	movs	r4, #0
   14ff0:	e036      	b.n	15060 <btshell_gap_event+0x270>
        console_printf("identity resolved ");
   14ff2:	482f      	ldr	r0, [pc, #188]	; (150b0 <btshell_gap_event+0x2c0>)
   14ff4:	f007 f89a 	bl	1c12c <console_printf>
        rc = ble_gap_conn_find(event->identity_resolved.conn_handle, &desc);
   14ff8:	a905      	add	r1, sp, #20
   14ffa:	88a0      	ldrh	r0, [r4, #4]
   14ffc:	f00c fe52 	bl	21ca4 <ble_gap_conn_find>
        assert(rc == 0);
   15000:	4604      	mov	r4, r0
   15002:	b918      	cbnz	r0, 1500c <btshell_gap_event+0x21c>
        print_conn_desc(&desc);
   15004:	a805      	add	r0, sp, #20
   15006:	f000 fd41 	bl	15a8c <print_conn_desc>
        return 0;
   1500a:	e029      	b.n	15060 <btshell_gap_event+0x270>
        assert(rc == 0);
   1500c:	f7ff fb7a 	bl	14704 <hal_debugger_connected>
   15010:	b100      	cbz	r0, 15014 <btshell_gap_event+0x224>
   15012:	be01      	bkpt	0x0001
   15014:	2300      	movs	r3, #0
   15016:	461a      	mov	r2, r3
   15018:	4619      	mov	r1, r3
   1501a:	4618      	mov	r0, r3
   1501c:	f003 fe82 	bl	18d24 <__assert_func>
                       event->phy_updated.rx_phy);
   15020:	7ac3      	ldrb	r3, [r0, #11]
        console_printf("PHY update complete; status=%d, conn_handle=%d "
   15022:	9300      	str	r3, [sp, #0]
   15024:	7a83      	ldrb	r3, [r0, #10]
   15026:	8902      	ldrh	r2, [r0, #8]
   15028:	6841      	ldr	r1, [r0, #4]
   1502a:	4822      	ldr	r0, [pc, #136]	; (150b4 <btshell_gap_event+0x2c4>)
   1502c:	f007 f87e 	bl	1c12c <console_printf>
        return 0;
   15030:	2400      	movs	r4, #0
   15032:	e015      	b.n	15060 <btshell_gap_event+0x270>
        rc = ble_gap_conn_find(event->repeat_pairing.conn_handle, &desc);
   15034:	a905      	add	r1, sp, #20
   15036:	8880      	ldrh	r0, [r0, #4]
   15038:	f00c fe34 	bl	21ca4 <ble_gap_conn_find>
        assert(rc == 0);
   1503c:	b928      	cbnz	r0, 1504a <btshell_gap_event+0x25a>
        ble_store_util_delete_peer(&desc.peer_id_addr);
   1503e:	f10d 001f 	add.w	r0, sp, #31
   15042:	f014 fc33 	bl	298ac <ble_store_util_delete_peer>
        return BLE_GAP_REPEAT_PAIRING_RETRY;
   15046:	2401      	movs	r4, #1
   15048:	e00a      	b.n	15060 <btshell_gap_event+0x270>
        assert(rc == 0);
   1504a:	f7ff fb5b 	bl	14704 <hal_debugger_connected>
   1504e:	b100      	cbz	r0, 15052 <btshell_gap_event+0x262>
   15050:	be01      	bkpt	0x0001
   15052:	2300      	movs	r3, #0
   15054:	461a      	mov	r2, r3
   15056:	4619      	mov	r1, r3
   15058:	4618      	mov	r0, r3
   1505a:	f003 fe63 	bl	18d24 <__assert_func>
    switch (event->type) {
   1505e:	2400      	movs	r4, #0
}
   15060:	4620      	mov	r0, r4
   15062:	b011      	add	sp, #68	; 0x44
   15064:	bd30      	pop	{r4, r5, pc}
   15066:	bf00      	nop
   15068:	0002ff34 	.word	0x0002ff34
   1506c:	0002ff40 	.word	0x0002ff40
   15070:	0002ff2c 	.word	0x0002ff2c
   15074:	0002ff5c 	.word	0x0002ff5c
   15078:	0002ff74 	.word	0x0002ff74
   1507c:	0002ffb8 	.word	0x0002ffb8
   15080:	0002ffe4 	.word	0x0002ffe4
   15084:	00030004 	.word	0x00030004
   15088:	00030020 	.word	0x00030020
   1508c:	0002ff28 	.word	0x0002ff28
   15090:	00030040 	.word	0x00030040
   15094:	0003004c 	.word	0x0003004c
   15098:	0003006c 	.word	0x0003006c
   1509c:	0003008c 	.word	0x0003008c
   150a0:	000300b0 	.word	0x000300b0
   150a4:	000300f4 	.word	0x000300f4
   150a8:	00030134 	.word	0x00030134
   150ac:	00030190 	.word	0x00030190
   150b0:	000301c0 	.word	0x000301c0
   150b4:	000301d4 	.word	0x000301d4

000150b8 <btshell_chr_add>:
{
   150b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   150ba:	b083      	sub	sp, #12
   150bc:	460d      	mov	r5, r1
   150be:	4616      	mov	r6, r2
    conn = btshell_conn_find(conn_handle);
   150c0:	f7ff fb88 	bl	147d4 <btshell_conn_find>
    if (conn == NULL) {
   150c4:	4604      	mov	r4, r0
   150c6:	b158      	cbz	r0, 150e0 <btshell_chr_add+0x28>
    svc = btshell_svc_find(conn, svc_start_handle, NULL);
   150c8:	2200      	movs	r2, #0
   150ca:	4629      	mov	r1, r5
   150cc:	f7ff fb9c 	bl	14808 <btshell_svc_find>
    if (svc == NULL) {
   150d0:	4607      	mov	r7, r0
   150d2:	b320      	cbz	r0, 1511e <btshell_chr_add+0x66>
    chr = btshell_chr_find(svc, gatt_chr->val_handle, &prev);
   150d4:	aa01      	add	r2, sp, #4
   150d6:	8871      	ldrh	r1, [r6, #2]
   150d8:	f7ff fbbf 	bl	1485a <btshell_chr_find>
    if (chr != NULL) {
   150dc:	4604      	mov	r4, r0
   150de:	b110      	cbz	r0, 150e6 <btshell_chr_add+0x2e>
}
   150e0:	4620      	mov	r0, r4
   150e2:	b003      	add	sp, #12
   150e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    chr = os_memblock_get(&btshell_chr_pool);
   150e6:	480f      	ldr	r0, [pc, #60]	; (15124 <btshell_chr_add+0x6c>)
   150e8:	f004 fec3 	bl	19e72 <os_memblock_get>
    if (chr == NULL) {
   150ec:	4604      	mov	r4, r0
   150ee:	2800      	cmp	r0, #0
   150f0:	d0f6      	beq.n	150e0 <btshell_chr_add+0x28>
    memset(chr, 0, sizeof *chr);
   150f2:	2224      	movs	r2, #36	; 0x24
   150f4:	2100      	movs	r1, #0
   150f6:	f005 fde2 	bl	1acbe <memset>
    chr->chr = *gatt_chr;
   150fa:	f104 0c04 	add.w	ip, r4, #4
   150fe:	4635      	mov	r5, r6
   15100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15102:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   15106:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   1510a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    if (prev == NULL) {
   1510e:	9b01      	ldr	r3, [sp, #4]
   15110:	b10b      	cbz	r3, 15116 <btshell_chr_add+0x5e>
        SLIST_NEXT(prev, next) = chr;
   15112:	601c      	str	r4, [r3, #0]
   15114:	e7e4      	b.n	150e0 <btshell_chr_add+0x28>
        SLIST_INSERT_HEAD(&svc->chrs, chr, next);
   15116:	69fb      	ldr	r3, [r7, #28]
   15118:	6023      	str	r3, [r4, #0]
   1511a:	61fc      	str	r4, [r7, #28]
   1511c:	e7e0      	b.n	150e0 <btshell_chr_add+0x28>
        return NULL;
   1511e:	4604      	mov	r4, r0
   15120:	e7de      	b.n	150e0 <btshell_chr_add+0x28>
   15122:	bf00      	nop
   15124:	100027a0 	.word	0x100027a0

00015128 <btshell_svc_add>:
{
   15128:	b5f0      	push	{r4, r5, r6, r7, lr}
   1512a:	b083      	sub	sp, #12
   1512c:	460c      	mov	r4, r1
    conn = btshell_conn_find(conn_handle);
   1512e:	f7ff fb51 	bl	147d4 <btshell_conn_find>
    if (conn == NULL) {
   15132:	4606      	mov	r6, r0
   15134:	b330      	cbz	r0, 15184 <btshell_svc_add+0x5c>
    svc = btshell_svc_find(conn, gatt_svc->start_handle, &prev);
   15136:	aa01      	add	r2, sp, #4
   15138:	8821      	ldrh	r1, [r4, #0]
   1513a:	f7ff fb65 	bl	14808 <btshell_svc_find>
    if (svc != NULL) {
   1513e:	4605      	mov	r5, r0
   15140:	b110      	cbz	r0, 15148 <btshell_svc_add+0x20>
}
   15142:	4628      	mov	r0, r5
   15144:	b003      	add	sp, #12
   15146:	bdf0      	pop	{r4, r5, r6, r7, pc}
    svc = os_memblock_get(&btshell_svc_pool);
   15148:	480f      	ldr	r0, [pc, #60]	; (15188 <btshell_svc_add+0x60>)
   1514a:	f004 fe92 	bl	19e72 <os_memblock_get>
    if (svc == NULL) {
   1514e:	4605      	mov	r5, r0
   15150:	2800      	cmp	r0, #0
   15152:	d0f6      	beq.n	15142 <btshell_svc_add+0x1a>
    memset(svc, 0, sizeof *svc);
   15154:	2224      	movs	r2, #36	; 0x24
   15156:	2100      	movs	r1, #0
   15158:	f005 fdb1 	bl	1acbe <memset>
    svc->svc = *gatt_svc;
   1515c:	1d2f      	adds	r7, r5, #4
   1515e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   15160:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   15162:	e894 0003 	ldmia.w	r4, {r0, r1}
   15166:	e887 0003 	stmia.w	r7, {r0, r1}
    SLIST_INIT(&svc->chrs);
   1516a:	2300      	movs	r3, #0
   1516c:	61eb      	str	r3, [r5, #28]
    if (prev == NULL) {
   1516e:	9b01      	ldr	r3, [sp, #4]
   15170:	b123      	cbz	r3, 1517c <btshell_svc_add+0x54>
        SLIST_INSERT_AFTER(prev, svc, next);
   15172:	681b      	ldr	r3, [r3, #0]
   15174:	602b      	str	r3, [r5, #0]
   15176:	9b01      	ldr	r3, [sp, #4]
   15178:	601d      	str	r5, [r3, #0]
   1517a:	e7e2      	b.n	15142 <btshell_svc_add+0x1a>
        SLIST_INSERT_HEAD(&conn->svcs, svc, next);
   1517c:	6873      	ldr	r3, [r6, #4]
   1517e:	602b      	str	r3, [r5, #0]
   15180:	6075      	str	r5, [r6, #4]
   15182:	e7de      	b.n	15142 <btshell_svc_add+0x1a>
        return NULL;
   15184:	4605      	mov	r5, r0
   15186:	e7dc      	b.n	15142 <btshell_svc_add+0x1a>
   15188:	10003360 	.word	0x10003360

0001518c <btshell_dsc_add>:
{
   1518c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1518e:	b083      	sub	sp, #12
   15190:	460d      	mov	r5, r1
   15192:	4616      	mov	r6, r2
    conn = btshell_conn_find(conn_handle);
   15194:	f7ff fb1e 	bl	147d4 <btshell_conn_find>
    if (conn == NULL) {
   15198:	4604      	mov	r4, r0
   1519a:	b180      	cbz	r0, 151be <btshell_dsc_add+0x32>
    svc = btshell_svc_find_range(conn, chr_val_handle);
   1519c:	4629      	mov	r1, r5
   1519e:	f7ff fb47 	bl	14830 <btshell_svc_find_range>
    if (svc == NULL) {
   151a2:	4604      	mov	r4, r0
   151a4:	b158      	cbz	r0, 151be <btshell_dsc_add+0x32>
    chr = btshell_chr_find(svc, chr_val_handle, NULL);
   151a6:	2200      	movs	r2, #0
   151a8:	4629      	mov	r1, r5
   151aa:	f7ff fb56 	bl	1485a <btshell_chr_find>
    if (chr == NULL) {
   151ae:	4607      	mov	r7, r0
   151b0:	b358      	cbz	r0, 1520a <btshell_dsc_add+0x7e>
    dsc = btshell_dsc_find(chr, gatt_dsc->handle, &prev);
   151b2:	aa01      	add	r2, sp, #4
   151b4:	8831      	ldrh	r1, [r6, #0]
   151b6:	f7ff fb6e 	bl	14896 <btshell_dsc_find>
    if (dsc != NULL) {
   151ba:	4604      	mov	r4, r0
   151bc:	b110      	cbz	r0, 151c4 <btshell_dsc_add+0x38>
}
   151be:	4620      	mov	r0, r4
   151c0:	b003      	add	sp, #12
   151c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dsc = os_memblock_get(&btshell_dsc_pool);
   151c4:	4812      	ldr	r0, [pc, #72]	; (15210 <btshell_dsc_add+0x84>)
   151c6:	f004 fe54 	bl	19e72 <os_memblock_get>
    if (dsc == NULL) {
   151ca:	4604      	mov	r4, r0
   151cc:	b1a8      	cbz	r0, 151fa <btshell_dsc_add+0x6e>
    memset(dsc, 0, sizeof *dsc);
   151ce:	2300      	movs	r3, #0
   151d0:	6003      	str	r3, [r0, #0]
   151d2:	6043      	str	r3, [r0, #4]
   151d4:	6083      	str	r3, [r0, #8]
   151d6:	60c3      	str	r3, [r0, #12]
   151d8:	6103      	str	r3, [r0, #16]
   151da:	6143      	str	r3, [r0, #20]
   151dc:	6183      	str	r3, [r0, #24]
    dsc->dsc = *gatt_dsc;
   151de:	f100 0c04 	add.w	ip, r0, #4
   151e2:	4635      	mov	r5, r6
   151e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   151e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   151ea:	e895 0003 	ldmia.w	r5, {r0, r1}
   151ee:	e88c 0003 	stmia.w	ip, {r0, r1}
    if (prev == NULL) {
   151f2:	9b01      	ldr	r3, [sp, #4]
   151f4:	b12b      	cbz	r3, 15202 <btshell_dsc_add+0x76>
        SLIST_NEXT(prev, next) = dsc;
   151f6:	601c      	str	r4, [r3, #0]
   151f8:	e7e1      	b.n	151be <btshell_dsc_add+0x32>
        console_printf("OOM WHILE DISCOVERING DESCRIPTOR\n");
   151fa:	4806      	ldr	r0, [pc, #24]	; (15214 <btshell_dsc_add+0x88>)
   151fc:	f006 ff96 	bl	1c12c <console_printf>
        return NULL;
   15200:	e7dd      	b.n	151be <btshell_dsc_add+0x32>
        SLIST_INSERT_HEAD(&chr->dscs, dsc, next);
   15202:	6a3b      	ldr	r3, [r7, #32]
   15204:	6023      	str	r3, [r4, #0]
   15206:	623c      	str	r4, [r7, #32]
   15208:	e7d9      	b.n	151be <btshell_dsc_add+0x32>
        return NULL;
   1520a:	4604      	mov	r4, r0
   1520c:	e7d7      	b.n	151be <btshell_dsc_add+0x32>
   1520e:	bf00      	nop
   15210:	10002ebc 	.word	0x10002ebc
   15214:	0003021c 	.word	0x0003021c

00015218 <btshell_tx_timer_cb>:
    if ((btshell_tx_data.tx_num == 0) || (btshell_tx_data.tx_len == 0)) {
   15218:	4b2e      	ldr	r3, [pc, #184]	; (152d4 <btshell_tx_timer_cb+0xbc>)
   1521a:	8819      	ldrh	r1, [r3, #0]
   1521c:	b109      	cbz	r1, 15222 <btshell_tx_timer_cb+0xa>
   1521e:	891b      	ldrh	r3, [r3, #8]
   15220:	b903      	cbnz	r3, 15224 <btshell_tx_timer_cb+0xc>
   15222:	4770      	bx	lr
{
   15224:	b530      	push	{r4, r5, lr}
   15226:	b085      	sub	sp, #20
                       btshell_tx_data.tx_num_requested - btshell_tx_data.tx_num + 1,
   15228:	4c2a      	ldr	r4, [pc, #168]	; (152d4 <btshell_tx_timer_cb+0xbc>)
   1522a:	8862      	ldrh	r2, [r4, #2]
   1522c:	1a51      	subs	r1, r2, r1
    console_printf("Sending %d/%d len: %d\n",
   1522e:	3101      	adds	r1, #1
   15230:	4829      	ldr	r0, [pc, #164]	; (152d8 <btshell_tx_timer_cb+0xc0>)
   15232:	f006 ff7b 	bl	1c12c <console_printf>
    len = btshell_tx_data.tx_len;
   15236:	8925      	ldrh	r5, [r4, #8]
   15238:	b2ec      	uxtb	r4, r5
    om = NULL;
   1523a:	2300      	movs	r3, #0
   1523c:	9301      	str	r3, [sp, #4]
    if (os_msys_num_free() >= 4) {
   1523e:	f004 ff03 	bl	1a048 <os_msys_num_free>
   15242:	2803      	cmp	r0, #3
   15244:	dc14      	bgt.n	15270 <btshell_tx_timer_cb+0x58>
    if (om) {
   15246:	9b01      	ldr	r3, [sp, #4]
   15248:	b3a3      	cbz	r3, 152b4 <btshell_tx_timer_cb+0x9c>
        put_le16(&l2cap_hdr.len, len);
   1524a:	b2e9      	uxtb	r1, r5
   1524c:	a802      	add	r0, sp, #8
   1524e:	f003 fdd7 	bl	18e00 <put_le16>
        put_le16(&l2cap_hdr.cid, 0xffff);
   15252:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15256:	f10d 000a 	add.w	r0, sp, #10
   1525a:	f003 fdd1 	bl	18e00 <put_le16>
        os_mbuf_append(om, (void *)&l2cap_hdr, BLE_L2CAP_HDR_SZ);
   1525e:	2204      	movs	r2, #4
   15260:	a902      	add	r1, sp, #8
   15262:	9801      	ldr	r0, [sp, #4]
   15264:	f004 f9e3 	bl	1962e <os_mbuf_append>
        for (i = 0; i < len; ++i) {
   15268:	2300      	movs	r3, #0
   1526a:	f88d 300f 	strb.w	r3, [sp, #15]
   1526e:	e011      	b.n	15294 <btshell_tx_timer_cb+0x7c>
        om = os_msys_get_pkthdr(len + BLE_L2CAP_HDR_SZ, BLE_HCI_DATA_HDR_SZ);
   15270:	4620      	mov	r0, r4
   15272:	2104      	movs	r1, #4
   15274:	4408      	add	r0, r1
   15276:	f004 fed5 	bl	1a024 <os_msys_get_pkthdr>
   1527a:	9001      	str	r0, [sp, #4]
   1527c:	e7e3      	b.n	15246 <btshell_tx_timer_cb+0x2e>
            os_mbuf_append(om, (void *)&i, 1);
   1527e:	2201      	movs	r2, #1
   15280:	f10d 010f 	add.w	r1, sp, #15
   15284:	9801      	ldr	r0, [sp, #4]
   15286:	f004 f9d2 	bl	1962e <os_mbuf_append>
        for (i = 0; i < len; ++i) {
   1528a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1528e:	3301      	adds	r3, #1
   15290:	f88d 300f 	strb.w	r3, [sp, #15]
   15294:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15298:	42a3      	cmp	r3, r4
   1529a:	d3f0      	bcc.n	1527e <btshell_tx_timer_cb+0x66>
        ble_hs_lock();
   1529c:	f011 f94c 	bl	26538 <ble_hs_lock>
        ble_hs_hci_acl_tx_now(btshell_tx_data.conn, &om);
   152a0:	4c0c      	ldr	r4, [pc, #48]	; (152d4 <btshell_tx_timer_cb+0xbc>)
   152a2:	a901      	add	r1, sp, #4
   152a4:	68e0      	ldr	r0, [r4, #12]
   152a6:	f012 fc73 	bl	27b90 <ble_hs_hci_acl_tx_now>
        ble_hs_unlock();
   152aa:	f011 f949 	bl	26540 <ble_hs_unlock>
        --btshell_tx_data.tx_num;
   152ae:	8823      	ldrh	r3, [r4, #0]
   152b0:	3b01      	subs	r3, #1
   152b2:	8023      	strh	r3, [r4, #0]
    if (btshell_tx_data.tx_num) {
   152b4:	4b07      	ldr	r3, [pc, #28]	; (152d4 <btshell_tx_timer_cb+0xbc>)
   152b6:	881b      	ldrh	r3, [r3, #0]
   152b8:	b90b      	cbnz	r3, 152be <btshell_tx_timer_cb+0xa6>
}
   152ba:	b005      	add	sp, #20
   152bc:	bd30      	pop	{r4, r5, pc}
        timeout = (int32_t)btshell_tx_data.tx_rate;
   152be:	4b05      	ldr	r3, [pc, #20]	; (152d4 <btshell_tx_timer_cb+0xbc>)
   152c0:	8899      	ldrh	r1, [r3, #4]
        timeout = (timeout * OS_TICKS_PER_SEC) / 1000;
   152c2:	01c9      	lsls	r1, r1, #7
   152c4:	4b05      	ldr	r3, [pc, #20]	; (152dc <btshell_tx_timer_cb+0xc4>)
   152c6:	fb83 3101 	smull	r3, r1, r3, r1
        os_callout_reset(&btshell_tx_timer, timeout);
   152ca:	1189      	asrs	r1, r1, #6
   152cc:	4804      	ldr	r0, [pc, #16]	; (152e0 <btshell_tx_timer_cb+0xc8>)
   152ce:	f003 ff39 	bl	19144 <os_callout_reset>
   152d2:	e7f2      	b.n	152ba <btshell_tx_timer_cb+0xa2>
   152d4:	1000337c 	.word	0x1000337c
   152d8:	00030240 	.word	0x00030240
   152dc:	10624dd3 	.word	0x10624dd3
   152e0:	1000338c 	.word	0x1000338c

000152e4 <btshell_on_sync>:

static void
btshell_on_sync(void)
{
   152e4:	b508      	push	{r3, lr}
    /* Make sure we have proper identity address set (public preferred) */
    if (ble_hs_util_ensure_addr(0) != 0) {
   152e6:	2000      	movs	r0, #0
   152e8:	f015 f9d0 	bl	2a68c <ble_hs_util_ensure_addr>
   152ec:	b918      	cbnz	r0, 152f6 <btshell_on_sync+0x12>
        console_printf("Error: generating oob data; reason=%d\n", rc);
        return;
    }
#endif

    console_printf("Host and controller synced\n");
   152ee:	4804      	ldr	r0, [pc, #16]	; (15300 <btshell_on_sync+0x1c>)
   152f0:	f006 ff1c 	bl	1c12c <console_printf>
}
   152f4:	bd08      	pop	{r3, pc}
        console_printf("Failed to set identity address\n");
   152f6:	4803      	ldr	r0, [pc, #12]	; (15304 <btshell_on_sync+0x20>)
   152f8:	f006 ff18 	bl	1c12c <console_printf>
   152fc:	e7f7      	b.n	152ee <btshell_on_sync+0xa>
   152fe:	bf00      	nop
   15300:	00030278 	.word	0x00030278
   15304:	00030258 	.word	0x00030258

00015308 <btshell_exchange_mtu>:
{
   15308:	b508      	push	{r3, lr}
    rc = ble_gattc_exchange_mtu(conn_handle, btshell_on_mtu, NULL);
   1530a:	2200      	movs	r2, #0
   1530c:	4901      	ldr	r1, [pc, #4]	; (15314 <btshell_exchange_mtu+0xc>)
   1530e:	f00f f96f 	bl	245f0 <ble_gattc_exchange_mtu>
}
   15312:	bd08      	pop	{r3, pc}
   15314:	000148e9 	.word	0x000148e9

00015318 <btshell_disc_all_chrs>:
{
   15318:	b500      	push	{lr}
   1531a:	b083      	sub	sp, #12
    rc = ble_gattc_disc_all_chrs(conn_handle, start_handle, end_handle,
   1531c:	9100      	str	r1, [sp, #0]
   1531e:	4b03      	ldr	r3, [pc, #12]	; (1532c <btshell_disc_all_chrs+0x14>)
   15320:	f00f fa1c 	bl	2475c <ble_gattc_disc_all_chrs>
}
   15324:	b003      	add	sp, #12
   15326:	f85d fb04 	ldr.w	pc, [sp], #4
   1532a:	bf00      	nop
   1532c:	00015445 	.word	0x00015445

00015330 <btshell_disc_all_chrs_in_svc>:
{
   15330:	b500      	push	{lr}
   15332:	b083      	sub	sp, #12
    rc = ble_gattc_disc_all_chrs(conn_handle, svc->svc.start_handle,
   15334:	9100      	str	r1, [sp, #0]
   15336:	4b04      	ldr	r3, [pc, #16]	; (15348 <btshell_disc_all_chrs_in_svc+0x18>)
   15338:	88ca      	ldrh	r2, [r1, #6]
   1533a:	8889      	ldrh	r1, [r1, #4]
   1533c:	f00f fa0e 	bl	2475c <ble_gattc_disc_all_chrs>
}
   15340:	b003      	add	sp, #12
   15342:	f85d fb04 	ldr.w	pc, [sp], #4
   15346:	bf00      	nop
   15348:	00015485 	.word	0x00015485

0001534c <btshell_disc_chrs_by_uuid>:
{
   1534c:	b510      	push	{r4, lr}
   1534e:	b082      	sub	sp, #8
    rc = ble_gattc_disc_chrs_by_uuid(conn_handle, start_handle, end_handle,
   15350:	9101      	str	r1, [sp, #4]
   15352:	4c03      	ldr	r4, [pc, #12]	; (15360 <btshell_disc_chrs_by_uuid+0x14>)
   15354:	9400      	str	r4, [sp, #0]
   15356:	f00f fa2f 	bl	247b8 <ble_gattc_disc_chrs_by_uuid>
}
   1535a:	b002      	add	sp, #8
   1535c:	bd10      	pop	{r4, pc}
   1535e:	bf00      	nop
   15360:	00015445 	.word	0x00015445

00015364 <btshell_disc_svcs>:
{
   15364:	b508      	push	{r3, lr}
    rc = ble_gattc_disc_all_svcs(conn_handle, btshell_on_disc_s, NULL);
   15366:	2200      	movs	r2, #0
   15368:	4901      	ldr	r1, [pc, #4]	; (15370 <btshell_disc_svcs+0xc>)
   1536a:	f00f f96b 	bl	24644 <ble_gattc_disc_all_svcs>
}
   1536e:	bd08      	pop	{r3, pc}
   15370:	000154cd 	.word	0x000154cd

00015374 <btshell_disc_svc_by_uuid>:
{
   15374:	b508      	push	{r3, lr}
    rc = ble_gattc_disc_svc_by_uuid(conn_handle, uuid,
   15376:	2300      	movs	r3, #0
   15378:	4a01      	ldr	r2, [pc, #4]	; (15380 <btshell_disc_svc_by_uuid+0xc>)
   1537a:	f00f f98f 	bl	2469c <ble_gattc_disc_svc_by_uuid>
}
   1537e:	bd08      	pop	{r3, pc}
   15380:	000154cd 	.word	0x000154cd

00015384 <btshell_disc_all_dscs>:
{
   15384:	b500      	push	{lr}
   15386:	b083      	sub	sp, #12
    rc = ble_gattc_disc_all_dscs(conn_handle, start_handle, end_handle,
   15388:	2300      	movs	r3, #0
   1538a:	9300      	str	r3, [sp, #0]
   1538c:	4b02      	ldr	r3, [pc, #8]	; (15398 <btshell_disc_all_dscs+0x14>)
   1538e:	f00f fa49 	bl	24824 <ble_gattc_disc_all_dscs>
}
   15392:	b003      	add	sp, #12
   15394:	f85d fb04 	ldr.w	pc, [sp], #4
   15398:	00015511 	.word	0x00015511

0001539c <btshell_disc_full_dscs>:
{
   1539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1539e:	4606      	mov	r6, r0
    conn = btshell_conn_find(conn_handle);
   153a0:	f7ff fa18 	bl	147d4 <btshell_conn_find>
    if (conn == NULL) {
   153a4:	b108      	cbz	r0, 153aa <btshell_disc_full_dscs+0xe>
    SLIST_FOREACH(svc, &conn->svcs, next) {
   153a6:	6845      	ldr	r5, [r0, #4]
   153a8:	e027      	b.n	153fa <btshell_disc_full_dscs+0x5e>
        btshell_full_disc_complete(BLE_HS_ENOTCONN);
   153aa:	2007      	movs	r0, #7
   153ac:	f7ff faae 	bl	1490c <btshell_full_disc_complete>
        return;
   153b0:	e021      	b.n	153f6 <btshell_disc_full_dscs+0x5a>
                    btshell_full_disc_complete(rc);
   153b2:	f7ff faab 	bl	1490c <btshell_full_disc_complete>
   153b6:	e01b      	b.n	153f0 <btshell_disc_full_dscs+0x54>
        SLIST_FOREACH(chr, &svc->chrs, next) {
   153b8:	6824      	ldr	r4, [r4, #0]
   153ba:	b1ec      	cbz	r4, 153f8 <btshell_disc_full_dscs+0x5c>
            if (!chr_is_empty(svc, chr) &&
   153bc:	4621      	mov	r1, r4
   153be:	4628      	mov	r0, r5
   153c0:	f000 fb5a 	bl	15a78 <chr_is_empty>
   153c4:	2800      	cmp	r0, #0
   153c6:	d1f7      	bne.n	153b8 <btshell_disc_full_dscs+0x1c>
                SLIST_EMPTY(&chr->dscs) &&
   153c8:	6a23      	ldr	r3, [r4, #32]
            if (!chr_is_empty(svc, chr) &&
   153ca:	2b00      	cmp	r3, #0
   153cc:	d1f4      	bne.n	153b8 <btshell_disc_full_dscs+0x1c>
                btshell_full_disc_prev_chr_val <= chr->chr.def_handle) {
   153ce:	88a2      	ldrh	r2, [r4, #4]
   153d0:	4b0d      	ldr	r3, [pc, #52]	; (15408 <btshell_disc_full_dscs+0x6c>)
   153d2:	681b      	ldr	r3, [r3, #0]
                SLIST_EMPTY(&chr->dscs) &&
   153d4:	429a      	cmp	r2, r3
   153d6:	dbef      	blt.n	153b8 <btshell_disc_full_dscs+0x1c>
                rc = btshell_disc_all_dscs(conn_handle,
   153d8:	88e7      	ldrh	r7, [r4, #6]
   153da:	4621      	mov	r1, r4
   153dc:	4628      	mov	r0, r5
   153de:	f000 fb43 	bl	15a68 <chr_end_handle>
   153e2:	4602      	mov	r2, r0
   153e4:	4639      	mov	r1, r7
   153e6:	4630      	mov	r0, r6
   153e8:	f7ff ffcc 	bl	15384 <btshell_disc_all_dscs>
                if (rc != 0) {
   153ec:	2800      	cmp	r0, #0
   153ee:	d1e0      	bne.n	153b2 <btshell_disc_full_dscs+0x16>
                btshell_full_disc_prev_chr_val = chr->chr.val_handle;
   153f0:	88e2      	ldrh	r2, [r4, #6]
   153f2:	4b05      	ldr	r3, [pc, #20]	; (15408 <btshell_disc_full_dscs+0x6c>)
   153f4:	601a      	str	r2, [r3, #0]
}
   153f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SLIST_FOREACH(svc, &conn->svcs, next) {
   153f8:	682d      	ldr	r5, [r5, #0]
   153fa:	b10d      	cbz	r5, 15400 <btshell_disc_full_dscs+0x64>
        SLIST_FOREACH(chr, &svc->chrs, next) {
   153fc:	69ec      	ldr	r4, [r5, #28]
   153fe:	e7dc      	b.n	153ba <btshell_disc_full_dscs+0x1e>
    btshell_full_disc_complete(0);
   15400:	2000      	movs	r0, #0
   15402:	f7ff fa83 	bl	1490c <btshell_full_disc_complete>
   15406:	e7f6      	b.n	153f6 <btshell_disc_full_dscs+0x5a>
   15408:	10002ed8 	.word	0x10002ed8

0001540c <btshell_disc_full_chrs>:
{
   1540c:	b510      	push	{r4, lr}
   1540e:	4604      	mov	r4, r0
    conn = btshell_conn_find(conn_handle);
   15410:	f7ff f9e0 	bl	147d4 <btshell_conn_find>
    if (conn == NULL) {
   15414:	b130      	cbz	r0, 15424 <btshell_disc_full_chrs+0x18>
    SLIST_FOREACH(svc, &conn->svcs, next) {
   15416:	6841      	ldr	r1, [r0, #4]
   15418:	b179      	cbz	r1, 1543a <btshell_disc_full_chrs+0x2e>
        if (!svc->discovered) {
   1541a:	f891 3020 	ldrb.w	r3, [r1, #32]
   1541e:	b12b      	cbz	r3, 1542c <btshell_disc_full_chrs+0x20>
    SLIST_FOREACH(svc, &conn->svcs, next) {
   15420:	6809      	ldr	r1, [r1, #0]
   15422:	e7f9      	b.n	15418 <btshell_disc_full_chrs+0xc>
        btshell_full_disc_complete(BLE_HS_ENOTCONN);
   15424:	2007      	movs	r0, #7
   15426:	f7ff fa71 	bl	1490c <btshell_full_disc_complete>
        return;
   1542a:	e009      	b.n	15440 <btshell_disc_full_chrs+0x34>
            rc = btshell_disc_all_chrs_in_svc(conn_handle, svc);
   1542c:	4620      	mov	r0, r4
   1542e:	f7ff ff7f 	bl	15330 <btshell_disc_all_chrs_in_svc>
            if (rc != 0) {
   15432:	b128      	cbz	r0, 15440 <btshell_disc_full_chrs+0x34>
                btshell_full_disc_complete(rc);
   15434:	f7ff fa6a 	bl	1490c <btshell_full_disc_complete>
            return;
   15438:	e002      	b.n	15440 <btshell_disc_full_chrs+0x34>
    btshell_disc_full_dscs(conn_handle);
   1543a:	4620      	mov	r0, r4
   1543c:	f7ff ffae 	bl	1539c <btshell_disc_full_dscs>
}
   15440:	bd10      	pop	{r4, pc}
	...

00015444 <btshell_on_disc_c>:
{
   15444:	b538      	push	{r3, r4, r5, lr}
   15446:	4605      	mov	r5, r0
    switch (error->status) {
   15448:	880c      	ldrh	r4, [r1, #0]
   1544a:	b13c      	cbz	r4, 1545c <btshell_on_disc_c+0x18>
   1544c:	2c0e      	cmp	r4, #14
   1544e:	d00a      	beq.n	15466 <btshell_on_disc_c+0x22>
        btshell_print_error(NULL, conn_handle, error);
   15450:	460a      	mov	r2, r1
   15452:	4601      	mov	r1, r0
   15454:	2000      	movs	r0, #0
   15456:	f7ff fa33 	bl	148c0 <btshell_print_error>
        break;
   1545a:	e002      	b.n	15462 <btshell_on_disc_c+0x1e>
        btshell_chr_add(conn_handle, svc_start_handle, chr);
   1545c:	b299      	uxth	r1, r3
   1545e:	f7ff fe2b 	bl	150b8 <btshell_chr_add>
}
   15462:	2000      	movs	r0, #0
   15464:	bd38      	pop	{r3, r4, r5, pc}
        console_printf("characteristic discovery successful\n");
   15466:	4805      	ldr	r0, [pc, #20]	; (1547c <btshell_on_disc_c+0x38>)
   15468:	f006 fe60 	bl	1c12c <console_printf>
        if (btshell_full_disc_prev_chr_val > 0) {
   1546c:	4b04      	ldr	r3, [pc, #16]	; (15480 <btshell_on_disc_c+0x3c>)
   1546e:	681b      	ldr	r3, [r3, #0]
   15470:	2b00      	cmp	r3, #0
   15472:	ddf6      	ble.n	15462 <btshell_on_disc_c+0x1e>
            btshell_disc_full_chrs(conn_handle);
   15474:	4628      	mov	r0, r5
   15476:	f7ff ffc9 	bl	1540c <btshell_disc_full_chrs>
   1547a:	e7f2      	b.n	15462 <btshell_on_disc_c+0x1e>
   1547c:	00030294 	.word	0x00030294
   15480:	10002ed8 	.word	0x10002ed8

00015484 <btshell_on_disc_c_in_s>:
{
   15484:	b538      	push	{r3, r4, r5, lr}
   15486:	4605      	mov	r5, r0
    switch (error->status) {
   15488:	880c      	ldrh	r4, [r1, #0]
   1548a:	b13c      	cbz	r4, 1549c <btshell_on_disc_c_in_s+0x18>
   1548c:	2c0e      	cmp	r4, #14
   1548e:	d00a      	beq.n	154a6 <btshell_on_disc_c_in_s+0x22>
        btshell_print_error(NULL, conn_handle, error);
   15490:	460a      	mov	r2, r1
   15492:	4601      	mov	r1, r0
   15494:	2000      	movs	r0, #0
   15496:	f7ff fa13 	bl	148c0 <btshell_print_error>
        break;
   1549a:	e002      	b.n	154a2 <btshell_on_disc_c_in_s+0x1e>
        btshell_chr_add(conn_handle, svc->svc.start_handle, chr);
   1549c:	8899      	ldrh	r1, [r3, #4]
   1549e:	f7ff fe0b 	bl	150b8 <btshell_chr_add>
}
   154a2:	2000      	movs	r0, #0
   154a4:	bd38      	pop	{r3, r4, r5, pc}
        svc->discovered = true;
   154a6:	2201      	movs	r2, #1
   154a8:	f883 2020 	strb.w	r2, [r3, #32]
        console_printf("characteristic discovery successful\n");
   154ac:	4805      	ldr	r0, [pc, #20]	; (154c4 <btshell_on_disc_c_in_s+0x40>)
   154ae:	f006 fe3d 	bl	1c12c <console_printf>
        if (btshell_full_disc_prev_chr_val > 0) {
   154b2:	4b05      	ldr	r3, [pc, #20]	; (154c8 <btshell_on_disc_c_in_s+0x44>)
   154b4:	681b      	ldr	r3, [r3, #0]
   154b6:	2b00      	cmp	r3, #0
   154b8:	ddf3      	ble.n	154a2 <btshell_on_disc_c_in_s+0x1e>
            btshell_disc_full_chrs(conn_handle);
   154ba:	4628      	mov	r0, r5
   154bc:	f7ff ffa6 	bl	1540c <btshell_disc_full_chrs>
   154c0:	e7ef      	b.n	154a2 <btshell_on_disc_c_in_s+0x1e>
   154c2:	bf00      	nop
   154c4:	00030294 	.word	0x00030294
   154c8:	10002ed8 	.word	0x10002ed8

000154cc <btshell_on_disc_s>:
{
   154cc:	b510      	push	{r4, lr}
   154ce:	4604      	mov	r4, r0
   154d0:	460b      	mov	r3, r1
    switch (error->status) {
   154d2:	8809      	ldrh	r1, [r1, #0]
   154d4:	b139      	cbz	r1, 154e6 <btshell_on_disc_s+0x1a>
   154d6:	290e      	cmp	r1, #14
   154d8:	d00a      	beq.n	154f0 <btshell_on_disc_s+0x24>
        btshell_print_error(NULL, conn_handle, error);
   154da:	461a      	mov	r2, r3
   154dc:	4601      	mov	r1, r0
   154de:	2000      	movs	r0, #0
   154e0:	f7ff f9ee 	bl	148c0 <btshell_print_error>
        break;
   154e4:	e002      	b.n	154ec <btshell_on_disc_s+0x20>
        btshell_svc_add(conn_handle, service);
   154e6:	4611      	mov	r1, r2
   154e8:	f7ff fe1e 	bl	15128 <btshell_svc_add>
}
   154ec:	2000      	movs	r0, #0
   154ee:	bd10      	pop	{r4, pc}
        console_printf("service discovery successful\n");
   154f0:	4805      	ldr	r0, [pc, #20]	; (15508 <btshell_on_disc_s+0x3c>)
   154f2:	f006 fe1b 	bl	1c12c <console_printf>
        if (btshell_full_disc_prev_chr_val > 0) {
   154f6:	4b05      	ldr	r3, [pc, #20]	; (1550c <btshell_on_disc_s+0x40>)
   154f8:	681b      	ldr	r3, [r3, #0]
   154fa:	2b00      	cmp	r3, #0
   154fc:	ddf6      	ble.n	154ec <btshell_on_disc_s+0x20>
            btshell_disc_full_chrs(conn_handle);
   154fe:	4620      	mov	r0, r4
   15500:	f7ff ff84 	bl	1540c <btshell_disc_full_chrs>
   15504:	e7f2      	b.n	154ec <btshell_on_disc_s+0x20>
   15506:	bf00      	nop
   15508:	000302bc 	.word	0x000302bc
   1550c:	10002ed8 	.word	0x10002ed8

00015510 <btshell_on_disc_d>:
{
   15510:	b538      	push	{r3, r4, r5, lr}
   15512:	4605      	mov	r5, r0
   15514:	460c      	mov	r4, r1
   15516:	4611      	mov	r1, r2
    switch (error->status) {
   15518:	8822      	ldrh	r2, [r4, #0]
   1551a:	b13a      	cbz	r2, 1552c <btshell_on_disc_d+0x1c>
   1551c:	2a0e      	cmp	r2, #14
   1551e:	d00a      	beq.n	15536 <btshell_on_disc_d+0x26>
        btshell_print_error(NULL, conn_handle, error);
   15520:	4622      	mov	r2, r4
   15522:	4601      	mov	r1, r0
   15524:	2000      	movs	r0, #0
   15526:	f7ff f9cb 	bl	148c0 <btshell_print_error>
        break;
   1552a:	e002      	b.n	15532 <btshell_on_disc_d+0x22>
        btshell_dsc_add(conn_handle, chr_val_handle, dsc);
   1552c:	461a      	mov	r2, r3
   1552e:	f7ff fe2d 	bl	1518c <btshell_dsc_add>
}
   15532:	2000      	movs	r0, #0
   15534:	bd38      	pop	{r3, r4, r5, pc}
        console_printf("descriptor discovery successful\n");
   15536:	4805      	ldr	r0, [pc, #20]	; (1554c <btshell_on_disc_d+0x3c>)
   15538:	f006 fdf8 	bl	1c12c <console_printf>
        if (btshell_full_disc_prev_chr_val > 0) {
   1553c:	4b04      	ldr	r3, [pc, #16]	; (15550 <btshell_on_disc_d+0x40>)
   1553e:	681b      	ldr	r3, [r3, #0]
   15540:	2b00      	cmp	r3, #0
   15542:	ddf6      	ble.n	15532 <btshell_on_disc_d+0x22>
            btshell_disc_full_dscs(conn_handle);
   15544:	4628      	mov	r0, r5
   15546:	f7ff ff29 	bl	1539c <btshell_disc_full_dscs>
   1554a:	e7f2      	b.n	15532 <btshell_on_disc_d+0x22>
   1554c:	000302dc 	.word	0x000302dc
   15550:	10002ed8 	.word	0x10002ed8

00015554 <btshell_disc_full>:
{
   15554:	b538      	push	{r3, r4, r5, lr}
   15556:	4605      	mov	r5, r0
    conn = btshell_conn_find(conn_handle);
   15558:	f7ff f93c 	bl	147d4 <btshell_conn_find>
    if (conn == NULL) {
   1555c:	4604      	mov	r4, r0
   1555e:	b928      	cbnz	r0, 1556c <btshell_disc_full+0x18>
        return BLE_HS_ENOTCONN;
   15560:	2007      	movs	r0, #7
   15562:	e00d      	b.n	15580 <btshell_disc_full+0x2c>
        SLIST_REMOVE_HEAD(&conn->svcs, next);
   15564:	6803      	ldr	r3, [r0, #0]
   15566:	6063      	str	r3, [r4, #4]
        btshell_svc_delete(svc);
   15568:	f7ff fa82 	bl	14a70 <btshell_svc_delete>
    while ((svc = SLIST_FIRST(&conn->svcs)) != NULL) {
   1556c:	6860      	ldr	r0, [r4, #4]
   1556e:	2800      	cmp	r0, #0
   15570:	d1f8      	bne.n	15564 <btshell_disc_full+0x10>
    btshell_full_disc_prev_chr_val = 1;
   15572:	4b04      	ldr	r3, [pc, #16]	; (15584 <btshell_disc_full+0x30>)
   15574:	2201      	movs	r2, #1
   15576:	601a      	str	r2, [r3, #0]
    btshell_disc_svcs(conn_handle);
   15578:	4628      	mov	r0, r5
   1557a:	f7ff fef3 	bl	15364 <btshell_disc_svcs>
    return 0;
   1557e:	2000      	movs	r0, #0
}
   15580:	bd38      	pop	{r3, r4, r5, pc}
   15582:	bf00      	nop
   15584:	10002ed8 	.word	0x10002ed8

00015588 <btshell_find_inc_svcs>:
{
   15588:	b500      	push	{lr}
   1558a:	b083      	sub	sp, #12
    rc = ble_gattc_find_inc_svcs(conn_handle, start_handle, end_handle,
   1558c:	2300      	movs	r3, #0
   1558e:	9300      	str	r3, [sp, #0]
   15590:	4b02      	ldr	r3, [pc, #8]	; (1559c <btshell_find_inc_svcs+0x14>)
   15592:	f00f f8b5 	bl	24700 <ble_gattc_find_inc_svcs>
}
   15596:	b003      	add	sp, #12
   15598:	f85d fb04 	ldr.w	pc, [sp], #4
   1559c:	000154cd 	.word	0x000154cd

000155a0 <btshell_read>:
{
   155a0:	b530      	push	{r4, r5, lr}
   155a2:	b083      	sub	sp, #12
   155a4:	460c      	mov	r4, r1
    if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   155a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   155aa:	4298      	cmp	r0, r3
   155ac:	d007      	beq.n	155be <btshell_read+0x1e>
        rc = ble_gattc_read(conn_handle, attr_handle, btshell_on_read, NULL);
   155ae:	2300      	movs	r3, #0
   155b0:	4a0e      	ldr	r2, [pc, #56]	; (155ec <btshell_read+0x4c>)
   155b2:	f00f f965 	bl	24880 <ble_gattc_read>
   155b6:	4605      	mov	r5, r0
}
   155b8:	4628      	mov	r0, r5
   155ba:	b003      	add	sp, #12
   155bc:	bd30      	pop	{r4, r5, pc}
        rc = ble_att_svr_read_local(attr_handle, &om);
   155be:	a901      	add	r1, sp, #4
   155c0:	4620      	mov	r0, r4
   155c2:	f00a ffb7 	bl	20534 <ble_att_svr_read_local>
        if (rc == 0) {
   155c6:	4605      	mov	r5, r0
   155c8:	2800      	cmp	r0, #0
   155ca:	d1f5      	bne.n	155b8 <btshell_read+0x18>
            console_printf("read local; attr_handle=%d len=%d value=",
   155cc:	9b01      	ldr	r3, [sp, #4]
   155ce:	8a1a      	ldrh	r2, [r3, #16]
   155d0:	4621      	mov	r1, r4
   155d2:	4807      	ldr	r0, [pc, #28]	; (155f0 <btshell_read+0x50>)
   155d4:	f006 fdaa 	bl	1c12c <console_printf>
            print_mbuf(om);
   155d8:	9801      	ldr	r0, [sp, #4]
   155da:	f000 f9e1 	bl	159a0 <print_mbuf>
            console_printf("\n");
   155de:	4805      	ldr	r0, [pc, #20]	; (155f4 <btshell_read+0x54>)
   155e0:	f006 fda4 	bl	1c12c <console_printf>
            os_mbuf_free_chain(om);
   155e4:	9801      	ldr	r0, [sp, #4]
   155e6:	f004 f812 	bl	1960e <os_mbuf_free_chain>
   155ea:	e7e5      	b.n	155b8 <btshell_read+0x18>
   155ec:	000149a5 	.word	0x000149a5
   155f0:	00030300 	.word	0x00030300
   155f4:	0002ff28 	.word	0x0002ff28

000155f8 <btshell_read_long>:
{
   155f8:	b500      	push	{lr}
   155fa:	b083      	sub	sp, #12
    rc = ble_gattc_read_long(conn_handle, attr_handle, offset,
   155fc:	2300      	movs	r3, #0
   155fe:	9300      	str	r3, [sp, #0]
   15600:	4b02      	ldr	r3, [pc, #8]	; (1560c <btshell_read_long+0x14>)
   15602:	f00f f99f 	bl	24944 <ble_gattc_read_long>
}
   15606:	b003      	add	sp, #12
   15608:	f85d fb04 	ldr.w	pc, [sp], #4
   1560c:	000149a5 	.word	0x000149a5

00015610 <btshell_read_by_uuid>:
{
   15610:	b510      	push	{r4, lr}
   15612:	b082      	sub	sp, #8
    rc = ble_gattc_read_by_uuid(conn_handle, start_handle, end_handle, uuid,
   15614:	2400      	movs	r4, #0
   15616:	9401      	str	r4, [sp, #4]
   15618:	4c02      	ldr	r4, [pc, #8]	; (15624 <btshell_read_by_uuid+0x14>)
   1561a:	9400      	str	r4, [sp, #0]
   1561c:	f00f f95c 	bl	248d8 <ble_gattc_read_by_uuid>
}
   15620:	b002      	add	sp, #8
   15622:	bd10      	pop	{r4, pc}
   15624:	000149a5 	.word	0x000149a5

00015628 <btshell_read_mult>:
{
   15628:	b500      	push	{lr}
   1562a:	b083      	sub	sp, #12
    rc = ble_gattc_read_mult(conn_handle, attr_handles, num_attr_handles,
   1562c:	2300      	movs	r3, #0
   1562e:	9300      	str	r3, [sp, #0]
   15630:	4b03      	ldr	r3, [pc, #12]	; (15640 <btshell_read_mult+0x18>)
   15632:	b2d2      	uxtb	r2, r2
   15634:	f00f f9b4 	bl	249a0 <ble_gattc_read_mult>
}
   15638:	b003      	add	sp, #12
   1563a:	f85d fb04 	ldr.w	pc, [sp], #4
   1563e:	bf00      	nop
   15640:	000149a5 	.word	0x000149a5

00015644 <btshell_write>:
{
   15644:	b510      	push	{r4, lr}
   15646:	b082      	sub	sp, #8
   15648:	460c      	mov	r4, r1
    if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   1564a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1564e:	4298      	cmp	r0, r3
   15650:	d006      	beq.n	15660 <btshell_write+0x1c>
        rc = ble_gattc_write(conn_handle, attr_handle, om,
   15652:	2300      	movs	r3, #0
   15654:	9300      	str	r3, [sp, #0]
   15656:	4b05      	ldr	r3, [pc, #20]	; (1566c <btshell_write+0x28>)
   15658:	f00f f9f6 	bl	24a48 <ble_gattc_write>
}
   1565c:	b002      	add	sp, #8
   1565e:	bd10      	pop	{r4, pc}
        rc = ble_att_svr_write_local(attr_handle, om);
   15660:	4611      	mov	r1, r2
   15662:	4620      	mov	r0, r4
   15664:	f00b fa59 	bl	20b1a <ble_att_svr_write_local>
   15668:	e7f8      	b.n	1565c <btshell_write+0x18>
   1566a:	bf00      	nop
   1566c:	00014929 	.word	0x00014929

00015670 <btshell_write_no_rsp>:
{
   15670:	b508      	push	{r3, lr}
    rc = ble_gattc_write_no_rsp(conn_handle, attr_handle, om);
   15672:	f00f f9cf 	bl	24a14 <ble_gattc_write_no_rsp>
}
   15676:	bd08      	pop	{r3, pc}

00015678 <btshell_write_long>:
{
   15678:	b510      	push	{r4, lr}
   1567a:	b082      	sub	sp, #8
    rc = ble_gattc_write_long(conn_handle, attr_handle, offset,
   1567c:	2400      	movs	r4, #0
   1567e:	9401      	str	r4, [sp, #4]
   15680:	4c02      	ldr	r4, [pc, #8]	; (1568c <btshell_write_long+0x14>)
   15682:	9400      	str	r4, [sp, #0]
   15684:	f00f fa18 	bl	24ab8 <ble_gattc_write_long>
}
   15688:	b002      	add	sp, #8
   1568a:	bd10      	pop	{r4, pc}
   1568c:	00014929 	.word	0x00014929

00015690 <btshell_write_reliable>:
{
   15690:	b500      	push	{lr}
   15692:	b083      	sub	sp, #12
    rc = ble_gattc_write_reliable(conn_handle, attrs, num_attrs,
   15694:	2300      	movs	r3, #0
   15696:	9300      	str	r3, [sp, #0]
   15698:	4b02      	ldr	r3, [pc, #8]	; (156a4 <btshell_write_reliable+0x14>)
   1569a:	f00f fa43 	bl	24b24 <ble_gattc_write_reliable>
}
   1569e:	b003      	add	sp, #12
   156a0:	f85d fb04 	ldr.w	pc, [sp], #4
   156a4:	000149f1 	.word	0x000149f1

000156a8 <btshell_adv_stop>:
{
   156a8:	b508      	push	{r3, lr}
    adv_params.restart = false;
   156aa:	4b03      	ldr	r3, [pc, #12]	; (156b8 <btshell_adv_stop+0x10>)
   156ac:	2200      	movs	r2, #0
   156ae:	701a      	strb	r2, [r3, #0]
    rc = ble_gap_adv_stop();
   156b0:	f00c fe64 	bl	2237c <ble_gap_adv_stop>
}
   156b4:	bd08      	pop	{r3, pc}
   156b6:	bf00      	nop
   156b8:	10001e84 	.word	0x10001e84

000156bc <btshell_adv_start>:
{
   156bc:	b570      	push	{r4, r5, r6, lr}
   156be:	b082      	sub	sp, #8
   156c0:	4606      	mov	r6, r0
   156c2:	460c      	mov	r4, r1
   156c4:	f89d 1018 	ldrb.w	r1, [sp, #24]
    if (restart) {
   156c8:	b199      	cbz	r1, 156f2 <btshell_adv_start+0x36>
        adv_params.restart = restart;
   156ca:	4d0f      	ldr	r5, [pc, #60]	; (15708 <btshell_adv_start+0x4c>)
   156cc:	7029      	strb	r1, [r5, #0]
        adv_params.own_addr_type = own_addr_type;
   156ce:	7068      	strb	r0, [r5, #1]
        adv_params.duration_ms = duration_ms;
   156d0:	60ea      	str	r2, [r5, #12]
        if (direct_addr) {
   156d2:	b13c      	cbz	r4, 156e4 <btshell_adv_start+0x28>
            memcpy(&adv_params.direct_addr, direct_addr, sizeof(adv_params.direct_addr));
   156d4:	4629      	mov	r1, r5
   156d6:	6820      	ldr	r0, [r4, #0]
   156d8:	f8c5 0002 	str.w	r0, [r5, #2]
   156dc:	88a5      	ldrh	r5, [r4, #4]
   156de:	79a0      	ldrb	r0, [r4, #6]
   156e0:	80cd      	strh	r5, [r1, #6]
   156e2:	7208      	strb	r0, [r1, #8]
        if (params) {
   156e4:	b12b      	cbz	r3, 156f2 <btshell_adv_start+0x36>
            memcpy(&adv_params.params, params, sizeof(adv_params.params));
   156e6:	4d09      	ldr	r5, [pc, #36]	; (1570c <btshell_adv_start+0x50>)
   156e8:	6818      	ldr	r0, [r3, #0]
   156ea:	6859      	ldr	r1, [r3, #4]
   156ec:	c503      	stmia	r5!, {r0, r1}
   156ee:	8919      	ldrh	r1, [r3, #8]
   156f0:	8029      	strh	r1, [r5, #0]
    rc = ble_gap_adv_start(own_addr_type, direct_addr, duration_ms, params,
   156f2:	2100      	movs	r1, #0
   156f4:	9101      	str	r1, [sp, #4]
   156f6:	4906      	ldr	r1, [pc, #24]	; (15710 <btshell_adv_start+0x54>)
   156f8:	9100      	str	r1, [sp, #0]
   156fa:	4621      	mov	r1, r4
   156fc:	4630      	mov	r0, r6
   156fe:	f00c fc3f 	bl	21f80 <ble_gap_adv_start>
}
   15702:	b002      	add	sp, #8
   15704:	bd70      	pop	{r4, r5, r6, pc}
   15706:	bf00      	nop
   15708:	10001e84 	.word	0x10001e84
   1570c:	10001e94 	.word	0x10001e94
   15710:	00014df1 	.word	0x00014df1

00015714 <btshell_conn_initiate>:
{
   15714:	b510      	push	{r4, lr}
   15716:	b082      	sub	sp, #8
    rc = ble_gap_connect(own_addr_type, peer_addr, duration_ms, params,
   15718:	2400      	movs	r4, #0
   1571a:	9401      	str	r4, [sp, #4]
   1571c:	4c02      	ldr	r4, [pc, #8]	; (15728 <btshell_conn_initiate+0x14>)
   1571e:	9400      	str	r4, [sp, #0]
   15720:	f00c ff36 	bl	22590 <ble_gap_connect>
}
   15724:	b002      	add	sp, #8
   15726:	bd10      	pop	{r4, pc}
   15728:	00014df1 	.word	0x00014df1

0001572c <btshell_ext_conn_initiate>:
{
   1572c:	b508      	push	{r3, lr}
    console_printf("BLE extended advertising not supported.");
   1572e:	4804      	ldr	r0, [pc, #16]	; (15740 <btshell_ext_conn_initiate+0x14>)
   15730:	f006 fcfc 	bl	1c12c <console_printf>
    console_printf(" Configure nimble host to enable it\n");
   15734:	4803      	ldr	r0, [pc, #12]	; (15744 <btshell_ext_conn_initiate+0x18>)
   15736:	f006 fcf9 	bl	1c12c <console_printf>
}
   1573a:	2000      	movs	r0, #0
   1573c:	bd08      	pop	{r3, pc}
   1573e:	bf00      	nop
   15740:	0003032c 	.word	0x0003032c
   15744:	00030354 	.word	0x00030354

00015748 <btshell_conn_cancel>:
{
   15748:	b508      	push	{r3, lr}
    rc = ble_gap_conn_cancel();
   1574a:	f00d f97d 	bl	22a48 <ble_gap_conn_cancel>
}
   1574e:	bd08      	pop	{r3, pc}

00015750 <btshell_term_conn>:
{
   15750:	b508      	push	{r3, lr}
    rc = ble_gap_terminate(conn_handle, reason);
   15752:	f00d f815 	bl	22780 <ble_gap_terminate>
}
   15756:	bd08      	pop	{r3, pc}

00015758 <btshell_wl_set>:
{
   15758:	b508      	push	{r3, lr}
    rc = ble_gap_wl_set(addrs, addrs_count);
   1575a:	b2c9      	uxtb	r1, r1
   1575c:	f00c fbc2 	bl	21ee4 <ble_gap_wl_set>
}
   15760:	bd08      	pop	{r3, pc}
	...

00015764 <btshell_scan>:
{
   15764:	b500      	push	{lr}
   15766:	b083      	sub	sp, #12
    rc = ble_gap_disc(own_addr_type, duration_ms, disc_params,
   15768:	9300      	str	r3, [sp, #0]
   1576a:	4b03      	ldr	r3, [pc, #12]	; (15778 <btshell_scan+0x14>)
   1576c:	f00c fe8a 	bl	22484 <ble_gap_disc>
}
   15770:	b003      	add	sp, #12
   15772:	f85d fb04 	ldr.w	pc, [sp], #4
   15776:	bf00      	nop
   15778:	00014df1 	.word	0x00014df1

0001577c <btshell_ext_scan>:
{
   1577c:	b508      	push	{r3, lr}
    console_printf("BLE extended advertising not supported.");
   1577e:	4804      	ldr	r0, [pc, #16]	; (15790 <btshell_ext_scan+0x14>)
   15780:	f006 fcd4 	bl	1c12c <console_printf>
    console_printf(" Configure nimble host to enable it\n");
   15784:	4803      	ldr	r0, [pc, #12]	; (15794 <btshell_ext_scan+0x18>)
   15786:	f006 fcd1 	bl	1c12c <console_printf>
}
   1578a:	2000      	movs	r0, #0
   1578c:	bd08      	pop	{r3, pc}
   1578e:	bf00      	nop
   15790:	0003032c 	.word	0x0003032c
   15794:	00030354 	.word	0x00030354

00015798 <btshell_scan_cancel>:
{
   15798:	b508      	push	{r3, lr}
    rc = ble_gap_disc_cancel();
   1579a:	f00c fe1f 	bl	223dc <ble_gap_disc_cancel>
}
   1579e:	bd08      	pop	{r3, pc}

000157a0 <btshell_update_conn>:
{
   157a0:	b508      	push	{r3, lr}
    rc = ble_gap_update_params(conn_handle, params);
   157a2:	f00d f9a7 	bl	22af4 <ble_gap_update_params>
}
   157a6:	bd08      	pop	{r3, pc}

000157a8 <btshell_notify>:
{
   157a8:	b508      	push	{r3, lr}
    ble_gatts_chr_updated(attr_handle);
   157aa:	f010 fb79 	bl	25ea0 <ble_gatts_chr_updated>
}
   157ae:	bd08      	pop	{r3, pc}

000157b0 <btshell_datalen>:
{
   157b0:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_set_data_len(conn_handle, tx_octets, tx_time);
   157b2:	f012 fd77 	bl	282a4 <ble_hs_hci_util_set_data_len>
}
   157b6:	bd08      	pop	{r3, pc}

000157b8 <btshell_tx_start>:
    if (num == 0) {
   157b8:	b32b      	cbz	r3, 15806 <btshell_tx_start+0x4e>
{
   157ba:	b538      	push	{r3, r4, r5, lr}
   157bc:	4605      	mov	r5, r0
   157be:	4618      	mov	r0, r3
    if (btshell_tx_data.tx_num != 0) {
   157c0:	4b15      	ldr	r3, [pc, #84]	; (15818 <btshell_tx_start+0x60>)
   157c2:	881b      	ldrh	r3, [r3, #0]
   157c4:	bb0b      	cbnz	r3, 1580a <btshell_tx_start+0x52>
    if ((len + 4) > MYNEWT_VAL_MSYS_1_BLOCK_SIZE) {
   157c6:	f5b1 7f90 	cmp.w	r1, #288	; 0x120
   157ca:	d821      	bhi.n	15810 <btshell_tx_start+0x58>
    btshell_tx_data.tx_num = num;
   157cc:	4c12      	ldr	r4, [pc, #72]	; (15818 <btshell_tx_start+0x60>)
   157ce:	8020      	strh	r0, [r4, #0]
    btshell_tx_data.tx_num_requested = num;
   157d0:	8060      	strh	r0, [r4, #2]
    btshell_tx_data.tx_rate = rate;
   157d2:	80a2      	strh	r2, [r4, #4]
    btshell_tx_data.tx_len = len;
   157d4:	8121      	strh	r1, [r4, #8]
    btshell_tx_data.tx_conn_handle = conn_handle;
   157d6:	80e5      	strh	r5, [r4, #6]
    ble_hs_lock();
   157d8:	f010 feae 	bl	26538 <ble_hs_lock>
    btshell_tx_data.conn = ble_hs_conn_find(conn_handle);
   157dc:	4628      	mov	r0, r5
   157de:	f011 ff2f 	bl	27640 <ble_hs_conn_find>
   157e2:	60e0      	str	r0, [r4, #12]
    ble_hs_unlock();
   157e4:	f010 feac 	bl	26540 <ble_hs_unlock>
    if (!btshell_tx_data.conn) {
   157e8:	68e3      	ldr	r3, [r4, #12]
   157ea:	b12b      	cbz	r3, 157f8 <btshell_tx_start+0x40>
    os_callout_reset(&btshell_tx_timer, 0);
   157ec:	2100      	movs	r1, #0
   157ee:	480b      	ldr	r0, [pc, #44]	; (1581c <btshell_tx_start+0x64>)
   157f0:	f003 fca8 	bl	19144 <os_callout_reset>
    return 0;
   157f4:	2000      	movs	r0, #0
}
   157f6:	bd38      	pop	{r3, r4, r5, pc}
        console_printf("Could not find ble_hs_conn for handle: %d\n",
   157f8:	4629      	mov	r1, r5
   157fa:	4809      	ldr	r0, [pc, #36]	; (15820 <btshell_tx_start+0x68>)
   157fc:	f006 fc96 	bl	1c12c <console_printf>
        return -1;
   15800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15804:	e7f7      	b.n	157f6 <btshell_tx_start+0x3e>
        return 0;
   15806:	2000      	movs	r0, #0
}
   15808:	4770      	bx	lr
        return -1;
   1580a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1580e:	e7f2      	b.n	157f6 <btshell_tx_start+0x3e>
        return -2;
   15810:	f06f 0001 	mvn.w	r0, #1
   15814:	e7ef      	b.n	157f6 <btshell_tx_start+0x3e>
   15816:	bf00      	nop
   15818:	1000337c 	.word	0x1000337c
   1581c:	1000338c 	.word	0x1000338c
   15820:	0003037c 	.word	0x0003037c

00015824 <btshell_tx_stop>:
{
   15824:	b508      	push	{r3, lr}
    os_callout_stop(&btshell_tx_timer);
   15826:	4803      	ldr	r0, [pc, #12]	; (15834 <btshell_tx_stop+0x10>)
   15828:	f003 fc6e 	bl	19108 <os_callout_stop>
    btshell_tx_data.tx_num = 0;
   1582c:	4b02      	ldr	r3, [pc, #8]	; (15838 <btshell_tx_stop+0x14>)
   1582e:	2200      	movs	r2, #0
   15830:	801a      	strh	r2, [r3, #0]
}
   15832:	bd08      	pop	{r3, pc}
   15834:	1000338c 	.word	0x1000338c
   15838:	1000337c 	.word	0x1000337c

0001583c <btshell_rssi>:
{
   1583c:	b508      	push	{r3, lr}
    rc = ble_gap_conn_rssi(conn_handle, out_rssi);
   1583e:	f00d f9f3 	bl	22c28 <ble_gap_conn_rssi>
}
   15842:	bd08      	pop	{r3, pc}

00015844 <main>:
 *
 * @return int NOTE: this function should never return!
 */
int
main(int argc, char **argv)
{
   15844:	b500      	push	{lr}
   15846:	b083      	sub	sp, #12
#ifdef ARCH_sim
    mcu_sim_parse_args(argc, argv);
#endif

    /* Initialize OS */
    sysinit();
   15848:	f008 fbfc 	bl	1e044 <sysinit_start>
   1584c:	f003 fa4e 	bl	18cec <sysinit_app>
   15850:	f008 fbfe 	bl	1e050 <sysinit_end>

    /* Initialize some application specific memory pools. */
    rc = os_mempool_init(&btshell_svc_pool, BTSHELL_MAX_SVCS,
   15854:	4b35      	ldr	r3, [pc, #212]	; (1592c <main+0xe8>)
   15856:	9300      	str	r3, [sp, #0]
   15858:	4b35      	ldr	r3, [pc, #212]	; (15930 <main+0xec>)
   1585a:	2224      	movs	r2, #36	; 0x24
   1585c:	2120      	movs	r1, #32
   1585e:	4835      	ldr	r0, [pc, #212]	; (15934 <main+0xf0>)
   15860:	f004 fad0 	bl	19e04 <os_mempool_init>
                         sizeof (struct btshell_svc), btshell_svc_mem,
                         "btshell_svc_pool");
    assert(rc == 0);
   15864:	b148      	cbz	r0, 1587a <main+0x36>
   15866:	f7fe ff4d 	bl	14704 <hal_debugger_connected>
   1586a:	b100      	cbz	r0, 1586e <main+0x2a>
   1586c:	be01      	bkpt	0x0001
   1586e:	2300      	movs	r3, #0
   15870:	461a      	mov	r2, r3
   15872:	4619      	mov	r1, r3
   15874:	4618      	mov	r0, r3
   15876:	f003 fa55 	bl	18d24 <__assert_func>

    rc = os_mempool_init(&btshell_chr_pool, BTSHELL_MAX_CHRS,
   1587a:	4b2f      	ldr	r3, [pc, #188]	; (15938 <main+0xf4>)
   1587c:	9300      	str	r3, [sp, #0]
   1587e:	4b2f      	ldr	r3, [pc, #188]	; (1593c <main+0xf8>)
   15880:	2224      	movs	r2, #36	; 0x24
   15882:	2140      	movs	r1, #64	; 0x40
   15884:	482e      	ldr	r0, [pc, #184]	; (15940 <main+0xfc>)
   15886:	f004 fabd 	bl	19e04 <os_mempool_init>
                         sizeof (struct btshell_chr), btshell_chr_mem,
                         "btshell_chr_pool");
    assert(rc == 0);
   1588a:	b148      	cbz	r0, 158a0 <main+0x5c>
   1588c:	f7fe ff3a 	bl	14704 <hal_debugger_connected>
   15890:	b100      	cbz	r0, 15894 <main+0x50>
   15892:	be01      	bkpt	0x0001
   15894:	2300      	movs	r3, #0
   15896:	461a      	mov	r2, r3
   15898:	4619      	mov	r1, r3
   1589a:	4618      	mov	r0, r3
   1589c:	f003 fa42 	bl	18d24 <__assert_func>

    rc = os_mempool_init(&btshell_dsc_pool, BTSHELL_MAX_DSCS,
   158a0:	4b28      	ldr	r3, [pc, #160]	; (15944 <main+0x100>)
   158a2:	9300      	str	r3, [sp, #0]
   158a4:	4b28      	ldr	r3, [pc, #160]	; (15948 <main+0x104>)
   158a6:	221c      	movs	r2, #28
   158a8:	2140      	movs	r1, #64	; 0x40
   158aa:	4828      	ldr	r0, [pc, #160]	; (1594c <main+0x108>)
   158ac:	f004 faaa 	bl	19e04 <os_mempool_init>
                         sizeof (struct btshell_dsc), btshell_dsc_mem,
                         "btshell_dsc_pool");
    assert(rc == 0);
   158b0:	b148      	cbz	r0, 158c6 <main+0x82>
   158b2:	f7fe ff27 	bl	14704 <hal_debugger_connected>
   158b6:	b100      	cbz	r0, 158ba <main+0x76>
   158b8:	be01      	bkpt	0x0001
   158ba:	2300      	movs	r3, #0
   158bc:	461a      	mov	r2, r3
   158be:	4619      	mov	r1, r3
   158c0:	4618      	mov	r0, r3
   158c2:	f003 fa2f 	bl	18d24 <__assert_func>
                         "btshell_coc_conn_pool");
    assert(rc == 0);
#endif

    /* Initialize the NimBLE host configuration. */
    ble_hs_cfg.reset_cb = btshell_on_reset;
   158c6:	4b22      	ldr	r3, [pc, #136]	; (15950 <main+0x10c>)
   158c8:	4a22      	ldr	r2, [pc, #136]	; (15954 <main+0x110>)
   158ca:	60da      	str	r2, [r3, #12]
    ble_hs_cfg.sync_cb = btshell_on_sync;
   158cc:	4a22      	ldr	r2, [pc, #136]	; (15958 <main+0x114>)
   158ce:	611a      	str	r2, [r3, #16]
    ble_hs_cfg.gatts_register_cb = gatt_svr_register_cb;
   158d0:	4a22      	ldr	r2, [pc, #136]	; (1595c <main+0x118>)
   158d2:	601a      	str	r2, [r3, #0]
    ble_hs_cfg.store_status_cb = ble_store_util_status_rr;
   158d4:	4a22      	ldr	r2, [pc, #136]	; (15960 <main+0x11c>)
   158d6:	621a      	str	r2, [r3, #32]

    rc = gatt_svr_init();
   158d8:	f002 fe3c 	bl	18554 <gatt_svr_init>
    assert(rc == 0);
   158dc:	b148      	cbz	r0, 158f2 <main+0xae>
   158de:	f7fe ff11 	bl	14704 <hal_debugger_connected>
   158e2:	b100      	cbz	r0, 158e6 <main+0xa2>
   158e4:	be01      	bkpt	0x0001
   158e6:	2300      	movs	r3, #0
   158e8:	461a      	mov	r2, r3
   158ea:	4619      	mov	r1, r3
   158ec:	4618      	mov	r0, r3
   158ee:	f003 fa19 	bl	18d24 <__assert_func>

    cmd_init();
   158f2:	f002 f803 	bl	178fc <cmd_init>

    /* Set the default device name. */
    rc = ble_svc_gap_device_name_set("nimble-btshell");
   158f6:	481b      	ldr	r0, [pc, #108]	; (15964 <main+0x120>)
   158f8:	f014 fb8e 	bl	2a018 <ble_svc_gap_device_name_set>
    assert(rc == 0);
   158fc:	b148      	cbz	r0, 15912 <main+0xce>
   158fe:	f7fe ff01 	bl	14704 <hal_debugger_connected>
   15902:	b100      	cbz	r0, 15906 <main+0xc2>
   15904:	be01      	bkpt	0x0001
   15906:	2300      	movs	r3, #0
   15908:	461a      	mov	r2, r3
   1590a:	4619      	mov	r1, r3
   1590c:	4618      	mov	r0, r3
   1590e:	f003 fa09 	bl	18d24 <__assert_func>

    /* Create a callout (timer).  This callout is used by the "tx" btshell
     * command to repeatedly send packets of sequential data bytes.
     */
    os_callout_init(&btshell_tx_timer, os_eventq_dflt_get(),
   15912:	f003 fe39 	bl	19588 <os_eventq_dflt_get>
   15916:	4601      	mov	r1, r0
   15918:	2300      	movs	r3, #0
   1591a:	4a13      	ldr	r2, [pc, #76]	; (15968 <main+0x124>)
   1591c:	4813      	ldr	r0, [pc, #76]	; (1596c <main+0x128>)
   1591e:	f003 fbe5 	bl	190ec <os_callout_init>
                    btshell_tx_timer_cb, NULL);

    btshell_init_ext_adv_restart();

    while (1) {
        os_eventq_run(os_eventq_dflt_get());
   15922:	f003 fe31 	bl	19588 <os_eventq_dflt_get>
   15926:	f003 fdfc 	bl	19522 <os_eventq_run>
    while (1) {
   1592a:	e7fa      	b.n	15922 <main+0xde>
   1592c:	000303a8 	.word	0x000303a8
   15930:	10002ee0 	.word	0x10002ee0
   15934:	10003360 	.word	0x10003360
   15938:	000303bc 	.word	0x000303bc
   1593c:	10001ea0 	.word	0x10001ea0
   15940:	100027a0 	.word	0x100027a0
   15944:	000303d0 	.word	0x000303d0
   15948:	100027bc 	.word	0x100027bc
   1594c:	10002ebc 	.word	0x10002ebc
   15950:	100006d4 	.word	0x100006d4
   15954:	0001494d 	.word	0x0001494d
   15958:	000152e5 	.word	0x000152e5
   1595c:	000184fd 	.word	0x000184fd
   15960:	00029913 	.word	0x00029913
   15964:	000303e4 	.word	0x000303e4
   15968:	00015219 	.word	0x00015219
   1596c:	1000338c 	.word	0x1000338c

00015970 <print_bytes>:
/**
 * Utility function to log an array of bytes.
 */
void
print_bytes(const uint8_t *bytes, int len)
{
   15970:	b570      	push	{r4, r5, r6, lr}
   15972:	4606      	mov	r6, r0
   15974:	460d      	mov	r5, r1
    int i;

    for (i = 0; i < len; i++) {
   15976:	2400      	movs	r4, #0
   15978:	e005      	b.n	15986 <print_bytes+0x16>
        console_printf("%s0x%02x", i != 0 ? ":" : "", bytes[i]);
   1597a:	4906      	ldr	r1, [pc, #24]	; (15994 <print_bytes+0x24>)
   1597c:	5d32      	ldrb	r2, [r6, r4]
   1597e:	4806      	ldr	r0, [pc, #24]	; (15998 <print_bytes+0x28>)
   15980:	f006 fbd4 	bl	1c12c <console_printf>
    for (i = 0; i < len; i++) {
   15984:	3401      	adds	r4, #1
   15986:	42ac      	cmp	r4, r5
   15988:	da03      	bge.n	15992 <print_bytes+0x22>
        console_printf("%s0x%02x", i != 0 ? ":" : "", bytes[i]);
   1598a:	2c00      	cmp	r4, #0
   1598c:	d0f5      	beq.n	1597a <print_bytes+0xa>
   1598e:	4903      	ldr	r1, [pc, #12]	; (1599c <print_bytes+0x2c>)
   15990:	e7f4      	b.n	1597c <print_bytes+0xc>
    }
}
   15992:	bd70      	pop	{r4, r5, r6, pc}
   15994:	00034114 	.word	0x00034114
   15998:	000303f8 	.word	0x000303f8
   1599c:	000303f4 	.word	0x000303f4

000159a0 <print_mbuf>:

void
print_mbuf(const struct os_mbuf *om)
{
   159a0:	b538      	push	{r3, r4, r5, lr}
   159a2:	4604      	mov	r4, r0
    int colon;

    colon = 0;
   159a4:	2500      	movs	r5, #0
    while (om != NULL) {
   159a6:	e007      	b.n	159b8 <print_mbuf+0x18>
        if (colon) {
            console_printf(":");
   159a8:	4806      	ldr	r0, [pc, #24]	; (159c4 <print_mbuf+0x24>)
   159aa:	f006 fbbf 	bl	1c12c <console_printf>
        } else {
            colon = 1;
        }
        print_bytes(om->om_data, om->om_len);
   159ae:	88e1      	ldrh	r1, [r4, #6]
   159b0:	6820      	ldr	r0, [r4, #0]
   159b2:	f7ff ffdd 	bl	15970 <print_bytes>
        om = SLIST_NEXT(om, om_next);
   159b6:	68e4      	ldr	r4, [r4, #12]
    while (om != NULL) {
   159b8:	b11c      	cbz	r4, 159c2 <print_mbuf+0x22>
        if (colon) {
   159ba:	2d00      	cmp	r5, #0
   159bc:	d1f4      	bne.n	159a8 <print_mbuf+0x8>
            colon = 1;
   159be:	2501      	movs	r5, #1
   159c0:	e7f5      	b.n	159ae <print_mbuf+0xe>
    }
}
   159c2:	bd38      	pop	{r3, r4, r5, pc}
   159c4:	000303f4 	.word	0x000303f4

000159c8 <print_addr>:

void
print_addr(const void *addr)
{
   159c8:	b500      	push	{lr}
   159ca:	b085      	sub	sp, #20
    const uint8_t *u8p;

    u8p = addr;
    console_printf("%02x:%02x:%02x:%02x:%02x:%02x",
                   u8p[5], u8p[4], u8p[3], u8p[2], u8p[1], u8p[0]);
   159cc:	7883      	ldrb	r3, [r0, #2]
   159ce:	7842      	ldrb	r2, [r0, #1]
   159d0:	7801      	ldrb	r1, [r0, #0]
    console_printf("%02x:%02x:%02x:%02x:%02x:%02x",
   159d2:	9102      	str	r1, [sp, #8]
   159d4:	9201      	str	r2, [sp, #4]
   159d6:	9300      	str	r3, [sp, #0]
   159d8:	78c3      	ldrb	r3, [r0, #3]
   159da:	7902      	ldrb	r2, [r0, #4]
   159dc:	7941      	ldrb	r1, [r0, #5]
   159de:	4803      	ldr	r0, [pc, #12]	; (159ec <print_addr+0x24>)
   159e0:	f006 fba4 	bl	1c12c <console_printf>
}
   159e4:	b005      	add	sp, #20
   159e6:	f85d fb04 	ldr.w	pc, [sp], #4
   159ea:	bf00      	nop
   159ec:	00030404 	.word	0x00030404

000159f0 <print_uuid>:

void
print_uuid(const ble_uuid_t *uuid)
{
   159f0:	b500      	push	{lr}
   159f2:	b08b      	sub	sp, #44	; 0x2c
    char buf[BLE_UUID_STR_LEN];

    ble_uuid_to_str(uuid, buf);
   159f4:	4669      	mov	r1, sp
   159f6:	f013 ffef 	bl	299d8 <ble_uuid_to_str>

    console_printf("%s", buf);
   159fa:	4669      	mov	r1, sp
   159fc:	4802      	ldr	r0, [pc, #8]	; (15a08 <print_uuid+0x18>)
   159fe:	f006 fb95 	bl	1c12c <console_printf>
}
   15a02:	b00b      	add	sp, #44	; 0x2c
   15a04:	f85d fb04 	ldr.w	pc, [sp], #4
   15a08:	00030424 	.word	0x00030424

00015a0c <print_dsc>:
                   desc->sec_state.bonded);
}

static void
print_dsc(struct btshell_dsc *dsc)
{
   15a0c:	b510      	push	{r4, lr}
   15a0e:	4604      	mov	r4, r0
    console_printf("            dsc_handle=%d uuid=", dsc->dsc.handle);
   15a10:	8881      	ldrh	r1, [r0, #4]
   15a12:	4805      	ldr	r0, [pc, #20]	; (15a28 <print_dsc+0x1c>)
   15a14:	f006 fb8a 	bl	1c12c <console_printf>
    print_uuid(&dsc->dsc.uuid.u);
   15a18:	f104 0008 	add.w	r0, r4, #8
   15a1c:	f7ff ffe8 	bl	159f0 <print_uuid>
    console_printf("\n");
   15a20:	4802      	ldr	r0, [pc, #8]	; (15a2c <print_dsc+0x20>)
   15a22:	f006 fb83 	bl	1c12c <console_printf>
}
   15a26:	bd10      	pop	{r4, pc}
   15a28:	00030428 	.word	0x00030428
   15a2c:	0002ff28 	.word	0x0002ff28

00015a30 <print_chr>:

static void
print_chr(struct btshell_chr *chr)
{
   15a30:	b510      	push	{r4, lr}
   15a32:	4604      	mov	r4, r0
    struct btshell_dsc *dsc;

    console_printf("        def_handle=%d val_handle=%d properties=0x%02x "
   15a34:	7a03      	ldrb	r3, [r0, #8]
   15a36:	88c2      	ldrh	r2, [r0, #6]
   15a38:	8881      	ldrh	r1, [r0, #4]
   15a3a:	4809      	ldr	r0, [pc, #36]	; (15a60 <print_chr+0x30>)
   15a3c:	f006 fb76 	bl	1c12c <console_printf>
                   "uuid=", chr->chr.def_handle, chr->chr.val_handle,
                   chr->chr.properties);
    print_uuid(&chr->chr.uuid.u);
   15a40:	f104 000c 	add.w	r0, r4, #12
   15a44:	f7ff ffd4 	bl	159f0 <print_uuid>
    console_printf("\n");
   15a48:	4806      	ldr	r0, [pc, #24]	; (15a64 <print_chr+0x34>)
   15a4a:	f006 fb6f 	bl	1c12c <console_printf>

    SLIST_FOREACH(dsc, &chr->dscs, next) {
   15a4e:	6a24      	ldr	r4, [r4, #32]
   15a50:	b124      	cbz	r4, 15a5c <print_chr+0x2c>
        print_dsc(dsc);
   15a52:	4620      	mov	r0, r4
   15a54:	f7ff ffda 	bl	15a0c <print_dsc>
    SLIST_FOREACH(dsc, &chr->dscs, next) {
   15a58:	6824      	ldr	r4, [r4, #0]
   15a5a:	e7f9      	b.n	15a50 <print_chr+0x20>
    }
}
   15a5c:	bd10      	pop	{r4, pc}
   15a5e:	bf00      	nop
   15a60:	00030448 	.word	0x00030448
   15a64:	0002ff28 	.word	0x0002ff28

00015a68 <chr_end_handle>:
    next_chr = SLIST_NEXT(chr, next);
   15a68:	680b      	ldr	r3, [r1, #0]
    if (next_chr != NULL) {
   15a6a:	b11b      	cbz	r3, 15a74 <chr_end_handle+0xc>
        return next_chr->chr.def_handle - 1;
   15a6c:	8898      	ldrh	r0, [r3, #4]
   15a6e:	3801      	subs	r0, #1
   15a70:	b280      	uxth	r0, r0
   15a72:	4770      	bx	lr
        return svc->svc.end_handle;
   15a74:	88c0      	ldrh	r0, [r0, #6]
}
   15a76:	4770      	bx	lr

00015a78 <chr_is_empty>:
{
   15a78:	b510      	push	{r4, lr}
   15a7a:	460c      	mov	r4, r1
    return chr_end_handle(svc, chr) <= chr->chr.val_handle;
   15a7c:	f7ff fff4 	bl	15a68 <chr_end_handle>
   15a80:	88e3      	ldrh	r3, [r4, #6]
}
   15a82:	4298      	cmp	r0, r3
   15a84:	bf8c      	ite	hi
   15a86:	2000      	movhi	r0, #0
   15a88:	2001      	movls	r0, #1
   15a8a:	bd10      	pop	{r4, pc}

00015a8c <print_conn_desc>:
{
   15a8c:	b510      	push	{r4, lr}
   15a8e:	b084      	sub	sp, #16
   15a90:	4604      	mov	r4, r0
    console_printf("handle=%d our_ota_addr_type=%d our_ota_addr=",
   15a92:	7c82      	ldrb	r2, [r0, #18]
   15a94:	8c01      	ldrh	r1, [r0, #32]
   15a96:	4819      	ldr	r0, [pc, #100]	; (15afc <print_conn_desc+0x70>)
   15a98:	f006 fb48 	bl	1c12c <console_printf>
    print_addr(desc->our_ota_addr.val);
   15a9c:	f104 0013 	add.w	r0, r4, #19
   15aa0:	f7ff ff92 	bl	159c8 <print_addr>
    console_printf(" our_id_addr_type=%d our_id_addr=",
   15aa4:	7921      	ldrb	r1, [r4, #4]
   15aa6:	4816      	ldr	r0, [pc, #88]	; (15b00 <print_conn_desc+0x74>)
   15aa8:	f006 fb40 	bl	1c12c <console_printf>
    print_addr(desc->our_id_addr.val);
   15aac:	1d60      	adds	r0, r4, #5
   15aae:	f7ff ff8b 	bl	159c8 <print_addr>
    console_printf(" peer_ota_addr_type=%d peer_ota_addr=",
   15ab2:	7e61      	ldrb	r1, [r4, #25]
   15ab4:	4813      	ldr	r0, [pc, #76]	; (15b04 <print_conn_desc+0x78>)
   15ab6:	f006 fb39 	bl	1c12c <console_printf>
    print_addr(desc->peer_ota_addr.val);
   15aba:	f104 001a 	add.w	r0, r4, #26
   15abe:	f7ff ff83 	bl	159c8 <print_addr>
    console_printf(" peer_id_addr_type=%d peer_id_addr=",
   15ac2:	7ae1      	ldrb	r1, [r4, #11]
   15ac4:	4810      	ldr	r0, [pc, #64]	; (15b08 <print_conn_desc+0x7c>)
   15ac6:	f006 fb31 	bl	1c12c <console_printf>
    print_addr(desc->peer_id_addr.val);
   15aca:	f104 000c 	add.w	r0, r4, #12
   15ace:	f7ff ff7b 	bl	159c8 <print_addr>
                   desc->sec_state.key_size,
   15ad2:	7823      	ldrb	r3, [r4, #0]
   15ad4:	08da      	lsrs	r2, r3, #3
                   desc->sec_state.encrypted,
   15ad6:	f003 0101 	and.w	r1, r3, #1
                   desc->sec_state.authenticated,
   15ada:	f3c3 0040 	ubfx	r0, r3, #1, #1
                   desc->sec_state.bonded);
   15ade:	f3c3 0380 	ubfx	r3, r3, #2, #1
    console_printf(" conn_itvl=%d conn_latency=%d supervision_timeout=%d"
   15ae2:	9303      	str	r3, [sp, #12]
   15ae4:	9002      	str	r0, [sp, #8]
   15ae6:	9101      	str	r1, [sp, #4]
   15ae8:	9200      	str	r2, [sp, #0]
   15aea:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   15aec:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   15aee:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   15af0:	4806      	ldr	r0, [pc, #24]	; (15b0c <print_conn_desc+0x80>)
   15af2:	f006 fb1b 	bl	1c12c <console_printf>
}
   15af6:	b004      	add	sp, #16
   15af8:	bd10      	pop	{r4, pc}
   15afa:	bf00      	nop
   15afc:	00030484 	.word	0x00030484
   15b00:	000304b4 	.word	0x000304b4
   15b04:	000304d8 	.word	0x000304d8
   15b08:	00030500 	.word	0x00030500
   15b0c:	00030524 	.word	0x00030524

00015b10 <print_svc>:

void
print_svc(struct btshell_svc *svc)
{
   15b10:	b510      	push	{r4, lr}
   15b12:	4604      	mov	r4, r0
    struct btshell_chr *chr;

    console_printf("    start=%d end=%d uuid=", svc->svc.start_handle,
   15b14:	88c2      	ldrh	r2, [r0, #6]
   15b16:	8881      	ldrh	r1, [r0, #4]
   15b18:	4808      	ldr	r0, [pc, #32]	; (15b3c <print_svc+0x2c>)
   15b1a:	f006 fb07 	bl	1c12c <console_printf>
                   svc->svc.end_handle);
    print_uuid(&svc->svc.uuid.u);
   15b1e:	f104 0008 	add.w	r0, r4, #8
   15b22:	f7ff ff65 	bl	159f0 <print_uuid>
    console_printf("\n");
   15b26:	4806      	ldr	r0, [pc, #24]	; (15b40 <print_svc+0x30>)
   15b28:	f006 fb00 	bl	1c12c <console_printf>

    SLIST_FOREACH(chr, &svc->chrs, next) {
   15b2c:	69e4      	ldr	r4, [r4, #28]
   15b2e:	b124      	cbz	r4, 15b3a <print_svc+0x2a>
        print_chr(chr);
   15b30:	4620      	mov	r0, r4
   15b32:	f7ff ff7d 	bl	15a30 <print_chr>
    SLIST_FOREACH(chr, &svc->chrs, next) {
   15b36:	6824      	ldr	r4, [r4, #0]
   15b38:	e7f9      	b.n	15b2e <print_svc+0x1e>
    }
}
   15b3a:	bd10      	pop	{r4, pc}
   15b3c:	00030590 	.word	0x00030590
   15b40:	0002ff28 	.word	0x0002ff28

00015b44 <cmd_host_disable>:
    }
}

static int
cmd_host_disable(int argc, char **argv)
{
   15b44:	b510      	push	{r4, lr}
    static struct ble_hs_stop_listener listener;
    int rc;

    rc = ble_hs_stop(&listener, on_stop, NULL);
   15b46:	2200      	movs	r2, #0
   15b48:	4905      	ldr	r1, [pc, #20]	; (15b60 <cmd_host_disable+0x1c>)
   15b4a:	4806      	ldr	r0, [pc, #24]	; (15b64 <cmd_host_disable+0x20>)
   15b4c:	f013 f8a4 	bl	28c98 <ble_hs_stop>
    if (rc) {
   15b50:	4604      	mov	r4, r0
   15b52:	b108      	cbz	r0, 15b58 <cmd_host_disable+0x14>
    }

    ble_gatts_reset();

    return 0;
}
   15b54:	4620      	mov	r0, r4
   15b56:	bd10      	pop	{r4, pc}
    ble_gatts_reset();
   15b58:	f010 fa98 	bl	2608c <ble_gatts_reset>
    return 0;
   15b5c:	e7fa      	b.n	15b54 <cmd_host_disable+0x10>
   15b5e:	bf00      	nop
   15b60:	00015b69 	.word	0x00015b69
   15b64:	10003548 	.word	0x10003548

00015b68 <on_stop>:
{
   15b68:	b508      	push	{r3, lr}
    if (status == 0) {
   15b6a:	b918      	cbnz	r0, 15b74 <on_stop+0xc>
        console_printf("host stopped\n");
   15b6c:	4804      	ldr	r0, [pc, #16]	; (15b80 <on_stop+0x18>)
   15b6e:	f006 fadd 	bl	1c12c <console_printf>
}
   15b72:	bd08      	pop	{r3, pc}
   15b74:	4601      	mov	r1, r0
        console_printf("host failed to stop; rc=%d\n", status);
   15b76:	4803      	ldr	r0, [pc, #12]	; (15b84 <on_stop+0x1c>)
   15b78:	f006 fad8 	bl	1c12c <console_printf>
}
   15b7c:	e7f9      	b.n	15b72 <on_stop+0xa>
   15b7e:	bf00      	nop
   15b80:	000305ac 	.word	0x000305ac
   15b84:	000305bc 	.word	0x000305bc

00015b88 <cmd_host_enable>:
{
   15b88:	b508      	push	{r3, lr}
    rc = gatt_svr_init();
   15b8a:	f002 fce3 	bl	18554 <gatt_svr_init>
    assert(rc == 0);
   15b8e:	b918      	cbnz	r0, 15b98 <cmd_host_enable+0x10>
    ble_hs_sched_start();
   15b90:	f010 fdca 	bl	26728 <ble_hs_sched_start>
}
   15b94:	2000      	movs	r0, #0
   15b96:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   15b98:	f7fe fdb4 	bl	14704 <hal_debugger_connected>
   15b9c:	b100      	cbz	r0, 15ba0 <cmd_host_enable+0x18>
   15b9e:	be01      	bkpt	0x0001
   15ba0:	2300      	movs	r3, #0
   15ba2:	461a      	mov	r2, r3
   15ba4:	4619      	mov	r1, r3
   15ba6:	4618      	mov	r0, r3
   15ba8:	f003 f8bc 	bl	18d24 <__assert_func>

00015bac <cmd_phy_read>:
{
   15bac:	b510      	push	{r4, lr}
   15bae:	b082      	sub	sp, #8
    rc = parse_arg_all(argc - 1, argv + 1);
   15bb0:	3104      	adds	r1, #4
   15bb2:	3801      	subs	r0, #1
   15bb4:	f002 ffee 	bl	18b94 <parse_arg_all>
   15bb8:	4604      	mov	r4, r0
   15bba:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   15bbc:	b110      	cbz	r0, 15bc4 <cmd_phy_read+0x18>
}
   15bbe:	4620      	mov	r0, r4
   15bc0:	b002      	add	sp, #8
   15bc2:	bd10      	pop	{r4, pc}
    conn = parse_arg_uint16("conn", &rc);
   15bc4:	4669      	mov	r1, sp
   15bc6:	4812      	ldr	r0, [pc, #72]	; (15c10 <cmd_phy_read+0x64>)
   15bc8:	f002 fe8d 	bl	188e6 <parse_arg_uint16>
    if (rc != 0) {
   15bcc:	9b00      	ldr	r3, [sp, #0]
   15bce:	b99b      	cbnz	r3, 15bf8 <cmd_phy_read+0x4c>
    rc = ble_gap_read_le_phy(conn, &tx_phy, &rx_phy);
   15bd0:	f10d 0206 	add.w	r2, sp, #6
   15bd4:	f10d 0107 	add.w	r1, sp, #7
   15bd8:	f00c f87d 	bl	21cd6 <ble_gap_read_le_phy>
   15bdc:	4604      	mov	r4, r0
   15bde:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   15be0:	b978      	cbnz	r0, 15c02 <cmd_phy_read+0x56>
    console_printf("TX_PHY: %d\n", tx_phy);
   15be2:	f89d 1007 	ldrb.w	r1, [sp, #7]
   15be6:	480b      	ldr	r0, [pc, #44]	; (15c14 <cmd_phy_read+0x68>)
   15be8:	f006 faa0 	bl	1c12c <console_printf>
    console_printf("RX_PHY: %d\n", tx_phy);
   15bec:	f89d 1007 	ldrb.w	r1, [sp, #7]
   15bf0:	4809      	ldr	r0, [pc, #36]	; (15c18 <cmd_phy_read+0x6c>)
   15bf2:	f006 fa9b 	bl	1c12c <console_printf>
    return 0;
   15bf6:	e7e2      	b.n	15bbe <cmd_phy_read+0x12>
        console_printf("invalid 'conn' parameter\n");
   15bf8:	4808      	ldr	r0, [pc, #32]	; (15c1c <cmd_phy_read+0x70>)
   15bfa:	f006 fa97 	bl	1c12c <console_printf>
        return rc;
   15bfe:	9c00      	ldr	r4, [sp, #0]
   15c00:	e7dd      	b.n	15bbe <cmd_phy_read+0x12>
        console_printf("Could not read PHY error: %d\n", rc);
   15c02:	4601      	mov	r1, r0
   15c04:	4806      	ldr	r0, [pc, #24]	; (15c20 <cmd_phy_read+0x74>)
   15c06:	f006 fa91 	bl	1c12c <console_printf>
        return rc;
   15c0a:	9c00      	ldr	r4, [sp, #0]
   15c0c:	e7d7      	b.n	15bbe <cmd_phy_read+0x12>
   15c0e:	bf00      	nop
   15c10:	000305d8 	.word	0x000305d8
   15c14:	0003061c 	.word	0x0003061c
   15c18:	00030628 	.word	0x00030628
   15c1c:	000305e0 	.word	0x000305e0
   15c20:	000305fc 	.word	0x000305fc

00015c24 <cmd_phy_set_default>:
{
   15c24:	b510      	push	{r4, lr}
   15c26:	b082      	sub	sp, #8
    rc = parse_arg_all(argc - 1, argv + 1);
   15c28:	3104      	adds	r1, #4
   15c2a:	3801      	subs	r0, #1
   15c2c:	f002 ffb2 	bl	18b94 <parse_arg_all>
   15c30:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   15c32:	b108      	cbz	r0, 15c38 <cmd_phy_set_default+0x14>
}
   15c34:	b002      	add	sp, #8
   15c36:	bd10      	pop	{r4, pc}
    tx_phys_mask = parse_arg_uint8("tx_phys_mask", &rc);
   15c38:	a901      	add	r1, sp, #4
   15c3a:	480d      	ldr	r0, [pc, #52]	; (15c70 <cmd_phy_set_default+0x4c>)
   15c3c:	f002 fe4b 	bl	188d6 <parse_arg_uint8>
   15c40:	4604      	mov	r4, r0
    if (rc != 0) {
   15c42:	9b01      	ldr	r3, [sp, #4]
   15c44:	b953      	cbnz	r3, 15c5c <cmd_phy_set_default+0x38>
    rx_phys_mask = parse_arg_uint8("rx_phys_mask", &rc);
   15c46:	a901      	add	r1, sp, #4
   15c48:	480a      	ldr	r0, [pc, #40]	; (15c74 <cmd_phy_set_default+0x50>)
   15c4a:	f002 fe44 	bl	188d6 <parse_arg_uint8>
   15c4e:	4601      	mov	r1, r0
    if (rc != 0) {
   15c50:	9b01      	ldr	r3, [sp, #4]
   15c52:	b943      	cbnz	r3, 15c66 <cmd_phy_set_default+0x42>
    return ble_gap_set_prefered_default_le_phy(tx_phys_mask, rx_phys_mask);
   15c54:	4620      	mov	r0, r4
   15c56:	f00c f868 	bl	21d2a <ble_gap_set_prefered_default_le_phy>
   15c5a:	e7eb      	b.n	15c34 <cmd_phy_set_default+0x10>
        console_printf("invalid 'tx_phys_mask' parameter\n");
   15c5c:	4806      	ldr	r0, [pc, #24]	; (15c78 <cmd_phy_set_default+0x54>)
   15c5e:	f006 fa65 	bl	1c12c <console_printf>
        return rc;
   15c62:	9801      	ldr	r0, [sp, #4]
   15c64:	e7e6      	b.n	15c34 <cmd_phy_set_default+0x10>
        console_printf("invalid 'rx_phys_mask' parameter\n");
   15c66:	4805      	ldr	r0, [pc, #20]	; (15c7c <cmd_phy_set_default+0x58>)
   15c68:	f006 fa60 	bl	1c12c <console_printf>
        return rc;
   15c6c:	9801      	ldr	r0, [sp, #4]
   15c6e:	e7e1      	b.n	15c34 <cmd_phy_set_default+0x10>
   15c70:	00030634 	.word	0x00030634
   15c74:	00030668 	.word	0x00030668
   15c78:	00030644 	.word	0x00030644
   15c7c:	00030678 	.word	0x00030678

00015c80 <cmd_phy_set>:
{
   15c80:	b570      	push	{r4, r5, r6, lr}
   15c82:	b082      	sub	sp, #8
    rc = parse_arg_all(argc - 1, argv + 1);
   15c84:	3104      	adds	r1, #4
   15c86:	3801      	subs	r0, #1
   15c88:	f002 ff84 	bl	18b94 <parse_arg_all>
   15c8c:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   15c8e:	b108      	cbz	r0, 15c94 <cmd_phy_set+0x14>
}
   15c90:	b002      	add	sp, #8
   15c92:	bd70      	pop	{r4, r5, r6, pc}
    conn = parse_arg_uint16("conn", &rc);
   15c94:	a901      	add	r1, sp, #4
   15c96:	481a      	ldr	r0, [pc, #104]	; (15d00 <cmd_phy_set+0x80>)
   15c98:	f002 fe25 	bl	188e6 <parse_arg_uint16>
   15c9c:	4604      	mov	r4, r0
    if (rc != 0) {
   15c9e:	9b01      	ldr	r3, [sp, #4]
   15ca0:	b9d3      	cbnz	r3, 15cd8 <cmd_phy_set+0x58>
    tx_phys_mask = parse_arg_uint8("tx_phys_mask", &rc);
   15ca2:	a901      	add	r1, sp, #4
   15ca4:	4817      	ldr	r0, [pc, #92]	; (15d04 <cmd_phy_set+0x84>)
   15ca6:	f002 fe16 	bl	188d6 <parse_arg_uint8>
   15caa:	4606      	mov	r6, r0
    if (rc != 0) {
   15cac:	9b01      	ldr	r3, [sp, #4]
   15cae:	b9c3      	cbnz	r3, 15ce2 <cmd_phy_set+0x62>
    rx_phys_mask = parse_arg_uint8("rx_phys_mask", &rc);
   15cb0:	a901      	add	r1, sp, #4
   15cb2:	4815      	ldr	r0, [pc, #84]	; (15d08 <cmd_phy_set+0x88>)
   15cb4:	f002 fe0f 	bl	188d6 <parse_arg_uint8>
   15cb8:	4605      	mov	r5, r0
    if (rc != 0) {
   15cba:	9b01      	ldr	r3, [sp, #4]
   15cbc:	b9b3      	cbnz	r3, 15cec <cmd_phy_set+0x6c>
    phy_opts = parse_arg_uint16("phy_opts", &rc);
   15cbe:	a901      	add	r1, sp, #4
   15cc0:	4812      	ldr	r0, [pc, #72]	; (15d0c <cmd_phy_set+0x8c>)
   15cc2:	f002 fe10 	bl	188e6 <parse_arg_uint16>
   15cc6:	4603      	mov	r3, r0
    if (rc != 0) {
   15cc8:	9a01      	ldr	r2, [sp, #4]
   15cca:	b9a2      	cbnz	r2, 15cf6 <cmd_phy_set+0x76>
    return ble_gap_set_prefered_le_phy(conn, tx_phys_mask, rx_phys_mask,
   15ccc:	462a      	mov	r2, r5
   15cce:	4631      	mov	r1, r6
   15cd0:	4620      	mov	r0, r4
   15cd2:	f00c f855 	bl	21d80 <ble_gap_set_prefered_le_phy>
   15cd6:	e7db      	b.n	15c90 <cmd_phy_set+0x10>
        console_printf("invalid 'conn' parameter\n");
   15cd8:	480d      	ldr	r0, [pc, #52]	; (15d10 <cmd_phy_set+0x90>)
   15cda:	f006 fa27 	bl	1c12c <console_printf>
        return rc;
   15cde:	9801      	ldr	r0, [sp, #4]
   15ce0:	e7d6      	b.n	15c90 <cmd_phy_set+0x10>
        console_printf("invalid 'tx_phys_mask' parameter\n");
   15ce2:	480c      	ldr	r0, [pc, #48]	; (15d14 <cmd_phy_set+0x94>)
   15ce4:	f006 fa22 	bl	1c12c <console_printf>
        return rc;
   15ce8:	9801      	ldr	r0, [sp, #4]
   15cea:	e7d1      	b.n	15c90 <cmd_phy_set+0x10>
        console_printf("invalid 'rx_phys_mask' parameter\n");
   15cec:	480a      	ldr	r0, [pc, #40]	; (15d18 <cmd_phy_set+0x98>)
   15cee:	f006 fa1d 	bl	1c12c <console_printf>
        return rc;
   15cf2:	9801      	ldr	r0, [sp, #4]
   15cf4:	e7cc      	b.n	15c90 <cmd_phy_set+0x10>
        console_printf("invalid 'phy_opts' parameter\n");
   15cf6:	4809      	ldr	r0, [pc, #36]	; (15d1c <cmd_phy_set+0x9c>)
   15cf8:	f006 fa18 	bl	1c12c <console_printf>
        return rc;
   15cfc:	9801      	ldr	r0, [sp, #4]
   15cfe:	e7c7      	b.n	15c90 <cmd_phy_set+0x10>
   15d00:	000305d8 	.word	0x000305d8
   15d04:	00030634 	.word	0x00030634
   15d08:	00030668 	.word	0x00030668
   15d0c:	0003069c 	.word	0x0003069c
   15d10:	000305e0 	.word	0x000305e0
   15d14:	00030644 	.word	0x00030644
   15d18:	00030678 	.word	0x00030678
   15d1c:	000306a8 	.word	0x000306a8

00015d20 <cmd_test_tx>:
{
   15d20:	b570      	push	{r4, r5, r6, lr}
   15d22:	b082      	sub	sp, #8
    rc = parse_arg_all(argc - 1, argv + 1);
   15d24:	3104      	adds	r1, #4
   15d26:	3801      	subs	r0, #1
   15d28:	f002 ff34 	bl	18b94 <parse_arg_all>
   15d2c:	4604      	mov	r4, r0
   15d2e:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   15d30:	b110      	cbz	r0, 15d38 <cmd_test_tx+0x18>
}
   15d32:	4620      	mov	r0, r4
   15d34:	b002      	add	sp, #8
   15d36:	bd70      	pop	{r4, r5, r6, pc}
    stop = parse_arg_uint8_dflt("stop", 0, &rc);
   15d38:	aa01      	add	r2, sp, #4
   15d3a:	2100      	movs	r1, #0
   15d3c:	4827      	ldr	r0, [pc, #156]	; (15ddc <cmd_test_tx+0xbc>)
   15d3e:	f002 fe03 	bl	18948 <parse_arg_uint8_dflt>
    if (rc != 0) {
   15d42:	9c01      	ldr	r4, [sp, #4]
   15d44:	bb4c      	cbnz	r4, 15d9a <cmd_test_tx+0x7a>
    if (stop) {
   15d46:	bb68      	cbnz	r0, 15da4 <cmd_test_tx+0x84>
    conn = parse_arg_uint16("conn", &rc);
   15d48:	a901      	add	r1, sp, #4
   15d4a:	4825      	ldr	r0, [pc, #148]	; (15de0 <cmd_test_tx+0xc0>)
   15d4c:	f002 fdcb 	bl	188e6 <parse_arg_uint16>
   15d50:	4605      	mov	r5, r0
    if (rc != 0) {
   15d52:	9b01      	ldr	r3, [sp, #4]
   15d54:	bb4b      	cbnz	r3, 15daa <cmd_test_tx+0x8a>
    len = parse_arg_uint16("length", &rc);
   15d56:	a901      	add	r1, sp, #4
   15d58:	4822      	ldr	r0, [pc, #136]	; (15de4 <cmd_test_tx+0xc4>)
   15d5a:	f002 fdc4 	bl	188e6 <parse_arg_uint16>
   15d5e:	4604      	mov	r4, r0
    if (rc != 0) {
   15d60:	9b01      	ldr	r3, [sp, #4]
   15d62:	bb3b      	cbnz	r3, 15db4 <cmd_test_tx+0x94>
    if ((len > 251) || (len < 4)) {
   15d64:	1f03      	subs	r3, r0, #4
   15d66:	b29b      	uxth	r3, r3
   15d68:	2bf7      	cmp	r3, #247	; 0xf7
   15d6a:	d828      	bhi.n	15dbe <cmd_test_tx+0x9e>
    rate = parse_arg_uint16_dflt("rate", 1, &rc);
   15d6c:	aa01      	add	r2, sp, #4
   15d6e:	2101      	movs	r1, #1
   15d70:	481d      	ldr	r0, [pc, #116]	; (15de8 <cmd_test_tx+0xc8>)
   15d72:	f002 fdfb 	bl	1896c <parse_arg_uint16_dflt>
   15d76:	4606      	mov	r6, r0
    if (rc != 0) {
   15d78:	9b01      	ldr	r3, [sp, #4]
   15d7a:	bb23      	cbnz	r3, 15dc6 <cmd_test_tx+0xa6>
    num = parse_arg_uint16_dflt("num", 1, &rc);
   15d7c:	aa01      	add	r2, sp, #4
   15d7e:	2101      	movs	r1, #1
   15d80:	481a      	ldr	r0, [pc, #104]	; (15dec <cmd_test_tx+0xcc>)
   15d82:	f002 fdf3 	bl	1896c <parse_arg_uint16_dflt>
   15d86:	4603      	mov	r3, r0
    if (rc != 0) {
   15d88:	9a01      	ldr	r2, [sp, #4]
   15d8a:	bb0a      	cbnz	r2, 15dd0 <cmd_test_tx+0xb0>
    rc = btshell_tx_start(conn, len, rate, num);
   15d8c:	4632      	mov	r2, r6
   15d8e:	4621      	mov	r1, r4
   15d90:	4628      	mov	r0, r5
   15d92:	f7ff fd11 	bl	157b8 <btshell_tx_start>
   15d96:	4604      	mov	r4, r0
    return rc;
   15d98:	e7cb      	b.n	15d32 <cmd_test_tx+0x12>
        console_printf("invalid 'stop' parameter\n");
   15d9a:	4815      	ldr	r0, [pc, #84]	; (15df0 <cmd_test_tx+0xd0>)
   15d9c:	f006 f9c6 	bl	1c12c <console_printf>
        return rc;
   15da0:	9c01      	ldr	r4, [sp, #4]
   15da2:	e7c6      	b.n	15d32 <cmd_test_tx+0x12>
        btshell_tx_stop();
   15da4:	f7ff fd3e 	bl	15824 <btshell_tx_stop>
        return 0;
   15da8:	e7c3      	b.n	15d32 <cmd_test_tx+0x12>
        console_printf("invalid 'conn' parameter\n");
   15daa:	4812      	ldr	r0, [pc, #72]	; (15df4 <cmd_test_tx+0xd4>)
   15dac:	f006 f9be 	bl	1c12c <console_printf>
        return rc;
   15db0:	9c01      	ldr	r4, [sp, #4]
   15db2:	e7be      	b.n	15d32 <cmd_test_tx+0x12>
        console_printf("invalid 'length' parameter\n");
   15db4:	4810      	ldr	r0, [pc, #64]	; (15df8 <cmd_test_tx+0xd8>)
   15db6:	f006 f9b9 	bl	1c12c <console_printf>
        return rc;
   15dba:	9c01      	ldr	r4, [sp, #4]
   15dbc:	e7b9      	b.n	15d32 <cmd_test_tx+0x12>
        console_printf("error: len must be between 4 and 251, inclusive");
   15dbe:	480f      	ldr	r0, [pc, #60]	; (15dfc <cmd_test_tx+0xdc>)
   15dc0:	f006 f9b4 	bl	1c12c <console_printf>
   15dc4:	e7d2      	b.n	15d6c <cmd_test_tx+0x4c>
        console_printf("invalid 'rate' parameter\n");
   15dc6:	480e      	ldr	r0, [pc, #56]	; (15e00 <cmd_test_tx+0xe0>)
   15dc8:	f006 f9b0 	bl	1c12c <console_printf>
        return rc;
   15dcc:	9c01      	ldr	r4, [sp, #4]
   15dce:	e7b0      	b.n	15d32 <cmd_test_tx+0x12>
        console_printf("invalid 'num' parameter\n");
   15dd0:	480c      	ldr	r0, [pc, #48]	; (15e04 <cmd_test_tx+0xe4>)
   15dd2:	f006 f9ab 	bl	1c12c <console_printf>
        return rc;
   15dd6:	9c01      	ldr	r4, [sp, #4]
   15dd8:	e7ab      	b.n	15d32 <cmd_test_tx+0x12>
   15dda:	bf00      	nop
   15ddc:	000306c8 	.word	0x000306c8
   15de0:	000305d8 	.word	0x000305d8
   15de4:	000306ec 	.word	0x000306ec
   15de8:	00030740 	.word	0x00030740
   15dec:	00030764 	.word	0x00030764
   15df0:	000306d0 	.word	0x000306d0
   15df4:	000305e0 	.word	0x000305e0
   15df8:	000306f4 	.word	0x000306f4
   15dfc:	00030710 	.word	0x00030710
   15e00:	00030748 	.word	0x00030748
   15e04:	00030768 	.word	0x00030768

00015e08 <cmd_keystore_show>:
{
   15e08:	b510      	push	{r4, lr}
   15e0a:	b082      	sub	sp, #8
    rc = parse_arg_all(argc - 1, argv + 1);
   15e0c:	3104      	adds	r1, #4
   15e0e:	3801      	subs	r0, #1
   15e10:	f002 fec0 	bl	18b94 <parse_arg_all>
   15e14:	4604      	mov	r4, r0
   15e16:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   15e18:	b110      	cbz	r0, 15e20 <cmd_keystore_show+0x18>
}
   15e1a:	4620      	mov	r0, r4
   15e1c:	b002      	add	sp, #8
   15e1e:	bd10      	pop	{r4, pc}
    type = parse_arg_kv("type", cmd_keystore_entry_type, &rc);
   15e20:	aa01      	add	r2, sp, #4
   15e22:	4908      	ldr	r1, [pc, #32]	; (15e44 <cmd_keystore_show+0x3c>)
   15e24:	4808      	ldr	r0, [pc, #32]	; (15e48 <cmd_keystore_show+0x40>)
   15e26:	f002 fded 	bl	18a04 <parse_arg_kv>
    if (rc != 0) {
   15e2a:	9c01      	ldr	r4, [sp, #4]
   15e2c:	b924      	cbnz	r4, 15e38 <cmd_keystore_show+0x30>
    ble_store_iterate(type, &cmd_keystore_iterator, NULL);
   15e2e:	2200      	movs	r2, #0
   15e30:	4906      	ldr	r1, [pc, #24]	; (15e4c <cmd_keystore_show+0x44>)
   15e32:	f013 fcef 	bl	29814 <ble_store_iterate>
    return 0;
   15e36:	e7f0      	b.n	15e1a <cmd_keystore_show+0x12>
        console_printf("invalid 'type' parameter\n");
   15e38:	4805      	ldr	r0, [pc, #20]	; (15e50 <cmd_keystore_show+0x48>)
   15e3a:	f006 f977 	bl	1c12c <console_printf>
        return rc;
   15e3e:	9c01      	ldr	r4, [sp, #4]
   15e40:	e7eb      	b.n	15e1a <cmd_keystore_show+0x12>
   15e42:	bf00      	nop
   15e44:	00032fb0 	.word	0x00032fb0
   15e48:	00030784 	.word	0x00030784
   15e4c:	00015e55 	.word	0x00015e55
   15e50:	0003078c 	.word	0x0003078c

00015e54 <cmd_keystore_iterator>:
                      void *cookie) {
   15e54:	b530      	push	{r4, r5, lr}
   15e56:	b083      	sub	sp, #12
   15e58:	460c      	mov	r4, r1
    switch (obj_type) {
   15e5a:	2802      	cmp	r0, #2
   15e5c:	dd1f      	ble.n	15e9e <cmd_keystore_iterator+0x4a>
   15e5e:	2803      	cmp	r0, #3
   15e60:	d11f      	bne.n	15ea2 <cmd_keystore_iterator+0x4e>
            console_printf("Key: ");
   15e62:	483e      	ldr	r0, [pc, #248]	; (15f5c <cmd_keystore_iterator+0x108>)
   15e64:	f006 f962 	bl	1c12c <console_printf>
            console_printf("addr_type=%u ", val->cccd.peer_addr.type);
   15e68:	4625      	mov	r5, r4
   15e6a:	f815 1b01 	ldrb.w	r1, [r5], #1
   15e6e:	483c      	ldr	r0, [pc, #240]	; (15f60 <cmd_keystore_iterator+0x10c>)
   15e70:	f006 f95c 	bl	1c12c <console_printf>
            print_addr(val->cccd.peer_addr.val);
   15e74:	4628      	mov	r0, r5
   15e76:	f7ff fda7 	bl	159c8 <print_addr>
            console_printf("\n");
   15e7a:	483a      	ldr	r0, [pc, #232]	; (15f64 <cmd_keystore_iterator+0x110>)
   15e7c:	f006 f956 	bl	1c12c <console_printf>
            console_printf("    char_val_handle: %d\n", val->cccd.chr_val_handle);
   15e80:	8921      	ldrh	r1, [r4, #8]
   15e82:	4839      	ldr	r0, [pc, #228]	; (15f68 <cmd_keystore_iterator+0x114>)
   15e84:	f006 f952 	bl	1c12c <console_printf>
            console_printf("    flags:           0x%02x\n", val->cccd.flags);
   15e88:	8961      	ldrh	r1, [r4, #10]
   15e8a:	4838      	ldr	r0, [pc, #224]	; (15f6c <cmd_keystore_iterator+0x118>)
   15e8c:	f006 f94e 	bl	1c12c <console_printf>
            console_printf("    changed:         %d\n", val->cccd.value_changed);
   15e90:	7b21      	ldrb	r1, [r4, #12]
   15e92:	f001 0101 	and.w	r1, r1, #1
   15e96:	4836      	ldr	r0, [pc, #216]	; (15f70 <cmd_keystore_iterator+0x11c>)
   15e98:	f006 f948 	bl	1c12c <console_printf>
            break;
   15e9c:	e001      	b.n	15ea2 <cmd_keystore_iterator+0x4e>
    switch (obj_type) {
   15e9e:	2800      	cmp	r0, #0
   15ea0:	dc02      	bgt.n	15ea8 <cmd_keystore_iterator+0x54>
}
   15ea2:	2000      	movs	r0, #0
   15ea4:	b003      	add	sp, #12
   15ea6:	bd30      	pop	{r4, r5, pc}
            console_printf("Key: ");
   15ea8:	482c      	ldr	r0, [pc, #176]	; (15f5c <cmd_keystore_iterator+0x108>)
   15eaa:	f006 f93f 	bl	1c12c <console_printf>
            if (ble_addr_cmp(&val->sec.peer_addr, BLE_ADDR_ANY) == 0) {
   15eae:	2300      	movs	r3, #0
   15eb0:	9300      	str	r3, [sp, #0]
   15eb2:	f8cd 3003 	str.w	r3, [sp, #3]

static inline int ble_addr_cmp(const ble_addr_t *a, const ble_addr_t *b)
{
    int type_diff;

    type_diff = a->type - b->type;
   15eb6:	7825      	ldrb	r5, [r4, #0]
    if (type_diff != 0) {
   15eb8:	bb6d      	cbnz	r5, 15f16 <cmd_keystore_iterator+0xc2>
        return type_diff;
    }

    return memcmp(a->val, b->val, sizeof(a->val));
   15eba:	2206      	movs	r2, #6
   15ebc:	f10d 0101 	add.w	r1, sp, #1
   15ec0:	1c60      	adds	r0, r4, #1
   15ec2:	f004 feb3 	bl	1ac2c <memcmp>
   15ec6:	bb40      	cbnz	r0, 15f1a <cmd_keystore_iterator+0xc6>
                console_printf("ediv=%u ", val->sec.ediv);
   15ec8:	8921      	ldrh	r1, [r4, #8]
   15eca:	482a      	ldr	r0, [pc, #168]	; (15f74 <cmd_keystore_iterator+0x120>)
   15ecc:	f006 f92e 	bl	1c12c <console_printf>
                console_printf("ediv=%llu ", val->sec.rand_num);
   15ed0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   15ed4:	4828      	ldr	r0, [pc, #160]	; (15f78 <cmd_keystore_iterator+0x124>)
   15ed6:	f006 f929 	bl	1c12c <console_printf>
            console_printf("\n");
   15eda:	4822      	ldr	r0, [pc, #136]	; (15f64 <cmd_keystore_iterator+0x110>)
   15edc:	f006 f926 	bl	1c12c <console_printf>
            if (val->sec.ltk_present) {
   15ee0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   15ee4:	f013 0f01 	tst.w	r3, #1
   15ee8:	d11f      	bne.n	15f2a <cmd_keystore_iterator+0xd6>
            if (val->sec.irk_present) {
   15eea:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   15eee:	f013 0f01 	tst.w	r3, #1
   15ef2:	d126      	bne.n	15f42 <cmd_keystore_iterator+0xee>
            if (val->sec.csrk_present) {
   15ef4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   15ef8:	f013 0f01 	tst.w	r3, #1
   15efc:	d0d1      	beq.n	15ea2 <cmd_keystore_iterator+0x4e>
                console_printf("    CSRK: ");
   15efe:	481f      	ldr	r0, [pc, #124]	; (15f7c <cmd_keystore_iterator+0x128>)
   15f00:	f006 f914 	bl	1c12c <console_printf>
                print_bytes(val->sec.csrk, 16);
   15f04:	2110      	movs	r1, #16
   15f06:	f104 003a 	add.w	r0, r4, #58	; 0x3a
   15f0a:	f7ff fd31 	bl	15970 <print_bytes>
                console_printf("\n");
   15f0e:	4815      	ldr	r0, [pc, #84]	; (15f64 <cmd_keystore_iterator+0x110>)
   15f10:	f006 f90c 	bl	1c12c <console_printf>
   15f14:	e7c5      	b.n	15ea2 <cmd_keystore_iterator+0x4e>
        return type_diff;
   15f16:	4628      	mov	r0, r5
   15f18:	e7d5      	b.n	15ec6 <cmd_keystore_iterator+0x72>
                console_printf("addr_type=%u ", val->sec.peer_addr.type);
   15f1a:	4629      	mov	r1, r5
   15f1c:	4810      	ldr	r0, [pc, #64]	; (15f60 <cmd_keystore_iterator+0x10c>)
   15f1e:	f006 f905 	bl	1c12c <console_printf>
                print_addr(val->sec.peer_addr.val);
   15f22:	1c60      	adds	r0, r4, #1
   15f24:	f7ff fd50 	bl	159c8 <print_addr>
   15f28:	e7d7      	b.n	15eda <cmd_keystore_iterator+0x86>
                console_printf("    LTK: ");
   15f2a:	4815      	ldr	r0, [pc, #84]	; (15f80 <cmd_keystore_iterator+0x12c>)
   15f2c:	f006 f8fe 	bl	1c12c <console_printf>
                print_bytes(val->sec.ltk, 16);
   15f30:	2110      	movs	r1, #16
   15f32:	f104 0018 	add.w	r0, r4, #24
   15f36:	f7ff fd1b 	bl	15970 <print_bytes>
                console_printf("\n");
   15f3a:	480a      	ldr	r0, [pc, #40]	; (15f64 <cmd_keystore_iterator+0x110>)
   15f3c:	f006 f8f6 	bl	1c12c <console_printf>
   15f40:	e7d3      	b.n	15eea <cmd_keystore_iterator+0x96>
                console_printf("    IRK: ");
   15f42:	4810      	ldr	r0, [pc, #64]	; (15f84 <cmd_keystore_iterator+0x130>)
   15f44:	f006 f8f2 	bl	1c12c <console_printf>
                print_bytes(val->sec.irk, 16);
   15f48:	2110      	movs	r1, #16
   15f4a:	f104 0029 	add.w	r0, r4, #41	; 0x29
   15f4e:	f7ff fd0f 	bl	15970 <print_bytes>
                console_printf("\n");
   15f52:	4804      	ldr	r0, [pc, #16]	; (15f64 <cmd_keystore_iterator+0x110>)
   15f54:	f006 f8ea 	bl	1c12c <console_printf>
   15f58:	e7cc      	b.n	15ef4 <cmd_keystore_iterator+0xa0>
   15f5a:	bf00      	nop
   15f5c:	000307a8 	.word	0x000307a8
   15f60:	000307c8 	.word	0x000307c8
   15f64:	0002ff28 	.word	0x0002ff28
   15f68:	000307fc 	.word	0x000307fc
   15f6c:	00030818 	.word	0x00030818
   15f70:	00030838 	.word	0x00030838
   15f74:	000307b0 	.word	0x000307b0
   15f78:	000307bc 	.word	0x000307bc
   15f7c:	000307f0 	.word	0x000307f0
   15f80:	000307d8 	.word	0x000307d8
   15f84:	000307e4 	.word	0x000307e4

00015f88 <parse_dev_addr>:
{
   15f88:	b5f0      	push	{r4, r5, r6, r7, lr}
   15f8a:	b08b      	sub	sp, #44	; 0x2c
   15f8c:	460f      	mov	r7, r1
   15f8e:	4616      	mov	r6, r2
    if (!prefix) {
   15f90:	b148      	cbz	r0, 15fa6 <parse_dev_addr+0x1e>
   15f92:	4603      	mov	r3, r0
        written = snprintf(name, sizeof(name) - 1, "%s", prefix);
   15f94:	4a23      	ldr	r2, [pc, #140]	; (16024 <parse_dev_addr+0x9c>)
   15f96:	211f      	movs	r1, #31
   15f98:	a802      	add	r0, sp, #8
   15f9a:	f005 fa6c 	bl	1b476 <snprintf>
        if (written >= sizeof(name) || written < 0) {
   15f9e:	281f      	cmp	r0, #31
   15fa0:	d903      	bls.n	15faa <parse_dev_addr+0x22>
            return EINVAL;
   15fa2:	2416      	movs	r4, #22
   15fa4:	e03a      	b.n	1601c <parse_dev_addr+0x94>
        name[0] = '\0';
   15fa6:	f88d 0008 	strb.w	r0, [sp, #8]
    written = snprintf(name + written, sizeof(name) - written - 1, "%s", "addr");
   15faa:	4b1f      	ldr	r3, [pc, #124]	; (16028 <parse_dev_addr+0xa0>)
   15fac:	4a1d      	ldr	r2, [pc, #116]	; (16024 <parse_dev_addr+0x9c>)
   15fae:	f1c0 011f 	rsb	r1, r0, #31
   15fb2:	ac02      	add	r4, sp, #8
   15fb4:	4420      	add	r0, r4
   15fb6:	f005 fa5e 	bl	1b476 <snprintf>
   15fba:	4605      	mov	r5, r0
    if (written >= sizeof(name) || written < 0) {
   15fbc:	281f      	cmp	r0, #31
   15fbe:	d82c      	bhi.n	1601a <parse_dev_addr+0x92>
    rc = parse_arg_addr(name, addr);
   15fc0:	4631      	mov	r1, r6
   15fc2:	a802      	add	r0, sp, #8
   15fc4:	f002 fd7c 	bl	18ac0 <parse_arg_addr>
   15fc8:	4604      	mov	r4, r0
   15fca:	9001      	str	r0, [sp, #4]
    if (rc == ENOENT) {
   15fcc:	2802      	cmp	r0, #2
   15fce:	d025      	beq.n	1601c <parse_dev_addr+0x94>
    } else if (rc == EAGAIN) {
   15fd0:	280b      	cmp	r0, #11
   15fd2:	d00e      	beq.n	15ff2 <parse_dev_addr+0x6a>
    } else if (rc != 0) {
   15fd4:	bb10      	cbnz	r0, 1601c <parse_dev_addr+0x94>
        written = snprintf(name + written, sizeof(name) - written, "%s", "_type");
   15fd6:	4b15      	ldr	r3, [pc, #84]	; (1602c <parse_dev_addr+0xa4>)
   15fd8:	4a12      	ldr	r2, [pc, #72]	; (16024 <parse_dev_addr+0x9c>)
   15fda:	f1c5 0120 	rsb	r1, r5, #32
   15fde:	a802      	add	r0, sp, #8
   15fe0:	4428      	add	r0, r5
   15fe2:	f005 fa48 	bl	1b476 <snprintf>
        if (parse_arg_extract(name)) {
   15fe6:	a802      	add	r0, sp, #8
   15fe8:	f002 fbb8 	bl	1875c <parse_arg_extract>
   15fec:	b1b0      	cbz	r0, 1601c <parse_dev_addr+0x94>
            return E2BIG;
   15fee:	2407      	movs	r4, #7
   15ff0:	e014      	b.n	1601c <parse_dev_addr+0x94>
        written = snprintf(name + written, sizeof(name) - written - 1, "%s", "_type");
   15ff2:	4b0e      	ldr	r3, [pc, #56]	; (1602c <parse_dev_addr+0xa4>)
   15ff4:	4a0b      	ldr	r2, [pc, #44]	; (16024 <parse_dev_addr+0x9c>)
   15ff6:	f1c5 011f 	rsb	r1, r5, #31
   15ffa:	a802      	add	r0, sp, #8
   15ffc:	4428      	add	r0, r5
   15ffe:	f005 fa3a 	bl	1b476 <snprintf>
        addr->type = parse_arg_kv(name, addr_types, &rc);
   16002:	aa01      	add	r2, sp, #4
   16004:	4639      	mov	r1, r7
   16006:	a802      	add	r0, sp, #8
   16008:	f002 fcfc 	bl	18a04 <parse_arg_kv>
   1600c:	7030      	strb	r0, [r6, #0]
        if (rc == ENOENT) {
   1600e:	9c01      	ldr	r4, [sp, #4]
   16010:	2c02      	cmp	r4, #2
   16012:	d103      	bne.n	1601c <parse_dev_addr+0x94>
            addr->type = BLE_ADDR_PUBLIC;
   16014:	2400      	movs	r4, #0
   16016:	7034      	strb	r4, [r6, #0]
   16018:	e000      	b.n	1601c <parse_dev_addr+0x94>
        return EINVAL;
   1601a:	2416      	movs	r4, #22
}
   1601c:	4620      	mov	r0, r4
   1601e:	b00b      	add	sp, #44	; 0x2c
   16020:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16022:	bf00      	nop
   16024:	00030424 	.word	0x00030424
   16028:	00030854 	.word	0x00030854
   1602c:	000311a4 	.word	0x000311a4

00016030 <cmd_keystore_parse_keydata>:
{
   16030:	b530      	push	{r4, r5, lr}
   16032:	b083      	sub	sp, #12
   16034:	4614      	mov	r4, r2
   16036:	461d      	mov	r5, r3
    memset(out, 0, sizeof(*out));
   16038:	2220      	movs	r2, #32
   1603a:	2100      	movs	r1, #0
   1603c:	4620      	mov	r0, r4
   1603e:	f004 fe3e 	bl	1acbe <memset>
    *obj_type = parse_arg_kv("type", cmd_keystore_entry_type, &rc);
   16042:	aa01      	add	r2, sp, #4
   16044:	491b      	ldr	r1, [pc, #108]	; (160b4 <cmd_keystore_parse_keydata+0x84>)
   16046:	481c      	ldr	r0, [pc, #112]	; (160b8 <cmd_keystore_parse_keydata+0x88>)
   16048:	f002 fcdc 	bl	18a04 <parse_arg_kv>
   1604c:	6028      	str	r0, [r5, #0]
    if (rc != 0) {
   1604e:	9b01      	ldr	r3, [sp, #4]
   16050:	b92b      	cbnz	r3, 1605e <cmd_keystore_parse_keydata+0x2e>
    switch (*obj_type) {
   16052:	3801      	subs	r0, #1
   16054:	2801      	cmp	r0, #1
   16056:	d907      	bls.n	16068 <cmd_keystore_parse_keydata+0x38>
        return EINVAL;
   16058:	2016      	movs	r0, #22
}
   1605a:	b003      	add	sp, #12
   1605c:	bd30      	pop	{r4, r5, pc}
        console_printf("invalid 'type' parameter\n");
   1605e:	4817      	ldr	r0, [pc, #92]	; (160bc <cmd_keystore_parse_keydata+0x8c>)
   16060:	f006 f864 	bl	1c12c <console_printf>
        return rc;
   16064:	9801      	ldr	r0, [sp, #4]
   16066:	e7f8      	b.n	1605a <cmd_keystore_parse_keydata+0x2a>
        rc = parse_dev_addr(NULL, cmd_addr_type, &out->sec.peer_addr);
   16068:	4622      	mov	r2, r4
   1606a:	4915      	ldr	r1, [pc, #84]	; (160c0 <cmd_keystore_parse_keydata+0x90>)
   1606c:	2000      	movs	r0, #0
   1606e:	f7ff ff8b 	bl	15f88 <parse_dev_addr>
   16072:	9001      	str	r0, [sp, #4]
        if (rc != 0) {
   16074:	b9a0      	cbnz	r0, 160a0 <cmd_keystore_parse_keydata+0x70>
        out->sec.ediv = parse_arg_uint16("ediv", &rc);
   16076:	a901      	add	r1, sp, #4
   16078:	4812      	ldr	r0, [pc, #72]	; (160c4 <cmd_keystore_parse_keydata+0x94>)
   1607a:	f002 fc34 	bl	188e6 <parse_arg_uint16>
   1607e:	8120      	strh	r0, [r4, #8]
        if (rc != 0) {
   16080:	9b01      	ldr	r3, [sp, #4]
   16082:	b993      	cbnz	r3, 160aa <cmd_keystore_parse_keydata+0x7a>
        out->sec.rand_num = parse_arg_uint64("rand", &rc);
   16084:	a901      	add	r1, sp, #4
   16086:	4810      	ldr	r0, [pc, #64]	; (160c8 <cmd_keystore_parse_keydata+0x98>)
   16088:	f002 fc4e 	bl	18928 <parse_arg_uint64>
   1608c:	e9c4 0104 	strd	r0, r1, [r4, #16]
        if (rc != 0) {
   16090:	9801      	ldr	r0, [sp, #4]
   16092:	2800      	cmp	r0, #0
   16094:	d0e1      	beq.n	1605a <cmd_keystore_parse_keydata+0x2a>
            console_printf("invalid 'rand' parameter\n");
   16096:	480d      	ldr	r0, [pc, #52]	; (160cc <cmd_keystore_parse_keydata+0x9c>)
   16098:	f006 f848 	bl	1c12c <console_printf>
            return rc;
   1609c:	9801      	ldr	r0, [sp, #4]
   1609e:	e7dc      	b.n	1605a <cmd_keystore_parse_keydata+0x2a>
            console_printf("invalid 'addr' parameter\n");
   160a0:	480b      	ldr	r0, [pc, #44]	; (160d0 <cmd_keystore_parse_keydata+0xa0>)
   160a2:	f006 f843 	bl	1c12c <console_printf>
            return rc;
   160a6:	9801      	ldr	r0, [sp, #4]
   160a8:	e7d7      	b.n	1605a <cmd_keystore_parse_keydata+0x2a>
            console_printf("invalid 'ediv' parameter\n");
   160aa:	480a      	ldr	r0, [pc, #40]	; (160d4 <cmd_keystore_parse_keydata+0xa4>)
   160ac:	f006 f83e 	bl	1c12c <console_printf>
            return rc;
   160b0:	9801      	ldr	r0, [sp, #4]
   160b2:	e7d2      	b.n	1605a <cmd_keystore_parse_keydata+0x2a>
   160b4:	00032fb0 	.word	0x00032fb0
   160b8:	00030784 	.word	0x00030784
   160bc:	0003078c 	.word	0x0003078c
   160c0:	00032f30 	.word	0x00032f30
   160c4:	00030878 	.word	0x00030878
   160c8:	0003089c 	.word	0x0003089c
   160cc:	000308a4 	.word	0x000308a4
   160d0:	0003085c 	.word	0x0003085c
   160d4:	00030880 	.word	0x00030880

000160d8 <cmd_keystore_del>:
{
   160d8:	b530      	push	{r4, r5, lr}
   160da:	b08b      	sub	sp, #44	; 0x2c
   160dc:	4604      	mov	r4, r0
   160de:	460d      	mov	r5, r1
    rc = parse_arg_all(argc - 1, argv + 1);
   160e0:	3104      	adds	r1, #4
   160e2:	3801      	subs	r0, #1
   160e4:	f002 fd56 	bl	18b94 <parse_arg_all>
    if (rc != 0) {
   160e8:	4603      	mov	r3, r0
   160ea:	b110      	cbz	r0, 160f2 <cmd_keystore_del+0x1a>
}
   160ec:	4618      	mov	r0, r3
   160ee:	b00b      	add	sp, #44	; 0x2c
   160f0:	bd30      	pop	{r4, r5, pc}
    rc = cmd_keystore_parse_keydata(argc, argv, &key, &obj_type);
   160f2:	ab01      	add	r3, sp, #4
   160f4:	aa02      	add	r2, sp, #8
   160f6:	4629      	mov	r1, r5
   160f8:	4620      	mov	r0, r4
   160fa:	f7ff ff99 	bl	16030 <cmd_keystore_parse_keydata>
    if (rc) {
   160fe:	4603      	mov	r3, r0
   16100:	2800      	cmp	r0, #0
   16102:	d1f3      	bne.n	160ec <cmd_keystore_del+0x14>
    rc = ble_store_delete(obj_type, &key);
   16104:	a902      	add	r1, sp, #8
   16106:	9801      	ldr	r0, [sp, #4]
   16108:	f013 fad6 	bl	296b8 <ble_store_delete>
   1610c:	4603      	mov	r3, r0
    return rc;
   1610e:	e7ed      	b.n	160ec <cmd_keystore_del+0x14>

00016110 <cmd_keystore_parse_valuedata>:
{
   16110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16114:	4615      	mov	r5, r2
   16116:	461e      	mov	r6, r3
   16118:	9c06      	ldr	r4, [sp, #24]
    memset(out, 0, sizeof(*out));
   1611a:	2250      	movs	r2, #80	; 0x50
   1611c:	2100      	movs	r1, #0
   1611e:	4620      	mov	r0, r4
   16120:	f004 fdcd 	bl	1acbe <memset>
    switch (obj_type) {
   16124:	3d01      	subs	r5, #1
   16126:	2d01      	cmp	r5, #1
   16128:	d865      	bhi.n	161f6 <cmd_keystore_parse_valuedata+0xe6>
            rc = parse_arg_byte_stream_exact_length("ltk", out->sec.ltk, 16);
   1612a:	f104 0718 	add.w	r7, r4, #24
   1612e:	2210      	movs	r2, #16
   16130:	4639      	mov	r1, r7
   16132:	4832      	ldr	r0, [pc, #200]	; (161fc <cmd_keystore_parse_valuedata+0xec>)
   16134:	f002 fca6 	bl	18a84 <parse_arg_byte_stream_exact_length>
            if (rc == 0) {
   16138:	4605      	mov	r5, r0
   1613a:	b348      	cbz	r0, 16190 <cmd_keystore_parse_valuedata+0x80>
            } else if (rc != ENOENT) {
   1613c:	2802      	cmp	r0, #2
   1613e:	d133      	bne.n	161a8 <cmd_keystore_parse_valuedata+0x98>
    int valcnt = 0;
   16140:	2700      	movs	r7, #0
            rc = parse_arg_byte_stream_exact_length("irk", out->sec.irk, 16);
   16142:	f104 0829 	add.w	r8, r4, #41	; 0x29
   16146:	2210      	movs	r2, #16
   16148:	4641      	mov	r1, r8
   1614a:	482d      	ldr	r0, [pc, #180]	; (16200 <cmd_keystore_parse_valuedata+0xf0>)
   1614c:	f002 fc9a 	bl	18a84 <parse_arg_byte_stream_exact_length>
            if (rc == 0) {
   16150:	4605      	mov	r5, r0
   16152:	b368      	cbz	r0, 161b0 <cmd_keystore_parse_valuedata+0xa0>
            } else if (rc != ENOENT) {
   16154:	2802      	cmp	r0, #2
   16156:	d137      	bne.n	161c8 <cmd_keystore_parse_valuedata+0xb8>
            rc = parse_arg_byte_stream_exact_length("csrk", out->sec.csrk, 16);
   16158:	f104 083a 	add.w	r8, r4, #58	; 0x3a
   1615c:	2210      	movs	r2, #16
   1615e:	4641      	mov	r1, r8
   16160:	4828      	ldr	r0, [pc, #160]	; (16204 <cmd_keystore_parse_valuedata+0xf4>)
   16162:	f002 fc8f 	bl	18a84 <parse_arg_byte_stream_exact_length>
            if (rc == 0) {
   16166:	4605      	mov	r5, r0
   16168:	b390      	cbz	r0, 161d0 <cmd_keystore_parse_valuedata+0xc0>
            } else if (rc != ENOENT) {
   1616a:	2802      	cmp	r0, #2
   1616c:	d13c      	bne.n	161e8 <cmd_keystore_parse_valuedata+0xd8>
            out->sec.peer_addr = key->sec.peer_addr;
   1616e:	e896 0003 	ldmia.w	r6, {r0, r1}
   16172:	6020      	str	r0, [r4, #0]
   16174:	80a1      	strh	r1, [r4, #4]
   16176:	0c09      	lsrs	r1, r1, #16
   16178:	71a1      	strb	r1, [r4, #6]
            out->sec.ediv = key->sec.ediv;
   1617a:	8933      	ldrh	r3, [r6, #8]
   1617c:	8123      	strh	r3, [r4, #8]
            out->sec.rand_num = key->sec.rand_num;
   1617e:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
   16182:	e9c4 2304 	strd	r2, r3, [r4, #16]
    if (valcnt) {
   16186:	b39f      	cbz	r7, 161f0 <cmd_keystore_parse_valuedata+0xe0>
        return 0;
   16188:	2500      	movs	r5, #0
}
   1618a:	4628      	mov	r0, r5
   1618c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                out->sec.ltk_present = 1;
   16190:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   16194:	f043 0301 	orr.w	r3, r3, #1
   16198:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
                swap_in_place(out->sec.ltk, 16);
   1619c:	2110      	movs	r1, #16
   1619e:	4638      	mov	r0, r7
   161a0:	f002 fe4c 	bl	18e3c <swap_in_place>
                valcnt++;
   161a4:	2701      	movs	r7, #1
   161a6:	e7cc      	b.n	16142 <cmd_keystore_parse_valuedata+0x32>
                console_printf("invalid 'ltk' parameter\n");
   161a8:	4817      	ldr	r0, [pc, #92]	; (16208 <cmd_keystore_parse_valuedata+0xf8>)
   161aa:	f005 ffbf 	bl	1c12c <console_printf>
                return rc;
   161ae:	e7ec      	b.n	1618a <cmd_keystore_parse_valuedata+0x7a>
                out->sec.irk_present = 1;
   161b0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   161b4:	f043 0301 	orr.w	r3, r3, #1
   161b8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
                swap_in_place(out->sec.irk, 16);
   161bc:	2110      	movs	r1, #16
   161be:	4640      	mov	r0, r8
   161c0:	f002 fe3c 	bl	18e3c <swap_in_place>
                valcnt++;
   161c4:	3701      	adds	r7, #1
   161c6:	e7c7      	b.n	16158 <cmd_keystore_parse_valuedata+0x48>
                console_printf("invalid 'irk' parameter\n");
   161c8:	4810      	ldr	r0, [pc, #64]	; (1620c <cmd_keystore_parse_valuedata+0xfc>)
   161ca:	f005 ffaf 	bl	1c12c <console_printf>
                return rc;
   161ce:	e7dc      	b.n	1618a <cmd_keystore_parse_valuedata+0x7a>
                out->sec.csrk_present = 1;
   161d0:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   161d4:	f043 0301 	orr.w	r3, r3, #1
   161d8:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
                swap_in_place(out->sec.csrk, 16);
   161dc:	2110      	movs	r1, #16
   161de:	4640      	mov	r0, r8
   161e0:	f002 fe2c 	bl	18e3c <swap_in_place>
                valcnt++;
   161e4:	3701      	adds	r7, #1
   161e6:	e7c2      	b.n	1616e <cmd_keystore_parse_valuedata+0x5e>
                console_printf("invalid 'csrk' parameter\n");
   161e8:	4809      	ldr	r0, [pc, #36]	; (16210 <cmd_keystore_parse_valuedata+0x100>)
   161ea:	f005 ff9f 	bl	1c12c <console_printf>
                return rc;
   161ee:	e7cc      	b.n	1618a <cmd_keystore_parse_valuedata+0x7a>
    return -1;
   161f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   161f4:	e7c9      	b.n	1618a <cmd_keystore_parse_valuedata+0x7a>
   161f6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   161fa:	e7c6      	b.n	1618a <cmd_keystore_parse_valuedata+0x7a>
   161fc:	000308c0 	.word	0x000308c0
   16200:	000308e0 	.word	0x000308e0
   16204:	00030900 	.word	0x00030900
   16208:	000308c4 	.word	0x000308c4
   1620c:	000308e4 	.word	0x000308e4
   16210:	00030908 	.word	0x00030908

00016214 <cmd_keystore_add>:
{
   16214:	b530      	push	{r4, r5, lr}
   16216:	b0a1      	sub	sp, #132	; 0x84
   16218:	4604      	mov	r4, r0
   1621a:	460d      	mov	r5, r1
    rc = parse_arg_all(argc - 1, argv + 1);
   1621c:	3104      	adds	r1, #4
   1621e:	3801      	subs	r0, #1
   16220:	f002 fcb8 	bl	18b94 <parse_arg_all>
    if (rc != 0) {
   16224:	4603      	mov	r3, r0
   16226:	b110      	cbz	r0, 1622e <cmd_keystore_add+0x1a>
}
   16228:	4618      	mov	r0, r3
   1622a:	b021      	add	sp, #132	; 0x84
   1622c:	bd30      	pop	{r4, r5, pc}
    rc = cmd_keystore_parse_keydata(argc, argv, &key, &obj_type);
   1622e:	ab03      	add	r3, sp, #12
   16230:	aa18      	add	r2, sp, #96	; 0x60
   16232:	4629      	mov	r1, r5
   16234:	4620      	mov	r0, r4
   16236:	f7ff fefb 	bl	16030 <cmd_keystore_parse_keydata>
    if (rc) {
   1623a:	4603      	mov	r3, r0
   1623c:	2800      	cmp	r0, #0
   1623e:	d1f3      	bne.n	16228 <cmd_keystore_add+0x14>
    rc = cmd_keystore_parse_valuedata(argc, argv, obj_type, &key, &value);
   16240:	ab04      	add	r3, sp, #16
   16242:	9300      	str	r3, [sp, #0]
   16244:	ab18      	add	r3, sp, #96	; 0x60
   16246:	9a03      	ldr	r2, [sp, #12]
   16248:	4629      	mov	r1, r5
   1624a:	4620      	mov	r0, r4
   1624c:	f7ff ff60 	bl	16110 <cmd_keystore_parse_valuedata>
    if (rc) {
   16250:	4603      	mov	r3, r0
   16252:	2800      	cmp	r0, #0
   16254:	d1e8      	bne.n	16228 <cmd_keystore_add+0x14>
    switch(obj_type) {
   16256:	9803      	ldr	r0, [sp, #12]
   16258:	2802      	cmp	r0, #2
   1625a:	d008      	beq.n	1626e <cmd_keystore_add+0x5a>
   1625c:	2803      	cmp	r0, #3
   1625e:	d010      	beq.n	16282 <cmd_keystore_add+0x6e>
   16260:	2801      	cmp	r0, #1
   16262:	d009      	beq.n	16278 <cmd_keystore_add+0x64>
            rc = ble_store_write(obj_type, &value);
   16264:	a904      	add	r1, sp, #16
   16266:	f013 fa47 	bl	296f8 <ble_store_write>
   1626a:	4603      	mov	r3, r0
   1626c:	e7dc      	b.n	16228 <cmd_keystore_add+0x14>
            rc = ble_store_write_peer_sec(&value.sec);
   1626e:	a804      	add	r0, sp, #16
   16270:	f013 fa73 	bl	2975a <ble_store_write_peer_sec>
   16274:	4603      	mov	r3, r0
            break;
   16276:	e7d7      	b.n	16228 <cmd_keystore_add+0x14>
            rc = ble_store_write_our_sec(&value.sec);
   16278:	a804      	add	r0, sp, #16
   1627a:	f013 fa61 	bl	29740 <ble_store_write_our_sec>
   1627e:	4603      	mov	r3, r0
            break;
   16280:	e7d2      	b.n	16228 <cmd_keystore_add+0x14>
            rc = ble_store_write_cccd(&value.cccd);
   16282:	a804      	add	r0, sp, #16
   16284:	f013 fa99 	bl	297ba <ble_store_write_cccd>
   16288:	4603      	mov	r3, r0
            break;
   1628a:	e7cd      	b.n	16228 <cmd_keystore_add+0x14>

0001628c <cmd_conn_datalen>:
{
   1628c:	b530      	push	{r4, r5, lr}
   1628e:	b083      	sub	sp, #12
    rc = parse_arg_all(argc - 1, argv + 1);
   16290:	3104      	adds	r1, #4
   16292:	3801      	subs	r0, #1
   16294:	f002 fc7e 	bl	18b94 <parse_arg_all>
   16298:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   1629a:	b108      	cbz	r0, 162a0 <cmd_conn_datalen+0x14>
}
   1629c:	b003      	add	sp, #12
   1629e:	bd30      	pop	{r4, r5, pc}
    conn_handle = parse_arg_uint16("conn", &rc);
   162a0:	a901      	add	r1, sp, #4
   162a2:	4818      	ldr	r0, [pc, #96]	; (16304 <cmd_conn_datalen+0x78>)
   162a4:	f002 fb1f 	bl	188e6 <parse_arg_uint16>
   162a8:	4604      	mov	r4, r0
    if (rc != 0) {
   162aa:	9b01      	ldr	r3, [sp, #4]
   162ac:	b9d3      	cbnz	r3, 162e4 <cmd_conn_datalen+0x58>
    tx_octets = parse_arg_uint16("octets", &rc);
   162ae:	a901      	add	r1, sp, #4
   162b0:	4815      	ldr	r0, [pc, #84]	; (16308 <cmd_conn_datalen+0x7c>)
   162b2:	f002 fb18 	bl	188e6 <parse_arg_uint16>
   162b6:	4605      	mov	r5, r0
    if (rc != 0) {
   162b8:	9b01      	ldr	r3, [sp, #4]
   162ba:	b9c3      	cbnz	r3, 162ee <cmd_conn_datalen+0x62>
    tx_time = parse_arg_uint16("time", &rc);
   162bc:	a901      	add	r1, sp, #4
   162be:	4813      	ldr	r0, [pc, #76]	; (1630c <cmd_conn_datalen+0x80>)
   162c0:	f002 fb11 	bl	188e6 <parse_arg_uint16>
   162c4:	4602      	mov	r2, r0
    if (rc != 0) {
   162c6:	9b01      	ldr	r3, [sp, #4]
   162c8:	b9b3      	cbnz	r3, 162f8 <cmd_conn_datalen+0x6c>
    rc = btshell_datalen(conn_handle, tx_octets, tx_time);
   162ca:	4629      	mov	r1, r5
   162cc:	4620      	mov	r0, r4
   162ce:	f7ff fa6f 	bl	157b0 <btshell_datalen>
   162d2:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   162d4:	2800      	cmp	r0, #0
   162d6:	d0e1      	beq.n	1629c <cmd_conn_datalen+0x10>
        console_printf("error setting data length; rc=%d\n", rc);
   162d8:	4601      	mov	r1, r0
   162da:	480d      	ldr	r0, [pc, #52]	; (16310 <cmd_conn_datalen+0x84>)
   162dc:	f005 ff26 	bl	1c12c <console_printf>
        return rc;
   162e0:	9801      	ldr	r0, [sp, #4]
   162e2:	e7db      	b.n	1629c <cmd_conn_datalen+0x10>
        console_printf("invalid 'conn' parameter\n");
   162e4:	480b      	ldr	r0, [pc, #44]	; (16314 <cmd_conn_datalen+0x88>)
   162e6:	f005 ff21 	bl	1c12c <console_printf>
        return rc;
   162ea:	9801      	ldr	r0, [sp, #4]
   162ec:	e7d6      	b.n	1629c <cmd_conn_datalen+0x10>
        console_printf("invalid 'octets' parameter\n");
   162ee:	480a      	ldr	r0, [pc, #40]	; (16318 <cmd_conn_datalen+0x8c>)
   162f0:	f005 ff1c 	bl	1c12c <console_printf>
        return rc;
   162f4:	9801      	ldr	r0, [sp, #4]
   162f6:	e7d1      	b.n	1629c <cmd_conn_datalen+0x10>
        console_printf("invalid 'time' parameter\n");
   162f8:	4808      	ldr	r0, [pc, #32]	; (1631c <cmd_conn_datalen+0x90>)
   162fa:	f005 ff17 	bl	1c12c <console_printf>
        return rc;
   162fe:	9801      	ldr	r0, [sp, #4]
   16300:	e7cc      	b.n	1629c <cmd_conn_datalen+0x10>
   16302:	bf00      	nop
   16304:	000305d8 	.word	0x000305d8
   16308:	00032094 	.word	0x00032094
   1630c:	00030940 	.word	0x00030940
   16310:	00030964 	.word	0x00030964
   16314:	000305e0 	.word	0x000305e0
   16318:	00030924 	.word	0x00030924
   1631c:	00030948 	.word	0x00030948

00016320 <cmd_conn_update_params>:
{
   16320:	b510      	push	{r4, lr}
   16322:	b084      	sub	sp, #16
    rc = parse_arg_all(argc - 1, argv + 1);
   16324:	3104      	adds	r1, #4
   16326:	3801      	subs	r0, #1
   16328:	f002 fc34 	bl	18b94 <parse_arg_all>
   1632c:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   1632e:	b108      	cbz	r0, 16334 <cmd_conn_update_params+0x14>
}
   16330:	b004      	add	sp, #16
   16332:	bd10      	pop	{r4, pc}
    conn_handle = parse_arg_uint16("conn", &rc);
   16334:	4669      	mov	r1, sp
   16336:	483f      	ldr	r0, [pc, #252]	; (16434 <cmd_conn_update_params+0x114>)
   16338:	f002 fad5 	bl	188e6 <parse_arg_uint16>
   1633c:	4604      	mov	r4, r0
    if (rc != 0) {
   1633e:	9b00      	ldr	r3, [sp, #0]
   16340:	2b00      	cmp	r3, #0
   16342:	d153      	bne.n	163ec <cmd_conn_update_params+0xcc>
    params.itvl_min = parse_arg_time_dflt("interval_min", 1250,
   16344:	466b      	mov	r3, sp
   16346:	2218      	movs	r2, #24
   16348:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1634c:	483a      	ldr	r0, [pc, #232]	; (16438 <cmd_conn_update_params+0x118>)
   1634e:	f002 fb1f 	bl	18990 <parse_arg_time_dflt>
   16352:	f8ad 0004 	strh.w	r0, [sp, #4]
    if (rc != 0) {
   16356:	9b00      	ldr	r3, [sp, #0]
   16358:	2b00      	cmp	r3, #0
   1635a:	d14c      	bne.n	163f6 <cmd_conn_update_params+0xd6>
    params.itvl_max = parse_arg_time_dflt("interval_max", 1250,
   1635c:	466b      	mov	r3, sp
   1635e:	2228      	movs	r2, #40	; 0x28
   16360:	f240 41e2 	movw	r1, #1250	; 0x4e2
   16364:	4835      	ldr	r0, [pc, #212]	; (1643c <cmd_conn_update_params+0x11c>)
   16366:	f002 fb13 	bl	18990 <parse_arg_time_dflt>
   1636a:	f8ad 0006 	strh.w	r0, [sp, #6]
    if (rc != 0) {
   1636e:	9b00      	ldr	r3, [sp, #0]
   16370:	2b00      	cmp	r3, #0
   16372:	d145      	bne.n	16400 <cmd_conn_update_params+0xe0>
    params.latency = parse_arg_uint16_dflt("latency", 0, &rc);
   16374:	466a      	mov	r2, sp
   16376:	2100      	movs	r1, #0
   16378:	4831      	ldr	r0, [pc, #196]	; (16440 <cmd_conn_update_params+0x120>)
   1637a:	f002 faf7 	bl	1896c <parse_arg_uint16_dflt>
   1637e:	f8ad 0008 	strh.w	r0, [sp, #8]
    if (rc != 0) {
   16382:	9b00      	ldr	r3, [sp, #0]
   16384:	2b00      	cmp	r3, #0
   16386:	d140      	bne.n	1640a <cmd_conn_update_params+0xea>
    params.supervision_timeout = parse_arg_time_dflt("timeout", 10000, 0x0100,
   16388:	466b      	mov	r3, sp
   1638a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1638e:	f242 7110 	movw	r1, #10000	; 0x2710
   16392:	482c      	ldr	r0, [pc, #176]	; (16444 <cmd_conn_update_params+0x124>)
   16394:	f002 fafc 	bl	18990 <parse_arg_time_dflt>
   16398:	f8ad 000a 	strh.w	r0, [sp, #10]
    if (rc != 0) {
   1639c:	9b00      	ldr	r3, [sp, #0]
   1639e:	2b00      	cmp	r3, #0
   163a0:	d138      	bne.n	16414 <cmd_conn_update_params+0xf4>
    params.min_ce_len = parse_arg_time_dflt("min_conn_event_len", 625,
   163a2:	466b      	mov	r3, sp
   163a4:	2210      	movs	r2, #16
   163a6:	f240 2171 	movw	r1, #625	; 0x271
   163aa:	4827      	ldr	r0, [pc, #156]	; (16448 <cmd_conn_update_params+0x128>)
   163ac:	f002 faf0 	bl	18990 <parse_arg_time_dflt>
   163b0:	f8ad 000c 	strh.w	r0, [sp, #12]
    if (rc != 0) {
   163b4:	9b00      	ldr	r3, [sp, #0]
   163b6:	2b00      	cmp	r3, #0
   163b8:	d131      	bne.n	1641e <cmd_conn_update_params+0xfe>
    params.max_ce_len = parse_arg_time_dflt("max_conn_event_len", 625,
   163ba:	466b      	mov	r3, sp
   163bc:	f44f 7240 	mov.w	r2, #768	; 0x300
   163c0:	f240 2171 	movw	r1, #625	; 0x271
   163c4:	4821      	ldr	r0, [pc, #132]	; (1644c <cmd_conn_update_params+0x12c>)
   163c6:	f002 fae3 	bl	18990 <parse_arg_time_dflt>
   163ca:	f8ad 000e 	strh.w	r0, [sp, #14]
    if (rc != 0) {
   163ce:	9b00      	ldr	r3, [sp, #0]
   163d0:	bb53      	cbnz	r3, 16428 <cmd_conn_update_params+0x108>
    rc = btshell_update_conn(conn_handle, &params);
   163d2:	a901      	add	r1, sp, #4
   163d4:	4620      	mov	r0, r4
   163d6:	f7ff f9e3 	bl	157a0 <btshell_update_conn>
   163da:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   163dc:	2800      	cmp	r0, #0
   163de:	d0a7      	beq.n	16330 <cmd_conn_update_params+0x10>
        console_printf("error updating connection; rc=%d\n", rc);
   163e0:	4601      	mov	r1, r0
   163e2:	481b      	ldr	r0, [pc, #108]	; (16450 <cmd_conn_update_params+0x130>)
   163e4:	f005 fea2 	bl	1c12c <console_printf>
        return rc;
   163e8:	9800      	ldr	r0, [sp, #0]
   163ea:	e7a1      	b.n	16330 <cmd_conn_update_params+0x10>
        console_printf("invalid 'conn' parameter\n");
   163ec:	4819      	ldr	r0, [pc, #100]	; (16454 <cmd_conn_update_params+0x134>)
   163ee:	f005 fe9d 	bl	1c12c <console_printf>
        return rc;
   163f2:	9800      	ldr	r0, [sp, #0]
   163f4:	e79c      	b.n	16330 <cmd_conn_update_params+0x10>
        console_printf("invalid 'interval_min' parameter\n");
   163f6:	4818      	ldr	r0, [pc, #96]	; (16458 <cmd_conn_update_params+0x138>)
   163f8:	f005 fe98 	bl	1c12c <console_printf>
        return rc;
   163fc:	9800      	ldr	r0, [sp, #0]
   163fe:	e797      	b.n	16330 <cmd_conn_update_params+0x10>
        console_printf("invalid 'interval_max' parameter\n");
   16400:	4816      	ldr	r0, [pc, #88]	; (1645c <cmd_conn_update_params+0x13c>)
   16402:	f005 fe93 	bl	1c12c <console_printf>
        return rc;
   16406:	9800      	ldr	r0, [sp, #0]
   16408:	e792      	b.n	16330 <cmd_conn_update_params+0x10>
        console_printf("invalid 'latency' parameter\n");
   1640a:	4815      	ldr	r0, [pc, #84]	; (16460 <cmd_conn_update_params+0x140>)
   1640c:	f005 fe8e 	bl	1c12c <console_printf>
        return rc;
   16410:	9800      	ldr	r0, [sp, #0]
   16412:	e78d      	b.n	16330 <cmd_conn_update_params+0x10>
        console_printf("invalid 'timeout' parameter\n");
   16414:	4813      	ldr	r0, [pc, #76]	; (16464 <cmd_conn_update_params+0x144>)
   16416:	f005 fe89 	bl	1c12c <console_printf>
        return rc;
   1641a:	9800      	ldr	r0, [sp, #0]
   1641c:	e788      	b.n	16330 <cmd_conn_update_params+0x10>
        console_printf("invalid 'min_conn_event_len' parameter\n");
   1641e:	4812      	ldr	r0, [pc, #72]	; (16468 <cmd_conn_update_params+0x148>)
   16420:	f005 fe84 	bl	1c12c <console_printf>
        return rc;
   16424:	9800      	ldr	r0, [sp, #0]
   16426:	e783      	b.n	16330 <cmd_conn_update_params+0x10>
        console_printf("invalid 'max_conn_event_len' parameter\n");
   16428:	4810      	ldr	r0, [pc, #64]	; (1646c <cmd_conn_update_params+0x14c>)
   1642a:	f005 fe7f 	bl	1c12c <console_printf>
        return rc;
   1642e:	9800      	ldr	r0, [sp, #0]
   16430:	e77e      	b.n	16330 <cmd_conn_update_params+0x10>
   16432:	bf00      	nop
   16434:	000305d8 	.word	0x000305d8
   16438:	00030988 	.word	0x00030988
   1643c:	000309bc 	.word	0x000309bc
   16440:	000309f0 	.word	0x000309f0
   16444:	00030a18 	.word	0x00030a18
   16448:	00030a40 	.word	0x00030a40
   1644c:	00030a7c 	.word	0x00030a7c
   16450:	00030ab8 	.word	0x00030ab8
   16454:	000305e0 	.word	0x000305e0
   16458:	00030998 	.word	0x00030998
   1645c:	000309cc 	.word	0x000309cc
   16460:	000309f8 	.word	0x000309f8
   16464:	00030a20 	.word	0x00030a20
   16468:	00030a54 	.word	0x00030a54
   1646c:	00030a90 	.word	0x00030a90

00016470 <cmd_conn_rssi>:
{
   16470:	b530      	push	{r4, r5, lr}
   16472:	b083      	sub	sp, #12
    rc = parse_arg_all(argc - 1, argv + 1);
   16474:	3104      	adds	r1, #4
   16476:	3801      	subs	r0, #1
   16478:	f002 fb8c 	bl	18b94 <parse_arg_all>
   1647c:	4604      	mov	r4, r0
   1647e:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   16480:	b110      	cbz	r0, 16488 <cmd_conn_rssi+0x18>
}
   16482:	4620      	mov	r0, r4
   16484:	b003      	add	sp, #12
   16486:	bd30      	pop	{r4, r5, pc}
    conn_handle = parse_arg_uint16("conn", &rc);
   16488:	4669      	mov	r1, sp
   1648a:	480f      	ldr	r0, [pc, #60]	; (164c8 <cmd_conn_rssi+0x58>)
   1648c:	f002 fa2b 	bl	188e6 <parse_arg_uint16>
   16490:	4605      	mov	r5, r0
    if (rc != 0) {
   16492:	9b00      	ldr	r3, [sp, #0]
   16494:	b96b      	cbnz	r3, 164b2 <cmd_conn_rssi+0x42>
    rc = btshell_rssi(conn_handle, &rssi);
   16496:	f10d 0107 	add.w	r1, sp, #7
   1649a:	f7ff f9cf 	bl	1583c <btshell_rssi>
   1649e:	4604      	mov	r4, r0
   164a0:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   164a2:	b958      	cbnz	r0, 164bc <cmd_conn_rssi+0x4c>
    console_printf("conn=%d rssi=%d\n", conn_handle, rssi);
   164a4:	f99d 2007 	ldrsb.w	r2, [sp, #7]
   164a8:	4629      	mov	r1, r5
   164aa:	4808      	ldr	r0, [pc, #32]	; (164cc <cmd_conn_rssi+0x5c>)
   164ac:	f005 fe3e 	bl	1c12c <console_printf>
    return 0;
   164b0:	e7e7      	b.n	16482 <cmd_conn_rssi+0x12>
        console_printf("invalid 'conn' parameter\n");
   164b2:	4807      	ldr	r0, [pc, #28]	; (164d0 <cmd_conn_rssi+0x60>)
   164b4:	f005 fe3a 	bl	1c12c <console_printf>
        return rc;
   164b8:	9c00      	ldr	r4, [sp, #0]
   164ba:	e7e2      	b.n	16482 <cmd_conn_rssi+0x12>
        console_printf("error reading rssi; rc=%d\n", rc);
   164bc:	4601      	mov	r1, r0
   164be:	4805      	ldr	r0, [pc, #20]	; (164d4 <cmd_conn_rssi+0x64>)
   164c0:	f005 fe34 	bl	1c12c <console_printf>
        return rc;
   164c4:	9c00      	ldr	r4, [sp, #0]
   164c6:	e7dc      	b.n	16482 <cmd_conn_rssi+0x12>
   164c8:	000305d8 	.word	0x000305d8
   164cc:	00030af8 	.word	0x00030af8
   164d0:	000305e0 	.word	0x000305e0
   164d4:	00030adc 	.word	0x00030adc

000164d8 <cmd_white_list>:
{
   164d8:	b570      	push	{r4, r5, r6, lr}
    rc = parse_arg_all(argc - 1, argv + 1);
   164da:	3104      	adds	r1, #4
   164dc:	3801      	subs	r0, #1
   164de:	f002 fb59 	bl	18b94 <parse_arg_all>
    if (rc != 0) {
   164e2:	4606      	mov	r6, r0
   164e4:	b9f0      	cbnz	r0, 16524 <cmd_white_list+0x4c>
    addrs_cnt = 0;
   164e6:	4604      	mov	r4, r0
   164e8:	e000      	b.n	164ec <cmd_white_list+0x14>
        addrs_cnt++;
   164ea:	3401      	adds	r4, #1
        if (addrs_cnt >= CMD_WL_MAX_SZ) {
   164ec:	2c07      	cmp	r4, #7
   164ee:	dc18      	bgt.n	16522 <cmd_white_list+0x4a>
        rc = parse_dev_addr(NULL, cmd_addr_type, &addrs[addrs_cnt]);
   164f0:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   164f4:	4b0d      	ldr	r3, [pc, #52]	; (1652c <cmd_white_list+0x54>)
   164f6:	441a      	add	r2, r3
   164f8:	490d      	ldr	r1, [pc, #52]	; (16530 <cmd_white_list+0x58>)
   164fa:	2000      	movs	r0, #0
   164fc:	f7ff fd44 	bl	15f88 <parse_dev_addr>
   16500:	4605      	mov	r5, r0
        if (rc == ENOENT) {
   16502:	2802      	cmp	r0, #2
   16504:	d007      	beq.n	16516 <cmd_white_list+0x3e>
        } else if (rc != 0) {
   16506:	2800      	cmp	r0, #0
   16508:	d0ef      	beq.n	164ea <cmd_white_list+0x12>
            console_printf("invalid 'addr' parameter #%d\n", addrs_cnt + 1);
   1650a:	1c61      	adds	r1, r4, #1
   1650c:	4809      	ldr	r0, [pc, #36]	; (16534 <cmd_white_list+0x5c>)
   1650e:	f005 fe0d 	bl	1c12c <console_printf>
            return rc;
   16512:	462e      	mov	r6, r5
   16514:	e006      	b.n	16524 <cmd_white_list+0x4c>
    if (addrs_cnt == 0) {
   16516:	b13c      	cbz	r4, 16528 <cmd_white_list+0x50>
    btshell_wl_set(addrs, addrs_cnt);
   16518:	4621      	mov	r1, r4
   1651a:	4804      	ldr	r0, [pc, #16]	; (1652c <cmd_white_list+0x54>)
   1651c:	f7ff f91c 	bl	15758 <btshell_wl_set>
    return 0;
   16520:	e000      	b.n	16524 <cmd_white_list+0x4c>
            return EINVAL;
   16522:	2616      	movs	r6, #22
}
   16524:	4630      	mov	r0, r6
   16526:	bd70      	pop	{r4, r5, r6, pc}
        return EINVAL;
   16528:	2616      	movs	r6, #22
   1652a:	e7fb      	b.n	16524 <cmd_white_list+0x4c>
   1652c:	100033b8 	.word	0x100033b8
   16530:	00032f30 	.word	0x00032f30
   16534:	00030b0c 	.word	0x00030b0c

00016538 <cmd_set_priv_mode>:
{
   16538:	b500      	push	{lr}
   1653a:	b085      	sub	sp, #20
    rc = parse_arg_all(argc - 1, argv + 1);
   1653c:	3104      	adds	r1, #4
   1653e:	3801      	subs	r0, #1
   16540:	f002 fb28 	bl	18b94 <parse_arg_all>
   16544:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   16546:	b110      	cbz	r0, 1654e <cmd_set_priv_mode+0x16>
}
   16548:	b005      	add	sp, #20
   1654a:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = parse_dev_addr(NULL, cmd_addr_type, &addr);
   1654e:	aa02      	add	r2, sp, #8
   16550:	490c      	ldr	r1, [pc, #48]	; (16584 <cmd_set_priv_mode+0x4c>)
   16552:	f7ff fd19 	bl	15f88 <parse_dev_addr>
   16556:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   16558:	b950      	cbnz	r0, 16570 <cmd_set_priv_mode+0x38>
    priv_mode = parse_arg_uint8("mode", &rc);
   1655a:	a901      	add	r1, sp, #4
   1655c:	480a      	ldr	r0, [pc, #40]	; (16588 <cmd_set_priv_mode+0x50>)
   1655e:	f002 f9ba 	bl	188d6 <parse_arg_uint8>
   16562:	4601      	mov	r1, r0
    if (rc != 0) {
   16564:	9b01      	ldr	r3, [sp, #4]
   16566:	b943      	cbnz	r3, 1657a <cmd_set_priv_mode+0x42>
    return ble_gap_set_priv_mode(&addr, priv_mode);
   16568:	a802      	add	r0, sp, #8
   1656a:	f00b fbb0 	bl	21cce <ble_gap_set_priv_mode>
   1656e:	e7eb      	b.n	16548 <cmd_set_priv_mode+0x10>
        console_printf("invalid 'addr' parameter\n");
   16570:	4806      	ldr	r0, [pc, #24]	; (1658c <cmd_set_priv_mode+0x54>)
   16572:	f005 fddb 	bl	1c12c <console_printf>
        return rc;
   16576:	9801      	ldr	r0, [sp, #4]
   16578:	e7e6      	b.n	16548 <cmd_set_priv_mode+0x10>
        console_printf("missing mode\n");
   1657a:	4805      	ldr	r0, [pc, #20]	; (16590 <cmd_set_priv_mode+0x58>)
   1657c:	f005 fdd6 	bl	1c12c <console_printf>
        return rc;
   16580:	9801      	ldr	r0, [sp, #4]
   16582:	e7e1      	b.n	16548 <cmd_set_priv_mode+0x10>
   16584:	00032f30 	.word	0x00032f30
   16588:	00030b2c 	.word	0x00030b2c
   1658c:	0003085c 	.word	0x0003085c
   16590:	00030b34 	.word	0x00030b34

00016594 <cmd_set_scan_opts>:
{
   16594:	b500      	push	{lr}
   16596:	b083      	sub	sp, #12
    rc = parse_arg_all(argc - 1, argv + 1);
   16598:	3104      	adds	r1, #4
   1659a:	3801      	subs	r0, #1
   1659c:	f002 fafa 	bl	18b94 <parse_arg_all>
   165a0:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   165a2:	b110      	cbz	r0, 165aa <cmd_set_scan_opts+0x16>
}
   165a4:	b003      	add	sp, #12
   165a6:	f85d fb04 	ldr.w	pc, [sp], #4
    g_scan_opts.limit = parse_arg_uint16_dflt("decode_limit", UINT16_MAX, &rc);
   165aa:	aa01      	add	r2, sp, #4
   165ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
   165b0:	4817      	ldr	r0, [pc, #92]	; (16610 <cmd_set_scan_opts+0x7c>)
   165b2:	f002 f9db 	bl	1896c <parse_arg_uint16_dflt>
   165b6:	4b17      	ldr	r3, [pc, #92]	; (16614 <cmd_set_scan_opts+0x80>)
   165b8:	8018      	strh	r0, [r3, #0]
    if (rc != 0) {
   165ba:	9b01      	ldr	r3, [sp, #4]
   165bc:	b9eb      	cbnz	r3, 165fa <cmd_set_scan_opts+0x66>
    g_scan_opts.ignore_legacy = parse_arg_bool_dflt("ignore_legacy", 0, &rc);
   165be:	aa01      	add	r2, sp, #4
   165c0:	2100      	movs	r1, #0
   165c2:	4815      	ldr	r0, [pc, #84]	; (16618 <cmd_set_scan_opts+0x84>)
   165c4:	f002 f97b 	bl	188be <parse_arg_bool_dflt>
   165c8:	4b12      	ldr	r3, [pc, #72]	; (16614 <cmd_set_scan_opts+0x80>)
   165ca:	789a      	ldrb	r2, [r3, #2]
   165cc:	f360 0200 	bfi	r2, r0, #0, #1
   165d0:	709a      	strb	r2, [r3, #2]
    if (rc != 0) {
   165d2:	9b01      	ldr	r3, [sp, #4]
   165d4:	b9b3      	cbnz	r3, 16604 <cmd_set_scan_opts+0x70>
    g_scan_opts.periodic_only = parse_arg_bool_dflt("periodic_only", 0, &rc);
   165d6:	aa01      	add	r2, sp, #4
   165d8:	2100      	movs	r1, #0
   165da:	4810      	ldr	r0, [pc, #64]	; (1661c <cmd_set_scan_opts+0x88>)
   165dc:	f002 f96f 	bl	188be <parse_arg_bool_dflt>
   165e0:	4b0c      	ldr	r3, [pc, #48]	; (16614 <cmd_set_scan_opts+0x80>)
   165e2:	789a      	ldrb	r2, [r3, #2]
   165e4:	f360 0241 	bfi	r2, r0, #1, #1
   165e8:	709a      	strb	r2, [r3, #2]
    if (rc != 0) {
   165ea:	9801      	ldr	r0, [sp, #4]
   165ec:	2800      	cmp	r0, #0
   165ee:	d0d9      	beq.n	165a4 <cmd_set_scan_opts+0x10>
        console_printf("invalid 'periodic_only' parameter\n");
   165f0:	480b      	ldr	r0, [pc, #44]	; (16620 <cmd_set_scan_opts+0x8c>)
   165f2:	f005 fd9b 	bl	1c12c <console_printf>
        return rc;
   165f6:	9801      	ldr	r0, [sp, #4]
   165f8:	e7d4      	b.n	165a4 <cmd_set_scan_opts+0x10>
        console_printf("invalid 'decode_limit' parameter\n");
   165fa:	480a      	ldr	r0, [pc, #40]	; (16624 <cmd_set_scan_opts+0x90>)
   165fc:	f005 fd96 	bl	1c12c <console_printf>
        return rc;
   16600:	9801      	ldr	r0, [sp, #4]
   16602:	e7cf      	b.n	165a4 <cmd_set_scan_opts+0x10>
        console_printf("invalid 'ignore_legacy' parameter\n");
   16604:	4808      	ldr	r0, [pc, #32]	; (16628 <cmd_set_scan_opts+0x94>)
   16606:	f005 fd91 	bl	1c12c <console_printf>
        return rc;
   1660a:	9801      	ldr	r0, [sp, #4]
   1660c:	e7ca      	b.n	165a4 <cmd_set_scan_opts+0x10>
   1660e:	bf00      	nop
   16610:	00030b44 	.word	0x00030b44
   16614:	1000015c 	.word	0x1000015c
   16618:	00030b78 	.word	0x00030b78
   1661c:	00030bac 	.word	0x00030bac
   16620:	00030bbc 	.word	0x00030bbc
   16624:	00030b54 	.word	0x00030b54
   16628:	00030b88 	.word	0x00030b88

0001662c <cmd_set_adv_data_or_scan_rsp>:
{
   1662c:	b570      	push	{r4, r5, r6, lr}
   1662e:	b0ac      	sub	sp, #176	; 0xb0
   16630:	4605      	mov	r5, r0
   16632:	460e      	mov	r6, r1
    if (scan_rsp && periodic) {
   16634:	4614      	mov	r4, r2
   16636:	b112      	cbz	r2, 1663e <cmd_set_adv_data_or_scan_rsp+0x12>
   16638:	2b00      	cmp	r3, #0
   1663a:	f040 822d 	bne.w	16a98 <cmd_set_adv_data_or_scan_rsp+0x46c>
    memset(&adv_fields, 0, sizeof adv_fields);
   1663e:	2260      	movs	r2, #96	; 0x60
   16640:	2100      	movs	r1, #0
   16642:	a814      	add	r0, sp, #80	; 0x50
   16644:	f004 fb3b 	bl	1acbe <memset>
    rc = parse_arg_all(argc - 1, argv + 1);
   16648:	1d31      	adds	r1, r6, #4
   1664a:	1e68      	subs	r0, r5, #1
   1664c:	f002 faa2 	bl	18b94 <parse_arg_all>
   16650:	9003      	str	r0, [sp, #12]
    if (rc != 0) {
   16652:	b108      	cbz	r0, 16658 <cmd_set_adv_data_or_scan_rsp+0x2c>
}
   16654:	b02c      	add	sp, #176	; 0xb0
   16656:	bd70      	pop	{r4, r5, r6, pc}
    tmp = parse_arg_uint8("flags", &rc);
   16658:	a903      	add	r1, sp, #12
   1665a:	4888      	ldr	r0, [pc, #544]	; (1687c <cmd_set_adv_data_or_scan_rsp+0x250>)
   1665c:	f002 f93b 	bl	188d6 <parse_arg_uint8>
    if (rc == 0) {
   16660:	9b03      	ldr	r3, [sp, #12]
   16662:	b9b3      	cbnz	r3, 16692 <cmd_set_adv_data_or_scan_rsp+0x66>
        adv_fields.flags = tmp;
   16664:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
        uuid16 = parse_arg_uint16("uuid16", &rc);
   16668:	a903      	add	r1, sp, #12
   1666a:	4885      	ldr	r0, [pc, #532]	; (16880 <cmd_set_adv_data_or_scan_rsp+0x254>)
   1666c:	f002 f93b 	bl	188e6 <parse_arg_uint16>
        if (rc == 0) {
   16670:	9b03      	ldr	r3, [sp, #12]
   16672:	b9d3      	cbnz	r3, 166aa <cmd_set_adv_data_or_scan_rsp+0x7e>
            if (adv_fields.num_uuids16 >= CMD_ADV_DATA_MAX_UUIDS16) {
   16674:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   16678:	2b07      	cmp	r3, #7
   1667a:	d811      	bhi.n	166a0 <cmd_set_adv_data_or_scan_rsp+0x74>
            uuids16[adv_fields.num_uuids16] = (ble_uuid16_t) BLE_UUID16_INIT(uuid16);
   1667c:	4a81      	ldr	r2, [pc, #516]	; (16884 <cmd_set_adv_data_or_scan_rsp+0x258>)
   1667e:	2110      	movs	r1, #16
   16680:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
   16684:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   16688:	8050      	strh	r0, [r2, #2]
            adv_fields.num_uuids16++;
   1668a:	3301      	adds	r3, #1
   1668c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   16690:	e7ea      	b.n	16668 <cmd_set_adv_data_or_scan_rsp+0x3c>
    } else if (rc != ENOENT) {
   16692:	2b02      	cmp	r3, #2
   16694:	d0e8      	beq.n	16668 <cmd_set_adv_data_or_scan_rsp+0x3c>
        console_printf("invalid 'flags' parameter\n");
   16696:	487c      	ldr	r0, [pc, #496]	; (16888 <cmd_set_adv_data_or_scan_rsp+0x25c>)
   16698:	f005 fd48 	bl	1c12c <console_printf>
        return rc;
   1669c:	9803      	ldr	r0, [sp, #12]
   1669e:	e7d9      	b.n	16654 <cmd_set_adv_data_or_scan_rsp+0x28>
                console_printf("invalid 'uuid16' parameter\n");
   166a0:	487a      	ldr	r0, [pc, #488]	; (1688c <cmd_set_adv_data_or_scan_rsp+0x260>)
   166a2:	f005 fd43 	bl	1c12c <console_printf>
                return EINVAL;
   166a6:	2016      	movs	r0, #22
   166a8:	e7d4      	b.n	16654 <cmd_set_adv_data_or_scan_rsp+0x28>
        } else if (rc == ENOENT) {
   166aa:	2b02      	cmp	r3, #2
   166ac:	d120      	bne.n	166f0 <cmd_set_adv_data_or_scan_rsp+0xc4>
    if (adv_fields.num_uuids16 > 0) {
   166ae:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   166b2:	b10b      	cbz	r3, 166b8 <cmd_set_adv_data_or_scan_rsp+0x8c>
        adv_fields.uuids16 = uuids16;
   166b4:	4b73      	ldr	r3, [pc, #460]	; (16884 <cmd_set_adv_data_or_scan_rsp+0x258>)
   166b6:	9315      	str	r3, [sp, #84]	; 0x54
    tmp = parse_arg_bool_dflt("uuids16_is_complete", 0, &rc);
   166b8:	aa03      	add	r2, sp, #12
   166ba:	2100      	movs	r1, #0
   166bc:	4874      	ldr	r0, [pc, #464]	; (16890 <cmd_set_adv_data_or_scan_rsp+0x264>)
   166be:	f002 f8fe 	bl	188be <parse_arg_bool_dflt>
    if (rc != 0) {
   166c2:	9b03      	ldr	r3, [sp, #12]
   166c4:	b9cb      	cbnz	r3, 166fa <cmd_set_adv_data_or_scan_rsp+0xce>
        uuid32 = parse_arg_uint32("uuid32", &rc);
   166c6:	a903      	add	r1, sp, #12
   166c8:	4872      	ldr	r0, [pc, #456]	; (16894 <cmd_set_adv_data_or_scan_rsp+0x268>)
   166ca:	f002 f91e 	bl	1890a <parse_arg_uint32>
        if (rc == 0) {
   166ce:	9b03      	ldr	r3, [sp, #12]
   166d0:	b9eb      	cbnz	r3, 1670e <cmd_set_adv_data_or_scan_rsp+0xe2>
            if (adv_fields.num_uuids32 >= CMD_ADV_DATA_MAX_UUIDS32) {
   166d2:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   166d6:	2b07      	cmp	r3, #7
   166d8:	d814      	bhi.n	16704 <cmd_set_adv_data_or_scan_rsp+0xd8>
            uuids32[adv_fields.num_uuids32] = (ble_uuid32_t) BLE_UUID32_INIT(uuid32);
   166da:	4a6a      	ldr	r2, [pc, #424]	; (16884 <cmd_set_adv_data_or_scan_rsp+0x258>)
   166dc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   166e0:	2120      	movs	r1, #32
   166e2:	f882 1020 	strb.w	r1, [r2, #32]
   166e6:	6250      	str	r0, [r2, #36]	; 0x24
            adv_fields.num_uuids32++;
   166e8:	3301      	adds	r3, #1
   166ea:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
   166ee:	e7ea      	b.n	166c6 <cmd_set_adv_data_or_scan_rsp+0x9a>
            console_printf("invalid 'uuid16' parameter\n");
   166f0:	4866      	ldr	r0, [pc, #408]	; (1688c <cmd_set_adv_data_or_scan_rsp+0x260>)
   166f2:	f005 fd1b 	bl	1c12c <console_printf>
            return rc;
   166f6:	9803      	ldr	r0, [sp, #12]
   166f8:	e7ac      	b.n	16654 <cmd_set_adv_data_or_scan_rsp+0x28>
        console_printf("invalid 'uuids16_is_complete' parameter\n");
   166fa:	4867      	ldr	r0, [pc, #412]	; (16898 <cmd_set_adv_data_or_scan_rsp+0x26c>)
   166fc:	f005 fd16 	bl	1c12c <console_printf>
        return rc;
   16700:	9803      	ldr	r0, [sp, #12]
   16702:	e7a7      	b.n	16654 <cmd_set_adv_data_or_scan_rsp+0x28>
                console_printf("invalid 'uuid32' parameter\n");
   16704:	4865      	ldr	r0, [pc, #404]	; (1689c <cmd_set_adv_data_or_scan_rsp+0x270>)
   16706:	f005 fd11 	bl	1c12c <console_printf>
                return EINVAL;
   1670a:	2016      	movs	r0, #22
   1670c:	e7a2      	b.n	16654 <cmd_set_adv_data_or_scan_rsp+0x28>
        } else if (rc == ENOENT) {
   1670e:	2b02      	cmp	r3, #2
   16710:	d110      	bne.n	16734 <cmd_set_adv_data_or_scan_rsp+0x108>
    if (adv_fields.num_uuids32 > 0) {
   16712:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   16716:	b10b      	cbz	r3, 1671c <cmd_set_adv_data_or_scan_rsp+0xf0>
        adv_fields.uuids32 = uuids32;
   16718:	4b61      	ldr	r3, [pc, #388]	; (168a0 <cmd_set_adv_data_or_scan_rsp+0x274>)
   1671a:	9317      	str	r3, [sp, #92]	; 0x5c
    tmp = parse_arg_bool_dflt("uuids32_is_complete", 0, &rc);
   1671c:	aa03      	add	r2, sp, #12
   1671e:	2100      	movs	r1, #0
   16720:	4860      	ldr	r0, [pc, #384]	; (168a4 <cmd_set_adv_data_or_scan_rsp+0x278>)
   16722:	f002 f8cc 	bl	188be <parse_arg_bool_dflt>
    if (rc != 0) {
   16726:	9b03      	ldr	r3, [sp, #12]
   16728:	b1b3      	cbz	r3, 16758 <cmd_set_adv_data_or_scan_rsp+0x12c>
        console_printf("invalid 'uuids32_is_complete' parameter\n");
   1672a:	485f      	ldr	r0, [pc, #380]	; (168a8 <cmd_set_adv_data_or_scan_rsp+0x27c>)
   1672c:	f005 fcfe 	bl	1c12c <console_printf>
        return rc;
   16730:	9803      	ldr	r0, [sp, #12]
   16732:	e78f      	b.n	16654 <cmd_set_adv_data_or_scan_rsp+0x28>
            console_printf("invalid 'uuid32' parameter\n");
   16734:	4859      	ldr	r0, [pc, #356]	; (1689c <cmd_set_adv_data_or_scan_rsp+0x270>)
   16736:	f005 fcf9 	bl	1c12c <console_printf>
            return rc;
   1673a:	9803      	ldr	r0, [sp, #12]
   1673c:	e78a      	b.n	16654 <cmd_set_adv_data_or_scan_rsp+0x28>
            ble_uuid_init_from_buf((ble_uuid_any_t *) &uuids128[adv_fields.num_uuids128],
   1673e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   16742:	2210      	movs	r2, #16
   16744:	a910      	add	r1, sp, #64	; 0x40
   16746:	4b59      	ldr	r3, [pc, #356]	; (168ac <cmd_set_adv_data_or_scan_rsp+0x280>)
   16748:	4418      	add	r0, r3
   1674a:	f013 f8fe 	bl	2994a <ble_uuid_init_from_buf>
            adv_fields.num_uuids128++;
   1674e:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   16752:	3301      	adds	r3, #1
   16754:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
        rc = parse_arg_byte_stream_exact_length("uuid128", uuid128, 16);
   16758:	2210      	movs	r2, #16
   1675a:	a910      	add	r1, sp, #64	; 0x40
   1675c:	4854      	ldr	r0, [pc, #336]	; (168b0 <cmd_set_adv_data_or_scan_rsp+0x284>)
   1675e:	f002 f991 	bl	18a84 <parse_arg_byte_stream_exact_length>
   16762:	9003      	str	r0, [sp, #12]
        if (rc == 0) {
   16764:	b940      	cbnz	r0, 16778 <cmd_set_adv_data_or_scan_rsp+0x14c>
            if (adv_fields.num_uuids128 >= CMD_ADV_DATA_MAX_UUIDS128) {
   16766:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
   1676a:	2801      	cmp	r0, #1
   1676c:	d9e7      	bls.n	1673e <cmd_set_adv_data_or_scan_rsp+0x112>
                console_printf("invalid 'uuid128' parameter\n");
   1676e:	4851      	ldr	r0, [pc, #324]	; (168b4 <cmd_set_adv_data_or_scan_rsp+0x288>)
   16770:	f005 fcdc 	bl	1c12c <console_printf>
                return EINVAL;
   16774:	2016      	movs	r0, #22
   16776:	e76d      	b.n	16654 <cmd_set_adv_data_or_scan_rsp+0x28>
        } else if (rc == ENOENT) {
   16778:	2802      	cmp	r0, #2
   1677a:	d15b      	bne.n	16834 <cmd_set_adv_data_or_scan_rsp+0x208>
    if (adv_fields.num_uuids128 > 0) {
   1677c:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   16780:	b10b      	cbz	r3, 16786 <cmd_set_adv_data_or_scan_rsp+0x15a>
        adv_fields.uuids128 = uuids128;
   16782:	4b4a      	ldr	r3, [pc, #296]	; (168ac <cmd_set_adv_data_or_scan_rsp+0x280>)
   16784:	9319      	str	r3, [sp, #100]	; 0x64
    tmp = parse_arg_bool_dflt("uuids128_is_complete", 0, &rc);
   16786:	aa03      	add	r2, sp, #12
   16788:	2100      	movs	r1, #0
   1678a:	484b      	ldr	r0, [pc, #300]	; (168b8 <cmd_set_adv_data_or_scan_rsp+0x28c>)
   1678c:	f002 f897 	bl	188be <parse_arg_bool_dflt>
    if (rc != 0) {
   16790:	9b03      	ldr	r3, [sp, #12]
   16792:	2b00      	cmp	r3, #0
   16794:	d153      	bne.n	1683e <cmd_set_adv_data_or_scan_rsp+0x212>
    adv_fields.name = (uint8_t *)parse_arg_extract("name");
   16796:	4849      	ldr	r0, [pc, #292]	; (168bc <cmd_set_adv_data_or_scan_rsp+0x290>)
   16798:	f001 ffe0 	bl	1875c <parse_arg_extract>
   1679c:	901b      	str	r0, [sp, #108]	; 0x6c
    if (adv_fields.name != NULL) {
   1679e:	b118      	cbz	r0, 167a8 <cmd_set_adv_data_or_scan_rsp+0x17c>
        adv_fields.name_len = strlen((char *)adv_fields.name);
   167a0:	f004 facf 	bl	1ad42 <strlen>
   167a4:	f88d 0070 	strb.w	r0, [sp, #112]	; 0x70
    tmp = parse_arg_long_bounds("tx_power_level", INT8_MIN, INT8_MAX, &rc);
   167a8:	ab03      	add	r3, sp, #12
   167aa:	227f      	movs	r2, #127	; 0x7f
   167ac:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   167b0:	4843      	ldr	r0, [pc, #268]	; (168c0 <cmd_set_adv_data_or_scan_rsp+0x294>)
   167b2:	f002 f81e 	bl	187f2 <parse_arg_long_bounds>
    if (rc == 0) {
   167b6:	9a03      	ldr	r2, [sp, #12]
   167b8:	2a00      	cmp	r2, #0
   167ba:	d145      	bne.n	16848 <cmd_set_adv_data_or_scan_rsp+0x21c>
        adv_fields.tx_pwr_lvl = tmp;
   167bc:	f88d 0072 	strb.w	r0, [sp, #114]	; 0x72
        adv_fields.tx_pwr_lvl_is_present = 1;
   167c0:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
   167c4:	f043 0301 	orr.w	r3, r3, #1
   167c8:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    rc = parse_arg_byte_stream_exact_length("slave_interval_range",
   167cc:	2204      	movs	r2, #4
   167ce:	493d      	ldr	r1, [pc, #244]	; (168c4 <cmd_set_adv_data_or_scan_rsp+0x298>)
   167d0:	483d      	ldr	r0, [pc, #244]	; (168c8 <cmd_set_adv_data_or_scan_rsp+0x29c>)
   167d2:	f002 f957 	bl	18a84 <parse_arg_byte_stream_exact_length>
   167d6:	9003      	str	r0, [sp, #12]
    if (rc == 0) {
   167d8:	2800      	cmp	r0, #0
   167da:	d13c      	bne.n	16856 <cmd_set_adv_data_or_scan_rsp+0x22a>
        adv_fields.slave_itvl_range = slave_itvl_range;
   167dc:	4b39      	ldr	r3, [pc, #228]	; (168c4 <cmd_set_adv_data_or_scan_rsp+0x298>)
   167de:	931d      	str	r3, [sp, #116]	; 0x74
    rc = parse_arg_byte_stream("service_data_uuid16",
   167e0:	ab08      	add	r3, sp, #32
   167e2:	4a3a      	ldr	r2, [pc, #232]	; (168cc <cmd_set_adv_data_or_scan_rsp+0x2a0>)
   167e4:	211d      	movs	r1, #29
   167e6:	483a      	ldr	r0, [pc, #232]	; (168d0 <cmd_set_adv_data_or_scan_rsp+0x2a4>)
   167e8:	f002 f938 	bl	18a5c <parse_arg_byte_stream>
   167ec:	9003      	str	r0, [sp, #12]
    if (rc == 0) {
   167ee:	2800      	cmp	r0, #0
   167f0:	d138      	bne.n	16864 <cmd_set_adv_data_or_scan_rsp+0x238>
        adv_fields.svc_data_uuid16 = svc_data_uuid16;
   167f2:	4b36      	ldr	r3, [pc, #216]	; (168cc <cmd_set_adv_data_or_scan_rsp+0x2a0>)
   167f4:	931e      	str	r3, [sp, #120]	; 0x78
        adv_fields.svc_data_uuid16_len = svc_data_uuid16_len;
   167f6:	9b08      	ldr	r3, [sp, #32]
   167f8:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
        rc = parse_arg_byte_stream_exact_length(
   167fc:	2206      	movs	r2, #6
   167fe:	a90e      	add	r1, sp, #56	; 0x38
   16800:	4834      	ldr	r0, [pc, #208]	; (168d4 <cmd_set_adv_data_or_scan_rsp+0x2a8>)
   16802:	f002 f93f 	bl	18a84 <parse_arg_byte_stream_exact_length>
   16806:	9003      	str	r0, [sp, #12]
        if (rc == 0) {
   16808:	2800      	cmp	r0, #0
   1680a:	d16f      	bne.n	168ec <cmd_set_adv_data_or_scan_rsp+0x2c0>
            if (adv_fields.num_public_tgt_addrs >=
   1680c:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
   16810:	2b07      	cmp	r3, #7
   16812:	d82e      	bhi.n	16872 <cmd_set_adv_data_or_scan_rsp+0x246>
            memcpy(public_tgt_addrs[adv_fields.num_public_tgt_addrs],
   16814:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   16818:	4a1a      	ldr	r2, [pc, #104]	; (16884 <cmd_set_adv_data_or_scan_rsp+0x258>)
   1681a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1681e:	980e      	ldr	r0, [sp, #56]	; 0x38
   16820:	f8c2 00a8 	str.w	r0, [r2, #168]	; 0xa8
   16824:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
   16828:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
            adv_fields.num_public_tgt_addrs++;
   1682c:	3301      	adds	r3, #1
   1682e:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
        rc = parse_arg_byte_stream_exact_length(
   16832:	e7e3      	b.n	167fc <cmd_set_adv_data_or_scan_rsp+0x1d0>
            console_printf("invalid 'uuid128' parameter\n");
   16834:	481f      	ldr	r0, [pc, #124]	; (168b4 <cmd_set_adv_data_or_scan_rsp+0x288>)
   16836:	f005 fc79 	bl	1c12c <console_printf>
            return rc;
   1683a:	9803      	ldr	r0, [sp, #12]
   1683c:	e70a      	b.n	16654 <cmd_set_adv_data_or_scan_rsp+0x28>
        console_printf("invalid 'uuids128_is_complete' parameter\n");
   1683e:	4826      	ldr	r0, [pc, #152]	; (168d8 <cmd_set_adv_data_or_scan_rsp+0x2ac>)
   16840:	f005 fc74 	bl	1c12c <console_printf>
        return rc;
   16844:	9803      	ldr	r0, [sp, #12]
   16846:	e705      	b.n	16654 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   16848:	2a02      	cmp	r2, #2
   1684a:	d0bf      	beq.n	167cc <cmd_set_adv_data_or_scan_rsp+0x1a0>
        console_printf("invalid 'tx_power_level' parameter\n");
   1684c:	4823      	ldr	r0, [pc, #140]	; (168dc <cmd_set_adv_data_or_scan_rsp+0x2b0>)
   1684e:	f005 fc6d 	bl	1c12c <console_printf>
        return rc;
   16852:	9803      	ldr	r0, [sp, #12]
   16854:	e6fe      	b.n	16654 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   16856:	2802      	cmp	r0, #2
   16858:	d0c2      	beq.n	167e0 <cmd_set_adv_data_or_scan_rsp+0x1b4>
        console_printf("invalid 'slave_interval_range' parameter\n");
   1685a:	4821      	ldr	r0, [pc, #132]	; (168e0 <cmd_set_adv_data_or_scan_rsp+0x2b4>)
   1685c:	f005 fc66 	bl	1c12c <console_printf>
        return rc;
   16860:	9803      	ldr	r0, [sp, #12]
   16862:	e6f7      	b.n	16654 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   16864:	2802      	cmp	r0, #2
   16866:	d0c9      	beq.n	167fc <cmd_set_adv_data_or_scan_rsp+0x1d0>
        console_printf("invalid 'service_data_uuid16' parameter\n");
   16868:	481e      	ldr	r0, [pc, #120]	; (168e4 <cmd_set_adv_data_or_scan_rsp+0x2b8>)
   1686a:	f005 fc5f 	bl	1c12c <console_printf>
        return rc;
   1686e:	9803      	ldr	r0, [sp, #12]
   16870:	e6f0      	b.n	16654 <cmd_set_adv_data_or_scan_rsp+0x28>
                console_printf("invalid 'public_target_address' parameter\n");
   16872:	481d      	ldr	r0, [pc, #116]	; (168e8 <cmd_set_adv_data_or_scan_rsp+0x2bc>)
   16874:	f005 fc5a 	bl	1c12c <console_printf>
                return EINVAL;
   16878:	2016      	movs	r0, #22
   1687a:	e6eb      	b.n	16654 <cmd_set_adv_data_or_scan_rsp+0x28>
   1687c:	00030be0 	.word	0x00030be0
   16880:	00030c04 	.word	0x00030c04
   16884:	100033f0 	.word	0x100033f0
   16888:	00030be8 	.word	0x00030be8
   1688c:	00030c0c 	.word	0x00030c0c
   16890:	00030c28 	.word	0x00030c28
   16894:	00030c68 	.word	0x00030c68
   16898:	00030c3c 	.word	0x00030c3c
   1689c:	00030c70 	.word	0x00030c70
   168a0:	10003410 	.word	0x10003410
   168a4:	00030c8c 	.word	0x00030c8c
   168a8:	00030ca0 	.word	0x00030ca0
   168ac:	10003450 	.word	0x10003450
   168b0:	00030ccc 	.word	0x00030ccc
   168b4:	00030cd4 	.word	0x00030cd4
   168b8:	00030cf4 	.word	0x00030cf4
   168bc:	00030d38 	.word	0x00030d38
   168c0:	00030d40 	.word	0x00030d40
   168c4:	10003474 	.word	0x10003474
   168c8:	00030d74 	.word	0x00030d74
   168cc:	10003478 	.word	0x10003478
   168d0:	00030db8 	.word	0x00030db8
   168d4:	00030df8 	.word	0x00030df8
   168d8:	00030d0c 	.word	0x00030d0c
   168dc:	00030d50 	.word	0x00030d50
   168e0:	00030d8c 	.word	0x00030d8c
   168e4:	00030dcc 	.word	0x00030dcc
   168e8:	00030e10 	.word	0x00030e10
        } else if (rc == ENOENT) {
   168ec:	2802      	cmp	r0, #2
   168ee:	f040 8082 	bne.w	169f6 <cmd_set_adv_data_or_scan_rsp+0x3ca>
    if (adv_fields.num_public_tgt_addrs > 0) {
   168f2:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
   168f6:	b10b      	cbz	r3, 168fc <cmd_set_adv_data_or_scan_rsp+0x2d0>
        adv_fields.public_tgt_addr = (void *)public_tgt_addrs;
   168f8:	4b69      	ldr	r3, [pc, #420]	; (16aa0 <cmd_set_adv_data_or_scan_rsp+0x474>)
   168fa:	9320      	str	r3, [sp, #128]	; 0x80
    adv_fields.appearance = parse_arg_uint16("appearance", &rc);
   168fc:	a903      	add	r1, sp, #12
   168fe:	4869      	ldr	r0, [pc, #420]	; (16aa4 <cmd_set_adv_data_or_scan_rsp+0x478>)
   16900:	f001 fff1 	bl	188e6 <parse_arg_uint16>
   16904:	f8ad 0086 	strh.w	r0, [sp, #134]	; 0x86
    if (rc == 0) {
   16908:	9b03      	ldr	r3, [sp, #12]
   1690a:	2b00      	cmp	r3, #0
   1690c:	d178      	bne.n	16a00 <cmd_set_adv_data_or_scan_rsp+0x3d4>
        adv_fields.appearance_is_present = 1;
   1690e:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   16912:	f043 0301 	orr.w	r3, r3, #1
   16916:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
    adv_fields.adv_itvl = parse_arg_uint16("advertising_interval", &rc);
   1691a:	a903      	add	r1, sp, #12
   1691c:	4862      	ldr	r0, [pc, #392]	; (16aa8 <cmd_set_adv_data_or_scan_rsp+0x47c>)
   1691e:	f001 ffe2 	bl	188e6 <parse_arg_uint16>
   16922:	f8ad 008a 	strh.w	r0, [sp, #138]	; 0x8a
    if (rc == 0) {
   16926:	9b03      	ldr	r3, [sp, #12]
   16928:	2b00      	cmp	r3, #0
   1692a:	d170      	bne.n	16a0e <cmd_set_adv_data_or_scan_rsp+0x3e2>
        adv_fields.adv_itvl_is_present = 1;
   1692c:	f89d 308c 	ldrb.w	r3, [sp, #140]	; 0x8c
   16930:	f043 0301 	orr.w	r3, r3, #1
   16934:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
    rc = parse_arg_byte_stream("service_data_uuid32",
   16938:	ab07      	add	r3, sp, #28
   1693a:	4a5c      	ldr	r2, [pc, #368]	; (16aac <cmd_set_adv_data_or_scan_rsp+0x480>)
   1693c:	211d      	movs	r1, #29
   1693e:	485c      	ldr	r0, [pc, #368]	; (16ab0 <cmd_set_adv_data_or_scan_rsp+0x484>)
   16940:	f002 f88c 	bl	18a5c <parse_arg_byte_stream>
   16944:	9003      	str	r0, [sp, #12]
    if (rc == 0) {
   16946:	2800      	cmp	r0, #0
   16948:	d168      	bne.n	16a1c <cmd_set_adv_data_or_scan_rsp+0x3f0>
        adv_fields.svc_data_uuid32 = svc_data_uuid32;
   1694a:	4b58      	ldr	r3, [pc, #352]	; (16aac <cmd_set_adv_data_or_scan_rsp+0x480>)
   1694c:	9324      	str	r3, [sp, #144]	; 0x90
        adv_fields.svc_data_uuid32_len = svc_data_uuid32_len;
   1694e:	9b07      	ldr	r3, [sp, #28]
   16950:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
    rc = parse_arg_byte_stream("service_data_uuid128",
   16954:	ab06      	add	r3, sp, #24
   16956:	4a57      	ldr	r2, [pc, #348]	; (16ab4 <cmd_set_adv_data_or_scan_rsp+0x488>)
   16958:	211d      	movs	r1, #29
   1695a:	4857      	ldr	r0, [pc, #348]	; (16ab8 <cmd_set_adv_data_or_scan_rsp+0x48c>)
   1695c:	f002 f87e 	bl	18a5c <parse_arg_byte_stream>
   16960:	9003      	str	r0, [sp, #12]
    if (rc == 0) {
   16962:	2800      	cmp	r0, #0
   16964:	d161      	bne.n	16a2a <cmd_set_adv_data_or_scan_rsp+0x3fe>
        adv_fields.svc_data_uuid128 = svc_data_uuid128;
   16966:	4b53      	ldr	r3, [pc, #332]	; (16ab4 <cmd_set_adv_data_or_scan_rsp+0x488>)
   16968:	9326      	str	r3, [sp, #152]	; 0x98
        adv_fields.svc_data_uuid128_len = svc_data_uuid128_len;
   1696a:	9b06      	ldr	r3, [sp, #24]
   1696c:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
    rc = parse_arg_byte_stream("uri", CMD_ADV_DATA_URI_MAX_LEN, uri, &uri_len);
   16970:	ab05      	add	r3, sp, #20
   16972:	4a52      	ldr	r2, [pc, #328]	; (16abc <cmd_set_adv_data_or_scan_rsp+0x490>)
   16974:	211d      	movs	r1, #29
   16976:	4852      	ldr	r0, [pc, #328]	; (16ac0 <cmd_set_adv_data_or_scan_rsp+0x494>)
   16978:	f002 f870 	bl	18a5c <parse_arg_byte_stream>
   1697c:	9003      	str	r0, [sp, #12]
    if (rc == 0) {
   1697e:	2800      	cmp	r0, #0
   16980:	d15a      	bne.n	16a38 <cmd_set_adv_data_or_scan_rsp+0x40c>
        adv_fields.uri = uri;
   16982:	4b4e      	ldr	r3, [pc, #312]	; (16abc <cmd_set_adv_data_or_scan_rsp+0x490>)
   16984:	9328      	str	r3, [sp, #160]	; 0xa0
        adv_fields.uri_len = uri_len;
   16986:	9b05      	ldr	r3, [sp, #20]
   16988:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
    rc = parse_arg_byte_stream("mfg_data", CMD_ADV_DATA_MFG_DATA_MAX_LEN,
   1698c:	ab04      	add	r3, sp, #16
   1698e:	4a4d      	ldr	r2, [pc, #308]	; (16ac4 <cmd_set_adv_data_or_scan_rsp+0x498>)
   16990:	211d      	movs	r1, #29
   16992:	484d      	ldr	r0, [pc, #308]	; (16ac8 <cmd_set_adv_data_or_scan_rsp+0x49c>)
   16994:	f002 f862 	bl	18a5c <parse_arg_byte_stream>
   16998:	9003      	str	r0, [sp, #12]
    if (rc == 0) {
   1699a:	2800      	cmp	r0, #0
   1699c:	d153      	bne.n	16a46 <cmd_set_adv_data_or_scan_rsp+0x41a>
        adv_fields.mfg_data = mfg_data;
   1699e:	4b49      	ldr	r3, [pc, #292]	; (16ac4 <cmd_set_adv_data_or_scan_rsp+0x498>)
   169a0:	932a      	str	r3, [sp, #168]	; 0xa8
        adv_fields.mfg_data_len = mfg_data_len;
   169a2:	9b04      	ldr	r3, [sp, #16]
   169a4:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
    tmp = parse_arg_long_bounds("eddystone_measured_power", -100, 20, &rc);
   169a8:	ab03      	add	r3, sp, #12
   169aa:	2214      	movs	r2, #20
   169ac:	f06f 0163 	mvn.w	r1, #99	; 0x63
   169b0:	4846      	ldr	r0, [pc, #280]	; (16acc <cmd_set_adv_data_or_scan_rsp+0x4a0>)
   169b2:	f001 ff1e 	bl	187f2 <parse_arg_long_bounds>
    if (rc == 0) {
   169b6:	9b03      	ldr	r3, [sp, #12]
   169b8:	2b00      	cmp	r3, #0
   169ba:	d14b      	bne.n	16a54 <cmd_set_adv_data_or_scan_rsp+0x428>
        eddystone_measured_power = tmp;
   169bc:	b245      	sxtb	r5, r0
    eddystone_url_full = parse_arg_extract("eddystone_url");
   169be:	4844      	ldr	r0, [pc, #272]	; (16ad0 <cmd_set_adv_data_or_scan_rsp+0x4a4>)
   169c0:	f001 fecc 	bl	1875c <parse_arg_extract>
    if (eddystone_url_full != NULL) {
   169c4:	2800      	cmp	r0, #0
   169c6:	d05c      	beq.n	16a82 <cmd_set_adv_data_or_scan_rsp+0x456>
        rc = parse_eddystone_url(eddystone_url_full, &eddystone_url_scheme,
   169c8:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   169cc:	9300      	str	r3, [sp, #0]
   169ce:	f10d 0337 	add.w	r3, sp, #55	; 0x37
   169d2:	aa09      	add	r2, sp, #36	; 0x24
   169d4:	f10d 0135 	add.w	r1, sp, #53	; 0x35
   169d8:	f002 f928 	bl	18c2c <parse_eddystone_url>
   169dc:	9003      	str	r0, [sp, #12]
        if (rc != 0) {
   169de:	2800      	cmp	r0, #0
   169e0:	d041      	beq.n	16a66 <cmd_set_adv_data_or_scan_rsp+0x43a>
    if (rc != 0) {
   169e2:	9803      	ldr	r0, [sp, #12]
   169e4:	2800      	cmp	r0, #0
   169e6:	f43f ae35 	beq.w	16654 <cmd_set_adv_data_or_scan_rsp+0x28>
        console_printf("error setting advertisement data; rc=%d\n", rc);
   169ea:	4601      	mov	r1, r0
   169ec:	4839      	ldr	r0, [pc, #228]	; (16ad4 <cmd_set_adv_data_or_scan_rsp+0x4a8>)
   169ee:	f005 fb9d 	bl	1c12c <console_printf>
        return rc;
   169f2:	9803      	ldr	r0, [sp, #12]
   169f4:	e62e      	b.n	16654 <cmd_set_adv_data_or_scan_rsp+0x28>
            console_printf("invalid 'public_target_address' parameter\n");
   169f6:	4838      	ldr	r0, [pc, #224]	; (16ad8 <cmd_set_adv_data_or_scan_rsp+0x4ac>)
   169f8:	f005 fb98 	bl	1c12c <console_printf>
            return rc;
   169fc:	9803      	ldr	r0, [sp, #12]
   169fe:	e629      	b.n	16654 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   16a00:	2b02      	cmp	r3, #2
   16a02:	d08a      	beq.n	1691a <cmd_set_adv_data_or_scan_rsp+0x2ee>
        console_printf("invalid 'appearance' parameter\n");
   16a04:	4835      	ldr	r0, [pc, #212]	; (16adc <cmd_set_adv_data_or_scan_rsp+0x4b0>)
   16a06:	f005 fb91 	bl	1c12c <console_printf>
        return rc;
   16a0a:	9803      	ldr	r0, [sp, #12]
   16a0c:	e622      	b.n	16654 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   16a0e:	2b02      	cmp	r3, #2
   16a10:	d092      	beq.n	16938 <cmd_set_adv_data_or_scan_rsp+0x30c>
        console_printf("invalid 'advertising_interval' parameter\n");
   16a12:	4833      	ldr	r0, [pc, #204]	; (16ae0 <cmd_set_adv_data_or_scan_rsp+0x4b4>)
   16a14:	f005 fb8a 	bl	1c12c <console_printf>
        return rc;
   16a18:	9803      	ldr	r0, [sp, #12]
   16a1a:	e61b      	b.n	16654 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   16a1c:	2802      	cmp	r0, #2
   16a1e:	d099      	beq.n	16954 <cmd_set_adv_data_or_scan_rsp+0x328>
        console_printf("invalid 'service_data_uuid32' parameter\n");
   16a20:	4830      	ldr	r0, [pc, #192]	; (16ae4 <cmd_set_adv_data_or_scan_rsp+0x4b8>)
   16a22:	f005 fb83 	bl	1c12c <console_printf>
        return rc;
   16a26:	9803      	ldr	r0, [sp, #12]
   16a28:	e614      	b.n	16654 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   16a2a:	2802      	cmp	r0, #2
   16a2c:	d0a0      	beq.n	16970 <cmd_set_adv_data_or_scan_rsp+0x344>
        console_printf("invalid 'service_data_uuid128' parameter\n");
   16a2e:	482e      	ldr	r0, [pc, #184]	; (16ae8 <cmd_set_adv_data_or_scan_rsp+0x4bc>)
   16a30:	f005 fb7c 	bl	1c12c <console_printf>
        return rc;
   16a34:	9803      	ldr	r0, [sp, #12]
   16a36:	e60d      	b.n	16654 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   16a38:	2802      	cmp	r0, #2
   16a3a:	d0a7      	beq.n	1698c <cmd_set_adv_data_or_scan_rsp+0x360>
        console_printf("invalid 'uri' parameter\n");
   16a3c:	482b      	ldr	r0, [pc, #172]	; (16aec <cmd_set_adv_data_or_scan_rsp+0x4c0>)
   16a3e:	f005 fb75 	bl	1c12c <console_printf>
        return rc;
   16a42:	9803      	ldr	r0, [sp, #12]
   16a44:	e606      	b.n	16654 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   16a46:	2802      	cmp	r0, #2
   16a48:	d0ae      	beq.n	169a8 <cmd_set_adv_data_or_scan_rsp+0x37c>
        console_printf("invalid 'mfg_data' parameter\n");
   16a4a:	4829      	ldr	r0, [pc, #164]	; (16af0 <cmd_set_adv_data_or_scan_rsp+0x4c4>)
   16a4c:	f005 fb6e 	bl	1c12c <console_printf>
        return rc;
   16a50:	9803      	ldr	r0, [sp, #12]
   16a52:	e5ff      	b.n	16654 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   16a54:	2b02      	cmp	r3, #2
   16a56:	d101      	bne.n	16a5c <cmd_set_adv_data_or_scan_rsp+0x430>
    int8_t eddystone_measured_power = 0;
   16a58:	2500      	movs	r5, #0
   16a5a:	e7b0      	b.n	169be <cmd_set_adv_data_or_scan_rsp+0x392>
        console_printf("invalid 'eddystone_measured_power' parameter\n");
   16a5c:	4825      	ldr	r0, [pc, #148]	; (16af4 <cmd_set_adv_data_or_scan_rsp+0x4c8>)
   16a5e:	f005 fb65 	bl	1c12c <console_printf>
        return rc;
   16a62:	9803      	ldr	r0, [sp, #12]
   16a64:	e5f6      	b.n	16654 <cmd_set_adv_data_or_scan_rsp+0x28>
        rc = ble_eddystone_set_adv_data_url(&adv_fields, eddystone_url_scheme,
   16a66:	9501      	str	r5, [sp, #4]
   16a68:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
   16a6c:	9300      	str	r3, [sp, #0]
   16a6e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   16a72:	aa09      	add	r2, sp, #36	; 0x24
   16a74:	f89d 1035 	ldrb.w	r1, [sp, #53]	; 0x35
   16a78:	a814      	add	r0, sp, #80	; 0x50
   16a7a:	f00a fa47 	bl	20f0c <ble_eddystone_set_adv_data_url>
   16a7e:	9003      	str	r0, [sp, #12]
   16a80:	e7af      	b.n	169e2 <cmd_set_adv_data_or_scan_rsp+0x3b6>
        if (scan_rsp) {
   16a82:	b124      	cbz	r4, 16a8e <cmd_set_adv_data_or_scan_rsp+0x462>
            rc = ble_gap_adv_rsp_set_fields(&adv_fields);
   16a84:	a814      	add	r0, sp, #80	; 0x50
   16a86:	f00b fb61 	bl	2214c <ble_gap_adv_rsp_set_fields>
   16a8a:	9003      	str	r0, [sp, #12]
   16a8c:	e7a9      	b.n	169e2 <cmd_set_adv_data_or_scan_rsp+0x3b6>
            rc = ble_gap_adv_set_fields(&adv_fields);
   16a8e:	a814      	add	r0, sp, #80	; 0x50
   16a90:	f00b fb4a 	bl	22128 <ble_gap_adv_set_fields>
   16a94:	9003      	str	r0, [sp, #12]
   16a96:	e7a4      	b.n	169e2 <cmd_set_adv_data_or_scan_rsp+0x3b6>
        return -1;
   16a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16a9c:	e5da      	b.n	16654 <cmd_set_adv_data_or_scan_rsp+0x28>
   16a9e:	bf00      	nop
   16aa0:	10003498 	.word	0x10003498
   16aa4:	00030e3c 	.word	0x00030e3c
   16aa8:	00030e68 	.word	0x00030e68
   16aac:	100034c8 	.word	0x100034c8
   16ab0:	00030eac 	.word	0x00030eac
   16ab4:	100034e8 	.word	0x100034e8
   16ab8:	00030eec 	.word	0x00030eec
   16abc:	10003508 	.word	0x10003508
   16ac0:	00030f30 	.word	0x00030f30
   16ac4:	10003528 	.word	0x10003528
   16ac8:	00030f50 	.word	0x00030f50
   16acc:	00030f7c 	.word	0x00030f7c
   16ad0:	00030fc8 	.word	0x00030fc8
   16ad4:	00030fd8 	.word	0x00030fd8
   16ad8:	00030e10 	.word	0x00030e10
   16adc:	00030e48 	.word	0x00030e48
   16ae0:	00030e80 	.word	0x00030e80
   16ae4:	00030ec0 	.word	0x00030ec0
   16ae8:	00030f04 	.word	0x00030f04
   16aec:	00030f34 	.word	0x00030f34
   16af0:	00030f5c 	.word	0x00030f5c
   16af4:	00030f98 	.word	0x00030f98

00016af8 <cmd_set_scan_rsp>:
{
   16af8:	b508      	push	{r3, lr}
    return cmd_set_adv_data_or_scan_rsp(argc, argv, true, false);
   16afa:	2300      	movs	r3, #0
   16afc:	2201      	movs	r2, #1
   16afe:	f7ff fd95 	bl	1662c <cmd_set_adv_data_or_scan_rsp>
}
   16b02:	bd08      	pop	{r3, pc}

00016b04 <cmd_set_adv_data>:
{
   16b04:	b508      	push	{r3, lr}
    return cmd_set_adv_data_or_scan_rsp(argc, argv, false, false);
   16b06:	2300      	movs	r3, #0
   16b08:	461a      	mov	r2, r3
   16b0a:	f7ff fd8f 	bl	1662c <cmd_set_adv_data_or_scan_rsp>
}
   16b0e:	bd08      	pop	{r3, pc}

00016b10 <cmd_set_addr>:
{
   16b10:	b510      	push	{r4, lr}
   16b12:	b082      	sub	sp, #8
    rc = parse_dev_addr(NULL, cmd_addr_type, &addr);
   16b14:	466a      	mov	r2, sp
   16b16:	490c      	ldr	r1, [pc, #48]	; (16b48 <cmd_set_addr+0x38>)
   16b18:	2000      	movs	r0, #0
   16b1a:	f7ff fa35 	bl	15f88 <parse_dev_addr>
    if (rc != 0) {
   16b1e:	b938      	cbnz	r0, 16b30 <cmd_set_addr+0x20>
    switch (addr.type) {
   16b20:	f89d 3000 	ldrb.w	r3, [sp]
   16b24:	2b01      	cmp	r3, #1
   16b26:	d008      	beq.n	16b3a <cmd_set_addr+0x2a>
        return BLE_HS_EUNKNOWN;
   16b28:	2411      	movs	r4, #17
}
   16b2a:	4620      	mov	r0, r4
   16b2c:	b002      	add	sp, #8
   16b2e:	bd10      	pop	{r4, pc}
   16b30:	4604      	mov	r4, r0
        console_printf("invalid 'addr' parameter\n");
   16b32:	4806      	ldr	r0, [pc, #24]	; (16b4c <cmd_set_addr+0x3c>)
   16b34:	f005 fafa 	bl	1c12c <console_printf>
        return rc;
   16b38:	e7f7      	b.n	16b2a <cmd_set_addr+0x1a>
        rc = ble_hs_id_set_rnd(addr.val);
   16b3a:	f10d 0001 	add.w	r0, sp, #1
   16b3e:	f011 fc05 	bl	2834c <ble_hs_id_set_rnd>
   16b42:	4604      	mov	r4, r0
        if (rc != 0) {
   16b44:	e7f1      	b.n	16b2a <cmd_set_addr+0x1a>
   16b46:	bf00      	nop
   16b48:	00032f30 	.word	0x00032f30
   16b4c:	0003085c 	.word	0x0003085c

00016b50 <cmd_set>:
{
   16b50:	b570      	push	{r4, r5, r6, lr}
   16b52:	b086      	sub	sp, #24
    rc = parse_arg_all(argc - 1, argv + 1);
   16b54:	3104      	adds	r1, #4
   16b56:	3801      	subs	r0, #1
   16b58:	f002 f81c 	bl	18b94 <parse_arg_all>
   16b5c:	4604      	mov	r4, r0
   16b5e:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   16b60:	b110      	cbz	r0, 16b68 <cmd_set+0x18>
}
   16b62:	4620      	mov	r0, r4
   16b64:	b006      	add	sp, #24
   16b66:	bd70      	pop	{r4, r5, r6, pc}
    rc = parse_arg_find_idx("addr");
   16b68:	4820      	ldr	r0, [pc, #128]	; (16bec <cmd_set+0x9c>)
   16b6a:	f001 fdc3 	bl	186f4 <parse_arg_find_idx>
   16b6e:	9001      	str	r0, [sp, #4]
    if (rc != -1) {
   16b70:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   16b74:	d01f      	beq.n	16bb6 <cmd_set+0x66>
        rc = cmd_set_addr();
   16b76:	f7ff ffcb 	bl	16b10 <cmd_set_addr>
   16b7a:	9001      	str	r0, [sp, #4]
        if (rc != 0) {
   16b7c:	2800      	cmp	r0, #0
   16b7e:	d132      	bne.n	16be6 <cmd_set+0x96>
        good = 1;
   16b80:	2601      	movs	r6, #1
    mtu = parse_arg_uint16("mtu", &rc);
   16b82:	a901      	add	r1, sp, #4
   16b84:	481a      	ldr	r0, [pc, #104]	; (16bf0 <cmd_set+0xa0>)
   16b86:	f001 feae 	bl	188e6 <parse_arg_uint16>
    if (rc == 0) {
   16b8a:	9b01      	ldr	r3, [sp, #4]
   16b8c:	b1ab      	cbz	r3, 16bba <cmd_set+0x6a>
    } else if (rc != ENOENT) {
   16b8e:	2b02      	cmp	r3, #2
   16b90:	d11a      	bne.n	16bc8 <cmd_set+0x78>
    rc = parse_arg_byte_stream_exact_length("irk", irk, 16);
   16b92:	2210      	movs	r2, #16
   16b94:	a902      	add	r1, sp, #8
   16b96:	4817      	ldr	r0, [pc, #92]	; (16bf4 <cmd_set+0xa4>)
   16b98:	f001 ff74 	bl	18a84 <parse_arg_byte_stream_exact_length>
   16b9c:	4605      	mov	r5, r0
   16b9e:	9001      	str	r0, [sp, #4]
    if (rc == 0) {
   16ba0:	b1b8      	cbz	r0, 16bd2 <cmd_set+0x82>
    } else if (rc != ENOENT) {
   16ba2:	2802      	cmp	r0, #2
   16ba4:	d11a      	bne.n	16bdc <cmd_set+0x8c>
    if (!good) {
   16ba6:	2e00      	cmp	r6, #0
   16ba8:	d1db      	bne.n	16b62 <cmd_set+0x12>
        console_printf("Error: no valid settings specified\n");
   16baa:	4813      	ldr	r0, [pc, #76]	; (16bf8 <cmd_set+0xa8>)
   16bac:	f005 fabe 	bl	1c12c <console_printf>
        return -1;
   16bb0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16bb4:	e7d5      	b.n	16b62 <cmd_set+0x12>
    int good = 0;
   16bb6:	4626      	mov	r6, r4
   16bb8:	e7e3      	b.n	16b82 <cmd_set+0x32>
        rc = ble_att_set_preferred_mtu(mtu);
   16bba:	f008 f95f 	bl	1ee7c <ble_att_set_preferred_mtu>
   16bbe:	9001      	str	r0, [sp, #4]
        if (rc == 0) {
   16bc0:	2800      	cmp	r0, #0
   16bc2:	d1e6      	bne.n	16b92 <cmd_set+0x42>
            good = 1;
   16bc4:	2601      	movs	r6, #1
   16bc6:	e7e4      	b.n	16b92 <cmd_set+0x42>
        console_printf("invalid 'mtu' parameter\n");
   16bc8:	480c      	ldr	r0, [pc, #48]	; (16bfc <cmd_set+0xac>)
   16bca:	f005 faaf 	bl	1c12c <console_printf>
        return rc;
   16bce:	9c01      	ldr	r4, [sp, #4]
   16bd0:	e7c7      	b.n	16b62 <cmd_set+0x12>
        ble_hs_pvcy_set_our_irk(irk);
   16bd2:	a802      	add	r0, sp, #8
   16bd4:	f011 fe44 	bl	28860 <ble_hs_pvcy_set_our_irk>
    return 0;
   16bd8:	462c      	mov	r4, r5
   16bda:	e7c2      	b.n	16b62 <cmd_set+0x12>
        console_printf("invalid 'irk' parameter\n");
   16bdc:	4808      	ldr	r0, [pc, #32]	; (16c00 <cmd_set+0xb0>)
   16bde:	f005 faa5 	bl	1c12c <console_printf>
        return rc;
   16be2:	9c01      	ldr	r4, [sp, #4]
   16be4:	e7bd      	b.n	16b62 <cmd_set+0x12>
            return rc;
   16be6:	4604      	mov	r4, r0
   16be8:	e7bb      	b.n	16b62 <cmd_set+0x12>
   16bea:	bf00      	nop
   16bec:	00030854 	.word	0x00030854
   16bf0:	00031004 	.word	0x00031004
   16bf4:	000308e0 	.word	0x000308e0
   16bf8:	00031024 	.word	0x00031024
   16bfc:	00031008 	.word	0x00031008
   16c00:	000308e4 	.word	0x000308e4

00016c04 <cmd_scan>:
{
   16c04:	b5f0      	push	{r4, r5, r6, r7, lr}
   16c06:	b08f      	sub	sp, #60	; 0x3c
   16c08:	4604      	mov	r4, r0
   16c0a:	460d      	mov	r5, r1
    struct ble_gap_disc_params params = {0};
   16c0c:	2300      	movs	r3, #0
   16c0e:	930c      	str	r3, [sp, #48]	; 0x30
   16c10:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    struct ble_gap_ext_disc_params uncoded = {0};
   16c14:	930a      	str	r3, [sp, #40]	; 0x28
   16c16:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    struct ble_gap_ext_disc_params coded = {0};
   16c1a:	9308      	str	r3, [sp, #32]
   16c1c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    rc = parse_arg_all(argc - 1, argv + 1);
   16c20:	3104      	adds	r1, #4
   16c22:	3801      	subs	r0, #1
   16c24:	f001 ffb6 	bl	18b94 <parse_arg_all>
   16c28:	9007      	str	r0, [sp, #28]
    if (rc != 0) {
   16c2a:	2800      	cmp	r0, #0
   16c2c:	f040 8094 	bne.w	16d58 <cmd_scan+0x154>
    if (argc > 1 && strcmp(argv[1], "cancel") == 0) {
   16c30:	2c01      	cmp	r4, #1
   16c32:	dd05      	ble.n	16c40 <cmd_scan+0x3c>
   16c34:	49a6      	ldr	r1, [pc, #664]	; (16ed0 <cmd_scan+0x2cc>)
   16c36:	6868      	ldr	r0, [r5, #4]
   16c38:	f004 f877 	bl	1ad2a <strcmp>
   16c3c:	2800      	cmp	r0, #0
   16c3e:	d07d      	beq.n	16d3c <cmd_scan+0x138>
    extended = parse_arg_kv_dflt("extended", cmd_scan_ext_types, 0, &rc);
   16c40:	ab07      	add	r3, sp, #28
   16c42:	2200      	movs	r2, #0
   16c44:	49a3      	ldr	r1, [pc, #652]	; (16ed4 <cmd_scan+0x2d0>)
   16c46:	48a4      	ldr	r0, [pc, #656]	; (16ed8 <cmd_scan+0x2d4>)
   16c48:	f001 fef5 	bl	18a36 <parse_arg_kv_dflt>
   16c4c:	4604      	mov	r4, r0
   16c4e:	b2c6      	uxtb	r6, r0
    if (rc != 0) {
   16c50:	9b07      	ldr	r3, [sp, #28]
   16c52:	2b00      	cmp	r3, #0
   16c54:	d17c      	bne.n	16d50 <cmd_scan+0x14c>
    duration_ms = parse_arg_time_dflt("duration", 10000, BLE_HS_FOREVER, &rc);
   16c56:	ab07      	add	r3, sp, #28
   16c58:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   16c5c:	f242 7110 	movw	r1, #10000	; 0x2710
   16c60:	489e      	ldr	r0, [pc, #632]	; (16edc <cmd_scan+0x2d8>)
   16c62:	f001 fe95 	bl	18990 <parse_arg_time_dflt>
   16c66:	4605      	mov	r5, r0
    if (rc != 0) {
   16c68:	9b07      	ldr	r3, [sp, #28]
   16c6a:	2b00      	cmp	r3, #0
   16c6c:	d176      	bne.n	16d5c <cmd_scan+0x158>
    params.limited = parse_arg_bool_dflt("limited", 0, &rc);
   16c6e:	aa07      	add	r2, sp, #28
   16c70:	2100      	movs	r1, #0
   16c72:	489b      	ldr	r0, [pc, #620]	; (16ee0 <cmd_scan+0x2dc>)
   16c74:	f001 fe23 	bl	188be <parse_arg_bool_dflt>
   16c78:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
   16c7c:	f360 0300 	bfi	r3, r0, #0, #1
   16c80:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    if (rc != 0) {
   16c84:	9b07      	ldr	r3, [sp, #28]
   16c86:	2b00      	cmp	r3, #0
   16c88:	d16d      	bne.n	16d66 <cmd_scan+0x162>
    params.passive = parse_arg_bool_dflt("passive", 0, &rc);
   16c8a:	aa07      	add	r2, sp, #28
   16c8c:	2100      	movs	r1, #0
   16c8e:	4895      	ldr	r0, [pc, #596]	; (16ee4 <cmd_scan+0x2e0>)
   16c90:	f001 fe15 	bl	188be <parse_arg_bool_dflt>
   16c94:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
   16c98:	f360 0341 	bfi	r3, r0, #1, #1
   16c9c:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    if (rc != 0) {
   16ca0:	9b07      	ldr	r3, [sp, #28]
   16ca2:	2b00      	cmp	r3, #0
   16ca4:	d164      	bne.n	16d70 <cmd_scan+0x16c>
    params.itvl = parse_arg_time_dflt("interval", 625, 0, &rc);
   16ca6:	ab07      	add	r3, sp, #28
   16ca8:	2200      	movs	r2, #0
   16caa:	f240 2171 	movw	r1, #625	; 0x271
   16cae:	488e      	ldr	r0, [pc, #568]	; (16ee8 <cmd_scan+0x2e4>)
   16cb0:	f001 fe6e 	bl	18990 <parse_arg_time_dflt>
   16cb4:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
    if (rc != 0) {
   16cb8:	9b07      	ldr	r3, [sp, #28]
   16cba:	2b00      	cmp	r3, #0
   16cbc:	d15d      	bne.n	16d7a <cmd_scan+0x176>
    params.window = parse_arg_time_dflt("window", 625, 0, &rc);
   16cbe:	ab07      	add	r3, sp, #28
   16cc0:	2200      	movs	r2, #0
   16cc2:	f240 2171 	movw	r1, #625	; 0x271
   16cc6:	4889      	ldr	r0, [pc, #548]	; (16eec <cmd_scan+0x2e8>)
   16cc8:	f001 fe62 	bl	18990 <parse_arg_time_dflt>
   16ccc:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
    if (rc != 0) {
   16cd0:	9b07      	ldr	r3, [sp, #28]
   16cd2:	2b00      	cmp	r3, #0
   16cd4:	d156      	bne.n	16d84 <cmd_scan+0x180>
    params.filter_policy = parse_arg_kv_dflt("filter", cmd_scan_filt_policies,
   16cd6:	ab07      	add	r3, sp, #28
   16cd8:	2200      	movs	r2, #0
   16cda:	4985      	ldr	r1, [pc, #532]	; (16ef0 <cmd_scan+0x2ec>)
   16cdc:	4885      	ldr	r0, [pc, #532]	; (16ef4 <cmd_scan+0x2f0>)
   16cde:	f001 feaa 	bl	18a36 <parse_arg_kv_dflt>
   16ce2:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    if (rc != 0) {
   16ce6:	9b07      	ldr	r3, [sp, #28]
   16ce8:	2b00      	cmp	r3, #0
   16cea:	d150      	bne.n	16d8e <cmd_scan+0x18a>
    params.filter_duplicates = parse_arg_bool_dflt("nodups", 0, &rc);
   16cec:	aa07      	add	r2, sp, #28
   16cee:	2100      	movs	r1, #0
   16cf0:	4881      	ldr	r0, [pc, #516]	; (16ef8 <cmd_scan+0x2f4>)
   16cf2:	f001 fde4 	bl	188be <parse_arg_bool_dflt>
   16cf6:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
   16cfa:	f360 0382 	bfi	r3, r0, #2, #1
   16cfe:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    if (rc != 0) {
   16d02:	9b07      	ldr	r3, [sp, #28]
   16d04:	2b00      	cmp	r3, #0
   16d06:	d147      	bne.n	16d98 <cmd_scan+0x194>
    own_addr_type = parse_arg_kv_dflt("own_addr_type", cmd_own_addr_types,
   16d08:	ab07      	add	r3, sp, #28
   16d0a:	2200      	movs	r2, #0
   16d0c:	497b      	ldr	r1, [pc, #492]	; (16efc <cmd_scan+0x2f8>)
   16d0e:	487c      	ldr	r0, [pc, #496]	; (16f00 <cmd_scan+0x2fc>)
   16d10:	f001 fe91 	bl	18a36 <parse_arg_kv_dflt>
   16d14:	b2c7      	uxtb	r7, r0
    if (rc != 0) {
   16d16:	9b07      	ldr	r3, [sp, #28]
   16d18:	2b00      	cmp	r3, #0
   16d1a:	d142      	bne.n	16da2 <cmd_scan+0x19e>
    if (extended == 0) {
   16d1c:	2e00      	cmp	r6, #0
   16d1e:	d145      	bne.n	16dac <cmd_scan+0x1a8>
        rc = btshell_scan(own_addr_type, duration_ms, &params, &g_scan_opts);
   16d20:	4b78      	ldr	r3, [pc, #480]	; (16f04 <cmd_scan+0x300>)
   16d22:	aa0c      	add	r2, sp, #48	; 0x30
   16d24:	4629      	mov	r1, r5
   16d26:	4638      	mov	r0, r7
   16d28:	f7fe fd1c 	bl	15764 <btshell_scan>
   16d2c:	9007      	str	r0, [sp, #28]
        if (rc != 0) {
   16d2e:	b198      	cbz	r0, 16d58 <cmd_scan+0x154>
            console_printf("error scanning; rc=%d\n", rc);
   16d30:	4601      	mov	r1, r0
   16d32:	4875      	ldr	r0, [pc, #468]	; (16f08 <cmd_scan+0x304>)
   16d34:	f005 f9fa 	bl	1c12c <console_printf>
            return rc;
   16d38:	9807      	ldr	r0, [sp, #28]
   16d3a:	e00d      	b.n	16d58 <cmd_scan+0x154>
        rc = btshell_scan_cancel();
   16d3c:	f7fe fd2c 	bl	15798 <btshell_scan_cancel>
   16d40:	9007      	str	r0, [sp, #28]
        if (rc != 0) {
   16d42:	b148      	cbz	r0, 16d58 <cmd_scan+0x154>
            console_printf("scan cancel fail: %d\n", rc);
   16d44:	4601      	mov	r1, r0
   16d46:	4871      	ldr	r0, [pc, #452]	; (16f0c <cmd_scan+0x308>)
   16d48:	f005 f9f0 	bl	1c12c <console_printf>
            return rc;
   16d4c:	9807      	ldr	r0, [sp, #28]
   16d4e:	e003      	b.n	16d58 <cmd_scan+0x154>
        console_printf("invalid 'extended' parameter\n");
   16d50:	486f      	ldr	r0, [pc, #444]	; (16f10 <cmd_scan+0x30c>)
   16d52:	f005 f9eb 	bl	1c12c <console_printf>
        return rc;
   16d56:	9807      	ldr	r0, [sp, #28]
}
   16d58:	b00f      	add	sp, #60	; 0x3c
   16d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        console_printf("invalid 'duration' parameter\n");
   16d5c:	486d      	ldr	r0, [pc, #436]	; (16f14 <cmd_scan+0x310>)
   16d5e:	f005 f9e5 	bl	1c12c <console_printf>
        return rc;
   16d62:	9807      	ldr	r0, [sp, #28]
   16d64:	e7f8      	b.n	16d58 <cmd_scan+0x154>
        console_printf("invalid 'limited' parameter\n");
   16d66:	486c      	ldr	r0, [pc, #432]	; (16f18 <cmd_scan+0x314>)
   16d68:	f005 f9e0 	bl	1c12c <console_printf>
        return rc;
   16d6c:	9807      	ldr	r0, [sp, #28]
   16d6e:	e7f3      	b.n	16d58 <cmd_scan+0x154>
        console_printf("invalid 'passive' parameter\n");
   16d70:	486a      	ldr	r0, [pc, #424]	; (16f1c <cmd_scan+0x318>)
   16d72:	f005 f9db 	bl	1c12c <console_printf>
        return rc;
   16d76:	9807      	ldr	r0, [sp, #28]
   16d78:	e7ee      	b.n	16d58 <cmd_scan+0x154>
        console_printf("invalid 'interval' parameter\n");
   16d7a:	4869      	ldr	r0, [pc, #420]	; (16f20 <cmd_scan+0x31c>)
   16d7c:	f005 f9d6 	bl	1c12c <console_printf>
        return rc;
   16d80:	9807      	ldr	r0, [sp, #28]
   16d82:	e7e9      	b.n	16d58 <cmd_scan+0x154>
        console_printf("invalid 'window' parameter\n");
   16d84:	4867      	ldr	r0, [pc, #412]	; (16f24 <cmd_scan+0x320>)
   16d86:	f005 f9d1 	bl	1c12c <console_printf>
        return rc;
   16d8a:	9807      	ldr	r0, [sp, #28]
   16d8c:	e7e4      	b.n	16d58 <cmd_scan+0x154>
        console_printf("invalid 'filter' parameter\n");
   16d8e:	4866      	ldr	r0, [pc, #408]	; (16f28 <cmd_scan+0x324>)
   16d90:	f005 f9cc 	bl	1c12c <console_printf>
        return rc;
   16d94:	9807      	ldr	r0, [sp, #28]
   16d96:	e7df      	b.n	16d58 <cmd_scan+0x154>
        console_printf("invalid 'nodups' parameter\n");
   16d98:	4864      	ldr	r0, [pc, #400]	; (16f2c <cmd_scan+0x328>)
   16d9a:	f005 f9c7 	bl	1c12c <console_printf>
        return rc;
   16d9e:	9807      	ldr	r0, [sp, #28]
   16da0:	e7da      	b.n	16d58 <cmd_scan+0x154>
        console_printf("invalid 'own_addr_type' parameter\n");
   16da2:	4863      	ldr	r0, [pc, #396]	; (16f30 <cmd_scan+0x32c>)
   16da4:	f005 f9c2 	bl	1c12c <console_printf>
        return rc;
   16da8:	9807      	ldr	r0, [sp, #28]
   16daa:	e7d5      	b.n	16d58 <cmd_scan+0x154>
    uncoded.passive = params.passive;
   16dac:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
   16db0:	f3c3 0340 	ubfx	r3, r3, #1, #1
   16db4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   16db8:	f363 0200 	bfi	r2, r3, #0, #1
   16dbc:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
    uncoded.itvl = params.itvl;
   16dc0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   16dc4:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    uncoded.window = params.window;
   16dc8:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   16dcc:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    duration = parse_arg_time_dflt("extended_duration", 10000, 0, &rc);
   16dd0:	ab07      	add	r3, sp, #28
   16dd2:	2200      	movs	r2, #0
   16dd4:	f242 7110 	movw	r1, #10000	; 0x2710
   16dd8:	4856      	ldr	r0, [pc, #344]	; (16f34 <cmd_scan+0x330>)
   16dda:	f001 fdd9 	bl	18990 <parse_arg_time_dflt>
   16dde:	b285      	uxth	r5, r0
    if (rc != 0) {
   16de0:	9b07      	ldr	r3, [sp, #28]
   16de2:	2b00      	cmp	r3, #0
   16de4:	d140      	bne.n	16e68 <cmd_scan+0x264>
    period = parse_arg_time_dflt("extended_period", 1280000, 0, &rc);
   16de6:	ab07      	add	r3, sp, #28
   16de8:	2200      	movs	r2, #0
   16dea:	4953      	ldr	r1, [pc, #332]	; (16f38 <cmd_scan+0x334>)
   16dec:	4853      	ldr	r0, [pc, #332]	; (16f3c <cmd_scan+0x338>)
   16dee:	f001 fdcf 	bl	18990 <parse_arg_time_dflt>
   16df2:	b286      	uxth	r6, r0
    if (rc != 0) {
   16df4:	9b07      	ldr	r3, [sp, #28]
   16df6:	2b00      	cmp	r3, #0
   16df8:	d13b      	bne.n	16e72 <cmd_scan+0x26e>
    coded.itvl = parse_arg_time_dflt("longrange_interval", 625, 0, &rc);
   16dfa:	ab07      	add	r3, sp, #28
   16dfc:	2200      	movs	r2, #0
   16dfe:	f240 2171 	movw	r1, #625	; 0x271
   16e02:	484f      	ldr	r0, [pc, #316]	; (16f40 <cmd_scan+0x33c>)
   16e04:	f001 fdc4 	bl	18990 <parse_arg_time_dflt>
   16e08:	f8ad 0020 	strh.w	r0, [sp, #32]
    if (rc != 0) {
   16e0c:	9b07      	ldr	r3, [sp, #28]
   16e0e:	2b00      	cmp	r3, #0
   16e10:	d134      	bne.n	16e7c <cmd_scan+0x278>
    coded.window = parse_arg_time_dflt("longrange_window", 625, 0, &rc);
   16e12:	ab07      	add	r3, sp, #28
   16e14:	2200      	movs	r2, #0
   16e16:	f240 2171 	movw	r1, #625	; 0x271
   16e1a:	484a      	ldr	r0, [pc, #296]	; (16f44 <cmd_scan+0x340>)
   16e1c:	f001 fdb8 	bl	18990 <parse_arg_time_dflt>
   16e20:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
    if (rc != 0) {
   16e24:	9b07      	ldr	r3, [sp, #28]
   16e26:	bb73      	cbnz	r3, 16e86 <cmd_scan+0x282>
    coded.passive = parse_arg_uint16_dflt("longrange_passive", 0, &rc);
   16e28:	aa07      	add	r2, sp, #28
   16e2a:	2100      	movs	r1, #0
   16e2c:	4846      	ldr	r0, [pc, #280]	; (16f48 <cmd_scan+0x344>)
   16e2e:	f001 fd9d 	bl	1896c <parse_arg_uint16_dflt>
   16e32:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   16e36:	f360 0300 	bfi	r3, r0, #0, #1
   16e3a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if (rc != 0) {
   16e3e:	9b07      	ldr	r3, [sp, #28]
   16e40:	bb33      	cbnz	r3, 16e90 <cmd_scan+0x28c>
    switch (extended) {
   16e42:	b2e4      	uxtb	r4, r4
   16e44:	2c02      	cmp	r4, #2
   16e46:	f000 808b 	beq.w	16f60 <cmd_scan+0x35c>
   16e4a:	2c03      	cmp	r4, #3
   16e4c:	f000 809f 	beq.w	16f8e <cmd_scan+0x38a>
   16e50:	2c01      	cmp	r4, #1
   16e52:	d022      	beq.n	16e9a <cmd_scan+0x296>
        assert(0);
   16e54:	f7fd fc56 	bl	14704 <hal_debugger_connected>
   16e58:	b100      	cbz	r0, 16e5c <cmd_scan+0x258>
   16e5a:	be01      	bkpt	0x0001
   16e5c:	2300      	movs	r3, #0
   16e5e:	461a      	mov	r2, r3
   16e60:	4619      	mov	r1, r3
   16e62:	4618      	mov	r0, r3
   16e64:	f001 ff5e 	bl	18d24 <__assert_func>
        console_printf("invalid 'extended_duration' parameter\n");
   16e68:	4838      	ldr	r0, [pc, #224]	; (16f4c <cmd_scan+0x348>)
   16e6a:	f005 f95f 	bl	1c12c <console_printf>
        return rc;
   16e6e:	9807      	ldr	r0, [sp, #28]
   16e70:	e772      	b.n	16d58 <cmd_scan+0x154>
        console_printf("invalid 'extended_period' parameter\n");
   16e72:	4837      	ldr	r0, [pc, #220]	; (16f50 <cmd_scan+0x34c>)
   16e74:	f005 f95a 	bl	1c12c <console_printf>
        return rc;
   16e78:	9807      	ldr	r0, [sp, #28]
   16e7a:	e76d      	b.n	16d58 <cmd_scan+0x154>
        console_printf("invalid 'longrange_interval' parameter\n");
   16e7c:	4835      	ldr	r0, [pc, #212]	; (16f54 <cmd_scan+0x350>)
   16e7e:	f005 f955 	bl	1c12c <console_printf>
        return rc;
   16e82:	9807      	ldr	r0, [sp, #28]
   16e84:	e768      	b.n	16d58 <cmd_scan+0x154>
        console_printf("invalid 'longrange_window' parameter\n");
   16e86:	4834      	ldr	r0, [pc, #208]	; (16f58 <cmd_scan+0x354>)
   16e88:	f005 f950 	bl	1c12c <console_printf>
        return rc;
   16e8c:	9807      	ldr	r0, [sp, #28]
   16e8e:	e763      	b.n	16d58 <cmd_scan+0x154>
        console_printf("invalid 'longrange_passive' parameter\n");
   16e90:	4832      	ldr	r0, [pc, #200]	; (16f5c <cmd_scan+0x358>)
   16e92:	f005 f94b 	bl	1c12c <console_printf>
        return rc;
   16e96:	9807      	ldr	r0, [sp, #28]
   16e98:	e75e      	b.n	16d58 <cmd_scan+0x154>
                              params.filter_duplicates, params.filter_policy,
   16e9a:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
                              params.limited, &uncoded, NULL,
   16e9e:	f003 0201 	and.w	r2, r3, #1
        rc = btshell_ext_scan(own_addr_type, duration, period,
   16ea2:	4918      	ldr	r1, [pc, #96]	; (16f04 <cmd_scan+0x300>)
   16ea4:	9104      	str	r1, [sp, #16]
   16ea6:	2100      	movs	r1, #0
   16ea8:	9103      	str	r1, [sp, #12]
   16eaa:	a90a      	add	r1, sp, #40	; 0x28
   16eac:	9102      	str	r1, [sp, #8]
   16eae:	9201      	str	r2, [sp, #4]
   16eb0:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   16eb4:	9200      	str	r2, [sp, #0]
   16eb6:	f3c3 0380 	ubfx	r3, r3, #2, #1
   16eba:	4632      	mov	r2, r6
   16ebc:	4629      	mov	r1, r5
   16ebe:	4638      	mov	r0, r7
   16ec0:	f7fe fc5c 	bl	1577c <btshell_ext_scan>
   16ec4:	9007      	str	r0, [sp, #28]
    if (rc != 0) {
   16ec6:	9907      	ldr	r1, [sp, #28]
   16ec8:	2900      	cmp	r1, #0
   16eca:	d177      	bne.n	16fbc <cmd_scan+0x3b8>
    return rc;
   16ecc:	9807      	ldr	r0, [sp, #28]
   16ece:	e743      	b.n	16d58 <cmd_scan+0x154>
   16ed0:	00031048 	.word	0x00031048
   16ed4:	10000134 	.word	0x10000134
   16ed8:	00031068 	.word	0x00031068
   16edc:	00031094 	.word	0x00031094
   16ee0:	000310c0 	.word	0x000310c0
   16ee4:	000310e8 	.word	0x000310e8
   16ee8:	00030e74 	.word	0x00030e74
   16eec:	00031130 	.word	0x00031130
   16ef0:	00033020 	.word	0x00033020
   16ef4:	00031154 	.word	0x00031154
   16ef8:	00031178 	.word	0x00031178
   16efc:	00032fd0 	.word	0x00032fd0
   16f00:	0003119c 	.word	0x0003119c
   16f04:	1000015c 	.word	0x1000015c
   16f08:	000311d0 	.word	0x000311d0
   16f0c:	00031050 	.word	0x00031050
   16f10:	00031074 	.word	0x00031074
   16f14:	000310a0 	.word	0x000310a0
   16f18:	000310c8 	.word	0x000310c8
   16f1c:	000310f0 	.word	0x000310f0
   16f20:	00031110 	.word	0x00031110
   16f24:	00031138 	.word	0x00031138
   16f28:	0003115c 	.word	0x0003115c
   16f2c:	00031180 	.word	0x00031180
   16f30:	000311ac 	.word	0x000311ac
   16f34:	000311e8 	.word	0x000311e8
   16f38:	00138800 	.word	0x00138800
   16f3c:	00031224 	.word	0x00031224
   16f40:	0003125c 	.word	0x0003125c
   16f44:	00031298 	.word	0x00031298
   16f48:	000312d4 	.word	0x000312d4
   16f4c:	000311fc 	.word	0x000311fc
   16f50:	00031234 	.word	0x00031234
   16f54:	00031270 	.word	0x00031270
   16f58:	000312ac 	.word	0x000312ac
   16f5c:	000312e8 	.word	0x000312e8
                              params.filter_duplicates, params.filter_policy,
   16f60:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
                              params.limited, NULL, &coded,
   16f64:	f003 0201 	and.w	r2, r3, #1
        rc = btshell_ext_scan(own_addr_type, duration, period,
   16f68:	4916      	ldr	r1, [pc, #88]	; (16fc4 <cmd_scan+0x3c0>)
   16f6a:	9104      	str	r1, [sp, #16]
   16f6c:	a908      	add	r1, sp, #32
   16f6e:	9103      	str	r1, [sp, #12]
   16f70:	2100      	movs	r1, #0
   16f72:	9102      	str	r1, [sp, #8]
   16f74:	9201      	str	r2, [sp, #4]
   16f76:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   16f7a:	9200      	str	r2, [sp, #0]
   16f7c:	f3c3 0380 	ubfx	r3, r3, #2, #1
   16f80:	4632      	mov	r2, r6
   16f82:	4629      	mov	r1, r5
   16f84:	4638      	mov	r0, r7
   16f86:	f7fe fbf9 	bl	1577c <btshell_ext_scan>
   16f8a:	9007      	str	r0, [sp, #28]
        break;
   16f8c:	e79b      	b.n	16ec6 <cmd_scan+0x2c2>
                              params.filter_duplicates, params.filter_policy,
   16f8e:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
                              params.limited, &uncoded, &coded,
   16f92:	f003 0201 	and.w	r2, r3, #1
        rc = btshell_ext_scan(own_addr_type, duration, period,
   16f96:	490b      	ldr	r1, [pc, #44]	; (16fc4 <cmd_scan+0x3c0>)
   16f98:	9104      	str	r1, [sp, #16]
   16f9a:	a908      	add	r1, sp, #32
   16f9c:	9103      	str	r1, [sp, #12]
   16f9e:	a90a      	add	r1, sp, #40	; 0x28
   16fa0:	9102      	str	r1, [sp, #8]
   16fa2:	9201      	str	r2, [sp, #4]
   16fa4:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   16fa8:	9200      	str	r2, [sp, #0]
   16faa:	f3c3 0380 	ubfx	r3, r3, #2, #1
   16fae:	4632      	mov	r2, r6
   16fb0:	4629      	mov	r1, r5
   16fb2:	4638      	mov	r0, r7
   16fb4:	f7fe fbe2 	bl	1577c <btshell_ext_scan>
   16fb8:	9007      	str	r0, [sp, #28]
        break;
   16fba:	e784      	b.n	16ec6 <cmd_scan+0x2c2>
        console_printf("error scanning; rc=%d\n", rc);
   16fbc:	4802      	ldr	r0, [pc, #8]	; (16fc8 <cmd_scan+0x3c4>)
   16fbe:	f005 f8b5 	bl	1c12c <console_printf>
   16fc2:	e783      	b.n	16ecc <cmd_scan+0x2c8>
   16fc4:	1000015c 	.word	0x1000015c
   16fc8:	000311d0 	.word	0x000311d0

00016fcc <cmd_show_conn>:
{
   16fcc:	b510      	push	{r4, lr}
   16fce:	b08c      	sub	sp, #48	; 0x30
    for (i = 0; i < btshell_num_conns; i++) {
   16fd0:	2400      	movs	r4, #0
   16fd2:	e003      	b.n	16fdc <cmd_show_conn+0x10>
            print_conn_desc(&conn_desc);
   16fd4:	a801      	add	r0, sp, #4
   16fd6:	f7fe fd59 	bl	15a8c <print_conn_desc>
    for (i = 0; i < btshell_num_conns; i++) {
   16fda:	3401      	adds	r4, #1
   16fdc:	4b08      	ldr	r3, [pc, #32]	; (17000 <cmd_show_conn+0x34>)
   16fde:	681b      	ldr	r3, [r3, #0]
   16fe0:	42a3      	cmp	r3, r4
   16fe2:	dd0a      	ble.n	16ffa <cmd_show_conn+0x2e>
        conn = btshell_conns + i;
   16fe4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
        rc = ble_gap_conn_find(conn->handle, &conn_desc);
   16fe8:	a901      	add	r1, sp, #4
   16fea:	4a06      	ldr	r2, [pc, #24]	; (17004 <cmd_show_conn+0x38>)
   16fec:	f832 0023 	ldrh.w	r0, [r2, r3, lsl #2]
   16ff0:	f00a fe58 	bl	21ca4 <ble_gap_conn_find>
        if (rc == 0) {
   16ff4:	2800      	cmp	r0, #0
   16ff6:	d1f0      	bne.n	16fda <cmd_show_conn+0xe>
   16ff8:	e7ec      	b.n	16fd4 <cmd_show_conn+0x8>
}
   16ffa:	2000      	movs	r0, #0
   16ffc:	b00c      	add	sp, #48	; 0x30
   16ffe:	bd10      	pop	{r4, pc}
   17000:	10002edc 	.word	0x10002edc
   17004:	100033ac 	.word	0x100033ac

00017008 <cmd_show_addr>:
{
   17008:	b500      	push	{lr}
   1700a:	b083      	sub	sp, #12
    console_printf("public_id_addr=");
   1700c:	4813      	ldr	r0, [pc, #76]	; (1705c <cmd_show_addr+0x54>)
   1700e:	f005 f88d 	bl	1c12c <console_printf>
    rc = ble_hs_id_copy_addr(BLE_ADDR_PUBLIC, id_addr, NULL);
   17012:	2200      	movs	r2, #0
   17014:	4669      	mov	r1, sp
   17016:	4610      	mov	r0, r2
   17018:	f011 fa18 	bl	2844c <ble_hs_id_copy_addr>
    if (rc == 0) {
   1701c:	b9a8      	cbnz	r0, 1704a <cmd_show_addr+0x42>
        print_addr(id_addr);
   1701e:	4668      	mov	r0, sp
   17020:	f7fe fcd2 	bl	159c8 <print_addr>
    console_printf(" random_id_addr=");
   17024:	480e      	ldr	r0, [pc, #56]	; (17060 <cmd_show_addr+0x58>)
   17026:	f005 f881 	bl	1c12c <console_printf>
    rc = ble_hs_id_copy_addr(BLE_ADDR_RANDOM, id_addr, NULL);
   1702a:	2200      	movs	r2, #0
   1702c:	4669      	mov	r1, sp
   1702e:	2001      	movs	r0, #1
   17030:	f011 fa0c 	bl	2844c <ble_hs_id_copy_addr>
    if (rc == 0) {
   17034:	b968      	cbnz	r0, 17052 <cmd_show_addr+0x4a>
        print_addr(id_addr);
   17036:	4668      	mov	r0, sp
   17038:	f7fe fcc6 	bl	159c8 <print_addr>
    console_printf("\n");
   1703c:	4809      	ldr	r0, [pc, #36]	; (17064 <cmd_show_addr+0x5c>)
   1703e:	f005 f875 	bl	1c12c <console_printf>
}
   17042:	2000      	movs	r0, #0
   17044:	b003      	add	sp, #12
   17046:	f85d fb04 	ldr.w	pc, [sp], #4
        console_printf("none");
   1704a:	4807      	ldr	r0, [pc, #28]	; (17068 <cmd_show_addr+0x60>)
   1704c:	f005 f86e 	bl	1c12c <console_printf>
   17050:	e7e8      	b.n	17024 <cmd_show_addr+0x1c>
        console_printf("none");
   17052:	4805      	ldr	r0, [pc, #20]	; (17068 <cmd_show_addr+0x60>)
   17054:	f005 f86a 	bl	1c12c <console_printf>
   17058:	e7f0      	b.n	1703c <cmd_show_addr+0x34>
   1705a:	bf00      	nop
   1705c:	00031310 	.word	0x00031310
   17060:	00031320 	.word	0x00031320
   17064:	0002ff28 	.word	0x0002ff28
   17068:	00032bc0 	.word	0x00032bc0

0001706c <cmd_disconnect>:
{
   1706c:	b510      	push	{r4, lr}
   1706e:	b082      	sub	sp, #8
    rc = parse_arg_all(argc - 1, argv + 1);
   17070:	3104      	adds	r1, #4
   17072:	3801      	subs	r0, #1
   17074:	f001 fd8e 	bl	18b94 <parse_arg_all>
   17078:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   1707a:	b108      	cbz	r0, 17080 <cmd_disconnect+0x14>
}
   1707c:	b002      	add	sp, #8
   1707e:	bd10      	pop	{r4, pc}
    conn_handle = parse_arg_uint16("conn", &rc);
   17080:	a901      	add	r1, sp, #4
   17082:	4812      	ldr	r0, [pc, #72]	; (170cc <cmd_disconnect+0x60>)
   17084:	f001 fc2f 	bl	188e6 <parse_arg_uint16>
   17088:	4604      	mov	r4, r0
    if (rc != 0) {
   1708a:	9b01      	ldr	r3, [sp, #4]
   1708c:	b99b      	cbnz	r3, 170b6 <cmd_disconnect+0x4a>
    reason = parse_arg_uint8_dflt("reason", BLE_ERR_REM_USER_CONN_TERM, &rc);
   1708e:	aa01      	add	r2, sp, #4
   17090:	2113      	movs	r1, #19
   17092:	480f      	ldr	r0, [pc, #60]	; (170d0 <cmd_disconnect+0x64>)
   17094:	f001 fc58 	bl	18948 <parse_arg_uint8_dflt>
   17098:	4601      	mov	r1, r0
    if (rc != 0) {
   1709a:	9b01      	ldr	r3, [sp, #4]
   1709c:	b983      	cbnz	r3, 170c0 <cmd_disconnect+0x54>
    rc = btshell_term_conn(conn_handle, reason);
   1709e:	4620      	mov	r0, r4
   170a0:	f7fe fb56 	bl	15750 <btshell_term_conn>
   170a4:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   170a6:	2800      	cmp	r0, #0
   170a8:	d0e8      	beq.n	1707c <cmd_disconnect+0x10>
        console_printf("error terminating connection; rc=%d\n", rc);
   170aa:	4601      	mov	r1, r0
   170ac:	4809      	ldr	r0, [pc, #36]	; (170d4 <cmd_disconnect+0x68>)
   170ae:	f005 f83d 	bl	1c12c <console_printf>
        return rc;
   170b2:	9801      	ldr	r0, [sp, #4]
   170b4:	e7e2      	b.n	1707c <cmd_disconnect+0x10>
        console_printf("invalid 'conn' parameter\n");
   170b6:	4808      	ldr	r0, [pc, #32]	; (170d8 <cmd_disconnect+0x6c>)
   170b8:	f005 f838 	bl	1c12c <console_printf>
        return rc;
   170bc:	9801      	ldr	r0, [sp, #4]
   170be:	e7dd      	b.n	1707c <cmd_disconnect+0x10>
        console_printf("invalid 'reason' parameter\n");
   170c0:	4806      	ldr	r0, [pc, #24]	; (170dc <cmd_disconnect+0x70>)
   170c2:	f005 f833 	bl	1c12c <console_printf>
        return rc;
   170c6:	9801      	ldr	r0, [sp, #4]
   170c8:	e7d8      	b.n	1707c <cmd_disconnect+0x10>
   170ca:	bf00      	nop
   170cc:	000305d8 	.word	0x000305d8
   170d0:	00031334 	.word	0x00031334
   170d4:	00031358 	.word	0x00031358
   170d8:	000305e0 	.word	0x000305e0
   170dc:	0003133c 	.word	0x0003133c

000170e0 <cmd_connect>:
{
   170e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   170e2:	b093      	sub	sp, #76	; 0x4c
   170e4:	4604      	mov	r4, r0
   170e6:	460d      	mov	r5, r1
    struct ble_gap_conn_params phy_1M_params = {0};
   170e8:	2300      	movs	r3, #0
   170ea:	930e      	str	r3, [sp, #56]	; 0x38
   170ec:	930f      	str	r3, [sp, #60]	; 0x3c
   170ee:	9310      	str	r3, [sp, #64]	; 0x40
   170f0:	9311      	str	r3, [sp, #68]	; 0x44
    struct ble_gap_conn_params phy_coded_params = {0};
   170f2:	930a      	str	r3, [sp, #40]	; 0x28
   170f4:	930b      	str	r3, [sp, #44]	; 0x2c
   170f6:	930c      	str	r3, [sp, #48]	; 0x30
   170f8:	930d      	str	r3, [sp, #52]	; 0x34
    struct ble_gap_conn_params phy_2M_params = {0};
   170fa:	9306      	str	r3, [sp, #24]
   170fc:	9307      	str	r3, [sp, #28]
   170fe:	9308      	str	r3, [sp, #32]
   17100:	9309      	str	r3, [sp, #36]	; 0x24
    rc = parse_arg_all(argc - 1, argv + 1);
   17102:	3104      	adds	r1, #4
   17104:	3801      	subs	r0, #1
   17106:	f001 fd45 	bl	18b94 <parse_arg_all>
   1710a:	9003      	str	r0, [sp, #12]
    if (rc != 0) {
   1710c:	2800      	cmp	r0, #0
   1710e:	f040 81bd 	bne.w	1748c <cmd_connect+0x3ac>
    if (argc > 1 && strcmp(argv[1], "cancel") == 0) {
   17112:	2c01      	cmp	r4, #1
   17114:	dd06      	ble.n	17124 <cmd_connect+0x44>
   17116:	49bc      	ldr	r1, [pc, #752]	; (17408 <cmd_connect+0x328>)
   17118:	6868      	ldr	r0, [r5, #4]
   1711a:	f003 fe06 	bl	1ad2a <strcmp>
   1711e:	2800      	cmp	r0, #0
   17120:	f000 8166 	beq.w	173f0 <cmd_connect+0x310>
    ext = parse_arg_kv_dflt("extended", cmd_ext_conn_phy_opts, 0, &rc);
   17124:	ab03      	add	r3, sp, #12
   17126:	2200      	movs	r2, #0
   17128:	49b8      	ldr	r1, [pc, #736]	; (1740c <cmd_connect+0x32c>)
   1712a:	48b9      	ldr	r0, [pc, #740]	; (17410 <cmd_connect+0x330>)
   1712c:	f001 fc83 	bl	18a36 <parse_arg_kv_dflt>
   17130:	b2c4      	uxtb	r4, r0
    if (rc != 0) {
   17132:	9b03      	ldr	r3, [sp, #12]
   17134:	2b00      	cmp	r3, #0
   17136:	f040 81a5 	bne.w	17484 <cmd_connect+0x3a4>
    rc = parse_dev_addr("peer_", cmd_peer_addr_types, &peer_addr);
   1713a:	aa04      	add	r2, sp, #16
   1713c:	49b5      	ldr	r1, [pc, #724]	; (17414 <cmd_connect+0x334>)
   1713e:	48b6      	ldr	r0, [pc, #728]	; (17418 <cmd_connect+0x338>)
   17140:	f7fe ff22 	bl	15f88 <parse_dev_addr>
   17144:	9003      	str	r0, [sp, #12]
    if (rc == ENOENT) {
   17146:	2802      	cmp	r0, #2
   17148:	f000 81a7 	beq.w	1749a <cmd_connect+0x3ba>
    } else if (rc != 0) {
   1714c:	2800      	cmp	r0, #0
   1714e:	f040 819f 	bne.w	17490 <cmd_connect+0x3b0>
    ble_addr_t *peer_addr_param = &peer_addr;
   17152:	af04      	add	r7, sp, #16
    own_addr_type = parse_arg_kv_dflt("own_addr_type", cmd_own_addr_types,
   17154:	ab03      	add	r3, sp, #12
   17156:	2200      	movs	r2, #0
   17158:	49b0      	ldr	r1, [pc, #704]	; (1741c <cmd_connect+0x33c>)
   1715a:	48b1      	ldr	r0, [pc, #708]	; (17420 <cmd_connect+0x340>)
   1715c:	f001 fc6b 	bl	18a36 <parse_arg_kv_dflt>
   17160:	4605      	mov	r5, r0
    if (rc != 0) {
   17162:	9b03      	ldr	r3, [sp, #12]
   17164:	2b00      	cmp	r3, #0
   17166:	f040 819a 	bne.w	1749e <cmd_connect+0x3be>
    duration_ms = parse_arg_long_bounds_dflt("duration", 1, INT32_MAX, 0, &rc);
   1716a:	ab03      	add	r3, sp, #12
   1716c:	9300      	str	r3, [sp, #0]
   1716e:	2300      	movs	r3, #0
   17170:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   17174:	2101      	movs	r1, #1
   17176:	48ab      	ldr	r0, [pc, #684]	; (17424 <cmd_connect+0x344>)
   17178:	f001 fb4b 	bl	18812 <parse_arg_long_bounds_dflt>
   1717c:	4606      	mov	r6, r0
    if (rc != 0) {
   1717e:	9b03      	ldr	r3, [sp, #12]
   17180:	2b00      	cmp	r3, #0
   17182:	f040 8191 	bne.w	174a8 <cmd_connect+0x3c8>
    phy_1M_params.scan_itvl = parse_arg_time_dflt("scan_interval", 625, 0x0010, &rc);
   17186:	ab03      	add	r3, sp, #12
   17188:	2210      	movs	r2, #16
   1718a:	f240 2171 	movw	r1, #625	; 0x271
   1718e:	48a6      	ldr	r0, [pc, #664]	; (17428 <cmd_connect+0x348>)
   17190:	f001 fbfe 	bl	18990 <parse_arg_time_dflt>
   17194:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
    if (rc != 0) {
   17198:	9b03      	ldr	r3, [sp, #12]
   1719a:	2b00      	cmp	r3, #0
   1719c:	f040 8189 	bne.w	174b2 <cmd_connect+0x3d2>
    phy_1M_params.scan_window = parse_arg_time_dflt("scan_window", 625, 0x0010, &rc);
   171a0:	ab03      	add	r3, sp, #12
   171a2:	2210      	movs	r2, #16
   171a4:	f240 2171 	movw	r1, #625	; 0x271
   171a8:	48a0      	ldr	r0, [pc, #640]	; (1742c <cmd_connect+0x34c>)
   171aa:	f001 fbf1 	bl	18990 <parse_arg_time_dflt>
   171ae:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
    if (rc != 0) {
   171b2:	9b03      	ldr	r3, [sp, #12]
   171b4:	2b00      	cmp	r3, #0
   171b6:	f040 8181 	bne.w	174bc <cmd_connect+0x3dc>
    phy_1M_params.itvl_min = parse_arg_time_dflt("interval_min", 1250,
   171ba:	ab03      	add	r3, sp, #12
   171bc:	2218      	movs	r2, #24
   171be:	f240 41e2 	movw	r1, #1250	; 0x4e2
   171c2:	489b      	ldr	r0, [pc, #620]	; (17430 <cmd_connect+0x350>)
   171c4:	f001 fbe4 	bl	18990 <parse_arg_time_dflt>
   171c8:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
    if (rc != 0) {
   171cc:	9b03      	ldr	r3, [sp, #12]
   171ce:	2b00      	cmp	r3, #0
   171d0:	f040 8179 	bne.w	174c6 <cmd_connect+0x3e6>
    phy_1M_params.itvl_max = parse_arg_time_dflt("interval_max", 1250,
   171d4:	ab03      	add	r3, sp, #12
   171d6:	2228      	movs	r2, #40	; 0x28
   171d8:	f240 41e2 	movw	r1, #1250	; 0x4e2
   171dc:	4895      	ldr	r0, [pc, #596]	; (17434 <cmd_connect+0x354>)
   171de:	f001 fbd7 	bl	18990 <parse_arg_time_dflt>
   171e2:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
    if (rc != 0) {
   171e6:	9b03      	ldr	r3, [sp, #12]
   171e8:	2b00      	cmp	r3, #0
   171ea:	f040 8171 	bne.w	174d0 <cmd_connect+0x3f0>
    phy_1M_params.latency = parse_arg_uint16_dflt("latency", 0, &rc);
   171ee:	aa03      	add	r2, sp, #12
   171f0:	2100      	movs	r1, #0
   171f2:	4891      	ldr	r0, [pc, #580]	; (17438 <cmd_connect+0x358>)
   171f4:	f001 fbba 	bl	1896c <parse_arg_uint16_dflt>
   171f8:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
    if (rc != 0) {
   171fc:	9b03      	ldr	r3, [sp, #12]
   171fe:	2b00      	cmp	r3, #0
   17200:	f040 816b 	bne.w	174da <cmd_connect+0x3fa>
    phy_1M_params.supervision_timeout = parse_arg_time_dflt("timeout", 10000,
   17204:	ab03      	add	r3, sp, #12
   17206:	f44f 7280 	mov.w	r2, #256	; 0x100
   1720a:	f242 7110 	movw	r1, #10000	; 0x2710
   1720e:	488b      	ldr	r0, [pc, #556]	; (1743c <cmd_connect+0x35c>)
   17210:	f001 fbbe 	bl	18990 <parse_arg_time_dflt>
   17214:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    if (rc != 0) {
   17218:	9b03      	ldr	r3, [sp, #12]
   1721a:	2b00      	cmp	r3, #0
   1721c:	f040 8162 	bne.w	174e4 <cmd_connect+0x404>
    phy_1M_params.min_ce_len = parse_arg_time_dflt("min_conn_event_len", 625,
   17220:	ab03      	add	r3, sp, #12
   17222:	2210      	movs	r2, #16
   17224:	f240 2171 	movw	r1, #625	; 0x271
   17228:	4885      	ldr	r0, [pc, #532]	; (17440 <cmd_connect+0x360>)
   1722a:	f001 fbb1 	bl	18990 <parse_arg_time_dflt>
   1722e:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    if (rc != 0) {
   17232:	9b03      	ldr	r3, [sp, #12]
   17234:	2b00      	cmp	r3, #0
   17236:	f040 815a 	bne.w	174ee <cmd_connect+0x40e>
    phy_1M_params.max_ce_len = parse_arg_time_dflt("max_conn_event_len", 625,
   1723a:	ab03      	add	r3, sp, #12
   1723c:	f44f 7240 	mov.w	r2, #768	; 0x300
   17240:	f240 2171 	movw	r1, #625	; 0x271
   17244:	487f      	ldr	r0, [pc, #508]	; (17444 <cmd_connect+0x364>)
   17246:	f001 fba3 	bl	18990 <parse_arg_time_dflt>
   1724a:	f8ad 0046 	strh.w	r0, [sp, #70]	; 0x46
    if (rc != 0) {
   1724e:	9b03      	ldr	r3, [sp, #12]
   17250:	2b00      	cmp	r3, #0
   17252:	f040 8151 	bne.w	174f8 <cmd_connect+0x418>
    if (ext == 0x00) {
   17256:	2c00      	cmp	r4, #0
   17258:	f000 8153 	beq.w	17502 <cmd_connect+0x422>
    if (ext == 0x01) {
   1725c:	2c01      	cmp	r4, #1
   1725e:	f000 815f 	beq.w	17520 <cmd_connect+0x440>
    phy_coded_params.scan_itvl = parse_arg_time_dflt("coded_scan_interval",
   17262:	ab03      	add	r3, sp, #12
   17264:	2210      	movs	r2, #16
   17266:	f240 2171 	movw	r1, #625	; 0x271
   1726a:	4877      	ldr	r0, [pc, #476]	; (17448 <cmd_connect+0x368>)
   1726c:	f001 fb90 	bl	18990 <parse_arg_time_dflt>
   17270:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
    if (rc != 0) {
   17274:	9b03      	ldr	r3, [sp, #12]
   17276:	2b00      	cmp	r3, #0
   17278:	f040 8164 	bne.w	17544 <cmd_connect+0x464>
    phy_coded_params.scan_window = parse_arg_time_dflt("coded_scan_window",
   1727c:	ab03      	add	r3, sp, #12
   1727e:	2210      	movs	r2, #16
   17280:	f240 2171 	movw	r1, #625	; 0x271
   17284:	4871      	ldr	r0, [pc, #452]	; (1744c <cmd_connect+0x36c>)
   17286:	f001 fb83 	bl	18990 <parse_arg_time_dflt>
   1728a:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
    if (rc != 0) {
   1728e:	9b03      	ldr	r3, [sp, #12]
   17290:	2b00      	cmp	r3, #0
   17292:	f040 815c 	bne.w	1754e <cmd_connect+0x46e>
    phy_coded_params.itvl_min = parse_arg_time_dflt("coded_interval_min", 1250,
   17296:	ab03      	add	r3, sp, #12
   17298:	2218      	movs	r2, #24
   1729a:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1729e:	486c      	ldr	r0, [pc, #432]	; (17450 <cmd_connect+0x370>)
   172a0:	f001 fb76 	bl	18990 <parse_arg_time_dflt>
   172a4:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    if (rc != 0) {
   172a8:	9b03      	ldr	r3, [sp, #12]
   172aa:	2b00      	cmp	r3, #0
   172ac:	f040 8154 	bne.w	17558 <cmd_connect+0x478>
    phy_coded_params.itvl_max = parse_arg_time_dflt("coded_interval_max", 1250,
   172b0:	ab03      	add	r3, sp, #12
   172b2:	2228      	movs	r2, #40	; 0x28
   172b4:	f240 41e2 	movw	r1, #1250	; 0x4e2
   172b8:	4866      	ldr	r0, [pc, #408]	; (17454 <cmd_connect+0x374>)
   172ba:	f001 fb69 	bl	18990 <parse_arg_time_dflt>
   172be:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
    if (rc != 0) {
   172c2:	9b03      	ldr	r3, [sp, #12]
   172c4:	2b00      	cmp	r3, #0
   172c6:	f040 814c 	bne.w	17562 <cmd_connect+0x482>
        parse_arg_uint16_dflt("coded_latency", 0, &rc);
   172ca:	aa03      	add	r2, sp, #12
   172cc:	2100      	movs	r1, #0
   172ce:	4862      	ldr	r0, [pc, #392]	; (17458 <cmd_connect+0x378>)
   172d0:	f001 fb4c 	bl	1896c <parse_arg_uint16_dflt>
    phy_coded_params.latency =
   172d4:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
    if (rc != 0) {
   172d8:	9b03      	ldr	r3, [sp, #12]
   172da:	2b00      	cmp	r3, #0
   172dc:	f040 8146 	bne.w	1756c <cmd_connect+0x48c>
        parse_arg_time_dflt("coded_timeout", 10000, 0x0100, &rc);
   172e0:	ab03      	add	r3, sp, #12
   172e2:	f44f 7280 	mov.w	r2, #256	; 0x100
   172e6:	f242 7110 	movw	r1, #10000	; 0x2710
   172ea:	485c      	ldr	r0, [pc, #368]	; (1745c <cmd_connect+0x37c>)
   172ec:	f001 fb50 	bl	18990 <parse_arg_time_dflt>
    phy_coded_params.supervision_timeout =
   172f0:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
    if (rc != 0) {
   172f4:	9b03      	ldr	r3, [sp, #12]
   172f6:	2b00      	cmp	r3, #0
   172f8:	f040 813d 	bne.w	17576 <cmd_connect+0x496>
        parse_arg_time_dflt("coded_min_conn_event", 625, 0x0010, &rc);
   172fc:	ab03      	add	r3, sp, #12
   172fe:	2210      	movs	r2, #16
   17300:	f240 2171 	movw	r1, #625	; 0x271
   17304:	4856      	ldr	r0, [pc, #344]	; (17460 <cmd_connect+0x380>)
   17306:	f001 fb43 	bl	18990 <parse_arg_time_dflt>
    phy_coded_params.min_ce_len =
   1730a:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    if (rc != 0) {
   1730e:	9b03      	ldr	r3, [sp, #12]
   17310:	2b00      	cmp	r3, #0
   17312:	f040 8135 	bne.w	17580 <cmd_connect+0x4a0>
    phy_coded_params.max_ce_len = parse_arg_time_dflt("coded_max_conn_event",
   17316:	ab03      	add	r3, sp, #12
   17318:	f44f 7240 	mov.w	r2, #768	; 0x300
   1731c:	f240 2171 	movw	r1, #625	; 0x271
   17320:	4850      	ldr	r0, [pc, #320]	; (17464 <cmd_connect+0x384>)
   17322:	f001 fb35 	bl	18990 <parse_arg_time_dflt>
   17326:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
    if (rc != 0) {
   1732a:	9b03      	ldr	r3, [sp, #12]
   1732c:	2b00      	cmp	r3, #0
   1732e:	f040 812c 	bne.w	1758a <cmd_connect+0x4aa>
    phy_2M_params.itvl_min = parse_arg_time_dflt("2M_interval_min", 1250,
   17332:	ab03      	add	r3, sp, #12
   17334:	2218      	movs	r2, #24
   17336:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1733a:	484b      	ldr	r0, [pc, #300]	; (17468 <cmd_connect+0x388>)
   1733c:	f001 fb28 	bl	18990 <parse_arg_time_dflt>
   17340:	f8ad 001c 	strh.w	r0, [sp, #28]
    if (rc != 0) {
   17344:	9b03      	ldr	r3, [sp, #12]
   17346:	2b00      	cmp	r3, #0
   17348:	f040 8124 	bne.w	17594 <cmd_connect+0x4b4>
    phy_2M_params.itvl_max = parse_arg_time_dflt("2M_interval_max", 1250,
   1734c:	ab03      	add	r3, sp, #12
   1734e:	2228      	movs	r2, #40	; 0x28
   17350:	f240 41e2 	movw	r1, #1250	; 0x4e2
   17354:	4845      	ldr	r0, [pc, #276]	; (1746c <cmd_connect+0x38c>)
   17356:	f001 fb1b 	bl	18990 <parse_arg_time_dflt>
   1735a:	f8ad 001e 	strh.w	r0, [sp, #30]
    if (rc != 0) {
   1735e:	9b03      	ldr	r3, [sp, #12]
   17360:	2b00      	cmp	r3, #0
   17362:	f040 811c 	bne.w	1759e <cmd_connect+0x4be>
        parse_arg_uint16_dflt("2M_latency", 0, &rc);
   17366:	aa03      	add	r2, sp, #12
   17368:	2100      	movs	r1, #0
   1736a:	4841      	ldr	r0, [pc, #260]	; (17470 <cmd_connect+0x390>)
   1736c:	f001 fafe 	bl	1896c <parse_arg_uint16_dflt>
    phy_2M_params.latency =
   17370:	f8ad 0020 	strh.w	r0, [sp, #32]
    if (rc != 0) {
   17374:	9b03      	ldr	r3, [sp, #12]
   17376:	2b00      	cmp	r3, #0
   17378:	f040 8116 	bne.w	175a8 <cmd_connect+0x4c8>
    phy_2M_params.supervision_timeout = parse_arg_time_dflt("2M_timeout", 10000,
   1737c:	ab03      	add	r3, sp, #12
   1737e:	f44f 7280 	mov.w	r2, #256	; 0x100
   17382:	f242 7110 	movw	r1, #10000	; 0x2710
   17386:	483b      	ldr	r0, [pc, #236]	; (17474 <cmd_connect+0x394>)
   17388:	f001 fb02 	bl	18990 <parse_arg_time_dflt>
   1738c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
    if (rc != 0) {
   17390:	9b03      	ldr	r3, [sp, #12]
   17392:	2b00      	cmp	r3, #0
   17394:	f040 810d 	bne.w	175b2 <cmd_connect+0x4d2>
    phy_2M_params.min_ce_len = parse_arg_time_dflt("2M_min_conn_event", 625,
   17398:	ab03      	add	r3, sp, #12
   1739a:	2210      	movs	r2, #16
   1739c:	f240 2171 	movw	r1, #625	; 0x271
   173a0:	4835      	ldr	r0, [pc, #212]	; (17478 <cmd_connect+0x398>)
   173a2:	f001 faf5 	bl	18990 <parse_arg_time_dflt>
   173a6:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
    if (rc != 0) {
   173aa:	9b03      	ldr	r3, [sp, #12]
   173ac:	2b00      	cmp	r3, #0
   173ae:	f040 8105 	bne.w	175bc <cmd_connect+0x4dc>
    phy_2M_params.max_ce_len = parse_arg_time_dflt("2M_max_conn_event", 625,
   173b2:	ab03      	add	r3, sp, #12
   173b4:	f44f 7240 	mov.w	r2, #768	; 0x300
   173b8:	f240 2171 	movw	r1, #625	; 0x271
   173bc:	482f      	ldr	r0, [pc, #188]	; (1747c <cmd_connect+0x39c>)
   173be:	f001 fae7 	bl	18990 <parse_arg_time_dflt>
   173c2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
    if (rc != 0) {
   173c6:	9b03      	ldr	r3, [sp, #12]
   173c8:	2b00      	cmp	r3, #0
   173ca:	f040 80fc 	bne.w	175c6 <cmd_connect+0x4e6>
    if (ext == 0x02) {
   173ce:	2c02      	cmp	r4, #2
   173d0:	f000 80fe 	beq.w	175d0 <cmd_connect+0x4f0>
    if (ext == 0x03) {
   173d4:	2c03      	cmp	r4, #3
   173d6:	f000 8105 	beq.w	175e4 <cmd_connect+0x504>
    rc = btshell_ext_conn_initiate(own_addr_type, peer_addr_param,
   173da:	ab0a      	add	r3, sp, #40	; 0x28
   173dc:	9301      	str	r3, [sp, #4]
   173de:	ab06      	add	r3, sp, #24
   173e0:	9300      	str	r3, [sp, #0]
   173e2:	ab0e      	add	r3, sp, #56	; 0x38
   173e4:	4632      	mov	r2, r6
   173e6:	4639      	mov	r1, r7
   173e8:	b2e8      	uxtb	r0, r5
   173ea:	f7fe f99f 	bl	1572c <btshell_ext_conn_initiate>
    return rc;
   173ee:	e04d      	b.n	1748c <cmd_connect+0x3ac>
        rc = btshell_conn_cancel();
   173f0:	f7fe f9aa 	bl	15748 <btshell_conn_cancel>
   173f4:	9003      	str	r0, [sp, #12]
        if (rc != 0) {
   173f6:	2800      	cmp	r0, #0
   173f8:	d048      	beq.n	1748c <cmd_connect+0x3ac>
            console_printf("connection cancel fail: %d\n", rc);
   173fa:	4601      	mov	r1, r0
   173fc:	4820      	ldr	r0, [pc, #128]	; (17480 <cmd_connect+0x3a0>)
   173fe:	f004 fe95 	bl	1c12c <console_printf>
            return rc;
   17402:	9803      	ldr	r0, [sp, #12]
   17404:	e042      	b.n	1748c <cmd_connect+0x3ac>
   17406:	bf00      	nop
   17408:	00031048 	.word	0x00031048
   1740c:	10000104 	.word	0x10000104
   17410:	00031068 	.word	0x00031068
   17414:	00032ff8 	.word	0x00032ff8
   17418:	0003139c 	.word	0x0003139c
   1741c:	00032fd0 	.word	0x00032fd0
   17420:	0003119c 	.word	0x0003119c
   17424:	00031094 	.word	0x00031094
   17428:	000313c4 	.word	0x000313c4
   1742c:	000313f8 	.word	0x000313f8
   17430:	00030988 	.word	0x00030988
   17434:	000309bc 	.word	0x000309bc
   17438:	000309f0 	.word	0x000309f0
   1743c:	00030a18 	.word	0x00030a18
   17440:	00030a40 	.word	0x00030a40
   17444:	00030a7c 	.word	0x00030a7c
   17448:	00031444 	.word	0x00031444
   1744c:	00031484 	.word	0x00031484
   17450:	000314c0 	.word	0x000314c0
   17454:	000314fc 	.word	0x000314fc
   17458:	00031538 	.word	0x00031538
   1745c:	0003156c 	.word	0x0003156c
   17460:	000315a0 	.word	0x000315a0
   17464:	000315e4 	.word	0x000315e4
   17468:	00031628 	.word	0x00031628
   1746c:	00031660 	.word	0x00031660
   17470:	00031698 	.word	0x00031698
   17474:	000316c4 	.word	0x000316c4
   17478:	000316f0 	.word	0x000316f0
   1747c:	0003172c 	.word	0x0003172c
   17480:	00031380 	.word	0x00031380
        console_printf("invalid 'extended' parameter\n");
   17484:	485d      	ldr	r0, [pc, #372]	; (175fc <cmd_connect+0x51c>)
   17486:	f004 fe51 	bl	1c12c <console_printf>
        return rc;
   1748a:	9803      	ldr	r0, [sp, #12]
}
   1748c:	b013      	add	sp, #76	; 0x4c
   1748e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        console_printf("invalid 'peer_addr' parameter\n");
   17490:	485b      	ldr	r0, [pc, #364]	; (17600 <cmd_connect+0x520>)
   17492:	f004 fe4b 	bl	1c12c <console_printf>
        return rc;
   17496:	9803      	ldr	r0, [sp, #12]
   17498:	e7f8      	b.n	1748c <cmd_connect+0x3ac>
        peer_addr_param = NULL;
   1749a:	2700      	movs	r7, #0
   1749c:	e65a      	b.n	17154 <cmd_connect+0x74>
        console_printf("invalid 'own_addr_type' parameter\n");
   1749e:	4859      	ldr	r0, [pc, #356]	; (17604 <cmd_connect+0x524>)
   174a0:	f004 fe44 	bl	1c12c <console_printf>
        return rc;
   174a4:	9803      	ldr	r0, [sp, #12]
   174a6:	e7f1      	b.n	1748c <cmd_connect+0x3ac>
        console_printf("invalid 'duration' parameter\n");
   174a8:	4857      	ldr	r0, [pc, #348]	; (17608 <cmd_connect+0x528>)
   174aa:	f004 fe3f 	bl	1c12c <console_printf>
        return rc;
   174ae:	9803      	ldr	r0, [sp, #12]
   174b0:	e7ec      	b.n	1748c <cmd_connect+0x3ac>
        console_printf("invalid 'scan_interval' parameter\n");
   174b2:	4856      	ldr	r0, [pc, #344]	; (1760c <cmd_connect+0x52c>)
   174b4:	f004 fe3a 	bl	1c12c <console_printf>
        return rc;
   174b8:	9803      	ldr	r0, [sp, #12]
   174ba:	e7e7      	b.n	1748c <cmd_connect+0x3ac>
        console_printf("invalid 'scan_window' parameter\n");
   174bc:	4854      	ldr	r0, [pc, #336]	; (17610 <cmd_connect+0x530>)
   174be:	f004 fe35 	bl	1c12c <console_printf>
        return rc;
   174c2:	9803      	ldr	r0, [sp, #12]
   174c4:	e7e2      	b.n	1748c <cmd_connect+0x3ac>
        console_printf("invalid 'interval_min' parameter\n");
   174c6:	4853      	ldr	r0, [pc, #332]	; (17614 <cmd_connect+0x534>)
   174c8:	f004 fe30 	bl	1c12c <console_printf>
        return rc;
   174cc:	9803      	ldr	r0, [sp, #12]
   174ce:	e7dd      	b.n	1748c <cmd_connect+0x3ac>
        console_printf("invalid 'interval_max' parameter\n");
   174d0:	4851      	ldr	r0, [pc, #324]	; (17618 <cmd_connect+0x538>)
   174d2:	f004 fe2b 	bl	1c12c <console_printf>
        return rc;
   174d6:	9803      	ldr	r0, [sp, #12]
   174d8:	e7d8      	b.n	1748c <cmd_connect+0x3ac>
        console_printf("invalid 'latency' parameter\n");
   174da:	4850      	ldr	r0, [pc, #320]	; (1761c <cmd_connect+0x53c>)
   174dc:	f004 fe26 	bl	1c12c <console_printf>
        return rc;
   174e0:	9803      	ldr	r0, [sp, #12]
   174e2:	e7d3      	b.n	1748c <cmd_connect+0x3ac>
        console_printf("invalid 'timeout' parameter\n");
   174e4:	484e      	ldr	r0, [pc, #312]	; (17620 <cmd_connect+0x540>)
   174e6:	f004 fe21 	bl	1c12c <console_printf>
        return rc;
   174ea:	9803      	ldr	r0, [sp, #12]
   174ec:	e7ce      	b.n	1748c <cmd_connect+0x3ac>
        console_printf("invalid 'min_conn_event_len' parameter\n");
   174ee:	484d      	ldr	r0, [pc, #308]	; (17624 <cmd_connect+0x544>)
   174f0:	f004 fe1c 	bl	1c12c <console_printf>
        return rc;
   174f4:	9803      	ldr	r0, [sp, #12]
   174f6:	e7c9      	b.n	1748c <cmd_connect+0x3ac>
        console_printf("invalid 'max_conn_event_len' parameter\n");
   174f8:	484b      	ldr	r0, [pc, #300]	; (17628 <cmd_connect+0x548>)
   174fa:	f004 fe17 	bl	1c12c <console_printf>
        return rc;
   174fe:	9803      	ldr	r0, [sp, #12]
   17500:	e7c4      	b.n	1748c <cmd_connect+0x3ac>
        rc = btshell_conn_initiate(own_addr_type, peer_addr_param, duration_ms,
   17502:	ab0e      	add	r3, sp, #56	; 0x38
   17504:	4632      	mov	r2, r6
   17506:	4639      	mov	r1, r7
   17508:	b2e8      	uxtb	r0, r5
   1750a:	f7fe f903 	bl	15714 <btshell_conn_initiate>
   1750e:	4601      	mov	r1, r0
   17510:	9003      	str	r0, [sp, #12]
        if (rc) {
   17512:	b908      	cbnz	r0, 17518 <cmd_connect+0x438>
        return rc;
   17514:	9803      	ldr	r0, [sp, #12]
   17516:	e7b9      	b.n	1748c <cmd_connect+0x3ac>
            console_printf("error connecting; rc=%d\n", rc);
   17518:	4844      	ldr	r0, [pc, #272]	; (1762c <cmd_connect+0x54c>)
   1751a:	f004 fe07 	bl	1c12c <console_printf>
   1751e:	e7f9      	b.n	17514 <cmd_connect+0x434>
        rc = btshell_ext_conn_initiate(own_addr_type, peer_addr_param,
   17520:	2300      	movs	r3, #0
   17522:	9301      	str	r3, [sp, #4]
   17524:	9300      	str	r3, [sp, #0]
   17526:	ab0e      	add	r3, sp, #56	; 0x38
   17528:	4632      	mov	r2, r6
   1752a:	4639      	mov	r1, r7
   1752c:	b2e8      	uxtb	r0, r5
   1752e:	f7fe f8fd 	bl	1572c <btshell_ext_conn_initiate>
   17532:	4601      	mov	r1, r0
   17534:	9003      	str	r0, [sp, #12]
        if (rc) {
   17536:	b908      	cbnz	r0, 1753c <cmd_connect+0x45c>
        return rc;
   17538:	9803      	ldr	r0, [sp, #12]
   1753a:	e7a7      	b.n	1748c <cmd_connect+0x3ac>
            console_printf("error connecting; rc=%d\n", rc);
   1753c:	483b      	ldr	r0, [pc, #236]	; (1762c <cmd_connect+0x54c>)
   1753e:	f004 fdf5 	bl	1c12c <console_printf>
   17542:	e7f9      	b.n	17538 <cmd_connect+0x458>
        console_printf("invalid 'coded_scan_interval' parameter\n");
   17544:	483a      	ldr	r0, [pc, #232]	; (17630 <cmd_connect+0x550>)
   17546:	f004 fdf1 	bl	1c12c <console_printf>
        return rc;
   1754a:	9803      	ldr	r0, [sp, #12]
   1754c:	e79e      	b.n	1748c <cmd_connect+0x3ac>
        console_printf("invalid 'coded_scan_window' parameter\n");
   1754e:	4839      	ldr	r0, [pc, #228]	; (17634 <cmd_connect+0x554>)
   17550:	f004 fdec 	bl	1c12c <console_printf>
        return rc;
   17554:	9803      	ldr	r0, [sp, #12]
   17556:	e799      	b.n	1748c <cmd_connect+0x3ac>
        console_printf("invalid 'coded_interval_min' parameter\n");
   17558:	4837      	ldr	r0, [pc, #220]	; (17638 <cmd_connect+0x558>)
   1755a:	f004 fde7 	bl	1c12c <console_printf>
        return rc;
   1755e:	9803      	ldr	r0, [sp, #12]
   17560:	e794      	b.n	1748c <cmd_connect+0x3ac>
        console_printf("invalid 'coded_interval_max' parameter\n");
   17562:	4836      	ldr	r0, [pc, #216]	; (1763c <cmd_connect+0x55c>)
   17564:	f004 fde2 	bl	1c12c <console_printf>
        return rc;
   17568:	9803      	ldr	r0, [sp, #12]
   1756a:	e78f      	b.n	1748c <cmd_connect+0x3ac>
        console_printf("invalid 'coded_latency' parameter\n");
   1756c:	4834      	ldr	r0, [pc, #208]	; (17640 <cmd_connect+0x560>)
   1756e:	f004 fddd 	bl	1c12c <console_printf>
        return rc;
   17572:	9803      	ldr	r0, [sp, #12]
   17574:	e78a      	b.n	1748c <cmd_connect+0x3ac>
        console_printf("invalid 'coded_timeout' parameter\n");
   17576:	4833      	ldr	r0, [pc, #204]	; (17644 <cmd_connect+0x564>)
   17578:	f004 fdd8 	bl	1c12c <console_printf>
        return rc;
   1757c:	9803      	ldr	r0, [sp, #12]
   1757e:	e785      	b.n	1748c <cmd_connect+0x3ac>
        console_printf("invalid 'coded_min_conn_event' parameter\n");
   17580:	4831      	ldr	r0, [pc, #196]	; (17648 <cmd_connect+0x568>)
   17582:	f004 fdd3 	bl	1c12c <console_printf>
        return rc;
   17586:	9803      	ldr	r0, [sp, #12]
   17588:	e780      	b.n	1748c <cmd_connect+0x3ac>
        console_printf("invalid 'coded_max_conn_event' parameter\n");
   1758a:	4830      	ldr	r0, [pc, #192]	; (1764c <cmd_connect+0x56c>)
   1758c:	f004 fdce 	bl	1c12c <console_printf>
        return rc;
   17590:	9803      	ldr	r0, [sp, #12]
   17592:	e77b      	b.n	1748c <cmd_connect+0x3ac>
        console_printf("invalid '2M_interval_min' parameter\n");
   17594:	482e      	ldr	r0, [pc, #184]	; (17650 <cmd_connect+0x570>)
   17596:	f004 fdc9 	bl	1c12c <console_printf>
        return rc;
   1759a:	9803      	ldr	r0, [sp, #12]
   1759c:	e776      	b.n	1748c <cmd_connect+0x3ac>
        console_printf("invalid '2M_interval_max' parameter\n");
   1759e:	482d      	ldr	r0, [pc, #180]	; (17654 <cmd_connect+0x574>)
   175a0:	f004 fdc4 	bl	1c12c <console_printf>
        return rc;
   175a4:	9803      	ldr	r0, [sp, #12]
   175a6:	e771      	b.n	1748c <cmd_connect+0x3ac>
        console_printf("invalid '2M_latency' parameter\n");
   175a8:	482b      	ldr	r0, [pc, #172]	; (17658 <cmd_connect+0x578>)
   175aa:	f004 fdbf 	bl	1c12c <console_printf>
        return rc;
   175ae:	9803      	ldr	r0, [sp, #12]
   175b0:	e76c      	b.n	1748c <cmd_connect+0x3ac>
        console_printf("invalid '2M_timeout' parameter\n");
   175b2:	482a      	ldr	r0, [pc, #168]	; (1765c <cmd_connect+0x57c>)
   175b4:	f004 fdba 	bl	1c12c <console_printf>
        return rc;
   175b8:	9803      	ldr	r0, [sp, #12]
   175ba:	e767      	b.n	1748c <cmd_connect+0x3ac>
        console_printf("invalid '2M_min_conn_event' parameter\n");
   175bc:	4828      	ldr	r0, [pc, #160]	; (17660 <cmd_connect+0x580>)
   175be:	f004 fdb5 	bl	1c12c <console_printf>
        return rc;
   175c2:	9803      	ldr	r0, [sp, #12]
   175c4:	e762      	b.n	1748c <cmd_connect+0x3ac>
        console_printf("invalid '2M_max_conn_event' parameter\n");
   175c6:	4827      	ldr	r0, [pc, #156]	; (17664 <cmd_connect+0x584>)
   175c8:	f004 fdb0 	bl	1c12c <console_printf>
        return rc;
   175cc:	9803      	ldr	r0, [sp, #12]
   175ce:	e75d      	b.n	1748c <cmd_connect+0x3ac>
        rc = btshell_ext_conn_initiate(own_addr_type, peer_addr_param,
   175d0:	ab0a      	add	r3, sp, #40	; 0x28
   175d2:	9301      	str	r3, [sp, #4]
   175d4:	2300      	movs	r3, #0
   175d6:	9300      	str	r3, [sp, #0]
   175d8:	4632      	mov	r2, r6
   175da:	4639      	mov	r1, r7
   175dc:	b2e8      	uxtb	r0, r5
   175de:	f7fe f8a5 	bl	1572c <btshell_ext_conn_initiate>
        return rc;
   175e2:	e753      	b.n	1748c <cmd_connect+0x3ac>
        rc = btshell_ext_conn_initiate(own_addr_type, peer_addr_param,
   175e4:	ab0a      	add	r3, sp, #40	; 0x28
   175e6:	9301      	str	r3, [sp, #4]
   175e8:	2300      	movs	r3, #0
   175ea:	9300      	str	r3, [sp, #0]
   175ec:	ab0e      	add	r3, sp, #56	; 0x38
   175ee:	4632      	mov	r2, r6
   175f0:	4639      	mov	r1, r7
   175f2:	b2e8      	uxtb	r0, r5
   175f4:	f7fe f89a 	bl	1572c <btshell_ext_conn_initiate>
        return rc;
   175f8:	e748      	b.n	1748c <cmd_connect+0x3ac>
   175fa:	bf00      	nop
   175fc:	00031074 	.word	0x00031074
   17600:	000313a4 	.word	0x000313a4
   17604:	000311ac 	.word	0x000311ac
   17608:	000310a0 	.word	0x000310a0
   1760c:	000313d4 	.word	0x000313d4
   17610:	00031404 	.word	0x00031404
   17614:	00030998 	.word	0x00030998
   17618:	000309cc 	.word	0x000309cc
   1761c:	000309f8 	.word	0x000309f8
   17620:	00030a20 	.word	0x00030a20
   17624:	00030a54 	.word	0x00030a54
   17628:	00030a90 	.word	0x00030a90
   1762c:	00031428 	.word	0x00031428
   17630:	00031458 	.word	0x00031458
   17634:	00031498 	.word	0x00031498
   17638:	000314d4 	.word	0x000314d4
   1763c:	00031510 	.word	0x00031510
   17640:	00031548 	.word	0x00031548
   17644:	0003157c 	.word	0x0003157c
   17648:	000315b8 	.word	0x000315b8
   1764c:	000315fc 	.word	0x000315fc
   17650:	00031638 	.word	0x00031638
   17654:	00031670 	.word	0x00031670
   17658:	000316a4 	.word	0x000316a4
   1765c:	000316d0 	.word	0x000316d0
   17660:	00031704 	.word	0x00031704
   17664:	00031740 	.word	0x00031740

00017668 <cmd_advertise>:
{
   17668:	b570      	push	{r4, r5, r6, lr}
   1766a:	b088      	sub	sp, #32
   1766c:	4604      	mov	r4, r0
   1766e:	460d      	mov	r5, r1
    rc = parse_arg_all(argc - 1, argv + 1);
   17670:	3104      	adds	r1, #4
   17672:	3801      	subs	r0, #1
   17674:	f001 fa8e 	bl	18b94 <parse_arg_all>
   17678:	9002      	str	r0, [sp, #8]
    if (rc != 0) {
   1767a:	2800      	cmp	r0, #0
   1767c:	f040 80a7 	bne.w	177ce <cmd_advertise+0x166>
    if (argc > 1 && strcmp(argv[1], "stop") == 0) {
   17680:	2c01      	cmp	r4, #1
   17682:	dd06      	ble.n	17692 <cmd_advertise+0x2a>
   17684:	496d      	ldr	r1, [pc, #436]	; (1783c <cmd_advertise+0x1d4>)
   17686:	6868      	ldr	r0, [r5, #4]
   17688:	f003 fb4f 	bl	1ad2a <strcmp>
   1768c:	2800      	cmp	r0, #0
   1768e:	f000 8090 	beq.w	177b2 <cmd_advertise+0x14a>
    params.conn_mode = parse_arg_kv_dflt("conn", cmd_adv_conn_modes,
   17692:	ab02      	add	r3, sp, #8
   17694:	2202      	movs	r2, #2
   17696:	496a      	ldr	r1, [pc, #424]	; (17840 <cmd_advertise+0x1d8>)
   17698:	486a      	ldr	r0, [pc, #424]	; (17844 <cmd_advertise+0x1dc>)
   1769a:	f001 f9cc 	bl	18a36 <parse_arg_kv_dflt>
   1769e:	f88d 0014 	strb.w	r0, [sp, #20]
    if (rc != 0) {
   176a2:	9b02      	ldr	r3, [sp, #8]
   176a4:	2b00      	cmp	r3, #0
   176a6:	f040 808e 	bne.w	177c6 <cmd_advertise+0x15e>
    params.disc_mode = parse_arg_kv_dflt("discov", cmd_adv_disc_modes,
   176aa:	ab02      	add	r3, sp, #8
   176ac:	2202      	movs	r2, #2
   176ae:	4966      	ldr	r1, [pc, #408]	; (17848 <cmd_advertise+0x1e0>)
   176b0:	4866      	ldr	r0, [pc, #408]	; (1784c <cmd_advertise+0x1e4>)
   176b2:	f001 f9c0 	bl	18a36 <parse_arg_kv_dflt>
   176b6:	f88d 0015 	strb.w	r0, [sp, #21]
    if (rc != 0) {
   176ba:	9b02      	ldr	r3, [sp, #8]
   176bc:	2b00      	cmp	r3, #0
   176be:	f040 8088 	bne.w	177d2 <cmd_advertise+0x16a>
    rc = parse_dev_addr("peer_", cmd_peer_addr_types, &peer_addr);
   176c2:	aa03      	add	r2, sp, #12
   176c4:	4962      	ldr	r1, [pc, #392]	; (17850 <cmd_advertise+0x1e8>)
   176c6:	4863      	ldr	r0, [pc, #396]	; (17854 <cmd_advertise+0x1ec>)
   176c8:	f7fe fc5e 	bl	15f88 <parse_dev_addr>
   176cc:	9002      	str	r0, [sp, #8]
    if (rc == ENOENT) {
   176ce:	2802      	cmp	r0, #2
   176d0:	f000 8089 	beq.w	177e6 <cmd_advertise+0x17e>
    } else if (rc != 0) {
   176d4:	2800      	cmp	r0, #0
   176d6:	f040 8081 	bne.w	177dc <cmd_advertise+0x174>
    ble_addr_t *peer_addr_param = &peer_addr;
   176da:	ae03      	add	r6, sp, #12
    restart = parse_arg_bool_dflt("restart", 0, &rc);
   176dc:	aa02      	add	r2, sp, #8
   176de:	2100      	movs	r1, #0
   176e0:	485d      	ldr	r0, [pc, #372]	; (17858 <cmd_advertise+0x1f0>)
   176e2:	f001 f8ec 	bl	188be <parse_arg_bool_dflt>
   176e6:	1e04      	subs	r4, r0, #0
   176e8:	bf18      	it	ne
   176ea:	2401      	movne	r4, #1
    if (rc != 0) {
   176ec:	9b02      	ldr	r3, [sp, #8]
   176ee:	2b00      	cmp	r3, #0
   176f0:	d17b      	bne.n	177ea <cmd_advertise+0x182>
    own_addr_type = parse_arg_kv_dflt("own_addr_type", cmd_own_addr_types,
   176f2:	ab02      	add	r3, sp, #8
   176f4:	2200      	movs	r2, #0
   176f6:	4959      	ldr	r1, [pc, #356]	; (1785c <cmd_advertise+0x1f4>)
   176f8:	4859      	ldr	r0, [pc, #356]	; (17860 <cmd_advertise+0x1f8>)
   176fa:	f001 f99c 	bl	18a36 <parse_arg_kv_dflt>
   176fe:	b2c5      	uxtb	r5, r0
    if (rc != 0) {
   17700:	9b02      	ldr	r3, [sp, #8]
   17702:	2b00      	cmp	r3, #0
   17704:	d176      	bne.n	177f4 <cmd_advertise+0x18c>
    params.channel_map = parse_arg_uint8_dflt("channel_map", 0, &rc);
   17706:	aa02      	add	r2, sp, #8
   17708:	2100      	movs	r1, #0
   1770a:	4856      	ldr	r0, [pc, #344]	; (17864 <cmd_advertise+0x1fc>)
   1770c:	f001 f91c 	bl	18948 <parse_arg_uint8_dflt>
   17710:	f88d 001a 	strb.w	r0, [sp, #26]
    if (rc != 0) {
   17714:	9b02      	ldr	r3, [sp, #8]
   17716:	2b00      	cmp	r3, #0
   17718:	d171      	bne.n	177fe <cmd_advertise+0x196>
    params.filter_policy = parse_arg_kv_dflt("filter", cmd_adv_filt_types,
   1771a:	ab02      	add	r3, sp, #8
   1771c:	2200      	movs	r2, #0
   1771e:	4952      	ldr	r1, [pc, #328]	; (17868 <cmd_advertise+0x200>)
   17720:	4852      	ldr	r0, [pc, #328]	; (1786c <cmd_advertise+0x204>)
   17722:	f001 f988 	bl	18a36 <parse_arg_kv_dflt>
   17726:	f88d 001b 	strb.w	r0, [sp, #27]
    if (rc != 0) {
   1772a:	9b02      	ldr	r3, [sp, #8]
   1772c:	2b00      	cmp	r3, #0
   1772e:	d16b      	bne.n	17808 <cmd_advertise+0x1a0>
    params.itvl_min = parse_arg_time_dflt("interval_min", 625, 0, &rc);
   17730:	ab02      	add	r3, sp, #8
   17732:	2200      	movs	r2, #0
   17734:	f240 2171 	movw	r1, #625	; 0x271
   17738:	484d      	ldr	r0, [pc, #308]	; (17870 <cmd_advertise+0x208>)
   1773a:	f001 f929 	bl	18990 <parse_arg_time_dflt>
   1773e:	f8ad 0016 	strh.w	r0, [sp, #22]
    if (rc != 0) {
   17742:	9b02      	ldr	r3, [sp, #8]
   17744:	2b00      	cmp	r3, #0
   17746:	d164      	bne.n	17812 <cmd_advertise+0x1aa>
    params.itvl_max = parse_arg_time_dflt("interval_max", 625, 0, &rc);
   17748:	ab02      	add	r3, sp, #8
   1774a:	2200      	movs	r2, #0
   1774c:	f240 2171 	movw	r1, #625	; 0x271
   17750:	4848      	ldr	r0, [pc, #288]	; (17874 <cmd_advertise+0x20c>)
   17752:	f001 f91d 	bl	18990 <parse_arg_time_dflt>
   17756:	f8ad 0018 	strh.w	r0, [sp, #24]
    if (rc != 0) {
   1775a:	9b02      	ldr	r3, [sp, #8]
   1775c:	2b00      	cmp	r3, #0
   1775e:	d15d      	bne.n	1781c <cmd_advertise+0x1b4>
    params.high_duty_cycle = parse_arg_bool_dflt("high_duty", 0, &rc);
   17760:	aa02      	add	r2, sp, #8
   17762:	2100      	movs	r1, #0
   17764:	4844      	ldr	r0, [pc, #272]	; (17878 <cmd_advertise+0x210>)
   17766:	f001 f8aa 	bl	188be <parse_arg_bool_dflt>
   1776a:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1776e:	f360 0300 	bfi	r3, r0, #0, #1
   17772:	f88d 301c 	strb.w	r3, [sp, #28]
    if (rc != 0) {
   17776:	9b02      	ldr	r3, [sp, #8]
   17778:	2b00      	cmp	r3, #0
   1777a:	d154      	bne.n	17826 <cmd_advertise+0x1be>
    duration_ms = parse_arg_long_bounds_dflt("duration", 1, INT32_MAX,
   1777c:	ab02      	add	r3, sp, #8
   1777e:	9300      	str	r3, [sp, #0]
   17780:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   17784:	461a      	mov	r2, r3
   17786:	2101      	movs	r1, #1
   17788:	483c      	ldr	r0, [pc, #240]	; (1787c <cmd_advertise+0x214>)
   1778a:	f001 f842 	bl	18812 <parse_arg_long_bounds_dflt>
   1778e:	4602      	mov	r2, r0
    if (rc != 0) {
   17790:	9b02      	ldr	r3, [sp, #8]
   17792:	2b00      	cmp	r3, #0
   17794:	d14c      	bne.n	17830 <cmd_advertise+0x1c8>
    rc = btshell_adv_start(own_addr_type, peer_addr_param, duration_ms,
   17796:	9400      	str	r4, [sp, #0]
   17798:	ab05      	add	r3, sp, #20
   1779a:	4631      	mov	r1, r6
   1779c:	4628      	mov	r0, r5
   1779e:	f7fd ff8d 	bl	156bc <btshell_adv_start>
   177a2:	9002      	str	r0, [sp, #8]
    if (rc != 0) {
   177a4:	b198      	cbz	r0, 177ce <cmd_advertise+0x166>
        console_printf("advertise fail: %d\n", rc);
   177a6:	4601      	mov	r1, r0
   177a8:	4835      	ldr	r0, [pc, #212]	; (17880 <cmd_advertise+0x218>)
   177aa:	f004 fcbf 	bl	1c12c <console_printf>
        return rc;
   177ae:	9802      	ldr	r0, [sp, #8]
   177b0:	e00d      	b.n	177ce <cmd_advertise+0x166>
        rc = btshell_adv_stop();
   177b2:	f7fd ff79 	bl	156a8 <btshell_adv_stop>
   177b6:	9002      	str	r0, [sp, #8]
        if (rc != 0) {
   177b8:	b148      	cbz	r0, 177ce <cmd_advertise+0x166>
            console_printf("advertise stop fail: %d\n", rc);
   177ba:	4601      	mov	r1, r0
   177bc:	4831      	ldr	r0, [pc, #196]	; (17884 <cmd_advertise+0x21c>)
   177be:	f004 fcb5 	bl	1c12c <console_printf>
            return rc;
   177c2:	9802      	ldr	r0, [sp, #8]
   177c4:	e003      	b.n	177ce <cmd_advertise+0x166>
        console_printf("invalid 'conn' parameter\n");
   177c6:	4830      	ldr	r0, [pc, #192]	; (17888 <cmd_advertise+0x220>)
   177c8:	f004 fcb0 	bl	1c12c <console_printf>
        return rc;
   177cc:	9802      	ldr	r0, [sp, #8]
}
   177ce:	b008      	add	sp, #32
   177d0:	bd70      	pop	{r4, r5, r6, pc}
        console_printf("invalid 'discov' parameter\n");
   177d2:	482e      	ldr	r0, [pc, #184]	; (1788c <cmd_advertise+0x224>)
   177d4:	f004 fcaa 	bl	1c12c <console_printf>
        return rc;
   177d8:	9802      	ldr	r0, [sp, #8]
   177da:	e7f8      	b.n	177ce <cmd_advertise+0x166>
        console_printf("invalid 'peer_addr' parameter\n");
   177dc:	482c      	ldr	r0, [pc, #176]	; (17890 <cmd_advertise+0x228>)
   177de:	f004 fca5 	bl	1c12c <console_printf>
        return rc;
   177e2:	9802      	ldr	r0, [sp, #8]
   177e4:	e7f3      	b.n	177ce <cmd_advertise+0x166>
        peer_addr_param = NULL;
   177e6:	2600      	movs	r6, #0
   177e8:	e778      	b.n	176dc <cmd_advertise+0x74>
        console_printf("invalid 'restart' parameter\n");
   177ea:	482a      	ldr	r0, [pc, #168]	; (17894 <cmd_advertise+0x22c>)
   177ec:	f004 fc9e 	bl	1c12c <console_printf>
        return rc;
   177f0:	9802      	ldr	r0, [sp, #8]
   177f2:	e7ec      	b.n	177ce <cmd_advertise+0x166>
        console_printf("invalid 'own_addr_type' parameter\n");
   177f4:	4828      	ldr	r0, [pc, #160]	; (17898 <cmd_advertise+0x230>)
   177f6:	f004 fc99 	bl	1c12c <console_printf>
        return rc;
   177fa:	9802      	ldr	r0, [sp, #8]
   177fc:	e7e7      	b.n	177ce <cmd_advertise+0x166>
        console_printf("invalid 'channel_map' parameter\n");
   177fe:	4827      	ldr	r0, [pc, #156]	; (1789c <cmd_advertise+0x234>)
   17800:	f004 fc94 	bl	1c12c <console_printf>
        return rc;
   17804:	9802      	ldr	r0, [sp, #8]
   17806:	e7e2      	b.n	177ce <cmd_advertise+0x166>
        console_printf("invalid 'filter' parameter\n");
   17808:	4825      	ldr	r0, [pc, #148]	; (178a0 <cmd_advertise+0x238>)
   1780a:	f004 fc8f 	bl	1c12c <console_printf>
        return rc;
   1780e:	9802      	ldr	r0, [sp, #8]
   17810:	e7dd      	b.n	177ce <cmd_advertise+0x166>
        console_printf("invalid 'interval_min' parameter\n");
   17812:	4824      	ldr	r0, [pc, #144]	; (178a4 <cmd_advertise+0x23c>)
   17814:	f004 fc8a 	bl	1c12c <console_printf>
        return rc;
   17818:	9802      	ldr	r0, [sp, #8]
   1781a:	e7d8      	b.n	177ce <cmd_advertise+0x166>
        console_printf("invalid 'interval_max' parameter\n");
   1781c:	4822      	ldr	r0, [pc, #136]	; (178a8 <cmd_advertise+0x240>)
   1781e:	f004 fc85 	bl	1c12c <console_printf>
        return rc;
   17822:	9802      	ldr	r0, [sp, #8]
   17824:	e7d3      	b.n	177ce <cmd_advertise+0x166>
        console_printf("invalid 'high_duty' parameter\n");
   17826:	4821      	ldr	r0, [pc, #132]	; (178ac <cmd_advertise+0x244>)
   17828:	f004 fc80 	bl	1c12c <console_printf>
        return rc;
   1782c:	9802      	ldr	r0, [sp, #8]
   1782e:	e7ce      	b.n	177ce <cmd_advertise+0x166>
        console_printf("invalid 'duration' parameter\n");
   17830:	481f      	ldr	r0, [pc, #124]	; (178b0 <cmd_advertise+0x248>)
   17832:	f004 fc7b 	bl	1c12c <console_printf>
        return rc;
   17836:	9802      	ldr	r0, [sp, #8]
   17838:	e7c9      	b.n	177ce <cmd_advertise+0x166>
   1783a:	bf00      	nop
   1783c:	000306c8 	.word	0x000306c8
   17840:	00032f48 	.word	0x00032f48
   17844:	000305d8 	.word	0x000305d8
   17848:	00032f68 	.word	0x00032f68
   1784c:	00031784 	.word	0x00031784
   17850:	00032ff8 	.word	0x00032ff8
   17854:	0003139c 	.word	0x0003139c
   17858:	000317a8 	.word	0x000317a8
   1785c:	00032fd0 	.word	0x00032fd0
   17860:	0003119c 	.word	0x0003119c
   17864:	000317d0 	.word	0x000317d0
   17868:	00032f88 	.word	0x00032f88
   1786c:	00031154 	.word	0x00031154
   17870:	00030988 	.word	0x00030988
   17874:	000309bc 	.word	0x000309bc
   17878:	00031800 	.word	0x00031800
   1787c:	00031094 	.word	0x00031094
   17880:	0003182c 	.word	0x0003182c
   17884:	00031768 	.word	0x00031768
   17888:	000305e0 	.word	0x000305e0
   1788c:	0003178c 	.word	0x0003178c
   17890:	000313a4 	.word	0x000313a4
   17894:	000317b0 	.word	0x000317b0
   17898:	000311ac 	.word	0x000311ac
   1789c:	000317dc 	.word	0x000317dc
   178a0:	0003115c 	.word	0x0003115c
   178a4:	00030998 	.word	0x00030998
   178a8:	000309cc 	.word	0x000309cc
   178ac:	0003180c 	.word	0x0003180c
   178b0:	000310a0 	.word	0x000310a0

000178b4 <cmd_parse_conn_start_end>:
{
   178b4:	b570      	push	{r4, r5, r6, lr}
   178b6:	b082      	sub	sp, #8
   178b8:	4604      	mov	r4, r0
   178ba:	460d      	mov	r5, r1
   178bc:	4616      	mov	r6, r2
    *out_conn = parse_arg_uint16("conn", &rc);
   178be:	a901      	add	r1, sp, #4
   178c0:	480b      	ldr	r0, [pc, #44]	; (178f0 <cmd_parse_conn_start_end+0x3c>)
   178c2:	f001 f810 	bl	188e6 <parse_arg_uint16>
   178c6:	8020      	strh	r0, [r4, #0]
    if (rc != 0) {
   178c8:	9801      	ldr	r0, [sp, #4]
   178ca:	b108      	cbz	r0, 178d0 <cmd_parse_conn_start_end+0x1c>
}
   178cc:	b002      	add	sp, #8
   178ce:	bd70      	pop	{r4, r5, r6, pc}
    *out_start = parse_arg_uint16("start", &rc);
   178d0:	a901      	add	r1, sp, #4
   178d2:	4808      	ldr	r0, [pc, #32]	; (178f4 <cmd_parse_conn_start_end+0x40>)
   178d4:	f001 f807 	bl	188e6 <parse_arg_uint16>
   178d8:	8028      	strh	r0, [r5, #0]
    if (rc != 0) {
   178da:	9801      	ldr	r0, [sp, #4]
   178dc:	2800      	cmp	r0, #0
   178de:	d1f5      	bne.n	178cc <cmd_parse_conn_start_end+0x18>
    *out_end = parse_arg_uint16("end", &rc);
   178e0:	a901      	add	r1, sp, #4
   178e2:	4805      	ldr	r0, [pc, #20]	; (178f8 <cmd_parse_conn_start_end+0x44>)
   178e4:	f000 ffff 	bl	188e6 <parse_arg_uint16>
   178e8:	8030      	strh	r0, [r6, #0]
    if (rc != 0) {
   178ea:	9801      	ldr	r0, [sp, #4]
   178ec:	e7ee      	b.n	178cc <cmd_parse_conn_start_end+0x18>
   178ee:	bf00      	nop
   178f0:	000305d8 	.word	0x000305d8
   178f4:	00031840 	.word	0x00031840
   178f8:	00031848 	.word	0x00031848

000178fc <cmd_init>:
};


void
cmd_init(void)
{
   178fc:	b510      	push	{r4, lr}
    shell_register(BTSHELL_MODULE, btshell_commands);
   178fe:	4c04      	ldr	r4, [pc, #16]	; (17910 <cmd_init+0x14>)
   17900:	4904      	ldr	r1, [pc, #16]	; (17914 <cmd_init+0x18>)
   17902:	4620      	mov	r0, r4
   17904:	f006 f86e 	bl	1d9e4 <shell_register>
    shell_register_default_module(BTSHELL_MODULE);
   17908:	4620      	mov	r0, r4
   1790a:	f006 f85c 	bl	1d9c6 <shell_register_default_module>
}
   1790e:	bd10      	pop	{r4, pc}
   17910:	0003184c 	.word	0x0003184c
   17914:	00032cd0 	.word	0x00032cd0

00017918 <cmd_gatt_discover_characteristic>:
 * $gatt-discover                                                            *
 *****************************************************************************/

int
cmd_gatt_discover_characteristic(int argc, char **argv)
{
   17918:	b510      	push	{r4, lr}
   1791a:	b088      	sub	sp, #32
    uint16_t conn_handle;
    uint16_t end_handle;
    ble_uuid_any_t uuid;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   1791c:	3104      	adds	r1, #4
   1791e:	3801      	subs	r0, #1
   17920:	f001 f938 	bl	18b94 <parse_arg_all>
    if (rc != 0) {
   17924:	4604      	mov	r4, r0
   17926:	b110      	cbz	r0, 1792e <cmd_gatt_discover_characteristic+0x16>
        console_printf("error discovering characteristics; rc=%d\n", rc);
        return rc;
    }

    return 0;
}
   17928:	4620      	mov	r0, r4
   1792a:	b008      	add	sp, #32
   1792c:	bd10      	pop	{r4, pc}
    rc = cmd_parse_conn_start_end(&conn_handle, &start_handle, &end_handle);
   1792e:	f10d 021a 	add.w	r2, sp, #26
   17932:	f10d 011e 	add.w	r1, sp, #30
   17936:	a807      	add	r0, sp, #28
   17938:	f7ff ffbc 	bl	178b4 <cmd_parse_conn_start_end>
    if (rc != 0) {
   1793c:	4604      	mov	r4, r0
   1793e:	b9b8      	cbnz	r0, 17970 <cmd_gatt_discover_characteristic+0x58>
    rc = parse_arg_uuid("uuid", &uuid);
   17940:	a901      	add	r1, sp, #4
   17942:	4815      	ldr	r0, [pc, #84]	; (17998 <cmd_gatt_discover_characteristic+0x80>)
   17944:	f001 f8f4 	bl	18b30 <parse_arg_uuid>
    if (rc == 0) {
   17948:	4604      	mov	r4, r0
   1794a:	b1a8      	cbz	r0, 17978 <cmd_gatt_discover_characteristic+0x60>
    } else if (rc == ENOENT) {
   1794c:	2802      	cmp	r0, #2
   1794e:	d11e      	bne.n	1798e <cmd_gatt_discover_characteristic+0x76>
        rc = btshell_disc_all_chrs(conn_handle, start_handle, end_handle);
   17950:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   17954:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   17958:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   1795c:	f7fd fcdc 	bl	15318 <btshell_disc_all_chrs>
   17960:	4604      	mov	r4, r0
    if (rc != 0) {
   17962:	2c00      	cmp	r4, #0
   17964:	d0e0      	beq.n	17928 <cmd_gatt_discover_characteristic+0x10>
        console_printf("error discovering characteristics; rc=%d\n", rc);
   17966:	4621      	mov	r1, r4
   17968:	480c      	ldr	r0, [pc, #48]	; (1799c <cmd_gatt_discover_characteristic+0x84>)
   1796a:	f004 fbdf 	bl	1c12c <console_printf>
        return rc;
   1796e:	e7db      	b.n	17928 <cmd_gatt_discover_characteristic+0x10>
        console_printf("invalid 'conn start end' parameter\n");
   17970:	480b      	ldr	r0, [pc, #44]	; (179a0 <cmd_gatt_discover_characteristic+0x88>)
   17972:	f004 fbdb 	bl	1c12c <console_printf>
        return rc;
   17976:	e7d7      	b.n	17928 <cmd_gatt_discover_characteristic+0x10>
        rc = btshell_disc_chrs_by_uuid(conn_handle, start_handle, end_handle,
   17978:	ab01      	add	r3, sp, #4
   1797a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   1797e:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   17982:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   17986:	f7fd fce1 	bl	1534c <btshell_disc_chrs_by_uuid>
   1798a:	4604      	mov	r4, r0
   1798c:	e7e9      	b.n	17962 <cmd_gatt_discover_characteristic+0x4a>
        console_printf("invalid 'uuid' parameter\n");
   1798e:	4805      	ldr	r0, [pc, #20]	; (179a4 <cmd_gatt_discover_characteristic+0x8c>)
   17990:	f004 fbcc 	bl	1c12c <console_printf>
        return rc;
   17994:	e7c8      	b.n	17928 <cmd_gatt_discover_characteristic+0x10>
   17996:	bf00      	nop
   17998:	00031cfc 	.word	0x00031cfc
   1799c:	000337c0 	.word	0x000337c0
   179a0:	00033780 	.word	0x00033780
   179a4:	000337a4 	.word	0x000337a4

000179a8 <cmd_gatt_discover_descriptor>:

int
cmd_gatt_discover_descriptor(int argc, char **argv)
{
   179a8:	b510      	push	{r4, lr}
   179aa:	b082      	sub	sp, #8
    uint16_t start_handle;
    uint16_t conn_handle;
    uint16_t end_handle;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   179ac:	3104      	adds	r1, #4
   179ae:	3801      	subs	r0, #1
   179b0:	f001 f8f0 	bl	18b94 <parse_arg_all>
    if (rc != 0) {
   179b4:	4604      	mov	r4, r0
   179b6:	b110      	cbz	r0, 179be <cmd_gatt_discover_descriptor+0x16>
        console_printf("error discovering descriptors; rc=%d\n", rc);
        return rc;
    }

    return 0;
}
   179b8:	4620      	mov	r0, r4
   179ba:	b002      	add	sp, #8
   179bc:	bd10      	pop	{r4, pc}
    rc = cmd_parse_conn_start_end(&conn_handle, &start_handle, &end_handle);
   179be:	f10d 0202 	add.w	r2, sp, #2
   179c2:	f10d 0106 	add.w	r1, sp, #6
   179c6:	a801      	add	r0, sp, #4
   179c8:	f7ff ff74 	bl	178b4 <cmd_parse_conn_start_end>
    if (rc != 0) {
   179cc:	4604      	mov	r4, r0
   179ce:	b978      	cbnz	r0, 179f0 <cmd_gatt_discover_descriptor+0x48>
    rc = btshell_disc_all_dscs(conn_handle, start_handle, end_handle);
   179d0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   179d4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   179d8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   179dc:	f7fd fcd2 	bl	15384 <btshell_disc_all_dscs>
    if (rc != 0) {
   179e0:	4604      	mov	r4, r0
   179e2:	2800      	cmp	r0, #0
   179e4:	d0e8      	beq.n	179b8 <cmd_gatt_discover_descriptor+0x10>
        console_printf("error discovering descriptors; rc=%d\n", rc);
   179e6:	4601      	mov	r1, r0
   179e8:	4803      	ldr	r0, [pc, #12]	; (179f8 <cmd_gatt_discover_descriptor+0x50>)
   179ea:	f004 fb9f 	bl	1c12c <console_printf>
        return rc;
   179ee:	e7e3      	b.n	179b8 <cmd_gatt_discover_descriptor+0x10>
        console_printf("invalid 'conn start end' parameter\n");
   179f0:	4802      	ldr	r0, [pc, #8]	; (179fc <cmd_gatt_discover_descriptor+0x54>)
   179f2:	f004 fb9b 	bl	1c12c <console_printf>
        return rc;
   179f6:	e7df      	b.n	179b8 <cmd_gatt_discover_descriptor+0x10>
   179f8:	000337ec 	.word	0x000337ec
   179fc:	00033780 	.word	0x00033780

00017a00 <cmd_gatt_discover_service>:

int
cmd_gatt_discover_service(int argc, char **argv)
{
   17a00:	b510      	push	{r4, lr}
   17a02:	b086      	sub	sp, #24
    ble_uuid_any_t uuid;
    int conn_handle;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17a04:	3104      	adds	r1, #4
   17a06:	3801      	subs	r0, #1
   17a08:	f001 f8c4 	bl	18b94 <parse_arg_all>
   17a0c:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   17a0e:	b108      	cbz	r0, 17a14 <cmd_gatt_discover_service+0x14>
        console_printf("error discovering services; rc=%d\n", rc);
        return rc;
    }

    return 0;
}
   17a10:	b006      	add	sp, #24
   17a12:	bd10      	pop	{r4, pc}
    conn_handle = parse_arg_uint16("conn", &rc);
   17a14:	4669      	mov	r1, sp
   17a16:	4815      	ldr	r0, [pc, #84]	; (17a6c <cmd_gatt_discover_service+0x6c>)
   17a18:	f000 ff65 	bl	188e6 <parse_arg_uint16>
   17a1c:	4604      	mov	r4, r0
    if (rc != 0) {
   17a1e:	9b00      	ldr	r3, [sp, #0]
   17a20:	b9a3      	cbnz	r3, 17a4c <cmd_gatt_discover_service+0x4c>
    rc = parse_arg_uuid("uuid", &uuid);
   17a22:	a901      	add	r1, sp, #4
   17a24:	4812      	ldr	r0, [pc, #72]	; (17a70 <cmd_gatt_discover_service+0x70>)
   17a26:	f001 f883 	bl	18b30 <parse_arg_uuid>
   17a2a:	9000      	str	r0, [sp, #0]
    if (rc == 0) {
   17a2c:	b198      	cbz	r0, 17a56 <cmd_gatt_discover_service+0x56>
    } else if (rc == ENOENT) {
   17a2e:	2802      	cmp	r0, #2
   17a30:	d117      	bne.n	17a62 <cmd_gatt_discover_service+0x62>
        rc = btshell_disc_svcs(conn_handle);
   17a32:	4620      	mov	r0, r4
   17a34:	f7fd fc96 	bl	15364 <btshell_disc_svcs>
   17a38:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   17a3a:	9800      	ldr	r0, [sp, #0]
   17a3c:	2800      	cmp	r0, #0
   17a3e:	d0e7      	beq.n	17a10 <cmd_gatt_discover_service+0x10>
        console_printf("error discovering services; rc=%d\n", rc);
   17a40:	4601      	mov	r1, r0
   17a42:	480c      	ldr	r0, [pc, #48]	; (17a74 <cmd_gatt_discover_service+0x74>)
   17a44:	f004 fb72 	bl	1c12c <console_printf>
        return rc;
   17a48:	9800      	ldr	r0, [sp, #0]
   17a4a:	e7e1      	b.n	17a10 <cmd_gatt_discover_service+0x10>
        console_printf("invalid 'conn' parameter\n");
   17a4c:	480a      	ldr	r0, [pc, #40]	; (17a78 <cmd_gatt_discover_service+0x78>)
   17a4e:	f004 fb6d 	bl	1c12c <console_printf>
        return rc;
   17a52:	9800      	ldr	r0, [sp, #0]
   17a54:	e7dc      	b.n	17a10 <cmd_gatt_discover_service+0x10>
        rc = btshell_disc_svc_by_uuid(conn_handle, &uuid.u);
   17a56:	a901      	add	r1, sp, #4
   17a58:	4620      	mov	r0, r4
   17a5a:	f7fd fc8b 	bl	15374 <btshell_disc_svc_by_uuid>
   17a5e:	9000      	str	r0, [sp, #0]
   17a60:	e7eb      	b.n	17a3a <cmd_gatt_discover_service+0x3a>
        console_printf("invalid 'uuid' parameter\n");
   17a62:	4806      	ldr	r0, [pc, #24]	; (17a7c <cmd_gatt_discover_service+0x7c>)
   17a64:	f004 fb62 	bl	1c12c <console_printf>
        return rc;
   17a68:	9800      	ldr	r0, [sp, #0]
   17a6a:	e7d1      	b.n	17a10 <cmd_gatt_discover_service+0x10>
   17a6c:	000305d8 	.word	0x000305d8
   17a70:	00031cfc 	.word	0x00031cfc
   17a74:	00033814 	.word	0x00033814
   17a78:	000305e0 	.word	0x000305e0
   17a7c:	000337a4 	.word	0x000337a4

00017a80 <cmd_gatt_discover_full>:

int
cmd_gatt_discover_full(int argc, char **argv)
{
   17a80:	b500      	push	{lr}
   17a82:	b083      	sub	sp, #12
    int conn_handle;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17a84:	3104      	adds	r1, #4
   17a86:	3801      	subs	r0, #1
   17a88:	f001 f884 	bl	18b94 <parse_arg_all>
   17a8c:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   17a8e:	b110      	cbz	r0, 17a96 <cmd_gatt_discover_full+0x16>
        console_printf("error discovering all; rc=%d\n", rc);
        return rc;
    }

    return 0;
}
   17a90:	b003      	add	sp, #12
   17a92:	f85d fb04 	ldr.w	pc, [sp], #4
    conn_handle = parse_arg_uint16("conn", &rc);
   17a96:	a901      	add	r1, sp, #4
   17a98:	480a      	ldr	r0, [pc, #40]	; (17ac4 <cmd_gatt_discover_full+0x44>)
   17a9a:	f000 ff24 	bl	188e6 <parse_arg_uint16>
    if (rc != 0) {
   17a9e:	9b01      	ldr	r3, [sp, #4]
   17aa0:	b953      	cbnz	r3, 17ab8 <cmd_gatt_discover_full+0x38>
    rc = btshell_disc_full(conn_handle);
   17aa2:	f7fd fd57 	bl	15554 <btshell_disc_full>
   17aa6:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   17aa8:	2800      	cmp	r0, #0
   17aaa:	d0f1      	beq.n	17a90 <cmd_gatt_discover_full+0x10>
        console_printf("error discovering all; rc=%d\n", rc);
   17aac:	4601      	mov	r1, r0
   17aae:	4806      	ldr	r0, [pc, #24]	; (17ac8 <cmd_gatt_discover_full+0x48>)
   17ab0:	f004 fb3c 	bl	1c12c <console_printf>
        return rc;
   17ab4:	9801      	ldr	r0, [sp, #4]
   17ab6:	e7eb      	b.n	17a90 <cmd_gatt_discover_full+0x10>
        console_printf("invalid 'conn' parameter\n");
   17ab8:	4804      	ldr	r0, [pc, #16]	; (17acc <cmd_gatt_discover_full+0x4c>)
   17aba:	f004 fb37 	bl	1c12c <console_printf>
        return rc;
   17abe:	9801      	ldr	r0, [sp, #4]
   17ac0:	e7e6      	b.n	17a90 <cmd_gatt_discover_full+0x10>
   17ac2:	bf00      	nop
   17ac4:	000305d8 	.word	0x000305d8
   17ac8:	00033838 	.word	0x00033838
   17acc:	000305e0 	.word	0x000305e0

00017ad0 <cmd_gatt_exchange_mtu>:
 * $gatt-exchange-mtu                                                        *
 *****************************************************************************/

int
cmd_gatt_exchange_mtu(int argc, char **argv)
{
   17ad0:	b500      	push	{lr}
   17ad2:	b083      	sub	sp, #12
    uint16_t conn_handle;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17ad4:	3104      	adds	r1, #4
   17ad6:	3801      	subs	r0, #1
   17ad8:	f001 f85c 	bl	18b94 <parse_arg_all>
   17adc:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   17ade:	b110      	cbz	r0, 17ae6 <cmd_gatt_exchange_mtu+0x16>
        console_printf("error exchanging mtu; rc=%d\n", rc);
        return rc;
    }

    return 0;
}
   17ae0:	b003      	add	sp, #12
   17ae2:	f85d fb04 	ldr.w	pc, [sp], #4
    conn_handle = parse_arg_uint16("conn", &rc);
   17ae6:	a901      	add	r1, sp, #4
   17ae8:	480a      	ldr	r0, [pc, #40]	; (17b14 <cmd_gatt_exchange_mtu+0x44>)
   17aea:	f000 fefc 	bl	188e6 <parse_arg_uint16>
    if (rc != 0) {
   17aee:	9b01      	ldr	r3, [sp, #4]
   17af0:	b953      	cbnz	r3, 17b08 <cmd_gatt_exchange_mtu+0x38>
    rc = btshell_exchange_mtu(conn_handle);
   17af2:	f7fd fc09 	bl	15308 <btshell_exchange_mtu>
   17af6:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   17af8:	2800      	cmp	r0, #0
   17afa:	d0f1      	beq.n	17ae0 <cmd_gatt_exchange_mtu+0x10>
        console_printf("error exchanging mtu; rc=%d\n", rc);
   17afc:	4601      	mov	r1, r0
   17afe:	4806      	ldr	r0, [pc, #24]	; (17b18 <cmd_gatt_exchange_mtu+0x48>)
   17b00:	f004 fb14 	bl	1c12c <console_printf>
        return rc;
   17b04:	9801      	ldr	r0, [sp, #4]
   17b06:	e7eb      	b.n	17ae0 <cmd_gatt_exchange_mtu+0x10>
        console_printf("invalid 'conn' parameter\n");
   17b08:	4804      	ldr	r0, [pc, #16]	; (17b1c <cmd_gatt_exchange_mtu+0x4c>)
   17b0a:	f004 fb0f 	bl	1c12c <console_printf>
        return rc;
   17b0e:	9801      	ldr	r0, [sp, #4]
   17b10:	e7e6      	b.n	17ae0 <cmd_gatt_exchange_mtu+0x10>
   17b12:	bf00      	nop
   17b14:	000305d8 	.word	0x000305d8
   17b18:	00033858 	.word	0x00033858
   17b1c:	000305e0 	.word	0x000305e0

00017b20 <cmd_gatt_notify>:
 * $gatt-notify                                                              *
 *****************************************************************************/

int
cmd_gatt_notify(int argc, char **argv)
{
   17b20:	b510      	push	{r4, lr}
   17b22:	b082      	sub	sp, #8
    uint16_t attr_handle;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17b24:	3104      	adds	r1, #4
   17b26:	3801      	subs	r0, #1
   17b28:	f001 f834 	bl	18b94 <parse_arg_all>
   17b2c:	4604      	mov	r4, r0
   17b2e:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   17b30:	b110      	cbz	r0, 17b38 <cmd_gatt_notify+0x18>
    }

    btshell_notify(attr_handle);

    return 0;
}
   17b32:	4620      	mov	r0, r4
   17b34:	b002      	add	sp, #8
   17b36:	bd10      	pop	{r4, pc}
    attr_handle = parse_arg_uint16("attr", &rc);
   17b38:	a901      	add	r1, sp, #4
   17b3a:	4806      	ldr	r0, [pc, #24]	; (17b54 <cmd_gatt_notify+0x34>)
   17b3c:	f000 fed3 	bl	188e6 <parse_arg_uint16>
    if (rc != 0) {
   17b40:	9c01      	ldr	r4, [sp, #4]
   17b42:	b914      	cbnz	r4, 17b4a <cmd_gatt_notify+0x2a>
    btshell_notify(attr_handle);
   17b44:	f7fd fe30 	bl	157a8 <btshell_notify>
    return 0;
   17b48:	e7f3      	b.n	17b32 <cmd_gatt_notify+0x12>
        console_printf("invalid 'attr' parameter\n");
   17b4a:	4803      	ldr	r0, [pc, #12]	; (17b58 <cmd_gatt_notify+0x38>)
   17b4c:	f004 faee 	bl	1c12c <console_printf>
        return rc;
   17b50:	9c01      	ldr	r4, [sp, #4]
   17b52:	e7ee      	b.n	17b32 <cmd_gatt_notify+0x12>
   17b54:	00031b40 	.word	0x00031b40
   17b58:	00033878 	.word	0x00033878

00017b5c <cmd_gatt_read>:

#define CMD_READ_MAX_ATTRS  8

int
cmd_gatt_read(int argc, char **argv)
{
   17b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17b60:	b087      	sub	sp, #28
    uint8_t num_attr_handles;
    int is_uuid;
    int is_long;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17b62:	3104      	adds	r1, #4
   17b64:	3801      	subs	r0, #1
   17b66:	f001 f815 	bl	18b94 <parse_arg_all>
   17b6a:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   17b6c:	b110      	cbz	r0, 17b74 <cmd_gatt_read+0x18>
        console_printf("error reading characteristic; rc=%d\n", rc);
        return rc;
    }

    return 0;
}
   17b6e:	b007      	add	sp, #28
   17b70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    conn_handle = parse_arg_uint16("conn", &rc);
   17b74:	4669      	mov	r1, sp
   17b76:	4855      	ldr	r0, [pc, #340]	; (17ccc <cmd_gatt_read+0x170>)
   17b78:	f000 feb5 	bl	188e6 <parse_arg_uint16>
   17b7c:	4605      	mov	r5, r0
    if (rc != 0) {
   17b7e:	9e00      	ldr	r6, [sp, #0]
   17b80:	b956      	cbnz	r6, 17b98 <cmd_gatt_read+0x3c>
    is_long = parse_arg_long("long", &rc);
   17b82:	4669      	mov	r1, sp
   17b84:	4852      	ldr	r0, [pc, #328]	; (17cd0 <cmd_gatt_read+0x174>)
   17b86:	f000 fe89 	bl	1889c <parse_arg_long>
   17b8a:	4607      	mov	r7, r0
    if (rc == ENOENT) {
   17b8c:	9b00      	ldr	r3, [sp, #0]
   17b8e:	2b02      	cmp	r3, #2
   17b90:	d00c      	beq.n	17bac <cmd_gatt_read+0x50>
    } else if (rc != 0) {
   17b92:	b933      	cbnz	r3, 17ba2 <cmd_gatt_read+0x46>
    for (num_attr_handles = 0;
   17b94:	2400      	movs	r4, #0
   17b96:	e00d      	b.n	17bb4 <cmd_gatt_read+0x58>
        console_printf("invalid 'conn' parameter\n");
   17b98:	484e      	ldr	r0, [pc, #312]	; (17cd4 <cmd_gatt_read+0x178>)
   17b9a:	f004 fac7 	bl	1c12c <console_printf>
        return rc;
   17b9e:	9800      	ldr	r0, [sp, #0]
   17ba0:	e7e5      	b.n	17b6e <cmd_gatt_read+0x12>
        console_printf("invalid 'long' parameter\n");
   17ba2:	484d      	ldr	r0, [pc, #308]	; (17cd8 <cmd_gatt_read+0x17c>)
   17ba4:	f004 fac2 	bl	1c12c <console_printf>
        return rc;
   17ba8:	9800      	ldr	r0, [sp, #0]
   17baa:	e7e0      	b.n	17b6e <cmd_gatt_read+0x12>
        is_long = 0;
   17bac:	4637      	mov	r7, r6
   17bae:	e7f1      	b.n	17b94 <cmd_gatt_read+0x38>
         num_attr_handles++) {
   17bb0:	3401      	adds	r4, #1
   17bb2:	b2e4      	uxtb	r4, r4
    for (num_attr_handles = 0;
   17bb4:	2c07      	cmp	r4, #7
   17bb6:	d810      	bhi.n	17bda <cmd_gatt_read+0x7e>
        attr_handles[num_attr_handles] = parse_arg_uint16("attr", &rc);
   17bb8:	4669      	mov	r1, sp
   17bba:	4848      	ldr	r0, [pc, #288]	; (17cdc <cmd_gatt_read+0x180>)
   17bbc:	f000 fe93 	bl	188e6 <parse_arg_uint16>
   17bc0:	4b47      	ldr	r3, [pc, #284]	; (17ce0 <cmd_gatt_read+0x184>)
   17bc2:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
        if (rc == ENOENT) {
   17bc6:	9b00      	ldr	r3, [sp, #0]
   17bc8:	2b02      	cmp	r3, #2
   17bca:	d006      	beq.n	17bda <cmd_gatt_read+0x7e>
        } else if (rc != 0) {
   17bcc:	2b00      	cmp	r3, #0
   17bce:	d0ef      	beq.n	17bb0 <cmd_gatt_read+0x54>
            console_printf("invalid 'attr' parameter\n");
   17bd0:	4844      	ldr	r0, [pc, #272]	; (17ce4 <cmd_gatt_read+0x188>)
   17bd2:	f004 faab 	bl	1c12c <console_printf>
            return rc;
   17bd6:	9800      	ldr	r0, [sp, #0]
   17bd8:	e7c9      	b.n	17b6e <cmd_gatt_read+0x12>
    rc = parse_arg_uuid("uuid", &uuid);
   17bda:	a901      	add	r1, sp, #4
   17bdc:	4842      	ldr	r0, [pc, #264]	; (17ce8 <cmd_gatt_read+0x18c>)
   17bde:	f000 ffa7 	bl	18b30 <parse_arg_uuid>
   17be2:	9000      	str	r0, [sp, #0]
    if (rc == ENOENT) {
   17be4:	2802      	cmp	r0, #2
   17be6:	d001      	beq.n	17bec <cmd_gatt_read+0x90>
    } else if (rc == 0) {
   17be8:	bb48      	cbnz	r0, 17c3e <cmd_gatt_read+0xe2>
        is_uuid = 1;
   17bea:	2601      	movs	r6, #1
    start = parse_arg_uint16("start", &rc);
   17bec:	4669      	mov	r1, sp
   17bee:	483f      	ldr	r0, [pc, #252]	; (17cec <cmd_gatt_read+0x190>)
   17bf0:	f000 fe79 	bl	188e6 <parse_arg_uint16>
   17bf4:	4680      	mov	r8, r0
    if (rc == ENOENT) {
   17bf6:	9b00      	ldr	r3, [sp, #0]
   17bf8:	2b02      	cmp	r3, #2
   17bfa:	d02a      	beq.n	17c52 <cmd_gatt_read+0xf6>
    } else if (rc != 0) {
   17bfc:	bb23      	cbnz	r3, 17c48 <cmd_gatt_read+0xec>
    end = parse_arg_uint16("end", &rc);
   17bfe:	4669      	mov	r1, sp
   17c00:	483b      	ldr	r0, [pc, #236]	; (17cf0 <cmd_gatt_read+0x194>)
   17c02:	f000 fe70 	bl	188e6 <parse_arg_uint16>
   17c06:	4681      	mov	r9, r0
    if (rc == ENOENT) {
   17c08:	9b00      	ldr	r3, [sp, #0]
   17c0a:	2b02      	cmp	r3, #2
   17c0c:	d029      	beq.n	17c62 <cmd_gatt_read+0x106>
    } else if (rc != 0) {
   17c0e:	bb1b      	cbnz	r3, 17c58 <cmd_gatt_read+0xfc>
    offset = parse_arg_uint16("offset", &rc);
   17c10:	4669      	mov	r1, sp
   17c12:	4838      	ldr	r0, [pc, #224]	; (17cf4 <cmd_gatt_read+0x198>)
   17c14:	f000 fe67 	bl	188e6 <parse_arg_uint16>
    if (rc == ENOENT) {
   17c18:	9b00      	ldr	r3, [sp, #0]
   17c1a:	2b02      	cmp	r3, #2
   17c1c:	d029      	beq.n	17c72 <cmd_gatt_read+0x116>
    } else if (rc != 0) {
   17c1e:	bb1b      	cbnz	r3, 17c68 <cmd_gatt_read+0x10c>
    if (num_attr_handles == 1) {
   17c20:	2c01      	cmp	r4, #1
   17c22:	d028      	beq.n	17c76 <cmd_gatt_read+0x11a>
    } else if (num_attr_handles > 1) {
   17c24:	2c01      	cmp	r4, #1
   17c26:	d836      	bhi.n	17c96 <cmd_gatt_read+0x13a>
    } else if (is_uuid) {
   17c28:	2e00      	cmp	r6, #0
   17c2a:	d04c      	beq.n	17cc6 <cmd_gatt_read+0x16a>
        if (start == 0 || end == 0) {
   17c2c:	f1b8 0f00 	cmp.w	r8, #0
   17c30:	d002      	beq.n	17c38 <cmd_gatt_read+0xdc>
   17c32:	f1b9 0f00 	cmp.w	r9, #0
   17c36:	d13e      	bne.n	17cb6 <cmd_gatt_read+0x15a>
            rc = EINVAL;
   17c38:	2316      	movs	r3, #22
   17c3a:	9300      	str	r3, [sp, #0]
   17c3c:	e031      	b.n	17ca2 <cmd_gatt_read+0x146>
        console_printf("invalid 'uuid' parameter\n");
   17c3e:	482e      	ldr	r0, [pc, #184]	; (17cf8 <cmd_gatt_read+0x19c>)
   17c40:	f004 fa74 	bl	1c12c <console_printf>
        return rc;
   17c44:	9800      	ldr	r0, [sp, #0]
   17c46:	e792      	b.n	17b6e <cmd_gatt_read+0x12>
        console_printf("invalid 'start' parameter\n");
   17c48:	482c      	ldr	r0, [pc, #176]	; (17cfc <cmd_gatt_read+0x1a0>)
   17c4a:	f004 fa6f 	bl	1c12c <console_printf>
        return rc;
   17c4e:	9800      	ldr	r0, [sp, #0]
   17c50:	e78d      	b.n	17b6e <cmd_gatt_read+0x12>
        start = 0;
   17c52:	f04f 0800 	mov.w	r8, #0
   17c56:	e7d2      	b.n	17bfe <cmd_gatt_read+0xa2>
        console_printf("invalid 'end' parameter\n");
   17c58:	4829      	ldr	r0, [pc, #164]	; (17d00 <cmd_gatt_read+0x1a4>)
   17c5a:	f004 fa67 	bl	1c12c <console_printf>
        return rc;
   17c5e:	9800      	ldr	r0, [sp, #0]
   17c60:	e785      	b.n	17b6e <cmd_gatt_read+0x12>
        end = 0;
   17c62:	f04f 0900 	mov.w	r9, #0
   17c66:	e7d3      	b.n	17c10 <cmd_gatt_read+0xb4>
        console_printf("invalid 'offset' parameter\n");
   17c68:	4826      	ldr	r0, [pc, #152]	; (17d04 <cmd_gatt_read+0x1a8>)
   17c6a:	f004 fa5f 	bl	1c12c <console_printf>
        return rc;
   17c6e:	9800      	ldr	r0, [sp, #0]
   17c70:	e77d      	b.n	17b6e <cmd_gatt_read+0x12>
        offset = 0;
   17c72:	2000      	movs	r0, #0
   17c74:	e7d4      	b.n	17c20 <cmd_gatt_read+0xc4>
        if (is_long) {
   17c76:	b13f      	cbz	r7, 17c88 <cmd_gatt_read+0x12c>
            rc = btshell_read_long(conn_handle, attr_handles[0], offset);
   17c78:	4602      	mov	r2, r0
   17c7a:	4b19      	ldr	r3, [pc, #100]	; (17ce0 <cmd_gatt_read+0x184>)
   17c7c:	8819      	ldrh	r1, [r3, #0]
   17c7e:	4628      	mov	r0, r5
   17c80:	f7fd fcba 	bl	155f8 <btshell_read_long>
   17c84:	9000      	str	r0, [sp, #0]
   17c86:	e00c      	b.n	17ca2 <cmd_gatt_read+0x146>
            rc = btshell_read(conn_handle, attr_handles[0]);
   17c88:	4b15      	ldr	r3, [pc, #84]	; (17ce0 <cmd_gatt_read+0x184>)
   17c8a:	8819      	ldrh	r1, [r3, #0]
   17c8c:	4628      	mov	r0, r5
   17c8e:	f7fd fc87 	bl	155a0 <btshell_read>
   17c92:	9000      	str	r0, [sp, #0]
   17c94:	e005      	b.n	17ca2 <cmd_gatt_read+0x146>
        rc = btshell_read_mult(conn_handle, attr_handles, num_attr_handles);
   17c96:	4622      	mov	r2, r4
   17c98:	4911      	ldr	r1, [pc, #68]	; (17ce0 <cmd_gatt_read+0x184>)
   17c9a:	4628      	mov	r0, r5
   17c9c:	f7fd fcc4 	bl	15628 <btshell_read_mult>
   17ca0:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   17ca2:	9800      	ldr	r0, [sp, #0]
   17ca4:	2800      	cmp	r0, #0
   17ca6:	f43f af62 	beq.w	17b6e <cmd_gatt_read+0x12>
        console_printf("error reading characteristic; rc=%d\n", rc);
   17caa:	4601      	mov	r1, r0
   17cac:	4816      	ldr	r0, [pc, #88]	; (17d08 <cmd_gatt_read+0x1ac>)
   17cae:	f004 fa3d 	bl	1c12c <console_printf>
        return rc;
   17cb2:	9800      	ldr	r0, [sp, #0]
   17cb4:	e75b      	b.n	17b6e <cmd_gatt_read+0x12>
            rc = btshell_read_by_uuid(conn_handle, start, end, &uuid.u);
   17cb6:	ab01      	add	r3, sp, #4
   17cb8:	464a      	mov	r2, r9
   17cba:	4641      	mov	r1, r8
   17cbc:	4628      	mov	r0, r5
   17cbe:	f7fd fca7 	bl	15610 <btshell_read_by_uuid>
   17cc2:	9000      	str	r0, [sp, #0]
   17cc4:	e7ed      	b.n	17ca2 <cmd_gatt_read+0x146>
        rc = EINVAL;
   17cc6:	2316      	movs	r3, #22
   17cc8:	9300      	str	r3, [sp, #0]
   17cca:	e7ea      	b.n	17ca2 <cmd_gatt_read+0x146>
   17ccc:	000305d8 	.word	0x000305d8
   17cd0:	00031b10 	.word	0x00031b10
   17cd4:	000305e0 	.word	0x000305e0
   17cd8:	00033894 	.word	0x00033894
   17cdc:	00031b40 	.word	0x00031b40
   17ce0:	10003554 	.word	0x10003554
   17ce4:	00033878 	.word	0x00033878
   17ce8:	00031cfc 	.word	0x00031cfc
   17cec:	00031840 	.word	0x00031840
   17cf0:	00031848 	.word	0x00031848
   17cf4:	00031b6c 	.word	0x00031b6c
   17cf8:	000337a4 	.word	0x000337a4
   17cfc:	000338b0 	.word	0x000338b0
   17d00:	000338cc 	.word	0x000338cc
   17d04:	000338e8 	.word	0x000338e8
   17d08:	00033904 	.word	0x00033904

00017d0c <cmd_gatt_service_changed>:
 * $gatt-service-changed                                                     *
 *****************************************************************************/

int
cmd_gatt_service_changed(int argc, char **argv)
{
   17d0c:	b530      	push	{r4, r5, lr}
   17d0e:	b083      	sub	sp, #12
    uint16_t start;
    uint16_t end;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17d10:	3104      	adds	r1, #4
   17d12:	3801      	subs	r0, #1
   17d14:	f000 ff3e 	bl	18b94 <parse_arg_all>
   17d18:	4604      	mov	r4, r0
   17d1a:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   17d1c:	b110      	cbz	r0, 17d24 <cmd_gatt_service_changed+0x18>
    }

    ble_svc_gatt_changed(start, end);

    return 0;
}
   17d1e:	4620      	mov	r0, r4
   17d20:	b003      	add	sp, #12
   17d22:	bd30      	pop	{r4, r5, pc}
    start = parse_arg_uint16("start", &rc);
   17d24:	a901      	add	r1, sp, #4
   17d26:	480d      	ldr	r0, [pc, #52]	; (17d5c <cmd_gatt_service_changed+0x50>)
   17d28:	f000 fddd 	bl	188e6 <parse_arg_uint16>
   17d2c:	4605      	mov	r5, r0
    if (rc != 0) {
   17d2e:	9b01      	ldr	r3, [sp, #4]
   17d30:	b953      	cbnz	r3, 17d48 <cmd_gatt_service_changed+0x3c>
    end = parse_arg_uint16("end", &rc);
   17d32:	a901      	add	r1, sp, #4
   17d34:	480a      	ldr	r0, [pc, #40]	; (17d60 <cmd_gatt_service_changed+0x54>)
   17d36:	f000 fdd6 	bl	188e6 <parse_arg_uint16>
   17d3a:	4601      	mov	r1, r0
    if (rc != 0) {
   17d3c:	9c01      	ldr	r4, [sp, #4]
   17d3e:	b944      	cbnz	r4, 17d52 <cmd_gatt_service_changed+0x46>
    ble_svc_gatt_changed(start, end);
   17d40:	4628      	mov	r0, r5
   17d42:	f012 f9eb 	bl	2a11c <ble_svc_gatt_changed>
    return 0;
   17d46:	e7ea      	b.n	17d1e <cmd_gatt_service_changed+0x12>
        console_printf("invalid 'start' parameter\n");
   17d48:	4806      	ldr	r0, [pc, #24]	; (17d64 <cmd_gatt_service_changed+0x58>)
   17d4a:	f004 f9ef 	bl	1c12c <console_printf>
        return rc;
   17d4e:	9c01      	ldr	r4, [sp, #4]
   17d50:	e7e5      	b.n	17d1e <cmd_gatt_service_changed+0x12>
        console_printf("invalid 'end' parameter\n");
   17d52:	4805      	ldr	r0, [pc, #20]	; (17d68 <cmd_gatt_service_changed+0x5c>)
   17d54:	f004 f9ea 	bl	1c12c <console_printf>
        return rc;
   17d58:	9c01      	ldr	r4, [sp, #4]
   17d5a:	e7e0      	b.n	17d1e <cmd_gatt_service_changed+0x12>
   17d5c:	00031840 	.word	0x00031840
   17d60:	00031848 	.word	0x00031848
   17d64:	000338b0 	.word	0x000338b0
   17d68:	000338cc 	.word	0x000338cc

00017d6c <cmd_gatt_service_visibility>:
 * $gatt-service-visibility                                                  *
 *****************************************************************************/

int
cmd_gatt_service_visibility(int argc, char **argv)
{
   17d6c:	b530      	push	{r4, r5, lr}
   17d6e:	b083      	sub	sp, #12
    uint16_t handle;
    bool vis;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17d70:	3104      	adds	r1, #4
   17d72:	3801      	subs	r0, #1
   17d74:	f000 ff0e 	bl	18b94 <parse_arg_all>
   17d78:	4604      	mov	r4, r0
   17d7a:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   17d7c:	b110      	cbz	r0, 17d84 <cmd_gatt_service_visibility+0x18>
    }

    ble_gatts_svc_set_visibility(handle, vis);

    return 0;
}
   17d7e:	4620      	mov	r0, r4
   17d80:	b003      	add	sp, #12
   17d82:	bd30      	pop	{r4, r5, pc}
    handle = parse_arg_uint16("handle", &rc);
   17d84:	a901      	add	r1, sp, #4
   17d86:	480e      	ldr	r0, [pc, #56]	; (17dc0 <cmd_gatt_service_visibility+0x54>)
   17d88:	f000 fdad 	bl	188e6 <parse_arg_uint16>
   17d8c:	4605      	mov	r5, r0
    if (rc != 0) {
   17d8e:	9b01      	ldr	r3, [sp, #4]
   17d90:	b963      	cbnz	r3, 17dac <cmd_gatt_service_visibility+0x40>
    vis = parse_arg_bool("visibility", &rc);
   17d92:	a901      	add	r1, sp, #4
   17d94:	480b      	ldr	r0, [pc, #44]	; (17dc4 <cmd_gatt_service_visibility+0x58>)
   17d96:	f000 fd8a 	bl	188ae <parse_arg_bool>
   17d9a:	1e01      	subs	r1, r0, #0
   17d9c:	bf18      	it	ne
   17d9e:	2101      	movne	r1, #1
    if (rc != 0) {
   17da0:	9c01      	ldr	r4, [sp, #4]
   17da2:	b944      	cbnz	r4, 17db6 <cmd_gatt_service_visibility+0x4a>
    ble_gatts_svc_set_visibility(handle, vis);
   17da4:	4628      	mov	r0, r5
   17da6:	f00e f90f 	bl	25fc8 <ble_gatts_svc_set_visibility>
    return 0;
   17daa:	e7e8      	b.n	17d7e <cmd_gatt_service_visibility+0x12>
        console_printf("invalid 'handle' parameter\n");
   17dac:	4806      	ldr	r0, [pc, #24]	; (17dc8 <cmd_gatt_service_visibility+0x5c>)
   17dae:	f004 f9bd 	bl	1c12c <console_printf>
        return rc;
   17db2:	9c01      	ldr	r4, [sp, #4]
   17db4:	e7e3      	b.n	17d7e <cmd_gatt_service_visibility+0x12>
        console_printf("invalid 'visibility' parameter\n");
   17db6:	4805      	ldr	r0, [pc, #20]	; (17dcc <cmd_gatt_service_visibility+0x60>)
   17db8:	f004 f9b8 	bl	1c12c <console_printf>
        return rc;
   17dbc:	9c01      	ldr	r4, [sp, #4]
   17dbe:	e7de      	b.n	17d7e <cmd_gatt_service_visibility+0x12>
   17dc0:	00034d20 	.word	0x00034d20
   17dc4:	00031c1c 	.word	0x00031c1c
   17dc8:	0003392c 	.word	0x0003392c
   17dcc:	00033948 	.word	0x00033948

00017dd0 <cmd_gatt_find_included_services>:
 * $gatt-find-included-services                                              *
 *****************************************************************************/

int
cmd_gatt_find_included_services(int argc, char **argv)
{
   17dd0:	b510      	push	{r4, lr}
   17dd2:	b082      	sub	sp, #8
    uint16_t start_handle;
    uint16_t conn_handle;
    uint16_t end_handle;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17dd4:	3104      	adds	r1, #4
   17dd6:	3801      	subs	r0, #1
   17dd8:	f000 fedc 	bl	18b94 <parse_arg_all>
    if (rc != 0) {
   17ddc:	4604      	mov	r4, r0
   17dde:	b110      	cbz	r0, 17de6 <cmd_gatt_find_included_services+0x16>
        console_printf("error finding included services; rc=%d\n", rc);
        return rc;
    }

    return 0;
}
   17de0:	4620      	mov	r0, r4
   17de2:	b002      	add	sp, #8
   17de4:	bd10      	pop	{r4, pc}
    rc = cmd_parse_conn_start_end(&conn_handle, &start_handle, &end_handle);
   17de6:	f10d 0202 	add.w	r2, sp, #2
   17dea:	f10d 0106 	add.w	r1, sp, #6
   17dee:	a801      	add	r0, sp, #4
   17df0:	f7ff fd60 	bl	178b4 <cmd_parse_conn_start_end>
    if (rc != 0) {
   17df4:	4604      	mov	r4, r0
   17df6:	b978      	cbnz	r0, 17e18 <cmd_gatt_find_included_services+0x48>
    rc = btshell_find_inc_svcs(conn_handle, start_handle, end_handle);
   17df8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   17dfc:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   17e00:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   17e04:	f7fd fbc0 	bl	15588 <btshell_find_inc_svcs>
    if (rc != 0) {
   17e08:	4604      	mov	r4, r0
   17e0a:	2800      	cmp	r0, #0
   17e0c:	d0e8      	beq.n	17de0 <cmd_gatt_find_included_services+0x10>
        console_printf("error finding included services; rc=%d\n", rc);
   17e0e:	4601      	mov	r1, r0
   17e10:	4803      	ldr	r0, [pc, #12]	; (17e20 <cmd_gatt_find_included_services+0x50>)
   17e12:	f004 f98b 	bl	1c12c <console_printf>
        return rc;
   17e16:	e7e3      	b.n	17de0 <cmd_gatt_find_included_services+0x10>
        console_printf("invalid 'conn start end' parameter\n");
   17e18:	4802      	ldr	r0, [pc, #8]	; (17e24 <cmd_gatt_find_included_services+0x54>)
   17e1a:	f004 f987 	bl	1c12c <console_printf>
        return rc;
   17e1e:	e7df      	b.n	17de0 <cmd_gatt_find_included_services+0x10>
   17e20:	00033968 	.word	0x00033968
   17e24:	00033780 	.word	0x00033780

00017e28 <cmd_gatt_show>:
 * $gatt-show                                                                *
 *****************************************************************************/

int
cmd_gatt_show(int argc, char **argv)
{
   17e28:	b538      	push	{r3, r4, r5, lr}
    struct btshell_conn *conn;
    struct btshell_svc *svc;
    int i;

    for (i = 0; i < btshell_num_conns; i++) {
   17e2a:	2500      	movs	r5, #0
   17e2c:	e006      	b.n	17e3c <cmd_gatt_show+0x14>
        conn = btshell_conns + i;

        console_printf("CONNECTION: handle=%d\n", conn->handle);

        SLIST_FOREACH(svc, &conn->svcs, next) {
            print_svc(svc);
   17e2e:	4620      	mov	r0, r4
   17e30:	f7fd fe6e 	bl	15b10 <print_svc>
        SLIST_FOREACH(svc, &conn->svcs, next) {
   17e34:	6824      	ldr	r4, [r4, #0]
   17e36:	2c00      	cmp	r4, #0
   17e38:	d1f9      	bne.n	17e2e <cmd_gatt_show+0x6>
    for (i = 0; i < btshell_num_conns; i++) {
   17e3a:	3501      	adds	r5, #1
   17e3c:	4b08      	ldr	r3, [pc, #32]	; (17e60 <cmd_gatt_show+0x38>)
   17e3e:	681b      	ldr	r3, [r3, #0]
   17e40:	42ab      	cmp	r3, r5
   17e42:	dd0a      	ble.n	17e5a <cmd_gatt_show+0x32>
        conn = btshell_conns + i;
   17e44:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   17e48:	0093      	lsls	r3, r2, #2
   17e4a:	4a06      	ldr	r2, [pc, #24]	; (17e64 <cmd_gatt_show+0x3c>)
   17e4c:	189c      	adds	r4, r3, r2
        console_printf("CONNECTION: handle=%d\n", conn->handle);
   17e4e:	5ad1      	ldrh	r1, [r2, r3]
   17e50:	4805      	ldr	r0, [pc, #20]	; (17e68 <cmd_gatt_show+0x40>)
   17e52:	f004 f96b 	bl	1c12c <console_printf>
        SLIST_FOREACH(svc, &conn->svcs, next) {
   17e56:	6864      	ldr	r4, [r4, #4]
   17e58:	e7ed      	b.n	17e36 <cmd_gatt_show+0xe>
        }
    }

    return 0;
}
   17e5a:	2000      	movs	r0, #0
   17e5c:	bd38      	pop	{r3, r4, r5, pc}
   17e5e:	bf00      	nop
   17e60:	10002edc 	.word	0x10002edc
   17e64:	100033ac 	.word	0x100033ac
   17e68:	00033990 	.word	0x00033990

00017e6c <cmd_gatt_show_local>:

int
cmd_gatt_show_local(int argc, char **argv)
{
   17e6c:	b508      	push	{r3, lr}
    gatt_svr_print_svcs();
   17e6e:	f000 fb6c 	bl	1854a <gatt_svr_print_svcs>
    return 0;
}
   17e72:	2000      	movs	r0, #0
   17e74:	bd08      	pop	{r3, pc}
	...

00017e78 <cmd_gatt_write>:
 * $gatt-write                                                               *
 *****************************************************************************/

int
cmd_gatt_write(int argc, char **argv)
{
   17e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e7c:	b08d      	sub	sp, #52	; 0x34
   17e7e:	4604      	mov	r4, r0
   17e80:	460d      	mov	r5, r1
    struct ble_gatt_attr attrs[MYNEWT_VAL(BLE_GATT_WRITE_MAX_ATTRS)] = { { 0 } };
   17e82:	2220      	movs	r2, #32
   17e84:	2100      	movs	r1, #0
   17e86:	a804      	add	r0, sp, #16
   17e88:	f002 ff19 	bl	1acbe <memset>
    int is_long;
    int no_rsp;
    int rc;
    int i;

    rc = parse_arg_all(argc - 1, argv + 1);
   17e8c:	1d29      	adds	r1, r5, #4
   17e8e:	1e60      	subs	r0, r4, #1
   17e90:	f000 fe80 	bl	18b94 <parse_arg_all>
   17e94:	9002      	str	r0, [sp, #8]
    if (rc != 0) {
   17e96:	b110      	cbz	r0, 17e9e <cmd_gatt_write+0x26>
    if (rc != 0) {
        console_printf("error writing characteristic; rc=%d\n", rc);
    }

    return rc;
}
   17e98:	b00d      	add	sp, #52	; 0x34
   17e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    conn_handle = parse_arg_uint16("conn", &rc);
   17e9e:	a902      	add	r1, sp, #8
   17ea0:	4864      	ldr	r0, [pc, #400]	; (18034 <cmd_gatt_write+0x1bc>)
   17ea2:	f000 fd20 	bl	188e6 <parse_arg_uint16>
   17ea6:	4682      	mov	sl, r0
    if (rc != 0) {
   17ea8:	9b02      	ldr	r3, [sp, #8]
   17eaa:	b993      	cbnz	r3, 17ed2 <cmd_gatt_write+0x5a>
    no_rsp = parse_arg_bool_dflt("no_rsp", 0, &rc);
   17eac:	aa02      	add	r2, sp, #8
   17eae:	2100      	movs	r1, #0
   17eb0:	4861      	ldr	r0, [pc, #388]	; (18038 <cmd_gatt_write+0x1c0>)
   17eb2:	f000 fd04 	bl	188be <parse_arg_bool_dflt>
   17eb6:	4683      	mov	fp, r0
    if (rc != 0) {
   17eb8:	9b02      	ldr	r3, [sp, #8]
   17eba:	b97b      	cbnz	r3, 17edc <cmd_gatt_write+0x64>
    is_long = parse_arg_bool_dflt("long", 0, &rc);
   17ebc:	aa02      	add	r2, sp, #8
   17ebe:	2100      	movs	r1, #0
   17ec0:	485e      	ldr	r0, [pc, #376]	; (1803c <cmd_gatt_write+0x1c4>)
   17ec2:	f000 fcfc 	bl	188be <parse_arg_bool_dflt>
   17ec6:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   17ec8:	9c02      	ldr	r4, [sp, #8]
   17eca:	b964      	cbnz	r4, 17ee6 <cmd_gatt_write+0x6e>
    num_attrs = 0;
   17ecc:	46a0      	mov	r8, r4
    total_attr_len = 0;
   17ece:	4627      	mov	r7, r4
   17ed0:	e030      	b.n	17f34 <cmd_gatt_write+0xbc>
        console_printf("invalid 'conn' parameter\n");
   17ed2:	485b      	ldr	r0, [pc, #364]	; (18040 <cmd_gatt_write+0x1c8>)
   17ed4:	f004 f92a 	bl	1c12c <console_printf>
        return rc;
   17ed8:	9802      	ldr	r0, [sp, #8]
   17eda:	e7dd      	b.n	17e98 <cmd_gatt_write+0x20>
        console_printf("invalid 'no_rsp' parameter\n");
   17edc:	4859      	ldr	r0, [pc, #356]	; (18044 <cmd_gatt_write+0x1cc>)
   17ede:	f004 f925 	bl	1c12c <console_printf>
        return rc;
   17ee2:	9802      	ldr	r0, [sp, #8]
   17ee4:	e7d8      	b.n	17e98 <cmd_gatt_write+0x20>
        console_printf("invalid 'long' parameter\n");
   17ee6:	4858      	ldr	r0, [pc, #352]	; (18048 <cmd_gatt_write+0x1d0>)
   17ee8:	f004 f920 	bl	1c12c <console_printf>
        return rc;
   17eec:	9802      	ldr	r0, [sp, #8]
   17eee:	e7d3      	b.n	17e98 <cmd_gatt_write+0x20>
            rc = -rc;
   17ef0:	425b      	negs	r3, r3
   17ef2:	9302      	str	r3, [sp, #8]
            console_printf("invalid 'attr' parameter\n");
   17ef4:	4855      	ldr	r0, [pc, #340]	; (1804c <cmd_gatt_write+0x1d4>)
   17ef6:	f004 f919 	bl	1c12c <console_printf>
            goto done;
   17efa:	e091      	b.n	18020 <cmd_gatt_write+0x1a8>
            console_printf("invalid 'value' parameter\n");
   17efc:	4854      	ldr	r0, [pc, #336]	; (18050 <cmd_gatt_write+0x1d8>)
   17efe:	f004 f915 	bl	1c12c <console_printf>
            goto done;
   17f02:	e08d      	b.n	18020 <cmd_gatt_write+0x1a8>
            offset = 0;
   17f04:	2000      	movs	r0, #0
        if (num_attrs >= sizeof attrs / sizeof attrs[0]) {
   17f06:	f1b8 0f03 	cmp.w	r8, #3
   17f0a:	d839      	bhi.n	17f80 <cmd_gatt_write+0x108>
        attrs[num_attrs].handle = attr_handle;
   17f0c:	ab0c      	add	r3, sp, #48	; 0x30
   17f0e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
   17f12:	f829 6c20 	strh.w	r6, [r9, #-32]
        attrs[num_attrs].offset = offset;
   17f16:	f829 0c1e 	strh.w	r0, [r9, #-30]
        attrs[num_attrs].om = ble_hs_mbuf_from_flat(cmd_buf + total_attr_len,
   17f1a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   17f1e:	4628      	mov	r0, r5
   17f20:	f010 fb07 	bl	28532 <ble_hs_mbuf_from_flat>
   17f24:	f849 0c1c 	str.w	r0, [r9, #-28]
        if (attrs[num_attrs].om == NULL) {
   17f28:	2800      	cmp	r0, #0
   17f2a:	d079      	beq.n	18020 <cmd_gatt_write+0x1a8>
        total_attr_len += attr_len;
   17f2c:	9b03      	ldr	r3, [sp, #12]
   17f2e:	441f      	add	r7, r3
        num_attrs++;
   17f30:	f108 0801 	add.w	r8, r8, #1
        attr_handle = parse_arg_uint16("attr", &rc);
   17f34:	a902      	add	r1, sp, #8
   17f36:	4847      	ldr	r0, [pc, #284]	; (18054 <cmd_gatt_write+0x1dc>)
   17f38:	f000 fcd5 	bl	188e6 <parse_arg_uint16>
   17f3c:	4606      	mov	r6, r0
        if (rc == ENOENT) {
   17f3e:	9b02      	ldr	r3, [sp, #8]
   17f40:	2b02      	cmp	r3, #2
   17f42:	d021      	beq.n	17f88 <cmd_gatt_write+0x110>
        } else if (rc != 0) {
   17f44:	2b00      	cmp	r3, #0
   17f46:	d1d3      	bne.n	17ef0 <cmd_gatt_write+0x78>
        rc = parse_arg_byte_stream("value", sizeof cmd_buf - total_attr_len,
   17f48:	4d43      	ldr	r5, [pc, #268]	; (18058 <cmd_gatt_write+0x1e0>)
   17f4a:	443d      	add	r5, r7
   17f4c:	ab03      	add	r3, sp, #12
   17f4e:	462a      	mov	r2, r5
   17f50:	f5c7 7180 	rsb	r1, r7, #256	; 0x100
   17f54:	4841      	ldr	r0, [pc, #260]	; (1805c <cmd_gatt_write+0x1e4>)
   17f56:	f000 fd81 	bl	18a5c <parse_arg_byte_stream>
   17f5a:	9002      	str	r0, [sp, #8]
        if (rc == ENOENT) {
   17f5c:	2802      	cmp	r0, #2
   17f5e:	d013      	beq.n	17f88 <cmd_gatt_write+0x110>
        } else if (rc != 0) {
   17f60:	2800      	cmp	r0, #0
   17f62:	d1cb      	bne.n	17efc <cmd_gatt_write+0x84>
        offset = parse_arg_uint16("offset", &rc);
   17f64:	a902      	add	r1, sp, #8
   17f66:	483e      	ldr	r0, [pc, #248]	; (18060 <cmd_gatt_write+0x1e8>)
   17f68:	f000 fcbd 	bl	188e6 <parse_arg_uint16>
        if (rc == ENOENT) {
   17f6c:	9b02      	ldr	r3, [sp, #8]
   17f6e:	2b02      	cmp	r3, #2
   17f70:	d0c8      	beq.n	17f04 <cmd_gatt_write+0x8c>
        } else if (rc != 0) {
   17f72:	2b00      	cmp	r3, #0
   17f74:	d0c7      	beq.n	17f06 <cmd_gatt_write+0x8e>
            console_printf("invalid 'offset' parameter\n");
   17f76:	483b      	ldr	r0, [pc, #236]	; (18064 <cmd_gatt_write+0x1ec>)
   17f78:	f004 f8d8 	bl	1c12c <console_printf>
            return rc;
   17f7c:	9802      	ldr	r0, [sp, #8]
   17f7e:	e78b      	b.n	17e98 <cmd_gatt_write+0x20>
            rc = -EINVAL;
   17f80:	f06f 0315 	mvn.w	r3, #21
   17f84:	9302      	str	r3, [sp, #8]
            goto done;
   17f86:	e04b      	b.n	18020 <cmd_gatt_write+0x1a8>
    if (no_rsp) {
   17f88:	f1bb 0f00 	cmp.w	fp, #0
   17f8c:	d010      	beq.n	17fb0 <cmd_gatt_write+0x138>
        if (num_attrs != 1) {
   17f8e:	f1b8 0f01 	cmp.w	r8, #1
   17f92:	d003      	beq.n	17f9c <cmd_gatt_write+0x124>
            rc = -EINVAL;
   17f94:	f06f 0315 	mvn.w	r3, #21
   17f98:	9302      	str	r3, [sp, #8]
            goto done;
   17f9a:	e041      	b.n	18020 <cmd_gatt_write+0x1a8>
        rc = btshell_write_no_rsp(conn_handle, attrs[0].handle, attrs[0].om);
   17f9c:	9a05      	ldr	r2, [sp, #20]
   17f9e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   17fa2:	4650      	mov	r0, sl
   17fa4:	f7fd fb64 	bl	15670 <btshell_write_no_rsp>
   17fa8:	9002      	str	r0, [sp, #8]
        attrs[0].om = NULL;
   17faa:	2300      	movs	r3, #0
   17fac:	9305      	str	r3, [sp, #20]
   17fae:	e037      	b.n	18020 <cmd_gatt_write+0x1a8>
    } else if (is_long) {
   17fb0:	9b01      	ldr	r3, [sp, #4]
   17fb2:	b193      	cbz	r3, 17fda <cmd_gatt_write+0x162>
        if (num_attrs != 1) {
   17fb4:	f1b8 0f01 	cmp.w	r8, #1
   17fb8:	d003      	beq.n	17fc2 <cmd_gatt_write+0x14a>
            rc = -EINVAL;
   17fba:	f06f 0315 	mvn.w	r3, #21
   17fbe:	9302      	str	r3, [sp, #8]
            goto done;
   17fc0:	e02e      	b.n	18020 <cmd_gatt_write+0x1a8>
        rc = btshell_write_long(conn_handle, attrs[0].handle,
   17fc2:	9b05      	ldr	r3, [sp, #20]
   17fc4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   17fc8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   17fcc:	4650      	mov	r0, sl
   17fce:	f7fd fb53 	bl	15678 <btshell_write_long>
   17fd2:	9002      	str	r0, [sp, #8]
        attrs[0].om = NULL;
   17fd4:	2300      	movs	r3, #0
   17fd6:	9305      	str	r3, [sp, #20]
   17fd8:	e022      	b.n	18020 <cmd_gatt_write+0x1a8>
    } else if (num_attrs > 1) {
   17fda:	f1b8 0f01 	cmp.w	r8, #1
   17fde:	dc06      	bgt.n	17fee <cmd_gatt_write+0x176>
    } else if (num_attrs == 1) {
   17fe0:	f1b8 0f01 	cmp.w	r8, #1
   17fe4:	d00a      	beq.n	17ffc <cmd_gatt_write+0x184>
        rc = -EINVAL;
   17fe6:	f06f 0315 	mvn.w	r3, #21
   17fea:	9302      	str	r3, [sp, #8]
   17fec:	e018      	b.n	18020 <cmd_gatt_write+0x1a8>
        rc = btshell_write_reliable(conn_handle, attrs, num_attrs);
   17fee:	4642      	mov	r2, r8
   17ff0:	a904      	add	r1, sp, #16
   17ff2:	4650      	mov	r0, sl
   17ff4:	f7fd fb4c 	bl	15690 <btshell_write_reliable>
   17ff8:	9002      	str	r0, [sp, #8]
   17ffa:	e011      	b.n	18020 <cmd_gatt_write+0x1a8>
        rc = btshell_write(conn_handle, attrs[0].handle, attrs[0].om);
   17ffc:	9a05      	ldr	r2, [sp, #20]
   17ffe:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   18002:	4650      	mov	r0, sl
   18004:	f7fd fb1e 	bl	15644 <btshell_write>
   18008:	9002      	str	r0, [sp, #8]
        attrs[0].om = NULL;
   1800a:	2300      	movs	r3, #0
   1800c:	9305      	str	r3, [sp, #20]
   1800e:	e007      	b.n	18020 <cmd_gatt_write+0x1a8>
        os_mbuf_free_chain(attrs[i].om);
   18010:	ab0c      	add	r3, sp, #48	; 0x30
   18012:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   18016:	f853 0c1c 	ldr.w	r0, [r3, #-28]
   1801a:	f001 faf8 	bl	1960e <os_mbuf_free_chain>
    for (i = 0; i < sizeof attrs / sizeof attrs[0]; i++) {
   1801e:	3401      	adds	r4, #1
   18020:	2c03      	cmp	r4, #3
   18022:	d9f5      	bls.n	18010 <cmd_gatt_write+0x198>
    if (rc != 0) {
   18024:	9902      	ldr	r1, [sp, #8]
   18026:	b909      	cbnz	r1, 1802c <cmd_gatt_write+0x1b4>
    return rc;
   18028:	9802      	ldr	r0, [sp, #8]
   1802a:	e735      	b.n	17e98 <cmd_gatt_write+0x20>
        console_printf("error writing characteristic; rc=%d\n", rc);
   1802c:	480e      	ldr	r0, [pc, #56]	; (18068 <cmd_gatt_write+0x1f0>)
   1802e:	f004 f87d 	bl	1c12c <console_printf>
   18032:	e7f9      	b.n	18028 <cmd_gatt_write+0x1b0>
   18034:	000305d8 	.word	0x000305d8
   18038:	00031ad4 	.word	0x00031ad4
   1803c:	00031b10 	.word	0x00031b10
   18040:	000305e0 	.word	0x000305e0
   18044:	000339a8 	.word	0x000339a8
   18048:	00033894 	.word	0x00033894
   1804c:	00033878 	.word	0x00033878
   18050:	000339c4 	.word	0x000339c4
   18054:	00031b40 	.word	0x00031b40
   18058:	10003564 	.word	0x10003564
   1805c:	00031b74 	.word	0x00031b74
   18060:	00031b6c 	.word	0x00031b6c
   18064:	000338e8 	.word	0x000338e8
   18068:	000339e0 	.word	0x000339e0

0001806c <extract_uuid16_from_pts_uuid128>:
{
    const uint8_t *u8ptr;
    uint16_t uuid16;

    u8ptr = BLE_UUID128(uuid)->value;
    uuid16 = u8ptr[12];
   1806c:	7b43      	ldrb	r3, [r0, #13]
    uuid16 |= (uint16_t)u8ptr[13] << 8;
   1806e:	7b80      	ldrb	r0, [r0, #14]
    return uuid16;
}
   18070:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   18074:	4770      	bx	lr

00018076 <gatt_svr_chr_write>:
{
   18076:	b510      	push	{r4, lr}
   18078:	461c      	mov	r4, r3
    om_len = OS_MBUF_PKTLEN(om);
   1807a:	8a03      	ldrh	r3, [r0, #16]
    if (om_len < min_len || om_len > max_len) {
   1807c:	428b      	cmp	r3, r1
   1807e:	d307      	bcc.n	18090 <gatt_svr_chr_write+0x1a>
   18080:	4293      	cmp	r3, r2
   18082:	d807      	bhi.n	18094 <gatt_svr_chr_write+0x1e>
    rc = ble_hs_mbuf_to_flat(om, dst, max_len, len);
   18084:	9b02      	ldr	r3, [sp, #8]
   18086:	4621      	mov	r1, r4
   18088:	f010 fa67 	bl	2855a <ble_hs_mbuf_to_flat>
    if (rc != 0) {
   1808c:	b920      	cbnz	r0, 18098 <gatt_svr_chr_write+0x22>
}
   1808e:	bd10      	pop	{r4, pc}
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   18090:	200d      	movs	r0, #13
   18092:	e7fc      	b.n	1808e <gatt_svr_chr_write+0x18>
   18094:	200d      	movs	r0, #13
   18096:	e7fa      	b.n	1808e <gatt_svr_chr_write+0x18>
        return BLE_ATT_ERR_UNLIKELY;
   18098:	200e      	movs	r0, #14
   1809a:	e7f8      	b.n	1808e <gatt_svr_chr_write+0x18>

0001809c <gatt_svr_access_test>:

static int
gatt_svr_access_test(uint16_t conn_handle, uint16_t attr_handle,
                     struct ble_gatt_access_ctxt *ctxt,
                     void *arg)
{
   1809c:	b510      	push	{r4, lr}
   1809e:	b082      	sub	sp, #8
   180a0:	4614      	mov	r4, r2
    uint16_t uuid16;
    int rc;

    uuid16 = extract_uuid16_from_pts_uuid128(ctxt->chr->uuid);
   180a2:	6893      	ldr	r3, [r2, #8]
   180a4:	6818      	ldr	r0, [r3, #0]
   180a6:	f7ff ffe1 	bl	1806c <extract_uuid16_from_pts_uuid128>
    assert(uuid16 != 0);
   180aa:	b1a0      	cbz	r0, 180d6 <gatt_svr_access_test+0x3a>

    switch (uuid16) {
   180ac:	1e83      	subs	r3, r0, #2
   180ae:	2b1d      	cmp	r3, #29
   180b0:	f200 80b8 	bhi.w	18224 <gatt_svr_access_test+0x188>
   180b4:	e8df f003 	tbb	[pc, r3]
   180b8:	2e2e2e19 	.word	0x2e2e2e19
   180bc:	6b4d4d4d 	.word	0x6b4d4d4d
   180c0:	96969680 	.word	0x96969680
   180c4:	b6b6b6b6 	.word	0xb6b6b6b6
   180c8:	b6b6b6b6 	.word	0xb6b6b6b6
   180cc:	b6b6b6b6 	.word	0xb6b6b6b6
   180d0:	b6b6b6b6 	.word	0xb6b6b6b6
   180d4:	4db6      	.short	0x4db6
    assert(uuid16 != 0);
   180d6:	f7fc fb15 	bl	14704 <hal_debugger_connected>
   180da:	b100      	cbz	r0, 180de <gatt_svr_access_test+0x42>
   180dc:	be01      	bkpt	0x0001
   180de:	2300      	movs	r3, #0
   180e0:	461a      	mov	r2, r3
   180e2:	4619      	mov	r1, r3
   180e4:	4618      	mov	r0, r3
   180e6:	f000 fe1d 	bl	18d24 <__assert_func>
    case PTS_CHR_READ:
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   180ea:	7823      	ldrb	r3, [r4, #0]
   180ec:	b943      	cbnz	r3, 18100 <gatt_svr_access_test+0x64>
        rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_val,
   180ee:	2201      	movs	r2, #1
   180f0:	4951      	ldr	r1, [pc, #324]	; (18238 <gatt_svr_access_test+0x19c>)
   180f2:	6860      	ldr	r0, [r4, #4]
   180f4:	f001 fa9b 	bl	1962e <os_mbuf_append>
                            sizeof gatt_svr_pts_static_val);
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   180f8:	2800      	cmp	r0, #0
   180fa:	d067      	beq.n	181cc <gatt_svr_access_test+0x130>
   180fc:	2011      	movs	r0, #17
   180fe:	e065      	b.n	181cc <gatt_svr_access_test+0x130>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   18100:	f7fc fb00 	bl	14704 <hal_debugger_connected>
   18104:	b100      	cbz	r0, 18108 <gatt_svr_access_test+0x6c>
   18106:	be01      	bkpt	0x0001
   18108:	2300      	movs	r3, #0
   1810a:	461a      	mov	r2, r3
   1810c:	4619      	mov	r1, r3
   1810e:	4618      	mov	r0, r3
   18110:	f000 fe08 	bl	18d24 <__assert_func>

    case PTS_CHR_WRITE:
    case PTS_CHR_RELIABLE_WRITE:
    case PTS_CHR_WRITE_NO_RSP:
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   18114:	7823      	ldrb	r3, [r4, #0]
   18116:	2b01      	cmp	r3, #1
   18118:	d009      	beq.n	1812e <gatt_svr_access_test+0x92>
            rc = gatt_svr_chr_write(ctxt->om,0,
                                    sizeof gatt_svr_pts_static_val,
                                    &gatt_svr_pts_static_val, NULL);
            return rc;
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   1811a:	b983      	cbnz	r3, 1813e <gatt_svr_access_test+0xa2>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_val,
   1811c:	2201      	movs	r2, #1
   1811e:	4946      	ldr	r1, [pc, #280]	; (18238 <gatt_svr_access_test+0x19c>)
   18120:	6860      	ldr	r0, [r4, #4]
   18122:	f001 fa84 	bl	1962e <os_mbuf_append>
                                sizeof gatt_svr_pts_static_val);
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   18126:	2800      	cmp	r0, #0
   18128:	d050      	beq.n	181cc <gatt_svr_access_test+0x130>
   1812a:	2011      	movs	r0, #17
   1812c:	e04e      	b.n	181cc <gatt_svr_access_test+0x130>
            rc = gatt_svr_chr_write(ctxt->om,0,
   1812e:	2100      	movs	r1, #0
   18130:	9100      	str	r1, [sp, #0]
   18132:	4b41      	ldr	r3, [pc, #260]	; (18238 <gatt_svr_access_test+0x19c>)
   18134:	2201      	movs	r2, #1
   18136:	6860      	ldr	r0, [r4, #4]
   18138:	f7ff ff9d 	bl	18076 <gatt_svr_chr_write>
            return rc;
   1813c:	e046      	b.n	181cc <gatt_svr_access_test+0x130>
        }
        assert(0);
   1813e:	f7fc fae1 	bl	14704 <hal_debugger_connected>
   18142:	b100      	cbz	r0, 18146 <gatt_svr_access_test+0xaa>
   18144:	be01      	bkpt	0x0001
   18146:	2300      	movs	r3, #0
   18148:	461a      	mov	r2, r3
   1814a:	4619      	mov	r1, r3
   1814c:	4618      	mov	r0, r3
   1814e:	f000 fde9 	bl	18d24 <__assert_func>
        break;
    case PTS_CHR_READ_WRITE:
    case PTS_CHR_READ_WRITE_ENC:
    case PTS_CHR_READ_WRITE_AUTHEN:
    case PTS_CHR_READ_WRITE_ALT:
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   18152:	7823      	ldrb	r3, [r4, #0]
   18154:	2b01      	cmp	r3, #1
   18156:	d008      	beq.n	1816a <gatt_svr_access_test+0xce>
            rc = gatt_svr_chr_write(ctxt->om,0,
                                    sizeof gatt_svr_pts_static_val,
                                    &gatt_svr_pts_static_val, NULL);
            return rc;
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   18158:	b97b      	cbnz	r3, 1817a <gatt_svr_access_test+0xde>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_val,
   1815a:	2201      	movs	r2, #1
   1815c:	4936      	ldr	r1, [pc, #216]	; (18238 <gatt_svr_access_test+0x19c>)
   1815e:	6860      	ldr	r0, [r4, #4]
   18160:	f001 fa65 	bl	1962e <os_mbuf_append>
                                sizeof gatt_svr_pts_static_val);
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   18164:	b390      	cbz	r0, 181cc <gatt_svr_access_test+0x130>
   18166:	2011      	movs	r0, #17
   18168:	e030      	b.n	181cc <gatt_svr_access_test+0x130>
            rc = gatt_svr_chr_write(ctxt->om,0,
   1816a:	2100      	movs	r1, #0
   1816c:	9100      	str	r1, [sp, #0]
   1816e:	4b32      	ldr	r3, [pc, #200]	; (18238 <gatt_svr_access_test+0x19c>)
   18170:	2201      	movs	r2, #1
   18172:	6860      	ldr	r0, [r4, #4]
   18174:	f7ff ff7f 	bl	18076 <gatt_svr_chr_write>
            return rc;
   18178:	e028      	b.n	181cc <gatt_svr_access_test+0x130>
        }
        assert(0);
   1817a:	f7fc fac3 	bl	14704 <hal_debugger_connected>
   1817e:	b100      	cbz	r0, 18182 <gatt_svr_access_test+0xe6>
   18180:	be01      	bkpt	0x0001
   18182:	2300      	movs	r3, #0
   18184:	461a      	mov	r2, r3
   18186:	4619      	mov	r1, r3
   18188:	4618      	mov	r0, r3
   1818a:	f000 fdcb 	bl	18d24 <__assert_func>
        break;
    case PTS_DSC_READ:
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_DSC);
   1818e:	7823      	ldrb	r3, [r4, #0]
   18190:	2b02      	cmp	r3, #2
   18192:	d107      	bne.n	181a4 <gatt_svr_access_test+0x108>
        rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_val,
   18194:	2201      	movs	r2, #1
   18196:	4928      	ldr	r1, [pc, #160]	; (18238 <gatt_svr_access_test+0x19c>)
   18198:	6860      	ldr	r0, [r4, #4]
   1819a:	f001 fa48 	bl	1962e <os_mbuf_append>
                            sizeof gatt_svr_pts_static_val);
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   1819e:	b1a8      	cbz	r0, 181cc <gatt_svr_access_test+0x130>
   181a0:	2011      	movs	r0, #17
   181a2:	e013      	b.n	181cc <gatt_svr_access_test+0x130>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_DSC);
   181a4:	f7fc faae 	bl	14704 <hal_debugger_connected>
   181a8:	b100      	cbz	r0, 181ac <gatt_svr_access_test+0x110>
   181aa:	be01      	bkpt	0x0001
   181ac:	2300      	movs	r3, #0
   181ae:	461a      	mov	r2, r3
   181b0:	4619      	mov	r1, r3
   181b2:	4618      	mov	r0, r3
   181b4:	f000 fdb6 	bl	18d24 <__assert_func>

    case PTS_DSC_WRITE:
        assert(ctxt->op == BLE_GATT_ACCESS_OP_WRITE_DSC);
   181b8:	7823      	ldrb	r3, [r4, #0]
   181ba:	2b03      	cmp	r3, #3
   181bc:	d108      	bne.n	181d0 <gatt_svr_access_test+0x134>
        rc = gatt_svr_chr_write(ctxt->om,0,
   181be:	2100      	movs	r1, #0
   181c0:	9100      	str	r1, [sp, #0]
   181c2:	4b1d      	ldr	r3, [pc, #116]	; (18238 <gatt_svr_access_test+0x19c>)
   181c4:	2201      	movs	r2, #1
   181c6:	6860      	ldr	r0, [r4, #4]
   181c8:	f7ff ff55 	bl	18076 <gatt_svr_chr_write>
        assert(0);
        break;
    }

    return BLE_ATT_ERR_UNLIKELY;
}
   181cc:	b002      	add	sp, #8
   181ce:	bd10      	pop	{r4, pc}
        assert(ctxt->op == BLE_GATT_ACCESS_OP_WRITE_DSC);
   181d0:	f7fc fa98 	bl	14704 <hal_debugger_connected>
   181d4:	b100      	cbz	r0, 181d8 <gatt_svr_access_test+0x13c>
   181d6:	be01      	bkpt	0x0001
   181d8:	2300      	movs	r3, #0
   181da:	461a      	mov	r2, r3
   181dc:	4619      	mov	r1, r3
   181de:	4618      	mov	r0, r3
   181e0:	f000 fda0 	bl	18d24 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_DSC) {
   181e4:	7823      	ldrb	r3, [r4, #0]
   181e6:	2b03      	cmp	r3, #3
   181e8:	d00a      	beq.n	18200 <gatt_svr_access_test+0x164>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_DSC) {
   181ea:	2b02      	cmp	r3, #2
   181ec:	d110      	bne.n	18210 <gatt_svr_access_test+0x174>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_val,
   181ee:	2201      	movs	r2, #1
   181f0:	4911      	ldr	r1, [pc, #68]	; (18238 <gatt_svr_access_test+0x19c>)
   181f2:	6860      	ldr	r0, [r4, #4]
   181f4:	f001 fa1b 	bl	1962e <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   181f8:	2800      	cmp	r0, #0
   181fa:	d0e7      	beq.n	181cc <gatt_svr_access_test+0x130>
   181fc:	2011      	movs	r0, #17
   181fe:	e7e5      	b.n	181cc <gatt_svr_access_test+0x130>
            rc = gatt_svr_chr_write(ctxt->om,0,
   18200:	2100      	movs	r1, #0
   18202:	9100      	str	r1, [sp, #0]
   18204:	4b0c      	ldr	r3, [pc, #48]	; (18238 <gatt_svr_access_test+0x19c>)
   18206:	2201      	movs	r2, #1
   18208:	6860      	ldr	r0, [r4, #4]
   1820a:	f7ff ff34 	bl	18076 <gatt_svr_chr_write>
            return rc;
   1820e:	e7dd      	b.n	181cc <gatt_svr_access_test+0x130>
        assert(0);
   18210:	f7fc fa78 	bl	14704 <hal_debugger_connected>
   18214:	b100      	cbz	r0, 18218 <gatt_svr_access_test+0x17c>
   18216:	be01      	bkpt	0x0001
   18218:	2300      	movs	r3, #0
   1821a:	461a      	mov	r2, r3
   1821c:	4619      	mov	r1, r3
   1821e:	4618      	mov	r0, r3
   18220:	f000 fd80 	bl	18d24 <__assert_func>
        assert(0);
   18224:	f7fc fa6e 	bl	14704 <hal_debugger_connected>
   18228:	b100      	cbz	r0, 1822c <gatt_svr_access_test+0x190>
   1822a:	be01      	bkpt	0x0001
   1822c:	2300      	movs	r3, #0
   1822e:	461a      	mov	r2, r3
   18230:	4619      	mov	r1, r3
   18232:	4618      	mov	r0, r3
   18234:	f000 fd76 	bl	18d24 <__assert_func>
   18238:	100036a2 	.word	0x100036a2

0001823c <gatt_svr_long_access_test>:

static int
gatt_svr_long_access_test(uint16_t conn_handle, uint16_t attr_handle,
                          struct ble_gatt_access_ctxt *ctxt,
                          void *arg)
{
   1823c:	b510      	push	{r4, lr}
   1823e:	b082      	sub	sp, #8
   18240:	4614      	mov	r4, r2
    uint16_t uuid16;
    int rc;

    uuid16 = extract_uuid16_from_pts_uuid128(ctxt->chr->uuid);
   18242:	6893      	ldr	r3, [r2, #8]
   18244:	6818      	ldr	r0, [r3, #0]
   18246:	f7ff ff11 	bl	1806c <extract_uuid16_from_pts_uuid128>
    assert(uuid16 != 0);
   1824a:	b160      	cbz	r0, 18266 <gatt_svr_long_access_test+0x2a>

    switch (uuid16) {
   1824c:	f1a0 0312 	sub.w	r3, r0, #18
   18250:	2b0b      	cmp	r3, #11
   18252:	f200 80e5 	bhi.w	18420 <gatt_svr_long_access_test+0x1e4>
   18256:	e8df f003 	tbb	[pc, r3]
   1825a:	2410      	.short	0x2410
   1825c:	78593a24 	.word	0x78593a24
   18260:	c2ad9778 	.word	0xc2ad9778
   18264:	c2c2      	.short	0xc2c2
    assert(uuid16 != 0);
   18266:	f7fc fa4d 	bl	14704 <hal_debugger_connected>
   1826a:	b100      	cbz	r0, 1826e <gatt_svr_long_access_test+0x32>
   1826c:	be01      	bkpt	0x0001
   1826e:	2300      	movs	r3, #0
   18270:	461a      	mov	r2, r3
   18272:	4619      	mov	r1, r3
   18274:	4618      	mov	r0, r3
   18276:	f000 fd55 	bl	18d24 <__assert_func>
    case PTS_LONG_CHR_READ:
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   1827a:	7823      	ldrb	r3, [r4, #0]
   1827c:	b93b      	cbnz	r3, 1828e <gatt_svr_long_access_test+0x52>
        rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_long_val,
   1827e:	221e      	movs	r2, #30
   18280:	496c      	ldr	r1, [pc, #432]	; (18434 <gatt_svr_long_access_test+0x1f8>)
   18282:	6860      	ldr	r0, [r4, #4]
   18284:	f001 f9d3 	bl	1962e <os_mbuf_append>
                            sizeof gatt_svr_pts_static_long_val);
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   18288:	b1a8      	cbz	r0, 182b6 <gatt_svr_long_access_test+0x7a>
   1828a:	2011      	movs	r0, #17
   1828c:	e013      	b.n	182b6 <gatt_svr_long_access_test+0x7a>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   1828e:	f7fc fa39 	bl	14704 <hal_debugger_connected>
   18292:	b100      	cbz	r0, 18296 <gatt_svr_long_access_test+0x5a>
   18294:	be01      	bkpt	0x0001
   18296:	2300      	movs	r3, #0
   18298:	461a      	mov	r2, r3
   1829a:	4619      	mov	r1, r3
   1829c:	4618      	mov	r0, r3
   1829e:	f000 fd41 	bl	18d24 <__assert_func>

    case PTS_LONG_CHR_WRITE:
    case PTS_LONG_CHR_RELIABLE_WRITE:
        assert(ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR);
   182a2:	7823      	ldrb	r3, [r4, #0]
   182a4:	2b01      	cmp	r3, #1
   182a6:	d108      	bne.n	182ba <gatt_svr_long_access_test+0x7e>
        rc = gatt_svr_chr_write(ctxt->om,0,
   182a8:	2100      	movs	r1, #0
   182aa:	9100      	str	r1, [sp, #0]
   182ac:	4b61      	ldr	r3, [pc, #388]	; (18434 <gatt_svr_long_access_test+0x1f8>)
   182ae:	221e      	movs	r2, #30
   182b0:	6860      	ldr	r0, [r4, #4]
   182b2:	f7ff fee0 	bl	18076 <gatt_svr_chr_write>

    default:
        assert(0);
        return BLE_ATT_ERR_UNLIKELY;
    }
}
   182b6:	b002      	add	sp, #8
   182b8:	bd10      	pop	{r4, pc}
        assert(ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR);
   182ba:	f7fc fa23 	bl	14704 <hal_debugger_connected>
   182be:	b100      	cbz	r0, 182c2 <gatt_svr_long_access_test+0x86>
   182c0:	be01      	bkpt	0x0001
   182c2:	2300      	movs	r3, #0
   182c4:	461a      	mov	r2, r3
   182c6:	4619      	mov	r1, r3
   182c8:	4618      	mov	r0, r3
   182ca:	f000 fd2b 	bl	18d24 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   182ce:	7823      	ldrb	r3, [r4, #0]
   182d0:	2b01      	cmp	r3, #1
   182d2:	d009      	beq.n	182e8 <gatt_svr_long_access_test+0xac>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   182d4:	b983      	cbnz	r3, 182f8 <gatt_svr_long_access_test+0xbc>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_long_val,
   182d6:	221e      	movs	r2, #30
   182d8:	4956      	ldr	r1, [pc, #344]	; (18434 <gatt_svr_long_access_test+0x1f8>)
   182da:	6860      	ldr	r0, [r4, #4]
   182dc:	f001 f9a7 	bl	1962e <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   182e0:	2800      	cmp	r0, #0
   182e2:	d0e8      	beq.n	182b6 <gatt_svr_long_access_test+0x7a>
   182e4:	2011      	movs	r0, #17
   182e6:	e7e6      	b.n	182b6 <gatt_svr_long_access_test+0x7a>
            rc = gatt_svr_chr_write(ctxt->om,0,
   182e8:	2100      	movs	r1, #0
   182ea:	9100      	str	r1, [sp, #0]
   182ec:	4b51      	ldr	r3, [pc, #324]	; (18434 <gatt_svr_long_access_test+0x1f8>)
   182ee:	221e      	movs	r2, #30
   182f0:	6860      	ldr	r0, [r4, #4]
   182f2:	f7ff fec0 	bl	18076 <gatt_svr_chr_write>
            return rc;
   182f6:	e7de      	b.n	182b6 <gatt_svr_long_access_test+0x7a>
        assert(0);
   182f8:	f7fc fa04 	bl	14704 <hal_debugger_connected>
   182fc:	b100      	cbz	r0, 18300 <gatt_svr_long_access_test+0xc4>
   182fe:	be01      	bkpt	0x0001
   18300:	2300      	movs	r3, #0
   18302:	461a      	mov	r2, r3
   18304:	4619      	mov	r1, r3
   18306:	4618      	mov	r0, r3
   18308:	f000 fd0c 	bl	18d24 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   1830c:	7823      	ldrb	r3, [r4, #0]
   1830e:	2b01      	cmp	r3, #1
   18310:	d009      	beq.n	18326 <gatt_svr_long_access_test+0xea>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   18312:	b983      	cbnz	r3, 18336 <gatt_svr_long_access_test+0xfa>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_long_val_alt,
   18314:	221e      	movs	r2, #30
   18316:	4948      	ldr	r1, [pc, #288]	; (18438 <gatt_svr_long_access_test+0x1fc>)
   18318:	6860      	ldr	r0, [r4, #4]
   1831a:	f001 f988 	bl	1962e <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   1831e:	2800      	cmp	r0, #0
   18320:	d0c9      	beq.n	182b6 <gatt_svr_long_access_test+0x7a>
   18322:	2011      	movs	r0, #17
   18324:	e7c7      	b.n	182b6 <gatt_svr_long_access_test+0x7a>
            rc = gatt_svr_chr_write(ctxt->om,0,
   18326:	2100      	movs	r1, #0
   18328:	9100      	str	r1, [sp, #0]
   1832a:	4b43      	ldr	r3, [pc, #268]	; (18438 <gatt_svr_long_access_test+0x1fc>)
   1832c:	221e      	movs	r2, #30
   1832e:	6860      	ldr	r0, [r4, #4]
   18330:	f7ff fea1 	bl	18076 <gatt_svr_chr_write>
            return rc;
   18334:	e7bf      	b.n	182b6 <gatt_svr_long_access_test+0x7a>
        assert(0);
   18336:	f7fc f9e5 	bl	14704 <hal_debugger_connected>
   1833a:	b100      	cbz	r0, 1833e <gatt_svr_long_access_test+0x102>
   1833c:	be01      	bkpt	0x0001
   1833e:	2300      	movs	r3, #0
   18340:	461a      	mov	r2, r3
   18342:	4619      	mov	r1, r3
   18344:	4618      	mov	r0, r3
   18346:	f000 fced 	bl	18d24 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   1834a:	7823      	ldrb	r3, [r4, #0]
   1834c:	2b01      	cmp	r3, #1
   1834e:	d009      	beq.n	18364 <gatt_svr_long_access_test+0x128>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   18350:	b983      	cbnz	r3, 18374 <gatt_svr_long_access_test+0x138>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_long_val,
   18352:	221e      	movs	r2, #30
   18354:	4937      	ldr	r1, [pc, #220]	; (18434 <gatt_svr_long_access_test+0x1f8>)
   18356:	6860      	ldr	r0, [r4, #4]
   18358:	f001 f969 	bl	1962e <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   1835c:	2800      	cmp	r0, #0
   1835e:	d0aa      	beq.n	182b6 <gatt_svr_long_access_test+0x7a>
   18360:	2011      	movs	r0, #17
   18362:	e7a8      	b.n	182b6 <gatt_svr_long_access_test+0x7a>
            rc = gatt_svr_chr_write(ctxt->om,0,
   18364:	2100      	movs	r1, #0
   18366:	9100      	str	r1, [sp, #0]
   18368:	4b32      	ldr	r3, [pc, #200]	; (18434 <gatt_svr_long_access_test+0x1f8>)
   1836a:	221e      	movs	r2, #30
   1836c:	6860      	ldr	r0, [r4, #4]
   1836e:	f7ff fe82 	bl	18076 <gatt_svr_chr_write>
            return rc;
   18372:	e7a0      	b.n	182b6 <gatt_svr_long_access_test+0x7a>
        assert(0);
   18374:	f7fc f9c6 	bl	14704 <hal_debugger_connected>
   18378:	b100      	cbz	r0, 1837c <gatt_svr_long_access_test+0x140>
   1837a:	be01      	bkpt	0x0001
   1837c:	2300      	movs	r3, #0
   1837e:	461a      	mov	r2, r3
   18380:	4619      	mov	r1, r3
   18382:	4618      	mov	r0, r3
   18384:	f000 fcce 	bl	18d24 <__assert_func>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_DSC);
   18388:	7823      	ldrb	r3, [r4, #0]
   1838a:	2b02      	cmp	r3, #2
   1838c:	d108      	bne.n	183a0 <gatt_svr_long_access_test+0x164>
        rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_long_val,
   1838e:	221e      	movs	r2, #30
   18390:	4928      	ldr	r1, [pc, #160]	; (18434 <gatt_svr_long_access_test+0x1f8>)
   18392:	6860      	ldr	r0, [r4, #4]
   18394:	f001 f94b 	bl	1962e <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   18398:	2800      	cmp	r0, #0
   1839a:	d08c      	beq.n	182b6 <gatt_svr_long_access_test+0x7a>
   1839c:	2011      	movs	r0, #17
   1839e:	e78a      	b.n	182b6 <gatt_svr_long_access_test+0x7a>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_DSC);
   183a0:	f7fc f9b0 	bl	14704 <hal_debugger_connected>
   183a4:	b100      	cbz	r0, 183a8 <gatt_svr_long_access_test+0x16c>
   183a6:	be01      	bkpt	0x0001
   183a8:	2300      	movs	r3, #0
   183aa:	461a      	mov	r2, r3
   183ac:	4619      	mov	r1, r3
   183ae:	4618      	mov	r0, r3
   183b0:	f000 fcb8 	bl	18d24 <__assert_func>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_WRITE_DSC);
   183b4:	7823      	ldrb	r3, [r4, #0]
   183b6:	2b03      	cmp	r3, #3
   183b8:	d107      	bne.n	183ca <gatt_svr_long_access_test+0x18e>
        rc = gatt_svr_chr_write(ctxt->om,0,
   183ba:	2100      	movs	r1, #0
   183bc:	9100      	str	r1, [sp, #0]
   183be:	4b1d      	ldr	r3, [pc, #116]	; (18434 <gatt_svr_long_access_test+0x1f8>)
   183c0:	221e      	movs	r2, #30
   183c2:	6860      	ldr	r0, [r4, #4]
   183c4:	f7ff fe57 	bl	18076 <gatt_svr_chr_write>
        return rc;
   183c8:	e775      	b.n	182b6 <gatt_svr_long_access_test+0x7a>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_WRITE_DSC);
   183ca:	f7fc f99b 	bl	14704 <hal_debugger_connected>
   183ce:	b100      	cbz	r0, 183d2 <gatt_svr_long_access_test+0x196>
   183d0:	be01      	bkpt	0x0001
   183d2:	2300      	movs	r3, #0
   183d4:	461a      	mov	r2, r3
   183d6:	4619      	mov	r1, r3
   183d8:	4618      	mov	r0, r3
   183da:	f000 fca3 	bl	18d24 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_DSC) {
   183de:	7823      	ldrb	r3, [r4, #0]
   183e0:	2b03      	cmp	r3, #3
   183e2:	d00b      	beq.n	183fc <gatt_svr_long_access_test+0x1c0>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_DSC) {
   183e4:	2b02      	cmp	r3, #2
   183e6:	d111      	bne.n	1840c <gatt_svr_long_access_test+0x1d0>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_long_val,
   183e8:	221e      	movs	r2, #30
   183ea:	4912      	ldr	r1, [pc, #72]	; (18434 <gatt_svr_long_access_test+0x1f8>)
   183ec:	6860      	ldr	r0, [r4, #4]
   183ee:	f001 f91e 	bl	1962e <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   183f2:	2800      	cmp	r0, #0
   183f4:	f43f af5f 	beq.w	182b6 <gatt_svr_long_access_test+0x7a>
   183f8:	2011      	movs	r0, #17
   183fa:	e75c      	b.n	182b6 <gatt_svr_long_access_test+0x7a>
            rc = gatt_svr_chr_write(ctxt->om,0,
   183fc:	2100      	movs	r1, #0
   183fe:	9100      	str	r1, [sp, #0]
   18400:	4b0c      	ldr	r3, [pc, #48]	; (18434 <gatt_svr_long_access_test+0x1f8>)
   18402:	221e      	movs	r2, #30
   18404:	6860      	ldr	r0, [r4, #4]
   18406:	f7ff fe36 	bl	18076 <gatt_svr_chr_write>
            return rc;
   1840a:	e754      	b.n	182b6 <gatt_svr_long_access_test+0x7a>
        assert(0);
   1840c:	f7fc f97a 	bl	14704 <hal_debugger_connected>
   18410:	b100      	cbz	r0, 18414 <gatt_svr_long_access_test+0x1d8>
   18412:	be01      	bkpt	0x0001
   18414:	2300      	movs	r3, #0
   18416:	461a      	mov	r2, r3
   18418:	4619      	mov	r1, r3
   1841a:	4618      	mov	r0, r3
   1841c:	f000 fc82 	bl	18d24 <__assert_func>
        assert(0);
   18420:	f7fc f970 	bl	14704 <hal_debugger_connected>
   18424:	b100      	cbz	r0, 18428 <gatt_svr_long_access_test+0x1ec>
   18426:	be01      	bkpt	0x0001
   18428:	2300      	movs	r3, #0
   1842a:	461a      	mov	r2, r3
   1842c:	4619      	mov	r1, r3
   1842e:	4618      	mov	r0, r3
   18430:	f000 fc78 	bl	18d24 <__assert_func>
   18434:	10003664 	.word	0x10003664
   18438:	10003684 	.word	0x10003684

0001843c <gatt_svr_chr_access_sec_test>:
{
   1843c:	b530      	push	{r4, r5, lr}
   1843e:	b085      	sub	sp, #20
   18440:	4614      	mov	r4, r2
    uuid = ctxt->chr->uuid;
   18442:	6893      	ldr	r3, [r2, #8]
   18444:	681d      	ldr	r5, [r3, #0]
    if (ble_uuid_cmp(uuid, &gatt_svr_chr_sec_test_rand_uuid.u) == 0) {
   18446:	4929      	ldr	r1, [pc, #164]	; (184ec <gatt_svr_chr_access_sec_test+0xb0>)
   18448:	4628      	mov	r0, r5
   1844a:	f011 faa6 	bl	2999a <ble_uuid_cmp>
   1844e:	b9b8      	cbnz	r0, 18480 <gatt_svr_chr_access_sec_test+0x44>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   18450:	7823      	ldrb	r3, [r4, #0]
   18452:	b95b      	cbnz	r3, 1846c <gatt_svr_chr_access_sec_test+0x30>
}

#define RAND_MAX 0x7fffffff
__extern_inline int rand(void)
{
	return (int)lrand48();
   18454:	f002 fbe2 	bl	1ac1c <lrand48>
        rand_num = rand();
   18458:	9003      	str	r0, [sp, #12]
        rc = os_mbuf_append(ctxt->om, &rand_num, sizeof rand_num);
   1845a:	2204      	movs	r2, #4
   1845c:	a903      	add	r1, sp, #12
   1845e:	6860      	ldr	r0, [r4, #4]
   18460:	f001 f8e5 	bl	1962e <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   18464:	b100      	cbz	r0, 18468 <gatt_svr_chr_access_sec_test+0x2c>
   18466:	2011      	movs	r0, #17
}
   18468:	b005      	add	sp, #20
   1846a:	bd30      	pop	{r4, r5, pc}
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   1846c:	f7fc f94a 	bl	14704 <hal_debugger_connected>
   18470:	b100      	cbz	r0, 18474 <gatt_svr_chr_access_sec_test+0x38>
   18472:	be01      	bkpt	0x0001
   18474:	2300      	movs	r3, #0
   18476:	461a      	mov	r2, r3
   18478:	4619      	mov	r1, r3
   1847a:	4618      	mov	r0, r3
   1847c:	f000 fc52 	bl	18d24 <__assert_func>
    if (ble_uuid_cmp(uuid, &gatt_svr_chr_sec_test_static_uuid.u) == 0 ||
   18480:	491b      	ldr	r1, [pc, #108]	; (184f0 <gatt_svr_chr_access_sec_test+0xb4>)
   18482:	4628      	mov	r0, r5
   18484:	f011 fa89 	bl	2999a <ble_uuid_cmp>
   18488:	b960      	cbnz	r0, 184a4 <gatt_svr_chr_access_sec_test+0x68>
        switch (ctxt->op) {
   1848a:	7823      	ldrb	r3, [r4, #0]
   1848c:	b1d3      	cbz	r3, 184c4 <gatt_svr_chr_access_sec_test+0x88>
   1848e:	2b01      	cmp	r3, #1
   18490:	d121      	bne.n	184d6 <gatt_svr_chr_access_sec_test+0x9a>
            rc = gatt_svr_chr_write(ctxt->om,
   18492:	2300      	movs	r3, #0
   18494:	9300      	str	r3, [sp, #0]
   18496:	4b17      	ldr	r3, [pc, #92]	; (184f4 <gatt_svr_chr_access_sec_test+0xb8>)
   18498:	2201      	movs	r2, #1
   1849a:	4611      	mov	r1, r2
   1849c:	6860      	ldr	r0, [r4, #4]
   1849e:	f7ff fdea 	bl	18076 <gatt_svr_chr_write>
            return rc;
   184a2:	e7e1      	b.n	18468 <gatt_svr_chr_access_sec_test+0x2c>
        ble_uuid_cmp(uuid, &gatt_svr_chr_sec_test_static_auth_uuid.u) == 0) {
   184a4:	4914      	ldr	r1, [pc, #80]	; (184f8 <gatt_svr_chr_access_sec_test+0xbc>)
   184a6:	4628      	mov	r0, r5
   184a8:	f011 fa77 	bl	2999a <ble_uuid_cmp>
    if (ble_uuid_cmp(uuid, &gatt_svr_chr_sec_test_static_uuid.u) == 0 ||
   184ac:	2800      	cmp	r0, #0
   184ae:	d0ec      	beq.n	1848a <gatt_svr_chr_access_sec_test+0x4e>
    assert(0);
   184b0:	f7fc f928 	bl	14704 <hal_debugger_connected>
   184b4:	b100      	cbz	r0, 184b8 <gatt_svr_chr_access_sec_test+0x7c>
   184b6:	be01      	bkpt	0x0001
   184b8:	2300      	movs	r3, #0
   184ba:	461a      	mov	r2, r3
   184bc:	4619      	mov	r1, r3
   184be:	4618      	mov	r0, r3
   184c0:	f000 fc30 	bl	18d24 <__assert_func>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_sec_test_static_val,
   184c4:	2201      	movs	r2, #1
   184c6:	490b      	ldr	r1, [pc, #44]	; (184f4 <gatt_svr_chr_access_sec_test+0xb8>)
   184c8:	6860      	ldr	r0, [r4, #4]
   184ca:	f001 f8b0 	bl	1962e <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   184ce:	2800      	cmp	r0, #0
   184d0:	d0ca      	beq.n	18468 <gatt_svr_chr_access_sec_test+0x2c>
   184d2:	2011      	movs	r0, #17
   184d4:	e7c8      	b.n	18468 <gatt_svr_chr_access_sec_test+0x2c>
            assert(0);
   184d6:	f7fc f915 	bl	14704 <hal_debugger_connected>
   184da:	b100      	cbz	r0, 184de <gatt_svr_chr_access_sec_test+0xa2>
   184dc:	be01      	bkpt	0x0001
   184de:	2300      	movs	r3, #0
   184e0:	461a      	mov	r2, r3
   184e2:	4619      	mov	r1, r3
   184e4:	4618      	mov	r0, r3
   184e6:	f000 fc1d 	bl	18d24 <__assert_func>
   184ea:	bf00      	nop
   184ec:	00033a08 	.word	0x00033a08
   184f0:	00033a30 	.word	0x00033a30
   184f4:	100036a3 	.word	0x100036a3
   184f8:	00033a1c 	.word	0x00033a1c

000184fc <gatt_svr_register_cb>:

void
gatt_svr_register_cb(struct ble_gatt_register_ctxt *ctxt, void *arg)
{
   184fc:	b500      	push	{lr}
   184fe:	b08b      	sub	sp, #44	; 0x2c
    char buf[BLE_UUID_STR_LEN];

    switch (ctxt->op) {
   18500:	7803      	ldrb	r3, [r0, #0]
   18502:	2b02      	cmp	r3, #2
   18504:	d015      	beq.n	18532 <gatt_svr_register_cb+0x36>
   18506:	2b03      	cmp	r3, #3
   18508:	d019      	beq.n	1853e <gatt_svr_register_cb+0x42>
   1850a:	2b01      	cmp	r3, #1
   1850c:	d009      	beq.n	18522 <gatt_svr_register_cb+0x26>
                    ble_uuid_to_str(ctxt->dsc.dsc_def->uuid, buf),
                    ctxt->dsc.handle);
        break;

    default:
        assert(0);
   1850e:	f7fc f8f9 	bl	14704 <hal_debugger_connected>
   18512:	b100      	cbz	r0, 18516 <gatt_svr_register_cb+0x1a>
   18514:	be01      	bkpt	0x0001
   18516:	2300      	movs	r3, #0
   18518:	461a      	mov	r2, r3
   1851a:	4619      	mov	r1, r3
   1851c:	4618      	mov	r0, r3
   1851e:	f000 fc01 	bl	18d24 <__assert_func>
        MODLOG_DFLT(DEBUG, "registered service %s with handle=%d\n",
   18522:	6883      	ldr	r3, [r0, #8]
   18524:	4669      	mov	r1, sp
   18526:	6858      	ldr	r0, [r3, #4]
   18528:	f011 fa56 	bl	299d8 <ble_uuid_to_str>
        break;
    }
}
   1852c:	b00b      	add	sp, #44	; 0x2c
   1852e:	f85d fb04 	ldr.w	pc, [sp], #4
        MODLOG_DFLT(DEBUG, "registering characteristic %s with "
   18532:	6883      	ldr	r3, [r0, #8]
   18534:	4669      	mov	r1, sp
   18536:	6818      	ldr	r0, [r3, #0]
   18538:	f011 fa4e 	bl	299d8 <ble_uuid_to_str>
        break;
   1853c:	e7f6      	b.n	1852c <gatt_svr_register_cb+0x30>
        MODLOG_DFLT(DEBUG, "registering descriptor %s with handle=%d\n",
   1853e:	6883      	ldr	r3, [r0, #8]
   18540:	4669      	mov	r1, sp
   18542:	6818      	ldr	r0, [r3, #0]
   18544:	f011 fa48 	bl	299d8 <ble_uuid_to_str>
        break;
   18548:	e7f0      	b.n	1852c <gatt_svr_register_cb+0x30>

0001854a <gatt_svr_print_svcs>:

void
gatt_svr_print_svcs(void)
{
   1854a:	b508      	push	{r3, lr}
    ble_gatts_show_local();
   1854c:	f00d ff56 	bl	263fc <ble_gatts_show_local>
}
   18550:	bd08      	pop	{r3, pc}
	...

00018554 <gatt_svr_init>:

int
gatt_svr_init(void)
{
   18554:	b508      	push	{r3, lr}
    int rc;

    rc = ble_gatts_count_cfg(gatt_svr_svcs);
   18556:	480c      	ldr	r0, [pc, #48]	; (18588 <gatt_svr_init+0x34>)
   18558:	f00d fd56 	bl	26008 <ble_gatts_count_cfg>
    if (rc != 0) {
   1855c:	4603      	mov	r3, r0
   1855e:	b108      	cbz	r0, 18564 <gatt_svr_init+0x10>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   18560:	4618      	mov	r0, r3
   18562:	bd08      	pop	{r3, pc}
    rc = ble_gatts_add_svcs(gatt_svr_svcs);
   18564:	4808      	ldr	r0, [pc, #32]	; (18588 <gatt_svr_init+0x34>)
   18566:	f00d fd0b 	bl	25f80 <ble_gatts_add_svcs>
    if (rc != 0) {
   1856a:	4603      	mov	r3, r0
   1856c:	2800      	cmp	r0, #0
   1856e:	d1f7      	bne.n	18560 <gatt_svr_init+0xc>
    rc = ble_gatts_count_cfg(gatt_svr_inc_svcs);
   18570:	4806      	ldr	r0, [pc, #24]	; (1858c <gatt_svr_init+0x38>)
   18572:	f00d fd49 	bl	26008 <ble_gatts_count_cfg>
    if (rc != 0) {
   18576:	4603      	mov	r3, r0
   18578:	2800      	cmp	r0, #0
   1857a:	d1f1      	bne.n	18560 <gatt_svr_init+0xc>
    rc = ble_gatts_add_svcs(gatt_svr_inc_svcs);
   1857c:	4803      	ldr	r0, [pc, #12]	; (1858c <gatt_svr_init+0x38>)
   1857e:	f00d fcff 	bl	25f80 <ble_gatts_add_svcs>
   18582:	4603      	mov	r3, r0
    if (rc != 0) {
   18584:	e7ec      	b.n	18560 <gatt_svr_init+0xc>
   18586:	bf00      	nop
   18588:	00033a78 	.word	0x00033a78
   1858c:	00033a44 	.word	0x00033a44

00018590 <parse_arg_long_base>:
 * octal.
 */
static int
parse_arg_long_base(char *sval)
{
    if (sval[0] == '0' && sval[1] == 'x') {
   18590:	7803      	ldrb	r3, [r0, #0]
   18592:	2b30      	cmp	r3, #48	; 0x30
   18594:	d104      	bne.n	185a0 <parse_arg_long_base+0x10>
   18596:	7843      	ldrb	r3, [r0, #1]
   18598:	2b78      	cmp	r3, #120	; 0x78
   1859a:	d003      	beq.n	185a4 <parse_arg_long_base+0x14>
        return 0;
    } else {
        return 10;
   1859c:	200a      	movs	r0, #10
   1859e:	4770      	bx	lr
   185a0:	200a      	movs	r0, #10
   185a2:	4770      	bx	lr
        return 0;
   185a4:	2000      	movs	r0, #0
    }
}
   185a6:	4770      	bx	lr

000185a8 <parse_reverse_bytes>:
parse_reverse_bytes(uint8_t *bytes, int len)
{
    uint8_t tmp;
    int i;

    for (i = 0; i < len / 2; i++) {
   185a8:	2300      	movs	r3, #0
   185aa:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
   185ae:	ebb3 0f62 	cmp.w	r3, r2, asr #1
   185b2:	da0e      	bge.n	185d2 <parse_reverse_bytes+0x2a>
{
   185b4:	b430      	push	{r4, r5}
        tmp = bytes[i];
   185b6:	5cc4      	ldrb	r4, [r0, r3]
        bytes[i] = bytes[len - i - 1];
   185b8:	1aca      	subs	r2, r1, r3
   185ba:	3a01      	subs	r2, #1
   185bc:	5c85      	ldrb	r5, [r0, r2]
   185be:	54c5      	strb	r5, [r0, r3]
        bytes[len - i - 1] = tmp;
   185c0:	5484      	strb	r4, [r0, r2]
    for (i = 0; i < len / 2; i++) {
   185c2:	3301      	adds	r3, #1
   185c4:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
   185c8:	ebb3 0f62 	cmp.w	r3, r2, asr #1
   185cc:	dbf3      	blt.n	185b6 <parse_reverse_bytes+0xe>
    }
}
   185ce:	bc30      	pop	{r4, r5}
   185d0:	4770      	bx	lr
   185d2:	4770      	bx	lr

000185d4 <parse_time_unit_mult>:
{
   185d4:	b510      	push	{r4, lr}
   185d6:	4604      	mov	r4, r0
    if (!strcasecmp(str, "us")) {
   185d8:	490b      	ldr	r1, [pc, #44]	; (18608 <parse_time_unit_mult+0x34>)
   185da:	f002 fb8c 	bl	1acf6 <strcasecmp>
   185de:	b158      	cbz	r0, 185f8 <parse_time_unit_mult+0x24>
    } else if (!strcasecmp(str, "ms")) {
   185e0:	490a      	ldr	r1, [pc, #40]	; (1860c <parse_time_unit_mult+0x38>)
   185e2:	4620      	mov	r0, r4
   185e4:	f002 fb87 	bl	1acf6 <strcasecmp>
   185e8:	b140      	cbz	r0, 185fc <parse_time_unit_mult+0x28>
    } else if (!strcasecmp(str, "s")) {
   185ea:	4909      	ldr	r1, [pc, #36]	; (18610 <parse_time_unit_mult+0x3c>)
   185ec:	4620      	mov	r0, r4
   185ee:	f002 fb82 	bl	1acf6 <strcasecmp>
   185f2:	b130      	cbz	r0, 18602 <parse_time_unit_mult+0x2e>
    return 0;
   185f4:	2000      	movs	r0, #0
}
   185f6:	bd10      	pop	{r4, pc}
        return 1;
   185f8:	2001      	movs	r0, #1
   185fa:	e7fc      	b.n	185f6 <parse_time_unit_mult+0x22>
        return 1000;
   185fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   18600:	e7f9      	b.n	185f6 <parse_time_unit_mult+0x22>
        return 1000000;
   18602:	4804      	ldr	r0, [pc, #16]	; (18614 <parse_time_unit_mult+0x40>)
   18604:	e7f7      	b.n	185f6 <parse_time_unit_mult+0x22>
   18606:	bf00      	nop
   18608:	00033ab8 	.word	0x00033ab8
   1860c:	000318fc 	.word	0x000318fc
   18610:	00033e54 	.word	0x00033e54
   18614:	000f4240 	.word	0x000f4240

00018618 <parse_time_us>:
{
   18618:	b570      	push	{r4, r5, r6, lr}
   1861a:	460e      	mov	r6, r1
    uint32_t val = 0;
   1861c:	2400      	movs	r4, #0
    while (isdigit((unsigned char)*str)) {
   1861e:	7803      	ldrb	r3, [r0, #0]
   18620:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   18624:	2a09      	cmp	r2, #9
   18626:	d806      	bhi.n	18636 <parse_time_us+0x1e>
        val *= 10;
   18628:	eb04 0484 	add.w	r4, r4, r4, lsl #2
        val += *str - '0';
   1862c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
   18630:	3c30      	subs	r4, #48	; 0x30
        str++;
   18632:	3001      	adds	r0, #1
   18634:	e7f3      	b.n	1861e <parse_time_us+0x6>
    if (*str == '.') {
   18636:	2b2e      	cmp	r3, #46	; 0x2e
   18638:	d00e      	beq.n	18658 <parse_time_us+0x40>
    uint32_t val_div = 1;
   1863a:	2501      	movs	r5, #1
    val_mult = parse_time_unit_mult(str);
   1863c:	f7ff ffca 	bl	185d4 <parse_time_unit_mult>
    if (val_mult == 0) {
   18640:	4603      	mov	r3, r0
   18642:	b1d0      	cbz	r0, 1867a <parse_time_us+0x62>
    if (val_mult > val_div) {
   18644:	4285      	cmp	r5, r0
   18646:	d21b      	bcs.n	18680 <parse_time_us+0x68>
        val_us = val * (val_mult / val_div);
   18648:	fbb0 f3f5 	udiv	r3, r0, r5
   1864c:	fb04 f303 	mul.w	r3, r4, r3
    *out_status = 0;
   18650:	2200      	movs	r2, #0
   18652:	6032      	str	r2, [r6, #0]
}
   18654:	4618      	mov	r0, r3
   18656:	bd70      	pop	{r4, r5, r6, pc}
        str++;
   18658:	3001      	adds	r0, #1
    uint32_t val_div = 1;
   1865a:	2501      	movs	r5, #1
        while (isdigit((unsigned char)*str)) {
   1865c:	7803      	ldrb	r3, [r0, #0]
   1865e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   18662:	2a09      	cmp	r2, #9
   18664:	d8ea      	bhi.n	1863c <parse_time_us+0x24>
            val *= 10;
   18666:	eb04 0484 	add.w	r4, r4, r4, lsl #2
            val += *str - '0';
   1866a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
   1866e:	3c30      	subs	r4, #48	; 0x30
            val_div *= 10;
   18670:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   18674:	006d      	lsls	r5, r5, #1
            str++;
   18676:	3001      	adds	r0, #1
   18678:	e7f0      	b.n	1865c <parse_time_us+0x44>
        *out_status = EINVAL;
   1867a:	2216      	movs	r2, #22
   1867c:	6032      	str	r2, [r6, #0]
        return 0;
   1867e:	e7e9      	b.n	18654 <parse_time_us+0x3c>
        val_us = val * (val_div / val_mult);
   18680:	fbb5 f5f0 	udiv	r5, r5, r0
   18684:	fb04 f305 	mul.w	r3, r4, r5
   18688:	e7e2      	b.n	18650 <parse_time_us+0x38>

0001868a <parse_arg_byte_stream_delim>:
{
   1868a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1868e:	b082      	sub	sp, #8
   18690:	4605      	mov	r5, r0
   18692:	460f      	mov	r7, r1
   18694:	4614      	mov	r4, r2
   18696:	461e      	mov	r6, r3
    for (token = strtok_r(sval, delims, &tok_ptr);
   18698:	466a      	mov	r2, sp
   1869a:	f002 fb6e 	bl	1ad7a <strtok_r>
    i = 0;
   1869e:	f04f 0800 	mov.w	r8, #0
    for (token = strtok_r(sval, delims, &tok_ptr);
   186a2:	b1b0      	cbz	r0, 186d2 <parse_arg_byte_stream_delim+0x48>
        if (i >= max_len) {
   186a4:	45a0      	cmp	r8, r4
   186a6:	da1a      	bge.n	186de <parse_arg_byte_stream_delim+0x54>
        ul = strtoul(token, &endptr, 16);
   186a8:	2210      	movs	r2, #16
   186aa:	a901      	add	r1, sp, #4
   186ac:	f002 fb7b 	bl	1ada6 <strtoul>
        if (sval[0] == '\0' || *endptr != '\0' || ul > UINT8_MAX) {
   186b0:	782b      	ldrb	r3, [r5, #0]
   186b2:	b1b3      	cbz	r3, 186e2 <parse_arg_byte_stream_delim+0x58>
   186b4:	9b01      	ldr	r3, [sp, #4]
   186b6:	781b      	ldrb	r3, [r3, #0]
   186b8:	b9b3      	cbnz	r3, 186e8 <parse_arg_byte_stream_delim+0x5e>
   186ba:	28ff      	cmp	r0, #255	; 0xff
   186bc:	d817      	bhi.n	186ee <parse_arg_byte_stream_delim+0x64>
        dst[i] = ul;
   186be:	f806 0008 	strb.w	r0, [r6, r8]
        i++;
   186c2:	f108 0801 	add.w	r8, r8, #1
         token = strtok_r(NULL, delims, &tok_ptr)) {
   186c6:	466a      	mov	r2, sp
   186c8:	4639      	mov	r1, r7
   186ca:	2000      	movs	r0, #0
   186cc:	f002 fb55 	bl	1ad7a <strtok_r>
   186d0:	e7e7      	b.n	186a2 <parse_arg_byte_stream_delim+0x18>
    *out_len = i;
   186d2:	9b08      	ldr	r3, [sp, #32]
   186d4:	f8c3 8000 	str.w	r8, [r3]
}
   186d8:	b002      	add	sp, #8
   186da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return EINVAL;
   186de:	2016      	movs	r0, #22
   186e0:	e7fa      	b.n	186d8 <parse_arg_byte_stream_delim+0x4e>
            return -1;
   186e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   186e6:	e7f7      	b.n	186d8 <parse_arg_byte_stream_delim+0x4e>
   186e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   186ec:	e7f4      	b.n	186d8 <parse_arg_byte_stream_delim+0x4e>
   186ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   186f2:	e7f1      	b.n	186d8 <parse_arg_byte_stream_delim+0x4e>

000186f4 <parse_arg_find_idx>:
{
   186f4:	b538      	push	{r3, r4, r5, lr}
   186f6:	4605      	mov	r5, r0
    for (i = 0; i < cmd_num_args; i++) {
   186f8:	2400      	movs	r4, #0
   186fa:	4b08      	ldr	r3, [pc, #32]	; (1871c <parse_arg_find_idx+0x28>)
   186fc:	681b      	ldr	r3, [r3, #0]
   186fe:	42a3      	cmp	r3, r4
   18700:	dd08      	ble.n	18714 <parse_arg_find_idx+0x20>
        if (strcmp(cmd_args[i][0], key) == 0) {
   18702:	4629      	mov	r1, r5
   18704:	4b06      	ldr	r3, [pc, #24]	; (18720 <parse_arg_find_idx+0x2c>)
   18706:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   1870a:	f002 fb0e 	bl	1ad2a <strcmp>
   1870e:	b118      	cbz	r0, 18718 <parse_arg_find_idx+0x24>
    for (i = 0; i < cmd_num_args; i++) {
   18710:	3401      	adds	r4, #1
   18712:	e7f2      	b.n	186fa <parse_arg_find_idx+0x6>
    return -1;
   18714:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   18718:	4620      	mov	r0, r4
   1871a:	bd38      	pop	{r3, r4, r5, pc}
   1871c:	10003724 	.word	0x10003724
   18720:	100036a4 	.word	0x100036a4

00018724 <parse_arg_peek>:
{
   18724:	b538      	push	{r3, r4, r5, lr}
   18726:	4605      	mov	r5, r0
    for (i = 0; i < cmd_num_args; i++) {
   18728:	2400      	movs	r4, #0
   1872a:	4b0a      	ldr	r3, [pc, #40]	; (18754 <parse_arg_peek+0x30>)
   1872c:	681b      	ldr	r3, [r3, #0]
   1872e:	42a3      	cmp	r3, r4
   18730:	dd0d      	ble.n	1874e <parse_arg_peek+0x2a>
        if (strcmp(cmd_args[i][0], key) == 0) {
   18732:	4629      	mov	r1, r5
   18734:	4b08      	ldr	r3, [pc, #32]	; (18758 <parse_arg_peek+0x34>)
   18736:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   1873a:	f002 faf6 	bl	1ad2a <strcmp>
   1873e:	b108      	cbz	r0, 18744 <parse_arg_peek+0x20>
    for (i = 0; i < cmd_num_args; i++) {
   18740:	3401      	adds	r4, #1
   18742:	e7f2      	b.n	1872a <parse_arg_peek+0x6>
            return cmd_args[i][1];
   18744:	4b04      	ldr	r3, [pc, #16]	; (18758 <parse_arg_peek+0x34>)
   18746:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1874a:	6860      	ldr	r0, [r4, #4]
   1874c:	e000      	b.n	18750 <parse_arg_peek+0x2c>
    return NULL;
   1874e:	2000      	movs	r0, #0
}
   18750:	bd38      	pop	{r3, r4, r5, pc}
   18752:	bf00      	nop
   18754:	10003724 	.word	0x10003724
   18758:	100036a4 	.word	0x100036a4

0001875c <parse_arg_extract>:
{
   1875c:	b570      	push	{r4, r5, r6, lr}
   1875e:	4606      	mov	r6, r0
    for (i = 0; i < cmd_num_args; i++) {
   18760:	2400      	movs	r4, #0
   18762:	4b0b      	ldr	r3, [pc, #44]	; (18790 <parse_arg_extract+0x34>)
   18764:	681b      	ldr	r3, [r3, #0]
   18766:	42a3      	cmp	r3, r4
   18768:	dd10      	ble.n	1878c <parse_arg_extract+0x30>
        if (strcmp(cmd_args[i][0], key) == 0) {
   1876a:	4b0a      	ldr	r3, [pc, #40]	; (18794 <parse_arg_extract+0x38>)
   1876c:	f853 5034 	ldr.w	r5, [r3, r4, lsl #3]
   18770:	4631      	mov	r1, r6
   18772:	4628      	mov	r0, r5
   18774:	f002 fad9 	bl	1ad2a <strcmp>
   18778:	b108      	cbz	r0, 1877e <parse_arg_extract+0x22>
    for (i = 0; i < cmd_num_args; i++) {
   1877a:	3401      	adds	r4, #1
   1877c:	e7f1      	b.n	18762 <parse_arg_extract+0x6>
            cmd_args[i][0][0] = '\0';
   1877e:	2300      	movs	r3, #0
   18780:	702b      	strb	r3, [r5, #0]
            return cmd_args[i][1];
   18782:	4b04      	ldr	r3, [pc, #16]	; (18794 <parse_arg_extract+0x38>)
   18784:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   18788:	6860      	ldr	r0, [r4, #4]
   1878a:	e000      	b.n	1878e <parse_arg_extract+0x32>
    return NULL;
   1878c:	2000      	movs	r0, #0
}
   1878e:	bd70      	pop	{r4, r5, r6, pc}
   18790:	10003724 	.word	0x10003724
   18794:	100036a4 	.word	0x100036a4

00018798 <parse_long_bounds>:
{
   18798:	b5f0      	push	{r4, r5, r6, r7, lr}
   1879a:	b083      	sub	sp, #12
   1879c:	4604      	mov	r4, r0
   1879e:	460d      	mov	r5, r1
   187a0:	4616      	mov	r6, r2
   187a2:	461f      	mov	r7, r3
    lval = strtol(sval, &endptr, parse_arg_long_base(sval));
   187a4:	f7ff fef4 	bl	18590 <parse_arg_long_base>
   187a8:	4602      	mov	r2, r0
   187aa:	a901      	add	r1, sp, #4
   187ac:	4620      	mov	r0, r4
   187ae:	f002 faf4 	bl	1ad9a <strtol>
    if (sval[0] != '\0' && *endptr == '\0' &&
   187b2:	7824      	ldrb	r4, [r4, #0]
   187b4:	b134      	cbz	r4, 187c4 <parse_long_bounds+0x2c>
   187b6:	9b01      	ldr	r3, [sp, #4]
   187b8:	781b      	ldrb	r3, [r3, #0]
   187ba:	b91b      	cbnz	r3, 187c4 <parse_long_bounds+0x2c>
   187bc:	42a8      	cmp	r0, r5
   187be:	db01      	blt.n	187c4 <parse_long_bounds+0x2c>
        lval >= min && lval <= max) {
   187c0:	42b0      	cmp	r0, r6
   187c2:	dd04      	ble.n	187ce <parse_long_bounds+0x36>
    *out_status = EINVAL;
   187c4:	2316      	movs	r3, #22
   187c6:	603b      	str	r3, [r7, #0]
    return 0;
   187c8:	2000      	movs	r0, #0
}
   187ca:	b003      	add	sp, #12
   187cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *out_status = 0;
   187ce:	603b      	str	r3, [r7, #0]
        return lval;
   187d0:	e7fb      	b.n	187ca <parse_long_bounds+0x32>

000187d2 <parse_arg_long_bounds_peek>:
{
   187d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   187d4:	460d      	mov	r5, r1
   187d6:	4616      	mov	r6, r2
   187d8:	461c      	mov	r4, r3
    sval = parse_arg_peek(name);
   187da:	f7ff ffa3 	bl	18724 <parse_arg_peek>
    if (sval == NULL) {
   187de:	b128      	cbz	r0, 187ec <parse_arg_long_bounds_peek+0x1a>
    return parse_long_bounds(sval, min, max, out_status);
   187e0:	4623      	mov	r3, r4
   187e2:	4632      	mov	r2, r6
   187e4:	4629      	mov	r1, r5
   187e6:	f7ff ffd7 	bl	18798 <parse_long_bounds>
}
   187ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        *out_status = ENOENT;
   187ec:	2302      	movs	r3, #2
   187ee:	6023      	str	r3, [r4, #0]
        return 0;
   187f0:	e7fb      	b.n	187ea <parse_arg_long_bounds_peek+0x18>

000187f2 <parse_arg_long_bounds>:
{
   187f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   187f4:	460d      	mov	r5, r1
   187f6:	4616      	mov	r6, r2
   187f8:	461c      	mov	r4, r3
    sval = parse_arg_extract(name);
   187fa:	f7ff ffaf 	bl	1875c <parse_arg_extract>
    if (sval == NULL) {
   187fe:	b128      	cbz	r0, 1880c <parse_arg_long_bounds+0x1a>
    return parse_long_bounds(sval, min, max, out_status);
   18800:	4623      	mov	r3, r4
   18802:	4632      	mov	r2, r6
   18804:	4629      	mov	r1, r5
   18806:	f7ff ffc7 	bl	18798 <parse_long_bounds>
}
   1880a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        *out_status = ENOENT;
   1880c:	2302      	movs	r3, #2
   1880e:	6023      	str	r3, [r4, #0]
        return 0;
   18810:	e7fb      	b.n	1880a <parse_arg_long_bounds+0x18>

00018812 <parse_arg_long_bounds_dflt>:
{
   18812:	b510      	push	{r4, lr}
   18814:	b082      	sub	sp, #8
   18816:	461c      	mov	r4, r3
    val = parse_arg_long_bounds(name, min, max, &rc);
   18818:	ab01      	add	r3, sp, #4
   1881a:	f7ff ffea 	bl	187f2 <parse_arg_long_bounds>
    if (rc == ENOENT) {
   1881e:	9b01      	ldr	r3, [sp, #4]
   18820:	2b02      	cmp	r3, #2
   18822:	d004      	beq.n	1882e <parse_arg_long_bounds_dflt+0x1c>
    *out_status = rc;
   18824:	9a01      	ldr	r2, [sp, #4]
   18826:	9b04      	ldr	r3, [sp, #16]
   18828:	601a      	str	r2, [r3, #0]
}
   1882a:	b002      	add	sp, #8
   1882c:	bd10      	pop	{r4, pc}
        rc = 0;
   1882e:	2300      	movs	r3, #0
   18830:	9301      	str	r3, [sp, #4]
        val = dflt;
   18832:	4620      	mov	r0, r4
   18834:	e7f6      	b.n	18824 <parse_arg_long_bounds_dflt+0x12>

00018836 <parse_arg_uint64_bounds>:
{
   18836:	b570      	push	{r4, r5, r6, lr}
   18838:	b082      	sub	sp, #8
   1883a:	4614      	mov	r4, r2
   1883c:	461d      	mov	r5, r3
    sval = parse_arg_extract(name);
   1883e:	f7ff ff8d 	bl	1875c <parse_arg_extract>
    if (sval == NULL) {
   18842:	b308      	cbz	r0, 18888 <parse_arg_uint64_bounds+0x52>
   18844:	4606      	mov	r6, r0
    lval = strtoull(sval, &endptr, parse_arg_long_base(sval));
   18846:	f7ff fea3 	bl	18590 <parse_arg_long_base>
   1884a:	4602      	mov	r2, r0
   1884c:	a901      	add	r1, sp, #4
   1884e:	4630      	mov	r0, r6
   18850:	f002 faaf 	bl	1adb2 <strtoull>
   18854:	4602      	mov	r2, r0
   18856:	460b      	mov	r3, r1
   18858:	4610      	mov	r0, r2
   1885a:	4619      	mov	r1, r3
    if (sval[0] != '\0' && *endptr == '\0' &&
   1885c:	7833      	ldrb	r3, [r6, #0]
   1885e:	b163      	cbz	r3, 1887a <parse_arg_uint64_bounds+0x44>
   18860:	9b01      	ldr	r3, [sp, #4]
   18862:	781b      	ldrb	r3, [r3, #0]
   18864:	b94b      	cbnz	r3, 1887a <parse_arg_uint64_bounds+0x44>
   18866:	42a9      	cmp	r1, r5
   18868:	bf08      	it	eq
   1886a:	42a2      	cmpeq	r2, r4
   1886c:	d305      	bcc.n	1887a <parse_arg_uint64_bounds+0x44>
        lval >= min && lval <= max) {
   1886e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   18872:	428b      	cmp	r3, r1
   18874:	bf08      	it	eq
   18876:	4282      	cmpeq	r2, r0
   18878:	d20c      	bcs.n	18894 <parse_arg_uint64_bounds+0x5e>
    *out_status = EINVAL;
   1887a:	2316      	movs	r3, #22
   1887c:	9a08      	ldr	r2, [sp, #32]
   1887e:	6013      	str	r3, [r2, #0]
    return 0;
   18880:	2000      	movs	r0, #0
   18882:	2100      	movs	r1, #0
}
   18884:	b002      	add	sp, #8
   18886:	bd70      	pop	{r4, r5, r6, pc}
        *out_status = ENOENT;
   18888:	2302      	movs	r3, #2
   1888a:	9a08      	ldr	r2, [sp, #32]
   1888c:	6013      	str	r3, [r2, #0]
        return 0;
   1888e:	2000      	movs	r0, #0
   18890:	2100      	movs	r1, #0
   18892:	e7f7      	b.n	18884 <parse_arg_uint64_bounds+0x4e>
        *out_status = 0;
   18894:	2300      	movs	r3, #0
   18896:	9a08      	ldr	r2, [sp, #32]
   18898:	6013      	str	r3, [r2, #0]
        return lval;
   1889a:	e7f3      	b.n	18884 <parse_arg_uint64_bounds+0x4e>

0001889c <parse_arg_long>:
{
   1889c:	b508      	push	{r3, lr}
   1889e:	460b      	mov	r3, r1
    return parse_arg_long_bounds(name, LONG_MIN, LONG_MAX, out_status);
   188a0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   188a4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   188a8:	f7ff ffa3 	bl	187f2 <parse_arg_long_bounds>
}
   188ac:	bd08      	pop	{r3, pc}

000188ae <parse_arg_bool>:
{
   188ae:	b508      	push	{r3, lr}
   188b0:	460b      	mov	r3, r1
    return parse_arg_long_bounds(name, 0, 1, out_status);
   188b2:	2201      	movs	r2, #1
   188b4:	2100      	movs	r1, #0
   188b6:	f7ff ff9c 	bl	187f2 <parse_arg_long_bounds>
}
   188ba:	b2c0      	uxtb	r0, r0
   188bc:	bd08      	pop	{r3, pc}

000188be <parse_arg_bool_dflt>:
{
   188be:	b500      	push	{lr}
   188c0:	b083      	sub	sp, #12
   188c2:	460b      	mov	r3, r1
    return parse_arg_long_bounds_dflt(name, 0, 1, dflt, out_status);
   188c4:	9200      	str	r2, [sp, #0]
   188c6:	2201      	movs	r2, #1
   188c8:	2100      	movs	r1, #0
   188ca:	f7ff ffa2 	bl	18812 <parse_arg_long_bounds_dflt>
}
   188ce:	b2c0      	uxtb	r0, r0
   188d0:	b003      	add	sp, #12
   188d2:	f85d fb04 	ldr.w	pc, [sp], #4

000188d6 <parse_arg_uint8>:
{
   188d6:	b508      	push	{r3, lr}
   188d8:	460b      	mov	r3, r1
    return parse_arg_long_bounds(name, 0, UINT8_MAX, out_status);
   188da:	22ff      	movs	r2, #255	; 0xff
   188dc:	2100      	movs	r1, #0
   188de:	f7ff ff88 	bl	187f2 <parse_arg_long_bounds>
}
   188e2:	b2c0      	uxtb	r0, r0
   188e4:	bd08      	pop	{r3, pc}

000188e6 <parse_arg_uint16>:
{
   188e6:	b508      	push	{r3, lr}
   188e8:	460b      	mov	r3, r1
    return parse_arg_long_bounds(name, 0, UINT16_MAX, out_status);
   188ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
   188ee:	2100      	movs	r1, #0
   188f0:	f7ff ff7f 	bl	187f2 <parse_arg_long_bounds>
}
   188f4:	b280      	uxth	r0, r0
   188f6:	bd08      	pop	{r3, pc}

000188f8 <parse_arg_uint16_peek>:
{
   188f8:	b508      	push	{r3, lr}
   188fa:	460b      	mov	r3, r1
    return parse_arg_long_bounds_peek(name, 0, UINT16_MAX, out_status);
   188fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18900:	2100      	movs	r1, #0
   18902:	f7ff ff66 	bl	187d2 <parse_arg_long_bounds_peek>
}
   18906:	b280      	uxth	r0, r0
   18908:	bd08      	pop	{r3, pc}

0001890a <parse_arg_uint32>:
{
   1890a:	b500      	push	{lr}
   1890c:	b085      	sub	sp, #20
    return parse_arg_uint64_bounds(name, 0, UINT32_MAX, out_status);
   1890e:	9102      	str	r1, [sp, #8]
   18910:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18914:	2300      	movs	r3, #0
   18916:	e9cd 2300 	strd	r2, r3, [sp]
   1891a:	2200      	movs	r2, #0
   1891c:	2300      	movs	r3, #0
   1891e:	f7ff ff8a 	bl	18836 <parse_arg_uint64_bounds>
}
   18922:	b005      	add	sp, #20
   18924:	f85d fb04 	ldr.w	pc, [sp], #4

00018928 <parse_arg_uint64>:
{
   18928:	b500      	push	{lr}
   1892a:	b085      	sub	sp, #20
    return parse_arg_uint64_bounds(name, 0, UINT64_MAX, out_status);
   1892c:	9102      	str	r1, [sp, #8]
   1892e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18936:	e9cd 2300 	strd	r2, r3, [sp]
   1893a:	2200      	movs	r2, #0
   1893c:	2300      	movs	r3, #0
   1893e:	f7ff ff7a 	bl	18836 <parse_arg_uint64_bounds>
}
   18942:	b005      	add	sp, #20
   18944:	f85d fb04 	ldr.w	pc, [sp], #4

00018948 <parse_arg_uint8_dflt>:
{
   18948:	b530      	push	{r4, r5, lr}
   1894a:	b083      	sub	sp, #12
   1894c:	460d      	mov	r5, r1
   1894e:	4614      	mov	r4, r2
    val = parse_arg_uint8(name, &rc);
   18950:	a901      	add	r1, sp, #4
   18952:	f7ff ffc0 	bl	188d6 <parse_arg_uint8>
    if (rc == ENOENT) {
   18956:	9b01      	ldr	r3, [sp, #4]
   18958:	2b02      	cmp	r3, #2
   1895a:	d003      	beq.n	18964 <parse_arg_uint8_dflt+0x1c>
    *out_status = rc;
   1895c:	9b01      	ldr	r3, [sp, #4]
   1895e:	6023      	str	r3, [r4, #0]
}
   18960:	b003      	add	sp, #12
   18962:	bd30      	pop	{r4, r5, pc}
        rc = 0;
   18964:	2300      	movs	r3, #0
   18966:	9301      	str	r3, [sp, #4]
        val = dflt;
   18968:	4628      	mov	r0, r5
   1896a:	e7f7      	b.n	1895c <parse_arg_uint8_dflt+0x14>

0001896c <parse_arg_uint16_dflt>:
{
   1896c:	b530      	push	{r4, r5, lr}
   1896e:	b083      	sub	sp, #12
   18970:	460d      	mov	r5, r1
   18972:	4614      	mov	r4, r2
    val = parse_arg_uint16(name, &rc);
   18974:	a901      	add	r1, sp, #4
   18976:	f7ff ffb6 	bl	188e6 <parse_arg_uint16>
    if (rc == ENOENT) {
   1897a:	9b01      	ldr	r3, [sp, #4]
   1897c:	2b02      	cmp	r3, #2
   1897e:	d003      	beq.n	18988 <parse_arg_uint16_dflt+0x1c>
    *out_status = rc;
   18980:	9b01      	ldr	r3, [sp, #4]
   18982:	6023      	str	r3, [r4, #0]
}
   18984:	b003      	add	sp, #12
   18986:	bd30      	pop	{r4, r5, pc}
        rc = 0;
   18988:	2300      	movs	r3, #0
   1898a:	9301      	str	r3, [sp, #4]
        val = dflt;
   1898c:	4628      	mov	r0, r5
   1898e:	e7f7      	b.n	18980 <parse_arg_uint16_dflt+0x14>

00018990 <parse_arg_time_dflt>:
{
   18990:	b5f0      	push	{r4, r5, r6, r7, lr}
   18992:	b083      	sub	sp, #12
   18994:	4606      	mov	r6, r0
   18996:	460c      	mov	r4, r1
   18998:	4617      	mov	r7, r2
   1899a:	461d      	mov	r5, r3
    arg = parse_arg_peek(name);
   1899c:	f7ff fec2 	bl	18724 <parse_arg_peek>
    if (!arg) {
   189a0:	b180      	cbz	r0, 189c4 <parse_arg_time_dflt+0x34>
    val = parse_time_us(arg, &rc);
   189a2:	a901      	add	r1, sp, #4
   189a4:	f7ff fe38 	bl	18618 <parse_time_us>
    if (rc) {
   189a8:	9b01      	ldr	r3, [sp, #4]
   189aa:	b17b      	cbz	r3, 189cc <parse_arg_time_dflt+0x3c>
        val = parse_arg_uint32(name, &rc);
   189ac:	a901      	add	r1, sp, #4
   189ae:	4630      	mov	r0, r6
   189b0:	f7ff ffab 	bl	1890a <parse_arg_uint32>
   189b4:	4604      	mov	r4, r0
        if (rc == ENOENT) {
   189b6:	9b01      	ldr	r3, [sp, #4]
   189b8:	2b02      	cmp	r3, #2
   189ba:	d10c      	bne.n	189d6 <parse_arg_time_dflt+0x46>
            *out_status = 0;
   189bc:	2300      	movs	r3, #0
   189be:	602b      	str	r3, [r5, #0]
            return dflt;
   189c0:	463c      	mov	r4, r7
   189c2:	e00a      	b.n	189da <parse_arg_time_dflt+0x4a>
        *out_status = 0;
   189c4:	2300      	movs	r3, #0
   189c6:	602b      	str	r3, [r5, #0]
        return dflt;
   189c8:	463c      	mov	r4, r7
   189ca:	e006      	b.n	189da <parse_arg_time_dflt+0x4a>
        val /= step_us;
   189cc:	fbb0 f4f4 	udiv	r4, r0, r4
        parse_arg_extract(name);
   189d0:	4630      	mov	r0, r6
   189d2:	f7ff fec3 	bl	1875c <parse_arg_extract>
    *out_status = rc;
   189d6:	9b01      	ldr	r3, [sp, #4]
   189d8:	602b      	str	r3, [r5, #0]
}
   189da:	4620      	mov	r0, r4
   189dc:	b003      	add	sp, #12
   189de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000189e0 <parse_kv_find>:
{
   189e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   189e2:	4605      	mov	r5, r0
   189e4:	460e      	mov	r6, r1
    for (i = 0; kvs[i].key != NULL; i++) {
   189e6:	2400      	movs	r4, #0
   189e8:	eb05 07c4 	add.w	r7, r5, r4, lsl #3
   189ec:	f855 1034 	ldr.w	r1, [r5, r4, lsl #3]
   189f0:	b131      	cbz	r1, 18a00 <parse_kv_find+0x20>
        if (strcmp(name, kv->key) == 0) {
   189f2:	4630      	mov	r0, r6
   189f4:	f002 f999 	bl	1ad2a <strcmp>
   189f8:	b108      	cbz	r0, 189fe <parse_kv_find+0x1e>
    for (i = 0; kvs[i].key != NULL; i++) {
   189fa:	3401      	adds	r4, #1
   189fc:	e7f4      	b.n	189e8 <parse_kv_find+0x8>
            return kv;
   189fe:	4639      	mov	r1, r7
}
   18a00:	4608      	mov	r0, r1
   18a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018a04 <parse_arg_kv>:
{
   18a04:	b538      	push	{r3, r4, r5, lr}
   18a06:	460c      	mov	r4, r1
   18a08:	4615      	mov	r5, r2
    sval = parse_arg_extract(name);
   18a0a:	f7ff fea7 	bl	1875c <parse_arg_extract>
    if (sval == NULL) {
   18a0e:	b140      	cbz	r0, 18a22 <parse_arg_kv+0x1e>
   18a10:	4601      	mov	r1, r0
    kv = parse_kv_find(kvs, sval);
   18a12:	4620      	mov	r0, r4
   18a14:	f7ff ffe4 	bl	189e0 <parse_kv_find>
    if (kv == NULL) {
   18a18:	b140      	cbz	r0, 18a2c <parse_arg_kv+0x28>
    *out_status = 0;
   18a1a:	2200      	movs	r2, #0
   18a1c:	602a      	str	r2, [r5, #0]
    return kv->val;
   18a1e:	6840      	ldr	r0, [r0, #4]
}
   18a20:	bd38      	pop	{r3, r4, r5, pc}
        *out_status = ENOENT;
   18a22:	2302      	movs	r3, #2
   18a24:	602b      	str	r3, [r5, #0]
        return -1;
   18a26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18a2a:	e7f9      	b.n	18a20 <parse_arg_kv+0x1c>
        *out_status = EINVAL;
   18a2c:	2316      	movs	r3, #22
   18a2e:	602b      	str	r3, [r5, #0]
        return -1;
   18a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18a34:	e7f4      	b.n	18a20 <parse_arg_kv+0x1c>

00018a36 <parse_arg_kv_dflt>:
{
   18a36:	b530      	push	{r4, r5, lr}
   18a38:	b083      	sub	sp, #12
   18a3a:	4615      	mov	r5, r2
   18a3c:	461c      	mov	r4, r3
    val = parse_arg_kv(name, kvs, &rc);
   18a3e:	aa01      	add	r2, sp, #4
   18a40:	f7ff ffe0 	bl	18a04 <parse_arg_kv>
    if (rc == ENOENT) {
   18a44:	9b01      	ldr	r3, [sp, #4]
   18a46:	2b02      	cmp	r3, #2
   18a48:	d003      	beq.n	18a52 <parse_arg_kv_dflt+0x1c>
    *out_status = rc;
   18a4a:	9b01      	ldr	r3, [sp, #4]
   18a4c:	6023      	str	r3, [r4, #0]
}
   18a4e:	b003      	add	sp, #12
   18a50:	bd30      	pop	{r4, r5, pc}
        rc = 0;
   18a52:	2300      	movs	r3, #0
   18a54:	9301      	str	r3, [sp, #4]
        val = def_val;
   18a56:	4628      	mov	r0, r5
   18a58:	e7f7      	b.n	18a4a <parse_arg_kv_dflt+0x14>
	...

00018a5c <parse_arg_byte_stream>:
{
   18a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   18a5e:	b083      	sub	sp, #12
   18a60:	460c      	mov	r4, r1
   18a62:	4615      	mov	r5, r2
   18a64:	461e      	mov	r6, r3
    sval = parse_arg_extract(name);
   18a66:	f7ff fe79 	bl	1875c <parse_arg_extract>
    if (sval == NULL) {
   18a6a:	b138      	cbz	r0, 18a7c <parse_arg_byte_stream+0x20>
    return parse_arg_byte_stream_delim(sval, ":-", max_len, dst, out_len);
   18a6c:	9600      	str	r6, [sp, #0]
   18a6e:	462b      	mov	r3, r5
   18a70:	4622      	mov	r2, r4
   18a72:	4903      	ldr	r1, [pc, #12]	; (18a80 <parse_arg_byte_stream+0x24>)
   18a74:	f7ff fe09 	bl	1868a <parse_arg_byte_stream_delim>
}
   18a78:	b003      	add	sp, #12
   18a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ENOENT;
   18a7c:	2002      	movs	r0, #2
   18a7e:	e7fb      	b.n	18a78 <parse_arg_byte_stream+0x1c>
   18a80:	00033abc 	.word	0x00033abc

00018a84 <parse_arg_byte_stream_exact_length>:
{
   18a84:	b510      	push	{r4, lr}
   18a86:	b082      	sub	sp, #8
   18a88:	4614      	mov	r4, r2
    rc = parse_arg_byte_stream(name, len, dst, &actual_len);
   18a8a:	ab01      	add	r3, sp, #4
   18a8c:	460a      	mov	r2, r1
   18a8e:	4621      	mov	r1, r4
   18a90:	f7ff ffe4 	bl	18a5c <parse_arg_byte_stream>
    if (rc != 0) {
   18a94:	b910      	cbnz	r0, 18a9c <parse_arg_byte_stream_exact_length+0x18>
    if (actual_len != len) {
   18a96:	9b01      	ldr	r3, [sp, #4]
   18a98:	42a3      	cmp	r3, r4
   18a9a:	d101      	bne.n	18aa0 <parse_arg_byte_stream_exact_length+0x1c>
}
   18a9c:	b002      	add	sp, #8
   18a9e:	bd10      	pop	{r4, pc}
        return EINVAL;
   18aa0:	2016      	movs	r0, #22
   18aa2:	e7fb      	b.n	18a9c <parse_arg_byte_stream_exact_length+0x18>

00018aa4 <parse_arg_mac>:

int
parse_arg_mac(char *name, uint8_t *dst)
{
   18aa4:	b538      	push	{r3, r4, r5, lr}
   18aa6:	460c      	mov	r4, r1
    int rc;

    rc = parse_arg_byte_stream_exact_length(name, dst, 6);
   18aa8:	2206      	movs	r2, #6
   18aaa:	f7ff ffeb 	bl	18a84 <parse_arg_byte_stream_exact_length>
    if (rc != 0) {
   18aae:	4605      	mov	r5, r0
   18ab0:	b108      	cbz	r0, 18ab6 <parse_arg_mac+0x12>
    }

    parse_reverse_bytes(dst, 6);

    return 0;
}
   18ab2:	4628      	mov	r0, r5
   18ab4:	bd38      	pop	{r3, r4, r5, pc}
    parse_reverse_bytes(dst, 6);
   18ab6:	2106      	movs	r1, #6
   18ab8:	4620      	mov	r0, r4
   18aba:	f7ff fd75 	bl	185a8 <parse_reverse_bytes>
    return 0;
   18abe:	e7f8      	b.n	18ab2 <parse_arg_mac+0xe>

00018ac0 <parse_arg_addr>:

int
parse_arg_addr(char *name, ble_addr_t *addr)
{
   18ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18ac2:	4605      	mov	r5, r0
   18ac4:	460c      	mov	r4, r1
    size_t len;
    uint8_t addr_type;
    bool addr_type_found;
    int rc;

    arg = parse_arg_peek(name);
   18ac6:	f7ff fe2d 	bl	18724 <parse_arg_peek>
    if (!arg) {
   18aca:	b358      	cbz	r0, 18b24 <parse_arg_addr+0x64>
   18acc:	2700      	movs	r7, #0
   18ace:	4606      	mov	r6, r0
        return ENOENT;
    }

    len = strlen(arg);
   18ad0:	f002 f937 	bl	1ad42 <strlen>
    if (len < 2) {
   18ad4:	2801      	cmp	r0, #1
   18ad6:	d927      	bls.n	18b28 <parse_arg_addr+0x68>
        return EINVAL;
    }

    addr_type_found = false;
    if ((arg[len - 2] == ':') || (arg[len - 2] == '-')) {
   18ad8:	1e82      	subs	r2, r0, #2
   18ada:	5cb3      	ldrb	r3, [r6, r2]
   18adc:	2b3a      	cmp	r3, #58	; 0x3a
   18ade:	d00a      	beq.n	18af6 <parse_arg_addr+0x36>
   18ae0:	2b2d      	cmp	r3, #45	; 0x2d
   18ae2:	d008      	beq.n	18af6 <parse_arg_addr+0x36>
    addr_type_found = false;
   18ae4:	2600      	movs	r6, #0
        if (addr_type_found) {
            arg[len - 2] = '\0';
        }
}

    rc = parse_arg_mac(name, addr->val);
   18ae6:	1c61      	adds	r1, r4, #1
   18ae8:	4628      	mov	r0, r5
   18aea:	f7ff ffdb 	bl	18aa4 <parse_arg_mac>
    if (rc != 0) {
   18aee:	b908      	cbnz	r0, 18af4 <parse_arg_addr+0x34>
        return rc;
    }

    if (addr_type_found) {
   18af0:	b1e6      	cbz	r6, 18b2c <parse_arg_addr+0x6c>
        addr->type = addr_type;
   18af2:	7027      	strb	r7, [r4, #0]
    } else {
        rc = EAGAIN;
    }

    return rc;
}
   18af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (tolower(arg[len - 1]) == 'p') {
   18af6:	1833      	adds	r3, r6, r0
   18af8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   18afc:	4619      	mov	r1, r3
extern "C" {
#endif

__extern_inline int isupper(int __c)
{
	return __c >= 'A' && __c <= 'Z';
   18afe:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
	return islower(__c) ? (__c & ~32) : __c;
}

__extern_inline int tolower(int __c)
{
	return isupper(__c) ? (__c | 32) : __c;
   18b02:	2819      	cmp	r0, #25
   18b04:	d801      	bhi.n	18b0a <parse_arg_addr+0x4a>
   18b06:	f043 0120 	orr.w	r1, r3, #32
   18b0a:	2970      	cmp	r1, #112	; 0x70
   18b0c:	d005      	beq.n	18b1a <parse_arg_addr+0x5a>
        } else if (tolower(arg[len - 1]) == 'r') {
   18b0e:	2972      	cmp	r1, #114	; 0x72
   18b10:	d001      	beq.n	18b16 <parse_arg_addr+0x56>
    addr_type_found = false;
   18b12:	2600      	movs	r6, #0
   18b14:	e7e7      	b.n	18ae6 <parse_arg_addr+0x26>
            addr_type = BLE_ADDR_RANDOM;
   18b16:	2701      	movs	r7, #1
   18b18:	e000      	b.n	18b1c <parse_arg_addr+0x5c>
            addr_type = BLE_ADDR_PUBLIC;
   18b1a:	2700      	movs	r7, #0
            arg[len - 2] = '\0';
   18b1c:	2300      	movs	r3, #0
   18b1e:	54b3      	strb	r3, [r6, r2]
   18b20:	2601      	movs	r6, #1
   18b22:	e7e0      	b.n	18ae6 <parse_arg_addr+0x26>
        return ENOENT;
   18b24:	2002      	movs	r0, #2
   18b26:	e7e5      	b.n	18af4 <parse_arg_addr+0x34>
        return EINVAL;
   18b28:	2016      	movs	r0, #22
   18b2a:	e7e3      	b.n	18af4 <parse_arg_addr+0x34>
        rc = EAGAIN;
   18b2c:	200b      	movs	r0, #11
   18b2e:	e7e1      	b.n	18af4 <parse_arg_addr+0x34>

00018b30 <parse_arg_uuid>:

int
parse_arg_uuid(char *str, ble_uuid_any_t *uuid)
{
   18b30:	b570      	push	{r4, r5, r6, lr}
   18b32:	b086      	sub	sp, #24
   18b34:	4605      	mov	r5, r0
   18b36:	460e      	mov	r6, r1
    uint16_t uuid16;
    uint8_t val[16];
    int len;
    int rc;

    uuid16 = parse_arg_uint16_peek(str, &rc);
   18b38:	a901      	add	r1, sp, #4
   18b3a:	f7ff fedd 	bl	188f8 <parse_arg_uint16_peek>
    switch (rc) {
   18b3e:	9c01      	ldr	r4, [sp, #4]
   18b40:	b12c      	cbz	r4, 18b4e <parse_arg_uuid+0x1e>
   18b42:	2c02      	cmp	r4, #2
   18b44:	d115      	bne.n	18b72 <parse_arg_uuid+0x42>
    case ENOENT:
        parse_arg_extract(str);
   18b46:	4628      	mov	r0, r5
   18b48:	f7ff fe08 	bl	1875c <parse_arg_extract>
        return ENOENT;
   18b4c:	e00e      	b.n	18b6c <parse_arg_uuid+0x3c>

    case 0:
        len = 2;
        val[0] = uuid16;
   18b4e:	f88d 0008 	strb.w	r0, [sp, #8]
        val[1] = uuid16 >> 8;
   18b52:	0a03      	lsrs	r3, r0, #8
   18b54:	f88d 3009 	strb.w	r3, [sp, #9]
        parse_arg_extract(str);
   18b58:	4628      	mov	r0, r5
   18b5a:	f7ff fdff 	bl	1875c <parse_arg_extract>
        len = 2;
   18b5e:	2202      	movs	r2, #2
        }
        parse_reverse_bytes(val, 16);
        break;
    }

    rc = ble_uuid_init_from_buf(uuid, val, len);
   18b60:	a902      	add	r1, sp, #8
   18b62:	4630      	mov	r0, r6
   18b64:	f010 fef1 	bl	2994a <ble_uuid_init_from_buf>
    if (rc != 0) {
   18b68:	4604      	mov	r4, r0
   18b6a:	b978      	cbnz	r0, 18b8c <parse_arg_uuid+0x5c>
        return EINVAL;
    } else {
        return 0;
    }
}
   18b6c:	4620      	mov	r0, r4
   18b6e:	b006      	add	sp, #24
   18b70:	bd70      	pop	{r4, r5, r6, pc}
        rc = parse_arg_byte_stream_exact_length(str, val, 16);
   18b72:	2210      	movs	r2, #16
   18b74:	a902      	add	r1, sp, #8
   18b76:	4628      	mov	r0, r5
   18b78:	f7ff ff84 	bl	18a84 <parse_arg_byte_stream_exact_length>
   18b7c:	9001      	str	r0, [sp, #4]
        if (rc != 0) {
   18b7e:	b938      	cbnz	r0, 18b90 <parse_arg_uuid+0x60>
        parse_reverse_bytes(val, 16);
   18b80:	2110      	movs	r1, #16
   18b82:	a802      	add	r0, sp, #8
   18b84:	f7ff fd10 	bl	185a8 <parse_reverse_bytes>
        len = 16;
   18b88:	2210      	movs	r2, #16
        break;
   18b8a:	e7e9      	b.n	18b60 <parse_arg_uuid+0x30>
        return EINVAL;
   18b8c:	2416      	movs	r4, #22
   18b8e:	e7ed      	b.n	18b6c <parse_arg_uuid+0x3c>
            return EINVAL;
   18b90:	2416      	movs	r4, #22
   18b92:	e7eb      	b.n	18b6c <parse_arg_uuid+0x3c>

00018b94 <parse_arg_all>:

int
parse_arg_all(int argc, char **argv)
{
   18b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18b98:	b083      	sub	sp, #12
   18b9a:	4607      	mov	r7, r0
   18b9c:	460e      	mov	r6, r1
    char *key;
    char *val;
    int i;
    char *tok_ptr;

    cmd_num_args = 0;
   18b9e:	2400      	movs	r4, #0
   18ba0:	4b1d      	ldr	r3, [pc, #116]	; (18c18 <parse_arg_all+0x84>)
   18ba2:	601c      	str	r4, [r3, #0]

    for (i = 0; i < argc; i++) {
   18ba4:	e011      	b.n	18bca <parse_arg_all+0x36>
        key = strtok_r(argv[i], "=", &tok_ptr);
        val = strtok_r(NULL, "=", &tok_ptr);

        if (key != NULL && val != NULL) {
            if (strlen(key) == 0) {
                console_printf("Error: invalid argument: %s\n", argv[i]);
   18ba6:	f8d9 1000 	ldr.w	r1, [r9]
   18baa:	481c      	ldr	r0, [pc, #112]	; (18c1c <parse_arg_all+0x88>)
   18bac:	f003 fabe 	bl	1c12c <console_printf>
                return -1;
   18bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18bb4:	e02d      	b.n	18c12 <parse_arg_all+0x7e>
            if (cmd_num_args >= CMD_MAX_ARGS) {
                console_printf("Error: too many arguments");
                return -1;
            }

            cmd_args[cmd_num_args][0] = key;
   18bb6:	4a1a      	ldr	r2, [pc, #104]	; (18c20 <parse_arg_all+0x8c>)
   18bb8:	f842 5033 	str.w	r5, [r2, r3, lsl #3]
            cmd_args[cmd_num_args][1] = val;
   18bbc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   18bc0:	6050      	str	r0, [r2, #4]
            cmd_num_args++;
   18bc2:	3301      	adds	r3, #1
   18bc4:	4a14      	ldr	r2, [pc, #80]	; (18c18 <parse_arg_all+0x84>)
   18bc6:	6013      	str	r3, [r2, #0]
    for (i = 0; i < argc; i++) {
   18bc8:	3401      	adds	r4, #1
   18bca:	42bc      	cmp	r4, r7
   18bcc:	da20      	bge.n	18c10 <parse_arg_all+0x7c>
        key = strtok_r(argv[i], "=", &tok_ptr);
   18bce:	eb06 0984 	add.w	r9, r6, r4, lsl #2
   18bd2:	f8df 8054 	ldr.w	r8, [pc, #84]	; 18c28 <parse_arg_all+0x94>
   18bd6:	aa01      	add	r2, sp, #4
   18bd8:	4641      	mov	r1, r8
   18bda:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   18bde:	f002 f8cc 	bl	1ad7a <strtok_r>
   18be2:	4605      	mov	r5, r0
        val = strtok_r(NULL, "=", &tok_ptr);
   18be4:	aa01      	add	r2, sp, #4
   18be6:	4641      	mov	r1, r8
   18be8:	2000      	movs	r0, #0
   18bea:	f002 f8c6 	bl	1ad7a <strtok_r>
        if (key != NULL && val != NULL) {
   18bee:	2d00      	cmp	r5, #0
   18bf0:	d0ea      	beq.n	18bc8 <parse_arg_all+0x34>
   18bf2:	2800      	cmp	r0, #0
   18bf4:	d0e8      	beq.n	18bc8 <parse_arg_all+0x34>
            if (strlen(key) == 0) {
   18bf6:	782b      	ldrb	r3, [r5, #0]
   18bf8:	2b00      	cmp	r3, #0
   18bfa:	d0d4      	beq.n	18ba6 <parse_arg_all+0x12>
            if (cmd_num_args >= CMD_MAX_ARGS) {
   18bfc:	4b06      	ldr	r3, [pc, #24]	; (18c18 <parse_arg_all+0x84>)
   18bfe:	681b      	ldr	r3, [r3, #0]
   18c00:	2b0f      	cmp	r3, #15
   18c02:	ddd8      	ble.n	18bb6 <parse_arg_all+0x22>
                console_printf("Error: too many arguments");
   18c04:	4807      	ldr	r0, [pc, #28]	; (18c24 <parse_arg_all+0x90>)
   18c06:	f003 fa91 	bl	1c12c <console_printf>
                return -1;
   18c0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18c0e:	e000      	b.n	18c12 <parse_arg_all+0x7e>
        }
    }

    return 0;
   18c10:	2000      	movs	r0, #0
}
   18c12:	b003      	add	sp, #12
   18c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18c18:	10003724 	.word	0x10003724
   18c1c:	00033ac0 	.word	0x00033ac0
   18c20:	100036a4 	.word	0x100036a4
   18c24:	00033ae0 	.word	0x00033ae0
   18c28:	0002fe14 	.word	0x0002fe14

00018c2c <parse_eddystone_url>:

int
parse_eddystone_url(char *full_url, uint8_t *out_scheme, char *out_body,
                    uint8_t *out_body_len, uint8_t *out_suffix)
{
   18c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c30:	b085      	sub	sp, #20
   18c32:	4680      	mov	r8, r0
   18c34:	468b      	mov	fp, r1
   18c36:	9202      	str	r2, [sp, #8]
   18c38:	9301      	str	r3, [sp, #4]
    int suffix_len;
    int suffix_idx;
    int rc;
    int i;

    full_url_len = strlen(full_url);
   18c3a:	f002 f882 	bl	1ad42 <strlen>
   18c3e:	4682      	mov	sl, r0
   18c40:	4607      	mov	r7, r0

    rc = BLE_HS_EINVAL;
    for (i = 0; i < sizeof schemes / sizeof schemes[0]; i++) {
   18c42:	2500      	movs	r5, #0
   18c44:	e000      	b.n	18c48 <parse_eddystone_url+0x1c>
   18c46:	3501      	adds	r5, #1
   18c48:	2d03      	cmp	r5, #3
   18c4a:	d816      	bhi.n	18c7a <parse_eddystone_url+0x4e>
        prefix = schemes[i].s;
   18c4c:	4b25      	ldr	r3, [pc, #148]	; (18ce4 <parse_eddystone_url+0xb8>)
   18c4e:	f853 6035 	ldr.w	r6, [r3, r5, lsl #3]
        prefix_len = strlen(schemes[i].s);
   18c52:	4630      	mov	r0, r6
   18c54:	f002 f875 	bl	1ad42 <strlen>
   18c58:	4604      	mov	r4, r0
   18c5a:	4681      	mov	r9, r0

        if (full_url_len >= prefix_len &&
   18c5c:	4287      	cmp	r7, r0
   18c5e:	dbf2      	blt.n	18c46 <parse_eddystone_url+0x1a>
            memcmp(full_url, prefix, prefix_len) == 0) {
   18c60:	4602      	mov	r2, r0
   18c62:	4631      	mov	r1, r6
   18c64:	4640      	mov	r0, r8
   18c66:	f001 ffe1 	bl	1ac2c <memcmp>
        if (full_url_len >= prefix_len &&
   18c6a:	4606      	mov	r6, r0
   18c6c:	2800      	cmp	r0, #0
   18c6e:	d1ea      	bne.n	18c46 <parse_eddystone_url+0x1a>

            *out_scheme = i;
   18c70:	f88b 5000 	strb.w	r5, [fp]
   18c74:	4605      	mov	r5, r0
   18c76:	46bb      	mov	fp, r7
   18c78:	e005      	b.n	18c86 <parse_eddystone_url+0x5a>
    rc = BLE_HS_EINVAL;
   18c7a:	2603      	movs	r6, #3
    }

    memcpy(out_body, full_url + prefix_len, *out_body_len);

    return 0;
}
   18c7c:	4630      	mov	r0, r6
   18c7e:	b005      	add	sp, #20
   18c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (i = 0; i < sizeof suffixes / sizeof suffixes[0]; i++) {
   18c84:	3501      	adds	r5, #1
   18c86:	2d0d      	cmp	r5, #13
   18c88:	d81b      	bhi.n	18cc2 <parse_eddystone_url+0x96>
        suffix = suffixes[i].s;
   18c8a:	4b17      	ldr	r3, [pc, #92]	; (18ce8 <parse_eddystone_url+0xbc>)
   18c8c:	f853 7035 	ldr.w	r7, [r3, r5, lsl #3]
        suffix_len = strlen(suffixes[i].s);
   18c90:	4638      	mov	r0, r7
   18c92:	f002 f856 	bl	1ad42 <strlen>
   18c96:	4602      	mov	r2, r0
   18c98:	9003      	str	r0, [sp, #12]
        suffix_idx = full_url_len - suffix_len;
   18c9a:	ebab 0000 	sub.w	r0, fp, r0
        if (suffix_idx >= prefix_len &&
   18c9e:	4581      	cmp	r9, r0
   18ca0:	dcf0      	bgt.n	18c84 <parse_eddystone_url+0x58>
            memcmp(full_url + suffix_idx, suffix, suffix_len) == 0) {
   18ca2:	4639      	mov	r1, r7
   18ca4:	4440      	add	r0, r8
   18ca6:	f001 ffc1 	bl	1ac2c <memcmp>
        if (suffix_idx >= prefix_len &&
   18caa:	2800      	cmp	r0, #0
   18cac:	d1ea      	bne.n	18c84 <parse_eddystone_url+0x58>
            *out_suffix = i;
   18cae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18cb0:	701d      	strb	r5, [r3, #0]
        *out_body_len = full_url_len - prefix_len - suffix_len;
   18cb2:	ebaa 0309 	sub.w	r3, sl, r9
   18cb6:	b2db      	uxtb	r3, r3
   18cb8:	9a03      	ldr	r2, [sp, #12]
   18cba:	1a9b      	subs	r3, r3, r2
   18cbc:	9a01      	ldr	r2, [sp, #4]
   18cbe:	7013      	strb	r3, [r2, #0]
   18cc0:	e007      	b.n	18cd2 <parse_eddystone_url+0xa6>
        *out_suffix = BLE_EDDYSTONE_URL_SUFFIX_NONE;
   18cc2:	23ff      	movs	r3, #255	; 0xff
   18cc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18cc6:	7013      	strb	r3, [r2, #0]
        *out_body_len = full_url_len - prefix_len;
   18cc8:	ebaa 0909 	sub.w	r9, sl, r9
   18ccc:	9b01      	ldr	r3, [sp, #4]
   18cce:	f883 9000 	strb.w	r9, [r3]
    memcpy(out_body, full_url + prefix_len, *out_body_len);
   18cd2:	9b01      	ldr	r3, [sp, #4]
   18cd4:	781a      	ldrb	r2, [r3, #0]
   18cd6:	eb08 0104 	add.w	r1, r8, r4
   18cda:	9802      	ldr	r0, [sp, #8]
   18cdc:	f001 ffca 	bl	1ac74 <memcpy>
    return 0;
   18ce0:	e7cc      	b.n	18c7c <parse_eddystone_url+0x50>
   18ce2:	bf00      	nop
   18ce4:	00033b9c 	.word	0x00033b9c
   18ce8:	00033bbc 	.word	0x00033bbc

00018cec <sysinit_app>:
void ble_store_config_init(void);
void shell_init(void);

void
sysinit_app(void)
{
   18cec:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   18cee:	f000 f9d7 	bl	190a0 <os_pkg_init>

    /*** Stage 9 */
    /* 9.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   18cf2:	f003 fc23 	bl	1c53c <flash_map_init>

    /*** Stage 10 */
    /* 10.0: stats_module_init (sys/stats/full) */
    stats_module_init();
   18cf6:	f005 f8d5 	bl	1dea4 <stats_module_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (sys/console/full) */
    console_pkg_init();
   18cfa:	f003 f9c9 	bl	1c090 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: apollo3_ble_hci_init (nimble/transport/apollo3) */
    apollo3_ble_hci_init();
   18cfe:	f011 ff87 	bl	2ac10 <apollo3_ble_hci_init>
    /* 100.1: log_init (sys/log/full) */
    log_init();
   18d02:	f003 fd15 	bl	1c730 <log_init>
    /* 100.2: modlog_init (sys/log/modlog) */
    modlog_init();
   18d06:	f004 f827 	bl	1cd58 <modlog_init>

    /*** Stage 200 */
    /* 200.0: ble_hs_init (nimble/host) */
    ble_hs_init();
   18d0a:	f00d fda9 	bl	26860 <ble_hs_init>

    /*** Stage 301 */
    /* 301.0: ble_svc_gap_init (nimble/host/services/gap) */
    ble_svc_gap_init();
   18d0e:	f011 f997 	bl	2a040 <ble_svc_gap_init>

    /*** Stage 302 */
    /* 302.0: ble_svc_gatt_init (nimble/host/services/gatt) */
    ble_svc_gatt_init();
   18d12:	f011 fa13 	bl	2a13c <ble_svc_gatt_init>

    /*** Stage 303 */
    /* 303.0: ble_svc_ans_init (nimble/host/services/ans) */
    ble_svc_ans_init();
   18d16:	f011 f8b5 	bl	29e84 <ble_svc_ans_init>

    /*** Stage 500 */
    /* 500.0: ble_store_config_init (nimble/host/store/config) */
    ble_store_config_init();
   18d1a:	f011 fc6f 	bl	2a5fc <ble_store_config_init>
    /* 500.1: shell_init (sys/shell) */
    shell_init();
   18d1e:	f004 fecd 	bl	1dabc <shell_init>
}
   18d22:	bd08      	pop	{r3, pc}

00018d24 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   18d24:	b508      	push	{r3, lr}
   18d26:	4675      	mov	r5, lr
   18d28:	4604      	mov	r4, r0
   18d2a:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   18d2c:	f001 fdce 	bl	1a8cc <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   18d30:	f003 f8c2 	bl	1beb8 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   18d34:	b16c      	cbz	r4, 18d52 <__assert_func+0x2e>
   18d36:	4633      	mov	r3, r6
   18d38:	4622      	mov	r2, r4
   18d3a:	4629      	mov	r1, r5
   18d3c:	4807      	ldr	r0, [pc, #28]	; (18d5c <__assert_func+0x38>)
   18d3e:	f003 f9f5 	bl	1c12c <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   18d42:	4b07      	ldr	r3, [pc, #28]	; (18d60 <__assert_func+0x3c>)
   18d44:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   18d48:	605a      	str	r2, [r3, #4]
    asm("isb");
   18d4a:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   18d4e:	f7fb fce1 	bl	14714 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   18d52:	4629      	mov	r1, r5
   18d54:	4803      	ldr	r0, [pc, #12]	; (18d64 <__assert_func+0x40>)
   18d56:	f003 f9e9 	bl	1c12c <console_printf>
   18d5a:	e7f2      	b.n	18d42 <__assert_func+0x1e>
   18d5c:	00033c3c 	.word	0x00033c3c
   18d60:	e000ed00 	.word	0xe000ed00
   18d64:	00033c2c 	.word	0x00033c2c

00018d68 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   18d68:	b500      	push	{lr}
   18d6a:	b083      	sub	sp, #12
   18d6c:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   18d6e:	f003 f8a3 	bl	1beb8 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   18d72:	4d1b      	ldr	r5, [pc, #108]	; (18de0 <os_default_irq+0x78>)
   18d74:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   18d76:	6822      	ldr	r2, [r4, #0]
   18d78:	f3c1 0108 	ubfx	r1, r1, #0, #9
   18d7c:	4819      	ldr	r0, [pc, #100]	; (18de4 <os_default_irq+0x7c>)
   18d7e:	f003 f9d5 	bl	1c12c <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   18d82:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   18d84:	6883      	ldr	r3, [r0, #8]
   18d86:	6842      	ldr	r2, [r0, #4]
   18d88:	6801      	ldr	r1, [r0, #0]
   18d8a:	68c0      	ldr	r0, [r0, #12]
   18d8c:	9000      	str	r0, [sp, #0]
   18d8e:	4816      	ldr	r0, [pc, #88]	; (18de8 <os_default_irq+0x80>)
   18d90:	f003 f9cc 	bl	1c12c <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   18d94:	6923      	ldr	r3, [r4, #16]
   18d96:	9300      	str	r3, [sp, #0]
   18d98:	68e3      	ldr	r3, [r4, #12]
   18d9a:	68a2      	ldr	r2, [r4, #8]
   18d9c:	6861      	ldr	r1, [r4, #4]
   18d9e:	4813      	ldr	r0, [pc, #76]	; (18dec <os_default_irq+0x84>)
   18da0:	f003 f9c4 	bl	1c12c <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   18da4:	6a23      	ldr	r3, [r4, #32]
   18da6:	9300      	str	r3, [sp, #0]
   18da8:	69e3      	ldr	r3, [r4, #28]
   18daa:	69a2      	ldr	r2, [r4, #24]
   18dac:	6961      	ldr	r1, [r4, #20]
   18dae:	4810      	ldr	r0, [pc, #64]	; (18df0 <os_default_irq+0x88>)
   18db0:	f003 f9bc 	bl	1c12c <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   18db4:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   18db6:	6983      	ldr	r3, [r0, #24]
   18db8:	6942      	ldr	r2, [r0, #20]
   18dba:	6901      	ldr	r1, [r0, #16]
   18dbc:	69c0      	ldr	r0, [r0, #28]
   18dbe:	9000      	str	r0, [sp, #0]
   18dc0:	480c      	ldr	r0, [pc, #48]	; (18df4 <os_default_irq+0x8c>)
   18dc2:	f003 f9b3 	bl	1c12c <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   18dc6:	6869      	ldr	r1, [r5, #4]
   18dc8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   18dca:	6aab      	ldr	r3, [r5, #40]	; 0x28
   18dcc:	480a      	ldr	r0, [pc, #40]	; (18df8 <os_default_irq+0x90>)
   18dce:	f003 f9ad 	bl	1c12c <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   18dd2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   18dd4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   18dd6:	4809      	ldr	r0, [pc, #36]	; (18dfc <os_default_irq+0x94>)
   18dd8:	f003 f9a8 	bl	1c12c <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   18ddc:	f7fb fc9a 	bl	14714 <hal_system_reset>
   18de0:	e000ed00 	.word	0xe000ed00
   18de4:	00033c54 	.word	0x00033c54
   18de8:	00033c88 	.word	0x00033c88
   18dec:	00033cbc 	.word	0x00033cbc
   18df0:	00033cf0 	.word	0x00033cf0
   18df4:	00033d24 	.word	0x00033d24
   18df8:	00033d58 	.word	0x00033d58
   18dfc:	00033d80 	.word	0x00033d80

00018e00 <put_le16>:
put_le16(void *buf, uint16_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   18e00:	7001      	strb	r1, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   18e02:	0a09      	lsrs	r1, r1, #8
   18e04:	7041      	strb	r1, [r0, #1]
}
   18e06:	4770      	bx	lr

00018e08 <put_le32>:
put_le32(void *buf, uint32_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   18e08:	7001      	strb	r1, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   18e0a:	f3c1 2307 	ubfx	r3, r1, #8, #8
   18e0e:	7043      	strb	r3, [r0, #1]
    u8ptr[2] = (uint8_t)(x >> 16);
   18e10:	f3c1 4307 	ubfx	r3, r1, #16, #8
   18e14:	7083      	strb	r3, [r0, #2]
    u8ptr[3] = (uint8_t)(x >> 24);
   18e16:	0e09      	lsrs	r1, r1, #24
   18e18:	70c1      	strb	r1, [r0, #3]
}
   18e1a:	4770      	bx	lr

00018e1c <get_le16>:
{
    const uint8_t *u8ptr;
    uint16_t x;

    u8ptr = buf;
    x = u8ptr[0];
   18e1c:	7803      	ldrb	r3, [r0, #0]
    x |= (uint16_t)u8ptr[1] << 8;
   18e1e:	7840      	ldrb	r0, [r0, #1]

    return x;
}
   18e20:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   18e24:	4770      	bx	lr

00018e26 <get_le32>:
{
    const uint8_t *u8ptr;
    uint32_t x;

    u8ptr = buf;
    x = u8ptr[0];
   18e26:	7803      	ldrb	r3, [r0, #0]
    x |= (uint32_t)u8ptr[1] << 8;
   18e28:	7842      	ldrb	r2, [r0, #1]
   18e2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    x |= (uint32_t)u8ptr[2] << 16;
   18e2e:	7882      	ldrb	r2, [r0, #2]
   18e30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    x |= (uint32_t)u8ptr[3] << 24;
   18e34:	78c0      	ldrb	r0, [r0, #3]

    return x;
}
   18e36:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   18e3a:	4770      	bx	lr

00018e3c <swap_in_place>:
    int i;
    int j;

    u8ptr = buf;

    for (i = 0, j = len - 1; i < j; i++, j--) {
   18e3c:	3901      	subs	r1, #1
   18e3e:	2300      	movs	r3, #0
   18e40:	428b      	cmp	r3, r1
   18e42:	da0a      	bge.n	18e5a <swap_in_place+0x1e>
{
   18e44:	b410      	push	{r4}
        tmp = u8ptr[i];
   18e46:	5cc2      	ldrb	r2, [r0, r3]

        u8ptr[i] = u8ptr[j];
   18e48:	5c44      	ldrb	r4, [r0, r1]
   18e4a:	54c4      	strb	r4, [r0, r3]
        u8ptr[j] = tmp;
   18e4c:	5442      	strb	r2, [r0, r1]
    for (i = 0, j = len - 1; i < j; i++, j--) {
   18e4e:	3301      	adds	r3, #1
   18e50:	3901      	subs	r1, #1
   18e52:	428b      	cmp	r3, r1
   18e54:	dbf7      	blt.n	18e46 <swap_in_place+0xa>
    }
}
   18e56:	bc10      	pop	{r4}
   18e58:	4770      	bx	lr
   18e5a:	4770      	bx	lr

00018e5c <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   18e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    hal_watchdog_tickle();
   18e5e:	f015 f817 	bl	2de90 <hal_watchdog_tickle>
    sanity_last = 0;
   18e62:	2600      	movs	r6, #0
   18e64:	e00e      	b.n	18e84 <os_idle_task+0x28>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   18e66:	f001 f94b 	bl	1a100 <os_sanity_run>
#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   18e6a:	f015 f811 	bl	2de90 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
            sanity_last = now;
   18e6e:	4626      	mov	r6, r4
   18e70:	e014      	b.n	18e9c <os_idle_task+0x40>
         * happens on next interval in case it was already performed on current
         * tick.
         */
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
        if ((int)sanity_to_next <= 0) {
            sanity_to_next += sanity_itvl_ticks;
   18e72:	f500 60f0 	add.w	r0, r0, #1920	; 0x780
   18e76:	e025      	b.n	18ec4 <os_idle_task+0x68>
        }
        iticks = min(iticks, sanity_to_next);

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   18e78:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   18e7a:	f014 fe37 	bl	2daec <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   18e7e:	4628      	mov	r0, r5
   18e80:	f001 fd2a 	bl	1a8d8 <os_arch_restore_sr>
        ++g_os_idle_ctr;
   18e84:	4a15      	ldr	r2, [pc, #84]	; (18edc <os_idle_task+0x80>)
   18e86:	6813      	ldr	r3, [r2, #0]
   18e88:	3301      	adds	r3, #1
   18e8a:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   18e8c:	f001 fbee 	bl	1a66c <os_time_get>
   18e90:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
   18e92:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
   18e96:	1ac3      	subs	r3, r0, r3
   18e98:	2b00      	cmp	r3, #0
   18e9a:	dae4      	bge.n	18e66 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   18e9c:	f001 fd16 	bl	1a8cc <os_arch_save_sr>
   18ea0:	4605      	mov	r5, r0
        now = os_time_get();
   18ea2:	f001 fbe3 	bl	1a66c <os_time_get>
   18ea6:	4607      	mov	r7, r0
        sticks = os_sched_wakeup_ticks(now);
   18ea8:	f001 fa6c 	bl	1a384 <os_sched_wakeup_ticks>
   18eac:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   18eae:	4638      	mov	r0, r7
   18eb0:	f000 f9b6 	bl	19220 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   18eb4:	4284      	cmp	r4, r0
   18eb6:	bf28      	it	cs
   18eb8:	4604      	movcs	r4, r0
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
   18eba:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
   18ebe:	1bd8      	subs	r0, r3, r7
        if ((int)sanity_to_next <= 0) {
   18ec0:	2800      	cmp	r0, #0
   18ec2:	ddd6      	ble.n	18e72 <os_idle_task+0x16>
        iticks = min(iticks, sanity_to_next);
   18ec4:	42a0      	cmp	r0, r4
   18ec6:	bf28      	it	cs
   18ec8:	4620      	movcs	r0, r4
        if (iticks < MIN_IDLE_TICKS) {
   18eca:	280b      	cmp	r0, #11
   18ecc:	d9d4      	bls.n	18e78 <os_idle_task+0x1c>
        } else if (iticks > MAX_IDLE_TICKS) {
   18ece:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   18ed2:	d9d2      	bls.n	18e7a <os_idle_task+0x1e>
            iticks = MAX_IDLE_TICKS;
   18ed4:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   18ed8:	e7cf      	b.n	18e7a <os_idle_task+0x1e>
   18eda:	bf00      	nop
   18edc:	10003878 	.word	0x10003878

00018ee0 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   18ee0:	b508      	push	{r3, lr}
   18ee2:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   18ee4:	2100      	movs	r1, #0
   18ee6:	4608      	mov	r0, r1
   18ee8:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   18eea:	f7fb fc0b 	bl	14704 <hal_debugger_connected>
   18eee:	b100      	cbz	r0, 18ef2 <os_main+0x12>
   18ef0:	be01      	bkpt	0x0001
   18ef2:	2300      	movs	r3, #0
   18ef4:	461a      	mov	r2, r3
   18ef6:	4619      	mov	r1, r3
   18ef8:	4618      	mov	r0, r3
   18efa:	f7ff ff13 	bl	18d24 <__assert_func>
	...

00018f00 <os_started>:
}
   18f00:	4b01      	ldr	r3, [pc, #4]	; (18f08 <os_started+0x8>)
   18f02:	6818      	ldr	r0, [r3, #0]
   18f04:	4770      	bx	lr
   18f06:	bf00      	nop
   18f08:	100040d0 	.word	0x100040d0

00018f0c <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   18f0c:	b500      	push	{lr}
   18f0e:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   18f10:	2340      	movs	r3, #64	; 0x40
   18f12:	9303      	str	r3, [sp, #12]
   18f14:	4b1b      	ldr	r3, [pc, #108]	; (18f84 <os_init_idle_task+0x78>)
   18f16:	9302      	str	r3, [sp, #8]
   18f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18f1c:	9301      	str	r3, [sp, #4]
   18f1e:	23ff      	movs	r3, #255	; 0xff
   18f20:	9300      	str	r3, [sp, #0]
   18f22:	2300      	movs	r3, #0
   18f24:	4a18      	ldr	r2, [pc, #96]	; (18f88 <os_init_idle_task+0x7c>)
   18f26:	4919      	ldr	r1, [pc, #100]	; (18f8c <os_init_idle_task+0x80>)
   18f28:	4819      	ldr	r0, [pc, #100]	; (18f90 <os_init_idle_task+0x84>)
   18f2a:	f001 fa8f 	bl	1a44c <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   18f2e:	b950      	cbnz	r0, 18f46 <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   18f30:	f001 f928 	bl	1a184 <os_sanity_init>
    assert(rc == 0);
   18f34:	b988      	cbnz	r0, 18f5a <os_init_idle_task+0x4e>

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   18f36:	f247 5030 	movw	r0, #30000	; 0x7530
   18f3a:	f014 ffa6 	bl	2de8a <hal_watchdog_init>
    assert(rc == 0);
   18f3e:	b9b0      	cbnz	r0, 18f6e <os_init_idle_task+0x62>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
}
   18f40:	b005      	add	sp, #20
   18f42:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   18f46:	f7fb fbdd 	bl	14704 <hal_debugger_connected>
   18f4a:	b100      	cbz	r0, 18f4e <os_init_idle_task+0x42>
   18f4c:	be01      	bkpt	0x0001
   18f4e:	2300      	movs	r3, #0
   18f50:	461a      	mov	r2, r3
   18f52:	4619      	mov	r1, r3
   18f54:	4618      	mov	r0, r3
   18f56:	f7ff fee5 	bl	18d24 <__assert_func>
    assert(rc == 0);
   18f5a:	f7fb fbd3 	bl	14704 <hal_debugger_connected>
   18f5e:	b100      	cbz	r0, 18f62 <os_init_idle_task+0x56>
   18f60:	be01      	bkpt	0x0001
   18f62:	2300      	movs	r3, #0
   18f64:	461a      	mov	r2, r3
   18f66:	4619      	mov	r1, r3
   18f68:	4618      	mov	r0, r3
   18f6a:	f7ff fedb 	bl	18d24 <__assert_func>
    assert(rc == 0);
   18f6e:	f7fb fbc9 	bl	14704 <hal_debugger_connected>
   18f72:	b100      	cbz	r0, 18f76 <os_init_idle_task+0x6a>
   18f74:	be01      	bkpt	0x0001
   18f76:	2300      	movs	r3, #0
   18f78:	461a      	mov	r2, r3
   18f7a:	4619      	mov	r1, r3
   18f7c:	4618      	mov	r0, r3
   18f7e:	f7ff fed1 	bl	18d24 <__assert_func>
   18f82:	bf00      	nop
   18f84:	10003778 	.word	0x10003778
   18f88:	00018e5d 	.word	0x00018e5d
   18f8c:	00033d9c 	.word	0x00033d9c
   18f90:	10003728 	.word	0x10003728

00018f94 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   18f94:	b510      	push	{r4, lr}
   18f96:	b084      	sub	sp, #16
   18f98:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   18f9a:	4b2e      	ldr	r3, [pc, #184]	; (19054 <os_init+0xc0>)
   18f9c:	2200      	movs	r2, #0
   18f9e:	601a      	str	r2, [r3, #0]
   18fa0:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   18fa2:	4b2d      	ldr	r3, [pc, #180]	; (19058 <os_init+0xc4>)
   18fa4:	601a      	str	r2, [r3, #0]
   18fa6:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   18fa8:	f000 faee 	bl	19588 <os_eventq_dflt_get>
   18fac:	f000 fa26 	bl	193fc <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   18fb0:	f000 fa0c 	bl	193cc <os_dev_reset>

    err = os_arch_os_init();
   18fb4:	f001 fcc6 	bl	1a944 <os_arch_os_init>
    assert(err == OS_OK);
   18fb8:	bb18      	cbnz	r0, 19002 <os_init+0x6e>

    if (main_fn) {
   18fba:	b194      	cbz	r4, 18fe2 <os_init+0x4e>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   18fbc:	f44f 7300 	mov.w	r3, #512	; 0x200
   18fc0:	9303      	str	r3, [sp, #12]
   18fc2:	4b26      	ldr	r3, [pc, #152]	; (1905c <os_init+0xc8>)
   18fc4:	9302      	str	r3, [sp, #8]
   18fc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18fca:	9301      	str	r3, [sp, #4]
   18fcc:	237f      	movs	r3, #127	; 0x7f
   18fce:	9300      	str	r3, [sp, #0]
   18fd0:	4623      	mov	r3, r4
   18fd2:	4a23      	ldr	r2, [pc, #140]	; (19060 <os_init+0xcc>)
   18fd4:	4923      	ldr	r1, [pc, #140]	; (19064 <os_init+0xd0>)
   18fd6:	4824      	ldr	r0, [pc, #144]	; (19068 <os_init+0xd4>)
   18fd8:	f001 fa38 	bl	1a44c <os_task_init>
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   18fdc:	f010 0fff 	tst.w	r0, #255	; 0xff
   18fe0:	d119      	bne.n	19016 <os_init+0x82>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   18fe2:	f012 fe79 	bl	2bcd8 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   18fe6:	2001      	movs	r0, #1
   18fe8:	f000 f9a8 	bl	1933c <os_dev_initialize_all>
    assert(err == OS_OK);
   18fec:	f010 0fff 	tst.w	r0, #255	; 0xff
   18ff0:	d11b      	bne.n	1902a <os_init+0x96>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   18ff2:	2002      	movs	r0, #2
   18ff4:	f000 f9a2 	bl	1933c <os_dev_initialize_all>
    assert(err == OS_OK);
   18ff8:	f010 0fff 	tst.w	r0, #255	; 0xff
   18ffc:	d11f      	bne.n	1903e <os_init+0xaa>
}
   18ffe:	b004      	add	sp, #16
   19000:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   19002:	f7fb fb7f 	bl	14704 <hal_debugger_connected>
   19006:	b100      	cbz	r0, 1900a <os_init+0x76>
   19008:	be01      	bkpt	0x0001
   1900a:	2300      	movs	r3, #0
   1900c:	461a      	mov	r2, r3
   1900e:	4619      	mov	r1, r3
   19010:	4618      	mov	r0, r3
   19012:	f7ff fe87 	bl	18d24 <__assert_func>
        assert(err == 0);
   19016:	f7fb fb75 	bl	14704 <hal_debugger_connected>
   1901a:	b100      	cbz	r0, 1901e <os_init+0x8a>
   1901c:	be01      	bkpt	0x0001
   1901e:	2300      	movs	r3, #0
   19020:	461a      	mov	r2, r3
   19022:	4619      	mov	r1, r3
   19024:	4618      	mov	r0, r3
   19026:	f7ff fe7d 	bl	18d24 <__assert_func>
    assert(err == OS_OK);
   1902a:	f7fb fb6b 	bl	14704 <hal_debugger_connected>
   1902e:	b100      	cbz	r0, 19032 <os_init+0x9e>
   19030:	be01      	bkpt	0x0001
   19032:	2300      	movs	r3, #0
   19034:	461a      	mov	r2, r3
   19036:	4619      	mov	r1, r3
   19038:	4618      	mov	r0, r3
   1903a:	f7ff fe73 	bl	18d24 <__assert_func>
    assert(err == OS_OK);
   1903e:	f7fb fb61 	bl	14704 <hal_debugger_connected>
   19042:	b100      	cbz	r0, 19046 <os_init+0xb2>
   19044:	be01      	bkpt	0x0001
   19046:	2300      	movs	r3, #0
   19048:	461a      	mov	r2, r3
   1904a:	4619      	mov	r1, r3
   1904c:	4618      	mov	r0, r3
   1904e:	f7ff fe69 	bl	18d24 <__assert_func>
   19052:	bf00      	nop
   19054:	100040d4 	.word	0x100040d4
   19058:	10004eec 	.word	0x10004eec
   1905c:	10003880 	.word	0x10003880
   19060:	00018ee1 	.word	0x00018ee1
   19064:	00033da4 	.word	0x00033da4
   19068:	10004080 	.word	0x10004080

0001906c <os_start>:

void
os_start(void)
{
   1906c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   1906e:	f014 ff0e 	bl	2de8e <hal_watchdog_enable>
#endif

    err = os_arch_os_start();
   19072:	f001 fcc7 	bl	1aa04 <os_arch_os_start>
    assert(err == OS_OK);
   19076:	b900      	cbnz	r0, 1907a <os_start+0xe>
#else
    assert(0);
#endif
}
   19078:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   1907a:	f7fb fb43 	bl	14704 <hal_debugger_connected>
   1907e:	b100      	cbz	r0, 19082 <os_start+0x16>
   19080:	be01      	bkpt	0x0001
   19082:	2300      	movs	r3, #0
   19084:	461a      	mov	r2, r3
   19086:	4619      	mov	r1, r3
   19088:	4618      	mov	r0, r3
   1908a:	f7ff fe4b 	bl	18d24 <__assert_func>

0001908e <os_reboot>:

void
os_reboot(int reason)
{
   1908e:	b508      	push	{r3, lr}
    sysdown(reason);
   19090:	f004 ff80 	bl	1df94 <sysdown>
}
   19094:	bd08      	pop	{r3, pc}

00019096 <os_system_reset>:

void
os_system_reset(void)
{
   19096:	b508      	push	{r3, lr}
#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    /* Tickle watchdog just before re-entering bootloader.  Depending on what
     * the system has been doing lately, the watchdog timer might be close to
     * firing.
     */
    hal_watchdog_tickle();
   19098:	f014 fefa 	bl	2de90 <hal_watchdog_tickle>
#endif
    hal_system_reset();
   1909c:	f7fb fb3a 	bl	14714 <hal_system_reset>

000190a0 <os_pkg_init>:
}

void
os_pkg_init(void)
{
   190a0:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   190a2:	4b11      	ldr	r3, [pc, #68]	; (190e8 <os_pkg_init+0x48>)
   190a4:	781b      	ldrb	r3, [r3, #0]
   190a6:	b153      	cbz	r3, 190be <os_pkg_init+0x1e>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   190a8:	2003      	movs	r0, #3
   190aa:	f000 f947 	bl	1933c <os_dev_initialize_all>
    assert(err == OS_OK);
   190ae:	f010 0fff 	tst.w	r0, #255	; 0xff
   190b2:	d10e      	bne.n	190d2 <os_pkg_init+0x32>

    os_mempool_module_init();
   190b4:	f000 ff36 	bl	19f24 <os_mempool_module_init>
    os_msys_init();
   190b8:	f000 ffd2 	bl	1a060 <os_msys_init>
}
   190bc:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   190be:	f7fb fb21 	bl	14704 <hal_debugger_connected>
   190c2:	b100      	cbz	r0, 190c6 <os_pkg_init+0x26>
   190c4:	be01      	bkpt	0x0001
   190c6:	2300      	movs	r3, #0
   190c8:	461a      	mov	r2, r3
   190ca:	4619      	mov	r1, r3
   190cc:	4618      	mov	r0, r3
   190ce:	f7ff fe29 	bl	18d24 <__assert_func>
    assert(err == OS_OK);
   190d2:	f7fb fb17 	bl	14704 <hal_debugger_connected>
   190d6:	b100      	cbz	r0, 190da <os_pkg_init+0x3a>
   190d8:	be01      	bkpt	0x0001
   190da:	2300      	movs	r3, #0
   190dc:	461a      	mov	r2, r3
   190de:	4619      	mov	r1, r3
   190e0:	4618      	mov	r0, r3
   190e2:	f7ff fe1f 	bl	18d24 <__assert_func>
   190e6:	bf00      	nop
   190e8:	100055a0 	.word	0x100055a0

000190ec <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
   190ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   190ee:	4604      	mov	r4, r0
   190f0:	460d      	mov	r5, r1
   190f2:	4617      	mov	r7, r2
   190f4:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
   190f6:	2220      	movs	r2, #32
   190f8:	2100      	movs	r1, #0
   190fa:	f001 fde0 	bl	1acbe <memset>
    c->c_ev.ev_cb = ev_cb;
   190fe:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
   19100:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
   19102:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
   19104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00019108 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
   19108:	b538      	push	{r3, r4, r5, lr}
   1910a:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
   1910c:	f001 fbde 	bl	1a8cc <os_arch_save_sr>
   19110:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
   19112:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
   19114:	b13b      	cbz	r3, 19126 <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   19116:	69a2      	ldr	r2, [r4, #24]
   19118:	b172      	cbz	r2, 19138 <os_callout_stop+0x30>
   1911a:	61d3      	str	r3, [r2, #28]
   1911c:	69e3      	ldr	r3, [r4, #28]
   1911e:	69a2      	ldr	r2, [r4, #24]
   19120:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
   19122:	2300      	movs	r3, #0
   19124:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
   19126:	6920      	ldr	r0, [r4, #16]
   19128:	b110      	cbz	r0, 19130 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
   1912a:	4621      	mov	r1, r4
   1912c:	f000 fa0a 	bl	19544 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
   19130:	4628      	mov	r0, r5
   19132:	f001 fbd1 	bl	1a8d8 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
   19136:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   19138:	4a01      	ldr	r2, [pc, #4]	; (19140 <os_callout_stop+0x38>)
   1913a:	6053      	str	r3, [r2, #4]
   1913c:	e7ee      	b.n	1911c <os_callout_stop+0x14>
   1913e:	bf00      	nop
   19140:	100040d4 	.word	0x100040d4

00019144 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
   19144:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
   19146:	6903      	ldr	r3, [r0, #16]
   19148:	b1c3      	cbz	r3, 1917c <os_callout_reset+0x38>
   1914a:	4604      	mov	r4, r0
   1914c:	460e      	mov	r6, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
   1914e:	2900      	cmp	r1, #0
   19150:	db34      	blt.n	191bc <os_callout_reset+0x78>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
   19152:	f001 fbbb 	bl	1a8cc <os_arch_save_sr>
   19156:	4605      	mov	r5, r0

    os_callout_stop(c);
   19158:	4620      	mov	r0, r4
   1915a:	f7ff ffd5 	bl	19108 <os_callout_stop>

    if (ticks == 0) {
   1915e:	b906      	cbnz	r6, 19162 <os_callout_reset+0x1e>
        ticks = 1;
   19160:	2601      	movs	r6, #1
    }

    c->c_ticks = os_time_get() + ticks;
   19162:	f001 fa83 	bl	1a66c <os_time_get>
   19166:	4430      	add	r0, r6
   19168:	6160      	str	r0, [r4, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   1916a:	4b15      	ldr	r3, [pc, #84]	; (191c0 <os_callout_reset+0x7c>)
   1916c:	681b      	ldr	r3, [r3, #0]
   1916e:	b17b      	cbz	r3, 19190 <os_callout_reset+0x4c>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
   19170:	695a      	ldr	r2, [r3, #20]
   19172:	1a82      	subs	r2, r0, r2
   19174:	2a00      	cmp	r2, #0
   19176:	db0b      	blt.n	19190 <os_callout_reset+0x4c>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   19178:	699b      	ldr	r3, [r3, #24]
   1917a:	e7f8      	b.n	1916e <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
   1917c:	f7fb fac2 	bl	14704 <hal_debugger_connected>
   19180:	b100      	cbz	r0, 19184 <os_callout_reset+0x40>
   19182:	be01      	bkpt	0x0001
   19184:	2300      	movs	r3, #0
   19186:	461a      	mov	r2, r3
   19188:	4619      	mov	r1, r3
   1918a:	4618      	mov	r0, r3
   1918c:	f7ff fdca 	bl	18d24 <__assert_func>
            break;
        }
    }

    if (entry) {
   19190:	b15b      	cbz	r3, 191aa <os_callout_reset+0x66>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
   19192:	69da      	ldr	r2, [r3, #28]
   19194:	61e2      	str	r2, [r4, #28]
   19196:	61a3      	str	r3, [r4, #24]
   19198:	69da      	ldr	r2, [r3, #28]
   1919a:	6014      	str	r4, [r2, #0]
   1919c:	3418      	adds	r4, #24
   1919e:	61dc      	str	r4, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
   191a0:	4628      	mov	r0, r5
   191a2:	f001 fb99 	bl	1a8d8 <os_arch_restore_sr>

    ret = OS_OK;
   191a6:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
   191a8:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
   191aa:	2300      	movs	r3, #0
   191ac:	61a3      	str	r3, [r4, #24]
   191ae:	4b04      	ldr	r3, [pc, #16]	; (191c0 <os_callout_reset+0x7c>)
   191b0:	685a      	ldr	r2, [r3, #4]
   191b2:	61e2      	str	r2, [r4, #28]
   191b4:	6014      	str	r4, [r2, #0]
   191b6:	3418      	adds	r4, #24
   191b8:	605c      	str	r4, [r3, #4]
   191ba:	e7f1      	b.n	191a0 <os_callout_reset+0x5c>
        ret = OS_EINVAL;
   191bc:	2002      	movs	r0, #2
    return ret;
   191be:	e7f3      	b.n	191a8 <os_callout_reset+0x64>
   191c0:	100040d4 	.word	0x100040d4

000191c4 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   191c4:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   191c6:	f001 fa51 	bl	1a66c <os_time_get>
   191ca:	4605      	mov	r5, r0
   191cc:	e00f      	b.n	191ee <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   191ce:	69e2      	ldr	r2, [r4, #28]
   191d0:	4b12      	ldr	r3, [pc, #72]	; (1921c <os_callout_tick+0x58>)
   191d2:	605a      	str	r2, [r3, #4]
   191d4:	69e3      	ldr	r3, [r4, #28]
   191d6:	69a2      	ldr	r2, [r4, #24]
   191d8:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   191da:	2300      	movs	r3, #0
   191dc:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   191de:	f001 fb7b 	bl	1a8d8 <os_arch_restore_sr>

        if (c) {
   191e2:	b1d4      	cbz	r4, 1921a <os_callout_tick+0x56>
            if (c->c_evq) {
   191e4:	6920      	ldr	r0, [r4, #16]
   191e6:	b1a0      	cbz	r0, 19212 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
   191e8:	4621      	mov	r1, r4
   191ea:	f000 f914 	bl	19416 <os_eventq_put>
        OS_ENTER_CRITICAL(sr);
   191ee:	f001 fb6d 	bl	1a8cc <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   191f2:	4b0a      	ldr	r3, [pc, #40]	; (1921c <os_callout_tick+0x58>)
   191f4:	681c      	ldr	r4, [r3, #0]
        if (c) {
   191f6:	2c00      	cmp	r4, #0
   191f8:	d0f1      	beq.n	191de <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   191fa:	6963      	ldr	r3, [r4, #20]
   191fc:	1aeb      	subs	r3, r5, r3
   191fe:	2b00      	cmp	r3, #0
   19200:	db05      	blt.n	1920e <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   19202:	69a3      	ldr	r3, [r4, #24]
   19204:	2b00      	cmp	r3, #0
   19206:	d0e2      	beq.n	191ce <os_callout_tick+0xa>
   19208:	69e2      	ldr	r2, [r4, #28]
   1920a:	61da      	str	r2, [r3, #28]
   1920c:	e7e2      	b.n	191d4 <os_callout_tick+0x10>
                c = NULL;
   1920e:	2400      	movs	r4, #0
   19210:	e7e5      	b.n	191de <os_callout_tick+0x1a>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   19212:	6863      	ldr	r3, [r4, #4]
   19214:	4620      	mov	r0, r4
   19216:	4798      	blx	r3
   19218:	e7e9      	b.n	191ee <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   1921a:	bd38      	pop	{r3, r4, r5, pc}
   1921c:	100040d4 	.word	0x100040d4

00019220 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   19220:	b510      	push	{r4, lr}
   19222:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   19224:	f001 fb5b 	bl	1a8de <os_arch_in_critical>
   19228:	b130      	cbz	r0, 19238 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   1922a:	4b0b      	ldr	r3, [pc, #44]	; (19258 <os_callout_wakeup_ticks+0x38>)
   1922c:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   1922e:	b17b      	cbz	r3, 19250 <os_callout_wakeup_ticks+0x30>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   19230:	6958      	ldr	r0, [r3, #20]
   19232:	1b00      	subs	r0, r0, r4
   19234:	d40a      	bmi.n	1924c <os_callout_wakeup_ticks+0x2c>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   19236:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   19238:	f7fb fa64 	bl	14704 <hal_debugger_connected>
   1923c:	b100      	cbz	r0, 19240 <os_callout_wakeup_ticks+0x20>
   1923e:	be01      	bkpt	0x0001
   19240:	2300      	movs	r3, #0
   19242:	461a      	mov	r2, r3
   19244:	4619      	mov	r1, r3
   19246:	4618      	mov	r0, r3
   19248:	f7ff fd6c 	bl	18d24 <__assert_func>
            rt = 0;     /* callout time is in the past */
   1924c:	2000      	movs	r0, #0
   1924e:	e7f2      	b.n	19236 <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   19250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   19254:	e7ef      	b.n	19236 <os_callout_wakeup_ticks+0x16>
   19256:	bf00      	nop
   19258:	100040d4 	.word	0x100040d4

0001925c <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   1925c:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   1925e:	4b16      	ldr	r3, [pc, #88]	; (192b8 <os_dev_add+0x5c>)
   19260:	681d      	ldr	r5, [r3, #0]
   19262:	b115      	cbz	r5, 1926a <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   19264:	462b      	mov	r3, r5
    prev_dev = NULL;
   19266:	2400      	movs	r4, #0
   19268:	e008      	b.n	1927c <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   1926a:	4603      	mov	r3, r0
   1926c:	f843 5f20 	str.w	r5, [r3, #32]!
   19270:	4a11      	ldr	r2, [pc, #68]	; (192b8 <os_dev_add+0x5c>)
   19272:	6053      	str	r3, [r2, #4]
   19274:	6010      	str	r0, [r2, #0]
        return (0);
   19276:	e012      	b.n	1929e <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
                   ((dev->od_stage == cur_dev->od_stage) &&
                    (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   19278:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   1927a:	6a1b      	ldr	r3, [r3, #32]
   1927c:	b153      	cbz	r3, 19294 <os_dev_add+0x38>
        if (dev == cur_dev) {
   1927e:	4283      	cmp	r3, r0
   19280:	d00d      	beq.n	1929e <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
   19282:	7e01      	ldrb	r1, [r0, #24]
   19284:	7e1a      	ldrb	r2, [r3, #24]
   19286:	4291      	cmp	r1, r2
   19288:	d304      	bcc.n	19294 <os_dev_add+0x38>
   1928a:	d1f5      	bne.n	19278 <os_dev_add+0x1c>
                    (dev->od_priority < cur_dev->od_priority))) {
   1928c:	7e41      	ldrb	r1, [r0, #25]
   1928e:	7e5a      	ldrb	r2, [r3, #25]
                   ((dev->od_stage == cur_dev->od_stage) &&
   19290:	4291      	cmp	r1, r2
   19292:	d2f1      	bcs.n	19278 <os_dev_add+0x1c>
    }

    if (prev_dev) {
   19294:	b15c      	cbz	r4, 192ae <os_dev_add+0x52>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   19296:	6a23      	ldr	r3, [r4, #32]
   19298:	6203      	str	r3, [r0, #32]
   1929a:	b11b      	cbz	r3, 192a4 <os_dev_add+0x48>
   1929c:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   1929e:	2000      	movs	r0, #0
   192a0:	bc30      	pop	{r4, r5}
   192a2:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   192a4:	f100 0320 	add.w	r3, r0, #32
   192a8:	4a03      	ldr	r2, [pc, #12]	; (192b8 <os_dev_add+0x5c>)
   192aa:	6053      	str	r3, [r2, #4]
   192ac:	e7f6      	b.n	1929c <os_dev_add+0x40>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   192ae:	6205      	str	r5, [r0, #32]
   192b0:	4b01      	ldr	r3, [pc, #4]	; (192b8 <os_dev_add+0x5c>)
   192b2:	6018      	str	r0, [r3, #0]
   192b4:	e7f3      	b.n	1929e <os_dev_add+0x42>
   192b6:	bf00      	nop
   192b8:	100040dc 	.word	0x100040dc

000192bc <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   192bc:	b510      	push	{r4, lr}
   192be:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   192c0:	6903      	ldr	r3, [r0, #16]
   192c2:	6941      	ldr	r1, [r0, #20]
   192c4:	4798      	blx	r3
    if (rc != 0) {
   192c6:	b128      	cbz	r0, 192d4 <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   192c8:	7ee3      	ldrb	r3, [r4, #27]
   192ca:	f013 0f08 	tst.w	r3, #8
   192ce:	d105      	bne.n	192dc <os_dev_initialize+0x20>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   192d0:	2000      	movs	r0, #0
   192d2:	e003      	b.n	192dc <os_dev_initialize+0x20>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   192d4:	7ee3      	ldrb	r3, [r4, #27]
   192d6:	f043 0301 	orr.w	r3, r3, #1
   192da:	76e3      	strb	r3, [r4, #27]
err:
    return rc;
}
   192dc:	bd10      	pop	{r4, pc}

000192de <os_dev_init>:
{
   192de:	b410      	push	{r4}
   192e0:	4604      	mov	r4, r0
    dev->od_name = name;
   192e2:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   192e4:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   192e6:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   192e8:	2000      	movs	r0, #0
   192ea:	76e0      	strb	r0, [r4, #27]
    dev->od_open_ref = 0;
   192ec:	76a0      	strb	r0, [r4, #26]
    dev->od_init = od_init;
   192ee:	9b01      	ldr	r3, [sp, #4]
   192f0:	6123      	str	r3, [r4, #16]
    dev->od_init_arg = arg;
   192f2:	9b02      	ldr	r3, [sp, #8]
   192f4:	6163      	str	r3, [r4, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   192f6:	6020      	str	r0, [r4, #0]
   192f8:	6060      	str	r0, [r4, #4]
   192fa:	60a0      	str	r0, [r4, #8]
   192fc:	60e0      	str	r0, [r4, #12]
}
   192fe:	bc10      	pop	{r4}
   19300:	4770      	bx	lr
	...

00019304 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   19304:	b530      	push	{r4, r5, lr}
   19306:	b083      	sub	sp, #12
   19308:	4604      	mov	r4, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   1930a:	9d07      	ldr	r5, [sp, #28]
   1930c:	9501      	str	r5, [sp, #4]
   1930e:	9d06      	ldr	r5, [sp, #24]
   19310:	9500      	str	r5, [sp, #0]
   19312:	f7ff ffe4 	bl	192de <os_dev_init>
    if (rc != 0) {
   19316:	b108      	cbz	r0, 1931c <os_dev_create+0x18>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   19318:	b003      	add	sp, #12
   1931a:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   1931c:	4620      	mov	r0, r4
   1931e:	f7ff ff9d 	bl	1925c <os_dev_add>
    if (rc != 0) {
   19322:	2800      	cmp	r0, #0
   19324:	d1f8      	bne.n	19318 <os_dev_create+0x14>
    if (g_os_started) {
   19326:	4b04      	ldr	r3, [pc, #16]	; (19338 <os_dev_create+0x34>)
   19328:	681b      	ldr	r3, [r3, #0]
   1932a:	2b00      	cmp	r3, #0
   1932c:	d0f4      	beq.n	19318 <os_dev_create+0x14>
        rc = os_dev_initialize(dev);
   1932e:	4620      	mov	r0, r4
   19330:	f7ff ffc4 	bl	192bc <os_dev_initialize>
    return (rc);
   19334:	e7f0      	b.n	19318 <os_dev_create+0x14>
   19336:	bf00      	nop
   19338:	100040d0 	.word	0x100040d0

0001933c <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   1933c:	b538      	push	{r3, r4, r5, lr}
   1933e:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   19340:	4b08      	ldr	r3, [pc, #32]	; (19364 <os_dev_initialize_all+0x28>)
   19342:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   19344:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   19346:	e000      	b.n	1934a <os_dev_initialize_all+0xe>
   19348:	6a24      	ldr	r4, [r4, #32]
   1934a:	b144      	cbz	r4, 1935e <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   1934c:	7e23      	ldrb	r3, [r4, #24]
   1934e:	42ab      	cmp	r3, r5
   19350:	d1fa      	bne.n	19348 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   19352:	4620      	mov	r0, r4
   19354:	f7ff ffb2 	bl	192bc <os_dev_initialize>
            if (rc) {
   19358:	4602      	mov	r2, r0
   1935a:	2800      	cmp	r0, #0
   1935c:	d0f4      	beq.n	19348 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   1935e:	4610      	mov	r0, r2
   19360:	bd38      	pop	{r3, r4, r5, pc}
   19362:	bf00      	nop
   19364:	100040dc 	.word	0x100040dc

00019368 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   19368:	b538      	push	{r3, r4, r5, lr}
   1936a:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1936c:	4b05      	ldr	r3, [pc, #20]	; (19384 <os_dev_lookup+0x1c>)
   1936e:	681c      	ldr	r4, [r3, #0]
   19370:	b134      	cbz	r4, 19380 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   19372:	4629      	mov	r1, r5
   19374:	69e0      	ldr	r0, [r4, #28]
   19376:	f001 fcd8 	bl	1ad2a <strcmp>
   1937a:	b108      	cbz	r0, 19380 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1937c:	6a24      	ldr	r4, [r4, #32]
   1937e:	e7f7      	b.n	19370 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   19380:	4620      	mov	r0, r4
   19382:	bd38      	pop	{r3, r4, r5, pc}
   19384:	100040dc 	.word	0x100040dc

00019388 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   19388:	b570      	push	{r4, r5, r6, lr}
   1938a:	460d      	mov	r5, r1
   1938c:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   1938e:	f7ff ffeb 	bl	19368 <os_dev_lookup>
    if (dev == NULL) {
   19392:	4604      	mov	r4, r0
   19394:	b1a0      	cbz	r0, 193c0 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   19396:	7ec3      	ldrb	r3, [r0, #27]
   19398:	f013 0f01 	tst.w	r3, #1
   1939c:	d012      	beq.n	193c4 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   1939e:	6803      	ldr	r3, [r0, #0]
   193a0:	b11b      	cbz	r3, 193aa <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   193a2:	4632      	mov	r2, r6
   193a4:	4629      	mov	r1, r5
   193a6:	4798      	blx	r3
        if (rc != 0) {
   193a8:	b970      	cbnz	r0, 193c8 <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   193aa:	f001 fa8f 	bl	1a8cc <os_arch_save_sr>
    ++dev->od_open_ref;
   193ae:	7ea3      	ldrb	r3, [r4, #26]
   193b0:	3301      	adds	r3, #1
   193b2:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   193b4:	7ee3      	ldrb	r3, [r4, #27]
   193b6:	f043 0302 	orr.w	r3, r3, #2
   193ba:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   193bc:	f001 fa8c 	bl	1a8d8 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   193c0:	4620      	mov	r0, r4
   193c2:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   193c4:	2400      	movs	r4, #0
   193c6:	e7fb      	b.n	193c0 <os_dev_open+0x38>
    return (NULL);
   193c8:	2400      	movs	r4, #0
   193ca:	e7f9      	b.n	193c0 <os_dev_open+0x38>

000193cc <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   193cc:	4b02      	ldr	r3, [pc, #8]	; (193d8 <os_dev_reset+0xc>)
   193ce:	2200      	movs	r2, #0
   193d0:	601a      	str	r2, [r3, #0]
   193d2:	605b      	str	r3, [r3, #4]
}
   193d4:	4770      	bx	lr
   193d6:	bf00      	nop
   193d8:	100040dc 	.word	0x100040dc

000193dc <os_dev_walk>:

void
os_dev_walk(int (*walk_func)(struct os_dev *, void *), void *arg)
{
   193dc:	b570      	push	{r4, r5, r6, lr}
   193de:	4606      	mov	r6, r0
   193e0:	460d      	mov	r5, r1
    struct os_dev *dev;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   193e2:	4b05      	ldr	r3, [pc, #20]	; (193f8 <os_dev_walk+0x1c>)
   193e4:	681c      	ldr	r4, [r3, #0]
   193e6:	b12c      	cbz	r4, 193f4 <os_dev_walk+0x18>
        if (walk_func(dev, arg)) {
   193e8:	4629      	mov	r1, r5
   193ea:	4620      	mov	r0, r4
   193ec:	47b0      	blx	r6
   193ee:	b908      	cbnz	r0, 193f4 <os_dev_walk+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   193f0:	6a24      	ldr	r4, [r4, #32]
   193f2:	e7f8      	b.n	193e6 <os_dev_walk+0xa>
            break;
        }
    }
}
   193f4:	bd70      	pop	{r4, r5, r6, pc}
   193f6:	bf00      	nop
   193f8:	100040dc 	.word	0x100040dc

000193fc <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   193fc:	2200      	movs	r2, #0
   193fe:	6002      	str	r2, [r0, #0]
   19400:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   19402:	4603      	mov	r3, r0
   19404:	f843 2f08 	str.w	r2, [r3, #8]!
   19408:	60c3      	str	r3, [r0, #12]
}
   1940a:	4770      	bx	lr

0001940c <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   1940c:	68c0      	ldr	r0, [r0, #12]
}
   1940e:	3800      	subs	r0, #0
   19410:	bf18      	it	ne
   19412:	2001      	movne	r0, #1
   19414:	4770      	bx	lr

00019416 <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   19416:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   19418:	b1f0      	cbz	r0, 19458 <os_eventq_put+0x42>
   1941a:	460c      	mov	r4, r1
   1941c:	4606      	mov	r6, r0
   1941e:	f7ff fff5 	bl	1940c <os_eventq_inited>
   19422:	b1c8      	cbz	r0, 19458 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   19424:	f001 fa52 	bl	1a8cc <os_arch_save_sr>
   19428:	4605      	mov	r5, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   1942a:	7823      	ldrb	r3, [r4, #0]
   1942c:	b9f3      	cbnz	r3, 1946c <os_eventq_put+0x56>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   1942e:	2301      	movs	r3, #1
   19430:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   19432:	2300      	movs	r3, #0
   19434:	60e3      	str	r3, [r4, #12]
   19436:	68f3      	ldr	r3, [r6, #12]
   19438:	601c      	str	r4, [r3, #0]
   1943a:	340c      	adds	r4, #12
   1943c:	60f4      	str	r4, [r6, #12]

    resched = 0;
    if (evq->evq_task) {
   1943e:	6870      	ldr	r0, [r6, #4]
   19440:	b1d8      	cbz	r0, 1947a <os_eventq_put+0x64>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   19442:	7b03      	ldrb	r3, [r0, #12]
   19444:	2b02      	cmp	r3, #2
   19446:	d014      	beq.n	19472 <os_eventq_put+0x5c>
    resched = 0;
   19448:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   1944a:	2300      	movs	r3, #0
   1944c:	6073      	str	r3, [r6, #4]
    }

    OS_EXIT_CRITICAL(sr);
   1944e:	4628      	mov	r0, r5
   19450:	f001 fa42 	bl	1a8d8 <os_arch_restore_sr>

    if (resched) {
   19454:	b99c      	cbnz	r4, 1947e <os_eventq_put+0x68>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   19456:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   19458:	f7fb f954 	bl	14704 <hal_debugger_connected>
   1945c:	b100      	cbz	r0, 19460 <os_eventq_put+0x4a>
   1945e:	be01      	bkpt	0x0001
   19460:	2300      	movs	r3, #0
   19462:	461a      	mov	r2, r3
   19464:	4619      	mov	r1, r3
   19466:	4618      	mov	r0, r3
   19468:	f7ff fc5c 	bl	18d24 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   1946c:	f001 fa34 	bl	1a8d8 <os_arch_restore_sr>
        return;
   19470:	e7f1      	b.n	19456 <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   19472:	f000 ff25 	bl	1a2c0 <os_sched_wakeup>
            resched = 1;
   19476:	2401      	movs	r4, #1
   19478:	e7e7      	b.n	1944a <os_eventq_put+0x34>
    resched = 0;
   1947a:	2400      	movs	r4, #0
   1947c:	e7e7      	b.n	1944e <os_eventq_put+0x38>
        os_sched(NULL);
   1947e:	2000      	movs	r0, #0
   19480:	f000 ffaa 	bl	1a3d8 <os_sched>
   19484:	e7e7      	b.n	19456 <os_eventq_put+0x40>

00019486 <os_eventq_get_no_wait>:

struct os_event *
os_eventq_get_no_wait(struct os_eventq *evq)
{
   19486:	4603      	mov	r3, r0
    struct os_event *ev;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)evq);

    ev = STAILQ_FIRST(&evq->evq_list);
   19488:	6880      	ldr	r0, [r0, #8]
    if (ev) {
   1948a:	b120      	cbz	r0, 19496 <os_eventq_get_no_wait+0x10>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1948c:	68c2      	ldr	r2, [r0, #12]
   1948e:	609a      	str	r2, [r3, #8]
   19490:	b112      	cbz	r2, 19498 <os_eventq_get_no_wait+0x12>
        ev->ev_queued = 0;
   19492:	2300      	movs	r3, #0
   19494:	7003      	strb	r3, [r0, #0]
    }

    os_trace_api_ret_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)ev);

    return ev;
}
   19496:	4770      	bx	lr
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   19498:	f103 0208 	add.w	r2, r3, #8
   1949c:	60da      	str	r2, [r3, #12]
   1949e:	e7f8      	b.n	19492 <os_eventq_get_no_wait+0xc>

000194a0 <os_eventq_get>:

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
   194a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   194a2:	4606      	mov	r6, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
   194a4:	f000 feb8 	bl	1a218 <os_sched_get_current_task>
   194a8:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
   194aa:	6833      	ldr	r3, [r6, #0]
   194ac:	4283      	cmp	r3, r0
   194ae:	d001      	beq.n	194b4 <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
   194b0:	b9db      	cbnz	r3, 194ea <os_eventq_get+0x4a>
            evq->evq_owner = t;
   194b2:	6030      	str	r0, [r6, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
   194b4:	f001 fa0a 	bl	1a8cc <os_arch_save_sr>
   194b8:	4605      	mov	r5, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
   194ba:	68b7      	ldr	r7, [r6, #8]
    if (ev) {
   194bc:	b9ff      	cbnz	r7, 194fe <os_eventq_get+0x5e>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
   194be:	6074      	str	r4, [r6, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
   194c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   194c4:	4620      	mov	r0, r4
   194c6:	f000 feb3 	bl	1a230 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
   194ca:	7b63      	ldrb	r3, [r4, #13]
   194cc:	f043 0308 	orr.w	r3, r3, #8
   194d0:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
   194d2:	4628      	mov	r0, r5
   194d4:	f001 fa00 	bl	1a8d8 <os_arch_restore_sr>

        os_sched(NULL);
   194d8:	2000      	movs	r0, #0
   194da:	f000 ff7d 	bl	1a3d8 <os_sched>

        OS_ENTER_CRITICAL(sr);
   194de:	f001 f9f5 	bl	1a8cc <os_arch_save_sr>
   194e2:	4605      	mov	r5, r0
        evq->evq_task = NULL;
   194e4:	2300      	movs	r3, #0
   194e6:	6073      	str	r3, [r6, #4]
        goto pull_one;
   194e8:	e7e7      	b.n	194ba <os_eventq_get+0x1a>
            assert(0);
   194ea:	f7fb f90b 	bl	14704 <hal_debugger_connected>
   194ee:	b100      	cbz	r0, 194f2 <os_eventq_get+0x52>
   194f0:	be01      	bkpt	0x0001
   194f2:	2300      	movs	r3, #0
   194f4:	461a      	mov	r2, r3
   194f6:	4619      	mov	r1, r3
   194f8:	4618      	mov	r0, r3
   194fa:	f7ff fc13 	bl	18d24 <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   194fe:	68fb      	ldr	r3, [r7, #12]
   19500:	60b3      	str	r3, [r6, #8]
   19502:	b153      	cbz	r3, 1951a <os_eventq_get+0x7a>
        ev->ev_queued = 0;
   19504:	2300      	movs	r3, #0
   19506:	703b      	strb	r3, [r7, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
   19508:	7b63      	ldrb	r3, [r4, #13]
   1950a:	f023 0308 	bic.w	r3, r3, #8
   1950e:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
   19510:	4628      	mov	r0, r5
   19512:	f001 f9e1 	bl	1a8d8 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
   19516:	4638      	mov	r0, r7
   19518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1951a:	f106 0308 	add.w	r3, r6, #8
   1951e:	60f3      	str	r3, [r6, #12]
   19520:	e7f0      	b.n	19504 <os_eventq_get+0x64>

00019522 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
   19522:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
   19524:	f7ff ffbc 	bl	194a0 <os_eventq_get>
    assert(ev->ev_cb != NULL);
   19528:	6843      	ldr	r3, [r0, #4]
   1952a:	b10b      	cbz	r3, 19530 <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
   1952c:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
   1952e:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
   19530:	f7fb f8e8 	bl	14704 <hal_debugger_connected>
   19534:	b100      	cbz	r0, 19538 <os_eventq_run+0x16>
   19536:	be01      	bkpt	0x0001
   19538:	2300      	movs	r3, #0
   1953a:	461a      	mov	r2, r3
   1953c:	4619      	mov	r1, r3
   1953e:	4618      	mov	r0, r3
   19540:	f7ff fbf0 	bl	18d24 <__assert_func>

00019544 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
   19544:	b538      	push	{r3, r4, r5, lr}
   19546:	4605      	mov	r5, r0
   19548:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   1954a:	f001 f9bf 	bl	1a8cc <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
   1954e:	7823      	ldrb	r3, [r4, #0]
   19550:	b14b      	cbz	r3, 19566 <os_eventq_remove+0x22>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   19552:	68ab      	ldr	r3, [r5, #8]
   19554:	42a3      	cmp	r3, r4
   19556:	d00b      	beq.n	19570 <os_eventq_remove+0x2c>
   19558:	461a      	mov	r2, r3
   1955a:	68db      	ldr	r3, [r3, #12]
   1955c:	42a3      	cmp	r3, r4
   1955e:	d1fb      	bne.n	19558 <os_eventq_remove+0x14>
   19560:	68db      	ldr	r3, [r3, #12]
   19562:	60d3      	str	r3, [r2, #12]
   19564:	b163      	cbz	r3, 19580 <os_eventq_remove+0x3c>
    }
    ev->ev_queued = 0;
   19566:	2300      	movs	r3, #0
   19568:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
   1956a:	f001 f9b5 	bl	1a8d8 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
   1956e:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   19570:	68db      	ldr	r3, [r3, #12]
   19572:	60ab      	str	r3, [r5, #8]
   19574:	2b00      	cmp	r3, #0
   19576:	d1f6      	bne.n	19566 <os_eventq_remove+0x22>
   19578:	f105 0308 	add.w	r3, r5, #8
   1957c:	60eb      	str	r3, [r5, #12]
   1957e:	e7f2      	b.n	19566 <os_eventq_remove+0x22>
   19580:	320c      	adds	r2, #12
   19582:	60ea      	str	r2, [r5, #12]
   19584:	e7ef      	b.n	19566 <os_eventq_remove+0x22>
	...

00019588 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   19588:	4800      	ldr	r0, [pc, #0]	; (1958c <os_eventq_dflt_get+0x4>)
   1958a:	4770      	bx	lr
   1958c:	100040e4 	.word	0x100040e4

00019590 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   19590:	3a10      	subs	r2, #16
   19592:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   19594:	6041      	str	r1, [r0, #4]

    return (0);
}
   19596:	2000      	movs	r0, #0
   19598:	4770      	bx	lr

0001959a <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
   1959a:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
   1959c:	8803      	ldrh	r3, [r0, #0]
   1959e:	428b      	cmp	r3, r1
   195a0:	d310      	bcc.n	195c4 <os_mbuf_get+0x2a>
   195a2:	4604      	mov	r4, r0
   195a4:	460d      	mov	r5, r1
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
   195a6:	6840      	ldr	r0, [r0, #4]
   195a8:	f000 fc63 	bl	19e72 <os_memblock_get>
    if (!om) {
   195ac:	b148      	cbz	r0, 195c2 <os_mbuf_get+0x28>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
   195ae:	2300      	movs	r3, #0
   195b0:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
   195b2:	7103      	strb	r3, [r0, #4]
    om->om_pkthdr_len = 0;
   195b4:	7143      	strb	r3, [r0, #5]
    om->om_len = 0;
   195b6:	80c3      	strh	r3, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   195b8:	f100 0110 	add.w	r1, r0, #16
   195bc:	440d      	add	r5, r1
   195be:	6005      	str	r5, [r0, #0]
    om->om_omp = omp;
   195c0:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
   195c2:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   195c4:	2000      	movs	r0, #0
    return om;
   195c6:	e7fc      	b.n	195c2 <os_mbuf_get+0x28>

000195c8 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   195c8:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
   195ca:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   195ce:	8803      	ldrh	r3, [r0, #0]
   195d0:	42ab      	cmp	r3, r5
   195d2:	d30e      	bcc.n	195f2 <os_mbuf_get_pkthdr+0x2a>
   195d4:	2dff      	cmp	r5, #255	; 0xff
   195d6:	d80e      	bhi.n	195f6 <os_mbuf_get_pkthdr+0x2e>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
   195d8:	2100      	movs	r1, #0
   195da:	f7ff ffde 	bl	1959a <os_mbuf_get>
    if (om) {
   195de:	b138      	cbz	r0, 195f0 <os_mbuf_get_pkthdr+0x28>
        om->om_pkthdr_len = pkthdr_len;
   195e0:	7145      	strb	r5, [r0, #5]
        om->om_data += pkthdr_len;
   195e2:	6803      	ldr	r3, [r0, #0]
   195e4:	441d      	add	r5, r3
   195e6:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   195e8:	2300      	movs	r3, #0
   195ea:	8203      	strh	r3, [r0, #16]
        pkthdr->omp_flags = 0;
   195ec:	8243      	strh	r3, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   195ee:	6143      	str	r3, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
   195f0:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   195f2:	2000      	movs	r0, #0
   195f4:	e7fc      	b.n	195f0 <os_mbuf_get_pkthdr+0x28>
   195f6:	2000      	movs	r0, #0
    return om;
   195f8:	e7fa      	b.n	195f0 <os_mbuf_get_pkthdr+0x28>

000195fa <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
   195fa:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
   195fc:	6883      	ldr	r3, [r0, #8]
   195fe:	b123      	cbz	r3, 1960a <os_mbuf_free+0x10>
   19600:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
   19602:	6858      	ldr	r0, [r3, #4]
   19604:	f000 fc5d 	bl	19ec2 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
   19608:	bd08      	pop	{r3, pc}
    rc = 0;
   1960a:	2000      	movs	r0, #0
    return (rc);
   1960c:	e7fc      	b.n	19608 <os_mbuf_free+0xe>

0001960e <os_mbuf_free_chain>:
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
   1960e:	b158      	cbz	r0, 19628 <os_mbuf_free_chain+0x1a>
{
   19610:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   19612:	68c4      	ldr	r4, [r0, #12]

        rc = os_mbuf_free(om);
   19614:	f7ff fff1 	bl	195fa <os_mbuf_free>
        if (rc != 0) {
   19618:	4603      	mov	r3, r0
   1961a:	b918      	cbnz	r0, 19624 <os_mbuf_free_chain+0x16>
            goto done;
        }

        om = next;
   1961c:	4620      	mov	r0, r4
    while (om != NULL) {
   1961e:	2c00      	cmp	r4, #0
   19620:	d1f7      	bne.n	19612 <os_mbuf_free_chain+0x4>
    }

    rc = 0;
   19622:	2300      	movs	r3, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
   19624:	4618      	mov	r0, r3
   19626:	bd10      	pop	{r4, pc}
    rc = 0;
   19628:	2300      	movs	r3, #0
}
   1962a:	4618      	mov	r0, r3
   1962c:	4770      	bx	lr

0001962e <os_mbuf_append>:
    return len;
}

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
   1962e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   19632:	2800      	cmp	r0, #0
   19634:	d04b      	beq.n	196ce <os_mbuf_append+0xa0>
   19636:	460f      	mov	r7, r1
   19638:	4691      	mov	r9, r2
   1963a:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   1963c:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   19640:	4603      	mov	r3, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   19642:	461e      	mov	r6, r3
   19644:	68db      	ldr	r3, [r3, #12]
   19646:	2b00      	cmp	r3, #0
   19648:	d1fb      	bne.n	19642 <os_mbuf_append+0x14>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
   1964a:	464d      	mov	r5, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
   1964c:	68b3      	ldr	r3, [r6, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1964e:	f106 0410 	add.w	r4, r6, #16
   19652:	881b      	ldrh	r3, [r3, #0]
   19654:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   19656:	6830      	ldr	r0, [r6, #0]
   19658:	88f3      	ldrh	r3, [r6, #6]
   1965a:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1965c:	1a24      	subs	r4, r4, r0
   1965e:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   19660:	b164      	cbz	r4, 1967c <os_mbuf_append+0x4e>
        if (space > remainder) {
   19662:	454c      	cmp	r4, r9
   19664:	dd00      	ble.n	19668 <os_mbuf_append+0x3a>
            space = remainder;
   19666:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   19668:	4622      	mov	r2, r4
   1966a:	4639      	mov	r1, r7
   1966c:	f001 fb02 	bl	1ac74 <memcpy>

        last->om_len += space;
   19670:	88f3      	ldrh	r3, [r6, #6]
   19672:	4423      	add	r3, r4
   19674:	80f3      	strh	r3, [r6, #6]
        data += space;
   19676:	4427      	add	r7, r4
        remainder -= space;
   19678:	eba9 0504 	sub.w	r5, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   1967c:	2d00      	cmp	r5, #0
   1967e:	dd16      	ble.n	196ae <os_mbuf_append+0x80>
        new = os_mbuf_get(omp, 0);
   19680:	2100      	movs	r1, #0
   19682:	4640      	mov	r0, r8
   19684:	f7ff ff89 	bl	1959a <os_mbuf_get>
        if (!new) {
   19688:	4604      	mov	r4, r0
   1968a:	b180      	cbz	r0, 196ae <os_mbuf_append+0x80>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
   1968c:	f8b8 2000 	ldrh.w	r2, [r8]
   19690:	42aa      	cmp	r2, r5
   19692:	bfa8      	it	ge
   19694:	462a      	movge	r2, r5
   19696:	b292      	uxth	r2, r2
   19698:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
   1969a:	4639      	mov	r1, r7
   1969c:	6800      	ldr	r0, [r0, #0]
   1969e:	f001 fae9 	bl	1ac74 <memcpy>
        data += new->om_len;
   196a2:	88e3      	ldrh	r3, [r4, #6]
   196a4:	441f      	add	r7, r3
        remainder -= new->om_len;
   196a6:	1aed      	subs	r5, r5, r3
        SLIST_NEXT(last, om_next) = new;
   196a8:	60f4      	str	r4, [r6, #12]
        last = new;
   196aa:	4626      	mov	r6, r4
   196ac:	e7e6      	b.n	1967c <os_mbuf_append+0x4e>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
   196ae:	f89a 3005 	ldrb.w	r3, [sl, #5]
   196b2:	2b07      	cmp	r3, #7
   196b4:	d907      	bls.n	196c6 <os_mbuf_append+0x98>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
   196b6:	eba9 0905 	sub.w	r9, r9, r5
   196ba:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   196be:	fa13 f989 	uxtah	r9, r3, r9
   196c2:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   196c6:	b925      	cbnz	r5, 196d2 <os_mbuf_append+0xa4>


    return (0);
err:
    return (rc);
}
   196c8:	4628      	mov	r0, r5
   196ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   196ce:	2502      	movs	r5, #2
   196d0:	e7fa      	b.n	196c8 <os_mbuf_append+0x9a>
        rc = OS_ENOMEM;
   196d2:	2501      	movs	r5, #1
   196d4:	e7f8      	b.n	196c8 <os_mbuf_append+0x9a>

000196d6 <os_mbuf_off>:

    /* Cast away const. */
    cur = (struct os_mbuf *)om;

    while (1) {
        if (cur == NULL) {
   196d6:	b170      	cbz	r0, 196f6 <os_mbuf_off+0x20>
{
   196d8:	b410      	push	{r4}
   196da:	e002      	b.n	196e2 <os_mbuf_off+0xc>

            *out_off = off;
            return cur;
        }

        off -= cur->om_len;
   196dc:	1ac9      	subs	r1, r1, r3
        cur = next;
   196de:	4620      	mov	r0, r4
        if (cur == NULL) {
   196e0:	b13c      	cbz	r4, 196f2 <os_mbuf_off+0x1c>
        next = SLIST_NEXT(cur, om_next);
   196e2:	68c4      	ldr	r4, [r0, #12]
        if (cur->om_len > off ||
   196e4:	88c3      	ldrh	r3, [r0, #6]
   196e6:	428b      	cmp	r3, r1
   196e8:	dc02      	bgt.n	196f0 <os_mbuf_off+0x1a>
   196ea:	d1f7      	bne.n	196dc <os_mbuf_off+0x6>
            (cur->om_len == off && next == NULL)) {
   196ec:	2c00      	cmp	r4, #0
   196ee:	d1f5      	bne.n	196dc <os_mbuf_off+0x6>
            *out_off = off;
   196f0:	8011      	strh	r1, [r2, #0]
    }
}
   196f2:	bc10      	pop	{r4}
   196f4:	4770      	bx	lr
   196f6:	4770      	bx	lr

000196f8 <os_mbuf_appendfrom>:
{
   196f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   196fa:	b083      	sub	sp, #12
   196fc:	4607      	mov	r7, r0
   196fe:	4608      	mov	r0, r1
   19700:	4611      	mov	r1, r2
   19702:	461e      	mov	r6, r3
    src_cur_om = os_mbuf_off(src, src_off, &src_cur_off);
   19704:	f10d 0206 	add.w	r2, sp, #6
   19708:	f7ff ffe5 	bl	196d6 <os_mbuf_off>
   1970c:	4605      	mov	r5, r0
    while (len > 0) {
   1970e:	e005      	b.n	1971c <os_mbuf_appendfrom+0x24>
        len -= chunk_sz;
   19710:	1b34      	subs	r4, r6, r4
   19712:	b2a6      	uxth	r6, r4
        src_cur_om = SLIST_NEXT(src_cur_om, om_next);
   19714:	68ed      	ldr	r5, [r5, #12]
        src_cur_off = 0;
   19716:	2300      	movs	r3, #0
   19718:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (len > 0) {
   1971c:	b196      	cbz	r6, 19744 <os_mbuf_appendfrom+0x4c>
        if (src_cur_om == NULL) {
   1971e:	b1ad      	cbz	r5, 1974c <os_mbuf_appendfrom+0x54>
        chunk_sz = min(len, src_cur_om->om_len - src_cur_off);
   19720:	88ec      	ldrh	r4, [r5, #6]
   19722:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   19726:	1ae4      	subs	r4, r4, r3
   19728:	42b4      	cmp	r4, r6
   1972a:	bfa8      	it	ge
   1972c:	4634      	movge	r4, r6
   1972e:	b2a4      	uxth	r4, r4
        rc = os_mbuf_append(dst, src_cur_om->om_data + src_cur_off, chunk_sz);
   19730:	6829      	ldr	r1, [r5, #0]
   19732:	4622      	mov	r2, r4
   19734:	4419      	add	r1, r3
   19736:	4638      	mov	r0, r7
   19738:	f7ff ff79 	bl	1962e <os_mbuf_append>
        if (rc != 0) {
   1973c:	4603      	mov	r3, r0
   1973e:	2800      	cmp	r0, #0
   19740:	d0e6      	beq.n	19710 <os_mbuf_appendfrom+0x18>
   19742:	e000      	b.n	19746 <os_mbuf_appendfrom+0x4e>
    return 0;
   19744:	2300      	movs	r3, #0
}
   19746:	4618      	mov	r0, r3
   19748:	b003      	add	sp, #12
   1974a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return OS_EINVAL;
   1974c:	2302      	movs	r3, #2
   1974e:	e7fa      	b.n	19746 <os_mbuf_appendfrom+0x4e>

00019750 <os_mbuf_copydata>:

int
os_mbuf_copydata(const struct os_mbuf *m, int off, int len, void *dst)
{
   19750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19752:	4604      	mov	r4, r0
   19754:	461f      	mov	r7, r3
    unsigned int count;
    uint8_t *udst;

    if (!len) {
   19756:	4616      	mov	r6, r2
   19758:	b91a      	cbnz	r2, 19762 <os_mbuf_copydata+0x12>
        return 0;
   1975a:	4610      	mov	r0, r2
   1975c:	e01e      	b.n	1979c <os_mbuf_copydata+0x4c>
            return (-1);
        }

        if (off < m->om_len)
            break;
        off -= m->om_len;
   1975e:	1a89      	subs	r1, r1, r2
        m = SLIST_NEXT(m, om_next);
   19760:	68e4      	ldr	r4, [r4, #12]
    while (off > 0) {
   19762:	2900      	cmp	r1, #0
   19764:	dd13      	ble.n	1978e <os_mbuf_copydata+0x3e>
        if (!m) {
   19766:	b1ec      	cbz	r4, 197a4 <os_mbuf_copydata+0x54>
        if (off < m->om_len)
   19768:	88e2      	ldrh	r2, [r4, #6]
   1976a:	428a      	cmp	r2, r1
   1976c:	ddf7      	ble.n	1975e <os_mbuf_copydata+0xe>
   1976e:	e00e      	b.n	1978e <os_mbuf_copydata+0x3e>
    }
    while (len > 0 && m != NULL) {
        count = min(m->om_len - off, len);
   19770:	88e5      	ldrh	r5, [r4, #6]
   19772:	1a6d      	subs	r5, r5, r1
   19774:	42b5      	cmp	r5, r6
   19776:	bfa8      	it	ge
   19778:	4635      	movge	r5, r6
        memcpy(udst, m->om_data + off, count);
   1977a:	6823      	ldr	r3, [r4, #0]
   1977c:	462a      	mov	r2, r5
   1977e:	4419      	add	r1, r3
   19780:	4638      	mov	r0, r7
   19782:	f001 fa77 	bl	1ac74 <memcpy>
        len -= count;
   19786:	1b76      	subs	r6, r6, r5
        udst += count;
   19788:	442f      	add	r7, r5
        off = 0;
        m = SLIST_NEXT(m, om_next);
   1978a:	68e4      	ldr	r4, [r4, #12]
        off = 0;
   1978c:	2100      	movs	r1, #0
    while (len > 0 && m != NULL) {
   1978e:	2e00      	cmp	r6, #0
   19790:	dd01      	ble.n	19796 <os_mbuf_copydata+0x46>
   19792:	2c00      	cmp	r4, #0
   19794:	d1ec      	bne.n	19770 <os_mbuf_copydata+0x20>
    }

    return (len > 0 ? -1 : 0);
   19796:	2e00      	cmp	r6, #0
   19798:	dc01      	bgt.n	1979e <os_mbuf_copydata+0x4e>
   1979a:	2000      	movs	r0, #0
}
   1979c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (len > 0 ? -1 : 0);
   1979e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   197a2:	e7fb      	b.n	1979c <os_mbuf_copydata+0x4c>
            return (-1);
   197a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   197a8:	e7f8      	b.n	1979c <os_mbuf_copydata+0x4c>

000197aa <os_mbuf_adj>:
{
    int len = req_len;
    struct os_mbuf *m;
    int count;

    if ((m = mp) == NULL)
   197aa:	2800      	cmp	r0, #0
   197ac:	d04d      	beq.n	1984a <os_mbuf_adj+0xa0>
{
   197ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   197b0:	4604      	mov	r4, r0
        return;
    if (len >= 0) {
   197b2:	2900      	cmp	r1, #0
   197b4:	db1b      	blt.n	197ee <os_mbuf_adj+0x44>
    if ((m = mp) == NULL)
   197b6:	4603      	mov	r3, r0
    int len = req_len;
   197b8:	460a      	mov	r2, r1
   197ba:	e005      	b.n	197c8 <os_mbuf_adj+0x1e>
            if (m->om_len <= len) {
                len -= m->om_len;
                m->om_len = 0;
                m = SLIST_NEXT(m, om_next);
            } else {
                m->om_len -= len;
   197bc:	1a80      	subs	r0, r0, r2
   197be:	80d8      	strh	r0, [r3, #6]
                m->om_data += len;
   197c0:	6818      	ldr	r0, [r3, #0]
   197c2:	4402      	add	r2, r0
   197c4:	601a      	str	r2, [r3, #0]
                len = 0;
   197c6:	2200      	movs	r2, #0
        while (m != NULL && len > 0) {
   197c8:	b14b      	cbz	r3, 197de <os_mbuf_adj+0x34>
   197ca:	2a00      	cmp	r2, #0
   197cc:	dd07      	ble.n	197de <os_mbuf_adj+0x34>
            if (m->om_len <= len) {
   197ce:	88d8      	ldrh	r0, [r3, #6]
   197d0:	4290      	cmp	r0, r2
   197d2:	dcf3      	bgt.n	197bc <os_mbuf_adj+0x12>
                len -= m->om_len;
   197d4:	1a12      	subs	r2, r2, r0
                m->om_len = 0;
   197d6:	2000      	movs	r0, #0
   197d8:	80d8      	strh	r0, [r3, #6]
                m = SLIST_NEXT(m, om_next);
   197da:	68db      	ldr	r3, [r3, #12]
   197dc:	e7f4      	b.n	197c8 <os_mbuf_adj+0x1e>
            }
        }
        if (OS_MBUF_IS_PKTHDR(mp))
   197de:	7963      	ldrb	r3, [r4, #5]
   197e0:	2b07      	cmp	r3, #7
   197e2:	d903      	bls.n	197ec <os_mbuf_adj+0x42>
            OS_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
   197e4:	1a52      	subs	r2, r2, r1
   197e6:	8a23      	ldrh	r3, [r4, #16]
   197e8:	441a      	add	r2, r3
   197ea:	8222      	strh	r2, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
   197ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        len = -len;
   197ee:	424f      	negs	r7, r1
    if ((m = mp) == NULL)
   197f0:	4603      	mov	r3, r0
        count = 0;
   197f2:	2200      	movs	r2, #0
            count += m->om_len;
   197f4:	88d8      	ldrh	r0, [r3, #6]
   197f6:	4402      	add	r2, r0
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
   197f8:	461e      	mov	r6, r3
   197fa:	68db      	ldr	r3, [r3, #12]
   197fc:	2b00      	cmp	r3, #0
   197fe:	d1f9      	bne.n	197f4 <os_mbuf_adj+0x4a>
        if (m->om_len >= len) {
   19800:	42b8      	cmp	r0, r7
   19802:	da0d      	bge.n	19820 <os_mbuf_adj+0x76>
        if (count < 0)
   19804:	188a      	adds	r2, r1, r2
   19806:	d415      	bmi.n	19834 <os_mbuf_adj+0x8a>
        if (OS_MBUF_IS_PKTHDR(m))
   19808:	7963      	ldrb	r3, [r4, #5]
   1980a:	2b07      	cmp	r3, #7
   1980c:	d900      	bls.n	19810 <os_mbuf_adj+0x66>
            OS_MBUF_PKTHDR(m)->omp_len = count;
   1980e:	8222      	strh	r2, [r4, #16]
        for (; m; m = SLIST_NEXT(m, om_next)) {
   19810:	2c00      	cmp	r4, #0
   19812:	d0eb      	beq.n	197ec <os_mbuf_adj+0x42>
            if (m->om_len >= count) {
   19814:	88e3      	ldrh	r3, [r4, #6]
   19816:	4293      	cmp	r3, r2
   19818:	da0e      	bge.n	19838 <os_mbuf_adj+0x8e>
            count -= m->om_len;
   1981a:	1ad2      	subs	r2, r2, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
   1981c:	68e4      	ldr	r4, [r4, #12]
   1981e:	e7f7      	b.n	19810 <os_mbuf_adj+0x66>
            m->om_len -= len;
   19820:	b2bf      	uxth	r7, r7
   19822:	1bc0      	subs	r0, r0, r7
   19824:	80f0      	strh	r0, [r6, #6]
            if (OS_MBUF_IS_PKTHDR(mp))
   19826:	7963      	ldrb	r3, [r4, #5]
   19828:	2b07      	cmp	r3, #7
   1982a:	d9df      	bls.n	197ec <os_mbuf_adj+0x42>
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
   1982c:	8a23      	ldrh	r3, [r4, #16]
   1982e:	1bdf      	subs	r7, r3, r7
   19830:	8227      	strh	r7, [r4, #16]
            return;
   19832:	e7db      	b.n	197ec <os_mbuf_adj+0x42>
            count = 0;
   19834:	2200      	movs	r2, #0
   19836:	e7e7      	b.n	19808 <os_mbuf_adj+0x5e>
                m->om_len = count;
   19838:	80e2      	strh	r2, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
   1983a:	68e0      	ldr	r0, [r4, #12]
   1983c:	2800      	cmp	r0, #0
   1983e:	d0d5      	beq.n	197ec <os_mbuf_adj+0x42>
                    os_mbuf_free_chain(SLIST_NEXT(m, om_next));
   19840:	f7ff fee5 	bl	1960e <os_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
   19844:	2300      	movs	r3, #0
   19846:	60e3      	str	r3, [r4, #12]
   19848:	e7d0      	b.n	197ec <os_mbuf_adj+0x42>
   1984a:	4770      	bx	lr

0001984c <os_mbuf_cmpf>:

int
os_mbuf_cmpf(const struct os_mbuf *om, int off, const void *data, int len)
{
   1984c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19850:	b082      	sub	sp, #8
    uint16_t chunk_sz;
    uint16_t data_off;
    uint16_t om_off;
    int rc;

    if (len <= 0) {
   19852:	1e1e      	subs	r6, r3, #0
   19854:	dd2d      	ble.n	198b2 <os_mbuf_cmpf+0x66>
   19856:	4617      	mov	r7, r2
        return 0;
    }

    data_off = 0;
    om = os_mbuf_off(om, off, &om_off);
   19858:	f10d 0206 	add.w	r2, sp, #6
   1985c:	f7ff ff3b 	bl	196d6 <os_mbuf_off>
   19860:	4604      	mov	r4, r0
    data_off = 0;
   19862:	f04f 0800 	mov.w	r8, #0
   19866:	e009      	b.n	1987c <os_mbuf_cmpf+0x30>
            if (rc != 0) {
                return rc;
            }
        }

        data_off += chunk_sz;
   19868:	4445      	add	r5, r8
   1986a:	fa1f f885 	uxth.w	r8, r5
        if (data_off == len) {
   1986e:	45b0      	cmp	r8, r6
   19870:	d027      	beq.n	198c2 <os_mbuf_cmpf+0x76>
            return 0;
        }

        om = SLIST_NEXT(om, om_next);
   19872:	68e4      	ldr	r4, [r4, #12]
        om_off = 0;
   19874:	2300      	movs	r3, #0
   19876:	f8ad 3006 	strh.w	r3, [sp, #6]

        if (om == NULL) {
   1987a:	b1bc      	cbz	r4, 198ac <os_mbuf_cmpf+0x60>
        if (om == NULL) {
   1987c:	b1f4      	cbz	r4, 198bc <os_mbuf_cmpf+0x70>
        chunk_sz = min(om->om_len - om_off, len - data_off);
   1987e:	eba6 0208 	sub.w	r2, r6, r8
   19882:	88e3      	ldrh	r3, [r4, #6]
   19884:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   19888:	1a1b      	subs	r3, r3, r0
   1988a:	429a      	cmp	r2, r3
   1988c:	bfa8      	it	ge
   1988e:	461a      	movge	r2, r3
   19890:	b295      	uxth	r5, r2
        if (chunk_sz > 0) {
   19892:	2d00      	cmp	r5, #0
   19894:	d0e8      	beq.n	19868 <os_mbuf_cmpf+0x1c>
            rc = memcmp(om->om_data + om_off, data + data_off, chunk_sz);
   19896:	6823      	ldr	r3, [r4, #0]
   19898:	462a      	mov	r2, r5
   1989a:	eb07 0108 	add.w	r1, r7, r8
   1989e:	4418      	add	r0, r3
   198a0:	f001 f9c4 	bl	1ac2c <memcmp>
            if (rc != 0) {
   198a4:	4603      	mov	r3, r0
   198a6:	2800      	cmp	r0, #0
   198a8:	d0de      	beq.n	19868 <os_mbuf_cmpf+0x1c>
   198aa:	e003      	b.n	198b4 <os_mbuf_cmpf+0x68>
            return INT_MAX;
   198ac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   198b0:	e000      	b.n	198b4 <os_mbuf_cmpf+0x68>
        return 0;
   198b2:	2300      	movs	r3, #0
        }
    }
}
   198b4:	4618      	mov	r0, r3
   198b6:	b002      	add	sp, #8
   198b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return INT_MAX;
   198bc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   198c0:	e7f8      	b.n	198b4 <os_mbuf_cmpf+0x68>
            return 0;
   198c2:	2300      	movs	r3, #0
   198c4:	e7f6      	b.n	198b4 <os_mbuf_cmpf+0x68>

000198c6 <os_mbuf_cmpm>:

int
os_mbuf_cmpm(const struct os_mbuf *om1, uint16_t offset1,
             const struct os_mbuf *om2, uint16_t offset2,
             uint16_t len)
{
   198c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   198ca:	b083      	sub	sp, #12
   198cc:	4615      	mov	r5, r2
   198ce:	461f      	mov	r7, r3
   198d0:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
    uint16_t om2_left;
    uint16_t om1_off;
    uint16_t om2_off;
    int rc;

    om1_off = 0;
   198d4:	2300      	movs	r3, #0
   198d6:	f8ad 3006 	strh.w	r3, [sp, #6]
    om2_off = 0;
   198da:	f8ad 3004 	strh.w	r3, [sp, #4]

    cur1 = os_mbuf_off(om1, offset1, &om1_off);
   198de:	f10d 0206 	add.w	r2, sp, #6
   198e2:	f7ff fef8 	bl	196d6 <os_mbuf_off>
   198e6:	4604      	mov	r4, r0
    cur2 = os_mbuf_off(om2, offset2, &om2_off);
   198e8:	aa01      	add	r2, sp, #4
   198ea:	4639      	mov	r1, r7
   198ec:	4628      	mov	r0, r5
   198ee:	f7ff fef2 	bl	196d6 <os_mbuf_off>
   198f2:	4605      	mov	r5, r0

    bytes_remaining = len;
   198f4:	e039      	b.n	1996a <os_mbuf_cmpm+0xa4>
        if (bytes_remaining == 0) {
            return 0;
        }

        while (cur1 != NULL && om1_off >= cur1->om_len) {
            cur1 = SLIST_NEXT(cur1, om_next);
   198f6:	68e4      	ldr	r4, [r4, #12]
            om1_off = 0;
   198f8:	2300      	movs	r3, #0
   198fa:	f8ad 3006 	strh.w	r3, [sp, #6]
        while (cur1 != NULL && om1_off >= cur1->om_len) {
   198fe:	b14c      	cbz	r4, 19914 <os_mbuf_cmpm+0x4e>
   19900:	88e2      	ldrh	r2, [r4, #6]
   19902:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   19906:	429a      	cmp	r2, r3
   19908:	d9f5      	bls.n	198f6 <os_mbuf_cmpm+0x30>
   1990a:	e003      	b.n	19914 <os_mbuf_cmpm+0x4e>
        }
        while (cur2 != NULL && om2_off >= cur2->om_len) {
            cur2 = SLIST_NEXT(cur2, om_next);
   1990c:	68ed      	ldr	r5, [r5, #12]
            om2_off = 0;
   1990e:	2300      	movs	r3, #0
   19910:	f8ad 3004 	strh.w	r3, [sp, #4]
        while (cur2 != NULL && om2_off >= cur2->om_len) {
   19914:	b125      	cbz	r5, 19920 <os_mbuf_cmpm+0x5a>
   19916:	88ea      	ldrh	r2, [r5, #6]
   19918:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1991c:	429a      	cmp	r2, r3
   1991e:	d9f5      	bls.n	1990c <os_mbuf_cmpm+0x46>
        }

        if (cur1 == NULL || cur2 == NULL) {
   19920:	b354      	cbz	r4, 19978 <os_mbuf_cmpm+0xb2>
   19922:	b365      	cbz	r5, 1997e <os_mbuf_cmpm+0xb8>
            return INT_MAX;
        }

        om1_left = cur1->om_len - om1_off;
   19924:	88e7      	ldrh	r7, [r4, #6]
   19926:	f8bd 8006 	ldrh.w	r8, [sp, #6]
   1992a:	eba7 0708 	sub.w	r7, r7, r8
   1992e:	b2bf      	uxth	r7, r7
        om2_left = cur2->om_len - om2_off;
   19930:	88eb      	ldrh	r3, [r5, #6]
   19932:	f8bd 9004 	ldrh.w	r9, [sp, #4]
   19936:	eba3 0309 	sub.w	r3, r3, r9
   1993a:	b29b      	uxth	r3, r3
        chunk_sz = min(min(om1_left, om2_left), bytes_remaining);
   1993c:	429f      	cmp	r7, r3
   1993e:	bf28      	it	cs
   19940:	461f      	movcs	r7, r3
   19942:	42b7      	cmp	r7, r6
   19944:	bf28      	it	cs
   19946:	4637      	movcs	r7, r6

        rc = memcmp(cur1->om_data + om1_off, cur2->om_data + om2_off,
   19948:	6820      	ldr	r0, [r4, #0]
   1994a:	6829      	ldr	r1, [r5, #0]
   1994c:	463a      	mov	r2, r7
   1994e:	4449      	add	r1, r9
   19950:	4440      	add	r0, r8
   19952:	f001 f96b 	bl	1ac2c <memcmp>
                    chunk_sz);
        if (rc != 0) {
   19956:	4603      	mov	r3, r0
   19958:	b950      	cbnz	r0, 19970 <os_mbuf_cmpm+0xaa>
            return rc;
        }

        om1_off += chunk_sz;
   1995a:	44b8      	add	r8, r7
   1995c:	f8ad 8006 	strh.w	r8, [sp, #6]
        om2_off += chunk_sz;
   19960:	44b9      	add	r9, r7
   19962:	f8ad 9004 	strh.w	r9, [sp, #4]
        bytes_remaining -= chunk_sz;
   19966:	1bf6      	subs	r6, r6, r7
   19968:	b2b6      	uxth	r6, r6
        if (bytes_remaining == 0) {
   1996a:	2e00      	cmp	r6, #0
   1996c:	d1c7      	bne.n	198fe <os_mbuf_cmpm+0x38>
            return 0;
   1996e:	2300      	movs	r3, #0
    }
}
   19970:	4618      	mov	r0, r3
   19972:	b003      	add	sp, #12
   19974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return INT_MAX;
   19978:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1997c:	e7f8      	b.n	19970 <os_mbuf_cmpm+0xaa>
   1997e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   19982:	e7f5      	b.n	19970 <os_mbuf_cmpm+0xaa>

00019984 <os_mbuf_prepend>:

struct os_mbuf *
os_mbuf_prepend(struct os_mbuf *om, int len)
{
   19984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19986:	4604      	mov	r4, r0
   19988:	460e      	mov	r6, r1
   1998a:	e019      	b.n	199c0 <os_mbuf_prepend+0x3c>
    startoff = 0;
   1998c:	2000      	movs	r0, #0
   1998e:	e01b      	b.n	199c8 <os_mbuf_prepend+0x44>
        /* The current head didn't have enough space; allocate a new head. */
        if (OS_MBUF_IS_PKTHDR(om)) {
            p = os_mbuf_get_pkthdr(om->om_omp,
                om->om_pkthdr_len - sizeof (struct os_mbuf_pkthdr));
        } else {
            p = os_mbuf_get(om->om_omp, 0);
   19990:	2100      	movs	r1, #0
   19992:	68a0      	ldr	r0, [r4, #8]
   19994:	f7ff fe01 	bl	1959a <os_mbuf_get>
   19998:	4605      	mov	r5, r0
        }
        if (p == NULL) {
   1999a:	2d00      	cmp	r5, #0
   1999c:	d033      	beq.n	19a06 <os_mbuf_prepend+0x82>
            os_mbuf_free_chain(om);
            om = NULL;
            break;
        }

        if (OS_MBUF_IS_PKTHDR(om)) {
   1999e:	7963      	ldrb	r3, [r4, #5]
   199a0:	2b07      	cmp	r3, #7
   199a2:	d836      	bhi.n	19a12 <os_mbuf_prepend+0x8e>
    omp = om->om_omp;
   199a4:	68aa      	ldr	r2, [r5, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   199a6:	f105 0310 	add.w	r3, r5, #16
   199aa:	8812      	ldrh	r2, [r2, #0]
   199ac:	4413      	add	r3, r2
      (om->om_data + om->om_len);
   199ae:	6829      	ldr	r1, [r5, #0]
   199b0:	88ea      	ldrh	r2, [r5, #6]
   199b2:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   199b4:	1a9b      	subs	r3, r3, r2
        }

        /* Move the new head's data pointer to the end so that data can be
         * prepended.
         */
        p->om_data += OS_MBUF_TRAILINGSPACE(p);
   199b6:	fa11 f383 	uxtah	r3, r1, r3
   199ba:	602b      	str	r3, [r5, #0]

        SLIST_NEXT(p, om_next) = om;
   199bc:	60ec      	str	r4, [r5, #12]
        om = p;
   199be:	462c      	mov	r4, r5
    if (OS_MBUF_IS_PKTHDR(om)) {
   199c0:	7961      	ldrb	r1, [r4, #5]
   199c2:	2907      	cmp	r1, #7
   199c4:	d9e2      	bls.n	1998c <os_mbuf_prepend+0x8>
        startoff = om->om_pkthdr_len;
   199c6:	b288      	uxth	r0, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   199c8:	4623      	mov	r3, r4
   199ca:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   199ce:	4403      	add	r3, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   199d0:	1ad3      	subs	r3, r2, r3
    return (leadingspace);
   199d2:	b29b      	uxth	r3, r3
        leading = min(len, OS_MBUF_LEADINGSPACE(om));
   199d4:	429e      	cmp	r6, r3
   199d6:	da00      	bge.n	199da <os_mbuf_prepend+0x56>
   199d8:	4633      	mov	r3, r6
        om->om_data -= leading;
   199da:	1ad2      	subs	r2, r2, r3
   199dc:	6022      	str	r2, [r4, #0]
        om->om_len += leading;
   199de:	b298      	uxth	r0, r3
   199e0:	88e2      	ldrh	r2, [r4, #6]
   199e2:	4402      	add	r2, r0
   199e4:	80e2      	strh	r2, [r4, #6]
        if (OS_MBUF_IS_PKTHDR(om)) {
   199e6:	2907      	cmp	r1, #7
   199e8:	d902      	bls.n	199f0 <os_mbuf_prepend+0x6c>
            OS_MBUF_PKTHDR(om)->omp_len += leading;
   199ea:	8a22      	ldrh	r2, [r4, #16]
   199ec:	4410      	add	r0, r2
   199ee:	8220      	strh	r0, [r4, #16]
        if (len == 0) {
   199f0:	1af6      	subs	r6, r6, r3
   199f2:	d00c      	beq.n	19a0e <os_mbuf_prepend+0x8a>
        if (OS_MBUF_IS_PKTHDR(om)) {
   199f4:	2907      	cmp	r1, #7
   199f6:	d9cb      	bls.n	19990 <os_mbuf_prepend+0xc>
            p = os_mbuf_get_pkthdr(om->om_omp,
   199f8:	3908      	subs	r1, #8
   199fa:	b2c9      	uxtb	r1, r1
   199fc:	68a0      	ldr	r0, [r4, #8]
   199fe:	f7ff fde3 	bl	195c8 <os_mbuf_get_pkthdr>
   19a02:	4605      	mov	r5, r0
   19a04:	e7c9      	b.n	1999a <os_mbuf_prepend+0x16>
            os_mbuf_free_chain(om);
   19a06:	4620      	mov	r0, r4
   19a08:	f7ff fe01 	bl	1960e <os_mbuf_free_chain>
            om = NULL;
   19a0c:	462c      	mov	r4, r5
    }

    return om;
}
   19a0e:	4620      	mov	r0, r4
   19a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(new_buf->om_len == 0);
   19a12:	88eb      	ldrh	r3, [r5, #6]
   19a14:	b973      	cbnz	r3, 19a34 <os_mbuf_prepend+0xb0>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   19a16:	f105 0710 	add.w	r7, r5, #16
   19a1a:	7962      	ldrb	r2, [r4, #5]
   19a1c:	f104 0110 	add.w	r1, r4, #16
   19a20:	4638      	mov	r0, r7
   19a22:	f001 f927 	bl	1ac74 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   19a26:	7963      	ldrb	r3, [r4, #5]
   19a28:	716b      	strb	r3, [r5, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   19a2a:	441f      	add	r7, r3
   19a2c:	602f      	str	r7, [r5, #0]
            om->om_pkthdr_len = 0;
   19a2e:	2300      	movs	r3, #0
   19a30:	7163      	strb	r3, [r4, #5]
   19a32:	e7b7      	b.n	199a4 <os_mbuf_prepend+0x20>
    assert(new_buf->om_len == 0);
   19a34:	f7fa fe66 	bl	14704 <hal_debugger_connected>
   19a38:	b100      	cbz	r0, 19a3c <os_mbuf_prepend+0xb8>
   19a3a:	be01      	bkpt	0x0001
   19a3c:	2300      	movs	r3, #0
   19a3e:	461a      	mov	r2, r3
   19a40:	4619      	mov	r1, r3
   19a42:	4618      	mov	r0, r3
   19a44:	f7ff f96e 	bl	18d24 <__assert_func>

00019a48 <os_mbuf_copyinto>:
    return om;
}

int
os_mbuf_copyinto(struct os_mbuf *om, int off, const void *src, int len)
{
   19a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19a4c:	b083      	sub	sp, #12
   19a4e:	4681      	mov	r9, r0
   19a50:	4688      	mov	r8, r1
   19a52:	4617      	mov	r7, r2
   19a54:	461e      	mov	r6, r3
    uint16_t cur_off;
    int copylen;
    int rc;

    /* Find the mbuf,offset pair for the start of the destination. */
    cur = os_mbuf_off(om, off, &cur_off);
   19a56:	f10d 0206 	add.w	r2, sp, #6
   19a5a:	f7ff fe3c 	bl	196d6 <os_mbuf_off>
    if (cur == NULL) {
   19a5e:	4605      	mov	r5, r0
   19a60:	b948      	cbnz	r0, 19a76 <os_mbuf_copyinto+0x2e>
        return -1;
   19a62:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   19a66:	e02d      	b.n	19ac4 <os_mbuf_copyinto+0x7c>
            len -= copylen;

            copylen = 0;
        }

        if (len == 0) {
   19a68:	b366      	cbz	r6, 19ac4 <os_mbuf_copyinto+0x7c>
            /* All the source data fit in the existing mbuf chain. */
            return 0;
        }

        next = SLIST_NEXT(cur, om_next);
   19a6a:	68eb      	ldr	r3, [r5, #12]
        if (next == NULL) {
   19a6c:	b1ab      	cbz	r3, 19a9a <os_mbuf_copyinto+0x52>
            break;
        }

        cur = next;
        cur_off = 0;
   19a6e:	2200      	movs	r2, #0
   19a70:	f8ad 2006 	strh.w	r2, [sp, #6]
        cur = next;
   19a74:	461d      	mov	r5, r3
        copylen = min(cur->om_len - cur_off, len);
   19a76:	88ec      	ldrh	r4, [r5, #6]
   19a78:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   19a7c:	1ae4      	subs	r4, r4, r3
   19a7e:	42b4      	cmp	r4, r6
   19a80:	bfa8      	it	ge
   19a82:	4634      	movge	r4, r6
        if (copylen > 0) {
   19a84:	2c00      	cmp	r4, #0
   19a86:	ddef      	ble.n	19a68 <os_mbuf_copyinto+0x20>
            memcpy(cur->om_data + cur_off, sptr, copylen);
   19a88:	6828      	ldr	r0, [r5, #0]
   19a8a:	4622      	mov	r2, r4
   19a8c:	4639      	mov	r1, r7
   19a8e:	4418      	add	r0, r3
   19a90:	f001 f8f0 	bl	1ac74 <memcpy>
            sptr += copylen;
   19a94:	4427      	add	r7, r4
            len -= copylen;
   19a96:	1b36      	subs	r6, r6, r4
            copylen = 0;
   19a98:	e7e6      	b.n	19a68 <os_mbuf_copyinto+0x20>
    }

    /* Append the remaining data to the end of the chain. */
    rc = os_mbuf_append(cur, sptr, len);
   19a9a:	b2b2      	uxth	r2, r6
   19a9c:	4639      	mov	r1, r7
   19a9e:	4628      	mov	r0, r5
   19aa0:	f7ff fdc5 	bl	1962e <os_mbuf_append>
    if (rc != 0) {
   19aa4:	b968      	cbnz	r0, 19ac2 <os_mbuf_copyinto+0x7a>
        return rc;
    }

    /* Fix up the packet header, if one is present. */
    if (OS_MBUF_IS_PKTHDR(om)) {
   19aa6:	f899 2005 	ldrb.w	r2, [r9, #5]
   19aaa:	2a07      	cmp	r2, #7
   19aac:	d90e      	bls.n	19acc <os_mbuf_copyinto+0x84>
        OS_MBUF_PKTHDR(om)->omp_len =
            max(OS_MBUF_PKTHDR(om)->omp_len, off + len);
   19aae:	4446      	add	r6, r8
   19ab0:	f8b9 8010 	ldrh.w	r8, [r9, #16]
   19ab4:	4546      	cmp	r6, r8
   19ab6:	bfb8      	it	lt
   19ab8:	4646      	movlt	r6, r8
        OS_MBUF_PKTHDR(om)->omp_len =
   19aba:	f8a9 6010 	strh.w	r6, [r9, #16]
    }

    return 0;
   19abe:	4606      	mov	r6, r0
   19ac0:	e000      	b.n	19ac4 <os_mbuf_copyinto+0x7c>
        return rc;
   19ac2:	4606      	mov	r6, r0
}
   19ac4:	4630      	mov	r0, r6
   19ac6:	b003      	add	sp, #12
   19ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
   19acc:	4606      	mov	r6, r0
   19ace:	e7f9      	b.n	19ac4 <os_mbuf_copyinto+0x7c>

00019ad0 <os_mbuf_concat>:
{
    struct os_mbuf *next;
    struct os_mbuf *cur;

    /* Point 'cur' to the last buffer in the first chain. */
    cur = first;
   19ad0:	4603      	mov	r3, r0
    while (1) {
        next = SLIST_NEXT(cur, om_next);
   19ad2:	461a      	mov	r2, r3
   19ad4:	68db      	ldr	r3, [r3, #12]
        if (next == NULL) {
   19ad6:	2b00      	cmp	r3, #0
   19ad8:	d1fb      	bne.n	19ad2 <os_mbuf_concat+0x2>

        cur = next;
    }

    /* Attach the second chain to the end of the first. */
    SLIST_NEXT(cur, om_next) = second;
   19ada:	60d1      	str	r1, [r2, #12]

    /* If the first chain has a packet header, calculate the length of the
     * second chain and add it to the header length.
     */
    if (OS_MBUF_IS_PKTHDR(first)) {
   19adc:	7943      	ldrb	r3, [r0, #5]
   19ade:	2b07      	cmp	r3, #7
   19ae0:	d906      	bls.n	19af0 <os_mbuf_concat+0x20>
        if (OS_MBUF_IS_PKTHDR(second)) {
   19ae2:	794b      	ldrb	r3, [r1, #5]
   19ae4:	2b07      	cmp	r3, #7
   19ae6:	d906      	bls.n	19af6 <os_mbuf_concat+0x26>
            OS_MBUF_PKTHDR(first)->omp_len += OS_MBUF_PKTHDR(second)->omp_len;
   19ae8:	8a0b      	ldrh	r3, [r1, #16]
   19aea:	8a02      	ldrh	r2, [r0, #16]
   19aec:	4413      	add	r3, r2
   19aee:	8203      	strh	r3, [r0, #16]
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
            }
        }
    }

    second->om_pkthdr_len = 0;
   19af0:	2300      	movs	r3, #0
   19af2:	714b      	strb	r3, [r1, #5]
   19af4:	4770      	bx	lr
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
   19af6:	460b      	mov	r3, r1
   19af8:	2900      	cmp	r1, #0
   19afa:	d0f9      	beq.n	19af0 <os_mbuf_concat+0x20>
{
   19afc:	b410      	push	{r4}
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
   19afe:	88da      	ldrh	r2, [r3, #6]
   19b00:	8a04      	ldrh	r4, [r0, #16]
   19b02:	4422      	add	r2, r4
   19b04:	8202      	strh	r2, [r0, #16]
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
   19b06:	68db      	ldr	r3, [r3, #12]
   19b08:	2b00      	cmp	r3, #0
   19b0a:	d1f8      	bne.n	19afe <os_mbuf_concat+0x2e>
    second->om_pkthdr_len = 0;
   19b0c:	2300      	movs	r3, #0
   19b0e:	714b      	strb	r3, [r1, #5]
}
   19b10:	bc10      	pop	{r4}
   19b12:	4770      	bx	lr

00019b14 <os_mbuf_extend>:

void *
os_mbuf_extend(struct os_mbuf *om, uint16_t len)
{
   19b14:	b570      	push	{r4, r5, r6, lr}
   19b16:	4606      	mov	r6, r0
    struct os_mbuf *newm;
    struct os_mbuf *last;
    void *data;

    if (len > om->om_omp->omp_databuf_len) {
   19b18:	6880      	ldr	r0, [r0, #8]
   19b1a:	8803      	ldrh	r3, [r0, #0]
   19b1c:	428b      	cmp	r3, r1
   19b1e:	d325      	bcc.n	19b6c <os_mbuf_extend+0x58>
   19b20:	460d      	mov	r5, r1
        return NULL;
    }

    /* Scroll to last mbuf in the chain */
    last = om;
   19b22:	4633      	mov	r3, r6
    while (SLIST_NEXT(last, om_next) != NULL) {
   19b24:	461c      	mov	r4, r3
   19b26:	68db      	ldr	r3, [r3, #12]
   19b28:	2b00      	cmp	r3, #0
   19b2a:	d1fb      	bne.n	19b24 <os_mbuf_extend+0x10>
    omp = om->om_omp;
   19b2c:	68a2      	ldr	r2, [r4, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   19b2e:	f104 0310 	add.w	r3, r4, #16
   19b32:	8812      	ldrh	r2, [r2, #0]
   19b34:	4413      	add	r3, r2
      (om->om_data + om->om_len);
   19b36:	6822      	ldr	r2, [r4, #0]
   19b38:	88e1      	ldrh	r1, [r4, #6]
   19b3a:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   19b3c:	1a9b      	subs	r3, r3, r2
   19b3e:	b29b      	uxth	r3, r3
        last = SLIST_NEXT(last, om_next);
    }

    if (OS_MBUF_TRAILINGSPACE(last) < len) {
   19b40:	429d      	cmp	r5, r3
   19b42:	d80b      	bhi.n	19b5c <os_mbuf_extend+0x48>

        SLIST_NEXT(last, om_next) = newm;
        last = newm;
    }

    data = last->om_data + last->om_len;
   19b44:	6820      	ldr	r0, [r4, #0]
   19b46:	88e3      	ldrh	r3, [r4, #6]
   19b48:	4418      	add	r0, r3
    last->om_len += len;
   19b4a:	442b      	add	r3, r5
   19b4c:	80e3      	strh	r3, [r4, #6]

    if (OS_MBUF_IS_PKTHDR(om)) {
   19b4e:	7973      	ldrb	r3, [r6, #5]
   19b50:	2b07      	cmp	r3, #7
   19b52:	d902      	bls.n	19b5a <os_mbuf_extend+0x46>
        OS_MBUF_PKTHDR(om)->omp_len += len;
   19b54:	8a33      	ldrh	r3, [r6, #16]
   19b56:	441d      	add	r5, r3
   19b58:	8235      	strh	r5, [r6, #16]
    }

    return data;
}
   19b5a:	bd70      	pop	{r4, r5, r6, pc}
        newm = os_mbuf_get(om->om_omp, 0);
   19b5c:	2100      	movs	r1, #0
   19b5e:	f7ff fd1c 	bl	1959a <os_mbuf_get>
        if (newm == NULL) {
   19b62:	2800      	cmp	r0, #0
   19b64:	d0f9      	beq.n	19b5a <os_mbuf_extend+0x46>
        SLIST_NEXT(last, om_next) = newm;
   19b66:	60e0      	str	r0, [r4, #12]
        last = newm;
   19b68:	4604      	mov	r4, r0
   19b6a:	e7eb      	b.n	19b44 <os_mbuf_extend+0x30>
        return NULL;
   19b6c:	2000      	movs	r0, #0
   19b6e:	e7f4      	b.n	19b5a <os_mbuf_extend+0x46>

00019b70 <os_mbuf_pullup>:


struct os_mbuf *
os_mbuf_pullup(struct os_mbuf *om, uint16_t len)
{
   19b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b74:	4604      	mov	r4, r0
    struct os_mbuf *next;
    struct os_mbuf *om2;
    int count;
    int space;

    omp = om->om_omp;
   19b76:	6880      	ldr	r0, [r0, #8]
    /*
     * If first mbuf has no cluster, and has room for len bytes
     * without shifting current data, pullup into it,
     * otherwise allocate a new mbuf to prepend to the chain.
     */
    if (om->om_len >= len) {
   19b78:	88e2      	ldrh	r2, [r4, #6]
   19b7a:	428a      	cmp	r2, r1
   19b7c:	d27a      	bcs.n	19c74 <os_mbuf_pullup+0x104>
   19b7e:	460d      	mov	r5, r1
   19b80:	f104 0310 	add.w	r3, r4, #16
   19b84:	8806      	ldrh	r6, [r0, #0]
   19b86:	4433      	add	r3, r6
      (om->om_data + om->om_len);
   19b88:	6821      	ldr	r1, [r4, #0]
   19b8a:	4411      	add	r1, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   19b8c:	1a5b      	subs	r3, r3, r1
        return (om);
    }
    if (om->om_len + OS_MBUF_TRAILINGSPACE(om) >= len &&
   19b8e:	fa12 f383 	uxtah	r3, r2, r3
   19b92:	4629      	mov	r1, r5
   19b94:	42ab      	cmp	r3, r5
   19b96:	db12      	blt.n	19bbe <os_mbuf_pullup+0x4e>
        SLIST_NEXT(om, om_next)) {
   19b98:	68e3      	ldr	r3, [r4, #12]
    if (om->om_len + OS_MBUF_TRAILINGSPACE(om) >= len &&
   19b9a:	b183      	cbz	r3, 19bbe <os_mbuf_pullup+0x4e>
        om2 = om;
        om = SLIST_NEXT(om, om_next);
        len -= om2->om_len;
   19b9c:	1aad      	subs	r5, r5, r2
   19b9e:	b2ad      	uxth	r5, r5
        om2 = om;
   19ba0:	4627      	mov	r7, r4
        om = SLIST_NEXT(om, om_next);
   19ba2:	461c      	mov	r4, r3
    omp = om->om_omp;
   19ba4:	68bb      	ldr	r3, [r7, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   19ba6:	f107 0810 	add.w	r8, r7, #16
   19baa:	881b      	ldrh	r3, [r3, #0]
   19bac:	4498      	add	r8, r3
      (om->om_data + om->om_len);
   19bae:	683b      	ldr	r3, [r7, #0]
   19bb0:	88fa      	ldrh	r2, [r7, #6]
   19bb2:	4413      	add	r3, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   19bb4:	eba8 0803 	sub.w	r8, r8, r3
   19bb8:	fa1f f888 	uxth.w	r8, r8
   19bbc:	e02c      	b.n	19c18 <os_mbuf_pullup+0xa8>
    } else {
        if (len > omp->omp_databuf_len - om->om_pkthdr_len) {
   19bbe:	7963      	ldrb	r3, [r4, #5]
   19bc0:	1af6      	subs	r6, r6, r3
   19bc2:	42b1      	cmp	r1, r6
   19bc4:	dc51      	bgt.n	19c6a <os_mbuf_pullup+0xfa>
            goto bad;
        }

        om2 = os_mbuf_get(omp, 0);
   19bc6:	2100      	movs	r1, #0
   19bc8:	f7ff fce7 	bl	1959a <os_mbuf_get>
        if (om2 == NULL) {
   19bcc:	4607      	mov	r7, r0
   19bce:	2800      	cmp	r0, #0
   19bd0:	d04b      	beq.n	19c6a <os_mbuf_pullup+0xfa>
            goto bad;
        }

        if (OS_MBUF_IS_PKTHDR(om)) {
   19bd2:	7963      	ldrb	r3, [r4, #5]
   19bd4:	2b07      	cmp	r3, #7
   19bd6:	d9e5      	bls.n	19ba4 <os_mbuf_pullup+0x34>
    assert(new_buf->om_len == 0);
   19bd8:	88c3      	ldrh	r3, [r0, #6]
   19bda:	b963      	cbnz	r3, 19bf6 <os_mbuf_pullup+0x86>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   19bdc:	f100 0610 	add.w	r6, r0, #16
   19be0:	7962      	ldrb	r2, [r4, #5]
   19be2:	f104 0110 	add.w	r1, r4, #16
   19be6:	4630      	mov	r0, r6
   19be8:	f001 f844 	bl	1ac74 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   19bec:	7963      	ldrb	r3, [r4, #5]
   19bee:	717b      	strb	r3, [r7, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   19bf0:	441e      	add	r6, r3
   19bf2:	603e      	str	r6, [r7, #0]
}
   19bf4:	e7d6      	b.n	19ba4 <os_mbuf_pullup+0x34>
    assert(new_buf->om_len == 0);
   19bf6:	f7fa fd85 	bl	14704 <hal_debugger_connected>
   19bfa:	b100      	cbz	r0, 19bfe <os_mbuf_pullup+0x8e>
   19bfc:	be01      	bkpt	0x0001
   19bfe:	2300      	movs	r3, #0
   19c00:	461a      	mov	r2, r3
   19c02:	4619      	mov	r1, r3
   19c04:	4618      	mov	r0, r3
   19c06:	f7ff f88d 	bl	18d24 <__assert_func>
        om->om_len -= count;
        space -= count;
        if (om->om_len) {
            om->om_data += count;
        } else {
            next = SLIST_NEXT(om, om_next);
   19c0a:	68e6      	ldr	r6, [r4, #12]
            os_mbuf_free(om);
   19c0c:	4620      	mov	r0, r4
   19c0e:	f7ff fcf4 	bl	195fa <os_mbuf_free>
            om = next;
   19c12:	4634      	mov	r4, r6
        }
    } while (len > 0 && om);
   19c14:	b30d      	cbz	r5, 19c5a <os_mbuf_pullup+0xea>
   19c16:	b304      	cbz	r4, 19c5a <os_mbuf_pullup+0xea>
        count = min(min(len, space), om->om_len);
   19c18:	88e6      	ldrh	r6, [r4, #6]
   19c1a:	462b      	mov	r3, r5
   19c1c:	4545      	cmp	r5, r8
   19c1e:	bfa8      	it	ge
   19c20:	4643      	movge	r3, r8
   19c22:	429e      	cmp	r6, r3
   19c24:	bfa8      	it	ge
   19c26:	461e      	movge	r6, r3
        memcpy(om2->om_data + om2->om_len, om->om_data, count);
   19c28:	6838      	ldr	r0, [r7, #0]
   19c2a:	88fb      	ldrh	r3, [r7, #6]
   19c2c:	4632      	mov	r2, r6
   19c2e:	6821      	ldr	r1, [r4, #0]
   19c30:	4418      	add	r0, r3
   19c32:	f001 f81f 	bl	1ac74 <memcpy>
        len -= count;
   19c36:	b2b2      	uxth	r2, r6
   19c38:	1aad      	subs	r5, r5, r2
   19c3a:	b2ad      	uxth	r5, r5
        om2->om_len += count;
   19c3c:	88fb      	ldrh	r3, [r7, #6]
   19c3e:	4413      	add	r3, r2
   19c40:	80fb      	strh	r3, [r7, #6]
        om->om_len -= count;
   19c42:	88e3      	ldrh	r3, [r4, #6]
   19c44:	1a9b      	subs	r3, r3, r2
   19c46:	b29b      	uxth	r3, r3
   19c48:	80e3      	strh	r3, [r4, #6]
        space -= count;
   19c4a:	eba8 0806 	sub.w	r8, r8, r6
        if (om->om_len) {
   19c4e:	2b00      	cmp	r3, #0
   19c50:	d0db      	beq.n	19c0a <os_mbuf_pullup+0x9a>
            om->om_data += count;
   19c52:	6823      	ldr	r3, [r4, #0]
   19c54:	441e      	add	r6, r3
   19c56:	6026      	str	r6, [r4, #0]
   19c58:	e7dc      	b.n	19c14 <os_mbuf_pullup+0xa4>
    if (len > 0) {
   19c5a:	b91d      	cbnz	r5, 19c64 <os_mbuf_pullup+0xf4>
        os_mbuf_free(om2);
        goto bad;
    }
    SLIST_NEXT(om2, om_next) = om;
   19c5c:	60fc      	str	r4, [r7, #12]
    return (om2);
bad:
    os_mbuf_free_chain(om);
    return (NULL);
}
   19c5e:	4638      	mov	r0, r7
   19c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        os_mbuf_free(om2);
   19c64:	4638      	mov	r0, r7
   19c66:	f7ff fcc8 	bl	195fa <os_mbuf_free>
    os_mbuf_free_chain(om);
   19c6a:	4620      	mov	r0, r4
   19c6c:	f7ff fccf 	bl	1960e <os_mbuf_free_chain>
    return (NULL);
   19c70:	2700      	movs	r7, #0
   19c72:	e7f4      	b.n	19c5e <os_mbuf_pullup+0xee>
        return (om);
   19c74:	4627      	mov	r7, r4
   19c76:	e7f2      	b.n	19c5e <os_mbuf_pullup+0xee>

00019c78 <os_mbuf_prepend_pullup>:
{
   19c78:	b510      	push	{r4, lr}
   19c7a:	460c      	mov	r4, r1
    om = os_mbuf_prepend(om, len);
   19c7c:	f7ff fe82 	bl	19984 <os_mbuf_prepend>
    if (om == NULL) {
   19c80:	b110      	cbz	r0, 19c88 <os_mbuf_prepend_pullup+0x10>
    om = os_mbuf_pullup(om, len);
   19c82:	4621      	mov	r1, r4
   19c84:	f7ff ff74 	bl	19b70 <os_mbuf_pullup>
}
   19c88:	bd10      	pop	{r4, pc}

00019c8a <os_mbuf_trim_front>:

struct os_mbuf *
os_mbuf_trim_front(struct os_mbuf *om)
{
   19c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19c8c:	4606      	mov	r6, r0
    struct os_mbuf *next;
    struct os_mbuf *cur;

    /* Abort early if there is nothing to trim. */
    if (om->om_len != 0) {
   19c8e:	88c7      	ldrh	r7, [r0, #6]
   19c90:	b9cf      	cbnz	r7, 19cc6 <os_mbuf_trim_front+0x3c>
    }

    /* Starting with the second mbuf in the chain, continue removing and
     * freeing mbufs until an non-empty one is encountered.
     */
    cur = SLIST_NEXT(om, om_next);
   19c92:	68c4      	ldr	r4, [r0, #12]
    while (cur != NULL && cur->om_len == 0) {
   19c94:	b144      	cbz	r4, 19ca8 <os_mbuf_trim_front+0x1e>
   19c96:	88e3      	ldrh	r3, [r4, #6]
   19c98:	b933      	cbnz	r3, 19ca8 <os_mbuf_trim_front+0x1e>
        next = SLIST_NEXT(cur, om_next);
   19c9a:	68e5      	ldr	r5, [r4, #12]

        SLIST_NEXT(om, om_next) = next;
   19c9c:	60f5      	str	r5, [r6, #12]
        os_mbuf_free(cur);
   19c9e:	4620      	mov	r0, r4
   19ca0:	f7ff fcab 	bl	195fa <os_mbuf_free>

        cur = next;
   19ca4:	462c      	mov	r4, r5
   19ca6:	e7f5      	b.n	19c94 <os_mbuf_trim_front+0xa>
    }

    if (cur == NULL) {
   19ca8:	b16c      	cbz	r4, 19cc6 <os_mbuf_trim_front+0x3c>
    if (OS_MBUF_IS_PKTHDR(om)) {
   19caa:	7963      	ldrb	r3, [r4, #5]
   19cac:	2b07      	cmp	r3, #7
   19cae:	d900      	bls.n	19cb2 <os_mbuf_trim_front+0x28>
        startoff = om->om_pkthdr_len;
   19cb0:	b29f      	uxth	r7, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   19cb2:	4620      	mov	r0, r4
   19cb4:	f850 3b10 	ldr.w	r3, [r0], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   19cb8:	4407      	add	r7, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   19cba:	1bdf      	subs	r7, r3, r7
   19cbc:	b2bf      	uxth	r7, r7
    }

    /* Try to remove the first mbuf in the chain.  If this buffer contains a
     * packet header, make sure the second buffer can accommodate it.
     */
    if (OS_MBUF_LEADINGSPACE(cur) >= om->om_pkthdr_len) {
   19cbe:	7972      	ldrb	r2, [r6, #5]
   19cc0:	b293      	uxth	r3, r2
   19cc2:	42bb      	cmp	r3, r7
   19cc4:	d901      	bls.n	19cca <os_mbuf_trim_front+0x40>
        os_mbuf_free(om);
        om = cur;
    }

    return om;
}
   19cc6:	4630      	mov	r0, r6
   19cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        cur->om_pkthdr_len = om->om_pkthdr_len;
   19cca:	7162      	strb	r2, [r4, #5]
        memcpy(OS_MBUF_PKTHDR(cur), OS_MBUF_PKTHDR(om), om->om_pkthdr_len);
   19ccc:	f106 0110 	add.w	r1, r6, #16
   19cd0:	f000 ffd0 	bl	1ac74 <memcpy>
        os_mbuf_free(om);
   19cd4:	4630      	mov	r0, r6
   19cd6:	f7ff fc90 	bl	195fa <os_mbuf_free>
        om = cur;
   19cda:	4626      	mov	r6, r4
   19cdc:	e7f3      	b.n	19cc6 <os_mbuf_trim_front+0x3c>

00019cde <os_mbuf_pack_chains>:
    return 0;
}

struct os_mbuf *
os_mbuf_pack_chains(struct os_mbuf *m1, struct os_mbuf *m2)
{
   19cde:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t *dptr;
    struct os_mbuf *cur;
    struct os_mbuf *next;

    /* If m1 is NULL, return NULL */
    if (m1 == NULL) {
   19ce2:	4681      	mov	r9, r0
   19ce4:	2800      	cmp	r0, #0
   19ce6:	d04e      	beq.n	19d86 <os_mbuf_pack_chains+0xa8>

    /*
     * Concatenate the two chains to start. This will discard packet header in
     * m2 and adjust packet length in m1 if m1 has a packet header.
     */
    if (m2 != NULL) {
   19ce8:	b109      	cbz	r1, 19cee <os_mbuf_pack_chains+0x10>
        os_mbuf_concat(m1, m2);
   19cea:	f7ff fef1 	bl	19ad0 <os_mbuf_concat>
{
   19cee:	464d      	mov	r5, r9
   19cf0:	e006      	b.n	19d00 <os_mbuf_pack_chains+0x22>
    startoff = 0;
   19cf2:	2300      	movs	r3, #0
   19cf4:	e008      	b.n	19d08 <os_mbuf_pack_chains+0x2a>

    cur = m1;
    while (1) {
        /* If there is leading space in the mbuf, move data up */
        if (OS_MBUF_LEADINGSPACE(cur)) {
            dptr = &cur->om_databuf[0];
   19cf6:	4634      	mov	r4, r6
   19cf8:	e010      	b.n	19d1c <os_mbuf_pack_chains+0x3e>
                }
            }
        }

        /* If no mbufs are left, we are done */
        if (next == NULL) {
   19cfa:	2c00      	cmp	r4, #0
   19cfc:	d043      	beq.n	19d86 <os_mbuf_pack_chains+0xa8>
            break;
        }

        /* Move cur to next as we filled up current */
        cur = next;
   19cfe:	4625      	mov	r5, r4
    if (OS_MBUF_IS_PKTHDR(om)) {
   19d00:	796a      	ldrb	r2, [r5, #5]
   19d02:	2a07      	cmp	r2, #7
   19d04:	d9f5      	bls.n	19cf2 <os_mbuf_pack_chains+0x14>
        startoff = om->om_pkthdr_len;
   19d06:	b293      	uxth	r3, r2
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   19d08:	462e      	mov	r6, r5
   19d0a:	f856 1b10 	ldr.w	r1, [r6], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   19d0e:	4433      	add	r3, r6
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   19d10:	1acb      	subs	r3, r1, r3
   19d12:	b29b      	uxth	r3, r3
        if (OS_MBUF_LEADINGSPACE(cur)) {
   19d14:	b13b      	cbz	r3, 19d26 <os_mbuf_pack_chains+0x48>
            if (OS_MBUF_IS_PKTHDR(cur)) {
   19d16:	2a07      	cmp	r2, #7
   19d18:	d9ed      	bls.n	19cf6 <os_mbuf_pack_chains+0x18>
                dptr += cur->om_pkthdr_len;
   19d1a:	18b4      	adds	r4, r6, r2
            memmove(dptr, cur->om_data, cur->om_len);
   19d1c:	88ea      	ldrh	r2, [r5, #6]
   19d1e:	4620      	mov	r0, r4
   19d20:	f000 ffb5 	bl	1ac8e <memmove>
            cur->om_data = dptr;
   19d24:	602c      	str	r4, [r5, #0]
        dptr = cur->om_data + cur->om_len;
   19d26:	682b      	ldr	r3, [r5, #0]
   19d28:	f8b5 8006 	ldrh.w	r8, [r5, #6]
   19d2c:	4498      	add	r8, r3
        next = SLIST_NEXT(cur, om_next);
   19d2e:	68ec      	ldr	r4, [r5, #12]
    omp = om->om_omp;
   19d30:	68ab      	ldr	r3, [r5, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   19d32:	881f      	ldrh	r7, [r3, #0]
   19d34:	4437      	add	r7, r6
   19d36:	eba7 0708 	sub.w	r7, r7, r8
   19d3a:	b2bf      	uxth	r7, r7
        while (rem_len && next) {
   19d3c:	2f00      	cmp	r7, #0
   19d3e:	d0dc      	beq.n	19cfa <os_mbuf_pack_chains+0x1c>
   19d40:	2c00      	cmp	r4, #0
   19d42:	d0da      	beq.n	19cfa <os_mbuf_pack_chains+0x1c>
            copylen = min(rem_len, next->om_len);
   19d44:	88e6      	ldrh	r6, [r4, #6]
   19d46:	42be      	cmp	r6, r7
   19d48:	bf28      	it	cs
   19d4a:	463e      	movcs	r6, r7
            memcpy(dptr, next->om_data, copylen);
   19d4c:	4632      	mov	r2, r6
   19d4e:	6821      	ldr	r1, [r4, #0]
   19d50:	4640      	mov	r0, r8
   19d52:	f000 ff8f 	bl	1ac74 <memcpy>
            cur->om_len += copylen;
   19d56:	88eb      	ldrh	r3, [r5, #6]
   19d58:	4433      	add	r3, r6
   19d5a:	80eb      	strh	r3, [r5, #6]
            dptr += copylen;
   19d5c:	44b0      	add	r8, r6
            rem_len -= copylen;
   19d5e:	1bbf      	subs	r7, r7, r6
   19d60:	b2bf      	uxth	r7, r7
            next->om_data += copylen;
   19d62:	6823      	ldr	r3, [r4, #0]
   19d64:	4433      	add	r3, r6
   19d66:	6023      	str	r3, [r4, #0]
            next->om_len -= copylen;
   19d68:	88e3      	ldrh	r3, [r4, #6]
   19d6a:	1b9e      	subs	r6, r3, r6
   19d6c:	80e6      	strh	r6, [r4, #6]
            while (next->om_len == 0) {
   19d6e:	88e3      	ldrh	r3, [r4, #6]
   19d70:	2b00      	cmp	r3, #0
   19d72:	d1e3      	bne.n	19d3c <os_mbuf_pack_chains+0x5e>
                SLIST_NEXT(cur, om_next) = SLIST_NEXT(next, om_next);
   19d74:	68e3      	ldr	r3, [r4, #12]
   19d76:	60eb      	str	r3, [r5, #12]
                os_mbuf_free(next);
   19d78:	4620      	mov	r0, r4
   19d7a:	f7ff fc3e 	bl	195fa <os_mbuf_free>
                next = SLIST_NEXT(cur, om_next);
   19d7e:	68ec      	ldr	r4, [r5, #12]
                if (next == NULL) {
   19d80:	2c00      	cmp	r4, #0
   19d82:	d1f4      	bne.n	19d6e <os_mbuf_pack_chains+0x90>
   19d84:	e7da      	b.n	19d3c <os_mbuf_pack_chains+0x5e>
    }

    return m1;
}
   19d86:	4648      	mov	r0, r9
   19d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00019d8c <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   19d8c:	2800      	cmp	r0, #0
   19d8e:	d031      	beq.n	19df4 <os_mempool_init_internal+0x68>
{
   19d90:	b430      	push	{r4, r5}
   19d92:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   19d94:	2a00      	cmp	r2, #0
   19d96:	d02f      	beq.n	19df8 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   19d98:	b1bb      	cbz	r3, 19dca <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   19d9a:	b113      	cbz	r3, 19da2 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   19d9c:	f013 0f03 	tst.w	r3, #3
   19da0:	d12c      	bne.n	19dfc <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   19da2:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   19da4:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   19da6:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   19da8:	f89d 000c 	ldrb.w	r0, [sp, #12]
   19dac:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   19dae:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   19db0:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   19db2:	9802      	ldr	r0, [sp, #8]
   19db4:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   19db6:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   19db8:	b199      	cbz	r1, 19de2 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   19dba:	f012 0f03 	tst.w	r2, #3
   19dbe:	d002      	beq.n	19dc6 <os_mempool_init_internal+0x3a>
   19dc0:	f022 0203 	bic.w	r2, r2, #3
   19dc4:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   19dc6:	2001      	movs	r0, #1
   19dc8:	e007      	b.n	19dda <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   19dca:	2900      	cmp	r1, #0
   19dcc:	d0e5      	beq.n	19d9a <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   19dce:	2003      	movs	r0, #3
   19dd0:	e00e      	b.n	19df0 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   19dd2:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   19dd4:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   19dd6:	3001      	adds	r0, #1
            block_addr += true_block_size;
   19dd8:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   19dda:	4281      	cmp	r1, r0
   19ddc:	dcf9      	bgt.n	19dd2 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   19dde:	2200      	movs	r2, #0
   19de0:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   19de2:	2000      	movs	r0, #0
   19de4:	6120      	str	r0, [r4, #16]
   19de6:	4b06      	ldr	r3, [pc, #24]	; (19e00 <os_mempool_init_internal+0x74>)
   19de8:	685a      	ldr	r2, [r3, #4]
   19dea:	6014      	str	r4, [r2, #0]
   19dec:	3410      	adds	r4, #16
   19dee:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   19df0:	bc30      	pop	{r4, r5}
   19df2:	4770      	bx	lr
        return OS_INVALID_PARM;
   19df4:	2003      	movs	r0, #3
}
   19df6:	4770      	bx	lr
        return OS_INVALID_PARM;
   19df8:	2003      	movs	r0, #3
   19dfa:	e7f9      	b.n	19df0 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   19dfc:	2004      	movs	r0, #4
   19dfe:	e7f7      	b.n	19df0 <os_mempool_init_internal+0x64>
   19e00:	100040f4 	.word	0x100040f4

00019e04 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   19e04:	b510      	push	{r4, lr}
   19e06:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   19e08:	2400      	movs	r4, #0
   19e0a:	9401      	str	r4, [sp, #4]
   19e0c:	9c04      	ldr	r4, [sp, #16]
   19e0e:	9400      	str	r4, [sp, #0]
   19e10:	f7ff ffbc 	bl	19d8c <os_mempool_init_internal>
}
   19e14:	b002      	add	sp, #8
   19e16:	bd10      	pop	{r4, pc}

00019e18 <os_mempool_ext_init>:

os_error_t
os_mempool_ext_init(struct os_mempool_ext *mpe, uint16_t blocks,
                    uint32_t block_size, void *membuf, char *name)
{
   19e18:	b530      	push	{r4, r5, lr}
   19e1a:	b083      	sub	sp, #12
   19e1c:	4604      	mov	r4, r0
    int rc;

    rc = os_mempool_init_internal(&mpe->mpe_mp, blocks, block_size, membuf,
   19e1e:	2501      	movs	r5, #1
   19e20:	9501      	str	r5, [sp, #4]
   19e22:	9d06      	ldr	r5, [sp, #24]
   19e24:	9500      	str	r5, [sp, #0]
   19e26:	f7ff ffb1 	bl	19d8c <os_mempool_init_internal>
                                  name, OS_MEMPOOL_F_EXT);
    if (rc != 0) {
   19e2a:	b908      	cbnz	r0, 19e30 <os_mempool_ext_init+0x18>
        return rc;
    }

    mpe->mpe_put_cb = NULL;
   19e2c:	61e0      	str	r0, [r4, #28]
    mpe->mpe_put_arg = NULL;
   19e2e:	6220      	str	r0, [r4, #32]

    return 0;
}
   19e30:	b003      	add	sp, #12
   19e32:	bd30      	pop	{r4, r5, pc}

00019e34 <os_memblock_from>:
    return true;
}

int
os_memblock_from(const struct os_mempool *mp, const void *block_addr)
{
   19e34:	b410      	push	{r4}

    static_assert(sizeof block_addr == sizeof baddr32,
                  "Pointer to void must be 32-bits.");

    baddr32 = (uint32_t)block_addr;
    true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   19e36:	6803      	ldr	r3, [r0, #0]
   19e38:	f013 0f03 	tst.w	r3, #3
   19e3c:	d002      	beq.n	19e44 <os_memblock_from+0x10>
   19e3e:	f023 0303 	bic.w	r3, r3, #3
   19e42:	3304      	adds	r3, #4
    end = mp->mp_membuf_addr + (mp->mp_num_blocks * true_block_size);
   19e44:	68c4      	ldr	r4, [r0, #12]
   19e46:	8882      	ldrh	r2, [r0, #4]
   19e48:	fb03 4202 	mla	r2, r3, r2, r4

    /* Check that the block is in the memory buffer range. */
    if ((baddr32 < mp->mp_membuf_addr) || (baddr32 >= end)) {
   19e4c:	428c      	cmp	r4, r1
   19e4e:	d809      	bhi.n	19e64 <os_memblock_from+0x30>
   19e50:	4291      	cmp	r1, r2
   19e52:	d20a      	bcs.n	19e6a <os_memblock_from+0x36>
        return 0;
    }

    /* All freed blocks should be on true block size boundaries! */
    if (((baddr32 - mp->mp_membuf_addr) % true_block_size) != 0) {
   19e54:	1b09      	subs	r1, r1, r4
   19e56:	fbb1 f2f3 	udiv	r2, r1, r3
   19e5a:	fb03 1112 	mls	r1, r3, r2, r1
   19e5e:	b931      	cbnz	r1, 19e6e <os_memblock_from+0x3a>
        return 0;
    }

    return 1;
   19e60:	2001      	movs	r0, #1
   19e62:	e000      	b.n	19e66 <os_memblock_from+0x32>
        return 0;
   19e64:	2000      	movs	r0, #0
}
   19e66:	bc10      	pop	{r4}
   19e68:	4770      	bx	lr
        return 0;
   19e6a:	2000      	movs	r0, #0
   19e6c:	e7fb      	b.n	19e66 <os_memblock_from+0x32>
        return 0;
   19e6e:	2000      	movs	r0, #0
   19e70:	e7f9      	b.n	19e66 <os_memblock_from+0x32>

00019e72 <os_memblock_get>:

void *
os_memblock_get(struct os_mempool *mp)
{
   19e72:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   19e74:	4604      	mov	r4, r0
   19e76:	b198      	cbz	r0, 19ea0 <os_memblock_get+0x2e>
        OS_ENTER_CRITICAL(sr);
   19e78:	f000 fd28 	bl	1a8cc <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   19e7c:	88e3      	ldrh	r3, [r4, #6]
   19e7e:	b153      	cbz	r3, 19e96 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   19e80:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   19e82:	682a      	ldr	r2, [r5, #0]
   19e84:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   19e86:	3b01      	subs	r3, #1
   19e88:	b29b      	uxth	r3, r3
   19e8a:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   19e8c:	8922      	ldrh	r2, [r4, #8]
   19e8e:	4293      	cmp	r3, r2
   19e90:	d202      	bcs.n	19e98 <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   19e92:	8123      	strh	r3, [r4, #8]
   19e94:	e000      	b.n	19e98 <os_memblock_get+0x26>
    block = NULL;
   19e96:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   19e98:	f000 fd1e 	bl	1a8d8 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   19e9c:	4628      	mov	r0, r5
   19e9e:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   19ea0:	4605      	mov	r5, r0
    return (void *)block;
   19ea2:	e7fb      	b.n	19e9c <os_memblock_get+0x2a>

00019ea4 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
   19ea4:	b538      	push	{r3, r4, r5, lr}
   19ea6:	4604      	mov	r4, r0
   19ea8:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
   19eaa:	f000 fd0f 	bl	1a8cc <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   19eae:	6963      	ldr	r3, [r4, #20]
   19eb0:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   19eb2:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   19eb4:	88e3      	ldrh	r3, [r4, #6]
   19eb6:	3301      	adds	r3, #1
   19eb8:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
   19eba:	f000 fd0d 	bl	1a8d8 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
   19ebe:	2000      	movs	r0, #0
   19ec0:	bd38      	pop	{r3, r4, r5, pc}

00019ec2 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   19ec2:	b178      	cbz	r0, 19ee4 <os_memblock_put+0x22>
   19ec4:	4603      	mov	r3, r0
   19ec6:	b179      	cbz	r1, 19ee8 <os_memblock_put+0x26>
{
   19ec8:	b510      	push	{r4, lr}
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
   19eca:	7a82      	ldrb	r2, [r0, #10]
   19ecc:	f012 0f01 	tst.w	r2, #1
   19ed0:	d004      	beq.n	19edc <os_memblock_put+0x1a>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   19ed2:	69c4      	ldr	r4, [r0, #28]
   19ed4:	b114      	cbz	r4, 19edc <os_memblock_put+0x1a>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   19ed6:	6a02      	ldr	r2, [r0, #32]
   19ed8:	47a0      	blx	r4
            goto done;
   19eda:	e002      	b.n	19ee2 <os_memblock_put+0x20>
        }
    }

    /* No callback; free the block. */
    ret = os_memblock_put_from_cb(mp, block_addr);
   19edc:	4618      	mov	r0, r3
   19ede:	f7ff ffe1 	bl	19ea4 <os_memblock_put_from_cb>

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
   19ee2:	bd10      	pop	{r4, pc}
        ret = OS_INVALID_PARM;
   19ee4:	2003      	movs	r0, #3
   19ee6:	4770      	bx	lr
   19ee8:	2003      	movs	r0, #3
}
   19eea:	4770      	bx	lr

00019eec <os_mempool_info_get_next>:

struct os_mempool *
os_mempool_info_get_next(struct os_mempool *mp, struct os_mempool_info *omi)
{
   19eec:	b510      	push	{r4, lr}
    struct os_mempool *cur;

    if (mp == NULL) {
   19eee:	b198      	cbz	r0, 19f18 <os_mempool_info_get_next+0x2c>
        cur = STAILQ_FIRST(&g_os_mempool_list);
    } else {
        cur = STAILQ_NEXT(mp, mp_list);
   19ef0:	6904      	ldr	r4, [r0, #16]
    }

    if (cur == NULL) {
   19ef2:	b17c      	cbz	r4, 19f14 <os_mempool_info_get_next+0x28>
        return (NULL);
    }

    omi->omi_block_size = cur->mp_block_size;
   19ef4:	6823      	ldr	r3, [r4, #0]
   19ef6:	600b      	str	r3, [r1, #0]
    omi->omi_num_blocks = cur->mp_num_blocks;
   19ef8:	88a3      	ldrh	r3, [r4, #4]
   19efa:	604b      	str	r3, [r1, #4]
    omi->omi_num_free = cur->mp_num_free;
   19efc:	88e3      	ldrh	r3, [r4, #6]
   19efe:	608b      	str	r3, [r1, #8]
    omi->omi_min_free = cur->mp_min_free;
   19f00:	8923      	ldrh	r3, [r4, #8]
   19f02:	60cb      	str	r3, [r1, #12]
    omi->omi_name[0] = '\0';
   19f04:	4608      	mov	r0, r1
   19f06:	2300      	movs	r3, #0
   19f08:	f800 3f10 	strb.w	r3, [r0, #16]!
    strncat(omi->omi_name, cur->name, sizeof(omi->omi_name) - 1);
   19f0c:	221f      	movs	r2, #31
   19f0e:	69a1      	ldr	r1, [r4, #24]
   19f10:	f000 ff1e 	bl	1ad50 <strncat>

    return (cur);
}
   19f14:	4620      	mov	r0, r4
   19f16:	bd10      	pop	{r4, pc}
        cur = STAILQ_FIRST(&g_os_mempool_list);
   19f18:	4b01      	ldr	r3, [pc, #4]	; (19f20 <os_mempool_info_get_next+0x34>)
   19f1a:	681c      	ldr	r4, [r3, #0]
   19f1c:	e7e9      	b.n	19ef2 <os_mempool_info_get_next+0x6>
   19f1e:	bf00      	nop
   19f20:	100040f4 	.word	0x100040f4

00019f24 <os_mempool_module_init>:

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   19f24:	4b02      	ldr	r3, [pc, #8]	; (19f30 <os_mempool_module_init+0xc>)
   19f26:	2200      	movs	r2, #0
   19f28:	601a      	str	r2, [r3, #0]
   19f2a:	605b      	str	r3, [r3, #4]
}
   19f2c:	4770      	bx	lr
   19f2e:	bf00      	nop
   19f30:	100040f4 	.word	0x100040f4

00019f34 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   19f34:	4b02      	ldr	r3, [pc, #8]	; (19f40 <os_msys_find_biggest_pool+0xc>)
   19f36:	6818      	ldr	r0, [r3, #0]
   19f38:	b108      	cbz	r0, 19f3e <os_msys_find_biggest_pool+0xa>
   19f3a:	6858      	ldr	r0, [r3, #4]
   19f3c:	3808      	subs	r0, #8
}
   19f3e:	4770      	bx	lr
   19f40:	10000668 	.word	0x10000668

00019f44 <os_msys_find_pool>:

static struct os_mbuf_pool *
os_msys_find_pool(uint16_t dsize)
{
   19f44:	4602      	mov	r2, r0
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   19f46:	4b09      	ldr	r3, [pc, #36]	; (19f6c <os_msys_find_pool+0x28>)
   19f48:	6819      	ldr	r1, [r3, #0]
   19f4a:	4608      	mov	r0, r1
   19f4c:	b120      	cbz	r0, 19f58 <os_msys_find_pool+0x14>
        if (dsize <= pool->omp_databuf_len) {
   19f4e:	8803      	ldrh	r3, [r0, #0]
   19f50:	4293      	cmp	r3, r2
   19f52:	d201      	bcs.n	19f58 <os_msys_find_pool+0x14>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   19f54:	6880      	ldr	r0, [r0, #8]
   19f56:	e7f9      	b.n	19f4c <os_msys_find_pool+0x8>
            break;
        }
    }

    if (!pool) {
   19f58:	b100      	cbz	r0, 19f5c <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
   19f5a:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   19f5c:	b119      	cbz	r1, 19f66 <os_msys_find_pool+0x22>
   19f5e:	4b03      	ldr	r3, [pc, #12]	; (19f6c <os_msys_find_pool+0x28>)
   19f60:	6858      	ldr	r0, [r3, #4]
   19f62:	3808      	subs	r0, #8
   19f64:	4770      	bx	lr
   19f66:	4608      	mov	r0, r1
    return (pool);
   19f68:	e7f7      	b.n	19f5a <os_msys_find_pool+0x16>
   19f6a:	bf00      	nop
   19f6c:	10000668 	.word	0x10000668

00019f70 <os_msys_register>:
{
   19f70:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   19f72:	4b11      	ldr	r3, [pc, #68]	; (19fb8 <os_msys_register+0x48>)
   19f74:	681d      	ldr	r5, [r3, #0]
   19f76:	462b      	mov	r3, r5
    prev = NULL;
   19f78:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   19f7a:	b133      	cbz	r3, 19f8a <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   19f7c:	8801      	ldrh	r1, [r0, #0]
   19f7e:	881a      	ldrh	r2, [r3, #0]
   19f80:	4291      	cmp	r1, r2
   19f82:	d302      	bcc.n	19f8a <os_msys_register+0x1a>
        prev = pool;
   19f84:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   19f86:	689b      	ldr	r3, [r3, #8]
   19f88:	e7f7      	b.n	19f7a <os_msys_register+0xa>
    if (prev) {
   19f8a:	b15c      	cbz	r4, 19fa4 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   19f8c:	68a3      	ldr	r3, [r4, #8]
   19f8e:	6083      	str	r3, [r0, #8]
   19f90:	b11b      	cbz	r3, 19f9a <os_msys_register+0x2a>
   19f92:	60a0      	str	r0, [r4, #8]
}
   19f94:	2000      	movs	r0, #0
   19f96:	bc30      	pop	{r4, r5}
   19f98:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   19f9a:	f100 0308 	add.w	r3, r0, #8
   19f9e:	4a06      	ldr	r2, [pc, #24]	; (19fb8 <os_msys_register+0x48>)
   19fa0:	6053      	str	r3, [r2, #4]
   19fa2:	e7f6      	b.n	19f92 <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   19fa4:	6085      	str	r5, [r0, #8]
   19fa6:	b115      	cbz	r5, 19fae <os_msys_register+0x3e>
   19fa8:	4b03      	ldr	r3, [pc, #12]	; (19fb8 <os_msys_register+0x48>)
   19faa:	6018      	str	r0, [r3, #0]
   19fac:	e7f2      	b.n	19f94 <os_msys_register+0x24>
   19fae:	f100 0308 	add.w	r3, r0, #8
   19fb2:	4a01      	ldr	r2, [pc, #4]	; (19fb8 <os_msys_register+0x48>)
   19fb4:	6053      	str	r3, [r2, #4]
   19fb6:	e7f7      	b.n	19fa8 <os_msys_register+0x38>
   19fb8:	10000668 	.word	0x10000668

00019fbc <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   19fbc:	b530      	push	{r4, r5, lr}
   19fbe:	b083      	sub	sp, #12
   19fc0:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   19fc2:	9d07      	ldr	r5, [sp, #28]
   19fc4:	9501      	str	r5, [sp, #4]
   19fc6:	9d06      	ldr	r5, [sp, #24]
   19fc8:	9500      	str	r5, [sp, #0]
   19fca:	f004 fb85 	bl	1e6d8 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   19fce:	b928      	cbnz	r0, 19fdc <os_msys_init_once+0x20>

    rc = os_msys_register(mbuf_pool);
   19fd0:	4620      	mov	r0, r4
   19fd2:	f7ff ffcd 	bl	19f70 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   19fd6:	b970      	cbnz	r0, 19ff6 <os_msys_init_once+0x3a>
}
   19fd8:	b003      	add	sp, #12
   19fda:	bd30      	pop	{r4, r5, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
   19fdc:	f7fa fb92 	bl	14704 <hal_debugger_connected>
   19fe0:	b100      	cbz	r0, 19fe4 <os_msys_init_once+0x28>
   19fe2:	be01      	bkpt	0x0001
   19fe4:	2000      	movs	r0, #0
   19fe6:	9000      	str	r0, [sp, #0]
   19fe8:	4b09      	ldr	r3, [pc, #36]	; (1a010 <os_msys_init_once+0x54>)
   19fea:	681d      	ldr	r5, [r3, #0]
   19fec:	4603      	mov	r3, r0
   19fee:	4602      	mov	r2, r0
   19ff0:	4601      	mov	r1, r0
   19ff2:	47a8      	blx	r5
   19ff4:	e7ec      	b.n	19fd0 <os_msys_init_once+0x14>
    SYSINIT_PANIC_ASSERT(rc == 0);
   19ff6:	f7fa fb85 	bl	14704 <hal_debugger_connected>
   19ffa:	b100      	cbz	r0, 19ffe <os_msys_init_once+0x42>
   19ffc:	be01      	bkpt	0x0001
   19ffe:	2000      	movs	r0, #0
   1a000:	9000      	str	r0, [sp, #0]
   1a002:	4b03      	ldr	r3, [pc, #12]	; (1a010 <os_msys_init_once+0x54>)
   1a004:	681c      	ldr	r4, [r3, #0]
   1a006:	4603      	mov	r3, r0
   1a008:	4602      	mov	r2, r0
   1a00a:	4601      	mov	r1, r0
   1a00c:	47a0      	blx	r4
}
   1a00e:	e7e3      	b.n	19fd8 <os_msys_init_once+0x1c>
   1a010:	100006b4 	.word	0x100006b4

0001a014 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   1a014:	4b02      	ldr	r3, [pc, #8]	; (1a020 <os_msys_reset+0xc>)
   1a016:	2200      	movs	r2, #0
   1a018:	601a      	str	r2, [r3, #0]
   1a01a:	605b      	str	r3, [r3, #4]
}
   1a01c:	4770      	bx	lr
   1a01e:	bf00      	nop
   1a020:	10000668 	.word	0x10000668

0001a024 <os_msys_get_pkthdr>:
{
   1a024:	b510      	push	{r4, lr}
   1a026:	460c      	mov	r4, r1
    if (dsize == 0) {
   1a028:	b930      	cbnz	r0, 1a038 <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
   1a02a:	f7ff ff83 	bl	19f34 <os_msys_find_biggest_pool>
    if (!pool) {
   1a02e:	b110      	cbz	r0, 1a036 <os_msys_get_pkthdr+0x12>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
   1a030:	b2e1      	uxtb	r1, r4
   1a032:	f7ff fac9 	bl	195c8 <os_mbuf_get_pkthdr>
}
   1a036:	bd10      	pop	{r4, pc}
   1a038:	f101 0308 	add.w	r3, r1, #8
   1a03c:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
   1a03e:	4403      	add	r3, r0
   1a040:	b298      	uxth	r0, r3
   1a042:	f7ff ff7f 	bl	19f44 <os_msys_find_pool>
   1a046:	e7f2      	b.n	1a02e <os_msys_get_pkthdr+0xa>

0001a048 <os_msys_num_free>:
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
   1a048:	4b04      	ldr	r3, [pc, #16]	; (1a05c <os_msys_num_free+0x14>)
   1a04a:	681b      	ldr	r3, [r3, #0]
    total = 0;
   1a04c:	2000      	movs	r0, #0
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
   1a04e:	b123      	cbz	r3, 1a05a <os_msys_num_free+0x12>
        total += omp->omp_pool->mp_num_free;
   1a050:	685a      	ldr	r2, [r3, #4]
   1a052:	88d2      	ldrh	r2, [r2, #6]
   1a054:	4410      	add	r0, r2
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
   1a056:	689b      	ldr	r3, [r3, #8]
   1a058:	e7f9      	b.n	1a04e <os_msys_num_free+0x6>
}
   1a05a:	4770      	bx	lr
   1a05c:	10000668 	.word	0x10000668

0001a060 <os_msys_init>:

void
os_msys_init(void)
{
   1a060:	b500      	push	{lr}
   1a062:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   1a064:	f7ff ffd6 	bl	1a014 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   1a068:	4b06      	ldr	r3, [pc, #24]	; (1a084 <os_msys_init+0x24>)
   1a06a:	9301      	str	r3, [sp, #4]
   1a06c:	f44f 7392 	mov.w	r3, #292	; 0x124
   1a070:	9300      	str	r3, [sp, #0]
   1a072:	230c      	movs	r3, #12
   1a074:	4a04      	ldr	r2, [pc, #16]	; (1a088 <os_msys_init+0x28>)
   1a076:	4905      	ldr	r1, [pc, #20]	; (1a08c <os_msys_init+0x2c>)
   1a078:	4805      	ldr	r0, [pc, #20]	; (1a090 <os_msys_init+0x30>)
   1a07a:	f7ff ff9f 	bl	19fbc <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   1a07e:	b003      	add	sp, #12
   1a080:	f85d fb04 	ldr.w	pc, [sp], #4
   1a084:	00033dac 	.word	0x00033dac
   1a088:	10004eac 	.word	0x10004eac
   1a08c:	10004eb8 	.word	0x10004eb8
   1a090:	100040fc 	.word	0x100040fc

0001a094 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   1a094:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1a096:	4b05      	ldr	r3, [pc, #20]	; (1a0ac <os_sanity_check_list_lock+0x18>)
   1a098:	6818      	ldr	r0, [r3, #0]
   1a09a:	b900      	cbnz	r0, 1a09e <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1a09c:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   1a09e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a0a2:	4803      	ldr	r0, [pc, #12]	; (1a0b0 <os_sanity_check_list_lock+0x1c>)
   1a0a4:	f000 fd4a 	bl	1ab3c <os_mutex_pend>
    if (rc != OS_OK) {
   1a0a8:	e7f8      	b.n	1a09c <os_sanity_check_list_lock+0x8>
   1a0aa:	bf00      	nop
   1a0ac:	100040d0 	.word	0x100040d0
   1a0b0:	10004ed8 	.word	0x10004ed8

0001a0b4 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   1a0b4:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1a0b6:	4b04      	ldr	r3, [pc, #16]	; (1a0c8 <os_sanity_check_list_unlock+0x14>)
   1a0b8:	6818      	ldr	r0, [r3, #0]
   1a0ba:	b900      	cbnz	r0, 1a0be <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1a0bc:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   1a0be:	4803      	ldr	r0, [pc, #12]	; (1a0cc <os_sanity_check_list_unlock+0x18>)
   1a0c0:	f000 fcdc 	bl	1aa7c <os_mutex_release>
    if (rc != 0) {
   1a0c4:	e7fa      	b.n	1a0bc <os_sanity_check_list_unlock+0x8>
   1a0c6:	bf00      	nop
   1a0c8:	100040d0 	.word	0x100040d0
   1a0cc:	10004ed8 	.word	0x10004ed8

0001a0d0 <os_sanity_check_init>:
{
   1a0d0:	4603      	mov	r3, r0
    memset(sc, 0, sizeof(*sc));
   1a0d2:	2000      	movs	r0, #0
   1a0d4:	6018      	str	r0, [r3, #0]
   1a0d6:	6058      	str	r0, [r3, #4]
   1a0d8:	6098      	str	r0, [r3, #8]
   1a0da:	60d8      	str	r0, [r3, #12]
   1a0dc:	6118      	str	r0, [r3, #16]
}
   1a0de:	4770      	bx	lr

0001a0e0 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   1a0e0:	b510      	push	{r4, lr}
   1a0e2:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   1a0e4:	f7ff ffd6 	bl	1a094 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   1a0e8:	b100      	cbz	r0, 1a0ec <os_sanity_check_register+0xc>
    }

    return (0);
err:
    return (rc);
}
   1a0ea:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   1a0ec:	4b03      	ldr	r3, [pc, #12]	; (1a0fc <os_sanity_check_register+0x1c>)
   1a0ee:	681a      	ldr	r2, [r3, #0]
   1a0f0:	6122      	str	r2, [r4, #16]
   1a0f2:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   1a0f4:	f7ff ffde 	bl	1a0b4 <os_sanity_check_list_unlock>
    if (rc != OS_OK) {
   1a0f8:	e7f7      	b.n	1a0ea <os_sanity_check_register+0xa>
   1a0fa:	bf00      	nop
   1a0fc:	10004ed4 	.word	0x10004ed4

0001a100 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   1a100:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   1a102:	f7ff ffc7 	bl	1a094 <os_sanity_check_list_lock>
    if (rc != 0) {
   1a106:	b910      	cbnz	r0, 1a10e <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1a108:	4b1d      	ldr	r3, [pc, #116]	; (1a180 <os_sanity_run+0x80>)
   1a10a:	681c      	ldr	r4, [r3, #0]
   1a10c:	e012      	b.n	1a134 <os_sanity_run+0x34>
        assert(0);
   1a10e:	f7fa faf9 	bl	14704 <hal_debugger_connected>
   1a112:	b100      	cbz	r0, 1a116 <os_sanity_run+0x16>
   1a114:	be01      	bkpt	0x0001
   1a116:	2300      	movs	r3, #0
   1a118:	461a      	mov	r2, r3
   1a11a:	4619      	mov	r1, r3
   1a11c:	4618      	mov	r0, r3
   1a11e:	f7fe fe01 	bl	18d24 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   1a122:	f000 faa3 	bl	1a66c <os_time_get>
   1a126:	6823      	ldr	r3, [r4, #0]
   1a128:	6862      	ldr	r2, [r4, #4]
   1a12a:	4413      	add	r3, r2
   1a12c:	1ac0      	subs	r0, r0, r3
   1a12e:	2800      	cmp	r0, #0
   1a130:	dc0d      	bgt.n	1a14e <os_sanity_run+0x4e>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1a132:	6924      	ldr	r4, [r4, #16]
   1a134:	b1ac      	cbz	r4, 1a162 <os_sanity_run+0x62>
        if (sc->sc_func) {
   1a136:	68a3      	ldr	r3, [r4, #8]
   1a138:	2b00      	cmp	r3, #0
   1a13a:	d0f2      	beq.n	1a122 <os_sanity_run+0x22>
            rc = sc->sc_func(sc, sc->sc_arg);
   1a13c:	68e1      	ldr	r1, [r4, #12]
   1a13e:	4620      	mov	r0, r4
   1a140:	4798      	blx	r3
            if (rc == OS_OK) {
   1a142:	2800      	cmp	r0, #0
   1a144:	d1ed      	bne.n	1a122 <os_sanity_run+0x22>
                sc->sc_checkin_last = os_time_get();
   1a146:	f000 fa91 	bl	1a66c <os_time_get>
   1a14a:	6020      	str	r0, [r4, #0]
                continue;
   1a14c:	e7f1      	b.n	1a132 <os_sanity_run+0x32>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   1a14e:	f7fa fad9 	bl	14704 <hal_debugger_connected>
   1a152:	b100      	cbz	r0, 1a156 <os_sanity_run+0x56>
   1a154:	be01      	bkpt	0x0001
   1a156:	2300      	movs	r3, #0
   1a158:	461a      	mov	r2, r3
   1a15a:	4619      	mov	r1, r3
   1a15c:	4618      	mov	r0, r3
   1a15e:	f7fe fde1 	bl	18d24 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   1a162:	f7ff ffa7 	bl	1a0b4 <os_sanity_check_list_unlock>
    if (rc != 0) {
   1a166:	b900      	cbnz	r0, 1a16a <os_sanity_run+0x6a>
        assert(0);
    }
}
   1a168:	bd10      	pop	{r4, pc}
        assert(0);
   1a16a:	f7fa facb 	bl	14704 <hal_debugger_connected>
   1a16e:	b100      	cbz	r0, 1a172 <os_sanity_run+0x72>
   1a170:	be01      	bkpt	0x0001
   1a172:	2300      	movs	r3, #0
   1a174:	461a      	mov	r2, r3
   1a176:	4619      	mov	r1, r3
   1a178:	4618      	mov	r0, r3
   1a17a:	f7fe fdd3 	bl	18d24 <__assert_func>
   1a17e:	bf00      	nop
   1a180:	10004ed4 	.word	0x10004ed4

0001a184 <os_sanity_init>:

int
os_sanity_init(void)
{
   1a184:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   1a186:	4802      	ldr	r0, [pc, #8]	; (1a190 <os_sanity_init+0xc>)
   1a188:	f000 fc6e 	bl	1aa68 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   1a18c:	bd08      	pop	{r3, pc}
   1a18e:	bf00      	nop
   1a190:	10004ed8 	.word	0x10004ed8

0001a194 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   1a194:	7b03      	ldrb	r3, [r0, #12]
   1a196:	2b01      	cmp	r3, #1
   1a198:	d001      	beq.n	1a19e <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   1a19a:	2002      	movs	r0, #2
}
   1a19c:	4770      	bx	lr
{
   1a19e:	b510      	push	{r4, lr}
   1a1a0:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1a1a2:	f000 fb93 	bl	1a8cc <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1a1a6:	4b0f      	ldr	r3, [pc, #60]	; (1a1e4 <os_sched_insert+0x50>)
   1a1a8:	681b      	ldr	r3, [r3, #0]
   1a1aa:	b12b      	cbz	r3, 1a1b8 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   1a1ac:	7ae1      	ldrb	r1, [r4, #11]
   1a1ae:	7ada      	ldrb	r2, [r3, #11]
   1a1b0:	4291      	cmp	r1, r2
   1a1b2:	d301      	bcc.n	1a1b8 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1a1b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a1b6:	e7f8      	b.n	1a1aa <os_sched_insert+0x16>
    if (entry) {
   1a1b8:	b153      	cbz	r3, 1a1d0 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   1a1ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1a1bc:	64a2      	str	r2, [r4, #72]	; 0x48
   1a1be:	6463      	str	r3, [r4, #68]	; 0x44
   1a1c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1a1c2:	6014      	str	r4, [r2, #0]
   1a1c4:	3444      	adds	r4, #68	; 0x44
   1a1c6:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   1a1c8:	f000 fb86 	bl	1a8d8 <os_arch_restore_sr>
    return (0);
   1a1cc:	2000      	movs	r0, #0
}
   1a1ce:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   1a1d0:	2300      	movs	r3, #0
   1a1d2:	6463      	str	r3, [r4, #68]	; 0x44
   1a1d4:	4b03      	ldr	r3, [pc, #12]	; (1a1e4 <os_sched_insert+0x50>)
   1a1d6:	685a      	ldr	r2, [r3, #4]
   1a1d8:	64a2      	str	r2, [r4, #72]	; 0x48
   1a1da:	6014      	str	r4, [r2, #0]
   1a1dc:	3444      	adds	r4, #68	; 0x44
   1a1de:	605c      	str	r4, [r3, #4]
   1a1e0:	e7f2      	b.n	1a1c8 <os_sched_insert+0x34>
   1a1e2:	bf00      	nop
   1a1e4:	10000670 	.word	0x10000670

0001a1e8 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   1a1e8:	b410      	push	{r4}
    stack = g_current_task->t_stackbottom;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(stack[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   1a1ea:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1a1ec:	3301      	adds	r3, #1
   1a1ee:	63c3      	str	r3, [r0, #60]	; 0x3c
#if MYNEWT_VAL(OS_TASK_RUN_TIME_CPUTIME)
    ticks = os_cputime_get32();
#else
    ticks = g_os_time;
   1a1f0:	4b06      	ldr	r3, [pc, #24]	; (1a20c <os_sched_ctx_sw_hook+0x24>)
   1a1f2:	6818      	ldr	r0, [r3, #0]
#endif
    g_current_task->t_run_time += ticks - g_os_last_ctx_sw_time;
   1a1f4:	4b06      	ldr	r3, [pc, #24]	; (1a210 <os_sched_ctx_sw_hook+0x28>)
   1a1f6:	681c      	ldr	r4, [r3, #0]
   1a1f8:	4906      	ldr	r1, [pc, #24]	; (1a214 <os_sched_ctx_sw_hook+0x2c>)
   1a1fa:	680b      	ldr	r3, [r1, #0]
   1a1fc:	1ac2      	subs	r2, r0, r3
   1a1fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1a200:	4413      	add	r3, r2
   1a202:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = ticks;
   1a204:	6008      	str	r0, [r1, #0]
}
   1a206:	bc10      	pop	{r4}
   1a208:	4770      	bx	lr
   1a20a:	bf00      	nop
   1a20c:	10004f28 	.word	0x10004f28
   1a210:	10004ee4 	.word	0x10004ee4
   1a214:	10004ee8 	.word	0x10004ee8

0001a218 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   1a218:	4b01      	ldr	r3, [pc, #4]	; (1a220 <os_sched_get_current_task+0x8>)
   1a21a:	6818      	ldr	r0, [r3, #0]
   1a21c:	4770      	bx	lr
   1a21e:	bf00      	nop
   1a220:	10004ee4 	.word	0x10004ee4

0001a224 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   1a224:	4b01      	ldr	r3, [pc, #4]	; (1a22c <os_sched_set_current_task+0x8>)
   1a226:	6018      	str	r0, [r3, #0]
}
   1a228:	4770      	bx	lr
   1a22a:	bf00      	nop
   1a22c:	10004ee4 	.word	0x10004ee4

0001a230 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   1a230:	b538      	push	{r3, r4, r5, lr}
   1a232:	4604      	mov	r4, r0
   1a234:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1a236:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1a238:	b183      	cbz	r3, 1a25c <os_sched_sleep+0x2c>
   1a23a:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a23c:	649a      	str	r2, [r3, #72]	; 0x48
   1a23e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1a240:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1a242:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   1a244:	2302      	movs	r3, #2
   1a246:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   1a248:	f000 fa10 	bl	1a66c <os_time_get>
   1a24c:	4428      	add	r0, r5
   1a24e:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   1a250:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1a254:	d006      	beq.n	1a264 <os_sched_sleep+0x34>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1a256:	4b18      	ldr	r3, [pc, #96]	; (1a2b8 <os_sched_sleep+0x88>)
   1a258:	681b      	ldr	r3, [r3, #0]
   1a25a:	e011      	b.n	1a280 <os_sched_sleep+0x50>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1a25c:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a25e:	4b17      	ldr	r3, [pc, #92]	; (1a2bc <os_sched_sleep+0x8c>)
   1a260:	605a      	str	r2, [r3, #4]
   1a262:	e7ec      	b.n	1a23e <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   1a264:	7b63      	ldrb	r3, [r4, #13]
   1a266:	f043 0301 	orr.w	r3, r3, #1
   1a26a:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1a26c:	2300      	movs	r3, #0
   1a26e:	6463      	str	r3, [r4, #68]	; 0x44
   1a270:	4b11      	ldr	r3, [pc, #68]	; (1a2b8 <os_sched_sleep+0x88>)
   1a272:	685a      	ldr	r2, [r3, #4]
   1a274:	64a2      	str	r2, [r4, #72]	; 0x48
   1a276:	6014      	str	r4, [r2, #0]
   1a278:	3444      	adds	r4, #68	; 0x44
   1a27a:	605c      	str	r4, [r3, #4]
   1a27c:	e011      	b.n	1a2a2 <os_sched_sleep+0x72>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1a27e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a280:	b13b      	cbz	r3, 1a292 <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1a282:	7b5a      	ldrb	r2, [r3, #13]
   1a284:	f012 0f01 	tst.w	r2, #1
   1a288:	d103      	bne.n	1a292 <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   1a28a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1a28c:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1a28e:	2a00      	cmp	r2, #0
   1a290:	ddf5      	ble.n	1a27e <os_sched_sleep+0x4e>
                break;
            }
        }
        if (entry) {
   1a292:	b143      	cbz	r3, 1a2a6 <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   1a294:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1a296:	64a2      	str	r2, [r4, #72]	; 0x48
   1a298:	6463      	str	r3, [r4, #68]	; 0x44
   1a29a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1a29c:	6014      	str	r4, [r2, #0]
   1a29e:	3444      	adds	r4, #68	; 0x44
   1a2a0:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   1a2a2:	2000      	movs	r0, #0
   1a2a4:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1a2a6:	2300      	movs	r3, #0
   1a2a8:	6463      	str	r3, [r4, #68]	; 0x44
   1a2aa:	4b03      	ldr	r3, [pc, #12]	; (1a2b8 <os_sched_sleep+0x88>)
   1a2ac:	685a      	ldr	r2, [r3, #4]
   1a2ae:	64a2      	str	r2, [r4, #72]	; 0x48
   1a2b0:	6014      	str	r4, [r2, #0]
   1a2b2:	3444      	adds	r4, #68	; 0x44
   1a2b4:	605c      	str	r4, [r3, #4]
   1a2b6:	e7f4      	b.n	1a2a2 <os_sched_sleep+0x72>
   1a2b8:	10000678 	.word	0x10000678
   1a2bc:	10000670 	.word	0x10000670

0001a2c0 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   1a2c0:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   1a2c2:	7b03      	ldrb	r3, [r0, #12]
   1a2c4:	2b02      	cmp	r3, #2
   1a2c6:	d121      	bne.n	1a30c <os_sched_wakeup+0x4c>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   1a2c8:	69c2      	ldr	r2, [r0, #28]
   1a2ca:	b162      	cbz	r2, 1a2e6 <os_sched_wakeup+0x26>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1a2cc:	6813      	ldr	r3, [r2, #0]
   1a2ce:	b33b      	cbz	r3, 1a320 <os_sched_wakeup+0x60>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1a2d0:	4283      	cmp	r3, r0
   1a2d2:	d02f      	beq.n	1a334 <os_sched_wakeup+0x74>
   1a2d4:	461a      	mov	r2, r3
   1a2d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1a2d8:	4283      	cmp	r3, r0
   1a2da:	d1fb      	bne.n	1a2d4 <os_sched_wakeup+0x14>
   1a2dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1a2de:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   1a2e0:	2300      	movs	r3, #0
   1a2e2:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   1a2e4:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   1a2e6:	2301      	movs	r3, #1
   1a2e8:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   1a2ea:	2300      	movs	r3, #0
   1a2ec:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   1a2ee:	7b43      	ldrb	r3, [r0, #13]
   1a2f0:	f023 0301 	bic.w	r3, r3, #1
   1a2f4:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1a2f6:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1a2f8:	b1fb      	cbz	r3, 1a33a <os_sched_wakeup+0x7a>
   1a2fa:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a2fc:	649a      	str	r2, [r3, #72]	; 0x48
   1a2fe:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1a300:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1a302:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   1a304:	f7ff ff46 	bl	1a194 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   1a308:	2000      	movs	r0, #0
   1a30a:	bd08      	pop	{r3, pc}
    assert(t->t_state == OS_TASK_SLEEP);
   1a30c:	f7fa f9fa 	bl	14704 <hal_debugger_connected>
   1a310:	b100      	cbz	r0, 1a314 <os_sched_wakeup+0x54>
   1a312:	be01      	bkpt	0x0001
   1a314:	2300      	movs	r3, #0
   1a316:	461a      	mov	r2, r3
   1a318:	4619      	mov	r1, r3
   1a31a:	4618      	mov	r0, r3
   1a31c:	f7fe fd02 	bl	18d24 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1a320:	f7fa f9f0 	bl	14704 <hal_debugger_connected>
   1a324:	b100      	cbz	r0, 1a328 <os_sched_wakeup+0x68>
   1a326:	be01      	bkpt	0x0001
   1a328:	2300      	movs	r3, #0
   1a32a:	461a      	mov	r2, r3
   1a32c:	4619      	mov	r1, r3
   1a32e:	4618      	mov	r0, r3
   1a330:	f7fe fcf8 	bl	18d24 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1a334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1a336:	6013      	str	r3, [r2, #0]
   1a338:	e7d2      	b.n	1a2e0 <os_sched_wakeup+0x20>
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1a33a:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a33c:	4b01      	ldr	r3, [pc, #4]	; (1a344 <os_sched_wakeup+0x84>)
   1a33e:	605a      	str	r2, [r3, #4]
   1a340:	e7dd      	b.n	1a2fe <os_sched_wakeup+0x3e>
   1a342:	bf00      	nop
   1a344:	10000678 	.word	0x10000678

0001a348 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   1a348:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   1a34a:	f000 f98f 	bl	1a66c <os_time_get>
   1a34e:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   1a350:	f000 fabc 	bl	1a8cc <os_arch_save_sr>
   1a354:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   1a356:	4b0a      	ldr	r3, [pc, #40]	; (1a380 <os_sched_os_timer_exp+0x38>)
   1a358:	6818      	ldr	r0, [r3, #0]
    while (t) {
   1a35a:	e002      	b.n	1a362 <os_sched_os_timer_exp+0x1a>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
            os_sched_wakeup(t);
   1a35c:	f7ff ffb0 	bl	1a2c0 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   1a360:	4620      	mov	r0, r4
    while (t) {
   1a362:	b140      	cbz	r0, 1a376 <os_sched_os_timer_exp+0x2e>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   1a364:	7b43      	ldrb	r3, [r0, #13]
   1a366:	f013 0f01 	tst.w	r3, #1
   1a36a:	d104      	bne.n	1a376 <os_sched_os_timer_exp+0x2e>
        next = TAILQ_NEXT(t, t_os_list);
   1a36c:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   1a36e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1a370:	1aeb      	subs	r3, r5, r3
   1a372:	2b00      	cmp	r3, #0
   1a374:	daf2      	bge.n	1a35c <os_sched_os_timer_exp+0x14>
    }

    OS_EXIT_CRITICAL(sr);
   1a376:	4630      	mov	r0, r6
   1a378:	f000 faae 	bl	1a8d8 <os_arch_restore_sr>
}
   1a37c:	bd70      	pop	{r4, r5, r6, pc}
   1a37e:	bf00      	nop
   1a380:	10000678 	.word	0x10000678

0001a384 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   1a384:	b510      	push	{r4, lr}
   1a386:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   1a388:	f000 faa9 	bl	1a8de <os_arch_in_critical>
   1a38c:	b150      	cbz	r0, 1a3a4 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   1a38e:	4b0e      	ldr	r3, [pc, #56]	; (1a3c8 <os_sched_wakeup_ticks+0x44>)
   1a390:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   1a392:	b19b      	cbz	r3, 1a3bc <os_sched_wakeup_ticks+0x38>
   1a394:	7b5a      	ldrb	r2, [r3, #13]
   1a396:	f012 0f01 	tst.w	r2, #1
   1a39a:	d112      	bne.n	1a3c2 <os_sched_wakeup_ticks+0x3e>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   1a39c:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1a39e:	1b00      	subs	r0, r0, r4
   1a3a0:	d40a      	bmi.n	1a3b8 <os_sched_wakeup_ticks+0x34>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   1a3a2:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   1a3a4:	f7fa f9ae 	bl	14704 <hal_debugger_connected>
   1a3a8:	b100      	cbz	r0, 1a3ac <os_sched_wakeup_ticks+0x28>
   1a3aa:	be01      	bkpt	0x0001
   1a3ac:	2300      	movs	r3, #0
   1a3ae:	461a      	mov	r2, r3
   1a3b0:	4619      	mov	r1, r3
   1a3b2:	4618      	mov	r0, r3
   1a3b4:	f7fe fcb6 	bl	18d24 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   1a3b8:	2000      	movs	r0, #0
   1a3ba:	e7f2      	b.n	1a3a2 <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   1a3bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a3c0:	e7ef      	b.n	1a3a2 <os_sched_wakeup_ticks+0x1e>
   1a3c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1a3c6:	e7ec      	b.n	1a3a2 <os_sched_wakeup_ticks+0x1e>
   1a3c8:	10000678 	.word	0x10000678

0001a3cc <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   1a3cc:	4b01      	ldr	r3, [pc, #4]	; (1a3d4 <os_sched_next_task+0x8>)
   1a3ce:	6818      	ldr	r0, [r3, #0]
   1a3d0:	4770      	bx	lr
   1a3d2:	bf00      	nop
   1a3d4:	10000670 	.word	0x10000670

0001a3d8 <os_sched>:
{
   1a3d8:	b538      	push	{r3, r4, r5, lr}
   1a3da:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1a3dc:	f000 fa76 	bl	1a8cc <os_arch_save_sr>
   1a3e0:	4605      	mov	r5, r0
    if (!next_t) {
   1a3e2:	b134      	cbz	r4, 1a3f2 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   1a3e4:	4620      	mov	r0, r4
   1a3e6:	f000 fa67 	bl	1a8b8 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   1a3ea:	4628      	mov	r0, r5
   1a3ec:	f000 fa74 	bl	1a8d8 <os_arch_restore_sr>
}
   1a3f0:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   1a3f2:	f7ff ffeb 	bl	1a3cc <os_sched_next_task>
   1a3f6:	4604      	mov	r4, r0
   1a3f8:	e7f4      	b.n	1a3e4 <os_sched+0xc>
	...

0001a3fc <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   1a3fc:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   1a3fe:	7b03      	ldrb	r3, [r0, #12]
   1a400:	2b01      	cmp	r3, #1
   1a402:	d000      	beq.n	1a406 <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   1a404:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1a406:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1a408:	b13b      	cbz	r3, 1a41a <os_sched_resort+0x1e>
   1a40a:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a40c:	649a      	str	r2, [r3, #72]	; 0x48
   1a40e:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1a410:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1a412:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   1a414:	f7ff febe 	bl	1a194 <os_sched_insert>
}
   1a418:	e7f4      	b.n	1a404 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1a41a:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a41c:	4b01      	ldr	r3, [pc, #4]	; (1a424 <os_sched_resort+0x28>)
   1a41e:	605a      	str	r2, [r3, #4]
   1a420:	e7f5      	b.n	1a40e <os_sched_resort+0x12>
   1a422:	bf00      	nop
   1a424:	10000670 	.word	0x10000670

0001a428 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   1a428:	2300      	movs	r3, #0
   1a42a:	428b      	cmp	r3, r1
   1a42c:	da04      	bge.n	1a438 <_clear_stack+0x10>
        stack_bottom[i] = OS_STACK_PATTERN;
   1a42e:	4a03      	ldr	r2, [pc, #12]	; (1a43c <_clear_stack+0x14>)
   1a430:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   1a434:	3301      	adds	r3, #1
   1a436:	e7f8      	b.n	1a42a <_clear_stack+0x2>
    }
}
   1a438:	4770      	bx	lr
   1a43a:	bf00      	nop
   1a43c:	deadbeef 	.word	0xdeadbeef

0001a440 <os_task_stacktop_get>:
}

os_stack_t *
os_task_stacktop_get(struct os_task *t)
{
    return &t->t_stackbottom[t->t_stacksize];
   1a440:	6843      	ldr	r3, [r0, #4]
   1a442:	8900      	ldrh	r0, [r0, #8]
}
   1a444:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1a448:	4770      	bx	lr
	...

0001a44c <os_task_init>:
{
   1a44c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
   1a450:	4604      	mov	r4, r0
   1a452:	460d      	mov	r5, r1
   1a454:	4617      	mov	r7, r2
   1a456:	461e      	mov	r6, r3
   1a458:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    memset(t, 0, sizeof(*t));
   1a45c:	2250      	movs	r2, #80	; 0x50
   1a45e:	2100      	movs	r1, #0
   1a460:	f000 fc2d 	bl	1acbe <memset>
    t->t_func = func;
   1a464:	6167      	str	r7, [r4, #20]
    t->t_arg = arg;
   1a466:	61a6      	str	r6, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   1a468:	f000 fa30 	bl	1a8cc <os_arch_save_sr>
    rc = g_task_id;
   1a46c:	4b2e      	ldr	r3, [pc, #184]	; (1a528 <os_task_init+0xdc>)
   1a46e:	781e      	ldrb	r6, [r3, #0]
    g_task_id++;
   1a470:	1c72      	adds	r2, r6, #1
   1a472:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1a474:	f000 fa30 	bl	1a8d8 <os_arch_restore_sr>
    t->t_taskid = os_task_next_id();
   1a478:	72a6      	strb	r6, [r4, #10]
    t->t_prio = prio;
   1a47a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1a47e:	72e3      	strb	r3, [r4, #11]
    t->t_state = OS_TASK_READY;
   1a480:	2301      	movs	r3, #1
   1a482:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   1a484:	6125      	str	r5, [r4, #16]
    t->t_next_wakeup = 0;
   1a486:	2300      	movs	r3, #0
   1a488:	6363      	str	r3, [r4, #52]	; 0x34
    rc = os_sanity_check_init(&t->t_sanity_check);
   1a48a:	f104 0620 	add.w	r6, r4, #32
   1a48e:	4630      	mov	r0, r6
   1a490:	f7ff fe1e 	bl	1a0d0 <os_sanity_check_init>
    if (rc != OS_OK) {
   1a494:	4605      	mov	r5, r0
   1a496:	2800      	cmp	r0, #0
   1a498:	d139      	bne.n	1a50e <os_task_init+0xc2>
    if (sanity_itvl != OS_WAIT_FOREVER) {
   1a49a:	9b07      	ldr	r3, [sp, #28]
   1a49c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1a4a0:	d005      	beq.n	1a4ae <os_task_init+0x62>
        sc->sc_checkin_itvl = sanity_itvl;
   1a4a2:	6263      	str	r3, [r4, #36]	; 0x24
        rc = os_sanity_check_register(sc);
   1a4a4:	4630      	mov	r0, r6
   1a4a6:	f7ff fe1b 	bl	1a0e0 <os_sanity_check_register>
        if (rc != OS_OK) {
   1a4aa:	4605      	mov	r5, r0
   1a4ac:	bb78      	cbnz	r0, 1a50e <os_task_init+0xc2>
    _clear_stack(stack_bottom, stack_size);
   1a4ae:	4649      	mov	r1, r9
   1a4b0:	9808      	ldr	r0, [sp, #32]
   1a4b2:	f7ff ffb9 	bl	1a428 <_clear_stack>
    t->t_stackbottom = stack_bottom;
   1a4b6:	9b08      	ldr	r3, [sp, #32]
   1a4b8:	6063      	str	r3, [r4, #4]
    t->t_stacksize = stack_size;
   1a4ba:	f8a4 9008 	strh.w	r9, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, os_task_stacktop_get(t),
   1a4be:	4620      	mov	r0, r4
   1a4c0:	f7ff ffbe 	bl	1a440 <os_task_stacktop_get>
   1a4c4:	4601      	mov	r1, r0
   1a4c6:	464a      	mov	r2, r9
   1a4c8:	4620      	mov	r0, r4
   1a4ca:	f000 fa0d 	bl	1a8e8 <os_arch_task_stack_init>
   1a4ce:	6020      	str	r0, [r4, #0]
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1a4d0:	4b16      	ldr	r3, [pc, #88]	; (1a52c <os_task_init+0xe0>)
   1a4d2:	681b      	ldr	r3, [r3, #0]
   1a4d4:	b17b      	cbz	r3, 1a4f6 <os_task_init+0xaa>
        assert(t->t_prio != task->t_prio);
   1a4d6:	7ae1      	ldrb	r1, [r4, #11]
   1a4d8:	7ada      	ldrb	r2, [r3, #11]
   1a4da:	4291      	cmp	r1, r2
   1a4dc:	d001      	beq.n	1a4e2 <os_task_init+0x96>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1a4de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a4e0:	e7f8      	b.n	1a4d4 <os_task_init+0x88>
        assert(t->t_prio != task->t_prio);
   1a4e2:	f7fa f90f 	bl	14704 <hal_debugger_connected>
   1a4e6:	b100      	cbz	r0, 1a4ea <os_task_init+0x9e>
   1a4e8:	be01      	bkpt	0x0001
   1a4ea:	2300      	movs	r3, #0
   1a4ec:	461a      	mov	r2, r3
   1a4ee:	4619      	mov	r1, r3
   1a4f0:	4618      	mov	r0, r3
   1a4f2:	f7fe fc17 	bl	18d24 <__assert_func>
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   1a4f6:	6423      	str	r3, [r4, #64]	; 0x40
   1a4f8:	4b0c      	ldr	r3, [pc, #48]	; (1a52c <os_task_init+0xe0>)
   1a4fa:	685a      	ldr	r2, [r3, #4]
   1a4fc:	6014      	str	r4, [r2, #0]
   1a4fe:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1a502:	605a      	str	r2, [r3, #4]
    rc = os_sched_insert(t);
   1a504:	4620      	mov	r0, r4
   1a506:	f7ff fe45 	bl	1a194 <os_sched_insert>
   1a50a:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   1a50c:	b110      	cbz	r0, 1a514 <os_task_init+0xc8>
}
   1a50e:	4628      	mov	r0, r5
   1a510:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    if (os_started()) {
   1a514:	f7fe fcf4 	bl	18f00 <os_started>
   1a518:	b908      	cbnz	r0, 1a51e <os_task_init+0xd2>
    return (0);
   1a51a:	4605      	mov	r5, r0
   1a51c:	e7f7      	b.n	1a50e <os_task_init+0xc2>
        os_sched(NULL);
   1a51e:	2000      	movs	r0, #0
   1a520:	f7ff ff5a 	bl	1a3d8 <os_sched>
   1a524:	e7f3      	b.n	1a50e <os_task_init+0xc2>
   1a526:	bf00      	nop
   1a528:	10004ef4 	.word	0x10004ef4
   1a52c:	10004eec 	.word	0x10004eec

0001a530 <os_task_info_get>:
    return rc;
}

void
os_task_info_get(const struct os_task *task, struct os_task_info *oti)
{
   1a530:	b570      	push	{r4, r5, r6, lr}
   1a532:	4606      	mov	r6, r0
    os_stack_t *bottom;
    os_stack_t *top;

    oti->oti_prio = task->t_prio;
   1a534:	7ac3      	ldrb	r3, [r0, #11]
   1a536:	700b      	strb	r3, [r1, #0]
    oti->oti_taskid = task->t_taskid;
   1a538:	7a83      	ldrb	r3, [r0, #10]
   1a53a:	704b      	strb	r3, [r1, #1]
    oti->oti_state = task->t_state;
   1a53c:	7b03      	ldrb	r3, [r0, #12]
   1a53e:	708b      	strb	r3, [r1, #2]

    bottom = task->t_stackbottom;
   1a540:	6843      	ldr	r3, [r0, #4]
    top = bottom + task->t_stacksize;
   1a542:	8905      	ldrh	r5, [r0, #8]
   1a544:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    while (bottom < top) {
   1a548:	42ab      	cmp	r3, r5
   1a54a:	d205      	bcs.n	1a558 <os_task_info_get+0x28>
        if (*bottom != OS_STACK_PATTERN) {
   1a54c:	681c      	ldr	r4, [r3, #0]
   1a54e:	4a0e      	ldr	r2, [pc, #56]	; (1a588 <os_task_info_get+0x58>)
   1a550:	4294      	cmp	r4, r2
   1a552:	d101      	bne.n	1a558 <os_task_info_get+0x28>
            break;
        }
        ++bottom;
   1a554:	3304      	adds	r3, #4
   1a556:	e7f7      	b.n	1a548 <os_task_info_get+0x18>
    }

    oti->oti_stkusage = (uint16_t) (top - bottom);
   1a558:	1aeb      	subs	r3, r5, r3
   1a55a:	f3c3 038f 	ubfx	r3, r3, #2, #16
   1a55e:	808b      	strh	r3, [r1, #4]
    oti->oti_stksize = task->t_stacksize;
   1a560:	8933      	ldrh	r3, [r6, #8]
   1a562:	80cb      	strh	r3, [r1, #6]
    oti->oti_cswcnt = task->t_ctx_sw_cnt;
   1a564:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   1a566:	608b      	str	r3, [r1, #8]
    oti->oti_runtime = task->t_run_time;
   1a568:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1a56a:	60cb      	str	r3, [r1, #12]
    oti->oti_last_checkin = task->t_sanity_check.sc_checkin_last;
   1a56c:	6a33      	ldr	r3, [r6, #32]
   1a56e:	610b      	str	r3, [r1, #16]
    oti->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
                            task->t_sanity_check.sc_checkin_itvl;
   1a570:	6a72      	ldr	r2, [r6, #36]	; 0x24
    oti->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
   1a572:	4413      	add	r3, r2
   1a574:	614b      	str	r3, [r1, #20]
    oti->oti_name[0] = '\0';
   1a576:	4608      	mov	r0, r1
   1a578:	2300      	movs	r3, #0
   1a57a:	f800 3f18 	strb.w	r3, [r0, #24]!
    strncat(oti->oti_name, task->t_name, sizeof(oti->oti_name) - 1);
   1a57e:	221f      	movs	r2, #31
   1a580:	6931      	ldr	r1, [r6, #16]
   1a582:	f000 fbe5 	bl	1ad50 <strncat>
}
   1a586:	bd70      	pop	{r4, r5, r6, pc}
   1a588:	deadbeef 	.word	0xdeadbeef

0001a58c <os_task_info_get_next>:

struct os_task *
os_task_info_get_next(const struct os_task *prev, struct os_task_info *oti)
{
   1a58c:	b510      	push	{r4, lr}
    struct os_task *next;

    if (prev != NULL) {
   1a58e:	b130      	cbz	r0, 1a59e <os_task_info_get_next+0x12>
        next = STAILQ_NEXT(prev, t_os_task_list);
   1a590:	6c04      	ldr	r4, [r0, #64]	; 0x40
    } else {
        next = STAILQ_FIRST(&g_os_task_list);
    }

    if (next) {
   1a592:	b114      	cbz	r4, 1a59a <os_task_info_get_next+0xe>
        os_task_info_get(next, oti);
   1a594:	4620      	mov	r0, r4
   1a596:	f7ff ffcb 	bl	1a530 <os_task_info_get>
    }

    return next;
}
   1a59a:	4620      	mov	r0, r4
   1a59c:	bd10      	pop	{r4, pc}
        next = STAILQ_FIRST(&g_os_task_list);
   1a59e:	4b01      	ldr	r3, [pc, #4]	; (1a5a4 <os_task_info_get_next+0x18>)
   1a5a0:	681c      	ldr	r4, [r3, #0]
   1a5a2:	e7f6      	b.n	1a592 <os_task_info_get_next+0x6>
   1a5a4:	10004eec 	.word	0x10004eec

0001a5a8 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   1a5a8:	b430      	push	{r4, r5}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   1a5aa:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   1a5ac:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   1a5b0:	e9d1 4500 	ldrd	r4, r5, [r1]
   1a5b4:	18e4      	adds	r4, r4, r3
   1a5b6:	f145 0500 	adc.w	r5, r5, #0
   1a5ba:	e9c2 4500 	strd	r4, r5, [r2]
   1a5be:	688b      	ldr	r3, [r1, #8]
   1a5c0:	f641 6184 	movw	r1, #7812	; 0x1e84
   1a5c4:	fb01 3000 	mla	r0, r1, r0, r3
   1a5c8:	6090      	str	r0, [r2, #8]
   1a5ca:	4b07      	ldr	r3, [pc, #28]	; (1a5e8 <os_deltatime+0x40>)
   1a5cc:	4298      	cmp	r0, r3
   1a5ce:	dd09      	ble.n	1a5e4 <os_deltatime+0x3c>
   1a5d0:	1c61      	adds	r1, r4, #1
   1a5d2:	f145 0300 	adc.w	r3, r5, #0
   1a5d6:	6011      	str	r1, [r2, #0]
   1a5d8:	6053      	str	r3, [r2, #4]
   1a5da:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   1a5de:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   1a5e2:	6090      	str	r0, [r2, #8]
}
   1a5e4:	bc30      	pop	{r4, r5}
   1a5e6:	4770      	bx	lr
   1a5e8:	000f423f 	.word	0x000f423f

0001a5ec <os_time_change_notify>:
    return 0;
}

static void
os_time_change_notify(const struct os_time_change_info *info)
{
   1a5ec:	b538      	push	{r3, r4, r5, lr}
   1a5ee:	4605      	mov	r5, r0
    struct os_time_change_listener *listener;

    STAILQ_FOREACH(listener, &os_time_change_listeners, tcl_next) {
   1a5f0:	4b04      	ldr	r3, [pc, #16]	; (1a604 <os_time_change_notify+0x18>)
   1a5f2:	681c      	ldr	r4, [r3, #0]
   1a5f4:	b12c      	cbz	r4, 1a602 <os_time_change_notify+0x16>
        listener->tcl_fn(info, listener->tcl_arg);
   1a5f6:	6823      	ldr	r3, [r4, #0]
   1a5f8:	6861      	ldr	r1, [r4, #4]
   1a5fa:	4628      	mov	r0, r5
   1a5fc:	4798      	blx	r3
    STAILQ_FOREACH(listener, &os_time_change_listeners, tcl_next) {
   1a5fe:	68a4      	ldr	r4, [r4, #8]
   1a600:	e7f8      	b.n	1a5f4 <os_time_change_notify+0x8>
    }
}
   1a602:	bd38      	pop	{r3, r4, r5, pc}
   1a604:	10000680 	.word	0x10000680

0001a608 <os_time_tick>:
{
   1a608:	b570      	push	{r4, r5, r6, lr}
    assert(ticks >= 0);
   1a60a:	1e04      	subs	r4, r0, #0
   1a60c:	db0d      	blt.n	1a62a <os_time_tick+0x22>
    OS_ENTER_CRITICAL(sr);
   1a60e:	f000 f95d 	bl	1a8cc <os_arch_save_sr>
   1a612:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   1a614:	4913      	ldr	r1, [pc, #76]	; (1a664 <os_time_tick+0x5c>)
   1a616:	680a      	ldr	r2, [r1, #0]
    g_os_time += ticks;
   1a618:	18a3      	adds	r3, r4, r2
   1a61a:	600b      	str	r3, [r1, #0]
    if ((prev_os_time ^ g_os_time) >> 31) {
   1a61c:	ea93 0f02 	teq	r3, r2
   1a620:	d40d      	bmi.n	1a63e <os_time_tick+0x36>
    OS_EXIT_CRITICAL(sr);
   1a622:	4628      	mov	r0, r5
   1a624:	f000 f958 	bl	1a8d8 <os_arch_restore_sr>
}
   1a628:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   1a62a:	f7fa f86b 	bl	14704 <hal_debugger_connected>
   1a62e:	b100      	cbz	r0, 1a632 <os_time_tick+0x2a>
   1a630:	be01      	bkpt	0x0001
   1a632:	2300      	movs	r3, #0
   1a634:	461a      	mov	r2, r3
   1a636:	4619      	mov	r1, r3
   1a638:	4618      	mov	r0, r3
   1a63a:	f7fe fb73 	bl	18d24 <__assert_func>
        delta = g_os_time - basetod.ostime;
   1a63e:	4e0a      	ldr	r6, [pc, #40]	; (1a668 <os_time_tick+0x60>)
   1a640:	4631      	mov	r1, r6
   1a642:	f851 4b08 	ldr.w	r4, [r1], #8
   1a646:	1b1c      	subs	r4, r3, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   1a648:	460a      	mov	r2, r1
   1a64a:	4620      	mov	r0, r4
   1a64c:	f7ff ffac 	bl	1a5a8 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   1a650:	f106 0118 	add.w	r1, r6, #24
   1a654:	460a      	mov	r2, r1
   1a656:	4620      	mov	r0, r4
   1a658:	f7ff ffa6 	bl	1a5a8 <os_deltatime>
        basetod.ostime = g_os_time;
   1a65c:	4b01      	ldr	r3, [pc, #4]	; (1a664 <os_time_tick+0x5c>)
   1a65e:	681b      	ldr	r3, [r3, #0]
   1a660:	6033      	str	r3, [r6, #0]
   1a662:	e7de      	b.n	1a622 <os_time_tick+0x1a>
   1a664:	10004f28 	.word	0x10004f28
   1a668:	10004ef8 	.word	0x10004ef8

0001a66c <os_time_get>:
}
   1a66c:	4b01      	ldr	r3, [pc, #4]	; (1a674 <os_time_get+0x8>)
   1a66e:	6818      	ldr	r0, [r3, #0]
   1a670:	4770      	bx	lr
   1a672:	bf00      	nop
   1a674:	10004f28 	.word	0x10004f28

0001a678 <os_time_advance>:
{
   1a678:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   1a67a:	1e04      	subs	r4, r0, #0
   1a67c:	db02      	blt.n	1a684 <os_time_advance+0xc>
    if (ticks > 0) {
   1a67e:	2c00      	cmp	r4, #0
   1a680:	dc0a      	bgt.n	1a698 <os_time_advance+0x20>
}
   1a682:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   1a684:	f7fa f83e 	bl	14704 <hal_debugger_connected>
   1a688:	b100      	cbz	r0, 1a68c <os_time_advance+0x14>
   1a68a:	be01      	bkpt	0x0001
   1a68c:	2300      	movs	r3, #0
   1a68e:	461a      	mov	r2, r3
   1a690:	4619      	mov	r1, r3
   1a692:	4618      	mov	r0, r3
   1a694:	f7fe fb46 	bl	18d24 <__assert_func>
        if (!os_started()) {
   1a698:	f7fe fc32 	bl	18f00 <os_started>
   1a69c:	b920      	cbnz	r0, 1a6a8 <os_time_advance+0x30>
            g_os_time += ticks;
   1a69e:	4b08      	ldr	r3, [pc, #32]	; (1a6c0 <os_time_advance+0x48>)
   1a6a0:	6818      	ldr	r0, [r3, #0]
   1a6a2:	4420      	add	r0, r4
   1a6a4:	6018      	str	r0, [r3, #0]
   1a6a6:	e7ec      	b.n	1a682 <os_time_advance+0xa>
            os_time_tick(ticks);
   1a6a8:	4620      	mov	r0, r4
   1a6aa:	f7ff ffad 	bl	1a608 <os_time_tick>
            os_callout_tick();
   1a6ae:	f7fe fd89 	bl	191c4 <os_callout_tick>
            os_sched_os_timer_exp();
   1a6b2:	f7ff fe49 	bl	1a348 <os_sched_os_timer_exp>
            os_sched(NULL);
   1a6b6:	2000      	movs	r0, #0
   1a6b8:	f7ff fe8e 	bl	1a3d8 <os_sched>
}
   1a6bc:	e7e1      	b.n	1a682 <os_time_advance+0xa>
   1a6be:	bf00      	nop
   1a6c0:	10004f28 	.word	0x10004f28

0001a6c4 <os_time_delay>:
    if (osticks > 0) {
   1a6c4:	b900      	cbnz	r0, 1a6c8 <os_time_delay+0x4>
   1a6c6:	4770      	bx	lr
{
   1a6c8:	b538      	push	{r3, r4, r5, lr}
   1a6ca:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1a6cc:	f000 f8fe 	bl	1a8cc <os_arch_save_sr>
   1a6d0:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   1a6d2:	f7ff fda1 	bl	1a218 <os_sched_get_current_task>
   1a6d6:	4621      	mov	r1, r4
   1a6d8:	f7ff fdaa 	bl	1a230 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   1a6dc:	4628      	mov	r0, r5
   1a6de:	f000 f8fb 	bl	1a8d8 <os_arch_restore_sr>
        os_sched(NULL);
   1a6e2:	2000      	movs	r0, #0
   1a6e4:	f7ff fe78 	bl	1a3d8 <os_sched>
}
   1a6e8:	bd38      	pop	{r3, r4, r5, pc}
	...

0001a6ec <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
   1a6ec:	b570      	push	{r4, r5, r6, lr}
   1a6ee:	4605      	mov	r5, r0
   1a6f0:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
   1a6f2:	f000 f8eb 	bl	1a8cc <os_arch_save_sr>
   1a6f6:	4606      	mov	r6, r0
    if (tv != NULL) {
   1a6f8:	b145      	cbz	r5, 1a70c <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
   1a6fa:	f7ff ffb7 	bl	1a66c <os_time_get>
   1a6fe:	4908      	ldr	r1, [pc, #32]	; (1a720 <os_gettimeofday+0x34>)
   1a700:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
   1a704:	462a      	mov	r2, r5
   1a706:	1ac0      	subs	r0, r0, r3
   1a708:	f7ff ff4e 	bl	1a5a8 <os_deltatime>
    }

    if (tz != NULL) {
   1a70c:	b114      	cbz	r4, 1a714 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
   1a70e:	4b04      	ldr	r3, [pc, #16]	; (1a720 <os_gettimeofday+0x34>)
   1a710:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1a712:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
   1a714:	4630      	mov	r0, r6
   1a716:	f000 f8df 	bl	1a8d8 <os_arch_restore_sr>

    return (0);
}
   1a71a:	2000      	movs	r0, #0
   1a71c:	bd70      	pop	{r4, r5, r6, pc}
   1a71e:	bf00      	nop
   1a720:	10004ef8 	.word	0x10004ef8

0001a724 <os_time_is_set>:

bool
os_time_is_set(void)
{
    return basetod.utctime.tv_sec > 0;
   1a724:	4b04      	ldr	r3, [pc, #16]	; (1a738 <os_time_is_set+0x14>)
   1a726:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
   1a72a:	2a01      	cmp	r2, #1
   1a72c:	f173 0300 	sbcs.w	r3, r3, #0
}
   1a730:	bfac      	ite	ge
   1a732:	2001      	movge	r0, #1
   1a734:	2000      	movlt	r0, #0
   1a736:	4770      	bx	lr
   1a738:	10004ef8 	.word	0x10004ef8

0001a73c <os_time_populate_info>:
{
   1a73c:	b510      	push	{r4, lr}
   1a73e:	4604      	mov	r4, r0
    if (new_tv == NULL && new_tz == NULL) {
   1a740:	4608      	mov	r0, r1
   1a742:	b181      	cbz	r1, 1a766 <os_time_populate_info+0x2a>
    if (new_tv == NULL) {
   1a744:	b1a0      	cbz	r0, 1a770 <os_time_populate_info+0x34>
    if (new_tz == NULL) {
   1a746:	b1aa      	cbz	r2, 1a774 <os_time_populate_info+0x38>
    info->tci_prev_tv = &basetod.utctime;
   1a748:	4b0b      	ldr	r3, [pc, #44]	; (1a778 <os_time_populate_info+0x3c>)
   1a74a:	f103 0118 	add.w	r1, r3, #24
   1a74e:	6021      	str	r1, [r4, #0]
    info->tci_cur_tv = new_tv;
   1a750:	60a0      	str	r0, [r4, #8]
    info->tci_prev_tz = &basetod.timezone;
   1a752:	3328      	adds	r3, #40	; 0x28
   1a754:	6063      	str	r3, [r4, #4]
    info->tci_cur_tz = new_tz;
   1a756:	60e2      	str	r2, [r4, #12]
    info->tci_newly_synced = !os_time_is_set();
   1a758:	f7ff ffe4 	bl	1a724 <os_time_is_set>
   1a75c:	f080 0001 	eor.w	r0, r0, #1
   1a760:	7420      	strb	r0, [r4, #16]
    return 0;
   1a762:	2000      	movs	r0, #0
}
   1a764:	bd10      	pop	{r4, pc}
    if (new_tv == NULL && new_tz == NULL) {
   1a766:	2a00      	cmp	r2, #0
   1a768:	d1ec      	bne.n	1a744 <os_time_populate_info+0x8>
        return SYS_EINVAL;
   1a76a:	f06f 0001 	mvn.w	r0, #1
   1a76e:	e7f9      	b.n	1a764 <os_time_populate_info+0x28>
        new_tv = &basetod.utctime;
   1a770:	4802      	ldr	r0, [pc, #8]	; (1a77c <os_time_populate_info+0x40>)
   1a772:	e7e8      	b.n	1a746 <os_time_populate_info+0xa>
        new_tz = &basetod.timezone;
   1a774:	4a02      	ldr	r2, [pc, #8]	; (1a780 <os_time_populate_info+0x44>)
   1a776:	e7e7      	b.n	1a748 <os_time_populate_info+0xc>
   1a778:	10004ef8 	.word	0x10004ef8
   1a77c:	10004f10 	.word	0x10004f10
   1a780:	10004f20 	.word	0x10004f20

0001a784 <os_settimeofday>:
{
   1a784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a788:	b087      	sub	sp, #28
   1a78a:	4604      	mov	r4, r0
   1a78c:	460d      	mov	r5, r1
    OS_ENTER_CRITICAL(sr);
   1a78e:	f000 f89d 	bl	1a8cc <os_arch_save_sr>
   1a792:	4607      	mov	r7, r0
    rc = os_time_populate_info(&info, utctime, tz);
   1a794:	462a      	mov	r2, r5
   1a796:	4621      	mov	r1, r4
   1a798:	a801      	add	r0, sp, #4
   1a79a:	f7ff ffcf 	bl	1a73c <os_time_populate_info>
   1a79e:	4606      	mov	r6, r0
    if (utctime != NULL) {
   1a7a0:	b1bc      	cbz	r4, 1a7d2 <os_settimeofday+0x4e>
        delta = os_time_get() - basetod.ostime;
   1a7a2:	f7ff ff63 	bl	1a66c <os_time_get>
   1a7a6:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1a7f4 <os_settimeofday+0x70>
   1a7aa:	4641      	mov	r1, r8
   1a7ac:	f851 3b08 	ldr.w	r3, [r1], #8
   1a7b0:	eba0 0903 	sub.w	r9, r0, r3
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   1a7b4:	460a      	mov	r2, r1
   1a7b6:	4648      	mov	r0, r9
   1a7b8:	f7ff fef6 	bl	1a5a8 <os_deltatime>
        basetod.utctime = *utctime;
   1a7bc:	f108 0c18 	add.w	ip, r8, #24
   1a7c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1a7c4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        basetod.ostime += delta;
   1a7c8:	f8d8 0000 	ldr.w	r0, [r8]
   1a7cc:	4448      	add	r0, r9
   1a7ce:	f8c8 0000 	str.w	r0, [r8]
    if (tz != NULL) {
   1a7d2:	b115      	cbz	r5, 1a7da <os_settimeofday+0x56>
        basetod.timezone = *tz;
   1a7d4:	6828      	ldr	r0, [r5, #0]
   1a7d6:	4b07      	ldr	r3, [pc, #28]	; (1a7f4 <os_settimeofday+0x70>)
   1a7d8:	6298      	str	r0, [r3, #40]	; 0x28
    OS_EXIT_CRITICAL(sr);
   1a7da:	4638      	mov	r0, r7
   1a7dc:	f000 f87c 	bl	1a8d8 <os_arch_restore_sr>
    if (notify) {
   1a7e0:	b11e      	cbz	r6, 1a7ea <os_settimeofday+0x66>
}
   1a7e2:	2000      	movs	r0, #0
   1a7e4:	b007      	add	sp, #28
   1a7e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        os_time_change_notify(&info);
   1a7ea:	a801      	add	r0, sp, #4
   1a7ec:	f7ff fefe 	bl	1a5ec <os_time_change_notify>
   1a7f0:	e7f7      	b.n	1a7e2 <os_settimeofday+0x5e>
   1a7f2:	bf00      	nop
   1a7f4:	10004ef8 	.word	0x10004ef8

0001a7f8 <os_get_uptime>:

void
os_get_uptime(struct os_timeval *tvp)
{
   1a7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a7fa:	b085      	sub	sp, #20
   1a7fc:	4606      	mov	r6, r0
  struct os_timeval tv;
  os_time_t delta;
  os_sr_t sr;
  os_time_t ostime;

  OS_ENTER_CRITICAL(sr);
   1a7fe:	f000 f865 	bl	1a8cc <os_arch_save_sr>
   1a802:	4607      	mov	r7, r0
  tv = basetod.uptime;
   1a804:	4d0a      	ldr	r5, [pc, #40]	; (1a830 <os_get_uptime+0x38>)
   1a806:	466c      	mov	r4, sp
   1a808:	f105 0308 	add.w	r3, r5, #8
   1a80c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1a80e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ostime = basetod.ostime;
   1a812:	682d      	ldr	r5, [r5, #0]
  delta = os_time_get() - ostime;
   1a814:	f7ff ff2a 	bl	1a66c <os_time_get>
   1a818:	1b45      	subs	r5, r0, r5
  OS_EXIT_CRITICAL(sr);
   1a81a:	4638      	mov	r0, r7
   1a81c:	f000 f85c 	bl	1a8d8 <os_arch_restore_sr>

  os_deltatime(delta, &tv, tvp);
   1a820:	4632      	mov	r2, r6
   1a822:	4621      	mov	r1, r4
   1a824:	4628      	mov	r0, r5
   1a826:	f7ff febf 	bl	1a5a8 <os_deltatime>
}
   1a82a:	b005      	add	sp, #20
   1a82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a82e:	bf00      	nop
   1a830:	10004ef8 	.word	0x10004ef8

0001a834 <os_get_uptime_usec>:

int64_t
os_get_uptime_usec(void)
{
   1a834:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a836:	b085      	sub	sp, #20
  struct os_timeval tv;

  os_get_uptime(&tv);
   1a838:	4668      	mov	r0, sp
   1a83a:	f7ff ffdd 	bl	1a7f8 <os_get_uptime>

  return (tv.tv_sec * 1000000 + tv.tv_usec);
   1a83e:	9900      	ldr	r1, [sp, #0]
   1a840:	9f01      	ldr	r7, [sp, #4]
   1a842:	0178      	lsls	r0, r7, #5
   1a844:	014b      	lsls	r3, r1, #5
   1a846:	ea40 62d1 	orr.w	r2, r0, r1, lsr #27
   1a84a:	1a5b      	subs	r3, r3, r1
   1a84c:	eb62 0207 	sbc.w	r2, r2, r7
   1a850:	0250      	lsls	r0, r2, #9
   1a852:	ea40 50d3 	orr.w	r0, r0, r3, lsr #23
   1a856:	025e      	lsls	r6, r3, #9
   1a858:	4602      	mov	r2, r0
   1a85a:	1873      	adds	r3, r6, r1
   1a85c:	eb47 0202 	adc.w	r2, r7, r2
   1a860:	0196      	lsls	r6, r2, #6
   1a862:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
   1a866:	0198      	lsls	r0, r3, #6
   1a868:	1ac3      	subs	r3, r0, r3
   1a86a:	eb66 0202 	sbc.w	r2, r6, r2
   1a86e:	185c      	adds	r4, r3, r1
   1a870:	eb42 0507 	adc.w	r5, r2, r7
}
   1a874:	9802      	ldr	r0, [sp, #8]
   1a876:	4603      	mov	r3, r0
   1a878:	1820      	adds	r0, r4, r0
   1a87a:	eb45 71e3 	adc.w	r1, r5, r3, asr #31
   1a87e:	b005      	add	sp, #20
   1a880:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a882 <os_time_ms_to_ticks>:

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
   1a882:	b570      	push	{r4, r5, r6, lr}
   1a884:	460e      	mov	r6, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   1a886:	0e45      	lsrs	r5, r0, #25
   1a888:	01c4      	lsls	r4, r0, #7
   1a88a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a88e:	2300      	movs	r3, #0
   1a890:	4620      	mov	r0, r4
   1a892:	4629      	mov	r1, r5
   1a894:	f7f9 fd3a 	bl	1430c <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
   1a898:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
   1a89c:	bf08      	it	eq
   1a89e:	2c00      	cmpeq	r4, #0
   1a8a0:	d202      	bcs.n	1a8a8 <os_time_ms_to_ticks+0x26>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
   1a8a2:	6030      	str	r0, [r6, #0]
    return 0;
   1a8a4:	2000      	movs	r0, #0
}
   1a8a6:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   1a8a8:	2002      	movs	r0, #2
   1a8aa:	e7fc      	b.n	1a8a6 <os_time_ms_to_ticks+0x24>

0001a8ac <os_arch_task_return_handler>:
{
    /*
     * If you are stuck here it means that task finished by
     * simple return which is not supported.
     */
    while (1);
   1a8ac:	e7fe      	b.n	1a8ac <os_arch_task_return_handler>

0001a8ae <timer_handler>:
{
   1a8ae:	b508      	push	{r3, lr}
    os_time_advance(1);
   1a8b0:	2001      	movs	r0, #1
   1a8b2:	f7ff fee1 	bl	1a678 <os_time_advance>
}
   1a8b6:	bd08      	pop	{r3, pc}

0001a8b8 <os_arch_ctx_sw>:
{
   1a8b8:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   1a8ba:	f7ff fc95 	bl	1a1e8 <os_sched_ctx_sw_hook>
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   1a8be:	4b02      	ldr	r3, [pc, #8]	; (1a8c8 <os_arch_ctx_sw+0x10>)
   1a8c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1a8c4:	605a      	str	r2, [r3, #4]
}
   1a8c6:	bd08      	pop	{r3, pc}
   1a8c8:	e000ed00 	.word	0xe000ed00

0001a8cc <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a8cc:	f3ef 8010 	mrs	r0, PRIMASK
    isr_ctx = __get_PRIMASK() & 1;
   1a8d0:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("cpsid i" : : : "memory");
   1a8d4:	b672      	cpsid	i
}
   1a8d6:	4770      	bx	lr

0001a8d8 <os_arch_restore_sr>:
    if (!isr_ctx) {
   1a8d8:	b900      	cbnz	r0, 1a8dc <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   1a8da:	b662      	cpsie	i
}
   1a8dc:	4770      	bx	lr

0001a8de <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a8de:	f3ef 8010 	mrs	r0, PRIMASK
}
   1a8e2:	f000 0001 	and.w	r0, r0, #1
   1a8e6:	4770      	bx	lr

0001a8e8 <os_arch_task_stack_init>:
}

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   1a8e8:	b570      	push	{r4, r5, r6, lr}
   1a8ea:	4606      	mov	r6, r0
   1a8ec:	460c      	mov	r4, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   1a8ee:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40

    /* Zero out R1-R3, R12 */
    for (i = 9; i < 13; ++i) {
   1a8f2:	2309      	movs	r3, #9
   1a8f4:	e003      	b.n	1a8fe <os_arch_task_stack_init+0x16>
        s[i] = 0;
   1a8f6:	2200      	movs	r2, #0
   1a8f8:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    for (i = 9; i < 13; ++i) {
   1a8fc:	3301      	adds	r3, #1
   1a8fe:	2b0c      	cmp	r3, #12
   1a900:	ddf9      	ble.n	1a8f6 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   1a902:	4628      	mov	r0, r5
   1a904:	f7f9 fc58 	bl	141b8 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   1a908:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1a90c:	f844 3c04 	str.w	r3, [r4, #-4]
    sf->pc = (uint32_t)t->t_func;
   1a910:	6973      	ldr	r3, [r6, #20]
   1a912:	f844 3c08 	str.w	r3, [r4, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   1a916:	69b3      	ldr	r3, [r6, #24]
   1a918:	f844 3c20 	str.w	r3, [r4, #-32]
    /* Set function to cache returns from tasks. */
    sf->lr = (uint32_t)os_arch_task_return_handler;
   1a91c:	4b02      	ldr	r3, [pc, #8]	; (1a928 <os_arch_task_stack_init+0x40>)
   1a91e:	f844 3c0c 	str.w	r3, [r4, #-12]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
#endif

    return (s);
}
   1a922:	4628      	mov	r0, r5
   1a924:	bd70      	pop	{r4, r5, r6, pc}
   1a926:	bf00      	nop
   1a928:	0001a8ad 	.word	0x0001a8ad

0001a92c <os_arch_init>:

void
os_arch_init(void)
{
   1a92c:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1a92e:	4a04      	ldr	r2, [pc, #16]	; (1a940 <os_arch_init+0x14>)
   1a930:	6953      	ldr	r3, [r2, #20]
   1a932:	f043 0310 	orr.w	r3, r3, #16
   1a936:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   1a938:	f7fe fae8 	bl	18f0c <os_init_idle_task>
}
   1a93c:	bd08      	pop	{r3, pc}
   1a93e:	bf00      	nop
   1a940:	e000ed00 	.word	0xe000ed00

0001a944 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   1a944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1a946:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1a94a:	b90c      	cbnz	r4, 1a950 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1a94c:	2400      	movs	r4, #0
   1a94e:	e009      	b.n	1a964 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   1a950:	2007      	movs	r0, #7
   1a952:	e02e      	b.n	1a9b2 <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   1a954:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   1a958:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   1a95c:	26ff      	movs	r6, #255	; 0xff
   1a95e:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1a962:	3401      	adds	r4, #1
   1a964:	2cef      	cmp	r4, #239	; 0xef
   1a966:	d9f5      	bls.n	1a954 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1a968:	f06f 040d 	mvn.w	r4, #13
   1a96c:	e007      	b.n	1a97e <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   1a96e:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a970:	4e12      	ldr	r6, [pc, #72]	; (1a9bc <os_arch_os_init+0x78>)
   1a972:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a974:	3510      	adds	r5, #16
   1a976:	4f12      	ldr	r7, [pc, #72]	; (1a9c0 <os_arch_os_init+0x7c>)
   1a978:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   1a97c:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1a97e:	2c19      	cmp	r4, #25
   1a980:	ddf5      	ble.n	1a96e <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a982:	4c0e      	ldr	r4, [pc, #56]	; (1a9bc <os_arch_os_init+0x78>)
   1a984:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a986:	4e0f      	ldr	r6, [pc, #60]	; (1a9c4 <os_arch_os_init+0x80>)
   1a988:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a98a:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a98c:	4e0e      	ldr	r6, [pc, #56]	; (1a9c8 <os_arch_os_init+0x84>)
   1a98e:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a990:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a992:	4e0e      	ldr	r6, [pc, #56]	; (1a9cc <os_arch_os_init+0x88>)
   1a994:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a996:	25e0      	movs	r5, #224	; 0xe0
   1a998:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   1a99c:	2520      	movs	r5, #32
   1a99e:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1a9a0:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   1a9a4:	f014 0f01 	tst.w	r4, #1
   1a9a8:	d004      	beq.n	1a9b4 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   1a9aa:	f8df c024 	ldr.w	ip, [pc, #36]	; 1a9d0 <os_arch_os_init+0x8c>
   1a9ae:	df00      	svc	0
        err = OS_OK;
   1a9b0:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   1a9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   1a9b4:	f7ff ffba 	bl	1a92c <os_arch_init>
        err = OS_OK;
   1a9b8:	2000      	movs	r0, #0
   1a9ba:	e7fa      	b.n	1a9b2 <os_arch_os_init+0x6e>
   1a9bc:	e000ed00 	.word	0xe000ed00
   1a9c0:	0001423b 	.word	0x0001423b
   1a9c4:	000141bf 	.word	0x000141bf
   1a9c8:	00014205 	.word	0x00014205
   1a9cc:	0001422f 	.word	0x0001422f
   1a9d0:	0001a92d 	.word	0x0001a92d

0001a9d4 <os_arch_start>:

uint32_t
os_arch_start(void)
{
   1a9d4:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   1a9d6:	f7ff fcf9 	bl	1a3cc <os_sched_next_task>
   1a9da:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   1a9dc:	f7ff fc22 	bl	1a224 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   1a9e0:	6823      	ldr	r3, [r4, #0]
   1a9e2:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1a9e4:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   1a9e8:	2106      	movs	r1, #6
   1a9ea:	2080      	movs	r0, #128	; 0x80
   1a9ec:	f013 f89a 	bl	2db24 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   1a9f0:	4b03      	ldr	r3, [pc, #12]	; (1aa00 <os_arch_start+0x2c>)
   1a9f2:	2201      	movs	r2, #1
   1a9f4:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   1a9f6:	4620      	mov	r0, r4
   1a9f8:	f7ff ff5e 	bl	1a8b8 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   1a9fc:	69a0      	ldr	r0, [r4, #24]
   1a9fe:	bd10      	pop	{r4, pc}
   1aa00:	100040d0 	.word	0x100040d0

0001aa04 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   1aa04:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   1aa06:	4815      	ldr	r0, [pc, #84]	; (1aa5c <os_arch_os_start+0x58>)
   1aa08:	6800      	ldr	r0, [r0, #0]
   1aa0a:	3804      	subs	r0, #4
   1aa0c:	f7f9 fbca 	bl	141a4 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1aa10:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1aa14:	b9ec      	cbnz	r4, 1aa52 <os_arch_os_start+0x4e>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1aa16:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   1aa1a:	f004 0403 	and.w	r4, r4, #3
   1aa1e:	2c02      	cmp	r4, #2
   1aa20:	d00d      	beq.n	1aa3e <os_arch_os_start+0x3a>
   1aa22:	d803      	bhi.n	1aa2c <os_arch_os_start+0x28>
   1aa24:	2c01      	cmp	r4, #1
   1aa26:	d80f      	bhi.n	1aa48 <os_arch_os_start+0x44>
   1aa28:	2008      	movs	r0, #8
            svc_os_arch_start();
        }
    }

    return err;
}
   1aa2a:	bd10      	pop	{r4, pc}
        switch (__get_CONTROL() & 0x03) {
   1aa2c:	2c03      	cmp	r4, #3
   1aa2e:	d10b      	bne.n	1aa48 <os_arch_os_start+0x44>
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   1aa30:	4c0b      	ldr	r4, [pc, #44]	; (1aa60 <os_arch_os_start+0x5c>)
   1aa32:	6824      	ldr	r4, [r4, #0]
   1aa34:	f014 0f01 	tst.w	r4, #1
   1aa38:	d106      	bne.n	1aa48 <os_arch_os_start+0x44>
                err = OS_ERR_PRIV;
   1aa3a:	2008      	movs	r0, #8
   1aa3c:	e7f5      	b.n	1aa2a <os_arch_os_start+0x26>
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   1aa3e:	4c08      	ldr	r4, [pc, #32]	; (1aa60 <os_arch_os_start+0x5c>)
   1aa40:	6824      	ldr	r4, [r4, #0]
   1aa42:	f014 0f01 	tst.w	r4, #1
   1aa46:	d106      	bne.n	1aa56 <os_arch_os_start+0x52>
    SVC_Call(os_arch_start);
   1aa48:	f8df c018 	ldr.w	ip, [pc, #24]	; 1aa64 <os_arch_os_start+0x60>
   1aa4c:	df00      	svc	0
}
   1aa4e:	2000      	movs	r0, #0
   1aa50:	e7eb      	b.n	1aa2a <os_arch_os_start+0x26>
    err = OS_ERR_IN_ISR;
   1aa52:	2007      	movs	r0, #7
   1aa54:	e7e9      	b.n	1aa2a <os_arch_os_start+0x26>
                err = OS_ERR_PRIV;
   1aa56:	2008      	movs	r0, #8
   1aa58:	e7e7      	b.n	1aa2a <os_arch_os_start+0x26>
   1aa5a:	bf00      	nop
   1aa5c:	10003728 	.word	0x10003728
   1aa60:	10004f2c 	.word	0x10004f2c
   1aa64:	0001a9d5 	.word	0x0001a9d5

0001aa68 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   1aa68:	4603      	mov	r3, r0
   1aa6a:	b128      	cbz	r0, 1aa78 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   1aa6c:	2000      	movs	r0, #0
   1aa6e:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   1aa70:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   1aa72:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   1aa74:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
   1aa76:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1aa78:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   1aa7a:	4770      	bx	lr

0001aa7c <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   1aa7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   1aa7e:	4b2e      	ldr	r3, [pc, #184]	; (1ab38 <os_mutex_release+0xbc>)
   1aa80:	681b      	ldr	r3, [r3, #0]
   1aa82:	2b00      	cmp	r3, #0
   1aa84:	d050      	beq.n	1ab28 <os_mutex_release+0xac>
   1aa86:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1aa88:	2800      	cmp	r0, #0
   1aa8a:	d04f      	beq.n	1ab2c <os_mutex_release+0xb0>
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   1aa8c:	f7ff fbc4 	bl	1a218 <os_sched_get_current_task>
   1aa90:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   1aa92:	88e3      	ldrh	r3, [r4, #6]
   1aa94:	2b00      	cmp	r3, #0
   1aa96:	d04b      	beq.n	1ab30 <os_mutex_release+0xb4>
   1aa98:	68a2      	ldr	r2, [r4, #8]
   1aa9a:	4282      	cmp	r2, r0
   1aa9c:	d14a      	bne.n	1ab34 <os_mutex_release+0xb8>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   1aa9e:	2b01      	cmp	r3, #1
   1aaa0:	d003      	beq.n	1aaaa <os_mutex_release+0x2e>
        --mu->mu_level;
   1aaa2:	3b01      	subs	r3, #1
   1aaa4:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1aaa6:	2000      	movs	r0, #0
        goto done;
   1aaa8:	e03f      	b.n	1ab2a <os_mutex_release+0xae>
    }

    OS_ENTER_CRITICAL(sr);
   1aaaa:	f7ff ff0f 	bl	1a8cc <os_arch_save_sr>
   1aaae:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   1aab0:	88e3      	ldrh	r3, [r4, #6]
   1aab2:	3b01      	subs	r3, #1
   1aab4:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   1aab6:	7aea      	ldrb	r2, [r5, #11]
   1aab8:	7963      	ldrb	r3, [r4, #5]
   1aaba:	429a      	cmp	r2, r3
   1aabc:	d11e      	bne.n	1aafc <os_mutex_release+0x80>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   1aabe:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   1aac0:	b146      	cbz	r6, 1aad4 <os_mutex_release+0x58>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   1aac2:	69f3      	ldr	r3, [r6, #28]
   1aac4:	b1fb      	cbz	r3, 1ab06 <os_mutex_release+0x8a>
        os_sched_wakeup(rdy);
   1aac6:	4630      	mov	r0, r6
   1aac8:	f7ff fbfa 	bl	1a2c0 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   1aacc:	2301      	movs	r3, #1
   1aace:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   1aad0:	7af3      	ldrb	r3, [r6, #11]
   1aad2:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   1aad4:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   1aad6:	b116      	cbz	r6, 1aade <os_mutex_release+0x62>
        rdy->t_lockcnt++;
   1aad8:	7bb3      	ldrb	r3, [r6, #14]
   1aada:	3301      	adds	r3, #1
   1aadc:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   1aade:	7bab      	ldrb	r3, [r5, #14]
   1aae0:	3b01      	subs	r3, #1
   1aae2:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   1aae4:	f7ff fc72 	bl	1a3cc <os_sched_next_task>
   1aae8:	4604      	mov	r4, r0
    if (rdy != current) {
   1aaea:	4285      	cmp	r5, r0
   1aaec:	d015      	beq.n	1ab1a <os_mutex_release+0x9e>
        resched = 1;
   1aaee:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   1aaf0:	4638      	mov	r0, r7
   1aaf2:	f7ff fef1 	bl	1a8d8 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1aaf6:	b995      	cbnz	r5, 1ab1e <os_mutex_release+0xa2>
        os_sched(rdy);
    }

    ret = OS_OK;
   1aaf8:	2000      	movs	r0, #0
   1aafa:	e016      	b.n	1ab2a <os_mutex_release+0xae>
        current->t_prio = mu->mu_prio;
   1aafc:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   1aafe:	4628      	mov	r0, r5
   1ab00:	f7ff fc7c 	bl	1a3fc <os_sched_resort>
   1ab04:	e7db      	b.n	1aabe <os_mutex_release+0x42>
        assert(rdy->t_obj);
   1ab06:	f7f9 fdfd 	bl	14704 <hal_debugger_connected>
   1ab0a:	b100      	cbz	r0, 1ab0e <os_mutex_release+0x92>
   1ab0c:	be01      	bkpt	0x0001
   1ab0e:	2300      	movs	r3, #0
   1ab10:	461a      	mov	r2, r3
   1ab12:	4619      	mov	r1, r3
   1ab14:	4618      	mov	r0, r3
   1ab16:	f7fe f905 	bl	18d24 <__assert_func>
    resched = 0;
   1ab1a:	2500      	movs	r5, #0
   1ab1c:	e7e8      	b.n	1aaf0 <os_mutex_release+0x74>
        os_sched(rdy);
   1ab1e:	4620      	mov	r0, r4
   1ab20:	f7ff fc5a 	bl	1a3d8 <os_sched>
    ret = OS_OK;
   1ab24:	2000      	movs	r0, #0
   1ab26:	e000      	b.n	1ab2a <os_mutex_release+0xae>
        ret = OS_NOT_STARTED;
   1ab28:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   1ab2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   1ab2c:	2003      	movs	r0, #3
   1ab2e:	e7fc      	b.n	1ab2a <os_mutex_release+0xae>
        ret = OS_BAD_MUTEX;
   1ab30:	2005      	movs	r0, #5
   1ab32:	e7fa      	b.n	1ab2a <os_mutex_release+0xae>
   1ab34:	2005      	movs	r0, #5
   1ab36:	e7f8      	b.n	1ab2a <os_mutex_release+0xae>
   1ab38:	100040d0 	.word	0x100040d0

0001ab3c <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   1ab3c:	4b36      	ldr	r3, [pc, #216]	; (1ac18 <os_mutex_pend+0xdc>)
   1ab3e:	681b      	ldr	r3, [r3, #0]
   1ab40:	2b00      	cmp	r3, #0
   1ab42:	d065      	beq.n	1ac10 <os_mutex_pend+0xd4>
{
   1ab44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab48:	4605      	mov	r5, r0
   1ab4a:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1ab4c:	2800      	cmp	r0, #0
   1ab4e:	d061      	beq.n	1ac14 <os_mutex_pend+0xd8>
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   1ab50:	f7ff febc 	bl	1a8cc <os_arch_save_sr>
   1ab54:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   1ab56:	f7ff fb5f 	bl	1a218 <os_sched_get_current_task>
   1ab5a:	4604      	mov	r4, r0
    if (mu->mu_level == 0) {
   1ab5c:	88ea      	ldrh	r2, [r5, #6]
   1ab5e:	b19a      	cbz	r2, 1ab88 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   1ab60:	68ab      	ldr	r3, [r5, #8]
   1ab62:	4283      	cmp	r3, r0
   1ab64:	d01d      	beq.n	1aba2 <os_mutex_pend+0x66>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   1ab66:	b31f      	cbz	r7, 1abb0 <os_mutex_pend+0x74>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   1ab68:	7ad9      	ldrb	r1, [r3, #11]
   1ab6a:	7ac2      	ldrb	r2, [r0, #11]
   1ab6c:	4291      	cmp	r1, r2
   1ab6e:	d824      	bhi.n	1abba <os_mutex_pend+0x7e>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   1ab70:	6828      	ldr	r0, [r5, #0]
   1ab72:	b360      	cbz	r0, 1abce <os_mutex_pend+0x92>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1ab74:	4603      	mov	r3, r0
    last = NULL;
   1ab76:	2100      	movs	r1, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1ab78:	b323      	cbz	r3, 1abc4 <os_mutex_pend+0x88>
            if (current->t_prio < entry->t_prio) {
   1ab7a:	7ae6      	ldrb	r6, [r4, #11]
   1ab7c:	7ada      	ldrb	r2, [r3, #11]
   1ab7e:	4296      	cmp	r6, r2
   1ab80:	d320      	bcc.n	1abc4 <os_mutex_pend+0x88>
                break;
            }
            last = entry;
   1ab82:	4619      	mov	r1, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1ab84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1ab86:	e7f7      	b.n	1ab78 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   1ab88:	60a8      	str	r0, [r5, #8]
        mu->mu_prio  = current->t_prio;
   1ab8a:	7ac3      	ldrb	r3, [r0, #11]
   1ab8c:	716b      	strb	r3, [r5, #5]
        current->t_lockcnt++;
   1ab8e:	7b83      	ldrb	r3, [r0, #14]
   1ab90:	3301      	adds	r3, #1
   1ab92:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   1ab94:	2301      	movs	r3, #1
   1ab96:	80eb      	strh	r3, [r5, #6]
        OS_EXIT_CRITICAL(sr);
   1ab98:	4640      	mov	r0, r8
   1ab9a:	f7ff fe9d 	bl	1a8d8 <os_arch_restore_sr>
        ret = OS_OK;
   1ab9e:	2000      	movs	r0, #0
        goto done;
   1aba0:	e032      	b.n	1ac08 <os_mutex_pend+0xcc>
        ++mu->mu_level;
   1aba2:	3201      	adds	r2, #1
   1aba4:	80ea      	strh	r2, [r5, #6]
        OS_EXIT_CRITICAL(sr);
   1aba6:	4640      	mov	r0, r8
   1aba8:	f7ff fe96 	bl	1a8d8 <os_arch_restore_sr>
        ret = OS_OK;
   1abac:	2000      	movs	r0, #0
        goto done;
   1abae:	e02b      	b.n	1ac08 <os_mutex_pend+0xcc>
        OS_EXIT_CRITICAL(sr);
   1abb0:	4640      	mov	r0, r8
   1abb2:	f7ff fe91 	bl	1a8d8 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   1abb6:	2006      	movs	r0, #6
        goto done;
   1abb8:	e026      	b.n	1ac08 <os_mutex_pend+0xcc>
        mu->mu_owner->t_prio = current->t_prio;
   1abba:	72da      	strb	r2, [r3, #11]
        os_sched_resort(mu->mu_owner);
   1abbc:	68a8      	ldr	r0, [r5, #8]
   1abbe:	f7ff fc1d 	bl	1a3fc <os_sched_resort>
   1abc2:	e7d5      	b.n	1ab70 <os_mutex_pend+0x34>
        }
    }

    if (last) {
   1abc4:	b119      	cbz	r1, 1abce <os_mutex_pend+0x92>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   1abc6:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   1abc8:	64e3      	str	r3, [r4, #76]	; 0x4c
   1abca:	64cc      	str	r4, [r1, #76]	; 0x4c
   1abcc:	e001      	b.n	1abd2 <os_mutex_pend+0x96>
    } else {
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   1abce:	64e0      	str	r0, [r4, #76]	; 0x4c
   1abd0:	602c      	str	r4, [r5, #0]
    }

    /* Set mutex pointer in task */
    current->t_obj = mu;
   1abd2:	61e5      	str	r5, [r4, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   1abd4:	7b63      	ldrb	r3, [r4, #13]
   1abd6:	f043 0304 	orr.w	r3, r3, #4
   1abda:	7363      	strb	r3, [r4, #13]
    os_sched_sleep(current, timeout);
   1abdc:	4639      	mov	r1, r7
   1abde:	4620      	mov	r0, r4
   1abe0:	f7ff fb26 	bl	1a230 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   1abe4:	4640      	mov	r0, r8
   1abe6:	f7ff fe77 	bl	1a8d8 <os_arch_restore_sr>

    os_sched(NULL);
   1abea:	2000      	movs	r0, #0
   1abec:	f7ff fbf4 	bl	1a3d8 <os_sched>

    OS_ENTER_CRITICAL(sr);
   1abf0:	f7ff fe6c 	bl	1a8cc <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   1abf4:	7b63      	ldrb	r3, [r4, #13]
   1abf6:	f023 0304 	bic.w	r3, r3, #4
   1abfa:	7363      	strb	r3, [r4, #13]
    OS_EXIT_CRITICAL(sr);
   1abfc:	f7ff fe6c 	bl	1a8d8 <os_arch_restore_sr>

    /* If we are owner we did not time out. */
    if (mu->mu_owner == current) {
   1ac00:	68ab      	ldr	r3, [r5, #8]
   1ac02:	42a3      	cmp	r3, r4
   1ac04:	d002      	beq.n	1ac0c <os_mutex_pend+0xd0>
        ret = OS_OK;
    } else {
        ret = OS_TIMEOUT;
   1ac06:	2006      	movs	r0, #6
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   1ac08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = OS_OK;
   1ac0c:	2000      	movs	r0, #0
   1ac0e:	e7fb      	b.n	1ac08 <os_mutex_pend+0xcc>
        ret = OS_NOT_STARTED;
   1ac10:	2009      	movs	r0, #9
}
   1ac12:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1ac14:	2003      	movs	r0, #3
   1ac16:	e7f7      	b.n	1ac08 <os_mutex_pend+0xcc>
   1ac18:	100040d0 	.word	0x100040d0

0001ac1c <lrand48>:
#include <stdint.h>

extern unsigned short __rand48_seed[3];	/* Common with mrand48.c, srand48.c */

long lrand48(void)
{
   1ac1c:	b508      	push	{r3, lr}
	return (uint32_t) jrand48(__rand48_seed) >> 1;
   1ac1e:	4802      	ldr	r0, [pc, #8]	; (1ac28 <lrand48+0xc>)
   1ac20:	f000 fc38 	bl	1b494 <jrand48>
}
   1ac24:	0840      	lsrs	r0, r0, #1
   1ac26:	bd08      	pop	{r3, pc}
   1ac28:	10004f30 	.word	0x10004f30

0001ac2c <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7) || defined(ARCH_cortex_m33)
    asm (".syntax unified                   \n"
   1ac2c:	b470      	push	{r4, r5, r6}
   1ac2e:	f04f 0500 	mov.w	r5, #0
   1ac32:	f022 0603 	bic.w	r6, r2, #3
   1ac36:	e005      	b.n	1ac44 <test1>

0001ac38 <loop1>:
   1ac38:	5943      	ldr	r3, [r0, r5]
   1ac3a:	594c      	ldr	r4, [r1, r5]
   1ac3c:	42a3      	cmp	r3, r4
   1ac3e:	d104      	bne.n	1ac4a <res1>
   1ac40:	f105 0504 	add.w	r5, r5, #4

0001ac44 <test1>:
   1ac44:	42b5      	cmp	r5, r6
   1ac46:	d1f7      	bne.n	1ac38 <loop1>
   1ac48:	e00d      	b.n	1ac66 <test2>

0001ac4a <res1>:
   1ac4a:	ba1b      	rev	r3, r3
   1ac4c:	ba24      	rev	r4, r4
   1ac4e:	1b1b      	subs	r3, r3, r4
   1ac50:	bf8c      	ite	hi
   1ac52:	2301      	movhi	r3, #1
   1ac54:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   1ac58:	e009      	b.n	1ac6e <done>

0001ac5a <loop2>:
   1ac5a:	5d43      	ldrb	r3, [r0, r5]
   1ac5c:	5d4c      	ldrb	r4, [r1, r5]
   1ac5e:	1b1b      	subs	r3, r3, r4
   1ac60:	d105      	bne.n	1ac6e <done>
   1ac62:	f105 0501 	add.w	r5, r5, #1

0001ac66 <test2>:
   1ac66:	4295      	cmp	r5, r2
   1ac68:	d1f7      	bne.n	1ac5a <loop2>
   1ac6a:	f04f 0300 	mov.w	r3, #0

0001ac6e <done>:
   1ac6e:	4618      	mov	r0, r3
   1ac70:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   1ac72:	4770      	bx	lr

0001ac74 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   1ac74:	e001      	b.n	1ac7a <test1>

0001ac76 <loop1>:
   1ac76:	588b      	ldr	r3, [r1, r2]
   1ac78:	5083      	str	r3, [r0, r2]

0001ac7a <test1>:
   1ac7a:	3a04      	subs	r2, #4
   1ac7c:	d5fb      	bpl.n	1ac76 <loop1>
   1ac7e:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   1ac82:	e001      	b.n	1ac88 <test2>

0001ac84 <loop2>:
   1ac84:	5c8b      	ldrb	r3, [r1, r2]
   1ac86:	5483      	strb	r3, [r0, r2]

0001ac88 <test2>:
   1ac88:	3a01      	subs	r2, #1
   1ac8a:	d5fb      	bpl.n	1ac84 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   1ac8c:	4770      	bx	lr

0001ac8e <memmove>:
 */

#include <string.h>

void *memmove(void *dst, const void *src, size_t n)
{
   1ac8e:	b410      	push	{r4}
		q += (n - 1);
		asm volatile("std; rep; movsb; cld"
			     : "+c" (n), "+S"(p), "+D"(q));
	}
#else
	if (q < p) {
   1ac90:	4281      	cmp	r1, r0
   1ac92:	d809      	bhi.n	1aca8 <memmove+0x1a>
		while (n--) {
			*q++ = *p++;
		}
	} else {
		p += n;
   1ac94:	4411      	add	r1, r2
		q += n;
   1ac96:	1883      	adds	r3, r0, r2
		while (n--) {
   1ac98:	1e54      	subs	r4, r2, #1
   1ac9a:	b172      	cbz	r2, 1acba <memmove+0x2c>
			*--q = *--p;
   1ac9c:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
   1aca0:	f803 2d01 	strb.w	r2, [r3, #-1]!
		while (n--) {
   1aca4:	4622      	mov	r2, r4
   1aca6:	e7f7      	b.n	1ac98 <memmove+0xa>
	char *q = dst;
   1aca8:	4603      	mov	r3, r0
		while (n--) {
   1acaa:	1e54      	subs	r4, r2, #1
   1acac:	b12a      	cbz	r2, 1acba <memmove+0x2c>
			*q++ = *p++;
   1acae:	f811 2b01 	ldrb.w	r2, [r1], #1
   1acb2:	f803 2b01 	strb.w	r2, [r3], #1
		while (n--) {
   1acb6:	4622      	mov	r2, r4
   1acb8:	e7f7      	b.n	1acaa <memmove+0x1c>
		}
	}
#endif

	return dst;
}
   1acba:	bc10      	pop	{r4}
   1acbc:	4770      	bx	lr

0001acbe <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   1acbe:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   1acc0:	4605      	mov	r5, r0
   1acc2:	b2c9      	uxtb	r1, r1
   1acc4:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1acc8:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1accc:	18ab      	adds	r3, r5, r2
   1acce:	2403      	movs	r4, #3
   1acd0:	4023      	ands	r3, r4
   1acd2:	1ad3      	subs	r3, r2, r3
   1acd4:	d40b      	bmi.n	1acee <memset+0x30>
   1acd6:	e001      	b.n	1acdc <memset+0x1e>
   1acd8:	3a01      	subs	r2, #1
   1acda:	54a9      	strb	r1, [r5, r2]
   1acdc:	429a      	cmp	r2, r3
   1acde:	d1fb      	bne.n	1acd8 <memset+0x1a>
   1ace0:	e000      	b.n	1ace4 <memset+0x26>
   1ace2:	50a9      	str	r1, [r5, r2]
   1ace4:	3a04      	subs	r2, #4
   1ace6:	d5fc      	bpl.n	1ace2 <memset+0x24>
   1ace8:	3204      	adds	r2, #4
   1acea:	e000      	b.n	1acee <memset+0x30>
   1acec:	54a9      	strb	r1, [r5, r2]
   1acee:	3a01      	subs	r2, #1
   1acf0:	d5fc      	bpl.n	1acec <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   1acf2:	bc30      	pop	{r4, r5}
   1acf4:	4770      	bx	lr

0001acf6 <strcasecmp>:

#include <string.h>
#include <ctype.h>

int strcasecmp(const char *s1, const char *s2)
{
   1acf6:	b430      	push	{r4, r5}
   1acf8:	4604      	mov	r4, r0
	const unsigned char *c1 = (const unsigned char *)s1;
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;
   1acfa:	e002      	b.n	1ad02 <strcasecmp+0xc>

	while (1) {
		/* toupper() expects an unsigned char (implicitly cast to int)
		   as input, and returns an int, which is exactly what we want. */
		d = toupper(ch = *c1++) - toupper(*c2++);
		if (d || !ch)
   1acfc:	1ac0      	subs	r0, r0, r3
   1acfe:	d112      	bne.n	1ad26 <strcasecmp+0x30>
   1ad00:	b18a      	cbz	r2, 1ad26 <strcasecmp+0x30>
		d = toupper(ch = *c1++) - toupper(*c2++);
   1ad02:	7822      	ldrb	r2, [r4, #0]
   1ad04:	3401      	adds	r4, #1
   1ad06:	4610      	mov	r0, r2
	return __c >= 'a' && __c <= 'z';
   1ad08:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
	return islower(__c) ? (__c & ~32) : __c;
   1ad0c:	2b19      	cmp	r3, #25
   1ad0e:	d801      	bhi.n	1ad14 <strcasecmp+0x1e>
   1ad10:	f022 0020 	bic.w	r0, r2, #32
   1ad14:	f811 3b01 	ldrb.w	r3, [r1], #1
	return __c >= 'a' && __c <= 'z';
   1ad18:	f1a3 0561 	sub.w	r5, r3, #97	; 0x61
	return islower(__c) ? (__c & ~32) : __c;
   1ad1c:	2d19      	cmp	r5, #25
   1ad1e:	d8ed      	bhi.n	1acfc <strcasecmp+0x6>
   1ad20:	f023 0320 	bic.w	r3, r3, #32
   1ad24:	e7ea      	b.n	1acfc <strcasecmp+0x6>
			break;
	}

	return d;
}
   1ad26:	bc30      	pop	{r4, r5}
   1ad28:	4770      	bx	lr

0001ad2a <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   1ad2a:	b410      	push	{r4}
   1ad2c:	4604      	mov	r4, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   1ad2e:	7822      	ldrb	r2, [r4, #0]
   1ad30:	3401      	adds	r4, #1
   1ad32:	7808      	ldrb	r0, [r1, #0]
   1ad34:	3101      	adds	r1, #1
		if (d || !ch)
   1ad36:	1a10      	subs	r0, r2, r0
   1ad38:	d101      	bne.n	1ad3e <strcmp+0x14>
   1ad3a:	2a00      	cmp	r2, #0
   1ad3c:	d1f7      	bne.n	1ad2e <strcmp+0x4>
			break;
	}

	return d;
}
   1ad3e:	bc10      	pop	{r4}
   1ad40:	4770      	bx	lr

0001ad42 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   1ad42:	4603      	mov	r3, r0
	while (*ss)
   1ad44:	781a      	ldrb	r2, [r3, #0]
   1ad46:	b10a      	cbz	r2, 1ad4c <strlen+0xa>
		ss++;
   1ad48:	3301      	adds	r3, #1
   1ad4a:	e7fb      	b.n	1ad44 <strlen+0x2>
	return ss - s;
}
   1ad4c:	1a18      	subs	r0, r3, r0
   1ad4e:	4770      	bx	lr

0001ad50 <strncat>:
 */

#include <string.h>

char *strncat(char *dst, const char *src, size_t n)
{
   1ad50:	b570      	push	{r4, r5, r6, lr}
   1ad52:	4606      	mov	r6, r0
   1ad54:	460c      	mov	r4, r1
   1ad56:	4615      	mov	r5, r2
	char *q = strchr(dst, '\0');
   1ad58:	f7ff fff3 	bl	1ad42 <strlen>
   1ad5c:	4430      	add	r0, r6
	const char *p = src;
	char ch;

	while (n--) {
   1ad5e:	462b      	mov	r3, r5
   1ad60:	3d01      	subs	r5, #1
   1ad62:	b13b      	cbz	r3, 1ad74 <strncat+0x24>
		*q++ = ch = *p++;
   1ad64:	4621      	mov	r1, r4
   1ad66:	f811 3b01 	ldrb.w	r3, [r1], #1
   1ad6a:	f800 3b01 	strb.w	r3, [r0], #1
		if (!ch)
   1ad6e:	b113      	cbz	r3, 1ad76 <strncat+0x26>
		*q++ = ch = *p++;
   1ad70:	460c      	mov	r4, r1
   1ad72:	e7f4      	b.n	1ad5e <strncat+0xe>
			return dst;
	}
	*q = '\0';
   1ad74:	7003      	strb	r3, [r0, #0]

	return dst;
}
   1ad76:	4630      	mov	r0, r6
   1ad78:	bd70      	pop	{r4, r5, r6, pc}

0001ad7a <strtok_r>:
#include <string.h>

char *strtok_r(char *s, const char *delim, char **holder)
{
   1ad7a:	b538      	push	{r3, r4, r5, lr}
   1ad7c:	460d      	mov	r5, r1
   1ad7e:	4614      	mov	r4, r2
	if (s)
   1ad80:	b100      	cbz	r0, 1ad84 <strtok_r+0xa>
		*holder = s;
   1ad82:	6020      	str	r0, [r4, #0]

	do {
		s = strsep(holder, delim);
   1ad84:	4629      	mov	r1, r5
   1ad86:	4620      	mov	r0, r4
   1ad88:	f000 fc68 	bl	1b65c <strsep>
	} while (s && !*s);
   1ad8c:	4603      	mov	r3, r0
   1ad8e:	b110      	cbz	r0, 1ad96 <strtok_r+0x1c>
   1ad90:	7800      	ldrb	r0, [r0, #0]
   1ad92:	2800      	cmp	r0, #0
   1ad94:	d0f6      	beq.n	1ad84 <strtok_r+0xa>

	return s;
}
   1ad96:	4618      	mov	r0, r3
   1ad98:	bd38      	pop	{r3, r4, r5, pc}

0001ad9a <strtol>:
#include <stddef.h>
#include <stdlib.h>
#include <strntoimax.h>

TYPE NAME(const char *nptr, char **endptr, int base)
{
   1ad9a:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   1ad9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ada0:	f000 fbce 	bl	1b540 <strntoumax>
}
   1ada4:	bd08      	pop	{r3, pc}

0001ada6 <strtoul>:
{
   1ada6:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   1ada8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1adac:	f000 fbc8 	bl	1b540 <strntoumax>
}
   1adb0:	bd08      	pop	{r3, pc}

0001adb2 <strtoull>:
{
   1adb2:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   1adb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1adb8:	f000 fbc2 	bl	1b540 <strntoumax>
}
   1adbc:	bd08      	pop	{r3, pc}

0001adbe <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   1adbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1adc2:	b087      	sub	sp, #28
   1adc4:	4604      	mov	r4, r0
   1adc6:	4692      	mov	sl, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   1adc8:	6853      	ldr	r3, [r2, #4]
   1adca:	9304      	str	r3, [sp, #16]

    if (p->hh == 1) {
   1adcc:	7893      	ldrb	r3, [r2, #2]
   1adce:	f003 0330 	and.w	r3, r3, #48	; 0x30
   1add2:	2b10      	cmp	r3, #16
   1add4:	d018      	beq.n	1ae08 <ui2a+0x4a>
   1add6:	460d      	mov	r5, r1
        num = (unsigned short int)num;
    } else if (p->hh == 2) {
   1add8:	2b20      	cmp	r3, #32
   1adda:	d019      	beq.n	1ae10 <ui2a+0x52>
{
   1addc:	2601      	movs	r6, #1
   1adde:	2700      	movs	r7, #0
        num = (unsigned char)num;
    }

    while (num / d >= p->base)
   1ade0:	4632      	mov	r2, r6
   1ade2:	463b      	mov	r3, r7
   1ade4:	4620      	mov	r0, r4
   1ade6:	4629      	mov	r1, r5
   1ade8:	f7f9 fa90 	bl	1430c <__aeabi_uldivmod>
   1adec:	f89a 8003 	ldrb.w	r8, [sl, #3]
   1adf0:	f04f 0900 	mov.w	r9, #0
   1adf4:	4549      	cmp	r1, r9
   1adf6:	bf08      	it	eq
   1adf8:	4540      	cmpeq	r0, r8
   1adfa:	d30e      	bcc.n	1ae1a <ui2a+0x5c>
        d *= p->base;
   1adfc:	fb08 f307 	mul.w	r3, r8, r7
   1ae00:	fba6 6708 	umull	r6, r7, r6, r8
   1ae04:	441f      	add	r7, r3
   1ae06:	e7eb      	b.n	1ade0 <ui2a+0x22>
        num = (unsigned short int)num;
   1ae08:	b283      	uxth	r3, r0
   1ae0a:	461c      	mov	r4, r3
   1ae0c:	2500      	movs	r5, #0
   1ae0e:	e7e5      	b.n	1addc <ui2a+0x1e>
        num = (unsigned char)num;
   1ae10:	f000 03ff 	and.w	r3, r0, #255	; 0xff
   1ae14:	461c      	mov	r4, r3
   1ae16:	2500      	movs	r5, #0
   1ae18:	e7e0      	b.n	1addc <ui2a+0x1e>
    int n = 0;
   1ae1a:	f04f 0b00 	mov.w	fp, #0
   1ae1e:	f8cd a014 	str.w	sl, [sp, #20]
   1ae22:	e00c      	b.n	1ae3e <ui2a+0x80>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1ae24:	2230      	movs	r2, #48	; 0x30
   1ae26:	9b04      	ldr	r3, [sp, #16]
   1ae28:	9c00      	ldr	r4, [sp, #0]
   1ae2a:	4414      	add	r4, r2
   1ae2c:	f803 4b01 	strb.w	r4, [r3], #1
            ++n;
   1ae30:	f10b 0b01 	add.w	fp, fp, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1ae34:	9304      	str	r3, [sp, #16]
   1ae36:	4606      	mov	r6, r0
   1ae38:	460f      	mov	r7, r1
   1ae3a:	9c02      	ldr	r4, [sp, #8]
   1ae3c:	9d03      	ldr	r5, [sp, #12]
    while (d != 0) {
   1ae3e:	ea56 0307 	orrs.w	r3, r6, r7
   1ae42:	d034      	beq.n	1aeae <ui2a+0xf0>
        unsigned long long  dgt = num / d;
   1ae44:	4632      	mov	r2, r6
   1ae46:	463b      	mov	r3, r7
   1ae48:	4620      	mov	r0, r4
   1ae4a:	4629      	mov	r1, r5
   1ae4c:	f7f9 fa5e 	bl	1430c <__aeabi_uldivmod>
   1ae50:	9000      	str	r0, [sp, #0]
   1ae52:	9101      	str	r1, [sp, #4]
        num %= d;
   1ae54:	4632      	mov	r2, r6
   1ae56:	463b      	mov	r3, r7
   1ae58:	4620      	mov	r0, r4
   1ae5a:	4629      	mov	r1, r5
   1ae5c:	f7f9 fa56 	bl	1430c <__aeabi_uldivmod>
   1ae60:	9202      	str	r2, [sp, #8]
   1ae62:	9303      	str	r3, [sp, #12]
        d /= p->base;
   1ae64:	9b05      	ldr	r3, [sp, #20]
   1ae66:	f893 8003 	ldrb.w	r8, [r3, #3]
   1ae6a:	f04f 0900 	mov.w	r9, #0
   1ae6e:	4642      	mov	r2, r8
   1ae70:	464b      	mov	r3, r9
   1ae72:	4630      	mov	r0, r6
   1ae74:	4639      	mov	r1, r7
   1ae76:	f7f9 fa49 	bl	1430c <__aeabi_uldivmod>
        if (n || dgt > 0 || d == 0) {
   1ae7a:	f1bb 0f00 	cmp.w	fp, #0
   1ae7e:	d107      	bne.n	1ae90 <ui2a+0xd2>
   1ae80:	42bd      	cmp	r5, r7
   1ae82:	bf08      	it	eq
   1ae84:	42b4      	cmpeq	r4, r6
   1ae86:	d203      	bcs.n	1ae90 <ui2a+0xd2>
   1ae88:	454f      	cmp	r7, r9
   1ae8a:	bf08      	it	eq
   1ae8c:	4546      	cmpeq	r6, r8
   1ae8e:	d2d2      	bcs.n	1ae36 <ui2a+0x78>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1ae90:	e9dd 3400 	ldrd	r3, r4, [sp]
   1ae94:	2c00      	cmp	r4, #0
   1ae96:	bf08      	it	eq
   1ae98:	2b0a      	cmpeq	r3, #10
   1ae9a:	d3c3      	bcc.n	1ae24 <ui2a+0x66>
   1ae9c:	9b05      	ldr	r3, [sp, #20]
   1ae9e:	789b      	ldrb	r3, [r3, #2]
   1aea0:	f013 0f04 	tst.w	r3, #4
   1aea4:	d001      	beq.n	1aeaa <ui2a+0xec>
   1aea6:	2237      	movs	r2, #55	; 0x37
   1aea8:	e7bd      	b.n	1ae26 <ui2a+0x68>
   1aeaa:	2257      	movs	r2, #87	; 0x57
   1aeac:	e7bb      	b.n	1ae26 <ui2a+0x68>
        }
    }
    *bf = 0;
   1aeae:	2300      	movs	r3, #0
   1aeb0:	9a04      	ldr	r2, [sp, #16]
   1aeb2:	7013      	strb	r3, [r2, #0]
}
   1aeb4:	b007      	add	sp, #28
   1aeb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001aeba <i2a>:

static void i2a(long long int num, struct param *p)
{
   1aeba:	b510      	push	{r4, lr}
   1aebc:	4604      	mov	r4, r0
   1aebe:	460b      	mov	r3, r1
   1aec0:	4620      	mov	r0, r4
   1aec2:	4619      	mov	r1, r3
    if (num < 0) {
   1aec4:	2c00      	cmp	r4, #0
   1aec6:	f173 0300 	sbcs.w	r3, r3, #0
   1aeca:	db02      	blt.n	1aed2 <i2a+0x18>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   1aecc:	f7ff ff77 	bl	1adbe <ui2a>
}
   1aed0:	bd10      	pop	{r4, pc}
        num = -num;
   1aed2:	4260      	negs	r0, r4
   1aed4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   1aed8:	7893      	ldrb	r3, [r2, #2]
   1aeda:	f043 0301 	orr.w	r3, r3, #1
   1aede:	7093      	strb	r3, [r2, #2]
   1aee0:	e7f4      	b.n	1aecc <i2a+0x12>

0001aee2 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   1aee2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1aee6:	b2db      	uxtb	r3, r3
   1aee8:	2b09      	cmp	r3, #9
   1aeea:	d90b      	bls.n	1af04 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   1aeec:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1aef0:	b2db      	uxtb	r3, r3
   1aef2:	2b05      	cmp	r3, #5
   1aef4:	d908      	bls.n	1af08 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   1aef6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1aefa:	b2db      	uxtb	r3, r3
   1aefc:	2b05      	cmp	r3, #5
   1aefe:	d805      	bhi.n	1af0c <a2d+0x2a>
        return ch - 'A' + 10;
   1af00:	3837      	subs	r0, #55	; 0x37
   1af02:	4770      	bx	lr
        return ch - '0';
   1af04:	3830      	subs	r0, #48	; 0x30
   1af06:	4770      	bx	lr
        return ch - 'a' + 10;
   1af08:	3857      	subs	r0, #87	; 0x57
   1af0a:	4770      	bx	lr
    else
        return -1;
   1af0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1af10:	4770      	bx	lr

0001af12 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   1af12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1af16:	4605      	mov	r5, r0
   1af18:	4688      	mov	r8, r1
   1af1a:	4616      	mov	r6, r2
   1af1c:	4699      	mov	r9, r3
    const char *p = *src;
   1af1e:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   1af20:	2700      	movs	r7, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   1af22:	4628      	mov	r0, r5
   1af24:	f7ff ffdd 	bl	1aee2 <a2d>
   1af28:	2800      	cmp	r0, #0
   1af2a:	db06      	blt.n	1af3a <a2i+0x28>
        if (digit > base)
   1af2c:	42b0      	cmp	r0, r6
   1af2e:	dc04      	bgt.n	1af3a <a2i+0x28>
            break;
        num = num * base + digit;
   1af30:	fb06 0707 	mla	r7, r6, r7, r0
        ch = *p++;
   1af34:	f814 5b01 	ldrb.w	r5, [r4], #1
   1af38:	e7f3      	b.n	1af22 <a2i+0x10>
    }
    *src = p;
   1af3a:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   1af3e:	f889 7000 	strb.w	r7, [r9]
    return ch;
}
   1af42:	4628      	mov	r0, r5
   1af44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001af48 <putf>:

static int putf(FILE *putp, char c)
{
   1af48:	b500      	push	{lr}
   1af4a:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   1af4c:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   1af50:	6803      	ldr	r3, [r0, #0]
   1af52:	681b      	ldr	r3, [r3, #0]
   1af54:	b143      	cbz	r3, 1af68 <putf+0x20>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   1af56:	2201      	movs	r2, #1
   1af58:	f10d 0107 	add.w	r1, sp, #7
   1af5c:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   1af5e:	2801      	cmp	r0, #1
   1af60:	d102      	bne.n	1af68 <putf+0x20>
    if (fputc(c, putp) == EOF)
        return 0;
    else
        return 1;
}
   1af62:	b003      	add	sp, #12
   1af64:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   1af68:	2000      	movs	r0, #0
   1af6a:	e7fa      	b.n	1af62 <putf+0x1a>

0001af6c <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   1af6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af70:	4607      	mov	r7, r0
   1af72:	4688      	mov	r8, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   1af74:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   1af76:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   1af78:	f813 2b01 	ldrb.w	r2, [r3], #1
   1af7c:	b11a      	cbz	r2, 1af86 <putchw+0x1a>
   1af7e:	2c00      	cmp	r4, #0
   1af80:	dd01      	ble.n	1af86 <putchw+0x1a>
        n--;
   1af82:	3c01      	subs	r4, #1
   1af84:	e7f8      	b.n	1af78 <putchw+0xc>
    if (p->sign)
   1af86:	f898 3002 	ldrb.w	r3, [r8, #2]
   1af8a:	f013 0f01 	tst.w	r3, #1
   1af8e:	d000      	beq.n	1af92 <putchw+0x26>
        n--;
   1af90:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   1af92:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   1af96:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1af9a:	b29b      	uxth	r3, r3
   1af9c:	f241 0202 	movw	r2, #4098	; 0x1002
   1afa0:	4293      	cmp	r3, r2
   1afa2:	d028      	beq.n	1aff6 <putchw+0x8a>
        n -= 2;
    else if (p->alt && p->base == 8)
   1afa4:	f640 0202 	movw	r2, #2050	; 0x802
   1afa8:	4293      	cmp	r3, r2
   1afaa:	d026      	beq.n	1affa <putchw+0x8e>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   1afac:	f8d8 3000 	ldr.w	r3, [r8]
   1afb0:	4e36      	ldr	r6, [pc, #216]	; (1b08c <putchw+0x120>)
   1afb2:	401e      	ands	r6, r3
   1afb4:	b34e      	cbz	r6, 1b00a <putchw+0x9e>
    unsigned written = 0;
   1afb6:	2600      	movs	r6, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   1afb8:	f898 3002 	ldrb.w	r3, [r8, #2]
   1afbc:	f013 0f01 	tst.w	r3, #1
   1afc0:	d128      	bne.n	1b014 <putchw+0xa8>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   1afc2:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   1afc6:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1afca:	b29b      	uxth	r3, r3
   1afcc:	f241 0202 	movw	r2, #4098	; 0x1002
   1afd0:	4293      	cmp	r3, r2
   1afd2:	d025      	beq.n	1b020 <putchw+0xb4>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   1afd4:	f640 0202 	movw	r2, #2050	; 0x802
   1afd8:	4293      	cmp	r3, r2
   1afda:	d033      	beq.n	1b044 <putchw+0xd8>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   1afdc:	f898 3001 	ldrb.w	r3, [r8, #1]
   1afe0:	bbe3      	cbnz	r3, 1b05c <putchw+0xf0>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   1afe2:	f8d8 5004 	ldr.w	r5, [r8, #4]
    while ((ch = *bf++))
   1afe6:	f815 1b01 	ldrb.w	r1, [r5], #1
   1afea:	b3e1      	cbz	r1, 1b066 <putchw+0xfa>
        written += putf(putp, ch);
   1afec:	4638      	mov	r0, r7
   1afee:	f7ff ffab 	bl	1af48 <putf>
   1aff2:	4406      	add	r6, r0
   1aff4:	e7f7      	b.n	1afe6 <putchw+0x7a>
        n -= 2;
   1aff6:	3c02      	subs	r4, #2
   1aff8:	e7d8      	b.n	1afac <putchw+0x40>
        n--;
   1affa:	3c01      	subs	r4, #1
   1affc:	e7d6      	b.n	1afac <putchw+0x40>
            written += putf(putp, ' ');
   1affe:	2120      	movs	r1, #32
   1b000:	4638      	mov	r0, r7
   1b002:	f7ff ffa1 	bl	1af48 <putf>
   1b006:	4406      	add	r6, r0
        while (n-- > 0)
   1b008:	462c      	mov	r4, r5
   1b00a:	1e65      	subs	r5, r4, #1
   1b00c:	2c00      	cmp	r4, #0
   1b00e:	dcf6      	bgt.n	1affe <putchw+0x92>
   1b010:	462c      	mov	r4, r5
   1b012:	e7d1      	b.n	1afb8 <putchw+0x4c>
        written += putf(putp, '-');
   1b014:	212d      	movs	r1, #45	; 0x2d
   1b016:	4638      	mov	r0, r7
   1b018:	f7ff ff96 	bl	1af48 <putf>
   1b01c:	4406      	add	r6, r0
   1b01e:	e7d0      	b.n	1afc2 <putchw+0x56>
        written += putf(putp, '0');
   1b020:	2130      	movs	r1, #48	; 0x30
   1b022:	4638      	mov	r0, r7
   1b024:	f7ff ff90 	bl	1af48 <putf>
   1b028:	4406      	add	r6, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   1b02a:	f898 3002 	ldrb.w	r3, [r8, #2]
   1b02e:	f013 0f04 	tst.w	r3, #4
   1b032:	d005      	beq.n	1b040 <putchw+0xd4>
   1b034:	2158      	movs	r1, #88	; 0x58
   1b036:	4638      	mov	r0, r7
   1b038:	f7ff ff86 	bl	1af48 <putf>
   1b03c:	4406      	add	r6, r0
   1b03e:	e7cd      	b.n	1afdc <putchw+0x70>
   1b040:	2178      	movs	r1, #120	; 0x78
   1b042:	e7f8      	b.n	1b036 <putchw+0xca>
        written += putf(putp, '0');
   1b044:	2130      	movs	r1, #48	; 0x30
   1b046:	4638      	mov	r0, r7
   1b048:	f7ff ff7e 	bl	1af48 <putf>
   1b04c:	4406      	add	r6, r0
   1b04e:	e7c5      	b.n	1afdc <putchw+0x70>
            written += putf(putp, '0');
   1b050:	2130      	movs	r1, #48	; 0x30
   1b052:	4638      	mov	r0, r7
   1b054:	f7ff ff78 	bl	1af48 <putf>
   1b058:	4406      	add	r6, r0
        while (n-- > 0)
   1b05a:	462c      	mov	r4, r5
   1b05c:	1e65      	subs	r5, r4, #1
   1b05e:	2c00      	cmp	r4, #0
   1b060:	dcf6      	bgt.n	1b050 <putchw+0xe4>
   1b062:	462c      	mov	r4, r5
   1b064:	e7bd      	b.n	1afe2 <putchw+0x76>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   1b066:	f898 3002 	ldrb.w	r3, [r8, #2]
   1b06a:	f013 0f08 	tst.w	r3, #8
   1b06e:	d102      	bne.n	1b076 <putchw+0x10a>
        while (n-- > 0)
            written += putf(putp, ' ');
    }
    
    return written;
}
   1b070:	4630      	mov	r0, r6
   1b072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (n-- > 0)
   1b076:	1e65      	subs	r5, r4, #1
   1b078:	2c00      	cmp	r4, #0
   1b07a:	ddf9      	ble.n	1b070 <putchw+0x104>
            written += putf(putp, ' ');
   1b07c:	2120      	movs	r1, #32
   1b07e:	4638      	mov	r0, r7
   1b080:	f7ff ff62 	bl	1af48 <putf>
   1b084:	4406      	add	r6, r0
        while (n-- > 0)
   1b086:	462c      	mov	r4, r5
   1b088:	e7f5      	b.n	1b076 <putchw+0x10a>
   1b08a:	bf00      	nop
   1b08c:	0008ff00 	.word	0x0008ff00

0001b090 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   1b090:	b160      	cbz	r0, 1b0ac <intarg+0x1c>
   1b092:	2801      	cmp	r0, #1
   1b094:	d017      	beq.n	1b0c6 <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   1b096:	b319      	cbz	r1, 1b0e0 <intarg+0x50>
            val = va_arg(*va, long long);
   1b098:	6813      	ldr	r3, [r2, #0]
   1b09a:	3307      	adds	r3, #7
   1b09c:	f023 0307 	bic.w	r3, r3, #7
   1b0a0:	f103 0108 	add.w	r1, r3, #8
   1b0a4:	6011      	str	r1, [r2, #0]
   1b0a6:	e9d3 0100 	ldrd	r0, r1, [r3]
   1b0aa:	4770      	bx	lr
        if (sign) {
   1b0ac:	b129      	cbz	r1, 1b0ba <intarg+0x2a>
            val = va_arg(*va, int);
   1b0ae:	6813      	ldr	r3, [r2, #0]
   1b0b0:	1d19      	adds	r1, r3, #4
   1b0b2:	6011      	str	r1, [r2, #0]
   1b0b4:	6818      	ldr	r0, [r3, #0]
   1b0b6:	17c1      	asrs	r1, r0, #31
   1b0b8:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   1b0ba:	6813      	ldr	r3, [r2, #0]
   1b0bc:	1d19      	adds	r1, r3, #4
   1b0be:	6011      	str	r1, [r2, #0]
   1b0c0:	6818      	ldr	r0, [r3, #0]
   1b0c2:	2100      	movs	r1, #0
   1b0c4:	4770      	bx	lr
        if (sign) {
   1b0c6:	b129      	cbz	r1, 1b0d4 <intarg+0x44>
            val = va_arg(*va, long);
   1b0c8:	6813      	ldr	r3, [r2, #0]
   1b0ca:	1d19      	adds	r1, r3, #4
   1b0cc:	6011      	str	r1, [r2, #0]
   1b0ce:	6818      	ldr	r0, [r3, #0]
   1b0d0:	17c1      	asrs	r1, r0, #31
   1b0d2:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   1b0d4:	6813      	ldr	r3, [r2, #0]
   1b0d6:	1d19      	adds	r1, r3, #4
   1b0d8:	6011      	str	r1, [r2, #0]
   1b0da:	6818      	ldr	r0, [r3, #0]
   1b0dc:	2100      	movs	r1, #0
   1b0de:	4770      	bx	lr
        } else {
            val = va_arg(*va, unsigned long long);
   1b0e0:	6813      	ldr	r3, [r2, #0]
   1b0e2:	3307      	adds	r3, #7
   1b0e4:	f023 0307 	bic.w	r3, r3, #7
   1b0e8:	f103 0108 	add.w	r1, r3, #8
   1b0ec:	6011      	str	r1, [r2, #0]
   1b0ee:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   1b0f2:	4770      	bx	lr

0001b0f4 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   1b0f4:	b570      	push	{r4, r5, r6, lr}
   1b0f6:	b08a      	sub	sp, #40	; 0x28
   1b0f8:	4606      	mov	r6, r0
   1b0fa:	9101      	str	r1, [sp, #4]
   1b0fc:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   1b0fe:	ab02      	add	r3, sp, #8
   1b100:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   1b102:	2500      	movs	r5, #0

    while ((ch = *(fmt++))) {
   1b104:	9b01      	ldr	r3, [sp, #4]
   1b106:	1c5a      	adds	r2, r3, #1
   1b108:	9201      	str	r2, [sp, #4]
   1b10a:	7819      	ldrb	r1, [r3, #0]
   1b10c:	2900      	cmp	r1, #0
   1b10e:	f000 816e 	beq.w	1b3ee <tfp_format+0x2fa>
        if (ch != '%') {
   1b112:	2925      	cmp	r1, #37	; 0x25
   1b114:	d004      	beq.n	1b120 <tfp_format+0x2c>
            written += putf(putp, ch);
   1b116:	4630      	mov	r0, r6
   1b118:	f7ff ff16 	bl	1af48 <putf>
   1b11c:	4405      	add	r5, r0
   1b11e:	e7f1      	b.n	1b104 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   1b120:	2200      	movs	r2, #0
   1b122:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   1b126:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   1b12a:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
            p.hh = 0;
   1b12e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1b132:	f362 1305 	bfi	r3, r2, #4, #2
   1b136:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   1b13a:	9b01      	ldr	r3, [sp, #4]
   1b13c:	1c5a      	adds	r2, r3, #1
   1b13e:	9201      	str	r2, [sp, #4]
   1b140:	781c      	ldrb	r4, [r3, #0]
   1b142:	b12c      	cbz	r4, 1b150 <tfp_format+0x5c>
                switch (ch) {
   1b144:	2c2d      	cmp	r4, #45	; 0x2d
   1b146:	d073      	beq.n	1b230 <tfp_format+0x13c>
   1b148:	2c30      	cmp	r4, #48	; 0x30
   1b14a:	d061      	beq.n	1b210 <tfp_format+0x11c>
   1b14c:	2c23      	cmp	r4, #35	; 0x23
   1b14e:	d068      	beq.n	1b222 <tfp_format+0x12e>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   1b150:	2c2a      	cmp	r4, #42	; 0x2a
   1b152:	d077      	beq.n	1b244 <tfp_format+0x150>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   1b154:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1b158:	b2db      	uxtb	r3, r3
   1b15a:	2b09      	cmp	r3, #9
   1b15c:	f240 8086 	bls.w	1b26c <tfp_format+0x178>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   1b160:	2c6c      	cmp	r4, #108	; 0x6c
   1b162:	f000 808b 	beq.w	1b27c <tfp_format+0x188>

                if (ch == 'l') {
                    ch = *(fmt++);
                    lng = 2;
                }
            } else if (ch == 'h') {
   1b166:	2c68      	cmp	r4, #104	; 0x68
   1b168:	f000 8095 	beq.w	1b296 <tfp_format+0x1a2>
            lng = 0;
   1b16c:	2000      	movs	r0, #0
                    ch = *(fmt++);
                    p.hh = 2;
                }
            }

            if (ch == 'z') {
   1b16e:	2c7a      	cmp	r4, #122	; 0x7a
   1b170:	f000 80ab 	beq.w	1b2ca <tfp_format+0x1d6>
                ch = *(fmt++);
            }

            switch (ch) {
   1b174:	2c78      	cmp	r4, #120	; 0x78
   1b176:	d8c5      	bhi.n	1b104 <tfp_format+0x10>
   1b178:	2c58      	cmp	r4, #88	; 0x58
   1b17a:	f0c0 80ab 	bcc.w	1b2d4 <tfp_format+0x1e0>
   1b17e:	f1a4 0358 	sub.w	r3, r4, #88	; 0x58
   1b182:	2b20      	cmp	r3, #32
   1b184:	d8be      	bhi.n	1b104 <tfp_format+0x10>
   1b186:	a201      	add	r2, pc, #4	; (adr r2, 1b18c <tfp_format+0x98>)
   1b188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1b18c:	0001b32d 	.word	0x0001b32d
   1b190:	0001b105 	.word	0x0001b105
   1b194:	0001b105 	.word	0x0001b105
   1b198:	0001b105 	.word	0x0001b105
   1b19c:	0001b105 	.word	0x0001b105
   1b1a0:	0001b105 	.word	0x0001b105
   1b1a4:	0001b105 	.word	0x0001b105
   1b1a8:	0001b105 	.word	0x0001b105
   1b1ac:	0001b105 	.word	0x0001b105
   1b1b0:	0001b105 	.word	0x0001b105
   1b1b4:	0001b105 	.word	0x0001b105
   1b1b8:	0001b3c3 	.word	0x0001b3c3
   1b1bc:	0001b30d 	.word	0x0001b30d
   1b1c0:	0001b105 	.word	0x0001b105
   1b1c4:	0001b105 	.word	0x0001b105
   1b1c8:	0001b105 	.word	0x0001b105
   1b1cc:	0001b105 	.word	0x0001b105
   1b1d0:	0001b30d 	.word	0x0001b30d
   1b1d4:	0001b105 	.word	0x0001b105
   1b1d8:	0001b105 	.word	0x0001b105
   1b1dc:	0001b105 	.word	0x0001b105
   1b1e0:	0001b105 	.word	0x0001b105
   1b1e4:	0001b105 	.word	0x0001b105
   1b1e8:	0001b361 	.word	0x0001b361
   1b1ec:	0001b381 	.word	0x0001b381
   1b1f0:	0001b105 	.word	0x0001b105
   1b1f4:	0001b105 	.word	0x0001b105
   1b1f8:	0001b3d5 	.word	0x0001b3d5
   1b1fc:	0001b105 	.word	0x0001b105
   1b200:	0001b2ed 	.word	0x0001b2ed
   1b204:	0001b105 	.word	0x0001b105
   1b208:	0001b105 	.word	0x0001b105
   1b20c:	0001b32d 	.word	0x0001b32d
                    if (!p.left) {
   1b210:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b214:	f013 0f08 	tst.w	r3, #8
   1b218:	d18f      	bne.n	1b13a <tfp_format+0x46>
                        p.lz = 1;
   1b21a:	2301      	movs	r3, #1
   1b21c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1b220:	e78b      	b.n	1b13a <tfp_format+0x46>
                    p.alt = 1;
   1b222:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b226:	f043 0302 	orr.w	r3, r3, #2
   1b22a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   1b22e:	e784      	b.n	1b13a <tfp_format+0x46>
                    p.left = 1;
   1b230:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b234:	f043 0308 	orr.w	r3, r3, #8
   1b238:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   1b23c:	2300      	movs	r3, #0
   1b23e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1b242:	e77a      	b.n	1b13a <tfp_format+0x46>
                i = intarg(0, 1, &va);
   1b244:	466a      	mov	r2, sp
   1b246:	2101      	movs	r1, #1
   1b248:	2000      	movs	r0, #0
   1b24a:	f7ff ff21 	bl	1b090 <intarg>
                if (i > UCHAR_MAX) {
   1b24e:	28ff      	cmp	r0, #255	; 0xff
   1b250:	dd07      	ble.n	1b262 <tfp_format+0x16e>
                    p.width = UCHAR_MAX;
   1b252:	23ff      	movs	r3, #255	; 0xff
   1b254:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   1b258:	9b01      	ldr	r3, [sp, #4]
   1b25a:	1c5a      	adds	r2, r3, #1
   1b25c:	9201      	str	r2, [sp, #4]
   1b25e:	781c      	ldrb	r4, [r3, #0]
   1b260:	e77e      	b.n	1b160 <tfp_format+0x6c>
                } else if (i > 0) {
   1b262:	2800      	cmp	r0, #0
   1b264:	ddf8      	ble.n	1b258 <tfp_format+0x164>
                    p.width = i;
   1b266:	f88d 0020 	strb.w	r0, [sp, #32]
   1b26a:	e7f5      	b.n	1b258 <tfp_format+0x164>
                ch = a2i(ch, &fmt, 10, &(p.width));
   1b26c:	ab08      	add	r3, sp, #32
   1b26e:	220a      	movs	r2, #10
   1b270:	a901      	add	r1, sp, #4
   1b272:	4620      	mov	r0, r4
   1b274:	f7ff fe4d 	bl	1af12 <a2i>
   1b278:	4604      	mov	r4, r0
   1b27a:	e771      	b.n	1b160 <tfp_format+0x6c>
                ch = *(fmt++);
   1b27c:	9b01      	ldr	r3, [sp, #4]
   1b27e:	1c5a      	adds	r2, r3, #1
   1b280:	9201      	str	r2, [sp, #4]
   1b282:	781c      	ldrb	r4, [r3, #0]
                if (ch == 'l') {
   1b284:	2c6c      	cmp	r4, #108	; 0x6c
   1b286:	d001      	beq.n	1b28c <tfp_format+0x198>
                lng = 1;
   1b288:	2001      	movs	r0, #1
   1b28a:	e770      	b.n	1b16e <tfp_format+0x7a>
                    ch = *(fmt++);
   1b28c:	1c9a      	adds	r2, r3, #2
   1b28e:	9201      	str	r2, [sp, #4]
   1b290:	785c      	ldrb	r4, [r3, #1]
                    lng = 2;
   1b292:	2002      	movs	r0, #2
   1b294:	e76b      	b.n	1b16e <tfp_format+0x7a>
                ch = *(fmt++);
   1b296:	9b01      	ldr	r3, [sp, #4]
   1b298:	1c5a      	adds	r2, r3, #1
   1b29a:	9201      	str	r2, [sp, #4]
   1b29c:	781c      	ldrb	r4, [r3, #0]
                p.hh = 1;
   1b29e:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
   1b2a2:	2001      	movs	r0, #1
   1b2a4:	f360 1105 	bfi	r1, r0, #4, #2
   1b2a8:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
                if (ch == 'h') {
   1b2ac:	2c68      	cmp	r4, #104	; 0x68
   1b2ae:	d001      	beq.n	1b2b4 <tfp_format+0x1c0>
            lng = 0;
   1b2b0:	2000      	movs	r0, #0
   1b2b2:	e75c      	b.n	1b16e <tfp_format+0x7a>
                    ch = *(fmt++);
   1b2b4:	4402      	add	r2, r0
   1b2b6:	9201      	str	r2, [sp, #4]
   1b2b8:	785c      	ldrb	r4, [r3, #1]
                    p.hh = 2;
   1b2ba:	b2cb      	uxtb	r3, r1
   1b2bc:	2202      	movs	r2, #2
   1b2be:	f362 1305 	bfi	r3, r2, #4, #2
   1b2c2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;
   1b2c6:	2000      	movs	r0, #0
   1b2c8:	e751      	b.n	1b16e <tfp_format+0x7a>
                ch = *(fmt++);
   1b2ca:	9b01      	ldr	r3, [sp, #4]
   1b2cc:	1c5a      	adds	r2, r3, #1
   1b2ce:	9201      	str	r2, [sp, #4]
   1b2d0:	781c      	ldrb	r4, [r3, #0]
   1b2d2:	e74f      	b.n	1b174 <tfp_format+0x80>
            switch (ch) {
   1b2d4:	2c00      	cmp	r4, #0
   1b2d6:	f000 808a 	beq.w	1b3ee <tfp_format+0x2fa>
   1b2da:	2c25      	cmp	r4, #37	; 0x25
   1b2dc:	f47f af12 	bne.w	1b104 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   1b2e0:	4621      	mov	r1, r4
   1b2e2:	4630      	mov	r0, r6
   1b2e4:	f7ff fe30 	bl	1af48 <putf>
   1b2e8:	4405      	add	r5, r0
                break;
   1b2ea:	e70b      	b.n	1b104 <tfp_format+0x10>
                p.base = 10;
   1b2ec:	230a      	movs	r3, #10
   1b2ee:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1b2f2:	466a      	mov	r2, sp
   1b2f4:	2100      	movs	r1, #0
   1b2f6:	f7ff fecb 	bl	1b090 <intarg>
   1b2fa:	aa08      	add	r2, sp, #32
   1b2fc:	f7ff fd5f 	bl	1adbe <ui2a>
                written += putchw(putp, &p);
   1b300:	a908      	add	r1, sp, #32
   1b302:	4630      	mov	r0, r6
   1b304:	f7ff fe32 	bl	1af6c <putchw>
   1b308:	4405      	add	r5, r0
                break;
   1b30a:	e6fb      	b.n	1b104 <tfp_format+0x10>
                p.base = 10;
   1b30c:	230a      	movs	r3, #10
   1b30e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   1b312:	466a      	mov	r2, sp
   1b314:	2101      	movs	r1, #1
   1b316:	f7ff febb 	bl	1b090 <intarg>
   1b31a:	aa08      	add	r2, sp, #32
   1b31c:	f7ff fdcd 	bl	1aeba <i2a>
                written += putchw(putp, &p);
   1b320:	a908      	add	r1, sp, #32
   1b322:	4630      	mov	r0, r6
   1b324:	f7ff fe22 	bl	1af6c <putchw>
   1b328:	4405      	add	r5, r0
                break;
   1b32a:	e6eb      	b.n	1b104 <tfp_format+0x10>
                p.base = 16;
   1b32c:	2310      	movs	r3, #16
   1b32e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   1b332:	2c58      	cmp	r4, #88	; 0x58
   1b334:	bf14      	ite	ne
   1b336:	2400      	movne	r4, #0
   1b338:	2401      	moveq	r4, #1
   1b33a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b33e:	f364 0382 	bfi	r3, r4, #2, #1
   1b342:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   1b346:	466a      	mov	r2, sp
   1b348:	2100      	movs	r1, #0
   1b34a:	f7ff fea1 	bl	1b090 <intarg>
   1b34e:	aa08      	add	r2, sp, #32
   1b350:	f7ff fd35 	bl	1adbe <ui2a>
                written += putchw(putp, &p);
   1b354:	a908      	add	r1, sp, #32
   1b356:	4630      	mov	r0, r6
   1b358:	f7ff fe08 	bl	1af6c <putchw>
   1b35c:	4405      	add	r5, r0
                break;
   1b35e:	e6d1      	b.n	1b104 <tfp_format+0x10>
                p.base = 8;
   1b360:	2308      	movs	r3, #8
   1b362:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1b366:	466a      	mov	r2, sp
   1b368:	2100      	movs	r1, #0
   1b36a:	f7ff fe91 	bl	1b090 <intarg>
   1b36e:	aa08      	add	r2, sp, #32
   1b370:	f7ff fd25 	bl	1adbe <ui2a>
                written += putchw(putp, &p);
   1b374:	a908      	add	r1, sp, #32
   1b376:	4630      	mov	r0, r6
   1b378:	f7ff fdf8 	bl	1af6c <putchw>
   1b37c:	4405      	add	r5, r0
                break;
   1b37e:	e6c1      	b.n	1b104 <tfp_format+0x10>
                v = va_arg(va, void *);
   1b380:	9b00      	ldr	r3, [sp, #0]
   1b382:	1d1a      	adds	r2, r3, #4
   1b384:	9200      	str	r2, [sp, #0]
   1b386:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   1b388:	2310      	movs	r3, #16
   1b38a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   1b38e:	aa08      	add	r2, sp, #32
   1b390:	2100      	movs	r1, #0
   1b392:	f7ff fd14 	bl	1adbe <ui2a>
                p.width = 2 * sizeof(void*);
   1b396:	2308      	movs	r3, #8
   1b398:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   1b39c:	2301      	movs	r3, #1
   1b39e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   1b3a2:	2130      	movs	r1, #48	; 0x30
   1b3a4:	4630      	mov	r0, r6
   1b3a6:	f7ff fdcf 	bl	1af48 <putf>
   1b3aa:	4405      	add	r5, r0
                written += putf(putp, 'x');
   1b3ac:	2178      	movs	r1, #120	; 0x78
   1b3ae:	4630      	mov	r0, r6
   1b3b0:	f7ff fdca 	bl	1af48 <putf>
   1b3b4:	4405      	add	r5, r0
                written += putchw(putp, &p);
   1b3b6:	a908      	add	r1, sp, #32
   1b3b8:	4630      	mov	r0, r6
   1b3ba:	f7ff fdd7 	bl	1af6c <putchw>
   1b3be:	4405      	add	r5, r0
                break;
   1b3c0:	e6a0      	b.n	1b104 <tfp_format+0x10>
                written += putf(putp, (char)(va_arg(va, int)));
   1b3c2:	9b00      	ldr	r3, [sp, #0]
   1b3c4:	1d1a      	adds	r2, r3, #4
   1b3c6:	9200      	str	r2, [sp, #0]
   1b3c8:	7819      	ldrb	r1, [r3, #0]
   1b3ca:	4630      	mov	r0, r6
   1b3cc:	f7ff fdbc 	bl	1af48 <putf>
   1b3d0:	4405      	add	r5, r0
                break;
   1b3d2:	e697      	b.n	1b104 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   1b3d4:	9b00      	ldr	r3, [sp, #0]
   1b3d6:	1d1a      	adds	r2, r3, #4
   1b3d8:	9200      	str	r2, [sp, #0]
   1b3da:	681b      	ldr	r3, [r3, #0]
   1b3dc:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   1b3de:	a908      	add	r1, sp, #32
   1b3e0:	4630      	mov	r0, r6
   1b3e2:	f7ff fdc3 	bl	1af6c <putchw>
   1b3e6:	4405      	add	r5, r0
                p.bf = bf;
   1b3e8:	ab02      	add	r3, sp, #8
   1b3ea:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   1b3ec:	e68a      	b.n	1b104 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   1b3ee:	4628      	mov	r0, r5
   1b3f0:	b00a      	add	sp, #40	; 0x28
   1b3f2:	bd70      	pop	{r4, r5, r6, pc}

0001b3f4 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   1b3f4:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   1b3f6:	f7ff fe7d 	bl	1b0f4 <tfp_format>
}
   1b3fa:	bd08      	pop	{r3, pc}

0001b3fc <fprintf>:

int fprintf(FILE *f, const char *fmt, ...)
{
   1b3fc:	b40e      	push	{r1, r2, r3}
   1b3fe:	b500      	push	{lr}
   1b400:	b082      	sub	sp, #8
   1b402:	aa03      	add	r2, sp, #12
   1b404:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   1b408:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(f, fmt, va);
   1b40a:	f7ff fff3 	bl	1b3f4 <vfprintf>
    va_end(va);
    return rv;
}
   1b40e:	b002      	add	sp, #8
   1b410:	f85d eb04 	ldr.w	lr, [sp], #4
   1b414:	b003      	add	sp, #12
   1b416:	4770      	bx	lr

0001b418 <printf>:

int printf(const char *fmt, ...)
{
   1b418:	b40f      	push	{r0, r1, r2, r3}
   1b41a:	b500      	push	{lr}
   1b41c:	b083      	sub	sp, #12
   1b41e:	aa04      	add	r2, sp, #16
   1b420:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   1b424:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   1b426:	4b04      	ldr	r3, [pc, #16]	; (1b438 <printf+0x20>)
   1b428:	6818      	ldr	r0, [r3, #0]
   1b42a:	f7ff ffe3 	bl	1b3f4 <vfprintf>
    va_end(va);
    return rv;
}
   1b42e:	b003      	add	sp, #12
   1b430:	f85d eb04 	ldr.w	lr, [sp], #4
   1b434:	b004      	add	sp, #16
   1b436:	4770      	bx	lr
   1b438:	00033dbc 	.word	0x00033dbc

0001b43c <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   1b43c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b43e:	b085      	sub	sp, #20
   1b440:	4605      	mov	r5, r0
   1b442:	460c      	mov	r4, r1
   1b444:	4616      	mov	r6, r2
   1b446:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   1b448:	460a      	mov	r2, r1
   1b44a:	4601      	mov	r1, r0
   1b44c:	4668      	mov	r0, sp
   1b44e:	f000 f861 	bl	1b514 <fmemopen_w>
    tfp_format(f, fmt, va);
   1b452:	463a      	mov	r2, r7
   1b454:	4631      	mov	r1, r6
   1b456:	f7ff fe4d 	bl	1b0f4 <tfp_format>
    if (size > 0) {
   1b45a:	b12c      	cbz	r4, 1b468 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   1b45c:	9b02      	ldr	r3, [sp, #8]
   1b45e:	42a3      	cmp	r3, r4
   1b460:	d205      	bcs.n	1b46e <vsnprintf+0x32>
            *(state.buffer) = '\0';
   1b462:	9b01      	ldr	r3, [sp, #4]
   1b464:	2200      	movs	r2, #0
   1b466:	701a      	strb	r2, [r3, #0]
        } else {
            str[size - 1] = '\0';
        }
    }
    return state.bytes_written;
}
   1b468:	9802      	ldr	r0, [sp, #8]
   1b46a:	b005      	add	sp, #20
   1b46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            str[size - 1] = '\0';
   1b46e:	3c01      	subs	r4, #1
   1b470:	2300      	movs	r3, #0
   1b472:	552b      	strb	r3, [r5, r4]
   1b474:	e7f8      	b.n	1b468 <vsnprintf+0x2c>

0001b476 <snprintf>:

int snprintf(char *str, size_t size, const char *fmt, ...)
{
   1b476:	b40c      	push	{r2, r3}
   1b478:	b500      	push	{lr}
   1b47a:	b083      	sub	sp, #12
   1b47c:	ab04      	add	r3, sp, #16
   1b47e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list va;
    va_start(va, fmt);
   1b482:	9301      	str	r3, [sp, #4]
    int rv = vsnprintf(str, size, fmt, va);
   1b484:	f7ff ffda 	bl	1b43c <vsnprintf>
    va_end(va);
    return rv;
}
   1b488:	b003      	add	sp, #12
   1b48a:	f85d eb04 	ldr.w	lr, [sp], #4
   1b48e:	b002      	add	sp, #8
   1b490:	4770      	bx	lr
	...

0001b494 <jrand48>:

#include <stdlib.h>
#include <stdint.h>

long jrand48(unsigned short xsubi[3])
{
   1b494:	b4f0      	push	{r4, r5, r6, r7}
   1b496:	4601      	mov	r1, r0
	uint64_t x;

	/* The xsubi[] array is littleendian by spec */
	x = (uint64_t) (uint16_t) xsubi[0] +
   1b498:	8804      	ldrh	r4, [r0, #0]
   1b49a:	2500      	movs	r5, #0
	    ((uint64_t) (uint16_t) xsubi[1] << 16) +
   1b49c:	8846      	ldrh	r6, [r0, #2]
   1b49e:	0432      	lsls	r2, r6, #16
	x = (uint64_t) (uint16_t) xsubi[0] +
   1b4a0:	18a2      	adds	r2, r4, r2
   1b4a2:	f04f 0000 	mov.w	r0, #0
   1b4a6:	eb45 0000 	adc.w	r0, r5, r0
	    ((uint64_t) (uint16_t) xsubi[2] << 32);
   1b4aa:	2300      	movs	r3, #0
   1b4ac:	888c      	ldrh	r4, [r1, #4]
	x = (uint64_t) (uint16_t) xsubi[0] +
   1b4ae:	18d2      	adds	r2, r2, r3
   1b4b0:	eb44 0000 	adc.w	r0, r4, r0

	x = (0x5deece66dULL * x) + 0xb;
   1b4b4:	4c0a      	ldr	r4, [pc, #40]	; (1b4e0 <jrand48+0x4c>)
   1b4b6:	2305      	movs	r3, #5
   1b4b8:	fb03 f302 	mul.w	r3, r3, r2
   1b4bc:	fb04 3000 	mla	r0, r4, r0, r3
   1b4c0:	fba2 2304 	umull	r2, r3, r2, r4
   1b4c4:	4403      	add	r3, r0
   1b4c6:	f112 000b 	adds.w	r0, r2, #11
   1b4ca:	f143 0300 	adc.w	r3, r3, #0

	xsubi[0] = (unsigned short)(uint16_t) x;
   1b4ce:	8008      	strh	r0, [r1, #0]
	xsubi[1] = (unsigned short)(uint16_t) (x >> 16);
   1b4d0:	0c00      	lsrs	r0, r0, #16
   1b4d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   1b4d6:	8048      	strh	r0, [r1, #2]
	xsubi[2] = (unsigned short)(uint16_t) (x >> 32);
   1b4d8:	808b      	strh	r3, [r1, #4]

	return (long)(int32_t) (x >> 16);
}
   1b4da:	bcf0      	pop	{r4, r5, r6, r7}
   1b4dc:	4770      	bx	lr
   1b4de:	bf00      	nop
   1b4e0:	deece66d 	.word	0xdeece66d

0001b4e4 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   1b4e4:	b430      	push	{r4, r5}
   1b4e6:	4604      	mov	r4, r0
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   1b4e8:	2000      	movs	r0, #0
    
    while (n--)
   1b4ea:	e000      	b.n	1b4ee <memfile_write+0xa>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   1b4ec:	462a      	mov	r2, r5
    while (n--)
   1b4ee:	1e55      	subs	r5, r2, #1
   1b4f0:	b16a      	cbz	r2, 1b50e <memfile_write+0x2a>
        f->bytes_written++;
   1b4f2:	68a3      	ldr	r3, [r4, #8]
   1b4f4:	3301      	adds	r3, #1
   1b4f6:	60a3      	str	r3, [r4, #8]
        if (f->bytes_written <= f->size)
   1b4f8:	68e2      	ldr	r2, [r4, #12]
   1b4fa:	4293      	cmp	r3, r2
   1b4fc:	d8f6      	bhi.n	1b4ec <memfile_write+0x8>
            *f->buffer++ = *bp++;
   1b4fe:	6863      	ldr	r3, [r4, #4]
   1b500:	1c5a      	adds	r2, r3, #1
   1b502:	6062      	str	r2, [r4, #4]
   1b504:	f811 2b01 	ldrb.w	r2, [r1], #1
   1b508:	701a      	strb	r2, [r3, #0]
            i++;
   1b50a:	3001      	adds	r0, #1
   1b50c:	e7ee      	b.n	1b4ec <memfile_write+0x8>
        }
    }
    
    return i;
}
   1b50e:	bc30      	pop	{r4, r5}
   1b510:	4770      	bx	lr
	...

0001b514 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   1b514:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   1b516:	4c04      	ldr	r4, [pc, #16]	; (1b528 <fmemopen_w+0x14>)
   1b518:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   1b51a:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   1b51c:	2100      	movs	r1, #0
   1b51e:	6081      	str	r1, [r0, #8]
    storage->size = size;
   1b520:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   1b522:	bc10      	pop	{r4}
   1b524:	4770      	bx	lr
   1b526:	bf00      	nop
   1b528:	00033db4 	.word	0x00033db4

0001b52c <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   1b52c:	2000      	movs	r0, #0
   1b52e:	4770      	bx	lr

0001b530 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   1b530:	b510      	push	{r4, lr}
   1b532:	4608      	mov	r0, r1
   1b534:	4614      	mov	r4, r2
    console_write(bp, n);
   1b536:	4611      	mov	r1, r2
   1b538:	f000 fc40 	bl	1bdbc <console_write>
    return n;
}
   1b53c:	4620      	mov	r0, r4
   1b53e:	bd10      	pop	{r4, pc}

0001b540 <strntoumax>:
		return -1;
	}
}

uintmax_t strntoumax(const char *nptr, char **endptr, int base, size_t n)
{
   1b540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b544:	4605      	mov	r5, r0
   1b546:	468c      	mov	ip, r1
	int minus = 0;
	uintmax_t v = 0;
	int d;

	while (n && isspace((unsigned char)*nptr)) {
   1b548:	e001      	b.n	1b54e <strntoumax+0xe>
		nptr++;
   1b54a:	3501      	adds	r5, #1
		n--;
   1b54c:	3b01      	subs	r3, #1
	while (n && isspace((unsigned char)*nptr)) {
   1b54e:	b143      	cbz	r3, 1b562 <strntoumax+0x22>
   1b550:	7829      	ldrb	r1, [r5, #0]
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
   1b552:	2920      	cmp	r1, #32
   1b554:	d0f9      	beq.n	1b54a <strntoumax+0xa>
   1b556:	290a      	cmp	r1, #10
   1b558:	d0f7      	beq.n	1b54a <strntoumax+0xa>
   1b55a:	2909      	cmp	r1, #9
   1b55c:	d0f5      	beq.n	1b54a <strntoumax+0xa>
   1b55e:	290d      	cmp	r1, #13
   1b560:	d0f3      	beq.n	1b54a <strntoumax+0xa>
	}

	/* Single optional + or - */
	if (n) {
   1b562:	b1a3      	cbz	r3, 1b58e <strntoumax+0x4e>
		char c = *nptr;
   1b564:	f895 e000 	ldrb.w	lr, [r5]
		if (c == '-' || c == '+') {
   1b568:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   1b56c:	d005      	beq.n	1b57a <strntoumax+0x3a>
   1b56e:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   1b572:	d002      	beq.n	1b57a <strntoumax+0x3a>
	int minus = 0;
   1b574:	f04f 0e00 	mov.w	lr, #0
   1b578:	e00b      	b.n	1b592 <strntoumax+0x52>
			minus = (c == '-');
   1b57a:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   1b57e:	bf14      	ite	ne
   1b580:	f04f 0e00 	movne.w	lr, #0
   1b584:	f04f 0e01 	moveq.w	lr, #1
			nptr++;
   1b588:	3501      	adds	r5, #1
			n--;
   1b58a:	3b01      	subs	r3, #1
   1b58c:	e001      	b.n	1b592 <strntoumax+0x52>
	int minus = 0;
   1b58e:	f04f 0e00 	mov.w	lr, #0
		}
	}

	if (base == 0) {
   1b592:	b9ba      	cbnz	r2, 1b5c4 <strntoumax+0x84>
		if (n >= 2 && nptr[0] == '0' &&
   1b594:	2b01      	cmp	r3, #1
   1b596:	d902      	bls.n	1b59e <strntoumax+0x5e>
   1b598:	782a      	ldrb	r2, [r5, #0]
   1b59a:	2a30      	cmp	r2, #48	; 0x30
   1b59c:	d005      	beq.n	1b5aa <strntoumax+0x6a>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
			n -= 2;
			nptr += 2;
			base = 16;
		} else if (n >= 1 && nptr[0] == '0') {
   1b59e:	b32b      	cbz	r3, 1b5ec <strntoumax+0xac>
   1b5a0:	782a      	ldrb	r2, [r5, #0]
   1b5a2:	2a30      	cmp	r2, #48	; 0x30
   1b5a4:	d00a      	beq.n	1b5bc <strntoumax+0x7c>
			n--;
			nptr++;
			base = 8;
		} else {
			base = 10;
   1b5a6:	220a      	movs	r2, #10
   1b5a8:	e00e      	b.n	1b5c8 <strntoumax+0x88>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1b5aa:	786a      	ldrb	r2, [r5, #1]
		if (n >= 2 && nptr[0] == '0' &&
   1b5ac:	2a78      	cmp	r2, #120	; 0x78
   1b5ae:	d001      	beq.n	1b5b4 <strntoumax+0x74>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1b5b0:	2a58      	cmp	r2, #88	; 0x58
   1b5b2:	d1f4      	bne.n	1b59e <strntoumax+0x5e>
			n -= 2;
   1b5b4:	3b02      	subs	r3, #2
			nptr += 2;
   1b5b6:	3502      	adds	r5, #2
			base = 16;
   1b5b8:	2210      	movs	r2, #16
   1b5ba:	e005      	b.n	1b5c8 <strntoumax+0x88>
			n--;
   1b5bc:	3b01      	subs	r3, #1
			nptr++;
   1b5be:	3501      	adds	r5, #1
			base = 8;
   1b5c0:	2208      	movs	r2, #8
   1b5c2:	e001      	b.n	1b5c8 <strntoumax+0x88>
		}
	} else if (base == 16) {
   1b5c4:	2a10      	cmp	r2, #16
   1b5c6:	d004      	beq.n	1b5d2 <strntoumax+0x92>
			base = 16;
   1b5c8:	f04f 0800 	mov.w	r8, #0
   1b5cc:	f04f 0900 	mov.w	r9, #0
   1b5d0:	e026      	b.n	1b620 <strntoumax+0xe0>
		if (n >= 2 && nptr[0] == '0' &&
   1b5d2:	2b01      	cmp	r3, #1
   1b5d4:	d9f8      	bls.n	1b5c8 <strntoumax+0x88>
   1b5d6:	7829      	ldrb	r1, [r5, #0]
   1b5d8:	2930      	cmp	r1, #48	; 0x30
   1b5da:	d1f5      	bne.n	1b5c8 <strntoumax+0x88>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1b5dc:	7869      	ldrb	r1, [r5, #1]
		if (n >= 2 && nptr[0] == '0' &&
   1b5de:	2978      	cmp	r1, #120	; 0x78
   1b5e0:	d001      	beq.n	1b5e6 <strntoumax+0xa6>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1b5e2:	2958      	cmp	r1, #88	; 0x58
   1b5e4:	d1f0      	bne.n	1b5c8 <strntoumax+0x88>
			n -= 2;
   1b5e6:	3b02      	subs	r3, #2
			nptr += 2;
   1b5e8:	3502      	adds	r5, #2
   1b5ea:	e7ed      	b.n	1b5c8 <strntoumax+0x88>
			base = 10;
   1b5ec:	220a      	movs	r2, #10
   1b5ee:	e7eb      	b.n	1b5c8 <strntoumax+0x88>
		return ch - '0';
   1b5f0:	4634      	mov	r4, r6
   1b5f2:	e002      	b.n	1b5fa <strntoumax+0xba>
		return ch - 'A' + 10;
   1b5f4:	3c37      	subs	r4, #55	; 0x37
   1b5f6:	e000      	b.n	1b5fa <strntoumax+0xba>
		return ch - 'a' + 10;
   1b5f8:	3c57      	subs	r4, #87	; 0x57
		}
	}

	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   1b5fa:	2c00      	cmp	r4, #0
   1b5fc:	db1e      	blt.n	1b63c <strntoumax+0xfc>
   1b5fe:	42a2      	cmp	r2, r4
   1b600:	dd1c      	ble.n	1b63c <strntoumax+0xfc>
		v = v * base + d;
   1b602:	fb02 f109 	mul.w	r1, r2, r9
   1b606:	17d7      	asrs	r7, r2, #31
   1b608:	fb08 1607 	mla	r6, r8, r7, r1
   1b60c:	fba2 0108 	umull	r0, r1, r2, r8
   1b610:	4431      	add	r1, r6
   1b612:	1900      	adds	r0, r0, r4
   1b614:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   1b618:	4680      	mov	r8, r0
   1b61a:	4689      	mov	r9, r1
		n--;
   1b61c:	3b01      	subs	r3, #1
		nptr++;
   1b61e:	3501      	adds	r5, #1
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   1b620:	b163      	cbz	r3, 1b63c <strntoumax+0xfc>
   1b622:	782c      	ldrb	r4, [r5, #0]
	if (ch >= '0' && ch <= '9') {
   1b624:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   1b628:	2e09      	cmp	r6, #9
   1b62a:	d9e1      	bls.n	1b5f0 <strntoumax+0xb0>
	} else if (ch >= 'A' && ch <= 'Z') {
   1b62c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   1b630:	2e19      	cmp	r6, #25
   1b632:	d9df      	bls.n	1b5f4 <strntoumax+0xb4>
	} else if (ch >= 'a' && ch <= 'z') {
   1b634:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   1b638:	2e19      	cmp	r6, #25
   1b63a:	d9dd      	bls.n	1b5f8 <strntoumax+0xb8>
	}

	if (endptr)
   1b63c:	f1bc 0f00 	cmp.w	ip, #0
   1b640:	d001      	beq.n	1b646 <strntoumax+0x106>
		*endptr = (char *)nptr;
   1b642:	f8cc 5000 	str.w	r5, [ip]

	return minus ? -v : v;
   1b646:	f1be 0f00 	cmp.w	lr, #0
   1b64a:	d003      	beq.n	1b654 <strntoumax+0x114>
   1b64c:	f1d8 0800 	rsbs	r8, r8, #0
   1b650:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
}
   1b654:	4640      	mov	r0, r8
   1b656:	4649      	mov	r1, r9
   1b658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001b65c <strsep>:
 */

#include <string.h>

char *strsep(char **stringp, const char *delim)
{
   1b65c:	b538      	push	{r3, r4, r5, lr}
	char *s = *stringp;
   1b65e:	6805      	ldr	r5, [r0, #0]
	char *e;

	if (!s)
   1b660:	b14d      	cbz	r5, 1b676 <strsep+0x1a>
   1b662:	4604      	mov	r4, r0
		return NULL;

	e = strpbrk(s, delim);
   1b664:	4628      	mov	r0, r5
   1b666:	f000 f808 	bl	1b67a <strpbrk>
	if (e)
   1b66a:	4603      	mov	r3, r0
   1b66c:	b110      	cbz	r0, 1b674 <strsep+0x18>
		*e++ = '\0';
   1b66e:	2200      	movs	r2, #0
   1b670:	f803 2b01 	strb.w	r2, [r3], #1

	*stringp = e;
   1b674:	6023      	str	r3, [r4, #0]
	return s;
}
   1b676:	4628      	mov	r0, r5
   1b678:	bd38      	pop	{r3, r4, r5, pc}

0001b67a <strpbrk>:
#include <string.h>

char *strpbrk(const char *s1, const char *s2)
{
  const char *c = s2;
  if (!*s1)
   1b67a:	7803      	ldrb	r3, [r0, #0]
   1b67c:	b193      	cbz	r3, 1b6a4 <strpbrk+0x2a>
{
   1b67e:	b410      	push	{r4}
  const char *c = s2;
   1b680:	460a      	mov	r2, r1
   1b682:	e001      	b.n	1b688 <strpbrk+0xe>
      for (c = s2; *c; c++)
	{
	  if (*s1 == *c)
	    break;
	}
      if (*c)
   1b684:	b953      	cbnz	r3, 1b69c <strpbrk+0x22>
	break;
      s1++;
   1b686:	3001      	adds	r0, #1
  while (*s1)
   1b688:	7804      	ldrb	r4, [r0, #0]
   1b68a:	b13c      	cbz	r4, 1b69c <strpbrk+0x22>
      for (c = s2; *c; c++)
   1b68c:	460a      	mov	r2, r1
   1b68e:	7813      	ldrb	r3, [r2, #0]
   1b690:	2b00      	cmp	r3, #0
   1b692:	d0f7      	beq.n	1b684 <strpbrk+0xa>
	  if (*s1 == *c)
   1b694:	42a3      	cmp	r3, r4
   1b696:	d0f5      	beq.n	1b684 <strpbrk+0xa>
      for (c = s2; *c; c++)
   1b698:	3201      	adds	r2, #1
   1b69a:	e7f8      	b.n	1b68e <strpbrk+0x14>
    }

  if (*c == '\0')
   1b69c:	7813      	ldrb	r3, [r2, #0]
   1b69e:	b11b      	cbz	r3, 1b6a8 <strpbrk+0x2e>
    s1 = NULL;

  return (char *) s1;
}
   1b6a0:	bc10      	pop	{r4}
   1b6a2:	4770      	bx	lr
    return (char *) NULL;
   1b6a4:	2000      	movs	r0, #0
}
   1b6a6:	4770      	bx	lr
    s1 = NULL;
   1b6a8:	2000      	movs	r0, #0
   1b6aa:	e7f9      	b.n	1b6a0 <strpbrk+0x26>

0001b6ac <add_ascii_num_with_char>:
 * Helper function for terminal escape sequences with number parameter.
 * It adds ascii encoded number plus one character.
 */
static char *
add_ascii_num_with_char(char *str, unsigned int num, char c)
{
   1b6ac:	b470      	push	{r4, r5, r6}
    char *p = str;
   1b6ae:	4604      	mov	r4, r0
    char *s;
    char tmp;

    /* Put digits in reverse order first. */
    do {
        *p++ = (num % 10) + '0';
   1b6b0:	4b10      	ldr	r3, [pc, #64]	; (1b6f4 <add_ascii_num_with_char+0x48>)
   1b6b2:	fba3 5301 	umull	r5, r3, r3, r1
   1b6b6:	08db      	lsrs	r3, r3, #3
   1b6b8:	461e      	mov	r6, r3
   1b6ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1b6be:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
   1b6c2:	4625      	mov	r5, r4
   1b6c4:	3401      	adds	r4, #1
   1b6c6:	3330      	adds	r3, #48	; 0x30
   1b6c8:	702b      	strb	r3, [r5, #0]
        num /= 10;
   1b6ca:	460b      	mov	r3, r1
   1b6cc:	4631      	mov	r1, r6
    } while (num);
   1b6ce:	2b09      	cmp	r3, #9
   1b6d0:	d8ee      	bhi.n	1b6b0 <add_ascii_num_with_char+0x4>
    s = str;
    str = p;
    --p;
   1b6d2:	462b      	mov	r3, r5
   1b6d4:	e005      	b.n	1b6e2 <add_ascii_num_with_char+0x36>
    /* Revers order of characters, to get correct number representation */
    while (s < p) {
       tmp = *s;
   1b6d6:	7801      	ldrb	r1, [r0, #0]
       *s++ = *p;
   1b6d8:	781e      	ldrb	r6, [r3, #0]
   1b6da:	f800 6b01 	strb.w	r6, [r0], #1
       *p-- = tmp;
   1b6de:	f803 1901 	strb.w	r1, [r3], #-1
    while (s < p) {
   1b6e2:	4283      	cmp	r3, r0
   1b6e4:	d8f7      	bhi.n	1b6d6 <add_ascii_num_with_char+0x2a>
    }

    *str++ = c;
   1b6e6:	7022      	strb	r2, [r4, #0]
    *str = '\0';
   1b6e8:	2300      	movs	r3, #0
   1b6ea:	7063      	strb	r3, [r4, #1]

    return str;
}
   1b6ec:	1ca8      	adds	r0, r5, #2
   1b6ee:	bc70      	pop	{r4, r5, r6}
   1b6f0:	4770      	bx	lr
   1b6f2:	bf00      	nop
   1b6f4:	cccccccd 	.word	0xcccccccd

0001b6f8 <console_handle_line>:
    esc_state &= ~ESC_ANSI;
}

static void
console_handle_line(void)
{
   1b6f8:	b508      	push	{r3, lr}
    cur = 0;
   1b6fa:	2300      	movs	r3, #0
   1b6fc:	4a08      	ldr	r2, [pc, #32]	; (1b720 <console_handle_line+0x28>)
   1b6fe:	8013      	strh	r3, [r2, #0]
    trailing_chars = 0;
   1b700:	4a08      	ldr	r2, [pc, #32]	; (1b724 <console_handle_line+0x2c>)
   1b702:	8013      	strh	r3, [r2, #0]
    os_eventq_put(lines_queue, current_line_ev);
   1b704:	4b08      	ldr	r3, [pc, #32]	; (1b728 <console_handle_line+0x30>)
   1b706:	6819      	ldr	r1, [r3, #0]
   1b708:	4b08      	ldr	r3, [pc, #32]	; (1b72c <console_handle_line+0x34>)
   1b70a:	6818      	ldr	r0, [r3, #0]
   1b70c:	f7fd fe83 	bl	19416 <os_eventq_put>

#if MYNEWT_VAL(CONSOLE_COMPAT)
    if (console_compat_rx_cb) {
   1b710:	4b07      	ldr	r3, [pc, #28]	; (1b730 <console_handle_line+0x38>)
   1b712:	681b      	ldr	r3, [r3, #0]
   1b714:	b103      	cbz	r3, 1b718 <console_handle_line+0x20>
        console_compat_rx_cb();
   1b716:	4798      	blx	r3
    }
#endif

    current_line_ev = NULL;
   1b718:	4b03      	ldr	r3, [pc, #12]	; (1b728 <console_handle_line+0x30>)
   1b71a:	2200      	movs	r2, #0
   1b71c:	601a      	str	r2, [r3, #0]
}
   1b71e:	bd08      	pop	{r3, pc}
   1b720:	10004f78 	.word	0x10004f78
   1b724:	10004f96 	.word	0x10004f96
   1b728:	10004f7c 	.word	0x10004f7c
   1b72c:	10004f88 	.word	0x10004f88
   1b730:	10004f54 	.word	0x10004f54

0001b734 <console_filter_out>:
{
   1b734:	b508      	push	{r3, lr}
    if (g_console_silence) {
   1b736:	4b0b      	ldr	r3, [pc, #44]	; (1b764 <console_filter_out+0x30>)
   1b738:	781b      	ldrb	r3, [r3, #0]
   1b73a:	b95b      	cbnz	r3, 1b754 <console_filter_out+0x20>
    if (prompt_has_focus || g_is_output_nlip) {
   1b73c:	4b0a      	ldr	r3, [pc, #40]	; (1b768 <console_filter_out+0x34>)
   1b73e:	781b      	ldrb	r3, [r3, #0]
   1b740:	b94b      	cbnz	r3, 1b756 <console_filter_out+0x22>
    console_is_midline = c != '\n' && c != '\r';
   1b742:	280a      	cmp	r0, #10
   1b744:	d00c      	beq.n	1b760 <console_filter_out+0x2c>
   1b746:	280d      	cmp	r0, #13
   1b748:	d008      	beq.n	1b75c <console_filter_out+0x28>
   1b74a:	2201      	movs	r2, #1
   1b74c:	4b07      	ldr	r3, [pc, #28]	; (1b76c <console_filter_out+0x38>)
   1b74e:	601a      	str	r2, [r3, #0]
        c = console_out_nolock(c);
   1b750:	f000 fdee 	bl	1c330 <console_out_nolock>
}
   1b754:	bd08      	pop	{r3, pc}
        return console_out_nolock(c);
   1b756:	f000 fdeb 	bl	1c330 <console_out_nolock>
   1b75a:	e7fb      	b.n	1b754 <console_filter_out+0x20>
    console_is_midline = c != '\n' && c != '\r';
   1b75c:	2200      	movs	r2, #0
   1b75e:	e7f5      	b.n	1b74c <console_filter_out+0x18>
   1b760:	2200      	movs	r2, #0
   1b762:	e7f3      	b.n	1b74c <console_filter_out+0x18>
   1b764:	10004f85 	.word	0x10004f85
   1b768:	10004f87 	.word	0x10004f87
   1b76c:	10004f58 	.word	0x10004f58

0001b770 <console_filter_write>:
{
   1b770:	b570      	push	{r4, r5, r6, lr}
   1b772:	4606      	mov	r6, r0
   1b774:	460d      	mov	r5, r1
    for (i = 0; i < cnt; i++) {
   1b776:	2400      	movs	r4, #0
   1b778:	42ac      	cmp	r4, r5
   1b77a:	da07      	bge.n	1b78c <console_filter_write+0x1c>
        if (console_filter_out((int)str[i]) == EOF) {
   1b77c:	5d30      	ldrb	r0, [r6, r4]
   1b77e:	f7ff ffd9 	bl	1b734 <console_filter_out>
   1b782:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1b786:	d001      	beq.n	1b78c <console_filter_write+0x1c>
    for (i = 0; i < cnt; i++) {
   1b788:	3401      	adds	r4, #1
   1b78a:	e7f5      	b.n	1b778 <console_filter_write+0x8>
}
   1b78c:	bd70      	pop	{r4, r5, r6, pc}
	...

0001b790 <console_append_char>:
    return handled;
}

static int
console_append_char(char *line, uint8_t byte)
{
   1b790:	b508      	push	{r3, lr}
    if (cur + trailing_chars >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   1b792:	4b0d      	ldr	r3, [pc, #52]	; (1b7c8 <console_append_char+0x38>)
   1b794:	881b      	ldrh	r3, [r3, #0]
   1b796:	4a0d      	ldr	r2, [pc, #52]	; (1b7cc <console_append_char+0x3c>)
   1b798:	8812      	ldrh	r2, [r2, #0]
   1b79a:	4413      	add	r3, r2
   1b79c:	2bfe      	cmp	r3, #254	; 0xfe
   1b79e:	dc0e      	bgt.n	1b7be <console_append_char+0x2e>
        return 0;
    }

    line[cur + trailing_chars] = byte;
   1b7a0:	54c1      	strb	r1, [r0, r3]

    if (byte == '\0') {
   1b7a2:	b171      	cbz	r1, 1b7c2 <console_append_char+0x32>
        return 1;
    }

    if (echo) {
   1b7a4:	4b0a      	ldr	r3, [pc, #40]	; (1b7d0 <console_append_char+0x40>)
   1b7a6:	681b      	ldr	r3, [r3, #0]
   1b7a8:	b92b      	cbnz	r3, 1b7b6 <console_append_char+0x26>
        /* Echo back to console */
        console_switch_to_prompt();
        console_out_nolock(byte);
        console_switch_to_logs();
    }
    ++cur;
   1b7aa:	4a07      	ldr	r2, [pc, #28]	; (1b7c8 <console_append_char+0x38>)
   1b7ac:	8813      	ldrh	r3, [r2, #0]
   1b7ae:	3301      	adds	r3, #1
   1b7b0:	8013      	strh	r3, [r2, #0]
    return 1;
   1b7b2:	2001      	movs	r0, #1
}
   1b7b4:	bd08      	pop	{r3, pc}
        console_out_nolock(byte);
   1b7b6:	4608      	mov	r0, r1
   1b7b8:	f000 fdba 	bl	1c330 <console_out_nolock>
        console_switch_to_logs();
   1b7bc:	e7f5      	b.n	1b7aa <console_append_char+0x1a>
        return 0;
   1b7be:	2000      	movs	r0, #0
   1b7c0:	e7f8      	b.n	1b7b4 <console_append_char+0x24>
        return 1;
   1b7c2:	2001      	movs	r0, #1
   1b7c4:	e7f6      	b.n	1b7b4 <console_append_char+0x24>
   1b7c6:	bf00      	nop
   1b7c8:	10004f78 	.word	0x10004f78
   1b7cc:	10004f96 	.word	0x10004f96
   1b7d0:	10000694 	.word	0x10000694

0001b7d4 <console_write_nolock>:
{
   1b7d4:	b570      	push	{r4, r5, r6, lr}
   1b7d6:	4606      	mov	r6, r0
   1b7d8:	460d      	mov	r5, r1
    for (i = 0; i < cnt; i++) {
   1b7da:	2400      	movs	r4, #0
   1b7dc:	42ac      	cmp	r4, r5
   1b7de:	da07      	bge.n	1b7f0 <console_write_nolock+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) {
   1b7e0:	5d30      	ldrb	r0, [r6, r4]
   1b7e2:	f000 fda5 	bl	1c330 <console_out_nolock>
   1b7e6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1b7ea:	d001      	beq.n	1b7f0 <console_write_nolock+0x1c>
    for (i = 0; i < cnt; i++) {
   1b7ec:	3401      	adds	r4, #1
   1b7ee:	e7f5      	b.n	1b7dc <console_write_nolock+0x8>
}
   1b7f0:	bd70      	pop	{r4, r5, r6, pc}
	...

0001b7f4 <handle_end>:
    if (trailing_chars) {
   1b7f4:	4b11      	ldr	r3, [pc, #68]	; (1b83c <handle_end+0x48>)
   1b7f6:	8819      	ldrh	r1, [r3, #0]
   1b7f8:	b901      	cbnz	r1, 1b7fc <handle_end+0x8>
   1b7fa:	4770      	bx	lr
{
   1b7fc:	b510      	push	{r4, lr}
   1b7fe:	b084      	sub	sp, #16
    char seq[14] = CSI;
   1b800:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1b804:	9300      	str	r3, [sp, #0]
   1b806:	2300      	movs	r3, #0
   1b808:	9301      	str	r3, [sp, #4]
   1b80a:	9302      	str	r3, [sp, #8]
   1b80c:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   1b810:	b949      	cbnz	r1, 1b826 <handle_end+0x32>
        cur += trailing_chars;
   1b812:	490b      	ldr	r1, [pc, #44]	; (1b840 <handle_end+0x4c>)
   1b814:	4a09      	ldr	r2, [pc, #36]	; (1b83c <handle_end+0x48>)
   1b816:	880b      	ldrh	r3, [r1, #0]
   1b818:	8810      	ldrh	r0, [r2, #0]
   1b81a:	4403      	add	r3, r0
   1b81c:	800b      	strh	r3, [r1, #0]
        trailing_chars = 0;
   1b81e:	2300      	movs	r3, #0
   1b820:	8013      	strh	r3, [r2, #0]
}
   1b822:	b004      	add	sp, #16
   1b824:	bd10      	pop	{r4, pc}
        p = add_ascii_num_with_char(seq + 2, count, 'C');
   1b826:	466c      	mov	r4, sp
   1b828:	2243      	movs	r2, #67	; 0x43
   1b82a:	f10d 0002 	add.w	r0, sp, #2
   1b82e:	f7ff ff3d 	bl	1b6ac <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   1b832:	1b01      	subs	r1, r0, r4
   1b834:	4620      	mov	r0, r4
   1b836:	f7ff ffcd 	bl	1b7d4 <console_write_nolock>
   1b83a:	e7ea      	b.n	1b812 <handle_end+0x1e>
   1b83c:	10004f96 	.word	0x10004f96
   1b840:	10004f78 	.word	0x10004f78

0001b844 <handle_home>:
    if (cur) {
   1b844:	4b11      	ldr	r3, [pc, #68]	; (1b88c <handle_home+0x48>)
   1b846:	8819      	ldrh	r1, [r3, #0]
   1b848:	b901      	cbnz	r1, 1b84c <handle_home+0x8>
   1b84a:	4770      	bx	lr
{
   1b84c:	b510      	push	{r4, lr}
   1b84e:	b084      	sub	sp, #16
    char seq[14] = CSI;
   1b850:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1b854:	9300      	str	r3, [sp, #0]
   1b856:	2300      	movs	r3, #0
   1b858:	9301      	str	r3, [sp, #4]
   1b85a:	9302      	str	r3, [sp, #8]
   1b85c:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   1b860:	b949      	cbnz	r1, 1b876 <handle_home+0x32>
        trailing_chars += cur;
   1b862:	490b      	ldr	r1, [pc, #44]	; (1b890 <handle_home+0x4c>)
   1b864:	4a09      	ldr	r2, [pc, #36]	; (1b88c <handle_home+0x48>)
   1b866:	880b      	ldrh	r3, [r1, #0]
   1b868:	8810      	ldrh	r0, [r2, #0]
   1b86a:	4403      	add	r3, r0
   1b86c:	800b      	strh	r3, [r1, #0]
        cur = 0;
   1b86e:	2300      	movs	r3, #0
   1b870:	8013      	strh	r3, [r2, #0]
}
   1b872:	b004      	add	sp, #16
   1b874:	bd10      	pop	{r4, pc}
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   1b876:	466c      	mov	r4, sp
   1b878:	2244      	movs	r2, #68	; 0x44
   1b87a:	f10d 0002 	add.w	r0, sp, #2
   1b87e:	f7ff ff15 	bl	1b6ac <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   1b882:	1b01      	subs	r1, r0, r4
   1b884:	4620      	mov	r0, r4
   1b886:	f7ff ffa5 	bl	1b7d4 <console_write_nolock>
   1b88a:	e7ea      	b.n	1b862 <handle_home+0x1e>
   1b88c:	10004f78 	.word	0x10004f78
   1b890:	10004f96 	.word	0x10004f96

0001b894 <del_char>:
{
   1b894:	b530      	push	{r4, r5, lr}
   1b896:	b085      	sub	sp, #20
   1b898:	4604      	mov	r4, r0
    left = trailing_chars;
   1b89a:	4b17      	ldr	r3, [pc, #92]	; (1b8f8 <del_char+0x64>)
   1b89c:	881b      	ldrh	r3, [r3, #0]
    while (left-- > 1) {
   1b89e:	1e5d      	subs	r5, r3, #1
   1b8a0:	2b01      	cmp	r3, #1
   1b8a2:	dd06      	ble.n	1b8b2 <del_char+0x1e>
        *pos = *(pos + 1);
   1b8a4:	7860      	ldrb	r0, [r4, #1]
   1b8a6:	f804 0b01 	strb.w	r0, [r4], #1
        console_out_nolock(*(pos++));
   1b8aa:	f000 fd41 	bl	1c330 <console_out_nolock>
    while (left-- > 1) {
   1b8ae:	462b      	mov	r3, r5
   1b8b0:	e7f5      	b.n	1b89e <del_char+0xa>
    if (trailing_chars) {
   1b8b2:	4b11      	ldr	r3, [pc, #68]	; (1b8f8 <del_char+0x64>)
   1b8b4:	881b      	ldrh	r3, [r3, #0]
   1b8b6:	b90b      	cbnz	r3, 1b8bc <del_char+0x28>
}
   1b8b8:	b005      	add	sp, #20
   1b8ba:	bd30      	pop	{r4, r5, pc}
        console_out_nolock(' ');
   1b8bc:	2020      	movs	r0, #32
   1b8be:	f000 fd37 	bl	1c330 <console_out_nolock>
        cursor_backward(trailing_chars);
   1b8c2:	4b0d      	ldr	r3, [pc, #52]	; (1b8f8 <del_char+0x64>)
   1b8c4:	8819      	ldrh	r1, [r3, #0]
    char seq[14] = CSI;
   1b8c6:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1b8ca:	9300      	str	r3, [sp, #0]
   1b8cc:	2300      	movs	r3, #0
   1b8ce:	9301      	str	r3, [sp, #4]
   1b8d0:	9302      	str	r3, [sp, #8]
   1b8d2:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   1b8d6:	b921      	cbnz	r1, 1b8e2 <del_char+0x4e>
        trailing_chars--;
   1b8d8:	4a07      	ldr	r2, [pc, #28]	; (1b8f8 <del_char+0x64>)
   1b8da:	8813      	ldrh	r3, [r2, #0]
   1b8dc:	3b01      	subs	r3, #1
   1b8de:	8013      	strh	r3, [r2, #0]
}
   1b8e0:	e7ea      	b.n	1b8b8 <del_char+0x24>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   1b8e2:	466c      	mov	r4, sp
   1b8e4:	2244      	movs	r2, #68	; 0x44
   1b8e6:	f10d 0002 	add.w	r0, sp, #2
   1b8ea:	f7ff fedf 	bl	1b6ac <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   1b8ee:	1b01      	subs	r1, r0, r4
   1b8f0:	4620      	mov	r0, r4
   1b8f2:	f7ff ff6f 	bl	1b7d4 <console_write_nolock>
   1b8f6:	e7ef      	b.n	1b8d8 <del_char+0x44>
   1b8f8:	10004f96 	.word	0x10004f96

0001b8fc <handle_delete>:
{
   1b8fc:	b508      	push	{r3, lr}
    if (trailing_chars) {
   1b8fe:	4b05      	ldr	r3, [pc, #20]	; (1b914 <handle_delete+0x18>)
   1b900:	881b      	ldrh	r3, [r3, #0]
   1b902:	b903      	cbnz	r3, 1b906 <handle_delete+0xa>
}
   1b904:	bd08      	pop	{r3, pc}
        del_char(&line[cur]);
   1b906:	4b04      	ldr	r3, [pc, #16]	; (1b918 <handle_delete+0x1c>)
   1b908:	881b      	ldrh	r3, [r3, #0]
   1b90a:	4418      	add	r0, r3
   1b90c:	f7ff ffc2 	bl	1b894 <del_char>
}
   1b910:	e7f8      	b.n	1b904 <handle_delete+0x8>
   1b912:	bf00      	nop
   1b914:	10004f96 	.word	0x10004f96
   1b918:	10004f78 	.word	0x10004f78

0001b91c <handle_ansi>:
{
   1b91c:	4603      	mov	r3, r0
    if (esc_state & ESC_ANSI_FIRST) {
   1b91e:	4a5e      	ldr	r2, [pc, #376]	; (1ba98 <handle_ansi+0x17c>)
   1b920:	6812      	ldr	r2, [r2, #0]
   1b922:	f012 0f04 	tst.w	r2, #4
   1b926:	d025      	beq.n	1b974 <handle_ansi+0x58>
        esc_state &= ~ESC_ANSI_FIRST;
   1b928:	f022 0204 	bic.w	r2, r2, #4
   1b92c:	485a      	ldr	r0, [pc, #360]	; (1ba98 <handle_ansi+0x17c>)
   1b92e:	6002      	str	r2, [r0, #0]
        if (!isdigit(byte)) {
   1b930:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1b934:	2809      	cmp	r0, #9
   1b936:	d912      	bls.n	1b95e <handle_ansi+0x42>
            ansi_val = 1;
   1b938:	4a58      	ldr	r2, [pc, #352]	; (1ba9c <handle_ansi+0x180>)
   1b93a:	2001      	movs	r0, #1
   1b93c:	6010      	str	r0, [r2, #0]
{
   1b93e:	b510      	push	{r4, lr}
   1b940:	b084      	sub	sp, #16
    switch (byte) {
   1b942:	2b48      	cmp	r3, #72	; 0x48
   1b944:	d840      	bhi.n	1b9c8 <handle_ansi+0xac>
   1b946:	2b43      	cmp	r3, #67	; 0x43
   1b948:	f0c0 8093 	bcc.w	1ba72 <handle_ansi+0x156>
   1b94c:	3b43      	subs	r3, #67	; 0x43
   1b94e:	2b05      	cmp	r3, #5
   1b950:	f200 808f 	bhi.w	1ba72 <handle_ansi+0x156>
   1b954:	e8df f003 	tbb	[pc, r3]
   1b958:	948d4668 	.word	0x948d4668
   1b95c:	8a8d      	.short	0x8a8d
        esc_state |= ESC_ANSI_VAL;
   1b95e:	f042 0208 	orr.w	r2, r2, #8
   1b962:	494d      	ldr	r1, [pc, #308]	; (1ba98 <handle_ansi+0x17c>)
   1b964:	600a      	str	r2, [r1, #0]
        ansi_val = byte - '0';
   1b966:	3b30      	subs	r3, #48	; 0x30
   1b968:	4a4c      	ldr	r2, [pc, #304]	; (1ba9c <handle_ansi+0x180>)
   1b96a:	6013      	str	r3, [r2, #0]
        ansi_val_2 = 0;
   1b96c:	4b4c      	ldr	r3, [pc, #304]	; (1baa0 <handle_ansi+0x184>)
   1b96e:	2200      	movs	r2, #0
   1b970:	601a      	str	r2, [r3, #0]
        return;
   1b972:	4770      	bx	lr
    if (esc_state & ESC_ANSI_VAL) {
   1b974:	f012 0f08 	tst.w	r2, #8
   1b978:	d0e1      	beq.n	1b93e <handle_ansi+0x22>
        if (isdigit(byte)) {
   1b97a:	3830      	subs	r0, #48	; 0x30
   1b97c:	2809      	cmp	r0, #9
   1b97e:	d906      	bls.n	1b98e <handle_ansi+0x72>
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
   1b980:	2b3b      	cmp	r3, #59	; 0x3b
   1b982:	d019      	beq.n	1b9b8 <handle_ansi+0x9c>
        esc_state &= ~ESC_ANSI_VAL_2;
   1b984:	f022 0218 	bic.w	r2, r2, #24
   1b988:	4843      	ldr	r0, [pc, #268]	; (1ba98 <handle_ansi+0x17c>)
   1b98a:	6002      	str	r2, [r0, #0]
   1b98c:	e7d7      	b.n	1b93e <handle_ansi+0x22>
            if (esc_state & ESC_ANSI_VAL_2) {
   1b98e:	f012 0f10 	tst.w	r2, #16
   1b992:	d008      	beq.n	1b9a6 <handle_ansi+0x8a>
                ansi_val_2 *= 10;
   1b994:	4942      	ldr	r1, [pc, #264]	; (1baa0 <handle_ansi+0x184>)
   1b996:	680a      	ldr	r2, [r1, #0]
   1b998:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                ansi_val_2 += byte - '0';
   1b99c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1b9a0:	3b30      	subs	r3, #48	; 0x30
   1b9a2:	600b      	str	r3, [r1, #0]
   1b9a4:	4770      	bx	lr
                ansi_val *= 10;
   1b9a6:	493d      	ldr	r1, [pc, #244]	; (1ba9c <handle_ansi+0x180>)
   1b9a8:	680a      	ldr	r2, [r1, #0]
   1b9aa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                ansi_val += byte - '0';
   1b9ae:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1b9b2:	3b30      	subs	r3, #48	; 0x30
   1b9b4:	600b      	str	r3, [r1, #0]
            return;
   1b9b6:	4770      	bx	lr
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
   1b9b8:	f012 0f10 	tst.w	r2, #16
   1b9bc:	d1e2      	bne.n	1b984 <handle_ansi+0x68>
            esc_state |= ESC_ANSI_VAL_2;
   1b9be:	f042 0210 	orr.w	r2, r2, #16
   1b9c2:	4b35      	ldr	r3, [pc, #212]	; (1ba98 <handle_ansi+0x17c>)
   1b9c4:	601a      	str	r2, [r3, #0]
            return;
   1b9c6:	4770      	bx	lr
    switch (byte) {
   1b9c8:	2b7e      	cmp	r3, #126	; 0x7e
   1b9ca:	d152      	bne.n	1ba72 <handle_ansi+0x156>
        switch (ansi_val) {
   1b9cc:	4b33      	ldr	r3, [pc, #204]	; (1ba9c <handle_ansi+0x180>)
   1b9ce:	681b      	ldr	r3, [r3, #0]
   1b9d0:	2b03      	cmp	r3, #3
   1b9d2:	d059      	beq.n	1ba88 <handle_ansi+0x16c>
   1b9d4:	2b04      	cmp	r3, #4
   1b9d6:	d05b      	beq.n	1ba90 <handle_ansi+0x174>
   1b9d8:	2b01      	cmp	r3, #1
   1b9da:	d14a      	bne.n	1ba72 <handle_ansi+0x156>
            handle_home(line);
   1b9dc:	4608      	mov	r0, r1
   1b9de:	f7ff ff31 	bl	1b844 <handle_home>
            break;
   1b9e2:	e046      	b.n	1ba72 <handle_ansi+0x156>
        if (ansi_val > cur) {
   1b9e4:	4b2f      	ldr	r3, [pc, #188]	; (1baa4 <handle_ansi+0x188>)
   1b9e6:	881b      	ldrh	r3, [r3, #0]
   1b9e8:	4a2c      	ldr	r2, [pc, #176]	; (1ba9c <handle_ansi+0x180>)
   1b9ea:	6811      	ldr	r1, [r2, #0]
   1b9ec:	428b      	cmp	r3, r1
   1b9ee:	d340      	bcc.n	1ba72 <handle_ansi+0x156>
        trailing_chars += ansi_val;
   1b9f0:	b28a      	uxth	r2, r1
   1b9f2:	4c2d      	ldr	r4, [pc, #180]	; (1baa8 <handle_ansi+0x18c>)
   1b9f4:	8820      	ldrh	r0, [r4, #0]
   1b9f6:	4410      	add	r0, r2
   1b9f8:	8020      	strh	r0, [r4, #0]
        cur -= ansi_val;
   1b9fa:	1a9b      	subs	r3, r3, r2
   1b9fc:	4a29      	ldr	r2, [pc, #164]	; (1baa4 <handle_ansi+0x188>)
   1b9fe:	8013      	strh	r3, [r2, #0]
    char seq[14] = CSI;
   1ba00:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1ba04:	9300      	str	r3, [sp, #0]
   1ba06:	2300      	movs	r3, #0
   1ba08:	9301      	str	r3, [sp, #4]
   1ba0a:	9302      	str	r3, [sp, #8]
   1ba0c:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   1ba10:	b379      	cbz	r1, 1ba72 <handle_ansi+0x156>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   1ba12:	466c      	mov	r4, sp
   1ba14:	2244      	movs	r2, #68	; 0x44
   1ba16:	f10d 0002 	add.w	r0, sp, #2
   1ba1a:	f7ff fe47 	bl	1b6ac <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   1ba1e:	1b01      	subs	r1, r0, r4
   1ba20:	4620      	mov	r0, r4
   1ba22:	f7ff fed7 	bl	1b7d4 <console_write_nolock>
}
   1ba26:	e024      	b.n	1ba72 <handle_ansi+0x156>
        if (ansi_val > trailing_chars) {
   1ba28:	4b1f      	ldr	r3, [pc, #124]	; (1baa8 <handle_ansi+0x18c>)
   1ba2a:	881b      	ldrh	r3, [r3, #0]
   1ba2c:	4a1b      	ldr	r2, [pc, #108]	; (1ba9c <handle_ansi+0x180>)
   1ba2e:	6811      	ldr	r1, [r2, #0]
   1ba30:	428b      	cmp	r3, r1
   1ba32:	d31e      	bcc.n	1ba72 <handle_ansi+0x156>
        trailing_chars -= ansi_val;
   1ba34:	b28a      	uxth	r2, r1
   1ba36:	1a9b      	subs	r3, r3, r2
   1ba38:	481b      	ldr	r0, [pc, #108]	; (1baa8 <handle_ansi+0x18c>)
   1ba3a:	8003      	strh	r3, [r0, #0]
        cur += ansi_val;
   1ba3c:	4b19      	ldr	r3, [pc, #100]	; (1baa4 <handle_ansi+0x188>)
   1ba3e:	8818      	ldrh	r0, [r3, #0]
   1ba40:	4402      	add	r2, r0
   1ba42:	801a      	strh	r2, [r3, #0]
    char seq[14] = CSI;
   1ba44:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1ba48:	9300      	str	r3, [sp, #0]
   1ba4a:	2300      	movs	r3, #0
   1ba4c:	9301      	str	r3, [sp, #4]
   1ba4e:	9302      	str	r3, [sp, #8]
   1ba50:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   1ba54:	b169      	cbz	r1, 1ba72 <handle_ansi+0x156>
        p = add_ascii_num_with_char(seq + 2, count, 'C');
   1ba56:	466c      	mov	r4, sp
   1ba58:	2243      	movs	r2, #67	; 0x43
   1ba5a:	f10d 0002 	add.w	r0, sp, #2
   1ba5e:	f7ff fe25 	bl	1b6ac <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   1ba62:	1b01      	subs	r1, r0, r4
   1ba64:	4620      	mov	r0, r4
   1ba66:	f7ff feb5 	bl	1b7d4 <console_write_nolock>
}
   1ba6a:	e002      	b.n	1ba72 <handle_ansi+0x156>
        handle_home(line);
   1ba6c:	4608      	mov	r0, r1
   1ba6e:	f7ff fee9 	bl	1b844 <handle_home>
    esc_state &= ~ESC_ANSI;
   1ba72:	4a09      	ldr	r2, [pc, #36]	; (1ba98 <handle_ansi+0x17c>)
   1ba74:	6813      	ldr	r3, [r2, #0]
   1ba76:	f023 0302 	bic.w	r3, r3, #2
   1ba7a:	6013      	str	r3, [r2, #0]
}
   1ba7c:	b004      	add	sp, #16
   1ba7e:	bd10      	pop	{r4, pc}
        handle_end(line);
   1ba80:	4608      	mov	r0, r1
   1ba82:	f7ff feb7 	bl	1b7f4 <handle_end>
        break;
   1ba86:	e7f4      	b.n	1ba72 <handle_ansi+0x156>
            handle_delete(line);
   1ba88:	4608      	mov	r0, r1
   1ba8a:	f7ff ff37 	bl	1b8fc <handle_delete>
            break;
   1ba8e:	e7f0      	b.n	1ba72 <handle_ansi+0x156>
            handle_end(line);
   1ba90:	4608      	mov	r0, r1
   1ba92:	f7ff feaf 	bl	1b7f4 <handle_end>
            break;
   1ba96:	e7ec      	b.n	1ba72 <handle_ansi+0x156>
   1ba98:	10004f80 	.word	0x10004f80
   1ba9c:	10004f38 	.word	0x10004f38
   1baa0:	10004f3c 	.word	0x10004f3c
   1baa4:	10004f78 	.word	0x10004f78
   1baa8:	10004f96 	.word	0x10004f96

0001baac <handle_backspace>:

static void
handle_backspace(char *line)
{
    if (cur > 0) {
   1baac:	4b13      	ldr	r3, [pc, #76]	; (1bafc <handle_backspace+0x50>)
   1baae:	881b      	ldrh	r3, [r3, #0]
   1bab0:	b903      	cbnz	r3, 1bab4 <handle_backspace+0x8>
   1bab2:	4770      	bx	lr
{
   1bab4:	b530      	push	{r4, r5, lr}
   1bab6:	b085      	sub	sp, #20
   1bab8:	4604      	mov	r4, r0
    char seq[14] = CSI;
   1baba:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1babe:	9300      	str	r3, [sp, #0]
   1bac0:	2300      	movs	r3, #0
   1bac2:	9301      	str	r3, [sp, #4]
   1bac4:	9302      	str	r3, [sp, #8]
   1bac6:	f8ad 300c 	strh.w	r3, [sp, #12]
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   1baca:	466d      	mov	r5, sp
   1bacc:	2244      	movs	r2, #68	; 0x44
   1bace:	2101      	movs	r1, #1
   1bad0:	f10d 0002 	add.w	r0, sp, #2
   1bad4:	f7ff fdea 	bl	1b6ac <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   1bad8:	1b41      	subs	r1, r0, r5
   1bada:	4628      	mov	r0, r5
   1badc:	f7ff fe7a 	bl	1b7d4 <console_write_nolock>
        cursor_backward(1);
        cur--;
   1bae0:	4a06      	ldr	r2, [pc, #24]	; (1bafc <handle_backspace+0x50>)
   1bae2:	8813      	ldrh	r3, [r2, #0]
   1bae4:	3b01      	subs	r3, #1
   1bae6:	b29b      	uxth	r3, r3
   1bae8:	8013      	strh	r3, [r2, #0]
        trailing_chars++;
   1baea:	4905      	ldr	r1, [pc, #20]	; (1bb00 <handle_backspace+0x54>)
   1baec:	880a      	ldrh	r2, [r1, #0]
   1baee:	3201      	adds	r2, #1
   1baf0:	800a      	strh	r2, [r1, #0]
        del_char(&line[cur]);
   1baf2:	18e0      	adds	r0, r4, r3
   1baf4:	f7ff fece 	bl	1b894 <del_char>
    }
}
   1baf8:	b005      	add	sp, #20
   1bafa:	bd30      	pop	{r4, r5, pc}
   1bafc:	10004f78 	.word	0x10004f78
   1bb00:	10004f96 	.word	0x10004f96

0001bb04 <console_clear_line>:
{
   1bb04:	b510      	push	{r4, lr}
   1bb06:	b084      	sub	sp, #16
    if (cur) {
   1bb08:	4b13      	ldr	r3, [pc, #76]	; (1bb58 <console_clear_line+0x54>)
   1bb0a:	8819      	ldrh	r1, [r3, #0]
   1bb0c:	b979      	cbnz	r1, 1bb2e <console_clear_line+0x2a>
    cur = 0;
   1bb0e:	2300      	movs	r3, #0
   1bb10:	4a11      	ldr	r2, [pc, #68]	; (1bb58 <console_clear_line+0x54>)
   1bb12:	8013      	strh	r3, [r2, #0]
    trailing_chars = 0;
   1bb14:	4a11      	ldr	r2, [pc, #68]	; (1bb5c <console_clear_line+0x58>)
   1bb16:	8013      	strh	r3, [r2, #0]
    console_out_nolock(ESC);
   1bb18:	201b      	movs	r0, #27
   1bb1a:	f000 fc09 	bl	1c330 <console_out_nolock>
    console_out_nolock('[');
   1bb1e:	205b      	movs	r0, #91	; 0x5b
   1bb20:	f000 fc06 	bl	1c330 <console_out_nolock>
    console_out_nolock('K');
   1bb24:	204b      	movs	r0, #75	; 0x4b
   1bb26:	f000 fc03 	bl	1c330 <console_out_nolock>
}
   1bb2a:	b004      	add	sp, #16
   1bb2c:	bd10      	pop	{r4, pc}
    char seq[14] = CSI;
   1bb2e:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1bb32:	9300      	str	r3, [sp, #0]
   1bb34:	2300      	movs	r3, #0
   1bb36:	9301      	str	r3, [sp, #4]
   1bb38:	9302      	str	r3, [sp, #8]
   1bb3a:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   1bb3e:	2900      	cmp	r1, #0
   1bb40:	d0e5      	beq.n	1bb0e <console_clear_line+0xa>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   1bb42:	466c      	mov	r4, sp
   1bb44:	2244      	movs	r2, #68	; 0x44
   1bb46:	f10d 0002 	add.w	r0, sp, #2
   1bb4a:	f7ff fdaf 	bl	1b6ac <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   1bb4e:	1b01      	subs	r1, r0, r4
   1bb50:	4620      	mov	r0, r4
   1bb52:	f7ff fe3f 	bl	1b7d4 <console_write_nolock>
}
   1bb56:	e7da      	b.n	1bb0e <console_clear_line+0xa>
   1bb58:	10004f78 	.word	0x10004f78
   1bb5c:	10004f96 	.word	0x10004f96

0001bb60 <insert_char>:
        cur + trailing_chars >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   1bb60:	4b26      	ldr	r3, [pc, #152]	; (1bbfc <insert_char+0x9c>)
   1bb62:	881b      	ldrh	r3, [r3, #0]
   1bb64:	4a26      	ldr	r2, [pc, #152]	; (1bc00 <insert_char+0xa0>)
   1bb66:	8812      	ldrh	r2, [r2, #0]
   1bb68:	4413      	add	r3, r2
    if ((!MYNEWT_VAL(CONSOLE_HISTORY_AUTO_SEARCH) || !trailing_selection) &&
   1bb6a:	2bfe      	cmp	r3, #254	; 0xfe
   1bb6c:	dc44      	bgt.n	1bbf8 <insert_char+0x98>
{
   1bb6e:	b570      	push	{r4, r5, r6, lr}
   1bb70:	b084      	sub	sp, #16
   1bb72:	4604      	mov	r4, r0
   1bb74:	460e      	mov	r6, r1
    if (echo) {
   1bb76:	4b23      	ldr	r3, [pc, #140]	; (1bc04 <insert_char+0xa4>)
   1bb78:	681b      	ldr	r3, [r3, #0]
   1bb7a:	b95b      	cbnz	r3, 1bb94 <insert_char+0x34>
    ++cur;
   1bb7c:	4a1f      	ldr	r2, [pc, #124]	; (1bbfc <insert_char+0x9c>)
   1bb7e:	8813      	ldrh	r3, [r2, #0]
   1bb80:	3301      	adds	r3, #1
   1bb82:	8013      	strh	r3, [r2, #0]
    if (trailing_chars == 0) {
   1bb84:	4b1e      	ldr	r3, [pc, #120]	; (1bc00 <insert_char+0xa0>)
   1bb86:	881b      	ldrh	r3, [r3, #0]
   1bb88:	b903      	cbnz	r3, 1bb8c <insert_char+0x2c>
        *pos = c;
   1bb8a:	7026      	strb	r6, [r4, #0]
    tmp = *pos;
   1bb8c:	7825      	ldrb	r5, [r4, #0]
    *(pos++) = c;
   1bb8e:	f804 6b01 	strb.w	r6, [r4], #1
    while (end-- > 0) {
   1bb92:	e00d      	b.n	1bbb0 <insert_char+0x50>
        console_out_nolock(c);
   1bb94:	4608      	mov	r0, r1
   1bb96:	f000 fbcb 	bl	1c330 <console_out_nolock>
   1bb9a:	e7ef      	b.n	1bb7c <insert_char+0x1c>
            console_out_nolock(tmp);
   1bb9c:	4628      	mov	r0, r5
   1bb9e:	f000 fbc7 	bl	1c330 <console_out_nolock>
        c = *pos;
   1bba2:	7822      	ldrb	r2, [r4, #0]
        *(pos++) = tmp;
   1bba4:	4620      	mov	r0, r4
   1bba6:	f800 5b01 	strb.w	r5, [r0], #1
    while (end-- > 0) {
   1bbaa:	4633      	mov	r3, r6
        tmp = c;
   1bbac:	4615      	mov	r5, r2
        *(pos++) = tmp;
   1bbae:	4604      	mov	r4, r0
    while (end-- > 0) {
   1bbb0:	1e5e      	subs	r6, r3, #1
   1bbb2:	2b00      	cmp	r3, #0
   1bbb4:	dd04      	ble.n	1bbc0 <insert_char+0x60>
        if (echo) {
   1bbb6:	4b13      	ldr	r3, [pc, #76]	; (1bc04 <insert_char+0xa4>)
   1bbb8:	681b      	ldr	r3, [r3, #0]
   1bbba:	2b00      	cmp	r3, #0
   1bbbc:	d0f1      	beq.n	1bba2 <insert_char+0x42>
   1bbbe:	e7ed      	b.n	1bb9c <insert_char+0x3c>
    if (echo) {
   1bbc0:	4b10      	ldr	r3, [pc, #64]	; (1bc04 <insert_char+0xa4>)
   1bbc2:	681b      	ldr	r3, [r3, #0]
   1bbc4:	b90b      	cbnz	r3, 1bbca <insert_char+0x6a>
}
   1bbc6:	b004      	add	sp, #16
   1bbc8:	bd70      	pop	{r4, r5, r6, pc}
        cursor_backward(trailing_chars);
   1bbca:	4b0d      	ldr	r3, [pc, #52]	; (1bc00 <insert_char+0xa0>)
   1bbcc:	8819      	ldrh	r1, [r3, #0]
    char seq[14] = CSI;
   1bbce:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1bbd2:	9300      	str	r3, [sp, #0]
   1bbd4:	2300      	movs	r3, #0
   1bbd6:	9301      	str	r3, [sp, #4]
   1bbd8:	9302      	str	r3, [sp, #8]
   1bbda:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   1bbde:	2900      	cmp	r1, #0
   1bbe0:	d0f1      	beq.n	1bbc6 <insert_char+0x66>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   1bbe2:	466c      	mov	r4, sp
   1bbe4:	2244      	movs	r2, #68	; 0x44
   1bbe6:	f10d 0002 	add.w	r0, sp, #2
   1bbea:	f7ff fd5f 	bl	1b6ac <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   1bbee:	1b01      	subs	r1, r0, r4
   1bbf0:	4620      	mov	r0, r4
   1bbf2:	f7ff fdef 	bl	1b7d4 <console_write_nolock>
}
   1bbf6:	e7e6      	b.n	1bbc6 <insert_char+0x66>
   1bbf8:	4770      	bx	lr
   1bbfa:	bf00      	nop
   1bbfc:	10004f78 	.word	0x10004f78
   1bc00:	10004f96 	.word	0x10004f96
   1bc04:	10000694 	.word	0x10000694

0001bc08 <console_echo>:
    echo = on;
   1bc08:	4b01      	ldr	r3, [pc, #4]	; (1bc10 <console_echo+0x8>)
   1bc0a:	6018      	str	r0, [r3, #0]
}
   1bc0c:	4770      	bx	lr
   1bc0e:	bf00      	nop
   1bc10:	10000694 	.word	0x10000694

0001bc14 <console_nlip_enable_echo>:
{
   1bc14:	b508      	push	{r3, lr}
    console_echo(1);
   1bc16:	2001      	movs	r0, #1
   1bc18:	f7ff fff6 	bl	1bc08 <console_echo>
}
   1bc1c:	bd08      	pop	{r3, pc}

0001bc1e <console_nlip_disable_echo>:
{
   1bc1e:	b508      	push	{r3, lr}
    console_echo(0);
   1bc20:	2000      	movs	r0, #0
   1bc22:	f7ff fff1 	bl	1bc08 <console_echo>
}
   1bc26:	bd08      	pop	{r3, pc}

0001bc28 <handle_nlip>:
{
   1bc28:	b570      	push	{r4, r5, r6, lr}
   1bc2a:	4604      	mov	r4, r0
    input = current_line_ev->ev_arg;
   1bc2c:	4b3b      	ldr	r3, [pc, #236]	; (1bd1c <handle_nlip+0xf4>)
   1bc2e:	681b      	ldr	r3, [r3, #0]
   1bc30:	689d      	ldr	r5, [r3, #8]
    switch (nlip_state) {
   1bc32:	4b3b      	ldr	r3, [pc, #236]	; (1bd20 <handle_nlip+0xf8>)
   1bc34:	681b      	ldr	r3, [r3, #0]
   1bc36:	3b04      	subs	r3, #4
   1bc38:	2b10      	cmp	r3, #16
   1bc3a:	d852      	bhi.n	1bce2 <handle_nlip+0xba>
   1bc3c:	e8df f003 	tbb	[pc, r3]
   1bc40:	511f5138 	.word	0x511f5138
   1bc44:	51510951 	.word	0x51510951
   1bc48:	51515151 	.word	0x51515151
   1bc4c:	51515151 	.word	0x51515151
   1bc50:	09          	.byte	0x09
   1bc51:	00          	.byte	0x00
        insert_char(&input->line[cur], byte);
   1bc52:	4b34      	ldr	r3, [pc, #208]	; (1bd24 <handle_nlip+0xfc>)
   1bc54:	8818      	ldrh	r0, [r3, #0]
   1bc56:	4621      	mov	r1, r4
   1bc58:	4428      	add	r0, r5
   1bc5a:	f7ff ff81 	bl	1bb60 <insert_char>
        if (byte == '\n') {
   1bc5e:	2c0a      	cmp	r4, #10
   1bc60:	d001      	beq.n	1bc66 <handle_nlip+0x3e>
    handled = 1;
   1bc62:	2001      	movs	r0, #1
}
   1bc64:	bd70      	pop	{r4, r5, r6, pc}
            input->line[cur] = '\0';
   1bc66:	4b2f      	ldr	r3, [pc, #188]	; (1bd24 <handle_nlip+0xfc>)
   1bc68:	881b      	ldrh	r3, [r3, #0]
   1bc6a:	2400      	movs	r4, #0
   1bc6c:	54ec      	strb	r4, [r5, r3]
            console_nlip_enable_echo();
   1bc6e:	f7ff ffd1 	bl	1bc14 <console_nlip_enable_echo>
            nlip_state = 0;
   1bc72:	4b2b      	ldr	r3, [pc, #172]	; (1bd20 <handle_nlip+0xf8>)
   1bc74:	601c      	str	r4, [r3, #0]
            console_handle_line();
   1bc76:	f7ff fd3f 	bl	1b6f8 <console_handle_line>
    handled = 1;
   1bc7a:	2001      	movs	r0, #1
   1bc7c:	e7f2      	b.n	1bc64 <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_PKT_START2) {
   1bc7e:	2809      	cmp	r0, #9
   1bc80:	d005      	beq.n	1bc8e <handle_nlip+0x66>
            nlip_state = 0;
   1bc82:	4b27      	ldr	r3, [pc, #156]	; (1bd20 <handle_nlip+0xf8>)
   1bc84:	2200      	movs	r2, #0
   1bc86:	601a      	str	r2, [r3, #0]
            handled = g_console_ignore_non_nlip;
   1bc88:	4b27      	ldr	r3, [pc, #156]	; (1bd28 <handle_nlip+0x100>)
   1bc8a:	7818      	ldrb	r0, [r3, #0]
   1bc8c:	e7ea      	b.n	1bc64 <handle_nlip+0x3c>
            nlip_state = NLIP_PKT_START2;
   1bc8e:	4b24      	ldr	r3, [pc, #144]	; (1bd20 <handle_nlip+0xf8>)
   1bc90:	6018      	str	r0, [r3, #0]
            console_nlip_disable_echo();
   1bc92:	f7ff ffc4 	bl	1bc1e <console_nlip_disable_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START1);
   1bc96:	4e23      	ldr	r6, [pc, #140]	; (1bd24 <handle_nlip+0xfc>)
   1bc98:	8830      	ldrh	r0, [r6, #0]
   1bc9a:	2106      	movs	r1, #6
   1bc9c:	4428      	add	r0, r5
   1bc9e:	f7ff ff5f 	bl	1bb60 <insert_char>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START2);
   1bca2:	8830      	ldrh	r0, [r6, #0]
   1bca4:	4621      	mov	r1, r4
   1bca6:	4428      	add	r0, r5
   1bca8:	f7ff ff5a 	bl	1bb60 <insert_char>
    handled = 1;
   1bcac:	2001      	movs	r0, #1
   1bcae:	e7d9      	b.n	1bc64 <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_DATA_START2) {
   1bcb0:	2814      	cmp	r0, #20
   1bcb2:	d005      	beq.n	1bcc0 <handle_nlip+0x98>
            nlip_state = 0;
   1bcb4:	4b1a      	ldr	r3, [pc, #104]	; (1bd20 <handle_nlip+0xf8>)
   1bcb6:	2200      	movs	r2, #0
   1bcb8:	601a      	str	r2, [r3, #0]
            handled = g_console_ignore_non_nlip;
   1bcba:	4b1b      	ldr	r3, [pc, #108]	; (1bd28 <handle_nlip+0x100>)
   1bcbc:	7818      	ldrb	r0, [r3, #0]
   1bcbe:	e7d1      	b.n	1bc64 <handle_nlip+0x3c>
            nlip_state = NLIP_DATA_START2;
   1bcc0:	4b17      	ldr	r3, [pc, #92]	; (1bd20 <handle_nlip+0xf8>)
   1bcc2:	6018      	str	r0, [r3, #0]
            console_nlip_disable_echo();
   1bcc4:	f7ff ffab 	bl	1bc1e <console_nlip_disable_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1);
   1bcc8:	4e16      	ldr	r6, [pc, #88]	; (1bd24 <handle_nlip+0xfc>)
   1bcca:	8830      	ldrh	r0, [r6, #0]
   1bccc:	2104      	movs	r1, #4
   1bcce:	4428      	add	r0, r5
   1bcd0:	f7ff ff46 	bl	1bb60 <insert_char>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START2);
   1bcd4:	8830      	ldrh	r0, [r6, #0]
   1bcd6:	4621      	mov	r1, r4
   1bcd8:	4428      	add	r0, r5
   1bcda:	f7ff ff41 	bl	1bb60 <insert_char>
    handled = 1;
   1bcde:	2001      	movs	r0, #1
   1bce0:	e7c0      	b.n	1bc64 <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_DATA_START1) {
   1bce2:	2804      	cmp	r0, #4
   1bce4:	d00a      	beq.n	1bcfc <handle_nlip+0xd4>
        } else if (byte == CONSOLE_NLIP_PKT_START1) {
   1bce6:	2806      	cmp	r0, #6
   1bce8:	d00d      	beq.n	1bd06 <handle_nlip+0xde>
            handled = g_console_ignore_non_nlip && byte != '\r' && byte != '\n';
   1bcea:	4b0f      	ldr	r3, [pc, #60]	; (1bd28 <handle_nlip+0x100>)
   1bcec:	781b      	ldrb	r3, [r3, #0]
   1bcee:	b18b      	cbz	r3, 1bd14 <handle_nlip+0xec>
   1bcf0:	280d      	cmp	r0, #13
   1bcf2:	d011      	beq.n	1bd18 <handle_nlip+0xf0>
   1bcf4:	280a      	cmp	r0, #10
   1bcf6:	d00b      	beq.n	1bd10 <handle_nlip+0xe8>
   1bcf8:	2001      	movs	r0, #1
    return handled;
   1bcfa:	e7b3      	b.n	1bc64 <handle_nlip+0x3c>
            nlip_state = NLIP_DATA_START1;
   1bcfc:	4b08      	ldr	r3, [pc, #32]	; (1bd20 <handle_nlip+0xf8>)
   1bcfe:	2204      	movs	r2, #4
   1bd00:	601a      	str	r2, [r3, #0]
    handled = 1;
   1bd02:	2001      	movs	r0, #1
   1bd04:	e7ae      	b.n	1bc64 <handle_nlip+0x3c>
            nlip_state = NLIP_PKT_START1;
   1bd06:	4b06      	ldr	r3, [pc, #24]	; (1bd20 <handle_nlip+0xf8>)
   1bd08:	2206      	movs	r2, #6
   1bd0a:	601a      	str	r2, [r3, #0]
    handled = 1;
   1bd0c:	2001      	movs	r0, #1
   1bd0e:	e7a9      	b.n	1bc64 <handle_nlip+0x3c>
            handled = g_console_ignore_non_nlip && byte != '\r' && byte != '\n';
   1bd10:	2000      	movs	r0, #0
   1bd12:	e7a7      	b.n	1bc64 <handle_nlip+0x3c>
   1bd14:	2000      	movs	r0, #0
   1bd16:	e7a5      	b.n	1bc64 <handle_nlip+0x3c>
   1bd18:	2000      	movs	r0, #0
   1bd1a:	e7a3      	b.n	1bc64 <handle_nlip+0x3c>
   1bd1c:	10004f7c 	.word	0x10004f7c
   1bd20:	10004f8c 	.word	0x10004f8c
   1bd24:	10004f78 	.word	0x10004f78
   1bd28:	10004f84 	.word	0x10004f84

0001bd2c <console_lock>:
{
   1bd2c:	b508      	push	{r3, lr}
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   1bd2e:	4b0a      	ldr	r3, [pc, #40]	; (1bd58 <console_lock+0x2c>)
   1bd30:	685b      	ldr	r3, [r3, #4]
   1bd32:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   1bd36:	b133      	cbz	r3, 1bd46 <console_lock+0x1a>
 *
 * @return number of times lock was called from current task
 */
static inline uint16_t os_mutex_get_level(struct os_mutex *mu)
{
    return mu->mu_level;
   1bd38:	4b08      	ldr	r3, [pc, #32]	; (1bd5c <console_lock+0x30>)
   1bd3a:	88db      	ldrh	r3, [r3, #6]
        if (os_mutex_get_level(&console_write_lock)) {
   1bd3c:	b90b      	cbnz	r3, 1bd42 <console_lock+0x16>
    int rc = OS_OK;
   1bd3e:	2000      	movs	r0, #0
   1bd40:	e007      	b.n	1bd52 <console_lock+0x26>
            rc = OS_EBUSY;
   1bd42:	200b      	movs	r0, #11
        goto end;
   1bd44:	e005      	b.n	1bd52 <console_lock+0x26>
    rc = os_mutex_pend(&console_write_lock, timeout);
   1bd46:	4601      	mov	r1, r0
   1bd48:	4804      	ldr	r0, [pc, #16]	; (1bd5c <console_lock+0x30>)
   1bd4a:	f7fe fef7 	bl	1ab3c <os_mutex_pend>
    if (rc == OS_NOT_STARTED) {
   1bd4e:	2809      	cmp	r0, #9
   1bd50:	d000      	beq.n	1bd54 <console_lock+0x28>
}
   1bd52:	bd08      	pop	{r3, pc}
        rc = OS_OK;
   1bd54:	2000      	movs	r0, #0
    return rc;
   1bd56:	e7fc      	b.n	1bd52 <console_lock+0x26>
   1bd58:	e000ed00 	.word	0xe000ed00
   1bd5c:	10004f6c 	.word	0x10004f6c

0001bd60 <console_unlock>:
{
   1bd60:	b508      	push	{r3, lr}
   1bd62:	4b0c      	ldr	r3, [pc, #48]	; (1bd94 <console_unlock+0x34>)
   1bd64:	685b      	ldr	r3, [r3, #4]
   1bd66:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   1bd6a:	b10b      	cbz	r3, 1bd70 <console_unlock+0x10>
    int rc = OS_OK;
   1bd6c:	2000      	movs	r0, #0
}
   1bd6e:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&console_write_lock);
   1bd70:	4809      	ldr	r0, [pc, #36]	; (1bd98 <console_unlock+0x38>)
   1bd72:	f7fe fe83 	bl	1aa7c <os_mutex_release>
    assert(rc == OS_OK || rc == OS_NOT_STARTED);
   1bd76:	2800      	cmp	r0, #0
   1bd78:	d0f9      	beq.n	1bd6e <console_unlock+0xe>
   1bd7a:	2809      	cmp	r0, #9
   1bd7c:	d0f7      	beq.n	1bd6e <console_unlock+0xe>
   1bd7e:	f7f8 fcc1 	bl	14704 <hal_debugger_connected>
   1bd82:	b100      	cbz	r0, 1bd86 <console_unlock+0x26>
   1bd84:	be01      	bkpt	0x0001
   1bd86:	2300      	movs	r3, #0
   1bd88:	461a      	mov	r2, r3
   1bd8a:	4619      	mov	r1, r3
   1bd8c:	4618      	mov	r0, r3
   1bd8e:	f7fc ffc9 	bl	18d24 <__assert_func>
   1bd92:	bf00      	nop
   1bd94:	e000ed00 	.word	0xe000ed00
   1bd98:	10004f6c 	.word	0x10004f6c

0001bd9c <console_out>:
{
   1bd9c:	b510      	push	{r4, lr}
   1bd9e:	4604      	mov	r4, r0
    if (console_lock(timeout) != OS_OK) {
   1bda0:	2080      	movs	r0, #128	; 0x80
   1bda2:	f7ff ffc3 	bl	1bd2c <console_lock>
   1bda6:	b108      	cbz	r0, 1bdac <console_out+0x10>
}
   1bda8:	4620      	mov	r0, r4
   1bdaa:	bd10      	pop	{r4, pc}
    rc = console_filter_out(c);
   1bdac:	4620      	mov	r0, r4
   1bdae:	f7ff fcc1 	bl	1b734 <console_filter_out>
   1bdb2:	4604      	mov	r4, r0
    (void)console_unlock();
   1bdb4:	f7ff ffd4 	bl	1bd60 <console_unlock>
    return rc;
   1bdb8:	e7f6      	b.n	1bda8 <console_out+0xc>
	...

0001bdbc <console_write>:
{
   1bdbc:	b538      	push	{r3, r4, r5, lr}
   1bdbe:	4605      	mov	r5, r0
   1bdc0:	460c      	mov	r4, r1
    if (console_lock(timeout) != OS_OK) {
   1bdc2:	2080      	movs	r0, #128	; 0x80
   1bdc4:	f7ff ffb2 	bl	1bd2c <console_lock>
   1bdc8:	b9e0      	cbnz	r0, 1be04 <console_write+0x48>
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   1bdca:	2c01      	cmp	r4, #1
   1bdcc:	dd02      	ble.n	1bdd4 <console_write+0x18>
   1bdce:	782b      	ldrb	r3, [r5, #0]
   1bdd0:	2b04      	cmp	r3, #4
   1bdd2:	d018      	beq.n	1be06 <console_write+0x4a>
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   1bdd4:	2c02      	cmp	r4, #2
   1bdd6:	dd02      	ble.n	1bdde <console_write+0x22>
   1bdd8:	786b      	ldrb	r3, [r5, #1]
   1bdda:	2b06      	cmp	r3, #6
   1bddc:	d01a      	beq.n	1be14 <console_write+0x58>
    if (!g_is_output_nlip && g_console_silence_non_nlip) {
   1bdde:	4b13      	ldr	r3, [pc, #76]	; (1be2c <console_write+0x70>)
   1bde0:	781b      	ldrb	r3, [r3, #0]
   1bde2:	b913      	cbnz	r3, 1bdea <console_write+0x2e>
   1bde4:	4b12      	ldr	r3, [pc, #72]	; (1be30 <console_write+0x74>)
   1bde6:	781b      	ldrb	r3, [r3, #0]
   1bde8:	b91b      	cbnz	r3, 1bdf2 <console_write+0x36>
    console_filter_write(str, cnt);
   1bdea:	4621      	mov	r1, r4
   1bdec:	4628      	mov	r0, r5
   1bdee:	f7ff fcbf 	bl	1b770 <console_filter_write>
    if (cnt > 0 && str[cnt - 1] == '\n') {
   1bdf2:	2c00      	cmp	r4, #0
   1bdf4:	dd04      	ble.n	1be00 <console_write+0x44>
   1bdf6:	1928      	adds	r0, r5, r4
   1bdf8:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   1bdfc:	2b0a      	cmp	r3, #10
   1bdfe:	d010      	beq.n	1be22 <console_write+0x66>
    (void)console_unlock();
   1be00:	f7ff ffae 	bl	1bd60 <console_unlock>
}
   1be04:	bd38      	pop	{r3, r4, r5, pc}
        str[1] == CONSOLE_NLIP_DATA_START2) {
   1be06:	786b      	ldrb	r3, [r5, #1]
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   1be08:	2b14      	cmp	r3, #20
   1be0a:	d1e3      	bne.n	1bdd4 <console_write+0x18>
        g_is_output_nlip = 1;
   1be0c:	4b07      	ldr	r3, [pc, #28]	; (1be2c <console_write+0x70>)
   1be0e:	2201      	movs	r2, #1
   1be10:	701a      	strb	r2, [r3, #0]
   1be12:	e7df      	b.n	1bdd4 <console_write+0x18>
        str[2] == CONSOLE_NLIP_PKT_START2) {
   1be14:	78ab      	ldrb	r3, [r5, #2]
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   1be16:	2b09      	cmp	r3, #9
   1be18:	d1e1      	bne.n	1bdde <console_write+0x22>
        g_is_output_nlip = 1;
   1be1a:	4b04      	ldr	r3, [pc, #16]	; (1be2c <console_write+0x70>)
   1be1c:	2201      	movs	r2, #1
   1be1e:	701a      	strb	r2, [r3, #0]
   1be20:	e7dd      	b.n	1bdde <console_write+0x22>
        g_is_output_nlip = 0;
   1be22:	4b02      	ldr	r3, [pc, #8]	; (1be2c <console_write+0x70>)
   1be24:	2200      	movs	r2, #0
   1be26:	701a      	strb	r2, [r3, #0]
   1be28:	e7ea      	b.n	1be00 <console_write+0x44>
   1be2a:	bf00      	nop
   1be2c:	10004f87 	.word	0x10004f87
   1be30:	10004f86 	.word	0x10004f86

0001be34 <console_prompt_set>:
{
   1be34:	b570      	push	{r4, r5, r6, lr}
   1be36:	4606      	mov	r6, r0
   1be38:	460c      	mov	r4, r1
    prompt_len = strlen(prompt);
   1be3a:	f7fe ff82 	bl	1ad42 <strlen>
   1be3e:	b283      	uxth	r3, r0
   1be40:	4a19      	ldr	r2, [pc, #100]	; (1bea8 <console_prompt_set+0x74>)
   1be42:	8013      	strh	r3, [r2, #0]
    assert(MYNEWT_VAL(CONSOLE_PROMPT_MAX_LEN) > prompt_len);
   1be44:	2b0f      	cmp	r3, #15
   1be46:	d81d      	bhi.n	1be84 <console_prompt_set+0x50>
    strcpy(console_prompt, prompt);
   1be48:	4631      	mov	r1, r6
   1be4a:	4818      	ldr	r0, [pc, #96]	; (1beac <console_prompt_set+0x78>)
   1be4c:	f012 fe7b 	bl	2eb46 <strcpy>
    if (line) {
   1be50:	b314      	cbz	r4, 1be98 <console_prompt_set+0x64>
        cur = strlen(line);
   1be52:	4620      	mov	r0, r4
   1be54:	f7fe ff75 	bl	1ad42 <strlen>
   1be58:	4b15      	ldr	r3, [pc, #84]	; (1beb0 <console_prompt_set+0x7c>)
   1be5a:	8018      	strh	r0, [r3, #0]
    trailing_chars = 0;
   1be5c:	4b15      	ldr	r3, [pc, #84]	; (1beb4 <console_prompt_set+0x80>)
   1be5e:	2200      	movs	r2, #0
   1be60:	801a      	strh	r2, [r3, #0]
    locked = console_lock(1000) == OS_OK;
   1be62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1be66:	f7ff ff61 	bl	1bd2c <console_lock>
   1be6a:	4605      	mov	r5, r0
        console_write(prompt, prompt_len);
   1be6c:	4b0e      	ldr	r3, [pc, #56]	; (1bea8 <console_prompt_set+0x74>)
   1be6e:	8819      	ldrh	r1, [r3, #0]
   1be70:	4630      	mov	r0, r6
   1be72:	f7ff ffa3 	bl	1bdbc <console_write>
        console_write(line, cur);
   1be76:	4b0e      	ldr	r3, [pc, #56]	; (1beb0 <console_prompt_set+0x7c>)
   1be78:	8819      	ldrh	r1, [r3, #0]
   1be7a:	4620      	mov	r0, r4
   1be7c:	f7ff ff9e 	bl	1bdbc <console_write>
    if (locked) {
   1be80:	b175      	cbz	r5, 1bea0 <console_prompt_set+0x6c>
}
   1be82:	bd70      	pop	{r4, r5, r6, pc}
    assert(MYNEWT_VAL(CONSOLE_PROMPT_MAX_LEN) > prompt_len);
   1be84:	f7f8 fc3e 	bl	14704 <hal_debugger_connected>
   1be88:	b100      	cbz	r0, 1be8c <console_prompt_set+0x58>
   1be8a:	be01      	bkpt	0x0001
   1be8c:	2300      	movs	r3, #0
   1be8e:	461a      	mov	r2, r3
   1be90:	4619      	mov	r1, r3
   1be92:	4618      	mov	r0, r3
   1be94:	f7fc ff46 	bl	18d24 <__assert_func>
        cur = 0;
   1be98:	4b05      	ldr	r3, [pc, #20]	; (1beb0 <console_prompt_set+0x7c>)
   1be9a:	2200      	movs	r2, #0
   1be9c:	801a      	strh	r2, [r3, #0]
   1be9e:	e7dd      	b.n	1be5c <console_prompt_set+0x28>
        (void)console_unlock();
   1bea0:	f7ff ff5e 	bl	1bd60 <console_unlock>
}
   1bea4:	e7ed      	b.n	1be82 <console_prompt_set+0x4e>
   1bea6:	bf00      	nop
   1bea8:	10004f92 	.word	0x10004f92
   1beac:	10004f5c 	.word	0x10004f5c
   1beb0:	10004f78 	.word	0x10004f78
   1beb4:	10004f96 	.word	0x10004f96

0001beb8 <console_blocking_mode>:
{
   1beb8:	b508      	push	{r3, lr}
    uart_console_blocking_mode();
   1beba:	f000 fa23 	bl	1c304 <uart_console_blocking_mode>
}
   1bebe:	bd08      	pop	{r3, pc}

0001bec0 <console_handle_char>:

int
console_handle_char(uint8_t byte)
{
   1bec0:	b570      	push	{r4, r5, r6, lr}
    return 0;
#endif
    struct console_input *input;
    static char prev_endl = '\0';

    if (!lines_queue) {
   1bec2:	4b57      	ldr	r3, [pc, #348]	; (1c020 <console_handle_char+0x160>)
   1bec4:	681b      	ldr	r3, [r3, #0]
   1bec6:	2b00      	cmp	r3, #0
   1bec8:	f000 80a5 	beq.w	1c016 <console_handle_char+0x156>
   1becc:	4604      	mov	r4, r0
        return 0;
    }

    if (!current_line_ev) {
   1bece:	4b55      	ldr	r3, [pc, #340]	; (1c024 <console_handle_char+0x164>)
   1bed0:	681b      	ldr	r3, [r3, #0]
   1bed2:	b14b      	cbz	r3, 1bee8 <console_handle_char+0x28>
        if (!current_line_ev) {
            rx_stalled = true;
            return -1;
        }
    }
    input = current_line_ev->ev_arg;
   1bed4:	4b53      	ldr	r3, [pc, #332]	; (1c024 <console_handle_char+0x164>)
   1bed6:	681b      	ldr	r3, [r3, #0]
   1bed8:	689e      	ldr	r6, [r3, #8]

    if (handle_nlip(byte)) {
   1beda:	4620      	mov	r0, r4
   1bedc:	f7ff fea4 	bl	1bc28 <handle_nlip>
   1bee0:	b178      	cbz	r0, 1bf02 <console_handle_char+0x42>
        return 0;
   1bee2:	2500      	movs	r5, #0
    }
unlock:
    (void)console_unlock();

    return 0;
}
   1bee4:	4628      	mov	r0, r5
   1bee6:	bd70      	pop	{r4, r5, r6, pc}
        current_line_ev = os_eventq_get_no_wait(&avail_queue);
   1bee8:	484f      	ldr	r0, [pc, #316]	; (1c028 <console_handle_char+0x168>)
   1beea:	f7fd facc 	bl	19486 <os_eventq_get_no_wait>
   1beee:	4b4d      	ldr	r3, [pc, #308]	; (1c024 <console_handle_char+0x164>)
   1bef0:	6018      	str	r0, [r3, #0]
        if (!current_line_ev) {
   1bef2:	2800      	cmp	r0, #0
   1bef4:	d1ee      	bne.n	1bed4 <console_handle_char+0x14>
            rx_stalled = true;
   1bef6:	4b4d      	ldr	r3, [pc, #308]	; (1c02c <console_handle_char+0x16c>)
   1bef8:	2201      	movs	r2, #1
   1befa:	701a      	strb	r2, [r3, #0]
            return -1;
   1befc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1bf00:	e7f0      	b.n	1bee4 <console_handle_char+0x24>
    if (console_lock(1000)) {
   1bf02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1bf06:	f7ff ff11 	bl	1bd2c <console_lock>
   1bf0a:	4605      	mov	r5, r0
   1bf0c:	2800      	cmp	r0, #0
   1bf0e:	f040 8084 	bne.w	1c01a <console_handle_char+0x15a>
    if (esc_state & ESC_ANSI) {
   1bf12:	4b47      	ldr	r3, [pc, #284]	; (1c030 <console_handle_char+0x170>)
   1bf14:	681b      	ldr	r3, [r3, #0]
   1bf16:	f013 0f02 	tst.w	r3, #2
   1bf1a:	d120      	bne.n	1bf5e <console_handle_char+0x9e>
    if (esc_state & ESC_ESC) {
   1bf1c:	f013 0f01 	tst.w	r3, #1
   1bf20:	d122      	bne.n	1bf68 <console_handle_char+0xa8>
	return (__c >= 0x20 && __c <= 0x7e);
   1bf22:	f1a4 0320 	sub.w	r3, r4, #32
    if (!isprint(byte)) {
   1bf26:	2b5e      	cmp	r3, #94	; 0x5e
   1bf28:	d96c      	bls.n	1c004 <console_handle_char+0x144>
        handle_ansi(byte, input->line);
   1bf2a:	4631      	mov	r1, r6
   1bf2c:	4620      	mov	r0, r4
   1bf2e:	f7ff fcf5 	bl	1b91c <handle_ansi>
        switch (byte) {
   1bf32:	2c1b      	cmp	r4, #27
   1bf34:	d828      	bhi.n	1bf88 <console_handle_char+0xc8>
   1bf36:	2c03      	cmp	r4, #3
   1bf38:	d332      	bcc.n	1bfa0 <console_handle_char+0xe0>
   1bf3a:	1ee3      	subs	r3, r4, #3
   1bf3c:	2b18      	cmp	r3, #24
   1bf3e:	d82f      	bhi.n	1bfa0 <console_handle_char+0xe0>
   1bf40:	e8df f003 	tbb	[pc, r3]
   1bf44:	2e2e2e59 	.word	0x2e2e2e59
   1bf48:	344f242e 	.word	0x344f242e
   1bf4c:	2e345c2e 	.word	0x2e345c2e
   1bf50:	2e2e2e2e 	.word	0x2e2e2e2e
   1bf54:	2e2e2e2e 	.word	0x2e2e2e2e
   1bf58:	2e2e2e2e 	.word	0x2e2e2e2e
   1bf5c:	28          	.byte	0x28
   1bf5d:	00          	.byte	0x00
        handle_ansi(byte, input->line);
   1bf5e:	4631      	mov	r1, r6
   1bf60:	4620      	mov	r0, r4
   1bf62:	f7ff fcdb 	bl	1b91c <handle_ansi>
        goto unlock;
   1bf66:	e053      	b.n	1c010 <console_handle_char+0x150>
        esc_state &= ~ESC_ESC;
   1bf68:	f023 0301 	bic.w	r3, r3, #1
   1bf6c:	4a30      	ldr	r2, [pc, #192]	; (1c030 <console_handle_char+0x170>)
   1bf6e:	6013      	str	r3, [r2, #0]
        handle_ansi(byte, input->line);
   1bf70:	4631      	mov	r1, r6
   1bf72:	4620      	mov	r0, r4
   1bf74:	f7ff fcd2 	bl	1b91c <handle_ansi>
        switch (byte) {
   1bf78:	2c5b      	cmp	r4, #91	; 0x5b
   1bf7a:	d149      	bne.n	1c010 <console_handle_char+0x150>
            esc_state |= ESC_ANSI;
   1bf7c:	4a2c      	ldr	r2, [pc, #176]	; (1c030 <console_handle_char+0x170>)
   1bf7e:	6813      	ldr	r3, [r2, #0]
            esc_state |= ESC_ANSI_FIRST;
   1bf80:	f043 0306 	orr.w	r3, r3, #6
   1bf84:	6013      	str	r3, [r2, #0]
        goto unlock;
   1bf86:	e043      	b.n	1c010 <console_handle_char+0x150>
        switch (byte) {
   1bf88:	2c7f      	cmp	r4, #127	; 0x7f
   1bf8a:	d109      	bne.n	1bfa0 <console_handle_char+0xe0>
            handle_backspace(input->line);
   1bf8c:	4630      	mov	r0, r6
   1bf8e:	f7ff fd8d 	bl	1baac <handle_backspace>
            break;
   1bf92:	e03d      	b.n	1c010 <console_handle_char+0x150>
            esc_state |= ESC_ESC;
   1bf94:	4a26      	ldr	r2, [pc, #152]	; (1c030 <console_handle_char+0x170>)
   1bf96:	6813      	ldr	r3, [r2, #0]
   1bf98:	f043 0301 	orr.w	r3, r3, #1
   1bf9c:	6013      	str	r3, [r2, #0]
            break;
   1bf9e:	e037      	b.n	1c010 <console_handle_char+0x150>
            insert_char(&input->line[cur], byte);
   1bfa0:	4b24      	ldr	r3, [pc, #144]	; (1c034 <console_handle_char+0x174>)
   1bfa2:	8818      	ldrh	r0, [r3, #0]
   1bfa4:	4621      	mov	r1, r4
   1bfa6:	4430      	add	r0, r6
   1bfa8:	f7ff fdda 	bl	1bb60 <insert_char>
            if (byte == '\n' && prev_endl == '\r') {
   1bfac:	2c0a      	cmp	r4, #10
   1bfae:	d103      	bne.n	1bfb8 <console_handle_char+0xf8>
   1bfb0:	4b21      	ldr	r3, [pc, #132]	; (1c038 <console_handle_char+0x178>)
   1bfb2:	781b      	ldrb	r3, [r3, #0]
   1bfb4:	2b0d      	cmp	r3, #13
   1bfb6:	d011      	beq.n	1bfdc <console_handle_char+0x11c>
            prev_endl = byte;
   1bfb8:	4b1f      	ldr	r3, [pc, #124]	; (1c038 <console_handle_char+0x178>)
   1bfba:	701c      	strb	r4, [r3, #0]
            input->line[cur + trailing_chars] = '\0';
   1bfbc:	4b1d      	ldr	r3, [pc, #116]	; (1c034 <console_handle_char+0x174>)
   1bfbe:	881b      	ldrh	r3, [r3, #0]
   1bfc0:	4a1e      	ldr	r2, [pc, #120]	; (1c03c <console_handle_char+0x17c>)
   1bfc2:	8812      	ldrh	r2, [r2, #0]
   1bfc4:	4413      	add	r3, r2
   1bfc6:	2200      	movs	r2, #0
   1bfc8:	54f2      	strb	r2, [r6, r3]
                console_filter_out('\r');
   1bfca:	200d      	movs	r0, #13
   1bfcc:	f7ff fbb2 	bl	1b734 <console_filter_out>
                console_filter_out('\n');
   1bfd0:	200a      	movs	r0, #10
   1bfd2:	f7ff fbaf 	bl	1b734 <console_filter_out>
            console_handle_line();
   1bfd6:	f7ff fb8f 	bl	1b6f8 <console_handle_line>
            break;
   1bfda:	e019      	b.n	1c010 <console_handle_char+0x150>
                prev_endl = byte;
   1bfdc:	4b16      	ldr	r3, [pc, #88]	; (1c038 <console_handle_char+0x178>)
   1bfde:	701c      	strb	r4, [r3, #0]
                break;
   1bfe0:	e016      	b.n	1c010 <console_handle_char+0x150>
            if (completion && (!trailing_chars ||
   1bfe2:	4b17      	ldr	r3, [pc, #92]	; (1c040 <console_handle_char+0x180>)
   1bfe4:	681b      	ldr	r3, [r3, #0]
   1bfe6:	b19b      	cbz	r3, 1c010 <console_handle_char+0x150>
   1bfe8:	4a14      	ldr	r2, [pc, #80]	; (1c03c <console_handle_char+0x17c>)
   1bfea:	8812      	ldrh	r2, [r2, #0]
   1bfec:	b982      	cbnz	r2, 1c010 <console_handle_char+0x150>
                completion(input->line, console_append_char);
   1bfee:	4915      	ldr	r1, [pc, #84]	; (1c044 <console_handle_char+0x184>)
   1bff0:	4630      	mov	r0, r6
   1bff2:	4798      	blx	r3
                console_switch_to_prompt();
   1bff4:	e00c      	b.n	1c010 <console_handle_char+0x150>
            console_clear_line();
   1bff6:	f7ff fd85 	bl	1bb04 <console_clear_line>
            break;
   1bffa:	e009      	b.n	1c010 <console_handle_char+0x150>
                console_out_nolock(VT);
   1bffc:	200c      	movs	r0, #12
   1bffe:	f000 f997 	bl	1c330 <console_out_nolock>
            break;
   1c002:	e005      	b.n	1c010 <console_handle_char+0x150>
        insert_char(&input->line[cur], byte);
   1c004:	4b0b      	ldr	r3, [pc, #44]	; (1c034 <console_handle_char+0x174>)
   1c006:	8818      	ldrh	r0, [r3, #0]
   1c008:	4621      	mov	r1, r4
   1c00a:	4430      	add	r0, r6
   1c00c:	f7ff fda8 	bl	1bb60 <insert_char>
    (void)console_unlock();
   1c010:	f7ff fea6 	bl	1bd60 <console_unlock>
    return 0;
   1c014:	e766      	b.n	1bee4 <console_handle_char+0x24>
        return 0;
   1c016:	2500      	movs	r5, #0
   1c018:	e764      	b.n	1bee4 <console_handle_char+0x24>
        return -1;
   1c01a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1c01e:	e761      	b.n	1bee4 <console_handle_char+0x24>
   1c020:	10004f88 	.word	0x10004f88
   1c024:	10004f7c 	.word	0x10004f7c
   1c028:	10004f40 	.word	0x10004f40
   1c02c:	10004f94 	.word	0x10004f94
   1c030:	10004f80 	.word	0x10004f80
   1c034:	10004f78 	.word	0x10004f78
   1c038:	10004f90 	.word	0x10004f90
   1c03c:	10004f96 	.word	0x10004f96
   1c040:	10004f50 	.word	0x10004f50
   1c044:	0001b791 	.word	0x0001b791

0001c048 <console_is_init>:

int
console_is_init(void)
{
   1c048:	b508      	push	{r3, lr}
#if MYNEWT_VAL(CONSOLE_UART)
    return uart_console_is_init();
   1c04a:	f000 f997 	bl	1c37c <uart_console_is_init>
#endif
#if MYNEWT_VAL(CONSOLE_TCP)
    return tcp_console_is_init();
#endif
    return 0;
}
   1c04e:	bd08      	pop	{r3, pc}

0001c050 <console_line_queue_set>:

void
console_line_queue_set(struct os_eventq *evq)
{
    lines_queue = evq;
   1c050:	4b01      	ldr	r3, [pc, #4]	; (1c058 <console_line_queue_set+0x8>)
   1c052:	6018      	str	r0, [r3, #0]
}
   1c054:	4770      	bx	lr
   1c056:	bf00      	nop
   1c058:	10004f88 	.word	0x10004f88

0001c05c <console_line_event_put>:

void
console_line_event_put(struct os_event *ev)
{
   1c05c:	b508      	push	{r3, lr}
   1c05e:	4601      	mov	r1, r0
    os_eventq_put(&avail_queue, ev);
   1c060:	4806      	ldr	r0, [pc, #24]	; (1c07c <console_line_event_put+0x20>)
   1c062:	f7fd f9d8 	bl	19416 <os_eventq_put>

    if (rx_stalled) {
   1c066:	4b06      	ldr	r3, [pc, #24]	; (1c080 <console_line_event_put+0x24>)
   1c068:	781b      	ldrb	r3, [r3, #0]
   1c06a:	b903      	cbnz	r3, 1c06e <console_line_event_put+0x12>
        rx_stalled = false;
        console_rx_restart();
    }
}
   1c06c:	bd08      	pop	{r3, pc}
        rx_stalled = false;
   1c06e:	4b04      	ldr	r3, [pc, #16]	; (1c080 <console_line_event_put+0x24>)
   1c070:	2200      	movs	r2, #0
   1c072:	701a      	strb	r2, [r3, #0]
        console_rx_restart();
   1c074:	f000 f978 	bl	1c368 <console_rx_restart>
}
   1c078:	e7f8      	b.n	1c06c <console_line_event_put+0x10>
   1c07a:	bf00      	nop
   1c07c:	10004f40 	.word	0x10004f40
   1c080:	10004f94 	.word	0x10004f94

0001c084 <console_set_completion_cb>:

void
console_set_completion_cb(completion_cb cb)
{
    completion = cb;
   1c084:	4b01      	ldr	r3, [pc, #4]	; (1c08c <console_set_completion_cb+0x8>)
   1c086:	6018      	str	r0, [r3, #0]
}
   1c088:	4770      	bx	lr
   1c08a:	bf00      	nop
   1c08c:	10004f50 	.word	0x10004f50

0001c090 <console_pkg_init>:
}
#endif

void
console_pkg_init(void)
{
   1c090:	b510      	push	{r4, lr}
   1c092:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1c094:	4b12      	ldr	r3, [pc, #72]	; (1c0e0 <console_pkg_init+0x50>)
   1c096:	781b      	ldrb	r3, [r3, #0]
   1c098:	b153      	cbz	r3, 1c0b0 <console_pkg_init+0x20>

    os_eventq_init(&avail_queue);
   1c09a:	4812      	ldr	r0, [pc, #72]	; (1c0e4 <console_pkg_init+0x54>)
   1c09c:	f7fd f9ae 	bl	193fc <os_eventq_init>
    os_mutex_init(&console_write_lock);
   1c0a0:	4811      	ldr	r0, [pc, #68]	; (1c0e8 <console_pkg_init+0x58>)
   1c0a2:	f7fe fce1 	bl	1aa68 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_UART)
    rc = uart_console_init();
   1c0a6:	f000 f971 	bl	1c38c <uart_console_init>
#endif
#if MYNEWT_VAL(CONSOLE_RTT)
    rc = rtt_console_init();
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   1c0aa:	b958      	cbnz	r0, 1c0c4 <console_pkg_init+0x34>
}
   1c0ac:	b002      	add	sp, #8
   1c0ae:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1c0b0:	f7f8 fb28 	bl	14704 <hal_debugger_connected>
   1c0b4:	b100      	cbz	r0, 1c0b8 <console_pkg_init+0x28>
   1c0b6:	be01      	bkpt	0x0001
   1c0b8:	2300      	movs	r3, #0
   1c0ba:	461a      	mov	r2, r3
   1c0bc:	4619      	mov	r1, r3
   1c0be:	4618      	mov	r0, r3
   1c0c0:	f7fc fe30 	bl	18d24 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1c0c4:	f7f8 fb1e 	bl	14704 <hal_debugger_connected>
   1c0c8:	b100      	cbz	r0, 1c0cc <console_pkg_init+0x3c>
   1c0ca:	be01      	bkpt	0x0001
   1c0cc:	2000      	movs	r0, #0
   1c0ce:	9000      	str	r0, [sp, #0]
   1c0d0:	4b06      	ldr	r3, [pc, #24]	; (1c0ec <console_pkg_init+0x5c>)
   1c0d2:	681c      	ldr	r4, [r3, #0]
   1c0d4:	4603      	mov	r3, r0
   1c0d6:	4602      	mov	r2, r0
   1c0d8:	4601      	mov	r1, r0
   1c0da:	47a0      	blx	r4
}
   1c0dc:	e7e6      	b.n	1c0ac <console_pkg_init+0x1c>
   1c0de:	bf00      	nop
   1c0e0:	100055a0 	.word	0x100055a0
   1c0e4:	10004f40 	.word	0x10004f40
   1c0e8:	10004f6c 	.word	0x10004f6c
   1c0ec:	100006b4 	.word	0x100006b4

0001c0f0 <console_vprintf>:

#if MYNEWT_VAL(BASELIBC_PRESENT)

int
console_vprintf(const char *fmt, va_list ap)
{
   1c0f0:	b570      	push	{r4, r5, r6, lr}
   1c0f2:	4604      	mov	r4, r0
   1c0f4:	460d      	mov	r5, r1
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   1c0f6:	f000 f827 	bl	1c148 <console_get_ticks>
   1c0fa:	b160      	cbz	r0, 1c116 <console_vprintf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   1c0fc:	4b09      	ldr	r3, [pc, #36]	; (1c124 <console_vprintf+0x34>)
   1c0fe:	681b      	ldr	r3, [r3, #0]
   1c100:	b10b      	cbz	r3, 1c106 <console_vprintf+0x16>
    num_chars = 0;
   1c102:	2600      	movs	r6, #0
   1c104:	e008      	b.n	1c118 <console_vprintf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   1c106:	f7fe fab1 	bl	1a66c <os_time_get>
   1c10a:	4601      	mov	r1, r0
   1c10c:	4806      	ldr	r0, [pc, #24]	; (1c128 <console_vprintf+0x38>)
   1c10e:	f7ff f983 	bl	1b418 <printf>
   1c112:	4606      	mov	r6, r0
   1c114:	e000      	b.n	1c118 <console_vprintf+0x28>
    num_chars = 0;
   1c116:	2600      	movs	r6, #0
        }
    }

    num_chars += vprintf(fmt, ap);
   1c118:	4629      	mov	r1, r5
   1c11a:	4620      	mov	r0, r4
   1c11c:	f012 fd3e 	bl	2eb9c <vprintf>

    return num_chars;
}
   1c120:	4430      	add	r0, r6
   1c122:	bd70      	pop	{r4, r5, r6, pc}
   1c124:	10004f58 	.word	0x10004f58
   1c128:	00033dc0 	.word	0x00033dc0

0001c12c <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   1c12c:	b40f      	push	{r0, r1, r2, r3}
   1c12e:	b500      	push	{lr}
   1c130:	b083      	sub	sp, #12
   1c132:	a904      	add	r1, sp, #16
   1c134:	f851 0b04 	ldr.w	r0, [r1], #4
    va_list args;
    int num_chars;

    va_start(args, fmt);
   1c138:	9101      	str	r1, [sp, #4]
    num_chars = console_vprintf(fmt, args);
   1c13a:	f7ff ffd9 	bl	1c0f0 <console_vprintf>
    va_end(args);

    return num_chars;
}
   1c13e:	b003      	add	sp, #12
   1c140:	f85d eb04 	ldr.w	lr, [sp], #4
   1c144:	b004      	add	sp, #16
   1c146:	4770      	bx	lr

0001c148 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   1c148:	4b01      	ldr	r3, [pc, #4]	; (1c150 <console_get_ticks+0x8>)
   1c14a:	7818      	ldrb	r0, [r3, #0]
   1c14c:	4770      	bx	lr
   1c14e:	bf00      	nop
   1c150:	10000698 	.word	0x10000698

0001c154 <uart_blocking_tx>:
 *
 * @param dev		Uart device in question
 */
static inline void
uart_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   1c154:	b508      	push	{r3, lr}
    dev->ud_funcs.uf_blocking_tx(dev, byte);
   1c156:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1c158:	4798      	blx	r3
}
   1c15a:	bd08      	pop	{r3, pc}

0001c15c <uart_console_ring_add_char>:
}

static void
uart_console_ring_add_char(struct console_ring *cr, char ch)
{
    cr->buf[cr->head] = ch;
   1c15c:	6842      	ldr	r2, [r0, #4]
   1c15e:	7803      	ldrb	r3, [r0, #0]
   1c160:	54d1      	strb	r1, [r2, r3]
    cr->head = inc_and_wrap(cr->head, cr->size);
   1c162:	7803      	ldrb	r3, [r0, #0]
   1c164:	8842      	ldrh	r2, [r0, #2]
    return (i + 1) & (max - 1);
   1c166:	3301      	adds	r3, #1
   1c168:	3a01      	subs	r2, #1
   1c16a:	4013      	ands	r3, r2
    cr->head = inc_and_wrap(cr->head, cr->size);
   1c16c:	7003      	strb	r3, [r0, #0]
}
   1c16e:	4770      	bx	lr

0001c170 <uart_console_ring_pull_char>:

static uint8_t
uart_console_ring_pull_char(struct console_ring *cr)
{
   1c170:	4603      	mov	r3, r0
    uint8_t ch;

    ch = cr->buf[cr->tail];
   1c172:	6841      	ldr	r1, [r0, #4]
   1c174:	7842      	ldrb	r2, [r0, #1]
   1c176:	5c88      	ldrb	r0, [r1, r2]
    cr->tail = inc_and_wrap(cr->tail, cr->size);
   1c178:	8859      	ldrh	r1, [r3, #2]
    return (i + 1) & (max - 1);
   1c17a:	3201      	adds	r2, #1
   1c17c:	3901      	subs	r1, #1
   1c17e:	400a      	ands	r2, r1
    cr->tail = inc_and_wrap(cr->tail, cr->size);
   1c180:	705a      	strb	r2, [r3, #1]
    return ch;
}
   1c182:	4770      	bx	lr

0001c184 <uart_console_ring_is_full>:

static bool
uart_console_ring_is_full(const struct console_ring *cr)
{
    return inc_and_wrap(cr->head, cr->size) == cr->tail;
   1c184:	7803      	ldrb	r3, [r0, #0]
   1c186:	8842      	ldrh	r2, [r0, #2]
    return (i + 1) & (max - 1);
   1c188:	3301      	adds	r3, #1
   1c18a:	3a01      	subs	r2, #1
   1c18c:	4013      	ands	r3, r2
    return inc_and_wrap(cr->head, cr->size) == cr->tail;
   1c18e:	7840      	ldrb	r0, [r0, #1]
}
   1c190:	4298      	cmp	r0, r3
   1c192:	bf14      	ite	ne
   1c194:	2000      	movne	r0, #0
   1c196:	2001      	moveq	r0, #1
   1c198:	4770      	bx	lr

0001c19a <uart_console_ring_is_empty>:

static bool
uart_console_ring_is_empty(const struct console_ring *cr)
{
    return cr->head == cr->tail;
   1c19a:	7802      	ldrb	r2, [r0, #0]
   1c19c:	7840      	ldrb	r0, [r0, #1]
}
   1c19e:	4282      	cmp	r2, r0
   1c1a0:	bf14      	ite	ne
   1c1a2:	2000      	movne	r0, #0
   1c1a4:	2001      	moveq	r0, #1
   1c1a6:	4770      	bx	lr

0001c1a8 <uart_console_tx_flush>:
/*
 * Flush cnt characters from console output queue.
 */
static void
uart_console_tx_flush(int cnt)
{
   1c1a8:	b538      	push	{r3, r4, r5, lr}
   1c1aa:	4605      	mov	r5, r0
    int i;
    uint8_t byte;

    for (i = 0; i < cnt; i++) {
   1c1ac:	2400      	movs	r4, #0
   1c1ae:	42ac      	cmp	r4, r5
   1c1b0:	da0d      	bge.n	1c1ce <uart_console_tx_flush+0x26>
        if (uart_console_ring_is_empty(&cr_tx)) {
   1c1b2:	4807      	ldr	r0, [pc, #28]	; (1c1d0 <uart_console_tx_flush+0x28>)
   1c1b4:	f7ff fff1 	bl	1c19a <uart_console_ring_is_empty>
   1c1b8:	b948      	cbnz	r0, 1c1ce <uart_console_tx_flush+0x26>
            break;
        }
        byte = uart_console_ring_pull_char(&cr_tx);
   1c1ba:	4805      	ldr	r0, [pc, #20]	; (1c1d0 <uart_console_tx_flush+0x28>)
   1c1bc:	f7ff ffd8 	bl	1c170 <uart_console_ring_pull_char>
   1c1c0:	4601      	mov	r1, r0
        uart_blocking_tx(uart_dev, byte);
   1c1c2:	4b04      	ldr	r3, [pc, #16]	; (1c1d4 <uart_console_tx_flush+0x2c>)
   1c1c4:	6818      	ldr	r0, [r3, #0]
    dev->ud_funcs.uf_blocking_tx(dev, byte);
   1c1c6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   1c1c8:	4790      	blx	r2
    for (i = 0; i < cnt; i++) {
   1c1ca:	3401      	adds	r4, #1
   1c1cc:	e7ef      	b.n	1c1ae <uart_console_tx_flush+0x6>
    }
}
   1c1ce:	bd38      	pop	{r3, r4, r5, pc}
   1c1d0:	10004fc0 	.word	0x10004fc0
   1c1d4:	10004ffc 	.word	0x10004ffc

0001c1d8 <uart_console_tx_char>:
 * Interrupts disabled when console_tx_char/console_rx_char are called.
 * Characters sent only in blocking mode.
 */
static int
uart_console_tx_char(void *arg)
{
   1c1d8:	b508      	push	{r3, lr}
    if (uart_console_ring_is_empty(&cr_tx)) {
   1c1da:	4805      	ldr	r0, [pc, #20]	; (1c1f0 <uart_console_tx_char+0x18>)
   1c1dc:	f7ff ffdd 	bl	1c19a <uart_console_ring_is_empty>
   1c1e0:	b918      	cbnz	r0, 1c1ea <uart_console_tx_char+0x12>
        return -1;
    }
    return uart_console_ring_pull_char(&cr_tx);
   1c1e2:	4803      	ldr	r0, [pc, #12]	; (1c1f0 <uart_console_tx_char+0x18>)
   1c1e4:	f7ff ffc4 	bl	1c170 <uart_console_ring_pull_char>
}
   1c1e8:	bd08      	pop	{r3, pc}
        return -1;
   1c1ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c1ee:	e7fb      	b.n	1c1e8 <uart_console_tx_char+0x10>
   1c1f0:	10004fc0 	.word	0x10004fc0

0001c1f4 <uart_console_queue_char>:
    if (((uart_dev->ud_dev.od_flags & OS_DEV_F_STATUS_OPEN) == 0) ||
   1c1f4:	7ec3      	ldrb	r3, [r0, #27]
   1c1f6:	f003 0306 	and.w	r3, r3, #6
   1c1fa:	2b02      	cmp	r3, #2
   1c1fc:	d000      	beq.n	1c200 <uart_console_queue_char+0xc>
   1c1fe:	4770      	bx	lr
{
   1c200:	b570      	push	{r4, r5, r6, lr}
   1c202:	4605      	mov	r5, r0
   1c204:	460e      	mov	r6, r1
    OS_ENTER_CRITICAL(sr);
   1c206:	f7fe fb61 	bl	1a8cc <os_arch_save_sr>
   1c20a:	4604      	mov	r4, r0
    while (uart_console_ring_is_full(&cr_tx)) {
   1c20c:	e005      	b.n	1c21a <uart_console_queue_char+0x26>
            os_time_delay(1);
   1c20e:	2001      	movs	r0, #1
   1c210:	f7fe fa58 	bl	1a6c4 <os_time_delay>
        OS_ENTER_CRITICAL(sr);
   1c214:	f7fe fb5a 	bl	1a8cc <os_arch_save_sr>
   1c218:	4604      	mov	r4, r0
    while (uart_console_ring_is_full(&cr_tx)) {
   1c21a:	480b      	ldr	r0, [pc, #44]	; (1c248 <uart_console_queue_char+0x54>)
   1c21c:	f7ff ffb2 	bl	1c184 <uart_console_ring_is_full>
   1c220:	b150      	cbz	r0, 1c238 <uart_console_queue_char+0x44>
    dev->ud_funcs.uf_start_tx(dev);
   1c222:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1c224:	4628      	mov	r0, r5
   1c226:	4798      	blx	r3
        OS_EXIT_CRITICAL(sr);
   1c228:	4620      	mov	r0, r4
   1c22a:	f7fe fb55 	bl	1a8d8 <os_arch_restore_sr>
        if (os_started()) {
   1c22e:	f7fc fe67 	bl	18f00 <os_started>
   1c232:	2800      	cmp	r0, #0
   1c234:	d0ee      	beq.n	1c214 <uart_console_queue_char+0x20>
   1c236:	e7ea      	b.n	1c20e <uart_console_queue_char+0x1a>
    uart_console_ring_add_char(&cr_tx, ch);
   1c238:	4631      	mov	r1, r6
   1c23a:	4803      	ldr	r0, [pc, #12]	; (1c248 <uart_console_queue_char+0x54>)
   1c23c:	f7ff ff8e 	bl	1c15c <uart_console_ring_add_char>
    OS_EXIT_CRITICAL(sr);
   1c240:	4620      	mov	r0, r4
   1c242:	f7fe fb49 	bl	1a8d8 <os_arch_restore_sr>
}
   1c246:	bd70      	pop	{r4, r5, r6, pc}
   1c248:	10004fc0 	.word	0x10004fc0

0001c24c <uart_console_rx_char>:
/*
 * Interrupts disabled when console_tx_char/console_rx_char are called.
 */
static int
uart_console_rx_char(void *arg, uint8_t byte)
{
   1c24c:	b510      	push	{r4, lr}
   1c24e:	460c      	mov	r4, r1
#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
    if (uart_console_ring_is_full(&cr_rx)) {
   1c250:	480c      	ldr	r0, [pc, #48]	; (1c284 <uart_console_rx_char+0x38>)
   1c252:	f7ff ff97 	bl	1c184 <uart_console_ring_is_full>
   1c256:	b940      	cbnz	r0, 1c26a <uart_console_rx_char+0x1e>
        uart_console_rx_stalled = true;
        return -1;
    }

    uart_console_ring_add_char(&cr_rx, byte);
   1c258:	4621      	mov	r1, r4
   1c25a:	480a      	ldr	r0, [pc, #40]	; (1c284 <uart_console_rx_char+0x38>)
   1c25c:	f7ff ff7e 	bl	1c15c <uart_console_ring_add_char>

    if (!rx_ev.ev_queued) {
   1c260:	4b09      	ldr	r3, [pc, #36]	; (1c288 <uart_console_rx_char+0x3c>)
   1c262:	781b      	ldrb	r3, [r3, #0]
   1c264:	b13b      	cbz	r3, 1c276 <uart_console_rx_char+0x2a>
        os_eventq_put(os_eventq_dflt_get(), &rx_ev);
    }

    return 0;
   1c266:	2000      	movs	r0, #0
#else
    return console_handle_char(byte);
#endif
}
   1c268:	bd10      	pop	{r4, pc}
        uart_console_rx_stalled = true;
   1c26a:	4b08      	ldr	r3, [pc, #32]	; (1c28c <uart_console_rx_char+0x40>)
   1c26c:	2201      	movs	r2, #1
   1c26e:	701a      	strb	r2, [r3, #0]
        return -1;
   1c270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c274:	e7f8      	b.n	1c268 <uart_console_rx_char+0x1c>
        os_eventq_put(os_eventq_dflt_get(), &rx_ev);
   1c276:	f7fd f987 	bl	19588 <os_eventq_dflt_get>
   1c27a:	4903      	ldr	r1, [pc, #12]	; (1c288 <uart_console_rx_char+0x3c>)
   1c27c:	f7fd f8cb 	bl	19416 <os_eventq_put>
    return 0;
   1c280:	2000      	movs	r0, #0
   1c282:	e7f1      	b.n	1c268 <uart_console_rx_char+0x1c>
   1c284:	10004f98 	.word	0x10004f98
   1c288:	10004fe8 	.word	0x10004fe8
   1c28c:	10004ff8 	.word	0x10004ff8

0001c290 <uart_console_rx_char_event>:

#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
static void
uart_console_rx_char_event(struct os_event *ev)
{
   1c290:	b510      	push	{r4, lr}
    static int b = -1;
    int sr;
    int ret;

    /* We may have unhandled character - try it first */
    if (b >= 0) {
   1c292:	4b18      	ldr	r3, [pc, #96]	; (1c2f4 <uart_console_rx_char_event+0x64>)
   1c294:	6818      	ldr	r0, [r3, #0]
   1c296:	2800      	cmp	r0, #0
   1c298:	db0b      	blt.n	1c2b2 <uart_console_rx_char_event+0x22>
        ret = console_handle_char(b);
   1c29a:	b2c0      	uxtb	r0, r0
   1c29c:	f7ff fe10 	bl	1bec0 <console_handle_char>
        if (ret < 0) {
   1c2a0:	2800      	cmp	r0, #0
   1c2a2:	da06      	bge.n	1c2b2 <uart_console_rx_char_event+0x22>
   1c2a4:	e024      	b.n	1c2f0 <uart_console_rx_char_event+0x60>
        if (uart_console_rx_stalled) {
            uart_console_rx_stalled = false;
            uart_start_rx(uart_dev);
        }

        ret = console_handle_char(b);
   1c2a6:	4b13      	ldr	r3, [pc, #76]	; (1c2f4 <uart_console_rx_char_event+0x64>)
   1c2a8:	7818      	ldrb	r0, [r3, #0]
   1c2aa:	f7ff fe09 	bl	1bec0 <console_handle_char>
        if (ret < 0) {
   1c2ae:	2800      	cmp	r0, #0
   1c2b0:	db1e      	blt.n	1c2f0 <uart_console_rx_char_event+0x60>
    while (!uart_console_ring_is_empty(&cr_rx)) {
   1c2b2:	4811      	ldr	r0, [pc, #68]	; (1c2f8 <uart_console_rx_char_event+0x68>)
   1c2b4:	f7ff ff71 	bl	1c19a <uart_console_ring_is_empty>
   1c2b8:	b9b0      	cbnz	r0, 1c2e8 <uart_console_rx_char_event+0x58>
        OS_ENTER_CRITICAL(sr);
   1c2ba:	f7fe fb07 	bl	1a8cc <os_arch_save_sr>
   1c2be:	4604      	mov	r4, r0
        b = uart_console_ring_pull_char(&cr_rx);
   1c2c0:	480d      	ldr	r0, [pc, #52]	; (1c2f8 <uart_console_rx_char_event+0x68>)
   1c2c2:	f7ff ff55 	bl	1c170 <uart_console_ring_pull_char>
   1c2c6:	4b0b      	ldr	r3, [pc, #44]	; (1c2f4 <uart_console_rx_char_event+0x64>)
   1c2c8:	6018      	str	r0, [r3, #0]
        OS_EXIT_CRITICAL(sr);
   1c2ca:	4620      	mov	r0, r4
   1c2cc:	f7fe fb04 	bl	1a8d8 <os_arch_restore_sr>
        if (uart_console_rx_stalled) {
   1c2d0:	4b0a      	ldr	r3, [pc, #40]	; (1c2fc <uart_console_rx_char_event+0x6c>)
   1c2d2:	781b      	ldrb	r3, [r3, #0]
   1c2d4:	2b00      	cmp	r3, #0
   1c2d6:	d0e6      	beq.n	1c2a6 <uart_console_rx_char_event+0x16>
            uart_console_rx_stalled = false;
   1c2d8:	4b08      	ldr	r3, [pc, #32]	; (1c2fc <uart_console_rx_char_event+0x6c>)
   1c2da:	2200      	movs	r2, #0
   1c2dc:	701a      	strb	r2, [r3, #0]
            uart_start_rx(uart_dev);
   1c2de:	4b08      	ldr	r3, [pc, #32]	; (1c300 <uart_console_rx_char_event+0x70>)
   1c2e0:	6818      	ldr	r0, [r3, #0]
    dev->ud_funcs.uf_start_rx(dev);
   1c2e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1c2e4:	4798      	blx	r3
}
   1c2e6:	e7de      	b.n	1c2a6 <uart_console_rx_char_event+0x16>
            return;
        }
    }

    b = -1;
   1c2e8:	4b02      	ldr	r3, [pc, #8]	; (1c2f4 <uart_console_rx_char_event+0x64>)
   1c2ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c2ee:	601a      	str	r2, [r3, #0]
}
   1c2f0:	bd10      	pop	{r4, pc}
   1c2f2:	bf00      	nop
   1c2f4:	1000069c 	.word	0x1000069c
   1c2f8:	10004f98 	.word	0x10004f98
   1c2fc:	10004ff8 	.word	0x10004ff8
   1c300:	10004ffc 	.word	0x10004ffc

0001c304 <uart_console_blocking_mode>:
{
   1c304:	b510      	push	{r4, lr}
    OS_ENTER_CRITICAL(sr);
   1c306:	f7fe fae1 	bl	1a8cc <os_arch_save_sr>
   1c30a:	4604      	mov	r4, r0
    if (write_char_cb) {
   1c30c:	4b06      	ldr	r3, [pc, #24]	; (1c328 <uart_console_blocking_mode+0x24>)
   1c30e:	681b      	ldr	r3, [r3, #0]
   1c310:	b12b      	cbz	r3, 1c31e <uart_console_blocking_mode+0x1a>
        write_char_cb = uart_blocking_tx;
   1c312:	4b05      	ldr	r3, [pc, #20]	; (1c328 <uart_console_blocking_mode+0x24>)
   1c314:	4a05      	ldr	r2, [pc, #20]	; (1c32c <uart_console_blocking_mode+0x28>)
   1c316:	601a      	str	r2, [r3, #0]
        uart_console_tx_flush(MYNEWT_VAL(CONSOLE_UART_TX_BUF_SIZE));
   1c318:	2020      	movs	r0, #32
   1c31a:	f7ff ff45 	bl	1c1a8 <uart_console_tx_flush>
    OS_EXIT_CRITICAL(sr);
   1c31e:	4620      	mov	r0, r4
   1c320:	f7fe fada 	bl	1a8d8 <os_arch_restore_sr>
}
   1c324:	bd10      	pop	{r4, pc}
   1c326:	bf00      	nop
   1c328:	10005000 	.word	0x10005000
   1c32c:	0001c155 	.word	0x0001c155

0001c330 <console_out_nolock>:
{
   1c330:	b538      	push	{r3, r4, r5, lr}
   1c332:	4604      	mov	r4, r0
    if (!write_char_cb) {
   1c334:	4b0a      	ldr	r3, [pc, #40]	; (1c360 <console_out_nolock+0x30>)
   1c336:	681b      	ldr	r3, [r3, #0]
   1c338:	b153      	cbz	r3, 1c350 <console_out_nolock+0x20>
    if ('\n' == c) {
   1c33a:	280a      	cmp	r0, #10
   1c33c:	d00a      	beq.n	1c354 <console_out_nolock+0x24>
    write_char_cb(uart_dev, c);
   1c33e:	4d09      	ldr	r5, [pc, #36]	; (1c364 <console_out_nolock+0x34>)
   1c340:	4b07      	ldr	r3, [pc, #28]	; (1c360 <console_out_nolock+0x30>)
   1c342:	681b      	ldr	r3, [r3, #0]
   1c344:	b2e1      	uxtb	r1, r4
   1c346:	6828      	ldr	r0, [r5, #0]
   1c348:	4798      	blx	r3
    uart_start_tx(uart_dev);
   1c34a:	6828      	ldr	r0, [r5, #0]
    dev->ud_funcs.uf_start_tx(dev);
   1c34c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1c34e:	4798      	blx	r3
}
   1c350:	4620      	mov	r0, r4
   1c352:	bd38      	pop	{r3, r4, r5, pc}
        write_char_cb(uart_dev, '\r');
   1c354:	210d      	movs	r1, #13
   1c356:	4a03      	ldr	r2, [pc, #12]	; (1c364 <console_out_nolock+0x34>)
   1c358:	6810      	ldr	r0, [r2, #0]
   1c35a:	4798      	blx	r3
   1c35c:	e7ef      	b.n	1c33e <console_out_nolock+0xe>
   1c35e:	bf00      	nop
   1c360:	10005000 	.word	0x10005000
   1c364:	10004ffc 	.word	0x10004ffc

0001c368 <console_rx_restart>:
{
   1c368:	b508      	push	{r3, lr}
    os_eventq_put(os_eventq_dflt_get(), &rx_ev);
   1c36a:	f7fd f90d 	bl	19588 <os_eventq_dflt_get>
   1c36e:	4902      	ldr	r1, [pc, #8]	; (1c378 <console_rx_restart+0x10>)
   1c370:	f7fd f851 	bl	19416 <os_eventq_put>
}
   1c374:	bd08      	pop	{r3, pc}
   1c376:	bf00      	nop
   1c378:	10004fe8 	.word	0x10004fe8

0001c37c <uart_console_is_init>:
#endif

int
uart_console_is_init(void)
{
    return uart_dev != NULL;
   1c37c:	4b02      	ldr	r3, [pc, #8]	; (1c388 <uart_console_is_init+0xc>)
   1c37e:	6818      	ldr	r0, [r3, #0]
}
   1c380:	3800      	subs	r0, #0
   1c382:	bf18      	it	ne
   1c384:	2001      	movne	r0, #1
   1c386:	4770      	bx	lr
   1c388:	10004ffc 	.word	0x10004ffc

0001c38c <uart_console_init>:
    return 0;
}

int
uart_console_init(void)
{
   1c38c:	b500      	push	{lr}
   1c38e:	b087      	sub	sp, #28
    struct uart_conf uc = {
   1c390:	2300      	movs	r3, #0
   1c392:	9301      	str	r3, [sp, #4]
   1c394:	9304      	str	r3, [sp, #16]
   1c396:	9305      	str	r3, [sp, #20]
   1c398:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   1c39c:	9300      	str	r3, [sp, #0]
   1c39e:	2308      	movs	r3, #8
   1c3a0:	f88d 3004 	strb.w	r3, [sp, #4]
   1c3a4:	2301      	movs	r3, #1
   1c3a6:	f88d 3005 	strb.w	r3, [sp, #5]
   1c3aa:	4b14      	ldr	r3, [pc, #80]	; (1c3fc <uart_console_init+0x70>)
   1c3ac:	9302      	str	r3, [sp, #8]
   1c3ae:	4b14      	ldr	r3, [pc, #80]	; (1c400 <uart_console_init+0x74>)
   1c3b0:	9303      	str	r3, [sp, #12]
        .uc_flow_ctl = MYNEWT_VAL(CONSOLE_UART_FLOW_CONTROL),
        .uc_tx_char = uart_console_tx_char,
        .uc_rx_char = uart_console_rx_char,
    };

    cr_tx.size = MYNEWT_VAL(CONSOLE_UART_TX_BUF_SIZE);
   1c3b2:	4b14      	ldr	r3, [pc, #80]	; (1c404 <uart_console_init+0x78>)
   1c3b4:	2220      	movs	r2, #32
   1c3b6:	805a      	strh	r2, [r3, #2]
    cr_tx.buf = cr_tx_buf;
   1c3b8:	4913      	ldr	r1, [pc, #76]	; (1c408 <uart_console_init+0x7c>)
   1c3ba:	6059      	str	r1, [r3, #4]
    write_char_cb = uart_console_queue_char;
   1c3bc:	4b13      	ldr	r3, [pc, #76]	; (1c40c <uart_console_init+0x80>)
   1c3be:	4914      	ldr	r1, [pc, #80]	; (1c410 <uart_console_init+0x84>)
   1c3c0:	6019      	str	r1, [r3, #0]

#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
    cr_rx.size = MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE);
   1c3c2:	4b14      	ldr	r3, [pc, #80]	; (1c414 <uart_console_init+0x88>)
   1c3c4:	805a      	strh	r2, [r3, #2]
    cr_rx.buf = cr_rx_buf;
   1c3c6:	4a14      	ldr	r2, [pc, #80]	; (1c418 <uart_console_init+0x8c>)
   1c3c8:	605a      	str	r2, [r3, #4]

    rx_ev.ev_cb = uart_console_rx_char_event;
   1c3ca:	4b14      	ldr	r3, [pc, #80]	; (1c41c <uart_console_init+0x90>)
   1c3cc:	4a14      	ldr	r2, [pc, #80]	; (1c420 <uart_console_init+0x94>)
   1c3ce:	605a      	str	r2, [r3, #4]
#endif

    if (!uart_dev) {
   1c3d0:	4b14      	ldr	r3, [pc, #80]	; (1c424 <uart_console_init+0x98>)
   1c3d2:	681b      	ldr	r3, [r3, #0]
   1c3d4:	b11b      	cbz	r3, 1c3de <uart_console_init+0x52>
          OS_TIMEOUT_NEVER, &uc);
        if (!uart_dev) {
            return -1;
        }
    }
    return 0;
   1c3d6:	2000      	movs	r0, #0
}
   1c3d8:	b007      	add	sp, #28
   1c3da:	f85d fb04 	ldr.w	pc, [sp], #4
        uart_dev = (struct uart_dev *)os_dev_open(MYNEWT_VAL(CONSOLE_UART_DEV),
   1c3de:	466a      	mov	r2, sp
   1c3e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c3e4:	4810      	ldr	r0, [pc, #64]	; (1c428 <uart_console_init+0x9c>)
   1c3e6:	f7fc ffcf 	bl	19388 <os_dev_open>
   1c3ea:	4b0e      	ldr	r3, [pc, #56]	; (1c424 <uart_console_init+0x98>)
   1c3ec:	6018      	str	r0, [r3, #0]
        if (!uart_dev) {
   1c3ee:	b108      	cbz	r0, 1c3f4 <uart_console_init+0x68>
    return 0;
   1c3f0:	2000      	movs	r0, #0
   1c3f2:	e7f1      	b.n	1c3d8 <uart_console_init+0x4c>
            return -1;
   1c3f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c3f8:	e7ee      	b.n	1c3d8 <uart_console_init+0x4c>
   1c3fa:	bf00      	nop
   1c3fc:	0001c1d9 	.word	0x0001c1d9
   1c400:	0001c24d 	.word	0x0001c24d
   1c404:	10004fc0 	.word	0x10004fc0
   1c408:	10004fc8 	.word	0x10004fc8
   1c40c:	10005000 	.word	0x10005000
   1c410:	0001c1f5 	.word	0x0001c1f5
   1c414:	10004f98 	.word	0x10004f98
   1c418:	10004fa0 	.word	0x10004fa0
   1c41c:	10004fe8 	.word	0x10004fe8
   1c420:	0001c291 	.word	0x0001c291
   1c424:	10004ffc 	.word	0x10004ffc
   1c428:	00033dc8 	.word	0x00033dc8

0001c42c <flash_area_find_idx>:
const struct flash_area *flash_map;
int flash_map_entries;

static int
flash_area_find_idx(uint8_t id)
{
   1c42c:	4602      	mov	r2, r0
    int i;

    if (flash_map == NULL) {
   1c42e:	4b0b      	ldr	r3, [pc, #44]	; (1c45c <flash_area_find_idx+0x30>)
   1c430:	6819      	ldr	r1, [r3, #0]
   1c432:	b179      	cbz	r1, 1c454 <flash_area_find_idx+0x28>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
   1c434:	2000      	movs	r0, #0
   1c436:	4b0a      	ldr	r3, [pc, #40]	; (1c460 <flash_area_find_idx+0x34>)
   1c438:	681b      	ldr	r3, [r3, #0]
   1c43a:	4283      	cmp	r3, r0
   1c43c:	dd07      	ble.n	1c44e <flash_area_find_idx+0x22>
        if (flash_map[i].fa_id == id) {
   1c43e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1c442:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
   1c446:	4293      	cmp	r3, r2
   1c448:	d006      	beq.n	1c458 <flash_area_find_idx+0x2c>
    for (i = 0; i < flash_map_entries; i++) {
   1c44a:	3001      	adds	r0, #1
   1c44c:	e7f3      	b.n	1c436 <flash_area_find_idx+0xa>
            return i;
        }
    }

    return -1;
   1c44e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c452:	4770      	bx	lr
        return -1;
   1c454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1c458:	4770      	bx	lr
   1c45a:	bf00      	nop
   1c45c:	10005004 	.word	0x10005004
   1c460:	10005008 	.word	0x10005008

0001c464 <flash_map_area_overlaps>:
    const struct flash_area *area2;
    uint32_t end1;
    uint32_t end2;
    int i;

    for (i = 0; i < flash_map_entries; i++) {
   1c464:	2300      	movs	r3, #0
   1c466:	4a13      	ldr	r2, [pc, #76]	; (1c4b4 <flash_map_area_overlaps+0x50>)
   1c468:	6812      	ldr	r2, [r2, #0]
   1c46a:	429a      	cmp	r2, r3
   1c46c:	dd1f      	ble.n	1c4ae <flash_map_area_overlaps+0x4a>
{
   1c46e:	b430      	push	{r4, r5}
   1c470:	e004      	b.n	1c47c <flash_map_area_overlaps+0x18>
    for (i = 0; i < flash_map_entries; i++) {
   1c472:	3301      	adds	r3, #1
   1c474:	4a0f      	ldr	r2, [pc, #60]	; (1c4b4 <flash_map_area_overlaps+0x50>)
   1c476:	6812      	ldr	r2, [r2, #0]
   1c478:	429a      	cmp	r2, r3
   1c47a:	dd15      	ble.n	1c4a8 <flash_map_area_overlaps+0x44>
        area2 = &flash_map[i];
   1c47c:	4a0e      	ldr	r2, [pc, #56]	; (1c4b8 <flash_map_area_overlaps+0x54>)
   1c47e:	6812      	ldr	r2, [r2, #0]
   1c480:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1c484:	eb02 0281 	add.w	r2, r2, r1, lsl #2

        if (area1->fa_device_id == area2->fa_device_id) {
   1c488:	7844      	ldrb	r4, [r0, #1]
   1c48a:	7851      	ldrb	r1, [r2, #1]
   1c48c:	428c      	cmp	r4, r1
   1c48e:	d1f0      	bne.n	1c472 <flash_map_area_overlaps+0xe>
            end1 = area1->fa_off + area1->fa_size;
   1c490:	6845      	ldr	r5, [r0, #4]
   1c492:	6881      	ldr	r1, [r0, #8]
   1c494:	4429      	add	r1, r5
            end2 = area2->fa_off + area2->fa_size;
   1c496:	6854      	ldr	r4, [r2, #4]
   1c498:	6892      	ldr	r2, [r2, #8]
   1c49a:	4422      	add	r2, r4

            if (end1 > area2->fa_off && area1->fa_off < end2) {
   1c49c:	428c      	cmp	r4, r1
   1c49e:	d2e8      	bcs.n	1c472 <flash_map_area_overlaps+0xe>
   1c4a0:	4295      	cmp	r5, r2
   1c4a2:	d2e6      	bcs.n	1c472 <flash_map_area_overlaps+0xe>
                return true;
   1c4a4:	2001      	movs	r0, #1
   1c4a6:	e000      	b.n	1c4aa <flash_map_area_overlaps+0x46>
            }
        }
    }

    return false;
   1c4a8:	2000      	movs	r0, #0
}
   1c4aa:	bc30      	pop	{r4, r5}
   1c4ac:	4770      	bx	lr
    return false;
   1c4ae:	2000      	movs	r0, #0
}
   1c4b0:	4770      	bx	lr
   1c4b2:	bf00      	nop
   1c4b4:	10005008 	.word	0x10005008
   1c4b8:	10005004 	.word	0x10005004

0001c4bc <flash_map_add_new_dflt_areas>:
 * Adds areas from the hardcoded flash map that aren't present in, and don't
 * overlap with, the manufacturing flash map.
 */
static void
flash_map_add_new_dflt_areas(void)
{
   1c4bc:	b570      	push	{r4, r5, r6, lr}

    const struct flash_area *dflt_area;
    struct flash_area *dst_area;
    int i;
    
    for (i = 0; i < num_dflt_entries; i++) {
   1c4be:	2400      	movs	r4, #0
   1c4c0:	e00a      	b.n	1c4d8 <flash_map_add_new_dflt_areas+0x1c>
            /* Default flash map contains a new entry. */
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "no room: id=%d",
                               dflt_area->fa_id);
                DEBUG_PANIC();
   1c4c2:	f7f8 f91f 	bl	14704 <hal_debugger_connected>
   1c4c6:	b100      	cbz	r0, 1c4ca <flash_map_add_new_dflt_areas+0xe>
   1c4c8:	be01      	bkpt	0x0001
   1c4ca:	2300      	movs	r3, #0
   1c4cc:	461a      	mov	r2, r3
   1c4ce:	4619      	mov	r1, r3
   1c4d0:	4618      	mov	r0, r3
   1c4d2:	f7fc fc27 	bl	18d24 <__assert_func>
    for (i = 0; i < num_dflt_entries; i++) {
   1c4d6:	3401      	adds	r4, #1
   1c4d8:	2c05      	cmp	r4, #5
   1c4da:	dc28      	bgt.n	1c52e <flash_map_add_new_dflt_areas+0x72>
        dflt_area = &sysflash_map_dflt[i];
   1c4dc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1c4e0:	4a13      	ldr	r2, [pc, #76]	; (1c530 <flash_map_add_new_dflt_areas+0x74>)
   1c4e2:	eb02 0683 	add.w	r6, r2, r3, lsl #2
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
   1c4e6:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   1c4ea:	f7ff ff9f 	bl	1c42c <flash_area_find_idx>
   1c4ee:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1c4f2:	d1f0      	bne.n	1c4d6 <flash_map_add_new_dflt_areas+0x1a>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
   1c4f4:	4b0f      	ldr	r3, [pc, #60]	; (1c534 <flash_map_add_new_dflt_areas+0x78>)
   1c4f6:	681d      	ldr	r5, [r3, #0]
   1c4f8:	2d09      	cmp	r5, #9
   1c4fa:	dce2      	bgt.n	1c4c2 <flash_map_add_new_dflt_areas+0x6>
                return;
            } 

            /* Add the default entry if it doesn't cause any overlaps. */
            if (flash_map_area_overlaps(dflt_area)) {
   1c4fc:	4630      	mov	r0, r6
   1c4fe:	f7ff ffb1 	bl	1c464 <flash_map_area_overlaps>
   1c502:	2800      	cmp	r0, #0
   1c504:	d1e7      	bne.n	1c4d6 <flash_map_add_new_dflt_areas+0x1a>
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "overlap: id=%d",
                               dflt_area->fa_id);
            } else {
                /* Cast away const. */
                dst_area = (struct flash_area *) &flash_map[flash_map_entries];
   1c506:	4b0c      	ldr	r3, [pc, #48]	; (1c538 <flash_map_add_new_dflt_areas+0x7c>)
   1c508:	681b      	ldr	r3, [r3, #0]
   1c50a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1c50e:	eb03 0585 	add.w	r5, r3, r5, lsl #2

                *dst_area = *dflt_area;
   1c512:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1c516:	4a06      	ldr	r2, [pc, #24]	; (1c530 <flash_map_add_new_dflt_areas+0x74>)
   1c518:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1c51c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1c520:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                flash_map_entries++;
   1c524:	4a03      	ldr	r2, [pc, #12]	; (1c534 <flash_map_add_new_dflt_areas+0x78>)
   1c526:	6813      	ldr	r3, [r2, #0]
   1c528:	3301      	adds	r3, #1
   1c52a:	6013      	str	r3, [r2, #0]
   1c52c:	e7d3      	b.n	1c4d6 <flash_map_add_new_dflt_areas+0x1a>
            }
        }
    }
}
   1c52e:	bd70      	pop	{r4, r5, r6, pc}
   1c530:	00035254 	.word	0x00035254
   1c534:	10005008 	.word	0x10005008
   1c538:	10005004 	.word	0x10005004

0001c53c <flash_map_init>:

void
flash_map_init(void)
{
   1c53c:	b510      	push	{r4, lr}
   1c53e:	b082      	sub	sp, #8
#endif

    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1c540:	4b13      	ldr	r3, [pc, #76]	; (1c590 <flash_map_init+0x54>)
   1c542:	781b      	ldrb	r3, [r3, #0]
   1c544:	b163      	cbz	r3, 1c560 <flash_map_init+0x24>

    rc = hal_flash_init();
   1c546:	f00f fbcb 	bl	2bce0 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1c54a:	b998      	cbnz	r0, 1c574 <flash_map_init+0x38>
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   1c54c:	4b11      	ldr	r3, [pc, #68]	; (1c594 <flash_map_init+0x58>)
   1c54e:	4a12      	ldr	r2, [pc, #72]	; (1c598 <flash_map_init+0x5c>)
   1c550:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1c552:	4b12      	ldr	r3, [pc, #72]	; (1c59c <flash_map_init+0x60>)
   1c554:	2206      	movs	r2, #6
   1c556:	601a      	str	r2, [r3, #0]

    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
   1c558:	f7ff ffb0 	bl	1c4bc <flash_map_add_new_dflt_areas>
}
   1c55c:	b002      	add	sp, #8
   1c55e:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1c560:	f7f8 f8d0 	bl	14704 <hal_debugger_connected>
   1c564:	b100      	cbz	r0, 1c568 <flash_map_init+0x2c>
   1c566:	be01      	bkpt	0x0001
   1c568:	2300      	movs	r3, #0
   1c56a:	461a      	mov	r2, r3
   1c56c:	4619      	mov	r1, r3
   1c56e:	4618      	mov	r0, r3
   1c570:	f7fc fbd8 	bl	18d24 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1c574:	f7f8 f8c6 	bl	14704 <hal_debugger_connected>
   1c578:	b100      	cbz	r0, 1c57c <flash_map_init+0x40>
   1c57a:	be01      	bkpt	0x0001
   1c57c:	2000      	movs	r0, #0
   1c57e:	9000      	str	r0, [sp, #0]
   1c580:	4b07      	ldr	r3, [pc, #28]	; (1c5a0 <flash_map_init+0x64>)
   1c582:	681c      	ldr	r4, [r3, #0]
   1c584:	4603      	mov	r3, r0
   1c586:	4602      	mov	r2, r0
   1c588:	4601      	mov	r1, r0
   1c58a:	47a0      	blx	r4
   1c58c:	e7de      	b.n	1c54c <flash_map_init+0x10>
   1c58e:	bf00      	nop
   1c590:	100055a0 	.word	0x100055a0
   1c594:	10005004 	.word	0x10005004
   1c598:	00035254 	.word	0x00035254
   1c59c:	10005008 	.word	0x10005008
   1c5a0:	100006b4 	.word	0x100006b4

0001c5a4 <log_registered>:
static int
log_registered(struct log *log)
{
    struct log *cur;

    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   1c5a4:	4b05      	ldr	r3, [pc, #20]	; (1c5bc <log_registered+0x18>)
   1c5a6:	681b      	ldr	r3, [r3, #0]
   1c5a8:	b11b      	cbz	r3, 1c5b2 <log_registered+0xe>
        if (cur == log) {
   1c5aa:	4283      	cmp	r3, r0
   1c5ac:	d003      	beq.n	1c5b6 <log_registered+0x12>
    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   1c5ae:	68db      	ldr	r3, [r3, #12]
   1c5b0:	e7fa      	b.n	1c5a8 <log_registered+0x4>
            return 1;
        }
    }

    return 0;
   1c5b2:	2000      	movs	r0, #0
   1c5b4:	4770      	bx	lr
            return 1;
   1c5b6:	2001      	movs	r0, #1
}
   1c5b8:	4770      	bx	lr
   1c5ba:	bf00      	nop
   1c5bc:	100006a0 	.word	0x100006a0

0001c5c0 <log_chk_type>:
{
    int rc;

    rc = OS_OK;

    switch(etype) {
   1c5c0:	2802      	cmp	r0, #2
   1c5c2:	d801      	bhi.n	1c5c8 <log_chk_type+0x8>
    rc = OS_OK;
   1c5c4:	2000      	movs	r0, #0
   1c5c6:	4770      	bx	lr
        case LOG_ETYPE_STRING:
        case LOG_ETYPE_BINARY:
        case LOG_ETYPE_CBOR:
            break;
        default:
            rc = OS_ERROR;
   1c5c8:	200c      	movs	r0, #12
            break;
    }

    return rc;
}
   1c5ca:	4770      	bx	lr

0001c5cc <log_chk_max_entry_len>:
log_chk_max_entry_len(struct log *log, uint16_t len)
{
    int rc;

    rc = OS_OK;
    if (log->l_max_entry_len != 0) {
   1c5cc:	8b43      	ldrh	r3, [r0, #26]
   1c5ce:	b11b      	cbz	r3, 1c5d8 <log_chk_max_entry_len+0xc>
        if (len > log->l_max_entry_len) {
   1c5d0:	428b      	cmp	r3, r1
   1c5d2:	d303      	bcc.n	1c5dc <log_chk_max_entry_len+0x10>
    rc = OS_OK;
   1c5d4:	2000      	movs	r0, #0
   1c5d6:	4770      	bx	lr
   1c5d8:	2000      	movs	r0, #0
   1c5da:	4770      	bx	lr
            LOG_STATS_INC(log, too_long);
            rc = OS_ENOMEM;
   1c5dc:	2001      	movs	r0, #1
        }
    }

    return rc;
}
   1c5de:	4770      	bx	lr

0001c5e0 <log_call_append_cb>:
/**
 * Calls the given log's append callback, if it has one.
 */
static void
log_call_append_cb(struct log *log, uint32_t idx)
{
   1c5e0:	b500      	push	{lr}
   1c5e2:	b083      	sub	sp, #12
     * preventing a TOCTTOU race.
     * (This all assumes that function pointer reads and writes are atomic.)
     */
    log_append_cb * volatile cb;

    cb = log->l_append_cb;
   1c5e4:	6903      	ldr	r3, [r0, #16]
   1c5e6:	9301      	str	r3, [sp, #4]
    if (cb != NULL) {
   1c5e8:	9b01      	ldr	r3, [sp, #4]
   1c5ea:	b10b      	cbz	r3, 1c5f0 <log_call_append_cb+0x10>
        cb(log, idx);
   1c5ec:	9b01      	ldr	r3, [sp, #4]
   1c5ee:	4798      	blx	r3
    }
}
   1c5f0:	b003      	add	sp, #12
   1c5f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001c5f8 <log_append_prepare>:
{
   1c5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c5fc:	b085      	sub	sp, #20
   1c5fe:	4606      	mov	r6, r0
   1c600:	468a      	mov	sl, r1
   1c602:	4615      	mov	r5, r2
   1c604:	461f      	mov	r7, r3
   1c606:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    rc = log_chk_type(etype);
   1c608:	4618      	mov	r0, r3
   1c60a:	f7ff ffd9 	bl	1c5c0 <log_chk_type>
    assert(rc == OS_OK);
   1c60e:	2800      	cmp	r0, #0
   1c610:	d13e      	bne.n	1c690 <log_append_prepare+0x98>
    if (log->l_name == NULL || log->l_log == NULL) {
   1c612:	6833      	ldr	r3, [r6, #0]
   1c614:	2b00      	cmp	r3, #0
   1c616:	d074      	beq.n	1c702 <log_append_prepare+0x10a>
   1c618:	6873      	ldr	r3, [r6, #4]
   1c61a:	2b00      	cmp	r3, #0
   1c61c:	d074      	beq.n	1c708 <log_append_prepare+0x110>
    if (level > LOG_LEVEL_MAX) {
   1c61e:	2d0f      	cmp	r5, #15
   1c620:	d900      	bls.n	1c624 <log_append_prepare+0x2c>
        level = LOG_LEVEL_MAX;
   1c622:	250f      	movs	r5, #15
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   1c624:	681b      	ldr	r3, [r3, #0]
   1c626:	2b02      	cmp	r3, #2
   1c628:	d03c      	beq.n	1c6a4 <log_append_prepare+0xac>
    if (level < log->l_level) {
   1c62a:	7e33      	ldrb	r3, [r6, #24]
   1c62c:	42ab      	cmp	r3, r5
   1c62e:	d86e      	bhi.n	1c70e <log_append_prepare+0x116>
    if (level < log_level_get(module)) {
   1c630:	4650      	mov	r0, sl
   1c632:	f000 fa45 	bl	1cac0 <log_level_get>
   1c636:	42a8      	cmp	r0, r5
   1c638:	d86c      	bhi.n	1c714 <log_append_prepare+0x11c>
    OS_ENTER_CRITICAL(sr);
   1c63a:	f7fe f947 	bl	1a8cc <os_arch_save_sr>
    idx = g_log_info.li_next_index++;
   1c63e:	4b3a      	ldr	r3, [pc, #232]	; (1c728 <log_append_prepare+0x130>)
   1c640:	f8d3 b000 	ldr.w	fp, [r3]
   1c644:	f10b 0201 	add.w	r2, fp, #1
   1c648:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1c64a:	f7fe f945 	bl	1a8d8 <os_arch_restore_sr>
    rc = os_gettimeofday(&tv, NULL);
   1c64e:	2100      	movs	r1, #0
   1c650:	4668      	mov	r0, sp
   1c652:	f7fe f84b 	bl	1a6ec <os_gettimeofday>
    if (rc || tv.tv_sec < UTC01_01_2016) {
   1c656:	4606      	mov	r6, r0
   1c658:	b938      	cbnz	r0, 1c66a <log_append_prepare+0x72>
   1c65a:	e9dd 0100 	ldrd	r0, r1, [sp]
   1c65e:	a330      	add	r3, pc, #192	; (adr r3, 1c720 <log_append_prepare+0x128>)
   1c660:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c664:	4282      	cmp	r2, r0
   1c666:	418b      	sbcs	r3, r1
   1c668:	db20      	blt.n	1c6ac <log_append_prepare+0xb4>
        ue->ue_ts = os_get_uptime_usec();
   1c66a:	f7fe f8e3 	bl	1a834 <os_get_uptime_usec>
   1c66e:	6020      	str	r0, [r4, #0]
   1c670:	6061      	str	r1, [r4, #4]
    ue->ue_level = level;
   1c672:	7365      	strb	r5, [r4, #13]
    ue->ue_module = module;
   1c674:	f884 a00c 	strb.w	sl, [r4, #12]
    ue->ue_index = idx;
   1c678:	f8c4 b008 	str.w	fp, [r4, #8]
    ue->ue_etype = etype;
   1c67c:	7ba3      	ldrb	r3, [r4, #14]
   1c67e:	f367 0303 	bfi	r3, r7, #0, #4
    ue->ue_flags = 0;
   1c682:	f36f 1307 	bfc	r3, #4, #4
   1c686:	73a3      	strb	r3, [r4, #14]
}
   1c688:	4630      	mov	r0, r6
   1c68a:	b005      	add	sp, #20
   1c68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(rc == OS_OK);
   1c690:	f7f8 f838 	bl	14704 <hal_debugger_connected>
   1c694:	b100      	cbz	r0, 1c698 <log_append_prepare+0xa0>
   1c696:	be01      	bkpt	0x0001
   1c698:	2300      	movs	r3, #0
   1c69a:	461a      	mov	r2, r3
   1c69c:	4619      	mov	r1, r3
   1c69e:	4618      	mov	r0, r3
   1c6a0:	f7fc fb40 	bl	18d24 <__assert_func>
        log_written = 1;
   1c6a4:	4b21      	ldr	r3, [pc, #132]	; (1c72c <log_append_prepare+0x134>)
   1c6a6:	2201      	movs	r2, #1
   1c6a8:	701a      	strb	r2, [r3, #0]
   1c6aa:	e7be      	b.n	1c62a <log_append_prepare+0x32>
        ue->ue_ts = tv.tv_sec * 1000000 + tv.tv_usec;
   1c6ac:	ea4f 1c41 	mov.w	ip, r1, lsl #5
   1c6b0:	0143      	lsls	r3, r0, #5
   1c6b2:	ea4c 62d0 	orr.w	r2, ip, r0, lsr #27
   1c6b6:	1a1b      	subs	r3, r3, r0
   1c6b8:	eb62 0201 	sbc.w	r2, r2, r1
   1c6bc:	ea4f 2c42 	mov.w	ip, r2, lsl #9
   1c6c0:	ea4c 5cd3 	orr.w	ip, ip, r3, lsr #23
   1c6c4:	ea4f 2e43 	mov.w	lr, r3, lsl #9
   1c6c8:	4662      	mov	r2, ip
   1c6ca:	eb1e 0300 	adds.w	r3, lr, r0
   1c6ce:	eb41 0202 	adc.w	r2, r1, r2
   1c6d2:	ea4f 1c82 	mov.w	ip, r2, lsl #6
   1c6d6:	ea4c 6c93 	orr.w	ip, ip, r3, lsr #26
   1c6da:	ea4f 1e83 	mov.w	lr, r3, lsl #6
   1c6de:	ebbe 0303 	subs.w	r3, lr, r3
   1c6e2:	eb6c 0202 	sbc.w	r2, ip, r2
   1c6e6:	eb13 0800 	adds.w	r8, r3, r0
   1c6ea:	eb42 0901 	adc.w	r9, r2, r1
   1c6ee:	9b02      	ldr	r3, [sp, #8]
   1c6f0:	eb18 0803 	adds.w	r8, r8, r3
   1c6f4:	eb49 79e3 	adc.w	r9, r9, r3, asr #31
   1c6f8:	f8c4 8000 	str.w	r8, [r4]
   1c6fc:	f8c4 9004 	str.w	r9, [r4, #4]
   1c700:	e7b7      	b.n	1c672 <log_append_prepare+0x7a>
        rc = -1;
   1c702:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1c706:	e7bf      	b.n	1c688 <log_append_prepare+0x90>
   1c708:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1c70c:	e7bc      	b.n	1c688 <log_append_prepare+0x90>
        rc = -1;
   1c70e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1c712:	e7b9      	b.n	1c688 <log_append_prepare+0x90>
        rc = -1;
   1c714:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    return (rc);
   1c718:	e7b6      	b.n	1c688 <log_append_prepare+0x90>
   1c71a:	bf00      	nop
   1c71c:	f3af 8000 	nop.w
   1c720:	5685c17f 	.word	0x5685c17f
   1c724:	00000000 	.word	0x00000000
   1c728:	1000500c 	.word	0x1000500c
   1c72c:	10005014 	.word	0x10005014

0001c730 <log_init>:
{
   1c730:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1c732:	4b0d      	ldr	r3, [pc, #52]	; (1c768 <log_init+0x38>)
   1c734:	781b      	ldrb	r3, [r3, #0]
   1c736:	b163      	cbz	r3, 1c752 <log_init+0x22>
    log_written = 0;
   1c738:	2300      	movs	r3, #0
   1c73a:	4a0c      	ldr	r2, [pc, #48]	; (1c76c <log_init+0x3c>)
   1c73c:	7013      	strb	r3, [r2, #0]
    STAILQ_INIT(&g_log_list);
   1c73e:	4a0c      	ldr	r2, [pc, #48]	; (1c770 <log_init+0x40>)
   1c740:	6013      	str	r3, [r2, #0]
   1c742:	6052      	str	r2, [r2, #4]
    g_log_info.li_version = MYNEWT_VAL(LOG_VERSION);
   1c744:	4a0b      	ldr	r2, [pc, #44]	; (1c774 <log_init+0x44>)
   1c746:	2103      	movs	r1, #3
   1c748:	7111      	strb	r1, [r2, #4]
    g_log_info.li_next_index = 0;
   1c74a:	6013      	str	r3, [r2, #0]
    log_console_init();
   1c74c:	f000 f986 	bl	1ca5c <log_console_init>
}
   1c750:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1c752:	f7f7 ffd7 	bl	14704 <hal_debugger_connected>
   1c756:	b100      	cbz	r0, 1c75a <log_init+0x2a>
   1c758:	be01      	bkpt	0x0001
   1c75a:	2300      	movs	r3, #0
   1c75c:	461a      	mov	r2, r3
   1c75e:	4619      	mov	r1, r3
   1c760:	4618      	mov	r0, r3
   1c762:	f7fc fadf 	bl	18d24 <__assert_func>
   1c766:	bf00      	nop
   1c768:	100055a0 	.word	0x100055a0
   1c76c:	10005014 	.word	0x10005014
   1c770:	100006a0 	.word	0x100006a0
   1c774:	1000500c 	.word	0x1000500c

0001c778 <log_hdr_len>:
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   1c778:	7b83      	ldrb	r3, [r0, #14]
   1c77a:	f013 0f10 	tst.w	r3, #16
   1c77e:	d101      	bne.n	1c784 <log_hdr_len+0xc>
    return LOG_BASE_ENTRY_HDR_SIZE;
   1c780:	200f      	movs	r0, #15
   1c782:	4770      	bx	lr
        return LOG_BASE_ENTRY_HDR_SIZE + LOG_IMG_HASHLEN;
   1c784:	2013      	movs	r0, #19
}
   1c786:	4770      	bx	lr

0001c788 <log_append_body>:
}

int
log_append_body(struct log *log, uint8_t module, uint8_t level, uint8_t etype,
                const void *body, uint16_t body_len)
{
   1c788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c78c:	b089      	sub	sp, #36	; 0x24
   1c78e:	4604      	mov	r4, r0
   1c790:	460d      	mov	r5, r1
   1c792:	4691      	mov	r9, r2
   1c794:	461e      	mov	r6, r3
   1c796:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
    struct log_entry_hdr hdr;
    int rc;

    LOG_STATS_INC(log, writes);

    rc = log_chk_max_entry_len(log, body_len);
   1c79a:	4641      	mov	r1, r8
   1c79c:	f7ff ff16 	bl	1c5cc <log_chk_max_entry_len>
    if (rc != OS_OK) {
   1c7a0:	4607      	mov	r7, r0
   1c7a2:	b118      	cbz	r0, 1c7ac <log_append_body+0x24>
    }

    log_call_append_cb(log, hdr.ue_index);

    return 0;
}
   1c7a4:	4638      	mov	r0, r7
   1c7a6:	b009      	add	sp, #36	; 0x24
   1c7a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = log_append_prepare(log, module, level, etype, &hdr);
   1c7ac:	ab03      	add	r3, sp, #12
   1c7ae:	9300      	str	r3, [sp, #0]
   1c7b0:	4633      	mov	r3, r6
   1c7b2:	464a      	mov	r2, r9
   1c7b4:	4629      	mov	r1, r5
   1c7b6:	4620      	mov	r0, r4
   1c7b8:	f7ff ff1e 	bl	1c5f8 <log_append_prepare>
    if (rc != 0) {
   1c7bc:	4607      	mov	r7, r0
   1c7be:	2800      	cmp	r0, #0
   1c7c0:	d1f0      	bne.n	1c7a4 <log_append_body+0x1c>
    rc = log->l_log->log_append_body(log, &hdr, body, body_len);
   1c7c2:	6863      	ldr	r3, [r4, #4]
   1c7c4:	691d      	ldr	r5, [r3, #16]
   1c7c6:	4643      	mov	r3, r8
   1c7c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1c7ca:	a903      	add	r1, sp, #12
   1c7cc:	4620      	mov	r0, r4
   1c7ce:	47a8      	blx	r5
    if (rc != 0) {
   1c7d0:	4607      	mov	r7, r0
   1c7d2:	2800      	cmp	r0, #0
   1c7d4:	d1e6      	bne.n	1c7a4 <log_append_body+0x1c>
    log_call_append_cb(log, hdr.ue_index);
   1c7d6:	9905      	ldr	r1, [sp, #20]
   1c7d8:	4620      	mov	r0, r4
   1c7da:	f7ff ff01 	bl	1c5e0 <log_call_append_cb>
    return 0;
   1c7de:	e7e1      	b.n	1c7a4 <log_append_body+0x1c>

0001c7e0 <log_walk>:
}

int
log_walk(struct log *log, log_walk_func_t walk_func,
         struct log_offset *log_offset)
{
   1c7e0:	b508      	push	{r3, lr}
    int rc;

    rc = log->l_log->log_walk(log, walk_func, log_offset);
   1c7e2:	6843      	ldr	r3, [r0, #4]
   1c7e4:	69db      	ldr	r3, [r3, #28]
   1c7e6:	4798      	blx	r3
    }

    return (0);
err:
    return (rc);
}
   1c7e8:	bd08      	pop	{r3, pc}
	...

0001c7ec <log_read_last_hdr>:
{
   1c7ec:	b530      	push	{r4, r5, lr}
   1c7ee:	b089      	sub	sp, #36	; 0x24
    arg.hdr = out_hdr;
   1c7f0:	9106      	str	r1, [sp, #24]
    arg.read_success = 0;
   1c7f2:	2300      	movs	r3, #0
   1c7f4:	9307      	str	r3, [sp, #28]
    log_offset.lo_arg = &arg;
   1c7f6:	aa06      	add	r2, sp, #24
   1c7f8:	9204      	str	r2, [sp, #16]
    log_offset.lo_ts = -1;
   1c7fa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1c7fe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1c802:	e9cd 4500 	strd	r4, r5, [sp]
    log_offset.lo_index = 0;
   1c806:	9302      	str	r3, [sp, #8]
    log_offset.lo_data_len = 0;
   1c808:	9303      	str	r3, [sp, #12]
    log_walk(log, log_read_hdr_walk, &log_offset);
   1c80a:	466a      	mov	r2, sp
   1c80c:	4905      	ldr	r1, [pc, #20]	; (1c824 <log_read_last_hdr+0x38>)
   1c80e:	f7ff ffe7 	bl	1c7e0 <log_walk>
    if (!arg.read_success) {
   1c812:	9b07      	ldr	r3, [sp, #28]
   1c814:	b113      	cbz	r3, 1c81c <log_read_last_hdr+0x30>
    return 0;
   1c816:	2000      	movs	r0, #0
}
   1c818:	b009      	add	sp, #36	; 0x24
   1c81a:	bd30      	pop	{r4, r5, pc}
        return -1;
   1c81c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c820:	e7fa      	b.n	1c818 <log_read_last_hdr+0x2c>
   1c822:	bf00      	nop
   1c824:	0001c91d 	.word	0x0001c91d

0001c828 <log_register>:
{
   1c828:	b530      	push	{r4, r5, lr}
   1c82a:	b087      	sub	sp, #28
   1c82c:	460c      	mov	r4, r1
   1c82e:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
    assert(!log_written);
   1c832:	4d2f      	ldr	r5, [pc, #188]	; (1c8f0 <log_register+0xc8>)
   1c834:	782d      	ldrb	r5, [r5, #0]
   1c836:	bb25      	cbnz	r5, 1c882 <log_register+0x5a>
    if (level > LOG_LEVEL_MAX) {
   1c838:	290f      	cmp	r1, #15
   1c83a:	d900      	bls.n	1c83e <log_register+0x16>
        level = LOG_LEVEL_MAX;
   1c83c:	210f      	movs	r1, #15
    log->l_name = name;
   1c83e:	6020      	str	r0, [r4, #0]
    log->l_log = lh;
   1c840:	6062      	str	r2, [r4, #4]
    log->l_arg = arg;
   1c842:	60a3      	str	r3, [r4, #8]
    log->l_level = level;
   1c844:	7621      	strb	r1, [r4, #24]
    log->l_append_cb = NULL;
   1c846:	2300      	movs	r3, #0
   1c848:	6123      	str	r3, [r4, #16]
    log->l_max_entry_len = 0;
   1c84a:	8363      	strh	r3, [r4, #26]
    if (!log_registered(log)) {
   1c84c:	4620      	mov	r0, r4
   1c84e:	f7ff fea9 	bl	1c5a4 <log_registered>
   1c852:	b938      	cbnz	r0, 1c864 <log_register+0x3c>
        STAILQ_INSERT_TAIL(&g_log_list, log, l_next);
   1c854:	2300      	movs	r3, #0
   1c856:	60e3      	str	r3, [r4, #12]
   1c858:	4b26      	ldr	r3, [pc, #152]	; (1c8f4 <log_register+0xcc>)
   1c85a:	685a      	ldr	r2, [r3, #4]
   1c85c:	6014      	str	r4, [r2, #0]
   1c85e:	f104 020c 	add.w	r2, r4, #12
   1c862:	605a      	str	r2, [r3, #4]
    if (log->l_log->log_registered) {
   1c864:	6863      	ldr	r3, [r4, #4]
   1c866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c868:	b11b      	cbz	r3, 1c872 <log_register+0x4a>
        rc = log->l_log->log_registered(log);
   1c86a:	4620      	mov	r0, r4
   1c86c:	4798      	blx	r3
        if (rc) {
   1c86e:	4605      	mov	r5, r0
   1c870:	b988      	cbnz	r0, 1c896 <log_register+0x6e>
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   1c872:	6863      	ldr	r3, [r4, #4]
   1c874:	681b      	ldr	r3, [r3, #0]
   1c876:	2b02      	cmp	r3, #2
   1c878:	d024      	beq.n	1c8c4 <log_register+0x9c>
    return (0);
   1c87a:	2500      	movs	r5, #0
}
   1c87c:	4628      	mov	r0, r5
   1c87e:	b007      	add	sp, #28
   1c880:	bd30      	pop	{r4, r5, pc}
    assert(!log_written);
   1c882:	f7f7 ff3f 	bl	14704 <hal_debugger_connected>
   1c886:	b100      	cbz	r0, 1c88a <log_register+0x62>
   1c888:	be01      	bkpt	0x0001
   1c88a:	2300      	movs	r3, #0
   1c88c:	461a      	mov	r2, r3
   1c88e:	4619      	mov	r1, r3
   1c890:	4618      	mov	r0, r3
   1c892:	f7fc fa47 	bl	18d24 <__assert_func>
            STAILQ_REMOVE(&g_log_list, log, log, l_next);
   1c896:	4b17      	ldr	r3, [pc, #92]	; (1c8f4 <log_register+0xcc>)
   1c898:	681b      	ldr	r3, [r3, #0]
   1c89a:	42a3      	cmp	r3, r4
   1c89c:	d00b      	beq.n	1c8b6 <log_register+0x8e>
   1c89e:	461a      	mov	r2, r3
   1c8a0:	68db      	ldr	r3, [r3, #12]
   1c8a2:	42a3      	cmp	r3, r4
   1c8a4:	d1fb      	bne.n	1c89e <log_register+0x76>
   1c8a6:	68db      	ldr	r3, [r3, #12]
   1c8a8:	60d3      	str	r3, [r2, #12]
   1c8aa:	2b00      	cmp	r3, #0
   1c8ac:	d1e6      	bne.n	1c87c <log_register+0x54>
   1c8ae:	320c      	adds	r2, #12
   1c8b0:	4b10      	ldr	r3, [pc, #64]	; (1c8f4 <log_register+0xcc>)
   1c8b2:	605a      	str	r2, [r3, #4]
            return rc;
   1c8b4:	e7e2      	b.n	1c87c <log_register+0x54>
            STAILQ_REMOVE(&g_log_list, log, log, l_next);
   1c8b6:	68db      	ldr	r3, [r3, #12]
   1c8b8:	4a0e      	ldr	r2, [pc, #56]	; (1c8f4 <log_register+0xcc>)
   1c8ba:	6013      	str	r3, [r2, #0]
   1c8bc:	2b00      	cmp	r3, #0
   1c8be:	d1dd      	bne.n	1c87c <log_register+0x54>
   1c8c0:	6052      	str	r2, [r2, #4]
   1c8c2:	e7db      	b.n	1c87c <log_register+0x54>
        rc = log_read_last_hdr(log, &hdr);
   1c8c4:	a901      	add	r1, sp, #4
   1c8c6:	4620      	mov	r0, r4
   1c8c8:	f7ff ff90 	bl	1c7ec <log_read_last_hdr>
        if (rc == 0) {
   1c8cc:	4605      	mov	r5, r0
   1c8ce:	b108      	cbz	r0, 1c8d4 <log_register+0xac>
    return (0);
   1c8d0:	2500      	movs	r5, #0
   1c8d2:	e7d3      	b.n	1c87c <log_register+0x54>
            OS_ENTER_CRITICAL(sr);
   1c8d4:	f7fd fffa 	bl	1a8cc <os_arch_save_sr>
            if (hdr.ue_index >= g_log_info.li_next_index) {
   1c8d8:	9b03      	ldr	r3, [sp, #12]
   1c8da:	4a07      	ldr	r2, [pc, #28]	; (1c8f8 <log_register+0xd0>)
   1c8dc:	6812      	ldr	r2, [r2, #0]
   1c8de:	4293      	cmp	r3, r2
   1c8e0:	d302      	bcc.n	1c8e8 <log_register+0xc0>
                g_log_info.li_next_index = hdr.ue_index + 1;
   1c8e2:	3301      	adds	r3, #1
   1c8e4:	4a04      	ldr	r2, [pc, #16]	; (1c8f8 <log_register+0xd0>)
   1c8e6:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
   1c8e8:	f7fd fff6 	bl	1a8d8 <os_arch_restore_sr>
   1c8ec:	e7c6      	b.n	1c87c <log_register+0x54>
   1c8ee:	bf00      	nop
   1c8f0:	10005014 	.word	0x10005014
   1c8f4:	100006a0 	.word	0x100006a0
   1c8f8:	1000500c 	.word	0x1000500c

0001c8fc <log_read>:
 * @return                      The number of bytes read; 0 on failure.
 */
int
log_read(struct log *log, const void *dptr, void *buf, uint16_t off,
         uint16_t len)
{
   1c8fc:	b530      	push	{r4, r5, lr}
   1c8fe:	b083      	sub	sp, #12
    int rc;

    rc = log->l_log->log_read(log, dptr, buf, off, len);
   1c900:	6844      	ldr	r4, [r0, #4]
   1c902:	6864      	ldr	r4, [r4, #4]
   1c904:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1c908:	9500      	str	r5, [sp, #0]
   1c90a:	47a0      	blx	r4

    return (rc);
}
   1c90c:	b003      	add	sp, #12
   1c90e:	bd30      	pop	{r4, r5, pc}

0001c910 <log_fill_current_img_hash>:
    hdr->ue_flags |= LOG_FLAGS_IMG_HASH;

    /* We have to account for LOG_IMG_HASHLEN bytes of hash */
    return imgr_get_current_hash(hdr->ue_imghash, LOG_IMG_HASHLEN);
#endif
    memset(hdr->ue_imghash, 0, LOG_IMG_HASHLEN);
   1c910:	2300      	movs	r3, #0
   1c912:	f8c0 300f 	str.w	r3, [r0, #15]

    return SYS_ENOTSUP;
}
   1c916:	f06f 000b 	mvn.w	r0, #11
   1c91a:	4770      	bx	lr

0001c91c <log_read_hdr_walk>:
{
   1c91c:	b510      	push	{r4, lr}
   1c91e:	b082      	sub	sp, #8
   1c920:	460b      	mov	r3, r1
   1c922:	4611      	mov	r1, r2
    arg = log_offset->lo_arg;
   1c924:	691c      	ldr	r4, [r3, #16]
    rc = log_read(log, dptr, arg->hdr, 0, LOG_BASE_ENTRY_HDR_SIZE);
   1c926:	6822      	ldr	r2, [r4, #0]
   1c928:	230f      	movs	r3, #15
   1c92a:	9300      	str	r3, [sp, #0]
   1c92c:	2300      	movs	r3, #0
   1c92e:	f7ff ffe5 	bl	1c8fc <log_read>
    if (rc >= LOG_BASE_ENTRY_HDR_SIZE) {
   1c932:	280e      	cmp	r0, #14
   1c934:	dd01      	ble.n	1c93a <log_read_hdr_walk+0x1e>
        arg->read_success = 1;
   1c936:	2301      	movs	r3, #1
   1c938:	6063      	str	r3, [r4, #4]
    if (arg->hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   1c93a:	6820      	ldr	r0, [r4, #0]
   1c93c:	7b83      	ldrb	r3, [r0, #14]
   1c93e:	f013 0f10 	tst.w	r3, #16
   1c942:	d102      	bne.n	1c94a <log_read_hdr_walk+0x2e>
}
   1c944:	2001      	movs	r0, #1
   1c946:	b002      	add	sp, #8
   1c948:	bd10      	pop	{r4, pc}
        rc = log_fill_current_img_hash(arg->hdr);
   1c94a:	f7ff ffe1 	bl	1c910 <log_fill_current_img_hash>
        if (!rc || rc == SYS_ENOTSUP) {
   1c94e:	b110      	cbz	r0, 1c956 <log_read_hdr_walk+0x3a>
   1c950:	f110 0f0c 	cmn.w	r0, #12
   1c954:	d1f6      	bne.n	1c944 <log_read_hdr_walk+0x28>
            arg->read_success = 1;
   1c956:	2301      	movs	r3, #1
   1c958:	6063      	str	r3, [r4, #4]
   1c95a:	e7f3      	b.n	1c944 <log_read_hdr_walk+0x28>

0001c95c <log_console_read>:
log_console_read(struct log *log, const void *dptr, void *buf, uint16_t offset,
        uint16_t len)
{
    /* You don't read console, console read you */
    return (OS_EINVAL);
}
   1c95c:	2002      	movs	r0, #2
   1c95e:	4770      	bx	lr

0001c960 <log_console_walk>:
log_console_walk(struct log *log, log_walk_func_t walk_func,
        struct log_offset *log_offset)
{
    /* You don't walk console, console walk you. */
    return (OS_EINVAL);
}
   1c960:	2002      	movs	r0, #2
   1c962:	4770      	bx	lr

0001c964 <log_console_flush>:
static int
log_console_flush(struct log *log)
{
    /* You don't flush console, console flush you. */
    return (OS_EINVAL);
}
   1c964:	2002      	movs	r0, #2
   1c966:	4770      	bx	lr

0001c968 <log_console_print_hdr>:
{
   1c968:	b510      	push	{r4, lr}
   1c96a:	b082      	sub	sp, #8
   1c96c:	4604      	mov	r4, r0
                   hdr->ue_ts, hdr->ue_module, hdr->ue_level);
   1c96e:	7b03      	ldrb	r3, [r0, #12]
   1c970:	7b42      	ldrb	r2, [r0, #13]
    console_printf("[ts=%lluus, mod=%u level=%u ",
   1c972:	9201      	str	r2, [sp, #4]
   1c974:	9300      	str	r3, [sp, #0]
   1c976:	6802      	ldr	r2, [r0, #0]
   1c978:	6843      	ldr	r3, [r0, #4]
   1c97a:	480a      	ldr	r0, [pc, #40]	; (1c9a4 <log_console_print_hdr+0x3c>)
   1c97c:	f7ff fbd6 	bl	1c12c <console_printf>
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   1c980:	7ba3      	ldrb	r3, [r4, #14]
   1c982:	f013 0f10 	tst.w	r3, #16
   1c986:	d104      	bne.n	1c992 <log_console_print_hdr+0x2a>
    console_printf("]");
   1c988:	4807      	ldr	r0, [pc, #28]	; (1c9a8 <log_console_print_hdr+0x40>)
   1c98a:	f7ff fbcf 	bl	1c12c <console_printf>
}
   1c98e:	b002      	add	sp, #8
   1c990:	bd10      	pop	{r4, pc}
                       hdr->ue_imghash[2], hdr->ue_imghash[3]);
   1c992:	7ca3      	ldrb	r3, [r4, #18]
        console_printf("ih=0x%x%x%x%x", hdr->ue_imghash[0], hdr->ue_imghash[1],
   1c994:	9300      	str	r3, [sp, #0]
   1c996:	7c63      	ldrb	r3, [r4, #17]
   1c998:	7c22      	ldrb	r2, [r4, #16]
   1c99a:	7be1      	ldrb	r1, [r4, #15]
   1c99c:	4803      	ldr	r0, [pc, #12]	; (1c9ac <log_console_print_hdr+0x44>)
   1c99e:	f7ff fbc5 	bl	1c12c <console_printf>
   1c9a2:	e7f1      	b.n	1c988 <log_console_print_hdr+0x20>
   1c9a4:	00033dd0 	.word	0x00033dd0
   1c9a8:	000325d4 	.word	0x000325d4
   1c9ac:	00033df0 	.word	0x00033df0

0001c9b0 <log_console_dump_cbor_entry>:
{
   1c9b0:	b530      	push	{r4, r5, lr}
   1c9b2:	b095      	sub	sp, #84	; 0x54
   1c9b4:	460a      	mov	r2, r1
    cbor_buf_reader_init(&cbor_buf_reader, dptr, len);
   1c9b6:	4601      	mov	r1, r0
   1c9b8:	a805      	add	r0, sp, #20
   1c9ba:	f00e fa0b 	bl	2add4 <cbor_buf_reader_init>
    cbor_parser_init(&cbor_buf_reader.r, 0, &cbor_parser, &cbor_value);
   1c9be:	ad0d      	add	r5, sp, #52	; 0x34
   1c9c0:	462b      	mov	r3, r5
   1c9c2:	aa11      	add	r2, sp, #68	; 0x44
   1c9c4:	2100      	movs	r1, #0
   1c9c6:	a805      	add	r0, sp, #20
   1c9c8:	f00e fcd0 	bl	2b36c <cbor_parser_init>

/* Human-readable (dump) API */
CBOR_API CborError cbor_value_to_pretty_advance(FILE *out, CborValue *value);
CBOR_INLINE_API CborError cbor_value_to_pretty(FILE *out, const CborValue *value)
{
    CborValue copy = *value;
   1c9cc:	ac01      	add	r4, sp, #4
   1c9ce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1c9d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return cbor_value_to_pretty_advance(out, &copy);
   1c9d6:	4621      	mov	r1, r4
   1c9d8:	4b05      	ldr	r3, [pc, #20]	; (1c9f0 <log_console_dump_cbor_entry+0x40>)
   1c9da:	6818      	ldr	r0, [r3, #0]
   1c9dc:	f00f f930 	bl	2bc40 <cbor_value_to_pretty_advance>
    console_write("\n", 1);
   1c9e0:	2101      	movs	r1, #1
   1c9e2:	4804      	ldr	r0, [pc, #16]	; (1c9f4 <log_console_dump_cbor_entry+0x44>)
   1c9e4:	f7ff f9ea 	bl	1bdbc <console_write>
}
   1c9e8:	2000      	movs	r0, #0
   1c9ea:	b015      	add	sp, #84	; 0x54
   1c9ec:	bd30      	pop	{r4, r5, pc}
   1c9ee:	bf00      	nop
   1c9f0:	00033dbc 	.word	0x00033dbc
   1c9f4:	0002ff28 	.word	0x0002ff28

0001c9f8 <log_console_append_body>:
{
   1c9f8:	b570      	push	{r4, r5, r6, lr}
   1c9fa:	460c      	mov	r4, r1
   1c9fc:	4616      	mov	r6, r2
   1c9fe:	461d      	mov	r5, r3
    if (!console_is_init()) {
   1ca00:	f7ff fb22 	bl	1c048 <console_is_init>
   1ca04:	b158      	cbz	r0, 1ca1e <log_console_append_body+0x26>
    if (!console_is_midline) {
   1ca06:	4b0b      	ldr	r3, [pc, #44]	; (1ca34 <log_console_append_body+0x3c>)
   1ca08:	681b      	ldr	r3, [r3, #0]
   1ca0a:	b153      	cbz	r3, 1ca22 <log_console_append_body+0x2a>
    if (hdr->ue_etype != LOG_ETYPE_CBOR) {
   1ca0c:	7ba3      	ldrb	r3, [r4, #14]
   1ca0e:	f003 030f 	and.w	r3, r3, #15
   1ca12:	2b01      	cmp	r3, #1
   1ca14:	d009      	beq.n	1ca2a <log_console_append_body+0x32>
        console_write(body, body_len);
   1ca16:	4629      	mov	r1, r5
   1ca18:	4630      	mov	r0, r6
   1ca1a:	f7ff f9cf 	bl	1bdbc <console_write>
}
   1ca1e:	2000      	movs	r0, #0
   1ca20:	bd70      	pop	{r4, r5, r6, pc}
        log_console_print_hdr(hdr);
   1ca22:	4620      	mov	r0, r4
   1ca24:	f7ff ffa0 	bl	1c968 <log_console_print_hdr>
   1ca28:	e7f0      	b.n	1ca0c <log_console_append_body+0x14>
        log_console_dump_cbor_entry(body, body_len);
   1ca2a:	b2a9      	uxth	r1, r5
   1ca2c:	4630      	mov	r0, r6
   1ca2e:	f7ff ffbf 	bl	1c9b0 <log_console_dump_cbor_entry>
   1ca32:	e7f4      	b.n	1ca1e <log_console_append_body+0x26>
   1ca34:	10004f58 	.word	0x10004f58

0001ca38 <log_console_append>:
{
   1ca38:	b570      	push	{r4, r5, r6, lr}
   1ca3a:	4605      	mov	r5, r0
   1ca3c:	460c      	mov	r4, r1
   1ca3e:	4616      	mov	r6, r2
    hdr_len = log_hdr_len(buf);
   1ca40:	4608      	mov	r0, r1
   1ca42:	f7ff fe99 	bl	1c778 <log_hdr_len>
    return log_console_append_body(log, buf, (uint8_t *)buf + hdr_len,
   1ca46:	1a33      	subs	r3, r6, r0
   1ca48:	1822      	adds	r2, r4, r0
   1ca4a:	4621      	mov	r1, r4
   1ca4c:	4628      	mov	r0, r5
   1ca4e:	f7ff ffd3 	bl	1c9f8 <log_console_append_body>
}
   1ca52:	bd70      	pop	{r4, r5, r6, pc}

0001ca54 <log_console_get>:
}
   1ca54:	4800      	ldr	r0, [pc, #0]	; (1ca58 <log_console_get+0x4>)
   1ca56:	4770      	bx	lr
   1ca58:	10005018 	.word	0x10005018

0001ca5c <log_console_init>:
    .log_flush = log_console_flush,
};

void
log_console_init(void)
{
   1ca5c:	b510      	push	{r4, lr}
   1ca5e:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1ca60:	4b12      	ldr	r3, [pc, #72]	; (1caac <log_console_init+0x50>)
   1ca62:	781b      	ldrb	r3, [r3, #0]
   1ca64:	b153      	cbz	r3, 1ca7c <log_console_init+0x20>

    rc = log_register("console", &log_console, &log_console_handler, NULL,
   1ca66:	2301      	movs	r3, #1
   1ca68:	9300      	str	r3, [sp, #0]
   1ca6a:	2300      	movs	r3, #0
   1ca6c:	4a10      	ldr	r2, [pc, #64]	; (1cab0 <log_console_init+0x54>)
   1ca6e:	4911      	ldr	r1, [pc, #68]	; (1cab4 <log_console_init+0x58>)
   1ca70:	4811      	ldr	r0, [pc, #68]	; (1cab8 <log_console_init+0x5c>)
   1ca72:	f7ff fed9 	bl	1c828 <log_register>
                      MYNEWT_VAL(LOG_LEVEL));
    SYSINIT_PANIC_ASSERT(rc == 0);
   1ca76:	b958      	cbnz	r0, 1ca90 <log_console_init+0x34>
}
   1ca78:	b002      	add	sp, #8
   1ca7a:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1ca7c:	f7f7 fe42 	bl	14704 <hal_debugger_connected>
   1ca80:	b100      	cbz	r0, 1ca84 <log_console_init+0x28>
   1ca82:	be01      	bkpt	0x0001
   1ca84:	2300      	movs	r3, #0
   1ca86:	461a      	mov	r2, r3
   1ca88:	4619      	mov	r1, r3
   1ca8a:	4618      	mov	r0, r3
   1ca8c:	f7fc f94a 	bl	18d24 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1ca90:	f7f7 fe38 	bl	14704 <hal_debugger_connected>
   1ca94:	b100      	cbz	r0, 1ca98 <log_console_init+0x3c>
   1ca96:	be01      	bkpt	0x0001
   1ca98:	2000      	movs	r0, #0
   1ca9a:	9000      	str	r0, [sp, #0]
   1ca9c:	4b07      	ldr	r3, [pc, #28]	; (1cabc <log_console_init+0x60>)
   1ca9e:	681c      	ldr	r4, [r3, #0]
   1caa0:	4603      	mov	r3, r0
   1caa2:	4602      	mov	r2, r0
   1caa4:	4601      	mov	r1, r0
   1caa6:	47a0      	blx	r4
}
   1caa8:	e7e6      	b.n	1ca78 <log_console_init+0x1c>
   1caaa:	bf00      	nop
   1caac:	100055a0 	.word	0x100055a0
   1cab0:	00033e08 	.word	0x00033e08
   1cab4:	10005018 	.word	0x10005018
   1cab8:	00033e00 	.word	0x00033e00
   1cabc:	100006b4 	.word	0x100006b4

0001cac0 <log_level_get>:
uint8_t
log_level_get(uint8_t module)
{
    uint8_t byte;

    byte = log_level_map[module / 2];
   1cac0:	0843      	lsrs	r3, r0, #1
   1cac2:	4a05      	ldr	r2, [pc, #20]	; (1cad8 <log_level_get+0x18>)
   1cac4:	5cd3      	ldrb	r3, [r2, r3]
    if (module % 2 == 0) {
   1cac6:	f010 0f01 	tst.w	r0, #1
   1caca:	d102      	bne.n	1cad2 <log_level_get+0x12>
        return byte & 0x0f;
   1cacc:	f003 000f 	and.w	r0, r3, #15
   1cad0:	4770      	bx	lr
    } else {
        return byte >> 4;
   1cad2:	0918      	lsrs	r0, r3, #4
    }
}
   1cad4:	4770      	bx	lr
   1cad6:	bf00      	nop
   1cad8:	10005034 	.word	0x10005034

0001cadc <modlog_find_by_module>:
    return cur;
}

static struct modlog_mapping *
modlog_find_by_module(uint8_t module, struct modlog_mapping **out_prev)
{
   1cadc:	b410      	push	{r4}
   1cade:	4602      	mov	r2, r0
    struct modlog_mapping *prev;
    struct modlog_mapping *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1cae0:	4b07      	ldr	r3, [pc, #28]	; (1cb00 <modlog_find_by_module+0x24>)
   1cae2:	6818      	ldr	r0, [r3, #0]
    prev = NULL;
   1cae4:	2400      	movs	r4, #0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1cae6:	e001      	b.n	1caec <modlog_find_by_module+0x10>
        if (cur->desc.module > module) {
            cur = NULL;
            break;
        }

        prev = cur;
   1cae8:	4604      	mov	r4, r0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1caea:	6800      	ldr	r0, [r0, #0]
   1caec:	b120      	cbz	r0, 1caf8 <modlog_find_by_module+0x1c>
        if (cur->desc.module == module) {
   1caee:	7a43      	ldrb	r3, [r0, #9]
   1caf0:	4293      	cmp	r3, r2
   1caf2:	d001      	beq.n	1caf8 <modlog_find_by_module+0x1c>
        if (cur->desc.module > module) {
   1caf4:	d9f8      	bls.n	1cae8 <modlog_find_by_module+0xc>
            cur = NULL;
   1caf6:	2000      	movs	r0, #0
    }

    if (out_prev != NULL) {
   1caf8:	b101      	cbz	r1, 1cafc <modlog_find_by_module+0x20>
        *out_prev = prev;
   1cafa:	600c      	str	r4, [r1, #0]
    }

    return cur;
}
   1cafc:	bc10      	pop	{r4}
   1cafe:	4770      	bx	lr
   1cb00:	10005194 	.word	0x10005194

0001cb04 <modlog_insert>:

static void
modlog_insert(struct modlog_mapping *mm)
{
   1cb04:	b510      	push	{r4, lr}
   1cb06:	b082      	sub	sp, #8
   1cb08:	4604      	mov	r4, r0
    struct modlog_mapping *prev;

    modlog_find_by_module(mm->desc.module, &prev);
   1cb0a:	a901      	add	r1, sp, #4
   1cb0c:	7a40      	ldrb	r0, [r0, #9]
   1cb0e:	f7ff ffe5 	bl	1cadc <modlog_find_by_module>
    if (prev == NULL) {
   1cb12:	9b01      	ldr	r3, [sp, #4]
   1cb14:	b143      	cbz	r3, 1cb28 <modlog_insert+0x24>
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
    } else {
        SLIST_INSERT_AFTER(prev, mm, next);
   1cb16:	681b      	ldr	r3, [r3, #0]
   1cb18:	6023      	str	r3, [r4, #0]
   1cb1a:	9b01      	ldr	r3, [sp, #4]
   1cb1c:	601c      	str	r4, [r3, #0]
    }

    if (mm->desc.module == MODLOG_MODULE_DFLT) {
   1cb1e:	7a63      	ldrb	r3, [r4, #9]
   1cb20:	2bff      	cmp	r3, #255	; 0xff
   1cb22:	d006      	beq.n	1cb32 <modlog_insert+0x2e>
        modlog_first_dflt = mm;
    }
}
   1cb24:	b002      	add	sp, #8
   1cb26:	bd10      	pop	{r4, pc}
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
   1cb28:	4b03      	ldr	r3, [pc, #12]	; (1cb38 <modlog_insert+0x34>)
   1cb2a:	681a      	ldr	r2, [r3, #0]
   1cb2c:	6022      	str	r2, [r4, #0]
   1cb2e:	601c      	str	r4, [r3, #0]
   1cb30:	e7f5      	b.n	1cb1e <modlog_insert+0x1a>
        modlog_first_dflt = mm;
   1cb32:	4b02      	ldr	r3, [pc, #8]	; (1cb3c <modlog_insert+0x38>)
   1cb34:	601c      	str	r4, [r3, #0]
}
   1cb36:	e7f5      	b.n	1cb24 <modlog_insert+0x20>
   1cb38:	10005194 	.word	0x10005194
   1cb3c:	100050b4 	.word	0x100050b4

0001cb40 <modlog_alloc>:
{
   1cb40:	b508      	push	{r3, lr}
    mm = os_memblock_get(&modlog_mapping_pool);
   1cb42:	4805      	ldr	r0, [pc, #20]	; (1cb58 <modlog_alloc+0x18>)
   1cb44:	f7fd f995 	bl	19e72 <os_memblock_get>
    if (mm != NULL) {
   1cb48:	4603      	mov	r3, r0
   1cb4a:	b118      	cbz	r0, 1cb54 <modlog_alloc+0x14>
        *mm = (struct modlog_mapping) { 0 };
   1cb4c:	2200      	movs	r2, #0
   1cb4e:	6002      	str	r2, [r0, #0]
   1cb50:	6042      	str	r2, [r0, #4]
   1cb52:	6082      	str	r2, [r0, #8]
}
   1cb54:	4618      	mov	r0, r3
   1cb56:	bd08      	pop	{r3, pc}
   1cb58:	10005178 	.word	0x10005178

0001cb5c <modlog_infer_handle>:
{
   1cb5c:	b508      	push	{r3, lr}
    off = (uintptr_t)mm - (uintptr_t)modlog_mapping_buf;
   1cb5e:	4a13      	ldr	r2, [pc, #76]	; (1cbac <modlog_infer_handle+0x50>)
   1cb60:	1a82      	subs	r2, r0, r2
    idx = off / elem_sz;
   1cb62:	4813      	ldr	r0, [pc, #76]	; (1cbb0 <modlog_infer_handle+0x54>)
   1cb64:	fba0 3002 	umull	r3, r0, r0, r2
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   1cb68:	2abf      	cmp	r2, #191	; 0xbf
   1cb6a:	d80b      	bhi.n	1cb84 <modlog_infer_handle+0x28>
   1cb6c:	08c0      	lsrs	r0, r0, #3
    assert(off % elem_sz == 0);
   1cb6e:	4b10      	ldr	r3, [pc, #64]	; (1cbb0 <modlog_infer_handle+0x54>)
   1cb70:	fba3 1302 	umull	r1, r3, r3, r2
   1cb74:	08db      	lsrs	r3, r3, #3
   1cb76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1cb7a:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   1cb7e:	d10b      	bne.n	1cb98 <modlog_infer_handle+0x3c>
}
   1cb80:	b2c0      	uxtb	r0, r0
   1cb82:	bd08      	pop	{r3, pc}
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   1cb84:	f7f7 fdbe 	bl	14704 <hal_debugger_connected>
   1cb88:	b100      	cbz	r0, 1cb8c <modlog_infer_handle+0x30>
   1cb8a:	be01      	bkpt	0x0001
   1cb8c:	2300      	movs	r3, #0
   1cb8e:	461a      	mov	r2, r3
   1cb90:	4619      	mov	r1, r3
   1cb92:	4618      	mov	r0, r3
   1cb94:	f7fc f8c6 	bl	18d24 <__assert_func>
    assert(off % elem_sz == 0);
   1cb98:	f7f7 fdb4 	bl	14704 <hal_debugger_connected>
   1cb9c:	b100      	cbz	r0, 1cba0 <modlog_infer_handle+0x44>
   1cb9e:	be01      	bkpt	0x0001
   1cba0:	2300      	movs	r3, #0
   1cba2:	461a      	mov	r2, r3
   1cba4:	4619      	mov	r1, r3
   1cba6:	4618      	mov	r0, r3
   1cba8:	f7fc f8bc 	bl	18d24 <__assert_func>
   1cbac:	100050b8 	.word	0x100050b8
   1cbb0:	aaaaaaab 	.word	0xaaaaaaab

0001cbb4 <modlog_register_no_lock>:
modlog_register_no_lock(uint8_t module, struct log *log, uint8_t min_level,
                        uint8_t *out_handle)
{
    struct modlog_mapping *mm;

    if (log == NULL) {
   1cbb4:	b1c9      	cbz	r1, 1cbea <modlog_register_no_lock+0x36>
{
   1cbb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cbba:	4607      	mov	r7, r0
   1cbbc:	4616      	mov	r6, r2
   1cbbe:	461d      	mov	r5, r3
   1cbc0:	4688      	mov	r8, r1
        return SYS_EINVAL;
    }

    mm = modlog_alloc();
   1cbc2:	f7ff ffbd 	bl	1cb40 <modlog_alloc>
    if (mm == NULL) {
   1cbc6:	4604      	mov	r4, r0
   1cbc8:	b190      	cbz	r0, 1cbf0 <modlog_register_no_lock+0x3c>
        return SYS_ENOMEM;
    }

    mm->desc = (struct modlog_desc) {
        .log = log,
        .handle = modlog_infer_handle(mm),
   1cbca:	f7ff ffc7 	bl	1cb5c <modlog_infer_handle>
    mm->desc = (struct modlog_desc) {
   1cbce:	f8c4 8004 	str.w	r8, [r4, #4]
   1cbd2:	7220      	strb	r0, [r4, #8]
   1cbd4:	7267      	strb	r7, [r4, #9]
   1cbd6:	72a6      	strb	r6, [r4, #10]
        .module = module,
        .min_level = min_level,
    };

    modlog_insert(mm);
   1cbd8:	4620      	mov	r0, r4
   1cbda:	f7ff ff93 	bl	1cb04 <modlog_insert>

    if (out_handle != NULL) {
   1cbde:	b155      	cbz	r5, 1cbf6 <modlog_register_no_lock+0x42>
        *out_handle = mm->desc.handle;
   1cbe0:	7a23      	ldrb	r3, [r4, #8]
   1cbe2:	702b      	strb	r3, [r5, #0]
    }

    return 0;
   1cbe4:	2000      	movs	r0, #0
}
   1cbe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   1cbea:	f06f 0001 	mvn.w	r0, #1
}
   1cbee:	4770      	bx	lr
        return SYS_ENOMEM;
   1cbf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cbf4:	e7f7      	b.n	1cbe6 <modlog_register_no_lock+0x32>
    return 0;
   1cbf6:	2000      	movs	r0, #0
   1cbf8:	e7f5      	b.n	1cbe6 <modlog_register_no_lock+0x32>

0001cbfa <modlog_append_one>:
}

static int
modlog_append_one(struct modlog_mapping *mm, uint8_t module, uint8_t level,
                  uint8_t etype, void *data, uint16_t len)
{
   1cbfa:	b510      	push	{r4, lr}
   1cbfc:	b082      	sub	sp, #8
    int rc;

    if (level >= mm->desc.min_level) {
   1cbfe:	7a84      	ldrb	r4, [r0, #10]
   1cc00:	4294      	cmp	r4, r2
   1cc02:	d902      	bls.n	1cc0a <modlog_append_one+0x10>
    } else {
        LOG_STATS_INC(mm->desc.log, writes);
        LOG_STATS_INC(mm->desc.log, drops);
    }

    return 0;
   1cc04:	2000      	movs	r0, #0
}
   1cc06:	b002      	add	sp, #8
   1cc08:	bd10      	pop	{r4, pc}
        rc = log_append_body(mm->desc.log, module, level, etype, data, len);
   1cc0a:	f8bd 4014 	ldrh.w	r4, [sp, #20]
   1cc0e:	9401      	str	r4, [sp, #4]
   1cc10:	9c04      	ldr	r4, [sp, #16]
   1cc12:	9400      	str	r4, [sp, #0]
   1cc14:	6840      	ldr	r0, [r0, #4]
   1cc16:	f7ff fdb7 	bl	1c788 <log_append_body>
        if (rc != 0) {
   1cc1a:	2800      	cmp	r0, #0
   1cc1c:	d0f3      	beq.n	1cc06 <modlog_append_one+0xc>
            return SYS_EIO;
   1cc1e:	f06f 0004 	mvn.w	r0, #4
   1cc22:	e7f0      	b.n	1cc06 <modlog_append_one+0xc>

0001cc24 <modlog_append_no_lock>:

static int
modlog_append_no_lock(uint8_t module, uint8_t level, uint8_t etype,
                      void *data, uint16_t len)
{
   1cc24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cc28:	b083      	sub	sp, #12
   1cc2a:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
    struct modlog_mapping *mm;
    int rc;

    if (module == MODLOG_MODULE_DFLT) {
   1cc2e:	28ff      	cmp	r0, #255	; 0xff
   1cc30:	d030      	beq.n	1cc94 <modlog_append_no_lock+0x70>
   1cc32:	4605      	mov	r5, r0
   1cc34:	460e      	mov	r6, r1
   1cc36:	4617      	mov	r7, r2
   1cc38:	4698      	mov	r8, r3
        return SYS_EINVAL;
    }

    mm = modlog_find_by_module(module, NULL);
   1cc3a:	2100      	movs	r1, #0
   1cc3c:	f7ff ff4e 	bl	1cadc <modlog_find_by_module>
    if (mm != NULL) {
   1cc40:	4604      	mov	r4, r0
   1cc42:	b988      	cbnz	r0, 1cc68 <modlog_append_no_lock+0x44>
        }
        return 0;
    }

    /* No mappings match the specified module; write to the default set. */
    for (mm = modlog_first_dflt;
   1cc44:	4b17      	ldr	r3, [pc, #92]	; (1cca4 <modlog_append_no_lock+0x80>)
   1cc46:	681c      	ldr	r4, [r3, #0]
   1cc48:	b314      	cbz	r4, 1cc90 <modlog_append_no_lock+0x6c>
         mm != NULL;
         mm = SLIST_NEXT(mm, next)) {

        rc = modlog_append_one(mm, module, level, etype, data, len);
   1cc4a:	f8cd 9004 	str.w	r9, [sp, #4]
   1cc4e:	f8cd 8000 	str.w	r8, [sp]
   1cc52:	463b      	mov	r3, r7
   1cc54:	4632      	mov	r2, r6
   1cc56:	4629      	mov	r1, r5
   1cc58:	4620      	mov	r0, r4
   1cc5a:	f7ff ffce 	bl	1cbfa <modlog_append_one>
        if (rc != 0) {
   1cc5e:	4603      	mov	r3, r0
   1cc60:	b9e0      	cbnz	r0, 1cc9c <modlog_append_no_lock+0x78>
         mm = SLIST_NEXT(mm, next)) {
   1cc62:	6824      	ldr	r4, [r4, #0]
   1cc64:	e7f0      	b.n	1cc48 <modlog_append_no_lock+0x24>
            mm = SLIST_NEXT(mm, next);
   1cc66:	6824      	ldr	r4, [r4, #0]
        while (mm != NULL && mm->desc.module == module) {
   1cc68:	b1bc      	cbz	r4, 1cc9a <modlog_append_no_lock+0x76>
   1cc6a:	7a60      	ldrb	r0, [r4, #9]
   1cc6c:	42a8      	cmp	r0, r5
   1cc6e:	d10d      	bne.n	1cc8c <modlog_append_no_lock+0x68>
            rc = modlog_append_one(mm, module, level, etype, data, len);
   1cc70:	f8cd 9004 	str.w	r9, [sp, #4]
   1cc74:	f8cd 8000 	str.w	r8, [sp]
   1cc78:	463b      	mov	r3, r7
   1cc7a:	4632      	mov	r2, r6
   1cc7c:	4629      	mov	r1, r5
   1cc7e:	4620      	mov	r0, r4
   1cc80:	f7ff ffbb 	bl	1cbfa <modlog_append_one>
            if (rc != 0) {
   1cc84:	4603      	mov	r3, r0
   1cc86:	2800      	cmp	r0, #0
   1cc88:	d0ed      	beq.n	1cc66 <modlog_append_no_lock+0x42>
   1cc8a:	e007      	b.n	1cc9c <modlog_append_no_lock+0x78>
        return 0;
   1cc8c:	2300      	movs	r3, #0
   1cc8e:	e005      	b.n	1cc9c <modlog_append_no_lock+0x78>
            return rc;
        }
    }

    return 0;
   1cc90:	2300      	movs	r3, #0
   1cc92:	e003      	b.n	1cc9c <modlog_append_no_lock+0x78>
        return SYS_EINVAL;
   1cc94:	f06f 0301 	mvn.w	r3, #1
   1cc98:	e000      	b.n	1cc9c <modlog_append_no_lock+0x78>
        return 0;
   1cc9a:	2300      	movs	r3, #0
}
   1cc9c:	4618      	mov	r0, r3
   1cc9e:	b003      	add	sp, #12
   1cca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cca4:	100050b4 	.word	0x100050b4

0001cca8 <modlog_register>:
}

int
modlog_register(uint8_t module, struct log *log, uint8_t min_level,
                uint8_t *out_handle)
{
   1cca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ccac:	4604      	mov	r4, r0
   1ccae:	460d      	mov	r5, r1
   1ccb0:	4616      	mov	r6, r2
   1ccb2:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_write(&modlog_rwl);
   1ccb4:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1ccd8 <modlog_register+0x30>
   1ccb8:	4640      	mov	r0, r8
   1ccba:	f001 fdc4 	bl	1e846 <rwlock_acquire_write>
    rc = modlog_register_no_lock(module, log, min_level, out_handle);
   1ccbe:	463b      	mov	r3, r7
   1ccc0:	4632      	mov	r2, r6
   1ccc2:	4629      	mov	r1, r5
   1ccc4:	4620      	mov	r0, r4
   1ccc6:	f7ff ff75 	bl	1cbb4 <modlog_register_no_lock>
   1ccca:	4604      	mov	r4, r0
    rwlock_release_write(&modlog_rwl);
   1cccc:	4640      	mov	r0, r8
   1ccce:	f001 fde4 	bl	1e89a <rwlock_release_write>

    return rc;
}
   1ccd2:	4620      	mov	r0, r4
   1ccd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ccd8:	10005198 	.word	0x10005198

0001ccdc <modlog_append>:
}

int
modlog_append(uint8_t module, uint8_t level, uint8_t etype,
              void *data, uint16_t len)
{
   1ccdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cce0:	b082      	sub	sp, #8
   1cce2:	4604      	mov	r4, r0
   1cce4:	460d      	mov	r5, r1
   1cce6:	4616      	mov	r6, r2
   1cce8:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_read(&modlog_rwl);
   1ccea:	f8df 802c 	ldr.w	r8, [pc, #44]	; 1cd18 <modlog_append+0x3c>
   1ccee:	4640      	mov	r0, r8
   1ccf0:	f001 fd69 	bl	1e7c6 <rwlock_acquire_read>
    rc = modlog_append_no_lock(module, level, etype, data, len);
   1ccf4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1ccf8:	9300      	str	r3, [sp, #0]
   1ccfa:	463b      	mov	r3, r7
   1ccfc:	4632      	mov	r2, r6
   1ccfe:	4629      	mov	r1, r5
   1cd00:	4620      	mov	r0, r4
   1cd02:	f7ff ff8f 	bl	1cc24 <modlog_append_no_lock>
   1cd06:	4604      	mov	r4, r0
    rwlock_release_read(&modlog_rwl);
   1cd08:	4640      	mov	r0, r8
   1cd0a:	f001 fd89 	bl	1e820 <rwlock_release_read>

    return rc;
}
   1cd0e:	4620      	mov	r0, r4
   1cd10:	b002      	add	sp, #8
   1cd12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cd16:	bf00      	nop
   1cd18:	10005198 	.word	0x10005198

0001cd1c <modlog_printf>:
    return rc;
}

void
modlog_printf(uint8_t module, uint8_t level, const char *msg, ...)
{
   1cd1c:	b40c      	push	{r2, r3}
   1cd1e:	b530      	push	{r4, r5, lr}
   1cd20:	b0a5      	sub	sp, #148	; 0x94
   1cd22:	4604      	mov	r4, r0
   1cd24:	460d      	mov	r5, r1
   1cd26:	ab28      	add	r3, sp, #160	; 0xa0
   1cd28:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    char buf[MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)];
    int len;

    va_start(args, msg);
   1cd2c:	9323      	str	r3, [sp, #140]	; 0x8c
    len = vsnprintf(buf, MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN), msg, args);
   1cd2e:	2180      	movs	r1, #128	; 0x80
   1cd30:	a803      	add	r0, sp, #12
   1cd32:	f7fe fb83 	bl	1b43c <vsnprintf>
    va_end(args);

    if (len >= MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)) {
   1cd36:	287f      	cmp	r0, #127	; 0x7f
   1cd38:	dd00      	ble.n	1cd3c <modlog_printf+0x20>
        len = MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN) - 1;
   1cd3a:	207f      	movs	r0, #127	; 0x7f
    }

    modlog_append(module, level, LOG_ETYPE_STRING, buf, len);
   1cd3c:	b280      	uxth	r0, r0
   1cd3e:	9000      	str	r0, [sp, #0]
   1cd40:	ab03      	add	r3, sp, #12
   1cd42:	2200      	movs	r2, #0
   1cd44:	4629      	mov	r1, r5
   1cd46:	4620      	mov	r0, r4
   1cd48:	f7ff ffc8 	bl	1ccdc <modlog_append>
}
   1cd4c:	b025      	add	sp, #148	; 0x94
   1cd4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1cd52:	b002      	add	sp, #8
   1cd54:	4770      	bx	lr
	...

0001cd58 <modlog_init>:

void
modlog_init(void)
{
   1cd58:	b510      	push	{r4, lr}
   1cd5a:	b082      	sub	sp, #8
    int rc;

    SYSINIT_ASSERT_ACTIVE();
   1cd5c:	4b28      	ldr	r3, [pc, #160]	; (1ce00 <modlog_init+0xa8>)
   1cd5e:	781b      	ldrb	r3, [r3, #0]
   1cd60:	b1e3      	cbz	r3, 1cd9c <modlog_init+0x44>

    rc = os_mempool_init(&modlog_mapping_pool, MYNEWT_VAL(MODLOG_MAX_MAPPINGS),
   1cd62:	4b28      	ldr	r3, [pc, #160]	; (1ce04 <modlog_init+0xac>)
   1cd64:	9300      	str	r3, [sp, #0]
   1cd66:	4b28      	ldr	r3, [pc, #160]	; (1ce08 <modlog_init+0xb0>)
   1cd68:	220c      	movs	r2, #12
   1cd6a:	2110      	movs	r1, #16
   1cd6c:	4827      	ldr	r0, [pc, #156]	; (1ce0c <modlog_init+0xb4>)
   1cd6e:	f7fd f849 	bl	19e04 <os_mempool_init>
                         sizeof (struct modlog_mapping), modlog_mapping_buf,
                         "modlog_mapping_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   1cd72:	b9e8      	cbnz	r0, 1cdb0 <modlog_init+0x58>

    SLIST_INIT(&modlog_mappings);
   1cd74:	2300      	movs	r3, #0
   1cd76:	4a26      	ldr	r2, [pc, #152]	; (1ce10 <modlog_init+0xb8>)
   1cd78:	6013      	str	r3, [r2, #0]
    modlog_first_dflt = NULL;
   1cd7a:	4a26      	ldr	r2, [pc, #152]	; (1ce14 <modlog_init+0xbc>)
   1cd7c:	6013      	str	r3, [r2, #0]

    rc = rwlock_init(&modlog_rwl);
   1cd7e:	4826      	ldr	r0, [pc, #152]	; (1ce18 <modlog_init+0xc0>)
   1cd80:	f001 fd9a 	bl	1e8b8 <rwlock_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1cd84:	bb08      	cbnz	r0, 1cdca <modlog_init+0x72>

    /* Register the default console mapping if configured. */
#if MYNEWT_VAL(MODLOG_CONSOLE_DFLT)
    rc = modlog_register(MODLOG_MODULE_DFLT, log_console_get(),
   1cd86:	f7ff fe65 	bl	1ca54 <log_console_get>
   1cd8a:	4601      	mov	r1, r0
   1cd8c:	2300      	movs	r3, #0
   1cd8e:	461a      	mov	r2, r3
   1cd90:	20ff      	movs	r0, #255	; 0xff
   1cd92:	f7ff ff89 	bl	1cca8 <modlog_register>
                         LOG_LEVEL_DEBUG, NULL);
    SYSINIT_PANIC_ASSERT(rc == 0);
   1cd96:	bb28      	cbnz	r0, 1cde4 <modlog_init+0x8c>
#endif
}
   1cd98:	b002      	add	sp, #8
   1cd9a:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1cd9c:	f7f7 fcb2 	bl	14704 <hal_debugger_connected>
   1cda0:	b100      	cbz	r0, 1cda4 <modlog_init+0x4c>
   1cda2:	be01      	bkpt	0x0001
   1cda4:	2300      	movs	r3, #0
   1cda6:	461a      	mov	r2, r3
   1cda8:	4619      	mov	r1, r3
   1cdaa:	4618      	mov	r0, r3
   1cdac:	f7fb ffba 	bl	18d24 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1cdb0:	f7f7 fca8 	bl	14704 <hal_debugger_connected>
   1cdb4:	b100      	cbz	r0, 1cdb8 <modlog_init+0x60>
   1cdb6:	be01      	bkpt	0x0001
   1cdb8:	2000      	movs	r0, #0
   1cdba:	9000      	str	r0, [sp, #0]
   1cdbc:	4b17      	ldr	r3, [pc, #92]	; (1ce1c <modlog_init+0xc4>)
   1cdbe:	681c      	ldr	r4, [r3, #0]
   1cdc0:	4603      	mov	r3, r0
   1cdc2:	4602      	mov	r2, r0
   1cdc4:	4601      	mov	r1, r0
   1cdc6:	47a0      	blx	r4
   1cdc8:	e7d4      	b.n	1cd74 <modlog_init+0x1c>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1cdca:	f7f7 fc9b 	bl	14704 <hal_debugger_connected>
   1cdce:	b100      	cbz	r0, 1cdd2 <modlog_init+0x7a>
   1cdd0:	be01      	bkpt	0x0001
   1cdd2:	2000      	movs	r0, #0
   1cdd4:	9000      	str	r0, [sp, #0]
   1cdd6:	4b11      	ldr	r3, [pc, #68]	; (1ce1c <modlog_init+0xc4>)
   1cdd8:	681c      	ldr	r4, [r3, #0]
   1cdda:	4603      	mov	r3, r0
   1cddc:	4602      	mov	r2, r0
   1cdde:	4601      	mov	r1, r0
   1cde0:	47a0      	blx	r4
   1cde2:	e7d0      	b.n	1cd86 <modlog_init+0x2e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1cde4:	f7f7 fc8e 	bl	14704 <hal_debugger_connected>
   1cde8:	b100      	cbz	r0, 1cdec <modlog_init+0x94>
   1cdea:	be01      	bkpt	0x0001
   1cdec:	2000      	movs	r0, #0
   1cdee:	9000      	str	r0, [sp, #0]
   1cdf0:	4b0a      	ldr	r3, [pc, #40]	; (1ce1c <modlog_init+0xc4>)
   1cdf2:	681c      	ldr	r4, [r3, #0]
   1cdf4:	4603      	mov	r3, r0
   1cdf6:	4602      	mov	r2, r0
   1cdf8:	4601      	mov	r1, r0
   1cdfa:	47a0      	blx	r4
}
   1cdfc:	e7cc      	b.n	1cd98 <modlog_init+0x40>
   1cdfe:	bf00      	nop
   1ce00:	100055a0 	.word	0x100055a0
   1ce04:	00033e34 	.word	0x00033e34
   1ce08:	100050b8 	.word	0x100050b8
   1ce0c:	10005178 	.word	0x10005178
   1ce10:	10005194 	.word	0x10005194
   1ce14:	100050b4 	.word	0x100050b4
   1ce18:	10005198 	.word	0x10005198
   1ce1c:	100006b4 	.word	0x100006b4

0001ce20 <get_prompt>:
    console_line_queue_set(shell_evq);
}

static const char *
get_prompt(void)
{
   1ce20:	b508      	push	{r3, lr}
    const char *str;

    if (app_prompt_handler) {
   1ce22:	4b09      	ldr	r3, [pc, #36]	; (1ce48 <get_prompt+0x28>)
   1ce24:	681b      	ldr	r3, [r3, #0]
   1ce26:	b113      	cbz	r3, 1ce2e <get_prompt+0xe>

        str = app_prompt_handler();
   1ce28:	4798      	blx	r3
        if (str) {
   1ce2a:	b100      	cbz	r0, 1ce2e <get_prompt+0xe>
    if (default_module != -1) {
        return shell_modules[default_module].name;
    }

    return prompt;
}
   1ce2c:	bd08      	pop	{r3, pc}
    if (default_module != -1) {
   1ce2e:	4b07      	ldr	r3, [pc, #28]	; (1ce4c <get_prompt+0x2c>)
   1ce30:	681b      	ldr	r3, [r3, #0]
   1ce32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1ce36:	d003      	beq.n	1ce40 <get_prompt+0x20>
        return shell_modules[default_module].name;
   1ce38:	4a05      	ldr	r2, [pc, #20]	; (1ce50 <get_prompt+0x30>)
   1ce3a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   1ce3e:	e7f5      	b.n	1ce2c <get_prompt+0xc>
    return prompt;
   1ce40:	4b04      	ldr	r3, [pc, #16]	; (1ce54 <get_prompt+0x34>)
   1ce42:	6818      	ldr	r0, [r3, #0]
   1ce44:	e7f2      	b.n	1ce2c <get_prompt+0xc>
   1ce46:	bf00      	nop
   1ce48:	100051cc 	.word	0x100051cc
   1ce4c:	100006a8 	.word	0x100006a8
   1ce50:	10005550 	.word	0x10005550
   1ce54:	1000552c 	.word	0x1000552c

0001ce58 <print_module_commands>:
    }
}

static void
print_module_commands(const int module, struct streamer *streamer)
{
   1ce58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ce5a:	4606      	mov	r6, r0
   1ce5c:	460d      	mov	r5, r1
    const struct shell_module *shell_module = &shell_modules[module];
    int i;

    streamer_printf(streamer, "help\n");
   1ce5e:	4914      	ldr	r1, [pc, #80]	; (1ceb0 <print_module_commands+0x58>)
   1ce60:	4628      	mov	r0, r5
   1ce62:	f001 fd46 	bl	1e8f2 <streamer_printf>

    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   1ce66:	2400      	movs	r4, #0
   1ce68:	e008      	b.n	1ce7c <print_module_commands+0x24>
        streamer_printf(streamer, "%-30s", shell_module->commands[i].sc_cmd);
        if (shell_module->commands[i].help &&
            shell_module->commands[i].help->summary) {
        
            streamer_printf(streamer, "%s",
   1ce6a:	4912      	ldr	r1, [pc, #72]	; (1ceb4 <print_module_commands+0x5c>)
   1ce6c:	4628      	mov	r0, r5
   1ce6e:	f001 fd40 	bl	1e8f2 <streamer_printf>
                            shell_module->commands[i].help->summary);
        }
        streamer_printf(streamer, "\n");
   1ce72:	4911      	ldr	r1, [pc, #68]	; (1ceb8 <print_module_commands+0x60>)
   1ce74:	4628      	mov	r0, r5
   1ce76:	f001 fd3c 	bl	1e8f2 <streamer_printf>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   1ce7a:	3401      	adds	r4, #1
   1ce7c:	4b0f      	ldr	r3, [pc, #60]	; (1cebc <print_module_commands+0x64>)
   1ce7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1ce82:	685b      	ldr	r3, [r3, #4]
   1ce84:	0127      	lsls	r7, r4, #4
   1ce86:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1ce8a:	689a      	ldr	r2, [r3, #8]
   1ce8c:	b17a      	cbz	r2, 1ceae <print_module_commands+0x56>
        streamer_printf(streamer, "%-30s", shell_module->commands[i].sc_cmd);
   1ce8e:	490c      	ldr	r1, [pc, #48]	; (1cec0 <print_module_commands+0x68>)
   1ce90:	4628      	mov	r0, r5
   1ce92:	f001 fd2e 	bl	1e8f2 <streamer_printf>
        if (shell_module->commands[i].help &&
   1ce96:	4b09      	ldr	r3, [pc, #36]	; (1cebc <print_module_commands+0x64>)
   1ce98:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1ce9c:	685b      	ldr	r3, [r3, #4]
   1ce9e:	443b      	add	r3, r7
   1cea0:	68db      	ldr	r3, [r3, #12]
   1cea2:	2b00      	cmp	r3, #0
   1cea4:	d0e5      	beq.n	1ce72 <print_module_commands+0x1a>
            shell_module->commands[i].help->summary) {
   1cea6:	681a      	ldr	r2, [r3, #0]
        if (shell_module->commands[i].help &&
   1cea8:	2a00      	cmp	r2, #0
   1ceaa:	d1de      	bne.n	1ce6a <print_module_commands+0x12>
   1ceac:	e7e1      	b.n	1ce72 <print_module_commands+0x1a>
    }
}
   1ceae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ceb0:	00033e48 	.word	0x00033e48
   1ceb4:	00030424 	.word	0x00030424
   1ceb8:	0002ff28 	.word	0x0002ff28
   1cebc:	10005550 	.word	0x10005550
   1cec0:	00033e50 	.word	0x00033e50

0001cec4 <print_modules>:
{
   1cec4:	b538      	push	{r3, r4, r5, lr}
   1cec6:	4605      	mov	r5, r0
    for (module = 0; module < num_of_shell_entities; module++) {
   1cec8:	2400      	movs	r4, #0
   1ceca:	e007      	b.n	1cedc <print_modules+0x18>
        streamer_printf(streamer, "%s\n", shell_modules[module].name);
   1cecc:	4b06      	ldr	r3, [pc, #24]	; (1cee8 <print_modules+0x24>)
   1cece:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   1ced2:	4906      	ldr	r1, [pc, #24]	; (1ceec <print_modules+0x28>)
   1ced4:	4628      	mov	r0, r5
   1ced6:	f001 fd0c 	bl	1e8f2 <streamer_printf>
    for (module = 0; module < num_of_shell_entities; module++) {
   1ceda:	3401      	adds	r4, #1
   1cedc:	4b04      	ldr	r3, [pc, #16]	; (1cef0 <print_modules+0x2c>)
   1cede:	681b      	ldr	r3, [r3, #0]
   1cee0:	429c      	cmp	r4, r3
   1cee2:	d3f3      	bcc.n	1cecc <print_modules+0x8>
}
   1cee4:	bd38      	pop	{r3, r4, r5, pc}
   1cee6:	bf00      	nop
   1cee8:	10005550 	.word	0x10005550
   1ceec:	00034108 	.word	0x00034108
   1cef0:	10005528 	.word	0x10005528

0001cef4 <print_command_params>:
{
   1cef4:	b570      	push	{r4, r5, r6, lr}
	const struct shell_cmd *shell_cmd = &shell_module->commands[command];
   1cef6:	4b0e      	ldr	r3, [pc, #56]	; (1cf30 <print_command_params+0x3c>)
   1cef8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   1cefc:	685d      	ldr	r5, [r3, #4]
   1cefe:	eb05 1501 	add.w	r5, r5, r1, lsl #4
	if (!(shell_cmd->help && shell_cmd->help->params)) {
   1cf02:	68eb      	ldr	r3, [r5, #12]
   1cf04:	b193      	cbz	r3, 1cf2c <print_command_params+0x38>
   1cf06:	4616      	mov	r6, r2
   1cf08:	689b      	ldr	r3, [r3, #8]
   1cf0a:	b17b      	cbz	r3, 1cf2c <print_command_params+0x38>
	for (i = 0; shell_cmd->help->params[i].param_name; i++) {
   1cf0c:	2400      	movs	r4, #0
   1cf0e:	e005      	b.n	1cf1c <print_command_params+0x28>
		streamer_printf(streamer, "%-30s%s\n",
   1cf10:	6843      	ldr	r3, [r0, #4]
   1cf12:	4908      	ldr	r1, [pc, #32]	; (1cf34 <print_command_params+0x40>)
   1cf14:	4630      	mov	r0, r6
   1cf16:	f001 fcec 	bl	1e8f2 <streamer_printf>
	for (i = 0; shell_cmd->help->params[i].param_name; i++) {
   1cf1a:	3401      	adds	r4, #1
   1cf1c:	68eb      	ldr	r3, [r5, #12]
   1cf1e:	689b      	ldr	r3, [r3, #8]
   1cf20:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
   1cf24:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   1cf28:	2a00      	cmp	r2, #0
   1cf2a:	d1f1      	bne.n	1cf10 <print_command_params+0x1c>
}
   1cf2c:	bd70      	pop	{r4, r5, r6, pc}
   1cf2e:	bf00      	nop
   1cf30:	10005550 	.word	0x10005550
   1cf34:	00033e58 	.word	0x00033e58

0001cf38 <get_destination_module>:
{
   1cf38:	b570      	push	{r4, r5, r6, lr}
   1cf3a:	4606      	mov	r6, r0
   1cf3c:	460d      	mov	r5, r1
    for (i = 0; i < num_of_shell_entities; i++) {
   1cf3e:	2400      	movs	r4, #0
   1cf40:	e007      	b.n	1cf52 <get_destination_module+0x1a>
            if (!strcmp(module_str, shell_modules[i].name)) {
   1cf42:	4b0e      	ldr	r3, [pc, #56]	; (1cf7c <get_destination_module+0x44>)
   1cf44:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   1cf48:	4630      	mov	r0, r6
   1cf4a:	f7fd feee 	bl	1ad2a <strcmp>
   1cf4e:	b190      	cbz	r0, 1cf76 <get_destination_module+0x3e>
    for (i = 0; i < num_of_shell_entities; i++) {
   1cf50:	3401      	adds	r4, #1
   1cf52:	4b0b      	ldr	r3, [pc, #44]	; (1cf80 <get_destination_module+0x48>)
   1cf54:	681b      	ldr	r3, [r3, #0]
   1cf56:	429c      	cmp	r4, r3
   1cf58:	d20b      	bcs.n	1cf72 <get_destination_module+0x3a>
        if (len < 0) {
   1cf5a:	2d00      	cmp	r5, #0
   1cf5c:	dbf1      	blt.n	1cf42 <get_destination_module+0xa>
            if (!strncmp(module_str, shell_modules[i].name, len)) {
   1cf5e:	462a      	mov	r2, r5
   1cf60:	4b06      	ldr	r3, [pc, #24]	; (1cf7c <get_destination_module+0x44>)
   1cf62:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   1cf66:	4630      	mov	r0, r6
   1cf68:	f011 fdf7 	bl	2eb5a <strncmp>
   1cf6c:	2800      	cmp	r0, #0
   1cf6e:	d1ef      	bne.n	1cf50 <get_destination_module+0x18>
   1cf70:	e001      	b.n	1cf76 <get_destination_module+0x3e>
    return -1;
   1cf72:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   1cf76:	4620      	mov	r0, r4
   1cf78:	bd70      	pop	{r4, r5, r6, pc}
   1cf7a:	bf00      	nop
   1cf7c:	10005550 	.word	0x10005550
   1cf80:	10005528 	.word	0x10005528

0001cf84 <set_default_module>:
static const struct shell_cmd shell_cmd_help =
    SHELL_CMD_EXT("help", show_help, NULL);

static int
set_default_module(const char *name)
{
   1cf84:	b508      	push	{r3, lr}
    int module;

    module = get_destination_module(name, -1);
   1cf86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cf8a:	f7ff ffd5 	bl	1cf38 <get_destination_module>

    if (module == -1) {
   1cf8e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1cf92:	d002      	beq.n	1cf9a <set_default_module+0x16>
        return -1;
    }

    default_module = module;
   1cf94:	4b01      	ldr	r3, [pc, #4]	; (1cf9c <set_default_module+0x18>)
   1cf96:	6018      	str	r0, [r3, #0]

    return 0;
   1cf98:	2000      	movs	r0, #0
}
   1cf9a:	bd08      	pop	{r3, pc}
   1cf9c:	100006a8 	.word	0x100006a8

0001cfa0 <select_module>:

static int
select_module(const struct shell_cmd *cmd, int argc, char *argv[],
              struct streamer *streamer)
{
   1cfa0:	b508      	push	{r3, lr}
    if (argc == 1) {
   1cfa2:	2901      	cmp	r1, #1
   1cfa4:	d105      	bne.n	1cfb2 <select_module+0x12>
        default_module = -1;
   1cfa6:	4b05      	ldr	r3, [pc, #20]	; (1cfbc <select_module+0x1c>)
   1cfa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cfac:	601a      	str	r2, [r3, #0]
    } else {
        set_default_module(argv[1]);
    }

    return 0;
}
   1cfae:	2000      	movs	r0, #0
   1cfb0:	bd08      	pop	{r3, pc}
        set_default_module(argv[1]);
   1cfb2:	6850      	ldr	r0, [r2, #4]
   1cfb4:	f7ff ffe6 	bl	1cf84 <set_default_module>
   1cfb8:	e7f9      	b.n	1cfae <select_module+0xe>
   1cfba:	bf00      	nop
   1cfbc:	100006a8 	.word	0x100006a8

0001cfc0 <get_command_and_module>:
{
   1cfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cfc2:	4604      	mov	r4, r0
   1cfc4:	4617      	mov	r7, r2
    int def_module = default_module;
   1cfc6:	4b1a      	ldr	r3, [pc, #104]	; (1d030 <get_command_and_module+0x70>)
   1cfc8:	681b      	ldr	r3, [r3, #0]
    const char *first_arg = argv[0];
   1cfca:	6800      	ldr	r0, [r0, #0]
    *module = -1;
   1cfcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cfd0:	600a      	str	r2, [r1, #0]
    if (!argv[0]) {
   1cfd2:	6826      	ldr	r6, [r4, #0]
   1cfd4:	b156      	cbz	r6, 1cfec <get_command_and_module+0x2c>
   1cfd6:	460d      	mov	r5, r1
    if (first_arg[0] == '/') {
   1cfd8:	7802      	ldrb	r2, [r0, #0]
   1cfda:	2a2f      	cmp	r2, #47	; 0x2f
   1cfdc:	d00b      	beq.n	1cff6 <get_command_and_module+0x36>
    if (def_module == -1) {
   1cfde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1cfe2:	d009      	beq.n	1cff8 <get_command_and_module+0x38>
    *module = def_module;
   1cfe4:	600b      	str	r3, [r1, #0]
    return argv[0];
   1cfe6:	6826      	ldr	r6, [r4, #0]
}
   1cfe8:	4630      	mov	r0, r6
   1cfea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Unrecognized command\n");
   1cfec:	4911      	ldr	r1, [pc, #68]	; (1d034 <get_command_and_module+0x74>)
   1cfee:	4638      	mov	r0, r7
   1cff0:	f001 fc7f 	bl	1e8f2 <streamer_printf>
        return NULL;
   1cff4:	e7f8      	b.n	1cfe8 <get_command_and_module+0x28>
        first_arg++;
   1cff6:	3001      	adds	r0, #1
        if (!argv[1] || argv[1][0] == '\0') {
   1cff8:	6863      	ldr	r3, [r4, #4]
   1cffa:	b15b      	cbz	r3, 1d014 <get_command_and_module+0x54>
   1cffc:	781b      	ldrb	r3, [r3, #0]
   1cffe:	b14b      	cbz	r3, 1d014 <get_command_and_module+0x54>
        *module = get_destination_module(first_arg, -1);
   1d000:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d004:	f7ff ff98 	bl	1cf38 <get_destination_module>
   1d008:	6028      	str	r0, [r5, #0]
        if (*module == -1) {
   1d00a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1d00e:	d008      	beq.n	1d022 <get_command_and_module+0x62>
        return argv[1];
   1d010:	6866      	ldr	r6, [r4, #4]
   1d012:	e7e9      	b.n	1cfe8 <get_command_and_module+0x28>
            streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
   1d014:	4632      	mov	r2, r6
   1d016:	4908      	ldr	r1, [pc, #32]	; (1d038 <get_command_and_module+0x78>)
   1d018:	4638      	mov	r0, r7
   1d01a:	f001 fc6a 	bl	1e8f2 <streamer_printf>
            return NULL;
   1d01e:	2600      	movs	r6, #0
   1d020:	e7e2      	b.n	1cfe8 <get_command_and_module+0x28>
            streamer_printf(streamer, "Illegal module %s\n", argv[0]);
   1d022:	6822      	ldr	r2, [r4, #0]
   1d024:	4905      	ldr	r1, [pc, #20]	; (1d03c <get_command_and_module+0x7c>)
   1d026:	4638      	mov	r0, r7
   1d028:	f001 fc63 	bl	1e8f2 <streamer_printf>
            return NULL;
   1d02c:	2600      	movs	r6, #0
   1d02e:	e7db      	b.n	1cfe8 <get_command_and_module+0x28>
   1d030:	100006a8 	.word	0x100006a8
   1d034:	00033e64 	.word	0x00033e64
   1d038:	00033e7c 	.word	0x00033e7c
   1d03c:	00033e98 	.word	0x00033e98

0001d040 <shell_find_cmd>:
static const struct shell_cmd shell_cmd_select_module =
    SHELL_CMD_EXT("select", select_module, NULL);

static const struct shell_cmd *
shell_find_cmd(int argc, char *argv[], struct streamer *streamer)
{
   1d040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d044:	b082      	sub	sp, #8
   1d046:	4616      	mov	r6, r2
    const char *first_string = argv[0];
   1d048:	680c      	ldr	r4, [r1, #0]
    int module = -1;
   1d04a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d04e:	9301      	str	r3, [sp, #4]
    int def_module = default_module;
   1d050:	4b27      	ldr	r3, [pc, #156]	; (1d0f0 <shell_find_cmd+0xb0>)
   1d052:	f8d3 8000 	ldr.w	r8, [r3]
    const struct shell_module *shell_module;
    const char *command;
    int i;

    if (!first_string || first_string[0] == '\0') {
   1d056:	b374      	cbz	r4, 1d0b6 <shell_find_cmd+0x76>
   1d058:	4607      	mov	r7, r0
   1d05a:	460d      	mov	r5, r1
   1d05c:	7823      	ldrb	r3, [r4, #0]
   1d05e:	b353      	cbz	r3, 1d0b6 <shell_find_cmd+0x76>
        streamer_printf(streamer, "Illegal parameter\n");
        return NULL;
    }

    if (first_string[0] == '/') {
   1d060:	2b2f      	cmp	r3, #47	; 0x2f
   1d062:	d02e      	beq.n	1d0c2 <shell_find_cmd+0x82>
        first_string++;
        def_module = -1;
    }

    if (!strcmp(first_string, "help")) {
   1d064:	4923      	ldr	r1, [pc, #140]	; (1d0f4 <shell_find_cmd+0xb4>)
   1d066:	4620      	mov	r0, r4
   1d068:	f7fd fe5f 	bl	1ad2a <strcmp>
   1d06c:	b398      	cbz	r0, 1d0d6 <shell_find_cmd+0x96>
        return &shell_cmd_help;
    }

    if (!strcmp(first_string, "select")) {
   1d06e:	4922      	ldr	r1, [pc, #136]	; (1d0f8 <shell_find_cmd+0xb8>)
   1d070:	4620      	mov	r0, r4
   1d072:	f7fd fe5a 	bl	1ad2a <strcmp>
   1d076:	b398      	cbz	r0, 1d0e0 <shell_find_cmd+0xa0>
        return &shell_cmd_select_module;
    }

    if ((argc == 1) && (def_module == -1)) {
   1d078:	2f01      	cmp	r7, #1
   1d07a:	d102      	bne.n	1d082 <shell_find_cmd+0x42>
   1d07c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1d080:	d023      	beq.n	1d0ca <shell_find_cmd+0x8a>
        streamer_printf(streamer, "Missing parameter\n");
        return NULL;
    }

    command = get_command_and_module(argv, &module, streamer);
   1d082:	4632      	mov	r2, r6
   1d084:	a901      	add	r1, sp, #4
   1d086:	4628      	mov	r0, r5
   1d088:	f7ff ff9a 	bl	1cfc0 <get_command_and_module>
   1d08c:	4606      	mov	r6, r0
    if ((module == -1) || (command == NULL)) {
   1d08e:	9f01      	ldr	r7, [sp, #4]
   1d090:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   1d094:	d026      	beq.n	1d0e4 <shell_find_cmd+0xa4>
   1d096:	b338      	cbz	r0, 1d0e8 <shell_find_cmd+0xa8>
        return NULL;
    }

    shell_module = &shell_modules[module];
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   1d098:	2500      	movs	r5, #0
   1d09a:	4b18      	ldr	r3, [pc, #96]	; (1d0fc <shell_find_cmd+0xbc>)
   1d09c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   1d0a0:	685c      	ldr	r4, [r3, #4]
   1d0a2:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   1d0a6:	68a1      	ldr	r1, [r4, #8]
   1d0a8:	b1b1      	cbz	r1, 1d0d8 <shell_find_cmd+0x98>
        if (!strcmp(command, shell_module->commands[i].sc_cmd)) {
   1d0aa:	4630      	mov	r0, r6
   1d0ac:	f7fd fe3d 	bl	1ad2a <strcmp>
   1d0b0:	b1e0      	cbz	r0, 1d0ec <shell_find_cmd+0xac>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   1d0b2:	3501      	adds	r5, #1
   1d0b4:	e7f1      	b.n	1d09a <shell_find_cmd+0x5a>
        streamer_printf(streamer, "Illegal parameter\n");
   1d0b6:	4912      	ldr	r1, [pc, #72]	; (1d100 <shell_find_cmd+0xc0>)
   1d0b8:	4630      	mov	r0, r6
   1d0ba:	f001 fc1a 	bl	1e8f2 <streamer_printf>
        return NULL;
   1d0be:	2100      	movs	r1, #0
   1d0c0:	e00a      	b.n	1d0d8 <shell_find_cmd+0x98>
        first_string++;
   1d0c2:	3401      	adds	r4, #1
        def_module = -1;
   1d0c4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1d0c8:	e7cc      	b.n	1d064 <shell_find_cmd+0x24>
        streamer_printf(streamer, "Missing parameter\n");
   1d0ca:	490e      	ldr	r1, [pc, #56]	; (1d104 <shell_find_cmd+0xc4>)
   1d0cc:	4630      	mov	r0, r6
   1d0ce:	f001 fc10 	bl	1e8f2 <streamer_printf>
        return NULL;
   1d0d2:	2100      	movs	r1, #0
   1d0d4:	e000      	b.n	1d0d8 <shell_find_cmd+0x98>
        return &shell_cmd_help;
   1d0d6:	490c      	ldr	r1, [pc, #48]	; (1d108 <shell_find_cmd+0xc8>)
            return &shell_module->commands[i];
        }
    }

    return NULL;
}
   1d0d8:	4608      	mov	r0, r1
   1d0da:	b002      	add	sp, #8
   1d0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return &shell_cmd_select_module;
   1d0e0:	490a      	ldr	r1, [pc, #40]	; (1d10c <shell_find_cmd+0xcc>)
   1d0e2:	e7f9      	b.n	1d0d8 <shell_find_cmd+0x98>
        return NULL;
   1d0e4:	2100      	movs	r1, #0
   1d0e6:	e7f7      	b.n	1d0d8 <shell_find_cmd+0x98>
   1d0e8:	4601      	mov	r1, r0
   1d0ea:	e7f5      	b.n	1d0d8 <shell_find_cmd+0x98>
            return &shell_module->commands[i];
   1d0ec:	4621      	mov	r1, r4
   1d0ee:	e7f3      	b.n	1d0d8 <shell_find_cmd+0x98>
   1d0f0:	100006a8 	.word	0x100006a8
   1d0f4:	00033ec0 	.word	0x00033ec0
   1d0f8:	00033ec8 	.word	0x00033ec8
   1d0fc:	10005550 	.word	0x10005550
   1d100:	00033eac 	.word	0x00033eac
   1d104:	00033ed0 	.word	0x00033ed0
   1d108:	0003403c 	.word	0x0003403c
   1d10c:	0003404c 	.word	0x0003404c

0001d110 <show_cmd_help>:
{
   1d110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d114:	b083      	sub	sp, #12
   1d116:	4681      	mov	r9, r0
   1d118:	4688      	mov	r8, r1
    int module = -1;
   1d11a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d11e:	9301      	str	r3, [sp, #4]
    command = get_command_and_module(argv, &module, streamer);
   1d120:	460a      	mov	r2, r1
   1d122:	a901      	add	r1, sp, #4
   1d124:	f7ff ff4c 	bl	1cfc0 <get_command_and_module>
    if ((module == -1) || (command == NULL)) {
   1d128:	9f01      	ldr	r7, [sp, #4]
   1d12a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   1d12e:	d04d      	beq.n	1d1cc <show_cmd_help+0xbc>
   1d130:	4606      	mov	r6, r0
   1d132:	2800      	cmp	r0, #0
   1d134:	d04a      	beq.n	1d1cc <show_cmd_help+0xbc>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   1d136:	2500      	movs	r5, #0
   1d138:	4b26      	ldr	r3, [pc, #152]	; (1d1d4 <show_cmd_help+0xc4>)
   1d13a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   1d13e:	685c      	ldr	r4, [r3, #4]
   1d140:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   1d144:	68a1      	ldr	r1, [r4, #8]
   1d146:	2900      	cmp	r1, #0
   1d148:	d03a      	beq.n	1d1c0 <show_cmd_help+0xb0>
        if (!strcmp(command, cmd->sc_cmd)) {
   1d14a:	4630      	mov	r0, r6
   1d14c:	f7fd fded 	bl	1ad2a <strcmp>
   1d150:	b108      	cbz	r0, 1d156 <show_cmd_help+0x46>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   1d152:	3501      	adds	r5, #1
   1d154:	e7f0      	b.n	1d138 <show_cmd_help+0x28>
            if (!cmd->help || (!cmd->help->summary &&
   1d156:	68e3      	ldr	r3, [r4, #12]
   1d158:	2b00      	cmp	r3, #0
   1d15a:	d02c      	beq.n	1d1b6 <show_cmd_help+0xa6>
   1d15c:	681a      	ldr	r2, [r3, #0]
   1d15e:	b322      	cbz	r2, 1d1aa <show_cmd_help+0x9a>
            if (cmd->help->summary) {
   1d160:	b14a      	cbz	r2, 1d176 <show_cmd_help+0x66>
                streamer_printf(streamer, "Summary:\n");
   1d162:	491d      	ldr	r1, [pc, #116]	; (1d1d8 <show_cmd_help+0xc8>)
   1d164:	4640      	mov	r0, r8
   1d166:	f001 fbc4 	bl	1e8f2 <streamer_printf>
                streamer_printf(streamer, "%s\n", cmd->help->summary);
   1d16a:	68e3      	ldr	r3, [r4, #12]
   1d16c:	681a      	ldr	r2, [r3, #0]
   1d16e:	491b      	ldr	r1, [pc, #108]	; (1d1dc <show_cmd_help+0xcc>)
   1d170:	4640      	mov	r0, r8
   1d172:	f001 fbbe 	bl	1e8f2 <streamer_printf>
            if (cmd->help->usage) {
   1d176:	68e3      	ldr	r3, [r4, #12]
   1d178:	685b      	ldr	r3, [r3, #4]
   1d17a:	b14b      	cbz	r3, 1d190 <show_cmd_help+0x80>
                streamer_printf(streamer, "Usage:\n");
   1d17c:	4918      	ldr	r1, [pc, #96]	; (1d1e0 <show_cmd_help+0xd0>)
   1d17e:	4640      	mov	r0, r8
   1d180:	f001 fbb7 	bl	1e8f2 <streamer_printf>
                streamer_printf(streamer, "%s\n", cmd->help->usage);
   1d184:	68e3      	ldr	r3, [r4, #12]
   1d186:	685a      	ldr	r2, [r3, #4]
   1d188:	4914      	ldr	r1, [pc, #80]	; (1d1dc <show_cmd_help+0xcc>)
   1d18a:	4640      	mov	r0, r8
   1d18c:	f001 fbb1 	bl	1e8f2 <streamer_printf>
            if (cmd->help->params) {
   1d190:	68e3      	ldr	r3, [r4, #12]
   1d192:	689b      	ldr	r3, [r3, #8]
   1d194:	b1d3      	cbz	r3, 1d1cc <show_cmd_help+0xbc>
                streamer_printf(streamer, "Parameters:\n");
   1d196:	4913      	ldr	r1, [pc, #76]	; (1d1e4 <show_cmd_help+0xd4>)
   1d198:	4640      	mov	r0, r8
   1d19a:	f001 fbaa 	bl	1e8f2 <streamer_printf>
                print_command_params(module, i, streamer);
   1d19e:	4642      	mov	r2, r8
   1d1a0:	4629      	mov	r1, r5
   1d1a2:	9801      	ldr	r0, [sp, #4]
   1d1a4:	f7ff fea6 	bl	1cef4 <print_command_params>
            return 0;
   1d1a8:	e010      	b.n	1d1cc <show_cmd_help+0xbc>
                               !cmd->help->usage &&
   1d1aa:	6859      	ldr	r1, [r3, #4]
            if (!cmd->help || (!cmd->help->summary &&
   1d1ac:	2900      	cmp	r1, #0
   1d1ae:	d1d7      	bne.n	1d160 <show_cmd_help+0x50>
                               !cmd->help->params)) {
   1d1b0:	689b      	ldr	r3, [r3, #8]
                               !cmd->help->usage &&
   1d1b2:	2b00      	cmp	r3, #0
   1d1b4:	d1d4      	bne.n	1d160 <show_cmd_help+0x50>
                streamer_printf(streamer, "(no help available)\n");
   1d1b6:	490c      	ldr	r1, [pc, #48]	; (1d1e8 <show_cmd_help+0xd8>)
   1d1b8:	4640      	mov	r0, r8
   1d1ba:	f001 fb9a 	bl	1e8f2 <streamer_printf>
                return 0;
   1d1be:	e005      	b.n	1d1cc <show_cmd_help+0xbc>
    streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
   1d1c0:	f8d9 2000 	ldr.w	r2, [r9]
   1d1c4:	4909      	ldr	r1, [pc, #36]	; (1d1ec <show_cmd_help+0xdc>)
   1d1c6:	4640      	mov	r0, r8
   1d1c8:	f001 fb93 	bl	1e8f2 <streamer_printf>
}
   1d1cc:	2000      	movs	r0, #0
   1d1ce:	b003      	add	sp, #12
   1d1d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d1d4:	10005550 	.word	0x10005550
   1d1d8:	00033efc 	.word	0x00033efc
   1d1dc:	00034108 	.word	0x00034108
   1d1e0:	00033f08 	.word	0x00033f08
   1d1e4:	00033f10 	.word	0x00033f10
   1d1e8:	00033ee4 	.word	0x00033ee4
   1d1ec:	00033e7c 	.word	0x00033e7c

0001d1f0 <show_help>:
{
   1d1f0:	b538      	push	{r3, r4, r5, lr}
   1d1f2:	461c      	mov	r4, r3
    if ((argc > 2) || ((default_module != -1) && (argc == 2))) {
   1d1f4:	2902      	cmp	r1, #2
   1d1f6:	dc1a      	bgt.n	1d22e <show_help+0x3e>
   1d1f8:	4b1b      	ldr	r3, [pc, #108]	; (1d268 <show_help+0x78>)
   1d1fa:	6818      	ldr	r0, [r3, #0]
   1d1fc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1d200:	d001      	beq.n	1d206 <show_help+0x16>
   1d202:	2902      	cmp	r1, #2
   1d204:	d013      	beq.n	1d22e <show_help+0x3e>
    if ((argc == 2) || ((default_module != -1) && (argc == 1))) {
   1d206:	2902      	cmp	r1, #2
   1d208:	d016      	beq.n	1d238 <show_help+0x48>
   1d20a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1d20e:	d001      	beq.n	1d214 <show_help+0x24>
   1d210:	2901      	cmp	r1, #1
   1d212:	d011      	beq.n	1d238 <show_help+0x48>
        streamer_printf(streamer, "Available modules:\n");
   1d214:	4915      	ldr	r1, [pc, #84]	; (1d26c <show_help+0x7c>)
   1d216:	4620      	mov	r0, r4
   1d218:	f001 fb6b 	bl	1e8f2 <streamer_printf>
        print_modules(streamer);
   1d21c:	4620      	mov	r0, r4
   1d21e:	f7ff fe51 	bl	1cec4 <print_modules>
        streamer_printf(streamer,
   1d222:	4913      	ldr	r1, [pc, #76]	; (1d270 <show_help+0x80>)
   1d224:	4620      	mov	r0, r4
   1d226:	f001 fb64 	bl	1e8f2 <streamer_printf>
    return 0;
   1d22a:	2000      	movs	r0, #0
   1d22c:	e014      	b.n	1d258 <show_help+0x68>
        return show_cmd_help(&argv[1], streamer);
   1d22e:	4621      	mov	r1, r4
   1d230:	1d10      	adds	r0, r2, #4
   1d232:	f7ff ff6d 	bl	1d110 <show_cmd_help>
   1d236:	e00f      	b.n	1d258 <show_help+0x68>
        if (default_module == -1) {
   1d238:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1d23c:	d108      	bne.n	1d250 <show_help+0x60>
            module = get_destination_module(argv[1], -1);
   1d23e:	6855      	ldr	r5, [r2, #4]
   1d240:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d244:	4628      	mov	r0, r5
   1d246:	f7ff fe77 	bl	1cf38 <get_destination_module>
            if (module == -1) {
   1d24a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1d24e:	d004      	beq.n	1d25a <show_help+0x6a>
        print_module_commands(module, streamer);
   1d250:	4621      	mov	r1, r4
   1d252:	f7ff fe01 	bl	1ce58 <print_module_commands>
    return 0;
   1d256:	2000      	movs	r0, #0
}
   1d258:	bd38      	pop	{r3, r4, r5, pc}
                streamer_printf(streamer, "Illegal module %s\n", argv[1]);
   1d25a:	462a      	mov	r2, r5
   1d25c:	4905      	ldr	r1, [pc, #20]	; (1d274 <show_help+0x84>)
   1d25e:	4620      	mov	r0, r4
   1d260:	f001 fb47 	bl	1e8f2 <streamer_printf>
                return 0;
   1d264:	2000      	movs	r0, #0
   1d266:	e7f7      	b.n	1d258 <show_help+0x68>
   1d268:	100006a8 	.word	0x100006a8
   1d26c:	00033f20 	.word	0x00033f20
   1d270:	00033f34 	.word	0x00033f34
   1d274:	00033e98 	.word	0x00033e98

0001d278 <print_prompt>:
{
   1d278:	b510      	push	{r4, lr}
   1d27a:	b088      	sub	sp, #32
   1d27c:	4604      	mov	r4, r0
    strcpy(full_prompt, get_prompt());
   1d27e:	f7ff fdcf 	bl	1ce20 <get_prompt>
   1d282:	4601      	mov	r1, r0
   1d284:	4668      	mov	r0, sp
   1d286:	f011 fc5e 	bl	2eb46 <strcpy>
    strcat(full_prompt, MYNEWT_VAL(SHELL_PROMPT_SUFFIX));
   1d28a:	4668      	mov	r0, sp
   1d28c:	f7fd fd59 	bl	1ad42 <strlen>
   1d290:	eb0d 0200 	add.w	r2, sp, r0
   1d294:	4b05      	ldr	r3, [pc, #20]	; (1d2ac <print_prompt+0x34>)
   1d296:	8819      	ldrh	r1, [r3, #0]
   1d298:	789b      	ldrb	r3, [r3, #2]
   1d29a:	f82d 1000 	strh.w	r1, [sp, r0]
   1d29e:	7093      	strb	r3, [r2, #2]
    console_prompt_set(full_prompt, line);
   1d2a0:	4621      	mov	r1, r4
   1d2a2:	4668      	mov	r0, sp
   1d2a4:	f7fe fdc6 	bl	1be34 <console_prompt_set>
}
   1d2a8:	b008      	add	sp, #32
   1d2aa:	bd10      	pop	{r4, pc}
   1d2ac:	00033f68 	.word	0x00033f68

0001d2b0 <print_prompt_if_console>:
{
   1d2b0:	b510      	push	{r4, lr}
   1d2b2:	4604      	mov	r4, r0
    if (streamer == streamer_console_get()) {
   1d2b4:	f001 fb38 	bl	1e928 <streamer_console_get>
   1d2b8:	4284      	cmp	r4, r0
   1d2ba:	d000      	beq.n	1d2be <print_prompt_if_console+0xe>
}
   1d2bc:	bd10      	pop	{r4, pc}
        print_prompt(NULL);
   1d2be:	2000      	movs	r0, #0
   1d2c0:	f7ff ffda 	bl	1d278 <print_prompt>
}
   1d2c4:	e7fa      	b.n	1d2bc <print_prompt_if_console+0xc>
	...

0001d2c8 <complete_module>:
}

static void
complete_module(char *line, char *module_prefix,
                int module_len, console_append_char_cb append_char)
{
   1d2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d2cc:	b083      	sub	sp, #12
   1d2ce:	4681      	mov	r9, r0
   1d2d0:	9101      	str	r1, [sp, #4]
    int i, j;
    const char *first_match = NULL;
    int common_chars = -1, space = 0;

    if (!module_len) {
   1d2d2:	4615      	mov	r5, r2
   1d2d4:	b132      	cbz	r2, 1d2e4 <complete_module+0x1c>
   1d2d6:	469a      	mov	sl, r3
    int common_chars = -1, space = 0;
   1d2d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    const char *first_match = NULL;
   1d2dc:	f04f 0800 	mov.w	r8, #0
        }
        print_prompt(line);
        return;
    }

    for (i = 0; i < num_of_shell_entities; i++) {
   1d2e0:	4646      	mov	r6, r8
   1d2e2:	e028      	b.n	1d336 <complete_module+0x6e>
        console_out('\n');
   1d2e4:	200a      	movs	r0, #10
   1d2e6:	f7fe fd59 	bl	1bd9c <console_out>
        for (i = 0; i < num_of_shell_entities; i++) {
   1d2ea:	e006      	b.n	1d2fa <complete_module+0x32>
            console_printf("%s\n", shell_modules[i].name);
   1d2ec:	4b32      	ldr	r3, [pc, #200]	; (1d3b8 <complete_module+0xf0>)
   1d2ee:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
   1d2f2:	4832      	ldr	r0, [pc, #200]	; (1d3bc <complete_module+0xf4>)
   1d2f4:	f7fe ff1a 	bl	1c12c <console_printf>
        for (i = 0; i < num_of_shell_entities; i++) {
   1d2f8:	3501      	adds	r5, #1
   1d2fa:	4b31      	ldr	r3, [pc, #196]	; (1d3c0 <complete_module+0xf8>)
   1d2fc:	681b      	ldr	r3, [r3, #0]
   1d2fe:	429d      	cmp	r5, r3
   1d300:	d3f4      	bcc.n	1d2ec <complete_module+0x24>
        print_prompt(line);
   1d302:	4648      	mov	r0, r9
   1d304:	f7ff ffb8 	bl	1d278 <print_prompt>

    /* for convenience add space after command */
    if (space) {
        append_char(line, ' ');
    }
}
   1d308:	b003      	add	sp, #12
   1d30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            console_out('\n');
   1d30e:	200a      	movs	r0, #10
   1d310:	f7fe fd44 	bl	1bd9c <console_out>
            console_printf("%s\n", first_match);
   1d314:	4641      	mov	r1, r8
   1d316:	4829      	ldr	r0, [pc, #164]	; (1d3bc <complete_module+0xf4>)
   1d318:	f7fe ff08 	bl	1c12c <console_printf>
            common_chars = strlen(first_match);
   1d31c:	4640      	mov	r0, r8
   1d31e:	f7fd fd10 	bl	1ad42 <strlen>
   1d322:	4607      	mov	r7, r0
        for (j = 0; j < common_chars; j++) {
   1d324:	e01b      	b.n	1d35e <complete_module+0x96>
        console_printf("%s\n", shell_modules[i].name);
   1d326:	4b24      	ldr	r3, [pc, #144]	; (1d3b8 <complete_module+0xf0>)
   1d328:	f853 1036 	ldr.w	r1, [r3, r6, lsl #3]
   1d32c:	4823      	ldr	r0, [pc, #140]	; (1d3bc <complete_module+0xf4>)
   1d32e:	f7fe fefd 	bl	1c12c <console_printf>
        common_chars = j;
   1d332:	4627      	mov	r7, r4
    for (i = 0; i < num_of_shell_entities; i++) {
   1d334:	3601      	adds	r6, #1
   1d336:	4b22      	ldr	r3, [pc, #136]	; (1d3c0 <complete_module+0xf8>)
   1d338:	681b      	ldr	r3, [r3, #0]
   1d33a:	429e      	cmp	r6, r3
   1d33c:	d21d      	bcs.n	1d37a <complete_module+0xb2>
        if (strncmp(module_prefix,
   1d33e:	4b1e      	ldr	r3, [pc, #120]	; (1d3b8 <complete_module+0xf0>)
   1d340:	f853 b036 	ldr.w	fp, [r3, r6, lsl #3]
   1d344:	462a      	mov	r2, r5
   1d346:	4659      	mov	r1, fp
   1d348:	9801      	ldr	r0, [sp, #4]
   1d34a:	f011 fc06 	bl	2eb5a <strncmp>
   1d34e:	4604      	mov	r4, r0
   1d350:	2800      	cmp	r0, #0
   1d352:	d1ef      	bne.n	1d334 <complete_module+0x6c>
        if (!first_match) {
   1d354:	f1b8 0f00 	cmp.w	r8, #0
   1d358:	d00d      	beq.n	1d376 <complete_module+0xae>
        if (first_match && (common_chars < 0)) {
   1d35a:	2f00      	cmp	r7, #0
   1d35c:	dbd7      	blt.n	1d30e <complete_module+0x46>
        for (j = 0; j < common_chars; j++) {
   1d35e:	42bc      	cmp	r4, r7
   1d360:	dae1      	bge.n	1d326 <complete_module+0x5e>
            if (first_match[j] != shell_modules[i].name[j]) {
   1d362:	f818 2004 	ldrb.w	r2, [r8, r4]
   1d366:	4b14      	ldr	r3, [pc, #80]	; (1d3b8 <complete_module+0xf0>)
   1d368:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
   1d36c:	5d1b      	ldrb	r3, [r3, r4]
   1d36e:	429a      	cmp	r2, r3
   1d370:	d1d9      	bne.n	1d326 <complete_module+0x5e>
        for (j = 0; j < common_chars; j++) {
   1d372:	3401      	adds	r4, #1
   1d374:	e7f3      	b.n	1d35e <complete_module+0x96>
            first_match = shell_modules[i].name;
   1d376:	46d8      	mov	r8, fp
   1d378:	e7dc      	b.n	1d334 <complete_module+0x6c>
    if (!first_match) {
   1d37a:	f1b8 0f00 	cmp.w	r8, #0
   1d37e:	d0c3      	beq.n	1d308 <complete_module+0x40>
    if (common_chars >= 0) {
   1d380:	2f00      	cmp	r7, #0
   1d382:	da0e      	bge.n	1d3a2 <complete_module+0xda>
        common_chars = strlen(first_match);
   1d384:	4640      	mov	r0, r8
   1d386:	f7fd fcdc 	bl	1ad42 <strlen>
   1d38a:	4607      	mov	r7, r0
        space = 1;
   1d38c:	2401      	movs	r4, #1
    for (i = module_len; i < common_chars; i++) {
   1d38e:	42bd      	cmp	r5, r7
   1d390:	da0c      	bge.n	1d3ac <complete_module+0xe4>
        if (!append_char(line, first_match[i])) {
   1d392:	f818 1005 	ldrb.w	r1, [r8, r5]
   1d396:	4648      	mov	r0, r9
   1d398:	47d0      	blx	sl
   1d39a:	2800      	cmp	r0, #0
   1d39c:	d0b4      	beq.n	1d308 <complete_module+0x40>
    for (i = module_len; i < common_chars; i++) {
   1d39e:	3501      	adds	r5, #1
   1d3a0:	e7f5      	b.n	1d38e <complete_module+0xc6>
        print_prompt(line);
   1d3a2:	4648      	mov	r0, r9
   1d3a4:	f7ff ff68 	bl	1d278 <print_prompt>
    int common_chars = -1, space = 0;
   1d3a8:	2400      	movs	r4, #0
   1d3aa:	e7f0      	b.n	1d38e <complete_module+0xc6>
    if (space) {
   1d3ac:	2c00      	cmp	r4, #0
   1d3ae:	d0ab      	beq.n	1d308 <complete_module+0x40>
        append_char(line, ' ');
   1d3b0:	2120      	movs	r1, #32
   1d3b2:	4648      	mov	r0, r9
   1d3b4:	47d0      	blx	sl
   1d3b6:	e7a7      	b.n	1d308 <complete_module+0x40>
   1d3b8:	10005550 	.word	0x10005550
   1d3bc:	00034108 	.word	0x00034108
   1d3c0:	10005528 	.word	0x10005528

0001d3c4 <complete_command>:
{
   1d3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d3c8:	b083      	sub	sp, #12
   1d3ca:	9001      	str	r0, [sp, #4]
   1d3cc:	468b      	mov	fp, r1
   1d3ce:	4617      	mov	r7, r2
    commands = shell_modules[module_idx].commands;
   1d3d0:	4a3d      	ldr	r2, [pc, #244]	; (1d4c8 <complete_command+0x104>)
   1d3d2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1d3d6:	6856      	ldr	r6, [r2, #4]
    int i, j, common_chars = -1;
   1d3d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; commands[i].sc_cmd; i++) {
   1d3dc:	f04f 0800 	mov.w	r8, #0
    int match_count = 0;
   1d3e0:	46c2      	mov	sl, r8
    int first_match = -1;
   1d3e2:	46a9      	mov	r9, r5
    for (i = 0; commands[i].sc_cmd; i++) {
   1d3e4:	e006      	b.n	1d3f4 <complete_command+0x30>
            common_chars = strlen(commands[i].sc_cmd);
   1d3e6:	4620      	mov	r0, r4
   1d3e8:	f7fd fcab 	bl	1ad42 <strlen>
   1d3ec:	4605      	mov	r5, r0
            first_match = i;
   1d3ee:	46c1      	mov	r9, r8
    for (i = 0; commands[i].sc_cmd; i++) {
   1d3f0:	f108 0801 	add.w	r8, r8, #1
   1d3f4:	eb06 1308 	add.w	r3, r6, r8, lsl #4
   1d3f8:	689c      	ldr	r4, [r3, #8]
   1d3fa:	b1ec      	cbz	r4, 1d438 <complete_command+0x74>
        if (0 != strncmp(command_prefix, commands[i].sc_cmd, command_len)) {
   1d3fc:	463a      	mov	r2, r7
   1d3fe:	4621      	mov	r1, r4
   1d400:	4658      	mov	r0, fp
   1d402:	f011 fbaa 	bl	2eb5a <strncmp>
   1d406:	2800      	cmp	r0, #0
   1d408:	d1f2      	bne.n	1d3f0 <complete_command+0x2c>
        match_count++;
   1d40a:	f10a 0a01 	add.w	sl, sl, #1
        if (match_count == 1) {
   1d40e:	f1ba 0f01 	cmp.w	sl, #1
   1d412:	d0e8      	beq.n	1d3e6 <complete_command+0x22>
        if (common_chars <= command_len) {
   1d414:	42bd      	cmp	r5, r7
   1d416:	ddeb      	ble.n	1d3f0 <complete_command+0x2c>
        for (j = command_len; j < common_chars; j++) {
   1d418:	463b      	mov	r3, r7
   1d41a:	42ab      	cmp	r3, r5
   1d41c:	da08      	bge.n	1d430 <complete_command+0x6c>
            if (commands[first_match].sc_cmd[j] != commands[i].sc_cmd[j]) {
   1d41e:	eb06 1209 	add.w	r2, r6, r9, lsl #4
   1d422:	6892      	ldr	r2, [r2, #8]
   1d424:	5cd1      	ldrb	r1, [r2, r3]
   1d426:	5ce2      	ldrb	r2, [r4, r3]
   1d428:	4291      	cmp	r1, r2
   1d42a:	d103      	bne.n	1d434 <complete_command+0x70>
        for (j = command_len; j < common_chars; j++) {
   1d42c:	3301      	adds	r3, #1
   1d42e:	e7f4      	b.n	1d41a <complete_command+0x56>
        common_chars = j;
   1d430:	461d      	mov	r5, r3
   1d432:	e7dd      	b.n	1d3f0 <complete_command+0x2c>
   1d434:	461d      	mov	r5, r3
   1d436:	e7db      	b.n	1d3f0 <complete_command+0x2c>
    if (match_count == 0) {
   1d438:	f1ba 0f00 	cmp.w	sl, #0
   1d43c:	d040      	beq.n	1d4c0 <complete_command+0xfc>
    if (common_chars > command_len) {
   1d43e:	42bd      	cmp	r5, r7
   1d440:	dc0e      	bgt.n	1d460 <complete_command+0x9c>
    } else if (match_count == 1) {
   1d442:	f1ba 0f01 	cmp.w	sl, #1
   1d446:	d021      	beq.n	1d48c <complete_command+0xc8>
    console_out('\n');
   1d448:	200a      	movs	r0, #10
   1d44a:	f7fe fca7 	bl	1bd9c <console_out>
    console_printf("%s\n", commands[first_match].sc_cmd);
   1d44e:	eb06 1309 	add.w	r3, r6, r9, lsl #4
   1d452:	6899      	ldr	r1, [r3, #8]
   1d454:	481d      	ldr	r0, [pc, #116]	; (1d4cc <complete_command+0x108>)
   1d456:	f7fe fe69 	bl	1c12c <console_printf>
    for (i = first_match + 1; commands[i].sc_cmd; i++) {
   1d45a:	f109 0901 	add.w	r9, r9, #1
   1d45e:	e01c      	b.n	1d49a <complete_command+0xd6>
   1d460:	9c01      	ldr	r4, [sp, #4]
   1d462:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
        for (i = command_len; i < common_chars; i++) {
   1d466:	42af      	cmp	r7, r5
   1d468:	da08      	bge.n	1d47c <complete_command+0xb8>
            if (!append_char(line, (uint8_t)commands[first_match].sc_cmd[i])) {
   1d46a:	eb06 1309 	add.w	r3, r6, r9, lsl #4
   1d46e:	689b      	ldr	r3, [r3, #8]
   1d470:	5dd9      	ldrb	r1, [r3, r7]
   1d472:	4620      	mov	r0, r4
   1d474:	47c0      	blx	r8
   1d476:	b318      	cbz	r0, 1d4c0 <complete_command+0xfc>
        for (i = command_len; i < common_chars; i++) {
   1d478:	3701      	adds	r7, #1
   1d47a:	e7f4      	b.n	1d466 <complete_command+0xa2>
        if (match_count == 1) {
   1d47c:	f1ba 0f01 	cmp.w	sl, #1
   1d480:	d11e      	bne.n	1d4c0 <complete_command+0xfc>
            append_char(line, ' ');
   1d482:	2120      	movs	r1, #32
   1d484:	9801      	ldr	r0, [sp, #4]
   1d486:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d488:	4798      	blx	r3
        return;
   1d48a:	e019      	b.n	1d4c0 <complete_command+0xfc>
        append_char(line, ' ');
   1d48c:	2120      	movs	r1, #32
   1d48e:	9801      	ldr	r0, [sp, #4]
   1d490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d492:	4798      	blx	r3
        return;
   1d494:	e014      	b.n	1d4c0 <complete_command+0xfc>
    for (i = first_match + 1; commands[i].sc_cmd; i++) {
   1d496:	f109 0901 	add.w	r9, r9, #1
   1d49a:	eb06 1309 	add.w	r3, r6, r9, lsl #4
   1d49e:	689c      	ldr	r4, [r3, #8]
   1d4a0:	b15c      	cbz	r4, 1d4ba <complete_command+0xf6>
        if (0 == strncmp(command_prefix, commands[i].sc_cmd, command_len)) {
   1d4a2:	463a      	mov	r2, r7
   1d4a4:	4621      	mov	r1, r4
   1d4a6:	4658      	mov	r0, fp
   1d4a8:	f011 fb57 	bl	2eb5a <strncmp>
   1d4ac:	2800      	cmp	r0, #0
   1d4ae:	d1f2      	bne.n	1d496 <complete_command+0xd2>
            console_printf("%s\n", commands[i].sc_cmd);
   1d4b0:	4621      	mov	r1, r4
   1d4b2:	4806      	ldr	r0, [pc, #24]	; (1d4cc <complete_command+0x108>)
   1d4b4:	f7fe fe3a 	bl	1c12c <console_printf>
   1d4b8:	e7ed      	b.n	1d496 <complete_command+0xd2>
    print_prompt(line);
   1d4ba:	9801      	ldr	r0, [sp, #4]
   1d4bc:	f7ff fedc 	bl	1d278 <print_prompt>
}
   1d4c0:	b003      	add	sp, #12
   1d4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d4c6:	bf00      	nop
   1d4c8:	10005550 	.word	0x10005550
   1d4cc:	00034108 	.word	0x00034108

0001d4d0 <get_command_from_module>:
{
   1d4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d4d4:	4680      	mov	r8, r0
   1d4d6:	460d      	mov	r5, r1
   1d4d8:	4616      	mov	r6, r2
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   1d4da:	2400      	movs	r4, #0
   1d4dc:	e000      	b.n	1d4e0 <get_command_from_module+0x10>
   1d4de:	3401      	adds	r4, #1
   1d4e0:	4b0c      	ldr	r3, [pc, #48]	; (1d514 <get_command_from_module+0x44>)
   1d4e2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1d4e6:	685b      	ldr	r3, [r3, #4]
   1d4e8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1d4ec:	689f      	ldr	r7, [r3, #8]
   1d4ee:	b167      	cbz	r7, 1d50a <get_command_from_module+0x3a>
        if (strlen(shell_module->commands[i].sc_cmd) != len) {
   1d4f0:	4638      	mov	r0, r7
   1d4f2:	f7fd fc26 	bl	1ad42 <strlen>
   1d4f6:	42a8      	cmp	r0, r5
   1d4f8:	d1f1      	bne.n	1d4de <get_command_from_module+0xe>
        if (!strncmp(command, shell_module->commands[i].sc_cmd, len)) {
   1d4fa:	462a      	mov	r2, r5
   1d4fc:	4639      	mov	r1, r7
   1d4fe:	4640      	mov	r0, r8
   1d500:	f011 fb2b 	bl	2eb5a <strncmp>
   1d504:	2800      	cmp	r0, #0
   1d506:	d1ea      	bne.n	1d4de <get_command_from_module+0xe>
   1d508:	e001      	b.n	1d50e <get_command_from_module+0x3e>
    return -1;
   1d50a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   1d50e:	4620      	mov	r0, r4
   1d510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d514:	10005550 	.word	0x10005550

0001d518 <complete_param>:
{
   1d518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d51c:	b083      	sub	sp, #12
   1d51e:	9001      	str	r0, [sp, #4]
   1d520:	9100      	str	r1, [sp, #0]
   1d522:	4691      	mov	r9, r2
    command = &shell_modules[module_idx].commands[command_idx];
   1d524:	4a33      	ldr	r2, [pc, #204]	; (1d5f4 <complete_param+0xdc>)
   1d526:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1d52a:	6857      	ldr	r7, [r2, #4]
   1d52c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d52e:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    if (!(command->help && command->help->params)) {
   1d532:	68fb      	ldr	r3, [r7, #12]
   1d534:	2b00      	cmp	r3, #0
   1d536:	d059      	beq.n	1d5ec <complete_param+0xd4>
   1d538:	689b      	ldr	r3, [r3, #8]
   1d53a:	2b00      	cmp	r3, #0
   1d53c:	d056      	beq.n	1d5ec <complete_param+0xd4>
    int i, j, common_chars = -1;
   1d53e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; command->help->params[i].param_name; i++) {
   1d542:	f04f 0a00 	mov.w	sl, #0
    const char *first_match = NULL;
   1d546:	4656      	mov	r6, sl
   1d548:	e015      	b.n	1d576 <complete_param+0x5e>
            console_printf("\n");
   1d54a:	482b      	ldr	r0, [pc, #172]	; (1d5f8 <complete_param+0xe0>)
   1d54c:	f7fe fdee 	bl	1c12c <console_printf>
            console_printf("%s\n", first_match);
   1d550:	4631      	mov	r1, r6
   1d552:	482a      	ldr	r0, [pc, #168]	; (1d5fc <complete_param+0xe4>)
   1d554:	f7fe fdea 	bl	1c12c <console_printf>
            common_chars = strlen(first_match);
   1d558:	4630      	mov	r0, r6
   1d55a:	f7fd fbf2 	bl	1ad42 <strlen>
   1d55e:	4605      	mov	r5, r0
        for (j = 0; j < common_chars; j++) {
   1d560:	e01d      	b.n	1d59e <complete_param+0x86>
        console_printf("%s\n", command->help->params[i].param_name);
   1d562:	68fb      	ldr	r3, [r7, #12]
   1d564:	689b      	ldr	r3, [r3, #8]
   1d566:	f853 1008 	ldr.w	r1, [r3, r8]
   1d56a:	4824      	ldr	r0, [pc, #144]	; (1d5fc <complete_param+0xe4>)
   1d56c:	f7fe fdde 	bl	1c12c <console_printf>
        common_chars = j;
   1d570:	4625      	mov	r5, r4
    for (i = 0; command->help->params[i].param_name; i++) {
   1d572:	f10a 0a01 	add.w	sl, sl, #1
   1d576:	68fb      	ldr	r3, [r7, #12]
   1d578:	689b      	ldr	r3, [r3, #8]
   1d57a:	ea4f 08ca 	mov.w	r8, sl, lsl #3
   1d57e:	f853 b03a 	ldr.w	fp, [r3, sl, lsl #3]
   1d582:	f1bb 0f00 	cmp.w	fp, #0
   1d586:	d018      	beq.n	1d5ba <complete_param+0xa2>
        if (strncmp(param_prefix,
   1d588:	464a      	mov	r2, r9
   1d58a:	4659      	mov	r1, fp
   1d58c:	9800      	ldr	r0, [sp, #0]
   1d58e:	f011 fae4 	bl	2eb5a <strncmp>
   1d592:	4604      	mov	r4, r0
   1d594:	2800      	cmp	r0, #0
   1d596:	d1ec      	bne.n	1d572 <complete_param+0x5a>
        if (!first_match) {
   1d598:	b16e      	cbz	r6, 1d5b6 <complete_param+0x9e>
        if (first_match && (common_chars < 0)) {
   1d59a:	2d00      	cmp	r5, #0
   1d59c:	dbd5      	blt.n	1d54a <complete_param+0x32>
        for (j = 0; j < common_chars; j++) {
   1d59e:	42ac      	cmp	r4, r5
   1d5a0:	dadf      	bge.n	1d562 <complete_param+0x4a>
            if (first_match[j] != command->help->params[i].param_name[j]) {
   1d5a2:	5d32      	ldrb	r2, [r6, r4]
   1d5a4:	68fb      	ldr	r3, [r7, #12]
   1d5a6:	689b      	ldr	r3, [r3, #8]
   1d5a8:	f853 3008 	ldr.w	r3, [r3, r8]
   1d5ac:	5d1b      	ldrb	r3, [r3, r4]
   1d5ae:	429a      	cmp	r2, r3
   1d5b0:	d1d7      	bne.n	1d562 <complete_param+0x4a>
        for (j = 0; j < common_chars; j++) {
   1d5b2:	3401      	adds	r4, #1
   1d5b4:	e7f3      	b.n	1d59e <complete_param+0x86>
            first_match = command->help->params[i].param_name;
   1d5b6:	465e      	mov	r6, fp
   1d5b8:	e7db      	b.n	1d572 <complete_param+0x5a>
    if (!first_match) {
   1d5ba:	b1be      	cbz	r6, 1d5ec <complete_param+0xd4>
    if (common_chars >= 0) {
   1d5bc:	2d00      	cmp	r5, #0
   1d5be:	da0f      	bge.n	1d5e0 <complete_param+0xc8>
        common_chars = strlen(first_match);
   1d5c0:	4630      	mov	r0, r6
   1d5c2:	f7fd fbbe 	bl	1ad42 <strlen>
   1d5c6:	4605      	mov	r5, r0
    for (i = param_len; i < common_chars; i++) {
   1d5c8:	9c01      	ldr	r4, [sp, #4]
   1d5ca:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1d5cc:	45a9      	cmp	r9, r5
   1d5ce:	da0d      	bge.n	1d5ec <complete_param+0xd4>
        if (!append_char(line, first_match[i])) {
   1d5d0:	f816 1009 	ldrb.w	r1, [r6, r9]
   1d5d4:	4620      	mov	r0, r4
   1d5d6:	47b8      	blx	r7
   1d5d8:	b140      	cbz	r0, 1d5ec <complete_param+0xd4>
    for (i = param_len; i < common_chars; i++) {
   1d5da:	f109 0901 	add.w	r9, r9, #1
   1d5de:	e7f5      	b.n	1d5cc <complete_param+0xb4>
        print_prompt(line);
   1d5e0:	9c01      	ldr	r4, [sp, #4]
   1d5e2:	4620      	mov	r0, r4
   1d5e4:	f7ff fe48 	bl	1d278 <print_prompt>
   1d5e8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1d5ea:	e7ef      	b.n	1d5cc <complete_param+0xb4>
}
   1d5ec:	b003      	add	sp, #12
   1d5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d5f2:	bf00      	nop
   1d5f4:	10005550 	.word	0x10005550
   1d5f8:	0002ff28 	.word	0x0002ff28
   1d5fc:	00034108 	.word	0x00034108

0001d600 <get_token>:
{
   1d600:	b570      	push	{r4, r5, r6, lr}
   1d602:	4605      	mov	r5, r0
   1d604:	460e      	mov	r6, r1
    char *str = *cur;
   1d606:	6804      	ldr	r4, [r0, #0]
    *null_terminated = 0;
   1d608:	2300      	movs	r3, #0
   1d60a:	600b      	str	r3, [r1, #0]
    while (*str && *str == ' ') {
   1d60c:	7823      	ldrb	r3, [r4, #0]
   1d60e:	2b20      	cmp	r3, #32
   1d610:	d101      	bne.n	1d616 <get_token+0x16>
        str++;
   1d612:	3401      	adds	r4, #1
   1d614:	e7fa      	b.n	1d60c <get_token+0xc>
    if (*str == '\0') {
   1d616:	b13b      	cbz	r3, 1d628 <get_token+0x28>
    *cur = str;
   1d618:	602c      	str	r4, [r5, #0]
    str = strchr(str, ' ');
   1d61a:	2120      	movs	r1, #32
   1d61c:	4620      	mov	r0, r4
   1d61e:	f011 fa88 	bl	2eb32 <strchr>
    if (str == NULL) {
   1d622:	b128      	cbz	r0, 1d630 <get_token+0x30>
    return str - *cur;
   1d624:	1b00      	subs	r0, r0, r4
}
   1d626:	bd70      	pop	{r4, r5, r6, pc}
        *null_terminated = 1;
   1d628:	2301      	movs	r3, #1
   1d62a:	6033      	str	r3, [r6, #0]
        return 0;
   1d62c:	2000      	movs	r0, #0
   1d62e:	e7fa      	b.n	1d626 <get_token+0x26>
        *null_terminated = 1;
   1d630:	2301      	movs	r3, #1
   1d632:	6033      	str	r3, [r6, #0]
        return strlen(*cur);
   1d634:	6828      	ldr	r0, [r5, #0]
   1d636:	f7fd fb84 	bl	1ad42 <strlen>
   1d63a:	e7f4      	b.n	1d626 <get_token+0x26>

0001d63c <complete_select>:

static void
complete_select(char *line, char *cur,
                int tok_len, console_append_char_cb append_char)
{
   1d63c:	b530      	push	{r4, r5, lr}
   1d63e:	b085      	sub	sp, #20
   1d640:	4604      	mov	r4, r0
   1d642:	461d      	mov	r5, r3
    int null_terminated = 0;
   1d644:	2000      	movs	r0, #0
   1d646:	9003      	str	r0, [sp, #12]

    cur += tok_len + 1;
   1d648:	3201      	adds	r2, #1
   1d64a:	4411      	add	r1, r2
   1d64c:	9101      	str	r1, [sp, #4]
    tok_len = get_token(&cur, &null_terminated);
   1d64e:	a903      	add	r1, sp, #12
   1d650:	a801      	add	r0, sp, #4
   1d652:	f7ff ffd5 	bl	1d600 <get_token>
    if (tok_len == 0) {
   1d656:	b120      	cbz	r0, 1d662 <complete_select+0x26>
   1d658:	4602      	mov	r2, r0
        print_modules(streamer_console_get());
        print_prompt(line);
        return;
    }

    if (null_terminated) {
   1d65a:	9b03      	ldr	r3, [sp, #12]
   1d65c:	b963      	cbnz	r3, 1d678 <complete_select+0x3c>
        complete_module(line, cur, tok_len, append_char);
    }
}
   1d65e:	b005      	add	sp, #20
   1d660:	bd30      	pop	{r4, r5, pc}
        console_out('\n');
   1d662:	200a      	movs	r0, #10
   1d664:	f7fe fb9a 	bl	1bd9c <console_out>
        print_modules(streamer_console_get());
   1d668:	f001 f95e 	bl	1e928 <streamer_console_get>
   1d66c:	f7ff fc2a 	bl	1cec4 <print_modules>
        print_prompt(line);
   1d670:	4620      	mov	r0, r4
   1d672:	f7ff fe01 	bl	1d278 <print_prompt>
        return;
   1d676:	e7f2      	b.n	1d65e <complete_select+0x22>
        complete_module(line, cur, tok_len, append_char);
   1d678:	462b      	mov	r3, r5
   1d67a:	9901      	ldr	r1, [sp, #4]
   1d67c:	4620      	mov	r0, r4
   1d67e:	f7ff fe23 	bl	1d2c8 <complete_module>
   1d682:	e7ec      	b.n	1d65e <complete_select+0x22>

0001d684 <line2argv>:
{
   1d684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d688:	460e      	mov	r6, r1
   1d68a:	4617      	mov	r7, r2
   1d68c:	4698      	mov	r8, r3
    if (!strlen(str)) {
   1d68e:	7803      	ldrb	r3, [r0, #0]
   1d690:	b343      	cbz	r3, 1d6e4 <line2argv+0x60>
    while (*str && *str == ' ') {
   1d692:	7804      	ldrb	r4, [r0, #0]
   1d694:	2c20      	cmp	r4, #32
   1d696:	d101      	bne.n	1d69c <line2argv+0x18>
        str++;
   1d698:	3001      	adds	r0, #1
   1d69a:	e7fa      	b.n	1d692 <line2argv+0xe>
    if (!*str) {
   1d69c:	b334      	cbz	r4, 1d6ec <line2argv+0x68>
    argv[argc++] = str;
   1d69e:	6030      	str	r0, [r6, #0]
   1d6a0:	2501      	movs	r5, #1
    while ((str = strchr(str, ' '))) {
   1d6a2:	e006      	b.n	1d6b2 <line2argv+0x2e>
        if (!*str) {
   1d6a4:	b1d4      	cbz	r4, 1d6dc <line2argv+0x58>
        argv[argc++] = str;
   1d6a6:	1c6b      	adds	r3, r5, #1
   1d6a8:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
        if (argc == size) {
   1d6ac:	42bb      	cmp	r3, r7
   1d6ae:	d00e      	beq.n	1d6ce <line2argv+0x4a>
        argv[argc++] = str;
   1d6b0:	461d      	mov	r5, r3
    while ((str = strchr(str, ' '))) {
   1d6b2:	2120      	movs	r1, #32
   1d6b4:	f011 fa3d 	bl	2eb32 <strchr>
   1d6b8:	4603      	mov	r3, r0
   1d6ba:	b178      	cbz	r0, 1d6dc <line2argv+0x58>
        *str++ = '\0';
   1d6bc:	4618      	mov	r0, r3
   1d6be:	2300      	movs	r3, #0
   1d6c0:	f800 3b01 	strb.w	r3, [r0], #1
        while (*str && *str == ' ') {
   1d6c4:	7804      	ldrb	r4, [r0, #0]
   1d6c6:	2c20      	cmp	r4, #32
   1d6c8:	d1ec      	bne.n	1d6a4 <line2argv+0x20>
            str++;
   1d6ca:	3001      	adds	r0, #1
   1d6cc:	e7fa      	b.n	1d6c4 <line2argv+0x40>
            streamer_printf(streamer, "Too many parameters (max %zu)\n",
   1d6ce:	1e7a      	subs	r2, r7, #1
   1d6d0:	4907      	ldr	r1, [pc, #28]	; (1d6f0 <line2argv+0x6c>)
   1d6d2:	4640      	mov	r0, r8
   1d6d4:	f001 f90d 	bl	1e8f2 <streamer_printf>
            return 0;
   1d6d8:	2500      	movs	r5, #0
   1d6da:	e004      	b.n	1d6e6 <line2argv+0x62>
    argv[argc] = NULL;
   1d6dc:	2300      	movs	r3, #0
   1d6de:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
    return argc;
   1d6e2:	e000      	b.n	1d6e6 <line2argv+0x62>
        return 0;
   1d6e4:	2500      	movs	r5, #0
}
   1d6e6:	4628      	mov	r0, r5
   1d6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return 0;
   1d6ec:	2500      	movs	r5, #0
   1d6ee:	e7fa      	b.n	1d6e6 <line2argv+0x62>
   1d6f0:	00033f6c 	.word	0x00033f6c

0001d6f4 <get_last_token>:
{
   1d6f4:	b510      	push	{r4, lr}
   1d6f6:	4604      	mov	r4, r0
    *cur = strrchr(*cur, ' ');
   1d6f8:	2120      	movs	r1, #32
   1d6fa:	6800      	ldr	r0, [r0, #0]
   1d6fc:	f011 fa3d 	bl	2eb7a <strrchr>
   1d700:	6020      	str	r0, [r4, #0]
    if (*cur == NULL) {
   1d702:	b120      	cbz	r0, 1d70e <get_last_token+0x1a>
    (*cur)++;
   1d704:	3001      	adds	r0, #1
   1d706:	6020      	str	r0, [r4, #0]
    return strlen(*cur);
   1d708:	f7fd fb1b 	bl	1ad42 <strlen>
}
   1d70c:	bd10      	pop	{r4, pc}
        return 0;
   1d70e:	2000      	movs	r0, #0
   1d710:	e7fc      	b.n	1d70c <get_last_token+0x18>
	...

0001d714 <completion>:

static void
completion(char *line, console_append_char_cb append_char)
{
   1d714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d718:	b085      	sub	sp, #20
   1d71a:	4606      	mov	r6, r0
   1d71c:	460c      	mov	r4, r1
    char *cur;
    int tok_len;
    int module, command;
    int null_terminated = 0;
   1d71e:	2100      	movs	r1, #0
   1d720:	9102      	str	r1, [sp, #8]
    int def_module = default_module;
   1d722:	4b53      	ldr	r3, [pc, #332]	; (1d870 <completion+0x15c>)
   1d724:	681f      	ldr	r7, [r3, #0]

    /*
     * line to completion is not ended by '\0' as the line that gets from
     * os_eventq_get function
     */
    if (!append_char(line, '\0')) {
   1d726:	47a0      	blx	r4
   1d728:	b910      	cbnz	r0, 1d730 <completion+0x1c>
        return;
    }
    complete_param(line, cur, tok_len,
                   module, command, append_char);
    return;
}
   1d72a:	b005      	add	sp, #20
   1d72c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cur = line;
   1d730:	9603      	str	r6, [sp, #12]
    tok_len = get_token(&cur, &null_terminated);
   1d732:	a902      	add	r1, sp, #8
   1d734:	a803      	add	r0, sp, #12
   1d736:	f7ff ff63 	bl	1d600 <get_token>
    if (tok_len > 0 && cur[0] == '/') {
   1d73a:	1e05      	subs	r5, r0, #0
   1d73c:	dd03      	ble.n	1d746 <completion+0x32>
   1d73e:	9b03      	ldr	r3, [sp, #12]
   1d740:	781a      	ldrb	r2, [r3, #0]
   1d742:	2a2f      	cmp	r2, #47	; 0x2f
   1d744:	d00d      	beq.n	1d762 <completion+0x4e>
    if (tok_len == 0) {
   1d746:	b195      	cbz	r5, 1d76e <completion+0x5a>
    if (null_terminated) {
   1d748:	9b02      	ldr	r3, [sp, #8]
   1d74a:	b363      	cbz	r3, 1d7a6 <completion+0x92>
        if (def_module == -1) {
   1d74c:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   1d750:	d022      	beq.n	1d798 <completion+0x84>
        complete_command(line, cur, tok_len,
   1d752:	9400      	str	r4, [sp, #0]
   1d754:	463b      	mov	r3, r7
   1d756:	462a      	mov	r2, r5
   1d758:	9903      	ldr	r1, [sp, #12]
   1d75a:	4630      	mov	r0, r6
   1d75c:	f7ff fe32 	bl	1d3c4 <complete_command>
        return;
   1d760:	e7e3      	b.n	1d72a <completion+0x16>
        tok_len--;
   1d762:	3d01      	subs	r5, #1
        cur++;
   1d764:	3301      	adds	r3, #1
   1d766:	9303      	str	r3, [sp, #12]
        def_module = -1;
   1d768:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1d76c:	e7eb      	b.n	1d746 <completion+0x32>
        console_out('\n');
   1d76e:	200a      	movs	r0, #10
   1d770:	f7fe fb14 	bl	1bd9c <console_out>
        if (def_module == -1) {
   1d774:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   1d778:	d009      	beq.n	1d78e <completion+0x7a>
            print_module_commands(def_module, streamer_console_get());
   1d77a:	f001 f8d5 	bl	1e928 <streamer_console_get>
   1d77e:	4601      	mov	r1, r0
   1d780:	4638      	mov	r0, r7
   1d782:	f7ff fb69 	bl	1ce58 <print_module_commands>
        print_prompt(line);
   1d786:	4630      	mov	r0, r6
   1d788:	f7ff fd76 	bl	1d278 <print_prompt>
        return;
   1d78c:	e7cd      	b.n	1d72a <completion+0x16>
            print_modules(streamer_console_get());
   1d78e:	f001 f8cb 	bl	1e928 <streamer_console_get>
   1d792:	f7ff fb97 	bl	1cec4 <print_modules>
   1d796:	e7f6      	b.n	1d786 <completion+0x72>
            complete_module(line, cur, tok_len, append_char);
   1d798:	4623      	mov	r3, r4
   1d79a:	462a      	mov	r2, r5
   1d79c:	9903      	ldr	r1, [sp, #12]
   1d79e:	4630      	mov	r0, r6
   1d7a0:	f7ff fd92 	bl	1d2c8 <complete_module>
            return;
   1d7a4:	e7c1      	b.n	1d72a <completion+0x16>
    if (strncmp("select", cur, tok_len) == 0) {
   1d7a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1d7aa:	462a      	mov	r2, r5
   1d7ac:	4641      	mov	r1, r8
   1d7ae:	4831      	ldr	r0, [pc, #196]	; (1d874 <completion+0x160>)
   1d7b0:	f011 f9d3 	bl	2eb5a <strncmp>
   1d7b4:	b1f0      	cbz	r0, 1d7f4 <completion+0xe0>
    if (def_module != -1) {
   1d7b6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   1d7ba:	d022      	beq.n	1d802 <completion+0xee>
    command = get_command_from_module(cur, tok_len, module);
   1d7bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
   1d7c0:	463a      	mov	r2, r7
   1d7c2:	4629      	mov	r1, r5
   1d7c4:	4648      	mov	r0, r9
   1d7c6:	f7ff fe83 	bl	1d4d0 <get_command_from_module>
   1d7ca:	4680      	mov	r8, r0
    if (command == -1) {
   1d7cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1d7d0:	d0ab      	beq.n	1d72a <completion+0x16>
    cur += tok_len;
   1d7d2:	444d      	add	r5, r9
   1d7d4:	9503      	str	r5, [sp, #12]
    tok_len = get_last_token(&cur);
   1d7d6:	a803      	add	r0, sp, #12
   1d7d8:	f7ff ff8c 	bl	1d6f4 <get_last_token>
    if (tok_len == 0) {
   1d7dc:	4602      	mov	r2, r0
   1d7de:	2800      	cmp	r0, #0
   1d7e0:	d038      	beq.n	1d854 <completion+0x140>
    complete_param(line, cur, tok_len,
   1d7e2:	9401      	str	r4, [sp, #4]
   1d7e4:	f8cd 8000 	str.w	r8, [sp]
   1d7e8:	463b      	mov	r3, r7
   1d7ea:	9903      	ldr	r1, [sp, #12]
   1d7ec:	4630      	mov	r0, r6
   1d7ee:	f7ff fe93 	bl	1d518 <complete_param>
    return;
   1d7f2:	e79a      	b.n	1d72a <completion+0x16>
        complete_select(line, cur, tok_len, append_char);
   1d7f4:	4623      	mov	r3, r4
   1d7f6:	462a      	mov	r2, r5
   1d7f8:	4641      	mov	r1, r8
   1d7fa:	4630      	mov	r0, r6
   1d7fc:	f7ff ff1e 	bl	1d63c <complete_select>
        return;
   1d800:	e793      	b.n	1d72a <completion+0x16>
        module = get_destination_module(cur, tok_len);
   1d802:	4629      	mov	r1, r5
   1d804:	4640      	mov	r0, r8
   1d806:	f7ff fb97 	bl	1cf38 <get_destination_module>
   1d80a:	4607      	mov	r7, r0
        if (module == -1) {
   1d80c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1d810:	d08b      	beq.n	1d72a <completion+0x16>
        cur += tok_len + 1;
   1d812:	1c6b      	adds	r3, r5, #1
   1d814:	4443      	add	r3, r8
   1d816:	9303      	str	r3, [sp, #12]
        tok_len = get_token(&cur, &null_terminated);
   1d818:	a902      	add	r1, sp, #8
   1d81a:	a803      	add	r0, sp, #12
   1d81c:	f7ff fef0 	bl	1d600 <get_token>
        if (tok_len == 0) {
   1d820:	4605      	mov	r5, r0
   1d822:	b150      	cbz	r0, 1d83a <completion+0x126>
        if (null_terminated) {
   1d824:	9b02      	ldr	r3, [sp, #8]
   1d826:	2b00      	cmp	r3, #0
   1d828:	d0c8      	beq.n	1d7bc <completion+0xa8>
            complete_command(line, cur, tok_len,
   1d82a:	9400      	str	r4, [sp, #0]
   1d82c:	463b      	mov	r3, r7
   1d82e:	4602      	mov	r2, r0
   1d830:	9903      	ldr	r1, [sp, #12]
   1d832:	4630      	mov	r0, r6
   1d834:	f7ff fdc6 	bl	1d3c4 <complete_command>
            return;
   1d838:	e777      	b.n	1d72a <completion+0x16>
            console_out('\n');
   1d83a:	200a      	movs	r0, #10
   1d83c:	f7fe faae 	bl	1bd9c <console_out>
            print_module_commands(module, streamer_console_get());
   1d840:	f001 f872 	bl	1e928 <streamer_console_get>
   1d844:	4601      	mov	r1, r0
   1d846:	4638      	mov	r0, r7
   1d848:	f7ff fb06 	bl	1ce58 <print_module_commands>
            print_prompt(line);
   1d84c:	4630      	mov	r0, r6
   1d84e:	f7ff fd13 	bl	1d278 <print_prompt>
            return;
   1d852:	e76a      	b.n	1d72a <completion+0x16>
        console_out('\n');
   1d854:	200a      	movs	r0, #10
   1d856:	f7fe faa1 	bl	1bd9c <console_out>
        print_command_params(module, command, streamer_console_get());
   1d85a:	f001 f865 	bl	1e928 <streamer_console_get>
   1d85e:	4602      	mov	r2, r0
   1d860:	4641      	mov	r1, r8
   1d862:	4638      	mov	r0, r7
   1d864:	f7ff fb46 	bl	1cef4 <print_command_params>
        print_prompt(line);
   1d868:	4630      	mov	r0, r6
   1d86a:	f7ff fd05 	bl	1d278 <print_prompt>
        return;
   1d86e:	e75c      	b.n	1d72a <completion+0x16>
   1d870:	100006a8 	.word	0x100006a8
   1d874:	00033ec8 	.word	0x00033ec8

0001d878 <shell_avail_queue_init>:
    }
}

static void
shell_avail_queue_init(void)
{
   1d878:	b510      	push	{r4, lr}
    int i;

    for (i = 0; i < MYNEWT_VAL(SHELL_MAX_CMD_QUEUED); i++) {
   1d87a:	2400      	movs	r4, #0
   1d87c:	e00b      	b.n	1d896 <shell_avail_queue_init+0x1e>
        shell_console_ev[i].ev_cb = shell;
   1d87e:	4807      	ldr	r0, [pc, #28]	; (1d89c <shell_avail_queue_init+0x24>)
   1d880:	eb00 1004 	add.w	r0, r0, r4, lsl #4
   1d884:	4b06      	ldr	r3, [pc, #24]	; (1d8a0 <shell_avail_queue_init+0x28>)
   1d886:	6043      	str	r3, [r0, #4]
        shell_console_ev[i].ev_arg = &buf[i];
   1d888:	4b06      	ldr	r3, [pc, #24]	; (1d8a4 <shell_avail_queue_init+0x2c>)
   1d88a:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   1d88e:	6083      	str	r3, [r0, #8]
        console_line_event_put(&shell_console_ev[i]);
   1d890:	f7fe fbe4 	bl	1c05c <console_line_event_put>
    for (i = 0; i < MYNEWT_VAL(SHELL_MAX_CMD_QUEUED); i++) {
   1d894:	3401      	adds	r4, #1
   1d896:	2c01      	cmp	r4, #1
   1d898:	ddf1      	ble.n	1d87e <shell_avail_queue_init+0x6>
    }
}
   1d89a:	bd10      	pop	{r4, pc}
   1d89c:	10005530 	.word	0x10005530
   1d8a0:	0001d99b 	.word	0x0001d99b
   1d8a4:	100051d0 	.word	0x100051d0

0001d8a8 <shell_evq_set>:
{
   1d8a8:	b508      	push	{r3, lr}
    console_line_queue_set(shell_evq);
   1d8aa:	f7fe fbd1 	bl	1c050 <console_line_queue_set>
}
   1d8ae:	bd08      	pop	{r3, pc}

0001d8b0 <shell_exec>:
{
   1d8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d8b4:	4607      	mov	r7, r0
   1d8b6:	460c      	mov	r4, r1
   1d8b8:	4616      	mov	r6, r2
    int def_module = default_module;
   1d8ba:	4b28      	ldr	r3, [pc, #160]	; (1d95c <shell_exec+0xac>)
   1d8bc:	f8d3 8000 	ldr.w	r8, [r3]
    cmd = shell_find_cmd(argc, argv, streamer);
   1d8c0:	f7ff fbbe 	bl	1d040 <shell_find_cmd>
    if (!cmd) {
   1d8c4:	4605      	mov	r5, r0
   1d8c6:	b1c8      	cbz	r0, 1d8fc <shell_exec+0x4c>
    if (argv[0][0] == '/') {
   1d8c8:	6823      	ldr	r3, [r4, #0]
   1d8ca:	781b      	ldrb	r3, [r3, #0]
   1d8cc:	2b2f      	cmp	r3, #47	; 0x2f
   1d8ce:	d029      	beq.n	1d924 <shell_exec+0x74>
    if (def_module == -1 && cmd != &shell_cmd_select_module &&
   1d8d0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1d8d4:	d026      	beq.n	1d924 <shell_exec+0x74>
    size_t argc_offset = 0;
   1d8d6:	2000      	movs	r0, #0
    if (!cmd->sc_ext) {
   1d8d8:	782b      	ldrb	r3, [r5, #0]
   1d8da:	f013 0f01 	tst.w	r3, #1
   1d8de:	d12d      	bne.n	1d93c <shell_exec+0x8c>
        rc = cmd->sc_cmd_func(argc - argc_offset, &argv[argc_offset]);
   1d8e0:	686b      	ldr	r3, [r5, #4]
   1d8e2:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   1d8e6:	1a38      	subs	r0, r7, r0
   1d8e8:	4798      	blx	r3
   1d8ea:	4605      	mov	r5, r0
    if (rc < 0) {
   1d8ec:	2d00      	cmp	r5, #0
   1d8ee:	db2f      	blt.n	1d950 <shell_exec+0xa0>
    print_prompt_if_console(streamer);
   1d8f0:	4630      	mov	r0, r6
   1d8f2:	f7ff fcdd 	bl	1d2b0 <print_prompt_if_console>
}
   1d8f6:	4628      	mov	r0, r5
   1d8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (app_cmd.sc_cmd_func != NULL) {
   1d8fc:	4b18      	ldr	r3, [pc, #96]	; (1d960 <shell_exec+0xb0>)
   1d8fe:	685b      	ldr	r3, [r3, #4]
   1d900:	b10b      	cbz	r3, 1d906 <shell_exec+0x56>
            cmd = &app_cmd;
   1d902:	4d17      	ldr	r5, [pc, #92]	; (1d960 <shell_exec+0xb0>)
   1d904:	e7e0      	b.n	1d8c8 <shell_exec+0x18>
            streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
   1d906:	6822      	ldr	r2, [r4, #0]
   1d908:	4916      	ldr	r1, [pc, #88]	; (1d964 <shell_exec+0xb4>)
   1d90a:	4630      	mov	r0, r6
   1d90c:	f000 fff1 	bl	1e8f2 <streamer_printf>
            streamer_printf(streamer,
   1d910:	4915      	ldr	r1, [pc, #84]	; (1d968 <shell_exec+0xb8>)
   1d912:	4630      	mov	r0, r6
   1d914:	f000 ffed 	bl	1e8f2 <streamer_printf>
            print_prompt_if_console(streamer);
   1d918:	4630      	mov	r0, r6
   1d91a:	f7ff fcc9 	bl	1d2b0 <print_prompt_if_console>
            return SYS_ENOENT;
   1d91e:	f06f 0503 	mvn.w	r5, #3
   1d922:	e7e8      	b.n	1d8f6 <shell_exec+0x46>
    if (def_module == -1 && cmd != &shell_cmd_select_module &&
   1d924:	4b11      	ldr	r3, [pc, #68]	; (1d96c <shell_exec+0xbc>)
   1d926:	429d      	cmp	r5, r3
   1d928:	d006      	beq.n	1d938 <shell_exec+0x88>
   1d92a:	4b11      	ldr	r3, [pc, #68]	; (1d970 <shell_exec+0xc0>)
   1d92c:	429d      	cmp	r5, r3
   1d92e:	d001      	beq.n	1d934 <shell_exec+0x84>
        argc_offset = 1;
   1d930:	2001      	movs	r0, #1
   1d932:	e7d1      	b.n	1d8d8 <shell_exec+0x28>
    size_t argc_offset = 0;
   1d934:	2000      	movs	r0, #0
   1d936:	e7cf      	b.n	1d8d8 <shell_exec+0x28>
   1d938:	2000      	movs	r0, #0
   1d93a:	e7cd      	b.n	1d8d8 <shell_exec+0x28>
        rc = cmd->sc_cmd_ext_func(cmd, argc - argc_offset, &argv[argc_offset],
   1d93c:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1d940:	4633      	mov	r3, r6
   1d942:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1d946:	1a39      	subs	r1, r7, r0
   1d948:	4628      	mov	r0, r5
   1d94a:	47c0      	blx	r8
   1d94c:	4605      	mov	r5, r0
   1d94e:	e7cd      	b.n	1d8ec <shell_exec+0x3c>
        show_cmd_help(argv, streamer);
   1d950:	4631      	mov	r1, r6
   1d952:	4620      	mov	r0, r4
   1d954:	f7ff fbdc 	bl	1d110 <show_cmd_help>
   1d958:	e7ca      	b.n	1d8f0 <shell_exec+0x40>
   1d95a:	bf00      	nop
   1d95c:	100006a8 	.word	0x100006a8
   1d960:	100051bc 	.word	0x100051bc
   1d964:	00033e7c 	.word	0x00033e7c
   1d968:	00033f8c 	.word	0x00033f8c
   1d96c:	0003404c 	.word	0x0003404c
   1d970:	0003403c 	.word	0x0003403c

0001d974 <shell_process_command>:
{
   1d974:	b510      	push	{r4, lr}
   1d976:	b08e      	sub	sp, #56	; 0x38
   1d978:	460c      	mov	r4, r1
    argc = line2argv(line, argv, MYNEWT_VAL(SHELL_CMD_ARGC_MAX) + 1, streamer);
   1d97a:	460b      	mov	r3, r1
   1d97c:	220d      	movs	r2, #13
   1d97e:	a901      	add	r1, sp, #4
   1d980:	f7ff fe80 	bl	1d684 <line2argv>
    if (!argc) {
   1d984:	b128      	cbz	r0, 1d992 <shell_process_command+0x1e>
    shell_exec(argc, argv, streamer);
   1d986:	4622      	mov	r2, r4
   1d988:	a901      	add	r1, sp, #4
   1d98a:	f7ff ff91 	bl	1d8b0 <shell_exec>
}
   1d98e:	b00e      	add	sp, #56	; 0x38
   1d990:	bd10      	pop	{r4, pc}
        print_prompt_if_console(streamer);
   1d992:	4620      	mov	r0, r4
   1d994:	f7ff fc8c 	bl	1d2b0 <print_prompt_if_console>
        return;
   1d998:	e7f9      	b.n	1d98e <shell_process_command+0x1a>

0001d99a <shell>:
{
   1d99a:	b538      	push	{r3, r4, r5, lr}
    if (!ev) {
   1d99c:	b160      	cbz	r0, 1d9b8 <shell+0x1e>
   1d99e:	4604      	mov	r4, r0
    cmd = ev->ev_arg;
   1d9a0:	6885      	ldr	r5, [r0, #8]
    if (!cmd) {
   1d9a2:	b165      	cbz	r5, 1d9be <shell+0x24>
    streamer = streamer_console_get();
   1d9a4:	f000 ffc0 	bl	1e928 <streamer_console_get>
   1d9a8:	4601      	mov	r1, r0
    shell_process_command(cmd->line, streamer);
   1d9aa:	4628      	mov	r0, r5
   1d9ac:	f7ff ffe2 	bl	1d974 <shell_process_command>
    console_line_event_put(ev);
   1d9b0:	4620      	mov	r0, r4
   1d9b2:	f7fe fb53 	bl	1c05c <console_line_event_put>
}
   1d9b6:	bd38      	pop	{r3, r4, r5, pc}
        print_prompt(NULL);
   1d9b8:	f7ff fc5e 	bl	1d278 <print_prompt>
        return;
   1d9bc:	e7fb      	b.n	1d9b6 <shell+0x1c>
        print_prompt(NULL);
   1d9be:	2000      	movs	r0, #0
   1d9c0:	f7ff fc5a 	bl	1d278 <print_prompt>
        return;
   1d9c4:	e7f7      	b.n	1d9b6 <shell+0x1c>

0001d9c6 <shell_register_default_module>:
{
   1d9c6:	b508      	push	{r3, lr}
    int result = set_default_module(name);
   1d9c8:	f7ff fadc 	bl	1cf84 <set_default_module>
    if (result != -1) {
   1d9cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1d9d0:	d100      	bne.n	1d9d4 <shell_register_default_module+0xe>
}
   1d9d2:	bd08      	pop	{r3, pc}
        console_out('\n');
   1d9d4:	200a      	movs	r0, #10
   1d9d6:	f7fe f9e1 	bl	1bd9c <console_out>
        print_prompt(NULL);
   1d9da:	2000      	movs	r0, #0
   1d9dc:	f7ff fc4c 	bl	1d278 <print_prompt>
}
   1d9e0:	e7f7      	b.n	1d9d2 <shell_register_default_module+0xc>
	...

0001d9e4 <shell_register>:

int
shell_register(const char *module_name, const struct shell_cmd *commands)
{
   1d9e4:	b508      	push	{r3, lr}
    if (num_of_shell_entities >= MYNEWT_VAL(SHELL_MAX_MODULES)) {
   1d9e6:	4b0f      	ldr	r3, [pc, #60]	; (1da24 <shell_register+0x40>)
   1d9e8:	681b      	ldr	r3, [r3, #0]
   1d9ea:	2b02      	cmp	r3, #2
   1d9ec:	d80a      	bhi.n	1da04 <shell_register+0x20>
        DFLT_LOG_ERROR("Max number of modules reached\n");
        assert(0);
    }

    shell_modules[num_of_shell_entities].name = module_name;
   1d9ee:	4a0e      	ldr	r2, [pc, #56]	; (1da28 <shell_register+0x44>)
   1d9f0:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    shell_modules[num_of_shell_entities].commands = commands;
   1d9f4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1d9f8:	6051      	str	r1, [r2, #4]
    ++num_of_shell_entities;
   1d9fa:	3301      	adds	r3, #1
   1d9fc:	4a09      	ldr	r2, [pc, #36]	; (1da24 <shell_register+0x40>)
   1d9fe:	6013      	str	r3, [r2, #0]

    return 0;
}
   1da00:	2000      	movs	r0, #0
   1da02:	bd08      	pop	{r3, pc}
        DFLT_LOG_ERROR("Max number of modules reached\n");
   1da04:	4a09      	ldr	r2, [pc, #36]	; (1da2c <shell_register+0x48>)
   1da06:	2103      	movs	r1, #3
   1da08:	2000      	movs	r0, #0
   1da0a:	f7ff f987 	bl	1cd1c <modlog_printf>
        assert(0);
   1da0e:	f7f6 fe79 	bl	14704 <hal_debugger_connected>
   1da12:	b100      	cbz	r0, 1da16 <shell_register+0x32>
   1da14:	be01      	bkpt	0x0001
   1da16:	2300      	movs	r3, #0
   1da18:	461a      	mov	r2, r3
   1da1a:	4619      	mov	r1, r3
   1da1c:	4618      	mov	r0, r3
   1da1e:	f7fb f981 	bl	18d24 <__assert_func>
   1da22:	bf00      	nop
   1da24:	10005528 	.word	0x10005528
   1da28:	10005550 	.word	0x10005550
   1da2c:	00033fb8 	.word	0x00033fb8

0001da30 <shell_cmd_register>:
static int num_compat_commands;
static int module_registered;

int
shell_cmd_register(const struct shell_cmd *sc)
{
   1da30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int rc;

    if (num_compat_commands >= MYNEWT_VAL(SHELL_MAX_COMPAT_COMMANDS)) {
   1da32:	4b1c      	ldr	r3, [pc, #112]	; (1daa4 <shell_cmd_register+0x74>)
   1da34:	681b      	ldr	r3, [r3, #0]
   1da36:	2b13      	cmp	r3, #19
   1da38:	dc10      	bgt.n	1da5c <shell_cmd_register+0x2c>
   1da3a:	4604      	mov	r4, r0
        DFLT_LOG_ERROR(
                     "Max number of compat commands reached\n");
        assert(0);
    }

    if (!module_registered) {
   1da3c:	4b1a      	ldr	r3, [pc, #104]	; (1daa8 <shell_cmd_register+0x78>)
   1da3e:	681b      	ldr	r3, [r3, #0]
   1da40:	b1db      	cbz	r3, 1da7a <shell_cmd_register+0x4a>
                         "Illegal module %s, default is not changed\n",
                         SHELL_COMPAT_MODULE_NAME);
        }
    }

    compat_commands[num_compat_commands] = *sc;
   1da42:	4f18      	ldr	r7, [pc, #96]	; (1daa4 <shell_cmd_register+0x74>)
   1da44:	683e      	ldr	r6, [r7, #0]
   1da46:	4d19      	ldr	r5, [pc, #100]	; (1daac <shell_cmd_register+0x7c>)
   1da48:	eb05 1506 	add.w	r5, r5, r6, lsl #4
   1da4c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1da50:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    ++num_compat_commands;
   1da54:	3601      	adds	r6, #1
   1da56:	603e      	str	r6, [r7, #0]
    return 0;
}
   1da58:	2000      	movs	r0, #0
   1da5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        DFLT_LOG_ERROR(
   1da5c:	4a14      	ldr	r2, [pc, #80]	; (1dab0 <shell_cmd_register+0x80>)
   1da5e:	2103      	movs	r1, #3
   1da60:	2000      	movs	r0, #0
   1da62:	f7ff f95b 	bl	1cd1c <modlog_printf>
        assert(0);
   1da66:	f7f6 fe4d 	bl	14704 <hal_debugger_connected>
   1da6a:	b100      	cbz	r0, 1da6e <shell_cmd_register+0x3e>
   1da6c:	be01      	bkpt	0x0001
   1da6e:	2300      	movs	r3, #0
   1da70:	461a      	mov	r2, r3
   1da72:	4619      	mov	r1, r3
   1da74:	4618      	mov	r0, r3
   1da76:	f7fb f955 	bl	18d24 <__assert_func>
        shell_register(SHELL_COMPAT_MODULE_NAME, compat_commands);
   1da7a:	4d0e      	ldr	r5, [pc, #56]	; (1dab4 <shell_cmd_register+0x84>)
   1da7c:	490b      	ldr	r1, [pc, #44]	; (1daac <shell_cmd_register+0x7c>)
   1da7e:	4628      	mov	r0, r5
   1da80:	f7ff ffb0 	bl	1d9e4 <shell_register>
        module_registered = 1;
   1da84:	4b08      	ldr	r3, [pc, #32]	; (1daa8 <shell_cmd_register+0x78>)
   1da86:	2201      	movs	r2, #1
   1da88:	601a      	str	r2, [r3, #0]
        rc = set_default_module(SHELL_COMPAT_MODULE_NAME);
   1da8a:	4628      	mov	r0, r5
   1da8c:	f7ff fa7a 	bl	1cf84 <set_default_module>
        if (rc != 0) {
   1da90:	2800      	cmp	r0, #0
   1da92:	d0d6      	beq.n	1da42 <shell_cmd_register+0x12>
            DFLT_LOG_ERROR(
   1da94:	462b      	mov	r3, r5
   1da96:	4a08      	ldr	r2, [pc, #32]	; (1dab8 <shell_cmd_register+0x88>)
   1da98:	2103      	movs	r1, #3
   1da9a:	2000      	movs	r0, #0
   1da9c:	f7ff f93e 	bl	1cd1c <modlog_printf>
   1daa0:	e7cf      	b.n	1da42 <shell_cmd_register+0x12>
   1daa2:	bf00      	nop
   1daa4:	10005524 	.word	0x10005524
   1daa8:	10005520 	.word	0x10005520
   1daac:	100053d0 	.word	0x100053d0
   1dab0:	00033fd8 	.word	0x00033fd8
   1dab4:	00034000 	.word	0x00034000
   1dab8:	00034008 	.word	0x00034008

0001dabc <shell_init>:
#endif

void
shell_init(void)
{
   1dabc:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1dabe:	4b0e      	ldr	r3, [pc, #56]	; (1daf8 <shell_init+0x3c>)
   1dac0:	781b      	ldrb	r3, [r3, #0]
   1dac2:	b173      	cbz	r3, 1dae2 <shell_init+0x26>

#if !MYNEWT_VAL(SHELL_TASK)
    return;
#endif

    shell_avail_queue_init();
   1dac4:	f7ff fed8 	bl	1d878 <shell_avail_queue_init>
    shell_evq_set(os_eventq_dflt_get());
   1dac8:	f7fb fd5e 	bl	19588 <os_eventq_dflt_get>
   1dacc:	f7ff feec 	bl	1d8a8 <shell_evq_set>

    prompt = SHELL_PROMPT;
   1dad0:	4b0a      	ldr	r3, [pc, #40]	; (1dafc <shell_init+0x40>)
   1dad2:	4a0b      	ldr	r2, [pc, #44]	; (1db00 <shell_init+0x44>)
   1dad4:	601a      	str	r2, [r3, #0]
#if MYNEWT_VAL(SHELL_MGMT)
    shell_nlip_init();
#endif

#if MYNEWT_VAL(SHELL_COMPLETION)
    console_set_completion_cb(completion);
   1dad6:	480b      	ldr	r0, [pc, #44]	; (1db04 <shell_init+0x48>)
   1dad8:	f7fe fad4 	bl	1c084 <console_set_completion_cb>
#endif

#if MYNEWT_VAL(SHELL_OS_MODULE)
    shell_os_register();
   1dadc:	f000 f966 	bl	1ddac <shell_os_register>
    shell_prompt_register();
#endif
#if MYNEWT_VAL(SHELL_BRIDGE)
    shell_bridge_init();
#endif
}
   1dae0:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1dae2:	f7f6 fe0f 	bl	14704 <hal_debugger_connected>
   1dae6:	b100      	cbz	r0, 1daea <shell_init+0x2e>
   1dae8:	be01      	bkpt	0x0001
   1daea:	2300      	movs	r3, #0
   1daec:	461a      	mov	r2, r3
   1daee:	4619      	mov	r1, r3
   1daf0:	4618      	mov	r0, r3
   1daf2:	f7fb f917 	bl	18d24 <__assert_func>
   1daf6:	bf00      	nop
   1daf8:	100055a0 	.word	0x100055a0
   1dafc:	1000552c 	.word	0x1000552c
   1db00:	00034034 	.word	0x00034034
   1db04:	0001d715 	.word	0x0001d715

0001db08 <shell_os_ls_dev>:
    return 0;
}

static int
shell_os_ls_dev(struct os_dev *dev, void *arg)
{
   1db08:	b500      	push	{lr}
   1db0a:	b083      	sub	sp, #12
   1db0c:	4602      	mov	r2, r0
   1db0e:	4608      	mov	r0, r1
    struct streamer *streamer;

    streamer = arg;
    streamer_printf(streamer, "%4d %3x %s\n",
   1db10:	69d3      	ldr	r3, [r2, #28]
   1db12:	9300      	str	r3, [sp, #0]
   1db14:	7ed3      	ldrb	r3, [r2, #27]
   1db16:	7e92      	ldrb	r2, [r2, #26]
   1db18:	4903      	ldr	r1, [pc, #12]	; (1db28 <shell_os_ls_dev+0x20>)
   1db1a:	f000 feea 	bl	1e8f2 <streamer_printf>
                    dev->od_open_ref, dev->od_flags, dev->od_name);
    return 0;
}
   1db1e:	2000      	movs	r0, #0
   1db20:	b003      	add	sp, #12
   1db22:	f85d fb04 	ldr.w	pc, [sp], #4
   1db26:	bf00      	nop
   1db28:	0003405c 	.word	0x0003405c

0001db2c <shell_os_mpool_display_cmd>:
{
   1db2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db2e:	b091      	sub	sp, #68	; 0x44
   1db30:	461e      	mov	r6, r3
    if (argc > 1 && strcmp(argv[1], "")) {
   1db32:	2901      	cmp	r1, #1
   1db34:	dd04      	ble.n	1db40 <shell_os_mpool_display_cmd+0x14>
   1db36:	6855      	ldr	r5, [r2, #4]
   1db38:	782b      	ldrb	r3, [r5, #0]
   1db3a:	b913      	cbnz	r3, 1db42 <shell_os_mpool_display_cmd+0x16>
    name = NULL;
   1db3c:	2500      	movs	r5, #0
   1db3e:	e000      	b.n	1db42 <shell_os_mpool_display_cmd+0x16>
   1db40:	2500      	movs	r5, #0
    streamer_printf(streamer, "Mempools: \n");
   1db42:	491d      	ldr	r1, [pc, #116]	; (1dbb8 <shell_os_mpool_display_cmd+0x8c>)
   1db44:	4630      	mov	r0, r6
   1db46:	f000 fed4 	bl	1e8f2 <streamer_printf>
    streamer_printf(streamer, "%32s %5s %4s %4s %4s\n",
   1db4a:	4b1c      	ldr	r3, [pc, #112]	; (1dbbc <shell_os_mpool_display_cmd+0x90>)
   1db4c:	9302      	str	r3, [sp, #8]
   1db4e:	4b1c      	ldr	r3, [pc, #112]	; (1dbc0 <shell_os_mpool_display_cmd+0x94>)
   1db50:	9301      	str	r3, [sp, #4]
   1db52:	4b1c      	ldr	r3, [pc, #112]	; (1dbc4 <shell_os_mpool_display_cmd+0x98>)
   1db54:	9300      	str	r3, [sp, #0]
   1db56:	4b1c      	ldr	r3, [pc, #112]	; (1dbc8 <shell_os_mpool_display_cmd+0x9c>)
   1db58:	4a1c      	ldr	r2, [pc, #112]	; (1dbcc <shell_os_mpool_display_cmd+0xa0>)
   1db5a:	491d      	ldr	r1, [pc, #116]	; (1dbd0 <shell_os_mpool_display_cmd+0xa4>)
   1db5c:	4630      	mov	r0, r6
   1db5e:	f000 fec8 	bl	1e8f2 <streamer_printf>
    found = 0;
   1db62:	2700      	movs	r7, #0
    mp = NULL;
   1db64:	463c      	mov	r4, r7
   1db66:	e00b      	b.n	1db80 <shell_os_mpool_display_cmd+0x54>
        streamer_printf(streamer, "%32s %5d %4d %4d %4d\n", omi.omi_name,
   1db68:	9b07      	ldr	r3, [sp, #28]
   1db6a:	9302      	str	r3, [sp, #8]
   1db6c:	9a06      	ldr	r2, [sp, #24]
   1db6e:	9201      	str	r2, [sp, #4]
   1db70:	9a05      	ldr	r2, [sp, #20]
   1db72:	9200      	str	r2, [sp, #0]
   1db74:	9b04      	ldr	r3, [sp, #16]
   1db76:	aa08      	add	r2, sp, #32
   1db78:	4916      	ldr	r1, [pc, #88]	; (1dbd4 <shell_os_mpool_display_cmd+0xa8>)
   1db7a:	4630      	mov	r0, r6
   1db7c:	f000 feb9 	bl	1e8f2 <streamer_printf>
        mp = os_mempool_info_get_next(mp, &omi);
   1db80:	a904      	add	r1, sp, #16
   1db82:	4620      	mov	r0, r4
   1db84:	f7fc f9b2 	bl	19eec <os_mempool_info_get_next>
        if (mp == NULL) {
   1db88:	4604      	mov	r4, r0
   1db8a:	b148      	cbz	r0, 1dba0 <shell_os_mpool_display_cmd+0x74>
        if (name) {
   1db8c:	2d00      	cmp	r5, #0
   1db8e:	d0eb      	beq.n	1db68 <shell_os_mpool_display_cmd+0x3c>
            if (strcmp(name, omi.omi_name)) {
   1db90:	a908      	add	r1, sp, #32
   1db92:	4628      	mov	r0, r5
   1db94:	f7fd f8c9 	bl	1ad2a <strcmp>
   1db98:	2800      	cmp	r0, #0
   1db9a:	d1f1      	bne.n	1db80 <shell_os_mpool_display_cmd+0x54>
                found = 1;
   1db9c:	2701      	movs	r7, #1
   1db9e:	e7e3      	b.n	1db68 <shell_os_mpool_display_cmd+0x3c>
    if (name && !found) {
   1dba0:	b105      	cbz	r5, 1dba4 <shell_os_mpool_display_cmd+0x78>
   1dba2:	b117      	cbz	r7, 1dbaa <shell_os_mpool_display_cmd+0x7e>
}
   1dba4:	2000      	movs	r0, #0
   1dba6:	b011      	add	sp, #68	; 0x44
   1dba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Couldn't find a memory pool with name %s\n",
   1dbaa:	462a      	mov	r2, r5
   1dbac:	490a      	ldr	r1, [pc, #40]	; (1dbd8 <shell_os_mpool_display_cmd+0xac>)
   1dbae:	4630      	mov	r0, r6
   1dbb0:	f000 fe9f 	bl	1e8f2 <streamer_printf>
   1dbb4:	e7f6      	b.n	1dba4 <shell_os_mpool_display_cmd+0x78>
   1dbb6:	bf00      	nop
   1dbb8:	00034068 	.word	0x00034068
   1dbbc:	00031634 	.word	0x00031634
   1dbc0:	00034094 	.word	0x00034094
   1dbc4:	0003409c 	.word	0x0003409c
   1dbc8:	00034074 	.word	0x00034074
   1dbcc:	00030d38 	.word	0x00030d38
   1dbd0:	0003407c 	.word	0x0003407c
   1dbd4:	000340a0 	.word	0x000340a0
   1dbd8:	000340b8 	.word	0x000340b8

0001dbdc <shell_os_date_cmd>:
{
   1dbdc:	b530      	push	{r4, r5, lr}
   1dbde:	b08f      	sub	sp, #60	; 0x3c
   1dbe0:	461c      	mov	r4, r3
    if (argc == 0) {
   1dbe2:	3901      	subs	r1, #1
   1dbe4:	d00f      	beq.n	1dc06 <shell_os_date_cmd+0x2a>
   1dbe6:	4610      	mov	r0, r2
    } else if (argc == 1) {
   1dbe8:	2901      	cmp	r1, #1
   1dbea:	d13a      	bne.n	1dc62 <shell_os_date_cmd+0x86>
        rc = datetime_parse(*argv, &tv, &tz);
   1dbec:	aa09      	add	r2, sp, #36	; 0x24
   1dbee:	a90a      	add	r1, sp, #40	; 0x28
   1dbf0:	6840      	ldr	r0, [r0, #4]
   1dbf2:	f000 fc13 	bl	1e41c <datetime_parse>
        if (rc == 0) {
   1dbf6:	4605      	mov	r5, r0
   1dbf8:	bb70      	cbnz	r0, 1dc58 <shell_os_date_cmd+0x7c>
            rc = os_settimeofday(&tv, &tz);
   1dbfa:	a909      	add	r1, sp, #36	; 0x24
   1dbfc:	a80a      	add	r0, sp, #40	; 0x28
   1dbfe:	f7fc fdc1 	bl	1a784 <os_settimeofday>
   1dc02:	4605      	mov	r5, r0
   1dc04:	e011      	b.n	1dc2a <shell_os_date_cmd+0x4e>
        rc = os_gettimeofday(&tv, &tz);
   1dc06:	a909      	add	r1, sp, #36	; 0x24
   1dc08:	a80a      	add	r0, sp, #40	; 0x28
   1dc0a:	f7fc fd6f 	bl	1a6ec <os_gettimeofday>
        assert(rc == 0);
   1dc0e:	b978      	cbnz	r0, 1dc30 <shell_os_date_cmd+0x54>
        rc = datetime_format(&tv, &tz, buf, sizeof(buf));
   1dc10:	2321      	movs	r3, #33	; 0x21
   1dc12:	466a      	mov	r2, sp
   1dc14:	a909      	add	r1, sp, #36	; 0x24
   1dc16:	a80a      	add	r0, sp, #40	; 0x28
   1dc18:	f000 fcfc 	bl	1e614 <datetime_format>
        assert(rc == 0);
   1dc1c:	4605      	mov	r5, r0
   1dc1e:	b988      	cbnz	r0, 1dc44 <shell_os_date_cmd+0x68>
        streamer_printf(streamer, "%s\n", buf);
   1dc20:	466a      	mov	r2, sp
   1dc22:	4911      	ldr	r1, [pc, #68]	; (1dc68 <shell_os_date_cmd+0x8c>)
   1dc24:	4620      	mov	r0, r4
   1dc26:	f000 fe64 	bl	1e8f2 <streamer_printf>
}
   1dc2a:	4628      	mov	r0, r5
   1dc2c:	b00f      	add	sp, #60	; 0x3c
   1dc2e:	bd30      	pop	{r4, r5, pc}
        assert(rc == 0);
   1dc30:	f7f6 fd68 	bl	14704 <hal_debugger_connected>
   1dc34:	b100      	cbz	r0, 1dc38 <shell_os_date_cmd+0x5c>
   1dc36:	be01      	bkpt	0x0001
   1dc38:	2300      	movs	r3, #0
   1dc3a:	461a      	mov	r2, r3
   1dc3c:	4619      	mov	r1, r3
   1dc3e:	4618      	mov	r0, r3
   1dc40:	f7fb f870 	bl	18d24 <__assert_func>
        assert(rc == 0);
   1dc44:	f7f6 fd5e 	bl	14704 <hal_debugger_connected>
   1dc48:	b100      	cbz	r0, 1dc4c <shell_os_date_cmd+0x70>
   1dc4a:	be01      	bkpt	0x0001
   1dc4c:	2300      	movs	r3, #0
   1dc4e:	461a      	mov	r2, r3
   1dc50:	4619      	mov	r1, r3
   1dc52:	4618      	mov	r0, r3
   1dc54:	f7fb f866 	bl	18d24 <__assert_func>
            streamer_printf(streamer, "Invalid datetime\n");
   1dc58:	4904      	ldr	r1, [pc, #16]	; (1dc6c <shell_os_date_cmd+0x90>)
   1dc5a:	4620      	mov	r0, r4
   1dc5c:	f000 fe49 	bl	1e8f2 <streamer_printf>
   1dc60:	e7e3      	b.n	1dc2a <shell_os_date_cmd+0x4e>
        rc = -1;
   1dc62:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    return rc;
   1dc66:	e7e0      	b.n	1dc2a <shell_os_date_cmd+0x4e>
   1dc68:	00034108 	.word	0x00034108
   1dc6c:	000340e4 	.word	0x000340e4

0001dc70 <shell_os_reset_cmd>:
{
   1dc70:	b508      	push	{r3, lr}
    os_time_delay(OS_TICKS_PER_SEC / 10);
   1dc72:	200c      	movs	r0, #12
   1dc74:	f7fc fd26 	bl	1a6c4 <os_time_delay>
    os_reboot(HAL_RESET_REQUESTED);
   1dc78:	2006      	movs	r0, #6
   1dc7a:	f7fb fa08 	bl	1908e <os_reboot>
}
   1dc7e:	2000      	movs	r0, #0
   1dc80:	bd08      	pop	{r3, pc}
	...

0001dc84 <shell_os_ls_dev_cmd>:

int
shell_os_ls_dev_cmd(const struct shell_cmd *cmd, int argc, char **argv,
                    struct streamer *streamer)
{
   1dc84:	b510      	push	{r4, lr}
   1dc86:	b082      	sub	sp, #8
   1dc88:	461c      	mov	r4, r3
    streamer_printf(streamer, "%4s %3s %s\n", "ref", "flg", "name");
   1dc8a:	4b07      	ldr	r3, [pc, #28]	; (1dca8 <shell_os_ls_dev_cmd+0x24>)
   1dc8c:	9300      	str	r3, [sp, #0]
   1dc8e:	4b07      	ldr	r3, [pc, #28]	; (1dcac <shell_os_ls_dev_cmd+0x28>)
   1dc90:	4a07      	ldr	r2, [pc, #28]	; (1dcb0 <shell_os_ls_dev_cmd+0x2c>)
   1dc92:	4908      	ldr	r1, [pc, #32]	; (1dcb4 <shell_os_ls_dev_cmd+0x30>)
   1dc94:	4620      	mov	r0, r4
   1dc96:	f000 fe2c 	bl	1e8f2 <streamer_printf>
    os_dev_walk(shell_os_ls_dev, streamer);
   1dc9a:	4621      	mov	r1, r4
   1dc9c:	4806      	ldr	r0, [pc, #24]	; (1dcb8 <shell_os_ls_dev_cmd+0x34>)
   1dc9e:	f7fb fb9d 	bl	193dc <os_dev_walk>
    return 0;
}
   1dca2:	2000      	movs	r0, #0
   1dca4:	b002      	add	sp, #8
   1dca6:	bd10      	pop	{r4, pc}
   1dca8:	00030d38 	.word	0x00030d38
   1dcac:	000340f8 	.word	0x000340f8
   1dcb0:	000340fc 	.word	0x000340fc
   1dcb4:	00034100 	.word	0x00034100
   1dcb8:	0001db09 	.word	0x0001db09

0001dcbc <shell_os_tasks_display_cmd>:
{
   1dcbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dcbe:	b097      	sub	sp, #92	; 0x5c
   1dcc0:	461e      	mov	r6, r3
    if (argc > 1 && strcmp(argv[1], "")) {
   1dcc2:	2901      	cmp	r1, #1
   1dcc4:	dd04      	ble.n	1dcd0 <shell_os_tasks_display_cmd+0x14>
   1dcc6:	6855      	ldr	r5, [r2, #4]
   1dcc8:	782b      	ldrb	r3, [r5, #0]
   1dcca:	b913      	cbnz	r3, 1dcd2 <shell_os_tasks_display_cmd+0x16>
    name = NULL;
   1dccc:	2500      	movs	r5, #0
   1dcce:	e000      	b.n	1dcd2 <shell_os_tasks_display_cmd+0x16>
   1dcd0:	2500      	movs	r5, #0
    streamer_printf(streamer, "Tasks: \n");
   1dcd2:	4928      	ldr	r1, [pc, #160]	; (1dd74 <shell_os_tasks_display_cmd+0xb8>)
   1dcd4:	4630      	mov	r0, r6
   1dcd6:	f000 fe0c 	bl	1e8f2 <streamer_printf>
    streamer_printf(streamer, "%8s %3s %3s %8s %8s %8s %8s %8s %8s %3s\n",
   1dcda:	4b27      	ldr	r3, [pc, #156]	; (1dd78 <shell_os_tasks_display_cmd+0xbc>)
   1dcdc:	9307      	str	r3, [sp, #28]
   1dcde:	4b27      	ldr	r3, [pc, #156]	; (1dd7c <shell_os_tasks_display_cmd+0xc0>)
   1dce0:	9306      	str	r3, [sp, #24]
   1dce2:	4b27      	ldr	r3, [pc, #156]	; (1dd80 <shell_os_tasks_display_cmd+0xc4>)
   1dce4:	9305      	str	r3, [sp, #20]
   1dce6:	4b27      	ldr	r3, [pc, #156]	; (1dd84 <shell_os_tasks_display_cmd+0xc8>)
   1dce8:	9304      	str	r3, [sp, #16]
   1dcea:	4b27      	ldr	r3, [pc, #156]	; (1dd88 <shell_os_tasks_display_cmd+0xcc>)
   1dcec:	9303      	str	r3, [sp, #12]
   1dcee:	4b27      	ldr	r3, [pc, #156]	; (1dd8c <shell_os_tasks_display_cmd+0xd0>)
   1dcf0:	9302      	str	r3, [sp, #8]
   1dcf2:	4b27      	ldr	r3, [pc, #156]	; (1dd90 <shell_os_tasks_display_cmd+0xd4>)
   1dcf4:	9301      	str	r3, [sp, #4]
   1dcf6:	4b27      	ldr	r3, [pc, #156]	; (1dd94 <shell_os_tasks_display_cmd+0xd8>)
   1dcf8:	9300      	str	r3, [sp, #0]
   1dcfa:	4b27      	ldr	r3, [pc, #156]	; (1dd98 <shell_os_tasks_display_cmd+0xdc>)
   1dcfc:	4a27      	ldr	r2, [pc, #156]	; (1dd9c <shell_os_tasks_display_cmd+0xe0>)
   1dcfe:	4928      	ldr	r1, [pc, #160]	; (1dda0 <shell_os_tasks_display_cmd+0xe4>)
   1dd00:	4630      	mov	r0, r6
   1dd02:	f000 fdf6 	bl	1e8f2 <streamer_printf>
    found = 0;
   1dd06:	2700      	movs	r7, #0
    prev_task = NULL;
   1dd08:	463c      	mov	r4, r7
   1dd0a:	e017      	b.n	1dd3c <shell_os_tasks_display_cmd+0x80>
                oti.oti_name, oti.oti_prio, oti.oti_taskid,
   1dd0c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
                oti.oti_stksize, oti.oti_stkusage,
   1dd10:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   1dd14:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
        streamer_printf(streamer, "%8s %3u %3u %8lu %8lu %8u %8u %8lu %8lu\n",
   1dd18:	980d      	ldr	r0, [sp, #52]	; 0x34
   1dd1a:	9006      	str	r0, [sp, #24]
   1dd1c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1dd1e:	9005      	str	r0, [sp, #20]
   1dd20:	9104      	str	r1, [sp, #16]
   1dd22:	9303      	str	r3, [sp, #12]
   1dd24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1dd26:	9302      	str	r3, [sp, #8]
   1dd28:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1dd2a:	9101      	str	r1, [sp, #4]
   1dd2c:	9200      	str	r2, [sp, #0]
   1dd2e:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1dd32:	aa0e      	add	r2, sp, #56	; 0x38
   1dd34:	491b      	ldr	r1, [pc, #108]	; (1dda4 <shell_os_tasks_display_cmd+0xe8>)
   1dd36:	4630      	mov	r0, r6
   1dd38:	f000 fddb 	bl	1e8f2 <streamer_printf>
        prev_task = os_task_info_get_next(prev_task, &oti);
   1dd3c:	a908      	add	r1, sp, #32
   1dd3e:	4620      	mov	r0, r4
   1dd40:	f7fc fc24 	bl	1a58c <os_task_info_get_next>
        if (prev_task == NULL) {
   1dd44:	4604      	mov	r4, r0
   1dd46:	b148      	cbz	r0, 1dd5c <shell_os_tasks_display_cmd+0xa0>
        if (name) {
   1dd48:	2d00      	cmp	r5, #0
   1dd4a:	d0df      	beq.n	1dd0c <shell_os_tasks_display_cmd+0x50>
            if (strcmp(name, oti.oti_name)) {
   1dd4c:	a90e      	add	r1, sp, #56	; 0x38
   1dd4e:	4628      	mov	r0, r5
   1dd50:	f7fc ffeb 	bl	1ad2a <strcmp>
   1dd54:	2800      	cmp	r0, #0
   1dd56:	d1f1      	bne.n	1dd3c <shell_os_tasks_display_cmd+0x80>
                found = 1;
   1dd58:	2701      	movs	r7, #1
   1dd5a:	e7d7      	b.n	1dd0c <shell_os_tasks_display_cmd+0x50>
    if (name && !found) {
   1dd5c:	b105      	cbz	r5, 1dd60 <shell_os_tasks_display_cmd+0xa4>
   1dd5e:	b117      	cbz	r7, 1dd66 <shell_os_tasks_display_cmd+0xaa>
}
   1dd60:	2000      	movs	r0, #0
   1dd62:	b017      	add	sp, #92	; 0x5c
   1dd64:	bdf0      	pop	{r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Couldn't find task with name %s\n", name);
   1dd66:	462a      	mov	r2, r5
   1dd68:	490f      	ldr	r1, [pc, #60]	; (1dda8 <shell_os_tasks_display_cmd+0xec>)
   1dd6a:	4630      	mov	r0, r6
   1dd6c:	f000 fdc1 	bl	1e8f2 <streamer_printf>
   1dd70:	e7f6      	b.n	1dd60 <shell_os_tasks_display_cmd+0xa4>
   1dd72:	bf00      	nop
   1dd74:	0003410c 	.word	0x0003410c
   1dd78:	000340f8 	.word	0x000340f8
   1dd7c:	00034150 	.word	0x00034150
   1dd80:	00034158 	.word	0x00034158
   1dd84:	00034160 	.word	0x00034160
   1dd88:	00034168 	.word	0x00034168
   1dd8c:	00034170 	.word	0x00034170
   1dd90:	00034174 	.word	0x00034174
   1dd94:	0003417c 	.word	0x0003417c
   1dd98:	00034118 	.word	0x00034118
   1dd9c:	0003411c 	.word	0x0003411c
   1dda0:	00034124 	.word	0x00034124
   1dda4:	00034180 	.word	0x00034180
   1dda8:	000341ac 	.word	0x000341ac

0001ddac <shell_os_register>:
    { 0 },
};

void
shell_os_register(void)
{
   1ddac:	b530      	push	{r4, r5, lr}
   1ddae:	b083      	sub	sp, #12
    const struct shell_cmd *cmd;
    int rc;

    for (cmd = os_commands; cmd->sc_cmd != NULL; cmd++) {
   1ddb0:	4c0c      	ldr	r4, [pc, #48]	; (1dde4 <shell_os_register+0x38>)
   1ddb2:	e008      	b.n	1ddc6 <shell_os_register+0x1a>
        rc = shell_cmd_register(cmd);
        SYSINIT_PANIC_ASSERT_MSG(
   1ddb4:	2000      	movs	r0, #0
   1ddb6:	9000      	str	r0, [sp, #0]
   1ddb8:	4b0b      	ldr	r3, [pc, #44]	; (1dde8 <shell_os_register+0x3c>)
   1ddba:	681d      	ldr	r5, [r3, #0]
   1ddbc:	4603      	mov	r3, r0
   1ddbe:	4602      	mov	r2, r0
   1ddc0:	4601      	mov	r1, r0
   1ddc2:	47a8      	blx	r5
    for (cmd = os_commands; cmd->sc_cmd != NULL; cmd++) {
   1ddc4:	3410      	adds	r4, #16
   1ddc6:	68a3      	ldr	r3, [r4, #8]
   1ddc8:	b153      	cbz	r3, 1dde0 <shell_os_register+0x34>
        rc = shell_cmd_register(cmd);
   1ddca:	4620      	mov	r0, r4
   1ddcc:	f7ff fe30 	bl	1da30 <shell_cmd_register>
        SYSINIT_PANIC_ASSERT_MSG(
   1ddd0:	2800      	cmp	r0, #0
   1ddd2:	d0f7      	beq.n	1ddc4 <shell_os_register+0x18>
   1ddd4:	f7f6 fc96 	bl	14704 <hal_debugger_connected>
   1ddd8:	2800      	cmp	r0, #0
   1ddda:	d0eb      	beq.n	1ddb4 <shell_os_register+0x8>
   1dddc:	be01      	bkpt	0x0001
   1ddde:	e7e9      	b.n	1ddb4 <shell_os_register+0x8>
            rc == 0, "Failed to register OS shell commands");
    }
}
   1dde0:	b003      	add	sp, #12
   1dde2:	bd30      	pop	{r4, r5, pc}
   1dde4:	000342a4 	.word	0x000342a4
   1dde8:	100006b4 	.word	0x100006b4

0001ddec <stats_offset>:
    STAILQ_HEAD_INITIALIZER(g_stats_registry);

static size_t
stats_offset(const struct stats_hdr *hdr)
{
    if (hdr->s_flags & STATS_HDR_F_PERSIST) {
   1ddec:	88c3      	ldrh	r3, [r0, #6]
   1ddee:	f013 0f01 	tst.w	r3, #1
   1ddf2:	d001      	beq.n	1ddf8 <stats_offset+0xc>
        return sizeof (struct stats_persisted_hdr);
   1ddf4:	2030      	movs	r0, #48	; 0x30
   1ddf6:	4770      	bx	lr
    } else {
        return sizeof (struct stats_hdr);
   1ddf8:	200c      	movs	r0, #12
    }
}
   1ddfa:	4770      	bx	lr

0001ddfc <stats_register_internal>:
    return (uint8_t *)hdr + offset;
}

static int
stats_register_internal(const char *name, struct stats_hdr *shdr)
{
   1ddfc:	b570      	push	{r4, r5, r6, lr}
   1ddfe:	4606      	mov	r6, r0
   1de00:	460d      	mov	r5, r1
    int rc;

    /* Don't allow duplicate entries, return an error if this stat
     * is already registered.
     */
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   1de02:	4b0f      	ldr	r3, [pc, #60]	; (1de40 <stats_register_internal+0x44>)
   1de04:	681c      	ldr	r4, [r3, #0]
   1de06:	e000      	b.n	1de0a <stats_register_internal+0xe>
   1de08:	68a4      	ldr	r4, [r4, #8]
   1de0a:	b14c      	cbz	r4, 1de20 <stats_register_internal+0x24>
        if (!strcmp(cur->s_name, name) || cur == shdr) {
   1de0c:	4631      	mov	r1, r6
   1de0e:	6820      	ldr	r0, [r4, #0]
   1de10:	f7fc ff8b 	bl	1ad2a <strcmp>
   1de14:	b188      	cbz	r0, 1de3a <stats_register_internal+0x3e>
   1de16:	42ac      	cmp	r4, r5
   1de18:	d1f6      	bne.n	1de08 <stats_register_internal+0xc>

    STATS_INC(g_stats_stats, num_registered);

    return (0);
err:
    return (rc);
   1de1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1de1e:	e00b      	b.n	1de38 <stats_register_internal+0x3c>
    shdr->s_name = name;
   1de20:	602e      	str	r6, [r5, #0]
    STAILQ_INSERT_TAIL(&g_stats_registry, shdr, s_next);
   1de22:	2000      	movs	r0, #0
   1de24:	60a8      	str	r0, [r5, #8]
   1de26:	4b06      	ldr	r3, [pc, #24]	; (1de40 <stats_register_internal+0x44>)
   1de28:	685a      	ldr	r2, [r3, #4]
   1de2a:	6015      	str	r5, [r2, #0]
   1de2c:	3508      	adds	r5, #8
   1de2e:	605d      	str	r5, [r3, #4]
    STATS_INC(g_stats_stats, num_registered);
   1de30:	4a04      	ldr	r2, [pc, #16]	; (1de44 <stats_register_internal+0x48>)
   1de32:	68d3      	ldr	r3, [r2, #12]
   1de34:	3301      	adds	r3, #1
   1de36:	60d3      	str	r3, [r2, #12]
}
   1de38:	bd70      	pop	{r4, r5, r6, pc}
    return (rc);
   1de3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1de3e:	e7fb      	b.n	1de38 <stats_register_internal+0x3c>
   1de40:	100006ac 	.word	0x100006ac
   1de44:	10005568 	.word	0x10005568

0001de48 <stats_init>:
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_init(struct stats_hdr *shdr, uint8_t size, uint8_t cnt,
        const struct stats_name_map *map, uint8_t map_cnt)
{
   1de48:	b570      	push	{r4, r5, r6, lr}
   1de4a:	4604      	mov	r4, r0
   1de4c:	460e      	mov	r6, r1
   1de4e:	4615      	mov	r5, r2
    size_t offset;

    offset = stats_offset(shdr);
   1de50:	f7ff ffcc 	bl	1ddec <stats_offset>
    memset((uint8_t *)shdr + offset, 0, size * cnt);
   1de54:	fb05 f206 	mul.w	r2, r5, r6
   1de58:	2100      	movs	r1, #0
   1de5a:	4420      	add	r0, r4
   1de5c:	f7fc ff2f 	bl	1acbe <memset>

    shdr->s_size = size;
   1de60:	7126      	strb	r6, [r4, #4]
    shdr->s_cnt = cnt;
   1de62:	7165      	strb	r5, [r4, #5]
    shdr->s_flags = 0;
   1de64:	2000      	movs	r0, #0
   1de66:	80e0      	strh	r0, [r4, #6]
    shdr->s_map = map;
    shdr->s_map_cnt = map_cnt;
#endif

    return (0);
}
   1de68:	bd70      	pop	{r4, r5, r6, pc}
	...

0001de6c <stats_module_init_internal>:
{
   1de6c:	b500      	push	{lr}
   1de6e:	b083      	sub	sp, #12
    STAILQ_INIT(&g_stats_registry);
   1de70:	4a09      	ldr	r2, [pc, #36]	; (1de98 <stats_module_init_internal+0x2c>)
   1de72:	2300      	movs	r3, #0
   1de74:	6013      	str	r3, [r2, #0]
   1de76:	6052      	str	r2, [r2, #4]
    rc = stats_init(STATS_HDR(g_stats_stats),
   1de78:	9300      	str	r3, [sp, #0]
   1de7a:	2201      	movs	r2, #1
   1de7c:	2104      	movs	r1, #4
   1de7e:	4807      	ldr	r0, [pc, #28]	; (1de9c <stats_module_init_internal+0x30>)
   1de80:	f7ff ffe2 	bl	1de48 <stats_init>
    if (rc) {
   1de84:	b110      	cbz	r0, 1de8c <stats_module_init_internal+0x20>
}
   1de86:	b003      	add	sp, #12
   1de88:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = stats_register_internal("stat", STATS_HDR(g_stats_stats));
   1de8c:	4903      	ldr	r1, [pc, #12]	; (1de9c <stats_module_init_internal+0x30>)
   1de8e:	4804      	ldr	r0, [pc, #16]	; (1dea0 <stats_module_init_internal+0x34>)
   1de90:	f7ff ffb4 	bl	1ddfc <stats_register_internal>
    if (rc) {
   1de94:	e7f7      	b.n	1de86 <stats_module_init_internal+0x1a>
   1de96:	bf00      	nop
   1de98:	100006ac 	.word	0x100006ac
   1de9c:	10005568 	.word	0x10005568
   1dea0:	00034334 	.word	0x00034334

0001dea4 <stats_module_init>:
{
   1dea4:	b510      	push	{r4, lr}
   1dea6:	b082      	sub	sp, #8
    SYSINIT_ASSERT_ACTIVE();
   1dea8:	4b11      	ldr	r3, [pc, #68]	; (1def0 <stats_module_init+0x4c>)
   1deaa:	781b      	ldrb	r3, [r3, #0]
   1deac:	b123      	cbz	r3, 1deb8 <stats_module_init+0x14>
    if (g_stats_stats.snum_registered) {
   1deae:	4b11      	ldr	r3, [pc, #68]	; (1def4 <stats_module_init+0x50>)
   1deb0:	68db      	ldr	r3, [r3, #12]
   1deb2:	b15b      	cbz	r3, 1decc <stats_module_init+0x28>
}
   1deb4:	b002      	add	sp, #8
   1deb6:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1deb8:	f7f6 fc24 	bl	14704 <hal_debugger_connected>
   1debc:	b100      	cbz	r0, 1dec0 <stats_module_init+0x1c>
   1debe:	be01      	bkpt	0x0001
   1dec0:	2300      	movs	r3, #0
   1dec2:	461a      	mov	r2, r3
   1dec4:	4619      	mov	r1, r3
   1dec6:	4618      	mov	r0, r3
   1dec8:	f7fa ff2c 	bl	18d24 <__assert_func>
    rc = stats_module_init_internal();
   1decc:	f7ff ffce 	bl	1de6c <stats_module_init_internal>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1ded0:	2800      	cmp	r0, #0
   1ded2:	d0ef      	beq.n	1deb4 <stats_module_init+0x10>
   1ded4:	f7f6 fc16 	bl	14704 <hal_debugger_connected>
   1ded8:	b100      	cbz	r0, 1dedc <stats_module_init+0x38>
   1deda:	be01      	bkpt	0x0001
   1dedc:	2000      	movs	r0, #0
   1dede:	9000      	str	r0, [sp, #0]
   1dee0:	4b05      	ldr	r3, [pc, #20]	; (1def8 <stats_module_init+0x54>)
   1dee2:	681c      	ldr	r4, [r3, #0]
   1dee4:	4603      	mov	r3, r0
   1dee6:	4602      	mov	r2, r0
   1dee8:	4601      	mov	r1, r0
   1deea:	47a0      	blx	r4
   1deec:	e7e2      	b.n	1deb4 <stats_module_init+0x10>
   1deee:	bf00      	nop
   1def0:	100055a0 	.word	0x100055a0
   1def4:	10005568 	.word	0x10005568
   1def8:	100006b4 	.word	0x100006b4

0001defc <stats_register>:
 *
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_register(const char *name, struct stats_hdr *shdr)
{
   1defc:	b538      	push	{r3, r4, r5, lr}
   1defe:	4604      	mov	r4, r0
   1df00:	460d      	mov	r5, r1
    /*
     * We should always have at least "stat" registered so if there are no stats
     * registered, try to initialize module first. This allows to register stat
     * before sysinit is called (e.g. from BSP).
     */
    if (g_stats_stats.snum_registered == 0) {
   1df02:	4b07      	ldr	r3, [pc, #28]	; (1df20 <stats_register+0x24>)
   1df04:	68db      	ldr	r3, [r3, #12]
   1df06:	b913      	cbnz	r3, 1df0e <stats_register+0x12>
        if (stats_module_init_internal()) {
   1df08:	f7ff ffb0 	bl	1de6c <stats_module_init_internal>
   1df0c:	b920      	cbnz	r0, 1df18 <stats_register+0x1c>
            return -1;
        }
    }

    return stats_register_internal(name, shdr);
   1df0e:	4629      	mov	r1, r5
   1df10:	4620      	mov	r0, r4
   1df12:	f7ff ff73 	bl	1ddfc <stats_register_internal>
}
   1df16:	bd38      	pop	{r3, r4, r5, pc}
            return -1;
   1df18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1df1c:	e7fb      	b.n	1df16 <stats_register+0x1a>
   1df1e:	bf00      	nop
   1df20:	10005568 	.word	0x10005568

0001df24 <stats_init_and_reg>:
 */
int
stats_init_and_reg(struct stats_hdr *shdr, uint8_t size, uint8_t cnt,
                   const struct stats_name_map *map, uint8_t map_cnt,
                   const char *name)
{
   1df24:	b530      	push	{r4, r5, lr}
   1df26:	b083      	sub	sp, #12
   1df28:	4604      	mov	r4, r0
    int rc;

    rc = stats_init(shdr, size, cnt, map, map_cnt);
   1df2a:	f89d 5018 	ldrb.w	r5, [sp, #24]
   1df2e:	9500      	str	r5, [sp, #0]
   1df30:	f7ff ff8a 	bl	1de48 <stats_init>
    if (rc != 0) {
   1df34:	b108      	cbz	r0, 1df3a <stats_init_and_reg+0x16>
    if (rc != 0) {
        return rc;
    }

    return rc;
}
   1df36:	b003      	add	sp, #12
   1df38:	bd30      	pop	{r4, r5, pc}
    rc = stats_register(name, shdr);
   1df3a:	4621      	mov	r1, r4
   1df3c:	9807      	ldr	r0, [sp, #28]
   1df3e:	f7ff ffdd 	bl	1defc <stats_register>
    if (rc != 0) {
   1df42:	e7f8      	b.n	1df36 <stats_init_and_reg+0x12>

0001df44 <sysdown_complete>:
    sysdown_panic_cb = panic_cb;
}

static void
sysdown_complete(void)
{
   1df44:	b508      	push	{r3, lr}
    os_callout_stop(&sysdown_timer);
   1df46:	4803      	ldr	r0, [pc, #12]	; (1df54 <sysdown_complete+0x10>)
   1df48:	f7fb f8de 	bl	19108 <os_callout_stop>
    os_system_reset();
   1df4c:	f7fb f8a3 	bl	19096 <os_system_reset>
}
   1df50:	bd08      	pop	{r3, pc}
   1df52:	bf00      	nop
   1df54:	10005580 	.word	0x10005580

0001df58 <sysdown_timer_exp>:
    }
}

static void
sysdown_timer_exp(struct os_event *unused)
{
   1df58:	b508      	push	{r3, lr}
    assert(0);
   1df5a:	f7f6 fbd3 	bl	14704 <hal_debugger_connected>
   1df5e:	b100      	cbz	r0, 1df62 <sysdown_timer_exp+0xa>
   1df60:	be01      	bkpt	0x0001
   1df62:	2300      	movs	r3, #0
   1df64:	461a      	mov	r2, r3
   1df66:	4619      	mov	r1, r3
   1df68:	4618      	mov	r0, r3
   1df6a:	f7fa fedb 	bl	18d24 <__assert_func>
	...

0001df70 <sysdown_release>:
{
   1df70:	b510      	push	{r4, lr}
    OS_ENTER_CRITICAL(sr);
   1df72:	f7fc fcab 	bl	1a8cc <os_arch_save_sr>
    count = --sysdown_num_in_progress;
   1df76:	4b06      	ldr	r3, [pc, #24]	; (1df90 <sysdown_release+0x20>)
   1df78:	681c      	ldr	r4, [r3, #0]
   1df7a:	3c01      	subs	r4, #1
   1df7c:	601c      	str	r4, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1df7e:	f7fc fcab 	bl	1a8d8 <os_arch_restore_sr>
    if (count <= 0) {
   1df82:	2c00      	cmp	r4, #0
   1df84:	dd00      	ble.n	1df88 <sysdown_release+0x18>
}
   1df86:	bd10      	pop	{r4, pc}
        sysdown_complete();
   1df88:	f7ff ffdc 	bl	1df44 <sysdown_complete>
}
   1df8c:	e7fb      	b.n	1df86 <sysdown_release+0x16>
   1df8e:	bf00      	nop
   1df90:	1000557c 	.word	0x1000557c

0001df94 <sysdown>:
}

int
sysdown(int reason)
{
   1df94:	b570      	push	{r4, r5, r6, lr}
   1df96:	4605      	mov	r5, r0
    os_sr_t sr;
    int rc;
    int i;

    /* Only allow one shutdown operation. */
    OS_ENTER_CRITICAL(sr);
   1df98:	f7fc fc98 	bl	1a8cc <os_arch_save_sr>
    if (sysdown_active) {
   1df9c:	4b22      	ldr	r3, [pc, #136]	; (1e028 <sysdown+0x94>)
   1df9e:	781b      	ldrb	r3, [r3, #0]
   1dfa0:	b943      	cbnz	r3, 1dfb4 <sysdown+0x20>
        rc = SYS_EALREADY;
    } else {
        sysdown_active = true;
   1dfa2:	4b21      	ldr	r3, [pc, #132]	; (1e028 <sysdown+0x94>)
   1dfa4:	2201      	movs	r2, #1
   1dfa6:	701a      	strb	r2, [r3, #0]
        rc = 0;
   1dfa8:	2600      	movs	r6, #0
    }
    OS_EXIT_CRITICAL(sr);
   1dfaa:	f7fc fc95 	bl	1a8d8 <os_arch_restore_sr>

    if (rc != 0) {
   1dfae:	b126      	cbz	r6, 1dfba <sysdown+0x26>
    if (sysdown_num_in_progress == 0) {
        sysdown_complete();
    }

    return 0;
}
   1dfb0:	4630      	mov	r0, r6
   1dfb2:	bd70      	pop	{r4, r5, r6, pc}
        rc = SYS_EALREADY;
   1dfb4:	f06f 060a 	mvn.w	r6, #10
   1dfb8:	e7f7      	b.n	1dfaa <sysdown+0x16>
    os_callout_init(&sysdown_timer, os_eventq_dflt_get(), sysdown_timer_exp,
   1dfba:	f7fb fae5 	bl	19588 <os_eventq_dflt_get>
   1dfbe:	4601      	mov	r1, r0
   1dfc0:	4c1a      	ldr	r4, [pc, #104]	; (1e02c <sysdown+0x98>)
   1dfc2:	2300      	movs	r3, #0
   1dfc4:	4a1a      	ldr	r2, [pc, #104]	; (1e030 <sysdown+0x9c>)
   1dfc6:	4620      	mov	r0, r4
   1dfc8:	f7fb f890 	bl	190ec <os_callout_init>
    rc = os_callout_reset(&sysdown_timer, SYSDOWN_TIMEOUT_TICKS);
   1dfcc:	f44f 61a0 	mov.w	r1, #1280	; 0x500
   1dfd0:	4620      	mov	r0, r4
   1dfd2:	f7fb f8b7 	bl	19144 <os_callout_reset>
    assert(rc == 0);
   1dfd6:	4606      	mov	r6, r0
   1dfd8:	b908      	cbnz	r0, 1dfde <sysdown+0x4a>
    for (i = 0; sysdown_cbs[i] != NULL; i++) {
   1dfda:	4604      	mov	r4, r0
   1dfdc:	e012      	b.n	1e004 <sysdown+0x70>
    assert(rc == 0);
   1dfde:	f7f6 fb91 	bl	14704 <hal_debugger_connected>
   1dfe2:	b100      	cbz	r0, 1dfe6 <sysdown+0x52>
   1dfe4:	be01      	bkpt	0x0001
   1dfe6:	2300      	movs	r3, #0
   1dfe8:	461a      	mov	r2, r3
   1dfea:	4619      	mov	r1, r3
   1dfec:	4618      	mov	r0, r3
   1dfee:	f7fa fe99 	bl	18d24 <__assert_func>
            OS_ENTER_CRITICAL(sr);
   1dff2:	f7fc fc6b 	bl	1a8cc <os_arch_save_sr>
            sysdown_num_in_progress++;
   1dff6:	4a0f      	ldr	r2, [pc, #60]	; (1e034 <sysdown+0xa0>)
   1dff8:	6813      	ldr	r3, [r2, #0]
   1dffa:	3301      	adds	r3, #1
   1dffc:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
   1dffe:	f7fc fc6b 	bl	1a8d8 <os_arch_restore_sr>
    for (i = 0; sysdown_cbs[i] != NULL; i++) {
   1e002:	3401      	adds	r4, #1
   1e004:	4b0c      	ldr	r3, [pc, #48]	; (1e038 <sysdown+0xa4>)
   1e006:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1e00a:	b123      	cbz	r3, 1e016 <sysdown+0x82>
        rc = sysdown_cbs[i](reason);
   1e00c:	4628      	mov	r0, r5
   1e00e:	4798      	blx	r3
        switch (rc) {
   1e010:	2801      	cmp	r0, #1
   1e012:	d1f6      	bne.n	1e002 <sysdown+0x6e>
   1e014:	e7ed      	b.n	1dff2 <sysdown+0x5e>
    if (sysdown_num_in_progress == 0) {
   1e016:	4b07      	ldr	r3, [pc, #28]	; (1e034 <sysdown+0xa0>)
   1e018:	681c      	ldr	r4, [r3, #0]
   1e01a:	2c00      	cmp	r4, #0
   1e01c:	d1c8      	bne.n	1dfb0 <sysdown+0x1c>
        sysdown_complete();
   1e01e:	f7ff ff91 	bl	1df44 <sysdown_complete>
    return 0;
   1e022:	4626      	mov	r6, r4
   1e024:	e7c4      	b.n	1dfb0 <sysdown+0x1c>
   1e026:	bf00      	nop
   1e028:	10005578 	.word	0x10005578
   1e02c:	10005580 	.word	0x10005580
   1e030:	0001df59 	.word	0x0001df59
   1e034:	1000557c 	.word	0x1000557c
   1e038:	0003524c 	.word	0x0003524c

0001e03c <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   1e03c:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   1e03e:	f7fa fe71 	bl	18d24 <__assert_func>
	...

0001e044 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   1e044:	4b01      	ldr	r3, [pc, #4]	; (1e04c <sysinit_start+0x8>)
   1e046:	2201      	movs	r2, #1
   1e048:	701a      	strb	r2, [r3, #0]
}
   1e04a:	4770      	bx	lr
   1e04c:	100055a0 	.word	0x100055a0

0001e050 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   1e050:	4b01      	ldr	r3, [pc, #4]	; (1e058 <sysinit_end+0x8>)
   1e052:	2200      	movs	r2, #0
   1e054:	701a      	strb	r2, [r3, #0]
}
   1e056:	4770      	bx	lr
   1e058:	100055a0 	.word	0x100055a0

0001e05c <leapyear>:
 *     ((year % 400) == 0) )
 * It is otherwise equivalent.
 */
static int
leapyear(int year)
{
   1e05c:	4603      	mov	r3, r0
    int rv = 0;

    if ((year & 3) == 0) {
   1e05e:	f010 0f03 	tst.w	r0, #3
   1e062:	d115      	bne.n	1e090 <leapyear+0x34>
        rv = 1;
        if ((year % 100) == 0) {
   1e064:	4a0d      	ldr	r2, [pc, #52]	; (1e09c <leapyear+0x40>)
   1e066:	fb82 1200 	smull	r1, r2, r2, r0
   1e06a:	17c0      	asrs	r0, r0, #31
   1e06c:	ebc0 1062 	rsb	r0, r0, r2, asr #5
   1e070:	2264      	movs	r2, #100	; 0x64
   1e072:	fb02 3010 	mls	r0, r2, r0, r3
   1e076:	b968      	cbnz	r0, 1e094 <leapyear+0x38>
            rv = 0;
            if ((year % 400) == 0)
   1e078:	4908      	ldr	r1, [pc, #32]	; (1e09c <leapyear+0x40>)
   1e07a:	fb81 2103 	smull	r2, r1, r1, r3
   1e07e:	17da      	asrs	r2, r3, #31
   1e080:	ebc2 12e1 	rsb	r2, r2, r1, asr #7
   1e084:	f44f 71c8 	mov.w	r1, #400	; 0x190
   1e088:	fb01 3212 	mls	r2, r1, r2, r3
   1e08c:	b122      	cbz	r2, 1e098 <leapyear+0x3c>
   1e08e:	4770      	bx	lr
    int rv = 0;
   1e090:	2000      	movs	r0, #0
   1e092:	4770      	bx	lr
        rv = 1;
   1e094:	2001      	movs	r0, #1
   1e096:	4770      	bx	lr
                rv = 1;
   1e098:	2001      	movs	r0, #1
        }
    }
    return (rv);
}
   1e09a:	4770      	bx	lr
   1e09c:	51eb851f 	.word	0x51eb851f

0001e0a0 <parse_number>:
    return (0);
}

static const char *
parse_number(const char *str, int digits, int *val)
{
   1e0a0:	b430      	push	{r4, r5}
   1e0a2:	4604      	mov	r4, r0
    const char *cp;
    const char *end;

    *val = 0;
   1e0a4:	2300      	movs	r3, #0
   1e0a6:	6013      	str	r3, [r2, #0]
    cp = str;
    end = str + digits;
   1e0a8:	4408      	add	r0, r1
    while (cp < end) {
   1e0aa:	4284      	cmp	r4, r0
   1e0ac:	d20f      	bcs.n	1e0ce <parse_number+0x2e>
        if (!isdigit((unsigned char)*cp)) {
   1e0ae:	7823      	ldrb	r3, [r4, #0]
   1e0b0:	3b30      	subs	r3, #48	; 0x30
   1e0b2:	2b09      	cmp	r3, #9
   1e0b4:	d80a      	bhi.n	1e0cc <parse_number+0x2c>
            return (NULL);
        }
        *val *= 10;
   1e0b6:	6813      	ldr	r3, [r2, #0]
   1e0b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1e0bc:	005b      	lsls	r3, r3, #1
   1e0be:	6013      	str	r3, [r2, #0]
        *val += (*cp - '0');
   1e0c0:	f814 5b01 	ldrb.w	r5, [r4], #1
   1e0c4:	3d30      	subs	r5, #48	; 0x30
   1e0c6:	442b      	add	r3, r5
   1e0c8:	6013      	str	r3, [r2, #0]
        cp++;
   1e0ca:	e7ee      	b.n	1e0aa <parse_number+0xa>
            return (NULL);
   1e0cc:	2000      	movs	r0, #0
    }
    return (end);
}
   1e0ce:	bc30      	pop	{r4, r5}
   1e0d0:	4770      	bx	lr
	...

0001e0d4 <clocktime_to_timeval>:
{
   1e0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e0d8:	b08b      	sub	sp, #44	; 0x2c
   1e0da:	9101      	str	r1, [sp, #4]
   1e0dc:	9200      	str	r2, [sp, #0]
    year = ct->year;
   1e0de:	6806      	ldr	r6, [r0, #0]
    if (year < POSIX_BASE_YEAR ||
   1e0e0:	f240 73b1 	movw	r3, #1969	; 0x7b1
   1e0e4:	429e      	cmp	r6, r3
   1e0e6:	f340 80d6 	ble.w	1e296 <clocktime_to_timeval+0x1c2>
   1e0ea:	4604      	mov	r4, r0
        ct->mon < 1 || ct->mon > 12 ||
   1e0ec:	6845      	ldr	r5, [r0, #4]
    if (year < POSIX_BASE_YEAR ||
   1e0ee:	2d00      	cmp	r5, #0
   1e0f0:	f340 80d5 	ble.w	1e29e <clocktime_to_timeval+0x1ca>
        ct->mon < 1 || ct->mon > 12 ||
   1e0f4:	2d0c      	cmp	r5, #12
   1e0f6:	f300 80d4 	bgt.w	1e2a2 <clocktime_to_timeval+0x1ce>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   1e0fa:	f8d0 8008 	ldr.w	r8, [r0, #8]
        ct->mon < 1 || ct->mon > 12 ||
   1e0fe:	f1b8 0f00 	cmp.w	r8, #0
   1e102:	f340 80d0 	ble.w	1e2a6 <clocktime_to_timeval+0x1d2>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   1e106:	1e6b      	subs	r3, r5, #1
   1e108:	4a72      	ldr	r2, [pc, #456]	; (1e2d4 <clocktime_to_timeval+0x200>)
   1e10a:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
   1e10e:	2d02      	cmp	r5, #2
   1e110:	d02b      	beq.n	1e16a <clocktime_to_timeval+0x96>
   1e112:	2000      	movs	r0, #0
   1e114:	4407      	add	r7, r0
   1e116:	45b8      	cmp	r8, r7
   1e118:	f300 80c7 	bgt.w	1e2aa <clocktime_to_timeval+0x1d6>
        ct->hour < 0 || ct->hour > 23 ||
   1e11c:	f8d4 b00c 	ldr.w	fp, [r4, #12]
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   1e120:	f1bb 0f00 	cmp.w	fp, #0
   1e124:	f2c0 80c3 	blt.w	1e2ae <clocktime_to_timeval+0x1da>
        ct->hour < 0 || ct->hour > 23 ||
   1e128:	f1bb 0f17 	cmp.w	fp, #23
   1e12c:	f300 80c1 	bgt.w	1e2b2 <clocktime_to_timeval+0x1de>
        ct->min < 0 || ct->min > 59 ||
   1e130:	6923      	ldr	r3, [r4, #16]
   1e132:	9308      	str	r3, [sp, #32]
        ct->hour < 0 || ct->hour > 23 ||
   1e134:	2b00      	cmp	r3, #0
   1e136:	f2c0 80be 	blt.w	1e2b6 <clocktime_to_timeval+0x1e2>
        ct->min < 0 || ct->min > 59 ||
   1e13a:	2b3b      	cmp	r3, #59	; 0x3b
   1e13c:	f300 80bd 	bgt.w	1e2ba <clocktime_to_timeval+0x1e6>
        ct->sec < 0 || ct->sec > 59 ||
   1e140:	6963      	ldr	r3, [r4, #20]
   1e142:	9309      	str	r3, [sp, #36]	; 0x24
        ct->min < 0 || ct->min > 59 ||
   1e144:	2b00      	cmp	r3, #0
   1e146:	f2c0 80ba 	blt.w	1e2be <clocktime_to_timeval+0x1ea>
        ct->sec < 0 || ct->sec > 59 ||
   1e14a:	2b3b      	cmp	r3, #59	; 0x3b
   1e14c:	f300 80b9 	bgt.w	1e2c2 <clocktime_to_timeval+0x1ee>
        ct->usec < 0 || ct->usec > 999999) {
   1e150:	69e3      	ldr	r3, [r4, #28]
        ct->sec < 0 || ct->sec > 59 ||
   1e152:	2b00      	cmp	r3, #0
   1e154:	f2c0 80b7 	blt.w	1e2c6 <clocktime_to_timeval+0x1f2>
        ct->usec < 0 || ct->usec > 999999) {
   1e158:	4a5f      	ldr	r2, [pc, #380]	; (1e2d8 <clocktime_to_timeval+0x204>)
   1e15a:	4293      	cmp	r3, r2
   1e15c:	f300 80b5 	bgt.w	1e2ca <clocktime_to_timeval+0x1f6>
    days = 0;
   1e160:	f04f 0900 	mov.w	r9, #0
    for (i = POSIX_BASE_YEAR; i < year; i++)
   1e164:	f240 77b2 	movw	r7, #1970	; 0x7b2
   1e168:	e007      	b.n	1e17a <clocktime_to_timeval+0xa6>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   1e16a:	4630      	mov	r0, r6
   1e16c:	f7ff ff76 	bl	1e05c <leapyear>
   1e170:	e7d0      	b.n	1e114 <clocktime_to_timeval+0x40>
        days += days_in_year(i);
   1e172:	f240 136d 	movw	r3, #365	; 0x16d
   1e176:	4499      	add	r9, r3
    for (i = POSIX_BASE_YEAR; i < year; i++)
   1e178:	3701      	adds	r7, #1
   1e17a:	42b7      	cmp	r7, r6
   1e17c:	da07      	bge.n	1e18e <clocktime_to_timeval+0xba>
        days += days_in_year(i);
   1e17e:	4638      	mov	r0, r7
   1e180:	f7ff ff6c 	bl	1e05c <leapyear>
   1e184:	2800      	cmp	r0, #0
   1e186:	d0f4      	beq.n	1e172 <clocktime_to_timeval+0x9e>
   1e188:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   1e18c:	e7f3      	b.n	1e176 <clocktime_to_timeval+0xa2>
    for (i = 1; i < ct->mon; i++)
   1e18e:	2701      	movs	r7, #1
   1e190:	46aa      	mov	sl, r5
   1e192:	e005      	b.n	1e1a0 <clocktime_to_timeval+0xcc>
          days += days_in_month(year, i);
   1e194:	4630      	mov	r0, r6
   1e196:	f7ff ff61 	bl	1e05c <leapyear>
   1e19a:	4405      	add	r5, r0
   1e19c:	44a9      	add	r9, r5
    for (i = 1; i < ct->mon; i++)
   1e19e:	3701      	adds	r7, #1
   1e1a0:	45ba      	cmp	sl, r7
   1e1a2:	dd07      	ble.n	1e1b4 <clocktime_to_timeval+0xe0>
          days += days_in_month(year, i);
   1e1a4:	1e7b      	subs	r3, r7, #1
   1e1a6:	4a4b      	ldr	r2, [pc, #300]	; (1e2d4 <clocktime_to_timeval+0x200>)
   1e1a8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1e1ac:	2f02      	cmp	r7, #2
   1e1ae:	d0f1      	beq.n	1e194 <clocktime_to_timeval+0xc0>
   1e1b0:	2000      	movs	r0, #0
   1e1b2:	e7f2      	b.n	1e19a <clocktime_to_timeval+0xc6>
    days += (ct->day - 1);
   1e1b4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   1e1b8:	4491      	add	r9, r2
    tv->tv_sec = (((int64_t)days * 24 + ct->hour) * 60 + ct->min) * 60 +
   1e1ba:	464a      	mov	r2, r9
   1e1bc:	17d3      	asrs	r3, r2, #31
   1e1be:	eb19 0109 	adds.w	r1, r9, r9
   1e1c2:	eb43 0003 	adc.w	r0, r3, r3
   1e1c6:	eb11 0109 	adds.w	r1, r1, r9
   1e1ca:	9102      	str	r1, [sp, #8]
   1e1cc:	eb40 0303 	adc.w	r3, r0, r3
   1e1d0:	9303      	str	r3, [sp, #12]
   1e1d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1e1d6:	00cb      	lsls	r3, r1, #3
   1e1d8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
   1e1dc:	00c2      	lsls	r2, r0, #3
   1e1de:	9202      	str	r2, [sp, #8]
   1e1e0:	9303      	str	r3, [sp, #12]
   1e1e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1e1e6:	eb12 020b 	adds.w	r2, r2, fp
   1e1ea:	eb43 73eb 	adc.w	r3, r3, fp, asr #31
   1e1ee:	011d      	lsls	r5, r3, #4
   1e1f0:	0111      	lsls	r1, r2, #4
   1e1f2:	ea45 7012 	orr.w	r0, r5, r2, lsr #28
   1e1f6:	1a89      	subs	r1, r1, r2
   1e1f8:	9104      	str	r1, [sp, #16]
   1e1fa:	eb60 0303 	sbc.w	r3, r0, r3
   1e1fe:	9305      	str	r3, [sp, #20]
   1e200:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1e204:	008b      	lsls	r3, r1, #2
   1e206:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
   1e20a:	0082      	lsls	r2, r0, #2
   1e20c:	9204      	str	r2, [sp, #16]
   1e20e:	9305      	str	r3, [sp, #20]
   1e210:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1e214:	9b08      	ldr	r3, [sp, #32]
   1e216:	18c9      	adds	r1, r1, r3
   1e218:	eb42 72e3 	adc.w	r2, r2, r3, asr #31
   1e21c:	4613      	mov	r3, r2
   1e21e:	460a      	mov	r2, r1
   1e220:	011d      	lsls	r5, r3, #4
   1e222:	0111      	lsls	r1, r2, #4
   1e224:	ea45 7012 	orr.w	r0, r5, r2, lsr #28
   1e228:	1a89      	subs	r1, r1, r2
   1e22a:	9106      	str	r1, [sp, #24]
   1e22c:	eb60 0303 	sbc.w	r3, r0, r3
   1e230:	9307      	str	r3, [sp, #28]
   1e232:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1e236:	008b      	lsls	r3, r1, #2
   1e238:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
   1e23c:	0082      	lsls	r2, r0, #2
   1e23e:	9206      	str	r2, [sp, #24]
   1e240:	9307      	str	r3, [sp, #28]
   1e242:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   1e246:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e248:	18c9      	adds	r1, r1, r3
   1e24a:	eb42 72e3 	adc.w	r2, r2, r3, asr #31
   1e24e:	4613      	mov	r3, r2
   1e250:	460a      	mov	r2, r1
   1e252:	9800      	ldr	r0, [sp, #0]
   1e254:	e9c0 2300 	strd	r2, r3, [r0]
    tv->tv_usec = ct->usec;
   1e258:	69e1      	ldr	r1, [r4, #28]
   1e25a:	6081      	str	r1, [r0, #8]
    if (tz != NULL) {
   1e25c:	9c01      	ldr	r4, [sp, #4]
   1e25e:	b3b4      	cbz	r4, 1e2ce <clocktime_to_timeval+0x1fa>
	tv->tv_sec += tz->tz_minuteswest * 60;
   1e260:	f9b4 1000 	ldrsh.w	r1, [r4]
   1e264:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
   1e268:	0089      	lsls	r1, r1, #2
   1e26a:	1852      	adds	r2, r2, r1
   1e26c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   1e270:	e9c0 2300 	strd	r2, r3, [r0]
	tv->tv_sec -= tz->tz_dsttime ? 3600 : 0;
   1e274:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
   1e278:	b151      	cbz	r1, 1e290 <clocktime_to_timeval+0x1bc>
   1e27a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1e27e:	2000      	movs	r0, #0
   1e280:	1a51      	subs	r1, r2, r1
   1e282:	eb63 0000 	sbc.w	r0, r3, r0
   1e286:	9b00      	ldr	r3, [sp, #0]
   1e288:	6019      	str	r1, [r3, #0]
   1e28a:	6058      	str	r0, [r3, #4]
    return (0);
   1e28c:	2000      	movs	r0, #0
   1e28e:	e003      	b.n	1e298 <clocktime_to_timeval+0x1c4>
	tv->tv_sec -= tz->tz_dsttime ? 3600 : 0;
   1e290:	2100      	movs	r1, #0
   1e292:	4608      	mov	r0, r1
   1e294:	e7f4      	b.n	1e280 <clocktime_to_timeval+0x1ac>
        return (OS_EINVAL);
   1e296:	2002      	movs	r0, #2
}
   1e298:	b00b      	add	sp, #44	; 0x2c
   1e29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return (OS_EINVAL);
   1e29e:	2002      	movs	r0, #2
   1e2a0:	e7fa      	b.n	1e298 <clocktime_to_timeval+0x1c4>
   1e2a2:	2002      	movs	r0, #2
   1e2a4:	e7f8      	b.n	1e298 <clocktime_to_timeval+0x1c4>
   1e2a6:	2002      	movs	r0, #2
   1e2a8:	e7f6      	b.n	1e298 <clocktime_to_timeval+0x1c4>
   1e2aa:	2002      	movs	r0, #2
   1e2ac:	e7f4      	b.n	1e298 <clocktime_to_timeval+0x1c4>
   1e2ae:	2002      	movs	r0, #2
   1e2b0:	e7f2      	b.n	1e298 <clocktime_to_timeval+0x1c4>
   1e2b2:	2002      	movs	r0, #2
   1e2b4:	e7f0      	b.n	1e298 <clocktime_to_timeval+0x1c4>
   1e2b6:	2002      	movs	r0, #2
   1e2b8:	e7ee      	b.n	1e298 <clocktime_to_timeval+0x1c4>
   1e2ba:	2002      	movs	r0, #2
   1e2bc:	e7ec      	b.n	1e298 <clocktime_to_timeval+0x1c4>
   1e2be:	2002      	movs	r0, #2
   1e2c0:	e7ea      	b.n	1e298 <clocktime_to_timeval+0x1c4>
   1e2c2:	2002      	movs	r0, #2
   1e2c4:	e7e8      	b.n	1e298 <clocktime_to_timeval+0x1c4>
   1e2c6:	2002      	movs	r0, #2
   1e2c8:	e7e6      	b.n	1e298 <clocktime_to_timeval+0x1c4>
   1e2ca:	2002      	movs	r0, #2
   1e2cc:	e7e4      	b.n	1e298 <clocktime_to_timeval+0x1c4>
    return (0);
   1e2ce:	2000      	movs	r0, #0
   1e2d0:	e7e2      	b.n	1e298 <clocktime_to_timeval+0x1c4>
   1e2d2:	bf00      	nop
   1e2d4:	0003436c 	.word	0x0003436c
   1e2d8:	000f423f 	.word	0x000f423f

0001e2dc <timeval_to_clocktime>:
{
   1e2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e2e0:	4606      	mov	r6, r0
   1e2e2:	4615      	mov	r5, r2
    secs = tv->tv_sec;
   1e2e4:	e9d0 8900 	ldrd	r8, r9, [r0]
    if (tz != NULL) {
   1e2e8:	b199      	cbz	r1, 1e312 <timeval_to_clocktime+0x36>
   1e2ea:	460a      	mov	r2, r1
        secs -= tz->tz_minuteswest * 60;
   1e2ec:	f9b1 3000 	ldrsh.w	r3, [r1]
   1e2f0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1e2f4:	009b      	lsls	r3, r3, #2
   1e2f6:	ebb8 0003 	subs.w	r0, r8, r3
   1e2fa:	eb69 71e3 	sbc.w	r1, r9, r3, asr #31
        secs += tz->tz_dsttime ? 3600 : 0;
   1e2fe:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
   1e302:	b38b      	cbz	r3, 1e368 <timeval_to_clocktime+0x8c>
   1e304:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   1e308:	2200      	movs	r2, #0
   1e30a:	eb13 0800 	adds.w	r8, r3, r0
   1e30e:	eb42 0901 	adc.w	r9, r2, r1
    if (secs < 0 || tv->tv_usec < 0 || tv->tv_usec > 999999) {
   1e312:	f1b8 0f00 	cmp.w	r8, #0
   1e316:	f179 0300 	sbcs.w	r3, r9, #0
   1e31a:	db71      	blt.n	1e400 <timeval_to_clocktime+0x124>
   1e31c:	68b3      	ldr	r3, [r6, #8]
   1e31e:	2b00      	cmp	r3, #0
   1e320:	db70      	blt.n	1e404 <timeval_to_clocktime+0x128>
   1e322:	4a3a      	ldr	r2, [pc, #232]	; (1e40c <timeval_to_clocktime+0x130>)
   1e324:	4293      	cmp	r3, r2
   1e326:	dc6f      	bgt.n	1e408 <timeval_to_clocktime+0x12c>
    days = secs / SECDAY;
   1e328:	4a39      	ldr	r2, [pc, #228]	; (1e410 <timeval_to_clocktime+0x134>)
   1e32a:	2300      	movs	r3, #0
   1e32c:	4640      	mov	r0, r8
   1e32e:	4649      	mov	r1, r9
   1e330:	f7f5 ff9c 	bl	1426c <__aeabi_ldivmod>
   1e334:	4682      	mov	sl, r0
   1e336:	4604      	mov	r4, r0
    rsec = secs % SECDAY;
   1e338:	4a35      	ldr	r2, [pc, #212]	; (1e410 <timeval_to_clocktime+0x134>)
   1e33a:	2300      	movs	r3, #0
   1e33c:	4640      	mov	r0, r8
   1e33e:	4649      	mov	r1, r9
   1e340:	f7f5 ff94 	bl	1426c <__aeabi_ldivmod>
   1e344:	4690      	mov	r8, r2
   1e346:	461f      	mov	r7, r3
    ct->dow = day_of_week(days);
   1e348:	f10a 0004 	add.w	r0, sl, #4
   1e34c:	4b31      	ldr	r3, [pc, #196]	; (1e414 <timeval_to_clocktime+0x138>)
   1e34e:	fb83 2300 	smull	r2, r3, r3, r0
   1e352:	181a      	adds	r2, r3, r0
   1e354:	17c3      	asrs	r3, r0, #31
   1e356:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   1e35a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1e35e:	1ac3      	subs	r3, r0, r3
   1e360:	61ab      	str	r3, [r5, #24]
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   1e362:	f240 79b2 	movw	r9, #1970	; 0x7b2
   1e366:	e009      	b.n	1e37c <timeval_to_clocktime+0xa0>
        secs += tz->tz_dsttime ? 3600 : 0;
   1e368:	2300      	movs	r3, #0
   1e36a:	461a      	mov	r2, r3
   1e36c:	e7cd      	b.n	1e30a <timeval_to_clocktime+0x2e>
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   1e36e:	f240 136d 	movw	r3, #365	; 0x16d
   1e372:	429c      	cmp	r4, r3
   1e374:	db0b      	blt.n	1e38e <timeval_to_clocktime+0xb2>
        days -= days_in_year(year);
   1e376:	1ae4      	subs	r4, r4, r3
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   1e378:	f109 0901 	add.w	r9, r9, #1
   1e37c:	4648      	mov	r0, r9
   1e37e:	f7ff fe6d 	bl	1e05c <leapyear>
   1e382:	4684      	mov	ip, r0
   1e384:	2800      	cmp	r0, #0
   1e386:	d0f2      	beq.n	1e36e <timeval_to_clocktime+0x92>
   1e388:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   1e38c:	e7f1      	b.n	1e372 <timeval_to_clocktime+0x96>
    ct->year = year;
   1e38e:	f8c5 9000 	str.w	r9, [r5]
    for (i = 1; days >= days_in_month(year, i); i++)
   1e392:	2301      	movs	r3, #1
   1e394:	e005      	b.n	1e3a2 <timeval_to_clocktime+0xc6>
   1e396:	4662      	mov	r2, ip
   1e398:	4411      	add	r1, r2
   1e39a:	42a1      	cmp	r1, r4
   1e39c:	dc09      	bgt.n	1e3b2 <timeval_to_clocktime+0xd6>
        days -= days_in_month(year, i);
   1e39e:	1a64      	subs	r4, r4, r1
    for (i = 1; days >= days_in_month(year, i); i++)
   1e3a0:	3301      	adds	r3, #1
   1e3a2:	1e5a      	subs	r2, r3, #1
   1e3a4:	491c      	ldr	r1, [pc, #112]	; (1e418 <timeval_to_clocktime+0x13c>)
   1e3a6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   1e3aa:	2b02      	cmp	r3, #2
   1e3ac:	d0f3      	beq.n	1e396 <timeval_to_clocktime+0xba>
   1e3ae:	2200      	movs	r2, #0
   1e3b0:	e7f2      	b.n	1e398 <timeval_to_clocktime+0xbc>
    ct->mon = i;
   1e3b2:	606b      	str	r3, [r5, #4]
    ct->day = days + 1;
   1e3b4:	3401      	adds	r4, #1
   1e3b6:	60ac      	str	r4, [r5, #8]
    ct->hour = rsec / 3600;
   1e3b8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   1e3bc:	2300      	movs	r3, #0
   1e3be:	4640      	mov	r0, r8
   1e3c0:	4639      	mov	r1, r7
   1e3c2:	f7f5 ff53 	bl	1426c <__aeabi_ldivmod>
   1e3c6:	60e8      	str	r0, [r5, #12]
    rsec = rsec % 3600;
   1e3c8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   1e3cc:	2300      	movs	r3, #0
   1e3ce:	4640      	mov	r0, r8
   1e3d0:	4639      	mov	r1, r7
   1e3d2:	f7f5 ff4b 	bl	1426c <__aeabi_ldivmod>
   1e3d6:	4617      	mov	r7, r2
   1e3d8:	461c      	mov	r4, r3
    ct->min  = rsec / 60;
   1e3da:	223c      	movs	r2, #60	; 0x3c
   1e3dc:	2300      	movs	r3, #0
   1e3de:	4638      	mov	r0, r7
   1e3e0:	4621      	mov	r1, r4
   1e3e2:	f7f5 ff43 	bl	1426c <__aeabi_ldivmod>
   1e3e6:	6128      	str	r0, [r5, #16]
    rsec = rsec % 60;
   1e3e8:	223c      	movs	r2, #60	; 0x3c
   1e3ea:	2300      	movs	r3, #0
   1e3ec:	4638      	mov	r0, r7
   1e3ee:	4621      	mov	r1, r4
   1e3f0:	f7f5 ff3c 	bl	1426c <__aeabi_ldivmod>
    ct->sec  = rsec;
   1e3f4:	616a      	str	r2, [r5, #20]
    ct->usec = tv->tv_usec;
   1e3f6:	68b3      	ldr	r3, [r6, #8]
   1e3f8:	61eb      	str	r3, [r5, #28]
    return (0);
   1e3fa:	2000      	movs	r0, #0
}
   1e3fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return (OS_EINVAL);
   1e400:	2002      	movs	r0, #2
   1e402:	e7fb      	b.n	1e3fc <timeval_to_clocktime+0x120>
   1e404:	2002      	movs	r0, #2
   1e406:	e7f9      	b.n	1e3fc <timeval_to_clocktime+0x120>
   1e408:	2002      	movs	r0, #2
   1e40a:	e7f7      	b.n	1e3fc <timeval_to_clocktime+0x120>
   1e40c:	000f423f 	.word	0x000f423f
   1e410:	00015180 	.word	0x00015180
   1e414:	92492493 	.word	0x92492493
   1e418:	0003436c 	.word	0x0003436c

0001e41c <datetime_parse>:
 * 2016-03-02T22:44:00.1                fractional seconds
 * 2016-03-02T22:44:00.101+05:30        fractional seconds with timezone
 */
int
datetime_parse(const char *input, struct os_timeval *tv, struct os_timezone *tz)
{
   1e41c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e41e:	b08b      	sub	sp, #44	; 0x2c
   1e420:	4604      	mov	r4, r0
   1e422:	460d      	mov	r5, r1
   1e424:	4616      	mov	r6, r2
    int off_hour, off_min;
    const char *cp;
    const char *ep;
    struct clocktime ct;

    bzero(&ct, sizeof(struct clocktime));
   1e426:	2220      	movs	r2, #32
   1e428:	2100      	movs	r1, #0
   1e42a:	4668      	mov	r0, sp
   1e42c:	f7fc fc47 	bl	1acbe <memset>
    bzero(tv, sizeof(struct os_timeval));
   1e430:	2300      	movs	r3, #0
   1e432:	602b      	str	r3, [r5, #0]
   1e434:	606b      	str	r3, [r5, #4]
   1e436:	60ab      	str	r3, [r5, #8]
   1e438:	60eb      	str	r3, [r5, #12]
    bzero(tz, sizeof(struct os_timezone));      /* default to UTC time */
   1e43a:	6033      	str	r3, [r6, #0]

    cp = input;
    cp = parse_number(cp, 4, &ct.year);
   1e43c:	466a      	mov	r2, sp
   1e43e:	2104      	movs	r1, #4
   1e440:	4620      	mov	r0, r4
   1e442:	f7ff fe2d 	bl	1e0a0 <parse_number>
    if (cp == NULL || *cp != '-') {
   1e446:	2800      	cmp	r0, #0
   1e448:	f000 80a4 	beq.w	1e594 <datetime_parse+0x178>
   1e44c:	7802      	ldrb	r2, [r0, #0]
   1e44e:	2a2d      	cmp	r2, #45	; 0x2d
   1e450:	f040 80a3 	bne.w	1e59a <datetime_parse+0x17e>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.mon);
   1e454:	aa01      	add	r2, sp, #4
   1e456:	2102      	movs	r1, #2
   1e458:	3001      	adds	r0, #1
   1e45a:	f7ff fe21 	bl	1e0a0 <parse_number>
    if (cp == NULL || *cp != '-') {
   1e45e:	2800      	cmp	r0, #0
   1e460:	f000 809e 	beq.w	1e5a0 <datetime_parse+0x184>
   1e464:	7802      	ldrb	r2, [r0, #0]
   1e466:	2a2d      	cmp	r2, #45	; 0x2d
   1e468:	f040 809d 	bne.w	1e5a6 <datetime_parse+0x18a>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.day);
   1e46c:	aa02      	add	r2, sp, #8
   1e46e:	2102      	movs	r1, #2
   1e470:	3001      	adds	r0, #1
   1e472:	f7ff fe15 	bl	1e0a0 <parse_number>
    if (cp == NULL || *cp != 'T') {
   1e476:	2800      	cmp	r0, #0
   1e478:	f000 8098 	beq.w	1e5ac <datetime_parse+0x190>
   1e47c:	7802      	ldrb	r2, [r0, #0]
   1e47e:	2a54      	cmp	r2, #84	; 0x54
   1e480:	f040 8097 	bne.w	1e5b2 <datetime_parse+0x196>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.hour);
   1e484:	aa03      	add	r2, sp, #12
   1e486:	2102      	movs	r1, #2
   1e488:	3001      	adds	r0, #1
   1e48a:	f7ff fe09 	bl	1e0a0 <parse_number>
    if (cp == NULL || *cp != ':') {
   1e48e:	2800      	cmp	r0, #0
   1e490:	f000 8092 	beq.w	1e5b8 <datetime_parse+0x19c>
   1e494:	7802      	ldrb	r2, [r0, #0]
   1e496:	2a3a      	cmp	r2, #58	; 0x3a
   1e498:	f040 8091 	bne.w	1e5be <datetime_parse+0x1a2>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.min);
   1e49c:	aa04      	add	r2, sp, #16
   1e49e:	2102      	movs	r1, #2
   1e4a0:	3001      	adds	r0, #1
   1e4a2:	f7ff fdfd 	bl	1e0a0 <parse_number>
    if (cp == NULL || *cp != ':') {
   1e4a6:	2800      	cmp	r0, #0
   1e4a8:	f000 808c 	beq.w	1e5c4 <datetime_parse+0x1a8>
   1e4ac:	7802      	ldrb	r2, [r0, #0]
   1e4ae:	2a3a      	cmp	r2, #58	; 0x3a
   1e4b0:	f040 808b 	bne.w	1e5ca <datetime_parse+0x1ae>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.sec);
   1e4b4:	aa05      	add	r2, sp, #20
   1e4b6:	2102      	movs	r1, #2
   1e4b8:	3001      	adds	r0, #1
   1e4ba:	f7ff fdf1 	bl	1e0a0 <parse_number>
    if (cp == NULL) {
   1e4be:	4607      	mov	r7, r0
   1e4c0:	2800      	cmp	r0, #0
   1e4c2:	f000 8085 	beq.w	1e5d0 <datetime_parse+0x1b4>
        goto err;
    }

    /* parse fractional seconds if specified */
    if (*cp == '.') {
   1e4c6:	7803      	ldrb	r3, [r0, #0]
   1e4c8:	2b2e      	cmp	r3, #46	; 0x2e
   1e4ca:	d035      	beq.n	1e538 <datetime_parse+0x11c>
        while (digits++ < 6) {
            ct.usec *= 10;
        }
    }

    if (*cp == 'Z' || *cp == 'z') {
   1e4cc:	783b      	ldrb	r3, [r7, #0]
   1e4ce:	2b5a      	cmp	r3, #90	; 0x5a
   1e4d0:	d051      	beq.n	1e576 <datetime_parse+0x15a>
   1e4d2:	2b7a      	cmp	r3, #122	; 0x7a
   1e4d4:	d04f      	beq.n	1e576 <datetime_parse+0x15a>
        cp++;
    } else if (*cp == '+' || *cp == '-') {
   1e4d6:	2b2b      	cmp	r3, #43	; 0x2b
   1e4d8:	d001      	beq.n	1e4de <datetime_parse+0xc2>
   1e4da:	2b2d      	cmp	r3, #45	; 0x2d
   1e4dc:	d14c      	bne.n	1e578 <datetime_parse+0x15c>
        sign = (*cp == '+') ? +1 : -1;
   1e4de:	2b2b      	cmp	r3, #43	; 0x2b
   1e4e0:	d056      	beq.n	1e590 <datetime_parse+0x174>
   1e4e2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        cp = parse_number(cp + 1, 2, &off_hour);
   1e4e6:	aa09      	add	r2, sp, #36	; 0x24
   1e4e8:	2102      	movs	r1, #2
   1e4ea:	1c78      	adds	r0, r7, #1
   1e4ec:	f7ff fdd8 	bl	1e0a0 <parse_number>
        if (cp == NULL || *cp != ':') {
   1e4f0:	2800      	cmp	r0, #0
   1e4f2:	d073      	beq.n	1e5dc <datetime_parse+0x1c0>
   1e4f4:	7802      	ldrb	r2, [r0, #0]
   1e4f6:	2a3a      	cmp	r2, #58	; 0x3a
   1e4f8:	d173      	bne.n	1e5e2 <datetime_parse+0x1c6>
            goto err;
        }

        cp = parse_number(cp + 1, 2, &off_min);
   1e4fa:	aa08      	add	r2, sp, #32
   1e4fc:	2102      	movs	r1, #2
   1e4fe:	3001      	adds	r0, #1
   1e500:	f7ff fdce 	bl	1e0a0 <parse_number>
        if (cp == NULL) {
   1e504:	4607      	mov	r7, r0
   1e506:	2800      	cmp	r0, #0
   1e508:	d06e      	beq.n	1e5e8 <datetime_parse+0x1cc>
            goto err;
        }

        if (off_hour < 0 || off_hour > 23 || off_min < 0 || off_min > 59) {
   1e50a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e50c:	2a17      	cmp	r2, #23
   1e50e:	d86e      	bhi.n	1e5ee <datetime_parse+0x1d2>
   1e510:	9b08      	ldr	r3, [sp, #32]
   1e512:	2b00      	cmp	r3, #0
   1e514:	db6e      	blt.n	1e5f4 <datetime_parse+0x1d8>
   1e516:	2b3b      	cmp	r3, #59	; 0x3b
   1e518:	dc6f      	bgt.n	1e5fa <datetime_parse+0x1de>

        /*
         * Allow time zone offsets of up to 18 hours from the GMT.
         * https://docs.oracle.com/javase/8/docs/api/java/time/ZoneOffset.html
         */
        tz->tz_minuteswest = off_hour * 60 + off_min;
   1e51a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   1e51e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1e522:	b29a      	uxth	r2, r3
   1e524:	b21b      	sxth	r3, r3
   1e526:	8033      	strh	r3, [r6, #0]
        if (tz->tz_minuteswest > 18 * 60) {
   1e528:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
   1e52c:	dc68      	bgt.n	1e600 <datetime_parse+0x1e4>

        /*
         * Positive GMT offsets (i.e. timezones to the east of GMT) are
         * represented with a negative 'tz_minuteswest' value.
         */
        if (sign > 0) {
   1e52e:	2c00      	cmp	r4, #0
   1e530:	dd22      	ble.n	1e578 <datetime_parse+0x15c>
            tz->tz_minuteswest = -tz->tz_minuteswest;
   1e532:	4252      	negs	r2, r2
   1e534:	8032      	strh	r2, [r6, #0]
   1e536:	e01f      	b.n	1e578 <datetime_parse+0x15c>
        ep = ++cp;
   1e538:	3001      	adds	r0, #1
   1e53a:	4604      	mov	r4, r0
        while (isdigit((unsigned char)*ep)) {
   1e53c:	e000      	b.n	1e540 <datetime_parse+0x124>
            ep++;
   1e53e:	3401      	adds	r4, #1
        while (isdigit((unsigned char)*ep)) {
   1e540:	7823      	ldrb	r3, [r4, #0]
   1e542:	3b30      	subs	r3, #48	; 0x30
   1e544:	2b09      	cmp	r3, #9
   1e546:	d9fa      	bls.n	1e53e <datetime_parse+0x122>
        digits = ep - cp;
   1e548:	1a24      	subs	r4, r4, r0
        if (digits <= 0 || digits > 6) {
   1e54a:	1e63      	subs	r3, r4, #1
   1e54c:	2b05      	cmp	r3, #5
   1e54e:	d842      	bhi.n	1e5d6 <datetime_parse+0x1ba>
        cp = parse_number(cp, digits, &ct.usec);
   1e550:	aa07      	add	r2, sp, #28
   1e552:	4621      	mov	r1, r4
   1e554:	f7ff fda4 	bl	1e0a0 <parse_number>
        if (cp == NULL) {
   1e558:	4607      	mov	r7, r0
   1e55a:	b940      	cbnz	r0, 1e56e <datetime_parse+0x152>
        goto err;
    }

    return (0);
err:
    return (-1);
   1e55c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e560:	e014      	b.n	1e58c <datetime_parse+0x170>
            ct.usec *= 10;
   1e562:	9b07      	ldr	r3, [sp, #28]
   1e564:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1e568:	005b      	lsls	r3, r3, #1
   1e56a:	9307      	str	r3, [sp, #28]
        while (digits++ < 6) {
   1e56c:	4614      	mov	r4, r2
   1e56e:	1c62      	adds	r2, r4, #1
   1e570:	2c05      	cmp	r4, #5
   1e572:	ddf6      	ble.n	1e562 <datetime_parse+0x146>
   1e574:	e7aa      	b.n	1e4cc <datetime_parse+0xb0>
        cp++;
   1e576:	3701      	adds	r7, #1
    if (*cp != '\0') {
   1e578:	783b      	ldrb	r3, [r7, #0]
   1e57a:	2b00      	cmp	r3, #0
   1e57c:	d143      	bne.n	1e606 <datetime_parse+0x1ea>
    if (clocktime_to_timeval(&ct, tz, tv) != 0) {
   1e57e:	462a      	mov	r2, r5
   1e580:	4631      	mov	r1, r6
   1e582:	4668      	mov	r0, sp
   1e584:	f7ff fda6 	bl	1e0d4 <clocktime_to_timeval>
   1e588:	2800      	cmp	r0, #0
   1e58a:	d13f      	bne.n	1e60c <datetime_parse+0x1f0>
}
   1e58c:	b00b      	add	sp, #44	; 0x2c
   1e58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        sign = (*cp == '+') ? +1 : -1;
   1e590:	2401      	movs	r4, #1
   1e592:	e7a8      	b.n	1e4e6 <datetime_parse+0xca>
    return (-1);
   1e594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e598:	e7f8      	b.n	1e58c <datetime_parse+0x170>
   1e59a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e59e:	e7f5      	b.n	1e58c <datetime_parse+0x170>
   1e5a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5a4:	e7f2      	b.n	1e58c <datetime_parse+0x170>
   1e5a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5aa:	e7ef      	b.n	1e58c <datetime_parse+0x170>
   1e5ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5b0:	e7ec      	b.n	1e58c <datetime_parse+0x170>
   1e5b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5b6:	e7e9      	b.n	1e58c <datetime_parse+0x170>
   1e5b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5bc:	e7e6      	b.n	1e58c <datetime_parse+0x170>
   1e5be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5c2:	e7e3      	b.n	1e58c <datetime_parse+0x170>
   1e5c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5c8:	e7e0      	b.n	1e58c <datetime_parse+0x170>
   1e5ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5ce:	e7dd      	b.n	1e58c <datetime_parse+0x170>
   1e5d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5d4:	e7da      	b.n	1e58c <datetime_parse+0x170>
   1e5d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5da:	e7d7      	b.n	1e58c <datetime_parse+0x170>
   1e5dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5e0:	e7d4      	b.n	1e58c <datetime_parse+0x170>
   1e5e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5e6:	e7d1      	b.n	1e58c <datetime_parse+0x170>
   1e5e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5ec:	e7ce      	b.n	1e58c <datetime_parse+0x170>
   1e5ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5f2:	e7cb      	b.n	1e58c <datetime_parse+0x170>
   1e5f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5f8:	e7c8      	b.n	1e58c <datetime_parse+0x170>
   1e5fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5fe:	e7c5      	b.n	1e58c <datetime_parse+0x170>
   1e600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e604:	e7c2      	b.n	1e58c <datetime_parse+0x170>
   1e606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e60a:	e7bf      	b.n	1e58c <datetime_parse+0x170>
   1e60c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e610:	e7bc      	b.n	1e58c <datetime_parse+0x170>
	...

0001e614 <datetime_format>:

int
datetime_format(const struct os_timeval *tv, const struct os_timezone *tz,
    char *ostr, int olen)
{
   1e614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e618:	b08e      	sub	sp, #56	; 0x38
   1e61a:	460f      	mov	r7, r1
   1e61c:	4690      	mov	r8, r2
   1e61e:	461c      	mov	r4, r3
    char *cp;
    int rc, rlen, minswest;
    int off_hour, off_min, sign;
    struct clocktime ct;

    rc = timeval_to_clocktime(tv, tz, &ct);
   1e620:	aa06      	add	r2, sp, #24
   1e622:	f7ff fe5b 	bl	1e2dc <timeval_to_clocktime>
    if (rc != 0) {
   1e626:	2800      	cmp	r0, #0
   1e628:	d141      	bne.n	1e6ae <datetime_format+0x9a>
   1e62a:	4606      	mov	r6, r0
    }

    cp = ostr;
    rlen = olen;

    rc = snprintf(cp, rlen, "%04d-%02d-%02dT%02d:%02d:%02d.%06d",
   1e62c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1e62e:	9305      	str	r3, [sp, #20]
   1e630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e632:	9304      	str	r3, [sp, #16]
   1e634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e636:	9303      	str	r3, [sp, #12]
   1e638:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e63a:	9302      	str	r3, [sp, #8]
   1e63c:	9b08      	ldr	r3, [sp, #32]
   1e63e:	9301      	str	r3, [sp, #4]
   1e640:	9b07      	ldr	r3, [sp, #28]
   1e642:	9300      	str	r3, [sp, #0]
   1e644:	9b06      	ldr	r3, [sp, #24]
   1e646:	4a21      	ldr	r2, [pc, #132]	; (1e6cc <datetime_format+0xb8>)
   1e648:	4621      	mov	r1, r4
   1e64a:	4640      	mov	r0, r8
   1e64c:	f7fc ff13 	bl	1b476 <snprintf>
   1e650:	4605      	mov	r5, r0
        ct.year, ct.mon, ct.day, ct.hour, ct.min, ct.sec, ct.usec);
    cp += rc;
   1e652:	4440      	add	r0, r8
    rlen -= rc;
   1e654:	1b64      	subs	r4, r4, r5
    if (rc < 0 || rlen <= 0) {
   1e656:	2d00      	cmp	r5, #0
   1e658:	db2c      	blt.n	1e6b4 <datetime_format+0xa0>
   1e65a:	2c00      	cmp	r4, #0
   1e65c:	dd2d      	ble.n	1e6ba <datetime_format+0xa6>
        goto err;
    }

    if (tz != NULL) {
   1e65e:	b14f      	cbz	r7, 1e674 <datetime_format+0x60>
        minswest = tz->tz_minuteswest;
   1e660:	f9b7 5000 	ldrsh.w	r5, [r7]
        if (tz->tz_dsttime) {
   1e664:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
   1e668:	b103      	cbz	r3, 1e66c <datetime_format+0x58>
            minswest -= 60;
   1e66a:	3d3c      	subs	r5, #60	; 0x3c
        }
    } else {
        minswest = 0;
    }

    if (minswest <= 0) {
   1e66c:	2d00      	cmp	r5, #0
   1e66e:	dd02      	ble.n	1e676 <datetime_format+0x62>
        sign = '+';
        minswest = -minswest;
    } else {
        sign = '-';
   1e670:	232d      	movs	r3, #45	; 0x2d
   1e672:	e002      	b.n	1e67a <datetime_format+0x66>
        minswest = 0;
   1e674:	4635      	mov	r5, r6
        minswest = -minswest;
   1e676:	426d      	negs	r5, r5
        sign = '+';
   1e678:	232b      	movs	r3, #43	; 0x2b
    }

    off_hour = minswest / 60;
   1e67a:	4a15      	ldr	r2, [pc, #84]	; (1e6d0 <datetime_format+0xbc>)
   1e67c:	fb82 1205 	smull	r1, r2, r2, r5
   1e680:	1951      	adds	r1, r2, r5
   1e682:	17ea      	asrs	r2, r5, #31
   1e684:	ebc2 1261 	rsb	r2, r2, r1, asr #5
    off_min = minswest % 60;
   1e688:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
   1e68c:	eba5 0581 	sub.w	r5, r5, r1, lsl #2

    rc = snprintf(cp, rlen, "%c%02d:%02d", sign, off_hour, off_min);
   1e690:	9501      	str	r5, [sp, #4]
   1e692:	9200      	str	r2, [sp, #0]
   1e694:	4a0f      	ldr	r2, [pc, #60]	; (1e6d4 <datetime_format+0xc0>)
   1e696:	4621      	mov	r1, r4
   1e698:	f7fc feed 	bl	1b476 <snprintf>
    cp += rc;
    rlen -= rc;
   1e69c:	1a24      	subs	r4, r4, r0
    if (rc < 0 || rlen <= 0) {
   1e69e:	2800      	cmp	r0, #0
   1e6a0:	db0e      	blt.n	1e6c0 <datetime_format+0xac>
   1e6a2:	2c00      	cmp	r4, #0
   1e6a4:	dd0f      	ble.n	1e6c6 <datetime_format+0xb2>

    return (0);

err:
    return (-1);
}
   1e6a6:	4630      	mov	r0, r6
   1e6a8:	b00e      	add	sp, #56	; 0x38
   1e6aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (-1);
   1e6ae:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1e6b2:	e7f8      	b.n	1e6a6 <datetime_format+0x92>
   1e6b4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1e6b8:	e7f5      	b.n	1e6a6 <datetime_format+0x92>
   1e6ba:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1e6be:	e7f2      	b.n	1e6a6 <datetime_format+0x92>
   1e6c0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1e6c4:	e7ef      	b.n	1e6a6 <datetime_format+0x92>
   1e6c6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1e6ca:	e7ec      	b.n	1e6a6 <datetime_format+0x92>
   1e6cc:	0003433c 	.word	0x0003433c
   1e6d0:	88888889 	.word	0x88888889
   1e6d4:	00034360 	.word	0x00034360

0001e6d8 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   1e6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e6da:	b083      	sub	sp, #12
   1e6dc:	460d      	mov	r5, r1
   1e6de:	4617      	mov	r7, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   1e6e0:	b29e      	uxth	r6, r3
   1e6e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e6e4:	9300      	str	r3, [sp, #0]
   1e6e6:	4603      	mov	r3, r0
   1e6e8:	9a08      	ldr	r2, [sp, #32]
   1e6ea:	4631      	mov	r1, r6
   1e6ec:	4628      	mov	r0, r5
   1e6ee:	f7fb fb89 	bl	19e04 <os_mempool_init>
    if (rc != 0) {
   1e6f2:	b108      	cbz	r0, 1e6f8 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1e6f4:	b003      	add	sp, #12
   1e6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   1e6f8:	4633      	mov	r3, r6
   1e6fa:	9a08      	ldr	r2, [sp, #32]
   1e6fc:	b292      	uxth	r2, r2
   1e6fe:	4629      	mov	r1, r5
   1e700:	4638      	mov	r0, r7
   1e702:	f7fa ff45 	bl	19590 <os_mbuf_pool_init>
    if (rc != 0) {
   1e706:	e7f5      	b.n	1e6f4 <mem_init_mbuf_pool+0x1c>

0001e708 <mem_split_frag>:
 *                              NULL on failure.
 */
struct os_mbuf *
mem_split_frag(struct os_mbuf **om, uint16_t max_frag_sz,
               mem_frag_alloc_fn *alloc_cb, void *cb_arg)
{
   1e708:	b570      	push	{r4, r5, r6, lr}
   1e70a:	4604      	mov	r4, r0
   1e70c:	460d      	mov	r5, r1
   1e70e:	4619      	mov	r1, r3
    struct os_mbuf *frag;
    int rc;

    if (OS_MBUF_PKTLEN(*om) <= max_frag_sz) {
   1e710:	6806      	ldr	r6, [r0, #0]
   1e712:	8a33      	ldrh	r3, [r6, #16]
   1e714:	42ab      	cmp	r3, r5
   1e716:	d913      	bls.n	1e740 <mem_split_frag+0x38>
        *om = NULL;
        return frag;
    }

    /* Packet needs to be split.  Allocate a new buffer for the fragment. */
    frag = alloc_cb(max_frag_sz, cb_arg);
   1e718:	4628      	mov	r0, r5
   1e71a:	4790      	blx	r2
    if (frag == NULL) {
   1e71c:	4606      	mov	r6, r0
   1e71e:	b190      	cbz	r0, 1e746 <mem_split_frag+0x3e>
        goto err;
    }

    /* Move data from the front of the packet into the fragment mbuf. */
    rc = os_mbuf_appendfrom(frag, *om, 0, max_frag_sz);
   1e720:	462b      	mov	r3, r5
   1e722:	2200      	movs	r2, #0
   1e724:	6821      	ldr	r1, [r4, #0]
   1e726:	f7fa ffe7 	bl	196f8 <os_mbuf_appendfrom>
    if (rc != 0) {
   1e72a:	b960      	cbnz	r0, 1e746 <mem_split_frag+0x3e>
        goto err;
    }
    os_mbuf_adj(*om, max_frag_sz);
   1e72c:	4629      	mov	r1, r5
   1e72e:	6820      	ldr	r0, [r4, #0]
   1e730:	f7fb f83b 	bl	197aa <os_mbuf_adj>

    /* Free unused portion of of source mbuf chain, if possible. */
    *om = os_mbuf_trim_front(*om);
   1e734:	6820      	ldr	r0, [r4, #0]
   1e736:	f7fb faa8 	bl	19c8a <os_mbuf_trim_front>
   1e73a:	6020      	str	r0, [r4, #0]
    return frag;

err:
    os_mbuf_free_chain(frag);
    return NULL;
}
   1e73c:	4630      	mov	r0, r6
   1e73e:	bd70      	pop	{r4, r5, r6, pc}
        *om = NULL;
   1e740:	2300      	movs	r3, #0
   1e742:	6003      	str	r3, [r0, #0]
        return frag;
   1e744:	e7fa      	b.n	1e73c <mem_split_frag+0x34>
    os_mbuf_free_chain(frag);
   1e746:	4630      	mov	r0, r6
   1e748:	f7fa ff61 	bl	1960e <os_mbuf_free_chain>
    return NULL;
   1e74c:	2600      	movs	r6, #0
   1e74e:	e7f5      	b.n	1e73c <mem_split_frag+0x34>

0001e750 <rwlock_complete_handoff>:
static void
rwlock_complete_handoff(struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);
    RWLOCK_DBG_ASSERT(lock->handoffs > 0);
    lock->handoffs--;
   1e750:	f890 3020 	ldrb.w	r3, [r0, #32]
   1e754:	3b01      	subs	r3, #1
   1e756:	f880 3020 	strb.w	r3, [r0, #32]
}
   1e75a:	4770      	bx	lr

0001e75c <rwlock_read_must_block>:
static bool
rwlock_read_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   1e75c:	69c3      	ldr	r3, [r0, #28]
           lock->pending_writers > 0 ||
   1e75e:	f013 2fff 	tst.w	r3, #4278255360	; 0xff00ff00
   1e762:	d104      	bne.n	1e76e <rwlock_read_must_block+0x12>
           lock->handoffs > 0;
   1e764:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->pending_writers > 0 ||
   1e768:	b11b      	cbz	r3, 1e772 <rwlock_read_must_block+0x16>
   1e76a:	2001      	movs	r0, #1
   1e76c:	4770      	bx	lr
   1e76e:	2001      	movs	r0, #1
   1e770:	4770      	bx	lr
   1e772:	2000      	movs	r0, #0
}
   1e774:	4770      	bx	lr

0001e776 <rwlock_write_must_block>:
static bool
rwlock_write_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   1e776:	8b83      	ldrh	r3, [r0, #28]
           lock->num_readers > 0 ||
   1e778:	b923      	cbnz	r3, 1e784 <rwlock_write_must_block+0xe>
           lock->handoffs > 0;
   1e77a:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->num_readers > 0 ||
   1e77e:	b11b      	cbz	r3, 1e788 <rwlock_write_must_block+0x12>
   1e780:	2001      	movs	r0, #1
   1e782:	4770      	bx	lr
   1e784:	2001      	movs	r0, #1
   1e786:	4770      	bx	lr
   1e788:	2000      	movs	r0, #0
}
   1e78a:	4770      	bx	lr

0001e78c <rwlock_unblock>:
{
   1e78c:	b510      	push	{r4, lr}
   1e78e:	4604      	mov	r4, r0
    if (lock->pending_writers > 0) {
   1e790:	7fc3      	ldrb	r3, [r0, #31]
   1e792:	b91b      	cbnz	r3, 1e79c <rwlock_unblock+0x10>
        lock->handoffs = lock->pending_readers;
   1e794:	7f83      	ldrb	r3, [r0, #30]
   1e796:	f880 3020 	strb.w	r3, [r0, #32]
        while (lock->pending_readers > 0) {
   1e79a:	e010      	b.n	1e7be <rwlock_unblock+0x32>
        lock->handoffs = 1;
   1e79c:	2301      	movs	r3, #1
   1e79e:	f880 3020 	strb.w	r3, [r0, #32]
        os_sem_release(&lock->wsem);
   1e7a2:	3014      	adds	r0, #20
   1e7a4:	f010 f820 	bl	2e7e8 <os_sem_release>
        lock->pending_writers--;
   1e7a8:	7fe3      	ldrb	r3, [r4, #31]
   1e7aa:	3b01      	subs	r3, #1
   1e7ac:	77e3      	strb	r3, [r4, #31]
   1e7ae:	e009      	b.n	1e7c4 <rwlock_unblock+0x38>
            os_sem_release(&lock->rsem);
   1e7b0:	f104 000c 	add.w	r0, r4, #12
   1e7b4:	f010 f818 	bl	2e7e8 <os_sem_release>
            lock->pending_readers--;
   1e7b8:	7fa3      	ldrb	r3, [r4, #30]
   1e7ba:	3b01      	subs	r3, #1
   1e7bc:	77a3      	strb	r3, [r4, #30]
        while (lock->pending_readers > 0) {
   1e7be:	7fa3      	ldrb	r3, [r4, #30]
   1e7c0:	2b00      	cmp	r3, #0
   1e7c2:	d1f5      	bne.n	1e7b0 <rwlock_unblock+0x24>
}
   1e7c4:	bd10      	pop	{r4, pc}

0001e7c6 <rwlock_acquire_read>:

void
rwlock_acquire_read(struct rwlock *lock)
{
   1e7c6:	b538      	push	{r3, r4, r5, lr}
   1e7c8:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1e7ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e7ce:	f7fc f9b5 	bl	1ab3c <os_mutex_pend>

    if (rwlock_read_must_block(lock)) {
   1e7d2:	4620      	mov	r0, r4
   1e7d4:	f7ff ffc2 	bl	1e75c <rwlock_read_must_block>
   1e7d8:	b140      	cbz	r0, 1e7ec <rwlock_acquire_read+0x26>
        lock->pending_readers++;
   1e7da:	7fa3      	ldrb	r3, [r4, #30]
   1e7dc:	3301      	adds	r3, #1
   1e7de:	77a3      	strb	r3, [r4, #30]
        acquired = false;
   1e7e0:	2500      	movs	r5, #0
    } else {
        lock->num_readers++;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   1e7e2:	4620      	mov	r0, r4
   1e7e4:	f7fc f94a 	bl	1aa7c <os_mutex_release>

    if (acquired) {
   1e7e8:	b12d      	cbz	r5, 1e7f6 <rwlock_acquire_read+0x30>
    /* Record reader ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->num_readers++;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   1e7ea:	bd38      	pop	{r3, r4, r5, pc}
        lock->num_readers++;
   1e7ec:	7f23      	ldrb	r3, [r4, #28]
   1e7ee:	3301      	adds	r3, #1
   1e7f0:	7723      	strb	r3, [r4, #28]
        acquired = true;
   1e7f2:	2501      	movs	r5, #1
   1e7f4:	e7f5      	b.n	1e7e2 <rwlock_acquire_read+0x1c>
    os_sem_pend(&lock->rsem, OS_TIMEOUT_NEVER);
   1e7f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e7fa:	f104 000c 	add.w	r0, r4, #12
   1e7fe:	f010 f825 	bl	2e84c <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1e802:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e806:	4620      	mov	r0, r4
   1e808:	f7fc f998 	bl	1ab3c <os_mutex_pend>
    lock->num_readers++;
   1e80c:	7f23      	ldrb	r3, [r4, #28]
   1e80e:	3301      	adds	r3, #1
   1e810:	7723      	strb	r3, [r4, #28]
    rwlock_complete_handoff(lock);
   1e812:	4620      	mov	r0, r4
   1e814:	f7ff ff9c 	bl	1e750 <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   1e818:	4620      	mov	r0, r4
   1e81a:	f7fc f92f 	bl	1aa7c <os_mutex_release>
   1e81e:	e7e4      	b.n	1e7ea <rwlock_acquire_read+0x24>

0001e820 <rwlock_release_read>:

void
rwlock_release_read(struct rwlock *lock)
{
   1e820:	b510      	push	{r4, lr}
   1e822:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1e824:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e828:	f7fc f988 	bl	1ab3c <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->num_readers > 0);
    lock->num_readers--;
   1e82c:	7f23      	ldrb	r3, [r4, #28]
   1e82e:	3b01      	subs	r3, #1
   1e830:	b2db      	uxtb	r3, r3
   1e832:	7723      	strb	r3, [r4, #28]

    /* If this is the last active reader, unblock a pending writer if there is
     * one.
     */
    if (lock->num_readers == 0) {
   1e834:	b11b      	cbz	r3, 1e83e <rwlock_release_read+0x1e>
        rwlock_unblock(lock);
    }

    os_mutex_release(&lock->mtx);
   1e836:	4620      	mov	r0, r4
   1e838:	f7fc f920 	bl	1aa7c <os_mutex_release>
}
   1e83c:	bd10      	pop	{r4, pc}
        rwlock_unblock(lock);
   1e83e:	4620      	mov	r0, r4
   1e840:	f7ff ffa4 	bl	1e78c <rwlock_unblock>
   1e844:	e7f7      	b.n	1e836 <rwlock_release_read+0x16>

0001e846 <rwlock_acquire_write>:

void
rwlock_acquire_write(struct rwlock *lock)
{
   1e846:	b538      	push	{r3, r4, r5, lr}
   1e848:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1e84a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e84e:	f7fc f975 	bl	1ab3c <os_mutex_pend>

    if (rwlock_write_must_block(lock)) {
   1e852:	4620      	mov	r0, r4
   1e854:	f7ff ff8f 	bl	1e776 <rwlock_write_must_block>
   1e858:	b140      	cbz	r0, 1e86c <rwlock_acquire_write+0x26>
        lock->pending_writers++;
   1e85a:	7fe3      	ldrb	r3, [r4, #31]
   1e85c:	3301      	adds	r3, #1
   1e85e:	77e3      	strb	r3, [r4, #31]
        acquired = false;
   1e860:	2500      	movs	r5, #0
    } else {
        lock->active_writer = true;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   1e862:	4620      	mov	r0, r4
   1e864:	f7fc f90a 	bl	1aa7c <os_mutex_release>

    if (acquired) {
   1e868:	b11d      	cbz	r5, 1e872 <rwlock_acquire_write+0x2c>
    /* Record writer ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->active_writer = true;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   1e86a:	bd38      	pop	{r3, r4, r5, pc}
        lock->active_writer = true;
   1e86c:	2501      	movs	r5, #1
   1e86e:	7765      	strb	r5, [r4, #29]
        acquired = true;
   1e870:	e7f7      	b.n	1e862 <rwlock_acquire_write+0x1c>
    os_sem_pend(&lock->wsem, OS_TIMEOUT_NEVER);
   1e872:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e876:	f104 0014 	add.w	r0, r4, #20
   1e87a:	f00f ffe7 	bl	2e84c <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1e87e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e882:	4620      	mov	r0, r4
   1e884:	f7fc f95a 	bl	1ab3c <os_mutex_pend>
    lock->active_writer = true;
   1e888:	2301      	movs	r3, #1
   1e88a:	7763      	strb	r3, [r4, #29]
    rwlock_complete_handoff(lock);
   1e88c:	4620      	mov	r0, r4
   1e88e:	f7ff ff5f 	bl	1e750 <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   1e892:	4620      	mov	r0, r4
   1e894:	f7fc f8f2 	bl	1aa7c <os_mutex_release>
   1e898:	e7e7      	b.n	1e86a <rwlock_acquire_write+0x24>

0001e89a <rwlock_release_write>:

void
rwlock_release_write(struct rwlock *lock)
{
   1e89a:	b510      	push	{r4, lr}
   1e89c:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1e89e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e8a2:	f7fc f94b 	bl	1ab3c <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->active_writer);
    lock->active_writer = false;
   1e8a6:	2300      	movs	r3, #0
   1e8a8:	7763      	strb	r3, [r4, #29]

    rwlock_unblock(lock);
   1e8aa:	4620      	mov	r0, r4
   1e8ac:	f7ff ff6e 	bl	1e78c <rwlock_unblock>

    os_mutex_release(&lock->mtx);
   1e8b0:	4620      	mov	r0, r4
   1e8b2:	f7fc f8e3 	bl	1aa7c <os_mutex_release>
}
   1e8b6:	bd10      	pop	{r4, pc}

0001e8b8 <rwlock_init>:

int
rwlock_init(struct rwlock *lock)
{
   1e8b8:	b510      	push	{r4, lr}
   1e8ba:	4604      	mov	r4, r0
    int rc;

    *lock = (struct rwlock) { 0 };
   1e8bc:	2224      	movs	r2, #36	; 0x24
   1e8be:	2100      	movs	r1, #0
   1e8c0:	f7fc f9fd 	bl	1acbe <memset>

    rc = os_mutex_init(&lock->mtx);
   1e8c4:	4620      	mov	r0, r4
   1e8c6:	f7fc f8cf 	bl	1aa68 <os_mutex_init>
    if (rc != 0) {
   1e8ca:	b100      	cbz	r0, 1e8ce <rwlock_init+0x16>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1e8cc:	bd10      	pop	{r4, pc}
    rc = os_sem_init(&lock->rsem, 0);
   1e8ce:	2100      	movs	r1, #0
   1e8d0:	f104 000c 	add.w	r0, r4, #12
   1e8d4:	f00f ff80 	bl	2e7d8 <os_sem_init>
    if (rc != 0) {
   1e8d8:	2800      	cmp	r0, #0
   1e8da:	d1f7      	bne.n	1e8cc <rwlock_init+0x14>
    rc = os_sem_init(&lock->wsem, 0);
   1e8dc:	2100      	movs	r1, #0
   1e8de:	f104 0014 	add.w	r0, r4, #20
   1e8e2:	f00f ff79 	bl	2e7d8 <os_sem_init>
    if (rc != 0) {
   1e8e6:	e7f1      	b.n	1e8cc <rwlock_init+0x14>

0001e8e8 <streamer_vprintf>:
    return streamer->cfg->write_cb(streamer, src, len);
}

int
streamer_vprintf(struct streamer *streamer, const char *fmt, va_list ap)
{
   1e8e8:	b508      	push	{r3, lr}
    return streamer->cfg->vprintf_cb(streamer, fmt, ap);
   1e8ea:	6803      	ldr	r3, [r0, #0]
   1e8ec:	685b      	ldr	r3, [r3, #4]
   1e8ee:	4798      	blx	r3
}
   1e8f0:	bd08      	pop	{r3, pc}

0001e8f2 <streamer_printf>:

int
streamer_printf(struct streamer *streamer, const char *fmt, ...)
{
   1e8f2:	b40e      	push	{r1, r2, r3}
   1e8f4:	b500      	push	{lr}
   1e8f6:	b082      	sub	sp, #8
   1e8f8:	aa03      	add	r2, sp, #12
   1e8fa:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list ap;
    int rc;

    va_start(ap, fmt);
   1e8fe:	9201      	str	r2, [sp, #4]
    rc = streamer_vprintf(streamer, fmt, ap);
   1e900:	f7ff fff2 	bl	1e8e8 <streamer_vprintf>
    va_end(ap);

    return rc;
}
   1e904:	b002      	add	sp, #8
   1e906:	f85d eb04 	ldr.w	lr, [sp], #4
   1e90a:	b003      	add	sp, #12
   1e90c:	4770      	bx	lr

0001e90e <streamer_console_vprintf>:
}

static int
streamer_console_vprintf(struct streamer *streamer,
                         const char *fmt, va_list ap)
{
   1e90e:	b508      	push	{r3, lr}
   1e910:	4608      	mov	r0, r1
    return console_vprintf(fmt, ap);
   1e912:	4611      	mov	r1, r2
   1e914:	f7fd fbec 	bl	1c0f0 <console_vprintf>
}
   1e918:	bd08      	pop	{r3, pc}

0001e91a <streamer_console_write>:
{
   1e91a:	b508      	push	{r3, lr}
   1e91c:	4608      	mov	r0, r1
    console_write(src, len);
   1e91e:	4611      	mov	r1, r2
   1e920:	f7fd fa4c 	bl	1bdbc <console_write>
}
   1e924:	2000      	movs	r0, #0
   1e926:	bd08      	pop	{r3, pc}

0001e928 <streamer_console_get>:

struct streamer *
streamer_console_get(void)
{
    return &streamer_console;
}
   1e928:	4800      	ldr	r0, [pc, #0]	; (1e92c <streamer_console_get+0x4>)
   1e92a:	4770      	bx	lr
   1e92c:	100006b8 	.word	0x100006b8

0001e930 <ble_att_rx_dispatch_entry_find>:
    STATS_NAME(ble_att_stats, write_cmd_tx)
STATS_NAME_END(ble_att_stats)

static const struct ble_att_rx_dispatch_entry *
ble_att_rx_dispatch_entry_find(uint8_t op)
{
   1e930:	4601      	mov	r1, r0
    const struct ble_att_rx_dispatch_entry *entry;
    int i;

    for (i = 0; i < BLE_ATT_RX_DISPATCH_SZ; i++) {
   1e932:	2300      	movs	r3, #0
   1e934:	2b1a      	cmp	r3, #26
   1e936:	d809      	bhi.n	1e94c <ble_att_rx_dispatch_entry_find+0x1c>
        entry = ble_att_rx_dispatch + i;
   1e938:	4a06      	ldr	r2, [pc, #24]	; (1e954 <ble_att_rx_dispatch_entry_find+0x24>)
   1e93a:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
        if (entry->bde_op == op) {
   1e93e:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   1e942:	428a      	cmp	r2, r1
   1e944:	d005      	beq.n	1e952 <ble_att_rx_dispatch_entry_find+0x22>
            return entry;
        }

        if (entry->bde_op > op) {
   1e946:	d803      	bhi.n	1e950 <ble_att_rx_dispatch_entry_find+0x20>
    for (i = 0; i < BLE_ATT_RX_DISPATCH_SZ; i++) {
   1e948:	3301      	adds	r3, #1
   1e94a:	e7f3      	b.n	1e934 <ble_att_rx_dispatch_entry_find+0x4>
            break;
        }
    }

    return NULL;
   1e94c:	2000      	movs	r0, #0
   1e94e:	4770      	bx	lr
   1e950:	2000      	movs	r0, #0
}
   1e952:	4770      	bx	lr
   1e954:	000343ac 	.word	0x000343ac

0001e958 <ble_att_inc_rx_stat>:
}

static void
ble_att_inc_rx_stat(uint8_t att_op)
{
    switch (att_op) {
   1e958:	3801      	subs	r0, #1
   1e95a:	2851      	cmp	r0, #81	; 0x51
   1e95c:	f200 80f2 	bhi.w	1eb44 <ble_att_inc_rx_stat+0x1ec>
   1e960:	e8df f010 	tbh	[pc, r0, lsl #1]
   1e964:	00570052 	.word	0x00570052
   1e968:	0061005c 	.word	0x0061005c
   1e96c:	006b0066 	.word	0x006b0066
   1e970:	00750070 	.word	0x00750070
   1e974:	007f007a 	.word	0x007f007a
   1e978:	00890084 	.word	0x00890084
   1e97c:	0093008e 	.word	0x0093008e
   1e980:	009d0098 	.word	0x009d0098
   1e984:	00ab00a4 	.word	0x00ab00a4
   1e988:	00f000b2 	.word	0x00f000b2
   1e98c:	00b900f0 	.word	0x00b900f0
   1e990:	00c700c0 	.word	0x00c700c0
   1e994:	00f000ce 	.word	0x00f000ce
   1e998:	00f000d5 	.word	0x00f000d5
   1e99c:	00e300dc 	.word	0x00e300dc
   1e9a0:	00f000f0 	.word	0x00f000f0
   1e9a4:	00f000f0 	.word	0x00f000f0
   1e9a8:	00f000f0 	.word	0x00f000f0
   1e9ac:	00f000f0 	.word	0x00f000f0
   1e9b0:	00f000f0 	.word	0x00f000f0
   1e9b4:	00f000f0 	.word	0x00f000f0
   1e9b8:	00f000f0 	.word	0x00f000f0
   1e9bc:	00f000f0 	.word	0x00f000f0
   1e9c0:	00f000f0 	.word	0x00f000f0
   1e9c4:	00f000f0 	.word	0x00f000f0
   1e9c8:	00f000f0 	.word	0x00f000f0
   1e9cc:	00f000f0 	.word	0x00f000f0
   1e9d0:	00f000f0 	.word	0x00f000f0
   1e9d4:	00f000f0 	.word	0x00f000f0
   1e9d8:	00f000f0 	.word	0x00f000f0
   1e9dc:	00f000f0 	.word	0x00f000f0
   1e9e0:	00f000f0 	.word	0x00f000f0
   1e9e4:	00f000f0 	.word	0x00f000f0
   1e9e8:	00f000f0 	.word	0x00f000f0
   1e9ec:	00f000f0 	.word	0x00f000f0
   1e9f0:	00f000f0 	.word	0x00f000f0
   1e9f4:	00f000f0 	.word	0x00f000f0
   1e9f8:	00f000f0 	.word	0x00f000f0
   1e9fc:	00f000f0 	.word	0x00f000f0
   1ea00:	00f000f0 	.word	0x00f000f0
   1ea04:	00ea00f0 	.word	0x00ea00f0
    case BLE_ATT_OP_ERROR_RSP:
        STATS_INC(ble_att_stats, error_rsp_rx);
   1ea08:	4a4f      	ldr	r2, [pc, #316]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1ea0a:	68d3      	ldr	r3, [r2, #12]
   1ea0c:	3301      	adds	r3, #1
   1ea0e:	60d3      	str	r3, [r2, #12]
        break;
   1ea10:	4770      	bx	lr

    case BLE_ATT_OP_MTU_REQ:
        STATS_INC(ble_att_stats, mtu_req_rx);
   1ea12:	4a4d      	ldr	r2, [pc, #308]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1ea14:	6953      	ldr	r3, [r2, #20]
   1ea16:	3301      	adds	r3, #1
   1ea18:	6153      	str	r3, [r2, #20]
        break;
   1ea1a:	4770      	bx	lr

    case BLE_ATT_OP_MTU_RSP:
        STATS_INC(ble_att_stats, mtu_rsp_rx);
   1ea1c:	4a4a      	ldr	r2, [pc, #296]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1ea1e:	69d3      	ldr	r3, [r2, #28]
   1ea20:	3301      	adds	r3, #1
   1ea22:	61d3      	str	r3, [r2, #28]
        break;
   1ea24:	4770      	bx	lr

    case BLE_ATT_OP_FIND_INFO_REQ:
        STATS_INC(ble_att_stats, find_info_req_rx);
   1ea26:	4a48      	ldr	r2, [pc, #288]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1ea28:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1ea2a:	3301      	adds	r3, #1
   1ea2c:	6253      	str	r3, [r2, #36]	; 0x24
        break;
   1ea2e:	4770      	bx	lr

    case BLE_ATT_OP_FIND_INFO_RSP:
        STATS_INC(ble_att_stats, find_info_rsp_rx);
   1ea30:	4a45      	ldr	r2, [pc, #276]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1ea32:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1ea34:	3301      	adds	r3, #1
   1ea36:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
   1ea38:	4770      	bx	lr

    case BLE_ATT_OP_FIND_TYPE_VALUE_REQ:
        STATS_INC(ble_att_stats, find_type_value_req_rx);
   1ea3a:	4a43      	ldr	r2, [pc, #268]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1ea3c:	6b53      	ldr	r3, [r2, #52]	; 0x34
   1ea3e:	3301      	adds	r3, #1
   1ea40:	6353      	str	r3, [r2, #52]	; 0x34
        break;
   1ea42:	4770      	bx	lr

    case BLE_ATT_OP_FIND_TYPE_VALUE_RSP:
        STATS_INC(ble_att_stats, find_type_value_rsp_rx);
   1ea44:	4a40      	ldr	r2, [pc, #256]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1ea46:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1ea48:	3301      	adds	r3, #1
   1ea4a:	63d3      	str	r3, [r2, #60]	; 0x3c
        break;
   1ea4c:	4770      	bx	lr

    case BLE_ATT_OP_READ_TYPE_REQ:
        STATS_INC(ble_att_stats, read_type_req_rx);
   1ea4e:	4a3e      	ldr	r2, [pc, #248]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1ea50:	6c53      	ldr	r3, [r2, #68]	; 0x44
   1ea52:	3301      	adds	r3, #1
   1ea54:	6453      	str	r3, [r2, #68]	; 0x44
        break;
   1ea56:	4770      	bx	lr

    case BLE_ATT_OP_READ_TYPE_RSP:
        STATS_INC(ble_att_stats, read_type_rsp_rx);
   1ea58:	4a3b      	ldr	r2, [pc, #236]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1ea5a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1ea5c:	3301      	adds	r3, #1
   1ea5e:	64d3      	str	r3, [r2, #76]	; 0x4c
        break;
   1ea60:	4770      	bx	lr

    case BLE_ATT_OP_READ_REQ:
        STATS_INC(ble_att_stats, read_req_rx);
   1ea62:	4a39      	ldr	r2, [pc, #228]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1ea64:	6d53      	ldr	r3, [r2, #84]	; 0x54
   1ea66:	3301      	adds	r3, #1
   1ea68:	6553      	str	r3, [r2, #84]	; 0x54
        break;
   1ea6a:	4770      	bx	lr

    case BLE_ATT_OP_READ_RSP:
        STATS_INC(ble_att_stats, read_rsp_rx);
   1ea6c:	4a36      	ldr	r2, [pc, #216]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1ea6e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1ea70:	3301      	adds	r3, #1
   1ea72:	65d3      	str	r3, [r2, #92]	; 0x5c
        break;
   1ea74:	4770      	bx	lr

    case BLE_ATT_OP_READ_BLOB_REQ:
        STATS_INC(ble_att_stats, read_blob_req_rx);
   1ea76:	4a34      	ldr	r2, [pc, #208]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1ea78:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1ea7a:	3301      	adds	r3, #1
   1ea7c:	6653      	str	r3, [r2, #100]	; 0x64
        break;
   1ea7e:	4770      	bx	lr

    case BLE_ATT_OP_READ_BLOB_RSP:
        STATS_INC(ble_att_stats, read_blob_rsp_rx);
   1ea80:	4a31      	ldr	r2, [pc, #196]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1ea82:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1ea84:	3301      	adds	r3, #1
   1ea86:	66d3      	str	r3, [r2, #108]	; 0x6c
        break;
   1ea88:	4770      	bx	lr

    case BLE_ATT_OP_READ_MULT_REQ:
        STATS_INC(ble_att_stats, read_mult_req_rx);
   1ea8a:	4a2f      	ldr	r2, [pc, #188]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1ea8c:	6f53      	ldr	r3, [r2, #116]	; 0x74
   1ea8e:	3301      	adds	r3, #1
   1ea90:	6753      	str	r3, [r2, #116]	; 0x74
        break;
   1ea92:	4770      	bx	lr

    case BLE_ATT_OP_READ_MULT_RSP:
        STATS_INC(ble_att_stats, read_mult_rsp_rx);
   1ea94:	4a2c      	ldr	r2, [pc, #176]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1ea96:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   1ea98:	3301      	adds	r3, #1
   1ea9a:	67d3      	str	r3, [r2, #124]	; 0x7c
        break;
   1ea9c:	4770      	bx	lr

    case BLE_ATT_OP_READ_GROUP_TYPE_REQ:
        STATS_INC(ble_att_stats, read_group_type_req_rx);
   1ea9e:	4a2a      	ldr	r2, [pc, #168]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1eaa0:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1eaa4:	3301      	adds	r3, #1
   1eaa6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        break;
   1eaaa:	4770      	bx	lr

    case BLE_ATT_OP_READ_GROUP_TYPE_RSP:
        STATS_INC(ble_att_stats, read_group_type_rsp_rx);
   1eaac:	4a26      	ldr	r2, [pc, #152]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1eaae:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   1eab2:	3301      	adds	r3, #1
   1eab4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        break;
   1eab8:	4770      	bx	lr

    case BLE_ATT_OP_WRITE_REQ:
        STATS_INC(ble_att_stats, write_req_rx);
   1eaba:	4a23      	ldr	r2, [pc, #140]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1eabc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   1eac0:	3301      	adds	r3, #1
   1eac2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        break;
   1eac6:	4770      	bx	lr

    case BLE_ATT_OP_WRITE_RSP:
        STATS_INC(ble_att_stats, write_rsp_rx);
   1eac8:	4a1f      	ldr	r2, [pc, #124]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1eaca:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1eace:	3301      	adds	r3, #1
   1ead0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
        break;
   1ead4:	4770      	bx	lr

    case BLE_ATT_OP_PREP_WRITE_REQ:
        STATS_INC(ble_att_stats, prep_write_req_rx);
   1ead6:	4a1c      	ldr	r2, [pc, #112]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1ead8:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
   1eadc:	3301      	adds	r3, #1
   1eade:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
        break;
   1eae2:	4770      	bx	lr

    case BLE_ATT_OP_PREP_WRITE_RSP:
        STATS_INC(ble_att_stats, prep_write_rsp_rx);
   1eae4:	4a18      	ldr	r2, [pc, #96]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1eae6:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
   1eaea:	3301      	adds	r3, #1
   1eaec:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
        break;
   1eaf0:	4770      	bx	lr

    case BLE_ATT_OP_EXEC_WRITE_REQ:
        STATS_INC(ble_att_stats, exec_write_req_rx);
   1eaf2:	4a15      	ldr	r2, [pc, #84]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1eaf4:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
   1eaf8:	3301      	adds	r3, #1
   1eafa:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
        break;
   1eafe:	4770      	bx	lr

    case BLE_ATT_OP_EXEC_WRITE_RSP:
        STATS_INC(ble_att_stats, exec_write_rsp_rx);
   1eb00:	4a11      	ldr	r2, [pc, #68]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1eb02:	f8d2 30bc 	ldr.w	r3, [r2, #188]	; 0xbc
   1eb06:	3301      	adds	r3, #1
   1eb08:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
        break;
   1eb0c:	4770      	bx	lr

    case BLE_ATT_OP_NOTIFY_REQ:
        STATS_INC(ble_att_stats, notify_req_rx);
   1eb0e:	4a0e      	ldr	r2, [pc, #56]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1eb10:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
   1eb14:	3301      	adds	r3, #1
   1eb16:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
        break;
   1eb1a:	4770      	bx	lr

    case BLE_ATT_OP_INDICATE_REQ:
        STATS_INC(ble_att_stats, indicate_req_rx);
   1eb1c:	4a0a      	ldr	r2, [pc, #40]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1eb1e:	f8d2 30cc 	ldr.w	r3, [r2, #204]	; 0xcc
   1eb22:	3301      	adds	r3, #1
   1eb24:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
        break;
   1eb28:	4770      	bx	lr

    case BLE_ATT_OP_INDICATE_RSP:
        STATS_INC(ble_att_stats, indicate_rsp_rx);
   1eb2a:	4a07      	ldr	r2, [pc, #28]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1eb2c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
   1eb30:	3301      	adds	r3, #1
   1eb32:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
        break;
   1eb36:	4770      	bx	lr

    case BLE_ATT_OP_WRITE_CMD:
        STATS_INC(ble_att_stats, write_cmd_rx);
   1eb38:	4a03      	ldr	r2, [pc, #12]	; (1eb48 <ble_att_inc_rx_stat+0x1f0>)
   1eb3a:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   1eb3e:	3301      	adds	r3, #1
   1eb40:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
        break;

    default:
        break;
    }
}
   1eb44:	4770      	bx	lr
   1eb46:	bf00      	nop
   1eb48:	100055a4 	.word	0x100055a4

0001eb4c <ble_att_rx_handle_unknown_request>:
static void
ble_att_rx_handle_unknown_request(uint8_t op, uint16_t conn_handle,
                                  struct os_mbuf **om)
{
    /* If this is command (bit6 is set to 1), do nothing */
    if (op & 0x40) {
   1eb4c:	f010 0f40 	tst.w	r0, #64	; 0x40
   1eb50:	d000      	beq.n	1eb54 <ble_att_rx_handle_unknown_request+0x8>
   1eb52:	4770      	bx	lr
{
   1eb54:	b570      	push	{r4, r5, r6, lr}
   1eb56:	b082      	sub	sp, #8
   1eb58:	4604      	mov	r4, r0
   1eb5a:	460e      	mov	r6, r1
   1eb5c:	4615      	mov	r5, r2
        return;
    }

    os_mbuf_adj(*om, OS_MBUF_PKTLEN(*om));
   1eb5e:	6810      	ldr	r0, [r2, #0]
   1eb60:	8a01      	ldrh	r1, [r0, #16]
   1eb62:	f7fa fe22 	bl	197aa <os_mbuf_adj>
    ble_att_svr_tx_error_rsp(conn_handle, *om, op, 0,
   1eb66:	2306      	movs	r3, #6
   1eb68:	9300      	str	r3, [sp, #0]
   1eb6a:	2300      	movs	r3, #0
   1eb6c:	4622      	mov	r2, r4
   1eb6e:	6829      	ldr	r1, [r5, #0]
   1eb70:	4630      	mov	r0, r6
   1eb72:	f001 fcfa 	bl	2056a <ble_att_svr_tx_error_rsp>
                             BLE_ATT_ERR_REQ_NOT_SUPPORTED);

    *om = NULL;
   1eb76:	2300      	movs	r3, #0
   1eb78:	602b      	str	r3, [r5, #0]
}
   1eb7a:	b002      	add	sp, #8
   1eb7c:	bd70      	pop	{r4, r5, r6, pc}

0001eb7e <ble_att_rx>:

static int
ble_att_rx(struct ble_l2cap_chan *chan)
{
   1eb7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eb82:	b082      	sub	sp, #8
   1eb84:	4604      	mov	r4, r0
    uint8_t op;
    uint16_t conn_handle;
    struct os_mbuf **om;
    int rc;

    conn_handle = ble_l2cap_get_conn_handle(chan);
   1eb86:	f00a f94e 	bl	28e26 <ble_l2cap_get_conn_handle>
    if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   1eb8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1eb8e:	4298      	cmp	r0, r3
   1eb90:	d033      	beq.n	1ebfa <ble_att_rx+0x7c>
   1eb92:	4605      	mov	r5, r0
        return BLE_HS_ENOTCONN;
    }

    om = &chan->rx_buf;
   1eb94:	f104 0710 	add.w	r7, r4, #16
    BLE_HS_DBG_ASSERT(*om != NULL);

    rc = os_mbuf_copydata(*om, 0, 1, &op);
   1eb98:	f10d 0307 	add.w	r3, sp, #7
   1eb9c:	2201      	movs	r2, #1
   1eb9e:	2100      	movs	r1, #0
   1eba0:	6920      	ldr	r0, [r4, #16]
   1eba2:	f7fa fdd5 	bl	19750 <os_mbuf_copydata>
    if (rc != 0) {
   1eba6:	bb50      	cbnz	r0, 1ebfe <ble_att_rx+0x80>
        return BLE_HS_EMSGSIZE;
    }

    entry = ble_att_rx_dispatch_entry_find(op);
   1eba8:	f89d 6007 	ldrb.w	r6, [sp, #7]
   1ebac:	4630      	mov	r0, r6
   1ebae:	f7ff febf 	bl	1e930 <ble_att_rx_dispatch_entry_find>
    if (entry == NULL) {
   1ebb2:	4680      	mov	r8, r0
   1ebb4:	b188      	cbz	r0, 1ebda <ble_att_rx+0x5c>
        ble_att_rx_handle_unknown_request(op, conn_handle, om);
        return BLE_HS_ENOTSUP;
    }

    ble_att_inc_rx_stat(op);
   1ebb6:	4630      	mov	r0, r6
   1ebb8:	f7ff fece 	bl	1e958 <ble_att_inc_rx_stat>

    /* Strip L2CAP ATT header from the front of the mbuf. */
    os_mbuf_adj(*om, 1);
   1ebbc:	2101      	movs	r1, #1
   1ebbe:	6920      	ldr	r0, [r4, #16]
   1ebc0:	f7fa fdf3 	bl	197aa <os_mbuf_adj>

    rc = entry->bde_fn(conn_handle, om);
   1ebc4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1ebc8:	4639      	mov	r1, r7
   1ebca:	4628      	mov	r0, r5
   1ebcc:	4798      	blx	r3
    if (rc != 0) {
   1ebce:	4604      	mov	r4, r0
   1ebd0:	b950      	cbnz	r0, 1ebe8 <ble_att_rx+0x6a>
        }
        return rc;
    }

    return 0;
}
   1ebd2:	4620      	mov	r0, r4
   1ebd4:	b002      	add	sp, #8
   1ebd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ble_att_rx_handle_unknown_request(op, conn_handle, om);
   1ebda:	463a      	mov	r2, r7
   1ebdc:	4629      	mov	r1, r5
   1ebde:	4630      	mov	r0, r6
   1ebe0:	f7ff ffb4 	bl	1eb4c <ble_att_rx_handle_unknown_request>
        return BLE_HS_ENOTSUP;
   1ebe4:	2408      	movs	r4, #8
   1ebe6:	e7f4      	b.n	1ebd2 <ble_att_rx+0x54>
        if (rc == BLE_HS_ENOTSUP) {
   1ebe8:	2808      	cmp	r0, #8
   1ebea:	d1f2      	bne.n	1ebd2 <ble_att_rx+0x54>
            ble_att_rx_handle_unknown_request(op, conn_handle, om);
   1ebec:	463a      	mov	r2, r7
   1ebee:	4629      	mov	r1, r5
   1ebf0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1ebf4:	f7ff ffaa 	bl	1eb4c <ble_att_rx_handle_unknown_request>
        return rc;
   1ebf8:	e7eb      	b.n	1ebd2 <ble_att_rx+0x54>
        return BLE_HS_ENOTCONN;
   1ebfa:	2407      	movs	r4, #7
   1ebfc:	e7e9      	b.n	1ebd2 <ble_att_rx+0x54>
        return BLE_HS_EMSGSIZE;
   1ebfe:	2404      	movs	r4, #4
   1ec00:	e7e7      	b.n	1ebd2 <ble_att_rx+0x54>

0001ec02 <ble_att_conn_chan_find>:
{
   1ec02:	b508      	push	{r3, lr}
   1ec04:	4613      	mov	r3, r2
    return ble_hs_misc_conn_chan_find(conn_handle, BLE_L2CAP_CID_ATT,
   1ec06:	460a      	mov	r2, r1
   1ec08:	2104      	movs	r1, #4
   1ec0a:	f009 fce7 	bl	285dc <ble_hs_misc_conn_chan_find>
}
   1ec0e:	bd08      	pop	{r3, pc}

0001ec10 <ble_att_inc_tx_stat>:
    switch (att_op) {
   1ec10:	3801      	subs	r0, #1
   1ec12:	2851      	cmp	r0, #81	; 0x51
   1ec14:	f200 80f4 	bhi.w	1ee00 <ble_att_inc_tx_stat+0x1f0>
   1ec18:	e8df f010 	tbh	[pc, r0, lsl #1]
   1ec1c:	00570052 	.word	0x00570052
   1ec20:	0061005c 	.word	0x0061005c
   1ec24:	006b0066 	.word	0x006b0066
   1ec28:	00750070 	.word	0x00750070
   1ec2c:	007f007a 	.word	0x007f007a
   1ec30:	00890084 	.word	0x00890084
   1ec34:	0093008e 	.word	0x0093008e
   1ec38:	009f0098 	.word	0x009f0098
   1ec3c:	00ad00a6 	.word	0x00ad00a6
   1ec40:	00f200b4 	.word	0x00f200b4
   1ec44:	00bb00f2 	.word	0x00bb00f2
   1ec48:	00c900c2 	.word	0x00c900c2
   1ec4c:	00f200d0 	.word	0x00f200d0
   1ec50:	00f200d7 	.word	0x00f200d7
   1ec54:	00e500de 	.word	0x00e500de
   1ec58:	00f200f2 	.word	0x00f200f2
   1ec5c:	00f200f2 	.word	0x00f200f2
   1ec60:	00f200f2 	.word	0x00f200f2
   1ec64:	00f200f2 	.word	0x00f200f2
   1ec68:	00f200f2 	.word	0x00f200f2
   1ec6c:	00f200f2 	.word	0x00f200f2
   1ec70:	00f200f2 	.word	0x00f200f2
   1ec74:	00f200f2 	.word	0x00f200f2
   1ec78:	00f200f2 	.word	0x00f200f2
   1ec7c:	00f200f2 	.word	0x00f200f2
   1ec80:	00f200f2 	.word	0x00f200f2
   1ec84:	00f200f2 	.word	0x00f200f2
   1ec88:	00f200f2 	.word	0x00f200f2
   1ec8c:	00f200f2 	.word	0x00f200f2
   1ec90:	00f200f2 	.word	0x00f200f2
   1ec94:	00f200f2 	.word	0x00f200f2
   1ec98:	00f200f2 	.word	0x00f200f2
   1ec9c:	00f200f2 	.word	0x00f200f2
   1eca0:	00f200f2 	.word	0x00f200f2
   1eca4:	00f200f2 	.word	0x00f200f2
   1eca8:	00f200f2 	.word	0x00f200f2
   1ecac:	00f200f2 	.word	0x00f200f2
   1ecb0:	00f200f2 	.word	0x00f200f2
   1ecb4:	00f200f2 	.word	0x00f200f2
   1ecb8:	00f200f2 	.word	0x00f200f2
   1ecbc:	00ec00f2 	.word	0x00ec00f2
        STATS_INC(ble_att_stats, error_rsp_tx);
   1ecc0:	4a50      	ldr	r2, [pc, #320]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1ecc2:	6913      	ldr	r3, [r2, #16]
   1ecc4:	3301      	adds	r3, #1
   1ecc6:	6113      	str	r3, [r2, #16]
        break;
   1ecc8:	4770      	bx	lr
        STATS_INC(ble_att_stats, mtu_req_tx);
   1ecca:	4a4e      	ldr	r2, [pc, #312]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1eccc:	6993      	ldr	r3, [r2, #24]
   1ecce:	3301      	adds	r3, #1
   1ecd0:	6193      	str	r3, [r2, #24]
        break;
   1ecd2:	4770      	bx	lr
        STATS_INC(ble_att_stats, mtu_rsp_tx);
   1ecd4:	4a4b      	ldr	r2, [pc, #300]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1ecd6:	6a13      	ldr	r3, [r2, #32]
   1ecd8:	3301      	adds	r3, #1
   1ecda:	6213      	str	r3, [r2, #32]
        break;
   1ecdc:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_info_req_tx);
   1ecde:	4a49      	ldr	r2, [pc, #292]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1ece0:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1ece2:	3301      	adds	r3, #1
   1ece4:	6293      	str	r3, [r2, #40]	; 0x28
        break;
   1ece6:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_info_rsp_tx);
   1ece8:	4a46      	ldr	r2, [pc, #280]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1ecea:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1ecec:	3301      	adds	r3, #1
   1ecee:	6313      	str	r3, [r2, #48]	; 0x30
        break;
   1ecf0:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_type_value_req_tx);
   1ecf2:	4a44      	ldr	r2, [pc, #272]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1ecf4:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1ecf6:	3301      	adds	r3, #1
   1ecf8:	6393      	str	r3, [r2, #56]	; 0x38
        break;
   1ecfa:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_type_value_rsp_tx);
   1ecfc:	4a41      	ldr	r2, [pc, #260]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1ecfe:	6c13      	ldr	r3, [r2, #64]	; 0x40
   1ed00:	3301      	adds	r3, #1
   1ed02:	6413      	str	r3, [r2, #64]	; 0x40
        break;
   1ed04:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_type_req_tx);
   1ed06:	4a3f      	ldr	r2, [pc, #252]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1ed08:	6c93      	ldr	r3, [r2, #72]	; 0x48
   1ed0a:	3301      	adds	r3, #1
   1ed0c:	6493      	str	r3, [r2, #72]	; 0x48
        break;
   1ed0e:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_type_rsp_tx);
   1ed10:	4a3c      	ldr	r2, [pc, #240]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1ed12:	6d13      	ldr	r3, [r2, #80]	; 0x50
   1ed14:	3301      	adds	r3, #1
   1ed16:	6513      	str	r3, [r2, #80]	; 0x50
        break;
   1ed18:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_req_tx);
   1ed1a:	4a3a      	ldr	r2, [pc, #232]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1ed1c:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1ed1e:	3301      	adds	r3, #1
   1ed20:	6593      	str	r3, [r2, #88]	; 0x58
        break;
   1ed22:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_rsp_tx);
   1ed24:	4a37      	ldr	r2, [pc, #220]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1ed26:	6e13      	ldr	r3, [r2, #96]	; 0x60
   1ed28:	3301      	adds	r3, #1
   1ed2a:	6613      	str	r3, [r2, #96]	; 0x60
        break;
   1ed2c:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_blob_req_tx);
   1ed2e:	4a35      	ldr	r2, [pc, #212]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1ed30:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1ed32:	3301      	adds	r3, #1
   1ed34:	6693      	str	r3, [r2, #104]	; 0x68
        break;
   1ed36:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_blob_rsp_tx);
   1ed38:	4a32      	ldr	r2, [pc, #200]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1ed3a:	6f13      	ldr	r3, [r2, #112]	; 0x70
   1ed3c:	3301      	adds	r3, #1
   1ed3e:	6713      	str	r3, [r2, #112]	; 0x70
        break;
   1ed40:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_mult_req_tx);
   1ed42:	4a30      	ldr	r2, [pc, #192]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1ed44:	6f93      	ldr	r3, [r2, #120]	; 0x78
   1ed46:	3301      	adds	r3, #1
   1ed48:	6793      	str	r3, [r2, #120]	; 0x78
        break;
   1ed4a:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_mult_rsp_tx);
   1ed4c:	4a2d      	ldr	r2, [pc, #180]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1ed4e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1ed52:	3301      	adds	r3, #1
   1ed54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        break;
   1ed58:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_group_type_req_tx);
   1ed5a:	4a2a      	ldr	r2, [pc, #168]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1ed5c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1ed60:	3301      	adds	r3, #1
   1ed62:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
   1ed66:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_group_type_rsp_tx);
   1ed68:	4a26      	ldr	r2, [pc, #152]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1ed6a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1ed6e:	3301      	adds	r3, #1
   1ed70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        break;
   1ed74:	4770      	bx	lr
        STATS_INC(ble_att_stats, write_req_tx);
   1ed76:	4a23      	ldr	r2, [pc, #140]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1ed78:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   1ed7c:	3301      	adds	r3, #1
   1ed7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
        break;
   1ed82:	4770      	bx	lr
        STATS_INC(ble_att_stats, write_rsp_tx);
   1ed84:	4a1f      	ldr	r2, [pc, #124]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1ed86:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
   1ed8a:	3301      	adds	r3, #1
   1ed8c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        break;
   1ed90:	4770      	bx	lr
        STATS_INC(ble_att_stats, prep_write_req_tx);
   1ed92:	4a1c      	ldr	r2, [pc, #112]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1ed94:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
   1ed98:	3301      	adds	r3, #1
   1ed9a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
        break;
   1ed9e:	4770      	bx	lr
        STATS_INC(ble_att_stats, prep_write_rsp_tx);
   1eda0:	4a18      	ldr	r2, [pc, #96]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1eda2:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
   1eda6:	3301      	adds	r3, #1
   1eda8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
        break;
   1edac:	4770      	bx	lr
        STATS_INC(ble_att_stats, exec_write_req_tx);
   1edae:	4a15      	ldr	r2, [pc, #84]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1edb0:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   1edb4:	3301      	adds	r3, #1
   1edb6:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
        break;
   1edba:	4770      	bx	lr
        STATS_INC(ble_att_stats, exec_write_rsp_tx);
   1edbc:	4a11      	ldr	r2, [pc, #68]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1edbe:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
   1edc2:	3301      	adds	r3, #1
   1edc4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
        break;
   1edc8:	4770      	bx	lr
        STATS_INC(ble_att_stats, notify_req_tx);
   1edca:	4a0e      	ldr	r2, [pc, #56]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1edcc:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
   1edd0:	3301      	adds	r3, #1
   1edd2:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
        break;
   1edd6:	4770      	bx	lr
        STATS_INC(ble_att_stats, indicate_req_tx);
   1edd8:	4a0a      	ldr	r2, [pc, #40]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1edda:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
   1edde:	3301      	adds	r3, #1
   1ede0:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
        break;
   1ede4:	4770      	bx	lr
        STATS_INC(ble_att_stats, indicate_rsp_tx);
   1ede6:	4a07      	ldr	r2, [pc, #28]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1ede8:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
   1edec:	3301      	adds	r3, #1
   1edee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
        break;
   1edf2:	4770      	bx	lr
        STATS_INC(ble_att_stats, write_cmd_tx);
   1edf4:	4a03      	ldr	r2, [pc, #12]	; (1ee04 <ble_att_inc_tx_stat+0x1f4>)
   1edf6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   1edfa:	3301      	adds	r3, #1
   1edfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   1ee00:	4770      	bx	lr
   1ee02:	bf00      	nop
   1ee04:	100055a4 	.word	0x100055a4

0001ee08 <ble_att_set_peer_mtu>:
    if (peer_mtu < BLE_ATT_MTU_DFLT) {
   1ee08:	2916      	cmp	r1, #22
   1ee0a:	d800      	bhi.n	1ee0e <ble_att_set_peer_mtu+0x6>
        peer_mtu = BLE_ATT_MTU_DFLT;
   1ee0c:	2117      	movs	r1, #23
    chan->peer_mtu = peer_mtu;
   1ee0e:	8181      	strh	r1, [r0, #12]
}
   1ee10:	4770      	bx	lr

0001ee12 <ble_att_chan_mtu>:
{
   1ee12:	b510      	push	{r4, lr}
   1ee14:	4604      	mov	r4, r0
    if (!(ble_l2cap_is_mtu_req_sent(chan)) ||
   1ee16:	f009 ffd5 	bl	28dc4 <ble_l2cap_is_mtu_req_sent>
   1ee1a:	b130      	cbz	r0, 1ee2a <ble_att_chan_mtu+0x18>
        chan->peer_mtu == 0) {
   1ee1c:	89a0      	ldrh	r0, [r4, #12]
    if (!(ble_l2cap_is_mtu_req_sent(chan)) ||
   1ee1e:	b130      	cbz	r0, 1ee2e <ble_att_chan_mtu+0x1c>
        mtu = min(chan->my_mtu, chan->peer_mtu);
   1ee20:	8963      	ldrh	r3, [r4, #10]
   1ee22:	4298      	cmp	r0, r3
   1ee24:	bf28      	it	cs
   1ee26:	4618      	movcs	r0, r3
}
   1ee28:	bd10      	pop	{r4, pc}
        mtu = BLE_ATT_MTU_DFLT;
   1ee2a:	2017      	movs	r0, #23
   1ee2c:	e7fc      	b.n	1ee28 <ble_att_chan_mtu+0x16>
   1ee2e:	2017      	movs	r0, #23
   1ee30:	e7fa      	b.n	1ee28 <ble_att_chan_mtu+0x16>

0001ee32 <ble_att_truncate_to_mtu>:
{
   1ee32:	b510      	push	{r4, lr}
   1ee34:	460c      	mov	r4, r1
    mtu = ble_att_chan_mtu(att_chan);
   1ee36:	f7ff ffec 	bl	1ee12 <ble_att_chan_mtu>
    extra_len = OS_MBUF_PKTLEN(txom) - mtu;
   1ee3a:	8a21      	ldrh	r1, [r4, #16]
   1ee3c:	1a0b      	subs	r3, r1, r0
    if (extra_len > 0) {
   1ee3e:	2b00      	cmp	r3, #0
   1ee40:	dc00      	bgt.n	1ee44 <ble_att_truncate_to_mtu+0x12>
}
   1ee42:	bd10      	pop	{r4, pc}
        os_mbuf_adj(txom, -extra_len);
   1ee44:	1a41      	subs	r1, r0, r1
   1ee46:	4620      	mov	r0, r4
   1ee48:	f7fa fcaf 	bl	197aa <os_mbuf_adj>
}
   1ee4c:	e7f9      	b.n	1ee42 <ble_att_truncate_to_mtu+0x10>

0001ee4e <ble_att_mtu>:
{
   1ee4e:	b510      	push	{r4, lr}
   1ee50:	b082      	sub	sp, #8
   1ee52:	4604      	mov	r4, r0
    ble_hs_lock();
   1ee54:	f007 fb70 	bl	26538 <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   1ee58:	aa01      	add	r2, sp, #4
   1ee5a:	4669      	mov	r1, sp
   1ee5c:	4620      	mov	r0, r4
   1ee5e:	f7ff fed0 	bl	1ec02 <ble_att_conn_chan_find>
    if (rc == 0) {
   1ee62:	b128      	cbz	r0, 1ee70 <ble_att_mtu+0x22>
        mtu = 0;
   1ee64:	2400      	movs	r4, #0
    ble_hs_unlock();
   1ee66:	f007 fb6b 	bl	26540 <ble_hs_unlock>
}
   1ee6a:	4620      	mov	r0, r4
   1ee6c:	b002      	add	sp, #8
   1ee6e:	bd10      	pop	{r4, pc}
        mtu = ble_att_chan_mtu(chan);
   1ee70:	9801      	ldr	r0, [sp, #4]
   1ee72:	f7ff ffce 	bl	1ee12 <ble_att_chan_mtu>
   1ee76:	4604      	mov	r4, r0
   1ee78:	e7f5      	b.n	1ee66 <ble_att_mtu+0x18>
	...

0001ee7c <ble_att_set_preferred_mtu>:
{
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;
    int i;

    if (mtu < BLE_ATT_MTU_DFLT) {
   1ee7c:	2816      	cmp	r0, #22
   1ee7e:	d91e      	bls.n	1eebe <ble_att_set_preferred_mtu+0x42>
{
   1ee80:	b538      	push	{r3, r4, r5, lr}
   1ee82:	4605      	mov	r5, r0
        return BLE_HS_EINVAL;
    }
    if (mtu > BLE_ATT_MTU_MAX) {
   1ee84:	f5b0 7f04 	cmp.w	r0, #528	; 0x210
   1ee88:	d21b      	bcs.n	1eec2 <ble_att_set_preferred_mtu+0x46>
        return BLE_HS_EINVAL;
    }

    ble_att_preferred_mtu_val = mtu;
   1ee8a:	4b0f      	ldr	r3, [pc, #60]	; (1eec8 <ble_att_set_preferred_mtu+0x4c>)
   1ee8c:	8018      	strh	r0, [r3, #0]

    /* Set my_mtu for established connections that haven't exchanged. */
    ble_hs_lock();
   1ee8e:	f007 fb53 	bl	26538 <ble_hs_lock>

    i = 0;
   1ee92:	2400      	movs	r4, #0
    while ((conn = ble_hs_conn_find_by_idx(i)) != NULL) {
   1ee94:	e000      	b.n	1ee98 <ble_att_set_preferred_mtu+0x1c>

        if (!(chan->flags & BLE_L2CAP_CHAN_F_TXED_MTU)) {
            chan->my_mtu = mtu;
        }

        i++;
   1ee96:	3401      	adds	r4, #1
    while ((conn = ble_hs_conn_find_by_idx(i)) != NULL) {
   1ee98:	4620      	mov	r0, r4
   1ee9a:	f008 fbed 	bl	27678 <ble_hs_conn_find_by_idx>
   1ee9e:	4603      	mov	r3, r0
   1eea0:	b148      	cbz	r0, 1eeb6 <ble_att_set_preferred_mtu+0x3a>
        chan = ble_hs_conn_chan_find_by_scid(conn, BLE_L2CAP_CID_ATT);
   1eea2:	2104      	movs	r1, #4
   1eea4:	4618      	mov	r0, r3
   1eea6:	f008 fb05 	bl	274b4 <ble_hs_conn_chan_find_by_scid>
        if (!(chan->flags & BLE_L2CAP_CHAN_F_TXED_MTU)) {
   1eeaa:	7b83      	ldrb	r3, [r0, #14]
   1eeac:	f013 0f01 	tst.w	r3, #1
   1eeb0:	d1f1      	bne.n	1ee96 <ble_att_set_preferred_mtu+0x1a>
            chan->my_mtu = mtu;
   1eeb2:	8145      	strh	r5, [r0, #10]
   1eeb4:	e7ef      	b.n	1ee96 <ble_att_set_preferred_mtu+0x1a>
    }

    ble_hs_unlock();
   1eeb6:	f007 fb43 	bl	26540 <ble_hs_unlock>

    return 0;
   1eeba:	2000      	movs	r0, #0
}
   1eebc:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_EINVAL;
   1eebe:	2003      	movs	r0, #3
}
   1eec0:	4770      	bx	lr
        return BLE_HS_EINVAL;
   1eec2:	2003      	movs	r0, #3
   1eec4:	e7fa      	b.n	1eebc <ble_att_set_preferred_mtu+0x40>
   1eec6:	bf00      	nop
   1eec8:	100055a2 	.word	0x100055a2

0001eecc <ble_att_create_chan>:

struct ble_l2cap_chan *
ble_att_create_chan(uint16_t conn_handle)
{
   1eecc:	b508      	push	{r3, lr}
    struct ble_l2cap_chan *chan;

    chan = ble_l2cap_chan_alloc(conn_handle);
   1eece:	f009 ff4b 	bl	28d68 <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   1eed2:	4603      	mov	r3, r0
   1eed4:	b138      	cbz	r0, 1eee6 <ble_att_create_chan+0x1a>
        return NULL;
    }

    chan->scid = BLE_L2CAP_CID_ATT;
   1eed6:	2204      	movs	r2, #4
   1eed8:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_ATT;
   1eeda:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = ble_att_preferred_mtu_val;
   1eedc:	4a03      	ldr	r2, [pc, #12]	; (1eeec <ble_att_create_chan+0x20>)
   1eede:	8812      	ldrh	r2, [r2, #0]
   1eee0:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_att_rx;
   1eee2:	4a03      	ldr	r2, [pc, #12]	; (1eef0 <ble_att_create_chan+0x24>)
   1eee4:	6182      	str	r2, [r0, #24]

    return chan;
}
   1eee6:	4618      	mov	r0, r3
   1eee8:	bd08      	pop	{r3, pc}
   1eeea:	bf00      	nop
   1eeec:	100055a2 	.word	0x100055a2
   1eef0:	0001eb7f 	.word	0x0001eb7f

0001eef4 <ble_att_init>:

int
ble_att_init(void)
{
   1eef4:	b500      	push	{lr}
   1eef6:	b083      	sub	sp, #12
    int rc;

    ble_att_preferred_mtu_val = MYNEWT_VAL(BLE_ATT_PREFERRED_MTU);
   1eef8:	4b09      	ldr	r3, [pc, #36]	; (1ef20 <ble_att_init+0x2c>)
   1eefa:	f44f 7280 	mov.w	r2, #256	; 0x100
   1eefe:	801a      	strh	r2, [r3, #0]

    rc = stats_init_and_reg(
   1ef00:	4b08      	ldr	r3, [pc, #32]	; (1ef24 <ble_att_init+0x30>)
   1ef02:	9301      	str	r3, [sp, #4]
   1ef04:	2300      	movs	r3, #0
   1ef06:	9300      	str	r3, [sp, #0]
   1ef08:	2236      	movs	r2, #54	; 0x36
   1ef0a:	2104      	movs	r1, #4
   1ef0c:	4806      	ldr	r0, [pc, #24]	; (1ef28 <ble_att_init+0x34>)
   1ef0e:	f7ff f809 	bl	1df24 <stats_init_and_reg>
        STATS_HDR(ble_att_stats), STATS_SIZE_INIT_PARMS(ble_att_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_att_stats), "ble_att");
    if (rc != 0) {
   1ef12:	b910      	cbnz	r0, 1ef1a <ble_att_init+0x26>
        return BLE_HS_EOS;
    }

    return 0;
}
   1ef14:	b003      	add	sp, #12
   1ef16:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   1ef1a:	200b      	movs	r0, #11
   1ef1c:	e7fa      	b.n	1ef14 <ble_att_init+0x20>
   1ef1e:	bf00      	nop
   1ef20:	100055a2 	.word	0x100055a2
   1ef24:	000343a4 	.word	0x000343a4
   1ef28:	100055a4 	.word	0x100055a4

0001ef2c <ble_att_clt_parse_find_type_value_hinfo>:
}

static int
ble_att_clt_parse_find_type_value_hinfo(
    struct os_mbuf **om, struct ble_att_find_type_value_hinfo *dst)
{
   1ef2c:	b570      	push	{r4, r5, r6, lr}
   1ef2e:	4604      	mov	r4, r0
   1ef30:	460d      	mov	r5, r1
    struct ble_att_handle_group *group;
    int rc;

    rc = ble_hs_mbuf_pullup_base(om, sizeof(*group));
   1ef32:	2104      	movs	r1, #4
   1ef34:	f009 fb26 	bl	28584 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   1ef38:	b960      	cbnz	r0, 1ef54 <ble_att_clt_parse_find_type_value_hinfo+0x28>
   1ef3a:	4606      	mov	r6, r0
        return BLE_HS_EBADDATA;
    }

    group = (struct ble_att_handle_group *)(*om)->om_data;
   1ef3c:	6823      	ldr	r3, [r4, #0]
   1ef3e:	681b      	ldr	r3, [r3, #0]

    dst->attr_handle = le16toh(group->attr_handle);
   1ef40:	881a      	ldrh	r2, [r3, #0]
   1ef42:	802a      	strh	r2, [r5, #0]
    dst->group_end_handle = le16toh(group->group_end_handle);
   1ef44:	885b      	ldrh	r3, [r3, #2]
   1ef46:	806b      	strh	r3, [r5, #2]

    os_mbuf_adj((*om), sizeof(*group));
   1ef48:	2104      	movs	r1, #4
   1ef4a:	6820      	ldr	r0, [r4, #0]
   1ef4c:	f7fa fc2d 	bl	197aa <os_mbuf_adj>

    return 0;
}
   1ef50:	4630      	mov	r0, r6
   1ef52:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EBADDATA;
   1ef54:	260a      	movs	r6, #10
   1ef56:	e7fb      	b.n	1ef50 <ble_att_clt_parse_find_type_value_hinfo+0x24>

0001ef58 <ble_att_clt_parse_read_group_type_adata>:

static int
ble_att_clt_parse_read_group_type_adata(
    struct os_mbuf **om, int data_len,
    struct ble_att_read_group_type_adata *adata)
{
   1ef58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int rc;

    if (data_len < BLE_ATT_READ_GROUP_TYPE_ADATA_BASE_SZ + 1) {
   1ef5a:	2904      	cmp	r1, #4
   1ef5c:	dd18      	ble.n	1ef90 <ble_att_clt_parse_read_group_type_adata+0x38>
   1ef5e:	4605      	mov	r5, r0
   1ef60:	460c      	mov	r4, r1
   1ef62:	4616      	mov	r6, r2
        return BLE_HS_EMSGSIZE;
    }

    rc = ble_hs_mbuf_pullup_base(om, data_len);
   1ef64:	f009 fb0e 	bl	28584 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   1ef68:	4607      	mov	r7, r0
   1ef6a:	b990      	cbnz	r0, 1ef92 <ble_att_clt_parse_read_group_type_adata+0x3a>
        return rc;
    }

    adata->att_handle = get_le16((*om)->om_data + 0);
   1ef6c:	682b      	ldr	r3, [r5, #0]
   1ef6e:	6818      	ldr	r0, [r3, #0]
   1ef70:	f7f9 ff54 	bl	18e1c <get_le16>
   1ef74:	8030      	strh	r0, [r6, #0]
    adata->end_group_handle = get_le16((*om)->om_data + 2);
   1ef76:	682b      	ldr	r3, [r5, #0]
   1ef78:	6818      	ldr	r0, [r3, #0]
   1ef7a:	3002      	adds	r0, #2
   1ef7c:	f7f9 ff4e 	bl	18e1c <get_le16>
   1ef80:	8070      	strh	r0, [r6, #2]
    adata->value_len = data_len - BLE_ATT_READ_GROUP_TYPE_ADATA_BASE_SZ;
   1ef82:	3c04      	subs	r4, #4
   1ef84:	6074      	str	r4, [r6, #4]
    adata->value = (*om)->om_data + BLE_ATT_READ_GROUP_TYPE_ADATA_BASE_SZ;
   1ef86:	682b      	ldr	r3, [r5, #0]
   1ef88:	681b      	ldr	r3, [r3, #0]
   1ef8a:	3304      	adds	r3, #4
   1ef8c:	60b3      	str	r3, [r6, #8]

    return 0;
   1ef8e:	e000      	b.n	1ef92 <ble_att_clt_parse_read_group_type_adata+0x3a>
        return BLE_HS_EMSGSIZE;
   1ef90:	2704      	movs	r7, #4
}
   1ef92:	4638      	mov	r0, r7
   1ef94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ef96 <ble_att_clt_parse_find_info_entry>:
{
   1ef96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ef9a:	4607      	mov	r7, r0
   1ef9c:	460c      	mov	r4, r1
   1ef9e:	4615      	mov	r5, r2
    switch (rsp_format) {
   1efa0:	2901      	cmp	r1, #1
   1efa2:	d017      	beq.n	1efd4 <ble_att_clt_parse_find_info_entry+0x3e>
   1efa4:	2902      	cmp	r1, #2
   1efa6:	d12c      	bne.n	1f002 <ble_att_clt_parse_find_info_entry+0x6c>
        entry_len = 2 + 16;
   1efa8:	f04f 0812 	mov.w	r8, #18
    rc = ble_hs_mbuf_pullup_base(rxom, entry_len);
   1efac:	4641      	mov	r1, r8
   1efae:	4638      	mov	r0, r7
   1efb0:	f009 fae8 	bl	28584 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   1efb4:	4606      	mov	r6, r0
   1efb6:	bb28      	cbnz	r0, 1f004 <ble_att_clt_parse_find_info_entry+0x6e>
    idata->attr_handle = get_le16((*rxom)->om_data);
   1efb8:	683b      	ldr	r3, [r7, #0]
   1efba:	6818      	ldr	r0, [r3, #0]
   1efbc:	f7f9 ff2e 	bl	18e1c <get_le16>
   1efc0:	8028      	strh	r0, [r5, #0]
    switch (rsp_format) {
   1efc2:	2c01      	cmp	r4, #1
   1efc4:	d009      	beq.n	1efda <ble_att_clt_parse_find_info_entry+0x44>
   1efc6:	2c02      	cmp	r4, #2
   1efc8:	d011      	beq.n	1efee <ble_att_clt_parse_find_info_entry+0x58>
    os_mbuf_adj(*rxom, entry_len);
   1efca:	4641      	mov	r1, r8
   1efcc:	6838      	ldr	r0, [r7, #0]
   1efce:	f7fa fbec 	bl	197aa <os_mbuf_adj>
    return 0;
   1efd2:	e017      	b.n	1f004 <ble_att_clt_parse_find_info_entry+0x6e>
    switch (rsp_format) {
   1efd4:	f04f 0804 	mov.w	r8, #4
   1efd8:	e7e8      	b.n	1efac <ble_att_clt_parse_find_info_entry+0x16>
        rc = ble_uuid_init_from_att_mbuf(&idata->uuid, *rxom, 2, 2);
   1efda:	2302      	movs	r3, #2
   1efdc:	461a      	mov	r2, r3
   1efde:	6839      	ldr	r1, [r7, #0]
   1efe0:	1d28      	adds	r0, r5, #4
   1efe2:	f00a fd73 	bl	29acc <ble_uuid_init_from_att_mbuf>
        if (rc != 0) {
   1efe6:	2800      	cmp	r0, #0
   1efe8:	d0ef      	beq.n	1efca <ble_att_clt_parse_find_info_entry+0x34>
            return BLE_HS_EBADDATA;
   1efea:	260a      	movs	r6, #10
   1efec:	e00a      	b.n	1f004 <ble_att_clt_parse_find_info_entry+0x6e>
        rc = ble_uuid_init_from_att_mbuf(&idata->uuid, *rxom, 2, 16);
   1efee:	2310      	movs	r3, #16
   1eff0:	2202      	movs	r2, #2
   1eff2:	6839      	ldr	r1, [r7, #0]
   1eff4:	1d28      	adds	r0, r5, #4
   1eff6:	f00a fd69 	bl	29acc <ble_uuid_init_from_att_mbuf>
        if (rc != 0) {
   1effa:	2800      	cmp	r0, #0
   1effc:	d0e5      	beq.n	1efca <ble_att_clt_parse_find_info_entry+0x34>
            return BLE_HS_EBADDATA;
   1effe:	260a      	movs	r6, #10
   1f000:	e000      	b.n	1f004 <ble_att_clt_parse_find_info_entry+0x6e>
    switch (rsp_format) {
   1f002:	260a      	movs	r6, #10
}
   1f004:	4630      	mov	r0, r6
   1f006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f00a <ble_att_clt_rx_error>:
{
   1f00a:	b570      	push	{r4, r5, r6, lr}
   1f00c:	4605      	mov	r5, r0
   1f00e:	460c      	mov	r4, r1
    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*rsp));
   1f010:	2104      	movs	r1, #4
   1f012:	4620      	mov	r0, r4
   1f014:	f009 fab6 	bl	28584 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   1f018:	4606      	mov	r6, r0
   1f01a:	b108      	cbz	r0, 1f020 <ble_att_clt_rx_error+0x16>
}
   1f01c:	4630      	mov	r0, r6
   1f01e:	bd70      	pop	{r4, r5, r6, pc}
    rsp = (struct ble_att_error_rsp *)(*rxom)->om_data;
   1f020:	6823      	ldr	r3, [r4, #0]
   1f022:	681b      	ldr	r3, [r3, #0]
    ble_gattc_rx_err(conn_handle, le16toh(rsp->baep_handle),
   1f024:	78da      	ldrb	r2, [r3, #3]
   1f026:	f8b3 1001 	ldrh.w	r1, [r3, #1]
   1f02a:	4628      	mov	r0, r5
   1f02c:	f005 fe7f 	bl	24d2e <ble_gattc_rx_err>
    return 0;
   1f030:	e7f4      	b.n	1f01c <ble_att_clt_rx_error+0x12>

0001f032 <ble_att_clt_tx_mtu>:
{
   1f032:	b530      	push	{r4, r5, lr}
   1f034:	b085      	sub	sp, #20
    if (mtu < BLE_ATT_MTU_DFLT) {
   1f036:	2916      	cmp	r1, #22
   1f038:	d936      	bls.n	1f0a8 <ble_att_clt_tx_mtu+0x76>
   1f03a:	4605      	mov	r5, r0
   1f03c:	460c      	mov	r4, r1
    ble_hs_lock();
   1f03e:	f007 fa7b 	bl	26538 <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   1f042:	aa03      	add	r2, sp, #12
   1f044:	a902      	add	r1, sp, #8
   1f046:	4628      	mov	r0, r5
   1f048:	f7ff fddb 	bl	1ec02 <ble_att_conn_chan_find>
    if (rc != 0) {
   1f04c:	bb20      	cbnz	r0, 1f098 <ble_att_clt_tx_mtu+0x66>
    } else if (chan->flags & BLE_L2CAP_CHAN_F_TXED_MTU) {
   1f04e:	9b03      	ldr	r3, [sp, #12]
   1f050:	7b9b      	ldrb	r3, [r3, #14]
   1f052:	f013 0f01 	tst.w	r3, #1
   1f056:	d123      	bne.n	1f0a0 <ble_att_clt_tx_mtu+0x6e>
    ble_hs_unlock();
   1f058:	f007 fa72 	bl	26540 <ble_hs_unlock>
    req = ble_att_cmd_get(BLE_ATT_OP_MTU_REQ, sizeof(*req), &txom);
   1f05c:	aa01      	add	r2, sp, #4
   1f05e:	2102      	movs	r1, #2
   1f060:	4608      	mov	r0, r1
   1f062:	f000 fb03 	bl	1f66c <ble_att_cmd_get>
    if (req == NULL) {
   1f066:	b318      	cbz	r0, 1f0b0 <ble_att_clt_tx_mtu+0x7e>
    req->bamc_mtu = htole16(mtu);
   1f068:	8004      	strh	r4, [r0, #0]
    rc = ble_att_tx(conn_handle, txom);
   1f06a:	9901      	ldr	r1, [sp, #4]
   1f06c:	4628      	mov	r0, r5
   1f06e:	f000 fb0b 	bl	1f688 <ble_att_tx>
    if (rc != 0) {
   1f072:	4604      	mov	r4, r0
   1f074:	b9c8      	cbnz	r0, 1f0aa <ble_att_clt_tx_mtu+0x78>
    ble_hs_lock();
   1f076:	f007 fa5f 	bl	26538 <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   1f07a:	aa03      	add	r2, sp, #12
   1f07c:	a902      	add	r1, sp, #8
   1f07e:	4628      	mov	r0, r5
   1f080:	f7ff fdbf 	bl	1ec02 <ble_att_conn_chan_find>
    if (rc == 0) {
   1f084:	4604      	mov	r4, r0
   1f086:	b920      	cbnz	r0, 1f092 <ble_att_clt_tx_mtu+0x60>
        chan->flags |= BLE_L2CAP_CHAN_F_TXED_MTU;
   1f088:	9a03      	ldr	r2, [sp, #12]
   1f08a:	7b93      	ldrb	r3, [r2, #14]
   1f08c:	f043 0301 	orr.w	r3, r3, #1
   1f090:	7393      	strb	r3, [r2, #14]
    ble_hs_unlock();
   1f092:	f007 fa55 	bl	26540 <ble_hs_unlock>
    return rc;
   1f096:	e008      	b.n	1f0aa <ble_att_clt_tx_mtu+0x78>
    ble_hs_unlock();
   1f098:	f007 fa52 	bl	26540 <ble_hs_unlock>
        rc = BLE_HS_ENOTCONN;
   1f09c:	2407      	movs	r4, #7
   1f09e:	e004      	b.n	1f0aa <ble_att_clt_tx_mtu+0x78>
    ble_hs_unlock();
   1f0a0:	f007 fa4e 	bl	26540 <ble_hs_unlock>
        rc = BLE_HS_EALREADY;
   1f0a4:	2402      	movs	r4, #2
        return rc;
   1f0a6:	e000      	b.n	1f0aa <ble_att_clt_tx_mtu+0x78>
        return BLE_HS_EINVAL;
   1f0a8:	2403      	movs	r4, #3
}
   1f0aa:	4620      	mov	r0, r4
   1f0ac:	b005      	add	sp, #20
   1f0ae:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ENOMEM;
   1f0b0:	2406      	movs	r4, #6
   1f0b2:	e7fa      	b.n	1f0aa <ble_att_clt_tx_mtu+0x78>

0001f0b4 <ble_att_clt_rx_mtu>:
{
   1f0b4:	b570      	push	{r4, r5, r6, lr}
   1f0b6:	b082      	sub	sp, #8
   1f0b8:	4604      	mov	r4, r0
   1f0ba:	460d      	mov	r5, r1
    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*cmd));
   1f0bc:	2102      	movs	r1, #2
   1f0be:	4628      	mov	r0, r5
   1f0c0:	f009 fa60 	bl	28584 <ble_hs_mbuf_pullup_base>
    if (rc == 0) {
   1f0c4:	b148      	cbz	r0, 1f0da <ble_att_clt_rx_mtu+0x26>
   1f0c6:	4606      	mov	r6, r0
    mtu = 0;
   1f0c8:	2500      	movs	r5, #0
    ble_gattc_rx_mtu(conn_handle, rc, mtu);
   1f0ca:	462a      	mov	r2, r5
   1f0cc:	4631      	mov	r1, r6
   1f0ce:	4620      	mov	r0, r4
   1f0d0:	f005 fe43 	bl	24d5a <ble_gattc_rx_mtu>
}
   1f0d4:	4630      	mov	r0, r6
   1f0d6:	b002      	add	sp, #8
   1f0d8:	bd70      	pop	{r4, r5, r6, pc}
        cmd = (struct ble_att_mtu_cmd *)(*rxom)->om_data;
   1f0da:	682b      	ldr	r3, [r5, #0]
   1f0dc:	681d      	ldr	r5, [r3, #0]
        ble_hs_lock();
   1f0de:	f007 fa2b 	bl	26538 <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, NULL, &chan);
   1f0e2:	aa01      	add	r2, sp, #4
   1f0e4:	2100      	movs	r1, #0
   1f0e6:	4620      	mov	r0, r4
   1f0e8:	f7ff fd8b 	bl	1ec02 <ble_att_conn_chan_find>
        if (rc == 0) {
   1f0ec:	4606      	mov	r6, r0
   1f0ee:	b150      	cbz	r0, 1f106 <ble_att_clt_rx_mtu+0x52>
    mtu = 0;
   1f0f0:	2500      	movs	r5, #0
        ble_hs_unlock();
   1f0f2:	f007 fa25 	bl	26540 <ble_hs_unlock>
        if (rc == 0) {
   1f0f6:	2e00      	cmp	r6, #0
   1f0f8:	d1e7      	bne.n	1f0ca <ble_att_clt_rx_mtu+0x16>
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
   1f0fa:	462a      	mov	r2, r5
   1f0fc:	2104      	movs	r1, #4
   1f0fe:	4620      	mov	r0, r4
   1f100:	f003 fe14 	bl	22d2c <ble_gap_mtu_event>
   1f104:	e7e1      	b.n	1f0ca <ble_att_clt_rx_mtu+0x16>
            ble_att_set_peer_mtu(chan, le16toh(cmd->bamc_mtu));
   1f106:	8829      	ldrh	r1, [r5, #0]
   1f108:	9801      	ldr	r0, [sp, #4]
   1f10a:	f7ff fe7d 	bl	1ee08 <ble_att_set_peer_mtu>
            mtu = ble_att_chan_mtu(chan);
   1f10e:	9801      	ldr	r0, [sp, #4]
   1f110:	f7ff fe7f 	bl	1ee12 <ble_att_chan_mtu>
   1f114:	4605      	mov	r5, r0
   1f116:	e7ec      	b.n	1f0f2 <ble_att_clt_rx_mtu+0x3e>

0001f118 <ble_att_clt_tx_find_info>:
    if (start_handle == 0 || start_handle > end_handle) {
   1f118:	b1a1      	cbz	r1, 1f144 <ble_att_clt_tx_find_info+0x2c>
{
   1f11a:	b570      	push	{r4, r5, r6, lr}
   1f11c:	b082      	sub	sp, #8
   1f11e:	4605      	mov	r5, r0
   1f120:	4614      	mov	r4, r2
   1f122:	460e      	mov	r6, r1
    if (start_handle == 0 || start_handle > end_handle) {
   1f124:	4291      	cmp	r1, r2
   1f126:	d80f      	bhi.n	1f148 <ble_att_clt_tx_find_info+0x30>
    req = ble_att_cmd_get(BLE_ATT_OP_FIND_INFO_REQ, sizeof(*req), &txom);
   1f128:	aa01      	add	r2, sp, #4
   1f12a:	2104      	movs	r1, #4
   1f12c:	4608      	mov	r0, r1
   1f12e:	f000 fa9d 	bl	1f66c <ble_att_cmd_get>
    if (req == NULL) {
   1f132:	b158      	cbz	r0, 1f14c <ble_att_clt_tx_find_info+0x34>
    req->bafq_start_handle = htole16(start_handle);
   1f134:	8006      	strh	r6, [r0, #0]
    req->bafq_end_handle = htole16(end_handle);
   1f136:	8044      	strh	r4, [r0, #2]
    return ble_att_tx(conn_handle, txom);
   1f138:	9901      	ldr	r1, [sp, #4]
   1f13a:	4628      	mov	r0, r5
   1f13c:	f000 faa4 	bl	1f688 <ble_att_tx>
}
   1f140:	b002      	add	sp, #8
   1f142:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EINVAL;
   1f144:	2003      	movs	r0, #3
}
   1f146:	4770      	bx	lr
        return BLE_HS_EINVAL;
   1f148:	2003      	movs	r0, #3
   1f14a:	e7f9      	b.n	1f140 <ble_att_clt_tx_find_info+0x28>
        return BLE_HS_ENOMEM;
   1f14c:	2006      	movs	r0, #6
   1f14e:	e7f7      	b.n	1f140 <ble_att_clt_tx_find_info+0x28>

0001f150 <ble_att_clt_rx_find_info>:
{
   1f150:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f152:	b087      	sub	sp, #28
   1f154:	4605      	mov	r5, r0
   1f156:	460c      	mov	r4, r1
    rc = ble_hs_mbuf_pullup_base(om, sizeof(*rsp));
   1f158:	2101      	movs	r1, #1
   1f15a:	4620      	mov	r0, r4
   1f15c:	f009 fa12 	bl	28584 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   1f160:	4607      	mov	r7, r0
   1f162:	b130      	cbz	r0, 1f172 <ble_att_clt_rx_find_info+0x22>
    ble_gattc_rx_find_info_complete(conn_handle, rc);
   1f164:	4639      	mov	r1, r7
   1f166:	4628      	mov	r0, r5
   1f168:	f005 fe18 	bl	24d9c <ble_gattc_rx_find_info_complete>
}
   1f16c:	4638      	mov	r0, r7
   1f16e:	b007      	add	sp, #28
   1f170:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rsp = (struct ble_att_find_info_rsp *)(*om)->om_data;
   1f172:	6820      	ldr	r0, [r4, #0]
   1f174:	6806      	ldr	r6, [r0, #0]
    os_mbuf_adj((*om), sizeof(*rsp));
   1f176:	2101      	movs	r1, #1
   1f178:	f7fa fb17 	bl	197aa <os_mbuf_adj>
    while (OS_MBUF_PKTLEN(*om) > 0) {
   1f17c:	e003      	b.n	1f186 <ble_att_clt_rx_find_info+0x36>
        ble_gattc_rx_find_info_idata(conn_handle, &idata);
   1f17e:	4669      	mov	r1, sp
   1f180:	4628      	mov	r0, r5
   1f182:	f005 fdfc 	bl	24d7e <ble_gattc_rx_find_info_idata>
    while (OS_MBUF_PKTLEN(*om) > 0) {
   1f186:	6823      	ldr	r3, [r4, #0]
   1f188:	8a1b      	ldrh	r3, [r3, #16]
   1f18a:	2b00      	cmp	r3, #0
   1f18c:	d0ea      	beq.n	1f164 <ble_att_clt_rx_find_info+0x14>
        rc = ble_att_clt_parse_find_info_entry(om, rsp->bafp_format, &idata);
   1f18e:	466a      	mov	r2, sp
   1f190:	7831      	ldrb	r1, [r6, #0]
   1f192:	4620      	mov	r0, r4
   1f194:	f7ff feff 	bl	1ef96 <ble_att_clt_parse_find_info_entry>
        if (rc != 0) {
   1f198:	2800      	cmp	r0, #0
   1f19a:	d0f0      	beq.n	1f17e <ble_att_clt_rx_find_info+0x2e>
        rc = ble_att_clt_parse_find_info_entry(om, rsp->bafp_format, &idata);
   1f19c:	4607      	mov	r7, r0
   1f19e:	e7e1      	b.n	1f164 <ble_att_clt_rx_find_info+0x14>

0001f1a0 <ble_att_clt_tx_find_type_value>:
    if (start_handle == 0 || start_handle > end_handle) {
   1f1a0:	b1e1      	cbz	r1, 1f1dc <ble_att_clt_tx_find_type_value+0x3c>
{
   1f1a2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f1a4:	b083      	sub	sp, #12
   1f1a6:	4607      	mov	r7, r0
   1f1a8:	4614      	mov	r4, r2
   1f1aa:	461d      	mov	r5, r3
   1f1ac:	460e      	mov	r6, r1
    if (start_handle == 0 || start_handle > end_handle) {
   1f1ae:	4291      	cmp	r1, r2
   1f1b0:	d816      	bhi.n	1f1e0 <ble_att_clt_tx_find_type_value+0x40>
    req = ble_att_cmd_get(BLE_ATT_OP_FIND_TYPE_VALUE_REQ, sizeof(*req) + value_len,
   1f1b2:	aa01      	add	r2, sp, #4
   1f1b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f1b6:	1d99      	adds	r1, r3, #6
   1f1b8:	2006      	movs	r0, #6
   1f1ba:	f000 fa57 	bl	1f66c <ble_att_cmd_get>
    if (req == NULL) {
   1f1be:	b188      	cbz	r0, 1f1e4 <ble_att_clt_tx_find_type_value+0x44>
    req->bavq_start_handle = htole16(start_handle);
   1f1c0:	8006      	strh	r6, [r0, #0]
    req->bavq_end_handle = htole16(end_handle);
   1f1c2:	8044      	strh	r4, [r0, #2]
    req->bavq_attr_type = htole16(attribute_type);
   1f1c4:	8085      	strh	r5, [r0, #4]
    memcpy(req->bavq_value, attribute_value, value_len);
   1f1c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f1c8:	9908      	ldr	r1, [sp, #32]
   1f1ca:	3006      	adds	r0, #6
   1f1cc:	f7fb fd52 	bl	1ac74 <memcpy>
    return ble_att_tx(conn_handle, txom);
   1f1d0:	9901      	ldr	r1, [sp, #4]
   1f1d2:	4638      	mov	r0, r7
   1f1d4:	f000 fa58 	bl	1f688 <ble_att_tx>
}
   1f1d8:	b003      	add	sp, #12
   1f1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EINVAL;
   1f1dc:	2003      	movs	r0, #3
}
   1f1de:	4770      	bx	lr
        return BLE_HS_EINVAL;
   1f1e0:	2003      	movs	r0, #3
   1f1e2:	e7f9      	b.n	1f1d8 <ble_att_clt_tx_find_type_value+0x38>
        return BLE_HS_ENOMEM;
   1f1e4:	2006      	movs	r0, #6
   1f1e6:	e7f7      	b.n	1f1d8 <ble_att_clt_tx_find_type_value+0x38>

0001f1e8 <ble_att_clt_rx_find_type_value>:
{
   1f1e8:	b570      	push	{r4, r5, r6, lr}
   1f1ea:	b082      	sub	sp, #8
   1f1ec:	4605      	mov	r5, r0
   1f1ee:	460c      	mov	r4, r1
    rc = 0;
   1f1f0:	2600      	movs	r6, #0
    while (OS_MBUF_PKTLEN(*rxom) > 0) {
   1f1f2:	6823      	ldr	r3, [r4, #0]
   1f1f4:	8a1b      	ldrh	r3, [r3, #16]
   1f1f6:	b153      	cbz	r3, 1f20e <ble_att_clt_rx_find_type_value+0x26>
        rc = ble_att_clt_parse_find_type_value_hinfo(rxom, &hinfo);
   1f1f8:	a901      	add	r1, sp, #4
   1f1fa:	4620      	mov	r0, r4
   1f1fc:	f7ff fe96 	bl	1ef2c <ble_att_clt_parse_find_type_value_hinfo>
        if (rc != 0) {
   1f200:	4606      	mov	r6, r0
   1f202:	b920      	cbnz	r0, 1f20e <ble_att_clt_rx_find_type_value+0x26>
        ble_gattc_rx_find_type_value_hinfo(conn_handle, &hinfo);
   1f204:	a901      	add	r1, sp, #4
   1f206:	4628      	mov	r0, r5
   1f208:	f005 fdd7 	bl	24dba <ble_gattc_rx_find_type_value_hinfo>
   1f20c:	e7f1      	b.n	1f1f2 <ble_att_clt_rx_find_type_value+0xa>
    ble_gattc_rx_find_type_value_complete(conn_handle, rc);
   1f20e:	4631      	mov	r1, r6
   1f210:	4628      	mov	r0, r5
   1f212:	f005 fde1 	bl	24dd8 <ble_gattc_rx_find_type_value_complete>
}
   1f216:	2000      	movs	r0, #0
   1f218:	b002      	add	sp, #8
   1f21a:	bd70      	pop	{r4, r5, r6, pc}

0001f21c <ble_att_clt_tx_read_type>:
    if (start_handle == 0 || start_handle > end_handle) {
   1f21c:	b1e9      	cbz	r1, 1f25a <ble_att_clt_tx_read_type+0x3e>
{
   1f21e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f220:	b083      	sub	sp, #12
   1f222:	4607      	mov	r7, r0
   1f224:	4614      	mov	r4, r2
   1f226:	461d      	mov	r5, r3
   1f228:	460e      	mov	r6, r1
    if (start_handle == 0 || start_handle > end_handle) {
   1f22a:	4291      	cmp	r1, r2
   1f22c:	d817      	bhi.n	1f25e <ble_att_clt_tx_read_type+0x42>
                          sizeof(*req) + ble_uuid_length(uuid), &txom);
   1f22e:	4618      	mov	r0, r3
   1f230:	f00a fcae 	bl	29b90 <ble_uuid_length>
    req = ble_att_cmd_get(BLE_ATT_OP_READ_TYPE_REQ,
   1f234:	aa01      	add	r2, sp, #4
   1f236:	1d01      	adds	r1, r0, #4
   1f238:	2008      	movs	r0, #8
   1f23a:	f000 fa17 	bl	1f66c <ble_att_cmd_get>
    if (req == NULL) {
   1f23e:	4601      	mov	r1, r0
   1f240:	b178      	cbz	r0, 1f262 <ble_att_clt_tx_read_type+0x46>
    req->batq_start_handle = htole16(start_handle);
   1f242:	8006      	strh	r6, [r0, #0]
    req->batq_end_handle = htole16(end_handle);
   1f244:	8044      	strh	r4, [r0, #2]
    ble_uuid_flat(uuid, req->uuid);
   1f246:	3104      	adds	r1, #4
   1f248:	4628      	mov	r0, r5
   1f24a:	f00a fc75 	bl	29b38 <ble_uuid_flat>
    return ble_att_tx(conn_handle, txom);
   1f24e:	9901      	ldr	r1, [sp, #4]
   1f250:	4638      	mov	r0, r7
   1f252:	f000 fa19 	bl	1f688 <ble_att_tx>
}
   1f256:	b003      	add	sp, #12
   1f258:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EINVAL;
   1f25a:	2003      	movs	r0, #3
}
   1f25c:	4770      	bx	lr
        return BLE_HS_EINVAL;
   1f25e:	2003      	movs	r0, #3
   1f260:	e7f9      	b.n	1f256 <ble_att_clt_tx_read_type+0x3a>
        return BLE_HS_ENOMEM;
   1f262:	2006      	movs	r0, #6
   1f264:	e7f7      	b.n	1f256 <ble_att_clt_tx_read_type+0x3a>

0001f266 <ble_att_clt_rx_read_type>:
{
   1f266:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f268:	b085      	sub	sp, #20
   1f26a:	4606      	mov	r6, r0
   1f26c:	460c      	mov	r4, r1
    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*rsp));
   1f26e:	2101      	movs	r1, #1
   1f270:	4620      	mov	r0, r4
   1f272:	f009 f987 	bl	28584 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   1f276:	4607      	mov	r7, r0
   1f278:	b130      	cbz	r0, 1f288 <ble_att_clt_rx_read_type+0x22>
    ble_gattc_rx_read_type_complete(conn_handle, rc);
   1f27a:	4639      	mov	r1, r7
   1f27c:	4630      	mov	r0, r6
   1f27e:	f005 fdd1 	bl	24e24 <ble_gattc_rx_read_type_complete>
}
   1f282:	4638      	mov	r0, r7
   1f284:	b005      	add	sp, #20
   1f286:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rsp = (struct ble_att_read_type_rsp *)(*rxom)->om_data;
   1f288:	6820      	ldr	r0, [r4, #0]
   1f28a:	6803      	ldr	r3, [r0, #0]
    data_len = rsp->batp_length;
   1f28c:	781d      	ldrb	r5, [r3, #0]
    os_mbuf_adj(*rxom, sizeof(*rsp));
   1f28e:	2101      	movs	r1, #1
   1f290:	f7fa fa8b 	bl	197aa <os_mbuf_adj>
    if (data_len < sizeof(*data)) {
   1f294:	2d01      	cmp	r5, #1
   1f296:	d91c      	bls.n	1f2d2 <ble_att_clt_rx_read_type+0x6c>
    while (OS_MBUF_PKTLEN(*rxom) > 0) {
   1f298:	6823      	ldr	r3, [r4, #0]
   1f29a:	8a1b      	ldrh	r3, [r3, #16]
   1f29c:	2b00      	cmp	r3, #0
   1f29e:	d0ec      	beq.n	1f27a <ble_att_clt_rx_read_type+0x14>
        rc = ble_hs_mbuf_pullup_base(rxom, data_len);
   1f2a0:	4629      	mov	r1, r5
   1f2a2:	4620      	mov	r0, r4
   1f2a4:	f009 f96e 	bl	28584 <ble_hs_mbuf_pullup_base>
        if (rc != 0) {
   1f2a8:	4607      	mov	r7, r0
   1f2aa:	2800      	cmp	r0, #0
   1f2ac:	d1e5      	bne.n	1f27a <ble_att_clt_rx_read_type+0x14>
        data = (struct ble_att_attr_data_list *)(*rxom)->om_data;
   1f2ae:	6823      	ldr	r3, [r4, #0]
        adata.att_handle = le16toh(data->handle);
   1f2b0:	681b      	ldr	r3, [r3, #0]
   1f2b2:	f833 2b02 	ldrh.w	r2, [r3], #2
   1f2b6:	f8ad 2004 	strh.w	r2, [sp, #4]
        adata.value_len = data_len - sizeof(*data);
   1f2ba:	1eaa      	subs	r2, r5, #2
   1f2bc:	9202      	str	r2, [sp, #8]
        adata.value = data->value;
   1f2be:	9303      	str	r3, [sp, #12]
        ble_gattc_rx_read_type_adata(conn_handle, &adata);
   1f2c0:	a901      	add	r1, sp, #4
   1f2c2:	4630      	mov	r0, r6
   1f2c4:	f005 fd98 	bl	24df8 <ble_gattc_rx_read_type_adata>
        os_mbuf_adj(*rxom, data_len);
   1f2c8:	4629      	mov	r1, r5
   1f2ca:	6820      	ldr	r0, [r4, #0]
   1f2cc:	f7fa fa6d 	bl	197aa <os_mbuf_adj>
   1f2d0:	e7e2      	b.n	1f298 <ble_att_clt_rx_read_type+0x32>
        rc = BLE_HS_EBADDATA;
   1f2d2:	270a      	movs	r7, #10
   1f2d4:	e7d1      	b.n	1f27a <ble_att_clt_rx_read_type+0x14>

0001f2d6 <ble_att_clt_tx_read>:
    if (handle == 0) {
   1f2d6:	b181      	cbz	r1, 1f2fa <ble_att_clt_tx_read+0x24>
{
   1f2d8:	b530      	push	{r4, r5, lr}
   1f2da:	b083      	sub	sp, #12
   1f2dc:	4604      	mov	r4, r0
   1f2de:	460d      	mov	r5, r1
    req = ble_att_cmd_get(BLE_ATT_OP_READ_REQ, sizeof(*req), &txom);
   1f2e0:	aa01      	add	r2, sp, #4
   1f2e2:	2102      	movs	r1, #2
   1f2e4:	200a      	movs	r0, #10
   1f2e6:	f000 f9c1 	bl	1f66c <ble_att_cmd_get>
    if (req == NULL) {
   1f2ea:	b140      	cbz	r0, 1f2fe <ble_att_clt_tx_read+0x28>
    req->barq_handle = htole16(handle);
   1f2ec:	8005      	strh	r5, [r0, #0]
    rc = ble_att_tx(conn_handle, txom);
   1f2ee:	9901      	ldr	r1, [sp, #4]
   1f2f0:	4620      	mov	r0, r4
   1f2f2:	f000 f9c9 	bl	1f688 <ble_att_tx>
}
   1f2f6:	b003      	add	sp, #12
   1f2f8:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EINVAL;
   1f2fa:	2003      	movs	r0, #3
}
   1f2fc:	4770      	bx	lr
        return BLE_HS_ENOMEM;
   1f2fe:	2006      	movs	r0, #6
   1f300:	e7f9      	b.n	1f2f6 <ble_att_clt_tx_read+0x20>

0001f302 <ble_att_clt_rx_read>:
{
   1f302:	b508      	push	{r3, lr}
   1f304:	460a      	mov	r2, r1
    ble_gattc_rx_read_rsp(conn_handle, 0, rxom);
   1f306:	2100      	movs	r1, #0
   1f308:	f005 fdc0 	bl	24e8c <ble_gattc_rx_read_rsp>
}
   1f30c:	2000      	movs	r0, #0
   1f30e:	bd08      	pop	{r3, pc}

0001f310 <ble_att_clt_tx_read_blob>:
    if (handle == 0) {
   1f310:	b191      	cbz	r1, 1f338 <ble_att_clt_tx_read_blob+0x28>
{
   1f312:	b570      	push	{r4, r5, r6, lr}
   1f314:	b082      	sub	sp, #8
   1f316:	4604      	mov	r4, r0
   1f318:	4615      	mov	r5, r2
   1f31a:	460e      	mov	r6, r1
    req = ble_att_cmd_get(BLE_ATT_OP_READ_BLOB_REQ, sizeof(*req), &txom);
   1f31c:	aa01      	add	r2, sp, #4
   1f31e:	2104      	movs	r1, #4
   1f320:	200c      	movs	r0, #12
   1f322:	f000 f9a3 	bl	1f66c <ble_att_cmd_get>
    if (req == NULL) {
   1f326:	b148      	cbz	r0, 1f33c <ble_att_clt_tx_read_blob+0x2c>
    req->babq_handle = htole16(handle);
   1f328:	8006      	strh	r6, [r0, #0]
    req->babq_offset = htole16(offset);
   1f32a:	8045      	strh	r5, [r0, #2]
    rc = ble_att_tx(conn_handle, txom);
   1f32c:	9901      	ldr	r1, [sp, #4]
   1f32e:	4620      	mov	r0, r4
   1f330:	f000 f9aa 	bl	1f688 <ble_att_tx>
}
   1f334:	b002      	add	sp, #8
   1f336:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EINVAL;
   1f338:	2003      	movs	r0, #3
}
   1f33a:	4770      	bx	lr
        return BLE_HS_ENOMEM;
   1f33c:	2006      	movs	r0, #6
   1f33e:	e7f9      	b.n	1f334 <ble_att_clt_tx_read_blob+0x24>

0001f340 <ble_att_clt_rx_read_blob>:
{
   1f340:	b508      	push	{r3, lr}
   1f342:	460a      	mov	r2, r1
    ble_gattc_rx_read_blob_rsp(conn_handle, 0, rxom);
   1f344:	2100      	movs	r1, #0
   1f346:	f005 fdb9 	bl	24ebc <ble_gattc_rx_read_blob_rsp>
}
   1f34a:	2000      	movs	r0, #0
   1f34c:	bd08      	pop	{r3, pc}

0001f34e <ble_att_clt_tx_read_mult>:
{
   1f34e:	b570      	push	{r4, r5, r6, lr}
   1f350:	b082      	sub	sp, #8
    if (num_handles < 1) {
   1f352:	1e14      	subs	r4, r2, #0
   1f354:	dd17      	ble.n	1f386 <ble_att_clt_tx_read_mult+0x38>
   1f356:	4606      	mov	r6, r0
   1f358:	460d      	mov	r5, r1
    req = ble_att_cmd_get(BLE_ATT_OP_READ_MULT_REQ,
   1f35a:	aa01      	add	r2, sp, #4
   1f35c:	0061      	lsls	r1, r4, #1
   1f35e:	200e      	movs	r0, #14
   1f360:	f000 f984 	bl	1f66c <ble_att_cmd_get>
    if (req == NULL) {
   1f364:	4601      	mov	r1, r0
   1f366:	b180      	cbz	r0, 1f38a <ble_att_clt_tx_read_mult+0x3c>
    for(i = 0; i < num_handles; i++) {
   1f368:	2300      	movs	r3, #0
   1f36a:	e004      	b.n	1f376 <ble_att_clt_tx_read_mult+0x28>
        req->handles[i] = htole16(handles[i]);
   1f36c:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
   1f370:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(i = 0; i < num_handles; i++) {
   1f374:	3301      	adds	r3, #1
   1f376:	42a3      	cmp	r3, r4
   1f378:	dbf8      	blt.n	1f36c <ble_att_clt_tx_read_mult+0x1e>
    return ble_att_tx(conn_handle, txom);
   1f37a:	9901      	ldr	r1, [sp, #4]
   1f37c:	4630      	mov	r0, r6
   1f37e:	f000 f983 	bl	1f688 <ble_att_tx>
}
   1f382:	b002      	add	sp, #8
   1f384:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EINVAL;
   1f386:	2003      	movs	r0, #3
   1f388:	e7fb      	b.n	1f382 <ble_att_clt_tx_read_mult+0x34>
        return BLE_HS_ENOMEM;
   1f38a:	2006      	movs	r0, #6
   1f38c:	e7f9      	b.n	1f382 <ble_att_clt_tx_read_mult+0x34>

0001f38e <ble_att_clt_rx_read_mult>:
{
   1f38e:	b508      	push	{r3, lr}
   1f390:	460a      	mov	r2, r1
    ble_gattc_rx_read_mult_rsp(conn_handle, 0, rxom);
   1f392:	2100      	movs	r1, #0
   1f394:	f005 fda3 	bl	24ede <ble_gattc_rx_read_mult_rsp>
}
   1f398:	2000      	movs	r0, #0
   1f39a:	bd08      	pop	{r3, pc}

0001f39c <ble_att_clt_tx_read_group_type>:
    if (start_handle == 0 || start_handle > end_handle) {
   1f39c:	b1e9      	cbz	r1, 1f3da <ble_att_clt_tx_read_group_type+0x3e>
{
   1f39e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f3a0:	b083      	sub	sp, #12
   1f3a2:	4607      	mov	r7, r0
   1f3a4:	4614      	mov	r4, r2
   1f3a6:	461d      	mov	r5, r3
   1f3a8:	460e      	mov	r6, r1
    if (start_handle == 0 || start_handle > end_handle) {
   1f3aa:	4291      	cmp	r1, r2
   1f3ac:	d817      	bhi.n	1f3de <ble_att_clt_tx_read_group_type+0x42>
                          sizeof(*req) + ble_uuid_length(uuid), &txom);
   1f3ae:	4618      	mov	r0, r3
   1f3b0:	f00a fbee 	bl	29b90 <ble_uuid_length>
    req = ble_att_cmd_get(BLE_ATT_OP_READ_GROUP_TYPE_REQ,
   1f3b4:	aa01      	add	r2, sp, #4
   1f3b6:	1d01      	adds	r1, r0, #4
   1f3b8:	2010      	movs	r0, #16
   1f3ba:	f000 f957 	bl	1f66c <ble_att_cmd_get>
    if (req == NULL) {
   1f3be:	4601      	mov	r1, r0
   1f3c0:	b178      	cbz	r0, 1f3e2 <ble_att_clt_tx_read_group_type+0x46>
    req->bagq_start_handle = htole16(start_handle);
   1f3c2:	8006      	strh	r6, [r0, #0]
    req->bagq_end_handle = htole16(end_handle);
   1f3c4:	8044      	strh	r4, [r0, #2]
    ble_uuid_flat(uuid, req->uuid);
   1f3c6:	3104      	adds	r1, #4
   1f3c8:	4628      	mov	r0, r5
   1f3ca:	f00a fbb5 	bl	29b38 <ble_uuid_flat>
    return ble_att_tx(conn_handle, txom);
   1f3ce:	9901      	ldr	r1, [sp, #4]
   1f3d0:	4638      	mov	r0, r7
   1f3d2:	f000 f959 	bl	1f688 <ble_att_tx>
}
   1f3d6:	b003      	add	sp, #12
   1f3d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EINVAL;
   1f3da:	2003      	movs	r0, #3
}
   1f3dc:	4770      	bx	lr
        return BLE_HS_EINVAL;
   1f3de:	2003      	movs	r0, #3
   1f3e0:	e7f9      	b.n	1f3d6 <ble_att_clt_tx_read_group_type+0x3a>
        return BLE_HS_ENOMEM;
   1f3e2:	2006      	movs	r0, #6
   1f3e4:	e7f7      	b.n	1f3d6 <ble_att_clt_tx_read_group_type+0x3a>

0001f3e6 <ble_att_clt_rx_read_group_type>:

int
ble_att_clt_rx_read_group_type(uint16_t conn_handle, struct os_mbuf **rxom)
{
   1f3e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f3e8:	b085      	sub	sp, #20
   1f3ea:	4606      	mov	r6, r0
   1f3ec:	460c      	mov	r4, r1
    struct ble_att_read_group_type_adata adata;
    struct ble_att_read_group_type_rsp *rsp;
    uint8_t len;
    int rc;

    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*rsp));
   1f3ee:	2101      	movs	r1, #1
   1f3f0:	4620      	mov	r0, r4
   1f3f2:	f009 f8c7 	bl	28584 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   1f3f6:	4607      	mov	r7, r0
   1f3f8:	b130      	cbz	r0, 1f408 <ble_att_clt_rx_read_group_type+0x22>
        os_mbuf_adj(*rxom, len);
    }

done:
    /* Notify GATT that the response is done being parsed. */
    ble_gattc_rx_read_group_type_complete(conn_handle, rc);
   1f3fa:	4639      	mov	r1, r7
   1f3fc:	4630      	mov	r0, r6
   1f3fe:	f005 fd36 	bl	24e6e <ble_gattc_rx_read_group_type_complete>
    return rc;
}
   1f402:	4638      	mov	r0, r7
   1f404:	b005      	add	sp, #20
   1f406:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rsp = (struct ble_att_read_group_type_rsp *)(*rxom)->om_data;
   1f408:	6820      	ldr	r0, [r4, #0]
   1f40a:	6803      	ldr	r3, [r0, #0]
    len = rsp->bagp_length;
   1f40c:	781d      	ldrb	r5, [r3, #0]
    os_mbuf_adj(*rxom, sizeof(*rsp));
   1f40e:	2101      	movs	r1, #1
   1f410:	f7fa f9cb 	bl	197aa <os_mbuf_adj>
    while (OS_MBUF_PKTLEN(*rxom) > 0) {
   1f414:	e007      	b.n	1f426 <ble_att_clt_rx_read_group_type+0x40>
        ble_gattc_rx_read_group_type_adata(conn_handle, &adata);
   1f416:	a901      	add	r1, sp, #4
   1f418:	4630      	mov	r0, r6
   1f41a:	f005 fd19 	bl	24e50 <ble_gattc_rx_read_group_type_adata>
        os_mbuf_adj(*rxom, len);
   1f41e:	4629      	mov	r1, r5
   1f420:	6820      	ldr	r0, [r4, #0]
   1f422:	f7fa f9c2 	bl	197aa <os_mbuf_adj>
    while (OS_MBUF_PKTLEN(*rxom) > 0) {
   1f426:	6823      	ldr	r3, [r4, #0]
   1f428:	8a1b      	ldrh	r3, [r3, #16]
   1f42a:	2b00      	cmp	r3, #0
   1f42c:	d0e5      	beq.n	1f3fa <ble_att_clt_rx_read_group_type+0x14>
        rc = ble_att_clt_parse_read_group_type_adata(rxom, len, &adata);
   1f42e:	aa01      	add	r2, sp, #4
   1f430:	4629      	mov	r1, r5
   1f432:	4620      	mov	r0, r4
   1f434:	f7ff fd90 	bl	1ef58 <ble_att_clt_parse_read_group_type_adata>
        if (rc != 0) {
   1f438:	4607      	mov	r7, r0
   1f43a:	2800      	cmp	r0, #0
   1f43c:	d0eb      	beq.n	1f416 <ble_att_clt_rx_read_group_type+0x30>
   1f43e:	e7dc      	b.n	1f3fa <ble_att_clt_rx_read_group_type+0x14>

0001f440 <ble_att_clt_tx_write_req>:
 *****************************************************************************/

int
ble_att_clt_tx_write_req(uint16_t conn_handle, uint16_t handle,
                         struct os_mbuf *txom)
{
   1f440:	b570      	push	{r4, r5, r6, lr}
   1f442:	b082      	sub	sp, #8
   1f444:	4605      	mov	r5, r0
   1f446:	460e      	mov	r6, r1
   1f448:	4614      	mov	r4, r2
#endif

    struct ble_att_write_req *req;
    struct os_mbuf *txom2;

    req = ble_att_cmd_get(BLE_ATT_OP_WRITE_REQ, sizeof(*req), &txom2);
   1f44a:	aa01      	add	r2, sp, #4
   1f44c:	2102      	movs	r1, #2
   1f44e:	2012      	movs	r0, #18
   1f450:	f000 f90c 	bl	1f66c <ble_att_cmd_get>
    if (req == NULL) {
   1f454:	b150      	cbz	r0, 1f46c <ble_att_clt_tx_write_req+0x2c>
        os_mbuf_free_chain(txom);
        return BLE_HS_ENOMEM;
    }

    req->bawq_handle = htole16(handle);
   1f456:	8006      	strh	r6, [r0, #0]
    os_mbuf_concat(txom2, txom);
   1f458:	4621      	mov	r1, r4
   1f45a:	9801      	ldr	r0, [sp, #4]
   1f45c:	f7fa fb38 	bl	19ad0 <os_mbuf_concat>

    return ble_att_tx(conn_handle, txom2);
   1f460:	9901      	ldr	r1, [sp, #4]
   1f462:	4628      	mov	r0, r5
   1f464:	f000 f910 	bl	1f688 <ble_att_tx>
}
   1f468:	b002      	add	sp, #8
   1f46a:	bd70      	pop	{r4, r5, r6, pc}
        os_mbuf_free_chain(txom);
   1f46c:	4620      	mov	r0, r4
   1f46e:	f7fa f8ce 	bl	1960e <os_mbuf_free_chain>
        return BLE_HS_ENOMEM;
   1f472:	2006      	movs	r0, #6
   1f474:	e7f8      	b.n	1f468 <ble_att_clt_tx_write_req+0x28>

0001f476 <ble_att_clt_tx_write_cmd>:

int
ble_att_clt_tx_write_cmd(uint16_t conn_handle, uint16_t handle,
                         struct os_mbuf *txom)
{
   1f476:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f478:	b083      	sub	sp, #12
   1f47a:	4606      	mov	r6, r0
   1f47c:	460f      	mov	r7, r1
   1f47e:	4615      	mov	r5, r2
    uint8_t b;
    int rc;
    int i;

    BLE_HS_LOG(DEBUG, "ble_att_clt_tx_write_cmd(): ");
    for (i = 0; i < OS_MBUF_PKTLEN(txom); i++) {
   1f480:	2400      	movs	r4, #0
   1f482:	8a2b      	ldrh	r3, [r5, #16]
   1f484:	42a3      	cmp	r3, r4
   1f486:	dd13      	ble.n	1f4b0 <ble_att_clt_tx_write_cmd+0x3a>
        if (i != 0) {
            BLE_HS_LOG(DEBUG, ":");
        }
        rc = os_mbuf_copydata(txom, i, 1, &b);
   1f488:	f10d 0303 	add.w	r3, sp, #3
   1f48c:	2201      	movs	r2, #1
   1f48e:	4621      	mov	r1, r4
   1f490:	4628      	mov	r0, r5
   1f492:	f7fa f95d 	bl	19750 <os_mbuf_copydata>
        assert(rc == 0);
   1f496:	b908      	cbnz	r0, 1f49c <ble_att_clt_tx_write_cmd+0x26>
    for (i = 0; i < OS_MBUF_PKTLEN(txom); i++) {
   1f498:	3401      	adds	r4, #1
   1f49a:	e7f2      	b.n	1f482 <ble_att_clt_tx_write_cmd+0xc>
        assert(rc == 0);
   1f49c:	f7f5 f932 	bl	14704 <hal_debugger_connected>
   1f4a0:	b100      	cbz	r0, 1f4a4 <ble_att_clt_tx_write_cmd+0x2e>
   1f4a2:	be01      	bkpt	0x0001
   1f4a4:	2300      	movs	r3, #0
   1f4a6:	461a      	mov	r2, r3
   1f4a8:	4619      	mov	r1, r3
   1f4aa:	4618      	mov	r0, r3
   1f4ac:	f7f9 fc3a 	bl	18d24 <__assert_func>
        BLE_HS_LOG(DEBUG, "0x%02x", b);
    }


    cmd = ble_att_cmd_get(BLE_ATT_OP_WRITE_CMD, sizeof(*cmd), &txom2);
   1f4b0:	aa01      	add	r2, sp, #4
   1f4b2:	2102      	movs	r1, #2
   1f4b4:	2052      	movs	r0, #82	; 0x52
   1f4b6:	f000 f8d9 	bl	1f66c <ble_att_cmd_get>
    if (cmd == NULL) {
   1f4ba:	b150      	cbz	r0, 1f4d2 <ble_att_clt_tx_write_cmd+0x5c>
        os_mbuf_free_chain(txom);
        return BLE_HS_ENOMEM;
    }

    cmd->handle = htole16(handle);
   1f4bc:	8007      	strh	r7, [r0, #0]
    os_mbuf_concat(txom2, txom);
   1f4be:	4629      	mov	r1, r5
   1f4c0:	9801      	ldr	r0, [sp, #4]
   1f4c2:	f7fa fb05 	bl	19ad0 <os_mbuf_concat>

    return ble_att_tx(conn_handle, txom2);
   1f4c6:	9901      	ldr	r1, [sp, #4]
   1f4c8:	4630      	mov	r0, r6
   1f4ca:	f000 f8dd 	bl	1f688 <ble_att_tx>
}
   1f4ce:	b003      	add	sp, #12
   1f4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        os_mbuf_free_chain(txom);
   1f4d2:	4628      	mov	r0, r5
   1f4d4:	f7fa f89b 	bl	1960e <os_mbuf_free_chain>
        return BLE_HS_ENOMEM;
   1f4d8:	2006      	movs	r0, #6
   1f4da:	e7f8      	b.n	1f4ce <ble_att_clt_tx_write_cmd+0x58>

0001f4dc <ble_att_clt_rx_write>:

int
ble_att_clt_rx_write(uint16_t conn_handle, struct os_mbuf **rxom)
{
   1f4dc:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_ATT_CLT_WRITE
    return BLE_HS_ENOTSUP;
#endif

    /* No payload. */
    ble_gattc_rx_write_rsp(conn_handle);
   1f4de:	f005 fd10 	bl	24f02 <ble_gattc_rx_write_rsp>
    return 0;
}
   1f4e2:	2000      	movs	r0, #0
   1f4e4:	bd08      	pop	{r3, pc}

0001f4e6 <ble_att_clt_tx_prep_write>:
 *****************************************************************************/

int
ble_att_clt_tx_prep_write(uint16_t conn_handle, uint16_t handle,
                          uint16_t offset, struct os_mbuf *txom)
{
   1f4e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f4e8:	b083      	sub	sp, #12
   1f4ea:	461c      	mov	r4, r3

    struct ble_att_prep_write_cmd *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   1f4ec:	b319      	cbz	r1, 1f536 <ble_att_clt_tx_prep_write+0x50>
   1f4ee:	4606      	mov	r6, r0
   1f4f0:	4615      	mov	r5, r2
   1f4f2:	460f      	mov	r7, r1
        rc = BLE_HS_EINVAL;
        goto err;
    }

    if (offset + OS_MBUF_PKTLEN(txom) > BLE_ATT_ATTR_MAX_LEN) {
   1f4f4:	8a1b      	ldrh	r3, [r3, #16]
   1f4f6:	4413      	add	r3, r2
   1f4f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1f4fc:	dd01      	ble.n	1f502 <ble_att_clt_tx_prep_write+0x1c>
        rc = BLE_HS_EINVAL;
   1f4fe:	2503      	movs	r5, #3
   1f500:	e01a      	b.n	1f538 <ble_att_clt_tx_prep_write+0x52>
        goto err;
    }

    if (OS_MBUF_PKTLEN(txom) >
        ble_att_mtu(conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ) {
   1f502:	f7ff fca4 	bl	1ee4e <ble_att_mtu>
    if (OS_MBUF_PKTLEN(txom) >
   1f506:	3804      	subs	r0, #4
   1f508:	8a23      	ldrh	r3, [r4, #16]
   1f50a:	4298      	cmp	r0, r3
   1f50c:	dc01      	bgt.n	1f512 <ble_att_clt_tx_prep_write+0x2c>
        rc = BLE_HS_EINVAL;
   1f50e:	2503      	movs	r5, #3
   1f510:	e012      	b.n	1f538 <ble_att_clt_tx_prep_write+0x52>
        goto err;
    }

    req = ble_att_cmd_get(BLE_ATT_OP_PREP_WRITE_REQ, sizeof(*req), &txom2);
   1f512:	aa01      	add	r2, sp, #4
   1f514:	2104      	movs	r1, #4
   1f516:	2016      	movs	r0, #22
   1f518:	f000 f8a8 	bl	1f66c <ble_att_cmd_get>
    if (req == NULL) {
   1f51c:	b190      	cbz	r0, 1f544 <ble_att_clt_tx_prep_write+0x5e>
        rc = BLE_HS_ENOMEM;
        goto err;
    }

    req->bapc_handle = htole16(handle);
   1f51e:	8007      	strh	r7, [r0, #0]
    req->bapc_offset = htole16(offset);
   1f520:	8045      	strh	r5, [r0, #2]
    os_mbuf_concat(txom2, txom);
   1f522:	4621      	mov	r1, r4
   1f524:	9801      	ldr	r0, [sp, #4]
   1f526:	f7fa fad3 	bl	19ad0 <os_mbuf_concat>

    return ble_att_tx(conn_handle, txom2);
   1f52a:	9901      	ldr	r1, [sp, #4]
   1f52c:	4630      	mov	r0, r6
   1f52e:	f000 f8ab 	bl	1f688 <ble_att_tx>
   1f532:	4605      	mov	r5, r0
   1f534:	e003      	b.n	1f53e <ble_att_clt_tx_prep_write+0x58>
        rc = BLE_HS_EINVAL;
   1f536:	2503      	movs	r5, #3

err:
    os_mbuf_free_chain(txom);
   1f538:	4620      	mov	r0, r4
   1f53a:	f7fa f868 	bl	1960e <os_mbuf_free_chain>
    return rc;
}
   1f53e:	4628      	mov	r0, r5
   1f540:	b003      	add	sp, #12
   1f542:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = BLE_HS_ENOMEM;
   1f544:	2506      	movs	r5, #6
   1f546:	e7f7      	b.n	1f538 <ble_att_clt_tx_prep_write+0x52>

0001f548 <ble_att_clt_rx_prep_write>:

int
ble_att_clt_rx_prep_write(uint16_t conn_handle, struct os_mbuf **rxom)
{
   1f548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f54c:	b082      	sub	sp, #8
   1f54e:	4605      	mov	r5, r0
   1f550:	460c      	mov	r4, r1

    /* Initialize some values in case of early error. */
    handle = 0;
    offset = 0;

    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*rsp));
   1f552:	2104      	movs	r1, #4
   1f554:	4620      	mov	r0, r4
   1f556:	f009 f815 	bl	28584 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   1f55a:	4606      	mov	r6, r0
   1f55c:	b160      	cbz	r0, 1f578 <ble_att_clt_rx_prep_write+0x30>
    offset = 0;
   1f55e:	2700      	movs	r7, #0
    handle = 0;
   1f560:	46b8      	mov	r8, r7
    /* Strip the base from the front of the response. */
    os_mbuf_adj(*rxom, sizeof(*rsp));

done:
    /* Notify GATT client that the full response has been parsed. */
    ble_gattc_rx_prep_write_rsp(conn_handle, rc, handle, offset, rxom);
   1f562:	9400      	str	r4, [sp, #0]
   1f564:	463b      	mov	r3, r7
   1f566:	4642      	mov	r2, r8
   1f568:	4631      	mov	r1, r6
   1f56a:	4628      	mov	r0, r5
   1f56c:	f005 fcd8 	bl	24f20 <ble_gattc_rx_prep_write_rsp>
    return rc;
}
   1f570:	4630      	mov	r0, r6
   1f572:	b002      	add	sp, #8
   1f574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rsp = (struct ble_att_prep_write_cmd *)(*rxom)->om_data;
   1f578:	6820      	ldr	r0, [r4, #0]
   1f57a:	6803      	ldr	r3, [r0, #0]
    handle = le16toh(rsp->bapc_handle);
   1f57c:	f8b3 8000 	ldrh.w	r8, [r3]
    offset = le16toh(rsp->bapc_offset);
   1f580:	885f      	ldrh	r7, [r3, #2]
    os_mbuf_adj(*rxom, sizeof(*rsp));
   1f582:	2104      	movs	r1, #4
   1f584:	f7fa f911 	bl	197aa <os_mbuf_adj>
   1f588:	e7eb      	b.n	1f562 <ble_att_clt_rx_prep_write+0x1a>

0001f58a <ble_att_clt_tx_exec_write>:
 * $execute write request                                                    *
 *****************************************************************************/

int
ble_att_clt_tx_exec_write(uint16_t conn_handle, uint8_t flags)
{
   1f58a:	b530      	push	{r4, r5, lr}
   1f58c:	b083      	sub	sp, #12
   1f58e:	4604      	mov	r4, r0
   1f590:	460d      	mov	r5, r1

    struct ble_att_exec_write_req *req;
    struct os_mbuf *txom;
    int rc;

    req = ble_att_cmd_get(BLE_ATT_OP_EXEC_WRITE_REQ, sizeof(*req), &txom);
   1f592:	aa01      	add	r2, sp, #4
   1f594:	2101      	movs	r1, #1
   1f596:	2018      	movs	r0, #24
   1f598:	f000 f868 	bl	1f66c <ble_att_cmd_get>
    if (req == NULL) {
   1f59c:	b130      	cbz	r0, 1f5ac <ble_att_clt_tx_exec_write+0x22>
        return BLE_HS_ENOMEM;
    }

    req->baeq_flags = flags;
   1f59e:	7005      	strb	r5, [r0, #0]

    rc = ble_att_tx(conn_handle, txom);
   1f5a0:	9901      	ldr	r1, [sp, #4]
   1f5a2:	4620      	mov	r0, r4
   1f5a4:	f000 f870 	bl	1f688 <ble_att_tx>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1f5a8:	b003      	add	sp, #12
   1f5aa:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ENOMEM;
   1f5ac:	2006      	movs	r0, #6
   1f5ae:	e7fb      	b.n	1f5a8 <ble_att_clt_tx_exec_write+0x1e>

0001f5b0 <ble_att_clt_rx_exec_write>:

int
ble_att_clt_rx_exec_write(uint16_t conn_handle, struct os_mbuf **rxom)
{
   1f5b0:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_ATT_CLT_EXEC_WRITE
    return BLE_HS_ENOTSUP;
#endif

    ble_gattc_rx_exec_write_rsp(conn_handle, 0);
   1f5b2:	2100      	movs	r1, #0
   1f5b4:	f005 fcd4 	bl	24f60 <ble_gattc_rx_exec_write_rsp>
    return 0;
}
   1f5b8:	2000      	movs	r0, #0
   1f5ba:	bd08      	pop	{r3, pc}

0001f5bc <ble_att_clt_tx_notify>:
 *****************************************************************************/

int
ble_att_clt_tx_notify(uint16_t conn_handle, uint16_t handle,
                      struct os_mbuf *txom)
{
   1f5bc:	b570      	push	{r4, r5, r6, lr}
   1f5be:	b082      	sub	sp, #8
   1f5c0:	4614      	mov	r4, r2

    struct ble_att_notify_req *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   1f5c2:	b931      	cbnz	r1, 1f5d2 <ble_att_clt_tx_notify+0x16>
        rc = BLE_HS_EINVAL;
   1f5c4:	2503      	movs	r5, #3
    os_mbuf_concat(txom2, txom);

    return ble_att_tx(conn_handle, txom2);

err:
    os_mbuf_free_chain(txom);
   1f5c6:	4620      	mov	r0, r4
   1f5c8:	f7fa f821 	bl	1960e <os_mbuf_free_chain>
    return rc;
}
   1f5cc:	4628      	mov	r0, r5
   1f5ce:	b002      	add	sp, #8
   1f5d0:	bd70      	pop	{r4, r5, r6, pc}
   1f5d2:	4605      	mov	r5, r0
   1f5d4:	460e      	mov	r6, r1
    req = ble_att_cmd_get(BLE_ATT_OP_NOTIFY_REQ, sizeof(*req), &txom2);
   1f5d6:	aa01      	add	r2, sp, #4
   1f5d8:	2102      	movs	r1, #2
   1f5da:	201b      	movs	r0, #27
   1f5dc:	f000 f846 	bl	1f66c <ble_att_cmd_get>
    if (req == NULL) {
   1f5e0:	b150      	cbz	r0, 1f5f8 <ble_att_clt_tx_notify+0x3c>
    req->banq_handle = htole16(handle);
   1f5e2:	8006      	strh	r6, [r0, #0]
    os_mbuf_concat(txom2, txom);
   1f5e4:	4621      	mov	r1, r4
   1f5e6:	9801      	ldr	r0, [sp, #4]
   1f5e8:	f7fa fa72 	bl	19ad0 <os_mbuf_concat>
    return ble_att_tx(conn_handle, txom2);
   1f5ec:	9901      	ldr	r1, [sp, #4]
   1f5ee:	4628      	mov	r0, r5
   1f5f0:	f000 f84a 	bl	1f688 <ble_att_tx>
   1f5f4:	4605      	mov	r5, r0
   1f5f6:	e7e9      	b.n	1f5cc <ble_att_clt_tx_notify+0x10>
        rc = BLE_HS_ENOMEM;
   1f5f8:	2506      	movs	r5, #6
   1f5fa:	e7e4      	b.n	1f5c6 <ble_att_clt_tx_notify+0xa>

0001f5fc <ble_att_clt_tx_indicate>:
 *****************************************************************************/

int
ble_att_clt_tx_indicate(uint16_t conn_handle, uint16_t handle,
                        struct os_mbuf *txom)
{
   1f5fc:	b570      	push	{r4, r5, r6, lr}
   1f5fe:	b082      	sub	sp, #8
   1f600:	4614      	mov	r4, r2

    struct ble_att_indicate_req *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   1f602:	b931      	cbnz	r1, 1f612 <ble_att_clt_tx_indicate+0x16>
        rc = BLE_HS_EINVAL;
   1f604:	2503      	movs	r5, #3
    os_mbuf_concat(txom2, txom);

    return ble_att_tx(conn_handle, txom2);

err:
    os_mbuf_free_chain(txom);
   1f606:	4620      	mov	r0, r4
   1f608:	f7fa f801 	bl	1960e <os_mbuf_free_chain>
    return rc;
}
   1f60c:	4628      	mov	r0, r5
   1f60e:	b002      	add	sp, #8
   1f610:	bd70      	pop	{r4, r5, r6, pc}
   1f612:	4605      	mov	r5, r0
   1f614:	460e      	mov	r6, r1
    req = ble_att_cmd_get(BLE_ATT_OP_INDICATE_REQ, sizeof(*req), &txom2);
   1f616:	aa01      	add	r2, sp, #4
   1f618:	2102      	movs	r1, #2
   1f61a:	201d      	movs	r0, #29
   1f61c:	f000 f826 	bl	1f66c <ble_att_cmd_get>
    if (req == NULL) {
   1f620:	b150      	cbz	r0, 1f638 <ble_att_clt_tx_indicate+0x3c>
    req->baiq_handle = htole16(handle);
   1f622:	8006      	strh	r6, [r0, #0]
    os_mbuf_concat(txom2, txom);
   1f624:	4621      	mov	r1, r4
   1f626:	9801      	ldr	r0, [sp, #4]
   1f628:	f7fa fa52 	bl	19ad0 <os_mbuf_concat>
    return ble_att_tx(conn_handle, txom2);
   1f62c:	9901      	ldr	r1, [sp, #4]
   1f62e:	4628      	mov	r0, r5
   1f630:	f000 f82a 	bl	1f688 <ble_att_tx>
   1f634:	4605      	mov	r5, r0
   1f636:	e7e9      	b.n	1f60c <ble_att_clt_tx_indicate+0x10>
        rc = BLE_HS_ENOMEM;
   1f638:	2506      	movs	r5, #6
   1f63a:	e7e4      	b.n	1f606 <ble_att_clt_tx_indicate+0xa>

0001f63c <ble_att_clt_rx_indicate>:

int
ble_att_clt_rx_indicate(uint16_t conn_handle, struct os_mbuf **rxom)
{
   1f63c:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_ATT_CLT_INDICATE
    return BLE_HS_ENOTSUP;
#endif

    /* No payload. */
    ble_gattc_rx_indicate_rsp(conn_handle);
   1f63e:	f005 fca5 	bl	24f8c <ble_gattc_rx_indicate_rsp>
    return 0;
}
   1f642:	2000      	movs	r0, #0
   1f644:	bd08      	pop	{r3, pc}

0001f646 <ble_att_cmd_prepare>:
#include "ble_hs_priv.h"

#if NIMBLE_BLE_CONNECT
void *
ble_att_cmd_prepare(uint8_t opcode, size_t len, struct os_mbuf *txom)
{
   1f646:	b570      	push	{r4, r5, r6, lr}
   1f648:	4606      	mov	r6, r0
   1f64a:	4614      	mov	r4, r2
    struct ble_att_hdr *hdr;

    if (os_mbuf_extend(txom, sizeof(*hdr) + len) == NULL) {
   1f64c:	3101      	adds	r1, #1
   1f64e:	b289      	uxth	r1, r1
   1f650:	4610      	mov	r0, r2
   1f652:	f7fa fa5f 	bl	19b14 <os_mbuf_extend>
   1f656:	b120      	cbz	r0, 1f662 <ble_att_cmd_prepare+0x1c>
        return NULL;
    }

    hdr = (struct ble_att_hdr *)(txom)->om_data;

    hdr->opcode = opcode;
   1f658:	6825      	ldr	r5, [r4, #0]
   1f65a:	f805 6b01 	strb.w	r6, [r5], #1

    return hdr->data;
}
   1f65e:	4628      	mov	r0, r5
   1f660:	bd70      	pop	{r4, r5, r6, pc}
   1f662:	4605      	mov	r5, r0
        os_mbuf_free_chain(txom);
   1f664:	4620      	mov	r0, r4
   1f666:	f7f9 ffd2 	bl	1960e <os_mbuf_free_chain>
        return NULL;
   1f66a:	e7f8      	b.n	1f65e <ble_att_cmd_prepare+0x18>

0001f66c <ble_att_cmd_get>:

void *
ble_att_cmd_get(uint8_t opcode, size_t len, struct os_mbuf **txom)
{
   1f66c:	b570      	push	{r4, r5, r6, lr}
   1f66e:	4605      	mov	r5, r0
   1f670:	460e      	mov	r6, r1
   1f672:	4614      	mov	r4, r2
    *txom = ble_hs_mbuf_l2cap_pkt();
   1f674:	f008 ff53 	bl	2851e <ble_hs_mbuf_l2cap_pkt>
   1f678:	6020      	str	r0, [r4, #0]
    if (*txom == NULL) {
   1f67a:	b120      	cbz	r0, 1f686 <ble_att_cmd_get+0x1a>
        return NULL;
    }

    return ble_att_cmd_prepare(opcode, len, *txom);
   1f67c:	4602      	mov	r2, r0
   1f67e:	4631      	mov	r1, r6
   1f680:	4628      	mov	r0, r5
   1f682:	f7ff ffe0 	bl	1f646 <ble_att_cmd_prepare>
}
   1f686:	bd70      	pop	{r4, r5, r6, pc}

0001f688 <ble_att_tx>:

int
ble_att_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   1f688:	b530      	push	{r4, r5, lr}
   1f68a:	b083      	sub	sp, #12
   1f68c:	4605      	mov	r5, r0
   1f68e:	460c      	mov	r4, r1
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;
    int rc;

    BLE_HS_DBG_ASSERT_EVAL(txom->om_len >= 1);
    ble_att_inc_tx_stat(txom->om_data[0]);
   1f690:	680b      	ldr	r3, [r1, #0]
   1f692:	7818      	ldrb	r0, [r3, #0]
   1f694:	f7ff fabc 	bl	1ec10 <ble_att_inc_tx_stat>

    ble_hs_lock();
   1f698:	f006 ff4e 	bl	26538 <ble_hs_lock>

    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_ATT, &conn,
   1f69c:	ab01      	add	r3, sp, #4
   1f69e:	466a      	mov	r2, sp
   1f6a0:	2104      	movs	r1, #4
   1f6a2:	4628      	mov	r0, r5
   1f6a4:	f008 ffb2 	bl	2860c <ble_hs_misc_conn_chan_find_reqd>
                                         &chan);
    if (rc != 0) {
   1f6a8:	b140      	cbz	r0, 1f6bc <ble_att_tx+0x34>
   1f6aa:	4605      	mov	r5, r0
        os_mbuf_free_chain(txom);
   1f6ac:	4620      	mov	r0, r4
   1f6ae:	f7f9 ffae 	bl	1960e <os_mbuf_free_chain>
    } else {
        ble_att_truncate_to_mtu(chan, txom);
        rc = ble_l2cap_tx(conn, chan, txom);
    }

    ble_hs_unlock();
   1f6b2:	f006 ff45 	bl	26540 <ble_hs_unlock>

    return rc;
}
   1f6b6:	4628      	mov	r0, r5
   1f6b8:	b003      	add	sp, #12
   1f6ba:	bd30      	pop	{r4, r5, pc}
        ble_att_truncate_to_mtu(chan, txom);
   1f6bc:	4621      	mov	r1, r4
   1f6be:	9801      	ldr	r0, [sp, #4]
   1f6c0:	f7ff fbb7 	bl	1ee32 <ble_att_truncate_to_mtu>
        rc = ble_l2cap_tx(conn, chan, txom);
   1f6c4:	4622      	mov	r2, r4
   1f6c6:	9901      	ldr	r1, [sp, #4]
   1f6c8:	9800      	ldr	r0, [sp, #0]
   1f6ca:	f009 fc47 	bl	28f5c <ble_l2cap_tx>
   1f6ce:	4605      	mov	r5, r0
   1f6d0:	e7ef      	b.n	1f6b2 <ble_att_tx+0x2a>
	...

0001f6d4 <ble_att_svr_next_id>:
static uint16_t
ble_att_svr_next_id(void)
{
    /* Rollover is fatal. */
    BLE_HS_DBG_ASSERT(ble_att_svr_id != UINT16_MAX);
    return ++ble_att_svr_id;
   1f6d4:	4b02      	ldr	r3, [pc, #8]	; (1f6e0 <ble_att_svr_next_id+0xc>)
   1f6d6:	8818      	ldrh	r0, [r3, #0]
   1f6d8:	3001      	adds	r0, #1
   1f6da:	b280      	uxth	r0, r0
   1f6dc:	8018      	strh	r0, [r3, #0]
}
   1f6de:	4770      	bx	lr
   1f6e0:	100056b0 	.word	0x100056b0

0001f6e4 <ble_att_svr_prep_find_prev>:
{
    struct ble_att_prep_entry *entry;
    struct ble_att_prep_entry *prev;

    prev = NULL;
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   1f6e4:	6803      	ldr	r3, [r0, #0]
    prev = NULL;
   1f6e6:	2000      	movs	r0, #0
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   1f6e8:	b16b      	cbz	r3, 1f706 <ble_att_svr_prep_find_prev+0x22>
{
   1f6ea:	b410      	push	{r4}
   1f6ec:	e002      	b.n	1f6f4 <ble_att_svr_prep_find_prev+0x10>

        if (entry->bape_handle == handle && entry->bape_offset > offset) {
            break;
        }

        prev = entry;
   1f6ee:	4618      	mov	r0, r3
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   1f6f0:	681b      	ldr	r3, [r3, #0]
   1f6f2:	b133      	cbz	r3, 1f702 <ble_att_svr_prep_find_prev+0x1e>
        if (entry->bape_handle > handle) {
   1f6f4:	889c      	ldrh	r4, [r3, #4]
   1f6f6:	428c      	cmp	r4, r1
   1f6f8:	d803      	bhi.n	1f702 <ble_att_svr_prep_find_prev+0x1e>
        if (entry->bape_handle == handle && entry->bape_offset > offset) {
   1f6fa:	d1f8      	bne.n	1f6ee <ble_att_svr_prep_find_prev+0xa>
   1f6fc:	88dc      	ldrh	r4, [r3, #6]
   1f6fe:	4294      	cmp	r4, r2
   1f700:	d9f5      	bls.n	1f6ee <ble_att_svr_prep_find_prev+0xa>
    }

    return prev;
}
   1f702:	bc10      	pop	{r4}
   1f704:	4770      	bx	lr
   1f706:	4770      	bx	lr

0001f708 <ble_att_svr_prep_validate>:
    struct ble_att_prep_entry *entry;
    struct ble_att_prep_entry *prev;
    int cur_len;

    prev = NULL;
    SLIST_FOREACH(entry, prep_list, bape_next) {
   1f708:	6803      	ldr	r3, [r0, #0]
    prev = NULL;
   1f70a:	2200      	movs	r2, #0
    SLIST_FOREACH(entry, prep_list, bape_next) {
   1f70c:	b343      	cbz	r3, 1f760 <ble_att_svr_prep_validate+0x58>
{
   1f70e:	b410      	push	{r4}
   1f710:	e00b      	b.n	1f72a <ble_att_svr_prep_validate+0x22>
        if (prev == NULL || prev->bape_handle != entry->bape_handle) {
            /* Ensure attribute write starts at offset 0. */
            if (entry->bape_offset != 0) {
   1f712:	88da      	ldrh	r2, [r3, #6]
   1f714:	b9ca      	cbnz	r2, 1f74a <ble_att_svr_prep_validate+0x42>
                *err_handle = entry->bape_handle;
                return BLE_ATT_ERR_INVALID_OFFSET;
            }
        }

        cur_len = entry->bape_offset + OS_MBUF_PKTLEN(entry->bape_value);
   1f716:	88da      	ldrh	r2, [r3, #6]
   1f718:	6898      	ldr	r0, [r3, #8]
   1f71a:	8a00      	ldrh	r0, [r0, #16]
   1f71c:	4402      	add	r2, r0
        if (cur_len > BLE_ATT_ATTR_MAX_LEN) {
   1f71e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   1f722:	dc16      	bgt.n	1f752 <ble_att_svr_prep_validate+0x4a>
            *err_handle = entry->bape_handle;
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
        }

        prev = entry;
   1f724:	461a      	mov	r2, r3
    SLIST_FOREACH(entry, prep_list, bape_next) {
   1f726:	681b      	ldr	r3, [r3, #0]
   1f728:	b1bb      	cbz	r3, 1f75a <ble_att_svr_prep_validate+0x52>
        if (prev == NULL || prev->bape_handle != entry->bape_handle) {
   1f72a:	2a00      	cmp	r2, #0
   1f72c:	d0f1      	beq.n	1f712 <ble_att_svr_prep_validate+0xa>
   1f72e:	8894      	ldrh	r4, [r2, #4]
   1f730:	8898      	ldrh	r0, [r3, #4]
   1f732:	4284      	cmp	r4, r0
   1f734:	d1ed      	bne.n	1f712 <ble_att_svr_prep_validate+0xa>
            if (prev->bape_offset + OS_MBUF_PKTLEN(prev->bape_value) !=
   1f736:	88d4      	ldrh	r4, [r2, #6]
   1f738:	6892      	ldr	r2, [r2, #8]
   1f73a:	8a12      	ldrh	r2, [r2, #16]
   1f73c:	4422      	add	r2, r4
                entry->bape_offset) {
   1f73e:	88dc      	ldrh	r4, [r3, #6]
            if (prev->bape_offset + OS_MBUF_PKTLEN(prev->bape_value) !=
   1f740:	42a2      	cmp	r2, r4
   1f742:	d0e8      	beq.n	1f716 <ble_att_svr_prep_validate+0xe>
                *err_handle = entry->bape_handle;
   1f744:	8008      	strh	r0, [r1, #0]
                return BLE_ATT_ERR_INVALID_OFFSET;
   1f746:	2007      	movs	r0, #7
   1f748:	e008      	b.n	1f75c <ble_att_svr_prep_validate+0x54>
                *err_handle = entry->bape_handle;
   1f74a:	889b      	ldrh	r3, [r3, #4]
   1f74c:	800b      	strh	r3, [r1, #0]
                return BLE_ATT_ERR_INVALID_OFFSET;
   1f74e:	2007      	movs	r0, #7
   1f750:	e004      	b.n	1f75c <ble_att_svr_prep_validate+0x54>
            *err_handle = entry->bape_handle;
   1f752:	889b      	ldrh	r3, [r3, #4]
   1f754:	800b      	strh	r3, [r1, #0]
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   1f756:	200d      	movs	r0, #13
   1f758:	e000      	b.n	1f75c <ble_att_svr_prep_validate+0x54>
    }

    return 0;
   1f75a:	2000      	movs	r0, #0
}
   1f75c:	bc10      	pop	{r4}
   1f75e:	4770      	bx	lr
    return 0;
   1f760:	2000      	movs	r0, #0
}
   1f762:	4770      	bx	lr

0001f764 <ble_att_svr_move_entries>:

static void
ble_att_svr_move_entries(struct ble_att_svr_entry_list *src,
                         struct ble_att_svr_entry_list *dst,
                         uint16_t start_handle, uint16_t end_handle)
{
   1f764:	b4f0      	push	{r4, r5, r6, r7}
    struct ble_att_svr_entry *remove;
    struct ble_att_svr_entry *insert;

    /* Find first matching element to move */
    remove = NULL;
    entry = STAILQ_FIRST(src);
   1f766:	6804      	ldr	r4, [r0, #0]
    remove = NULL;
   1f768:	2500      	movs	r5, #0
    while (entry && entry->ha_handle_id < start_handle) {
   1f76a:	b12c      	cbz	r4, 1f778 <ble_att_svr_move_entries+0x14>
   1f76c:	8966      	ldrh	r6, [r4, #10]
   1f76e:	4296      	cmp	r6, r2
   1f770:	d202      	bcs.n	1f778 <ble_att_svr_move_entries+0x14>
        remove = entry;
   1f772:	4625      	mov	r5, r4
        entry = STAILQ_NEXT(entry, ha_next);
   1f774:	6824      	ldr	r4, [r4, #0]
   1f776:	e7f8      	b.n	1f76a <ble_att_svr_move_entries+0x6>
    }

    /* Nothing to remove? */
    if (!entry) {
   1f778:	2c00      	cmp	r4, #0
   1f77a:	d032      	beq.n	1f7e2 <ble_att_svr_move_entries+0x7e>
        return;
    }

    /* Find element after which we'll put moved elements */
    prev = NULL;
    insert = STAILQ_FIRST(dst);
   1f77c:	680e      	ldr	r6, [r1, #0]
    prev = NULL;
   1f77e:	2700      	movs	r7, #0
    while (insert && insert->ha_handle_id < start_handle) {
   1f780:	b1de      	cbz	r6, 1f7ba <ble_att_svr_move_entries+0x56>
   1f782:	f8b6 c00a 	ldrh.w	ip, [r6, #10]
   1f786:	4594      	cmp	ip, r2
   1f788:	d217      	bcs.n	1f7ba <ble_att_svr_move_entries+0x56>
        prev = insert;
   1f78a:	4637      	mov	r7, r6
        insert = STAILQ_NEXT(insert, ha_next);
   1f78c:	6836      	ldr	r6, [r6, #0]
   1f78e:	e7f7      	b.n	1f780 <ble_att_svr_move_entries+0x1c>

    /* Move elements */
    while (entry && entry->ha_handle_id <= end_handle) {
        /* Remove either from head or after prev (which is current one) */
        if (remove == NULL) {
            STAILQ_REMOVE_HEAD(src, ha_next);
   1f790:	6802      	ldr	r2, [r0, #0]
   1f792:	6812      	ldr	r2, [r2, #0]
   1f794:	6002      	str	r2, [r0, #0]
   1f796:	b9da      	cbnz	r2, 1f7d0 <ble_att_svr_move_entries+0x6c>
   1f798:	6040      	str	r0, [r0, #4]
   1f79a:	e019      	b.n	1f7d0 <ble_att_svr_move_entries+0x6c>
        } else {
            STAILQ_REMOVE_AFTER(src, remove, ha_next);
   1f79c:	6045      	str	r5, [r0, #4]
   1f79e:	e017      	b.n	1f7d0 <ble_att_svr_move_entries+0x6c>
        }

        /* Insert current element */
        if (insert == NULL) {
            STAILQ_INSERT_HEAD(dst, entry, ha_next);
   1f7a0:	680a      	ldr	r2, [r1, #0]
   1f7a2:	6022      	str	r2, [r4, #0]
   1f7a4:	b10a      	cbz	r2, 1f7aa <ble_att_svr_move_entries+0x46>
   1f7a6:	600c      	str	r4, [r1, #0]
            insert = STAILQ_FIRST(dst);
   1f7a8:	e003      	b.n	1f7b2 <ble_att_svr_move_entries+0x4e>
            STAILQ_INSERT_HEAD(dst, entry, ha_next);
   1f7aa:	604c      	str	r4, [r1, #4]
   1f7ac:	e7fb      	b.n	1f7a6 <ble_att_svr_move_entries+0x42>
        } else {
            STAILQ_INSERT_AFTER(dst, insert, entry, ha_next);
   1f7ae:	604c      	str	r4, [r1, #4]
   1f7b0:	603c      	str	r4, [r7, #0]
            insert = entry;
        }

        /* Calculate next candidate to remove */
        if (remove == NULL) {
   1f7b2:	b1a5      	cbz	r5, 1f7de <ble_att_svr_move_entries+0x7a>
            entry = STAILQ_FIRST(src);
        } else {
            entry = STAILQ_NEXT(remove, ha_next);
   1f7b4:	682a      	ldr	r2, [r5, #0]
        insert = STAILQ_NEXT(insert, ha_next);
   1f7b6:	4627      	mov	r7, r4
   1f7b8:	4614      	mov	r4, r2
    while (entry && entry->ha_handle_id <= end_handle) {
   1f7ba:	b194      	cbz	r4, 1f7e2 <ble_att_svr_move_entries+0x7e>
   1f7bc:	8962      	ldrh	r2, [r4, #10]
   1f7be:	429a      	cmp	r2, r3
   1f7c0:	d80f      	bhi.n	1f7e2 <ble_att_svr_move_entries+0x7e>
        if (remove == NULL) {
   1f7c2:	2d00      	cmp	r5, #0
   1f7c4:	d0e4      	beq.n	1f790 <ble_att_svr_move_entries+0x2c>
            STAILQ_REMOVE_AFTER(src, remove, ha_next);
   1f7c6:	682a      	ldr	r2, [r5, #0]
   1f7c8:	6812      	ldr	r2, [r2, #0]
   1f7ca:	602a      	str	r2, [r5, #0]
   1f7cc:	2a00      	cmp	r2, #0
   1f7ce:	d0e5      	beq.n	1f79c <ble_att_svr_move_entries+0x38>
        if (insert == NULL) {
   1f7d0:	2f00      	cmp	r7, #0
   1f7d2:	d0e5      	beq.n	1f7a0 <ble_att_svr_move_entries+0x3c>
            STAILQ_INSERT_AFTER(dst, insert, entry, ha_next);
   1f7d4:	683a      	ldr	r2, [r7, #0]
   1f7d6:	6022      	str	r2, [r4, #0]
   1f7d8:	2a00      	cmp	r2, #0
   1f7da:	d1e9      	bne.n	1f7b0 <ble_att_svr_move_entries+0x4c>
   1f7dc:	e7e7      	b.n	1f7ae <ble_att_svr_move_entries+0x4a>
            entry = STAILQ_FIRST(src);
   1f7de:	6802      	ldr	r2, [r0, #0]
   1f7e0:	e7e9      	b.n	1f7b6 <ble_att_svr_move_entries+0x52>
        }
    }
}
   1f7e2:	bcf0      	pop	{r4, r5, r6, r7}
   1f7e4:	4770      	bx	lr
	...

0001f7e8 <ble_att_svr_entry_alloc>:
{
   1f7e8:	b508      	push	{r3, lr}
    entry = os_memblock_get(&ble_att_svr_entry_pool);
   1f7ea:	4806      	ldr	r0, [pc, #24]	; (1f804 <ble_att_svr_entry_alloc+0x1c>)
   1f7ec:	f7fa fb41 	bl	19e72 <os_memblock_get>
    if (entry != NULL) {
   1f7f0:	4603      	mov	r3, r0
   1f7f2:	b128      	cbz	r0, 1f800 <ble_att_svr_entry_alloc+0x18>
        memset(entry, 0, sizeof *entry);
   1f7f4:	2200      	movs	r2, #0
   1f7f6:	6002      	str	r2, [r0, #0]
   1f7f8:	6042      	str	r2, [r0, #4]
   1f7fa:	6082      	str	r2, [r0, #8]
   1f7fc:	60c2      	str	r2, [r0, #12]
   1f7fe:	6102      	str	r2, [r0, #16]
}
   1f800:	4618      	mov	r0, r3
   1f802:	bd08      	pop	{r3, pc}
   1f804:	1000568c 	.word	0x1000568c

0001f808 <ble_att_svr_get_sec_state>:
{
   1f808:	b538      	push	{r3, r4, r5, lr}
   1f80a:	4605      	mov	r5, r0
   1f80c:	460c      	mov	r4, r1
    ble_hs_lock();
   1f80e:	f006 fe93 	bl	26538 <ble_hs_lock>
    conn = ble_hs_conn_find_assert(conn_handle);
   1f812:	4628      	mov	r0, r5
   1f814:	f007 ff2c 	bl	27670 <ble_hs_conn_find_assert>
    *out_sec_state = conn->bhc_sec_state;
   1f818:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1f81a:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   1f81c:	f006 fe90 	bl	26540 <ble_hs_unlock>
}
   1f820:	bd38      	pop	{r3, r4, r5, pc}

0001f822 <ble_att_svr_check_perms>:
{
   1f822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f826:	b0a6      	sub	sp, #152	; 0x98
   1f828:	4605      	mov	r5, r0
   1f82a:	4614      	mov	r4, r2
   1f82c:	461e      	mov	r6, r3
    if (is_read) {
   1f82e:	b389      	cbz	r1, 1f894 <ble_att_svr_check_perms+0x72>
        if (!(entry->ha_flags & BLE_ATT_F_READ)) {
   1f830:	7a11      	ldrb	r1, [r2, #8]
   1f832:	f011 0f01 	tst.w	r1, #1
   1f836:	d029      	beq.n	1f88c <ble_att_svr_check_perms+0x6a>
        enc = entry->ha_flags & BLE_ATT_F_READ_ENC;
   1f838:	f001 0704 	and.w	r7, r1, #4
        authen = entry->ha_flags & BLE_ATT_F_READ_AUTHEN;
   1f83c:	f001 0808 	and.w	r8, r1, #8
        author = entry->ha_flags & BLE_ATT_F_READ_AUTHOR;
   1f840:	f001 0010 	and.w	r0, r1, #16
    if (!enc && !authen && !author) {
   1f844:	b91f      	cbnz	r7, 1f84e <ble_att_svr_check_perms+0x2c>
   1f846:	f1b8 0f00 	cmp.w	r8, #0
   1f84a:	d100      	bne.n	1f84e <ble_att_svr_check_perms+0x2c>
   1f84c:	b1d8      	cbz	r0, 1f886 <ble_att_svr_check_perms+0x64>
    ble_att_svr_get_sec_state(conn_handle, &sec_state);
   1f84e:	a925      	add	r1, sp, #148	; 0x94
   1f850:	4628      	mov	r0, r5
   1f852:	f7ff ffd9 	bl	1f808 <ble_att_svr_get_sec_state>
    if ((enc || authen) && !sec_state.encrypted) {
   1f856:	b917      	cbnz	r7, 1f85e <ble_att_svr_check_perms+0x3c>
   1f858:	f1b8 0f00 	cmp.w	r8, #0
   1f85c:	d004      	beq.n	1f868 <ble_att_svr_check_perms+0x46>
   1f85e:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   1f862:	f013 0f01 	tst.w	r3, #1
   1f866:	d024      	beq.n	1f8b2 <ble_att_svr_check_perms+0x90>
    if (authen && !sec_state.authenticated) {
   1f868:	f1b8 0f00 	cmp.w	r8, #0
   1f86c:	d004      	beq.n	1f878 <ble_att_svr_check_perms+0x56>
   1f86e:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   1f872:	f013 0f02 	tst.w	r3, #2
   1f876:	d050      	beq.n	1f91a <ble_att_svr_check_perms+0xf8>
    if (entry->ha_min_key_size > sec_state.key_size) {
   1f878:	7a63      	ldrb	r3, [r4, #9]
   1f87a:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
   1f87e:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
   1f882:	d84f      	bhi.n	1f924 <ble_att_svr_check_perms+0x102>
    return 0;
   1f884:	2000      	movs	r0, #0
}
   1f886:	b026      	add	sp, #152	; 0x98
   1f888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            *out_att_err = BLE_ATT_ERR_READ_NOT_PERMITTED;
   1f88c:	2302      	movs	r3, #2
   1f88e:	7033      	strb	r3, [r6, #0]
            return BLE_HS_EREJECT;
   1f890:	2010      	movs	r0, #16
   1f892:	e7f8      	b.n	1f886 <ble_att_svr_check_perms+0x64>
        if (!(entry->ha_flags & BLE_ATT_F_WRITE)) {
   1f894:	7a11      	ldrb	r1, [r2, #8]
   1f896:	f011 0f02 	tst.w	r1, #2
   1f89a:	d006      	beq.n	1f8aa <ble_att_svr_check_perms+0x88>
        enc = entry->ha_flags & BLE_ATT_F_WRITE_ENC;
   1f89c:	f001 0720 	and.w	r7, r1, #32
        authen = entry->ha_flags & BLE_ATT_F_WRITE_AUTHEN;
   1f8a0:	f001 0840 	and.w	r8, r1, #64	; 0x40
        author = entry->ha_flags & BLE_ATT_F_WRITE_AUTHOR;
   1f8a4:	f001 0080 	and.w	r0, r1, #128	; 0x80
   1f8a8:	e7cc      	b.n	1f844 <ble_att_svr_check_perms+0x22>
            *out_att_err = BLE_ATT_ERR_WRITE_NOT_PERMITTED;
   1f8aa:	2303      	movs	r3, #3
   1f8ac:	7033      	strb	r3, [r6, #0]
            return BLE_HS_EREJECT;
   1f8ae:	2010      	movs	r0, #16
   1f8b0:	e7e9      	b.n	1f886 <ble_att_svr_check_perms+0x64>
        ble_hs_lock();
   1f8b2:	f006 fe41 	bl	26538 <ble_hs_lock>
        conn = ble_hs_conn_find(conn_handle);
   1f8b6:	4628      	mov	r0, r5
   1f8b8:	f007 fec2 	bl	27640 <ble_hs_conn_find>
        if (conn != NULL) {
   1f8bc:	b1a8      	cbz	r0, 1f8ea <ble_att_svr_check_perms+0xc8>
            ble_hs_conn_addrs(conn, &addrs);
   1f8be:	a901      	add	r1, sp, #4
   1f8c0:	f007 feee 	bl	276a0 <ble_hs_conn_addrs>
            memset(&key_sec, 0, sizeof key_sec);
   1f8c4:	2300      	movs	r3, #0
   1f8c6:	9309      	str	r3, [sp, #36]	; 0x24
   1f8c8:	930a      	str	r3, [sp, #40]	; 0x28
   1f8ca:	930b      	str	r3, [sp, #44]	; 0x2c
   1f8cc:	930c      	str	r3, [sp, #48]	; 0x30
   1f8ce:	930d      	str	r3, [sp, #52]	; 0x34
   1f8d0:	930e      	str	r3, [sp, #56]	; 0x38
   1f8d2:	930f      	str	r3, [sp, #60]	; 0x3c
            key_sec.peer_addr = addrs.peer_id_addr;
   1f8d4:	f8dd 000b 	ldr.w	r0, [sp, #11]
   1f8d8:	9008      	str	r0, [sp, #32]
   1f8da:	f8bd 200f 	ldrh.w	r2, [sp, #15]
   1f8de:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1f8e2:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   1f8e6:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        ble_hs_unlock();
   1f8ea:	f006 fe29 	bl	26540 <ble_hs_unlock>
        rc = ble_store_read_peer_sec(&key_sec, &value_sec);
   1f8ee:	a910      	add	r1, sp, #64	; 0x40
   1f8f0:	a808      	add	r0, sp, #32
   1f8f2:	f009 ff2b 	bl	2974c <ble_store_read_peer_sec>
        if (rc == 0 && value_sec.ltk_present) {
   1f8f6:	b938      	cbnz	r0, 1f908 <ble_att_svr_check_perms+0xe6>
   1f8f8:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   1f8fc:	f013 0f01 	tst.w	r3, #1
   1f900:	d002      	beq.n	1f908 <ble_att_svr_check_perms+0xe6>
            *out_att_err = BLE_ATT_ERR_INSUFFICIENT_ENC;
   1f902:	230f      	movs	r3, #15
   1f904:	7033      	strb	r3, [r6, #0]
   1f906:	e001      	b.n	1f90c <ble_att_svr_check_perms+0xea>
            *out_att_err = BLE_ATT_ERR_INSUFFICIENT_AUTHEN;
   1f908:	2305      	movs	r3, #5
   1f90a:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ATT_ERR(*out_att_err);
   1f90c:	7830      	ldrb	r0, [r6, #0]
   1f90e:	b110      	cbz	r0, 1f916 <ble_att_svr_check_perms+0xf4>
   1f910:	f500 7080 	add.w	r0, r0, #256	; 0x100
   1f914:	e7b7      	b.n	1f886 <ble_att_svr_check_perms+0x64>
   1f916:	2000      	movs	r0, #0
   1f918:	e7b5      	b.n	1f886 <ble_att_svr_check_perms+0x64>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_AUTHEN;
   1f91a:	2305      	movs	r3, #5
   1f91c:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ATT_ERR(*out_att_err);
   1f91e:	f240 1005 	movw	r0, #261	; 0x105
   1f922:	e7b0      	b.n	1f886 <ble_att_svr_check_perms+0x64>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_KEY_SZ;
   1f924:	230c      	movs	r3, #12
   1f926:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ATT_ERR(*out_att_err);
   1f928:	f44f 7086 	mov.w	r0, #268	; 0x10c
   1f92c:	e7ab      	b.n	1f886 <ble_att_svr_check_perms+0x64>

0001f92e <ble_att_svr_read>:
{
   1f92e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f930:	b087      	sub	sp, #28
   1f932:	4606      	mov	r6, r0
   1f934:	460c      	mov	r4, r1
   1f936:	4615      	mov	r5, r2
   1f938:	9303      	str	r3, [sp, #12]
    att_err = 0;    /* Silence gcc warning. */
   1f93a:	2300      	movs	r3, #0
   1f93c:	f88d 3017 	strb.w	r3, [sp, #23]
    if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   1f940:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f944:	4298      	cmp	r0, r3
   1f946:	d10e      	bne.n	1f966 <ble_att_svr_read+0x38>
    rc = entry->ha_cb(conn_handle, entry->ha_handle_id,
   1f948:	68e7      	ldr	r7, [r4, #12]
   1f94a:	6923      	ldr	r3, [r4, #16]
   1f94c:	9301      	str	r3, [sp, #4]
   1f94e:	ab03      	add	r3, sp, #12
   1f950:	9300      	str	r3, [sp, #0]
   1f952:	462b      	mov	r3, r5
   1f954:	2201      	movs	r2, #1
   1f956:	8961      	ldrh	r1, [r4, #10]
   1f958:	4630      	mov	r0, r6
   1f95a:	47b8      	blx	r7
    if (rc != 0) {
   1f95c:	4603      	mov	r3, r0
   1f95e:	b960      	cbnz	r0, 1f97a <ble_att_svr_read+0x4c>
}
   1f960:	4618      	mov	r0, r3
   1f962:	b007      	add	sp, #28
   1f964:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = ble_att_svr_check_perms(conn_handle, 1, entry, &att_err);
   1f966:	f10d 0317 	add.w	r3, sp, #23
   1f96a:	460a      	mov	r2, r1
   1f96c:	2101      	movs	r1, #1
   1f96e:	f7ff ff58 	bl	1f822 <ble_att_svr_check_perms>
        if (rc != 0) {
   1f972:	4603      	mov	r3, r0
   1f974:	2800      	cmp	r0, #0
   1f976:	d0e7      	beq.n	1f948 <ble_att_svr_read+0x1a>
   1f978:	e002      	b.n	1f980 <ble_att_svr_read+0x52>
        att_err = rc;
   1f97a:	f88d 0017 	strb.w	r0, [sp, #23]
        rc = BLE_HS_EAPP;
   1f97e:	2309      	movs	r3, #9
    if (out_att_err != NULL) {
   1f980:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1f982:	2a00      	cmp	r2, #0
   1f984:	d0ec      	beq.n	1f960 <ble_att_svr_read+0x32>
        *out_att_err = att_err;
   1f986:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1f98a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1f98c:	700a      	strb	r2, [r1, #0]
   1f98e:	e7e7      	b.n	1f960 <ble_att_svr_read+0x32>

0001f990 <ble_att_svr_write>:
{
   1f990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f994:	b085      	sub	sp, #20
   1f996:	4605      	mov	r5, r0
   1f998:	460c      	mov	r4, r1
   1f99a:	4616      	mov	r6, r2
   1f99c:	4698      	mov	r8, r3
   1f99e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    uint8_t att_err = 0;
   1f9a0:	2200      	movs	r2, #0
   1f9a2:	f88d 200f 	strb.w	r2, [sp, #15]
    if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   1f9a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1f9aa:	4290      	cmp	r0, r2
   1f9ac:	d114      	bne.n	1f9d8 <ble_att_svr_write+0x48>
    rc = entry->ha_cb(conn_handle, entry->ha_handle_id,
   1f9ae:	f8d4 900c 	ldr.w	r9, [r4, #12]
   1f9b2:	6923      	ldr	r3, [r4, #16]
   1f9b4:	9301      	str	r3, [sp, #4]
   1f9b6:	f8cd 8000 	str.w	r8, [sp]
   1f9ba:	4633      	mov	r3, r6
   1f9bc:	2202      	movs	r2, #2
   1f9be:	8961      	ldrh	r1, [r4, #10]
   1f9c0:	4628      	mov	r0, r5
   1f9c2:	47c8      	blx	r9
    if (rc != 0) {
   1f9c4:	4602      	mov	r2, r0
   1f9c6:	b988      	cbnz	r0, 1f9ec <ble_att_svr_write+0x5c>
    if (out_att_err != NULL) {
   1f9c8:	b117      	cbz	r7, 1f9d0 <ble_att_svr_write+0x40>
        *out_att_err = att_err;
   1f9ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1f9ce:	703b      	strb	r3, [r7, #0]
}
   1f9d0:	4610      	mov	r0, r2
   1f9d2:	b005      	add	sp, #20
   1f9d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rc = ble_att_svr_check_perms(conn_handle, 0, entry, &att_err);
   1f9d8:	f10d 030f 	add.w	r3, sp, #15
   1f9dc:	460a      	mov	r2, r1
   1f9de:	2100      	movs	r1, #0
   1f9e0:	f7ff ff1f 	bl	1f822 <ble_att_svr_check_perms>
        if (rc != 0) {
   1f9e4:	4602      	mov	r2, r0
   1f9e6:	2800      	cmp	r0, #0
   1f9e8:	d0e1      	beq.n	1f9ae <ble_att_svr_write+0x1e>
   1f9ea:	e7ed      	b.n	1f9c8 <ble_att_svr_write+0x38>
        att_err = rc;
   1f9ec:	f88d 000f 	strb.w	r0, [sp, #15]
        rc = BLE_HS_EAPP;
   1f9f0:	2209      	movs	r2, #9
        goto done;
   1f9f2:	e7e9      	b.n	1f9c8 <ble_att_svr_write+0x38>

0001f9f4 <ble_att_svr_pullup_req_base>:
{
   1f9f4:	b510      	push	{r4, lr}
   1f9f6:	4614      	mov	r4, r2
    rc = ble_hs_mbuf_pullup_base(om, base_len);
   1f9f8:	f008 fdc4 	bl	28584 <ble_hs_mbuf_pullup_base>
    if (rc == BLE_HS_ENOMEM) {
   1f9fc:	2806      	cmp	r0, #6
   1f9fe:	d003      	beq.n	1fa08 <ble_att_svr_pullup_req_base+0x14>
        att_err = 0;
   1fa00:	2300      	movs	r3, #0
    if (out_att_err != NULL) {
   1fa02:	b104      	cbz	r4, 1fa06 <ble_att_svr_pullup_req_base+0x12>
        *out_att_err = att_err;
   1fa04:	7023      	strb	r3, [r4, #0]
}
   1fa06:	bd10      	pop	{r4, pc}
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1fa08:	2311      	movs	r3, #17
   1fa0a:	e7fa      	b.n	1fa02 <ble_att_svr_pullup_req_base+0xe>

0001fa0c <ble_att_svr_build_mtu_rsp>:
{
   1fa0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fa10:	b083      	sub	sp, #12
   1fa12:	4606      	mov	r6, r0
   1fa14:	460f      	mov	r7, r1
   1fa16:	4615      	mov	r5, r2
   1fa18:	461c      	mov	r4, r3
   1fa1a:	f04f 0800 	mov.w	r8, #0
    *att_err = 0; /* Silence unnecessary warning. */
   1fa1e:	f883 8000 	strb.w	r8, [r3]
    ble_hs_lock();
   1fa22:	f006 fd89 	bl	26538 <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, NULL, &chan);
   1fa26:	aa01      	add	r2, sp, #4
   1fa28:	4641      	mov	r1, r8
   1fa2a:	4630      	mov	r0, r6
   1fa2c:	f7ff f8e9 	bl	1ec02 <ble_att_conn_chan_find>
    if (rc == 0) {
   1fa30:	4681      	mov	r9, r0
   1fa32:	b910      	cbnz	r0, 1fa3a <ble_att_svr_build_mtu_rsp+0x2e>
        mtu = chan->my_mtu;
   1fa34:	9b01      	ldr	r3, [sp, #4]
   1fa36:	f8b3 800a 	ldrh.w	r8, [r3, #10]
    ble_hs_unlock();
   1fa3a:	f006 fd81 	bl	26540 <ble_hs_unlock>
    if (rc != 0) {
   1fa3e:	f1b9 0f00 	cmp.w	r9, #0
   1fa42:	d005      	beq.n	1fa50 <ble_att_svr_build_mtu_rsp+0x44>
    txom = NULL;
   1fa44:	2600      	movs	r6, #0
    *out_txom = txom;
   1fa46:	602e      	str	r6, [r5, #0]
}
   1fa48:	4648      	mov	r0, r9
   1fa4a:	b003      	add	sp, #12
   1fa4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    txom = *rxom;
   1fa50:	683e      	ldr	r6, [r7, #0]
    *rxom = NULL;
   1fa52:	2300      	movs	r3, #0
   1fa54:	603b      	str	r3, [r7, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1fa56:	8a31      	ldrh	r1, [r6, #16]
   1fa58:	4630      	mov	r0, r6
   1fa5a:	f7f9 fea6 	bl	197aa <os_mbuf_adj>
    cmd = ble_att_cmd_prepare(BLE_ATT_OP_MTU_RSP, sizeof(*cmd), txom);
   1fa5e:	4632      	mov	r2, r6
   1fa60:	2102      	movs	r1, #2
   1fa62:	2003      	movs	r0, #3
   1fa64:	f7ff fdef 	bl	1f646 <ble_att_cmd_prepare>
    if (cmd == NULL) {
   1fa68:	b110      	cbz	r0, 1fa70 <ble_att_svr_build_mtu_rsp+0x64>
    cmd->bamc_mtu = htole16(mtu);
   1fa6a:	f8a0 8000 	strh.w	r8, [r0]
    rc = 0;
   1fa6e:	e7ea      	b.n	1fa46 <ble_att_svr_build_mtu_rsp+0x3a>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1fa70:	2311      	movs	r3, #17
   1fa72:	7023      	strb	r3, [r4, #0]
        rc = BLE_HS_ENOMEM;
   1fa74:	f04f 0906 	mov.w	r9, #6
        goto done;
   1fa78:	e7e5      	b.n	1fa46 <ble_att_svr_build_mtu_rsp+0x3a>

0001fa7a <ble_att_svr_pkt>:
{
   1fa7a:	b570      	push	{r4, r5, r6, lr}
   1fa7c:	4606      	mov	r6, r0
   1fa7e:	460c      	mov	r4, r1
   1fa80:	4615      	mov	r5, r2
    *out_txom = ble_hs_mbuf_l2cap_pkt();
   1fa82:	f008 fd4c 	bl	2851e <ble_hs_mbuf_l2cap_pkt>
   1fa86:	6020      	str	r0, [r4, #0]
    if (*out_txom != NULL) {
   1fa88:	b108      	cbz	r0, 1fa8e <ble_att_svr_pkt+0x14>
        return 0;
   1fa8a:	2000      	movs	r0, #0
}
   1fa8c:	bd70      	pop	{r4, r5, r6, pc}
    *out_txom = *rxom;
   1fa8e:	6833      	ldr	r3, [r6, #0]
   1fa90:	6023      	str	r3, [r4, #0]
    *rxom = NULL;
   1fa92:	2300      	movs	r3, #0
   1fa94:	6033      	str	r3, [r6, #0]
    *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1fa96:	2311      	movs	r3, #17
   1fa98:	702b      	strb	r3, [r5, #0]
    return BLE_HS_ENOMEM;
   1fa9a:	2006      	movs	r0, #6
   1fa9c:	e7f6      	b.n	1fa8c <ble_att_svr_pkt+0x12>

0001fa9e <ble_att_svr_build_write_rsp>:
{
   1fa9e:	b570      	push	{r4, r5, r6, lr}
   1faa0:	b082      	sub	sp, #8
   1faa2:	460c      	mov	r4, r1
   1faa4:	4615      	mov	r5, r2
    rc = ble_att_svr_pkt(rxom, &txom, att_err);
   1faa6:	a901      	add	r1, sp, #4
   1faa8:	f7ff ffe7 	bl	1fa7a <ble_att_svr_pkt>
    if (rc != 0) {
   1faac:	4606      	mov	r6, r0
   1faae:	b120      	cbz	r0, 1faba <ble_att_svr_build_write_rsp+0x1c>
    *out_txom = txom;
   1fab0:	9b01      	ldr	r3, [sp, #4]
   1fab2:	6023      	str	r3, [r4, #0]
}
   1fab4:	4630      	mov	r0, r6
   1fab6:	b002      	add	sp, #8
   1fab8:	bd70      	pop	{r4, r5, r6, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_WRITE_RSP, 0, txom) == NULL) {
   1faba:	9a01      	ldr	r2, [sp, #4]
   1fabc:	2100      	movs	r1, #0
   1fabe:	2013      	movs	r0, #19
   1fac0:	f7ff fdc1 	bl	1f646 <ble_att_cmd_prepare>
   1fac4:	2800      	cmp	r0, #0
   1fac6:	d1f3      	bne.n	1fab0 <ble_att_svr_build_write_rsp+0x12>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1fac8:	2311      	movs	r3, #17
   1faca:	702b      	strb	r3, [r5, #0]
        rc = BLE_HS_ENOMEM;
   1facc:	2606      	movs	r6, #6
        goto done;
   1face:	e7ef      	b.n	1fab0 <ble_att_svr_build_write_rsp+0x12>

0001fad0 <ble_att_svr_build_indicate_rsp>:
{
   1fad0:	b570      	push	{r4, r5, r6, lr}
   1fad2:	b082      	sub	sp, #8
   1fad4:	460c      	mov	r4, r1
   1fad6:	4615      	mov	r5, r2
    rc = ble_att_svr_pkt(rxom, &txom, out_att_err);
   1fad8:	a901      	add	r1, sp, #4
   1fada:	f7ff ffce 	bl	1fa7a <ble_att_svr_pkt>
    if (rc != 0) {
   1fade:	4606      	mov	r6, r0
   1fae0:	b120      	cbz	r0, 1faec <ble_att_svr_build_indicate_rsp+0x1c>
    *out_txom = txom;
   1fae2:	9b01      	ldr	r3, [sp, #4]
   1fae4:	6023      	str	r3, [r4, #0]
}
   1fae6:	4630      	mov	r0, r6
   1fae8:	b002      	add	sp, #8
   1faea:	bd70      	pop	{r4, r5, r6, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_INDICATE_RSP, 0, txom) == NULL) {
   1faec:	9a01      	ldr	r2, [sp, #4]
   1faee:	2100      	movs	r1, #0
   1faf0:	201e      	movs	r0, #30
   1faf2:	f7ff fda8 	bl	1f646 <ble_att_cmd_prepare>
   1faf6:	2800      	cmp	r0, #0
   1faf8:	d1f3      	bne.n	1fae2 <ble_att_svr_build_indicate_rsp+0x12>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1fafa:	2311      	movs	r3, #17
   1fafc:	702b      	strb	r3, [r5, #0]
        rc = BLE_HS_ENOMEM;
   1fafe:	2606      	movs	r6, #6
        goto done;
   1fb00:	e7ef      	b.n	1fae2 <ble_att_svr_build_indicate_rsp+0x12>
	...

0001fb04 <ble_att_svr_fill_info>:
{
   1fb04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb08:	4680      	mov	r8, r0
   1fb0a:	460f      	mov	r7, r1
   1fb0c:	4691      	mov	r9, r2
   1fb0e:	469b      	mov	fp, r3
   1fb10:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    *format = 0;
   1fb14:	2600      	movs	r6, #0
   1fb16:	f88a 6000 	strb.w	r6, [sl]
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1fb1a:	4b20      	ldr	r3, [pc, #128]	; (1fb9c <ble_att_svr_fill_info+0x98>)
   1fb1c:	681c      	ldr	r4, [r3, #0]
   1fb1e:	e021      	b.n	1fb64 <ble_att_svr_fill_info+0x60>
                if (*format == 0) {
   1fb20:	f89a 3000 	ldrb.w	r3, [sl]
   1fb24:	b923      	cbnz	r3, 1fb30 <ble_att_svr_fill_info+0x2c>
                    *format = BLE_ATT_FIND_INFO_RSP_FORMAT_16BIT;
   1fb26:	2301      	movs	r3, #1
   1fb28:	f88a 3000 	strb.w	r3, [sl]
                entry_sz = 4;
   1fb2c:	2104      	movs	r1, #4
   1fb2e:	e006      	b.n	1fb3e <ble_att_svr_fill_info+0x3a>
                } else if (*format != BLE_ATT_FIND_INFO_RSP_FORMAT_16BIT) {
   1fb30:	2b01      	cmp	r3, #1
   1fb32:	d12a      	bne.n	1fb8a <ble_att_svr_fill_info+0x86>
                entry_sz = 4;
   1fb34:	2104      	movs	r1, #4
   1fb36:	e002      	b.n	1fb3e <ble_att_svr_fill_info+0x3a>
                } else if (*format != BLE_ATT_FIND_INFO_RSP_FORMAT_128BIT) {
   1fb38:	2b02      	cmp	r3, #2
   1fb3a:	d126      	bne.n	1fb8a <ble_att_svr_fill_info+0x86>
                entry_sz = 18;
   1fb3c:	2112      	movs	r1, #18
            if (OS_MBUF_PKTLEN(om) + entry_sz > mtu) {
   1fb3e:	f8b9 3010 	ldrh.w	r3, [r9, #16]
   1fb42:	440b      	add	r3, r1
   1fb44:	455b      	cmp	r3, fp
   1fb46:	dc20      	bgt.n	1fb8a <ble_att_svr_fill_info+0x86>
            buf = os_mbuf_extend(om, entry_sz);
   1fb48:	4648      	mov	r0, r9
   1fb4a:	f7f9 ffe3 	bl	19b14 <os_mbuf_extend>
            if (buf == NULL) {
   1fb4e:	4605      	mov	r5, r0
   1fb50:	b1f8      	cbz	r0, 1fb92 <ble_att_svr_fill_info+0x8e>
            put_le16(buf + 0, ha->ha_handle_id);
   1fb52:	8961      	ldrh	r1, [r4, #10]
   1fb54:	f7f9 f954 	bl	18e00 <put_le16>
            ble_uuid_flat(ha->ha_uuid, buf + 2);
   1fb58:	1ca9      	adds	r1, r5, #2
   1fb5a:	6860      	ldr	r0, [r4, #4]
   1fb5c:	f009 ffec 	bl	29b38 <ble_uuid_flat>
            num_entries++;
   1fb60:	3601      	adds	r6, #1
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1fb62:	6824      	ldr	r4, [r4, #0]
   1fb64:	b18c      	cbz	r4, 1fb8a <ble_att_svr_fill_info+0x86>
        if (ha->ha_handle_id > end_handle) {
   1fb66:	8965      	ldrh	r5, [r4, #10]
   1fb68:	42bd      	cmp	r5, r7
   1fb6a:	d80e      	bhi.n	1fb8a <ble_att_svr_fill_info+0x86>
        if (ha->ha_handle_id >= start_handle) {
   1fb6c:	4545      	cmp	r5, r8
   1fb6e:	d3f8      	bcc.n	1fb62 <ble_att_svr_fill_info+0x5e>
            if (ha->ha_uuid->type == BLE_UUID_TYPE_16) {
   1fb70:	6863      	ldr	r3, [r4, #4]
   1fb72:	781b      	ldrb	r3, [r3, #0]
   1fb74:	2b10      	cmp	r3, #16
   1fb76:	d0d3      	beq.n	1fb20 <ble_att_svr_fill_info+0x1c>
                if (*format == 0) {
   1fb78:	f89a 3000 	ldrb.w	r3, [sl]
   1fb7c:	2b00      	cmp	r3, #0
   1fb7e:	d1db      	bne.n	1fb38 <ble_att_svr_fill_info+0x34>
                    *format = BLE_ATT_FIND_INFO_RSP_FORMAT_128BIT;
   1fb80:	2302      	movs	r3, #2
   1fb82:	f88a 3000 	strb.w	r3, [sl]
                entry_sz = 18;
   1fb86:	2112      	movs	r1, #18
   1fb88:	e7d9      	b.n	1fb3e <ble_att_svr_fill_info+0x3a>
    if (rc == 0 && num_entries == 0) {
   1fb8a:	b126      	cbz	r6, 1fb96 <ble_att_svr_fill_info+0x92>
   1fb8c:	2000      	movs	r0, #0
}
   1fb8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                rc = BLE_HS_ENOMEM;
   1fb92:	2006      	movs	r0, #6
        return rc;
   1fb94:	e7fb      	b.n	1fb8e <ble_att_svr_fill_info+0x8a>
        return BLE_HS_ENOENT;
   1fb96:	2005      	movs	r0, #5
   1fb98:	e7f9      	b.n	1fb8e <ble_att_svr_fill_info+0x8a>
   1fb9a:	bf00      	nop
   1fb9c:	100056b4 	.word	0x100056b4

0001fba0 <ble_att_svr_build_find_info_rsp>:
{
   1fba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fba4:	b082      	sub	sp, #8
   1fba6:	4606      	mov	r6, r0
   1fba8:	460d      	mov	r5, r1
   1fbaa:	4617      	mov	r7, r2
    txom = *rxom;
   1fbac:	681c      	ldr	r4, [r3, #0]
    *rxom = NULL;
   1fbae:	2100      	movs	r1, #0
   1fbb0:	6019      	str	r1, [r3, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1fbb2:	8a21      	ldrh	r1, [r4, #16]
   1fbb4:	4620      	mov	r0, r4
   1fbb6:	f7f9 fdf8 	bl	197aa <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_FIND_INFO_RSP, sizeof(*rsp), txom);
   1fbba:	4622      	mov	r2, r4
   1fbbc:	2101      	movs	r1, #1
   1fbbe:	2005      	movs	r0, #5
   1fbc0:	f7ff fd41 	bl	1f646 <ble_att_cmd_prepare>
    if (rsp == NULL) {
   1fbc4:	b188      	cbz	r0, 1fbea <ble_att_svr_build_find_info_rsp+0x4a>
   1fbc6:	4680      	mov	r8, r0
    mtu = ble_att_mtu(conn_handle);
   1fbc8:	4630      	mov	r0, r6
   1fbca:	f7ff f940 	bl	1ee4e <ble_att_mtu>
   1fbce:	4603      	mov	r3, r0
    rc = ble_att_svr_fill_info(start_handle, end_handle, txom, mtu,
   1fbd0:	f8cd 8000 	str.w	r8, [sp]
   1fbd4:	4622      	mov	r2, r4
   1fbd6:	4639      	mov	r1, r7
   1fbd8:	4628      	mov	r0, r5
   1fbda:	f7ff ff93 	bl	1fb04 <ble_att_svr_fill_info>
    if (rc != 0) {
   1fbde:	b948      	cbnz	r0, 1fbf4 <ble_att_svr_build_find_info_rsp+0x54>
    *out_txom = txom;
   1fbe0:	9b08      	ldr	r3, [sp, #32]
   1fbe2:	601c      	str	r4, [r3, #0]
}
   1fbe4:	b002      	add	sp, #8
   1fbe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1fbea:	2311      	movs	r3, #17
   1fbec:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1fbee:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   1fbf0:	2006      	movs	r0, #6
        goto done;
   1fbf2:	e7f5      	b.n	1fbe0 <ble_att_svr_build_find_info_rsp+0x40>
        *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   1fbf4:	230a      	movs	r3, #10
   1fbf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1fbf8:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOENT;
   1fbfa:	2005      	movs	r0, #5
        goto done;
   1fbfc:	e7f0      	b.n	1fbe0 <ble_att_svr_build_find_info_rsp+0x40>

0001fbfe <ble_att_svr_read_group_type_entry_write>:
{
   1fbfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fc02:	460c      	mov	r4, r1
   1fc04:	4617      	mov	r7, r2
   1fc06:	461e      	mov	r6, r3
   1fc08:	f8dd 8018 	ldr.w	r8, [sp, #24]
    if (service_uuid->type == BLE_UUID_TYPE_16) {
   1fc0c:	f898 3000 	ldrb.w	r3, [r8]
   1fc10:	2b10      	cmp	r3, #16
   1fc12:	d016      	beq.n	1fc42 <ble_att_svr_read_group_type_entry_write+0x44>
        len = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_128;
   1fc14:	2114      	movs	r1, #20
    if (OS_MBUF_PKTLEN(om) + len > mtu) {
   1fc16:	8a05      	ldrh	r5, [r0, #16]
   1fc18:	440d      	add	r5, r1
   1fc1a:	42a5      	cmp	r5, r4
   1fc1c:	dc13      	bgt.n	1fc46 <ble_att_svr_read_group_type_entry_write+0x48>
    buf = os_mbuf_extend(om, len);
   1fc1e:	f7f9 ff79 	bl	19b14 <os_mbuf_extend>
    if (buf == NULL) {
   1fc22:	4604      	mov	r4, r0
   1fc24:	b188      	cbz	r0, 1fc4a <ble_att_svr_read_group_type_entry_write+0x4c>
    put_le16(buf + 0, start_group_handle);
   1fc26:	4639      	mov	r1, r7
   1fc28:	f7f9 f8ea 	bl	18e00 <put_le16>
    put_le16(buf + 2, end_group_handle);
   1fc2c:	4631      	mov	r1, r6
   1fc2e:	1ca0      	adds	r0, r4, #2
   1fc30:	f7f9 f8e6 	bl	18e00 <put_le16>
    ble_uuid_flat(service_uuid, buf + 4);
   1fc34:	1d21      	adds	r1, r4, #4
   1fc36:	4640      	mov	r0, r8
   1fc38:	f009 ff7e 	bl	29b38 <ble_uuid_flat>
    return 0;
   1fc3c:	2000      	movs	r0, #0
}
   1fc3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        len = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_16;
   1fc42:	2106      	movs	r1, #6
   1fc44:	e7e7      	b.n	1fc16 <ble_att_svr_read_group_type_entry_write+0x18>
        return BLE_HS_EMSGSIZE;
   1fc46:	2004      	movs	r0, #4
   1fc48:	e7f9      	b.n	1fc3e <ble_att_svr_read_group_type_entry_write+0x40>
        return BLE_HS_ENOMEM;
   1fc4a:	2006      	movs	r0, #6
   1fc4c:	e7f7      	b.n	1fc3e <ble_att_svr_read_group_type_entry_write+0x40>

0001fc4e <ble_att_svr_is_valid_find_group_type>:
{
   1fc4e:	b508      	push	{r3, lr}
    uuid16 = ble_uuid_u16(uuid);
   1fc50:	f009 ff16 	bl	29a80 <ble_uuid_u16>
    return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   1fc54:	f5a0 5320 	sub.w	r3, r0, #10240	; 0x2800
   1fc58:	b29b      	uxth	r3, r3
           uuid16 == BLE_ATT_UUID_SECONDARY_SERVICE ||
   1fc5a:	2b01      	cmp	r3, #1
   1fc5c:	d907      	bls.n	1fc6e <ble_att_svr_is_valid_find_group_type+0x20>
   1fc5e:	f642 0303 	movw	r3, #10243	; 0x2803
   1fc62:	4298      	cmp	r0, r3
   1fc64:	d001      	beq.n	1fc6a <ble_att_svr_is_valid_find_group_type+0x1c>
   1fc66:	2000      	movs	r0, #0
   1fc68:	e002      	b.n	1fc70 <ble_att_svr_is_valid_find_group_type+0x22>
   1fc6a:	2001      	movs	r0, #1
   1fc6c:	e000      	b.n	1fc70 <ble_att_svr_is_valid_find_group_type+0x22>
   1fc6e:	2001      	movs	r0, #1
}
   1fc70:	bd08      	pop	{r3, pc}

0001fc72 <ble_att_svr_is_valid_group_end>:
    if (uuid_group->type != BLE_UUID_TYPE_16) {
   1fc72:	7803      	ldrb	r3, [r0, #0]
   1fc74:	2b10      	cmp	r3, #16
   1fc76:	d126      	bne.n	1fcc6 <ble_att_svr_is_valid_group_end+0x54>
{
   1fc78:	b510      	push	{r4, lr}
   1fc7a:	460c      	mov	r4, r1
    if (uuid->type != BLE_UUID_TYPE_16) {
   1fc7c:	780b      	ldrb	r3, [r1, #0]
   1fc7e:	2b10      	cmp	r3, #16
   1fc80:	d001      	beq.n	1fc86 <ble_att_svr_is_valid_group_end+0x14>
        return 0;
   1fc82:	2000      	movs	r0, #0
}
   1fc84:	bd10      	pop	{r4, pc}
    switch (ble_uuid_u16(uuid_group)) {
   1fc86:	f009 fefb 	bl	29a80 <ble_uuid_u16>
   1fc8a:	f642 0301 	movw	r3, #10241	; 0x2801
   1fc8e:	4298      	cmp	r0, r3
   1fc90:	d907      	bls.n	1fca2 <ble_att_svr_is_valid_group_end+0x30>
   1fc92:	f642 0303 	movw	r3, #10243	; 0x2803
   1fc96:	4298      	cmp	r0, r3
   1fc98:	d108      	bne.n	1fcac <ble_att_svr_is_valid_group_end+0x3a>
        return ble_att_svr_is_valid_find_group_type(uuid);
   1fc9a:	4620      	mov	r0, r4
   1fc9c:	f7ff ffd7 	bl	1fc4e <ble_att_svr_is_valid_find_group_type>
   1fca0:	e7f0      	b.n	1fc84 <ble_att_svr_is_valid_group_end+0x12>
    switch (ble_uuid_u16(uuid_group)) {
   1fca2:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
   1fca6:	d203      	bcs.n	1fcb0 <ble_att_svr_is_valid_group_end+0x3e>
   1fca8:	2001      	movs	r0, #1
   1fcaa:	e7eb      	b.n	1fc84 <ble_att_svr_is_valid_group_end+0x12>
   1fcac:	2001      	movs	r0, #1
   1fcae:	e7e9      	b.n	1fc84 <ble_att_svr_is_valid_group_end+0x12>
        uuid16 = ble_uuid_u16(uuid);
   1fcb0:	4620      	mov	r0, r4
   1fcb2:	f009 fee5 	bl	29a80 <ble_uuid_u16>
        return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   1fcb6:	f5a0 5020 	sub.w	r0, r0, #10240	; 0x2800
   1fcba:	b280      	uxth	r0, r0
   1fcbc:	2801      	cmp	r0, #1
   1fcbe:	bf8c      	ite	hi
   1fcc0:	2000      	movhi	r0, #0
   1fcc2:	2001      	movls	r0, #1
   1fcc4:	e7de      	b.n	1fc84 <ble_att_svr_is_valid_group_end+0x12>
        return 1;
   1fcc6:	2001      	movs	r0, #1
}
   1fcc8:	4770      	bx	lr

0001fcca <ble_att_svr_is_valid_read_group_type>:
{
   1fcca:	b508      	push	{r3, lr}
    uuid16 = ble_uuid_u16(uuid);
   1fccc:	f009 fed8 	bl	29a80 <ble_uuid_u16>
    return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   1fcd0:	f5a0 5020 	sub.w	r0, r0, #10240	; 0x2800
   1fcd4:	b280      	uxth	r0, r0
}
   1fcd6:	2801      	cmp	r0, #1
   1fcd8:	bf8c      	ite	hi
   1fcda:	2000      	movhi	r0, #0
   1fcdc:	2001      	movls	r0, #1
   1fcde:	bd08      	pop	{r3, pc}

0001fce0 <ble_att_svr_read_flat>:
{
   1fce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fce4:	b082      	sub	sp, #8
   1fce6:	4604      	mov	r4, r0
   1fce8:	460d      	mov	r5, r1
   1fcea:	4616      	mov	r6, r2
   1fcec:	4698      	mov	r8, r3
    om = ble_hs_mbuf_l2cap_pkt();
   1fcee:	f008 fc16 	bl	2851e <ble_hs_mbuf_l2cap_pkt>
    if (om == NULL) {
   1fcf2:	4607      	mov	r7, r0
   1fcf4:	b300      	cbz	r0, 1fd38 <ble_att_svr_read_flat+0x58>
    rc = ble_att_svr_read(conn_handle, entry, offset, om, out_att_err);
   1fcf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fcf8:	9300      	str	r3, [sp, #0]
   1fcfa:	4603      	mov	r3, r0
   1fcfc:	4632      	mov	r2, r6
   1fcfe:	4629      	mov	r1, r5
   1fd00:	4620      	mov	r0, r4
   1fd02:	f7ff fe14 	bl	1f92e <ble_att_svr_read>
    if (rc != 0) {
   1fd06:	4604      	mov	r4, r0
   1fd08:	b950      	cbnz	r0, 1fd20 <ble_att_svr_read_flat+0x40>
    len = OS_MBUF_PKTLEN(om);
   1fd0a:	8a3d      	ldrh	r5, [r7, #16]
    if (len > max_len) {
   1fd0c:	4545      	cmp	r5, r8
   1fd0e:	d80e      	bhi.n	1fd2e <ble_att_svr_read_flat+0x4e>
    rc = os_mbuf_copydata(om, 0, len, dst);
   1fd10:	9b08      	ldr	r3, [sp, #32]
   1fd12:	462a      	mov	r2, r5
   1fd14:	2100      	movs	r1, #0
   1fd16:	4638      	mov	r0, r7
   1fd18:	f7f9 fd1a 	bl	19750 <os_mbuf_copydata>
    *out_len = len;
   1fd1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fd1e:	801d      	strh	r5, [r3, #0]
    os_mbuf_free_chain(om);
   1fd20:	4638      	mov	r0, r7
   1fd22:	f7f9 fc74 	bl	1960e <os_mbuf_free_chain>
}
   1fd26:	4620      	mov	r0, r4
   1fd28:	b002      	add	sp, #8
   1fd2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *out_att_err = BLE_ATT_ERR_UNLIKELY;
   1fd2e:	230e      	movs	r3, #14
   1fd30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1fd32:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_EMSGSIZE;
   1fd34:	2404      	movs	r4, #4
        goto done;
   1fd36:	e7f3      	b.n	1fd20 <ble_att_svr_read_flat+0x40>
        rc = BLE_HS_ENOMEM;
   1fd38:	2406      	movs	r4, #6
   1fd3a:	e7f1      	b.n	1fd20 <ble_att_svr_read_flat+0x40>

0001fd3c <ble_att_svr_fill_type_value_entry>:
{
   1fd3c:	b530      	push	{r4, r5, lr}
   1fd3e:	b083      	sub	sp, #12
   1fd40:	4604      	mov	r4, r0
    rsp_sz = OS_MBUF_PKTHDR(om)->omp_len + 4;
   1fd42:	8a00      	ldrh	r0, [r0, #16]
   1fd44:	3004      	adds	r0, #4
    if (rsp_sz > mtu) {
   1fd46:	4298      	cmp	r0, r3
   1fd48:	dd02      	ble.n	1fd50 <ble_att_svr_fill_type_value_entry+0x14>
        return 0;
   1fd4a:	2000      	movs	r0, #0
}
   1fd4c:	b003      	add	sp, #12
   1fd4e:	bd30      	pop	{r4, r5, pc}
   1fd50:	4615      	mov	r5, r2
    put_le16(&u16, first);
   1fd52:	f10d 0006 	add.w	r0, sp, #6
   1fd56:	f7f9 f853 	bl	18e00 <put_le16>
    rc = os_mbuf_append(om, &u16, 2);
   1fd5a:	2202      	movs	r2, #2
   1fd5c:	f10d 0106 	add.w	r1, sp, #6
   1fd60:	4620      	mov	r0, r4
   1fd62:	f7f9 fc64 	bl	1962e <os_mbuf_append>
    if (rc != 0) {
   1fd66:	b968      	cbnz	r0, 1fd84 <ble_att_svr_fill_type_value_entry+0x48>
    put_le16(&u16, last);
   1fd68:	4629      	mov	r1, r5
   1fd6a:	f10d 0006 	add.w	r0, sp, #6
   1fd6e:	f7f9 f847 	bl	18e00 <put_le16>
    rc = os_mbuf_append(om, &u16, 2);
   1fd72:	2202      	movs	r2, #2
   1fd74:	f10d 0106 	add.w	r1, sp, #6
   1fd78:	4620      	mov	r0, r4
   1fd7a:	f7f9 fc58 	bl	1962e <os_mbuf_append>
    if (rc != 0) {
   1fd7e:	b930      	cbnz	r0, 1fd8e <ble_att_svr_fill_type_value_entry+0x52>
    return BLE_HS_EAGAIN;
   1fd80:	2001      	movs	r0, #1
   1fd82:	e7e3      	b.n	1fd4c <ble_att_svr_fill_type_value_entry+0x10>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1fd84:	2311      	movs	r3, #17
   1fd86:	9a06      	ldr	r2, [sp, #24]
   1fd88:	7013      	strb	r3, [r2, #0]
        return BLE_HS_ENOMEM;
   1fd8a:	2006      	movs	r0, #6
   1fd8c:	e7de      	b.n	1fd4c <ble_att_svr_fill_type_value_entry+0x10>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1fd8e:	2311      	movs	r3, #17
   1fd90:	9a06      	ldr	r2, [sp, #24]
   1fd92:	7013      	strb	r3, [r2, #0]
        return BLE_HS_ENOMEM;
   1fd94:	2006      	movs	r0, #6
   1fd96:	e7d9      	b.n	1fd4c <ble_att_svr_fill_type_value_entry+0x10>

0001fd98 <ble_att_svr_fill_type_value>:
{
   1fd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd9c:	b08d      	sub	sp, #52	; 0x34
   1fd9e:	4682      	mov	sl, r0
   1fda0:	460e      	mov	r6, r1
   1fda2:	4690      	mov	r8, r2
   1fda4:	9305      	str	r3, [sp, #20]
   1fda6:	f8bd b060 	ldrh.w	fp, [sp, #96]	; 0x60
   1fdaa:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1fdae:	4b33      	ldr	r3, [pc, #204]	; (1fe7c <ble_att_svr_fill_type_value+0xe4>)
   1fdb0:	681c      	ldr	r4, [r3, #0]
    prev = 0;
   1fdb2:	2700      	movs	r7, #0
    first = 0;
   1fdb4:	463d      	mov	r5, r7
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1fdb6:	e015      	b.n	1fde4 <ble_att_svr_fill_type_value+0x4c>
            rc = ble_att_svr_fill_type_value_entry(txom, first, prev, mtu,
   1fdb8:	f8cd 9000 	str.w	r9, [sp]
   1fdbc:	465b      	mov	r3, fp
   1fdbe:	463a      	mov	r2, r7
   1fdc0:	4629      	mov	r1, r5
   1fdc2:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1fdc4:	f7ff ffba 	bl	1fd3c <ble_att_svr_fill_type_value_entry>
   1fdc8:	4603      	mov	r3, r0
            if (rc != BLE_HS_EAGAIN) {
   1fdca:	2801      	cmp	r0, #1
   1fdcc:	d13a      	bne.n	1fe44 <ble_att_svr_fill_type_value+0xac>
            if (ha->ha_handle_id > end_handle) {
   1fdce:	8963      	ldrh	r3, [r4, #10]
   1fdd0:	4543      	cmp	r3, r8
   1fdd2:	d833      	bhi.n	1fe3c <ble_att_svr_fill_type_value+0xa4>
            prev = 0;
   1fdd4:	2700      	movs	r7, #0
            first = 0;
   1fdd6:	463d      	mov	r5, r7
        if (ble_uuid_cmp(ha->ha_uuid, &attr_type.u) == 0) {
   1fdd8:	a905      	add	r1, sp, #20
   1fdda:	6860      	ldr	r0, [r4, #4]
   1fddc:	f009 fddd 	bl	2999a <ble_uuid_cmp>
   1fde0:	b188      	cbz	r0, 1fe06 <ble_att_svr_fill_type_value+0x6e>
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1fde2:	6824      	ldr	r4, [r4, #0]
   1fde4:	b364      	cbz	r4, 1fe40 <ble_att_svr_fill_type_value+0xa8>
        if (ha->ha_handle_id < start_handle) {
   1fde6:	8963      	ldrh	r3, [r4, #10]
   1fde8:	42b3      	cmp	r3, r6
   1fdea:	d3fa      	bcc.n	1fde2 <ble_att_svr_fill_type_value+0x4a>
        if (!first && ha->ha_handle_id > end_handle) {
   1fdec:	b90d      	cbnz	r5, 1fdf2 <ble_att_svr_fill_type_value+0x5a>
   1fdee:	4543      	cmp	r3, r8
   1fdf0:	d826      	bhi.n	1fe40 <ble_att_svr_fill_type_value+0xa8>
        if (first) {
   1fdf2:	2d00      	cmp	r5, #0
   1fdf4:	d0f0      	beq.n	1fdd8 <ble_att_svr_fill_type_value+0x40>
            if (!ble_att_svr_is_valid_group_end(&attr_type.u, ha->ha_uuid)) {
   1fdf6:	6861      	ldr	r1, [r4, #4]
   1fdf8:	a805      	add	r0, sp, #20
   1fdfa:	f7ff ff3a 	bl	1fc72 <ble_att_svr_is_valid_group_end>
   1fdfe:	2800      	cmp	r0, #0
   1fe00:	d1da      	bne.n	1fdb8 <ble_att_svr_fill_type_value+0x20>
                prev = ha->ha_handle_id;
   1fe02:	8967      	ldrh	r7, [r4, #10]
                continue;
   1fe04:	e7ed      	b.n	1fde2 <ble_att_svr_fill_type_value+0x4a>
            rc = ble_att_svr_read_flat(conn_handle, ha, 0, sizeof buf, buf,
   1fe06:	f8cd 9008 	str.w	r9, [sp, #8]
   1fe0a:	f10d 031e 	add.w	r3, sp, #30
   1fe0e:	9301      	str	r3, [sp, #4]
   1fe10:	ab08      	add	r3, sp, #32
   1fe12:	9300      	str	r3, [sp, #0]
   1fe14:	2310      	movs	r3, #16
   1fe16:	2200      	movs	r2, #0
   1fe18:	4621      	mov	r1, r4
   1fe1a:	4650      	mov	r0, sl
   1fe1c:	f7ff ff60 	bl	1fce0 <ble_att_svr_read_flat>
            if (rc != 0) {
   1fe20:	4603      	mov	r3, r0
   1fe22:	b978      	cbnz	r0, 1fe44 <ble_att_svr_fill_type_value+0xac>
            rc = os_mbuf_cmpf(rxom, sizeof(struct ble_att_find_type_value_req),
   1fe24:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1fe28:	aa08      	add	r2, sp, #32
   1fe2a:	2106      	movs	r1, #6
   1fe2c:	9816      	ldr	r0, [sp, #88]	; 0x58
   1fe2e:	f7f9 fd0d 	bl	1984c <os_mbuf_cmpf>
            if (rc == 0) {
   1fe32:	2800      	cmp	r0, #0
   1fe34:	d1d5      	bne.n	1fde2 <ble_att_svr_fill_type_value+0x4a>
                first = ha->ha_handle_id;
   1fe36:	8965      	ldrh	r5, [r4, #10]
                prev = ha->ha_handle_id;
   1fe38:	462f      	mov	r7, r5
   1fe3a:	e7d2      	b.n	1fde2 <ble_att_svr_fill_type_value+0x4a>
            prev = 0;
   1fe3c:	2700      	movs	r7, #0
            first = 0;
   1fe3e:	463d      	mov	r5, r7
    if (first) {
   1fe40:	b94d      	cbnz	r5, 1fe56 <ble_att_svr_fill_type_value+0xbe>
        rc = 0;
   1fe42:	2300      	movs	r3, #0
    any_entries = OS_MBUF_PKTHDR(txom)->omp_len >
   1fe44:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1fe46:	8a12      	ldrh	r2, [r2, #16]
    if (rc == 0 && !any_entries) {
   1fe48:	b90b      	cbnz	r3, 1fe4e <ble_att_svr_fill_type_value+0xb6>
   1fe4a:	2a01      	cmp	r2, #1
   1fe4c:	d910      	bls.n	1fe70 <ble_att_svr_fill_type_value+0xd8>
}
   1fe4e:	4618      	mov	r0, r3
   1fe50:	b00d      	add	sp, #52	; 0x34
   1fe52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = ble_att_svr_fill_type_value_entry(txom, first, prev, mtu,
   1fe56:	f8cd 9000 	str.w	r9, [sp]
   1fe5a:	465b      	mov	r3, fp
   1fe5c:	463a      	mov	r2, r7
   1fe5e:	4629      	mov	r1, r5
   1fe60:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1fe62:	f7ff ff6b 	bl	1fd3c <ble_att_svr_fill_type_value_entry>
   1fe66:	4603      	mov	r3, r0
        if (rc == BLE_HS_EAGAIN) {
   1fe68:	2801      	cmp	r0, #1
   1fe6a:	d1eb      	bne.n	1fe44 <ble_att_svr_fill_type_value+0xac>
            rc = 0;
   1fe6c:	2300      	movs	r3, #0
   1fe6e:	e7e9      	b.n	1fe44 <ble_att_svr_fill_type_value+0xac>
        *out_att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   1fe70:	230a      	movs	r3, #10
   1fe72:	f889 3000 	strb.w	r3, [r9]
        return BLE_HS_ENOENT;
   1fe76:	2305      	movs	r3, #5
   1fe78:	e7e9      	b.n	1fe4e <ble_att_svr_fill_type_value+0xb6>
   1fe7a:	bf00      	nop
   1fe7c:	100056b4 	.word	0x100056b4

0001fe80 <ble_att_svr_build_find_type_value_rsp>:
{
   1fe80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fe84:	b088      	sub	sp, #32
   1fe86:	4604      	mov	r4, r0
   1fe88:	4688      	mov	r8, r1
   1fe8a:	4617      	mov	r7, r2
   1fe8c:	9305      	str	r3, [sp, #20]
   1fe8e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1fe90:	9d10      	ldr	r5, [sp, #64]	; 0x40
    rc = ble_att_svr_pkt(rxom, &txom, out_att_err);
   1fe92:	462a      	mov	r2, r5
   1fe94:	a907      	add	r1, sp, #28
   1fe96:	4630      	mov	r0, r6
   1fe98:	f7ff fdef 	bl	1fa7a <ble_att_svr_pkt>
    if (rc != 0) {
   1fe9c:	b128      	cbz	r0, 1feaa <ble_att_svr_build_find_type_value_rsp+0x2a>
    *out_txom = txom;
   1fe9e:	9a07      	ldr	r2, [sp, #28]
   1fea0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fea2:	601a      	str	r2, [r3, #0]
}
   1fea4:	b008      	add	sp, #32
   1fea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    buf = ble_att_cmd_prepare(BLE_ATT_OP_FIND_TYPE_VALUE_RSP, 0, txom);
   1feaa:	9a07      	ldr	r2, [sp, #28]
   1feac:	2100      	movs	r1, #0
   1feae:	2007      	movs	r0, #7
   1feb0:	f7ff fbc9 	bl	1f646 <ble_att_cmd_prepare>
    if (buf == NULL) {
   1feb4:	b178      	cbz	r0, 1fed6 <ble_att_svr_build_find_type_value_rsp+0x56>
    mtu = ble_att_mtu(conn_handle);
   1feb6:	4620      	mov	r0, r4
   1feb8:	f7fe ffc9 	bl	1ee4e <ble_att_mtu>
    rc = ble_att_svr_fill_type_value(conn_handle, start_handle, end_handle,
   1febc:	9503      	str	r5, [sp, #12]
   1febe:	9002      	str	r0, [sp, #8]
   1fec0:	9b07      	ldr	r3, [sp, #28]
   1fec2:	9301      	str	r3, [sp, #4]
   1fec4:	6833      	ldr	r3, [r6, #0]
   1fec6:	9300      	str	r3, [sp, #0]
   1fec8:	9b05      	ldr	r3, [sp, #20]
   1feca:	463a      	mov	r2, r7
   1fecc:	4641      	mov	r1, r8
   1fece:	4620      	mov	r0, r4
   1fed0:	f7ff ff62 	bl	1fd98 <ble_att_svr_fill_type_value>
    if (rc != 0) {
   1fed4:	e7e3      	b.n	1fe9e <ble_att_svr_build_find_type_value_rsp+0x1e>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1fed6:	2311      	movs	r3, #17
   1fed8:	702b      	strb	r3, [r5, #0]
        rc = BLE_HS_ENOMEM;
   1feda:	2006      	movs	r0, #6
        goto done;
   1fedc:	e7df      	b.n	1fe9e <ble_att_svr_build_find_type_value_rsp+0x1e>

0001fede <ble_att_svr_service_uuid>:
{
   1fede:	b510      	push	{r4, lr}
   1fee0:	b08a      	sub	sp, #40	; 0x28
   1fee2:	460c      	mov	r4, r1
    rc = ble_att_svr_read_flat(BLE_HS_CONN_HANDLE_NONE, entry, 0, sizeof(val), val,
   1fee4:	9202      	str	r2, [sp, #8]
   1fee6:	f10d 0316 	add.w	r3, sp, #22
   1feea:	9301      	str	r3, [sp, #4]
   1feec:	ab06      	add	r3, sp, #24
   1feee:	9300      	str	r3, [sp, #0]
   1fef0:	2310      	movs	r3, #16
   1fef2:	2200      	movs	r2, #0
   1fef4:	4601      	mov	r1, r0
   1fef6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1fefa:	f7ff fef1 	bl	1fce0 <ble_att_svr_read_flat>
    if (rc != 0) {
   1fefe:	b108      	cbz	r0, 1ff04 <ble_att_svr_service_uuid+0x26>
}
   1ff00:	b00a      	add	sp, #40	; 0x28
   1ff02:	bd10      	pop	{r4, pc}
    rc = ble_uuid_init_from_buf(uuid, val, attr_len);
   1ff04:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1ff08:	a906      	add	r1, sp, #24
   1ff0a:	4620      	mov	r0, r4
   1ff0c:	f009 fd1d 	bl	2994a <ble_uuid_init_from_buf>
    return rc;
   1ff10:	e7f6      	b.n	1ff00 <ble_att_svr_service_uuid+0x22>
	...

0001ff14 <ble_att_svr_build_read_group_type_rsp>:
{
   1ff14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff18:	b08b      	sub	sp, #44	; 0x2c
   1ff1a:	460e      	mov	r6, r1
   1ff1c:	4617      	mov	r7, r2
   1ff1e:	4698      	mov	r8, r3
   1ff20:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
   1ff24:	2500      	movs	r5, #0
    *att_err = 0;
   1ff26:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1ff28:	701d      	strb	r5, [r3, #0]
    *err_handle = start_handle;
   1ff2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1ff2c:	8019      	strh	r1, [r3, #0]
    mtu = ble_att_mtu(conn_handle);
   1ff2e:	f7fe ff8e 	bl	1ee4e <ble_att_mtu>
   1ff32:	9003      	str	r0, [sp, #12]
    txom = *rxom;
   1ff34:	f8d9 a000 	ldr.w	sl, [r9]
    *rxom = NULL;
   1ff38:	f8c9 5000 	str.w	r5, [r9]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1ff3c:	f8ba 1010 	ldrh.w	r1, [sl, #16]
   1ff40:	4650      	mov	r0, sl
   1ff42:	f7f9 fc32 	bl	197aa <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_READ_GROUP_TYPE_RSP, sizeof(*rsp),
   1ff46:	4652      	mov	r2, sl
   1ff48:	2101      	movs	r1, #1
   1ff4a:	2011      	movs	r0, #17
   1ff4c:	f7ff fb7b 	bl	1f646 <ble_att_cmd_prepare>
    if (rsp == NULL) {
   1ff50:	b130      	cbz	r0, 1ff60 <ble_att_svr_build_read_group_type_rsp+0x4c>
   1ff52:	4683      	mov	fp, r0
    rsp->bagp_length = 0;
   1ff54:	2500      	movs	r5, #0
   1ff56:	7005      	strb	r5, [r0, #0]
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   1ff58:	4b4b      	ldr	r3, [pc, #300]	; (20088 <ble_att_svr_build_read_group_type_rsp+0x174>)
   1ff5a:	681c      	ldr	r4, [r3, #0]
    end_group_handle = 0;
   1ff5c:	46a9      	mov	r9, r5
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   1ff5e:	e03e      	b.n	1ffde <ble_att_svr_build_read_group_type_rsp+0xca>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1ff60:	2311      	movs	r3, #17
   1ff62:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1ff64:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   1ff66:	2306      	movs	r3, #6
    end_group_handle = 0;
   1ff68:	46a9      	mov	r9, r5
        goto done;
   1ff6a:	e059      	b.n	20020 <ble_att_svr_build_read_group_type_rsp+0x10c>
            if (!ble_att_svr_is_valid_read_group_type(entry->ha_uuid)) {
   1ff6c:	6860      	ldr	r0, [r4, #4]
   1ff6e:	f7ff feac 	bl	1fcca <ble_att_svr_is_valid_read_group_type>
   1ff72:	b910      	cbnz	r0, 1ff7a <ble_att_svr_build_read_group_type_rsp+0x66>
                end_group_handle = entry->ha_handle_id;
   1ff74:	f8b4 900a 	ldrh.w	r9, [r4, #10]
   1ff78:	e03a      	b.n	1fff0 <ble_att_svr_build_read_group_type_rsp+0xdc>
                rc = ble_att_svr_read_group_type_entry_write(
   1ff7a:	ab05      	add	r3, sp, #20
   1ff7c:	9300      	str	r3, [sp, #0]
   1ff7e:	464b      	mov	r3, r9
   1ff80:	462a      	mov	r2, r5
   1ff82:	9903      	ldr	r1, [sp, #12]
   1ff84:	4650      	mov	r0, sl
   1ff86:	f7ff fe3a 	bl	1fbfe <ble_att_svr_read_group_type_entry_write>
                if (rc != 0) {
   1ff8a:	4603      	mov	r3, r0
   1ff8c:	b918      	cbnz	r0, 1ff96 <ble_att_svr_build_read_group_type_rsp+0x82>
                end_group_handle = 0;
   1ff8e:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   1ff92:	464d      	mov	r5, r9
   1ff94:	e02e      	b.n	1fff4 <ble_att_svr_build_read_group_type_rsp+0xe0>
                    *err_handle = entry->ha_handle_id;
   1ff96:	8962      	ldrh	r2, [r4, #10]
   1ff98:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1ff9a:	800a      	strh	r2, [r1, #0]
                    if (rc == BLE_HS_ENOMEM) {
   1ff9c:	2806      	cmp	r0, #6
   1ff9e:	d003      	beq.n	1ffa8 <ble_att_svr_build_read_group_type_rsp+0x94>
                end_group_handle = 0;
   1ffa0:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   1ffa4:	464d      	mov	r5, r9
                    goto done;
   1ffa6:	e03b      	b.n	20020 <ble_att_svr_build_read_group_type_rsp+0x10c>
                        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1ffa8:	2211      	movs	r2, #17
   1ffaa:	9916      	ldr	r1, [sp, #88]	; 0x58
   1ffac:	700a      	strb	r2, [r1, #0]
   1ffae:	e7f7      	b.n	1ffa0 <ble_att_svr_build_read_group_type_rsp+0x8c>
                    *err_handle = entry->ha_handle_id;
   1ffb0:	8962      	ldrh	r2, [r4, #10]
   1ffb2:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1ffb4:	800a      	strh	r2, [r1, #0]
                    goto done;
   1ffb6:	e033      	b.n	20020 <ble_att_svr_build_read_group_type_rsp+0x10c>
                    if (service_uuid.u.type == BLE_UUID_TYPE_16) {
   1ffb8:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1ffbc:	2b10      	cmp	r3, #16
   1ffbe:	d003      	beq.n	1ffc8 <ble_att_svr_build_read_group_type_rsp+0xb4>
                        rsp->bagp_length = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_128;
   1ffc0:	2314      	movs	r3, #20
   1ffc2:	f88b 3000 	strb.w	r3, [fp]
   1ffc6:	e007      	b.n	1ffd8 <ble_att_svr_build_read_group_type_rsp+0xc4>
                        rsp->bagp_length = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_16;
   1ffc8:	2306      	movs	r3, #6
   1ffca:	f88b 3000 	strb.w	r3, [fp]
   1ffce:	e003      	b.n	1ffd8 <ble_att_svr_build_read_group_type_rsp+0xc4>
                    if (service_uuid.u.type != BLE_UUID_TYPE_16) {
   1ffd0:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1ffd4:	2a10      	cmp	r2, #16
   1ffd6:	d123      	bne.n	20020 <ble_att_svr_build_read_group_type_rsp+0x10c>
                start_group_handle = entry->ha_handle_id;
   1ffd8:	8965      	ldrh	r5, [r4, #10]
                end_group_handle = entry->ha_handle_id;
   1ffda:	46a9      	mov	r9, r5
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   1ffdc:	6824      	ldr	r4, [r4, #0]
   1ffde:	2c00      	cmp	r4, #0
   1ffe0:	d03a      	beq.n	20058 <ble_att_svr_build_read_group_type_rsp+0x144>
        if (entry->ha_handle_id < start_handle) {
   1ffe2:	8963      	ldrh	r3, [r4, #10]
   1ffe4:	42b3      	cmp	r3, r6
   1ffe6:	d3f9      	bcc.n	1ffdc <ble_att_svr_build_read_group_type_rsp+0xc8>
        if (entry->ha_handle_id > end_handle) {
   1ffe8:	42bb      	cmp	r3, r7
   1ffea:	d837      	bhi.n	2005c <ble_att_svr_build_read_group_type_rsp+0x148>
        if (start_group_handle != 0) {
   1ffec:	2d00      	cmp	r5, #0
   1ffee:	d1bd      	bne.n	1ff6c <ble_att_svr_build_read_group_type_rsp+0x58>
        if (start_group_handle == 0) {
   1fff0:	2d00      	cmp	r5, #0
   1fff2:	d1f3      	bne.n	1ffdc <ble_att_svr_build_read_group_type_rsp+0xc8>
            if (ble_uuid_cmp(entry->ha_uuid, group_uuid) == 0) {
   1fff4:	4641      	mov	r1, r8
   1fff6:	6860      	ldr	r0, [r4, #4]
   1fff8:	f009 fccf 	bl	2999a <ble_uuid_cmp>
   1fffc:	2800      	cmp	r0, #0
   1fffe:	d1ed      	bne.n	1ffdc <ble_att_svr_build_read_group_type_rsp+0xc8>
                rc = ble_att_svr_service_uuid(entry, &service_uuid, att_err);
   20000:	9a16      	ldr	r2, [sp, #88]	; 0x58
   20002:	a905      	add	r1, sp, #20
   20004:	4620      	mov	r0, r4
   20006:	f7ff ff6a 	bl	1fede <ble_att_svr_service_uuid>
                if (rc != 0) {
   2000a:	4603      	mov	r3, r0
   2000c:	2800      	cmp	r0, #0
   2000e:	d1cf      	bne.n	1ffb0 <ble_att_svr_build_read_group_type_rsp+0x9c>
                switch (rsp->bagp_length) {
   20010:	f89b 2000 	ldrb.w	r2, [fp]
   20014:	2a06      	cmp	r2, #6
   20016:	d0db      	beq.n	1ffd0 <ble_att_svr_build_read_group_type_rsp+0xbc>
   20018:	2a14      	cmp	r2, #20
   2001a:	d018      	beq.n	2004e <ble_att_svr_build_read_group_type_rsp+0x13a>
   2001c:	2a00      	cmp	r2, #0
   2001e:	d0cb      	beq.n	1ffb8 <ble_att_svr_build_read_group_type_rsp+0xa4>
    if (rc == 0) {
   20020:	bb2b      	cbnz	r3, 2006e <ble_att_svr_build_read_group_type_rsp+0x15a>
        if (start_group_handle != 0) {
   20022:	b15d      	cbz	r5, 2003c <ble_att_svr_build_read_group_type_rsp+0x128>
            if (entry == NULL) {
   20024:	b1e4      	cbz	r4, 20060 <ble_att_svr_build_read_group_type_rsp+0x14c>
            rc = ble_att_svr_read_group_type_entry_write(txom, mtu,
   20026:	ab05      	add	r3, sp, #20
   20028:	9300      	str	r3, [sp, #0]
   2002a:	464b      	mov	r3, r9
   2002c:	462a      	mov	r2, r5
   2002e:	9903      	ldr	r1, [sp, #12]
   20030:	4650      	mov	r0, sl
   20032:	f7ff fde4 	bl	1fbfe <ble_att_svr_read_group_type_entry_write>
   20036:	4603      	mov	r3, r0
            if (rc == BLE_HS_ENOMEM) {
   20038:	2806      	cmp	r0, #6
   2003a:	d014      	beq.n	20066 <ble_att_svr_build_read_group_type_rsp+0x152>
        if (OS_MBUF_PKTLEN(txom) <= BLE_ATT_READ_GROUP_TYPE_RSP_BASE_SZ) {
   2003c:	f8ba 2010 	ldrh.w	r2, [sl, #16]
   20040:	2a02      	cmp	r2, #2
   20042:	d814      	bhi.n	2006e <ble_att_svr_build_read_group_type_rsp+0x15a>
            *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   20044:	230a      	movs	r3, #10
   20046:	9a16      	ldr	r2, [sp, #88]	; 0x58
   20048:	7013      	strb	r3, [r2, #0]
            rc = BLE_HS_ENOENT;
   2004a:	2305      	movs	r3, #5
   2004c:	e010      	b.n	20070 <ble_att_svr_build_read_group_type_rsp+0x15c>
                    if (service_uuid.u.type == BLE_UUID_TYPE_16) {
   2004e:	f89d 2014 	ldrb.w	r2, [sp, #20]
   20052:	2a10      	cmp	r2, #16
   20054:	d1c0      	bne.n	1ffd8 <ble_att_svr_build_read_group_type_rsp+0xc4>
   20056:	e7e3      	b.n	20020 <ble_att_svr_build_read_group_type_rsp+0x10c>
    rc = 0;
   20058:	2300      	movs	r3, #0
   2005a:	e7e1      	b.n	20020 <ble_att_svr_build_read_group_type_rsp+0x10c>
            rc = 0;
   2005c:	2300      	movs	r3, #0
   2005e:	e7df      	b.n	20020 <ble_att_svr_build_read_group_type_rsp+0x10c>
                end_group_handle = 0xffff;
   20060:	f64f 79ff 	movw	r9, #65535	; 0xffff
   20064:	e7df      	b.n	20026 <ble_att_svr_build_read_group_type_rsp+0x112>
                *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   20066:	2211      	movs	r2, #17
   20068:	9916      	ldr	r1, [sp, #88]	; 0x58
   2006a:	700a      	strb	r2, [r1, #0]
   2006c:	e7e6      	b.n	2003c <ble_att_svr_build_read_group_type_rsp+0x128>
    if (rc == 0 || rc == BLE_HS_EMSGSIZE) {
   2006e:	b10b      	cbz	r3, 20074 <ble_att_svr_build_read_group_type_rsp+0x160>
   20070:	2b04      	cmp	r3, #4
   20072:	d006      	beq.n	20082 <ble_att_svr_build_read_group_type_rsp+0x16e>
    *out_txom = txom;
   20074:	9a15      	ldr	r2, [sp, #84]	; 0x54
   20076:	f8c2 a000 	str.w	sl, [r2]
}
   2007a:	4618      	mov	r0, r3
   2007c:	b00b      	add	sp, #44	; 0x2c
   2007e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = 0;
   20082:	2300      	movs	r3, #0
   20084:	e7f6      	b.n	20074 <ble_att_svr_build_read_group_type_rsp+0x160>
   20086:	bf00      	nop
   20088:	100056b4 	.word	0x100056b4

0002008c <ble_att_svr_prep_free>:
    if (entry != NULL) {
   2008c:	b148      	cbz	r0, 200a2 <ble_att_svr_prep_free+0x16>
{
   2008e:	b510      	push	{r4, lr}
   20090:	4604      	mov	r4, r0
        os_mbuf_free_chain(entry->bape_value);
   20092:	6880      	ldr	r0, [r0, #8]
   20094:	f7f9 fabb 	bl	1960e <os_mbuf_free_chain>
        os_memblock_put(&ble_att_svr_prep_entry_pool, entry);
   20098:	4621      	mov	r1, r4
   2009a:	4802      	ldr	r0, [pc, #8]	; (200a4 <ble_att_svr_prep_free+0x18>)
   2009c:	f7f9 ff11 	bl	19ec2 <os_memblock_put>
}
   200a0:	bd10      	pop	{r4, pc}
   200a2:	4770      	bx	lr
   200a4:	100059bc 	.word	0x100059bc

000200a8 <ble_att_svr_prep_alloc>:
{
   200a8:	b570      	push	{r4, r5, r6, lr}
   200aa:	4606      	mov	r6, r0
    entry = os_memblock_get(&ble_att_svr_prep_entry_pool);
   200ac:	480c      	ldr	r0, [pc, #48]	; (200e0 <ble_att_svr_prep_alloc+0x38>)
   200ae:	f7f9 fee0 	bl	19e72 <os_memblock_get>
    if (entry == NULL) {
   200b2:	4604      	mov	r4, r0
   200b4:	b150      	cbz	r0, 200cc <ble_att_svr_prep_alloc+0x24>
    memset(entry, 0, sizeof *entry);
   200b6:	2300      	movs	r3, #0
   200b8:	6003      	str	r3, [r0, #0]
   200ba:	6043      	str	r3, [r0, #4]
   200bc:	6083      	str	r3, [r0, #8]
    entry->bape_value = ble_hs_mbuf_l2cap_pkt();
   200be:	f008 fa2e 	bl	2851e <ble_hs_mbuf_l2cap_pkt>
   200c2:	4605      	mov	r5, r0
   200c4:	60a0      	str	r0, [r4, #8]
    if (entry->bape_value == NULL) {
   200c6:	b120      	cbz	r0, 200d2 <ble_att_svr_prep_alloc+0x2a>
}
   200c8:	4620      	mov	r0, r4
   200ca:	bd70      	pop	{r4, r5, r6, pc}
        *att_err = BLE_ATT_ERR_PREPARE_QUEUE_FULL;
   200cc:	2309      	movs	r3, #9
   200ce:	7033      	strb	r3, [r6, #0]
        return NULL;
   200d0:	e7fa      	b.n	200c8 <ble_att_svr_prep_alloc+0x20>
        ble_att_svr_prep_free(entry);
   200d2:	4620      	mov	r0, r4
   200d4:	f7ff ffda 	bl	2008c <ble_att_svr_prep_free>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   200d8:	2311      	movs	r3, #17
   200da:	7033      	strb	r3, [r6, #0]
        return NULL;
   200dc:	462c      	mov	r4, r5
   200de:	e7f3      	b.n	200c8 <ble_att_svr_prep_alloc+0x20>
   200e0:	100059bc 	.word	0x100059bc

000200e4 <ble_att_svr_entry_free>:
{
   200e4:	b508      	push	{r3, lr}
   200e6:	4601      	mov	r1, r0
    os_memblock_put(&ble_att_svr_entry_pool, entry);
   200e8:	4801      	ldr	r0, [pc, #4]	; (200f0 <ble_att_svr_entry_free+0xc>)
   200ea:	f7f9 feea 	bl	19ec2 <os_memblock_put>
}
   200ee:	bd08      	pop	{r3, pc}
   200f0:	1000568c 	.word	0x1000568c

000200f4 <ble_att_svr_insert_prep_entry>:
{
   200f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   200f8:	4688      	mov	r8, r1
   200fa:	4691      	mov	r9, r2
   200fc:	461d      	mov	r5, r3
   200fe:	9f08      	ldr	r7, [sp, #32]
    conn = ble_hs_conn_find_assert(conn_handle);
   20100:	f007 fab6 	bl	27670 <ble_hs_conn_find_assert>
   20104:	4606      	mov	r6, r0
    prep_entry = ble_att_svr_prep_alloc(out_att_err);
   20106:	4638      	mov	r0, r7
   20108:	f7ff ffce 	bl	200a8 <ble_att_svr_prep_alloc>
    if (prep_entry == NULL) {
   2010c:	b368      	cbz	r0, 2016a <ble_att_svr_insert_prep_entry+0x76>
   2010e:	4604      	mov	r4, r0
    prep_entry->bape_handle = handle;
   20110:	f8a0 8004 	strh.w	r8, [r0, #4]
    prep_entry->bape_offset = offset;
   20114:	f8a0 9006 	strh.w	r9, [r0, #6]
        OS_MBUF_PKTLEN(rxom) - sizeof(struct ble_att_prep_write_cmd));
   20118:	8a2b      	ldrh	r3, [r5, #16]
    rc = os_mbuf_appendfrom(
   2011a:	3b04      	subs	r3, #4
   2011c:	b29b      	uxth	r3, r3
   2011e:	2204      	movs	r2, #4
   20120:	4629      	mov	r1, r5
   20122:	6880      	ldr	r0, [r0, #8]
   20124:	f7f9 fae8 	bl	196f8 <os_mbuf_appendfrom>
    if (rc != 0) {
   20128:	4605      	mov	r5, r0
   2012a:	b9a0      	cbnz	r0, 20156 <ble_att_svr_insert_prep_entry+0x62>
    prep_prev = ble_att_svr_prep_find_prev(&conn->bhc_att_svr,
   2012c:	464a      	mov	r2, r9
   2012e:	4641      	mov	r1, r8
   20130:	f106 0044 	add.w	r0, r6, #68	; 0x44
   20134:	f7ff fad6 	bl	1f6e4 <ble_att_svr_prep_find_prev>
    if (prep_prev == NULL) {
   20138:	b198      	cbz	r0, 20162 <ble_att_svr_insert_prep_entry+0x6e>
        SLIST_INSERT_AFTER(prep_prev, prep_entry, bape_next);
   2013a:	6802      	ldr	r2, [r0, #0]
   2013c:	6022      	str	r2, [r4, #0]
   2013e:	6004      	str	r4, [r0, #0]
}

static inline uint32_t
ble_npl_time_get(void)
{
    return os_time_get();
   20140:	f7fa fa94 	bl	1a66c <os_time_get>
        ble_npl_time_get() + BLE_HS_ATT_SVR_QUEUED_WRITE_TMO;
   20144:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
   20148:	3030      	adds	r0, #48	; 0x30
    conn->bhc_att_svr.basc_prep_timeout_at =
   2014a:	64b0      	str	r0, [r6, #72]	; 0x48
    ble_hs_timer_resched();
   2014c:	f006 fae6 	bl	2671c <ble_hs_timer_resched>
}
   20150:	4628      	mov	r0, r5
   20152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ble_att_svr_prep_free(prep_entry);
   20156:	4620      	mov	r0, r4
   20158:	f7ff ff98 	bl	2008c <ble_att_svr_prep_free>
        *out_att_err = BLE_ATT_ERR_PREPARE_QUEUE_FULL;
   2015c:	2309      	movs	r3, #9
   2015e:	703b      	strb	r3, [r7, #0]
        return rc;
   20160:	e7f6      	b.n	20150 <ble_att_svr_insert_prep_entry+0x5c>
        SLIST_INSERT_HEAD(&conn->bhc_att_svr.basc_prep_list, prep_entry,
   20162:	6c73      	ldr	r3, [r6, #68]	; 0x44
   20164:	6023      	str	r3, [r4, #0]
   20166:	6474      	str	r4, [r6, #68]	; 0x44
   20168:	e7ea      	b.n	20140 <ble_att_svr_insert_prep_entry+0x4c>
        return BLE_HS_ENOMEM;
   2016a:	2506      	movs	r5, #6
   2016c:	e7f0      	b.n	20150 <ble_att_svr_insert_prep_entry+0x5c>

0002016e <ble_att_svr_prep_extract>:
{
   2016e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20172:	4605      	mov	r5, r0
   20174:	4689      	mov	r9, r1
   20176:	4690      	mov	r8, r2
    first = SLIST_FIRST(prep_list);
   20178:	6803      	ldr	r3, [r0, #0]
    attr_handle = first->bape_handle;
   2017a:	889f      	ldrh	r7, [r3, #4]
    om = NULL;
   2017c:	2600      	movs	r6, #0
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   2017e:	e00b      	b.n	20198 <ble_att_svr_prep_extract+0x2a>
            os_mbuf_concat(om, entry->bape_value);
   20180:	68a1      	ldr	r1, [r4, #8]
   20182:	4630      	mov	r0, r6
   20184:	f7f9 fca4 	bl	19ad0 <os_mbuf_concat>
        entry->bape_value = NULL;
   20188:	2300      	movs	r3, #0
   2018a:	60a3      	str	r3, [r4, #8]
        SLIST_REMOVE_HEAD(prep_list, bape_next);
   2018c:	682b      	ldr	r3, [r5, #0]
   2018e:	681b      	ldr	r3, [r3, #0]
   20190:	602b      	str	r3, [r5, #0]
        ble_att_svr_prep_free(entry);
   20192:	4620      	mov	r0, r4
   20194:	f7ff ff7a 	bl	2008c <ble_att_svr_prep_free>
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   20198:	682c      	ldr	r4, [r5, #0]
   2019a:	b134      	cbz	r4, 201aa <ble_att_svr_prep_extract+0x3c>
        if (entry->bape_handle != attr_handle) {
   2019c:	88a3      	ldrh	r3, [r4, #4]
   2019e:	42bb      	cmp	r3, r7
   201a0:	d103      	bne.n	201aa <ble_att_svr_prep_extract+0x3c>
        if (om == NULL) {
   201a2:	2e00      	cmp	r6, #0
   201a4:	d1ec      	bne.n	20180 <ble_att_svr_prep_extract+0x12>
            om = entry->bape_value;
   201a6:	68a6      	ldr	r6, [r4, #8]
   201a8:	e7ee      	b.n	20188 <ble_att_svr_prep_extract+0x1a>
    *out_attr_handle = attr_handle;
   201aa:	f8a9 7000 	strh.w	r7, [r9]
    *out_om = om;
   201ae:	f8c8 6000 	str.w	r6, [r8]
}
   201b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000201b8 <ble_att_svr_free_start_mem>:
     */
}

static void
ble_att_svr_free_start_mem(void)
{
   201b8:	b510      	push	{r4, lr}
    free(ble_att_svr_entry_mem);
   201ba:	4c03      	ldr	r4, [pc, #12]	; (201c8 <ble_att_svr_free_start_mem+0x10>)
   201bc:	6820      	ldr	r0, [r4, #0]
   201be:	f00e fc57 	bl	2ea70 <free>
    ble_att_svr_entry_mem = NULL;
   201c2:	2300      	movs	r3, #0
   201c4:	6023      	str	r3, [r4, #0]
}
   201c6:	bd10      	pop	{r4, pc}
   201c8:	10005688 	.word	0x10005688

000201cc <ble_att_svr_register>:
{
   201cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   201d0:	4680      	mov	r8, r0
   201d2:	460f      	mov	r7, r1
   201d4:	4616      	mov	r6, r2
   201d6:	461d      	mov	r5, r3
    entry = ble_att_svr_entry_alloc();
   201d8:	f7ff fb06 	bl	1f7e8 <ble_att_svr_entry_alloc>
    if (entry == NULL) {
   201dc:	b1b8      	cbz	r0, 2020e <ble_att_svr_register+0x42>
   201de:	4604      	mov	r4, r0
    entry->ha_uuid = uuid;
   201e0:	f8c0 8004 	str.w	r8, [r0, #4]
    entry->ha_flags = flags;
   201e4:	7207      	strb	r7, [r0, #8]
    entry->ha_min_key_size = min_key_size;
   201e6:	7246      	strb	r6, [r0, #9]
    entry->ha_handle_id = ble_att_svr_next_id();
   201e8:	f7ff fa74 	bl	1f6d4 <ble_att_svr_next_id>
   201ec:	8160      	strh	r0, [r4, #10]
    entry->ha_cb = cb;
   201ee:	9b06      	ldr	r3, [sp, #24]
   201f0:	60e3      	str	r3, [r4, #12]
    entry->ha_cb_arg = cb_arg;
   201f2:	9b07      	ldr	r3, [sp, #28]
   201f4:	6123      	str	r3, [r4, #16]
    STAILQ_INSERT_TAIL(&ble_att_svr_list, entry, ha_next);
   201f6:	2300      	movs	r3, #0
   201f8:	6023      	str	r3, [r4, #0]
   201fa:	4b07      	ldr	r3, [pc, #28]	; (20218 <ble_att_svr_register+0x4c>)
   201fc:	685a      	ldr	r2, [r3, #4]
   201fe:	6014      	str	r4, [r2, #0]
   20200:	605c      	str	r4, [r3, #4]
    if (handle_id != NULL) {
   20202:	b135      	cbz	r5, 20212 <ble_att_svr_register+0x46>
        *handle_id = entry->ha_handle_id;
   20204:	8963      	ldrh	r3, [r4, #10]
   20206:	802b      	strh	r3, [r5, #0]
    return 0;
   20208:	2000      	movs	r0, #0
}
   2020a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_ENOMEM;
   2020e:	2006      	movs	r0, #6
   20210:	e7fb      	b.n	2020a <ble_att_svr_register+0x3e>
    return 0;
   20212:	2000      	movs	r0, #0
   20214:	e7f9      	b.n	2020a <ble_att_svr_register+0x3e>
   20216:	bf00      	nop
   20218:	100056b4 	.word	0x100056b4

0002021c <ble_att_svr_prev_handle>:
}
   2021c:	4b01      	ldr	r3, [pc, #4]	; (20224 <ble_att_svr_prev_handle+0x8>)
   2021e:	8818      	ldrh	r0, [r3, #0]
   20220:	4770      	bx	lr
   20222:	bf00      	nop
   20224:	100056b0 	.word	0x100056b0

00020228 <ble_att_svr_find_by_handle>:
{
   20228:	4602      	mov	r2, r0
    for (entry = STAILQ_FIRST(&ble_att_svr_list);
   2022a:	4b04      	ldr	r3, [pc, #16]	; (2023c <ble_att_svr_find_by_handle+0x14>)
   2022c:	6818      	ldr	r0, [r3, #0]
   2022e:	b120      	cbz	r0, 2023a <ble_att_svr_find_by_handle+0x12>
        if (entry->ha_handle_id == handle_id) {
   20230:	8943      	ldrh	r3, [r0, #10]
   20232:	4293      	cmp	r3, r2
   20234:	d001      	beq.n	2023a <ble_att_svr_find_by_handle+0x12>
         entry = STAILQ_NEXT(entry, ha_next)) {
   20236:	6800      	ldr	r0, [r0, #0]
   20238:	e7f9      	b.n	2022e <ble_att_svr_find_by_handle+0x6>
}
   2023a:	4770      	bx	lr
   2023c:	100056b4 	.word	0x100056b4

00020240 <ble_att_svr_write_handle>:
{
   20240:	b5f0      	push	{r4, r5, r6, r7, lr}
   20242:	b083      	sub	sp, #12
   20244:	4607      	mov	r7, r0
   20246:	4614      	mov	r4, r2
   20248:	461d      	mov	r5, r3
   2024a:	9e08      	ldr	r6, [sp, #32]
    entry = ble_att_svr_find_by_handle(attr_handle);
   2024c:	4608      	mov	r0, r1
   2024e:	f7ff ffeb 	bl	20228 <ble_att_svr_find_by_handle>
    if (entry == NULL) {
   20252:	b140      	cbz	r0, 20266 <ble_att_svr_write_handle+0x26>
   20254:	4601      	mov	r1, r0
    rc = ble_att_svr_write(conn_handle, entry, offset, om, out_att_err);
   20256:	9600      	str	r6, [sp, #0]
   20258:	462b      	mov	r3, r5
   2025a:	4622      	mov	r2, r4
   2025c:	4638      	mov	r0, r7
   2025e:	f7ff fb97 	bl	1f990 <ble_att_svr_write>
}
   20262:	b003      	add	sp, #12
   20264:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (out_att_err != NULL) {
   20266:	b10e      	cbz	r6, 2026c <ble_att_svr_write_handle+0x2c>
            *out_att_err = BLE_ATT_ERR_INVALID_HANDLE;
   20268:	2301      	movs	r3, #1
   2026a:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ENOENT;
   2026c:	2005      	movs	r0, #5
   2026e:	e7f8      	b.n	20262 <ble_att_svr_write_handle+0x22>

00020270 <ble_att_svr_prep_write>:
{
   20270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20274:	b084      	sub	sp, #16
   20276:	4606      	mov	r6, r0
   20278:	460d      	mov	r5, r1
   2027a:	4617      	mov	r7, r2
    *err_handle = 0; /* Silence unnecessary warning. */
   2027c:	2300      	movs	r3, #0
   2027e:	8013      	strh	r3, [r2, #0]
    rc = ble_att_svr_prep_validate(prep_list, err_handle);
   20280:	4611      	mov	r1, r2
   20282:	4628      	mov	r0, r5
   20284:	f7ff fa40 	bl	1f708 <ble_att_svr_prep_validate>
    if (rc != 0) {
   20288:	4680      	mov	r8, r0
   2028a:	b9f8      	cbnz	r0, 202cc <ble_att_svr_prep_write+0x5c>
    while (!SLIST_EMPTY(prep_list)) {
   2028c:	682b      	ldr	r3, [r5, #0]
   2028e:	b1eb      	cbz	r3, 202cc <ble_att_svr_prep_write+0x5c>
        ble_att_svr_prep_extract(prep_list, &attr_handle, &om);
   20290:	aa03      	add	r2, sp, #12
   20292:	f10d 010a 	add.w	r1, sp, #10
   20296:	4628      	mov	r0, r5
   20298:	f7ff ff69 	bl	2016e <ble_att_svr_prep_extract>
        attr = ble_att_svr_find_by_handle(attr_handle);
   2029c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   202a0:	f7ff ffc2 	bl	20228 <ble_att_svr_find_by_handle>
   202a4:	4601      	mov	r1, r0
        rc = ble_att_svr_write(conn_handle, attr, 0, &om, &att_err);
   202a6:	f10d 0309 	add.w	r3, sp, #9
   202aa:	9300      	str	r3, [sp, #0]
   202ac:	ab03      	add	r3, sp, #12
   202ae:	2200      	movs	r2, #0
   202b0:	4630      	mov	r0, r6
   202b2:	f7ff fb6d 	bl	1f990 <ble_att_svr_write>
   202b6:	4604      	mov	r4, r0
        os_mbuf_free_chain(om);
   202b8:	9803      	ldr	r0, [sp, #12]
   202ba:	f7f9 f9a8 	bl	1960e <os_mbuf_free_chain>
        if (rc != 0) {
   202be:	2c00      	cmp	r4, #0
   202c0:	d0e4      	beq.n	2028c <ble_att_svr_prep_write+0x1c>
            *err_handle = attr_handle;
   202c2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   202c6:	803b      	strh	r3, [r7, #0]
            return att_err;
   202c8:	f89d 8009 	ldrb.w	r8, [sp, #9]
}
   202cc:	4640      	mov	r0, r8
   202ce:	b004      	add	sp, #16
   202d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000202d4 <ble_att_svr_find_by_uuid>:
{
   202d4:	b570      	push	{r4, r5, r6, lr}
   202d6:	460d      	mov	r5, r1
   202d8:	4616      	mov	r6, r2
    if (prev == NULL) {
   202da:	b108      	cbz	r0, 202e0 <ble_att_svr_find_by_uuid+0xc>
        entry = STAILQ_NEXT(prev, ha_next);
   202dc:	6804      	ldr	r4, [r0, #0]
   202de:	e003      	b.n	202e8 <ble_att_svr_find_by_uuid+0x14>
        entry = STAILQ_FIRST(&ble_att_svr_list);
   202e0:	4b09      	ldr	r3, [pc, #36]	; (20308 <ble_att_svr_find_by_uuid+0x34>)
   202e2:	681c      	ldr	r4, [r3, #0]
   202e4:	e000      	b.n	202e8 <ble_att_svr_find_by_uuid+0x14>
         entry = STAILQ_NEXT(entry, ha_next)) {
   202e6:	6824      	ldr	r4, [r4, #0]
    for (;
   202e8:	b15c      	cbz	r4, 20302 <ble_att_svr_find_by_uuid+0x2e>
         entry != NULL && entry->ha_handle_id <= end_handle;
   202ea:	8963      	ldrh	r3, [r4, #10]
   202ec:	42b3      	cmp	r3, r6
   202ee:	d807      	bhi.n	20300 <ble_att_svr_find_by_uuid+0x2c>
        if (uuid == NULL || ble_uuid_cmp(entry->ha_uuid, uuid) == 0) {
   202f0:	b13d      	cbz	r5, 20302 <ble_att_svr_find_by_uuid+0x2e>
   202f2:	4629      	mov	r1, r5
   202f4:	6860      	ldr	r0, [r4, #4]
   202f6:	f009 fb50 	bl	2999a <ble_uuid_cmp>
   202fa:	2800      	cmp	r0, #0
   202fc:	d1f3      	bne.n	202e6 <ble_att_svr_find_by_uuid+0x12>
   202fe:	e000      	b.n	20302 <ble_att_svr_find_by_uuid+0x2e>
    return NULL;
   20300:	2400      	movs	r4, #0
}
   20302:	4620      	mov	r0, r4
   20304:	bd70      	pop	{r4, r5, r6, pc}
   20306:	bf00      	nop
   20308:	100056b4 	.word	0x100056b4

0002030c <ble_att_svr_build_read_type_rsp>:
{
   2030c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20310:	b08f      	sub	sp, #60	; 0x3c
   20312:	9005      	str	r0, [sp, #20]
   20314:	460d      	mov	r5, r1
   20316:	4616      	mov	r6, r2
   20318:	461f      	mov	r7, r3
   2031a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2031c:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
    *att_err = 0;    /* Silence unnecessary warning. */
   20320:	2200      	movs	r2, #0
   20322:	f88b 2000 	strb.w	r2, [fp]
    *err_handle = start_handle;
   20326:	991b      	ldr	r1, [sp, #108]	; 0x6c
   20328:	800d      	strh	r5, [r1, #0]
    txom = *rxom;
   2032a:	f8d3 8000 	ldr.w	r8, [r3]
    *rxom = NULL;
   2032e:	601a      	str	r2, [r3, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   20330:	f8b8 1010 	ldrh.w	r1, [r8, #16]
   20334:	4640      	mov	r0, r8
   20336:	f7f9 fa38 	bl	197aa <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_READ_TYPE_RSP, sizeof(*rsp), txom);
   2033a:	4642      	mov	r2, r8
   2033c:	2101      	movs	r1, #1
   2033e:	2009      	movs	r0, #9
   20340:	f7ff f981 	bl	1f646 <ble_att_cmd_prepare>
    if (rsp == NULL) {
   20344:	9007      	str	r0, [sp, #28]
   20346:	b148      	cbz	r0, 2035c <ble_att_svr_build_read_type_rsp+0x50>
    mtu = ble_att_mtu(conn_handle);
   20348:	9805      	ldr	r0, [sp, #20]
   2034a:	f7fe fd80 	bl	1ee4e <ble_att_mtu>
   2034e:	4681      	mov	r9, r0
    prev_attr_len = 0;
   20350:	f04f 0a00 	mov.w	sl, #0
    entry_written = 0;
   20354:	f8cd a018 	str.w	sl, [sp, #24]
    entry = NULL;
   20358:	4654      	mov	r4, sl
   2035a:	e029      	b.n	203b0 <ble_att_svr_build_read_type_rsp+0xa4>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   2035c:	2311      	movs	r3, #17
   2035e:	f88b 3000 	strb.w	r3, [fp]
        *err_handle = 0;
   20362:	2300      	movs	r3, #0
   20364:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   20366:	8013      	strh	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   20368:	2206      	movs	r2, #6
    prev_attr_len = 0;
   2036a:	469a      	mov	sl, r3
    entry_written = 0;
   2036c:	9306      	str	r3, [sp, #24]
        goto done;
   2036e:	e052      	b.n	20416 <ble_att_svr_build_read_type_rsp+0x10a>
                *err_handle = entry->ha_handle_id;
   20370:	8963      	ldrh	r3, [r4, #10]
   20372:	991b      	ldr	r1, [sp, #108]	; 0x6c
   20374:	800b      	strh	r3, [r1, #0]
                goto done;
   20376:	e04e      	b.n	20416 <ble_att_svr_build_read_type_rsp+0x10a>
            } else if (prev_attr_len != attr_len) {
   20378:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   2037c:	4553      	cmp	r3, sl
   2037e:	d14a      	bne.n	20416 <ble_att_svr_build_read_type_rsp+0x10a>
            txomlen = OS_MBUF_PKTHDR(txom)->omp_len + 2 + attr_len;
   20380:	f8b8 3010 	ldrh.w	r3, [r8, #16]
   20384:	3302      	adds	r3, #2
   20386:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   2038a:	440b      	add	r3, r1
            if (txomlen > mtu) {
   2038c:	4599      	cmp	r9, r3
   2038e:	db42      	blt.n	20416 <ble_att_svr_build_read_type_rsp+0x10a>
            data = os_mbuf_extend(txom, 2 + attr_len);
   20390:	3102      	adds	r1, #2
   20392:	b289      	uxth	r1, r1
   20394:	4640      	mov	r0, r8
   20396:	f7f9 fbbd 	bl	19b14 <os_mbuf_extend>
            if (data == NULL) {
   2039a:	b398      	cbz	r0, 20404 <ble_att_svr_build_read_type_rsp+0xf8>
            data->handle = htole16(entry->ha_handle_id);
   2039c:	8962      	ldrh	r2, [r4, #10]
   2039e:	f820 2b02 	strh.w	r2, [r0], #2
            memcpy(data->value, buf, attr_len);
   203a2:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   203a6:	a908      	add	r1, sp, #32
   203a8:	f7fa fc64 	bl	1ac74 <memcpy>
            entry_written = 1;
   203ac:	2301      	movs	r3, #1
   203ae:	9306      	str	r3, [sp, #24]
        entry = ble_att_svr_find_by_uuid(entry, uuid, end_handle);
   203b0:	4632      	mov	r2, r6
   203b2:	4639      	mov	r1, r7
   203b4:	4620      	mov	r0, r4
   203b6:	f7ff ff8d 	bl	202d4 <ble_att_svr_find_by_uuid>
        if (entry == NULL) {
   203ba:	4604      	mov	r4, r0
   203bc:	b350      	cbz	r0, 20414 <ble_att_svr_build_read_type_rsp+0x108>
        if (entry->ha_handle_id >= start_handle) {
   203be:	8943      	ldrh	r3, [r0, #10]
   203c0:	42ab      	cmp	r3, r5
   203c2:	d3f5      	bcc.n	203b0 <ble_att_svr_build_read_type_rsp+0xa4>
            rc = ble_att_svr_read_flat(conn_handle, entry, 0, sizeof buf, buf,
   203c4:	f8cd b008 	str.w	fp, [sp, #8]
   203c8:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   203cc:	9301      	str	r3, [sp, #4]
   203ce:	ab08      	add	r3, sp, #32
   203d0:	9300      	str	r3, [sp, #0]
   203d2:	2313      	movs	r3, #19
   203d4:	2200      	movs	r2, #0
   203d6:	4601      	mov	r1, r0
   203d8:	9805      	ldr	r0, [sp, #20]
   203da:	f7ff fc81 	bl	1fce0 <ble_att_svr_read_flat>
            if (rc != 0) {
   203de:	4602      	mov	r2, r0
   203e0:	2800      	cmp	r0, #0
   203e2:	d1c5      	bne.n	20370 <ble_att_svr_build_read_type_rsp+0x64>
            if (attr_len > mtu - 4) {
   203e4:	f1a9 0303 	sub.w	r3, r9, #3
   203e8:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   203ec:	428b      	cmp	r3, r1
   203ee:	dc03      	bgt.n	203f8 <ble_att_svr_build_read_type_rsp+0xec>
                attr_len = mtu - 4;
   203f0:	f1a9 0304 	sub.w	r3, r9, #4
   203f4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            if (prev_attr_len == 0) {
   203f8:	f1ba 0f00 	cmp.w	sl, #0
   203fc:	d1bc      	bne.n	20378 <ble_att_svr_build_read_type_rsp+0x6c>
                prev_attr_len = attr_len;
   203fe:	f8bd a036 	ldrh.w	sl, [sp, #54]	; 0x36
   20402:	e7bd      	b.n	20380 <ble_att_svr_build_read_type_rsp+0x74>
                *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   20404:	2311      	movs	r3, #17
   20406:	f88b 3000 	strb.w	r3, [fp]
                *err_handle = entry->ha_handle_id;
   2040a:	8963      	ldrh	r3, [r4, #10]
   2040c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2040e:	8013      	strh	r3, [r2, #0]
                rc = BLE_HS_ENOMEM;
   20410:	2206      	movs	r2, #6
                goto done;
   20412:	e000      	b.n	20416 <ble_att_svr_build_read_type_rsp+0x10a>
            rc = BLE_HS_ENOENT;
   20414:	2205      	movs	r2, #5
    if (!entry_written) {
   20416:	9b06      	ldr	r3, [sp, #24]
   20418:	b943      	cbnz	r3, 2042c <ble_att_svr_build_read_type_rsp+0x120>
        if (*att_err == 0) {
   2041a:	f89b 3000 	ldrb.w	r3, [fp]
   2041e:	b913      	cbnz	r3, 20426 <ble_att_svr_build_read_type_rsp+0x11a>
            *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   20420:	230a      	movs	r3, #10
   20422:	f88b 3000 	strb.w	r3, [fp]
        if (rc == 0) {
   20426:	b94a      	cbnz	r2, 2043c <ble_att_svr_build_read_type_rsp+0x130>
            rc = BLE_HS_ENOENT;
   20428:	2205      	movs	r2, #5
   2042a:	e007      	b.n	2043c <ble_att_svr_build_read_type_rsp+0x130>
        *att_err = 0;
   2042c:	2200      	movs	r2, #0
   2042e:	f88b 2000 	strb.w	r2, [fp]
        rsp->batp_length = sizeof(*data) + prev_attr_len;
   20432:	f10a 0a02 	add.w	sl, sl, #2
   20436:	9b07      	ldr	r3, [sp, #28]
   20438:	f883 a000 	strb.w	sl, [r3]
    *out_txom = txom;
   2043c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2043e:	f8c3 8000 	str.w	r8, [r3]
}
   20442:	4610      	mov	r0, r2
   20444:	b00f      	add	sp, #60	; 0x3c
   20446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002044a <ble_att_svr_ticks_until_tmo>:
    if (SLIST_EMPTY(&svr->basc_prep_list)) {
   2044a:	6802      	ldr	r2, [r0, #0]
   2044c:	b11a      	cbz	r2, 20456 <ble_att_svr_ticks_until_tmo+0xc>
    time_diff = svr->basc_prep_timeout_at - now;
   2044e:	6840      	ldr	r0, [r0, #4]
    if (time_diff < 0) {
   20450:	1a40      	subs	r0, r0, r1
   20452:	d403      	bmi.n	2045c <ble_att_svr_ticks_until_tmo+0x12>
}
   20454:	4770      	bx	lr
        return BLE_HS_FOREVER;
   20456:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2045a:	4770      	bx	lr
        return 0;
   2045c:	2000      	movs	r0, #0
   2045e:	e7f9      	b.n	20454 <ble_att_svr_ticks_until_tmo+0xa>

00020460 <ble_att_svr_read_handle>:
{
   20460:	b5f0      	push	{r4, r5, r6, r7, lr}
   20462:	b083      	sub	sp, #12
   20464:	4607      	mov	r7, r0
   20466:	4614      	mov	r4, r2
   20468:	461d      	mov	r5, r3
   2046a:	9e08      	ldr	r6, [sp, #32]
    entry = ble_att_svr_find_by_handle(attr_handle);
   2046c:	4608      	mov	r0, r1
   2046e:	f7ff fedb 	bl	20228 <ble_att_svr_find_by_handle>
    if (entry == NULL) {
   20472:	b140      	cbz	r0, 20486 <ble_att_svr_read_handle+0x26>
   20474:	4601      	mov	r1, r0
    rc = ble_att_svr_read(conn_handle, entry, offset, om, out_att_err);
   20476:	9600      	str	r6, [sp, #0]
   20478:	462b      	mov	r3, r5
   2047a:	4622      	mov	r2, r4
   2047c:	4638      	mov	r0, r7
   2047e:	f7ff fa56 	bl	1f92e <ble_att_svr_read>
}
   20482:	b003      	add	sp, #12
   20484:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (out_att_err != NULL) {
   20486:	b10e      	cbz	r6, 2048c <ble_att_svr_read_handle+0x2c>
            *out_att_err = BLE_ATT_ERR_INVALID_HANDLE;
   20488:	2301      	movs	r3, #1
   2048a:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ENOENT;
   2048c:	2005      	movs	r0, #5
   2048e:	e7f8      	b.n	20482 <ble_att_svr_read_handle+0x22>

00020490 <ble_att_svr_build_read_mult_rsp>:
{
   20490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20494:	b084      	sub	sp, #16
   20496:	4680      	mov	r8, r0
   20498:	460c      	mov	r4, r1
   2049a:	4691      	mov	r9, r2
   2049c:	461e      	mov	r6, r3
    mtu = ble_att_mtu(conn_handle);
   2049e:	f7fe fcd6 	bl	1ee4e <ble_att_mtu>
   204a2:	4607      	mov	r7, r0
    rc = ble_att_svr_pkt(rxom, &txom, att_err);
   204a4:	4632      	mov	r2, r6
   204a6:	a903      	add	r1, sp, #12
   204a8:	4620      	mov	r0, r4
   204aa:	f7ff fae6 	bl	1fa7a <ble_att_svr_pkt>
    if (rc != 0) {
   204ae:	4682      	mov	sl, r0
   204b0:	b148      	cbz	r0, 204c6 <ble_att_svr_build_read_mult_rsp+0x36>
        *err_handle = 0;
   204b2:	2300      	movs	r3, #0
   204b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   204b6:	8013      	strh	r3, [r2, #0]
    *out_txom = txom;
   204b8:	9b03      	ldr	r3, [sp, #12]
   204ba:	f8c9 3000 	str.w	r3, [r9]
}
   204be:	4650      	mov	r0, sl
   204c0:	b004      	add	sp, #16
   204c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_MULT_RSP, 0, txom) == NULL) {
   204c6:	9a03      	ldr	r2, [sp, #12]
   204c8:	2100      	movs	r1, #0
   204ca:	200f      	movs	r0, #15
   204cc:	f7ff f8bb 	bl	1f646 <ble_att_cmd_prepare>
   204d0:	b318      	cbz	r0, 2051a <ble_att_svr_build_read_mult_rsp+0x8a>
    while (OS_MBUF_PKTLEN(*rxom) >= 2 && OS_MBUF_PKTLEN(txom) < mtu) {
   204d2:	6823      	ldr	r3, [r4, #0]
   204d4:	8a1b      	ldrh	r3, [r3, #16]
   204d6:	2b01      	cmp	r3, #1
   204d8:	d9ee      	bls.n	204b8 <ble_att_svr_build_read_mult_rsp+0x28>
   204da:	9b03      	ldr	r3, [sp, #12]
   204dc:	8a1b      	ldrh	r3, [r3, #16]
   204de:	42bb      	cmp	r3, r7
   204e0:	d2ea      	bcs.n	204b8 <ble_att_svr_build_read_mult_rsp+0x28>
        rc = ble_att_svr_pullup_req_base(rxom, 2, att_err);
   204e2:	4632      	mov	r2, r6
   204e4:	2102      	movs	r1, #2
   204e6:	4620      	mov	r0, r4
   204e8:	f7ff fa84 	bl	1f9f4 <ble_att_svr_pullup_req_base>
        if (rc != 0) {
   204ec:	b9e8      	cbnz	r0, 2052a <ble_att_svr_build_read_mult_rsp+0x9a>
        handle = get_le16((*rxom)->om_data);
   204ee:	6823      	ldr	r3, [r4, #0]
   204f0:	6818      	ldr	r0, [r3, #0]
   204f2:	f7f8 fc93 	bl	18e1c <get_le16>
   204f6:	4605      	mov	r5, r0
        os_mbuf_adj(*rxom, 2);
   204f8:	2102      	movs	r1, #2
   204fa:	6820      	ldr	r0, [r4, #0]
   204fc:	f7f9 f955 	bl	197aa <os_mbuf_adj>
        rc = ble_att_svr_read_handle(conn_handle, handle, 0, txom, att_err);
   20500:	9600      	str	r6, [sp, #0]
   20502:	9b03      	ldr	r3, [sp, #12]
   20504:	2200      	movs	r2, #0
   20506:	4629      	mov	r1, r5
   20508:	4640      	mov	r0, r8
   2050a:	f7ff ffa9 	bl	20460 <ble_att_svr_read_handle>
        if (rc != 0) {
   2050e:	2800      	cmp	r0, #0
   20510:	d0df      	beq.n	204d2 <ble_att_svr_build_read_mult_rsp+0x42>
            *err_handle = handle;
   20512:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   20514:	8015      	strh	r5, [r2, #0]
        rc = ble_att_svr_read_handle(conn_handle, handle, 0, txom, att_err);
   20516:	4682      	mov	sl, r0
            goto done;
   20518:	e7ce      	b.n	204b8 <ble_att_svr_build_read_mult_rsp+0x28>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   2051a:	2311      	movs	r3, #17
   2051c:	7033      	strb	r3, [r6, #0]
        *err_handle = 0;
   2051e:	2300      	movs	r3, #0
   20520:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   20522:	8013      	strh	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   20524:	f04f 0a06 	mov.w	sl, #6
        goto done;
   20528:	e7c6      	b.n	204b8 <ble_att_svr_build_read_mult_rsp+0x28>
            *err_handle = 0;
   2052a:	2200      	movs	r2, #0
   2052c:	990c      	ldr	r1, [sp, #48]	; 0x30
   2052e:	800a      	strh	r2, [r1, #0]
        rc = ble_att_svr_pullup_req_base(rxom, 2, att_err);
   20530:	4682      	mov	sl, r0
            goto done;
   20532:	e7c1      	b.n	204b8 <ble_att_svr_build_read_mult_rsp+0x28>

00020534 <ble_att_svr_read_local>:
{
   20534:	b570      	push	{r4, r5, r6, lr}
   20536:	b082      	sub	sp, #8
   20538:	4604      	mov	r4, r0
   2053a:	460d      	mov	r5, r1
    om = ble_hs_mbuf_bare_pkt();
   2053c:	f007 ffe5 	bl	2850a <ble_hs_mbuf_bare_pkt>
    if (om == NULL) {
   20540:	4606      	mov	r6, r0
   20542:	b158      	cbz	r0, 2055c <ble_att_svr_read_local+0x28>
    rc = ble_att_svr_read_handle(BLE_HS_CONN_HANDLE_NONE, attr_handle, 0, om,
   20544:	2200      	movs	r2, #0
   20546:	9200      	str	r2, [sp, #0]
   20548:	4603      	mov	r3, r0
   2054a:	4621      	mov	r1, r4
   2054c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   20550:	f7ff ff86 	bl	20460 <ble_att_svr_read_handle>
    if (rc != 0) {
   20554:	4604      	mov	r4, r0
   20556:	b910      	cbnz	r0, 2055e <ble_att_svr_read_local+0x2a>
    *out_om = om;
   20558:	602e      	str	r6, [r5, #0]
    return 0;
   2055a:	e003      	b.n	20564 <ble_att_svr_read_local+0x30>
        rc = BLE_HS_ENOMEM;
   2055c:	2406      	movs	r4, #6
    os_mbuf_free_chain(om);
   2055e:	4630      	mov	r0, r6
   20560:	f7f9 f855 	bl	1960e <os_mbuf_free_chain>
}
   20564:	4620      	mov	r0, r4
   20566:	b002      	add	sp, #8
   20568:	bd70      	pop	{r4, r5, r6, pc}

0002056a <ble_att_svr_tx_error_rsp>:
{
   2056a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2056c:	4605      	mov	r5, r0
   2056e:	460c      	mov	r4, r1
   20570:	4617      	mov	r7, r2
   20572:	461e      	mov	r6, r3
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_ERROR_RSP, sizeof(*rsp), txom);
   20574:	460a      	mov	r2, r1
   20576:	2104      	movs	r1, #4
   20578:	2001      	movs	r0, #1
   2057a:	f7ff f864 	bl	1f646 <ble_att_cmd_prepare>
    if (rsp == NULL) {
   2057e:	b150      	cbz	r0, 20596 <ble_att_svr_tx_error_rsp+0x2c>
    rsp->baep_req_op = req_op;
   20580:	7007      	strb	r7, [r0, #0]
    rsp->baep_handle = htole16(handle);
   20582:	f8a0 6001 	strh.w	r6, [r0, #1]
    rsp->baep_error_code = error_code;
   20586:	f89d 2018 	ldrb.w	r2, [sp, #24]
   2058a:	70c2      	strb	r2, [r0, #3]
    return ble_att_tx(conn_handle, txom);
   2058c:	4621      	mov	r1, r4
   2058e:	4628      	mov	r0, r5
   20590:	f7ff f87a 	bl	1f688 <ble_att_tx>
}
   20594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   20596:	2006      	movs	r0, #6
   20598:	e7fc      	b.n	20594 <ble_att_svr_tx_error_rsp+0x2a>
	...

0002059c <ble_att_svr_tx_rsp>:
{
   2059c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   205a0:	b085      	sub	sp, #20
   205a2:	4607      	mov	r7, r0
   205a4:	4614      	mov	r4, r2
   205a6:	461e      	mov	r6, r3
   205a8:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
    if (hs_status != 0 && err_status == 0) {
   205ac:	4689      	mov	r9, r1
   205ae:	b111      	cbz	r1, 205b6 <ble_att_svr_tx_rsp+0x1a>
   205b0:	f1b8 0f00 	cmp.w	r8, #0
   205b4:	d03d      	beq.n	20632 <ble_att_svr_tx_rsp+0x96>
        ble_hs_lock();
   205b6:	f005 ffbf 	bl	26538 <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   205ba:	aa03      	add	r2, sp, #12
   205bc:	a902      	add	r1, sp, #8
   205be:	4638      	mov	r0, r7
   205c0:	f7fe fb1f 	bl	1ec02 <ble_att_conn_chan_find>
        if (rc != 0) {
   205c4:	4605      	mov	r5, r0
   205c6:	b918      	cbnz	r0, 205d0 <ble_att_svr_tx_rsp+0x34>
            if (hs_status == 0) {
   205c8:	f1b9 0f00 	cmp.w	r9, #0
   205cc:	d018      	beq.n	20600 <ble_att_svr_tx_rsp+0x64>
   205ce:	464d      	mov	r5, r9
        ble_hs_unlock();
   205d0:	f005 ffb6 	bl	26540 <ble_hs_unlock>
        if (hs_status != 0) {
   205d4:	b375      	cbz	r5, 20634 <ble_att_svr_tx_rsp+0x98>
            STATS_INC(ble_att_stats, error_rsp_tx);
   205d6:	4a1b      	ldr	r2, [pc, #108]	; (20644 <ble_att_svr_tx_rsp+0xa8>)
   205d8:	6913      	ldr	r3, [r2, #16]
   205da:	3301      	adds	r3, #1
   205dc:	6113      	str	r3, [r2, #16]
            if (om == NULL) {
   205de:	b324      	cbz	r4, 2062a <ble_att_svr_tx_rsp+0x8e>
                os_mbuf_adj(om, OS_MBUF_PKTLEN(om));
   205e0:	8a21      	ldrh	r1, [r4, #16]
   205e2:	4620      	mov	r0, r4
   205e4:	f7f9 f8e1 	bl	197aa <os_mbuf_adj>
            if (om != NULL) {
   205e8:	b324      	cbz	r4, 20634 <ble_att_svr_tx_rsp+0x98>
                ble_att_svr_tx_error_rsp(conn_handle, om, att_op,
   205ea:	f8cd 8000 	str.w	r8, [sp]
   205ee:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   205f2:	4632      	mov	r2, r6
   205f4:	4621      	mov	r1, r4
   205f6:	4638      	mov	r0, r7
   205f8:	f7ff ffb7 	bl	2056a <ble_att_svr_tx_error_rsp>
                om = NULL;
   205fc:	2400      	movs	r4, #0
   205fe:	e019      	b.n	20634 <ble_att_svr_tx_rsp+0x98>
                ble_att_inc_tx_stat(om->om_data[0]);
   20600:	6823      	ldr	r3, [r4, #0]
   20602:	7818      	ldrb	r0, [r3, #0]
   20604:	f7fe fb04 	bl	1ec10 <ble_att_inc_tx_stat>
                ble_att_truncate_to_mtu(chan, om);
   20608:	4621      	mov	r1, r4
   2060a:	9803      	ldr	r0, [sp, #12]
   2060c:	f7fe fc11 	bl	1ee32 <ble_att_truncate_to_mtu>
                hs_status = ble_l2cap_tx(conn, chan, om);
   20610:	4622      	mov	r2, r4
   20612:	9903      	ldr	r1, [sp, #12]
   20614:	9802      	ldr	r0, [sp, #8]
   20616:	f008 fca1 	bl	28f5c <ble_l2cap_tx>
                if (hs_status != 0) {
   2061a:	4605      	mov	r5, r0
   2061c:	b908      	cbnz	r0, 20622 <ble_att_svr_tx_rsp+0x86>
                om = NULL;
   2061e:	2400      	movs	r4, #0
   20620:	e7d6      	b.n	205d0 <ble_att_svr_tx_rsp+0x34>
                    err_status = BLE_ATT_ERR_UNLIKELY;
   20622:	f04f 080e 	mov.w	r8, #14
                om = NULL;
   20626:	2400      	movs	r4, #0
   20628:	e7d2      	b.n	205d0 <ble_att_svr_tx_rsp+0x34>
                om = ble_hs_mbuf_l2cap_pkt();
   2062a:	f007 ff78 	bl	2851e <ble_hs_mbuf_l2cap_pkt>
   2062e:	4604      	mov	r4, r0
   20630:	e7da      	b.n	205e8 <ble_att_svr_tx_rsp+0x4c>
   20632:	460d      	mov	r5, r1
    os_mbuf_free_chain(om);
   20634:	4620      	mov	r0, r4
   20636:	f7f8 ffea 	bl	1960e <os_mbuf_free_chain>
}
   2063a:	4628      	mov	r0, r5
   2063c:	b005      	add	sp, #20
   2063e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20642:	bf00      	nop
   20644:	100055a4 	.word	0x100055a4

00020648 <ble_att_svr_rx_mtu>:
{
   20648:	b570      	push	{r4, r5, r6, lr}
   2064a:	b086      	sub	sp, #24
   2064c:	4605      	mov	r5, r0
   2064e:	460c      	mov	r4, r1
    txom = NULL;
   20650:	2300      	movs	r3, #0
   20652:	9303      	str	r3, [sp, #12]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*cmd), &att_err);
   20654:	f10d 020b 	add.w	r2, sp, #11
   20658:	2102      	movs	r1, #2
   2065a:	4620      	mov	r0, r4
   2065c:	f7ff f9ca 	bl	1f9f4 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   20660:	b180      	cbz	r0, 20684 <ble_att_svr_rx_mtu+0x3c>
   20662:	4601      	mov	r1, r0
    mtu = 0;
   20664:	2600      	movs	r6, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_MTU_REQ,
   20666:	2300      	movs	r3, #0
   20668:	9301      	str	r3, [sp, #4]
   2066a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2066e:	9300      	str	r3, [sp, #0]
   20670:	2302      	movs	r3, #2
   20672:	9a03      	ldr	r2, [sp, #12]
   20674:	4628      	mov	r0, r5
   20676:	f7ff ff91 	bl	2059c <ble_att_svr_tx_rsp>
    if (rc == 0) {
   2067a:	4604      	mov	r4, r0
   2067c:	b170      	cbz	r0, 2069c <ble_att_svr_rx_mtu+0x54>
}
   2067e:	4620      	mov	r0, r4
   20680:	b006      	add	sp, #24
   20682:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_att_mtu_cmd *)(*rxom)->om_data;
   20684:	6823      	ldr	r3, [r4, #0]
   20686:	681b      	ldr	r3, [r3, #0]
    mtu = le16toh(cmd->bamc_mtu);
   20688:	881e      	ldrh	r6, [r3, #0]
    rc = ble_att_svr_build_mtu_rsp(conn_handle, rxom, &txom, &att_err);
   2068a:	f10d 030b 	add.w	r3, sp, #11
   2068e:	aa03      	add	r2, sp, #12
   20690:	4621      	mov	r1, r4
   20692:	4628      	mov	r0, r5
   20694:	f7ff f9ba 	bl	1fa0c <ble_att_svr_build_mtu_rsp>
   20698:	4601      	mov	r1, r0
    if (rc != 0) {
   2069a:	e7e4      	b.n	20666 <ble_att_svr_rx_mtu+0x1e>
        ble_hs_lock();
   2069c:	f005 ff4c 	bl	26538 <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   206a0:	aa05      	add	r2, sp, #20
   206a2:	a904      	add	r1, sp, #16
   206a4:	4628      	mov	r0, r5
   206a6:	f7fe faac 	bl	1ec02 <ble_att_conn_chan_find>
        if (rc == 0) {
   206aa:	4604      	mov	r4, r0
   206ac:	b148      	cbz	r0, 206c2 <ble_att_svr_rx_mtu+0x7a>
        ble_hs_unlock();
   206ae:	f005 ff47 	bl	26540 <ble_hs_unlock>
        if (rc == 0) {
   206b2:	2c00      	cmp	r4, #0
   206b4:	d1e3      	bne.n	2067e <ble_att_svr_rx_mtu+0x36>
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
   206b6:	4632      	mov	r2, r6
   206b8:	2104      	movs	r1, #4
   206ba:	4628      	mov	r0, r5
   206bc:	f002 fb36 	bl	22d2c <ble_gap_mtu_event>
    return rc;
   206c0:	e7dd      	b.n	2067e <ble_att_svr_rx_mtu+0x36>
            ble_att_set_peer_mtu(chan, mtu);
   206c2:	4631      	mov	r1, r6
   206c4:	9805      	ldr	r0, [sp, #20]
   206c6:	f7fe fb9f 	bl	1ee08 <ble_att_set_peer_mtu>
            chan->flags |= BLE_L2CAP_CHAN_F_TXED_MTU;
   206ca:	9805      	ldr	r0, [sp, #20]
   206cc:	7b83      	ldrb	r3, [r0, #14]
   206ce:	f043 0301 	orr.w	r3, r3, #1
   206d2:	7383      	strb	r3, [r0, #14]
            mtu = ble_att_chan_mtu(chan);
   206d4:	f7fe fb9d 	bl	1ee12 <ble_att_chan_mtu>
   206d8:	4606      	mov	r6, r0
   206da:	e7e8      	b.n	206ae <ble_att_svr_rx_mtu+0x66>

000206dc <ble_att_svr_rx_find_info>:
{
   206dc:	b570      	push	{r4, r5, r6, lr}
   206de:	b084      	sub	sp, #16
   206e0:	4606      	mov	r6, r0
   206e2:	460c      	mov	r4, r1
    txom = NULL;
   206e4:	2300      	movs	r3, #0
   206e6:	9303      	str	r3, [sp, #12]
    att_err = 0;
   206e8:	f88d 300b 	strb.w	r3, [sp, #11]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   206ec:	f10d 020b 	add.w	r2, sp, #11
   206f0:	2104      	movs	r1, #4
   206f2:	4620      	mov	r0, r4
   206f4:	f7ff f97e 	bl	1f9f4 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   206f8:	bb20      	cbnz	r0, 20744 <ble_att_svr_rx_find_info+0x68>
    req = (struct ble_att_find_info_req *)(*rxom)->om_data;
   206fa:	6823      	ldr	r3, [r4, #0]
   206fc:	681b      	ldr	r3, [r3, #0]
    start_handle = le16toh(req->bafq_start_handle);
   206fe:	881d      	ldrh	r5, [r3, #0]
    end_handle = le16toh(req->bafq_end_handle);
   20700:	885a      	ldrh	r2, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   20702:	4295      	cmp	r5, r2
   20704:	d800      	bhi.n	20708 <ble_att_svr_rx_find_info+0x2c>
   20706:	b975      	cbnz	r5, 20726 <ble_att_svr_rx_find_info+0x4a>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   20708:	2301      	movs	r3, #1
   2070a:	f88d 300b 	strb.w	r3, [sp, #11]
        rc = BLE_HS_EBADDATA;
   2070e:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_FIND_INFO_REQ,
   20710:	9501      	str	r5, [sp, #4]
   20712:	f89d 300b 	ldrb.w	r3, [sp, #11]
   20716:	9300      	str	r3, [sp, #0]
   20718:	2304      	movs	r3, #4
   2071a:	9a03      	ldr	r2, [sp, #12]
   2071c:	4630      	mov	r0, r6
   2071e:	f7ff ff3d 	bl	2059c <ble_att_svr_tx_rsp>
}
   20722:	b004      	add	sp, #16
   20724:	bd70      	pop	{r4, r5, r6, pc}
    rc = ble_att_svr_build_find_info_rsp(conn_handle,
   20726:	f10d 030b 	add.w	r3, sp, #11
   2072a:	9301      	str	r3, [sp, #4]
   2072c:	ab03      	add	r3, sp, #12
   2072e:	9300      	str	r3, [sp, #0]
   20730:	4623      	mov	r3, r4
   20732:	4629      	mov	r1, r5
   20734:	4630      	mov	r0, r6
   20736:	f7ff fa33 	bl	1fba0 <ble_att_svr_build_find_info_rsp>
    if (rc != 0) {
   2073a:	4601      	mov	r1, r0
   2073c:	2800      	cmp	r0, #0
   2073e:	d1e7      	bne.n	20710 <ble_att_svr_rx_find_info+0x34>
    err_handle = 0;
   20740:	2500      	movs	r5, #0
   20742:	e7e5      	b.n	20710 <ble_att_svr_rx_find_info+0x34>
   20744:	4601      	mov	r1, r0
        err_handle = 0;
   20746:	2500      	movs	r5, #0
   20748:	e7e2      	b.n	20710 <ble_att_svr_rx_find_info+0x34>

0002074a <ble_att_svr_rx_find_type_value>:
{
   2074a:	b570      	push	{r4, r5, r6, lr}
   2074c:	b088      	sub	sp, #32
   2074e:	4605      	mov	r5, r0
   20750:	460c      	mov	r4, r1
    txom = NULL;
   20752:	2300      	movs	r3, #0
   20754:	9306      	str	r3, [sp, #24]
    att_err = 0;
   20756:	f88d 3017 	strb.w	r3, [sp, #23]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   2075a:	f10d 0217 	add.w	r2, sp, #23
   2075e:	2106      	movs	r1, #6
   20760:	4620      	mov	r0, r4
   20762:	f7ff f947 	bl	1f9f4 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   20766:	bb58      	cbnz	r0, 207c0 <ble_att_svr_rx_find_type_value+0x76>
    req = (struct ble_att_find_type_value_req *)(*rxom)->om_data;
   20768:	6823      	ldr	r3, [r4, #0]
   2076a:	681b      	ldr	r3, [r3, #0]
    start_handle = le16toh(req->bavq_start_handle);
   2076c:	881e      	ldrh	r6, [r3, #0]
    end_handle = le16toh(req->bavq_end_handle);
   2076e:	885a      	ldrh	r2, [r3, #2]
    attr_type = (ble_uuid16_t) BLE_UUID16_INIT(le16toh(req->bavq_attr_type));
   20770:	889b      	ldrh	r3, [r3, #4]
   20772:	2110      	movs	r1, #16
   20774:	f88d 101c 	strb.w	r1, [sp, #28]
   20778:	f8ad 301e 	strh.w	r3, [sp, #30]
    if (start_handle > end_handle || start_handle == 0) {
   2077c:	4296      	cmp	r6, r2
   2077e:	d800      	bhi.n	20782 <ble_att_svr_rx_find_type_value+0x38>
   20780:	b976      	cbnz	r6, 207a0 <ble_att_svr_rx_find_type_value+0x56>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   20782:	2301      	movs	r3, #1
   20784:	f88d 3017 	strb.w	r3, [sp, #23]
        rc = BLE_HS_EBADDATA;
   20788:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom,
   2078a:	9601      	str	r6, [sp, #4]
   2078c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   20790:	9300      	str	r3, [sp, #0]
   20792:	2306      	movs	r3, #6
   20794:	9a06      	ldr	r2, [sp, #24]
   20796:	4628      	mov	r0, r5
   20798:	f7ff ff00 	bl	2059c <ble_att_svr_tx_rsp>
}
   2079c:	b008      	add	sp, #32
   2079e:	bd70      	pop	{r4, r5, r6, pc}
    rc = ble_att_svr_build_find_type_value_rsp(conn_handle, start_handle,
   207a0:	f10d 0317 	add.w	r3, sp, #23
   207a4:	9302      	str	r3, [sp, #8]
   207a6:	ab06      	add	r3, sp, #24
   207a8:	9301      	str	r3, [sp, #4]
   207aa:	9400      	str	r4, [sp, #0]
   207ac:	9b07      	ldr	r3, [sp, #28]
   207ae:	4631      	mov	r1, r6
   207b0:	4628      	mov	r0, r5
   207b2:	f7ff fb65 	bl	1fe80 <ble_att_svr_build_find_type_value_rsp>
    if (rc != 0) {
   207b6:	4601      	mov	r1, r0
   207b8:	2800      	cmp	r0, #0
   207ba:	d1e6      	bne.n	2078a <ble_att_svr_rx_find_type_value+0x40>
    err_handle = 0;
   207bc:	2600      	movs	r6, #0
   207be:	e7e4      	b.n	2078a <ble_att_svr_rx_find_type_value+0x40>
   207c0:	4601      	mov	r1, r0
   207c2:	2600      	movs	r6, #0
   207c4:	e7e1      	b.n	2078a <ble_att_svr_rx_find_type_value+0x40>

000207c6 <ble_att_svr_rx_read_type>:
{
   207c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   207ca:	b08c      	sub	sp, #48	; 0x30
   207cc:	4605      	mov	r5, r0
   207ce:	460c      	mov	r4, r1
    txom = NULL;
   207d0:	2300      	movs	r3, #0
   207d2:	930b      	str	r3, [sp, #44]	; 0x2c
    err_handle = 0;
   207d4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    att_err = 0;
   207d8:	f88d 3013 	strb.w	r3, [sp, #19]
    pktlen = OS_MBUF_PKTLEN(*rxom);
   207dc:	680b      	ldr	r3, [r1, #0]
   207de:	8a1e      	ldrh	r6, [r3, #16]
    if (pktlen != sizeof(*req) + 2 && pktlen != sizeof(*req) + 16) {
   207e0:	2e06      	cmp	r6, #6
   207e2:	d001      	beq.n	207e8 <ble_att_svr_rx_read_type+0x22>
   207e4:	2e14      	cmp	r6, #20
   207e6:	d132      	bne.n	2084e <ble_att_svr_rx_read_type+0x88>
    rc = ble_att_svr_pullup_req_base(rxom, pktlen, &att_err);
   207e8:	f10d 0213 	add.w	r2, sp, #19
   207ec:	4631      	mov	r1, r6
   207ee:	4620      	mov	r0, r4
   207f0:	f7ff f900 	bl	1f9f4 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   207f4:	4601      	mov	r1, r0
   207f6:	bb58      	cbnz	r0, 20850 <ble_att_svr_rx_read_type+0x8a>
    req = (struct ble_att_read_type_req *)(*rxom)->om_data;
   207f8:	6821      	ldr	r1, [r4, #0]
   207fa:	680b      	ldr	r3, [r1, #0]
    start_handle = le16toh(req->batq_start_handle);
   207fc:	881a      	ldrh	r2, [r3, #0]
   207fe:	b297      	uxth	r7, r2
    end_handle = le16toh(req->batq_end_handle);
   20800:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   20804:	4547      	cmp	r7, r8
   20806:	d800      	bhi.n	2080a <ble_att_svr_rx_read_type+0x44>
   20808:	b937      	cbnz	r7, 20818 <ble_att_svr_rx_read_type+0x52>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   2080a:	2301      	movs	r3, #1
   2080c:	f88d 3013 	strb.w	r3, [sp, #19]
        err_handle = start_handle;
   20810:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
        rc = BLE_HS_EBADDATA;
   20814:	210a      	movs	r1, #10
        goto done;
   20816:	e01b      	b.n	20850 <ble_att_svr_rx_read_type+0x8a>
    rc = ble_uuid_init_from_att_mbuf(&uuid, *rxom, sizeof(*req),
   20818:	1f33      	subs	r3, r6, #4
   2081a:	2204      	movs	r2, #4
   2081c:	a805      	add	r0, sp, #20
   2081e:	f009 f955 	bl	29acc <ble_uuid_init_from_att_mbuf>
    if (rc != 0) {
   20822:	b118      	cbz	r0, 2082c <ble_att_svr_rx_read_type+0x66>
        att_err = BLE_ATT_ERR_INVALID_PDU;
   20824:	2104      	movs	r1, #4
   20826:	f88d 1013 	strb.w	r1, [sp, #19]
        goto done;
   2082a:	e011      	b.n	20850 <ble_att_svr_rx_read_type+0x8a>
    rc = ble_att_svr_build_read_type_rsp(conn_handle, start_handle, end_handle,
   2082c:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   20830:	9303      	str	r3, [sp, #12]
   20832:	f10d 0313 	add.w	r3, sp, #19
   20836:	9302      	str	r3, [sp, #8]
   20838:	ab0b      	add	r3, sp, #44	; 0x2c
   2083a:	9301      	str	r3, [sp, #4]
   2083c:	9400      	str	r4, [sp, #0]
   2083e:	ab05      	add	r3, sp, #20
   20840:	4642      	mov	r2, r8
   20842:	4639      	mov	r1, r7
   20844:	4628      	mov	r0, r5
   20846:	f7ff fd61 	bl	2030c <ble_att_svr_build_read_type_rsp>
   2084a:	4601      	mov	r1, r0
    if (rc != 0) {
   2084c:	e000      	b.n	20850 <ble_att_svr_rx_read_type+0x8a>
        rc = BLE_HS_EBADDATA;
   2084e:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_TYPE_REQ,
   20850:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   20854:	9301      	str	r3, [sp, #4]
   20856:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2085a:	9300      	str	r3, [sp, #0]
   2085c:	2308      	movs	r3, #8
   2085e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   20860:	4628      	mov	r0, r5
   20862:	f7ff fe9b 	bl	2059c <ble_att_svr_tx_rsp>
}
   20866:	b00c      	add	sp, #48	; 0x30
   20868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002086c <ble_att_svr_rx_read>:
{
   2086c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20870:	b084      	sub	sp, #16
   20872:	4605      	mov	r5, r0
   20874:	460c      	mov	r4, r1
    att_err = 0;
   20876:	2300      	movs	r3, #0
   20878:	f88d 300f 	strb.w	r3, [sp, #15]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   2087c:	f10d 020f 	add.w	r2, sp, #15
   20880:	2102      	movs	r1, #2
   20882:	4620      	mov	r0, r4
   20884:	f7ff f8b6 	bl	1f9f4 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   20888:	b170      	cbz	r0, 208a8 <ble_att_svr_rx_read+0x3c>
   2088a:	4601      	mov	r1, r0
    err_handle = 0;
   2088c:	2600      	movs	r6, #0
    txom = NULL;
   2088e:	4637      	mov	r7, r6
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_REQ,
   20890:	9601      	str	r6, [sp, #4]
   20892:	f89d 300f 	ldrb.w	r3, [sp, #15]
   20896:	9300      	str	r3, [sp, #0]
   20898:	230a      	movs	r3, #10
   2089a:	463a      	mov	r2, r7
   2089c:	4628      	mov	r0, r5
   2089e:	f7ff fe7d 	bl	2059c <ble_att_svr_tx_rsp>
}
   208a2:	b004      	add	sp, #16
   208a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    req = (struct ble_att_read_req *)(*rxom)->om_data;
   208a8:	6827      	ldr	r7, [r4, #0]
   208aa:	683b      	ldr	r3, [r7, #0]
    err_handle = le16toh(req->barq_handle);
   208ac:	881e      	ldrh	r6, [r3, #0]
    *rxom = NULL;
   208ae:	f04f 0800 	mov.w	r8, #0
   208b2:	f8c4 8000 	str.w	r8, [r4]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   208b6:	8a39      	ldrh	r1, [r7, #16]
   208b8:	4638      	mov	r0, r7
   208ba:	f7f8 ff76 	bl	197aa <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_RSP, 0, txom) == NULL) {
   208be:	463a      	mov	r2, r7
   208c0:	4641      	mov	r1, r8
   208c2:	200b      	movs	r0, #11
   208c4:	f7fe febf 	bl	1f646 <ble_att_cmd_prepare>
   208c8:	b150      	cbz	r0, 208e0 <ble_att_svr_rx_read+0x74>
    rc = ble_att_svr_read_handle(conn_handle, err_handle, 0, txom, &att_err);
   208ca:	f10d 030f 	add.w	r3, sp, #15
   208ce:	9300      	str	r3, [sp, #0]
   208d0:	463b      	mov	r3, r7
   208d2:	2200      	movs	r2, #0
   208d4:	4631      	mov	r1, r6
   208d6:	4628      	mov	r0, r5
   208d8:	f7ff fdc2 	bl	20460 <ble_att_svr_read_handle>
   208dc:	4601      	mov	r1, r0
done:
   208de:	e7d7      	b.n	20890 <ble_att_svr_rx_read+0x24>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   208e0:	2311      	movs	r3, #17
   208e2:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOMEM;
   208e6:	2106      	movs	r1, #6
        goto done;
   208e8:	e7d2      	b.n	20890 <ble_att_svr_rx_read+0x24>

000208ea <ble_att_svr_rx_read_blob>:
{
   208ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   208ee:	b085      	sub	sp, #20
   208f0:	4605      	mov	r5, r0
   208f2:	460c      	mov	r4, r1
    att_err = 0;
   208f4:	2300      	movs	r3, #0
   208f6:	f88d 300f 	strb.w	r3, [sp, #15]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   208fa:	f10d 020f 	add.w	r2, sp, #15
   208fe:	2104      	movs	r1, #4
   20900:	4620      	mov	r0, r4
   20902:	f7ff f877 	bl	1f9f4 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   20906:	b170      	cbz	r0, 20926 <ble_att_svr_rx_read_blob+0x3c>
   20908:	4601      	mov	r1, r0
    err_handle = 0;
   2090a:	2700      	movs	r7, #0
    txom = NULL;
   2090c:	463e      	mov	r6, r7
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_BLOB_REQ,
   2090e:	9701      	str	r7, [sp, #4]
   20910:	f89d 300f 	ldrb.w	r3, [sp, #15]
   20914:	9300      	str	r3, [sp, #0]
   20916:	230c      	movs	r3, #12
   20918:	4632      	mov	r2, r6
   2091a:	4628      	mov	r0, r5
   2091c:	f7ff fe3e 	bl	2059c <ble_att_svr_tx_rsp>
}
   20920:	b005      	add	sp, #20
   20922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_read_blob_req *)(*rxom)->om_data;
   20926:	6826      	ldr	r6, [r4, #0]
   20928:	6833      	ldr	r3, [r6, #0]
    err_handle = le16toh(req->babq_handle);
   2092a:	881f      	ldrh	r7, [r3, #0]
    offset = le16toh(req->babq_offset);
   2092c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
    *rxom = NULL;
   20930:	f04f 0800 	mov.w	r8, #0
   20934:	f8c4 8000 	str.w	r8, [r4]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   20938:	8a31      	ldrh	r1, [r6, #16]
   2093a:	4630      	mov	r0, r6
   2093c:	f7f8 ff35 	bl	197aa <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_BLOB_RSP, 0, txom) == NULL) {
   20940:	4632      	mov	r2, r6
   20942:	4641      	mov	r1, r8
   20944:	200d      	movs	r0, #13
   20946:	f7fe fe7e 	bl	1f646 <ble_att_cmd_prepare>
   2094a:	b150      	cbz	r0, 20962 <ble_att_svr_rx_read_blob+0x78>
    rc = ble_att_svr_read_handle(conn_handle, err_handle, offset,
   2094c:	f10d 030f 	add.w	r3, sp, #15
   20950:	9300      	str	r3, [sp, #0]
   20952:	4633      	mov	r3, r6
   20954:	464a      	mov	r2, r9
   20956:	4639      	mov	r1, r7
   20958:	4628      	mov	r0, r5
   2095a:	f7ff fd81 	bl	20460 <ble_att_svr_read_handle>
   2095e:	4601      	mov	r1, r0
    if (rc != 0) {
   20960:	e7d5      	b.n	2090e <ble_att_svr_rx_read_blob+0x24>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   20962:	2311      	movs	r3, #17
   20964:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOMEM;
   20968:	2106      	movs	r1, #6
        goto done;
   2096a:	e7d0      	b.n	2090e <ble_att_svr_rx_read_blob+0x24>

0002096c <ble_att_svr_rx_read_mult>:
{
   2096c:	b510      	push	{r4, lr}
   2096e:	b084      	sub	sp, #16
   20970:	4604      	mov	r4, r0
    txom = NULL;
   20972:	2300      	movs	r3, #0
   20974:	9303      	str	r3, [sp, #12]
    err_handle = 0;
   20976:	f8ad 300a 	strh.w	r3, [sp, #10]
    att_err = 0;
   2097a:	f88d 3009 	strb.w	r3, [sp, #9]
    rc = ble_att_svr_build_read_mult_rsp(conn_handle, rxom, &txom, &att_err,
   2097e:	f10d 030a 	add.w	r3, sp, #10
   20982:	9300      	str	r3, [sp, #0]
   20984:	f10d 0309 	add.w	r3, sp, #9
   20988:	aa03      	add	r2, sp, #12
   2098a:	f7ff fd81 	bl	20490 <ble_att_svr_build_read_mult_rsp>
   2098e:	4601      	mov	r1, r0
    return ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_MULT_REQ,
   20990:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   20994:	9301      	str	r3, [sp, #4]
   20996:	f89d 3009 	ldrb.w	r3, [sp, #9]
   2099a:	9300      	str	r3, [sp, #0]
   2099c:	230e      	movs	r3, #14
   2099e:	9a03      	ldr	r2, [sp, #12]
   209a0:	4620      	mov	r0, r4
   209a2:	f7ff fdfb 	bl	2059c <ble_att_svr_tx_rsp>
}
   209a6:	b004      	add	sp, #16
   209a8:	bd10      	pop	{r4, pc}

000209aa <ble_att_svr_rx_read_group_type>:
{
   209aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   209ae:	b08c      	sub	sp, #48	; 0x30
   209b0:	4605      	mov	r5, r0
   209b2:	460c      	mov	r4, r1
    txom = NULL;
   209b4:	2300      	movs	r3, #0
   209b6:	930b      	str	r3, [sp, #44]	; 0x2c
    err_handle = 0;
   209b8:	f8ad 3016 	strh.w	r3, [sp, #22]
    att_err = 0;
   209bc:	f88d 3015 	strb.w	r3, [sp, #21]
    pktlen = OS_MBUF_PKTLEN(*rxom);
   209c0:	680b      	ldr	r3, [r1, #0]
   209c2:	8a19      	ldrh	r1, [r3, #16]
    if (pktlen != sizeof(*req) + 2 && pktlen != sizeof(*req) + 16) {
   209c4:	2906      	cmp	r1, #6
   209c6:	d001      	beq.n	209cc <ble_att_svr_rx_read_group_type+0x22>
   209c8:	2914      	cmp	r1, #20
   209ca:	d140      	bne.n	20a4e <ble_att_svr_rx_read_group_type+0xa4>
    rc = ble_att_svr_pullup_req_base(rxom, pktlen, &att_err);
   209cc:	f10d 0215 	add.w	r2, sp, #21
   209d0:	4620      	mov	r0, r4
   209d2:	f7ff f80f 	bl	1f9f4 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   209d6:	4601      	mov	r1, r0
   209d8:	2800      	cmp	r0, #0
   209da:	d139      	bne.n	20a50 <ble_att_svr_rx_read_group_type+0xa6>
    req = (struct ble_att_read_group_type_req *)(*rxom)->om_data;
   209dc:	6821      	ldr	r1, [r4, #0]
   209de:	680b      	ldr	r3, [r1, #0]
    start_handle = le16toh(req->bagq_start_handle);
   209e0:	881e      	ldrh	r6, [r3, #0]
   209e2:	b2b7      	uxth	r7, r6
    end_handle = le16toh(req->bagq_end_handle);
   209e4:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   209e8:	4547      	cmp	r7, r8
   209ea:	d800      	bhi.n	209ee <ble_att_svr_rx_read_group_type+0x44>
   209ec:	b937      	cbnz	r7, 209fc <ble_att_svr_rx_read_group_type+0x52>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   209ee:	2301      	movs	r3, #1
   209f0:	f88d 3015 	strb.w	r3, [sp, #21]
        err_handle = start_handle;
   209f4:	f8ad 6016 	strh.w	r6, [sp, #22]
        rc = BLE_HS_EBADDATA;
   209f8:	210a      	movs	r1, #10
        goto done;
   209fa:	e029      	b.n	20a50 <ble_att_svr_rx_read_group_type+0xa6>
    om_uuid_len = OS_MBUF_PKTHDR(*rxom)->omp_len - sizeof(*req);
   209fc:	8a0b      	ldrh	r3, [r1, #16]
    rc = ble_uuid_init_from_att_mbuf(&uuid, *rxom, sizeof(*req), om_uuid_len);
   209fe:	3b04      	subs	r3, #4
   20a00:	2204      	movs	r2, #4
   20a02:	a806      	add	r0, sp, #24
   20a04:	f009 f862 	bl	29acc <ble_uuid_init_from_att_mbuf>
    if (rc != 0) {
   20a08:	b130      	cbz	r0, 20a18 <ble_att_svr_rx_read_group_type+0x6e>
        att_err = BLE_ATT_ERR_INVALID_PDU;
   20a0a:	2304      	movs	r3, #4
   20a0c:	f88d 3015 	strb.w	r3, [sp, #21]
        err_handle = start_handle;
   20a10:	f8ad 6016 	strh.w	r6, [sp, #22]
        rc = BLE_HS_EBADDATA;
   20a14:	210a      	movs	r1, #10
        goto done;
   20a16:	e01b      	b.n	20a50 <ble_att_svr_rx_read_group_type+0xa6>
    if (!ble_att_svr_is_valid_read_group_type(&uuid.u)) {
   20a18:	a806      	add	r0, sp, #24
   20a1a:	f7ff f956 	bl	1fcca <ble_att_svr_is_valid_read_group_type>
   20a1e:	b928      	cbnz	r0, 20a2c <ble_att_svr_rx_read_group_type+0x82>
        att_err = BLE_ATT_ERR_UNSUPPORTED_GROUP;
   20a20:	2110      	movs	r1, #16
   20a22:	f88d 1015 	strb.w	r1, [sp, #21]
        err_handle = start_handle;
   20a26:	f8ad 6016 	strh.w	r6, [sp, #22]
        goto done;
   20a2a:	e011      	b.n	20a50 <ble_att_svr_rx_read_group_type+0xa6>
    rc = ble_att_svr_build_read_group_type_rsp(conn_handle, start_handle,
   20a2c:	f10d 0316 	add.w	r3, sp, #22
   20a30:	9303      	str	r3, [sp, #12]
   20a32:	f10d 0315 	add.w	r3, sp, #21
   20a36:	9302      	str	r3, [sp, #8]
   20a38:	ab0b      	add	r3, sp, #44	; 0x2c
   20a3a:	9301      	str	r3, [sp, #4]
   20a3c:	9400      	str	r4, [sp, #0]
   20a3e:	ab06      	add	r3, sp, #24
   20a40:	4642      	mov	r2, r8
   20a42:	4639      	mov	r1, r7
   20a44:	4628      	mov	r0, r5
   20a46:	f7ff fa65 	bl	1ff14 <ble_att_svr_build_read_group_type_rsp>
   20a4a:	4601      	mov	r1, r0
    if (rc != 0) {
   20a4c:	e000      	b.n	20a50 <ble_att_svr_rx_read_group_type+0xa6>
        rc = BLE_HS_EBADDATA;
   20a4e:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom,
   20a50:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   20a54:	9301      	str	r3, [sp, #4]
   20a56:	f89d 3015 	ldrb.w	r3, [sp, #21]
   20a5a:	9300      	str	r3, [sp, #0]
   20a5c:	2310      	movs	r3, #16
   20a5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   20a60:	4628      	mov	r0, r5
   20a62:	f7ff fd9b 	bl	2059c <ble_att_svr_tx_rsp>
}
   20a66:	b00c      	add	sp, #48	; 0x30
   20a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020a6c <ble_att_svr_rx_write>:
{
   20a6c:	b570      	push	{r4, r5, r6, lr}
   20a6e:	b084      	sub	sp, #16
   20a70:	4605      	mov	r5, r0
   20a72:	460c      	mov	r4, r1
    txom = NULL;
   20a74:	2300      	movs	r3, #0
   20a76:	9303      	str	r3, [sp, #12]
    att_err = 0;
   20a78:	f88d 300b 	strb.w	r3, [sp, #11]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   20a7c:	f10d 020b 	add.w	r2, sp, #11
   20a80:	2102      	movs	r1, #2
   20a82:	4620      	mov	r0, r4
   20a84:	f7fe ffb6 	bl	1f9f4 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   20a88:	b160      	cbz	r0, 20aa4 <ble_att_svr_rx_write+0x38>
   20a8a:	4601      	mov	r1, r0
    handle = 0;
   20a8c:	2600      	movs	r6, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_WRITE_REQ,
   20a8e:	9601      	str	r6, [sp, #4]
   20a90:	f89d 300b 	ldrb.w	r3, [sp, #11]
   20a94:	9300      	str	r3, [sp, #0]
   20a96:	2312      	movs	r3, #18
   20a98:	9a03      	ldr	r2, [sp, #12]
   20a9a:	4628      	mov	r0, r5
   20a9c:	f7ff fd7e 	bl	2059c <ble_att_svr_tx_rsp>
}
   20aa0:	b004      	add	sp, #16
   20aa2:	bd70      	pop	{r4, r5, r6, pc}
    req = (struct ble_att_write_req *)(*rxom)->om_data;
   20aa4:	6823      	ldr	r3, [r4, #0]
   20aa6:	681b      	ldr	r3, [r3, #0]
    handle = le16toh(req->bawq_handle);
   20aa8:	881e      	ldrh	r6, [r3, #0]
    rc = ble_att_svr_build_write_rsp(rxom, &txom, &att_err);
   20aaa:	f10d 020b 	add.w	r2, sp, #11
   20aae:	a903      	add	r1, sp, #12
   20ab0:	4620      	mov	r0, r4
   20ab2:	f7fe fff4 	bl	1fa9e <ble_att_svr_build_write_rsp>
    if (rc != 0) {
   20ab6:	4601      	mov	r1, r0
   20ab8:	2800      	cmp	r0, #0
   20aba:	d1e8      	bne.n	20a8e <ble_att_svr_rx_write+0x22>
    os_mbuf_adj(*rxom, sizeof(*req));
   20abc:	2102      	movs	r1, #2
   20abe:	6820      	ldr	r0, [r4, #0]
   20ac0:	f7f8 fe73 	bl	197aa <os_mbuf_adj>
    rc = ble_att_svr_write_handle(conn_handle, handle, 0, rxom, &att_err);
   20ac4:	f10d 030b 	add.w	r3, sp, #11
   20ac8:	9300      	str	r3, [sp, #0]
   20aca:	4623      	mov	r3, r4
   20acc:	2200      	movs	r2, #0
   20ace:	4631      	mov	r1, r6
   20ad0:	4628      	mov	r0, r5
   20ad2:	f7ff fbb5 	bl	20240 <ble_att_svr_write_handle>
   20ad6:	4601      	mov	r1, r0
    if (rc != 0) {
   20ad8:	e7d9      	b.n	20a8e <ble_att_svr_rx_write+0x22>

00020ada <ble_att_svr_rx_write_no_rsp>:
{
   20ada:	b570      	push	{r4, r5, r6, lr}
   20adc:	b084      	sub	sp, #16
   20ade:	4605      	mov	r5, r0
   20ae0:	460c      	mov	r4, r1
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   20ae2:	f10d 020f 	add.w	r2, sp, #15
   20ae6:	2102      	movs	r1, #2
   20ae8:	4620      	mov	r0, r4
   20aea:	f7fe ff83 	bl	1f9f4 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   20aee:	4603      	mov	r3, r0
   20af0:	b110      	cbz	r0, 20af8 <ble_att_svr_rx_write_no_rsp+0x1e>
}
   20af2:	4618      	mov	r0, r3
   20af4:	b004      	add	sp, #16
   20af6:	bd70      	pop	{r4, r5, r6, pc}
    req = (struct ble_att_write_req *)(*rxom)->om_data;
   20af8:	6820      	ldr	r0, [r4, #0]
   20afa:	6803      	ldr	r3, [r0, #0]
    handle = le16toh(req->bawq_handle);
   20afc:	881e      	ldrh	r6, [r3, #0]
    os_mbuf_adj(*rxom, sizeof(*req));
   20afe:	2102      	movs	r1, #2
   20b00:	f7f8 fe53 	bl	197aa <os_mbuf_adj>
    return ble_att_svr_write_handle(conn_handle, handle, 0, rxom, &att_err);
   20b04:	f10d 030f 	add.w	r3, sp, #15
   20b08:	9300      	str	r3, [sp, #0]
   20b0a:	4623      	mov	r3, r4
   20b0c:	2200      	movs	r2, #0
   20b0e:	4631      	mov	r1, r6
   20b10:	4628      	mov	r0, r5
   20b12:	f7ff fb95 	bl	20240 <ble_att_svr_write_handle>
   20b16:	4603      	mov	r3, r0
   20b18:	e7eb      	b.n	20af2 <ble_att_svr_rx_write_no_rsp+0x18>

00020b1a <ble_att_svr_write_local>:
{
   20b1a:	b510      	push	{r4, lr}
   20b1c:	b084      	sub	sp, #16
   20b1e:	9103      	str	r1, [sp, #12]
    rc = ble_att_svr_write_handle(BLE_HS_CONN_HANDLE_NONE, attr_handle, 0,
   20b20:	2200      	movs	r2, #0
   20b22:	9200      	str	r2, [sp, #0]
   20b24:	ab03      	add	r3, sp, #12
   20b26:	4601      	mov	r1, r0
   20b28:	f64f 70ff 	movw	r0, #65535	; 0xffff
   20b2c:	f7ff fb88 	bl	20240 <ble_att_svr_write_handle>
   20b30:	4604      	mov	r4, r0
    os_mbuf_free_chain(om);
   20b32:	9803      	ldr	r0, [sp, #12]
   20b34:	f7f8 fd6b 	bl	1960e <os_mbuf_free_chain>
}
   20b38:	4620      	mov	r0, r4
   20b3a:	b004      	add	sp, #16
   20b3c:	bd10      	pop	{r4, pc}

00020b3e <ble_att_svr_prep_clear>:
{
   20b3e:	b510      	push	{r4, lr}
   20b40:	4604      	mov	r4, r0
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   20b42:	6820      	ldr	r0, [r4, #0]
   20b44:	b120      	cbz	r0, 20b50 <ble_att_svr_prep_clear+0x12>
        SLIST_REMOVE_HEAD(prep_list, bape_next);
   20b46:	6803      	ldr	r3, [r0, #0]
   20b48:	6023      	str	r3, [r4, #0]
        ble_att_svr_prep_free(entry);
   20b4a:	f7ff fa9f 	bl	2008c <ble_att_svr_prep_free>
   20b4e:	e7f8      	b.n	20b42 <ble_att_svr_prep_clear+0x4>
}
   20b50:	bd10      	pop	{r4, pc}

00020b52 <ble_att_svr_rx_prep_write>:
{
   20b52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20b56:	b085      	sub	sp, #20
   20b58:	4605      	mov	r5, r0
   20b5a:	460c      	mov	r4, r1
    att_err = 0;
   20b5c:	2300      	movs	r3, #0
   20b5e:	f88d 300f 	strb.w	r3, [sp, #15]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   20b62:	f10d 020f 	add.w	r2, sp, #15
   20b66:	2104      	movs	r1, #4
   20b68:	4620      	mov	r0, r4
   20b6a:	f7fe ff43 	bl	1f9f4 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   20b6e:	b178      	cbz	r0, 20b90 <ble_att_svr_rx_prep_write+0x3e>
   20b70:	4606      	mov	r6, r0
    err_handle = 0;
   20b72:	2700      	movs	r7, #0
    txom = NULL;
   20b74:	46b8      	mov	r8, r7
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_PREP_WRITE_REQ,
   20b76:	9701      	str	r7, [sp, #4]
   20b78:	f89d 300f 	ldrb.w	r3, [sp, #15]
   20b7c:	9300      	str	r3, [sp, #0]
   20b7e:	2316      	movs	r3, #22
   20b80:	4642      	mov	r2, r8
   20b82:	4631      	mov	r1, r6
   20b84:	4628      	mov	r0, r5
   20b86:	f7ff fd09 	bl	2059c <ble_att_svr_tx_rsp>
}
   20b8a:	b005      	add	sp, #20
   20b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_prep_write_cmd *)(*rxom)->om_data;
   20b90:	6823      	ldr	r3, [r4, #0]
   20b92:	f8d3 9000 	ldr.w	r9, [r3]
    err_handle = le16toh(req->bapc_handle);
   20b96:	f8b9 7000 	ldrh.w	r7, [r9]
    attr_entry = ble_att_svr_find_by_handle(le16toh(req->bapc_handle));
   20b9a:	4638      	mov	r0, r7
   20b9c:	f7ff fb44 	bl	20228 <ble_att_svr_find_by_handle>
    if (attr_entry == NULL) {
   20ba0:	4680      	mov	r8, r0
   20ba2:	b158      	cbz	r0, 20bbc <ble_att_svr_rx_prep_write+0x6a>
    rc = ble_att_svr_check_perms(conn_handle, 0, attr_entry, &att_err);
   20ba4:	f10d 030f 	add.w	r3, sp, #15
   20ba8:	4602      	mov	r2, r0
   20baa:	2100      	movs	r1, #0
   20bac:	4628      	mov	r0, r5
   20bae:	f7fe fe38 	bl	1f822 <ble_att_svr_check_perms>
    if (rc != 0) {
   20bb2:	4606      	mov	r6, r0
   20bb4:	b138      	cbz	r0, 20bc6 <ble_att_svr_rx_prep_write+0x74>
    txom = NULL;
   20bb6:	f04f 0800 	mov.w	r8, #0
   20bba:	e7dc      	b.n	20b76 <ble_att_svr_rx_prep_write+0x24>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   20bbc:	2301      	movs	r3, #1
   20bbe:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOENT;
   20bc2:	2605      	movs	r6, #5
        goto done;
   20bc4:	e7d7      	b.n	20b76 <ble_att_svr_rx_prep_write+0x24>
    ble_hs_lock();
   20bc6:	f005 fcb7 	bl	26538 <ble_hs_lock>
    rc = ble_att_svr_insert_prep_entry(conn_handle, le16toh(req->bapc_handle),
   20bca:	f8b9 1000 	ldrh.w	r1, [r9]
                                       le16toh(req->bapc_offset), *rxom,
   20bce:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    rc = ble_att_svr_insert_prep_entry(conn_handle, le16toh(req->bapc_handle),
   20bd2:	f10d 030f 	add.w	r3, sp, #15
   20bd6:	9300      	str	r3, [sp, #0]
   20bd8:	6823      	ldr	r3, [r4, #0]
   20bda:	4628      	mov	r0, r5
   20bdc:	f7ff fa8a 	bl	200f4 <ble_att_svr_insert_prep_entry>
   20be0:	4606      	mov	r6, r0
    ble_hs_unlock();
   20be2:	f005 fcad 	bl	26540 <ble_hs_unlock>
    txom = *rxom;
   20be6:	f8d4 8000 	ldr.w	r8, [r4]
    *rxom = NULL;
   20bea:	2300      	movs	r3, #0
   20bec:	6023      	str	r3, [r4, #0]
    if (rc != 0) {
   20bee:	2e00      	cmp	r6, #0
   20bf0:	d1c1      	bne.n	20b76 <ble_att_svr_rx_prep_write+0x24>
    os_mbuf_prepend(txom, 1);
   20bf2:	2101      	movs	r1, #1
   20bf4:	4640      	mov	r0, r8
   20bf6:	f7f8 fec5 	bl	19984 <os_mbuf_prepend>
    txom->om_data[0] = BLE_ATT_OP_PREP_WRITE_RSP;
   20bfa:	f8d8 3000 	ldr.w	r3, [r8]
   20bfe:	2217      	movs	r2, #23
   20c00:	701a      	strb	r2, [r3, #0]
    rc = 0;
   20c02:	e7b8      	b.n	20b76 <ble_att_svr_rx_prep_write+0x24>

00020c04 <ble_att_svr_rx_exec_write>:
{
   20c04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20c08:	b085      	sub	sp, #20
   20c0a:	4605      	mov	r5, r0
   20c0c:	460c      	mov	r4, r1
    err_handle = 0;
   20c0e:	2300      	movs	r3, #0
   20c10:	f8ad 300a 	strh.w	r3, [sp, #10]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   20c14:	f10d 0209 	add.w	r2, sp, #9
   20c18:	2101      	movs	r1, #1
   20c1a:	4620      	mov	r0, r4
   20c1c:	f7fe feea 	bl	1f9f4 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   20c20:	4607      	mov	r7, r0
   20c22:	b190      	cbz	r0, 20c4a <ble_att_svr_rx_exec_write+0x46>
        flags = 0;
   20c24:	f04f 0800 	mov.w	r8, #0
    txom = NULL;
   20c28:	4646      	mov	r6, r8
    if (rc == 0) {
   20c2a:	b337      	cbz	r7, 20c7a <ble_att_svr_rx_exec_write+0x76>
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_EXEC_WRITE_REQ,
   20c2c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   20c30:	9301      	str	r3, [sp, #4]
   20c32:	f89d 3009 	ldrb.w	r3, [sp, #9]
   20c36:	9300      	str	r3, [sp, #0]
   20c38:	2318      	movs	r3, #24
   20c3a:	4632      	mov	r2, r6
   20c3c:	4639      	mov	r1, r7
   20c3e:	4628      	mov	r0, r5
   20c40:	f7ff fcac 	bl	2059c <ble_att_svr_tx_rsp>
}
   20c44:	b005      	add	sp, #20
   20c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_exec_write_req *)(*rxom)->om_data;
   20c4a:	6826      	ldr	r6, [r4, #0]
   20c4c:	6833      	ldr	r3, [r6, #0]
    flags = req->baeq_flags;
   20c4e:	f893 8000 	ldrb.w	r8, [r3]
    *rxom = NULL;
   20c52:	f04f 0900 	mov.w	r9, #0
   20c56:	f8c4 9000 	str.w	r9, [r4]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   20c5a:	8a31      	ldrh	r1, [r6, #16]
   20c5c:	4630      	mov	r0, r6
   20c5e:	f7f8 fda4 	bl	197aa <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_EXEC_WRITE_RSP, 0, txom) == NULL) {
   20c62:	4632      	mov	r2, r6
   20c64:	4649      	mov	r1, r9
   20c66:	2019      	movs	r0, #25
   20c68:	f7fe fced 	bl	1f646 <ble_att_cmd_prepare>
   20c6c:	2800      	cmp	r0, #0
   20c6e:	d1dc      	bne.n	20c2a <ble_att_svr_rx_exec_write+0x26>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   20c70:	2311      	movs	r3, #17
   20c72:	f88d 3009 	strb.w	r3, [sp, #9]
        rc = BLE_HS_ENOMEM;
   20c76:	2706      	movs	r7, #6
        goto done;
   20c78:	e7d7      	b.n	20c2a <ble_att_svr_rx_exec_write+0x26>
        ble_hs_lock();
   20c7a:	f005 fc5d 	bl	26538 <ble_hs_lock>
        conn = ble_hs_conn_find_assert(conn_handle);
   20c7e:	4628      	mov	r0, r5
   20c80:	f006 fcf6 	bl	27670 <ble_hs_conn_find_assert>
        prep_list = conn->bhc_att_svr.basc_prep_list;
   20c84:	6c43      	ldr	r3, [r0, #68]	; 0x44
   20c86:	9303      	str	r3, [sp, #12]
        SLIST_INIT(&conn->bhc_att_svr.basc_prep_list);
   20c88:	2300      	movs	r3, #0
   20c8a:	6443      	str	r3, [r0, #68]	; 0x44
        ble_hs_unlock();
   20c8c:	f005 fc58 	bl	26540 <ble_hs_unlock>
        if (flags) {
   20c90:	f1b8 0f00 	cmp.w	r8, #0
   20c94:	d103      	bne.n	20c9e <ble_att_svr_rx_exec_write+0x9a>
        ble_att_svr_prep_clear(&prep_list);
   20c96:	a803      	add	r0, sp, #12
   20c98:	f7ff ff51 	bl	20b3e <ble_att_svr_prep_clear>
   20c9c:	e7c6      	b.n	20c2c <ble_att_svr_rx_exec_write+0x28>
            att_err = ble_att_svr_prep_write(conn_handle, &prep_list,
   20c9e:	f10d 020a 	add.w	r2, sp, #10
   20ca2:	a903      	add	r1, sp, #12
   20ca4:	4628      	mov	r0, r5
   20ca6:	f7ff fae3 	bl	20270 <ble_att_svr_prep_write>
   20caa:	b2c0      	uxtb	r0, r0
   20cac:	f88d 0009 	strb.w	r0, [sp, #9]
            if (att_err != 0) {
   20cb0:	2800      	cmp	r0, #0
   20cb2:	d0f0      	beq.n	20c96 <ble_att_svr_rx_exec_write+0x92>
                rc = BLE_HS_EAPP;
   20cb4:	2709      	movs	r7, #9
   20cb6:	e7ee      	b.n	20c96 <ble_att_svr_rx_exec_write+0x92>

00020cb8 <ble_att_svr_rx_notify>:
{
   20cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20cba:	4605      	mov	r5, r0
   20cbc:	460c      	mov	r4, r1
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), NULL);
   20cbe:	2200      	movs	r2, #0
   20cc0:	2102      	movs	r1, #2
   20cc2:	4620      	mov	r0, r4
   20cc4:	f7fe fe96 	bl	1f9f4 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   20cc8:	b988      	cbnz	r0, 20cee <ble_att_svr_rx_notify+0x36>
   20cca:	4606      	mov	r6, r0
    req = (struct ble_att_notify_req *)(*rxom)->om_data;
   20ccc:	6820      	ldr	r0, [r4, #0]
   20cce:	6803      	ldr	r3, [r0, #0]
    handle = le16toh(req->banq_handle);
   20cd0:	881f      	ldrh	r7, [r3, #0]
    if (handle == 0) {
   20cd2:	b177      	cbz	r7, 20cf2 <ble_att_svr_rx_notify+0x3a>
    os_mbuf_adj(*rxom, sizeof(*req));
   20cd4:	2102      	movs	r1, #2
   20cd6:	f7f8 fd68 	bl	197aa <os_mbuf_adj>
    ble_gap_notify_rx_event(conn_handle, handle, *rxom, 0);
   20cda:	2300      	movs	r3, #0
   20cdc:	6822      	ldr	r2, [r4, #0]
   20cde:	4639      	mov	r1, r7
   20ce0:	4628      	mov	r0, r5
   20ce2:	f001 ffa5 	bl	22c30 <ble_gap_notify_rx_event>
    *rxom = NULL;
   20ce6:	2300      	movs	r3, #0
   20ce8:	6023      	str	r3, [r4, #0]
}
   20cea:	4630      	mov	r0, r6
   20cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   20cee:	2606      	movs	r6, #6
   20cf0:	e7fb      	b.n	20cea <ble_att_svr_rx_notify+0x32>
        return BLE_HS_EBADDATA;
   20cf2:	260a      	movs	r6, #10
   20cf4:	e7f9      	b.n	20cea <ble_att_svr_rx_notify+0x32>

00020cf6 <ble_att_svr_rx_indicate>:
{
   20cf6:	b5f0      	push	{r4, r5, r6, r7, lr}
   20cf8:	b085      	sub	sp, #20
   20cfa:	4607      	mov	r7, r0
   20cfc:	460c      	mov	r4, r1
    txom = NULL;
   20cfe:	2200      	movs	r2, #0
   20d00:	9203      	str	r2, [sp, #12]
    att_err = 0;
   20d02:	f88d 200b 	strb.w	r2, [sp, #11]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), NULL);
   20d06:	2102      	movs	r1, #2
   20d08:	4620      	mov	r0, r4
   20d0a:	f7fe fe73 	bl	1f9f4 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   20d0e:	b9d0      	cbnz	r0, 20d46 <ble_att_svr_rx_indicate+0x50>
    req = (struct ble_att_indicate_req *)(*rxom)->om_data;
   20d10:	6823      	ldr	r3, [r4, #0]
   20d12:	681b      	ldr	r3, [r3, #0]
    handle = le16toh(req->baiq_handle);
   20d14:	881d      	ldrh	r5, [r3, #0]
    if (handle == 0) {
   20d16:	b90d      	cbnz	r5, 20d1c <ble_att_svr_rx_indicate+0x26>
        rc = BLE_HS_EBADDATA;
   20d18:	260a      	movs	r6, #10
   20d1a:	e016      	b.n	20d4a <ble_att_svr_rx_indicate+0x54>
    rc = ble_att_svr_build_indicate_rsp(rxom, &txom, &att_err);
   20d1c:	f10d 020b 	add.w	r2, sp, #11
   20d20:	a903      	add	r1, sp, #12
   20d22:	4620      	mov	r0, r4
   20d24:	f7fe fed4 	bl	1fad0 <ble_att_svr_build_indicate_rsp>
    if (rc != 0) {
   20d28:	4606      	mov	r6, r0
   20d2a:	b970      	cbnz	r0, 20d4a <ble_att_svr_rx_indicate+0x54>
    os_mbuf_adj(*rxom, sizeof(*req));
   20d2c:	2102      	movs	r1, #2
   20d2e:	6820      	ldr	r0, [r4, #0]
   20d30:	f7f8 fd3b 	bl	197aa <os_mbuf_adj>
    ble_gap_notify_rx_event(conn_handle, handle, *rxom, 1);
   20d34:	2301      	movs	r3, #1
   20d36:	6822      	ldr	r2, [r4, #0]
   20d38:	4629      	mov	r1, r5
   20d3a:	4638      	mov	r0, r7
   20d3c:	f001 ff78 	bl	22c30 <ble_gap_notify_rx_event>
    *rxom = NULL;
   20d40:	2300      	movs	r3, #0
   20d42:	6023      	str	r3, [r4, #0]
    rc = 0;
   20d44:	e001      	b.n	20d4a <ble_att_svr_rx_indicate+0x54>
   20d46:	4606      	mov	r6, r0
    handle = 0;
   20d48:	2500      	movs	r5, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_INDICATE_REQ,
   20d4a:	9501      	str	r5, [sp, #4]
   20d4c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   20d50:	9300      	str	r3, [sp, #0]
   20d52:	231d      	movs	r3, #29
   20d54:	9a03      	ldr	r2, [sp, #12]
   20d56:	4631      	mov	r1, r6
   20d58:	4638      	mov	r0, r7
   20d5a:	f7ff fc1f 	bl	2059c <ble_att_svr_tx_rsp>
}
   20d5e:	b005      	add	sp, #20
   20d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00020d64 <ble_att_svr_hide_range>:
{
   20d64:	b508      	push	{r3, lr}
   20d66:	4602      	mov	r2, r0
   20d68:	460b      	mov	r3, r1
    ble_att_svr_move_entries(&ble_att_svr_list, &ble_att_svr_hidden_list,
   20d6a:	4902      	ldr	r1, [pc, #8]	; (20d74 <ble_att_svr_hide_range+0x10>)
   20d6c:	4802      	ldr	r0, [pc, #8]	; (20d78 <ble_att_svr_hide_range+0x14>)
   20d6e:	f7fe fcf9 	bl	1f764 <ble_att_svr_move_entries>
}
   20d72:	bd08      	pop	{r3, pc}
   20d74:	100056a8 	.word	0x100056a8
   20d78:	100056b4 	.word	0x100056b4

00020d7c <ble_att_svr_restore_range>:
{
   20d7c:	b508      	push	{r3, lr}
   20d7e:	4602      	mov	r2, r0
   20d80:	460b      	mov	r3, r1
    ble_att_svr_move_entries(&ble_att_svr_hidden_list, &ble_att_svr_list,
   20d82:	4902      	ldr	r1, [pc, #8]	; (20d8c <ble_att_svr_restore_range+0x10>)
   20d84:	4802      	ldr	r0, [pc, #8]	; (20d90 <ble_att_svr_restore_range+0x14>)
   20d86:	f7fe fced 	bl	1f764 <ble_att_svr_move_entries>
}
   20d8a:	bd08      	pop	{r3, pc}
   20d8c:	100056b4 	.word	0x100056b4
   20d90:	100056a8 	.word	0x100056a8

00020d94 <ble_att_svr_reset>:
{
   20d94:	b508      	push	{r3, lr}
    while ((entry = STAILQ_FIRST(&ble_att_svr_list)) != NULL) {
   20d96:	e002      	b.n	20d9e <ble_att_svr_reset+0xa>
        STAILQ_REMOVE_HEAD(&ble_att_svr_list, ha_next);
   20d98:	6052      	str	r2, [r2, #4]
        ble_att_svr_entry_free(entry);
   20d9a:	f7ff f9a3 	bl	200e4 <ble_att_svr_entry_free>
    while ((entry = STAILQ_FIRST(&ble_att_svr_list)) != NULL) {
   20d9e:	4b0c      	ldr	r3, [pc, #48]	; (20dd0 <ble_att_svr_reset+0x3c>)
   20da0:	6818      	ldr	r0, [r3, #0]
   20da2:	b140      	cbz	r0, 20db6 <ble_att_svr_reset+0x22>
        STAILQ_REMOVE_HEAD(&ble_att_svr_list, ha_next);
   20da4:	6803      	ldr	r3, [r0, #0]
   20da6:	4a0a      	ldr	r2, [pc, #40]	; (20dd0 <ble_att_svr_reset+0x3c>)
   20da8:	6013      	str	r3, [r2, #0]
   20daa:	2b00      	cmp	r3, #0
   20dac:	d1f5      	bne.n	20d9a <ble_att_svr_reset+0x6>
   20dae:	e7f3      	b.n	20d98 <ble_att_svr_reset+0x4>
        STAILQ_REMOVE_HEAD(&ble_att_svr_hidden_list, ha_next);
   20db0:	6052      	str	r2, [r2, #4]
        ble_att_svr_entry_free(entry);
   20db2:	f7ff f997 	bl	200e4 <ble_att_svr_entry_free>
    while ((entry = STAILQ_FIRST(&ble_att_svr_hidden_list)) != NULL) {
   20db6:	4b07      	ldr	r3, [pc, #28]	; (20dd4 <ble_att_svr_reset+0x40>)
   20db8:	6818      	ldr	r0, [r3, #0]
   20dba:	b128      	cbz	r0, 20dc8 <ble_att_svr_reset+0x34>
        STAILQ_REMOVE_HEAD(&ble_att_svr_hidden_list, ha_next);
   20dbc:	6803      	ldr	r3, [r0, #0]
   20dbe:	4a05      	ldr	r2, [pc, #20]	; (20dd4 <ble_att_svr_reset+0x40>)
   20dc0:	6013      	str	r3, [r2, #0]
   20dc2:	2b00      	cmp	r3, #0
   20dc4:	d1f5      	bne.n	20db2 <ble_att_svr_reset+0x1e>
   20dc6:	e7f3      	b.n	20db0 <ble_att_svr_reset+0x1c>
    ble_att_svr_id = 0;
   20dc8:	4b03      	ldr	r3, [pc, #12]	; (20dd8 <ble_att_svr_reset+0x44>)
   20dca:	2200      	movs	r2, #0
   20dcc:	801a      	strh	r2, [r3, #0]
}
   20dce:	bd08      	pop	{r3, pc}
   20dd0:	100056b4 	.word	0x100056b4
   20dd4:	100056a8 	.word	0x100056a8
   20dd8:	100056b0 	.word	0x100056b0

00020ddc <ble_att_svr_start>:

int
ble_att_svr_start(void)
{
   20ddc:	b510      	push	{r4, lr}
   20dde:	b082      	sub	sp, #8
    int rc;

    ble_att_svr_free_start_mem();
   20de0:	f7ff f9ea 	bl	201b8 <ble_att_svr_free_start_mem>

    if (ble_hs_max_attrs > 0) {
   20de4:	4b0f      	ldr	r3, [pc, #60]	; (20e24 <ble_att_svr_start+0x48>)
   20de6:	881c      	ldrh	r4, [r3, #0]
   20de8:	b91c      	cbnz	r4, 20df2 <ble_att_svr_start+0x16>
            rc = BLE_HS_EOS;
            goto err;
        }
    }

    return 0;
   20dea:	2400      	movs	r4, #0

err:
    ble_att_svr_free_start_mem();
    return rc;
}
   20dec:	4620      	mov	r0, r4
   20dee:	b002      	add	sp, #8
   20df0:	bd10      	pop	{r4, pc}
        ble_att_svr_entry_mem = malloc(
   20df2:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   20df6:	0080      	lsls	r0, r0, #2
   20df8:	f00d fe04 	bl	2ea04 <malloc>
   20dfc:	4603      	mov	r3, r0
   20dfe:	4a0a      	ldr	r2, [pc, #40]	; (20e28 <ble_att_svr_start+0x4c>)
   20e00:	6010      	str	r0, [r2, #0]
        if (ble_att_svr_entry_mem == NULL) {
   20e02:	b168      	cbz	r0, 20e20 <ble_att_svr_start+0x44>
        rc = os_mempool_init(&ble_att_svr_entry_pool, ble_hs_max_attrs,
   20e04:	4a09      	ldr	r2, [pc, #36]	; (20e2c <ble_att_svr_start+0x50>)
   20e06:	9200      	str	r2, [sp, #0]
   20e08:	2214      	movs	r2, #20
   20e0a:	4621      	mov	r1, r4
   20e0c:	4808      	ldr	r0, [pc, #32]	; (20e30 <ble_att_svr_start+0x54>)
   20e0e:	f7f8 fff9 	bl	19e04 <os_mempool_init>
        if (rc != 0) {
   20e12:	b908      	cbnz	r0, 20e18 <ble_att_svr_start+0x3c>
    return 0;
   20e14:	2400      	movs	r4, #0
   20e16:	e7e9      	b.n	20dec <ble_att_svr_start+0x10>
            rc = BLE_HS_EOS;
   20e18:	240b      	movs	r4, #11
    ble_att_svr_free_start_mem();
   20e1a:	f7ff f9cd 	bl	201b8 <ble_att_svr_free_start_mem>
    return rc;
   20e1e:	e7e5      	b.n	20dec <ble_att_svr_start+0x10>
            rc = BLE_HS_ENOMEM;
   20e20:	2406      	movs	r4, #6
   20e22:	e7fa      	b.n	20e1a <ble_att_svr_start+0x3e>
   20e24:	10005e10 	.word	0x10005e10
   20e28:	10005688 	.word	0x10005688
   20e2c:	00034484 	.word	0x00034484
   20e30:	1000568c 	.word	0x1000568c

00020e34 <ble_att_svr_init>:

int
ble_att_svr_init(void)
{
   20e34:	b500      	push	{lr}
   20e36:	b083      	sub	sp, #12
    int rc;

    if (MYNEWT_VAL(BLE_ATT_SVR_MAX_PREP_ENTRIES) > 0) {
        rc = os_mempool_init(&ble_att_svr_prep_entry_pool,
   20e38:	4b0a      	ldr	r3, [pc, #40]	; (20e64 <ble_att_svr_init+0x30>)
   20e3a:	9300      	str	r3, [sp, #0]
   20e3c:	4b0a      	ldr	r3, [pc, #40]	; (20e68 <ble_att_svr_init+0x34>)
   20e3e:	220c      	movs	r2, #12
   20e40:	2140      	movs	r1, #64	; 0x40
   20e42:	480a      	ldr	r0, [pc, #40]	; (20e6c <ble_att_svr_init+0x38>)
   20e44:	f7f8 ffde 	bl	19e04 <os_mempool_init>
                             MYNEWT_VAL(BLE_ATT_SVR_MAX_PREP_ENTRIES),
                             sizeof (struct ble_att_prep_entry),
                             ble_att_svr_prep_entry_mem,
                             "ble_att_svr_prep_entry_pool");
        if (rc != 0) {
   20e48:	b950      	cbnz	r0, 20e60 <ble_att_svr_init+0x2c>
            return BLE_HS_EOS;
        }
    }

    STAILQ_INIT(&ble_att_svr_list);
   20e4a:	4b09      	ldr	r3, [pc, #36]	; (20e70 <ble_att_svr_init+0x3c>)
   20e4c:	6018      	str	r0, [r3, #0]
   20e4e:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&ble_att_svr_hidden_list);
   20e50:	4b08      	ldr	r3, [pc, #32]	; (20e74 <ble_att_svr_init+0x40>)
   20e52:	6018      	str	r0, [r3, #0]
   20e54:	605b      	str	r3, [r3, #4]

    ble_att_svr_id = 0;
   20e56:	4b08      	ldr	r3, [pc, #32]	; (20e78 <ble_att_svr_init+0x44>)
   20e58:	8018      	strh	r0, [r3, #0]

    return 0;
}
   20e5a:	b003      	add	sp, #12
   20e5c:	f85d fb04 	ldr.w	pc, [sp], #4
            return BLE_HS_EOS;
   20e60:	200b      	movs	r0, #11
   20e62:	e7fa      	b.n	20e5a <ble_att_svr_init+0x26>
   20e64:	0003449c 	.word	0x0003449c
   20e68:	100056bc 	.word	0x100056bc
   20e6c:	100059bc 	.word	0x100059bc
   20e70:	100056b4 	.word	0x100056b4
   20e74:	100056a8 	.word	0x100056a8
   20e78:	100056b0 	.word	0x100056b0

00020e7c <ble_eddystone_set_svc_data_base>:
 * @return                          A pointer to where the service data payload
 *                                      should be written.
 */
static void *
ble_eddystone_set_svc_data_base(uint8_t frame_type)
{
   20e7c:	b538      	push	{r3, r4, r5, lr}
   20e7e:	4605      	mov	r5, r0
    put_le16(ble_eddystone_svc_data, BLE_EDDYSTONE_SERVICE_UUID);
   20e80:	4c04      	ldr	r4, [pc, #16]	; (20e94 <ble_eddystone_set_svc_data_base+0x18>)
   20e82:	f64f 61aa 	movw	r1, #65194	; 0xfeaa
   20e86:	4620      	mov	r0, r4
   20e88:	f7f7 ffba 	bl	18e00 <put_le16>
    ble_eddystone_svc_data[2] = frame_type;
   20e8c:	70a5      	strb	r5, [r4, #2]

    return ble_eddystone_svc_data + BLE_EDDYSTONE_SVC_DATA_BASE_SZ;
}
   20e8e:	1ce0      	adds	r0, r4, #3
   20e90:	bd38      	pop	{r3, r4, r5, pc}
   20e92:	bf00      	nop
   20e94:	100059d8 	.word	0x100059d8

00020e98 <ble_eddystone_set_adv_data_gen>:
ble_eddystone_set_adv_data_gen(struct ble_hs_adv_fields *adv_fields,
                               uint8_t svc_data_len)
{
    int rc;

    if (adv_fields->num_uuids16 > BLE_EDDYSTONE_MAX_UUIDS16) {
   20e98:	7a02      	ldrb	r2, [r0, #8]
   20e9a:	2a03      	cmp	r2, #3
   20e9c:	d827      	bhi.n	20eee <ble_eddystone_set_adv_data_gen+0x56>
{
   20e9e:	b570      	push	{r4, r5, r6, lr}
   20ea0:	4604      	mov	r4, r0
   20ea2:	460d      	mov	r5, r1
        return BLE_HS_EINVAL;
    }
    if (svc_data_len > (BLE_EDDYSTONE_MAX_SVC_DATA_LEN - BLE_EDDYSTONE_SVC_DATA_BASE_SZ)) {
   20ea4:	2913      	cmp	r1, #19
   20ea6:	d824      	bhi.n	20ef2 <ble_eddystone_set_adv_data_gen+0x5a>
        return BLE_HS_EINVAL;
    }
    if (adv_fields->num_uuids16 > 0 && !adv_fields->uuids16_is_complete) {
   20ea8:	b11a      	cbz	r2, 20eb2 <ble_eddystone_set_adv_data_gen+0x1a>
   20eaa:	7a43      	ldrb	r3, [r0, #9]
   20eac:	f013 0f01 	tst.w	r3, #1
   20eb0:	d021      	beq.n	20ef6 <ble_eddystone_set_adv_data_gen+0x5e>
        return BLE_HS_EINVAL;
    }
    if (adv_fields->svc_data_uuid16_len != 0) {
   20eb2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   20eb6:	bb03      	cbnz	r3, 20efa <ble_eddystone_set_adv_data_gen+0x62>
        return BLE_HS_EINVAL;
    }

    ble_eddystone_uuids16[0] =
   20eb8:	4e11      	ldr	r6, [pc, #68]	; (20f00 <ble_eddystone_set_adv_data_gen+0x68>)
   20eba:	4b12      	ldr	r3, [pc, #72]	; (20f04 <ble_eddystone_set_adv_data_gen+0x6c>)
   20ebc:	681b      	ldr	r3, [r3, #0]
   20ebe:	4630      	mov	r0, r6
   20ec0:	f840 3b04 	str.w	r3, [r0], #4
        (ble_uuid16_t) BLE_UUID16_INIT(BLE_EDDYSTONE_SERVICE_UUID);
    memcpy(ble_eddystone_uuids16 + 1, adv_fields->uuids16,
   20ec4:	0092      	lsls	r2, r2, #2
   20ec6:	6861      	ldr	r1, [r4, #4]
   20ec8:	f7f9 fed4 	bl	1ac74 <memcpy>
           adv_fields->num_uuids16 * sizeof(ble_uuid16_t));
    adv_fields->uuids16 = ble_eddystone_uuids16;
   20ecc:	6066      	str	r6, [r4, #4]
    adv_fields->num_uuids16++;
   20ece:	7a23      	ldrb	r3, [r4, #8]
   20ed0:	3301      	adds	r3, #1
   20ed2:	7223      	strb	r3, [r4, #8]
    adv_fields->uuids16_is_complete = 1;
   20ed4:	7a63      	ldrb	r3, [r4, #9]
   20ed6:	f043 0301 	orr.w	r3, r3, #1
   20eda:	7263      	strb	r3, [r4, #9]

    adv_fields->svc_data_uuid16 = ble_eddystone_svc_data;
   20edc:	4b0a      	ldr	r3, [pc, #40]	; (20f08 <ble_eddystone_set_adv_data_gen+0x70>)
   20ede:	62a3      	str	r3, [r4, #40]	; 0x28
    adv_fields->svc_data_uuid16_len = svc_data_len +
   20ee0:	3503      	adds	r5, #3
   20ee2:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
                                      BLE_EDDYSTONE_SVC_DATA_BASE_SZ;

    rc = ble_gap_adv_set_fields(adv_fields);
   20ee6:	4620      	mov	r0, r4
   20ee8:	f001 f91e 	bl	22128 <ble_gap_adv_set_fields>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   20eec:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EINVAL;
   20eee:	2003      	movs	r0, #3
}
   20ef0:	4770      	bx	lr
        return BLE_HS_EINVAL;
   20ef2:	2003      	movs	r0, #3
   20ef4:	e7fa      	b.n	20eec <ble_eddystone_set_adv_data_gen+0x54>
        return BLE_HS_EINVAL;
   20ef6:	2003      	movs	r0, #3
   20ef8:	e7f8      	b.n	20eec <ble_eddystone_set_adv_data_gen+0x54>
        return BLE_HS_EINVAL;
   20efa:	2003      	movs	r0, #3
   20efc:	e7f6      	b.n	20eec <ble_eddystone_set_adv_data_gen+0x54>
   20efe:	bf00      	nop
   20f00:	100059f0 	.word	0x100059f0
   20f04:	0002fb50 	.word	0x0002fb50
   20f08:	100059d8 	.word	0x100059d8

00020f0c <ble_eddystone_set_adv_data_url>:
int
ble_eddystone_set_adv_data_url(struct ble_hs_adv_fields *adv_fields,
                               uint8_t url_scheme, char *url_body,
                               uint8_t url_body_len, uint8_t url_suffix,
                               int8_t measured_power)
{
   20f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20f10:	4606      	mov	r6, r0
   20f12:	4688      	mov	r8, r1
   20f14:	4617      	mov	r7, r2
   20f16:	461c      	mov	r4, r3
   20f18:	f89d a020 	ldrb.w	sl, [sp, #32]
    uint8_t *svc_data;
    int url_len;
    int rc;

    url_len = url_body_len;
    if (url_suffix != BLE_EDDYSTONE_URL_SUFFIX_NONE) {
   20f1c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   20f20:	d025      	beq.n	20f6e <ble_eddystone_set_adv_data_url+0x62>
        url_len++;
   20f22:	f103 0901 	add.w	r9, r3, #1
    }
    if (url_len > BLE_EDDYSTONE_URL_MAX_LEN) {
   20f26:	f1b9 0f11 	cmp.w	r9, #17
   20f2a:	dc22      	bgt.n	20f72 <ble_eddystone_set_adv_data_url+0x66>
        return BLE_HS_EINVAL;
    }

    svc_data = ble_eddystone_set_svc_data_base(BLE_EDDYSTONE_FRAME_TYPE_URL);
   20f2c:	2010      	movs	r0, #16
   20f2e:	f7ff ffa5 	bl	20e7c <ble_eddystone_set_svc_data_base>
   20f32:	4605      	mov	r5, r0

    /* Measured Power ranging data (Calibrated tx power at 0 meters). */
    if (measured_power < -100 || measured_power > 20) {
   20f34:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   20f38:	f102 0364 	add.w	r3, r2, #100	; 0x64
   20f3c:	b2db      	uxtb	r3, r3
   20f3e:	2b78      	cmp	r3, #120	; 0x78
   20f40:	d819      	bhi.n	20f76 <ble_eddystone_set_adv_data_url+0x6a>
        return BLE_HS_EINVAL;
    }
    svc_data[0] = measured_power;
   20f42:	7002      	strb	r2, [r0, #0]

    svc_data[1] = url_scheme;
   20f44:	f880 8001 	strb.w	r8, [r0, #1]
    memcpy(svc_data + 2, url_body, url_body_len);
   20f48:	4622      	mov	r2, r4
   20f4a:	4639      	mov	r1, r7
   20f4c:	3002      	adds	r0, #2
   20f4e:	f7f9 fe91 	bl	1ac74 <memcpy>
    if (url_suffix != BLE_EDDYSTONE_URL_SUFFIX_NONE) {
   20f52:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   20f56:	d002      	beq.n	20f5e <ble_eddystone_set_adv_data_url+0x52>
        svc_data[2 + url_body_len] = url_suffix;
   20f58:	3402      	adds	r4, #2
   20f5a:	f805 a004 	strb.w	sl, [r5, r4]
    }

    rc = ble_eddystone_set_adv_data_gen(adv_fields, url_len + 2);
   20f5e:	f109 0102 	add.w	r1, r9, #2
   20f62:	b2c9      	uxtb	r1, r1
   20f64:	4630      	mov	r0, r6
   20f66:	f7ff ff97 	bl	20e98 <ble_eddystone_set_adv_data_gen>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   20f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    url_len = url_body_len;
   20f6e:	4699      	mov	r9, r3
   20f70:	e7d9      	b.n	20f26 <ble_eddystone_set_adv_data_url+0x1a>
        return BLE_HS_EINVAL;
   20f72:	2003      	movs	r0, #3
   20f74:	e7f9      	b.n	20f6a <ble_eddystone_set_adv_data_url+0x5e>
        return BLE_HS_EINVAL;
   20f76:	2003      	movs	r0, #3
   20f78:	e7f7      	b.n	20f6a <ble_eddystone_set_adv_data_url+0x5e>

00020f7a <ble_gap_call_event_cb>:
ble_gap_event_listener_call(struct ble_gap_event *event);

static int
ble_gap_call_event_cb(struct ble_gap_event *event,
                      ble_gap_event_fn *cb, void *cb_arg)
{
   20f7a:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (cb != NULL) {
   20f7c:	b119      	cbz	r1, 20f86 <ble_gap_call_event_cb+0xc>
   20f7e:	460b      	mov	r3, r1
        rc = cb(event, cb_arg);
   20f80:	4611      	mov	r1, r2
   20f82:	4798      	blx	r3
        }
        rc = 0;
    }

    return rc;
}
   20f84:	bd08      	pop	{r3, pc}
        if (event->type == BLE_GAP_EVENT_CONN_UPDATE_REQ) {
   20f86:	7803      	ldrb	r3, [r0, #0]
   20f88:	2b04      	cmp	r3, #4
   20f8a:	d001      	beq.n	20f90 <ble_gap_call_event_cb+0x16>
        rc = 0;
   20f8c:	2000      	movs	r0, #0
    return rc;
   20f8e:	e7f9      	b.n	20f84 <ble_gap_call_event_cb+0xa>
                *event->conn_update_req.peer_params;
   20f90:	6842      	ldr	r2, [r0, #4]
            *event->conn_update_req.self_params =
   20f92:	6883      	ldr	r3, [r0, #8]
   20f94:	6810      	ldr	r0, [r2, #0]
   20f96:	6851      	ldr	r1, [r2, #4]
   20f98:	6892      	ldr	r2, [r2, #8]
   20f9a:	6018      	str	r0, [r3, #0]
   20f9c:	6059      	str	r1, [r3, #4]
   20f9e:	609a      	str	r2, [r3, #8]
        rc = 0;
   20fa0:	2000      	movs	r0, #0
   20fa2:	e7ef      	b.n	20f84 <ble_gap_call_event_cb+0xa>

00020fa4 <ble_gap_is_preempted>:
    int i;
#endif
    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

#if MYNEWT_VAL(BLE_ROLE_CENTRAL) || MYNEWT_VAL(BLE_ROLE_OBSERVER)
    if (ble_gap_master.preempted_op != BLE_GAP_OP_NULL) {
   20fa4:	4b09      	ldr	r3, [pc, #36]	; (20fcc <ble_gap_is_preempted+0x28>)
   20fa6:	7c1b      	ldrb	r3, [r3, #16]
   20fa8:	b15b      	cbz	r3, 20fc2 <ble_gap_is_preempted+0x1e>
        return true;
   20faa:	2001      	movs	r0, #1
            return true;
        }
    }
#endif
    return false;
}
   20fac:	4770      	bx	lr
        if (ble_gap_slave[i].preempted) {
   20fae:	4a07      	ldr	r2, [pc, #28]	; (20fcc <ble_gap_is_preempted+0x28>)
   20fb0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   20fb4:	7d52      	ldrb	r2, [r2, #21]
   20fb6:	f3c2 0080 	ubfx	r0, r2, #2, #1
   20fba:	f012 0f04 	tst.w	r2, #4
   20fbe:	d1f5      	bne.n	20fac <ble_gap_is_preempted+0x8>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   20fc0:	3301      	adds	r3, #1
   20fc2:	2b00      	cmp	r3, #0
   20fc4:	ddf3      	ble.n	20fae <ble_gap_is_preempted+0xa>
    return false;
   20fc6:	2000      	movs	r0, #0
   20fc8:	4770      	bx	lr
   20fca:	bf00      	nop
   20fcc:	10005ac4 	.word	0x10005ac4

00020fd0 <ble_gap_has_client>:

#if MYNEWT_VAL(BLE_ROLE_CENTRAL) || MYNEWT_VAL(BLE_ROLE_PERIPHERAL) || MYNEWT_VAL(BLE_ROLE_OBSERVER)
static bool
ble_gap_has_client(struct ble_gap_master_state *out_state)
{
    if (!out_state) {
   20fd0:	b120      	cbz	r0, 20fdc <ble_gap_has_client+0xc>
        return 0;
    }

    return out_state->cb != NULL;
   20fd2:	6880      	ldr	r0, [r0, #8]
   20fd4:	3800      	subs	r0, #0
   20fd6:	bf18      	it	ne
   20fd8:	2001      	movne	r0, #1
   20fda:	4770      	bx	lr
        return 0;
   20fdc:	2000      	movs	r0, #0
}
   20fde:	4770      	bx	lr

00020fe0 <ble_gap_update_to_l2cap>:
#if NIMBLE_BLE_CONNECT
static void
ble_gap_update_to_l2cap(const struct ble_gap_upd_params *params,
                        struct ble_l2cap_sig_update_params *l2cap_params)
{
    l2cap_params->itvl_min = params->itvl_min;
   20fe0:	8803      	ldrh	r3, [r0, #0]
   20fe2:	800b      	strh	r3, [r1, #0]
    l2cap_params->itvl_max = params->itvl_max;
   20fe4:	8843      	ldrh	r3, [r0, #2]
   20fe6:	804b      	strh	r3, [r1, #2]
    l2cap_params->slave_latency = params->latency;
   20fe8:	8883      	ldrh	r3, [r0, #4]
   20fea:	808b      	strh	r3, [r1, #4]
    l2cap_params->timeout_multiplier = params->supervision_timeout;
   20fec:	88c3      	ldrh	r3, [r0, #6]
   20fee:	80cb      	strh	r3, [r1, #6]
}
   20ff0:	4770      	bx	lr
	...

00020ff4 <ble_gap_adv_active_instance>:
#if NIMBLE_BLE_ADVERTISE || NIMBLE_BLE_CONNECT
static int
ble_gap_adv_active_instance(uint8_t instance)
{
    /* Assume read is atomic; mutex not necessary. */
    return ble_gap_slave[instance].op == BLE_GAP_OP_S_ADV;
   20ff4:	4b04      	ldr	r3, [pc, #16]	; (21008 <ble_gap_adv_active_instance+0x14>)
   20ff6:	eb03 1300 	add.w	r3, r3, r0, lsl #4
   20ffa:	7d18      	ldrb	r0, [r3, #20]
}
   20ffc:	2801      	cmp	r0, #1
   20ffe:	bf14      	ite	ne
   21000:	2000      	movne	r0, #0
   21002:	2001      	moveq	r0, #1
   21004:	4770      	bx	lr
   21006:	bf00      	nop
   21008:	10005ac4 	.word	0x10005ac4

0002100c <ble_gap_accept_master_conn>:
static int
ble_gap_accept_master_conn(void)
{
    int rc;

    switch (ble_gap_master.op) {
   2100c:	4b05      	ldr	r3, [pc, #20]	; (21024 <ble_gap_accept_master_conn+0x18>)
   2100e:	781b      	ldrb	r3, [r3, #0]
   21010:	2b02      	cmp	r3, #2
   21012:	d001      	beq.n	21018 <ble_gap_accept_master_conn+0xc>
    case BLE_GAP_OP_NULL:
    case BLE_GAP_OP_M_DISC:
        rc = BLE_HS_ENOENT;
   21014:	2005      	movs	r0, #5
    if (rc == 0) {
        STATS_INC(ble_gap_stats, connect_mst);
    }

    return rc;
}
   21016:	4770      	bx	lr
        STATS_INC(ble_gap_stats, connect_mst);
   21018:	4a03      	ldr	r2, [pc, #12]	; (21028 <ble_gap_accept_master_conn+0x1c>)
   2101a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   2101c:	3301      	adds	r3, #1
   2101e:	65d3      	str	r3, [r2, #92]	; 0x5c
        rc = 0;
   21020:	2000      	movs	r0, #0
   21022:	4770      	bx	lr
   21024:	10005ac4 	.word	0x10005ac4
   21028:	10005a04 	.word	0x10005a04

0002102c <ble_gap_accept_slave_conn>:
static int
ble_gap_accept_slave_conn(uint8_t instance)
{
    int rc;

    if (instance >= BLE_ADV_INSTANCES) {
   2102c:	b988      	cbnz	r0, 21052 <ble_gap_accept_slave_conn+0x26>
{
   2102e:	b510      	push	{r4, lr}
   21030:	4604      	mov	r4, r0
       rc = BLE_HS_ENOENT;
    } else if (!ble_gap_adv_active_instance(instance)) {
   21032:	f7ff ffdf 	bl	20ff4 <ble_gap_adv_active_instance>
   21036:	b170      	cbz	r0, 21056 <ble_gap_accept_slave_conn+0x2a>
        rc = BLE_HS_ENOENT;
    } else {
        if (ble_gap_slave[instance].connectable) {
   21038:	4b09      	ldr	r3, [pc, #36]	; (21060 <ble_gap_accept_slave_conn+0x34>)
   2103a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
   2103e:	7d63      	ldrb	r3, [r4, #21]
   21040:	f013 0f08 	tst.w	r3, #8
   21044:	d009      	beq.n	2105a <ble_gap_accept_slave_conn+0x2e>
            rc = BLE_HS_ENOENT;
        }
    }

    if (rc == 0) {
        STATS_INC(ble_gap_stats, connect_slv);
   21046:	4a07      	ldr	r2, [pc, #28]	; (21064 <ble_gap_accept_slave_conn+0x38>)
   21048:	6e13      	ldr	r3, [r2, #96]	; 0x60
   2104a:	3301      	adds	r3, #1
   2104c:	6613      	str	r3, [r2, #96]	; 0x60
            rc = 0;
   2104e:	2000      	movs	r0, #0
    }

    return rc;
}
   21050:	bd10      	pop	{r4, pc}
       rc = BLE_HS_ENOENT;
   21052:	2005      	movs	r0, #5
}
   21054:	4770      	bx	lr
        rc = BLE_HS_ENOENT;
   21056:	2005      	movs	r0, #5
   21058:	e7fa      	b.n	21050 <ble_gap_accept_slave_conn+0x24>
            rc = BLE_HS_ENOENT;
   2105a:	2005      	movs	r0, #5
    return rc;
   2105c:	e7f8      	b.n	21050 <ble_gap_accept_slave_conn+0x24>
   2105e:	bf00      	nop
   21060:	10005ac4 	.word	0x10005ac4
   21064:	10005a04 	.word	0x10005a04

00021068 <ble_gap_wl_busy>:
ble_gap_wl_busy(void)
{
    /* Check if an auto or selective connection establishment procedure is in
     * progress.
     */
    return ble_gap_master.op == BLE_GAP_OP_M_CONN &&
   21068:	4b07      	ldr	r3, [pc, #28]	; (21088 <ble_gap_wl_busy+0x20>)
   2106a:	781b      	ldrb	r3, [r3, #0]
   2106c:	2b02      	cmp	r3, #2
   2106e:	d001      	beq.n	21074 <ble_gap_wl_busy+0xc>
   21070:	2000      	movs	r0, #0
   21072:	4770      	bx	lr
   21074:	4b04      	ldr	r3, [pc, #16]	; (21088 <ble_gap_wl_busy+0x20>)
   21076:	7c5b      	ldrb	r3, [r3, #17]
   21078:	f013 0f01 	tst.w	r3, #1
   2107c:	d101      	bne.n	21082 <ble_gap_wl_busy+0x1a>
   2107e:	2000      	movs	r0, #0
   21080:	4770      	bx	lr
   21082:	2001      	movs	r0, #1
           ble_gap_master.conn.using_wl;
}
   21084:	4770      	bx	lr
   21086:	bf00      	nop
   21088:	10005ac4 	.word	0x10005ac4

0002108c <ble_gap_adv_type>:
 *****************************************************************************/
#if NIMBLE_BLE_ADVERTISE && !MYNEWT_VAL(BLE_EXT_ADV)
static int
ble_gap_adv_type(const struct ble_gap_adv_params *adv_params)
{
    switch (adv_params->conn_mode) {
   2108c:	7803      	ldrb	r3, [r0, #0]
   2108e:	b11b      	cbz	r3, 21098 <ble_gap_adv_type+0xc>
   21090:	2b01      	cmp	r3, #1
   21092:	d005      	beq.n	210a0 <ble_gap_adv_type+0x14>
   21094:	2000      	movs	r0, #0
   21096:	4770      	bx	lr
    case BLE_GAP_CONN_MODE_NON:
        if (adv_params->disc_mode == BLE_GAP_DISC_MODE_NON) {
   21098:	7843      	ldrb	r3, [r0, #1]
   2109a:	b93b      	cbnz	r3, 210ac <ble_gap_adv_type+0x20>
            return BLE_HCI_ADV_TYPE_ADV_NONCONN_IND;
   2109c:	2003      	movs	r0, #3
   2109e:	4770      	bx	lr

    case BLE_GAP_CONN_MODE_UND:
        return BLE_HCI_ADV_TYPE_ADV_IND;

    case BLE_GAP_CONN_MODE_DIR:
        if (adv_params->high_duty_cycle) {
   210a0:	7a03      	ldrb	r3, [r0, #8]
   210a2:	f013 0f01 	tst.w	r3, #1
   210a6:	d003      	beq.n	210b0 <ble_gap_adv_type+0x24>
            return BLE_HCI_ADV_TYPE_ADV_DIRECT_IND_HD;
   210a8:	2001      	movs	r0, #1
   210aa:	4770      	bx	lr
            return BLE_HCI_ADV_TYPE_ADV_SCAN_IND;
   210ac:	2002      	movs	r0, #2
   210ae:	4770      	bx	lr
        } else {
            return BLE_HCI_ADV_TYPE_ADV_DIRECT_IND_LD;
   210b0:	2004      	movs	r0, #4

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_HCI_ADV_TYPE_ADV_IND;
    }
}
   210b2:	4770      	bx	lr

000210b4 <ble_gap_adv_dflt_itvls>:

static void
ble_gap_adv_dflt_itvls(uint8_t conn_mode,
                       uint16_t *out_itvl_min, uint16_t *out_itvl_max)
{
    switch (conn_mode) {
   210b4:	2801      	cmp	r0, #1
   210b6:	d011      	beq.n	210dc <ble_gap_adv_dflt_itvls+0x28>
   210b8:	2802      	cmp	r0, #2
   210ba:	d00a      	beq.n	210d2 <ble_gap_adv_dflt_itvls+0x1e>
   210bc:	b120      	cbz	r0, 210c8 <ble_gap_adv_dflt_itvls+0x14>
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
        break;

    default:
        BLE_HS_DBG_ASSERT(0);
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
   210be:	2330      	movs	r3, #48	; 0x30
   210c0:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
   210c2:	2360      	movs	r3, #96	; 0x60
   210c4:	8013      	strh	r3, [r2, #0]
        break;
    }
}
   210c6:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL2_MIN;
   210c8:	23a0      	movs	r3, #160	; 0xa0
   210ca:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL2_MAX;
   210cc:	23f0      	movs	r3, #240	; 0xf0
   210ce:	8013      	strh	r3, [r2, #0]
        break;
   210d0:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
   210d2:	2330      	movs	r3, #48	; 0x30
   210d4:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
   210d6:	2360      	movs	r3, #96	; 0x60
   210d8:	8013      	strh	r3, [r2, #0]
        break;
   210da:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
   210dc:	2330      	movs	r3, #48	; 0x30
   210de:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
   210e0:	2360      	movs	r3, #96	; 0x60
   210e2:	8013      	strh	r3, [r2, #0]
        break;
   210e4:	4770      	bx	lr

000210e6 <ble_gap_disc_fill_dflts>:

#if NIMBLE_BLE_SCAN && !MYNEWT_VAL(BLE_EXT_ADV)
static void
ble_gap_disc_fill_dflts(struct ble_gap_disc_params *disc_params)
{
   if (disc_params->itvl == 0) {
   210e6:	8803      	ldrh	r3, [r0, #0]
   210e8:	b92b      	cbnz	r3, 210f6 <ble_gap_disc_fill_dflts+0x10>
        if (disc_params->limited) {
   210ea:	7943      	ldrb	r3, [r0, #5]
   210ec:	f013 0f01 	tst.w	r3, #1
   210f0:	d00a      	beq.n	21108 <ble_gap_disc_fill_dflts+0x22>
            disc_params->itvl = BLE_GAP_LIM_DISC_SCAN_INT;
   210f2:	2312      	movs	r3, #18
   210f4:	8003      	strh	r3, [r0, #0]
        } else {
            disc_params->itvl = BLE_GAP_SCAN_FAST_INTERVAL_MIN;
        }
    }

    if (disc_params->window == 0) {
   210f6:	8843      	ldrh	r3, [r0, #2]
   210f8:	b95b      	cbnz	r3, 21112 <ble_gap_disc_fill_dflts+0x2c>
        if (disc_params->limited) {
   210fa:	7943      	ldrb	r3, [r0, #5]
   210fc:	f013 0f01 	tst.w	r3, #1
   21100:	d005      	beq.n	2110e <ble_gap_disc_fill_dflts+0x28>
            disc_params->window = BLE_GAP_LIM_DISC_SCAN_WINDOW;
   21102:	2312      	movs	r3, #18
   21104:	8043      	strh	r3, [r0, #2]
   21106:	4770      	bx	lr
            disc_params->itvl = BLE_GAP_SCAN_FAST_INTERVAL_MIN;
   21108:	2330      	movs	r3, #48	; 0x30
   2110a:	8003      	strh	r3, [r0, #0]
   2110c:	e7f3      	b.n	210f6 <ble_gap_disc_fill_dflts+0x10>
        } else {
            disc_params->window = BLE_GAP_SCAN_FAST_WINDOW;
   2110e:	2330      	movs	r3, #48	; 0x30
   21110:	8043      	strh	r3, [r0, #2]
        }
    }
}
   21112:	4770      	bx	lr

00021114 <ble_gap_update_entry_find>:
}

static struct ble_gap_update_entry *
ble_gap_update_entry_find(uint16_t conn_handle,
                          struct ble_gap_update_entry **out_prev)
{
   21114:	b410      	push	{r4}
   21116:	4602      	mov	r2, r0
    struct ble_gap_update_entry *prev;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    prev = NULL;
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   21118:	4b06      	ldr	r3, [pc, #24]	; (21134 <ble_gap_update_entry_find+0x20>)
   2111a:	6818      	ldr	r0, [r3, #0]
    prev = NULL;
   2111c:	2400      	movs	r4, #0
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   2111e:	b128      	cbz	r0, 2112c <ble_gap_update_entry_find+0x18>
        if (entry->conn_handle == conn_handle) {
   21120:	8a83      	ldrh	r3, [r0, #20]
   21122:	4293      	cmp	r3, r2
   21124:	d002      	beq.n	2112c <ble_gap_update_entry_find+0x18>
            break;
        }

        prev = entry;
   21126:	4604      	mov	r4, r0
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   21128:	6800      	ldr	r0, [r0, #0]
   2112a:	e7f8      	b.n	2111e <ble_gap_update_entry_find+0xa>
    }

    if (out_prev != NULL) {
   2112c:	b101      	cbz	r1, 21130 <ble_gap_update_entry_find+0x1c>
        *out_prev = prev;
   2112e:	600c      	str	r4, [r1, #0]
    }

    return entry;
}
   21130:	bc10      	pop	{r4}
   21132:	4770      	bx	lr
   21134:	10005a8c 	.word	0x10005a8c

00021138 <ble_gap_validate_conn_params>:
static bool
ble_gap_validate_conn_params(const struct ble_gap_upd_params *params)
{

    /* Requirements from Bluetooth spec. v4.2 [Vol 2, Part E], 7.8.18 */
    if (params->itvl_min > params->itvl_max) {
   21138:	8802      	ldrh	r2, [r0, #0]
   2113a:	8843      	ldrh	r3, [r0, #2]
   2113c:	429a      	cmp	r2, r3
   2113e:	d814      	bhi.n	2116a <ble_gap_validate_conn_params+0x32>
        return false;
    }

    if (params->itvl_min < 0x0006 || params->itvl_max > 0x0C80) {
   21140:	2a05      	cmp	r2, #5
   21142:	d914      	bls.n	2116e <ble_gap_validate_conn_params+0x36>
   21144:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   21148:	d813      	bhi.n	21172 <ble_gap_validate_conn_params+0x3a>
        return false;
    }

    if (params->latency > 0x01F3) {
   2114a:	8882      	ldrh	r2, [r0, #4]
   2114c:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   21150:	d211      	bcs.n	21176 <ble_gap_validate_conn_params+0x3e>
    /* According to specification mentioned above we should make sure that:
     * supervision_timeout_ms > (1 + latency) * 2 * max_interval_ms
     *    =>
     * supervision_timeout * 10 ms > (1 + latency) * 2 * itvl_max * 1.25ms
     */
    if (params->supervision_timeout <=
   21152:	88c1      	ldrh	r1, [r0, #6]
                   (((1 + params->latency) * params->itvl_max) / 4)) {
   21154:	fb02 3303 	mla	r3, r2, r3, r3
   21158:	2b00      	cmp	r3, #0
   2115a:	db04      	blt.n	21166 <ble_gap_validate_conn_params+0x2e>
    if (params->supervision_timeout <=
   2115c:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
   21160:	dd0b      	ble.n	2117a <ble_gap_validate_conn_params+0x42>
        return false;
    }

    return true;
   21162:	2001      	movs	r0, #1
   21164:	4770      	bx	lr
                   (((1 + params->latency) * params->itvl_max) / 4)) {
   21166:	3303      	adds	r3, #3
   21168:	e7f8      	b.n	2115c <ble_gap_validate_conn_params+0x24>
        return false;
   2116a:	2000      	movs	r0, #0
   2116c:	4770      	bx	lr
        return false;
   2116e:	2000      	movs	r0, #0
   21170:	4770      	bx	lr
   21172:	2000      	movs	r0, #0
   21174:	4770      	bx	lr
        return false;
   21176:	2000      	movs	r0, #0
   21178:	4770      	bx	lr
        return false;
   2117a:	2000      	movs	r0, #0
}
   2117c:	4770      	bx	lr
	...

00021180 <ble_gap_event_listener_call>:
    return rc;
}

static int
ble_gap_event_listener_call(struct ble_gap_event *event)
{
   21180:	b538      	push	{r3, r4, r5, lr}
   21182:	4605      	mov	r5, r0
    struct ble_gap_event_listener *evl = NULL;

    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   21184:	4b05      	ldr	r3, [pc, #20]	; (2119c <ble_gap_event_listener_call+0x1c>)
   21186:	681c      	ldr	r4, [r3, #0]
   21188:	b12c      	cbz	r4, 21196 <ble_gap_event_listener_call+0x16>
        evl->fn(event, evl->arg);
   2118a:	6823      	ldr	r3, [r4, #0]
   2118c:	6861      	ldr	r1, [r4, #4]
   2118e:	4628      	mov	r0, r5
   21190:	4798      	blx	r3
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   21192:	68a4      	ldr	r4, [r4, #8]
   21194:	e7f8      	b.n	21188 <ble_gap_event_listener_call+0x8>
    }

    return 0;
}
   21196:	2000      	movs	r0, #0
   21198:	bd38      	pop	{r3, r4, r5, pc}
   2119a:	bf00      	nop
   2119c:	10005a00 	.word	0x10005a00

000211a0 <ble_gap_extract_conn_cb>:
{
   211a0:	b570      	push	{r4, r5, r6, lr}
   211a2:	4606      	mov	r6, r0
   211a4:	460d      	mov	r5, r1
   211a6:	4614      	mov	r4, r2
    ble_hs_lock();
   211a8:	f005 f9c6 	bl	26538 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   211ac:	4630      	mov	r0, r6
   211ae:	f006 fa47 	bl	27640 <ble_hs_conn_find>
    if (conn != NULL) {
   211b2:	4606      	mov	r6, r0
   211b4:	b140      	cbz	r0, 211c8 <ble_gap_extract_conn_cb+0x28>
        *out_cb = conn->bhc_cb;
   211b6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   211b8:	602b      	str	r3, [r5, #0]
        *out_cb_arg = conn->bhc_cb_arg;
   211ba:	6e03      	ldr	r3, [r0, #96]	; 0x60
   211bc:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   211be:	f005 f9bf 	bl	26540 <ble_hs_unlock>
    if (conn == NULL) {
   211c2:	b12e      	cbz	r6, 211d0 <ble_gap_extract_conn_cb+0x30>
        return 0;
   211c4:	2000      	movs	r0, #0
}
   211c6:	bd70      	pop	{r4, r5, r6, pc}
        *out_cb = NULL;
   211c8:	2300      	movs	r3, #0
   211ca:	602b      	str	r3, [r5, #0]
        *out_cb_arg = NULL;
   211cc:	6023      	str	r3, [r4, #0]
   211ce:	e7f6      	b.n	211be <ble_gap_extract_conn_cb+0x1e>
        return BLE_HS_ENOTCONN;
   211d0:	2007      	movs	r0, #7
   211d2:	e7f8      	b.n	211c6 <ble_gap_extract_conn_cb+0x26>

000211d4 <ble_gap_call_conn_event_cb>:
{
   211d4:	b510      	push	{r4, lr}
   211d6:	b082      	sub	sp, #8
   211d8:	4604      	mov	r4, r0
   211da:	4608      	mov	r0, r1
    rc = ble_gap_extract_conn_cb(conn_handle, &cb, &cb_arg);
   211dc:	466a      	mov	r2, sp
   211de:	a901      	add	r1, sp, #4
   211e0:	f7ff ffde 	bl	211a0 <ble_gap_extract_conn_cb>
    if (rc != 0) {
   211e4:	b108      	cbz	r0, 211ea <ble_gap_call_conn_event_cb+0x16>
}
   211e6:	b002      	add	sp, #8
   211e8:	bd10      	pop	{r4, pc}
    rc = ble_gap_call_event_cb(event, cb, cb_arg);
   211ea:	9a00      	ldr	r2, [sp, #0]
   211ec:	9901      	ldr	r1, [sp, #4]
   211ee:	4620      	mov	r0, r4
   211f0:	f7ff fec3 	bl	20f7a <ble_gap_call_event_cb>
    if (rc != 0) {
   211f4:	e7f7      	b.n	211e6 <ble_gap_call_conn_event_cb+0x12>

000211f6 <ble_gap_fill_conn_desc>:
{
   211f6:	b570      	push	{r4, r5, r6, lr}
   211f8:	b088      	sub	sp, #32
   211fa:	4605      	mov	r5, r0
   211fc:	460c      	mov	r4, r1
    ble_hs_conn_addrs(conn, &addrs);
   211fe:	ae01      	add	r6, sp, #4
   21200:	4631      	mov	r1, r6
   21202:	f006 fa4d 	bl	276a0 <ble_hs_conn_addrs>
    desc->our_id_addr = addrs.our_id_addr;
   21206:	e896 0003 	ldmia.w	r6, {r0, r1}
   2120a:	6060      	str	r0, [r4, #4]
   2120c:	f104 0308 	add.w	r3, r4, #8
   21210:	f823 1b02 	strh.w	r1, [r3], #2
   21214:	0c09      	lsrs	r1, r1, #16
   21216:	7019      	strb	r1, [r3, #0]
    desc->peer_id_addr = addrs.peer_id_addr;
   21218:	f8dd 300b 	ldr.w	r3, [sp, #11]
   2121c:	f8c4 300b 	str.w	r3, [r4, #11]
   21220:	f8bd 200f 	ldrh.w	r2, [sp, #15]
   21224:	f89d 3011 	ldrb.w	r3, [sp, #17]
   21228:	f8a4 200f 	strh.w	r2, [r4, #15]
   2122c:	7463      	strb	r3, [r4, #17]
    desc->our_ota_addr = addrs.our_ota_addr;
   2122e:	f8dd 3012 	ldr.w	r3, [sp, #18]
   21232:	f8c4 3012 	str.w	r3, [r4, #18]
   21236:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2123a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   2123e:	82e2      	strh	r2, [r4, #22]
   21240:	7623      	strb	r3, [r4, #24]
    desc->peer_ota_addr = addrs.peer_ota_addr;
   21242:	f8dd 3019 	ldr.w	r3, [sp, #25]
   21246:	f8c4 3019 	str.w	r3, [r4, #25]
   2124a:	f8bd 201d 	ldrh.w	r2, [sp, #29]
   2124e:	f89d 301f 	ldrb.w	r3, [sp, #31]
   21252:	f8a4 201d 	strh.w	r2, [r4, #29]
   21256:	77e3      	strb	r3, [r4, #31]
    desc->conn_handle = conn->bhc_handle;
   21258:	88ab      	ldrh	r3, [r5, #4]
   2125a:	8423      	strh	r3, [r4, #32]
    desc->conn_itvl = conn->bhc_itvl;
   2125c:	8bab      	ldrh	r3, [r5, #28]
   2125e:	8463      	strh	r3, [r4, #34]	; 0x22
    desc->conn_latency = conn->bhc_latency;
   21260:	8beb      	ldrh	r3, [r5, #30]
   21262:	84a3      	strh	r3, [r4, #36]	; 0x24
    desc->supervision_timeout = conn->bhc_supervision_timeout;
   21264:	8c2b      	ldrh	r3, [r5, #32]
   21266:	84e3      	strh	r3, [r4, #38]	; 0x26
    desc->master_clock_accuracy = conn->bhc_master_clock_accuracy;
   21268:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   2126c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    desc->sec_state = conn->bhc_sec_state;
   21270:	6dab      	ldr	r3, [r5, #88]	; 0x58
   21272:	6023      	str	r3, [r4, #0]
    if (conn->bhc_flags & BLE_HS_CONN_F_MASTER) {
   21274:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   21278:	f013 0f01 	tst.w	r3, #1
   2127c:	d004      	beq.n	21288 <ble_gap_fill_conn_desc+0x92>
        desc->role = BLE_GAP_ROLE_MASTER;
   2127e:	2300      	movs	r3, #0
   21280:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   21284:	b008      	add	sp, #32
   21286:	bd70      	pop	{r4, r5, r6, pc}
        desc->role = BLE_GAP_ROLE_SLAVE;
   21288:	2301      	movs	r3, #1
   2128a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   2128e:	e7f9      	b.n	21284 <ble_gap_fill_conn_desc+0x8e>

00021290 <ble_gap_conn_to_snapshot>:
{
   21290:	b538      	push	{r3, r4, r5, lr}
   21292:	4605      	mov	r5, r0
   21294:	460c      	mov	r4, r1
    ble_gap_fill_conn_desc(conn, snap->desc);
   21296:	6809      	ldr	r1, [r1, #0]
   21298:	f7ff ffad 	bl	211f6 <ble_gap_fill_conn_desc>
    snap->cb = conn->bhc_cb;
   2129c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   2129e:	6063      	str	r3, [r4, #4]
    snap->cb_arg = conn->bhc_cb_arg;
   212a0:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   212a2:	60a3      	str	r3, [r4, #8]
}
   212a4:	bd38      	pop	{r3, r4, r5, pc}

000212a6 <ble_gap_find_snapshot>:
{
   212a6:	b538      	push	{r3, r4, r5, lr}
   212a8:	4604      	mov	r4, r0
   212aa:	460d      	mov	r5, r1
    ble_hs_lock();
   212ac:	f005 f944 	bl	26538 <ble_hs_lock>
    conn = ble_hs_conn_find(handle);
   212b0:	4620      	mov	r0, r4
   212b2:	f006 f9c5 	bl	27640 <ble_hs_conn_find>
    if (conn != NULL) {
   212b6:	4604      	mov	r4, r0
   212b8:	b110      	cbz	r0, 212c0 <ble_gap_find_snapshot+0x1a>
        ble_gap_conn_to_snapshot(conn, snap);
   212ba:	4629      	mov	r1, r5
   212bc:	f7ff ffe8 	bl	21290 <ble_gap_conn_to_snapshot>
    ble_hs_unlock();
   212c0:	f005 f93e 	bl	26540 <ble_hs_unlock>
    if (conn == NULL) {
   212c4:	b10c      	cbz	r4, 212ca <ble_gap_find_snapshot+0x24>
        return 0;
   212c6:	2000      	movs	r0, #0
}
   212c8:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOTCONN;
   212ca:	2007      	movs	r0, #7
   212cc:	e7fc      	b.n	212c8 <ble_gap_find_snapshot+0x22>

000212ce <ble_gap_rd_rem_sup_feat_tx>:
{
   212ce:	b500      	push	{lr}
   212d0:	b085      	sub	sp, #20
    cmd.conn_handle = htole16(handle);
   212d2:	f8ad 000c 	strh.w	r0, [sp, #12]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   212d6:	2300      	movs	r3, #0
   212d8:	9300      	str	r3, [sp, #0]
   212da:	2202      	movs	r2, #2
   212dc:	a903      	add	r1, sp, #12
   212de:	f242 0016 	movw	r0, #8214	; 0x2016
   212e2:	f006 fbfd 	bl	27ae0 <ble_hs_hci_cmd_tx>
}
   212e6:	b005      	add	sp, #20
   212e8:	f85d fb04 	ldr.w	pc, [sp], #4

000212ec <ble_gap_conn_cancel_tx>:
{
   212ec:	b500      	push	{lr}
   212ee:	b083      	sub	sp, #12
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   212f0:	2100      	movs	r1, #0
   212f2:	9100      	str	r1, [sp, #0]
   212f4:	460b      	mov	r3, r1
   212f6:	460a      	mov	r2, r1
   212f8:	f242 000e 	movw	r0, #8206	; 0x200e
   212fc:	f006 fbf0 	bl	27ae0 <ble_hs_hci_cmd_tx>
}
   21300:	b003      	add	sp, #12
   21302:	f85d fb04 	ldr.w	pc, [sp], #4

00021306 <ble_gap_disc_enable_tx>:
{
   21306:	b500      	push	{lr}
   21308:	b085      	sub	sp, #20
    cmd.enable = !!enable;
   2130a:	3800      	subs	r0, #0
   2130c:	bf18      	it	ne
   2130e:	2001      	movne	r0, #1
   21310:	f88d 000c 	strb.w	r0, [sp, #12]
    cmd.filter_duplicates = !!filter_duplicates;
   21314:	3900      	subs	r1, #0
   21316:	bf18      	it	ne
   21318:	2101      	movne	r1, #1
   2131a:	f88d 100d 	strb.w	r1, [sp, #13]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   2131e:	2300      	movs	r3, #0
   21320:	9300      	str	r3, [sp, #0]
   21322:	2202      	movs	r2, #2
   21324:	a903      	add	r1, sp, #12
   21326:	f242 000c 	movw	r0, #8204	; 0x200c
   2132a:	f006 fbd9 	bl	27ae0 <ble_hs_hci_cmd_tx>
}
   2132e:	b005      	add	sp, #20
   21330:	f85d fb04 	ldr.w	pc, [sp], #4

00021334 <ble_gap_disc_disable_tx>:
{
   21334:	b508      	push	{r3, lr}
    return ble_gap_disc_enable_tx(0, 0);
   21336:	2100      	movs	r1, #0
   21338:	4608      	mov	r0, r1
   2133a:	f7ff ffe4 	bl	21306 <ble_gap_disc_enable_tx>
}
   2133e:	bd08      	pop	{r3, pc}

00021340 <ble_gap_adv_enable_tx>:
{
   21340:	b500      	push	{lr}
   21342:	b085      	sub	sp, #20
    cmd.enable = !!enable;
   21344:	3800      	subs	r0, #0
   21346:	bf18      	it	ne
   21348:	2001      	movne	r0, #1
   2134a:	f88d 000c 	strb.w	r0, [sp, #12]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2134e:	2300      	movs	r3, #0
   21350:	9300      	str	r3, [sp, #0]
   21352:	2201      	movs	r2, #1
   21354:	a903      	add	r1, sp, #12
   21356:	f242 000a 	movw	r0, #8202	; 0x200a
   2135a:	f006 fbc1 	bl	27ae0 <ble_hs_hci_cmd_tx>
}
   2135e:	b005      	add	sp, #20
   21360:	f85d fb04 	ldr.w	pc, [sp], #4

00021364 <ble_gap_wl_tx_clear>:
{
   21364:	b500      	push	{lr}
   21366:	b083      	sub	sp, #12
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   21368:	2100      	movs	r1, #0
   2136a:	9100      	str	r1, [sp, #0]
   2136c:	460b      	mov	r3, r1
   2136e:	460a      	mov	r2, r1
   21370:	f242 0010 	movw	r0, #8208	; 0x2010
   21374:	f006 fbb4 	bl	27ae0 <ble_hs_hci_cmd_tx>
}
   21378:	b003      	add	sp, #12
   2137a:	f85d fb04 	ldr.w	pc, [sp], #4

0002137e <ble_gap_wl_tx_add>:
    if (addr->type > BLE_ADDR_RANDOM) {
   2137e:	7803      	ldrb	r3, [r0, #0]
   21380:	2b01      	cmp	r3, #1
   21382:	d817      	bhi.n	213b4 <ble_gap_wl_tx_add+0x36>
{
   21384:	b500      	push	{lr}
   21386:	b085      	sub	sp, #20
    memcpy(cmd.addr, addr->val, BLE_DEV_ADDR_LEN);
   21388:	4603      	mov	r3, r0
   2138a:	f853 2f01 	ldr.w	r2, [r3, #1]!
   2138e:	f8cd 2009 	str.w	r2, [sp, #9]
   21392:	889b      	ldrh	r3, [r3, #4]
   21394:	f8ad 300d 	strh.w	r3, [sp, #13]
    cmd.addr_type = addr->type;
   21398:	7803      	ldrb	r3, [r0, #0]
   2139a:	f88d 3008 	strb.w	r3, [sp, #8]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2139e:	2300      	movs	r3, #0
   213a0:	9300      	str	r3, [sp, #0]
   213a2:	2207      	movs	r2, #7
   213a4:	a902      	add	r1, sp, #8
   213a6:	f242 0011 	movw	r0, #8209	; 0x2011
   213aa:	f006 fb99 	bl	27ae0 <ble_hs_hci_cmd_tx>
}
   213ae:	b005      	add	sp, #20
   213b0:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EINVAL;
   213b4:	2003      	movs	r0, #3
}
   213b6:	4770      	bx	lr

000213b8 <ble_gap_adv_params_tx>:
{
   213b8:	b570      	push	{r4, r5, r6, lr}
   213ba:	b08a      	sub	sp, #40	; 0x28
   213bc:	4606      	mov	r6, r0
   213be:	460c      	mov	r4, r1
   213c0:	4615      	mov	r5, r2
    const ble_addr_t *peer_any = BLE_ADDR_ANY;
   213c2:	2300      	movs	r3, #0
   213c4:	9308      	str	r3, [sp, #32]
   213c6:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    if ((adv_params->itvl_min == 0) && (adv_params->itvl_max == 0)) {
   213ca:	8853      	ldrh	r3, [r2, #2]
   213cc:	b90b      	cbnz	r3, 213d2 <ble_gap_adv_params_tx+0x1a>
   213ce:	8892      	ldrh	r2, [r2, #4]
   213d0:	b342      	cbz	r2, 21424 <ble_gap_adv_params_tx+0x6c>
        cmd.min_interval = htole16(adv_params->itvl_min);
   213d2:	f8ad 3010 	strh.w	r3, [sp, #16]
        cmd.max_interval = htole16(adv_params->itvl_max);
   213d6:	88ab      	ldrh	r3, [r5, #4]
   213d8:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.type = ble_gap_adv_type(adv_params);
   213dc:	4628      	mov	r0, r5
   213de:	f7ff fe55 	bl	2108c <ble_gap_adv_type>
   213e2:	f88d 0014 	strb.w	r0, [sp, #20]
    cmd.own_addr_type = own_addr_type;
   213e6:	f88d 6015 	strb.w	r6, [sp, #21]
    if (peer_addr == NULL) {
   213ea:	b354      	cbz	r4, 21442 <ble_gap_adv_params_tx+0x8a>
    cmd.peer_addr_type = peer_addr->type;
   213ec:	7823      	ldrb	r3, [r4, #0]
   213ee:	f88d 3016 	strb.w	r3, [sp, #22]
    memcpy(&cmd.peer_addr, peer_addr->val, sizeof(cmd.peer_addr));
   213f2:	f854 3f01 	ldr.w	r3, [r4, #1]!
   213f6:	f8cd 3017 	str.w	r3, [sp, #23]
   213fa:	88a3      	ldrh	r3, [r4, #4]
   213fc:	f8ad 301b 	strh.w	r3, [sp, #27]
    if (adv_params->channel_map == 0) {
   21400:	79ab      	ldrb	r3, [r5, #6]
   21402:	bb03      	cbnz	r3, 21446 <ble_gap_adv_params_tx+0x8e>
        cmd.chan_map = BLE_GAP_ADV_DFLT_CHANNEL_MAP;
   21404:	2307      	movs	r3, #7
   21406:	f88d 301d 	strb.w	r3, [sp, #29]
    cmd.filter_policy = adv_params->filter_policy;
   2140a:	79eb      	ldrb	r3, [r5, #7]
   2140c:	f88d 301e 	strb.w	r3, [sp, #30]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   21410:	2300      	movs	r3, #0
   21412:	9300      	str	r3, [sp, #0]
   21414:	220f      	movs	r2, #15
   21416:	a904      	add	r1, sp, #16
   21418:	f242 0006 	movw	r0, #8198	; 0x2006
   2141c:	f006 fb60 	bl	27ae0 <ble_hs_hci_cmd_tx>
}
   21420:	b00a      	add	sp, #40	; 0x28
   21422:	bd70      	pop	{r4, r5, r6, pc}
        ble_gap_adv_dflt_itvls(adv_params->conn_mode, &min, &max);
   21424:	aa03      	add	r2, sp, #12
   21426:	f10d 010e 	add.w	r1, sp, #14
   2142a:	7828      	ldrb	r0, [r5, #0]
   2142c:	f7ff fe42 	bl	210b4 <ble_gap_adv_dflt_itvls>
        cmd.min_interval = htole16(min);
   21430:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   21434:	f8ad 3010 	strh.w	r3, [sp, #16]
        cmd.max_interval = htole16(max);
   21438:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2143c:	f8ad 3012 	strh.w	r3, [sp, #18]
   21440:	e7cc      	b.n	213dc <ble_gap_adv_params_tx+0x24>
        peer_addr = peer_any;
   21442:	ac08      	add	r4, sp, #32
   21444:	e7d2      	b.n	213ec <ble_gap_adv_params_tx+0x34>
        cmd.chan_map = adv_params->channel_map;
   21446:	f88d 301d 	strb.w	r3, [sp, #29]
   2144a:	e7de      	b.n	2140a <ble_gap_adv_params_tx+0x52>

0002144c <ble_gap_disc_tx_params>:
{
   2144c:	b500      	push	{lr}
   2144e:	b085      	sub	sp, #20
    if (disc_params->passive) {
   21450:	794b      	ldrb	r3, [r1, #5]
   21452:	f013 0f02 	tst.w	r3, #2
   21456:	d018      	beq.n	2148a <ble_gap_disc_tx_params+0x3e>
        cmd.scan_type = BLE_HCI_SCAN_TYPE_PASSIVE;
   21458:	2300      	movs	r3, #0
   2145a:	f88d 3008 	strb.w	r3, [sp, #8]
    cmd.scan_itvl = htole16(disc_params->itvl);
   2145e:	880b      	ldrh	r3, [r1, #0]
   21460:	f8ad 3009 	strh.w	r3, [sp, #9]
    cmd.scan_window = htole16(disc_params->window);
   21464:	884b      	ldrh	r3, [r1, #2]
   21466:	f8ad 300b 	strh.w	r3, [sp, #11]
    cmd.own_addr_type = own_addr_type;
   2146a:	f88d 000d 	strb.w	r0, [sp, #13]
    cmd.filter_policy = disc_params->filter_policy;
   2146e:	790b      	ldrb	r3, [r1, #4]
   21470:	f88d 300e 	strb.w	r3, [sp, #14]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   21474:	2300      	movs	r3, #0
   21476:	9300      	str	r3, [sp, #0]
   21478:	2207      	movs	r2, #7
   2147a:	a902      	add	r1, sp, #8
   2147c:	f242 000b 	movw	r0, #8203	; 0x200b
   21480:	f006 fb2e 	bl	27ae0 <ble_hs_hci_cmd_tx>
}
   21484:	b005      	add	sp, #20
   21486:	f85d fb04 	ldr.w	pc, [sp], #4
        cmd.scan_type = BLE_HCI_SCAN_TYPE_ACTIVE;
   2148a:	2301      	movs	r3, #1
   2148c:	f88d 3008 	strb.w	r3, [sp, #8]
   21490:	e7e5      	b.n	2145e <ble_gap_disc_tx_params+0x12>

00021492 <ble_gap_tx_param_pos_reply>:
{
   21492:	b500      	push	{lr}
   21494:	b087      	sub	sp, #28
    cmd.conn_handle = htole16(conn_handle);
   21496:	f8ad 0008 	strh.w	r0, [sp, #8]
    cmd.conn_itvl_min = htole16(params->itvl_min);
   2149a:	880b      	ldrh	r3, [r1, #0]
   2149c:	f8ad 300a 	strh.w	r3, [sp, #10]
    cmd.conn_itvl_max = htole16(params->itvl_max);
   214a0:	884b      	ldrh	r3, [r1, #2]
   214a2:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.conn_latency = htole16(params->latency);
   214a6:	888b      	ldrh	r3, [r1, #4]
   214a8:	f8ad 300e 	strh.w	r3, [sp, #14]
    cmd.supervision_timeout = htole16(params->supervision_timeout);
   214ac:	88cb      	ldrh	r3, [r1, #6]
   214ae:	f8ad 3010 	strh.w	r3, [sp, #16]
    cmd.min_ce = htole16(params->min_ce_len);
   214b2:	890b      	ldrh	r3, [r1, #8]
   214b4:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.max_ce = htole16(params->max_ce_len);
   214b8:	894b      	ldrh	r3, [r1, #10]
   214ba:	f8ad 3014 	strh.w	r3, [sp, #20]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   214be:	2300      	movs	r3, #0
   214c0:	9300      	str	r3, [sp, #0]
   214c2:	220e      	movs	r2, #14
   214c4:	a902      	add	r1, sp, #8
   214c6:	f242 0020 	movw	r0, #8224	; 0x2020
   214ca:	f006 fb09 	bl	27ae0 <ble_hs_hci_cmd_tx>
}
   214ce:	b007      	add	sp, #28
   214d0:	f85d fb04 	ldr.w	pc, [sp], #4

000214d4 <ble_gap_tx_param_neg_reply>:
{
   214d4:	b500      	push	{lr}
   214d6:	b085      	sub	sp, #20
    cmd.conn_handle = htole16(conn_handle);
   214d8:	f8ad 000c 	strh.w	r0, [sp, #12]
    cmd.reason = reject_reason;
   214dc:	f88d 100e 	strb.w	r1, [sp, #14]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   214e0:	2300      	movs	r3, #0
   214e2:	9300      	str	r3, [sp, #0]
   214e4:	2203      	movs	r2, #3
   214e6:	a903      	add	r1, sp, #12
   214e8:	f242 0021 	movw	r0, #8225	; 0x2021
   214ec:	f006 faf8 	bl	27ae0 <ble_hs_hci_cmd_tx>
}
   214f0:	b005      	add	sp, #20
   214f2:	f85d fb04 	ldr.w	pc, [sp], #4

000214f6 <ble_gap_update_tx>:
{
   214f6:	b500      	push	{lr}
   214f8:	b087      	sub	sp, #28
    cmd.conn_handle = htole16(conn_handle);
   214fa:	f8ad 0008 	strh.w	r0, [sp, #8]
    cmd.conn_itvl_min = htole16(params->itvl_min);
   214fe:	880b      	ldrh	r3, [r1, #0]
   21500:	f8ad 300a 	strh.w	r3, [sp, #10]
    cmd.conn_itvl_max = htole16(params->itvl_max);
   21504:	884b      	ldrh	r3, [r1, #2]
   21506:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.conn_latency = htole16(params->latency);
   2150a:	888b      	ldrh	r3, [r1, #4]
   2150c:	f8ad 300e 	strh.w	r3, [sp, #14]
    cmd.supervision_timeout = htole16(params->supervision_timeout);
   21510:	88cb      	ldrh	r3, [r1, #6]
   21512:	f8ad 3010 	strh.w	r3, [sp, #16]
    cmd.min_ce_len = htole16(params->min_ce_len);
   21516:	890b      	ldrh	r3, [r1, #8]
   21518:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.max_ce_len = htole16(params->max_ce_len);
   2151c:	894b      	ldrh	r3, [r1, #10]
   2151e:	f8ad 3014 	strh.w	r3, [sp, #20]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   21522:	2300      	movs	r3, #0
   21524:	9300      	str	r3, [sp, #0]
   21526:	220e      	movs	r2, #14
   21528:	a902      	add	r1, sp, #8
   2152a:	f242 0013 	movw	r0, #8211	; 0x2013
   2152e:	f006 fad7 	bl	27ae0 <ble_hs_hci_cmd_tx>
}
   21532:	b007      	add	sp, #28
   21534:	f85d fb04 	ldr.w	pc, [sp], #4

00021538 <ble_gap_conn_create_tx>:
{
   21538:	b500      	push	{lr}
   2153a:	b08b      	sub	sp, #44	; 0x2c
    cmd.scan_itvl = htole16(params->scan_itvl);
   2153c:	8813      	ldrh	r3, [r2, #0]
   2153e:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.scan_window = htole16(params->scan_window);
   21542:	8853      	ldrh	r3, [r2, #2]
   21544:	f8ad 300e 	strh.w	r3, [sp, #14]
    if (peer_addr == NULL) {
   21548:	b361      	cbz	r1, 215a4 <ble_gap_conn_create_tx+0x6c>
   2154a:	460b      	mov	r3, r1
        cmd.filter_policy = BLE_HCI_CONN_FILT_NO_WL;
   2154c:	2100      	movs	r1, #0
   2154e:	f88d 1010 	strb.w	r1, [sp, #16]
        cmd.peer_addr_type = peer_addr->type;
   21552:	7819      	ldrb	r1, [r3, #0]
   21554:	f88d 1011 	strb.w	r1, [sp, #17]
        memcpy(cmd.peer_addr, peer_addr->val, sizeof(cmd.peer_addr));
   21558:	f853 1f01 	ldr.w	r1, [r3, #1]!
   2155c:	f8cd 1012 	str.w	r1, [sp, #18]
   21560:	889b      	ldrh	r3, [r3, #4]
   21562:	f8ad 3016 	strh.w	r3, [sp, #22]
    cmd.own_addr_type = own_addr_type;
   21566:	f88d 0018 	strb.w	r0, [sp, #24]
    cmd.min_conn_itvl = htole16(params->itvl_min);
   2156a:	8893      	ldrh	r3, [r2, #4]
   2156c:	f8ad 3019 	strh.w	r3, [sp, #25]
    cmd.max_conn_itvl = htole16(params->itvl_max);
   21570:	88d3      	ldrh	r3, [r2, #6]
   21572:	f8ad 301b 	strh.w	r3, [sp, #27]
    cmd.conn_latency = htole16(params->latency);
   21576:	8913      	ldrh	r3, [r2, #8]
   21578:	f8ad 301d 	strh.w	r3, [sp, #29]
    cmd.tmo = htole16(params->supervision_timeout);
   2157c:	8953      	ldrh	r3, [r2, #10]
   2157e:	f8ad 301f 	strh.w	r3, [sp, #31]
    cmd.min_ce = htole16(params->min_ce_len);
   21582:	8993      	ldrh	r3, [r2, #12]
   21584:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
    cmd.max_ce = htole16(params->max_ce_len);
   21588:	89d3      	ldrh	r3, [r2, #14]
   2158a:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   2158e:	2300      	movs	r3, #0
   21590:	9300      	str	r3, [sp, #0]
   21592:	2219      	movs	r2, #25
   21594:	a903      	add	r1, sp, #12
   21596:	f242 000d 	movw	r0, #8205	; 0x200d
   2159a:	f006 faa1 	bl	27ae0 <ble_hs_hci_cmd_tx>
}
   2159e:	b00b      	add	sp, #44	; 0x2c
   215a0:	f85d fb04 	ldr.w	pc, [sp], #4
        cmd.filter_policy = BLE_HCI_CONN_FILT_USE_WL;
   215a4:	2301      	movs	r3, #1
   215a6:	f88d 3010 	strb.w	r3, [sp, #16]
        cmd.peer_addr_type = 0;
   215aa:	2300      	movs	r3, #0
   215ac:	f88d 3011 	strb.w	r3, [sp, #17]
        memset(cmd.peer_addr, 0, sizeof(cmd.peer_addr));
   215b0:	f8cd 3012 	str.w	r3, [sp, #18]
   215b4:	f8ad 3016 	strh.w	r3, [sp, #22]
   215b8:	e7d5      	b.n	21566 <ble_gap_conn_create_tx+0x2e>
	...

000215bc <ble_gap_update_entry_remove>:
{
   215bc:	b510      	push	{r4, lr}
   215be:	b082      	sub	sp, #8
    entry = ble_gap_update_entry_find(conn_handle, &prev);
   215c0:	a901      	add	r1, sp, #4
   215c2:	f7ff fda7 	bl	21114 <ble_gap_update_entry_find>
    if (entry != NULL) {
   215c6:	4604      	mov	r4, r0
   215c8:	b128      	cbz	r0, 215d6 <ble_gap_update_entry_remove+0x1a>
        if (prev == NULL) {
   215ca:	9b01      	ldr	r3, [sp, #4]
   215cc:	b133      	cbz	r3, 215dc <ble_gap_update_entry_remove+0x20>
            SLIST_NEXT(prev, next) = SLIST_NEXT(entry, next);
   215ce:	6802      	ldr	r2, [r0, #0]
   215d0:	601a      	str	r2, [r3, #0]
        ble_hs_timer_resched();
   215d2:	f005 f8a3 	bl	2671c <ble_hs_timer_resched>
}
   215d6:	4620      	mov	r0, r4
   215d8:	b002      	add	sp, #8
   215da:	bd10      	pop	{r4, pc}
            SLIST_REMOVE_HEAD(&ble_gap_update_entries, next);
   215dc:	4b02      	ldr	r3, [pc, #8]	; (215e8 <ble_gap_update_entry_remove+0x2c>)
   215de:	681a      	ldr	r2, [r3, #0]
   215e0:	6812      	ldr	r2, [r2, #0]
   215e2:	601a      	str	r2, [r3, #0]
   215e4:	e7f5      	b.n	215d2 <ble_gap_update_entry_remove+0x16>
   215e6:	bf00      	nop
   215e8:	10005a8c 	.word	0x10005a8c

000215ec <ble_gap_slave_reset_state>:
{
   215ec:	b508      	push	{r3, lr}
    ble_gap_slave[instance].op = BLE_GAP_OP_NULL;
   215ee:	4b06      	ldr	r3, [pc, #24]	; (21608 <ble_gap_slave_reset_state+0x1c>)
   215f0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   215f4:	2200      	movs	r2, #0
   215f6:	7502      	strb	r2, [r0, #20]
    ble_gap_slave[instance].exp_set = 0;
   215f8:	7d43      	ldrb	r3, [r0, #21]
   215fa:	f362 1304 	bfi	r3, r2, #4, #1
   215fe:	7543      	strb	r3, [r0, #21]
    ble_hs_timer_resched();
   21600:	f005 f88c 	bl	2671c <ble_hs_timer_resched>
}
   21604:	bd08      	pop	{r3, pc}
   21606:	bf00      	nop
   21608:	10005ac4 	.word	0x10005ac4

0002160c <ble_gap_slave_extract_cb>:
{
   2160c:	b570      	push	{r4, r5, r6, lr}
   2160e:	4604      	mov	r4, r0
   21610:	460e      	mov	r6, r1
   21612:	4615      	mov	r5, r2
    ble_hs_lock();
   21614:	f004 ff90 	bl	26538 <ble_hs_lock>
    *out_cb = ble_gap_slave[instance].cb;
   21618:	4b06      	ldr	r3, [pc, #24]	; (21634 <ble_gap_slave_extract_cb+0x28>)
   2161a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   2161e:	69da      	ldr	r2, [r3, #28]
   21620:	6032      	str	r2, [r6, #0]
    *out_cb_arg = ble_gap_slave[instance].cb_arg;
   21622:	6a1b      	ldr	r3, [r3, #32]
   21624:	602b      	str	r3, [r5, #0]
    ble_gap_slave_reset_state(instance);
   21626:	4620      	mov	r0, r4
   21628:	f7ff ffe0 	bl	215ec <ble_gap_slave_reset_state>
    ble_hs_unlock();
   2162c:	f004 ff88 	bl	26540 <ble_hs_unlock>
}
   21630:	bd70      	pop	{r4, r5, r6, pc}
   21632:	bf00      	nop
   21634:	10005ac4 	.word	0x10005ac4

00021638 <ble_gap_adv_finished>:
{
   21638:	b530      	push	{r4, r5, lr}
   2163a:	b091      	sub	sp, #68	; 0x44
   2163c:	4604      	mov	r4, r0
   2163e:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   21640:	2234      	movs	r2, #52	; 0x34
   21642:	2100      	movs	r1, #0
   21644:	a803      	add	r0, sp, #12
   21646:	f7f9 fb3a 	bl	1acbe <memset>
    event.type = BLE_GAP_EVENT_ADV_COMPLETE;
   2164a:	2309      	movs	r3, #9
   2164c:	f88d 300c 	strb.w	r3, [sp, #12]
    event.adv_complete.reason = reason;
   21650:	9504      	str	r5, [sp, #16]
    ble_gap_event_listener_call(&event);
   21652:	a803      	add	r0, sp, #12
   21654:	f7ff fd94 	bl	21180 <ble_gap_event_listener_call>
    ble_gap_slave_extract_cb(instance, &cb, &cb_arg);
   21658:	aa01      	add	r2, sp, #4
   2165a:	a902      	add	r1, sp, #8
   2165c:	4620      	mov	r0, r4
   2165e:	f7ff ffd5 	bl	2160c <ble_gap_slave_extract_cb>
    if (cb != NULL) {
   21662:	9b02      	ldr	r3, [sp, #8]
   21664:	b113      	cbz	r3, 2166c <ble_gap_adv_finished+0x34>
        cb(&event, cb_arg);
   21666:	9901      	ldr	r1, [sp, #4]
   21668:	a803      	add	r0, sp, #12
   2166a:	4798      	blx	r3
}
   2166c:	b011      	add	sp, #68	; 0x44
   2166e:	bd30      	pop	{r4, r5, pc}

00021670 <ble_gap_master_reset_state>:
{
   21670:	b508      	push	{r3, lr}
    ble_gap_master.op = BLE_GAP_OP_NULL;
   21672:	4b07      	ldr	r3, [pc, #28]	; (21690 <ble_gap_master_reset_state+0x20>)
   21674:	2200      	movs	r2, #0
   21676:	701a      	strb	r2, [r3, #0]
    ble_gap_master.exp_set = 0;
   21678:	7859      	ldrb	r1, [r3, #1]
   2167a:	f362 0100 	bfi	r1, r2, #0, #1
   2167e:	7059      	strb	r1, [r3, #1]
    ble_gap_master.conn.cancel = 0;
   21680:	7c59      	ldrb	r1, [r3, #17]
   21682:	f362 01c3 	bfi	r1, r2, #3, #1
   21686:	7459      	strb	r1, [r3, #17]
    ble_hs_timer_resched();
   21688:	f005 f848 	bl	2671c <ble_hs_timer_resched>
}
   2168c:	bd08      	pop	{r3, pc}
   2168e:	bf00      	nop
   21690:	10005ac4 	.word	0x10005ac4

00021694 <ble_gap_master_extract_state>:
{
   21694:	b570      	push	{r4, r5, r6, lr}
   21696:	4604      	mov	r4, r0
   21698:	460e      	mov	r6, r1
    ble_hs_lock();
   2169a:	f004 ff4d 	bl	26538 <ble_hs_lock>
    *out_state = ble_gap_master;
   2169e:	4d08      	ldr	r5, [pc, #32]	; (216c0 <ble_gap_master_extract_state+0x2c>)
   216a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   216a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   216a4:	682b      	ldr	r3, [r5, #0]
   216a6:	6023      	str	r3, [r4, #0]
    if (reset_state) {
   216a8:	b916      	cbnz	r6, 216b0 <ble_gap_master_extract_state+0x1c>
    ble_hs_unlock();
   216aa:	f004 ff49 	bl	26540 <ble_hs_unlock>
}
   216ae:	bd70      	pop	{r4, r5, r6, pc}
        ble_gap_master_reset_state();
   216b0:	f7ff ffde 	bl	21670 <ble_gap_master_reset_state>
        ble_gap_master.preempted_op = BLE_GAP_OP_NULL;
   216b4:	f1a5 0310 	sub.w	r3, r5, #16
   216b8:	2200      	movs	r2, #0
   216ba:	741a      	strb	r2, [r3, #16]
   216bc:	e7f5      	b.n	216aa <ble_gap_master_extract_state+0x16>
   216be:	bf00      	nop
   216c0:	10005ac4 	.word	0x10005ac4

000216c4 <ble_gap_master_connect_failure>:
{
   216c4:	b510      	push	{r4, lr}
   216c6:	b092      	sub	sp, #72	; 0x48
   216c8:	4604      	mov	r4, r0
    ble_gap_master_extract_state(&state, 1);
   216ca:	2101      	movs	r1, #1
   216cc:	a80d      	add	r0, sp, #52	; 0x34
   216ce:	f7ff ffe1 	bl	21694 <ble_gap_master_extract_state>
    if (ble_gap_has_client(&state)) {
   216d2:	a80d      	add	r0, sp, #52	; 0x34
   216d4:	f7ff fc7c 	bl	20fd0 <ble_gap_has_client>
   216d8:	b910      	cbnz	r0, 216e0 <ble_gap_master_connect_failure+0x1c>
        rc = 0;
   216da:	2000      	movs	r0, #0
}
   216dc:	b012      	add	sp, #72	; 0x48
   216de:	bd10      	pop	{r4, pc}
        memset(&event, 0, sizeof event);
   216e0:	2234      	movs	r2, #52	; 0x34
   216e2:	2100      	movs	r1, #0
   216e4:	4668      	mov	r0, sp
   216e6:	f7f9 faea 	bl	1acbe <memset>
        event.type = BLE_GAP_EVENT_CONNECT;
   216ea:	2300      	movs	r3, #0
   216ec:	f88d 3000 	strb.w	r3, [sp]
        event.connect.status = status;
   216f0:	9401      	str	r4, [sp, #4]
        rc = state.cb(&event, state.cb_arg);
   216f2:	9910      	ldr	r1, [sp, #64]	; 0x40
   216f4:	4668      	mov	r0, sp
   216f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   216f8:	4798      	blx	r3
   216fa:	e7ef      	b.n	216dc <ble_gap_master_connect_failure+0x18>

000216fc <ble_gap_disc_complete>:
{
   216fc:	b500      	push	{lr}
   216fe:	b093      	sub	sp, #76	; 0x4c
    memset(&event, 0, sizeof event);
   21700:	2234      	movs	r2, #52	; 0x34
   21702:	2100      	movs	r1, #0
   21704:	4668      	mov	r0, sp
   21706:	f7f9 fada 	bl	1acbe <memset>
    event.type = BLE_GAP_EVENT_DISC_COMPLETE;
   2170a:	2308      	movs	r3, #8
   2170c:	f88d 3000 	strb.w	r3, [sp]
    ble_gap_master_extract_state(&state, 1);
   21710:	2101      	movs	r1, #1
   21712:	a80d      	add	r0, sp, #52	; 0x34
   21714:	f7ff ffbe 	bl	21694 <ble_gap_master_extract_state>
    if (ble_gap_has_client(&state)) {
   21718:	a80d      	add	r0, sp, #52	; 0x34
   2171a:	f7ff fc59 	bl	20fd0 <ble_gap_has_client>
   2171e:	b928      	cbnz	r0, 2172c <ble_gap_disc_complete+0x30>
    ble_gap_event_listener_call(&event);
   21720:	4668      	mov	r0, sp
   21722:	f7ff fd2d 	bl	21180 <ble_gap_event_listener_call>
}
   21726:	b013      	add	sp, #76	; 0x4c
   21728:	f85d fb04 	ldr.w	pc, [sp], #4
        ble_gap_call_event_cb(&event, state.cb, state.cb_arg);
   2172c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2172e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   21730:	4668      	mov	r0, sp
   21732:	f7ff fc22 	bl	20f7a <ble_gap_call_event_cb>
   21736:	e7f3      	b.n	21720 <ble_gap_disc_complete+0x24>

00021738 <ble_gap_disc_report>:
{
   21738:	b530      	push	{r4, r5, lr}
   2173a:	b093      	sub	sp, #76	; 0x4c
   2173c:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   2173e:	2234      	movs	r2, #52	; 0x34
   21740:	2100      	movs	r1, #0
   21742:	4668      	mov	r0, sp
   21744:	f7f9 fabb 	bl	1acbe <memset>
    event.type = BLE_GAP_EVENT_DISC;
   21748:	2307      	movs	r3, #7
   2174a:	f88d 3000 	strb.w	r3, [sp]
    event.disc = *((struct ble_gap_disc_desc *)desc);
   2174e:	ad01      	add	r5, sp, #4
   21750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   21752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   21754:	e894 0003 	ldmia.w	r4, {r0, r1}
   21758:	e885 0003 	stmia.w	r5, {r0, r1}
    ble_gap_master_extract_state(&state, 0);
   2175c:	2100      	movs	r1, #0
   2175e:	a80d      	add	r0, sp, #52	; 0x34
   21760:	f7ff ff98 	bl	21694 <ble_gap_master_extract_state>
    if (ble_gap_has_client(&state)) {
   21764:	a80d      	add	r0, sp, #52	; 0x34
   21766:	f7ff fc33 	bl	20fd0 <ble_gap_has_client>
   2176a:	b118      	cbz	r0, 21774 <ble_gap_disc_report+0x3c>
        state.cb(&event, state.cb_arg);
   2176c:	9910      	ldr	r1, [sp, #64]	; 0x40
   2176e:	4668      	mov	r0, sp
   21770:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   21772:	4798      	blx	r3
    ble_gap_event_listener_call(&event);
   21774:	4668      	mov	r0, sp
   21776:	f7ff fd03 	bl	21180 <ble_gap_event_listener_call>
}
   2177a:	b013      	add	sp, #76	; 0x4c
   2177c:	bd30      	pop	{r4, r5, pc}

0002177e <ble_gap_master_connect_cancelled>:
{
   2177e:	b510      	push	{r4, lr}
   21780:	b092      	sub	sp, #72	; 0x48
    ble_gap_master_extract_state(&state, 1);
   21782:	2101      	movs	r1, #1
   21784:	a80d      	add	r0, sp, #52	; 0x34
   21786:	f7ff ff85 	bl	21694 <ble_gap_master_extract_state>
    if (state.cb != NULL) {
   2178a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   2178c:	b1ac      	cbz	r4, 217ba <ble_gap_master_connect_cancelled+0x3c>
        memset(&event, 0, sizeof event);
   2178e:	2234      	movs	r2, #52	; 0x34
   21790:	2100      	movs	r1, #0
   21792:	4668      	mov	r0, sp
   21794:	f7f9 fa93 	bl	1acbe <memset>
        event.type = BLE_GAP_EVENT_CONNECT;
   21798:	2300      	movs	r3, #0
   2179a:	f88d 3000 	strb.w	r3, [sp]
        event.connect.conn_handle = BLE_HS_CONN_HANDLE_NONE;
   2179e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   217a2:	f8ad 3008 	strh.w	r3, [sp, #8]
        if (state.conn.cancel) {
   217a6:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
   217aa:	f013 0f08 	tst.w	r3, #8
   217ae:	d006      	beq.n	217be <ble_gap_master_connect_cancelled+0x40>
            event.connect.status = BLE_HS_EAPP;
   217b0:	2309      	movs	r3, #9
   217b2:	9301      	str	r3, [sp, #4]
        state.cb(&event, state.cb_arg);
   217b4:	9910      	ldr	r1, [sp, #64]	; 0x40
   217b6:	4668      	mov	r0, sp
   217b8:	47a0      	blx	r4
}
   217ba:	b012      	add	sp, #72	; 0x48
   217bc:	bd10      	pop	{r4, pc}
            event.connect.status = BLE_HS_ETIMEOUT;
   217be:	230d      	movs	r3, #13
   217c0:	9301      	str	r3, [sp, #4]
   217c2:	e7f7      	b.n	217b4 <ble_gap_master_connect_cancelled+0x36>

000217c4 <ble_gap_master_failed>:
{
   217c4:	b508      	push	{r3, lr}
    switch (ble_gap_master.op) {
   217c6:	4b0b      	ldr	r3, [pc, #44]	; (217f4 <ble_gap_master_failed+0x30>)
   217c8:	781b      	ldrb	r3, [r3, #0]
   217ca:	2b01      	cmp	r3, #1
   217cc:	d008      	beq.n	217e0 <ble_gap_master_failed+0x1c>
   217ce:	2b02      	cmp	r3, #2
   217d0:	d105      	bne.n	217de <ble_gap_master_failed+0x1a>
        STATS_INC(ble_gap_stats, initiate_fail);
   217d2:	4a09      	ldr	r2, [pc, #36]	; (217f8 <ble_gap_master_failed+0x34>)
   217d4:	6c13      	ldr	r3, [r2, #64]	; 0x40
   217d6:	3301      	adds	r3, #1
   217d8:	6413      	str	r3, [r2, #64]	; 0x40
        ble_gap_master_connect_failure(status);
   217da:	f7ff ff73 	bl	216c4 <ble_gap_master_connect_failure>
}
   217de:	bd08      	pop	{r3, pc}
        STATS_INC(ble_gap_stats, initiate_fail);
   217e0:	4a05      	ldr	r2, [pc, #20]	; (217f8 <ble_gap_master_failed+0x34>)
   217e2:	6c13      	ldr	r3, [r2, #64]	; 0x40
   217e4:	3301      	adds	r3, #1
   217e6:	6413      	str	r3, [r2, #64]	; 0x40
        ble_gap_disc_complete();
   217e8:	f7ff ff88 	bl	216fc <ble_gap_disc_complete>
        ble_gap_master_reset_state();
   217ec:	f7ff ff40 	bl	21670 <ble_gap_master_reset_state>
}
   217f0:	e7f5      	b.n	217de <ble_gap_master_failed+0x1a>
   217f2:	bf00      	nop
   217f4:	10005ac4 	.word	0x10005ac4
   217f8:	10005a04 	.word	0x10005a04

000217fc <ble_gap_update_entry_free>:
    if (entry != NULL) {
   217fc:	b128      	cbz	r0, 2180a <ble_gap_update_entry_free+0xe>
{
   217fe:	b508      	push	{r3, lr}
   21800:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_gap_update_entry_pool, entry);
   21802:	4802      	ldr	r0, [pc, #8]	; (2180c <ble_gap_update_entry_free+0x10>)
   21804:	f7f8 fb5d 	bl	19ec2 <os_memblock_put>
}
   21808:	bd08      	pop	{r3, pc}
   2180a:	4770      	bx	lr
   2180c:	10005aa8 	.word	0x10005aa8

00021810 <ble_gap_master_ticks_until_exp>:
    if (ble_gap_master.op == BLE_GAP_OP_NULL || !ble_gap_master.exp_set) {
   21810:	4b0b      	ldr	r3, [pc, #44]	; (21840 <ble_gap_master_ticks_until_exp+0x30>)
   21812:	781b      	ldrb	r3, [r3, #0]
   21814:	b173      	cbz	r3, 21834 <ble_gap_master_ticks_until_exp+0x24>
   21816:	4b0a      	ldr	r3, [pc, #40]	; (21840 <ble_gap_master_ticks_until_exp+0x30>)
   21818:	785b      	ldrb	r3, [r3, #1]
   2181a:	f013 0f01 	tst.w	r3, #1
   2181e:	d00c      	beq.n	2183a <ble_gap_master_ticks_until_exp+0x2a>
{
   21820:	b510      	push	{r4, lr}
    ticks = ble_gap_master.exp_os_ticks - ble_npl_time_get();
   21822:	4b07      	ldr	r3, [pc, #28]	; (21840 <ble_gap_master_ticks_until_exp+0x30>)
   21824:	685c      	ldr	r4, [r3, #4]
   21826:	f7f8 ff21 	bl	1a66c <os_time_get>
   2182a:	1a20      	subs	r0, r4, r0
    if (ticks > 0) {
   2182c:	2800      	cmp	r0, #0
   2182e:	dc00      	bgt.n	21832 <ble_gap_master_ticks_until_exp+0x22>
    return 0;
   21830:	2000      	movs	r0, #0
}
   21832:	bd10      	pop	{r4, pc}
        return BLE_HS_FOREVER;
   21834:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   21838:	4770      	bx	lr
   2183a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   2183e:	4770      	bx	lr
   21840:	10005ac4 	.word	0x10005ac4

00021844 <ble_gap_master_timer>:
{
   21844:	b508      	push	{r3, lr}
    ticks_until_exp = ble_gap_master_ticks_until_exp();
   21846:	f7ff ffe3 	bl	21810 <ble_gap_master_ticks_until_exp>
    if (ticks_until_exp != 0) {
   2184a:	b9f0      	cbnz	r0, 2188a <ble_gap_master_timer+0x46>
    switch (ble_gap_master.op) {
   2184c:	4b10      	ldr	r3, [pc, #64]	; (21890 <ble_gap_master_timer+0x4c>)
   2184e:	781b      	ldrb	r3, [r3, #0]
   21850:	2b01      	cmp	r3, #1
   21852:	d00c      	beq.n	2186e <ble_gap_master_timer+0x2a>
   21854:	2b02      	cmp	r3, #2
   21856:	d116      	bne.n	21886 <ble_gap_master_timer+0x42>
        rc = ble_gap_conn_cancel_tx();
   21858:	f7ff fd48 	bl	212ec <ble_gap_conn_cancel_tx>
        if (rc != 0) {
   2185c:	b9b0      	cbnz	r0, 2188c <ble_gap_master_timer+0x48>
            ble_gap_master.exp_set = 0;
   2185e:	4b0c      	ldr	r3, [pc, #48]	; (21890 <ble_gap_master_timer+0x4c>)
   21860:	785a      	ldrb	r2, [r3, #1]
   21862:	f36f 0200 	bfc	r2, #0, #1
   21866:	705a      	strb	r2, [r3, #1]
    return BLE_HS_FOREVER;
   21868:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
        break;
   2186c:	e00d      	b.n	2188a <ble_gap_master_timer+0x46>
        rc = ble_gap_disc_enable_tx(0, 0);
   2186e:	2100      	movs	r1, #0
   21870:	4608      	mov	r0, r1
   21872:	f7ff fd48 	bl	21306 <ble_gap_disc_enable_tx>
        if (rc != 0) {
   21876:	b108      	cbz	r0, 2187c <ble_gap_master_timer+0x38>
            return ble_npl_time_ms_to_ticks32(BLE_GAP_CANCEL_RETRY_TIMEOUT_MS);
   21878:	200c      	movs	r0, #12
   2187a:	e006      	b.n	2188a <ble_gap_master_timer+0x46>
        ble_gap_disc_complete();
   2187c:	f7ff ff3e 	bl	216fc <ble_gap_disc_complete>
    return BLE_HS_FOREVER;
   21880:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
        break;
   21884:	e001      	b.n	2188a <ble_gap_master_timer+0x46>
    switch (ble_gap_master.op) {
   21886:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   2188a:	bd08      	pop	{r3, pc}
            return ble_npl_time_ms_to_ticks32(BLE_GAP_CANCEL_RETRY_TIMEOUT_MS);
   2188c:	200c      	movs	r0, #12
   2188e:	e7fc      	b.n	2188a <ble_gap_master_timer+0x46>
   21890:	10005ac4 	.word	0x10005ac4

00021894 <ble_gap_update_next_exp>:
{
   21894:	b538      	push	{r3, r4, r5, lr}
   21896:	4605      	mov	r5, r0
   21898:	f7f8 fee8 	bl	1a66c <os_time_get>
   2189c:	4604      	mov	r4, r0
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   2189e:	4b0b      	ldr	r3, [pc, #44]	; (218cc <ble_gap_update_next_exp+0x38>)
   218a0:	681a      	ldr	r2, [r3, #0]
    best_ticks = BLE_HS_FOREVER;
   218a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    conn_handle = BLE_HS_CONN_HANDLE_NONE;
   218a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   218aa:	e002      	b.n	218b2 <ble_gap_update_next_exp+0x1e>
            ticks = 0;
   218ac:	2300      	movs	r3, #0
   218ae:	e005      	b.n	218bc <ble_gap_update_next_exp+0x28>
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   218b0:	6812      	ldr	r2, [r2, #0]
   218b2:	b142      	cbz	r2, 218c6 <ble_gap_update_next_exp+0x32>
        ticks = entry->exp_os_ticks - now;
   218b4:	6913      	ldr	r3, [r2, #16]
   218b6:	1b1b      	subs	r3, r3, r4
        if (ticks <= 0) {
   218b8:	2b00      	cmp	r3, #0
   218ba:	ddf7      	ble.n	218ac <ble_gap_update_next_exp+0x18>
        if (ticks < best_ticks) {
   218bc:	4299      	cmp	r1, r3
   218be:	ddf7      	ble.n	218b0 <ble_gap_update_next_exp+0x1c>
            conn_handle = entry->conn_handle;
   218c0:	8a90      	ldrh	r0, [r2, #20]
            best_ticks = ticks;
   218c2:	4619      	mov	r1, r3
   218c4:	e7f4      	b.n	218b0 <ble_gap_update_next_exp+0x1c>
    if (out_ticks_from_now != NULL) {
   218c6:	b105      	cbz	r5, 218ca <ble_gap_update_next_exp+0x36>
        *out_ticks_from_now = best_ticks;
   218c8:	6029      	str	r1, [r5, #0]
}
   218ca:	bd38      	pop	{r3, r4, r5, pc}
   218cc:	10005a8c 	.word	0x10005a8c

000218d0 <ble_gap_update_timer>:
{
   218d0:	b510      	push	{r4, lr}
   218d2:	b082      	sub	sp, #8
   218d4:	e007      	b.n	218e6 <ble_gap_update_timer+0x16>
        ble_hs_unlock();
   218d6:	f004 fe33 	bl	26540 <ble_hs_unlock>
            entry = NULL;
   218da:	2400      	movs	r4, #0
   218dc:	e002      	b.n	218e4 <ble_gap_update_timer+0x14>
            ble_gap_update_entry_free(entry);
   218de:	4620      	mov	r0, r4
   218e0:	f7ff ff8c 	bl	217fc <ble_gap_update_entry_free>
    } while (entry != NULL);
   218e4:	b17c      	cbz	r4, 21906 <ble_gap_update_timer+0x36>
        ble_hs_lock();
   218e6:	f004 fe27 	bl	26538 <ble_hs_lock>
        conn_handle = ble_gap_update_next_exp(&ticks_until_exp);
   218ea:	a801      	add	r0, sp, #4
   218ec:	f7ff ffd2 	bl	21894 <ble_gap_update_next_exp>
        if (ticks_until_exp == 0) {
   218f0:	9b01      	ldr	r3, [sp, #4]
   218f2:	2b00      	cmp	r3, #0
   218f4:	d1ef      	bne.n	218d6 <ble_gap_update_timer+0x6>
            entry = ble_gap_update_entry_remove(conn_handle);
   218f6:	f7ff fe61 	bl	215bc <ble_gap_update_entry_remove>
   218fa:	4604      	mov	r4, r0
        ble_hs_unlock();
   218fc:	f004 fe20 	bl	26540 <ble_hs_unlock>
        if (entry != NULL) {
   21900:	2c00      	cmp	r4, #0
   21902:	d1ec      	bne.n	218de <ble_gap_update_timer+0xe>
   21904:	e7ee      	b.n	218e4 <ble_gap_update_timer+0x14>
}
   21906:	9801      	ldr	r0, [sp, #4]
   21908:	b002      	add	sp, #8
   2190a:	bd10      	pop	{r4, pc}

0002190c <ble_gap_slave_ticks_until_exp>:
    if (ble_gap_slave[0].op == BLE_GAP_OP_NULL || !ble_gap_slave[0].exp_set) {
   2190c:	4b0b      	ldr	r3, [pc, #44]	; (2193c <ble_gap_slave_ticks_until_exp+0x30>)
   2190e:	7d1b      	ldrb	r3, [r3, #20]
   21910:	b173      	cbz	r3, 21930 <ble_gap_slave_ticks_until_exp+0x24>
   21912:	4b0a      	ldr	r3, [pc, #40]	; (2193c <ble_gap_slave_ticks_until_exp+0x30>)
   21914:	7d5b      	ldrb	r3, [r3, #21]
   21916:	f013 0f10 	tst.w	r3, #16
   2191a:	d00c      	beq.n	21936 <ble_gap_slave_ticks_until_exp+0x2a>
{
   2191c:	b510      	push	{r4, lr}
    ticks = ble_gap_slave[0].exp_os_ticks - ble_npl_time_get();
   2191e:	4b07      	ldr	r3, [pc, #28]	; (2193c <ble_gap_slave_ticks_until_exp+0x30>)
   21920:	699c      	ldr	r4, [r3, #24]
   21922:	f7f8 fea3 	bl	1a66c <os_time_get>
   21926:	1a20      	subs	r0, r4, r0
    if (ticks > 0) {
   21928:	2800      	cmp	r0, #0
   2192a:	dc00      	bgt.n	2192e <ble_gap_slave_ticks_until_exp+0x22>
    return 0;
   2192c:	2000      	movs	r0, #0
}
   2192e:	bd10      	pop	{r4, pc}
        return BLE_HS_FOREVER;
   21930:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   21934:	4770      	bx	lr
   21936:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   2193a:	4770      	bx	lr
   2193c:	10005ac4 	.word	0x10005ac4

00021940 <ble_gap_slave_timer>:
{
   21940:	b508      	push	{r3, lr}
    ticks_until_exp = ble_gap_slave_ticks_until_exp();
   21942:	f7ff ffe3 	bl	2190c <ble_gap_slave_ticks_until_exp>
    if (ticks_until_exp != 0) {
   21946:	b100      	cbz	r0, 2194a <ble_gap_slave_timer+0xa>
}
   21948:	bd08      	pop	{r3, pc}
    rc = ble_gap_adv_enable_tx(0);
   2194a:	2000      	movs	r0, #0
   2194c:	f7ff fcf8 	bl	21340 <ble_gap_adv_enable_tx>
    if (rc != 0) {
   21950:	b108      	cbz	r0, 21956 <ble_gap_slave_timer+0x16>
        return 100;
   21952:	2064      	movs	r0, #100	; 0x64
   21954:	e7f8      	b.n	21948 <ble_gap_slave_timer+0x8>
    ble_gap_slave_reset_state(0);
   21956:	f7ff fe49 	bl	215ec <ble_gap_slave_reset_state>
    ble_gap_adv_finished(0, BLE_HS_ETIMEOUT, 0, 0);
   2195a:	2300      	movs	r3, #0
   2195c:	461a      	mov	r2, r3
   2195e:	210d      	movs	r1, #13
   21960:	4618      	mov	r0, r3
   21962:	f7ff fe69 	bl	21638 <ble_gap_adv_finished>
    return BLE_HS_FOREVER;
   21966:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2196a:	e7ed      	b.n	21948 <ble_gap_slave_timer+0x8>

0002196c <ble_gap_slave_set_timer>:
{
   2196c:	b510      	push	{r4, lr}
   2196e:	4604      	mov	r4, r0
   21970:	f7f8 fe7c 	bl	1a66c <os_time_get>
    ble_gap_slave[0].exp_os_ticks = ble_npl_time_get() + ticks_from_now;
   21974:	4404      	add	r4, r0
   21976:	4b04      	ldr	r3, [pc, #16]	; (21988 <ble_gap_slave_set_timer+0x1c>)
   21978:	619c      	str	r4, [r3, #24]
    ble_gap_slave[0].exp_set = 1;
   2197a:	7d5a      	ldrb	r2, [r3, #21]
   2197c:	f042 0210 	orr.w	r2, r2, #16
   21980:	755a      	strb	r2, [r3, #21]
    ble_hs_timer_resched();
   21982:	f004 fecb 	bl	2671c <ble_hs_timer_resched>
}
   21986:	bd10      	pop	{r4, pc}
   21988:	10005ac4 	.word	0x10005ac4

0002198c <ble_gap_master_set_timer>:
{
   2198c:	b510      	push	{r4, lr}
   2198e:	4604      	mov	r4, r0
   21990:	f7f8 fe6c 	bl	1a66c <os_time_get>
    ble_gap_master.exp_os_ticks = ble_npl_time_get() + ticks_from_now;
   21994:	4404      	add	r4, r0
   21996:	4b04      	ldr	r3, [pc, #16]	; (219a8 <ble_gap_master_set_timer+0x1c>)
   21998:	605c      	str	r4, [r3, #4]
    ble_gap_master.exp_set = 1;
   2199a:	785a      	ldrb	r2, [r3, #1]
   2199c:	f042 0201 	orr.w	r2, r2, #1
   219a0:	705a      	strb	r2, [r3, #1]
    ble_hs_timer_resched();
   219a2:	f004 febb 	bl	2671c <ble_hs_timer_resched>
}
   219a6:	bd10      	pop	{r4, pc}
   219a8:	10005ac4 	.word	0x10005ac4

000219ac <ble_gap_rx_adv_report_sanity_check>:
    STATS_INC(ble_gap_stats, rx_adv_report);
   219ac:	4a14      	ldr	r2, [pc, #80]	; (21a00 <ble_gap_rx_adv_report_sanity_check+0x54>)
   219ae:	6f13      	ldr	r3, [r2, #112]	; 0x70
   219b0:	3301      	adds	r3, #1
   219b2:	6713      	str	r3, [r2, #112]	; 0x70
    if (ble_gap_master.op != BLE_GAP_OP_M_DISC) {
   219b4:	4b13      	ldr	r3, [pc, #76]	; (21a04 <ble_gap_rx_adv_report_sanity_check+0x58>)
   219b6:	781b      	ldrb	r3, [r3, #0]
   219b8:	2b01      	cmp	r3, #1
   219ba:	d11a      	bne.n	219f2 <ble_gap_rx_adv_report_sanity_check+0x46>
    if (ble_gap_master.disc.limited) {
   219bc:	4b11      	ldr	r3, [pc, #68]	; (21a04 <ble_gap_rx_adv_report_sanity_check+0x58>)
   219be:	7c5b      	ldrb	r3, [r3, #17]
   219c0:	f013 0f01 	tst.w	r3, #1
   219c4:	d101      	bne.n	219ca <ble_gap_rx_adv_report_sanity_check+0x1e>
    return 0;
   219c6:	2000      	movs	r0, #0
}
   219c8:	4770      	bx	lr
{
   219ca:	b500      	push	{lr}
   219cc:	b083      	sub	sp, #12
        rc = ble_hs_adv_find_field(BLE_HS_ADV_TYPE_FLAGS, adv_data,
   219ce:	ab01      	add	r3, sp, #4
   219d0:	460a      	mov	r2, r1
   219d2:	4601      	mov	r1, r0
   219d4:	2001      	movs	r0, #1
   219d6:	f005 fd05 	bl	273e4 <ble_hs_adv_find_field>
        if ((rc == 0) && (flags->length == 2) &&
   219da:	b968      	cbnz	r0, 219f8 <ble_gap_rx_adv_report_sanity_check+0x4c>
   219dc:	9b01      	ldr	r3, [sp, #4]
   219de:	781a      	ldrb	r2, [r3, #0]
   219e0:	2a02      	cmp	r2, #2
   219e2:	d10a      	bne.n	219fa <ble_gap_rx_adv_report_sanity_check+0x4e>
            !(flags->value[0] & BLE_HS_ADV_F_DISC_LTD)) {
   219e4:	789b      	ldrb	r3, [r3, #2]
        if ((rc == 0) && (flags->length == 2) &&
   219e6:	f013 0f01 	tst.w	r3, #1
   219ea:	d106      	bne.n	219fa <ble_gap_rx_adv_report_sanity_check+0x4e>
            return -1;
   219ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   219f0:	e003      	b.n	219fa <ble_gap_rx_adv_report_sanity_check+0x4e>
        return -1;
   219f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   219f6:	4770      	bx	lr
    return 0;
   219f8:	2000      	movs	r0, #0
}
   219fa:	b003      	add	sp, #12
   219fc:	f85d fb04 	ldr.w	pc, [sp], #4
   21a00:	10005a04 	.word	0x10005a04
   21a04:	10005ac4 	.word	0x10005ac4

00021a08 <ble_gap_log_wl>:
{
   21a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21a0c:	b086      	sub	sp, #24
   21a0e:	4604      	mov	r4, r0
   21a10:	4688      	mov	r8, r1
    BLE_HS_LOG(INFO, "count=%d ", white_list_count);
   21a12:	460b      	mov	r3, r1
   21a14:	4a15      	ldr	r2, [pc, #84]	; (21a6c <ble_gap_log_wl+0x64>)
   21a16:	2101      	movs	r1, #1
   21a18:	2004      	movs	r0, #4
   21a1a:	f7fb f97f 	bl	1cd1c <modlog_printf>
    for (i = 0; i < white_list_count; i++, addr++) {
   21a1e:	2500      	movs	r5, #0
   21a20:	45a8      	cmp	r8, r5
   21a22:	dd1f      	ble.n	21a64 <ble_gap_log_wl+0x5c>
        BLE_HS_LOG(INFO, "entry-%d={addr_type=%d addr=", i, addr->type);
   21a24:	7823      	ldrb	r3, [r4, #0]
   21a26:	9300      	str	r3, [sp, #0]
   21a28:	462b      	mov	r3, r5
   21a2a:	4a11      	ldr	r2, [pc, #68]	; (21a70 <ble_gap_log_wl+0x68>)
   21a2c:	2101      	movs	r1, #1
   21a2e:	2004      	movs	r0, #4
   21a30:	f7fb f974 	bl	1cd1c <modlog_printf>
        BLE_HS_LOG_ADDR(INFO, addr->val);
   21a34:	7963      	ldrb	r3, [r4, #5]
   21a36:	7922      	ldrb	r2, [r4, #4]
   21a38:	78e0      	ldrb	r0, [r4, #3]
   21a3a:	78a6      	ldrb	r6, [r4, #2]
   21a3c:	7867      	ldrb	r7, [r4, #1]
   21a3e:	9704      	str	r7, [sp, #16]
   21a40:	9603      	str	r6, [sp, #12]
   21a42:	9002      	str	r0, [sp, #8]
   21a44:	9201      	str	r2, [sp, #4]
   21a46:	9300      	str	r3, [sp, #0]
   21a48:	79a3      	ldrb	r3, [r4, #6]
   21a4a:	4a0a      	ldr	r2, [pc, #40]	; (21a74 <ble_gap_log_wl+0x6c>)
   21a4c:	2101      	movs	r1, #1
   21a4e:	2004      	movs	r0, #4
   21a50:	f7fb f964 	bl	1cd1c <modlog_printf>
        BLE_HS_LOG(INFO, "} ");
   21a54:	4a08      	ldr	r2, [pc, #32]	; (21a78 <ble_gap_log_wl+0x70>)
   21a56:	2101      	movs	r1, #1
   21a58:	2004      	movs	r0, #4
   21a5a:	f7fb f95f 	bl	1cd1c <modlog_printf>
    for (i = 0; i < white_list_count; i++, addr++) {
   21a5e:	3501      	adds	r5, #1
   21a60:	3407      	adds	r4, #7
   21a62:	e7dd      	b.n	21a20 <ble_gap_log_wl+0x18>
}
   21a64:	b006      	add	sp, #24
   21a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21a6a:	bf00      	nop
   21a6c:	000344b8 	.word	0x000344b8
   21a70:	000344c4 	.word	0x000344c4
   21a74:	00030404 	.word	0x00030404
   21a78:	000344e4 	.word	0x000344e4

00021a7c <ble_gap_log_adv>:
{
   21a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   21a7e:	b087      	sub	sp, #28
   21a80:	4606      	mov	r6, r0
   21a82:	460d      	mov	r5, r1
   21a84:	4614      	mov	r4, r2
    BLE_HS_LOG(INFO, "disc_mode=%d", adv_params->disc_mode);
   21a86:	7853      	ldrb	r3, [r2, #1]
   21a88:	4a15      	ldr	r2, [pc, #84]	; (21ae0 <ble_gap_log_adv+0x64>)
   21a8a:	2101      	movs	r1, #1
   21a8c:	2004      	movs	r0, #4
   21a8e:	f7fb f945 	bl	1cd1c <modlog_printf>
    if (direct_addr) {
   21a92:	b1ad      	cbz	r5, 21ac0 <ble_gap_log_adv+0x44>
        BLE_HS_LOG(INFO, " direct_addr_type=%d direct_addr=",
   21a94:	782b      	ldrb	r3, [r5, #0]
   21a96:	4a13      	ldr	r2, [pc, #76]	; (21ae4 <ble_gap_log_adv+0x68>)
   21a98:	2101      	movs	r1, #1
   21a9a:	2004      	movs	r0, #4
   21a9c:	f7fb f93e 	bl	1cd1c <modlog_printf>
        BLE_HS_LOG_ADDR(INFO, direct_addr->val);
   21aa0:	796b      	ldrb	r3, [r5, #5]
   21aa2:	792a      	ldrb	r2, [r5, #4]
   21aa4:	78e9      	ldrb	r1, [r5, #3]
   21aa6:	78a8      	ldrb	r0, [r5, #2]
   21aa8:	786f      	ldrb	r7, [r5, #1]
   21aaa:	9704      	str	r7, [sp, #16]
   21aac:	9003      	str	r0, [sp, #12]
   21aae:	9102      	str	r1, [sp, #8]
   21ab0:	9201      	str	r2, [sp, #4]
   21ab2:	9300      	str	r3, [sp, #0]
   21ab4:	79ab      	ldrb	r3, [r5, #6]
   21ab6:	4a0c      	ldr	r2, [pc, #48]	; (21ae8 <ble_gap_log_adv+0x6c>)
   21ab8:	2101      	movs	r1, #1
   21aba:	2004      	movs	r0, #4
   21abc:	f7fb f92e 	bl	1cd1c <modlog_printf>
    BLE_HS_LOG(INFO, " adv_channel_map=%d own_addr_type=%d "
   21ac0:	79e3      	ldrb	r3, [r4, #7]
   21ac2:	8862      	ldrh	r2, [r4, #2]
   21ac4:	88a1      	ldrh	r1, [r4, #4]
   21ac6:	9103      	str	r1, [sp, #12]
   21ac8:	9202      	str	r2, [sp, #8]
   21aca:	9301      	str	r3, [sp, #4]
   21acc:	9600      	str	r6, [sp, #0]
   21ace:	79a3      	ldrb	r3, [r4, #6]
   21ad0:	4a06      	ldr	r2, [pc, #24]	; (21aec <ble_gap_log_adv+0x70>)
   21ad2:	2101      	movs	r1, #1
   21ad4:	2004      	movs	r0, #4
   21ad6:	f7fb f921 	bl	1cd1c <modlog_printf>
}
   21ada:	b007      	add	sp, #28
   21adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21ade:	bf00      	nop
   21ae0:	000344e8 	.word	0x000344e8
   21ae4:	000344f8 	.word	0x000344f8
   21ae8:	00030404 	.word	0x00030404
   21aec:	0003451c 	.word	0x0003451c

00021af0 <ble_gap_log_duration>:
{
   21af0:	b508      	push	{r3, lr}
    if (duration_ms == BLE_HS_FOREVER) {
   21af2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   21af6:	4290      	cmp	r0, r2
   21af8:	d006      	beq.n	21b08 <ble_gap_log_duration+0x18>
   21afa:	4603      	mov	r3, r0
        BLE_HS_LOG(INFO, "duration=%dms", duration_ms);
   21afc:	4a05      	ldr	r2, [pc, #20]	; (21b14 <ble_gap_log_duration+0x24>)
   21afe:	2101      	movs	r1, #1
   21b00:	2004      	movs	r0, #4
   21b02:	f7fb f90b 	bl	1cd1c <modlog_printf>
}
   21b06:	bd08      	pop	{r3, pc}
        BLE_HS_LOG(INFO, "duration=forever");
   21b08:	4a03      	ldr	r2, [pc, #12]	; (21b18 <ble_gap_log_duration+0x28>)
   21b0a:	2101      	movs	r1, #1
   21b0c:	2004      	movs	r0, #4
   21b0e:	f7fb f905 	bl	1cd1c <modlog_printf>
   21b12:	e7f8      	b.n	21b06 <ble_gap_log_duration+0x16>
   21b14:	0003458c 	.word	0x0003458c
   21b18:	00034578 	.word	0x00034578

00021b1c <ble_gap_log_disc>:
{
   21b1c:	b530      	push	{r4, r5, lr}
   21b1e:	b085      	sub	sp, #20
   21b20:	4603      	mov	r3, r0
   21b22:	460c      	mov	r4, r1
    BLE_HS_LOG(INFO, "own_addr_type=%d filter_policy=%d passive=%d limited=%d "
   21b24:	7911      	ldrb	r1, [r2, #4]
   21b26:	7952      	ldrb	r2, [r2, #5]
   21b28:	f3c2 0040 	ubfx	r0, r2, #1, #1
   21b2c:	f002 0501 	and.w	r5, r2, #1
   21b30:	f3c2 0280 	ubfx	r2, r2, #2, #1
   21b34:	9203      	str	r2, [sp, #12]
   21b36:	9502      	str	r5, [sp, #8]
   21b38:	9001      	str	r0, [sp, #4]
   21b3a:	9100      	str	r1, [sp, #0]
   21b3c:	4a04      	ldr	r2, [pc, #16]	; (21b50 <ble_gap_log_disc+0x34>)
   21b3e:	2101      	movs	r1, #1
   21b40:	2004      	movs	r0, #4
   21b42:	f7fb f8eb 	bl	1cd1c <modlog_printf>
    ble_gap_log_duration(duration_ms);
   21b46:	4620      	mov	r0, r4
   21b48:	f7ff ffd2 	bl	21af0 <ble_gap_log_duration>
}
   21b4c:	b005      	add	sp, #20
   21b4e:	bd30      	pop	{r4, r5, pc}
   21b50:	0003459c 	.word	0x0003459c

00021b54 <ble_gap_log_conn>:
{
   21b54:	b5f0      	push	{r4, r5, r6, r7, lr}
   21b56:	b089      	sub	sp, #36	; 0x24
   21b58:	4606      	mov	r6, r0
   21b5a:	4614      	mov	r4, r2
    if (peer_addr != NULL) {
   21b5c:	b1b1      	cbz	r1, 21b8c <ble_gap_log_conn+0x38>
   21b5e:	460d      	mov	r5, r1
        BLE_HS_LOG(INFO, "peer_addr_type=%d peer_addr=", peer_addr->type);
   21b60:	780b      	ldrb	r3, [r1, #0]
   21b62:	4a17      	ldr	r2, [pc, #92]	; (21bc0 <ble_gap_log_conn+0x6c>)
   21b64:	2101      	movs	r1, #1
   21b66:	2004      	movs	r0, #4
   21b68:	f7fb f8d8 	bl	1cd1c <modlog_printf>
        BLE_HS_LOG_ADDR(INFO, peer_addr->val);
   21b6c:	796b      	ldrb	r3, [r5, #5]
   21b6e:	792a      	ldrb	r2, [r5, #4]
   21b70:	78e9      	ldrb	r1, [r5, #3]
   21b72:	78a8      	ldrb	r0, [r5, #2]
   21b74:	786f      	ldrb	r7, [r5, #1]
   21b76:	9704      	str	r7, [sp, #16]
   21b78:	9003      	str	r0, [sp, #12]
   21b7a:	9102      	str	r1, [sp, #8]
   21b7c:	9201      	str	r2, [sp, #4]
   21b7e:	9300      	str	r3, [sp, #0]
   21b80:	79ab      	ldrb	r3, [r5, #6]
   21b82:	4a10      	ldr	r2, [pc, #64]	; (21bc4 <ble_gap_log_conn+0x70>)
   21b84:	2101      	movs	r1, #1
   21b86:	2004      	movs	r0, #4
   21b88:	f7fb f8c8 	bl	1cd1c <modlog_printf>
    BLE_HS_LOG(INFO, " scan_itvl=%d scan_window=%d itvl_min=%d itvl_max=%d "
   21b8c:	8863      	ldrh	r3, [r4, #2]
   21b8e:	88a2      	ldrh	r2, [r4, #4]
   21b90:	88e1      	ldrh	r1, [r4, #6]
   21b92:	8920      	ldrh	r0, [r4, #8]
   21b94:	8965      	ldrh	r5, [r4, #10]
   21b96:	89a7      	ldrh	r7, [r4, #12]
   21b98:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
   21b9c:	9607      	str	r6, [sp, #28]
   21b9e:	f8cd c018 	str.w	ip, [sp, #24]
   21ba2:	9705      	str	r7, [sp, #20]
   21ba4:	9504      	str	r5, [sp, #16]
   21ba6:	9003      	str	r0, [sp, #12]
   21ba8:	9102      	str	r1, [sp, #8]
   21baa:	9201      	str	r2, [sp, #4]
   21bac:	9300      	str	r3, [sp, #0]
   21bae:	8823      	ldrh	r3, [r4, #0]
   21bb0:	4a05      	ldr	r2, [pc, #20]	; (21bc8 <ble_gap_log_conn+0x74>)
   21bb2:	2101      	movs	r1, #1
   21bb4:	2004      	movs	r0, #4
   21bb6:	f7fb f8b1 	bl	1cd1c <modlog_printf>
}
   21bba:	b009      	add	sp, #36	; 0x24
   21bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21bbe:	bf00      	nop
   21bc0:	000345ec 	.word	0x000345ec
   21bc4:	00030404 	.word	0x00030404
   21bc8:	0003460c 	.word	0x0003460c

00021bcc <ble_gap_log_update>:
{
   21bcc:	b570      	push	{r4, r5, r6, lr}
   21bce:	b086      	sub	sp, #24
   21bd0:	4603      	mov	r3, r0
    BLE_HS_LOG(INFO, "connection parameter update; "
   21bd2:	880a      	ldrh	r2, [r1, #0]
   21bd4:	8848      	ldrh	r0, [r1, #2]
   21bd6:	888c      	ldrh	r4, [r1, #4]
   21bd8:	88cd      	ldrh	r5, [r1, #6]
   21bda:	890e      	ldrh	r6, [r1, #8]
   21bdc:	8949      	ldrh	r1, [r1, #10]
   21bde:	9105      	str	r1, [sp, #20]
   21be0:	9604      	str	r6, [sp, #16]
   21be2:	9503      	str	r5, [sp, #12]
   21be4:	9402      	str	r4, [sp, #8]
   21be6:	9001      	str	r0, [sp, #4]
   21be8:	9200      	str	r2, [sp, #0]
   21bea:	4a03      	ldr	r2, [pc, #12]	; (21bf8 <ble_gap_log_update+0x2c>)
   21bec:	2101      	movs	r1, #1
   21bee:	2004      	movs	r0, #4
   21bf0:	f7fb f894 	bl	1cd1c <modlog_printf>
}
   21bf4:	b006      	add	sp, #24
   21bf6:	bd70      	pop	{r4, r5, r6, pc}
   21bf8:	00034690 	.word	0x00034690

00021bfc <ble_gap_adv_validate>:
    if (adv_params == NULL) {
   21bfc:	b34a      	cbz	r2, 21c52 <ble_gap_adv_validate+0x56>
{
   21bfe:	b508      	push	{r3, lr}
   21c00:	4613      	mov	r3, r2
    if (own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) {
   21c02:	2803      	cmp	r0, #3
   21c04:	d827      	bhi.n	21c56 <ble_gap_adv_validate+0x5a>
    if (adv_params->disc_mode >= BLE_GAP_DISC_MODE_MAX) {
   21c06:	7852      	ldrb	r2, [r2, #1]
   21c08:	2a02      	cmp	r2, #2
   21c0a:	d826      	bhi.n	21c5a <ble_gap_adv_validate+0x5e>
    if (ble_gap_slave[0].op != BLE_GAP_OP_NULL) {
   21c0c:	4a1b      	ldr	r2, [pc, #108]	; (21c7c <ble_gap_adv_validate+0x80>)
   21c0e:	7d12      	ldrb	r2, [r2, #20]
   21c10:	bb2a      	cbnz	r2, 21c5e <ble_gap_adv_validate+0x62>
    switch (adv_params->conn_mode) {
   21c12:	781a      	ldrb	r2, [r3, #0]
   21c14:	2a01      	cmp	r2, #1
   21c16:	d013      	beq.n	21c40 <ble_gap_adv_validate+0x44>
   21c18:	2a02      	cmp	r2, #2
   21c1a:	d008      	beq.n	21c2e <ble_gap_adv_validate+0x32>
   21c1c:	b10a      	cbz	r2, 21c22 <ble_gap_adv_validate+0x26>
   21c1e:	2003      	movs	r0, #3
}
   21c20:	bd08      	pop	{r3, pc}
        if (adv_params->high_duty_cycle) {
   21c22:	7a1b      	ldrb	r3, [r3, #8]
   21c24:	f013 0f01 	tst.w	r3, #1
   21c28:	d11b      	bne.n	21c62 <ble_gap_adv_validate+0x66>
    return 0;
   21c2a:	2000      	movs	r0, #0
   21c2c:	e7f8      	b.n	21c20 <ble_gap_adv_validate+0x24>
        if (adv_params->high_duty_cycle) {
   21c2e:	7a1b      	ldrb	r3, [r3, #8]
   21c30:	f013 0f01 	tst.w	r3, #1
   21c34:	d117      	bne.n	21c66 <ble_gap_adv_validate+0x6a>
        if (!ble_hs_conn_can_alloc()) {
   21c36:	f005 fc27 	bl	27488 <ble_hs_conn_can_alloc>
   21c3a:	b1b0      	cbz	r0, 21c6a <ble_gap_adv_validate+0x6e>
    return 0;
   21c3c:	2000      	movs	r0, #0
   21c3e:	e7ef      	b.n	21c20 <ble_gap_adv_validate+0x24>
        if (peer_addr == NULL) {
   21c40:	b1a9      	cbz	r1, 21c6e <ble_gap_adv_validate+0x72>
        if (peer_addr->type != BLE_ADDR_PUBLIC &&
   21c42:	780b      	ldrb	r3, [r1, #0]
   21c44:	2b03      	cmp	r3, #3
   21c46:	d814      	bhi.n	21c72 <ble_gap_adv_validate+0x76>
        if (!ble_hs_conn_can_alloc()) {
   21c48:	f005 fc1e 	bl	27488 <ble_hs_conn_can_alloc>
   21c4c:	b198      	cbz	r0, 21c76 <ble_gap_adv_validate+0x7a>
    return 0;
   21c4e:	2000      	movs	r0, #0
   21c50:	e7e6      	b.n	21c20 <ble_gap_adv_validate+0x24>
        return BLE_HS_EINVAL;
   21c52:	2003      	movs	r0, #3
}
   21c54:	4770      	bx	lr
        return BLE_HS_EINVAL;
   21c56:	2003      	movs	r0, #3
   21c58:	e7e2      	b.n	21c20 <ble_gap_adv_validate+0x24>
        return BLE_HS_EINVAL;
   21c5a:	2003      	movs	r0, #3
   21c5c:	e7e0      	b.n	21c20 <ble_gap_adv_validate+0x24>
        return BLE_HS_EALREADY;
   21c5e:	2002      	movs	r0, #2
   21c60:	e7de      	b.n	21c20 <ble_gap_adv_validate+0x24>
            return BLE_HS_EINVAL;
   21c62:	2003      	movs	r0, #3
   21c64:	e7dc      	b.n	21c20 <ble_gap_adv_validate+0x24>
            return BLE_HS_EINVAL;
   21c66:	2003      	movs	r0, #3
   21c68:	e7da      	b.n	21c20 <ble_gap_adv_validate+0x24>
            return BLE_HS_ENOMEM;
   21c6a:	2006      	movs	r0, #6
   21c6c:	e7d8      	b.n	21c20 <ble_gap_adv_validate+0x24>
            return BLE_HS_EINVAL;
   21c6e:	2003      	movs	r0, #3
   21c70:	e7d6      	b.n	21c20 <ble_gap_adv_validate+0x24>
            return BLE_HS_EINVAL;
   21c72:	2003      	movs	r0, #3
   21c74:	e7d4      	b.n	21c20 <ble_gap_adv_validate+0x24>
            return BLE_HS_ENOMEM;
   21c76:	2006      	movs	r0, #6
   21c78:	e7d2      	b.n	21c20 <ble_gap_adv_validate+0x24>
   21c7a:	bf00      	nop
   21c7c:	10005ac4 	.word	0x10005ac4

00021c80 <ble_gap_update_entry_alloc>:
{
   21c80:	b508      	push	{r3, lr}
    entry = os_memblock_get(&ble_gap_update_entry_pool);
   21c82:	4807      	ldr	r0, [pc, #28]	; (21ca0 <ble_gap_update_entry_alloc+0x20>)
   21c84:	f7f8 f8f5 	bl	19e72 <os_memblock_get>
    if (entry != NULL) {
   21c88:	4603      	mov	r3, r0
   21c8a:	b130      	cbz	r0, 21c9a <ble_gap_update_entry_alloc+0x1a>
        memset(entry, 0, sizeof *entry);
   21c8c:	2200      	movs	r2, #0
   21c8e:	6002      	str	r2, [r0, #0]
   21c90:	6042      	str	r2, [r0, #4]
   21c92:	6082      	str	r2, [r0, #8]
   21c94:	60c2      	str	r2, [r0, #12]
   21c96:	6102      	str	r2, [r0, #16]
   21c98:	6142      	str	r2, [r0, #20]
}
   21c9a:	4618      	mov	r0, r3
   21c9c:	bd08      	pop	{r3, pc}
   21c9e:	bf00      	nop
   21ca0:	10005aa8 	.word	0x10005aa8

00021ca4 <ble_gap_conn_find>:
{
   21ca4:	b538      	push	{r3, r4, r5, lr}
   21ca6:	4605      	mov	r5, r0
   21ca8:	460c      	mov	r4, r1
    ble_hs_lock();
   21caa:	f004 fc45 	bl	26538 <ble_hs_lock>
    conn = ble_hs_conn_find(handle);
   21cae:	4628      	mov	r0, r5
   21cb0:	f005 fcc6 	bl	27640 <ble_hs_conn_find>
    if (conn != NULL && out_desc != NULL) {
   21cb4:	4605      	mov	r5, r0
   21cb6:	b118      	cbz	r0, 21cc0 <ble_gap_conn_find+0x1c>
   21cb8:	b114      	cbz	r4, 21cc0 <ble_gap_conn_find+0x1c>
        ble_gap_fill_conn_desc(conn, out_desc);
   21cba:	4621      	mov	r1, r4
   21cbc:	f7ff fa9b 	bl	211f6 <ble_gap_fill_conn_desc>
    ble_hs_unlock();
   21cc0:	f004 fc3e 	bl	26540 <ble_hs_unlock>
    if (conn == NULL) {
   21cc4:	b10d      	cbz	r5, 21cca <ble_gap_conn_find+0x26>
        return 0;
   21cc6:	2000      	movs	r0, #0
}
   21cc8:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOTCONN;
   21cca:	2007      	movs	r0, #7
   21ccc:	e7fc      	b.n	21cc8 <ble_gap_conn_find+0x24>

00021cce <ble_gap_set_priv_mode>:
{
   21cce:	b508      	push	{r3, lr}
    return ble_hs_pvcy_set_mode(peer_addr, priv_mode);
   21cd0:	f006 fd48 	bl	28764 <ble_hs_pvcy_set_mode>
}
   21cd4:	bd08      	pop	{r3, pc}

00021cd6 <ble_gap_read_le_phy>:
{
   21cd6:	b5f0      	push	{r4, r5, r6, r7, lr}
   21cd8:	b085      	sub	sp, #20
   21cda:	4604      	mov	r4, r0
   21cdc:	460f      	mov	r7, r1
   21cde:	4616      	mov	r6, r2
    ble_hs_lock();
   21ce0:	f004 fc2a 	bl	26538 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   21ce4:	4620      	mov	r0, r4
   21ce6:	f005 fcab 	bl	27640 <ble_hs_conn_find>
   21cea:	4605      	mov	r5, r0
    ble_hs_unlock();
   21cec:	f004 fc28 	bl	26540 <ble_hs_unlock>
    if (conn == NULL) {
   21cf0:	b1bd      	cbz	r5, 21d22 <ble_gap_read_le_phy+0x4c>
    cmd.conn_handle = htole16(conn_handle);
   21cf2:	f8ad 400c 	strh.w	r4, [sp, #12]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE, BLE_HCI_OCF_LE_RD_PHY),
   21cf6:	2304      	movs	r3, #4
   21cf8:	9300      	str	r3, [sp, #0]
   21cfa:	ab02      	add	r3, sp, #8
   21cfc:	2202      	movs	r2, #2
   21cfe:	a903      	add	r1, sp, #12
   21d00:	f242 0030 	movw	r0, #8240	; 0x2030
   21d04:	f005 feec 	bl	27ae0 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   21d08:	b948      	cbnz	r0, 21d1e <ble_gap_read_le_phy+0x48>
    if (le16toh(rsp.conn_handle) != conn_handle) {
   21d0a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   21d0e:	42a3      	cmp	r3, r4
   21d10:	d109      	bne.n	21d26 <ble_gap_read_le_phy+0x50>
    *tx_phy = rsp.tx_phy;
   21d12:	f89d 300a 	ldrb.w	r3, [sp, #10]
   21d16:	703b      	strb	r3, [r7, #0]
    *rx_phy = rsp.rx_phy;
   21d18:	f89d 300b 	ldrb.w	r3, [sp, #11]
   21d1c:	7033      	strb	r3, [r6, #0]
}
   21d1e:	b005      	add	sp, #20
   21d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_ENOTCONN;
   21d22:	2007      	movs	r0, #7
   21d24:	e7fb      	b.n	21d1e <ble_gap_read_le_phy+0x48>
        return BLE_HS_ECONTROLLER;
   21d26:	200c      	movs	r0, #12
   21d28:	e7f9      	b.n	21d1e <ble_gap_read_le_phy+0x48>

00021d2a <ble_gap_set_prefered_default_le_phy>:
    if (tx_phys_mask > (BLE_HCI_LE_PHY_1M_PREF_MASK |
   21d2a:	2807      	cmp	r0, #7
   21d2c:	d824      	bhi.n	21d78 <ble_gap_set_prefered_default_le_phy+0x4e>
    if (rx_phys_mask > (BLE_HCI_LE_PHY_1M_PREF_MASK |
   21d2e:	2907      	cmp	r1, #7
   21d30:	d824      	bhi.n	21d7c <ble_gap_set_prefered_default_le_phy+0x52>
{
   21d32:	b500      	push	{lr}
   21d34:	b085      	sub	sp, #20
    memset(&cmd, 0, sizeof(cmd));
   21d36:	2300      	movs	r3, #0
   21d38:	f8ad 300c 	strh.w	r3, [sp, #12]
   21d3c:	f88d 300e 	strb.w	r3, [sp, #14]
    if (tx_phys_mask == 0) {
   21d40:	b9a0      	cbnz	r0, 21d6c <ble_gap_set_prefered_default_le_phy+0x42>
        cmd.all_phys |= BLE_HCI_LE_PHY_NO_TX_PREF_MASK;
   21d42:	2301      	movs	r3, #1
   21d44:	f88d 300c 	strb.w	r3, [sp, #12]
    if (rx_phys_mask == 0) {
   21d48:	b999      	cbnz	r1, 21d72 <ble_gap_set_prefered_default_le_phy+0x48>
        cmd.all_phys |= BLE_HCI_LE_PHY_NO_RX_PREF_MASK;
   21d4a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   21d4e:	f043 0302 	orr.w	r3, r3, #2
   21d52:	f88d 300c 	strb.w	r3, [sp, #12]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   21d56:	2300      	movs	r3, #0
   21d58:	9300      	str	r3, [sp, #0]
   21d5a:	2203      	movs	r2, #3
   21d5c:	a903      	add	r1, sp, #12
   21d5e:	f242 0031 	movw	r0, #8241	; 0x2031
   21d62:	f005 febd 	bl	27ae0 <ble_hs_hci_cmd_tx>
}
   21d66:	b005      	add	sp, #20
   21d68:	f85d fb04 	ldr.w	pc, [sp], #4
        cmd.tx_phys = tx_phys_mask;
   21d6c:	f88d 000d 	strb.w	r0, [sp, #13]
   21d70:	e7ea      	b.n	21d48 <ble_gap_set_prefered_default_le_phy+0x1e>
        cmd.rx_phys = rx_phys_mask;
   21d72:	f88d 100e 	strb.w	r1, [sp, #14]
   21d76:	e7ee      	b.n	21d56 <ble_gap_set_prefered_default_le_phy+0x2c>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   21d78:	2012      	movs	r0, #18
   21d7a:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   21d7c:	2012      	movs	r0, #18
}
   21d7e:	4770      	bx	lr

00021d80 <ble_gap_set_prefered_le_phy>:
{
   21d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21d84:	b084      	sub	sp, #16
   21d86:	4605      	mov	r5, r0
   21d88:	460c      	mov	r4, r1
   21d8a:	4616      	mov	r6, r2
   21d8c:	4698      	mov	r8, r3
    ble_hs_lock();
   21d8e:	f004 fbd3 	bl	26538 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   21d92:	4628      	mov	r0, r5
   21d94:	f005 fc54 	bl	27640 <ble_hs_conn_find>
   21d98:	4607      	mov	r7, r0
    ble_hs_unlock();
   21d9a:	f004 fbd1 	bl	26540 <ble_hs_unlock>
    if (conn == NULL) {
   21d9e:	b34f      	cbz	r7, 21df4 <ble_gap_set_prefered_le_phy+0x74>
    if (tx_phys_mask > (BLE_HCI_LE_PHY_1M_PREF_MASK |
   21da0:	2c07      	cmp	r4, #7
   21da2:	d829      	bhi.n	21df8 <ble_gap_set_prefered_le_phy+0x78>
    if (rx_phys_mask > (BLE_HCI_LE_PHY_1M_PREF_MASK |
   21da4:	2e07      	cmp	r6, #7
   21da6:	d829      	bhi.n	21dfc <ble_gap_set_prefered_le_phy+0x7c>
    if (phy_opts > BLE_HCI_LE_PHY_CODED_S8_PREF) {
   21da8:	f1b8 0f02 	cmp.w	r8, #2
   21dac:	d828      	bhi.n	21e00 <ble_gap_set_prefered_le_phy+0x80>
    memset(&cmd, 0, sizeof(cmd));
   21dae:	2300      	movs	r3, #0
   21db0:	f8cd 300a 	str.w	r3, [sp, #10]
    cmd.conn_handle = htole16(conn_handle);
   21db4:	f8ad 5008 	strh.w	r5, [sp, #8]
    if (tx_phys_mask == 0) {
   21db8:	b9b4      	cbnz	r4, 21de8 <ble_gap_set_prefered_le_phy+0x68>
        cmd.all_phys |= BLE_HCI_LE_PHY_NO_TX_PREF_MASK;
   21dba:	2301      	movs	r3, #1
   21dbc:	f88d 300a 	strb.w	r3, [sp, #10]
    if (rx_phys_mask == 0) {
   21dc0:	b9ae      	cbnz	r6, 21dee <ble_gap_set_prefered_le_phy+0x6e>
        cmd.all_phys |= BLE_HCI_LE_PHY_NO_RX_PREF_MASK;
   21dc2:	f89d 300a 	ldrb.w	r3, [sp, #10]
   21dc6:	f043 0302 	orr.w	r3, r3, #2
   21dca:	f88d 300a 	strb.w	r3, [sp, #10]
    cmd.phy_options = htole16(phy_opts);
   21dce:	f8ad 800d 	strh.w	r8, [sp, #13]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE, BLE_HCI_OCF_LE_SET_PHY),
   21dd2:	2300      	movs	r3, #0
   21dd4:	9300      	str	r3, [sp, #0]
   21dd6:	2207      	movs	r2, #7
   21dd8:	a902      	add	r1, sp, #8
   21dda:	f242 0032 	movw	r0, #8242	; 0x2032
   21dde:	f005 fe7f 	bl	27ae0 <ble_hs_hci_cmd_tx>
}
   21de2:	b004      	add	sp, #16
   21de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        cmd.tx_phys = tx_phys_mask;
   21de8:	f88d 400b 	strb.w	r4, [sp, #11]
   21dec:	e7e8      	b.n	21dc0 <ble_gap_set_prefered_le_phy+0x40>
        cmd.rx_phys = rx_phys_mask;
   21dee:	f88d 600c 	strb.w	r6, [sp, #12]
   21df2:	e7ec      	b.n	21dce <ble_gap_set_prefered_le_phy+0x4e>
        return BLE_HS_ENOTCONN;
   21df4:	2007      	movs	r0, #7
   21df6:	e7f4      	b.n	21de2 <ble_gap_set_prefered_le_phy+0x62>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   21df8:	2012      	movs	r0, #18
   21dfa:	e7f2      	b.n	21de2 <ble_gap_set_prefered_le_phy+0x62>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   21dfc:	2012      	movs	r0, #18
   21dfe:	e7f0      	b.n	21de2 <ble_gap_set_prefered_le_phy+0x62>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   21e00:	2012      	movs	r0, #18
   21e02:	e7ee      	b.n	21de2 <ble_gap_set_prefered_le_phy+0x62>

00021e04 <ble_gap_master_in_progress>:
    return ble_gap_master.op != BLE_GAP_OP_NULL;
   21e04:	4b02      	ldr	r3, [pc, #8]	; (21e10 <ble_gap_master_in_progress+0xc>)
   21e06:	7818      	ldrb	r0, [r3, #0]
}
   21e08:	3800      	subs	r0, #0
   21e0a:	bf18      	it	ne
   21e0c:	2001      	movne	r0, #1
   21e0e:	4770      	bx	lr
   21e10:	10005ac4 	.word	0x10005ac4

00021e14 <ble_gap_rx_adv_report>:
{
   21e14:	b510      	push	{r4, lr}
   21e16:	4604      	mov	r4, r0
    if (ble_gap_rx_adv_report_sanity_check(desc->data, desc->length_data)) {
   21e18:	7841      	ldrb	r1, [r0, #1]
   21e1a:	68c0      	ldr	r0, [r0, #12]
   21e1c:	f7ff fdc6 	bl	219ac <ble_gap_rx_adv_report_sanity_check>
   21e20:	b100      	cbz	r0, 21e24 <ble_gap_rx_adv_report+0x10>
}
   21e22:	bd10      	pop	{r4, pc}
    ble_gap_disc_report(desc);
   21e24:	4620      	mov	r0, r4
   21e26:	f7ff fc87 	bl	21738 <ble_gap_disc_report>
   21e2a:	e7fa      	b.n	21e22 <ble_gap_rx_adv_report+0xe>

00021e2c <ble_gap_rx_rd_rem_sup_feat_complete>:
{
   21e2c:	b538      	push	{r3, r4, r5, lr}
   21e2e:	4604      	mov	r4, r0
    ble_hs_lock();
   21e30:	f004 fb82 	bl	26538 <ble_hs_lock>
    conn = ble_hs_conn_find(le16toh(ev->conn_handle));
   21e34:	8860      	ldrh	r0, [r4, #2]
   21e36:	f005 fc03 	bl	27640 <ble_hs_conn_find>
    if ((conn != NULL) && (ev->status == 0)) {
   21e3a:	b110      	cbz	r0, 21e42 <ble_gap_rx_rd_rem_sup_feat_complete+0x16>
   21e3c:	4605      	mov	r5, r0
   21e3e:	7863      	ldrb	r3, [r4, #1]
   21e40:	b113      	cbz	r3, 21e48 <ble_gap_rx_rd_rem_sup_feat_complete+0x1c>
    ble_hs_unlock();
   21e42:	f004 fb7d 	bl	26540 <ble_hs_unlock>
}
   21e46:	bd38      	pop	{r3, r4, r5, pc}
        conn->supported_feat = get_le32(ev->features);
   21e48:	1d20      	adds	r0, r4, #4
   21e4a:	f7f6 ffec 	bl	18e26 <get_le32>
   21e4e:	6268      	str	r0, [r5, #36]	; 0x24
   21e50:	e7f7      	b.n	21e42 <ble_gap_rx_rd_rem_sup_feat_complete+0x16>

00021e52 <ble_gap_rx_l2cap_update_req>:
{
   21e52:	b530      	push	{r4, r5, lr}
   21e54:	b08f      	sub	sp, #60	; 0x3c
   21e56:	4604      	mov	r4, r0
   21e58:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   21e5a:	2234      	movs	r2, #52	; 0x34
   21e5c:	2100      	movs	r1, #0
   21e5e:	a801      	add	r0, sp, #4
   21e60:	f7f8 ff2d 	bl	1acbe <memset>
    event.type = BLE_GAP_EVENT_L2CAP_UPDATE_REQ;
   21e64:	2305      	movs	r3, #5
   21e66:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update_req.conn_handle = conn_handle;
   21e6a:	f8ad 4010 	strh.w	r4, [sp, #16]
    event.conn_update_req.peer_params = params;
   21e6e:	9502      	str	r5, [sp, #8]
    rc = ble_gap_call_conn_event_cb(&event, conn_handle);
   21e70:	4621      	mov	r1, r4
   21e72:	a801      	add	r0, sp, #4
   21e74:	f7ff f9ae 	bl	211d4 <ble_gap_call_conn_event_cb>
}
   21e78:	b00f      	add	sp, #60	; 0x3c
   21e7a:	bd30      	pop	{r4, r5, pc}

00021e7c <ble_gap_rx_phy_update_complete>:
{
   21e7c:	b570      	push	{r4, r5, r6, lr}
   21e7e:	b08e      	sub	sp, #56	; 0x38
   21e80:	4604      	mov	r4, r0
    uint16_t conn_handle = le16toh(ev->conn_handle);
   21e82:	8845      	ldrh	r5, [r0, #2]
   21e84:	b2ae      	uxth	r6, r5
    memset(&event, 0, sizeof event);
   21e86:	2234      	movs	r2, #52	; 0x34
   21e88:	2100      	movs	r1, #0
   21e8a:	a801      	add	r0, sp, #4
   21e8c:	f7f8 ff17 	bl	1acbe <memset>
    event.type = BLE_GAP_EVENT_PHY_UPDATE_COMPLETE;
   21e90:	2312      	movs	r3, #18
   21e92:	f88d 3004 	strb.w	r3, [sp, #4]
    event.phy_updated.status = ev->status;
   21e96:	7863      	ldrb	r3, [r4, #1]
   21e98:	9302      	str	r3, [sp, #8]
    event.phy_updated.conn_handle = conn_handle;
   21e9a:	f8ad 500c 	strh.w	r5, [sp, #12]
    event.phy_updated.tx_phy = ev->tx_phy;
   21e9e:	7923      	ldrb	r3, [r4, #4]
   21ea0:	f88d 300e 	strb.w	r3, [sp, #14]
    event.phy_updated.rx_phy = ev->rx_phy;
   21ea4:	7963      	ldrb	r3, [r4, #5]
   21ea6:	f88d 300f 	strb.w	r3, [sp, #15]
    ble_gap_event_listener_call(&event);
   21eaa:	a801      	add	r0, sp, #4
   21eac:	f7ff f968 	bl	21180 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   21eb0:	4631      	mov	r1, r6
   21eb2:	a801      	add	r0, sp, #4
   21eb4:	f7ff f98e 	bl	211d4 <ble_gap_call_conn_event_cb>
}
   21eb8:	b00e      	add	sp, #56	; 0x38
   21eba:	bd70      	pop	{r4, r5, r6, pc}

00021ebc <ble_gap_timer>:
{
   21ebc:	b510      	push	{r4, lr}
    master_ticks = ble_gap_master_timer();
   21ebe:	f7ff fcc1 	bl	21844 <ble_gap_master_timer>
   21ec2:	4604      	mov	r4, r0
    update_ticks = ble_gap_update_timer();
   21ec4:	f7ff fd04 	bl	218d0 <ble_gap_update_timer>
    min_ticks = min(master_ticks, update_ticks);
   21ec8:	4284      	cmp	r4, r0
   21eca:	bfa8      	it	ge
   21ecc:	4604      	movge	r4, r0
    min_ticks = min(min_ticks, ble_gap_slave_timer());
   21ece:	f7ff fd37 	bl	21940 <ble_gap_slave_timer>
   21ed2:	42a0      	cmp	r0, r4
   21ed4:	dd01      	ble.n	21eda <ble_gap_timer+0x1e>
}
   21ed6:	4620      	mov	r0, r4
   21ed8:	bd10      	pop	{r4, pc}
    min_ticks = min(min_ticks, ble_gap_slave_timer());
   21eda:	f7ff fd31 	bl	21940 <ble_gap_slave_timer>
   21ede:	4604      	mov	r4, r0
    return min_ticks;
   21ee0:	e7f9      	b.n	21ed6 <ble_gap_timer+0x1a>
	...

00021ee4 <ble_gap_wl_set>:
{
   21ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21ee6:	4605      	mov	r5, r0
   21ee8:	460c      	mov	r4, r1
    STATS_INC(ble_gap_stats, wl_set);
   21eea:	4a22      	ldr	r2, [pc, #136]	; (21f74 <ble_gap_wl_set+0x90>)
   21eec:	68d3      	ldr	r3, [r2, #12]
   21eee:	3301      	adds	r3, #1
   21ef0:	60d3      	str	r3, [r2, #12]
    ble_hs_lock();
   21ef2:	f004 fb21 	bl	26538 <ble_hs_lock>
    for (i = 0; i < white_list_count; i++) {
   21ef6:	2300      	movs	r3, #0
   21ef8:	4626      	mov	r6, r4
   21efa:	429c      	cmp	r4, r3
   21efc:	dd0f      	ble.n	21f1e <ble_gap_wl_set+0x3a>
        if (addrs[i].type != BLE_ADDR_PUBLIC &&
   21efe:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
   21f02:	5caa      	ldrb	r2, [r5, r2]
   21f04:	2a01      	cmp	r2, #1
   21f06:	d801      	bhi.n	21f0c <ble_gap_wl_set+0x28>
    for (i = 0; i < white_list_count; i++) {
   21f08:	3301      	adds	r3, #1
   21f0a:	e7f5      	b.n	21ef8 <ble_gap_wl_set+0x14>
    ble_hs_unlock();
   21f0c:	f004 fb18 	bl	26540 <ble_hs_unlock>
            rc = BLE_HS_EINVAL;
   21f10:	2703      	movs	r7, #3
        STATS_INC(ble_gap_stats, wl_set_fail);
   21f12:	4a18      	ldr	r2, [pc, #96]	; (21f74 <ble_gap_wl_set+0x90>)
   21f14:	6913      	ldr	r3, [r2, #16]
   21f16:	3301      	adds	r3, #1
   21f18:	6113      	str	r3, [r2, #16]
}
   21f1a:	4638      	mov	r0, r7
   21f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ble_gap_wl_busy()) {
   21f1e:	f7ff f8a3 	bl	21068 <ble_gap_wl_busy>
   21f22:	b9e0      	cbnz	r0, 21f5e <ble_gap_wl_set+0x7a>
    BLE_HS_LOG(INFO, "GAP procedure initiated: set whitelist; ");
   21f24:	4a14      	ldr	r2, [pc, #80]	; (21f78 <ble_gap_wl_set+0x94>)
   21f26:	2101      	movs	r1, #1
   21f28:	2004      	movs	r0, #4
   21f2a:	f7fa fef7 	bl	1cd1c <modlog_printf>
    ble_gap_log_wl(addrs, white_list_count);
   21f2e:	4621      	mov	r1, r4
   21f30:	4628      	mov	r0, r5
   21f32:	f7ff fd69 	bl	21a08 <ble_gap_log_wl>
    BLE_HS_LOG(INFO, "\n");
   21f36:	4a11      	ldr	r2, [pc, #68]	; (21f7c <ble_gap_wl_set+0x98>)
   21f38:	2101      	movs	r1, #1
   21f3a:	2004      	movs	r0, #4
   21f3c:	f7fa feee 	bl	1cd1c <modlog_printf>
    rc = ble_gap_wl_tx_clear();
   21f40:	f7ff fa10 	bl	21364 <ble_gap_wl_tx_clear>
    if (rc != 0) {
   21f44:	4607      	mov	r7, r0
   21f46:	b978      	cbnz	r0, 21f68 <ble_gap_wl_set+0x84>
    for (i = 0; i < white_list_count; i++) {
   21f48:	4604      	mov	r4, r0
   21f4a:	42a6      	cmp	r6, r4
   21f4c:	dd0c      	ble.n	21f68 <ble_gap_wl_set+0x84>
        rc = ble_gap_wl_tx_add(addrs + i);
   21f4e:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   21f52:	4428      	add	r0, r5
   21f54:	f7ff fa13 	bl	2137e <ble_gap_wl_tx_add>
        if (rc != 0) {
   21f58:	b928      	cbnz	r0, 21f66 <ble_gap_wl_set+0x82>
    for (i = 0; i < white_list_count; i++) {
   21f5a:	3401      	adds	r4, #1
   21f5c:	e7f5      	b.n	21f4a <ble_gap_wl_set+0x66>
    ble_hs_unlock();
   21f5e:	f004 faef 	bl	26540 <ble_hs_unlock>
        rc = BLE_HS_EBUSY;
   21f62:	270f      	movs	r7, #15
   21f64:	e7d5      	b.n	21f12 <ble_gap_wl_set+0x2e>
        rc = ble_gap_wl_tx_add(addrs + i);
   21f66:	4607      	mov	r7, r0
    ble_hs_unlock();
   21f68:	f004 faea 	bl	26540 <ble_hs_unlock>
    if (rc != 0) {
   21f6c:	2f00      	cmp	r7, #0
   21f6e:	d0d4      	beq.n	21f1a <ble_gap_wl_set+0x36>
   21f70:	e7cf      	b.n	21f12 <ble_gap_wl_set+0x2e>
   21f72:	bf00      	nop
   21f74:	10005a04 	.word	0x10005a04
   21f78:	00034714 	.word	0x00034714
   21f7c:	0002ff28 	.word	0x0002ff28

00021f80 <ble_gap_adv_start>:
{
   21f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21f84:	b082      	sub	sp, #8
   21f86:	4604      	mov	r4, r0
   21f88:	460e      	mov	r6, r1
   21f8a:	4617      	mov	r7, r2
   21f8c:	461d      	mov	r5, r3
    STATS_INC(ble_gap_stats, adv_start);
   21f8e:	4a41      	ldr	r2, [pc, #260]	; (22094 <ble_gap_adv_start+0x114>)
   21f90:	69d3      	ldr	r3, [r2, #28]
   21f92:	3301      	adds	r3, #1
   21f94:	61d3      	str	r3, [r2, #28]
    ble_hs_lock();
   21f96:	f004 facf 	bl	26538 <ble_hs_lock>
    rc = ble_gap_adv_validate(own_addr_type, direct_addr, adv_params);
   21f9a:	462a      	mov	r2, r5
   21f9c:	4631      	mov	r1, r6
   21f9e:	4620      	mov	r0, r4
   21fa0:	f7ff fe2c 	bl	21bfc <ble_gap_adv_validate>
    if (rc != 0) {
   21fa4:	4680      	mov	r8, r0
   21fa6:	b9a8      	cbnz	r0, 21fd4 <ble_gap_adv_start+0x54>
    if (duration_ms != BLE_HS_FOREVER) {
   21fa8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   21fac:	429f      	cmp	r7, r3
   21fae:	d006      	beq.n	21fbe <ble_gap_adv_start+0x3e>
}

static inline ble_npl_error_t
ble_npl_time_ms_to_ticks(uint32_t ms, ble_npl_time_t *out_ticks)
{
    return (ble_npl_error_t)os_time_ms_to_ticks(ms, out_ticks);
   21fb0:	a901      	add	r1, sp, #4
   21fb2:	4638      	mov	r0, r7
   21fb4:	f7f8 fc65 	bl	1a882 <os_time_ms_to_ticks>
        if (rc != 0) {
   21fb8:	f010 0fff 	tst.w	r0, #255	; 0xff
   21fbc:	d117      	bne.n	21fee <ble_gap_adv_start+0x6e>
    if (!ble_hs_is_enabled()) {
   21fbe:	f004 faf3 	bl	265a8 <ble_hs_is_enabled>
   21fc2:	b1c8      	cbz	r0, 21ff8 <ble_gap_adv_start+0x78>
    if (ble_gap_is_preempted()) {
   21fc4:	f7fe ffee 	bl	20fa4 <ble_gap_is_preempted>
   21fc8:	b9d8      	cbnz	r0, 22002 <ble_gap_adv_start+0x82>
    rc = ble_hs_id_use_addr(own_addr_type);
   21fca:	4620      	mov	r0, r4
   21fcc:	f006 fa57 	bl	2847e <ble_hs_id_use_addr>
    if (rc != 0) {
   21fd0:	4680      	mov	r8, r0
   21fd2:	b1d8      	cbz	r0, 2200c <ble_gap_adv_start+0x8c>
    ble_hs_unlock();
   21fd4:	f004 fab4 	bl	26540 <ble_hs_unlock>
    if (rc != 0) {
   21fd8:	f1b8 0f00 	cmp.w	r8, #0
   21fdc:	d003      	beq.n	21fe6 <ble_gap_adv_start+0x66>
        STATS_INC(ble_gap_stats, adv_start_fail);
   21fde:	4a2d      	ldr	r2, [pc, #180]	; (22094 <ble_gap_adv_start+0x114>)
   21fe0:	6a13      	ldr	r3, [r2, #32]
   21fe2:	3301      	adds	r3, #1
   21fe4:	6213      	str	r3, [r2, #32]
}
   21fe6:	4640      	mov	r0, r8
   21fe8:	b002      	add	sp, #8
   21fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_unlock();
   21fee:	f004 faa7 	bl	26540 <ble_hs_unlock>
            rc = BLE_HS_EINVAL;
   21ff2:	f04f 0803 	mov.w	r8, #3
   21ff6:	e7f2      	b.n	21fde <ble_gap_adv_start+0x5e>
    ble_hs_unlock();
   21ff8:	f004 faa2 	bl	26540 <ble_hs_unlock>
        rc = BLE_HS_EDISABLED;
   21ffc:	f04f 081e 	mov.w	r8, #30
   22000:	e7ed      	b.n	21fde <ble_gap_adv_start+0x5e>
    ble_hs_unlock();
   22002:	f004 fa9d 	bl	26540 <ble_hs_unlock>
        rc = BLE_HS_EPREEMPTED;
   22006:	f04f 081d 	mov.w	r8, #29
   2200a:	e7e8      	b.n	21fde <ble_gap_adv_start+0x5e>
    BLE_HS_LOG(INFO, "GAP procedure initiated: advertise; ");
   2200c:	4a22      	ldr	r2, [pc, #136]	; (22098 <ble_gap_adv_start+0x118>)
   2200e:	2101      	movs	r1, #1
   22010:	2004      	movs	r0, #4
   22012:	f7fa fe83 	bl	1cd1c <modlog_printf>
    ble_gap_log_adv(own_addr_type, direct_addr, adv_params);
   22016:	462a      	mov	r2, r5
   22018:	4631      	mov	r1, r6
   2201a:	4620      	mov	r0, r4
   2201c:	f7ff fd2e 	bl	21a7c <ble_gap_log_adv>
    BLE_HS_LOG(INFO, "\n");
   22020:	4a1e      	ldr	r2, [pc, #120]	; (2209c <ble_gap_adv_start+0x11c>)
   22022:	2101      	movs	r1, #1
   22024:	2004      	movs	r0, #4
   22026:	f7fa fe79 	bl	1cd1c <modlog_printf>
    ble_gap_slave[0].cb = cb;
   2202a:	4b1d      	ldr	r3, [pc, #116]	; (220a0 <ble_gap_adv_start+0x120>)
   2202c:	9a08      	ldr	r2, [sp, #32]
   2202e:	61da      	str	r2, [r3, #28]
    ble_gap_slave[0].cb_arg = cb_arg;
   22030:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22032:	621a      	str	r2, [r3, #32]
    ble_gap_slave[0].our_addr_type = own_addr_type;
   22034:	7d5a      	ldrb	r2, [r3, #21]
   22036:	f364 0201 	bfi	r2, r4, #0, #2
   2203a:	755a      	strb	r2, [r3, #21]
    if (adv_params->conn_mode != BLE_GAP_CONN_MODE_NON) {
   2203c:	782b      	ldrb	r3, [r5, #0]
   2203e:	b1d3      	cbz	r3, 22076 <ble_gap_adv_start+0xf6>
        ble_gap_slave[0].connectable = 1;
   22040:	4a17      	ldr	r2, [pc, #92]	; (220a0 <ble_gap_adv_start+0x120>)
   22042:	7d53      	ldrb	r3, [r2, #21]
   22044:	f043 0308 	orr.w	r3, r3, #8
   22048:	7553      	strb	r3, [r2, #21]
    rc = ble_gap_adv_params_tx(own_addr_type, direct_addr, adv_params);
   2204a:	462a      	mov	r2, r5
   2204c:	4631      	mov	r1, r6
   2204e:	4620      	mov	r0, r4
   22050:	f7ff f9b2 	bl	213b8 <ble_gap_adv_params_tx>
    if (rc != 0) {
   22054:	4680      	mov	r8, r0
   22056:	2800      	cmp	r0, #0
   22058:	d1bc      	bne.n	21fd4 <ble_gap_adv_start+0x54>
    ble_gap_slave[0].op = BLE_GAP_OP_S_ADV;
   2205a:	2001      	movs	r0, #1
   2205c:	4b10      	ldr	r3, [pc, #64]	; (220a0 <ble_gap_adv_start+0x120>)
   2205e:	7518      	strb	r0, [r3, #20]
    rc = ble_gap_adv_enable_tx(1);
   22060:	f7ff f96e 	bl	21340 <ble_gap_adv_enable_tx>
    if (rc != 0) {
   22064:	4680      	mov	r8, r0
   22066:	b960      	cbnz	r0, 22082 <ble_gap_adv_start+0x102>
    if (duration_ms != BLE_HS_FOREVER) {
   22068:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   2206c:	429f      	cmp	r7, r3
   2206e:	d10c      	bne.n	2208a <ble_gap_adv_start+0x10a>
    ble_hs_unlock();
   22070:	f004 fa66 	bl	26540 <ble_hs_unlock>
    if (rc != 0) {
   22074:	e7b7      	b.n	21fe6 <ble_gap_adv_start+0x66>
        ble_gap_slave[0].connectable = 0;
   22076:	4b0a      	ldr	r3, [pc, #40]	; (220a0 <ble_gap_adv_start+0x120>)
   22078:	7d5a      	ldrb	r2, [r3, #21]
   2207a:	f36f 02c3 	bfc	r2, #3, #1
   2207e:	755a      	strb	r2, [r3, #21]
   22080:	e7e3      	b.n	2204a <ble_gap_adv_start+0xca>
        ble_gap_slave_reset_state(0);
   22082:	2000      	movs	r0, #0
   22084:	f7ff fab2 	bl	215ec <ble_gap_slave_reset_state>
        goto done;
   22088:	e7a4      	b.n	21fd4 <ble_gap_adv_start+0x54>
        ble_gap_slave_set_timer(duration_ticks);
   2208a:	9801      	ldr	r0, [sp, #4]
   2208c:	f7ff fc6e 	bl	2196c <ble_gap_slave_set_timer>
   22090:	e7ee      	b.n	22070 <ble_gap_adv_start+0xf0>
   22092:	bf00      	nop
   22094:	10005a04 	.word	0x10005a04
   22098:	00034740 	.word	0x00034740
   2209c:	0002ff28 	.word	0x0002ff28
   220a0:	10005ac4 	.word	0x10005ac4

000220a4 <ble_gap_adv_set_data>:
{
   220a4:	b510      	push	{r4, lr}
   220a6:	b08a      	sub	sp, #40	; 0x28
   220a8:	460c      	mov	r4, r1
    STATS_INC(ble_gap_stats, adv_set_data);
   220aa:	4a0f      	ldr	r2, [pc, #60]	; (220e8 <ble_gap_adv_set_data+0x44>)
   220ac:	6a53      	ldr	r3, [r2, #36]	; 0x24
   220ae:	3301      	adds	r3, #1
   220b0:	6253      	str	r3, [r2, #36]	; 0x24
    if (((data == NULL) && (data_len != 0)) ||
   220b2:	4601      	mov	r1, r0
   220b4:	b190      	cbz	r0, 220dc <ble_gap_adv_set_data+0x38>
   220b6:	2c1f      	cmp	r4, #31
   220b8:	dc14      	bgt.n	220e4 <ble_gap_adv_set_data+0x40>
    memcpy(cmd.adv_data, data, data_len);
   220ba:	4622      	mov	r2, r4
   220bc:	f10d 0009 	add.w	r0, sp, #9
   220c0:	f7f8 fdd8 	bl	1ac74 <memcpy>
    cmd.adv_data_len = data_len;
   220c4:	f88d 4008 	strb.w	r4, [sp, #8]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   220c8:	2300      	movs	r3, #0
   220ca:	9300      	str	r3, [sp, #0]
   220cc:	2220      	movs	r2, #32
   220ce:	a902      	add	r1, sp, #8
   220d0:	f242 0008 	movw	r0, #8200	; 0x2008
   220d4:	f005 fd04 	bl	27ae0 <ble_hs_hci_cmd_tx>
}
   220d8:	b00a      	add	sp, #40	; 0x28
   220da:	bd10      	pop	{r4, pc}
    if (((data == NULL) && (data_len != 0)) ||
   220dc:	2c00      	cmp	r4, #0
   220de:	d0ea      	beq.n	220b6 <ble_gap_adv_set_data+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   220e0:	2012      	movs	r0, #18
   220e2:	e7f9      	b.n	220d8 <ble_gap_adv_set_data+0x34>
   220e4:	2012      	movs	r0, #18
   220e6:	e7f7      	b.n	220d8 <ble_gap_adv_set_data+0x34>
   220e8:	10005a04 	.word	0x10005a04

000220ec <ble_gap_adv_rsp_set_data>:
{
   220ec:	b510      	push	{r4, lr}
   220ee:	b08a      	sub	sp, #40	; 0x28
   220f0:	460c      	mov	r4, r1
    if (((data == NULL) && (data_len != 0)) ||
   220f2:	4601      	mov	r1, r0
   220f4:	b190      	cbz	r0, 2211c <ble_gap_adv_rsp_set_data+0x30>
   220f6:	2c1f      	cmp	r4, #31
   220f8:	dc14      	bgt.n	22124 <ble_gap_adv_rsp_set_data+0x38>
    memcpy(cmd.scan_rsp, data, data_len);
   220fa:	4622      	mov	r2, r4
   220fc:	f10d 0009 	add.w	r0, sp, #9
   22100:	f7f8 fdb8 	bl	1ac74 <memcpy>
    cmd.scan_rsp_len = data_len;
   22104:	f88d 4008 	strb.w	r4, [sp, #8]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   22108:	2300      	movs	r3, #0
   2210a:	9300      	str	r3, [sp, #0]
   2210c:	2220      	movs	r2, #32
   2210e:	a902      	add	r1, sp, #8
   22110:	f242 0009 	movw	r0, #8201	; 0x2009
   22114:	f005 fce4 	bl	27ae0 <ble_hs_hci_cmd_tx>
}
   22118:	b00a      	add	sp, #40	; 0x28
   2211a:	bd10      	pop	{r4, pc}
    if (((data == NULL) && (data_len != 0)) ||
   2211c:	2c00      	cmp	r4, #0
   2211e:	d0ea      	beq.n	220f6 <ble_gap_adv_rsp_set_data+0xa>
        return BLE_HS_EINVAL;
   22120:	2003      	movs	r0, #3
   22122:	e7f9      	b.n	22118 <ble_gap_adv_rsp_set_data+0x2c>
   22124:	2003      	movs	r0, #3
   22126:	e7f7      	b.n	22118 <ble_gap_adv_rsp_set_data+0x2c>

00022128 <ble_gap_adv_set_fields>:
{
   22128:	b500      	push	{lr}
   2212a:	b08b      	sub	sp, #44	; 0x2c
    rc = ble_hs_adv_set_fields(adv_fields, buf, &buf_sz, sizeof buf);
   2212c:	231f      	movs	r3, #31
   2212e:	f10d 0207 	add.w	r2, sp, #7
   22132:	a902      	add	r1, sp, #8
   22134:	f005 f912 	bl	2735c <ble_hs_adv_set_fields>
    if (rc != 0) {
   22138:	b110      	cbz	r0, 22140 <ble_gap_adv_set_fields+0x18>
}
   2213a:	b00b      	add	sp, #44	; 0x2c
   2213c:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = ble_gap_adv_set_data(buf, buf_sz);
   22140:	f89d 1007 	ldrb.w	r1, [sp, #7]
   22144:	a802      	add	r0, sp, #8
   22146:	f7ff ffad 	bl	220a4 <ble_gap_adv_set_data>
    if (rc != 0) {
   2214a:	e7f6      	b.n	2213a <ble_gap_adv_set_fields+0x12>

0002214c <ble_gap_adv_rsp_set_fields>:
{
   2214c:	b500      	push	{lr}
   2214e:	b08b      	sub	sp, #44	; 0x2c
    rc = ble_hs_adv_set_fields(rsp_fields, buf, &buf_sz, sizeof buf);
   22150:	231f      	movs	r3, #31
   22152:	f10d 0207 	add.w	r2, sp, #7
   22156:	a902      	add	r1, sp, #8
   22158:	f005 f900 	bl	2735c <ble_hs_adv_set_fields>
    if (rc != 0) {
   2215c:	b110      	cbz	r0, 22164 <ble_gap_adv_rsp_set_fields+0x18>
}
   2215e:	b00b      	add	sp, #44	; 0x2c
   22160:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = ble_gap_adv_rsp_set_data(buf, buf_sz);
   22164:	f89d 1007 	ldrb.w	r1, [sp, #7]
   22168:	a802      	add	r0, sp, #8
   2216a:	f7ff ffbf 	bl	220ec <ble_gap_adv_rsp_set_data>
    if (rc != 0) {
   2216e:	e7f6      	b.n	2215e <ble_gap_adv_rsp_set_fields+0x12>

00022170 <ble_gap_adv_active>:
{
   22170:	b508      	push	{r3, lr}
    return ble_gap_adv_active_instance(0);
   22172:	2000      	movs	r0, #0
   22174:	f7fe ff3e 	bl	20ff4 <ble_gap_adv_active_instance>
}
   22178:	bd08      	pop	{r3, pc}
	...

0002217c <ble_gap_rx_conn_complete>:
{
   2217c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2217e:	b091      	sub	sp, #68	; 0x44
    STATS_INC(ble_gap_stats, rx_conn_complete);
   22180:	4a6a      	ldr	r2, [pc, #424]	; (2232c <ble_gap_rx_conn_complete+0x1b0>)
   22182:	6f53      	ldr	r3, [r2, #116]	; 0x74
   22184:	3301      	adds	r3, #1
   22186:	6753      	str	r3, [r2, #116]	; 0x74
    if (evt->status != BLE_ERR_SUCCESS) {
   22188:	7803      	ldrb	r3, [r0, #0]
   2218a:	b373      	cbz	r3, 221ea <ble_gap_rx_conn_complete+0x6e>
        switch (evt->status) {
   2218c:	2b02      	cmp	r3, #2
   2218e:	d00e      	beq.n	221ae <ble_gap_rx_conn_complete+0x32>
   22190:	2b3c      	cmp	r3, #60	; 0x3c
   22192:	d11b      	bne.n	221cc <ble_gap_rx_conn_complete+0x50>
            if (ble_gap_adv_active()) {
   22194:	f7ff ffec 	bl	22170 <ble_gap_adv_active>
   22198:	b910      	cbnz	r0, 221a0 <ble_gap_rx_conn_complete+0x24>
        return 0;
   2219a:	2000      	movs	r0, #0
}
   2219c:	b011      	add	sp, #68	; 0x44
   2219e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                ble_gap_adv_finished(0, 0, 0, 0);
   221a0:	2300      	movs	r3, #0
   221a2:	461a      	mov	r2, r3
   221a4:	4619      	mov	r1, r3
   221a6:	4618      	mov	r0, r3
   221a8:	f7ff fa46 	bl	21638 <ble_gap_adv_finished>
   221ac:	e7f5      	b.n	2219a <ble_gap_rx_conn_complete+0x1e>
            if (ble_gap_master_in_progress()) {
   221ae:	f7ff fe29 	bl	21e04 <ble_gap_master_in_progress>
   221b2:	2800      	cmp	r0, #0
   221b4:	d0f1      	beq.n	2219a <ble_gap_rx_conn_complete+0x1e>
                if (ble_gap_master.preempted_op == BLE_GAP_OP_M_CONN) {
   221b6:	4b5e      	ldr	r3, [pc, #376]	; (22330 <ble_gap_rx_conn_complete+0x1b4>)
   221b8:	7c1b      	ldrb	r3, [r3, #16]
   221ba:	2b02      	cmp	r3, #2
   221bc:	d002      	beq.n	221c4 <ble_gap_rx_conn_complete+0x48>
                    ble_gap_master_connect_cancelled();
   221be:	f7ff fade 	bl	2177e <ble_gap_master_connect_cancelled>
   221c2:	e7ea      	b.n	2219a <ble_gap_rx_conn_complete+0x1e>
                    ble_gap_master_failed(BLE_HS_EPREEMPTED);
   221c4:	201d      	movs	r0, #29
   221c6:	f7ff fafd 	bl	217c4 <ble_gap_master_failed>
   221ca:	e7e6      	b.n	2219a <ble_gap_rx_conn_complete+0x1e>
            BLE_HS_LOG(INFO, "controller reported invalid error code in conn"
   221cc:	4a59      	ldr	r2, [pc, #356]	; (22334 <ble_gap_rx_conn_complete+0x1b8>)
   221ce:	2101      	movs	r1, #1
   221d0:	2004      	movs	r0, #4
   221d2:	f7fa fda3 	bl	1cd1c <modlog_printf>
            assert(0);
   221d6:	f7f2 fa95 	bl	14704 <hal_debugger_connected>
   221da:	b100      	cbz	r0, 221de <ble_gap_rx_conn_complete+0x62>
   221dc:	be01      	bkpt	0x0001
   221de:	2300      	movs	r3, #0
   221e0:	461a      	mov	r2, r3
   221e2:	4619      	mov	r1, r3
   221e4:	4618      	mov	r0, r3
   221e6:	f7f6 fd9d 	bl	18d24 <__assert_func>
   221ea:	4604      	mov	r4, r0
   221ec:	460e      	mov	r6, r1
    if (ble_hs_atomic_conn_flags(evt->connection_handle, NULL) == 0) {
   221ee:	2100      	movs	r1, #0
   221f0:	8840      	ldrh	r0, [r0, #2]
   221f2:	f005 f924 	bl	2743e <ble_hs_atomic_conn_flags>
   221f6:	2800      	cmp	r0, #0
   221f8:	d0d0      	beq.n	2219c <ble_gap_rx_conn_complete+0x20>
    switch (evt->role) {
   221fa:	7923      	ldrb	r3, [r4, #4]
   221fc:	2b00      	cmp	r3, #0
   221fe:	d063      	beq.n	222c8 <ble_gap_rx_conn_complete+0x14c>
   22200:	2b01      	cmp	r3, #1
   22202:	d066      	beq.n	222d2 <ble_gap_rx_conn_complete+0x156>
    conn = ble_hs_conn_alloc(evt->connection_handle);
   22204:	8860      	ldrh	r0, [r4, #2]
   22206:	f005 f9c9 	bl	2759c <ble_hs_conn_alloc>
   2220a:	4605      	mov	r5, r0
    conn->bhc_itvl = evt->conn_itvl;
   2220c:	89a3      	ldrh	r3, [r4, #12]
   2220e:	8383      	strh	r3, [r0, #28]
    conn->bhc_latency = evt->conn_latency;
   22210:	89e3      	ldrh	r3, [r4, #14]
   22212:	83c3      	strh	r3, [r0, #30]
    conn->bhc_supervision_timeout = evt->supervision_timeout;
   22214:	8a23      	ldrh	r3, [r4, #16]
   22216:	8403      	strh	r3, [r0, #32]
    conn->bhc_master_clock_accuracy = evt->master_clk_acc;
   22218:	7ca3      	ldrb	r3, [r4, #18]
   2221a:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    if (evt->role == BLE_HCI_LE_CONN_COMPLETE_ROLE_MASTER) {
   2221e:	7923      	ldrb	r3, [r4, #4]
   22220:	2b00      	cmp	r3, #0
   22222:	d15c      	bne.n	222de <ble_gap_rx_conn_complete+0x162>
        conn->bhc_cb = ble_gap_master.cb;
   22224:	4b42      	ldr	r3, [pc, #264]	; (22330 <ble_gap_rx_conn_complete+0x1b4>)
   22226:	689a      	ldr	r2, [r3, #8]
   22228:	65c2      	str	r2, [r0, #92]	; 0x5c
        conn->bhc_cb_arg = ble_gap_master.cb_arg;
   2222a:	68da      	ldr	r2, [r3, #12]
   2222c:	6602      	str	r2, [r0, #96]	; 0x60
        conn->bhc_flags |= BLE_HS_CONN_F_MASTER;
   2222e:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
   22232:	f042 0201 	orr.w	r2, r2, #1
   22236:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        conn->bhc_our_addr_type = ble_gap_master.conn.our_addr_type;
   2223a:	7c5b      	ldrb	r3, [r3, #17]
   2223c:	f3c3 0341 	ubfx	r3, r3, #1, #2
   22240:	7183      	strb	r3, [r0, #6]
        ble_gap_master_reset_state();
   22242:	f7ff fa15 	bl	21670 <ble_gap_master_reset_state>
    conn->bhc_peer_addr.type = evt->peer_addr_type;
   22246:	7966      	ldrb	r6, [r4, #5]
   22248:	71ee      	strb	r6, [r5, #7]
    memcpy(conn->bhc_peer_addr.val, evt->peer_addr, 6);
   2224a:	4623      	mov	r3, r4
   2224c:	f853 2f06 	ldr.w	r2, [r3, #6]!
   22250:	60aa      	str	r2, [r5, #8]
   22252:	889b      	ldrh	r3, [r3, #4]
   22254:	81ab      	strh	r3, [r5, #12]
    conn->bhc_our_rpa_addr.type = BLE_ADDR_RANDOM;
   22256:	2301      	movs	r3, #1
   22258:	73ab      	strb	r3, [r5, #14]
    memcpy(conn->bhc_our_rpa_addr.val, evt->local_rpa, 6);
   2225a:	4623      	mov	r3, r4
   2225c:	f853 2f13 	ldr.w	r2, [r3, #19]!
   22260:	f8c5 200f 	str.w	r2, [r5, #15]
   22264:	889b      	ldrh	r3, [r3, #4]
   22266:	f8a5 3013 	strh.w	r3, [r5, #19]
    if (memcmp(BLE_ADDR_ANY->val, evt->peer_rpa, 6) == 0) {
   2226a:	2300      	movs	r3, #0
   2226c:	930e      	str	r3, [sp, #56]	; 0x38
   2226e:	f8cd 303b 	str.w	r3, [sp, #59]	; 0x3b
   22272:	f104 0719 	add.w	r7, r4, #25
   22276:	2206      	movs	r2, #6
   22278:	4639      	mov	r1, r7
   2227a:	f10d 0039 	add.w	r0, sp, #57	; 0x39
   2227e:	f7f8 fcd5 	bl	1ac2c <memcmp>
   22282:	2800      	cmp	r0, #0
   22284:	d14a      	bne.n	2231c <ble_gap_rx_conn_complete+0x1a0>
        if (BLE_ADDR_IS_RPA(&conn->bhc_peer_addr)) {
   22286:	2e01      	cmp	r6, #1
   22288:	d038      	beq.n	222fc <ble_gap_rx_conn_complete+0x180>
    ble_hs_lock();
   2228a:	f004 f955 	bl	26538 <ble_hs_lock>
    memset(&event, 0, sizeof event);
   2228e:	2234      	movs	r2, #52	; 0x34
   22290:	2100      	movs	r1, #0
   22292:	a801      	add	r0, sp, #4
   22294:	f7f8 fd13 	bl	1acbe <memset>
    ble_hs_conn_insert(conn);
   22298:	4628      	mov	r0, r5
   2229a:	f005 f9dd 	bl	27658 <ble_hs_conn_insert>
    ble_hs_unlock();
   2229e:	f004 f94f 	bl	26540 <ble_hs_unlock>
    event.type = BLE_GAP_EVENT_CONNECT;
   222a2:	2500      	movs	r5, #0
   222a4:	f88d 5004 	strb.w	r5, [sp, #4]
    event.connect.conn_handle = evt->connection_handle;
   222a8:	8863      	ldrh	r3, [r4, #2]
   222aa:	f8ad 300c 	strh.w	r3, [sp, #12]
    event.connect.status = 0;
   222ae:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
   222b0:	a801      	add	r0, sp, #4
   222b2:	f7fe ff65 	bl	21180 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, evt->connection_handle);
   222b6:	8861      	ldrh	r1, [r4, #2]
   222b8:	a801      	add	r0, sp, #4
   222ba:	f7fe ff8b 	bl	211d4 <ble_gap_call_conn_event_cb>
    ble_gap_rd_rem_sup_feat_tx(evt->connection_handle);
   222be:	8860      	ldrh	r0, [r4, #2]
   222c0:	f7ff f805 	bl	212ce <ble_gap_rd_rem_sup_feat_tx>
    return 0;
   222c4:	4628      	mov	r0, r5
   222c6:	e769      	b.n	2219c <ble_gap_rx_conn_complete+0x20>
        rc = ble_gap_accept_master_conn();
   222c8:	f7fe fea0 	bl	2100c <ble_gap_accept_master_conn>
        if (rc != 0) {
   222cc:	2800      	cmp	r0, #0
   222ce:	d099      	beq.n	22204 <ble_gap_rx_conn_complete+0x88>
   222d0:	e764      	b.n	2219c <ble_gap_rx_conn_complete+0x20>
        rc = ble_gap_accept_slave_conn(instance);
   222d2:	4630      	mov	r0, r6
   222d4:	f7fe feaa 	bl	2102c <ble_gap_accept_slave_conn>
        if (rc != 0) {
   222d8:	2800      	cmp	r0, #0
   222da:	d093      	beq.n	22204 <ble_gap_rx_conn_complete+0x88>
   222dc:	e75e      	b.n	2219c <ble_gap_rx_conn_complete+0x20>
        conn->bhc_cb = ble_gap_slave[instance].cb;
   222de:	4b14      	ldr	r3, [pc, #80]	; (22330 <ble_gap_rx_conn_complete+0x1b4>)
   222e0:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   222e4:	69da      	ldr	r2, [r3, #28]
   222e6:	65c2      	str	r2, [r0, #92]	; 0x5c
        conn->bhc_cb_arg = ble_gap_slave[instance].cb_arg;
   222e8:	6a1a      	ldr	r2, [r3, #32]
   222ea:	6602      	str	r2, [r0, #96]	; 0x60
        conn->bhc_our_addr_type = ble_gap_slave[instance].our_addr_type;
   222ec:	7d5b      	ldrb	r3, [r3, #21]
   222ee:	f3c3 0301 	ubfx	r3, r3, #0, #2
   222f2:	7183      	strb	r3, [r0, #6]
        ble_gap_slave_reset_state(instance);
   222f4:	4630      	mov	r0, r6
   222f6:	f7ff f979 	bl	215ec <ble_gap_slave_reset_state>
   222fa:	e7a4      	b.n	22246 <ble_gap_rx_conn_complete+0xca>
        if (BLE_ADDR_IS_RPA(&conn->bhc_peer_addr)) {
   222fc:	7b6b      	ldrb	r3, [r5, #13]
   222fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   22302:	2b40      	cmp	r3, #64	; 0x40
   22304:	d1c1      	bne.n	2228a <ble_gap_rx_conn_complete+0x10e>
            conn->bhc_peer_rpa_addr = conn->bhc_peer_addr;
   22306:	462b      	mov	r3, r5
   22308:	f853 2f07 	ldr.w	r2, [r3, #7]!
   2230c:	f8c5 2015 	str.w	r2, [r5, #21]
   22310:	889a      	ldrh	r2, [r3, #4]
   22312:	799b      	ldrb	r3, [r3, #6]
   22314:	f8a5 2019 	strh.w	r2, [r5, #25]
   22318:	76eb      	strb	r3, [r5, #27]
   2231a:	e7b6      	b.n	2228a <ble_gap_rx_conn_complete+0x10e>
        conn->bhc_peer_rpa_addr.type = BLE_ADDR_RANDOM;
   2231c:	2301      	movs	r3, #1
   2231e:	756b      	strb	r3, [r5, #21]
        memcpy(conn->bhc_peer_rpa_addr.val, evt->peer_rpa, 6);
   22320:	683b      	ldr	r3, [r7, #0]
   22322:	f8c5 3016 	str.w	r3, [r5, #22]
   22326:	88bb      	ldrh	r3, [r7, #4]
   22328:	836b      	strh	r3, [r5, #26]
   2232a:	e7ae      	b.n	2228a <ble_gap_rx_conn_complete+0x10e>
   2232c:	10005a04 	.word	0x10005a04
   22330:	10005ac4 	.word	0x10005ac4
   22334:	00034768 	.word	0x00034768

00022338 <ble_gap_adv_stop_no_lock>:
{
   22338:	b538      	push	{r3, r4, r5, lr}
    STATS_INC(ble_gap_stats, adv_stop);
   2233a:	4a0e      	ldr	r2, [pc, #56]	; (22374 <ble_gap_adv_stop_no_lock+0x3c>)
   2233c:	6953      	ldr	r3, [r2, #20]
   2233e:	3301      	adds	r3, #1
   22340:	6153      	str	r3, [r2, #20]
    active = ble_gap_adv_active();
   22342:	f7ff ff15 	bl	22170 <ble_gap_adv_active>
   22346:	4604      	mov	r4, r0
    BLE_HS_LOG(INFO, "GAP procedure initiated: stop advertising.\n");
   22348:	4a0b      	ldr	r2, [pc, #44]	; (22378 <ble_gap_adv_stop_no_lock+0x40>)
   2234a:	2101      	movs	r1, #1
   2234c:	2004      	movs	r0, #4
   2234e:	f7fa fce5 	bl	1cd1c <modlog_printf>
    rc = ble_gap_adv_enable_tx(0);
   22352:	2000      	movs	r0, #0
   22354:	f7fe fff4 	bl	21340 <ble_gap_adv_enable_tx>
    if (rc != 0) {
   22358:	4605      	mov	r5, r0
   2235a:	b128      	cbz	r0, 22368 <ble_gap_adv_stop_no_lock+0x30>
        STATS_INC(ble_gap_stats, adv_stop_fail);
   2235c:	4a05      	ldr	r2, [pc, #20]	; (22374 <ble_gap_adv_stop_no_lock+0x3c>)
   2235e:	6993      	ldr	r3, [r2, #24]
   22360:	3301      	adds	r3, #1
   22362:	6193      	str	r3, [r2, #24]
}
   22364:	4628      	mov	r0, r5
   22366:	bd38      	pop	{r3, r4, r5, pc}
    ble_gap_slave_reset_state(0);
   22368:	f7ff f940 	bl	215ec <ble_gap_slave_reset_state>
    if (!active) {
   2236c:	2c00      	cmp	r4, #0
   2236e:	d1f9      	bne.n	22364 <ble_gap_adv_stop_no_lock+0x2c>
        rc = BLE_HS_EALREADY;
   22370:	2502      	movs	r5, #2
   22372:	e7f3      	b.n	2235c <ble_gap_adv_stop_no_lock+0x24>
   22374:	10005a04 	.word	0x10005a04
   22378:	000347ac 	.word	0x000347ac

0002237c <ble_gap_adv_stop>:
{
   2237c:	b510      	push	{r4, lr}
    ble_hs_lock();
   2237e:	f004 f8db 	bl	26538 <ble_hs_lock>
    rc = ble_gap_adv_stop_no_lock();
   22382:	f7ff ffd9 	bl	22338 <ble_gap_adv_stop_no_lock>
   22386:	4604      	mov	r4, r0
    ble_hs_unlock();
   22388:	f004 f8da 	bl	26540 <ble_hs_unlock>
}
   2238c:	4620      	mov	r0, r4
   2238e:	bd10      	pop	{r4, pc}

00022390 <ble_gap_disc_active>:
    return ble_gap_master.op == BLE_GAP_OP_M_DISC;
   22390:	4b03      	ldr	r3, [pc, #12]	; (223a0 <ble_gap_disc_active+0x10>)
   22392:	7818      	ldrb	r0, [r3, #0]
}
   22394:	2801      	cmp	r0, #1
   22396:	bf14      	ite	ne
   22398:	2000      	movne	r0, #0
   2239a:	2001      	moveq	r0, #1
   2239c:	4770      	bx	lr
   2239e:	bf00      	nop
   223a0:	10005ac4 	.word	0x10005ac4

000223a4 <ble_gap_disc_cancel_no_lock>:
{
   223a4:	b510      	push	{r4, lr}
    STATS_INC(ble_gap_stats, discover_cancel);
   223a6:	4a0c      	ldr	r2, [pc, #48]	; (223d8 <ble_gap_disc_cancel_no_lock+0x34>)
   223a8:	6f93      	ldr	r3, [r2, #120]	; 0x78
   223aa:	3301      	adds	r3, #1
   223ac:	6793      	str	r3, [r2, #120]	; 0x78
    if (!ble_gap_disc_active()) {
   223ae:	f7ff ffef 	bl	22390 <ble_gap_disc_active>
   223b2:	b930      	cbnz	r0, 223c2 <ble_gap_disc_cancel_no_lock+0x1e>
        rc = BLE_HS_EALREADY;
   223b4:	2402      	movs	r4, #2
        STATS_INC(ble_gap_stats, discover_cancel_fail);
   223b6:	4a08      	ldr	r2, [pc, #32]	; (223d8 <ble_gap_disc_cancel_no_lock+0x34>)
   223b8:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   223ba:	3301      	adds	r3, #1
   223bc:	67d3      	str	r3, [r2, #124]	; 0x7c
}
   223be:	4620      	mov	r0, r4
   223c0:	bd10      	pop	{r4, pc}
    rc = ble_gap_disc_disable_tx();
   223c2:	f7fe ffb7 	bl	21334 <ble_gap_disc_disable_tx>
    if (rc != 0) {
   223c6:	4604      	mov	r4, r0
   223c8:	b110      	cbz	r0, 223d0 <ble_gap_disc_cancel_no_lock+0x2c>
    if (rc != 0) {
   223ca:	2c00      	cmp	r4, #0
   223cc:	d0f7      	beq.n	223be <ble_gap_disc_cancel_no_lock+0x1a>
   223ce:	e7f2      	b.n	223b6 <ble_gap_disc_cancel_no_lock+0x12>
    ble_gap_master_reset_state();
   223d0:	f7ff f94e 	bl	21670 <ble_gap_master_reset_state>
   223d4:	e7f9      	b.n	223ca <ble_gap_disc_cancel_no_lock+0x26>
   223d6:	bf00      	nop
   223d8:	10005a04 	.word	0x10005a04

000223dc <ble_gap_disc_cancel>:
{
   223dc:	b510      	push	{r4, lr}
    ble_hs_lock();
   223de:	f004 f8ab 	bl	26538 <ble_hs_lock>
    rc = ble_gap_disc_cancel_no_lock();
   223e2:	f7ff ffdf 	bl	223a4 <ble_gap_disc_cancel_no_lock>
   223e6:	4604      	mov	r4, r0
    ble_hs_unlock();
   223e8:	f004 f8aa 	bl	26540 <ble_hs_unlock>
}
   223ec:	4620      	mov	r0, r4
   223ee:	bd10      	pop	{r4, pc}

000223f0 <ble_gap_conn_active>:
    return ble_gap_master.op == BLE_GAP_OP_M_CONN;
   223f0:	4b03      	ldr	r3, [pc, #12]	; (22400 <ble_gap_conn_active+0x10>)
   223f2:	7818      	ldrb	r0, [r3, #0]
}
   223f4:	2802      	cmp	r0, #2
   223f6:	bf14      	ite	ne
   223f8:	2000      	movne	r0, #0
   223fa:	2001      	moveq	r0, #1
   223fc:	4770      	bx	lr
   223fe:	bf00      	nop
   22400:	10005ac4 	.word	0x10005ac4

00022404 <ble_gap_disc_ext_validate>:
{
   22404:	b510      	push	{r4, lr}
    if (own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) {
   22406:	2803      	cmp	r0, #3
   22408:	d80e      	bhi.n	22428 <ble_gap_disc_ext_validate+0x24>
    if (ble_gap_conn_active()) {
   2240a:	f7ff fff1 	bl	223f0 <ble_gap_conn_active>
   2240e:	b968      	cbnz	r0, 2242c <ble_gap_disc_ext_validate+0x28>
    if (ble_gap_disc_active()) {
   22410:	f7ff ffbe 	bl	22390 <ble_gap_disc_active>
   22414:	4604      	mov	r4, r0
   22416:	b958      	cbnz	r0, 22430 <ble_gap_disc_ext_validate+0x2c>
    if (!ble_hs_is_enabled()) {
   22418:	f004 f8c6 	bl	265a8 <ble_hs_is_enabled>
   2241c:	b150      	cbz	r0, 22434 <ble_gap_disc_ext_validate+0x30>
    if (ble_gap_is_preempted()) {
   2241e:	f7fe fdc1 	bl	20fa4 <ble_gap_is_preempted>
   22422:	b948      	cbnz	r0, 22438 <ble_gap_disc_ext_validate+0x34>
}
   22424:	4620      	mov	r0, r4
   22426:	bd10      	pop	{r4, pc}
        return BLE_HS_EINVAL;
   22428:	2403      	movs	r4, #3
   2242a:	e7fb      	b.n	22424 <ble_gap_disc_ext_validate+0x20>
        return BLE_HS_EBUSY;
   2242c:	240f      	movs	r4, #15
   2242e:	e7f9      	b.n	22424 <ble_gap_disc_ext_validate+0x20>
        return BLE_HS_EALREADY;
   22430:	2402      	movs	r4, #2
   22432:	e7f7      	b.n	22424 <ble_gap_disc_ext_validate+0x20>
        return BLE_HS_EDISABLED;
   22434:	241e      	movs	r4, #30
   22436:	e7f5      	b.n	22424 <ble_gap_disc_ext_validate+0x20>
        return BLE_HS_EPREEMPTED;
   22438:	241d      	movs	r4, #29
   2243a:	e7f3      	b.n	22424 <ble_gap_disc_ext_validate+0x20>

0002243c <ble_gap_disc_validate>:
    if (disc_params == NULL) {
   2243c:	b1b1      	cbz	r1, 2246c <ble_gap_disc_validate+0x30>
{
   2243e:	b510      	push	{r4, lr}
   22440:	460a      	mov	r2, r1
    if ((disc_params->itvl < BLE_HCI_SCAN_ITVL_MIN) ||
   22442:	8809      	ldrh	r1, [r1, #0]
   22444:	1f0b      	subs	r3, r1, #4
   22446:	b29b      	uxth	r3, r3
   22448:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   2244c:	42a3      	cmp	r3, r4
   2244e:	d80f      	bhi.n	22470 <ble_gap_disc_validate+0x34>
        (disc_params->window < BLE_HCI_SCAN_WINDOW_MIN) ||
   22450:	8853      	ldrh	r3, [r2, #2]
        (disc_params->itvl > BLE_HCI_SCAN_ITVL_MAX) ||
   22452:	2b03      	cmp	r3, #3
   22454:	d90e      	bls.n	22474 <ble_gap_disc_validate+0x38>
        (disc_params->window < BLE_HCI_SCAN_WINDOW_MIN) ||
   22456:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   2245a:	d80d      	bhi.n	22478 <ble_gap_disc_validate+0x3c>
        (disc_params->window > BLE_HCI_SCAN_WINDOW_MAX) ||
   2245c:	4299      	cmp	r1, r3
   2245e:	d30d      	bcc.n	2247c <ble_gap_disc_validate+0x40>
    if (disc_params->filter_policy > BLE_HCI_SCAN_FILT_MAX) {
   22460:	7913      	ldrb	r3, [r2, #4]
   22462:	2b03      	cmp	r3, #3
   22464:	d80c      	bhi.n	22480 <ble_gap_disc_validate+0x44>
    return ble_gap_disc_ext_validate(own_addr_type);
   22466:	f7ff ffcd 	bl	22404 <ble_gap_disc_ext_validate>
}
   2246a:	bd10      	pop	{r4, pc}
        return BLE_HS_EINVAL;
   2246c:	2003      	movs	r0, #3
}
   2246e:	4770      	bx	lr
        return BLE_HS_EINVAL;
   22470:	2003      	movs	r0, #3
   22472:	e7fa      	b.n	2246a <ble_gap_disc_validate+0x2e>
   22474:	2003      	movs	r0, #3
   22476:	e7f8      	b.n	2246a <ble_gap_disc_validate+0x2e>
   22478:	2003      	movs	r0, #3
   2247a:	e7f6      	b.n	2246a <ble_gap_disc_validate+0x2e>
   2247c:	2003      	movs	r0, #3
   2247e:	e7f4      	b.n	2246a <ble_gap_disc_validate+0x2e>
        return BLE_HS_EINVAL;
   22480:	2003      	movs	r0, #3
   22482:	e7f2      	b.n	2246a <ble_gap_disc_validate+0x2e>

00022484 <ble_gap_disc>:
{
   22484:	b5f0      	push	{r4, r5, r6, r7, lr}
   22486:	b085      	sub	sp, #20
   22488:	4605      	mov	r5, r0
   2248a:	460c      	mov	r4, r1
   2248c:	4616      	mov	r6, r2
   2248e:	461f      	mov	r7, r3
    uint32_t duration_ticks = 0;
   22490:	2300      	movs	r3, #0
   22492:	9301      	str	r3, [sp, #4]
    STATS_INC(ble_gap_stats, discover);
   22494:	4b3a      	ldr	r3, [pc, #232]	; (22580 <ble_gap_disc+0xfc>)
   22496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   22498:	3201      	adds	r2, #1
   2249a:	635a      	str	r2, [r3, #52]	; 0x34
    ble_hs_lock();
   2249c:	f004 f84c 	bl	26538 <ble_hs_lock>
    params = *disc_params;
   224a0:	6830      	ldr	r0, [r6, #0]
   224a2:	9002      	str	r0, [sp, #8]
   224a4:	88b3      	ldrh	r3, [r6, #4]
   224a6:	f8ad 300c 	strh.w	r3, [sp, #12]
    ble_gap_disc_fill_dflts(&params);
   224aa:	a802      	add	r0, sp, #8
   224ac:	f7fe fe1b 	bl	210e6 <ble_gap_disc_fill_dflts>
    rc = ble_gap_disc_validate(own_addr_type, &params);
   224b0:	a902      	add	r1, sp, #8
   224b2:	4628      	mov	r0, r5
   224b4:	f7ff ffc2 	bl	2243c <ble_gap_disc_validate>
    if (rc != 0) {
   224b8:	4606      	mov	r6, r0
   224ba:	2800      	cmp	r0, #0
   224bc:	d135      	bne.n	2252a <ble_gap_disc+0xa6>
    if (duration_ms == 0) {
   224be:	2c00      	cmp	r4, #0
   224c0:	d03d      	beq.n	2253e <ble_gap_disc+0xba>
    if (duration_ms != BLE_HS_FOREVER) {
   224c2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   224c6:	429c      	cmp	r4, r3
   224c8:	d006      	beq.n	224d8 <ble_gap_disc+0x54>
   224ca:	a901      	add	r1, sp, #4
   224cc:	4620      	mov	r0, r4
   224ce:	f7f8 f9d8 	bl	1a882 <os_time_ms_to_ticks>
        if (rc != 0) {
   224d2:	f010 0fff 	tst.w	r0, #255	; 0xff
   224d6:	d135      	bne.n	22544 <ble_gap_disc+0xc0>
    if (!params.passive) {
   224d8:	f89d 300d 	ldrb.w	r3, [sp, #13]
   224dc:	f013 0f02 	tst.w	r3, #2
   224e0:	d104      	bne.n	224ec <ble_gap_disc+0x68>
        rc = ble_hs_id_use_addr(own_addr_type);
   224e2:	4628      	mov	r0, r5
   224e4:	f005 ffcb 	bl	2847e <ble_hs_id_use_addr>
        if (rc != 0) {
   224e8:	4606      	mov	r6, r0
   224ea:	b9f0      	cbnz	r0, 2252a <ble_gap_disc+0xa6>
    ble_gap_master.disc.limited = params.limited;
   224ec:	f89d 100d 	ldrb.w	r1, [sp, #13]
   224f0:	4b24      	ldr	r3, [pc, #144]	; (22584 <ble_gap_disc+0x100>)
   224f2:	7c5a      	ldrb	r2, [r3, #17]
   224f4:	f361 0200 	bfi	r2, r1, #0, #1
   224f8:	745a      	strb	r2, [r3, #17]
    ble_gap_master.cb = cb;
   224fa:	609f      	str	r7, [r3, #8]
    ble_gap_master.cb_arg = cb_arg;
   224fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   224fe:	60da      	str	r2, [r3, #12]
    BLE_HS_LOG(INFO, "GAP procedure initiated: discovery; ");
   22500:	4a21      	ldr	r2, [pc, #132]	; (22588 <ble_gap_disc+0x104>)
   22502:	2101      	movs	r1, #1
   22504:	2004      	movs	r0, #4
   22506:	f7fa fc09 	bl	1cd1c <modlog_printf>
    ble_gap_log_disc(own_addr_type, duration_ms, &params);
   2250a:	aa02      	add	r2, sp, #8
   2250c:	4621      	mov	r1, r4
   2250e:	4628      	mov	r0, r5
   22510:	f7ff fb04 	bl	21b1c <ble_gap_log_disc>
    BLE_HS_LOG(INFO, "\n");
   22514:	4a1d      	ldr	r2, [pc, #116]	; (2258c <ble_gap_disc+0x108>)
   22516:	2101      	movs	r1, #1
   22518:	2004      	movs	r0, #4
   2251a:	f7fa fbff 	bl	1cd1c <modlog_printf>
    rc = ble_gap_disc_tx_params(own_addr_type, &params);
   2251e:	a902      	add	r1, sp, #8
   22520:	4628      	mov	r0, r5
   22522:	f7fe ff93 	bl	2144c <ble_gap_disc_tx_params>
    if (rc != 0) {
   22526:	4606      	mov	r6, r0
   22528:	b180      	cbz	r0, 2254c <ble_gap_disc+0xc8>
    ble_hs_unlock();
   2252a:	f004 f809 	bl	26540 <ble_hs_unlock>
    if (rc != 0) {
   2252e:	b11e      	cbz	r6, 22538 <ble_gap_disc+0xb4>
        STATS_INC(ble_gap_stats, discover_fail);
   22530:	4a13      	ldr	r2, [pc, #76]	; (22580 <ble_gap_disc+0xfc>)
   22532:	6b93      	ldr	r3, [r2, #56]	; 0x38
   22534:	3301      	adds	r3, #1
   22536:	6393      	str	r3, [r2, #56]	; 0x38
}
   22538:	4630      	mov	r0, r6
   2253a:	b005      	add	sp, #20
   2253c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        duration_ms = BLE_GAP_DISC_DUR_DFLT;
   2253e:	f44f 5420 	mov.w	r4, #10240	; 0x2800
   22542:	e7c2      	b.n	224ca <ble_gap_disc+0x46>
    ble_hs_unlock();
   22544:	f003 fffc 	bl	26540 <ble_hs_unlock>
            rc = BLE_HS_EINVAL;
   22548:	2603      	movs	r6, #3
   2254a:	e7f1      	b.n	22530 <ble_gap_disc+0xac>
    ble_gap_master.op = BLE_GAP_OP_M_DISC;
   2254c:	2001      	movs	r0, #1
   2254e:	4b0d      	ldr	r3, [pc, #52]	; (22584 <ble_gap_disc+0x100>)
   22550:	7018      	strb	r0, [r3, #0]
    rc = ble_gap_disc_enable_tx(1, params.filter_duplicates);
   22552:	f89d 100d 	ldrb.w	r1, [sp, #13]
   22556:	f3c1 0180 	ubfx	r1, r1, #2, #1
   2255a:	f7fe fed4 	bl	21306 <ble_gap_disc_enable_tx>
    if (rc != 0) {
   2255e:	4606      	mov	r6, r0
   22560:	b930      	cbnz	r0, 22570 <ble_gap_disc+0xec>
    if (duration_ms != BLE_HS_FOREVER) {
   22562:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   22566:	429c      	cmp	r4, r3
   22568:	d105      	bne.n	22576 <ble_gap_disc+0xf2>
    ble_hs_unlock();
   2256a:	f003 ffe9 	bl	26540 <ble_hs_unlock>
    if (rc != 0) {
   2256e:	e7e3      	b.n	22538 <ble_gap_disc+0xb4>
        ble_gap_master_reset_state();
   22570:	f7ff f87e 	bl	21670 <ble_gap_master_reset_state>
        goto done;
   22574:	e7d9      	b.n	2252a <ble_gap_disc+0xa6>
        ble_gap_master_set_timer(duration_ticks);
   22576:	9801      	ldr	r0, [sp, #4]
   22578:	f7ff fa08 	bl	2198c <ble_gap_master_set_timer>
   2257c:	e7f5      	b.n	2256a <ble_gap_disc+0xe6>
   2257e:	bf00      	nop
   22580:	10005a04 	.word	0x10005a04
   22584:	10005ac4 	.word	0x10005ac4
   22588:	000347d8 	.word	0x000347d8
   2258c:	0002ff28 	.word	0x0002ff28

00022590 <ble_gap_connect>:
{
   22590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22594:	b082      	sub	sp, #8
   22596:	4680      	mov	r8, r0
   22598:	460d      	mov	r5, r1
   2259a:	4616      	mov	r6, r2
   2259c:	461f      	mov	r7, r3
    STATS_INC(ble_gap_stats, initiate);
   2259e:	4b4c      	ldr	r3, [pc, #304]	; (226d0 <ble_gap_connect+0x140>)
   225a0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   225a2:	3401      	adds	r4, #1
   225a4:	63dc      	str	r4, [r3, #60]	; 0x3c
    ble_hs_lock();
   225a6:	f003 ffc7 	bl	26538 <ble_hs_lock>
    if (ble_gap_conn_active()) {
   225aa:	f7ff ff21 	bl	223f0 <ble_gap_conn_active>
   225ae:	bb48      	cbnz	r0, 22604 <ble_gap_connect+0x74>
    if (ble_gap_disc_active()) {
   225b0:	f7ff feee 	bl	22390 <ble_gap_disc_active>
   225b4:	bb50      	cbnz	r0, 2260c <ble_gap_connect+0x7c>
    if (!ble_hs_is_enabled()) {
   225b6:	f003 fff7 	bl	265a8 <ble_hs_is_enabled>
   225ba:	b390      	cbz	r0, 22622 <ble_gap_connect+0x92>
    if (ble_gap_is_preempted()) {
   225bc:	f7fe fcf2 	bl	20fa4 <ble_gap_is_preempted>
   225c0:	bb98      	cbnz	r0, 2262a <ble_gap_connect+0x9a>
    if (!ble_hs_conn_can_alloc()) {
   225c2:	f004 ff61 	bl	27488 <ble_hs_conn_can_alloc>
   225c6:	b3a0      	cbz	r0, 22632 <ble_gap_connect+0xa2>
    if (peer_addr &&
   225c8:	b13d      	cbz	r5, 225da <ble_gap_connect+0x4a>
        peer_addr->type != BLE_ADDR_PUBLIC &&
   225ca:	782b      	ldrb	r3, [r5, #0]
    if (peer_addr &&
   225cc:	b12b      	cbz	r3, 225da <ble_gap_connect+0x4a>
        peer_addr->type != BLE_ADDR_PUBLIC &&
   225ce:	2b01      	cmp	r3, #1
   225d0:	d003      	beq.n	225da <ble_gap_connect+0x4a>
        peer_addr->type != BLE_ADDR_RANDOM &&
   225d2:	2b02      	cmp	r3, #2
   225d4:	d001      	beq.n	225da <ble_gap_connect+0x4a>
        peer_addr->type != BLE_ADDR_PUBLIC_ID &&
   225d6:	2b03      	cmp	r3, #3
   225d8:	d12f      	bne.n	2263a <ble_gap_connect+0xaa>
    if (conn_params == NULL) {
   225da:	b397      	cbz	r7, 22642 <ble_gap_connect+0xb2>
    if (duration_ms == 0) {
   225dc:	b39e      	cbz	r6, 22646 <ble_gap_connect+0xb6>
    if (duration_ms != BLE_HS_FOREVER) {
   225de:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   225e2:	429e      	cmp	r6, r3
   225e4:	d006      	beq.n	225f4 <ble_gap_connect+0x64>
   225e6:	a901      	add	r1, sp, #4
   225e8:	4630      	mov	r0, r6
   225ea:	f7f8 f94a 	bl	1a882 <os_time_ms_to_ticks>
        if (rc != 0) {
   225ee:	f010 0fff 	tst.w	r0, #255	; 0xff
   225f2:	d12b      	bne.n	2264c <ble_gap_connect+0xbc>
    if (ble_hs_conn_find_by_addr(peer_addr) != NULL) {
   225f4:	4628      	mov	r0, r5
   225f6:	f005 f8bf 	bl	27778 <ble_hs_conn_find_by_addr>
   225fa:	b358      	cbz	r0, 22654 <ble_gap_connect+0xc4>
    ble_hs_unlock();
   225fc:	f003 ffa0 	bl	26540 <ble_hs_unlock>
        rc = BLE_HS_EDONE;
   22600:	240e      	movs	r4, #14
   22602:	e006      	b.n	22612 <ble_gap_connect+0x82>
    ble_hs_unlock();
   22604:	f003 ff9c 	bl	26540 <ble_hs_unlock>
        rc = BLE_HS_EALREADY;
   22608:	2402      	movs	r4, #2
   2260a:	e002      	b.n	22612 <ble_gap_connect+0x82>
    ble_hs_unlock();
   2260c:	f003 ff98 	bl	26540 <ble_hs_unlock>
        rc = BLE_HS_EBUSY;
   22610:	240f      	movs	r4, #15
        STATS_INC(ble_gap_stats, initiate_fail);
   22612:	4a2f      	ldr	r2, [pc, #188]	; (226d0 <ble_gap_connect+0x140>)
   22614:	6c13      	ldr	r3, [r2, #64]	; 0x40
   22616:	3301      	adds	r3, #1
   22618:	6413      	str	r3, [r2, #64]	; 0x40
}
   2261a:	4620      	mov	r0, r4
   2261c:	b002      	add	sp, #8
   2261e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_unlock();
   22622:	f003 ff8d 	bl	26540 <ble_hs_unlock>
        rc = BLE_HS_EDISABLED;
   22626:	241e      	movs	r4, #30
   22628:	e7f3      	b.n	22612 <ble_gap_connect+0x82>
    ble_hs_unlock();
   2262a:	f003 ff89 	bl	26540 <ble_hs_unlock>
        rc = BLE_HS_EPREEMPTED;
   2262e:	241d      	movs	r4, #29
   22630:	e7ef      	b.n	22612 <ble_gap_connect+0x82>
    ble_hs_unlock();
   22632:	f003 ff85 	bl	26540 <ble_hs_unlock>
        rc = BLE_HS_ENOMEM;
   22636:	2406      	movs	r4, #6
   22638:	e7eb      	b.n	22612 <ble_gap_connect+0x82>
    ble_hs_unlock();
   2263a:	f003 ff81 	bl	26540 <ble_hs_unlock>
        rc = BLE_HS_EINVAL;
   2263e:	2403      	movs	r4, #3
   22640:	e7e7      	b.n	22612 <ble_gap_connect+0x82>
        conn_params = &ble_gap_conn_params_dflt;
   22642:	4f24      	ldr	r7, [pc, #144]	; (226d4 <ble_gap_connect+0x144>)
   22644:	e7ca      	b.n	225dc <ble_gap_connect+0x4c>
        duration_ms = BLE_GAP_CONN_DUR_DFLT;
   22646:	f247 5630 	movw	r6, #30000	; 0x7530
   2264a:	e7cc      	b.n	225e6 <ble_gap_connect+0x56>
    ble_hs_unlock();
   2264c:	f003 ff78 	bl	26540 <ble_hs_unlock>
            rc = BLE_HS_EINVAL;
   22650:	2403      	movs	r4, #3
   22652:	e7de      	b.n	22612 <ble_gap_connect+0x82>
    rc = ble_hs_id_use_addr(own_addr_type);
   22654:	4640      	mov	r0, r8
   22656:	f005 ff12 	bl	2847e <ble_hs_id_use_addr>
    if (rc != 0) {
   2265a:	4604      	mov	r4, r0
   2265c:	b120      	cbz	r0, 22668 <ble_gap_connect+0xd8>
    ble_hs_unlock();
   2265e:	f003 ff6f 	bl	26540 <ble_hs_unlock>
    if (rc != 0) {
   22662:	2c00      	cmp	r4, #0
   22664:	d0d9      	beq.n	2261a <ble_gap_connect+0x8a>
   22666:	e7d4      	b.n	22612 <ble_gap_connect+0x82>
    BLE_HS_LOG(INFO, "GAP procedure initiated: connect; ");
   22668:	4a1b      	ldr	r2, [pc, #108]	; (226d8 <ble_gap_connect+0x148>)
   2266a:	2101      	movs	r1, #1
   2266c:	2004      	movs	r0, #4
   2266e:	f7fa fb55 	bl	1cd1c <modlog_printf>
    ble_gap_log_conn(own_addr_type, peer_addr, conn_params);
   22672:	463a      	mov	r2, r7
   22674:	4629      	mov	r1, r5
   22676:	4640      	mov	r0, r8
   22678:	f7ff fa6c 	bl	21b54 <ble_gap_log_conn>
    BLE_HS_LOG(INFO, "\n");
   2267c:	4a17      	ldr	r2, [pc, #92]	; (226dc <ble_gap_connect+0x14c>)
   2267e:	2101      	movs	r1, #1
   22680:	2004      	movs	r0, #4
   22682:	f7fa fb4b 	bl	1cd1c <modlog_printf>
    ble_gap_master.cb = cb;
   22686:	4b16      	ldr	r3, [pc, #88]	; (226e0 <ble_gap_connect+0x150>)
   22688:	9a08      	ldr	r2, [sp, #32]
   2268a:	609a      	str	r2, [r3, #8]
    ble_gap_master.cb_arg = cb_arg;
   2268c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2268e:	60da      	str	r2, [r3, #12]
    ble_gap_master.conn.using_wl = peer_addr == NULL;
   22690:	fab5 f185 	clz	r1, r5
   22694:	0949      	lsrs	r1, r1, #5
   22696:	7c5a      	ldrb	r2, [r3, #17]
   22698:	f361 0200 	bfi	r2, r1, #0, #1
    ble_gap_master.conn.our_addr_type = own_addr_type;
   2269c:	f368 0242 	bfi	r2, r8, #1, #2
   226a0:	745a      	strb	r2, [r3, #17]
    ble_gap_master.op = BLE_GAP_OP_M_CONN;
   226a2:	2202      	movs	r2, #2
   226a4:	701a      	strb	r2, [r3, #0]
    rc = ble_gap_conn_create_tx(own_addr_type, peer_addr,
   226a6:	463a      	mov	r2, r7
   226a8:	4629      	mov	r1, r5
   226aa:	4640      	mov	r0, r8
   226ac:	f7fe ff44 	bl	21538 <ble_gap_conn_create_tx>
    if (rc != 0) {
   226b0:	4604      	mov	r4, r0
   226b2:	b930      	cbnz	r0, 226c2 <ble_gap_connect+0x132>
    if (duration_ms != BLE_HS_FOREVER) {
   226b4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   226b8:	429e      	cmp	r6, r3
   226ba:	d105      	bne.n	226c8 <ble_gap_connect+0x138>
    ble_hs_unlock();
   226bc:	f003 ff40 	bl	26540 <ble_hs_unlock>
    if (rc != 0) {
   226c0:	e7ab      	b.n	2261a <ble_gap_connect+0x8a>
        ble_gap_master_reset_state();
   226c2:	f7fe ffd5 	bl	21670 <ble_gap_master_reset_state>
        goto done;
   226c6:	e7ca      	b.n	2265e <ble_gap_connect+0xce>
        ble_gap_master_set_timer(duration_ticks);
   226c8:	9801      	ldr	r0, [sp, #4]
   226ca:	f7ff f95f 	bl	2198c <ble_gap_master_set_timer>
   226ce:	e7f5      	b.n	226bc <ble_gap_connect+0x12c>
   226d0:	10005a04 	.word	0x10005a04
   226d4:	000348d4 	.word	0x000348d4
   226d8:	00034800 	.word	0x00034800
   226dc:	0002ff28 	.word	0x0002ff28
   226e0:	10005ac4 	.word	0x10005ac4

000226e4 <ble_gap_conn_cancel_no_lock>:
{
   226e4:	b508      	push	{r3, lr}
    STATS_INC(ble_gap_stats, cancel);
   226e6:	4a0e      	ldr	r2, [pc, #56]	; (22720 <ble_gap_conn_cancel_no_lock+0x3c>)
   226e8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   226ea:	3301      	adds	r3, #1
   226ec:	64d3      	str	r3, [r2, #76]	; 0x4c
    if (!ble_gap_conn_active()) {
   226ee:	f7ff fe7f 	bl	223f0 <ble_gap_conn_active>
   226f2:	b928      	cbnz	r0, 22700 <ble_gap_conn_cancel_no_lock+0x1c>
        rc = BLE_HS_EALREADY;
   226f4:	2002      	movs	r0, #2
        STATS_INC(ble_gap_stats, cancel_fail);
   226f6:	4a0a      	ldr	r2, [pc, #40]	; (22720 <ble_gap_conn_cancel_no_lock+0x3c>)
   226f8:	6d13      	ldr	r3, [r2, #80]	; 0x50
   226fa:	3301      	adds	r3, #1
   226fc:	6513      	str	r3, [r2, #80]	; 0x50
}
   226fe:	bd08      	pop	{r3, pc}
    BLE_HS_LOG(INFO, "GAP procedure initiated: cancel connection\n");
   22700:	4a08      	ldr	r2, [pc, #32]	; (22724 <ble_gap_conn_cancel_no_lock+0x40>)
   22702:	2101      	movs	r1, #1
   22704:	2004      	movs	r0, #4
   22706:	f7fa fb09 	bl	1cd1c <modlog_printf>
    rc = ble_gap_conn_cancel_tx();
   2270a:	f7fe fdef 	bl	212ec <ble_gap_conn_cancel_tx>
    if (rc != 0) {
   2270e:	2800      	cmp	r0, #0
   22710:	d1f1      	bne.n	226f6 <ble_gap_conn_cancel_no_lock+0x12>
    ble_gap_master.conn.cancel = 1;
   22712:	4a05      	ldr	r2, [pc, #20]	; (22728 <ble_gap_conn_cancel_no_lock+0x44>)
   22714:	7c53      	ldrb	r3, [r2, #17]
   22716:	f043 0308 	orr.w	r3, r3, #8
   2271a:	7453      	strb	r3, [r2, #17]
    if (rc != 0) {
   2271c:	e7ef      	b.n	226fe <ble_gap_conn_cancel_no_lock+0x1a>
   2271e:	bf00      	nop
   22720:	10005a04 	.word	0x10005a04
   22724:	00034824 	.word	0x00034824
   22728:	10005ac4 	.word	0x10005ac4

0002272c <ble_gap_terminate_with_conn>:
    if (conn->bhc_flags & BLE_HS_CONN_F_TERMINATING) {
   2272c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   22730:	f013 0f02 	tst.w	r3, #2
   22734:	d120      	bne.n	22778 <ble_gap_terminate_with_conn+0x4c>
{
   22736:	b530      	push	{r4, r5, lr}
   22738:	b085      	sub	sp, #20
   2273a:	4604      	mov	r4, r0
   2273c:	460d      	mov	r5, r1
    BLE_HS_LOG(INFO, "GAP procedure initiated: terminate connection; "
   2273e:	9100      	str	r1, [sp, #0]
   22740:	8883      	ldrh	r3, [r0, #4]
   22742:	4a0e      	ldr	r2, [pc, #56]	; (2277c <ble_gap_terminate_with_conn+0x50>)
   22744:	2101      	movs	r1, #1
   22746:	2004      	movs	r0, #4
   22748:	f7fa fae8 	bl	1cd1c <modlog_printf>
    cmd.conn_handle = htole16(conn->bhc_handle);
   2274c:	88a3      	ldrh	r3, [r4, #4]
   2274e:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.reason = hci_reason;
   22752:	f88d 500e 	strb.w	r5, [sp, #14]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LINK_CTRL,
   22756:	2300      	movs	r3, #0
   22758:	9300      	str	r3, [sp, #0]
   2275a:	2203      	movs	r2, #3
   2275c:	a903      	add	r1, sp, #12
   2275e:	f240 4006 	movw	r0, #1030	; 0x406
   22762:	f005 f9bd 	bl	27ae0 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   22766:	b928      	cbnz	r0, 22774 <ble_gap_terminate_with_conn+0x48>
    conn->bhc_flags |= BLE_HS_CONN_F_TERMINATING;
   22768:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   2276c:	f043 0302 	orr.w	r3, r3, #2
   22770:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   22774:	b005      	add	sp, #20
   22776:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EALREADY;
   22778:	2002      	movs	r0, #2
}
   2277a:	4770      	bx	lr
   2277c:	00034850 	.word	0x00034850

00022780 <ble_gap_terminate>:
{
   22780:	b538      	push	{r3, r4, r5, lr}
   22782:	4604      	mov	r4, r0
   22784:	460d      	mov	r5, r1
    STATS_INC(ble_gap_stats, terminate);
   22786:	4a0d      	ldr	r2, [pc, #52]	; (227bc <ble_gap_terminate+0x3c>)
   22788:	6c53      	ldr	r3, [r2, #68]	; 0x44
   2278a:	3301      	adds	r3, #1
   2278c:	6453      	str	r3, [r2, #68]	; 0x44
    ble_hs_lock();
   2278e:	f003 fed3 	bl	26538 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   22792:	4620      	mov	r0, r4
   22794:	f004 ff54 	bl	27640 <ble_hs_conn_find>
    if (conn == NULL) {
   22798:	b160      	cbz	r0, 227b4 <ble_gap_terminate+0x34>
    rc = ble_gap_terminate_with_conn(conn, hci_reason);
   2279a:	4629      	mov	r1, r5
   2279c:	f7ff ffc6 	bl	2272c <ble_gap_terminate_with_conn>
   227a0:	4604      	mov	r4, r0
    ble_hs_unlock();
   227a2:	f003 fecd 	bl	26540 <ble_hs_unlock>
    if (rc != 0) {
   227a6:	b11c      	cbz	r4, 227b0 <ble_gap_terminate+0x30>
        STATS_INC(ble_gap_stats, terminate_fail);
   227a8:	4a04      	ldr	r2, [pc, #16]	; (227bc <ble_gap_terminate+0x3c>)
   227aa:	6c93      	ldr	r3, [r2, #72]	; 0x48
   227ac:	3301      	adds	r3, #1
   227ae:	6493      	str	r3, [r2, #72]	; 0x48
}
   227b0:	4620      	mov	r0, r4
   227b2:	bd38      	pop	{r3, r4, r5, pc}
    ble_hs_unlock();
   227b4:	f003 fec4 	bl	26540 <ble_hs_unlock>
        rc = BLE_HS_ENOTCONN;
   227b8:	2407      	movs	r4, #7
   227ba:	e7f5      	b.n	227a8 <ble_gap_terminate+0x28>
   227bc:	10005a04 	.word	0x10005a04

000227c0 <ble_gap_update_notify>:
{
   227c0:	b530      	push	{r4, r5, lr}
   227c2:	b08f      	sub	sp, #60	; 0x3c
   227c4:	4604      	mov	r4, r0
   227c6:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   227c8:	2234      	movs	r2, #52	; 0x34
   227ca:	2100      	movs	r1, #0
   227cc:	a801      	add	r0, sp, #4
   227ce:	f7f8 fa76 	bl	1acbe <memset>
    event.type = BLE_GAP_EVENT_CONN_UPDATE;
   227d2:	2303      	movs	r3, #3
   227d4:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update.conn_handle = conn_handle;
   227d8:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.conn_update.status = status;
   227dc:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
   227de:	a801      	add	r0, sp, #4
   227e0:	f7fe fcce 	bl	21180 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   227e4:	4621      	mov	r1, r4
   227e6:	a801      	add	r0, sp, #4
   227e8:	f7fe fcf4 	bl	211d4 <ble_gap_call_conn_event_cb>
    if (status == BLE_HS_ETIMEOUT) {
   227ec:	2d0d      	cmp	r5, #13
   227ee:	d001      	beq.n	227f4 <ble_gap_update_notify+0x34>
}
   227f0:	b00f      	add	sp, #60	; 0x3c
   227f2:	bd30      	pop	{r4, r5, pc}
        ble_gap_terminate(conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   227f4:	2113      	movs	r1, #19
   227f6:	4620      	mov	r0, r4
   227f8:	f7ff ffc2 	bl	22780 <ble_gap_terminate>
}
   227fc:	e7f8      	b.n	227f0 <ble_gap_update_notify+0x30>
	...

00022800 <ble_gap_conn_broken>:
{
   22800:	b570      	push	{r4, r5, r6, lr}
   22802:	b090      	sub	sp, #64	; 0x40
   22804:	4604      	mov	r4, r0
   22806:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   22808:	2234      	movs	r2, #52	; 0x34
   2280a:	2100      	movs	r1, #0
   2280c:	4668      	mov	r0, sp
   2280e:	f7f8 fa56 	bl	1acbe <memset>
    snap.desc = &event.disconnect.conn;
   22812:	ab02      	add	r3, sp, #8
   22814:	930d      	str	r3, [sp, #52]	; 0x34
    rc = ble_gap_find_snapshot(conn_handle, &snap);
   22816:	a90d      	add	r1, sp, #52	; 0x34
   22818:	4620      	mov	r0, r4
   2281a:	f7fe fd44 	bl	212a6 <ble_gap_find_snapshot>
    if (rc != 0) {
   2281e:	b108      	cbz	r0, 22824 <ble_gap_conn_broken+0x24>
}
   22820:	b010      	add	sp, #64	; 0x40
   22822:	bd70      	pop	{r4, r5, r6, pc}
    ble_hs_lock();
   22824:	f003 fe88 	bl	26538 <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   22828:	4620      	mov	r0, r4
   2282a:	f7fe fec7 	bl	215bc <ble_gap_update_entry_remove>
   2282e:	4606      	mov	r6, r0
    ble_hs_unlock();
   22830:	f003 fe86 	bl	26540 <ble_hs_unlock>
    if (entry != NULL) {
   22834:	b136      	cbz	r6, 22844 <ble_gap_conn_broken+0x44>
        ble_gap_update_notify(conn_handle, reason);
   22836:	4629      	mov	r1, r5
   22838:	4620      	mov	r0, r4
   2283a:	f7ff ffc1 	bl	227c0 <ble_gap_update_notify>
        ble_gap_update_entry_free(entry);
   2283e:	4630      	mov	r0, r6
   22840:	f7fe ffdc 	bl	217fc <ble_gap_update_entry_free>
    ble_l2cap_sig_conn_broken(conn_handle, reason);
   22844:	4629      	mov	r1, r5
   22846:	4620      	mov	r0, r4
   22848:	f006 fdde 	bl	29408 <ble_l2cap_sig_conn_broken>
    ble_gatts_connection_broken(conn_handle);
   2284c:	4620      	mov	r0, r4
   2284e:	f003 f98d 	bl	25b6c <ble_gatts_connection_broken>
    ble_gattc_connection_broken(conn_handle);
   22852:	4620      	mov	r0, r4
   22854:	f002 fba7 	bl	24fa6 <ble_gattc_connection_broken>
    ble_hs_flow_connection_broken(conn_handle);;
   22858:	4620      	mov	r0, r4
   2285a:	f005 f825 	bl	278a8 <ble_hs_flow_connection_broken>
    ble_hs_atomic_conn_delete(conn_handle);
   2285e:	4620      	mov	r0, r4
   22860:	f004 fdd8 	bl	27414 <ble_hs_atomic_conn_delete>
    event.type = BLE_GAP_EVENT_DISCONNECT;
   22864:	2301      	movs	r3, #1
   22866:	f88d 3000 	strb.w	r3, [sp]
    event.disconnect.reason = reason;
   2286a:	9501      	str	r5, [sp, #4]
    ble_gap_event_listener_call(&event);
   2286c:	4668      	mov	r0, sp
   2286e:	f7fe fc87 	bl	21180 <ble_gap_event_listener_call>
    ble_gap_call_event_cb(&event, snap.cb, snap.cb_arg);
   22872:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   22874:	990e      	ldr	r1, [sp, #56]	; 0x38
   22876:	4668      	mov	r0, sp
   22878:	f7fe fb7f 	bl	20f7a <ble_gap_call_event_cb>
    STATS_INC(ble_gap_stats, disconnect);
   2287c:	4a02      	ldr	r2, [pc, #8]	; (22888 <ble_gap_conn_broken+0x88>)
   2287e:	6e53      	ldr	r3, [r2, #100]	; 0x64
   22880:	3301      	adds	r3, #1
   22882:	6653      	str	r3, [r2, #100]	; 0x64
   22884:	e7cc      	b.n	22820 <ble_gap_conn_broken+0x20>
   22886:	bf00      	nop
   22888:	10005a04 	.word	0x10005a04

0002288c <ble_gap_rx_disconn_complete>:
{
   2288c:	b570      	push	{r4, r5, r6, lr}
   2288e:	b08e      	sub	sp, #56	; 0x38
   22890:	4604      	mov	r4, r0
    uint16_t handle = le16toh(ev->conn_handle);
   22892:	f8b0 5001 	ldrh.w	r5, [r0, #1]
   22896:	b2ae      	uxth	r6, r5
    STATS_INC(ble_gap_stats, rx_disconnect);
   22898:	4a14      	ldr	r2, [pc, #80]	; (228ec <ble_gap_rx_disconn_complete+0x60>)
   2289a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   2289c:	3301      	adds	r3, #1
   2289e:	6693      	str	r3, [r2, #104]	; 0x68
    if (ev->status == 0) {
   228a0:	7803      	ldrb	r3, [r0, #0]
   228a2:	b953      	cbnz	r3, 228ba <ble_gap_rx_disconn_complete+0x2e>
        ble_gap_conn_broken(handle, BLE_HS_HCI_ERR(ev->reason));
   228a4:	78c1      	ldrb	r1, [r0, #3]
   228a6:	b111      	cbz	r1, 228ae <ble_gap_rx_disconn_complete+0x22>
   228a8:	f501 7100 	add.w	r1, r1, #512	; 0x200
   228ac:	e000      	b.n	228b0 <ble_gap_rx_disconn_complete+0x24>
   228ae:	2100      	movs	r1, #0
   228b0:	4630      	mov	r0, r6
   228b2:	f7ff ffa5 	bl	22800 <ble_gap_conn_broken>
}
   228b6:	b00e      	add	sp, #56	; 0x38
   228b8:	bd70      	pop	{r4, r5, r6, pc}
        memset(&event, 0, sizeof event);
   228ba:	2234      	movs	r2, #52	; 0x34
   228bc:	2100      	movs	r1, #0
   228be:	a801      	add	r0, sp, #4
   228c0:	f7f8 f9fd 	bl	1acbe <memset>
        event.type = BLE_GAP_EVENT_TERM_FAILURE;
   228c4:	2306      	movs	r3, #6
   228c6:	f88d 3004 	strb.w	r3, [sp, #4]
        event.term_failure.conn_handle = handle;
   228ca:	f8ad 500c 	strh.w	r5, [sp, #12]
        event.term_failure.status = BLE_HS_HCI_ERR(ev->status);
   228ce:	7823      	ldrb	r3, [r4, #0]
   228d0:	b153      	cbz	r3, 228e8 <ble_gap_rx_disconn_complete+0x5c>
   228d2:	f503 7300 	add.w	r3, r3, #512	; 0x200
   228d6:	9302      	str	r3, [sp, #8]
        ble_gap_event_listener_call(&event);
   228d8:	a801      	add	r0, sp, #4
   228da:	f7fe fc51 	bl	21180 <ble_gap_event_listener_call>
        ble_gap_call_conn_event_cb(&event, handle);
   228de:	4631      	mov	r1, r6
   228e0:	a801      	add	r0, sp, #4
   228e2:	f7fe fc77 	bl	211d4 <ble_gap_call_conn_event_cb>
}
   228e6:	e7e6      	b.n	228b6 <ble_gap_rx_disconn_complete+0x2a>
        event.term_failure.status = BLE_HS_HCI_ERR(ev->status);
   228e8:	2300      	movs	r3, #0
   228ea:	e7f4      	b.n	228d6 <ble_gap_rx_disconn_complete+0x4a>
   228ec:	10005a04 	.word	0x10005a04

000228f0 <ble_gap_reset_state>:
{
   228f0:	b510      	push	{r4, lr}
   228f2:	4604      	mov	r4, r0
        conn_handle = ble_hs_atomic_first_conn_handle();
   228f4:	f004 fdb9 	bl	2746a <ble_hs_atomic_first_conn_handle>
        if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   228f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   228fc:	4298      	cmp	r0, r3
   228fe:	d003      	beq.n	22908 <ble_gap_reset_state+0x18>
        ble_gap_conn_broken(conn_handle, reason);
   22900:	4621      	mov	r1, r4
   22902:	f7ff ff7d 	bl	22800 <ble_gap_conn_broken>
        conn_handle = ble_hs_atomic_first_conn_handle();
   22906:	e7f5      	b.n	228f4 <ble_gap_reset_state+0x4>
    if (ble_gap_adv_active_instance(0)) {
   22908:	2000      	movs	r0, #0
   2290a:	f7fe fb73 	bl	20ff4 <ble_gap_adv_active_instance>
   2290e:	b918      	cbnz	r0, 22918 <ble_gap_reset_state+0x28>
    ble_gap_master_failed(reason);
   22910:	4620      	mov	r0, r4
   22912:	f7fe ff57 	bl	217c4 <ble_gap_master_failed>
}
   22916:	bd10      	pop	{r4, pc}
        ble_gap_adv_finished(0, reason, 0, 0);
   22918:	2300      	movs	r3, #0
   2291a:	461a      	mov	r2, r3
   2291c:	4621      	mov	r1, r4
   2291e:	4618      	mov	r0, r3
   22920:	f7fe fe8a 	bl	21638 <ble_gap_adv_finished>
   22924:	e7f4      	b.n	22910 <ble_gap_reset_state+0x20>
	...

00022928 <ble_gap_rx_update_complete>:
{
   22928:	b5f0      	push	{r4, r5, r6, r7, lr}
   2292a:	b091      	sub	sp, #68	; 0x44
   2292c:	4604      	mov	r4, r0
    STATS_INC(ble_gap_stats, rx_update_complete);
   2292e:	4a2c      	ldr	r2, [pc, #176]	; (229e0 <ble_gap_rx_update_complete+0xb8>)
   22930:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   22932:	3301      	adds	r3, #1
   22934:	66d3      	str	r3, [r2, #108]	; 0x6c
    memset(&event, 0, sizeof event);
   22936:	2234      	movs	r2, #52	; 0x34
   22938:	2100      	movs	r1, #0
   2293a:	a801      	add	r0, sp, #4
   2293c:	f7f8 f9bf 	bl	1acbe <memset>
    memset(&l2cap_params, 0, sizeof l2cap_params);
   22940:	2300      	movs	r3, #0
   22942:	930e      	str	r3, [sp, #56]	; 0x38
   22944:	930f      	str	r3, [sp, #60]	; 0x3c
    ble_hs_lock();
   22946:	f003 fdf7 	bl	26538 <ble_hs_lock>
    conn_handle = le16toh(ev->conn_handle);
   2294a:	8865      	ldrh	r5, [r4, #2]
    conn = ble_hs_conn_find(conn_handle);
   2294c:	4628      	mov	r0, r5
   2294e:	f004 fe77 	bl	27640 <ble_hs_conn_find>
    if (conn != NULL) {
   22952:	b120      	cbz	r0, 2295e <ble_gap_rx_update_complete+0x36>
   22954:	4606      	mov	r6, r0
        switch (ev->status) {
   22956:	7863      	ldrb	r3, [r4, #1]
   22958:	b193      	cbz	r3, 22980 <ble_gap_rx_update_complete+0x58>
   2295a:	2b1a      	cmp	r3, #26
   2295c:	d017      	beq.n	2298e <ble_gap_rx_update_complete+0x66>
    if (l2cap_params.itvl_min == 0) {
   2295e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   22962:	b353      	cbz	r3, 229ba <ble_gap_rx_update_complete+0x92>
    ble_hs_unlock();
   22964:	f003 fdec 	bl	26540 <ble_hs_unlock>
    if (l2cap_params.itvl_min != 0) {
   22968:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   2296c:	bb5b      	cbnz	r3, 229c6 <ble_gap_rx_update_complete+0x9e>
        cb_status = BLE_HS_HCI_ERR(ev->status);
   2296e:	7861      	ldrb	r1, [r4, #1]
   22970:	b399      	cbz	r1, 229da <ble_gap_rx_update_complete+0xb2>
   22972:	f501 7100 	add.w	r1, r1, #512	; 0x200
        ble_gap_update_notify(conn_handle, cb_status);
   22976:	4628      	mov	r0, r5
   22978:	f7ff ff22 	bl	227c0 <ble_gap_update_notify>
}
   2297c:	b011      	add	sp, #68	; 0x44
   2297e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            conn->bhc_itvl = le16toh(ev->conn_itvl);
   22980:	88a3      	ldrh	r3, [r4, #4]
   22982:	8383      	strh	r3, [r0, #28]
            conn->bhc_latency = le16toh(ev->conn_latency);
   22984:	88e3      	ldrh	r3, [r4, #6]
   22986:	83c3      	strh	r3, [r0, #30]
            conn->bhc_supervision_timeout = le16toh(ev->supervision_timeout);
   22988:	8923      	ldrh	r3, [r4, #8]
   2298a:	8403      	strh	r3, [r0, #32]
            break;
   2298c:	e7e7      	b.n	2295e <ble_gap_rx_update_complete+0x36>
            entry = ble_gap_update_entry_find(conn_handle, NULL);
   2298e:	2100      	movs	r1, #0
   22990:	4628      	mov	r0, r5
   22992:	f7fe fbbf 	bl	21114 <ble_gap_update_entry_find>
            if (entry != NULL && !(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
   22996:	4607      	mov	r7, r0
   22998:	2800      	cmp	r0, #0
   2299a:	d0e0      	beq.n	2295e <ble_gap_rx_update_complete+0x36>
   2299c:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
   229a0:	f013 0f01 	tst.w	r3, #1
   229a4:	d1db      	bne.n	2295e <ble_gap_rx_update_complete+0x36>
                ble_gap_update_to_l2cap(&entry->params, &l2cap_params);
   229a6:	a90e      	add	r1, sp, #56	; 0x38
   229a8:	3004      	adds	r0, #4
   229aa:	f7fe fb19 	bl	20fe0 <ble_gap_update_to_l2cap>
    return os_time_get();
   229ae:	f7f7 fe5d 	bl	1a66c <os_time_get>
                entry->exp_os_ticks = ble_npl_time_get() +
   229b2:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
   229b6:	6138      	str	r0, [r7, #16]
   229b8:	e7d1      	b.n	2295e <ble_gap_rx_update_complete+0x36>
        entry = ble_gap_update_entry_remove(conn_handle);
   229ba:	4628      	mov	r0, r5
   229bc:	f7fe fdfe 	bl	215bc <ble_gap_update_entry_remove>
        ble_gap_update_entry_free(entry);
   229c0:	f7fe ff1c 	bl	217fc <ble_gap_update_entry_free>
   229c4:	e7ce      	b.n	22964 <ble_gap_rx_update_complete+0x3c>
        rc = ble_l2cap_sig_update(conn_handle, &l2cap_params,
   229c6:	2300      	movs	r3, #0
   229c8:	4a06      	ldr	r2, [pc, #24]	; (229e4 <ble_gap_rx_update_complete+0xbc>)
   229ca:	a90e      	add	r1, sp, #56	; 0x38
   229cc:	4628      	mov	r0, r5
   229ce:	f006 fcaf 	bl	29330 <ble_l2cap_sig_update>
        if (rc == 0) {
   229d2:	4601      	mov	r1, r0
   229d4:	2800      	cmp	r0, #0
   229d6:	d0d1      	beq.n	2297c <ble_gap_rx_update_complete+0x54>
   229d8:	e7cd      	b.n	22976 <ble_gap_rx_update_complete+0x4e>
        cb_status = BLE_HS_HCI_ERR(ev->status);
   229da:	2100      	movs	r1, #0
   229dc:	e7cb      	b.n	22976 <ble_gap_rx_update_complete+0x4e>
   229de:	bf00      	nop
   229e0:	10005a04 	.word	0x10005a04
   229e4:	000229e9 	.word	0x000229e9

000229e8 <ble_gap_update_l2cap_cb>:
{
   229e8:	b570      	push	{r4, r5, r6, lr}
   229ea:	4605      	mov	r5, r0
   229ec:	460e      	mov	r6, r1
    ble_hs_lock();
   229ee:	f003 fda3 	bl	26538 <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   229f2:	4628      	mov	r0, r5
   229f4:	f7fe fde2 	bl	215bc <ble_gap_update_entry_remove>
   229f8:	4604      	mov	r4, r0
    ble_hs_unlock();
   229fa:	f003 fda1 	bl	26540 <ble_hs_unlock>
    if (entry != NULL) {
   229fe:	b11c      	cbz	r4, 22a08 <ble_gap_update_l2cap_cb+0x20>
        ble_gap_update_entry_free(entry);
   22a00:	4620      	mov	r0, r4
   22a02:	f7fe fefb 	bl	217fc <ble_gap_update_entry_free>
        if (status != 0) {
   22a06:	b906      	cbnz	r6, 22a0a <ble_gap_update_l2cap_cb+0x22>
}
   22a08:	bd70      	pop	{r4, r5, r6, pc}
            ble_gap_update_notify(conn_handle, status);
   22a0a:	4631      	mov	r1, r6
   22a0c:	4628      	mov	r0, r5
   22a0e:	f7ff fed7 	bl	227c0 <ble_gap_update_notify>
}
   22a12:	e7f9      	b.n	22a08 <ble_gap_update_l2cap_cb+0x20>

00022a14 <ble_gap_update_failed>:
{
   22a14:	b570      	push	{r4, r5, r6, lr}
   22a16:	4604      	mov	r4, r0
   22a18:	460d      	mov	r5, r1
    STATS_INC(ble_gap_stats, update_fail);
   22a1a:	4a0a      	ldr	r2, [pc, #40]	; (22a44 <ble_gap_update_failed+0x30>)
   22a1c:	6d93      	ldr	r3, [r2, #88]	; 0x58
   22a1e:	3301      	adds	r3, #1
   22a20:	6593      	str	r3, [r2, #88]	; 0x58
    ble_hs_lock();
   22a22:	f003 fd89 	bl	26538 <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   22a26:	4620      	mov	r0, r4
   22a28:	f7fe fdc8 	bl	215bc <ble_gap_update_entry_remove>
   22a2c:	4606      	mov	r6, r0
    ble_hs_unlock();
   22a2e:	f003 fd87 	bl	26540 <ble_hs_unlock>
    ble_gap_update_entry_free(entry);
   22a32:	4630      	mov	r0, r6
   22a34:	f7fe fee2 	bl	217fc <ble_gap_update_entry_free>
    ble_gap_update_notify(conn_handle, status);
   22a38:	4629      	mov	r1, r5
   22a3a:	4620      	mov	r0, r4
   22a3c:	f7ff fec0 	bl	227c0 <ble_gap_update_notify>
}
   22a40:	bd70      	pop	{r4, r5, r6, pc}
   22a42:	bf00      	nop
   22a44:	10005a04 	.word	0x10005a04

00022a48 <ble_gap_conn_cancel>:
{
   22a48:	b510      	push	{r4, lr}
    ble_hs_lock();
   22a4a:	f003 fd75 	bl	26538 <ble_hs_lock>
    rc = ble_gap_conn_cancel_no_lock();
   22a4e:	f7ff fe49 	bl	226e4 <ble_gap_conn_cancel_no_lock>
   22a52:	4604      	mov	r4, r0
    ble_hs_unlock();
   22a54:	f003 fd74 	bl	26540 <ble_hs_unlock>
}
   22a58:	4620      	mov	r0, r4
   22a5a:	bd10      	pop	{r4, pc}

00022a5c <ble_gap_rx_param_req>:
{
   22a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22a60:	b094      	sub	sp, #80	; 0x50
   22a62:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   22a64:	f04f 0834 	mov.w	r8, #52	; 0x34
   22a68:	4642      	mov	r2, r8
   22a6a:	2100      	movs	r1, #0
   22a6c:	a801      	add	r0, sp, #4
   22a6e:	f7f8 f926 	bl	1acbe <memset>
    peer_params.itvl_min = le16toh(ev->min_interval);
   22a72:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   22a76:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    peer_params.itvl_max = le16toh(ev->max_interval);
   22a7a:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   22a7e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    peer_params.latency = le16toh(ev->latency);
   22a82:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   22a86:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
    peer_params.supervision_timeout = le16toh(ev->timeout);
   22a8a:	f8b4 3009 	ldrh.w	r3, [r4, #9]
   22a8e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    peer_params.min_ce_len = 0;
   22a92:	2300      	movs	r3, #0
   22a94:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    peer_params.max_ce_len = 0;
   22a98:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    self_params = peer_params;
   22a9c:	ae0e      	add	r6, sp, #56	; 0x38
   22a9e:	ad11      	add	r5, sp, #68	; 0x44
   22aa0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   22aa4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    conn_handle = le16toh(ev->conn_handle);
   22aa8:	f8b4 7001 	ldrh.w	r7, [r4, #1]
   22aac:	b2bc      	uxth	r4, r7
    memset(&event, 0, sizeof event);
   22aae:	4642      	mov	r2, r8
   22ab0:	4619      	mov	r1, r3
   22ab2:	a801      	add	r0, sp, #4
   22ab4:	f7f8 f903 	bl	1acbe <memset>
    event.type = BLE_GAP_EVENT_CONN_UPDATE_REQ;
   22ab8:	2304      	movs	r3, #4
   22aba:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update_req.conn_handle = conn_handle;
   22abe:	f8ad 7010 	strh.w	r7, [sp, #16]
    event.conn_update_req.self_params = &self_params;
   22ac2:	9603      	str	r6, [sp, #12]
    event.conn_update_req.peer_params = &peer_params;
   22ac4:	9502      	str	r5, [sp, #8]
    rc = ble_gap_call_conn_event_cb(&event, conn_handle);
   22ac6:	4621      	mov	r1, r4
   22ac8:	eb0d 0003 	add.w	r0, sp, r3
   22acc:	f7fe fb82 	bl	211d4 <ble_gap_call_conn_event_cb>
    if (rc == 0) {
   22ad0:	b948      	cbnz	r0, 22ae6 <ble_gap_rx_param_req+0x8a>
        rc = ble_gap_tx_param_pos_reply(conn_handle, &self_params);
   22ad2:	a90e      	add	r1, sp, #56	; 0x38
   22ad4:	4620      	mov	r0, r4
   22ad6:	f7fe fcdc 	bl	21492 <ble_gap_tx_param_pos_reply>
        if (rc != 0) {
   22ada:	4601      	mov	r1, r0
   22adc:	b138      	cbz	r0, 22aee <ble_gap_rx_param_req+0x92>
            ble_gap_update_failed(conn_handle, rc);
   22ade:	4620      	mov	r0, r4
   22ae0:	f7ff ff98 	bl	22a14 <ble_gap_update_failed>
   22ae4:	e003      	b.n	22aee <ble_gap_rx_param_req+0x92>
        ble_gap_tx_param_neg_reply(conn_handle, rc);
   22ae6:	b2c1      	uxtb	r1, r0
   22ae8:	4620      	mov	r0, r4
   22aea:	f7fe fcf3 	bl	214d4 <ble_gap_tx_param_neg_reply>
}
   22aee:	b014      	add	sp, #80	; 0x50
   22af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022af4 <ble_gap_update_params>:
{
   22af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22af8:	b082      	sub	sp, #8
   22afa:	4607      	mov	r7, r0
   22afc:	460c      	mov	r4, r1
    if (!ble_gap_validate_conn_params(params)) {
   22afe:	4608      	mov	r0, r1
   22b00:	f7fe fb1a 	bl	21138 <ble_gap_validate_conn_params>
   22b04:	2800      	cmp	r0, #0
   22b06:	d07e      	beq.n	22c06 <ble_gap_update_params+0x112>
    STATS_INC(ble_gap_stats, update);
   22b08:	4a40      	ldr	r2, [pc, #256]	; (22c0c <ble_gap_update_params+0x118>)
   22b0a:	6d53      	ldr	r3, [r2, #84]	; 0x54
   22b0c:	3301      	adds	r3, #1
   22b0e:	6553      	str	r3, [r2, #84]	; 0x54
    memset(&l2cap_params, 0, sizeof l2cap_params);
   22b10:	2300      	movs	r3, #0
   22b12:	9300      	str	r3, [sp, #0]
   22b14:	9301      	str	r3, [sp, #4]
    ble_hs_lock();
   22b16:	f003 fd0f 	bl	26538 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   22b1a:	4638      	mov	r0, r7
   22b1c:	f004 fd90 	bl	27640 <ble_hs_conn_find>
    if (conn == NULL) {
   22b20:	4606      	mov	r6, r0
   22b22:	2800      	cmp	r0, #0
   22b24:	d04d      	beq.n	22bc2 <ble_gap_update_params+0xce>
    dup = ble_gap_update_entry_find(conn_handle, NULL);
   22b26:	2100      	movs	r1, #0
   22b28:	4638      	mov	r0, r7
   22b2a:	f7fe faf3 	bl	21114 <ble_gap_update_entry_find>
    if (dup != NULL) {
   22b2e:	b1c0      	cbz	r0, 22b62 <ble_gap_update_params+0x6e>
        rc = BLE_HS_EALREADY;
   22b30:	2502      	movs	r5, #2
    l2cap_update = 0;
   22b32:	f04f 0800 	mov.w	r8, #0
    entry = NULL;
   22b36:	4646      	mov	r6, r8
    ble_hs_unlock();
   22b38:	f003 fd02 	bl	26540 <ble_hs_unlock>
    if (!l2cap_update) {
   22b3c:	f1b8 0f00 	cmp.w	r8, #0
   22b40:	d14d      	bne.n	22bde <ble_gap_update_params+0xea>
        ble_hs_timer_resched();
   22b42:	f003 fdeb 	bl	2671c <ble_hs_timer_resched>
    ble_hs_lock();
   22b46:	f003 fcf7 	bl	26538 <ble_hs_lock>
    if (rc == 0) {
   22b4a:	2d00      	cmp	r5, #0
   22b4c:	d153      	bne.n	22bf6 <ble_gap_update_params+0x102>
        SLIST_INSERT_HEAD(&ble_gap_update_entries, entry, next);
   22b4e:	4b30      	ldr	r3, [pc, #192]	; (22c10 <ble_gap_update_params+0x11c>)
   22b50:	681a      	ldr	r2, [r3, #0]
   22b52:	6032      	str	r2, [r6, #0]
   22b54:	601e      	str	r6, [r3, #0]
    ble_hs_unlock();
   22b56:	f003 fcf3 	bl	26540 <ble_hs_unlock>
}
   22b5a:	4628      	mov	r0, r5
   22b5c:	b002      	add	sp, #8
   22b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    entry = ble_gap_update_entry_alloc();
   22b62:	f7ff f88d 	bl	21c80 <ble_gap_update_entry_alloc>
    if (entry == NULL) {
   22b66:	4680      	mov	r8, r0
   22b68:	b378      	cbz	r0, 22bca <ble_gap_update_params+0xd6>
    entry->conn_handle = conn_handle;
   22b6a:	8287      	strh	r7, [r0, #20]
    entry->params = *params;
   22b6c:	1d03      	adds	r3, r0, #4
   22b6e:	6820      	ldr	r0, [r4, #0]
   22b70:	6861      	ldr	r1, [r4, #4]
   22b72:	68a2      	ldr	r2, [r4, #8]
   22b74:	c307      	stmia	r3!, {r0, r1, r2}
   22b76:	f7f7 fd79 	bl	1a66c <os_time_get>
    entry->exp_os_ticks = ble_npl_time_get() +
   22b7a:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
   22b7e:	f8c8 0010 	str.w	r0, [r8, #16]
    BLE_HS_LOG(INFO, "GAP procedure initiated: ");
   22b82:	4a24      	ldr	r2, [pc, #144]	; (22c14 <ble_gap_update_params+0x120>)
   22b84:	2101      	movs	r1, #1
   22b86:	2004      	movs	r0, #4
   22b88:	f7fa f8c8 	bl	1cd1c <modlog_printf>
    ble_gap_log_update(conn_handle, params);
   22b8c:	4621      	mov	r1, r4
   22b8e:	4638      	mov	r0, r7
   22b90:	f7ff f81c 	bl	21bcc <ble_gap_log_update>
    BLE_HS_LOG(INFO, "\n");
   22b94:	4a20      	ldr	r2, [pc, #128]	; (22c18 <ble_gap_update_params+0x124>)
   22b96:	2101      	movs	r1, #1
   22b98:	2004      	movs	r0, #4
   22b9a:	f7fa f8bf 	bl	1cd1c <modlog_printf>
    if ((conn->supported_feat & BLE_HS_HCI_LE_FEAT_CONN_PARAM_REQUEST) == 0 &&
   22b9e:	6a73      	ldr	r3, [r6, #36]	; 0x24
   22ba0:	f013 0f02 	tst.w	r3, #2
   22ba4:	d104      	bne.n	22bb0 <ble_gap_update_params+0xbc>
            !(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
   22ba6:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    if ((conn->supported_feat & BLE_HS_HCI_LE_FEAT_CONN_PARAM_REQUEST) == 0 &&
   22baa:	f013 0f01 	tst.w	r3, #1
   22bae:	d011      	beq.n	22bd4 <ble_gap_update_params+0xe0>
        rc = ble_gap_update_tx(conn_handle, params);
   22bb0:	4621      	mov	r1, r4
   22bb2:	4638      	mov	r0, r7
   22bb4:	f7fe fc9f 	bl	214f6 <ble_gap_update_tx>
   22bb8:	4605      	mov	r5, r0
    entry = ble_gap_update_entry_alloc();
   22bba:	4646      	mov	r6, r8
    l2cap_update = 0;
   22bbc:	f04f 0800 	mov.w	r8, #0
   22bc0:	e7ba      	b.n	22b38 <ble_gap_update_params+0x44>
        rc = BLE_HS_ENOTCONN;
   22bc2:	2507      	movs	r5, #7
    l2cap_update = 0;
   22bc4:	f04f 0800 	mov.w	r8, #0
   22bc8:	e7b6      	b.n	22b38 <ble_gap_update_params+0x44>
    entry = ble_gap_update_entry_alloc();
   22bca:	4606      	mov	r6, r0
        rc = BLE_HS_ENOMEM;
   22bcc:	2506      	movs	r5, #6
    l2cap_update = 0;
   22bce:	f04f 0800 	mov.w	r8, #0
   22bd2:	e7b1      	b.n	22b38 <ble_gap_update_params+0x44>
    entry = ble_gap_update_entry_alloc();
   22bd4:	4646      	mov	r6, r8
        rc = 0;
   22bd6:	2500      	movs	r5, #0
        l2cap_update = 1;
   22bd8:	f04f 0801 	mov.w	r8, #1
   22bdc:	e7ac      	b.n	22b38 <ble_gap_update_params+0x44>
        ble_gap_update_to_l2cap(params, &l2cap_params);
   22bde:	4669      	mov	r1, sp
   22be0:	4620      	mov	r0, r4
   22be2:	f7fe f9fd 	bl	20fe0 <ble_gap_update_to_l2cap>
        rc = ble_l2cap_sig_update(conn_handle, &l2cap_params,
   22be6:	2300      	movs	r3, #0
   22be8:	4a0c      	ldr	r2, [pc, #48]	; (22c1c <ble_gap_update_params+0x128>)
   22bea:	4669      	mov	r1, sp
   22bec:	4638      	mov	r0, r7
   22bee:	f006 fb9f 	bl	29330 <ble_l2cap_sig_update>
   22bf2:	4605      	mov	r5, r0
   22bf4:	e7a7      	b.n	22b46 <ble_gap_update_params+0x52>
        ble_gap_update_entry_free(entry);
   22bf6:	4630      	mov	r0, r6
   22bf8:	f7fe fe00 	bl	217fc <ble_gap_update_entry_free>
        STATS_INC(ble_gap_stats, update_fail);
   22bfc:	4a03      	ldr	r2, [pc, #12]	; (22c0c <ble_gap_update_params+0x118>)
   22bfe:	6d93      	ldr	r3, [r2, #88]	; 0x58
   22c00:	3301      	adds	r3, #1
   22c02:	6593      	str	r3, [r2, #88]	; 0x58
   22c04:	e7a7      	b.n	22b56 <ble_gap_update_params+0x62>
        return BLE_HS_EINVAL;
   22c06:	2503      	movs	r5, #3
   22c08:	e7a7      	b.n	22b5a <ble_gap_update_params+0x66>
   22c0a:	bf00      	nop
   22c0c:	10005a04 	.word	0x10005a04
   22c10:	10005a8c 	.word	0x10005a8c
   22c14:	000348a0 	.word	0x000348a0
   22c18:	0002ff28 	.word	0x0002ff28
   22c1c:	000229e9 	.word	0x000229e9

00022c20 <ble_gap_unpair_oldest_peer>:
}
   22c20:	2008      	movs	r0, #8
   22c22:	4770      	bx	lr

00022c24 <ble_gap_unpair_oldest_except>:
}
   22c24:	2008      	movs	r0, #8
   22c26:	4770      	bx	lr

00022c28 <ble_gap_conn_rssi>:
{
   22c28:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_read_rssi(conn_handle, out_rssi);
   22c2a:	f005 fb0d 	bl	28248 <ble_hs_hci_util_read_rssi>
}
   22c2e:	bd08      	pop	{r3, pc}

00022c30 <ble_gap_notify_rx_event>:
{
   22c30:	b5f0      	push	{r4, r5, r6, r7, lr}
   22c32:	b08f      	sub	sp, #60	; 0x3c
   22c34:	4604      	mov	r4, r0
   22c36:	460f      	mov	r7, r1
   22c38:	4616      	mov	r6, r2
   22c3a:	461d      	mov	r5, r3
    memset(&event, 0, sizeof event);
   22c3c:	2234      	movs	r2, #52	; 0x34
   22c3e:	2100      	movs	r1, #0
   22c40:	a801      	add	r0, sp, #4
   22c42:	f7f8 f83c 	bl	1acbe <memset>
    event.type = BLE_GAP_EVENT_NOTIFY_RX;
   22c46:	230c      	movs	r3, #12
   22c48:	f88d 3004 	strb.w	r3, [sp, #4]
    event.notify_rx.conn_handle = conn_handle;
   22c4c:	f8ad 400e 	strh.w	r4, [sp, #14]
    event.notify_rx.attr_handle = attr_handle;
   22c50:	f8ad 700c 	strh.w	r7, [sp, #12]
    event.notify_rx.om = om;
   22c54:	9602      	str	r6, [sp, #8]
    event.notify_rx.indication = is_indication;
   22c56:	f04f 0300 	mov.w	r3, #0
   22c5a:	f365 0300 	bfi	r3, r5, #0, #1
   22c5e:	f88d 3010 	strb.w	r3, [sp, #16]
    ble_gap_event_listener_call(&event);
   22c62:	a801      	add	r0, sp, #4
   22c64:	f7fe fa8c 	bl	21180 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   22c68:	4621      	mov	r1, r4
   22c6a:	a801      	add	r0, sp, #4
   22c6c:	f7fe fab2 	bl	211d4 <ble_gap_call_conn_event_cb>
    os_mbuf_free_chain(event.notify_rx.om);
   22c70:	9802      	ldr	r0, [sp, #8]
   22c72:	f7f6 fccc 	bl	1960e <os_mbuf_free_chain>
}
   22c76:	b00f      	add	sp, #60	; 0x3c
   22c78:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022c7a <ble_gap_notify_tx_event>:
{
   22c7a:	b5f0      	push	{r4, r5, r6, r7, lr}
   22c7c:	b08f      	sub	sp, #60	; 0x3c
   22c7e:	4607      	mov	r7, r0
   22c80:	460c      	mov	r4, r1
   22c82:	4616      	mov	r6, r2
   22c84:	461d      	mov	r5, r3
    memset(&event, 0, sizeof event);
   22c86:	2234      	movs	r2, #52	; 0x34
   22c88:	2100      	movs	r1, #0
   22c8a:	a801      	add	r0, sp, #4
   22c8c:	f7f8 f817 	bl	1acbe <memset>
    event.type = BLE_GAP_EVENT_NOTIFY_TX;
   22c90:	230d      	movs	r3, #13
   22c92:	f88d 3004 	strb.w	r3, [sp, #4]
    event.notify_tx.conn_handle = conn_handle;
   22c96:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.notify_tx.status = status;
   22c9a:	9702      	str	r7, [sp, #8]
    event.notify_tx.attr_handle = attr_handle;
   22c9c:	f8ad 600e 	strh.w	r6, [sp, #14]
    event.notify_tx.indication = is_indication;
   22ca0:	f04f 0300 	mov.w	r3, #0
   22ca4:	f365 0300 	bfi	r3, r5, #0, #1
   22ca8:	f88d 3010 	strb.w	r3, [sp, #16]
    ble_gap_event_listener_call(&event);
   22cac:	a801      	add	r0, sp, #4
   22cae:	f7fe fa67 	bl	21180 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   22cb2:	4621      	mov	r1, r4
   22cb4:	a801      	add	r0, sp, #4
   22cb6:	f7fe fa8d 	bl	211d4 <ble_gap_call_conn_event_cb>
}
   22cba:	b00f      	add	sp, #60	; 0x3c
   22cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022cbe <ble_gap_subscribe_event>:
{
   22cbe:	b5f0      	push	{r4, r5, r6, r7, lr}
   22cc0:	b08f      	sub	sp, #60	; 0x3c
   22cc2:	4605      	mov	r5, r0
   22cc4:	460f      	mov	r7, r1
   22cc6:	4616      	mov	r6, r2
   22cc8:	461c      	mov	r4, r3
    memset(&event, 0, sizeof event);
   22cca:	2234      	movs	r2, #52	; 0x34
   22ccc:	2100      	movs	r1, #0
   22cce:	a801      	add	r0, sp, #4
   22cd0:	f7f7 fff5 	bl	1acbe <memset>
    event.type = BLE_GAP_EVENT_SUBSCRIBE;
   22cd4:	230e      	movs	r3, #14
   22cd6:	f88d 3004 	strb.w	r3, [sp, #4]
    event.subscribe.conn_handle = conn_handle;
   22cda:	f8ad 5008 	strh.w	r5, [sp, #8]
    event.subscribe.attr_handle = attr_handle;
   22cde:	f8ad 700a 	strh.w	r7, [sp, #10]
    event.subscribe.reason = reason;
   22ce2:	f88d 600c 	strb.w	r6, [sp, #12]
    event.subscribe.cur_notify = !!cur_notify;
   22ce6:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
   22cea:	3a00      	subs	r2, #0
   22cec:	bf18      	it	ne
   22cee:	2201      	movne	r2, #1
   22cf0:	1e23      	subs	r3, r4, #0
   22cf2:	bf18      	it	ne
   22cf4:	2301      	movne	r3, #1
   22cf6:	f362 0341 	bfi	r3, r2, #1, #1
    event.subscribe.prev_indicate = !!prev_indicate;
   22cfa:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
   22cfe:	3a00      	subs	r2, #0
   22d00:	bf18      	it	ne
   22d02:	2201      	movne	r2, #1
   22d04:	f362 0382 	bfi	r3, r2, #2, #1
    event.subscribe.cur_indicate = !!cur_indicate;
   22d08:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   22d0c:	3a00      	subs	r2, #0
   22d0e:	bf18      	it	ne
   22d10:	2201      	movne	r2, #1
   22d12:	f362 03c3 	bfi	r3, r2, #3, #1
   22d16:	f88d 300d 	strb.w	r3, [sp, #13]
    ble_gap_event_listener_call(&event);
   22d1a:	a801      	add	r0, sp, #4
   22d1c:	f7fe fa30 	bl	21180 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   22d20:	4629      	mov	r1, r5
   22d22:	a801      	add	r0, sp, #4
   22d24:	f7fe fa56 	bl	211d4 <ble_gap_call_conn_event_cb>
}
   22d28:	b00f      	add	sp, #60	; 0x3c
   22d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022d2c <ble_gap_mtu_event>:
{
   22d2c:	b570      	push	{r4, r5, r6, lr}
   22d2e:	b08e      	sub	sp, #56	; 0x38
   22d30:	4604      	mov	r4, r0
   22d32:	460e      	mov	r6, r1
   22d34:	4615      	mov	r5, r2
    memset(&event, 0, sizeof event);
   22d36:	2234      	movs	r2, #52	; 0x34
   22d38:	2100      	movs	r1, #0
   22d3a:	a801      	add	r0, sp, #4
   22d3c:	f7f7 ffbf 	bl	1acbe <memset>
    event.type = BLE_GAP_EVENT_MTU;
   22d40:	230f      	movs	r3, #15
   22d42:	f88d 3004 	strb.w	r3, [sp, #4]
    event.mtu.conn_handle = conn_handle;
   22d46:	f8ad 4008 	strh.w	r4, [sp, #8]
    event.mtu.channel_id = cid;
   22d4a:	f8ad 600a 	strh.w	r6, [sp, #10]
    event.mtu.value = mtu;
   22d4e:	f8ad 500c 	strh.w	r5, [sp, #12]
    ble_gap_event_listener_call(&event);
   22d52:	a801      	add	r0, sp, #4
   22d54:	f7fe fa14 	bl	21180 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   22d58:	4621      	mov	r1, r4
   22d5a:	a801      	add	r0, sp, #4
   22d5c:	f7fe fa3a 	bl	211d4 <ble_gap_call_conn_event_cb>
}
   22d60:	b00e      	add	sp, #56	; 0x38
   22d62:	bd70      	pop	{r4, r5, r6, pc}

00022d64 <ble_gap_preempt_no_lock>:
{
   22d64:	b508      	push	{r3, lr}
    rc = ble_gap_adv_stop_no_lock();
   22d66:	f7ff fae7 	bl	22338 <ble_gap_adv_stop_no_lock>
    if (rc == 0) {
   22d6a:	b920      	cbnz	r0, 22d76 <ble_gap_preempt_no_lock+0x12>
        ble_gap_slave[0].preempted = 1;
   22d6c:	4a08      	ldr	r2, [pc, #32]	; (22d90 <ble_gap_preempt_no_lock+0x2c>)
   22d6e:	7d53      	ldrb	r3, [r2, #21]
   22d70:	f043 0304 	orr.w	r3, r3, #4
   22d74:	7553      	strb	r3, [r2, #21]
    rc = ble_gap_conn_cancel_no_lock();
   22d76:	f7ff fcb5 	bl	226e4 <ble_gap_conn_cancel_no_lock>
    if (rc == 0) {
   22d7a:	b910      	cbnz	r0, 22d82 <ble_gap_preempt_no_lock+0x1e>
        ble_gap_master.preempted_op = BLE_GAP_OP_M_CONN;
   22d7c:	4b04      	ldr	r3, [pc, #16]	; (22d90 <ble_gap_preempt_no_lock+0x2c>)
   22d7e:	2202      	movs	r2, #2
   22d80:	741a      	strb	r2, [r3, #16]
    rc = ble_gap_disc_cancel_no_lock();
   22d82:	f7ff fb0f 	bl	223a4 <ble_gap_disc_cancel_no_lock>
    if (rc == 0) {
   22d86:	b910      	cbnz	r0, 22d8e <ble_gap_preempt_no_lock+0x2a>
        ble_gap_master.preempted_op = BLE_GAP_OP_M_DISC;
   22d88:	4b01      	ldr	r3, [pc, #4]	; (22d90 <ble_gap_preempt_no_lock+0x2c>)
   22d8a:	2201      	movs	r2, #1
   22d8c:	741a      	strb	r2, [r3, #16]
}
   22d8e:	bd08      	pop	{r3, pc}
   22d90:	10005ac4 	.word	0x10005ac4

00022d94 <ble_gap_preempt>:
{
   22d94:	b508      	push	{r3, lr}
    ble_hs_lock();
   22d96:	f003 fbcf 	bl	26538 <ble_hs_lock>
    if (!ble_gap_is_preempted()) {
   22d9a:	f7fe f903 	bl	20fa4 <ble_gap_is_preempted>
   22d9e:	b110      	cbz	r0, 22da6 <ble_gap_preempt+0x12>
    ble_hs_unlock();
   22da0:	f003 fbce 	bl	26540 <ble_hs_unlock>
}
   22da4:	bd08      	pop	{r3, pc}
        ble_gap_preempt_no_lock();
   22da6:	f7ff ffdd 	bl	22d64 <ble_gap_preempt_no_lock>
   22daa:	e7f9      	b.n	22da0 <ble_gap_preempt+0xc>

00022dac <ble_gap_preempt_done>:
{
   22dac:	b5f0      	push	{r4, r5, r6, r7, lr}
   22dae:	b08f      	sub	sp, #60	; 0x3c
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   22db0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22db4:	482b      	ldr	r0, [pc, #172]	; (22e64 <ble_gap_preempt_done+0xb8>)
   22db6:	f7f7 fec1 	bl	1ab3c <os_mutex_pend>
    memset(slaves, 0, sizeof(slaves));
   22dba:	4b2b      	ldr	r3, [pc, #172]	; (22e68 <ble_gap_preempt_done+0xbc>)
   22dbc:	2400      	movs	r4, #0
   22dbe:	601c      	str	r4, [r3, #0]
   22dc0:	605c      	str	r4, [r3, #4]
    ble_hs_lock();
   22dc2:	f003 fbb9 	bl	26538 <ble_hs_lock>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   22dc6:	4623      	mov	r3, r4
   22dc8:	2b00      	cmp	r3, #0
   22dca:	dd14      	ble.n	22df6 <ble_gap_preempt_done+0x4a>
    if (ble_gap_master.preempted_op == BLE_GAP_OP_M_DISC) {
   22dcc:	4b27      	ldr	r3, [pc, #156]	; (22e6c <ble_gap_preempt_done+0xc0>)
   22dce:	7c1b      	ldrb	r3, [r3, #16]
   22dd0:	2b01      	cmp	r3, #1
   22dd2:	d028      	beq.n	22e26 <ble_gap_preempt_done+0x7a>
    disc_preempted = 0;
   22dd4:	2700      	movs	r7, #0
    ble_hs_unlock();
   22dd6:	f003 fbb3 	bl	26540 <ble_hs_unlock>
    event.type = BLE_GAP_EVENT_ADV_COMPLETE;
   22dda:	2309      	movs	r3, #9
   22ddc:	f88d 3004 	strb.w	r3, [sp, #4]
    event.adv_complete.reason = BLE_HS_EPREEMPTED;
   22de0:	231d      	movs	r3, #29
   22de2:	9302      	str	r3, [sp, #8]
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   22de4:	2400      	movs	r4, #0
   22de6:	2c00      	cmp	r4, #0
   22de8:	dd24      	ble.n	22e34 <ble_gap_preempt_done+0x88>
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   22dea:	481e      	ldr	r0, [pc, #120]	; (22e64 <ble_gap_preempt_done+0xb8>)
   22dec:	f7f7 fe46 	bl	1aa7c <os_mutex_release>
    if (disc_preempted) {
   22df0:	bb67      	cbnz	r7, 22e4c <ble_gap_preempt_done+0xa0>
}
   22df2:	b00f      	add	sp, #60	; 0x3c
   22df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (ble_gap_slave[i].preempted) {
   22df6:	4a1d      	ldr	r2, [pc, #116]	; (22e6c <ble_gap_preempt_done+0xc0>)
   22df8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   22dfc:	7d52      	ldrb	r2, [r2, #21]
   22dfe:	f012 0f04 	tst.w	r2, #4
   22e02:	d00e      	beq.n	22e22 <ble_gap_preempt_done+0x76>
            ble_gap_slave[i].preempted = 0;
   22e04:	4a19      	ldr	r2, [pc, #100]	; (22e6c <ble_gap_preempt_done+0xc0>)
   22e06:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   22e0a:	7d51      	ldrb	r1, [r2, #21]
   22e0c:	f36f 0182 	bfc	r1, #2, #1
   22e10:	7551      	strb	r1, [r2, #21]
            slaves[i].cb = ble_gap_slave[i].cb;
   22e12:	69d0      	ldr	r0, [r2, #28]
   22e14:	4914      	ldr	r1, [pc, #80]	; (22e68 <ble_gap_preempt_done+0xbc>)
   22e16:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
            slaves[i].arg = ble_gap_slave[i].cb_arg;
   22e1a:	6a12      	ldr	r2, [r2, #32]
   22e1c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   22e20:	604a      	str	r2, [r1, #4]
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   22e22:	3301      	adds	r3, #1
   22e24:	e7d0      	b.n	22dc8 <ble_gap_preempt_done+0x1c>
        ble_gap_master.preempted_op = BLE_GAP_OP_NULL;
   22e26:	4b11      	ldr	r3, [pc, #68]	; (22e6c <ble_gap_preempt_done+0xc0>)
   22e28:	2200      	movs	r2, #0
   22e2a:	741a      	strb	r2, [r3, #16]
        master_cb = ble_gap_master.cb;
   22e2c:	689d      	ldr	r5, [r3, #8]
        master_arg = ble_gap_master.cb_arg;
   22e2e:	68de      	ldr	r6, [r3, #12]
        disc_preempted = 1;
   22e30:	2701      	movs	r7, #1
   22e32:	e7d0      	b.n	22dd6 <ble_gap_preempt_done+0x2a>
        if (slaves[i].cb) {
   22e34:	4b0c      	ldr	r3, [pc, #48]	; (22e68 <ble_gap_preempt_done+0xbc>)
   22e36:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   22e3a:	b129      	cbz	r1, 22e48 <ble_gap_preempt_done+0x9c>
            ble_gap_call_event_cb(&event, slaves[i].cb, slaves[i].arg);
   22e3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   22e40:	685a      	ldr	r2, [r3, #4]
   22e42:	a801      	add	r0, sp, #4
   22e44:	f7fe f899 	bl	20f7a <ble_gap_call_event_cb>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   22e48:	3401      	adds	r4, #1
   22e4a:	e7cc      	b.n	22de6 <ble_gap_preempt_done+0x3a>
        event.type = BLE_GAP_EVENT_DISC_COMPLETE;
   22e4c:	2308      	movs	r3, #8
   22e4e:	f88d 3004 	strb.w	r3, [sp, #4]
        event.disc_complete.reason = BLE_HS_EPREEMPTED;
   22e52:	231d      	movs	r3, #29
   22e54:	9302      	str	r3, [sp, #8]
        ble_gap_call_event_cb(&event, master_cb, master_arg);
   22e56:	4632      	mov	r2, r6
   22e58:	4629      	mov	r1, r5
   22e5a:	a801      	add	r0, sp, #4
   22e5c:	f7fe f88d 	bl	20f7a <ble_gap_call_event_cb>
}
   22e60:	e7c7      	b.n	22df2 <ble_gap_preempt_done+0x46>
   22e62:	bf00      	nop
   22e64:	10005ae8 	.word	0x10005ae8
   22e68:	10005af4 	.word	0x10005af4
   22e6c:	10005ac4 	.word	0x10005ac4

00022e70 <ble_gap_event_listener_register>:
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   22e70:	4b0a      	ldr	r3, [pc, #40]	; (22e9c <ble_gap_event_listener_register+0x2c>)
   22e72:	681b      	ldr	r3, [r3, #0]
   22e74:	b11b      	cbz	r3, 22e7e <ble_gap_event_listener_register+0xe>
        if (evl == listener) {
   22e76:	4283      	cmp	r3, r0
   22e78:	d001      	beq.n	22e7e <ble_gap_event_listener_register+0xe>
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   22e7a:	689b      	ldr	r3, [r3, #8]
   22e7c:	e7fa      	b.n	22e74 <ble_gap_event_listener_register+0x4>
    if (!evl) {
   22e7e:	b10b      	cbz	r3, 22e84 <ble_gap_event_listener_register+0x14>
        rc = BLE_HS_EALREADY;
   22e80:	2002      	movs	r0, #2
   22e82:	4770      	bx	lr
        if (fn) {
   22e84:	b139      	cbz	r1, 22e96 <ble_gap_event_listener_register+0x26>
            listener->fn = fn;
   22e86:	6001      	str	r1, [r0, #0]
            listener->arg = arg;
   22e88:	6042      	str	r2, [r0, #4]
            SLIST_INSERT_HEAD(&ble_gap_event_listener_list, listener, link);
   22e8a:	4b04      	ldr	r3, [pc, #16]	; (22e9c <ble_gap_event_listener_register+0x2c>)
   22e8c:	681a      	ldr	r2, [r3, #0]
   22e8e:	6082      	str	r2, [r0, #8]
   22e90:	6018      	str	r0, [r3, #0]
            rc = 0;
   22e92:	2000      	movs	r0, #0
   22e94:	4770      	bx	lr
            rc = BLE_HS_EINVAL;
   22e96:	2003      	movs	r0, #3
}
   22e98:	4770      	bx	lr
   22e9a:	bf00      	nop
   22e9c:	10005a00 	.word	0x10005a00

00022ea0 <ble_gap_event_listener_unregister>:
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   22ea0:	4b0c      	ldr	r3, [pc, #48]	; (22ed4 <ble_gap_event_listener_unregister+0x34>)
   22ea2:	681a      	ldr	r2, [r3, #0]
   22ea4:	4613      	mov	r3, r2
   22ea6:	b11b      	cbz	r3, 22eb0 <ble_gap_event_listener_unregister+0x10>
        if (evl == listener) {
   22ea8:	4283      	cmp	r3, r0
   22eaa:	d001      	beq.n	22eb0 <ble_gap_event_listener_unregister+0x10>
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   22eac:	689b      	ldr	r3, [r3, #8]
   22eae:	e7fa      	b.n	22ea6 <ble_gap_event_listener_unregister+0x6>
    if (!evl) {
   22eb0:	b173      	cbz	r3, 22ed0 <ble_gap_event_listener_unregister+0x30>
        SLIST_REMOVE(&ble_gap_event_listener_list, listener,
   22eb2:	4282      	cmp	r2, r0
   22eb4:	d007      	beq.n	22ec6 <ble_gap_event_listener_unregister+0x26>
   22eb6:	4613      	mov	r3, r2
   22eb8:	6892      	ldr	r2, [r2, #8]
   22eba:	4282      	cmp	r2, r0
   22ebc:	d1fb      	bne.n	22eb6 <ble_gap_event_listener_unregister+0x16>
   22ebe:	6892      	ldr	r2, [r2, #8]
   22ec0:	609a      	str	r2, [r3, #8]
        rc = 0;
   22ec2:	2000      	movs	r0, #0
   22ec4:	4770      	bx	lr
        SLIST_REMOVE(&ble_gap_event_listener_list, listener,
   22ec6:	6892      	ldr	r2, [r2, #8]
   22ec8:	4b02      	ldr	r3, [pc, #8]	; (22ed4 <ble_gap_event_listener_unregister+0x34>)
   22eca:	601a      	str	r2, [r3, #0]
        rc = 0;
   22ecc:	2000      	movs	r0, #0
   22ece:	4770      	bx	lr
        rc = BLE_HS_ENOENT;
   22ed0:	2005      	movs	r0, #5
}
   22ed2:	4770      	bx	lr
   22ed4:	10005a00 	.word	0x10005a00

00022ed8 <ble_gap_init>:
 * $init                                                                     *
 *****************************************************************************/

int
ble_gap_init(void)
{
   22ed8:	b510      	push	{r4, lr}
   22eda:	b082      	sub	sp, #8
    int rc;

    memset(&ble_gap_master, 0, sizeof(ble_gap_master));
   22edc:	4b15      	ldr	r3, [pc, #84]	; (22f34 <ble_gap_init+0x5c>)
   22ede:	2400      	movs	r4, #0
   22ee0:	601c      	str	r4, [r3, #0]
   22ee2:	605c      	str	r4, [r3, #4]
   22ee4:	609c      	str	r4, [r3, #8]
   22ee6:	60dc      	str	r4, [r3, #12]
   22ee8:	611c      	str	r4, [r3, #16]
    memset(ble_gap_slave, 0, sizeof(ble_gap_slave));
   22eea:	615c      	str	r4, [r3, #20]
   22eec:	619c      	str	r4, [r3, #24]
   22eee:	61dc      	str	r4, [r3, #28]
   22ef0:	621c      	str	r4, [r3, #32]
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   22ef2:	4811      	ldr	r0, [pc, #68]	; (22f38 <ble_gap_init+0x60>)
   22ef4:	f7f7 fdb8 	bl	1aa68 <os_mutex_init>
    memset(&ble_gap_sync, 0, sizeof(ble_gap_sync));
#endif

    ble_npl_mutex_init(&preempt_done_mutex);

    SLIST_INIT(&ble_gap_update_entries);
   22ef8:	4b10      	ldr	r3, [pc, #64]	; (22f3c <ble_gap_init+0x64>)
   22efa:	601c      	str	r4, [r3, #0]
    SLIST_INIT(&ble_gap_event_listener_list);
   22efc:	4b10      	ldr	r3, [pc, #64]	; (22f40 <ble_gap_init+0x68>)
   22efe:	601c      	str	r4, [r3, #0]

    rc = os_mempool_init(&ble_gap_update_entry_pool,
   22f00:	4b10      	ldr	r3, [pc, #64]	; (22f44 <ble_gap_init+0x6c>)
   22f02:	9300      	str	r3, [sp, #0]
   22f04:	4b10      	ldr	r3, [pc, #64]	; (22f48 <ble_gap_init+0x70>)
   22f06:	2218      	movs	r2, #24
   22f08:	2101      	movs	r1, #1
   22f0a:	4810      	ldr	r0, [pc, #64]	; (22f4c <ble_gap_init+0x74>)
   22f0c:	f7f6 ff7a 	bl	19e04 <os_mempool_init>
                         MYNEWT_VAL(BLE_GAP_MAX_PENDING_CONN_PARAM_UPDATE),
                         sizeof (struct ble_gap_update_entry),
                         ble_gap_update_entry_mem,
                         "ble_gap_update");
    switch (rc) {
   22f10:	b120      	cbz	r0, 22f1c <ble_gap_init+0x44>
   22f12:	2801      	cmp	r0, #1
   22f14:	d10c      	bne.n	22f30 <ble_gap_init+0x58>
   22f16:	2006      	movs	r0, #6

    return 0;

err:
    return rc;
}
   22f18:	b002      	add	sp, #8
   22f1a:	bd10      	pop	{r4, pc}
    rc = stats_init_and_reg(
   22f1c:	4b0c      	ldr	r3, [pc, #48]	; (22f50 <ble_gap_init+0x78>)
   22f1e:	9301      	str	r3, [sp, #4]
   22f20:	2300      	movs	r3, #0
   22f22:	9300      	str	r3, [sp, #0]
   22f24:	221f      	movs	r2, #31
   22f26:	2104      	movs	r1, #4
   22f28:	480a      	ldr	r0, [pc, #40]	; (22f54 <ble_gap_init+0x7c>)
   22f2a:	f7fa fffb 	bl	1df24 <stats_init_and_reg>
    if (rc != 0) {
   22f2e:	e7f3      	b.n	22f18 <ble_gap_init+0x40>
        rc = BLE_HS_EOS;
   22f30:	200b      	movs	r0, #11
   22f32:	e7f1      	b.n	22f18 <ble_gap_init+0x40>
   22f34:	10005ac4 	.word	0x10005ac4
   22f38:	10005ae8 	.word	0x10005ae8
   22f3c:	10005a8c 	.word	0x10005a8c
   22f40:	10005a00 	.word	0x10005a00
   22f44:	000348bc 	.word	0x000348bc
   22f48:	10005a90 	.word	0x10005a90
   22f4c:	10005aa8 	.word	0x10005aa8
   22f50:	000348cc 	.word	0x000348cc
   22f54:	10005a04 	.word	0x10005a04

00022f58 <ble_gattc_rx_entry_find>:
 * $rx entry                                                                 *
 *****************************************************************************/

static const void *
ble_gattc_rx_entry_find(uint8_t op, const void *rx_entries, int num_entries)
{
   22f58:	b430      	push	{r4, r5}
   22f5a:	4605      	mov	r5, r0

    const struct gen_entry *entries;
    int i;

    entries = rx_entries;
    for (i = 0; i < num_entries; i++) {
   22f5c:	2300      	movs	r3, #0
   22f5e:	4293      	cmp	r3, r2
   22f60:	da07      	bge.n	22f72 <ble_gattc_rx_entry_find+0x1a>
        if (entries[i].op == op) {
   22f62:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   22f66:	f811 4033 	ldrb.w	r4, [r1, r3, lsl #3]
   22f6a:	42ac      	cmp	r4, r5
   22f6c:	d002      	beq.n	22f74 <ble_gattc_rx_entry_find+0x1c>
    for (i = 0; i < num_entries; i++) {
   22f6e:	3301      	adds	r3, #1
   22f70:	e7f5      	b.n	22f5e <ble_gattc_rx_entry_find+0x6>
            return entries + i;
        }
    }

    return NULL;
   22f72:	2000      	movs	r0, #0
}
   22f74:	bc30      	pop	{r4, r5}
   22f76:	4770      	bx	lr

00022f78 <ble_gattc_err_dispatch_get>:
static ble_gattc_err_fn *
ble_gattc_err_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_err_dispatch[op];
}
   22f78:	4b01      	ldr	r3, [pc, #4]	; (22f80 <ble_gattc_err_dispatch_get+0x8>)
   22f7a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   22f7e:	4770      	bx	lr
   22f80:	00034b1c 	.word	0x00034b1c

00022f84 <ble_gattc_resume_dispatch_get>:
static ble_gattc_resume_fn *
ble_gattc_resume_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_resume_dispatch[op];
}
   22f84:	4b01      	ldr	r3, [pc, #4]	; (22f8c <ble_gattc_resume_dispatch_get+0x8>)
   22f86:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   22f8a:	4770      	bx	lr
   22f8c:	00034b58 	.word	0x00034b58

00022f90 <ble_gattc_tmo_dispatch_get>:
static ble_gattc_tmo_fn *
ble_gattc_tmo_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_tmo_dispatch[op];
}
   22f90:	4b01      	ldr	r3, [pc, #4]	; (22f98 <ble_gattc_tmo_dispatch_get+0x8>)
   22f92:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   22f96:	4770      	bx	lr
   22f98:	00034c0c 	.word	0x00034c0c

00022f9c <ble_gattc_proc_matches_conn_op>:
{
    const struct ble_gattc_criteria_conn_op *criteria;

    criteria = arg;

    if (criteria->conn_handle != proc->conn_handle) {
   22f9c:	880a      	ldrh	r2, [r1, #0]
   22f9e:	8903      	ldrh	r3, [r0, #8]
   22fa0:	429a      	cmp	r2, r3
   22fa2:	d107      	bne.n	22fb4 <ble_gattc_proc_matches_conn_op+0x18>
        return 0;
    }

    if (criteria->op != proc->op && criteria->op != BLE_GATT_OP_NONE) {
   22fa4:	788b      	ldrb	r3, [r1, #2]
   22fa6:	7a82      	ldrb	r2, [r0, #10]
   22fa8:	4293      	cmp	r3, r2
   22faa:	d005      	beq.n	22fb8 <ble_gattc_proc_matches_conn_op+0x1c>
   22fac:	2bff      	cmp	r3, #255	; 0xff
   22fae:	d105      	bne.n	22fbc <ble_gattc_proc_matches_conn_op+0x20>
        return 0;
    }

    return 1;
   22fb0:	2001      	movs	r0, #1
   22fb2:	4770      	bx	lr
        return 0;
   22fb4:	2000      	movs	r0, #0
   22fb6:	4770      	bx	lr
    return 1;
   22fb8:	2001      	movs	r0, #1
   22fba:	4770      	bx	lr
        return 0;
   22fbc:	2000      	movs	r0, #0
}
   22fbe:	4770      	bx	lr

00022fc0 <ble_gattc_proc_matches_expired>:
    struct ble_gattc_criteria_exp *criteria;
    int32_t time_diff;

    criteria = arg;

    time_diff = proc->exp_os_ticks - criteria->now;
   22fc0:	6843      	ldr	r3, [r0, #4]
   22fc2:	680a      	ldr	r2, [r1, #0]
   22fc4:	1a9b      	subs	r3, r3, r2

    if (time_diff <= 0) {
   22fc6:	2b00      	cmp	r3, #0
   22fc8:	dd05      	ble.n	22fd6 <ble_gattc_proc_matches_expired+0x16>
        /* Procedure is expired. */
        return 1;
    }

    /* Procedure isn't expired; determine if it is the next to expire. */
    if (time_diff < criteria->next_exp_in) {
   22fca:	684a      	ldr	r2, [r1, #4]
   22fcc:	429a      	cmp	r2, r3
   22fce:	dd04      	ble.n	22fda <ble_gattc_proc_matches_expired+0x1a>
        criteria->next_exp_in = time_diff;
   22fd0:	604b      	str	r3, [r1, #4]
    }
    return 0;
   22fd2:	2000      	movs	r0, #0
   22fd4:	4770      	bx	lr
        return 1;
   22fd6:	2001      	movs	r0, #1
   22fd8:	4770      	bx	lr
    return 0;
   22fda:	2000      	movs	r0, #0
}
   22fdc:	4770      	bx	lr

00022fde <ble_gattc_proc_matches_conn_rx_entry>:
    const void *matching_rx_entry;
};

static int
ble_gattc_proc_matches_conn_rx_entry(struct ble_gattc_proc *proc, void *arg)
{
   22fde:	b510      	push	{r4, lr}
   22fe0:	460c      	mov	r4, r1
    struct ble_gattc_criteria_conn_rx_entry *criteria;

    criteria = arg;

    if (criteria->conn_handle != BLE_HS_CONN_HANDLE_NONE &&
   22fe2:	880b      	ldrh	r3, [r1, #0]
   22fe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   22fe8:	4293      	cmp	r3, r2
   22fea:	d002      	beq.n	22ff2 <ble_gattc_proc_matches_conn_rx_entry+0x14>
        criteria->conn_handle != proc->conn_handle) {
   22fec:	8902      	ldrh	r2, [r0, #8]
    if (criteria->conn_handle != BLE_HS_CONN_HANDLE_NONE &&
   22fee:	4293      	cmp	r3, r2
   22ff0:	d109      	bne.n	23006 <ble_gattc_proc_matches_conn_rx_entry+0x28>

        return 0;
    }

    /* Entry matches; indicate corresponding rx entry. */
    criteria->matching_rx_entry = ble_gattc_rx_entry_find(
   22ff2:	68a2      	ldr	r2, [r4, #8]
   22ff4:	6861      	ldr	r1, [r4, #4]
   22ff6:	7a80      	ldrb	r0, [r0, #10]
   22ff8:	f7ff ffae 	bl	22f58 <ble_gattc_rx_entry_find>
   22ffc:	60e0      	str	r0, [r4, #12]
        proc->op, criteria->rx_entries, criteria->num_rx_entries);

    return (criteria->matching_rx_entry != NULL);
   22ffe:	3800      	subs	r0, #0
   23000:	bf18      	it	ne
   23002:	2001      	movne	r0, #1
}
   23004:	bd10      	pop	{r4, pc}
        return 0;
   23006:	2000      	movs	r0, #0
   23008:	e7fc      	b.n	23004 <ble_gattc_proc_matches_conn_rx_entry+0x26>

0002300a <ble_gattc_proc_matches_stalled>:
}

static int
ble_gattc_proc_matches_stalled(struct ble_gattc_proc *proc, void *unused)
{
    return proc->flags & BLE_GATTC_PROC_F_STALLED;
   2300a:	7ac0      	ldrb	r0, [r0, #11]
}
   2300c:	f000 0001 	and.w	r0, r0, #1
   23010:	4770      	bx	lr

00023012 <ble_gattc_proc_timeout>:
    return diff;
}

static void
ble_gattc_proc_timeout(struct ble_gattc_proc *proc)
{
   23012:	b510      	push	{r4, lr}
   23014:	4604      	mov	r4, r0
    ble_gattc_tmo_fn *cb;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    cb = ble_gattc_tmo_dispatch_get(proc->op);
   23016:	7a80      	ldrb	r0, [r0, #10]
   23018:	f7ff ffba 	bl	22f90 <ble_gattc_tmo_dispatch_get>
    if (cb != NULL) {
   2301c:	b110      	cbz	r0, 23024 <ble_gattc_proc_timeout+0x12>
   2301e:	4603      	mov	r3, r0
        cb(proc);
   23020:	4620      	mov	r0, r4
   23022:	4798      	blx	r3
    }
}
   23024:	bd10      	pop	{r4, pc}
	...

00023028 <ble_gattc_error>:
ble_gattc_error(int status, uint16_t att_handle)
{
    static struct ble_gatt_error error;

    /* For consistency, always indicate a handle of 0 on success. */
    if (status == 0 || status == BLE_HS_EDONE) {
   23028:	4603      	mov	r3, r0
   2302a:	b118      	cbz	r0, 23034 <ble_gattc_error+0xc>
   2302c:	280e      	cmp	r0, #14
   2302e:	d102      	bne.n	23036 <ble_gattc_error+0xe>
        att_handle = 0;
   23030:	2100      	movs	r1, #0
   23032:	e000      	b.n	23036 <ble_gattc_error+0xe>
   23034:	2100      	movs	r1, #0
    }

    error.status = status;
   23036:	4802      	ldr	r0, [pc, #8]	; (23040 <ble_gattc_error+0x18>)
   23038:	8003      	strh	r3, [r0, #0]
    error.att_handle = att_handle;
   2303a:	8041      	strh	r1, [r0, #2]
    return &error;
}
   2303c:	4770      	bx	lr
   2303e:	bf00      	nop
   23040:	10005c9c 	.word	0x10005c9c

00023044 <ble_gattc_mtu_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_mtu_cb(struct ble_gattc_proc *proc, int status, uint16_t att_handle,
                 uint16_t mtu)
{
   23044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23046:	4604      	mov	r4, r0
   23048:	461e      	mov	r6, r3
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   2304a:	4608      	mov	r0, r1
   2304c:	b129      	cbz	r1, 2305a <ble_gattc_mtu_cb+0x16>
   2304e:	290e      	cmp	r1, #14
   23050:	d003      	beq.n	2305a <ble_gattc_mtu_cb+0x16>
        STATS_INC(ble_gattc_stats, mtu_fail);
   23052:	4909      	ldr	r1, [pc, #36]	; (23078 <ble_gattc_mtu_cb+0x34>)
   23054:	690b      	ldr	r3, [r1, #16]
   23056:	3301      	adds	r3, #1
   23058:	610b      	str	r3, [r1, #16]
    }

    if (proc->mtu.cb == NULL) {
   2305a:	68e5      	ldr	r5, [r4, #12]
   2305c:	b14d      	cbz	r5, 23072 <ble_gattc_mtu_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->mtu.cb(proc->conn_handle,
   2305e:	8927      	ldrh	r7, [r4, #8]
                          ble_gattc_error(status, att_handle),
   23060:	4611      	mov	r1, r2
   23062:	f7ff ffe1 	bl	23028 <ble_gattc_error>
   23066:	4601      	mov	r1, r0
        rc = proc->mtu.cb(proc->conn_handle,
   23068:	6923      	ldr	r3, [r4, #16]
   2306a:	4632      	mov	r2, r6
   2306c:	4638      	mov	r0, r7
   2306e:	47a8      	blx	r5
                          mtu, proc->mtu.cb_arg);
    }

    return rc;
}
   23070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   23072:	2000      	movs	r0, #0
    return rc;
   23074:	e7fc      	b.n	23070 <ble_gattc_mtu_cb+0x2c>
   23076:	bf00      	nop
   23078:	10005c04 	.word	0x10005c04

0002307c <ble_gattc_mtu_tmo>:

static void
ble_gattc_mtu_tmo(struct ble_gattc_proc *proc)
{
   2307c:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_mtu_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   2307e:	2300      	movs	r3, #0
   23080:	461a      	mov	r2, r3
   23082:	210d      	movs	r1, #13
   23084:	f7ff ffde 	bl	23044 <ble_gattc_mtu_cb>
}
   23088:	bd08      	pop	{r3, pc}

0002308a <ble_gattc_mtu_err>:
/**
 * Handles an incoming ATT error response for the specified mtu-exchange proc.
 */
static void
ble_gattc_mtu_err(struct ble_gattc_proc *proc, int status, uint16_t att_handle)
{
   2308a:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_mtu_cb(proc, status, att_handle, 0);
   2308c:	2300      	movs	r3, #0
   2308e:	f7ff ffd9 	bl	23044 <ble_gattc_mtu_cb>
}
   23092:	bd08      	pop	{r3, pc}

00023094 <ble_gattc_disc_all_svcs_cb>:
 */
static int
ble_gattc_disc_all_svcs_cb(struct ble_gattc_proc *proc,
                           uint16_t status, uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   23094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23096:	4604      	mov	r4, r0
   23098:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(service != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   2309a:	4608      	mov	r0, r1
   2309c:	b129      	cbz	r1, 230aa <ble_gattc_disc_all_svcs_cb+0x16>
   2309e:	290e      	cmp	r1, #14
   230a0:	d003      	beq.n	230aa <ble_gattc_disc_all_svcs_cb+0x16>
        STATS_INC(ble_gattc_stats, disc_all_svcs_fail);
   230a2:	4909      	ldr	r1, [pc, #36]	; (230c8 <ble_gattc_disc_all_svcs_cb+0x34>)
   230a4:	698b      	ldr	r3, [r1, #24]
   230a6:	3301      	adds	r3, #1
   230a8:	618b      	str	r3, [r1, #24]
    }

    if (proc->disc_all_svcs.cb == NULL) {
   230aa:	6925      	ldr	r5, [r4, #16]
   230ac:	b14d      	cbz	r5, 230c2 <ble_gattc_disc_all_svcs_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->disc_all_svcs.cb(proc->conn_handle,
   230ae:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle),
   230b0:	4611      	mov	r1, r2
   230b2:	f7ff ffb9 	bl	23028 <ble_gattc_error>
   230b6:	4601      	mov	r1, r0
        rc = proc->disc_all_svcs.cb(proc->conn_handle,
   230b8:	6963      	ldr	r3, [r4, #20]
   230ba:	4632      	mov	r2, r6
   230bc:	4638      	mov	r0, r7
   230be:	47a8      	blx	r5
                                    service, proc->disc_all_svcs.cb_arg);
    }

    return rc;
}
   230c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   230c2:	2000      	movs	r0, #0
    return rc;
   230c4:	e7fc      	b.n	230c0 <ble_gattc_disc_all_svcs_cb+0x2c>
   230c6:	bf00      	nop
   230c8:	10005c04 	.word	0x10005c04

000230cc <ble_gattc_disc_all_svcs_tmo>:

static void
ble_gattc_disc_all_svcs_tmo(struct ble_gattc_proc *proc)
{
   230cc:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_svcs_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   230ce:	2300      	movs	r3, #0
   230d0:	461a      	mov	r2, r3
   230d2:	210d      	movs	r1, #13
   230d4:	f7ff ffde 	bl	23094 <ble_gattc_disc_all_svcs_cb>
}
   230d8:	bd08      	pop	{r3, pc}

000230da <ble_gattc_disc_all_svcs_err>:
 * discover-all-services proc.
 */
static void
ble_gattc_disc_all_svcs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   230da:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   230dc:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   230e0:	d004      	beq.n	230ec <ble_gattc_disc_all_svcs_err+0x12>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_svcs_cb(proc, status, att_handle, NULL);
   230e2:	2300      	movs	r3, #0
   230e4:	b289      	uxth	r1, r1
   230e6:	f7ff ffd5 	bl	23094 <ble_gattc_disc_all_svcs_cb>
}
   230ea:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   230ec:	210e      	movs	r1, #14
   230ee:	e7f8      	b.n	230e2 <ble_gattc_disc_all_svcs_err+0x8>

000230f0 <ble_gattc_disc_svc_uuid_cb>:
 */
static int
ble_gattc_disc_svc_uuid_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   230f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   230f2:	4604      	mov	r4, r0
   230f4:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(service != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   230f6:	4608      	mov	r0, r1
   230f8:	b129      	cbz	r1, 23106 <ble_gattc_disc_svc_uuid_cb+0x16>
   230fa:	290e      	cmp	r1, #14
   230fc:	d003      	beq.n	23106 <ble_gattc_disc_svc_uuid_cb+0x16>
        STATS_INC(ble_gattc_stats, disc_svc_uuid_fail);
   230fe:	4909      	ldr	r1, [pc, #36]	; (23124 <ble_gattc_disc_svc_uuid_cb+0x34>)
   23100:	6a0b      	ldr	r3, [r1, #32]
   23102:	3301      	adds	r3, #1
   23104:	620b      	str	r3, [r1, #32]
    }

    if (proc->disc_svc_uuid.cb == NULL) {
   23106:	6a65      	ldr	r5, [r4, #36]	; 0x24
   23108:	b14d      	cbz	r5, 2311e <ble_gattc_disc_svc_uuid_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->disc_svc_uuid.cb(proc->conn_handle,
   2310a:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle),
   2310c:	4611      	mov	r1, r2
   2310e:	f7ff ff8b 	bl	23028 <ble_gattc_error>
   23112:	4601      	mov	r1, r0
        rc = proc->disc_svc_uuid.cb(proc->conn_handle,
   23114:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23116:	4632      	mov	r2, r6
   23118:	4638      	mov	r0, r7
   2311a:	47a8      	blx	r5
                                    service, proc->disc_svc_uuid.cb_arg);
    }

    return rc;
}
   2311c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   2311e:	2000      	movs	r0, #0
    return rc;
   23120:	e7fc      	b.n	2311c <ble_gattc_disc_svc_uuid_cb+0x2c>
   23122:	bf00      	nop
   23124:	10005c04 	.word	0x10005c04

00023128 <ble_gattc_disc_svc_uuid_tmo>:

static void
ble_gattc_disc_svc_uuid_tmo(struct ble_gattc_proc *proc)
{
   23128:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_svc_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   2312a:	2300      	movs	r3, #0
   2312c:	461a      	mov	r2, r3
   2312e:	210d      	movs	r1, #13
   23130:	f7ff ffde 	bl	230f0 <ble_gattc_disc_svc_uuid_cb>
}
   23134:	bd08      	pop	{r3, pc}

00023136 <ble_gattc_disc_svc_uuid_err>:
 * discover-service-by-uuid proc.
 */
static void
ble_gattc_disc_svc_uuid_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   23136:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   23138:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   2313c:	d003      	beq.n	23146 <ble_gattc_disc_svc_uuid_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_svc_uuid_cb(proc, status, att_handle, NULL);
   2313e:	2300      	movs	r3, #0
   23140:	f7ff ffd6 	bl	230f0 <ble_gattc_disc_svc_uuid_cb>
}
   23144:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   23146:	210e      	movs	r1, #14
   23148:	e7f9      	b.n	2313e <ble_gattc_disc_svc_uuid_err+0x8>

0002314a <ble_gattc_disc_svc_uuid_rx_hinfo>:
 * the specified discover-service-by-uuid proc.
 */
static int
ble_gattc_disc_svc_uuid_rx_hinfo(struct ble_gattc_proc *proc,
                                 struct ble_att_find_type_value_hinfo *hinfo)
{
   2314a:	b570      	push	{r4, r5, r6, lr}
   2314c:	b086      	sub	sp, #24
   2314e:	4604      	mov	r4, r0
    int cbrc;
    int rc;

    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (hinfo->group_end_handle <= proc->disc_svc_uuid.prev_handle) {
   23150:	884b      	ldrh	r3, [r1, #2]
   23152:	8c02      	ldrh	r2, [r0, #32]
   23154:	4293      	cmp	r3, r2
   23156:	d917      	bls.n	23188 <ble_gattc_disc_svc_uuid_rx_hinfo+0x3e>
        /* Peer sent services out of order; terminate procedure. */
        rc = BLE_HS_EBADDATA;
        goto done;
    }

    proc->disc_svc_uuid.prev_handle = hinfo->group_end_handle;
   23158:	8403      	strh	r3, [r0, #32]

    service.start_handle = hinfo->attr_handle;
   2315a:	880a      	ldrh	r2, [r1, #0]
   2315c:	f8ad 2000 	strh.w	r2, [sp]
    service.end_handle = hinfo->group_end_handle;
   23160:	f8ad 3002 	strh.w	r3, [sp, #2]
    service.uuid = proc->disc_svc_uuid.service_uuid;
   23164:	ad01      	add	r5, sp, #4
   23166:	f100 060c 	add.w	r6, r0, #12
   2316a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2316c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2316e:	6833      	ldr	r3, [r6, #0]
   23170:	602b      	str	r3, [r5, #0]

    rc = 0;
   23172:	2500      	movs	r5, #0

done:
    cbrc = ble_gattc_disc_svc_uuid_cb(proc, rc, 0, &service);
   23174:	466b      	mov	r3, sp
   23176:	2200      	movs	r2, #0
   23178:	4629      	mov	r1, r5
   2317a:	4620      	mov	r0, r4
   2317c:	f7ff ffb8 	bl	230f0 <ble_gattc_disc_svc_uuid_cb>
    if (rc != 0 || cbrc != 0) {
   23180:	b935      	cbnz	r5, 23190 <ble_gattc_disc_svc_uuid_rx_hinfo+0x46>
   23182:	b918      	cbnz	r0, 2318c <ble_gattc_disc_svc_uuid_rx_hinfo+0x42>
        return BLE_HS_EDONE;
    } else {
        return 0;
    }
}
   23184:	b006      	add	sp, #24
   23186:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_EBADDATA;
   23188:	250a      	movs	r5, #10
   2318a:	e7f3      	b.n	23174 <ble_gattc_disc_svc_uuid_rx_hinfo+0x2a>
        return BLE_HS_EDONE;
   2318c:	200e      	movs	r0, #14
   2318e:	e7f9      	b.n	23184 <ble_gattc_disc_svc_uuid_rx_hinfo+0x3a>
   23190:	200e      	movs	r0, #14
   23192:	e7f7      	b.n	23184 <ble_gattc_disc_svc_uuid_rx_hinfo+0x3a>

00023194 <ble_gattc_find_inc_svcs_cb>:
 */
static int
ble_gattc_find_inc_svcs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   23194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23196:	4604      	mov	r4, r0
   23198:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(service != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   2319a:	4608      	mov	r0, r1
   2319c:	b129      	cbz	r1, 231aa <ble_gattc_find_inc_svcs_cb+0x16>
   2319e:	290e      	cmp	r1, #14
   231a0:	d003      	beq.n	231aa <ble_gattc_find_inc_svcs_cb+0x16>
        STATS_INC(ble_gattc_stats, find_inc_svcs_fail);
   231a2:	4909      	ldr	r1, [pc, #36]	; (231c8 <ble_gattc_find_inc_svcs_cb+0x34>)
   231a4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   231a6:	3301      	adds	r3, #1
   231a8:	628b      	str	r3, [r1, #40]	; 0x28
    }

    if (proc->find_inc_svcs.cb == NULL) {
   231aa:	6965      	ldr	r5, [r4, #20]
   231ac:	b14d      	cbz	r5, 231c2 <ble_gattc_find_inc_svcs_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->find_inc_svcs.cb(proc->conn_handle,
   231ae:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle),
   231b0:	4611      	mov	r1, r2
   231b2:	f7ff ff39 	bl	23028 <ble_gattc_error>
   231b6:	4601      	mov	r1, r0
        rc = proc->find_inc_svcs.cb(proc->conn_handle,
   231b8:	69a3      	ldr	r3, [r4, #24]
   231ba:	4632      	mov	r2, r6
   231bc:	4638      	mov	r0, r7
   231be:	47a8      	blx	r5
                                    service, proc->find_inc_svcs.cb_arg);
    }

    return rc;
}
   231c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   231c2:	2000      	movs	r0, #0
    return rc;
   231c4:	e7fc      	b.n	231c0 <ble_gattc_find_inc_svcs_cb+0x2c>
   231c6:	bf00      	nop
   231c8:	10005c04 	.word	0x10005c04

000231cc <ble_gattc_find_inc_svcs_tmo>:

static void
ble_gattc_find_inc_svcs_tmo(struct ble_gattc_proc *proc)
{
   231cc:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_find_inc_svcs_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   231ce:	2300      	movs	r3, #0
   231d0:	461a      	mov	r2, r3
   231d2:	210d      	movs	r1, #13
   231d4:	f7ff ffde 	bl	23194 <ble_gattc_find_inc_svcs_cb>
}
   231d8:	bd08      	pop	{r3, pc}

000231da <ble_gattc_find_inc_svcs_err>:
 * find-included-services proc.
 */
static void
ble_gattc_find_inc_svcs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   231da:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (proc->find_inc_svcs.cur_start == 0 &&
   231dc:	8a03      	ldrh	r3, [r0, #16]
   231de:	b913      	cbnz	r3, 231e6 <ble_gattc_find_inc_svcs_err+0xc>
   231e0:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   231e4:	d003      	beq.n	231ee <ble_gattc_find_inc_svcs_err+0x14>

        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_find_inc_svcs_cb(proc, status, att_handle, NULL);
   231e6:	2300      	movs	r3, #0
   231e8:	f7ff ffd4 	bl	23194 <ble_gattc_find_inc_svcs_cb>
}
   231ec:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   231ee:	210e      	movs	r1, #14
   231f0:	e7f9      	b.n	231e6 <ble_gattc_find_inc_svcs_err+0xc>
	...

000231f4 <ble_gattc_disc_all_chrs_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_all_chrs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_chr *chr)
{
   231f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   231f6:	4604      	mov	r4, r0
   231f8:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(chr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   231fa:	4608      	mov	r0, r1
   231fc:	b129      	cbz	r1, 2320a <ble_gattc_disc_all_chrs_cb+0x16>
   231fe:	290e      	cmp	r1, #14
   23200:	d003      	beq.n	2320a <ble_gattc_disc_all_chrs_cb+0x16>
        STATS_INC(ble_gattc_stats, disc_all_chrs_fail);
   23202:	4909      	ldr	r1, [pc, #36]	; (23228 <ble_gattc_disc_all_chrs_cb+0x34>)
   23204:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   23206:	3301      	adds	r3, #1
   23208:	630b      	str	r3, [r1, #48]	; 0x30
    }

    if (proc->disc_all_chrs.cb == NULL) {
   2320a:	6925      	ldr	r5, [r4, #16]
   2320c:	b14d      	cbz	r5, 23222 <ble_gattc_disc_all_chrs_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->disc_all_chrs.cb(proc->conn_handle,
   2320e:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle), chr,
   23210:	4611      	mov	r1, r2
   23212:	f7ff ff09 	bl	23028 <ble_gattc_error>
   23216:	4601      	mov	r1, r0
        rc = proc->disc_all_chrs.cb(proc->conn_handle,
   23218:	6963      	ldr	r3, [r4, #20]
   2321a:	4632      	mov	r2, r6
   2321c:	4638      	mov	r0, r7
   2321e:	47a8      	blx	r5
                                    proc->disc_all_chrs.cb_arg);
    }

    return rc;
}
   23220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   23222:	2000      	movs	r0, #0
    return rc;
   23224:	e7fc      	b.n	23220 <ble_gattc_disc_all_chrs_cb+0x2c>
   23226:	bf00      	nop
   23228:	10005c04 	.word	0x10005c04

0002322c <ble_gattc_disc_all_chrs_tmo>:

static void
ble_gattc_disc_all_chrs_tmo(struct ble_gattc_proc *proc)
{
   2322c:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_chrs_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   2322e:	2300      	movs	r3, #0
   23230:	461a      	mov	r2, r3
   23232:	210d      	movs	r1, #13
   23234:	f7ff ffde 	bl	231f4 <ble_gattc_disc_all_chrs_cb>
}
   23238:	bd08      	pop	{r3, pc}

0002323a <ble_gattc_disc_all_chrs_err>:
 * discover-all-characteristics proc.
 */
static void
ble_gattc_disc_all_chrs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   2323a:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   2323c:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   23240:	d003      	beq.n	2324a <ble_gattc_disc_all_chrs_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_chrs_cb(proc, status, att_handle, NULL);
   23242:	2300      	movs	r3, #0
   23244:	f7ff ffd6 	bl	231f4 <ble_gattc_disc_all_chrs_cb>
}
   23248:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   2324a:	210e      	movs	r1, #14
   2324c:	e7f9      	b.n	23242 <ble_gattc_disc_all_chrs_err+0x8>
	...

00023250 <ble_gattc_disc_chr_uuid_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_chr_uuid_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_chr *chr)
{
   23250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23252:	4604      	mov	r4, r0
   23254:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(chr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   23256:	4608      	mov	r0, r1
   23258:	b129      	cbz	r1, 23266 <ble_gattc_disc_chr_uuid_cb+0x16>
   2325a:	290e      	cmp	r1, #14
   2325c:	d003      	beq.n	23266 <ble_gattc_disc_chr_uuid_cb+0x16>
        STATS_INC(ble_gattc_stats, disc_chrs_uuid_fail);
   2325e:	4909      	ldr	r1, [pc, #36]	; (23284 <ble_gattc_disc_chr_uuid_cb+0x34>)
   23260:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   23262:	3301      	adds	r3, #1
   23264:	638b      	str	r3, [r1, #56]	; 0x38
    }

    if (proc->disc_chr_uuid.cb == NULL) {
   23266:	6a65      	ldr	r5, [r4, #36]	; 0x24
   23268:	b14d      	cbz	r5, 2327e <ble_gattc_disc_chr_uuid_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->disc_chr_uuid.cb(proc->conn_handle,
   2326a:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle), chr,
   2326c:	4611      	mov	r1, r2
   2326e:	f7ff fedb 	bl	23028 <ble_gattc_error>
   23272:	4601      	mov	r1, r0
        rc = proc->disc_chr_uuid.cb(proc->conn_handle,
   23274:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23276:	4632      	mov	r2, r6
   23278:	4638      	mov	r0, r7
   2327a:	47a8      	blx	r5
                                    proc->disc_chr_uuid.cb_arg);
    }

    return rc;
}
   2327c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   2327e:	2000      	movs	r0, #0
    return rc;
   23280:	e7fc      	b.n	2327c <ble_gattc_disc_chr_uuid_cb+0x2c>
   23282:	bf00      	nop
   23284:	10005c04 	.word	0x10005c04

00023288 <ble_gattc_disc_chr_uuid_tmo>:

static void
ble_gattc_disc_chr_uuid_tmo(struct ble_gattc_proc *proc)
{
   23288:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_chr_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   2328a:	2300      	movs	r3, #0
   2328c:	461a      	mov	r2, r3
   2328e:	210d      	movs	r1, #13
   23290:	f7ff ffde 	bl	23250 <ble_gattc_disc_chr_uuid_cb>
}
   23294:	bd08      	pop	{r3, pc}

00023296 <ble_gattc_disc_chr_uuid_err>:
 * discover-characteristic-by-uuid proc.
 */
static void
ble_gattc_disc_chr_uuid_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   23296:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   23298:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   2329c:	d003      	beq.n	232a6 <ble_gattc_disc_chr_uuid_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_chr_uuid_cb(proc, status, att_handle, NULL);
   2329e:	2300      	movs	r3, #0
   232a0:	f7ff ffd6 	bl	23250 <ble_gattc_disc_chr_uuid_cb>
}
   232a4:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   232a6:	210e      	movs	r1, #14
   232a8:	e7f9      	b.n	2329e <ble_gattc_disc_chr_uuid_err+0x8>
	...

000232ac <ble_gattc_disc_all_dscs_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_all_dscs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_dsc *dsc)
{
   232ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   232ae:	b083      	sub	sp, #12
   232b0:	4604      	mov	r4, r0
   232b2:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(dsc != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   232b4:	4608      	mov	r0, r1
   232b6:	b129      	cbz	r1, 232c4 <ble_gattc_disc_all_dscs_cb+0x18>
   232b8:	290e      	cmp	r1, #14
   232ba:	d003      	beq.n	232c4 <ble_gattc_disc_all_dscs_cb+0x18>
        STATS_INC(ble_gattc_stats, disc_all_dscs_fail);
   232bc:	490a      	ldr	r1, [pc, #40]	; (232e8 <ble_gattc_disc_all_dscs_cb+0x3c>)
   232be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   232c0:	3301      	adds	r3, #1
   232c2:	640b      	str	r3, [r1, #64]	; 0x40
    }

    if (proc->disc_all_dscs.cb == NULL) {
   232c4:	6965      	ldr	r5, [r4, #20]
   232c6:	b165      	cbz	r5, 232e2 <ble_gattc_disc_all_dscs_cb+0x36>
        rc = 0;
    } else {
        rc = proc->disc_all_dscs.cb(proc->conn_handle,
   232c8:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle),
   232ca:	4611      	mov	r1, r2
   232cc:	f7ff feac 	bl	23028 <ble_gattc_error>
   232d0:	4601      	mov	r1, r0
        rc = proc->disc_all_dscs.cb(proc->conn_handle,
   232d2:	69a3      	ldr	r3, [r4, #24]
   232d4:	9300      	str	r3, [sp, #0]
   232d6:	4633      	mov	r3, r6
   232d8:	89a2      	ldrh	r2, [r4, #12]
   232da:	4638      	mov	r0, r7
   232dc:	47a8      	blx	r5
                                    proc->disc_all_dscs.chr_val_handle,
                                    dsc, proc->disc_all_dscs.cb_arg);
    }

    return rc;
}
   232de:	b003      	add	sp, #12
   232e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = 0;
   232e2:	2000      	movs	r0, #0
    return rc;
   232e4:	e7fb      	b.n	232de <ble_gattc_disc_all_dscs_cb+0x32>
   232e6:	bf00      	nop
   232e8:	10005c04 	.word	0x10005c04

000232ec <ble_gattc_disc_all_dscs_tmo>:

static void
ble_gattc_disc_all_dscs_tmo(struct ble_gattc_proc *proc)
{
   232ec:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_dscs_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   232ee:	2300      	movs	r3, #0
   232f0:	461a      	mov	r2, r3
   232f2:	210d      	movs	r1, #13
   232f4:	f7ff ffda 	bl	232ac <ble_gattc_disc_all_dscs_cb>
}
   232f8:	bd08      	pop	{r3, pc}

000232fa <ble_gattc_disc_all_dscs_err>:
 * discover-all-descriptors proc.
 */
static void
ble_gattc_disc_all_dscs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   232fa:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   232fc:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   23300:	d003      	beq.n	2330a <ble_gattc_disc_all_dscs_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_dscs_cb(proc, status, att_handle, NULL);
   23302:	2300      	movs	r3, #0
   23304:	f7ff ffd2 	bl	232ac <ble_gattc_disc_all_dscs_cb>
}
   23308:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   2330a:	210e      	movs	r1, #14
   2330c:	e7f9      	b.n	23302 <ble_gattc_disc_all_dscs_err+0x8>

0002330e <ble_gattc_disc_all_dscs_rx_idata>:
 * response for the specified discover-all-descriptors proc.
 */
static int
ble_gattc_disc_all_dscs_rx_idata(struct ble_gattc_proc *proc,
                                 struct ble_att_find_info_idata *idata)
{
   2330e:	b5f0      	push	{r4, r5, r6, r7, lr}
   23310:	b087      	sub	sp, #28
   23312:	4606      	mov	r6, r0
   23314:	460c      	mov	r4, r1
    int cbrc;
    int rc;

    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (idata->attr_handle <= proc->disc_all_dscs.prev_handle) {
   23316:	880b      	ldrh	r3, [r1, #0]
   23318:	89c2      	ldrh	r2, [r0, #14]
   2331a:	4293      	cmp	r3, r2
   2331c:	d914      	bls.n	23348 <ble_gattc_disc_all_dscs_rx_idata+0x3a>
        /* Peer sent descriptors out of order; terminate procedure. */
        rc = BLE_HS_EBADDATA;
        goto done;
    }
    proc->disc_all_dscs.prev_handle = idata->attr_handle;
   2331e:	81c3      	strh	r3, [r0, #14]

    rc = 0;
   23320:	2700      	movs	r7, #0

done:
    dsc.handle = idata->attr_handle;
   23322:	f834 3b04 	ldrh.w	r3, [r4], #4
   23326:	f8ad 3000 	strh.w	r3, [sp]
    dsc.uuid = idata->uuid;
   2332a:	ad01      	add	r5, sp, #4
   2332c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2332e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   23330:	6823      	ldr	r3, [r4, #0]
   23332:	602b      	str	r3, [r5, #0]

    cbrc = ble_gattc_disc_all_dscs_cb(proc, rc, 0, &dsc);
   23334:	466b      	mov	r3, sp
   23336:	2200      	movs	r2, #0
   23338:	4639      	mov	r1, r7
   2333a:	4630      	mov	r0, r6
   2333c:	f7ff ffb6 	bl	232ac <ble_gattc_disc_all_dscs_cb>
    if (rc != 0 || cbrc != 0) {
   23340:	b937      	cbnz	r7, 23350 <ble_gattc_disc_all_dscs_rx_idata+0x42>
   23342:	b918      	cbnz	r0, 2334c <ble_gattc_disc_all_dscs_rx_idata+0x3e>
        return BLE_HS_EDONE;
    } else {
        return 0;
    }
}
   23344:	b007      	add	sp, #28
   23346:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = BLE_HS_EBADDATA;
   23348:	270a      	movs	r7, #10
   2334a:	e7ea      	b.n	23322 <ble_gattc_disc_all_dscs_rx_idata+0x14>
        return BLE_HS_EDONE;
   2334c:	200e      	movs	r0, #14
   2334e:	e7f9      	b.n	23344 <ble_gattc_disc_all_dscs_rx_idata+0x36>
   23350:	200e      	movs	r0, #14
   23352:	e7f7      	b.n	23344 <ble_gattc_disc_all_dscs_rx_idata+0x36>

00023354 <ble_gattc_read_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_cb(struct ble_gattc_proc *proc, int status,
                  uint16_t att_handle, struct ble_gatt_attr *attr)
{
   23354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23356:	4604      	mov	r4, r0
   23358:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(attr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   2335a:	4608      	mov	r0, r1
   2335c:	b129      	cbz	r1, 2336a <ble_gattc_read_cb+0x16>
   2335e:	290e      	cmp	r1, #14
   23360:	d003      	beq.n	2336a <ble_gattc_read_cb+0x16>
        STATS_INC(ble_gattc_stats, read_fail);
   23362:	4909      	ldr	r1, [pc, #36]	; (23388 <ble_gattc_read_cb+0x34>)
   23364:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   23366:	3301      	adds	r3, #1
   23368:	648b      	str	r3, [r1, #72]	; 0x48
    }

    if (proc->read.cb == NULL) {
   2336a:	6925      	ldr	r5, [r4, #16]
   2336c:	b14d      	cbz	r5, 23382 <ble_gattc_read_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->read.cb(proc->conn_handle,
   2336e:	8927      	ldrh	r7, [r4, #8]
                           ble_gattc_error(status, att_handle), attr,
   23370:	4611      	mov	r1, r2
   23372:	f7ff fe59 	bl	23028 <ble_gattc_error>
   23376:	4601      	mov	r1, r0
        rc = proc->read.cb(proc->conn_handle,
   23378:	6963      	ldr	r3, [r4, #20]
   2337a:	4632      	mov	r2, r6
   2337c:	4638      	mov	r0, r7
   2337e:	47a8      	blx	r5
                           proc->read.cb_arg);
    }

    return rc;
}
   23380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   23382:	2000      	movs	r0, #0
    return rc;
   23384:	e7fc      	b.n	23380 <ble_gattc_read_cb+0x2c>
   23386:	bf00      	nop
   23388:	10005c04 	.word	0x10005c04

0002338c <ble_gattc_read_tmo>:

static void
ble_gattc_read_tmo(struct ble_gattc_proc *proc)
{
   2338c:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   2338e:	2300      	movs	r3, #0
   23390:	461a      	mov	r2, r3
   23392:	210d      	movs	r1, #13
   23394:	f7ff ffde 	bl	23354 <ble_gattc_read_cb>
}
   23398:	bd08      	pop	{r3, pc}

0002339a <ble_gattc_read_err>:
 * read-characteristic-value proc.
 */
static void
ble_gattc_read_err(struct ble_gattc_proc *proc, int status,
                   uint16_t att_handle)
{
   2339a:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_cb(proc, status, att_handle, NULL);
   2339c:	2300      	movs	r3, #0
   2339e:	f7ff ffd9 	bl	23354 <ble_gattc_read_cb>
}
   233a2:	bd08      	pop	{r3, pc}

000233a4 <ble_gattc_read_rx_read_rsp>:
 * read-characteristic-value proc.
 */
static int
ble_gattc_read_rx_read_rsp(struct ble_gattc_proc *proc, int status,
                           struct os_mbuf **om)
{
   233a4:	b510      	push	{r4, lr}
   233a6:	b082      	sub	sp, #8
   233a8:	4614      	mov	r4, r2
    struct ble_gatt_attr attr;

    ble_gattc_dbg_assert_proc_not_inserted(proc);

    attr.handle = proc->read.handle;
   233aa:	8983      	ldrh	r3, [r0, #12]
   233ac:	f8ad 3000 	strh.w	r3, [sp]
    attr.offset = 0;
   233b0:	2200      	movs	r2, #0
   233b2:	f8ad 2002 	strh.w	r2, [sp, #2]
    attr.om = *om;
   233b6:	6823      	ldr	r3, [r4, #0]
   233b8:	9301      	str	r3, [sp, #4]

    ble_gattc_read_cb(proc, status, 0, &attr);
   233ba:	466b      	mov	r3, sp
   233bc:	f7ff ffca 	bl	23354 <ble_gattc_read_cb>

    /* Indicate to the caller whether the application consumed the mbuf. */
    *om = attr.om;
   233c0:	9b01      	ldr	r3, [sp, #4]
   233c2:	6023      	str	r3, [r4, #0]

    /* The read operation only has a single request / response exchange. */
    return BLE_HS_EDONE;
}
   233c4:	200e      	movs	r0, #14
   233c6:	b002      	add	sp, #8
   233c8:	bd10      	pop	{r4, pc}
	...

000233cc <ble_gattc_read_uuid_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_uuid_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct ble_gatt_attr *attr)
{
   233cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   233ce:	4604      	mov	r4, r0
   233d0:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(attr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   233d2:	4608      	mov	r0, r1
   233d4:	b129      	cbz	r1, 233e2 <ble_gattc_read_uuid_cb+0x16>
   233d6:	290e      	cmp	r1, #14
   233d8:	d003      	beq.n	233e2 <ble_gattc_read_uuid_cb+0x16>
        STATS_INC(ble_gattc_stats, read_uuid_fail);
   233da:	4909      	ldr	r1, [pc, #36]	; (23400 <ble_gattc_read_uuid_cb+0x34>)
   233dc:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   233de:	3301      	adds	r3, #1
   233e0:	650b      	str	r3, [r1, #80]	; 0x50
    }

    if (proc->read_uuid.cb == NULL) {
   233e2:	6a65      	ldr	r5, [r4, #36]	; 0x24
   233e4:	b14d      	cbz	r5, 233fa <ble_gattc_read_uuid_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->read_uuid.cb(proc->conn_handle,
   233e6:	8927      	ldrh	r7, [r4, #8]
                                ble_gattc_error(status, att_handle), attr,
   233e8:	4611      	mov	r1, r2
   233ea:	f7ff fe1d 	bl	23028 <ble_gattc_error>
   233ee:	4601      	mov	r1, r0
        rc = proc->read_uuid.cb(proc->conn_handle,
   233f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   233f2:	4632      	mov	r2, r6
   233f4:	4638      	mov	r0, r7
   233f6:	47a8      	blx	r5
                                proc->read_uuid.cb_arg);
    }

    return rc;
}
   233f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   233fa:	2000      	movs	r0, #0
    return rc;
   233fc:	e7fc      	b.n	233f8 <ble_gattc_read_uuid_cb+0x2c>
   233fe:	bf00      	nop
   23400:	10005c04 	.word	0x10005c04

00023404 <ble_gattc_read_uuid_tmo>:

static void
ble_gattc_read_uuid_tmo(struct ble_gattc_proc *proc)
{
   23404:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   23406:	2300      	movs	r3, #0
   23408:	461a      	mov	r2, r3
   2340a:	210d      	movs	r1, #13
   2340c:	f7ff ffde 	bl	233cc <ble_gattc_read_uuid_cb>
}
   23410:	bd08      	pop	{r3, pc}

00023412 <ble_gattc_read_uuid_err>:
 * read-using-characteristic-uuid proc.
 */
static void
ble_gattc_read_uuid_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   23412:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_uuid_cb(proc, status, att_handle, NULL);
   23414:	2300      	movs	r3, #0
   23416:	f7ff ffd9 	bl	233cc <ble_gattc_read_uuid_cb>
}
   2341a:	bd08      	pop	{r3, pc}

0002341c <ble_gattc_read_uuid_rx_complete>:
 * Handles a notification that a read-by-type response has been fully
 * processed for the specified read-using-characteristic-uuid proc.
 */
static int
ble_gattc_read_uuid_rx_complete(struct ble_gattc_proc *proc, int status)
{
   2341c:	b510      	push	{r4, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0) {
   2341e:	b931      	cbnz	r1, 2342e <ble_gattc_read_uuid_rx_complete+0x12>
    }

    /* XXX: We may need to send a follow-up request to address the possibility
     * of multiple characteristics with identical UUIDs.
     */
    ble_gattc_read_uuid_cb(proc, BLE_HS_EDONE, 0, NULL);
   23420:	2300      	movs	r3, #0
   23422:	461a      	mov	r2, r3
   23424:	210e      	movs	r1, #14
   23426:	f7ff ffd1 	bl	233cc <ble_gattc_read_uuid_cb>
    return BLE_HS_EDONE;
}
   2342a:	200e      	movs	r0, #14
   2342c:	bd10      	pop	{r4, pc}
        ble_gattc_read_uuid_cb(proc, status, 0, NULL);
   2342e:	2300      	movs	r3, #0
   23430:	461a      	mov	r2, r3
   23432:	f7ff ffcb 	bl	233cc <ble_gattc_read_uuid_cb>
        return BLE_HS_EDONE;
   23436:	e7f8      	b.n	2342a <ble_gattc_read_uuid_rx_complete+0xe>

00023438 <ble_gattc_read_long_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_long_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct ble_gatt_attr *attr)
{
   23438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2343a:	4604      	mov	r4, r0
   2343c:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(attr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   2343e:	4608      	mov	r0, r1
   23440:	b129      	cbz	r1, 2344e <ble_gattc_read_long_cb+0x16>
   23442:	290e      	cmp	r1, #14
   23444:	d003      	beq.n	2344e <ble_gattc_read_long_cb+0x16>
        STATS_INC(ble_gattc_stats, read_long_fail);
   23446:	4909      	ldr	r1, [pc, #36]	; (2346c <ble_gattc_read_long_cb+0x34>)
   23448:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   2344a:	3301      	adds	r3, #1
   2344c:	658b      	str	r3, [r1, #88]	; 0x58
    }

    if (proc->read_long.cb == NULL) {
   2344e:	6925      	ldr	r5, [r4, #16]
   23450:	b14d      	cbz	r5, 23466 <ble_gattc_read_long_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->read_long.cb(proc->conn_handle,
   23452:	8927      	ldrh	r7, [r4, #8]
                                ble_gattc_error(status, att_handle), attr,
   23454:	4611      	mov	r1, r2
   23456:	f7ff fde7 	bl	23028 <ble_gattc_error>
   2345a:	4601      	mov	r1, r0
        rc = proc->read_long.cb(proc->conn_handle,
   2345c:	6963      	ldr	r3, [r4, #20]
   2345e:	4632      	mov	r2, r6
   23460:	4638      	mov	r0, r7
   23462:	47a8      	blx	r5
                                proc->read_long.cb_arg);
    }

    return rc;
}
   23464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   23466:	2000      	movs	r0, #0
    return rc;
   23468:	e7fc      	b.n	23464 <ble_gattc_read_long_cb+0x2c>
   2346a:	bf00      	nop
   2346c:	10005c04 	.word	0x10005c04

00023470 <ble_gattc_read_long_tmo>:

static void
ble_gattc_read_long_tmo(struct ble_gattc_proc *proc)
{
   23470:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_long_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   23472:	2300      	movs	r3, #0
   23474:	461a      	mov	r2, r3
   23476:	210d      	movs	r1, #13
   23478:	f7ff ffde 	bl	23438 <ble_gattc_read_long_cb>
}
   2347c:	bd08      	pop	{r3, pc}

0002347e <ble_gattc_read_long_err>:
 * read-long-characteristic proc.
 */
static void
ble_gattc_read_long_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   2347e:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_long_cb(proc, status, att_handle, NULL);
   23480:	2300      	movs	r3, #0
   23482:	f7ff ffd9 	bl	23438 <ble_gattc_read_long_cb>
}
   23486:	bd08      	pop	{r3, pc}

00023488 <ble_gattc_read_mult_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_mult_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct os_mbuf **om)
{
   23488:	b5f0      	push	{r4, r5, r6, r7, lr}
   2348a:	b083      	sub	sp, #12
   2348c:	4606      	mov	r6, r0
   2348e:	461c      	mov	r4, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(om != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   23490:	4608      	mov	r0, r1
   23492:	b129      	cbz	r1, 234a0 <ble_gattc_read_mult_cb+0x18>
   23494:	290e      	cmp	r1, #14
   23496:	d003      	beq.n	234a0 <ble_gattc_read_mult_cb+0x18>
        STATS_INC(ble_gattc_stats, read_mult_fail);
   23498:	490f      	ldr	r1, [pc, #60]	; (234d8 <ble_gattc_read_mult_cb+0x50>)
   2349a:	6e0b      	ldr	r3, [r1, #96]	; 0x60
   2349c:	3301      	adds	r3, #1
   2349e:	660b      	str	r3, [r1, #96]	; 0x60
    }

    attr.handle = 0;
   234a0:	2300      	movs	r3, #0
   234a2:	f8ad 3000 	strh.w	r3, [sp]
    attr.offset = 0;
   234a6:	f8ad 3002 	strh.w	r3, [sp, #2]
    if (om == NULL) {
   234aa:	b18c      	cbz	r4, 234d0 <ble_gattc_read_mult_cb+0x48>
        attr.om = NULL;
    } else {
        attr.om = *om;
   234ac:	6823      	ldr	r3, [r4, #0]
   234ae:	9301      	str	r3, [sp, #4]
    }

    if (proc->read_mult.cb == NULL) {
   234b0:	6a35      	ldr	r5, [r6, #32]
   234b2:	b17d      	cbz	r5, 234d4 <ble_gattc_read_mult_cb+0x4c>
        rc = 0;
    } else {
        rc = proc->read_mult.cb(proc->conn_handle,
   234b4:	8937      	ldrh	r7, [r6, #8]
                                ble_gattc_error(status, att_handle), &attr,
   234b6:	4611      	mov	r1, r2
   234b8:	f7ff fdb6 	bl	23028 <ble_gattc_error>
   234bc:	4601      	mov	r1, r0
        rc = proc->read_mult.cb(proc->conn_handle,
   234be:	6a73      	ldr	r3, [r6, #36]	; 0x24
   234c0:	466a      	mov	r2, sp
   234c2:	4638      	mov	r0, r7
   234c4:	47a8      	blx	r5
                                proc->read_mult.cb_arg);
    }

    /* Indicate to the caller whether the application consumed the mbuf. */
    if (om != NULL) {
   234c6:	b10c      	cbz	r4, 234cc <ble_gattc_read_mult_cb+0x44>
        *om = attr.om;
   234c8:	9b01      	ldr	r3, [sp, #4]
   234ca:	6023      	str	r3, [r4, #0]
    }

    return rc;
}
   234cc:	b003      	add	sp, #12
   234ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        attr.om = NULL;
   234d0:	9301      	str	r3, [sp, #4]
   234d2:	e7ed      	b.n	234b0 <ble_gattc_read_mult_cb+0x28>
        rc = 0;
   234d4:	2000      	movs	r0, #0
   234d6:	e7f6      	b.n	234c6 <ble_gattc_read_mult_cb+0x3e>
   234d8:	10005c04 	.word	0x10005c04

000234dc <ble_gattc_read_mult_tmo>:

static void
ble_gattc_read_mult_tmo(struct ble_gattc_proc *proc)
{
   234dc:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_mult_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   234de:	2300      	movs	r3, #0
   234e0:	461a      	mov	r2, r3
   234e2:	210d      	movs	r1, #13
   234e4:	f7ff ffd0 	bl	23488 <ble_gattc_read_mult_cb>
}
   234e8:	bd08      	pop	{r3, pc}

000234ea <ble_gattc_read_mult_err>:
 * read-multiple-characteristics proc.
 */
static void
ble_gattc_read_mult_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   234ea:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_mult_cb(proc, status, att_handle, NULL);
   234ec:	2300      	movs	r3, #0
   234ee:	f7ff ffcb 	bl	23488 <ble_gattc_read_mult_cb>
}
   234f2:	bd08      	pop	{r3, pc}

000234f4 <ble_gattc_write_long_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_write_long_cb(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   234f4:	b570      	push	{r4, r5, r6, lr}
   234f6:	4604      	mov	r4, r0
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   234f8:	4608      	mov	r0, r1
   234fa:	b129      	cbz	r1, 23508 <ble_gattc_write_long_cb+0x14>
   234fc:	290e      	cmp	r1, #14
   234fe:	d003      	beq.n	23508 <ble_gattc_write_long_cb+0x14>
        STATS_INC(ble_gattc_stats, write_long_fail);
   23500:	4909      	ldr	r1, [pc, #36]	; (23528 <ble_gattc_write_long_cb+0x34>)
   23502:	6f8b      	ldr	r3, [r1, #120]	; 0x78
   23504:	3301      	adds	r3, #1
   23506:	678b      	str	r3, [r1, #120]	; 0x78
    }

    if (proc->write_long.cb == NULL) {
   23508:	69a5      	ldr	r5, [r4, #24]
   2350a:	b155      	cbz	r5, 23522 <ble_gattc_write_long_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->write_long.cb(proc->conn_handle,
   2350c:	8926      	ldrh	r6, [r4, #8]
                                 ble_gattc_error(status, att_handle),
   2350e:	4611      	mov	r1, r2
   23510:	f7ff fd8a 	bl	23028 <ble_gattc_error>
   23514:	4601      	mov	r1, r0
        rc = proc->write_long.cb(proc->conn_handle,
   23516:	69e3      	ldr	r3, [r4, #28]
   23518:	f104 020c 	add.w	r2, r4, #12
   2351c:	4630      	mov	r0, r6
   2351e:	47a8      	blx	r5
                                 &proc->write_long.attr,
                                 proc->write_long.cb_arg);
    }

    return rc;
}
   23520:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   23522:	2000      	movs	r0, #0
    return rc;
   23524:	e7fc      	b.n	23520 <ble_gattc_write_long_cb+0x2c>
   23526:	bf00      	nop
   23528:	10005c04 	.word	0x10005c04

0002352c <ble_gattc_write_long_tmo>:

static void
ble_gattc_write_long_tmo(struct ble_gattc_proc *proc)
{
   2352c:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_write_long_cb(proc, BLE_HS_ETIMEOUT, 0);
   2352e:	2200      	movs	r2, #0
   23530:	210d      	movs	r1, #13
   23532:	f7ff ffdf 	bl	234f4 <ble_gattc_write_long_cb>
}
   23536:	bd08      	pop	{r3, pc}

00023538 <ble_gattc_write_long_rx_exec>:
 * Handles an incoming execute-write-response for the specified
 * write-long-characteristic-values proc.
 */
static int
ble_gattc_write_long_rx_exec(struct ble_gattc_proc *proc, int status)
{
   23538:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (proc->write_long.attr.offset <
   2353a:	89c2      	ldrh	r2, [r0, #14]
        OS_MBUF_PKTLEN(proc->write_long.attr.om)) {
   2353c:	6903      	ldr	r3, [r0, #16]
   2353e:	8a1b      	ldrh	r3, [r3, #16]
    if (proc->write_long.attr.offset <
   23540:	429a      	cmp	r2, r3
   23542:	d201      	bcs.n	23548 <ble_gattc_write_long_rx_exec+0x10>

        /* Expecting an execute write response, not a prepare write
         * response.
         */
        return BLE_HS_EBADDATA;
   23544:	200a      	movs	r0, #10
    }

    ble_gattc_write_long_cb(proc, status, 0);
    return BLE_HS_EDONE;
}
   23546:	bd08      	pop	{r3, pc}
    ble_gattc_write_long_cb(proc, status, 0);
   23548:	2200      	movs	r2, #0
   2354a:	f7ff ffd3 	bl	234f4 <ble_gattc_write_long_cb>
    return BLE_HS_EDONE;
   2354e:	200e      	movs	r0, #14
   23550:	e7f9      	b.n	23546 <ble_gattc_write_long_rx_exec+0xe>
	...

00023554 <ble_gattc_write_reliable_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_write_reliable_cb(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   23554:	b570      	push	{r4, r5, r6, lr}
   23556:	b082      	sub	sp, #8
   23558:	4604      	mov	r4, r0
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   2355a:	4608      	mov	r0, r1
   2355c:	b139      	cbz	r1, 2356e <ble_gattc_write_reliable_cb+0x1a>
   2355e:	290e      	cmp	r1, #14
   23560:	d005      	beq.n	2356e <ble_gattc_write_reliable_cb+0x1a>
        STATS_INC(ble_gattc_stats, write_reliable_fail);
   23562:	490c      	ldr	r1, [pc, #48]	; (23594 <ble_gattc_write_reliable_cb+0x40>)
   23564:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   23568:	3301      	adds	r3, #1
   2356a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }

    if (proc->write_reliable.cb == NULL) {
   2356e:	6b25      	ldr	r5, [r4, #48]	; 0x30
   23570:	b175      	cbz	r5, 23590 <ble_gattc_write_reliable_cb+0x3c>
        rc = 0;
    } else {
        rc = proc->write_reliable.cb(proc->conn_handle,
   23572:	8926      	ldrh	r6, [r4, #8]
                                     ble_gattc_error(status, att_handle),
   23574:	4611      	mov	r1, r2
   23576:	f7ff fd57 	bl	23028 <ble_gattc_error>
   2357a:	4601      	mov	r1, r0
        rc = proc->write_reliable.cb(proc->conn_handle,
   2357c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2357e:	9300      	str	r3, [sp, #0]
   23580:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   23584:	f104 020c 	add.w	r2, r4, #12
   23588:	4630      	mov	r0, r6
   2358a:	47a8      	blx	r5
                                     proc->write_reliable.num_attrs,
                                     proc->write_reliable.cb_arg);
    }

    return rc;
}
   2358c:	b002      	add	sp, #8
   2358e:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   23590:	2000      	movs	r0, #0
    return rc;
   23592:	e7fb      	b.n	2358c <ble_gattc_write_reliable_cb+0x38>
   23594:	10005c04 	.word	0x10005c04

00023598 <ble_gattc_write_reliable_tmo>:

static void
ble_gattc_write_reliable_tmo(struct ble_gattc_proc *proc)
{
   23598:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_write_reliable_cb(proc, BLE_HS_ETIMEOUT, 0);
   2359a:	2200      	movs	r2, #0
   2359c:	210d      	movs	r1, #13
   2359e:	f7ff ffd9 	bl	23554 <ble_gattc_write_reliable_cb>
}
   235a2:	bd08      	pop	{r3, pc}

000235a4 <ble_gattc_write_reliable_rx_exec>:
 * Handles an incoming execute-write-response for the specified
 * write-reliable-characteristic-values proc.
 */
static int
ble_gattc_write_reliable_rx_exec(struct ble_gattc_proc *proc, int status)
{
   235a4:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_write_reliable_cb(proc, status, 0);
   235a6:	2200      	movs	r2, #0
   235a8:	f7ff ffd4 	bl	23554 <ble_gattc_write_reliable_cb>
    return BLE_HS_EDONE;
}
   235ac:	200e      	movs	r0, #14
   235ae:	bd08      	pop	{r3, pc}

000235b0 <ble_gattc_proc_set_resume_timer>:
{
   235b0:	b508      	push	{r3, lr}
    proc->flags |= BLE_GATTC_PROC_F_STALLED;
   235b2:	7ac3      	ldrb	r3, [r0, #11]
   235b4:	f043 0301 	orr.w	r3, r3, #1
   235b8:	72c3      	strb	r3, [r0, #11]
    if (ble_gattc_resume_at == 0) {
   235ba:	4b07      	ldr	r3, [pc, #28]	; (235d8 <ble_gattc_proc_set_resume_timer+0x28>)
   235bc:	681b      	ldr	r3, [r3, #0]
   235be:	b103      	cbz	r3, 235c2 <ble_gattc_proc_set_resume_timer+0x12>
}
   235c0:	bd08      	pop	{r3, pc}
    return os_time_get();
   235c2:	f7f7 f853 	bl	1a66c <os_time_get>
        ble_gattc_resume_at = ble_npl_time_get() +
   235c6:	3080      	adds	r0, #128	; 0x80
   235c8:	4b03      	ldr	r3, [pc, #12]	; (235d8 <ble_gattc_proc_set_resume_timer+0x28>)
   235ca:	6018      	str	r0, [r3, #0]
        if (ble_gattc_resume_at == 0) {
   235cc:	2800      	cmp	r0, #0
   235ce:	d1f7      	bne.n	235c0 <ble_gattc_proc_set_resume_timer+0x10>
            ble_gattc_resume_at++;
   235d0:	3001      	adds	r0, #1
   235d2:	6018      	str	r0, [r3, #0]
}
   235d4:	e7f4      	b.n	235c0 <ble_gattc_proc_set_resume_timer+0x10>
   235d6:	bf00      	nop
   235d8:	10005c00 	.word	0x10005c00

000235dc <ble_gattc_process_resume_status>:
{
   235dc:	b508      	push	{r3, lr}
    switch (status) {
   235de:	460b      	mov	r3, r1
   235e0:	b121      	cbz	r1, 235ec <ble_gattc_process_resume_status+0x10>
   235e2:	2906      	cmp	r1, #6
   235e4:	d102      	bne.n	235ec <ble_gattc_process_resume_status+0x10>
        ble_gattc_proc_set_resume_timer(proc);
   235e6:	f7ff ffe3 	bl	235b0 <ble_gattc_proc_set_resume_timer>
        return 0;
   235ea:	2300      	movs	r3, #0
}
   235ec:	4618      	mov	r0, r3
   235ee:	bd08      	pop	{r3, pc}

000235f0 <ble_gattc_proc_set_exp_timer>:
{
   235f0:	b510      	push	{r4, lr}
   235f2:	4604      	mov	r4, r0
   235f4:	f7f7 f83a 	bl	1a66c <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   235f8:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   235fc:	6060      	str	r0, [r4, #4]
}
   235fe:	bd10      	pop	{r4, pc}

00023600 <ble_gattc_ticks_until_resume>:
{
   23600:	b508      	push	{r3, lr}
    if (ble_gattc_resume_at == 0) {
   23602:	4b08      	ldr	r3, [pc, #32]	; (23624 <ble_gattc_ticks_until_resume+0x24>)
   23604:	681b      	ldr	r3, [r3, #0]
   23606:	b13b      	cbz	r3, 23618 <ble_gattc_ticks_until_resume+0x18>
   23608:	f7f7 f830 	bl	1a66c <os_time_get>
    diff = ble_gattc_resume_at - now;
   2360c:	4b05      	ldr	r3, [pc, #20]	; (23624 <ble_gattc_ticks_until_resume+0x24>)
   2360e:	681b      	ldr	r3, [r3, #0]
   23610:	1a18      	subs	r0, r3, r0
    if (diff <= 0) {
   23612:	2800      	cmp	r0, #0
   23614:	dd03      	ble.n	2361e <ble_gattc_ticks_until_resume+0x1e>
}
   23616:	bd08      	pop	{r3, pc}
        return BLE_HS_FOREVER;
   23618:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2361c:	e7fb      	b.n	23616 <ble_gattc_ticks_until_resume+0x16>
        return 0;
   2361e:	2000      	movs	r0, #0
   23620:	e7f9      	b.n	23616 <ble_gattc_ticks_until_resume+0x16>
   23622:	bf00      	nop
   23624:	10005c00 	.word	0x10005c00

00023628 <ble_gattc_extract>:
{
   23628:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2362c:	4681      	mov	r9, r0
   2362e:	4688      	mov	r8, r1
   23630:	4692      	mov	sl, r2
   23632:	461f      	mov	r7, r3
    STAILQ_INIT(dst_list);
   23634:	2500      	movs	r5, #0
   23636:	601d      	str	r5, [r3, #0]
   23638:	605b      	str	r3, [r3, #4]
    ble_hs_lock();
   2363a:	f002 ff7d 	bl	26538 <ble_hs_lock>
    proc = STAILQ_FIRST(&ble_gattc_procs);
   2363e:	4b17      	ldr	r3, [pc, #92]	; (2369c <ble_gattc_extract+0x74>)
   23640:	681c      	ldr	r4, [r3, #0]
    num_extracted = 0;
   23642:	46ab      	mov	fp, r5
    while (proc != NULL) {
   23644:	e00b      	b.n	2365e <ble_gattc_extract+0x36>
                STAILQ_REMOVE_HEAD(&ble_gattc_procs, next);
   23646:	4a15      	ldr	r2, [pc, #84]	; (2369c <ble_gattc_extract+0x74>)
   23648:	6813      	ldr	r3, [r2, #0]
   2364a:	681b      	ldr	r3, [r3, #0]
   2364c:	6013      	str	r3, [r2, #0]
   2364e:	b9a3      	cbnz	r3, 2367a <ble_gattc_extract+0x52>
   23650:	6052      	str	r2, [r2, #4]
   23652:	e012      	b.n	2367a <ble_gattc_extract+0x52>
                STAILQ_REMOVE_AFTER(&ble_gattc_procs, prev, next);
   23654:	4b11      	ldr	r3, [pc, #68]	; (2369c <ble_gattc_extract+0x74>)
   23656:	605d      	str	r5, [r3, #4]
   23658:	e00f      	b.n	2367a <ble_gattc_extract+0x52>
            prev = proc;
   2365a:	4625      	mov	r5, r4
   2365c:	4634      	mov	r4, r6
    while (proc != NULL) {
   2365e:	b1c4      	cbz	r4, 23692 <ble_gattc_extract+0x6a>
        next = STAILQ_NEXT(proc, next);
   23660:	6826      	ldr	r6, [r4, #0]
        if (cb(proc, arg)) {
   23662:	4641      	mov	r1, r8
   23664:	4620      	mov	r0, r4
   23666:	47c8      	blx	r9
   23668:	2800      	cmp	r0, #0
   2366a:	d0f6      	beq.n	2365a <ble_gattc_extract+0x32>
            if (prev == NULL) {
   2366c:	2d00      	cmp	r5, #0
   2366e:	d0ea      	beq.n	23646 <ble_gattc_extract+0x1e>
                STAILQ_REMOVE_AFTER(&ble_gattc_procs, prev, next);
   23670:	682b      	ldr	r3, [r5, #0]
   23672:	681b      	ldr	r3, [r3, #0]
   23674:	602b      	str	r3, [r5, #0]
   23676:	2b00      	cmp	r3, #0
   23678:	d0ec      	beq.n	23654 <ble_gattc_extract+0x2c>
            STAILQ_INSERT_TAIL(dst_list, proc, next);
   2367a:	2300      	movs	r3, #0
   2367c:	6023      	str	r3, [r4, #0]
   2367e:	687b      	ldr	r3, [r7, #4]
   23680:	601c      	str	r4, [r3, #0]
   23682:	607c      	str	r4, [r7, #4]
            if (max_procs > 0) {
   23684:	f1ba 0f00 	cmp.w	sl, #0
   23688:	dde8      	ble.n	2365c <ble_gattc_extract+0x34>
                num_extracted++;
   2368a:	f10b 0b01 	add.w	fp, fp, #1
                if (num_extracted >= max_procs) {
   2368e:	45da      	cmp	sl, fp
   23690:	dce4      	bgt.n	2365c <ble_gattc_extract+0x34>
    ble_hs_unlock();
   23692:	f002 ff55 	bl	26540 <ble_hs_unlock>
}
   23696:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2369a:	bf00      	nop
   2369c:	10005bf8 	.word	0x10005bf8

000236a0 <ble_gattc_extract_expired>:
{
   236a0:	b510      	push	{r4, lr}
   236a2:	b082      	sub	sp, #8
   236a4:	4604      	mov	r4, r0
   236a6:	f7f6 ffe1 	bl	1a66c <os_time_get>
    criteria.now = ble_npl_time_get();
   236aa:	9000      	str	r0, [sp, #0]
    criteria.next_exp_in = BLE_HS_FOREVER;
   236ac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   236b0:	9301      	str	r3, [sp, #4]
    STAILQ_INIT(dst_list);
   236b2:	2200      	movs	r2, #0
   236b4:	6022      	str	r2, [r4, #0]
   236b6:	6064      	str	r4, [r4, #4]
    ble_gattc_extract(ble_gattc_proc_matches_expired, &criteria, 0, dst_list);
   236b8:	4623      	mov	r3, r4
   236ba:	4669      	mov	r1, sp
   236bc:	4802      	ldr	r0, [pc, #8]	; (236c8 <ble_gattc_extract_expired+0x28>)
   236be:	f7ff ffb3 	bl	23628 <ble_gattc_extract>
}
   236c2:	9801      	ldr	r0, [sp, #4]
   236c4:	b002      	add	sp, #8
   236c6:	bd10      	pop	{r4, pc}
   236c8:	00022fc1 	.word	0x00022fc1

000236cc <ble_gattc_extract_stalled>:
{
   236cc:	b508      	push	{r3, lr}
   236ce:	4603      	mov	r3, r0
    ble_gattc_extract(ble_gattc_proc_matches_stalled, NULL, 0, dst_list);
   236d0:	2200      	movs	r2, #0
   236d2:	4611      	mov	r1, r2
   236d4:	4801      	ldr	r0, [pc, #4]	; (236dc <ble_gattc_extract_stalled+0x10>)
   236d6:	f7ff ffa7 	bl	23628 <ble_gattc_extract>
}
   236da:	bd08      	pop	{r3, pc}
   236dc:	0002300b 	.word	0x0002300b

000236e0 <ble_gattc_extract_by_conn_op>:
{
   236e0:	b500      	push	{lr}
   236e2:	b083      	sub	sp, #12
    criteria.conn_handle = conn_handle;
   236e4:	f8ad 0004 	strh.w	r0, [sp, #4]
    criteria.op = op;
   236e8:	f88d 1006 	strb.w	r1, [sp, #6]
    ble_gattc_extract(ble_gattc_proc_matches_conn_op, &criteria, max_procs, dst_list);
   236ec:	a901      	add	r1, sp, #4
   236ee:	4803      	ldr	r0, [pc, #12]	; (236fc <ble_gattc_extract_by_conn_op+0x1c>)
   236f0:	f7ff ff9a 	bl	23628 <ble_gattc_extract>
}
   236f4:	b003      	add	sp, #12
   236f6:	f85d fb04 	ldr.w	pc, [sp], #4
   236fa:	bf00      	nop
   236fc:	00022f9d 	.word	0x00022f9d

00023700 <ble_gattc_extract_first_by_conn_op>:
{
   23700:	b500      	push	{lr}
   23702:	b083      	sub	sp, #12
    ble_gattc_extract_by_conn_op(conn_handle, op, 1, &dst_list);
   23704:	466b      	mov	r3, sp
   23706:	2201      	movs	r2, #1
   23708:	f7ff ffea 	bl	236e0 <ble_gattc_extract_by_conn_op>
}
   2370c:	9800      	ldr	r0, [sp, #0]
   2370e:	b003      	add	sp, #12
   23710:	f85d fb04 	ldr.w	pc, [sp], #4

00023714 <ble_gattc_extract_one>:
{
   23714:	b500      	push	{lr}
   23716:	b083      	sub	sp, #12
    ble_gattc_extract(cb, arg, 1, &dst_list);
   23718:	466b      	mov	r3, sp
   2371a:	2201      	movs	r2, #1
   2371c:	f7ff ff84 	bl	23628 <ble_gattc_extract>
}
   23720:	9800      	ldr	r0, [sp, #0]
   23722:	b003      	add	sp, #12
   23724:	f85d fb04 	ldr.w	pc, [sp], #4

00023728 <ble_gattc_extract_with_rx_entry>:
{
   23728:	b510      	push	{r4, lr}
   2372a:	b084      	sub	sp, #16
   2372c:	461c      	mov	r4, r3
    criteria.conn_handle = conn_handle;
   2372e:	f8ad 0000 	strh.w	r0, [sp]
    criteria.rx_entries = rx_entries;
   23732:	9101      	str	r1, [sp, #4]
    criteria.num_rx_entries = num_rx_entries;
   23734:	9202      	str	r2, [sp, #8]
    criteria.matching_rx_entry = NULL;
   23736:	2300      	movs	r3, #0
   23738:	9303      	str	r3, [sp, #12]
    proc = ble_gattc_extract_one(ble_gattc_proc_matches_conn_rx_entry,
   2373a:	4669      	mov	r1, sp
   2373c:	4803      	ldr	r0, [pc, #12]	; (2374c <ble_gattc_extract_with_rx_entry+0x24>)
   2373e:	f7ff ffe9 	bl	23714 <ble_gattc_extract_one>
    *out_rx_entry = criteria.matching_rx_entry;
   23742:	9b03      	ldr	r3, [sp, #12]
   23744:	6023      	str	r3, [r4, #0]
}
   23746:	b004      	add	sp, #16
   23748:	bd10      	pop	{r4, pc}
   2374a:	bf00      	nop
   2374c:	00022fdf 	.word	0x00022fdf

00023750 <ble_gattc_proc_insert>:
{
   23750:	b510      	push	{r4, lr}
   23752:	4604      	mov	r4, r0
    ble_hs_lock();
   23754:	f002 fef0 	bl	26538 <ble_hs_lock>
    STAILQ_INSERT_TAIL(&ble_gattc_procs, proc, next);
   23758:	2300      	movs	r3, #0
   2375a:	6023      	str	r3, [r4, #0]
   2375c:	4b03      	ldr	r3, [pc, #12]	; (2376c <ble_gattc_proc_insert+0x1c>)
   2375e:	685a      	ldr	r2, [r3, #4]
   23760:	6014      	str	r4, [r2, #0]
   23762:	605c      	str	r4, [r3, #4]
    ble_hs_unlock();
   23764:	f002 feec 	bl	26540 <ble_hs_unlock>
}
   23768:	bd10      	pop	{r4, pc}
   2376a:	bf00      	nop
   2376c:	10005bf8 	.word	0x10005bf8

00023770 <ble_gattc_indicate_tmo>:
    ble_gatts_send_next_indicate(proc->conn_handle);
}

static void
ble_gattc_indicate_tmo(struct ble_gattc_proc *proc)
{
   23770:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gap_notify_tx_event(BLE_HS_ETIMEOUT, proc->conn_handle,
   23772:	2301      	movs	r3, #1
   23774:	8982      	ldrh	r2, [r0, #12]
   23776:	8901      	ldrh	r1, [r0, #8]
   23778:	200d      	movs	r0, #13
   2377a:	f7ff fa7e 	bl	22c7a <ble_gap_notify_tx_event>
                            proc->indicate.chr_val_handle, 1);
}
   2377e:	bd08      	pop	{r3, pc}

00023780 <ble_gattc_write_cb>:
{
   23780:	b570      	push	{r4, r5, r6, lr}
   23782:	b082      	sub	sp, #8
   23784:	4604      	mov	r4, r0
    if (status != 0 && status != BLE_HS_EDONE) {
   23786:	4608      	mov	r0, r1
   23788:	b129      	cbz	r1, 23796 <ble_gattc_write_cb+0x16>
   2378a:	290e      	cmp	r1, #14
   2378c:	d003      	beq.n	23796 <ble_gattc_write_cb+0x16>
        STATS_INC(ble_gattc_stats, write_fail);
   2378e:	490c      	ldr	r1, [pc, #48]	; (237c0 <ble_gattc_write_cb+0x40>)
   23790:	6f0b      	ldr	r3, [r1, #112]	; 0x70
   23792:	3301      	adds	r3, #1
   23794:	670b      	str	r3, [r1, #112]	; 0x70
    if (proc->write.cb == NULL) {
   23796:	6925      	ldr	r5, [r4, #16]
   23798:	b185      	cbz	r5, 237bc <ble_gattc_write_cb+0x3c>
        memset(&attr, 0, sizeof attr);
   2379a:	2300      	movs	r3, #0
   2379c:	9300      	str	r3, [sp, #0]
   2379e:	9301      	str	r3, [sp, #4]
        attr.handle = proc->write.att_handle;
   237a0:	89a3      	ldrh	r3, [r4, #12]
   237a2:	f8ad 3000 	strh.w	r3, [sp]
        rc = proc->write.cb(proc->conn_handle,
   237a6:	8926      	ldrh	r6, [r4, #8]
                            ble_gattc_error(status, att_handle),
   237a8:	4611      	mov	r1, r2
   237aa:	f7ff fc3d 	bl	23028 <ble_gattc_error>
   237ae:	4601      	mov	r1, r0
        rc = proc->write.cb(proc->conn_handle,
   237b0:	6963      	ldr	r3, [r4, #20]
   237b2:	466a      	mov	r2, sp
   237b4:	4630      	mov	r0, r6
   237b6:	47a8      	blx	r5
}
   237b8:	b002      	add	sp, #8
   237ba:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   237bc:	2000      	movs	r0, #0
    return rc;
   237be:	e7fb      	b.n	237b8 <ble_gattc_write_cb+0x38>
   237c0:	10005c04 	.word	0x10005c04

000237c4 <ble_gattc_write_tmo>:
{
   237c4:	b508      	push	{r3, lr}
    ble_gattc_write_cb(proc, BLE_HS_ETIMEOUT, 0);
   237c6:	2200      	movs	r2, #0
   237c8:	210d      	movs	r1, #13
   237ca:	f7ff ffd9 	bl	23780 <ble_gattc_write_cb>
}
   237ce:	bd08      	pop	{r3, pc}

000237d0 <ble_gattc_write_err>:
{
   237d0:	b508      	push	{r3, lr}
    ble_gattc_write_cb(proc, status, att_handle);
   237d2:	f7ff ffd5 	bl	23780 <ble_gattc_write_cb>
}
   237d6:	bd08      	pop	{r3, pc}

000237d8 <ble_gattc_proc_free>:
    if (proc != NULL) {
   237d8:	b1e8      	cbz	r0, 23816 <ble_gattc_proc_free+0x3e>
{
   237da:	b538      	push	{r3, r4, r5, lr}
   237dc:	4605      	mov	r5, r0
        switch (proc->op) {
   237de:	7a83      	ldrb	r3, [r0, #10]
   237e0:	2b0c      	cmp	r3, #12
   237e2:	d006      	beq.n	237f2 <ble_gattc_proc_free+0x1a>
   237e4:	2b0d      	cmp	r3, #13
   237e6:	d014      	beq.n	23812 <ble_gattc_proc_free+0x3a>
        rc = os_memblock_put(&ble_gattc_proc_pool, proc);
   237e8:	4629      	mov	r1, r5
   237ea:	480b      	ldr	r0, [pc, #44]	; (23818 <ble_gattc_proc_free+0x40>)
   237ec:	f7f6 fb69 	bl	19ec2 <os_memblock_put>
}
   237f0:	bd38      	pop	{r3, r4, r5, pc}
                os_mbuf_free_chain(proc->write_long.attr.om);
   237f2:	6900      	ldr	r0, [r0, #16]
   237f4:	f7f5 ff0b 	bl	1960e <os_mbuf_free_chain>
            break;
   237f8:	e7f6      	b.n	237e8 <ble_gattc_proc_free+0x10>
                    os_mbuf_free_chain(proc->write_reliable.attrs[i].om);
   237fa:	1c5c      	adds	r4, r3, #1
   237fc:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
   23800:	6898      	ldr	r0, [r3, #8]
   23802:	f7f5 ff04 	bl	1960e <os_mbuf_free_chain>
                for (i = 0; i < proc->write_reliable.num_attrs; i++) {
   23806:	4623      	mov	r3, r4
   23808:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
   2380c:	429a      	cmp	r2, r3
   2380e:	dcf4      	bgt.n	237fa <ble_gattc_proc_free+0x22>
   23810:	e7ea      	b.n	237e8 <ble_gattc_proc_free+0x10>
        switch (proc->op) {
   23812:	2300      	movs	r3, #0
   23814:	e7f8      	b.n	23808 <ble_gattc_proc_free+0x30>
   23816:	4770      	bx	lr
   23818:	10005bdc 	.word	0x10005bdc

0002381c <ble_gattc_fail_procs>:
{
   2381c:	b530      	push	{r4, r5, lr}
   2381e:	b083      	sub	sp, #12
   23820:	4615      	mov	r5, r2
    ble_gattc_extract_by_conn_op(conn_handle, op, 0, &temp_list);
   23822:	466b      	mov	r3, sp
   23824:	2200      	movs	r2, #0
   23826:	f7ff ff5b 	bl	236e0 <ble_gattc_extract_by_conn_op>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   2382a:	e004      	b.n	23836 <ble_gattc_fail_procs+0x1a>
        STAILQ_REMOVE_HEAD(&temp_list, next);
   2382c:	f8cd d004 	str.w	sp, [sp, #4]
        ble_gattc_proc_free(proc);
   23830:	4620      	mov	r0, r4
   23832:	f7ff ffd1 	bl	237d8 <ble_gattc_proc_free>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   23836:	9c00      	ldr	r4, [sp, #0]
   23838:	b16c      	cbz	r4, 23856 <ble_gattc_fail_procs+0x3a>
        err_cb = ble_gattc_err_dispatch_get(proc->op);
   2383a:	7aa0      	ldrb	r0, [r4, #10]
   2383c:	f7ff fb9c 	bl	22f78 <ble_gattc_err_dispatch_get>
   23840:	4603      	mov	r3, r0
        err_cb(proc, status, 0);
   23842:	2200      	movs	r2, #0
   23844:	4629      	mov	r1, r5
   23846:	4620      	mov	r0, r4
   23848:	4798      	blx	r3
        STAILQ_REMOVE_HEAD(&temp_list, next);
   2384a:	9b00      	ldr	r3, [sp, #0]
   2384c:	681b      	ldr	r3, [r3, #0]
   2384e:	9300      	str	r3, [sp, #0]
   23850:	2b00      	cmp	r3, #0
   23852:	d1ed      	bne.n	23830 <ble_gattc_fail_procs+0x14>
   23854:	e7ea      	b.n	2382c <ble_gattc_fail_procs+0x10>
}
   23856:	b003      	add	sp, #12
   23858:	bd30      	pop	{r4, r5, pc}

0002385a <ble_gattc_write_reliable_err>:
{
   2385a:	b510      	push	{r4, lr}
   2385c:	4604      	mov	r4, r0
    ble_gattc_write_reliable_cb(proc, status, att_handle);
   2385e:	f7ff fe79 	bl	23554 <ble_gattc_write_reliable_cb>
    if (proc->write_reliable.cur_attr < proc->write_reliable.num_attrs) {
   23862:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   23866:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   2386a:	429a      	cmp	r2, r3
   2386c:	d300      	bcc.n	23870 <ble_gattc_write_reliable_err+0x16>
}
   2386e:	bd10      	pop	{r4, pc}
        ble_att_clt_tx_exec_write(proc->conn_handle,
   23870:	2100      	movs	r1, #0
   23872:	8920      	ldrh	r0, [r4, #8]
   23874:	f7fb fe89 	bl	1f58a <ble_att_clt_tx_exec_write>
}
   23878:	e7f9      	b.n	2386e <ble_gattc_write_reliable_err+0x14>

0002387a <ble_gattc_write_long_err>:
{
   2387a:	b570      	push	{r4, r5, r6, lr}
   2387c:	4604      	mov	r4, r0
   2387e:	460d      	mov	r5, r1
   23880:	4616      	mov	r6, r2
    if (proc->write_long.attr.offset > 0 &&
   23882:	89c3      	ldrh	r3, [r0, #14]
   23884:	b11b      	cbz	r3, 2388e <ble_gattc_write_long_err+0x14>
            OS_MBUF_PKTLEN(proc->write_long.attr.om)) {
   23886:	6902      	ldr	r2, [r0, #16]
   23888:	8a12      	ldrh	r2, [r2, #16]
    if (proc->write_long.attr.offset > 0 &&
   2388a:	4293      	cmp	r3, r2
   2388c:	d305      	bcc.n	2389a <ble_gattc_write_long_err+0x20>
    ble_gattc_write_long_cb(proc, status, att_handle);
   2388e:	4632      	mov	r2, r6
   23890:	4629      	mov	r1, r5
   23892:	4620      	mov	r0, r4
   23894:	f7ff fe2e 	bl	234f4 <ble_gattc_write_long_cb>
}
   23898:	bd70      	pop	{r4, r5, r6, pc}
        ble_att_clt_tx_exec_write(proc->conn_handle,
   2389a:	2100      	movs	r1, #0
   2389c:	8900      	ldrh	r0, [r0, #8]
   2389e:	f7fb fe74 	bl	1f58a <ble_att_clt_tx_exec_write>
   238a2:	e7f4      	b.n	2388e <ble_gattc_write_long_err+0x14>

000238a4 <ble_gattc_write_reliable_tx>:
{
   238a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   238a8:	4604      	mov	r4, r0
    attr_idx = proc->write_reliable.cur_attr;
   238aa:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
    if (attr_idx >= proc->write_reliable.num_attrs) {
   238ae:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   238b2:	429d      	cmp	r5, r3
   238b4:	d226      	bcs.n	23904 <ble_gattc_write_reliable_tx+0x60>
    attr = proc->write_reliable.attrs + attr_idx;
   238b6:	f100 070c 	add.w	r7, r0, #12
   238ba:	eb07 06c5 	add.w	r6, r7, r5, lsl #3
    max_sz = ble_att_mtu(proc->conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ;
   238be:	8900      	ldrh	r0, [r0, #8]
   238c0:	f7fb fac5 	bl	1ee4e <ble_att_mtu>
   238c4:	3805      	subs	r0, #5
   238c6:	b280      	uxth	r0, r0
    if (max_sz <= 0) {
   238c8:	b348      	cbz	r0, 2391e <ble_gattc_write_reliable_tx+0x7a>
        min(max_sz, OS_MBUF_PKTLEN(attr->om) - attr->offset);
   238ca:	6873      	ldr	r3, [r6, #4]
   238cc:	8a1b      	ldrh	r3, [r3, #16]
   238ce:	8872      	ldrh	r2, [r6, #2]
   238d0:	1a9b      	subs	r3, r3, r2
   238d2:	4298      	cmp	r0, r3
   238d4:	bfa8      	it	ge
   238d6:	4618      	movge	r0, r3
    proc->write_reliable.length =
   238d8:	85e0      	strh	r0, [r4, #46]	; 0x2e
    om = ble_hs_mbuf_att_pkt();
   238da:	f004 fe25 	bl	28528 <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
   238de:	4680      	mov	r8, r0
   238e0:	b308      	cbz	r0, 23926 <ble_gattc_write_reliable_tx+0x82>
    rc = os_mbuf_appendfrom(om, attr->om, attr->offset,
   238e2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   238e4:	8872      	ldrh	r2, [r6, #2]
   238e6:	6871      	ldr	r1, [r6, #4]
   238e8:	f7f5 ff06 	bl	196f8 <os_mbuf_appendfrom>
    if (rc != 0) {
   238ec:	b9e8      	cbnz	r0, 2392a <ble_gattc_write_reliable_tx+0x86>
    rc = ble_att_clt_tx_prep_write(proc->conn_handle, attr->handle,
   238ee:	4643      	mov	r3, r8
   238f0:	8872      	ldrh	r2, [r6, #2]
   238f2:	f837 1035 	ldrh.w	r1, [r7, r5, lsl #3]
   238f6:	8920      	ldrh	r0, [r4, #8]
   238f8:	f7fb fdf5 	bl	1f4e6 <ble_att_clt_tx_prep_write>
   238fc:	4604      	mov	r4, r0
    om = NULL;
   238fe:	f04f 0800 	mov.w	r8, #0
done:
   23902:	e006      	b.n	23912 <ble_gattc_write_reliable_tx+0x6e>
        rc = ble_att_clt_tx_exec_write(proc->conn_handle,
   23904:	2101      	movs	r1, #1
   23906:	8900      	ldrh	r0, [r0, #8]
   23908:	f7fb fe3f 	bl	1f58a <ble_att_clt_tx_exec_write>
   2390c:	4604      	mov	r4, r0
    om = NULL;
   2390e:	f04f 0800 	mov.w	r8, #0
    os_mbuf_free_chain(om);
   23912:	4640      	mov	r0, r8
   23914:	f7f5 fe7b 	bl	1960e <os_mbuf_free_chain>
}
   23918:	4620      	mov	r0, r4
   2391a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOTCONN;
   2391e:	2407      	movs	r4, #7
    om = NULL;
   23920:	f04f 0800 	mov.w	r8, #0
   23924:	e7f5      	b.n	23912 <ble_gattc_write_reliable_tx+0x6e>
        rc = BLE_HS_ENOMEM;
   23926:	2406      	movs	r4, #6
   23928:	e7f3      	b.n	23912 <ble_gattc_write_reliable_tx+0x6e>
        rc = BLE_HS_ENOMEM;
   2392a:	2406      	movs	r4, #6
   2392c:	e7f1      	b.n	23912 <ble_gattc_write_reliable_tx+0x6e>

0002392e <ble_gattc_write_reliable_resume>:
{
   2392e:	b538      	push	{r3, r4, r5, lr}
   23930:	4604      	mov	r4, r0
    status = ble_gattc_write_reliable_tx(proc);
   23932:	f7ff ffb7 	bl	238a4 <ble_gattc_write_reliable_tx>
   23936:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   23938:	4620      	mov	r0, r4
   2393a:	f7ff fe4f 	bl	235dc <ble_gattc_process_resume_status>
    if (rc != 0) {
   2393e:	4605      	mov	r5, r0
   23940:	b908      	cbnz	r0, 23946 <ble_gattc_write_reliable_resume+0x18>
}
   23942:	4628      	mov	r0, r5
   23944:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_write_reliable_cb(proc, rc, 0);
   23946:	2200      	movs	r2, #0
   23948:	4601      	mov	r1, r0
   2394a:	4620      	mov	r0, r4
   2394c:	f7ff fe02 	bl	23554 <ble_gattc_write_reliable_cb>
        return rc;
   23950:	e7f7      	b.n	23942 <ble_gattc_write_reliable_resume+0x14>

00023952 <ble_gattc_write_long_tx>:
{
   23952:	b538      	push	{r3, r4, r5, lr}
   23954:	4604      	mov	r4, r0
    max_sz = ble_att_mtu(proc->conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ;
   23956:	8900      	ldrh	r0, [r0, #8]
   23958:	f7fb fa79 	bl	1ee4e <ble_att_mtu>
   2395c:	1f42      	subs	r2, r0, #5
    if (max_sz <= 0) {
   2395e:	2a00      	cmp	r2, #0
   23960:	dd27      	ble.n	239b2 <ble_gattc_write_long_tx+0x60>
    write_len = min(max_sz,
   23962:	6923      	ldr	r3, [r4, #16]
   23964:	8a1b      	ldrh	r3, [r3, #16]
   23966:	89e0      	ldrh	r0, [r4, #14]
   23968:	1a18      	subs	r0, r3, r0
   2396a:	4290      	cmp	r0, r2
   2396c:	bfa8      	it	ge
   2396e:	4610      	movge	r0, r2
    if (write_len <= 0) {
   23970:	2800      	cmp	r0, #0
   23972:	dd17      	ble.n	239a4 <ble_gattc_write_long_tx+0x52>
    proc->write_long.length = write_len;
   23974:	82a0      	strh	r0, [r4, #20]
    om = ble_hs_mbuf_att_pkt();
   23976:	f004 fdd7 	bl	28528 <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
   2397a:	4605      	mov	r5, r0
   2397c:	b1e0      	cbz	r0, 239b8 <ble_gattc_write_long_tx+0x66>
    rc = os_mbuf_appendfrom(om, proc->write_long.attr.om,
   2397e:	8aa3      	ldrh	r3, [r4, #20]
   23980:	89e2      	ldrh	r2, [r4, #14]
   23982:	6921      	ldr	r1, [r4, #16]
   23984:	f7f5 feb8 	bl	196f8 <os_mbuf_appendfrom>
    if (rc != 0) {
   23988:	b9c0      	cbnz	r0, 239bc <ble_gattc_write_long_tx+0x6a>
    rc = ble_att_clt_tx_prep_write(proc->conn_handle,
   2398a:	462b      	mov	r3, r5
   2398c:	89e2      	ldrh	r2, [r4, #14]
   2398e:	89a1      	ldrh	r1, [r4, #12]
   23990:	8920      	ldrh	r0, [r4, #8]
   23992:	f7fb fda8 	bl	1f4e6 <ble_att_clt_tx_prep_write>
   23996:	4604      	mov	r4, r0
    om = NULL;
   23998:	2500      	movs	r5, #0
    os_mbuf_free_chain(om);
   2399a:	4628      	mov	r0, r5
   2399c:	f7f5 fe37 	bl	1960e <os_mbuf_free_chain>
}
   239a0:	4620      	mov	r0, r4
   239a2:	bd38      	pop	{r3, r4, r5, pc}
        rc = ble_att_clt_tx_exec_write(proc->conn_handle,
   239a4:	2101      	movs	r1, #1
   239a6:	8920      	ldrh	r0, [r4, #8]
   239a8:	f7fb fdef 	bl	1f58a <ble_att_clt_tx_exec_write>
   239ac:	4604      	mov	r4, r0
    om = NULL;
   239ae:	2500      	movs	r5, #0
        goto done;
   239b0:	e7f3      	b.n	2399a <ble_gattc_write_long_tx+0x48>
        rc = BLE_HS_ENOTCONN;
   239b2:	2407      	movs	r4, #7
    om = NULL;
   239b4:	2500      	movs	r5, #0
   239b6:	e7f0      	b.n	2399a <ble_gattc_write_long_tx+0x48>
        rc = BLE_HS_ENOMEM;
   239b8:	2406      	movs	r4, #6
   239ba:	e7ee      	b.n	2399a <ble_gattc_write_long_tx+0x48>
        rc = BLE_HS_ENOMEM;
   239bc:	2406      	movs	r4, #6
   239be:	e7ec      	b.n	2399a <ble_gattc_write_long_tx+0x48>

000239c0 <ble_gattc_write_long_resume>:
{
   239c0:	b538      	push	{r3, r4, r5, lr}
   239c2:	4604      	mov	r4, r0
    status = ble_gattc_write_long_tx(proc);
   239c4:	f7ff ffc5 	bl	23952 <ble_gattc_write_long_tx>
   239c8:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   239ca:	4620      	mov	r0, r4
   239cc:	f7ff fe06 	bl	235dc <ble_gattc_process_resume_status>
    if (rc != 0) {
   239d0:	4605      	mov	r5, r0
   239d2:	b908      	cbnz	r0, 239d8 <ble_gattc_write_long_resume+0x18>
}
   239d4:	4628      	mov	r0, r5
   239d6:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_write_long_cb(proc, rc, 0);
   239d8:	2200      	movs	r2, #0
   239da:	4601      	mov	r1, r0
   239dc:	4620      	mov	r0, r4
   239de:	f7ff fd89 	bl	234f4 <ble_gattc_write_long_cb>
        return rc;
   239e2:	e7f7      	b.n	239d4 <ble_gattc_write_long_resume+0x14>

000239e4 <ble_gattc_read_tx>:
{
   239e4:	b508      	push	{r3, lr}
    rc = ble_att_clt_tx_read(proc->conn_handle, proc->read.handle);
   239e6:	8981      	ldrh	r1, [r0, #12]
   239e8:	8900      	ldrh	r0, [r0, #8]
   239ea:	f7fb fc74 	bl	1f2d6 <ble_att_clt_tx_read>
}
   239ee:	bd08      	pop	{r3, pc}

000239f0 <ble_gattc_read_long_tx>:
{
   239f0:	b508      	push	{r3, lr}
    if (proc->read_long.offset == 0) {
   239f2:	89c2      	ldrh	r2, [r0, #14]
   239f4:	b922      	cbnz	r2, 23a00 <ble_gattc_read_long_tx+0x10>
        rc = ble_att_clt_tx_read(proc->conn_handle, proc->read_long.handle);
   239f6:	8981      	ldrh	r1, [r0, #12]
   239f8:	8900      	ldrh	r0, [r0, #8]
   239fa:	f7fb fc6c 	bl	1f2d6 <ble_att_clt_tx_read>
}
   239fe:	bd08      	pop	{r3, pc}
        rc = ble_att_clt_tx_read_blob(proc->conn_handle,
   23a00:	8981      	ldrh	r1, [r0, #12]
   23a02:	8900      	ldrh	r0, [r0, #8]
   23a04:	f7fb fc84 	bl	1f310 <ble_att_clt_tx_read_blob>
        if (rc != 0) {
   23a08:	e7f9      	b.n	239fe <ble_gattc_read_long_tx+0xe>

00023a0a <ble_gattc_read_long_resume>:
{
   23a0a:	b538      	push	{r3, r4, r5, lr}
   23a0c:	4604      	mov	r4, r0
    status = ble_gattc_read_long_tx(proc);
   23a0e:	f7ff ffef 	bl	239f0 <ble_gattc_read_long_tx>
   23a12:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   23a14:	4620      	mov	r0, r4
   23a16:	f7ff fde1 	bl	235dc <ble_gattc_process_resume_status>
    if (rc != 0) {
   23a1a:	4605      	mov	r5, r0
   23a1c:	b908      	cbnz	r0, 23a22 <ble_gattc_read_long_resume+0x18>
}
   23a1e:	4628      	mov	r0, r5
   23a20:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_read_long_cb(proc, rc, 0, NULL);
   23a22:	2300      	movs	r3, #0
   23a24:	461a      	mov	r2, r3
   23a26:	4601      	mov	r1, r0
   23a28:	4620      	mov	r0, r4
   23a2a:	f7ff fd05 	bl	23438 <ble_gattc_read_long_cb>
        return rc;
   23a2e:	e7f6      	b.n	23a1e <ble_gattc_read_long_resume+0x14>

00023a30 <ble_gattc_read_long_rx_read_rsp>:
{
   23a30:	b5f0      	push	{r4, r5, r6, r7, lr}
   23a32:	b083      	sub	sp, #12
   23a34:	4604      	mov	r4, r0
   23a36:	460e      	mov	r6, r1
   23a38:	4615      	mov	r5, r2
    data_len = OS_MBUF_PKTLEN(*om);
   23a3a:	6813      	ldr	r3, [r2, #0]
   23a3c:	8a1f      	ldrh	r7, [r3, #16]
    attr.handle = proc->read_long.handle;
   23a3e:	8982      	ldrh	r2, [r0, #12]
   23a40:	f8ad 2000 	strh.w	r2, [sp]
    attr.offset = proc->read_long.offset;
   23a44:	89c2      	ldrh	r2, [r0, #14]
   23a46:	f8ad 2002 	strh.w	r2, [sp, #2]
    attr.om = *om;
   23a4a:	9301      	str	r3, [sp, #4]
    rc = ble_gattc_read_long_cb(proc, status, 0, &attr);
   23a4c:	466b      	mov	r3, sp
   23a4e:	2200      	movs	r2, #0
   23a50:	f7ff fcf2 	bl	23438 <ble_gattc_read_long_cb>
    *om = attr.om;
   23a54:	9b01      	ldr	r3, [sp, #4]
   23a56:	602b      	str	r3, [r5, #0]
    if (rc != 0 || status != 0) {
   23a58:	b9c0      	cbnz	r0, 23a8c <ble_gattc_read_long_rx_read_rsp+0x5c>
   23a5a:	b9ce      	cbnz	r6, 23a90 <ble_gattc_read_long_rx_read_rsp+0x60>
    mtu = ble_att_mtu(proc->conn_handle);
   23a5c:	8920      	ldrh	r0, [r4, #8]
   23a5e:	f7fb f9f6 	bl	1ee4e <ble_att_mtu>
    if (mtu == 0) {
   23a62:	b1c0      	cbz	r0, 23a96 <ble_gattc_read_long_rx_read_rsp+0x66>
    if (data_len < mtu - 1) {
   23a64:	1e43      	subs	r3, r0, #1
   23a66:	429f      	cmp	r7, r3
   23a68:	db08      	blt.n	23a7c <ble_gattc_read_long_rx_read_rsp+0x4c>
    proc->read_long.offset += data_len;
   23a6a:	89e3      	ldrh	r3, [r4, #14]
   23a6c:	441f      	add	r7, r3
   23a6e:	81e7      	strh	r7, [r4, #14]
    rc = ble_gattc_read_long_resume(proc);
   23a70:	4620      	mov	r0, r4
   23a72:	f7ff ffca 	bl	23a0a <ble_gattc_read_long_resume>
    if (rc != 0) {
   23a76:	b160      	cbz	r0, 23a92 <ble_gattc_read_long_rx_read_rsp+0x62>
        return BLE_HS_EDONE;
   23a78:	200e      	movs	r0, #14
   23a7a:	e00a      	b.n	23a92 <ble_gattc_read_long_rx_read_rsp+0x62>
        ble_gattc_read_long_cb(proc, BLE_HS_EDONE, 0, NULL);
   23a7c:	2300      	movs	r3, #0
   23a7e:	461a      	mov	r2, r3
   23a80:	210e      	movs	r1, #14
   23a82:	4620      	mov	r0, r4
   23a84:	f7ff fcd8 	bl	23438 <ble_gattc_read_long_cb>
        return BLE_HS_EDONE;
   23a88:	200e      	movs	r0, #14
   23a8a:	e002      	b.n	23a92 <ble_gattc_read_long_rx_read_rsp+0x62>
        return BLE_HS_EDONE;
   23a8c:	200e      	movs	r0, #14
   23a8e:	e000      	b.n	23a92 <ble_gattc_read_long_rx_read_rsp+0x62>
   23a90:	200e      	movs	r0, #14
}
   23a92:	b003      	add	sp, #12
   23a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EDONE;
   23a96:	200e      	movs	r0, #14
   23a98:	e7fb      	b.n	23a92 <ble_gattc_read_long_rx_read_rsp+0x62>

00023a9a <ble_gattc_disc_all_dscs_tx>:
{
   23a9a:	b508      	push	{r3, lr}
                                  proc->disc_all_dscs.prev_handle + 1,
   23a9c:	89c1      	ldrh	r1, [r0, #14]
    rc = ble_att_clt_tx_find_info(proc->conn_handle,
   23a9e:	3101      	adds	r1, #1
   23aa0:	8a02      	ldrh	r2, [r0, #16]
   23aa2:	b289      	uxth	r1, r1
   23aa4:	8900      	ldrh	r0, [r0, #8]
   23aa6:	f7fb fb37 	bl	1f118 <ble_att_clt_tx_find_info>
}
   23aaa:	bd08      	pop	{r3, pc}

00023aac <ble_gattc_disc_all_dscs_resume>:
{
   23aac:	b538      	push	{r3, r4, r5, lr}
   23aae:	4604      	mov	r4, r0
    status = ble_gattc_disc_all_dscs_tx(proc);
   23ab0:	f7ff fff3 	bl	23a9a <ble_gattc_disc_all_dscs_tx>
   23ab4:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   23ab6:	4620      	mov	r0, r4
   23ab8:	f7ff fd90 	bl	235dc <ble_gattc_process_resume_status>
    if (rc != 0) {
   23abc:	4605      	mov	r5, r0
   23abe:	b908      	cbnz	r0, 23ac4 <ble_gattc_disc_all_dscs_resume+0x18>
}
   23ac0:	4628      	mov	r0, r5
   23ac2:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_dscs_cb(proc, rc, 0, NULL);
   23ac4:	2300      	movs	r3, #0
   23ac6:	461a      	mov	r2, r3
   23ac8:	4601      	mov	r1, r0
   23aca:	4620      	mov	r0, r4
   23acc:	f7ff fbee 	bl	232ac <ble_gattc_disc_all_dscs_cb>
        return rc;
   23ad0:	e7f6      	b.n	23ac0 <ble_gattc_disc_all_dscs_resume+0x14>

00023ad2 <ble_gattc_disc_all_dscs_rx_complete>:
{
   23ad2:	b510      	push	{r4, lr}
    if (status != 0) {
   23ad4:	b939      	cbnz	r1, 23ae6 <ble_gattc_disc_all_dscs_rx_complete+0x14>
    if (proc->disc_all_dscs.prev_handle == proc->disc_all_dscs.end_handle) {
   23ad6:	89c2      	ldrh	r2, [r0, #14]
   23ad8:	8a03      	ldrh	r3, [r0, #16]
   23ada:	429a      	cmp	r2, r3
   23adc:	d009      	beq.n	23af2 <ble_gattc_disc_all_dscs_rx_complete+0x20>
    rc = ble_gattc_disc_all_dscs_resume(proc);
   23ade:	f7ff ffe5 	bl	23aac <ble_gattc_disc_all_dscs_resume>
    if (rc != 0) {
   23ae2:	b968      	cbnz	r0, 23b00 <ble_gattc_disc_all_dscs_rx_complete+0x2e>
}
   23ae4:	bd10      	pop	{r4, pc}
        ble_gattc_disc_all_dscs_cb(proc, status, 0, NULL);
   23ae6:	2300      	movs	r3, #0
   23ae8:	461a      	mov	r2, r3
   23aea:	f7ff fbdf 	bl	232ac <ble_gattc_disc_all_dscs_cb>
        return BLE_HS_EDONE;
   23aee:	200e      	movs	r0, #14
   23af0:	e7f8      	b.n	23ae4 <ble_gattc_disc_all_dscs_rx_complete+0x12>
        ble_gattc_disc_all_dscs_cb(proc, BLE_HS_EDONE, 0, NULL);
   23af2:	2300      	movs	r3, #0
   23af4:	461a      	mov	r2, r3
   23af6:	210e      	movs	r1, #14
   23af8:	f7ff fbd8 	bl	232ac <ble_gattc_disc_all_dscs_cb>
        return BLE_HS_EDONE;
   23afc:	200e      	movs	r0, #14
   23afe:	e7f1      	b.n	23ae4 <ble_gattc_disc_all_dscs_rx_complete+0x12>
        return BLE_HS_EDONE;
   23b00:	200e      	movs	r0, #14
   23b02:	e7ef      	b.n	23ae4 <ble_gattc_disc_all_dscs_rx_complete+0x12>

00023b04 <ble_gattc_disc_chr_uuid_tx>:
{
   23b04:	b500      	push	{lr}
   23b06:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   23b08:	4b06      	ldr	r3, [pc, #24]	; (23b24 <ble_gattc_disc_chr_uuid_tx+0x20>)
   23b0a:	681b      	ldr	r3, [r3, #0]
   23b0c:	9301      	str	r3, [sp, #4]
                                  proc->disc_chr_uuid.prev_handle + 1,
   23b0e:	8c01      	ldrh	r1, [r0, #32]
    rc = ble_att_clt_tx_read_type(proc->conn_handle,
   23b10:	3101      	adds	r1, #1
   23b12:	ab01      	add	r3, sp, #4
   23b14:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   23b16:	b289      	uxth	r1, r1
   23b18:	8900      	ldrh	r0, [r0, #8]
   23b1a:	f7fb fb7f 	bl	1f21c <ble_att_clt_tx_read_type>
}
   23b1e:	b003      	add	sp, #12
   23b20:	f85d fb04 	ldr.w	pc, [sp], #4
   23b24:	0002fb54 	.word	0x0002fb54

00023b28 <ble_gattc_disc_chr_uuid_resume>:
{
   23b28:	b538      	push	{r3, r4, r5, lr}
   23b2a:	4604      	mov	r4, r0
    status = ble_gattc_disc_chr_uuid_tx(proc);
   23b2c:	f7ff ffea 	bl	23b04 <ble_gattc_disc_chr_uuid_tx>
   23b30:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   23b32:	4620      	mov	r0, r4
   23b34:	f7ff fd52 	bl	235dc <ble_gattc_process_resume_status>
    if (rc != 0) {
   23b38:	4605      	mov	r5, r0
   23b3a:	b908      	cbnz	r0, 23b40 <ble_gattc_disc_chr_uuid_resume+0x18>
}
   23b3c:	4628      	mov	r0, r5
   23b3e:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_chr_uuid_cb(proc, rc, 0, NULL);
   23b40:	2300      	movs	r3, #0
   23b42:	461a      	mov	r2, r3
   23b44:	4601      	mov	r1, r0
   23b46:	4620      	mov	r0, r4
   23b48:	f7ff fb82 	bl	23250 <ble_gattc_disc_chr_uuid_cb>
        return rc;
   23b4c:	e7f6      	b.n	23b3c <ble_gattc_disc_chr_uuid_resume+0x14>

00023b4e <ble_gattc_disc_chr_uuid_rx_complete>:
{
   23b4e:	b510      	push	{r4, lr}
    if (status != 0) {
   23b50:	b939      	cbnz	r1, 23b62 <ble_gattc_disc_chr_uuid_rx_complete+0x14>
    if (proc->disc_chr_uuid.prev_handle == proc->disc_chr_uuid.end_handle) {
   23b52:	8c02      	ldrh	r2, [r0, #32]
   23b54:	8c43      	ldrh	r3, [r0, #34]	; 0x22
   23b56:	429a      	cmp	r2, r3
   23b58:	d009      	beq.n	23b6e <ble_gattc_disc_chr_uuid_rx_complete+0x20>
    rc = ble_gattc_disc_chr_uuid_resume(proc);
   23b5a:	f7ff ffe5 	bl	23b28 <ble_gattc_disc_chr_uuid_resume>
    if (rc != 0) {
   23b5e:	b968      	cbnz	r0, 23b7c <ble_gattc_disc_chr_uuid_rx_complete+0x2e>
}
   23b60:	bd10      	pop	{r4, pc}
        ble_gattc_disc_chr_uuid_cb(proc, status, 0, NULL);
   23b62:	2300      	movs	r3, #0
   23b64:	461a      	mov	r2, r3
   23b66:	f7ff fb73 	bl	23250 <ble_gattc_disc_chr_uuid_cb>
        return BLE_HS_EDONE;
   23b6a:	200e      	movs	r0, #14
   23b6c:	e7f8      	b.n	23b60 <ble_gattc_disc_chr_uuid_rx_complete+0x12>
        ble_gattc_disc_chr_uuid_cb(proc, BLE_HS_EDONE, 0, NULL);
   23b6e:	2300      	movs	r3, #0
   23b70:	461a      	mov	r2, r3
   23b72:	210e      	movs	r1, #14
   23b74:	f7ff fb6c 	bl	23250 <ble_gattc_disc_chr_uuid_cb>
        return BLE_HS_EDONE;
   23b78:	200e      	movs	r0, #14
   23b7a:	e7f1      	b.n	23b60 <ble_gattc_disc_chr_uuid_rx_complete+0x12>
        return BLE_HS_EDONE;
   23b7c:	200e      	movs	r0, #14
   23b7e:	e7ef      	b.n	23b60 <ble_gattc_disc_chr_uuid_rx_complete+0x12>

00023b80 <ble_gattc_disc_all_chrs_tx>:
{
   23b80:	b500      	push	{lr}
   23b82:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   23b84:	4b06      	ldr	r3, [pc, #24]	; (23ba0 <ble_gattc_disc_all_chrs_tx+0x20>)
   23b86:	681b      	ldr	r3, [r3, #0]
   23b88:	9301      	str	r3, [sp, #4]
                                  proc->disc_all_chrs.prev_handle + 1,
   23b8a:	8981      	ldrh	r1, [r0, #12]
    rc = ble_att_clt_tx_read_type(proc->conn_handle,
   23b8c:	3101      	adds	r1, #1
   23b8e:	ab01      	add	r3, sp, #4
   23b90:	89c2      	ldrh	r2, [r0, #14]
   23b92:	b289      	uxth	r1, r1
   23b94:	8900      	ldrh	r0, [r0, #8]
   23b96:	f7fb fb41 	bl	1f21c <ble_att_clt_tx_read_type>
}
   23b9a:	b003      	add	sp, #12
   23b9c:	f85d fb04 	ldr.w	pc, [sp], #4
   23ba0:	0002fb54 	.word	0x0002fb54

00023ba4 <ble_gattc_disc_all_chrs_resume>:
{
   23ba4:	b538      	push	{r3, r4, r5, lr}
   23ba6:	4604      	mov	r4, r0
    status = ble_gattc_disc_all_chrs_tx(proc);
   23ba8:	f7ff ffea 	bl	23b80 <ble_gattc_disc_all_chrs_tx>
   23bac:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   23bae:	4620      	mov	r0, r4
   23bb0:	f7ff fd14 	bl	235dc <ble_gattc_process_resume_status>
    if (rc != 0) {
   23bb4:	4605      	mov	r5, r0
   23bb6:	b908      	cbnz	r0, 23bbc <ble_gattc_disc_all_chrs_resume+0x18>
}
   23bb8:	4628      	mov	r0, r5
   23bba:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_chrs_cb(proc, rc, 0, NULL);
   23bbc:	2300      	movs	r3, #0
   23bbe:	461a      	mov	r2, r3
   23bc0:	4601      	mov	r1, r0
   23bc2:	4620      	mov	r0, r4
   23bc4:	f7ff fb16 	bl	231f4 <ble_gattc_disc_all_chrs_cb>
        return rc;
   23bc8:	e7f6      	b.n	23bb8 <ble_gattc_disc_all_chrs_resume+0x14>

00023bca <ble_gattc_disc_all_chrs_rx_complete>:
{
   23bca:	b510      	push	{r4, lr}
    if (status != 0) {
   23bcc:	b939      	cbnz	r1, 23bde <ble_gattc_disc_all_chrs_rx_complete+0x14>
    if (proc->disc_all_chrs.prev_handle == proc->disc_all_chrs.end_handle) {
   23bce:	8982      	ldrh	r2, [r0, #12]
   23bd0:	89c3      	ldrh	r3, [r0, #14]
   23bd2:	429a      	cmp	r2, r3
   23bd4:	d009      	beq.n	23bea <ble_gattc_disc_all_chrs_rx_complete+0x20>
    rc = ble_gattc_disc_all_chrs_resume(proc);
   23bd6:	f7ff ffe5 	bl	23ba4 <ble_gattc_disc_all_chrs_resume>
    if (rc != 0) {
   23bda:	b968      	cbnz	r0, 23bf8 <ble_gattc_disc_all_chrs_rx_complete+0x2e>
}
   23bdc:	bd10      	pop	{r4, pc}
        ble_gattc_disc_all_chrs_cb(proc, status, 0, NULL);
   23bde:	2300      	movs	r3, #0
   23be0:	461a      	mov	r2, r3
   23be2:	f7ff fb07 	bl	231f4 <ble_gattc_disc_all_chrs_cb>
        return BLE_HS_EDONE;
   23be6:	200e      	movs	r0, #14
   23be8:	e7f8      	b.n	23bdc <ble_gattc_disc_all_chrs_rx_complete+0x12>
        ble_gattc_disc_all_chrs_cb(proc, BLE_HS_EDONE, 0, NULL);
   23bea:	2300      	movs	r3, #0
   23bec:	461a      	mov	r2, r3
   23bee:	210e      	movs	r1, #14
   23bf0:	f7ff fb00 	bl	231f4 <ble_gattc_disc_all_chrs_cb>
        return BLE_HS_EDONE;
   23bf4:	200e      	movs	r0, #14
   23bf6:	e7f1      	b.n	23bdc <ble_gattc_disc_all_chrs_rx_complete+0x12>
        return BLE_HS_EDONE;
   23bf8:	200e      	movs	r0, #14
   23bfa:	e7ef      	b.n	23bdc <ble_gattc_disc_all_chrs_rx_complete+0x12>

00023bfc <ble_gattc_find_inc_svcs_tx>:
{
   23bfc:	b500      	push	{lr}
   23bfe:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_INCLUDE);
   23c00:	4b09      	ldr	r3, [pc, #36]	; (23c28 <ble_gattc_find_inc_svcs_tx+0x2c>)
   23c02:	685b      	ldr	r3, [r3, #4]
   23c04:	9301      	str	r3, [sp, #4]
    if (proc->find_inc_svcs.cur_start == 0) {
   23c06:	8a01      	ldrh	r1, [r0, #16]
   23c08:	b951      	cbnz	r1, 23c20 <ble_gattc_find_inc_svcs_tx+0x24>
                                      proc->find_inc_svcs.prev_handle + 1,
   23c0a:	8981      	ldrh	r1, [r0, #12]
        rc = ble_att_clt_tx_read_type(proc->conn_handle,
   23c0c:	3101      	adds	r1, #1
   23c0e:	ab01      	add	r3, sp, #4
   23c10:	89c2      	ldrh	r2, [r0, #14]
   23c12:	b289      	uxth	r1, r1
   23c14:	8900      	ldrh	r0, [r0, #8]
   23c16:	f7fb fb01 	bl	1f21c <ble_att_clt_tx_read_type>
}
   23c1a:	b003      	add	sp, #12
   23c1c:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = ble_att_clt_tx_read(proc->conn_handle,
   23c20:	8900      	ldrh	r0, [r0, #8]
   23c22:	f7fb fb58 	bl	1f2d6 <ble_att_clt_tx_read>
        if (rc != 0) {
   23c26:	e7f8      	b.n	23c1a <ble_gattc_find_inc_svcs_tx+0x1e>
   23c28:	0002fb54 	.word	0x0002fb54

00023c2c <ble_gattc_find_inc_svcs_resume>:
{
   23c2c:	b538      	push	{r3, r4, r5, lr}
   23c2e:	4604      	mov	r4, r0
    status = ble_gattc_find_inc_svcs_tx(proc);
   23c30:	f7ff ffe4 	bl	23bfc <ble_gattc_find_inc_svcs_tx>
   23c34:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   23c36:	4620      	mov	r0, r4
   23c38:	f7ff fcd0 	bl	235dc <ble_gattc_process_resume_status>
    if (rc != 0) {
   23c3c:	4605      	mov	r5, r0
   23c3e:	b908      	cbnz	r0, 23c44 <ble_gattc_find_inc_svcs_resume+0x18>
}
   23c40:	4628      	mov	r0, r5
   23c42:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_find_inc_svcs_cb(proc, rc, 0, NULL);
   23c44:	2300      	movs	r3, #0
   23c46:	461a      	mov	r2, r3
   23c48:	4601      	mov	r1, r0
   23c4a:	4620      	mov	r0, r4
   23c4c:	f7ff faa2 	bl	23194 <ble_gattc_find_inc_svcs_cb>
        return rc;
   23c50:	e7f6      	b.n	23c40 <ble_gattc_find_inc_svcs_resume+0x14>

00023c52 <ble_gattc_find_inc_svcs_rx_complete>:
{
   23c52:	b510      	push	{r4, lr}
    if (status != 0) {
   23c54:	b941      	cbnz	r1, 23c68 <ble_gattc_find_inc_svcs_rx_complete+0x16>
    if (proc->find_inc_svcs.prev_handle == 0xffff) {
   23c56:	8982      	ldrh	r2, [r0, #12]
   23c58:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23c5c:	429a      	cmp	r2, r3
   23c5e:	d009      	beq.n	23c74 <ble_gattc_find_inc_svcs_rx_complete+0x22>
    rc = ble_gattc_find_inc_svcs_resume(proc);
   23c60:	f7ff ffe4 	bl	23c2c <ble_gattc_find_inc_svcs_resume>
    if (rc != 0) {
   23c64:	b968      	cbnz	r0, 23c82 <ble_gattc_find_inc_svcs_rx_complete+0x30>
}
   23c66:	bd10      	pop	{r4, pc}
        ble_gattc_find_inc_svcs_cb(proc, status, 0, NULL);
   23c68:	2300      	movs	r3, #0
   23c6a:	461a      	mov	r2, r3
   23c6c:	f7ff fa92 	bl	23194 <ble_gattc_find_inc_svcs_cb>
        return BLE_HS_EDONE;
   23c70:	200e      	movs	r0, #14
   23c72:	e7f8      	b.n	23c66 <ble_gattc_find_inc_svcs_rx_complete+0x14>
        ble_gattc_find_inc_svcs_cb(proc, BLE_HS_EDONE, 0, NULL);
   23c74:	2300      	movs	r3, #0
   23c76:	461a      	mov	r2, r3
   23c78:	210e      	movs	r1, #14
   23c7a:	f7ff fa8b 	bl	23194 <ble_gattc_find_inc_svcs_cb>
        return BLE_HS_EDONE;
   23c7e:	200e      	movs	r0, #14
   23c80:	e7f1      	b.n	23c66 <ble_gattc_find_inc_svcs_rx_complete+0x14>
        return BLE_HS_EDONE;
   23c82:	200e      	movs	r0, #14
   23c84:	e7ef      	b.n	23c66 <ble_gattc_find_inc_svcs_rx_complete+0x14>

00023c86 <ble_gattc_read_uuid_tx>:
{
   23c86:	b508      	push	{r3, lr}
    return ble_att_clt_tx_read_type(proc->conn_handle,
   23c88:	f100 030c 	add.w	r3, r0, #12
   23c8c:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   23c8e:	8c01      	ldrh	r1, [r0, #32]
   23c90:	8900      	ldrh	r0, [r0, #8]
   23c92:	f7fb fac3 	bl	1f21c <ble_att_clt_tx_read_type>
}
   23c96:	bd08      	pop	{r3, pc}

00023c98 <ble_gattc_disc_svc_uuid_tx>:
{
   23c98:	b5f0      	push	{r4, r5, r6, r7, lr}
   23c9a:	b087      	sub	sp, #28
   23c9c:	4604      	mov	r4, r0
    ble_uuid_flat(&proc->disc_svc_uuid.service_uuid.u, val);
   23c9e:	f100 060c 	add.w	r6, r0, #12
   23ca2:	ad02      	add	r5, sp, #8
   23ca4:	4629      	mov	r1, r5
   23ca6:	4630      	mov	r0, r6
   23ca8:	f005 ff46 	bl	29b38 <ble_uuid_flat>
    rc = ble_att_clt_tx_find_type_value(proc->conn_handle,
   23cac:	8927      	ldrh	r7, [r4, #8]
                                        proc->disc_svc_uuid.prev_handle + 1,
   23cae:	8c24      	ldrh	r4, [r4, #32]
    rc = ble_att_clt_tx_find_type_value(proc->conn_handle,
   23cb0:	4630      	mov	r0, r6
   23cb2:	f005 ff6d 	bl	29b90 <ble_uuid_length>
   23cb6:	1c61      	adds	r1, r4, #1
   23cb8:	9001      	str	r0, [sp, #4]
   23cba:	9500      	str	r5, [sp, #0]
   23cbc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   23cc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   23cc4:	b289      	uxth	r1, r1
   23cc6:	4638      	mov	r0, r7
   23cc8:	f7fb fa6a 	bl	1f1a0 <ble_att_clt_tx_find_type_value>
}
   23ccc:	b007      	add	sp, #28
   23cce:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023cd0 <ble_gattc_disc_svc_uuid_resume>:
{
   23cd0:	b538      	push	{r3, r4, r5, lr}
   23cd2:	4604      	mov	r4, r0
    status = ble_gattc_disc_svc_uuid_tx(proc);
   23cd4:	f7ff ffe0 	bl	23c98 <ble_gattc_disc_svc_uuid_tx>
   23cd8:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   23cda:	4620      	mov	r0, r4
   23cdc:	f7ff fc7e 	bl	235dc <ble_gattc_process_resume_status>
    if (rc != 0) {
   23ce0:	4605      	mov	r5, r0
   23ce2:	b908      	cbnz	r0, 23ce8 <ble_gattc_disc_svc_uuid_resume+0x18>
}
   23ce4:	4628      	mov	r0, r5
   23ce6:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_svc_uuid_cb(proc, rc, 0, NULL);
   23ce8:	2300      	movs	r3, #0
   23cea:	461a      	mov	r2, r3
   23cec:	4601      	mov	r1, r0
   23cee:	4620      	mov	r0, r4
   23cf0:	f7ff f9fe 	bl	230f0 <ble_gattc_disc_svc_uuid_cb>
        return rc;
   23cf4:	e7f6      	b.n	23ce4 <ble_gattc_disc_svc_uuid_resume+0x14>

00023cf6 <ble_gattc_disc_svc_uuid_rx_complete>:
{
   23cf6:	b510      	push	{r4, lr}
    if (status != 0) {
   23cf8:	b941      	cbnz	r1, 23d0c <ble_gattc_disc_svc_uuid_rx_complete+0x16>
    if (proc->disc_svc_uuid.prev_handle == 0xffff) {
   23cfa:	8c02      	ldrh	r2, [r0, #32]
   23cfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23d00:	429a      	cmp	r2, r3
   23d02:	d009      	beq.n	23d18 <ble_gattc_disc_svc_uuid_rx_complete+0x22>
    rc = ble_gattc_disc_svc_uuid_resume(proc);
   23d04:	f7ff ffe4 	bl	23cd0 <ble_gattc_disc_svc_uuid_resume>
    if (rc != 0) {
   23d08:	b968      	cbnz	r0, 23d26 <ble_gattc_disc_svc_uuid_rx_complete+0x30>
}
   23d0a:	bd10      	pop	{r4, pc}
        ble_gattc_disc_svc_uuid_cb(proc, status, 0, NULL);
   23d0c:	2300      	movs	r3, #0
   23d0e:	461a      	mov	r2, r3
   23d10:	f7ff f9ee 	bl	230f0 <ble_gattc_disc_svc_uuid_cb>
        return BLE_HS_EDONE;
   23d14:	200e      	movs	r0, #14
   23d16:	e7f8      	b.n	23d0a <ble_gattc_disc_svc_uuid_rx_complete+0x14>
        ble_gattc_disc_svc_uuid_cb(proc, BLE_HS_EDONE, 0, NULL);
   23d18:	2300      	movs	r3, #0
   23d1a:	461a      	mov	r2, r3
   23d1c:	210e      	movs	r1, #14
   23d1e:	f7ff f9e7 	bl	230f0 <ble_gattc_disc_svc_uuid_cb>
        return BLE_HS_EDONE;
   23d22:	200e      	movs	r0, #14
   23d24:	e7f1      	b.n	23d0a <ble_gattc_disc_svc_uuid_rx_complete+0x14>
        return BLE_HS_EDONE;
   23d26:	200e      	movs	r0, #14
   23d28:	e7ef      	b.n	23d0a <ble_gattc_disc_svc_uuid_rx_complete+0x14>
	...

00023d2c <ble_gattc_disc_all_svcs_tx>:
{
   23d2c:	b500      	push	{lr}
   23d2e:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_PRIMARY_SERVICE);
   23d30:	4b07      	ldr	r3, [pc, #28]	; (23d50 <ble_gattc_disc_all_svcs_tx+0x24>)
   23d32:	689b      	ldr	r3, [r3, #8]
   23d34:	9301      	str	r3, [sp, #4]
                                        proc->disc_all_svcs.prev_handle + 1,
   23d36:	8981      	ldrh	r1, [r0, #12]
    rc = ble_att_clt_tx_read_group_type(proc->conn_handle,
   23d38:	3101      	adds	r1, #1
   23d3a:	ab01      	add	r3, sp, #4
   23d3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   23d40:	b289      	uxth	r1, r1
   23d42:	8900      	ldrh	r0, [r0, #8]
   23d44:	f7fb fb2a 	bl	1f39c <ble_att_clt_tx_read_group_type>
}
   23d48:	b003      	add	sp, #12
   23d4a:	f85d fb04 	ldr.w	pc, [sp], #4
   23d4e:	bf00      	nop
   23d50:	0002fb54 	.word	0x0002fb54

00023d54 <ble_gattc_disc_all_svcs_resume>:
{
   23d54:	b538      	push	{r3, r4, r5, lr}
   23d56:	4604      	mov	r4, r0
    status = ble_gattc_disc_all_svcs_tx(proc);
   23d58:	f7ff ffe8 	bl	23d2c <ble_gattc_disc_all_svcs_tx>
   23d5c:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   23d5e:	4620      	mov	r0, r4
   23d60:	f7ff fc3c 	bl	235dc <ble_gattc_process_resume_status>
    if (rc != 0) {
   23d64:	4605      	mov	r5, r0
   23d66:	b908      	cbnz	r0, 23d6c <ble_gattc_disc_all_svcs_resume+0x18>
}
   23d68:	4628      	mov	r0, r5
   23d6a:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_svcs_cb(proc, rc, 0, NULL);
   23d6c:	2300      	movs	r3, #0
   23d6e:	461a      	mov	r2, r3
   23d70:	b281      	uxth	r1, r0
   23d72:	4620      	mov	r0, r4
   23d74:	f7ff f98e 	bl	23094 <ble_gattc_disc_all_svcs_cb>
        return rc;
   23d78:	e7f6      	b.n	23d68 <ble_gattc_disc_all_svcs_resume+0x14>

00023d7a <ble_gattc_disc_all_svcs_rx_complete>:
{
   23d7a:	b510      	push	{r4, lr}
    if (status != 0) {
   23d7c:	b941      	cbnz	r1, 23d90 <ble_gattc_disc_all_svcs_rx_complete+0x16>
    if (proc->disc_all_svcs.prev_handle == 0xffff) {
   23d7e:	8982      	ldrh	r2, [r0, #12]
   23d80:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23d84:	429a      	cmp	r2, r3
   23d86:	d00a      	beq.n	23d9e <ble_gattc_disc_all_svcs_rx_complete+0x24>
    rc = ble_gattc_disc_all_svcs_resume(proc);
   23d88:	f7ff ffe4 	bl	23d54 <ble_gattc_disc_all_svcs_resume>
    if (rc != 0) {
   23d8c:	b970      	cbnz	r0, 23dac <ble_gattc_disc_all_svcs_rx_complete+0x32>
}
   23d8e:	bd10      	pop	{r4, pc}
        ble_gattc_disc_all_svcs_cb(proc, status, 0, NULL);
   23d90:	2300      	movs	r3, #0
   23d92:	461a      	mov	r2, r3
   23d94:	b289      	uxth	r1, r1
   23d96:	f7ff f97d 	bl	23094 <ble_gattc_disc_all_svcs_cb>
        return BLE_HS_EDONE;
   23d9a:	200e      	movs	r0, #14
   23d9c:	e7f7      	b.n	23d8e <ble_gattc_disc_all_svcs_rx_complete+0x14>
        ble_gattc_disc_all_svcs_cb(proc, BLE_HS_EDONE, 0, NULL);
   23d9e:	2300      	movs	r3, #0
   23da0:	461a      	mov	r2, r3
   23da2:	210e      	movs	r1, #14
   23da4:	f7ff f976 	bl	23094 <ble_gattc_disc_all_svcs_cb>
        return BLE_HS_EDONE;
   23da8:	200e      	movs	r0, #14
   23daa:	e7f0      	b.n	23d8e <ble_gattc_disc_all_svcs_rx_complete+0x14>
        return BLE_HS_EDONE;
   23dac:	200e      	movs	r0, #14
   23dae:	e7ee      	b.n	23d8e <ble_gattc_disc_all_svcs_rx_complete+0x14>

00023db0 <ble_gattc_process_status>:
{
   23db0:	b510      	push	{r4, lr}
   23db2:	4604      	mov	r4, r0
    switch (status) {
   23db4:	b961      	cbnz	r1, 23dd0 <ble_gattc_process_status+0x20>
        if (!(proc->flags & BLE_GATTC_PROC_F_STALLED)) {
   23db6:	7ac3      	ldrb	r3, [r0, #11]
   23db8:	f013 0f01 	tst.w	r3, #1
   23dbc:	d005      	beq.n	23dca <ble_gattc_process_status+0x1a>
        ble_gattc_proc_insert(proc);
   23dbe:	4620      	mov	r0, r4
   23dc0:	f7ff fcc6 	bl	23750 <ble_gattc_proc_insert>
        ble_hs_timer_resched();
   23dc4:	f002 fcaa 	bl	2671c <ble_hs_timer_resched>
}
   23dc8:	bd10      	pop	{r4, pc}
            ble_gattc_proc_set_exp_timer(proc);
   23dca:	f7ff fc11 	bl	235f0 <ble_gattc_proc_set_exp_timer>
   23dce:	e7f6      	b.n	23dbe <ble_gattc_process_status+0xe>
        ble_gattc_proc_free(proc);
   23dd0:	f7ff fd02 	bl	237d8 <ble_gattc_proc_free>
}
   23dd4:	e7f8      	b.n	23dc8 <ble_gattc_process_status+0x18>
	...

00023dd8 <ble_gattc_resume_procs>:
{
   23dd8:	b510      	push	{r4, lr}
   23dda:	b082      	sub	sp, #8
    ble_gattc_resume_at = 0;
   23ddc:	4b0c      	ldr	r3, [pc, #48]	; (23e10 <ble_gattc_resume_procs+0x38>)
   23dde:	2200      	movs	r2, #0
   23de0:	601a      	str	r2, [r3, #0]
    ble_gattc_extract_stalled(&stall_list);
   23de2:	4668      	mov	r0, sp
   23de4:	f7ff fc72 	bl	236cc <ble_gattc_extract_stalled>
    STAILQ_FOREACH(proc, &stall_list, next) {
   23de8:	9c00      	ldr	r4, [sp, #0]
   23dea:	b17c      	cbz	r4, 23e0c <ble_gattc_resume_procs+0x34>
        resume_cb = ble_gattc_resume_dispatch_get(proc->op);
   23dec:	7aa0      	ldrb	r0, [r4, #10]
   23dee:	f7ff f8c9 	bl	22f84 <ble_gattc_resume_dispatch_get>
   23df2:	4602      	mov	r2, r0
        proc->flags &= ~BLE_GATTC_PROC_F_STALLED;
   23df4:	7ae3      	ldrb	r3, [r4, #11]
   23df6:	f023 0301 	bic.w	r3, r3, #1
   23dfa:	72e3      	strb	r3, [r4, #11]
        rc = resume_cb(proc);
   23dfc:	4620      	mov	r0, r4
   23dfe:	4790      	blx	r2
   23e00:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   23e02:	4620      	mov	r0, r4
   23e04:	f7ff ffd4 	bl	23db0 <ble_gattc_process_status>
    STAILQ_FOREACH(proc, &stall_list, next) {
   23e08:	6824      	ldr	r4, [r4, #0]
   23e0a:	e7ee      	b.n	23dea <ble_gattc_resume_procs+0x12>
}
   23e0c:	b002      	add	sp, #8
   23e0e:	bd10      	pop	{r4, pc}
   23e10:	10005c00 	.word	0x10005c00

00023e14 <ble_gattc_proc_alloc>:
{
   23e14:	b510      	push	{r4, lr}
    proc = os_memblock_get(&ble_gattc_proc_pool);
   23e16:	4805      	ldr	r0, [pc, #20]	; (23e2c <ble_gattc_proc_alloc+0x18>)
   23e18:	f7f6 f82b 	bl	19e72 <os_memblock_get>
    if (proc != NULL) {
   23e1c:	4604      	mov	r4, r0
   23e1e:	b118      	cbz	r0, 23e28 <ble_gattc_proc_alloc+0x14>
        memset(proc, 0, sizeof *proc);
   23e20:	2238      	movs	r2, #56	; 0x38
   23e22:	2100      	movs	r1, #0
   23e24:	f7f6 ff4b 	bl	1acbe <memset>
}
   23e28:	4620      	mov	r0, r4
   23e2a:	bd10      	pop	{r4, pc}
   23e2c:	10005bdc 	.word	0x10005bdc

00023e30 <ble_gattc_log_proc_init>:
{
   23e30:	b508      	push	{r3, lr}
   23e32:	4603      	mov	r3, r0
    BLE_HS_LOG(INFO, "GATT procedure initiated: %s", name);
   23e34:	4a02      	ldr	r2, [pc, #8]	; (23e40 <ble_gattc_log_proc_init+0x10>)
   23e36:	2101      	movs	r1, #1
   23e38:	2004      	movs	r0, #4
   23e3a:	f7f8 ff6f 	bl	1cd1c <modlog_printf>
}
   23e3e:	bd08      	pop	{r3, pc}
   23e40:	000348e4 	.word	0x000348e4

00023e44 <ble_gattc_log_find_inc_svcs>:
{
   23e44:	b510      	push	{r4, lr}
   23e46:	b082      	sub	sp, #8
   23e48:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("find included services; ");
   23e4a:	4807      	ldr	r0, [pc, #28]	; (23e68 <ble_gattc_log_find_inc_svcs+0x24>)
   23e4c:	f7ff fff0 	bl	23e30 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "start_handle=%d end_handle=%d\n",
   23e50:	89a3      	ldrh	r3, [r4, #12]
   23e52:	89e2      	ldrh	r2, [r4, #14]
   23e54:	9200      	str	r2, [sp, #0]
   23e56:	3301      	adds	r3, #1
   23e58:	4a04      	ldr	r2, [pc, #16]	; (23e6c <ble_gattc_log_find_inc_svcs+0x28>)
   23e5a:	2101      	movs	r1, #1
   23e5c:	2004      	movs	r0, #4
   23e5e:	f7f8 ff5d 	bl	1cd1c <modlog_printf>
}
   23e62:	b002      	add	sp, #8
   23e64:	bd10      	pop	{r4, pc}
   23e66:	bf00      	nop
   23e68:	00034904 	.word	0x00034904
   23e6c:	00034920 	.word	0x00034920

00023e70 <ble_gattc_log_disc_all_chrs>:
{
   23e70:	b510      	push	{r4, lr}
   23e72:	b082      	sub	sp, #8
   23e74:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("discover all characteristics; ");
   23e76:	4807      	ldr	r0, [pc, #28]	; (23e94 <ble_gattc_log_disc_all_chrs+0x24>)
   23e78:	f7ff ffda 	bl	23e30 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "start_handle=%d end_handle=%d\n",
   23e7c:	89a3      	ldrh	r3, [r4, #12]
   23e7e:	89e2      	ldrh	r2, [r4, #14]
   23e80:	9200      	str	r2, [sp, #0]
   23e82:	3301      	adds	r3, #1
   23e84:	4a04      	ldr	r2, [pc, #16]	; (23e98 <ble_gattc_log_disc_all_chrs+0x28>)
   23e86:	2101      	movs	r1, #1
   23e88:	2004      	movs	r0, #4
   23e8a:	f7f8 ff47 	bl	1cd1c <modlog_printf>
}
   23e8e:	b002      	add	sp, #8
   23e90:	bd10      	pop	{r4, pc}
   23e92:	bf00      	nop
   23e94:	00034940 	.word	0x00034940
   23e98:	00034920 	.word	0x00034920

00023e9c <ble_gattc_log_disc_all_dscs>:
{
   23e9c:	b510      	push	{r4, lr}
   23e9e:	b082      	sub	sp, #8
   23ea0:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("discover all descriptors; ");
   23ea2:	4806      	ldr	r0, [pc, #24]	; (23ebc <ble_gattc_log_disc_all_dscs+0x20>)
   23ea4:	f7ff ffc4 	bl	23e30 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "chr_val_handle=%d end_handle=%d\n",
   23ea8:	8a23      	ldrh	r3, [r4, #16]
   23eaa:	9300      	str	r3, [sp, #0]
   23eac:	89a3      	ldrh	r3, [r4, #12]
   23eae:	4a04      	ldr	r2, [pc, #16]	; (23ec0 <ble_gattc_log_disc_all_dscs+0x24>)
   23eb0:	2101      	movs	r1, #1
   23eb2:	2004      	movs	r0, #4
   23eb4:	f7f8 ff32 	bl	1cd1c <modlog_printf>
}
   23eb8:	b002      	add	sp, #8
   23eba:	bd10      	pop	{r4, pc}
   23ebc:	00034960 	.word	0x00034960
   23ec0:	0003497c 	.word	0x0003497c

00023ec4 <ble_gattc_log_read>:
{
   23ec4:	b510      	push	{r4, lr}
   23ec6:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("read; ");
   23ec8:	4804      	ldr	r0, [pc, #16]	; (23edc <ble_gattc_log_read+0x18>)
   23eca:	f7ff ffb1 	bl	23e30 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d\n", att_handle);
   23ece:	4623      	mov	r3, r4
   23ed0:	4a03      	ldr	r2, [pc, #12]	; (23ee0 <ble_gattc_log_read+0x1c>)
   23ed2:	2101      	movs	r1, #1
   23ed4:	2004      	movs	r0, #4
   23ed6:	f7f8 ff21 	bl	1cd1c <modlog_printf>
}
   23eda:	bd10      	pop	{r4, pc}
   23edc:	000349a0 	.word	0x000349a0
   23ee0:	000349a8 	.word	0x000349a8

00023ee4 <ble_gattc_log_read_long>:
{
   23ee4:	b510      	push	{r4, lr}
   23ee6:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("read long; ");
   23ee8:	4804      	ldr	r0, [pc, #16]	; (23efc <ble_gattc_log_read_long+0x18>)
   23eea:	f7ff ffa1 	bl	23e30 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d\n", proc->read_long.handle);
   23eee:	89a3      	ldrh	r3, [r4, #12]
   23ef0:	4a03      	ldr	r2, [pc, #12]	; (23f00 <ble_gattc_log_read_long+0x1c>)
   23ef2:	2101      	movs	r1, #1
   23ef4:	2004      	movs	r0, #4
   23ef6:	f7f8 ff11 	bl	1cd1c <modlog_printf>
}
   23efa:	bd10      	pop	{r4, pc}
   23efc:	000349b8 	.word	0x000349b8
   23f00:	000349a8 	.word	0x000349a8

00023f04 <ble_gattc_log_read_mult>:
{
   23f04:	b570      	push	{r4, r5, r6, lr}
   23f06:	b082      	sub	sp, #8
   23f08:	4606      	mov	r6, r0
   23f0a:	460d      	mov	r5, r1
    ble_gattc_log_proc_init("read multiple; ");
   23f0c:	4810      	ldr	r0, [pc, #64]	; (23f50 <ble_gattc_log_read_mult+0x4c>)
   23f0e:	f7ff ff8f 	bl	23e30 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handles=");
   23f12:	4a10      	ldr	r2, [pc, #64]	; (23f54 <ble_gattc_log_read_mult+0x50>)
   23f14:	2101      	movs	r1, #1
   23f16:	2004      	movs	r0, #4
   23f18:	f7f8 ff00 	bl	1cd1c <modlog_printf>
    for (i = 0; i < num_handles; i++) {
   23f1c:	2400      	movs	r4, #0
   23f1e:	e009      	b.n	23f34 <ble_gattc_log_read_mult+0x30>
        BLE_HS_LOG(INFO, "%s%d", i != 0 ? "," : "", handles[i]);
   23f20:	4b0d      	ldr	r3, [pc, #52]	; (23f58 <ble_gattc_log_read_mult+0x54>)
   23f22:	f836 2014 	ldrh.w	r2, [r6, r4, lsl #1]
   23f26:	9200      	str	r2, [sp, #0]
   23f28:	4a0c      	ldr	r2, [pc, #48]	; (23f5c <ble_gattc_log_read_mult+0x58>)
   23f2a:	2101      	movs	r1, #1
   23f2c:	2004      	movs	r0, #4
   23f2e:	f7f8 fef5 	bl	1cd1c <modlog_printf>
    for (i = 0; i < num_handles; i++) {
   23f32:	3401      	adds	r4, #1
   23f34:	42a5      	cmp	r5, r4
   23f36:	dd03      	ble.n	23f40 <ble_gattc_log_read_mult+0x3c>
        BLE_HS_LOG(INFO, "%s%d", i != 0 ? "," : "", handles[i]);
   23f38:	2c00      	cmp	r4, #0
   23f3a:	d0f1      	beq.n	23f20 <ble_gattc_log_read_mult+0x1c>
   23f3c:	4b08      	ldr	r3, [pc, #32]	; (23f60 <ble_gattc_log_read_mult+0x5c>)
   23f3e:	e7f0      	b.n	23f22 <ble_gattc_log_read_mult+0x1e>
    BLE_HS_LOG(INFO, "\n");
   23f40:	4a08      	ldr	r2, [pc, #32]	; (23f64 <ble_gattc_log_read_mult+0x60>)
   23f42:	2101      	movs	r1, #1
   23f44:	2004      	movs	r0, #4
   23f46:	f7f8 fee9 	bl	1cd1c <modlog_printf>
}
   23f4a:	b002      	add	sp, #8
   23f4c:	bd70      	pop	{r4, r5, r6, pc}
   23f4e:	bf00      	nop
   23f50:	000349c8 	.word	0x000349c8
   23f54:	000349d8 	.word	0x000349d8
   23f58:	00034114 	.word	0x00034114
   23f5c:	000349e8 	.word	0x000349e8
   23f60:	000349c4 	.word	0x000349c4
   23f64:	0002ff28 	.word	0x0002ff28

00023f68 <ble_gattc_log_write>:
{
   23f68:	b530      	push	{r4, r5, lr}
   23f6a:	b083      	sub	sp, #12
   23f6c:	4604      	mov	r4, r0
   23f6e:	460d      	mov	r5, r1
    if (expecting_rsp) {
   23f70:	b15a      	cbz	r2, 23f8a <ble_gattc_log_write+0x22>
        name = "write; ";
   23f72:	4807      	ldr	r0, [pc, #28]	; (23f90 <ble_gattc_log_write+0x28>)
    ble_gattc_log_proc_init(name);
   23f74:	f7ff ff5c 	bl	23e30 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d len=%d\n", att_handle, len);
   23f78:	9500      	str	r5, [sp, #0]
   23f7a:	4623      	mov	r3, r4
   23f7c:	4a05      	ldr	r2, [pc, #20]	; (23f94 <ble_gattc_log_write+0x2c>)
   23f7e:	2101      	movs	r1, #1
   23f80:	2004      	movs	r0, #4
   23f82:	f7f8 fecb 	bl	1cd1c <modlog_printf>
}
   23f86:	b003      	add	sp, #12
   23f88:	bd30      	pop	{r4, r5, pc}
        name = "write no rsp; ";
   23f8a:	4803      	ldr	r0, [pc, #12]	; (23f98 <ble_gattc_log_write+0x30>)
   23f8c:	e7f2      	b.n	23f74 <ble_gattc_log_write+0xc>
   23f8e:	bf00      	nop
   23f90:	00034a00 	.word	0x00034a00
   23f94:	00034a08 	.word	0x00034a08
   23f98:	000349f0 	.word	0x000349f0

00023f9c <ble_gattc_log_write_long>:
{
   23f9c:	b510      	push	{r4, lr}
   23f9e:	b082      	sub	sp, #8
   23fa0:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("write long; ");
   23fa2:	4807      	ldr	r0, [pc, #28]	; (23fc0 <ble_gattc_log_write_long+0x24>)
   23fa4:	f7ff ff44 	bl	23e30 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d len=%d\n",
   23fa8:	6923      	ldr	r3, [r4, #16]
   23faa:	8a1b      	ldrh	r3, [r3, #16]
   23fac:	9300      	str	r3, [sp, #0]
   23fae:	89a3      	ldrh	r3, [r4, #12]
   23fb0:	4a04      	ldr	r2, [pc, #16]	; (23fc4 <ble_gattc_log_write_long+0x28>)
   23fb2:	2101      	movs	r1, #1
   23fb4:	2004      	movs	r0, #4
   23fb6:	f7f8 feb1 	bl	1cd1c <modlog_printf>
}
   23fba:	b002      	add	sp, #8
   23fbc:	bd10      	pop	{r4, pc}
   23fbe:	bf00      	nop
   23fc0:	00034a20 	.word	0x00034a20
   23fc4:	00034a08 	.word	0x00034a08

00023fc8 <ble_gattc_log_write_reliable>:
{
   23fc8:	b530      	push	{r4, r5, lr}
   23fca:	b083      	sub	sp, #12
   23fcc:	4605      	mov	r5, r0
    ble_gattc_log_proc_init("write reliable; ");
   23fce:	4812      	ldr	r0, [pc, #72]	; (24018 <ble_gattc_log_write_reliable+0x50>)
   23fd0:	f7ff ff2e 	bl	23e30 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handles=");
   23fd4:	4a11      	ldr	r2, [pc, #68]	; (2401c <ble_gattc_log_write_reliable+0x54>)
   23fd6:	2101      	movs	r1, #1
   23fd8:	2004      	movs	r0, #4
   23fda:	f7f8 fe9f 	bl	1cd1c <modlog_printf>
    for (i = 0; i < proc->write_reliable.num_attrs; i++) {
   23fde:	2400      	movs	r4, #0
   23fe0:	e00a      	b.n	23ff8 <ble_gattc_log_write_reliable+0x30>
        BLE_HS_LOG(INFO, "%s%d", i != 0 ? "," : "",
   23fe2:	4b0f      	ldr	r3, [pc, #60]	; (24020 <ble_gattc_log_write_reliable+0x58>)
   23fe4:	3401      	adds	r4, #1
   23fe6:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   23fea:	8892      	ldrh	r2, [r2, #4]
   23fec:	9200      	str	r2, [sp, #0]
   23fee:	4a0d      	ldr	r2, [pc, #52]	; (24024 <ble_gattc_log_write_reliable+0x5c>)
   23ff0:	2101      	movs	r1, #1
   23ff2:	2004      	movs	r0, #4
   23ff4:	f7f8 fe92 	bl	1cd1c <modlog_printf>
    for (i = 0; i < proc->write_reliable.num_attrs; i++) {
   23ff8:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   23ffc:	42a3      	cmp	r3, r4
   23ffe:	dd03      	ble.n	24008 <ble_gattc_log_write_reliable+0x40>
        BLE_HS_LOG(INFO, "%s%d", i != 0 ? "," : "",
   24000:	2c00      	cmp	r4, #0
   24002:	d0ee      	beq.n	23fe2 <ble_gattc_log_write_reliable+0x1a>
   24004:	4b08      	ldr	r3, [pc, #32]	; (24028 <ble_gattc_log_write_reliable+0x60>)
   24006:	e7ed      	b.n	23fe4 <ble_gattc_log_write_reliable+0x1c>
    BLE_HS_LOG(INFO, "\n");
   24008:	4a08      	ldr	r2, [pc, #32]	; (2402c <ble_gattc_log_write_reliable+0x64>)
   2400a:	2101      	movs	r1, #1
   2400c:	2004      	movs	r0, #4
   2400e:	f7f8 fe85 	bl	1cd1c <modlog_printf>
}
   24012:	b003      	add	sp, #12
   24014:	bd30      	pop	{r4, r5, pc}
   24016:	bf00      	nop
   24018:	00034a30 	.word	0x00034a30
   2401c:	000349d8 	.word	0x000349d8
   24020:	00034114 	.word	0x00034114
   24024:	000349e8 	.word	0x000349e8
   24028:	000349c4 	.word	0x000349c4
   2402c:	0002ff28 	.word	0x0002ff28

00024030 <ble_gattc_log_notify>:
{
   24030:	b510      	push	{r4, lr}
   24032:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("notify; ");
   24034:	4804      	ldr	r0, [pc, #16]	; (24048 <ble_gattc_log_notify+0x18>)
   24036:	f7ff fefb 	bl	23e30 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d\n", att_handle);
   2403a:	4623      	mov	r3, r4
   2403c:	4a03      	ldr	r2, [pc, #12]	; (2404c <ble_gattc_log_notify+0x1c>)
   2403e:	2101      	movs	r1, #1
   24040:	2004      	movs	r0, #4
   24042:	f7f8 fe6b 	bl	1cd1c <modlog_printf>
}
   24046:	bd10      	pop	{r4, pc}
   24048:	00034a44 	.word	0x00034a44
   2404c:	000349a8 	.word	0x000349a8

00024050 <ble_gattc_log_indicate>:
{
   24050:	b510      	push	{r4, lr}
   24052:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("indicate; ");
   24054:	4804      	ldr	r0, [pc, #16]	; (24068 <ble_gattc_log_indicate+0x18>)
   24056:	f7ff feeb 	bl	23e30 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d\n", att_handle);
   2405a:	4623      	mov	r3, r4
   2405c:	4a03      	ldr	r2, [pc, #12]	; (2406c <ble_gattc_log_indicate+0x1c>)
   2405e:	2101      	movs	r1, #1
   24060:	2004      	movs	r0, #4
   24062:	f7f8 fe5b 	bl	1cd1c <modlog_printf>
}
   24066:	bd10      	pop	{r4, pc}
   24068:	00034a50 	.word	0x00034a50
   2406c:	000349a8 	.word	0x000349a8

00024070 <ble_gattc_mtu_tx>:
{
   24070:	b570      	push	{r4, r5, r6, lr}
   24072:	b082      	sub	sp, #8
   24074:	4604      	mov	r4, r0
   24076:	2600      	movs	r6, #0
    ble_hs_lock();
   24078:	f002 fa5e 	bl	26538 <ble_hs_lock>
    rc = ble_att_conn_chan_find(proc->conn_handle, &conn, &chan);
   2407c:	aa01      	add	r2, sp, #4
   2407e:	4669      	mov	r1, sp
   24080:	8920      	ldrh	r0, [r4, #8]
   24082:	f7fa fdbe 	bl	1ec02 <ble_att_conn_chan_find>
    if (rc == 0) {
   24086:	4605      	mov	r5, r0
   24088:	b908      	cbnz	r0, 2408e <ble_gattc_mtu_tx+0x1e>
        mtu = chan->my_mtu;
   2408a:	9b01      	ldr	r3, [sp, #4]
   2408c:	895e      	ldrh	r6, [r3, #10]
    ble_hs_unlock();
   2408e:	f002 fa57 	bl	26540 <ble_hs_unlock>
    if (rc == 0) {
   24092:	b115      	cbz	r5, 2409a <ble_gattc_mtu_tx+0x2a>
}
   24094:	4628      	mov	r0, r5
   24096:	b002      	add	sp, #8
   24098:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_att_clt_tx_mtu(proc->conn_handle, mtu);
   2409a:	4631      	mov	r1, r6
   2409c:	8920      	ldrh	r0, [r4, #8]
   2409e:	f7fa ffc8 	bl	1f032 <ble_att_clt_tx_mtu>
   240a2:	4605      	mov	r5, r0
    return rc;
   240a4:	e7f6      	b.n	24094 <ble_gattc_mtu_tx+0x24>
	...

000240a8 <ble_gattc_log_uuid>:
{
   240a8:	b500      	push	{lr}
   240aa:	b08b      	sub	sp, #44	; 0x2c
    ble_uuid_to_str(uuid, buf);
   240ac:	4669      	mov	r1, sp
   240ae:	f005 fc93 	bl	299d8 <ble_uuid_to_str>
    BLE_HS_LOG(INFO, "%s", buf);
   240b2:	466b      	mov	r3, sp
   240b4:	4a03      	ldr	r2, [pc, #12]	; (240c4 <ble_gattc_log_uuid+0x1c>)
   240b6:	2101      	movs	r1, #1
   240b8:	2004      	movs	r0, #4
   240ba:	f7f8 fe2f 	bl	1cd1c <modlog_printf>
}
   240be:	b00b      	add	sp, #44	; 0x2c
   240c0:	f85d fb04 	ldr.w	pc, [sp], #4
   240c4:	00030424 	.word	0x00030424

000240c8 <ble_gattc_log_disc_svc_uuid>:
{
   240c8:	b510      	push	{r4, lr}
   240ca:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("discover service by uuid; uuid=");
   240cc:	4806      	ldr	r0, [pc, #24]	; (240e8 <ble_gattc_log_disc_svc_uuid+0x20>)
   240ce:	f7ff feaf 	bl	23e30 <ble_gattc_log_proc_init>
    ble_gattc_log_uuid(&proc->disc_svc_uuid.service_uuid.u);
   240d2:	f104 000c 	add.w	r0, r4, #12
   240d6:	f7ff ffe7 	bl	240a8 <ble_gattc_log_uuid>
    BLE_HS_LOG(INFO, "\n");
   240da:	4a04      	ldr	r2, [pc, #16]	; (240ec <ble_gattc_log_disc_svc_uuid+0x24>)
   240dc:	2101      	movs	r1, #1
   240de:	2004      	movs	r0, #4
   240e0:	f7f8 fe1c 	bl	1cd1c <modlog_printf>
}
   240e4:	bd10      	pop	{r4, pc}
   240e6:	bf00      	nop
   240e8:	00034a5c 	.word	0x00034a5c
   240ec:	0002ff28 	.word	0x0002ff28

000240f0 <ble_gattc_log_disc_chr_uuid>:
{
   240f0:	b510      	push	{r4, lr}
   240f2:	b082      	sub	sp, #8
   240f4:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("discover characteristics by uuid; ");
   240f6:	480b      	ldr	r0, [pc, #44]	; (24124 <ble_gattc_log_disc_chr_uuid+0x34>)
   240f8:	f7ff fe9a 	bl	23e30 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "start_handle=%d end_handle=%d uuid=",
   240fc:	8c23      	ldrh	r3, [r4, #32]
   240fe:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   24100:	9200      	str	r2, [sp, #0]
   24102:	3301      	adds	r3, #1
   24104:	4a08      	ldr	r2, [pc, #32]	; (24128 <ble_gattc_log_disc_chr_uuid+0x38>)
   24106:	2101      	movs	r1, #1
   24108:	2004      	movs	r0, #4
   2410a:	f7f8 fe07 	bl	1cd1c <modlog_printf>
    ble_gattc_log_uuid(&proc->disc_chr_uuid.chr_uuid.u);
   2410e:	f104 000c 	add.w	r0, r4, #12
   24112:	f7ff ffc9 	bl	240a8 <ble_gattc_log_uuid>
    BLE_HS_LOG(INFO, "\n");
   24116:	4a05      	ldr	r2, [pc, #20]	; (2412c <ble_gattc_log_disc_chr_uuid+0x3c>)
   24118:	2101      	movs	r1, #1
   2411a:	2004      	movs	r0, #4
   2411c:	f7f8 fdfe 	bl	1cd1c <modlog_printf>
}
   24120:	b002      	add	sp, #8
   24122:	bd10      	pop	{r4, pc}
   24124:	00034a7c 	.word	0x00034a7c
   24128:	00034aa0 	.word	0x00034aa0
   2412c:	0002ff28 	.word	0x0002ff28

00024130 <ble_gattc_log_read_uuid>:
{
   24130:	b570      	push	{r4, r5, r6, lr}
   24132:	b082      	sub	sp, #8
   24134:	4605      	mov	r5, r0
   24136:	460e      	mov	r6, r1
   24138:	4614      	mov	r4, r2
    ble_gattc_log_proc_init("read by uuid; ");
   2413a:	480a      	ldr	r0, [pc, #40]	; (24164 <ble_gattc_log_read_uuid+0x34>)
   2413c:	f7ff fe78 	bl	23e30 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "start_handle=%d end_handle=%d uuid=",
   24140:	9600      	str	r6, [sp, #0]
   24142:	462b      	mov	r3, r5
   24144:	4a08      	ldr	r2, [pc, #32]	; (24168 <ble_gattc_log_read_uuid+0x38>)
   24146:	2101      	movs	r1, #1
   24148:	2004      	movs	r0, #4
   2414a:	f7f8 fde7 	bl	1cd1c <modlog_printf>
    ble_gattc_log_uuid(uuid);
   2414e:	4620      	mov	r0, r4
   24150:	f7ff ffaa 	bl	240a8 <ble_gattc_log_uuid>
    BLE_HS_LOG(INFO, "\n");
   24154:	4a05      	ldr	r2, [pc, #20]	; (2416c <ble_gattc_log_read_uuid+0x3c>)
   24156:	2101      	movs	r1, #1
   24158:	2004      	movs	r0, #4
   2415a:	f7f8 fddf 	bl	1cd1c <modlog_printf>
}
   2415e:	b002      	add	sp, #8
   24160:	bd70      	pop	{r4, r5, r6, pc}
   24162:	bf00      	nop
   24164:	00034ac4 	.word	0x00034ac4
   24168:	00034aa0 	.word	0x00034aa0
   2416c:	0002ff28 	.word	0x0002ff28

00024170 <ble_gattc_read_mult_tx>:
{
   24170:	b508      	push	{r3, lr}
    rc = ble_att_clt_tx_read_mult(proc->conn_handle, proc->read_mult.handles,
   24172:	7f02      	ldrb	r2, [r0, #28]
   24174:	f100 010c 	add.w	r1, r0, #12
   24178:	8900      	ldrh	r0, [r0, #8]
   2417a:	f7fb f8e8 	bl	1f34e <ble_att_clt_tx_read_mult>
}
   2417e:	bd08      	pop	{r3, pc}

00024180 <ble_gattc_read_uuid_rx_adata>:
{
   24180:	b510      	push	{r4, lr}
   24182:	b082      	sub	sp, #8
   24184:	4604      	mov	r4, r0
   24186:	460b      	mov	r3, r1
    attr.handle = adata->att_handle;
   24188:	880a      	ldrh	r2, [r1, #0]
   2418a:	f8ad 2000 	strh.w	r2, [sp]
    attr.offset = 0;
   2418e:	2200      	movs	r2, #0
   24190:	f8ad 2002 	strh.w	r2, [sp, #2]
    attr.om = ble_hs_mbuf_from_flat(adata->value, adata->value_len);
   24194:	8889      	ldrh	r1, [r1, #4]
   24196:	6898      	ldr	r0, [r3, #8]
   24198:	f004 f9cb 	bl	28532 <ble_hs_mbuf_from_flat>
   2419c:	9001      	str	r0, [sp, #4]
    if (attr.om == NULL) {
   2419e:	b168      	cbz	r0, 241bc <ble_gattc_read_uuid_rx_adata+0x3c>
        rc = 0;
   241a0:	2100      	movs	r1, #0
    rc = ble_gattc_read_uuid_cb(proc, rc, 0, &attr);
   241a2:	466b      	mov	r3, sp
   241a4:	2200      	movs	r2, #0
   241a6:	4620      	mov	r0, r4
   241a8:	f7ff f910 	bl	233cc <ble_gattc_read_uuid_cb>
   241ac:	4604      	mov	r4, r0
    os_mbuf_free_chain(attr.om);
   241ae:	9801      	ldr	r0, [sp, #4]
   241b0:	f7f5 fa2d 	bl	1960e <os_mbuf_free_chain>
    if (rc != 0) {
   241b4:	b924      	cbnz	r4, 241c0 <ble_gattc_read_uuid_rx_adata+0x40>
}
   241b6:	4620      	mov	r0, r4
   241b8:	b002      	add	sp, #8
   241ba:	bd10      	pop	{r4, pc}
        rc = BLE_HS_ENOMEM;
   241bc:	2106      	movs	r1, #6
   241be:	e7f0      	b.n	241a2 <ble_gattc_read_uuid_rx_adata+0x22>
        return BLE_HS_EDONE;
   241c0:	240e      	movs	r4, #14
   241c2:	e7f8      	b.n	241b6 <ble_gattc_read_uuid_rx_adata+0x36>

000241c4 <ble_gattc_indicate_err>:
{
   241c4:	b538      	push	{r3, r4, r5, lr}
   241c6:	4604      	mov	r4, r0
   241c8:	460d      	mov	r5, r1
    if (status != BLE_HS_ENOTCONN) {
   241ca:	2907      	cmp	r1, #7
   241cc:	d004      	beq.n	241d8 <ble_gattc_indicate_err+0x14>
        rc = ble_gatts_rx_indicate_ack(proc->conn_handle,
   241ce:	8981      	ldrh	r1, [r0, #12]
   241d0:	8900      	ldrh	r0, [r0, #8]
   241d2:	f001 fdff 	bl	25dd4 <ble_gatts_rx_indicate_ack>
        if (rc != 0) {
   241d6:	b940      	cbnz	r0, 241ea <ble_gattc_indicate_err+0x26>
    ble_gap_notify_tx_event(status, proc->conn_handle,
   241d8:	2301      	movs	r3, #1
   241da:	89a2      	ldrh	r2, [r4, #12]
   241dc:	8921      	ldrh	r1, [r4, #8]
   241de:	4628      	mov	r0, r5
   241e0:	f7fe fd4b 	bl	22c7a <ble_gap_notify_tx_event>
    ble_gatts_send_next_indicate(proc->conn_handle);
   241e4:	8920      	ldrh	r0, [r4, #8]
   241e6:	f001 fdc9 	bl	25d7c <ble_gatts_send_next_indicate>
}
   241ea:	bd38      	pop	{r3, r4, r5, pc}

000241ec <ble_gattc_indicate_rx_rsp>:
 * Handles an incoming handle-value-confirmation for the specified indication
 * proc.
 */
static void
ble_gattc_indicate_rx_rsp(struct ble_gattc_proc *proc)
{
   241ec:	b510      	push	{r4, lr}
   241ee:	4604      	mov	r4, r0
    int rc;

    ble_gattc_dbg_assert_proc_not_inserted(proc);

    rc = ble_gatts_rx_indicate_ack(proc->conn_handle,
   241f0:	8981      	ldrh	r1, [r0, #12]
   241f2:	8900      	ldrh	r0, [r0, #8]
   241f4:	f001 fdee 	bl	25dd4 <ble_gatts_rx_indicate_ack>
                                   proc->indicate.chr_val_handle);
    if (rc != 0) {
   241f8:	b100      	cbz	r0, 241fc <ble_gattc_indicate_rx_rsp+0x10>
    ble_gap_notify_tx_event(BLE_HS_EDONE, proc->conn_handle,
                            proc->indicate.chr_val_handle, 1);

    /* Send the next indication if one is pending. */
    ble_gatts_send_next_indicate(proc->conn_handle);
}
   241fa:	bd10      	pop	{r4, pc}
    ble_gap_notify_tx_event(BLE_HS_EDONE, proc->conn_handle,
   241fc:	2301      	movs	r3, #1
   241fe:	89a2      	ldrh	r2, [r4, #12]
   24200:	8921      	ldrh	r1, [r4, #8]
   24202:	200e      	movs	r0, #14
   24204:	f7fe fd39 	bl	22c7a <ble_gap_notify_tx_event>
    ble_gatts_send_next_indicate(proc->conn_handle);
   24208:	8920      	ldrh	r0, [r4, #8]
   2420a:	f001 fdb7 	bl	25d7c <ble_gatts_send_next_indicate>
   2420e:	e7f4      	b.n	241fa <ble_gattc_indicate_rx_rsp+0xe>

00024210 <ble_gattc_disc_all_svcs_rx_adata>:
{
   24210:	b570      	push	{r4, r5, r6, lr}
   24212:	b086      	sub	sp, #24
   24214:	4605      	mov	r5, r0
   24216:	460c      	mov	r4, r1
    switch (adata->value_len) {
   24218:	684a      	ldr	r2, [r1, #4]
   2421a:	2a02      	cmp	r2, #2
   2421c:	d00c      	beq.n	24238 <ble_gattc_disc_all_svcs_rx_adata+0x28>
   2421e:	2a10      	cmp	r2, #16
   24220:	d00a      	beq.n	24238 <ble_gattc_disc_all_svcs_rx_adata+0x28>
   24222:	260a      	movs	r6, #10
    cbrc = ble_gattc_disc_all_svcs_cb(proc, rc, 0, &service);
   24224:	466b      	mov	r3, sp
   24226:	2200      	movs	r2, #0
   24228:	b2b1      	uxth	r1, r6
   2422a:	4628      	mov	r0, r5
   2422c:	f7fe ff32 	bl	23094 <ble_gattc_disc_all_svcs_cb>
    if (rc != 0 || cbrc != 0) {
   24230:	b9ce      	cbnz	r6, 24266 <ble_gattc_disc_all_svcs_rx_adata+0x56>
   24232:	b9b0      	cbnz	r0, 24262 <ble_gattc_disc_all_svcs_rx_adata+0x52>
}
   24234:	b006      	add	sp, #24
   24236:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_uuid_init_from_att_buf(&service.uuid, adata->value,
   24238:	68a1      	ldr	r1, [r4, #8]
   2423a:	a801      	add	r0, sp, #4
   2423c:	f005 fc27 	bl	29a8e <ble_uuid_init_from_att_buf>
        if (rc != 0) {
   24240:	4606      	mov	r6, r0
   24242:	b950      	cbnz	r0, 2425a <ble_gattc_disc_all_svcs_rx_adata+0x4a>
    if (adata->end_group_handle <= proc->disc_all_svcs.prev_handle) {
   24244:	8863      	ldrh	r3, [r4, #2]
   24246:	89aa      	ldrh	r2, [r5, #12]
   24248:	4293      	cmp	r3, r2
   2424a:	d908      	bls.n	2425e <ble_gattc_disc_all_svcs_rx_adata+0x4e>
    proc->disc_all_svcs.prev_handle = adata->end_group_handle;
   2424c:	81ab      	strh	r3, [r5, #12]
    service.start_handle = adata->att_handle;
   2424e:	8822      	ldrh	r2, [r4, #0]
   24250:	f8ad 2000 	strh.w	r2, [sp]
    service.end_handle = adata->end_group_handle;
   24254:	f8ad 3002 	strh.w	r3, [sp, #2]
    rc = 0;
   24258:	e7e4      	b.n	24224 <ble_gattc_disc_all_svcs_rx_adata+0x14>
            rc = BLE_HS_EBADDATA;
   2425a:	260a      	movs	r6, #10
   2425c:	e7e2      	b.n	24224 <ble_gattc_disc_all_svcs_rx_adata+0x14>
        rc = BLE_HS_EBADDATA;
   2425e:	260a      	movs	r6, #10
   24260:	e7e0      	b.n	24224 <ble_gattc_disc_all_svcs_rx_adata+0x14>
        return BLE_HS_EDONE;
   24262:	200e      	movs	r0, #14
   24264:	e7e6      	b.n	24234 <ble_gattc_disc_all_svcs_rx_adata+0x24>
   24266:	200e      	movs	r0, #14
   24268:	e7e4      	b.n	24234 <ble_gattc_disc_all_svcs_rx_adata+0x24>

0002426a <ble_gattc_disc_all_chrs_rx_adata>:
{
   2426a:	b570      	push	{r4, r5, r6, lr}
   2426c:	b088      	sub	sp, #32
   2426e:	4606      	mov	r6, r0
   24270:	460c      	mov	r4, r1
    memset(&chr, 0, sizeof chr);
   24272:	2300      	movs	r3, #0
   24274:	9301      	str	r3, [sp, #4]
   24276:	9302      	str	r3, [sp, #8]
   24278:	9303      	str	r3, [sp, #12]
   2427a:	9304      	str	r3, [sp, #16]
   2427c:	9305      	str	r3, [sp, #20]
   2427e:	9306      	str	r3, [sp, #24]
   24280:	9307      	str	r3, [sp, #28]
    chr.def_handle = adata->att_handle;
   24282:	880b      	ldrh	r3, [r1, #0]
   24284:	f8ad 3004 	strh.w	r3, [sp, #4]
    switch (adata->value_len) {
   24288:	684a      	ldr	r2, [r1, #4]
   2428a:	2a05      	cmp	r2, #5
   2428c:	d00c      	beq.n	242a8 <ble_gattc_disc_all_chrs_rx_adata+0x3e>
   2428e:	2a13      	cmp	r2, #19
   24290:	d00a      	beq.n	242a8 <ble_gattc_disc_all_chrs_rx_adata+0x3e>
   24292:	250a      	movs	r5, #10
    cbrc = ble_gattc_disc_all_chrs_cb(proc, rc, 0, &chr);
   24294:	ab01      	add	r3, sp, #4
   24296:	2200      	movs	r2, #0
   24298:	4629      	mov	r1, r5
   2429a:	4630      	mov	r0, r6
   2429c:	f7fe ffaa 	bl	231f4 <ble_gattc_disc_all_chrs_cb>
    if (rc != 0 || cbrc != 0) {
   242a0:	b9fd      	cbnz	r5, 242e2 <ble_gattc_disc_all_chrs_rx_adata+0x78>
   242a2:	b9e0      	cbnz	r0, 242de <ble_gattc_disc_all_chrs_rx_adata+0x74>
}
   242a4:	b008      	add	sp, #32
   242a6:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_uuid_init_from_att_buf(&chr.uuid, adata->value + 3,
   242a8:	68a1      	ldr	r1, [r4, #8]
   242aa:	3a03      	subs	r2, #3
   242ac:	3103      	adds	r1, #3
   242ae:	a803      	add	r0, sp, #12
   242b0:	f005 fbed 	bl	29a8e <ble_uuid_init_from_att_buf>
        if (rc != 0) {
   242b4:	4605      	mov	r5, r0
   242b6:	b108      	cbz	r0, 242bc <ble_gattc_disc_all_chrs_rx_adata+0x52>
            rc = BLE_HS_EBADDATA;
   242b8:	250a      	movs	r5, #10
   242ba:	e7eb      	b.n	24294 <ble_gattc_disc_all_chrs_rx_adata+0x2a>
    chr.properties = adata->value[0];
   242bc:	68a0      	ldr	r0, [r4, #8]
   242be:	f810 3b01 	ldrb.w	r3, [r0], #1
   242c2:	f88d 3008 	strb.w	r3, [sp, #8]
    chr.val_handle = get_le16(adata->value + 1);
   242c6:	f7f4 fda9 	bl	18e1c <get_le16>
   242ca:	f8ad 0006 	strh.w	r0, [sp, #6]
    if (adata->att_handle <= proc->disc_all_chrs.prev_handle) {
   242ce:	8823      	ldrh	r3, [r4, #0]
   242d0:	89b2      	ldrh	r2, [r6, #12]
   242d2:	4293      	cmp	r3, r2
   242d4:	d901      	bls.n	242da <ble_gattc_disc_all_chrs_rx_adata+0x70>
    proc->disc_all_chrs.prev_handle = adata->att_handle;
   242d6:	81b3      	strh	r3, [r6, #12]
    rc = 0;
   242d8:	e7dc      	b.n	24294 <ble_gattc_disc_all_chrs_rx_adata+0x2a>
        rc = BLE_HS_EBADDATA;
   242da:	250a      	movs	r5, #10
   242dc:	e7da      	b.n	24294 <ble_gattc_disc_all_chrs_rx_adata+0x2a>
        return BLE_HS_EDONE;
   242de:	200e      	movs	r0, #14
   242e0:	e7e0      	b.n	242a4 <ble_gattc_disc_all_chrs_rx_adata+0x3a>
   242e2:	200e      	movs	r0, #14
   242e4:	e7de      	b.n	242a4 <ble_gattc_disc_all_chrs_rx_adata+0x3a>

000242e6 <ble_gattc_find_inc_svcs_rx_adata>:
    if (proc->find_inc_svcs.cur_start != 0) {
   242e6:	8a03      	ldrh	r3, [r0, #16]
   242e8:	2b00      	cmp	r3, #0
   242ea:	d13f      	bne.n	2436c <ble_gattc_find_inc_svcs_rx_adata+0x86>
{
   242ec:	b530      	push	{r4, r5, lr}
   242ee:	b087      	sub	sp, #28
   242f0:	4604      	mov	r4, r0
   242f2:	460d      	mov	r5, r1
    if (adata->att_handle <= proc->find_inc_svcs.prev_handle) {
   242f4:	880b      	ldrh	r3, [r1, #0]
   242f6:	8982      	ldrh	r2, [r0, #12]
   242f8:	4293      	cmp	r3, r2
   242fa:	d928      	bls.n	2434e <ble_gattc_find_inc_svcs_rx_adata+0x68>
    proc->find_inc_svcs.prev_handle = adata->att_handle;
   242fc:	8183      	strh	r3, [r0, #12]
    switch (adata->value_len) {
   242fe:	684b      	ldr	r3, [r1, #4]
   24300:	2b04      	cmp	r3, #4
   24302:	d003      	beq.n	2430c <ble_gattc_find_inc_svcs_rx_adata+0x26>
   24304:	2b06      	cmp	r3, #6
   24306:	d00d      	beq.n	24324 <ble_gattc_find_inc_svcs_rx_adata+0x3e>
   24308:	250a      	movs	r5, #10
   2430a:	e021      	b.n	24350 <ble_gattc_find_inc_svcs_rx_adata+0x6a>
        proc->find_inc_svcs.cur_start = get_le16(adata->value + 0);
   2430c:	6888      	ldr	r0, [r1, #8]
   2430e:	f7f4 fd85 	bl	18e1c <get_le16>
   24312:	8220      	strh	r0, [r4, #16]
        proc->find_inc_svcs.cur_end = get_le16(adata->value + 2);
   24314:	68a8      	ldr	r0, [r5, #8]
   24316:	3002      	adds	r0, #2
   24318:	f7f4 fd80 	bl	18e1c <get_le16>
   2431c:	8260      	strh	r0, [r4, #18]
    rc = 0;
   2431e:	2500      	movs	r5, #0
        cbrc = 0;
   24320:	4628      	mov	r0, r5
   24322:	e01d      	b.n	24360 <ble_gattc_find_inc_svcs_rx_adata+0x7a>
        service.start_handle = get_le16(adata->value + 0);
   24324:	6888      	ldr	r0, [r1, #8]
   24326:	f7f4 fd79 	bl	18e1c <get_le16>
   2432a:	f8ad 0000 	strh.w	r0, [sp]
        service.end_handle = get_le16(adata->value + 2);
   2432e:	68a8      	ldr	r0, [r5, #8]
   24330:	3002      	adds	r0, #2
   24332:	f7f4 fd73 	bl	18e1c <get_le16>
   24336:	f8ad 0002 	strh.w	r0, [sp, #2]
        rc = ble_uuid_init_from_att_buf(&service.uuid, adata->value + 4, 2);
   2433a:	68a9      	ldr	r1, [r5, #8]
   2433c:	2202      	movs	r2, #2
   2433e:	3104      	adds	r1, #4
   24340:	a801      	add	r0, sp, #4
   24342:	f005 fba4 	bl	29a8e <ble_uuid_init_from_att_buf>
        if (rc != 0) {
   24346:	4605      	mov	r5, r0
   24348:	b110      	cbz	r0, 24350 <ble_gattc_find_inc_svcs_rx_adata+0x6a>
            rc = BLE_HS_EBADDATA;
   2434a:	250a      	movs	r5, #10
   2434c:	e000      	b.n	24350 <ble_gattc_find_inc_svcs_rx_adata+0x6a>
        rc = BLE_HS_EBADDATA;
   2434e:	250a      	movs	r5, #10
        cbrc = ble_gattc_find_inc_svcs_cb(proc, 0, 0, &service);
   24350:	466b      	mov	r3, sp
   24352:	2200      	movs	r2, #0
   24354:	4611      	mov	r1, r2
   24356:	4620      	mov	r0, r4
   24358:	f7fe ff1c 	bl	23194 <ble_gattc_find_inc_svcs_cb>
        if (rc != 0) {
   2435c:	b105      	cbz	r5, 24360 <ble_gattc_find_inc_svcs_rx_adata+0x7a>
            rc = cbrc;
   2435e:	4605      	mov	r5, r0
    if (rc != 0 || cbrc != 0) {
   24360:	b935      	cbnz	r5, 24370 <ble_gattc_find_inc_svcs_rx_adata+0x8a>
   24362:	b908      	cbnz	r0, 24368 <ble_gattc_find_inc_svcs_rx_adata+0x82>
}
   24364:	b007      	add	sp, #28
   24366:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EDONE;
   24368:	200e      	movs	r0, #14
   2436a:	e7fb      	b.n	24364 <ble_gattc_find_inc_svcs_rx_adata+0x7e>
        return 0;
   2436c:	2000      	movs	r0, #0
}
   2436e:	4770      	bx	lr
        return BLE_HS_EDONE;
   24370:	200e      	movs	r0, #14
   24372:	e7f7      	b.n	24364 <ble_gattc_find_inc_svcs_rx_adata+0x7e>

00024374 <ble_gattc_disc_chr_uuid_rx_adata>:
{
   24374:	b570      	push	{r4, r5, r6, lr}
   24376:	b088      	sub	sp, #32
   24378:	4606      	mov	r6, r0
   2437a:	460c      	mov	r4, r1
    memset(&chr, 0, sizeof chr);
   2437c:	2300      	movs	r3, #0
   2437e:	9301      	str	r3, [sp, #4]
   24380:	9302      	str	r3, [sp, #8]
   24382:	9303      	str	r3, [sp, #12]
   24384:	9304      	str	r3, [sp, #16]
   24386:	9305      	str	r3, [sp, #20]
   24388:	9306      	str	r3, [sp, #24]
   2438a:	9307      	str	r3, [sp, #28]
    chr.def_handle = adata->att_handle;
   2438c:	880b      	ldrh	r3, [r1, #0]
   2438e:	f8ad 3004 	strh.w	r3, [sp, #4]
    switch (adata->value_len) {
   24392:	684a      	ldr	r2, [r1, #4]
   24394:	2a05      	cmp	r2, #5
   24396:	d00e      	beq.n	243b6 <ble_gattc_disc_chr_uuid_rx_adata+0x42>
   24398:	2a13      	cmp	r2, #19
   2439a:	d00c      	beq.n	243b6 <ble_gattc_disc_chr_uuid_rx_adata+0x42>
        cbrc = ble_gattc_disc_chr_uuid_cb(proc, rc, 0, NULL);
   2439c:	2300      	movs	r3, #0
   2439e:	461a      	mov	r2, r3
   243a0:	210a      	movs	r1, #10
   243a2:	4630      	mov	r0, r6
   243a4:	f7fe ff54 	bl	23250 <ble_gattc_disc_chr_uuid_cb>
   243a8:	4605      	mov	r5, r0
   243aa:	240a      	movs	r4, #10
    if (rc != 0 || cbrc != 0) {
   243ac:	bb6c      	cbnz	r4, 2440a <ble_gattc_disc_chr_uuid_rx_adata+0x96>
   243ae:	bb55      	cbnz	r5, 24406 <ble_gattc_disc_chr_uuid_rx_adata+0x92>
}
   243b0:	4628      	mov	r0, r5
   243b2:	b008      	add	sp, #32
   243b4:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_uuid_init_from_att_buf(&chr.uuid, adata->value + 3,
   243b6:	68a1      	ldr	r1, [r4, #8]
   243b8:	3a03      	subs	r2, #3
   243ba:	3103      	adds	r1, #3
   243bc:	a803      	add	r0, sp, #12
   243be:	f005 fb66 	bl	29a8e <ble_uuid_init_from_att_buf>
        if (rc != 0) {
   243c2:	4605      	mov	r5, r0
   243c4:	2800      	cmp	r0, #0
   243c6:	d1e9      	bne.n	2439c <ble_gattc_disc_chr_uuid_rx_adata+0x28>
    chr.properties = adata->value[0];
   243c8:	68a0      	ldr	r0, [r4, #8]
   243ca:	f810 3b01 	ldrb.w	r3, [r0], #1
   243ce:	f88d 3008 	strb.w	r3, [sp, #8]
    chr.val_handle = get_le16(adata->value + 1);
   243d2:	f7f4 fd23 	bl	18e1c <get_le16>
   243d6:	f8ad 0006 	strh.w	r0, [sp, #6]
    if (adata->att_handle <= proc->disc_chr_uuid.prev_handle) {
   243da:	8823      	ldrh	r3, [r4, #0]
   243dc:	8c32      	ldrh	r2, [r6, #32]
   243de:	4293      	cmp	r3, r2
   243e0:	d9dc      	bls.n	2439c <ble_gattc_disc_chr_uuid_rx_adata+0x28>
    proc->disc_chr_uuid.prev_handle = adata->att_handle;
   243e2:	8433      	strh	r3, [r6, #32]
    } else if (ble_uuid_cmp(&chr.uuid.u, &proc->disc_chr_uuid.chr_uuid.u) == 0) {
   243e4:	f106 010c 	add.w	r1, r6, #12
   243e8:	a803      	add	r0, sp, #12
   243ea:	f005 fad6 	bl	2999a <ble_uuid_cmp>
   243ee:	4604      	mov	r4, r0
   243f0:	b108      	cbz	r0, 243f6 <ble_gattc_disc_chr_uuid_rx_adata+0x82>
    rc = 0;
   243f2:	462c      	mov	r4, r5
   243f4:	e7da      	b.n	243ac <ble_gattc_disc_chr_uuid_rx_adata+0x38>
        cbrc = ble_gattc_disc_chr_uuid_cb(proc, 0, 0, &chr);
   243f6:	ab01      	add	r3, sp, #4
   243f8:	2200      	movs	r2, #0
   243fa:	4611      	mov	r1, r2
   243fc:	4630      	mov	r0, r6
   243fe:	f7fe ff27 	bl	23250 <ble_gattc_disc_chr_uuid_cb>
   24402:	4605      	mov	r5, r0
   24404:	e7d2      	b.n	243ac <ble_gattc_disc_chr_uuid_rx_adata+0x38>
        return BLE_HS_EDONE;
   24406:	250e      	movs	r5, #14
   24408:	e7d2      	b.n	243b0 <ble_gattc_disc_chr_uuid_rx_adata+0x3c>
   2440a:	250e      	movs	r5, #14
   2440c:	e7d0      	b.n	243b0 <ble_gattc_disc_chr_uuid_rx_adata+0x3c>

0002440e <ble_gattc_find_inc_svcs_rx_read_rsp>:
{
   2440e:	b5f0      	push	{r4, r5, r6, r7, lr}
   24410:	b087      	sub	sp, #28
   24412:	4606      	mov	r6, r0
   24414:	460c      	mov	r4, r1
   24416:	4615      	mov	r5, r2
    rc = ble_uuid_init_from_att_mbuf(&service.uuid, *om, 0, 16);
   24418:	2310      	movs	r3, #16
   2441a:	2200      	movs	r2, #0
   2441c:	6829      	ldr	r1, [r5, #0]
   2441e:	a801      	add	r0, sp, #4
   24420:	f005 fb54 	bl	29acc <ble_uuid_init_from_att_mbuf>
   24424:	4607      	mov	r7, r0
    os_mbuf_free_chain(*om);
   24426:	6828      	ldr	r0, [r5, #0]
   24428:	f7f5 f8f1 	bl	1960e <os_mbuf_free_chain>
    *om = NULL;
   2442c:	2300      	movs	r3, #0
   2442e:	602b      	str	r3, [r5, #0]
    if (rc != 0) {
   24430:	b9bf      	cbnz	r7, 24462 <ble_gattc_find_inc_svcs_rx_read_rsp+0x54>
    if (proc->find_inc_svcs.cur_start == 0) {
   24432:	8a33      	ldrh	r3, [r6, #16]
   24434:	b1fb      	cbz	r3, 24476 <ble_gattc_find_inc_svcs_rx_read_rsp+0x68>
    if (status != 0) {
   24436:	b9ac      	cbnz	r4, 24464 <ble_gattc_find_inc_svcs_rx_read_rsp+0x56>
    service.start_handle = proc->find_inc_svcs.cur_start;
   24438:	f8ad 3000 	strh.w	r3, [sp]
    service.end_handle = proc->find_inc_svcs.cur_end;
   2443c:	8a73      	ldrh	r3, [r6, #18]
   2443e:	f8ad 3002 	strh.w	r3, [sp, #2]
    rc = ble_gattc_find_inc_svcs_cb(proc, 0, 0, &service);
   24442:	466b      	mov	r3, sp
   24444:	2200      	movs	r2, #0
   24446:	4611      	mov	r1, r2
   24448:	4630      	mov	r0, r6
   2444a:	f7fe fea3 	bl	23194 <ble_gattc_find_inc_svcs_cb>
    if (rc != 0) {
   2444e:	b9a0      	cbnz	r0, 2447a <ble_gattc_find_inc_svcs_rx_read_rsp+0x6c>
    proc->find_inc_svcs.cur_start = 0;
   24450:	2300      	movs	r3, #0
   24452:	8233      	strh	r3, [r6, #16]
    proc->find_inc_svcs.cur_end = 0;
   24454:	8273      	strh	r3, [r6, #18]
    rc = ble_gattc_find_inc_svcs_resume(proc);
   24456:	4630      	mov	r0, r6
   24458:	f7ff fbe8 	bl	23c2c <ble_gattc_find_inc_svcs_resume>
    if (rc != 0) {
   2445c:	b148      	cbz	r0, 24472 <ble_gattc_find_inc_svcs_rx_read_rsp+0x64>
    rc = ble_gattc_find_inc_svcs_resume(proc);
   2445e:	4604      	mov	r4, r0
   24460:	e000      	b.n	24464 <ble_gattc_find_inc_svcs_rx_read_rsp+0x56>
        rc = BLE_HS_EBADDATA;
   24462:	240a      	movs	r4, #10
    ble_gattc_find_inc_svcs_cb(proc, rc, 0, NULL);
   24464:	2300      	movs	r3, #0
   24466:	461a      	mov	r2, r3
   24468:	4621      	mov	r1, r4
   2446a:	4630      	mov	r0, r6
   2446c:	f7fe fe92 	bl	23194 <ble_gattc_find_inc_svcs_cb>
    return BLE_HS_EDONE;
   24470:	200e      	movs	r0, #14
}
   24472:	b007      	add	sp, #28
   24474:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = BLE_HS_EBADDATA;
   24476:	240a      	movs	r4, #10
   24478:	e7f4      	b.n	24464 <ble_gattc_find_inc_svcs_rx_read_rsp+0x56>
        return BLE_HS_EDONE;
   2447a:	200e      	movs	r0, #14
   2447c:	e7f9      	b.n	24472 <ble_gattc_find_inc_svcs_rx_read_rsp+0x64>

0002447e <ble_gattc_write_reliable_rx_prep>:
{
   2447e:	b5f0      	push	{r4, r5, r6, r7, lr}
   24480:	b083      	sub	sp, #12
   24482:	4604      	mov	r4, r0
    om = *rxom;
   24484:	9808      	ldr	r0, [sp, #32]
   24486:	6807      	ldr	r7, [r0, #0]
    if (status != 0) {
   24488:	4608      	mov	r0, r1
   2448a:	bba1      	cbnz	r1, 244f6 <ble_gattc_write_reliable_rx_prep+0x78>
   2448c:	461d      	mov	r5, r3
    if (proc->write_reliable.cur_attr >= proc->write_reliable.num_attrs) {
   2448e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   24492:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   24496:	4298      	cmp	r0, r3
   24498:	d22a      	bcs.n	244f0 <ble_gattc_write_reliable_rx_prep+0x72>
    attr = proc->write_reliable.attrs + proc->write_reliable.cur_attr;
   2449a:	f104 030c 	add.w	r3, r4, #12
   2449e:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
    if (handle != attr->handle) {
   244a2:	f833 3030 	ldrh.w	r3, [r3, r0, lsl #3]
   244a6:	4293      	cmp	r3, r2
   244a8:	d124      	bne.n	244f4 <ble_gattc_write_reliable_rx_prep+0x76>
    if (offset != attr->offset) {
   244aa:	8873      	ldrh	r3, [r6, #2]
   244ac:	42ab      	cmp	r3, r5
   244ae:	d001      	beq.n	244b4 <ble_gattc_write_reliable_rx_prep+0x36>
        rc = BLE_HS_EBADDATA;
   244b0:	200a      	movs	r0, #10
   244b2:	e020      	b.n	244f6 <ble_gattc_write_reliable_rx_prep+0x78>
    if (os_mbuf_cmpm(attr->om, offset, om, 0,
   244b4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   244b6:	9300      	str	r3, [sp, #0]
   244b8:	2300      	movs	r3, #0
   244ba:	463a      	mov	r2, r7
   244bc:	4629      	mov	r1, r5
   244be:	6870      	ldr	r0, [r6, #4]
   244c0:	f7f5 fa01 	bl	198c6 <os_mbuf_cmpm>
   244c4:	b9f8      	cbnz	r0, 24506 <ble_gattc_write_reliable_rx_prep+0x88>
    attr->offset += proc->write_reliable.length;
   244c6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   244c8:	8872      	ldrh	r2, [r6, #2]
   244ca:	4413      	add	r3, r2
   244cc:	b29b      	uxth	r3, r3
   244ce:	8073      	strh	r3, [r6, #2]
    if (attr->offset >= OS_MBUF_PKTLEN(attr->om)) {
   244d0:	6872      	ldr	r2, [r6, #4]
   244d2:	8a12      	ldrh	r2, [r2, #16]
   244d4:	4293      	cmp	r3, r2
   244d6:	d306      	bcc.n	244e6 <ble_gattc_write_reliable_rx_prep+0x68>
        attr->offset = 0;
   244d8:	2300      	movs	r3, #0
   244da:	8073      	strh	r3, [r6, #2]
        proc->write_reliable.cur_attr++;
   244dc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   244e0:	3301      	adds	r3, #1
   244e2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    rc = ble_gattc_write_reliable_resume(proc);
   244e6:	4620      	mov	r0, r4
   244e8:	f7ff fa21 	bl	2392e <ble_gattc_write_reliable_resume>
    if (rc != 0) {
   244ec:	b148      	cbz	r0, 24502 <ble_gattc_write_reliable_rx_prep+0x84>
   244ee:	e002      	b.n	244f6 <ble_gattc_write_reliable_rx_prep+0x78>
        rc = BLE_HS_EBADDATA;
   244f0:	200a      	movs	r0, #10
   244f2:	e000      	b.n	244f6 <ble_gattc_write_reliable_rx_prep+0x78>
        rc = BLE_HS_EBADDATA;
   244f4:	200a      	movs	r0, #10
    ble_gattc_write_reliable_err(proc, rc, 0);
   244f6:	2200      	movs	r2, #0
   244f8:	4601      	mov	r1, r0
   244fa:	4620      	mov	r0, r4
   244fc:	f7ff f9ad 	bl	2385a <ble_gattc_write_reliable_err>
    return BLE_HS_EDONE;
   24500:	200e      	movs	r0, #14
}
   24502:	b003      	add	sp, #12
   24504:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = BLE_HS_EBADDATA;
   24506:	200a      	movs	r0, #10
   24508:	e7f5      	b.n	244f6 <ble_gattc_write_reliable_rx_prep+0x78>

0002450a <ble_gattc_write_long_rx_prep>:
{
   2450a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2450c:	b083      	sub	sp, #12
   2450e:	4604      	mov	r4, r0
    om = *rxom;
   24510:	9808      	ldr	r0, [sp, #32]
   24512:	6805      	ldr	r5, [r0, #0]
    if (status != 0) {
   24514:	4608      	mov	r0, r1
   24516:	bb59      	cbnz	r1, 24570 <ble_gattc_write_long_rx_prep+0x66>
    if (proc->write_long.attr.offset >=
   24518:	89e1      	ldrh	r1, [r4, #14]
        OS_MBUF_PKTLEN(proc->write_long.attr.om)) {
   2451a:	6926      	ldr	r6, [r4, #16]
   2451c:	8a30      	ldrh	r0, [r6, #16]
    if (proc->write_long.attr.offset >=
   2451e:	4281      	cmp	r1, r0
   24520:	d223      	bcs.n	2456a <ble_gattc_write_long_rx_prep+0x60>
    if (handle != proc->write_long.attr.handle) {
   24522:	89a7      	ldrh	r7, [r4, #12]
   24524:	4297      	cmp	r7, r2
   24526:	d122      	bne.n	2456e <ble_gattc_write_long_rx_prep+0x64>
    if (offset != proc->write_long.attr.offset) {
   24528:	4299      	cmp	r1, r3
   2452a:	d129      	bne.n	24580 <ble_gattc_write_long_rx_prep+0x76>
    if (offset + OS_MBUF_PKTLEN(om) >
   2452c:	8a2a      	ldrh	r2, [r5, #16]
   2452e:	1899      	adds	r1, r3, r2
   24530:	4281      	cmp	r1, r0
   24532:	dc27      	bgt.n	24584 <ble_gattc_write_long_rx_prep+0x7a>
    if (OS_MBUF_PKTLEN(om) != proc->write_long.length) {
   24534:	8aa1      	ldrh	r1, [r4, #20]
   24536:	428a      	cmp	r2, r1
   24538:	d001      	beq.n	2453e <ble_gattc_write_long_rx_prep+0x34>
        rc = BLE_HS_EBADDATA;
   2453a:	200a      	movs	r0, #10
   2453c:	e018      	b.n	24570 <ble_gattc_write_long_rx_prep+0x66>
    if (os_mbuf_cmpm(om, 0,
   2453e:	9100      	str	r1, [sp, #0]
   24540:	4632      	mov	r2, r6
   24542:	2100      	movs	r1, #0
   24544:	4628      	mov	r0, r5
   24546:	f7f5 f9be 	bl	198c6 <os_mbuf_cmpm>
   2454a:	b940      	cbnz	r0, 2455e <ble_gattc_write_long_rx_prep+0x54>
        proc->write_long.attr.offset += OS_MBUF_PKTLEN(om);
   2454c:	8a2b      	ldrh	r3, [r5, #16]
   2454e:	89e2      	ldrh	r2, [r4, #14]
   24550:	4413      	add	r3, r2
   24552:	81e3      	strh	r3, [r4, #14]
        rc = ble_gattc_write_long_resume(proc);
   24554:	4620      	mov	r0, r4
   24556:	f7ff fa33 	bl	239c0 <ble_gattc_write_long_resume>
        if (rc != 0) {
   2455a:	b178      	cbz	r0, 2457c <ble_gattc_write_long_rx_prep+0x72>
   2455c:	e008      	b.n	24570 <ble_gattc_write_long_rx_prep+0x66>
        ble_att_clt_tx_exec_write(proc->conn_handle, BLE_ATT_EXEC_WRITE_F_CANCEL);
   2455e:	2100      	movs	r1, #0
   24560:	8920      	ldrh	r0, [r4, #8]
   24562:	f7fb f812 	bl	1f58a <ble_att_clt_tx_exec_write>
        rc = BLE_HS_EBADDATA;
   24566:	200a      	movs	r0, #10
        goto err;
   24568:	e002      	b.n	24570 <ble_gattc_write_long_rx_prep+0x66>
        rc = BLE_HS_EBADDATA;
   2456a:	200a      	movs	r0, #10
   2456c:	e000      	b.n	24570 <ble_gattc_write_long_rx_prep+0x66>
        rc = BLE_HS_EBADDATA;
   2456e:	200a      	movs	r0, #10
    ble_gattc_write_long_cb(proc, rc, 0);
   24570:	2200      	movs	r2, #0
   24572:	4601      	mov	r1, r0
   24574:	4620      	mov	r0, r4
   24576:	f7fe ffbd 	bl	234f4 <ble_gattc_write_long_cb>
    return BLE_HS_EDONE;
   2457a:	200e      	movs	r0, #14
}
   2457c:	b003      	add	sp, #12
   2457e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = BLE_HS_EBADDATA;
   24580:	200a      	movs	r0, #10
   24582:	e7f5      	b.n	24570 <ble_gattc_write_long_rx_prep+0x66>
        rc = BLE_HS_EBADDATA;
   24584:	200a      	movs	r0, #10
   24586:	e7f3      	b.n	24570 <ble_gattc_write_long_rx_prep+0x66>

00024588 <ble_gattc_timer>:
{
   24588:	b530      	push	{r4, r5, lr}
   2458a:	b083      	sub	sp, #12
    ticks_until_exp = ble_gattc_extract_expired(&exp_list);
   2458c:	4668      	mov	r0, sp
   2458e:	f7ff f887 	bl	236a0 <ble_gattc_extract_expired>
   24592:	4605      	mov	r5, r0
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   24594:	e004      	b.n	245a0 <ble_gattc_timer+0x18>
        STAILQ_REMOVE_HEAD(&exp_list, next);
   24596:	f8cd d004 	str.w	sp, [sp, #4]
        ble_gattc_proc_free(proc);
   2459a:	4620      	mov	r0, r4
   2459c:	f7ff f91c 	bl	237d8 <ble_gattc_proc_free>
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   245a0:	9c00      	ldr	r4, [sp, #0]
   245a2:	b194      	cbz	r4, 245ca <ble_gattc_timer+0x42>
        STATS_INC(ble_gattc_stats, proc_timeout);
   245a4:	4a11      	ldr	r2, [pc, #68]	; (245ec <ble_gattc_timer+0x64>)
   245a6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   245aa:	3301      	adds	r3, #1
   245ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        ble_gattc_proc_timeout(proc);
   245b0:	4620      	mov	r0, r4
   245b2:	f7fe fd2e 	bl	23012 <ble_gattc_proc_timeout>
        ble_gap_terminate(proc->conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   245b6:	2113      	movs	r1, #19
   245b8:	8920      	ldrh	r0, [r4, #8]
   245ba:	f7fe f8e1 	bl	22780 <ble_gap_terminate>
        STAILQ_REMOVE_HEAD(&exp_list, next);
   245be:	9b00      	ldr	r3, [sp, #0]
   245c0:	681b      	ldr	r3, [r3, #0]
   245c2:	9300      	str	r3, [sp, #0]
   245c4:	2b00      	cmp	r3, #0
   245c6:	d1e8      	bne.n	2459a <ble_gattc_timer+0x12>
   245c8:	e7e5      	b.n	24596 <ble_gattc_timer+0xe>
    ticks_until_resume = ble_gattc_ticks_until_resume();
   245ca:	f7ff f819 	bl	23600 <ble_gattc_ticks_until_resume>
    if (ticks_until_resume == 0) {
   245ce:	4603      	mov	r3, r0
   245d0:	b128      	cbz	r0, 245de <ble_gattc_timer+0x56>
}
   245d2:	42ab      	cmp	r3, r5
   245d4:	bfa8      	it	ge
   245d6:	462b      	movge	r3, r5
   245d8:	4618      	mov	r0, r3
   245da:	b003      	add	sp, #12
   245dc:	bd30      	pop	{r4, r5, pc}
        ble_gattc_resume_procs();
   245de:	f7ff fbfb 	bl	23dd8 <ble_gattc_resume_procs>
        ticks_until_resume = ble_gattc_ticks_until_resume();
   245e2:	f7ff f80d 	bl	23600 <ble_gattc_ticks_until_resume>
   245e6:	4603      	mov	r3, r0
   245e8:	e7f3      	b.n	245d2 <ble_gattc_timer+0x4a>
   245ea:	bf00      	nop
   245ec:	10005c04 	.word	0x10005c04

000245f0 <ble_gattc_exchange_mtu>:
{
   245f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   245f2:	4606      	mov	r6, r0
   245f4:	460d      	mov	r5, r1
   245f6:	4617      	mov	r7, r2
    STATS_INC(ble_gattc_stats, mtu);
   245f8:	4c10      	ldr	r4, [pc, #64]	; (2463c <ble_gattc_exchange_mtu+0x4c>)
   245fa:	68e3      	ldr	r3, [r4, #12]
   245fc:	3301      	adds	r3, #1
   245fe:	60e3      	str	r3, [r4, #12]
    proc = ble_gattc_proc_alloc();
   24600:	f7ff fc08 	bl	23e14 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   24604:	4604      	mov	r4, r0
   24606:	b1b0      	cbz	r0, 24636 <ble_gattc_exchange_mtu+0x46>
    proc->op = BLE_GATT_OP_MTU;
   24608:	2300      	movs	r3, #0
   2460a:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   2460c:	8106      	strh	r6, [r0, #8]
    proc->mtu.cb = cb;
   2460e:	60c5      	str	r5, [r0, #12]
    proc->mtu.cb_arg = cb_arg;
   24610:	6107      	str	r7, [r0, #16]
    ble_gattc_log_proc_init("exchange mtu\n");
   24612:	480b      	ldr	r0, [pc, #44]	; (24640 <ble_gattc_exchange_mtu+0x50>)
   24614:	f7ff fc0c 	bl	23e30 <ble_gattc_log_proc_init>
    rc = ble_gattc_mtu_tx(proc);
   24618:	4620      	mov	r0, r4
   2461a:	f7ff fd29 	bl	24070 <ble_gattc_mtu_tx>
    if (rc != 0) {
   2461e:	4605      	mov	r5, r0
   24620:	b118      	cbz	r0, 2462a <ble_gattc_exchange_mtu+0x3a>
        STATS_INC(ble_gattc_stats, mtu_fail);
   24622:	4a06      	ldr	r2, [pc, #24]	; (2463c <ble_gattc_exchange_mtu+0x4c>)
   24624:	6913      	ldr	r3, [r2, #16]
   24626:	3301      	adds	r3, #1
   24628:	6113      	str	r3, [r2, #16]
    ble_gattc_process_status(proc, rc);
   2462a:	4629      	mov	r1, r5
   2462c:	4620      	mov	r0, r4
   2462e:	f7ff fbbf 	bl	23db0 <ble_gattc_process_status>
}
   24632:	4628      	mov	r0, r5
   24634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = BLE_HS_ENOMEM;
   24636:	2506      	movs	r5, #6
   24638:	e7f3      	b.n	24622 <ble_gattc_exchange_mtu+0x32>
   2463a:	bf00      	nop
   2463c:	10005c04 	.word	0x10005c04
   24640:	00034ad4 	.word	0x00034ad4

00024644 <ble_gattc_disc_all_svcs>:
{
   24644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24646:	4606      	mov	r6, r0
   24648:	460d      	mov	r5, r1
   2464a:	4617      	mov	r7, r2
    STATS_INC(ble_gattc_stats, disc_all_svcs);
   2464c:	4c11      	ldr	r4, [pc, #68]	; (24694 <ble_gattc_disc_all_svcs+0x50>)
   2464e:	6963      	ldr	r3, [r4, #20]
   24650:	3301      	adds	r3, #1
   24652:	6163      	str	r3, [r4, #20]
    proc = ble_gattc_proc_alloc();
   24654:	f7ff fbde 	bl	23e14 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   24658:	4604      	mov	r4, r0
   2465a:	b1c0      	cbz	r0, 2468e <ble_gattc_disc_all_svcs+0x4a>
    proc->op = BLE_GATT_OP_DISC_ALL_SVCS;
   2465c:	2301      	movs	r3, #1
   2465e:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   24660:	8106      	strh	r6, [r0, #8]
    proc->disc_all_svcs.prev_handle = 0x0000;
   24662:	2300      	movs	r3, #0
   24664:	8183      	strh	r3, [r0, #12]
    proc->disc_all_svcs.cb = cb;
   24666:	6105      	str	r5, [r0, #16]
    proc->disc_all_svcs.cb_arg = cb_arg;
   24668:	6147      	str	r7, [r0, #20]
    ble_gattc_log_proc_init("discover all services\n");
   2466a:	480b      	ldr	r0, [pc, #44]	; (24698 <ble_gattc_disc_all_svcs+0x54>)
   2466c:	f7ff fbe0 	bl	23e30 <ble_gattc_log_proc_init>
    rc = ble_gattc_disc_all_svcs_tx(proc);
   24670:	4620      	mov	r0, r4
   24672:	f7ff fb5b 	bl	23d2c <ble_gattc_disc_all_svcs_tx>
    if (rc != 0) {
   24676:	4605      	mov	r5, r0
   24678:	b118      	cbz	r0, 24682 <ble_gattc_disc_all_svcs+0x3e>
        STATS_INC(ble_gattc_stats, disc_all_svcs_fail);
   2467a:	4a06      	ldr	r2, [pc, #24]	; (24694 <ble_gattc_disc_all_svcs+0x50>)
   2467c:	6993      	ldr	r3, [r2, #24]
   2467e:	3301      	adds	r3, #1
   24680:	6193      	str	r3, [r2, #24]
    ble_gattc_process_status(proc, rc);
   24682:	4629      	mov	r1, r5
   24684:	4620      	mov	r0, r4
   24686:	f7ff fb93 	bl	23db0 <ble_gattc_process_status>
}
   2468a:	4628      	mov	r0, r5
   2468c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = BLE_HS_ENOMEM;
   2468e:	2506      	movs	r5, #6
   24690:	e7f3      	b.n	2467a <ble_gattc_disc_all_svcs+0x36>
   24692:	bf00      	nop
   24694:	10005c04 	.word	0x10005c04
   24698:	00034ae4 	.word	0x00034ae4

0002469c <ble_gattc_disc_svc_by_uuid>:
{
   2469c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   246a0:	4680      	mov	r8, r0
   246a2:	460f      	mov	r7, r1
   246a4:	4616      	mov	r6, r2
   246a6:	461d      	mov	r5, r3
    STATS_INC(ble_gattc_stats, disc_svc_uuid);
   246a8:	4b14      	ldr	r3, [pc, #80]	; (246fc <ble_gattc_disc_svc_by_uuid+0x60>)
   246aa:	69dc      	ldr	r4, [r3, #28]
   246ac:	3401      	adds	r4, #1
   246ae:	61dc      	str	r4, [r3, #28]
    proc = ble_gattc_proc_alloc();
   246b0:	f7ff fbb0 	bl	23e14 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   246b4:	4604      	mov	r4, r0
   246b6:	b1f8      	cbz	r0, 246f8 <ble_gattc_disc_svc_by_uuid+0x5c>
    proc->op = BLE_GATT_OP_DISC_SVC_UUID;
   246b8:	2302      	movs	r3, #2
   246ba:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   246bc:	f8a0 8008 	strh.w	r8, [r0, #8]
    ble_uuid_to_any(uuid, &proc->disc_svc_uuid.service_uuid);
   246c0:	f100 010c 	add.w	r1, r0, #12
   246c4:	4638      	mov	r0, r7
   246c6:	f005 fa14 	bl	29af2 <ble_uuid_to_any>
    proc->disc_svc_uuid.prev_handle = 0x0000;
   246ca:	2300      	movs	r3, #0
   246cc:	8423      	strh	r3, [r4, #32]
    proc->disc_svc_uuid.cb = cb;
   246ce:	6266      	str	r6, [r4, #36]	; 0x24
    proc->disc_svc_uuid.cb_arg = cb_arg;
   246d0:	62a5      	str	r5, [r4, #40]	; 0x28
    ble_gattc_log_disc_svc_uuid(proc);
   246d2:	4620      	mov	r0, r4
   246d4:	f7ff fcf8 	bl	240c8 <ble_gattc_log_disc_svc_uuid>
    rc = ble_gattc_disc_svc_uuid_tx(proc);
   246d8:	4620      	mov	r0, r4
   246da:	f7ff fadd 	bl	23c98 <ble_gattc_disc_svc_uuid_tx>
    if (rc != 0) {
   246de:	4605      	mov	r5, r0
   246e0:	b118      	cbz	r0, 246ea <ble_gattc_disc_svc_by_uuid+0x4e>
        STATS_INC(ble_gattc_stats, disc_svc_uuid_fail);
   246e2:	4a06      	ldr	r2, [pc, #24]	; (246fc <ble_gattc_disc_svc_by_uuid+0x60>)
   246e4:	6a13      	ldr	r3, [r2, #32]
   246e6:	3301      	adds	r3, #1
   246e8:	6213      	str	r3, [r2, #32]
    ble_gattc_process_status(proc, rc);
   246ea:	4629      	mov	r1, r5
   246ec:	4620      	mov	r0, r4
   246ee:	f7ff fb5f 	bl	23db0 <ble_gattc_process_status>
}
   246f2:	4628      	mov	r0, r5
   246f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   246f8:	2506      	movs	r5, #6
   246fa:	e7f2      	b.n	246e2 <ble_gattc_disc_svc_by_uuid+0x46>
   246fc:	10005c04 	.word	0x10005c04

00024700 <ble_gattc_find_inc_svcs>:
{
   24700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24704:	4680      	mov	r8, r0
   24706:	460d      	mov	r5, r1
   24708:	4617      	mov	r7, r2
   2470a:	461e      	mov	r6, r3
    STATS_INC(ble_gattc_stats, find_inc_svcs);
   2470c:	4b12      	ldr	r3, [pc, #72]	; (24758 <ble_gattc_find_inc_svcs+0x58>)
   2470e:	6a59      	ldr	r1, [r3, #36]	; 0x24
   24710:	3101      	adds	r1, #1
   24712:	6259      	str	r1, [r3, #36]	; 0x24
    proc = ble_gattc_proc_alloc();
   24714:	f7ff fb7e 	bl	23e14 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   24718:	4604      	mov	r4, r0
   2471a:	b1d8      	cbz	r0, 24754 <ble_gattc_find_inc_svcs+0x54>
    proc->op = BLE_GATT_OP_FIND_INC_SVCS;
   2471c:	2303      	movs	r3, #3
   2471e:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   24720:	f8a0 8008 	strh.w	r8, [r0, #8]
    proc->find_inc_svcs.prev_handle = start_handle - 1;
   24724:	3d01      	subs	r5, #1
   24726:	8185      	strh	r5, [r0, #12]
    proc->find_inc_svcs.end_handle = end_handle;
   24728:	81c7      	strh	r7, [r0, #14]
    proc->find_inc_svcs.cb = cb;
   2472a:	6146      	str	r6, [r0, #20]
    proc->find_inc_svcs.cb_arg = cb_arg;
   2472c:	9b06      	ldr	r3, [sp, #24]
   2472e:	6183      	str	r3, [r0, #24]
    ble_gattc_log_find_inc_svcs(proc);
   24730:	f7ff fb88 	bl	23e44 <ble_gattc_log_find_inc_svcs>
    rc = ble_gattc_find_inc_svcs_tx(proc);
   24734:	4620      	mov	r0, r4
   24736:	f7ff fa61 	bl	23bfc <ble_gattc_find_inc_svcs_tx>
    if (rc != 0) {
   2473a:	4605      	mov	r5, r0
   2473c:	b118      	cbz	r0, 24746 <ble_gattc_find_inc_svcs+0x46>
        STATS_INC(ble_gattc_stats, find_inc_svcs_fail);
   2473e:	4a06      	ldr	r2, [pc, #24]	; (24758 <ble_gattc_find_inc_svcs+0x58>)
   24740:	6a93      	ldr	r3, [r2, #40]	; 0x28
   24742:	3301      	adds	r3, #1
   24744:	6293      	str	r3, [r2, #40]	; 0x28
    ble_gattc_process_status(proc, rc);
   24746:	4629      	mov	r1, r5
   24748:	4620      	mov	r0, r4
   2474a:	f7ff fb31 	bl	23db0 <ble_gattc_process_status>
}
   2474e:	4628      	mov	r0, r5
   24750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   24754:	2506      	movs	r5, #6
   24756:	e7f2      	b.n	2473e <ble_gattc_find_inc_svcs+0x3e>
   24758:	10005c04 	.word	0x10005c04

0002475c <ble_gattc_disc_all_chrs>:
{
   2475c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24760:	4680      	mov	r8, r0
   24762:	460d      	mov	r5, r1
   24764:	4617      	mov	r7, r2
   24766:	461e      	mov	r6, r3
    STATS_INC(ble_gattc_stats, disc_all_chrs);
   24768:	4b12      	ldr	r3, [pc, #72]	; (247b4 <ble_gattc_disc_all_chrs+0x58>)
   2476a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   2476c:	3101      	adds	r1, #1
   2476e:	62d9      	str	r1, [r3, #44]	; 0x2c
    proc = ble_gattc_proc_alloc();
   24770:	f7ff fb50 	bl	23e14 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   24774:	4604      	mov	r4, r0
   24776:	b1d8      	cbz	r0, 247b0 <ble_gattc_disc_all_chrs+0x54>
    proc->op = BLE_GATT_OP_DISC_ALL_CHRS;
   24778:	2304      	movs	r3, #4
   2477a:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   2477c:	f8a0 8008 	strh.w	r8, [r0, #8]
    proc->disc_all_chrs.prev_handle = start_handle - 1;
   24780:	3d01      	subs	r5, #1
   24782:	8185      	strh	r5, [r0, #12]
    proc->disc_all_chrs.end_handle = end_handle;
   24784:	81c7      	strh	r7, [r0, #14]
    proc->disc_all_chrs.cb = cb;
   24786:	6106      	str	r6, [r0, #16]
    proc->disc_all_chrs.cb_arg = cb_arg;
   24788:	9b06      	ldr	r3, [sp, #24]
   2478a:	6143      	str	r3, [r0, #20]
    ble_gattc_log_disc_all_chrs(proc);
   2478c:	f7ff fb70 	bl	23e70 <ble_gattc_log_disc_all_chrs>
    rc = ble_gattc_disc_all_chrs_tx(proc);
   24790:	4620      	mov	r0, r4
   24792:	f7ff f9f5 	bl	23b80 <ble_gattc_disc_all_chrs_tx>
    if (rc != 0) {
   24796:	4605      	mov	r5, r0
   24798:	b118      	cbz	r0, 247a2 <ble_gattc_disc_all_chrs+0x46>
        STATS_INC(ble_gattc_stats, disc_all_chrs_fail);
   2479a:	4a06      	ldr	r2, [pc, #24]	; (247b4 <ble_gattc_disc_all_chrs+0x58>)
   2479c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   2479e:	3301      	adds	r3, #1
   247a0:	6313      	str	r3, [r2, #48]	; 0x30
    ble_gattc_process_status(proc, rc);
   247a2:	4629      	mov	r1, r5
   247a4:	4620      	mov	r0, r4
   247a6:	f7ff fb03 	bl	23db0 <ble_gattc_process_status>
}
   247aa:	4628      	mov	r0, r5
   247ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   247b0:	2506      	movs	r5, #6
   247b2:	e7f2      	b.n	2479a <ble_gattc_disc_all_chrs+0x3e>
   247b4:	10005c04 	.word	0x10005c04

000247b8 <ble_gattc_disc_chrs_by_uuid>:
{
   247b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   247bc:	4680      	mov	r8, r0
   247be:	460d      	mov	r5, r1
   247c0:	4617      	mov	r7, r2
   247c2:	461e      	mov	r6, r3
    STATS_INC(ble_gattc_stats, disc_chrs_uuid);
   247c4:	4b16      	ldr	r3, [pc, #88]	; (24820 <ble_gattc_disc_chrs_by_uuid+0x68>)
   247c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
   247c8:	3101      	adds	r1, #1
   247ca:	6359      	str	r1, [r3, #52]	; 0x34
    proc = ble_gattc_proc_alloc();
   247cc:	f7ff fb22 	bl	23e14 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   247d0:	4604      	mov	r4, r0
   247d2:	b310      	cbz	r0, 2481a <ble_gattc_disc_chrs_by_uuid+0x62>
    proc->op = BLE_GATT_OP_DISC_CHR_UUID;
   247d4:	2305      	movs	r3, #5
   247d6:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   247d8:	f8a0 8008 	strh.w	r8, [r0, #8]
    ble_uuid_to_any(uuid, &proc->disc_chr_uuid.chr_uuid);
   247dc:	f100 010c 	add.w	r1, r0, #12
   247e0:	4630      	mov	r0, r6
   247e2:	f005 f986 	bl	29af2 <ble_uuid_to_any>
    proc->disc_chr_uuid.prev_handle = start_handle - 1;
   247e6:	3d01      	subs	r5, #1
   247e8:	8425      	strh	r5, [r4, #32]
    proc->disc_chr_uuid.end_handle = end_handle;
   247ea:	8467      	strh	r7, [r4, #34]	; 0x22
    proc->disc_chr_uuid.cb = cb;
   247ec:	9b06      	ldr	r3, [sp, #24]
   247ee:	6263      	str	r3, [r4, #36]	; 0x24
    proc->disc_chr_uuid.cb_arg = cb_arg;
   247f0:	9b07      	ldr	r3, [sp, #28]
   247f2:	62a3      	str	r3, [r4, #40]	; 0x28
    ble_gattc_log_disc_chr_uuid(proc);
   247f4:	4620      	mov	r0, r4
   247f6:	f7ff fc7b 	bl	240f0 <ble_gattc_log_disc_chr_uuid>
    rc = ble_gattc_disc_chr_uuid_tx(proc);
   247fa:	4620      	mov	r0, r4
   247fc:	f7ff f982 	bl	23b04 <ble_gattc_disc_chr_uuid_tx>
    if (rc != 0) {
   24800:	4605      	mov	r5, r0
   24802:	b118      	cbz	r0, 2480c <ble_gattc_disc_chrs_by_uuid+0x54>
        STATS_INC(ble_gattc_stats, disc_chrs_uuid_fail);
   24804:	4a06      	ldr	r2, [pc, #24]	; (24820 <ble_gattc_disc_chrs_by_uuid+0x68>)
   24806:	6b93      	ldr	r3, [r2, #56]	; 0x38
   24808:	3301      	adds	r3, #1
   2480a:	6393      	str	r3, [r2, #56]	; 0x38
    ble_gattc_process_status(proc, rc);
   2480c:	4629      	mov	r1, r5
   2480e:	4620      	mov	r0, r4
   24810:	f7ff face 	bl	23db0 <ble_gattc_process_status>
}
   24814:	4628      	mov	r0, r5
   24816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   2481a:	2506      	movs	r5, #6
   2481c:	e7f2      	b.n	24804 <ble_gattc_disc_chrs_by_uuid+0x4c>
   2481e:	bf00      	nop
   24820:	10005c04 	.word	0x10005c04

00024824 <ble_gattc_disc_all_dscs>:
{
   24824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24828:	4680      	mov	r8, r0
   2482a:	460d      	mov	r5, r1
   2482c:	4617      	mov	r7, r2
   2482e:	461e      	mov	r6, r3
    STATS_INC(ble_gattc_stats, disc_all_dscs);
   24830:	4b12      	ldr	r3, [pc, #72]	; (2487c <ble_gattc_disc_all_dscs+0x58>)
   24832:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   24834:	3101      	adds	r1, #1
   24836:	63d9      	str	r1, [r3, #60]	; 0x3c
    proc = ble_gattc_proc_alloc();
   24838:	f7ff faec 	bl	23e14 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   2483c:	4604      	mov	r4, r0
   2483e:	b1d8      	cbz	r0, 24878 <ble_gattc_disc_all_dscs+0x54>
    proc->op = BLE_GATT_OP_DISC_ALL_DSCS;
   24840:	2306      	movs	r3, #6
   24842:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   24844:	f8a0 8008 	strh.w	r8, [r0, #8]
    proc->disc_all_dscs.chr_val_handle = start_handle;
   24848:	8185      	strh	r5, [r0, #12]
    proc->disc_all_dscs.prev_handle = start_handle;
   2484a:	81c5      	strh	r5, [r0, #14]
    proc->disc_all_dscs.end_handle = end_handle;
   2484c:	8207      	strh	r7, [r0, #16]
    proc->disc_all_dscs.cb = cb;
   2484e:	6146      	str	r6, [r0, #20]
    proc->disc_all_dscs.cb_arg = cb_arg;
   24850:	9b06      	ldr	r3, [sp, #24]
   24852:	6183      	str	r3, [r0, #24]
    ble_gattc_log_disc_all_dscs(proc);
   24854:	f7ff fb22 	bl	23e9c <ble_gattc_log_disc_all_dscs>
    rc = ble_gattc_disc_all_dscs_tx(proc);
   24858:	4620      	mov	r0, r4
   2485a:	f7ff f91e 	bl	23a9a <ble_gattc_disc_all_dscs_tx>
    if (rc != 0) {
   2485e:	4605      	mov	r5, r0
   24860:	b118      	cbz	r0, 2486a <ble_gattc_disc_all_dscs+0x46>
        STATS_INC(ble_gattc_stats, disc_all_dscs_fail);
   24862:	4a06      	ldr	r2, [pc, #24]	; (2487c <ble_gattc_disc_all_dscs+0x58>)
   24864:	6c13      	ldr	r3, [r2, #64]	; 0x40
   24866:	3301      	adds	r3, #1
   24868:	6413      	str	r3, [r2, #64]	; 0x40
    ble_gattc_process_status(proc, rc);
   2486a:	4629      	mov	r1, r5
   2486c:	4620      	mov	r0, r4
   2486e:	f7ff fa9f 	bl	23db0 <ble_gattc_process_status>
}
   24872:	4628      	mov	r0, r5
   24874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   24878:	2506      	movs	r5, #6
   2487a:	e7f2      	b.n	24862 <ble_gattc_disc_all_dscs+0x3e>
   2487c:	10005c04 	.word	0x10005c04

00024880 <ble_gattc_read>:
{
   24880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24884:	4680      	mov	r8, r0
   24886:	460d      	mov	r5, r1
   24888:	4617      	mov	r7, r2
   2488a:	461e      	mov	r6, r3
    STATS_INC(ble_gattc_stats, read);
   2488c:	4b11      	ldr	r3, [pc, #68]	; (248d4 <ble_gattc_read+0x54>)
   2488e:	6c59      	ldr	r1, [r3, #68]	; 0x44
   24890:	3101      	adds	r1, #1
   24892:	6459      	str	r1, [r3, #68]	; 0x44
    proc = ble_gattc_proc_alloc();
   24894:	f7ff fabe 	bl	23e14 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   24898:	4604      	mov	r4, r0
   2489a:	b1c8      	cbz	r0, 248d0 <ble_gattc_read+0x50>
    proc->op = BLE_GATT_OP_READ;
   2489c:	2307      	movs	r3, #7
   2489e:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   248a0:	f8a0 8008 	strh.w	r8, [r0, #8]
    proc->read.handle = attr_handle;
   248a4:	8185      	strh	r5, [r0, #12]
    proc->read.cb = cb;
   248a6:	6107      	str	r7, [r0, #16]
    proc->read.cb_arg = cb_arg;
   248a8:	6146      	str	r6, [r0, #20]
    ble_gattc_log_read(attr_handle);
   248aa:	4628      	mov	r0, r5
   248ac:	f7ff fb0a 	bl	23ec4 <ble_gattc_log_read>
    rc = ble_gattc_read_tx(proc);
   248b0:	4620      	mov	r0, r4
   248b2:	f7ff f897 	bl	239e4 <ble_gattc_read_tx>
    if (rc != 0) {
   248b6:	4605      	mov	r5, r0
   248b8:	b118      	cbz	r0, 248c2 <ble_gattc_read+0x42>
        STATS_INC(ble_gattc_stats, read_fail);
   248ba:	4a06      	ldr	r2, [pc, #24]	; (248d4 <ble_gattc_read+0x54>)
   248bc:	6c93      	ldr	r3, [r2, #72]	; 0x48
   248be:	3301      	adds	r3, #1
   248c0:	6493      	str	r3, [r2, #72]	; 0x48
    ble_gattc_process_status(proc, rc);
   248c2:	4629      	mov	r1, r5
   248c4:	4620      	mov	r0, r4
   248c6:	f7ff fa73 	bl	23db0 <ble_gattc_process_status>
}
   248ca:	4628      	mov	r0, r5
   248cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   248d0:	2506      	movs	r5, #6
   248d2:	e7f2      	b.n	248ba <ble_gattc_read+0x3a>
   248d4:	10005c04 	.word	0x10005c04

000248d8 <ble_gattc_read_by_uuid>:
{
   248d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   248dc:	4680      	mov	r8, r0
   248de:	460d      	mov	r5, r1
   248e0:	4616      	mov	r6, r2
   248e2:	461f      	mov	r7, r3
    STATS_INC(ble_gattc_stats, read_uuid);
   248e4:	4a16      	ldr	r2, [pc, #88]	; (24940 <ble_gattc_read_by_uuid+0x68>)
   248e6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   248e8:	3301      	adds	r3, #1
   248ea:	64d3      	str	r3, [r2, #76]	; 0x4c
    proc = ble_gattc_proc_alloc();
   248ec:	f7ff fa92 	bl	23e14 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   248f0:	4604      	mov	r4, r0
   248f2:	b318      	cbz	r0, 2493c <ble_gattc_read_by_uuid+0x64>
    proc->op = BLE_GATT_OP_READ_UUID;
   248f4:	2308      	movs	r3, #8
   248f6:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   248f8:	f8a0 8008 	strh.w	r8, [r0, #8]
    ble_uuid_to_any(uuid, &proc->read_uuid.chr_uuid);
   248fc:	f100 010c 	add.w	r1, r0, #12
   24900:	4638      	mov	r0, r7
   24902:	f005 f8f6 	bl	29af2 <ble_uuid_to_any>
    proc->read_uuid.start_handle = start_handle;
   24906:	8425      	strh	r5, [r4, #32]
    proc->read_uuid.end_handle = end_handle;
   24908:	8466      	strh	r6, [r4, #34]	; 0x22
    proc->read_uuid.cb = cb;
   2490a:	9b06      	ldr	r3, [sp, #24]
   2490c:	6263      	str	r3, [r4, #36]	; 0x24
    proc->read_uuid.cb_arg = cb_arg;
   2490e:	9b07      	ldr	r3, [sp, #28]
   24910:	62a3      	str	r3, [r4, #40]	; 0x28
    ble_gattc_log_read_uuid(start_handle, end_handle, uuid);
   24912:	463a      	mov	r2, r7
   24914:	4631      	mov	r1, r6
   24916:	4628      	mov	r0, r5
   24918:	f7ff fc0a 	bl	24130 <ble_gattc_log_read_uuid>
    rc = ble_gattc_read_uuid_tx(proc);
   2491c:	4620      	mov	r0, r4
   2491e:	f7ff f9b2 	bl	23c86 <ble_gattc_read_uuid_tx>
    if (rc != 0) {
   24922:	4605      	mov	r5, r0
   24924:	b118      	cbz	r0, 2492e <ble_gattc_read_by_uuid+0x56>
        STATS_INC(ble_gattc_stats, read_uuid_fail);
   24926:	4a06      	ldr	r2, [pc, #24]	; (24940 <ble_gattc_read_by_uuid+0x68>)
   24928:	6d13      	ldr	r3, [r2, #80]	; 0x50
   2492a:	3301      	adds	r3, #1
   2492c:	6513      	str	r3, [r2, #80]	; 0x50
    ble_gattc_process_status(proc, rc);
   2492e:	4629      	mov	r1, r5
   24930:	4620      	mov	r0, r4
   24932:	f7ff fa3d 	bl	23db0 <ble_gattc_process_status>
}
   24936:	4628      	mov	r0, r5
   24938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   2493c:	2506      	movs	r5, #6
   2493e:	e7f2      	b.n	24926 <ble_gattc_read_by_uuid+0x4e>
   24940:	10005c04 	.word	0x10005c04

00024944 <ble_gattc_read_long>:
{
   24944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24948:	4680      	mov	r8, r0
   2494a:	460f      	mov	r7, r1
   2494c:	4616      	mov	r6, r2
   2494e:	461d      	mov	r5, r3
    STATS_INC(ble_gattc_stats, read_long);
   24950:	4b12      	ldr	r3, [pc, #72]	; (2499c <ble_gattc_read_long+0x58>)
   24952:	6d5c      	ldr	r4, [r3, #84]	; 0x54
   24954:	3401      	adds	r4, #1
   24956:	655c      	str	r4, [r3, #84]	; 0x54
    proc = ble_gattc_proc_alloc();
   24958:	f7ff fa5c 	bl	23e14 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   2495c:	4604      	mov	r4, r0
   2495e:	b1d0      	cbz	r0, 24996 <ble_gattc_read_long+0x52>
    proc->op = BLE_GATT_OP_READ_LONG;
   24960:	2309      	movs	r3, #9
   24962:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   24964:	f8a0 8008 	strh.w	r8, [r0, #8]
    proc->read_long.handle = handle;
   24968:	8187      	strh	r7, [r0, #12]
    proc->read_long.offset = offset;
   2496a:	81c6      	strh	r6, [r0, #14]
    proc->read_long.cb = cb;
   2496c:	6105      	str	r5, [r0, #16]
    proc->read_long.cb_arg = cb_arg;
   2496e:	9b06      	ldr	r3, [sp, #24]
   24970:	6143      	str	r3, [r0, #20]
    ble_gattc_log_read_long(proc);
   24972:	f7ff fab7 	bl	23ee4 <ble_gattc_log_read_long>
    rc = ble_gattc_read_long_tx(proc);
   24976:	4620      	mov	r0, r4
   24978:	f7ff f83a 	bl	239f0 <ble_gattc_read_long_tx>
    if (rc != 0) {
   2497c:	4605      	mov	r5, r0
   2497e:	b118      	cbz	r0, 24988 <ble_gattc_read_long+0x44>
        STATS_INC(ble_gattc_stats, read_long_fail);
   24980:	4a06      	ldr	r2, [pc, #24]	; (2499c <ble_gattc_read_long+0x58>)
   24982:	6d93      	ldr	r3, [r2, #88]	; 0x58
   24984:	3301      	adds	r3, #1
   24986:	6593      	str	r3, [r2, #88]	; 0x58
    ble_gattc_process_status(proc, rc);
   24988:	4629      	mov	r1, r5
   2498a:	4620      	mov	r0, r4
   2498c:	f7ff fa10 	bl	23db0 <ble_gattc_process_status>
}
   24990:	4628      	mov	r0, r5
   24992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   24996:	2506      	movs	r5, #6
   24998:	e7f2      	b.n	24980 <ble_gattc_read_long+0x3c>
   2499a:	bf00      	nop
   2499c:	10005c04 	.word	0x10005c04

000249a0 <ble_gattc_read_mult>:
{
   249a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   249a4:	460e      	mov	r6, r1
   249a6:	4614      	mov	r4, r2
    STATS_INC(ble_gattc_stats, read_mult);
   249a8:	4919      	ldr	r1, [pc, #100]	; (24a10 <ble_gattc_read_mult+0x70>)
   249aa:	6dca      	ldr	r2, [r1, #92]	; 0x5c
   249ac:	3201      	adds	r2, #1
   249ae:	65ca      	str	r2, [r1, #92]	; 0x5c
    if (num_handles > MYNEWT_VAL(BLE_GATT_READ_MAX_ATTRS)) {
   249b0:	2c08      	cmp	r4, #8
   249b2:	d90c      	bls.n	249ce <ble_gattc_read_mult+0x2e>
        rc = BLE_HS_EINVAL;
   249b4:	2403      	movs	r4, #3
    proc = NULL;
   249b6:	2500      	movs	r5, #0
        STATS_INC(ble_gattc_stats, read_mult_fail);
   249b8:	4a15      	ldr	r2, [pc, #84]	; (24a10 <ble_gattc_read_mult+0x70>)
   249ba:	6e13      	ldr	r3, [r2, #96]	; 0x60
   249bc:	3301      	adds	r3, #1
   249be:	6613      	str	r3, [r2, #96]	; 0x60
    ble_gattc_process_status(proc, rc);
   249c0:	4621      	mov	r1, r4
   249c2:	4628      	mov	r0, r5
   249c4:	f7ff f9f4 	bl	23db0 <ble_gattc_process_status>
}
   249c8:	4620      	mov	r0, r4
   249ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   249ce:	4607      	mov	r7, r0
   249d0:	4698      	mov	r8, r3
    proc = ble_gattc_proc_alloc();
   249d2:	f7ff fa1f 	bl	23e14 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   249d6:	4605      	mov	r5, r0
   249d8:	b1b8      	cbz	r0, 24a0a <ble_gattc_read_mult+0x6a>
    proc->op = BLE_GATT_OP_READ_MULT;
   249da:	230a      	movs	r3, #10
   249dc:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   249de:	8107      	strh	r7, [r0, #8]
    memcpy(proc->read_mult.handles, handles, num_handles * sizeof *handles);
   249e0:	0062      	lsls	r2, r4, #1
   249e2:	4631      	mov	r1, r6
   249e4:	300c      	adds	r0, #12
   249e6:	f7f6 f945 	bl	1ac74 <memcpy>
    proc->read_mult.num_handles = num_handles;
   249ea:	772c      	strb	r4, [r5, #28]
    proc->read_mult.cb = cb;
   249ec:	f8c5 8020 	str.w	r8, [r5, #32]
    proc->read_mult.cb_arg = cb_arg;
   249f0:	9b06      	ldr	r3, [sp, #24]
   249f2:	626b      	str	r3, [r5, #36]	; 0x24
    ble_gattc_log_read_mult(handles, num_handles);
   249f4:	4621      	mov	r1, r4
   249f6:	4630      	mov	r0, r6
   249f8:	f7ff fa84 	bl	23f04 <ble_gattc_log_read_mult>
    rc = ble_gattc_read_mult_tx(proc);
   249fc:	4628      	mov	r0, r5
   249fe:	f7ff fbb7 	bl	24170 <ble_gattc_read_mult_tx>
    if (rc != 0) {
   24a02:	4604      	mov	r4, r0
   24a04:	2800      	cmp	r0, #0
   24a06:	d0db      	beq.n	249c0 <ble_gattc_read_mult+0x20>
   24a08:	e7d6      	b.n	249b8 <ble_gattc_read_mult+0x18>
        rc = BLE_HS_ENOMEM;
   24a0a:	2406      	movs	r4, #6
   24a0c:	e7d4      	b.n	249b8 <ble_gattc_read_mult+0x18>
   24a0e:	bf00      	nop
   24a10:	10005c04 	.word	0x10005c04

00024a14 <ble_gattc_write_no_rsp>:
{
   24a14:	b570      	push	{r4, r5, r6, lr}
   24a16:	4606      	mov	r6, r0
   24a18:	460c      	mov	r4, r1
   24a1a:	4615      	mov	r5, r2
    STATS_INC(ble_gattc_stats, write_no_rsp);
   24a1c:	4a09      	ldr	r2, [pc, #36]	; (24a44 <ble_gattc_write_no_rsp+0x30>)
   24a1e:	6e53      	ldr	r3, [r2, #100]	; 0x64
   24a20:	3301      	adds	r3, #1
   24a22:	6653      	str	r3, [r2, #100]	; 0x64
    ble_gattc_log_write(attr_handle, OS_MBUF_PKTLEN(txom), 0);
   24a24:	2200      	movs	r2, #0
   24a26:	8a29      	ldrh	r1, [r5, #16]
   24a28:	4620      	mov	r0, r4
   24a2a:	f7ff fa9d 	bl	23f68 <ble_gattc_log_write>
    rc = ble_att_clt_tx_write_cmd(conn_handle, attr_handle, txom);
   24a2e:	462a      	mov	r2, r5
   24a30:	4621      	mov	r1, r4
   24a32:	4630      	mov	r0, r6
   24a34:	f7fa fd1f 	bl	1f476 <ble_att_clt_tx_write_cmd>
    if (rc != 0) {
   24a38:	b118      	cbz	r0, 24a42 <ble_gattc_write_no_rsp+0x2e>
        STATS_INC(ble_gattc_stats, write);
   24a3a:	4a02      	ldr	r2, [pc, #8]	; (24a44 <ble_gattc_write_no_rsp+0x30>)
   24a3c:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   24a3e:	3301      	adds	r3, #1
   24a40:	66d3      	str	r3, [r2, #108]	; 0x6c
}
   24a42:	bd70      	pop	{r4, r5, r6, pc}
   24a44:	10005c04 	.word	0x10005c04

00024a48 <ble_gattc_write>:
{
   24a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24a4c:	4607      	mov	r7, r0
   24a4e:	460e      	mov	r6, r1
   24a50:	4614      	mov	r4, r2
   24a52:	4698      	mov	r8, r3
    STATS_INC(ble_gattc_stats, write);
   24a54:	4b17      	ldr	r3, [pc, #92]	; (24ab4 <ble_gattc_write+0x6c>)
   24a56:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   24a58:	3201      	adds	r2, #1
   24a5a:	66da      	str	r2, [r3, #108]	; 0x6c
    proc = ble_gattc_proc_alloc();
   24a5c:	f7ff f9da 	bl	23e14 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   24a60:	4605      	mov	r5, r0
   24a62:	b310      	cbz	r0, 24aaa <ble_gattc_write+0x62>
    proc->op = BLE_GATT_OP_WRITE;
   24a64:	230b      	movs	r3, #11
   24a66:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   24a68:	8107      	strh	r7, [r0, #8]
    proc->write.att_handle = attr_handle;
   24a6a:	8186      	strh	r6, [r0, #12]
    proc->write.cb = cb;
   24a6c:	f8c0 8010 	str.w	r8, [r0, #16]
    proc->write.cb_arg = cb_arg;
   24a70:	9b06      	ldr	r3, [sp, #24]
   24a72:	6143      	str	r3, [r0, #20]
    ble_gattc_log_write(attr_handle, OS_MBUF_PKTLEN(txom), 1);
   24a74:	2201      	movs	r2, #1
   24a76:	8a21      	ldrh	r1, [r4, #16]
   24a78:	4630      	mov	r0, r6
   24a7a:	f7ff fa75 	bl	23f68 <ble_gattc_log_write>
    rc = ble_att_clt_tx_write_req(conn_handle, attr_handle, txom);
   24a7e:	4622      	mov	r2, r4
   24a80:	4631      	mov	r1, r6
   24a82:	4638      	mov	r0, r7
   24a84:	f7fa fcdc 	bl	1f440 <ble_att_clt_tx_write_req>
    if (rc != 0) {
   24a88:	4606      	mov	r6, r0
   24a8a:	b180      	cbz	r0, 24aae <ble_gattc_write+0x66>
   24a8c:	2400      	movs	r4, #0
        STATS_INC(ble_gattc_stats, write_fail);
   24a8e:	4a09      	ldr	r2, [pc, #36]	; (24ab4 <ble_gattc_write+0x6c>)
   24a90:	6f13      	ldr	r3, [r2, #112]	; 0x70
   24a92:	3301      	adds	r3, #1
   24a94:	6713      	str	r3, [r2, #112]	; 0x70
    os_mbuf_free_chain(txom);
   24a96:	4620      	mov	r0, r4
   24a98:	f7f4 fdb9 	bl	1960e <os_mbuf_free_chain>
    ble_gattc_process_status(proc, rc);
   24a9c:	4631      	mov	r1, r6
   24a9e:	4628      	mov	r0, r5
   24aa0:	f7ff f986 	bl	23db0 <ble_gattc_process_status>
}
   24aa4:	4630      	mov	r0, r6
   24aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   24aaa:	2606      	movs	r6, #6
   24aac:	e7ef      	b.n	24a8e <ble_gattc_write+0x46>
   24aae:	2400      	movs	r4, #0
   24ab0:	e7f1      	b.n	24a96 <ble_gattc_write+0x4e>
   24ab2:	bf00      	nop
   24ab4:	10005c04 	.word	0x10005c04

00024ab8 <ble_gattc_write_long>:
{
   24ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24abc:	4680      	mov	r8, r0
   24abe:	460f      	mov	r7, r1
   24ac0:	4616      	mov	r6, r2
   24ac2:	461d      	mov	r5, r3
    STATS_INC(ble_gattc_stats, write_long);
   24ac4:	4a16      	ldr	r2, [pc, #88]	; (24b20 <ble_gattc_write_long+0x68>)
   24ac6:	6f53      	ldr	r3, [r2, #116]	; 0x74
   24ac8:	3301      	adds	r3, #1
   24aca:	6753      	str	r3, [r2, #116]	; 0x74
    proc = ble_gattc_proc_alloc();
   24acc:	f7ff f9a2 	bl	23e14 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   24ad0:	4604      	mov	r4, r0
   24ad2:	b300      	cbz	r0, 24b16 <ble_gattc_write_long+0x5e>
    proc->op = BLE_GATT_OP_WRITE_LONG;
   24ad4:	230c      	movs	r3, #12
   24ad6:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   24ad8:	f8a0 8008 	strh.w	r8, [r0, #8]
    proc->write_long.attr.handle = attr_handle;
   24adc:	8187      	strh	r7, [r0, #12]
    proc->write_long.attr.offset = offset;
   24ade:	81c6      	strh	r6, [r0, #14]
    proc->write_long.attr.om = txom;
   24ae0:	6105      	str	r5, [r0, #16]
    proc->write_long.cb = cb;
   24ae2:	9b06      	ldr	r3, [sp, #24]
   24ae4:	6183      	str	r3, [r0, #24]
    proc->write_long.cb_arg = cb_arg;
   24ae6:	9b07      	ldr	r3, [sp, #28]
   24ae8:	61c3      	str	r3, [r0, #28]
    ble_gattc_log_write_long(proc);
   24aea:	f7ff fa57 	bl	23f9c <ble_gattc_log_write_long>
    rc = ble_gattc_write_long_tx(proc);
   24aee:	4620      	mov	r0, r4
   24af0:	f7fe ff2f 	bl	23952 <ble_gattc_write_long_tx>
    if (rc != 0) {
   24af4:	4606      	mov	r6, r0
   24af6:	b180      	cbz	r0, 24b1a <ble_gattc_write_long+0x62>
   24af8:	2500      	movs	r5, #0
        STATS_INC(ble_gattc_stats, write_long_fail);
   24afa:	4a09      	ldr	r2, [pc, #36]	; (24b20 <ble_gattc_write_long+0x68>)
   24afc:	6f93      	ldr	r3, [r2, #120]	; 0x78
   24afe:	3301      	adds	r3, #1
   24b00:	6793      	str	r3, [r2, #120]	; 0x78
    os_mbuf_free_chain(txom);
   24b02:	4628      	mov	r0, r5
   24b04:	f7f4 fd83 	bl	1960e <os_mbuf_free_chain>
    ble_gattc_process_status(proc, rc);
   24b08:	4631      	mov	r1, r6
   24b0a:	4620      	mov	r0, r4
   24b0c:	f7ff f950 	bl	23db0 <ble_gattc_process_status>
}
   24b10:	4630      	mov	r0, r6
   24b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   24b16:	2606      	movs	r6, #6
   24b18:	e7ef      	b.n	24afa <ble_gattc_write_long+0x42>
   24b1a:	2500      	movs	r5, #0
   24b1c:	e7f1      	b.n	24b02 <ble_gattc_write_long+0x4a>
   24b1e:	bf00      	nop
   24b20:	10005c04 	.word	0x10005c04

00024b24 <ble_gattc_write_reliable>:
{
   24b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24b28:	460f      	mov	r7, r1
   24b2a:	4616      	mov	r6, r2
   24b2c:	461c      	mov	r4, r3
    STATS_INC(ble_gattc_stats, write_reliable);
   24b2e:	4b28      	ldr	r3, [pc, #160]	; (24bd0 <ble_gattc_write_reliable+0xac>)
   24b30:	6fda      	ldr	r2, [r3, #124]	; 0x7c
   24b32:	3201      	adds	r2, #1
   24b34:	67da      	str	r2, [r3, #124]	; 0x7c
    if (num_attrs > MYNEWT_VAL(BLE_GATT_WRITE_MAX_ATTRS)) {
   24b36:	2e04      	cmp	r6, #4
   24b38:	dd15      	ble.n	24b66 <ble_gattc_write_reliable+0x42>
        rc = BLE_HS_EINVAL;
   24b3a:	f04f 0903 	mov.w	r9, #3
    proc = NULL;
   24b3e:	f04f 0800 	mov.w	r8, #0
        STATS_INC(ble_gattc_stats, write_reliable_fail);
   24b42:	4a23      	ldr	r2, [pc, #140]	; (24bd0 <ble_gattc_write_reliable+0xac>)
   24b44:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   24b48:	3301      	adds	r3, #1
   24b4a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    for (i = 0; i < num_attrs; i++) {
   24b4e:	2400      	movs	r4, #0
   24b50:	42b4      	cmp	r4, r6
   24b52:	da35      	bge.n	24bc0 <ble_gattc_write_reliable+0x9c>
        os_mbuf_free_chain(attrs[i].om);
   24b54:	eb07 05c4 	add.w	r5, r7, r4, lsl #3
   24b58:	6868      	ldr	r0, [r5, #4]
   24b5a:	f7f4 fd58 	bl	1960e <os_mbuf_free_chain>
        attrs[i].om = NULL;
   24b5e:	2300      	movs	r3, #0
   24b60:	606b      	str	r3, [r5, #4]
    for (i = 0; i < num_attrs; i++) {
   24b62:	3401      	adds	r4, #1
   24b64:	e7f4      	b.n	24b50 <ble_gattc_write_reliable+0x2c>
   24b66:	4605      	mov	r5, r0
    proc = ble_gattc_proc_alloc();
   24b68:	f7ff f954 	bl	23e14 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   24b6c:	4680      	mov	r8, r0
   24b6e:	b320      	cbz	r0, 24bba <ble_gattc_write_reliable+0x96>
    proc->op = BLE_GATT_OP_WRITE_RELIABLE;
   24b70:	230d      	movs	r3, #13
   24b72:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   24b74:	8105      	strh	r5, [r0, #8]
    proc->write_reliable.num_attrs = num_attrs;
   24b76:	f880 602c 	strb.w	r6, [r0, #44]	; 0x2c
    proc->write_reliable.cur_attr = 0;
   24b7a:	2300      	movs	r3, #0
   24b7c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    proc->write_reliable.cb = cb;
   24b80:	6304      	str	r4, [r0, #48]	; 0x30
    proc->write_reliable.cb_arg = cb_arg;
   24b82:	9a08      	ldr	r2, [sp, #32]
   24b84:	6342      	str	r2, [r0, #52]	; 0x34
    for (i = 0; i < num_attrs; i++) {
   24b86:	e00c      	b.n	24ba2 <ble_gattc_write_reliable+0x7e>
        proc->write_reliable.attrs[i] = attrs[i];
   24b88:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   24b8c:	3301      	adds	r3, #1
   24b8e:	eb08 04c3 	add.w	r4, r8, r3, lsl #3
   24b92:	1d25      	adds	r5, r4, #4
   24b94:	e892 0003 	ldmia.w	r2, {r0, r1}
   24b98:	e885 0003 	stmia.w	r5, {r0, r1}
        proc->write_reliable.attrs[i].offset = 0;
   24b9c:	2100      	movs	r1, #0
   24b9e:	80e1      	strh	r1, [r4, #6]
        attrs[i].om = NULL;
   24ba0:	6051      	str	r1, [r2, #4]
    for (i = 0; i < num_attrs; i++) {
   24ba2:	42b3      	cmp	r3, r6
   24ba4:	dbf0      	blt.n	24b88 <ble_gattc_write_reliable+0x64>
    ble_gattc_log_write_reliable(proc);
   24ba6:	4640      	mov	r0, r8
   24ba8:	f7ff fa0e 	bl	23fc8 <ble_gattc_log_write_reliable>
    rc = ble_gattc_write_reliable_tx(proc);
   24bac:	4640      	mov	r0, r8
   24bae:	f7fe fe79 	bl	238a4 <ble_gattc_write_reliable_tx>
    if (rc != 0) {
   24bb2:	4681      	mov	r9, r0
   24bb4:	2800      	cmp	r0, #0
   24bb6:	d0ca      	beq.n	24b4e <ble_gattc_write_reliable+0x2a>
   24bb8:	e7c3      	b.n	24b42 <ble_gattc_write_reliable+0x1e>
        rc = BLE_HS_ENOMEM;
   24bba:	f04f 0906 	mov.w	r9, #6
   24bbe:	e7c0      	b.n	24b42 <ble_gattc_write_reliable+0x1e>
    ble_gattc_process_status(proc, rc);
   24bc0:	4649      	mov	r1, r9
   24bc2:	4640      	mov	r0, r8
   24bc4:	f7ff f8f4 	bl	23db0 <ble_gattc_process_status>
}
   24bc8:	4648      	mov	r0, r9
   24bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24bce:	bf00      	nop
   24bd0:	10005c04 	.word	0x10005c04

00024bd4 <ble_gattc_notify_custom>:
{
   24bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   24bd6:	b083      	sub	sp, #12
   24bd8:	4606      	mov	r6, r0
   24bda:	460d      	mov	r5, r1
   24bdc:	4614      	mov	r4, r2
    STATS_INC(ble_gattc_stats, notify);
   24bde:	4a1c      	ldr	r2, [pc, #112]	; (24c50 <ble_gattc_notify_custom+0x7c>)
   24be0:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   24be4:	3301      	adds	r3, #1
   24be6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    ble_gattc_log_notify(chr_val_handle);
   24bea:	4608      	mov	r0, r1
   24bec:	f7ff fa20 	bl	24030 <ble_gattc_log_notify>
    if (txom == NULL) {
   24bf0:	b1cc      	cbz	r4, 24c26 <ble_gattc_notify_custom+0x52>
    rc = ble_att_clt_tx_notify(conn_handle, chr_val_handle, txom);
   24bf2:	4622      	mov	r2, r4
   24bf4:	4629      	mov	r1, r5
   24bf6:	4630      	mov	r0, r6
   24bf8:	f7fa fce0 	bl	1f5bc <ble_att_clt_tx_notify>
    if (rc != 0) {
   24bfc:	4607      	mov	r7, r0
   24bfe:	b320      	cbz	r0, 24c4a <ble_gattc_notify_custom+0x76>
   24c00:	2400      	movs	r4, #0
        STATS_INC(ble_gattc_stats, notify_fail);
   24c02:	4a13      	ldr	r2, [pc, #76]	; (24c50 <ble_gattc_notify_custom+0x7c>)
   24c04:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   24c08:	3301      	adds	r3, #1
   24c0a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    ble_gap_notify_tx_event(rc, conn_handle, chr_val_handle, 0);
   24c0e:	2300      	movs	r3, #0
   24c10:	462a      	mov	r2, r5
   24c12:	4631      	mov	r1, r6
   24c14:	4638      	mov	r0, r7
   24c16:	f7fe f830 	bl	22c7a <ble_gap_notify_tx_event>
    os_mbuf_free_chain(txom);
   24c1a:	4620      	mov	r0, r4
   24c1c:	f7f4 fcf7 	bl	1960e <os_mbuf_free_chain>
}
   24c20:	4638      	mov	r0, r7
   24c22:	b003      	add	sp, #12
   24c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txom = ble_hs_mbuf_att_pkt();
   24c26:	f003 fc7f 	bl	28528 <ble_hs_mbuf_att_pkt>
        if (txom == NULL) {
   24c2a:	4604      	mov	r4, r0
   24c2c:	b158      	cbz	r0, 24c46 <ble_gattc_notify_custom+0x72>
        rc = ble_att_svr_read_handle(BLE_HS_CONN_HANDLE_NONE,
   24c2e:	2200      	movs	r2, #0
   24c30:	9200      	str	r2, [sp, #0]
   24c32:	4603      	mov	r3, r0
   24c34:	4629      	mov	r1, r5
   24c36:	f64f 70ff 	movw	r0, #65535	; 0xffff
   24c3a:	f7fb fc11 	bl	20460 <ble_att_svr_read_handle>
        if (rc != 0) {
   24c3e:	2800      	cmp	r0, #0
   24c40:	d0d7      	beq.n	24bf2 <ble_gattc_notify_custom+0x1e>
            rc = BLE_HS_EAPP;
   24c42:	2709      	movs	r7, #9
   24c44:	e7dd      	b.n	24c02 <ble_gattc_notify_custom+0x2e>
            rc = BLE_HS_ENOMEM;
   24c46:	2706      	movs	r7, #6
   24c48:	e7db      	b.n	24c02 <ble_gattc_notify_custom+0x2e>
   24c4a:	2400      	movs	r4, #0
   24c4c:	e7df      	b.n	24c0e <ble_gattc_notify_custom+0x3a>
   24c4e:	bf00      	nop
   24c50:	10005c04 	.word	0x10005c04

00024c54 <ble_gattc_notify>:
{
   24c54:	b508      	push	{r3, lr}
    rc = ble_gattc_notify_custom(conn_handle, chr_val_handle, NULL);
   24c56:	2200      	movs	r2, #0
   24c58:	f7ff ffbc 	bl	24bd4 <ble_gattc_notify_custom>
}
   24c5c:	bd08      	pop	{r3, pc}

00024c5e <ble_gatts_indicate_fail_notconn>:
 * Causes the indication in progress for the specified connection (if any) to
 * fail with a status code of BLE_HS_ENOTCONN;
 */
void
ble_gatts_indicate_fail_notconn(uint16_t conn_handle)
{
   24c5e:	b508      	push	{r3, lr}
    ble_gattc_fail_procs(conn_handle, BLE_GATT_OP_INDICATE, BLE_HS_ENOTCONN);
   24c60:	2207      	movs	r2, #7
   24c62:	210e      	movs	r1, #14
   24c64:	f7fe fdda 	bl	2381c <ble_gattc_fail_procs>
}
   24c68:	bd08      	pop	{r3, pc}
	...

00024c6c <ble_gattc_indicate_custom>:

int
ble_gattc_indicate_custom(uint16_t conn_handle, uint16_t chr_val_handle,
                          struct os_mbuf *txom)
{
   24c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24c70:	b082      	sub	sp, #8
   24c72:	4606      	mov	r6, r0
   24c74:	460c      	mov	r4, r1
   24c76:	4615      	mov	r5, r2

    struct ble_gattc_proc *proc;
    struct ble_hs_conn *conn;
    int rc;

    STATS_INC(ble_gattc_stats, indicate);
   24c78:	4a29      	ldr	r2, [pc, #164]	; (24d20 <ble_gattc_indicate_custom+0xb4>)
   24c7a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   24c7e:	3301      	adds	r3, #1
   24c80:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    proc = ble_gattc_proc_alloc();
   24c84:	f7ff f8c6 	bl	23e14 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   24c88:	4680      	mov	r8, r0
   24c8a:	b360      	cbz	r0, 24ce6 <ble_gattc_indicate_custom+0x7a>
        rc = BLE_HS_ENOMEM;
        goto done;
    }

    proc->op = BLE_GATT_OP_INDICATE;
   24c8c:	230e      	movs	r3, #14
   24c8e:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   24c90:	8106      	strh	r6, [r0, #8]
    proc->indicate.chr_val_handle = chr_val_handle;
   24c92:	8184      	strh	r4, [r0, #12]

    ble_gattc_log_indicate(chr_val_handle);
   24c94:	4620      	mov	r0, r4
   24c96:	f7ff f9db 	bl	24050 <ble_gattc_log_indicate>

    if (txom == NULL) {
   24c9a:	b14d      	cbz	r5, 24cb0 <ble_gattc_indicate_custom+0x44>
            rc = BLE_HS_EAPP;
            goto done;
        }
    }

    rc = ble_att_clt_tx_indicate(conn_handle, chr_val_handle, txom);
   24c9c:	462a      	mov	r2, r5
   24c9e:	4621      	mov	r1, r4
   24ca0:	4630      	mov	r0, r6
   24ca2:	f7fa fcab 	bl	1f5fc <ble_att_clt_tx_indicate>
    txom = NULL;
    if (rc != 0) {
   24ca6:	4607      	mov	r7, r0
   24ca8:	b190      	cbz	r0, 24cd0 <ble_gattc_indicate_custom+0x64>
        conn->bhc_gatt_svr.indicate_val_handle = chr_val_handle;
    }
    ble_hs_unlock();

done:
    if (rc != 0) {
   24caa:	b3b7      	cbz	r7, 24d1a <ble_gattc_indicate_custom+0xae>
   24cac:	2500      	movs	r5, #0
   24cae:	e01b      	b.n	24ce8 <ble_gattc_indicate_custom+0x7c>
        txom = ble_hs_mbuf_att_pkt();
   24cb0:	f003 fc3a 	bl	28528 <ble_hs_mbuf_att_pkt>
        if (txom == NULL) {
   24cb4:	4605      	mov	r5, r0
   24cb6:	b370      	cbz	r0, 24d16 <ble_gattc_indicate_custom+0xaa>
        rc = ble_att_svr_read_handle(BLE_HS_CONN_HANDLE_NONE, chr_val_handle,
   24cb8:	2200      	movs	r2, #0
   24cba:	9200      	str	r2, [sp, #0]
   24cbc:	4603      	mov	r3, r0
   24cbe:	4621      	mov	r1, r4
   24cc0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   24cc4:	f7fb fbcc 	bl	20460 <ble_att_svr_read_handle>
        if (rc != 0) {
   24cc8:	2800      	cmp	r0, #0
   24cca:	d0e7      	beq.n	24c9c <ble_gattc_indicate_custom+0x30>
            rc = BLE_HS_EAPP;
   24ccc:	2709      	movs	r7, #9
   24cce:	e00b      	b.n	24ce8 <ble_gattc_indicate_custom+0x7c>
    ble_hs_lock();
   24cd0:	f001 fc32 	bl	26538 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   24cd4:	4630      	mov	r0, r6
   24cd6:	f002 fcb3 	bl	27640 <ble_hs_conn_find>
    if (conn != NULL) {
   24cda:	b108      	cbz	r0, 24ce0 <ble_gattc_indicate_custom+0x74>
        conn->bhc_gatt_svr.indicate_val_handle = chr_val_handle;
   24cdc:	f8a0 4054 	strh.w	r4, [r0, #84]	; 0x54
    ble_hs_unlock();
   24ce0:	f001 fc2e 	bl	26540 <ble_hs_unlock>
   24ce4:	e7e1      	b.n	24caa <ble_gattc_indicate_custom+0x3e>
        rc = BLE_HS_ENOMEM;
   24ce6:	2706      	movs	r7, #6
        STATS_INC(ble_gattc_stats, indicate_fail);
   24ce8:	4a0d      	ldr	r2, [pc, #52]	; (24d20 <ble_gattc_indicate_custom+0xb4>)
   24cea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   24cee:	3301      	adds	r3, #1
   24cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Tell the application that an indication transmission was attempted. */
    ble_gap_notify_tx_event(rc, conn_handle, chr_val_handle, 1);
   24cf4:	2301      	movs	r3, #1
   24cf6:	4622      	mov	r2, r4
   24cf8:	4631      	mov	r1, r6
   24cfa:	4638      	mov	r0, r7
   24cfc:	f7fd ffbd 	bl	22c7a <ble_gap_notify_tx_event>

    ble_gattc_process_status(proc, rc);
   24d00:	4639      	mov	r1, r7
   24d02:	4640      	mov	r0, r8
   24d04:	f7ff f854 	bl	23db0 <ble_gattc_process_status>
    os_mbuf_free_chain(txom);
   24d08:	4628      	mov	r0, r5
   24d0a:	f7f4 fc80 	bl	1960e <os_mbuf_free_chain>
    return rc;
}
   24d0e:	4638      	mov	r0, r7
   24d10:	b002      	add	sp, #8
   24d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_ENOMEM;
   24d16:	2706      	movs	r7, #6
   24d18:	e7e6      	b.n	24ce8 <ble_gattc_indicate_custom+0x7c>
   24d1a:	2500      	movs	r5, #0
   24d1c:	e7ea      	b.n	24cf4 <ble_gattc_indicate_custom+0x88>
   24d1e:	bf00      	nop
   24d20:	10005c04 	.word	0x10005c04

00024d24 <ble_gattc_indicate>:

int
ble_gattc_indicate(uint16_t conn_handle, uint16_t chr_val_handle)
{
   24d24:	b508      	push	{r3, lr}
    return ble_gattc_indicate_custom(conn_handle, chr_val_handle, NULL);
   24d26:	2200      	movs	r2, #0
   24d28:	f7ff ffa0 	bl	24c6c <ble_gattc_indicate_custom>
}
   24d2c:	bd08      	pop	{r3, pc}

00024d2e <ble_gattc_rx_err>:
 * Dispatches an incoming ATT error-response to the appropriate active GATT
 * procedure.
 */
void
ble_gattc_rx_err(uint16_t conn_handle, uint16_t handle, uint16_t status)
{
   24d2e:	b570      	push	{r4, r5, r6, lr}
   24d30:	460d      	mov	r5, r1
   24d32:	4614      	mov	r4, r2
    struct ble_gattc_proc *proc;
    ble_gattc_err_fn *err_cb;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle, BLE_GATT_OP_NONE);
   24d34:	21ff      	movs	r1, #255	; 0xff
   24d36:	f7fe fce3 	bl	23700 <ble_gattc_extract_first_by_conn_op>
    if (proc != NULL) {
   24d3a:	b168      	cbz	r0, 24d58 <ble_gattc_rx_err+0x2a>
   24d3c:	4606      	mov	r6, r0
        err_cb = ble_gattc_err_dispatch_get(proc->op);
   24d3e:	7a80      	ldrb	r0, [r0, #10]
   24d40:	f7fe f91a 	bl	22f78 <ble_gattc_err_dispatch_get>
        if (err_cb != NULL) {
   24d44:	4603      	mov	r3, r0
   24d46:	b120      	cbz	r0, 24d52 <ble_gattc_rx_err+0x24>
            err_cb(proc, BLE_HS_ERR_ATT_BASE + status, handle);
   24d48:	462a      	mov	r2, r5
   24d4a:	f504 7180 	add.w	r1, r4, #256	; 0x100
   24d4e:	4630      	mov	r0, r6
   24d50:	4798      	blx	r3
        }
        ble_gattc_proc_free(proc);
   24d52:	4630      	mov	r0, r6
   24d54:	f7fe fd40 	bl	237d8 <ble_gattc_proc_free>
    }
}
   24d58:	bd70      	pop	{r4, r5, r6, pc}

00024d5a <ble_gattc_rx_mtu>:
 * Dispatches an incoming ATT exchange-mtu-response to the appropriate active
 * GATT procedure.
 */
void
ble_gattc_rx_mtu(uint16_t conn_handle, int status, uint16_t chan_mtu)
{
   24d5a:	b570      	push	{r4, r5, r6, lr}
   24d5c:	460c      	mov	r4, r1
   24d5e:	4615      	mov	r5, r2
    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle, BLE_GATT_OP_MTU);
   24d60:	2100      	movs	r1, #0
   24d62:	f7fe fccd 	bl	23700 <ble_gattc_extract_first_by_conn_op>
    if (proc != NULL) {
   24d66:	b148      	cbz	r0, 24d7c <ble_gattc_rx_mtu+0x22>
   24d68:	4606      	mov	r6, r0
        ble_gattc_mtu_cb(proc, status, 0, chan_mtu);
   24d6a:	462b      	mov	r3, r5
   24d6c:	2200      	movs	r2, #0
   24d6e:	4621      	mov	r1, r4
   24d70:	f7fe f968 	bl	23044 <ble_gattc_mtu_cb>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   24d74:	210e      	movs	r1, #14
   24d76:	4630      	mov	r0, r6
   24d78:	f7ff f81a 	bl	23db0 <ble_gattc_process_status>
    }
}
   24d7c:	bd70      	pop	{r4, r5, r6, pc}

00024d7e <ble_gattc_rx_find_info_idata>:
 * find-information-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_find_info_idata(uint16_t conn_handle,
                             struct ble_att_find_info_idata *idata)
{
   24d7e:	b538      	push	{r3, r4, r5, lr}
   24d80:	460c      	mov	r4, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   24d82:	2106      	movs	r1, #6
   24d84:	f7fe fcbc 	bl	23700 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_ALL_DSCS);
    if (proc != NULL) {
   24d88:	b138      	cbz	r0, 24d9a <ble_gattc_rx_find_info_idata+0x1c>
   24d8a:	4605      	mov	r5, r0
        rc = ble_gattc_disc_all_dscs_rx_idata(proc, idata);
   24d8c:	4621      	mov	r1, r4
   24d8e:	f7fe fabe 	bl	2330e <ble_gattc_disc_all_dscs_rx_idata>
   24d92:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   24d94:	4628      	mov	r0, r5
   24d96:	f7ff f80b 	bl	23db0 <ble_gattc_process_status>
    }
}
   24d9a:	bd38      	pop	{r3, r4, r5, pc}

00024d9c <ble_gattc_rx_find_info_complete>:
 * Dispatches an incoming notification of the end of a
 * find-information-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_find_info_complete(uint16_t conn_handle, int status)
{
   24d9c:	b538      	push	{r3, r4, r5, lr}
   24d9e:	460c      	mov	r4, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   24da0:	2106      	movs	r1, #6
   24da2:	f7fe fcad 	bl	23700 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_ALL_DSCS);
    if (proc != NULL) {
   24da6:	b138      	cbz	r0, 24db8 <ble_gattc_rx_find_info_complete+0x1c>
   24da8:	4605      	mov	r5, r0
        rc = ble_gattc_disc_all_dscs_rx_complete(proc, status);
   24daa:	4621      	mov	r1, r4
   24dac:	f7fe fe91 	bl	23ad2 <ble_gattc_disc_all_dscs_rx_complete>
   24db0:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   24db2:	4628      	mov	r0, r5
   24db4:	f7fe fffc 	bl	23db0 <ble_gattc_process_status>
    }
}
   24db8:	bd38      	pop	{r3, r4, r5, pc}

00024dba <ble_gattc_rx_find_type_value_hinfo>:
 * find-by-type-value-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_find_type_value_hinfo(uint16_t conn_handle,
                                   struct ble_att_find_type_value_hinfo *hinfo)
{
   24dba:	b538      	push	{r3, r4, r5, lr}
   24dbc:	460c      	mov	r4, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   24dbe:	2102      	movs	r1, #2
   24dc0:	f7fe fc9e 	bl	23700 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_SVC_UUID);
    if (proc != NULL) {
   24dc4:	b138      	cbz	r0, 24dd6 <ble_gattc_rx_find_type_value_hinfo+0x1c>
   24dc6:	4605      	mov	r5, r0
        rc = ble_gattc_disc_svc_uuid_rx_hinfo(proc, hinfo);
   24dc8:	4621      	mov	r1, r4
   24dca:	f7fe f9be 	bl	2314a <ble_gattc_disc_svc_uuid_rx_hinfo>
   24dce:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   24dd0:	4628      	mov	r0, r5
   24dd2:	f7fe ffed 	bl	23db0 <ble_gattc_process_status>
    }
}
   24dd6:	bd38      	pop	{r3, r4, r5, pc}

00024dd8 <ble_gattc_rx_find_type_value_complete>:
 * Dispatches an incoming notification of the end of a
 * find-by-type-value-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_find_type_value_complete(uint16_t conn_handle, int status)
{
   24dd8:	b538      	push	{r3, r4, r5, lr}
   24dda:	460c      	mov	r4, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   24ddc:	2102      	movs	r1, #2
   24dde:	f7fe fc8f 	bl	23700 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_SVC_UUID);
    if (proc != NULL) {
   24de2:	b138      	cbz	r0, 24df4 <ble_gattc_rx_find_type_value_complete+0x1c>
   24de4:	4605      	mov	r5, r0
        rc = ble_gattc_disc_svc_uuid_rx_complete(proc, status);
   24de6:	4621      	mov	r1, r4
   24de8:	f7fe ff85 	bl	23cf6 <ble_gattc_disc_svc_uuid_rx_complete>
   24dec:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   24dee:	4628      	mov	r0, r5
   24df0:	f7fe ffde 	bl	23db0 <ble_gattc_process_status>
    }
}
   24df4:	bd38      	pop	{r3, r4, r5, pc}
	...

00024df8 <ble_gattc_rx_read_type_adata>:
 * to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_read_type_adata(uint16_t conn_handle,
                             struct ble_att_read_type_adata *adata)
{
   24df8:	b530      	push	{r4, r5, lr}
   24dfa:	b083      	sub	sp, #12
   24dfc:	460c      	mov	r4, r1

    const struct ble_gattc_rx_adata_entry *rx_entry;
    struct ble_gattc_proc *proc;
    int rc;

    proc = BLE_GATTC_RX_EXTRACT_RX_ENTRY(conn_handle,
   24dfe:	ab01      	add	r3, sp, #4
   24e00:	2204      	movs	r2, #4
   24e02:	4907      	ldr	r1, [pc, #28]	; (24e20 <ble_gattc_rx_read_type_adata+0x28>)
   24e04:	f7fe fc90 	bl	23728 <ble_gattc_extract_with_rx_entry>
                                         ble_gattc_rx_read_type_elem_entries,
                                         &rx_entry);
    if (proc != NULL) {
   24e08:	b140      	cbz	r0, 24e1c <ble_gattc_rx_read_type_adata+0x24>
   24e0a:	4605      	mov	r5, r0
        rc = rx_entry->cb(proc, adata);
   24e0c:	9b01      	ldr	r3, [sp, #4]
   24e0e:	685b      	ldr	r3, [r3, #4]
   24e10:	4621      	mov	r1, r4
   24e12:	4798      	blx	r3
   24e14:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   24e16:	4628      	mov	r0, r5
   24e18:	f7fe ffca 	bl	23db0 <ble_gattc_process_status>
    }
}
   24e1c:	b003      	add	sp, #12
   24e1e:	bd30      	pop	{r4, r5, pc}
   24e20:	00034bec 	.word	0x00034bec

00024e24 <ble_gattc_rx_read_type_complete>:
 * Dispatches an incoming notification of the end of a read-by-type-response to
 * the appropriate active GATT procedure.
 */
void
ble_gattc_rx_read_type_complete(uint16_t conn_handle, int status)
{
   24e24:	b530      	push	{r4, r5, lr}
   24e26:	b083      	sub	sp, #12
   24e28:	460c      	mov	r4, r1

    const struct ble_gattc_rx_complete_entry *rx_entry;
    struct ble_gattc_proc *proc;
    int rc;

    proc = BLE_GATTC_RX_EXTRACT_RX_ENTRY(
   24e2a:	ab01      	add	r3, sp, #4
   24e2c:	2204      	movs	r2, #4
   24e2e:	4907      	ldr	r1, [pc, #28]	; (24e4c <ble_gattc_rx_read_type_complete+0x28>)
   24e30:	f7fe fc7a 	bl	23728 <ble_gattc_extract_with_rx_entry>
        conn_handle, ble_gattc_rx_read_type_complete_entries,
        &rx_entry);
    if (proc != NULL) {
   24e34:	b140      	cbz	r0, 24e48 <ble_gattc_rx_read_type_complete+0x24>
   24e36:	4605      	mov	r5, r0
        rc = rx_entry->cb(proc, status);
   24e38:	9b01      	ldr	r3, [sp, #4]
   24e3a:	685b      	ldr	r3, [r3, #4]
   24e3c:	4621      	mov	r1, r4
   24e3e:	4798      	blx	r3
   24e40:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   24e42:	4628      	mov	r0, r5
   24e44:	f7fe ffb4 	bl	23db0 <ble_gattc_process_status>
    }
}
   24e48:	b003      	add	sp, #12
   24e4a:	bd30      	pop	{r4, r5, pc}
   24e4c:	00034bcc 	.word	0x00034bcc

00024e50 <ble_gattc_rx_read_group_type_adata>:
 * read-by-group-type-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_read_group_type_adata(uint16_t conn_handle,
                                   struct ble_att_read_group_type_adata *adata)
{
   24e50:	b538      	push	{r3, r4, r5, lr}
   24e52:	460c      	mov	r4, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   24e54:	2101      	movs	r1, #1
   24e56:	f7fe fc53 	bl	23700 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_ALL_SVCS);
    if (proc != NULL) {
   24e5a:	b138      	cbz	r0, 24e6c <ble_gattc_rx_read_group_type_adata+0x1c>
   24e5c:	4605      	mov	r5, r0
        rc = ble_gattc_disc_all_svcs_rx_adata(proc, adata);
   24e5e:	4621      	mov	r1, r4
   24e60:	f7ff f9d6 	bl	24210 <ble_gattc_disc_all_svcs_rx_adata>
   24e64:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   24e66:	4628      	mov	r0, r5
   24e68:	f7fe ffa2 	bl	23db0 <ble_gattc_process_status>
    }
}
   24e6c:	bd38      	pop	{r3, r4, r5, pc}

00024e6e <ble_gattc_rx_read_group_type_complete>:
 * Dispatches an incoming notification of the end of a
 * read-by-group-type-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_read_group_type_complete(uint16_t conn_handle, int status)
{
   24e6e:	b538      	push	{r3, r4, r5, lr}
   24e70:	460c      	mov	r4, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   24e72:	2101      	movs	r1, #1
   24e74:	f7fe fc44 	bl	23700 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_ALL_SVCS);
    if (proc != NULL) {
   24e78:	b138      	cbz	r0, 24e8a <ble_gattc_rx_read_group_type_complete+0x1c>
   24e7a:	4605      	mov	r5, r0
        rc = ble_gattc_disc_all_svcs_rx_complete(proc, status);
   24e7c:	4621      	mov	r1, r4
   24e7e:	f7fe ff7c 	bl	23d7a <ble_gattc_disc_all_svcs_rx_complete>
   24e82:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   24e84:	4628      	mov	r0, r5
   24e86:	f7fe ff93 	bl	23db0 <ble_gattc_process_status>
    }
}
   24e8a:	bd38      	pop	{r3, r4, r5, pc}

00024e8c <ble_gattc_rx_read_rsp>:
 * Dispatches an incoming ATT read-response to the appropriate active GATT
 * procedure.
 */
void
ble_gattc_rx_read_rsp(uint16_t conn_handle, int status, struct os_mbuf **om)
{
   24e8c:	b570      	push	{r4, r5, r6, lr}
   24e8e:	b082      	sub	sp, #8
   24e90:	460c      	mov	r4, r1
   24e92:	4615      	mov	r5, r2

    const struct ble_gattc_rx_attr_entry *rx_entry;
    struct ble_gattc_proc *proc;
    int rc;

    proc = BLE_GATTC_RX_EXTRACT_RX_ENTRY(conn_handle,
   24e94:	ab01      	add	r3, sp, #4
   24e96:	2203      	movs	r2, #3
   24e98:	4907      	ldr	r1, [pc, #28]	; (24eb8 <ble_gattc_rx_read_rsp+0x2c>)
   24e9a:	f7fe fc45 	bl	23728 <ble_gattc_extract_with_rx_entry>
                                         ble_gattc_rx_read_rsp_entries,
                                         &rx_entry);
    if (proc != NULL) {
   24e9e:	b148      	cbz	r0, 24eb4 <ble_gattc_rx_read_rsp+0x28>
   24ea0:	4606      	mov	r6, r0
        rc = rx_entry->cb(proc, status, om);
   24ea2:	9b01      	ldr	r3, [sp, #4]
   24ea4:	685b      	ldr	r3, [r3, #4]
   24ea6:	462a      	mov	r2, r5
   24ea8:	4621      	mov	r1, r4
   24eaa:	4798      	blx	r3
   24eac:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   24eae:	4630      	mov	r0, r6
   24eb0:	f7fe ff7e 	bl	23db0 <ble_gattc_process_status>
    }
}
   24eb4:	b002      	add	sp, #8
   24eb6:	bd70      	pop	{r4, r5, r6, pc}
   24eb8:	00034bb4 	.word	0x00034bb4

00024ebc <ble_gattc_rx_read_blob_rsp>:
 * procedure.
 */
void
ble_gattc_rx_read_blob_rsp(uint16_t conn_handle, int status,
                           struct os_mbuf **om)
{
   24ebc:	b570      	push	{r4, r5, r6, lr}
   24ebe:	460c      	mov	r4, r1
   24ec0:	4615      	mov	r5, r2
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   24ec2:	2109      	movs	r1, #9
   24ec4:	f7fe fc1c 	bl	23700 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_READ_LONG);
    if (proc != NULL) {
   24ec8:	b140      	cbz	r0, 24edc <ble_gattc_rx_read_blob_rsp+0x20>
   24eca:	4606      	mov	r6, r0
        rc = ble_gattc_read_long_rx_read_rsp(proc, status, om);
   24ecc:	462a      	mov	r2, r5
   24ece:	4621      	mov	r1, r4
   24ed0:	f7fe fdae 	bl	23a30 <ble_gattc_read_long_rx_read_rsp>
   24ed4:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   24ed6:	4630      	mov	r0, r6
   24ed8:	f7fe ff6a 	bl	23db0 <ble_gattc_process_status>
    }
}
   24edc:	bd70      	pop	{r4, r5, r6, pc}

00024ede <ble_gattc_rx_read_mult_rsp>:
 * GATT procedure.
 */
void
ble_gattc_rx_read_mult_rsp(uint16_t conn_handle, int status,
                           struct os_mbuf **om)
{
   24ede:	b570      	push	{r4, r5, r6, lr}
   24ee0:	460c      	mov	r4, r1
   24ee2:	4615      	mov	r5, r2
    return;
#endif

    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   24ee4:	210a      	movs	r1, #10
   24ee6:	f7fe fc0b 	bl	23700 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_READ_MULT);
    if (proc != NULL) {
   24eea:	b148      	cbz	r0, 24f00 <ble_gattc_rx_read_mult_rsp+0x22>
   24eec:	4606      	mov	r6, r0
        ble_gattc_read_mult_cb(proc, status, 0, om);
   24eee:	462b      	mov	r3, r5
   24ef0:	2200      	movs	r2, #0
   24ef2:	4621      	mov	r1, r4
   24ef4:	f7fe fac8 	bl	23488 <ble_gattc_read_mult_cb>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   24ef8:	210e      	movs	r1, #14
   24efa:	4630      	mov	r0, r6
   24efc:	f7fe ff58 	bl	23db0 <ble_gattc_process_status>
    }
}
   24f00:	bd70      	pop	{r4, r5, r6, pc}

00024f02 <ble_gattc_rx_write_rsp>:
 * Dispatches an incoming ATT write-response to the appropriate active GATT
 * procedure.
 */
void
ble_gattc_rx_write_rsp(uint16_t conn_handle)
{
   24f02:	b510      	push	{r4, lr}
    return;
#endif

    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   24f04:	210b      	movs	r1, #11
   24f06:	f7fe fbfb 	bl	23700 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_WRITE);
    if (proc != NULL) {
   24f0a:	b140      	cbz	r0, 24f1e <ble_gattc_rx_write_rsp+0x1c>
   24f0c:	4604      	mov	r4, r0
        ble_gattc_write_cb(proc, 0, 0);
   24f0e:	2200      	movs	r2, #0
   24f10:	4611      	mov	r1, r2
   24f12:	f7fe fc35 	bl	23780 <ble_gattc_write_cb>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   24f16:	210e      	movs	r1, #14
   24f18:	4620      	mov	r0, r4
   24f1a:	f7fe ff49 	bl	23db0 <ble_gattc_process_status>
    }
}
   24f1e:	bd10      	pop	{r4, pc}

00024f20 <ble_gattc_rx_prep_write_rsp>:
 */
void
ble_gattc_rx_prep_write_rsp(uint16_t conn_handle, int status,
                            uint16_t handle, uint16_t offset,
                            struct os_mbuf **om)
{
   24f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24f24:	b084      	sub	sp, #16
   24f26:	460f      	mov	r7, r1
   24f28:	4616      	mov	r6, r2
   24f2a:	461c      	mov	r4, r3

    const struct ble_gattc_rx_prep_entry *rx_entry;
    struct ble_gattc_proc *proc;
    int rc;

    proc = BLE_GATTC_RX_EXTRACT_RX_ENTRY(conn_handle,
   24f2c:	ab03      	add	r3, sp, #12
   24f2e:	2202      	movs	r2, #2
   24f30:	490a      	ldr	r1, [pc, #40]	; (24f5c <ble_gattc_rx_prep_write_rsp+0x3c>)
   24f32:	f7fe fbf9 	bl	23728 <ble_gattc_extract_with_rx_entry>
                                         ble_gattc_rx_prep_entries,
                                         &rx_entry);
    if (proc != NULL) {
   24f36:	b168      	cbz	r0, 24f54 <ble_gattc_rx_prep_write_rsp+0x34>
   24f38:	4605      	mov	r5, r0
        rc = rx_entry->cb(proc, status, handle, offset, om);
   24f3a:	9b03      	ldr	r3, [sp, #12]
   24f3c:	f8d3 8004 	ldr.w	r8, [r3, #4]
   24f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24f42:	9300      	str	r3, [sp, #0]
   24f44:	4623      	mov	r3, r4
   24f46:	4632      	mov	r2, r6
   24f48:	4639      	mov	r1, r7
   24f4a:	47c0      	blx	r8
   24f4c:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   24f4e:	4628      	mov	r0, r5
   24f50:	f7fe ff2e 	bl	23db0 <ble_gattc_process_status>
    }
}
   24f54:	b004      	add	sp, #16
   24f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24f5a:	bf00      	nop
   24f5c:	00034ba4 	.word	0x00034ba4

00024f60 <ble_gattc_rx_exec_write_rsp>:
 * Dispatches an incoming ATT execute-write-response to the appropriate active
 * GATT procedure.
 */
void
ble_gattc_rx_exec_write_rsp(uint16_t conn_handle, int status)
{
   24f60:	b530      	push	{r4, r5, lr}
   24f62:	b083      	sub	sp, #12
   24f64:	460c      	mov	r4, r1

    const struct ble_gattc_rx_exec_entry *rx_entry;
    struct ble_gattc_proc *proc;
    int rc;

    proc = BLE_GATTC_RX_EXTRACT_RX_ENTRY(conn_handle,
   24f66:	ab01      	add	r3, sp, #4
   24f68:	2202      	movs	r2, #2
   24f6a:	4907      	ldr	r1, [pc, #28]	; (24f88 <ble_gattc_rx_exec_write_rsp+0x28>)
   24f6c:	f7fe fbdc 	bl	23728 <ble_gattc_extract_with_rx_entry>
                                         ble_gattc_rx_exec_entries, &rx_entry);
    if (proc != NULL) {
   24f70:	b140      	cbz	r0, 24f84 <ble_gattc_rx_exec_write_rsp+0x24>
   24f72:	4605      	mov	r5, r0
        rc = rx_entry->cb(proc, status);
   24f74:	9b01      	ldr	r3, [sp, #4]
   24f76:	685b      	ldr	r3, [r3, #4]
   24f78:	4621      	mov	r1, r4
   24f7a:	4798      	blx	r3
   24f7c:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   24f7e:	4628      	mov	r0, r5
   24f80:	f7fe ff16 	bl	23db0 <ble_gattc_process_status>
    }
}
   24f84:	b003      	add	sp, #12
   24f86:	bd30      	pop	{r4, r5, pc}
   24f88:	00034b94 	.word	0x00034b94

00024f8c <ble_gattc_rx_indicate_rsp>:
 * Dispatches an incoming ATT handle-value-confirmation to the appropriate
 * active GATT procedure.
 */
void
ble_gattc_rx_indicate_rsp(uint16_t conn_handle)
{
   24f8c:	b510      	push	{r4, lr}
    return;
#endif

    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   24f8e:	210e      	movs	r1, #14
   24f90:	f7fe fbb6 	bl	23700 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_INDICATE);
    if (proc != NULL) {
   24f94:	b130      	cbz	r0, 24fa4 <ble_gattc_rx_indicate_rsp+0x18>
   24f96:	4604      	mov	r4, r0
        ble_gattc_indicate_rx_rsp(proc);
   24f98:	f7ff f928 	bl	241ec <ble_gattc_indicate_rx_rsp>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   24f9c:	210e      	movs	r1, #14
   24f9e:	4620      	mov	r0, r4
   24fa0:	f7fe ff06 	bl	23db0 <ble_gattc_process_status>
    }
}
   24fa4:	bd10      	pop	{r4, pc}

00024fa6 <ble_gattc_connection_broken>:
 * @param conn_handle           The handle of the connection that was
 *                                  terminated.
 */
void
ble_gattc_connection_broken(uint16_t conn_handle)
{
   24fa6:	b508      	push	{r3, lr}
    ble_gattc_fail_procs(conn_handle, BLE_GATT_OP_NONE, BLE_HS_ENOTCONN);
   24fa8:	2207      	movs	r2, #7
   24faa:	21ff      	movs	r1, #255	; 0xff
   24fac:	f7fe fc36 	bl	2381c <ble_gattc_fail_procs>
}
   24fb0:	bd08      	pop	{r3, pc}
	...

00024fb4 <ble_gattc_init>:
    return !STAILQ_EMPTY(&ble_gattc_procs);
}

int
ble_gattc_init(void)
{
   24fb4:	b500      	push	{lr}
   24fb6:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_gattc_procs);
   24fb8:	4b0e      	ldr	r3, [pc, #56]	; (24ff4 <ble_gattc_init+0x40>)
   24fba:	2200      	movs	r2, #0
   24fbc:	601a      	str	r2, [r3, #0]
   24fbe:	605b      	str	r3, [r3, #4]

    if (MYNEWT_VAL(BLE_GATT_MAX_PROCS) > 0) {
        rc = os_mempool_init(&ble_gattc_proc_pool,
   24fc0:	4b0d      	ldr	r3, [pc, #52]	; (24ff8 <ble_gattc_init+0x44>)
   24fc2:	9300      	str	r3, [sp, #0]
   24fc4:	4b0d      	ldr	r3, [pc, #52]	; (24ffc <ble_gattc_init+0x48>)
   24fc6:	2238      	movs	r2, #56	; 0x38
   24fc8:	2104      	movs	r1, #4
   24fca:	480d      	ldr	r0, [pc, #52]	; (25000 <ble_gattc_init+0x4c>)
   24fcc:	f7f4 ff1a 	bl	19e04 <os_mempool_init>
                             MYNEWT_VAL(BLE_GATT_MAX_PROCS),
                             sizeof (struct ble_gattc_proc),
                             ble_gattc_proc_mem,
                             "ble_gattc_proc_pool");
        if (rc != 0) {
   24fd0:	b110      	cbz	r0, 24fd8 <ble_gattc_init+0x24>
    if (rc != 0) {
        return BLE_HS_EOS;
    }

    return 0;
}
   24fd2:	b003      	add	sp, #12
   24fd4:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = stats_init_and_reg(
   24fd8:	4b0a      	ldr	r3, [pc, #40]	; (25004 <ble_gattc_init+0x50>)
   24fda:	9301      	str	r3, [sp, #4]
   24fdc:	2300      	movs	r3, #0
   24fde:	9300      	str	r3, [sp, #0]
   24fe0:	2223      	movs	r2, #35	; 0x23
   24fe2:	2104      	movs	r1, #4
   24fe4:	4808      	ldr	r0, [pc, #32]	; (25008 <ble_gattc_init+0x54>)
   24fe6:	f7f8 ff9d 	bl	1df24 <stats_init_and_reg>
    if (rc != 0) {
   24fea:	2800      	cmp	r0, #0
   24fec:	d0f1      	beq.n	24fd2 <ble_gattc_init+0x1e>
        return BLE_HS_EOS;
   24fee:	200b      	movs	r0, #11
   24ff0:	e7ef      	b.n	24fd2 <ble_gattc_init+0x1e>
   24ff2:	bf00      	nop
   24ff4:	10005bf8 	.word	0x10005bf8
   24ff8:	00034afc 	.word	0x00034afc
   24ffc:	10005afc 	.word	0x10005afc
   25000:	10005bdc 	.word	0x10005bdc
   25004:	00034b10 	.word	0x00034b10
   25008:	10005c04 	.word	0x10005c04

0002500c <ble_gatts_chr_clt_cfg_allowed>:
ble_gatts_chr_clt_cfg_allowed(const struct ble_gatt_chr_def *chr)
{
    uint16_t flags;

    flags = 0;
    if (chr->flags & BLE_GATT_CHR_F_NOTIFY) {
   2500c:	8a03      	ldrh	r3, [r0, #16]
   2500e:	f013 0010 	ands.w	r0, r3, #16
   25012:	d000      	beq.n	25016 <ble_gatts_chr_clt_cfg_allowed+0xa>
        flags |= BLE_GATTS_CLT_CFG_F_NOTIFY;
   25014:	2001      	movs	r0, #1
    }
    if (chr->flags & BLE_GATT_CHR_F_INDICATE) {
   25016:	f013 0f20 	tst.w	r3, #32
   2501a:	d001      	beq.n	25020 <ble_gatts_chr_clt_cfg_allowed+0x14>
        flags |= BLE_GATTS_CLT_CFG_F_INDICATE;
   2501c:	f040 0002 	orr.w	r0, r0, #2
    }

    return flags;
}
   25020:	4770      	bx	lr

00025022 <ble_gatts_att_flags_from_chr_flags>:

static uint8_t
ble_gatts_att_flags_from_chr_flags(ble_gatt_chr_flags chr_flags)
{
   25022:	4603      	mov	r3, r0
    uint8_t att_flags;

    att_flags = 0;
    if (chr_flags & BLE_GATT_CHR_F_READ) {
   25024:	f010 0f02 	tst.w	r0, #2
   25028:	d124      	bne.n	25074 <ble_gatts_att_flags_from_chr_flags+0x52>
    att_flags = 0;
   2502a:	2000      	movs	r0, #0
        att_flags |= BLE_ATT_F_READ;
    }
    if (chr_flags & (BLE_GATT_CHR_F_WRITE_NO_RSP | BLE_GATT_CHR_F_WRITE)) {
   2502c:	f013 0f0c 	tst.w	r3, #12
   25030:	d001      	beq.n	25036 <ble_gatts_att_flags_from_chr_flags+0x14>
        att_flags |= BLE_ATT_F_WRITE;
   25032:	f040 0002 	orr.w	r0, r0, #2
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_ENC) {
   25036:	f413 7f00 	tst.w	r3, #512	; 0x200
   2503a:	d001      	beq.n	25040 <ble_gatts_att_flags_from_chr_flags+0x1e>
        att_flags |= BLE_ATT_F_READ_ENC;
   2503c:	f040 0004 	orr.w	r0, r0, #4
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_AUTHEN) {
   25040:	f413 6f80 	tst.w	r3, #1024	; 0x400
   25044:	d001      	beq.n	2504a <ble_gatts_att_flags_from_chr_flags+0x28>
        att_flags |= BLE_ATT_F_READ_AUTHEN;
   25046:	f040 0008 	orr.w	r0, r0, #8
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_AUTHOR) {
   2504a:	f413 6f00 	tst.w	r3, #2048	; 0x800
   2504e:	d001      	beq.n	25054 <ble_gatts_att_flags_from_chr_flags+0x32>
        att_flags |= BLE_ATT_F_READ_AUTHOR;
   25050:	f040 0010 	orr.w	r0, r0, #16
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_ENC) {
   25054:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   25058:	d001      	beq.n	2505e <ble_gatts_att_flags_from_chr_flags+0x3c>
        att_flags |= BLE_ATT_F_WRITE_ENC;
   2505a:	f040 0020 	orr.w	r0, r0, #32
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_AUTHEN) {
   2505e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   25062:	d001      	beq.n	25068 <ble_gatts_att_flags_from_chr_flags+0x46>
        att_flags |= BLE_ATT_F_WRITE_AUTHEN;
   25064:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_AUTHOR) {
   25068:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   2506c:	d001      	beq.n	25072 <ble_gatts_att_flags_from_chr_flags+0x50>
        att_flags |= BLE_ATT_F_WRITE_AUTHOR;
   2506e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    }

    return att_flags;
}
   25072:	4770      	bx	lr
        att_flags |= BLE_ATT_F_READ;
   25074:	2001      	movs	r0, #1
   25076:	e7d9      	b.n	2502c <ble_gatts_att_flags_from_chr_flags+0xa>

00025078 <ble_gatts_chr_properties>:
{
    uint8_t properties;

    properties = 0;

    if (chr->flags & BLE_GATT_CHR_F_BROADCAST) {
   25078:	8a03      	ldrh	r3, [r0, #16]
   2507a:	f013 0f01 	tst.w	r3, #1
   2507e:	d124      	bne.n	250ca <ble_gatts_chr_properties+0x52>
    properties = 0;
   25080:	2000      	movs	r0, #0
        properties |= BLE_GATT_CHR_PROP_BROADCAST;
    }
    if (chr->flags & BLE_GATT_CHR_F_READ) {
   25082:	f013 0f02 	tst.w	r3, #2
   25086:	d001      	beq.n	2508c <ble_gatts_chr_properties+0x14>
        properties |= BLE_GATT_CHR_PROP_READ;
   25088:	f040 0002 	orr.w	r0, r0, #2
    }
    if (chr->flags & BLE_GATT_CHR_F_WRITE_NO_RSP) {
   2508c:	f013 0f04 	tst.w	r3, #4
   25090:	d001      	beq.n	25096 <ble_gatts_chr_properties+0x1e>
        properties |= BLE_GATT_CHR_PROP_WRITE_NO_RSP;
   25092:	f040 0004 	orr.w	r0, r0, #4
    }
    if (chr->flags & BLE_GATT_CHR_F_WRITE) {
   25096:	f013 0f08 	tst.w	r3, #8
   2509a:	d001      	beq.n	250a0 <ble_gatts_chr_properties+0x28>
        properties |= BLE_GATT_CHR_PROP_WRITE;
   2509c:	f040 0008 	orr.w	r0, r0, #8
    }
    if (chr->flags & BLE_GATT_CHR_F_NOTIFY) {
   250a0:	f013 0f10 	tst.w	r3, #16
   250a4:	d001      	beq.n	250aa <ble_gatts_chr_properties+0x32>
        properties |= BLE_GATT_CHR_PROP_NOTIFY;
   250a6:	f040 0010 	orr.w	r0, r0, #16
    }
    if (chr->flags & BLE_GATT_CHR_F_INDICATE) {
   250aa:	f013 0f20 	tst.w	r3, #32
   250ae:	d001      	beq.n	250b4 <ble_gatts_chr_properties+0x3c>
        properties |= BLE_GATT_CHR_PROP_INDICATE;
   250b0:	f040 0020 	orr.w	r0, r0, #32
    }
    if (chr->flags & BLE_GATT_CHR_F_AUTH_SIGN_WRITE) {
   250b4:	f013 0f40 	tst.w	r3, #64	; 0x40
   250b8:	d001      	beq.n	250be <ble_gatts_chr_properties+0x46>
        properties |= BLE_GATT_CHR_PROP_AUTH_SIGN_WRITE;
   250ba:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    }
    if (chr->flags &
   250be:	f413 7fc0 	tst.w	r3, #384	; 0x180
   250c2:	d001      	beq.n	250c8 <ble_gatts_chr_properties+0x50>
        (BLE_GATT_CHR_F_RELIABLE_WRITE | BLE_GATT_CHR_F_AUX_WRITE)) {

        properties |= BLE_GATT_CHR_PROP_EXTENDED;
   250c4:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    }

    return properties;
}
   250c8:	4770      	bx	lr
        properties |= BLE_GATT_CHR_PROP_BROADCAST;
   250ca:	2001      	movs	r0, #1
   250cc:	e7d9      	b.n	25082 <ble_gatts_chr_properties+0xa>

000250ce <ble_gatts_chr_is_sane>:
}

static int
ble_gatts_chr_is_sane(const struct ble_gatt_chr_def *chr)
{
    if (chr->uuid == NULL) {
   250ce:	6803      	ldr	r3, [r0, #0]
   250d0:	b11b      	cbz	r3, 250da <ble_gatts_chr_is_sane+0xc>
        return 0;
    }

    if (chr->access_cb == NULL) {
   250d2:	6843      	ldr	r3, [r0, #4]
   250d4:	b11b      	cbz	r3, 250de <ble_gatts_chr_is_sane+0x10>
        return 0;
    }

    /* XXX: Check properties. */

    return 1;
   250d6:	2001      	movs	r0, #1
   250d8:	4770      	bx	lr
        return 0;
   250da:	2000      	movs	r0, #0
   250dc:	4770      	bx	lr
        return 0;
   250de:	2000      	movs	r0, #0
}
   250e0:	4770      	bx	lr

000250e2 <ble_gatts_chr_op>:

static uint8_t
ble_gatts_chr_op(uint8_t att_op)
{
    switch (att_op) {
   250e2:	2802      	cmp	r0, #2
   250e4:	d001      	beq.n	250ea <ble_gatts_chr_op+0x8>
    case BLE_ATT_ACCESS_OP_READ:
        return BLE_GATT_ACCESS_OP_READ_CHR;
   250e6:	2000      	movs	r0, #0
   250e8:	4770      	bx	lr

    case BLE_ATT_ACCESS_OP_WRITE:
        return BLE_GATT_ACCESS_OP_WRITE_CHR;
   250ea:	2001      	movs	r0, #1

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_GATT_ACCESS_OP_READ_CHR;
    }
}
   250ec:	4770      	bx	lr
	...

000250f0 <ble_gatts_chr_inc_val_stat>:

static void
ble_gatts_chr_inc_val_stat(uint8_t gatt_op)
{
    switch (gatt_op) {
   250f0:	b110      	cbz	r0, 250f8 <ble_gatts_chr_inc_val_stat+0x8>
   250f2:	2801      	cmp	r0, #1
   250f4:	d005      	beq.n	25102 <ble_gatts_chr_inc_val_stat+0x12>
   250f6:	4770      	bx	lr
    case BLE_GATT_ACCESS_OP_READ_CHR:
        STATS_INC(ble_gatts_stats, chr_val_reads);
   250f8:	4a04      	ldr	r2, [pc, #16]	; (2510c <ble_gatts_chr_inc_val_stat+0x1c>)
   250fa:	6a53      	ldr	r3, [r2, #36]	; 0x24
   250fc:	3301      	adds	r3, #1
   250fe:	6253      	str	r3, [r2, #36]	; 0x24
        break;
   25100:	4770      	bx	lr

    case BLE_GATT_ACCESS_OP_WRITE_CHR:
        STATS_INC(ble_gatts_stats, chr_val_writes);
   25102:	4a02      	ldr	r2, [pc, #8]	; (2510c <ble_gatts_chr_inc_val_stat+0x1c>)
   25104:	6a93      	ldr	r3, [r2, #40]	; 0x28
   25106:	3301      	adds	r3, #1
   25108:	6293      	str	r3, [r2, #40]	; 0x28
        break;

    default:
        break;
    }
}
   2510a:	4770      	bx	lr
   2510c:	10005cd0 	.word	0x10005cd0

00025110 <ble_gatts_find_svc_entry_idx>:
    return rc;
}

static int
ble_gatts_find_svc_entry_idx(const struct ble_gatt_svc_def *svc)
{
   25110:	4602      	mov	r2, r0
    int i;

    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   25112:	2000      	movs	r0, #0
   25114:	4b07      	ldr	r3, [pc, #28]	; (25134 <ble_gatts_find_svc_entry_idx+0x24>)
   25116:	881b      	ldrh	r3, [r3, #0]
   25118:	4283      	cmp	r3, r0
   2511a:	dd07      	ble.n	2512c <ble_gatts_find_svc_entry_idx+0x1c>
        if (ble_gatts_svc_entries[i].svc == svc) {
   2511c:	4b06      	ldr	r3, [pc, #24]	; (25138 <ble_gatts_find_svc_entry_idx+0x28>)
   2511e:	681b      	ldr	r3, [r3, #0]
   25120:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   25124:	4293      	cmp	r3, r2
   25126:	d003      	beq.n	25130 <ble_gatts_find_svc_entry_idx+0x20>
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   25128:	3001      	adds	r0, #1
   2512a:	e7f3      	b.n	25114 <ble_gatts_find_svc_entry_idx+0x4>
            return i;
        }
    }

    return -1;
   2512c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   25130:	4770      	bx	lr
   25132:	bf00      	nop
   25134:	10005ccc 	.word	0x10005ccc
   25138:	10005d08 	.word	0x10005d08

0002513c <ble_gatts_svc_incs_satisfied>:

static int
ble_gatts_svc_incs_satisfied(const struct ble_gatt_svc_def *svc)
{
   2513c:	b538      	push	{r3, r4, r5, lr}
    int idx;
    int i;

    if (svc->includes == NULL) {
   2513e:	6885      	ldr	r5, [r0, #8]
   25140:	b1ad      	cbz	r5, 2516e <ble_gatts_svc_incs_satisfied+0x32>
        /* No included services. */
        return 1;
    }

    for (i = 0; svc->includes[i] != NULL; i++) {
   25142:	2400      	movs	r4, #0
   25144:	e000      	b.n	25148 <ble_gatts_svc_incs_satisfied+0xc>
   25146:	3401      	adds	r4, #1
   25148:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   2514c:	b168      	cbz	r0, 2516a <ble_gatts_svc_incs_satisfied+0x2e>
        idx = ble_gatts_find_svc_entry_idx(svc->includes[i]);
   2514e:	f7ff ffdf 	bl	25110 <ble_gatts_find_svc_entry_idx>
        if (idx == -1 || ble_gatts_svc_entries[idx].handle == 0) {
   25152:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   25156:	d00c      	beq.n	25172 <ble_gatts_svc_incs_satisfied+0x36>
   25158:	4b07      	ldr	r3, [pc, #28]	; (25178 <ble_gatts_svc_incs_satisfied+0x3c>)
   2515a:	681b      	ldr	r3, [r3, #0]
   2515c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   25160:	8883      	ldrh	r3, [r0, #4]
   25162:	2b00      	cmp	r3, #0
   25164:	d1ef      	bne.n	25146 <ble_gatts_svc_incs_satisfied+0xa>
            return 0;
   25166:	2000      	movs	r0, #0
   25168:	e000      	b.n	2516c <ble_gatts_svc_incs_satisfied+0x30>
        }
    }

    return 1;
   2516a:	2001      	movs	r0, #1
}
   2516c:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
   2516e:	2001      	movs	r0, #1
   25170:	e7fc      	b.n	2516c <ble_gatts_svc_incs_satisfied+0x30>
            return 0;
   25172:	2000      	movs	r0, #0
   25174:	e7fa      	b.n	2516c <ble_gatts_svc_incs_satisfied+0x30>
   25176:	bf00      	nop
   25178:	10005d08 	.word	0x10005d08

0002517c <ble_gatts_dsc_op>:
}

static uint8_t
ble_gatts_dsc_op(uint8_t att_op)
{
    switch (att_op) {
   2517c:	2802      	cmp	r0, #2
   2517e:	d001      	beq.n	25184 <ble_gatts_dsc_op+0x8>
    case BLE_ATT_ACCESS_OP_READ:
        return BLE_GATT_ACCESS_OP_READ_DSC;
   25180:	2002      	movs	r0, #2
   25182:	4770      	bx	lr

    case BLE_ATT_ACCESS_OP_WRITE:
        return BLE_GATT_ACCESS_OP_WRITE_DSC;
   25184:	2003      	movs	r0, #3

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_GATT_ACCESS_OP_READ_DSC;
    }
}
   25186:	4770      	bx	lr

00025188 <ble_gatts_dsc_inc_stat>:

static void
ble_gatts_dsc_inc_stat(uint8_t gatt_op)
{
    switch (gatt_op) {
   25188:	2802      	cmp	r0, #2
   2518a:	d002      	beq.n	25192 <ble_gatts_dsc_inc_stat+0xa>
   2518c:	2803      	cmp	r0, #3
   2518e:	d005      	beq.n	2519c <ble_gatts_dsc_inc_stat+0x14>
   25190:	4770      	bx	lr
    case BLE_GATT_ACCESS_OP_READ_DSC:
        STATS_INC(ble_gatts_stats, dsc_reads);
   25192:	4a05      	ldr	r2, [pc, #20]	; (251a8 <ble_gatts_dsc_inc_stat+0x20>)
   25194:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   25196:	3301      	adds	r3, #1
   25198:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
   2519a:	4770      	bx	lr

    case BLE_GATT_ACCESS_OP_WRITE_DSC:
        STATS_INC(ble_gatts_stats, dsc_writes);
   2519c:	4a02      	ldr	r2, [pc, #8]	; (251a8 <ble_gatts_dsc_inc_stat+0x20>)
   2519e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   251a0:	3301      	adds	r3, #1
   251a2:	6313      	str	r3, [r2, #48]	; 0x30
        break;

    default:
        break;
    }
}
   251a4:	4770      	bx	lr
   251a6:	bf00      	nop
   251a8:	10005cd0 	.word	0x10005cd0

000251ac <ble_gatts_dsc_is_sane>:
}

static int
ble_gatts_dsc_is_sane(const struct ble_gatt_dsc_def *dsc)
{
    if (dsc->uuid == NULL) {
   251ac:	6803      	ldr	r3, [r0, #0]
   251ae:	b11b      	cbz	r3, 251b8 <ble_gatts_dsc_is_sane+0xc>
        return 0;
    }

    if (dsc->access_cb == NULL) {
   251b0:	6883      	ldr	r3, [r0, #8]
   251b2:	b11b      	cbz	r3, 251bc <ble_gatts_dsc_is_sane+0x10>
        return 0;
    }

    return 1;
   251b4:	2001      	movs	r0, #1
   251b6:	4770      	bx	lr
        return 0;
   251b8:	2000      	movs	r0, #0
   251ba:	4770      	bx	lr
        return 0;
   251bc:	2000      	movs	r0, #0
}
   251be:	4770      	bx	lr

000251c0 <ble_gatts_clt_cfg_find_idx>:
}

static int
ble_gatts_clt_cfg_find_idx(struct ble_gatts_clt_cfg *cfgs,
                           uint16_t chr_val_handle)
{
   251c0:	4602      	mov	r2, r0
    struct ble_gatts_clt_cfg *cfg;
    int i;

    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   251c2:	2000      	movs	r0, #0
   251c4:	4b06      	ldr	r3, [pc, #24]	; (251e0 <ble_gatts_clt_cfg_find_idx+0x20>)
   251c6:	681b      	ldr	r3, [r3, #0]
   251c8:	4283      	cmp	r3, r0
   251ca:	dd05      	ble.n	251d8 <ble_gatts_clt_cfg_find_idx+0x18>
        cfg = cfgs + i;
        if (cfg->chr_val_handle == chr_val_handle) {
   251cc:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
   251d0:	428b      	cmp	r3, r1
   251d2:	d003      	beq.n	251dc <ble_gatts_clt_cfg_find_idx+0x1c>
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   251d4:	3001      	adds	r0, #1
   251d6:	e7f5      	b.n	251c4 <ble_gatts_clt_cfg_find_idx+0x4>
            return i;
        }
    }

    return -1;
   251d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   251dc:	4770      	bx	lr
   251de:	bf00      	nop
   251e0:	10005cc4 	.word	0x10005cc4

000251e4 <ble_gatts_clt_cfg_find>:

static struct ble_gatts_clt_cfg *
ble_gatts_clt_cfg_find(struct ble_gatts_clt_cfg *cfgs,
                       uint16_t chr_val_handle)
{
   251e4:	b510      	push	{r4, lr}
   251e6:	4604      	mov	r4, r0
    int idx;

    idx = ble_gatts_clt_cfg_find_idx(cfgs, chr_val_handle);
   251e8:	f7ff ffea 	bl	251c0 <ble_gatts_clt_cfg_find_idx>
    if (idx == -1) {
   251ec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   251f0:	d002      	beq.n	251f8 <ble_gatts_clt_cfg_find+0x14>
        return NULL;
    } else {
        return cfgs + idx;
   251f2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    }
}
   251f6:	bd10      	pop	{r4, pc}
        return NULL;
   251f8:	2000      	movs	r0, #0
   251fa:	e7fc      	b.n	251f6 <ble_gatts_clt_cfg_find+0x12>

000251fc <ble_gatts_svc_type_to_uuid>:
}

static int
ble_gatts_svc_type_to_uuid(uint8_t svc_type, const ble_uuid_t **uuid)
{
    switch (svc_type) {
   251fc:	2801      	cmp	r0, #1
   251fe:	d003      	beq.n	25208 <ble_gatts_svc_type_to_uuid+0xc>
   25200:	2802      	cmp	r0, #2
   25202:	d005      	beq.n	25210 <ble_gatts_svc_type_to_uuid+0x14>
   25204:	2003      	movs	r0, #3
   25206:	4770      	bx	lr
    case BLE_GATT_SVC_TYPE_PRIMARY:
        *uuid = uuid_pri;
   25208:	4b03      	ldr	r3, [pc, #12]	; (25218 <ble_gatts_svc_type_to_uuid+0x1c>)
   2520a:	600b      	str	r3, [r1, #0]
        return 0;
   2520c:	2000      	movs	r0, #0
   2520e:	4770      	bx	lr

    case BLE_GATT_SVC_TYPE_SECONDARY:
        *uuid = uuid_sec;
   25210:	4b02      	ldr	r3, [pc, #8]	; (2521c <ble_gatts_svc_type_to_uuid+0x20>)
   25212:	600b      	str	r3, [r1, #0]
        return 0;
   25214:	2000      	movs	r0, #0

    default:
        return BLE_HS_EINVAL;
    }
}
   25216:	4770      	bx	lr
   25218:	100006bc 	.word	0x100006bc
   2521c:	100006c0 	.word	0x100006c0

00025220 <ble_gatts_svc_is_sane>:

static int
ble_gatts_svc_is_sane(const struct ble_gatt_svc_def *svc)
{
    if (svc->type != BLE_GATT_SVC_TYPE_PRIMARY &&
   25220:	7803      	ldrb	r3, [r0, #0]
   25222:	3b01      	subs	r3, #1
   25224:	b2db      	uxtb	r3, r3
   25226:	2b01      	cmp	r3, #1
   25228:	d803      	bhi.n	25232 <ble_gatts_svc_is_sane+0x12>
        svc->type != BLE_GATT_SVC_TYPE_SECONDARY) {

        return 0;
    }

    if (svc->uuid == NULL) {
   2522a:	6843      	ldr	r3, [r0, #4]
   2522c:	b11b      	cbz	r3, 25236 <ble_gatts_svc_is_sane+0x16>
        return 0;
    }

    return 1;
   2522e:	2001      	movs	r0, #1
   25230:	4770      	bx	lr
        return 0;
   25232:	2000      	movs	r0, #0
   25234:	4770      	bx	lr
        return 0;
   25236:	2000      	movs	r0, #0
}
   25238:	4770      	bx	lr
	...

0002523c <ble_gatts_clt_cfg_size>:
}

static int
ble_gatts_clt_cfg_size(void)
{
    return ble_gatts_num_cfgable_chrs * sizeof (struct ble_gatts_clt_cfg);
   2523c:	4b01      	ldr	r3, [pc, #4]	; (25244 <ble_gatts_clt_cfg_size+0x8>)
   2523e:	6818      	ldr	r0, [r3, #0]
}
   25240:	0080      	lsls	r0, r0, #2
   25242:	4770      	bx	lr
   25244:	10005cc4 	.word	0x10005cc4

00025248 <ble_gatts_schedule_update>:
 *                                  if any.  0 if nothing should get sent.
 */
static uint8_t
ble_gatts_schedule_update(struct ble_hs_conn *conn,
                          struct ble_gatts_clt_cfg *clt_cfg)
{
   25248:	4603      	mov	r3, r0
    uint8_t att_op;

    if (!(clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED)) {
   2524a:	788a      	ldrb	r2, [r1, #2]
   2524c:	f991 0002 	ldrsb.w	r0, [r1, #2]
   25250:	2800      	cmp	r0, #0
   25252:	db01      	blt.n	25258 <ble_gatts_schedule_update+0x10>
        /* Characteristic not modified.  Nothing to send. */
        att_op = 0;
   25254:	2000      	movs	r0, #0
    if (att_op != 0) {
        clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
    }

    return att_op;
}
   25256:	4770      	bx	lr
{
   25258:	b410      	push	{r4}
    } else if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_NOTIFY) {
   2525a:	f012 0401 	ands.w	r4, r2, #1
   2525e:	d107      	bne.n	25270 <ble_gatts_schedule_update+0x28>
    } else if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_INDICATE) {
   25260:	f012 0002 	ands.w	r0, r2, #2
   25264:	d008      	beq.n	25278 <ble_gatts_schedule_update+0x30>
        if (conn->bhc_gatt_svr.indicate_val_handle != 0) {
   25266:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
   2526a:	b93b      	cbnz	r3, 2527c <ble_gatts_schedule_update+0x34>
            att_op = BLE_ATT_OP_INDICATE_REQ;
   2526c:	201d      	movs	r0, #29
   2526e:	e000      	b.n	25272 <ble_gatts_schedule_update+0x2a>
        att_op = BLE_ATT_OP_NOTIFY_REQ;
   25270:	201b      	movs	r0, #27
        clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
   25272:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   25276:	708a      	strb	r2, [r1, #2]
}
   25278:	bc10      	pop	{r4}
   2527a:	4770      	bx	lr
            att_op = 0;
   2527c:	4620      	mov	r0, r4
   2527e:	e7fb      	b.n	25278 <ble_gatts_schedule_update+0x30>

00025280 <ble_gatts_count_resources>:
 *                                  invalid resource definition.
 */
static int
ble_gatts_count_resources(const struct ble_gatt_svc_def *svcs,
                          struct ble_gatt_resources *res)
{
   25280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25284:	4682      	mov	sl, r0
   25286:	460c      	mov	r4, r1
    int s;
    int i;
    int c;
    int d;

    for (s = 0; svcs[s].type != BLE_GATT_SVC_TYPE_END; s++) {
   25288:	f04f 0900 	mov.w	r9, #0
   2528c:	e049      	b.n	25322 <ble_gatts_count_resources+0xa2>
            for (i = 0; svc->includes[i] != NULL; i++) {
                /* Each include requires:
                 *     o 1 include
                 *     o 1 attribute
                 */
                res->incs++;
   2528e:	8863      	ldrh	r3, [r4, #2]
   25290:	3301      	adds	r3, #1
   25292:	8063      	strh	r3, [r4, #2]
                res->attrs++;
   25294:	8963      	ldrh	r3, [r4, #10]
   25296:	3301      	adds	r3, #1
   25298:	8163      	strh	r3, [r4, #10]
            for (i = 0; svc->includes[i] != NULL; i++) {
   2529a:	3201      	adds	r2, #1
   2529c:	68bb      	ldr	r3, [r7, #8]
   2529e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   252a2:	2b00      	cmp	r3, #0
   252a4:	d1f3      	bne.n	2528e <ble_gatts_count_resources+0xe>
   252a6:	e050      	b.n	2534a <ble_gatts_count_resources+0xca>
   252a8:	2200      	movs	r2, #0
   252aa:	e7f7      	b.n	2529c <ble_gatts_count_resources+0x1c>
                    res->dscs++;
                    res->cccds++;
                    res->attrs++;
                }

                if (chr->descriptors != NULL) {
   252ac:	68f3      	ldr	r3, [r6, #12]
   252ae:	bb1b      	cbnz	r3, 252f8 <ble_gatts_count_resources+0x78>
            for (c = 0; svc->characteristics[c].uuid != NULL; c++) {
   252b0:	f108 0801 	add.w	r8, r8, #1
   252b4:	68fb      	ldr	r3, [r7, #12]
   252b6:	eb08 0248 	add.w	r2, r8, r8, lsl #1
   252ba:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
   252be:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   252c2:	2b00      	cmp	r3, #0
   252c4:	d02b      	beq.n	2531e <ble_gatts_count_resources+0x9e>
                if (!ble_gatts_chr_is_sane(chr)) {
   252c6:	4630      	mov	r0, r6
   252c8:	f7ff ff01 	bl	250ce <ble_gatts_chr_is_sane>
   252cc:	2800      	cmp	r0, #0
   252ce:	d046      	beq.n	2535e <ble_gatts_count_resources+0xde>
                res->chrs++;
   252d0:	88a3      	ldrh	r3, [r4, #4]
   252d2:	3301      	adds	r3, #1
   252d4:	80a3      	strh	r3, [r4, #4]
                res->attrs += 2;
   252d6:	8963      	ldrh	r3, [r4, #10]
   252d8:	3302      	adds	r3, #2
   252da:	b29b      	uxth	r3, r3
   252dc:	8163      	strh	r3, [r4, #10]
                if (chr->flags & BLE_GATT_CHR_F_NOTIFY ||
   252de:	8a32      	ldrh	r2, [r6, #16]
   252e0:	f012 0f30 	tst.w	r2, #48	; 0x30
   252e4:	d0e2      	beq.n	252ac <ble_gatts_count_resources+0x2c>
                    res->dscs++;
   252e6:	88e2      	ldrh	r2, [r4, #6]
   252e8:	3201      	adds	r2, #1
   252ea:	80e2      	strh	r2, [r4, #6]
                    res->cccds++;
   252ec:	8922      	ldrh	r2, [r4, #8]
   252ee:	3201      	adds	r2, #1
   252f0:	8122      	strh	r2, [r4, #8]
                    res->attrs++;
   252f2:	3301      	adds	r3, #1
   252f4:	8163      	strh	r3, [r4, #10]
   252f6:	e7d9      	b.n	252ac <ble_gatts_count_resources+0x2c>
                    for (d = 0; chr->descriptors[d].uuid != NULL; d++) {
   252f8:	2500      	movs	r5, #0
   252fa:	68f2      	ldr	r2, [r6, #12]
   252fc:	012b      	lsls	r3, r5, #4
   252fe:	eb02 1005 	add.w	r0, r2, r5, lsl #4
   25302:	58d3      	ldr	r3, [r2, r3]
   25304:	2b00      	cmp	r3, #0
   25306:	d0d3      	beq.n	252b0 <ble_gatts_count_resources+0x30>
                        if (!ble_gatts_dsc_is_sane(chr->descriptors + d)) {
   25308:	f7ff ff50 	bl	251ac <ble_gatts_dsc_is_sane>
   2530c:	b348      	cbz	r0, 25362 <ble_gatts_count_resources+0xe2>

                        /* Each descriptor requires:
                         *     o 1 descriptor
                         *     o 1 attribute
                         */
                        res->dscs++;
   2530e:	88e3      	ldrh	r3, [r4, #6]
   25310:	3301      	adds	r3, #1
   25312:	80e3      	strh	r3, [r4, #6]
                        res->attrs++;
   25314:	8963      	ldrh	r3, [r4, #10]
   25316:	3301      	adds	r3, #1
   25318:	8163      	strh	r3, [r4, #10]
                    for (d = 0; chr->descriptors[d].uuid != NULL; d++) {
   2531a:	3501      	adds	r5, #1
   2531c:	e7ed      	b.n	252fa <ble_gatts_count_resources+0x7a>
    for (s = 0; svcs[s].type != BLE_GATT_SVC_TYPE_END; s++) {
   2531e:	f109 0901 	add.w	r9, r9, #1
   25322:	ea4f 1309 	mov.w	r3, r9, lsl #4
   25326:	eb0a 1709 	add.w	r7, sl, r9, lsl #4
   2532a:	f81a 3003 	ldrb.w	r3, [sl, r3]
   2532e:	b193      	cbz	r3, 25356 <ble_gatts_count_resources+0xd6>
        if (!ble_gatts_svc_is_sane(svc)) {
   25330:	4638      	mov	r0, r7
   25332:	f7ff ff75 	bl	25220 <ble_gatts_svc_is_sane>
   25336:	b180      	cbz	r0, 2535a <ble_gatts_count_resources+0xda>
        res->svcs++;
   25338:	8823      	ldrh	r3, [r4, #0]
   2533a:	3301      	adds	r3, #1
   2533c:	8023      	strh	r3, [r4, #0]
        res->attrs++;
   2533e:	8963      	ldrh	r3, [r4, #10]
   25340:	3301      	adds	r3, #1
   25342:	8163      	strh	r3, [r4, #10]
        if (svc->includes != NULL) {
   25344:	68bb      	ldr	r3, [r7, #8]
   25346:	2b00      	cmp	r3, #0
   25348:	d1ae      	bne.n	252a8 <ble_gatts_count_resources+0x28>
        if (svc->characteristics != NULL) {
   2534a:	68fb      	ldr	r3, [r7, #12]
   2534c:	2b00      	cmp	r3, #0
   2534e:	d0e6      	beq.n	2531e <ble_gatts_count_resources+0x9e>
            for (c = 0; svc->characteristics[c].uuid != NULL; c++) {
   25350:	f04f 0800 	mov.w	r8, #0
   25354:	e7ae      	b.n	252b4 <ble_gatts_count_resources+0x34>
                }
            }
        }
    }

    return 0;
   25356:	2000      	movs	r0, #0
   25358:	e004      	b.n	25364 <ble_gatts_count_resources+0xe4>
            return BLE_HS_EINVAL;
   2535a:	2003      	movs	r0, #3
   2535c:	e002      	b.n	25364 <ble_gatts_count_resources+0xe4>
                    return BLE_HS_EINVAL;
   2535e:	2003      	movs	r0, #3
   25360:	e000      	b.n	25364 <ble_gatts_count_resources+0xe4>
                            return BLE_HS_EINVAL;
   25362:	2003      	movs	r0, #3
}
   25364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00025368 <ble_gatts_clt_cfg_access_locked>:
{
   25368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2536c:	9e07      	ldr	r6, [sp, #28]
    out_cccd->chr_val_handle = 0;
   2536e:	2300      	movs	r3, #0
   25370:	8133      	strh	r3, [r6, #8]
    chr_val_handle = attr_handle - 1;
   25372:	1e4c      	subs	r4, r1, #1
   25374:	b2a4      	uxth	r4, r4
    if (chr_val_handle > attr_handle) {
   25376:	42a1      	cmp	r1, r4
   25378:	d366      	bcc.n	25448 <ble_gatts_clt_cfg_access_locked+0xe0>
   2537a:	4605      	mov	r5, r0
   2537c:	4617      	mov	r7, r2
    clt_cfg = ble_gatts_clt_cfg_find(conn->bhc_gatt_svr.clt_cfgs,
   2537e:	4621      	mov	r1, r4
   25380:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   25382:	f7ff ff2f 	bl	251e4 <ble_gatts_clt_cfg_find>
    if (clt_cfg == NULL) {
   25386:	4680      	mov	r8, r0
   25388:	2800      	cmp	r0, #0
   2538a:	d05f      	beq.n	2544c <ble_gatts_clt_cfg_access_locked+0xe4>
    *out_prev_clt_cfg_flags = clt_cfg->flags;
   2538c:	7883      	ldrb	r3, [r0, #2]
   2538e:	9a08      	ldr	r2, [sp, #32]
   25390:	7013      	strb	r3, [r2, #0]
    *out_cur_clt_cfg_flags = clt_cfg->flags;
   25392:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25394:	7013      	strb	r3, [r2, #0]
    gatt_op = ble_gatts_dsc_op(att_op);
   25396:	4638      	mov	r0, r7
   25398:	f7ff fef0 	bl	2517c <ble_gatts_dsc_op>
   2539c:	4607      	mov	r7, r0
    ble_gatts_dsc_inc_stat(gatt_op);
   2539e:	f7ff fef3 	bl	25188 <ble_gatts_dsc_inc_stat>
    switch (gatt_op) {
   253a2:	2f02      	cmp	r7, #2
   253a4:	d005      	beq.n	253b2 <ble_gatts_clt_cfg_access_locked+0x4a>
   253a6:	2f03      	cmp	r7, #3
   253a8:	d015      	beq.n	253d6 <ble_gatts_clt_cfg_access_locked+0x6e>
   253aa:	270e      	movs	r7, #14
}
   253ac:	4638      	mov	r0, r7
   253ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        STATS_INC(ble_gatts_stats, dsc_reads);
   253b2:	4a29      	ldr	r2, [pc, #164]	; (25458 <ble_gatts_clt_cfg_access_locked+0xf0>)
   253b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   253b6:	3301      	adds	r3, #1
   253b8:	62d3      	str	r3, [r2, #44]	; 0x2c
        buf = os_mbuf_extend(om, 2);
   253ba:	2102      	movs	r1, #2
   253bc:	9806      	ldr	r0, [sp, #24]
   253be:	f7f4 fba9 	bl	19b14 <os_mbuf_extend>
        if (buf == NULL) {
   253c2:	2800      	cmp	r0, #0
   253c4:	d044      	beq.n	25450 <ble_gatts_clt_cfg_access_locked+0xe8>
        put_le16(buf, clt_cfg->flags & ~BLE_GATTS_CLT_CFG_F_RESERVED);
   253c6:	f898 1002 	ldrb.w	r1, [r8, #2]
   253ca:	f001 0103 	and.w	r1, r1, #3
   253ce:	f7f3 fd17 	bl	18e00 <put_le16>
    return 0;
   253d2:	2700      	movs	r7, #0
        break;
   253d4:	e7ea      	b.n	253ac <ble_gatts_clt_cfg_access_locked+0x44>
        STATS_INC(ble_gatts_stats, dsc_writes);
   253d6:	4a20      	ldr	r2, [pc, #128]	; (25458 <ble_gatts_clt_cfg_access_locked+0xf0>)
   253d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   253da:	3301      	adds	r3, #1
   253dc:	6313      	str	r3, [r2, #48]	; 0x30
        if (OS_MBUF_PKTLEN(om) != 2) {
   253de:	9b06      	ldr	r3, [sp, #24]
   253e0:	8a1b      	ldrh	r3, [r3, #16]
   253e2:	2b02      	cmp	r3, #2
   253e4:	d001      	beq.n	253ea <ble_gatts_clt_cfg_access_locked+0x82>
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   253e6:	270d      	movs	r7, #13
   253e8:	e7e0      	b.n	253ac <ble_gatts_clt_cfg_access_locked+0x44>
        om = os_mbuf_pullup(om, 2);
   253ea:	2102      	movs	r1, #2
   253ec:	9806      	ldr	r0, [sp, #24]
   253ee:	f7f4 fbbf 	bl	19b70 <os_mbuf_pullup>
        flags = get_le16(om->om_data);
   253f2:	6800      	ldr	r0, [r0, #0]
   253f4:	f7f3 fd12 	bl	18e1c <get_le16>
        if ((flags & ~clt_cfg->allowed) != 0) {
   253f8:	f898 7003 	ldrb.w	r7, [r8, #3]
   253fc:	ea30 0707 	bics.w	r7, r0, r7
   25400:	d128      	bne.n	25454 <ble_gatts_clt_cfg_access_locked+0xec>
        if (clt_cfg->flags != flags) {
   25402:	f898 3002 	ldrb.w	r3, [r8, #2]
   25406:	4283      	cmp	r3, r0
   25408:	d0d0      	beq.n	253ac <ble_gatts_clt_cfg_access_locked+0x44>
            clt_cfg->flags = flags;
   2540a:	b2c0      	uxtb	r0, r0
   2540c:	f888 0002 	strb.w	r0, [r8, #2]
            *out_cur_clt_cfg_flags = flags;
   25410:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25412:	7018      	strb	r0, [r3, #0]
            if (conn->bhc_sec_state.bonded) {
   25414:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
   25418:	f013 0f04 	tst.w	r3, #4
   2541c:	d0c6      	beq.n	253ac <ble_gatts_clt_cfg_access_locked+0x44>
                out_cccd->peer_addr = conn->bhc_peer_addr;
   2541e:	462b      	mov	r3, r5
   25420:	f853 0f07 	ldr.w	r0, [r3, #7]!
   25424:	6030      	str	r0, [r6, #0]
   25426:	889a      	ldrh	r2, [r3, #4]
   25428:	799b      	ldrb	r3, [r3, #6]
   2542a:	80b2      	strh	r2, [r6, #4]
   2542c:	71b3      	strb	r3, [r6, #6]
                    ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   2542e:	79e8      	ldrb	r0, [r5, #7]
   25430:	f003 f905 	bl	2863e <ble_hs_misc_peer_addr_type_to_id>
                out_cccd->peer_addr.type =
   25434:	7030      	strb	r0, [r6, #0]
                out_cccd->chr_val_handle = chr_val_handle;
   25436:	8134      	strh	r4, [r6, #8]
                out_cccd->flags = clt_cfg->flags;
   25438:	f898 3002 	ldrb.w	r3, [r8, #2]
   2543c:	8173      	strh	r3, [r6, #10]
                out_cccd->value_changed = 0;
   2543e:	7b33      	ldrb	r3, [r6, #12]
   25440:	f36f 0300 	bfc	r3, #0, #1
   25444:	7333      	strb	r3, [r6, #12]
   25446:	e7b1      	b.n	253ac <ble_gatts_clt_cfg_access_locked+0x44>
        return BLE_ATT_ERR_UNLIKELY;
   25448:	270e      	movs	r7, #14
   2544a:	e7af      	b.n	253ac <ble_gatts_clt_cfg_access_locked+0x44>
        return BLE_ATT_ERR_UNLIKELY;
   2544c:	270e      	movs	r7, #14
   2544e:	e7ad      	b.n	253ac <ble_gatts_clt_cfg_access_locked+0x44>
            return BLE_ATT_ERR_INSUFFICIENT_RES;
   25450:	2711      	movs	r7, #17
   25452:	e7ab      	b.n	253ac <ble_gatts_clt_cfg_access_locked+0x44>
            return BLE_ATT_ERR_REQ_NOT_SUPPORTED;
   25454:	2706      	movs	r7, #6
   25456:	e7a9      	b.n	253ac <ble_gatts_clt_cfg_access_locked+0x44>
   25458:	10005cd0 	.word	0x10005cd0

0002545c <ble_gatts_subscribe_event>:
{
   2545c:	b530      	push	{r4, r5, lr}
   2545e:	b085      	sub	sp, #20
   25460:	f89d 4020 	ldrb.w	r4, [sp, #32]
    if ((prev_flags ^ cur_flags) & ~BLE_GATTS_CLT_CFG_F_RESERVED) {
   25464:	ea83 0504 	eor.w	r5, r3, r4
   25468:	f035 05fc 	bics.w	r5, r5, #252	; 0xfc
   2546c:	d101      	bne.n	25472 <ble_gatts_subscribe_event+0x16>
}
   2546e:	b005      	add	sp, #20
   25470:	bd30      	pop	{r4, r5, pc}
        ble_gap_subscribe_event(conn_handle,
   25472:	f004 0502 	and.w	r5, r4, #2
   25476:	9502      	str	r5, [sp, #8]
   25478:	f003 0502 	and.w	r5, r3, #2
   2547c:	9501      	str	r5, [sp, #4]
   2547e:	f004 0401 	and.w	r4, r4, #1
   25482:	9400      	str	r4, [sp, #0]
   25484:	f003 0301 	and.w	r3, r3, #1
   25488:	f7fd fc19 	bl	22cbe <ble_gap_subscribe_event>
}
   2548c:	e7ef      	b.n	2546e <ble_gatts_subscribe_event+0x12>

0002548e <ble_gatts_clt_cfg_access>:
{
   2548e:	b5f0      	push	{r4, r5, r6, r7, lr}
   25490:	b08d      	sub	sp, #52	; 0x34
   25492:	4606      	mov	r6, r0
   25494:	460d      	mov	r5, r1
   25496:	4617      	mov	r7, r2
   25498:	461c      	mov	r4, r3
    ble_hs_lock();
   2549a:	f001 f84d 	bl	26538 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   2549e:	4630      	mov	r0, r6
   254a0:	f002 f8ce 	bl	27640 <ble_hs_conn_find>
    if (conn == NULL) {
   254a4:	b1b0      	cbz	r0, 254d4 <ble_gatts_clt_cfg_access+0x46>
        rc = ble_gatts_clt_cfg_access_locked(conn, attr_handle, op, offset,
   254a6:	f10d 0312 	add.w	r3, sp, #18
   254aa:	9303      	str	r3, [sp, #12]
   254ac:	f10d 0313 	add.w	r3, sp, #19
   254b0:	9302      	str	r3, [sp, #8]
   254b2:	ab08      	add	r3, sp, #32
   254b4:	9301      	str	r3, [sp, #4]
   254b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   254b8:	681b      	ldr	r3, [r3, #0]
   254ba:	9300      	str	r3, [sp, #0]
   254bc:	4623      	mov	r3, r4
   254be:	463a      	mov	r2, r7
   254c0:	4629      	mov	r1, r5
   254c2:	f7ff ff51 	bl	25368 <ble_gatts_clt_cfg_access_locked>
   254c6:	4604      	mov	r4, r0
    ble_hs_unlock();
   254c8:	f001 f83a 	bl	26540 <ble_hs_unlock>
    if (rc != 0) {
   254cc:	b134      	cbz	r4, 254dc <ble_gatts_clt_cfg_access+0x4e>
}
   254ce:	4620      	mov	r0, r4
   254d0:	b00d      	add	sp, #52	; 0x34
   254d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ble_hs_unlock();
   254d4:	f001 f834 	bl	26540 <ble_hs_unlock>
        rc = BLE_ATT_ERR_UNLIKELY;
   254d8:	240e      	movs	r4, #14
   254da:	e7f8      	b.n	254ce <ble_gatts_clt_cfg_access+0x40>
    chr_val_handle = attr_handle - 1;
   254dc:	1e69      	subs	r1, r5, #1
    ble_gatts_subscribe_event(conn_handle, chr_val_handle,
   254de:	f89d 3012 	ldrb.w	r3, [sp, #18]
   254e2:	9300      	str	r3, [sp, #0]
   254e4:	f89d 3013 	ldrb.w	r3, [sp, #19]
   254e8:	2201      	movs	r2, #1
   254ea:	b289      	uxth	r1, r1
   254ec:	4630      	mov	r0, r6
   254ee:	f7ff ffb5 	bl	2545c <ble_gatts_subscribe_event>
    if (cccd_value.chr_val_handle != 0) {
   254f2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   254f6:	2b00      	cmp	r3, #0
   254f8:	d0e9      	beq.n	254ce <ble_gatts_clt_cfg_access+0x40>
        if (cccd_value.flags == 0) {
   254fa:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   254fe:	b943      	cbnz	r3, 25512 <ble_gatts_clt_cfg_access+0x84>
            ble_store_key_from_value_cccd(&cccd_key, &cccd_value);
   25500:	a908      	add	r1, sp, #32
   25502:	a805      	add	r0, sp, #20
   25504:	f004 f965 	bl	297d2 <ble_store_key_from_value_cccd>
            rc = ble_store_delete_cccd(&cccd_key);
   25508:	a805      	add	r0, sp, #20
   2550a:	f004 f95c 	bl	297c6 <ble_store_delete_cccd>
   2550e:	4604      	mov	r4, r0
   25510:	e7dd      	b.n	254ce <ble_gatts_clt_cfg_access+0x40>
            rc = ble_store_write_cccd(&cccd_value);
   25512:	a808      	add	r0, sp, #32
   25514:	f004 f951 	bl	297ba <ble_store_write_cccd>
   25518:	4604      	mov	r4, r0
   2551a:	e7d8      	b.n	254ce <ble_gatts_clt_cfg_access+0x40>

0002551c <ble_gatts_register_inc>:
{
   2551c:	b500      	push	{lr}
   2551e:	b085      	sub	sp, #20
    rc = ble_att_svr_register(uuid_inc, BLE_ATT_F_READ, 0, &handle,
   25520:	9001      	str	r0, [sp, #4]
   25522:	4b06      	ldr	r3, [pc, #24]	; (2553c <ble_gatts_register_inc+0x20>)
   25524:	9300      	str	r3, [sp, #0]
   25526:	f10d 030e 	add.w	r3, sp, #14
   2552a:	2200      	movs	r2, #0
   2552c:	2101      	movs	r1, #1
   2552e:	4804      	ldr	r0, [pc, #16]	; (25540 <ble_gatts_register_inc+0x24>)
   25530:	f7fa fe4c 	bl	201cc <ble_att_svr_register>
}
   25534:	b005      	add	sp, #20
   25536:	f85d fb04 	ldr.w	pc, [sp], #4
   2553a:	bf00      	nop
   2553c:	000258b5 	.word	0x000258b5
   25540:	100006c4 	.word	0x100006c4

00025544 <ble_gatts_register_clt_cfg_dsc>:
{
   25544:	b500      	push	{lr}
   25546:	b083      	sub	sp, #12
   25548:	4603      	mov	r3, r0
    rc = ble_att_svr_register(uuid_ccc, BLE_ATT_F_READ | BLE_ATT_F_WRITE, 0,
   2554a:	2200      	movs	r2, #0
   2554c:	9201      	str	r2, [sp, #4]
   2554e:	4907      	ldr	r1, [pc, #28]	; (2556c <ble_gatts_register_clt_cfg_dsc+0x28>)
   25550:	9100      	str	r1, [sp, #0]
   25552:	2103      	movs	r1, #3
   25554:	4806      	ldr	r0, [pc, #24]	; (25570 <ble_gatts_register_clt_cfg_dsc+0x2c>)
   25556:	f7fa fe39 	bl	201cc <ble_att_svr_register>
    if (rc != 0) {
   2555a:	b918      	cbnz	r0, 25564 <ble_gatts_register_clt_cfg_dsc+0x20>
    STATS_INC(ble_gatts_stats, dscs);
   2555c:	4a05      	ldr	r2, [pc, #20]	; (25574 <ble_gatts_register_clt_cfg_dsc+0x30>)
   2555e:	6953      	ldr	r3, [r2, #20]
   25560:	3301      	adds	r3, #1
   25562:	6153      	str	r3, [r2, #20]
}
   25564:	b003      	add	sp, #12
   25566:	f85d fb04 	ldr.w	pc, [sp], #4
   2556a:	bf00      	nop
   2556c:	0002548f 	.word	0x0002548f
   25570:	100006cc 	.word	0x100006cc
   25574:	10005cd0 	.word	0x10005cd0

00025578 <ble_gatts_register_dsc>:
{
   25578:	b5f0      	push	{r4, r5, r6, r7, lr}
   2557a:	b089      	sub	sp, #36	; 0x24
   2557c:	4606      	mov	r6, r0
   2557e:	460d      	mov	r5, r1
   25580:	4614      	mov	r4, r2
    if (!ble_gatts_dsc_is_sane(dsc)) {
   25582:	4610      	mov	r0, r2
   25584:	f7ff fe12 	bl	251ac <ble_gatts_dsc_is_sane>
   25588:	b310      	cbz	r0, 255d0 <ble_gatts_register_dsc+0x58>
    rc = ble_att_svr_register(dsc->uuid, dsc->att_flags, dsc->min_key_size,
   2558a:	9401      	str	r4, [sp, #4]
   2558c:	4b11      	ldr	r3, [pc, #68]	; (255d4 <ble_gatts_register_dsc+0x5c>)
   2558e:	9300      	str	r3, [sp, #0]
   25590:	f10d 030a 	add.w	r3, sp, #10
   25594:	7962      	ldrb	r2, [r4, #5]
   25596:	7921      	ldrb	r1, [r4, #4]
   25598:	6820      	ldr	r0, [r4, #0]
   2559a:	f7fa fe17 	bl	201cc <ble_att_svr_register>
    if (rc != 0) {
   2559e:	4607      	mov	r7, r0
   255a0:	b998      	cbnz	r0, 255ca <ble_gatts_register_dsc+0x52>
    if (register_cb != NULL) {
   255a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   255a4:	b16b      	cbz	r3, 255c2 <ble_gatts_register_dsc+0x4a>
        register_ctxt.op = BLE_GATT_REGISTER_OP_DSC;
   255a6:	2303      	movs	r3, #3
   255a8:	f88d 300c 	strb.w	r3, [sp, #12]
        register_ctxt.dsc.handle = dsc_handle;
   255ac:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   255b0:	f8ad 3010 	strh.w	r3, [sp, #16]
        register_ctxt.dsc.svc_def = svc;
   255b4:	9607      	str	r6, [sp, #28]
        register_ctxt.dsc.chr_def = chr;
   255b6:	9506      	str	r5, [sp, #24]
        register_ctxt.dsc.dsc_def = dsc;
   255b8:	9405      	str	r4, [sp, #20]
        register_cb(&register_ctxt, cb_arg);
   255ba:	990f      	ldr	r1, [sp, #60]	; 0x3c
   255bc:	a803      	add	r0, sp, #12
   255be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   255c0:	4798      	blx	r3
    STATS_INC(ble_gatts_stats, dscs);
   255c2:	4a05      	ldr	r2, [pc, #20]	; (255d8 <ble_gatts_register_dsc+0x60>)
   255c4:	6953      	ldr	r3, [r2, #20]
   255c6:	3301      	adds	r3, #1
   255c8:	6153      	str	r3, [r2, #20]
}
   255ca:	4638      	mov	r0, r7
   255cc:	b009      	add	sp, #36	; 0x24
   255ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EINVAL;
   255d0:	2703      	movs	r7, #3
   255d2:	e7fa      	b.n	255ca <ble_gatts_register_dsc+0x52>
   255d4:	000259e7 	.word	0x000259e7
   255d8:	10005cd0 	.word	0x10005cd0

000255dc <ble_gatts_register_chr>:
{
   255dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   255e0:	b08b      	sub	sp, #44	; 0x2c
   255e2:	4607      	mov	r7, r0
   255e4:	460c      	mov	r4, r1
   255e6:	4616      	mov	r6, r2
   255e8:	4698      	mov	r8, r3
    if (!ble_gatts_chr_is_sane(chr)) {
   255ea:	4608      	mov	r0, r1
   255ec:	f7ff fd6f 	bl	250ce <ble_gatts_chr_is_sane>
   255f0:	2800      	cmp	r0, #0
   255f2:	d063      	beq.n	256bc <ble_gatts_register_chr+0xe0>
    if (ble_gatts_chr_clt_cfg_allowed(chr) != 0) {
   255f4:	4620      	mov	r0, r4
   255f6:	f7ff fd09 	bl	2500c <ble_gatts_chr_clt_cfg_allowed>
   255fa:	b140      	cbz	r0, 2560e <ble_gatts_register_chr+0x32>
        if (ble_gatts_num_cfgable_chrs > ble_hs_max_client_configs) {
   255fc:	4b33      	ldr	r3, [pc, #204]	; (256cc <ble_gatts_register_chr+0xf0>)
   255fe:	881a      	ldrh	r2, [r3, #0]
   25600:	4b33      	ldr	r3, [pc, #204]	; (256d0 <ble_gatts_register_chr+0xf4>)
   25602:	681b      	ldr	r3, [r3, #0]
   25604:	429a      	cmp	r2, r3
   25606:	db5c      	blt.n	256c2 <ble_gatts_register_chr+0xe6>
        ble_gatts_num_cfgable_chrs++;
   25608:	3301      	adds	r3, #1
   2560a:	4a31      	ldr	r2, [pc, #196]	; (256d0 <ble_gatts_register_chr+0xf4>)
   2560c:	6013      	str	r3, [r2, #0]
    rc = ble_att_svr_register(uuid_chr, BLE_ATT_F_READ, 0, &def_handle,
   2560e:	9401      	str	r4, [sp, #4]
   25610:	4b30      	ldr	r3, [pc, #192]	; (256d4 <ble_gatts_register_chr+0xf8>)
   25612:	9300      	str	r3, [sp, #0]
   25614:	f10d 0312 	add.w	r3, sp, #18
   25618:	2200      	movs	r2, #0
   2561a:	2101      	movs	r1, #1
   2561c:	482e      	ldr	r0, [pc, #184]	; (256d8 <ble_gatts_register_chr+0xfc>)
   2561e:	f7fa fdd5 	bl	201cc <ble_att_svr_register>
    if (rc != 0) {
   25622:	4681      	mov	r9, r0
   25624:	b118      	cbz	r0, 2562e <ble_gatts_register_chr+0x52>
}
   25626:	4648      	mov	r0, r9
   25628:	b00b      	add	sp, #44	; 0x2c
   2562a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    att_flags = ble_gatts_att_flags_from_chr_flags(chr->flags);
   2562e:	8a20      	ldrh	r0, [r4, #16]
   25630:	f7ff fcf7 	bl	25022 <ble_gatts_att_flags_from_chr_flags>
   25634:	4601      	mov	r1, r0
    rc = ble_att_svr_register(chr->uuid, att_flags, chr->min_key_size,
   25636:	9401      	str	r4, [sp, #4]
   25638:	4b28      	ldr	r3, [pc, #160]	; (256dc <ble_gatts_register_chr+0x100>)
   2563a:	9300      	str	r3, [sp, #0]
   2563c:	ab04      	add	r3, sp, #16
   2563e:	7ca2      	ldrb	r2, [r4, #18]
   25640:	6820      	ldr	r0, [r4, #0]
   25642:	f7fa fdc3 	bl	201cc <ble_att_svr_register>
    if (rc != 0) {
   25646:	4681      	mov	r9, r0
   25648:	2800      	cmp	r0, #0
   2564a:	d1ec      	bne.n	25626 <ble_gatts_register_chr+0x4a>
    if (chr->val_handle != NULL) {
   2564c:	6963      	ldr	r3, [r4, #20]
   2564e:	b113      	cbz	r3, 25656 <ble_gatts_register_chr+0x7a>
        *chr->val_handle = val_handle;
   25650:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   25654:	801a      	strh	r2, [r3, #0]
    if (register_cb != NULL) {
   25656:	b17e      	cbz	r6, 25678 <ble_gatts_register_chr+0x9c>
        register_ctxt.op = BLE_GATT_REGISTER_OP_CHR;
   25658:	2302      	movs	r3, #2
   2565a:	f88d 3014 	strb.w	r3, [sp, #20]
        register_ctxt.chr.def_handle = def_handle;
   2565e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   25662:	f8ad 3018 	strh.w	r3, [sp, #24]
        register_ctxt.chr.val_handle = val_handle;
   25666:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2566a:	f8ad 301a 	strh.w	r3, [sp, #26]
        register_ctxt.chr.svc_def = svc;
   2566e:	9708      	str	r7, [sp, #32]
        register_ctxt.chr.chr_def = chr;
   25670:	9407      	str	r4, [sp, #28]
        register_cb(&register_ctxt, cb_arg);
   25672:	4641      	mov	r1, r8
   25674:	a805      	add	r0, sp, #20
   25676:	47b0      	blx	r6
    if (ble_gatts_chr_clt_cfg_allowed(chr) != 0) {
   25678:	4620      	mov	r0, r4
   2567a:	f7ff fcc7 	bl	2500c <ble_gatts_chr_clt_cfg_allowed>
   2567e:	b980      	cbnz	r0, 256a2 <ble_gatts_register_chr+0xc6>
    if (chr->descriptors != NULL) {
   25680:	68e5      	ldr	r5, [r4, #12]
   25682:	b1b5      	cbz	r5, 256b2 <ble_gatts_register_chr+0xd6>
        for (dsc = chr->descriptors; dsc->uuid != NULL; dsc++) {
   25684:	682b      	ldr	r3, [r5, #0]
   25686:	b1a3      	cbz	r3, 256b2 <ble_gatts_register_chr+0xd6>
            rc = ble_gatts_register_dsc(svc, chr, dsc, def_handle, register_cb,
   25688:	f8cd 8004 	str.w	r8, [sp, #4]
   2568c:	9600      	str	r6, [sp, #0]
   2568e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   25692:	462a      	mov	r2, r5
   25694:	4621      	mov	r1, r4
   25696:	4638      	mov	r0, r7
   25698:	f7ff ff6e 	bl	25578 <ble_gatts_register_dsc>
            if (rc != 0) {
   2569c:	b9a0      	cbnz	r0, 256c8 <ble_gatts_register_chr+0xec>
        for (dsc = chr->descriptors; dsc->uuid != NULL; dsc++) {
   2569e:	3510      	adds	r5, #16
   256a0:	e7f0      	b.n	25684 <ble_gatts_register_chr+0xa8>
        rc = ble_gatts_register_clt_cfg_dsc(&dsc_handle);
   256a2:	f10d 000e 	add.w	r0, sp, #14
   256a6:	f7ff ff4d 	bl	25544 <ble_gatts_register_clt_cfg_dsc>
        if (rc != 0) {
   256aa:	2800      	cmp	r0, #0
   256ac:	d0e8      	beq.n	25680 <ble_gatts_register_chr+0xa4>
            return rc;
   256ae:	4681      	mov	r9, r0
   256b0:	e7b9      	b.n	25626 <ble_gatts_register_chr+0x4a>
    STATS_INC(ble_gatts_stats, chrs);
   256b2:	4a0b      	ldr	r2, [pc, #44]	; (256e0 <ble_gatts_register_chr+0x104>)
   256b4:	6913      	ldr	r3, [r2, #16]
   256b6:	3301      	adds	r3, #1
   256b8:	6113      	str	r3, [r2, #16]
    return 0;
   256ba:	e7b4      	b.n	25626 <ble_gatts_register_chr+0x4a>
        return BLE_HS_EINVAL;
   256bc:	f04f 0903 	mov.w	r9, #3
   256c0:	e7b1      	b.n	25626 <ble_gatts_register_chr+0x4a>
            return BLE_HS_ENOMEM;
   256c2:	f04f 0906 	mov.w	r9, #6
   256c6:	e7ae      	b.n	25626 <ble_gatts_register_chr+0x4a>
                return rc;
   256c8:	4681      	mov	r9, r0
   256ca:	e7ac      	b.n	25626 <ble_gatts_register_chr+0x4a>
   256cc:	10005e12 	.word	0x10005e12
   256d0:	10005cc4 	.word	0x10005cc4
   256d4:	00025859 	.word	0x00025859
   256d8:	100006c8 	.word	0x100006c8
   256dc:	000259af 	.word	0x000259af
   256e0:	10005cd0 	.word	0x10005cd0

000256e4 <ble_gatts_register_svc>:
{
   256e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   256e8:	b088      	sub	sp, #32
   256ea:	4604      	mov	r4, r0
   256ec:	460d      	mov	r5, r1
   256ee:	4616      	mov	r6, r2
   256f0:	461f      	mov	r7, r3
    if (!ble_gatts_svc_incs_satisfied(svc)) {
   256f2:	f7ff fd23 	bl	2513c <ble_gatts_svc_incs_satisfied>
   256f6:	2800      	cmp	r0, #0
   256f8:	d046      	beq.n	25788 <ble_gatts_register_svc+0xa4>
    if (!ble_gatts_svc_is_sane(svc)) {
   256fa:	4620      	mov	r0, r4
   256fc:	f7ff fd90 	bl	25220 <ble_gatts_svc_is_sane>
   25700:	2800      	cmp	r0, #0
   25702:	d047      	beq.n	25794 <ble_gatts_register_svc+0xb0>
    uuid = NULL;
   25704:	f04f 0800 	mov.w	r8, #0
   25708:	f8cd 8008 	str.w	r8, [sp, #8]
    rc = ble_gatts_svc_type_to_uuid(svc->type, &uuid);
   2570c:	a902      	add	r1, sp, #8
   2570e:	7820      	ldrb	r0, [r4, #0]
   25710:	f7ff fd74 	bl	251fc <ble_gatts_svc_type_to_uuid>
    rc = ble_att_svr_register(uuid, BLE_ATT_F_READ, 0, out_handle,
   25714:	9401      	str	r4, [sp, #4]
   25716:	4b23      	ldr	r3, [pc, #140]	; (257a4 <ble_gatts_register_svc+0xc0>)
   25718:	9300      	str	r3, [sp, #0]
   2571a:	462b      	mov	r3, r5
   2571c:	4642      	mov	r2, r8
   2571e:	2101      	movs	r1, #1
   25720:	9802      	ldr	r0, [sp, #8]
   25722:	f7fa fd53 	bl	201cc <ble_att_svr_register>
    if (rc != 0) {
   25726:	4680      	mov	r8, r0
   25728:	bb80      	cbnz	r0, 2578c <ble_gatts_register_svc+0xa8>
    if (register_cb != NULL) {
   2572a:	b14e      	cbz	r6, 25740 <ble_gatts_register_svc+0x5c>
        register_ctxt.op = BLE_GATT_REGISTER_OP_SVC;
   2572c:	2301      	movs	r3, #1
   2572e:	f88d 300c 	strb.w	r3, [sp, #12]
        register_ctxt.svc.handle = *out_handle;
   25732:	882b      	ldrh	r3, [r5, #0]
   25734:	f8ad 3010 	strh.w	r3, [sp, #16]
        register_ctxt.svc.svc_def = svc;
   25738:	9405      	str	r4, [sp, #20]
        register_cb(&register_ctxt, cb_arg);
   2573a:	4639      	mov	r1, r7
   2573c:	a803      	add	r0, sp, #12
   2573e:	47b0      	blx	r6
    if (svc->includes != NULL) {
   25740:	68a3      	ldr	r3, [r4, #8]
   25742:	b17b      	cbz	r3, 25764 <ble_gatts_register_svc+0x80>
        for (i = 0; svc->includes[i] != NULL; i++) {
   25744:	4645      	mov	r5, r8
   25746:	68a3      	ldr	r3, [r4, #8]
   25748:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   2574c:	b150      	cbz	r0, 25764 <ble_gatts_register_svc+0x80>
            idx = ble_gatts_find_svc_entry_idx(svc->includes[i]);
   2574e:	f7ff fcdf 	bl	25110 <ble_gatts_find_svc_entry_idx>
            rc = ble_gatts_register_inc(ble_gatts_svc_entries + idx);
   25752:	4b15      	ldr	r3, [pc, #84]	; (257a8 <ble_gatts_register_svc+0xc4>)
   25754:	681b      	ldr	r3, [r3, #0]
   25756:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2575a:	f7ff fedf 	bl	2551c <ble_gatts_register_inc>
            if (rc != 0) {
   2575e:	b9e0      	cbnz	r0, 2579a <ble_gatts_register_svc+0xb6>
        for (i = 0; svc->includes[i] != NULL; i++) {
   25760:	3501      	adds	r5, #1
   25762:	e7f0      	b.n	25746 <ble_gatts_register_svc+0x62>
    if (svc->characteristics != NULL) {
   25764:	68e5      	ldr	r5, [r4, #12]
   25766:	b155      	cbz	r5, 2577e <ble_gatts_register_svc+0x9a>
        for (chr = svc->characteristics; chr->uuid != NULL; chr++) {
   25768:	682b      	ldr	r3, [r5, #0]
   2576a:	b143      	cbz	r3, 2577e <ble_gatts_register_svc+0x9a>
            rc = ble_gatts_register_chr(svc, chr, register_cb, cb_arg);
   2576c:	463b      	mov	r3, r7
   2576e:	4632      	mov	r2, r6
   25770:	4629      	mov	r1, r5
   25772:	4620      	mov	r0, r4
   25774:	f7ff ff32 	bl	255dc <ble_gatts_register_chr>
            if (rc != 0) {
   25778:	b988      	cbnz	r0, 2579e <ble_gatts_register_svc+0xba>
        for (chr = svc->characteristics; chr->uuid != NULL; chr++) {
   2577a:	3518      	adds	r5, #24
   2577c:	e7f4      	b.n	25768 <ble_gatts_register_svc+0x84>
    STATS_INC(ble_gatts_stats, svcs);
   2577e:	4a0b      	ldr	r2, [pc, #44]	; (257ac <ble_gatts_register_svc+0xc8>)
   25780:	68d3      	ldr	r3, [r2, #12]
   25782:	3301      	adds	r3, #1
   25784:	60d3      	str	r3, [r2, #12]
    return 0;
   25786:	e001      	b.n	2578c <ble_gatts_register_svc+0xa8>
        return BLE_HS_EAGAIN;
   25788:	f04f 0801 	mov.w	r8, #1
}
   2578c:	4640      	mov	r0, r8
   2578e:	b008      	add	sp, #32
   25790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_EINVAL;
   25794:	f04f 0803 	mov.w	r8, #3
   25798:	e7f8      	b.n	2578c <ble_gatts_register_svc+0xa8>
                return rc;
   2579a:	4680      	mov	r8, r0
   2579c:	e7f6      	b.n	2578c <ble_gatts_register_svc+0xa8>
                return rc;
   2579e:	4680      	mov	r8, r0
   257a0:	e7f4      	b.n	2578c <ble_gatts_register_svc+0xa8>
   257a2:	bf00      	nop
   257a4:	00025825 	.word	0x00025825
   257a8:	10005d08 	.word	0x10005d08
   257ac:	10005cd0 	.word	0x10005cd0

000257b0 <ble_gatts_register_round>:
{
   257b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   257b4:	b083      	sub	sp, #12
   257b6:	4607      	mov	r7, r0
   257b8:	4689      	mov	r9, r1
   257ba:	4690      	mov	r8, r2
    *out_num_registered = 0;
   257bc:	2400      	movs	r4, #0
   257be:	6004      	str	r4, [r0, #0]
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   257c0:	e009      	b.n	257d6 <ble_gatts_register_round+0x26>
                entry->handle = handle;
   257c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   257c6:	80b3      	strh	r3, [r6, #4]
                entry->end_group_handle = ble_att_svr_prev_handle();
   257c8:	f7fa fd28 	bl	2021c <ble_att_svr_prev_handle>
   257cc:	80f0      	strh	r0, [r6, #6]
                (*out_num_registered)++;
   257ce:	683b      	ldr	r3, [r7, #0]
   257d0:	3301      	adds	r3, #1
   257d2:	603b      	str	r3, [r7, #0]
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   257d4:	3401      	adds	r4, #1
   257d6:	4b11      	ldr	r3, [pc, #68]	; (2581c <ble_gatts_register_round+0x6c>)
   257d8:	881b      	ldrh	r3, [r3, #0]
   257da:	42a3      	cmp	r3, r4
   257dc:	dd17      	ble.n	2580e <ble_gatts_register_round+0x5e>
        entry = ble_gatts_svc_entries + i;
   257de:	4b10      	ldr	r3, [pc, #64]	; (25820 <ble_gatts_register_round+0x70>)
   257e0:	681d      	ldr	r5, [r3, #0]
   257e2:	eb05 06c4 	add.w	r6, r5, r4, lsl #3
        if (entry->handle == 0) {
   257e6:	88b3      	ldrh	r3, [r6, #4]
   257e8:	2b00      	cmp	r3, #0
   257ea:	d1f3      	bne.n	257d4 <ble_gatts_register_round+0x24>
            rc = ble_gatts_register_svc(entry->svc, &handle, cb, cb_arg);
   257ec:	4643      	mov	r3, r8
   257ee:	464a      	mov	r2, r9
   257f0:	f10d 0106 	add.w	r1, sp, #6
   257f4:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   257f8:	f7ff ff74 	bl	256e4 <ble_gatts_register_svc>
            switch (rc) {
   257fc:	4603      	mov	r3, r0
   257fe:	2800      	cmp	r0, #0
   25800:	d0df      	beq.n	257c2 <ble_gatts_register_round+0x12>
   25802:	2801      	cmp	r0, #1
   25804:	d0e6      	beq.n	257d4 <ble_gatts_register_round+0x24>
}
   25806:	4618      	mov	r0, r3
   25808:	b003      	add	sp, #12
   2580a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (*out_num_registered == 0) {
   2580e:	683b      	ldr	r3, [r7, #0]
   25810:	b10b      	cbz	r3, 25816 <ble_gatts_register_round+0x66>
    return 0;
   25812:	2300      	movs	r3, #0
   25814:	e7f7      	b.n	25806 <ble_gatts_register_round+0x56>
        return BLE_HS_EINVAL;
   25816:	2303      	movs	r3, #3
   25818:	e7f5      	b.n	25806 <ble_gatts_register_round+0x56>
   2581a:	bf00      	nop
   2581c:	10005ccc 	.word	0x10005ccc
   25820:	10005d08 	.word	0x10005d08

00025824 <ble_gatts_svc_access>:
{
   25824:	b538      	push	{r3, r4, r5, lr}
   25826:	9c05      	ldr	r4, [sp, #20]
    STATS_INC(ble_gatts_stats, svc_def_reads);
   25828:	4a0a      	ldr	r2, [pc, #40]	; (25854 <ble_gatts_svc_access+0x30>)
   2582a:	6993      	ldr	r3, [r2, #24]
   2582c:	3301      	adds	r3, #1
   2582e:	6193      	str	r3, [r2, #24]
    buf = os_mbuf_extend(*om, ble_uuid_length(svc->uuid));
   25830:	9b04      	ldr	r3, [sp, #16]
   25832:	681d      	ldr	r5, [r3, #0]
   25834:	6860      	ldr	r0, [r4, #4]
   25836:	f004 f9ab 	bl	29b90 <ble_uuid_length>
   2583a:	b281      	uxth	r1, r0
   2583c:	4628      	mov	r0, r5
   2583e:	f7f4 f969 	bl	19b14 <os_mbuf_extend>
    if (buf == NULL) {
   25842:	b128      	cbz	r0, 25850 <ble_gatts_svc_access+0x2c>
   25844:	4601      	mov	r1, r0
    ble_uuid_flat(svc->uuid, buf);
   25846:	6860      	ldr	r0, [r4, #4]
   25848:	f004 f976 	bl	29b38 <ble_uuid_flat>
    return 0;
   2584c:	2000      	movs	r0, #0
}
   2584e:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   25850:	2011      	movs	r0, #17
   25852:	e7fc      	b.n	2584e <ble_gatts_svc_access+0x2a>
   25854:	10005cd0 	.word	0x10005cd0

00025858 <ble_gatts_chr_def_access>:
{
   25858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2585a:	460c      	mov	r4, r1
   2585c:	9f06      	ldr	r7, [sp, #24]
   2585e:	9e07      	ldr	r6, [sp, #28]
    STATS_INC(ble_gatts_stats, chr_def_reads);
   25860:	4a13      	ldr	r2, [pc, #76]	; (258b0 <ble_gatts_chr_def_access+0x58>)
   25862:	6a13      	ldr	r3, [r2, #32]
   25864:	3301      	adds	r3, #1
   25866:	6213      	str	r3, [r2, #32]
    buf = os_mbuf_extend(*om, 3);
   25868:	2103      	movs	r1, #3
   2586a:	6838      	ldr	r0, [r7, #0]
   2586c:	f7f4 f952 	bl	19b14 <os_mbuf_extend>
    if (buf == NULL) {
   25870:	b1d0      	cbz	r0, 258a8 <ble_gatts_chr_def_access+0x50>
   25872:	4605      	mov	r5, r0
    buf[0] = ble_gatts_chr_properties(chr);
   25874:	4630      	mov	r0, r6
   25876:	f7ff fbff 	bl	25078 <ble_gatts_chr_properties>
   2587a:	4603      	mov	r3, r0
   2587c:	4628      	mov	r0, r5
   2587e:	f800 3b01 	strb.w	r3, [r0], #1
    put_le16(buf + 1, attr_handle + 1);
   25882:	1c61      	adds	r1, r4, #1
   25884:	b289      	uxth	r1, r1
   25886:	f7f3 fabb 	bl	18e00 <put_le16>
    buf = os_mbuf_extend(*om, ble_uuid_length(chr->uuid));
   2588a:	683c      	ldr	r4, [r7, #0]
   2588c:	6830      	ldr	r0, [r6, #0]
   2588e:	f004 f97f 	bl	29b90 <ble_uuid_length>
   25892:	b281      	uxth	r1, r0
   25894:	4620      	mov	r0, r4
   25896:	f7f4 f93d 	bl	19b14 <os_mbuf_extend>
    if (buf == NULL) {
   2589a:	4601      	mov	r1, r0
   2589c:	b130      	cbz	r0, 258ac <ble_gatts_chr_def_access+0x54>
    ble_uuid_flat(chr->uuid, buf);
   2589e:	6830      	ldr	r0, [r6, #0]
   258a0:	f004 f94a 	bl	29b38 <ble_uuid_flat>
    return 0;
   258a4:	2000      	movs	r0, #0
}
   258a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   258a8:	2011      	movs	r0, #17
   258aa:	e7fc      	b.n	258a6 <ble_gatts_chr_def_access+0x4e>
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   258ac:	2011      	movs	r0, #17
   258ae:	e7fa      	b.n	258a6 <ble_gatts_chr_def_access+0x4e>
   258b0:	10005cd0 	.word	0x10005cd0

000258b4 <ble_gatts_inc_access>:
{
   258b4:	b570      	push	{r4, r5, r6, lr}
   258b6:	9e04      	ldr	r6, [sp, #16]
   258b8:	9c05      	ldr	r4, [sp, #20]
    STATS_INC(ble_gatts_stats, svc_inc_reads);
   258ba:	4a13      	ldr	r2, [pc, #76]	; (25908 <ble_gatts_inc_access+0x54>)
   258bc:	69d3      	ldr	r3, [r2, #28]
   258be:	3301      	adds	r3, #1
   258c0:	61d3      	str	r3, [r2, #28]
    buf = os_mbuf_extend(*om, 4);
   258c2:	2104      	movs	r1, #4
   258c4:	6830      	ldr	r0, [r6, #0]
   258c6:	f7f4 f925 	bl	19b14 <os_mbuf_extend>
    if (buf == NULL) {
   258ca:	b1c8      	cbz	r0, 25900 <ble_gatts_inc_access+0x4c>
   258cc:	4605      	mov	r5, r0
    put_le16(buf + 0, entry->handle);
   258ce:	88a1      	ldrh	r1, [r4, #4]
   258d0:	f7f3 fa96 	bl	18e00 <put_le16>
    put_le16(buf + 2, entry->end_group_handle);
   258d4:	88e1      	ldrh	r1, [r4, #6]
   258d6:	1ca8      	adds	r0, r5, #2
   258d8:	f7f3 fa92 	bl	18e00 <put_le16>
    uuid16 = ble_uuid_u16(entry->svc->uuid);
   258dc:	6823      	ldr	r3, [r4, #0]
   258de:	6858      	ldr	r0, [r3, #4]
   258e0:	f004 f8ce 	bl	29a80 <ble_uuid_u16>
    if (uuid16 != 0) {
   258e4:	4604      	mov	r4, r0
   258e6:	b908      	cbnz	r0, 258ec <ble_gatts_inc_access+0x38>
    return 0;
   258e8:	2000      	movs	r0, #0
}
   258ea:	bd70      	pop	{r4, r5, r6, pc}
        buf = os_mbuf_extend(*om, 2);
   258ec:	2102      	movs	r1, #2
   258ee:	6830      	ldr	r0, [r6, #0]
   258f0:	f7f4 f910 	bl	19b14 <os_mbuf_extend>
        if (buf == NULL) {
   258f4:	b130      	cbz	r0, 25904 <ble_gatts_inc_access+0x50>
        put_le16(buf, uuid16);
   258f6:	4621      	mov	r1, r4
   258f8:	f7f3 fa82 	bl	18e00 <put_le16>
    return 0;
   258fc:	2000      	movs	r0, #0
   258fe:	e7f4      	b.n	258ea <ble_gatts_inc_access+0x36>
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   25900:	2011      	movs	r0, #17
   25902:	e7f2      	b.n	258ea <ble_gatts_inc_access+0x36>
            return BLE_ATT_ERR_INSUFFICIENT_RES;
   25904:	2011      	movs	r0, #17
   25906:	e7f0      	b.n	258ea <ble_gatts_inc_access+0x36>
   25908:	10005cd0 	.word	0x10005cd0

0002590c <ble_gatts_val_access>:
{
   2590c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25910:	4607      	mov	r7, r0
   25912:	460d      	mov	r5, r1
   25914:	4616      	mov	r6, r2
   25916:	461c      	mov	r4, r3
   25918:	f8dd 8020 	ldr.w	r8, [sp, #32]
    switch (gatt_ctxt->op) {
   2591c:	781b      	ldrb	r3, [r3, #0]
   2591e:	2b03      	cmp	r3, #3
   25920:	d841      	bhi.n	259a6 <ble_gatts_val_access+0x9a>
   25922:	e8df f003 	tbb	[pc, r3]
   25926:	3202      	.short	0x3202
   25928:	3202      	.short	0x3202
        if (offset == 0) {
   2592a:	b9fe      	cbnz	r6, 2596c <ble_gatts_val_access+0x60>
            gatt_ctxt->om = *om;
   2592c:	f8d8 3000 	ldr.w	r3, [r8]
   25930:	6063      	str	r3, [r4, #4]
            new_om = 0;
   25932:	f04f 0900 	mov.w	r9, #0
        initial_len = OS_MBUF_PKTLEN(gatt_ctxt->om);
   25936:	6863      	ldr	r3, [r4, #4]
   25938:	f8b3 a010 	ldrh.w	sl, [r3, #16]
        rc = access_cb(conn_handle, attr_handle, gatt_ctxt, cb_arg);
   2593c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2593e:	4622      	mov	r2, r4
   25940:	4629      	mov	r1, r5
   25942:	4638      	mov	r0, r7
   25944:	9d09      	ldr	r5, [sp, #36]	; 0x24
   25946:	47a8      	blx	r5
        if (rc == 0) {
   25948:	4605      	mov	r5, r0
   2594a:	b9b8      	cbnz	r0, 2597c <ble_gatts_val_access+0x70>
            attr_len = OS_MBUF_PKTLEN(gatt_ctxt->om) - initial_len - offset;
   2594c:	6861      	ldr	r1, [r4, #4]
   2594e:	8a0b      	ldrh	r3, [r1, #16]
   25950:	eba3 030a 	sub.w	r3, r3, sl
            if (attr_len >= 0) {
   25954:	1b9b      	subs	r3, r3, r6
   25956:	d410      	bmi.n	2597a <ble_gatts_val_access+0x6e>
                if (new_om) {
   25958:	f1b9 0f00 	cmp.w	r9, #0
   2595c:	d00e      	beq.n	2597c <ble_gatts_val_access+0x70>
                    os_mbuf_appendfrom(*om, gatt_ctxt->om, offset, attr_len);
   2595e:	b29b      	uxth	r3, r3
   25960:	4632      	mov	r2, r6
   25962:	f8d8 0000 	ldr.w	r0, [r8]
   25966:	f7f3 fec7 	bl	196f8 <os_mbuf_appendfrom>
   2596a:	e007      	b.n	2597c <ble_gatts_val_access+0x70>
            gatt_ctxt->om = ble_hs_mbuf_att_pkt();
   2596c:	f002 fddc 	bl	28528 <ble_hs_mbuf_att_pkt>
   25970:	6060      	str	r0, [r4, #4]
            if (gatt_ctxt->om == NULL) {
   25972:	b1d0      	cbz	r0, 259aa <ble_gatts_val_access+0x9e>
            new_om = 1;
   25974:	f04f 0901 	mov.w	r9, #1
   25978:	e7dd      	b.n	25936 <ble_gatts_val_access+0x2a>
                rc = BLE_ATT_ERR_INVALID_OFFSET;
   2597a:	2507      	movs	r5, #7
        if (new_om) {
   2597c:	f1b9 0f00 	cmp.w	r9, #0
   25980:	d00e      	beq.n	259a0 <ble_gatts_val_access+0x94>
            os_mbuf_free_chain(gatt_ctxt->om);
   25982:	6860      	ldr	r0, [r4, #4]
   25984:	f7f3 fe43 	bl	1960e <os_mbuf_free_chain>
   25988:	e00a      	b.n	259a0 <ble_gatts_val_access+0x94>
        gatt_ctxt->om = *om;
   2598a:	f8d8 3000 	ldr.w	r3, [r8]
   2598e:	6063      	str	r3, [r4, #4]
        rc = access_cb(conn_handle, attr_handle, gatt_ctxt, cb_arg);
   25990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25992:	4622      	mov	r2, r4
   25994:	9d09      	ldr	r5, [sp, #36]	; 0x24
   25996:	47a8      	blx	r5
   25998:	4605      	mov	r5, r0
        *om = gatt_ctxt->om;
   2599a:	6863      	ldr	r3, [r4, #4]
   2599c:	f8c8 3000 	str.w	r3, [r8]
}
   259a0:	4628      	mov	r0, r5
   259a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (gatt_ctxt->op) {
   259a6:	250e      	movs	r5, #14
   259a8:	e7fa      	b.n	259a0 <ble_gatts_val_access+0x94>
                return BLE_ATT_ERR_INSUFFICIENT_RES;
   259aa:	2511      	movs	r5, #17
   259ac:	e7f8      	b.n	259a0 <ble_gatts_val_access+0x94>

000259ae <ble_gatts_chr_val_access>:
{
   259ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   259b0:	b089      	sub	sp, #36	; 0x24
   259b2:	4604      	mov	r4, r0
   259b4:	460d      	mov	r5, r1
   259b6:	461e      	mov	r6, r3
   259b8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    gatt_ctxt.op = ble_gatts_chr_op(att_op);
   259ba:	4610      	mov	r0, r2
   259bc:	f7ff fb91 	bl	250e2 <ble_gatts_chr_op>
   259c0:	f88d 0014 	strb.w	r0, [sp, #20]
    gatt_ctxt.chr = chr_def;
   259c4:	9707      	str	r7, [sp, #28]
    ble_gatts_chr_inc_val_stat(gatt_ctxt.op);
   259c6:	f7ff fb93 	bl	250f0 <ble_gatts_chr_inc_val_stat>
    rc = ble_gatts_val_access(conn_handle, attr_handle, offset, &gatt_ctxt, om,
   259ca:	68bb      	ldr	r3, [r7, #8]
   259cc:	9302      	str	r3, [sp, #8]
   259ce:	687b      	ldr	r3, [r7, #4]
   259d0:	9301      	str	r3, [sp, #4]
   259d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   259d4:	9300      	str	r3, [sp, #0]
   259d6:	ab05      	add	r3, sp, #20
   259d8:	4632      	mov	r2, r6
   259da:	4629      	mov	r1, r5
   259dc:	4620      	mov	r0, r4
   259de:	f7ff ff95 	bl	2590c <ble_gatts_val_access>
}
   259e2:	b009      	add	sp, #36	; 0x24
   259e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000259e6 <ble_gatts_dsc_access>:
{
   259e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   259e8:	b089      	sub	sp, #36	; 0x24
   259ea:	4604      	mov	r4, r0
   259ec:	460d      	mov	r5, r1
   259ee:	461e      	mov	r6, r3
   259f0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    gatt_ctxt.op = ble_gatts_dsc_op(att_op);
   259f2:	4610      	mov	r0, r2
   259f4:	f7ff fbc2 	bl	2517c <ble_gatts_dsc_op>
   259f8:	f88d 0014 	strb.w	r0, [sp, #20]
    gatt_ctxt.dsc = dsc_def;
   259fc:	9707      	str	r7, [sp, #28]
    ble_gatts_dsc_inc_stat(gatt_ctxt.op);
   259fe:	f7ff fbc3 	bl	25188 <ble_gatts_dsc_inc_stat>
    rc = ble_gatts_val_access(conn_handle, attr_handle, offset, &gatt_ctxt, om,
   25a02:	68fb      	ldr	r3, [r7, #12]
   25a04:	9302      	str	r3, [sp, #8]
   25a06:	68bb      	ldr	r3, [r7, #8]
   25a08:	9301      	str	r3, [sp, #4]
   25a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25a0c:	9300      	str	r3, [sp, #0]
   25a0e:	ab05      	add	r3, sp, #20
   25a10:	4632      	mov	r2, r6
   25a12:	4629      	mov	r1, r5
   25a14:	4620      	mov	r0, r4
   25a16:	f7ff ff79 	bl	2590c <ble_gatts_val_access>
}
   25a1a:	b009      	add	sp, #36	; 0x24
   25a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025a1e <ble_gatts_mutable>:
{
   25a1e:	b508      	push	{r3, lr}
    if (ble_gap_adv_active() ||
   25a20:	f7fc fba6 	bl	22170 <ble_gap_adv_active>
   25a24:	b108      	cbz	r0, 25a2a <ble_gatts_mutable+0xc>
        return false;
   25a26:	2000      	movs	r0, #0
}
   25a28:	bd08      	pop	{r3, pc}
        ble_gap_disc_active() ||
   25a2a:	f7fc fcb1 	bl	22390 <ble_gap_disc_active>
    if (ble_gap_adv_active() ||
   25a2e:	2800      	cmp	r0, #0
   25a30:	d1f9      	bne.n	25a26 <ble_gatts_mutable+0x8>
        ble_gap_conn_active()) {
   25a32:	f7fc fcdd 	bl	223f0 <ble_gap_conn_active>
        ble_gap_disc_active() ||
   25a36:	2800      	cmp	r0, #0
   25a38:	d1f5      	bne.n	25a26 <ble_gatts_mutable+0x8>
    if (ble_hs_conn_first() != NULL) {
   25a3a:	f001 fe2b 	bl	27694 <ble_hs_conn_first>
   25a3e:	b108      	cbz	r0, 25a44 <ble_gatts_mutable+0x26>
        return false;
   25a40:	2000      	movs	r0, #0
   25a42:	e7f1      	b.n	25a28 <ble_gatts_mutable+0xa>
    return true;
   25a44:	2001      	movs	r0, #1
   25a46:	e7ef      	b.n	25a28 <ble_gatts_mutable+0xa>

00025a48 <ble_gatts_free_mem>:
{
   25a48:	b538      	push	{r3, r4, r5, lr}
    free(ble_gatts_clt_cfg_mem);
   25a4a:	4c06      	ldr	r4, [pc, #24]	; (25a64 <ble_gatts_free_mem+0x1c>)
   25a4c:	6820      	ldr	r0, [r4, #0]
   25a4e:	f009 f80f 	bl	2ea70 <free>
    ble_gatts_clt_cfg_mem = NULL;
   25a52:	2500      	movs	r5, #0
   25a54:	6025      	str	r5, [r4, #0]
    free(ble_gatts_svc_entries);
   25a56:	4c04      	ldr	r4, [pc, #16]	; (25a68 <ble_gatts_free_mem+0x20>)
   25a58:	6820      	ldr	r0, [r4, #0]
   25a5a:	f009 f809 	bl	2ea70 <free>
    ble_gatts_svc_entries = NULL;
   25a5e:	6025      	str	r5, [r4, #0]
}
   25a60:	bd38      	pop	{r3, r4, r5, pc}
   25a62:	bf00      	nop
   25a64:	10005ca0 	.word	0x10005ca0
   25a68:	10005d08 	.word	0x10005d08

00025a6c <ble_gatts_free_svc_defs>:
{
   25a6c:	b510      	push	{r4, lr}
    free(ble_gatts_svc_defs);
   25a6e:	4c04      	ldr	r4, [pc, #16]	; (25a80 <ble_gatts_free_svc_defs+0x14>)
   25a70:	6820      	ldr	r0, [r4, #0]
   25a72:	f008 fffd 	bl	2ea70 <free>
    ble_gatts_svc_defs = NULL;
   25a76:	2300      	movs	r3, #0
   25a78:	6023      	str	r3, [r4, #0]
    ble_gatts_num_svc_defs = 0;
   25a7a:	4a02      	ldr	r2, [pc, #8]	; (25a84 <ble_gatts_free_svc_defs+0x18>)
   25a7c:	6013      	str	r3, [r2, #0]
}
   25a7e:	bd10      	pop	{r4, pc}
   25a80:	10005d04 	.word	0x10005d04
   25a84:	10005cc8 	.word	0x10005cc8

00025a88 <ble_gatts_tx_notifications_one_chr>:
{
   25a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25a8c:	4680      	mov	r8, r0
    clt_cfg_idx = ble_gatts_clt_cfg_find_idx(ble_gatts_clt_cfgs,
   25a8e:	4601      	mov	r1, r0
   25a90:	4b17      	ldr	r3, [pc, #92]	; (25af0 <ble_gatts_tx_notifications_one_chr+0x68>)
   25a92:	6818      	ldr	r0, [r3, #0]
   25a94:	f7ff fb94 	bl	251c0 <ble_gatts_clt_cfg_find_idx>
    if (clt_cfg_idx == -1) {
   25a98:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   25a9c:	d026      	beq.n	25aec <ble_gatts_tx_notifications_one_chr+0x64>
   25a9e:	4681      	mov	r9, r0
    for (i = 0; ; i++) {
   25aa0:	2600      	movs	r6, #0
   25aa2:	e008      	b.n	25ab6 <ble_gatts_tx_notifications_one_chr+0x2e>
            att_op = 0;
   25aa4:	2400      	movs	r4, #0
            conn_handle = BLE_HS_CONN_HANDLE_NONE;
   25aa6:	f64f 77ff 	movw	r7, #65535	; 0xffff
   25aaa:	e013      	b.n	25ad4 <ble_gatts_tx_notifications_one_chr+0x4c>
            ble_gattc_notify(conn_handle, chr_val_handle);
   25aac:	4641      	mov	r1, r8
   25aae:	4638      	mov	r0, r7
   25ab0:	f7ff f8d0 	bl	24c54 <ble_gattc_notify>
    for (i = 0; ; i++) {
   25ab4:	3601      	adds	r6, #1
        ble_hs_lock();
   25ab6:	f000 fd3f 	bl	26538 <ble_hs_lock>
        conn = ble_hs_conn_find_by_idx(i);
   25aba:	4630      	mov	r0, r6
   25abc:	f001 fddc 	bl	27678 <ble_hs_conn_find_by_idx>
        if (conn != NULL) {
   25ac0:	4605      	mov	r5, r0
   25ac2:	2800      	cmp	r0, #0
   25ac4:	d0ee      	beq.n	25aa4 <ble_gatts_tx_notifications_one_chr+0x1c>
            clt_cfg = conn->bhc_gatt_svr.clt_cfgs + clt_cfg_idx;
   25ac6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
            att_op = ble_gatts_schedule_update(conn, clt_cfg);
   25ac8:	eb01 0189 	add.w	r1, r1, r9, lsl #2
   25acc:	f7ff fbbc 	bl	25248 <ble_gatts_schedule_update>
   25ad0:	4604      	mov	r4, r0
            conn_handle = conn->bhc_handle;
   25ad2:	88af      	ldrh	r7, [r5, #4]
        ble_hs_unlock();
   25ad4:	f000 fd34 	bl	26540 <ble_hs_unlock>
        if (conn == NULL) {
   25ad8:	b145      	cbz	r5, 25aec <ble_gatts_tx_notifications_one_chr+0x64>
        switch (att_op) {
   25ada:	2c1b      	cmp	r4, #27
   25adc:	d0e6      	beq.n	25aac <ble_gatts_tx_notifications_one_chr+0x24>
   25ade:	2c1d      	cmp	r4, #29
   25ae0:	d1e8      	bne.n	25ab4 <ble_gatts_tx_notifications_one_chr+0x2c>
            ble_gattc_indicate(conn_handle, chr_val_handle);
   25ae2:	4641      	mov	r1, r8
   25ae4:	4638      	mov	r0, r7
   25ae6:	f7ff f91d 	bl	24d24 <ble_gattc_indicate>
            break;
   25aea:	e7e3      	b.n	25ab4 <ble_gatts_tx_notifications_one_chr+0x2c>
}
   25aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25af0:	10005cc0 	.word	0x10005cc0

00025af4 <ble_gatts_register_svcs>:
{
   25af4:	b5f0      	push	{r4, r5, r6, r7, lr}
   25af6:	b083      	sub	sp, #12
   25af8:	460e      	mov	r6, r1
   25afa:	4617      	mov	r7, r2
    for (i = 0; svcs[i].type != BLE_GATT_SVC_TYPE_END; i++) {
   25afc:	2400      	movs	r4, #0
   25afe:	0123      	lsls	r3, r4, #4
   25b00:	eb00 1104 	add.w	r1, r0, r4, lsl #4
   25b04:	5cc3      	ldrb	r3, [r0, r3]
   25b06:	b19b      	cbz	r3, 25b30 <ble_gatts_register_svcs+0x3c>
        idx = ble_gatts_num_svc_entries + i;
   25b08:	4b15      	ldr	r3, [pc, #84]	; (25b60 <ble_gatts_register_svcs+0x6c>)
   25b0a:	881b      	ldrh	r3, [r3, #0]
   25b0c:	4423      	add	r3, r4
        if (idx >= ble_hs_max_services) {
   25b0e:	4a15      	ldr	r2, [pc, #84]	; (25b64 <ble_gatts_register_svcs+0x70>)
   25b10:	8812      	ldrh	r2, [r2, #0]
   25b12:	429a      	cmp	r2, r3
   25b14:	dd1f      	ble.n	25b56 <ble_gatts_register_svcs+0x62>
        ble_gatts_svc_entries[idx].svc = svcs + i;
   25b16:	4a14      	ldr	r2, [pc, #80]	; (25b68 <ble_gatts_register_svcs+0x74>)
   25b18:	6812      	ldr	r2, [r2, #0]
   25b1a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   25b1e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        ble_gatts_svc_entries[idx].handle = 0;
   25b22:	2300      	movs	r3, #0
   25b24:	80ab      	strh	r3, [r5, #4]
        ble_gatts_svc_entries[idx].end_group_handle = 0xffff;
   25b26:	f64f 73ff 	movw	r3, #65535	; 0xffff
   25b2a:	80eb      	strh	r3, [r5, #6]
    for (i = 0; svcs[i].type != BLE_GATT_SVC_TYPE_END; i++) {
   25b2c:	3401      	adds	r4, #1
   25b2e:	e7e6      	b.n	25afe <ble_gatts_register_svcs+0xa>
    ble_gatts_num_svc_entries += num_svcs;
   25b30:	4a0b      	ldr	r2, [pc, #44]	; (25b60 <ble_gatts_register_svcs+0x6c>)
   25b32:	8813      	ldrh	r3, [r2, #0]
   25b34:	4423      	add	r3, r4
   25b36:	8013      	strh	r3, [r2, #0]
    total_registered = 0;
   25b38:	2500      	movs	r5, #0
    while (total_registered < num_svcs) {
   25b3a:	42a5      	cmp	r5, r4
   25b3c:	da09      	bge.n	25b52 <ble_gatts_register_svcs+0x5e>
        rc = ble_gatts_register_round(&cur_registered, cb, cb_arg);
   25b3e:	463a      	mov	r2, r7
   25b40:	4631      	mov	r1, r6
   25b42:	a801      	add	r0, sp, #4
   25b44:	f7ff fe34 	bl	257b0 <ble_gatts_register_round>
        if (rc != 0) {
   25b48:	4603      	mov	r3, r0
   25b4a:	b928      	cbnz	r0, 25b58 <ble_gatts_register_svcs+0x64>
        total_registered += cur_registered;
   25b4c:	9b01      	ldr	r3, [sp, #4]
   25b4e:	441d      	add	r5, r3
   25b50:	e7f3      	b.n	25b3a <ble_gatts_register_svcs+0x46>
    return 0;
   25b52:	2300      	movs	r3, #0
   25b54:	e000      	b.n	25b58 <ble_gatts_register_svcs+0x64>
            return BLE_HS_ENOMEM;
   25b56:	2306      	movs	r3, #6
}
   25b58:	4618      	mov	r0, r3
   25b5a:	b003      	add	sp, #12
   25b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25b5e:	bf00      	nop
   25b60:	10005ccc 	.word	0x10005ccc
   25b64:	10005e14 	.word	0x10005e14
   25b68:	10005d08 	.word	0x10005d08

00025b6c <ble_gatts_connection_broken>:
{
   25b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   25b6e:	b083      	sub	sp, #12
   25b70:	4606      	mov	r6, r0
    ble_hs_lock();
   25b72:	f000 fce1 	bl	26538 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   25b76:	4630      	mov	r0, r6
   25b78:	f001 fd62 	bl	27640 <ble_hs_conn_find>
    if (conn != NULL) {
   25b7c:	4604      	mov	r4, r0
   25b7e:	b120      	cbz	r0, 25b8a <ble_gatts_connection_broken+0x1e>
        clt_cfgs = conn->bhc_gatt_svr.clt_cfgs;
   25b80:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
        num_clt_cfgs = conn->bhc_gatt_svr.num_clt_cfgs;
   25b82:	6d07      	ldr	r7, [r0, #80]	; 0x50
        conn->bhc_gatt_svr.clt_cfgs = NULL;
   25b84:	2300      	movs	r3, #0
   25b86:	64c3      	str	r3, [r0, #76]	; 0x4c
        conn->bhc_gatt_svr.num_clt_cfgs = 0;
   25b88:	6503      	str	r3, [r0, #80]	; 0x50
    ble_hs_unlock();
   25b8a:	f000 fcd9 	bl	26540 <ble_hs_unlock>
    if (conn == NULL) {
   25b8e:	b1bc      	cbz	r4, 25bc0 <ble_gatts_connection_broken+0x54>
    ble_gatts_indicate_fail_notconn(conn_handle);
   25b90:	4630      	mov	r0, r6
   25b92:	f7ff f864 	bl	24c5e <ble_gatts_indicate_fail_notconn>
    if (clt_cfgs != NULL) {
   25b96:	b19d      	cbz	r5, 25bc0 <ble_gatts_connection_broken+0x54>
        for (i = 0; i < num_clt_cfgs; i++) {
   25b98:	2400      	movs	r4, #0
   25b9a:	e00b      	b.n	25bb4 <ble_gatts_connection_broken+0x48>
            ble_gatts_subscribe_event(conn_handle, clt_cfgs[i].chr_val_handle,
   25b9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   25ba0:	789b      	ldrb	r3, [r3, #2]
   25ba2:	f835 1024 	ldrh.w	r1, [r5, r4, lsl #2]
   25ba6:	2200      	movs	r2, #0
   25ba8:	9200      	str	r2, [sp, #0]
   25baa:	2202      	movs	r2, #2
   25bac:	4630      	mov	r0, r6
   25bae:	f7ff fc55 	bl	2545c <ble_gatts_subscribe_event>
        for (i = 0; i < num_clt_cfgs; i++) {
   25bb2:	3401      	adds	r4, #1
   25bb4:	42a7      	cmp	r7, r4
   25bb6:	dcf1      	bgt.n	25b9c <ble_gatts_connection_broken+0x30>
        rc = os_memblock_put(&ble_gatts_clt_cfg_pool, clt_cfgs);
   25bb8:	4629      	mov	r1, r5
   25bba:	4802      	ldr	r0, [pc, #8]	; (25bc4 <ble_gatts_connection_broken+0x58>)
   25bbc:	f7f4 f981 	bl	19ec2 <os_memblock_put>
}
   25bc0:	b003      	add	sp, #12
   25bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25bc4:	10005ca4 	.word	0x10005ca4

00025bc8 <ble_gatts_start>:
{
   25bc8:	b570      	push	{r4, r5, r6, lr}
   25bca:	b084      	sub	sp, #16
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   25bcc:	4b43      	ldr	r3, [pc, #268]	; (25cdc <ble_gatts_start+0x114>)
   25bce:	681b      	ldr	r3, [r3, #0]
   25bd0:	9303      	str	r3, [sp, #12]
    ble_hs_lock();
   25bd2:	f000 fcb1 	bl	26538 <ble_hs_lock>
    if (!ble_gatts_mutable()) {
   25bd6:	f7ff ff22 	bl	25a1e <ble_gatts_mutable>
   25bda:	b948      	cbnz	r0, 25bf0 <ble_gatts_start+0x28>
        rc = BLE_HS_EBUSY;
   25bdc:	240f      	movs	r4, #15
        ble_gatts_free_mem();
   25bde:	f7ff ff33 	bl	25a48 <ble_gatts_free_mem>
        ble_gatts_free_svc_defs();
   25be2:	f7ff ff43 	bl	25a6c <ble_gatts_free_svc_defs>
    ble_hs_unlock();
   25be6:	f000 fcab 	bl	26540 <ble_hs_unlock>
}
   25bea:	4620      	mov	r0, r4
   25bec:	b004      	add	sp, #16
   25bee:	bd70      	pop	{r4, r5, r6, pc}
    ble_gatts_free_mem();
   25bf0:	f7ff ff2a 	bl	25a48 <ble_gatts_free_mem>
    rc = ble_att_svr_start();
   25bf4:	f7fb f8f2 	bl	20ddc <ble_att_svr_start>
    if (rc != 0) {
   25bf8:	4604      	mov	r4, r0
   25bfa:	2800      	cmp	r0, #0
   25bfc:	d168      	bne.n	25cd0 <ble_gatts_start+0x108>
    if (ble_hs_max_client_configs > 0) {
   25bfe:	4b38      	ldr	r3, [pc, #224]	; (25ce0 <ble_gatts_start+0x118>)
   25c00:	8818      	ldrh	r0, [r3, #0]
   25c02:	b9b0      	cbnz	r0, 25c32 <ble_gatts_start+0x6a>
    if (ble_hs_max_services > 0) {
   25c04:	4b37      	ldr	r3, [pc, #220]	; (25ce4 <ble_gatts_start+0x11c>)
   25c06:	8818      	ldrh	r0, [r3, #0]
   25c08:	b9e0      	cbnz	r0, 25c44 <ble_gatts_start+0x7c>
    ble_gatts_num_svc_entries = 0;
   25c0a:	4b37      	ldr	r3, [pc, #220]	; (25ce8 <ble_gatts_start+0x120>)
   25c0c:	2200      	movs	r2, #0
   25c0e:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < ble_gatts_num_svc_defs; i++) {
   25c10:	4b36      	ldr	r3, [pc, #216]	; (25cec <ble_gatts_start+0x124>)
   25c12:	681b      	ldr	r3, [r3, #0]
   25c14:	42a3      	cmp	r3, r4
   25c16:	dd1e      	ble.n	25c56 <ble_gatts_start+0x8e>
        rc = ble_gatts_register_svcs(ble_gatts_svc_defs[i],
   25c18:	4b35      	ldr	r3, [pc, #212]	; (25cf0 <ble_gatts_start+0x128>)
   25c1a:	6818      	ldr	r0, [r3, #0]
   25c1c:	4b35      	ldr	r3, [pc, #212]	; (25cf4 <ble_gatts_start+0x12c>)
   25c1e:	685a      	ldr	r2, [r3, #4]
   25c20:	6819      	ldr	r1, [r3, #0]
   25c22:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   25c26:	f7ff ff65 	bl	25af4 <ble_gatts_register_svcs>
        if (rc != 0) {
   25c2a:	2800      	cmp	r0, #0
   25c2c:	d14f      	bne.n	25cce <ble_gatts_start+0x106>
    for (i = 0; i < ble_gatts_num_svc_defs; i++) {
   25c2e:	3401      	adds	r4, #1
   25c30:	e7ee      	b.n	25c10 <ble_gatts_start+0x48>
        ble_gatts_clt_cfg_mem = malloc(
   25c32:	0080      	lsls	r0, r0, #2
   25c34:	f008 fee6 	bl	2ea04 <malloc>
   25c38:	4b2f      	ldr	r3, [pc, #188]	; (25cf8 <ble_gatts_start+0x130>)
   25c3a:	6018      	str	r0, [r3, #0]
        if (ble_gatts_clt_cfg_mem == NULL) {
   25c3c:	2800      	cmp	r0, #0
   25c3e:	d1e1      	bne.n	25c04 <ble_gatts_start+0x3c>
            rc = BLE_HS_ENOMEM;
   25c40:	2406      	movs	r4, #6
   25c42:	e7cc      	b.n	25bde <ble_gatts_start+0x16>
            malloc(ble_hs_max_services * sizeof *ble_gatts_svc_entries);
   25c44:	00c0      	lsls	r0, r0, #3
   25c46:	f008 fedd 	bl	2ea04 <malloc>
        ble_gatts_svc_entries =
   25c4a:	4b2c      	ldr	r3, [pc, #176]	; (25cfc <ble_gatts_start+0x134>)
   25c4c:	6018      	str	r0, [r3, #0]
        if (ble_gatts_svc_entries == NULL) {
   25c4e:	2800      	cmp	r0, #0
   25c50:	d1db      	bne.n	25c0a <ble_gatts_start+0x42>
            rc = BLE_HS_ENOMEM;
   25c52:	2406      	movs	r4, #6
   25c54:	e7c3      	b.n	25bde <ble_gatts_start+0x16>
    ble_gatts_free_svc_defs();
   25c56:	f7ff ff09 	bl	25a6c <ble_gatts_free_svc_defs>
    if (ble_gatts_num_cfgable_chrs == 0) {
   25c5a:	4b29      	ldr	r3, [pc, #164]	; (25d00 <ble_gatts_start+0x138>)
   25c5c:	681c      	ldr	r4, [r3, #0]
   25c5e:	2c00      	cmp	r4, #0
   25c60:	d0c1      	beq.n	25be6 <ble_gatts_start+0x1e>
    num_elems = ble_hs_max_client_configs / ble_gatts_num_cfgable_chrs;
   25c62:	4b1f      	ldr	r3, [pc, #124]	; (25ce0 <ble_gatts_start+0x118>)
   25c64:	881b      	ldrh	r3, [r3, #0]
   25c66:	fb93 f4f4 	sdiv	r4, r3, r4
                         ble_gatts_clt_cfg_size(), ble_gatts_clt_cfg_mem,
   25c6a:	f7ff fae7 	bl	2523c <ble_gatts_clt_cfg_size>
   25c6e:	4602      	mov	r2, r0
    rc = os_mempool_init(&ble_gatts_clt_cfg_pool, num_elems,
   25c70:	4b24      	ldr	r3, [pc, #144]	; (25d04 <ble_gatts_start+0x13c>)
   25c72:	9300      	str	r3, [sp, #0]
   25c74:	4b20      	ldr	r3, [pc, #128]	; (25cf8 <ble_gatts_start+0x130>)
   25c76:	681b      	ldr	r3, [r3, #0]
   25c78:	b2a1      	uxth	r1, r4
   25c7a:	4823      	ldr	r0, [pc, #140]	; (25d08 <ble_gatts_start+0x140>)
   25c7c:	f7f4 f8c2 	bl	19e04 <os_mempool_init>
   25c80:	4606      	mov	r6, r0
   25c82:	4604      	mov	r4, r0
    if (rc != 0) {
   25c84:	b108      	cbz	r0, 25c8a <ble_gatts_start+0xc2>
        rc = BLE_HS_EOS;
   25c86:	240b      	movs	r4, #11
   25c88:	e7a9      	b.n	25bde <ble_gatts_start+0x16>
    ble_gatts_clt_cfgs = os_memblock_get(&ble_gatts_clt_cfg_pool);
   25c8a:	481f      	ldr	r0, [pc, #124]	; (25d08 <ble_gatts_start+0x140>)
   25c8c:	f7f4 f8f1 	bl	19e72 <os_memblock_get>
   25c90:	4b1e      	ldr	r3, [pc, #120]	; (25d0c <ble_gatts_start+0x144>)
   25c92:	6018      	str	r0, [r3, #0]
    if (ble_gatts_clt_cfgs == NULL) {
   25c94:	b1f8      	cbz	r0, 25cd6 <ble_gatts_start+0x10e>
    ha = NULL;
   25c96:	2500      	movs	r5, #0
    while ((ha = ble_att_svr_find_by_uuid(ha, &uuid.u, 0xffff)) != NULL) {
   25c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
   25c9c:	a903      	add	r1, sp, #12
   25c9e:	4628      	mov	r0, r5
   25ca0:	f7fa fb18 	bl	202d4 <ble_att_svr_find_by_uuid>
   25ca4:	4605      	mov	r5, r0
   25ca6:	b198      	cbz	r0, 25cd0 <ble_gatts_start+0x108>
        allowed_flags = ble_gatts_chr_clt_cfg_allowed(chr);
   25ca8:	6928      	ldr	r0, [r5, #16]
   25caa:	f7ff f9af 	bl	2500c <ble_gatts_chr_clt_cfg_allowed>
        if (allowed_flags != 0) {
   25cae:	4602      	mov	r2, r0
   25cb0:	2800      	cmp	r0, #0
   25cb2:	d0f1      	beq.n	25c98 <ble_gatts_start+0xd0>
            ble_gatts_clt_cfgs[idx].chr_val_handle = ha->ha_handle_id + 1;
   25cb4:	896b      	ldrh	r3, [r5, #10]
   25cb6:	4915      	ldr	r1, [pc, #84]	; (25d0c <ble_gatts_start+0x144>)
   25cb8:	6808      	ldr	r0, [r1, #0]
   25cba:	eb00 0186 	add.w	r1, r0, r6, lsl #2
   25cbe:	3301      	adds	r3, #1
   25cc0:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
            ble_gatts_clt_cfgs[idx].allowed = allowed_flags;
   25cc4:	70ca      	strb	r2, [r1, #3]
            ble_gatts_clt_cfgs[idx].flags = 0;
   25cc6:	2300      	movs	r3, #0
   25cc8:	708b      	strb	r3, [r1, #2]
            idx++;
   25cca:	3601      	adds	r6, #1
   25ccc:	e7e4      	b.n	25c98 <ble_gatts_start+0xd0>
        rc = ble_gatts_register_svcs(ble_gatts_svc_defs[i],
   25cce:	4604      	mov	r4, r0
    if (rc != 0) {
   25cd0:	2c00      	cmp	r4, #0
   25cd2:	d088      	beq.n	25be6 <ble_gatts_start+0x1e>
   25cd4:	e783      	b.n	25bde <ble_gatts_start+0x16>
        rc = BLE_HS_ENOMEM;
   25cd6:	2406      	movs	r4, #6
   25cd8:	e781      	b.n	25bde <ble_gatts_start+0x16>
   25cda:	bf00      	nop
   25cdc:	0002fb60 	.word	0x0002fb60
   25ce0:	10005e12 	.word	0x10005e12
   25ce4:	10005e14 	.word	0x10005e14
   25ce8:	10005ccc 	.word	0x10005ccc
   25cec:	10005cc8 	.word	0x10005cc8
   25cf0:	10005d04 	.word	0x10005d04
   25cf4:	100006d4 	.word	0x100006d4
   25cf8:	10005ca0 	.word	0x10005ca0
   25cfc:	10005d08 	.word	0x10005d08
   25d00:	10005cc4 	.word	0x10005cc4
   25d04:	00034c48 	.word	0x00034c48
   25d08:	10005ca4 	.word	0x10005ca4
   25d0c:	10005cc0 	.word	0x10005cc0

00025d10 <ble_gatts_conn_can_alloc>:
    return ble_gatts_num_cfgable_chrs == 0 ||
   25d10:	4b05      	ldr	r3, [pc, #20]	; (25d28 <ble_gatts_conn_can_alloc+0x18>)
   25d12:	681b      	ldr	r3, [r3, #0]
   25d14:	b123      	cbz	r3, 25d20 <ble_gatts_conn_can_alloc+0x10>
           ble_gatts_clt_cfg_pool.mp_num_free > 0;
   25d16:	4b05      	ldr	r3, [pc, #20]	; (25d2c <ble_gatts_conn_can_alloc+0x1c>)
   25d18:	88db      	ldrh	r3, [r3, #6]
    return ble_gatts_num_cfgable_chrs == 0 ||
   25d1a:	b11b      	cbz	r3, 25d24 <ble_gatts_conn_can_alloc+0x14>
   25d1c:	2001      	movs	r0, #1
   25d1e:	4770      	bx	lr
   25d20:	2001      	movs	r0, #1
   25d22:	4770      	bx	lr
   25d24:	2000      	movs	r0, #0
}
   25d26:	4770      	bx	lr
   25d28:	10005cc4 	.word	0x10005cc4
   25d2c:	10005ca4 	.word	0x10005ca4

00025d30 <ble_gatts_conn_init>:
{
   25d30:	b570      	push	{r4, r5, r6, lr}
   25d32:	4604      	mov	r4, r0
    if (ble_gatts_num_cfgable_chrs > 0) {
   25d34:	4b0e      	ldr	r3, [pc, #56]	; (25d70 <ble_gatts_conn_init+0x40>)
   25d36:	681b      	ldr	r3, [r3, #0]
   25d38:	2b00      	cmp	r3, #0
   25d3a:	dc03      	bgt.n	25d44 <ble_gatts_conn_init+0x14>
        gatts_conn->clt_cfgs = NULL;
   25d3c:	2000      	movs	r0, #0
   25d3e:	6020      	str	r0, [r4, #0]
        gatts_conn->num_clt_cfgs = 0;
   25d40:	6060      	str	r0, [r4, #4]
}
   25d42:	bd70      	pop	{r4, r5, r6, pc}
        gatts_conn->clt_cfgs = os_memblock_get(&ble_gatts_clt_cfg_pool);
   25d44:	480b      	ldr	r0, [pc, #44]	; (25d74 <ble_gatts_conn_init+0x44>)
   25d46:	f7f4 f894 	bl	19e72 <os_memblock_get>
   25d4a:	4605      	mov	r5, r0
   25d4c:	6020      	str	r0, [r4, #0]
        if (gatts_conn->clt_cfgs == NULL) {
   25d4e:	b168      	cbz	r0, 25d6c <ble_gatts_conn_init+0x3c>
        memcpy(gatts_conn->clt_cfgs, ble_gatts_clt_cfgs,
   25d50:	4b09      	ldr	r3, [pc, #36]	; (25d78 <ble_gatts_conn_init+0x48>)
   25d52:	681e      	ldr	r6, [r3, #0]
               ble_gatts_clt_cfg_size());
   25d54:	f7ff fa72 	bl	2523c <ble_gatts_clt_cfg_size>
   25d58:	4602      	mov	r2, r0
        memcpy(gatts_conn->clt_cfgs, ble_gatts_clt_cfgs,
   25d5a:	4631      	mov	r1, r6
   25d5c:	4628      	mov	r0, r5
   25d5e:	f7f4 ff89 	bl	1ac74 <memcpy>
        gatts_conn->num_clt_cfgs = ble_gatts_num_cfgable_chrs;
   25d62:	4b03      	ldr	r3, [pc, #12]	; (25d70 <ble_gatts_conn_init+0x40>)
   25d64:	681b      	ldr	r3, [r3, #0]
   25d66:	6063      	str	r3, [r4, #4]
    return 0;
   25d68:	2000      	movs	r0, #0
   25d6a:	e7ea      	b.n	25d42 <ble_gatts_conn_init+0x12>
            return BLE_HS_ENOMEM;
   25d6c:	2006      	movs	r0, #6
   25d6e:	e7e8      	b.n	25d42 <ble_gatts_conn_init+0x12>
   25d70:	10005cc4 	.word	0x10005cc4
   25d74:	10005ca4 	.word	0x10005ca4
   25d78:	10005cc0 	.word	0x10005cc0

00025d7c <ble_gatts_send_next_indicate>:
{
   25d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25d7e:	4606      	mov	r6, r0
    ble_hs_lock();
   25d80:	f000 fbda 	bl	26538 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   25d84:	4630      	mov	r0, r6
   25d86:	f001 fc5b 	bl	27640 <ble_hs_conn_find>
    if (conn != NULL) {
   25d8a:	4604      	mov	r4, r0
   25d8c:	b108      	cbz	r0, 25d92 <ble_gatts_send_next_indicate+0x16>
        for (i = 0; i < conn->bhc_gatt_svr.num_clt_cfgs; i++) {
   25d8e:	2200      	movs	r2, #0
   25d90:	e002      	b.n	25d98 <ble_gatts_send_next_indicate+0x1c>
    chr_val_handle = 0;
   25d92:	2700      	movs	r7, #0
   25d94:	e011      	b.n	25dba <ble_gatts_send_next_indicate+0x3e>
        for (i = 0; i < conn->bhc_gatt_svr.num_clt_cfgs; i++) {
   25d96:	3201      	adds	r2, #1
   25d98:	6d23      	ldr	r3, [r4, #80]	; 0x50
   25d9a:	4293      	cmp	r3, r2
   25d9c:	dd0c      	ble.n	25db8 <ble_gatts_send_next_indicate+0x3c>
            clt_cfg = conn->bhc_gatt_svr.clt_cfgs + i;
   25d9e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   25da0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
            if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED) {
   25da4:	789d      	ldrb	r5, [r3, #2]
   25da6:	f993 1002 	ldrsb.w	r1, [r3, #2]
   25daa:	2900      	cmp	r1, #0
   25dac:	daf3      	bge.n	25d96 <ble_gatts_send_next_indicate+0x1a>
                chr_val_handle = clt_cfg->chr_val_handle;
   25dae:	881f      	ldrh	r7, [r3, #0]
                clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
   25db0:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   25db4:	709d      	strb	r5, [r3, #2]
                break;
   25db6:	e000      	b.n	25dba <ble_gatts_send_next_indicate+0x3e>
    chr_val_handle = 0;
   25db8:	2700      	movs	r7, #0
    ble_hs_unlock();
   25dba:	f000 fbc1 	bl	26540 <ble_hs_unlock>
    if (conn == NULL) {
   25dbe:	b12c      	cbz	r4, 25dcc <ble_gatts_send_next_indicate+0x50>
    if (chr_val_handle == 0) {
   25dc0:	b137      	cbz	r7, 25dd0 <ble_gatts_send_next_indicate+0x54>
    rc = ble_gattc_indicate(conn_handle, chr_val_handle);
   25dc2:	4639      	mov	r1, r7
   25dc4:	4630      	mov	r0, r6
   25dc6:	f7fe ffad 	bl	24d24 <ble_gattc_indicate>
}
   25dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOTCONN;
   25dcc:	2007      	movs	r0, #7
   25dce:	e7fc      	b.n	25dca <ble_gatts_send_next_indicate+0x4e>
        return BLE_HS_ENOENT;
   25dd0:	2005      	movs	r0, #5
   25dd2:	e7fa      	b.n	25dca <ble_gatts_send_next_indicate+0x4e>

00025dd4 <ble_gatts_rx_indicate_ack>:
{
   25dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25dd8:	b084      	sub	sp, #16
   25dda:	4606      	mov	r6, r0
   25ddc:	460d      	mov	r5, r1
    clt_cfg_idx = ble_gatts_clt_cfg_find_idx(ble_gatts_clt_cfgs,
   25dde:	4b2f      	ldr	r3, [pc, #188]	; (25e9c <ble_gatts_rx_indicate_ack+0xc8>)
   25de0:	681c      	ldr	r4, [r3, #0]
   25de2:	4620      	mov	r0, r4
   25de4:	f7ff f9ec 	bl	251c0 <ble_gatts_clt_cfg_find_idx>
    if (clt_cfg_idx == -1) {
   25de8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   25dec:	d04e      	beq.n	25e8c <ble_gatts_rx_indicate_ack+0xb8>
    clt_cfg = ble_gatts_clt_cfgs + clt_cfg_idx;
   25dee:	ea4f 0880 	mov.w	r8, r0, lsl #2
   25df2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    if (!(clt_cfg->allowed & BLE_GATTS_CLT_CFG_F_INDICATE)) {
   25df6:	78e3      	ldrb	r3, [r4, #3]
   25df8:	f013 0f02 	tst.w	r3, #2
   25dfc:	d048      	beq.n	25e90 <ble_gatts_rx_indicate_ack+0xbc>
    ble_hs_lock();
   25dfe:	f000 fb9b 	bl	26538 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   25e02:	4630      	mov	r0, r6
   25e04:	f001 fc1c 	bl	27640 <ble_hs_conn_find>
   25e08:	4603      	mov	r3, r0
    if (conn->bhc_gatt_svr.indicate_val_handle == chr_val_handle) {
   25e0a:	f8b0 2054 	ldrh.w	r2, [r0, #84]	; 0x54
   25e0e:	42aa      	cmp	r2, r5
   25e10:	d006      	beq.n	25e20 <ble_gatts_rx_indicate_ack+0x4c>
        rc = BLE_HS_ENOENT;
   25e12:	2405      	movs	r4, #5
    ble_hs_unlock();
   25e14:	f000 fb94 	bl	26540 <ble_hs_unlock>
    if (rc != 0) {
   25e18:	bbdc      	cbnz	r4, 25e92 <ble_gatts_rx_indicate_ack+0xbe>
    if (persist) {
   25e1a:	bb9f      	cbnz	r7, 25e84 <ble_gatts_rx_indicate_ack+0xb0>
    return 0;
   25e1c:	463c      	mov	r4, r7
   25e1e:	e038      	b.n	25e92 <ble_gatts_rx_indicate_ack+0xbe>
        conn->bhc_gatt_svr.indicate_val_handle = 0;
   25e20:	2200      	movs	r2, #0
   25e22:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
        clt_cfg = conn->bhc_gatt_svr.clt_cfgs + clt_cfg_idx;
   25e26:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   25e28:	4490      	add	r8, r2
        persist = conn->bhc_sec_state.bonded &&
   25e2a:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
   25e2e:	f012 0f04 	tst.w	r2, #4
   25e32:	d024      	beq.n	25e7e <ble_gatts_rx_indicate_ack+0xaa>
                  !(clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED);
   25e34:	f998 2002 	ldrsb.w	r2, [r8, #2]
        persist = conn->bhc_sec_state.bonded &&
   25e38:	2a00      	cmp	r2, #0
   25e3a:	da02      	bge.n	25e42 <ble_gatts_rx_indicate_ack+0x6e>
        rc = 0;
   25e3c:	2400      	movs	r4, #0
        persist = conn->bhc_sec_state.bonded &&
   25e3e:	4627      	mov	r7, r4
   25e40:	e7e8      	b.n	25e14 <ble_gatts_rx_indicate_ack+0x40>
            cccd_value.peer_addr = conn->bhc_peer_addr;
   25e42:	4602      	mov	r2, r0
   25e44:	f852 0f07 	ldr.w	r0, [r2, #7]!
   25e48:	9000      	str	r0, [sp, #0]
   25e4a:	8891      	ldrh	r1, [r2, #4]
   25e4c:	7992      	ldrb	r2, [r2, #6]
   25e4e:	f8ad 1004 	strh.w	r1, [sp, #4]
   25e52:	f88d 2006 	strb.w	r2, [sp, #6]
                ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   25e56:	79d8      	ldrb	r0, [r3, #7]
   25e58:	f002 fbf1 	bl	2863e <ble_hs_misc_peer_addr_type_to_id>
            cccd_value.peer_addr.type =
   25e5c:	f88d 0000 	strb.w	r0, [sp]
            cccd_value.chr_val_handle = chr_val_handle;
   25e60:	f8ad 5008 	strh.w	r5, [sp, #8]
            cccd_value.flags = clt_cfg->flags;
   25e64:	f898 3002 	ldrb.w	r3, [r8, #2]
   25e68:	f8ad 300a 	strh.w	r3, [sp, #10]
            cccd_value.value_changed = 0;
   25e6c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   25e70:	f36f 0300 	bfc	r3, #0, #1
   25e74:	f88d 300c 	strb.w	r3, [sp, #12]
        rc = 0;
   25e78:	2400      	movs	r4, #0
        persist = conn->bhc_sec_state.bonded &&
   25e7a:	2701      	movs	r7, #1
   25e7c:	e7ca      	b.n	25e14 <ble_gatts_rx_indicate_ack+0x40>
        rc = 0;
   25e7e:	2400      	movs	r4, #0
        persist = conn->bhc_sec_state.bonded &&
   25e80:	4627      	mov	r7, r4
   25e82:	e7c7      	b.n	25e14 <ble_gatts_rx_indicate_ack+0x40>
        rc = ble_store_write_cccd(&cccd_value);
   25e84:	4668      	mov	r0, sp
   25e86:	f003 fc98 	bl	297ba <ble_store_write_cccd>
        if (rc != 0) {
   25e8a:	e002      	b.n	25e92 <ble_gatts_rx_indicate_ack+0xbe>
        return BLE_HS_ENOENT;
   25e8c:	2405      	movs	r4, #5
   25e8e:	e000      	b.n	25e92 <ble_gatts_rx_indicate_ack+0xbe>
        return BLE_HS_ENOENT;
   25e90:	2405      	movs	r4, #5
}
   25e92:	4620      	mov	r0, r4
   25e94:	b004      	add	sp, #16
   25e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25e9a:	bf00      	nop
   25e9c:	10005cc0 	.word	0x10005cc0

00025ea0 <ble_gatts_chr_updated>:
{
   25ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
   25ea2:	b089      	sub	sp, #36	; 0x24
   25ea4:	4606      	mov	r6, r0
    clt_cfg_idx = ble_gatts_clt_cfg_find_idx(ble_gatts_clt_cfgs,
   25ea6:	4601      	mov	r1, r0
   25ea8:	4b2a      	ldr	r3, [pc, #168]	; (25f54 <ble_gatts_chr_updated+0xb4>)
   25eaa:	6818      	ldr	r0, [r3, #0]
   25eac:	f7ff f988 	bl	251c0 <ble_gatts_clt_cfg_find_idx>
    if (clt_cfg_idx == -1) {
   25eb0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   25eb4:	d04c      	beq.n	25f50 <ble_gatts_chr_updated+0xb0>
   25eb6:	4605      	mov	r5, r0
    ble_hs_lock();
   25eb8:	f000 fb3e 	bl	26538 <ble_hs_lock>
    for (i = 0; ; i++) {
   25ebc:	2400      	movs	r4, #0
    int new_notifications = 0;
   25ebe:	4627      	mov	r7, r4
        conn = ble_hs_conn_find_by_idx(i);
   25ec0:	4620      	mov	r0, r4
   25ec2:	f001 fbd9 	bl	27678 <ble_hs_conn_find_by_idx>
        if (conn == NULL) {
   25ec6:	b148      	cbz	r0, 25edc <ble_gatts_chr_updated+0x3c>
        clt_cfg = conn->bhc_gatt_svr.clt_cfgs + clt_cfg_idx;
   25ec8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   25eca:	eb03 0385 	add.w	r3, r3, r5, lsl #2
        clt_cfg->flags |= BLE_GATTS_CLT_CFG_F_MODIFIED;
   25ece:	789a      	ldrb	r2, [r3, #2]
   25ed0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   25ed4:	709a      	strb	r2, [r3, #2]
    for (i = 0; ; i++) {
   25ed6:	3401      	adds	r4, #1
        new_notifications = 1;
   25ed8:	2701      	movs	r7, #1
        conn = ble_hs_conn_find_by_idx(i);
   25eda:	e7f1      	b.n	25ec0 <ble_gatts_chr_updated+0x20>
    ble_hs_unlock();
   25edc:	f000 fb30 	bl	26540 <ble_hs_unlock>
    if (new_notifications) {
   25ee0:	b947      	cbnz	r7, 25ef4 <ble_gatts_chr_updated+0x54>
    cccd_key.peer_addr = *BLE_ADDR_ANY;
   25ee2:	2300      	movs	r3, #0
   25ee4:	9301      	str	r3, [sp, #4]
   25ee6:	f8cd 3007 	str.w	r3, [sp, #7]
    cccd_key.chr_val_handle = chr_val_handle;
   25eea:	f8ad 600c 	strh.w	r6, [sp, #12]
    cccd_key.idx = 0;
   25eee:	f88d 300e 	strb.w	r3, [sp, #14]
   25ef2:	e011      	b.n	25f18 <ble_gatts_chr_updated+0x78>
        ble_hs_notifications_sched();
   25ef4:	f000 fc40 	bl	26778 <ble_hs_notifications_sched>
   25ef8:	e7f3      	b.n	25ee2 <ble_gatts_chr_updated+0x42>
        ble_hs_unlock();
   25efa:	f000 fb21 	bl	26540 <ble_hs_unlock>
        if (persist && !cccd_value.value_changed) {
   25efe:	e001      	b.n	25f04 <ble_gatts_chr_updated+0x64>
        ble_hs_unlock();
   25f00:	f000 fb1e 	bl	26540 <ble_hs_unlock>
        if (persist && !cccd_value.value_changed) {
   25f04:	f89d 301c 	ldrb.w	r3, [sp, #28]
   25f08:	f013 0f01 	tst.w	r3, #1
   25f0c:	d018      	beq.n	25f40 <ble_gatts_chr_updated+0xa0>
        cccd_key.idx++;
   25f0e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   25f12:	3301      	adds	r3, #1
   25f14:	f88d 300e 	strb.w	r3, [sp, #14]
        rc = ble_store_read_cccd(&cccd_key, &cccd_value);
   25f18:	a904      	add	r1, sp, #16
   25f1a:	a801      	add	r0, sp, #4
   25f1c:	f003 fc46 	bl	297ac <ble_store_read_cccd>
        if (rc != 0) {
   25f20:	b9b0      	cbnz	r0, 25f50 <ble_gatts_chr_updated+0xb0>
        ble_hs_lock();
   25f22:	f000 fb09 	bl	26538 <ble_hs_lock>
        conn = ble_hs_conn_find_by_addr(&cccd_key.peer_addr);
   25f26:	a801      	add	r0, sp, #4
   25f28:	f001 fc26 	bl	27778 <ble_hs_conn_find_by_addr>
        if (conn == NULL) {
   25f2c:	2800      	cmp	r0, #0
   25f2e:	d0e4      	beq.n	25efa <ble_gatts_chr_updated+0x5a>
        } else if (cccd_value.flags & BLE_GATTS_CLT_CFG_F_INDICATE) {
   25f30:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   25f34:	f013 0f02 	tst.w	r3, #2
   25f38:	d1e2      	bne.n	25f00 <ble_gatts_chr_updated+0x60>
        ble_hs_unlock();
   25f3a:	f000 fb01 	bl	26540 <ble_hs_unlock>
        if (persist && !cccd_value.value_changed) {
   25f3e:	e7e6      	b.n	25f0e <ble_gatts_chr_updated+0x6e>
            cccd_value.value_changed = 1;
   25f40:	f043 0301 	orr.w	r3, r3, #1
   25f44:	f88d 301c 	strb.w	r3, [sp, #28]
            ble_store_write_cccd(&cccd_value);
   25f48:	a804      	add	r0, sp, #16
   25f4a:	f003 fc36 	bl	297ba <ble_store_write_cccd>
   25f4e:	e7de      	b.n	25f0e <ble_gatts_chr_updated+0x6e>
}
   25f50:	b009      	add	sp, #36	; 0x24
   25f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25f54:	10005cc0 	.word	0x10005cc0

00025f58 <ble_gatts_tx_notifications>:
{
   25f58:	b510      	push	{r4, lr}
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   25f5a:	2400      	movs	r4, #0
   25f5c:	4b06      	ldr	r3, [pc, #24]	; (25f78 <ble_gatts_tx_notifications+0x20>)
   25f5e:	681b      	ldr	r3, [r3, #0]
   25f60:	42a3      	cmp	r3, r4
   25f62:	dd07      	ble.n	25f74 <ble_gatts_tx_notifications+0x1c>
        chr_val_handle = ble_gatts_clt_cfgs[i].chr_val_handle;
   25f64:	4b05      	ldr	r3, [pc, #20]	; (25f7c <ble_gatts_tx_notifications+0x24>)
   25f66:	681b      	ldr	r3, [r3, #0]
        ble_gatts_tx_notifications_one_chr(chr_val_handle);
   25f68:	f833 0024 	ldrh.w	r0, [r3, r4, lsl #2]
   25f6c:	f7ff fd8c 	bl	25a88 <ble_gatts_tx_notifications_one_chr>
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   25f70:	3401      	adds	r4, #1
   25f72:	e7f3      	b.n	25f5c <ble_gatts_tx_notifications+0x4>
}
   25f74:	bd10      	pop	{r4, pc}
   25f76:	bf00      	nop
   25f78:	10005cc4 	.word	0x10005cc4
   25f7c:	10005cc0 	.word	0x10005cc0

00025f80 <ble_gatts_add_svcs>:
{
   25f80:	b570      	push	{r4, r5, r6, lr}
   25f82:	4604      	mov	r4, r0
    ble_hs_lock();
   25f84:	f000 fad8 	bl	26538 <ble_hs_lock>
    if (!ble_gatts_mutable()) {
   25f88:	f7ff fd49 	bl	25a1e <ble_gatts_mutable>
   25f8c:	b198      	cbz	r0, 25fb6 <ble_gatts_add_svcs+0x36>
                (ble_gatts_num_svc_defs + 1) * sizeof *ble_gatts_svc_defs);
   25f8e:	4b0c      	ldr	r3, [pc, #48]	; (25fc0 <ble_gatts_add_svcs+0x40>)
   25f90:	681e      	ldr	r6, [r3, #0]
   25f92:	1c75      	adds	r5, r6, #1
    p = realloc(ble_gatts_svc_defs,
   25f94:	00a9      	lsls	r1, r5, #2
   25f96:	4b0b      	ldr	r3, [pc, #44]	; (25fc4 <ble_gatts_add_svcs+0x44>)
   25f98:	6818      	ldr	r0, [r3, #0]
   25f9a:	f008 fd7f 	bl	2ea9c <realloc>
    if (p == NULL) {
   25f9e:	b160      	cbz	r0, 25fba <ble_gatts_add_svcs+0x3a>
    ble_gatts_svc_defs = p;
   25fa0:	4a08      	ldr	r2, [pc, #32]	; (25fc4 <ble_gatts_add_svcs+0x44>)
   25fa2:	6010      	str	r0, [r2, #0]
    ble_gatts_svc_defs[ble_gatts_num_svc_defs] = svcs;
   25fa4:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    ble_gatts_num_svc_defs++;
   25fa8:	4b05      	ldr	r3, [pc, #20]	; (25fc0 <ble_gatts_add_svcs+0x40>)
   25faa:	601d      	str	r5, [r3, #0]
    rc = 0;
   25fac:	2400      	movs	r4, #0
    ble_hs_unlock();
   25fae:	f000 fac7 	bl	26540 <ble_hs_unlock>
}
   25fb2:	4620      	mov	r0, r4
   25fb4:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_EBUSY;
   25fb6:	240f      	movs	r4, #15
   25fb8:	e7f9      	b.n	25fae <ble_gatts_add_svcs+0x2e>
        rc = BLE_HS_ENOMEM;
   25fba:	2406      	movs	r4, #6
   25fbc:	e7f7      	b.n	25fae <ble_gatts_add_svcs+0x2e>
   25fbe:	bf00      	nop
   25fc0:	10005cc8 	.word	0x10005cc8
   25fc4:	10005d04 	.word	0x10005d04

00025fc8 <ble_gatts_svc_set_visibility>:
{
   25fc8:	b510      	push	{r4, lr}
   25fca:	4604      	mov	r4, r0
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   25fcc:	2300      	movs	r3, #0
   25fce:	4a0c      	ldr	r2, [pc, #48]	; (26000 <ble_gatts_svc_set_visibility+0x38>)
   25fd0:	8812      	ldrh	r2, [r2, #0]
   25fd2:	429a      	cmp	r2, r3
   25fd4:	dd12      	ble.n	25ffc <ble_gatts_svc_set_visibility+0x34>
        struct ble_gatts_svc_entry *entry = &ble_gatts_svc_entries[i];
   25fd6:	4a0b      	ldr	r2, [pc, #44]	; (26004 <ble_gatts_svc_set_visibility+0x3c>)
   25fd8:	6812      	ldr	r2, [r2, #0]
   25fda:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
        if (entry->handle == handle) {
   25fde:	8890      	ldrh	r0, [r2, #4]
   25fe0:	42a0      	cmp	r0, r4
   25fe2:	d001      	beq.n	25fe8 <ble_gatts_svc_set_visibility+0x20>
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   25fe4:	3301      	adds	r3, #1
   25fe6:	e7f2      	b.n	25fce <ble_gatts_svc_set_visibility+0x6>
            if (visible) {
   25fe8:	b121      	cbz	r1, 25ff4 <ble_gatts_svc_set_visibility+0x2c>
                ble_att_svr_restore_range(entry->handle, entry->end_group_handle);
   25fea:	88d1      	ldrh	r1, [r2, #6]
   25fec:	f7fa fec6 	bl	20d7c <ble_att_svr_restore_range>
            return 0;
   25ff0:	2000      	movs	r0, #0
   25ff2:	e004      	b.n	25ffe <ble_gatts_svc_set_visibility+0x36>
                ble_att_svr_hide_range(entry->handle, entry->end_group_handle);
   25ff4:	88d1      	ldrh	r1, [r2, #6]
   25ff6:	f7fa feb5 	bl	20d64 <ble_att_svr_hide_range>
   25ffa:	e7f9      	b.n	25ff0 <ble_gatts_svc_set_visibility+0x28>
    return BLE_HS_ENOENT;
   25ffc:	2005      	movs	r0, #5
}
   25ffe:	bd10      	pop	{r4, pc}
   26000:	10005ccc 	.word	0x10005ccc
   26004:	10005d08 	.word	0x10005d08

00026008 <ble_gatts_count_cfg>:
int
ble_gatts_count_cfg(const struct ble_gatt_svc_def *defs)
{
   26008:	b500      	push	{lr}
   2600a:	b085      	sub	sp, #20
    struct ble_gatt_resources res = { 0 };
   2600c:	2300      	movs	r3, #0
   2600e:	9301      	str	r3, [sp, #4]
   26010:	9302      	str	r3, [sp, #8]
   26012:	9303      	str	r3, [sp, #12]
    int rc;

    rc = ble_gatts_count_resources(defs, &res);
   26014:	a901      	add	r1, sp, #4
   26016:	f7ff f933 	bl	25280 <ble_gatts_count_resources>
    if (rc != 0) {
   2601a:	b990      	cbnz	r0, 26042 <ble_gatts_count_cfg+0x3a>
        return rc;
    }

    ble_hs_max_services += res.svcs;
   2601c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   26020:	4a09      	ldr	r2, [pc, #36]	; (26048 <ble_gatts_count_cfg+0x40>)
   26022:	8811      	ldrh	r1, [r2, #0]
   26024:	440b      	add	r3, r1
   26026:	8013      	strh	r3, [r2, #0]
    ble_hs_max_attrs += res.attrs;
   26028:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2602c:	4a07      	ldr	r2, [pc, #28]	; (2604c <ble_gatts_count_cfg+0x44>)
   2602e:	8811      	ldrh	r1, [r2, #0]
   26030:	440b      	add	r3, r1
   26032:	8013      	strh	r3, [r2, #0]

    /* Reserve an extra CCCD for the cache. */
    ble_hs_max_client_configs +=
        res.cccds * (MYNEWT_VAL(BLE_MAX_CONNECTIONS) + 1);
   26034:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    ble_hs_max_client_configs +=
   26038:	4a05      	ldr	r2, [pc, #20]	; (26050 <ble_gatts_count_cfg+0x48>)
   2603a:	8813      	ldrh	r3, [r2, #0]
   2603c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   26040:	8013      	strh	r3, [r2, #0]

    return 0;
}
   26042:	b005      	add	sp, #20
   26044:	f85d fb04 	ldr.w	pc, [sp], #4
   26048:	10005e14 	.word	0x10005e14
   2604c:	10005e10 	.word	0x10005e10
   26050:	10005e12 	.word	0x10005e12

00026054 <ble_gatts_lcl_svc_foreach>:

void
ble_gatts_lcl_svc_foreach(ble_gatt_svc_foreach_fn cb, void *arg)
{
   26054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26058:	4680      	mov	r8, r0
   2605a:	460f      	mov	r7, r1
    int i;

    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   2605c:	2400      	movs	r4, #0
   2605e:	4b09      	ldr	r3, [pc, #36]	; (26084 <ble_gatts_lcl_svc_foreach+0x30>)
   26060:	881b      	ldrh	r3, [r3, #0]
   26062:	42a3      	cmp	r3, r4
   26064:	dd0b      	ble.n	2607e <ble_gatts_lcl_svc_foreach+0x2a>
        cb(ble_gatts_svc_entries[i].svc,
   26066:	4b08      	ldr	r3, [pc, #32]	; (26088 <ble_gatts_lcl_svc_foreach+0x34>)
   26068:	681d      	ldr	r5, [r3, #0]
   2606a:	eb05 06c4 	add.w	r6, r5, r4, lsl #3
   2606e:	463b      	mov	r3, r7
   26070:	88f2      	ldrh	r2, [r6, #6]
   26072:	88b1      	ldrh	r1, [r6, #4]
   26074:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   26078:	47c0      	blx	r8
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   2607a:	3401      	adds	r4, #1
   2607c:	e7ef      	b.n	2605e <ble_gatts_lcl_svc_foreach+0xa>
           ble_gatts_svc_entries[i].handle,
           ble_gatts_svc_entries[i].end_group_handle, arg);
    }
}
   2607e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26082:	bf00      	nop
   26084:	10005ccc 	.word	0x10005ccc
   26088:	10005d08 	.word	0x10005d08

0002608c <ble_gatts_reset>:

int
ble_gatts_reset(void)
{
   2608c:	b510      	push	{r4, lr}
    int rc;

    ble_hs_lock();
   2608e:	f000 fa53 	bl	26538 <ble_hs_lock>

    if (!ble_gatts_mutable()) {
   26092:	f7ff fcc4 	bl	25a1e <ble_gatts_mutable>
   26096:	b920      	cbnz	r0, 260a2 <ble_gatts_reset+0x16>
        rc = BLE_HS_EBUSY;
   26098:	240f      	movs	r4, #15
        rc = 0;

        /* Note: gatts memory gets freed on next call to ble_gatts_start(). */
    }

    ble_hs_unlock();
   2609a:	f000 fa51 	bl	26540 <ble_hs_unlock>

    return rc;
}
   2609e:	4620      	mov	r0, r4
   260a0:	bd10      	pop	{r4, pc}
        ble_att_svr_reset();
   260a2:	f7fa fe77 	bl	20d94 <ble_att_svr_reset>
        ble_gatts_num_cfgable_chrs = 0;
   260a6:	2400      	movs	r4, #0
   260a8:	4b01      	ldr	r3, [pc, #4]	; (260b0 <ble_gatts_reset+0x24>)
   260aa:	601c      	str	r4, [r3, #0]
        rc = 0;
   260ac:	e7f5      	b.n	2609a <ble_gatts_reset+0xe>
   260ae:	bf00      	nop
   260b0:	10005cc4 	.word	0x10005cc4

000260b4 <ble_gatts_init>:

int
ble_gatts_init(void)
{
   260b4:	b500      	push	{lr}
   260b6:	b083      	sub	sp, #12
    int rc;

    ble_gatts_num_cfgable_chrs = 0;
   260b8:	2300      	movs	r3, #0
   260ba:	4a09      	ldr	r2, [pc, #36]	; (260e0 <ble_gatts_init+0x2c>)
   260bc:	6013      	str	r3, [r2, #0]
    ble_gatts_clt_cfgs = NULL;
   260be:	4a09      	ldr	r2, [pc, #36]	; (260e4 <ble_gatts_init+0x30>)
   260c0:	6013      	str	r3, [r2, #0]

    rc = stats_init_and_reg(
   260c2:	4a09      	ldr	r2, [pc, #36]	; (260e8 <ble_gatts_init+0x34>)
   260c4:	9201      	str	r2, [sp, #4]
   260c6:	9300      	str	r3, [sp, #0]
   260c8:	220a      	movs	r2, #10
   260ca:	2104      	movs	r1, #4
   260cc:	4807      	ldr	r0, [pc, #28]	; (260ec <ble_gatts_init+0x38>)
   260ce:	f7f7 ff29 	bl	1df24 <stats_init_and_reg>
        STATS_HDR(ble_gatts_stats), STATS_SIZE_INIT_PARMS(ble_gatts_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_gatts_stats), "ble_gatts");
    if (rc != 0) {
   260d2:	b910      	cbnz	r0, 260da <ble_gatts_init+0x26>
        return BLE_HS_EOS;
    }

    return 0;

}
   260d4:	b003      	add	sp, #12
   260d6:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   260da:	200b      	movs	r0, #11
   260dc:	e7fa      	b.n	260d4 <ble_gatts_init+0x20>
   260de:	bf00      	nop
   260e0:	10005cc4 	.word	0x10005cc4
   260e4:	10005cc0 	.word	0x10005cc0
   260e8:	00034c60 	.word	0x00034c60
   260ec:	10005cd0 	.word	0x10005cd0

000260f0 <ble_gatt_show_local_inc_svc>:
}

static int
ble_gatt_show_local_inc_svc(const struct ble_gatt_svc_def *svc,
                            uint16_t handle, char *uuid_buf)
{
   260f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   260f4:	4688      	mov	r8, r1
   260f6:	4617      	mov	r7, r2
    const struct ble_gatt_svc_def **includes;
    int num = 0;

    for (includes = &svc->includes[0]; *includes != NULL; ++includes) {
   260f8:	6884      	ldr	r4, [r0, #8]
    int num = 0;
   260fa:	2600      	movs	r6, #0
    for (includes = &svc->includes[0]; *includes != NULL; ++includes) {
   260fc:	6823      	ldr	r3, [r4, #0]
   260fe:	b1bb      	cbz	r3, 26130 <ble_gatt_show_local_inc_svc+0x40>
        console_printf("included service\n");
   26100:	480d      	ldr	r0, [pc, #52]	; (26138 <ble_gatt_show_local_inc_svc+0x48>)
   26102:	f7f6 f813 	bl	1c12c <console_printf>
        console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
                       "%s\n", " ", "uuid",
                       ble_uuid_to_str((*includes)->uuid, uuid_buf));
   26106:	f854 3b04 	ldr.w	r3, [r4], #4
        console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   2610a:	4639      	mov	r1, r7
   2610c:	6858      	ldr	r0, [r3, #4]
   2610e:	f003 fc63 	bl	299d8 <ble_uuid_to_str>
   26112:	4603      	mov	r3, r0
   26114:	4d09      	ldr	r5, [pc, #36]	; (2613c <ble_gatt_show_local_inc_svc+0x4c>)
   26116:	4a0a      	ldr	r2, [pc, #40]	; (26140 <ble_gatt_show_local_inc_svc+0x50>)
   26118:	4629      	mov	r1, r5
   2611a:	480a      	ldr	r0, [pc, #40]	; (26144 <ble_gatt_show_local_inc_svc+0x54>)
   2611c:	f7f6 f806 	bl	1c12c <console_printf>
        console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   26120:	4643      	mov	r3, r8
   26122:	4a09      	ldr	r2, [pc, #36]	; (26148 <ble_gatt_show_local_inc_svc+0x58>)
   26124:	4629      	mov	r1, r5
   26126:	4809      	ldr	r0, [pc, #36]	; (2614c <ble_gatt_show_local_inc_svc+0x5c>)
   26128:	f7f6 f800 	bl	1c12c <console_printf>
                       "%d\n", " ", "attr handle", handle);
        ++num;
   2612c:	3601      	adds	r6, #1
    for (includes = &svc->includes[0]; *includes != NULL; ++includes) {
   2612e:	e7e5      	b.n	260fc <ble_gatt_show_local_inc_svc+0xc>
    }

    return num;
}
   26130:	4630      	mov	r0, r6
   26132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26136:	bf00      	nop
   26138:	00034c6c 	.word	0x00034c6c
   2613c:	000307ec 	.word	0x000307ec
   26140:	00031cfc 	.word	0x00031cfc
   26144:	00034c80 	.word	0x00034c80
   26148:	00034c90 	.word	0x00034c90
   2614c:	00034c9c 	.word	0x00034c9c

00026150 <ble_gatts_flags_to_str>:
{
   26150:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26154:	4681      	mov	r9, r0
   26156:	4688      	mov	r8, r1
   26158:	4615      	mov	r5, r2
    strcpy(buf, "[");
   2615a:	4b1b      	ldr	r3, [pc, #108]	; (261c8 <ble_gatts_flags_to_str+0x78>)
   2615c:	881b      	ldrh	r3, [r3, #0]
   2615e:	800b      	strh	r3, [r1, #0]
    length += 1;
   26160:	2601      	movs	r6, #1
    bool non_empty = false;
   26162:	f04f 0a00 	mov.w	sl, #0
    for (bit = 0; names[bit]; ++bit) {
   26166:	4654      	mov	r4, sl
   26168:	e006      	b.n	26178 <ble_gatts_flags_to_str+0x28>
            strcat(buf, names[bit]);
   2616a:	59e9      	ldr	r1, [r5, r7]
   2616c:	4640      	mov	r0, r8
   2616e:	f008 fcd5 	bl	2eb1c <strcat>
            non_empty = true;
   26172:	f04f 0a01 	mov.w	sl, #1
    for (bit = 0; names[bit]; ++bit) {
   26176:	3401      	adds	r4, #1
   26178:	00a7      	lsls	r7, r4, #2
   2617a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   2617e:	b1c0      	cbz	r0, 261b2 <ble_gatts_flags_to_str+0x62>
        if (flags & (1 << bit)) {
   26180:	fa49 f304 	asr.w	r3, r9, r4
   26184:	f013 0f01 	tst.w	r3, #1
   26188:	d0f5      	beq.n	26176 <ble_gatts_flags_to_str+0x26>
            length += strlen(names[bit]);
   2618a:	f7f4 fdda 	bl	1ad42 <strlen>
   2618e:	4406      	add	r6, r0
            if (length + 1 >= BLE_CHR_FLAGS_STR_LEN) {
   26190:	f106 0b01 	add.w	fp, r6, #1
   26194:	f1bb 0fb3 	cmp.w	fp, #179	; 0xb3
   26198:	d812      	bhi.n	261c0 <ble_gatts_flags_to_str+0x70>
            if (non_empty) {
   2619a:	f1ba 0f00 	cmp.w	sl, #0
   2619e:	d0e4      	beq.n	2616a <ble_gatts_flags_to_str+0x1a>
                strcat(buf, "|");
   261a0:	4640      	mov	r0, r8
   261a2:	f7f4 fdce 	bl	1ad42 <strlen>
   261a6:	4b09      	ldr	r3, [pc, #36]	; (261cc <ble_gatts_flags_to_str+0x7c>)
   261a8:	881b      	ldrh	r3, [r3, #0]
   261aa:	f828 3000 	strh.w	r3, [r8, r0]
                length += 1;
   261ae:	465e      	mov	r6, fp
   261b0:	e7db      	b.n	2616a <ble_gatts_flags_to_str+0x1a>
    strcat(buf, "]");
   261b2:	4640      	mov	r0, r8
   261b4:	f7f4 fdc5 	bl	1ad42 <strlen>
   261b8:	4b05      	ldr	r3, [pc, #20]	; (261d0 <ble_gatts_flags_to_str+0x80>)
   261ba:	881b      	ldrh	r3, [r3, #0]
   261bc:	f828 3000 	strh.w	r3, [r8, r0]
}
   261c0:	4640      	mov	r0, r8
   261c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   261c6:	bf00      	nop
   261c8:	00034cac 	.word	0x00034cac
   261cc:	00034cb0 	.word	0x00034cb0
   261d0:	000325d4 	.word	0x000325d4

000261d4 <ble_gatt_show_local_chr>:
{
   261d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   261d8:	460e      	mov	r6, r1
   261da:	4692      	mov	sl, r2
   261dc:	4699      	mov	r9, r3
    for (chr = svc->characteristics; chr && chr->uuid; ++chr) {
   261de:	f8d0 b00c 	ldr.w	fp, [r0, #12]
   261e2:	e02b      	b.n	2623c <ble_gatt_show_local_chr+0x68>
            console_printf("ccc descriptor\n");
   261e4:	484f      	ldr	r0, [pc, #316]	; (26324 <ble_gatt_show_local_chr+0x150>)
   261e6:	f7f5 ffa1 	bl	1c12c <console_printf>
            console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   261ea:	4651      	mov	r1, sl
   261ec:	484e      	ldr	r0, [pc, #312]	; (26328 <ble_gatt_show_local_chr+0x154>)
   261ee:	f003 fbf3 	bl	299d8 <ble_uuid_to_str>
   261f2:	4603      	mov	r3, r0
   261f4:	4a4d      	ldr	r2, [pc, #308]	; (2632c <ble_gatt_show_local_chr+0x158>)
   261f6:	4621      	mov	r1, r4
   261f8:	4638      	mov	r0, r7
   261fa:	f7f5 ff97 	bl	1c12c <console_printf>
            console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   261fe:	f8df 814c 	ldr.w	r8, [pc, #332]	; 2634c <ble_gatt_show_local_chr+0x178>
   26202:	462b      	mov	r3, r5
   26204:	4a4a      	ldr	r2, [pc, #296]	; (26330 <ble_gatt_show_local_chr+0x15c>)
   26206:	4621      	mov	r1, r4
   26208:	4640      	mov	r0, r8
   2620a:	f7f5 ff8f 	bl	1c12c <console_printf>
            console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   2620e:	2300      	movs	r3, #0
   26210:	4a48      	ldr	r2, [pc, #288]	; (26334 <ble_gatt_show_local_chr+0x160>)
   26212:	4621      	mov	r1, r4
   26214:	4640      	mov	r0, r8
   26216:	f7f5 ff89 	bl	1c12c <console_printf>
            console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   2621a:	4a47      	ldr	r2, [pc, #284]	; (26338 <ble_gatt_show_local_chr+0x164>)
   2621c:	4649      	mov	r1, r9
   2621e:	2003      	movs	r0, #3
   26220:	f7ff ff96 	bl	26150 <ble_gatts_flags_to_str>
   26224:	4603      	mov	r3, r0
   26226:	4a45      	ldr	r2, [pc, #276]	; (2633c <ble_gatt_show_local_chr+0x168>)
   26228:	4621      	mov	r1, r4
   2622a:	4638      	mov	r0, r7
   2622c:	f7f5 ff7e 	bl	1c12c <console_printf>
            handle++;
   26230:	1cf5      	adds	r5, r6, #3
   26232:	b2ad      	uxth	r5, r5
   26234:	e040      	b.n	262b8 <ble_gatt_show_local_chr+0xe4>
    for (chr = svc->characteristics; chr && chr->uuid; ++chr) {
   26236:	f10b 0b18 	add.w	fp, fp, #24
   2623a:	462e      	mov	r6, r5
   2623c:	f1bb 0f00 	cmp.w	fp, #0
   26240:	d06d      	beq.n	2631e <ble_gatt_show_local_chr+0x14a>
   26242:	f8db 3000 	ldr.w	r3, [fp]
   26246:	2b00      	cmp	r3, #0
   26248:	d069      	beq.n	2631e <ble_gatt_show_local_chr+0x14a>
        console_printf("characteristic\n");
   2624a:	483d      	ldr	r0, [pc, #244]	; (26340 <ble_gatt_show_local_chr+0x16c>)
   2624c:	f7f5 ff6e 	bl	1c12c <console_printf>
        console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   26250:	4651      	mov	r1, sl
   26252:	f8db 0000 	ldr.w	r0, [fp]
   26256:	f003 fbbf 	bl	299d8 <ble_uuid_to_str>
   2625a:	4603      	mov	r3, r0
   2625c:	4c39      	ldr	r4, [pc, #228]	; (26344 <ble_gatt_show_local_chr+0x170>)
   2625e:	4f3a      	ldr	r7, [pc, #232]	; (26348 <ble_gatt_show_local_chr+0x174>)
   26260:	4a32      	ldr	r2, [pc, #200]	; (2632c <ble_gatt_show_local_chr+0x158>)
   26262:	4621      	mov	r1, r4
   26264:	4638      	mov	r0, r7
   26266:	f7f5 ff61 	bl	1c12c <console_printf>
        console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   2626a:	4d38      	ldr	r5, [pc, #224]	; (2634c <ble_gatt_show_local_chr+0x178>)
   2626c:	4633      	mov	r3, r6
   2626e:	4a38      	ldr	r2, [pc, #224]	; (26350 <ble_gatt_show_local_chr+0x17c>)
   26270:	4621      	mov	r1, r4
   26272:	4628      	mov	r0, r5
   26274:	f7f5 ff5a 	bl	1c12c <console_printf>
        console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   26278:	1c73      	adds	r3, r6, #1
   2627a:	4a36      	ldr	r2, [pc, #216]	; (26354 <ble_gatt_show_local_chr+0x180>)
   2627c:	4621      	mov	r1, r4
   2627e:	4628      	mov	r0, r5
   26280:	f7f5 ff54 	bl	1c12c <console_printf>
        console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   26284:	f89b 3012 	ldrb.w	r3, [fp, #18]
   26288:	4a2a      	ldr	r2, [pc, #168]	; (26334 <ble_gatt_show_local_chr+0x160>)
   2628a:	4621      	mov	r1, r4
   2628c:	4628      	mov	r0, r5
   2628e:	f7f5 ff4d 	bl	1c12c <console_printf>
        console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   26292:	4a31      	ldr	r2, [pc, #196]	; (26358 <ble_gatt_show_local_chr+0x184>)
   26294:	4649      	mov	r1, r9
   26296:	f8bb 0010 	ldrh.w	r0, [fp, #16]
   2629a:	f7ff ff59 	bl	26150 <ble_gatts_flags_to_str>
   2629e:	4603      	mov	r3, r0
   262a0:	4a26      	ldr	r2, [pc, #152]	; (2633c <ble_gatt_show_local_chr+0x168>)
   262a2:	4621      	mov	r1, r4
   262a4:	4638      	mov	r0, r7
   262a6:	f7f5 ff41 	bl	1c12c <console_printf>
        handle += 2;
   262aa:	1cb5      	adds	r5, r6, #2
   262ac:	b2ad      	uxth	r5, r5
        if ((chr->flags & BLE_GATT_CHR_F_NOTIFY) ||
   262ae:	f8bb 3010 	ldrh.w	r3, [fp, #16]
   262b2:	f013 0f30 	tst.w	r3, #48	; 0x30
   262b6:	d195      	bne.n	261e4 <ble_gatt_show_local_chr+0x10>
        for (dsc = chr->descriptors; dsc && dsc->uuid; ++dsc) {
   262b8:	f8db 400c 	ldr.w	r4, [fp, #12]
   262bc:	2c00      	cmp	r4, #0
   262be:	d0ba      	beq.n	26236 <ble_gatt_show_local_chr+0x62>
   262c0:	6823      	ldr	r3, [r4, #0]
   262c2:	2b00      	cmp	r3, #0
   262c4:	d0b7      	beq.n	26236 <ble_gatt_show_local_chr+0x62>
            console_printf("descriptor\n");
   262c6:	4825      	ldr	r0, [pc, #148]	; (2635c <ble_gatt_show_local_chr+0x188>)
   262c8:	f7f5 ff30 	bl	1c12c <console_printf>
            console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   262cc:	4651      	mov	r1, sl
   262ce:	6820      	ldr	r0, [r4, #0]
   262d0:	f003 fb82 	bl	299d8 <ble_uuid_to_str>
   262d4:	4603      	mov	r3, r0
   262d6:	4e1b      	ldr	r6, [pc, #108]	; (26344 <ble_gatt_show_local_chr+0x170>)
   262d8:	4f1b      	ldr	r7, [pc, #108]	; (26348 <ble_gatt_show_local_chr+0x174>)
   262da:	4a14      	ldr	r2, [pc, #80]	; (2632c <ble_gatt_show_local_chr+0x158>)
   262dc:	4631      	mov	r1, r6
   262de:	4638      	mov	r0, r7
   262e0:	f7f5 ff24 	bl	1c12c <console_printf>
            console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   262e4:	f8df 8064 	ldr.w	r8, [pc, #100]	; 2634c <ble_gatt_show_local_chr+0x178>
   262e8:	462b      	mov	r3, r5
   262ea:	4a11      	ldr	r2, [pc, #68]	; (26330 <ble_gatt_show_local_chr+0x15c>)
   262ec:	4631      	mov	r1, r6
   262ee:	4640      	mov	r0, r8
   262f0:	f7f5 ff1c 	bl	1c12c <console_printf>
            console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   262f4:	7963      	ldrb	r3, [r4, #5]
   262f6:	4a0f      	ldr	r2, [pc, #60]	; (26334 <ble_gatt_show_local_chr+0x160>)
   262f8:	4631      	mov	r1, r6
   262fa:	4640      	mov	r0, r8
   262fc:	f7f5 ff16 	bl	1c12c <console_printf>
            console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   26300:	4a0d      	ldr	r2, [pc, #52]	; (26338 <ble_gatt_show_local_chr+0x164>)
   26302:	4649      	mov	r1, r9
   26304:	7920      	ldrb	r0, [r4, #4]
   26306:	f7ff ff23 	bl	26150 <ble_gatts_flags_to_str>
   2630a:	4603      	mov	r3, r0
   2630c:	4a0b      	ldr	r2, [pc, #44]	; (2633c <ble_gatt_show_local_chr+0x168>)
   2630e:	4631      	mov	r1, r6
   26310:	4638      	mov	r0, r7
   26312:	f7f5 ff0b 	bl	1c12c <console_printf>
            handle++;
   26316:	3501      	adds	r5, #1
   26318:	b2ad      	uxth	r5, r5
        for (dsc = chr->descriptors; dsc && dsc->uuid; ++dsc) {
   2631a:	3410      	adds	r4, #16
   2631c:	e7ce      	b.n	262bc <ble_gatt_show_local_chr+0xe8>
}
   2631e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26322:	bf00      	nop
   26324:	00034cec 	.word	0x00034cec
   26328:	100006d0 	.word	0x100006d0
   2632c:	00031cfc 	.word	0x00031cfc
   26330:	00034d20 	.word	0x00034d20
   26334:	00034cdc 	.word	0x00034cdc
   26338:	00034e1c 	.word	0x00034e1c
   2633c:	00030be0 	.word	0x00030be0
   26340:	00034cb4 	.word	0x00034cb4
   26344:	000307ec 	.word	0x000307ec
   26348:	00034c80 	.word	0x00034c80
   2634c:	00034c9c 	.word	0x00034c9c
   26350:	00034cc4 	.word	0x00034cc4
   26354:	00034cd0 	.word	0x00034cd0
   26358:	00034ddc 	.word	0x00034ddc
   2635c:	00034cf0 	.word	0x00034cf0

00026360 <ble_gatt_show_local_svc>:

static void
ble_gatt_show_local_svc(const struct ble_gatt_svc_def *svc,
                        uint16_t handle, uint16_t end_group_handle,
                        void *arg)
{
   26360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26364:	b0b8      	sub	sp, #224	; 0xe0
   26366:	4605      	mov	r5, r0
   26368:	460c      	mov	r4, r1
   2636a:	4617      	mov	r7, r2
    char uuid_buf[BLE_UUID_STR_LEN];
    char flags_buf[BLE_CHR_FLAGS_STR_LEN];

    console_printf("%s service\n",
                   svc->type == BLE_GATT_SVC_TYPE_PRIMARY ?
   2636c:	7803      	ldrb	r3, [r0, #0]
    console_printf("%s service\n",
   2636e:	2b01      	cmp	r3, #1
   26370:	d030      	beq.n	263d4 <ble_gatt_show_local_svc+0x74>
   26372:	4919      	ldr	r1, [pc, #100]	; (263d8 <ble_gatt_show_local_svc+0x78>)
   26374:	4819      	ldr	r0, [pc, #100]	; (263dc <ble_gatt_show_local_svc+0x7c>)
   26376:	f7f5 fed9 	bl	1c12c <console_printf>
                           "primary" : "secondary");
    console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   2637a:	a92e      	add	r1, sp, #184	; 0xb8
   2637c:	6868      	ldr	r0, [r5, #4]
   2637e:	f003 fb2b 	bl	299d8 <ble_uuid_to_str>
   26382:	4603      	mov	r3, r0
   26384:	4e16      	ldr	r6, [pc, #88]	; (263e0 <ble_gatt_show_local_svc+0x80>)
   26386:	4a17      	ldr	r2, [pc, #92]	; (263e4 <ble_gatt_show_local_svc+0x84>)
   26388:	4631      	mov	r1, r6
   2638a:	4817      	ldr	r0, [pc, #92]	; (263e8 <ble_gatt_show_local_svc+0x88>)
   2638c:	f7f5 fece 	bl	1c12c <console_printf>
                   "%s\n", " ", "uuid",
                   ble_uuid_to_str(svc->uuid, uuid_buf));
    console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   26390:	f8df 8064 	ldr.w	r8, [pc, #100]	; 263f8 <ble_gatt_show_local_svc+0x98>
   26394:	4623      	mov	r3, r4
   26396:	4a15      	ldr	r2, [pc, #84]	; (263ec <ble_gatt_show_local_svc+0x8c>)
   26398:	4631      	mov	r1, r6
   2639a:	4640      	mov	r0, r8
   2639c:	f7f5 fec6 	bl	1c12c <console_printf>
                   "%d\n", " ", "handle",
                   handle);
    console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   263a0:	463b      	mov	r3, r7
   263a2:	4a13      	ldr	r2, [pc, #76]	; (263f0 <ble_gatt_show_local_svc+0x90>)
   263a4:	4631      	mov	r1, r6
   263a6:	4640      	mov	r0, r8
   263a8:	f7f5 fec0 	bl	1c12c <console_printf>
                   "%d\n", " ", "end_handle",
                   end_group_handle);
    handle++;
   263ac:	3401      	adds	r4, #1
   263ae:	b2a4      	uxth	r4, r4

    if (svc->includes) {
   263b0:	68ab      	ldr	r3, [r5, #8]
   263b2:	b133      	cbz	r3, 263c2 <ble_gatt_show_local_svc+0x62>
        handle += ble_gatt_show_local_inc_svc(svc, handle, uuid_buf);
   263b4:	aa2e      	add	r2, sp, #184	; 0xb8
   263b6:	4621      	mov	r1, r4
   263b8:	4628      	mov	r0, r5
   263ba:	f7ff fe99 	bl	260f0 <ble_gatt_show_local_inc_svc>
   263be:	4404      	add	r4, r0
   263c0:	b2a4      	uxth	r4, r4
    }

    ble_gatt_show_local_chr(svc, handle,
   263c2:	ab01      	add	r3, sp, #4
   263c4:	aa2e      	add	r2, sp, #184	; 0xb8
   263c6:	4621      	mov	r1, r4
   263c8:	4628      	mov	r0, r5
   263ca:	f7ff ff03 	bl	261d4 <ble_gatt_show_local_chr>
                            uuid_buf, flags_buf);
}
   263ce:	b038      	add	sp, #224	; 0xe0
   263d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    console_printf("%s service\n",
   263d4:	4907      	ldr	r1, [pc, #28]	; (263f4 <ble_gatt_show_local_svc+0x94>)
   263d6:	e7cd      	b.n	26374 <ble_gatt_show_local_svc+0x14>
   263d8:	00034cfc 	.word	0x00034cfc
   263dc:	00034d10 	.word	0x00034d10
   263e0:	000307ec 	.word	0x000307ec
   263e4:	00031cfc 	.word	0x00031cfc
   263e8:	00034c80 	.word	0x00034c80
   263ec:	00034d20 	.word	0x00034d20
   263f0:	00034d1c 	.word	0x00034d1c
   263f4:	00034d08 	.word	0x00034d08
   263f8:	00034c9c 	.word	0x00034c9c

000263fc <ble_gatts_show_local>:

void
ble_gatts_show_local(void)
{
   263fc:	b508      	push	{r3, lr}
    ble_gatts_lcl_svc_foreach(ble_gatt_show_local_svc, NULL);
   263fe:	2100      	movs	r1, #0
   26400:	4801      	ldr	r0, [pc, #4]	; (26408 <ble_gatts_show_local+0xc>)
   26402:	f7ff fe27 	bl	26054 <ble_gatts_lcl_svc_foreach>
}
   26406:	bd08      	pop	{r3, pc}
   26408:	00026361 	.word	0x00026361

0002640c <ble_hs_wakeup_tx_conn>:
    }
}

static int
ble_hs_wakeup_tx_conn(struct ble_hs_conn *conn)
{
   2640c:	b510      	push	{r4, lr}
   2640e:	b082      	sub	sp, #8
   26410:	4604      	mov	r4, r0
    struct os_mbuf_pkthdr *omp;
    struct os_mbuf *om;
    int rc;

    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   26412:	e00a      	b.n	2642a <ble_hs_wakeup_tx_conn+0x1e>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   26414:	f104 023c 	add.w	r2, r4, #60	; 0x3c
   26418:	6422      	str	r2, [r4, #64]	; 0x40

        om = OS_MBUF_PKTHDR_TO_MBUF(omp);
   2641a:	3b10      	subs	r3, #16
   2641c:	9301      	str	r3, [sp, #4]
        rc = ble_hs_hci_acl_tx_now(conn, &om);
   2641e:	a901      	add	r1, sp, #4
   26420:	4620      	mov	r0, r4
   26422:	f001 fbb5 	bl	27b90 <ble_hs_hci_acl_tx_now>
        if (rc == BLE_HS_EAGAIN) {
   26426:	2801      	cmp	r0, #1
   26428:	d006      	beq.n	26438 <ble_hs_wakeup_tx_conn+0x2c>
    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   2642a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2642c:	b17b      	cbz	r3, 2644e <ble_hs_wakeup_tx_conn+0x42>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   2642e:	685a      	ldr	r2, [r3, #4]
   26430:	63e2      	str	r2, [r4, #60]	; 0x3c
   26432:	2a00      	cmp	r2, #0
   26434:	d1f1      	bne.n	2641a <ble_hs_wakeup_tx_conn+0xe>
   26436:	e7ed      	b.n	26414 <ble_hs_wakeup_tx_conn+0x8>
            /* Controller is at capacity.  This packet will be the first to
             * get transmitted next time around.
             */
            STAILQ_INSERT_HEAD(&conn->bhc_tx_q, OS_MBUF_PKTHDR(om), omp_next);
   26438:	9b01      	ldr	r3, [sp, #4]
   2643a:	f103 0110 	add.w	r1, r3, #16
   2643e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   26440:	615a      	str	r2, [r3, #20]
   26442:	b10a      	cbz	r2, 26448 <ble_hs_wakeup_tx_conn+0x3c>
   26444:	63e1      	str	r1, [r4, #60]	; 0x3c
            return BLE_HS_EAGAIN;
   26446:	e003      	b.n	26450 <ble_hs_wakeup_tx_conn+0x44>
            STAILQ_INSERT_HEAD(&conn->bhc_tx_q, OS_MBUF_PKTHDR(om), omp_next);
   26448:	3314      	adds	r3, #20
   2644a:	6423      	str	r3, [r4, #64]	; 0x40
   2644c:	e7fa      	b.n	26444 <ble_hs_wakeup_tx_conn+0x38>
        }
    }

    return 0;
   2644e:	2000      	movs	r0, #0
}
   26450:	b002      	add	sp, #8
   26452:	bd10      	pop	{r4, pc}

00026454 <ble_hs_event_rx_hci_ev>:
#endif
}

static void
ble_hs_event_rx_hci_ev(struct ble_npl_event *ev)
{
   26454:	b510      	push	{r4, lr}
   26456:	4601      	mov	r1, r0
    return ev->ev.ev_arg;
   26458:	6884      	ldr	r4, [r0, #8]
    const struct ble_hci_ev *hci_ev;
    int rc;

    hci_ev = ble_npl_event_get_arg(ev);

    rc = os_memblock_put(&ble_hs_hci_ev_pool, ev);
   2645a:	4803      	ldr	r0, [pc, #12]	; (26468 <ble_hs_event_rx_hci_ev+0x14>)
   2645c:	f7f3 fd31 	bl	19ec2 <os_memblock_put>
#if BLE_MONITOR
    ble_monitor_send(BLE_MONITOR_OPCODE_EVENT_PKT, hci_ev,
                     hci_ev->length + sizeof(*hci_ev));
#endif

    ble_hs_hci_evt_process(hci_ev);
   26460:	4620      	mov	r0, r4
   26462:	f001 fe5b 	bl	2811c <ble_hs_hci_evt_process>
}
   26466:	bd10      	pop	{r4, pc}
   26468:	10005d54 	.word	0x10005d54

0002646c <ble_hs_clear_rx_queue>:
{
   2646c:	b508      	push	{r3, lr}
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
   2646e:	4805      	ldr	r0, [pc, #20]	; (26484 <ble_hs_clear_rx_queue+0x18>)
   26470:	f002 f902 	bl	28678 <ble_mqueue_get>
   26474:	4603      	mov	r3, r0
   26476:	b118      	cbz	r0, 26480 <ble_hs_clear_rx_queue+0x14>
        os_mbuf_free_chain(om);
   26478:	4618      	mov	r0, r3
   2647a:	f7f3 f8c8 	bl	1960e <os_mbuf_free_chain>
   2647e:	e7f6      	b.n	2646e <ble_hs_clear_rx_queue+0x2>
}
   26480:	bd08      	pop	{r3, pc}
   26482:	bf00      	nop
   26484:	10005e2c 	.word	0x10005e2c

00026488 <ble_hs_rx_data>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
ble_hs_rx_data(struct os_mbuf *om, void *arg)
{
   26488:	b510      	push	{r4, lr}
   2648a:	4604      	mov	r4, r0
    int rc;

    /* If flow control is enabled, mark this packet with its corresponding
     * connection handle.
     */
    ble_hs_flow_track_data_mbuf(om);
   2648c:	f001 fa0d 	bl	278aa <ble_hs_flow_track_data_mbuf>

    rc = ble_mqueue_put(&ble_hs_rx_q, ble_hs_evq, om);
   26490:	4622      	mov	r2, r4
   26492:	4b06      	ldr	r3, [pc, #24]	; (264ac <ble_hs_rx_data+0x24>)
   26494:	6819      	ldr	r1, [r3, #0]
   26496:	4806      	ldr	r0, [pc, #24]	; (264b0 <ble_hs_rx_data+0x28>)
   26498:	f002 f8ff 	bl	2869a <ble_mqueue_put>
    if (rc != 0) {
   2649c:	b900      	cbnz	r0, 264a0 <ble_hs_rx_data+0x18>
        os_mbuf_free_chain(om);
        return BLE_HS_EOS;
    }

    return 0;
}
   2649e:	bd10      	pop	{r4, pc}
        os_mbuf_free_chain(om);
   264a0:	4620      	mov	r0, r4
   264a2:	f7f3 f8b4 	bl	1960e <os_mbuf_free_chain>
        return BLE_HS_EOS;
   264a6:	200b      	movs	r0, #11
   264a8:	e7f9      	b.n	2649e <ble_hs_rx_data+0x16>
   264aa:	bf00      	nop
   264ac:	10005d50 	.word	0x10005d50
   264b0:	10005e2c 	.word	0x10005e2c

000264b4 <ble_hs_event_tx_notify>:
{
   264b4:	b508      	push	{r3, lr}
    ble_gatts_tx_notifications();
   264b6:	f7ff fd4f 	bl	25f58 <ble_gatts_tx_notifications>
}
   264ba:	bd08      	pop	{r3, pc}

000264bc <ble_hs_evq_get>:
}
   264bc:	4b01      	ldr	r3, [pc, #4]	; (264c4 <ble_hs_evq_get+0x8>)
   264be:	6818      	ldr	r0, [r3, #0]
   264c0:	4770      	bx	lr
   264c2:	bf00      	nop
   264c4:	10005d50 	.word	0x10005d50

000264c8 <ble_hs_sched_start_stage2>:
{
   264c8:	b508      	push	{r3, lr}
    ble_npl_eventq_put((struct ble_npl_eventq *)ble_hs_evq_get(),
   264ca:	f7ff fff7 	bl	264bc <ble_hs_evq_get>
    os_eventq_put(&evq->evq, &ev->ev);
   264ce:	4902      	ldr	r1, [pc, #8]	; (264d8 <ble_hs_sched_start_stage2+0x10>)
   264d0:	f7f2 ffa1 	bl	19416 <os_eventq_put>
}
   264d4:	bd08      	pop	{r3, pc}
   264d6:	bf00      	nop
   264d8:	10005d30 	.word	0x10005d30

000264dc <ble_hs_event_start_stage1>:
{
   264dc:	b508      	push	{r3, lr}
    ble_hs_sched_start_stage2();
   264de:	f7ff fff3 	bl	264c8 <ble_hs_sched_start_stage2>
}
   264e2:	bd08      	pop	{r3, pc}

000264e4 <ble_hs_evq_set>:
    ble_hs_evq = evq;
   264e4:	4b01      	ldr	r3, [pc, #4]	; (264ec <ble_hs_evq_set+0x8>)
   264e6:	6018      	str	r0, [r3, #0]
}
   264e8:	4770      	bx	lr
   264ea:	bf00      	nop
   264ec:	10005d50 	.word	0x10005d50

000264f0 <ble_hs_is_parent_task>:
{
   264f0:	b508      	push	{r3, lr}
    return os_started();
   264f2:	f7f2 fd05 	bl	18f00 <os_started>
    return !ble_npl_os_started() ||
   264f6:	b908      	cbnz	r0, 264fc <ble_hs_is_parent_task+0xc>
   264f8:	2001      	movs	r0, #1
}
   264fa:	bd08      	pop	{r3, pc}
    return os_sched_get_current_task();
   264fc:	f7f3 fe8c 	bl	1a218 <os_sched_get_current_task>
           ble_npl_get_current_task_id() == ble_hs_parent_task;
   26500:	4b03      	ldr	r3, [pc, #12]	; (26510 <ble_hs_is_parent_task+0x20>)
   26502:	681b      	ldr	r3, [r3, #0]
    return !ble_npl_os_started() ||
   26504:	4283      	cmp	r3, r0
   26506:	d001      	beq.n	2650c <ble_hs_is_parent_task+0x1c>
   26508:	2000      	movs	r0, #0
   2650a:	e7f6      	b.n	264fa <ble_hs_is_parent_task+0xa>
   2650c:	2001      	movs	r0, #1
   2650e:	e7f4      	b.n	264fa <ble_hs_is_parent_task+0xa>
   26510:	10005e24 	.word	0x10005e24

00026514 <ble_hs_lock_nested>:
{
   26514:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   26516:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2651a:	4802      	ldr	r0, [pc, #8]	; (26524 <ble_hs_lock_nested+0x10>)
   2651c:	f7f4 fb0e 	bl	1ab3c <os_mutex_pend>
}
   26520:	bd08      	pop	{r3, pc}
   26522:	bf00      	nop
   26524:	10005e18 	.word	0x10005e18

00026528 <ble_hs_unlock_nested>:
{
   26528:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   2652a:	4802      	ldr	r0, [pc, #8]	; (26534 <ble_hs_unlock_nested+0xc>)
   2652c:	f7f4 faa6 	bl	1aa7c <os_mutex_release>
}
   26530:	bd08      	pop	{r3, pc}
   26532:	bf00      	nop
   26534:	10005e18 	.word	0x10005e18

00026538 <ble_hs_lock>:
{
   26538:	b508      	push	{r3, lr}
    ble_hs_lock_nested();
   2653a:	f7ff ffeb 	bl	26514 <ble_hs_lock_nested>
}
   2653e:	bd08      	pop	{r3, pc}

00026540 <ble_hs_unlock>:
{
   26540:	b508      	push	{r3, lr}
    ble_hs_unlock_nested();
   26542:	f7ff fff1 	bl	26528 <ble_hs_unlock_nested>
}
   26546:	bd08      	pop	{r3, pc}

00026548 <ble_hs_process_rx_data_queue>:
{
   26548:	b508      	push	{r3, lr}
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
   2654a:	4805      	ldr	r0, [pc, #20]	; (26560 <ble_hs_process_rx_data_queue+0x18>)
   2654c:	f002 f894 	bl	28678 <ble_mqueue_get>
   26550:	4603      	mov	r3, r0
   26552:	b118      	cbz	r0, 2655c <ble_hs_process_rx_data_queue+0x14>
        ble_hs_hci_evt_acl_process(om);
   26554:	4618      	mov	r0, r3
   26556:	f001 fdff 	bl	28158 <ble_hs_hci_evt_acl_process>
   2655a:	e7f6      	b.n	2654a <ble_hs_process_rx_data_queue+0x2>
}
   2655c:	bd08      	pop	{r3, pc}
   2655e:	bf00      	nop
   26560:	10005e2c 	.word	0x10005e2c

00026564 <ble_hs_event_rx_data>:
{
   26564:	b508      	push	{r3, lr}
    ble_hs_process_rx_data_queue();
   26566:	f7ff ffef 	bl	26548 <ble_hs_process_rx_data_queue>
}
   2656a:	bd08      	pop	{r3, pc}

0002656c <ble_hs_wakeup_tx>:
{
   2656c:	b510      	push	{r4, lr}
    ble_hs_lock();
   2656e:	f7ff ffe3 	bl	26538 <ble_hs_lock>
    for (conn = ble_hs_conn_first();
   26572:	f001 f88f 	bl	27694 <ble_hs_conn_first>
   26576:	b148      	cbz	r0, 2658c <ble_hs_wakeup_tx+0x20>
        if (conn->bhc_flags & BLE_HS_CONN_F_TX_FRAG) {
   26578:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   2657c:	f013 0f04 	tst.w	r3, #4
   26580:	d101      	bne.n	26586 <ble_hs_wakeup_tx+0x1a>
         conn = SLIST_NEXT(conn, bhc_next)) {
   26582:	6800      	ldr	r0, [r0, #0]
   26584:	e7f7      	b.n	26576 <ble_hs_wakeup_tx+0xa>
            rc = ble_hs_wakeup_tx_conn(conn);
   26586:	f7ff ff41 	bl	2640c <ble_hs_wakeup_tx_conn>
            if (rc != 0) {
   2658a:	b948      	cbnz	r0, 265a0 <ble_hs_wakeup_tx+0x34>
    for (conn = ble_hs_conn_first();
   2658c:	f001 f882 	bl	27694 <ble_hs_conn_first>
   26590:	4604      	mov	r4, r0
   26592:	b12c      	cbz	r4, 265a0 <ble_hs_wakeup_tx+0x34>
        rc = ble_hs_wakeup_tx_conn(conn);
   26594:	4620      	mov	r0, r4
   26596:	f7ff ff39 	bl	2640c <ble_hs_wakeup_tx_conn>
        if (rc != 0) {
   2659a:	b908      	cbnz	r0, 265a0 <ble_hs_wakeup_tx+0x34>
         conn = SLIST_NEXT(conn, bhc_next)) {
   2659c:	6824      	ldr	r4, [r4, #0]
   2659e:	e7f8      	b.n	26592 <ble_hs_wakeup_tx+0x26>
    ble_hs_unlock();
   265a0:	f7ff ffce 	bl	26540 <ble_hs_unlock>
}
   265a4:	bd10      	pop	{r4, pc}
	...

000265a8 <ble_hs_is_enabled>:
    return ble_hs_enabled_state == BLE_HS_ENABLED_STATE_ON;
   265a8:	4b03      	ldr	r3, [pc, #12]	; (265b8 <ble_hs_is_enabled+0x10>)
   265aa:	7818      	ldrb	r0, [r3, #0]
}
   265ac:	2802      	cmp	r0, #2
   265ae:	bf14      	ite	ne
   265b0:	2000      	movne	r0, #0
   265b2:	2001      	moveq	r0, #1
   265b4:	4770      	bx	lr
   265b6:	bf00      	nop
   265b8:	10005d0c 	.word	0x10005d0c

000265bc <ble_hs_timer_reset>:
{
   265bc:	b510      	push	{r4, lr}
   265be:	4604      	mov	r4, r0
    if (!ble_hs_is_enabled()) {
   265c0:	f7ff fff2 	bl	265a8 <ble_hs_is_enabled>
   265c4:	b918      	cbnz	r0, 265ce <ble_hs_timer_reset+0x12>
    os_callout_stop(&co->co);
   265c6:	4804      	ldr	r0, [pc, #16]	; (265d8 <ble_hs_timer_reset+0x1c>)
   265c8:	f7f2 fd9e 	bl	19108 <os_callout_stop>
}
   265cc:	bd10      	pop	{r4, pc}
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   265ce:	4621      	mov	r1, r4
   265d0:	4801      	ldr	r0, [pc, #4]	; (265d8 <ble_hs_timer_reset+0x1c>)
   265d2:	f7f2 fdb7 	bl	19144 <os_callout_reset>
   265d6:	e7f9      	b.n	265cc <ble_hs_timer_reset+0x10>
   265d8:	10005e80 	.word	0x10005e80

000265dc <ble_hs_timer_sched>:
    if (ticks_from_now == BLE_HS_FOREVER) {
   265dc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   265e0:	4298      	cmp	r0, r3
   265e2:	d010      	beq.n	26606 <ble_hs_timer_sched+0x2a>
{
   265e4:	b510      	push	{r4, lr}
   265e6:	4604      	mov	r4, r0
    return os_time_get();
   265e8:	f7f4 f840 	bl	1a66c <os_time_get>
    abs_time = ble_npl_time_get() + ticks_from_now;
   265ec:	4420      	add	r0, r4
   265ee:	4b06      	ldr	r3, [pc, #24]	; (26608 <ble_hs_timer_sched+0x2c>)
   265f0:	69db      	ldr	r3, [r3, #28]
    if (!ble_npl_callout_is_active(&ble_hs_timer) ||
   265f2:	b123      	cbz	r3, 265fe <ble_hs_timer_sched+0x22>
    return co->co.c_ticks;
   265f4:	4b04      	ldr	r3, [pc, #16]	; (26608 <ble_hs_timer_sched+0x2c>)
   265f6:	695b      	ldr	r3, [r3, #20]
            ((ble_npl_stime_t)(abs_time -
   265f8:	1ac0      	subs	r0, r0, r3
    if (!ble_npl_callout_is_active(&ble_hs_timer) ||
   265fa:	2800      	cmp	r0, #0
   265fc:	da02      	bge.n	26604 <ble_hs_timer_sched+0x28>
        ble_hs_timer_reset(ticks_from_now);
   265fe:	4620      	mov	r0, r4
   26600:	f7ff ffdc 	bl	265bc <ble_hs_timer_reset>
}
   26604:	bd10      	pop	{r4, pc}
   26606:	4770      	bx	lr
   26608:	10005e80 	.word	0x10005e80

0002660c <ble_hs_sync>:
{
   2660c:	b510      	push	{r4, lr}
    ble_hs_sync_state = BLE_HS_SYNC_STATE_BRINGUP;
   2660e:	4b14      	ldr	r3, [pc, #80]	; (26660 <ble_hs_sync+0x54>)
   26610:	2201      	movs	r2, #1
   26612:	701a      	strb	r2, [r3, #0]
    rc = ble_hs_startup_go();
   26614:	f002 fa74 	bl	28b00 <ble_hs_startup_go>
    if (rc == 0) {
   26618:	4604      	mov	r4, r0
   2661a:	b940      	cbnz	r0, 2662e <ble_hs_sync+0x22>
        ble_hs_sync_state = BLE_HS_SYNC_STATE_GOOD;
   2661c:	4b10      	ldr	r3, [pc, #64]	; (26660 <ble_hs_sync+0x54>)
   2661e:	2202      	movs	r2, #2
   26620:	701a      	strb	r2, [r3, #0]
    ble_hs_timer_sched(retry_tmo_ticks);
   26622:	200c      	movs	r0, #12
   26624:	f7ff ffda 	bl	265dc <ble_hs_timer_sched>
    if (rc == 0) {
   26628:	b12c      	cbz	r4, 26636 <ble_hs_sync+0x2a>
}
   2662a:	4620      	mov	r0, r4
   2662c:	bd10      	pop	{r4, pc}
        ble_hs_sync_state = BLE_HS_SYNC_STATE_BAD;
   2662e:	4b0c      	ldr	r3, [pc, #48]	; (26660 <ble_hs_sync+0x54>)
   26630:	2200      	movs	r2, #0
   26632:	701a      	strb	r2, [r3, #0]
   26634:	e7f5      	b.n	26622 <ble_hs_sync+0x16>
        rc = ble_hs_misc_restore_irks();
   26636:	f002 f80b 	bl	28650 <ble_hs_misc_restore_irks>
        if (rc != 0) {
   2663a:	4604      	mov	r4, r0
   2663c:	b940      	cbnz	r0, 26650 <ble_hs_sync+0x44>
        if (ble_hs_cfg.sync_cb != NULL) {
   2663e:	4b09      	ldr	r3, [pc, #36]	; (26664 <ble_hs_sync+0x58>)
   26640:	691b      	ldr	r3, [r3, #16]
   26642:	b103      	cbz	r3, 26646 <ble_hs_sync+0x3a>
            ble_hs_cfg.sync_cb();
   26644:	4798      	blx	r3
        STATS_INC(ble_hs_stats, sync);
   26646:	4a08      	ldr	r2, [pc, #32]	; (26668 <ble_hs_sync+0x5c>)
   26648:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2664a:	3301      	adds	r3, #1
   2664c:	62d3      	str	r3, [r2, #44]	; 0x2c
    return rc;
   2664e:	e7ec      	b.n	2662a <ble_hs_sync+0x1e>
            BLE_HS_LOG(INFO, "Failed to restore IRKs from store; status=%d\n",
   26650:	4603      	mov	r3, r0
   26652:	4a06      	ldr	r2, [pc, #24]	; (2666c <ble_hs_sync+0x60>)
   26654:	2101      	movs	r1, #1
   26656:	2004      	movs	r0, #4
   26658:	f7f6 fb60 	bl	1cd1c <modlog_printf>
   2665c:	e7ef      	b.n	2663e <ble_hs_sync+0x32>
   2665e:	bf00      	nop
   26660:	10005e7c 	.word	0x10005e7c
   26664:	100006d4 	.word	0x100006d4
   26668:	10005e44 	.word	0x10005e44
   2666c:	00034e40 	.word	0x00034e40

00026670 <ble_hs_reset>:
{
   26670:	b508      	push	{r3, lr}
    STATS_INC(ble_hs_stats, reset);
   26672:	4a0f      	ldr	r2, [pc, #60]	; (266b0 <ble_hs_reset+0x40>)
   26674:	6a93      	ldr	r3, [r2, #40]	; 0x28
   26676:	3301      	adds	r3, #1
   26678:	6293      	str	r3, [r2, #40]	; 0x28
    ble_hs_sync_state = 0;
   2667a:	4b0e      	ldr	r3, [pc, #56]	; (266b4 <ble_hs_reset+0x44>)
   2667c:	2200      	movs	r2, #0
   2667e:	701a      	strb	r2, [r3, #0]
    (void)ble_hci_trans_reset();
   26680:	f004 f92a 	bl	2a8d8 <ble_hci_trans_reset>
    ble_hs_clear_rx_queue();
   26684:	f7ff fef2 	bl	2646c <ble_hs_clear_rx_queue>
    ble_gap_reset_state(ble_hs_reset_reason);
   26688:	4b0b      	ldr	r3, [pc, #44]	; (266b8 <ble_hs_reset+0x48>)
   2668a:	6818      	ldr	r0, [r3, #0]
   2668c:	f7fc f930 	bl	228f0 <ble_gap_reset_state>
    ble_hs_id_reset();
   26690:	f001 ff02 	bl	28498 <ble_hs_id_reset>
    if (ble_hs_cfg.reset_cb != NULL && ble_hs_reset_reason != 0) {
   26694:	4b09      	ldr	r3, [pc, #36]	; (266bc <ble_hs_reset+0x4c>)
   26696:	68db      	ldr	r3, [r3, #12]
   26698:	b11b      	cbz	r3, 266a2 <ble_hs_reset+0x32>
   2669a:	4a07      	ldr	r2, [pc, #28]	; (266b8 <ble_hs_reset+0x48>)
   2669c:	6810      	ldr	r0, [r2, #0]
   2669e:	b100      	cbz	r0, 266a2 <ble_hs_reset+0x32>
        ble_hs_cfg.reset_cb(ble_hs_reset_reason);
   266a0:	4798      	blx	r3
    ble_hs_reset_reason = 0;
   266a2:	4b05      	ldr	r3, [pc, #20]	; (266b8 <ble_hs_reset+0x48>)
   266a4:	2200      	movs	r2, #0
   266a6:	601a      	str	r2, [r3, #0]
    rc = ble_hs_sync();
   266a8:	f7ff ffb0 	bl	2660c <ble_hs_sync>
}
   266ac:	bd08      	pop	{r3, pc}
   266ae:	bf00      	nop
   266b0:	10005e44 	.word	0x10005e44
   266b4:	10005e7c 	.word	0x10005e7c
   266b8:	10005e28 	.word	0x10005e28
   266bc:	100006d4 	.word	0x100006d4

000266c0 <ble_hs_event_reset>:
{
   266c0:	b508      	push	{r3, lr}
    ble_hs_reset();
   266c2:	f7ff ffd5 	bl	26670 <ble_hs_reset>
}
   266c6:	bd08      	pop	{r3, pc}

000266c8 <ble_hs_timer_exp>:
{
   266c8:	b508      	push	{r3, lr}
    switch (ble_hs_sync_state) {
   266ca:	4b13      	ldr	r3, [pc, #76]	; (26718 <ble_hs_timer_exp+0x50>)
   266cc:	781b      	ldrb	r3, [r3, #0]
   266ce:	b1b3      	cbz	r3, 266fe <ble_hs_timer_exp+0x36>
   266d0:	2b02      	cmp	r3, #2
   266d2:	d117      	bne.n	26704 <ble_hs_timer_exp+0x3c>
        ticks_until_next = ble_gattc_timer();
   266d4:	f7fd ff58 	bl	24588 <ble_gattc_timer>
        ble_hs_timer_sched(ticks_until_next);
   266d8:	f7ff ff80 	bl	265dc <ble_hs_timer_sched>
        ticks_until_next = ble_l2cap_sig_timer();
   266dc:	f002 feb0 	bl	29440 <ble_l2cap_sig_timer>
        ble_hs_timer_sched(ticks_until_next);
   266e0:	f7ff ff7c 	bl	265dc <ble_hs_timer_sched>
        ble_hs_timer_sched(ticks_until_next);
   266e4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   266e8:	f7ff ff78 	bl	265dc <ble_hs_timer_sched>
        ticks_until_next = ble_hs_conn_timer();
   266ec:	f001 f884 	bl	277f8 <ble_hs_conn_timer>
        ble_hs_timer_sched(ticks_until_next);
   266f0:	f7ff ff74 	bl	265dc <ble_hs_timer_sched>
        ticks_until_next = ble_gap_timer();
   266f4:	f7fb fbe2 	bl	21ebc <ble_gap_timer>
        ble_hs_timer_sched(ticks_until_next);
   266f8:	f7ff ff70 	bl	265dc <ble_hs_timer_sched>
}
   266fc:	bd08      	pop	{r3, pc}
        ble_hs_reset();
   266fe:	f7ff ffb7 	bl	26670 <ble_hs_reset>
        break;
   26702:	e7fb      	b.n	266fc <ble_hs_timer_exp+0x34>
        assert(0);
   26704:	f7ed fffe 	bl	14704 <hal_debugger_connected>
   26708:	b100      	cbz	r0, 2670c <ble_hs_timer_exp+0x44>
   2670a:	be01      	bkpt	0x0001
   2670c:	2300      	movs	r3, #0
   2670e:	461a      	mov	r2, r3
   26710:	4619      	mov	r1, r3
   26712:	4618      	mov	r0, r3
   26714:	f7f2 fb06 	bl	18d24 <__assert_func>
   26718:	10005e7c 	.word	0x10005e7c

0002671c <ble_hs_timer_resched>:
{
   2671c:	b508      	push	{r3, lr}
    ble_hs_timer_reset(0);
   2671e:	2000      	movs	r0, #0
   26720:	f7ff ff4c 	bl	265bc <ble_hs_timer_reset>
}
   26724:	bd08      	pop	{r3, pc}
	...

00026728 <ble_hs_sched_start>:
{
   26728:	b508      	push	{r3, lr}
    ble_npl_eventq_put((struct ble_npl_eventq *)os_eventq_dflt_get(),
   2672a:	f7f2 ff2d 	bl	19588 <os_eventq_dflt_get>
    os_eventq_put(&evq->evq, &ev->ev);
   2672e:	4902      	ldr	r1, [pc, #8]	; (26738 <ble_hs_sched_start+0x10>)
   26730:	f7f2 fe71 	bl	19416 <os_eventq_put>
}
   26734:	bd08      	pop	{r3, pc}
   26736:	bf00      	nop
   26738:	10005d20 	.word	0x10005d20

0002673c <ble_hs_enqueue_hci_event>:
{
   2673c:	b510      	push	{r4, lr}
   2673e:	4604      	mov	r4, r0
    ev = os_memblock_get(&ble_hs_hci_ev_pool);
   26740:	480a      	ldr	r0, [pc, #40]	; (2676c <ble_hs_enqueue_hci_event+0x30>)
   26742:	f7f3 fb96 	bl	19e72 <os_memblock_get>
    if (ev == NULL) {
   26746:	b160      	cbz	r0, 26762 <ble_hs_enqueue_hci_event+0x26>
   26748:	4601      	mov	r1, r0
    memset(ev, 0, sizeof(*ev));
   2674a:	2300      	movs	r3, #0
   2674c:	6003      	str	r3, [r0, #0]
   2674e:	60c3      	str	r3, [r0, #12]
    ev->ev.ev_queued = 0;
   26750:	7003      	strb	r3, [r0, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   26752:	4b07      	ldr	r3, [pc, #28]	; (26770 <ble_hs_enqueue_hci_event+0x34>)
   26754:	6043      	str	r3, [r0, #4]
    ev->ev.ev_arg = arg;
   26756:	6084      	str	r4, [r0, #8]
    os_eventq_put(&evq->evq, &ev->ev);
   26758:	4b06      	ldr	r3, [pc, #24]	; (26774 <ble_hs_enqueue_hci_event+0x38>)
   2675a:	6818      	ldr	r0, [r3, #0]
   2675c:	f7f2 fe5b 	bl	19416 <os_eventq_put>
}
   26760:	bd10      	pop	{r4, pc}
        ble_hci_trans_buf_free(hci_evt);
   26762:	4620      	mov	r0, r4
   26764:	f004 f8f2 	bl	2a94c <ble_hci_trans_buf_free>
   26768:	e7fa      	b.n	26760 <ble_hs_enqueue_hci_event+0x24>
   2676a:	bf00      	nop
   2676c:	10005d54 	.word	0x10005d54
   26770:	00026455 	.word	0x00026455
   26774:	10005d50 	.word	0x10005d50

00026778 <ble_hs_notifications_sched>:
{
   26778:	b508      	push	{r3, lr}
   2677a:	4903      	ldr	r1, [pc, #12]	; (26788 <ble_hs_notifications_sched+0x10>)
   2677c:	4b03      	ldr	r3, [pc, #12]	; (2678c <ble_hs_notifications_sched+0x14>)
   2677e:	6818      	ldr	r0, [r3, #0]
   26780:	f7f2 fe49 	bl	19416 <os_eventq_put>
}
   26784:	bd08      	pop	{r3, pc}
   26786:	bf00      	nop
   26788:	10005d40 	.word	0x10005d40
   2678c:	10005d50 	.word	0x10005d50

00026790 <ble_hs_sched_reset>:
{
   26790:	b508      	push	{r3, lr}
    ble_hs_reset_reason = reason;
   26792:	4b04      	ldr	r3, [pc, #16]	; (267a4 <ble_hs_sched_reset+0x14>)
   26794:	6018      	str	r0, [r3, #0]
   26796:	4904      	ldr	r1, [pc, #16]	; (267a8 <ble_hs_sched_reset+0x18>)
   26798:	4b04      	ldr	r3, [pc, #16]	; (267ac <ble_hs_sched_reset+0x1c>)
   2679a:	6818      	ldr	r0, [r3, #0]
   2679c:	f7f2 fe3b 	bl	19416 <os_eventq_put>
}
   267a0:	bd08      	pop	{r3, pc}
   267a2:	bf00      	nop
   267a4:	10005e28 	.word	0x10005e28
   267a8:	10005d10 	.word	0x10005d10
   267ac:	10005d50 	.word	0x10005d50

000267b0 <ble_hs_hw_error>:
{
   267b0:	b508      	push	{r3, lr}
    ble_hs_sched_reset(BLE_HS_HW_ERR(hw_code));
   267b2:	f500 60c0 	add.w	r0, r0, #1536	; 0x600
   267b6:	f7ff ffeb 	bl	26790 <ble_hs_sched_reset>
}
   267ba:	bd08      	pop	{r3, pc}

000267bc <ble_hs_start>:
{
   267bc:	b510      	push	{r4, lr}
    ble_hs_lock();
   267be:	f7ff febb 	bl	26538 <ble_hs_lock>
    switch (ble_hs_enabled_state) {
   267c2:	4b18      	ldr	r3, [pc, #96]	; (26824 <ble_hs_start+0x68>)
   267c4:	781b      	ldrb	r3, [r3, #0]
   267c6:	2b01      	cmp	r3, #1
   267c8:	d028      	beq.n	2681c <ble_hs_start+0x60>
   267ca:	2b02      	cmp	r3, #2
   267cc:	d021      	beq.n	26812 <ble_hs_start+0x56>
   267ce:	b14b      	cbz	r3, 267e4 <ble_hs_start+0x28>
        assert(0);
   267d0:	f7ed ff98 	bl	14704 <hal_debugger_connected>
   267d4:	b100      	cbz	r0, 267d8 <ble_hs_start+0x1c>
   267d6:	be01      	bkpt	0x0001
   267d8:	2300      	movs	r3, #0
   267da:	461a      	mov	r2, r3
   267dc:	4619      	mov	r1, r3
   267de:	4618      	mov	r0, r3
   267e0:	f7f2 faa0 	bl	18d24 <__assert_func>
        ble_hs_enabled_state = BLE_HS_ENABLED_STATE_ON;
   267e4:	4b0f      	ldr	r3, [pc, #60]	; (26824 <ble_hs_start+0x68>)
   267e6:	2202      	movs	r2, #2
   267e8:	701a      	strb	r2, [r3, #0]
    ble_hs_unlock();
   267ea:	f7ff fea9 	bl	26540 <ble_hs_unlock>
    return os_sched_get_current_task();
   267ee:	f7f3 fd13 	bl	1a218 <os_sched_get_current_task>
    ble_hs_parent_task = ble_npl_get_current_task_id();
   267f2:	4b0d      	ldr	r3, [pc, #52]	; (26828 <ble_hs_start+0x6c>)
   267f4:	6018      	str	r0, [r3, #0]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   267f6:	2300      	movs	r3, #0
   267f8:	4a0c      	ldr	r2, [pc, #48]	; (2682c <ble_hs_start+0x70>)
   267fa:	490d      	ldr	r1, [pc, #52]	; (26830 <ble_hs_start+0x74>)
   267fc:	6809      	ldr	r1, [r1, #0]
   267fe:	480d      	ldr	r0, [pc, #52]	; (26834 <ble_hs_start+0x78>)
   26800:	f7f2 fc74 	bl	190ec <os_callout_init>
    rc = ble_gatts_start();
   26804:	f7ff f9e0 	bl	25bc8 <ble_gatts_start>
    if (rc != 0) {
   26808:	4604      	mov	r4, r0
   2680a:	b928      	cbnz	r0, 26818 <ble_hs_start+0x5c>
    ble_hs_sync();
   2680c:	f7ff fefe 	bl	2660c <ble_hs_sync>
    return 0;
   26810:	e002      	b.n	26818 <ble_hs_start+0x5c>
    ble_hs_unlock();
   26812:	f7ff fe95 	bl	26540 <ble_hs_unlock>
        rc = BLE_HS_EALREADY;
   26816:	2402      	movs	r4, #2
}
   26818:	4620      	mov	r0, r4
   2681a:	bd10      	pop	{r4, pc}
    ble_hs_unlock();
   2681c:	f7ff fe90 	bl	26540 <ble_hs_unlock>
        rc = BLE_HS_EBUSY;
   26820:	240f      	movs	r4, #15
        return rc;
   26822:	e7f9      	b.n	26818 <ble_hs_start+0x5c>
   26824:	10005d0c 	.word	0x10005d0c
   26828:	10005e24 	.word	0x10005e24
   2682c:	000266c9 	.word	0x000266c9
   26830:	10005d50 	.word	0x10005d50
   26834:	10005e80 	.word	0x10005e80

00026838 <ble_hs_event_start_stage2>:
{
   26838:	b508      	push	{r3, lr}
    rc = ble_hs_start();
   2683a:	f7ff ffbf 	bl	267bc <ble_hs_start>
    assert(rc == 0);
   2683e:	b900      	cbnz	r0, 26842 <ble_hs_event_start_stage2+0xa>
}
   26840:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   26842:	f7ed ff5f 	bl	14704 <hal_debugger_connected>
   26846:	b100      	cbz	r0, 2684a <ble_hs_event_start_stage2+0x12>
   26848:	be01      	bkpt	0x0001
   2684a:	2300      	movs	r3, #0
   2684c:	461a      	mov	r2, r3
   2684e:	4619      	mov	r1, r3
   26850:	4618      	mov	r0, r3
   26852:	f7f2 fa67 	bl	18d24 <__assert_func>

00026856 <ble_hs_tx_data>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_tx_data(struct os_mbuf *om)
{
   26856:	b508      	push	{r3, lr}
#if BLE_MONITOR
    ble_monitor_send_om(BLE_MONITOR_OPCODE_ACL_TX_PKT, om);
#endif

    return ble_hci_trans_hs_acl_tx(om);
   26858:	f004 f850 	bl	2a8fc <ble_hci_trans_hs_acl_tx>
}
   2685c:	bd08      	pop	{r3, pc}
	...

00026860 <ble_hs_init>:

void
ble_hs_init(void)
{
   26860:	b510      	push	{r4, lr}
   26862:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   26864:	4b82      	ldr	r3, [pc, #520]	; (26a70 <ble_hs_init+0x210>)
   26866:	781b      	ldrb	r3, [r3, #0]
   26868:	2b00      	cmp	r3, #0
   2686a:	d074      	beq.n	26956 <ble_hs_init+0xf6>

    /* Create memory pool of OS events */
    rc = os_mempool_init(&ble_hs_hci_ev_pool, BLE_HS_HCI_EVT_COUNT,
   2686c:	4b81      	ldr	r3, [pc, #516]	; (26a74 <ble_hs_init+0x214>)
   2686e:	9300      	str	r3, [sp, #0]
   26870:	4b81      	ldr	r3, [pc, #516]	; (26a78 <ble_hs_init+0x218>)
   26872:	2210      	movs	r2, #16
   26874:	210a      	movs	r1, #10
   26876:	4881      	ldr	r0, [pc, #516]	; (26a7c <ble_hs_init+0x21c>)
   26878:	f7f3 fac4 	bl	19e04 <os_mempool_init>
                         sizeof (struct ble_npl_event), ble_hs_hci_os_event_buf,
                         "ble_hs_hci_ev_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   2687c:	2800      	cmp	r0, #0
   2687e:	d174      	bne.n	2696a <ble_hs_init+0x10a>

    /* These get initialized here to allow unit tests to run without a zeroed
     * bss.
     */
    ble_hs_reset_reason = 0;
   26880:	2300      	movs	r3, #0
   26882:	4a7f      	ldr	r2, [pc, #508]	; (26a80 <ble_hs_init+0x220>)
   26884:	6013      	str	r3, [r2, #0]
    ble_hs_enabled_state = BLE_HS_ENABLED_STATE_OFF;
   26886:	4a7f      	ldr	r2, [pc, #508]	; (26a84 <ble_hs_init+0x224>)
   26888:	7013      	strb	r3, [r2, #0]
    memset(ev, 0, sizeof(*ev));
   2688a:	4a7f      	ldr	r2, [pc, #508]	; (26a88 <ble_hs_init+0x228>)
   2688c:	6013      	str	r3, [r2, #0]
   2688e:	6093      	str	r3, [r2, #8]
   26890:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   26892:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   26894:	497d      	ldr	r1, [pc, #500]	; (26a8c <ble_hs_init+0x22c>)
   26896:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   26898:	4a7d      	ldr	r2, [pc, #500]	; (26a90 <ble_hs_init+0x230>)
   2689a:	6013      	str	r3, [r2, #0]
   2689c:	6093      	str	r3, [r2, #8]
   2689e:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   268a0:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   268a2:	497c      	ldr	r1, [pc, #496]	; (26a94 <ble_hs_init+0x234>)
   268a4:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   268a6:	4a7c      	ldr	r2, [pc, #496]	; (26a98 <ble_hs_init+0x238>)
   268a8:	6013      	str	r3, [r2, #0]
   268aa:	6093      	str	r3, [r2, #8]
   268ac:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   268ae:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   268b0:	497a      	ldr	r1, [pc, #488]	; (26a9c <ble_hs_init+0x23c>)
   268b2:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   268b4:	4a7a      	ldr	r2, [pc, #488]	; (26aa0 <ble_hs_init+0x240>)
   268b6:	6013      	str	r3, [r2, #0]
   268b8:	6093      	str	r3, [r2, #8]
   268ba:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   268bc:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   268be:	4b79      	ldr	r3, [pc, #484]	; (26aa4 <ble_hs_init+0x244>)
   268c0:	6053      	str	r3, [r2, #4]
    ble_npl_event_init(&ble_hs_ev_start_stage1, ble_hs_event_start_stage1,
                       NULL);
    ble_npl_event_init(&ble_hs_ev_start_stage2, ble_hs_event_start_stage2,
                       NULL);

    ble_hs_hci_init();
   268c2:	f001 f9d9 	bl	27c78 <ble_hs_hci_init>

    rc = ble_hs_conn_init();
   268c6:	f000 ffd5 	bl	27874 <ble_hs_conn_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   268ca:	2800      	cmp	r0, #0
   268cc:	d15a      	bne.n	26984 <ble_hs_init+0x124>
    rc = ble_hs_periodic_sync_init();
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif

#if NIMBLE_BLE_CONNECT
    rc = ble_l2cap_init();
   268ce:	f002 fb65 	bl	28f9c <ble_l2cap_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   268d2:	2800      	cmp	r0, #0
   268d4:	d163      	bne.n	2699e <ble_hs_init+0x13e>

    rc = ble_att_init();
   268d6:	f7f8 fb0d 	bl	1eef4 <ble_att_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   268da:	2800      	cmp	r0, #0
   268dc:	d16c      	bne.n	269b8 <ble_hs_init+0x158>

    rc = ble_att_svr_init();
   268de:	f7fa faa9 	bl	20e34 <ble_att_svr_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   268e2:	2800      	cmp	r0, #0
   268e4:	d175      	bne.n	269d2 <ble_hs_init+0x172>

    rc = ble_gattc_init();
   268e6:	f7fe fb65 	bl	24fb4 <ble_gattc_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   268ea:	2800      	cmp	r0, #0
   268ec:	d17e      	bne.n	269ec <ble_hs_init+0x18c>

    rc = ble_gatts_init();
   268ee:	f7ff fbe1 	bl	260b4 <ble_gatts_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   268f2:	2800      	cmp	r0, #0
   268f4:	f040 8087 	bne.w	26a06 <ble_hs_init+0x1a6>
#endif
    rc = ble_gap_init();
   268f8:	f7fc faee 	bl	22ed8 <ble_gap_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   268fc:	2800      	cmp	r0, #0
   268fe:	f040 808f 	bne.w	26a20 <ble_hs_init+0x1c0>

    ble_hs_stop_init();
   26902:	f002 fa09 	bl	28d18 <ble_hs_stop_init>

    ble_mqueue_init(&ble_hs_rx_q, ble_hs_event_rx_data, NULL);
   26906:	2200      	movs	r2, #0
   26908:	4967      	ldr	r1, [pc, #412]	; (26aa8 <ble_hs_init+0x248>)
   2690a:	4868      	ldr	r0, [pc, #416]	; (26aac <ble_hs_init+0x24c>)
   2690c:	f001 feaa 	bl	28664 <ble_mqueue_init>

    rc = stats_init_and_reg(
   26910:	4b67      	ldr	r3, [pc, #412]	; (26ab0 <ble_hs_init+0x250>)
   26912:	9301      	str	r3, [sp, #4]
   26914:	2300      	movs	r3, #0
   26916:	9300      	str	r3, [sp, #0]
   26918:	220b      	movs	r2, #11
   2691a:	2104      	movs	r1, #4
   2691c:	4865      	ldr	r0, [pc, #404]	; (26ab4 <ble_hs_init+0x254>)
   2691e:	f7f7 fb01 	bl	1df24 <stats_init_and_reg>
        STATS_HDR(ble_hs_stats), STATS_SIZE_INIT_PARMS(ble_hs_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_hs_stats), "ble_hs");
    SYSINIT_PANIC_ASSERT(rc == 0);
   26922:	2800      	cmp	r0, #0
   26924:	f040 8089 	bne.w	26a3a <ble_hs_init+0x1da>
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   26928:	4863      	ldr	r0, [pc, #396]	; (26ab8 <ble_hs_init+0x258>)
   2692a:	f7f4 f89d 	bl	1aa68 <os_mutex_init>

    rc = ble_npl_mutex_init(&ble_hs_mutex);
    SYSINIT_PANIC_ASSERT(rc == 0);
   2692e:	2800      	cmp	r0, #0
   26930:	f040 8090 	bne.w	26a54 <ble_hs_init+0x1f4>
#if MYNEWT_VAL(BLE_HS_DEBUG)
    ble_hs_dbg_mutex_locked = 0;
#endif

#ifdef MYNEWT
    ble_hs_evq_set((struct ble_npl_eventq *)os_eventq_dflt_get());
   26934:	f7f2 fe28 	bl	19588 <os_eventq_dflt_get>
   26938:	f7ff fdd4 	bl	264e4 <ble_hs_evq_set>
#else
    ble_hs_evq_set(nimble_port_get_dflt_eventq());
#endif

    /* Configure the HCI transport to communicate with a host. */
    ble_hci_trans_cfg_hs(ble_hs_hci_rx_evt, NULL, ble_hs_rx_data, NULL);
   2693c:	2300      	movs	r3, #0
   2693e:	4a5f      	ldr	r2, [pc, #380]	; (26abc <ble_hs_init+0x25c>)
   26940:	4619      	mov	r1, r3
   26942:	485f      	ldr	r0, [pc, #380]	; (26ac0 <ble_hs_init+0x260>)
   26944:	f003 ffd0 	bl	2a8e8 <ble_hci_trans_cfg_hs>
     * queue ensures the event won't run until the end of main().  This allows
     * the application to configure this package in the meantime.
     */
#if MYNEWT_VAL(BLE_HS_AUTO_START)
#ifdef MYNEWT
    ble_npl_eventq_put((struct ble_npl_eventq *)os_eventq_dflt_get(),
   26948:	f7f2 fe1e 	bl	19588 <os_eventq_dflt_get>
    os_eventq_put(&evq->evq, &ev->ev);
   2694c:	4952      	ldr	r1, [pc, #328]	; (26a98 <ble_hs_init+0x238>)
   2694e:	f7f2 fd62 	bl	19416 <os_eventq_put>
#endif

#if BLE_MONITOR
    ble_monitor_new_index(0, (uint8_t[6]){ }, "nimble0");
#endif
}
   26952:	b002      	add	sp, #8
   26954:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   26956:	f7ed fed5 	bl	14704 <hal_debugger_connected>
   2695a:	b100      	cbz	r0, 2695e <ble_hs_init+0xfe>
   2695c:	be01      	bkpt	0x0001
   2695e:	2300      	movs	r3, #0
   26960:	461a      	mov	r2, r3
   26962:	4619      	mov	r1, r3
   26964:	4618      	mov	r0, r3
   26966:	f7f2 f9dd 	bl	18d24 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2696a:	f7ed fecb 	bl	14704 <hal_debugger_connected>
   2696e:	b100      	cbz	r0, 26972 <ble_hs_init+0x112>
   26970:	be01      	bkpt	0x0001
   26972:	2000      	movs	r0, #0
   26974:	9000      	str	r0, [sp, #0]
   26976:	4b53      	ldr	r3, [pc, #332]	; (26ac4 <ble_hs_init+0x264>)
   26978:	681c      	ldr	r4, [r3, #0]
   2697a:	4603      	mov	r3, r0
   2697c:	4602      	mov	r2, r0
   2697e:	4601      	mov	r1, r0
   26980:	47a0      	blx	r4
   26982:	e77d      	b.n	26880 <ble_hs_init+0x20>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26984:	f7ed febe 	bl	14704 <hal_debugger_connected>
   26988:	b100      	cbz	r0, 2698c <ble_hs_init+0x12c>
   2698a:	be01      	bkpt	0x0001
   2698c:	2000      	movs	r0, #0
   2698e:	9000      	str	r0, [sp, #0]
   26990:	4b4c      	ldr	r3, [pc, #304]	; (26ac4 <ble_hs_init+0x264>)
   26992:	681c      	ldr	r4, [r3, #0]
   26994:	4603      	mov	r3, r0
   26996:	4602      	mov	r2, r0
   26998:	4601      	mov	r1, r0
   2699a:	47a0      	blx	r4
   2699c:	e797      	b.n	268ce <ble_hs_init+0x6e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2699e:	f7ed feb1 	bl	14704 <hal_debugger_connected>
   269a2:	b100      	cbz	r0, 269a6 <ble_hs_init+0x146>
   269a4:	be01      	bkpt	0x0001
   269a6:	2000      	movs	r0, #0
   269a8:	9000      	str	r0, [sp, #0]
   269aa:	4b46      	ldr	r3, [pc, #280]	; (26ac4 <ble_hs_init+0x264>)
   269ac:	681c      	ldr	r4, [r3, #0]
   269ae:	4603      	mov	r3, r0
   269b0:	4602      	mov	r2, r0
   269b2:	4601      	mov	r1, r0
   269b4:	47a0      	blx	r4
   269b6:	e78e      	b.n	268d6 <ble_hs_init+0x76>
    SYSINIT_PANIC_ASSERT(rc == 0);
   269b8:	f7ed fea4 	bl	14704 <hal_debugger_connected>
   269bc:	b100      	cbz	r0, 269c0 <ble_hs_init+0x160>
   269be:	be01      	bkpt	0x0001
   269c0:	2000      	movs	r0, #0
   269c2:	9000      	str	r0, [sp, #0]
   269c4:	4b3f      	ldr	r3, [pc, #252]	; (26ac4 <ble_hs_init+0x264>)
   269c6:	681c      	ldr	r4, [r3, #0]
   269c8:	4603      	mov	r3, r0
   269ca:	4602      	mov	r2, r0
   269cc:	4601      	mov	r1, r0
   269ce:	47a0      	blx	r4
   269d0:	e785      	b.n	268de <ble_hs_init+0x7e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   269d2:	f7ed fe97 	bl	14704 <hal_debugger_connected>
   269d6:	b100      	cbz	r0, 269da <ble_hs_init+0x17a>
   269d8:	be01      	bkpt	0x0001
   269da:	2000      	movs	r0, #0
   269dc:	9000      	str	r0, [sp, #0]
   269de:	4b39      	ldr	r3, [pc, #228]	; (26ac4 <ble_hs_init+0x264>)
   269e0:	681c      	ldr	r4, [r3, #0]
   269e2:	4603      	mov	r3, r0
   269e4:	4602      	mov	r2, r0
   269e6:	4601      	mov	r1, r0
   269e8:	47a0      	blx	r4
   269ea:	e77c      	b.n	268e6 <ble_hs_init+0x86>
    SYSINIT_PANIC_ASSERT(rc == 0);
   269ec:	f7ed fe8a 	bl	14704 <hal_debugger_connected>
   269f0:	b100      	cbz	r0, 269f4 <ble_hs_init+0x194>
   269f2:	be01      	bkpt	0x0001
   269f4:	2000      	movs	r0, #0
   269f6:	9000      	str	r0, [sp, #0]
   269f8:	4b32      	ldr	r3, [pc, #200]	; (26ac4 <ble_hs_init+0x264>)
   269fa:	681c      	ldr	r4, [r3, #0]
   269fc:	4603      	mov	r3, r0
   269fe:	4602      	mov	r2, r0
   26a00:	4601      	mov	r1, r0
   26a02:	47a0      	blx	r4
   26a04:	e773      	b.n	268ee <ble_hs_init+0x8e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26a06:	f7ed fe7d 	bl	14704 <hal_debugger_connected>
   26a0a:	b100      	cbz	r0, 26a0e <ble_hs_init+0x1ae>
   26a0c:	be01      	bkpt	0x0001
   26a0e:	2000      	movs	r0, #0
   26a10:	9000      	str	r0, [sp, #0]
   26a12:	4b2c      	ldr	r3, [pc, #176]	; (26ac4 <ble_hs_init+0x264>)
   26a14:	681c      	ldr	r4, [r3, #0]
   26a16:	4603      	mov	r3, r0
   26a18:	4602      	mov	r2, r0
   26a1a:	4601      	mov	r1, r0
   26a1c:	47a0      	blx	r4
   26a1e:	e76b      	b.n	268f8 <ble_hs_init+0x98>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26a20:	f7ed fe70 	bl	14704 <hal_debugger_connected>
   26a24:	b100      	cbz	r0, 26a28 <ble_hs_init+0x1c8>
   26a26:	be01      	bkpt	0x0001
   26a28:	2000      	movs	r0, #0
   26a2a:	9000      	str	r0, [sp, #0]
   26a2c:	4b25      	ldr	r3, [pc, #148]	; (26ac4 <ble_hs_init+0x264>)
   26a2e:	681c      	ldr	r4, [r3, #0]
   26a30:	4603      	mov	r3, r0
   26a32:	4602      	mov	r2, r0
   26a34:	4601      	mov	r1, r0
   26a36:	47a0      	blx	r4
   26a38:	e763      	b.n	26902 <ble_hs_init+0xa2>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26a3a:	f7ed fe63 	bl	14704 <hal_debugger_connected>
   26a3e:	b100      	cbz	r0, 26a42 <ble_hs_init+0x1e2>
   26a40:	be01      	bkpt	0x0001
   26a42:	2000      	movs	r0, #0
   26a44:	9000      	str	r0, [sp, #0]
   26a46:	4b1f      	ldr	r3, [pc, #124]	; (26ac4 <ble_hs_init+0x264>)
   26a48:	681c      	ldr	r4, [r3, #0]
   26a4a:	4603      	mov	r3, r0
   26a4c:	4602      	mov	r2, r0
   26a4e:	4601      	mov	r1, r0
   26a50:	47a0      	blx	r4
   26a52:	e769      	b.n	26928 <ble_hs_init+0xc8>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26a54:	f7ed fe56 	bl	14704 <hal_debugger_connected>
   26a58:	b100      	cbz	r0, 26a5c <ble_hs_init+0x1fc>
   26a5a:	be01      	bkpt	0x0001
   26a5c:	2000      	movs	r0, #0
   26a5e:	9000      	str	r0, [sp, #0]
   26a60:	4b18      	ldr	r3, [pc, #96]	; (26ac4 <ble_hs_init+0x264>)
   26a62:	681c      	ldr	r4, [r3, #0]
   26a64:	4603      	mov	r3, r0
   26a66:	4602      	mov	r2, r0
   26a68:	4601      	mov	r1, r0
   26a6a:	47a0      	blx	r4
   26a6c:	e762      	b.n	26934 <ble_hs_init+0xd4>
   26a6e:	bf00      	nop
   26a70:	100055a0 	.word	0x100055a0
   26a74:	00034e70 	.word	0x00034e70
   26a78:	10005d70 	.word	0x10005d70
   26a7c:	10005d54 	.word	0x10005d54
   26a80:	10005e28 	.word	0x10005e28
   26a84:	10005d0c 	.word	0x10005d0c
   26a88:	10005d40 	.word	0x10005d40
   26a8c:	000264b5 	.word	0x000264b5
   26a90:	10005d10 	.word	0x10005d10
   26a94:	000266c1 	.word	0x000266c1
   26a98:	10005d20 	.word	0x10005d20
   26a9c:	000264dd 	.word	0x000264dd
   26aa0:	10005d30 	.word	0x10005d30
   26aa4:	00026839 	.word	0x00026839
   26aa8:	00026565 	.word	0x00026565
   26aac:	10005e2c 	.word	0x10005e2c
   26ab0:	00034e84 	.word	0x00034e84
   26ab4:	10005e44 	.word	0x10005e44
   26ab8:	10005e18 	.word	0x10005e18
   26abc:	00026489 	.word	0x00026489
   26ac0:	00027b5d 	.word	0x00027b5d
   26ac4:	100006b4 	.word	0x100006b4

00026ac8 <find_field_func>:
static int
find_field_func(const struct ble_hs_adv_field *field, void *user_data)
{
    struct find_field_data *ffd = user_data;

    if (field->type != ffd->type) {
   26ac8:	7842      	ldrb	r2, [r0, #1]
   26aca:	780b      	ldrb	r3, [r1, #0]
   26acc:	429a      	cmp	r2, r3
   26ace:	d102      	bne.n	26ad6 <find_field_func+0xe>
        return BLE_HS_EAGAIN;
    }

    ffd->field = field;
   26ad0:	6048      	str	r0, [r1, #4]

    return 0;
   26ad2:	2000      	movs	r0, #0
   26ad4:	4770      	bx	lr
        return BLE_HS_EAGAIN;
   26ad6:	2001      	movs	r0, #1
}
   26ad8:	4770      	bx	lr

00026ada <ble_hs_adv_set_hdr>:
{
   26ada:	b530      	push	{r4, r5, lr}
   26adc:	b083      	sub	sp, #12
   26ade:	9d06      	ldr	r5, [sp, #24]
   26ae0:	9c07      	ldr	r4, [sp, #28]
   26ae2:	f88d 0007 	strb.w	r0, [sp, #7]
   26ae6:	f88d 1006 	strb.w	r1, [sp, #6]
    if (om ) {
   26aea:	b18c      	cbz	r4, 26b10 <ble_hs_adv_set_hdr+0x36>
        data_len++;
   26aec:	b2cb      	uxtb	r3, r1
   26aee:	3301      	adds	r3, #1
   26af0:	f88d 3006 	strb.w	r3, [sp, #6]
        rc = os_mbuf_append(om, &data_len, sizeof(data_len));
   26af4:	2201      	movs	r2, #1
   26af6:	f10d 0106 	add.w	r1, sp, #6
   26afa:	4620      	mov	r0, r4
   26afc:	f7f2 fd97 	bl	1962e <os_mbuf_append>
        if (rc) {
   26b00:	b9c0      	cbnz	r0, 26b34 <ble_hs_adv_set_hdr+0x5a>
        return os_mbuf_append(om, &type, sizeof(type));
   26b02:	2201      	movs	r2, #1
   26b04:	f10d 0107 	add.w	r1, sp, #7
   26b08:	4620      	mov	r0, r4
   26b0a:	f7f2 fd90 	bl	1962e <os_mbuf_append>
   26b0e:	e011      	b.n	26b34 <ble_hs_adv_set_hdr+0x5a>
    if (*dst_len + 2 + data_len > max_len) {
   26b10:	782c      	ldrb	r4, [r5, #0]
   26b12:	1ca0      	adds	r0, r4, #2
   26b14:	f89d 1006 	ldrb.w	r1, [sp, #6]
   26b18:	4408      	add	r0, r1
   26b1a:	4290      	cmp	r0, r2
   26b1c:	dc0c      	bgt.n	26b38 <ble_hs_adv_set_hdr+0x5e>
    dst[*dst_len] = data_len + 1;
   26b1e:	3101      	adds	r1, #1
   26b20:	5519      	strb	r1, [r3, r4]
    dst[*dst_len + 1] = type;
   26b22:	782a      	ldrb	r2, [r5, #0]
   26b24:	3201      	adds	r2, #1
   26b26:	f89d 1007 	ldrb.w	r1, [sp, #7]
   26b2a:	5499      	strb	r1, [r3, r2]
    *dst_len += 2;
   26b2c:	782b      	ldrb	r3, [r5, #0]
   26b2e:	3302      	adds	r3, #2
   26b30:	702b      	strb	r3, [r5, #0]
    return 0;
   26b32:	2000      	movs	r0, #0
}
   26b34:	b003      	add	sp, #12
   26b36:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EMSGSIZE;
   26b38:	2004      	movs	r0, #4
   26b3a:	e7fb      	b.n	26b34 <ble_hs_adv_set_hdr+0x5a>

00026b3c <ble_hs_adv_set_flat_mbuf>:
{
   26b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26b40:	b082      	sub	sp, #8
   26b42:	460c      	mov	r4, r1
   26b44:	4615      	mov	r5, r2
   26b46:	4699      	mov	r9, r3
   26b48:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   26b4a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    rc = ble_hs_adv_set_hdr(type, data_len, max_len, dst, dst_len, om);
   26b4c:	fa5f fa81 	uxtb.w	sl, r1
   26b50:	9601      	str	r6, [sp, #4]
   26b52:	9700      	str	r7, [sp, #0]
   26b54:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   26b58:	4651      	mov	r1, sl
   26b5a:	f7ff ffbe 	bl	26ada <ble_hs_adv_set_hdr>
    if (rc != 0) {
   26b5e:	4680      	mov	r8, r0
   26b60:	b930      	cbnz	r0, 26b70 <ble_hs_adv_set_flat_mbuf+0x34>
    if (om) {
   26b62:	b14e      	cbz	r6, 26b78 <ble_hs_adv_set_flat_mbuf+0x3c>
        return os_mbuf_append(om, data, data_len);
   26b64:	b2a2      	uxth	r2, r4
   26b66:	4629      	mov	r1, r5
   26b68:	4630      	mov	r0, r6
   26b6a:	f7f2 fd60 	bl	1962e <os_mbuf_append>
   26b6e:	4680      	mov	r8, r0
}
   26b70:	4640      	mov	r0, r8
   26b72:	b002      	add	sp, #8
   26b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    memcpy(dst + *dst_len, data, data_len);
   26b78:	7838      	ldrb	r0, [r7, #0]
   26b7a:	4622      	mov	r2, r4
   26b7c:	4629      	mov	r1, r5
   26b7e:	4448      	add	r0, r9
   26b80:	f7f4 f878 	bl	1ac74 <memcpy>
    *dst_len += data_len;
   26b84:	7839      	ldrb	r1, [r7, #0]
   26b86:	4451      	add	r1, sl
   26b88:	7039      	strb	r1, [r7, #0]
    return 0;
   26b8a:	e7f1      	b.n	26b70 <ble_hs_adv_set_flat_mbuf+0x34>

00026b8c <ble_hs_adv_set_array_uuid16>:
{
   26b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26b90:	b082      	sub	sp, #8
   26b92:	460e      	mov	r6, r1
   26b94:	4617      	mov	r7, r2
   26b96:	4699      	mov	r9, r3
   26b98:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   26b9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    rc = ble_hs_adv_set_hdr(type, num_elems * 2, max_len, dst,
   26b9e:	0049      	lsls	r1, r1, #1
   26ba0:	9501      	str	r5, [sp, #4]
   26ba2:	f8cd 8000 	str.w	r8, [sp]
   26ba6:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   26baa:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   26bae:	f7ff ff94 	bl	26ada <ble_hs_adv_set_hdr>
    if (rc != 0) {
   26bb2:	4682      	mov	sl, r0
   26bb4:	b9d0      	cbnz	r0, 26bec <ble_hs_adv_set_array_uuid16+0x60>
    for (i = 0; i < num_elems; i++) {
   26bb6:	4604      	mov	r4, r0
   26bb8:	e00c      	b.n	26bd4 <ble_hs_adv_set_array_uuid16+0x48>
            ble_uuid_flat(&elems[i].u, dst + *dst_len);
   26bba:	f898 1000 	ldrb.w	r1, [r8]
   26bbe:	4449      	add	r1, r9
   26bc0:	eb07 0084 	add.w	r0, r7, r4, lsl #2
   26bc4:	f002 ffb8 	bl	29b38 <ble_uuid_flat>
            *dst_len += 2;
   26bc8:	f898 3000 	ldrb.w	r3, [r8]
   26bcc:	3302      	adds	r3, #2
   26bce:	f888 3000 	strb.w	r3, [r8]
    for (i = 0; i < num_elems; i++) {
   26bd2:	3401      	adds	r4, #1
   26bd4:	42a6      	cmp	r6, r4
   26bd6:	dd09      	ble.n	26bec <ble_hs_adv_set_array_uuid16+0x60>
        if (om) {
   26bd8:	2d00      	cmp	r5, #0
   26bda:	d0ee      	beq.n	26bba <ble_hs_adv_set_array_uuid16+0x2e>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
   26bdc:	4629      	mov	r1, r5
   26bde:	eb07 0084 	add.w	r0, r7, r4, lsl #2
   26be2:	f002 ffd8 	bl	29b96 <ble_uuid_to_mbuf>
            if (rc) {
   26be6:	2800      	cmp	r0, #0
   26be8:	d0f3      	beq.n	26bd2 <ble_hs_adv_set_array_uuid16+0x46>
                return rc;
   26bea:	4682      	mov	sl, r0
}
   26bec:	4650      	mov	r0, sl
   26bee:	b002      	add	sp, #8
   26bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00026bf4 <ble_hs_adv_set_array_uuid128>:
{
   26bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26bf8:	b082      	sub	sp, #8
   26bfa:	460e      	mov	r6, r1
   26bfc:	4617      	mov	r7, r2
   26bfe:	4699      	mov	r9, r3
   26c00:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   26c04:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    rc = ble_hs_adv_set_hdr(type, num_elems * 16, max_len, dst,
   26c06:	0109      	lsls	r1, r1, #4
   26c08:	9501      	str	r5, [sp, #4]
   26c0a:	f8cd 8000 	str.w	r8, [sp]
   26c0e:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   26c12:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
   26c16:	f7ff ff60 	bl	26ada <ble_hs_adv_set_hdr>
    if (rc != 0) {
   26c1a:	4682      	mov	sl, r0
   26c1c:	b9e0      	cbnz	r0, 26c58 <ble_hs_adv_set_array_uuid128+0x64>
    for (i = 0; i < num_elems; i++) {
   26c1e:	4604      	mov	r4, r0
   26c20:	e00d      	b.n	26c3e <ble_hs_adv_set_array_uuid128+0x4a>
            ble_uuid_flat(&elems[i].u, dst + *dst_len);
   26c22:	eb04 1004 	add.w	r0, r4, r4, lsl #4
   26c26:	f898 1000 	ldrb.w	r1, [r8]
   26c2a:	4449      	add	r1, r9
   26c2c:	4438      	add	r0, r7
   26c2e:	f002 ff83 	bl	29b38 <ble_uuid_flat>
            *dst_len += 16;
   26c32:	f898 3000 	ldrb.w	r3, [r8]
   26c36:	3310      	adds	r3, #16
   26c38:	f888 3000 	strb.w	r3, [r8]
    for (i = 0; i < num_elems; i++) {
   26c3c:	3401      	adds	r4, #1
   26c3e:	42a6      	cmp	r6, r4
   26c40:	dd0a      	ble.n	26c58 <ble_hs_adv_set_array_uuid128+0x64>
        if (om) {
   26c42:	2d00      	cmp	r5, #0
   26c44:	d0ed      	beq.n	26c22 <ble_hs_adv_set_array_uuid128+0x2e>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
   26c46:	eb04 1004 	add.w	r0, r4, r4, lsl #4
   26c4a:	4629      	mov	r1, r5
   26c4c:	4438      	add	r0, r7
   26c4e:	f002 ffa2 	bl	29b96 <ble_uuid_to_mbuf>
            if (rc) {
   26c52:	2800      	cmp	r0, #0
   26c54:	d0f2      	beq.n	26c3c <ble_hs_adv_set_array_uuid128+0x48>
                return rc;
   26c56:	4682      	mov	sl, r0
}
   26c58:	4650      	mov	r0, sl
   26c5a:	b002      	add	sp, #8
   26c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00026c60 <ble_hs_adv_set_array_uuid32>:
{
   26c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26c64:	b084      	sub	sp, #16
   26c66:	460e      	mov	r6, r1
   26c68:	4617      	mov	r7, r2
   26c6a:	4699      	mov	r9, r3
   26c6c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   26c70:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    rc = ble_hs_adv_set_hdr(type, num_elems * 4, max_len, dst,
   26c72:	0089      	lsls	r1, r1, #2
   26c74:	9501      	str	r5, [sp, #4]
   26c76:	f8cd 8000 	str.w	r8, [sp]
   26c7a:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   26c7e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   26c82:	f7ff ff2a 	bl	26ada <ble_hs_adv_set_hdr>
    if (rc != 0) {
   26c86:	4682      	mov	sl, r0
   26c88:	b9f8      	cbnz	r0, 26cca <ble_hs_adv_set_array_uuid32+0x6a>
    for (i = 0; i < num_elems; i++) {
   26c8a:	4604      	mov	r4, r0
   26c8c:	e00d      	b.n	26caa <ble_hs_adv_set_array_uuid32+0x4a>
            put_le32(dst + *dst_len, elems[i].value);
   26c8e:	f898 0000 	ldrb.w	r0, [r8]
   26c92:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   26c96:	6859      	ldr	r1, [r3, #4]
   26c98:	4448      	add	r0, r9
   26c9a:	f7f2 f8b5 	bl	18e08 <put_le32>
            *dst_len += 4;
   26c9e:	f898 3000 	ldrb.w	r3, [r8]
   26ca2:	3304      	adds	r3, #4
   26ca4:	f888 3000 	strb.w	r3, [r8]
    for (i = 0; i < num_elems; i++) {
   26ca8:	3401      	adds	r4, #1
   26caa:	42a6      	cmp	r6, r4
   26cac:	dd0d      	ble.n	26cca <ble_hs_adv_set_array_uuid32+0x6a>
        if (om) {
   26cae:	2d00      	cmp	r5, #0
   26cb0:	d0ed      	beq.n	26c8e <ble_hs_adv_set_array_uuid32+0x2e>
            uuid_le = htole32(elems[i].value);
   26cb2:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   26cb6:	685b      	ldr	r3, [r3, #4]
   26cb8:	9303      	str	r3, [sp, #12]
            rc = os_mbuf_append(om, &uuid_le, sizeof(uuid_le));
   26cba:	2204      	movs	r2, #4
   26cbc:	a903      	add	r1, sp, #12
   26cbe:	4628      	mov	r0, r5
   26cc0:	f7f2 fcb5 	bl	1962e <os_mbuf_append>
            if (rc) {
   26cc4:	2800      	cmp	r0, #0
   26cc6:	d0ef      	beq.n	26ca8 <ble_hs_adv_set_array_uuid32+0x48>
                return rc;
   26cc8:	4682      	mov	sl, r0
}
   26cca:	4650      	mov	r0, sl
   26ccc:	b004      	add	sp, #16
   26cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00026cd2 <ble_hs_adv_set_array16>:
{
   26cd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26cd6:	b084      	sub	sp, #16
   26cd8:	460e      	mov	r6, r1
   26cda:	4617      	mov	r7, r2
   26cdc:	4699      	mov	r9, r3
   26cde:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   26ce2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    rc = ble_hs_adv_set_hdr(type, num_elems * sizeof *elems, max_len, dst,
   26ce4:	0049      	lsls	r1, r1, #1
   26ce6:	9501      	str	r5, [sp, #4]
   26ce8:	f8cd 8000 	str.w	r8, [sp]
   26cec:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   26cf0:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   26cf4:	f7ff fef1 	bl	26ada <ble_hs_adv_set_hdr>
    if (rc != 0) {
   26cf8:	4682      	mov	sl, r0
   26cfa:	b9f8      	cbnz	r0, 26d3c <ble_hs_adv_set_array16+0x6a>
    for (i = 0; i < num_elems; i++) {
   26cfc:	4604      	mov	r4, r0
   26cfe:	e00c      	b.n	26d1a <ble_hs_adv_set_array16+0x48>
            put_le16(dst + *dst_len, elems[i]);
   26d00:	f898 0000 	ldrb.w	r0, [r8]
   26d04:	f837 1014 	ldrh.w	r1, [r7, r4, lsl #1]
   26d08:	4448      	add	r0, r9
   26d0a:	f7f2 f879 	bl	18e00 <put_le16>
            *dst_len += sizeof elems[i];
   26d0e:	f898 3000 	ldrb.w	r3, [r8]
   26d12:	3302      	adds	r3, #2
   26d14:	f888 3000 	strb.w	r3, [r8]
    for (i = 0; i < num_elems; i++) {
   26d18:	3401      	adds	r4, #1
   26d1a:	42a6      	cmp	r6, r4
   26d1c:	dd0e      	ble.n	26d3c <ble_hs_adv_set_array16+0x6a>
        if (om) {
   26d1e:	2d00      	cmp	r5, #0
   26d20:	d0ee      	beq.n	26d00 <ble_hs_adv_set_array16+0x2e>
            tmp = htole16(elems[i]);
   26d22:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
   26d26:	f8ad 300e 	strh.w	r3, [sp, #14]
            rc = os_mbuf_append(om, &tmp, sizeof(tmp));
   26d2a:	2202      	movs	r2, #2
   26d2c:	f10d 010e 	add.w	r1, sp, #14
   26d30:	4628      	mov	r0, r5
   26d32:	f7f2 fc7c 	bl	1962e <os_mbuf_append>
            if (rc) {
   26d36:	2800      	cmp	r0, #0
   26d38:	d0ee      	beq.n	26d18 <ble_hs_adv_set_array16+0x46>
                return rc;
   26d3a:	4682      	mov	sl, r0
}
   26d3c:	4650      	mov	r0, sl
   26d3e:	b004      	add	sp, #16
   26d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00026d44 <adv_set_fields>:
{
   26d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26d48:	b086      	sub	sp, #24
   26d4a:	4604      	mov	r4, r0
   26d4c:	460d      	mov	r5, r1
   26d4e:	4690      	mov	r8, r2
   26d50:	461e      	mov	r6, r3
   26d52:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    dst_len_local = 0;
   26d54:	2300      	movs	r3, #0
   26d56:	f88d 3016 	strb.w	r3, [sp, #22]
    if (adv_fields->flags != 0) {
   26d5a:	7803      	ldrb	r3, [r0, #0]
   26d5c:	2b00      	cmp	r3, #0
   26d5e:	f040 80c0 	bne.w	26ee2 <adv_set_fields+0x19e>
    if (adv_fields->uuids16 != NULL && adv_fields->num_uuids16) {
   26d62:	6862      	ldr	r2, [r4, #4]
   26d64:	b19a      	cbz	r2, 26d8e <adv_set_fields+0x4a>
   26d66:	7a21      	ldrb	r1, [r4, #8]
   26d68:	b189      	cbz	r1, 26d8e <adv_set_fields+0x4a>
        if (adv_fields->uuids16_is_complete) {
   26d6a:	7a63      	ldrb	r3, [r4, #9]
   26d6c:	f013 0f01 	tst.w	r3, #1
   26d70:	f000 80c7 	beq.w	26f02 <adv_set_fields+0x1be>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS16;
   26d74:	2003      	movs	r0, #3
        rc = ble_hs_adv_set_array_uuid16(type, adv_fields->num_uuids16,
   26d76:	9702      	str	r7, [sp, #8]
   26d78:	9601      	str	r6, [sp, #4]
   26d7a:	f10d 0316 	add.w	r3, sp, #22
   26d7e:	9300      	str	r3, [sp, #0]
   26d80:	462b      	mov	r3, r5
   26d82:	f7ff ff03 	bl	26b8c <ble_hs_adv_set_array_uuid16>
        if (rc != 0) {
   26d86:	4603      	mov	r3, r0
   26d88:	2800      	cmp	r0, #0
   26d8a:	f040 80a6 	bne.w	26eda <adv_set_fields+0x196>
    if (adv_fields->uuids32 != NULL && adv_fields->num_uuids32) {
   26d8e:	68e2      	ldr	r2, [r4, #12]
   26d90:	b19a      	cbz	r2, 26dba <adv_set_fields+0x76>
   26d92:	7c21      	ldrb	r1, [r4, #16]
   26d94:	b189      	cbz	r1, 26dba <adv_set_fields+0x76>
        if (adv_fields->uuids32_is_complete) {
   26d96:	7c63      	ldrb	r3, [r4, #17]
   26d98:	f013 0f01 	tst.w	r3, #1
   26d9c:	f000 80b3 	beq.w	26f06 <adv_set_fields+0x1c2>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS32;
   26da0:	2005      	movs	r0, #5
        rc = ble_hs_adv_set_array_uuid32(type, adv_fields->num_uuids32,
   26da2:	9702      	str	r7, [sp, #8]
   26da4:	9601      	str	r6, [sp, #4]
   26da6:	f10d 0316 	add.w	r3, sp, #22
   26daa:	9300      	str	r3, [sp, #0]
   26dac:	462b      	mov	r3, r5
   26dae:	f7ff ff57 	bl	26c60 <ble_hs_adv_set_array_uuid32>
        if (rc != 0) {
   26db2:	4603      	mov	r3, r0
   26db4:	2800      	cmp	r0, #0
   26db6:	f040 8090 	bne.w	26eda <adv_set_fields+0x196>
    if (adv_fields->uuids128 != NULL && adv_fields->num_uuids128 > 0) {
   26dba:	6962      	ldr	r2, [r4, #20]
   26dbc:	b192      	cbz	r2, 26de4 <adv_set_fields+0xa0>
   26dbe:	7e21      	ldrb	r1, [r4, #24]
   26dc0:	b181      	cbz	r1, 26de4 <adv_set_fields+0xa0>
        if (adv_fields->uuids128_is_complete) {
   26dc2:	7e63      	ldrb	r3, [r4, #25]
   26dc4:	f013 0f01 	tst.w	r3, #1
   26dc8:	f000 809f 	beq.w	26f0a <adv_set_fields+0x1c6>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS128;
   26dcc:	2007      	movs	r0, #7
        rc = ble_hs_adv_set_array_uuid128(type, adv_fields->num_uuids128,
   26dce:	9702      	str	r7, [sp, #8]
   26dd0:	9601      	str	r6, [sp, #4]
   26dd2:	f10d 0316 	add.w	r3, sp, #22
   26dd6:	9300      	str	r3, [sp, #0]
   26dd8:	462b      	mov	r3, r5
   26dda:	f7ff ff0b 	bl	26bf4 <ble_hs_adv_set_array_uuid128>
        if (rc != 0) {
   26dde:	4603      	mov	r3, r0
   26de0:	2800      	cmp	r0, #0
   26de2:	d17a      	bne.n	26eda <adv_set_fields+0x196>
    if (adv_fields->name != NULL && adv_fields->name_len > 0) {
   26de4:	69e2      	ldr	r2, [r4, #28]
   26de6:	b1a2      	cbz	r2, 26e12 <adv_set_fields+0xce>
   26de8:	f894 1020 	ldrb.w	r1, [r4, #32]
   26dec:	b189      	cbz	r1, 26e12 <adv_set_fields+0xce>
        if (adv_fields->name_is_complete) {
   26dee:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   26df2:	f013 0f01 	tst.w	r3, #1
   26df6:	f000 808a 	beq.w	26f0e <adv_set_fields+0x1ca>
            type = BLE_HS_ADV_TYPE_COMP_NAME;
   26dfa:	2009      	movs	r0, #9
        rc = ble_hs_adv_set_flat_mbuf(type, adv_fields->name_len,
   26dfc:	9702      	str	r7, [sp, #8]
   26dfe:	9601      	str	r6, [sp, #4]
   26e00:	f10d 0316 	add.w	r3, sp, #22
   26e04:	9300      	str	r3, [sp, #0]
   26e06:	462b      	mov	r3, r5
   26e08:	f7ff fe98 	bl	26b3c <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   26e0c:	4603      	mov	r3, r0
   26e0e:	2800      	cmp	r0, #0
   26e10:	d163      	bne.n	26eda <adv_set_fields+0x196>
    if (adv_fields->tx_pwr_lvl_is_present) {
   26e12:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   26e16:	f013 0f01 	tst.w	r3, #1
   26e1a:	d015      	beq.n	26e48 <adv_set_fields+0x104>
        if (adv_fields->tx_pwr_lvl == BLE_HS_ADV_TX_PWR_LVL_AUTO) {
   26e1c:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
   26e20:	f113 0f80 	cmn.w	r3, #128	; 0x80
   26e24:	d075      	beq.n	26f12 <adv_set_fields+0x1ce>
            tx_pwr_lvl = adv_fields->tx_pwr_lvl;
   26e26:	f88d 3017 	strb.w	r3, [sp, #23]
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_TX_PWR_LVL, 1,
   26e2a:	9702      	str	r7, [sp, #8]
   26e2c:	9601      	str	r6, [sp, #4]
   26e2e:	f10d 0316 	add.w	r3, sp, #22
   26e32:	9300      	str	r3, [sp, #0]
   26e34:	462b      	mov	r3, r5
   26e36:	f10d 0217 	add.w	r2, sp, #23
   26e3a:	2101      	movs	r1, #1
   26e3c:	200a      	movs	r0, #10
   26e3e:	f7ff fe7d 	bl	26b3c <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   26e42:	4603      	mov	r3, r0
   26e44:	2800      	cmp	r0, #0
   26e46:	d148      	bne.n	26eda <adv_set_fields+0x196>
    if (adv_fields->slave_itvl_range != NULL) {
   26e48:	6a62      	ldr	r2, [r4, #36]	; 0x24
   26e4a:	b162      	cbz	r2, 26e66 <adv_set_fields+0x122>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SLAVE_ITVL_RANGE,
   26e4c:	9702      	str	r7, [sp, #8]
   26e4e:	9601      	str	r6, [sp, #4]
   26e50:	f10d 0316 	add.w	r3, sp, #22
   26e54:	9300      	str	r3, [sp, #0]
   26e56:	462b      	mov	r3, r5
   26e58:	2104      	movs	r1, #4
   26e5a:	2012      	movs	r0, #18
   26e5c:	f7ff fe6e 	bl	26b3c <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   26e60:	4603      	mov	r3, r0
   26e62:	2800      	cmp	r0, #0
   26e64:	d139      	bne.n	26eda <adv_set_fields+0x196>
    if (adv_fields->svc_data_uuid16 != NULL && adv_fields->svc_data_uuid16_len) {
   26e66:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   26e68:	b11a      	cbz	r2, 26e72 <adv_set_fields+0x12e>
   26e6a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   26e6e:	2900      	cmp	r1, #0
   26e70:	d157      	bne.n	26f22 <adv_set_fields+0x1de>
    if (adv_fields->public_tgt_addr != NULL &&
   26e72:	6b22      	ldr	r2, [r4, #48]	; 0x30
   26e74:	b11a      	cbz	r2, 26e7e <adv_set_fields+0x13a>
        adv_fields->num_public_tgt_addrs != 0) {
   26e76:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    if (adv_fields->public_tgt_addr != NULL &&
   26e7a:	2900      	cmp	r1, #0
   26e7c:	d15e      	bne.n	26f3c <adv_set_fields+0x1f8>
    if (adv_fields->appearance_is_present) {
   26e7e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   26e82:	f013 0f01 	tst.w	r3, #1
   26e86:	d169      	bne.n	26f5c <adv_set_fields+0x218>
    if (adv_fields->adv_itvl_is_present) {
   26e88:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   26e8c:	f013 0f01 	tst.w	r3, #1
   26e90:	d174      	bne.n	26f7c <adv_set_fields+0x238>
    if (adv_fields->svc_data_uuid32 != NULL && adv_fields->svc_data_uuid32_len) {
   26e92:	6c22      	ldr	r2, [r4, #64]	; 0x40
   26e94:	b11a      	cbz	r2, 26e9e <adv_set_fields+0x15a>
   26e96:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
   26e9a:	2900      	cmp	r1, #0
   26e9c:	d17f      	bne.n	26f9e <adv_set_fields+0x25a>
    if (adv_fields->svc_data_uuid128 != NULL && adv_fields->svc_data_uuid128_len) {
   26e9e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   26ea0:	b122      	cbz	r2, 26eac <adv_set_fields+0x168>
   26ea2:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
   26ea6:	2900      	cmp	r1, #0
   26ea8:	f040 8087 	bne.w	26fba <adv_set_fields+0x276>
    if (adv_fields->uri != NULL && adv_fields->uri_len) {
   26eac:	6d22      	ldr	r2, [r4, #80]	; 0x50
   26eae:	b122      	cbz	r2, 26eba <adv_set_fields+0x176>
   26eb0:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
   26eb4:	2900      	cmp	r1, #0
   26eb6:	f040 808e 	bne.w	26fd6 <adv_set_fields+0x292>
    if ((adv_fields->mfg_data != NULL) && (adv_fields->mfg_data_len >= 2)) {
   26eba:	6da2      	ldr	r2, [r4, #88]	; 0x58
   26ebc:	b122      	cbz	r2, 26ec8 <adv_set_fields+0x184>
   26ebe:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
   26ec2:	2901      	cmp	r1, #1
   26ec4:	f200 8095 	bhi.w	26ff2 <adv_set_fields+0x2ae>
    if (dst_len) {
   26ec8:	f1b8 0f00 	cmp.w	r8, #0
   26ecc:	f000 809f 	beq.w	2700e <adv_set_fields+0x2ca>
        *dst_len = dst_len_local;
   26ed0:	f89d 3016 	ldrb.w	r3, [sp, #22]
   26ed4:	f888 3000 	strb.w	r3, [r8]
    return 0;
   26ed8:	2300      	movs	r3, #0
}
   26eda:	4618      	mov	r0, r3
   26edc:	b006      	add	sp, #24
   26ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_FLAGS, 1,
   26ee2:	9702      	str	r7, [sp, #8]
   26ee4:	9601      	str	r6, [sp, #4]
   26ee6:	f10d 0316 	add.w	r3, sp, #22
   26eea:	9300      	str	r3, [sp, #0]
   26eec:	460b      	mov	r3, r1
   26eee:	4602      	mov	r2, r0
   26ef0:	2101      	movs	r1, #1
   26ef2:	4608      	mov	r0, r1
   26ef4:	f7ff fe22 	bl	26b3c <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   26ef8:	4603      	mov	r3, r0
   26efa:	2800      	cmp	r0, #0
   26efc:	f43f af31 	beq.w	26d62 <adv_set_fields+0x1e>
   26f00:	e7eb      	b.n	26eda <adv_set_fields+0x196>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS16;
   26f02:	2002      	movs	r0, #2
   26f04:	e737      	b.n	26d76 <adv_set_fields+0x32>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS32;
   26f06:	2004      	movs	r0, #4
   26f08:	e74b      	b.n	26da2 <adv_set_fields+0x5e>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS128;
   26f0a:	2006      	movs	r0, #6
   26f0c:	e75f      	b.n	26dce <adv_set_fields+0x8a>
            type = BLE_HS_ADV_TYPE_INCOMP_NAME;
   26f0e:	2008      	movs	r0, #8
   26f10:	e774      	b.n	26dfc <adv_set_fields+0xb8>
            rc = ble_hs_hci_util_read_adv_tx_pwr(&tx_pwr_lvl);
   26f12:	f10d 0017 	add.w	r0, sp, #23
   26f16:	f001 f977 	bl	28208 <ble_hs_hci_util_read_adv_tx_pwr>
            if (rc != 0) {
   26f1a:	4603      	mov	r3, r0
   26f1c:	2800      	cmp	r0, #0
   26f1e:	d084      	beq.n	26e2a <adv_set_fields+0xe6>
   26f20:	e7db      	b.n	26eda <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID16,
   26f22:	9702      	str	r7, [sp, #8]
   26f24:	9601      	str	r6, [sp, #4]
   26f26:	f10d 0316 	add.w	r3, sp, #22
   26f2a:	9300      	str	r3, [sp, #0]
   26f2c:	462b      	mov	r3, r5
   26f2e:	2016      	movs	r0, #22
   26f30:	f7ff fe04 	bl	26b3c <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   26f34:	4603      	mov	r3, r0
   26f36:	2800      	cmp	r0, #0
   26f38:	d09b      	beq.n	26e72 <adv_set_fields+0x12e>
   26f3a:	e7ce      	b.n	26eda <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_PUBLIC_TGT_ADDR,
   26f3c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   26f40:	9702      	str	r7, [sp, #8]
   26f42:	9601      	str	r6, [sp, #4]
   26f44:	f10d 0316 	add.w	r3, sp, #22
   26f48:	9300      	str	r3, [sp, #0]
   26f4a:	462b      	mov	r3, r5
   26f4c:	0049      	lsls	r1, r1, #1
   26f4e:	2017      	movs	r0, #23
   26f50:	f7ff fdf4 	bl	26b3c <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   26f54:	4603      	mov	r3, r0
   26f56:	2800      	cmp	r0, #0
   26f58:	d091      	beq.n	26e7e <adv_set_fields+0x13a>
   26f5a:	e7be      	b.n	26eda <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_APPEARANCE,
   26f5c:	9702      	str	r7, [sp, #8]
   26f5e:	9601      	str	r6, [sp, #4]
   26f60:	f10d 0316 	add.w	r3, sp, #22
   26f64:	9300      	str	r3, [sp, #0]
   26f66:	462b      	mov	r3, r5
   26f68:	f104 0236 	add.w	r2, r4, #54	; 0x36
   26f6c:	2102      	movs	r1, #2
   26f6e:	2019      	movs	r0, #25
   26f70:	f7ff fde4 	bl	26b3c <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   26f74:	4603      	mov	r3, r0
   26f76:	2800      	cmp	r0, #0
   26f78:	d086      	beq.n	26e88 <adv_set_fields+0x144>
   26f7a:	e7ae      	b.n	26eda <adv_set_fields+0x196>
        rc = ble_hs_adv_set_array16(BLE_HS_ADV_TYPE_ADV_ITVL, 1,
   26f7c:	9702      	str	r7, [sp, #8]
   26f7e:	9601      	str	r6, [sp, #4]
   26f80:	f10d 0316 	add.w	r3, sp, #22
   26f84:	9300      	str	r3, [sp, #0]
   26f86:	462b      	mov	r3, r5
   26f88:	f104 023a 	add.w	r2, r4, #58	; 0x3a
   26f8c:	2101      	movs	r1, #1
   26f8e:	201a      	movs	r0, #26
   26f90:	f7ff fe9f 	bl	26cd2 <ble_hs_adv_set_array16>
        if (rc != 0) {
   26f94:	4603      	mov	r3, r0
   26f96:	2800      	cmp	r0, #0
   26f98:	f43f af7b 	beq.w	26e92 <adv_set_fields+0x14e>
   26f9c:	e79d      	b.n	26eda <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID32,
   26f9e:	9702      	str	r7, [sp, #8]
   26fa0:	9601      	str	r6, [sp, #4]
   26fa2:	f10d 0316 	add.w	r3, sp, #22
   26fa6:	9300      	str	r3, [sp, #0]
   26fa8:	462b      	mov	r3, r5
   26faa:	2020      	movs	r0, #32
   26fac:	f7ff fdc6 	bl	26b3c <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   26fb0:	4603      	mov	r3, r0
   26fb2:	2800      	cmp	r0, #0
   26fb4:	f43f af73 	beq.w	26e9e <adv_set_fields+0x15a>
   26fb8:	e78f      	b.n	26eda <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID128,
   26fba:	9702      	str	r7, [sp, #8]
   26fbc:	9601      	str	r6, [sp, #4]
   26fbe:	f10d 0316 	add.w	r3, sp, #22
   26fc2:	9300      	str	r3, [sp, #0]
   26fc4:	462b      	mov	r3, r5
   26fc6:	2021      	movs	r0, #33	; 0x21
   26fc8:	f7ff fdb8 	bl	26b3c <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   26fcc:	4603      	mov	r3, r0
   26fce:	2800      	cmp	r0, #0
   26fd0:	f43f af6c 	beq.w	26eac <adv_set_fields+0x168>
   26fd4:	e781      	b.n	26eda <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_URI, adv_fields->uri_len,
   26fd6:	9702      	str	r7, [sp, #8]
   26fd8:	9601      	str	r6, [sp, #4]
   26fda:	f10d 0316 	add.w	r3, sp, #22
   26fde:	9300      	str	r3, [sp, #0]
   26fe0:	462b      	mov	r3, r5
   26fe2:	2024      	movs	r0, #36	; 0x24
   26fe4:	f7ff fdaa 	bl	26b3c <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   26fe8:	4603      	mov	r3, r0
   26fea:	2800      	cmp	r0, #0
   26fec:	f43f af65 	beq.w	26eba <adv_set_fields+0x176>
   26ff0:	e773      	b.n	26eda <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_MFG_DATA,
   26ff2:	9702      	str	r7, [sp, #8]
   26ff4:	9601      	str	r6, [sp, #4]
   26ff6:	f10d 0316 	add.w	r3, sp, #22
   26ffa:	9300      	str	r3, [sp, #0]
   26ffc:	462b      	mov	r3, r5
   26ffe:	20ff      	movs	r0, #255	; 0xff
   27000:	f7ff fd9c 	bl	26b3c <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   27004:	4603      	mov	r3, r0
   27006:	2800      	cmp	r0, #0
   27008:	f43f af5e 	beq.w	26ec8 <adv_set_fields+0x184>
   2700c:	e765      	b.n	26eda <adv_set_fields+0x196>
    return 0;
   2700e:	2300      	movs	r3, #0
   27010:	e763      	b.n	26eda <adv_set_fields+0x196>
	...

00027014 <ble_hs_adv_parse_uuids16>:
    if (data_len % 2 != 0) {
   27014:	f012 0f01 	tst.w	r2, #1
   27018:	d11a      	bne.n	27050 <ble_hs_adv_parse_uuids16+0x3c>
{
   2701a:	b570      	push	{r4, r5, r6, lr}
   2701c:	b086      	sub	sp, #24
   2701e:	4605      	mov	r5, r0
   27020:	460e      	mov	r6, r1
    adv_fields->uuids16 = ble_hs_adv_uuids16;
   27022:	4b0c      	ldr	r3, [pc, #48]	; (27054 <ble_hs_adv_parse_uuids16+0x40>)
   27024:	6043      	str	r3, [r0, #4]
    adv_fields->num_uuids16 = data_len / 2;
   27026:	0852      	lsrs	r2, r2, #1
   27028:	7202      	strb	r2, [r0, #8]
    for (i = 0; i < adv_fields->num_uuids16; i++) {
   2702a:	2400      	movs	r4, #0
   2702c:	e00a      	b.n	27044 <ble_hs_adv_parse_uuids16+0x30>
        ble_uuid_init_from_buf(&uuid, data + i * 2, 2);
   2702e:	2202      	movs	r2, #2
   27030:	eb06 0144 	add.w	r1, r6, r4, lsl #1
   27034:	a801      	add	r0, sp, #4
   27036:	f002 fc88 	bl	2994a <ble_uuid_init_from_buf>
        ble_hs_adv_uuids16[i] = uuid.u16;
   2703a:	4b06      	ldr	r3, [pc, #24]	; (27054 <ble_hs_adv_parse_uuids16+0x40>)
   2703c:	9a01      	ldr	r2, [sp, #4]
   2703e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    for (i = 0; i < adv_fields->num_uuids16; i++) {
   27042:	3401      	adds	r4, #1
   27044:	7a2b      	ldrb	r3, [r5, #8]
   27046:	42a3      	cmp	r3, r4
   27048:	dcf1      	bgt.n	2702e <ble_hs_adv_parse_uuids16+0x1a>
    return 0;
   2704a:	2000      	movs	r0, #0
}
   2704c:	b006      	add	sp, #24
   2704e:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EBADDATA;
   27050:	200a      	movs	r0, #10
}
   27052:	4770      	bx	lr
   27054:	10005eb4 	.word	0x10005eb4

00027058 <ble_hs_adv_parse_uuids32>:
    if (data_len % 4 != 0) {
   27058:	f012 0f03 	tst.w	r2, #3
   2705c:	d11e      	bne.n	2709c <ble_hs_adv_parse_uuids32+0x44>
{
   2705e:	b5f0      	push	{r4, r5, r6, r7, lr}
   27060:	b087      	sub	sp, #28
   27062:	4606      	mov	r6, r0
   27064:	460f      	mov	r7, r1
    adv_fields->uuids32 = ble_hs_adv_uuids32;
   27066:	4b0e      	ldr	r3, [pc, #56]	; (270a0 <ble_hs_adv_parse_uuids32+0x48>)
   27068:	60c3      	str	r3, [r0, #12]
    adv_fields->num_uuids32 = data_len / 4;
   2706a:	0892      	lsrs	r2, r2, #2
   2706c:	7402      	strb	r2, [r0, #16]
    for (i = 0; i < adv_fields->num_uuids32; i++) {
   2706e:	2400      	movs	r4, #0
   27070:	e00e      	b.n	27090 <ble_hs_adv_parse_uuids32+0x38>
        ble_uuid_init_from_buf(&uuid, data + i * 4, 4);
   27072:	ad01      	add	r5, sp, #4
   27074:	2204      	movs	r2, #4
   27076:	eb07 0184 	add.w	r1, r7, r4, lsl #2
   2707a:	4628      	mov	r0, r5
   2707c:	f002 fc65 	bl	2994a <ble_uuid_init_from_buf>
        ble_hs_adv_uuids32[i] = uuid.u32;
   27080:	4b07      	ldr	r3, [pc, #28]	; (270a0 <ble_hs_adv_parse_uuids32+0x48>)
   27082:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   27086:	e895 0003 	ldmia.w	r5, {r0, r1}
   2708a:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = 0; i < adv_fields->num_uuids32; i++) {
   2708e:	3401      	adds	r4, #1
   27090:	7c33      	ldrb	r3, [r6, #16]
   27092:	42a3      	cmp	r3, r4
   27094:	dced      	bgt.n	27072 <ble_hs_adv_parse_uuids32+0x1a>
    return 0;
   27096:	2000      	movs	r0, #0
}
   27098:	b007      	add	sp, #28
   2709a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EBADDATA;
   2709c:	200a      	movs	r0, #10
}
   2709e:	4770      	bx	lr
   270a0:	10005eec 	.word	0x10005eec

000270a4 <ble_hs_adv_parse_uuids128>:
    if (data_len % 16 != 0) {
   270a4:	f012 0f0f 	tst.w	r2, #15
   270a8:	d128      	bne.n	270fc <ble_hs_adv_parse_uuids128+0x58>
{
   270aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   270ae:	b086      	sub	sp, #24
   270b0:	4606      	mov	r6, r0
   270b2:	4688      	mov	r8, r1
    adv_fields->uuids128 = ble_hs_adv_uuids128;
   270b4:	4b12      	ldr	r3, [pc, #72]	; (27100 <ble_hs_adv_parse_uuids128+0x5c>)
   270b6:	6143      	str	r3, [r0, #20]
    adv_fields->num_uuids128 = data_len / 16;
   270b8:	0912      	lsrs	r2, r2, #4
   270ba:	7602      	strb	r2, [r0, #24]
    for (i = 0; i < adv_fields->num_uuids128; i++) {
   270bc:	2500      	movs	r5, #0
   270be:	7e33      	ldrb	r3, [r6, #24]
   270c0:	42ab      	cmp	r3, r5
   270c2:	dc03      	bgt.n	270cc <ble_hs_adv_parse_uuids128+0x28>
    return 0;
   270c4:	2000      	movs	r0, #0
}
   270c6:	b006      	add	sp, #24
   270c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ble_uuid_init_from_buf(&uuid, data + i * 16, 16);
   270cc:	012c      	lsls	r4, r5, #4
   270ce:	2210      	movs	r2, #16
   270d0:	eb08 1105 	add.w	r1, r8, r5, lsl #4
   270d4:	a801      	add	r0, sp, #4
   270d6:	f002 fc38 	bl	2994a <ble_uuid_init_from_buf>
        ble_hs_adv_uuids128[i] = uuid.u128;
   270da:	f8df e024 	ldr.w	lr, [pc, #36]	; 27100 <ble_hs_adv_parse_uuids128+0x5c>
   270de:	eb04 0c05 	add.w	ip, r4, r5
   270e2:	eb0e 070c 	add.w	r7, lr, ip
   270e6:	ac01      	add	r4, sp, #4
   270e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   270ea:	f84e 000c 	str.w	r0, [lr, ip]
   270ee:	6079      	str	r1, [r7, #4]
   270f0:	60ba      	str	r2, [r7, #8]
   270f2:	60fb      	str	r3, [r7, #12]
   270f4:	7823      	ldrb	r3, [r4, #0]
   270f6:	743b      	strb	r3, [r7, #16]
    for (i = 0; i < adv_fields->num_uuids128; i++) {
   270f8:	3501      	adds	r5, #1
   270fa:	e7e0      	b.n	270be <ble_hs_adv_parse_uuids128+0x1a>
        return BLE_HS_EBADDATA;
   270fc:	200a      	movs	r0, #10
}
   270fe:	4770      	bx	lr
   27100:	10005ea0 	.word	0x10005ea0

00027104 <ble_hs_adv_parse_one_field>:
    if (src_len < 1) {
   27104:	2b00      	cmp	r3, #0
   27106:	f000 810f 	beq.w	27328 <ble_hs_adv_parse_one_field+0x224>
{
   2710a:	b538      	push	{r3, r4, r5, lr}
   2710c:	4604      	mov	r4, r0
   2710e:	4618      	mov	r0, r3
    *total_len = src[0] + 1;
   27110:	7813      	ldrb	r3, [r2, #0]
   27112:	3301      	adds	r3, #1
   27114:	b2db      	uxtb	r3, r3
   27116:	700b      	strb	r3, [r1, #0]
    if (src_len < *total_len) {
   27118:	4283      	cmp	r3, r0
   2711a:	f200 8107 	bhi.w	2732c <ble_hs_adv_parse_one_field+0x228>
    type = src[1];
   2711e:	7855      	ldrb	r5, [r2, #1]
    data = src + 2;
   27120:	1c91      	adds	r1, r2, #2
    data_len = *total_len - 2;
   27122:	3b02      	subs	r3, #2
   27124:	b2db      	uxtb	r3, r3
    if (data_len > BLE_HS_ADV_MAX_FIELD_SZ) {
   27126:	2b1d      	cmp	r3, #29
   27128:	f200 8102 	bhi.w	27330 <ble_hs_adv_parse_one_field+0x22c>
    switch (type) {
   2712c:	2d24      	cmp	r5, #36	; 0x24
   2712e:	d82d      	bhi.n	2718c <ble_hs_adv_parse_one_field+0x88>
   27130:	b268      	sxtb	r0, r5
   27132:	2800      	cmp	r0, #0
   27134:	f000 80fe 	beq.w	27334 <ble_hs_adv_parse_one_field+0x230>
   27138:	3d01      	subs	r5, #1
   2713a:	2d23      	cmp	r5, #35	; 0x23
   2713c:	f200 80fc 	bhi.w	27338 <ble_hs_adv_parse_one_field+0x234>
   27140:	e8df f015 	tbh	[pc, r5, lsl #1]
   27144:	0034002d 	.word	0x0034002d
   27148:	004c0040 	.word	0x004c0040
   2714c:	00640058 	.word	0x00640058
   27150:	007b0070 	.word	0x007b0070
   27154:	00910086 	.word	0x00910086
   27158:	00fa00fa 	.word	0x00fa00fa
   2715c:	00fa00fa 	.word	0x00fa00fa
   27160:	00fa00fa 	.word	0x00fa00fa
   27164:	009f00fa 	.word	0x009f00fa
   27168:	00fa00fa 	.word	0x00fa00fa
   2716c:	00a400fa 	.word	0x00a400fa
   27170:	00fa00ab 	.word	0x00fa00ab
   27174:	00cf00bf 	.word	0x00cf00bf
   27178:	00fa00fa 	.word	0x00fa00fa
   2717c:	00fa00fa 	.word	0x00fa00fa
   27180:	00df00fa 	.word	0x00df00fa
   27184:	00fa00e6 	.word	0x00fa00e6
   27188:	00ed00fa 	.word	0x00ed00fa
   2718c:	2dff      	cmp	r5, #255	; 0xff
   2718e:	d104      	bne.n	2719a <ble_hs_adv_parse_one_field+0x96>
        adv_fields->mfg_data = data;
   27190:	65a1      	str	r1, [r4, #88]	; 0x58
        adv_fields->mfg_data_len = data_len;
   27192:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    return 0;
   27196:	2000      	movs	r0, #0
        break;
   27198:	e0c9      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
    switch (type) {
   2719a:	2000      	movs	r0, #0
   2719c:	e0c7      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
        if (data_len != BLE_HS_ADV_FLAGS_LEN) {
   2719e:	2b01      	cmp	r3, #1
   271a0:	f040 80cc 	bne.w	2733c <ble_hs_adv_parse_one_field+0x238>
        adv_fields->flags = *data;
   271a4:	7893      	ldrb	r3, [r2, #2]
   271a6:	7023      	strb	r3, [r4, #0]
    return 0;
   271a8:	2000      	movs	r0, #0
        break;
   271aa:	e0c0      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
        rc = ble_hs_adv_parse_uuids16(adv_fields, data, data_len);
   271ac:	461a      	mov	r2, r3
   271ae:	4620      	mov	r0, r4
   271b0:	f7ff ff30 	bl	27014 <ble_hs_adv_parse_uuids16>
        if (rc != 0) {
   271b4:	2800      	cmp	r0, #0
   271b6:	f040 80ba 	bne.w	2732e <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->uuids16_is_complete = 0;
   271ba:	7a63      	ldrb	r3, [r4, #9]
   271bc:	f36f 0300 	bfc	r3, #0, #1
   271c0:	7263      	strb	r3, [r4, #9]
        break;
   271c2:	e0b4      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
        rc = ble_hs_adv_parse_uuids16(adv_fields, data, data_len);
   271c4:	461a      	mov	r2, r3
   271c6:	4620      	mov	r0, r4
   271c8:	f7ff ff24 	bl	27014 <ble_hs_adv_parse_uuids16>
        if (rc != 0) {
   271cc:	2800      	cmp	r0, #0
   271ce:	f040 80ae 	bne.w	2732e <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->uuids16_is_complete = 1;
   271d2:	7a63      	ldrb	r3, [r4, #9]
   271d4:	f043 0301 	orr.w	r3, r3, #1
   271d8:	7263      	strb	r3, [r4, #9]
        break;
   271da:	e0a8      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
        rc = ble_hs_adv_parse_uuids32(adv_fields, data, data_len);
   271dc:	461a      	mov	r2, r3
   271de:	4620      	mov	r0, r4
   271e0:	f7ff ff3a 	bl	27058 <ble_hs_adv_parse_uuids32>
        if (rc != 0) {
   271e4:	2800      	cmp	r0, #0
   271e6:	f040 80a2 	bne.w	2732e <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->uuids32_is_complete = 0;
   271ea:	7c63      	ldrb	r3, [r4, #17]
   271ec:	f36f 0300 	bfc	r3, #0, #1
   271f0:	7463      	strb	r3, [r4, #17]
        break;
   271f2:	e09c      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
        rc = ble_hs_adv_parse_uuids32(adv_fields, data, data_len);
   271f4:	461a      	mov	r2, r3
   271f6:	4620      	mov	r0, r4
   271f8:	f7ff ff2e 	bl	27058 <ble_hs_adv_parse_uuids32>
        if (rc != 0) {
   271fc:	2800      	cmp	r0, #0
   271fe:	f040 8096 	bne.w	2732e <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->uuids32_is_complete = 1;
   27202:	7c63      	ldrb	r3, [r4, #17]
   27204:	f043 0301 	orr.w	r3, r3, #1
   27208:	7463      	strb	r3, [r4, #17]
        break;
   2720a:	e090      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
        rc = ble_hs_adv_parse_uuids128(adv_fields, data, data_len);
   2720c:	461a      	mov	r2, r3
   2720e:	4620      	mov	r0, r4
   27210:	f7ff ff48 	bl	270a4 <ble_hs_adv_parse_uuids128>
        if (rc != 0) {
   27214:	2800      	cmp	r0, #0
   27216:	f040 808a 	bne.w	2732e <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->uuids128_is_complete = 0;
   2721a:	7e63      	ldrb	r3, [r4, #25]
   2721c:	f36f 0300 	bfc	r3, #0, #1
   27220:	7663      	strb	r3, [r4, #25]
        break;
   27222:	e084      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
        rc = ble_hs_adv_parse_uuids128(adv_fields, data, data_len);
   27224:	461a      	mov	r2, r3
   27226:	4620      	mov	r0, r4
   27228:	f7ff ff3c 	bl	270a4 <ble_hs_adv_parse_uuids128>
        if (rc != 0) {
   2722c:	2800      	cmp	r0, #0
   2722e:	d17e      	bne.n	2732e <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->uuids128_is_complete = 1;
   27230:	7e63      	ldrb	r3, [r4, #25]
   27232:	f043 0301 	orr.w	r3, r3, #1
   27236:	7663      	strb	r3, [r4, #25]
        break;
   27238:	e079      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->name = data;
   2723a:	61e1      	str	r1, [r4, #28]
        adv_fields->name_len = data_len;
   2723c:	f884 3020 	strb.w	r3, [r4, #32]
        adv_fields->name_is_complete = 0;
   27240:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   27244:	f36f 0300 	bfc	r3, #0, #1
   27248:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return 0;
   2724c:	2000      	movs	r0, #0
        break;
   2724e:	e06e      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->name = data;
   27250:	61e1      	str	r1, [r4, #28]
        adv_fields->name_len = data_len;
   27252:	f884 3020 	strb.w	r3, [r4, #32]
        adv_fields->name_is_complete = 1;
   27256:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   2725a:	f043 0301 	orr.w	r3, r3, #1
   2725e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return 0;
   27262:	2000      	movs	r0, #0
        break;
   27264:	e063      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
        if (data_len != BLE_HS_ADV_TX_PWR_LVL_LEN) {
   27266:	2b01      	cmp	r3, #1
   27268:	d16a      	bne.n	27340 <ble_hs_adv_parse_one_field+0x23c>
        adv_fields->tx_pwr_lvl = *data;
   2726a:	f992 3002 	ldrsb.w	r3, [r2, #2]
   2726e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        adv_fields->tx_pwr_lvl_is_present = 1;
   27272:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   27276:	f043 0301 	orr.w	r3, r3, #1
   2727a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    return 0;
   2727e:	2000      	movs	r0, #0
        break;
   27280:	e055      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
        if (data_len != BLE_HS_ADV_SLAVE_ITVL_RANGE_LEN) {
   27282:	2b04      	cmp	r3, #4
   27284:	d15e      	bne.n	27344 <ble_hs_adv_parse_one_field+0x240>
        adv_fields->slave_itvl_range = data;
   27286:	6261      	str	r1, [r4, #36]	; 0x24
    return 0;
   27288:	2000      	movs	r0, #0
        break;
   2728a:	e050      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
        if (data_len < BLE_HS_ADV_SVC_DATA_UUID16_MIN_LEN) {
   2728c:	2b01      	cmp	r3, #1
   2728e:	d95b      	bls.n	27348 <ble_hs_adv_parse_one_field+0x244>
        adv_fields->svc_data_uuid16 = data;
   27290:	62a1      	str	r1, [r4, #40]	; 0x28
        adv_fields->svc_data_uuid16_len = data_len;
   27292:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    return 0;
   27296:	2000      	movs	r0, #0
        break;
   27298:	e049      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
        if (data_len % BLE_HS_ADV_PUBLIC_TGT_ADDR_ENTRY_LEN != 0) {
   2729a:	4a2f      	ldr	r2, [pc, #188]	; (27358 <ble_hs_adv_parse_one_field+0x254>)
   2729c:	fba2 0203 	umull	r0, r2, r2, r3
   272a0:	0892      	lsrs	r2, r2, #2
   272a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   272a6:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   272aa:	f012 0fff 	tst.w	r2, #255	; 0xff
   272ae:	d14d      	bne.n	2734c <ble_hs_adv_parse_one_field+0x248>
        adv_fields->public_tgt_addr = data;
   272b0:	6321      	str	r1, [r4, #48]	; 0x30
        adv_fields->num_public_tgt_addrs =
   272b2:	4a29      	ldr	r2, [pc, #164]	; (27358 <ble_hs_adv_parse_one_field+0x254>)
   272b4:	fba2 2303 	umull	r2, r3, r2, r3
   272b8:	089b      	lsrs	r3, r3, #2
   272ba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return 0;
   272be:	2000      	movs	r0, #0
        break;
   272c0:	e035      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
        if (data_len != BLE_HS_ADV_APPEARANCE_LEN) {
   272c2:	2b02      	cmp	r3, #2
   272c4:	d001      	beq.n	272ca <ble_hs_adv_parse_one_field+0x1c6>
            return BLE_HS_EBADDATA;
   272c6:	200a      	movs	r0, #10
   272c8:	e031      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->appearance = get_le16(data);
   272ca:	4608      	mov	r0, r1
   272cc:	f7f1 fda6 	bl	18e1c <get_le16>
   272d0:	86e0      	strh	r0, [r4, #54]	; 0x36
        adv_fields->appearance_is_present = 1;
   272d2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   272d6:	f043 0301 	orr.w	r3, r3, #1
   272da:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return 0;
   272de:	2000      	movs	r0, #0
        break;
   272e0:	e025      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
        if (data_len != BLE_HS_ADV_ADV_ITVL_LEN) {
   272e2:	2b02      	cmp	r3, #2
   272e4:	d001      	beq.n	272ea <ble_hs_adv_parse_one_field+0x1e6>
            return BLE_HS_EBADDATA;
   272e6:	200a      	movs	r0, #10
   272e8:	e021      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->adv_itvl = get_le16(data);
   272ea:	4608      	mov	r0, r1
   272ec:	f7f1 fd96 	bl	18e1c <get_le16>
   272f0:	8760      	strh	r0, [r4, #58]	; 0x3a
        adv_fields->adv_itvl_is_present = 1;
   272f2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   272f6:	f043 0301 	orr.w	r3, r3, #1
   272fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return 0;
   272fe:	2000      	movs	r0, #0
        break;
   27300:	e015      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
        if (data_len < BLE_HS_ADV_SVC_DATA_UUID32_MIN_LEN) {
   27302:	2b03      	cmp	r3, #3
   27304:	d924      	bls.n	27350 <ble_hs_adv_parse_one_field+0x24c>
        adv_fields->svc_data_uuid32 = data;
   27306:	6421      	str	r1, [r4, #64]	; 0x40
        adv_fields->svc_data_uuid32_len = data_len;
   27308:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    return 0;
   2730c:	2000      	movs	r0, #0
        break;
   2730e:	e00e      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
        if (data_len < BLE_HS_ADV_SVC_DATA_UUID128_MIN_LEN) {
   27310:	2b0f      	cmp	r3, #15
   27312:	d91f      	bls.n	27354 <ble_hs_adv_parse_one_field+0x250>
        adv_fields->svc_data_uuid128 = data;
   27314:	64a1      	str	r1, [r4, #72]	; 0x48
        adv_fields->svc_data_uuid128_len = data_len;
   27316:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    return 0;
   2731a:	2000      	movs	r0, #0
        break;
   2731c:	e007      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->uri = data;
   2731e:	6521      	str	r1, [r4, #80]	; 0x50
        adv_fields->uri_len = data_len;
   27320:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    return 0;
   27324:	2000      	movs	r0, #0
        break;
   27326:	e002      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
        return BLE_HS_EMSGSIZE;
   27328:	2004      	movs	r0, #4
}
   2732a:	4770      	bx	lr
        return BLE_HS_EMSGSIZE;
   2732c:	2004      	movs	r0, #4
}
   2732e:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_EBADDATA;
   27330:	200a      	movs	r0, #10
   27332:	e7fc      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
    switch (type) {
   27334:	2000      	movs	r0, #0
   27336:	e7fa      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
   27338:	2000      	movs	r0, #0
   2733a:	e7f8      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
            return BLE_HS_EBADDATA;
   2733c:	200a      	movs	r0, #10
   2733e:	e7f6      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
            return BLE_HS_EBADDATA;
   27340:	200a      	movs	r0, #10
   27342:	e7f4      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
            return BLE_HS_EBADDATA;
   27344:	200a      	movs	r0, #10
   27346:	e7f2      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
            return BLE_HS_EBADDATA;
   27348:	200a      	movs	r0, #10
   2734a:	e7f0      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
            return BLE_HS_EBADDATA;
   2734c:	200a      	movs	r0, #10
   2734e:	e7ee      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
            return BLE_HS_EBADDATA;
   27350:	200a      	movs	r0, #10
   27352:	e7ec      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
            return BLE_HS_EBADDATA;
   27354:	200a      	movs	r0, #10
   27356:	e7ea      	b.n	2732e <ble_hs_adv_parse_one_field+0x22a>
   27358:	aaaaaaab 	.word	0xaaaaaaab

0002735c <ble_hs_adv_set_fields>:
{
   2735c:	b510      	push	{r4, lr}
   2735e:	b082      	sub	sp, #8
    return adv_set_fields(adv_fields, dst, dst_len, max_len, NULL);
   27360:	2400      	movs	r4, #0
   27362:	9400      	str	r4, [sp, #0]
   27364:	f7ff fcee 	bl	26d44 <adv_set_fields>
}
   27368:	b002      	add	sp, #8
   2736a:	bd10      	pop	{r4, pc}

0002736c <ble_hs_adv_parse_fields>:
{
   2736c:	b570      	push	{r4, r5, r6, lr}
   2736e:	b082      	sub	sp, #8
   27370:	4606      	mov	r6, r0
   27372:	460d      	mov	r5, r1
   27374:	4614      	mov	r4, r2
    memset(adv_fields, 0, sizeof *adv_fields);
   27376:	2260      	movs	r2, #96	; 0x60
   27378:	2100      	movs	r1, #0
   2737a:	f7f3 fca0 	bl	1acbe <memset>
    while (src_len > 0) {
   2737e:	b174      	cbz	r4, 2739e <ble_hs_adv_parse_fields+0x32>
        rc = ble_hs_adv_parse_one_field(adv_fields, &field_len, src, src_len);
   27380:	4623      	mov	r3, r4
   27382:	462a      	mov	r2, r5
   27384:	f10d 0107 	add.w	r1, sp, #7
   27388:	4630      	mov	r0, r6
   2738a:	f7ff febb 	bl	27104 <ble_hs_adv_parse_one_field>
        if (rc != 0) {
   2738e:	4603      	mov	r3, r0
   27390:	b930      	cbnz	r0, 273a0 <ble_hs_adv_parse_fields+0x34>
        src += field_len;
   27392:	f89d 2007 	ldrb.w	r2, [sp, #7]
   27396:	4415      	add	r5, r2
        src_len -= field_len;
   27398:	1aa4      	subs	r4, r4, r2
   2739a:	b2e4      	uxtb	r4, r4
   2739c:	e7ef      	b.n	2737e <ble_hs_adv_parse_fields+0x12>
    return 0;
   2739e:	2300      	movs	r3, #0
}
   273a0:	4618      	mov	r0, r3
   273a2:	b002      	add	sp, #8
   273a4:	bd70      	pop	{r4, r5, r6, pc}

000273a6 <ble_hs_adv_parse>:
{
   273a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   273a8:	4605      	mov	r5, r0
   273aa:	460c      	mov	r4, r1
   273ac:	4617      	mov	r7, r2
   273ae:	461e      	mov	r6, r3
    while (length > 1) {
   273b0:	e006      	b.n	273c0 <ble_hs_adv_parse+0x1a>
        length -= 1 + field->length;
   273b2:	7829      	ldrb	r1, [r5, #0]
   273b4:	1a64      	subs	r4, r4, r1
   273b6:	b2e4      	uxtb	r4, r4
   273b8:	3c01      	subs	r4, #1
   273ba:	b2e4      	uxtb	r4, r4
        data += 1 + field->length;
   273bc:	3101      	adds	r1, #1
   273be:	440d      	add	r5, r1
    while (length > 1) {
   273c0:	2c01      	cmp	r4, #1
   273c2:	d909      	bls.n	273d8 <ble_hs_adv_parse+0x32>
        if (field->length >= length) {
   273c4:	782b      	ldrb	r3, [r5, #0]
   273c6:	42a3      	cmp	r3, r4
   273c8:	d209      	bcs.n	273de <ble_hs_adv_parse+0x38>
        if (func(field, user_data) == 0) {
   273ca:	4631      	mov	r1, r6
   273cc:	4628      	mov	r0, r5
   273ce:	47b8      	blx	r7
   273d0:	4603      	mov	r3, r0
   273d2:	2800      	cmp	r0, #0
   273d4:	d1ed      	bne.n	273b2 <ble_hs_adv_parse+0xc>
   273d6:	e000      	b.n	273da <ble_hs_adv_parse+0x34>
    return 0;
   273d8:	2300      	movs	r3, #0
}
   273da:	4618      	mov	r0, r3
   273dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return BLE_HS_EBADDATA;
   273de:	230a      	movs	r3, #10
   273e0:	e7fb      	b.n	273da <ble_hs_adv_parse+0x34>
	...

000273e4 <ble_hs_adv_find_field>:

int
ble_hs_adv_find_field(uint8_t type, const uint8_t *data, uint8_t length,
                      const struct ble_hs_adv_field **out)
{
   273e4:	b530      	push	{r4, r5, lr}
   273e6:	b083      	sub	sp, #12
   273e8:	4605      	mov	r5, r0
   273ea:	4608      	mov	r0, r1
   273ec:	4611      	mov	r1, r2
   273ee:	461c      	mov	r4, r3
    int rc;
    struct find_field_data ffd = {
   273f0:	f88d 5000 	strb.w	r5, [sp]
   273f4:	2300      	movs	r3, #0
   273f6:	9301      	str	r3, [sp, #4]
            .type = type,
            .field = NULL,
    };

    rc = ble_hs_adv_parse(data, length, find_field_func, &ffd);
   273f8:	466b      	mov	r3, sp
   273fa:	4a05      	ldr	r2, [pc, #20]	; (27410 <ble_hs_adv_find_field+0x2c>)
   273fc:	f7ff ffd3 	bl	273a6 <ble_hs_adv_parse>
    if (rc != 0) {
   27400:	b910      	cbnz	r0, 27408 <ble_hs_adv_find_field+0x24>
        return rc;
    }

    if (!ffd.field) {
   27402:	9b01      	ldr	r3, [sp, #4]
   27404:	b113      	cbz	r3, 2740c <ble_hs_adv_find_field+0x28>
        return BLE_HS_ENOENT;
    }

    *out = ffd.field;
   27406:	6023      	str	r3, [r4, #0]

    return 0;
}
   27408:	b003      	add	sp, #12
   2740a:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ENOENT;
   2740c:	2005      	movs	r0, #5
   2740e:	e7fb      	b.n	27408 <ble_hs_adv_find_field+0x24>
   27410:	00026ac9 	.word	0x00026ac9

00027414 <ble_hs_atomic_conn_delete>:

#include "ble_hs_priv.h"

int
ble_hs_atomic_conn_delete(uint16_t conn_handle)
{
   27414:	b510      	push	{r4, lr}
   27416:	4604      	mov	r4, r0
    struct ble_hs_conn *conn;

    ble_hs_lock();
   27418:	f7ff f88e 	bl	26538 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   2741c:	4620      	mov	r0, r4
   2741e:	f000 f90f 	bl	27640 <ble_hs_conn_find>
    if (conn != NULL) {
   27422:	4604      	mov	r4, r0
   27424:	b120      	cbz	r0, 27430 <ble_hs_atomic_conn_delete+0x1c>
        ble_hs_conn_remove(conn);
   27426:	f000 f8f9 	bl	2761c <ble_hs_conn_remove>
#if MYNEWT_VAL(BLE_PERIODIC_ADV_SYNC_TRANSFER)
        if (conn->psync) {
            ble_hs_periodic_sync_free(conn->psync);
        }
#endif
        ble_hs_conn_free(conn);
   2742a:	4620      	mov	r0, r4
   2742c:	f000 f88e 	bl	2754c <ble_hs_conn_free>

    }
    ble_hs_unlock();
   27430:	f7ff f886 	bl	26540 <ble_hs_unlock>

    return conn != NULL ? 0 : BLE_HS_ENOTCONN;
   27434:	b10c      	cbz	r4, 2743a <ble_hs_atomic_conn_delete+0x26>
   27436:	2000      	movs	r0, #0
}
   27438:	bd10      	pop	{r4, pc}
    return conn != NULL ? 0 : BLE_HS_ENOTCONN;
   2743a:	2007      	movs	r0, #7
   2743c:	e7fc      	b.n	27438 <ble_hs_atomic_conn_delete+0x24>

0002743e <ble_hs_atomic_conn_flags>:
    ble_hs_unlock();
}

int
ble_hs_atomic_conn_flags(uint16_t conn_handle, ble_hs_conn_flags_t *out_flags)
{
   2743e:	b538      	push	{r3, r4, r5, lr}
   27440:	4605      	mov	r5, r0
   27442:	460c      	mov	r4, r1
    struct ble_hs_conn *conn;
    int rc;

    ble_hs_lock();
   27444:	f7ff f878 	bl	26538 <ble_hs_lock>

    conn = ble_hs_conn_find(conn_handle);
   27448:	4628      	mov	r0, r5
   2744a:	f000 f8f9 	bl	27640 <ble_hs_conn_find>
    if (conn == NULL) {
   2744e:	b140      	cbz	r0, 27462 <ble_hs_atomic_conn_flags+0x24>
        rc = BLE_HS_ENOTCONN;
    } else {
        rc = 0;
        if (out_flags != NULL) {
   27450:	b14c      	cbz	r4, 27466 <ble_hs_atomic_conn_flags+0x28>
            *out_flags = conn->bhc_flags;
   27452:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   27456:	7023      	strb	r3, [r4, #0]
        rc = 0;
   27458:	2400      	movs	r4, #0
        }
    }

    ble_hs_unlock();
   2745a:	f7ff f871 	bl	26540 <ble_hs_unlock>

    return rc;
}
   2745e:	4620      	mov	r0, r4
   27460:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTCONN;
   27462:	2407      	movs	r4, #7
   27464:	e7f9      	b.n	2745a <ble_hs_atomic_conn_flags+0x1c>
        rc = 0;
   27466:	2400      	movs	r4, #0
   27468:	e7f7      	b.n	2745a <ble_hs_atomic_conn_flags+0x1c>

0002746a <ble_hs_atomic_first_conn_handle>:
    return rc;
}

uint16_t
ble_hs_atomic_first_conn_handle(void)
{
   2746a:	b510      	push	{r4, lr}
    const struct ble_hs_conn *conn;
    uint16_t conn_handle;

    ble_hs_lock();
   2746c:	f7ff f864 	bl	26538 <ble_hs_lock>

    conn = ble_hs_conn_first();
   27470:	f000 f910 	bl	27694 <ble_hs_conn_first>
    if (conn != NULL) {
   27474:	b120      	cbz	r0, 27480 <ble_hs_atomic_first_conn_handle+0x16>
        conn_handle = conn->bhc_handle;
   27476:	8884      	ldrh	r4, [r0, #4]
    } else {
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
    }

    ble_hs_unlock();
   27478:	f7ff f862 	bl	26540 <ble_hs_unlock>

    return conn_handle;
}
   2747c:	4620      	mov	r0, r4
   2747e:	bd10      	pop	{r4, pc}
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   27480:	f64f 74ff 	movw	r4, #65535	; 0xffff
   27484:	e7f8      	b.n	27478 <ble_hs_atomic_first_conn_handle+0xe>
	...

00027488 <ble_hs_conn_can_alloc>:

static const uint8_t ble_hs_conn_null_addr[6];

int
ble_hs_conn_can_alloc(void)
{
   27488:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_CONNECT
    return 0;
#endif

    return ble_hs_conn_pool.mp_num_free >= 1 &&
   2748a:	4b08      	ldr	r3, [pc, #32]	; (274ac <ble_hs_conn_can_alloc+0x24>)
   2748c:	88db      	ldrh	r3, [r3, #6]
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   2748e:	b153      	cbz	r3, 274a6 <ble_hs_conn_can_alloc+0x1e>
   27490:	4b07      	ldr	r3, [pc, #28]	; (274b0 <ble_hs_conn_can_alloc+0x28>)
   27492:	88db      	ldrh	r3, [r3, #6]
    return ble_hs_conn_pool.mp_num_free >= 1 &&
   27494:	2b02      	cmp	r3, #2
   27496:	d801      	bhi.n	2749c <ble_hs_conn_can_alloc+0x14>
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   27498:	2000      	movs	r0, #0
   2749a:	e005      	b.n	274a8 <ble_hs_conn_can_alloc+0x20>
           ble_gatts_conn_can_alloc();
   2749c:	f7fe fc38 	bl	25d10 <ble_gatts_conn_can_alloc>
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   274a0:	b110      	cbz	r0, 274a8 <ble_hs_conn_can_alloc+0x20>
   274a2:	2001      	movs	r0, #1
   274a4:	e000      	b.n	274a8 <ble_hs_conn_can_alloc+0x20>
   274a6:	2000      	movs	r0, #0
}
   274a8:	bd08      	pop	{r3, pc}
   274aa:	bf00      	nop
   274ac:	10005f88 	.word	0x10005f88
   274b0:	100061b8 	.word	0x100061b8

000274b4 <ble_hs_conn_chan_find_by_scid>:
    return NULL;
#endif

    struct ble_l2cap_chan *chan;

    SLIST_FOREACH(chan, &conn->bhc_channels, next) {
   274b4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   274b6:	e000      	b.n	274ba <ble_hs_conn_chan_find_by_scid+0x6>
   274b8:	6800      	ldr	r0, [r0, #0]
   274ba:	b128      	cbz	r0, 274c8 <ble_hs_conn_chan_find_by_scid+0x14>
        if (chan->scid == cid) {
   274bc:	8903      	ldrh	r3, [r0, #8]
   274be:	428b      	cmp	r3, r1
   274c0:	d001      	beq.n	274c6 <ble_hs_conn_chan_find_by_scid+0x12>
            return chan;
        }
        if (chan->scid > cid) {
   274c2:	d9f9      	bls.n	274b8 <ble_hs_conn_chan_find_by_scid+0x4>
            return NULL;
   274c4:	2000      	movs	r0, #0
        }
    }

    return NULL;
}
   274c6:	4770      	bx	lr
   274c8:	4770      	bx	lr

000274ca <ble_hs_conn_chan_insert>:
    return false;
}

int
ble_hs_conn_chan_insert(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan)
{
   274ca:	b470      	push	{r4, r5, r6}

    struct ble_l2cap_chan *prev;
    struct ble_l2cap_chan *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   274cc:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   274ce:	4633      	mov	r3, r6
    prev = NULL;
   274d0:	2500      	movs	r5, #0
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   274d2:	e001      	b.n	274d8 <ble_hs_conn_chan_insert+0xe>
        }
        if (cur->scid > chan->scid) {
            break;
        }

        prev = cur;
   274d4:	461d      	mov	r5, r3
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   274d6:	681b      	ldr	r3, [r3, #0]
   274d8:	b123      	cbz	r3, 274e4 <ble_hs_conn_chan_insert+0x1a>
        if (cur->scid == chan->scid) {
   274da:	891c      	ldrh	r4, [r3, #8]
   274dc:	890a      	ldrh	r2, [r1, #8]
   274de:	4294      	cmp	r4, r2
   274e0:	d00b      	beq.n	274fa <ble_hs_conn_chan_insert+0x30>
        if (cur->scid > chan->scid) {
   274e2:	d9f7      	bls.n	274d4 <ble_hs_conn_chan_insert+0xa>
    }

    if (prev == NULL) {
   274e4:	b12d      	cbz	r5, 274f2 <ble_hs_conn_chan_insert+0x28>
        SLIST_INSERT_HEAD(&conn->bhc_channels, chan, next);
    } else {
        SLIST_INSERT_AFTER(prev, chan, next);
   274e6:	682b      	ldr	r3, [r5, #0]
   274e8:	600b      	str	r3, [r1, #0]
   274ea:	6029      	str	r1, [r5, #0]
    }

    return 0;
   274ec:	2000      	movs	r0, #0
}
   274ee:	bc70      	pop	{r4, r5, r6}
   274f0:	4770      	bx	lr
        SLIST_INSERT_HEAD(&conn->bhc_channels, chan, next);
   274f2:	600e      	str	r6, [r1, #0]
   274f4:	62c1      	str	r1, [r0, #44]	; 0x2c
    return 0;
   274f6:	2000      	movs	r0, #0
   274f8:	e7f9      	b.n	274ee <ble_hs_conn_chan_insert+0x24>
            return BLE_HS_EALREADY;
   274fa:	2002      	movs	r0, #2
   274fc:	e7f7      	b.n	274ee <ble_hs_conn_chan_insert+0x24>

000274fe <ble_hs_conn_delete_chan>:
    return NULL;
}

void
ble_hs_conn_delete_chan(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan)
{
   274fe:	b508      	push	{r3, lr}
    if (conn->bhc_rx_chan == chan) {
   27500:	6b03      	ldr	r3, [r0, #48]	; 0x30
   27502:	428b      	cmp	r3, r1
   27504:	d00b      	beq.n	2751e <ble_hs_conn_delete_chan+0x20>
        conn->bhc_rx_chan = NULL;
    }

    SLIST_REMOVE(&conn->bhc_channels, chan, ble_l2cap_chan, next);
   27506:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   27508:	428b      	cmp	r3, r1
   2750a:	d00b      	beq.n	27524 <ble_hs_conn_delete_chan+0x26>
   2750c:	461a      	mov	r2, r3
   2750e:	681b      	ldr	r3, [r3, #0]
   27510:	428b      	cmp	r3, r1
   27512:	d1fb      	bne.n	2750c <ble_hs_conn_delete_chan+0xe>
   27514:	681b      	ldr	r3, [r3, #0]
   27516:	6013      	str	r3, [r2, #0]
    ble_l2cap_chan_free(conn, chan);
   27518:	f001 fc40 	bl	28d9c <ble_l2cap_chan_free>
}
   2751c:	bd08      	pop	{r3, pc}
        conn->bhc_rx_chan = NULL;
   2751e:	2300      	movs	r3, #0
   27520:	6303      	str	r3, [r0, #48]	; 0x30
   27522:	e7f0      	b.n	27506 <ble_hs_conn_delete_chan+0x8>
    SLIST_REMOVE(&conn->bhc_channels, chan, ble_l2cap_chan, next);
   27524:	681b      	ldr	r3, [r3, #0]
   27526:	62c3      	str	r3, [r0, #44]	; 0x2c
   27528:	e7f6      	b.n	27518 <ble_hs_conn_delete_chan+0x1a>
	...

0002752c <ble_hs_conn_foreach>:

void
ble_hs_conn_foreach(ble_hs_conn_foreach_fn *cb, void *arg)
{
   2752c:	b570      	push	{r4, r5, r6, lr}
   2752e:	4606      	mov	r6, r0
   27530:	460d      	mov	r5, r1
    struct ble_hs_conn *conn;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   27532:	4b05      	ldr	r3, [pc, #20]	; (27548 <ble_hs_conn_foreach+0x1c>)
   27534:	681c      	ldr	r4, [r3, #0]
   27536:	b12c      	cbz	r4, 27544 <ble_hs_conn_foreach+0x18>
        if (cb(conn, arg) != 0) {
   27538:	4629      	mov	r1, r5
   2753a:	4620      	mov	r0, r4
   2753c:	47b0      	blx	r6
   2753e:	b908      	cbnz	r0, 27544 <ble_hs_conn_foreach+0x18>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   27540:	6824      	ldr	r4, [r4, #0]
   27542:	e7f8      	b.n	27536 <ble_hs_conn_foreach+0xa>
            return;
        }
    }
}
   27544:	bd70      	pop	{r4, r5, r6, pc}
   27546:	bf00      	nop
   27548:	10005fa4 	.word	0x10005fa4

0002754c <ble_hs_conn_free>:

    struct ble_l2cap_chan *chan;
    struct os_mbuf_pkthdr *omp;
    int rc;

    if (conn == NULL) {
   2754c:	b300      	cbz	r0, 27590 <ble_hs_conn_free+0x44>
{
   2754e:	b510      	push	{r4, lr}
   27550:	4604      	mov	r4, r0
        return;
    }

    ble_att_svr_prep_clear(&conn->bhc_att_svr.basc_prep_list);
   27552:	3044      	adds	r0, #68	; 0x44
   27554:	f7f9 faf3 	bl	20b3e <ble_att_svr_prep_clear>

    while ((chan = SLIST_FIRST(&conn->bhc_channels)) != NULL) {
   27558:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   2755a:	b149      	cbz	r1, 27570 <ble_hs_conn_free+0x24>
        ble_hs_conn_delete_chan(conn, chan);
   2755c:	4620      	mov	r0, r4
   2755e:	f7ff ffce 	bl	274fe <ble_hs_conn_delete_chan>
   27562:	e7f9      	b.n	27558 <ble_hs_conn_free+0xc>
    }

    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   27564:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   27568:	6423      	str	r3, [r4, #64]	; 0x40
        os_mbuf_free_chain(OS_MBUF_PKTHDR_TO_MBUF(omp));
   2756a:	3810      	subs	r0, #16
   2756c:	f7f2 f84f 	bl	1960e <os_mbuf_free_chain>
    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   27570:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   27572:	b120      	cbz	r0, 2757e <ble_hs_conn_free+0x32>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   27574:	6843      	ldr	r3, [r0, #4]
   27576:	63e3      	str	r3, [r4, #60]	; 0x3c
   27578:	2b00      	cmp	r3, #0
   2757a:	d1f6      	bne.n	2756a <ble_hs_conn_free+0x1e>
   2757c:	e7f2      	b.n	27564 <ble_hs_conn_free+0x18>
    }

#if MYNEWT_VAL(BLE_HS_DEBUG)
    memset(conn, 0xff, sizeof *conn);
#endif
    rc = os_memblock_put(&ble_hs_conn_pool, conn);
   2757e:	4621      	mov	r1, r4
   27580:	4804      	ldr	r0, [pc, #16]	; (27594 <ble_hs_conn_free+0x48>)
   27582:	f7f2 fc9e 	bl	19ec2 <os_memblock_put>
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    STATS_INC(ble_hs_stats, conn_delete);
   27586:	4a04      	ldr	r2, [pc, #16]	; (27598 <ble_hs_conn_free+0x4c>)
   27588:	6913      	ldr	r3, [r2, #16]
   2758a:	3301      	adds	r3, #1
   2758c:	6113      	str	r3, [r2, #16]
}
   2758e:	bd10      	pop	{r4, pc}
   27590:	4770      	bx	lr
   27592:	bf00      	nop
   27594:	10005f88 	.word	0x10005f88
   27598:	10005e44 	.word	0x10005e44

0002759c <ble_hs_conn_alloc>:
{
   2759c:	b538      	push	{r3, r4, r5, lr}
   2759e:	4605      	mov	r5, r0
    conn = os_memblock_get(&ble_hs_conn_pool);
   275a0:	481c      	ldr	r0, [pc, #112]	; (27614 <ble_hs_conn_alloc+0x78>)
   275a2:	f7f2 fc66 	bl	19e72 <os_memblock_get>
    if (conn == NULL) {
   275a6:	4604      	mov	r4, r0
   275a8:	b370      	cbz	r0, 27608 <ble_hs_conn_alloc+0x6c>
    memset(conn, 0, sizeof *conn);
   275aa:	2264      	movs	r2, #100	; 0x64
   275ac:	2100      	movs	r1, #0
   275ae:	f7f3 fb86 	bl	1acbe <memset>
    conn->bhc_handle = conn_handle;
   275b2:	80a5      	strh	r5, [r4, #4]
    chan = ble_att_create_chan(conn_handle);
   275b4:	4628      	mov	r0, r5
   275b6:	f7f7 fc89 	bl	1eecc <ble_att_create_chan>
    if (chan == NULL) {
   275ba:	4601      	mov	r1, r0
   275bc:	b320      	cbz	r0, 27608 <ble_hs_conn_alloc+0x6c>
    rc = ble_hs_conn_chan_insert(conn, chan);
   275be:	4620      	mov	r0, r4
   275c0:	f7ff ff83 	bl	274ca <ble_hs_conn_chan_insert>
    if (rc != 0) {
   275c4:	bb00      	cbnz	r0, 27608 <ble_hs_conn_alloc+0x6c>
    chan = ble_l2cap_sig_create_chan(conn_handle);
   275c6:	4628      	mov	r0, r5
   275c8:	f001 ff0e 	bl	293e8 <ble_l2cap_sig_create_chan>
    if (chan == NULL) {
   275cc:	4601      	mov	r1, r0
   275ce:	b1d8      	cbz	r0, 27608 <ble_hs_conn_alloc+0x6c>
    rc = ble_hs_conn_chan_insert(conn, chan);
   275d0:	4620      	mov	r0, r4
   275d2:	f7ff ff7a 	bl	274ca <ble_hs_conn_chan_insert>
    if (rc != 0) {
   275d6:	b9b8      	cbnz	r0, 27608 <ble_hs_conn_alloc+0x6c>
    chan = ble_sm_create_chan(conn_handle);
   275d8:	4628      	mov	r0, r5
   275da:	f002 f803 	bl	295e4 <ble_sm_create_chan>
    if (chan == NULL) {
   275de:	4601      	mov	r1, r0
   275e0:	b190      	cbz	r0, 27608 <ble_hs_conn_alloc+0x6c>
    rc = ble_hs_conn_chan_insert(conn, chan);
   275e2:	4620      	mov	r0, r4
   275e4:	f7ff ff71 	bl	274ca <ble_hs_conn_chan_insert>
    if (rc != 0) {
   275e8:	b970      	cbnz	r0, 27608 <ble_hs_conn_alloc+0x6c>
    rc = ble_gatts_conn_init(&conn->bhc_gatt_svr);
   275ea:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   275ee:	f7fe fb9f 	bl	25d30 <ble_gatts_conn_init>
    if (rc != 0) {
   275f2:	b948      	cbnz	r0, 27608 <ble_hs_conn_alloc+0x6c>
    STAILQ_INIT(&conn->bhc_tx_q);
   275f4:	4623      	mov	r3, r4
   275f6:	2200      	movs	r2, #0
   275f8:	f843 2f3c 	str.w	r2, [r3, #60]!
   275fc:	6423      	str	r3, [r4, #64]	; 0x40
    STATS_INC(ble_hs_stats, conn_create);
   275fe:	4a06      	ldr	r2, [pc, #24]	; (27618 <ble_hs_conn_alloc+0x7c>)
   27600:	68d3      	ldr	r3, [r2, #12]
   27602:	3301      	adds	r3, #1
   27604:	60d3      	str	r3, [r2, #12]
    return conn;
   27606:	e003      	b.n	27610 <ble_hs_conn_alloc+0x74>
    ble_hs_conn_free(conn);
   27608:	4620      	mov	r0, r4
   2760a:	f7ff ff9f 	bl	2754c <ble_hs_conn_free>
    return NULL;
   2760e:	2400      	movs	r4, #0
}
   27610:	4620      	mov	r0, r4
   27612:	bd38      	pop	{r3, r4, r5, pc}
   27614:	10005f88 	.word	0x10005f88
   27618:	10005e44 	.word	0x10005e44

0002761c <ble_hs_conn_remove>:
    return;
#endif

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    SLIST_REMOVE(&ble_hs_conns, conn, ble_hs_conn, bhc_next);
   2761c:	4b07      	ldr	r3, [pc, #28]	; (2763c <ble_hs_conn_remove+0x20>)
   2761e:	681b      	ldr	r3, [r3, #0]
   27620:	4283      	cmp	r3, r0
   27622:	d006      	beq.n	27632 <ble_hs_conn_remove+0x16>
   27624:	461a      	mov	r2, r3
   27626:	681b      	ldr	r3, [r3, #0]
   27628:	4283      	cmp	r3, r0
   2762a:	d1fb      	bne.n	27624 <ble_hs_conn_remove+0x8>
   2762c:	681b      	ldr	r3, [r3, #0]
   2762e:	6013      	str	r3, [r2, #0]
}
   27630:	4770      	bx	lr
    SLIST_REMOVE(&ble_hs_conns, conn, ble_hs_conn, bhc_next);
   27632:	681a      	ldr	r2, [r3, #0]
   27634:	4b01      	ldr	r3, [pc, #4]	; (2763c <ble_hs_conn_remove+0x20>)
   27636:	601a      	str	r2, [r3, #0]
   27638:	4770      	bx	lr
   2763a:	bf00      	nop
   2763c:	10005fa4 	.word	0x10005fa4

00027640 <ble_hs_conn_find>:

struct ble_hs_conn *
ble_hs_conn_find(uint16_t conn_handle)
{
   27640:	4602      	mov	r2, r0

    struct ble_hs_conn *conn;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   27642:	4b04      	ldr	r3, [pc, #16]	; (27654 <ble_hs_conn_find+0x14>)
   27644:	6818      	ldr	r0, [r3, #0]
   27646:	b120      	cbz	r0, 27652 <ble_hs_conn_find+0x12>
        if (conn->bhc_handle == conn_handle) {
   27648:	8883      	ldrh	r3, [r0, #4]
   2764a:	4293      	cmp	r3, r2
   2764c:	d001      	beq.n	27652 <ble_hs_conn_find+0x12>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   2764e:	6800      	ldr	r0, [r0, #0]
   27650:	e7f9      	b.n	27646 <ble_hs_conn_find+0x6>
            return conn;
        }
    }

    return NULL;
}
   27652:	4770      	bx	lr
   27654:	10005fa4 	.word	0x10005fa4

00027658 <ble_hs_conn_insert>:
{
   27658:	b510      	push	{r4, lr}
   2765a:	4604      	mov	r4, r0
    BLE_HS_DBG_ASSERT_EVAL(ble_hs_conn_find(conn->bhc_handle) == NULL);
   2765c:	8880      	ldrh	r0, [r0, #4]
   2765e:	f7ff ffef 	bl	27640 <ble_hs_conn_find>
    SLIST_INSERT_HEAD(&ble_hs_conns, conn, bhc_next);
   27662:	4b02      	ldr	r3, [pc, #8]	; (2766c <ble_hs_conn_insert+0x14>)
   27664:	681a      	ldr	r2, [r3, #0]
   27666:	6022      	str	r2, [r4, #0]
   27668:	601c      	str	r4, [r3, #0]
}
   2766a:	bd10      	pop	{r4, pc}
   2766c:	10005fa4 	.word	0x10005fa4

00027670 <ble_hs_conn_find_assert>:

struct ble_hs_conn *
ble_hs_conn_find_assert(uint16_t conn_handle)
{
   27670:	b508      	push	{r3, lr}
    struct ble_hs_conn *conn;

    conn = ble_hs_conn_find(conn_handle);
   27672:	f7ff ffe5 	bl	27640 <ble_hs_conn_find>
    BLE_HS_DBG_ASSERT(conn != NULL);

    return conn;
}
   27676:	bd08      	pop	{r3, pc}

00027678 <ble_hs_conn_find_by_idx>:
    return NULL;
}

struct ble_hs_conn *
ble_hs_conn_find_by_idx(int idx)
{
   27678:	4602      	mov	r2, r0
    int i;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    i = 0;
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   2767a:	4b05      	ldr	r3, [pc, #20]	; (27690 <ble_hs_conn_find_by_idx+0x18>)
   2767c:	6818      	ldr	r0, [r3, #0]
    i = 0;
   2767e:	2300      	movs	r3, #0
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   27680:	b120      	cbz	r0, 2768c <ble_hs_conn_find_by_idx+0x14>
        if (i == idx) {
   27682:	4293      	cmp	r3, r2
   27684:	d002      	beq.n	2768c <ble_hs_conn_find_by_idx+0x14>
            return conn;
        }

        i++;
   27686:	3301      	adds	r3, #1
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   27688:	6800      	ldr	r0, [r0, #0]
   2768a:	e7f9      	b.n	27680 <ble_hs_conn_find_by_idx+0x8>
    }

    return NULL;
}
   2768c:	4770      	bx	lr
   2768e:	bf00      	nop
   27690:	10005fa4 	.word	0x10005fa4

00027694 <ble_hs_conn_first>:
    return NULL;
#endif

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());
    return SLIST_FIRST(&ble_hs_conns);
}
   27694:	4b01      	ldr	r3, [pc, #4]	; (2769c <ble_hs_conn_first+0x8>)
   27696:	6818      	ldr	r0, [r3, #0]
   27698:	4770      	bx	lr
   2769a:	bf00      	nop
   2769c:	10005fa4 	.word	0x10005fa4

000276a0 <ble_hs_conn_addrs>:

void
ble_hs_conn_addrs(const struct ble_hs_conn *conn,
                  struct ble_hs_conn_addrs *addrs)
{
   276a0:	b530      	push	{r4, r5, lr}
   276a2:	b083      	sub	sp, #12
   276a4:	4605      	mov	r5, r0
   276a6:	460c      	mov	r4, r1
    const uint8_t *our_id_addr_val;
    int rc;

    /* Determine our address information. */
    addrs->our_id_addr.type =
        ble_hs_misc_own_addr_type_to_id(conn->bhc_our_addr_type);
   276a8:	7980      	ldrb	r0, [r0, #6]
   276aa:	f000 ffc0 	bl	2862e <ble_hs_misc_own_addr_type_to_id>
    addrs->our_id_addr.type =
   276ae:	7020      	strb	r0, [r4, #0]
    } else {
        rc = ble_hs_id_addr(addrs->our_id_addr.type, &our_id_addr_val, NULL);
        assert(rc == 0);
    }
#else
    rc = ble_hs_id_addr(addrs->our_id_addr.type, &our_id_addr_val, NULL);
   276b0:	2200      	movs	r2, #0
   276b2:	a901      	add	r1, sp, #4
   276b4:	f000 fe86 	bl	283c4 <ble_hs_id_addr>
    assert(rc == 0);
   276b8:	bb78      	cbnz	r0, 2771a <ble_hs_conn_addrs+0x7a>
#endif

    memcpy(addrs->our_id_addr.val, our_id_addr_val, 6);
   276ba:	9b01      	ldr	r3, [sp, #4]
   276bc:	681a      	ldr	r2, [r3, #0]
   276be:	f8c4 2001 	str.w	r2, [r4, #1]
   276c2:	889b      	ldrh	r3, [r3, #4]
   276c4:	f8a4 3005 	strh.w	r3, [r4, #5]

    if (memcmp(conn->bhc_our_rpa_addr.val, ble_hs_conn_null_addr, 6) == 0) {
   276c8:	2206      	movs	r2, #6
   276ca:	492a      	ldr	r1, [pc, #168]	; (27774 <ble_hs_conn_addrs+0xd4>)
   276cc:	f105 000f 	add.w	r0, r5, #15
   276d0:	f7f3 faac 	bl	1ac2c <memcmp>
   276d4:	bb58      	cbnz	r0, 2772e <ble_hs_conn_addrs+0x8e>
        addrs->our_ota_addr = addrs->our_id_addr;
   276d6:	4623      	mov	r3, r4
   276d8:	f853 2b0e 	ldr.w	r2, [r3], #14
   276dc:	f8c4 200e 	str.w	r2, [r4, #14]
   276e0:	88a1      	ldrh	r1, [r4, #4]
   276e2:	79a2      	ldrb	r2, [r4, #6]
   276e4:	8099      	strh	r1, [r3, #4]
   276e6:	719a      	strb	r2, [r3, #6]
    } else {
        addrs->our_ota_addr = conn->bhc_our_rpa_addr;
    }

    /* Determine peer address information. */
    addrs->peer_id_addr = conn->bhc_peer_addr;
   276e8:	462b      	mov	r3, r5
   276ea:	f853 2f07 	ldr.w	r2, [r3, #7]!
   276ee:	f8c4 2007 	str.w	r2, [r4, #7]
   276f2:	8899      	ldrh	r1, [r3, #4]
   276f4:	799a      	ldrb	r2, [r3, #6]
   276f6:	f8a4 100b 	strh.w	r1, [r4, #11]
   276fa:	7362      	strb	r2, [r4, #13]
    addrs->peer_ota_addr = conn->bhc_peer_addr;
   276fc:	681a      	ldr	r2, [r3, #0]
   276fe:	f8c4 2015 	str.w	r2, [r4, #21]
   27702:	889a      	ldrh	r2, [r3, #4]
   27704:	799b      	ldrb	r3, [r3, #6]
   27706:	f8a4 2019 	strh.w	r2, [r4, #25]
   2770a:	76e3      	strb	r3, [r4, #27]
    switch (conn->bhc_peer_addr.type) {
   2770c:	79eb      	ldrb	r3, [r5, #7]
   2770e:	2b02      	cmp	r3, #2
   27710:	d017      	beq.n	27742 <ble_hs_conn_addrs+0xa2>
   27712:	2b03      	cmp	r3, #3
   27714:	d021      	beq.n	2775a <ble_hs_conn_addrs+0xba>

    default:
        BLE_HS_DBG_ASSERT(0);
        break;
    }
}
   27716:	b003      	add	sp, #12
   27718:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
   2771a:	f7ec fff3 	bl	14704 <hal_debugger_connected>
   2771e:	b100      	cbz	r0, 27722 <ble_hs_conn_addrs+0x82>
   27720:	be01      	bkpt	0x0001
   27722:	2300      	movs	r3, #0
   27724:	461a      	mov	r2, r3
   27726:	4619      	mov	r1, r3
   27728:	4618      	mov	r0, r3
   2772a:	f7f1 fafb 	bl	18d24 <__assert_func>
        addrs->our_ota_addr = conn->bhc_our_rpa_addr;
   2772e:	462b      	mov	r3, r5
   27730:	f853 2f0e 	ldr.w	r2, [r3, #14]!
   27734:	f8c4 200e 	str.w	r2, [r4, #14]
   27738:	889a      	ldrh	r2, [r3, #4]
   2773a:	799b      	ldrb	r3, [r3, #6]
   2773c:	8262      	strh	r2, [r4, #18]
   2773e:	7523      	strb	r3, [r4, #20]
   27740:	e7d2      	b.n	276e8 <ble_hs_conn_addrs+0x48>
        addrs->peer_id_addr.type = BLE_ADDR_PUBLIC;
   27742:	2300      	movs	r3, #0
   27744:	71e3      	strb	r3, [r4, #7]
        addrs->peer_ota_addr = conn->bhc_peer_rpa_addr;
   27746:	f855 3f15 	ldr.w	r3, [r5, #21]!
   2774a:	f8c4 3015 	str.w	r3, [r4, #21]
   2774e:	88aa      	ldrh	r2, [r5, #4]
   27750:	79ab      	ldrb	r3, [r5, #6]
   27752:	f8a4 2019 	strh.w	r2, [r4, #25]
   27756:	76e3      	strb	r3, [r4, #27]
        break;
   27758:	e7dd      	b.n	27716 <ble_hs_conn_addrs+0x76>
        addrs->peer_id_addr.type = BLE_ADDR_RANDOM;
   2775a:	2301      	movs	r3, #1
   2775c:	71e3      	strb	r3, [r4, #7]
        addrs->peer_ota_addr = conn->bhc_peer_rpa_addr;
   2775e:	f855 3f15 	ldr.w	r3, [r5, #21]!
   27762:	f8c4 3015 	str.w	r3, [r4, #21]
   27766:	88aa      	ldrh	r2, [r5, #4]
   27768:	79ab      	ldrb	r3, [r5, #6]
   2776a:	f8a4 2019 	strh.w	r2, [r4, #25]
   2776e:	76e3      	strb	r3, [r4, #27]
}
   27770:	e7d1      	b.n	27716 <ble_hs_conn_addrs+0x76>
   27772:	bf00      	nop
   27774:	00034ea0 	.word	0x00034ea0

00027778 <ble_hs_conn_find_by_addr>:
{
   27778:	b570      	push	{r4, r5, r6, lr}
   2777a:	b088      	sub	sp, #32
    if (!addr) {
   2777c:	4605      	mov	r5, r0
   2777e:	2800      	cmp	r0, #0
   27780:	d033      	beq.n	277ea <ble_hs_conn_find_by_addr+0x72>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   27782:	4b1c      	ldr	r3, [pc, #112]	; (277f4 <ble_hs_conn_find_by_addr+0x7c>)
   27784:	681c      	ldr	r4, [r3, #0]
   27786:	e016      	b.n	277b6 <ble_hs_conn_find_by_addr+0x3e>
        if (BLE_ADDR_IS_RPA(addr)) {
   27788:	79ab      	ldrb	r3, [r5, #6]
   2778a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2778e:	2b40      	cmp	r3, #64	; 0x40
   27790:	d115      	bne.n	277be <ble_hs_conn_find_by_addr+0x46>
    type_diff = a->type - b->type;
   27792:	7d63      	ldrb	r3, [r4, #21]
    if (type_diff != 0) {
   27794:	1a18      	subs	r0, r3, r0
   27796:	d105      	bne.n	277a4 <ble_hs_conn_find_by_addr+0x2c>
    return memcmp(a->val, b->val, sizeof(a->val));
   27798:	2206      	movs	r2, #6
   2779a:	1c69      	adds	r1, r5, #1
   2779c:	f104 0016 	add.w	r0, r4, #22
   277a0:	f7f3 fa44 	bl	1ac2c <memcmp>
            if (ble_addr_cmp(&conn->bhc_peer_rpa_addr, addr) == 0) {
   277a4:	b930      	cbnz	r0, 277b4 <ble_hs_conn_find_by_addr+0x3c>
   277a6:	e021      	b.n	277ec <ble_hs_conn_find_by_addr+0x74>
   277a8:	2206      	movs	r2, #6
   277aa:	1c69      	adds	r1, r5, #1
   277ac:	a803      	add	r0, sp, #12
   277ae:	f7f3 fa3d 	bl	1ac2c <memcmp>
            if (ble_addr_cmp(&addrs.peer_id_addr, addr) == 0) {
   277b2:	b1d8      	cbz	r0, 277ec <ble_hs_conn_find_by_addr+0x74>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   277b4:	6824      	ldr	r4, [r4, #0]
   277b6:	b1cc      	cbz	r4, 277ec <ble_hs_conn_find_by_addr+0x74>
        if (BLE_ADDR_IS_RPA(addr)) {
   277b8:	7828      	ldrb	r0, [r5, #0]
   277ba:	2801      	cmp	r0, #1
   277bc:	d0e4      	beq.n	27788 <ble_hs_conn_find_by_addr+0x10>
    type_diff = a->type - b->type;
   277be:	79e6      	ldrb	r6, [r4, #7]
    if (type_diff != 0) {
   277c0:	1a30      	subs	r0, r6, r0
   277c2:	d105      	bne.n	277d0 <ble_hs_conn_find_by_addr+0x58>
    return memcmp(a->val, b->val, sizeof(a->val));
   277c4:	2206      	movs	r2, #6
   277c6:	1c69      	adds	r1, r5, #1
   277c8:	f104 0008 	add.w	r0, r4, #8
   277cc:	f7f3 fa2e 	bl	1ac2c <memcmp>
            if (ble_addr_cmp(&conn->bhc_peer_addr, addr) == 0) {
   277d0:	b160      	cbz	r0, 277ec <ble_hs_conn_find_by_addr+0x74>
            if (conn->bhc_peer_addr.type < BLE_OWN_ADDR_RPA_PUBLIC_DEFAULT) {
   277d2:	2e01      	cmp	r6, #1
   277d4:	d9ee      	bls.n	277b4 <ble_hs_conn_find_by_addr+0x3c>
            ble_hs_conn_addrs(conn, &addrs);
   277d6:	a901      	add	r1, sp, #4
   277d8:	4620      	mov	r0, r4
   277da:	f7ff ff61 	bl	276a0 <ble_hs_conn_addrs>
    type_diff = a->type - b->type;
   277de:	f89d 000b 	ldrb.w	r0, [sp, #11]
   277e2:	782b      	ldrb	r3, [r5, #0]
    if (type_diff != 0) {
   277e4:	1ac0      	subs	r0, r0, r3
   277e6:	d0df      	beq.n	277a8 <ble_hs_conn_find_by_addr+0x30>
   277e8:	e7e3      	b.n	277b2 <ble_hs_conn_find_by_addr+0x3a>
        return NULL;
   277ea:	4604      	mov	r4, r0
}
   277ec:	4620      	mov	r0, r4
   277ee:	b008      	add	sp, #32
   277f0:	bd70      	pop	{r4, r5, r6, pc}
   277f2:	bf00      	nop
   277f4:	10005fa4 	.word	0x10005fa4

000277f8 <ble_hs_conn_timer>:

int32_t
ble_hs_conn_timer(void)
{
   277f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return os_time_get();
   277fa:	f7f2 ff37 	bl	1a66c <os_time_get>
   277fe:	4607      	mov	r7, r0
    for (;;) {
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
        next_exp_in = BLE_HS_FOREVER;
        now = ble_npl_time_get();

        ble_hs_lock();
   27800:	f7fe fe9a 	bl	26538 <ble_hs_lock>
         * 1. Determine if any connections need to be terminated due to timeout.
         *    If so, break out of the loop and terminate the connection.  This
         *    function will need to be executed again.
         * 2. Otherwise, determine when the next timeout will occur.
         */
        SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   27804:	4b1a      	ldr	r3, [pc, #104]	; (27870 <ble_hs_conn_timer+0x78>)
   27806:	681c      	ldr	r4, [r3, #0]
        next_exp_in = BLE_HS_FOREVER;
   27808:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
        SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   2780c:	e00d      	b.n	2782a <ble_hs_conn_timer+0x32>
                    if (time_diff <= 0) {
                        /* ACL reassembly has timed out.  Remember the connection
                         * handle so it can be terminated after the mutex is
                         * unlocked.
                         */
                        conn_handle = conn->bhc_handle;
   2780e:	88a4      	ldrh	r4, [r4, #4]
                        break;
   27810:	e021      	b.n	27856 <ble_hs_conn_timer+0x5e>
   27812:	462e      	mov	r6, r5
#if BLE_HS_ATT_SVR_QUEUED_WRITE_TMO
                /* Check each connection's rx queued write timer.  If too much
                 * time passes after a prep write is received, the queue is
                 * cleared.
                 */
                time_diff = ble_att_svr_ticks_until_tmo(&conn->bhc_att_svr, now);
   27814:	4639      	mov	r1, r7
   27816:	f104 0044 	add.w	r0, r4, #68	; 0x44
   2781a:	f7f8 fe16 	bl	2044a <ble_att_svr_ticks_until_tmo>
                if (time_diff <= 0) {
   2781e:	1e05      	subs	r5, r0, #0
   27820:	dd14      	ble.n	2784c <ble_hs_conn_timer+0x54>
                    conn_handle = conn->bhc_handle;
                    break;
                }

                /* Determine if this connection is the soonest to time out. */
                if (time_diff < next_exp_in) {
   27822:	42ae      	cmp	r6, r5
   27824:	dc00      	bgt.n	27828 <ble_hs_conn_timer+0x30>
   27826:	4635      	mov	r5, r6
        SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   27828:	6824      	ldr	r4, [r4, #0]
   2782a:	b194      	cbz	r4, 27852 <ble_hs_conn_timer+0x5a>
            if (!(conn->bhc_flags & BLE_HS_CONN_F_TERMINATING)) {
   2782c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   27830:	f013 0f02 	tst.w	r3, #2
   27834:	d1f8      	bne.n	27828 <ble_hs_conn_timer+0x30>
                if (conn->bhc_rx_chan != NULL) {
   27836:	6b23      	ldr	r3, [r4, #48]	; 0x30
   27838:	2b00      	cmp	r3, #0
   2783a:	d0ea      	beq.n	27812 <ble_hs_conn_timer+0x1a>
                    time_diff = conn->bhc_rx_timeout - now;
   2783c:	6b66      	ldr	r6, [r4, #52]	; 0x34
   2783e:	1bf6      	subs	r6, r6, r7
                    if (time_diff <= 0) {
   27840:	2e00      	cmp	r6, #0
   27842:	dde4      	ble.n	2780e <ble_hs_conn_timer+0x16>
                    if (time_diff < next_exp_in) {
   27844:	42b5      	cmp	r5, r6
   27846:	dce5      	bgt.n	27814 <ble_hs_conn_timer+0x1c>
   27848:	462e      	mov	r6, r5
   2784a:	e7e3      	b.n	27814 <ble_hs_conn_timer+0x1c>
                    conn_handle = conn->bhc_handle;
   2784c:	88a4      	ldrh	r4, [r4, #4]
                    break;
   2784e:	4635      	mov	r5, r6
   27850:	e001      	b.n	27856 <ble_hs_conn_timer+0x5e>
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   27852:	f64f 74ff 	movw	r4, #65535	; 0xffff
                }
#endif
            }
        }

        ble_hs_unlock();
   27856:	f7fe fe73 	bl	26540 <ble_hs_unlock>

        /* If a connection has timed out, terminate it.  We need to repeatedly
         * call this function again to determine when the next timeout is.
         */
        if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   2785a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2785e:	429c      	cmp	r4, r3
   27860:	d101      	bne.n	27866 <ble_hs_conn_timer+0x6e>
            continue;
        }

        return next_exp_in;
    }
}
   27862:	4628      	mov	r0, r5
   27864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ble_gap_terminate(conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   27866:	2113      	movs	r1, #19
   27868:	4620      	mov	r0, r4
   2786a:	f7fa ff89 	bl	22780 <ble_gap_terminate>
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   2786e:	e7c4      	b.n	277fa <ble_hs_conn_timer+0x2>
   27870:	10005fa4 	.word	0x10005fa4

00027874 <ble_hs_conn_init>:

int
ble_hs_conn_init(void)
{
   27874:	b500      	push	{lr}
   27876:	b083      	sub	sp, #12
    int rc;

    rc = os_mempool_init(&ble_hs_conn_pool, MYNEWT_VAL(BLE_MAX_CONNECTIONS),
   27878:	4b07      	ldr	r3, [pc, #28]	; (27898 <ble_hs_conn_init+0x24>)
   2787a:	9300      	str	r3, [sp, #0]
   2787c:	4b07      	ldr	r3, [pc, #28]	; (2789c <ble_hs_conn_init+0x28>)
   2787e:	2264      	movs	r2, #100	; 0x64
   27880:	2101      	movs	r1, #1
   27882:	4807      	ldr	r0, [pc, #28]	; (278a0 <ble_hs_conn_init+0x2c>)
   27884:	f7f2 fabe 	bl	19e04 <os_mempool_init>
                         sizeof (struct ble_hs_conn),
                         ble_hs_conn_elem_mem, "ble_hs_conn_pool");
    if (rc != 0) {
   27888:	b920      	cbnz	r0, 27894 <ble_hs_conn_init+0x20>
        return BLE_HS_EOS;
    }

    SLIST_INIT(&ble_hs_conns);
   2788a:	4b06      	ldr	r3, [pc, #24]	; (278a4 <ble_hs_conn_init+0x30>)
   2788c:	6018      	str	r0, [r3, #0]

    return 0;
}
   2788e:	b003      	add	sp, #12
   27890:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   27894:	200b      	movs	r0, #11
   27896:	e7fa      	b.n	2788e <ble_hs_conn_init+0x1a>
   27898:	00034e8c 	.word	0x00034e8c
   2789c:	10005f24 	.word	0x10005f24
   278a0:	10005f88 	.word	0x10005f88
   278a4:	10005fa4 	.word	0x10005fa4

000278a8 <ble_hs_flow_connection_broken>:
    MYNEWT_VAL(BLE_HS_FLOW_CTRL_TX_ON_DISCONNECT)
    ble_hs_lock();
    ble_hs_flow_tx_num_comp_pkts();
    ble_hs_unlock();
#endif
}
   278a8:	4770      	bx	lr

000278aa <ble_hs_flow_track_data_mbuf>:
    int idx = ble_hs_flow_mbuf_index(om);

    hdr = (void *)om->om_data;
    ble_hs_flow_mbuf_conn_handle[idx] = BLE_HCI_DATA_HANDLE(hdr->hdh_handle_pb_bc);
#endif
}
   278aa:	4770      	bx	lr

000278ac <ble_hs_flow_startup>:
    ble_npl_callout_init(&ble_hs_flow_timer, ble_hs_evq_get(),
                         ble_hs_flow_event_cb, NULL);
#endif

    return 0;
}
   278ac:	2000      	movs	r0, #0
   278ae:	4770      	bx	lr

000278b0 <ble_hs_hci_rx_cmd_complete>:
}

static int
ble_hs_hci_rx_cmd_complete(const void *data, int len,
                           struct ble_hs_hci_ack *out_ack)
{
   278b0:	4603      	mov	r3, r0
    const struct ble_hci_ev_command_complete *ev = data;
    const struct ble_hci_ev_command_complete_nop *nop = data;
    uint16_t opcode;

    if (len < sizeof(*ev)) {
   278b2:	2903      	cmp	r1, #3
   278b4:	d809      	bhi.n	278ca <ble_hs_hci_rx_cmd_complete+0x1a>
        if (len < sizeof(*nop)) {
   278b6:	2902      	cmp	r1, #2
   278b8:	d91b      	bls.n	278f2 <ble_hs_hci_rx_cmd_complete+0x42>
            return BLE_HS_ECONTROLLER;
        }

        /* nop is special as it doesn't have status and response */

        opcode = le16toh(nop->opcode);
   278ba:	f8b0 3001 	ldrh.w	r3, [r0, #1]
        if (opcode != BLE_HCI_OPCODE_NOP) {
   278be:	b9d3      	cbnz	r3, 278f6 <ble_hs_hci_rx_cmd_complete+0x46>
            return BLE_HS_ECONTROLLER;
        }

        /* TODO Process num_pkts field. */

        out_ack->bha_status = 0;
   278c0:	2000      	movs	r0, #0
   278c2:	6010      	str	r0, [r2, #0]
        out_ack->bha_params = NULL;
   278c4:	6050      	str	r0, [r2, #4]
        out_ack->bha_params_len = 0;
   278c6:	6090      	str	r0, [r2, #8]
        return 0;
   278c8:	4770      	bx	lr
    }

    opcode = le16toh(ev->opcode);
   278ca:	f8b0 0001 	ldrh.w	r0, [r0, #1]

    /* TODO Process num_pkts field. */

    out_ack->bha_opcode = opcode;
   278ce:	8190      	strh	r0, [r2, #12]

    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   278d0:	78d8      	ldrb	r0, [r3, #3]
   278d2:	b110      	cbz	r0, 278da <ble_hs_hci_rx_cmd_complete+0x2a>
   278d4:	f500 7000 	add.w	r0, r0, #512	; 0x200
   278d8:	e000      	b.n	278dc <ble_hs_hci_rx_cmd_complete+0x2c>
   278da:	2000      	movs	r0, #0
   278dc:	6010      	str	r0, [r2, #0]
    out_ack->bha_params_len = len - sizeof(*ev);
   278de:	1f08      	subs	r0, r1, #4
   278e0:	6090      	str	r0, [r2, #8]
    if (out_ack->bha_params_len) {
   278e2:	b118      	cbz	r0, 278ec <ble_hs_hci_rx_cmd_complete+0x3c>
        out_ack->bha_params = ev->return_params;
   278e4:	3304      	adds	r3, #4
   278e6:	6053      	str	r3, [r2, #4]
    } else {
        out_ack->bha_params = NULL;
    }

    return 0;
   278e8:	2000      	movs	r0, #0
   278ea:	4770      	bx	lr
        out_ack->bha_params = NULL;
   278ec:	2300      	movs	r3, #0
   278ee:	6053      	str	r3, [r2, #4]
   278f0:	4770      	bx	lr
            return BLE_HS_ECONTROLLER;
   278f2:	200c      	movs	r0, #12
   278f4:	4770      	bx	lr
            return BLE_HS_ECONTROLLER;
   278f6:	200c      	movs	r0, #12
}
   278f8:	4770      	bx	lr

000278fa <ble_hs_hci_rx_cmd_status>:
ble_hs_hci_rx_cmd_status(const void *data, int len,
                         struct ble_hs_hci_ack *out_ack)
{
    const struct ble_hci_ev_command_status *ev = data;

    if (len != sizeof(*ev)) {
   278fa:	2904      	cmp	r1, #4
   278fc:	d10d      	bne.n	2791a <ble_hs_hci_rx_cmd_status+0x20>
        return BLE_HS_ECONTROLLER;
    }

    /* XXX: Process num_pkts field. */

    out_ack->bha_opcode = le16toh(ev->opcode);
   278fe:	8843      	ldrh	r3, [r0, #2]
   27900:	8193      	strh	r3, [r2, #12]
    out_ack->bha_params = NULL;
   27902:	2300      	movs	r3, #0
   27904:	6053      	str	r3, [r2, #4]
    out_ack->bha_params_len = 0;
   27906:	6093      	str	r3, [r2, #8]
    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   27908:	7803      	ldrb	r3, [r0, #0]
   2790a:	b123      	cbz	r3, 27916 <ble_hs_hci_rx_cmd_status+0x1c>
   2790c:	f503 7300 	add.w	r3, r3, #512	; 0x200
   27910:	6013      	str	r3, [r2, #0]

    return 0;
   27912:	2000      	movs	r0, #0
   27914:	4770      	bx	lr
    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   27916:	2300      	movs	r3, #0
   27918:	e7fa      	b.n	27910 <ble_hs_hci_rx_cmd_status+0x16>
        return BLE_HS_ECONTROLLER;
   2791a:	200c      	movs	r0, #12
}
   2791c:	4770      	bx	lr
	...

00027920 <ble_hs_hci_max_acl_payload_sz>:
     * The LE_Read_Buffer_Size command is used to read the maximum size of the
     * data portion of HCI LE ACL Data Packets sent from the Host to the
     * Controller.
     */
    return ble_hs_hci_buf_sz;
}
   27920:	4b01      	ldr	r3, [pc, #4]	; (27928 <ble_hs_hci_max_acl_payload_sz+0x8>)
   27922:	8818      	ldrh	r0, [r3, #0]
   27924:	4770      	bx	lr
   27926:	bf00      	nop
   27928:	10005fae 	.word	0x10005fae

0002792c <ble_hs_hci_lock>:
{
   2792c:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   2792e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   27932:	4802      	ldr	r0, [pc, #8]	; (2793c <ble_hs_hci_lock+0x10>)
   27934:	f7f3 f902 	bl	1ab3c <os_mutex_pend>
}
   27938:	bd08      	pop	{r3, pc}
   2793a:	bf00      	nop
   2793c:	100060f4 	.word	0x100060f4

00027940 <ble_hs_hci_unlock>:
{
   27940:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   27942:	4802      	ldr	r0, [pc, #8]	; (2794c <ble_hs_hci_unlock+0xc>)
   27944:	f7f3 f89a 	bl	1aa7c <os_mutex_release>
}
   27948:	bd08      	pop	{r3, pc}
   2794a:	bf00      	nop
   2794c:	100060f4 	.word	0x100060f4

00027950 <ble_hs_hci_wait_for_ack>:
{
   27950:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_sem_pend(&sem->sem, timeout);
   27952:	f44f 7180 	mov.w	r1, #256	; 0x100
   27956:	4807      	ldr	r0, [pc, #28]	; (27974 <ble_hs_hci_wait_for_ack+0x24>)
   27958:	f006 ff78 	bl	2e84c <os_sem_pend>
    switch (rc) {
   2795c:	b140      	cbz	r0, 27970 <ble_hs_hci_wait_for_ack+0x20>
   2795e:	2806      	cmp	r0, #6
   27960:	d105      	bne.n	2796e <ble_hs_hci_wait_for_ack+0x1e>
        STATS_INC(ble_hs_stats, hci_timeout);
   27962:	4a05      	ldr	r2, [pc, #20]	; (27978 <ble_hs_hci_wait_for_ack+0x28>)
   27964:	6a53      	ldr	r3, [r2, #36]	; 0x24
   27966:	3301      	adds	r3, #1
   27968:	6253      	str	r3, [r2, #36]	; 0x24
        rc = BLE_HS_ETIMEOUT_HCI;
   2796a:	2013      	movs	r0, #19
        break;
   2796c:	e000      	b.n	27970 <ble_hs_hci_wait_for_ack+0x20>
        rc = BLE_HS_EOS;
   2796e:	200b      	movs	r0, #11
}
   27970:	bd08      	pop	{r3, pc}
   27972:	bf00      	nop
   27974:	10006100 	.word	0x10006100
   27978:	10005e44 	.word	0x10005e44

0002797c <ble_hs_hci_process_ack>:
{
   2797c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27980:	4607      	mov	r7, r0
   27982:	460e      	mov	r6, r1
   27984:	4690      	mov	r8, r2
   27986:	461c      	mov	r4, r3
    STATS_INC(ble_hs_stats, hci_event);
   27988:	4a1e      	ldr	r2, [pc, #120]	; (27a04 <ble_hs_hci_process_ack+0x88>)
   2798a:	6993      	ldr	r3, [r2, #24]
   2798c:	3301      	adds	r3, #1
   2798e:	6193      	str	r3, [r2, #24]
    memset(out_ack, 0, sizeof *out_ack);
   27990:	2300      	movs	r3, #0
   27992:	6023      	str	r3, [r4, #0]
   27994:	6063      	str	r3, [r4, #4]
   27996:	60a3      	str	r3, [r4, #8]
   27998:	60e3      	str	r3, [r4, #12]
    switch (ble_hs_hci_ack->opcode) {
   2799a:	4b1b      	ldr	r3, [pc, #108]	; (27a08 <ble_hs_hci_process_ack+0x8c>)
   2799c:	6818      	ldr	r0, [r3, #0]
   2799e:	7803      	ldrb	r3, [r0, #0]
   279a0:	2b0e      	cmp	r3, #14
   279a2:	d00a      	beq.n	279ba <ble_hs_hci_process_ack+0x3e>
   279a4:	2b0f      	cmp	r3, #15
   279a6:	d01e      	beq.n	279e6 <ble_hs_hci_process_ack+0x6a>
   279a8:	2511      	movs	r5, #17
    if (rc != 0) {
   279aa:	b11d      	cbz	r5, 279b4 <ble_hs_hci_process_ack+0x38>
        STATS_INC(ble_hs_stats, hci_invalid_ack);
   279ac:	4a15      	ldr	r2, [pc, #84]	; (27a04 <ble_hs_hci_process_ack+0x88>)
   279ae:	69d3      	ldr	r3, [r2, #28]
   279b0:	3301      	adds	r3, #1
   279b2:	61d3      	str	r3, [r2, #28]
}
   279b4:	4628      	mov	r0, r5
   279b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = ble_hs_hci_rx_cmd_complete(ble_hs_hci_ack->data,
   279ba:	4622      	mov	r2, r4
   279bc:	7841      	ldrb	r1, [r0, #1]
   279be:	3002      	adds	r0, #2
   279c0:	f7ff ff76 	bl	278b0 <ble_hs_hci_rx_cmd_complete>
   279c4:	4605      	mov	r5, r0
    if (rc == 0) {
   279c6:	2d00      	cmp	r5, #0
   279c8:	d1ef      	bne.n	279aa <ble_hs_hci_process_ack+0x2e>
        if (params_buf == NULL || out_ack->bha_params == NULL) {
   279ca:	b19e      	cbz	r6, 279f4 <ble_hs_hci_process_ack+0x78>
   279cc:	6861      	ldr	r1, [r4, #4]
   279ce:	b189      	cbz	r1, 279f4 <ble_hs_hci_process_ack+0x78>
            if (out_ack->bha_params_len > params_buf_len) {
   279d0:	68a3      	ldr	r3, [r4, #8]
   279d2:	4543      	cmp	r3, r8
   279d4:	dd02      	ble.n	279dc <ble_hs_hci_process_ack+0x60>
                out_ack->bha_params_len = params_buf_len;
   279d6:	f8c4 8008 	str.w	r8, [r4, #8]
                rc = BLE_HS_ECONTROLLER;
   279da:	250c      	movs	r5, #12
            memcpy(params_buf, out_ack->bha_params, out_ack->bha_params_len);
   279dc:	68a2      	ldr	r2, [r4, #8]
   279de:	4630      	mov	r0, r6
   279e0:	f7f3 f948 	bl	1ac74 <memcpy>
   279e4:	e008      	b.n	279f8 <ble_hs_hci_process_ack+0x7c>
        rc = ble_hs_hci_rx_cmd_status(ble_hs_hci_ack->data,
   279e6:	4622      	mov	r2, r4
   279e8:	7841      	ldrb	r1, [r0, #1]
   279ea:	3002      	adds	r0, #2
   279ec:	f7ff ff85 	bl	278fa <ble_hs_hci_rx_cmd_status>
   279f0:	4605      	mov	r5, r0
        break;
   279f2:	e7e8      	b.n	279c6 <ble_hs_hci_process_ack+0x4a>
            out_ack->bha_params_len = 0;
   279f4:	2300      	movs	r3, #0
   279f6:	60a3      	str	r3, [r4, #8]
        out_ack->bha_params = params_buf;
   279f8:	6066      	str	r6, [r4, #4]
        if (out_ack->bha_opcode != expected_opcode) {
   279fa:	89a3      	ldrh	r3, [r4, #12]
   279fc:	42bb      	cmp	r3, r7
   279fe:	d0d4      	beq.n	279aa <ble_hs_hci_process_ack+0x2e>
            rc = BLE_HS_ECONTROLLER;
   27a00:	250c      	movs	r5, #12
   27a02:	e7d3      	b.n	279ac <ble_hs_hci_process_ack+0x30>
   27a04:	10005e44 	.word	0x10005e44
   27a08:	10005fa8 	.word	0x10005fa8

00027a0c <ble_hs_hci_rx_ack>:
{
   27a0c:	b508      	push	{r3, lr}
/**
 * Get current semaphore's count
 */
static inline uint16_t os_sem_get_count(struct os_sem *sem)
{
    return sem->sem_tokens;
   27a0e:	4b06      	ldr	r3, [pc, #24]	; (27a28 <ble_hs_hci_rx_ack+0x1c>)
   27a10:	88db      	ldrh	r3, [r3, #6]
    if (ble_npl_sem_get_count(&ble_hs_hci_sem) > 0) {
   27a12:	b92b      	cbnz	r3, 27a20 <ble_hs_hci_rx_ack+0x14>
    ble_hs_hci_ack = (struct ble_hci_ev *) ack_ev;
   27a14:	4b05      	ldr	r3, [pc, #20]	; (27a2c <ble_hs_hci_rx_ack+0x20>)
   27a16:	6018      	str	r0, [r3, #0]
    return (ble_npl_error_t)os_sem_release(&sem->sem);
   27a18:	4803      	ldr	r0, [pc, #12]	; (27a28 <ble_hs_hci_rx_ack+0x1c>)
   27a1a:	f006 fee5 	bl	2e7e8 <os_sem_release>
}
   27a1e:	bd08      	pop	{r3, pc}
        ble_hci_trans_buf_free(ack_ev);
   27a20:	f002 ff94 	bl	2a94c <ble_hci_trans_buf_free>
        return;
   27a24:	e7fb      	b.n	27a1e <ble_hs_hci_rx_ack+0x12>
   27a26:	bf00      	nop
   27a28:	10006100 	.word	0x10006100
   27a2c:	10005fa8 	.word	0x10005fa8

00027a30 <ble_hs_hci_frag_alloc>:
/**
 * Allocates an mbuf to contain an outgoing ACL data fragment.
 */
static struct os_mbuf *
ble_hs_hci_frag_alloc(uint16_t frag_size, void *arg)
{
   27a30:	b508      	push	{r3, lr}

    /* Prefer the dedicated one-element fragment pool. */
#if MYNEWT_VAL(BLE_CONTROLLER)
    om = os_mbuf_get_pkthdr(&ble_hs_hci_frag_mbuf_pool, sizeof(struct ble_mbuf_hdr));
#else
    om = os_mbuf_get_pkthdr(&ble_hs_hci_frag_mbuf_pool, 0);
   27a32:	2100      	movs	r1, #0
   27a34:	4805      	ldr	r0, [pc, #20]	; (27a4c <ble_hs_hci_frag_alloc+0x1c>)
   27a36:	f7f1 fdc7 	bl	195c8 <os_mbuf_get_pkthdr>
#endif
    if (om != NULL) {
   27a3a:	b118      	cbz	r0, 27a44 <ble_hs_hci_frag_alloc+0x14>
        om->om_data += BLE_HCI_DATA_HDR_SZ;
   27a3c:	6803      	ldr	r3, [r0, #0]
   27a3e:	3304      	adds	r3, #4
   27a40:	6003      	str	r3, [r0, #0]
    if (om != NULL) {
        return om;
    }

    return NULL;
}
   27a42:	bd08      	pop	{r3, pc}
    om = ble_hs_mbuf_acl_pkt();
   27a44:	f000 fd66 	bl	28514 <ble_hs_mbuf_acl_pkt>
    if (om != NULL) {
   27a48:	e7fb      	b.n	27a42 <ble_hs_hci_frag_alloc+0x12>
   27a4a:	bf00      	nop
   27a4c:	100060cc 	.word	0x100060cc

00027a50 <ble_hs_hci_acl_hdr_prepend>:
}

static struct os_mbuf *
ble_hs_hci_acl_hdr_prepend(struct os_mbuf *om, uint16_t handle,
                           uint8_t pb_flag)
{
   27a50:	b510      	push	{r4, lr}
   27a52:	b082      	sub	sp, #8
   27a54:	4604      	mov	r4, r0
   27a56:	4608      	mov	r0, r1
   27a58:	4611      	mov	r1, r2
    struct hci_data_hdr hci_hdr;
    struct os_mbuf *om2;

    put_le16(&hci_hdr.hdh_handle_pb_bc,
   27a5a:	2200      	movs	r2, #0
   27a5c:	f000 fbcc 	bl	281f8 <ble_hs_hci_util_handle_pb_bc_join>
   27a60:	4601      	mov	r1, r0
   27a62:	a801      	add	r0, sp, #4
   27a64:	f7f1 f9cc 	bl	18e00 <put_le16>
             ble_hs_hci_util_handle_pb_bc_join(handle, pb_flag, 0));
    put_le16(&hci_hdr.hdh_len, OS_MBUF_PKTHDR(om)->omp_len);
   27a68:	8a21      	ldrh	r1, [r4, #16]
   27a6a:	f10d 0006 	add.w	r0, sp, #6
   27a6e:	f7f1 f9c7 	bl	18e00 <put_le16>

    om2 = os_mbuf_prepend(om, sizeof hci_hdr);
   27a72:	2104      	movs	r1, #4
   27a74:	4620      	mov	r0, r4
   27a76:	f7f1 ff85 	bl	19984 <os_mbuf_prepend>
    if (om2 == NULL) {
   27a7a:	4604      	mov	r4, r0
   27a7c:	b158      	cbz	r0, 27a96 <ble_hs_hci_acl_hdr_prepend+0x46>
        return NULL;
    }

    om = om2;
    om = os_mbuf_pullup(om, sizeof hci_hdr);
   27a7e:	2104      	movs	r1, #4
   27a80:	f7f2 f876 	bl	19b70 <os_mbuf_pullup>
    if (om == NULL) {
   27a84:	4604      	mov	r4, r0
   27a86:	b130      	cbz	r0, 27a96 <ble_hs_hci_acl_hdr_prepend+0x46>
        return NULL;
    }

    memcpy(om->om_data, &hci_hdr, sizeof hci_hdr);
   27a88:	6803      	ldr	r3, [r0, #0]
   27a8a:	9a01      	ldr	r2, [sp, #4]
   27a8c:	601a      	str	r2, [r3, #0]

#if !BLE_MONITOR
    BLE_HS_LOG(DEBUG, "host tx hci data; handle=%d length=%d\n", handle,
   27a8e:	f10d 0006 	add.w	r0, sp, #6
   27a92:	f7f1 f9c3 	bl	18e1c <get_le16>
               get_le16(&hci_hdr.hdh_len));
#endif

    return om;
}
   27a96:	4620      	mov	r0, r4
   27a98:	b002      	add	sp, #8
   27a9a:	bd10      	pop	{r4, pc}

00027a9c <ble_hs_hci_set_buf_sz>:
    if (pktlen == 0 || max_pkts == 0) {
   27a9c:	b130      	cbz	r0, 27aac <ble_hs_hci_set_buf_sz+0x10>
   27a9e:	b139      	cbz	r1, 27ab0 <ble_hs_hci_set_buf_sz+0x14>
    ble_hs_hci_buf_sz = pktlen;
   27aa0:	4a04      	ldr	r2, [pc, #16]	; (27ab4 <ble_hs_hci_set_buf_sz+0x18>)
   27aa2:	8010      	strh	r0, [r2, #0]
    ble_hs_hci_avail_pkts = max_pkts;
   27aa4:	4b04      	ldr	r3, [pc, #16]	; (27ab8 <ble_hs_hci_set_buf_sz+0x1c>)
   27aa6:	8019      	strh	r1, [r3, #0]
    return 0;
   27aa8:	2000      	movs	r0, #0
   27aaa:	4770      	bx	lr
        return BLE_HS_EINVAL;
   27aac:	2003      	movs	r0, #3
   27aae:	4770      	bx	lr
   27ab0:	2003      	movs	r0, #3
}
   27ab2:	4770      	bx	lr
   27ab4:	10005fae 	.word	0x10005fae
   27ab8:	10005fac 	.word	0x10005fac

00027abc <ble_hs_hci_add_avail_pkts>:
{
   27abc:	b508      	push	{r3, lr}
    if (ble_hs_hci_avail_pkts + delta > UINT16_MAX) {
   27abe:	4b07      	ldr	r3, [pc, #28]	; (27adc <ble_hs_hci_add_avail_pkts+0x20>)
   27ac0:	881b      	ldrh	r3, [r3, #0]
   27ac2:	181a      	adds	r2, r3, r0
   27ac4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   27ac8:	da03      	bge.n	27ad2 <ble_hs_hci_add_avail_pkts+0x16>
        ble_hs_hci_avail_pkts += delta;
   27aca:	4418      	add	r0, r3
   27acc:	4b03      	ldr	r3, [pc, #12]	; (27adc <ble_hs_hci_add_avail_pkts+0x20>)
   27ace:	8018      	strh	r0, [r3, #0]
}
   27ad0:	bd08      	pop	{r3, pc}
        ble_hs_sched_reset(BLE_HS_ECONTROLLER);
   27ad2:	200c      	movs	r0, #12
   27ad4:	f7fe fe5c 	bl	26790 <ble_hs_sched_reset>
   27ad8:	e7fa      	b.n	27ad0 <ble_hs_hci_add_avail_pkts+0x14>
   27ada:	bf00      	nop
   27adc:	10005fac 	.word	0x10005fac

00027ae0 <ble_hs_hci_cmd_tx>:
{
   27ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27ae4:	b084      	sub	sp, #16
   27ae6:	4604      	mov	r4, r0
   27ae8:	460d      	mov	r5, r1
   27aea:	4616      	mov	r6, r2
   27aec:	461f      	mov	r7, r3
   27aee:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    ble_hs_hci_lock();
   27af2:	f7ff ff1b 	bl	2792c <ble_hs_hci_lock>
    rc = ble_hs_hci_cmd_send_buf(opcode, cmd, cmd_len);
   27af6:	4632      	mov	r2, r6
   27af8:	4629      	mov	r1, r5
   27afa:	4620      	mov	r0, r4
   27afc:	f000 f908 	bl	27d10 <ble_hs_hci_cmd_send_buf>
    if (rc != 0) {
   27b00:	4605      	mov	r5, r0
   27b02:	b168      	cbz	r0, 27b20 <ble_hs_hci_cmd_tx+0x40>
    if (ble_hs_hci_ack != NULL) {
   27b04:	4b14      	ldr	r3, [pc, #80]	; (27b58 <ble_hs_hci_cmd_tx+0x78>)
   27b06:	6818      	ldr	r0, [r3, #0]
   27b08:	b120      	cbz	r0, 27b14 <ble_hs_hci_cmd_tx+0x34>
        ble_hci_trans_buf_free((uint8_t *) ble_hs_hci_ack);
   27b0a:	f002 ff1f 	bl	2a94c <ble_hci_trans_buf_free>
        ble_hs_hci_ack = NULL;
   27b0e:	4b12      	ldr	r3, [pc, #72]	; (27b58 <ble_hs_hci_cmd_tx+0x78>)
   27b10:	2200      	movs	r2, #0
   27b12:	601a      	str	r2, [r3, #0]
    ble_hs_hci_unlock();
   27b14:	f7ff ff14 	bl	27940 <ble_hs_hci_unlock>
}
   27b18:	4628      	mov	r0, r5
   27b1a:	b004      	add	sp, #16
   27b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = ble_hs_hci_wait_for_ack();
   27b20:	f7ff ff16 	bl	27950 <ble_hs_hci_wait_for_ack>
    if (rc != 0) {
   27b24:	4605      	mov	r5, r0
   27b26:	b988      	cbnz	r0, 27b4c <ble_hs_hci_cmd_tx+0x6c>
    rc = ble_hs_hci_process_ack(opcode, rsp, rsp_len, &ack);
   27b28:	466b      	mov	r3, sp
   27b2a:	4642      	mov	r2, r8
   27b2c:	4639      	mov	r1, r7
   27b2e:	4620      	mov	r0, r4
   27b30:	f7ff ff24 	bl	2797c <ble_hs_hci_process_ack>
    if (rc != 0) {
   27b34:	4605      	mov	r5, r0
   27b36:	b960      	cbnz	r0, 27b52 <ble_hs_hci_cmd_tx+0x72>
    rc = ack.bha_status;
   27b38:	9d00      	ldr	r5, [sp, #0]
    if (!rc && (ack.bha_params_len != rsp_len)) {
   27b3a:	2d00      	cmp	r5, #0
   27b3c:	d1e2      	bne.n	27b04 <ble_hs_hci_cmd_tx+0x24>
   27b3e:	9b02      	ldr	r3, [sp, #8]
   27b40:	4543      	cmp	r3, r8
   27b42:	d0df      	beq.n	27b04 <ble_hs_hci_cmd_tx+0x24>
        ble_hs_sched_reset(rc);
   27b44:	4628      	mov	r0, r5
   27b46:	f7fe fe23 	bl	26790 <ble_hs_sched_reset>
        goto done;
   27b4a:	e7db      	b.n	27b04 <ble_hs_hci_cmd_tx+0x24>
        ble_hs_sched_reset(rc);
   27b4c:	f7fe fe20 	bl	26790 <ble_hs_sched_reset>
        goto done;
   27b50:	e7d8      	b.n	27b04 <ble_hs_hci_cmd_tx+0x24>
        ble_hs_sched_reset(rc);
   27b52:	f7fe fe1d 	bl	26790 <ble_hs_sched_reset>
        goto done;
   27b56:	e7d5      	b.n	27b04 <ble_hs_hci_cmd_tx+0x24>
   27b58:	10005fa8 	.word	0x10005fa8

00027b5c <ble_hs_hci_rx_evt>:
{
   27b5c:	b508      	push	{r3, lr}
    switch (ev->opcode) {
   27b5e:	7803      	ldrb	r3, [r0, #0]
   27b60:	2b0e      	cmp	r3, #14
   27b62:	d005      	beq.n	27b70 <ble_hs_hci_rx_evt+0x14>
   27b64:	2b0f      	cmp	r3, #15
   27b66:	d00d      	beq.n	27b84 <ble_hs_hci_rx_evt+0x28>
        ble_hs_enqueue_hci_event(hci_ev);
   27b68:	f7fe fde8 	bl	2673c <ble_hs_enqueue_hci_event>
}
   27b6c:	2000      	movs	r0, #0
   27b6e:	bd08      	pop	{r3, pc}
        enqueue = (cmd_complete->opcode == BLE_HCI_OPCODE_NOP);
   27b70:	f8b0 3003 	ldrh.w	r3, [r0, #3]
   27b74:	fab3 f383 	clz	r3, r3
   27b78:	095b      	lsrs	r3, r3, #5
    if (enqueue) {
   27b7a:	2b00      	cmp	r3, #0
   27b7c:	d1f4      	bne.n	27b68 <ble_hs_hci_rx_evt+0xc>
        ble_hs_hci_rx_ack(hci_ev);
   27b7e:	f7ff ff45 	bl	27a0c <ble_hs_hci_rx_ack>
   27b82:	e7f3      	b.n	27b6c <ble_hs_hci_rx_evt+0x10>
        enqueue = (cmd_status->opcode == BLE_HCI_OPCODE_NOP);
   27b84:	8883      	ldrh	r3, [r0, #4]
   27b86:	fab3 f383 	clz	r3, r3
   27b8a:	095b      	lsrs	r3, r3, #5
        break;
   27b8c:	e7f5      	b.n	27b7a <ble_hs_hci_rx_evt+0x1e>
	...

00027b90 <ble_hs_hci_acl_tx_now>:

int
ble_hs_hci_acl_tx_now(struct ble_hs_conn *conn, struct os_mbuf **om)
{
   27b90:	b570      	push	{r4, r5, r6, lr}
   27b92:	b082      	sub	sp, #8
   27b94:	4604      	mov	r4, r0
   27b96:	460d      	mov	r5, r1
    uint8_t pb;
    int rc;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    txom = *om;
   27b98:	680b      	ldr	r3, [r1, #0]
   27b9a:	9301      	str	r3, [sp, #4]
    *om = NULL;
   27b9c:	2300      	movs	r3, #0
   27b9e:	600b      	str	r3, [r1, #0]

    if (!(conn->bhc_flags & BLE_HS_CONN_F_TX_FRAG)) {
   27ba0:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
   27ba4:	f016 0604 	ands.w	r6, r6, #4
   27ba8:	d000      	beq.n	27bac <ble_hs_hci_acl_tx_now+0x1c>
         * After sending the first fragment, pb gets set appropriately for all
         * subsequent fragments in this packet.
         */
        pb = BLE_HCI_PB_FIRST_NON_FLUSH;
    } else {
        pb = BLE_HCI_PB_MIDDLE;
   27baa:	2601      	movs	r6, #1
    }

    /* Send fragments until the entire packet has been sent. */
    while (txom != NULL && ble_hs_hci_avail_pkts > 0) {
   27bac:	9b01      	ldr	r3, [sp, #4]
   27bae:	b35b      	cbz	r3, 27c08 <ble_hs_hci_acl_tx_now+0x78>
   27bb0:	4a22      	ldr	r2, [pc, #136]	; (27c3c <ble_hs_hci_acl_tx_now+0xac>)
   27bb2:	8812      	ldrh	r2, [r2, #0]
   27bb4:	b342      	cbz	r2, 27c08 <ble_hs_hci_acl_tx_now+0x78>
        frag = mem_split_frag(&txom, ble_hs_hci_max_acl_payload_sz(),
   27bb6:	f7ff feb3 	bl	27920 <ble_hs_hci_max_acl_payload_sz>
   27bba:	4601      	mov	r1, r0
   27bbc:	2300      	movs	r3, #0
   27bbe:	4a20      	ldr	r2, [pc, #128]	; (27c40 <ble_hs_hci_acl_tx_now+0xb0>)
   27bc0:	a801      	add	r0, sp, #4
   27bc2:	f7f6 fda1 	bl	1e708 <mem_split_frag>
                              ble_hs_hci_frag_alloc, NULL);
        if (frag == NULL) {
   27bc6:	b1d8      	cbz	r0, 27c00 <ble_hs_hci_acl_tx_now+0x70>
            *om = txom;
            return BLE_HS_EAGAIN;
        }

        frag = ble_hs_hci_acl_hdr_prepend(frag, conn->bhc_handle, pb);
   27bc8:	4632      	mov	r2, r6
   27bca:	88a1      	ldrh	r1, [r4, #4]
   27bcc:	f7ff ff40 	bl	27a50 <ble_hs_hci_acl_hdr_prepend>
        if (frag == NULL) {
   27bd0:	4606      	mov	r6, r0
   27bd2:	b328      	cbz	r0, 27c20 <ble_hs_hci_acl_tx_now+0x90>
            goto err;
        }

#if !BLE_MONITOR
        BLE_HS_LOG(DEBUG, "ble_hs_hci_acl_tx(): ");
        ble_hs_log_mbuf(frag);
   27bd4:	f000 fc6c 	bl	284b0 <ble_hs_log_mbuf>
        BLE_HS_LOG(DEBUG, "\n");
#endif

        rc = ble_hs_tx_data(frag);
   27bd8:	4630      	mov	r0, r6
   27bda:	f7fe fe3c 	bl	26856 <ble_hs_tx_data>
        if (rc != 0) {
   27bde:	4606      	mov	r6, r0
   27be0:	b9f8      	cbnz	r0, 27c22 <ble_hs_hci_acl_tx_now+0x92>
        }

        /* If any fragments remain, they should be marked as 'middle'
         * fragments.
         */
        conn->bhc_flags |= BLE_HS_CONN_F_TX_FRAG;
   27be2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   27be6:	f043 0304 	orr.w	r3, r3, #4
   27bea:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        pb = BLE_HCI_PB_MIDDLE;

        /* Account for the controller buf that will hold the txed fragment. */
        conn->bhc_outstanding_pkts++;
   27bee:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   27bf0:	3301      	adds	r3, #1
   27bf2:	8723      	strh	r3, [r4, #56]	; 0x38
        ble_hs_hci_avail_pkts--;
   27bf4:	4a11      	ldr	r2, [pc, #68]	; (27c3c <ble_hs_hci_acl_tx_now+0xac>)
   27bf6:	8813      	ldrh	r3, [r2, #0]
   27bf8:	3b01      	subs	r3, #1
   27bfa:	8013      	strh	r3, [r2, #0]
        pb = BLE_HCI_PB_MIDDLE;
   27bfc:	2601      	movs	r6, #1
   27bfe:	e7d5      	b.n	27bac <ble_hs_hci_acl_tx_now+0x1c>
            *om = txom;
   27c00:	9b01      	ldr	r3, [sp, #4]
   27c02:	602b      	str	r3, [r5, #0]
            return BLE_HS_EAGAIN;
   27c04:	2601      	movs	r6, #1
   27c06:	e015      	b.n	27c34 <ble_hs_hci_acl_tx_now+0xa4>
    }

    if (txom != NULL) {
   27c08:	b113      	cbz	r3, 27c10 <ble_hs_hci_acl_tx_now+0x80>
        /* The controller couldn't accommodate some or all of the packet. */
        *om = txom;
   27c0a:	602b      	str	r3, [r5, #0]
        return BLE_HS_EAGAIN;
   27c0c:	2601      	movs	r6, #1
   27c0e:	e011      	b.n	27c34 <ble_hs_hci_acl_tx_now+0xa4>
    }

    /* The entire packet was transmitted. */
    conn->bhc_flags &= ~BLE_HS_CONN_F_TX_FRAG;
   27c10:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   27c14:	f023 0304 	bic.w	r3, r3, #4
   27c18:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

    return 0;
   27c1c:	2600      	movs	r6, #0
   27c1e:	e009      	b.n	27c34 <ble_hs_hci_acl_tx_now+0xa4>
            rc = BLE_HS_ENOMEM;
   27c20:	2606      	movs	r6, #6

err:
    BLE_HS_DBG_ASSERT(rc != 0);

    conn->bhc_flags &= ~BLE_HS_CONN_F_TX_FRAG;
   27c22:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   27c26:	f023 0304 	bic.w	r3, r3, #4
   27c2a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    os_mbuf_free_chain(txom);
   27c2e:	9801      	ldr	r0, [sp, #4]
   27c30:	f7f1 fced 	bl	1960e <os_mbuf_free_chain>
    return rc;
}
   27c34:	4630      	mov	r0, r6
   27c36:	b002      	add	sp, #8
   27c38:	bd70      	pop	{r4, r5, r6, pc}
   27c3a:	bf00      	nop
   27c3c:	10005fac 	.word	0x10005fac
   27c40:	00027a31 	.word	0x00027a31

00027c44 <ble_hs_hci_acl_tx>:
 *                                  error.
 *
 */
int
ble_hs_hci_acl_tx(struct ble_hs_conn *conn, struct os_mbuf **om)
{
   27c44:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    /* If this conn is already backed up, don't even try to send. */
    if (STAILQ_FIRST(&conn->bhc_tx_q) != NULL) {
   27c46:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   27c48:	b10b      	cbz	r3, 27c4e <ble_hs_hci_acl_tx+0xa>
        return BLE_HS_EAGAIN;
   27c4a:	2001      	movs	r0, #1
    }

    return ble_hs_hci_acl_tx_now(conn, om);
}
   27c4c:	bd08      	pop	{r3, pc}
    return ble_hs_hci_acl_tx_now(conn, om);
   27c4e:	f7ff ff9f 	bl	27b90 <ble_hs_hci_acl_tx_now>
   27c52:	e7fb      	b.n	27c4c <ble_hs_hci_acl_tx+0x8>

00027c54 <ble_hs_hci_set_le_supported_feat>:

void
ble_hs_hci_set_le_supported_feat(uint32_t feat)
{
    ble_hs_hci_sup_feat = feat;
   27c54:	4b01      	ldr	r3, [pc, #4]	; (27c5c <ble_hs_hci_set_le_supported_feat+0x8>)
   27c56:	6018      	str	r0, [r3, #0]
}
   27c58:	4770      	bx	lr
   27c5a:	bf00      	nop
   27c5c:	10006108 	.word	0x10006108

00027c60 <ble_hs_hci_set_hci_version>:
}

void
ble_hs_hci_set_hci_version(uint8_t hci_version)
{
    ble_hs_hci_version = hci_version;
   27c60:	4b01      	ldr	r3, [pc, #4]	; (27c68 <ble_hs_hci_set_hci_version+0x8>)
   27c62:	7018      	strb	r0, [r3, #0]
}
   27c64:	4770      	bx	lr
   27c66:	bf00      	nop
   27c68:	1000610c 	.word	0x1000610c

00027c6c <ble_hs_hci_get_hci_version>:

uint8_t
ble_hs_hci_get_hci_version(void)
{
    return ble_hs_hci_version;
}
   27c6c:	4b01      	ldr	r3, [pc, #4]	; (27c74 <ble_hs_hci_get_hci_version+0x8>)
   27c6e:	7818      	ldrb	r0, [r3, #0]
   27c70:	4770      	bx	lr
   27c72:	bf00      	nop
   27c74:	1000610c 	.word	0x1000610c

00027c78 <ble_hs_hci_init>:

void
ble_hs_hci_init(void)
{
   27c78:	b500      	push	{lr}
   27c7a:	b083      	sub	sp, #12
    return (ble_npl_error_t)os_sem_init(&sem->sem, tokens);
   27c7c:	2100      	movs	r1, #0
   27c7e:	480a      	ldr	r0, [pc, #40]	; (27ca8 <ble_hs_hci_init+0x30>)
   27c80:	f006 fdaa 	bl	2e7d8 <os_sem_init>
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   27c84:	4809      	ldr	r0, [pc, #36]	; (27cac <ble_hs_hci_init+0x34>)
   27c86:	f7f2 feef 	bl	1aa68 <os_mutex_init>
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    rc = ble_npl_mutex_init(&ble_hs_hci_mutex);
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    rc = mem_init_mbuf_pool(ble_hs_hci_frag_data,
   27c8a:	4b09      	ldr	r3, [pc, #36]	; (27cb0 <ble_hs_hci_init+0x38>)
   27c8c:	9301      	str	r3, [sp, #4]
   27c8e:	f44f 738e 	mov.w	r3, #284	; 0x11c
   27c92:	9300      	str	r3, [sp, #0]
   27c94:	2301      	movs	r3, #1
   27c96:	4a07      	ldr	r2, [pc, #28]	; (27cb4 <ble_hs_hci_init+0x3c>)
   27c98:	4907      	ldr	r1, [pc, #28]	; (27cb8 <ble_hs_hci_init+0x40>)
   27c9a:	4808      	ldr	r0, [pc, #32]	; (27cbc <ble_hs_hci_init+0x44>)
   27c9c:	f7f6 fd1c 	bl	1e6d8 <mem_init_mbuf_pool>
                            &ble_hs_hci_frag_mbuf_pool,
                            1,
                            BLE_HS_HCI_FRAG_MEMBLOCK_SIZE,
                            "ble_hs_hci_frag");
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);
}
   27ca0:	b003      	add	sp, #12
   27ca2:	f85d fb04 	ldr.w	pc, [sp], #4
   27ca6:	bf00      	nop
   27ca8:	10006100 	.word	0x10006100
   27cac:	100060f4 	.word	0x100060f4
   27cb0:	00034ea8 	.word	0x00034ea8
   27cb4:	100060cc 	.word	0x100060cc
   27cb8:	100060d8 	.word	0x100060d8
   27cbc:	10005fb0 	.word	0x10005fb0

00027cc0 <ble_hs_hci_cmd_transport>:
#include "ble_hs_priv.h"
#include "ble_monitor_priv.h"

static int
ble_hs_hci_cmd_transport(struct ble_hci_cmd *cmd)
{
   27cc0:	b508      	push	{r3, lr}
#if BLE_MONITOR
    ble_monitor_send(BLE_MONITOR_OPCODE_COMMAND_PKT, cmd,
                     cmd->length + sizeof(*cmd));
#endif

    rc = ble_hci_trans_hs_cmd_tx((uint8_t *) cmd);
   27cc2:	f002 ff97 	bl	2abf4 <ble_hci_trans_hs_cmd_tx>
    switch (rc) {
   27cc6:	4603      	mov	r3, r0
   27cc8:	b110      	cbz	r0, 27cd0 <ble_hs_hci_cmd_transport+0x10>
   27cca:	2807      	cmp	r0, #7
   27ccc:	d102      	bne.n	27cd4 <ble_hs_hci_cmd_transport+0x14>
    case 0:
        return 0;

    case BLE_ERR_MEM_CAPACITY:
        return BLE_HS_ENOMEM_EVT;
   27cce:	2314      	movs	r3, #20

    default:
        return BLE_HS_EUNKNOWN;
    }
}
   27cd0:	4618      	mov	r0, r3
   27cd2:	bd08      	pop	{r3, pc}
        return BLE_HS_EUNKNOWN;
   27cd4:	2311      	movs	r3, #17
   27cd6:	e7fb      	b.n	27cd0 <ble_hs_hci_cmd_transport+0x10>

00027cd8 <ble_hs_hci_cmd_send>:

static int
ble_hs_hci_cmd_send(uint16_t opcode, uint8_t len, const void *cmddata)
{
   27cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27cda:	4606      	mov	r6, r0
   27cdc:	460d      	mov	r5, r1
   27cde:	4617      	mov	r7, r2
    struct ble_hci_cmd *cmd;
    int rc;

    cmd = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_CMD);
   27ce0:	2003      	movs	r0, #3
   27ce2:	f002 fe0f 	bl	2a904 <ble_hci_trans_buf_alloc>
   27ce6:	4604      	mov	r4, r0
    BLE_HS_DBG_ASSERT(cmd != NULL);

    cmd->opcode = htole16(opcode);
   27ce8:	8006      	strh	r6, [r0, #0]
    cmd->length = len;
   27cea:	7085      	strb	r5, [r0, #2]
    if (len != 0) {
   27cec:	b945      	cbnz	r5, 27d00 <ble_hs_hci_cmd_send+0x28>
        memcpy(cmd->data, cmddata, len);
    }

    rc = ble_hs_hci_cmd_transport(cmd);
   27cee:	4620      	mov	r0, r4
   27cf0:	f7ff ffe6 	bl	27cc0 <ble_hs_hci_cmd_transport>

    if (rc == 0) {
   27cf4:	b918      	cbnz	r0, 27cfe <ble_hs_hci_cmd_send+0x26>
        STATS_INC(ble_hs_stats, hci_cmd);
   27cf6:	4a05      	ldr	r2, [pc, #20]	; (27d0c <ble_hs_hci_cmd_send+0x34>)
   27cf8:	6953      	ldr	r3, [r2, #20]
   27cfa:	3301      	adds	r3, #1
   27cfc:	6153      	str	r3, [r2, #20]
    } else {
        BLE_HS_LOG(DEBUG, "ble_hs_hci_cmd_send failure; rc=%d\n", rc);
    }

    return rc;
}
   27cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memcpy(cmd->data, cmddata, len);
   27d00:	462a      	mov	r2, r5
   27d02:	4639      	mov	r1, r7
   27d04:	3003      	adds	r0, #3
   27d06:	f7f2 ffb5 	bl	1ac74 <memcpy>
   27d0a:	e7f0      	b.n	27cee <ble_hs_hci_cmd_send+0x16>
   27d0c:	10005e44 	.word	0x10005e44

00027d10 <ble_hs_hci_cmd_send_buf>:

int
ble_hs_hci_cmd_send_buf(uint16_t opcode, const void *buf, uint8_t buf_len)
{
   27d10:	b570      	push	{r4, r5, r6, lr}
   27d12:	4604      	mov	r4, r0
   27d14:	460e      	mov	r6, r1
   27d16:	4615      	mov	r5, r2
    switch (ble_hs_sync_state) {
   27d18:	4b0a      	ldr	r3, [pc, #40]	; (27d44 <ble_hs_hci_cmd_send_buf+0x34>)
   27d1a:	781b      	ldrb	r3, [r3, #0]
   27d1c:	2b01      	cmp	r3, #1
   27d1e:	d006      	beq.n	27d2e <ble_hs_hci_cmd_send_buf+0x1e>
   27d20:	2b02      	cmp	r3, #2
   27d22:	d007      	beq.n	27d34 <ble_hs_hci_cmd_send_buf+0x24>
   27d24:	b10b      	cbz	r3, 27d2a <ble_hs_hci_cmd_send_buf+0x1a>
    case BLE_HS_SYNC_STATE_GOOD:
        break;

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_HS_EUNKNOWN;
   27d26:	2011      	movs	r0, #17
    }

    return ble_hs_hci_cmd_send(opcode, buf_len, buf);
}
   27d28:	bd70      	pop	{r4, r5, r6, pc}
    switch (ble_hs_sync_state) {
   27d2a:	2016      	movs	r0, #22
   27d2c:	e7fc      	b.n	27d28 <ble_hs_hci_cmd_send_buf+0x18>
        if (!ble_hs_is_parent_task()) {
   27d2e:	f7fe fbdf 	bl	264f0 <ble_hs_is_parent_task>
   27d32:	b128      	cbz	r0, 27d40 <ble_hs_hci_cmd_send_buf+0x30>
    return ble_hs_hci_cmd_send(opcode, buf_len, buf);
   27d34:	4632      	mov	r2, r6
   27d36:	4629      	mov	r1, r5
   27d38:	4620      	mov	r0, r4
   27d3a:	f7ff ffcd 	bl	27cd8 <ble_hs_hci_cmd_send>
   27d3e:	e7f3      	b.n	27d28 <ble_hs_hci_cmd_send_buf+0x18>
            return BLE_HS_ENOTSYNCED;
   27d40:	2016      	movs	r0, #22
   27d42:	e7f1      	b.n	27d28 <ble_hs_hci_cmd_send_buf+0x18>
   27d44:	10005e7c 	.word	0x10005e7c

00027d48 <ble_hs_hci_evt_dispatch_find>:
#define BLE_HS_HCI_EVT_LE_DISPATCH_SZ \
    (sizeof ble_hs_hci_evt_le_dispatch / sizeof ble_hs_hci_evt_le_dispatch[0])

static const struct ble_hs_hci_evt_dispatch_entry *
ble_hs_hci_evt_dispatch_find(uint8_t event_code)
{
   27d48:	4601      	mov	r1, r0
    const struct ble_hs_hci_evt_dispatch_entry *entry;
    int i;

    for (i = 0; i < BLE_HS_HCI_EVT_DISPATCH_SZ; i++) {
   27d4a:	2300      	movs	r3, #0
   27d4c:	2b05      	cmp	r3, #5
   27d4e:	d808      	bhi.n	27d62 <ble_hs_hci_evt_dispatch_find+0x1a>
        entry = ble_hs_hci_evt_dispatch + i;
   27d50:	4a05      	ldr	r2, [pc, #20]	; (27d68 <ble_hs_hci_evt_dispatch_find+0x20>)
   27d52:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
        if (entry->event_code == event_code) {
   27d56:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   27d5a:	428a      	cmp	r2, r1
   27d5c:	d002      	beq.n	27d64 <ble_hs_hci_evt_dispatch_find+0x1c>
    for (i = 0; i < BLE_HS_HCI_EVT_DISPATCH_SZ; i++) {
   27d5e:	3301      	adds	r3, #1
   27d60:	e7f4      	b.n	27d4c <ble_hs_hci_evt_dispatch_find+0x4>
            return entry;
        }
    }

    return NULL;
   27d62:	2000      	movs	r0, #0
}
   27d64:	4770      	bx	lr
   27d66:	bf00      	nop
   27d68:	00034eb8 	.word	0x00034eb8

00027d6c <ble_hs_hci_evt_le_dispatch_find>:

static ble_hs_hci_evt_le_fn *
ble_hs_hci_evt_le_dispatch_find(uint8_t event_code)
{
    if (event_code >= BLE_HS_HCI_EVT_LE_DISPATCH_SZ) {
   27d6c:	2818      	cmp	r0, #24
   27d6e:	d803      	bhi.n	27d78 <ble_hs_hci_evt_le_dispatch_find+0xc>
        return NULL;
    }

    return ble_hs_hci_evt_le_dispatch[event_code];
   27d70:	4b02      	ldr	r3, [pc, #8]	; (27d7c <ble_hs_hci_evt_le_dispatch_find+0x10>)
   27d72:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   27d76:	4770      	bx	lr
        return NULL;
   27d78:	2000      	movs	r0, #0
}
   27d7a:	4770      	bx	lr
   27d7c:	00034ee8 	.word	0x00034ee8

00027d80 <ble_hs_hci_evt_encrypt_change>:
ble_hs_hci_evt_encrypt_change(uint8_t event_code, const void *data,
                              unsigned int len)
{
    const struct ble_hci_ev_enrypt_chg *ev = data;

    if (len != sizeof (*ev)) {
   27d80:	2a04      	cmp	r2, #4
   27d82:	d101      	bne.n	27d88 <ble_hs_hci_evt_encrypt_change+0x8>
        return BLE_HS_ECONTROLLER;
    }

    ble_sm_enc_change_rx(ev);

    return 0;
   27d84:	2000      	movs	r0, #0
   27d86:	4770      	bx	lr
        return BLE_HS_ECONTROLLER;
   27d88:	200c      	movs	r0, #12
}
   27d8a:	4770      	bx	lr

00027d8c <ble_hs_hci_evt_enc_key_refresh>:
ble_hs_hci_evt_enc_key_refresh(uint8_t event_code, const void *data,
                               unsigned int len)
{
    const struct ble_hci_ev_enc_key_refresh *ev = data;

    if (len != sizeof(*ev)) {
   27d8c:	2a03      	cmp	r2, #3
   27d8e:	d101      	bne.n	27d94 <ble_hs_hci_evt_enc_key_refresh+0x8>
        return BLE_HS_ECONTROLLER;
    }

    ble_sm_enc_key_refresh_rx(ev);

    return 0;
   27d90:	2000      	movs	r0, #0
   27d92:	4770      	bx	lr
        return BLE_HS_ECONTROLLER;
   27d94:	200c      	movs	r0, #12
}
   27d96:	4770      	bx	lr

00027d98 <ble_hs_hci_evt_le_meta>:
ble_hs_hci_evt_le_meta(uint8_t event_code, const void *data, unsigned int len)
{
    const struct ble_hci_ev_le_meta *ev = data;
    ble_hs_hci_evt_le_fn *fn;

    if (len < sizeof(*ev)) {
   27d98:	b16a      	cbz	r2, 27db6 <ble_hs_hci_evt_le_meta+0x1e>
{
   27d9a:	b570      	push	{r4, r5, r6, lr}
   27d9c:	460c      	mov	r4, r1
   27d9e:	4616      	mov	r6, r2
        return BLE_HS_ECONTROLLER;
    }

    fn = ble_hs_hci_evt_le_dispatch_find(ev->subevent);
   27da0:	780d      	ldrb	r5, [r1, #0]
   27da2:	4628      	mov	r0, r5
   27da4:	f7ff ffe2 	bl	27d6c <ble_hs_hci_evt_le_dispatch_find>
    if (fn) {
   27da8:	4603      	mov	r3, r0
   27daa:	b130      	cbz	r0, 27dba <ble_hs_hci_evt_le_meta+0x22>
        return fn(ev->subevent, data, len);
   27dac:	4632      	mov	r2, r6
   27dae:	4621      	mov	r1, r4
   27db0:	4628      	mov	r0, r5
   27db2:	4798      	blx	r3
    }

    return 0;
}
   27db4:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   27db6:	200c      	movs	r0, #12
}
   27db8:	4770      	bx	lr
    return 0;
   27dba:	2000      	movs	r0, #0
   27dbc:	e7fa      	b.n	27db4 <ble_hs_hci_evt_le_meta+0x1c>

00027dbe <ble_hs_hci_evt_le_adv_rpt_first_pass>:
{
    const struct ble_hci_ev_le_subev_adv_rpt *ev = data;
    const struct adv_report *rpt;
    int i;

    if (len < sizeof(*ev)) {
   27dbe:	2901      	cmp	r1, #1
   27dc0:	d91a      	bls.n	27df8 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x3a>
{
   27dc2:	b410      	push	{r4}
        return BLE_HS_ECONTROLLER;
    }

    len -= sizeof(*ev);
   27dc4:	3902      	subs	r1, #2
    data += sizeof(*ev);
   27dc6:	1c84      	adds	r4, r0, #2

    if (ev->num_reports < BLE_HCI_LE_ADV_RPT_NUM_RPTS_MIN ||
   27dc8:	7840      	ldrb	r0, [r0, #1]
   27dca:	1e43      	subs	r3, r0, #1
   27dcc:	b2db      	uxtb	r3, r3
   27dce:	2b18      	cmp	r3, #24
   27dd0:	d814      	bhi.n	27dfc <ble_hs_hci_evt_le_adv_rpt_first_pass+0x3e>
        ev->num_reports > BLE_HCI_LE_ADV_RPT_NUM_RPTS_MAX) {
        return BLE_HS_EBADDATA;
    }

    for (i = 0; i < ev->num_reports; i++) {
   27dd2:	2200      	movs	r2, #0
   27dd4:	e003      	b.n	27dde <ble_hs_hci_evt_le_adv_rpt_first_pass+0x20>

        if (rpt->data_len > len) {
            return BLE_HS_ECONTROLLER;
        }

        len -= rpt->data_len;
   27dd6:	1ac9      	subs	r1, r1, r3
        data += rpt->data_len;
   27dd8:	3305      	adds	r3, #5
   27dda:	441c      	add	r4, r3
    for (i = 0; i < ev->num_reports; i++) {
   27ddc:	3201      	adds	r2, #1
   27dde:	4290      	cmp	r0, r2
   27de0:	dd07      	ble.n	27df2 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x34>
        if (len < sizeof(*rpt) + 1) {
   27de2:	2909      	cmp	r1, #9
   27de4:	d90c      	bls.n	27e00 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x42>
        len -= sizeof(*rpt) + 1;
   27de6:	390a      	subs	r1, #10
        if (rpt->data_len > len) {
   27de8:	7a23      	ldrb	r3, [r4, #8]
   27dea:	428b      	cmp	r3, r1
   27dec:	d9f3      	bls.n	27dd6 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x18>
            return BLE_HS_ECONTROLLER;
   27dee:	200c      	movs	r0, #12
   27df0:	e007      	b.n	27e02 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x44>
    }

    /* Make sure length was correct */
    if (len) {
   27df2:	b941      	cbnz	r1, 27e06 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x48>
        return BLE_HS_ECONTROLLER;
    }

    return 0;
   27df4:	2000      	movs	r0, #0
   27df6:	e004      	b.n	27e02 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x44>
        return BLE_HS_ECONTROLLER;
   27df8:	200c      	movs	r0, #12
}
   27dfa:	4770      	bx	lr
        return BLE_HS_EBADDATA;
   27dfc:	200a      	movs	r0, #10
   27dfe:	e000      	b.n	27e02 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x44>
            return BLE_HS_ECONTROLLER;
   27e00:	200c      	movs	r0, #12
}
   27e02:	bc10      	pop	{r4}
   27e04:	4770      	bx	lr
        return BLE_HS_ECONTROLLER;
   27e06:	200c      	movs	r0, #12
   27e08:	e7fb      	b.n	27e02 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x44>

00027e0a <ble_hs_hci_evt_le_ext_adv_rpt>:

        report = (const void *) &report->data[report->data_len];
    }
#endif
    return 0;
}
   27e0a:	2000      	movs	r0, #0
   27e0c:	4770      	bx	lr

00027e0e <ble_hs_hci_evt_le_periodic_adv_sync_estab>:

    ble_gap_rx_peroidic_adv_sync_estab(ev);
#endif

    return 0;
}
   27e0e:	2000      	movs	r0, #0
   27e10:	4770      	bx	lr

00027e12 <ble_hs_hci_evt_le_periodic_adv_rpt>:

    ble_gap_rx_periodic_adv_rpt(ev);
#endif

return 0;
}
   27e12:	2000      	movs	r0, #0
   27e14:	4770      	bx	lr

00027e16 <ble_hs_hci_evt_le_periodic_adv_sync_lost>:

    ble_gap_rx_periodic_adv_sync_lost(ev);

#endif
    return 0;
}
   27e16:	2000      	movs	r0, #0
   27e18:	4770      	bx	lr

00027e1a <ble_hs_hci_evt_le_periodic_adv_sync_transfer>:

    ble_gap_rx_periodic_adv_sync_transfer(ev);

#endif
    return 0;
}
   27e1a:	2000      	movs	r0, #0
   27e1c:	4770      	bx	lr

00027e1e <ble_hs_hci_evt_le_scan_timeout>:
    }

    ble_gap_rx_le_scan_timeout();
#endif
    return 0;
}
   27e1e:	2000      	movs	r0, #0
   27e20:	4770      	bx	lr

00027e22 <ble_hs_hci_evt_le_adv_set_terminated>:
    }
    ble_gap_rx_adv_set_terminated(ev);
#endif

    return 0;
}
   27e22:	2000      	movs	r0, #0
   27e24:	4770      	bx	lr

00027e26 <ble_hs_hci_evt_le_scan_req_rcvd>:

    ble_gap_rx_scan_req_rcvd(ev);
#endif

    return 0;
}
   27e26:	2000      	movs	r0, #0
   27e28:	4770      	bx	lr

00027e2a <ble_hs_hci_evt_le_lt_key_req>:
static int
ble_hs_hci_evt_le_lt_key_req(uint8_t subevent, const void *data, unsigned int len)
{
    const struct ble_hci_ev_le_subev_lt_key_req *ev = data;

    if (len != sizeof(*ev)) {
   27e2a:	2a0d      	cmp	r2, #13
   27e2c:	d101      	bne.n	27e32 <ble_hs_hci_evt_le_lt_key_req+0x8>
        return BLE_HS_ECONTROLLER;
    }

    ble_sm_ltk_req_rx(ev);

    return 0;
   27e2e:	2000      	movs	r0, #0
   27e30:	4770      	bx	lr
        return BLE_HS_ECONTROLLER;
   27e32:	200c      	movs	r0, #12
}
   27e34:	4770      	bx	lr

00027e36 <ble_hs_hci_evt_hw_error>:
    if (len != sizeof(*ev)) {
   27e36:	2a01      	cmp	r2, #1
   27e38:	d001      	beq.n	27e3e <ble_hs_hci_evt_hw_error+0x8>
        return BLE_HS_ECONTROLLER;
   27e3a:	200c      	movs	r0, #12
}
   27e3c:	4770      	bx	lr
{
   27e3e:	b508      	push	{r3, lr}
    ble_hs_hw_error(ev->hw_code);
   27e40:	7808      	ldrb	r0, [r1, #0]
   27e42:	f7fe fcb5 	bl	267b0 <ble_hs_hw_error>
    return 0;
   27e46:	2000      	movs	r0, #0
}
   27e48:	bd08      	pop	{r3, pc}

00027e4a <ble_hs_hci_evt_disconn_complete>:
    if (len != sizeof(*ev)) {
   27e4a:	2a04      	cmp	r2, #4
   27e4c:	d001      	beq.n	27e52 <ble_hs_hci_evt_disconn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   27e4e:	200c      	movs	r0, #12
}
   27e50:	4770      	bx	lr
{
   27e52:	b510      	push	{r4, lr}
   27e54:	460c      	mov	r4, r1
    ble_hs_lock();
   27e56:	f7fe fb6f 	bl	26538 <ble_hs_lock>
    conn = ble_hs_conn_find(le16toh(ev->conn_handle));
   27e5a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   27e5e:	f7ff fbef 	bl	27640 <ble_hs_conn_find>
    if (conn != NULL) {
   27e62:	b110      	cbz	r0, 27e6a <ble_hs_hci_evt_disconn_complete+0x20>
        ble_hs_hci_add_avail_pkts(conn->bhc_outstanding_pkts);
   27e64:	8f00      	ldrh	r0, [r0, #56]	; 0x38
   27e66:	f7ff fe29 	bl	27abc <ble_hs_hci_add_avail_pkts>
    ble_hs_unlock();
   27e6a:	f7fe fb69 	bl	26540 <ble_hs_unlock>
    ble_gap_rx_disconn_complete(ev);
   27e6e:	4620      	mov	r0, r4
   27e70:	f7fa fd0c 	bl	2288c <ble_gap_rx_disconn_complete>
    ble_hs_wakeup_tx();
   27e74:	f7fe fb7a 	bl	2656c <ble_hs_wakeup_tx>
    return 0;
   27e78:	2000      	movs	r0, #0
}
   27e7a:	bd10      	pop	{r4, pc}

00027e7c <ble_hs_hci_evt_num_completed_pkts>:
    if (len != sizeof(*ev) + (ev->count * sizeof(ev->completed[0]))) {
   27e7c:	780b      	ldrb	r3, [r1, #0]
   27e7e:	009b      	lsls	r3, r3, #2
   27e80:	3301      	adds	r3, #1
   27e82:	4293      	cmp	r3, r2
   27e84:	d129      	bne.n	27eda <ble_hs_hci_evt_num_completed_pkts+0x5e>
{
   27e86:	b570      	push	{r4, r5, r6, lr}
   27e88:	460d      	mov	r5, r1
    for (i = 0; i < ev->count; i++) {
   27e8a:	2400      	movs	r4, #0
   27e8c:	e008      	b.n	27ea0 <ble_hs_hci_evt_num_completed_pkts+0x24>
                    ble_hs_sched_reset(BLE_HS_ECONTROLLER);
   27e8e:	200c      	movs	r0, #12
   27e90:	f7fe fc7e 	bl	26790 <ble_hs_sched_reset>
                ble_hs_hci_add_avail_pkts(num_pkts);
   27e94:	4630      	mov	r0, r6
   27e96:	f7ff fe11 	bl	27abc <ble_hs_hci_add_avail_pkts>
            ble_hs_unlock();
   27e9a:	f7fe fb51 	bl	26540 <ble_hs_unlock>
    for (i = 0; i < ev->count; i++) {
   27e9e:	3401      	adds	r4, #1
   27ea0:	782b      	ldrb	r3, [r5, #0]
   27ea2:	42a3      	cmp	r3, r4
   27ea4:	dd15      	ble.n	27ed2 <ble_hs_hci_evt_num_completed_pkts+0x56>
        num_pkts = le16toh(ev->completed[i].packets);
   27ea6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   27eaa:	f8b3 6003 	ldrh.w	r6, [r3, #3]
        if (num_pkts > 0) {
   27eae:	2e00      	cmp	r6, #0
   27eb0:	d0f5      	beq.n	27e9e <ble_hs_hci_evt_num_completed_pkts+0x22>
            ble_hs_lock();
   27eb2:	f7fe fb41 	bl	26538 <ble_hs_lock>
            conn = ble_hs_conn_find(le16toh(ev->completed[i].handle));
   27eb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   27eba:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   27ebe:	f7ff fbbf 	bl	27640 <ble_hs_conn_find>
            if (conn != NULL) {
   27ec2:	2800      	cmp	r0, #0
   27ec4:	d0e9      	beq.n	27e9a <ble_hs_hci_evt_num_completed_pkts+0x1e>
                if (conn->bhc_outstanding_pkts < num_pkts) {
   27ec6:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   27ec8:	42b3      	cmp	r3, r6
   27eca:	d3e0      	bcc.n	27e8e <ble_hs_hci_evt_num_completed_pkts+0x12>
                    conn->bhc_outstanding_pkts -= num_pkts;
   27ecc:	1b9b      	subs	r3, r3, r6
   27ece:	8703      	strh	r3, [r0, #56]	; 0x38
   27ed0:	e7e0      	b.n	27e94 <ble_hs_hci_evt_num_completed_pkts+0x18>
    ble_hs_wakeup_tx();
   27ed2:	f7fe fb4b 	bl	2656c <ble_hs_wakeup_tx>
    return 0;
   27ed6:	2000      	movs	r0, #0
}
   27ed8:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   27eda:	200c      	movs	r0, #12
}
   27edc:	4770      	bx	lr

00027ede <ble_hs_hci_evt_le_phy_update_complete>:
ble_hs_hci_evt_le_phy_update_complete(uint8_t subevent, const void *data,
                                      unsigned int len)
{
    const struct ble_hci_ev_le_subev_phy_update_complete *ev = data;

    if (len != sizeof(*ev)) {
   27ede:	2a06      	cmp	r2, #6
   27ee0:	d001      	beq.n	27ee6 <ble_hs_hci_evt_le_phy_update_complete+0x8>
        return BLE_HS_ECONTROLLER;
   27ee2:	200c      	movs	r0, #12
    }

    ble_gap_rx_phy_update_complete(ev);

    return 0;
}
   27ee4:	4770      	bx	lr
{
   27ee6:	b508      	push	{r3, lr}
    ble_gap_rx_phy_update_complete(ev);
   27ee8:	4608      	mov	r0, r1
   27eea:	f7f9 ffc7 	bl	21e7c <ble_gap_rx_phy_update_complete>
    return 0;
   27eee:	2000      	movs	r0, #0
}
   27ef0:	bd08      	pop	{r3, pc}

00027ef2 <ble_hs_hci_evt_le_dir_adv_rpt>:
{
   27ef2:	b530      	push	{r4, r5, lr}
   27ef4:	b087      	sub	sp, #28
    struct ble_gap_disc_desc desc = {0};
   27ef6:	2300      	movs	r3, #0
   27ef8:	9300      	str	r3, [sp, #0]
   27efa:	9301      	str	r3, [sp, #4]
   27efc:	9302      	str	r3, [sp, #8]
   27efe:	9304      	str	r3, [sp, #16]
   27f00:	9305      	str	r3, [sp, #20]
    if (len < sizeof(*ev) || len != ev->num_reports * sizeof(ev->reports[0])) {
   27f02:	2a01      	cmp	r2, #1
   27f04:	d932      	bls.n	27f6c <ble_hs_hci_evt_le_dir_adv_rpt+0x7a>
   27f06:	460d      	mov	r5, r1
   27f08:	784b      	ldrb	r3, [r1, #1]
   27f0a:	ebb2 1f03 	cmp.w	r2, r3, lsl #4
   27f0e:	d12f      	bne.n	27f70 <ble_hs_hci_evt_le_dir_adv_rpt+0x7e>
    desc.data = NULL;
   27f10:	2400      	movs	r4, #0
   27f12:	9403      	str	r4, [sp, #12]
    desc.length_data = 0;
   27f14:	f88d 4001 	strb.w	r4, [sp, #1]
    for (i = 0; i < ev->num_reports; i++) {
   27f18:	786b      	ldrb	r3, [r5, #1]
   27f1a:	42a3      	cmp	r3, r4
   27f1c:	dd23      	ble.n	27f66 <ble_hs_hci_evt_le_dir_adv_rpt+0x74>
        desc.event_type = ev->reports[i].type;
   27f1e:	eb05 1304 	add.w	r3, r5, r4, lsl #4
   27f22:	789a      	ldrb	r2, [r3, #2]
   27f24:	f88d 2000 	strb.w	r2, [sp]
        desc.addr.type = ev->reports[i].addr_type;
   27f28:	78da      	ldrb	r2, [r3, #3]
   27f2a:	f88d 2002 	strb.w	r2, [sp, #2]
        memcpy(desc.addr.val, ev->reports[i].addr, BLE_DEV_ADDR_LEN);
   27f2e:	461a      	mov	r2, r3
   27f30:	f852 1f04 	ldr.w	r1, [r2, #4]!
   27f34:	f8cd 1003 	str.w	r1, [sp, #3]
   27f38:	8892      	ldrh	r2, [r2, #4]
   27f3a:	f8ad 2007 	strh.w	r2, [sp, #7]
        desc.direct_addr.type = ev->reports[i].dir_addr_type;
   27f3e:	7a9a      	ldrb	r2, [r3, #10]
   27f40:	f88d 2010 	strb.w	r2, [sp, #16]
        memcpy(desc.direct_addr.val, ev->reports[i].dir_addr, BLE_DEV_ADDR_LEN);
   27f44:	461a      	mov	r2, r3
   27f46:	f852 1f0b 	ldr.w	r1, [r2, #11]!
   27f4a:	f8cd 1011 	str.w	r1, [sp, #17]
   27f4e:	8892      	ldrh	r2, [r2, #4]
   27f50:	f8ad 2015 	strh.w	r2, [sp, #21]
        desc.rssi = ev->reports[i].rssi;
   27f54:	f993 3011 	ldrsb.w	r3, [r3, #17]
   27f58:	f88d 3009 	strb.w	r3, [sp, #9]
        ble_gap_rx_adv_report(&desc);
   27f5c:	4668      	mov	r0, sp
   27f5e:	f7f9 ff59 	bl	21e14 <ble_gap_rx_adv_report>
    for (i = 0; i < ev->num_reports; i++) {
   27f62:	3401      	adds	r4, #1
   27f64:	e7d8      	b.n	27f18 <ble_hs_hci_evt_le_dir_adv_rpt+0x26>
    return 0;
   27f66:	2000      	movs	r0, #0
}
   27f68:	b007      	add	sp, #28
   27f6a:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ECONTROLLER;
   27f6c:	200c      	movs	r0, #12
   27f6e:	e7fb      	b.n	27f68 <ble_hs_hci_evt_le_dir_adv_rpt+0x76>
   27f70:	200c      	movs	r0, #12
   27f72:	e7f9      	b.n	27f68 <ble_hs_hci_evt_le_dir_adv_rpt+0x76>

00027f74 <ble_hs_hci_evt_le_adv_rpt>:
{
   27f74:	b5f0      	push	{r4, r5, r6, r7, lr}
   27f76:	b087      	sub	sp, #28
   27f78:	460e      	mov	r6, r1
    struct ble_gap_disc_desc desc = {0};
   27f7a:	2300      	movs	r3, #0
   27f7c:	9300      	str	r3, [sp, #0]
   27f7e:	9301      	str	r3, [sp, #4]
   27f80:	9302      	str	r3, [sp, #8]
   27f82:	9303      	str	r3, [sp, #12]
   27f84:	9304      	str	r3, [sp, #16]
   27f86:	9305      	str	r3, [sp, #20]
    rc = ble_hs_hci_evt_le_adv_rpt_first_pass(data, len);
   27f88:	4611      	mov	r1, r2
   27f8a:	4630      	mov	r0, r6
   27f8c:	f7ff ff17 	bl	27dbe <ble_hs_hci_evt_le_adv_rpt_first_pass>
    if (rc != 0) {
   27f90:	4607      	mov	r7, r0
   27f92:	bb58      	cbnz	r0, 27fec <ble_hs_hci_evt_le_adv_rpt+0x78>
    data += sizeof(*ev);
   27f94:	1cb3      	adds	r3, r6, #2
    desc.direct_addr = *BLE_ADDR_ANY;
   27f96:	2200      	movs	r2, #0
   27f98:	9204      	str	r2, [sp, #16]
   27f9a:	f8cd 2013 	str.w	r2, [sp, #19]
    for (i = 0; i < ev->num_reports; i++) {
   27f9e:	4605      	mov	r5, r0
   27fa0:	7872      	ldrb	r2, [r6, #1]
   27fa2:	42aa      	cmp	r2, r5
   27fa4:	dd22      	ble.n	27fec <ble_hs_hci_evt_le_adv_rpt+0x78>
        data += sizeof(rpt) + rpt->data_len + 1;
   27fa6:	7a1c      	ldrb	r4, [r3, #8]
   27fa8:	3405      	adds	r4, #5
   27faa:	441c      	add	r4, r3
        desc.event_type = rpt->type;
   27fac:	781a      	ldrb	r2, [r3, #0]
   27fae:	f88d 2000 	strb.w	r2, [sp]
        desc.addr.type = rpt->addr_type;
   27fb2:	785a      	ldrb	r2, [r3, #1]
   27fb4:	f88d 2002 	strb.w	r2, [sp, #2]
        memcpy(desc.addr.val, rpt->addr, BLE_DEV_ADDR_LEN);
   27fb8:	461a      	mov	r2, r3
   27fba:	f852 1f02 	ldr.w	r1, [r2, #2]!
   27fbe:	f8cd 1003 	str.w	r1, [sp, #3]
   27fc2:	8892      	ldrh	r2, [r2, #4]
   27fc4:	f8ad 2007 	strh.w	r2, [sp, #7]
        desc.length_data = rpt->data_len;
   27fc8:	7a1a      	ldrb	r2, [r3, #8]
   27fca:	f88d 2001 	strb.w	r2, [sp, #1]
        desc.data = rpt->data;
   27fce:	f103 0209 	add.w	r2, r3, #9
   27fd2:	9203      	str	r2, [sp, #12]
        desc.rssi = rpt->data[rpt->data_len];
   27fd4:	7a1a      	ldrb	r2, [r3, #8]
   27fd6:	4413      	add	r3, r2
   27fd8:	f993 3009 	ldrsb.w	r3, [r3, #9]
   27fdc:	f88d 3009 	strb.w	r3, [sp, #9]
        ble_gap_rx_adv_report(&desc);
   27fe0:	4668      	mov	r0, sp
   27fe2:	f7f9 ff17 	bl	21e14 <ble_gap_rx_adv_report>
    for (i = 0; i < ev->num_reports; i++) {
   27fe6:	3501      	adds	r5, #1
        data += sizeof(rpt) + rpt->data_len + 1;
   27fe8:	4623      	mov	r3, r4
   27fea:	e7d9      	b.n	27fa0 <ble_hs_hci_evt_le_adv_rpt+0x2c>
}
   27fec:	4638      	mov	r0, r7
   27fee:	b007      	add	sp, #28
   27ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027ff2 <ble_hs_hci_evt_le_enh_conn_complete>:
    if (len != sizeof(*ev)) {
   27ff2:	2a1f      	cmp	r2, #31
   27ff4:	d001      	beq.n	27ffa <ble_hs_hci_evt_le_enh_conn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   27ff6:	200c      	movs	r0, #12
}
   27ff8:	4770      	bx	lr
{
   27ffa:	b510      	push	{r4, lr}
   27ffc:	b088      	sub	sp, #32
   27ffe:	460c      	mov	r4, r1
    memset(&evt, 0, sizeof(evt));
   28000:	2220      	movs	r2, #32
   28002:	2100      	movs	r1, #0
   28004:	4668      	mov	r0, sp
   28006:	f7f2 fe5a 	bl	1acbe <memset>
    evt.status = ev->status;
   2800a:	7863      	ldrb	r3, [r4, #1]
   2800c:	f88d 3000 	strb.w	r3, [sp]
    if (evt.status == BLE_ERR_SUCCESS) {
   28010:	bb63      	cbnz	r3, 2806c <ble_hs_hci_evt_le_enh_conn_complete+0x7a>
        evt.connection_handle = le16toh(ev->conn_handle);
   28012:	8863      	ldrh	r3, [r4, #2]
   28014:	f8ad 3002 	strh.w	r3, [sp, #2]
        evt.role = ev->role;
   28018:	7923      	ldrb	r3, [r4, #4]
   2801a:	f88d 3004 	strb.w	r3, [sp, #4]
        evt.peer_addr_type = ev->peer_addr_type;
   2801e:	7963      	ldrb	r3, [r4, #5]
   28020:	f88d 3005 	strb.w	r3, [sp, #5]
        memcpy(evt.peer_addr, ev->peer_addr, BLE_DEV_ADDR_LEN);
   28024:	4623      	mov	r3, r4
   28026:	f853 2f06 	ldr.w	r2, [r3, #6]!
   2802a:	f8cd 2006 	str.w	r2, [sp, #6]
   2802e:	889b      	ldrh	r3, [r3, #4]
   28030:	f8ad 300a 	strh.w	r3, [sp, #10]
        memcpy(evt.local_rpa, ev->local_rpa, BLE_DEV_ADDR_LEN);
   28034:	4623      	mov	r3, r4
   28036:	f853 2f0c 	ldr.w	r2, [r3, #12]!
   2803a:	f8cd 2013 	str.w	r2, [sp, #19]
   2803e:	889b      	ldrh	r3, [r3, #4]
   28040:	f8ad 3017 	strh.w	r3, [sp, #23]
        memcpy(evt.peer_rpa,ev->peer_rpa, BLE_DEV_ADDR_LEN);
   28044:	4623      	mov	r3, r4
   28046:	f853 2f12 	ldr.w	r2, [r3, #18]!
   2804a:	f8cd 2019 	str.w	r2, [sp, #25]
   2804e:	889b      	ldrh	r3, [r3, #4]
   28050:	f8ad 301d 	strh.w	r3, [sp, #29]
        evt.conn_itvl = le16toh(ev->conn_itvl);
   28054:	8b23      	ldrh	r3, [r4, #24]
   28056:	f8ad 300c 	strh.w	r3, [sp, #12]
        evt.conn_latency = le16toh(ev->conn_latency);
   2805a:	8b63      	ldrh	r3, [r4, #26]
   2805c:	f8ad 300e 	strh.w	r3, [sp, #14]
        evt.supervision_timeout = le16toh(ev->supervision_timeout);
   28060:	8ba3      	ldrh	r3, [r4, #28]
   28062:	f8ad 3010 	strh.w	r3, [sp, #16]
        evt.master_clk_acc = ev->mca;
   28066:	7fa3      	ldrb	r3, [r4, #30]
   28068:	f88d 3012 	strb.w	r3, [sp, #18]
    return ble_gap_rx_conn_complete(&evt, 0);
   2806c:	2100      	movs	r1, #0
   2806e:	4668      	mov	r0, sp
   28070:	f7fa f884 	bl	2217c <ble_gap_rx_conn_complete>
}
   28074:	b008      	add	sp, #32
   28076:	bd10      	pop	{r4, pc}

00028078 <ble_hs_hci_evt_le_conn_complete>:
    if (len != sizeof(*ev)) {
   28078:	2a13      	cmp	r2, #19
   2807a:	d001      	beq.n	28080 <ble_hs_hci_evt_le_conn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   2807c:	200c      	movs	r0, #12
}
   2807e:	4770      	bx	lr
{
   28080:	b510      	push	{r4, lr}
   28082:	b088      	sub	sp, #32
   28084:	460c      	mov	r4, r1
    memset(&evt, 0, sizeof(evt));
   28086:	2220      	movs	r2, #32
   28088:	2100      	movs	r1, #0
   2808a:	4668      	mov	r0, sp
   2808c:	f7f2 fe17 	bl	1acbe <memset>
    evt.status = ev->status;
   28090:	7863      	ldrb	r3, [r4, #1]
   28092:	f88d 3000 	strb.w	r3, [sp]
    if (evt.status == BLE_ERR_SUCCESS) {
   28096:	b9e3      	cbnz	r3, 280d2 <ble_hs_hci_evt_le_conn_complete+0x5a>
        evt.connection_handle = le16toh(ev->conn_handle);
   28098:	8863      	ldrh	r3, [r4, #2]
   2809a:	f8ad 3002 	strh.w	r3, [sp, #2]
        evt.role = ev->role;
   2809e:	7923      	ldrb	r3, [r4, #4]
   280a0:	f88d 3004 	strb.w	r3, [sp, #4]
        evt.peer_addr_type = ev->peer_addr_type;
   280a4:	7963      	ldrb	r3, [r4, #5]
   280a6:	f88d 3005 	strb.w	r3, [sp, #5]
        memcpy(evt.peer_addr, ev->peer_addr, BLE_DEV_ADDR_LEN);
   280aa:	4623      	mov	r3, r4
   280ac:	f853 2f06 	ldr.w	r2, [r3, #6]!
   280b0:	f8cd 2006 	str.w	r2, [sp, #6]
   280b4:	889b      	ldrh	r3, [r3, #4]
   280b6:	f8ad 300a 	strh.w	r3, [sp, #10]
        evt.conn_itvl = le16toh(ev->conn_itvl);
   280ba:	89a3      	ldrh	r3, [r4, #12]
   280bc:	f8ad 300c 	strh.w	r3, [sp, #12]
        evt.conn_latency = le16toh(ev->conn_latency);
   280c0:	89e3      	ldrh	r3, [r4, #14]
   280c2:	f8ad 300e 	strh.w	r3, [sp, #14]
        evt.supervision_timeout = le16toh(ev->supervision_timeout);
   280c6:	8a23      	ldrh	r3, [r4, #16]
   280c8:	f8ad 3010 	strh.w	r3, [sp, #16]
        evt.master_clk_acc = ev->mca;
   280cc:	7ca3      	ldrb	r3, [r4, #18]
   280ce:	f88d 3012 	strb.w	r3, [sp, #18]
    return ble_gap_rx_conn_complete(&evt, 0);
   280d2:	2100      	movs	r1, #0
   280d4:	4668      	mov	r0, sp
   280d6:	f7fa f851 	bl	2217c <ble_gap_rx_conn_complete>
}
   280da:	b008      	add	sp, #32
   280dc:	bd10      	pop	{r4, pc}

000280de <ble_hs_hci_evt_le_conn_parm_req>:
    if (len != sizeof(*ev)) {
   280de:	2a0b      	cmp	r2, #11
   280e0:	d001      	beq.n	280e6 <ble_hs_hci_evt_le_conn_parm_req+0x8>
        return BLE_HS_ECONTROLLER;
   280e2:	200c      	movs	r0, #12
}
   280e4:	4770      	bx	lr
{
   280e6:	b508      	push	{r3, lr}
    ble_gap_rx_param_req(ev);
   280e8:	4608      	mov	r0, r1
   280ea:	f7fa fcb7 	bl	22a5c <ble_gap_rx_param_req>
    return 0;
   280ee:	2000      	movs	r0, #0
}
   280f0:	bd08      	pop	{r3, pc}

000280f2 <ble_hs_hci_evt_le_rd_rem_used_feat_complete>:
    if (len != sizeof(*ev)) {
   280f2:	2a0c      	cmp	r2, #12
   280f4:	d001      	beq.n	280fa <ble_hs_hci_evt_le_rd_rem_used_feat_complete+0x8>
        return BLE_HS_ECONTROLLER;
   280f6:	200c      	movs	r0, #12
}
   280f8:	4770      	bx	lr
{
   280fa:	b508      	push	{r3, lr}
    ble_gap_rx_rd_rem_sup_feat_complete(ev);
   280fc:	4608      	mov	r0, r1
   280fe:	f7f9 fe95 	bl	21e2c <ble_gap_rx_rd_rem_sup_feat_complete>
    return 0;
   28102:	2000      	movs	r0, #0
}
   28104:	bd08      	pop	{r3, pc}

00028106 <ble_hs_hci_evt_le_conn_upd_complete>:
    if (len != sizeof(*ev)) {
   28106:	2a0a      	cmp	r2, #10
   28108:	d001      	beq.n	2810e <ble_hs_hci_evt_le_conn_upd_complete+0x8>
        return BLE_HS_ECONTROLLER;
   2810a:	200c      	movs	r0, #12
}
   2810c:	4770      	bx	lr
{
   2810e:	b508      	push	{r3, lr}
    ble_gap_rx_update_complete(ev);
   28110:	4608      	mov	r0, r1
   28112:	f7fa fc09 	bl	22928 <ble_gap_rx_update_complete>
    return 0;
   28116:	2000      	movs	r0, #0
}
   28118:	bd08      	pop	{r3, pc}
	...

0002811c <ble_hs_hci_evt_process>:
#endif

int
ble_hs_hci_evt_process(const struct ble_hci_ev *ev)
{
   2811c:	b538      	push	{r3, r4, r5, lr}
   2811e:	4604      	mov	r4, r0
    const struct ble_hs_hci_evt_dispatch_entry *entry;
    int rc;

    /* Count events received */
    STATS_INC(ble_hs_stats, hci_event);
   28120:	4a0c      	ldr	r2, [pc, #48]	; (28154 <ble_hs_hci_evt_process+0x38>)
   28122:	6993      	ldr	r3, [r2, #24]
   28124:	3301      	adds	r3, #1
   28126:	6193      	str	r3, [r2, #24]


    entry = ble_hs_hci_evt_dispatch_find(ev->opcode);
   28128:	7805      	ldrb	r5, [r0, #0]
   2812a:	4628      	mov	r0, r5
   2812c:	f7ff fe0c 	bl	27d48 <ble_hs_hci_evt_dispatch_find>
    if (entry == NULL) {
   28130:	b150      	cbz	r0, 28148 <ble_hs_hci_evt_process+0x2c>
        STATS_INC(ble_hs_stats, hci_unknown_event);
        rc = BLE_HS_ENOTSUP;
    } else {
        rc = entry->cb(ev->opcode, ev->data, ev->length);
   28132:	6843      	ldr	r3, [r0, #4]
   28134:	7862      	ldrb	r2, [r4, #1]
   28136:	1ca1      	adds	r1, r4, #2
   28138:	4628      	mov	r0, r5
   2813a:	4798      	blx	r3
   2813c:	4605      	mov	r5, r0
    }

    ble_hci_trans_buf_free((uint8_t *) ev);
   2813e:	4620      	mov	r0, r4
   28140:	f002 fc04 	bl	2a94c <ble_hci_trans_buf_free>

    return rc;
}
   28144:	4628      	mov	r0, r5
   28146:	bd38      	pop	{r3, r4, r5, pc}
        STATS_INC(ble_hs_stats, hci_unknown_event);
   28148:	4a02      	ldr	r2, [pc, #8]	; (28154 <ble_hs_hci_evt_process+0x38>)
   2814a:	6a13      	ldr	r3, [r2, #32]
   2814c:	3301      	adds	r3, #1
   2814e:	6213      	str	r3, [r2, #32]
        rc = BLE_HS_ENOTSUP;
   28150:	2508      	movs	r5, #8
   28152:	e7f4      	b.n	2813e <ble_hs_hci_evt_process+0x22>
   28154:	10005e44 	.word	0x10005e44

00028158 <ble_hs_hci_evt_acl_process>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_hci_evt_acl_process(struct os_mbuf *om)
{
   28158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2815c:	b086      	sub	sp, #24
   2815e:	4604      	mov	r4, r0
    ble_l2cap_rx_fn *rx_cb;
    uint16_t conn_handle;
    int reject_cid;
    int rc;

    rc = ble_hs_hci_util_data_hdr_strip(om, &hci_hdr);
   28160:	a905      	add	r1, sp, #20
   28162:	f000 f8c9 	bl	282f8 <ble_hs_hci_util_data_hdr_strip>
    if (rc != 0) {
   28166:	4605      	mov	r5, r0
   28168:	b130      	cbz	r0, 28178 <ble_hs_hci_evt_acl_process+0x20>
    }

    return 0;

err:
    os_mbuf_free_chain(om);
   2816a:	4620      	mov	r0, r4
   2816c:	f7f1 fa4f 	bl	1960e <os_mbuf_free_chain>
    return rc;
#else
    return BLE_HS_ENOTSUP;
#endif
}
   28170:	4628      	mov	r0, r5
   28172:	b006      	add	sp, #24
   28174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_log_mbuf(om);
   28178:	4620      	mov	r0, r4
   2817a:	f000 f999 	bl	284b0 <ble_hs_log_mbuf>
    if (hci_hdr.hdh_len != OS_MBUF_PKTHDR(om)->omp_len) {
   2817e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   28182:	8a23      	ldrh	r3, [r4, #16]
   28184:	429a      	cmp	r2, r3
   28186:	d001      	beq.n	2818c <ble_hs_hci_evt_acl_process+0x34>
        rc = BLE_HS_EBADDATA;
   28188:	250a      	movs	r5, #10
   2818a:	e7ee      	b.n	2816a <ble_hs_hci_evt_acl_process+0x12>
    conn_handle = BLE_HCI_DATA_HANDLE(hci_hdr.hdh_handle_pb_bc);
   2818c:	f8bd 7014 	ldrh.w	r7, [sp, #20]
   28190:	f3c7 070b 	ubfx	r7, r7, #0, #12
    ble_hs_lock();
   28194:	f7fe f9d0 	bl	26538 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   28198:	4638      	mov	r0, r7
   2819a:	f7ff fa51 	bl	27640 <ble_hs_conn_find>
    if (conn == NULL) {
   2819e:	4680      	mov	r8, r0
   281a0:	b198      	cbz	r0, 281ca <ble_hs_hci_evt_acl_process+0x72>
        rc = ble_l2cap_rx(conn, &hci_hdr, om, &rx_cb, &reject_cid);
   281a2:	ab03      	add	r3, sp, #12
   281a4:	9300      	str	r3, [sp, #0]
   281a6:	ab04      	add	r3, sp, #16
   281a8:	4622      	mov	r2, r4
   281aa:	a905      	add	r1, sp, #20
   281ac:	f000 fe71 	bl	28e92 <ble_l2cap_rx>
   281b0:	4606      	mov	r6, r0
        om = NULL;
   281b2:	2400      	movs	r4, #0
    ble_hs_unlock();
   281b4:	f7fe f9c4 	bl	26540 <ble_hs_unlock>
    switch (rc) {
   281b8:	b166      	cbz	r6, 281d4 <ble_hs_hci_evt_acl_process+0x7c>
   281ba:	2e01      	cmp	r6, #1
   281bc:	d0d8      	beq.n	28170 <ble_hs_hci_evt_acl_process+0x18>
        if (reject_cid != -1) {
   281be:	9b03      	ldr	r3, [sp, #12]
   281c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   281c4:	d111      	bne.n	281ea <ble_hs_hci_evt_acl_process+0x92>
        goto err;
   281c6:	4635      	mov	r5, r6
   281c8:	e7cf      	b.n	2816a <ble_hs_hci_evt_acl_process+0x12>
        reject_cid = -1;
   281ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   281ce:	9303      	str	r3, [sp, #12]
        rc = BLE_HS_ENOTCONN;
   281d0:	2607      	movs	r6, #7
   281d2:	e7ef      	b.n	281b4 <ble_hs_hci_evt_acl_process+0x5c>
        rc = rx_cb(conn->bhc_rx_chan);
   281d4:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
   281d8:	9b04      	ldr	r3, [sp, #16]
   281da:	4798      	blx	r3
        ble_l2cap_remove_rx(conn, conn->bhc_rx_chan);
   281dc:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
   281e0:	4640      	mov	r0, r8
   281e2:	f000 fe26 	bl	28e32 <ble_l2cap_remove_rx>
    return 0;
   281e6:	4635      	mov	r5, r6
        break;
   281e8:	e7c2      	b.n	28170 <ble_hs_hci_evt_acl_process+0x18>
            ble_l2cap_sig_reject_invalid_cid_tx(conn_handle, 0, 0, reject_cid);
   281ea:	b29b      	uxth	r3, r3
   281ec:	2200      	movs	r2, #0
   281ee:	4611      	mov	r1, r2
   281f0:	4638      	mov	r0, r7
   281f2:	f001 f9c9 	bl	29588 <ble_l2cap_sig_reject_invalid_cid_tx>
   281f6:	e7e6      	b.n	281c6 <ble_hs_hci_evt_acl_process+0x6e>

000281f8 <ble_hs_hci_util_handle_pb_bc_join>:
{
    BLE_HS_DBG_ASSERT(handle <= 0x0fff);
    BLE_HS_DBG_ASSERT(pb <= 0x03);
    BLE_HS_DBG_ASSERT(bc <= 0x03);

    return (handle  << 0)   |
   281f8:	ea40 3001 	orr.w	r0, r0, r1, lsl #12
   281fc:	b200      	sxth	r0, r0
           (pb      << 12)  |
   281fe:	ea40 3082 	orr.w	r0, r0, r2, lsl #14
           (bc      << 14);
}
   28202:	b280      	uxth	r0, r0
   28204:	4770      	bx	lr
	...

00028208 <ble_hs_hci_util_read_adv_tx_pwr>:

int
ble_hs_hci_util_read_adv_tx_pwr(int8_t *out_tx_pwr)
{
   28208:	b530      	push	{r4, r5, lr}
   2820a:	b085      	sub	sp, #20
   2820c:	4604      	mov	r4, r0
    struct ble_hci_le_rd_adv_chan_txpwr_rp rsp;
    int rc;

    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2820e:	2301      	movs	r3, #1
   28210:	9300      	str	r3, [sp, #0]
   28212:	ab03      	add	r3, sp, #12
   28214:	2200      	movs	r2, #0
   28216:	4611      	mov	r1, r2
   28218:	f242 0007 	movw	r0, #8199	; 0x2007
   2821c:	f7ff fc60 	bl	27ae0 <ble_hs_hci_cmd_tx>
                                      BLE_HCI_OCF_LE_RD_ADV_CHAN_TXPWR),
                           NULL, 0, &rsp, sizeof(rsp));
    if (rc != 0) {
   28220:	4605      	mov	r5, r0
   28222:	b930      	cbnz	r0, 28232 <ble_hs_hci_util_read_adv_tx_pwr+0x2a>
        return rc;
    }

    *out_tx_pwr = rsp.power_level;
   28224:	f99d 300c 	ldrsb.w	r3, [sp, #12]
   28228:	7023      	strb	r3, [r4, #0]

    if (*out_tx_pwr < BLE_HCI_ADV_CHAN_TXPWR_MIN ||
   2822a:	3314      	adds	r3, #20
   2822c:	b2db      	uxtb	r3, r3
   2822e:	2b1e      	cmp	r3, #30
   28230:	d802      	bhi.n	28238 <ble_hs_hci_util_read_adv_tx_pwr+0x30>
        *out_tx_pwr > BLE_HCI_ADV_CHAN_TXPWR_MAX) {
        BLE_HS_LOG(WARN, "advertiser txpwr out of range\n");
    }

    return 0;
}
   28232:	4628      	mov	r0, r5
   28234:	b005      	add	sp, #20
   28236:	bd30      	pop	{r4, r5, pc}
        BLE_HS_LOG(WARN, "advertiser txpwr out of range\n");
   28238:	4a02      	ldr	r2, [pc, #8]	; (28244 <ble_hs_hci_util_read_adv_tx_pwr+0x3c>)
   2823a:	2102      	movs	r1, #2
   2823c:	2004      	movs	r0, #4
   2823e:	f7f4 fd6d 	bl	1cd1c <modlog_printf>
   28242:	e7f6      	b.n	28232 <ble_hs_hci_util_read_adv_tx_pwr+0x2a>
   28244:	00034f4c 	.word	0x00034f4c

00028248 <ble_hs_hci_util_read_rssi>:
    return 0;
}

int
ble_hs_hci_util_read_rssi(uint16_t conn_handle, int8_t *out_rssi)
{
   28248:	b530      	push	{r4, r5, lr}
   2824a:	b085      	sub	sp, #20
   2824c:	4604      	mov	r4, r0
   2824e:	460d      	mov	r5, r1
    struct ble_hci_rd_rssi_cp cmd;
    struct ble_hci_rd_rssi_rp rsp;

    int rc;

    cmd.handle = htole16(conn_handle);
   28250:	f8ad 000c 	strh.w	r0, [sp, #12]

    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_STATUS_PARAMS,
   28254:	2303      	movs	r3, #3
   28256:	9300      	str	r3, [sp, #0]
   28258:	ab02      	add	r3, sp, #8
   2825a:	2202      	movs	r2, #2
   2825c:	a903      	add	r1, sp, #12
   2825e:	f241 4005 	movw	r0, #5125	; 0x1405
   28262:	f7ff fc3d 	bl	27ae0 <ble_hs_hci_cmd_tx>
                                      BLE_HCI_OCF_RD_RSSI), &cmd, sizeof(cmd),
                           &rsp, sizeof(rsp));
    if (rc != 0) {
   28266:	b930      	cbnz	r0, 28276 <ble_hs_hci_util_read_rssi+0x2e>
        return rc;
    }

    if (le16toh(rsp.handle) != conn_handle) {
   28268:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   2826c:	42a3      	cmp	r3, r4
   2826e:	d104      	bne.n	2827a <ble_hs_hci_util_read_rssi+0x32>
        return BLE_HS_ECONTROLLER;
    }

    *out_rssi = rsp.rssi;
   28270:	f99d 300a 	ldrsb.w	r3, [sp, #10]
   28274:	702b      	strb	r3, [r5, #0]

    return 0;
}
   28276:	b005      	add	sp, #20
   28278:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ECONTROLLER;
   2827a:	200c      	movs	r0, #12
   2827c:	e7fb      	b.n	28276 <ble_hs_hci_util_read_rssi+0x2e>

0002827e <ble_hs_hci_util_set_random_addr>:

int
ble_hs_hci_util_set_random_addr(const uint8_t *addr)
{
   2827e:	b500      	push	{lr}
   28280:	b085      	sub	sp, #20
   28282:	4603      	mov	r3, r0
    struct ble_hci_le_set_rand_addr_cp cmd;

    memcpy(cmd.addr, addr, BLE_DEV_ADDR_LEN);
   28284:	6800      	ldr	r0, [r0, #0]
   28286:	9002      	str	r0, [sp, #8]
   28288:	889b      	ldrh	r3, [r3, #4]
   2828a:	f8ad 300c 	strh.w	r3, [sp, #12]

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2828e:	2300      	movs	r3, #0
   28290:	9300      	str	r3, [sp, #0]
   28292:	2206      	movs	r2, #6
   28294:	a902      	add	r1, sp, #8
   28296:	f242 0005 	movw	r0, #8197	; 0x2005
   2829a:	f7ff fc21 	bl	27ae0 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_SET_RAND_ADDR),
                             &cmd, sizeof(cmd), NULL, 0);
}
   2829e:	b005      	add	sp, #20
   282a0:	f85d fb04 	ldr.w	pc, [sp], #4

000282a4 <ble_hs_hci_util_set_data_len>:
{
    struct ble_hci_le_set_data_len_cp cmd;
    struct ble_hci_le_set_data_len_rp rsp;
    int rc;

    if (tx_octets < BLE_HCI_SET_DATALEN_TX_OCTETS_MIN ||
   282a4:	f1a1 031b 	sub.w	r3, r1, #27
   282a8:	b29b      	uxth	r3, r3
   282aa:	2be0      	cmp	r3, #224	; 0xe0
   282ac:	d81f      	bhi.n	282ee <ble_hs_hci_util_set_data_len+0x4a>
{
   282ae:	b510      	push	{r4, lr}
   282b0:	b086      	sub	sp, #24
   282b2:	4604      	mov	r4, r0
        tx_octets > BLE_HCI_SET_DATALEN_TX_OCTETS_MAX) {
        return BLE_HS_EINVAL;
    }

    if (tx_time < BLE_HCI_SET_DATALEN_TX_TIME_MIN ||
   282b4:	f5a2 73a4 	sub.w	r3, r2, #328	; 0x148
   282b8:	b29b      	uxth	r3, r3
   282ba:	f244 1048 	movw	r0, #16712	; 0x4148
   282be:	4283      	cmp	r3, r0
   282c0:	d817      	bhi.n	282f2 <ble_hs_hci_util_set_data_len+0x4e>
        tx_time > BLE_HCI_SET_DATALEN_TX_TIME_MAX) {
        return BLE_HS_EINVAL;
    }

    cmd.conn_handle = htole16(conn_handle);
   282c2:	f8ad 4010 	strh.w	r4, [sp, #16]
    cmd.tx_octets = htole16(tx_octets);
   282c6:	f8ad 1012 	strh.w	r1, [sp, #18]
    cmd.tx_time = htole16(tx_time);
   282ca:	f8ad 2014 	strh.w	r2, [sp, #20]

    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   282ce:	2302      	movs	r3, #2
   282d0:	9300      	str	r3, [sp, #0]
   282d2:	ab03      	add	r3, sp, #12
   282d4:	2206      	movs	r2, #6
   282d6:	a904      	add	r1, sp, #16
   282d8:	f242 0022 	movw	r0, #8226	; 0x2022
   282dc:	f7ff fc00 	bl	27ae0 <ble_hs_hci_cmd_tx>
                                      BLE_HCI_OCF_LE_SET_DATA_LEN),
                           &cmd, sizeof(cmd), &rsp, sizeof(rsp));
    if (rc != 0) {
   282e0:	b940      	cbnz	r0, 282f4 <ble_hs_hci_util_set_data_len+0x50>
        return rc;
    }

    if (le16toh(rsp.conn_handle) != conn_handle) {
   282e2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   282e6:	42a3      	cmp	r3, r4
   282e8:	d004      	beq.n	282f4 <ble_hs_hci_util_set_data_len+0x50>
        return BLE_HS_ECONTROLLER;
   282ea:	200c      	movs	r0, #12
   282ec:	e002      	b.n	282f4 <ble_hs_hci_util_set_data_len+0x50>
        return BLE_HS_EINVAL;
   282ee:	2003      	movs	r0, #3
    }

    return 0;
}
   282f0:	4770      	bx	lr
        return BLE_HS_EINVAL;
   282f2:	2003      	movs	r0, #3
}
   282f4:	b006      	add	sp, #24
   282f6:	bd10      	pop	{r4, pc}

000282f8 <ble_hs_hci_util_data_hdr_strip>:

int
ble_hs_hci_util_data_hdr_strip(struct os_mbuf *om,
                               struct hci_data_hdr *out_hdr)
{
   282f8:	b570      	push	{r4, r5, r6, lr}
   282fa:	4605      	mov	r5, r0
   282fc:	460c      	mov	r4, r1
    int rc;

    rc = os_mbuf_copydata(om, 0, BLE_HCI_DATA_HDR_SZ, out_hdr);
   282fe:	460b      	mov	r3, r1
   28300:	2204      	movs	r2, #4
   28302:	2100      	movs	r1, #0
   28304:	f7f1 fa24 	bl	19750 <os_mbuf_copydata>
    if (rc != 0) {
   28308:	b980      	cbnz	r0, 2832c <ble_hs_hci_util_data_hdr_strip+0x34>
   2830a:	4606      	mov	r6, r0
        return BLE_HS_ECONTROLLER;
    }

    /* Strip HCI ACL data header from the front of the packet. */
    os_mbuf_adj(om, BLE_HCI_DATA_HDR_SZ);
   2830c:	2104      	movs	r1, #4
   2830e:	4628      	mov	r0, r5
   28310:	f7f1 fa4b 	bl	197aa <os_mbuf_adj>

    out_hdr->hdh_handle_pb_bc = get_le16(&out_hdr->hdh_handle_pb_bc);
   28314:	4620      	mov	r0, r4
   28316:	f7f0 fd81 	bl	18e1c <get_le16>
   2831a:	4623      	mov	r3, r4
   2831c:	f823 0b02 	strh.w	r0, [r3], #2
    out_hdr->hdh_len = get_le16(&out_hdr->hdh_len);
   28320:	4618      	mov	r0, r3
   28322:	f7f0 fd7b 	bl	18e1c <get_le16>
   28326:	8060      	strh	r0, [r4, #2]

    return 0;
}
   28328:	4630      	mov	r0, r6
   2832a:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   2832c:	260c      	movs	r6, #12
   2832e:	e7fb      	b.n	28328 <ble_hs_hci_util_data_hdr_strip+0x30>

00028330 <ble_hs_id_set_pub>:
static uint8_t ble_hs_id_pub[6];
static uint8_t ble_hs_id_rnd[6];

void
ble_hs_id_set_pub(const uint8_t *pub_addr)
{
   28330:	b510      	push	{r4, lr}
   28332:	4604      	mov	r4, r0
    ble_hs_lock();
   28334:	f7fe f900 	bl	26538 <ble_hs_lock>
    memcpy(ble_hs_id_pub, pub_addr, 6);
   28338:	4b03      	ldr	r3, [pc, #12]	; (28348 <ble_hs_id_set_pub+0x18>)
   2833a:	6820      	ldr	r0, [r4, #0]
   2833c:	6018      	str	r0, [r3, #0]
   2833e:	88a2      	ldrh	r2, [r4, #4]
   28340:	809a      	strh	r2, [r3, #4]
    ble_hs_unlock();
   28342:	f7fe f8fd 	bl	26540 <ble_hs_unlock>
}
   28346:	bd10      	pop	{r4, pc}
   28348:	10006110 	.word	0x10006110

0002834c <ble_hs_id_set_rnd>:
    return 0;
}

int
ble_hs_id_set_rnd(const uint8_t *rnd_addr)
{
   2834c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2834e:	4604      	mov	r4, r0
    uint8_t addr_type_byte;
    int rc;
    int ones;

    ble_hs_lock();
   28350:	f7fe f8f2 	bl	26538 <ble_hs_lock>

    /* Make sure random part of rnd_addr is not all ones or zeros. Reference:
     * Core v5.0, Vol 6, Part B, section 1.3.2.1 */
    addr_type_byte = rnd_addr[5] & 0xc0;
   28354:	7967      	ldrb	r7, [r4, #5]
   28356:	f007 06c0 	and.w	r6, r7, #192	; 0xc0

    /* count bits set to 1 in random part of address */
    ones = __builtin_popcount(rnd_addr[0]);
   2835a:	7820      	ldrb	r0, [r4, #0]
   2835c:	f7eb ffee 	bl	1433c <__popcountsi2>
   28360:	4605      	mov	r5, r0
    ones += __builtin_popcount(rnd_addr[1]);
   28362:	7860      	ldrb	r0, [r4, #1]
   28364:	f7eb ffea 	bl	1433c <__popcountsi2>
   28368:	4405      	add	r5, r0
    ones += __builtin_popcount(rnd_addr[2]);
   2836a:	78a0      	ldrb	r0, [r4, #2]
   2836c:	f7eb ffe6 	bl	1433c <__popcountsi2>
   28370:	4405      	add	r5, r0
    ones += __builtin_popcount(rnd_addr[3]);
   28372:	78e0      	ldrb	r0, [r4, #3]
   28374:	f7eb ffe2 	bl	1433c <__popcountsi2>
   28378:	4405      	add	r5, r0
    ones += __builtin_popcount(rnd_addr[4]);
   2837a:	7920      	ldrb	r0, [r4, #4]
   2837c:	f7eb ffde 	bl	1433c <__popcountsi2>
   28380:	4405      	add	r5, r0
    ones += __builtin_popcount(rnd_addr[5] & 0x3f);
   28382:	f007 003f 	and.w	r0, r7, #63	; 0x3f
   28386:	f7eb ffd9 	bl	1433c <__popcountsi2>
   2838a:	4428      	add	r0, r5

    if ((addr_type_byte != 0x00 && addr_type_byte != 0xc0) ||
   2838c:	b10e      	cbz	r6, 28392 <ble_hs_id_set_rnd+0x46>
   2838e:	2ec0      	cmp	r6, #192	; 0xc0
   28390:	d110      	bne.n	283b4 <ble_hs_id_set_rnd+0x68>
   28392:	b188      	cbz	r0, 283b8 <ble_hs_id_set_rnd+0x6c>
            (ones == 0 || ones == 46)) {
   28394:	282e      	cmp	r0, #46	; 0x2e
   28396:	d011      	beq.n	283bc <ble_hs_id_set_rnd+0x70>
        rc = BLE_HS_EINVAL;
        goto done;
    }

    rc = ble_hs_hci_util_set_random_addr(rnd_addr);
   28398:	4620      	mov	r0, r4
   2839a:	f7ff ff70 	bl	2827e <ble_hs_hci_util_set_random_addr>
    if (rc != 0) {
   2839e:	4605      	mov	r5, r0
   283a0:	b920      	cbnz	r0, 283ac <ble_hs_id_set_rnd+0x60>
        goto done;
    }

    memcpy(ble_hs_id_rnd, rnd_addr, 6);
   283a2:	4b07      	ldr	r3, [pc, #28]	; (283c0 <ble_hs_id_set_rnd+0x74>)
   283a4:	6820      	ldr	r0, [r4, #0]
   283a6:	6018      	str	r0, [r3, #0]
   283a8:	88a2      	ldrh	r2, [r4, #4]
   283aa:	809a      	strh	r2, [r3, #4]

done:
    ble_hs_unlock();
   283ac:	f7fe f8c8 	bl	26540 <ble_hs_unlock>
    return rc;
}
   283b0:	4628      	mov	r0, r5
   283b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = BLE_HS_EINVAL;
   283b4:	2503      	movs	r5, #3
   283b6:	e7f9      	b.n	283ac <ble_hs_id_set_rnd+0x60>
   283b8:	2503      	movs	r5, #3
   283ba:	e7f7      	b.n	283ac <ble_hs_id_set_rnd+0x60>
   283bc:	2503      	movs	r5, #3
   283be:	e7f5      	b.n	283ac <ble_hs_id_set_rnd+0x60>
   283c0:	10006118 	.word	0x10006118

000283c4 <ble_hs_id_addr>:
 *                              Other BLE host core code on error.
 */
int
ble_hs_id_addr(uint8_t id_addr_type, const uint8_t **out_id_addr,
               int *out_is_nrpa)
{
   283c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   283c6:	460e      	mov	r6, r1
   283c8:	4615      	mov	r5, r2
    const uint8_t *id_addr;
    int nrpa;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    switch (id_addr_type) {
   283ca:	b148      	cbz	r0, 283e0 <ble_hs_id_addr+0x1c>
   283cc:	2801      	cmp	r0, #1
   283ce:	d115      	bne.n	283fc <ble_hs_id_addr+0x38>
        nrpa = 0;
        break;

    case BLE_ADDR_RANDOM:
        id_addr = ble_hs_id_rnd;
        nrpa = (ble_hs_id_rnd[5] & 0xc0) == 0;
   283d0:	4c0d      	ldr	r4, [pc, #52]	; (28408 <ble_hs_id_addr+0x44>)
   283d2:	7963      	ldrb	r3, [r4, #5]
   283d4:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   283d8:	bf0c      	ite	eq
   283da:	2701      	moveq	r7, #1
   283dc:	2700      	movne	r7, #0
        break;
   283de:	e001      	b.n	283e4 <ble_hs_id_addr+0x20>
    switch (id_addr_type) {
   283e0:	2700      	movs	r7, #0
   283e2:	4c0a      	ldr	r4, [pc, #40]	; (2840c <ble_hs_id_addr+0x48>)

    default:
        return BLE_HS_EINVAL;
    }

    if (memcmp(id_addr, ble_hs_misc_null_addr, 6) == 0) {
   283e4:	2206      	movs	r2, #6
   283e6:	490a      	ldr	r1, [pc, #40]	; (28410 <ble_hs_id_addr+0x4c>)
   283e8:	4620      	mov	r0, r4
   283ea:	f7f2 fc1f 	bl	1ac2c <memcmp>
   283ee:	b138      	cbz	r0, 28400 <ble_hs_id_addr+0x3c>
        return BLE_HS_ENOADDR;
    }

    if (out_id_addr != NULL) {
   283f0:	b106      	cbz	r6, 283f4 <ble_hs_id_addr+0x30>
        *out_id_addr = id_addr;
   283f2:	6034      	str	r4, [r6, #0]
    }
    if (out_is_nrpa != NULL) {
   283f4:	b135      	cbz	r5, 28404 <ble_hs_id_addr+0x40>
        *out_is_nrpa = nrpa;
   283f6:	602f      	str	r7, [r5, #0]
    }

    return 0;
   283f8:	2000      	movs	r0, #0
   283fa:	e000      	b.n	283fe <ble_hs_id_addr+0x3a>
    switch (id_addr_type) {
   283fc:	2003      	movs	r0, #3
}
   283fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOADDR;
   28400:	2015      	movs	r0, #21
   28402:	e7fc      	b.n	283fe <ble_hs_id_addr+0x3a>
    return 0;
   28404:	2000      	movs	r0, #0
   28406:	e7fa      	b.n	283fe <ble_hs_id_addr+0x3a>
   28408:	10006118 	.word	0x10006118
   2840c:	10006110 	.word	0x10006110
   28410:	00034f90 	.word	0x00034f90

00028414 <ble_hs_id_addr_type_usable>:
    return rc;
}

static int
ble_hs_id_addr_type_usable(uint8_t own_addr_type)
{
   28414:	b500      	push	{lr}
   28416:	b083      	sub	sp, #12
    uint8_t id_addr_type;
    int nrpa;
    int rc;

    switch (own_addr_type) {
   28418:	2801      	cmp	r0, #1
   2841a:	d90e      	bls.n	2843a <ble_hs_id_addr_type_usable+0x26>
   2841c:	1e83      	subs	r3, r0, #2
   2841e:	b2db      	uxtb	r3, r3
   28420:	2b01      	cmp	r3, #1
   28422:	d80f      	bhi.n	28444 <ble_hs_id_addr_type_usable+0x30>
        }
        break;

    case BLE_OWN_ADDR_RPA_PUBLIC_DEFAULT:
    case BLE_OWN_ADDR_RPA_RANDOM_DEFAULT:
        id_addr_type = ble_hs_misc_own_addr_type_to_id(own_addr_type);
   28424:	f000 f903 	bl	2862e <ble_hs_misc_own_addr_type_to_id>
        rc = ble_hs_id_addr(id_addr_type, NULL, &nrpa);
   28428:	aa01      	add	r2, sp, #4
   2842a:	2100      	movs	r1, #0
   2842c:	f7ff ffca 	bl	283c4 <ble_hs_id_addr>
        if (rc != 0) {
   28430:	b948      	cbnz	r0, 28446 <ble_hs_id_addr_type_usable+0x32>
            return rc;
        }
        if (nrpa) {
   28432:	9801      	ldr	r0, [sp, #4]
   28434:	b138      	cbz	r0, 28446 <ble_hs_id_addr_type_usable+0x32>
            return BLE_HS_ENOADDR;
   28436:	2015      	movs	r0, #21
   28438:	e005      	b.n	28446 <ble_hs_id_addr_type_usable+0x32>
        rc = ble_hs_id_addr(own_addr_type, NULL, NULL);
   2843a:	2200      	movs	r2, #0
   2843c:	4611      	mov	r1, r2
   2843e:	f7ff ffc1 	bl	283c4 <ble_hs_id_addr>
        if (rc != 0) {
   28442:	e000      	b.n	28446 <ble_hs_id_addr_type_usable+0x32>
    switch (own_addr_type) {
   28444:	2003      	movs	r0, #3
    default:
        return BLE_HS_EINVAL;
    }

    return 0;
}
   28446:	b003      	add	sp, #12
   28448:	f85d fb04 	ldr.w	pc, [sp], #4

0002844c <ble_hs_id_copy_addr>:
{
   2844c:	b570      	push	{r4, r5, r6, lr}
   2844e:	b082      	sub	sp, #8
   28450:	4605      	mov	r5, r0
   28452:	460c      	mov	r4, r1
   28454:	4616      	mov	r6, r2
    ble_hs_lock();
   28456:	f7fe f86f 	bl	26538 <ble_hs_lock>
    rc = ble_hs_id_addr(id_addr_type, &addr, out_is_nrpa);
   2845a:	4632      	mov	r2, r6
   2845c:	a901      	add	r1, sp, #4
   2845e:	4628      	mov	r0, r5
   28460:	f7ff ffb0 	bl	283c4 <ble_hs_id_addr>
    if (rc == 0 && out_id_addr != NULL) {
   28464:	4605      	mov	r5, r0
   28466:	b928      	cbnz	r0, 28474 <ble_hs_id_copy_addr+0x28>
   28468:	b124      	cbz	r4, 28474 <ble_hs_id_copy_addr+0x28>
        memcpy(out_id_addr, addr, 6);
   2846a:	9b01      	ldr	r3, [sp, #4]
   2846c:	681a      	ldr	r2, [r3, #0]
   2846e:	6022      	str	r2, [r4, #0]
   28470:	889b      	ldrh	r3, [r3, #4]
   28472:	80a3      	strh	r3, [r4, #4]
    ble_hs_unlock();
   28474:	f7fe f864 	bl	26540 <ble_hs_unlock>
}
   28478:	4628      	mov	r0, r5
   2847a:	b002      	add	sp, #8
   2847c:	bd70      	pop	{r4, r5, r6, pc}

0002847e <ble_hs_id_use_addr>:

int
ble_hs_id_use_addr(uint8_t own_addr_type)
{
   2847e:	b510      	push	{r4, lr}
   28480:	4604      	mov	r4, r0
    int rc;

    rc = ble_hs_id_addr_type_usable(own_addr_type);
   28482:	f7ff ffc7 	bl	28414 <ble_hs_id_addr_type_usable>
    if (rc != 0) {
   28486:	b918      	cbnz	r0, 28490 <ble_hs_id_use_addr+0x12>
        return rc;
    }

    /* If privacy is being used, make sure RPA rotation is in effect. */
    if (own_addr_type == BLE_OWN_ADDR_RPA_PUBLIC_DEFAULT ||
   28488:	3c02      	subs	r4, #2
   2848a:	b2e4      	uxtb	r4, r4
   2848c:	2c01      	cmp	r4, #1
   2848e:	d900      	bls.n	28492 <ble_hs_id_use_addr+0x14>
            return rc;
        }
    }

    return 0;
}
   28490:	bd10      	pop	{r4, pc}
        rc = ble_hs_pvcy_ensure_started();
   28492:	f000 f955 	bl	28740 <ble_hs_pvcy_ensure_started>
        if (rc != 0) {
   28496:	e7fb      	b.n	28490 <ble_hs_id_use_addr+0x12>

00028498 <ble_hs_id_reset>:
 * when the controller loses its random address (e.g., on a stack reset).
 */
void
ble_hs_id_reset(void)
{
    memset(ble_hs_id_pub, 0, sizeof ble_hs_id_pub);
   28498:	4a03      	ldr	r2, [pc, #12]	; (284a8 <ble_hs_id_reset+0x10>)
   2849a:	2300      	movs	r3, #0
   2849c:	6013      	str	r3, [r2, #0]
   2849e:	8093      	strh	r3, [r2, #4]
    memset(ble_hs_id_rnd, 0, sizeof ble_hs_id_pub);
   284a0:	4a02      	ldr	r2, [pc, #8]	; (284ac <ble_hs_id_reset+0x14>)
   284a2:	6013      	str	r3, [r2, #0]
   284a4:	8093      	strh	r3, [r2, #4]
}
   284a6:	4770      	bx	lr
   284a8:	10006110 	.word	0x10006110
   284ac:	10006118 	.word	0x10006118

000284b0 <ble_hs_log_mbuf>:

struct log ble_hs_log;

void
ble_hs_log_mbuf(const struct os_mbuf *om)
{
   284b0:	b530      	push	{r4, r5, lr}
   284b2:	b083      	sub	sp, #12
   284b4:	4605      	mov	r5, r0
    uint8_t u8;
    int i;

    for (i = 0; i < OS_MBUF_PKTLEN(om); i++) {
   284b6:	2400      	movs	r4, #0
   284b8:	8a2b      	ldrh	r3, [r5, #16]
   284ba:	42a3      	cmp	r3, r4
   284bc:	dd08      	ble.n	284d0 <ble_hs_log_mbuf+0x20>
        os_mbuf_copydata(om, i, 1, &u8);
   284be:	f10d 0307 	add.w	r3, sp, #7
   284c2:	2201      	movs	r2, #1
   284c4:	4621      	mov	r1, r4
   284c6:	4628      	mov	r0, r5
   284c8:	f7f1 f942 	bl	19750 <os_mbuf_copydata>
    for (i = 0; i < OS_MBUF_PKTLEN(om); i++) {
   284cc:	3401      	adds	r4, #1
   284ce:	e7f3      	b.n	284b8 <ble_hs_log_mbuf+0x8>
        BLE_HS_LOG(DEBUG, "0x%02x ", u8);
    }
}
   284d0:	b003      	add	sp, #12
   284d2:	bd30      	pop	{r4, r5, pc}

000284d4 <ble_hs_log_flat_buf>:
{
    const uint8_t *u8ptr;
    int i;

    u8ptr = data;
    for (i = 0; i < len; i++) {
   284d4:	2300      	movs	r3, #0
   284d6:	428b      	cmp	r3, r1
   284d8:	da01      	bge.n	284de <ble_hs_log_flat_buf+0xa>
   284da:	3301      	adds	r3, #1
   284dc:	e7fb      	b.n	284d6 <ble_hs_log_flat_buf+0x2>
        BLE_HS_LOG(DEBUG, "0x%02x ", u8ptr[i]);
    }
}
   284de:	4770      	bx	lr

000284e0 <ble_hs_mbuf_gen_pkt>:
/**
 * Allocates an mbuf for use by the nimble host.
 */
static struct os_mbuf *
ble_hs_mbuf_gen_pkt(uint16_t leading_space)
{
   284e0:	b510      	push	{r4, lr}
   284e2:	4604      	mov	r4, r0
    int rc;

#if MYNEWT_VAL(BLE_CONTROLLER)
    om = os_msys_get_pkthdr(0, sizeof(struct ble_mbuf_hdr));
#else
    om = os_msys_get_pkthdr(0, 0);
   284e4:	2100      	movs	r1, #0
   284e6:	4608      	mov	r0, r1
   284e8:	f7f1 fd9c 	bl	1a024 <os_msys_get_pkthdr>
#endif
    if (om == NULL) {
   284ec:	4603      	mov	r3, r0
   284ee:	b130      	cbz	r0, 284fe <ble_hs_mbuf_gen_pkt+0x1e>
        return NULL;
    }

    if (om->om_omp->omp_databuf_len < leading_space) {
   284f0:	6882      	ldr	r2, [r0, #8]
   284f2:	8812      	ldrh	r2, [r2, #0]
   284f4:	42a2      	cmp	r2, r4
   284f6:	d304      	bcc.n	28502 <ble_hs_mbuf_gen_pkt+0x22>
        rc = os_mbuf_free_chain(om);
        BLE_HS_DBG_ASSERT_EVAL(rc == 0);
        return NULL;
    }

    om->om_data += leading_space;
   284f8:	6800      	ldr	r0, [r0, #0]
   284fa:	4420      	add	r0, r4
   284fc:	6018      	str	r0, [r3, #0]

    return om;
}
   284fe:	4618      	mov	r0, r3
   28500:	bd10      	pop	{r4, pc}
        rc = os_mbuf_free_chain(om);
   28502:	f7f1 f884 	bl	1960e <os_mbuf_free_chain>
        return NULL;
   28506:	2300      	movs	r3, #0
   28508:	e7f9      	b.n	284fe <ble_hs_mbuf_gen_pkt+0x1e>

0002850a <ble_hs_mbuf_bare_pkt>:
 * @return                  An empty mbuf on success; null on memory
 *                              exhaustion.
 */
struct os_mbuf *
ble_hs_mbuf_bare_pkt(void)
{
   2850a:	b508      	push	{r3, lr}
    return ble_hs_mbuf_gen_pkt(0);
   2850c:	2000      	movs	r0, #0
   2850e:	f7ff ffe7 	bl	284e0 <ble_hs_mbuf_gen_pkt>
}
   28512:	bd08      	pop	{r3, pc}

00028514 <ble_hs_mbuf_acl_pkt>:
 * @return                  An empty mbuf on success; null on memory
 *                              exhaustion.
 */
struct os_mbuf *
ble_hs_mbuf_acl_pkt(void)
{
   28514:	b508      	push	{r3, lr}
    return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ);
   28516:	2004      	movs	r0, #4
   28518:	f7ff ffe2 	bl	284e0 <ble_hs_mbuf_gen_pkt>
}
   2851c:	bd08      	pop	{r3, pc}

0002851e <ble_hs_mbuf_l2cap_pkt>:
 * @return                  An empty mbuf on success; null on memory
 *                              exhaustion.
 */
struct os_mbuf *
ble_hs_mbuf_l2cap_pkt(void)
{
   2851e:	b508      	push	{r3, lr}
    return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ + BLE_L2CAP_HDR_SZ);
   28520:	2008      	movs	r0, #8
   28522:	f7ff ffdd 	bl	284e0 <ble_hs_mbuf_gen_pkt>
}
   28526:	bd08      	pop	{r3, pc}

00028528 <ble_hs_mbuf_att_pkt>:

struct os_mbuf *
ble_hs_mbuf_att_pkt(void)
{
   28528:	b508      	push	{r3, lr}
    /* Prepare write request and response are the larget ATT commands which
     * contain attribute data.
     */
     return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ +
   2852a:	200d      	movs	r0, #13
   2852c:	f7ff ffd8 	bl	284e0 <ble_hs_mbuf_gen_pkt>
                                BLE_L2CAP_HDR_SZ +
                                BLE_ATT_PREP_WRITE_CMD_BASE_SZ);
}
   28530:	bd08      	pop	{r3, pc}

00028532 <ble_hs_mbuf_from_flat>:

struct os_mbuf *
ble_hs_mbuf_from_flat(const void *buf, uint16_t len)
{
   28532:	b570      	push	{r4, r5, r6, lr}
   28534:	4604      	mov	r4, r0
   28536:	460d      	mov	r5, r1
    struct os_mbuf *om;
    int rc;

    om = ble_hs_mbuf_att_pkt();
   28538:	f7ff fff6 	bl	28528 <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
   2853c:	4606      	mov	r6, r0
   2853e:	b128      	cbz	r0, 2854c <ble_hs_mbuf_from_flat+0x1a>
        return NULL;
    }

    rc = os_mbuf_copyinto(om, 0, buf, len);
   28540:	462b      	mov	r3, r5
   28542:	4622      	mov	r2, r4
   28544:	2100      	movs	r1, #0
   28546:	f7f1 fa7f 	bl	19a48 <os_mbuf_copyinto>
    if (rc != 0) {
   2854a:	b908      	cbnz	r0, 28550 <ble_hs_mbuf_from_flat+0x1e>
        os_mbuf_free_chain(om);
        return NULL;
    }

    return om;
}
   2854c:	4630      	mov	r0, r6
   2854e:	bd70      	pop	{r4, r5, r6, pc}
        os_mbuf_free_chain(om);
   28550:	4630      	mov	r0, r6
   28552:	f7f1 f85c 	bl	1960e <os_mbuf_free_chain>
        return NULL;
   28556:	2600      	movs	r6, #0
   28558:	e7f8      	b.n	2854c <ble_hs_mbuf_from_flat+0x1a>

0002855a <ble_hs_mbuf_to_flat>:

int
ble_hs_mbuf_to_flat(const struct os_mbuf *om, void *flat, uint16_t max_len,
                    uint16_t *out_copy_len)
{
   2855a:	b570      	push	{r4, r5, r6, lr}
   2855c:	4614      	mov	r4, r2
   2855e:	461e      	mov	r6, r3
    uint16_t copy_len;
    int rc;

    if (OS_MBUF_PKTLEN(om) <= max_len) {
   28560:	8a05      	ldrh	r5, [r0, #16]
   28562:	4295      	cmp	r5, r2
   28564:	d900      	bls.n	28568 <ble_hs_mbuf_to_flat+0xe>
        copy_len = OS_MBUF_PKTLEN(om);
    } else {
        copy_len = max_len;
   28566:	4615      	mov	r5, r2
    }

    rc = os_mbuf_copydata(om, 0, copy_len, flat);
   28568:	460b      	mov	r3, r1
   2856a:	462a      	mov	r2, r5
   2856c:	2100      	movs	r1, #0
   2856e:	f7f1 f8ef 	bl	19750 <os_mbuf_copydata>
    if (rc != 0) {
   28572:	b928      	cbnz	r0, 28580 <ble_hs_mbuf_to_flat+0x26>
        return BLE_HS_EUNKNOWN;
    }

    if (copy_len > max_len) {
   28574:	42a5      	cmp	r5, r4
   28576:	d900      	bls.n	2857a <ble_hs_mbuf_to_flat+0x20>
        rc = BLE_HS_EMSGSIZE;
   28578:	2004      	movs	r0, #4
    } else {
        rc = 0;
    }

    if (out_copy_len != NULL) {
   2857a:	b106      	cbz	r6, 2857e <ble_hs_mbuf_to_flat+0x24>
        *out_copy_len = copy_len;
   2857c:	8035      	strh	r5, [r6, #0]
    }
    return rc;
}
   2857e:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EUNKNOWN;
   28580:	2011      	movs	r0, #17
   28582:	e7fc      	b.n	2857e <ble_hs_mbuf_to_flat+0x24>

00028584 <ble_hs_mbuf_pullup_base>:

int
ble_hs_mbuf_pullup_base(struct os_mbuf **om, int base_len)
{
   28584:	b510      	push	{r4, lr}
   28586:	4604      	mov	r4, r0
    if (OS_MBUF_PKTLEN(*om) < base_len) {
   28588:	6800      	ldr	r0, [r0, #0]
   2858a:	8a03      	ldrh	r3, [r0, #16]
   2858c:	428b      	cmp	r3, r1
   2858e:	db06      	blt.n	2859e <ble_hs_mbuf_pullup_base+0x1a>
        return BLE_HS_EBADDATA;
    }

    *om = os_mbuf_pullup(*om, base_len);
   28590:	b289      	uxth	r1, r1
   28592:	f7f1 faed 	bl	19b70 <os_mbuf_pullup>
   28596:	6020      	str	r0, [r4, #0]
    if (*om == NULL) {
   28598:	b118      	cbz	r0, 285a2 <ble_hs_mbuf_pullup_base+0x1e>
        return BLE_HS_ENOMEM;
    }

    return 0;
   2859a:	2000      	movs	r0, #0
}
   2859c:	bd10      	pop	{r4, pc}
        return BLE_HS_EBADDATA;
   2859e:	200a      	movs	r0, #10
   285a0:	e7fc      	b.n	2859c <ble_hs_mbuf_pullup_base+0x18>
        return BLE_HS_ENOMEM;
   285a2:	2006      	movs	r0, #6
   285a4:	e7fa      	b.n	2859c <ble_hs_mbuf_pullup_base+0x18>
	...

000285a8 <ble_hs_misc_restore_one_irk>:
}

static int
ble_hs_misc_restore_one_irk(int obj_type, union ble_store_value *val,
                            void *cookie)
{
   285a8:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(obj_type == BLE_STORE_OBJ_TYPE_PEER_SEC);

    sec = &val->sec;
    if (sec->irk_present) {
   285aa:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
   285ae:	f013 0f01 	tst.w	r3, #1
   285b2:	d101      	bne.n	285b8 <ble_hs_misc_restore_one_irk+0x10>
            BLE_HS_LOG(ERROR, "failed to configure restored IRK\n");
        }
    }

    return 0;
}
   285b4:	2000      	movs	r0, #0
   285b6:	bd08      	pop	{r3, pc}
   285b8:	4608      	mov	r0, r1
                                   sec->irk);
   285ba:	460a      	mov	r2, r1
        rc = ble_hs_pvcy_add_entry(sec->peer_addr.val, sec->peer_addr.type,
   285bc:	f812 1b29 	ldrb.w	r1, [r2], #41
   285c0:	3001      	adds	r0, #1
   285c2:	f000 f931 	bl	28828 <ble_hs_pvcy_add_entry>
        if (rc != 0) {
   285c6:	2800      	cmp	r0, #0
   285c8:	d0f4      	beq.n	285b4 <ble_hs_misc_restore_one_irk+0xc>
            BLE_HS_LOG(ERROR, "failed to configure restored IRK\n");
   285ca:	4a03      	ldr	r2, [pc, #12]	; (285d8 <ble_hs_misc_restore_one_irk+0x30>)
   285cc:	2103      	movs	r1, #3
   285ce:	2004      	movs	r0, #4
   285d0:	f7f4 fba4 	bl	1cd1c <modlog_printf>
   285d4:	e7ee      	b.n	285b4 <ble_hs_misc_restore_one_irk+0xc>
   285d6:	bf00      	nop
   285d8:	00034f6c 	.word	0x00034f6c

000285dc <ble_hs_misc_conn_chan_find>:
{
   285dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   285de:	460e      	mov	r6, r1
   285e0:	4615      	mov	r5, r2
   285e2:	461c      	mov	r4, r3
    conn = ble_hs_conn_find(conn_handle);
   285e4:	f7ff f82c 	bl	27640 <ble_hs_conn_find>
    if (conn == NULL) {
   285e8:	4607      	mov	r7, r0
   285ea:	b160      	cbz	r0, 28606 <ble_hs_misc_conn_chan_find+0x2a>
        chan = ble_hs_conn_chan_find_by_scid(conn, cid);
   285ec:	4631      	mov	r1, r6
   285ee:	f7fe ff61 	bl	274b4 <ble_hs_conn_chan_find_by_scid>
        if (chan == NULL) {
   285f2:	4603      	mov	r3, r0
   285f4:	b128      	cbz	r0, 28602 <ble_hs_misc_conn_chan_find+0x26>
            rc = 0;
   285f6:	2000      	movs	r0, #0
    if (out_conn != NULL) {
   285f8:	b105      	cbz	r5, 285fc <ble_hs_misc_conn_chan_find+0x20>
        *out_conn = conn;
   285fa:	602f      	str	r7, [r5, #0]
    if (out_chan != NULL) {
   285fc:	b104      	cbz	r4, 28600 <ble_hs_misc_conn_chan_find+0x24>
        *out_chan = chan;
   285fe:	6023      	str	r3, [r4, #0]
}
   28600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rc = BLE_HS_ENOTCONN;
   28602:	2007      	movs	r0, #7
   28604:	e7f8      	b.n	285f8 <ble_hs_misc_conn_chan_find+0x1c>
        chan = NULL;
   28606:	4603      	mov	r3, r0
        rc = BLE_HS_ENOTCONN;
   28608:	2007      	movs	r0, #7
   2860a:	e7f5      	b.n	285f8 <ble_hs_misc_conn_chan_find+0x1c>

0002860c <ble_hs_misc_conn_chan_find_reqd>:
{
   2860c:	b530      	push	{r4, r5, lr}
   2860e:	b083      	sub	sp, #12
   28610:	4615      	mov	r5, r2
   28612:	461c      	mov	r4, r3
    rc = ble_hs_misc_conn_chan_find(conn_handle, cid, &conn, &chan);
   28614:	ab01      	add	r3, sp, #4
   28616:	466a      	mov	r2, sp
   28618:	f7ff ffe0 	bl	285dc <ble_hs_misc_conn_chan_find>
    if (rc != 0) {
   2861c:	b928      	cbnz	r0, 2862a <ble_hs_misc_conn_chan_find_reqd+0x1e>
    if (out_conn != NULL) {
   2861e:	b10d      	cbz	r5, 28624 <ble_hs_misc_conn_chan_find_reqd+0x18>
        *out_conn = conn;
   28620:	9b00      	ldr	r3, [sp, #0]
   28622:	602b      	str	r3, [r5, #0]
    if (out_chan != NULL) {
   28624:	b10c      	cbz	r4, 2862a <ble_hs_misc_conn_chan_find_reqd+0x1e>
        *out_chan = chan;
   28626:	9b01      	ldr	r3, [sp, #4]
   28628:	6023      	str	r3, [r4, #0]
}
   2862a:	b003      	add	sp, #12
   2862c:	bd30      	pop	{r4, r5, pc}

0002862e <ble_hs_misc_own_addr_type_to_id>:
    switch (own_addr_type) {
   2862e:	2801      	cmp	r0, #1
   28630:	d002      	beq.n	28638 <ble_hs_misc_own_addr_type_to_id+0xa>
   28632:	2803      	cmp	r0, #3
   28634:	d001      	beq.n	2863a <ble_hs_misc_own_addr_type_to_id+0xc>
   28636:	2000      	movs	r0, #0
}
   28638:	4770      	bx	lr
         return BLE_ADDR_RANDOM;
   2863a:	2001      	movs	r0, #1
   2863c:	4770      	bx	lr

0002863e <ble_hs_misc_peer_addr_type_to_id>:
    switch (peer_addr_type) {
   2863e:	2801      	cmp	r0, #1
   28640:	d002      	beq.n	28648 <ble_hs_misc_peer_addr_type_to_id+0xa>
   28642:	2803      	cmp	r0, #3
   28644:	d001      	beq.n	2864a <ble_hs_misc_peer_addr_type_to_id+0xc>
   28646:	2000      	movs	r0, #0
}
   28648:	4770      	bx	lr
            return BLE_ADDR_RANDOM;
   2864a:	2001      	movs	r0, #1
   2864c:	4770      	bx	lr
	...

00028650 <ble_hs_misc_restore_irks>:

int
ble_hs_misc_restore_irks(void)
{
   28650:	b508      	push	{r3, lr}
    int rc;

    rc = ble_store_iterate(BLE_STORE_OBJ_TYPE_PEER_SEC,
   28652:	2200      	movs	r2, #0
   28654:	4902      	ldr	r1, [pc, #8]	; (28660 <ble_hs_misc_restore_irks+0x10>)
   28656:	2002      	movs	r0, #2
   28658:	f001 f8dc 	bl	29814 <ble_store_iterate>
                           ble_hs_misc_restore_one_irk,
                           NULL);
    return rc;
}
   2865c:	bd08      	pop	{r3, pc}
   2865e:	bf00      	nop
   28660:	000285a9 	.word	0x000285a9

00028664 <ble_mqueue_init>:

#include "ble_hs_priv.h"

int
ble_mqueue_init(struct ble_mqueue *mq, ble_npl_event_fn *ev_fn, void *ev_arg)
{
   28664:	4603      	mov	r3, r0
    STAILQ_INIT(&mq->head);
   28666:	2000      	movs	r0, #0
   28668:	6018      	str	r0, [r3, #0]
   2866a:	605b      	str	r3, [r3, #4]
    memset(ev, 0, sizeof(*ev));
   2866c:	6098      	str	r0, [r3, #8]
   2866e:	6158      	str	r0, [r3, #20]
    ev->ev.ev_queued = 0;
   28670:	7218      	strb	r0, [r3, #8]
    ev->ev.ev_cb = (os_event_fn *)fn;
   28672:	60d9      	str	r1, [r3, #12]
    ev->ev.ev_arg = arg;
   28674:	611a      	str	r2, [r3, #16]

    ble_npl_event_init(&mq->ev, ev_fn, ev_arg);

    return (0);
}
   28676:	4770      	bx	lr

00028678 <ble_mqueue_get>:

struct os_mbuf *
ble_mqueue_get(struct ble_mqueue *mq)
{
   28678:	b538      	push	{r3, r4, r5, lr}
   2867a:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *om;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   2867c:	f7f2 f926 	bl	1a8cc <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->head);
   28680:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   28682:	b114      	cbz	r4, 2868a <ble_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->head, omp_next);
   28684:	6863      	ldr	r3, [r4, #4]
   28686:	602b      	str	r3, [r5, #0]
   28688:	b12b      	cbz	r3, 28696 <ble_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   2868a:	f7f2 f925 	bl	1a8d8 <os_arch_restore_sr>

    if (mp) {
   2868e:	b104      	cbz	r4, 28692 <ble_mqueue_get+0x1a>
        om = OS_MBUF_PKTHDR_TO_MBUF(mp);
   28690:	3c10      	subs	r4, #16
    } else {
        om = NULL;
    }

    return (om);
}
   28692:	4620      	mov	r0, r4
   28694:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->head, omp_next);
   28696:	606d      	str	r5, [r5, #4]
   28698:	e7f7      	b.n	2868a <ble_mqueue_get+0x12>

0002869a <ble_mqueue_put>:

int
ble_mqueue_put(struct ble_mqueue *mq, struct ble_npl_eventq *evq, struct os_mbuf *om)
{
   2869a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(om)) {
   2869c:	7953      	ldrb	r3, [r2, #5]
   2869e:	2b07      	cmp	r3, #7
   286a0:	d916      	bls.n	286d0 <ble_mqueue_put+0x36>
   286a2:	4605      	mov	r5, r0
   286a4:	460e      	mov	r6, r1
   286a6:	4614      	mov	r4, r2
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(om);
   286a8:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   286ac:	f7f2 f90e 	bl	1a8cc <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->head, mp, omp_next);
   286b0:	2300      	movs	r3, #0
   286b2:	f844 3f14 	str.w	r3, [r4, #20]!
   286b6:	686b      	ldr	r3, [r5, #4]
   286b8:	601f      	str	r7, [r3, #0]
   286ba:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   286bc:	f7f2 f90c 	bl	1a8d8 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   286c0:	b146      	cbz	r6, 286d4 <ble_mqueue_put+0x3a>
    os_eventq_put(&evq->evq, &ev->ev);
   286c2:	f105 0108 	add.w	r1, r5, #8
   286c6:	4630      	mov	r0, r6
   286c8:	f7f0 fea5 	bl	19416 <os_eventq_put>
        ble_npl_eventq_put(evq, &mq->ev);
    }

    return (0);
   286cc:	2000      	movs	r0, #0
}
   286ce:	e000      	b.n	286d2 <ble_mqueue_put+0x38>
err:
    return (rc);
   286d0:	2002      	movs	r0, #2
}
   286d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   286d4:	2000      	movs	r0, #0
   286d6:	e7fc      	b.n	286d2 <ble_mqueue_put+0x38>

000286d8 <ble_hs_pvcy_set_addr_timeout>:
static int
ble_hs_pvcy_set_addr_timeout(uint16_t timeout)
{
    struct ble_hci_le_set_rpa_tmo_cp cmd;

    if (timeout == 0 || timeout > 0xA1B8) {
   286d8:	1e43      	subs	r3, r0, #1
   286da:	b29b      	uxth	r3, r3
   286dc:	f24a 12b7 	movw	r2, #41399	; 0xa1b7
   286e0:	4293      	cmp	r3, r2
   286e2:	d80e      	bhi.n	28702 <ble_hs_pvcy_set_addr_timeout+0x2a>
{
   286e4:	b500      	push	{lr}
   286e6:	b085      	sub	sp, #20
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    cmd.rpa_timeout = htole16(timeout);
   286e8:	f8ad 000c 	strh.w	r0, [sp, #12]

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   286ec:	2300      	movs	r3, #0
   286ee:	9300      	str	r3, [sp, #0]
   286f0:	2202      	movs	r2, #2
   286f2:	a903      	add	r1, sp, #12
   286f4:	f242 002e 	movw	r0, #8238	; 0x202e
   286f8:	f7ff f9f2 	bl	27ae0 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_SET_RPA_TMO),
                             &cmd, sizeof(cmd), NULL, 0);
}
   286fc:	b005      	add	sp, #20
   286fe:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_ERR_INV_HCI_CMD_PARMS;
   28702:	2012      	movs	r0, #18
}
   28704:	4770      	bx	lr

00028706 <ble_hs_pvcy_clear_entries>:
                             &cmd, sizeof(cmd), NULL, 0);
}

static int
ble_hs_pvcy_clear_entries(void)
{
   28706:	b500      	push	{lr}
   28708:	b083      	sub	sp, #12
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2870a:	2100      	movs	r1, #0
   2870c:	9100      	str	r1, [sp, #0]
   2870e:	460b      	mov	r3, r1
   28710:	460a      	mov	r2, r1
   28712:	f242 0029 	movw	r0, #8233	; 0x2029
   28716:	f7ff f9e3 	bl	27ae0 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_CLR_RESOLV_LIST),
                             NULL, 0, NULL, 0);
}
   2871a:	b003      	add	sp, #12
   2871c:	f85d fb04 	ldr.w	pc, [sp], #4

00028720 <ble_hs_pvcy_set_resolve_enabled>:
{
   28720:	b500      	push	{lr}
   28722:	b085      	sub	sp, #20
    cmd.enable = enable;
   28724:	f88d 000c 	strb.w	r0, [sp, #12]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   28728:	2300      	movs	r3, #0
   2872a:	9300      	str	r3, [sp, #0]
   2872c:	2201      	movs	r2, #1
   2872e:	a903      	add	r1, sp, #12
   28730:	f242 002d 	movw	r0, #8237	; 0x202d
   28734:	f7ff f9d4 	bl	27ae0 <ble_hs_hci_cmd_tx>
}
   28738:	b005      	add	sp, #20
   2873a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00028740 <ble_hs_pvcy_ensure_started>:
    return rc;
}

int
ble_hs_pvcy_ensure_started(void)
{
   28740:	b508      	push	{r3, lr}
    int rc;

    if (ble_hs_pvcy_started) {
   28742:	4b07      	ldr	r3, [pc, #28]	; (28760 <ble_hs_pvcy_ensure_started+0x20>)
   28744:	781b      	ldrb	r3, [r3, #0]
   28746:	b10b      	cbz	r3, 2874c <ble_hs_pvcy_ensure_started+0xc>
        return 0;
   28748:	2000      	movs	r0, #0
    }

    ble_hs_pvcy_started = 1;

    return 0;
}
   2874a:	bd08      	pop	{r3, pc}
    rc = ble_hs_pvcy_set_addr_timeout(MYNEWT_VAL(BLE_RPA_TIMEOUT));
   2874c:	f44f 7096 	mov.w	r0, #300	; 0x12c
   28750:	f7ff ffc2 	bl	286d8 <ble_hs_pvcy_set_addr_timeout>
    if (rc != 0) {
   28754:	2800      	cmp	r0, #0
   28756:	d1f8      	bne.n	2874a <ble_hs_pvcy_ensure_started+0xa>
    ble_hs_pvcy_started = 1;
   28758:	4b01      	ldr	r3, [pc, #4]	; (28760 <ble_hs_pvcy_ensure_started+0x20>)
   2875a:	2201      	movs	r2, #1
   2875c:	701a      	strb	r2, [r3, #0]
    return 0;
   2875e:	e7f4      	b.n	2874a <ble_hs_pvcy_ensure_started+0xa>
   28760:	10006130 	.word	0x10006130

00028764 <ble_hs_pvcy_set_mode>:
int
ble_hs_pvcy_set_mode(const ble_addr_t *addr, uint8_t priv_mode)
{
    struct ble_hci_le_set_privacy_mode_cp cmd;

    if (addr->type > BLE_ADDR_RANDOM) {
   28764:	7803      	ldrb	r3, [r0, #0]
   28766:	2b01      	cmp	r3, #1
   28768:	d819      	bhi.n	2879e <ble_hs_pvcy_set_mode+0x3a>
{
   2876a:	b500      	push	{lr}
   2876c:	b085      	sub	sp, #20
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    cmd.mode = priv_mode;
   2876e:	f88d 100f 	strb.w	r1, [sp, #15]
    cmd.peer_id_addr_type = addr->type;
   28772:	7803      	ldrb	r3, [r0, #0]
   28774:	f88d 3008 	strb.w	r3, [sp, #8]
    memcpy(cmd.peer_id_addr, addr->val, BLE_DEV_ADDR_LEN);
   28778:	f850 3f01 	ldr.w	r3, [r0, #1]!
   2877c:	f8cd 3009 	str.w	r3, [sp, #9]
   28780:	8883      	ldrh	r3, [r0, #4]
   28782:	f8ad 300d 	strh.w	r3, [sp, #13]

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   28786:	2300      	movs	r3, #0
   28788:	9300      	str	r3, [sp, #0]
   2878a:	2208      	movs	r2, #8
   2878c:	eb0d 0102 	add.w	r1, sp, r2
   28790:	f242 004e 	movw	r0, #8270	; 0x204e
   28794:	f7ff f9a4 	bl	27ae0 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_SET_PRIVACY_MODE),
                             &cmd, sizeof(cmd), NULL, 0);
}
   28798:	b005      	add	sp, #20
   2879a:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2879e:	2012      	movs	r0, #18
}
   287a0:	4770      	bx	lr
	...

000287a4 <ble_hs_pvcy_add_entry_hci>:
    if (addr_type > BLE_ADDR_RANDOM) {
   287a4:	2901      	cmp	r1, #1
   287a6:	d83a      	bhi.n	2881e <ble_hs_pvcy_add_entry_hci+0x7a>
{
   287a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   287aa:	b08f      	sub	sp, #60	; 0x3c
   287ac:	4607      	mov	r7, r0
   287ae:	460d      	mov	r5, r1
   287b0:	4614      	mov	r4, r2
    cmd.peer_addr_type = addr_type;
   287b2:	f88d 1010 	strb.w	r1, [sp, #16]
    memcpy(cmd.peer_id_addr, addr, 6);
   287b6:	6803      	ldr	r3, [r0, #0]
   287b8:	f8cd 3011 	str.w	r3, [sp, #17]
   287bc:	8883      	ldrh	r3, [r0, #4]
   287be:	f8ad 3015 	strh.w	r3, [sp, #21]
    memcpy(cmd.local_irk, ble_hs_pvcy_irk, 16);
   287c2:	4e18      	ldr	r6, [pc, #96]	; (28824 <ble_hs_pvcy_add_entry_hci+0x80>)
   287c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   287c6:	f8cd 0027 	str.w	r0, [sp, #39]	; 0x27
   287ca:	f8cd 102b 	str.w	r1, [sp, #43]	; 0x2b
   287ce:	f8cd 202f 	str.w	r2, [sp, #47]	; 0x2f
   287d2:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    memcpy(cmd.peer_irk, irk, 16);
   287d6:	6820      	ldr	r0, [r4, #0]
   287d8:	6861      	ldr	r1, [r4, #4]
   287da:	68a2      	ldr	r2, [r4, #8]
   287dc:	68e3      	ldr	r3, [r4, #12]
   287de:	f8cd 0017 	str.w	r0, [sp, #23]
   287e2:	f8cd 101b 	str.w	r1, [sp, #27]
   287e6:	f8cd 201f 	str.w	r2, [sp, #31]
   287ea:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   287ee:	2300      	movs	r3, #0
   287f0:	9300      	str	r3, [sp, #0]
   287f2:	2227      	movs	r2, #39	; 0x27
   287f4:	a904      	add	r1, sp, #16
   287f6:	f242 0027 	movw	r0, #8231	; 0x2027
   287fa:	f7ff f971 	bl	27ae0 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   287fe:	b108      	cbz	r0, 28804 <ble_hs_pvcy_add_entry_hci+0x60>
}
   28800:	b00f      	add	sp, #60	; 0x3c
   28802:	bdf0      	pop	{r4, r5, r6, r7, pc}
    peer_addr.type = addr_type;
   28804:	f88d 5008 	strb.w	r5, [sp, #8]
    memcpy(peer_addr.val, addr, sizeof peer_addr.val);
   28808:	683b      	ldr	r3, [r7, #0]
   2880a:	f8cd 3009 	str.w	r3, [sp, #9]
   2880e:	88bb      	ldrh	r3, [r7, #4]
   28810:	f8ad 300d 	strh.w	r3, [sp, #13]
    rc = ble_hs_pvcy_set_mode(&peer_addr, BLE_GAP_PRIVATE_MODE_DEVICE);
   28814:	2101      	movs	r1, #1
   28816:	a802      	add	r0, sp, #8
   28818:	f7ff ffa4 	bl	28764 <ble_hs_pvcy_set_mode>
    if (rc != 0) {
   2881c:	e7f0      	b.n	28800 <ble_hs_pvcy_add_entry_hci+0x5c>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2881e:	2012      	movs	r0, #18
}
   28820:	4770      	bx	lr
   28822:	bf00      	nop
   28824:	10006120 	.word	0x10006120

00028828 <ble_hs_pvcy_add_entry>:
{
   28828:	b570      	push	{r4, r5, r6, lr}
   2882a:	4604      	mov	r4, r0
   2882c:	460d      	mov	r5, r1
   2882e:	4616      	mov	r6, r2
    STATS_INC(ble_hs_stats, pvcy_add_entry);
   28830:	4a0a      	ldr	r2, [pc, #40]	; (2885c <ble_hs_pvcy_add_entry+0x34>)
   28832:	6b13      	ldr	r3, [r2, #48]	; 0x30
   28834:	3301      	adds	r3, #1
   28836:	6313      	str	r3, [r2, #48]	; 0x30
    ble_gap_preempt();
   28838:	f7fa faac 	bl	22d94 <ble_gap_preempt>
    rc = ble_hs_pvcy_add_entry_hci(addr, addr_type, irk);
   2883c:	4632      	mov	r2, r6
   2883e:	4629      	mov	r1, r5
   28840:	4620      	mov	r0, r4
   28842:	f7ff ffaf 	bl	287a4 <ble_hs_pvcy_add_entry_hci>
   28846:	4604      	mov	r4, r0
    ble_gap_preempt_done();
   28848:	f7fa fab0 	bl	22dac <ble_gap_preempt_done>
    if (rc != 0) {
   2884c:	b11c      	cbz	r4, 28856 <ble_hs_pvcy_add_entry+0x2e>
        STATS_INC(ble_hs_stats, pvcy_add_entry_fail);
   2884e:	4a03      	ldr	r2, [pc, #12]	; (2885c <ble_hs_pvcy_add_entry+0x34>)
   28850:	6b53      	ldr	r3, [r2, #52]	; 0x34
   28852:	3301      	adds	r3, #1
   28854:	6353      	str	r3, [r2, #52]	; 0x34
}
   28856:	4620      	mov	r0, r4
   28858:	bd70      	pop	{r4, r5, r6, pc}
   2885a:	bf00      	nop
   2885c:	10005e44 	.word	0x10005e44

00028860 <ble_hs_pvcy_set_our_irk>:
{
   28860:	b510      	push	{r4, lr}
   28862:	b086      	sub	sp, #24
    if (irk != NULL) {
   28864:	b170      	cbz	r0, 28884 <ble_hs_pvcy_set_our_irk+0x24>
   28866:	4603      	mov	r3, r0
        memcpy(new_irk, irk, 16);
   28868:	466c      	mov	r4, sp
   2886a:	6800      	ldr	r0, [r0, #0]
   2886c:	6859      	ldr	r1, [r3, #4]
   2886e:	689a      	ldr	r2, [r3, #8]
   28870:	68db      	ldr	r3, [r3, #12]
   28872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    if (memcmp(ble_hs_pvcy_irk, new_irk, 16) != 0) {
   28874:	2210      	movs	r2, #16
   28876:	4669      	mov	r1, sp
   28878:	4815      	ldr	r0, [pc, #84]	; (288d0 <ble_hs_pvcy_set_our_irk+0x70>)
   2887a:	f7f2 f9d7 	bl	1ac2c <memcmp>
   2887e:	b938      	cbnz	r0, 28890 <ble_hs_pvcy_set_our_irk+0x30>
}
   28880:	b006      	add	sp, #24
   28882:	bd10      	pop	{r4, pc}
        memcpy(new_irk, ble_hs_pvcy_default_irk, 16);
   28884:	4b13      	ldr	r3, [pc, #76]	; (288d4 <ble_hs_pvcy_set_our_irk+0x74>)
   28886:	466c      	mov	r4, sp
   28888:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2888a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   2888e:	e7f1      	b.n	28874 <ble_hs_pvcy_set_our_irk+0x14>
        memcpy(ble_hs_pvcy_irk, new_irk, 16);
   28890:	4c0f      	ldr	r4, [pc, #60]	; (288d0 <ble_hs_pvcy_set_our_irk+0x70>)
   28892:	466b      	mov	r3, sp
   28894:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   28896:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        rc = ble_hs_pvcy_set_resolve_enabled(0);
   2889a:	2000      	movs	r0, #0
   2889c:	f7ff ff40 	bl	28720 <ble_hs_pvcy_set_resolve_enabled>
        if (rc != 0) {
   288a0:	2800      	cmp	r0, #0
   288a2:	d1ed      	bne.n	28880 <ble_hs_pvcy_set_our_irk+0x20>
        rc = ble_hs_pvcy_clear_entries();
   288a4:	f7ff ff2f 	bl	28706 <ble_hs_pvcy_clear_entries>
        if (rc != 0) {
   288a8:	2800      	cmp	r0, #0
   288aa:	d1e9      	bne.n	28880 <ble_hs_pvcy_set_our_irk+0x20>
        rc = ble_hs_pvcy_set_resolve_enabled(1);
   288ac:	2001      	movs	r0, #1
   288ae:	f7ff ff37 	bl	28720 <ble_hs_pvcy_set_resolve_enabled>
        if (rc != 0) {
   288b2:	2800      	cmp	r0, #0
   288b4:	d1e4      	bne.n	28880 <ble_hs_pvcy_set_our_irk+0x20>
        memset(tmp_addr, 0, 6);
   288b6:	2100      	movs	r1, #0
   288b8:	9104      	str	r1, [sp, #16]
   288ba:	f8ad 1014 	strh.w	r1, [sp, #20]
        memset(new_irk, 0, 16);
   288be:	9100      	str	r1, [sp, #0]
   288c0:	9101      	str	r1, [sp, #4]
   288c2:	9102      	str	r1, [sp, #8]
   288c4:	9103      	str	r1, [sp, #12]
        rc = ble_hs_pvcy_add_entry(tmp_addr, 0, new_irk);
   288c6:	466a      	mov	r2, sp
   288c8:	a804      	add	r0, sp, #16
   288ca:	f7ff ffad 	bl	28828 <ble_hs_pvcy_add_entry>
        if (rc != 0) {
   288ce:	e7d7      	b.n	28880 <ble_hs_pvcy_set_our_irk+0x20>
   288d0:	10006120 	.word	0x10006120
   288d4:	00034f98 	.word	0x00034f98

000288d8 <ble_hs_startup_reset_tx>:
    return 0;
}

static int
ble_hs_startup_reset_tx(void)
{
   288d8:	b500      	push	{lr}
   288da:	b083      	sub	sp, #12
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   288dc:	2100      	movs	r1, #0
   288de:	9100      	str	r1, [sp, #0]
   288e0:	460b      	mov	r3, r1
   288e2:	460a      	mov	r2, r1
   288e4:	f640 4003 	movw	r0, #3075	; 0xc03
   288e8:	f7ff f8fa 	bl	27ae0 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_CB_RESET),
                             NULL, 0, NULL, 0);
}
   288ec:	b003      	add	sp, #12
   288ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000288f4 <ble_hs_startup_read_sup_f_tx>:
{
   288f4:	b500      	push	{lr}
   288f6:	b085      	sub	sp, #20
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   288f8:	2308      	movs	r3, #8
   288fa:	9300      	str	r3, [sp, #0]
   288fc:	446b      	add	r3, sp
   288fe:	2200      	movs	r2, #0
   28900:	4611      	mov	r1, r2
   28902:	f241 0003 	movw	r0, #4099	; 0x1003
   28906:	f7ff f8eb 	bl	27ae0 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   2890a:	b928      	cbnz	r0, 28918 <ble_hs_startup_read_sup_f_tx+0x24>
    if (!(le64toh(rsp.features) & 0x0000006000000000)) {
   2890c:	2200      	movs	r2, #0
   2890e:	9903      	ldr	r1, [sp, #12]
   28910:	f001 0360 	and.w	r3, r1, #96	; 0x60
   28914:	4313      	orrs	r3, r2
   28916:	d002      	beq.n	2891e <ble_hs_startup_read_sup_f_tx+0x2a>
}
   28918:	b005      	add	sp, #20
   2891a:	f85d fb04 	ldr.w	pc, [sp], #4
        BLE_HS_LOG(ERROR, "Controller doesn't support LE\n");
   2891e:	4a03      	ldr	r2, [pc, #12]	; (2892c <ble_hs_startup_read_sup_f_tx+0x38>)
   28920:	2103      	movs	r1, #3
   28922:	2004      	movs	r0, #4
   28924:	f7f4 f9fa 	bl	1cd1c <modlog_printf>
        return BLE_HS_ECONTROLLER;
   28928:	200c      	movs	r0, #12
   2892a:	e7f5      	b.n	28918 <ble_hs_startup_read_sup_f_tx+0x24>
   2892c:	00034fac 	.word	0x00034fac

00028930 <ble_hs_startup_set_evmask_tx>:
{
   28930:	b510      	push	{r4, lr}
   28932:	b086      	sub	sp, #24
    version = ble_hs_hci_get_hci_version();
   28934:	f7ff f99a 	bl	27c6c <ble_hs_hci_get_hci_version>
   28938:	4604      	mov	r4, r0
    cmd.event_mask = htole64(0x2000800002008090);
   2893a:	a311      	add	r3, pc, #68	; (adr r3, 28980 <ble_hs_startup_set_evmask_tx+0x50>)
   2893c:	e9d3 2300 	ldrd	r2, r3, [r3]
   28940:	e9cd 2304 	strd	r2, r3, [sp, #16]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   28944:	2300      	movs	r3, #0
   28946:	9300      	str	r3, [sp, #0]
   28948:	2208      	movs	r2, #8
   2894a:	a904      	add	r1, sp, #16
   2894c:	f640 4001 	movw	r0, #3073	; 0xc01
   28950:	f7ff f8c6 	bl	27ae0 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   28954:	b908      	cbnz	r0, 2895a <ble_hs_startup_set_evmask_tx+0x2a>
    if (version >= BLE_HCI_VER_BCS_4_1) {
   28956:	2c06      	cmp	r4, #6
   28958:	d801      	bhi.n	2895e <ble_hs_startup_set_evmask_tx+0x2e>
}
   2895a:	b006      	add	sp, #24
   2895c:	bd10      	pop	{r4, pc}
        cmd2.event_mask2 = htole64(0x0000000000800000);
   2895e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   28962:	2300      	movs	r3, #0
   28964:	e9cd 2302 	strd	r2, r3, [sp, #8]
        rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   28968:	2300      	movs	r3, #0
   2896a:	9300      	str	r3, [sp, #0]
   2896c:	2208      	movs	r2, #8
   2896e:	eb0d 0102 	add.w	r1, sp, r2
   28972:	f640 4063 	movw	r0, #3171	; 0xc63
   28976:	f7ff f8b3 	bl	27ae0 <ble_hs_hci_cmd_tx>
        if (rc != 0) {
   2897a:	e7ee      	b.n	2895a <ble_hs_startup_set_evmask_tx+0x2a>
   2897c:	f3af 8000 	nop.w
   28980:	02008090 	.word	0x02008090
   28984:	20008000 	.word	0x20008000

00028988 <ble_hs_startup_le_set_evmask_tx>:
{
   28988:	b500      	push	{lr}
   2898a:	b085      	sub	sp, #20
    version = ble_hs_hci_get_hci_version();
   2898c:	f7ff f96e 	bl	27c6c <ble_hs_hci_get_hci_version>
    if (version >= BLE_HCI_VER_BCS_4_1) {
   28990:	2806      	cmp	r0, #6
   28992:	d819      	bhi.n	289c8 <ble_hs_startup_le_set_evmask_tx+0x40>
    mask = 0x000000000000001f;
   28994:	231f      	movs	r3, #31
   28996:	2200      	movs	r2, #0
    if (version >= BLE_HCI_VER_BCS_4_2) {
   28998:	2807      	cmp	r0, #7
   2899a:	d901      	bls.n	289a0 <ble_hs_startup_le_set_evmask_tx+0x18>
        mask |= 0x0000000000000640;
   2899c:	f443 63c8 	orr.w	r3, r3, #1600	; 0x640
    if (version >= BLE_HCI_VER_BCS_5_0) {
   289a0:	2808      	cmp	r0, #8
   289a2:	d903      	bls.n	289ac <ble_hs_startup_le_set_evmask_tx+0x24>
        mask |= 0x00000000000ff800;
   289a4:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
   289a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    cmd.event_mask = htole64(mask);
   289ac:	9302      	str	r3, [sp, #8]
   289ae:	9203      	str	r2, [sp, #12]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   289b0:	2300      	movs	r3, #0
   289b2:	9300      	str	r3, [sp, #0]
   289b4:	2208      	movs	r2, #8
   289b6:	eb0d 0102 	add.w	r1, sp, r2
   289ba:	f242 0001 	movw	r0, #8193	; 0x2001
   289be:	f7ff f88f 	bl	27ae0 <ble_hs_hci_cmd_tx>
}
   289c2:	b005      	add	sp, #20
   289c4:	f85d fb04 	ldr.w	pc, [sp], #4
        mask |= 0x0000000000000020;
   289c8:	233f      	movs	r3, #63	; 0x3f
   289ca:	2200      	movs	r2, #0
   289cc:	e7e4      	b.n	28998 <ble_hs_startup_le_set_evmask_tx+0x10>

000289ce <ble_hs_startup_le_read_buf_sz_tx>:
{
   289ce:	b530      	push	{r4, r5, lr}
   289d0:	b085      	sub	sp, #20
   289d2:	4605      	mov	r5, r0
   289d4:	460c      	mov	r4, r1
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   289d6:	2303      	movs	r3, #3
   289d8:	9300      	str	r3, [sp, #0]
   289da:	ab03      	add	r3, sp, #12
   289dc:	2200      	movs	r2, #0
   289de:	4611      	mov	r1, r2
   289e0:	f242 0002 	movw	r0, #8194	; 0x2002
   289e4:	f7ff f87c 	bl	27ae0 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   289e8:	b928      	cbnz	r0, 289f6 <ble_hs_startup_le_read_buf_sz_tx+0x28>
    *out_pktlen = le16toh(rsp.data_len);
   289ea:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   289ee:	802b      	strh	r3, [r5, #0]
    *out_max_pkts = rsp.data_packets;
   289f0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   289f4:	7023      	strb	r3, [r4, #0]
}
   289f6:	b005      	add	sp, #20
   289f8:	bd30      	pop	{r4, r5, pc}

000289fa <ble_hs_startup_read_buf_sz_tx>:
{
   289fa:	b530      	push	{r4, r5, lr}
   289fc:	b085      	sub	sp, #20
   289fe:	4605      	mov	r5, r0
   28a00:	460c      	mov	r4, r1
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   28a02:	2307      	movs	r3, #7
   28a04:	9300      	str	r3, [sp, #0]
   28a06:	ab02      	add	r3, sp, #8
   28a08:	2200      	movs	r2, #0
   28a0a:	4611      	mov	r1, r2
   28a0c:	f241 0005 	movw	r0, #4101	; 0x1005
   28a10:	f7ff f866 	bl	27ae0 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   28a14:	b928      	cbnz	r0, 28a22 <ble_hs_startup_read_buf_sz_tx+0x28>
    *out_pktlen = le16toh(rsp.acl_data_len);
   28a16:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   28a1a:	802b      	strh	r3, [r5, #0]
    *out_max_pkts = le16toh(rsp.acl_num);
   28a1c:	f8bd 300b 	ldrh.w	r3, [sp, #11]
   28a20:	8023      	strh	r3, [r4, #0]
}
   28a22:	b005      	add	sp, #20
   28a24:	bd30      	pop	{r4, r5, pc}

00028a26 <ble_hs_startup_read_local_ver_tx>:
{
   28a26:	b510      	push	{r4, lr}
   28a28:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   28a2a:	2308      	movs	r3, #8
   28a2c:	9300      	str	r3, [sp, #0]
   28a2e:	446b      	add	r3, sp
   28a30:	2200      	movs	r2, #0
   28a32:	4611      	mov	r1, r2
   28a34:	f241 0001 	movw	r0, #4097	; 0x1001
   28a38:	f7ff f852 	bl	27ae0 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   28a3c:	4604      	mov	r4, r0
   28a3e:	b110      	cbz	r0, 28a46 <ble_hs_startup_read_local_ver_tx+0x20>
}
   28a40:	4620      	mov	r0, r4
   28a42:	b004      	add	sp, #16
   28a44:	bd10      	pop	{r4, pc}
    ble_hs_hci_set_hci_version(rsp.hci_ver);
   28a46:	f89d 0008 	ldrb.w	r0, [sp, #8]
   28a4a:	f7ff f909 	bl	27c60 <ble_hs_hci_set_hci_version>
    return 0;
   28a4e:	e7f7      	b.n	28a40 <ble_hs_startup_read_local_ver_tx+0x1a>

00028a50 <ble_hs_startup_read_buf_sz>:
{
   28a50:	b500      	push	{lr}
   28a52:	b083      	sub	sp, #12
    uint16_t le_pktlen = 0;
   28a54:	2300      	movs	r3, #0
   28a56:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t max_pkts = 0;
   28a5a:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint16_t pktlen = 0;
   28a5e:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint8_t le_max_pkts = 0;
   28a62:	f88d 3001 	strb.w	r3, [sp, #1]
    rc = ble_hs_startup_le_read_buf_sz_tx(&le_pktlen, &le_max_pkts);
   28a66:	f10d 0101 	add.w	r1, sp, #1
   28a6a:	f10d 0006 	add.w	r0, sp, #6
   28a6e:	f7ff ffae 	bl	289ce <ble_hs_startup_le_read_buf_sz_tx>
    if (rc != 0) {
   28a72:	4603      	mov	r3, r0
   28a74:	b978      	cbnz	r0, 28a96 <ble_hs_startup_read_buf_sz+0x46>
    if (le_pktlen != 0) {
   28a76:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   28a7a:	b183      	cbz	r3, 28a9e <ble_hs_startup_read_buf_sz+0x4e>
        pktlen = le_pktlen;
   28a7c:	f8ad 3002 	strh.w	r3, [sp, #2]
        max_pkts = le_max_pkts;
   28a80:	f89d 3001 	ldrb.w	r3, [sp, #1]
   28a84:	f8ad 3004 	strh.w	r3, [sp, #4]
    rc = ble_hs_hci_set_buf_sz(pktlen, max_pkts);
   28a88:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   28a8c:	f8bd 0002 	ldrh.w	r0, [sp, #2]
   28a90:	f7ff f804 	bl	27a9c <ble_hs_hci_set_buf_sz>
   28a94:	4603      	mov	r3, r0
}
   28a96:	4618      	mov	r0, r3
   28a98:	b003      	add	sp, #12
   28a9a:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = ble_hs_startup_read_buf_sz_tx(&pktlen, &max_pkts);
   28a9e:	a901      	add	r1, sp, #4
   28aa0:	f10d 0002 	add.w	r0, sp, #2
   28aa4:	f7ff ffa9 	bl	289fa <ble_hs_startup_read_buf_sz_tx>
        if (rc != 0) {
   28aa8:	4603      	mov	r3, r0
   28aaa:	2800      	cmp	r0, #0
   28aac:	d0ec      	beq.n	28a88 <ble_hs_startup_read_buf_sz+0x38>
   28aae:	e7f2      	b.n	28a96 <ble_hs_startup_read_buf_sz+0x46>

00028ab0 <ble_hs_startup_le_read_sup_f_tx>:
{
   28ab0:	b510      	push	{r4, lr}
   28ab2:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   28ab4:	2308      	movs	r3, #8
   28ab6:	9300      	str	r3, [sp, #0]
   28ab8:	446b      	add	r3, sp
   28aba:	2200      	movs	r2, #0
   28abc:	4611      	mov	r1, r2
   28abe:	f242 0003 	movw	r0, #8195	; 0x2003
   28ac2:	f7ff f80d 	bl	27ae0 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   28ac6:	4604      	mov	r4, r0
   28ac8:	b110      	cbz	r0, 28ad0 <ble_hs_startup_le_read_sup_f_tx+0x20>
}
   28aca:	4620      	mov	r0, r4
   28acc:	b004      	add	sp, #16
   28ace:	bd10      	pop	{r4, pc}
    ble_hs_hci_set_le_supported_feat(le64toh(rsp.features));
   28ad0:	9802      	ldr	r0, [sp, #8]
   28ad2:	f7ff f8bf 	bl	27c54 <ble_hs_hci_set_le_supported_feat>
    return 0;
   28ad6:	e7f8      	b.n	28aca <ble_hs_startup_le_read_sup_f_tx+0x1a>

00028ad8 <ble_hs_startup_read_bd_addr>:
{
   28ad8:	b510      	push	{r4, lr}
   28ada:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   28adc:	2306      	movs	r3, #6
   28ade:	9300      	str	r3, [sp, #0]
   28ae0:	ab02      	add	r3, sp, #8
   28ae2:	2200      	movs	r2, #0
   28ae4:	4611      	mov	r1, r2
   28ae6:	f241 0009 	movw	r0, #4105	; 0x1009
   28aea:	f7fe fff9 	bl	27ae0 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   28aee:	4604      	mov	r4, r0
   28af0:	b110      	cbz	r0, 28af8 <ble_hs_startup_read_bd_addr+0x20>
}
   28af2:	4620      	mov	r0, r4
   28af4:	b004      	add	sp, #16
   28af6:	bd10      	pop	{r4, pc}
    ble_hs_id_set_pub(rsp.addr);
   28af8:	a802      	add	r0, sp, #8
   28afa:	f7ff fc19 	bl	28330 <ble_hs_id_set_pub>
    return 0;
   28afe:	e7f8      	b.n	28af2 <ble_hs_startup_read_bd_addr+0x1a>

00028b00 <ble_hs_startup_go>:

int
ble_hs_startup_go(void)
{
   28b00:	b510      	push	{r4, lr}
    int rc;

    rc = ble_hs_startup_reset_tx();
   28b02:	f7ff fee9 	bl	288d8 <ble_hs_startup_reset_tx>
    if (rc != 0) {
   28b06:	4604      	mov	r4, r0
   28b08:	b108      	cbz	r0, 28b0e <ble_hs_startup_go+0xe>

    /* If flow control is enabled, configure the controller to use it. */
    ble_hs_flow_startup();

    return 0;
}
   28b0a:	4620      	mov	r0, r4
   28b0c:	bd10      	pop	{r4, pc}
    rc = ble_hs_startup_read_local_ver_tx();
   28b0e:	f7ff ff8a 	bl	28a26 <ble_hs_startup_read_local_ver_tx>
    if (rc != 0) {
   28b12:	4604      	mov	r4, r0
   28b14:	2800      	cmp	r0, #0
   28b16:	d1f8      	bne.n	28b0a <ble_hs_startup_go+0xa>
    if (ble_hs_hci_get_hci_version() < BLE_HCI_VER_BCS_4_0) {
   28b18:	f7ff f8a8 	bl	27c6c <ble_hs_hci_get_hci_version>
   28b1c:	2805      	cmp	r0, #5
   28b1e:	d922      	bls.n	28b66 <ble_hs_startup_go+0x66>
    rc = ble_hs_startup_read_sup_f_tx();
   28b20:	f7ff fee8 	bl	288f4 <ble_hs_startup_read_sup_f_tx>
    if (rc != 0) {
   28b24:	4604      	mov	r4, r0
   28b26:	2800      	cmp	r0, #0
   28b28:	d1ef      	bne.n	28b0a <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_set_evmask_tx();
   28b2a:	f7ff ff01 	bl	28930 <ble_hs_startup_set_evmask_tx>
    if (rc != 0) {
   28b2e:	4604      	mov	r4, r0
   28b30:	2800      	cmp	r0, #0
   28b32:	d1ea      	bne.n	28b0a <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_le_set_evmask_tx();
   28b34:	f7ff ff28 	bl	28988 <ble_hs_startup_le_set_evmask_tx>
    if (rc != 0) {
   28b38:	4604      	mov	r4, r0
   28b3a:	2800      	cmp	r0, #0
   28b3c:	d1e5      	bne.n	28b0a <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_read_buf_sz();
   28b3e:	f7ff ff87 	bl	28a50 <ble_hs_startup_read_buf_sz>
    if (rc != 0) {
   28b42:	4604      	mov	r4, r0
   28b44:	2800      	cmp	r0, #0
   28b46:	d1e0      	bne.n	28b0a <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_le_read_sup_f_tx();
   28b48:	f7ff ffb2 	bl	28ab0 <ble_hs_startup_le_read_sup_f_tx>
    if (rc != 0) {
   28b4c:	4604      	mov	r4, r0
   28b4e:	2800      	cmp	r0, #0
   28b50:	d1db      	bne.n	28b0a <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_read_bd_addr();
   28b52:	f7ff ffc1 	bl	28ad8 <ble_hs_startup_read_bd_addr>
    if (rc != 0) {
   28b56:	4604      	mov	r4, r0
   28b58:	2800      	cmp	r0, #0
   28b5a:	d1d6      	bne.n	28b0a <ble_hs_startup_go+0xa>
    ble_hs_pvcy_set_our_irk(NULL);
   28b5c:	f7ff fe80 	bl	28860 <ble_hs_pvcy_set_our_irk>
    ble_hs_flow_startup();
   28b60:	f7fe fea4 	bl	278ac <ble_hs_flow_startup>
    return 0;
   28b64:	e7d1      	b.n	28b0a <ble_hs_startup_go+0xa>
        BLE_HS_LOG(ERROR, "Required controller version is 4.0 (6)\n");
   28b66:	4a03      	ldr	r2, [pc, #12]	; (28b74 <ble_hs_startup_go+0x74>)
   28b68:	2103      	movs	r1, #3
   28b6a:	2004      	movs	r0, #4
   28b6c:	f7f4 f8d6 	bl	1cd1c <modlog_printf>
        return BLE_HS_ECONTROLLER;
   28b70:	240c      	movs	r4, #12
   28b72:	e7ca      	b.n	28b0a <ble_hs_startup_go+0xa>
   28b74:	00034fcc 	.word	0x00034fcc

00028b78 <ble_hs_stop_register_listener>:
ble_hs_stop_register_listener(struct ble_hs_stop_listener *listener,
                              ble_hs_stop_fn *fn, void *arg)
{
    BLE_HS_DBG_ASSERT(fn != NULL);

    listener->fn = fn;
   28b78:	6001      	str	r1, [r0, #0]
    listener->arg = arg;
   28b7a:	6042      	str	r2, [r0, #4]
    SLIST_INSERT_HEAD(&ble_hs_stop_listeners, listener, link);
   28b7c:	4b02      	ldr	r3, [pc, #8]	; (28b88 <ble_hs_stop_register_listener+0x10>)
   28b7e:	681a      	ldr	r2, [r3, #0]
   28b80:	6082      	str	r2, [r0, #8]
   28b82:	6018      	str	r0, [r3, #0]
}
   28b84:	4770      	bx	lr
   28b86:	bf00      	nop
   28b88:	10006140 	.word	0x10006140

00028b8c <ble_hs_stop_terminate_conn>:
{
   28b8c:	b508      	push	{r3, lr}
    rc = ble_gap_terminate_with_conn(conn, BLE_ERR_REM_USER_CONN_TERM);
   28b8e:	2113      	movs	r1, #19
   28b90:	f7f9 fdcc 	bl	2272c <ble_gap_terminate_with_conn>
    if (rc == 0) {
   28b94:	b928      	cbnz	r0, 28ba2 <ble_hs_stop_terminate_conn+0x16>
        ble_hs_stop_conn_cnt++;
   28b96:	4a06      	ldr	r2, [pc, #24]	; (28bb0 <ble_hs_stop_terminate_conn+0x24>)
   28b98:	7813      	ldrb	r3, [r2, #0]
   28b9a:	3301      	adds	r3, #1
   28b9c:	7013      	strb	r3, [r2, #0]
}
   28b9e:	2000      	movs	r0, #0
   28ba0:	bd08      	pop	{r3, pc}
   28ba2:	4603      	mov	r3, r0
        BLE_HS_LOG(ERROR, "ble_hs_stop: failed to terminate connection; rc=%d\n", rc);
   28ba4:	4a03      	ldr	r2, [pc, #12]	; (28bb4 <ble_hs_stop_terminate_conn+0x28>)
   28ba6:	2103      	movs	r1, #3
   28ba8:	2004      	movs	r0, #4
   28baa:	f7f4 f8b7 	bl	1cd1c <modlog_printf>
   28bae:	e7f6      	b.n	28b9e <ble_hs_stop_terminate_conn+0x12>
   28bb0:	10006131 	.word	0x10006131
   28bb4:	00034ff4 	.word	0x00034ff4

00028bb8 <ble_hs_stop_begin>:

static int
ble_hs_stop_begin(struct ble_hs_stop_listener *listener,
                   ble_hs_stop_fn *fn, void *arg)
{
   28bb8:	b510      	push	{r4, lr}
    switch (ble_hs_enabled_state) {
   28bba:	4b12      	ldr	r3, [pc, #72]	; (28c04 <ble_hs_stop_begin+0x4c>)
   28bbc:	781b      	ldrb	r3, [r3, #0]
   28bbe:	2b01      	cmp	r3, #1
   28bc0:	d016      	beq.n	28bf0 <ble_hs_stop_begin+0x38>
   28bc2:	2b02      	cmp	r3, #2
   28bc4:	d00a      	beq.n	28bdc <ble_hs_stop_begin+0x24>
   28bc6:	b1c3      	cbz	r3, 28bfa <ble_hs_stop_begin+0x42>
    case BLE_HS_ENABLED_STATE_OFF:
        /* Host already stopped. */
        return BLE_HS_EALREADY;

    default:
        assert(0);
   28bc8:	f7eb fd9c 	bl	14704 <hal_debugger_connected>
   28bcc:	b100      	cbz	r0, 28bd0 <ble_hs_stop_begin+0x18>
   28bce:	be01      	bkpt	0x0001
   28bd0:	2300      	movs	r3, #0
   28bd2:	461a      	mov	r2, r3
   28bd4:	4619      	mov	r1, r3
   28bd6:	4618      	mov	r0, r3
   28bd8:	f7f0 f8a4 	bl	18d24 <__assert_func>
        ble_hs_enabled_state = BLE_HS_ENABLED_STATE_STOPPING;
   28bdc:	4b09      	ldr	r3, [pc, #36]	; (28c04 <ble_hs_stop_begin+0x4c>)
   28bde:	2401      	movs	r4, #1
   28be0:	701c      	strb	r4, [r3, #0]
        if (listener != NULL) {
   28be2:	b108      	cbz	r0, 28be8 <ble_hs_stop_begin+0x30>
            ble_hs_stop_register_listener(listener, fn, arg);
   28be4:	f7ff ffc8 	bl	28b78 <ble_hs_stop_register_listener>
        ble_hs_timer_resched();
   28be8:	f7fd fd98 	bl	2671c <ble_hs_timer_resched>
        return 0;
   28bec:	2000      	movs	r0, #0
   28bee:	e005      	b.n	28bfc <ble_hs_stop_begin+0x44>
        if (listener != NULL) {
   28bf0:	b128      	cbz	r0, 28bfe <ble_hs_stop_begin+0x46>
            ble_hs_stop_register_listener(listener, fn, arg);
   28bf2:	f7ff ffc1 	bl	28b78 <ble_hs_stop_register_listener>
        return BLE_HS_EBUSY;
   28bf6:	200f      	movs	r0, #15
   28bf8:	e000      	b.n	28bfc <ble_hs_stop_begin+0x44>
    switch (ble_hs_enabled_state) {
   28bfa:	2002      	movs	r0, #2
        return BLE_HS_EUNKNOWN;
    }
}
   28bfc:	bd10      	pop	{r4, pc}
        return BLE_HS_EBUSY;
   28bfe:	200f      	movs	r0, #15
   28c00:	e7fc      	b.n	28bfc <ble_hs_stop_begin+0x44>
   28c02:	bf00      	nop
   28c04:	10005d0c 	.word	0x10005d0c

00028c08 <ble_hs_stop_done>:
{
   28c08:	b538      	push	{r3, r4, r5, lr}
   28c0a:	4605      	mov	r5, r0
    os_callout_stop(&co->co);
   28c0c:	480b      	ldr	r0, [pc, #44]	; (28c3c <ble_hs_stop_done+0x34>)
   28c0e:	f7f0 fa7b 	bl	19108 <os_callout_stop>
    ble_hs_lock();
   28c12:	f7fd fc91 	bl	26538 <ble_hs_lock>
    ble_gap_event_listener_unregister(&ble_hs_stop_gap_listener);
   28c16:	480a      	ldr	r0, [pc, #40]	; (28c40 <ble_hs_stop_done+0x38>)
   28c18:	f7fa f942 	bl	22ea0 <ble_gap_event_listener_unregister>
    slist = ble_hs_stop_listeners;
   28c1c:	4a09      	ldr	r2, [pc, #36]	; (28c44 <ble_hs_stop_done+0x3c>)
   28c1e:	6814      	ldr	r4, [r2, #0]
    SLIST_INIT(&ble_hs_stop_listeners);
   28c20:	2300      	movs	r3, #0
   28c22:	6013      	str	r3, [r2, #0]
    ble_hs_enabled_state = BLE_HS_ENABLED_STATE_OFF;
   28c24:	4a08      	ldr	r2, [pc, #32]	; (28c48 <ble_hs_stop_done+0x40>)
   28c26:	7013      	strb	r3, [r2, #0]
    ble_hs_unlock();
   28c28:	f7fd fc8a 	bl	26540 <ble_hs_unlock>
    SLIST_FOREACH(listener, &slist, link) {
   28c2c:	b12c      	cbz	r4, 28c3a <ble_hs_stop_done+0x32>
        listener->fn(status, listener->arg);
   28c2e:	6823      	ldr	r3, [r4, #0]
   28c30:	6861      	ldr	r1, [r4, #4]
   28c32:	4628      	mov	r0, r5
   28c34:	4798      	blx	r3
    SLIST_FOREACH(listener, &slist, link) {
   28c36:	68a4      	ldr	r4, [r4, #8]
   28c38:	e7f8      	b.n	28c2c <ble_hs_stop_done+0x24>
}
   28c3a:	bd38      	pop	{r3, r4, r5, pc}
   28c3c:	10006144 	.word	0x10006144
   28c40:	10006134 	.word	0x10006134
   28c44:	10006140 	.word	0x10006140
   28c48:	10005d0c 	.word	0x10005d0c

00028c4c <ble_hs_stop_gap_event>:
{
   28c4c:	b508      	push	{r3, lr}
    if (event->type == BLE_GAP_EVENT_DISCONNECT ||
   28c4e:	7803      	ldrb	r3, [r0, #0]
   28c50:	2b01      	cmp	r3, #1
   28c52:	d003      	beq.n	28c5c <ble_hs_stop_gap_event+0x10>
   28c54:	2b06      	cmp	r3, #6
   28c56:	d001      	beq.n	28c5c <ble_hs_stop_gap_event+0x10>
}
   28c58:	2000      	movs	r0, #0
   28c5a:	bd08      	pop	{r3, pc}
        ble_hs_stop_conn_cnt--;
   28c5c:	4a05      	ldr	r2, [pc, #20]	; (28c74 <ble_hs_stop_gap_event+0x28>)
   28c5e:	7813      	ldrb	r3, [r2, #0]
   28c60:	3b01      	subs	r3, #1
   28c62:	b2db      	uxtb	r3, r3
   28c64:	7013      	strb	r3, [r2, #0]
        if (ble_hs_stop_conn_cnt == 0) {
   28c66:	2b00      	cmp	r3, #0
   28c68:	d1f6      	bne.n	28c58 <ble_hs_stop_gap_event+0xc>
            ble_hs_stop_done(0);
   28c6a:	2000      	movs	r0, #0
   28c6c:	f7ff ffcc 	bl	28c08 <ble_hs_stop_done>
   28c70:	e7f2      	b.n	28c58 <ble_hs_stop_gap_event+0xc>
   28c72:	bf00      	nop
   28c74:	10006131 	.word	0x10006131

00028c78 <ble_hs_stop_terminate_timeout_cb>:
{
   28c78:	b508      	push	{r3, lr}
    BLE_HS_LOG(ERROR, "ble_hs_stop_terminate_timeout_cb,"
   28c7a:	4b05      	ldr	r3, [pc, #20]	; (28c90 <ble_hs_stop_terminate_timeout_cb+0x18>)
   28c7c:	781b      	ldrb	r3, [r3, #0]
   28c7e:	4a05      	ldr	r2, [pc, #20]	; (28c94 <ble_hs_stop_terminate_timeout_cb+0x1c>)
   28c80:	2103      	movs	r1, #3
   28c82:	2004      	movs	r0, #4
   28c84:	f7f4 f84a 	bl	1cd1c <modlog_printf>
    ble_hs_stop_done(0);
   28c88:	2000      	movs	r0, #0
   28c8a:	f7ff ffbd 	bl	28c08 <ble_hs_stop_done>
}
   28c8e:	bd08      	pop	{r3, pc}
   28c90:	10006131 	.word	0x10006131
   28c94:	00035028 	.word	0x00035028

00028c98 <ble_hs_stop>:

int
ble_hs_stop(struct ble_hs_stop_listener *listener, 
            ble_hs_stop_fn *fn, void *arg)
{
   28c98:	b570      	push	{r4, r5, r6, lr}
   28c9a:	4604      	mov	r4, r0
   28c9c:	460d      	mov	r5, r1
   28c9e:	4616      	mov	r6, r2
    int rc;

    ble_hs_lock();
   28ca0:	f7fd fc4a 	bl	26538 <ble_hs_lock>
    rc = ble_hs_stop_begin(listener, fn, arg);
   28ca4:	4632      	mov	r2, r6
   28ca6:	4629      	mov	r1, r5
   28ca8:	4620      	mov	r0, r4
   28caa:	f7ff ff85 	bl	28bb8 <ble_hs_stop_begin>
   28cae:	4604      	mov	r4, r0
    ble_hs_unlock();
   28cb0:	f7fd fc46 	bl	26540 <ble_hs_unlock>

    switch (rc) {
   28cb4:	b124      	cbz	r4, 28cc0 <ble_hs_stop+0x28>
   28cb6:	2c0f      	cmp	r4, #15
   28cb8:	d100      	bne.n	28cbc <ble_hs_stop+0x24>
   28cba:	2400      	movs	r4, #0
        /* No connections, stop is completed */
        ble_hs_stop_done(0);
    }

    return 0;
}
   28cbc:	4620      	mov	r0, r4
   28cbe:	bd70      	pop	{r4, r5, r6, pc}
    ble_gap_preempt();
   28cc0:	f7fa f868 	bl	22d94 <ble_gap_preempt>
    ble_gap_preempt_done();
   28cc4:	f7fa f872 	bl	22dac <ble_gap_preempt_done>
    rc = ble_gap_event_listener_register(&ble_hs_stop_gap_listener,
   28cc8:	2200      	movs	r2, #0
   28cca:	490e      	ldr	r1, [pc, #56]	; (28d04 <ble_hs_stop+0x6c>)
   28ccc:	480e      	ldr	r0, [pc, #56]	; (28d08 <ble_hs_stop+0x70>)
   28cce:	f7fa f8cf 	bl	22e70 <ble_gap_event_listener_register>
    if (rc != 0) {
   28cd2:	4604      	mov	r4, r0
   28cd4:	2800      	cmp	r0, #0
   28cd6:	d1f1      	bne.n	28cbc <ble_hs_stop+0x24>
    ble_hs_lock();
   28cd8:	f7fd fc2e 	bl	26538 <ble_hs_lock>
    ble_hs_conn_foreach(ble_hs_stop_terminate_conn, NULL);
   28cdc:	2100      	movs	r1, #0
   28cde:	480b      	ldr	r0, [pc, #44]	; (28d0c <ble_hs_stop+0x74>)
   28ce0:	f7fe fc24 	bl	2752c <ble_hs_conn_foreach>
    ble_hs_unlock();
   28ce4:	f7fd fc2c 	bl	26540 <ble_hs_unlock>
    if (ble_hs_stop_conn_cnt > 0) {
   28ce8:	4b09      	ldr	r3, [pc, #36]	; (28d10 <ble_hs_stop+0x78>)
   28cea:	781b      	ldrb	r3, [r3, #0]
   28cec:	b12b      	cbz	r3, 28cfa <ble_hs_stop+0x62>
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   28cee:	f44f 7180 	mov.w	r1, #256	; 0x100
   28cf2:	4808      	ldr	r0, [pc, #32]	; (28d14 <ble_hs_stop+0x7c>)
   28cf4:	f7f0 fa26 	bl	19144 <os_callout_reset>
   28cf8:	e7e0      	b.n	28cbc <ble_hs_stop+0x24>
        ble_hs_stop_done(0);
   28cfa:	2000      	movs	r0, #0
   28cfc:	f7ff ff84 	bl	28c08 <ble_hs_stop_done>
   28d00:	e7dc      	b.n	28cbc <ble_hs_stop+0x24>
   28d02:	bf00      	nop
   28d04:	00028c4d 	.word	0x00028c4d
   28d08:	10006134 	.word	0x10006134
   28d0c:	00028b8d 	.word	0x00028b8d
   28d10:	10006131 	.word	0x10006131
   28d14:	10006144 	.word	0x10006144

00028d18 <ble_hs_stop_init>:

void
ble_hs_stop_init(void)
{
   28d18:	b508      	push	{r3, lr}
    return (struct ble_npl_eventq *) os_eventq_dflt_get();
   28d1a:	f7f0 fc35 	bl	19588 <os_eventq_dflt_get>
   28d1e:	4601      	mov	r1, r0
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   28d20:	2300      	movs	r3, #0
   28d22:	4a02      	ldr	r2, [pc, #8]	; (28d2c <ble_hs_stop_init+0x14>)
   28d24:	4802      	ldr	r0, [pc, #8]	; (28d30 <ble_hs_stop_init+0x18>)
   28d26:	f7f0 f9e1 	bl	190ec <os_callout_init>
                         ble_hs_stop_terminate_timeout_cb, NULL);
#else
    ble_npl_callout_init(&ble_hs_stop_terminate_tmo, nimble_port_get_dflt_eventq(),
                         ble_hs_stop_terminate_timeout_cb, NULL);
#endif
}
   28d2a:	bd08      	pop	{r3, pc}
   28d2c:	00028c79 	.word	0x00028c79
   28d30:	10006144 	.word	0x10006144

00028d34 <ble_l2cap_get_mtu>:
    return rc;
}

static uint16_t
ble_l2cap_get_mtu(struct ble_l2cap_chan *chan)
{
   28d34:	b508      	push	{r3, lr}
    if (chan->scid == BLE_L2CAP_CID_ATT) {
   28d36:	8903      	ldrh	r3, [r0, #8]
   28d38:	2b04      	cmp	r3, #4
   28d3a:	d001      	beq.n	28d40 <ble_l2cap_get_mtu+0xc>
         * done
         */
        return ble_att_chan_mtu(chan);
    }

    return chan->my_mtu;
   28d3c:	8940      	ldrh	r0, [r0, #10]
}
   28d3e:	bd08      	pop	{r3, pc}
        return ble_att_chan_mtu(chan);
   28d40:	f7f6 f867 	bl	1ee12 <ble_att_chan_mtu>
   28d44:	e7fb      	b.n	28d3e <ble_l2cap_get_mtu+0xa>

00028d46 <ble_l2cap_append_rx>:
{
   28d46:	b508      	push	{r3, lr}
    m = os_mbuf_pack_chains(chan->rx_buf, frag);
   28d48:	6900      	ldr	r0, [r0, #16]
   28d4a:	f7f0 ffc8 	bl	19cde <os_mbuf_pack_chains>
    assert(m);
   28d4e:	b100      	cbz	r0, 28d52 <ble_l2cap_append_rx+0xc>
}
   28d50:	bd08      	pop	{r3, pc}
    assert(m);
   28d52:	f7eb fcd7 	bl	14704 <hal_debugger_connected>
   28d56:	b100      	cbz	r0, 28d5a <ble_l2cap_append_rx+0x14>
   28d58:	be01      	bkpt	0x0001
   28d5a:	2300      	movs	r3, #0
   28d5c:	461a      	mov	r2, r3
   28d5e:	4619      	mov	r1, r3
   28d60:	4618      	mov	r0, r3
   28d62:	f7ef ffdf 	bl	18d24 <__assert_func>
	...

00028d68 <ble_l2cap_chan_alloc>:
{
   28d68:	b510      	push	{r4, lr}
   28d6a:	4604      	mov	r4, r0
    chan = os_memblock_get(&ble_l2cap_chan_pool);
   28d6c:	4809      	ldr	r0, [pc, #36]	; (28d94 <ble_l2cap_chan_alloc+0x2c>)
   28d6e:	f7f1 f880 	bl	19e72 <os_memblock_get>
    if (chan == NULL) {
   28d72:	4603      	mov	r3, r0
   28d74:	b160      	cbz	r0, 28d90 <ble_l2cap_chan_alloc+0x28>
    memset(chan, 0, sizeof *chan);
   28d76:	2200      	movs	r2, #0
   28d78:	6002      	str	r2, [r0, #0]
   28d7a:	6042      	str	r2, [r0, #4]
   28d7c:	6082      	str	r2, [r0, #8]
   28d7e:	60c2      	str	r2, [r0, #12]
   28d80:	6102      	str	r2, [r0, #16]
   28d82:	6142      	str	r2, [r0, #20]
   28d84:	6182      	str	r2, [r0, #24]
    chan->conn_handle = conn_handle;
   28d86:	8084      	strh	r4, [r0, #4]
    STATS_INC(ble_l2cap_stats, chan_create);
   28d88:	4903      	ldr	r1, [pc, #12]	; (28d98 <ble_l2cap_chan_alloc+0x30>)
   28d8a:	68ca      	ldr	r2, [r1, #12]
   28d8c:	3201      	adds	r2, #1
   28d8e:	60ca      	str	r2, [r1, #12]
}
   28d90:	4618      	mov	r0, r3
   28d92:	bd10      	pop	{r4, pc}
   28d94:	100061b8 	.word	0x100061b8
   28d98:	100061d4 	.word	0x100061d4

00028d9c <ble_l2cap_chan_free>:
    if (chan == NULL) {
   28d9c:	b169      	cbz	r1, 28dba <ble_l2cap_chan_free+0x1e>
{
   28d9e:	b510      	push	{r4, lr}
   28da0:	460c      	mov	r4, r1
    os_mbuf_free_chain(chan->rx_buf);
   28da2:	6908      	ldr	r0, [r1, #16]
   28da4:	f7f0 fc33 	bl	1960e <os_mbuf_free_chain>
    rc = os_memblock_put(&ble_l2cap_chan_pool, chan);
   28da8:	4621      	mov	r1, r4
   28daa:	4804      	ldr	r0, [pc, #16]	; (28dbc <ble_l2cap_chan_free+0x20>)
   28dac:	f7f1 f889 	bl	19ec2 <os_memblock_put>
    STATS_INC(ble_l2cap_stats, chan_delete);
   28db0:	4a03      	ldr	r2, [pc, #12]	; (28dc0 <ble_l2cap_chan_free+0x24>)
   28db2:	6913      	ldr	r3, [r2, #16]
   28db4:	3301      	adds	r3, #1
   28db6:	6113      	str	r3, [r2, #16]
}
   28db8:	bd10      	pop	{r4, pc}
   28dba:	4770      	bx	lr
   28dbc:	100061b8 	.word	0x100061b8
   28dc0:	100061d4 	.word	0x100061d4

00028dc4 <ble_l2cap_is_mtu_req_sent>:
    return (chan->flags & BLE_L2CAP_CHAN_F_TXED_MTU);
   28dc4:	7b80      	ldrb	r0, [r0, #14]
}
   28dc6:	f000 0001 	and.w	r0, r0, #1
   28dca:	4770      	bx	lr

00028dcc <ble_l2cap_parse_hdr>:
{
   28dcc:	b538      	push	{r3, r4, r5, lr}
   28dce:	4614      	mov	r4, r2
    rc = os_mbuf_copydata(om, off, sizeof *l2cap_hdr, l2cap_hdr);
   28dd0:	4613      	mov	r3, r2
   28dd2:	2204      	movs	r2, #4
   28dd4:	f7f0 fcbc 	bl	19750 <os_mbuf_copydata>
    if (rc != 0) {
   28dd8:	b960      	cbnz	r0, 28df4 <ble_l2cap_parse_hdr+0x28>
   28dda:	4605      	mov	r5, r0
    l2cap_hdr->len = get_le16(&l2cap_hdr->len);
   28ddc:	4620      	mov	r0, r4
   28dde:	f7f0 f81d 	bl	18e1c <get_le16>
   28de2:	4623      	mov	r3, r4
   28de4:	f823 0b02 	strh.w	r0, [r3], #2
    l2cap_hdr->cid = get_le16(&l2cap_hdr->cid);
   28de8:	4618      	mov	r0, r3
   28dea:	f7f0 f817 	bl	18e1c <get_le16>
   28dee:	8060      	strh	r0, [r4, #2]
}
   28df0:	4628      	mov	r0, r5
   28df2:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_EMSGSIZE;
   28df4:	2504      	movs	r5, #4
   28df6:	e7fb      	b.n	28df0 <ble_l2cap_parse_hdr+0x24>

00028df8 <ble_l2cap_prepend_hdr>:
{
   28df8:	b530      	push	{r4, r5, lr}
   28dfa:	b083      	sub	sp, #12
   28dfc:	4604      	mov	r4, r0
   28dfe:	460d      	mov	r5, r1
    put_le16(&hdr.len, len);
   28e00:	4611      	mov	r1, r2
   28e02:	a801      	add	r0, sp, #4
   28e04:	f7ef fffc 	bl	18e00 <put_le16>
    put_le16(&hdr.cid, cid);
   28e08:	4629      	mov	r1, r5
   28e0a:	f10d 0006 	add.w	r0, sp, #6
   28e0e:	f7ef fff7 	bl	18e00 <put_le16>
    om = os_mbuf_prepend_pullup(om, sizeof hdr);
   28e12:	2104      	movs	r1, #4
   28e14:	4620      	mov	r0, r4
   28e16:	f7f0 ff2f 	bl	19c78 <os_mbuf_prepend_pullup>
    if (om == NULL) {
   28e1a:	b110      	cbz	r0, 28e22 <ble_l2cap_prepend_hdr+0x2a>
    memcpy(om->om_data, &hdr, sizeof hdr);
   28e1c:	6803      	ldr	r3, [r0, #0]
   28e1e:	9a01      	ldr	r2, [sp, #4]
   28e20:	601a      	str	r2, [r3, #0]
}
   28e22:	b003      	add	sp, #12
   28e24:	bd30      	pop	{r4, r5, pc}

00028e26 <ble_l2cap_get_conn_handle>:
    if (!chan) {
   28e26:	b108      	cbz	r0, 28e2c <ble_l2cap_get_conn_handle+0x6>
    return chan->conn_handle;
   28e28:	8880      	ldrh	r0, [r0, #4]
   28e2a:	4770      	bx	lr
        return BLE_HS_CONN_HANDLE_NONE;
   28e2c:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   28e30:	4770      	bx	lr

00028e32 <ble_l2cap_remove_rx>:
{
   28e32:	b538      	push	{r3, r4, r5, lr}
   28e34:	460c      	mov	r4, r1
    conn->bhc_rx_chan = NULL;
   28e36:	2500      	movs	r5, #0
   28e38:	6305      	str	r5, [r0, #48]	; 0x30
    os_mbuf_free_chain(chan->rx_buf);
   28e3a:	6908      	ldr	r0, [r1, #16]
   28e3c:	f7f0 fbe7 	bl	1960e <os_mbuf_free_chain>
    chan->rx_buf = NULL;
   28e40:	6125      	str	r5, [r4, #16]
    chan->rx_len = 0;
   28e42:	82a5      	strh	r5, [r4, #20]
}
   28e44:	bd38      	pop	{r3, r4, r5, pc}

00028e46 <ble_l2cap_rx_payload>:
{
   28e46:	b570      	push	{r4, r5, r6, lr}
   28e48:	4605      	mov	r5, r0
   28e4a:	460c      	mov	r4, r1
   28e4c:	4611      	mov	r1, r2
   28e4e:	461e      	mov	r6, r3
    if (chan->rx_buf == NULL) {
   28e50:	6923      	ldr	r3, [r4, #16]
   28e52:	b163      	cbz	r3, 28e6e <ble_l2cap_rx_payload+0x28>
        ble_l2cap_append_rx(chan, om);
   28e54:	4620      	mov	r0, r4
   28e56:	f7ff ff76 	bl	28d46 <ble_l2cap_append_rx>
    len_diff = OS_MBUF_PKTLEN(chan->rx_buf) - chan->rx_len;
   28e5a:	6923      	ldr	r3, [r4, #16]
   28e5c:	8a1a      	ldrh	r2, [r3, #16]
   28e5e:	8aa0      	ldrh	r0, [r4, #20]
   28e60:	1a10      	subs	r0, r2, r0
    if (len_diff > 0) {
   28e62:	2800      	cmp	r0, #0
   28e64:	dc05      	bgt.n	28e72 <ble_l2cap_rx_payload+0x2c>
    } else if (len_diff == 0) {
   28e66:	b950      	cbnz	r0, 28e7e <ble_l2cap_rx_payload+0x38>
        *out_rx_cb = chan->rx_fn;
   28e68:	69a3      	ldr	r3, [r4, #24]
   28e6a:	6033      	str	r3, [r6, #0]
}
   28e6c:	bd70      	pop	{r4, r5, r6, pc}
        chan->rx_buf = om;
   28e6e:	6122      	str	r2, [r4, #16]
   28e70:	e7f3      	b.n	28e5a <ble_l2cap_rx_payload+0x14>
        ble_l2cap_remove_rx(conn, chan);
   28e72:	4621      	mov	r1, r4
   28e74:	4628      	mov	r0, r5
   28e76:	f7ff ffdc 	bl	28e32 <ble_l2cap_remove_rx>
        rc = BLE_HS_EBADDATA;
   28e7a:	200a      	movs	r0, #10
   28e7c:	e7f6      	b.n	28e6c <ble_l2cap_rx_payload+0x26>
    return os_time_get();
   28e7e:	f7f1 fbf5 	bl	1a66c <os_time_get>
            ble_npl_time_get() + MYNEWT_VAL(BLE_L2CAP_RX_FRAG_TIMEOUT);
   28e82:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
   28e86:	3030      	adds	r0, #48	; 0x30
        conn->bhc_rx_timeout =
   28e88:	6368      	str	r0, [r5, #52]	; 0x34
        ble_hs_timer_resched();
   28e8a:	f7fd fc47 	bl	2671c <ble_hs_timer_resched>
        rc = BLE_HS_EAGAIN;
   28e8e:	2001      	movs	r0, #1
    return rc;
   28e90:	e7ec      	b.n	28e6c <ble_l2cap_rx_payload+0x26>

00028e92 <ble_l2cap_rx>:
ble_l2cap_rx(struct ble_hs_conn *conn,
             struct hci_data_hdr *hci_hdr,
             struct os_mbuf *om,
             ble_l2cap_rx_fn **out_rx_cb,
             int *out_reject_cid)
{
   28e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28e96:	b082      	sub	sp, #8
   28e98:	4606      	mov	r6, r0
   28e9a:	4614      	mov	r4, r2
   28e9c:	461f      	mov	r7, r3
   28e9e:	9d08      	ldr	r5, [sp, #32]
    struct ble_l2cap_chan *chan;
    struct ble_l2cap_hdr l2cap_hdr;
    uint8_t pb;
    int rc;

    *out_reject_cid = -1;
   28ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28ea4:	602b      	str	r3, [r5, #0]

    pb = BLE_HCI_DATA_PB(hci_hdr->hdh_handle_pb_bc);
   28ea6:	8809      	ldrh	r1, [r1, #0]
   28ea8:	f3c1 3101 	ubfx	r1, r1, #12, #2
    switch (pb) {
   28eac:	2901      	cmp	r1, #1
   28eae:	d031      	beq.n	28f14 <ble_l2cap_rx+0x82>
   28eb0:	2902      	cmp	r1, #2
   28eb2:	d141      	bne.n	28f38 <ble_l2cap_rx+0xa6>
    case BLE_HCI_PB_FIRST_FLUSH:
        /* First fragment. */
        rc = ble_l2cap_parse_hdr(om, 0, &l2cap_hdr);
   28eb4:	aa01      	add	r2, sp, #4
   28eb6:	2100      	movs	r1, #0
   28eb8:	4620      	mov	r0, r4
   28eba:	f7ff ff87 	bl	28dcc <ble_l2cap_parse_hdr>
        if (rc != 0) {
   28ebe:	4680      	mov	r8, r0
   28ec0:	bbe0      	cbnz	r0, 28f3c <ble_l2cap_rx+0xaa>
            goto err;
        }

        /* Strip L2CAP header from the front of the mbuf. */
        os_mbuf_adj(om, BLE_L2CAP_HDR_SZ);
   28ec2:	2104      	movs	r1, #4
   28ec4:	4620      	mov	r0, r4
   28ec6:	f7f0 fc70 	bl	197aa <os_mbuf_adj>

        chan = ble_hs_conn_chan_find_by_scid(conn, l2cap_hdr.cid);
   28eca:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   28ece:	4630      	mov	r0, r6
   28ed0:	f7fe faf0 	bl	274b4 <ble_hs_conn_chan_find_by_scid>
        if (chan == NULL) {
   28ed4:	4680      	mov	r8, r0
   28ed6:	b198      	cbz	r0, 28f00 <ble_l2cap_rx+0x6e>
                *out_reject_cid = l2cap_hdr.cid;
            }
            goto err;
        }

        if (chan->rx_buf != NULL) {
   28ed8:	6903      	ldr	r3, [r0, #16]
   28eda:	b11b      	cbz	r3, 28ee4 <ble_l2cap_rx+0x52>
            /* Previous data packet never completed.  Discard old packet. */
            ble_l2cap_remove_rx(conn, chan);
   28edc:	4601      	mov	r1, r0
   28ede:	4630      	mov	r0, r6
   28ee0:	f7ff ffa7 	bl	28e32 <ble_l2cap_remove_rx>
        }

        if (l2cap_hdr.len > ble_l2cap_get_mtu(chan)) {
   28ee4:	f8bd 5004 	ldrh.w	r5, [sp, #4]
   28ee8:	4640      	mov	r0, r8
   28eea:	f7ff ff23 	bl	28d34 <ble_l2cap_get_mtu>
   28eee:	4285      	cmp	r5, r0
   28ef0:	d82b      	bhi.n	28f4a <ble_l2cap_rx+0xb8>
            ble_l2cap_disconnect(chan);
            goto err;
        }

        /* Remember channel and length of L2CAP data for reassembly. */
        conn->bhc_rx_chan = chan;
   28ef2:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
        chan->rx_len = l2cap_hdr.len;
   28ef6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   28efa:	f8a8 3014 	strh.w	r3, [r8, #20]
        break;
   28efe:	e011      	b.n	28f24 <ble_l2cap_rx+0x92>
            if (l2cap_hdr.cid != BLE_L2CAP_CID_BLACK_HOLE) {
   28f00:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   28f04:	f64f 72ff 	movw	r2, #65535	; 0xffff
   28f08:	4293      	cmp	r3, r2
   28f0a:	d000      	beq.n	28f0e <ble_l2cap_rx+0x7c>
                *out_reject_cid = l2cap_hdr.cid;
   28f0c:	602b      	str	r3, [r5, #0]
            rc = BLE_HS_ENOENT;
   28f0e:	f04f 0805 	mov.w	r8, #5
            goto err;
   28f12:	e013      	b.n	28f3c <ble_l2cap_rx+0xaa>

    case BLE_HCI_PB_MIDDLE:
        chan = conn->bhc_rx_chan;
   28f14:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
        if (chan == NULL || chan->rx_buf == NULL) {
   28f18:	f1b8 0f00 	cmp.w	r8, #0
   28f1c:	d018      	beq.n	28f50 <ble_l2cap_rx+0xbe>
   28f1e:	f8d8 3010 	ldr.w	r3, [r8, #16]
   28f22:	b1c3      	cbz	r3, 28f56 <ble_l2cap_rx+0xc4>
    default:
        rc = BLE_HS_EBADDATA;
        goto err;
    }

    rc = ble_l2cap_rx_payload(conn, chan, om, out_rx_cb);
   28f24:	463b      	mov	r3, r7
   28f26:	4622      	mov	r2, r4
   28f28:	4641      	mov	r1, r8
   28f2a:	4630      	mov	r0, r6
   28f2c:	f7ff ff8b 	bl	28e46 <ble_l2cap_rx_payload>
    om = NULL;
    if (rc != 0) {
   28f30:	4680      	mov	r8, r0
   28f32:	b130      	cbz	r0, 28f42 <ble_l2cap_rx+0xb0>
    om = NULL;
   28f34:	2400      	movs	r4, #0
   28f36:	e001      	b.n	28f3c <ble_l2cap_rx+0xaa>
    switch (pb) {
   28f38:	f04f 080a 	mov.w	r8, #10
    }

    return 0;

err:
    os_mbuf_free_chain(om);
   28f3c:	4620      	mov	r0, r4
   28f3e:	f7f0 fb66 	bl	1960e <os_mbuf_free_chain>
    return rc;
}
   28f42:	4640      	mov	r0, r8
   28f44:	b002      	add	sp, #8
   28f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_EBADDATA;
   28f4a:	f04f 080a 	mov.w	r8, #10
   28f4e:	e7f5      	b.n	28f3c <ble_l2cap_rx+0xaa>
            rc = BLE_HS_EBADDATA;
   28f50:	f04f 080a 	mov.w	r8, #10
   28f54:	e7f2      	b.n	28f3c <ble_l2cap_rx+0xaa>
   28f56:	f04f 080a 	mov.w	r8, #10
   28f5a:	e7ef      	b.n	28f3c <ble_l2cap_rx+0xaa>

00028f5c <ble_l2cap_tx>:
 * @return                      0 on success; nonzero on error.
 */
int
ble_l2cap_tx(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan,
             struct os_mbuf *txom)
{
   28f5c:	b510      	push	{r4, lr}
   28f5e:	b082      	sub	sp, #8
   28f60:	4604      	mov	r4, r0
   28f62:	9201      	str	r2, [sp, #4]
    int rc;

    txom = ble_l2cap_prepend_hdr(txom, chan->dcid, OS_MBUF_PKTLEN(txom));
   28f64:	4610      	mov	r0, r2
   28f66:	8a12      	ldrh	r2, [r2, #16]
   28f68:	88c9      	ldrh	r1, [r1, #6]
   28f6a:	f7ff ff45 	bl	28df8 <ble_l2cap_prepend_hdr>
   28f6e:	9001      	str	r0, [sp, #4]
    if (txom == NULL) {
   28f70:	b188      	cbz	r0, 28f96 <ble_l2cap_tx+0x3a>
        return BLE_HS_ENOMEM;
    }

    rc = ble_hs_hci_acl_tx(conn, &txom);
   28f72:	a901      	add	r1, sp, #4
   28f74:	4620      	mov	r0, r4
   28f76:	f7fe fe65 	bl	27c44 <ble_hs_hci_acl_tx>
    switch (rc) {
   28f7a:	b150      	cbz	r0, 28f92 <ble_l2cap_tx+0x36>
   28f7c:	2801      	cmp	r0, #1
   28f7e:	d108      	bne.n	28f92 <ble_l2cap_tx+0x36>
        /* Success. */
        return 0;

    case BLE_HS_EAGAIN:
        /* Controller could not accommodate full packet.  Enqueue remainder. */
        STAILQ_INSERT_TAIL(&conn->bhc_tx_q, OS_MBUF_PKTHDR(txom), omp_next);
   28f80:	9b01      	ldr	r3, [sp, #4]
   28f82:	2000      	movs	r0, #0
   28f84:	6158      	str	r0, [r3, #20]
   28f86:	6c22      	ldr	r2, [r4, #64]	; 0x40
   28f88:	3310      	adds	r3, #16
   28f8a:	6013      	str	r3, [r2, #0]
   28f8c:	9b01      	ldr	r3, [sp, #4]
   28f8e:	3314      	adds	r3, #20
   28f90:	6423      	str	r3, [r4, #64]	; 0x40

    default:
        /* Error. */
        return rc;
    }
}
   28f92:	b002      	add	sp, #8
   28f94:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOMEM;
   28f96:	2006      	movs	r0, #6
   28f98:	e7fb      	b.n	28f92 <ble_l2cap_tx+0x36>
	...

00028f9c <ble_l2cap_init>:

int
ble_l2cap_init(void)
{
   28f9c:	b500      	push	{lr}
   28f9e:	b083      	sub	sp, #12
    int rc;

    rc = os_mempool_init(&ble_l2cap_chan_pool,
   28fa0:	4b0d      	ldr	r3, [pc, #52]	; (28fd8 <ble_l2cap_init+0x3c>)
   28fa2:	9300      	str	r3, [sp, #0]
   28fa4:	4b0d      	ldr	r3, [pc, #52]	; (28fdc <ble_l2cap_init+0x40>)
   28fa6:	221c      	movs	r2, #28
   28fa8:	2103      	movs	r1, #3
   28faa:	480d      	ldr	r0, [pc, #52]	; (28fe0 <ble_l2cap_init+0x44>)
   28fac:	f7f0 ff2a 	bl	19e04 <os_mempool_init>
                         MYNEWT_VAL(BLE_L2CAP_MAX_CHANS) +
                         MYNEWT_VAL(BLE_L2CAP_COC_MAX_NUM),
                         sizeof (struct ble_l2cap_chan),
                         ble_l2cap_chan_mem, "ble_l2cap_chan_pool");
    if (rc != 0) {
   28fb0:	b970      	cbnz	r0, 28fd0 <ble_l2cap_init+0x34>
        return BLE_HS_EOS;
    }

    rc = ble_l2cap_sig_init();
   28fb2:	f000 fa69 	bl	29488 <ble_l2cap_sig_init>
    if (rc != 0) {
   28fb6:	b960      	cbnz	r0, 28fd2 <ble_l2cap_init+0x36>
    rc = ble_sm_init();
    if (rc != 0) {
        return rc;
    }

    rc = stats_init_and_reg(
   28fb8:	4b0a      	ldr	r3, [pc, #40]	; (28fe4 <ble_l2cap_init+0x48>)
   28fba:	9301      	str	r3, [sp, #4]
   28fbc:	2300      	movs	r3, #0
   28fbe:	9300      	str	r3, [sp, #0]
   28fc0:	220a      	movs	r2, #10
   28fc2:	2104      	movs	r1, #4
   28fc4:	4808      	ldr	r0, [pc, #32]	; (28fe8 <ble_l2cap_init+0x4c>)
   28fc6:	f7f4 ffad 	bl	1df24 <stats_init_and_reg>
        STATS_HDR(ble_l2cap_stats), STATS_SIZE_INIT_PARMS(ble_l2cap_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_l2cap_stats), "ble_l2cap");
    if (rc != 0) {
   28fca:	b110      	cbz	r0, 28fd2 <ble_l2cap_init+0x36>
        return BLE_HS_EOS;
   28fcc:	200b      	movs	r0, #11
   28fce:	e000      	b.n	28fd2 <ble_l2cap_init+0x36>
        return BLE_HS_EOS;
   28fd0:	200b      	movs	r0, #11
    }

    return 0;
}
   28fd2:	b003      	add	sp, #12
   28fd4:	f85d fb04 	ldr.w	pc, [sp], #4
   28fd8:	00035068 	.word	0x00035068
   28fdc:	10006164 	.word	0x10006164
   28fe0:	100061b8 	.word	0x100061b8
   28fe4:	0003507c 	.word	0x0003507c
   28fe8:	100061d4 	.word	0x100061d4

00028fec <ble_l2cap_sig_next_id>:
 *****************************************************************************/

static uint8_t
ble_l2cap_sig_next_id(void)
{
    ble_l2cap_sig_cur_id++;
   28fec:	4a05      	ldr	r2, [pc, #20]	; (29004 <ble_l2cap_sig_next_id+0x18>)
   28fee:	7813      	ldrb	r3, [r2, #0]
   28ff0:	3301      	adds	r3, #1
   28ff2:	b2db      	uxtb	r3, r3
   28ff4:	7013      	strb	r3, [r2, #0]
    if (ble_l2cap_sig_cur_id == 0) {
   28ff6:	b913      	cbnz	r3, 28ffe <ble_l2cap_sig_next_id+0x12>
        /* An ID of 0 is illegal. */
        ble_l2cap_sig_cur_id = 1;
   28ff8:	4613      	mov	r3, r2
   28ffa:	2201      	movs	r2, #1
   28ffc:	701a      	strb	r2, [r3, #0]
    }

    return ble_l2cap_sig_cur_id;
}
   28ffe:	4b01      	ldr	r3, [pc, #4]	; (29004 <ble_l2cap_sig_next_id+0x18>)
   29000:	7818      	ldrb	r0, [r3, #0]
   29002:	4770      	bx	lr
   29004:	10006208 	.word	0x10006208

00029008 <ble_l2cap_sig_dispatch_get>:

static ble_l2cap_sig_rx_fn *
ble_l2cap_sig_dispatch_get(uint8_t op)
{
    if (op >= BLE_L2CAP_SIG_OP_MAX) {
   29008:	281a      	cmp	r0, #26
   2900a:	d803      	bhi.n	29014 <ble_l2cap_sig_dispatch_get+0xc>
        return NULL;
    }

    return ble_l2cap_sig_dispatch[op];
   2900c:	4b02      	ldr	r3, [pc, #8]	; (29018 <ble_l2cap_sig_dispatch_get+0x10>)
   2900e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   29012:	4770      	bx	lr
        return NULL;
   29014:	2000      	movs	r0, #0
}
   29016:	4770      	bx	lr
   29018:	000350a0 	.word	0x000350a0

0002901c <ble_l2cap_sig_proc_matches>:
 * @return                      1 if the proc matches; 0 otherwise.
 */
static int
ble_l2cap_sig_proc_matches(struct ble_l2cap_sig_proc *proc,
                           uint16_t conn_handle, uint8_t op, uint8_t id)
{
   2901c:	b410      	push	{r4}
    if (conn_handle != proc->conn_handle) {
   2901e:	8904      	ldrh	r4, [r0, #8]
   29020:	428c      	cmp	r4, r1
   29022:	d108      	bne.n	29036 <ble_l2cap_sig_proc_matches+0x1a>
        return 0;
    }

    if (op != proc->op) {
   29024:	7a81      	ldrb	r1, [r0, #10]
   29026:	4291      	cmp	r1, r2
   29028:	d108      	bne.n	2903c <ble_l2cap_sig_proc_matches+0x20>
        return 0;
    }

    if (id != 0 && id != proc->id) {
   2902a:	b14b      	cbz	r3, 29040 <ble_l2cap_sig_proc_matches+0x24>
   2902c:	7ac2      	ldrb	r2, [r0, #11]
   2902e:	429a      	cmp	r2, r3
   29030:	d108      	bne.n	29044 <ble_l2cap_sig_proc_matches+0x28>
        return 0;
    }

    return 1;
   29032:	2001      	movs	r0, #1
   29034:	e000      	b.n	29038 <ble_l2cap_sig_proc_matches+0x1c>
        return 0;
   29036:	2000      	movs	r0, #0
}
   29038:	bc10      	pop	{r4}
   2903a:	4770      	bx	lr
        return 0;
   2903c:	2000      	movs	r0, #0
   2903e:	e7fb      	b.n	29038 <ble_l2cap_sig_proc_matches+0x1c>
    return 1;
   29040:	2001      	movs	r0, #1
   29042:	e7f9      	b.n	29038 <ble_l2cap_sig_proc_matches+0x1c>
        return 0;
   29044:	2000      	movs	r0, #0
   29046:	e7f7      	b.n	29038 <ble_l2cap_sig_proc_matches+0x1c>

00029048 <ble_l2cap_sig_rx_noop>:
ble_l2cap_sig_rx_noop(uint16_t conn_handle,
                      struct ble_l2cap_sig_hdr *hdr,
                      struct os_mbuf **om)
{
    return BLE_HS_ENOTSUP;
}
   29048:	2008      	movs	r0, #8
   2904a:	4770      	bx	lr

0002904c <ble_l2cap_sig_update_call_cb>:
 * $update                                                                   *
 *****************************************************************************/

static void
ble_l2cap_sig_update_call_cb(struct ble_l2cap_sig_proc *proc, int status)
{
   2904c:	b510      	push	{r4, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (status != 0) {
   2904e:	460c      	mov	r4, r1
   29050:	b119      	cbz	r1, 2905a <ble_l2cap_sig_update_call_cb+0xe>
        STATS_INC(ble_l2cap_stats, update_fail);
   29052:	4a05      	ldr	r2, [pc, #20]	; (29068 <ble_l2cap_sig_update_call_cb+0x1c>)
   29054:	69d3      	ldr	r3, [r2, #28]
   29056:	3301      	adds	r3, #1
   29058:	61d3      	str	r3, [r2, #28]
    }

    if (proc->update.cb != NULL) {
   2905a:	68c3      	ldr	r3, [r0, #12]
   2905c:	b11b      	cbz	r3, 29066 <ble_l2cap_sig_update_call_cb+0x1a>
        proc->update.cb(proc->conn_handle, status, proc->update.cb_arg);
   2905e:	6902      	ldr	r2, [r0, #16]
   29060:	4621      	mov	r1, r4
   29062:	8900      	ldrh	r0, [r0, #8]
   29064:	4798      	blx	r3
    }
}
   29066:	bd10      	pop	{r4, pc}
   29068:	100061d4 	.word	0x100061d4

0002906c <ble_l2cap_sig_proc_insert>:
{
   2906c:	b510      	push	{r4, lr}
   2906e:	4604      	mov	r4, r0
    ble_hs_lock();
   29070:	f7fd fa62 	bl	26538 <ble_hs_lock>
    STAILQ_INSERT_HEAD(&ble_l2cap_sig_procs, proc, next);
   29074:	4b05      	ldr	r3, [pc, #20]	; (2908c <ble_l2cap_sig_proc_insert+0x20>)
   29076:	681b      	ldr	r3, [r3, #0]
   29078:	6023      	str	r3, [r4, #0]
   2907a:	b123      	cbz	r3, 29086 <ble_l2cap_sig_proc_insert+0x1a>
   2907c:	4b03      	ldr	r3, [pc, #12]	; (2908c <ble_l2cap_sig_proc_insert+0x20>)
   2907e:	601c      	str	r4, [r3, #0]
    ble_hs_unlock();
   29080:	f7fd fa5e 	bl	26540 <ble_hs_unlock>
}
   29084:	bd10      	pop	{r4, pc}
    STAILQ_INSERT_HEAD(&ble_l2cap_sig_procs, proc, next);
   29086:	4b01      	ldr	r3, [pc, #4]	; (2908c <ble_l2cap_sig_proc_insert+0x20>)
   29088:	605c      	str	r4, [r3, #4]
   2908a:	e7f7      	b.n	2907c <ble_l2cap_sig_proc_insert+0x10>
   2908c:	1000623c 	.word	0x1000623c

00029090 <ble_l2cap_sig_proc_extract>:
{
   29090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29094:	4607      	mov	r7, r0
   29096:	460e      	mov	r6, r1
   29098:	4615      	mov	r5, r2
    ble_hs_lock();
   2909a:	f7fd fa4d 	bl	26538 <ble_hs_lock>
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   2909e:	4b15      	ldr	r3, [pc, #84]	; (290f4 <ble_l2cap_sig_proc_extract+0x64>)
   290a0:	f8d3 9000 	ldr.w	r9, [r3]
   290a4:	464c      	mov	r4, r9
    prev = NULL;
   290a6:	f04f 0800 	mov.w	r8, #0
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   290aa:	b194      	cbz	r4, 290d2 <ble_l2cap_sig_proc_extract+0x42>
        if (ble_l2cap_sig_proc_matches(proc, conn_handle, op, identifier)) {
   290ac:	462b      	mov	r3, r5
   290ae:	4632      	mov	r2, r6
   290b0:	4639      	mov	r1, r7
   290b2:	4620      	mov	r0, r4
   290b4:	f7ff ffb2 	bl	2901c <ble_l2cap_sig_proc_matches>
   290b8:	b910      	cbnz	r0, 290c0 <ble_l2cap_sig_proc_extract+0x30>
        prev = proc;
   290ba:	46a0      	mov	r8, r4
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   290bc:	6824      	ldr	r4, [r4, #0]
   290be:	e7f4      	b.n	290aa <ble_l2cap_sig_proc_extract+0x1a>
            if (prev == NULL) {
   290c0:	f1b8 0f00 	cmp.w	r8, #0
   290c4:	d00a      	beq.n	290dc <ble_l2cap_sig_proc_extract+0x4c>
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
   290c6:	f8d8 3000 	ldr.w	r3, [r8]
   290ca:	681b      	ldr	r3, [r3, #0]
   290cc:	f8c8 3000 	str.w	r3, [r8]
   290d0:	b163      	cbz	r3, 290ec <ble_l2cap_sig_proc_extract+0x5c>
    ble_hs_unlock();
   290d2:	f7fd fa35 	bl	26540 <ble_hs_unlock>
}
   290d6:	4620      	mov	r0, r4
   290d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   290dc:	f8d9 3000 	ldr.w	r3, [r9]
   290e0:	4a04      	ldr	r2, [pc, #16]	; (290f4 <ble_l2cap_sig_proc_extract+0x64>)
   290e2:	6013      	str	r3, [r2, #0]
   290e4:	2b00      	cmp	r3, #0
   290e6:	d1f4      	bne.n	290d2 <ble_l2cap_sig_proc_extract+0x42>
   290e8:	6052      	str	r2, [r2, #4]
   290ea:	e7f2      	b.n	290d2 <ble_l2cap_sig_proc_extract+0x42>
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
   290ec:	4b01      	ldr	r3, [pc, #4]	; (290f4 <ble_l2cap_sig_proc_extract+0x64>)
   290ee:	f8c3 8004 	str.w	r8, [r3, #4]
   290f2:	e7ee      	b.n	290d2 <ble_l2cap_sig_proc_extract+0x42>
   290f4:	1000623c 	.word	0x1000623c

000290f8 <ble_l2cap_sig_proc_alloc>:
{
   290f8:	b508      	push	{r3, lr}
    proc = os_memblock_get(&ble_l2cap_sig_proc_pool);
   290fa:	4806      	ldr	r0, [pc, #24]	; (29114 <ble_l2cap_sig_proc_alloc+0x1c>)
   290fc:	f7f0 feb9 	bl	19e72 <os_memblock_get>
    if (proc != NULL) {
   29100:	4603      	mov	r3, r0
   29102:	b128      	cbz	r0, 29110 <ble_l2cap_sig_proc_alloc+0x18>
        memset(proc, 0, sizeof *proc);
   29104:	2200      	movs	r2, #0
   29106:	6002      	str	r2, [r0, #0]
   29108:	6042      	str	r2, [r0, #4]
   2910a:	6082      	str	r2, [r0, #8]
   2910c:	60c2      	str	r2, [r0, #12]
   2910e:	6102      	str	r2, [r0, #16]
}
   29110:	4618      	mov	r0, r3
   29112:	bd08      	pop	{r3, pc}
   29114:	10006220 	.word	0x10006220

00029118 <ble_l2cap_sig_proc_set_timer>:
{
   29118:	b510      	push	{r4, lr}
   2911a:	4604      	mov	r4, r0
   2911c:	f7f1 faa6 	bl	1a66c <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   29120:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   29124:	6060      	str	r0, [r4, #4]
    ble_hs_timer_resched();
   29126:	f7fd faf9 	bl	2671c <ble_hs_timer_resched>
}
   2912a:	bd10      	pop	{r4, pc}

0002912c <ble_l2cap_sig_extract_expired>:
 * @return                      The number of ticks until the next expiration
 *                                  occurs.
 */
static int32_t
ble_l2cap_sig_extract_expired(struct ble_l2cap_sig_proc_list *dst_list)
{
   2912c:	b570      	push	{r4, r5, r6, lr}
   2912e:	4604      	mov	r4, r0
   29130:	f7f1 fa9c 	bl	1a66c <os_time_get>
   29134:	4605      	mov	r5, r0
    ble_npl_time_t now;
    ble_npl_stime_t next_exp_in;
    ble_npl_stime_t time_diff;

    now = ble_npl_time_get();
    STAILQ_INIT(dst_list);
   29136:	2300      	movs	r3, #0
   29138:	6023      	str	r3, [r4, #0]
   2913a:	6064      	str	r4, [r4, #4]

    /* Assume each event is either expired or has infinite duration. */
    next_exp_in = BLE_HS_FOREVER;

    ble_hs_lock();
   2913c:	f7fd f9fc 	bl	26538 <ble_hs_lock>

    prev = NULL;
    proc = STAILQ_FIRST(&ble_l2cap_sig_procs);
   29140:	4b0f      	ldr	r3, [pc, #60]	; (29180 <ble_l2cap_sig_extract_expired+0x54>)
   29142:	681b      	ldr	r3, [r3, #0]
    next_exp_in = BLE_HS_FOREVER;
   29144:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    while (proc != NULL) {
   29148:	e00a      	b.n	29160 <ble_l2cap_sig_extract_expired+0x34>

        time_diff = proc->exp_os_ticks - now;
        if (time_diff <= 0) {
            /* Procedure has expired; move it to the destination list. */
            if (prev == NULL) {
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   2914a:	480d      	ldr	r0, [pc, #52]	; (29180 <ble_l2cap_sig_extract_expired+0x54>)
   2914c:	6802      	ldr	r2, [r0, #0]
   2914e:	6812      	ldr	r2, [r2, #0]
   29150:	6002      	str	r2, [r0, #0]
   29152:	b17a      	cbz	r2, 29174 <ble_l2cap_sig_extract_expired+0x48>
            } else {
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
            }
            STAILQ_INSERT_TAIL(dst_list, proc, next);
   29154:	2200      	movs	r2, #0
   29156:	601a      	str	r2, [r3, #0]
   29158:	6862      	ldr	r2, [r4, #4]
   2915a:	6013      	str	r3, [r2, #0]
   2915c:	6063      	str	r3, [r4, #4]
        } else {
            if (time_diff < next_exp_in) {
                next_exp_in = time_diff;
   2915e:	460b      	mov	r3, r1
    while (proc != NULL) {
   29160:	b153      	cbz	r3, 29178 <ble_l2cap_sig_extract_expired+0x4c>
        next = STAILQ_NEXT(proc, next);
   29162:	6819      	ldr	r1, [r3, #0]
        time_diff = proc->exp_os_ticks - now;
   29164:	685a      	ldr	r2, [r3, #4]
   29166:	1b52      	subs	r2, r2, r5
        if (time_diff <= 0) {
   29168:	2a00      	cmp	r2, #0
   2916a:	ddee      	ble.n	2914a <ble_l2cap_sig_extract_expired+0x1e>
            if (time_diff < next_exp_in) {
   2916c:	4296      	cmp	r6, r2
   2916e:	ddf6      	ble.n	2915e <ble_l2cap_sig_extract_expired+0x32>
                next_exp_in = time_diff;
   29170:	4616      	mov	r6, r2
   29172:	e7f4      	b.n	2915e <ble_l2cap_sig_extract_expired+0x32>
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   29174:	6040      	str	r0, [r0, #4]
   29176:	e7ed      	b.n	29154 <ble_l2cap_sig_extract_expired+0x28>
        }

        proc = next;
    }

    ble_hs_unlock();
   29178:	f7fd f9e2 	bl	26540 <ble_hs_unlock>

    return next_exp_in;
}
   2917c:	4630      	mov	r0, r6
   2917e:	bd70      	pop	{r4, r5, r6, pc}
   29180:	1000623c 	.word	0x1000623c

00029184 <ble_l2cap_sig_proc_free>:
    if (proc != NULL) {
   29184:	b128      	cbz	r0, 29192 <ble_l2cap_sig_proc_free+0xe>
{
   29186:	b508      	push	{r3, lr}
   29188:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_l2cap_sig_proc_pool, proc);
   2918a:	4802      	ldr	r0, [pc, #8]	; (29194 <ble_l2cap_sig_proc_free+0x10>)
   2918c:	f7f0 fe99 	bl	19ec2 <os_memblock_put>
}
   29190:	bd08      	pop	{r3, pc}
   29192:	4770      	bx	lr
   29194:	10006220 	.word	0x10006220

00029198 <ble_l2cap_sig_process_status>:
{
   29198:	b510      	push	{r4, lr}
   2919a:	4604      	mov	r4, r0
    if (status == 0) {
   2919c:	b929      	cbnz	r1, 291aa <ble_l2cap_sig_process_status+0x12>
        ble_l2cap_sig_proc_set_timer(proc);
   2919e:	f7ff ffbb 	bl	29118 <ble_l2cap_sig_proc_set_timer>
        ble_l2cap_sig_proc_insert(proc);
   291a2:	4620      	mov	r0, r4
   291a4:	f7ff ff62 	bl	2906c <ble_l2cap_sig_proc_insert>
}
   291a8:	bd10      	pop	{r4, pc}
        ble_l2cap_sig_proc_free(proc);
   291aa:	f7ff ffeb 	bl	29184 <ble_l2cap_sig_proc_free>
}
   291ae:	e7fb      	b.n	291a8 <ble_l2cap_sig_process_status+0x10>

000291b0 <ble_l2cap_sig_rx_reject>:
{
   291b0:	b508      	push	{r3, lr}
    proc = ble_l2cap_sig_proc_extract(conn_handle,
   291b2:	784a      	ldrb	r2, [r1, #1]
   291b4:	2101      	movs	r1, #1
   291b6:	f7ff ff6b 	bl	29090 <ble_l2cap_sig_proc_extract>
   if (!proc) {
   291ba:	b108      	cbz	r0, 291c0 <ble_l2cap_sig_rx_reject+0x10>
   ble_l2cap_sig_proc_free(proc);
   291bc:	f7ff ffe2 	bl	29184 <ble_l2cap_sig_proc_free>
}
   291c0:	2000      	movs	r0, #0
   291c2:	bd08      	pop	{r3, pc}

000291c4 <ble_l2cap_sig_update_rsp_rx>:
{
   291c4:	b570      	push	{r4, r5, r6, lr}
   291c6:	4614      	mov	r4, r2
    proc = ble_l2cap_sig_proc_extract(conn_handle,
   291c8:	784a      	ldrb	r2, [r1, #1]
   291ca:	2100      	movs	r1, #0
   291cc:	f7ff ff60 	bl	29090 <ble_l2cap_sig_proc_extract>
    if (proc == NULL) {
   291d0:	b1d8      	cbz	r0, 2920a <ble_l2cap_sig_update_rsp_rx+0x46>
   291d2:	4606      	mov	r6, r0
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_UPDATE_RSP_SZ);
   291d4:	2102      	movs	r1, #2
   291d6:	4620      	mov	r0, r4
   291d8:	f7ff f9d4 	bl	28584 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   291dc:	4605      	mov	r5, r0
   291de:	b938      	cbnz	r0, 291f0 <ble_l2cap_sig_update_rsp_rx+0x2c>
    rsp = (struct ble_l2cap_sig_update_rsp *)(*om)->om_data;
   291e0:	6823      	ldr	r3, [r4, #0]
   291e2:	681b      	ldr	r3, [r3, #0]
    switch (le16toh(rsp->result)) {
   291e4:	881b      	ldrh	r3, [r3, #0]
   291e6:	b163      	cbz	r3, 29202 <ble_l2cap_sig_update_rsp_rx+0x3e>
   291e8:	2b01      	cmp	r3, #1
   291ea:	d10c      	bne.n	29206 <ble_l2cap_sig_update_rsp_rx+0x42>
        cb_status = BLE_HS_EREJECT;
   291ec:	2110      	movs	r1, #16
   291ee:	e000      	b.n	291f2 <ble_l2cap_sig_update_rsp_rx+0x2e>
        cb_status = rc;
   291f0:	4601      	mov	r1, r0
    ble_l2cap_sig_update_call_cb(proc, cb_status);
   291f2:	4630      	mov	r0, r6
   291f4:	f7ff ff2a 	bl	2904c <ble_l2cap_sig_update_call_cb>
    ble_l2cap_sig_proc_free(proc);
   291f8:	4630      	mov	r0, r6
   291fa:	f7ff ffc3 	bl	29184 <ble_l2cap_sig_proc_free>
}
   291fe:	4628      	mov	r0, r5
   29200:	bd70      	pop	{r4, r5, r6, pc}
    switch (le16toh(rsp->result)) {
   29202:	4601      	mov	r1, r0
   29204:	e7f5      	b.n	291f2 <ble_l2cap_sig_update_rsp_rx+0x2e>
        cb_status = BLE_HS_EBADDATA;
   29206:	210a      	movs	r1, #10
   29208:	e7f3      	b.n	291f2 <ble_l2cap_sig_update_rsp_rx+0x2e>
        return 0;
   2920a:	2500      	movs	r5, #0
   2920c:	e7f7      	b.n	291fe <ble_l2cap_sig_update_rsp_rx+0x3a>
	...

00029210 <ble_l2cap_sig_rx>:
{
   29210:	b5f0      	push	{r4, r5, r6, r7, lr}
   29212:	b085      	sub	sp, #20
   29214:	4604      	mov	r4, r0
    conn_handle = chan->conn_handle;
   29216:	8887      	ldrh	r7, [r0, #4]
    om = &chan->rx_buf;
   29218:	f100 0610 	add.w	r6, r0, #16
    STATS_INC(ble_l2cap_stats, sig_rx);
   2921c:	4a1c      	ldr	r2, [pc, #112]	; (29290 <ble_l2cap_sig_rx+0x80>)
   2921e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   29220:	3301      	adds	r3, #1
   29222:	6293      	str	r3, [r2, #40]	; 0x28
    ble_hs_log_mbuf(*om);
   29224:	6900      	ldr	r0, [r0, #16]
   29226:	f7ff f943 	bl	284b0 <ble_hs_log_mbuf>
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_HDR_SZ);
   2922a:	2104      	movs	r1, #4
   2922c:	4630      	mov	r0, r6
   2922e:	f7ff f9a9 	bl	28584 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   29232:	4605      	mov	r5, r0
   29234:	b110      	cbz	r0, 2923c <ble_l2cap_sig_rx+0x2c>
}
   29236:	4628      	mov	r0, r5
   29238:	b005      	add	sp, #20
   2923a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ble_l2cap_sig_hdr_parse((*om)->om_data, (*om)->om_len, &hdr);
   2923c:	6923      	ldr	r3, [r4, #16]
   2923e:	aa03      	add	r2, sp, #12
   29240:	88d9      	ldrh	r1, [r3, #6]
   29242:	6818      	ldr	r0, [r3, #0]
   29244:	f000 f957 	bl	294f6 <ble_l2cap_sig_hdr_parse>
    os_mbuf_adj(*om, BLE_L2CAP_SIG_HDR_SZ);
   29248:	2104      	movs	r1, #4
   2924a:	6920      	ldr	r0, [r4, #16]
   2924c:	f7f0 faad 	bl	197aa <os_mbuf_adj>
    if (OS_MBUF_PKTLEN(*om) != hdr.length) {
   29250:	6923      	ldr	r3, [r4, #16]
   29252:	8a1a      	ldrh	r2, [r3, #16]
   29254:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   29258:	429a      	cmp	r2, r3
   2925a:	d117      	bne.n	2928c <ble_l2cap_sig_rx+0x7c>
    rx_cb = ble_l2cap_sig_dispatch_get(hdr.op);
   2925c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   29260:	f7ff fed2 	bl	29008 <ble_l2cap_sig_dispatch_get>
    if (rx_cb == NULL) {
   29264:	4603      	mov	r3, r0
   29266:	b178      	cbz	r0, 29288 <ble_l2cap_sig_rx+0x78>
        rc = rx_cb(conn_handle, &hdr, om);
   29268:	4632      	mov	r2, r6
   2926a:	a903      	add	r1, sp, #12
   2926c:	4638      	mov	r0, r7
   2926e:	4798      	blx	r3
    if (rc) {
   29270:	4605      	mov	r5, r0
   29272:	2800      	cmp	r0, #0
   29274:	d0df      	beq.n	29236 <ble_l2cap_sig_rx+0x26>
        ble_l2cap_sig_reject_tx(conn_handle, hdr.identifier,
   29276:	2200      	movs	r2, #0
   29278:	9200      	str	r2, [sp, #0]
   2927a:	4613      	mov	r3, r2
   2927c:	f89d 100d 	ldrb.w	r1, [sp, #13]
   29280:	4638      	mov	r0, r7
   29282:	f000 f95f 	bl	29544 <ble_l2cap_sig_reject_tx>
   29286:	e7d6      	b.n	29236 <ble_l2cap_sig_rx+0x26>
        rc = BLE_HS_EREJECT;
   29288:	2510      	movs	r5, #16
   2928a:	e7f4      	b.n	29276 <ble_l2cap_sig_rx+0x66>
        return BLE_HS_EBADDATA;
   2928c:	250a      	movs	r5, #10
   2928e:	e7d2      	b.n	29236 <ble_l2cap_sig_rx+0x26>
   29290:	100061d4 	.word	0x100061d4

00029294 <ble_l2cap_sig_update_req_rx>:
{
   29294:	b5f0      	push	{r4, r5, r6, r7, lr}
   29296:	b087      	sub	sp, #28
   29298:	4607      	mov	r7, r0
   2929a:	460e      	mov	r6, r1
   2929c:	4614      	mov	r4, r2
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_UPDATE_REQ_SZ);
   2929e:	2108      	movs	r1, #8
   292a0:	4610      	mov	r0, r2
   292a2:	f7ff f96f 	bl	28584 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   292a6:	4605      	mov	r5, r0
   292a8:	b110      	cbz	r0, 292b0 <ble_l2cap_sig_update_req_rx+0x1c>
}
   292aa:	4628      	mov	r0, r5
   292ac:	b007      	add	sp, #28
   292ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = ble_hs_atomic_conn_flags(conn_handle, &conn_flags);
   292b0:	f10d 0107 	add.w	r1, sp, #7
   292b4:	4638      	mov	r0, r7
   292b6:	f7fe f8c2 	bl	2743e <ble_hs_atomic_conn_flags>
    if (rc != 0) {
   292ba:	4605      	mov	r5, r0
   292bc:	2800      	cmp	r0, #0
   292be:	d1f4      	bne.n	292aa <ble_l2cap_sig_update_req_rx+0x16>
    sig_err = !(conn_flags & BLE_HS_CONN_F_MASTER);
   292c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (sig_err) {
   292c4:	f013 0f01 	tst.w	r3, #1
   292c8:	d030      	beq.n	2932c <ble_l2cap_sig_update_req_rx+0x98>
    req = (struct ble_l2cap_sig_update_req *)(*om)->om_data;
   292ca:	6823      	ldr	r3, [r4, #0]
   292cc:	681b      	ldr	r3, [r3, #0]
    params.itvl_min = le16toh(req->itvl_min);
   292ce:	881a      	ldrh	r2, [r3, #0]
   292d0:	f8ad 2008 	strh.w	r2, [sp, #8]
    params.itvl_max = le16toh(req->itvl_max);
   292d4:	885a      	ldrh	r2, [r3, #2]
   292d6:	f8ad 200a 	strh.w	r2, [sp, #10]
    params.latency = le16toh(req->slave_latency);
   292da:	889a      	ldrh	r2, [r3, #4]
   292dc:	f8ad 200c 	strh.w	r2, [sp, #12]
    params.supervision_timeout = le16toh(req->timeout_multiplier);
   292e0:	88db      	ldrh	r3, [r3, #6]
   292e2:	f8ad 300e 	strh.w	r3, [sp, #14]
    params.min_ce_len = BLE_GAP_INITIAL_CONN_MIN_CE_LEN;
   292e6:	2300      	movs	r3, #0
   292e8:	f8ad 3010 	strh.w	r3, [sp, #16]
    params.max_ce_len = BLE_GAP_INITIAL_CONN_MAX_CE_LEN;
   292ec:	f8ad 3012 	strh.w	r3, [sp, #18]
    rc = ble_gap_rx_l2cap_update_req(conn_handle, &params);
   292f0:	a902      	add	r1, sp, #8
   292f2:	4638      	mov	r0, r7
   292f4:	f7f8 fdad 	bl	21e52 <ble_gap_rx_l2cap_update_req>
    if (rc == 0) {
   292f8:	4603      	mov	r3, r0
   292fa:	b178      	cbz	r0, 2931c <ble_l2cap_sig_update_req_rx+0x88>
    if (rc == 0) {
   292fc:	b9a3      	cbnz	r3, 29328 <ble_l2cap_sig_update_req_rx+0x94>
        l2cap_result = BLE_L2CAP_SIG_UPDATE_RSP_RESULT_ACCEPT;
   292fe:	2400      	movs	r4, #0
    rsp = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_UPDATE_RSP, hdr->identifier,
   29300:	ab05      	add	r3, sp, #20
   29302:	2202      	movs	r2, #2
   29304:	7871      	ldrb	r1, [r6, #1]
   29306:	2013      	movs	r0, #19
   29308:	f000 f8fc 	bl	29504 <ble_l2cap_sig_cmd_get>
    if (!rsp) {
   2930c:	2800      	cmp	r0, #0
   2930e:	d0cc      	beq.n	292aa <ble_l2cap_sig_update_req_rx+0x16>
    rsp->result = htole16(l2cap_result);
   29310:	8004      	strh	r4, [r0, #0]
    ble_l2cap_sig_tx(conn_handle, txom);
   29312:	9905      	ldr	r1, [sp, #20]
   29314:	4638      	mov	r0, r7
   29316:	f000 f8d1 	bl	294bc <ble_l2cap_sig_tx>
    return 0;
   2931a:	e7c6      	b.n	292aa <ble_l2cap_sig_update_req_rx+0x16>
        rc = ble_gap_update_params(conn_handle, &params);
   2931c:	a902      	add	r1, sp, #8
   2931e:	4638      	mov	r0, r7
   29320:	f7f9 fbe8 	bl	22af4 <ble_gap_update_params>
   29324:	4603      	mov	r3, r0
   29326:	e7e9      	b.n	292fc <ble_l2cap_sig_update_req_rx+0x68>
        l2cap_result = BLE_L2CAP_SIG_UPDATE_RSP_RESULT_REJECT;
   29328:	2401      	movs	r4, #1
   2932a:	e7e9      	b.n	29300 <ble_l2cap_sig_update_req_rx+0x6c>
        return BLE_HS_EREJECT;
   2932c:	2510      	movs	r5, #16
   2932e:	e7bc      	b.n	292aa <ble_l2cap_sig_update_req_rx+0x16>

00029330 <ble_l2cap_sig_update>:
{
   29330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29334:	b085      	sub	sp, #20
   29336:	4604      	mov	r4, r0
   29338:	460e      	mov	r6, r1
   2933a:	4691      	mov	r9, r2
   2933c:	4698      	mov	r8, r3
    STATS_INC(ble_l2cap_stats, update_init);
   2933e:	4b29      	ldr	r3, [pc, #164]	; (293e4 <ble_l2cap_sig_update+0xb4>)
   29340:	6959      	ldr	r1, [r3, #20]
   29342:	3101      	adds	r1, #1
   29344:	6159      	str	r1, [r3, #20]
    ble_hs_lock();
   29346:	f7fd f8f7 	bl	26538 <ble_hs_lock>
    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SIG,
   2934a:	ab02      	add	r3, sp, #8
   2934c:	aa01      	add	r2, sp, #4
   2934e:	2105      	movs	r1, #5
   29350:	4620      	mov	r0, r4
   29352:	f7ff f95b 	bl	2860c <ble_hs_misc_conn_chan_find_reqd>
    if (rc != 0) {
   29356:	bb50      	cbnz	r0, 293ae <ble_l2cap_sig_update+0x7e>
    master = conn->bhc_flags & BLE_HS_CONN_F_MASTER;
   29358:	9b01      	ldr	r3, [sp, #4]
   2935a:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
    ble_hs_unlock();
   2935e:	f7fd f8ef 	bl	26540 <ble_hs_unlock>
    if (master) {
   29362:	f015 0f01 	tst.w	r5, #1
   29366:	d13a      	bne.n	293de <ble_l2cap_sig_update+0xae>
    proc = ble_l2cap_sig_proc_alloc();
   29368:	f7ff fec6 	bl	290f8 <ble_l2cap_sig_proc_alloc>
    if (proc == NULL) {
   2936c:	4607      	mov	r7, r0
   2936e:	b350      	cbz	r0, 293c6 <ble_l2cap_sig_update+0x96>
    proc->op = BLE_L2CAP_SIG_PROC_OP_UPDATE;
   29370:	2300      	movs	r3, #0
   29372:	7283      	strb	r3, [r0, #10]
    proc->id = ble_l2cap_sig_next_id();
   29374:	f7ff fe3a 	bl	28fec <ble_l2cap_sig_next_id>
   29378:	4601      	mov	r1, r0
   2937a:	72f8      	strb	r0, [r7, #11]
    proc->conn_handle = conn_handle;
   2937c:	813c      	strh	r4, [r7, #8]
    proc->update.cb = cb;
   2937e:	f8c7 900c 	str.w	r9, [r7, #12]
    proc->update.cb_arg = cb_arg;
   29382:	f8c7 8010 	str.w	r8, [r7, #16]
    req = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_UPDATE_REQ, proc->id,
   29386:	ab03      	add	r3, sp, #12
   29388:	2208      	movs	r2, #8
   2938a:	2012      	movs	r0, #18
   2938c:	f000 f8ba 	bl	29504 <ble_l2cap_sig_cmd_get>
    if (!req) {
   29390:	b1f8      	cbz	r0, 293d2 <ble_l2cap_sig_update+0xa2>
    req->itvl_min = htole16(params->itvl_min);
   29392:	8832      	ldrh	r2, [r6, #0]
   29394:	8002      	strh	r2, [r0, #0]
    req->itvl_max = htole16(params->itvl_max);
   29396:	8872      	ldrh	r2, [r6, #2]
   29398:	8042      	strh	r2, [r0, #2]
    req->slave_latency = htole16(params->slave_latency);
   2939a:	88b2      	ldrh	r2, [r6, #4]
   2939c:	8082      	strh	r2, [r0, #4]
    req->timeout_multiplier = htole16(params->timeout_multiplier);
   2939e:	88f2      	ldrh	r2, [r6, #6]
   293a0:	80c2      	strh	r2, [r0, #6]
    rc = ble_l2cap_sig_tx(conn_handle, txom);
   293a2:	9903      	ldr	r1, [sp, #12]
   293a4:	4620      	mov	r0, r4
   293a6:	f000 f889 	bl	294bc <ble_l2cap_sig_tx>
   293aa:	4605      	mov	r5, r0
   293ac:	e003      	b.n	293b6 <ble_l2cap_sig_update+0x86>
   293ae:	4605      	mov	r5, r0
        ble_hs_unlock();
   293b0:	f7fd f8c6 	bl	26540 <ble_hs_unlock>
    proc = NULL;
   293b4:	2700      	movs	r7, #0
    ble_l2cap_sig_process_status(proc, rc);
   293b6:	4629      	mov	r1, r5
   293b8:	4638      	mov	r0, r7
   293ba:	f7ff feed 	bl	29198 <ble_l2cap_sig_process_status>
}
   293be:	4628      	mov	r0, r5
   293c0:	b005      	add	sp, #20
   293c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        STATS_INC(ble_l2cap_stats, update_fail);
   293c6:	4a07      	ldr	r2, [pc, #28]	; (293e4 <ble_l2cap_sig_update+0xb4>)
   293c8:	69d3      	ldr	r3, [r2, #28]
   293ca:	3301      	adds	r3, #1
   293cc:	61d3      	str	r3, [r2, #28]
        rc = BLE_HS_ENOMEM;
   293ce:	2506      	movs	r5, #6
        goto done;
   293d0:	e7f1      	b.n	293b6 <ble_l2cap_sig_update+0x86>
        STATS_INC(ble_l2cap_stats, update_fail);
   293d2:	4a04      	ldr	r2, [pc, #16]	; (293e4 <ble_l2cap_sig_update+0xb4>)
   293d4:	69d3      	ldr	r3, [r2, #28]
   293d6:	3301      	adds	r3, #1
   293d8:	61d3      	str	r3, [r2, #28]
        rc = BLE_HS_ENOMEM;
   293da:	2506      	movs	r5, #6
        goto done;
   293dc:	e7eb      	b.n	293b6 <ble_l2cap_sig_update+0x86>
        rc = BLE_HS_EINVAL;
   293de:	2503      	movs	r5, #3
    proc = NULL;
   293e0:	2700      	movs	r7, #0
   293e2:	e7e8      	b.n	293b6 <ble_l2cap_sig_update+0x86>
   293e4:	100061d4 	.word	0x100061d4

000293e8 <ble_l2cap_sig_create_chan>:
{
   293e8:	b508      	push	{r3, lr}
    chan = ble_l2cap_chan_alloc(conn_handle);
   293ea:	f7ff fcbd 	bl	28d68 <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   293ee:	4603      	mov	r3, r0
   293f0:	b130      	cbz	r0, 29400 <ble_l2cap_sig_create_chan+0x18>
    chan->scid = BLE_L2CAP_CID_SIG;
   293f2:	2205      	movs	r2, #5
   293f4:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_SIG;
   293f6:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = BLE_L2CAP_SIG_MTU;
   293f8:	2264      	movs	r2, #100	; 0x64
   293fa:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_l2cap_sig_rx;
   293fc:	4a01      	ldr	r2, [pc, #4]	; (29404 <ble_l2cap_sig_create_chan+0x1c>)
   293fe:	6182      	str	r2, [r0, #24]
}
   29400:	4618      	mov	r0, r3
   29402:	bd08      	pop	{r3, pc}
   29404:	00029211 	.word	0x00029211

00029408 <ble_l2cap_sig_conn_broken>:

void
ble_l2cap_sig_conn_broken(uint16_t conn_handle, int reason)
{
   29408:	b538      	push	{r3, r4, r5, lr}
   2940a:	460d      	mov	r5, r1
    struct ble_l2cap_sig_proc *proc;

    /* Report a failure for each timed out procedure. */
    while ((proc = STAILQ_FIRST(&ble_l2cap_sig_procs)) != NULL) {
   2940c:	e00b      	b.n	29426 <ble_l2cap_sig_conn_broken+0x1e>
        switch(proc->op) {
            case BLE_L2CAP_SIG_PROC_OP_UPDATE:
                ble_l2cap_sig_update_call_cb(proc, reason);
   2940e:	4629      	mov	r1, r5
   29410:	4620      	mov	r0, r4
   29412:	f7ff fe1b 	bl	2904c <ble_l2cap_sig_update_call_cb>
            break;
#endif
#endif
            }

            STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   29416:	4a09      	ldr	r2, [pc, #36]	; (2943c <ble_l2cap_sig_conn_broken+0x34>)
   29418:	6813      	ldr	r3, [r2, #0]
   2941a:	681b      	ldr	r3, [r3, #0]
   2941c:	6013      	str	r3, [r2, #0]
   2941e:	b14b      	cbz	r3, 29434 <ble_l2cap_sig_conn_broken+0x2c>
            ble_l2cap_sig_proc_free(proc);
   29420:	4620      	mov	r0, r4
   29422:	f7ff feaf 	bl	29184 <ble_l2cap_sig_proc_free>
    while ((proc = STAILQ_FIRST(&ble_l2cap_sig_procs)) != NULL) {
   29426:	4b05      	ldr	r3, [pc, #20]	; (2943c <ble_l2cap_sig_conn_broken+0x34>)
   29428:	681c      	ldr	r4, [r3, #0]
   2942a:	b12c      	cbz	r4, 29438 <ble_l2cap_sig_conn_broken+0x30>
        switch(proc->op) {
   2942c:	7aa3      	ldrb	r3, [r4, #10]
   2942e:	2b00      	cmp	r3, #0
   29430:	d1f1      	bne.n	29416 <ble_l2cap_sig_conn_broken+0xe>
   29432:	e7ec      	b.n	2940e <ble_l2cap_sig_conn_broken+0x6>
            STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   29434:	6052      	str	r2, [r2, #4]
   29436:	e7f3      	b.n	29420 <ble_l2cap_sig_conn_broken+0x18>
    }

}
   29438:	bd38      	pop	{r3, r4, r5, pc}
   2943a:	bf00      	nop
   2943c:	1000623c 	.word	0x1000623c

00029440 <ble_l2cap_sig_timer>:
 * @return                      The number of ticks until this function should
 *                                  be called again.
 */
int32_t
ble_l2cap_sig_timer(void)
{
   29440:	b530      	push	{r4, r5, lr}
   29442:	b083      	sub	sp, #12

    /* Remove timed-out procedures from the main list and insert them into a
     * temporary list.  This function also calculates the number of ticks until
     * the next expiration will occur.
     */
    ticks_until_exp = ble_l2cap_sig_extract_expired(&temp_list);
   29444:	4668      	mov	r0, sp
   29446:	f7ff fe71 	bl	2912c <ble_l2cap_sig_extract_expired>
   2944a:	4605      	mov	r5, r0

    /* Report a failure for each timed out procedure. */
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   2944c:	e00a      	b.n	29464 <ble_l2cap_sig_timer+0x24>
        STATS_INC(ble_l2cap_stats, proc_timeout);
        switch(proc->op) {
            case BLE_L2CAP_SIG_PROC_OP_UPDATE:
                ble_l2cap_sig_update_call_cb(proc, BLE_HS_ETIMEOUT);
   2944e:	210d      	movs	r1, #13
   29450:	4620      	mov	r0, r4
   29452:	f7ff fdfb 	bl	2904c <ble_l2cap_sig_update_call_cb>
                ble_l2cap_sig_coc_disconnect_cb(proc, BLE_HS_ETIMEOUT);
            break;
#endif
        }

        STAILQ_REMOVE_HEAD(&temp_list, next);
   29456:	9b00      	ldr	r3, [sp, #0]
   29458:	681b      	ldr	r3, [r3, #0]
   2945a:	9300      	str	r3, [sp, #0]
   2945c:	b163      	cbz	r3, 29478 <ble_l2cap_sig_timer+0x38>
        ble_l2cap_sig_proc_free(proc);
   2945e:	4620      	mov	r0, r4
   29460:	f7ff fe90 	bl	29184 <ble_l2cap_sig_proc_free>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   29464:	9c00      	ldr	r4, [sp, #0]
   29466:	b154      	cbz	r4, 2947e <ble_l2cap_sig_timer+0x3e>
        STATS_INC(ble_l2cap_stats, proc_timeout);
   29468:	4a06      	ldr	r2, [pc, #24]	; (29484 <ble_l2cap_sig_timer+0x44>)
   2946a:	6a13      	ldr	r3, [r2, #32]
   2946c:	3301      	adds	r3, #1
   2946e:	6213      	str	r3, [r2, #32]
        switch(proc->op) {
   29470:	7aa3      	ldrb	r3, [r4, #10]
   29472:	2b00      	cmp	r3, #0
   29474:	d1ef      	bne.n	29456 <ble_l2cap_sig_timer+0x16>
   29476:	e7ea      	b.n	2944e <ble_l2cap_sig_timer+0xe>
        STAILQ_REMOVE_HEAD(&temp_list, next);
   29478:	f8cd d004 	str.w	sp, [sp, #4]
   2947c:	e7ef      	b.n	2945e <ble_l2cap_sig_timer+0x1e>
    }

    return ticks_until_exp;
}
   2947e:	4628      	mov	r0, r5
   29480:	b003      	add	sp, #12
   29482:	bd30      	pop	{r4, r5, pc}
   29484:	100061d4 	.word	0x100061d4

00029488 <ble_l2cap_sig_init>:

int
ble_l2cap_sig_init(void)
{
   29488:	b500      	push	{lr}
   2948a:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_l2cap_sig_procs);
   2948c:	4b07      	ldr	r3, [pc, #28]	; (294ac <ble_l2cap_sig_init+0x24>)
   2948e:	2200      	movs	r2, #0
   29490:	601a      	str	r2, [r3, #0]
   29492:	605b      	str	r3, [r3, #4]

    rc = os_mempool_init(&ble_l2cap_sig_proc_pool,
   29494:	4b06      	ldr	r3, [pc, #24]	; (294b0 <ble_l2cap_sig_init+0x28>)
   29496:	9300      	str	r3, [sp, #0]
   29498:	4b06      	ldr	r3, [pc, #24]	; (294b4 <ble_l2cap_sig_init+0x2c>)
   2949a:	2214      	movs	r2, #20
   2949c:	2101      	movs	r1, #1
   2949e:	4806      	ldr	r0, [pc, #24]	; (294b8 <ble_l2cap_sig_init+0x30>)
   294a0:	f7f0 fcb0 	bl	19e04 <os_mempool_init>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   294a4:	b003      	add	sp, #12
   294a6:	f85d fb04 	ldr.w	pc, [sp], #4
   294aa:	bf00      	nop
   294ac:	1000623c 	.word	0x1000623c
   294b0:	00035088 	.word	0x00035088
   294b4:	1000620c 	.word	0x1000620c
   294b8:	10006220 	.word	0x10006220

000294bc <ble_l2cap_sig_tx>:

#if NIMBLE_BLE_CONNECT
/* this function consumes tx os_mbuf */
int
ble_l2cap_sig_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   294bc:	b530      	push	{r4, r5, lr}
   294be:	b083      	sub	sp, #12
   294c0:	4605      	mov	r5, r0
   294c2:	460c      	mov	r4, r1
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;
    int rc;

    ble_hs_lock();
   294c4:	f7fd f838 	bl	26538 <ble_hs_lock>
    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SIG,
   294c8:	ab01      	add	r3, sp, #4
   294ca:	466a      	mov	r2, sp
   294cc:	2105      	movs	r1, #5
   294ce:	4628      	mov	r0, r5
   294d0:	f7ff f89c 	bl	2860c <ble_hs_misc_conn_chan_find_reqd>
                                         &conn, &chan);
    if (rc == 0) {
   294d4:	b950      	cbnz	r0, 294ec <ble_l2cap_sig_tx+0x30>
        rc = ble_l2cap_tx(conn, chan, txom);
   294d6:	4622      	mov	r2, r4
   294d8:	9901      	ldr	r1, [sp, #4]
   294da:	9800      	ldr	r0, [sp, #0]
   294dc:	f7ff fd3e 	bl	28f5c <ble_l2cap_tx>
   294e0:	4605      	mov	r5, r0
    } else {
        os_mbuf_free_chain(txom);
    }
    ble_hs_unlock();
   294e2:	f7fd f82d 	bl	26540 <ble_hs_unlock>

    return rc;
}
   294e6:	4628      	mov	r0, r5
   294e8:	b003      	add	sp, #12
   294ea:	bd30      	pop	{r4, r5, pc}
   294ec:	4605      	mov	r5, r0
        os_mbuf_free_chain(txom);
   294ee:	4620      	mov	r0, r4
   294f0:	f7f0 f88d 	bl	1960e <os_mbuf_free_chain>
   294f4:	e7f5      	b.n	294e2 <ble_l2cap_sig_tx+0x26>

000294f6 <ble_l2cap_sig_hdr_parse>:
{
    struct ble_l2cap_sig_hdr *src = payload;

    BLE_HS_DBG_ASSERT(len >= BLE_L2CAP_SIG_HDR_SZ);

    dst->op = src->op;
   294f6:	7803      	ldrb	r3, [r0, #0]
   294f8:	7013      	strb	r3, [r2, #0]
    dst->identifier = src->identifier;
   294fa:	7843      	ldrb	r3, [r0, #1]
   294fc:	7053      	strb	r3, [r2, #1]
    dst->length = le16toh(src->length);
   294fe:	8843      	ldrh	r3, [r0, #2]
   29500:	8053      	strh	r3, [r2, #2]
}
   29502:	4770      	bx	lr

00029504 <ble_l2cap_sig_cmd_get>:
}

void *
ble_l2cap_sig_cmd_get(uint8_t opcode, uint8_t id, uint16_t len,
                      struct os_mbuf **txom)
{
   29504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29508:	4680      	mov	r8, r0
   2950a:	460f      	mov	r7, r1
   2950c:	4616      	mov	r6, r2
   2950e:	461d      	mov	r5, r3
    struct ble_l2cap_sig_hdr *hdr;

    *txom = ble_hs_mbuf_l2cap_pkt();
   29510:	f7ff f805 	bl	2851e <ble_hs_mbuf_l2cap_pkt>
   29514:	4604      	mov	r4, r0
   29516:	6028      	str	r0, [r5, #0]
    if (*txom == NULL) {
   29518:	b160      	cbz	r0, 29534 <ble_l2cap_sig_cmd_get+0x30>
        return NULL;
    }

    if (os_mbuf_extend(*txom, sizeof(*hdr) + len) == NULL) {
   2951a:	1d31      	adds	r1, r6, #4
   2951c:	b289      	uxth	r1, r1
   2951e:	f7f0 faf9 	bl	19b14 <os_mbuf_extend>
   29522:	4604      	mov	r4, r0
   29524:	b148      	cbz	r0, 2953a <ble_l2cap_sig_cmd_get+0x36>
        os_mbuf_free_chain(*txom);
        return NULL;
    }

    hdr = (struct ble_l2cap_sig_hdr *)(*txom)->om_data;
   29526:	682b      	ldr	r3, [r5, #0]
   29528:	681c      	ldr	r4, [r3, #0]

    hdr->op = opcode;
   2952a:	f884 8000 	strb.w	r8, [r4]
    hdr->identifier = id;
   2952e:	7067      	strb	r7, [r4, #1]
    hdr->length = htole16(len);
   29530:	8066      	strh	r6, [r4, #2]

    return hdr->data;
   29532:	3404      	adds	r4, #4
}
   29534:	4620      	mov	r0, r4
   29536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        os_mbuf_free_chain(*txom);
   2953a:	6828      	ldr	r0, [r5, #0]
   2953c:	f7f0 f867 	bl	1960e <os_mbuf_free_chain>
        return NULL;
   29540:	e7f8      	b.n	29534 <ble_l2cap_sig_cmd_get+0x30>
	...

00029544 <ble_l2cap_sig_reject_tx>:
{
   29544:	b5f0      	push	{r4, r5, r6, r7, lr}
   29546:	b083      	sub	sp, #12
   29548:	4604      	mov	r4, r0
   2954a:	4616      	mov	r6, r2
   2954c:	461d      	mov	r5, r3
   2954e:	9f08      	ldr	r7, [sp, #32]
    cmd = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_REJECT, id,
   29550:	1cba      	adds	r2, r7, #2
   29552:	ab01      	add	r3, sp, #4
   29554:	b292      	uxth	r2, r2
   29556:	2001      	movs	r0, #1
   29558:	f7ff ffd4 	bl	29504 <ble_l2cap_sig_cmd_get>
    if (!cmd) {
   2955c:	b178      	cbz	r0, 2957e <ble_l2cap_sig_reject_tx+0x3a>
    cmd->reason = htole16(reason);
   2955e:	f820 6b02 	strh.w	r6, [r0], #2
    memcpy(cmd->data, data, data_len);
   29562:	463a      	mov	r2, r7
   29564:	4629      	mov	r1, r5
   29566:	f7f1 fb85 	bl	1ac74 <memcpy>
    STATS_INC(ble_l2cap_stats, sig_rx);
   2956a:	4a06      	ldr	r2, [pc, #24]	; (29584 <ble_l2cap_sig_reject_tx+0x40>)
   2956c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2956e:	3301      	adds	r3, #1
   29570:	6293      	str	r3, [r2, #40]	; 0x28
    return ble_l2cap_sig_tx(conn_handle, txom);
   29572:	9901      	ldr	r1, [sp, #4]
   29574:	4620      	mov	r0, r4
   29576:	f7ff ffa1 	bl	294bc <ble_l2cap_sig_tx>
}
   2957a:	b003      	add	sp, #12
   2957c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   2957e:	2006      	movs	r0, #6
   29580:	e7fb      	b.n	2957a <ble_l2cap_sig_reject_tx+0x36>
   29582:	bf00      	nop
   29584:	100061d4 	.word	0x100061d4

00029588 <ble_l2cap_sig_reject_invalid_cid_tx>:
{
   29588:	b500      	push	{lr}
   2958a:	b085      	sub	sp, #20
    } data = {
   2958c:	f8ad 300c 	strh.w	r3, [sp, #12]
   29590:	f8ad 200e 	strh.w	r2, [sp, #14]
    return ble_l2cap_sig_reject_tx(conn_handle, id,
   29594:	2304      	movs	r3, #4
   29596:	9300      	str	r3, [sp, #0]
   29598:	ab03      	add	r3, sp, #12
   2959a:	2202      	movs	r2, #2
   2959c:	f7ff ffd2 	bl	29544 <ble_l2cap_sig_reject_tx>
}
   295a0:	b005      	add	sp, #20
   295a2:	f85d fb04 	ldr.w	pc, [sp], #4

000295a6 <ble_sm_rx>:
 * Failed with 'Pairing not Supported' reason so this function can be very
 * simple
 */
static int
ble_sm_rx(struct ble_l2cap_chan *chan)
{
   295a6:	b510      	push	{r4, lr}
   295a8:	b082      	sub	sp, #8
    struct ble_sm_pair_fail *cmd;
    struct os_mbuf *txom;
    uint16_t handle;
    int rc;

    handle = ble_l2cap_get_conn_handle(chan);
   295aa:	f7ff fc3c 	bl	28e26 <ble_l2cap_get_conn_handle>
    if (!handle) {
   295ae:	b1a0      	cbz	r0, 295da <ble_sm_rx+0x34>
   295b0:	4604      	mov	r4, r0
        return BLE_HS_ENOTCONN;
    }

    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_FAIL, sizeof(*cmd), &txom);
   295b2:	aa01      	add	r2, sp, #4
   295b4:	2101      	movs	r1, #1
   295b6:	2005      	movs	r0, #5
   295b8:	f000 f824 	bl	29604 <ble_sm_cmd_get>
    if (cmd == NULL) {
   295bc:	b178      	cbz	r0, 295de <ble_sm_rx+0x38>
        return BLE_HS_ENOMEM;
    }

    cmd->reason = BLE_SM_ERR_PAIR_NOT_SUPP;
   295be:	2205      	movs	r2, #5
   295c0:	7002      	strb	r2, [r0, #0]

    ble_hs_lock();
   295c2:	f7fc ffb9 	bl	26538 <ble_hs_lock>
    rc = ble_sm_tx(handle, txom);
   295c6:	9901      	ldr	r1, [sp, #4]
   295c8:	4620      	mov	r0, r4
   295ca:	f000 f835 	bl	29638 <ble_sm_tx>
   295ce:	4604      	mov	r4, r0
    ble_hs_unlock();
   295d0:	f7fc ffb6 	bl	26540 <ble_hs_unlock>

    return rc;
}
   295d4:	4620      	mov	r0, r4
   295d6:	b002      	add	sp, #8
   295d8:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOTCONN;
   295da:	2407      	movs	r4, #7
   295dc:	e7fa      	b.n	295d4 <ble_sm_rx+0x2e>
        return BLE_HS_ENOMEM;
   295de:	2406      	movs	r4, #6
   295e0:	e7f8      	b.n	295d4 <ble_sm_rx+0x2e>
	...

000295e4 <ble_sm_create_chan>:
#endif

struct ble_l2cap_chan *
ble_sm_create_chan(uint16_t conn_handle)
{
   295e4:	b508      	push	{r3, lr}
    struct ble_l2cap_chan *chan;

    chan = ble_l2cap_chan_alloc(conn_handle);
   295e6:	f7ff fbbf 	bl	28d68 <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   295ea:	4603      	mov	r3, r0
   295ec:	b130      	cbz	r0, 295fc <ble_sm_create_chan+0x18>
        return NULL;
    }

    chan->scid = BLE_L2CAP_CID_SM;
   295ee:	2206      	movs	r2, #6
   295f0:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_SM;
   295f2:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = BLE_SM_MTU;
   295f4:	2241      	movs	r2, #65	; 0x41
   295f6:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_sm_rx;
   295f8:	4a01      	ldr	r2, [pc, #4]	; (29600 <ble_sm_create_chan+0x1c>)
   295fa:	6182      	str	r2, [r0, #24]

    return chan;
}
   295fc:	4618      	mov	r0, r3
   295fe:	bd08      	pop	{r3, pc}
   29600:	000295a7 	.word	0x000295a7

00029604 <ble_sm_cmd_get>:
#include "ble_hs_priv.h"

#if NIMBLE_BLE_CONNECT
void *
ble_sm_cmd_get(uint8_t opcode, size_t len, struct os_mbuf **txom)
{
   29604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29606:	4607      	mov	r7, r0
   29608:	460d      	mov	r5, r1
   2960a:	4616      	mov	r6, r2
    struct ble_sm_hdr *hdr;

    *txom = ble_hs_mbuf_l2cap_pkt();
   2960c:	f7fe ff87 	bl	2851e <ble_hs_mbuf_l2cap_pkt>
   29610:	4604      	mov	r4, r0
   29612:	6030      	str	r0, [r6, #0]
    if (*txom == NULL) {
   29614:	b148      	cbz	r0, 2962a <ble_sm_cmd_get+0x26>
        return NULL;
    }

    if (os_mbuf_extend(*txom, sizeof(*hdr) + len) == NULL) {
   29616:	1c69      	adds	r1, r5, #1
   29618:	b289      	uxth	r1, r1
   2961a:	f7f0 fa7b 	bl	19b14 <os_mbuf_extend>
   2961e:	4604      	mov	r4, r0
   29620:	b128      	cbz	r0, 2962e <ble_sm_cmd_get+0x2a>
        os_mbuf_free_chain(*txom);
        return NULL;
    }

    hdr = (struct ble_sm_hdr *)(*txom)->om_data;
   29622:	6833      	ldr	r3, [r6, #0]

    hdr->opcode = opcode;
   29624:	681c      	ldr	r4, [r3, #0]
   29626:	f804 7b01 	strb.w	r7, [r4], #1

    return hdr->data;
}
   2962a:	4620      	mov	r0, r4
   2962c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        os_mbuf_free_chain(*txom);
   2962e:	6830      	ldr	r0, [r6, #0]
   29630:	f7ef ffed 	bl	1960e <os_mbuf_free_chain>
        return NULL;
   29634:	e7f9      	b.n	2962a <ble_sm_cmd_get+0x26>
	...

00029638 <ble_sm_tx>:

/* this function consumes tx os_mbuf */
int
ble_sm_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   29638:	b530      	push	{r4, r5, lr}
   2963a:	b083      	sub	sp, #12
   2963c:	460c      	mov	r4, r1
    struct ble_hs_conn *conn;
    int rc;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    STATS_INC(ble_l2cap_stats, sm_tx);
   2963e:	4a0c      	ldr	r2, [pc, #48]	; (29670 <ble_sm_tx+0x38>)
   29640:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   29642:	3301      	adds	r3, #1
   29644:	62d3      	str	r3, [r2, #44]	; 0x2c

    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SM,
   29646:	ab01      	add	r3, sp, #4
   29648:	466a      	mov	r2, sp
   2964a:	2106      	movs	r1, #6
   2964c:	f7fe ffde 	bl	2860c <ble_hs_misc_conn_chan_find_reqd>
                                         &conn, &chan);
    if (rc == 0) {
   29650:	b940      	cbnz	r0, 29664 <ble_sm_tx+0x2c>
        rc = ble_l2cap_tx(conn, chan, txom);
   29652:	4622      	mov	r2, r4
   29654:	9901      	ldr	r1, [sp, #4]
   29656:	9800      	ldr	r0, [sp, #0]
   29658:	f7ff fc80 	bl	28f5c <ble_l2cap_tx>
   2965c:	4605      	mov	r5, r0
    } else {
        os_mbuf_free_chain(txom);
    }

    return rc;
}
   2965e:	4628      	mov	r0, r5
   29660:	b003      	add	sp, #12
   29662:	bd30      	pop	{r4, r5, pc}
   29664:	4605      	mov	r5, r0
        os_mbuf_free_chain(txom);
   29666:	4620      	mov	r0, r4
   29668:	f7ef ffd1 	bl	1960e <os_mbuf_free_chain>
    return rc;
   2966c:	e7f7      	b.n	2965e <ble_sm_tx+0x26>
   2966e:	bf00      	nop
   29670:	100061d4 	.word	0x100061d4

00029674 <ble_store_status>:
    return rc;
}

static int
ble_store_status(struct ble_store_status_event *event)
{
   29674:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (ble_hs_cfg.store_status_cb == NULL) {
   29676:	4b04      	ldr	r3, [pc, #16]	; (29688 <ble_store_status+0x14>)
   29678:	6a1b      	ldr	r3, [r3, #32]
   2967a:	b11b      	cbz	r3, 29684 <ble_store_status+0x10>
        rc = BLE_HS_ENOTSUP;
    } else {
        rc = ble_hs_cfg.store_status_cb(event, ble_hs_cfg.store_status_arg);
   2967c:	4a02      	ldr	r2, [pc, #8]	; (29688 <ble_store_status+0x14>)
   2967e:	6a51      	ldr	r1, [r2, #36]	; 0x24
   29680:	4798      	blx	r3
    }

    return rc;
}
   29682:	bd08      	pop	{r3, pc}
        rc = BLE_HS_ENOTSUP;
   29684:	2008      	movs	r0, #8
    return rc;
   29686:	e7fc      	b.n	29682 <ble_store_status+0xe>
   29688:	100006d4 	.word	0x100006d4

0002968c <ble_store_read>:
{
   2968c:	b570      	push	{r4, r5, r6, lr}
   2968e:	4604      	mov	r4, r0
   29690:	460d      	mov	r5, r1
   29692:	4616      	mov	r6, r2
    ble_hs_lock();
   29694:	f7fc ff50 	bl	26538 <ble_hs_lock>
    if (ble_hs_cfg.store_read_cb == NULL) {
   29698:	4b06      	ldr	r3, [pc, #24]	; (296b4 <ble_store_read+0x28>)
   2969a:	695b      	ldr	r3, [r3, #20]
   2969c:	b143      	cbz	r3, 296b0 <ble_store_read+0x24>
        rc = ble_hs_cfg.store_read_cb(obj_type, key, val);
   2969e:	4632      	mov	r2, r6
   296a0:	4629      	mov	r1, r5
   296a2:	4620      	mov	r0, r4
   296a4:	4798      	blx	r3
   296a6:	4604      	mov	r4, r0
    ble_hs_unlock();
   296a8:	f7fc ff4a 	bl	26540 <ble_hs_unlock>
}
   296ac:	4620      	mov	r0, r4
   296ae:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_ENOTSUP;
   296b0:	2408      	movs	r4, #8
   296b2:	e7f9      	b.n	296a8 <ble_store_read+0x1c>
   296b4:	100006d4 	.word	0x100006d4

000296b8 <ble_store_delete>:
{
   296b8:	b538      	push	{r3, r4, r5, lr}
   296ba:	4604      	mov	r4, r0
   296bc:	460d      	mov	r5, r1
    ble_hs_lock();
   296be:	f7fc ff3b 	bl	26538 <ble_hs_lock>
    if (ble_hs_cfg.store_delete_cb == NULL) {
   296c2:	4b06      	ldr	r3, [pc, #24]	; (296dc <ble_store_delete+0x24>)
   296c4:	69db      	ldr	r3, [r3, #28]
   296c6:	b13b      	cbz	r3, 296d8 <ble_store_delete+0x20>
        rc = ble_hs_cfg.store_delete_cb(obj_type, key);
   296c8:	4629      	mov	r1, r5
   296ca:	4620      	mov	r0, r4
   296cc:	4798      	blx	r3
   296ce:	4604      	mov	r4, r0
    ble_hs_unlock();
   296d0:	f7fc ff36 	bl	26540 <ble_hs_unlock>
}
   296d4:	4620      	mov	r0, r4
   296d6:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTSUP;
   296d8:	2408      	movs	r4, #8
   296da:	e7f9      	b.n	296d0 <ble_store_delete+0x18>
   296dc:	100006d4 	.word	0x100006d4

000296e0 <ble_store_overflow_event>:

int
ble_store_overflow_event(int obj_type, const union ble_store_value *value)
{
   296e0:	b500      	push	{lr}
   296e2:	b085      	sub	sp, #20
    struct ble_store_status_event event;

    event.event_code = BLE_STORE_EVENT_OVERFLOW;
   296e4:	2301      	movs	r3, #1
   296e6:	9301      	str	r3, [sp, #4]
    event.overflow.obj_type = obj_type;
   296e8:	9002      	str	r0, [sp, #8]
    event.overflow.value = value;
   296ea:	9103      	str	r1, [sp, #12]

    return ble_store_status(&event);
   296ec:	a801      	add	r0, sp, #4
   296ee:	f7ff ffc1 	bl	29674 <ble_store_status>
}
   296f2:	b005      	add	sp, #20
   296f4:	f85d fb04 	ldr.w	pc, [sp], #4

000296f8 <ble_store_write>:
{
   296f8:	b570      	push	{r4, r5, r6, lr}
   296fa:	4606      	mov	r6, r0
   296fc:	460d      	mov	r5, r1
    if (ble_hs_cfg.store_write_cb == NULL) {
   296fe:	4b0d      	ldr	r3, [pc, #52]	; (29734 <ble_store_write+0x3c>)
   29700:	699b      	ldr	r3, [r3, #24]
   29702:	b1a3      	cbz	r3, 2972e <ble_store_write+0x36>
        ble_hs_lock();
   29704:	f7fc ff18 	bl	26538 <ble_hs_lock>
        rc = ble_hs_cfg.store_write_cb(obj_type, val);
   29708:	4b0a      	ldr	r3, [pc, #40]	; (29734 <ble_store_write+0x3c>)
   2970a:	699b      	ldr	r3, [r3, #24]
   2970c:	4629      	mov	r1, r5
   2970e:	4630      	mov	r0, r6
   29710:	4798      	blx	r3
   29712:	4604      	mov	r4, r0
        ble_hs_unlock();
   29714:	f7fc ff14 	bl	26540 <ble_hs_unlock>
        switch (rc) {
   29718:	b154      	cbz	r4, 29730 <ble_store_write+0x38>
   2971a:	2c1b      	cmp	r4, #27
   2971c:	d108      	bne.n	29730 <ble_store_write+0x38>
            rc = ble_store_overflow_event(obj_type, val);
   2971e:	4629      	mov	r1, r5
   29720:	4630      	mov	r0, r6
   29722:	f7ff ffdd 	bl	296e0 <ble_store_overflow_event>
            if (rc != 0) {
   29726:	4604      	mov	r4, r0
   29728:	2800      	cmp	r0, #0
   2972a:	d0eb      	beq.n	29704 <ble_store_write+0xc>
   2972c:	e000      	b.n	29730 <ble_store_write+0x38>
        return BLE_HS_ENOTSUP;
   2972e:	2408      	movs	r4, #8
}
   29730:	4620      	mov	r0, r4
   29732:	bd70      	pop	{r4, r5, r6, pc}
   29734:	100006d4 	.word	0x100006d4

00029738 <ble_store_persist_sec>:
}

static int
ble_store_persist_sec(int obj_type,
                      const struct ble_store_value_sec *value_sec)
{
   29738:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(value_sec->ltk_present ||
                      value_sec->irk_present ||
                      value_sec->csrk_present);

    store_value = (void *)value_sec;
    rc = ble_store_write(obj_type, store_value);
   2973a:	f7ff ffdd 	bl	296f8 <ble_store_write>
    return rc;
}
   2973e:	bd08      	pop	{r3, pc}

00029740 <ble_store_write_our_sec>:

int
ble_store_write_our_sec(const struct ble_store_value_sec *value_sec)
{
   29740:	b508      	push	{r3, lr}
   29742:	4601      	mov	r1, r0
    int rc;

    rc = ble_store_persist_sec(BLE_STORE_OBJ_TYPE_OUR_SEC, value_sec);
   29744:	2001      	movs	r0, #1
   29746:	f7ff fff7 	bl	29738 <ble_store_persist_sec>
    return rc;
}
   2974a:	bd08      	pop	{r3, pc}

0002974c <ble_store_read_peer_sec>:
}

int
ble_store_read_peer_sec(const struct ble_store_key_sec *key_sec,
                        struct ble_store_value_sec *value_sec)
{
   2974c:	b508      	push	{r3, lr}
   2974e:	460a      	mov	r2, r1
    BLE_HS_DBG_ASSERT(key_sec->peer_addr.type == BLE_ADDR_PUBLIC ||
                      key_sec->peer_addr.type == BLE_ADDR_RANDOM);

    store_key = (void *)key_sec;
    store_value = (void *)value_sec;
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_PEER_SEC, store_key, store_value);
   29750:	4601      	mov	r1, r0
   29752:	2002      	movs	r0, #2
   29754:	f7ff ff9a 	bl	2968c <ble_store_read>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   29758:	bd08      	pop	{r3, pc}

0002975a <ble_store_write_peer_sec>:

int
ble_store_write_peer_sec(const struct ble_store_value_sec *value_sec)
{
   2975a:	b570      	push	{r4, r5, r6, lr}
   2975c:	b082      	sub	sp, #8
   2975e:	4604      	mov	r4, r0
    int rc;

    rc = ble_store_persist_sec(BLE_STORE_OBJ_TYPE_PEER_SEC, value_sec);
   29760:	4601      	mov	r1, r0
   29762:	2002      	movs	r0, #2
   29764:	f7ff ffe8 	bl	29738 <ble_store_persist_sec>
    if (rc != 0) {
   29768:	4606      	mov	r6, r0
   2976a:	b990      	cbnz	r0, 29792 <ble_store_write_peer_sec+0x38>
        return rc;
    }

    if (ble_addr_cmp(&value_sec->peer_addr, BLE_ADDR_ANY) &&
   2976c:	2300      	movs	r3, #0
   2976e:	9300      	str	r3, [sp, #0]
   29770:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   29774:	7825      	ldrb	r5, [r4, #0]
   29776:	4628      	mov	r0, r5
    if (type_diff != 0) {
   29778:	b92d      	cbnz	r5, 29786 <ble_store_write_peer_sec+0x2c>
    return memcmp(a->val, b->val, sizeof(a->val));
   2977a:	2206      	movs	r2, #6
   2977c:	f10d 0101 	add.w	r1, sp, #1
   29780:	1c60      	adds	r0, r4, #1
   29782:	f7f1 fa53 	bl	1ac2c <memcmp>
   29786:	b120      	cbz	r0, 29792 <ble_store_write_peer_sec+0x38>
   29788:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   2978c:	f013 0f01 	tst.w	r3, #1
   29790:	d102      	bne.n	29798 <ble_store_write_peer_sec+0x3e>
            return rc;
        }
    }

    return 0;
}
   29792:	4630      	mov	r0, r6
   29794:	b002      	add	sp, #8
   29796:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_hs_pvcy_add_entry(value_sec->peer_addr.val,
   29798:	f104 0229 	add.w	r2, r4, #41	; 0x29
   2979c:	4629      	mov	r1, r5
   2979e:	1c60      	adds	r0, r4, #1
   297a0:	f7ff f842 	bl	28828 <ble_hs_pvcy_add_entry>
        if (rc != 0) {
   297a4:	2800      	cmp	r0, #0
   297a6:	d0f4      	beq.n	29792 <ble_store_write_peer_sec+0x38>
            return rc;
   297a8:	4606      	mov	r6, r0
   297aa:	e7f2      	b.n	29792 <ble_store_write_peer_sec+0x38>

000297ac <ble_store_read_cccd>:

int
ble_store_read_cccd(const struct ble_store_key_cccd *key,
                    struct ble_store_value_cccd *out_value)
{
   297ac:	b508      	push	{r3, lr}
   297ae:	460a      	mov	r2, r1
    union ble_store_key *store_key;
    int rc;

    store_key = (void *)key;
    store_value = (void *)out_value;
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_CCCD, store_key, store_value);
   297b0:	4601      	mov	r1, r0
   297b2:	2003      	movs	r0, #3
   297b4:	f7ff ff6a 	bl	2968c <ble_store_read>
    return rc;
}
   297b8:	bd08      	pop	{r3, pc}

000297ba <ble_store_write_cccd>:

int
ble_store_write_cccd(const struct ble_store_value_cccd *value)
{
   297ba:	b508      	push	{r3, lr}
   297bc:	4601      	mov	r1, r0
    union ble_store_value *store_value;
    int rc;

    store_value = (void *)value;
    rc = ble_store_write(BLE_STORE_OBJ_TYPE_CCCD, store_value);
   297be:	2003      	movs	r0, #3
   297c0:	f7ff ff9a 	bl	296f8 <ble_store_write>
    return rc;
}
   297c4:	bd08      	pop	{r3, pc}

000297c6 <ble_store_delete_cccd>:

int
ble_store_delete_cccd(const struct ble_store_key_cccd *key)
{
   297c6:	b508      	push	{r3, lr}
   297c8:	4601      	mov	r1, r0
    union ble_store_key *store_key;
    int rc;

    store_key = (void *)key;
    rc = ble_store_delete(BLE_STORE_OBJ_TYPE_CCCD, store_key);
   297ca:	2003      	movs	r0, #3
   297cc:	f7ff ff74 	bl	296b8 <ble_store_delete>
    return rc;
}
   297d0:	bd08      	pop	{r3, pc}

000297d2 <ble_store_key_from_value_cccd>:

void
ble_store_key_from_value_cccd(struct ble_store_key_cccd *out_key,
                              const struct ble_store_value_cccd *value)
{
   297d2:	4603      	mov	r3, r0
    out_key->peer_addr = value->peer_addr;
   297d4:	6808      	ldr	r0, [r1, #0]
   297d6:	6018      	str	r0, [r3, #0]
   297d8:	8888      	ldrh	r0, [r1, #4]
   297da:	798a      	ldrb	r2, [r1, #6]
   297dc:	8098      	strh	r0, [r3, #4]
   297de:	719a      	strb	r2, [r3, #6]
    out_key->chr_val_handle = value->chr_val_handle;
   297e0:	890a      	ldrh	r2, [r1, #8]
   297e2:	811a      	strh	r2, [r3, #8]
    out_key->idx = 0;
   297e4:	2200      	movs	r2, #0
   297e6:	729a      	strb	r2, [r3, #10]
}
   297e8:	4770      	bx	lr

000297ea <ble_store_key_from_value_sec>:

void
ble_store_key_from_value_sec(struct ble_store_key_sec *out_key,
                             const struct ble_store_value_sec *value)
{
   297ea:	4603      	mov	r3, r0
   297ec:	460a      	mov	r2, r1
    out_key->peer_addr = value->peer_addr;
   297ee:	e9d1 0100 	ldrd	r0, r1, [r1]
   297f2:	6018      	str	r0, [r3, #0]
   297f4:	8099      	strh	r1, [r3, #4]
   297f6:	0c09      	lsrs	r1, r1, #16
   297f8:	7199      	strb	r1, [r3, #6]

    out_key->ediv = value->ediv;
   297fa:	8911      	ldrh	r1, [r2, #8]
   297fc:	8119      	strh	r1, [r3, #8]
    out_key->rand_num = value->rand_num;
   297fe:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
   29802:	e9c3 0104 	strd	r0, r1, [r3, #16]
    out_key->ediv_rand_present = 1;
   29806:	7e1a      	ldrb	r2, [r3, #24]
   29808:	f042 0201 	orr.w	r2, r2, #1
   2980c:	761a      	strb	r2, [r3, #24]
    out_key->idx = 0;
   2980e:	2200      	movs	r2, #0
   29810:	765a      	strb	r2, [r3, #25]
}
   29812:	4770      	bx	lr

00029814 <ble_store_iterate>:

int
ble_store_iterate(int obj_type,
                  ble_store_iterator_fn *callback,
                  void *cookie)
{
   29814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29818:	b09d      	sub	sp, #116	; 0x74
   2981a:	4604      	mov	r4, r0
   2981c:	4688      	mov	r8, r1
   2981e:	4617      	mov	r7, r2
    int idx = 0;
    uint8_t *pidx;
    int rc;

    /* a magic value to retrieve anything */
    memset(&key, 0, sizeof(key));
   29820:	2220      	movs	r2, #32
   29822:	2100      	movs	r1, #0
   29824:	a814      	add	r0, sp, #80	; 0x50
   29826:	f7f1 fa4a 	bl	1acbe <memset>
    switch(obj_type) {
   2982a:	2c02      	cmp	r4, #2
   2982c:	dd08      	ble.n	29840 <ble_store_iterate+0x2c>
   2982e:	2c03      	cmp	r4, #3
   29830:	d108      	bne.n	29844 <ble_store_iterate+0x30>
        case BLE_STORE_OBJ_TYPE_OUR_SEC:
            key.sec.peer_addr = *BLE_ADDR_ANY;
            pidx = &key.sec.idx;
            break;
        case BLE_STORE_OBJ_TYPE_CCCD:
            key.cccd.peer_addr = *BLE_ADDR_ANY;
   29832:	2300      	movs	r3, #0
   29834:	9314      	str	r3, [sp, #80]	; 0x50
   29836:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
            pidx = &key.cccd.idx;
   2983a:	f10d 095a 	add.w	r9, sp, #90	; 0x5a
            break;
   2983e:	e009      	b.n	29854 <ble_store_iterate+0x40>
    switch(obj_type) {
   29840:	2c00      	cmp	r4, #0
   29842:	dc01      	bgt.n	29848 <ble_store_iterate+0x34>
        default:
            BLE_HS_DBG_ASSERT(0);
            return BLE_HS_EINVAL;
   29844:	2503      	movs	r5, #3
   29846:	e011      	b.n	2986c <ble_store_iterate+0x58>
            key.sec.peer_addr = *BLE_ADDR_ANY;
   29848:	2300      	movs	r3, #0
   2984a:	9314      	str	r3, [sp, #80]	; 0x50
   2984c:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
            pidx = &key.sec.idx;
   29850:	f10d 0969 	add.w	r9, sp, #105	; 0x69
    int idx = 0;
   29854:	2600      	movs	r6, #0
    }

    while (1) {
        *pidx = idx;
   29856:	f889 6000 	strb.w	r6, [r9]
        rc = ble_store_read(obj_type, &key, &value);
   2985a:	466a      	mov	r2, sp
   2985c:	a914      	add	r1, sp, #80	; 0x50
   2985e:	4620      	mov	r0, r4
   29860:	f7ff ff14 	bl	2968c <ble_store_read>
        switch (rc) {
   29864:	4605      	mov	r5, r0
   29866:	b128      	cbz	r0, 29874 <ble_store_iterate+0x60>
   29868:	2805      	cmp	r0, #5
   2986a:	d00e      	beq.n	2988a <ble_store_iterate+0x76>
            return rc;
        }

        idx++;
    }
}
   2986c:	4628      	mov	r0, r5
   2986e:	b01d      	add	sp, #116	; 0x74
   29870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if (callback != NULL) {
   29874:	f1b8 0f00 	cmp.w	r8, #0
   29878:	d005      	beq.n	29886 <ble_store_iterate+0x72>
                rc = callback(obj_type, &value, cookie);
   2987a:	463a      	mov	r2, r7
   2987c:	4669      	mov	r1, sp
   2987e:	4620      	mov	r0, r4
   29880:	47c0      	blx	r8
                if (rc != 0) {
   29882:	2800      	cmp	r0, #0
   29884:	d1f2      	bne.n	2986c <ble_store_iterate+0x58>
        idx++;
   29886:	3601      	adds	r6, #1
        *pidx = idx;
   29888:	e7e5      	b.n	29856 <ble_store_iterate+0x42>
        switch (rc) {
   2988a:	2500      	movs	r5, #0
   2988c:	e7ee      	b.n	2986c <ble_store_iterate+0x58>

0002988e <ble_store_util_delete_all>:
 * @return                      0 on success;
 *                              Other nonzero on error.
 */
int
ble_store_util_delete_all(int type, const union ble_store_key *key)
{
   2988e:	b538      	push	{r3, r4, r5, lr}
   29890:	4605      	mov	r5, r0
   29892:	460c      	mov	r4, r1
    int rc;

    do {
        rc = ble_store_delete(type, key);
   29894:	4621      	mov	r1, r4
   29896:	4628      	mov	r0, r5
   29898:	f7ff ff0e 	bl	296b8 <ble_store_delete>
    } while (rc == 0);
   2989c:	4603      	mov	r3, r0
   2989e:	2800      	cmp	r0, #0
   298a0:	d0f8      	beq.n	29894 <ble_store_util_delete_all+0x6>

    if (rc != BLE_HS_ENOENT) {
   298a2:	2805      	cmp	r0, #5
   298a4:	d100      	bne.n	298a8 <ble_store_util_delete_all+0x1a>
        return rc;
    }

    return 0;
   298a6:	2300      	movs	r3, #0
}
   298a8:	4618      	mov	r0, r3
   298aa:	bd38      	pop	{r3, r4, r5, pc}

000298ac <ble_store_util_delete_peer>:
{
   298ac:	b510      	push	{r4, lr}
   298ae:	b088      	sub	sp, #32
   298b0:	4604      	mov	r4, r0
    memset(&key, 0, sizeof key);
   298b2:	2220      	movs	r2, #32
   298b4:	2100      	movs	r1, #0
   298b6:	4668      	mov	r0, sp
   298b8:	f7f1 fa01 	bl	1acbe <memset>
    key.sec.peer_addr = *peer_id_addr;
   298bc:	6820      	ldr	r0, [r4, #0]
   298be:	9000      	str	r0, [sp, #0]
   298c0:	88a2      	ldrh	r2, [r4, #4]
   298c2:	79a3      	ldrb	r3, [r4, #6]
   298c4:	f8ad 2004 	strh.w	r2, [sp, #4]
   298c8:	f88d 3006 	strb.w	r3, [sp, #6]
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_OUR_SEC, &key);
   298cc:	4669      	mov	r1, sp
   298ce:	2001      	movs	r0, #1
   298d0:	f7ff ffdd 	bl	2988e <ble_store_util_delete_all>
    if (rc != 0) {
   298d4:	4603      	mov	r3, r0
   298d6:	b110      	cbz	r0, 298de <ble_store_util_delete_peer+0x32>
}
   298d8:	4618      	mov	r0, r3
   298da:	b008      	add	sp, #32
   298dc:	bd10      	pop	{r4, pc}
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_PEER_SEC, &key);
   298de:	4669      	mov	r1, sp
   298e0:	2002      	movs	r0, #2
   298e2:	f7ff ffd4 	bl	2988e <ble_store_util_delete_all>
    if (rc != 0) {
   298e6:	4603      	mov	r3, r0
   298e8:	2800      	cmp	r0, #0
   298ea:	d1f5      	bne.n	298d8 <ble_store_util_delete_peer+0x2c>
    memset(&key, 0, sizeof key);
   298ec:	2220      	movs	r2, #32
   298ee:	2100      	movs	r1, #0
   298f0:	4668      	mov	r0, sp
   298f2:	f7f1 f9e4 	bl	1acbe <memset>
    key.cccd.peer_addr = *peer_id_addr;
   298f6:	6820      	ldr	r0, [r4, #0]
   298f8:	9000      	str	r0, [sp, #0]
   298fa:	88a2      	ldrh	r2, [r4, #4]
   298fc:	79a3      	ldrb	r3, [r4, #6]
   298fe:	f8ad 2004 	strh.w	r2, [sp, #4]
   29902:	f88d 3006 	strb.w	r3, [sp, #6]
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_CCCD, &key);
   29906:	4669      	mov	r1, sp
   29908:	2003      	movs	r0, #3
   2990a:	f7ff ffc0 	bl	2988e <ble_store_util_delete_all>
   2990e:	4603      	mov	r3, r0
    if (rc != 0) {
   29910:	e7e2      	b.n	298d8 <ble_store_util_delete_peer+0x2c>

00029912 <ble_store_util_status_rr>:
 * uninteresting peers could cause important bonds to be deleted.  This is
 * useful for demonstrations and sample apps.
 */
int
ble_store_util_status_rr(struct ble_store_status_event *event, void *arg)
{
   29912:	b508      	push	{r3, lr}
    switch (event->event_code) {
   29914:	6803      	ldr	r3, [r0, #0]
   29916:	2b01      	cmp	r3, #1
   29918:	d003      	beq.n	29922 <ble_store_util_status_rr+0x10>
   2991a:	2b02      	cmp	r3, #2
   2991c:	d113      	bne.n	29946 <ble_store_util_status_rr+0x34>
   2991e:	2000      	movs	r0, #0
        return 0;

    default:
        return BLE_HS_EUNKNOWN;
    }
}
   29920:	bd08      	pop	{r3, pc}
        switch (event->overflow.obj_type) {
   29922:	6843      	ldr	r3, [r0, #4]
   29924:	2b02      	cmp	r3, #2
   29926:	dd05      	ble.n	29934 <ble_store_util_status_rr+0x22>
   29928:	2b03      	cmp	r3, #3
   2992a:	d107      	bne.n	2993c <ble_store_util_status_rr+0x2a>
            return ble_gap_unpair_oldest_except(&event->overflow.value->cccd.peer_addr);
   2992c:	6880      	ldr	r0, [r0, #8]
   2992e:	f7f9 f979 	bl	22c24 <ble_gap_unpair_oldest_except>
   29932:	e7f5      	b.n	29920 <ble_store_util_status_rr+0xe>
        switch (event->overflow.obj_type) {
   29934:	2b00      	cmp	r3, #0
   29936:	dc03      	bgt.n	29940 <ble_store_util_status_rr+0x2e>
   29938:	2011      	movs	r0, #17
   2993a:	e7f1      	b.n	29920 <ble_store_util_status_rr+0xe>
   2993c:	2011      	movs	r0, #17
   2993e:	e7ef      	b.n	29920 <ble_store_util_status_rr+0xe>
            return ble_gap_unpair_oldest_peer();
   29940:	f7f9 f96e 	bl	22c20 <ble_gap_unpair_oldest_peer>
   29944:	e7ec      	b.n	29920 <ble_store_util_status_rr+0xe>
        return BLE_HS_EUNKNOWN;
   29946:	2011      	movs	r0, #17
   29948:	e7ea      	b.n	29920 <ble_store_util_status_rr+0xe>

0002994a <ble_uuid_init_from_buf>:
#define VERIFY_UUID(uuid)
#endif

int
ble_uuid_init_from_buf(ble_uuid_any_t *uuid, const void *buf, size_t len)
{
   2994a:	b570      	push	{r4, r5, r6, lr}
   2994c:	4604      	mov	r4, r0
   2994e:	4608      	mov	r0, r1
    switch (len) {
   29950:	2a04      	cmp	r2, #4
   29952:	d00c      	beq.n	2996e <ble_uuid_init_from_buf+0x24>
   29954:	2a10      	cmp	r2, #16
   29956:	d011      	beq.n	2997c <ble_uuid_init_from_buf+0x32>
   29958:	2a02      	cmp	r2, #2
   2995a:	d001      	beq.n	29960 <ble_uuid_init_from_buf+0x16>
   2995c:	2003      	movs	r0, #3
        memcpy(uuid->u128.value, buf, 16);
        return 0;
    }

    return BLE_HS_EINVAL;
}
   2995e:	bd70      	pop	{r4, r5, r6, pc}
        uuid->u.type = BLE_UUID_TYPE_16;
   29960:	2310      	movs	r3, #16
   29962:	7023      	strb	r3, [r4, #0]
        uuid->u16.value = get_le16(buf);
   29964:	f7ef fa5a 	bl	18e1c <get_le16>
   29968:	8060      	strh	r0, [r4, #2]
        return 0;
   2996a:	2000      	movs	r0, #0
   2996c:	e7f7      	b.n	2995e <ble_uuid_init_from_buf+0x14>
        uuid->u.type = BLE_UUID_TYPE_32;
   2996e:	2320      	movs	r3, #32
   29970:	7023      	strb	r3, [r4, #0]
        uuid->u32.value = get_le32(buf);
   29972:	f7ef fa58 	bl	18e26 <get_le32>
   29976:	6060      	str	r0, [r4, #4]
        return 0;
   29978:	2000      	movs	r0, #0
   2997a:	e7f0      	b.n	2995e <ble_uuid_init_from_buf+0x14>
        uuid->u.type = BLE_UUID_TYPE_128;
   2997c:	4623      	mov	r3, r4
   2997e:	2280      	movs	r2, #128	; 0x80
   29980:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(uuid->u128.value, buf, 16);
   29984:	680e      	ldr	r6, [r1, #0]
   29986:	684d      	ldr	r5, [r1, #4]
   29988:	6889      	ldr	r1, [r1, #8]
   2998a:	68c2      	ldr	r2, [r0, #12]
   2998c:	f8c4 6001 	str.w	r6, [r4, #1]
   29990:	605d      	str	r5, [r3, #4]
   29992:	6099      	str	r1, [r3, #8]
   29994:	60da      	str	r2, [r3, #12]
        return 0;
   29996:	2000      	movs	r0, #0
   29998:	e7e1      	b.n	2995e <ble_uuid_init_from_buf+0x14>

0002999a <ble_uuid_cmp>:

int
ble_uuid_cmp(const ble_uuid_t *uuid1, const ble_uuid_t *uuid2)
{
   2999a:	b508      	push	{r3, lr}
    VERIFY_UUID(uuid1);
    VERIFY_UUID(uuid2);

    if (uuid1->type != uuid2->type) {
   2999c:	7803      	ldrb	r3, [r0, #0]
   2999e:	780a      	ldrb	r2, [r1, #0]
   299a0:	4293      	cmp	r3, r2
   299a2:	d001      	beq.n	299a8 <ble_uuid_cmp+0xe>
      return uuid1->type - uuid2->type;
   299a4:	1a98      	subs	r0, r3, r2
    }

    BLE_HS_DBG_ASSERT(0);

    return -1;
}
   299a6:	bd08      	pop	{r3, pc}
    switch (uuid1->type) {
   299a8:	2b20      	cmp	r3, #32
   299aa:	d00a      	beq.n	299c2 <ble_uuid_cmp+0x28>
   299ac:	2b80      	cmp	r3, #128	; 0x80
   299ae:	d00c      	beq.n	299ca <ble_uuid_cmp+0x30>
   299b0:	2b10      	cmp	r3, #16
   299b2:	d002      	beq.n	299ba <ble_uuid_cmp+0x20>
   299b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   299b8:	e7f5      	b.n	299a6 <ble_uuid_cmp+0xc>
        return (int) BLE_UUID16(uuid1)->value - (int) BLE_UUID16(uuid2)->value;
   299ba:	8840      	ldrh	r0, [r0, #2]
   299bc:	884b      	ldrh	r3, [r1, #2]
   299be:	1ac0      	subs	r0, r0, r3
   299c0:	e7f1      	b.n	299a6 <ble_uuid_cmp+0xc>
        return (int) BLE_UUID32(uuid1)->value - (int) BLE_UUID32(uuid2)->value;
   299c2:	6840      	ldr	r0, [r0, #4]
   299c4:	684b      	ldr	r3, [r1, #4]
   299c6:	1ac0      	subs	r0, r0, r3
   299c8:	e7ed      	b.n	299a6 <ble_uuid_cmp+0xc>
        return memcmp(BLE_UUID128(uuid1)->value, BLE_UUID128(uuid2)->value, 16);
   299ca:	2210      	movs	r2, #16
   299cc:	3101      	adds	r1, #1
   299ce:	3001      	adds	r0, #1
   299d0:	f7f1 f92c 	bl	1ac2c <memcmp>
   299d4:	e7e7      	b.n	299a6 <ble_uuid_cmp+0xc>
	...

000299d8 <ble_uuid_to_str>:
    }
}

char *
ble_uuid_to_str(const ble_uuid_t *uuid, char *dst)
{
   299d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   299dc:	b091      	sub	sp, #68	; 0x44
   299de:	4688      	mov	r8, r1
    const uint8_t *u8p;

    switch (uuid->type) {
   299e0:	7803      	ldrb	r3, [r0, #0]
   299e2:	2b20      	cmp	r3, #32
   299e4:	d00f      	beq.n	29a06 <ble_uuid_to_str+0x2e>
   299e6:	2b80      	cmp	r3, #128	; 0x80
   299e8:	d013      	beq.n	29a12 <ble_uuid_to_str+0x3a>
   299ea:	2b10      	cmp	r3, #16
   299ec:	d002      	beq.n	299f4 <ble_uuid_to_str+0x1c>
                u8p[11], u8p[10],  u8p[9],  u8p[8],
                 u8p[7],  u8p[6],  u8p[5],  u8p[4],
                 u8p[3],  u8p[2],  u8p[1],  u8p[0]);
        break;
    default:
        dst[0] = '\0';
   299ee:	2300      	movs	r3, #0
   299f0:	700b      	strb	r3, [r1, #0]
        break;
   299f2:	e004      	b.n	299fe <ble_uuid_to_str+0x26>
        sprintf(dst, "0x%04" PRIx16, BLE_UUID16(uuid)->value);
   299f4:	8842      	ldrh	r2, [r0, #2]
   299f6:	491f      	ldr	r1, [pc, #124]	; (29a74 <ble_uuid_to_str+0x9c>)
   299f8:	4640      	mov	r0, r8
   299fa:	f005 f87f 	bl	2eafc <sprintf>
    }

    return dst;
}
   299fe:	4640      	mov	r0, r8
   29a00:	b011      	add	sp, #68	; 0x44
   29a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        sprintf(dst, "0x%08" PRIx32, BLE_UUID32(uuid)->value);
   29a06:	6842      	ldr	r2, [r0, #4]
   29a08:	491b      	ldr	r1, [pc, #108]	; (29a78 <ble_uuid_to_str+0xa0>)
   29a0a:	4640      	mov	r0, r8
   29a0c:	f005 f876 	bl	2eafc <sprintf>
        break;
   29a10:	e7f5      	b.n	299fe <ble_uuid_to_str+0x26>
                u8p[15], u8p[14], u8p[13], u8p[12],
   29a12:	7b83      	ldrb	r3, [r0, #14]
   29a14:	930e      	str	r3, [sp, #56]	; 0x38
   29a16:	7b42      	ldrb	r2, [r0, #13]
                u8p[11], u8p[10],  u8p[9],  u8p[8],
   29a18:	7b01      	ldrb	r1, [r0, #12]
   29a1a:	7ac4      	ldrb	r4, [r0, #11]
   29a1c:	940f      	str	r4, [sp, #60]	; 0x3c
   29a1e:	7a84      	ldrb	r4, [r0, #10]
   29a20:	7a45      	ldrb	r5, [r0, #9]
                 u8p[7],  u8p[6],  u8p[5],  u8p[4],
   29a22:	7a06      	ldrb	r6, [r0, #8]
   29a24:	79c7      	ldrb	r7, [r0, #7]
   29a26:	f890 c006 	ldrb.w	ip, [r0, #6]
   29a2a:	f890 e005 	ldrb.w	lr, [r0, #5]
                 u8p[3],  u8p[2],  u8p[1],  u8p[0]);
   29a2e:	7903      	ldrb	r3, [r0, #4]
   29a30:	f890 9003 	ldrb.w	r9, [r0, #3]
   29a34:	f890 a002 	ldrb.w	sl, [r0, #2]
   29a38:	f890 b001 	ldrb.w	fp, [r0, #1]
        sprintf(dst, "%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-"
   29a3c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   29a40:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
   29a44:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   29a48:	930a      	str	r3, [sp, #40]	; 0x28
   29a4a:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
   29a4e:	f8cd c020 	str.w	ip, [sp, #32]
   29a52:	9707      	str	r7, [sp, #28]
   29a54:	9606      	str	r6, [sp, #24]
   29a56:	9505      	str	r5, [sp, #20]
   29a58:	9404      	str	r4, [sp, #16]
   29a5a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   29a5c:	9403      	str	r4, [sp, #12]
   29a5e:	9102      	str	r1, [sp, #8]
   29a60:	9201      	str	r2, [sp, #4]
   29a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   29a64:	9300      	str	r3, [sp, #0]
   29a66:	7bc3      	ldrb	r3, [r0, #15]
   29a68:	7c02      	ldrb	r2, [r0, #16]
   29a6a:	4904      	ldr	r1, [pc, #16]	; (29a7c <ble_uuid_to_str+0xa4>)
   29a6c:	4640      	mov	r0, r8
   29a6e:	f005 f845 	bl	2eafc <sprintf>
        break;
   29a72:	e7c4      	b.n	299fe <ble_uuid_to_str+0x26>
   29a74:	0003510c 	.word	0x0003510c
   29a78:	00035114 	.word	0x00035114
   29a7c:	0003511c 	.word	0x0003511c

00029a80 <ble_uuid_u16>:
uint16_t
ble_uuid_u16(const ble_uuid_t *uuid)
{
    VERIFY_UUID(uuid);

    return uuid->type == BLE_UUID_TYPE_16 ? BLE_UUID16(uuid)->value : 0;
   29a80:	7803      	ldrb	r3, [r0, #0]
   29a82:	2b10      	cmp	r3, #16
   29a84:	d001      	beq.n	29a8a <ble_uuid_u16+0xa>
   29a86:	2000      	movs	r0, #0
}
   29a88:	4770      	bx	lr
    return uuid->type == BLE_UUID_TYPE_16 ? BLE_UUID16(uuid)->value : 0;
   29a8a:	8840      	ldrh	r0, [r0, #2]
   29a8c:	4770      	bx	lr

00029a8e <ble_uuid_init_from_att_buf>:
    return rc;
}

int
ble_uuid_init_from_att_buf(ble_uuid_any_t *uuid, const void *buf, size_t len)
{
   29a8e:	b570      	push	{r4, r5, r6, lr}
   29a90:	4604      	mov	r4, r0
    int rc = 0;

    if (len == 2) {
   29a92:	2a02      	cmp	r2, #2
   29a94:	d003      	beq.n	29a9e <ble_uuid_init_from_att_buf+0x10>
        uuid->u.type = BLE_UUID_TYPE_16;
        uuid->u16.value = get_le16(buf);
    } else if (len == 16) {
   29a96:	2a10      	cmp	r2, #16
   29a98:	d009      	beq.n	29aae <ble_uuid_init_from_att_buf+0x20>
        uuid->u.type = BLE_UUID_TYPE_128;
        memcpy(uuid->u128.value, buf, 16);
    } else {
        rc = BLE_HS_EINVAL;
   29a9a:	2003      	movs	r0, #3
    }

    return rc;
}
   29a9c:	bd70      	pop	{r4, r5, r6, pc}
        uuid->u.type = BLE_UUID_TYPE_16;
   29a9e:	2310      	movs	r3, #16
   29aa0:	7003      	strb	r3, [r0, #0]
        uuid->u16.value = get_le16(buf);
   29aa2:	4608      	mov	r0, r1
   29aa4:	f7ef f9ba 	bl	18e1c <get_le16>
   29aa8:	8060      	strh	r0, [r4, #2]
    int rc = 0;
   29aaa:	2000      	movs	r0, #0
   29aac:	e7f6      	b.n	29a9c <ble_uuid_init_from_att_buf+0xe>
        uuid->u.type = BLE_UUID_TYPE_128;
   29aae:	4603      	mov	r3, r0
   29ab0:	2280      	movs	r2, #128	; 0x80
   29ab2:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(uuid->u128.value, buf, 16);
   29ab6:	680e      	ldr	r6, [r1, #0]
   29ab8:	684d      	ldr	r5, [r1, #4]
   29aba:	6888      	ldr	r0, [r1, #8]
   29abc:	68ca      	ldr	r2, [r1, #12]
   29abe:	f8c4 6001 	str.w	r6, [r4, #1]
   29ac2:	605d      	str	r5, [r3, #4]
   29ac4:	6098      	str	r0, [r3, #8]
   29ac6:	60da      	str	r2, [r3, #12]
    int rc = 0;
   29ac8:	2000      	movs	r0, #0
   29aca:	e7e7      	b.n	29a9c <ble_uuid_init_from_att_buf+0xe>

00029acc <ble_uuid_init_from_att_mbuf>:
{
   29acc:	b530      	push	{r4, r5, lr}
   29ace:	b085      	sub	sp, #20
   29ad0:	4605      	mov	r5, r0
   29ad2:	4608      	mov	r0, r1
   29ad4:	4611      	mov	r1, r2
   29ad6:	461c      	mov	r4, r3
    rc = os_mbuf_copydata(om, off, len, val);
   29ad8:	466b      	mov	r3, sp
   29ada:	4622      	mov	r2, r4
   29adc:	f7ef fe38 	bl	19750 <os_mbuf_copydata>
    if (rc != 0) {
   29ae0:	b108      	cbz	r0, 29ae6 <ble_uuid_init_from_att_mbuf+0x1a>
}
   29ae2:	b005      	add	sp, #20
   29ae4:	bd30      	pop	{r4, r5, pc}
    rc = ble_uuid_init_from_att_buf(uuid, val, len);
   29ae6:	4622      	mov	r2, r4
   29ae8:	4669      	mov	r1, sp
   29aea:	4628      	mov	r0, r5
   29aec:	f7ff ffcf 	bl	29a8e <ble_uuid_init_from_att_buf>
    return rc;
   29af0:	e7f7      	b.n	29ae2 <ble_uuid_init_from_att_mbuf+0x16>

00029af2 <ble_uuid_to_any>:
int
ble_uuid_to_any(const ble_uuid_t *uuid, ble_uuid_any_t *uuid_any)
{
    VERIFY_UUID(uuid);

    uuid_any->u.type = uuid->type;
   29af2:	7803      	ldrb	r3, [r0, #0]
   29af4:	700b      	strb	r3, [r1, #0]

    switch (uuid->type) {
   29af6:	2b20      	cmp	r3, #32
   29af8:	d009      	beq.n	29b0e <ble_uuid_to_any+0x1c>
   29afa:	2b80      	cmp	r3, #128	; 0x80
   29afc:	d00b      	beq.n	29b16 <ble_uuid_to_any+0x24>
   29afe:	2b10      	cmp	r3, #16
   29b00:	d001      	beq.n	29b06 <ble_uuid_to_any+0x14>
   29b02:	2003      	movs	r0, #3
    default:
        return BLE_HS_EINVAL;
    }

    return 0;
}
   29b04:	4770      	bx	lr
        uuid_any->u16.value = BLE_UUID16(uuid)->value;
   29b06:	8843      	ldrh	r3, [r0, #2]
   29b08:	804b      	strh	r3, [r1, #2]
    return 0;
   29b0a:	2000      	movs	r0, #0
        break;
   29b0c:	4770      	bx	lr
        uuid_any->u32.value = BLE_UUID32(uuid)->value;
   29b0e:	6843      	ldr	r3, [r0, #4]
   29b10:	604b      	str	r3, [r1, #4]
    return 0;
   29b12:	2000      	movs	r0, #0
        break;
   29b14:	4770      	bx	lr
{
   29b16:	b430      	push	{r4, r5}
        memcpy(uuid_any->u128.value, BLE_UUID128(uuid)->value, 16);
   29b18:	f850 5f01 	ldr.w	r5, [r0, #1]!
   29b1c:	6844      	ldr	r4, [r0, #4]
   29b1e:	6882      	ldr	r2, [r0, #8]
   29b20:	68c3      	ldr	r3, [r0, #12]
   29b22:	f8c1 5001 	str.w	r5, [r1, #1]
   29b26:	f8c1 4005 	str.w	r4, [r1, #5]
   29b2a:	f8c1 2009 	str.w	r2, [r1, #9]
   29b2e:	f8c1 300d 	str.w	r3, [r1, #13]
    return 0;
   29b32:	2000      	movs	r0, #0
}
   29b34:	bc30      	pop	{r4, r5}
   29b36:	4770      	bx	lr

00029b38 <ble_uuid_flat>:
    return 0;
}

int
ble_uuid_flat(const ble_uuid_t *uuid, void *dst)
{
   29b38:	b570      	push	{r4, r5, r6, lr}
   29b3a:	4605      	mov	r5, r0
   29b3c:	460c      	mov	r4, r1
    VERIFY_UUID(uuid);

    switch (uuid->type) {
   29b3e:	7803      	ldrb	r3, [r0, #0]
   29b40:	2b20      	cmp	r3, #32
   29b42:	d00b      	beq.n	29b5c <ble_uuid_flat+0x24>
   29b44:	2b80      	cmp	r3, #128	; 0x80
   29b46:	d016      	beq.n	29b76 <ble_uuid_flat+0x3e>
   29b48:	2b10      	cmp	r3, #16
   29b4a:	d001      	beq.n	29b50 <ble_uuid_flat+0x18>
   29b4c:	2003      	movs	r0, #3
    default:
        return BLE_HS_EINVAL;
    }

    return 0;
}
   29b4e:	bd70      	pop	{r4, r5, r6, pc}
        put_le16(dst, BLE_UUID16(uuid)->value);
   29b50:	8841      	ldrh	r1, [r0, #2]
   29b52:	4620      	mov	r0, r4
   29b54:	f7ef f954 	bl	18e00 <put_le16>
    return 0;
   29b58:	2000      	movs	r0, #0
        break;
   29b5a:	e7f8      	b.n	29b4e <ble_uuid_flat+0x16>
        memcpy(dst, ble_uuid_base, 16);
   29b5c:	4e0b      	ldr	r6, [pc, #44]	; (29b8c <ble_uuid_flat+0x54>)
   29b5e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   29b60:	6020      	str	r0, [r4, #0]
   29b62:	6061      	str	r1, [r4, #4]
   29b64:	60a2      	str	r2, [r4, #8]
   29b66:	4620      	mov	r0, r4
   29b68:	f840 3f0c 	str.w	r3, [r0, #12]!
        put_le32(dst + 12, BLE_UUID32(uuid)->value);
   29b6c:	6869      	ldr	r1, [r5, #4]
   29b6e:	f7ef f94b 	bl	18e08 <put_le32>
    return 0;
   29b72:	2000      	movs	r0, #0
        break;
   29b74:	e7eb      	b.n	29b4e <ble_uuid_flat+0x16>
        memcpy(dst, BLE_UUID128(uuid)->value, 16);
   29b76:	f855 0f01 	ldr.w	r0, [r5, #1]!
   29b7a:	6869      	ldr	r1, [r5, #4]
   29b7c:	68aa      	ldr	r2, [r5, #8]
   29b7e:	68eb      	ldr	r3, [r5, #12]
   29b80:	6020      	str	r0, [r4, #0]
   29b82:	6061      	str	r1, [r4, #4]
   29b84:	60a2      	str	r2, [r4, #8]
   29b86:	60e3      	str	r3, [r4, #12]
    return 0;
   29b88:	2000      	movs	r0, #0
        break;
   29b8a:	e7e0      	b.n	29b4e <ble_uuid_flat+0x16>
   29b8c:	00035164 	.word	0x00035164

00029b90 <ble_uuid_length>:
int
ble_uuid_length(const ble_uuid_t *uuid)
{
    VERIFY_UUID(uuid);

    return uuid->type >> 3;
   29b90:	7800      	ldrb	r0, [r0, #0]
}
   29b92:	08c0      	lsrs	r0, r0, #3
   29b94:	4770      	bx	lr

00029b96 <ble_uuid_to_mbuf>:
{
   29b96:	b538      	push	{r3, r4, r5, lr}
   29b98:	4605      	mov	r5, r0
   29b9a:	460c      	mov	r4, r1
    len = ble_uuid_length(uuid);
   29b9c:	f7ff fff8 	bl	29b90 <ble_uuid_length>
    buf = os_mbuf_extend(om, len);
   29ba0:	b281      	uxth	r1, r0
   29ba2:	4620      	mov	r0, r4
   29ba4:	f7ef ffb6 	bl	19b14 <os_mbuf_extend>
    if (buf == NULL) {
   29ba8:	b128      	cbz	r0, 29bb6 <ble_uuid_to_mbuf+0x20>
   29baa:	4601      	mov	r1, r0
    ble_uuid_flat(uuid, buf);
   29bac:	4628      	mov	r0, r5
   29bae:	f7ff ffc3 	bl	29b38 <ble_uuid_flat>
    return 0;
   29bb2:	2000      	movs	r0, #0
}
   29bb4:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOMEM;
   29bb6:	2006      	movs	r0, #6
   29bb8:	e7fc      	b.n	29bb4 <ble_uuid_to_mbuf+0x1e>
	...

00029bbc <ble_svc_ans_new_alert_notify>:
 *
 * @return 0 on success, non-zero error code otherwise.
 */
static int
ble_svc_ans_new_alert_notify(uint8_t cat_id, const char * info_str)
{
   29bbc:	b538      	push	{r3, r4, r5, lr}
    int info_str_len;

    /* Clear notification to remove old infomation that may persist */
    memset(&ble_svc_ans_new_alert_val, '\0',
   29bbe:	4b17      	ldr	r3, [pc, #92]	; (29c1c <ble_svc_ans_new_alert_notify+0x60>)
   29bc0:	2200      	movs	r2, #0
   29bc2:	601a      	str	r2, [r3, #0]
   29bc4:	605a      	str	r2, [r3, #4]
   29bc6:	609a      	str	r2, [r3, #8]
   29bc8:	60da      	str	r2, [r3, #12]
   29bca:	611a      	str	r2, [r3, #16]
           BLE_SVC_ANS_NEW_ALERT_MAX_LEN);

    /* Set ID and count values */
    ble_svc_ans_new_alert_val[0] = cat_id;
   29bcc:	7018      	strb	r0, [r3, #0]
    ble_svc_ans_new_alert_val[1] = ble_svc_ans_new_alert_cnt[cat_id];
   29bce:	4a14      	ldr	r2, [pc, #80]	; (29c20 <ble_svc_ans_new_alert_notify+0x64>)
   29bd0:	5c12      	ldrb	r2, [r2, r0]
   29bd2:	705a      	strb	r2, [r3, #1]

    if (info_str) {
   29bd4:	b1a9      	cbz	r1, 29c02 <ble_svc_ans_new_alert_notify+0x46>
   29bd6:	460c      	mov	r4, r1
        info_str_len = strlen(info_str);
   29bd8:	4608      	mov	r0, r1
   29bda:	f7f1 f8b2 	bl	1ad42 <strlen>
   29bde:	4602      	mov	r2, r0
        if (info_str_len > BLE_SVC_ANS_INFO_STR_MAX_LEN) {
   29be0:	2812      	cmp	r0, #18
   29be2:	dd15      	ble.n	29c10 <ble_svc_ans_new_alert_notify+0x54>
            /* If info_str is longer than the max string length only
             * write up to the maximum length */
            memcpy(&ble_svc_ans_new_alert_val[2], info_str,
   29be4:	4b0d      	ldr	r3, [pc, #52]	; (29c1c <ble_svc_ans_new_alert_notify+0x60>)
   29be6:	6825      	ldr	r5, [r4, #0]
   29be8:	6860      	ldr	r0, [r4, #4]
   29bea:	68a1      	ldr	r1, [r4, #8]
   29bec:	68e2      	ldr	r2, [r4, #12]
   29bee:	f8c3 5002 	str.w	r5, [r3, #2]
   29bf2:	f8c3 0006 	str.w	r0, [r3, #6]
   29bf6:	f8c3 100a 	str.w	r1, [r3, #10]
   29bfa:	f8c3 200e 	str.w	r2, [r3, #14]
   29bfe:	8a22      	ldrh	r2, [r4, #16]
   29c00:	825a      	strh	r2, [r3, #18]
                   BLE_SVC_ANS_INFO_STR_MAX_LEN);
        } else {
            memcpy(&ble_svc_ans_new_alert_val[2], info_str, info_str_len);
        }
    }
    return ble_gattc_notify(ble_svc_ans_conn_handle,
   29c02:	4b08      	ldr	r3, [pc, #32]	; (29c24 <ble_svc_ans_new_alert_notify+0x68>)
   29c04:	8819      	ldrh	r1, [r3, #0]
   29c06:	4b08      	ldr	r3, [pc, #32]	; (29c28 <ble_svc_ans_new_alert_notify+0x6c>)
   29c08:	8818      	ldrh	r0, [r3, #0]
   29c0a:	f7fb f823 	bl	24c54 <ble_gattc_notify>
                            ble_svc_ans_new_alert_val_handle);
}
   29c0e:	bd38      	pop	{r3, r4, r5, pc}
            memcpy(&ble_svc_ans_new_alert_val[2], info_str, info_str_len);
   29c10:	4621      	mov	r1, r4
   29c12:	4806      	ldr	r0, [pc, #24]	; (29c2c <ble_svc_ans_new_alert_notify+0x70>)
   29c14:	f7f1 f82e 	bl	1ac74 <memcpy>
   29c18:	e7f3      	b.n	29c02 <ble_svc_ans_new_alert_notify+0x46>
   29c1a:	bf00      	nop
   29c1c:	10006254 	.word	0x10006254
   29c20:	1000624c 	.word	0x1000624c
   29c24:	10006268 	.word	0x10006268
   29c28:	10006246 	.word	0x10006246
   29c2c:	10006256 	.word	0x10006256

00029c30 <ble_svc_ans_unr_alert_notify>:
 *
 * @return 0 on success, non-zer0 error code otherwise.
 */
static int
ble_svc_ans_unr_alert_notify(uint8_t cat_id)
{
   29c30:	b508      	push	{r3, lr}
    ble_svc_ans_unr_alert_stat[0] = cat_id;
   29c32:	4b06      	ldr	r3, [pc, #24]	; (29c4c <ble_svc_ans_unr_alert_notify+0x1c>)
   29c34:	7018      	strb	r0, [r3, #0]
    ble_svc_ans_unr_alert_stat[1] = ble_svc_ans_unr_alert_cnt[cat_id];
   29c36:	4a06      	ldr	r2, [pc, #24]	; (29c50 <ble_svc_ans_unr_alert_notify+0x20>)
   29c38:	5c12      	ldrb	r2, [r2, r0]
   29c3a:	705a      	strb	r2, [r3, #1]
    return ble_gattc_notify(ble_svc_ans_conn_handle,
   29c3c:	4b05      	ldr	r3, [pc, #20]	; (29c54 <ble_svc_ans_unr_alert_notify+0x24>)
   29c3e:	8819      	ldrh	r1, [r3, #0]
   29c40:	4b05      	ldr	r3, [pc, #20]	; (29c58 <ble_svc_ans_unr_alert_notify+0x28>)
   29c42:	8818      	ldrh	r0, [r3, #0]
   29c44:	f7fb f806 	bl	24c54 <ble_gattc_notify>
                            ble_svc_ans_unr_alert_val_handle);
}
   29c48:	bd08      	pop	{r3, pc}
   29c4a:	bf00      	nop
   29c4c:	10006278 	.word	0x10006278
   29c50:	10006270 	.word	0x10006270
   29c54:	1000627a 	.word	0x1000627a
   29c58:	10006246 	.word	0x10006246

00029c5c <ble_svc_ans_chr_write>:
 */
static int
ble_svc_ans_chr_write(struct os_mbuf *om, uint16_t min_len,
                      uint16_t max_len, void *dst,
                      uint16_t *len)
{
   29c5c:	b510      	push	{r4, lr}
   29c5e:	461c      	mov	r4, r3
    uint16_t om_len;
    int rc;

    om_len = OS_MBUF_PKTLEN(om);
   29c60:	8a03      	ldrh	r3, [r0, #16]
    if (om_len < min_len || om_len > max_len) {
   29c62:	428b      	cmp	r3, r1
   29c64:	d307      	bcc.n	29c76 <ble_svc_ans_chr_write+0x1a>
   29c66:	4293      	cmp	r3, r2
   29c68:	d807      	bhi.n	29c7a <ble_svc_ans_chr_write+0x1e>
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
    }

    rc = ble_hs_mbuf_to_flat(om, dst, max_len, len);
   29c6a:	9b02      	ldr	r3, [sp, #8]
   29c6c:	4621      	mov	r1, r4
   29c6e:	f7fe fc74 	bl	2855a <ble_hs_mbuf_to_flat>
    if (rc != 0) {
   29c72:	b920      	cbnz	r0, 29c7e <ble_svc_ans_chr_write+0x22>
        return BLE_ATT_ERR_UNLIKELY;
    }

    return 0;
}
   29c74:	bd10      	pop	{r4, pc}
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   29c76:	200d      	movs	r0, #13
   29c78:	e7fc      	b.n	29c74 <ble_svc_ans_chr_write+0x18>
   29c7a:	200d      	movs	r0, #13
   29c7c:	e7fa      	b.n	29c74 <ble_svc_ans_chr_write+0x18>
        return BLE_ATT_ERR_UNLIKELY;
   29c7e:	200e      	movs	r0, #14
   29c80:	e7f8      	b.n	29c74 <ble_svc_ans_chr_write+0x18>
	...

00029c84 <ble_svc_ans_access>:
{
   29c84:	b530      	push	{r4, r5, lr}
   29c86:	b083      	sub	sp, #12
   29c88:	4614      	mov	r4, r2
    uuid16 = ble_uuid_u16(ctxt->chr->uuid);
   29c8a:	6893      	ldr	r3, [r2, #8]
   29c8c:	6818      	ldr	r0, [r3, #0]
   29c8e:	f7ff fef7 	bl	29a80 <ble_uuid_u16>
    assert(uuid16 != 0);
   29c92:	b150      	cbz	r0, 29caa <ble_svc_ans_access+0x26>
    switch (uuid16) {
   29c94:	f5a0 5329 	sub.w	r3, r0, #10816	; 0x2a40
   29c98:	3b04      	subs	r3, #4
   29c9a:	2b04      	cmp	r3, #4
   29c9c:	f200 80d7 	bhi.w	29e4e <ble_svc_ans_access+0x1ca>
   29ca0:	e8df f003 	tbb	[pc, r3]
   29ca4:	0d235a70 	.word	0x0d235a70
   29ca8:	45          	.byte	0x45
   29ca9:	00          	.byte	0x00
    assert(uuid16 != 0);
   29caa:	f7ea fd2b 	bl	14704 <hal_debugger_connected>
   29cae:	b100      	cbz	r0, 29cb2 <ble_svc_ans_access+0x2e>
   29cb0:	be01      	bkpt	0x0001
   29cb2:	2300      	movs	r3, #0
   29cb4:	461a      	mov	r2, r3
   29cb6:	4619      	mov	r1, r3
   29cb8:	4618      	mov	r0, r3
   29cba:	f7ef f833 	bl	18d24 <__assert_func>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   29cbe:	7823      	ldrb	r3, [r4, #0]
   29cc0:	b94b      	cbnz	r3, 29cd6 <ble_svc_ans_access+0x52>
        rc = os_mbuf_append(ctxt->om, &ble_svc_ans_new_alert_cat,
   29cc2:	2201      	movs	r2, #1
   29cc4:	4969      	ldr	r1, [pc, #420]	; (29e6c <ble_svc_ans_access+0x1e8>)
   29cc6:	6860      	ldr	r0, [r4, #4]
   29cc8:	f7ef fcb1 	bl	1962e <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   29ccc:	4604      	mov	r4, r0
   29cce:	2800      	cmp	r0, #0
   29cd0:	d05c      	beq.n	29d8c <ble_svc_ans_access+0x108>
   29cd2:	2411      	movs	r4, #17
   29cd4:	e05a      	b.n	29d8c <ble_svc_ans_access+0x108>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   29cd6:	f7ea fd15 	bl	14704 <hal_debugger_connected>
   29cda:	b100      	cbz	r0, 29cde <ble_svc_ans_access+0x5a>
   29cdc:	be01      	bkpt	0x0001
   29cde:	2300      	movs	r3, #0
   29ce0:	461a      	mov	r2, r3
   29ce2:	4619      	mov	r1, r3
   29ce4:	4618      	mov	r0, r3
   29ce6:	f7ef f81d 	bl	18d24 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   29cea:	7823      	ldrb	r3, [r4, #0]
   29cec:	2b01      	cmp	r3, #1
   29cee:	d00a      	beq.n	29d06 <ble_svc_ans_access+0x82>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   29cf0:	b99b      	cbnz	r3, 29d1a <ble_svc_ans_access+0x96>
            rc = os_mbuf_append(ctxt->om, &ble_svc_ans_new_alert_val,
   29cf2:	2214      	movs	r2, #20
   29cf4:	495e      	ldr	r1, [pc, #376]	; (29e70 <ble_svc_ans_access+0x1ec>)
   29cf6:	6860      	ldr	r0, [r4, #4]
   29cf8:	f7ef fc99 	bl	1962e <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   29cfc:	4604      	mov	r4, r0
   29cfe:	2800      	cmp	r0, #0
   29d00:	d044      	beq.n	29d8c <ble_svc_ans_access+0x108>
   29d02:	2411      	movs	r4, #17
   29d04:	e042      	b.n	29d8c <ble_svc_ans_access+0x108>
            rc = ble_svc_ans_chr_write(ctxt->om, 0,
   29d06:	4b5b      	ldr	r3, [pc, #364]	; (29e74 <ble_svc_ans_access+0x1f0>)
   29d08:	9300      	str	r3, [sp, #0]
   29d0a:	4b59      	ldr	r3, [pc, #356]	; (29e70 <ble_svc_ans_access+0x1ec>)
   29d0c:	2214      	movs	r2, #20
   29d0e:	2100      	movs	r1, #0
   29d10:	6860      	ldr	r0, [r4, #4]
   29d12:	f7ff ffa3 	bl	29c5c <ble_svc_ans_chr_write>
   29d16:	4604      	mov	r4, r0
            return rc;
   29d18:	e038      	b.n	29d8c <ble_svc_ans_access+0x108>
        assert(0);
   29d1a:	f7ea fcf3 	bl	14704 <hal_debugger_connected>
   29d1e:	b100      	cbz	r0, 29d22 <ble_svc_ans_access+0x9e>
   29d20:	be01      	bkpt	0x0001
   29d22:	2300      	movs	r3, #0
   29d24:	461a      	mov	r2, r3
   29d26:	4619      	mov	r1, r3
   29d28:	4618      	mov	r0, r3
   29d2a:	f7ee fffb 	bl	18d24 <__assert_func>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   29d2e:	7823      	ldrb	r3, [r4, #0]
   29d30:	b943      	cbnz	r3, 29d44 <ble_svc_ans_access+0xc0>
        rc = os_mbuf_append(ctxt->om, &ble_svc_ans_unr_alert_cat,
   29d32:	2201      	movs	r2, #1
   29d34:	4950      	ldr	r1, [pc, #320]	; (29e78 <ble_svc_ans_access+0x1f4>)
   29d36:	6860      	ldr	r0, [r4, #4]
   29d38:	f7ef fc79 	bl	1962e <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   29d3c:	4604      	mov	r4, r0
   29d3e:	b328      	cbz	r0, 29d8c <ble_svc_ans_access+0x108>
   29d40:	2411      	movs	r4, #17
   29d42:	e023      	b.n	29d8c <ble_svc_ans_access+0x108>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   29d44:	f7ea fcde 	bl	14704 <hal_debugger_connected>
   29d48:	b100      	cbz	r0, 29d4c <ble_svc_ans_access+0xc8>
   29d4a:	be01      	bkpt	0x0001
   29d4c:	2300      	movs	r3, #0
   29d4e:	461a      	mov	r2, r3
   29d50:	4619      	mov	r1, r3
   29d52:	4618      	mov	r0, r3
   29d54:	f7ee ffe6 	bl	18d24 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   29d58:	7823      	ldrb	r3, [r4, #0]
   29d5a:	2b01      	cmp	r3, #1
   29d5c:	d008      	beq.n	29d70 <ble_svc_ans_access+0xec>
            rc = os_mbuf_append(ctxt->om, &ble_svc_ans_unr_alert_stat,
   29d5e:	2202      	movs	r2, #2
   29d60:	4946      	ldr	r1, [pc, #280]	; (29e7c <ble_svc_ans_access+0x1f8>)
   29d62:	6860      	ldr	r0, [r4, #4]
   29d64:	f7ef fc63 	bl	1962e <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   29d68:	4604      	mov	r4, r0
   29d6a:	b178      	cbz	r0, 29d8c <ble_svc_ans_access+0x108>
   29d6c:	2411      	movs	r4, #17
   29d6e:	e00d      	b.n	29d8c <ble_svc_ans_access+0x108>
            rc = ble_svc_ans_chr_write(ctxt->om,
   29d70:	2300      	movs	r3, #0
   29d72:	9300      	str	r3, [sp, #0]
   29d74:	4b41      	ldr	r3, [pc, #260]	; (29e7c <ble_svc_ans_access+0x1f8>)
   29d76:	2202      	movs	r2, #2
   29d78:	4611      	mov	r1, r2
   29d7a:	6860      	ldr	r0, [r4, #4]
   29d7c:	f7ff ff6e 	bl	29c5c <ble_svc_ans_chr_write>
   29d80:	4604      	mov	r4, r0
            return rc;
   29d82:	e003      	b.n	29d8c <ble_svc_ans_access+0x108>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   29d84:	7823      	ldrb	r3, [r4, #0]
   29d86:	2b01      	cmp	r3, #1
   29d88:	d003      	beq.n	29d92 <ble_svc_ans_access+0x10e>
        return rc;
   29d8a:	240e      	movs	r4, #14
}
   29d8c:	4620      	mov	r0, r4
   29d8e:	b003      	add	sp, #12
   29d90:	bd30      	pop	{r4, r5, pc}
            rc = ble_svc_ans_chr_write(ctxt->om,
   29d92:	2300      	movs	r3, #0
   29d94:	9300      	str	r3, [sp, #0]
   29d96:	4b3a      	ldr	r3, [pc, #232]	; (29e80 <ble_svc_ans_access+0x1fc>)
   29d98:	2202      	movs	r2, #2
   29d9a:	4611      	mov	r1, r2
   29d9c:	6860      	ldr	r0, [r4, #4]
   29d9e:	f7ff ff5d 	bl	29c5c <ble_svc_ans_chr_write>
            if (rc != 0) {
   29da2:	4604      	mov	r4, r0
   29da4:	2800      	cmp	r0, #0
   29da6:	d1f1      	bne.n	29d8c <ble_svc_ans_access+0x108>
            cmd_id = ble_svc_ans_alert_not_ctrl_pt[0];
   29da8:	4b35      	ldr	r3, [pc, #212]	; (29e80 <ble_svc_ans_access+0x1fc>)
   29daa:	781a      	ldrb	r2, [r3, #0]
            cat_id = ble_svc_ans_alert_not_ctrl_pt[1];
   29dac:	7858      	ldrb	r0, [r3, #1]
            if (cat_id < BLE_SVC_ANS_CAT_NUM) {
   29dae:	2807      	cmp	r0, #7
   29db0:	d809      	bhi.n	29dc6 <ble_svc_ans_access+0x142>
                cat_bit_mask = (1 << cat_id);
   29db2:	2301      	movs	r3, #1
   29db4:	4083      	lsls	r3, r0
   29db6:	b2db      	uxtb	r3, r3
            switch (cmd_id) {
   29db8:	2a05      	cmp	r2, #5
   29dba:	d854      	bhi.n	29e66 <ble_svc_ans_access+0x1e2>
   29dbc:	e8df f002 	tbb	[pc, r2]
   29dc0:	17110c07 	.word	0x17110c07
   29dc4:	331d      	.short	0x331d
            } else if (cat_id == 0xff) {
   29dc6:	28ff      	cmp	r0, #255	; 0xff
   29dc8:	d14b      	bne.n	29e62 <ble_svc_ans_access+0x1de>
                cat_bit_mask = cat_id;
   29dca:	4603      	mov	r3, r0
   29dcc:	e7f4      	b.n	29db8 <ble_svc_ans_access+0x134>
                ble_svc_ans_new_alert_cat |= cat_bit_mask;
   29dce:	4a27      	ldr	r2, [pc, #156]	; (29e6c <ble_svc_ans_access+0x1e8>)
   29dd0:	7811      	ldrb	r1, [r2, #0]
   29dd2:	430b      	orrs	r3, r1
   29dd4:	7013      	strb	r3, [r2, #0]
                break;
   29dd6:	e7d9      	b.n	29d8c <ble_svc_ans_access+0x108>
                ble_svc_ans_unr_alert_cat |= cat_bit_mask;
   29dd8:	4a27      	ldr	r2, [pc, #156]	; (29e78 <ble_svc_ans_access+0x1f4>)
   29dda:	7811      	ldrb	r1, [r2, #0]
   29ddc:	430b      	orrs	r3, r1
   29dde:	7013      	strb	r3, [r2, #0]
                break;
   29de0:	e7d4      	b.n	29d8c <ble_svc_ans_access+0x108>
                ble_svc_ans_new_alert_cat &= ~cat_bit_mask;
   29de2:	4922      	ldr	r1, [pc, #136]	; (29e6c <ble_svc_ans_access+0x1e8>)
   29de4:	780a      	ldrb	r2, [r1, #0]
   29de6:	ea22 0303 	bic.w	r3, r2, r3
   29dea:	700b      	strb	r3, [r1, #0]
                break;
   29dec:	e7ce      	b.n	29d8c <ble_svc_ans_access+0x108>
                ble_svc_ans_unr_alert_cat &= ~cat_bit_mask;
   29dee:	4922      	ldr	r1, [pc, #136]	; (29e78 <ble_svc_ans_access+0x1f4>)
   29df0:	780a      	ldrb	r2, [r1, #0]
   29df2:	ea22 0303 	bic.w	r3, r2, r3
   29df6:	700b      	strb	r3, [r1, #0]
                break;
   29df8:	e7c8      	b.n	29d8c <ble_svc_ans_access+0x108>
                if (cat_id == 0xff) {
   29dfa:	28ff      	cmp	r0, #255	; 0xff
   29dfc:	d10f      	bne.n	29e1e <ble_svc_ans_access+0x19a>
                    for (i = BLE_SVC_ANS_CAT_NUM - 1; i > 0; --i) {
   29dfe:	2507      	movs	r5, #7
   29e00:	e000      	b.n	29e04 <ble_svc_ans_access+0x180>
   29e02:	3d01      	subs	r5, #1
   29e04:	2d00      	cmp	r5, #0
   29e06:	ddc1      	ble.n	29d8c <ble_svc_ans_access+0x108>
                        if ((ble_svc_ans_new_alert_cat >> i) & 0x01) {
   29e08:	4b18      	ldr	r3, [pc, #96]	; (29e6c <ble_svc_ans_access+0x1e8>)
   29e0a:	781b      	ldrb	r3, [r3, #0]
   29e0c:	412b      	asrs	r3, r5
   29e0e:	f013 0f01 	tst.w	r3, #1
   29e12:	d0f6      	beq.n	29e02 <ble_svc_ans_access+0x17e>
                            ble_svc_ans_new_alert_notify(i, NULL);
   29e14:	2100      	movs	r1, #0
   29e16:	b2e8      	uxtb	r0, r5
   29e18:	f7ff fed0 	bl	29bbc <ble_svc_ans_new_alert_notify>
   29e1c:	e7f1      	b.n	29e02 <ble_svc_ans_access+0x17e>
                    ble_svc_ans_new_alert_notify(cat_id, NULL);
   29e1e:	2100      	movs	r1, #0
   29e20:	f7ff fecc 	bl	29bbc <ble_svc_ans_new_alert_notify>
   29e24:	e7b2      	b.n	29d8c <ble_svc_ans_access+0x108>
                if (cat_id == 0xff) {
   29e26:	28ff      	cmp	r0, #255	; 0xff
   29e28:	d10e      	bne.n	29e48 <ble_svc_ans_access+0x1c4>
                    for (i = BLE_SVC_ANS_CAT_NUM - 1; i > 0; --i) {
   29e2a:	2507      	movs	r5, #7
   29e2c:	e000      	b.n	29e30 <ble_svc_ans_access+0x1ac>
   29e2e:	3d01      	subs	r5, #1
   29e30:	2d00      	cmp	r5, #0
   29e32:	ddab      	ble.n	29d8c <ble_svc_ans_access+0x108>
                        if ((ble_svc_ans_unr_alert_cat >> i) & 0x01) {
   29e34:	4b10      	ldr	r3, [pc, #64]	; (29e78 <ble_svc_ans_access+0x1f4>)
   29e36:	781b      	ldrb	r3, [r3, #0]
   29e38:	412b      	asrs	r3, r5
   29e3a:	f013 0f01 	tst.w	r3, #1
   29e3e:	d0f6      	beq.n	29e2e <ble_svc_ans_access+0x1aa>
                            ble_svc_ans_unr_alert_notify(i);
   29e40:	b2e8      	uxtb	r0, r5
   29e42:	f7ff fef5 	bl	29c30 <ble_svc_ans_unr_alert_notify>
   29e46:	e7f2      	b.n	29e2e <ble_svc_ans_access+0x1aa>
                    ble_svc_ans_unr_alert_notify(cat_id);
   29e48:	f7ff fef2 	bl	29c30 <ble_svc_ans_unr_alert_notify>
            return 0;
   29e4c:	e79e      	b.n	29d8c <ble_svc_ans_access+0x108>
        assert(0);
   29e4e:	f7ea fc59 	bl	14704 <hal_debugger_connected>
   29e52:	b100      	cbz	r0, 29e56 <ble_svc_ans_access+0x1d2>
   29e54:	be01      	bkpt	0x0001
   29e56:	2300      	movs	r3, #0
   29e58:	461a      	mov	r2, r3
   29e5a:	4619      	mov	r1, r3
   29e5c:	4618      	mov	r0, r3
   29e5e:	f7ee ff61 	bl	18d24 <__assert_func>
                return BLE_ATT_ERR_UNLIKELY;
   29e62:	240e      	movs	r4, #14
   29e64:	e792      	b.n	29d8c <ble_svc_ans_access+0x108>
   29e66:	24a0      	movs	r4, #160	; 0xa0
   29e68:	e790      	b.n	29d8c <ble_svc_ans_access+0x108>
   29e6a:	bf00      	nop
   29e6c:	10006248 	.word	0x10006248
   29e70:	10006254 	.word	0x10006254
   29e74:	1000626a 	.word	0x1000626a
   29e78:	1000626c 	.word	0x1000626c
   29e7c:	10006278 	.word	0x10006278
   29e80:	10006244 	.word	0x10006244

00029e84 <ble_svc_ans_init>:
 * XXX: We should technically be able to change the new alert and
 *      unread alert catagories when we have no active connections.
 */
void
ble_svc_ans_init(void)
{
   29e84:	b510      	push	{r4, lr}
   29e86:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   29e88:	4b1a      	ldr	r3, [pc, #104]	; (29ef4 <ble_svc_ans_init+0x70>)
   29e8a:	781b      	ldrb	r3, [r3, #0]
   29e8c:	b173      	cbz	r3, 29eac <ble_svc_ans_init+0x28>

    rc = ble_gatts_count_cfg(ble_svc_ans_defs);
   29e8e:	481a      	ldr	r0, [pc, #104]	; (29ef8 <ble_svc_ans_init+0x74>)
   29e90:	f7fc f8ba 	bl	26008 <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   29e94:	b9a0      	cbnz	r0, 29ec0 <ble_svc_ans_init+0x3c>

    rc = ble_gatts_add_svcs(ble_svc_ans_defs);
   29e96:	4818      	ldr	r0, [pc, #96]	; (29ef8 <ble_svc_ans_init+0x74>)
   29e98:	f7fc f872 	bl	25f80 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   29e9c:	b9e8      	cbnz	r0, 29eda <ble_svc_ans_init+0x56>

    ble_svc_ans_new_alert_cat = MYNEWT_VAL(BLE_SVC_ANS_NEW_ALERT_CAT);
   29e9e:	2300      	movs	r3, #0
   29ea0:	4a16      	ldr	r2, [pc, #88]	; (29efc <ble_svc_ans_init+0x78>)
   29ea2:	7013      	strb	r3, [r2, #0]
    ble_svc_ans_unr_alert_cat = MYNEWT_VAL(BLE_SVC_ANS_UNR_ALERT_CAT);
   29ea4:	4a16      	ldr	r2, [pc, #88]	; (29f00 <ble_svc_ans_init+0x7c>)
   29ea6:	7013      	strb	r3, [r2, #0]
}
   29ea8:	b002      	add	sp, #8
   29eaa:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   29eac:	f7ea fc2a 	bl	14704 <hal_debugger_connected>
   29eb0:	b100      	cbz	r0, 29eb4 <ble_svc_ans_init+0x30>
   29eb2:	be01      	bkpt	0x0001
   29eb4:	2300      	movs	r3, #0
   29eb6:	461a      	mov	r2, r3
   29eb8:	4619      	mov	r1, r3
   29eba:	4618      	mov	r0, r3
   29ebc:	f7ee ff32 	bl	18d24 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   29ec0:	f7ea fc20 	bl	14704 <hal_debugger_connected>
   29ec4:	b100      	cbz	r0, 29ec8 <ble_svc_ans_init+0x44>
   29ec6:	be01      	bkpt	0x0001
   29ec8:	2000      	movs	r0, #0
   29eca:	9000      	str	r0, [sp, #0]
   29ecc:	4b0d      	ldr	r3, [pc, #52]	; (29f04 <ble_svc_ans_init+0x80>)
   29ece:	681c      	ldr	r4, [r3, #0]
   29ed0:	4603      	mov	r3, r0
   29ed2:	4602      	mov	r2, r0
   29ed4:	4601      	mov	r1, r0
   29ed6:	47a0      	blx	r4
   29ed8:	e7dd      	b.n	29e96 <ble_svc_ans_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   29eda:	f7ea fc13 	bl	14704 <hal_debugger_connected>
   29ede:	b100      	cbz	r0, 29ee2 <ble_svc_ans_init+0x5e>
   29ee0:	be01      	bkpt	0x0001
   29ee2:	2000      	movs	r0, #0
   29ee4:	9000      	str	r0, [sp, #0]
   29ee6:	4b07      	ldr	r3, [pc, #28]	; (29f04 <ble_svc_ans_init+0x80>)
   29ee8:	681c      	ldr	r4, [r3, #0]
   29eea:	4603      	mov	r3, r0
   29eec:	4602      	mov	r2, r0
   29eee:	4601      	mov	r1, r0
   29ef0:	47a0      	blx	r4
   29ef2:	e7d4      	b.n	29e9e <ble_svc_ans_init+0x1a>
   29ef4:	100055a0 	.word	0x100055a0
   29ef8:	00035174 	.word	0x00035174
   29efc:	10006248 	.word	0x10006248
   29f00:	1000626c 	.word	0x1000626c
   29f04:	100006b4 	.word	0x100006b4

00029f08 <ble_svc_gap_device_name_write_access>:
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
}

static int
ble_svc_gap_device_name_write_access(struct ble_gatt_access_ctxt *ctxt)
{
   29f08:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BLE_SVC_GAP_DEVICE_NAME_WRITE_PERM) < 0
    assert(0);
   29f0a:	f7ea fbfb 	bl	14704 <hal_debugger_connected>
   29f0e:	b100      	cbz	r0, 29f12 <ble_svc_gap_device_name_write_access+0xa>
   29f10:	be01      	bkpt	0x0001
   29f12:	2300      	movs	r3, #0
   29f14:	461a      	mov	r2, r3
   29f16:	4619      	mov	r1, r3
   29f18:	4618      	mov	r0, r3
   29f1a:	f7ee ff03 	bl	18d24 <__assert_func>

00029f1e <ble_svc_gap_appearance_write_access>:
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
}

static int
ble_svc_gap_appearance_write_access(struct ble_gatt_access_ctxt *ctxt)
{
   29f1e:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BLE_SVC_GAP_APPEARANCE_WRITE_PERM) < 0
    assert(0);
   29f20:	f7ea fbf0 	bl	14704 <hal_debugger_connected>
   29f24:	b100      	cbz	r0, 29f28 <ble_svc_gap_appearance_write_access+0xa>
   29f26:	be01      	bkpt	0x0001
   29f28:	2300      	movs	r3, #0
   29f2a:	461a      	mov	r2, r3
   29f2c:	4619      	mov	r1, r3
   29f2e:	4618      	mov	r0, r3
   29f30:	f7ee fef8 	bl	18d24 <__assert_func>

00029f34 <ble_svc_gap_device_name_read_access>:
{
   29f34:	b538      	push	{r3, r4, r5, lr}
   29f36:	4604      	mov	r4, r0
    rc = os_mbuf_append(ctxt->om, ble_svc_gap_name, strlen(ble_svc_gap_name));
   29f38:	4d06      	ldr	r5, [pc, #24]	; (29f54 <ble_svc_gap_device_name_read_access+0x20>)
   29f3a:	4628      	mov	r0, r5
   29f3c:	f7f0 ff01 	bl	1ad42 <strlen>
   29f40:	b282      	uxth	r2, r0
   29f42:	4629      	mov	r1, r5
   29f44:	6860      	ldr	r0, [r4, #4]
   29f46:	f7ef fb72 	bl	1962e <os_mbuf_append>
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   29f4a:	b900      	cbnz	r0, 29f4e <ble_svc_gap_device_name_read_access+0x1a>
}
   29f4c:	bd38      	pop	{r3, r4, r5, pc}
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   29f4e:	2011      	movs	r0, #17
   29f50:	e7fc      	b.n	29f4c <ble_svc_gap_device_name_read_access+0x18>
   29f52:	bf00      	nop
   29f54:	100007f8 	.word	0x100007f8

00029f58 <ble_svc_gap_appearance_read_access>:
{
   29f58:	b500      	push	{lr}
   29f5a:	b083      	sub	sp, #12
    uint16_t appearance = htole16(ble_svc_gap_appearance);
   29f5c:	4b07      	ldr	r3, [pc, #28]	; (29f7c <ble_svc_gap_appearance_read_access+0x24>)
   29f5e:	881b      	ldrh	r3, [r3, #0]
   29f60:	f8ad 3006 	strh.w	r3, [sp, #6]
    rc = os_mbuf_append(ctxt->om, &appearance, sizeof(appearance));
   29f64:	2202      	movs	r2, #2
   29f66:	f10d 0106 	add.w	r1, sp, #6
   29f6a:	6840      	ldr	r0, [r0, #4]
   29f6c:	f7ef fb5f 	bl	1962e <os_mbuf_append>
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   29f70:	b910      	cbnz	r0, 29f78 <ble_svc_gap_appearance_read_access+0x20>
}
   29f72:	b003      	add	sp, #12
   29f74:	f85d fb04 	ldr.w	pc, [sp], #4
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   29f78:	2011      	movs	r0, #17
   29f7a:	e7fa      	b.n	29f72 <ble_svc_gap_appearance_read_access+0x1a>
   29f7c:	1000627c 	.word	0x1000627c

00029f80 <ble_svc_gap_access>:
}

static int
ble_svc_gap_access(uint16_t conn_handle, uint16_t attr_handle,
                   struct ble_gatt_access_ctxt *ctxt, void *arg)
{
   29f80:	b510      	push	{r4, lr}
   29f82:	4614      	mov	r4, r2
        htole16(MYNEWT_VAL(BLE_SVC_GAP_PPCP_SUPERVISION_TMO))
    };
#endif
    int rc;

    uuid16 = ble_uuid_u16(ctxt->chr->uuid);
   29f84:	6893      	ldr	r3, [r2, #8]
   29f86:	6818      	ldr	r0, [r3, #0]
   29f88:	f7ff fd7a 	bl	29a80 <ble_uuid_u16>
    assert(uuid16 != 0);
   29f8c:	b1a0      	cbz	r0, 29fb8 <ble_svc_gap_access+0x38>

    switch (uuid16) {
   29f8e:	f5b0 5f28 	cmp.w	r0, #10752	; 0x2a00
   29f92:	d01b      	beq.n	29fcc <ble_svc_gap_access+0x4c>
   29f94:	f642 2201 	movw	r2, #10753	; 0x2a01
   29f98:	4290      	cmp	r0, r2
   29f9a:	d133      	bne.n	2a004 <ble_svc_gap_access+0x84>
            rc = BLE_ATT_ERR_UNLIKELY;
        }
        return rc;

    case BLE_SVC_GAP_CHR_UUID16_APPEARANCE:
        if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   29f9c:	7823      	ldrb	r3, [r4, #0]
   29f9e:	b353      	cbz	r3, 29ff6 <ble_svc_gap_access+0x76>
            rc = ble_svc_gap_appearance_read_access(ctxt);
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   29fa0:	2b01      	cmp	r3, #1
   29fa2:	d02c      	beq.n	29ffe <ble_svc_gap_access+0x7e>
            rc = ble_svc_gap_appearance_write_access(ctxt);
        } else {
            assert(0);
   29fa4:	f7ea fbae 	bl	14704 <hal_debugger_connected>
   29fa8:	b100      	cbz	r0, 29fac <ble_svc_gap_access+0x2c>
   29faa:	be01      	bkpt	0x0001
   29fac:	2300      	movs	r3, #0
   29fae:	461a      	mov	r2, r3
   29fb0:	4619      	mov	r1, r3
   29fb2:	4618      	mov	r0, r3
   29fb4:	f7ee feb6 	bl	18d24 <__assert_func>
    assert(uuid16 != 0);
   29fb8:	f7ea fba4 	bl	14704 <hal_debugger_connected>
   29fbc:	b100      	cbz	r0, 29fc0 <ble_svc_gap_access+0x40>
   29fbe:	be01      	bkpt	0x0001
   29fc0:	2300      	movs	r3, #0
   29fc2:	461a      	mov	r2, r3
   29fc4:	4619      	mov	r1, r3
   29fc6:	4618      	mov	r0, r3
   29fc8:	f7ee feac 	bl	18d24 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   29fcc:	7823      	ldrb	r3, [r4, #0]
   29fce:	b15b      	cbz	r3, 29fe8 <ble_svc_gap_access+0x68>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   29fd0:	2b01      	cmp	r3, #1
   29fd2:	d00d      	beq.n	29ff0 <ble_svc_gap_access+0x70>
            assert(0);
   29fd4:	f7ea fb96 	bl	14704 <hal_debugger_connected>
   29fd8:	b100      	cbz	r0, 29fdc <ble_svc_gap_access+0x5c>
   29fda:	be01      	bkpt	0x0001
   29fdc:	2300      	movs	r3, #0
   29fde:	461a      	mov	r2, r3
   29fe0:	4619      	mov	r1, r3
   29fe2:	4618      	mov	r0, r3
   29fe4:	f7ee fe9e 	bl	18d24 <__assert_func>
            rc = ble_svc_gap_device_name_read_access(ctxt);
   29fe8:	4620      	mov	r0, r4
   29fea:	f7ff ffa3 	bl	29f34 <ble_svc_gap_device_name_read_access>

    default:
        assert(0);
        return BLE_ATT_ERR_UNLIKELY;
    }
}
   29fee:	bd10      	pop	{r4, pc}
            rc = ble_svc_gap_device_name_write_access(ctxt);
   29ff0:	4620      	mov	r0, r4
   29ff2:	f7ff ff89 	bl	29f08 <ble_svc_gap_device_name_write_access>
            rc = ble_svc_gap_appearance_read_access(ctxt);
   29ff6:	4620      	mov	r0, r4
   29ff8:	f7ff ffae 	bl	29f58 <ble_svc_gap_appearance_read_access>
        return rc;
   29ffc:	e7f7      	b.n	29fee <ble_svc_gap_access+0x6e>
            rc = ble_svc_gap_appearance_write_access(ctxt);
   29ffe:	4620      	mov	r0, r4
   2a000:	f7ff ff8d 	bl	29f1e <ble_svc_gap_appearance_write_access>
        assert(0);
   2a004:	f7ea fb7e 	bl	14704 <hal_debugger_connected>
   2a008:	b100      	cbz	r0, 2a00c <ble_svc_gap_access+0x8c>
   2a00a:	be01      	bkpt	0x0001
   2a00c:	2300      	movs	r3, #0
   2a00e:	461a      	mov	r2, r3
   2a010:	4619      	mov	r1, r3
   2a012:	4618      	mov	r0, r3
   2a014:	f7ee fe86 	bl	18d24 <__assert_func>

0002a018 <ble_svc_gap_device_name_set>:
    return ble_svc_gap_name;
}

int
ble_svc_gap_device_name_set(const char *name)
{
   2a018:	b570      	push	{r4, r5, r6, lr}
   2a01a:	4605      	mov	r5, r0
    int len;

    len = strlen(name);
   2a01c:	f7f0 fe91 	bl	1ad42 <strlen>
    if (len > BLE_SVC_GAP_NAME_MAX_LEN) {
   2a020:	281f      	cmp	r0, #31
   2a022:	dc09      	bgt.n	2a038 <ble_svc_gap_device_name_set+0x20>
   2a024:	4604      	mov	r4, r0
        return BLE_HS_EINVAL;
    }

    memcpy(ble_svc_gap_name, name, len);
   2a026:	4e05      	ldr	r6, [pc, #20]	; (2a03c <ble_svc_gap_device_name_set+0x24>)
   2a028:	4602      	mov	r2, r0
   2a02a:	4629      	mov	r1, r5
   2a02c:	4630      	mov	r0, r6
   2a02e:	f7f0 fe21 	bl	1ac74 <memcpy>
    ble_svc_gap_name[len] = '\0';
   2a032:	2000      	movs	r0, #0
   2a034:	5530      	strb	r0, [r6, r4]

    return 0;
}
   2a036:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EINVAL;
   2a038:	2003      	movs	r0, #3
   2a03a:	e7fc      	b.n	2a036 <ble_svc_gap_device_name_set+0x1e>
   2a03c:	100007f8 	.word	0x100007f8

0002a040 <ble_svc_gap_init>:
    ble_svc_gap_chr_changed_cb_fn = cb;
}

void
ble_svc_gap_init(void)
{
   2a040:	b510      	push	{r4, lr}
   2a042:	b082      	sub	sp, #8
#if NIMBLE_BLE_CONNECT
    int rc;
#endif

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   2a044:	4b18      	ldr	r3, [pc, #96]	; (2a0a8 <ble_svc_gap_init+0x68>)
   2a046:	781b      	ldrb	r3, [r3, #0]
   2a048:	b14b      	cbz	r3, 2a05e <ble_svc_gap_init+0x1e>

#if NIMBLE_BLE_CONNECT
    rc = ble_gatts_count_cfg(ble_svc_gap_defs);
   2a04a:	4818      	ldr	r0, [pc, #96]	; (2a0ac <ble_svc_gap_init+0x6c>)
   2a04c:	f7fb ffdc 	bl	26008 <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2a050:	b978      	cbnz	r0, 2a072 <ble_svc_gap_init+0x32>

    rc = ble_gatts_add_svcs(ble_svc_gap_defs);
   2a052:	4816      	ldr	r0, [pc, #88]	; (2a0ac <ble_svc_gap_init+0x6c>)
   2a054:	f7fb ff94 	bl	25f80 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2a058:	b9c0      	cbnz	r0, 2a08c <ble_svc_gap_init+0x4c>
#endif
}
   2a05a:	b002      	add	sp, #8
   2a05c:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   2a05e:	f7ea fb51 	bl	14704 <hal_debugger_connected>
   2a062:	b100      	cbz	r0, 2a066 <ble_svc_gap_init+0x26>
   2a064:	be01      	bkpt	0x0001
   2a066:	2300      	movs	r3, #0
   2a068:	461a      	mov	r2, r3
   2a06a:	4619      	mov	r1, r3
   2a06c:	4618      	mov	r0, r3
   2a06e:	f7ee fe59 	bl	18d24 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2a072:	f7ea fb47 	bl	14704 <hal_debugger_connected>
   2a076:	b100      	cbz	r0, 2a07a <ble_svc_gap_init+0x3a>
   2a078:	be01      	bkpt	0x0001
   2a07a:	2000      	movs	r0, #0
   2a07c:	9000      	str	r0, [sp, #0]
   2a07e:	4b0c      	ldr	r3, [pc, #48]	; (2a0b0 <ble_svc_gap_init+0x70>)
   2a080:	681c      	ldr	r4, [r3, #0]
   2a082:	4603      	mov	r3, r0
   2a084:	4602      	mov	r2, r0
   2a086:	4601      	mov	r1, r0
   2a088:	47a0      	blx	r4
   2a08a:	e7e2      	b.n	2a052 <ble_svc_gap_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2a08c:	f7ea fb3a 	bl	14704 <hal_debugger_connected>
   2a090:	b100      	cbz	r0, 2a094 <ble_svc_gap_init+0x54>
   2a092:	be01      	bkpt	0x0001
   2a094:	2000      	movs	r0, #0
   2a096:	9000      	str	r0, [sp, #0]
   2a098:	4b05      	ldr	r3, [pc, #20]	; (2a0b0 <ble_svc_gap_init+0x70>)
   2a09a:	681c      	ldr	r4, [r3, #0]
   2a09c:	4603      	mov	r3, r0
   2a09e:	4602      	mov	r2, r0
   2a0a0:	4601      	mov	r1, r0
   2a0a2:	47a0      	blx	r4
}
   2a0a4:	e7d9      	b.n	2a05a <ble_svc_gap_init+0x1a>
   2a0a6:	bf00      	nop
   2a0a8:	100055a0 	.word	0x100055a0
   2a0ac:	00035194 	.word	0x00035194
   2a0b0:	100006b4 	.word	0x100006b4

0002a0b4 <ble_svc_gatt_access>:
};

static int
ble_svc_gatt_access(uint16_t conn_handle, uint16_t attr_handle,
                    struct ble_gatt_access_ctxt *ctxt, void *arg)
{
   2a0b4:	b510      	push	{r4, lr}
     * access callback gets called by the stack when it needs to read the
     * characteristic value to populate the outgoing indication command.
     * Therefore, this callback should only get called during an attempt to
     * read the characteristic.
     */
    assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   2a0b6:	7813      	ldrb	r3, [r2, #0]
   2a0b8:	b9a3      	cbnz	r3, 2a0e4 <ble_svc_gatt_access+0x30>
    assert(ctxt->chr == &ble_svc_gatt_defs[0].characteristics[0]);
   2a0ba:	6891      	ldr	r1, [r2, #8]
   2a0bc:	4b14      	ldr	r3, [pc, #80]	; (2a110 <ble_svc_gatt_access+0x5c>)
   2a0be:	4299      	cmp	r1, r3
   2a0c0:	d11a      	bne.n	2a0f8 <ble_svc_gatt_access+0x44>

    u8p = os_mbuf_extend(ctxt->om, 4);
   2a0c2:	2104      	movs	r1, #4
   2a0c4:	6850      	ldr	r0, [r2, #4]
   2a0c6:	f7ef fd25 	bl	19b14 <os_mbuf_extend>
    if (u8p == NULL) {
   2a0ca:	4604      	mov	r4, r0
   2a0cc:	b1f0      	cbz	r0, 2a10c <ble_svc_gatt_access+0x58>
        return BLE_HS_ENOMEM;
    }

    put_le16(u8p + 0, ble_svc_gatt_start_handle);
   2a0ce:	4b11      	ldr	r3, [pc, #68]	; (2a114 <ble_svc_gatt_access+0x60>)
   2a0d0:	8819      	ldrh	r1, [r3, #0]
   2a0d2:	f7ee fe95 	bl	18e00 <put_le16>
    put_le16(u8p + 2, ble_svc_gatt_end_handle);
   2a0d6:	4b10      	ldr	r3, [pc, #64]	; (2a118 <ble_svc_gatt_access+0x64>)
   2a0d8:	8819      	ldrh	r1, [r3, #0]
   2a0da:	1ca0      	adds	r0, r4, #2
   2a0dc:	f7ee fe90 	bl	18e00 <put_le16>

    return 0;
   2a0e0:	2000      	movs	r0, #0
}
   2a0e2:	bd10      	pop	{r4, pc}
    assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   2a0e4:	f7ea fb0e 	bl	14704 <hal_debugger_connected>
   2a0e8:	b100      	cbz	r0, 2a0ec <ble_svc_gatt_access+0x38>
   2a0ea:	be01      	bkpt	0x0001
   2a0ec:	2300      	movs	r3, #0
   2a0ee:	461a      	mov	r2, r3
   2a0f0:	4619      	mov	r1, r3
   2a0f2:	4618      	mov	r0, r3
   2a0f4:	f7ee fe16 	bl	18d24 <__assert_func>
    assert(ctxt->chr == &ble_svc_gatt_defs[0].characteristics[0]);
   2a0f8:	f7ea fb04 	bl	14704 <hal_debugger_connected>
   2a0fc:	b100      	cbz	r0, 2a100 <ble_svc_gatt_access+0x4c>
   2a0fe:	be01      	bkpt	0x0001
   2a100:	2300      	movs	r3, #0
   2a102:	461a      	mov	r2, r3
   2a104:	4619      	mov	r1, r3
   2a106:	4618      	mov	r0, r3
   2a108:	f7ee fe0c 	bl	18d24 <__assert_func>
        return BLE_HS_ENOMEM;
   2a10c:	2006      	movs	r0, #6
   2a10e:	e7e8      	b.n	2a0e2 <ble_svc_gatt_access+0x2e>
   2a110:	10000820 	.word	0x10000820
   2a114:	10006282 	.word	0x10006282
   2a118:	10006280 	.word	0x10006280

0002a11c <ble_svc_gatt_changed>:
 * @param start_handle          The start of the affected handle range.
 * @param end_handle            The end of the affected handle range.
 */
void
ble_svc_gatt_changed(uint16_t start_handle, uint16_t end_handle)
{
   2a11c:	b508      	push	{r3, lr}
    ble_svc_gatt_start_handle = start_handle;
   2a11e:	4b04      	ldr	r3, [pc, #16]	; (2a130 <ble_svc_gatt_changed+0x14>)
   2a120:	8018      	strh	r0, [r3, #0]
    ble_svc_gatt_end_handle = end_handle;
   2a122:	4b04      	ldr	r3, [pc, #16]	; (2a134 <ble_svc_gatt_changed+0x18>)
   2a124:	8019      	strh	r1, [r3, #0]
    ble_gatts_chr_updated(ble_svc_gatt_changed_val_handle);
   2a126:	4b04      	ldr	r3, [pc, #16]	; (2a138 <ble_svc_gatt_changed+0x1c>)
   2a128:	8818      	ldrh	r0, [r3, #0]
   2a12a:	f7fb feb9 	bl	25ea0 <ble_gatts_chr_updated>
}
   2a12e:	bd08      	pop	{r3, pc}
   2a130:	10006282 	.word	0x10006282
   2a134:	10006280 	.word	0x10006280
   2a138:	1000627e 	.word	0x1000627e

0002a13c <ble_svc_gatt_init>:

void
ble_svc_gatt_init(void)
{
   2a13c:	b510      	push	{r4, lr}
   2a13e:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   2a140:	4b18      	ldr	r3, [pc, #96]	; (2a1a4 <ble_svc_gatt_init+0x68>)
   2a142:	781b      	ldrb	r3, [r3, #0]
   2a144:	b14b      	cbz	r3, 2a15a <ble_svc_gatt_init+0x1e>

    rc = ble_gatts_count_cfg(ble_svc_gatt_defs);
   2a146:	4818      	ldr	r0, [pc, #96]	; (2a1a8 <ble_svc_gatt_init+0x6c>)
   2a148:	f7fb ff5e 	bl	26008 <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2a14c:	b978      	cbnz	r0, 2a16e <ble_svc_gatt_init+0x32>

    rc = ble_gatts_add_svcs(ble_svc_gatt_defs);
   2a14e:	4816      	ldr	r0, [pc, #88]	; (2a1a8 <ble_svc_gatt_init+0x6c>)
   2a150:	f7fb ff16 	bl	25f80 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2a154:	b9c0      	cbnz	r0, 2a188 <ble_svc_gatt_init+0x4c>
}
   2a156:	b002      	add	sp, #8
   2a158:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   2a15a:	f7ea fad3 	bl	14704 <hal_debugger_connected>
   2a15e:	b100      	cbz	r0, 2a162 <ble_svc_gatt_init+0x26>
   2a160:	be01      	bkpt	0x0001
   2a162:	2300      	movs	r3, #0
   2a164:	461a      	mov	r2, r3
   2a166:	4619      	mov	r1, r3
   2a168:	4618      	mov	r0, r3
   2a16a:	f7ee fddb 	bl	18d24 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2a16e:	f7ea fac9 	bl	14704 <hal_debugger_connected>
   2a172:	b100      	cbz	r0, 2a176 <ble_svc_gatt_init+0x3a>
   2a174:	be01      	bkpt	0x0001
   2a176:	2000      	movs	r0, #0
   2a178:	9000      	str	r0, [sp, #0]
   2a17a:	4b0c      	ldr	r3, [pc, #48]	; (2a1ac <ble_svc_gatt_init+0x70>)
   2a17c:	681c      	ldr	r4, [r3, #0]
   2a17e:	4603      	mov	r3, r0
   2a180:	4602      	mov	r2, r0
   2a182:	4601      	mov	r1, r0
   2a184:	47a0      	blx	r4
   2a186:	e7e2      	b.n	2a14e <ble_svc_gatt_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2a188:	f7ea fabc 	bl	14704 <hal_debugger_connected>
   2a18c:	b100      	cbz	r0, 2a190 <ble_svc_gatt_init+0x54>
   2a18e:	be01      	bkpt	0x0001
   2a190:	2000      	movs	r0, #0
   2a192:	9000      	str	r0, [sp, #0]
   2a194:	4b05      	ldr	r3, [pc, #20]	; (2a1ac <ble_svc_gatt_init+0x70>)
   2a196:	681c      	ldr	r4, [r3, #0]
   2a198:	4603      	mov	r3, r0
   2a19a:	4602      	mov	r2, r0
   2a19c:	4601      	mov	r1, r0
   2a19e:	47a0      	blx	r4
}
   2a1a0:	e7d9      	b.n	2a156 <ble_svc_gatt_init+0x1a>
   2a1a2:	bf00      	nop
   2a1a4:	100055a0 	.word	0x100055a0
   2a1a8:	000351b4 	.word	0x000351b4
   2a1ac:	100006b4 	.word	0x100006b4

0002a1b0 <ble_store_config_find_sec>:

static int
ble_store_config_find_sec(const struct ble_store_key_sec *key_sec,
                          const struct ble_store_value_sec *value_secs,
                          int num_value_secs)
{
   2a1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a1b4:	b083      	sub	sp, #12
   2a1b6:	4605      	mov	r5, r0
   2a1b8:	460f      	mov	r7, r1
   2a1ba:	4690      	mov	r8, r2
    int skipped;
    int i;

    skipped = 0;

    for (i = 0; i < num_value_secs; i++) {
   2a1bc:	2400      	movs	r4, #0
    skipped = 0;
   2a1be:	46a1      	mov	r9, r4
    for (i = 0; i < num_value_secs; i++) {
   2a1c0:	e004      	b.n	2a1cc <ble_store_config_find_sec+0x1c>
        return type_diff;
   2a1c2:	4650      	mov	r0, sl
   2a1c4:	e019      	b.n	2a1fa <ble_store_config_find_sec+0x4a>
                continue;
            }
        }

        if (key_sec->idx > skipped) {
            skipped++;
   2a1c6:	f109 0901 	add.w	r9, r9, #1
    for (i = 0; i < num_value_secs; i++) {
   2a1ca:	3401      	adds	r4, #1
   2a1cc:	4544      	cmp	r4, r8
   2a1ce:	da38      	bge.n	2a242 <ble_store_config_find_sec+0x92>
        cur = value_secs + i;
   2a1d0:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   2a1d4:	ea4f 1b06 	mov.w	fp, r6, lsl #4
   2a1d8:	eb07 1606 	add.w	r6, r7, r6, lsl #4
        if (ble_addr_cmp(&key_sec->peer_addr, BLE_ADDR_ANY)) {
   2a1dc:	2300      	movs	r3, #0
   2a1de:	9300      	str	r3, [sp, #0]
   2a1e0:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   2a1e4:	f895 a000 	ldrb.w	sl, [r5]
    if (type_diff != 0) {
   2a1e8:	f1ba 0f00 	cmp.w	sl, #0
   2a1ec:	d1e9      	bne.n	2a1c2 <ble_store_config_find_sec+0x12>
    return memcmp(a->val, b->val, sizeof(a->val));
   2a1ee:	2206      	movs	r2, #6
   2a1f0:	f10d 0101 	add.w	r1, sp, #1
   2a1f4:	1c68      	adds	r0, r5, #1
   2a1f6:	f7f0 fd19 	bl	1ac2c <memcmp>
   2a1fa:	b158      	cbz	r0, 2a214 <ble_store_config_find_sec+0x64>
    type_diff = a->type - b->type;
   2a1fc:	f817 000b 	ldrb.w	r0, [r7, fp]
    if (type_diff != 0) {
   2a200:	ebb0 000a 	subs.w	r0, r0, sl
   2a204:	d104      	bne.n	2a210 <ble_store_config_find_sec+0x60>
    return memcmp(a->val, b->val, sizeof(a->val));
   2a206:	2206      	movs	r2, #6
   2a208:	1c69      	adds	r1, r5, #1
   2a20a:	1c70      	adds	r0, r6, #1
   2a20c:	f7f0 fd0e 	bl	1ac2c <memcmp>
            if (ble_addr_cmp(&cur->peer_addr, &key_sec->peer_addr)) {
   2a210:	2800      	cmp	r0, #0
   2a212:	d1da      	bne.n	2a1ca <ble_store_config_find_sec+0x1a>
        if (key_sec->ediv_rand_present) {
   2a214:	7e2b      	ldrb	r3, [r5, #24]
   2a216:	f013 0f01 	tst.w	r3, #1
   2a21a:	d00b      	beq.n	2a234 <ble_store_config_find_sec+0x84>
            if (cur->ediv != key_sec->ediv) {
   2a21c:	8932      	ldrh	r2, [r6, #8]
   2a21e:	892b      	ldrh	r3, [r5, #8]
   2a220:	429a      	cmp	r2, r3
   2a222:	d1d2      	bne.n	2a1ca <ble_store_config_find_sec+0x1a>
            if (cur->rand_num != key_sec->rand_num) {
   2a224:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
   2a228:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   2a22c:	4299      	cmp	r1, r3
   2a22e:	bf08      	it	eq
   2a230:	4290      	cmpeq	r0, r2
   2a232:	d1ca      	bne.n	2a1ca <ble_store_config_find_sec+0x1a>
        if (key_sec->idx > skipped) {
   2a234:	7e6b      	ldrb	r3, [r5, #25]
   2a236:	454b      	cmp	r3, r9
   2a238:	dcc5      	bgt.n	2a1c6 <ble_store_config_find_sec+0x16>

        return i;
    }

    return -1;
}
   2a23a:	4620      	mov	r0, r4
   2a23c:	b003      	add	sp, #12
   2a23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
   2a242:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2a246:	e7f8      	b.n	2a23a <ble_store_config_find_sec+0x8a>

0002a248 <ble_store_config_read_peer_sec>:
}

static int
ble_store_config_read_peer_sec(const struct ble_store_key_sec *key_sec,
                               struct ble_store_value_sec *value_sec)
{
   2a248:	b510      	push	{r4, lr}
   2a24a:	460c      	mov	r4, r1
    int idx;

    idx = ble_store_config_find_sec(key_sec, ble_store_config_peer_secs,
   2a24c:	4b0a      	ldr	r3, [pc, #40]	; (2a278 <ble_store_config_read_peer_sec+0x30>)
   2a24e:	681a      	ldr	r2, [r3, #0]
   2a250:	490a      	ldr	r1, [pc, #40]	; (2a27c <ble_store_config_read_peer_sec+0x34>)
   2a252:	f7ff ffad 	bl	2a1b0 <ble_store_config_find_sec>
                             ble_store_config_num_peer_secs);
    if (idx == -1) {
   2a256:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2a25a:	d00a      	beq.n	2a272 <ble_store_config_read_peer_sec+0x2a>
        return BLE_HS_ENOENT;
    }

    *value_sec = ble_store_config_peer_secs[idx];
   2a25c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2a260:	2250      	movs	r2, #80	; 0x50
   2a262:	4906      	ldr	r1, [pc, #24]	; (2a27c <ble_store_config_read_peer_sec+0x34>)
   2a264:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   2a268:	4620      	mov	r0, r4
   2a26a:	f7f0 fd03 	bl	1ac74 <memcpy>
    return 0;
   2a26e:	2000      	movs	r0, #0
}
   2a270:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   2a272:	2005      	movs	r0, #5
   2a274:	e7fc      	b.n	2a270 <ble_store_config_read_peer_sec+0x28>
   2a276:	bf00      	nop
   2a278:	1000630c 	.word	0x1000630c
   2a27c:	10006400 	.word	0x10006400

0002a280 <ble_store_config_read_our_sec>:
{
   2a280:	b510      	push	{r4, lr}
   2a282:	460c      	mov	r4, r1
    idx = ble_store_config_find_sec(key_sec, ble_store_config_our_secs,
   2a284:	4b0a      	ldr	r3, [pc, #40]	; (2a2b0 <ble_store_config_read_our_sec+0x30>)
   2a286:	681a      	ldr	r2, [r3, #0]
   2a288:	490a      	ldr	r1, [pc, #40]	; (2a2b4 <ble_store_config_read_our_sec+0x34>)
   2a28a:	f7ff ff91 	bl	2a1b0 <ble_store_config_find_sec>
    if (idx == -1) {
   2a28e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2a292:	d00a      	beq.n	2a2aa <ble_store_config_read_our_sec+0x2a>
    *value_sec = ble_store_config_our_secs[idx];
   2a294:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2a298:	2250      	movs	r2, #80	; 0x50
   2a29a:	4906      	ldr	r1, [pc, #24]	; (2a2b4 <ble_store_config_read_our_sec+0x34>)
   2a29c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   2a2a0:	4620      	mov	r0, r4
   2a2a2:	f7f0 fce7 	bl	1ac74 <memcpy>
    return 0;
   2a2a6:	2000      	movs	r0, #0
}
   2a2a8:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   2a2aa:	2005      	movs	r0, #5
   2a2ac:	e7fc      	b.n	2a2a8 <ble_store_config_read_our_sec+0x28>
   2a2ae:	bf00      	nop
   2a2b0:	10006308 	.word	0x10006308
   2a2b4:	10006310 	.word	0x10006310

0002a2b8 <ble_store_config_find_cccd>:
 * $cccd                                                                     *
 *****************************************************************************/

static int
ble_store_config_find_cccd(const struct ble_store_key_cccd *key)
{
   2a2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a2bc:	b082      	sub	sp, #8
   2a2be:	4605      	mov	r5, r0
    struct ble_store_value_cccd *cccd;
    int skipped;
    int i;

    skipped = 0;
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   2a2c0:	2400      	movs	r4, #0
    skipped = 0;
   2a2c2:	46a0      	mov	r8, r4
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   2a2c4:	e004      	b.n	2a2d0 <ble_store_config_find_cccd+0x18>
        return type_diff;
   2a2c6:	4630      	mov	r0, r6
   2a2c8:	e019      	b.n	2a2fe <ble_store_config_find_cccd+0x46>
                continue;
            }
        }

        if (key->idx > skipped) {
            skipped++;
   2a2ca:	f108 0801 	add.w	r8, r8, #1
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   2a2ce:	3401      	adds	r4, #1
   2a2d0:	4b18      	ldr	r3, [pc, #96]	; (2a334 <ble_store_config_find_cccd+0x7c>)
   2a2d2:	681b      	ldr	r3, [r3, #0]
   2a2d4:	42a3      	cmp	r3, r4
   2a2d6:	dd2a      	ble.n	2a32e <ble_store_config_find_cccd+0x76>
        cccd = ble_store_config_cccds + i;
   2a2d8:	ea4f 1a04 	mov.w	sl, r4, lsl #4
   2a2dc:	f8df 9058 	ldr.w	r9, [pc, #88]	; 2a338 <ble_store_config_find_cccd+0x80>
   2a2e0:	eb09 1704 	add.w	r7, r9, r4, lsl #4
        if (ble_addr_cmp(&key->peer_addr, BLE_ADDR_ANY)) {
   2a2e4:	2300      	movs	r3, #0
   2a2e6:	9300      	str	r3, [sp, #0]
   2a2e8:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   2a2ec:	782e      	ldrb	r6, [r5, #0]
    if (type_diff != 0) {
   2a2ee:	2e00      	cmp	r6, #0
   2a2f0:	d1e9      	bne.n	2a2c6 <ble_store_config_find_cccd+0xe>
    return memcmp(a->val, b->val, sizeof(a->val));
   2a2f2:	2206      	movs	r2, #6
   2a2f4:	f10d 0101 	add.w	r1, sp, #1
   2a2f8:	1c68      	adds	r0, r5, #1
   2a2fa:	f7f0 fc97 	bl	1ac2c <memcmp>
   2a2fe:	b150      	cbz	r0, 2a316 <ble_store_config_find_cccd+0x5e>
    type_diff = a->type - b->type;
   2a300:	f819 000a 	ldrb.w	r0, [r9, sl]
    if (type_diff != 0) {
   2a304:	1b80      	subs	r0, r0, r6
   2a306:	d104      	bne.n	2a312 <ble_store_config_find_cccd+0x5a>
    return memcmp(a->val, b->val, sizeof(a->val));
   2a308:	2206      	movs	r2, #6
   2a30a:	1c69      	adds	r1, r5, #1
   2a30c:	1c78      	adds	r0, r7, #1
   2a30e:	f7f0 fc8d 	bl	1ac2c <memcmp>
            if (ble_addr_cmp(&cccd->peer_addr, &key->peer_addr)) {
   2a312:	2800      	cmp	r0, #0
   2a314:	d1db      	bne.n	2a2ce <ble_store_config_find_cccd+0x16>
        if (key->chr_val_handle != 0) {
   2a316:	892b      	ldrh	r3, [r5, #8]
   2a318:	b113      	cbz	r3, 2a320 <ble_store_config_find_cccd+0x68>
            if (cccd->chr_val_handle != key->chr_val_handle) {
   2a31a:	893a      	ldrh	r2, [r7, #8]
   2a31c:	4293      	cmp	r3, r2
   2a31e:	d1d6      	bne.n	2a2ce <ble_store_config_find_cccd+0x16>
        if (key->idx > skipped) {
   2a320:	7aab      	ldrb	r3, [r5, #10]
   2a322:	4543      	cmp	r3, r8
   2a324:	dcd1      	bgt.n	2a2ca <ble_store_config_find_cccd+0x12>

        return i;
    }

    return -1;
}
   2a326:	4620      	mov	r0, r4
   2a328:	b002      	add	sp, #8
   2a32a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return -1;
   2a32e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2a332:	e7f8      	b.n	2a326 <ble_store_config_find_cccd+0x6e>
   2a334:	10006304 	.word	0x10006304
   2a338:	10006284 	.word	0x10006284

0002a33c <ble_store_config_read_cccd>:
}

static int
ble_store_config_read_cccd(const struct ble_store_key_cccd *key_cccd,
                           struct ble_store_value_cccd *value_cccd)
{
   2a33c:	b510      	push	{r4, lr}
   2a33e:	460c      	mov	r4, r1
    int idx;

    idx = ble_store_config_find_cccd(key_cccd);
   2a340:	f7ff ffba 	bl	2a2b8 <ble_store_config_find_cccd>
    if (idx == -1) {
   2a344:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2a348:	d007      	beq.n	2a35a <ble_store_config_read_cccd+0x1e>
        return BLE_HS_ENOENT;
    }

    *value_cccd = ble_store_config_cccds[idx];
   2a34a:	4b05      	ldr	r3, [pc, #20]	; (2a360 <ble_store_config_read_cccd+0x24>)
   2a34c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   2a350:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   2a352:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return 0;
   2a356:	2000      	movs	r0, #0
}
   2a358:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   2a35a:	2005      	movs	r0, #5
   2a35c:	e7fc      	b.n	2a358 <ble_store_config_read_cccd+0x1c>
   2a35e:	bf00      	nop
   2a360:	10006284 	.word	0x10006284

0002a364 <ble_store_config_print_key_sec>:
{
   2a364:	b510      	push	{r4, lr}
   2a366:	b082      	sub	sp, #8
   2a368:	4604      	mov	r4, r0
    if (ble_addr_cmp(&key_sec->peer_addr, BLE_ADDR_ANY)) {
   2a36a:	2300      	movs	r3, #0
   2a36c:	9300      	str	r3, [sp, #0]
   2a36e:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   2a372:	7800      	ldrb	r0, [r0, #0]
    if (type_diff != 0) {
   2a374:	b928      	cbnz	r0, 2a382 <ble_store_config_print_key_sec+0x1e>
    return memcmp(a->val, b->val, sizeof(a->val));
   2a376:	2206      	movs	r2, #6
   2a378:	f10d 0101 	add.w	r1, sp, #1
   2a37c:	1c60      	adds	r0, r4, #1
   2a37e:	f7f0 fc55 	bl	1ac2c <memcmp>
   2a382:	b908      	cbnz	r0, 2a388 <ble_store_config_print_key_sec+0x24>
}
   2a384:	b002      	add	sp, #8
   2a386:	bd10      	pop	{r4, pc}
        ble_hs_log_flat_buf(key_sec->peer_addr.val, 6);
   2a388:	2106      	movs	r1, #6
   2a38a:	1c60      	adds	r0, r4, #1
   2a38c:	f7fe f8a2 	bl	284d4 <ble_hs_log_flat_buf>
}
   2a390:	e7f8      	b.n	2a384 <ble_store_config_print_key_sec+0x20>

0002a392 <ble_store_config_read>:
 * @return                      0 if a key was found; else BLE_HS_ENOENT.
 */
int
ble_store_config_read(int obj_type, const union ble_store_key *key,
                      union ble_store_value *value)
{
   2a392:	b538      	push	{r3, r4, r5, lr}
   2a394:	460c      	mov	r4, r1
   2a396:	4615      	mov	r5, r2
    int rc;

    switch (obj_type) {
   2a398:	2802      	cmp	r0, #2
   2a39a:	d005      	beq.n	2a3a8 <ble_store_config_read+0x16>
   2a39c:	2803      	cmp	r0, #3
   2a39e:	d013      	beq.n	2a3c8 <ble_store_config_read+0x36>
   2a3a0:	2801      	cmp	r0, #1
   2a3a2:	d009      	beq.n	2a3b8 <ble_store_config_read+0x26>
   2a3a4:	2008      	movs	r0, #8
        return rc;

    default:
        return BLE_HS_ENOTSUP;
    }
}
   2a3a6:	bd38      	pop	{r3, r4, r5, pc}
        ble_store_config_print_key_sec(&key->sec);
   2a3a8:	4608      	mov	r0, r1
   2a3aa:	f7ff ffdb 	bl	2a364 <ble_store_config_print_key_sec>
        rc = ble_store_config_read_peer_sec(&key->sec, &value->sec);
   2a3ae:	4629      	mov	r1, r5
   2a3b0:	4620      	mov	r0, r4
   2a3b2:	f7ff ff49 	bl	2a248 <ble_store_config_read_peer_sec>
        return rc;
   2a3b6:	e7f6      	b.n	2a3a6 <ble_store_config_read+0x14>
        ble_store_config_print_key_sec(&key->sec);
   2a3b8:	4608      	mov	r0, r1
   2a3ba:	f7ff ffd3 	bl	2a364 <ble_store_config_print_key_sec>
        rc = ble_store_config_read_our_sec(&key->sec, &value->sec);
   2a3be:	4629      	mov	r1, r5
   2a3c0:	4620      	mov	r0, r4
   2a3c2:	f7ff ff5d 	bl	2a280 <ble_store_config_read_our_sec>
        return rc;
   2a3c6:	e7ee      	b.n	2a3a6 <ble_store_config_read+0x14>
        rc = ble_store_config_read_cccd(&key->cccd, &value->cccd);
   2a3c8:	4611      	mov	r1, r2
   2a3ca:	4620      	mov	r0, r4
   2a3cc:	f7ff ffb6 	bl	2a33c <ble_store_config_read_cccd>
        return rc;
   2a3d0:	e7e9      	b.n	2a3a6 <ble_store_config_read+0x14>

0002a3d2 <ble_store_config_print_value_sec>:
{
   2a3d2:	b510      	push	{r4, lr}
   2a3d4:	4604      	mov	r4, r0
    if (sec->ltk_present) {
   2a3d6:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   2a3da:	f013 0f01 	tst.w	r3, #1
   2a3de:	d10a      	bne.n	2a3f6 <ble_store_config_print_value_sec+0x24>
    if (sec->irk_present) {
   2a3e0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   2a3e4:	f013 0f01 	tst.w	r3, #1
   2a3e8:	d10a      	bne.n	2a400 <ble_store_config_print_value_sec+0x2e>
    if (sec->csrk_present) {
   2a3ea:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   2a3ee:	f013 0f01 	tst.w	r3, #1
   2a3f2:	d10b      	bne.n	2a40c <ble_store_config_print_value_sec+0x3a>
}
   2a3f4:	bd10      	pop	{r4, pc}
        ble_hs_log_flat_buf(sec->ltk, 16);
   2a3f6:	2110      	movs	r1, #16
   2a3f8:	3018      	adds	r0, #24
   2a3fa:	f7fe f86b 	bl	284d4 <ble_hs_log_flat_buf>
   2a3fe:	e7ef      	b.n	2a3e0 <ble_store_config_print_value_sec+0xe>
        ble_hs_log_flat_buf(sec->irk, 16);
   2a400:	2110      	movs	r1, #16
   2a402:	f104 0029 	add.w	r0, r4, #41	; 0x29
   2a406:	f7fe f865 	bl	284d4 <ble_hs_log_flat_buf>
   2a40a:	e7ee      	b.n	2a3ea <ble_store_config_print_value_sec+0x18>
        ble_hs_log_flat_buf(sec->csrk, 16);
   2a40c:	2110      	movs	r1, #16
   2a40e:	f104 003a 	add.w	r0, r4, #58	; 0x3a
   2a412:	f7fe f85f 	bl	284d4 <ble_hs_log_flat_buf>
}
   2a416:	e7ed      	b.n	2a3f4 <ble_store_config_print_value_sec+0x22>

0002a418 <ble_store_config_write_peer_sec>:
{
   2a418:	b530      	push	{r4, r5, lr}
   2a41a:	b089      	sub	sp, #36	; 0x24
   2a41c:	4604      	mov	r4, r0
    ble_store_config_print_value_sec(value_sec);
   2a41e:	f7ff ffd8 	bl	2a3d2 <ble_store_config_print_value_sec>
    ble_store_key_from_value_sec(&key_sec, value_sec);
   2a422:	4621      	mov	r1, r4
   2a424:	4668      	mov	r0, sp
   2a426:	f7ff f9e0 	bl	297ea <ble_store_key_from_value_sec>
    idx = ble_store_config_find_sec(&key_sec, ble_store_config_peer_secs,
   2a42a:	4b0f      	ldr	r3, [pc, #60]	; (2a468 <ble_store_config_write_peer_sec+0x50>)
   2a42c:	681d      	ldr	r5, [r3, #0]
   2a42e:	462a      	mov	r2, r5
   2a430:	490e      	ldr	r1, [pc, #56]	; (2a46c <ble_store_config_write_peer_sec+0x54>)
   2a432:	4668      	mov	r0, sp
   2a434:	f7ff febc 	bl	2a1b0 <ble_store_config_find_sec>
    if (idx == -1) {
   2a438:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2a43c:	d00b      	beq.n	2a456 <ble_store_config_write_peer_sec+0x3e>
    ble_store_config_peer_secs[idx] = *value_sec;
   2a43e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2a442:	2250      	movs	r2, #80	; 0x50
   2a444:	4621      	mov	r1, r4
   2a446:	4b09      	ldr	r3, [pc, #36]	; (2a46c <ble_store_config_write_peer_sec+0x54>)
   2a448:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   2a44c:	f7f0 fc12 	bl	1ac74 <memcpy>
    return 0;
   2a450:	2000      	movs	r0, #0
}
   2a452:	b009      	add	sp, #36	; 0x24
   2a454:	bd30      	pop	{r4, r5, pc}
        if (ble_store_config_num_peer_secs >= MYNEWT_VAL(BLE_STORE_MAX_BONDS)) {
   2a456:	2d02      	cmp	r5, #2
   2a458:	dc04      	bgt.n	2a464 <ble_store_config_write_peer_sec+0x4c>
        ble_store_config_num_peer_secs++;
   2a45a:	1c6a      	adds	r2, r5, #1
   2a45c:	4b02      	ldr	r3, [pc, #8]	; (2a468 <ble_store_config_write_peer_sec+0x50>)
   2a45e:	601a      	str	r2, [r3, #0]
        idx = ble_store_config_num_peer_secs;
   2a460:	4628      	mov	r0, r5
   2a462:	e7ec      	b.n	2a43e <ble_store_config_write_peer_sec+0x26>
            return BLE_HS_ESTORE_CAP;
   2a464:	201b      	movs	r0, #27
   2a466:	e7f4      	b.n	2a452 <ble_store_config_write_peer_sec+0x3a>
   2a468:	1000630c 	.word	0x1000630c
   2a46c:	10006400 	.word	0x10006400

0002a470 <ble_store_config_write_our_sec>:
{
   2a470:	b530      	push	{r4, r5, lr}
   2a472:	b089      	sub	sp, #36	; 0x24
   2a474:	4604      	mov	r4, r0
    ble_store_config_print_value_sec(value_sec);
   2a476:	f7ff ffac 	bl	2a3d2 <ble_store_config_print_value_sec>
    ble_store_key_from_value_sec(&key_sec, value_sec);
   2a47a:	4621      	mov	r1, r4
   2a47c:	4668      	mov	r0, sp
   2a47e:	f7ff f9b4 	bl	297ea <ble_store_key_from_value_sec>
    idx = ble_store_config_find_sec(&key_sec, ble_store_config_our_secs,
   2a482:	4b0f      	ldr	r3, [pc, #60]	; (2a4c0 <ble_store_config_write_our_sec+0x50>)
   2a484:	681d      	ldr	r5, [r3, #0]
   2a486:	462a      	mov	r2, r5
   2a488:	490e      	ldr	r1, [pc, #56]	; (2a4c4 <ble_store_config_write_our_sec+0x54>)
   2a48a:	4668      	mov	r0, sp
   2a48c:	f7ff fe90 	bl	2a1b0 <ble_store_config_find_sec>
    if (idx == -1) {
   2a490:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2a494:	d00b      	beq.n	2a4ae <ble_store_config_write_our_sec+0x3e>
    ble_store_config_our_secs[idx] = *value_sec;
   2a496:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2a49a:	2250      	movs	r2, #80	; 0x50
   2a49c:	4621      	mov	r1, r4
   2a49e:	4b09      	ldr	r3, [pc, #36]	; (2a4c4 <ble_store_config_write_our_sec+0x54>)
   2a4a0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   2a4a4:	f7f0 fbe6 	bl	1ac74 <memcpy>
    return 0;
   2a4a8:	2000      	movs	r0, #0
}
   2a4aa:	b009      	add	sp, #36	; 0x24
   2a4ac:	bd30      	pop	{r4, r5, pc}
        if (ble_store_config_num_our_secs >= MYNEWT_VAL(BLE_STORE_MAX_BONDS)) {
   2a4ae:	2d02      	cmp	r5, #2
   2a4b0:	dc04      	bgt.n	2a4bc <ble_store_config_write_our_sec+0x4c>
        ble_store_config_num_our_secs++;
   2a4b2:	1c6a      	adds	r2, r5, #1
   2a4b4:	4b02      	ldr	r3, [pc, #8]	; (2a4c0 <ble_store_config_write_our_sec+0x50>)
   2a4b6:	601a      	str	r2, [r3, #0]
        idx = ble_store_config_num_our_secs;
   2a4b8:	4628      	mov	r0, r5
   2a4ba:	e7ec      	b.n	2a496 <ble_store_config_write_our_sec+0x26>
            return BLE_HS_ESTORE_CAP;
   2a4bc:	201b      	movs	r0, #27
   2a4be:	e7f4      	b.n	2a4aa <ble_store_config_write_our_sec+0x3a>
   2a4c0:	10006308 	.word	0x10006308
   2a4c4:	10006310 	.word	0x10006310

0002a4c8 <ble_store_config_write_cccd>:
{
   2a4c8:	b530      	push	{r4, r5, lr}
   2a4ca:	b085      	sub	sp, #20
   2a4cc:	4604      	mov	r4, r0
    ble_store_key_from_value_cccd(&key_cccd, value_cccd);
   2a4ce:	4601      	mov	r1, r0
   2a4d0:	a801      	add	r0, sp, #4
   2a4d2:	f7ff f97e 	bl	297d2 <ble_store_key_from_value_cccd>
    idx = ble_store_config_find_cccd(&key_cccd);
   2a4d6:	a801      	add	r0, sp, #4
   2a4d8:	f7ff feee 	bl	2a2b8 <ble_store_config_find_cccd>
    if (idx == -1) {
   2a4dc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2a4e0:	d009      	beq.n	2a4f6 <ble_store_config_write_cccd+0x2e>
    ble_store_config_cccds[idx] = *value_cccd;
   2a4e2:	4d0a      	ldr	r5, [pc, #40]	; (2a50c <ble_store_config_write_cccd+0x44>)
   2a4e4:	eb05 1500 	add.w	r5, r5, r0, lsl #4
   2a4e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2a4ec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    return 0;
   2a4f0:	2000      	movs	r0, #0
}
   2a4f2:	b005      	add	sp, #20
   2a4f4:	bd30      	pop	{r4, r5, pc}
        if (ble_store_config_num_cccds >= MYNEWT_VAL(BLE_STORE_MAX_CCCDS)) {
   2a4f6:	4b06      	ldr	r3, [pc, #24]	; (2a510 <ble_store_config_write_cccd+0x48>)
   2a4f8:	6818      	ldr	r0, [r3, #0]
   2a4fa:	2807      	cmp	r0, #7
   2a4fc:	dc03      	bgt.n	2a506 <ble_store_config_write_cccd+0x3e>
        ble_store_config_num_cccds++;
   2a4fe:	1c43      	adds	r3, r0, #1
   2a500:	4a03      	ldr	r2, [pc, #12]	; (2a510 <ble_store_config_write_cccd+0x48>)
   2a502:	6013      	str	r3, [r2, #0]
   2a504:	e7ed      	b.n	2a4e2 <ble_store_config_write_cccd+0x1a>
            return BLE_HS_ESTORE_CAP;
   2a506:	201b      	movs	r0, #27
   2a508:	e7f3      	b.n	2a4f2 <ble_store_config_write_cccd+0x2a>
   2a50a:	bf00      	nop
   2a50c:	10006284 	.word	0x10006284
   2a510:	10006304 	.word	0x10006304

0002a514 <ble_store_config_write>:
 * @return                      0 on success;
 *                              BLE_HS_ESTORE_CAP if the database is full.
 */
int
ble_store_config_write(int obj_type, const union ble_store_value *val)
{
   2a514:	b508      	push	{r3, lr}
   2a516:	4603      	mov	r3, r0
   2a518:	4608      	mov	r0, r1
    int rc;

    switch (obj_type) {
   2a51a:	2b02      	cmp	r3, #2
   2a51c:	d005      	beq.n	2a52a <ble_store_config_write+0x16>
   2a51e:	2b03      	cmp	r3, #3
   2a520:	d009      	beq.n	2a536 <ble_store_config_write+0x22>
   2a522:	2b01      	cmp	r3, #1
   2a524:	d004      	beq.n	2a530 <ble_store_config_write+0x1c>
   2a526:	2008      	movs	r0, #8
        return rc;

    default:
        return BLE_HS_ENOTSUP;
    }
}
   2a528:	bd08      	pop	{r3, pc}
        rc = ble_store_config_write_peer_sec(&val->sec);
   2a52a:	f7ff ff75 	bl	2a418 <ble_store_config_write_peer_sec>
        return rc;
   2a52e:	e7fb      	b.n	2a528 <ble_store_config_write+0x14>
        rc = ble_store_config_write_our_sec(&val->sec);
   2a530:	f7ff ff9e 	bl	2a470 <ble_store_config_write_our_sec>
        return rc;
   2a534:	e7f8      	b.n	2a528 <ble_store_config_write+0x14>
        rc = ble_store_config_write_cccd(&val->cccd);
   2a536:	f7ff ffc7 	bl	2a4c8 <ble_store_config_write_cccd>
        return rc;
   2a53a:	e7f5      	b.n	2a528 <ble_store_config_write+0x14>

0002a53c <ble_store_config_delete_obj>:
{
   2a53c:	b510      	push	{r4, lr}
    (*num_values)--;
   2a53e:	681c      	ldr	r4, [r3, #0]
   2a540:	3c01      	subs	r4, #1
   2a542:	601c      	str	r4, [r3, #0]
    if (idx < *num_values) {
   2a544:	4294      	cmp	r4, r2
   2a546:	dc01      	bgt.n	2a54c <ble_store_config_delete_obj+0x10>
}
   2a548:	2000      	movs	r0, #0
   2a54a:	bd10      	pop	{r4, pc}
        dst += idx * value_size;
   2a54c:	fb01 0002 	mla	r0, r1, r2, r0
        move_count = *num_values - idx;
   2a550:	1aa2      	subs	r2, r4, r2
        memmove(dst, src, move_count * value_size);
   2a552:	fb02 f201 	mul.w	r2, r2, r1
   2a556:	4401      	add	r1, r0
   2a558:	f7f0 fb99 	bl	1ac8e <memmove>
   2a55c:	e7f4      	b.n	2a548 <ble_store_config_delete_obj+0xc>

0002a55e <ble_store_config_delete_sec>:
{
   2a55e:	b538      	push	{r3, r4, r5, lr}
   2a560:	460d      	mov	r5, r1
   2a562:	4614      	mov	r4, r2
    idx = ble_store_config_find_sec(key_sec, value_secs, *num_value_secs);
   2a564:	6812      	ldr	r2, [r2, #0]
   2a566:	f7ff fe23 	bl	2a1b0 <ble_store_config_find_sec>
    if (idx == -1) {
   2a56a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2a56e:	d006      	beq.n	2a57e <ble_store_config_delete_sec+0x20>
   2a570:	4602      	mov	r2, r0
    rc = ble_store_config_delete_obj(value_secs, sizeof *value_secs, idx,
   2a572:	4623      	mov	r3, r4
   2a574:	2150      	movs	r1, #80	; 0x50
   2a576:	4628      	mov	r0, r5
   2a578:	f7ff ffe0 	bl	2a53c <ble_store_config_delete_obj>
}
   2a57c:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOENT;
   2a57e:	2005      	movs	r0, #5
   2a580:	e7fc      	b.n	2a57c <ble_store_config_delete_sec+0x1e>
	...

0002a584 <ble_store_config_delete_peer_sec>:
{
   2a584:	b508      	push	{r3, lr}
    rc = ble_store_config_delete_sec(key_sec, ble_store_config_peer_secs,
   2a586:	4a02      	ldr	r2, [pc, #8]	; (2a590 <ble_store_config_delete_peer_sec+0xc>)
   2a588:	4902      	ldr	r1, [pc, #8]	; (2a594 <ble_store_config_delete_peer_sec+0x10>)
   2a58a:	f7ff ffe8 	bl	2a55e <ble_store_config_delete_sec>
}
   2a58e:	bd08      	pop	{r3, pc}
   2a590:	1000630c 	.word	0x1000630c
   2a594:	10006400 	.word	0x10006400

0002a598 <ble_store_config_delete_our_sec>:
{
   2a598:	b508      	push	{r3, lr}
    rc = ble_store_config_delete_sec(key_sec, ble_store_config_our_secs,
   2a59a:	4a02      	ldr	r2, [pc, #8]	; (2a5a4 <ble_store_config_delete_our_sec+0xc>)
   2a59c:	4902      	ldr	r1, [pc, #8]	; (2a5a8 <ble_store_config_delete_our_sec+0x10>)
   2a59e:	f7ff ffde 	bl	2a55e <ble_store_config_delete_sec>
}
   2a5a2:	bd08      	pop	{r3, pc}
   2a5a4:	10006308 	.word	0x10006308
   2a5a8:	10006310 	.word	0x10006310

0002a5ac <ble_store_config_delete_cccd>:
{
   2a5ac:	b508      	push	{r3, lr}
    idx = ble_store_config_find_cccd(key_cccd);
   2a5ae:	f7ff fe83 	bl	2a2b8 <ble_store_config_find_cccd>
    if (idx == -1) {
   2a5b2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2a5b6:	d006      	beq.n	2a5c6 <ble_store_config_delete_cccd+0x1a>
   2a5b8:	4602      	mov	r2, r0
    rc = ble_store_config_delete_obj(ble_store_config_cccds,
   2a5ba:	4b04      	ldr	r3, [pc, #16]	; (2a5cc <ble_store_config_delete_cccd+0x20>)
   2a5bc:	2110      	movs	r1, #16
   2a5be:	4804      	ldr	r0, [pc, #16]	; (2a5d0 <ble_store_config_delete_cccd+0x24>)
   2a5c0:	f7ff ffbc 	bl	2a53c <ble_store_config_delete_obj>
}
   2a5c4:	bd08      	pop	{r3, pc}
        return BLE_HS_ENOENT;
   2a5c6:	2005      	movs	r0, #5
   2a5c8:	e7fc      	b.n	2a5c4 <ble_store_config_delete_cccd+0x18>
   2a5ca:	bf00      	nop
   2a5cc:	10006304 	.word	0x10006304
   2a5d0:	10006284 	.word	0x10006284

0002a5d4 <ble_store_config_delete>:

int
ble_store_config_delete(int obj_type, const union ble_store_key *key)
{
   2a5d4:	b508      	push	{r3, lr}
   2a5d6:	4603      	mov	r3, r0
   2a5d8:	4608      	mov	r0, r1
    int rc;

    switch (obj_type) {
   2a5da:	2b02      	cmp	r3, #2
   2a5dc:	d005      	beq.n	2a5ea <ble_store_config_delete+0x16>
   2a5de:	2b03      	cmp	r3, #3
   2a5e0:	d009      	beq.n	2a5f6 <ble_store_config_delete+0x22>
   2a5e2:	2b01      	cmp	r3, #1
   2a5e4:	d004      	beq.n	2a5f0 <ble_store_config_delete+0x1c>
   2a5e6:	2008      	movs	r0, #8
        return rc;

    default:
        return BLE_HS_ENOTSUP;
    }
}
   2a5e8:	bd08      	pop	{r3, pc}
        rc = ble_store_config_delete_peer_sec(&key->sec);
   2a5ea:	f7ff ffcb 	bl	2a584 <ble_store_config_delete_peer_sec>
        return rc;
   2a5ee:	e7fb      	b.n	2a5e8 <ble_store_config_delete+0x14>
        rc = ble_store_config_delete_our_sec(&key->sec);
   2a5f0:	f7ff ffd2 	bl	2a598 <ble_store_config_delete_our_sec>
        return rc;
   2a5f4:	e7f8      	b.n	2a5e8 <ble_store_config_delete+0x14>
        rc = ble_store_config_delete_cccd(&key->cccd);
   2a5f6:	f7ff ffd9 	bl	2a5ac <ble_store_config_delete_cccd>
        return rc;
   2a5fa:	e7f5      	b.n	2a5e8 <ble_store_config_delete+0x14>

0002a5fc <ble_store_config_init>:

void
ble_store_config_init(void)
{
   2a5fc:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   2a5fe:	4b0e      	ldr	r3, [pc, #56]	; (2a638 <ble_store_config_init+0x3c>)
   2a600:	781b      	ldrb	r3, [r3, #0]
   2a602:	b173      	cbz	r3, 2a622 <ble_store_config_init+0x26>

    ble_hs_cfg.store_read_cb = ble_store_config_read;
   2a604:	4b0d      	ldr	r3, [pc, #52]	; (2a63c <ble_store_config_init+0x40>)
   2a606:	4a0e      	ldr	r2, [pc, #56]	; (2a640 <ble_store_config_init+0x44>)
   2a608:	615a      	str	r2, [r3, #20]
    ble_hs_cfg.store_write_cb = ble_store_config_write;
   2a60a:	4a0e      	ldr	r2, [pc, #56]	; (2a644 <ble_store_config_init+0x48>)
   2a60c:	619a      	str	r2, [r3, #24]
    ble_hs_cfg.store_delete_cb = ble_store_config_delete;
   2a60e:	4a0e      	ldr	r2, [pc, #56]	; (2a648 <ble_store_config_init+0x4c>)
   2a610:	61da      	str	r2, [r3, #28]

    /* Re-initialize BSS values in case of unit tests. */
    ble_store_config_num_our_secs = 0;
   2a612:	2300      	movs	r3, #0
   2a614:	4a0d      	ldr	r2, [pc, #52]	; (2a64c <ble_store_config_init+0x50>)
   2a616:	6013      	str	r3, [r2, #0]
    ble_store_config_num_peer_secs = 0;
   2a618:	4a0d      	ldr	r2, [pc, #52]	; (2a650 <ble_store_config_init+0x54>)
   2a61a:	6013      	str	r3, [r2, #0]
    ble_store_config_num_cccds = 0;
   2a61c:	4a0d      	ldr	r2, [pc, #52]	; (2a654 <ble_store_config_init+0x58>)
   2a61e:	6013      	str	r3, [r2, #0]

    ble_store_config_conf_init();
}
   2a620:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   2a622:	f7ea f86f 	bl	14704 <hal_debugger_connected>
   2a626:	b100      	cbz	r0, 2a62a <ble_store_config_init+0x2e>
   2a628:	be01      	bkpt	0x0001
   2a62a:	2300      	movs	r3, #0
   2a62c:	461a      	mov	r2, r3
   2a62e:	4619      	mov	r1, r3
   2a630:	4618      	mov	r0, r3
   2a632:	f7ee fb77 	bl	18d24 <__assert_func>
   2a636:	bf00      	nop
   2a638:	100055a0 	.word	0x100055a0
   2a63c:	100006d4 	.word	0x100006d4
   2a640:	0002a393 	.word	0x0002a393
   2a644:	0002a515 	.word	0x0002a515
   2a648:	0002a5d5 	.word	0x0002a5d5
   2a64c:	10006308 	.word	0x10006308
   2a650:	1000630c 	.word	0x1000630c
   2a654:	10006304 	.word	0x10006304

0002a658 <ble_hs_util_load_rand_addr>:
        return 0;
    }
#endif

    return BLE_HS_ENOADDR;
}
   2a658:	2015      	movs	r0, #21
   2a65a:	4770      	bx	lr

0002a65c <ble_hs_util_ensure_rand_addr>:

static int
ble_hs_util_ensure_rand_addr(void)
{
   2a65c:	b500      	push	{lr}
   2a65e:	b083      	sub	sp, #12
    ble_addr_t addr;
    int rc;

    /* If we already have a random address, then we are done. */
    rc = ble_hs_id_copy_addr(BLE_ADDR_RANDOM, NULL, NULL);
   2a660:	2200      	movs	r2, #0
   2a662:	4611      	mov	r1, r2
   2a664:	2001      	movs	r0, #1
   2a666:	f7fd fef1 	bl	2844c <ble_hs_id_copy_addr>
    if (rc == 0) {
   2a66a:	4603      	mov	r3, r0
   2a66c:	b120      	cbz	r0, 2a678 <ble_hs_util_ensure_rand_addr+0x1c>
        return 0;
    }

    /* Otherwise, try to load a random address. */
    rc = ble_hs_util_load_rand_addr(&addr);
   2a66e:	4668      	mov	r0, sp
   2a670:	f7ff fff2 	bl	2a658 <ble_hs_util_load_rand_addr>
    if (rc != 0) {
   2a674:	4603      	mov	r3, r0
   2a676:	b118      	cbz	r0, 2a680 <ble_hs_util_ensure_rand_addr+0x24>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   2a678:	4618      	mov	r0, r3
   2a67a:	b003      	add	sp, #12
   2a67c:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = ble_hs_id_set_rnd(addr.val);
   2a680:	f10d 0001 	add.w	r0, sp, #1
   2a684:	f7fd fe62 	bl	2834c <ble_hs_id_set_rnd>
   2a688:	4603      	mov	r3, r0
    if (rc != 0) {
   2a68a:	e7f5      	b.n	2a678 <ble_hs_util_ensure_rand_addr+0x1c>

0002a68c <ble_hs_util_ensure_addr>:

int
ble_hs_util_ensure_addr(int prefer_random)
{
   2a68c:	b508      	push	{r3, lr}
    int rc;

    if (prefer_random) {
   2a68e:	b150      	cbz	r0, 2a6a6 <ble_hs_util_ensure_addr+0x1a>
        /* Try to load a random address. */
        rc = ble_hs_util_ensure_rand_addr();
   2a690:	f7ff ffe4 	bl	2a65c <ble_hs_util_ensure_rand_addr>
        if (rc == BLE_HS_ENOADDR) {
   2a694:	2815      	cmp	r0, #21
   2a696:	d000      	beq.n	2a69a <ble_hs_util_ensure_addr+0xe>
            rc = ble_hs_util_ensure_rand_addr();
        }
    }

    return rc;
}
   2a698:	bd08      	pop	{r3, pc}
            rc = ble_hs_id_copy_addr(BLE_ADDR_PUBLIC, NULL, NULL);
   2a69a:	2200      	movs	r2, #0
   2a69c:	4611      	mov	r1, r2
   2a69e:	4610      	mov	r0, r2
   2a6a0:	f7fd fed4 	bl	2844c <ble_hs_id_copy_addr>
   2a6a4:	e7f8      	b.n	2a698 <ble_hs_util_ensure_addr+0xc>
        rc = ble_hs_id_copy_addr(BLE_ADDR_PUBLIC, NULL, NULL);
   2a6a6:	2200      	movs	r2, #0
   2a6a8:	4611      	mov	r1, r2
   2a6aa:	4610      	mov	r0, r2
   2a6ac:	f7fd fece 	bl	2844c <ble_hs_id_copy_addr>
        if (rc == BLE_HS_ENOADDR) {
   2a6b0:	2815      	cmp	r0, #21
   2a6b2:	d1f1      	bne.n	2a698 <ble_hs_util_ensure_addr+0xc>
            rc = ble_hs_util_ensure_rand_addr();
   2a6b4:	f7ff ffd2 	bl	2a65c <ble_hs_util_ensure_rand_addr>
    return rc;
   2a6b8:	e7ee      	b.n	2a698 <ble_hs_util_ensure_addr+0xc>
	...

0002a6bc <apollo3_update_wake>:
}

/* Wake update helper function */
static void
apollo3_update_wake(void)
{
   2a6bc:	b500      	push	{lr}
   2a6be:	b083      	sub	sp, #12
    AM_CRITICAL_BEGIN;
   2a6c0:	f002 fed6 	bl	2d470 <am_hal_interrupt_master_disable>
   2a6c4:	9001      	str	r0, [sp, #4]

    // We want to set WAKE if there's something in the write queue, but not if
    // SPISTATUS or IRQ is high.
    if ((BLEIFn(0)->BSTATUS_b.SPISTATUS == 0) && (BLEIF->BSTATUS_b.BLEIRQ == false))
   2a6c6:	4b11      	ldr	r3, [pc, #68]	; (2a70c <apollo3_update_wake+0x50>)
   2a6c8:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2a6cc:	f013 0f08 	tst.w	r3, #8
   2a6d0:	d105      	bne.n	2a6de <apollo3_update_wake+0x22>
   2a6d2:	4b0e      	ldr	r3, [pc, #56]	; (2a70c <apollo3_update_wake+0x50>)
   2a6d4:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2a6d8:	f013 0f80 	tst.w	r3, #128	; 0x80
   2a6dc:	d005      	beq.n	2a6ea <apollo3_update_wake+0x2e>
        {
            am_hal_ble_wakeup_set(BLE, 0);
        }
    }

    AM_CRITICAL_END;
   2a6de:	9801      	ldr	r0, [sp, #4]
   2a6e0:	f002 feca 	bl	2d478 <am_hal_interrupt_master_set>
}
   2a6e4:	b003      	add	sp, #12
   2a6e6:	f85d fb04 	ldr.w	pc, [sp], #4
        am_hal_ble_wakeup_set(BLE, 1);
   2a6ea:	2101      	movs	r1, #1
   2a6ec:	4b08      	ldr	r3, [pc, #32]	; (2a710 <apollo3_update_wake+0x54>)
   2a6ee:	6818      	ldr	r0, [r3, #0]
   2a6f0:	f001 fc6e 	bl	2bfd0 <am_hal_ble_wakeup_set>
        if (BLEIF->BSTATUS_b.BLEIRQ == true)
   2a6f4:	4b05      	ldr	r3, [pc, #20]	; (2a70c <apollo3_update_wake+0x50>)
   2a6f6:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2a6fa:	f013 0f80 	tst.w	r3, #128	; 0x80
   2a6fe:	d0ee      	beq.n	2a6de <apollo3_update_wake+0x22>
            am_hal_ble_wakeup_set(BLE, 0);
   2a700:	2100      	movs	r1, #0
   2a702:	4b03      	ldr	r3, [pc, #12]	; (2a710 <apollo3_update_wake+0x54>)
   2a704:	6818      	ldr	r0, [r3, #0]
   2a706:	f001 fc63 	bl	2bfd0 <am_hal_ble_wakeup_set>
   2a70a:	e7e8      	b.n	2a6de <apollo3_update_wake+0x22>
   2a70c:	5000c000 	.word	0x5000c000
   2a710:	100064f0 	.word	0x100064f0

0002a714 <apollo3_hci_radio_boot>:
{
   2a714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a718:	b08e      	sub	sp, #56	; 0x38
   2a71a:	4680      	mov	r8, r0
    uint32_t ui32Status = AM_HAL_STATUS_FAIL;
   2a71c:	2401      	movs	r4, #1
    uint32_t ui32NumXtalRetries = 0;
   2a71e:	2700      	movs	r7, #0
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
   2a720:	e01b      	b.n	2a75a <apollo3_hci_radio_boot+0x46>
            os_time_delay(OS_TICKS_PER_SEC);
   2a722:	2080      	movs	r0, #128	; 0x80
   2a724:	f7ef ffce 	bl	1a6c4 <os_time_delay>
        ui32Status = am_hal_ble_boot(BLE);
   2a728:	4b33      	ldr	r3, [pc, #204]	; (2a7f8 <apollo3_hci_radio_boot+0xe4>)
   2a72a:	6818      	ldr	r0, [r3, #0]
   2a72c:	f002 fda2 	bl	2d274 <am_hal_ble_boot>
        if (ui32Status == AM_HAL_STATUS_SUCCESS)
   2a730:	4604      	mov	r4, r0
   2a732:	2800      	cmp	r0, #0
   2a734:	d039      	beq.n	2a7aa <apollo3_hci_radio_boot+0x96>
        else if (ui32Status == AM_HAL_BLE_32K_CLOCK_UNSTABLE)
   2a736:	4b31      	ldr	r3, [pc, #196]	; (2a7fc <apollo3_hci_radio_boot+0xe8>)
   2a738:	4298      	cmp	r0, r3
   2a73a:	d12a      	bne.n	2a792 <apollo3_hci_radio_boot+0x7e>
            am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
   2a73c:	4d2e      	ldr	r5, [pc, #184]	; (2a7f8 <apollo3_hci_radio_boot+0xe4>)
   2a73e:	2101      	movs	r1, #1
   2a740:	6828      	ldr	r0, [r5, #0]
   2a742:	f001 fd6b 	bl	2c21c <am_hal_ble_power_control>
            am_hal_ble_deinitialize(BLE);
   2a746:	6828      	ldr	r0, [r5, #0]
   2a748:	f001 fcba 	bl	2c0c0 <am_hal_ble_deinitialize>
            if (ui32NumXtalRetries++ < MYNEWT_VAL(BLE_HCI_DRV_MAX_XTAL_RETRIES))
   2a74c:	1c7d      	adds	r5, r7, #1
   2a74e:	2f09      	cmp	r7, #9
   2a750:	d827      	bhi.n	2a7a2 <apollo3_hci_radio_boot+0x8e>
                os_time_delay(OS_TICKS_PER_SEC);
   2a752:	2080      	movs	r0, #128	; 0x80
   2a754:	f7ef ffb6 	bl	1a6c4 <os_time_delay>
            if (ui32NumXtalRetries++ < MYNEWT_VAL(BLE_HCI_DRV_MAX_XTAL_RETRIES))
   2a758:	462f      	mov	r7, r5
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
   2a75a:	b334      	cbz	r4, 2a7aa <apollo3_hci_radio_boot+0x96>
        am_hal_pwrctrl_low_power_init();
   2a75c:	f003 f87a 	bl	2d854 <am_hal_pwrctrl_low_power_init>
        am_hal_ble_initialize(0, &BLE);
   2a760:	4e25      	ldr	r6, [pc, #148]	; (2a7f8 <apollo3_hci_radio_boot+0xe4>)
   2a762:	4631      	mov	r1, r6
   2a764:	2000      	movs	r0, #0
   2a766:	f001 fc57 	bl	2c018 <am_hal_ble_initialize>
        am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_ACTIVE);
   2a76a:	2100      	movs	r1, #0
   2a76c:	6830      	ldr	r0, [r6, #0]
   2a76e:	f001 fd55 	bl	2c21c <am_hal_ble_power_control>
        am_hal_ble_config_t sBleConfig =
   2a772:	ac01      	add	r4, sp, #4
   2a774:	4d22      	ldr	r5, [pc, #136]	; (2a800 <apollo3_hci_radio_boot+0xec>)
   2a776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2a778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2a77a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   2a77e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        am_hal_ble_config(BLE, &sBleConfig);
   2a782:	a901      	add	r1, sp, #4
   2a784:	6830      	ldr	r0, [r6, #0]
   2a786:	f001 fcc9 	bl	2c11c <am_hal_ble_config>
        if ( bColdBoot )
   2a78a:	f1b8 0f00 	cmp.w	r8, #0
   2a78e:	d0cb      	beq.n	2a728 <apollo3_hci_radio_boot+0x14>
   2a790:	e7c7      	b.n	2a722 <apollo3_hci_radio_boot+0xe>
            am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
   2a792:	4c19      	ldr	r4, [pc, #100]	; (2a7f8 <apollo3_hci_radio_boot+0xe4>)
   2a794:	2101      	movs	r1, #1
   2a796:	6820      	ldr	r0, [r4, #0]
   2a798:	f001 fd40 	bl	2c21c <am_hal_ble_power_control>
            am_hal_ble_deinitialize(BLE);
   2a79c:	6820      	ldr	r0, [r4, #0]
   2a79e:	f001 fc8f 	bl	2c0c0 <am_hal_ble_deinitialize>
                return AM_HAL_STATUS_FAIL;
   2a7a2:	2001      	movs	r0, #1
}
   2a7a4:	b00e      	add	sp, #56	; 0x38
   2a7a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    am_hal_ble_tx_power_set(BLE, TX_POWER_LEVEL_0P0_dBm);
   2a7aa:	4c13      	ldr	r4, [pc, #76]	; (2a7f8 <apollo3_hci_radio_boot+0xe4>)
   2a7ac:	2108      	movs	r1, #8
   2a7ae:	6820      	ldr	r0, [r4, #0]
   2a7b0:	f002 fd9a 	bl	2d2e8 <am_hal_ble_tx_power_set>
    am_hal_ble_int_clear(BLE, (AM_HAL_BLE_INT_CMDCMP |
   2a7b4:	f240 2181 	movw	r1, #641	; 0x281
   2a7b8:	6820      	ldr	r0, [r4, #0]
   2a7ba:	f002 fb21 	bl	2ce00 <am_hal_ble_int_clear>
    am_hal_ble_int_enable(BLE, (AM_HAL_BLE_INT_CMDCMP |
   2a7be:	f240 2181 	movw	r1, #641	; 0x281
   2a7c2:	6820      	ldr	r0, [r4, #0]
   2a7c4:	f002 faec 	bl	2cda0 <am_hal_ble_int_enable>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2a7c8:	4b0e      	ldr	r3, [pc, #56]	; (2a804 <apollo3_hci_radio_boot+0xf0>)
   2a7ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2a7ce:	601a      	str	r2, [r3, #0]
    if (bColdBoot)
   2a7d0:	f1b8 0f00 	cmp.w	r8, #0
   2a7d4:	d101      	bne.n	2a7da <apollo3_hci_radio_boot+0xc6>
    return AM_HAL_STATUS_SUCCESS;
   2a7d6:	2000      	movs	r0, #0
   2a7d8:	e7e4      	b.n	2a7a4 <apollo3_hci_radio_boot+0x90>
        am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &sDevice);
   2a7da:	a901      	add	r1, sp, #4
   2a7dc:	2001      	movs	r0, #1
   2a7de:	f002 fec9 	bl	2d574 <am_hal_mcuctrl_info_get>
        memcpy(g_ble_mac_address, &sDevice.ui32ChipID1, sizeof(sDevice.ui32ChipID1));
   2a7e2:	4a09      	ldr	r2, [pc, #36]	; (2a808 <apollo3_hci_radio_boot+0xf4>)
   2a7e4:	9b03      	ldr	r3, [sp, #12]
   2a7e6:	6013      	str	r3, [r2, #0]
        g_ble_mac_address[4] = (sDevice.ui32ChipID0 >> 8) & 0xFF;
   2a7e8:	9b02      	ldr	r3, [sp, #8]
   2a7ea:	0a19      	lsrs	r1, r3, #8
   2a7ec:	7111      	strb	r1, [r2, #4]
        g_ble_mac_address[5] = (sDevice.ui32ChipID0 >> 16) & 0xFF;
   2a7ee:	0c1b      	lsrs	r3, r3, #16
   2a7f0:	7153      	strb	r3, [r2, #5]
    return AM_HAL_STATUS_SUCCESS;
   2a7f2:	2000      	movs	r0, #0
   2a7f4:	e7d6      	b.n	2a7a4 <apollo3_hci_radio_boot+0x90>
   2a7f6:	bf00      	nop
   2a7f8:	100064f0 	.word	0x100064f0
   2a7fc:	0800000b 	.word	0x0800000b
   2a800:	0002fb64 	.word	0x0002fb64
   2a804:	e000e100 	.word	0xe000e100
   2a808:	10006e1c 	.word	0x10006e1c

0002a80c <apollo3_hci_radio_shutdown>:
{
   2a80c:	b510      	push	{r4, lr}
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2a80e:	4b10      	ldr	r3, [pc, #64]	; (2a850 <apollo3_hci_radio_shutdown+0x44>)
   2a810:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2a814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   2a818:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2a81c:	f3bf 8f6f 	isb	sy
    am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
   2a820:	2101      	movs	r1, #1
   2a822:	4b0c      	ldr	r3, [pc, #48]	; (2a854 <apollo3_hci_radio_shutdown+0x48>)
   2a824:	6818      	ldr	r0, [r3, #0]
   2a826:	f001 fcf9 	bl	2c21c <am_hal_ble_power_control>
    uint32_t timeout_ticks = 0;
   2a82a:	2400      	movs	r4, #0
    while (PWRCTRL->DEVPWREN_b.PWRBLEL)
   2a82c:	4b0a      	ldr	r3, [pc, #40]	; (2a858 <apollo3_hci_radio_shutdown+0x4c>)
   2a82e:	689b      	ldr	r3, [r3, #8]
   2a830:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   2a834:	d006      	beq.n	2a844 <apollo3_hci_radio_shutdown+0x38>
        if (timeout_ticks >= OS_TICKS_PER_SEC)
   2a836:	2c7f      	cmp	r4, #127	; 0x7f
   2a838:	d804      	bhi.n	2a844 <apollo3_hci_radio_shutdown+0x38>
        os_time_delay(1);
   2a83a:	2001      	movs	r0, #1
   2a83c:	f7ef ff42 	bl	1a6c4 <os_time_delay>
        timeout_ticks++;
   2a840:	3401      	adds	r4, #1
   2a842:	e7f3      	b.n	2a82c <apollo3_hci_radio_shutdown+0x20>
    am_hal_ble_deinitialize(BLE);
   2a844:	4b03      	ldr	r3, [pc, #12]	; (2a854 <apollo3_hci_radio_shutdown+0x48>)
   2a846:	6818      	ldr	r0, [r3, #0]
   2a848:	f001 fc3a 	bl	2c0c0 <am_hal_ble_deinitialize>
}
   2a84c:	bd10      	pop	{r4, pc}
   2a84e:	bf00      	nop
   2a850:	e000e100 	.word	0xe000e100
   2a854:	100064f0 	.word	0x100064f0
   2a858:	40021000 	.word	0x40021000

0002a85c <apollo3_hci_write>:
apollo3_hci_write(uint8_t type, uint16_t len, uint8_t *pData)
{
    uint8_t *pui8Wptr;
    hci_drv_write_t psWriteBuffer;

    if (len > (MYNEWT_VAL(BLE_HCI_DRV_MAX_TX_PACKET)-1))  // comparison compensates for the type byte at index 0.
   2a85c:	29ff      	cmp	r1, #255	; 0xff
   2a85e:	d824      	bhi.n	2a8aa <apollo3_hci_write+0x4e>
{
   2a860:	b510      	push	{r4, lr}
   2a862:	b0c2      	sub	sp, #264	; 0x108
    {
        return 0;
    }

    /* Set all of the fields in the hci write structure. */
    psWriteBuffer.len = len + 1;
   2a864:	1c4b      	adds	r3, r1, #1
   2a866:	9301      	str	r3, [sp, #4]

    pui8Wptr = (uint8_t *) psWriteBuffer.data;

    *pui8Wptr++ = type;
   2a868:	f88d 0008 	strb.w	r0, [sp, #8]

    for (uint32_t i = 0; i < len; i++)
   2a86c:	2300      	movs	r3, #0
   2a86e:	4299      	cmp	r1, r3
   2a870:	d905      	bls.n	2a87e <apollo3_hci_write+0x22>
    {
        pui8Wptr[i] = pData[i];
   2a872:	5cd4      	ldrb	r4, [r2, r3]
   2a874:	f10d 0009 	add.w	r0, sp, #9
   2a878:	54c4      	strb	r4, [r0, r3]
    for (uint32_t i = 0; i < len; i++)
   2a87a:	3301      	adds	r3, #1
   2a87c:	e7f7      	b.n	2a86e <apollo3_hci_write+0x12>
    }

    /* Wake up the BLE controller. */
    apollo3_update_wake();
   2a87e:	f7ff ff1d 	bl	2a6bc <apollo3_update_wake>

    /* Wait on SPI status before writing */
    while ( BLEIFn(0)->BSTATUS_b.SPISTATUS )
   2a882:	e002      	b.n	2a88a <apollo3_hci_write+0x2e>
    {
        os_time_delay(1);
   2a884:	2001      	movs	r0, #1
   2a886:	f7ef ff1d 	bl	1a6c4 <os_time_delay>
    while ( BLEIFn(0)->BSTATUS_b.SPISTATUS )
   2a88a:	4b09      	ldr	r3, [pc, #36]	; (2a8b0 <apollo3_hci_write+0x54>)
   2a88c:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2a890:	f013 0f08 	tst.w	r3, #8
   2a894:	d1f6      	bne.n	2a884 <apollo3_hci_write+0x28>
    }

    am_hal_ble_blocking_hci_write(BLE, AM_HAL_BLE_RAW, psWriteBuffer.data, psWriteBuffer.len);
   2a896:	9b01      	ldr	r3, [sp, #4]
   2a898:	aa02      	add	r2, sp, #8
   2a89a:	2100      	movs	r1, #0
   2a89c:	4805      	ldr	r0, [pc, #20]	; (2a8b4 <apollo3_hci_write+0x58>)
   2a89e:	6800      	ldr	r0, [r0, #0]
   2a8a0:	f001 ff56 	bl	2c750 <am_hal_ble_blocking_hci_write>

    return 0;
}
   2a8a4:	2000      	movs	r0, #0
   2a8a6:	b042      	add	sp, #264	; 0x108
   2a8a8:	bd10      	pop	{r4, pc}
   2a8aa:	2000      	movs	r0, #0
   2a8ac:	4770      	bx	lr
   2a8ae:	bf00      	nop
   2a8b0:	5000c000 	.word	0x5000c000
   2a8b4:	100064f0 	.word	0x100064f0

0002a8b8 <ble_hci_trans_acl_tx>:
    return 0;
}

static int
ble_hci_trans_acl_tx(struct os_mbuf *om)
{
   2a8b8:	b538      	push	{r3, r4, r5, lr}
   2a8ba:	4605      	mov	r5, r0
    struct os_mbuf *x;
    int rc = 0;

    x = om;
   2a8bc:	4604      	mov	r4, r0
    while (x) {
   2a8be:	b134      	cbz	r4, 2a8ce <ble_hci_trans_acl_tx+0x16>
        rc = apollo3_hci_write(HCI_PKT_ACL, x->om_len, x->om_data);
   2a8c0:	6822      	ldr	r2, [r4, #0]
   2a8c2:	88e1      	ldrh	r1, [r4, #6]
   2a8c4:	2002      	movs	r0, #2
   2a8c6:	f7ff ffc9 	bl	2a85c <apollo3_hci_write>
        if (rc < 0) {
            break;
        }
        x = SLIST_NEXT(x, om_next);
   2a8ca:	68e4      	ldr	r4, [r4, #12]
   2a8cc:	e7f7      	b.n	2a8be <ble_hci_trans_acl_tx+0x6>
    }

    os_mbuf_free_chain(om);
   2a8ce:	4628      	mov	r0, r5
   2a8d0:	f7ee fe9d 	bl	1960e <os_mbuf_free_chain>

    return (rc < 0) ? BLE_ERR_MEM_CAPACITY : 0;
}
   2a8d4:	2000      	movs	r0, #0
   2a8d6:	bd38      	pop	{r3, r4, r5, pc}

0002a8d8 <ble_hci_trans_reset>:
{
   2a8d8:	b508      	push	{r3, lr}
    apollo3_hci_radio_shutdown();
   2a8da:	f7ff ff97 	bl	2a80c <apollo3_hci_radio_shutdown>
    apollo3_hci_radio_boot(0);
   2a8de:	2000      	movs	r0, #0
   2a8e0:	f7ff ff18 	bl	2a714 <apollo3_hci_radio_boot>
}
   2a8e4:	2000      	movs	r0, #0
   2a8e6:	bd08      	pop	{r3, pc}

0002a8e8 <ble_hci_trans_cfg_hs>:

#if MYNEWT_VAL(BLE_HOST)
void
ble_hci_trans_cfg_hs(ble_hci_trans_rx_cmd_fn *evt_cb, void *evt_arg,
                     ble_hci_trans_rx_acl_fn *acl_cb, void *acl_arg)
{
   2a8e8:	b410      	push	{r4}
    apollo3_ble_hci_api.evt_cb = evt_cb;
   2a8ea:	4c03      	ldr	r4, [pc, #12]	; (2a8f8 <ble_hci_trans_cfg_hs+0x10>)
   2a8ec:	6020      	str	r0, [r4, #0]
    apollo3_ble_hci_api.evt_arg = evt_arg;
   2a8ee:	6061      	str	r1, [r4, #4]
    apollo3_ble_hci_api.acl_cb = acl_cb;
   2a8f0:	60a2      	str	r2, [r4, #8]
    apollo3_ble_hci_api.acl_arg = acl_arg;
   2a8f2:	60e3      	str	r3, [r4, #12]
}
   2a8f4:	bc10      	pop	{r4}
   2a8f6:	4770      	bx	lr
   2a8f8:	100064f4 	.word	0x100064f4

0002a8fc <ble_hci_trans_hs_acl_tx>:
    return (rc < 0) ? BLE_ERR_MEM_CAPACITY :  0;
}

int
ble_hci_trans_hs_acl_tx(struct os_mbuf *om)
{
   2a8fc:	b508      	push	{r3, lr}
    return ble_hci_trans_acl_tx(om);
   2a8fe:	f7ff ffdb 	bl	2a8b8 <ble_hci_trans_acl_tx>
}
   2a902:	bd08      	pop	{r3, pc}

0002a904 <ble_hci_trans_buf_alloc>:
#endif

uint8_t *
ble_hci_trans_buf_alloc(int type)
{
   2a904:	b508      	push	{r3, lr}
    uint8_t *buf;

    switch (type) {
   2a906:	2802      	cmp	r0, #2
   2a908:	d011      	beq.n	2a92e <ble_hci_trans_buf_alloc+0x2a>
   2a90a:	2803      	cmp	r0, #3
   2a90c:	d00b      	beq.n	2a926 <ble_hci_trans_buf_alloc+0x22>
   2a90e:	2801      	cmp	r0, #1
   2a910:	d011      	beq.n	2a936 <ble_hci_trans_buf_alloc+0x32>
        /* no break */
    case BLE_HCI_TRANS_BUF_EVT_LO:
        buf = os_memblock_get(&apollo3_ble_hci_pool_evt_lo);
        break;
    default:
        assert(0);
   2a912:	f7e9 fef7 	bl	14704 <hal_debugger_connected>
   2a916:	b100      	cbz	r0, 2a91a <ble_hci_trans_buf_alloc+0x16>
   2a918:	be01      	bkpt	0x0001
   2a91a:	2300      	movs	r3, #0
   2a91c:	461a      	mov	r2, r3
   2a91e:	4619      	mov	r1, r3
   2a920:	4618      	mov	r0, r3
   2a922:	f7ee f9ff 	bl	18d24 <__assert_func>
        buf = os_memblock_get(&apollo3_ble_hci_pool_cmd_mempool);
   2a926:	4806      	ldr	r0, [pc, #24]	; (2a940 <ble_hci_trans_buf_alloc+0x3c>)
   2a928:	f7ef faa3 	bl	19e72 <os_memblock_get>
        break;
   2a92c:	e006      	b.n	2a93c <ble_hci_trans_buf_alloc+0x38>
        buf = os_memblock_get(&apollo3_ble_hci_pool_evt_hi);
   2a92e:	4805      	ldr	r0, [pc, #20]	; (2a944 <ble_hci_trans_buf_alloc+0x40>)
   2a930:	f7ef fa9f 	bl	19e72 <os_memblock_get>
        if (buf) {
   2a934:	b910      	cbnz	r0, 2a93c <ble_hci_trans_buf_alloc+0x38>
        buf = os_memblock_get(&apollo3_ble_hci_pool_evt_lo);
   2a936:	4804      	ldr	r0, [pc, #16]	; (2a948 <ble_hci_trans_buf_alloc+0x44>)
   2a938:	f7ef fa9b 	bl	19e72 <os_memblock_get>
        buf = NULL;
    }

    return buf;
}
   2a93c:	bd08      	pop	{r3, pc}
   2a93e:	bf00      	nop
   2a940:	100069e4 	.word	0x100069e4
   2a944:	10006b04 	.word	0x10006b04
   2a948:	10006bb0 	.word	0x10006bb0

0002a94c <ble_hci_trans_buf_free>:

void
ble_hci_trans_buf_free(uint8_t *buf)
{
   2a94c:	b510      	push	{r4, lr}
   2a94e:	4604      	mov	r4, r0
    int rc;

    if (os_memblock_from(&apollo3_ble_hci_pool_cmd_mempool, buf)) {
   2a950:	4601      	mov	r1, r0
   2a952:	4824      	ldr	r0, [pc, #144]	; (2a9e4 <ble_hci_trans_buf_free+0x98>)
   2a954:	f7ef fa6e 	bl	19e34 <os_memblock_from>
   2a958:	b178      	cbz	r0, 2a97a <ble_hci_trans_buf_free+0x2e>
        rc = os_memblock_put(&apollo3_ble_hci_pool_cmd_mempool, buf);
   2a95a:	4621      	mov	r1, r4
   2a95c:	4821      	ldr	r0, [pc, #132]	; (2a9e4 <ble_hci_trans_buf_free+0x98>)
   2a95e:	f7ef fab0 	bl	19ec2 <os_memblock_put>
        assert(rc == 0);
   2a962:	b900      	cbnz	r0, 2a966 <ble_hci_trans_buf_free+0x1a>
    } else {
        assert(os_memblock_from(&apollo3_ble_hci_pool_evt_lo, buf));
        rc = os_memblock_put(&apollo3_ble_hci_pool_evt_lo, buf);
        assert(rc == 0);
    }
}
   2a964:	bd10      	pop	{r4, pc}
        assert(rc == 0);
   2a966:	f7e9 fecd 	bl	14704 <hal_debugger_connected>
   2a96a:	b100      	cbz	r0, 2a96e <ble_hci_trans_buf_free+0x22>
   2a96c:	be01      	bkpt	0x0001
   2a96e:	2300      	movs	r3, #0
   2a970:	461a      	mov	r2, r3
   2a972:	4619      	mov	r1, r3
   2a974:	4618      	mov	r0, r3
   2a976:	f7ee f9d5 	bl	18d24 <__assert_func>
    } else if (os_memblock_from(&apollo3_ble_hci_pool_evt_hi, buf)) {
   2a97a:	4621      	mov	r1, r4
   2a97c:	481a      	ldr	r0, [pc, #104]	; (2a9e8 <ble_hci_trans_buf_free+0x9c>)
   2a97e:	f7ef fa59 	bl	19e34 <os_memblock_from>
   2a982:	b178      	cbz	r0, 2a9a4 <ble_hci_trans_buf_free+0x58>
        rc = os_memblock_put(&apollo3_ble_hci_pool_evt_hi, buf);
   2a984:	4621      	mov	r1, r4
   2a986:	4818      	ldr	r0, [pc, #96]	; (2a9e8 <ble_hci_trans_buf_free+0x9c>)
   2a988:	f7ef fa9b 	bl	19ec2 <os_memblock_put>
        assert(rc == 0);
   2a98c:	2800      	cmp	r0, #0
   2a98e:	d0e9      	beq.n	2a964 <ble_hci_trans_buf_free+0x18>
   2a990:	f7e9 feb8 	bl	14704 <hal_debugger_connected>
   2a994:	b100      	cbz	r0, 2a998 <ble_hci_trans_buf_free+0x4c>
   2a996:	be01      	bkpt	0x0001
   2a998:	2300      	movs	r3, #0
   2a99a:	461a      	mov	r2, r3
   2a99c:	4619      	mov	r1, r3
   2a99e:	4618      	mov	r0, r3
   2a9a0:	f7ee f9c0 	bl	18d24 <__assert_func>
        assert(os_memblock_from(&apollo3_ble_hci_pool_evt_lo, buf));
   2a9a4:	4621      	mov	r1, r4
   2a9a6:	4811      	ldr	r0, [pc, #68]	; (2a9ec <ble_hci_trans_buf_free+0xa0>)
   2a9a8:	f7ef fa44 	bl	19e34 <os_memblock_from>
   2a9ac:	b178      	cbz	r0, 2a9ce <ble_hci_trans_buf_free+0x82>
        rc = os_memblock_put(&apollo3_ble_hci_pool_evt_lo, buf);
   2a9ae:	4621      	mov	r1, r4
   2a9b0:	480e      	ldr	r0, [pc, #56]	; (2a9ec <ble_hci_trans_buf_free+0xa0>)
   2a9b2:	f7ef fa86 	bl	19ec2 <os_memblock_put>
        assert(rc == 0);
   2a9b6:	2800      	cmp	r0, #0
   2a9b8:	d0d4      	beq.n	2a964 <ble_hci_trans_buf_free+0x18>
   2a9ba:	f7e9 fea3 	bl	14704 <hal_debugger_connected>
   2a9be:	b100      	cbz	r0, 2a9c2 <ble_hci_trans_buf_free+0x76>
   2a9c0:	be01      	bkpt	0x0001
   2a9c2:	2300      	movs	r3, #0
   2a9c4:	461a      	mov	r2, r3
   2a9c6:	4619      	mov	r1, r3
   2a9c8:	4618      	mov	r0, r3
   2a9ca:	f7ee f9ab 	bl	18d24 <__assert_func>
        assert(os_memblock_from(&apollo3_ble_hci_pool_evt_lo, buf));
   2a9ce:	f7e9 fe99 	bl	14704 <hal_debugger_connected>
   2a9d2:	b100      	cbz	r0, 2a9d6 <ble_hci_trans_buf_free+0x8a>
   2a9d4:	be01      	bkpt	0x0001
   2a9d6:	2300      	movs	r3, #0
   2a9d8:	461a      	mov	r2, r3
   2a9da:	4619      	mov	r1, r3
   2a9dc:	4618      	mov	r0, r3
   2a9de:	f7ee f9a1 	bl	18d24 <__assert_func>
   2a9e2:	bf00      	nop
   2a9e4:	100069e4 	.word	0x100069e4
   2a9e8:	10006b04 	.word	0x10006b04
   2a9ec:	10006bb0 	.word	0x10006bb0

0002a9f0 <apollo3_ble_hci_trans_rx_process>:
{
   2a9f0:	b530      	push	{r4, r5, lr}
   2a9f2:	b083      	sub	sp, #12
    memset(&apollo3_ble_hci_rx_data, 0, sizeof(apollo3_ble_hci_rx_data));
   2a9f4:	4c67      	ldr	r4, [pc, #412]	; (2ab94 <apollo3_ble_hci_trans_rx_process+0x1a4>)
   2a9f6:	2300      	movs	r3, #0
   2a9f8:	6023      	str	r3, [r4, #0]
   2a9fa:	6063      	str	r3, [r4, #4]
   2a9fc:	60a3      	str	r3, [r4, #8]
   2a9fe:	60e3      	str	r3, [r4, #12]
    am_hal_ble_blocking_hci_read(BLE, g_read_buf, &len);
   2aa00:	4d65      	ldr	r5, [pc, #404]	; (2ab98 <apollo3_ble_hci_trans_rx_process+0x1a8>)
   2aa02:	aa01      	add	r2, sp, #4
   2aa04:	4629      	mov	r1, r5
   2aa06:	4b65      	ldr	r3, [pc, #404]	; (2ab9c <apollo3_ble_hci_trans_rx_process+0x1ac>)
   2aa08:	6818      	ldr	r0, [r3, #0]
   2aa0a:	f002 f8eb 	bl	2cbe4 <am_hal_ble_blocking_hci_read>
    rxd->type = buf[0];
   2aa0e:	782b      	ldrb	r3, [r5, #0]
   2aa10:	7023      	strb	r3, [r4, #0]
    assert((rxd->type == HCI_PKT_ACL) || (rxd->type == HCI_PKT_EVT));
   2aa12:	2b02      	cmp	r3, #2
   2aa14:	d001      	beq.n	2aa1a <apollo3_ble_hci_trans_rx_process+0x2a>
   2aa16:	2b04      	cmp	r3, #4
   2aa18:	d13f      	bne.n	2aa9a <apollo3_ble_hci_trans_rx_process+0xaa>
    switch (rxd->type) {
   2aa1a:	2b02      	cmp	r3, #2
   2aa1c:	d06a      	beq.n	2aaf4 <apollo3_ble_hci_trans_rx_process+0x104>
   2aa1e:	2b04      	cmp	r3, #4
   2aa20:	f040 80ad 	bne.w	2ab7e <apollo3_ble_hci_trans_rx_process+0x18e>
        rxd->len = HCI_EVT_HDR_LEN;
   2aa24:	4b5b      	ldr	r3, [pc, #364]	; (2ab94 <apollo3_ble_hci_trans_rx_process+0x1a4>)
   2aa26:	2202      	movs	r2, #2
   2aa28:	80da      	strh	r2, [r3, #6]
        memcpy(rxd->hdr, &buf[1], rxd->len);
   2aa2a:	4a5b      	ldr	r2, [pc, #364]	; (2ab98 <apollo3_ble_hci_trans_rx_process+0x1a8>)
   2aa2c:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   2aa30:	f8a3 2001 	strh.w	r2, [r3, #1]
        if (rxd->hdr[0] == BLE_HCI_EVCODE_LE_META) {
   2aa34:	785b      	ldrb	r3, [r3, #1]
   2aa36:	2b3e      	cmp	r3, #62	; 0x3e
   2aa38:	d039      	beq.n	2aaae <apollo3_ble_hci_trans_rx_process+0xbe>
    int pool = BLE_HCI_TRANS_BUF_EVT_HI;
   2aa3a:	2402      	movs	r4, #2
        rxd->buf = ble_hci_trans_buf_alloc(pool);
   2aa3c:	4620      	mov	r0, r4
   2aa3e:	f7ff ff61 	bl	2a904 <ble_hci_trans_buf_alloc>
   2aa42:	4b54      	ldr	r3, [pc, #336]	; (2ab94 <apollo3_ble_hci_trans_rx_process+0x1a4>)
   2aa44:	60d8      	str	r0, [r3, #12]
        if (!rxd->buf) {
   2aa46:	2800      	cmp	r0, #0
   2aa48:	d041      	beq.n	2aace <apollo3_ble_hci_trans_rx_process+0xde>
        rxd->expected_len = HCI_EVT_HDR_LEN + rxd->hdr[1];
   2aa4a:	4a52      	ldr	r2, [pc, #328]	; (2ab94 <apollo3_ble_hci_trans_rx_process+0x1a4>)
   2aa4c:	7893      	ldrb	r3, [r2, #2]
   2aa4e:	3302      	adds	r3, #2
   2aa50:	8113      	strh	r3, [r2, #8]
        if(buf[4] == 0x03 && buf[5] == 0x10 && len == 15) {
   2aa52:	4b51      	ldr	r3, [pc, #324]	; (2ab98 <apollo3_ble_hci_trans_rx_process+0x1a8>)
   2aa54:	791b      	ldrb	r3, [r3, #4]
   2aa56:	2b03      	cmp	r3, #3
   2aa58:	d041      	beq.n	2aade <apollo3_ble_hci_trans_rx_process+0xee>
        if (rxd->buf) {
   2aa5a:	4b4e      	ldr	r3, [pc, #312]	; (2ab94 <apollo3_ble_hci_trans_rx_process+0x1a4>)
   2aa5c:	68d8      	ldr	r0, [r3, #12]
   2aa5e:	2800      	cmp	r0, #0
   2aa60:	d069      	beq.n	2ab36 <apollo3_ble_hci_trans_rx_process+0x146>
            memcpy(rxd->buf, rxd->hdr, rxd->len);
   2aa62:	461c      	mov	r4, r3
   2aa64:	88da      	ldrh	r2, [r3, #6]
   2aa66:	1c59      	adds	r1, r3, #1
   2aa68:	f7f0 f904 	bl	1ac74 <memcpy>
            memcpy(&rxd->buf[rxd->len], &buf[1+rxd->len], rxd->expected_len - rxd->len);
   2aa6c:	68e0      	ldr	r0, [r4, #12]
   2aa6e:	88e3      	ldrh	r3, [r4, #6]
   2aa70:	1c59      	adds	r1, r3, #1
   2aa72:	8922      	ldrh	r2, [r4, #8]
   2aa74:	1ad2      	subs	r2, r2, r3
   2aa76:	4d48      	ldr	r5, [pc, #288]	; (2ab98 <apollo3_ble_hci_trans_rx_process+0x1a8>)
   2aa78:	4429      	add	r1, r5
   2aa7a:	4418      	add	r0, r3
   2aa7c:	f7f0 f8fa 	bl	1ac74 <memcpy>
            rxd->len = rxd->expected_len;
   2aa80:	8923      	ldrh	r3, [r4, #8]
   2aa82:	80e3      	strh	r3, [r4, #6]
            rc = apollo3_ble_hci_api.evt_cb(rxd->buf,
   2aa84:	4b46      	ldr	r3, [pc, #280]	; (2aba0 <apollo3_ble_hci_trans_rx_process+0x1b0>)
   2aa86:	681a      	ldr	r2, [r3, #0]
   2aa88:	6859      	ldr	r1, [r3, #4]
   2aa8a:	68e0      	ldr	r0, [r4, #12]
   2aa8c:	4790      	blx	r2
            if (rc != 0) {
   2aa8e:	2800      	cmp	r0, #0
   2aa90:	d051      	beq.n	2ab36 <apollo3_ble_hci_trans_rx_process+0x146>
                ble_hci_trans_buf_free(rxd->buf);
   2aa92:	68e0      	ldr	r0, [r4, #12]
   2aa94:	f7ff ff5a 	bl	2a94c <ble_hci_trans_buf_free>
   2aa98:	e04d      	b.n	2ab36 <apollo3_ble_hci_trans_rx_process+0x146>
    assert((rxd->type == HCI_PKT_ACL) || (rxd->type == HCI_PKT_EVT));
   2aa9a:	f7e9 fe33 	bl	14704 <hal_debugger_connected>
   2aa9e:	b100      	cbz	r0, 2aaa2 <apollo3_ble_hci_trans_rx_process+0xb2>
   2aaa0:	be01      	bkpt	0x0001
   2aaa2:	2300      	movs	r3, #0
   2aaa4:	461a      	mov	r2, r3
   2aaa6:	4619      	mov	r1, r3
   2aaa8:	4618      	mov	r0, r3
   2aaaa:	f7ee f93b 	bl	18d24 <__assert_func>
            memcpy(&rxd->hdr[rxd->len], &buf[1+rxd->len],1);
   2aaae:	4b3a      	ldr	r3, [pc, #232]	; (2ab98 <apollo3_ble_hci_trans_rx_process+0x1a8>)
   2aab0:	78db      	ldrb	r3, [r3, #3]
   2aab2:	4a38      	ldr	r2, [pc, #224]	; (2ab94 <apollo3_ble_hci_trans_rx_process+0x1a4>)
   2aab4:	70d3      	strb	r3, [r2, #3]
            rxd->len++;
   2aab6:	2103      	movs	r1, #3
   2aab8:	80d1      	strh	r1, [r2, #6]
            if ((rxd->hdr[2] == BLE_HCI_LE_SUBEV_ADV_RPT) ||
   2aaba:	2b02      	cmp	r3, #2
   2aabc:	d003      	beq.n	2aac6 <apollo3_ble_hci_trans_rx_process+0xd6>
   2aabe:	2b0d      	cmp	r3, #13
   2aac0:	d003      	beq.n	2aaca <apollo3_ble_hci_trans_rx_process+0xda>
    int pool = BLE_HCI_TRANS_BUF_EVT_HI;
   2aac2:	2402      	movs	r4, #2
   2aac4:	e7ba      	b.n	2aa3c <apollo3_ble_hci_trans_rx_process+0x4c>
                pool = BLE_HCI_TRANS_BUF_EVT_LO;
   2aac6:	2401      	movs	r4, #1
   2aac8:	e7b8      	b.n	2aa3c <apollo3_ble_hci_trans_rx_process+0x4c>
   2aaca:	2401      	movs	r4, #1
   2aacc:	e7b6      	b.n	2aa3c <apollo3_ble_hci_trans_rx_process+0x4c>
            if (pool != BLE_HCI_TRANS_BUF_EVT_LO) {
   2aace:	2c01      	cmp	r4, #1
   2aad0:	d0bb      	beq.n	2aa4a <apollo3_ble_hci_trans_rx_process+0x5a>
                rxd->buf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_LO);
   2aad2:	2001      	movs	r0, #1
   2aad4:	f7ff ff16 	bl	2a904 <ble_hci_trans_buf_alloc>
   2aad8:	4b2e      	ldr	r3, [pc, #184]	; (2ab94 <apollo3_ble_hci_trans_rx_process+0x1a4>)
   2aada:	60d8      	str	r0, [r3, #12]
   2aadc:	e7b5      	b.n	2aa4a <apollo3_ble_hci_trans_rx_process+0x5a>
        if(buf[4] == 0x03 && buf[5] == 0x10 && len == 15) {
   2aade:	4b2e      	ldr	r3, [pc, #184]	; (2ab98 <apollo3_ble_hci_trans_rx_process+0x1a8>)
   2aae0:	795b      	ldrb	r3, [r3, #5]
   2aae2:	2b10      	cmp	r3, #16
   2aae4:	d1b9      	bne.n	2aa5a <apollo3_ble_hci_trans_rx_process+0x6a>
   2aae6:	9b01      	ldr	r3, [sp, #4]
   2aae8:	2b0f      	cmp	r3, #15
   2aaea:	d1b6      	bne.n	2aa5a <apollo3_ble_hci_trans_rx_process+0x6a>
            memset(&buf[11], 0x60, sizeof(uint8_t));
   2aaec:	4b2a      	ldr	r3, [pc, #168]	; (2ab98 <apollo3_ble_hci_trans_rx_process+0x1a8>)
   2aaee:	2260      	movs	r2, #96	; 0x60
   2aaf0:	72da      	strb	r2, [r3, #11]
   2aaf2:	e7b2      	b.n	2aa5a <apollo3_ble_hci_trans_rx_process+0x6a>
        rxd->len = HCI_ACL_HDR_LEN;
   2aaf4:	4c27      	ldr	r4, [pc, #156]	; (2ab94 <apollo3_ble_hci_trans_rx_process+0x1a4>)
   2aaf6:	2304      	movs	r3, #4
   2aaf8:	80e3      	strh	r3, [r4, #6]
        memcpy(rxd->hdr, &buf[1], rxd->len);
   2aafa:	4b27      	ldr	r3, [pc, #156]	; (2ab98 <apollo3_ble_hci_trans_rx_process+0x1a8>)
   2aafc:	f8d3 3001 	ldr.w	r3, [r3, #1]
   2ab00:	f8c4 3001 	str.w	r3, [r4, #1]
        rxd->om = os_mbuf_get_pkthdr(&apollo3_ble_hci_pool_acl_mbuf,
   2ab04:	2110      	movs	r1, #16
   2ab06:	4827      	ldr	r0, [pc, #156]	; (2aba4 <apollo3_ble_hci_trans_rx_process+0x1b4>)
   2ab08:	f7ee fd5e 	bl	195c8 <os_mbuf_get_pkthdr>
   2ab0c:	60e0      	str	r0, [r4, #12]
        if (!rxd->om) {
   2ab0e:	b1a0      	cbz	r0, 2ab3a <apollo3_ble_hci_trans_rx_process+0x14a>
        os_mbuf_append(rxd->om, rxd->hdr, rxd->len);
   2ab10:	4c20      	ldr	r4, [pc, #128]	; (2ab94 <apollo3_ble_hci_trans_rx_process+0x1a4>)
   2ab12:	88e2      	ldrh	r2, [r4, #6]
   2ab14:	1c61      	adds	r1, r4, #1
   2ab16:	f7ee fd8a 	bl	1962e <os_mbuf_append>
        rxd->expected_len = get_le16(&rxd->hdr[2]) + HCI_ACL_HDR_LEN;
   2ab1a:	1ce0      	adds	r0, r4, #3
   2ab1c:	f7ee f97e 	bl	18e1c <get_le16>
   2ab20:	1d02      	adds	r2, r0, #4
   2ab22:	b292      	uxth	r2, r2
   2ab24:	8122      	strh	r2, [r4, #8]
        if (rxd->len != rxd->expected_len) {
   2ab26:	88e3      	ldrh	r3, [r4, #6]
   2ab28:	429a      	cmp	r2, r3
   2ab2a:	d110      	bne.n	2ab4e <apollo3_ble_hci_trans_rx_process+0x15e>
        if (rxd->len == rxd->expected_len) {
   2ab2c:	4b19      	ldr	r3, [pc, #100]	; (2ab94 <apollo3_ble_hci_trans_rx_process+0x1a4>)
   2ab2e:	88da      	ldrh	r2, [r3, #6]
   2ab30:	891b      	ldrh	r3, [r3, #8]
   2ab32:	429a      	cmp	r2, r3
   2ab34:	d016      	beq.n	2ab64 <apollo3_ble_hci_trans_rx_process+0x174>
}
   2ab36:	b003      	add	sp, #12
   2ab38:	bd30      	pop	{r4, r5, pc}
            assert(0);
   2ab3a:	f7e9 fde3 	bl	14704 <hal_debugger_connected>
   2ab3e:	b100      	cbz	r0, 2ab42 <apollo3_ble_hci_trans_rx_process+0x152>
   2ab40:	be01      	bkpt	0x0001
   2ab42:	2300      	movs	r3, #0
   2ab44:	461a      	mov	r2, r3
   2ab46:	4619      	mov	r1, r3
   2ab48:	4618      	mov	r0, r3
   2ab4a:	f7ee f8eb 	bl	18d24 <__assert_func>
            os_mbuf_append(rxd->om, &buf[1+rxd->len], rxd->expected_len - rxd->len);
   2ab4e:	1c59      	adds	r1, r3, #1
   2ab50:	1ad2      	subs	r2, r2, r3
   2ab52:	b292      	uxth	r2, r2
   2ab54:	4b10      	ldr	r3, [pc, #64]	; (2ab98 <apollo3_ble_hci_trans_rx_process+0x1a8>)
   2ab56:	4419      	add	r1, r3
   2ab58:	68e0      	ldr	r0, [r4, #12]
   2ab5a:	f7ee fd68 	bl	1962e <os_mbuf_append>
            rxd->len = rxd->expected_len;
   2ab5e:	8923      	ldrh	r3, [r4, #8]
   2ab60:	80e3      	strh	r3, [r4, #6]
   2ab62:	e7e3      	b.n	2ab2c <apollo3_ble_hci_trans_rx_process+0x13c>
            rc = apollo3_ble_hci_api.acl_cb(rxd->om, apollo3_ble_hci_api.acl_arg);
   2ab64:	4b0e      	ldr	r3, [pc, #56]	; (2aba0 <apollo3_ble_hci_trans_rx_process+0x1b0>)
   2ab66:	689a      	ldr	r2, [r3, #8]
   2ab68:	68d9      	ldr	r1, [r3, #12]
   2ab6a:	4b0a      	ldr	r3, [pc, #40]	; (2ab94 <apollo3_ble_hci_trans_rx_process+0x1a4>)
   2ab6c:	68d8      	ldr	r0, [r3, #12]
   2ab6e:	4790      	blx	r2
            if (rc != 0) {
   2ab70:	2800      	cmp	r0, #0
   2ab72:	d0e0      	beq.n	2ab36 <apollo3_ble_hci_trans_rx_process+0x146>
                os_mbuf_free_chain(rxd->om);
   2ab74:	4b07      	ldr	r3, [pc, #28]	; (2ab94 <apollo3_ble_hci_trans_rx_process+0x1a4>)
   2ab76:	68d8      	ldr	r0, [r3, #12]
   2ab78:	f7ee fd49 	bl	1960e <os_mbuf_free_chain>
   2ab7c:	e7db      	b.n	2ab36 <apollo3_ble_hci_trans_rx_process+0x146>
        assert(0);
   2ab7e:	f7e9 fdc1 	bl	14704 <hal_debugger_connected>
   2ab82:	b100      	cbz	r0, 2ab86 <apollo3_ble_hci_trans_rx_process+0x196>
   2ab84:	be01      	bkpt	0x0001
   2ab86:	2300      	movs	r3, #0
   2ab88:	461a      	mov	r2, r3
   2ab8a:	4619      	mov	r1, r3
   2ab8c:	4618      	mov	r0, r3
   2ab8e:	f7ee f8c9 	bl	18d24 <__assert_func>
   2ab92:	bf00      	nop
   2ab94:	10006e0c 	.word	0x10006e0c
   2ab98:	10006e24 	.word	0x10006e24
   2ab9c:	100064f0 	.word	0x100064f0
   2aba0:	100064f4 	.word	0x100064f4
   2aba4:	100069d8 	.word	0x100069d8

0002aba8 <apollo3_hci_int>:
{
   2aba8:	b538      	push	{r3, r4, r5, lr}
    uint32_t ui32Status = am_hal_ble_int_status(BLE, true);
   2abaa:	4d11      	ldr	r5, [pc, #68]	; (2abf0 <apollo3_hci_int+0x48>)
   2abac:	2101      	movs	r1, #1
   2abae:	6828      	ldr	r0, [r5, #0]
   2abb0:	f002 f918 	bl	2cde4 <am_hal_ble_int_status>
   2abb4:	4604      	mov	r4, r0
    am_hal_ble_int_clear(BLE, ui32Status);
   2abb6:	4601      	mov	r1, r0
   2abb8:	6828      	ldr	r0, [r5, #0]
   2abba:	f002 f921 	bl	2ce00 <am_hal_ble_int_clear>
    am_hal_ble_int_service(BLE, ui32Status);
   2abbe:	4621      	mov	r1, r4
   2abc0:	6828      	ldr	r0, [r5, #0]
   2abc2:	f002 f867 	bl	2cc94 <am_hal_ble_int_service>
    if (ui32Status & AM_HAL_BLE_INT_BLECIRQ)
   2abc6:	f014 0f80 	tst.w	r4, #128	; 0x80
   2abca:	d006      	beq.n	2abda <apollo3_hci_int+0x32>
        am_hal_ble_wakeup_set(BLE, 0);
   2abcc:	2100      	movs	r1, #0
   2abce:	6828      	ldr	r0, [r5, #0]
   2abd0:	f001 f9fe 	bl	2bfd0 <am_hal_ble_wakeup_set>
        apollo3_ble_hci_trans_rx_process();
   2abd4:	f7ff ff0c 	bl	2a9f0 <apollo3_ble_hci_trans_rx_process>
}
   2abd8:	bd38      	pop	{r3, r4, r5, pc}
        assert(0);
   2abda:	f7e9 fd93 	bl	14704 <hal_debugger_connected>
   2abde:	b100      	cbz	r0, 2abe2 <apollo3_hci_int+0x3a>
   2abe0:	be01      	bkpt	0x0001
   2abe2:	2300      	movs	r3, #0
   2abe4:	461a      	mov	r2, r3
   2abe6:	4619      	mov	r1, r3
   2abe8:	4618      	mov	r0, r3
   2abea:	f7ee f89b 	bl	18d24 <__assert_func>
   2abee:	bf00      	nop
   2abf0:	100064f0 	.word	0x100064f0

0002abf4 <ble_hci_trans_hs_cmd_tx>:
{
   2abf4:	b510      	push	{r4, lr}
   2abf6:	4604      	mov	r4, r0
    int len = HCI_CMD_HDR_LEN + cmd[2];
   2abf8:	7881      	ldrb	r1, [r0, #2]
    rc = apollo3_hci_write(HCI_PKT_CMD, len, cmd);
   2abfa:	4602      	mov	r2, r0
   2abfc:	3103      	adds	r1, #3
   2abfe:	2001      	movs	r0, #1
   2ac00:	f7ff fe2c 	bl	2a85c <apollo3_hci_write>
    ble_hci_trans_buf_free(cmd);
   2ac04:	4620      	mov	r0, r4
   2ac06:	f7ff fea1 	bl	2a94c <ble_hci_trans_buf_free>
}
   2ac0a:	2000      	movs	r0, #0
   2ac0c:	bd10      	pop	{r4, pc}
	...

0002ac10 <apollo3_ble_hci_init>:
    return 0;
}

void
apollo3_ble_hci_init(void)
{
   2ac10:	b510      	push	{r4, lr}
   2ac12:	b082      	sub	sp, #8
    int rc;

    SYSINIT_ASSERT_ACTIVE();
   2ac14:	4b45      	ldr	r3, [pc, #276]	; (2ad2c <apollo3_ble_hci_init+0x11c>)
   2ac16:	781b      	ldrb	r3, [r3, #0]
   2ac18:	2b00      	cmp	r3, #0
   2ac1a:	d03b      	beq.n	2ac94 <apollo3_ble_hci_init+0x84>

    rc = os_mempool_ext_init(&apollo3_ble_hci_pool_acl,
   2ac1c:	4b44      	ldr	r3, [pc, #272]	; (2ad30 <apollo3_ble_hci_init+0x120>)
   2ac1e:	9300      	str	r3, [sp, #0]
   2ac20:	4b44      	ldr	r3, [pc, #272]	; (2ad34 <apollo3_ble_hci_init+0x124>)
   2ac22:	f44f 7296 	mov.w	r2, #300	; 0x12c
   2ac26:	2104      	movs	r1, #4
   2ac28:	4843      	ldr	r0, [pc, #268]	; (2ad38 <apollo3_ble_hci_init+0x128>)
   2ac2a:	f7ef f8f5 	bl	19e18 <os_mempool_ext_init>
                             MYNEWT_VAL(BLE_ACL_BUF_COUNT), POOL_ACL_BLOCK_SIZE,
                             apollo3_ble_hci_pool_acl_buf,
                             "apollo3_ble_hci_pool_acl");
    SYSINIT_PANIC_ASSERT(rc == 0);
   2ac2e:	2800      	cmp	r0, #0
   2ac30:	d13a      	bne.n	2aca8 <apollo3_ble_hci_init+0x98>

    rc = os_mbuf_pool_init(&apollo3_ble_hci_pool_acl_mbuf,
   2ac32:	2304      	movs	r3, #4
   2ac34:	f44f 7296 	mov.w	r2, #300	; 0x12c
   2ac38:	493f      	ldr	r1, [pc, #252]	; (2ad38 <apollo3_ble_hci_init+0x128>)
   2ac3a:	4840      	ldr	r0, [pc, #256]	; (2ad3c <apollo3_ble_hci_init+0x12c>)
   2ac3c:	f7ee fca8 	bl	19590 <os_mbuf_pool_init>
                           &apollo3_ble_hci_pool_acl.mpe_mp, POOL_ACL_BLOCK_SIZE,
                           MYNEWT_VAL(BLE_ACL_BUF_COUNT));
    SYSINIT_PANIC_ASSERT(rc == 0);
   2ac40:	2800      	cmp	r0, #0
   2ac42:	d13e      	bne.n	2acc2 <apollo3_ble_hci_init+0xb2>

    rc = os_mempool_init(&apollo3_ble_hci_pool_evt_hi,
   2ac44:	4b3e      	ldr	r3, [pc, #248]	; (2ad40 <apollo3_ble_hci_init+0x130>)
   2ac46:	9300      	str	r3, [sp, #0]
   2ac48:	4b3e      	ldr	r3, [pc, #248]	; (2ad44 <apollo3_ble_hci_init+0x134>)
   2ac4a:	2246      	movs	r2, #70	; 0x46
   2ac4c:	2102      	movs	r1, #2
   2ac4e:	483e      	ldr	r0, [pc, #248]	; (2ad48 <apollo3_ble_hci_init+0x138>)
   2ac50:	f7ef f8d8 	bl	19e04 <os_mempool_init>
                         MYNEWT_VAL(BLE_HCI_EVT_HI_BUF_COUNT),
                         MYNEWT_VAL(BLE_HCI_EVT_BUF_SIZE),
                         apollo3_ble_hci_pool_evt_hi_buf,
                         "apollo3_ble_hci_pool_evt_hi");
    SYSINIT_PANIC_ASSERT(rc == 0);
   2ac54:	2800      	cmp	r0, #0
   2ac56:	d141      	bne.n	2acdc <apollo3_ble_hci_init+0xcc>

    rc = os_mempool_init(&apollo3_ble_hci_pool_evt_lo,
   2ac58:	4b3c      	ldr	r3, [pc, #240]	; (2ad4c <apollo3_ble_hci_init+0x13c>)
   2ac5a:	9300      	str	r3, [sp, #0]
   2ac5c:	4b3c      	ldr	r3, [pc, #240]	; (2ad50 <apollo3_ble_hci_init+0x140>)
   2ac5e:	2246      	movs	r2, #70	; 0x46
   2ac60:	2108      	movs	r1, #8
   2ac62:	483c      	ldr	r0, [pc, #240]	; (2ad54 <apollo3_ble_hci_init+0x144>)
   2ac64:	f7ef f8ce 	bl	19e04 <os_mempool_init>
                         MYNEWT_VAL(BLE_HCI_EVT_LO_BUF_COUNT),
                         MYNEWT_VAL(BLE_HCI_EVT_BUF_SIZE),
                         apollo3_ble_hci_pool_evt_lo_buf,
                         "apollo3_ble_hci_pool_evt_lo");
    SYSINIT_PANIC_ASSERT(rc == 0);
   2ac68:	2800      	cmp	r0, #0
   2ac6a:	d144      	bne.n	2acf6 <apollo3_ble_hci_init+0xe6>

    rc = os_mempool_init(&apollo3_ble_hci_pool_cmd_mempool,
   2ac6c:	4b3a      	ldr	r3, [pc, #232]	; (2ad58 <apollo3_ble_hci_init+0x148>)
   2ac6e:	9300      	str	r3, [sp, #0]
   2ac70:	4b3a      	ldr	r3, [pc, #232]	; (2ad5c <apollo3_ble_hci_init+0x14c>)
   2ac72:	f44f 7282 	mov.w	r2, #260	; 0x104
   2ac76:	2101      	movs	r1, #1
   2ac78:	4839      	ldr	r0, [pc, #228]	; (2ad60 <apollo3_ble_hci_init+0x150>)
   2ac7a:	f7ef f8c3 	bl	19e04 <os_mempool_init>
                         HCI_CMD_COUNT, BLE_HCI_TRANS_CMD_SZ,
                         apollo3_ble_hci_pool_cmd_mempool_buf,
                         "apollo3_ble_hci_pool_cmd_mempool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   2ac7e:	2800      	cmp	r0, #0
   2ac80:	d146      	bne.n	2ad10 <apollo3_ble_hci_init+0x100>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   2ac82:	4b38      	ldr	r3, [pc, #224]	; (2ad64 <apollo3_ble_hci_init+0x154>)
   2ac84:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   2ac86:	4a38      	ldr	r2, [pc, #224]	; (2ad68 <apollo3_ble_hci_init+0x158>)
   2ac88:	671a      	str	r2, [r3, #112]	; 0x70

    /* Enable interrupt to handle read based on BLECIRQ */
    NVIC_SetVector(BLE_IRQn, (uint32_t)apollo3_hci_int);

    /* Initial coldboot configuration */
    apollo3_hci_radio_boot(1);
   2ac8a:	2001      	movs	r0, #1
   2ac8c:	f7ff fd42 	bl	2a714 <apollo3_hci_radio_boot>
}
   2ac90:	b002      	add	sp, #8
   2ac92:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   2ac94:	f7e9 fd36 	bl	14704 <hal_debugger_connected>
   2ac98:	b100      	cbz	r0, 2ac9c <apollo3_ble_hci_init+0x8c>
   2ac9a:	be01      	bkpt	0x0001
   2ac9c:	2300      	movs	r3, #0
   2ac9e:	461a      	mov	r2, r3
   2aca0:	4619      	mov	r1, r3
   2aca2:	4618      	mov	r0, r3
   2aca4:	f7ee f83e 	bl	18d24 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2aca8:	f7e9 fd2c 	bl	14704 <hal_debugger_connected>
   2acac:	b100      	cbz	r0, 2acb0 <apollo3_ble_hci_init+0xa0>
   2acae:	be01      	bkpt	0x0001
   2acb0:	2000      	movs	r0, #0
   2acb2:	9000      	str	r0, [sp, #0]
   2acb4:	4b2d      	ldr	r3, [pc, #180]	; (2ad6c <apollo3_ble_hci_init+0x15c>)
   2acb6:	681c      	ldr	r4, [r3, #0]
   2acb8:	4603      	mov	r3, r0
   2acba:	4602      	mov	r2, r0
   2acbc:	4601      	mov	r1, r0
   2acbe:	47a0      	blx	r4
   2acc0:	e7b7      	b.n	2ac32 <apollo3_ble_hci_init+0x22>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2acc2:	f7e9 fd1f 	bl	14704 <hal_debugger_connected>
   2acc6:	b100      	cbz	r0, 2acca <apollo3_ble_hci_init+0xba>
   2acc8:	be01      	bkpt	0x0001
   2acca:	2000      	movs	r0, #0
   2accc:	9000      	str	r0, [sp, #0]
   2acce:	4b27      	ldr	r3, [pc, #156]	; (2ad6c <apollo3_ble_hci_init+0x15c>)
   2acd0:	681c      	ldr	r4, [r3, #0]
   2acd2:	4603      	mov	r3, r0
   2acd4:	4602      	mov	r2, r0
   2acd6:	4601      	mov	r1, r0
   2acd8:	47a0      	blx	r4
   2acda:	e7b3      	b.n	2ac44 <apollo3_ble_hci_init+0x34>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2acdc:	f7e9 fd12 	bl	14704 <hal_debugger_connected>
   2ace0:	b100      	cbz	r0, 2ace4 <apollo3_ble_hci_init+0xd4>
   2ace2:	be01      	bkpt	0x0001
   2ace4:	2000      	movs	r0, #0
   2ace6:	9000      	str	r0, [sp, #0]
   2ace8:	4b20      	ldr	r3, [pc, #128]	; (2ad6c <apollo3_ble_hci_init+0x15c>)
   2acea:	681c      	ldr	r4, [r3, #0]
   2acec:	4603      	mov	r3, r0
   2acee:	4602      	mov	r2, r0
   2acf0:	4601      	mov	r1, r0
   2acf2:	47a0      	blx	r4
   2acf4:	e7b0      	b.n	2ac58 <apollo3_ble_hci_init+0x48>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2acf6:	f7e9 fd05 	bl	14704 <hal_debugger_connected>
   2acfa:	b100      	cbz	r0, 2acfe <apollo3_ble_hci_init+0xee>
   2acfc:	be01      	bkpt	0x0001
   2acfe:	2000      	movs	r0, #0
   2ad00:	9000      	str	r0, [sp, #0]
   2ad02:	4b1a      	ldr	r3, [pc, #104]	; (2ad6c <apollo3_ble_hci_init+0x15c>)
   2ad04:	681c      	ldr	r4, [r3, #0]
   2ad06:	4603      	mov	r3, r0
   2ad08:	4602      	mov	r2, r0
   2ad0a:	4601      	mov	r1, r0
   2ad0c:	47a0      	blx	r4
   2ad0e:	e7ad      	b.n	2ac6c <apollo3_ble_hci_init+0x5c>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2ad10:	f7e9 fcf8 	bl	14704 <hal_debugger_connected>
   2ad14:	b100      	cbz	r0, 2ad18 <apollo3_ble_hci_init+0x108>
   2ad16:	be01      	bkpt	0x0001
   2ad18:	2000      	movs	r0, #0
   2ad1a:	9000      	str	r0, [sp, #0]
   2ad1c:	4b13      	ldr	r3, [pc, #76]	; (2ad6c <apollo3_ble_hci_init+0x15c>)
   2ad1e:	681c      	ldr	r4, [r3, #0]
   2ad20:	4603      	mov	r3, r0
   2ad22:	4602      	mov	r2, r0
   2ad24:	4601      	mov	r1, r0
   2ad26:	47a0      	blx	r4
   2ad28:	e7ab      	b.n	2ac82 <apollo3_ble_hci_init+0x72>
   2ad2a:	bf00      	nop
   2ad2c:	100055a0 	.word	0x100055a0
   2ad30:	000351d4 	.word	0x000351d4
   2ad34:	10006528 	.word	0x10006528
   2ad38:	10006504 	.word	0x10006504
   2ad3c:	100069d8 	.word	0x100069d8
   2ad40:	000351f0 	.word	0x000351f0
   2ad44:	10006b20 	.word	0x10006b20
   2ad48:	10006b04 	.word	0x10006b04
   2ad4c:	0003520c 	.word	0x0003520c
   2ad50:	10006bcc 	.word	0x10006bcc
   2ad54:	10006bb0 	.word	0x10006bb0
   2ad58:	00035228 	.word	0x00035228
   2ad5c:	10006a00 	.word	0x10006a00
   2ad60:	100069e4 	.word	0x100069e4
   2ad64:	e000ed00 	.word	0xe000ed00
   2ad68:	0002aba9 	.word	0x0002aba9
   2ad6c:	100006b4 	.word	0x100006b4

0002ad70 <cbuf_buf_reader_get8>:

static uint8_t
cbuf_buf_reader_get8(struct cbor_decoder_reader *d, int offset)
{
    struct cbor_buf_reader *cb = (struct cbor_buf_reader *) d;
    return cb->buffer[offset];
   2ad70:	69c3      	ldr	r3, [r0, #28]
}
   2ad72:	5c58      	ldrb	r0, [r3, r1]
   2ad74:	4770      	bx	lr

0002ad76 <cbor_buf_reader_cpy>:
}

static uintptr_t
cbor_buf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int src_offset,
                    size_t len)
{
   2ad76:	b510      	push	{r4, lr}
   2ad78:	4604      	mov	r4, r0
   2ad7a:	4608      	mov	r0, r1
   2ad7c:	4611      	mov	r1, r2
    struct cbor_buf_reader *cb = (struct cbor_buf_reader *) d;
    return (uintptr_t) memcpy(dst, cb->buffer + src_offset, len);
   2ad7e:	69e4      	ldr	r4, [r4, #28]
   2ad80:	461a      	mov	r2, r3
   2ad82:	4421      	add	r1, r4
   2ad84:	f7ef ff76 	bl	1ac74 <memcpy>
}
   2ad88:	bd10      	pop	{r4, pc}

0002ad8a <cbor_buf_reader_cmp>:
{
   2ad8a:	b510      	push	{r4, lr}
   2ad8c:	4604      	mov	r4, r0
   2ad8e:	4608      	mov	r0, r1
   2ad90:	4611      	mov	r1, r2
    return memcmp(dst, cb->buffer + src_offset, len) == 0;
   2ad92:	69e4      	ldr	r4, [r4, #28]
   2ad94:	461a      	mov	r2, r3
   2ad96:	4421      	add	r1, r4
   2ad98:	f7ef ff48 	bl	1ac2c <memcmp>
}
   2ad9c:	fab0 f080 	clz	r0, r0
   2ada0:	0940      	lsrs	r0, r0, #5
   2ada2:	bd10      	pop	{r4, pc}

0002ada4 <cbuf_buf_reader_get64>:
{
   2ada4:	b410      	push	{r4}
   2ada6:	b083      	sub	sp, #12
    return get64(cb->buffer + offset);
   2ada8:	69c2      	ldr	r2, [r0, #28]
   2adaa:	1854      	adds	r4, r2, r1
}

static inline uint64_t get64(const uint8_t *ptr)
{
    uint64_t result;
    memcpy(&result, ptr, sizeof(result));
   2adac:	466b      	mov	r3, sp
   2adae:	5850      	ldr	r0, [r2, r1]
   2adb0:	6861      	ldr	r1, [r4, #4]
   2adb2:	c303      	stmia	r3!, {r0, r1}
}
   2adb4:	ba08      	rev	r0, r1
   2adb6:	9900      	ldr	r1, [sp, #0]
   2adb8:	ba09      	rev	r1, r1
   2adba:	b003      	add	sp, #12
   2adbc:	bc10      	pop	{r4}
   2adbe:	4770      	bx	lr

0002adc0 <cbuf_buf_reader_get32>:
    val = get32(cb->buffer + offset);
   2adc0:	69c3      	ldr	r3, [r0, #28]
    return cbor_ntohl(result);
   2adc2:	5858      	ldr	r0, [r3, r1]
}
   2adc4:	ba00      	rev	r0, r0
   2adc6:	4770      	bx	lr

0002adc8 <cbuf_buf_reader_get16>:
    return get16(cb->buffer + offset);
   2adc8:	69c3      	ldr	r3, [r0, #28]
    return cbor_ntohs(result);
   2adca:	5a58      	ldrh	r0, [r3, r1]
   2adcc:	ba40      	rev16	r0, r0
}
   2adce:	b280      	uxth	r0, r0
   2add0:	4770      	bx	lr
	...

0002add4 <cbor_buf_reader_init>:

void
cbor_buf_reader_init(struct cbor_buf_reader *cb, const uint8_t *buffer,
                     size_t data)
{
    cb->buffer = buffer;
   2add4:	61c1      	str	r1, [r0, #28]
    cb->r.get8 = &cbuf_buf_reader_get8;
   2add6:	4b07      	ldr	r3, [pc, #28]	; (2adf4 <cbor_buf_reader_init+0x20>)
   2add8:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbuf_buf_reader_get16;
   2adda:	4b07      	ldr	r3, [pc, #28]	; (2adf8 <cbor_buf_reader_init+0x24>)
   2addc:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbuf_buf_reader_get32;
   2adde:	4b07      	ldr	r3, [pc, #28]	; (2adfc <cbor_buf_reader_init+0x28>)
   2ade0:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbuf_buf_reader_get64;
   2ade2:	4b07      	ldr	r3, [pc, #28]	; (2ae00 <cbor_buf_reader_init+0x2c>)
   2ade4:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_buf_reader_cmp;
   2ade6:	4b07      	ldr	r3, [pc, #28]	; (2ae04 <cbor_buf_reader_init+0x30>)
   2ade8:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_buf_reader_cpy;
   2adea:	4b07      	ldr	r3, [pc, #28]	; (2ae08 <cbor_buf_reader_init+0x34>)
   2adec:	6143      	str	r3, [r0, #20]
    cb->r.message_size = data;
   2adee:	6182      	str	r2, [r0, #24]
}
   2adf0:	4770      	bx	lr
   2adf2:	bf00      	nop
   2adf4:	0002ad71 	.word	0x0002ad71
   2adf8:	0002adc9 	.word	0x0002adc9
   2adfc:	0002adc1 	.word	0x0002adc1
   2ae00:	0002ada5 	.word	0x0002ada5
   2ae04:	0002ad8b 	.word	0x0002ad8b
   2ae08:	0002ad77 	.word	0x0002ad77

0002ae0c <is_fixed_type>:
    return CborNoError;
}

static bool is_fixed_type(uint8_t type)
{
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   2ae0c:	2860      	cmp	r0, #96	; 0x60
   2ae0e:	d009      	beq.n	2ae24 <is_fixed_type+0x18>
   2ae10:	2840      	cmp	r0, #64	; 0x40
   2ae12:	d009      	beq.n	2ae28 <is_fixed_type+0x1c>
   2ae14:	2880      	cmp	r0, #128	; 0x80
   2ae16:	d009      	beq.n	2ae2c <is_fixed_type+0x20>
   2ae18:	28a0      	cmp	r0, #160	; 0xa0
   2ae1a:	d001      	beq.n	2ae20 <is_fixed_type+0x14>
   2ae1c:	2001      	movs	r0, #1
           type != CborMapType;
}
   2ae1e:	4770      	bx	lr
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   2ae20:	2000      	movs	r0, #0
   2ae22:	4770      	bx	lr
   2ae24:	2000      	movs	r0, #0
   2ae26:	4770      	bx	lr
   2ae28:	2000      	movs	r0, #0
   2ae2a:	4770      	bx	lr
   2ae2c:	2000      	movs	r0, #0
   2ae2e:	4770      	bx	lr

0002ae30 <iterate_noop>:
    (void)d;
    (void)dst;
    (void)src_offset;
    (void)len;
    return true;
}
   2ae30:	2001      	movs	r0, #1
   2ae32:	4770      	bx	lr

0002ae34 <preparse_value>:
{
   2ae34:	b570      	push	{r4, r5, r6, lr}
    const CborParser *parser = it->parser;
   2ae36:	6805      	ldr	r5, [r0, #0]
    it->type = CborInvalidType;
   2ae38:	23ff      	movs	r3, #255	; 0xff
   2ae3a:	7383      	strb	r3, [r0, #14]
    if (it->offset == parser->end)
   2ae3c:	6841      	ldr	r1, [r0, #4]
   2ae3e:	686b      	ldr	r3, [r5, #4]
   2ae40:	4299      	cmp	r1, r3
   2ae42:	f000 808d 	beq.w	2af60 <preparse_value+0x12c>
   2ae46:	4604      	mov	r4, r0
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
   2ae48:	6828      	ldr	r0, [r5, #0]
   2ae4a:	6803      	ldr	r3, [r0, #0]
   2ae4c:	4798      	blx	r3
    uint8_t type = descriptor & MajorTypeMask;
   2ae4e:	f000 06e0 	and.w	r6, r0, #224	; 0xe0
    it->type = type;
   2ae52:	73a6      	strb	r6, [r4, #14]
    it->flags = 0;
   2ae54:	2300      	movs	r3, #0
   2ae56:	73e3      	strb	r3, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
   2ae58:	f000 031f 	and.w	r3, r0, #31
   2ae5c:	81a3      	strh	r3, [r4, #12]
    if (descriptor > Value64Bit) {
   2ae5e:	2b1b      	cmp	r3, #27
   2ae60:	d91d      	bls.n	2ae9e <preparse_value+0x6a>
        if (unlikely(descriptor != IndefiniteLength))
   2ae62:	2b1f      	cmp	r3, #31
   2ae64:	d10b      	bne.n	2ae7e <preparse_value+0x4a>
        if (likely(!is_fixed_type(type))) {
   2ae66:	4630      	mov	r0, r6
   2ae68:	f7ff ffd0 	bl	2ae0c <is_fixed_type>
   2ae6c:	f080 0001 	eor.w	r0, r0, #1
   2ae70:	f010 0fff 	tst.w	r0, #255	; 0xff
   2ae74:	d00b      	beq.n	2ae8e <preparse_value+0x5a>
            it->flags |= CborIteratorFlag_UnknownLength;
   2ae76:	2304      	movs	r3, #4
   2ae78:	73e3      	strb	r3, [r4, #15]
            return CborNoError;
   2ae7a:	2000      	movs	r0, #0
}
   2ae7c:	bd70      	pop	{r4, r5, r6, pc}
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
   2ae7e:	2ee0      	cmp	r6, #224	; 0xe0
   2ae80:	d002      	beq.n	2ae88 <preparse_value+0x54>
   2ae82:	f240 1005 	movw	r0, #261	; 0x105
   2ae86:	e7f9      	b.n	2ae7c <preparse_value+0x48>
   2ae88:	f240 1003 	movw	r0, #259	; 0x103
   2ae8c:	e7f6      	b.n	2ae7c <preparse_value+0x48>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
   2ae8e:	2ee0      	cmp	r6, #224	; 0xe0
   2ae90:	d002      	beq.n	2ae98 <preparse_value+0x64>
   2ae92:	f240 1005 	movw	r0, #261	; 0x105
   2ae96:	e7f1      	b.n	2ae7c <preparse_value+0x48>
   2ae98:	f44f 7081 	mov.w	r0, #258	; 0x102
   2ae9c:	e7ee      	b.n	2ae7c <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   2ae9e:	2b17      	cmp	r3, #23
   2aea0:	d91a      	bls.n	2aed8 <preparse_value+0xa4>
   2aea2:	f1a3 0118 	sub.w	r1, r3, #24
   2aea6:	2201      	movs	r2, #1
   2aea8:	408a      	lsls	r2, r1
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
   2aeaa:	3201      	adds	r2, #1
   2aeac:	6868      	ldr	r0, [r5, #4]
   2aeae:	6861      	ldr	r1, [r4, #4]
   2aeb0:	1a40      	subs	r0, r0, r1
   2aeb2:	4282      	cmp	r2, r0
   2aeb4:	d857      	bhi.n	2af66 <preparse_value+0x132>
    uint8_t majortype = type >> MajorTypeShift;
   2aeb6:	0972      	lsrs	r2, r6, #5
    if (majortype == NegativeIntegerType) {
   2aeb8:	2e20      	cmp	r6, #32
   2aeba:	d00f      	beq.n	2aedc <preparse_value+0xa8>
    } else if (majortype == SimpleTypesType) {
   2aebc:	2a07      	cmp	r2, #7
   2aebe:	d012      	beq.n	2aee6 <preparse_value+0xb2>
    if (descriptor < Value8Bit)
   2aec0:	2b17      	cmp	r3, #23
   2aec2:	d953      	bls.n	2af6c <preparse_value+0x138>
    if (descriptor == Value8Bit)
   2aec4:	2b18      	cmp	r3, #24
   2aec6:	d03d      	beq.n	2af44 <preparse_value+0x110>
    else if (descriptor == Value16Bit)
   2aec8:	2b19      	cmp	r3, #25
   2aeca:	d042      	beq.n	2af52 <preparse_value+0x11e>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   2aecc:	7be3      	ldrb	r3, [r4, #15]
   2aece:	f043 0301 	orr.w	r3, r3, #1
   2aed2:	73e3      	strb	r3, [r4, #15]
    return CborNoError;
   2aed4:	2000      	movs	r0, #0
   2aed6:	e7d1      	b.n	2ae7c <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   2aed8:	2200      	movs	r2, #0
   2aeda:	e7e6      	b.n	2aeaa <preparse_value+0x76>
        it->flags |= CborIteratorFlag_NegativeInteger;
   2aedc:	2202      	movs	r2, #2
   2aede:	73e2      	strb	r2, [r4, #15]
        it->type = CborIntegerType;
   2aee0:	2200      	movs	r2, #0
   2aee2:	73a2      	strb	r2, [r4, #14]
   2aee4:	e7ec      	b.n	2aec0 <preparse_value+0x8c>
        switch (descriptor) {
   2aee6:	3b14      	subs	r3, #20
   2aee8:	2b0b      	cmp	r3, #11
   2aeea:	d812      	bhi.n	2af12 <preparse_value+0xde>
   2aeec:	e8df f003 	tbb	[pc, r3]
   2aef0:	0d0d0d06 	.word	0x0d0d0d06
   2aef4:	0b0b0d13 	.word	0x0b0b0d13
   2aef8:	20202020 	.word	0x20202020
            it->extra = false;
   2aefc:	2300      	movs	r3, #0
   2aefe:	81a3      	strh	r3, [r4, #12]
            it->type = CborBooleanType;
   2af00:	23f5      	movs	r3, #245	; 0xf5
   2af02:	73a3      	strb	r3, [r4, #14]
            break;
   2af04:	e005      	b.n	2af12 <preparse_value+0xde>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
   2af06:	2301      	movs	r3, #1
   2af08:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
   2af0a:	6828      	ldr	r0, [r5, #0]
   2af0c:	6803      	ldr	r3, [r0, #0]
   2af0e:	4798      	blx	r3
   2af10:	73a0      	strb	r0, [r4, #14]
        return CborNoError;
   2af12:	2000      	movs	r0, #0
   2af14:	e7b2      	b.n	2ae7c <preparse_value+0x48>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   2af16:	6828      	ldr	r0, [r5, #0]
   2af18:	6803      	ldr	r3, [r0, #0]
   2af1a:	3101      	adds	r1, #1
   2af1c:	4798      	blx	r3
   2af1e:	b283      	uxth	r3, r0
   2af20:	81a3      	strh	r3, [r4, #12]
            if (unlikely(it->extra < 32)) {
   2af22:	2b1f      	cmp	r3, #31
   2af24:	d8f5      	bhi.n	2af12 <preparse_value+0xde>
                it->type = CborInvalidType;
   2af26:	23ff      	movs	r3, #255	; 0xff
   2af28:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
   2af2a:	f44f 7083 	mov.w	r0, #262	; 0x106
   2af2e:	e7a5      	b.n	2ae7c <preparse_value+0x48>
            assert(false);  /* these conditions can't be reached */
   2af30:	f7e9 fbe8 	bl	14704 <hal_debugger_connected>
   2af34:	b100      	cbz	r0, 2af38 <preparse_value+0x104>
   2af36:	be01      	bkpt	0x0001
   2af38:	2300      	movs	r3, #0
   2af3a:	461a      	mov	r2, r3
   2af3c:	4619      	mov	r1, r3
   2af3e:	4618      	mov	r0, r3
   2af40:	f7ed fef0 	bl	18d24 <__assert_func>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
   2af44:	6828      	ldr	r0, [r5, #0]
   2af46:	6803      	ldr	r3, [r0, #0]
   2af48:	3101      	adds	r1, #1
   2af4a:	4798      	blx	r3
   2af4c:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   2af4e:	2000      	movs	r0, #0
   2af50:	e794      	b.n	2ae7c <preparse_value+0x48>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   2af52:	6828      	ldr	r0, [r5, #0]
   2af54:	6843      	ldr	r3, [r0, #4]
   2af56:	3101      	adds	r1, #1
   2af58:	4798      	blx	r3
   2af5a:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   2af5c:	2000      	movs	r0, #0
   2af5e:	e78d      	b.n	2ae7c <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   2af60:	f240 1001 	movw	r0, #257	; 0x101
   2af64:	e78a      	b.n	2ae7c <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   2af66:	f240 1001 	movw	r0, #257	; 0x101
   2af6a:	e787      	b.n	2ae7c <preparse_value+0x48>
        return CborNoError;
   2af6c:	2000      	movs	r0, #0
   2af6e:	e785      	b.n	2ae7c <preparse_value+0x48>

0002af70 <preparse_next_value>:
{
   2af70:	b510      	push	{r4, lr}
   2af72:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
   2af74:	6880      	ldr	r0, [r0, #8]
   2af76:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2af7a:	d00c      	beq.n	2af96 <preparse_next_value+0x26>
        if (it->type != CborTagType && !--it->remaining) {
   2af7c:	7ba2      	ldrb	r2, [r4, #14]
   2af7e:	2ac0      	cmp	r2, #192	; 0xc0
   2af80:	d002      	beq.n	2af88 <preparse_next_value+0x18>
   2af82:	3801      	subs	r0, #1
   2af84:	60a0      	str	r0, [r4, #8]
   2af86:	b118      	cbz	r0, 2af90 <preparse_next_value+0x20>
    return preparse_value(it);
   2af88:	4620      	mov	r0, r4
   2af8a:	f7ff ff53 	bl	2ae34 <preparse_value>
}
   2af8e:	bd10      	pop	{r4, pc}
            it->type = CborInvalidType;
   2af90:	23ff      	movs	r3, #255	; 0xff
   2af92:	73a3      	strb	r3, [r4, #14]
            return CborNoError;
   2af94:	e7fb      	b.n	2af8e <preparse_next_value+0x1e>
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   2af96:	6861      	ldr	r1, [r4, #4]
   2af98:	6823      	ldr	r3, [r4, #0]
   2af9a:	685a      	ldr	r2, [r3, #4]
   2af9c:	4291      	cmp	r1, r2
   2af9e:	d0f3      	beq.n	2af88 <preparse_next_value+0x18>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
   2afa0:	6818      	ldr	r0, [r3, #0]
   2afa2:	6803      	ldr	r3, [r0, #0]
   2afa4:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   2afa6:	28ff      	cmp	r0, #255	; 0xff
   2afa8:	d1ee      	bne.n	2af88 <preparse_next_value+0x18>
        ++it->offset;
   2afaa:	6863      	ldr	r3, [r4, #4]
   2afac:	3301      	adds	r3, #1
   2afae:	6063      	str	r3, [r4, #4]
        it->type = CborInvalidType;
   2afb0:	23ff      	movs	r3, #255	; 0xff
   2afb2:	73a3      	strb	r3, [r4, #14]
        it->remaining = 0;
   2afb4:	2000      	movs	r0, #0
   2afb6:	60a0      	str	r0, [r4, #8]
        return CborNoError;
   2afb8:	e7e9      	b.n	2af8e <preparse_next_value+0x1e>

0002afba <extract_length>:
{
   2afba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2afbe:	4605      	mov	r5, r0
   2afc0:	460e      	mov	r6, r1
   2afc2:	4617      	mov	r7, r2
    return cbor_ntohll(result);
}

static inline CborError extract_number(const CborParser *p, int *offset, uint64_t *len)
{
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   2afc4:	6800      	ldr	r0, [r0, #0]
   2afc6:	6803      	ldr	r3, [r0, #0]
   2afc8:	6809      	ldr	r1, [r1, #0]
   2afca:	4798      	blx	r3
   2afcc:	f000 041f 	and.w	r4, r0, #31
    ++*offset;
   2afd0:	6833      	ldr	r3, [r6, #0]
   2afd2:	3301      	adds	r3, #1
   2afd4:	6033      	str	r3, [r6, #0]
    *len = 1;
    if (additional_information < Value8Bit) {
   2afd6:	2c17      	cmp	r4, #23
   2afd8:	d91a      	bls.n	2b010 <extract_length+0x56>
        *len = additional_information;
        return CborNoError;
    }
    if (unlikely(additional_information > Value64Bit))
   2afda:	2c1b      	cmp	r4, #27
   2afdc:	d83a      	bhi.n	2b054 <extract_length+0x9a>
        return CborErrorIllegalNumber;

    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   2afde:	3c18      	subs	r4, #24
   2afe0:	f04f 0801 	mov.w	r8, #1
   2afe4:	fa08 f804 	lsl.w	r8, r8, r4
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   2afe8:	686b      	ldr	r3, [r5, #4]
   2afea:	6831      	ldr	r1, [r6, #0]
   2afec:	1a5b      	subs	r3, r3, r1
   2afee:	4598      	cmp	r8, r3
   2aff0:	d835      	bhi.n	2b05e <extract_length+0xa4>
        return CborErrorUnexpectedEOF;
    } else if (bytesNeeded == 1) {
   2aff2:	f1b8 0f01 	cmp.w	r8, #1
   2aff6:	d00f      	beq.n	2b018 <extract_length+0x5e>
        *len = p->d->get8(p->d, *offset);
    } else if (bytesNeeded == 2) {
   2aff8:	f1b8 0f02 	cmp.w	r8, #2
   2affc:	d01e      	beq.n	2b03c <extract_length+0x82>
        *len =  p->d->get16(p->d, *offset);
    } else if (bytesNeeded == 4) {
   2affe:	f1b8 0f04 	cmp.w	r8, #4
   2b002:	d021      	beq.n	2b048 <extract_length+0x8e>
        *len =  p->d->get32(p->d, *offset);
    } else {
        *len =  p->d->get64(p->d, *offset);
   2b004:	6828      	ldr	r0, [r5, #0]
   2b006:	68c3      	ldr	r3, [r0, #12]
   2b008:	4798      	blx	r3
   2b00a:	4604      	mov	r4, r0
   2b00c:	460d      	mov	r5, r1
   2b00e:	e008      	b.n	2b022 <extract_length+0x68>
        *len = additional_information;
   2b010:	b2e4      	uxtb	r4, r4
   2b012:	2500      	movs	r5, #0
        return CborNoError;
   2b014:	2000      	movs	r0, #0
   2b016:	e008      	b.n	2b02a <extract_length+0x70>
        *len = p->d->get8(p->d, *offset);
   2b018:	6828      	ldr	r0, [r5, #0]
   2b01a:	6803      	ldr	r3, [r0, #0]
   2b01c:	4798      	blx	r3
   2b01e:	4604      	mov	r4, r0
   2b020:	2500      	movs	r5, #0
    }
    *offset += bytesNeeded;
   2b022:	6833      	ldr	r3, [r6, #0]
   2b024:	4443      	add	r3, r8
   2b026:	6033      	str	r3, [r6, #0]
    return CborNoError;
   2b028:	2000      	movs	r0, #0
    if (err) {
   2b02a:	b9e8      	cbnz	r0, 2b068 <extract_length+0xae>
    *len = v;
   2b02c:	603c      	str	r4, [r7, #0]
    if (v != *len)
   2b02e:	2300      	movs	r3, #0
   2b030:	42ab      	cmp	r3, r5
   2b032:	bf08      	it	eq
   2b034:	42a4      	cmpeq	r4, r4
   2b036:	d11a      	bne.n	2b06e <extract_length+0xb4>
}
   2b038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *len =  p->d->get16(p->d, *offset);
   2b03c:	6828      	ldr	r0, [r5, #0]
   2b03e:	6843      	ldr	r3, [r0, #4]
   2b040:	4798      	blx	r3
   2b042:	4604      	mov	r4, r0
   2b044:	2500      	movs	r5, #0
   2b046:	e7ec      	b.n	2b022 <extract_length+0x68>
        *len =  p->d->get32(p->d, *offset);
   2b048:	6828      	ldr	r0, [r5, #0]
   2b04a:	6883      	ldr	r3, [r0, #8]
   2b04c:	4798      	blx	r3
   2b04e:	4604      	mov	r4, r0
   2b050:	2500      	movs	r5, #0
   2b052:	e7e6      	b.n	2b022 <extract_length+0x68>
    *len = 1;
   2b054:	2401      	movs	r4, #1
   2b056:	2500      	movs	r5, #0
        return CborErrorIllegalNumber;
   2b058:	f240 1005 	movw	r0, #261	; 0x105
   2b05c:	e7e5      	b.n	2b02a <extract_length+0x70>
    *len = 1;
   2b05e:	2401      	movs	r4, #1
   2b060:	2500      	movs	r5, #0
        return CborErrorUnexpectedEOF;
   2b062:	f240 1001 	movw	r0, #257	; 0x101
   2b066:	e7e0      	b.n	2b02a <extract_length+0x70>
        *len = 0;
   2b068:	2300      	movs	r3, #0
   2b06a:	603b      	str	r3, [r7, #0]
        return err;
   2b06c:	e7e4      	b.n	2b038 <extract_length+0x7e>
        return CborErrorDataTooLarge;
   2b06e:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2b072:	e7e1      	b.n	2b038 <extract_length+0x7e>

0002b074 <iterate_string_chunks>:

static CborError iterate_string_chunks(const CborValue *value, char *buffer, size_t *buflen,
                                       bool *result, CborValue *next, IterateFunction func)
{
   2b074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b078:	b085      	sub	sp, #20
   2b07a:	4604      	mov	r4, r0
   2b07c:	4689      	mov	r9, r1
   2b07e:	4616      	mov	r6, r2
   2b080:	461d      	mov	r5, r3
{ return value->type == CborByteStringType; }
   2b082:	7b83      	ldrb	r3, [r0, #14]
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   2b084:	2b40      	cmp	r3, #64	; 0x40
   2b086:	d001      	beq.n	2b08c <iterate_string_chunks+0x18>
   2b088:	2b60      	cmp	r3, #96	; 0x60
   2b08a:	d10c      	bne.n	2b0a6 <iterate_string_chunks+0x32>

    size_t total;
    CborError err;
    int offset = value->offset;
   2b08c:	6863      	ldr	r3, [r4, #4]
   2b08e:	9302      	str	r3, [sp, #8]
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   2b090:	7be2      	ldrb	r2, [r4, #15]
    if (cbor_value_is_length_known(value)) {
   2b092:	f012 0f04 	tst.w	r2, #4
   2b096:	d010      	beq.n	2b0ba <iterate_string_chunks+0x46>
        else
            *result = false;
        offset += total;
    } else {
        /* chunked */
        ++offset;
   2b098:	3301      	adds	r3, #1
   2b09a:	9302      	str	r3, [sp, #8]
        total = 0;
   2b09c:	2300      	movs	r3, #0
   2b09e:	9303      	str	r3, [sp, #12]
        *result = true;
   2b0a0:	2301      	movs	r3, #1
   2b0a2:	702b      	strb	r3, [r5, #0]
   2b0a4:	e04c      	b.n	2b140 <iterate_string_chunks+0xcc>
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   2b0a6:	f7e9 fb2d 	bl	14704 <hal_debugger_connected>
   2b0aa:	b100      	cbz	r0, 2b0ae <iterate_string_chunks+0x3a>
   2b0ac:	be01      	bkpt	0x0001
   2b0ae:	2300      	movs	r3, #0
   2b0b0:	461a      	mov	r2, r3
   2b0b2:	4619      	mov	r1, r3
   2b0b4:	4618      	mov	r0, r3
   2b0b6:	f7ed fe35 	bl	18d24 <__assert_func>
        err = extract_length(value->parser, &offset, &total);
   2b0ba:	aa03      	add	r2, sp, #12
   2b0bc:	a902      	add	r1, sp, #8
   2b0be:	6820      	ldr	r0, [r4, #0]
   2b0c0:	f7ff ff7b 	bl	2afba <extract_length>
        if (err)
   2b0c4:	4603      	mov	r3, r0
   2b0c6:	2800      	cmp	r0, #0
   2b0c8:	d177      	bne.n	2b1ba <iterate_string_chunks+0x146>
        if (total > (size_t)(value->parser->end - offset))
   2b0ca:	6820      	ldr	r0, [r4, #0]
   2b0cc:	6843      	ldr	r3, [r0, #4]
   2b0ce:	9a02      	ldr	r2, [sp, #8]
   2b0d0:	1a99      	subs	r1, r3, r2
   2b0d2:	9b03      	ldr	r3, [sp, #12]
   2b0d4:	4299      	cmp	r1, r3
   2b0d6:	f0c0 8083 	bcc.w	2b1e0 <iterate_string_chunks+0x16c>
        if (total <= *buflen)
   2b0da:	6831      	ldr	r1, [r6, #0]
   2b0dc:	428b      	cmp	r3, r1
   2b0de:	d81e      	bhi.n	2b11e <iterate_string_chunks+0xaa>
            *result = !!func(value->parser->d, buffer, offset, total);
   2b0e0:	4649      	mov	r1, r9
   2b0e2:	6800      	ldr	r0, [r0, #0]
   2b0e4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   2b0e6:	47b8      	blx	r7
   2b0e8:	3800      	subs	r0, #0
   2b0ea:	bf18      	it	ne
   2b0ec:	2001      	movne	r0, #1
   2b0ee:	7028      	strb	r0, [r5, #0]
        offset += total;
   2b0f0:	9b02      	ldr	r3, [sp, #8]
   2b0f2:	9a03      	ldr	r2, [sp, #12]
   2b0f4:	4413      	add	r3, r2
   2b0f6:	9302      	str	r3, [sp, #8]
            total = newTotal;
        }
    }

    /* is there enough room for the ending NUL byte? */
    if (*result && *buflen > total) {
   2b0f8:	782b      	ldrb	r3, [r5, #0]
   2b0fa:	b14b      	cbz	r3, 2b110 <iterate_string_chunks+0x9c>
   2b0fc:	6832      	ldr	r2, [r6, #0]
   2b0fe:	9b03      	ldr	r3, [sp, #12]
   2b100:	429a      	cmp	r2, r3
   2b102:	d905      	bls.n	2b110 <iterate_string_chunks+0x9c>
        /* we are just trying to write a NULL byte here,, but this is hard
         * because this is called by function pointer with an abstract
         * reader.  Since this is the output buffer, we can assume that if
         * we have a valid buffer its ok to write a NULL here  */
        if(buffer) {
   2b104:	f1b9 0f00 	cmp.w	r9, #0
   2b108:	d002      	beq.n	2b110 <iterate_string_chunks+0x9c>
            *(buffer + total) = '\0';
   2b10a:	2200      	movs	r2, #0
   2b10c:	f809 2003 	strb.w	r2, [r9, r3]
        }
    }
    *buflen = total;
   2b110:	9b03      	ldr	r3, [sp, #12]
   2b112:	6033      	str	r3, [r6, #0]

    if (next) {
   2b114:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2b116:	2b00      	cmp	r3, #0
   2b118:	d156      	bne.n	2b1c8 <iterate_string_chunks+0x154>
        *next = *value;
        next->offset = offset;
        return preparse_next_value(next);
    }
    return CborNoError;
   2b11a:	2300      	movs	r3, #0
   2b11c:	e04d      	b.n	2b1ba <iterate_string_chunks+0x146>
            *result = false;
   2b11e:	2300      	movs	r3, #0
   2b120:	702b      	strb	r3, [r5, #0]
   2b122:	e7e5      	b.n	2b0f0 <iterate_string_chunks+0x7c>
                ++offset;
   2b124:	9b02      	ldr	r3, [sp, #8]
   2b126:	3301      	adds	r3, #1
   2b128:	9302      	str	r3, [sp, #8]
                break;
   2b12a:	e7e5      	b.n	2b0f8 <iterate_string_chunks+0x84>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
   2b12c:	2201      	movs	r2, #1
   2b12e:	e023      	b.n	2b178 <iterate_string_chunks+0x104>
                *result = false;
   2b130:	2300      	movs	r3, #0
   2b132:	702b      	strb	r3, [r5, #0]
            offset += chunkLen;
   2b134:	9b02      	ldr	r3, [sp, #8]
   2b136:	9a01      	ldr	r2, [sp, #4]
   2b138:	4413      	add	r3, r2
   2b13a:	9302      	str	r3, [sp, #8]
            total = newTotal;
   2b13c:	f8cd 800c 	str.w	r8, [sp, #12]
            if (offset == value->parser->end)
   2b140:	6823      	ldr	r3, [r4, #0]
   2b142:	685a      	ldr	r2, [r3, #4]
   2b144:	9902      	ldr	r1, [sp, #8]
   2b146:	428a      	cmp	r2, r1
   2b148:	d02f      	beq.n	2b1aa <iterate_string_chunks+0x136>
            val = value->parser->d->get8(value->parser->d, offset);
   2b14a:	6818      	ldr	r0, [r3, #0]
   2b14c:	6803      	ldr	r3, [r0, #0]
   2b14e:	4798      	blx	r3
            if (val == (uint8_t)BreakByte) {
   2b150:	28ff      	cmp	r0, #255	; 0xff
   2b152:	d0e7      	beq.n	2b124 <iterate_string_chunks+0xb0>
            if ((val & MajorTypeMask) != value->type)
   2b154:	f020 001f 	bic.w	r0, r0, #31
   2b158:	7ba3      	ldrb	r3, [r4, #14]
   2b15a:	4298      	cmp	r0, r3
   2b15c:	d128      	bne.n	2b1b0 <iterate_string_chunks+0x13c>
            err = extract_length(value->parser, &offset, &chunkLen);
   2b15e:	aa01      	add	r2, sp, #4
   2b160:	a902      	add	r1, sp, #8
   2b162:	6820      	ldr	r0, [r4, #0]
   2b164:	f7ff ff29 	bl	2afba <extract_length>
            if (err)
   2b168:	4603      	mov	r3, r0
   2b16a:	bb30      	cbnz	r0, 2b1ba <iterate_string_chunks+0x146>
            if (unlikely(add_check_overflow(total, chunkLen, &newTotal)))
   2b16c:	9903      	ldr	r1, [sp, #12]
   2b16e:	9b01      	ldr	r3, [sp, #4]
   2b170:	2200      	movs	r2, #0
   2b172:	eb11 0803 	adds.w	r8, r1, r3
   2b176:	d2d9      	bcs.n	2b12c <iterate_string_chunks+0xb8>
   2b178:	b9ea      	cbnz	r2, 2b1b6 <iterate_string_chunks+0x142>
            if (chunkLen > (size_t)(value->parser->end - offset))
   2b17a:	f8d4 c000 	ldr.w	ip, [r4]
   2b17e:	f8dc 0004 	ldr.w	r0, [ip, #4]
   2b182:	9a02      	ldr	r2, [sp, #8]
   2b184:	1a80      	subs	r0, r0, r2
   2b186:	4283      	cmp	r3, r0
   2b188:	d81b      	bhi.n	2b1c2 <iterate_string_chunks+0x14e>
            if (*result && *buflen >= newTotal)
   2b18a:	7828      	ldrb	r0, [r5, #0]
   2b18c:	2800      	cmp	r0, #0
   2b18e:	d0cf      	beq.n	2b130 <iterate_string_chunks+0xbc>
   2b190:	6830      	ldr	r0, [r6, #0]
   2b192:	4540      	cmp	r0, r8
   2b194:	d3cc      	bcc.n	2b130 <iterate_string_chunks+0xbc>
                *result = !!func(value->parser->d, buffer + total, offset, chunkLen);
   2b196:	4449      	add	r1, r9
   2b198:	f8dc 0000 	ldr.w	r0, [ip]
   2b19c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   2b19e:	47b8      	blx	r7
   2b1a0:	3800      	subs	r0, #0
   2b1a2:	bf18      	it	ne
   2b1a4:	2001      	movne	r0, #1
   2b1a6:	7028      	strb	r0, [r5, #0]
   2b1a8:	e7c4      	b.n	2b134 <iterate_string_chunks+0xc0>
                return CborErrorUnexpectedEOF;
   2b1aa:	f240 1301 	movw	r3, #257	; 0x101
   2b1ae:	e004      	b.n	2b1ba <iterate_string_chunks+0x146>
                return CborErrorIllegalType;
   2b1b0:	f44f 7382 	mov.w	r3, #260	; 0x104
   2b1b4:	e001      	b.n	2b1ba <iterate_string_chunks+0x146>
                return CborErrorDataTooLarge;
   2b1b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
}
   2b1ba:	4618      	mov	r0, r3
   2b1bc:	b005      	add	sp, #20
   2b1be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return CborErrorUnexpectedEOF;
   2b1c2:	f240 1301 	movw	r3, #257	; 0x101
   2b1c6:	e7f8      	b.n	2b1ba <iterate_string_chunks+0x146>
        *next = *value;
   2b1c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2b1cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2b1ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        next->offset = offset;
   2b1d2:	9b02      	ldr	r3, [sp, #8]
   2b1d4:	6063      	str	r3, [r4, #4]
        return preparse_next_value(next);
   2b1d6:	4620      	mov	r0, r4
   2b1d8:	f7ff feca 	bl	2af70 <preparse_next_value>
   2b1dc:	4603      	mov	r3, r0
   2b1de:	e7ec      	b.n	2b1ba <iterate_string_chunks+0x146>
            return CborErrorUnexpectedEOF;
   2b1e0:	f240 1301 	movw	r3, #257	; 0x101
   2b1e4:	e7e9      	b.n	2b1ba <iterate_string_chunks+0x146>

0002b1e6 <advance_internal>:
{
   2b1e6:	b570      	push	{r4, r5, r6, lr}
   2b1e8:	4604      	mov	r4, r0
    CborError err = extract_number(it->parser, &it->offset,  &length);
   2b1ea:	6806      	ldr	r6, [r0, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   2b1ec:	6830      	ldr	r0, [r6, #0]
   2b1ee:	6803      	ldr	r3, [r0, #0]
   2b1f0:	6861      	ldr	r1, [r4, #4]
   2b1f2:	4798      	blx	r3
   2b1f4:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   2b1f8:	6863      	ldr	r3, [r4, #4]
   2b1fa:	3301      	adds	r3, #1
   2b1fc:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   2b1fe:	2817      	cmp	r0, #23
   2b200:	d915      	bls.n	2b22e <advance_internal+0x48>
    if (unlikely(additional_information > Value64Bit))
   2b202:	281b      	cmp	r0, #27
   2b204:	d842      	bhi.n	2b28c <advance_internal+0xa6>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   2b206:	3818      	subs	r0, #24
   2b208:	2501      	movs	r5, #1
   2b20a:	4085      	lsls	r5, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   2b20c:	6873      	ldr	r3, [r6, #4]
   2b20e:	6861      	ldr	r1, [r4, #4]
   2b210:	1a5b      	subs	r3, r3, r1
   2b212:	429d      	cmp	r5, r3
   2b214:	d83f      	bhi.n	2b296 <advance_internal+0xb0>
    } else if (bytesNeeded == 1) {
   2b216:	2d01      	cmp	r5, #1
   2b218:	d00d      	beq.n	2b236 <advance_internal+0x50>
    } else if (bytesNeeded == 2) {
   2b21a:	2d02      	cmp	r5, #2
   2b21c:	d02a      	beq.n	2b274 <advance_internal+0x8e>
    } else if (bytesNeeded == 4) {
   2b21e:	2d04      	cmp	r5, #4
   2b220:	d02e      	beq.n	2b280 <advance_internal+0x9a>
        *len =  p->d->get64(p->d, *offset);
   2b222:	6830      	ldr	r0, [r6, #0]
   2b224:	68c3      	ldr	r3, [r0, #12]
   2b226:	4798      	blx	r3
   2b228:	4602      	mov	r2, r0
   2b22a:	460b      	mov	r3, r1
   2b22c:	e008      	b.n	2b240 <advance_internal+0x5a>
        *len = additional_information;
   2b22e:	b2c2      	uxtb	r2, r0
   2b230:	2300      	movs	r3, #0
        return CborNoError;
   2b232:	2100      	movs	r1, #0
   2b234:	e008      	b.n	2b248 <advance_internal+0x62>
        *len = p->d->get8(p->d, *offset);
   2b236:	6830      	ldr	r0, [r6, #0]
   2b238:	6803      	ldr	r3, [r0, #0]
   2b23a:	4798      	blx	r3
   2b23c:	4602      	mov	r2, r0
   2b23e:	2300      	movs	r3, #0
    *offset += bytesNeeded;
   2b240:	6860      	ldr	r0, [r4, #4]
   2b242:	4428      	add	r0, r5
   2b244:	6060      	str	r0, [r4, #4]
    return CborNoError;
   2b246:	2100      	movs	r1, #0
    assert(err == CborNoError);
   2b248:	bb51      	cbnz	r1, 2b2a0 <advance_internal+0xba>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
   2b24a:	7ba1      	ldrb	r1, [r4, #14]
   2b24c:	2940      	cmp	r1, #64	; 0x40
   2b24e:	d001      	beq.n	2b254 <advance_internal+0x6e>
   2b250:	2960      	cmp	r1, #96	; 0x60
   2b252:	d10b      	bne.n	2b26c <advance_internal+0x86>
        assert(length == (size_t)length);
   2b254:	2100      	movs	r1, #0
   2b256:	4299      	cmp	r1, r3
   2b258:	bf08      	it	eq
   2b25a:	4292      	cmpeq	r2, r2
   2b25c:	d12a      	bne.n	2b2b4 <advance_internal+0xce>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   2b25e:	7be3      	ldrb	r3, [r4, #15]
   2b260:	f013 0f04 	tst.w	r3, #4
   2b264:	d130      	bne.n	2b2c8 <advance_internal+0xe2>
        it->offset += length;
   2b266:	6863      	ldr	r3, [r4, #4]
   2b268:	4413      	add	r3, r2
   2b26a:	6063      	str	r3, [r4, #4]
    return preparse_next_value(it);
   2b26c:	4620      	mov	r0, r4
   2b26e:	f7ff fe7f 	bl	2af70 <preparse_next_value>
}
   2b272:	bd70      	pop	{r4, r5, r6, pc}
        *len =  p->d->get16(p->d, *offset);
   2b274:	6830      	ldr	r0, [r6, #0]
   2b276:	6843      	ldr	r3, [r0, #4]
   2b278:	4798      	blx	r3
   2b27a:	4602      	mov	r2, r0
   2b27c:	2300      	movs	r3, #0
   2b27e:	e7df      	b.n	2b240 <advance_internal+0x5a>
        *len =  p->d->get32(p->d, *offset);
   2b280:	6830      	ldr	r0, [r6, #0]
   2b282:	6883      	ldr	r3, [r0, #8]
   2b284:	4798      	blx	r3
   2b286:	4602      	mov	r2, r0
   2b288:	2300      	movs	r3, #0
   2b28a:	e7d9      	b.n	2b240 <advance_internal+0x5a>
    *len = 1;
   2b28c:	2201      	movs	r2, #1
   2b28e:	2300      	movs	r3, #0
        return CborErrorIllegalNumber;
   2b290:	f240 1105 	movw	r1, #261	; 0x105
   2b294:	e7d8      	b.n	2b248 <advance_internal+0x62>
    *len = 1;
   2b296:	2201      	movs	r2, #1
   2b298:	2300      	movs	r3, #0
        return CborErrorUnexpectedEOF;
   2b29a:	f240 1101 	movw	r1, #257	; 0x101
   2b29e:	e7d3      	b.n	2b248 <advance_internal+0x62>
    assert(err == CborNoError);
   2b2a0:	f7e9 fa30 	bl	14704 <hal_debugger_connected>
   2b2a4:	b100      	cbz	r0, 2b2a8 <advance_internal+0xc2>
   2b2a6:	be01      	bkpt	0x0001
   2b2a8:	2300      	movs	r3, #0
   2b2aa:	461a      	mov	r2, r3
   2b2ac:	4619      	mov	r1, r3
   2b2ae:	4618      	mov	r0, r3
   2b2b0:	f7ed fd38 	bl	18d24 <__assert_func>
        assert(length == (size_t)length);
   2b2b4:	f7e9 fa26 	bl	14704 <hal_debugger_connected>
   2b2b8:	b100      	cbz	r0, 2b2bc <advance_internal+0xd6>
   2b2ba:	be01      	bkpt	0x0001
   2b2bc:	2300      	movs	r3, #0
   2b2be:	461a      	mov	r2, r3
   2b2c0:	4619      	mov	r1, r3
   2b2c2:	4618      	mov	r0, r3
   2b2c4:	f7ed fd2e 	bl	18d24 <__assert_func>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   2b2c8:	f7e9 fa1c 	bl	14704 <hal_debugger_connected>
   2b2cc:	b100      	cbz	r0, 2b2d0 <advance_internal+0xea>
   2b2ce:	be01      	bkpt	0x0001
   2b2d0:	2300      	movs	r3, #0
   2b2d2:	461a      	mov	r2, r3
   2b2d4:	4619      	mov	r1, r3
   2b2d6:	4618      	mov	r0, r3
   2b2d8:	f7ed fd24 	bl	18d24 <__assert_func>

0002b2dc <_cbor_value_decode_int64_internal>:
{
   2b2dc:	b510      	push	{r4, lr}
   2b2de:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   2b2e0:	6803      	ldr	r3, [r0, #0]
   2b2e2:	6818      	ldr	r0, [r3, #0]
   2b2e4:	6803      	ldr	r3, [r0, #0]
   2b2e6:	6861      	ldr	r1, [r4, #4]
   2b2e8:	4798      	blx	r3
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   2b2ea:	7be3      	ldrb	r3, [r4, #15]
   2b2ec:	f013 0f01 	tst.w	r3, #1
   2b2f0:	d104      	bne.n	2b2fc <_cbor_value_decode_int64_internal+0x20>
   2b2f2:	7ba3      	ldrb	r3, [r4, #14]
   2b2f4:	2bfa      	cmp	r3, #250	; 0xfa
   2b2f6:	d001      	beq.n	2b2fc <_cbor_value_decode_int64_internal+0x20>
   2b2f8:	2bfb      	cmp	r3, #251	; 0xfb
   2b2fa:	d111      	bne.n	2b320 <_cbor_value_decode_int64_internal+0x44>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   2b2fc:	f000 031e 	and.w	r3, r0, #30
   2b300:	2b1a      	cmp	r3, #26
   2b302:	d117      	bne.n	2b334 <_cbor_value_decode_int64_internal+0x58>
    if ((val & 1) == (Value32Bit & 1))
   2b304:	f010 0f01 	tst.w	r0, #1
   2b308:	d01e      	beq.n	2b348 <_cbor_value_decode_int64_internal+0x6c>
    assert((val & SmallValueMask) == Value64Bit);
   2b30a:	f000 001f 	and.w	r0, r0, #31
   2b30e:	281b      	cmp	r0, #27
   2b310:	d122      	bne.n	2b358 <_cbor_value_decode_int64_internal+0x7c>
        return value->parser->d->get64(value->parser->d, value->offset + 1);
   2b312:	6823      	ldr	r3, [r4, #0]
   2b314:	6818      	ldr	r0, [r3, #0]
   2b316:	68c3      	ldr	r3, [r0, #12]
   2b318:	6861      	ldr	r1, [r4, #4]
   2b31a:	3101      	adds	r1, #1
   2b31c:	4798      	blx	r3
}
   2b31e:	bd10      	pop	{r4, pc}
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   2b320:	f7e9 f9f0 	bl	14704 <hal_debugger_connected>
   2b324:	b100      	cbz	r0, 2b328 <_cbor_value_decode_int64_internal+0x4c>
   2b326:	be01      	bkpt	0x0001
   2b328:	2300      	movs	r3, #0
   2b32a:	461a      	mov	r2, r3
   2b32c:	4619      	mov	r1, r3
   2b32e:	4618      	mov	r0, r3
   2b330:	f7ed fcf8 	bl	18d24 <__assert_func>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   2b334:	f7e9 f9e6 	bl	14704 <hal_debugger_connected>
   2b338:	b100      	cbz	r0, 2b33c <_cbor_value_decode_int64_internal+0x60>
   2b33a:	be01      	bkpt	0x0001
   2b33c:	2300      	movs	r3, #0
   2b33e:	461a      	mov	r2, r3
   2b340:	4619      	mov	r1, r3
   2b342:	4618      	mov	r0, r3
   2b344:	f7ed fcee 	bl	18d24 <__assert_func>
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   2b348:	6823      	ldr	r3, [r4, #0]
   2b34a:	6818      	ldr	r0, [r3, #0]
   2b34c:	6883      	ldr	r3, [r0, #8]
   2b34e:	6861      	ldr	r1, [r4, #4]
   2b350:	3101      	adds	r1, #1
   2b352:	4798      	blx	r3
   2b354:	2100      	movs	r1, #0
   2b356:	e7e2      	b.n	2b31e <_cbor_value_decode_int64_internal+0x42>
    assert((val & SmallValueMask) == Value64Bit);
   2b358:	f7e9 f9d4 	bl	14704 <hal_debugger_connected>
   2b35c:	b100      	cbz	r0, 2b360 <_cbor_value_decode_int64_internal+0x84>
   2b35e:	be01      	bkpt	0x0001
   2b360:	2300      	movs	r3, #0
   2b362:	461a      	mov	r2, r3
   2b364:	4619      	mov	r1, r3
   2b366:	4618      	mov	r0, r3
   2b368:	f7ed fcdc 	bl	18d24 <__assert_func>

0002b36c <cbor_parser_init>:
{
   2b36c:	b510      	push	{r4, lr}
   2b36e:	4604      	mov	r4, r0
   2b370:	4618      	mov	r0, r3
    memset(parser, 0, sizeof(*parser));
   2b372:	2300      	movs	r3, #0
   2b374:	6053      	str	r3, [r2, #4]
   2b376:	6093      	str	r3, [r2, #8]
    parser->d = d;
   2b378:	6014      	str	r4, [r2, #0]
    parser->end = d->message_size;
   2b37a:	69a4      	ldr	r4, [r4, #24]
   2b37c:	6054      	str	r4, [r2, #4]
    parser->flags = flags;
   2b37e:	6091      	str	r1, [r2, #8]
    it->parser = parser;
   2b380:	6002      	str	r2, [r0, #0]
    it->offset = 0;
   2b382:	6043      	str	r3, [r0, #4]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   2b384:	2301      	movs	r3, #1
   2b386:	6083      	str	r3, [r0, #8]
    return preparse_value(it);
   2b388:	f7ff fd54 	bl	2ae34 <preparse_value>
}
   2b38c:	bd10      	pop	{r4, pc}

0002b38e <cbor_value_advance_fixed>:
{
   2b38e:	b510      	push	{r4, lr}
   2b390:	4604      	mov	r4, r0
    assert(it->type != CborInvalidType);
   2b392:	7b80      	ldrb	r0, [r0, #14]
   2b394:	28ff      	cmp	r0, #255	; 0xff
   2b396:	d008      	beq.n	2b3aa <cbor_value_advance_fixed+0x1c>
    assert(is_fixed_type(it->type));
   2b398:	f7ff fd38 	bl	2ae0c <is_fixed_type>
   2b39c:	b178      	cbz	r0, 2b3be <cbor_value_advance_fixed+0x30>
    if (!it->remaining)
   2b39e:	68a3      	ldr	r3, [r4, #8]
   2b3a0:	b1bb      	cbz	r3, 2b3d2 <cbor_value_advance_fixed+0x44>
    return advance_internal(it);
   2b3a2:	4620      	mov	r0, r4
   2b3a4:	f7ff ff1f 	bl	2b1e6 <advance_internal>
}
   2b3a8:	bd10      	pop	{r4, pc}
    assert(it->type != CborInvalidType);
   2b3aa:	f7e9 f9ab 	bl	14704 <hal_debugger_connected>
   2b3ae:	b100      	cbz	r0, 2b3b2 <cbor_value_advance_fixed+0x24>
   2b3b0:	be01      	bkpt	0x0001
   2b3b2:	2300      	movs	r3, #0
   2b3b4:	461a      	mov	r2, r3
   2b3b6:	4619      	mov	r1, r3
   2b3b8:	4618      	mov	r0, r3
   2b3ba:	f7ed fcb3 	bl	18d24 <__assert_func>
    assert(is_fixed_type(it->type));
   2b3be:	f7e9 f9a1 	bl	14704 <hal_debugger_connected>
   2b3c2:	b100      	cbz	r0, 2b3c6 <cbor_value_advance_fixed+0x38>
   2b3c4:	be01      	bkpt	0x0001
   2b3c6:	2300      	movs	r3, #0
   2b3c8:	461a      	mov	r2, r3
   2b3ca:	4619      	mov	r1, r3
   2b3cc:	4618      	mov	r0, r3
   2b3ce:	f7ed fca9 	bl	18d24 <__assert_func>
        return CborErrorAdvancePastEOF;
   2b3d2:	2003      	movs	r0, #3
   2b3d4:	e7e8      	b.n	2b3a8 <cbor_value_advance_fixed+0x1a>

0002b3d6 <cbor_value_enter_container>:
{
   2b3d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b3d8:	4605      	mov	r5, r0
   2b3da:	460c      	mov	r4, r1
{ return it->type == CborArrayType || it->type == CborMapType; }
   2b3dc:	7b83      	ldrb	r3, [r0, #14]
   2b3de:	2b80      	cmp	r3, #128	; 0x80
   2b3e0:	d021      	beq.n	2b426 <cbor_value_enter_container+0x50>
   2b3e2:	2ba0      	cmp	r3, #160	; 0xa0
   2b3e4:	d01d      	beq.n	2b422 <cbor_value_enter_container+0x4c>
   2b3e6:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   2b3e8:	b1fb      	cbz	r3, 2b42a <cbor_value_enter_container+0x54>
    *recursed = *it;
   2b3ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   2b3ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (it->flags & CborIteratorFlag_UnknownLength) {
   2b3f2:	7beb      	ldrb	r3, [r5, #15]
   2b3f4:	f013 0f04 	tst.w	r3, #4
   2b3f8:	d021      	beq.n	2b43e <cbor_value_enter_container+0x68>
        recursed->remaining = UINT32_MAX;
   2b3fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b3fe:	60a3      	str	r3, [r4, #8]
        ++recursed->offset;
   2b400:	460b      	mov	r3, r1
   2b402:	3301      	adds	r3, #1
   2b404:	6063      	str	r3, [r4, #4]
        err = preparse_value(recursed);
   2b406:	4620      	mov	r0, r4
   2b408:	f7ff fd14 	bl	2ae34 <preparse_value>
        if (err != CborErrorUnexpectedBreak)
   2b40c:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   2b410:	d106      	bne.n	2b420 <cbor_value_enter_container+0x4a>
        ++recursed->offset;
   2b412:	6863      	ldr	r3, [r4, #4]
   2b414:	3301      	adds	r3, #1
   2b416:	6063      	str	r3, [r4, #4]
    recursed->type = CborInvalidType;
   2b418:	23ff      	movs	r3, #255	; 0xff
   2b41a:	73a3      	strb	r3, [r4, #14]
    recursed->remaining = 0;
   2b41c:	2000      	movs	r0, #0
   2b41e:	60a0      	str	r0, [r4, #8]
}
   2b420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b422:	2301      	movs	r3, #1
   2b424:	e7e0      	b.n	2b3e8 <cbor_value_enter_container+0x12>
   2b426:	2301      	movs	r3, #1
   2b428:	e7de      	b.n	2b3e8 <cbor_value_enter_container+0x12>
    assert(cbor_value_is_container(it));
   2b42a:	f7e9 f96b 	bl	14704 <hal_debugger_connected>
   2b42e:	b100      	cbz	r0, 2b432 <cbor_value_enter_container+0x5c>
   2b430:	be01      	bkpt	0x0001
   2b432:	2300      	movs	r3, #0
   2b434:	461a      	mov	r2, r3
   2b436:	4619      	mov	r1, r3
   2b438:	4618      	mov	r0, r3
   2b43a:	f7ed fc73 	bl	18d24 <__assert_func>
        err = extract_number(recursed->parser, &recursed->offset, &len);
   2b43e:	6827      	ldr	r7, [r4, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   2b440:	6838      	ldr	r0, [r7, #0]
   2b442:	6803      	ldr	r3, [r0, #0]
   2b444:	6861      	ldr	r1, [r4, #4]
   2b446:	4798      	blx	r3
   2b448:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   2b44c:	6863      	ldr	r3, [r4, #4]
   2b44e:	3301      	adds	r3, #1
   2b450:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   2b452:	2817      	cmp	r0, #23
   2b454:	d915      	bls.n	2b482 <cbor_value_enter_container+0xac>
    if (unlikely(additional_information > Value64Bit))
   2b456:	281b      	cmp	r0, #27
   2b458:	d841      	bhi.n	2b4de <cbor_value_enter_container+0x108>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   2b45a:	3818      	subs	r0, #24
   2b45c:	2601      	movs	r6, #1
   2b45e:	4086      	lsls	r6, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   2b460:	687b      	ldr	r3, [r7, #4]
   2b462:	6861      	ldr	r1, [r4, #4]
   2b464:	1a5b      	subs	r3, r3, r1
   2b466:	429e      	cmp	r6, r3
   2b468:	d83e      	bhi.n	2b4e8 <cbor_value_enter_container+0x112>
    } else if (bytesNeeded == 1) {
   2b46a:	2e01      	cmp	r6, #1
   2b46c:	d00d      	beq.n	2b48a <cbor_value_enter_container+0xb4>
    } else if (bytesNeeded == 2) {
   2b46e:	2e02      	cmp	r6, #2
   2b470:	d029      	beq.n	2b4c6 <cbor_value_enter_container+0xf0>
    } else if (bytesNeeded == 4) {
   2b472:	2e04      	cmp	r6, #4
   2b474:	d02d      	beq.n	2b4d2 <cbor_value_enter_container+0xfc>
        *len =  p->d->get64(p->d, *offset);
   2b476:	6838      	ldr	r0, [r7, #0]
   2b478:	68c3      	ldr	r3, [r0, #12]
   2b47a:	4798      	blx	r3
   2b47c:	4602      	mov	r2, r0
   2b47e:	460b      	mov	r3, r1
   2b480:	e008      	b.n	2b494 <cbor_value_enter_container+0xbe>
        *len = additional_information;
   2b482:	b2c2      	uxtb	r2, r0
   2b484:	2300      	movs	r3, #0
        return CborNoError;
   2b486:	2100      	movs	r1, #0
   2b488:	e008      	b.n	2b49c <cbor_value_enter_container+0xc6>
        *len = p->d->get8(p->d, *offset);
   2b48a:	6838      	ldr	r0, [r7, #0]
   2b48c:	6803      	ldr	r3, [r0, #0]
   2b48e:	4798      	blx	r3
   2b490:	4602      	mov	r2, r0
   2b492:	2300      	movs	r3, #0
    *offset += bytesNeeded;
   2b494:	6860      	ldr	r0, [r4, #4]
   2b496:	4430      	add	r0, r6
   2b498:	6060      	str	r0, [r4, #4]
    return CborNoError;
   2b49a:	2100      	movs	r1, #0
        assert(err == CborNoError);
   2b49c:	bb49      	cbnz	r1, 2b4f2 <cbor_value_enter_container+0x11c>
        recursed->remaining = (uint32_t)len;
   2b49e:	60a2      	str	r2, [r4, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
   2b4a0:	2100      	movs	r1, #0
   2b4a2:	4299      	cmp	r1, r3
   2b4a4:	bf08      	it	eq
   2b4a6:	4292      	cmpeq	r2, r2
   2b4a8:	d12d      	bne.n	2b506 <cbor_value_enter_container+0x130>
   2b4aa:	2b00      	cmp	r3, #0
   2b4ac:	bf08      	it	eq
   2b4ae:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   2b4b2:	d028      	beq.n	2b506 <cbor_value_enter_container+0x130>
        if (recursed->type == CborMapType) {
   2b4b4:	7ba1      	ldrb	r1, [r4, #14]
   2b4b6:	29a0      	cmp	r1, #160	; 0xa0
   2b4b8:	d02a      	beq.n	2b510 <cbor_value_enter_container+0x13a>
        if (len != 0)
   2b4ba:	4313      	orrs	r3, r2
   2b4bc:	d0ac      	beq.n	2b418 <cbor_value_enter_container+0x42>
            return preparse_value(recursed);
   2b4be:	4620      	mov	r0, r4
   2b4c0:	f7ff fcb8 	bl	2ae34 <preparse_value>
   2b4c4:	e7ac      	b.n	2b420 <cbor_value_enter_container+0x4a>
        *len =  p->d->get16(p->d, *offset);
   2b4c6:	6838      	ldr	r0, [r7, #0]
   2b4c8:	6843      	ldr	r3, [r0, #4]
   2b4ca:	4798      	blx	r3
   2b4cc:	4602      	mov	r2, r0
   2b4ce:	2300      	movs	r3, #0
   2b4d0:	e7e0      	b.n	2b494 <cbor_value_enter_container+0xbe>
        *len =  p->d->get32(p->d, *offset);
   2b4d2:	6838      	ldr	r0, [r7, #0]
   2b4d4:	6883      	ldr	r3, [r0, #8]
   2b4d6:	4798      	blx	r3
   2b4d8:	4602      	mov	r2, r0
   2b4da:	2300      	movs	r3, #0
   2b4dc:	e7da      	b.n	2b494 <cbor_value_enter_container+0xbe>
    *len = 1;
   2b4de:	2201      	movs	r2, #1
   2b4e0:	2300      	movs	r3, #0
        return CborErrorIllegalNumber;
   2b4e2:	f240 1105 	movw	r1, #261	; 0x105
   2b4e6:	e7d9      	b.n	2b49c <cbor_value_enter_container+0xc6>
    *len = 1;
   2b4e8:	2201      	movs	r2, #1
   2b4ea:	2300      	movs	r3, #0
        return CborErrorUnexpectedEOF;
   2b4ec:	f240 1101 	movw	r1, #257	; 0x101
   2b4f0:	e7d4      	b.n	2b49c <cbor_value_enter_container+0xc6>
        assert(err == CborNoError);
   2b4f2:	f7e9 f907 	bl	14704 <hal_debugger_connected>
   2b4f6:	b100      	cbz	r0, 2b4fa <cbor_value_enter_container+0x124>
   2b4f8:	be01      	bkpt	0x0001
   2b4fa:	2300      	movs	r3, #0
   2b4fc:	461a      	mov	r2, r3
   2b4fe:	4619      	mov	r1, r3
   2b500:	4618      	mov	r0, r3
   2b502:	f7ed fc0f 	bl	18d24 <__assert_func>
            recursed->offset = it->offset;
   2b506:	686b      	ldr	r3, [r5, #4]
   2b508:	6063      	str	r3, [r4, #4]
            return CborErrorDataTooLarge;
   2b50a:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2b50e:	e787      	b.n	2b420 <cbor_value_enter_container+0x4a>
            if (recursed->remaining > UINT32_MAX / 2) {
   2b510:	2a00      	cmp	r2, #0
   2b512:	db02      	blt.n	2b51a <cbor_value_enter_container+0x144>
            recursed->remaining *= 2;
   2b514:	0056      	lsls	r6, r2, #1
   2b516:	60a6      	str	r6, [r4, #8]
   2b518:	e7cf      	b.n	2b4ba <cbor_value_enter_container+0xe4>
                recursed->offset = it->offset;
   2b51a:	686b      	ldr	r3, [r5, #4]
   2b51c:	6063      	str	r3, [r4, #4]
                return CborErrorDataTooLarge;
   2b51e:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2b522:	e77d      	b.n	2b420 <cbor_value_enter_container+0x4a>

0002b524 <cbor_value_leave_container>:
{
   2b524:	b508      	push	{r3, lr}
   2b526:	7b83      	ldrb	r3, [r0, #14]
   2b528:	2b80      	cmp	r3, #128	; 0x80
   2b52a:	d00d      	beq.n	2b548 <cbor_value_leave_container+0x24>
   2b52c:	2ba0      	cmp	r3, #160	; 0xa0
   2b52e:	d009      	beq.n	2b544 <cbor_value_leave_container+0x20>
   2b530:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   2b532:	b15b      	cbz	r3, 2b54c <cbor_value_leave_container+0x28>
    assert(recursed->type == CborInvalidType);
   2b534:	7b8b      	ldrb	r3, [r1, #14]
   2b536:	2bff      	cmp	r3, #255	; 0xff
   2b538:	d112      	bne.n	2b560 <cbor_value_leave_container+0x3c>
    it->offset = recursed->offset;
   2b53a:	684b      	ldr	r3, [r1, #4]
   2b53c:	6043      	str	r3, [r0, #4]
    return preparse_next_value(it);
   2b53e:	f7ff fd17 	bl	2af70 <preparse_next_value>
}
   2b542:	bd08      	pop	{r3, pc}
   2b544:	2301      	movs	r3, #1
   2b546:	e7f4      	b.n	2b532 <cbor_value_leave_container+0xe>
   2b548:	2301      	movs	r3, #1
   2b54a:	e7f2      	b.n	2b532 <cbor_value_leave_container+0xe>
    assert(cbor_value_is_container(it));
   2b54c:	f7e9 f8da 	bl	14704 <hal_debugger_connected>
   2b550:	b100      	cbz	r0, 2b554 <cbor_value_leave_container+0x30>
   2b552:	be01      	bkpt	0x0001
   2b554:	2300      	movs	r3, #0
   2b556:	461a      	mov	r2, r3
   2b558:	4619      	mov	r1, r3
   2b55a:	4618      	mov	r0, r3
   2b55c:	f7ed fbe2 	bl	18d24 <__assert_func>
    assert(recursed->type == CborInvalidType);
   2b560:	f7e9 f8d0 	bl	14704 <hal_debugger_connected>
   2b564:	b100      	cbz	r0, 2b568 <cbor_value_leave_container+0x44>
   2b566:	be01      	bkpt	0x0001
   2b568:	2300      	movs	r3, #0
   2b56a:	461a      	mov	r2, r3
   2b56c:	4619      	mov	r1, r3
   2b56e:	4618      	mov	r0, r3
   2b570:	f7ed fbd8 	bl	18d24 <__assert_func>

0002b574 <_cbor_value_copy_string>:
 * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
   2b574:	b510      	push	{r4, lr}
   2b576:	b084      	sub	sp, #16
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   2b578:	460c      	mov	r4, r1
   2b57a:	b179      	cbz	r1, 2b59c <_cbor_value_copy_string+0x28>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
   2b57c:	6801      	ldr	r1, [r0, #0]
   2b57e:	6809      	ldr	r1, [r1, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   2b580:	6949      	ldr	r1, [r1, #20]
   2b582:	9101      	str	r1, [sp, #4]
   2b584:	9300      	str	r3, [sp, #0]
   2b586:	f10d 030f 	add.w	r3, sp, #15
   2b58a:	4621      	mov	r1, r4
   2b58c:	f7ff fd72 	bl	2b074 <iterate_string_chunks>
    return err ? err :
   2b590:	b910      	cbnz	r0, 2b598 <_cbor_value_copy_string+0x24>
                 copied_all ? CborNoError : CborErrorOutOfMemory;
   2b592:	f89d 300f 	ldrb.w	r3, [sp, #15]
    return err ? err :
   2b596:	b11b      	cbz	r3, 2b5a0 <_cbor_value_copy_string+0x2c>
}
   2b598:	b004      	add	sp, #16
   2b59a:	bd10      	pop	{r4, pc}
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   2b59c:	4902      	ldr	r1, [pc, #8]	; (2b5a8 <_cbor_value_copy_string+0x34>)
   2b59e:	e7f0      	b.n	2b582 <_cbor_value_copy_string+0xe>
    return err ? err :
   2b5a0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   2b5a4:	e7f8      	b.n	2b598 <_cbor_value_copy_string+0x24>
   2b5a6:	bf00      	nop
   2b5a8:	0002ae31 	.word	0x0002ae31

0002b5ac <hexDump>:
 *      by a colon (":"), enclosed in curly braces ("{" and "}").
 *      If the map length is indeterminate, an underscore ("_") appears immediately after the opening brace.
 */

static int hexDump(FILE *out, const uint8_t *buffer, size_t n)
{
   2b5ac:	b570      	push	{r4, r5, r6, lr}
   2b5ae:	4606      	mov	r6, r0
   2b5b0:	460c      	mov	r4, r1
   2b5b2:	4615      	mov	r5, r2
    while (n--) {
   2b5b4:	462b      	mov	r3, r5
   2b5b6:	3d01      	subs	r5, #1
   2b5b8:	b143      	cbz	r3, 2b5cc <hexDump+0x20>
        int r = fprintf(out, "%02" PRIx8, *buffer++);
   2b5ba:	f814 2b01 	ldrb.w	r2, [r4], #1
   2b5be:	4904      	ldr	r1, [pc, #16]	; (2b5d0 <hexDump+0x24>)
   2b5c0:	4630      	mov	r0, r6
   2b5c2:	f7ef ff1b 	bl	1b3fc <fprintf>
        if (r < 0)
   2b5c6:	2800      	cmp	r0, #0
   2b5c8:	daf4      	bge.n	2b5b4 <hexDump+0x8>
   2b5ca:	e000      	b.n	2b5ce <hexDump+0x22>
            return r;
    }
    return 0;   /* should be n * 2, but we don't have the original n anymore */
   2b5cc:	2000      	movs	r0, #0
}
   2b5ce:	bd70      	pop	{r4, r5, r6, pc}
   2b5d0:	0003529c 	.word	0x0003529c

0002b5d4 <utf8EscapedDump>:

/* This function decodes buffer as UTF-8 and prints as escaped UTF-16.
 * On UTF-8 decoding error, it returns CborErrorInvalidUtf8TextString */
static int utf8EscapedDump(FILE *out, const char *buffer, size_t n)
{
   2b5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b5d6:	4606      	mov	r6, r0
    uint32_t uc;
    while (n--) {
   2b5d8:	e07e      	b.n	2b6d8 <utf8EscapedDump+0x104>
        uc = (uint8_t)*buffer++;
        if (uc < 0x80) {
            /* single-byte UTF-8 */
            if (uc < 0x7f && uc >= 0x20 && uc != '\\' && uc != '"') {
                if (fprintf(out, "%c", (char)uc) < 0)
   2b5da:	4985      	ldr	r1, [pc, #532]	; (2b7f0 <utf8EscapedDump+0x21c>)
   2b5dc:	4630      	mov	r0, r6
   2b5de:	f7ef ff0d 	bl	1b3fc <fprintf>
   2b5e2:	2800      	cmp	r0, #0
   2b5e4:	f2c0 80e0 	blt.w	2b7a8 <utf8EscapedDump+0x1d4>
        uc = (uint8_t)*buffer++;
   2b5e8:	4629      	mov	r1, r5
   2b5ea:	e074      	b.n	2b6d6 <utf8EscapedDump+0x102>
                continue;
            }

            /* print as an escape sequence */
            char escaped = (char)uc;
            switch (uc) {
   2b5ec:	2a5c      	cmp	r2, #92	; 0x5c
   2b5ee:	d169      	bne.n	2b6c4 <utf8EscapedDump+0xf0>
                escaped = 't';
                break;
            default:
                goto print_utf16;
            }
            if (fprintf(out, "\\%c", escaped) < 0)
   2b5f0:	4980      	ldr	r1, [pc, #512]	; (2b7f4 <utf8EscapedDump+0x220>)
   2b5f2:	4630      	mov	r0, r6
   2b5f4:	f7ef ff02 	bl	1b3fc <fprintf>
   2b5f8:	2800      	cmp	r0, #0
   2b5fa:	f2c0 80d7 	blt.w	2b7ac <utf8EscapedDump+0x1d8>
        uc = (uint8_t)*buffer++;
   2b5fe:	4629      	mov	r1, r5
   2b600:	e069      	b.n	2b6d6 <utf8EscapedDump+0x102>
                escaped = 'f';
   2b602:	2266      	movs	r2, #102	; 0x66
                break;
   2b604:	e7f4      	b.n	2b5f0 <utf8EscapedDump+0x1c>
                escaped = 'n';
   2b606:	226e      	movs	r2, #110	; 0x6e
                break;
   2b608:	e7f2      	b.n	2b5f0 <utf8EscapedDump+0x1c>
                escaped = 'r';
   2b60a:	2272      	movs	r2, #114	; 0x72
                break;
   2b60c:	e7f0      	b.n	2b5f0 <utf8EscapedDump+0x1c>
                escaped = 't';
   2b60e:	2274      	movs	r2, #116	; 0x74
                break;
   2b610:	e7ee      	b.n	2b5f0 <utf8EscapedDump+0x1c>
                escaped = 'b';
   2b612:	2262      	movs	r2, #98	; 0x62
   2b614:	e7ec      	b.n	2b5f0 <utf8EscapedDump+0x1c>
        }

        /* multi-byte UTF-8, decode it */
        unsigned charsNeeded;
        uint32_t min_uc;
        if (unlikely(uc <= 0xC1))
   2b616:	2ac1      	cmp	r2, #193	; 0xc1
   2b618:	f240 80ca 	bls.w	2b7b0 <utf8EscapedDump+0x1dc>
            return CborErrorInvalidUtf8TextString;
        if (uc < 0xE0) {
   2b61c:	2adf      	cmp	r2, #223	; 0xdf
   2b61e:	d830      	bhi.n	2b682 <utf8EscapedDump+0xae>
            /* two-byte UTF-8 */
            charsNeeded = 2;
            min_uc = 0x80;
            uc &= 0x1f;
   2b620:	f002 021f 	and.w	r2, r2, #31
            min_uc = 0x80;
   2b624:	f04f 0c80 	mov.w	ip, #128	; 0x80
            charsNeeded = 2;
   2b628:	2302      	movs	r3, #2
            uc &= 0x07;
        } else {
            return CborErrorInvalidUtf8TextString;
        }

        if (n < charsNeeded - 1)
   2b62a:	1e58      	subs	r0, r3, #1
   2b62c:	42b8      	cmp	r0, r7
   2b62e:	f200 80c5 	bhi.w	2b7bc <utf8EscapedDump+0x1e8>
            return CborErrorInvalidUtf8TextString;

        /* first continuation character */
        uint8_t b = (uint8_t)*buffer++;
   2b632:	3102      	adds	r1, #2
   2b634:	782c      	ldrb	r4, [r5, #0]
        if ((b & 0xc0) != 0x80)
   2b636:	f004 00c0 	and.w	r0, r4, #192	; 0xc0
   2b63a:	2880      	cmp	r0, #128	; 0x80
   2b63c:	f040 80c1 	bne.w	2b7c2 <utf8EscapedDump+0x1ee>
            return CborErrorInvalidUtf8TextString;
        uc <<= 6;
        uc |= b & 0x3f;
   2b640:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2b644:	ea44 1482 	orr.w	r4, r4, r2, lsl #6

        if (charsNeeded > 2) {
   2b648:	2b02      	cmp	r3, #2
   2b64a:	d92b      	bls.n	2b6a4 <utf8EscapedDump+0xd0>
            /* second continuation character */
            b = (uint8_t)*buffer++;
   2b64c:	1ca8      	adds	r0, r5, #2
   2b64e:	786a      	ldrb	r2, [r5, #1]
            if ((b & 0xc0) != 0x80)
   2b650:	f002 01c0 	and.w	r1, r2, #192	; 0xc0
   2b654:	2980      	cmp	r1, #128	; 0x80
   2b656:	f040 80b7 	bne.w	2b7c8 <utf8EscapedDump+0x1f4>
                return CborErrorInvalidUtf8TextString;
            uc <<= 6;
            uc |= b & 0x3f;
   2b65a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   2b65e:	ea42 1484 	orr.w	r4, r2, r4, lsl #6

            if (charsNeeded > 3) {
   2b662:	2b03      	cmp	r3, #3
   2b664:	f240 808c 	bls.w	2b780 <utf8EscapedDump+0x1ac>
                /* third continuation character */
                b = (uint8_t)*buffer++;
   2b668:	1ce8      	adds	r0, r5, #3
   2b66a:	78aa      	ldrb	r2, [r5, #2]
                if ((b & 0xc0) != 0x80)
   2b66c:	f002 01c0 	and.w	r1, r2, #192	; 0xc0
   2b670:	2980      	cmp	r1, #128	; 0x80
   2b672:	f040 80ac 	bne.w	2b7ce <utf8EscapedDump+0x1fa>
                    return CborErrorInvalidUtf8TextString;
                uc <<= 6;
                uc |= b & 0x3f;
   2b676:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   2b67a:	ea42 1484 	orr.w	r4, r2, r4, lsl #6
                b = (uint8_t)*buffer++;
   2b67e:	4605      	mov	r5, r0
   2b680:	e011      	b.n	2b6a6 <utf8EscapedDump+0xd2>
        } else if (uc < 0xF0) {
   2b682:	2aef      	cmp	r2, #239	; 0xef
   2b684:	d805      	bhi.n	2b692 <utf8EscapedDump+0xbe>
            uc &= 0x0f;
   2b686:	f002 020f 	and.w	r2, r2, #15
            min_uc = 0x800;
   2b68a:	f44f 6c00 	mov.w	ip, #2048	; 0x800
            charsNeeded = 3;
   2b68e:	2303      	movs	r3, #3
   2b690:	e7cb      	b.n	2b62a <utf8EscapedDump+0x56>
        } else if (uc < 0xF5) {
   2b692:	2af4      	cmp	r2, #244	; 0xf4
   2b694:	f200 808f 	bhi.w	2b7b6 <utf8EscapedDump+0x1e2>
            uc &= 0x07;
   2b698:	f002 0207 	and.w	r2, r2, #7
            min_uc = 0x10000;
   2b69c:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
            charsNeeded = 4;
   2b6a0:	2304      	movs	r3, #4
   2b6a2:	e7c2      	b.n	2b62a <utf8EscapedDump+0x56>
        uint8_t b = (uint8_t)*buffer++;
   2b6a4:	460d      	mov	r5, r1
            }
        }

        /* overlong sequence? surrogate pair? out or range? */
        if (uc < min_uc || uc - 0xd800U < 2048U || uc > 0x10ffff)
   2b6a6:	4564      	cmp	r4, ip
   2b6a8:	f0c0 8094 	bcc.w	2b7d4 <utf8EscapedDump+0x200>
   2b6ac:	f5a4 4258 	sub.w	r2, r4, #55296	; 0xd800
   2b6b0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   2b6b4:	f0c0 8091 	bcc.w	2b7da <utf8EscapedDump+0x206>
   2b6b8:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
   2b6bc:	f080 8090 	bcs.w	2b7e0 <utf8EscapedDump+0x20c>
            return CborErrorInvalidUtf8TextString;

        /* now print the sequence */
        if (charsNeeded > 3) {
   2b6c0:	2b03      	cmp	r3, #3
   2b6c2:	d85f      	bhi.n	2b784 <utf8EscapedDump+0x1b0>
                        (uc % 0x0400) + 0xdc00) < 0)
                return CborErrorIO;
        } else {
print_utf16:
            /* no surrogate pair needed */
            if (fprintf(out, "\\u%04" PRIX32, uc) < 0)
   2b6c4:	4622      	mov	r2, r4
   2b6c6:	494c      	ldr	r1, [pc, #304]	; (2b7f8 <utf8EscapedDump+0x224>)
   2b6c8:	4630      	mov	r0, r6
   2b6ca:	f7ef fe97 	bl	1b3fc <fprintf>
   2b6ce:	2800      	cmp	r0, #0
   2b6d0:	f2c0 808b 	blt.w	2b7ea <utf8EscapedDump+0x216>
   2b6d4:	4629      	mov	r1, r5
   2b6d6:	463a      	mov	r2, r7
    while (n--) {
   2b6d8:	1e57      	subs	r7, r2, #1
   2b6da:	2a00      	cmp	r2, #0
   2b6dc:	d062      	beq.n	2b7a4 <utf8EscapedDump+0x1d0>
        uc = (uint8_t)*buffer++;
   2b6de:	460d      	mov	r5, r1
   2b6e0:	f815 2b01 	ldrb.w	r2, [r5], #1
   2b6e4:	4614      	mov	r4, r2
        if (uc < 0x80) {
   2b6e6:	2a7f      	cmp	r2, #127	; 0x7f
   2b6e8:	d895      	bhi.n	2b616 <utf8EscapedDump+0x42>
            if (uc < 0x7f && uc >= 0x20 && uc != '\\' && uc != '"') {
   2b6ea:	f1a2 0320 	sub.w	r3, r2, #32
   2b6ee:	2b5e      	cmp	r3, #94	; 0x5e
   2b6f0:	d804      	bhi.n	2b6fc <utf8EscapedDump+0x128>
   2b6f2:	2a5c      	cmp	r2, #92	; 0x5c
   2b6f4:	d002      	beq.n	2b6fc <utf8EscapedDump+0x128>
   2b6f6:	2a22      	cmp	r2, #34	; 0x22
   2b6f8:	f47f af6f 	bne.w	2b5da <utf8EscapedDump+0x6>
            switch (uc) {
   2b6fc:	2a22      	cmp	r2, #34	; 0x22
   2b6fe:	f63f af75 	bhi.w	2b5ec <utf8EscapedDump+0x18>
   2b702:	2a08      	cmp	r2, #8
   2b704:	d3de      	bcc.n	2b6c4 <utf8EscapedDump+0xf0>
   2b706:	f1a2 0308 	sub.w	r3, r2, #8
   2b70a:	2b1a      	cmp	r3, #26
   2b70c:	d8da      	bhi.n	2b6c4 <utf8EscapedDump+0xf0>
   2b70e:	a101      	add	r1, pc, #4	; (adr r1, 2b714 <utf8EscapedDump+0x140>)
   2b710:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   2b714:	0002b613 	.word	0x0002b613
   2b718:	0002b60f 	.word	0x0002b60f
   2b71c:	0002b607 	.word	0x0002b607
   2b720:	0002b6c5 	.word	0x0002b6c5
   2b724:	0002b603 	.word	0x0002b603
   2b728:	0002b60b 	.word	0x0002b60b
   2b72c:	0002b6c5 	.word	0x0002b6c5
   2b730:	0002b6c5 	.word	0x0002b6c5
   2b734:	0002b6c5 	.word	0x0002b6c5
   2b738:	0002b6c5 	.word	0x0002b6c5
   2b73c:	0002b6c5 	.word	0x0002b6c5
   2b740:	0002b6c5 	.word	0x0002b6c5
   2b744:	0002b6c5 	.word	0x0002b6c5
   2b748:	0002b6c5 	.word	0x0002b6c5
   2b74c:	0002b6c5 	.word	0x0002b6c5
   2b750:	0002b6c5 	.word	0x0002b6c5
   2b754:	0002b6c5 	.word	0x0002b6c5
   2b758:	0002b6c5 	.word	0x0002b6c5
   2b75c:	0002b6c5 	.word	0x0002b6c5
   2b760:	0002b6c5 	.word	0x0002b6c5
   2b764:	0002b6c5 	.word	0x0002b6c5
   2b768:	0002b6c5 	.word	0x0002b6c5
   2b76c:	0002b6c5 	.word	0x0002b6c5
   2b770:	0002b6c5 	.word	0x0002b6c5
   2b774:	0002b6c5 	.word	0x0002b6c5
   2b778:	0002b6c5 	.word	0x0002b6c5
   2b77c:	0002b5f1 	.word	0x0002b5f1
            b = (uint8_t)*buffer++;
   2b780:	4605      	mov	r5, r0
   2b782:	e790      	b.n	2b6a6 <utf8EscapedDump+0xd2>
                        (uc % 0x0400) + 0xdc00) < 0)
   2b784:	f3c4 0309 	ubfx	r3, r4, #0, #10
            if (fprintf(out, "\\u%04" PRIX32 "\\u%04" PRIX32,
   2b788:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
   2b78c:	f24d 72c0 	movw	r2, #55232	; 0xd7c0
   2b790:	eb02 2294 	add.w	r2, r2, r4, lsr #10
   2b794:	4919      	ldr	r1, [pc, #100]	; (2b7fc <utf8EscapedDump+0x228>)
   2b796:	4630      	mov	r0, r6
   2b798:	f7ef fe30 	bl	1b3fc <fprintf>
   2b79c:	2800      	cmp	r0, #0
   2b79e:	db22      	blt.n	2b7e6 <utf8EscapedDump+0x212>
   2b7a0:	4629      	mov	r1, r5
   2b7a2:	e798      	b.n	2b6d6 <utf8EscapedDump+0x102>
                return CborErrorIO;
        }
    }
    return CborNoError;
   2b7a4:	2000      	movs	r0, #0
   2b7a6:	e002      	b.n	2b7ae <utf8EscapedDump+0x1da>
                    return CborErrorIO;
   2b7a8:	2004      	movs	r0, #4
   2b7aa:	e000      	b.n	2b7ae <utf8EscapedDump+0x1da>
                return CborErrorIO;
   2b7ac:	2004      	movs	r0, #4
}
   2b7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return CborErrorInvalidUtf8TextString;
   2b7b0:	f44f 7001 	mov.w	r0, #516	; 0x204
   2b7b4:	e7fb      	b.n	2b7ae <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   2b7b6:	f44f 7001 	mov.w	r0, #516	; 0x204
   2b7ba:	e7f8      	b.n	2b7ae <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   2b7bc:	f44f 7001 	mov.w	r0, #516	; 0x204
   2b7c0:	e7f5      	b.n	2b7ae <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   2b7c2:	f44f 7001 	mov.w	r0, #516	; 0x204
   2b7c6:	e7f2      	b.n	2b7ae <utf8EscapedDump+0x1da>
                return CborErrorInvalidUtf8TextString;
   2b7c8:	f44f 7001 	mov.w	r0, #516	; 0x204
   2b7cc:	e7ef      	b.n	2b7ae <utf8EscapedDump+0x1da>
                    return CborErrorInvalidUtf8TextString;
   2b7ce:	f44f 7001 	mov.w	r0, #516	; 0x204
   2b7d2:	e7ec      	b.n	2b7ae <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   2b7d4:	f44f 7001 	mov.w	r0, #516	; 0x204
   2b7d8:	e7e9      	b.n	2b7ae <utf8EscapedDump+0x1da>
   2b7da:	f44f 7001 	mov.w	r0, #516	; 0x204
   2b7de:	e7e6      	b.n	2b7ae <utf8EscapedDump+0x1da>
   2b7e0:	f44f 7001 	mov.w	r0, #516	; 0x204
   2b7e4:	e7e3      	b.n	2b7ae <utf8EscapedDump+0x1da>
                return CborErrorIO;
   2b7e6:	2004      	movs	r0, #4
   2b7e8:	e7e1      	b.n	2b7ae <utf8EscapedDump+0x1da>
                return CborErrorIO;
   2b7ea:	2004      	movs	r0, #4
   2b7ec:	e7df      	b.n	2b7ae <utf8EscapedDump+0x1da>
   2b7ee:	bf00      	nop
   2b7f0:	000352a4 	.word	0x000352a4
   2b7f4:	000352a8 	.word	0x000352a8
   2b7f8:	000352bc 	.word	0x000352bc
   2b7fc:	000352ac 	.word	0x000352ac

0002b800 <value_to_pretty>:
    }
    return CborNoError;
}

static CborError value_to_pretty(FILE *out, CborValue *it)
{
   2b800:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b802:	b087      	sub	sp, #28
   2b804:	4607      	mov	r7, r0
   2b806:	460d      	mov	r5, r1
{ return (CborType)value->type; }
   2b808:	7b8c      	ldrb	r4, [r1, #14]
    CborError err;
    CborType type = cbor_value_get_type(it);
    switch (type) {
   2b80a:	2cc0      	cmp	r4, #192	; 0xc0
   2b80c:	f000 8138 	beq.w	2ba80 <value_to_pretty+0x280>
   2b810:	d849      	bhi.n	2b8a6 <value_to_pretty+0xa6>
   2b812:	2c60      	cmp	r4, #96	; 0x60
   2b814:	f000 80f5 	beq.w	2ba02 <value_to_pretty+0x202>
   2b818:	d920      	bls.n	2b85c <value_to_pretty+0x5c>
   2b81a:	2c80      	cmp	r4, #128	; 0x80
   2b81c:	d002      	beq.n	2b824 <value_to_pretty+0x24>
   2b81e:	2ca0      	cmp	r4, #160	; 0xa0
   2b820:	f040 81c2 	bne.w	2bba8 <value_to_pretty+0x3a8>
    case CborArrayType:
    case CborMapType: {
        /* recursive type */
        CborValue recursed;

        if (fprintf(out, type == CborArrayType ? "[" : "{") < 0)
   2b824:	2c80      	cmp	r4, #128	; 0x80
   2b826:	d062      	beq.n	2b8ee <value_to_pretty+0xee>
   2b828:	49ac      	ldr	r1, [pc, #688]	; (2badc <value_to_pretty+0x2dc>)
   2b82a:	4638      	mov	r0, r7
   2b82c:	f7ef fde6 	bl	1b3fc <fprintf>
   2b830:	2800      	cmp	r0, #0
   2b832:	db7d      	blt.n	2b930 <value_to_pretty+0x130>
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   2b834:	7beb      	ldrb	r3, [r5, #15]
            return CborErrorIO;
        if (!cbor_value_is_length_known(it)) {
   2b836:	f013 0f04 	tst.w	r3, #4
   2b83a:	d005      	beq.n	2b848 <value_to_pretty+0x48>
            if (fprintf(out, "_ ") < 0)
   2b83c:	49a8      	ldr	r1, [pc, #672]	; (2bae0 <value_to_pretty+0x2e0>)
   2b83e:	4638      	mov	r0, r7
   2b840:	f7ef fddc 	bl	1b3fc <fprintf>
   2b844:	2800      	cmp	r0, #0
   2b846:	db75      	blt.n	2b934 <value_to_pretty+0x134>
                return CborErrorIO;
        }

        err = cbor_value_enter_container(it, &recursed);
   2b848:	a902      	add	r1, sp, #8
   2b84a:	4628      	mov	r0, r5
   2b84c:	f7ff fdc3 	bl	2b3d6 <cbor_value_enter_container>
        if (err) {
   2b850:	4606      	mov	r6, r0
   2b852:	2800      	cmp	r0, #0
   2b854:	d04d      	beq.n	2b8f2 <value_to_pretty+0xf2>
            it->offset = recursed.offset;
   2b856:	9b03      	ldr	r3, [sp, #12]
   2b858:	606b      	str	r3, [r5, #4]
            return err;       /* parse error */
   2b85a:	e181      	b.n	2bb60 <value_to_pretty+0x360>
    switch (type) {
   2b85c:	2c00      	cmp	r4, #0
   2b85e:	d06b      	beq.n	2b938 <value_to_pretty+0x138>
   2b860:	2c40      	cmp	r4, #64	; 0x40
   2b862:	f040 81a1 	bne.w	2bba8 <value_to_pretty+0x3a8>
        }
        break;
    }

    case CborByteStringType:{
        size_t n = 0;
   2b866:	2300      	movs	r3, #0
   2b868:	9301      	str	r3, [sp, #4]
{ return value->type == CborByteStringType; }
   2b86a:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_byte_string(value));
   2b86c:	2b40      	cmp	r3, #64	; 0x40
   2b86e:	f040 80ab 	bne.w	2b9c8 <value_to_pretty+0x1c8>
    return _cbor_value_dup_string(value, (void **)buffer, buflen, next);
   2b872:	460b      	mov	r3, r1
   2b874:	aa01      	add	r2, sp, #4
   2b876:	a902      	add	r1, sp, #8
   2b878:	4628      	mov	r0, r5
   2b87a:	f000 f9e5 	bl	2bc48 <_cbor_value_dup_string>
        uint8_t *buffer;
        err = cbor_value_dup_byte_string(it, &buffer, &n, it);
        if (err)
   2b87e:	4606      	mov	r6, r0
   2b880:	2800      	cmp	r0, #0
   2b882:	f040 816d 	bne.w	2bb60 <value_to_pretty+0x360>
            return err;

        bool failed = fprintf(out, "h'") < 0 || hexDump(out, buffer, n) < 0 || fprintf(out, "'") < 0;
   2b886:	4997      	ldr	r1, [pc, #604]	; (2bae4 <value_to_pretty+0x2e4>)
   2b888:	4638      	mov	r0, r7
   2b88a:	f7ef fdb7 	bl	1b3fc <fprintf>
   2b88e:	2800      	cmp	r0, #0
   2b890:	f280 80a4 	bge.w	2b9dc <value_to_pretty+0x1dc>
   2b894:	2401      	movs	r4, #1
        free(buffer);
   2b896:	9802      	ldr	r0, [sp, #8]
   2b898:	f003 f8ea 	bl	2ea70 <free>
        return failed ? CborErrorIO : CborNoError;
   2b89c:	2c00      	cmp	r4, #0
   2b89e:	f000 815f 	beq.w	2bb60 <value_to_pretty+0x360>
   2b8a2:	2604      	movs	r6, #4
   2b8a4:	e15c      	b.n	2bb60 <value_to_pretty+0x360>
    switch (type) {
   2b8a6:	2cf7      	cmp	r4, #247	; 0xf7
   2b8a8:	f200 817e 	bhi.w	2bba8 <value_to_pretty+0x3a8>
   2b8ac:	2ce0      	cmp	r4, #224	; 0xe0
   2b8ae:	f0c0 817b 	bcc.w	2bba8 <value_to_pretty+0x3a8>
   2b8b2:	3ce0      	subs	r4, #224	; 0xe0
   2b8b4:	2c17      	cmp	r4, #23
   2b8b6:	f200 8177 	bhi.w	2bba8 <value_to_pretty+0x3a8>
   2b8ba:	e8df f014 	tbh	[pc, r4, lsl #1]
   2b8be:	0131      	.short	0x0131
   2b8c0:	01750175 	.word	0x01750175
   2b8c4:	01750175 	.word	0x01750175
   2b8c8:	01750175 	.word	0x01750175
   2b8cc:	01750175 	.word	0x01750175
   2b8d0:	01750175 	.word	0x01750175
   2b8d4:	01750175 	.word	0x01750175
   2b8d8:	01750175 	.word	0x01750175
   2b8dc:	01750175 	.word	0x01750175
   2b8e0:	01750175 	.word	0x01750175
   2b8e4:	01750175 	.word	0x01750175
   2b8e8:	0147015c 	.word	0x0147015c
   2b8ec:	0154      	.short	0x0154
        if (fprintf(out, type == CborArrayType ? "[" : "{") < 0)
   2b8ee:	497e      	ldr	r1, [pc, #504]	; (2bae8 <value_to_pretty+0x2e8>)
   2b8f0:	e79b      	b.n	2b82a <value_to_pretty+0x2a>
        err = container_to_pretty(out, &recursed, type);
   2b8f2:	4622      	mov	r2, r4
   2b8f4:	a902      	add	r1, sp, #8
   2b8f6:	4638      	mov	r0, r7
   2b8f8:	f000 f970 	bl	2bbdc <container_to_pretty>
        if (err) {
   2b8fc:	4606      	mov	r6, r0
   2b8fe:	b110      	cbz	r0, 2b906 <value_to_pretty+0x106>
            it->offset = recursed.offset;
   2b900:	9b03      	ldr	r3, [sp, #12]
   2b902:	606b      	str	r3, [r5, #4]
            return err;       /* parse error */
   2b904:	e12c      	b.n	2bb60 <value_to_pretty+0x360>
        err = cbor_value_leave_container(it, &recursed);
   2b906:	a902      	add	r1, sp, #8
   2b908:	4628      	mov	r0, r5
   2b90a:	f7ff fe0b 	bl	2b524 <cbor_value_leave_container>
        if (err)
   2b90e:	4606      	mov	r6, r0
   2b910:	2800      	cmp	r0, #0
   2b912:	f040 8125 	bne.w	2bb60 <value_to_pretty+0x360>
        if (fprintf(out, type == CborArrayType ? "]" : "}") < 0)
   2b916:	2c80      	cmp	r4, #128	; 0x80
   2b918:	d008      	beq.n	2b92c <value_to_pretty+0x12c>
   2b91a:	4974      	ldr	r1, [pc, #464]	; (2baec <value_to_pretty+0x2ec>)
   2b91c:	4638      	mov	r0, r7
   2b91e:	f7ef fd6d 	bl	1b3fc <fprintf>
   2b922:	2800      	cmp	r0, #0
   2b924:	f280 811c 	bge.w	2bb60 <value_to_pretty+0x360>
            return CborErrorIO;
   2b928:	2604      	movs	r6, #4
   2b92a:	e119      	b.n	2bb60 <value_to_pretty+0x360>
        if (fprintf(out, type == CborArrayType ? "]" : "}") < 0)
   2b92c:	4970      	ldr	r1, [pc, #448]	; (2baf0 <value_to_pretty+0x2f0>)
   2b92e:	e7f5      	b.n	2b91c <value_to_pretty+0x11c>
            return CborErrorIO;
   2b930:	2604      	movs	r6, #4
   2b932:	e115      	b.n	2bb60 <value_to_pretty+0x360>
                return CborErrorIO;
   2b934:	2604      	movs	r6, #4
   2b936:	e113      	b.n	2bb60 <value_to_pretty+0x360>
{ return value->type == CborIntegerType; }
   2b938:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_integer(value));
   2b93a:	b96b      	cbnz	r3, 2b958 <value_to_pretty+0x158>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   2b93c:	7bcb      	ldrb	r3, [r1, #15]
                _cbor_value_decode_int64_internal(value) : value->extra;
   2b93e:	f013 0f01 	tst.w	r3, #1
   2b942:	d113      	bne.n	2b96c <value_to_pretty+0x16c>
   2b944:	898a      	ldrh	r2, [r1, #12]
   2b946:	2300      	movs	r3, #0
{ return value->type == CborIntegerType; }
   2b948:	7ba9      	ldrb	r1, [r5, #14]
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   2b94a:	b9a9      	cbnz	r1, 2b978 <value_to_pretty+0x178>
   2b94c:	7be9      	ldrb	r1, [r5, #15]
   2b94e:	f011 0f02 	tst.w	r1, #2
   2b952:	d027      	beq.n	2b9a4 <value_to_pretty+0x1a4>
   2b954:	2100      	movs	r1, #0
   2b956:	e010      	b.n	2b97a <value_to_pretty+0x17a>
    assert(cbor_value_is_integer(value));
   2b958:	f7e8 fed4 	bl	14704 <hal_debugger_connected>
   2b95c:	b100      	cbz	r0, 2b960 <value_to_pretty+0x160>
   2b95e:	be01      	bkpt	0x0001
   2b960:	2300      	movs	r3, #0
   2b962:	461a      	mov	r2, r3
   2b964:	4619      	mov	r1, r3
   2b966:	4618      	mov	r0, r3
   2b968:	f7ed f9dc 	bl	18d24 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   2b96c:	4608      	mov	r0, r1
   2b96e:	f7ff fcb5 	bl	2b2dc <_cbor_value_decode_int64_internal>
   2b972:	4602      	mov	r2, r0
   2b974:	460b      	mov	r3, r1
   2b976:	e7e7      	b.n	2b948 <value_to_pretty+0x148>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   2b978:	2100      	movs	r1, #0
        if (cbor_value_is_unsigned_integer(it)) {
   2b97a:	b9a9      	cbnz	r1, 2b9a8 <value_to_pretty+0x1a8>
            if (++val) {                /* unsigned overflow may happen */
   2b97c:	1c50      	adds	r0, r2, #1
   2b97e:	f143 0100 	adc.w	r1, r3, #0
   2b982:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2b986:	bf08      	it	eq
   2b988:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   2b98c:	d014      	beq.n	2b9b8 <value_to_pretty+0x1b8>
                if (fprintf(out, "-%" PRIu64, val) < 0)
   2b98e:	4602      	mov	r2, r0
   2b990:	460b      	mov	r3, r1
   2b992:	4958      	ldr	r1, [pc, #352]	; (2baf4 <value_to_pretty+0x2f4>)
   2b994:	4638      	mov	r0, r7
   2b996:	f7ef fd31 	bl	1b3fc <fprintf>
   2b99a:	2800      	cmp	r0, #0
   2b99c:	f280 80dc 	bge.w	2bb58 <value_to_pretty+0x358>
        break;

    case CborBooleanType: {
        bool val;
        cbor_value_get_boolean(it, &val);       /* can't fail */
        if (fprintf(out, val ? "true" : "false") < 0)
   2b9a0:	2604      	movs	r6, #4
   2b9a2:	e0dd      	b.n	2bb60 <value_to_pretty+0x360>
   2b9a4:	2101      	movs	r1, #1
   2b9a6:	e7e8      	b.n	2b97a <value_to_pretty+0x17a>
            if (fprintf(out, "%" PRIu64, val) < 0)
   2b9a8:	4953      	ldr	r1, [pc, #332]	; (2baf8 <value_to_pretty+0x2f8>)
   2b9aa:	4638      	mov	r0, r7
   2b9ac:	f7ef fd26 	bl	1b3fc <fprintf>
   2b9b0:	2800      	cmp	r0, #0
   2b9b2:	f280 80d1 	bge.w	2bb58 <value_to_pretty+0x358>
   2b9b6:	e7f3      	b.n	2b9a0 <value_to_pretty+0x1a0>
                if (fprintf(out, "-18446744073709551616") < 0)
   2b9b8:	4950      	ldr	r1, [pc, #320]	; (2bafc <value_to_pretty+0x2fc>)
   2b9ba:	4638      	mov	r0, r7
   2b9bc:	f7ef fd1e 	bl	1b3fc <fprintf>
   2b9c0:	2800      	cmp	r0, #0
   2b9c2:	f280 80c9 	bge.w	2bb58 <value_to_pretty+0x358>
   2b9c6:	e7eb      	b.n	2b9a0 <value_to_pretty+0x1a0>
    assert(cbor_value_is_byte_string(value));
   2b9c8:	f7e8 fe9c 	bl	14704 <hal_debugger_connected>
   2b9cc:	b100      	cbz	r0, 2b9d0 <value_to_pretty+0x1d0>
   2b9ce:	be01      	bkpt	0x0001
   2b9d0:	2300      	movs	r3, #0
   2b9d2:	461a      	mov	r2, r3
   2b9d4:	4619      	mov	r1, r3
   2b9d6:	4618      	mov	r0, r3
   2b9d8:	f7ed f9a4 	bl	18d24 <__assert_func>
        bool failed = fprintf(out, "h'") < 0 || hexDump(out, buffer, n) < 0 || fprintf(out, "'") < 0;
   2b9dc:	9a01      	ldr	r2, [sp, #4]
   2b9de:	9902      	ldr	r1, [sp, #8]
   2b9e0:	4638      	mov	r0, r7
   2b9e2:	f7ff fde3 	bl	2b5ac <hexDump>
   2b9e6:	2800      	cmp	r0, #0
   2b9e8:	da01      	bge.n	2b9ee <value_to_pretty+0x1ee>
   2b9ea:	2401      	movs	r4, #1
   2b9ec:	e753      	b.n	2b896 <value_to_pretty+0x96>
   2b9ee:	4944      	ldr	r1, [pc, #272]	; (2bb00 <value_to_pretty+0x300>)
   2b9f0:	4638      	mov	r0, r7
   2b9f2:	f7ef fd03 	bl	1b3fc <fprintf>
   2b9f6:	2800      	cmp	r0, #0
   2b9f8:	db01      	blt.n	2b9fe <value_to_pretty+0x1fe>
   2b9fa:	2400      	movs	r4, #0
   2b9fc:	e74b      	b.n	2b896 <value_to_pretty+0x96>
   2b9fe:	2401      	movs	r4, #1
   2ba00:	e749      	b.n	2b896 <value_to_pretty+0x96>
        size_t n = 0;
   2ba02:	2300      	movs	r3, #0
   2ba04:	9301      	str	r3, [sp, #4]
{ return value->type == CborTextStringType; }
   2ba06:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_text_string(value));
   2ba08:	2b60      	cmp	r3, #96	; 0x60
   2ba0a:	d11c      	bne.n	2ba46 <value_to_pretty+0x246>
    return _cbor_value_dup_string(value, (void **)buffer, buflen, next);
   2ba0c:	460b      	mov	r3, r1
   2ba0e:	aa01      	add	r2, sp, #4
   2ba10:	a902      	add	r1, sp, #8
   2ba12:	4628      	mov	r0, r5
   2ba14:	f000 f918 	bl	2bc48 <_cbor_value_dup_string>
        if (err)
   2ba18:	4606      	mov	r6, r0
   2ba1a:	2800      	cmp	r0, #0
   2ba1c:	f040 80a0 	bne.w	2bb60 <value_to_pretty+0x360>
        bool failed = fprintf(out, "\"") < 0
   2ba20:	4938      	ldr	r1, [pc, #224]	; (2bb04 <value_to_pretty+0x304>)
   2ba22:	4638      	mov	r0, r7
   2ba24:	f7ef fcea 	bl	1b3fc <fprintf>
                      || fprintf(out, "\"") < 0;
   2ba28:	2800      	cmp	r0, #0
   2ba2a:	da16      	bge.n	2ba5a <value_to_pretty+0x25a>
   2ba2c:	2301      	movs	r3, #1
        bool failed = fprintf(out, "\"") < 0
   2ba2e:	461c      	mov	r4, r3
        free(buffer);
   2ba30:	9802      	ldr	r0, [sp, #8]
   2ba32:	f003 f81d 	bl	2ea70 <free>
        return err != CborNoError ? err :
   2ba36:	2e00      	cmp	r6, #0
   2ba38:	f040 8092 	bne.w	2bb60 <value_to_pretty+0x360>
   2ba3c:	2c00      	cmp	r4, #0
   2ba3e:	f000 808f 	beq.w	2bb60 <value_to_pretty+0x360>
   2ba42:	2604      	movs	r6, #4
   2ba44:	e08c      	b.n	2bb60 <value_to_pretty+0x360>
    assert(cbor_value_is_text_string(value));
   2ba46:	f7e8 fe5d 	bl	14704 <hal_debugger_connected>
   2ba4a:	b100      	cbz	r0, 2ba4e <value_to_pretty+0x24e>
   2ba4c:	be01      	bkpt	0x0001
   2ba4e:	2300      	movs	r3, #0
   2ba50:	461a      	mov	r2, r3
   2ba52:	4619      	mov	r1, r3
   2ba54:	4618      	mov	r0, r3
   2ba56:	f7ed f965 	bl	18d24 <__assert_func>
                      || (err = utf8EscapedDump(out, buffer, n)) != CborNoError
   2ba5a:	9a01      	ldr	r2, [sp, #4]
   2ba5c:	9902      	ldr	r1, [sp, #8]
   2ba5e:	4638      	mov	r0, r7
   2ba60:	f7ff fdb8 	bl	2b5d4 <utf8EscapedDump>
   2ba64:	4606      	mov	r6, r0
   2ba66:	b108      	cbz	r0, 2ba6c <value_to_pretty+0x26c>
                      || fprintf(out, "\"") < 0;
   2ba68:	2301      	movs	r3, #1
   2ba6a:	e7e0      	b.n	2ba2e <value_to_pretty+0x22e>
   2ba6c:	4925      	ldr	r1, [pc, #148]	; (2bb04 <value_to_pretty+0x304>)
   2ba6e:	4638      	mov	r0, r7
   2ba70:	f7ef fcc4 	bl	1b3fc <fprintf>
   2ba74:	2800      	cmp	r0, #0
   2ba76:	db01      	blt.n	2ba7c <value_to_pretty+0x27c>
   2ba78:	2300      	movs	r3, #0
   2ba7a:	e7d8      	b.n	2ba2e <value_to_pretty+0x22e>
   2ba7c:	2301      	movs	r3, #1
   2ba7e:	e7d6      	b.n	2ba2e <value_to_pretty+0x22e>
{ return value->type == CborTagType; }
   2ba80:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_tag(value));
   2ba82:	2bc0      	cmp	r3, #192	; 0xc0
   2ba84:	d120      	bne.n	2bac8 <value_to_pretty+0x2c8>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   2ba86:	7bcb      	ldrb	r3, [r1, #15]
                _cbor_value_decode_int64_internal(value) : value->extra;
   2ba88:	f013 0f01 	tst.w	r3, #1
   2ba8c:	d140      	bne.n	2bb10 <value_to_pretty+0x310>
   2ba8e:	898a      	ldrh	r2, [r1, #12]
   2ba90:	2300      	movs	r3, #0
        if (fprintf(out, "%" PRIu64 "(", tag) < 0)
   2ba92:	491d      	ldr	r1, [pc, #116]	; (2bb08 <value_to_pretty+0x308>)
   2ba94:	4638      	mov	r0, r7
   2ba96:	f7ef fcb1 	bl	1b3fc <fprintf>
   2ba9a:	2800      	cmp	r0, #0
   2ba9c:	db3e      	blt.n	2bb1c <value_to_pretty+0x31c>
        err = cbor_value_advance_fixed(it);
   2ba9e:	4628      	mov	r0, r5
   2baa0:	f7ff fc75 	bl	2b38e <cbor_value_advance_fixed>
        if (err)
   2baa4:	4606      	mov	r6, r0
   2baa6:	2800      	cmp	r0, #0
   2baa8:	d15a      	bne.n	2bb60 <value_to_pretty+0x360>
        err = value_to_pretty(out, it);
   2baaa:	4629      	mov	r1, r5
   2baac:	4638      	mov	r0, r7
   2baae:	f7ff fea7 	bl	2b800 <value_to_pretty>
        if (err)
   2bab2:	4606      	mov	r6, r0
   2bab4:	2800      	cmp	r0, #0
   2bab6:	d153      	bne.n	2bb60 <value_to_pretty+0x360>
        if (fprintf(out, ")") < 0)
   2bab8:	4914      	ldr	r1, [pc, #80]	; (2bb0c <value_to_pretty+0x30c>)
   2baba:	4638      	mov	r0, r7
   2babc:	f7ef fc9e 	bl	1b3fc <fprintf>
   2bac0:	2800      	cmp	r0, #0
   2bac2:	da4d      	bge.n	2bb60 <value_to_pretty+0x360>
            return CborErrorIO;
   2bac4:	2604      	movs	r6, #4
   2bac6:	e04b      	b.n	2bb60 <value_to_pretty+0x360>
    assert(cbor_value_is_tag(value));
   2bac8:	f7e8 fe1c 	bl	14704 <hal_debugger_connected>
   2bacc:	b100      	cbz	r0, 2bad0 <value_to_pretty+0x2d0>
   2bace:	be01      	bkpt	0x0001
   2bad0:	2300      	movs	r3, #0
   2bad2:	461a      	mov	r2, r3
   2bad4:	4619      	mov	r1, r3
   2bad6:	4618      	mov	r0, r3
   2bad8:	f7ed f924 	bl	18d24 <__assert_func>
   2badc:	000352c4 	.word	0x000352c4
   2bae0:	000352dc 	.word	0x000352dc
   2bae4:	00035308 	.word	0x00035308
   2bae8:	00034cac 	.word	0x00034cac
   2baec:	000352c8 	.word	0x000352c8
   2baf0:	000325d4 	.word	0x000325d4
   2baf4:	000352e8 	.word	0x000352e8
   2baf8:	000352e0 	.word	0x000352e0
   2bafc:	000352f0 	.word	0x000352f0
   2bb00:	0003530c 	.word	0x0003530c
   2bb04:	00035310 	.word	0x00035310
   2bb08:	00035314 	.word	0x00035314
   2bb0c:	0003531c 	.word	0x0003531c
                _cbor_value_decode_int64_internal(value) : value->extra;
   2bb10:	4608      	mov	r0, r1
   2bb12:	f7ff fbe3 	bl	2b2dc <_cbor_value_decode_int64_internal>
   2bb16:	4602      	mov	r2, r0
   2bb18:	460b      	mov	r3, r1
   2bb1a:	e7ba      	b.n	2ba92 <value_to_pretty+0x292>
            return CborErrorIO;
   2bb1c:	2604      	movs	r6, #4
   2bb1e:	e01f      	b.n	2bb60 <value_to_pretty+0x360>
{ return value->type == CborSimpleType; }
   2bb20:	7bab      	ldrb	r3, [r5, #14]
    assert(cbor_value_is_simple_type(value));
   2bb22:	2be0      	cmp	r3, #224	; 0xe0
   2bb24:	d108      	bne.n	2bb38 <value_to_pretty+0x338>
        if (fprintf(out, "simple(%" PRIu8 ")", simple_type) < 0)
   2bb26:	7b2a      	ldrb	r2, [r5, #12]
   2bb28:	4926      	ldr	r1, [pc, #152]	; (2bbc4 <value_to_pretty+0x3c4>)
   2bb2a:	4638      	mov	r0, r7
   2bb2c:	f7ef fc66 	bl	1b3fc <fprintf>
   2bb30:	2800      	cmp	r0, #0
   2bb32:	da11      	bge.n	2bb58 <value_to_pretty+0x358>
            return CborErrorIO;
   2bb34:	2604      	movs	r6, #4
   2bb36:	e013      	b.n	2bb60 <value_to_pretty+0x360>
   2bb38:	f7e8 fde4 	bl	14704 <hal_debugger_connected>
   2bb3c:	b100      	cbz	r0, 2bb40 <value_to_pretty+0x340>
   2bb3e:	be01      	bkpt	0x0001
   2bb40:	2300      	movs	r3, #0
   2bb42:	461a      	mov	r2, r3
   2bb44:	4619      	mov	r1, r3
   2bb46:	4618      	mov	r0, r3
   2bb48:	f7ed f8ec 	bl	18d24 <__assert_func>
        if (fprintf(out, "null") < 0)
   2bb4c:	491e      	ldr	r1, [pc, #120]	; (2bbc8 <value_to_pretty+0x3c8>)
   2bb4e:	4638      	mov	r0, r7
   2bb50:	f7ef fc54 	bl	1b3fc <fprintf>
   2bb54:	2800      	cmp	r0, #0
   2bb56:	db30      	blt.n	2bbba <value_to_pretty+0x3ba>
        if (fprintf(out, "invalid") < 0)
            return CborErrorIO;
        return CborErrorUnknownType;
    }

    err = cbor_value_advance_fixed(it);
   2bb58:	4628      	mov	r0, r5
   2bb5a:	f7ff fc18 	bl	2b38e <cbor_value_advance_fixed>
   2bb5e:	4606      	mov	r6, r0
    return err;
}
   2bb60:	4630      	mov	r0, r6
   2bb62:	b007      	add	sp, #28
   2bb64:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (fprintf(out, "undefined") < 0)
   2bb66:	4919      	ldr	r1, [pc, #100]	; (2bbcc <value_to_pretty+0x3cc>)
   2bb68:	4638      	mov	r0, r7
   2bb6a:	f7ef fc47 	bl	1b3fc <fprintf>
   2bb6e:	2800      	cmp	r0, #0
   2bb70:	daf2      	bge.n	2bb58 <value_to_pretty+0x358>
            return CborErrorIO;
   2bb72:	2604      	movs	r6, #4
   2bb74:	e7f4      	b.n	2bb60 <value_to_pretty+0x360>
{ return value->type == CborBooleanType; }
   2bb76:	7bab      	ldrb	r3, [r5, #14]
    assert(cbor_value_is_boolean(value));
   2bb78:	2bf5      	cmp	r3, #245	; 0xf5
   2bb7a:	d109      	bne.n	2bb90 <value_to_pretty+0x390>
    *result = !!value->extra;
   2bb7c:	89ab      	ldrh	r3, [r5, #12]
        if (fprintf(out, val ? "true" : "false") < 0)
   2bb7e:	b18b      	cbz	r3, 2bba4 <value_to_pretty+0x3a4>
   2bb80:	4913      	ldr	r1, [pc, #76]	; (2bbd0 <value_to_pretty+0x3d0>)
   2bb82:	4638      	mov	r0, r7
   2bb84:	f7ef fc3a 	bl	1b3fc <fprintf>
   2bb88:	2800      	cmp	r0, #0
   2bb8a:	dae5      	bge.n	2bb58 <value_to_pretty+0x358>
            return CborErrorIO;
   2bb8c:	2604      	movs	r6, #4
   2bb8e:	e7e7      	b.n	2bb60 <value_to_pretty+0x360>
    assert(cbor_value_is_boolean(value));
   2bb90:	f7e8 fdb8 	bl	14704 <hal_debugger_connected>
   2bb94:	b100      	cbz	r0, 2bb98 <value_to_pretty+0x398>
   2bb96:	be01      	bkpt	0x0001
   2bb98:	2300      	movs	r3, #0
   2bb9a:	461a      	mov	r2, r3
   2bb9c:	4619      	mov	r1, r3
   2bb9e:	4618      	mov	r0, r3
   2bba0:	f7ed f8c0 	bl	18d24 <__assert_func>
        if (fprintf(out, val ? "true" : "false") < 0)
   2bba4:	490b      	ldr	r1, [pc, #44]	; (2bbd4 <value_to_pretty+0x3d4>)
   2bba6:	e7ec      	b.n	2bb82 <value_to_pretty+0x382>
        if (fprintf(out, "invalid") < 0)
   2bba8:	490b      	ldr	r1, [pc, #44]	; (2bbd8 <value_to_pretty+0x3d8>)
   2bbaa:	4638      	mov	r0, r7
   2bbac:	f7ef fc26 	bl	1b3fc <fprintf>
   2bbb0:	2800      	cmp	r0, #0
   2bbb2:	db04      	blt.n	2bbbe <value_to_pretty+0x3be>
        return CborErrorUnknownType;
   2bbb4:	f240 1603 	movw	r6, #259	; 0x103
   2bbb8:	e7d2      	b.n	2bb60 <value_to_pretty+0x360>
            return CborErrorIO;
   2bbba:	2604      	movs	r6, #4
   2bbbc:	e7d0      	b.n	2bb60 <value_to_pretty+0x360>
            return CborErrorIO;
   2bbbe:	2604      	movs	r6, #4
   2bbc0:	e7ce      	b.n	2bb60 <value_to_pretty+0x360>
   2bbc2:	bf00      	nop
   2bbc4:	00035320 	.word	0x00035320
   2bbc8:	00035330 	.word	0x00035330
   2bbcc:	00035338 	.word	0x00035338
   2bbd0:	000352d4 	.word	0x000352d4
   2bbd4:	000352cc 	.word	0x000352cc
   2bbd8:	00035344 	.word	0x00035344

0002bbdc <container_to_pretty>:
{
   2bbdc:	b570      	push	{r4, r5, r6, lr}
   2bbde:	4604      	mov	r4, r0
   2bbe0:	460d      	mov	r5, r1
   2bbe2:	4616      	mov	r6, r2
    const char *comma = "";
   2bbe4:	4a12      	ldr	r2, [pc, #72]	; (2bc30 <container_to_pretty+0x54>)
    while (!cbor_value_at_end(it)) {
   2bbe6:	e000      	b.n	2bbea <container_to_pretty+0xe>
{
   2bbe8:	4a12      	ldr	r2, [pc, #72]	; (2bc34 <container_to_pretty+0x58>)
{ return it->remaining == 0; }
   2bbea:	68ab      	ldr	r3, [r5, #8]
    while (!cbor_value_at_end(it)) {
   2bbec:	b1e3      	cbz	r3, 2bc28 <container_to_pretty+0x4c>
        if (fprintf(out, "%s", comma) < 0)
   2bbee:	4912      	ldr	r1, [pc, #72]	; (2bc38 <container_to_pretty+0x5c>)
   2bbf0:	4620      	mov	r0, r4
   2bbf2:	f7ef fc03 	bl	1b3fc <fprintf>
   2bbf6:	2800      	cmp	r0, #0
   2bbf8:	db15      	blt.n	2bc26 <container_to_pretty+0x4a>
        CborError err = value_to_pretty(out, it);
   2bbfa:	4629      	mov	r1, r5
   2bbfc:	4620      	mov	r0, r4
   2bbfe:	f7ff fdff 	bl	2b800 <value_to_pretty>
        if (err)
   2bc02:	4603      	mov	r3, r0
   2bc04:	b980      	cbnz	r0, 2bc28 <container_to_pretty+0x4c>
        if (containerType == CborArrayType)
   2bc06:	2e80      	cmp	r6, #128	; 0x80
   2bc08:	d0ee      	beq.n	2bbe8 <container_to_pretty+0xc>
        if (fprintf(out, ": ") < 0)
   2bc0a:	490c      	ldr	r1, [pc, #48]	; (2bc3c <container_to_pretty+0x60>)
   2bc0c:	4620      	mov	r0, r4
   2bc0e:	f7ef fbf5 	bl	1b3fc <fprintf>
   2bc12:	2800      	cmp	r0, #0
   2bc14:	db0a      	blt.n	2bc2c <container_to_pretty+0x50>
        err = value_to_pretty(out, it);
   2bc16:	4629      	mov	r1, r5
   2bc18:	4620      	mov	r0, r4
   2bc1a:	f7ff fdf1 	bl	2b800 <value_to_pretty>
        if (err)
   2bc1e:	4603      	mov	r3, r0
   2bc20:	2800      	cmp	r0, #0
   2bc22:	d0e1      	beq.n	2bbe8 <container_to_pretty+0xc>
   2bc24:	e000      	b.n	2bc28 <container_to_pretty+0x4c>
            return CborErrorIO;
   2bc26:	2304      	movs	r3, #4
}
   2bc28:	4618      	mov	r0, r3
   2bc2a:	bd70      	pop	{r4, r5, r6, pc}
            return CborErrorIO;
   2bc2c:	2304      	movs	r3, #4
   2bc2e:	e7fb      	b.n	2bc28 <container_to_pretty+0x4c>
   2bc30:	00034114 	.word	0x00034114
   2bc34:	0003534c 	.word	0x0003534c
   2bc38:	00030424 	.word	0x00030424
   2bc3c:	000307f8 	.word	0x000307f8

0002bc40 <cbor_value_to_pretty_advance>:
 * done by appending a comma to the output stream.
 *
 * \sa cbor_value_to_pretty(), cbor_value_to_json_advance()
 */
CborError cbor_value_to_pretty_advance(FILE *out, CborValue *value)
{
   2bc40:	b508      	push	{r3, lr}
    return value_to_pretty(out, value);
   2bc42:	f7ff fddd 	bl	2b800 <value_to_pretty>
}
   2bc46:	bd08      	pop	{r3, pc}

0002bc48 <_cbor_value_dup_string>:
 * malloc'ed block.
 *
 * \sa cbor_value_copy_byte_string(), cbor_value_dup_text_string()
 */
CborError _cbor_value_dup_string(const CborValue *value, void **buffer, size_t *buflen, CborValue *next)
{
   2bc48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert(buffer);
   2bc4c:	b181      	cbz	r1, 2bc70 <_cbor_value_dup_string+0x28>
   2bc4e:	4605      	mov	r5, r0
   2bc50:	4614      	mov	r4, r2
   2bc52:	461e      	mov	r6, r3
   2bc54:	460f      	mov	r7, r1
    assert(buflen);
   2bc56:	b1aa      	cbz	r2, 2bc84 <_cbor_value_dup_string+0x3c>
    *buflen = SIZE_MAX;
   2bc58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2bc5c:	6013      	str	r3, [r2, #0]
    CborError err = _cbor_value_copy_string(value, NULL, buflen, NULL);
   2bc5e:	2300      	movs	r3, #0
   2bc60:	4619      	mov	r1, r3
   2bc62:	f7ff fc87 	bl	2b574 <_cbor_value_copy_string>
    if (err)
   2bc66:	4680      	mov	r8, r0
   2bc68:	b1b0      	cbz	r0, 2bc98 <_cbor_value_dup_string+0x50>
    if (err) {
        free(*buffer);
        return err;
    }
    return CborNoError;
}
   2bc6a:	4640      	mov	r0, r8
   2bc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(buffer);
   2bc70:	f7e8 fd48 	bl	14704 <hal_debugger_connected>
   2bc74:	b100      	cbz	r0, 2bc78 <_cbor_value_dup_string+0x30>
   2bc76:	be01      	bkpt	0x0001
   2bc78:	2300      	movs	r3, #0
   2bc7a:	461a      	mov	r2, r3
   2bc7c:	4619      	mov	r1, r3
   2bc7e:	4618      	mov	r0, r3
   2bc80:	f7ed f850 	bl	18d24 <__assert_func>
    assert(buflen);
   2bc84:	f7e8 fd3e 	bl	14704 <hal_debugger_connected>
   2bc88:	b100      	cbz	r0, 2bc8c <_cbor_value_dup_string+0x44>
   2bc8a:	be01      	bkpt	0x0001
   2bc8c:	2300      	movs	r3, #0
   2bc8e:	461a      	mov	r2, r3
   2bc90:	4619      	mov	r1, r3
   2bc92:	4618      	mov	r0, r3
   2bc94:	f7ed f846 	bl	18d24 <__assert_func>
    ++*buflen;
   2bc98:	6820      	ldr	r0, [r4, #0]
   2bc9a:	3001      	adds	r0, #1
   2bc9c:	6020      	str	r0, [r4, #0]
    *buffer = malloc(*buflen);
   2bc9e:	f002 feb1 	bl	2ea04 <malloc>
   2bca2:	4601      	mov	r1, r0
   2bca4:	6038      	str	r0, [r7, #0]
    if (!*buffer) {
   2bca6:	b158      	cbz	r0, 2bcc0 <_cbor_value_dup_string+0x78>
    err = _cbor_value_copy_string(value, *buffer, buflen, next);
   2bca8:	4633      	mov	r3, r6
   2bcaa:	4622      	mov	r2, r4
   2bcac:	4628      	mov	r0, r5
   2bcae:	f7ff fc61 	bl	2b574 <_cbor_value_copy_string>
    if (err) {
   2bcb2:	4680      	mov	r8, r0
   2bcb4:	2800      	cmp	r0, #0
   2bcb6:	d0d8      	beq.n	2bc6a <_cbor_value_dup_string+0x22>
        free(*buffer);
   2bcb8:	6838      	ldr	r0, [r7, #0]
   2bcba:	f002 fed9 	bl	2ea70 <free>
        return err;
   2bcbe:	e7d4      	b.n	2bc6a <_cbor_value_dup_string+0x22>
        return CborErrorOutOfMemory;
   2bcc0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
   2bcc4:	e7d1      	b.n	2bc6a <_cbor_value_dup_string+0x22>
	...

0002bcc8 <hal_bsp_flash_dev>:
};

const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    if (id != 0) {
   2bcc8:	b908      	cbnz	r0, 2bcce <hal_bsp_flash_dev+0x6>
        return (NULL);
    }
    return &apollo3_flash_dev;
   2bcca:	4802      	ldr	r0, [pc, #8]	; (2bcd4 <hal_bsp_flash_dev+0xc>)
   2bccc:	4770      	bx	lr
        return (NULL);
   2bcce:	2000      	movs	r0, #0
}
   2bcd0:	4770      	bx	lr
   2bcd2:	bf00      	nop
   2bcd4:	00037408 	.word	0x00037408

0002bcd8 <hal_bsp_init>:
    return dump_cfg;
}

void
hal_bsp_init(void)
{
   2bcd8:	b508      	push	{r3, lr}
    /* Create all available Apollo3 peripherals */
    apollo3_periph_create();
   2bcda:	f000 f87b 	bl	2bdd4 <apollo3_periph_create>
}
   2bcde:	bd08      	pop	{r3, pc}

0002bce0 <hal_flash_init>:

static uint8_t protected_flash[1];

int
hal_flash_init(void)
{
   2bce0:	b538      	push	{r3, r4, r5, lr}
    const struct hal_flash *hf;
    uint8_t i;
    int rc = 0;
   2bce2:	2500      	movs	r5, #0
    const uint8_t max_id = MYNEWT_VAL(HAL_FLASH_MAX_DEVICE_COUNT) ? MYNEWT_VAL(HAL_FLASH_MAX_DEVICE_COUNT) : 0xFF;

    for (i = 0; i < max_id; i++) {
   2bce4:	462c      	mov	r4, r5
   2bce6:	e001      	b.n	2bcec <hal_flash_init+0xc>
   2bce8:	3401      	adds	r4, #1
   2bcea:	b2e4      	uxtb	r4, r4
   2bcec:	2cff      	cmp	r4, #255	; 0xff
   2bcee:	d00b      	beq.n	2bd08 <hal_flash_init+0x28>
        hf = hal_bsp_flash_dev(i);
   2bcf0:	4620      	mov	r0, r4
   2bcf2:	f7ff ffe9 	bl	2bcc8 <hal_bsp_flash_dev>
        if (!hf) {
   2bcf6:	b138      	cbz	r0, 2bd08 <hal_flash_init+0x28>
                break;
            } else {
                continue;
            }
        }
        if (hf->hf_itf->hff_init(hf)) {
   2bcf8:	6802      	ldr	r2, [r0, #0]
   2bcfa:	6952      	ldr	r2, [r2, #20]
   2bcfc:	4790      	blx	r2
   2bcfe:	2800      	cmp	r0, #0
   2bd00:	d0f2      	beq.n	2bce8 <hal_flash_init+0x8>
            rc = SYS_EIO;
   2bd02:	f06f 0504 	mvn.w	r5, #4
   2bd06:	e7ef      	b.n	2bce8 <hal_flash_init+0x8>
        }
    }
    return rc;
}
   2bd08:	4628      	mov	r0, r5
   2bd0a:	bd38      	pop	{r3, r4, r5, pc}

0002bd0c <apollo3_periph_create_timers>:
#endif
#endif

static void
apollo3_periph_create_timers(void)
{
   2bd0c:	b500      	push	{lr}
   2bd0e:	b083      	sub	sp, #12

    (void) timer_cfg;
    (void) rc;

#if MYNEWT_VAL(TIMER_0)
    timer_cfg.source = MYNEWT_VAL(TIMER_0_SOURCE);
   2bd10:	2302      	movs	r3, #2
   2bd12:	f88d 3004 	strb.w	r3, [sp, #4]
    rc = hal_timer_init(0, &timer_cfg);
   2bd16:	a901      	add	r1, sp, #4
   2bd18:	2000      	movs	r0, #0
   2bd1a:	f002 f851 	bl	2ddc0 <hal_timer_init>
    assert(rc == 0);
   2bd1e:	b938      	cbnz	r0, 2bd30 <apollo3_periph_create_timers+0x24>
    rc = hal_timer_init(1, &timer_cfg);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   2bd20:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2bd24:	f002 fd52 	bl	2e7cc <os_cputime_init>
    assert(rc == 0);
   2bd28:	b960      	cbnz	r0, 2bd44 <apollo3_periph_create_timers+0x38>
#endif
}
   2bd2a:	b003      	add	sp, #12
   2bd2c:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   2bd30:	f7e8 fce8 	bl	14704 <hal_debugger_connected>
   2bd34:	b100      	cbz	r0, 2bd38 <apollo3_periph_create_timers+0x2c>
   2bd36:	be01      	bkpt	0x0001
   2bd38:	2300      	movs	r3, #0
   2bd3a:	461a      	mov	r2, r3
   2bd3c:	4619      	mov	r1, r3
   2bd3e:	4618      	mov	r0, r3
   2bd40:	f7ec fff0 	bl	18d24 <__assert_func>
    assert(rc == 0);
   2bd44:	f7e8 fcde 	bl	14704 <hal_debugger_connected>
   2bd48:	b100      	cbz	r0, 2bd4c <apollo3_periph_create_timers+0x40>
   2bd4a:	be01      	bkpt	0x0001
   2bd4c:	2300      	movs	r3, #0
   2bd4e:	461a      	mov	r2, r3
   2bd50:	4619      	mov	r1, r3
   2bd52:	4618      	mov	r0, r3
   2bd54:	f7ec ffe6 	bl	18d24 <__assert_func>

0002bd58 <apollo3_periph_create_uart>:
#endif
}

static void
apollo3_periph_create_uart(void)
{
   2bd58:	b500      	push	{lr}
   2bd5a:	b083      	sub	sp, #12
    int rc;

    (void)rc;

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create(&os_bsp_uart0.ud_dev, "uart0",
   2bd5c:	4b16      	ldr	r3, [pc, #88]	; (2bdb8 <apollo3_periph_create_uart+0x60>)
   2bd5e:	9301      	str	r3, [sp, #4]
   2bd60:	4b16      	ldr	r3, [pc, #88]	; (2bdbc <apollo3_periph_create_uart+0x64>)
   2bd62:	9300      	str	r3, [sp, #0]
   2bd64:	2300      	movs	r3, #0
   2bd66:	2201      	movs	r2, #1
   2bd68:	4915      	ldr	r1, [pc, #84]	; (2bdc0 <apollo3_periph_create_uart+0x68>)
   2bd6a:	4816      	ldr	r0, [pc, #88]	; (2bdc4 <apollo3_periph_create_uart+0x6c>)
   2bd6c:	f7ed faca 	bl	19304 <os_dev_create>
                       OS_DEV_INIT_PRIMARY, 0, uart_hal_init,
                       (void *)&os_bsp_uart0_cfg);
    assert(rc == 0);
   2bd70:	b968      	cbnz	r0, 2bd8e <apollo3_periph_create_uart+0x36>
#endif
#if MYNEWT_VAL(UART_1)
    rc = os_dev_create(&os_bsp_uart1.ud_dev, "uart1",
   2bd72:	4b15      	ldr	r3, [pc, #84]	; (2bdc8 <apollo3_periph_create_uart+0x70>)
   2bd74:	9301      	str	r3, [sp, #4]
   2bd76:	4b11      	ldr	r3, [pc, #68]	; (2bdbc <apollo3_periph_create_uart+0x64>)
   2bd78:	9300      	str	r3, [sp, #0]
   2bd7a:	2301      	movs	r3, #1
   2bd7c:	461a      	mov	r2, r3
   2bd7e:	4913      	ldr	r1, [pc, #76]	; (2bdcc <apollo3_periph_create_uart+0x74>)
   2bd80:	4813      	ldr	r0, [pc, #76]	; (2bdd0 <apollo3_periph_create_uart+0x78>)
   2bd82:	f7ed fabf 	bl	19304 <os_dev_create>
                       OS_DEV_INIT_PRIMARY, 1, uart_hal_init,
                       (void *)&os_bsp_uart1_cfg);
    assert(rc == 0);
   2bd86:	b960      	cbnz	r0, 2bda2 <apollo3_periph_create_uart+0x4a>
#endif
}
   2bd88:	b003      	add	sp, #12
   2bd8a:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   2bd8e:	f7e8 fcb9 	bl	14704 <hal_debugger_connected>
   2bd92:	b100      	cbz	r0, 2bd96 <apollo3_periph_create_uart+0x3e>
   2bd94:	be01      	bkpt	0x0001
   2bd96:	2300      	movs	r3, #0
   2bd98:	461a      	mov	r2, r3
   2bd9a:	4619      	mov	r1, r3
   2bd9c:	4618      	mov	r0, r3
   2bd9e:	f7ec ffc1 	bl	18d24 <__assert_func>
    assert(rc == 0);
   2bda2:	f7e8 fcaf 	bl	14704 <hal_debugger_connected>
   2bda6:	b100      	cbz	r0, 2bdaa <apollo3_periph_create_uart+0x52>
   2bda8:	be01      	bkpt	0x0001
   2bdaa:	2300      	movs	r3, #0
   2bdac:	461a      	mov	r2, r3
   2bdae:	4619      	mov	r1, r3
   2bdb0:	4618      	mov	r0, r3
   2bdb2:	f7ec ffb7 	bl	18d24 <__assert_func>
   2bdb6:	bf00      	nop
   2bdb8:	00035358 	.word	0x00035358
   2bdbc:	0002ed8d 	.word	0x0002ed8d
   2bdc0:	00033dc8 	.word	0x00033dc8
   2bdc4:	10006f24 	.word	0x10006f24
   2bdc8:	0003535c 	.word	0x0003535c
   2bdcc:	00035350 	.word	0x00035350
   2bdd0:	10006f60 	.word	0x10006f60

0002bdd4 <apollo3_periph_create>:
#endif
}

void
apollo3_periph_create(void)
{
   2bdd4:	b508      	push	{r3, lr}
    apollo3_periph_create_timers();
   2bdd6:	f7ff ff99 	bl	2bd0c <apollo3_periph_create_timers>
    apollo3_periph_create_adc();
    apollo3_periph_create_uart();
   2bdda:	f7ff ffbd 	bl	2bd58 <apollo3_periph_create_uart>
    apollo3_periph_create_i2c();
    apollo3_periph_create_spi();
}
   2bdde:	bd08      	pop	{r3, pc}

0002bde0 <buffer_compare>:
buffer_compare(void *b1, void *b2, uint32_t len)
{
    uint8_t *p1 = b1;
    uint8_t *p2 = b2;

    for (uint32_t i = 0; i < len; i++)
   2bde0:	2300      	movs	r3, #0
   2bde2:	4293      	cmp	r3, r2
   2bde4:	d20c      	bcs.n	2be00 <buffer_compare+0x20>
{
   2bde6:	b430      	push	{r4, r5}
    {
        if (p1[i] != p2[i])
   2bde8:	5cc5      	ldrb	r5, [r0, r3]
   2bdea:	5ccc      	ldrb	r4, [r1, r3]
   2bdec:	42a5      	cmp	r5, r4
   2bdee:	d105      	bne.n	2bdfc <buffer_compare+0x1c>
    for (uint32_t i = 0; i < len; i++)
   2bdf0:	3301      	adds	r3, #1
   2bdf2:	4293      	cmp	r3, r2
   2bdf4:	d3f8      	bcc.n	2bde8 <buffer_compare+0x8>
        {
            return false;
        }
    }

    return true;
   2bdf6:	2001      	movs	r0, #1
}
   2bdf8:	bc30      	pop	{r4, r5}
   2bdfa:	4770      	bx	lr
            return false;
   2bdfc:	2000      	movs	r0, #0
   2bdfe:	e7fb      	b.n	2bdf8 <buffer_compare+0x18>
    return true;
   2be00:	2001      	movs	r0, #1
}
   2be02:	4770      	bx	lr

0002be04 <am_hal_ble_crc_nz>:
// Helper function for CRC caculation of BLE patch.
//
//*****************************************************************************
static uint16_t
am_hal_ble_crc_nz(uint8_t *pui8Data, uint32_t len)
{
   2be04:	b430      	push	{r4, r5}
   2be06:	4605      	mov	r5, r0
    uint16_t ui16CurValue = 0;
    uint32_t i;

    for (i = 0; i < len; i++)
   2be08:	2300      	movs	r3, #0
    uint16_t ui16CurValue = 0;
   2be0a:	4618      	mov	r0, r3
    for (i = 0; i < len; i++)
   2be0c:	428b      	cmp	r3, r1
   2be0e:	d20a      	bcs.n	2be26 <am_hal_ble_crc_nz+0x22>
    {
        ui16CurValue = ccitt_table[(((uint8_t)(ui16CurValue >> 8)) ^ pui8Data[i]) & 0xFF] ^ (ui16CurValue << 8);
   2be10:	5cea      	ldrb	r2, [r5, r3]
   2be12:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
   2be16:	4c05      	ldr	r4, [pc, #20]	; (2be2c <am_hal_ble_crc_nz+0x28>)
   2be18:	f934 2012 	ldrsh.w	r2, [r4, r2, lsl #1]
   2be1c:	ea82 2000 	eor.w	r0, r2, r0, lsl #8
   2be20:	b280      	uxth	r0, r0
    for (i = 0; i < len; i++)
   2be22:	3301      	adds	r3, #1
   2be24:	e7f2      	b.n	2be0c <am_hal_ble_crc_nz+0x8>
    }

    return ((ui16CurValue ^ 0) & ((1 << 16) - 1));
}
   2be26:	bc30      	pop	{r4, r5}
   2be28:	4770      	bx	lr
   2be2a:	bf00      	nop
   2be2c:	00035360 	.word	0x00035360

0002be30 <am_hal_ble_check_status>:
// Return true if BSTATUS is high.
//
//*****************************************************************************
static bool
am_hal_ble_check_status(am_hal_ble_state_t *pBle)
{
   2be30:	4603      	mov	r3, r0
    //
    // We need to make a special exception for "continue" packets, since the
    // BLE radio may deassert the STATUS signal mid-packet.
    //
    if (pBle->bContinuePacket)
   2be32:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
   2be36:	b928      	cbnz	r0, 2be44 <am_hal_ble_check_status+0x14>
    {
        pBle->bContinuePacket = false;
        return true;
    }

    if ( BLEIFn(0)->BSTATUS_b.SPISTATUS == 0)
   2be38:	4b04      	ldr	r3, [pc, #16]	; (2be4c <am_hal_ble_check_status+0x1c>)
   2be3a:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
   2be3e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    {
        return false;
    }

    return true;
} // am_hal_ble_check_status()
   2be42:	4770      	bx	lr
        pBle->bContinuePacket = false;
   2be44:	2200      	movs	r2, #0
   2be46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        return true;
   2be4a:	4770      	bx	lr
   2be4c:	5000c000 	.word	0x5000c000

0002be50 <am_hal_ble_bus_release>:
//
//*****************************************************************************
static void
am_hal_ble_bus_release(am_hal_ble_state_t *pBle)
{
    pBle->bBusy = false;
   2be50:	2300      	movs	r3, #0
   2be52:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_11);
}
   2be56:	4770      	bx	lr

0002be58 <am_hal_ble_cmd_write>:
    uint32_t ui32Module;

    //
    // Check the handle.
    //
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2be58:	2800      	cmp	r0, #0
   2be5a:	d035      	beq.n	2bec8 <am_hal_ble_cmd_write+0x70>
   2be5c:	6803      	ldr	r3, [r0, #0]
   2be5e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2be62:	4a1c      	ldr	r2, [pc, #112]	; (2bed4 <am_hal_ble_cmd_write+0x7c>)
   2be64:	4293      	cmp	r3, r2
   2be66:	d131      	bne.n	2becc <am_hal_ble_cmd_write+0x74>
{
   2be68:	b430      	push	{r4, r5}
    ui32Module = ((am_hal_ble_state_t *) pHandle)->ui32Module;

    //
    // Figure out the command word and the offset register. Then write them.
    //
    switch (psTransfer->ui8OffsetLen)
   2be6a:	79cb      	ldrb	r3, [r1, #7]
   2be6c:	2b03      	cmp	r3, #3
   2be6e:	d82f      	bhi.n	2bed0 <am_hal_ble_cmd_write+0x78>
   2be70:	e8df f003 	tbb	[pc, r3]
   2be74:	0a060211 	.word	0x0a060211
            ui32CmdWord = 0;
            ui32OffsetHigh = 0;
            break;

        case 1:
            ui32CmdWord = _VAL2FLD(BLEIF_CMD_OFFSETLO, psTransfer->pui8Offset[0]);
   2be78:	790c      	ldrb	r4, [r1, #4]
   2be7a:	0624      	lsls	r4, r4, #24
            ui32OffsetHigh = 0;
   2be7c:	2000      	movs	r0, #0
            break;
   2be7e:	e00c      	b.n	2be9a <am_hal_ble_cmd_write+0x42>

        case 2:
            ui32CmdWord = _VAL2FLD(BLEIF_CMD_OFFSETLO, psTransfer->pui8Offset[1]);
   2be80:	794c      	ldrb	r4, [r1, #5]
   2be82:	0624      	lsls	r4, r4, #24
            ui32OffsetHigh = psTransfer->pui8Offset[0];
   2be84:	7908      	ldrb	r0, [r1, #4]
            break;
   2be86:	e008      	b.n	2be9a <am_hal_ble_cmd_write+0x42>

        case 3:
            ui32CmdWord = _VAL2FLD(BLEIF_CMD_OFFSETLO, psTransfer->pui8Offset[2]);
   2be88:	798c      	ldrb	r4, [r1, #6]
   2be8a:	0624      	lsls	r4, r4, #24
            ui32OffsetHigh = ((psTransfer->pui8Offset[1]) |
   2be8c:	7948      	ldrb	r0, [r1, #5]
                              (psTransfer->pui8Offset[0] << 8));
   2be8e:	790a      	ldrb	r2, [r1, #4]
            ui32OffsetHigh = ((psTransfer->pui8Offset[1]) |
   2be90:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
            break;
   2be94:	e001      	b.n	2be9a <am_hal_ble_cmd_write+0x42>
    switch (psTransfer->ui8OffsetLen)
   2be96:	2000      	movs	r0, #0
   2be98:	4604      	mov	r4, r0
        default:
            // Offset length was incorrect.
            return AM_HAL_STATUS_INVALID_ARG;
    }

    ui32CmdWord |= (_VAL2FLD(BLEIF_CMD_OFFSETCNT, psTransfer->ui8OffsetLen) |
   2be9a:	015b      	lsls	r3, r3, #5
   2be9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
                    _VAL2FLD(BLEIF_CMD_TSIZE, psTransfer->ui16Length)       |
   2bea0:	890d      	ldrh	r5, [r1, #8]
   2bea2:	4a0d      	ldr	r2, [pc, #52]	; (2bed8 <am_hal_ble_cmd_write+0x80>)
   2bea4:	ea02 2205 	and.w	r2, r2, r5, lsl #8
    ui32CmdWord |= (_VAL2FLD(BLEIF_CMD_OFFSETCNT, psTransfer->ui8OffsetLen) |
   2bea8:	4313      	orrs	r3, r2
                    _VAL2FLD(BLEIF_CMD_CONT, psTransfer->bContinue)         |
   2beaa:	7b0a      	ldrb	r2, [r1, #12]
   2beac:	01d2      	lsls	r2, r2, #7
   2beae:	b2d2      	uxtb	r2, r2
                    _VAL2FLD(BLEIF_CMD_TSIZE, psTransfer->ui16Length)       |
   2beb0:	4313      	orrs	r3, r2
                    psTransfer->ui8Command);
   2beb2:	7a8a      	ldrb	r2, [r1, #10]
                    _VAL2FLD(BLEIF_CMD_CONT, psTransfer->bContinue)         |
   2beb4:	4313      	orrs	r3, r2
    ui32CmdWord |= (_VAL2FLD(BLEIF_CMD_OFFSETCNT, psTransfer->ui8OffsetLen) |
   2beb6:	4323      	orrs	r3, r4

    BLEIFn(ui32Module)->OFFSETHI = ui32OffsetHigh;
   2beb8:	4a08      	ldr	r2, [pc, #32]	; (2bedc <am_hal_ble_cmd_write+0x84>)
   2beba:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
    BLEIFn(ui32Module)->CMD = ui32CmdWord;
   2bebe:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   2bec2:	2000      	movs	r0, #0
} // am_hal_ble_cmd_write()
   2bec4:	bc30      	pop	{r4, r5}
   2bec6:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2bec8:	2002      	movs	r0, #2
   2beca:	4770      	bx	lr
   2becc:	2002      	movs	r0, #2
} // am_hal_ble_cmd_write()
   2bece:	4770      	bx	lr
    switch (psTransfer->ui8OffsetLen)
   2bed0:	2006      	movs	r0, #6
   2bed2:	e7f7      	b.n	2bec4 <am_hal_ble_cmd_write+0x6c>
   2bed4:	01775230 	.word	0x01775230
   2bed8:	000fff00 	.word	0x000fff00
   2bedc:	5000c000 	.word	0x5000c000

0002bee0 <am_hal_ble_fifo_read>:
am_hal_ble_fifo_read(void *pHandle, uint32_t *pui32Data, uint32_t ui32NumBytes)
{
    uint32_t ui32Index;
    uint32_t ui32Module = ((am_hal_ble_state_t *) pHandle)->ui32Module;

    for (ui32Index = 0; (ui32Index * 4) < ui32NumBytes; ui32Index++)
   2bee0:	2300      	movs	r3, #0
   2bee2:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   2bee6:	d90e      	bls.n	2bf06 <am_hal_ble_fifo_read+0x26>
{
   2bee8:	b410      	push	{r4}
    {
        pui32Data[ui32Index] = BLEIFn(ui32Module)->FIFOPOP;
   2beea:	4807      	ldr	r0, [pc, #28]	; (2bf08 <am_hal_ble_fifo_read+0x28>)
   2beec:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   2bef0:	f841 4023 	str.w	r4, [r1, r3, lsl #2]

#ifndef AM_HAL_BLE_NO_FIFO_PROTECTION
        BLEIFn(ui32Module)->FIFOPOP = 0;
   2bef4:	2400      	movs	r4, #0
   2bef6:	f8c0 4108 	str.w	r4, [r0, #264]	; 0x108
    for (ui32Index = 0; (ui32Index * 4) < ui32NumBytes; ui32Index++)
   2befa:	3301      	adds	r3, #1
   2befc:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   2bf00:	d8f3      	bhi.n	2beea <am_hal_ble_fifo_read+0xa>
#endif

    }
} // am_hal_ble_fifo_read()
   2bf02:	bc10      	pop	{r4}
   2bf04:	4770      	bx	lr
   2bf06:	4770      	bx	lr
   2bf08:	5000c000 	.word	0x5000c000

0002bf0c <am_hal_ble_fifo_drain>:
{
   2bf0c:	b538      	push	{r3, r4, r5, lr}
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2bf0e:	b308      	cbz	r0, 2bf54 <am_hal_ble_fifo_drain+0x48>
   2bf10:	4604      	mov	r4, r0
   2bf12:	6803      	ldr	r3, [r0, #0]
   2bf14:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2bf18:	4a12      	ldr	r2, [pc, #72]	; (2bf64 <am_hal_ble_fifo_drain+0x58>)
   2bf1a:	4293      	cmp	r3, r2
   2bf1c:	d11c      	bne.n	2bf58 <am_hal_ble_fifo_drain+0x4c>
    ui32RxDataLen = BLEIFn(ui32Module)->FIFOPTR_b.FIFO1SIZ;
   2bf1e:	4b12      	ldr	r3, [pc, #72]	; (2bf68 <am_hal_ble_fifo_drain+0x5c>)
   2bf20:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   2bf24:	f3c3 4307 	ubfx	r3, r3, #16, #8
    ui32BytesLeft = (pTransfer->ui16Length - pBle->ui32TransferIndex);
   2bf28:	8a81      	ldrh	r1, [r0, #20]
   2bf2a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   2bf2c:	1a8d      	subs	r5, r1, r2
    if (ui32RxDataLen < 4)
   2bf2e:	2b03      	cmp	r3, #3
   2bf30:	d915      	bls.n	2bf5e <am_hal_ble_fifo_drain+0x52>
    else if (ui32RxDataLen >= pTransfer->ui16Length)
   2bf32:	b298      	uxth	r0, r3
   2bf34:	4281      	cmp	r1, r0
   2bf36:	d901      	bls.n	2bf3c <am_hal_ble_fifo_drain+0x30>
        ui32ReadSize = ui32RxDataLen & (~0x3);
   2bf38:	f023 0503 	bic.w	r5, r3, #3
    pDest = &pTransfer->pui32Data[pBle->ui32TransferIndex / 4];
   2bf3c:	68e3      	ldr	r3, [r4, #12]
   2bf3e:	f022 0103 	bic.w	r1, r2, #3
    am_hal_ble_fifo_read(pHandle, pDest, ui32ReadSize);
   2bf42:	462a      	mov	r2, r5
   2bf44:	4419      	add	r1, r3
   2bf46:	4620      	mov	r0, r4
   2bf48:	f7ff ffca 	bl	2bee0 <am_hal_ble_fifo_read>
    pBle->ui32TransferIndex += ui32ReadSize;
   2bf4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2bf4e:	442b      	add	r3, r5
   2bf50:	63e3      	str	r3, [r4, #60]	; 0x3c
    return ui32ReadSize;
   2bf52:	e002      	b.n	2bf5a <am_hal_ble_fifo_drain+0x4e>
        return 0;
   2bf54:	2500      	movs	r5, #0
   2bf56:	e000      	b.n	2bf5a <am_hal_ble_fifo_drain+0x4e>
   2bf58:	2500      	movs	r5, #0
} // am_hal_ble_fifo_drain()
   2bf5a:	4628      	mov	r0, r5
   2bf5c:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
   2bf5e:	2500      	movs	r5, #0
   2bf60:	e7fb      	b.n	2bf5a <am_hal_ble_fifo_drain+0x4e>
   2bf62:	bf00      	nop
   2bf64:	01775230 	.word	0x01775230
   2bf68:	5000c000 	.word	0x5000c000

0002bf6c <am_hal_ble_read_trimdata_from_info1>:
am_hal_ble_read_trimdata_from_info1(void)
{
    uint32_t ui32TrimValue = 0, temp = 0;
    uint8_t TrimData = 0;

    temp = ui32TrimValue = AM_REGVAL(0x50023808);
   2bf6c:	4b08      	ldr	r3, [pc, #32]	; (2bf90 <am_hal_ble_read_trimdata_from_info1+0x24>)
   2bf6e:	6818      	ldr	r0, [r3, #0]
    temp &= 0xffffff00;
   2bf70:	f020 02ff 	bic.w	r2, r0, #255	; 0xff

    if ( temp == 0x18240600 )
   2bf74:	4b07      	ldr	r3, [pc, #28]	; (2bf94 <am_hal_ble_read_trimdata_from_info1+0x28>)
   2bf76:	429a      	cmp	r2, r3
   2bf78:	d007      	beq.n	2bf8a <am_hal_ble_read_trimdata_from_info1+0x1e>
    {
        TrimData = ui32TrimValue & 0xFF;
    }
    else
    {
        TrimData = 0;
   2bf7a:	2000      	movs	r0, #0
    }

    if ( (TrimData > 0x50) || (TrimData < 0x20) )   // change from 0x40 to 0x50 for improving the FT2 yield.
   2bf7c:	f1a0 0320 	sub.w	r3, r0, #32
   2bf80:	b2db      	uxtb	r3, r3
   2bf82:	2b30      	cmp	r3, #48	; 0x30
   2bf84:	d900      	bls.n	2bf88 <am_hal_ble_read_trimdata_from_info1+0x1c>
    {
        TrimData = 0;
   2bf86:	2000      	movs	r0, #0
    }

    return TrimData;
} // am_hal_ble_read_trimdata_from_info1()
   2bf88:	4770      	bx	lr
        TrimData = ui32TrimValue & 0xFF;
   2bf8a:	b2c0      	uxtb	r0, r0
   2bf8c:	e7f6      	b.n	2bf7c <am_hal_ble_read_trimdata_from_info1+0x10>
   2bf8e:	bf00      	nop
   2bf90:	50023808 	.word	0x50023808
   2bf94:	18240600 	.word	0x18240600

0002bf98 <am_hal_ble_bus_lock>:
{
   2bf98:	b510      	push	{r4, lr}
   2bf9a:	b082      	sub	sp, #8
   2bf9c:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN;
   2bf9e:	f001 fa67 	bl	2d470 <am_hal_interrupt_master_disable>
   2bfa2:	9001      	str	r0, [sp, #4]
    if (pBle->bBusy == false)
   2bfa4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   2bfa8:	b983      	cbnz	r3, 2bfcc <am_hal_ble_bus_lock+0x34>
        pBle->bBusy = true;
   2bfaa:	2301      	movs	r3, #1
   2bfac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        pBle->bCmdComplete = 0;
   2bfb0:	2200      	movs	r2, #0
   2bfb2:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
        pBle->bDmaComplete = 0;
   2bfb6:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
        pBle->bFlowControlComplete = 0;
   2bfba:	f884 2047 	strb.w	r2, [r4, #71]	; 0x47
        bLockObtained = true;
   2bfbe:	461c      	mov	r4, r3
    AM_CRITICAL_END;
   2bfc0:	9801      	ldr	r0, [sp, #4]
   2bfc2:	f001 fa59 	bl	2d478 <am_hal_interrupt_master_set>
} // am_hal_ble_bus_lock()
   2bfc6:	4620      	mov	r0, r4
   2bfc8:	b002      	add	sp, #8
   2bfca:	bd10      	pop	{r4, pc}
        bLockObtained = false;
   2bfcc:	2400      	movs	r4, #0
   2bfce:	e7f7      	b.n	2bfc0 <am_hal_ble_bus_lock+0x28>

0002bfd0 <am_hal_ble_wakeup_set>:
    if ( !AM_HAL_BLE_CHK_HANDLE(pHandle) )
   2bfd0:	b1c8      	cbz	r0, 2c006 <am_hal_ble_wakeup_set+0x36>
   2bfd2:	6803      	ldr	r3, [r0, #0]
   2bfd4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2bfd8:	4a0d      	ldr	r2, [pc, #52]	; (2c010 <am_hal_ble_wakeup_set+0x40>)
   2bfda:	4293      	cmp	r3, r2
   2bfdc:	d115      	bne.n	2c00a <am_hal_ble_wakeup_set+0x3a>
    if ( ui32Mode )
   2bfde:	b141      	cbz	r1, 2bff2 <am_hal_ble_wakeup_set+0x22>
        BLEIFn(pBle->ui32Module)->BLECFG_b.WAKEUPCTL = BLEIF_BLECFG_WAKEUPCTL_ON;
   2bfe0:	4a0c      	ldr	r2, [pc, #48]	; (2c014 <am_hal_ble_wakeup_set+0x44>)
   2bfe2:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   2bfe6:	f043 030c 	orr.w	r3, r3, #12
   2bfea:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    return AM_HAL_STATUS_SUCCESS;
   2bfee:	2000      	movs	r0, #0
   2bff0:	4770      	bx	lr
        BLEIFn(pBle->ui32Module)->BLECFG_b.WAKEUPCTL = BLEIF_BLECFG_WAKEUPCTL_OFF;
   2bff2:	4b08      	ldr	r3, [pc, #32]	; (2c014 <am_hal_ble_wakeup_set+0x44>)
   2bff4:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
   2bff8:	2002      	movs	r0, #2
   2bffa:	f360 0283 	bfi	r2, r0, #2, #2
   2bffe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return AM_HAL_STATUS_SUCCESS;
   2c002:	4608      	mov	r0, r1
   2c004:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2c006:	2002      	movs	r0, #2
   2c008:	4770      	bx	lr
   2c00a:	2002      	movs	r0, #2
}
   2c00c:	4770      	bx	lr
   2c00e:	bf00      	nop
   2c010:	01775230 	.word	0x01775230
   2c014:	5000c000 	.word	0x5000c000

0002c018 <am_hal_ble_initialize>:
    if (ui32Module >= AM_REG_BLEIF_NUM_MODULES)
   2c018:	2800      	cmp	r0, #0
   2c01a:	d147      	bne.n	2c0ac <am_hal_ble_initialize+0x94>
   2c01c:	4602      	mov	r2, r0
    if (!ppHandle)
   2c01e:	2900      	cmp	r1, #0
   2c020:	d046      	beq.n	2c0b0 <am_hal_ble_initialize+0x98>
    if (g_sBLEState[ui32Module].prefix.s.bInit)
   2c022:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
   2c026:	4824      	ldr	r0, [pc, #144]	; (2c0b8 <am_hal_ble_initialize+0xa0>)
   2c028:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   2c02c:	78db      	ldrb	r3, [r3, #3]
   2c02e:	f013 0f01 	tst.w	r3, #1
   2c032:	d13f      	bne.n	2c0b4 <am_hal_ble_initialize+0x9c>
{
   2c034:	b4f0      	push	{r4, r5, r6, r7}
    memset(&g_sBLEState[ui32Module].sCurrentTransfer, 0, sizeof(am_hal_ble_transfer_t));
   2c036:	4604      	mov	r4, r0
   2c038:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   2c03c:	00c0      	lsls	r0, r0, #3
   2c03e:	3008      	adds	r0, #8
   2c040:	4420      	add	r0, r4
   2c042:	2300      	movs	r3, #0
   2c044:	6043      	str	r3, [r0, #4]
   2c046:	6083      	str	r3, [r0, #8]
   2c048:	60c3      	str	r3, [r0, #12]
   2c04a:	6103      	str	r3, [r0, #16]
   2c04c:	6143      	str	r3, [r0, #20]
   2c04e:	6183      	str	r3, [r0, #24]
    memset(&g_sBLEState[ui32Module].sSavedTransfer, 0, sizeof(am_hal_ble_transfer_t));
   2c050:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   2c054:	00c0      	lsls	r0, r0, #3
   2c056:	3020      	adds	r0, #32
   2c058:	4420      	add	r0, r4
   2c05a:	6043      	str	r3, [r0, #4]
   2c05c:	6083      	str	r3, [r0, #8]
   2c05e:	60c3      	str	r3, [r0, #12]
   2c060:	6103      	str	r3, [r0, #16]
   2c062:	6143      	str	r3, [r0, #20]
   2c064:	6183      	str	r3, [r0, #24]
    g_sBLEState[ui32Module].prefix.s.bInit = true;
   2c066:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   2c06a:	00c6      	lsls	r6, r0, #3
   2c06c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   2c070:	78c5      	ldrb	r5, [r0, #3]
   2c072:	f045 0501 	orr.w	r5, r5, #1
   2c076:	70c5      	strb	r5, [r0, #3]
    g_sBLEState[ui32Module].prefix.s.magic = AM_HAL_MAGIC_BLE;
   2c078:	59a5      	ldr	r5, [r4, r6]
   2c07a:	4f10      	ldr	r7, [pc, #64]	; (2c0bc <am_hal_ble_initialize+0xa4>)
   2c07c:	f367 0517 	bfi	r5, r7, #0, #24
   2c080:	51a5      	str	r5, [r4, r6]
    g_sBLEState[ui32Module].ui32Module = ui32Module;
   2c082:	6042      	str	r2, [r0, #4]
    g_sBLEState[ui32Module].ui32TransferIndex = 0;
   2c084:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_sBLEState[ui32Module].bPatchComplete = 0;
   2c086:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    g_sBLEState[ui32Module].bContinuePacket = 0;
   2c08a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    g_sBLEState[ui32Module].bSavedPacket = 0;
   2c08e:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
    g_sBLEState[ui32Module].bBusy = 0;
   2c092:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    g_sBLEState[ui32Module].bCmdComplete = 0;
   2c096:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    g_sBLEState[ui32Module].bDmaComplete = 0;
   2c09a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
    g_sBLEState[ui32Module].bFlowControlComplete = 0;
   2c09e:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
    g_sBLEState[ui32Module].bUseDefaultPatches = false;
   2c0a2:	7203      	strb	r3, [r0, #8]
    *ppHandle = &g_sBLEState[ui32Module];
   2c0a4:	6008      	str	r0, [r1, #0]
    return AM_HAL_STATUS_SUCCESS;
   2c0a6:	4610      	mov	r0, r2
} // am_hal_ble_initialize()
   2c0a8:	bcf0      	pop	{r4, r5, r6, r7}
   2c0aa:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   2c0ac:	2005      	movs	r0, #5
   2c0ae:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   2c0b0:	2006      	movs	r0, #6
   2c0b2:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   2c0b4:	2007      	movs	r0, #7
} // am_hal_ble_initialize()
   2c0b6:	4770      	bx	lr
   2c0b8:	10007020 	.word	0x10007020
   2c0bc:	00775230 	.word	0x00775230

0002c0c0 <am_hal_ble_deinitialize>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2c0c0:	4603      	mov	r3, r0
   2c0c2:	b338      	cbz	r0, 2c114 <am_hal_ble_deinitialize+0x54>
   2c0c4:	6802      	ldr	r2, [r0, #0]
   2c0c6:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   2c0ca:	4913      	ldr	r1, [pc, #76]	; (2c118 <am_hal_ble_deinitialize+0x58>)
   2c0cc:	428a      	cmp	r2, r1
   2c0ce:	d001      	beq.n	2c0d4 <am_hal_ble_deinitialize+0x14>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2c0d0:	2002      	movs	r0, #2
} // am_hal_ble_deinitialize()
   2c0d2:	4770      	bx	lr
    memset(&(pBLE->sCurrentTransfer), 0, sizeof(am_hal_ble_transfer_t));
   2c0d4:	2000      	movs	r0, #0
   2c0d6:	60d8      	str	r0, [r3, #12]
   2c0d8:	6118      	str	r0, [r3, #16]
   2c0da:	6158      	str	r0, [r3, #20]
   2c0dc:	6198      	str	r0, [r3, #24]
   2c0de:	61d8      	str	r0, [r3, #28]
   2c0e0:	6218      	str	r0, [r3, #32]
    pBLE->prefix.s.bInit = false;
   2c0e2:	78da      	ldrb	r2, [r3, #3]
   2c0e4:	f360 0200 	bfi	r2, r0, #0, #1
   2c0e8:	70da      	strb	r2, [r3, #3]
    pBLE->prefix.s.magic = 0;
   2c0ea:	681a      	ldr	r2, [r3, #0]
   2c0ec:	f360 0217 	bfi	r2, r0, #0, #24
   2c0f0:	601a      	str	r2, [r3, #0]
    pBLE->ui32Module = 0;
   2c0f2:	6058      	str	r0, [r3, #4]
    pBLE->ui32TransferIndex = 0;
   2c0f4:	63d8      	str	r0, [r3, #60]	; 0x3c
    pBLE->bPatchComplete = 0;
   2c0f6:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    pBLE->bContinuePacket = 0;
   2c0fa:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    pBLE->bSavedPacket = 0;
   2c0fe:	f883 0043 	strb.w	r0, [r3, #67]	; 0x43
    pBLE->bBusy = 0;
   2c102:	f883 0044 	strb.w	r0, [r3, #68]	; 0x44
    pBLE->bCmdComplete = 0;
   2c106:	f883 0045 	strb.w	r0, [r3, #69]	; 0x45
    pBLE->bDmaComplete = 0;
   2c10a:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
    pBLE->bFlowControlComplete = 0;
   2c10e:	f883 0047 	strb.w	r0, [r3, #71]	; 0x47
    return AM_HAL_STATUS_SUCCESS;
   2c112:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2c114:	2002      	movs	r0, #2
   2c116:	4770      	bx	lr
   2c118:	01775230 	.word	0x01775230

0002c11c <am_hal_ble_config>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2c11c:	2800      	cmp	r0, #0
   2c11e:	d06f      	beq.n	2c200 <am_hal_ble_config+0xe4>
{
   2c120:	b570      	push	{r4, r5, r6, lr}
   2c122:	460c      	mov	r4, r1
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2c124:	6803      	ldr	r3, [r0, #0]
   2c126:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2c12a:	4937      	ldr	r1, [pc, #220]	; (2c208 <am_hal_ble_config+0xec>)
   2c12c:	428b      	cmp	r3, r1
   2c12e:	d169      	bne.n	2c204 <am_hal_ble_config+0xe8>
    ui32Module = ((am_hal_ble_state_t *) pHandle)->ui32Module;
   2c130:	6845      	ldr	r5, [r0, #4]
    BLEIFn(ui32Module)->MSPICFG = 0x3;
   2c132:	4b36      	ldr	r3, [pc, #216]	; (2c20c <am_hal_ble_config+0xf0>)
   2c134:	2203      	movs	r2, #3
   2c136:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    BLEIFn(ui32Module)->MSPICFG_b.RDFC = 0;
   2c13a:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   2c13e:	f36f 4251 	bfc	r2, #17, #1
   2c142:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    BLEIFn(ui32Module)->MSPICFG_b.WTFC = 0;
   2c146:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   2c14a:	f36f 4210 	bfc	r2, #16, #1
   2c14e:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    BLEIFn(ui32Module)->MSPICFG_b.WTFCPOL = 1;
   2c152:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   2c156:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   2c15a:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    BLEIFn(ui32Module)->FIFOTHR_b.FIFOWTHR = psConfig->ui32WriteThreshold;
   2c15e:	68a1      	ldr	r1, [r4, #8]
   2c160:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   2c164:	f361 220d 	bfi	r2, r1, #8, #6
   2c168:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    BLEIFn(ui32Module)->FIFOTHR_b.FIFORTHR = psConfig->ui32ReadThreshold;
   2c16c:	6861      	ldr	r1, [r4, #4]
   2c16e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   2c172:	f361 0205 	bfi	r2, r1, #0, #6
   2c176:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    BLEIFn(ui32Module)->FIFOCTRL |= BLEIF_FIFOCTRL_POPWR_Msk;
   2c17a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   2c17e:	f042 0201 	orr.w	r2, r2, #1
   2c182:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    ui32BleClkConfig =  _VAL2FLD(BLEIF_CLKCFG_FSEL, psConfig->ui32SpiClkCfg);
   2c186:	6823      	ldr	r3, [r4, #0]
   2c188:	021b      	lsls	r3, r3, #8
   2c18a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    ui32BleClkConfig |= _VAL2FLD(BLEIF_CLKCFG_IOCLKEN, 1);
   2c18e:	f043 0201 	orr.w	r2, r3, #1
    if (psConfig->ui32BleClockConfig == AM_HAL_BLE_CORE_MCU_CLK)
   2c192:	68e1      	ldr	r1, [r4, #12]
   2c194:	2902      	cmp	r1, #2
   2c196:	d010      	beq.n	2c1ba <am_hal_ble_config+0x9e>
    BLEIFn(ui32Module)->CLKCFG = ui32BleClkConfig;
   2c198:	4b1c      	ldr	r3, [pc, #112]	; (2c20c <am_hal_ble_config+0xf0>)
   2c19a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    if (APOLLO3_A1)
   2c19e:	4b1c      	ldr	r3, [pc, #112]	; (2c210 <am_hal_ble_config+0xf4>)
   2c1a0:	68db      	ldr	r3, [r3, #12]
   2c1a2:	b2db      	uxtb	r3, r3
   2c1a4:	2b12      	cmp	r3, #18
   2c1a6:	d00d      	beq.n	2c1c4 <am_hal_ble_config+0xa8>
    g_sBLEState[ui32Module].bUseDefaultPatches = psConfig->bUseDefaultPatches;
   2c1a8:	7ea2      	ldrb	r2, [r4, #26]
   2c1aa:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   2c1ae:	4b19      	ldr	r3, [pc, #100]	; (2c214 <am_hal_ble_config+0xf8>)
   2c1b0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2c1b4:	722a      	strb	r2, [r5, #8]
    return AM_HAL_STATUS_SUCCESS;
   2c1b6:	2000      	movs	r0, #0
} // am_hal_ble_config()
   2c1b8:	bd70      	pop	{r4, r5, r6, pc}
        ui32BleClkConfig |= _VAL2FLD(BLEIF_CLKCFG_CLK32KEN, 1);
   2c1ba:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
   2c1be:	f042 0201 	orr.w	r2, r2, #1
   2c1c2:	e7e9      	b.n	2c198 <am_hal_ble_config+0x7c>
        uint8_t *pui8NVDSData = (uint8_t *) am_ble_nvds_patch.pui32Data;
   2c1c4:	4e14      	ldr	r6, [pc, #80]	; (2c218 <am_hal_ble_config+0xfc>)
   2c1c6:	68f0      	ldr	r0, [r6, #12]
            (psConfig->ui32BleClockConfig & 0xFF);
   2c1c8:	68e3      	ldr	r3, [r4, #12]
        pui8NVDSData[AM_HAL_BLE_NVDS_CLOCKSOURCE_OFFSET + 3] =
   2c1ca:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
            (psConfig->ui32ClockDrift & 0x00FF);
   2c1ce:	6923      	ldr	r3, [r4, #16]
        pui8NVDSData[AM_HAL_BLE_NVDS_CLOCKDRIFT_OFFSET + 3] =
   2c1d0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
            (psConfig->ui32ClockDrift & 0xFF00) >> 8;
   2c1d4:	6923      	ldr	r3, [r4, #16]
   2c1d6:	0a1b      	lsrs	r3, r3, #8
        pui8NVDSData[AM_HAL_BLE_NVDS_CLOCKDRIFT_OFFSET + 4] =
   2c1d8:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
            (psConfig->ui32SleepClockDrift & 0x00FF);
   2c1dc:	6963      	ldr	r3, [r4, #20]
        pui8NVDSData[AM_HAL_BLE_NVDS_SLEEPCLOCKDRIFT_OFFSET + 3] =
   2c1de:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
            (psConfig->ui32SleepClockDrift & 0xFF00) >> 8;
   2c1e2:	6963      	ldr	r3, [r4, #20]
   2c1e4:	0a1b      	lsrs	r3, r3, #8
        pui8NVDSData[AM_HAL_BLE_NVDS_SLEEPCLOCKDRIFT_OFFSET + 4] =
   2c1e6:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
        pui8NVDSData[AM_HAL_BLE_NVDS_SLEEPENABLE_OFFSET + 3] = (psConfig->bSleepEnabled == true) ? 1 : 0;
   2c1ea:	7e63      	ldrb	r3, [r4, #25]
   2c1ec:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
        pui8NVDSData[AM_HAL_BLE_NVDS_AGC_OFFSET + 3] = (psConfig->bAgcEnabled == true) ? 1 : 0;
   2c1f0:	7e23      	ldrb	r3, [r4, #24]
   2c1f2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
        am_ble_nvds_patch.ui32CRC = am_hal_ble_crc_nz(pui8NVDSData,
   2c1f6:	6871      	ldr	r1, [r6, #4]
   2c1f8:	f7ff fe04 	bl	2be04 <am_hal_ble_crc_nz>
   2c1fc:	60b0      	str	r0, [r6, #8]
   2c1fe:	e7d3      	b.n	2c1a8 <am_hal_ble_config+0x8c>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2c200:	2002      	movs	r0, #2
} // am_hal_ble_config()
   2c202:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2c204:	2002      	movs	r0, #2
   2c206:	e7d7      	b.n	2c1b8 <am_hal_ble_config+0x9c>
   2c208:	01775230 	.word	0x01775230
   2c20c:	5000c000 	.word	0x5000c000
   2c210:	40020000 	.word	0x40020000
   2c214:	10007020 	.word	0x10007020
   2c218:	10000920 	.word	0x10000920

0002c21c <am_hal_ble_power_control>:
{
   2c21c:	b538      	push	{r3, r4, r5, lr}
    if ( !AM_HAL_BLE_CHK_HANDLE(pHandle) )
   2c21e:	2800      	cmp	r0, #0
   2c220:	f000 808f 	beq.w	2c342 <am_hal_ble_power_control+0x126>
   2c224:	460c      	mov	r4, r1
   2c226:	6803      	ldr	r3, [r0, #0]
   2c228:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2c22c:	4a4c      	ldr	r2, [pc, #304]	; (2c360 <am_hal_ble_power_control+0x144>)
   2c22e:	4293      	cmp	r3, r2
   2c230:	f040 8089 	bne.w	2c346 <am_hal_ble_power_control+0x12a>
    if (ui32PowerState == AM_HAL_BLE_POWER_ACTIVE)
   2c234:	2900      	cmp	r1, #0
   2c236:	d155      	bne.n	2c2e4 <am_hal_ble_power_control+0xc8>
        if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
   2c238:	4b4a      	ldr	r3, [pc, #296]	; (2c364 <am_hal_ble_power_control+0x148>)
   2c23a:	699b      	ldr	r3, [r3, #24]
   2c23c:	f413 7f80 	tst.w	r3, #256	; 0x100
   2c240:	f040 8082 	bne.w	2c348 <am_hal_ble_power_control+0x12c>
            MCUCTRL->FEATUREENABLE |= 1;
   2c244:	4a48      	ldr	r2, [pc, #288]	; (2c368 <am_hal_ble_power_control+0x14c>)
   2c246:	6993      	ldr	r3, [r2, #24]
   2c248:	f043 0301 	orr.w	r3, r3, #1
   2c24c:	6193      	str	r3, [r2, #24]
            WHILE_TIMEOUT_MS ( ((MCUCTRL->FEATUREENABLE & 0x7) != 0x7), 100,
   2c24e:	4b46      	ldr	r3, [pc, #280]	; (2c368 <am_hal_ble_power_control+0x14c>)
   2c250:	699b      	ldr	r3, [r3, #24]
   2c252:	f003 0307 	and.w	r3, r3, #7
   2c256:	2b07      	cmp	r3, #7
   2c258:	d007      	beq.n	2c26a <am_hal_ble_power_control+0x4e>
   2c25a:	4b44      	ldr	r3, [pc, #272]	; (2c36c <am_hal_ble_power_control+0x150>)
   2c25c:	429c      	cmp	r4, r3
   2c25e:	d875      	bhi.n	2c34c <am_hal_ble_power_control+0x130>
   2c260:	2010      	movs	r0, #16
   2c262:	f001 f8c3 	bl	2d3ec <am_hal_flash_delay>
   2c266:	3401      	adds	r4, #1
   2c268:	e7f1      	b.n	2c24e <am_hal_ble_power_control+0x32>
            if (am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_PERIPH_BLEL) !=
   2c26a:	200e      	movs	r0, #14
   2c26c:	f001 fa48 	bl	2d700 <am_hal_pwrctrl_periph_enable>
   2c270:	4604      	mov	r4, r0
   2c272:	2800      	cmp	r0, #0
   2c274:	d16c      	bne.n	2c350 <am_hal_ble_power_control+0x134>
            BLEIFn(ui32Module)->CLKCFG = _VAL2FLD(BLEIF_CLKCFG_CLK32KEN, 1);
   2c276:	4b3e      	ldr	r3, [pc, #248]	; (2c370 <am_hal_ble_power_control+0x154>)
   2c278:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2c27c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
            BLEIFn(ui32Module)->BLEDBG_b.DBGDATA = 1 << 14;
   2c280:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   2c284:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   2c288:	f361 02df 	bfi	r2, r1, #3, #29
   2c28c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
            if ( APOLLO3_GE_A1 )
   2c290:	4b35      	ldr	r3, [pc, #212]	; (2c368 <am_hal_ble_power_control+0x14c>)
   2c292:	68db      	ldr	r3, [r3, #12]
   2c294:	b2db      	uxtb	r3, r3
   2c296:	2b11      	cmp	r3, #17
   2c298:	d920      	bls.n	2c2dc <am_hal_ble_power_control+0xc0>
                MCUCTRL->MISCCTRL_b.BLE_RESETN = 1;
   2c29a:	4a33      	ldr	r2, [pc, #204]	; (2c368 <am_hal_ble_power_control+0x14c>)
   2c29c:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
   2c2a0:	f043 0320 	orr.w	r3, r3, #32
   2c2a4:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
            delay_ms(5);
   2c2a8:	4832      	ldr	r0, [pc, #200]	; (2c374 <am_hal_ble_power_control+0x158>)
   2c2aa:	f001 f89f 	bl	2d3ec <am_hal_flash_delay>
            BLEIFn(ui32Module)->BLECFG_b.PWRSMEN = 1;
   2c2ae:	4a30      	ldr	r2, [pc, #192]	; (2c370 <am_hal_ble_power_control+0x154>)
   2c2b0:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   2c2b4:	f043 0301 	orr.w	r3, r3, #1
   2c2b8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
            WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.PWRST != 3, 1000,
   2c2bc:	4625      	mov	r5, r4
   2c2be:	4b2c      	ldr	r3, [pc, #176]	; (2c370 <am_hal_ble_power_control+0x154>)
   2c2c0:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2c2c4:	f3c3 2302 	ubfx	r3, r3, #8, #3
   2c2c8:	2b03      	cmp	r3, #3
   2c2ca:	d03d      	beq.n	2c348 <am_hal_ble_power_control+0x12c>
   2c2cc:	4b2a      	ldr	r3, [pc, #168]	; (2c378 <am_hal_ble_power_control+0x15c>)
   2c2ce:	429d      	cmp	r5, r3
   2c2d0:	d840      	bhi.n	2c354 <am_hal_ble_power_control+0x138>
   2c2d2:	2010      	movs	r0, #16
   2c2d4:	f001 f88a 	bl	2d3ec <am_hal_flash_delay>
   2c2d8:	3501      	adds	r5, #1
   2c2da:	e7f0      	b.n	2c2be <am_hal_ble_power_control+0xa2>
                AM_REGVAL(0x40020198) = 0x1 << 2;
   2c2dc:	4b27      	ldr	r3, [pc, #156]	; (2c37c <am_hal_ble_power_control+0x160>)
   2c2de:	2204      	movs	r2, #4
   2c2e0:	601a      	str	r2, [r3, #0]
   2c2e2:	e7e1      	b.n	2c2a8 <am_hal_ble_power_control+0x8c>
    else if (ui32PowerState == AM_HAL_BLE_POWER_OFF)
   2c2e4:	2901      	cmp	r1, #1
   2c2e6:	d137      	bne.n	2c358 <am_hal_ble_power_control+0x13c>
        BLEIFn(ui32Module)->CLKCFG = 0;
   2c2e8:	4b21      	ldr	r3, [pc, #132]	; (2c370 <am_hal_ble_power_control+0x154>)
   2c2ea:	2100      	movs	r1, #0
   2c2ec:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
        BLEIF->BLEDBG_b.DBGDATA = 0;
   2c2f0:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   2c2f4:	f361 02df 	bfi	r2, r1, #3, #29
   2c2f8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
        if ( APOLLO3_GE_A1 )
   2c2fc:	4b1a      	ldr	r3, [pc, #104]	; (2c368 <am_hal_ble_power_control+0x14c>)
   2c2fe:	68db      	ldr	r3, [r3, #12]
   2c300:	b2db      	uxtb	r3, r3
   2c302:	2b11      	cmp	r3, #17
   2c304:	d917      	bls.n	2c336 <am_hal_ble_power_control+0x11a>
            MCUCTRL->MISCCTRL_b.BLE_RESETN = 0;
   2c306:	4b18      	ldr	r3, [pc, #96]	; (2c368 <am_hal_ble_power_control+0x14c>)
   2c308:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
   2c30c:	f36f 1245 	bfc	r2, #5, #1
   2c310:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
        BLEIF->BLECFG_b.PWRSMEN = 0;
   2c314:	4b16      	ldr	r3, [pc, #88]	; (2c370 <am_hal_ble_power_control+0x154>)
   2c316:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
   2c31a:	f36f 0200 	bfc	r2, #0, #1
   2c31e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        if (am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_BLEL) !=
   2c322:	200e      	movs	r0, #14
   2c324:	f001 fa34 	bl	2d790 <am_hal_pwrctrl_periph_disable>
   2c328:	4604      	mov	r4, r0
   2c32a:	b9b8      	cbnz	r0, 2c35c <am_hal_ble_power_control+0x140>
        delay_us(100);
   2c32c:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   2c330:	f001 f85c 	bl	2d3ec <am_hal_flash_delay>
   2c334:	e008      	b.n	2c348 <am_hal_ble_power_control+0x12c>
            AM_REGVAL(0x40020198) &= ~(0x1 << 2);
   2c336:	4a11      	ldr	r2, [pc, #68]	; (2c37c <am_hal_ble_power_control+0x160>)
   2c338:	6813      	ldr	r3, [r2, #0]
   2c33a:	f023 0304 	bic.w	r3, r3, #4
   2c33e:	6013      	str	r3, [r2, #0]
   2c340:	e7e8      	b.n	2c314 <am_hal_ble_power_control+0xf8>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2c342:	2402      	movs	r4, #2
   2c344:	e000      	b.n	2c348 <am_hal_ble_power_control+0x12c>
   2c346:	2402      	movs	r4, #2
} // am_hal_ble_power_control()
   2c348:	4620      	mov	r0, r4
   2c34a:	bd38      	pop	{r3, r4, r5, pc}
            WHILE_TIMEOUT_MS ( ((MCUCTRL->FEATUREENABLE & 0x7) != 0x7), 100,
   2c34c:	4c0c      	ldr	r4, [pc, #48]	; (2c380 <am_hal_ble_power_control+0x164>)
   2c34e:	e7fb      	b.n	2c348 <am_hal_ble_power_control+0x12c>
                return AM_HAL_BLE_REGULATOR_FAILED;
   2c350:	4c0c      	ldr	r4, [pc, #48]	; (2c384 <am_hal_ble_power_control+0x168>)
   2c352:	e7f9      	b.n	2c348 <am_hal_ble_power_control+0x12c>
            WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.PWRST != 3, 1000,
   2c354:	4c0c      	ldr	r4, [pc, #48]	; (2c388 <am_hal_ble_power_control+0x16c>)
   2c356:	e7f7      	b.n	2c348 <am_hal_ble_power_control+0x12c>
        return AM_HAL_STATUS_INVALID_OPERATION;
   2c358:	2407      	movs	r4, #7
   2c35a:	e7f5      	b.n	2c348 <am_hal_ble_power_control+0x12c>
            return AM_HAL_BLE_SHUTDOWN_FAILED;
   2c35c:	4c0b      	ldr	r4, [pc, #44]	; (2c38c <am_hal_ble_power_control+0x170>)
   2c35e:	e7f3      	b.n	2c348 <am_hal_ble_power_control+0x12c>
   2c360:	01775230 	.word	0x01775230
   2c364:	40021000 	.word	0x40021000
   2c368:	40020000 	.word	0x40020000
   2c36c:	0001869f 	.word	0x0001869f
   2c370:	5000c000 	.word	0x5000c000
   2c374:	00013880 	.word	0x00013880
   2c378:	000f423f 	.word	0x000f423f
   2c37c:	40020198 	.word	0x40020198
   2c380:	08000005 	.word	0x08000005
   2c384:	08000007 	.word	0x08000007
   2c388:	08000008 	.word	0x08000008
   2c38c:	08000006 	.word	0x08000006

0002c390 <am_hal_ble_default_trim_set_ramcode>:
    if (APOLLO3_B0)
   2c390:	4b1b      	ldr	r3, [pc, #108]	; (2c400 <am_hal_ble_default_trim_set_ramcode+0x70>)
   2c392:	68db      	ldr	r3, [r3, #12]
   2c394:	b2db      	uxtb	r3, r3
   2c396:	2b21      	cmp	r3, #33	; 0x21
   2c398:	d02e      	beq.n	2c3f8 <am_hal_ble_default_trim_set_ramcode+0x68>
        pRamCode = (uint32_t *) (am_ble_performance_patch.pui32Data);
   2c39a:	4b1a      	ldr	r3, [pc, #104]	; (2c404 <am_hal_ble_default_trim_set_ramcode+0x74>)
   2c39c:	68d8      	ldr	r0, [r3, #12]
    ui32TrimValue = AM_REGVAL(0x50023800);
   2c39e:	4b1a      	ldr	r3, [pc, #104]	; (2c408 <am_hal_ble_default_trim_set_ramcode+0x78>)
   2c3a0:	681a      	ldr	r2, [r3, #0]
                            ((ui32TrimValue & 0x0000FF00) << 8) |
   2c3a2:	0213      	lsls	r3, r2, #8
   2c3a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    ui32TrimValueSwapped = (((ui32TrimValue & 0x000000FF) << 24) |
   2c3a8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                            ((ui32TrimValue & 0x00FF0000) >> 8) |
   2c3ac:	0a11      	lsrs	r1, r2, #8
   2c3ae:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
                            ((ui32TrimValue & 0x0000FF00) << 8) |
   2c3b2:	430b      	orrs	r3, r1
    ui32TrimValueSwapped = (((ui32TrimValue & 0x000000FF) << 24) |
   2c3b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    if (ui32TrimValueSwapped != 0xFFFFFFFF)
   2c3b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2c3bc:	d000      	beq.n	2c3c0 <am_hal_ble_default_trim_set_ramcode+0x30>
        pRamCode[2] = ui32TrimValueSwapped;
   2c3be:	6083      	str	r3, [r0, #8]
    ui32TrimValue = AM_REGVAL(0x50023804);
   2c3c0:	4b12      	ldr	r3, [pc, #72]	; (2c40c <am_hal_ble_default_trim_set_ramcode+0x7c>)
   2c3c2:	681a      	ldr	r2, [r3, #0]
    if (ui32TrimValue != 0xFFFFFFFF)
   2c3c4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2c3c8:	d001      	beq.n	2c3ce <am_hal_ble_default_trim_set_ramcode+0x3e>
        ui32TrimValue += 0x40000000;  // Increase the retention voltage to > 0.75v
   2c3ca:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
                            ((ui32TrimValue & 0x0000FF00) << 8) |
   2c3ce:	0213      	lsls	r3, r2, #8
   2c3d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    ui32TrimValueSwapped = (((ui32TrimValue & 0x000000FF) << 24) |
   2c3d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                            ((ui32TrimValue & 0x00FF0000) >> 8) |
   2c3d8:	0a11      	lsrs	r1, r2, #8
   2c3da:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
                            ((ui32TrimValue & 0x0000FF00) << 8) |
   2c3de:	430b      	orrs	r3, r1
    ui32TrimValueSwapped = (((ui32TrimValue & 0x000000FF) << 24) |
   2c3e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    if ( ui32TrimValueSwapped != 0xFFFFFFFF )
   2c3e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2c3e8:	d004      	beq.n	2c3f4 <am_hal_ble_default_trim_set_ramcode+0x64>
        pRamCode[3] = ((pRamCode[3] & (~0x1F0)) | ui32TrimValueSwapped);
   2c3ea:	68c2      	ldr	r2, [r0, #12]
   2c3ec:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
   2c3f0:	4313      	orrs	r3, r2
   2c3f2:	60c3      	str	r3, [r0, #12]
} // am_hal_ble_default_trim_set_ramcode()
   2c3f4:	2000      	movs	r0, #0
   2c3f6:	4770      	bx	lr
        pRamCode = (uint32_t *) (am_ble_performance_patch_b0.pui32Data);
   2c3f8:	4b05      	ldr	r3, [pc, #20]	; (2c410 <am_hal_ble_default_trim_set_ramcode+0x80>)
   2c3fa:	68d8      	ldr	r0, [r3, #12]
   2c3fc:	e7cf      	b.n	2c39e <am_hal_ble_default_trim_set_ramcode+0xe>
   2c3fe:	bf00      	nop
   2c400:	40020000 	.word	0x40020000
   2c404:	10000940 	.word	0x10000940
   2c408:	50023800 	.word	0x50023800
   2c40c:	50023804 	.word	0x50023804
   2c410:	10000b54 	.word	0x10000b54

0002c414 <am_hal_ble_vs_command_build>:
{
   2c414:	b410      	push	{r4}
    pui8Dest[0] = 0x01;
   2c416:	2401      	movs	r4, #1
   2c418:	7004      	strb	r4, [r0, #0]
    pui8Dest[1] = ui32OpCode & 0xFF;
   2c41a:	7041      	strb	r1, [r0, #1]
    pui8Dest[2] = (ui32OpCode >> 8) & 0xFF;
   2c41c:	0a09      	lsrs	r1, r1, #8
   2c41e:	7081      	strb	r1, [r0, #2]
    pui8Dest[3] = (ui32TotalLength - 4) & 0xFF;
   2c420:	1f11      	subs	r1, r2, #4
   2c422:	70c1      	strb	r1, [r0, #3]
    for (uint32_t i = 4; i < ui32TotalLength; i++)
   2c424:	2104      	movs	r1, #4
   2c426:	4291      	cmp	r1, r2
   2c428:	d205      	bcs.n	2c436 <am_hal_ble_vs_command_build+0x22>
        pui8Dest[i] = pui8Parameters[i - 4];
   2c42a:	185c      	adds	r4, r3, r1
   2c42c:	f814 4c04 	ldrb.w	r4, [r4, #-4]
   2c430:	5444      	strb	r4, [r0, r1]
    for (uint32_t i = 4; i < ui32TotalLength; i++)
   2c432:	3101      	adds	r1, #1
   2c434:	e7f7      	b.n	2c426 <am_hal_ble_vs_command_build+0x12>
} // am_hal_ble_vs_command_build()
   2c436:	2000      	movs	r0, #0
   2c438:	bc10      	pop	{r4}
   2c43a:	4770      	bx	lr

0002c43c <am_hal_ble_blocking_transfer>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2c43c:	2800      	cmp	r0, #0
   2c43e:	f000 8171 	beq.w	2c724 <am_hal_ble_blocking_transfer+0x2e8>
{
   2c442:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c446:	b083      	sub	sp, #12
   2c448:	4689      	mov	r9, r1
   2c44a:	4606      	mov	r6, r0
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2c44c:	6803      	ldr	r3, [r0, #0]
   2c44e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2c452:	4ab9      	ldr	r2, [pc, #740]	; (2c738 <am_hal_ble_blocking_transfer+0x2fc>)
   2c454:	4293      	cmp	r3, r2
   2c456:	f040 8167 	bne.w	2c728 <am_hal_ble_blocking_transfer+0x2ec>
    if (psTransfer->ui16Length == 0)
   2c45a:	890b      	ldrh	r3, [r1, #8]
   2c45c:	2b00      	cmp	r3, #0
   2c45e:	f000 8167 	beq.w	2c730 <am_hal_ble_blocking_transfer+0x2f4>
    ui32IntEnable = BLEIFn(ui32Module)->INTEN;
   2c462:	4bb6      	ldr	r3, [pc, #728]	; (2c73c <am_hal_ble_blocking_transfer+0x300>)
   2c464:	f8d3 b220 	ldr.w	fp, [r3, #544]	; 0x220
    BLEIFn(ui32Module)->INTEN_b.BLECIRQ = 0;
   2c468:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
   2c46c:	f36f 12c7 	bfc	r2, #7, #1
   2c470:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
    BLEIFn(ui32Module)->INTEN_b.BLECSSTAT = 0;
   2c474:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
   2c478:	f36f 2208 	bfc	r2, #8, #1
   2c47c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
    BLEIFn(ui32Module)->INTEN_b.CMDCMP = 0;
   2c480:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
   2c484:	f36f 0200 	bfc	r2, #0, #1
   2c488:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
    BLEIFn(ui32Module)->INTEN_b.THR = 0;
   2c48c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
   2c490:	f36f 0241 	bfc	r2, #1, #1
   2c494:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
    BLEIFn(ui32Module)->INTCLR_b.CMDCMP = 1;
   2c498:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
   2c49c:	f042 0201 	orr.w	r2, r2, #1
   2c4a0:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    BLEIFn(ui32Module)->INTCLR_b.BLECSSTAT = 1;
   2c4a4:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
   2c4a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   2c4ac:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    if (psTransfer->ui8Command == AM_HAL_BLE_WRITE)
   2c4b0:	7a8b      	ldrb	r3, [r1, #10]
   2c4b2:	2b01      	cmp	r3, #1
   2c4b4:	d039      	beq.n	2c52a <am_hal_ble_blocking_transfer+0xee>
        if (BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0)
   2c4b6:	4ba1      	ldr	r3, [pc, #644]	; (2c73c <am_hal_ble_blocking_transfer+0x300>)
   2c4b8:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2c4bc:	f013 0f80 	tst.w	r3, #128	; 0x80
   2c4c0:	f000 8093 	beq.w	2c5ea <am_hal_ble_blocking_transfer+0x1ae>
        if (!am_hal_ble_bus_lock(pBle))
   2c4c4:	f7ff fd68 	bl	2bf98 <am_hal_ble_bus_lock>
   2c4c8:	2800      	cmp	r0, #0
   2c4ca:	f000 8093 	beq.w	2c5f4 <am_hal_ble_blocking_transfer+0x1b8>
    if (psTransfer->bContinue)
   2c4ce:	f899 300c 	ldrb.w	r3, [r9, #12]
   2c4d2:	b113      	cbz	r3, 2c4da <am_hal_ble_blocking_transfer+0x9e>
        pBle->bContinuePacket = true;
   2c4d4:	2301      	movs	r3, #1
   2c4d6:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
    memcpy(&pBle->sCurrentTransfer, psTransfer, sizeof(am_hal_ble_transfer_t));
   2c4da:	f106 0a0c 	add.w	sl, r6, #12
   2c4de:	f8d9 2000 	ldr.w	r2, [r9]
   2c4e2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2c4e6:	f8d9 0008 	ldr.w	r0, [r9, #8]
   2c4ea:	f8d9 100c 	ldr.w	r1, [r9, #12]
   2c4ee:	60f2      	str	r2, [r6, #12]
   2c4f0:	6133      	str	r3, [r6, #16]
   2c4f2:	6170      	str	r0, [r6, #20]
   2c4f4:	61b1      	str	r1, [r6, #24]
   2c4f6:	f8d9 2010 	ldr.w	r2, [r9, #16]
   2c4fa:	f8d9 3014 	ldr.w	r3, [r9, #20]
   2c4fe:	61f2      	str	r2, [r6, #28]
   2c500:	6233      	str	r3, [r6, #32]
    AM_CRITICAL_BEGIN;
   2c502:	f000 ffb5 	bl	2d470 <am_hal_interrupt_master_disable>
   2c506:	9001      	str	r0, [sp, #4]
    am_hal_ble_cmd_write(pHandle, psTransfer);
   2c508:	4649      	mov	r1, r9
   2c50a:	4630      	mov	r0, r6
   2c50c:	f7ff fca4 	bl	2be58 <am_hal_ble_cmd_write>
    if (psTransfer->ui8Command == AM_HAL_BLE_WRITE)
   2c510:	f899 300a 	ldrb.w	r3, [r9, #10]
   2c514:	2b01      	cmp	r3, #1
   2c516:	d073      	beq.n	2c600 <am_hal_ble_blocking_transfer+0x1c4>
        while (pBle->ui32TransferIndex < pBle->sCurrentTransfer.ui16Length)
   2c518:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
   2c51a:	8ab3      	ldrh	r3, [r6, #20]
   2c51c:	429a      	cmp	r2, r3
   2c51e:	f080 80b4 	bcs.w	2c68a <am_hal_ble_blocking_transfer+0x24e>
            am_hal_ble_fifo_drain(pHandle);
   2c522:	4630      	mov	r0, r6
   2c524:	f7ff fcf2 	bl	2bf0c <am_hal_ble_fifo_drain>
   2c528:	e7f6      	b.n	2c518 <am_hal_ble_blocking_transfer+0xdc>
        if ( pBle->bLastPacketWasTX == true)
   2c52a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   2c52e:	b12b      	cbz	r3, 2c53c <am_hal_ble_blocking_transfer+0x100>
            if (!pBle->bPatchComplete)
   2c530:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   2c534:	b1ab      	cbz	r3, 2c562 <am_hal_ble_blocking_transfer+0x126>
            pBle->bLastPacketWasTX = false;
   2c536:	2300      	movs	r3, #0
   2c538:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        if (pBle->bPatchComplete)
   2c53c:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
   2c540:	b9a3      	cbnz	r3, 2c56c <am_hal_ble_blocking_transfer+0x130>
        BLEIFn(0)->BLEDBG_b.IOCLKON = 1;
   2c542:	4a7e      	ldr	r2, [pc, #504]	; (2c73c <am_hal_ble_blocking_transfer+0x300>)
   2c544:	f8d2 3410 	ldr.w	r3, [r2, #1040]	; 0x410
   2c548:	f043 0302 	orr.w	r3, r3, #2
   2c54c:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
        delay_us(5);
   2c550:	2050      	movs	r0, #80	; 0x50
   2c552:	f000 ff4b 	bl	2d3ec <am_hal_flash_delay>
        am_hal_ble_wakeup_set(pBle, 1);
   2c556:	2101      	movs	r1, #1
   2c558:	4630      	mov	r0, r6
   2c55a:	f7ff fd39 	bl	2bfd0 <am_hal_ble_wakeup_set>
        uint32_t ui32Timeout = 0;
   2c55e:	2400      	movs	r4, #0
   2c560:	e01a      	b.n	2c598 <am_hal_ble_blocking_transfer+0x15c>
                delay_ms(3);
   2c562:	f64b 3080 	movw	r0, #48000	; 0xbb80
   2c566:	f000 ff41 	bl	2d3ec <am_hal_flash_delay>
   2c56a:	e7e4      	b.n	2c536 <am_hal_ble_blocking_transfer+0xfa>
            uint32_t statusTimeout = 0;
   2c56c:	2400      	movs	r4, #0
            while (am_hal_ble_check_status(pBle) == true)
   2c56e:	4630      	mov	r0, r6
   2c570:	f7ff fc5e 	bl	2be30 <am_hal_ble_check_status>
   2c574:	2800      	cmp	r0, #0
   2c576:	d0e4      	beq.n	2c542 <am_hal_ble_blocking_transfer+0x106>
                statusTimeout++;
   2c578:	3401      	adds	r4, #1
                delay_us(10);
   2c57a:	20a0      	movs	r0, #160	; 0xa0
   2c57c:	f000 ff36 	bl	2d3ec <am_hal_flash_delay>
                if (statusTimeout > 300)
   2c580:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
   2c584:	d9f3      	bls.n	2c56e <am_hal_ble_blocking_transfer+0x132>
   2c586:	e7dc      	b.n	2c542 <am_hal_ble_blocking_transfer+0x106>
                if (am_hal_ble_bus_lock(pBle))
   2c588:	4630      	mov	r0, r6
   2c58a:	f7ff fd05 	bl	2bf98 <am_hal_ble_bus_lock>
   2c58e:	bb20      	cbnz	r0, 2c5da <am_hal_ble_blocking_transfer+0x19e>
            ui32Timeout++;
   2c590:	3401      	adds	r4, #1
            delay_us(10);
   2c592:	20a0      	movs	r0, #160	; 0xa0
   2c594:	f000 ff2a 	bl	2d3ec <am_hal_flash_delay>
            if (am_hal_ble_check_status(pBle) == true)
   2c598:	4630      	mov	r0, r6
   2c59a:	f7ff fc49 	bl	2be30 <am_hal_ble_check_status>
   2c59e:	2800      	cmp	r0, #0
   2c5a0:	d1f2      	bne.n	2c588 <am_hal_ble_blocking_transfer+0x14c>
            else if ((ui32Timeout >= ui32TimeoutLimit) ||
   2c5a2:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
   2c5a6:	d205      	bcs.n	2c5b4 <am_hal_ble_blocking_transfer+0x178>
                     (BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ))
   2c5a8:	4b64      	ldr	r3, [pc, #400]	; (2c73c <am_hal_ble_blocking_transfer+0x300>)
   2c5aa:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
            else if ((ui32Timeout >= ui32TimeoutLimit) ||
   2c5ae:	f013 0f80 	tst.w	r3, #128	; 0x80
   2c5b2:	d0ed      	beq.n	2c590 <am_hal_ble_blocking_transfer+0x154>
                am_hal_ble_wakeup_set(pBle, 0);
   2c5b4:	2100      	movs	r1, #0
   2c5b6:	4630      	mov	r0, r6
   2c5b8:	f7ff fd0a 	bl	2bfd0 <am_hal_ble_wakeup_set>
        BLEIFn(0)->BLEDBG_b.IOCLKON = 0;
   2c5bc:	4b5f      	ldr	r3, [pc, #380]	; (2c73c <am_hal_ble_blocking_transfer+0x300>)
   2c5be:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   2c5c2:	f36f 0241 	bfc	r2, #1, #1
   2c5c6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
            BLEIFn(ui32Module)->INTEN = ui32IntEnable;
   2c5ca:	f8c3 b220 	str.w	fp, [r3, #544]	; 0x220
            am_hal_ble_wakeup_set(pBle, 0);
   2c5ce:	2100      	movs	r1, #0
   2c5d0:	4630      	mov	r0, r6
   2c5d2:	f7ff fcfd 	bl	2bfd0 <am_hal_ble_wakeup_set>
            return ui32SpiStatus;
   2c5d6:	485a      	ldr	r0, [pc, #360]	; (2c740 <am_hal_ble_blocking_transfer+0x304>)
   2c5d8:	e0a7      	b.n	2c72a <am_hal_ble_blocking_transfer+0x2ee>
        BLEIFn(0)->BLEDBG_b.IOCLKON = 0;
   2c5da:	4b58      	ldr	r3, [pc, #352]	; (2c73c <am_hal_ble_blocking_transfer+0x300>)
   2c5dc:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   2c5e0:	f36f 0241 	bfc	r2, #1, #1
   2c5e4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
        if (ui32SpiStatus != AM_HAL_STATUS_SUCCESS)
   2c5e8:	e771      	b.n	2c4ce <am_hal_ble_blocking_transfer+0x92>
            BLEIFn(ui32Module)->INTEN = ui32IntEnable;
   2c5ea:	4b54      	ldr	r3, [pc, #336]	; (2c73c <am_hal_ble_blocking_transfer+0x300>)
   2c5ec:	f8c3 b220 	str.w	fp, [r3, #544]	; 0x220
            return AM_HAL_BLE_STATUS_IRQ_LOW;
   2c5f0:	4854      	ldr	r0, [pc, #336]	; (2c744 <am_hal_ble_blocking_transfer+0x308>)
   2c5f2:	e09a      	b.n	2c72a <am_hal_ble_blocking_transfer+0x2ee>
            BLEIFn(ui32Module)->INTEN = ui32IntEnable;
   2c5f4:	4b51      	ldr	r3, [pc, #324]	; (2c73c <am_hal_ble_blocking_transfer+0x300>)
   2c5f6:	f8c3 b220 	str.w	fp, [r3, #544]	; 0x220
            return AM_HAL_BLE_STATUS_BUS_BUSY;
   2c5fa:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   2c5fe:	e094      	b.n	2c72a <am_hal_ble_blocking_transfer+0x2ee>
        uint32_t ui32Bytes = pBle->sCurrentTransfer.ui16Length;
   2c600:	8ab7      	ldrh	r7, [r6, #20]
        uint32_t *pui32Buffer = pBle->sCurrentTransfer.pui32Data;
   2c602:	68f5      	ldr	r5, [r6, #12]
        am_hal_ble_cmd_write(pHandle, psTransfer);
   2c604:	4649      	mov	r1, r9
   2c606:	4630      	mov	r0, r6
   2c608:	f7ff fc26 	bl	2be58 <am_hal_ble_cmd_write>
        bool bCmdCmp = false;
   2c60c:	2400      	movs	r4, #0
        while (ui32Bytes)
   2c60e:	b1d7      	cbz	r7, 2c646 <am_hal_ble_blocking_transfer+0x20a>
            numWait = 0;
   2c610:	2200      	movs	r2, #0
            while ((ui32FifoRem = BLEIFn(ui32Module)->FIFOPTR_b.FIFO0REM) < 4)
   2c612:	4b4a      	ldr	r3, [pc, #296]	; (2c73c <am_hal_ble_blocking_transfer+0x300>)
   2c614:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   2c618:	f3c3 2307 	ubfx	r3, r3, #8, #8
   2c61c:	2b03      	cmp	r3, #3
   2c61e:	d80f      	bhi.n	2c640 <am_hal_ble_blocking_transfer+0x204>
                bCmdCmp = BLEIFn(ui32Module)->INTSTAT_b.CMDCMP;
   2c620:	4946      	ldr	r1, [pc, #280]	; (2c73c <am_hal_ble_blocking_transfer+0x300>)
   2c622:	f8d1 4224 	ldr.w	r4, [r1, #548]	; 0x224
                if (bCmdCmp || (numWait++ >= AM_HAL_IOM_MAX_BLOCKING_WAIT))
   2c626:	f014 0401 	ands.w	r4, r4, #1
   2c62a:	d109      	bne.n	2c640 <am_hal_ble_blocking_transfer+0x204>
   2c62c:	f102 0801 	add.w	r8, r2, #1
   2c630:	4945      	ldr	r1, [pc, #276]	; (2c748 <am_hal_ble_blocking_transfer+0x30c>)
   2c632:	428a      	cmp	r2, r1
   2c634:	d804      	bhi.n	2c640 <am_hal_ble_blocking_transfer+0x204>
                    am_hal_flash_delay( FLASH_CYCLES_US(1) );
   2c636:	2010      	movs	r0, #16
   2c638:	f000 fed8 	bl	2d3ec <am_hal_flash_delay>
                if (bCmdCmp || (numWait++ >= AM_HAL_IOM_MAX_BLOCKING_WAIT))
   2c63c:	4642      	mov	r2, r8
   2c63e:	e7e8      	b.n	2c612 <am_hal_ble_blocking_transfer+0x1d6>
            if (bCmdCmp || (ui32FifoRem < 4))
   2c640:	b90c      	cbnz	r4, 2c646 <am_hal_ble_blocking_transfer+0x20a>
   2c642:	2b03      	cmp	r3, #3
   2c644:	d80f      	bhi.n	2c666 <am_hal_ble_blocking_transfer+0x22a>
        bool bCmdCmp = false;
   2c646:	2400      	movs	r4, #0
       WHILE_TIMEOUT_MS_BREAK ( BLEIFn(ui32Module)->INTSTAT_b.CMDCMP == 0, 2,
   2c648:	4b3c      	ldr	r3, [pc, #240]	; (2c73c <am_hal_ble_blocking_transfer+0x300>)
   2c64a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
   2c64e:	f013 0f01 	tst.w	r3, #1
   2c652:	d116      	bne.n	2c682 <am_hal_ble_blocking_transfer+0x246>
   2c654:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
   2c658:	d213      	bcs.n	2c682 <am_hal_ble_blocking_transfer+0x246>
   2c65a:	2010      	movs	r0, #16
   2c65c:	f000 fec6 	bl	2d3ec <am_hal_flash_delay>
   2c660:	3401      	adds	r4, #1
   2c662:	e7f1      	b.n	2c648 <am_hal_ble_blocking_transfer+0x20c>
                    ui32Bytes = 0;
   2c664:	2700      	movs	r7, #0
            while ((ui32FifoRem >= 4) && ui32Bytes)
   2c666:	2b03      	cmp	r3, #3
   2c668:	d9d1      	bls.n	2c60e <am_hal_ble_blocking_transfer+0x1d2>
   2c66a:	2f00      	cmp	r7, #0
   2c66c:	d0cf      	beq.n	2c60e <am_hal_ble_blocking_transfer+0x1d2>
                BLEIFn(ui32Module)->FIFOPUSH = *pui32Buffer++;
   2c66e:	f855 1b04 	ldr.w	r1, [r5], #4
   2c672:	4a32      	ldr	r2, [pc, #200]	; (2c73c <am_hal_ble_blocking_transfer+0x300>)
   2c674:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
                ui32FifoRem -= 4;
   2c678:	3b04      	subs	r3, #4
                if (ui32Bytes >= 4)
   2c67a:	2f03      	cmp	r7, #3
   2c67c:	d9f2      	bls.n	2c664 <am_hal_ble_blocking_transfer+0x228>
                    ui32Bytes -= 4;
   2c67e:	3f04      	subs	r7, #4
   2c680:	e7f1      	b.n	2c666 <am_hal_ble_blocking_transfer+0x22a>
       am_hal_ble_wakeup_set(pBle, 0);
   2c682:	2100      	movs	r1, #0
   2c684:	4630      	mov	r0, r6
   2c686:	f7ff fca3 	bl	2bfd0 <am_hal_ble_wakeup_set>
    AM_CRITICAL_END;
   2c68a:	9801      	ldr	r0, [sp, #4]
   2c68c:	f000 fef4 	bl	2d478 <am_hal_interrupt_master_set>
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->INTSTAT_b.CMDCMP == 0, 10,
   2c690:	2400      	movs	r4, #0
   2c692:	4b2a      	ldr	r3, [pc, #168]	; (2c73c <am_hal_ble_blocking_transfer+0x300>)
   2c694:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
   2c698:	f013 0f01 	tst.w	r3, #1
   2c69c:	d108      	bne.n	2c6b0 <am_hal_ble_blocking_transfer+0x274>
   2c69e:	f242 730f 	movw	r3, #9999	; 0x270f
   2c6a2:	429c      	cmp	r4, r3
   2c6a4:	d846      	bhi.n	2c734 <am_hal_ble_blocking_transfer+0x2f8>
   2c6a6:	2010      	movs	r0, #16
   2c6a8:	f000 fea0 	bl	2d3ec <am_hal_flash_delay>
   2c6ac:	3401      	adds	r4, #1
   2c6ae:	e7f0      	b.n	2c692 <am_hal_ble_blocking_transfer+0x256>
    BLEIFn(ui32Module)->INTCLR_b.CMDCMP = 1;
   2c6b0:	4b22      	ldr	r3, [pc, #136]	; (2c73c <am_hal_ble_blocking_transfer+0x300>)
   2c6b2:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
   2c6b6:	f042 0201 	orr.w	r2, r2, #1
   2c6ba:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    BLEIFn(ui32Module)->INTCLR_b.THR = 1;
   2c6be:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
   2c6c2:	f042 0202 	orr.w	r2, r2, #2
   2c6c6:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    memset(&pBle->sCurrentTransfer, 0, sizeof(am_hal_ble_transfer_t));
   2c6ca:	2300      	movs	r3, #0
   2c6cc:	60f3      	str	r3, [r6, #12]
   2c6ce:	f8ca 3004 	str.w	r3, [sl, #4]
   2c6d2:	f8ca 3008 	str.w	r3, [sl, #8]
   2c6d6:	f8ca 300c 	str.w	r3, [sl, #12]
   2c6da:	f8ca 3010 	str.w	r3, [sl, #16]
   2c6de:	f8ca 3014 	str.w	r3, [sl, #20]
    pBle->ui32TransferIndex = 0;
   2c6e2:	63f3      	str	r3, [r6, #60]	; 0x3c
    if (psTransfer->ui8Command == AM_HAL_BLE_WRITE)
   2c6e4:	f899 300a 	ldrb.w	r3, [r9, #10]
   2c6e8:	2b01      	cmp	r3, #1
   2c6ea:	d00b      	beq.n	2c704 <am_hal_ble_blocking_transfer+0x2c8>
    if ((psTransfer->ui8Command == AM_HAL_BLE_READ) &&
   2c6ec:	f899 300a 	ldrb.w	r3, [r9, #10]
   2c6f0:	2b02      	cmp	r3, #2
   2c6f2:	d00f      	beq.n	2c714 <am_hal_ble_blocking_transfer+0x2d8>
    BLEIFn(ui32Module)->INTEN = ui32IntEnable;
   2c6f4:	4b11      	ldr	r3, [pc, #68]	; (2c73c <am_hal_ble_blocking_transfer+0x300>)
   2c6f6:	f8c3 b220 	str.w	fp, [r3, #544]	; 0x220
    am_hal_ble_bus_release(pBle);
   2c6fa:	4630      	mov	r0, r6
   2c6fc:	f7ff fba8 	bl	2be50 <am_hal_ble_bus_release>
    return AM_HAL_STATUS_SUCCESS;
   2c700:	2000      	movs	r0, #0
   2c702:	e012      	b.n	2c72a <am_hal_ble_blocking_transfer+0x2ee>
        am_hal_ble_wakeup_set(pBle, 0);
   2c704:	2100      	movs	r1, #0
   2c706:	4630      	mov	r0, r6
   2c708:	f7ff fc62 	bl	2bfd0 <am_hal_ble_wakeup_set>
        pBle->bLastPacketWasTX = true;
   2c70c:	2301      	movs	r3, #1
   2c70e:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
   2c712:	e7eb      	b.n	2c6ec <am_hal_ble_blocking_transfer+0x2b0>
        (pBle->bPatchComplete == true))
   2c714:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
    if ((psTransfer->ui8Command == AM_HAL_BLE_READ) &&
   2c718:	2b00      	cmp	r3, #0
   2c71a:	d0eb      	beq.n	2c6f4 <am_hal_ble_blocking_transfer+0x2b8>
        pBle->bLastPacketWasTX = false;
   2c71c:	2300      	movs	r3, #0
   2c71e:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
   2c722:	e7e7      	b.n	2c6f4 <am_hal_ble_blocking_transfer+0x2b8>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2c724:	2002      	movs	r0, #2
} // am_hal_ble_blocking_transfer()
   2c726:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2c728:	2002      	movs	r0, #2
} // am_hal_ble_blocking_transfer()
   2c72a:	b003      	add	sp, #12
   2c72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return AM_HAL_STATUS_SUCCESS;
   2c730:	2000      	movs	r0, #0
   2c732:	e7fa      	b.n	2c72a <am_hal_ble_blocking_transfer+0x2ee>
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->INTSTAT_b.CMDCMP == 0, 10,
   2c734:	4805      	ldr	r0, [pc, #20]	; (2c74c <am_hal_ble_blocking_transfer+0x310>)
   2c736:	e7f8      	b.n	2c72a <am_hal_ble_blocking_transfer+0x2ee>
   2c738:	01775230 	.word	0x01775230
   2c73c:	5000c000 	.word	0x5000c000
   2c740:	08000002 	.word	0x08000002
   2c744:	08000001 	.word	0x08000001
   2c748:	0007a11f 	.word	0x0007a11f
   2c74c:	08000009 	.word	0x08000009

0002c750 <am_hal_ble_blocking_hci_write>:
{
   2c750:	b500      	push	{lr}
   2c752:	b087      	sub	sp, #28
    am_hal_ble_transfer_t HciWrite =
   2c754:	9200      	str	r2, [sp, #0]
   2c756:	f88d 1004 	strb.w	r1, [sp, #4]
   2c75a:	2200      	movs	r2, #0
   2c75c:	f88d 2005 	strb.w	r2, [sp, #5]
   2c760:	f88d 2006 	strb.w	r2, [sp, #6]
   2c764:	f88d 2007 	strb.w	r2, [sp, #7]
   2c768:	f8ad 3008 	strh.w	r3, [sp, #8]
   2c76c:	2301      	movs	r3, #1
   2c76e:	f88d 300a 	strb.w	r3, [sp, #10]
   2c772:	f88d 200b 	strb.w	r2, [sp, #11]
   2c776:	f88d 200c 	strb.w	r2, [sp, #12]
   2c77a:	9204      	str	r2, [sp, #16]
   2c77c:	9205      	str	r2, [sp, #20]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2c77e:	b178      	cbz	r0, 2c7a0 <am_hal_ble_blocking_hci_write+0x50>
   2c780:	4602      	mov	r2, r0
   2c782:	6803      	ldr	r3, [r0, #0]
   2c784:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2c788:	4808      	ldr	r0, [pc, #32]	; (2c7ac <am_hal_ble_blocking_hci_write+0x5c>)
   2c78a:	4283      	cmp	r3, r0
   2c78c:	d10a      	bne.n	2c7a4 <am_hal_ble_blocking_hci_write+0x54>
    if (ui8Type != AM_HAL_BLE_RAW)
   2c78e:	b111      	cbz	r1, 2c796 <am_hal_ble_blocking_hci_write+0x46>
        HciWrite.ui8OffsetLen = 1;
   2c790:	2301      	movs	r3, #1
   2c792:	f88d 3007 	strb.w	r3, [sp, #7]
    ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &HciWrite);
   2c796:	4669      	mov	r1, sp
   2c798:	4610      	mov	r0, r2
   2c79a:	f7ff fe4f 	bl	2c43c <am_hal_ble_blocking_transfer>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
   2c79e:	e002      	b.n	2c7a6 <am_hal_ble_blocking_hci_write+0x56>
        return 0;
   2c7a0:	2000      	movs	r0, #0
   2c7a2:	e000      	b.n	2c7a6 <am_hal_ble_blocking_hci_write+0x56>
   2c7a4:	2000      	movs	r0, #0
} // am_hal_ble_blocking_hci_write()
   2c7a6:	b007      	add	sp, #28
   2c7a8:	f85d fb04 	ldr.w	pc, [sp], #4
   2c7ac:	01775230 	.word	0x01775230

0002c7b0 <am_hal_ble_patch_apply>:
{
   2c7b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c7b4:	b093      	sub	sp, #76	; 0x4c
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2c7b6:	2800      	cmp	r0, #0
   2c7b8:	f000 812d 	beq.w	2ca16 <am_hal_ble_patch_apply+0x266>
   2c7bc:	460f      	mov	r7, r1
   2c7be:	4606      	mov	r6, r0
   2c7c0:	6803      	ldr	r3, [r0, #0]
   2c7c2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2c7c6:	4a9f      	ldr	r2, [pc, #636]	; (2ca44 <am_hal_ble_patch_apply+0x294>)
   2c7c8:	4293      	cmp	r3, r2
   2c7ca:	f040 8126 	bne.w	2ca1a <am_hal_ble_patch_apply+0x26a>
    psPatchBuffer.bytes[0] = 0x01;
   2c7ce:	2301      	movs	r3, #1
   2c7d0:	f88d 3000 	strb.w	r3, [sp]
    psPatchBuffer.bytes[1] = psPatch->ui32Type;
   2c7d4:	680b      	ldr	r3, [r1, #0]
   2c7d6:	f88d 3001 	strb.w	r3, [sp, #1]
    psPatchBuffer.bytes[2] = 0xF1;
   2c7da:	23f1      	movs	r3, #241	; 0xf1
   2c7dc:	f88d 3002 	strb.w	r3, [sp, #2]
    psPatchBuffer.bytes[3] = 0x02;
   2c7e0:	2302      	movs	r3, #2
   2c7e2:	f88d 3003 	strb.w	r3, [sp, #3]
    psPatchBuffer.bytes[4] = (psPatch->ui32Length & 0xFF);
   2c7e6:	684b      	ldr	r3, [r1, #4]
   2c7e8:	f88d 3004 	strb.w	r3, [sp, #4]
    psPatchBuffer.bytes[5] = ((psPatch->ui32Length >> 8) & 0xFF);
   2c7ec:	0a1b      	lsrs	r3, r3, #8
   2c7ee:	f88d 3005 	strb.w	r3, [sp, #5]
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_TRIALS; ui32Trial++)
   2c7f2:	2500      	movs	r5, #0
   2c7f4:	f241 3387 	movw	r3, #4999	; 0x1387
   2c7f8:	429d      	cmp	r5, r3
   2c7fa:	d809      	bhi.n	2c810 <am_hal_ble_patch_apply+0x60>
        ui32ErrorStatus = am_hal_ble_blocking_hci_write(pHandle,
   2c7fc:	2306      	movs	r3, #6
   2c7fe:	466a      	mov	r2, sp
   2c800:	2100      	movs	r1, #0
   2c802:	4630      	mov	r0, r6
   2c804:	f7ff ffa4 	bl	2c750 <am_hal_ble_blocking_hci_write>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
   2c808:	4604      	mov	r4, r0
   2c80a:	b108      	cbz	r0, 2c810 <am_hal_ble_patch_apply+0x60>
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_TRIALS; ui32Trial++)
   2c80c:	3501      	adds	r5, #1
   2c80e:	e7f1      	b.n	2c7f4 <am_hal_ble_patch_apply+0x44>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
   2c810:	2c00      	cmp	r4, #0
   2c812:	f040 8103 	bne.w	2ca1c <am_hal_ble_patch_apply+0x26c>
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000,
   2c816:	4b8c      	ldr	r3, [pc, #560]	; (2ca48 <am_hal_ble_patch_apply+0x298>)
   2c818:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2c81c:	f013 0f80 	tst.w	r3, #128	; 0x80
   2c820:	d108      	bne.n	2c834 <am_hal_ble_patch_apply+0x84>
   2c822:	4b8a      	ldr	r3, [pc, #552]	; (2ca4c <am_hal_ble_patch_apply+0x29c>)
   2c824:	429c      	cmp	r4, r3
   2c826:	f200 80fd 	bhi.w	2ca24 <am_hal_ble_patch_apply+0x274>
   2c82a:	2010      	movs	r0, #16
   2c82c:	f000 fdde 	bl	2d3ec <am_hal_flash_delay>
   2c830:	3401      	adds	r4, #1
   2c832:	e7f0      	b.n	2c816 <am_hal_ble_patch_apply+0x66>
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
   2c834:	2300      	movs	r3, #0
   2c836:	9305      	str	r3, [sp, #20]
   2c838:	9306      	str	r3, [sp, #24]
   2c83a:	9307      	str	r3, [sp, #28]
   2c83c:	9308      	str	r3, [sp, #32]
   2c83e:	9309      	str	r3, [sp, #36]	; 0x24
    sTransfer.ui8Command = AM_HAL_BLE_READ;
   2c840:	2302      	movs	r3, #2
   2c842:	f88d 301a 	strb.w	r3, [sp, #26]
    sTransfer.pui32Data = psPatchBuffer.words;
   2c846:	f8cd d010 	str.w	sp, [sp, #16]
    sTransfer.ui16Length = 5;
   2c84a:	2305      	movs	r3, #5
   2c84c:	f8ad 3018 	strh.w	r3, [sp, #24]
    ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   2c850:	a904      	add	r1, sp, #16
   2c852:	4630      	mov	r0, r6
   2c854:	f7ff fdf2 	bl	2c43c <am_hal_ble_blocking_transfer>
    if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   2c858:	4604      	mov	r4, r0
   2c85a:	2800      	cmp	r0, #0
   2c85c:	f040 80de 	bne.w	2ca1c <am_hal_ble_patch_apply+0x26c>
    pui8ExpectedResponse[0] = 0x04;
   2c860:	2304      	movs	r3, #4
   2c862:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    pui8ExpectedResponse[1] = psPatch->ui32Type;
   2c866:	683b      	ldr	r3, [r7, #0]
   2c868:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    pui8ExpectedResponse[2] = 0xF1;
   2c86c:	23f1      	movs	r3, #241	; 0xf1
   2c86e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    pui8ExpectedResponse[3] = 0x01;
   2c872:	2301      	movs	r3, #1
   2c874:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    pui8ExpectedResponse[4] = 0x00;
   2c878:	2300      	movs	r3, #0
   2c87a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    if (!buffer_compare(psPatchBuffer.words, pui8ExpectedResponse, 5))
   2c87e:	2205      	movs	r2, #5
   2c880:	a90a      	add	r1, sp, #40	; 0x28
   2c882:	4668      	mov	r0, sp
   2c884:	f7ff faac 	bl	2bde0 <buffer_compare>
   2c888:	2800      	cmp	r0, #0
   2c88a:	f000 80cd 	beq.w	2ca28 <am_hal_ble_patch_apply+0x278>
    uint32_t ui32RemainingBytes = psPatch->ui32Length;
   2c88e:	f8d7 9004 	ldr.w	r9, [r7, #4]
    while (ui32RemainingBytes)
   2c892:	e02e      	b.n	2c8f2 <am_hal_ble_patch_apply+0x142>
        memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
   2c894:	2300      	movs	r3, #0
   2c896:	9305      	str	r3, [sp, #20]
   2c898:	9306      	str	r3, [sp, #24]
   2c89a:	9307      	str	r3, [sp, #28]
   2c89c:	9308      	str	r3, [sp, #32]
   2c89e:	9309      	str	r3, [sp, #36]	; 0x24
        sTransfer.ui8Command = AM_HAL_BLE_READ;
   2c8a0:	2302      	movs	r3, #2
   2c8a2:	f88d 301a 	strb.w	r3, [sp, #26]
        sTransfer.pui32Data = psPatchBuffer.words;
   2c8a6:	f8cd d010 	str.w	sp, [sp, #16]
        sTransfer.ui16Length = 5;
   2c8aa:	2305      	movs	r3, #5
   2c8ac:	f8ad 3018 	strh.w	r3, [sp, #24]
        ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   2c8b0:	a904      	add	r1, sp, #16
   2c8b2:	4630      	mov	r0, r6
   2c8b4:	f7ff fdc2 	bl	2c43c <am_hal_ble_blocking_transfer>
        if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   2c8b8:	2800      	cmp	r0, #0
   2c8ba:	f040 80bb 	bne.w	2ca34 <am_hal_ble_patch_apply+0x284>
        pui8ExpectedResponse[0] = 0x04;
   2c8be:	2304      	movs	r3, #4
   2c8c0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        pui8ExpectedResponse[1] = psPatch->ui32Type;
   2c8c4:	683b      	ldr	r3, [r7, #0]
   2c8c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
        pui8ExpectedResponse[2] = 0xF2;
   2c8ca:	23f2      	movs	r3, #242	; 0xf2
   2c8cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        pui8ExpectedResponse[3] = 0x01;
   2c8d0:	2301      	movs	r3, #1
   2c8d2:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        pui8ExpectedResponse[4] = 0x00;
   2c8d6:	2300      	movs	r3, #0
   2c8d8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        if (!buffer_compare(psPatchBuffer.words, pui8ExpectedResponse, 5))
   2c8dc:	2205      	movs	r2, #5
   2c8de:	a90a      	add	r1, sp, #40	; 0x28
   2c8e0:	4668      	mov	r0, sp
   2c8e2:	f7ff fa7d 	bl	2bde0 <buffer_compare>
   2c8e6:	2800      	cmp	r0, #0
   2c8e8:	f000 80a6 	beq.w	2ca38 <am_hal_ble_patch_apply+0x288>
        ui32RemainingBytes -= ui32TransferSize;
   2c8ec:	eba9 0908 	sub.w	r9, r9, r8
        ui32Index += ui32TransferSize;
   2c8f0:	4444      	add	r4, r8
    while (ui32RemainingBytes)
   2c8f2:	f1b9 0f00 	cmp.w	r9, #0
   2c8f6:	d03a      	beq.n	2c96e <am_hal_ble_patch_apply+0x1be>
        uint32_t ui32TransferSize = (ui32RemainingBytes > MAX_PATCH_PACKET_LEN ?
   2c8f8:	46c8      	mov	r8, r9
   2c8fa:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
   2c8fe:	bf28      	it	cs
   2c900:	f04f 0880 	movcs.w	r8, #128	; 0x80
        memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
   2c904:	2300      	movs	r3, #0
   2c906:	9305      	str	r3, [sp, #20]
   2c908:	9306      	str	r3, [sp, #24]
   2c90a:	9307      	str	r3, [sp, #28]
   2c90c:	9308      	str	r3, [sp, #32]
   2c90e:	9309      	str	r3, [sp, #36]	; 0x24
        sTransfer.ui8Command = AM_HAL_BLE_WRITE;
   2c910:	2201      	movs	r2, #1
   2c912:	f88d 201a 	strb.w	r2, [sp, #26]
        sTransfer.pui32Data = g_psPatchBuffer.words;
   2c916:	484e      	ldr	r0, [pc, #312]	; (2ca50 <am_hal_ble_patch_apply+0x2a0>)
   2c918:	9004      	str	r0, [sp, #16]
        sTransfer.ui16Length = ui32TransferSize + 4;
   2c91a:	f108 0104 	add.w	r1, r8, #4
   2c91e:	f8ad 1018 	strh.w	r1, [sp, #24]
        sTransfer.bContinue = false;
   2c922:	f88d 301c 	strb.w	r3, [sp, #28]
        g_psPatchBuffer.bytes[0] = 0x01;
   2c926:	7002      	strb	r2, [r0, #0]
        g_psPatchBuffer.bytes[1] = psPatch->ui32Type;
   2c928:	683b      	ldr	r3, [r7, #0]
   2c92a:	7043      	strb	r3, [r0, #1]
        g_psPatchBuffer.bytes[2] = 0xF2;
   2c92c:	23f2      	movs	r3, #242	; 0xf2
   2c92e:	7083      	strb	r3, [r0, #2]
        g_psPatchBuffer.bytes[3] = ui32TransferSize;
   2c930:	f880 8003 	strb.w	r8, [r0, #3]
        memcpy(&g_psPatchBuffer.bytes[4], (uint8_t *)&(psPatch->pui32Data[ui32Index / 4]), ui32TransferSize);
   2c934:	68fb      	ldr	r3, [r7, #12]
   2c936:	f024 0103 	bic.w	r1, r4, #3
   2c93a:	4642      	mov	r2, r8
   2c93c:	4419      	add	r1, r3
   2c93e:	3004      	adds	r0, #4
   2c940:	f7ee f998 	bl	1ac74 <memcpy>
        ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   2c944:	a904      	add	r1, sp, #16
   2c946:	4630      	mov	r0, r6
   2c948:	f7ff fd78 	bl	2c43c <am_hal_ble_blocking_transfer>
        if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   2c94c:	4605      	mov	r5, r0
   2c94e:	2800      	cmp	r0, #0
   2c950:	d16c      	bne.n	2ca2c <am_hal_ble_patch_apply+0x27c>
        WHILE_TIMEOUT_MS( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000,
   2c952:	4b3d      	ldr	r3, [pc, #244]	; (2ca48 <am_hal_ble_patch_apply+0x298>)
   2c954:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2c958:	f013 0f80 	tst.w	r3, #128	; 0x80
   2c95c:	d19a      	bne.n	2c894 <am_hal_ble_patch_apply+0xe4>
   2c95e:	4b3b      	ldr	r3, [pc, #236]	; (2ca4c <am_hal_ble_patch_apply+0x29c>)
   2c960:	429d      	cmp	r5, r3
   2c962:	d865      	bhi.n	2ca30 <am_hal_ble_patch_apply+0x280>
   2c964:	2010      	movs	r0, #16
   2c966:	f000 fd41 	bl	2d3ec <am_hal_flash_delay>
   2c96a:	3501      	adds	r5, #1
   2c96c:	e7f1      	b.n	2c952 <am_hal_ble_patch_apply+0x1a2>
    psPatchBuffer.bytes[0] = 0x01;
   2c96e:	2301      	movs	r3, #1
   2c970:	f88d 3000 	strb.w	r3, [sp]
    psPatchBuffer.bytes[1] = psPatch->ui32Type;
   2c974:	683b      	ldr	r3, [r7, #0]
   2c976:	f88d 3001 	strb.w	r3, [sp, #1]
    psPatchBuffer.bytes[2] = 0xF3;
   2c97a:	23f3      	movs	r3, #243	; 0xf3
   2c97c:	f88d 3002 	strb.w	r3, [sp, #2]
    psPatchBuffer.bytes[3] = 0x02;
   2c980:	2302      	movs	r3, #2
   2c982:	f88d 3003 	strb.w	r3, [sp, #3]
    psPatchBuffer.bytes[4] = (psPatch->ui32CRC & 0xFF);
   2c986:	68bb      	ldr	r3, [r7, #8]
   2c988:	f88d 3004 	strb.w	r3, [sp, #4]
    psPatchBuffer.bytes[5] = ((psPatch->ui32CRC >> 8) & 0xFF);
   2c98c:	0a1b      	lsrs	r3, r3, #8
   2c98e:	f88d 3005 	strb.w	r3, [sp, #5]
    if (am_hal_ble_blocking_hci_write(pHandle, AM_HAL_BLE_RAW, psPatchBuffer.words, 6) !=
   2c992:	2306      	movs	r3, #6
   2c994:	466a      	mov	r2, sp
   2c996:	2100      	movs	r1, #0
   2c998:	4630      	mov	r0, r6
   2c99a:	f7ff fed9 	bl	2c750 <am_hal_ble_blocking_hci_write>
   2c99e:	4604      	mov	r4, r0
   2c9a0:	2800      	cmp	r0, #0
   2c9a2:	d14b      	bne.n	2ca3c <am_hal_ble_patch_apply+0x28c>
    WHILE_TIMEOUT_MS( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000,
   2c9a4:	4b28      	ldr	r3, [pc, #160]	; (2ca48 <am_hal_ble_patch_apply+0x298>)
   2c9a6:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2c9aa:	f013 0f80 	tst.w	r3, #128	; 0x80
   2c9ae:	d107      	bne.n	2c9c0 <am_hal_ble_patch_apply+0x210>
   2c9b0:	4b26      	ldr	r3, [pc, #152]	; (2ca4c <am_hal_ble_patch_apply+0x29c>)
   2c9b2:	429c      	cmp	r4, r3
   2c9b4:	d844      	bhi.n	2ca40 <am_hal_ble_patch_apply+0x290>
   2c9b6:	2010      	movs	r0, #16
   2c9b8:	f000 fd18 	bl	2d3ec <am_hal_flash_delay>
   2c9bc:	3401      	adds	r4, #1
   2c9be:	e7f1      	b.n	2c9a4 <am_hal_ble_patch_apply+0x1f4>
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
   2c9c0:	2300      	movs	r3, #0
   2c9c2:	9305      	str	r3, [sp, #20]
   2c9c4:	9306      	str	r3, [sp, #24]
   2c9c6:	9307      	str	r3, [sp, #28]
   2c9c8:	9308      	str	r3, [sp, #32]
   2c9ca:	9309      	str	r3, [sp, #36]	; 0x24
    sTransfer.ui8Command = AM_HAL_BLE_READ;
   2c9cc:	2302      	movs	r3, #2
   2c9ce:	f88d 301a 	strb.w	r3, [sp, #26]
    sTransfer.pui32Data = psPatchBuffer.words;
   2c9d2:	f8cd d010 	str.w	sp, [sp, #16]
    sTransfer.ui16Length = 5;
   2c9d6:	2305      	movs	r3, #5
   2c9d8:	f8ad 3018 	strh.w	r3, [sp, #24]
    ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   2c9dc:	a904      	add	r1, sp, #16
   2c9de:	4630      	mov	r0, r6
   2c9e0:	f7ff fd2c 	bl	2c43c <am_hal_ble_blocking_transfer>
    if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   2c9e4:	4604      	mov	r4, r0
   2c9e6:	b9c8      	cbnz	r0, 2ca1c <am_hal_ble_patch_apply+0x26c>
    pui8ExpectedResponse[0] = 0x04;
   2c9e8:	2304      	movs	r3, #4
   2c9ea:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    pui8ExpectedResponse[1] = psPatch->ui32Type;
   2c9ee:	683b      	ldr	r3, [r7, #0]
   2c9f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    pui8ExpectedResponse[2] = 0xF3;
   2c9f4:	23f3      	movs	r3, #243	; 0xf3
   2c9f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    pui8ExpectedResponse[3] = 0x01;
   2c9fa:	2301      	movs	r3, #1
   2c9fc:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    pui8ExpectedResponse[4] = 0x00;
   2ca00:	2300      	movs	r3, #0
   2ca02:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    if (!buffer_compare(psPatchBuffer.words, pui8ExpectedResponse, 5))
   2ca06:	2205      	movs	r2, #5
   2ca08:	a90a      	add	r1, sp, #40	; 0x28
   2ca0a:	4668      	mov	r0, sp
   2ca0c:	f7ff f9e8 	bl	2bde0 <buffer_compare>
   2ca10:	b920      	cbnz	r0, 2ca1c <am_hal_ble_patch_apply+0x26c>
        return AM_HAL_STATUS_FAIL;
   2ca12:	2401      	movs	r4, #1
   2ca14:	e002      	b.n	2ca1c <am_hal_ble_patch_apply+0x26c>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2ca16:	2402      	movs	r4, #2
   2ca18:	e000      	b.n	2ca1c <am_hal_ble_patch_apply+0x26c>
   2ca1a:	2402      	movs	r4, #2
} // am_hal_ble_patch_apply()
   2ca1c:	4620      	mov	r0, r4
   2ca1e:	b013      	add	sp, #76	; 0x4c
   2ca20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000,
   2ca24:	4c0b      	ldr	r4, [pc, #44]	; (2ca54 <am_hal_ble_patch_apply+0x2a4>)
   2ca26:	e7f9      	b.n	2ca1c <am_hal_ble_patch_apply+0x26c>
        return AM_HAL_STATUS_FAIL;
   2ca28:	2401      	movs	r4, #1
   2ca2a:	e7f7      	b.n	2ca1c <am_hal_ble_patch_apply+0x26c>
            return ui32ErrorStatus;
   2ca2c:	4604      	mov	r4, r0
   2ca2e:	e7f5      	b.n	2ca1c <am_hal_ble_patch_apply+0x26c>
        WHILE_TIMEOUT_MS( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000,
   2ca30:	4c08      	ldr	r4, [pc, #32]	; (2ca54 <am_hal_ble_patch_apply+0x2a4>)
   2ca32:	e7f3      	b.n	2ca1c <am_hal_ble_patch_apply+0x26c>
            return ui32ErrorStatus;
   2ca34:	4604      	mov	r4, r0
   2ca36:	e7f1      	b.n	2ca1c <am_hal_ble_patch_apply+0x26c>
            return AM_HAL_STATUS_FAIL;
   2ca38:	2401      	movs	r4, #1
   2ca3a:	e7ef      	b.n	2ca1c <am_hal_ble_patch_apply+0x26c>
        return AM_HAL_STATUS_FAIL;
   2ca3c:	2401      	movs	r4, #1
   2ca3e:	e7ed      	b.n	2ca1c <am_hal_ble_patch_apply+0x26c>
    WHILE_TIMEOUT_MS( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000,
   2ca40:	4c04      	ldr	r4, [pc, #16]	; (2ca54 <am_hal_ble_patch_apply+0x2a4>)
   2ca42:	e7eb      	b.n	2ca1c <am_hal_ble_patch_apply+0x26c>
   2ca44:	01775230 	.word	0x01775230
   2ca48:	5000c000 	.word	0x5000c000
   2ca4c:	000f423f 	.word	0x000f423f
   2ca50:	10006f9c 	.word	0x10006f9c
   2ca54:	08000004 	.word	0x08000004

0002ca58 <am_hal_ble_default_patch_apply>:
{
   2ca58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ca5c:	4607      	mov	r7, r0
    if (APOLLO3_A0 || APOLLO3_A1)
   2ca5e:	4b16      	ldr	r3, [pc, #88]	; (2cab8 <am_hal_ble_default_patch_apply+0x60>)
   2ca60:	68db      	ldr	r3, [r3, #12]
   2ca62:	b2db      	uxtb	r3, r3
   2ca64:	2b11      	cmp	r3, #17
   2ca66:	d00a      	beq.n	2ca7e <am_hal_ble_default_patch_apply+0x26>
   2ca68:	4b13      	ldr	r3, [pc, #76]	; (2cab8 <am_hal_ble_default_patch_apply+0x60>)
   2ca6a:	68db      	ldr	r3, [r3, #12]
   2ca6c:	b2db      	uxtb	r3, r3
   2ca6e:	2b12      	cmp	r3, #18
   2ca70:	d005      	beq.n	2ca7e <am_hal_ble_default_patch_apply+0x26>
        ui32NumPatches = am_hal_ble_num_default_patches_b0;
   2ca72:	4b12      	ldr	r3, [pc, #72]	; (2cabc <am_hal_ble_default_patch_apply+0x64>)
   2ca74:	f8d3 8000 	ldr.w	r8, [r3]
        psDefaultPatches = am_hal_ble_default_patches_b0;
   2ca78:	4b11      	ldr	r3, [pc, #68]	; (2cac0 <am_hal_ble_default_patch_apply+0x68>)
   2ca7a:	681e      	ldr	r6, [r3, #0]
   2ca7c:	e004      	b.n	2ca88 <am_hal_ble_default_patch_apply+0x30>
        ui32NumPatches = am_hal_ble_num_default_patches;
   2ca7e:	4b11      	ldr	r3, [pc, #68]	; (2cac4 <am_hal_ble_default_patch_apply+0x6c>)
   2ca80:	f8d3 8000 	ldr.w	r8, [r3]
        psDefaultPatches = am_hal_ble_default_patches;
   2ca84:	4b10      	ldr	r3, [pc, #64]	; (2cac8 <am_hal_ble_default_patch_apply+0x70>)
   2ca86:	681e      	ldr	r6, [r3, #0]
    for ( i = 0; i < ui32NumPatches; i++ )
   2ca88:	2400      	movs	r4, #0
   2ca8a:	4544      	cmp	r4, r8
   2ca8c:	d20f      	bcs.n	2caae <am_hal_ble_default_patch_apply+0x56>
        ui16Crc = am_hal_ble_crc_nz((uint8_t*)(psDefaultPatches[i]->pui32Data), psDefaultPatches[i]->ui32Length);
   2ca8e:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
   2ca92:	6869      	ldr	r1, [r5, #4]
   2ca94:	68e8      	ldr	r0, [r5, #12]
   2ca96:	f7ff f9b5 	bl	2be04 <am_hal_ble_crc_nz>
        psDefaultPatches[i]->ui32CRC = ui16Crc;
   2ca9a:	60a8      	str	r0, [r5, #8]
        ui32Status = am_hal_ble_patch_apply(pHandle, psDefaultPatches[i]);
   2ca9c:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   2caa0:	4638      	mov	r0, r7
   2caa2:	f7ff fe85 	bl	2c7b0 <am_hal_ble_patch_apply>
        if (ui32Status != AM_HAL_STATUS_SUCCESS)
   2caa6:	4603      	mov	r3, r0
   2caa8:	b910      	cbnz	r0, 2cab0 <am_hal_ble_default_patch_apply+0x58>
    for ( i = 0; i < ui32NumPatches; i++ )
   2caaa:	3401      	adds	r4, #1
   2caac:	e7ed      	b.n	2ca8a <am_hal_ble_default_patch_apply+0x32>
    return AM_HAL_STATUS_SUCCESS;
   2caae:	2300      	movs	r3, #0
} // am_hal_ble_default_patch_apply()
   2cab0:	4618      	mov	r0, r3
   2cab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2cab6:	bf00      	nop
   2cab8:	40020000 	.word	0x40020000
   2cabc:	000372d0 	.word	0x000372d0
   2cac0:	10001e24 	.word	0x10001e24
   2cac4:	00036bac 	.word	0x00036bac
   2cac8:	10000a68 	.word	0x10000a68

0002cacc <am_hal_ble_patch_copy_end_apply>:
{
   2cacc:	b570      	push	{r4, r5, r6, lr}
   2cace:	b092      	sub	sp, #72	; 0x48
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2cad0:	2800      	cmp	r0, #0
   2cad2:	d060      	beq.n	2cb96 <am_hal_ble_patch_copy_end_apply+0xca>
   2cad4:	4606      	mov	r6, r0
   2cad6:	6803      	ldr	r3, [r0, #0]
   2cad8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2cadc:	4a32      	ldr	r2, [pc, #200]	; (2cba8 <am_hal_ble_patch_copy_end_apply+0xdc>)
   2cade:	4293      	cmp	r3, r2
   2cae0:	d15b      	bne.n	2cb9a <am_hal_ble_patch_copy_end_apply+0xce>
    psPatchBuffer.bytes[0] = 0x01;
   2cae2:	2301      	movs	r3, #1
   2cae4:	f88d 3000 	strb.w	r3, [sp]
    psPatchBuffer.bytes[1] = 0xEE;
   2cae8:	23ee      	movs	r3, #238	; 0xee
   2caea:	f88d 3001 	strb.w	r3, [sp, #1]
    psPatchBuffer.bytes[2] = 0xF1;
   2caee:	23f1      	movs	r3, #241	; 0xf1
   2caf0:	f88d 3002 	strb.w	r3, [sp, #2]
    psPatchBuffer.bytes[3] = 0x02;
   2caf4:	2302      	movs	r3, #2
   2caf6:	f88d 3003 	strb.w	r3, [sp, #3]
    psPatchBuffer.bytes[4] = 0x00;
   2cafa:	2400      	movs	r4, #0
   2cafc:	f88d 4004 	strb.w	r4, [sp, #4]
    psPatchBuffer.bytes[5] = 0x00;
   2cb00:	f88d 4005 	strb.w	r4, [sp, #5]
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_TRIALS; ui32Trial++)
   2cb04:	f241 3387 	movw	r3, #4999	; 0x1387
   2cb08:	429c      	cmp	r4, r3
   2cb0a:	d809      	bhi.n	2cb20 <am_hal_ble_patch_copy_end_apply+0x54>
        ui32ErrorStatus = am_hal_ble_blocking_hci_write(pHandle,
   2cb0c:	2306      	movs	r3, #6
   2cb0e:	466a      	mov	r2, sp
   2cb10:	2100      	movs	r1, #0
   2cb12:	4630      	mov	r0, r6
   2cb14:	f7ff fe1c 	bl	2c750 <am_hal_ble_blocking_hci_write>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
   2cb18:	4605      	mov	r5, r0
   2cb1a:	b108      	cbz	r0, 2cb20 <am_hal_ble_patch_copy_end_apply+0x54>
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_TRIALS; ui32Trial++)
   2cb1c:	3401      	adds	r4, #1
   2cb1e:	e7f1      	b.n	2cb04 <am_hal_ble_patch_copy_end_apply+0x38>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
   2cb20:	2d00      	cmp	r5, #0
   2cb22:	d13b      	bne.n	2cb9c <am_hal_ble_patch_copy_end_apply+0xd0>
    WHILE_TIMEOUT_MS( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000, AM_HAL_BLE_NO_HCI_RESPONSE);
   2cb24:	4b21      	ldr	r3, [pc, #132]	; (2cbac <am_hal_ble_patch_copy_end_apply+0xe0>)
   2cb26:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2cb2a:	f013 0f80 	tst.w	r3, #128	; 0x80
   2cb2e:	d107      	bne.n	2cb40 <am_hal_ble_patch_copy_end_apply+0x74>
   2cb30:	4b1f      	ldr	r3, [pc, #124]	; (2cbb0 <am_hal_ble_patch_copy_end_apply+0xe4>)
   2cb32:	429d      	cmp	r5, r3
   2cb34:	d835      	bhi.n	2cba2 <am_hal_ble_patch_copy_end_apply+0xd6>
   2cb36:	2010      	movs	r0, #16
   2cb38:	f000 fc58 	bl	2d3ec <am_hal_flash_delay>
   2cb3c:	3501      	adds	r5, #1
   2cb3e:	e7f1      	b.n	2cb24 <am_hal_ble_patch_copy_end_apply+0x58>
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
   2cb40:	2300      	movs	r3, #0
   2cb42:	9305      	str	r3, [sp, #20]
   2cb44:	9306      	str	r3, [sp, #24]
   2cb46:	9307      	str	r3, [sp, #28]
   2cb48:	9308      	str	r3, [sp, #32]
   2cb4a:	9309      	str	r3, [sp, #36]	; 0x24
    sTransfer.ui8Command = AM_HAL_BLE_READ;
   2cb4c:	2302      	movs	r3, #2
   2cb4e:	f88d 301a 	strb.w	r3, [sp, #26]
    sTransfer.pui32Data = psPatchBuffer.words;
   2cb52:	f8cd d010 	str.w	sp, [sp, #16]
    sTransfer.ui16Length = 5;
   2cb56:	2305      	movs	r3, #5
   2cb58:	f8ad 3018 	strh.w	r3, [sp, #24]
    ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   2cb5c:	a904      	add	r1, sp, #16
   2cb5e:	4630      	mov	r0, r6
   2cb60:	f7ff fc6c 	bl	2c43c <am_hal_ble_blocking_transfer>
    if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   2cb64:	4605      	mov	r5, r0
   2cb66:	b9c8      	cbnz	r0, 2cb9c <am_hal_ble_patch_copy_end_apply+0xd0>
    pui8ExpectedResponse[0] = 0x04;
   2cb68:	2304      	movs	r3, #4
   2cb6a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    pui8ExpectedResponse[1] = 0xEE;
   2cb6e:	23ee      	movs	r3, #238	; 0xee
   2cb70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    pui8ExpectedResponse[2] = 0xF1;
   2cb74:	23f1      	movs	r3, #241	; 0xf1
   2cb76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    pui8ExpectedResponse[3] = 0x01;
   2cb7a:	2301      	movs	r3, #1
   2cb7c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    pui8ExpectedResponse[4] = 0x00;
   2cb80:	2300      	movs	r3, #0
   2cb82:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    if (!buffer_compare(psPatchBuffer.words, pui8ExpectedResponse, 5))
   2cb86:	2205      	movs	r2, #5
   2cb88:	a90a      	add	r1, sp, #40	; 0x28
   2cb8a:	4668      	mov	r0, sp
   2cb8c:	f7ff f928 	bl	2bde0 <buffer_compare>
   2cb90:	b920      	cbnz	r0, 2cb9c <am_hal_ble_patch_copy_end_apply+0xd0>
        return AM_HAL_STATUS_FAIL;
   2cb92:	2501      	movs	r5, #1
   2cb94:	e002      	b.n	2cb9c <am_hal_ble_patch_copy_end_apply+0xd0>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2cb96:	2502      	movs	r5, #2
   2cb98:	e000      	b.n	2cb9c <am_hal_ble_patch_copy_end_apply+0xd0>
   2cb9a:	2502      	movs	r5, #2
} // am_hal_ble_patch_copy_end_apply()
   2cb9c:	4628      	mov	r0, r5
   2cb9e:	b012      	add	sp, #72	; 0x48
   2cba0:	bd70      	pop	{r4, r5, r6, pc}
    WHILE_TIMEOUT_MS( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000, AM_HAL_BLE_NO_HCI_RESPONSE);
   2cba2:	4d04      	ldr	r5, [pc, #16]	; (2cbb4 <am_hal_ble_patch_copy_end_apply+0xe8>)
   2cba4:	e7fa      	b.n	2cb9c <am_hal_ble_patch_copy_end_apply+0xd0>
   2cba6:	bf00      	nop
   2cba8:	01775230 	.word	0x01775230
   2cbac:	5000c000 	.word	0x5000c000
   2cbb0:	000f423f 	.word	0x000f423f
   2cbb4:	08000004 	.word	0x08000004

0002cbb8 <am_hal_ble_default_copy_patch_apply>:
{
   2cbb8:	b570      	push	{r4, r5, r6, lr}
   2cbba:	4604      	mov	r4, r0
    psCopyPatch = am_hal_ble_default_copy_patches;
   2cbbc:	4b08      	ldr	r3, [pc, #32]	; (2cbe0 <am_hal_ble_default_copy_patch_apply+0x28>)
   2cbbe:	681e      	ldr	r6, [r3, #0]
    ui16Crc = am_hal_ble_crc_nz((uint8_t*)(psCopyPatch[0]->pui32Data), psCopyPatch[0]->ui32Length);
   2cbc0:	6835      	ldr	r5, [r6, #0]
   2cbc2:	6869      	ldr	r1, [r5, #4]
   2cbc4:	68e8      	ldr	r0, [r5, #12]
   2cbc6:	f7ff f91d 	bl	2be04 <am_hal_ble_crc_nz>
    psCopyPatch[0]->ui32CRC = ui16Crc;
   2cbca:	60a8      	str	r0, [r5, #8]
    ui32Status = am_hal_ble_patch_apply(pHandle, psCopyPatch[0]);
   2cbcc:	6831      	ldr	r1, [r6, #0]
   2cbce:	4620      	mov	r0, r4
   2cbd0:	f7ff fdee 	bl	2c7b0 <am_hal_ble_patch_apply>
    if (ui32Status != AM_HAL_STATUS_SUCCESS)
   2cbd4:	b100      	cbz	r0, 2cbd8 <am_hal_ble_default_copy_patch_apply+0x20>
}
   2cbd6:	bd70      	pop	{r4, r5, r6, pc}
    ui32Status = am_hal_ble_patch_copy_end_apply(pHandle);
   2cbd8:	4620      	mov	r0, r4
   2cbda:	f7ff ff77 	bl	2cacc <am_hal_ble_patch_copy_end_apply>
    if ( ui32Status != AM_HAL_STATUS_SUCCESS )
   2cbde:	e7fa      	b.n	2cbd6 <am_hal_ble_default_copy_patch_apply+0x1e>
   2cbe0:	10000a58 	.word	0x10000a58

0002cbe4 <am_hal_ble_blocking_hci_read>:
{
   2cbe4:	b570      	push	{r4, r5, r6, lr}
   2cbe6:	b088      	sub	sp, #32
   2cbe8:	4614      	mov	r4, r2
    am_hal_ble_transfer_t HciRead =
   2cbea:	ab07      	add	r3, sp, #28
   2cbec:	9301      	str	r3, [sp, #4]
   2cbee:	4b26      	ldr	r3, [pc, #152]	; (2cc88 <am_hal_ble_blocking_hci_read+0xa4>)
   2cbf0:	681b      	ldr	r3, [r3, #0]
   2cbf2:	f8ad 3008 	strh.w	r3, [sp, #8]
   2cbf6:	0c1b      	lsrs	r3, r3, #16
   2cbf8:	f88d 300a 	strb.w	r3, [sp, #10]
   2cbfc:	2300      	movs	r3, #0
   2cbfe:	f88d 300b 	strb.w	r3, [sp, #11]
   2cc02:	2202      	movs	r2, #2
   2cc04:	f8ad 200c 	strh.w	r2, [sp, #12]
   2cc08:	f88d 200e 	strb.w	r2, [sp, #14]
   2cc0c:	f88d 300f 	strb.w	r3, [sp, #15]
   2cc10:	f88d 3010 	strb.w	r3, [sp, #16]
   2cc14:	9305      	str	r3, [sp, #20]
   2cc16:	9306      	str	r3, [sp, #24]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2cc18:	b360      	cbz	r0, 2cc74 <am_hal_ble_blocking_hci_read+0x90>
   2cc1a:	460d      	mov	r5, r1
   2cc1c:	4606      	mov	r6, r0
   2cc1e:	6803      	ldr	r3, [r0, #0]
   2cc20:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2cc24:	4a19      	ldr	r2, [pc, #100]	; (2cc8c <am_hal_ble_blocking_hci_read+0xa8>)
   2cc26:	4293      	cmp	r3, r2
   2cc28:	d126      	bne.n	2cc78 <am_hal_ble_blocking_hci_read+0x94>
    if ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ )
   2cc2a:	4b19      	ldr	r3, [pc, #100]	; (2cc90 <am_hal_ble_blocking_hci_read+0xac>)
   2cc2c:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2cc30:	f013 0f80 	tst.w	r3, #128	; 0x80
   2cc34:	d104      	bne.n	2cc40 <am_hal_ble_blocking_hci_read+0x5c>
        ui32NumBytes = 0;
   2cc36:	2300      	movs	r3, #0
    if (pui32BytesReceived)
   2cc38:	b31c      	cbz	r4, 2cc82 <am_hal_ble_blocking_hci_read+0x9e>
        *pui32BytesReceived = ui32NumBytes;
   2cc3a:	6023      	str	r3, [r4, #0]
    return AM_HAL_STATUS_SUCCESS;
   2cc3c:	2000      	movs	r0, #0
   2cc3e:	e01c      	b.n	2cc7a <am_hal_ble_blocking_hci_read+0x96>
        ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &HciRead);
   2cc40:	a901      	add	r1, sp, #4
   2cc42:	f7ff fbfb 	bl	2c43c <am_hal_ble_blocking_transfer>
        if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
   2cc46:	b9c0      	cbnz	r0, 2cc7a <am_hal_ble_blocking_hci_read+0x96>
        HciRead.pui32Data = pui32Data;
   2cc48:	9501      	str	r5, [sp, #4]
        HciRead.ui16Length = (sLengthBytes.bytes[0] +
   2cc4a:	f89d 301c 	ldrb.w	r3, [sp, #28]
                              (sLengthBytes.bytes[1] << 8));
   2cc4e:	f89d 201d 	ldrb.w	r2, [sp, #29]
        HciRead.ui16Length = (sLengthBytes.bytes[0] +
   2cc52:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   2cc56:	b29b      	uxth	r3, r3
   2cc58:	f8ad 300c 	strh.w	r3, [sp, #12]
        if ( (HciRead.ui16Length == 0) || (HciRead.ui16Length > 256) )
   2cc5c:	3b01      	subs	r3, #1
   2cc5e:	b29b      	uxth	r3, r3
   2cc60:	2bff      	cmp	r3, #255	; 0xff
   2cc62:	d80c      	bhi.n	2cc7e <am_hal_ble_blocking_hci_read+0x9a>
        ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &HciRead);
   2cc64:	a901      	add	r1, sp, #4
   2cc66:	4630      	mov	r0, r6
   2cc68:	f7ff fbe8 	bl	2c43c <am_hal_ble_blocking_transfer>
        if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
   2cc6c:	b928      	cbnz	r0, 2cc7a <am_hal_ble_blocking_hci_read+0x96>
        ui32NumBytes =  HciRead.ui16Length;
   2cc6e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2cc72:	e7e1      	b.n	2cc38 <am_hal_ble_blocking_hci_read+0x54>
        return 0;
   2cc74:	2000      	movs	r0, #0
   2cc76:	e000      	b.n	2cc7a <am_hal_ble_blocking_hci_read+0x96>
   2cc78:	2000      	movs	r0, #0
} // am_hal_ble_blocking_hci_read()
   2cc7a:	b008      	add	sp, #32
   2cc7c:	bd70      	pop	{r4, r5, r6, pc}
            return AM_HAL_STATUS_OUT_OF_RANGE;
   2cc7e:	2005      	movs	r0, #5
   2cc80:	e7fb      	b.n	2cc7a <am_hal_ble_blocking_hci_read+0x96>
    return AM_HAL_STATUS_SUCCESS;
   2cc82:	2000      	movs	r0, #0
   2cc84:	e7f9      	b.n	2cc7a <am_hal_ble_blocking_hci_read+0x96>
   2cc86:	bf00      	nop
   2cc88:	0002fb80 	.word	0x0002fb80
   2cc8c:	01775230 	.word	0x01775230
   2cc90:	5000c000 	.word	0x5000c000

0002cc94 <am_hal_ble_int_service>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2cc94:	2800      	cmp	r0, #0
   2cc96:	d06d      	beq.n	2cd74 <am_hal_ble_int_service+0xe0>
{
   2cc98:	b510      	push	{r4, lr}
   2cc9a:	4604      	mov	r4, r0
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2cc9c:	6803      	ldr	r3, [r0, #0]
   2cc9e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2cca2:	4a3b      	ldr	r2, [pc, #236]	; (2cd90 <am_hal_ble_int_service+0xfc>)
   2cca4:	4293      	cmp	r3, r2
   2cca6:	d167      	bne.n	2cd78 <am_hal_ble_int_service+0xe4>
    if ( ui32Status & BLEIF_INTSTAT_CMDCMP_Msk )
   2cca8:	f011 0f01 	tst.w	r1, #1
   2ccac:	d002      	beq.n	2ccb4 <am_hal_ble_int_service+0x20>
        pBle->bCmdComplete = true;
   2ccae:	2301      	movs	r3, #1
   2ccb0:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    if ( ui32Status & BLEIF_INTSTAT_DCMP_Msk )
   2ccb4:	f411 7f00 	tst.w	r1, #512	; 0x200
   2ccb8:	d002      	beq.n	2ccc0 <am_hal_ble_int_service+0x2c>
        pBle->bDmaComplete = true;
   2ccba:	2301      	movs	r3, #1
   2ccbc:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
    if (APOLLO3_GE_B0)
   2ccc0:	4b34      	ldr	r3, [pc, #208]	; (2cd94 <am_hal_ble_int_service+0x100>)
   2ccc2:	68db      	ldr	r3, [r3, #12]
   2ccc4:	b2db      	uxtb	r3, r3
   2ccc6:	2b20      	cmp	r3, #32
   2ccc8:	d90b      	bls.n	2cce2 <am_hal_ble_int_service+0x4e>
        if ( (ui32Status & BLEIF_INTSTAT_BLECIRQN_Msk)  &&
   2ccca:	f411 4f00 	tst.w	r1, #32768	; 0x8000
   2ccce:	d002      	beq.n	2ccd6 <am_hal_ble_int_service+0x42>
             (pBle->sCurrentTransfer.ui8Command == AM_HAL_BLE_READ) )
   2ccd0:	7da3      	ldrb	r3, [r4, #22]
        if ( (ui32Status & BLEIF_INTSTAT_BLECIRQN_Msk)  &&
   2ccd2:	2b02      	cmp	r3, #2
   2ccd4:	d037      	beq.n	2cd46 <am_hal_ble_int_service+0xb2>
        if ( (ui32Status & BLEIF_INTSTAT_BLECSSTATN_Msk ) &&
   2ccd6:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   2ccda:	d002      	beq.n	2cce2 <am_hal_ble_int_service+0x4e>
             (pBle->sCurrentTransfer.ui8Command == AM_HAL_BLE_WRITE) )
   2ccdc:	7da3      	ldrb	r3, [r4, #22]
        if ( (ui32Status & BLEIF_INTSTAT_BLECSSTATN_Msk ) &&
   2ccde:	2b01      	cmp	r3, #1
   2cce0:	d035      	beq.n	2cd4e <am_hal_ble_int_service+0xba>
    if ( pBle->bCmdComplete && pBle->bDmaComplete &&
   2cce2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   2cce6:	2b00      	cmp	r3, #0
   2cce8:	d048      	beq.n	2cd7c <am_hal_ble_int_service+0xe8>
   2ccea:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   2ccee:	2b00      	cmp	r3, #0
   2ccf0:	d046      	beq.n	2cd80 <am_hal_ble_int_service+0xec>
         ((pBle->bFlowControlComplete) || (!APOLLO3_GE_B0) || SKIP_FALLING_EDGES) )
   2ccf2:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   2ccf6:	b923      	cbnz	r3, 2cd02 <am_hal_ble_int_service+0x6e>
   2ccf8:	4b26      	ldr	r3, [pc, #152]	; (2cd94 <am_hal_ble_int_service+0x100>)
   2ccfa:	68db      	ldr	r3, [r3, #12]
   2ccfc:	b2db      	uxtb	r3, r3
   2ccfe:	2b20      	cmp	r3, #32
   2cd00:	d840      	bhi.n	2cd84 <am_hal_ble_int_service+0xf0>
        pBle->bCmdComplete = false;
   2cd02:	2300      	movs	r3, #0
   2cd04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        pBle->bDmaComplete = false;
   2cd08:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
        pBle->bFlowControlComplete = false;
   2cd0c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
        if ( BLEIFn(ui32Module)->FIFOPTR != 0x20002000 )
   2cd10:	4b21      	ldr	r3, [pc, #132]	; (2cd98 <am_hal_ble_int_service+0x104>)
   2cd12:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   2cd16:	f1b3 2f20 	cmp.w	r3, #536879104	; 0x20002000
   2cd1a:	d135      	bne.n	2cd88 <am_hal_ble_int_service+0xf4>
        if ((pBle->sCurrentTransfer.ui8Command == AM_HAL_BLE_WRITE) &&
   2cd1c:	7da3      	ldrb	r3, [r4, #22]
   2cd1e:	2b01      	cmp	r3, #1
   2cd20:	d018      	beq.n	2cd54 <am_hal_ble_int_service+0xc0>
        if (pBle->sCurrentTransfer.ui8Command == AM_HAL_BLE_READ)
   2cd22:	7da3      	ldrb	r3, [r4, #22]
   2cd24:	2b02      	cmp	r3, #2
   2cd26:	d021      	beq.n	2cd6c <am_hal_ble_int_service+0xd8>
        BLEIFn(ui32Module)->DMACFG = 0;
   2cd28:	4b1b      	ldr	r3, [pc, #108]	; (2cd98 <am_hal_ble_int_service+0x104>)
   2cd2a:	2200      	movs	r2, #0
   2cd2c:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
        am_hal_ble_bus_release(pBle);
   2cd30:	4620      	mov	r0, r4
   2cd32:	f7ff f88d 	bl	2be50 <am_hal_ble_bus_release>
        if ( pBle->sCurrentTransfer.pfnTransferCompleteCB )
   2cd36:	69e3      	ldr	r3, [r4, #28]
   2cd38:	b343      	cbz	r3, 2cd8c <am_hal_ble_int_service+0xf8>
            pfnCallback(pui8Data, ui32Length, pvContext);
   2cd3a:	6a22      	ldr	r2, [r4, #32]
   2cd3c:	8aa1      	ldrh	r1, [r4, #20]
   2cd3e:	68e0      	ldr	r0, [r4, #12]
   2cd40:	4798      	blx	r3
    return AM_HAL_STATUS_SUCCESS;
   2cd42:	2000      	movs	r0, #0
   2cd44:	e019      	b.n	2cd7a <am_hal_ble_int_service+0xe6>
            pBle->bFlowControlComplete = true;
   2cd46:	2301      	movs	r3, #1
   2cd48:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
   2cd4c:	e7c3      	b.n	2ccd6 <am_hal_ble_int_service+0x42>
            pBle->bFlowControlComplete = true;
   2cd4e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
   2cd52:	e7c6      	b.n	2cce2 <am_hal_ble_int_service+0x4e>
            (pBle->bPatchComplete == true))
   2cd54:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
        if ((pBle->sCurrentTransfer.ui8Command == AM_HAL_BLE_WRITE) &&
   2cd58:	2b00      	cmp	r3, #0
   2cd5a:	d0e2      	beq.n	2cd22 <am_hal_ble_int_service+0x8e>
            pBle->bLastPacketWasTX = true;
   2cd5c:	2301      	movs	r3, #1
   2cd5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
            am_hal_ble_wakeup_set(pBle, 0);
   2cd62:	2100      	movs	r1, #0
   2cd64:	4620      	mov	r0, r4
   2cd66:	f7ff f933 	bl	2bfd0 <am_hal_ble_wakeup_set>
   2cd6a:	e7da      	b.n	2cd22 <am_hal_ble_int_service+0x8e>
            pBle->bLastPacketWasTX = false;
   2cd6c:	2300      	movs	r3, #0
   2cd6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   2cd72:	e7d9      	b.n	2cd28 <am_hal_ble_int_service+0x94>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2cd74:	2002      	movs	r0, #2
} // am_hal_ble_int_service()
   2cd76:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2cd78:	2002      	movs	r0, #2
} // am_hal_ble_int_service()
   2cd7a:	bd10      	pop	{r4, pc}
    return AM_HAL_STATUS_SUCCESS;
   2cd7c:	2000      	movs	r0, #0
   2cd7e:	e7fc      	b.n	2cd7a <am_hal_ble_int_service+0xe6>
   2cd80:	2000      	movs	r0, #0
   2cd82:	e7fa      	b.n	2cd7a <am_hal_ble_int_service+0xe6>
   2cd84:	2000      	movs	r0, #0
   2cd86:	e7f8      	b.n	2cd7a <am_hal_ble_int_service+0xe6>
            return AM_HAL_BLE_FIFO_ERROR;
   2cd88:	4804      	ldr	r0, [pc, #16]	; (2cd9c <am_hal_ble_int_service+0x108>)
   2cd8a:	e7f6      	b.n	2cd7a <am_hal_ble_int_service+0xe6>
    return AM_HAL_STATUS_SUCCESS;
   2cd8c:	2000      	movs	r0, #0
   2cd8e:	e7f4      	b.n	2cd7a <am_hal_ble_int_service+0xe6>
   2cd90:	01775230 	.word	0x01775230
   2cd94:	40020000 	.word	0x40020000
   2cd98:	5000c000 	.word	0x5000c000
   2cd9c:	0800000a 	.word	0x0800000a

0002cda0 <am_hal_ble_int_enable>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2cda0:	b1c8      	cbz	r0, 2cdd6 <am_hal_ble_int_enable+0x36>
{
   2cda2:	b510      	push	{r4, lr}
   2cda4:	b082      	sub	sp, #8
   2cda6:	460c      	mov	r4, r1
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2cda8:	6803      	ldr	r3, [r0, #0]
   2cdaa:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2cdae:	4a0b      	ldr	r2, [pc, #44]	; (2cddc <am_hal_ble_int_enable+0x3c>)
   2cdb0:	4293      	cmp	r3, r2
   2cdb2:	d002      	beq.n	2cdba <am_hal_ble_int_enable+0x1a>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2cdb4:	2002      	movs	r0, #2
} // am_hal_ble_int_enable()
   2cdb6:	b002      	add	sp, #8
   2cdb8:	bd10      	pop	{r4, pc}
    AM_CRITICAL_BEGIN
   2cdba:	f000 fb59 	bl	2d470 <am_hal_interrupt_master_disable>
   2cdbe:	9001      	str	r0, [sp, #4]
    BLEIFn(ui32Module)->INTEN |= ui32InterruptMask;
   2cdc0:	4b07      	ldr	r3, [pc, #28]	; (2cde0 <am_hal_ble_int_enable+0x40>)
   2cdc2:	f8d3 1220 	ldr.w	r1, [r3, #544]	; 0x220
   2cdc6:	4321      	orrs	r1, r4
   2cdc8:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
    AM_CRITICAL_END
   2cdcc:	9801      	ldr	r0, [sp, #4]
   2cdce:	f000 fb53 	bl	2d478 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
   2cdd2:	2000      	movs	r0, #0
   2cdd4:	e7ef      	b.n	2cdb6 <am_hal_ble_int_enable+0x16>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2cdd6:	2002      	movs	r0, #2
} // am_hal_ble_int_enable()
   2cdd8:	4770      	bx	lr
   2cdda:	bf00      	nop
   2cddc:	01775230 	.word	0x01775230
   2cde0:	5000c000 	.word	0x5000c000

0002cde4 <am_hal_ble_int_status>:
    if (bEnabledOnly)
   2cde4:	b131      	cbz	r1, 2cdf4 <am_hal_ble_int_status+0x10>
        uint32_t ui32IntEn = BLEIFn(ui32Module)->INTEN;
   2cde6:	4b05      	ldr	r3, [pc, #20]	; (2cdfc <am_hal_ble_int_status+0x18>)
   2cde8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
        return ( BLEIFn(ui32Module)->INTSTAT & ui32IntEn );
   2cdec:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
   2cdf0:	4010      	ands	r0, r2
   2cdf2:	4770      	bx	lr
        return BLEIFn(ui32Module)->INTSTAT;
   2cdf4:	4b01      	ldr	r3, [pc, #4]	; (2cdfc <am_hal_ble_int_status+0x18>)
   2cdf6:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
} // am_hal_ble_int_status()
   2cdfa:	4770      	bx	lr
   2cdfc:	5000c000 	.word	0x5000c000

0002ce00 <am_hal_ble_int_clear>:
    if ( !AM_HAL_BLE_CHK_HANDLE(pHandle) )
   2ce00:	b150      	cbz	r0, 2ce18 <am_hal_ble_int_clear+0x18>
   2ce02:	6803      	ldr	r3, [r0, #0]
   2ce04:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2ce08:	4a05      	ldr	r2, [pc, #20]	; (2ce20 <am_hal_ble_int_clear+0x20>)
   2ce0a:	4293      	cmp	r3, r2
   2ce0c:	d106      	bne.n	2ce1c <am_hal_ble_int_clear+0x1c>
    BLEIFn(ui32Module)->INTCLR = ui32InterruptMask;
   2ce0e:	4b05      	ldr	r3, [pc, #20]	; (2ce24 <am_hal_ble_int_clear+0x24>)
   2ce10:	f8c3 1228 	str.w	r1, [r3, #552]	; 0x228
    return AM_HAL_STATUS_SUCCESS;
   2ce14:	2000      	movs	r0, #0
   2ce16:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2ce18:	2002      	movs	r0, #2
   2ce1a:	4770      	bx	lr
   2ce1c:	2002      	movs	r0, #2
} // am_hal_ble_int_clear()
   2ce1e:	4770      	bx	lr
   2ce20:	01775230 	.word	0x01775230
   2ce24:	5000c000 	.word	0x5000c000

0002ce28 <am_hal_ble_plf_reg_read>:
{
   2ce28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ce2c:	b08c      	sub	sp, #48	; 0x30
   2ce2e:	4605      	mov	r5, r0
   2ce30:	4616      	mov	r6, r2
    pui8Parameter[0] = ui32Address;
   2ce32:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
    pui8Parameter[1] = (ui32Address >> 8);
   2ce36:	0a0b      	lsrs	r3, r1, #8
   2ce38:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    pui8Parameter[2] = (ui32Address >> 16);
   2ce3c:	0c0b      	lsrs	r3, r1, #16
   2ce3e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    pui8Parameter[3] = (ui32Address >> 24);
   2ce42:	0e09      	lsrs	r1, r1, #24
   2ce44:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
    sResponse.words[0] = 0;
   2ce48:	2400      	movs	r4, #0
   2ce4a:	9401      	str	r4, [sp, #4]
    sResponse.words[1] = 0;
   2ce4c:	9402      	str	r4, [sp, #8]
    sResponse.words[2] = 0;
   2ce4e:	9403      	str	r4, [sp, #12]
    am_hal_ble_vs_command_build(sWriteCommand.words,
   2ce50:	ab0b      	add	r3, sp, #44	; 0x2c
   2ce52:	2208      	movs	r2, #8
   2ce54:	f64f 5102 	movw	r1, #64770	; 0xfd02
   2ce58:	a809      	add	r0, sp, #36	; 0x24
   2ce5a:	f7ff fadb 	bl	2c414 <am_hal_ble_vs_command_build>
    ui32IntEnable = BLEIFn(ui32Module)->INTEN;
   2ce5e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 2cecc <am_hal_ble_plf_reg_read+0xa4>
   2ce62:	f8d8 7220 	ldr.w	r7, [r8, #544]	; 0x220
    BLEIFn(ui32Module)->INTEN = 0;
   2ce66:	f8c8 4220 	str.w	r4, [r8, #544]	; 0x220
    am_hal_ble_blocking_hci_write(pBLE,
   2ce6a:	2308      	movs	r3, #8
   2ce6c:	aa09      	add	r2, sp, #36	; 0x24
   2ce6e:	4621      	mov	r1, r4
   2ce70:	4628      	mov	r0, r5
   2ce72:	f7ff fc6d 	bl	2c750 <am_hal_ble_blocking_hci_write>
    BLEIFn(ui32Module)->BLEDBG_b.IOCLKON = 1;
   2ce76:	f8d8 3410 	ldr.w	r3, [r8, #1040]	; 0x410
   2ce7a:	f043 0302 	orr.w	r3, r3, #2
   2ce7e:	f8c8 3410 	str.w	r3, [r8, #1040]	; 0x410
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 500,
   2ce82:	4b12      	ldr	r3, [pc, #72]	; (2cecc <am_hal_ble_plf_reg_read+0xa4>)
   2ce84:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2ce88:	f013 0f80 	tst.w	r3, #128	; 0x80
   2ce8c:	d107      	bne.n	2ce9e <am_hal_ble_plf_reg_read+0x76>
   2ce8e:	4b10      	ldr	r3, [pc, #64]	; (2ced0 <am_hal_ble_plf_reg_read+0xa8>)
   2ce90:	429c      	cmp	r4, r3
   2ce92:	d818      	bhi.n	2cec6 <am_hal_ble_plf_reg_read+0x9e>
   2ce94:	2010      	movs	r0, #16
   2ce96:	f000 faa9 	bl	2d3ec <am_hal_flash_delay>
   2ce9a:	3401      	adds	r4, #1
   2ce9c:	e7f1      	b.n	2ce82 <am_hal_ble_plf_reg_read+0x5a>
    am_hal_ble_blocking_hci_read(pBLE, sResponse.words, 0);
   2ce9e:	2200      	movs	r2, #0
   2cea0:	a901      	add	r1, sp, #4
   2cea2:	4628      	mov	r0, r5
   2cea4:	f7ff fe9e 	bl	2cbe4 <am_hal_ble_blocking_hci_read>
    *pui32Value = (((sResponse.words[1] & 0xFF000000) >> 24) |
   2cea8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2ceac:	9a03      	ldr	r2, [sp, #12]
   2ceae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2ceb2:	6033      	str	r3, [r6, #0]
    BLEIFn(ui32Module)->INTCLR = ui32IntEnable;
   2ceb4:	4b05      	ldr	r3, [pc, #20]	; (2cecc <am_hal_ble_plf_reg_read+0xa4>)
   2ceb6:	f8c3 7228 	str.w	r7, [r3, #552]	; 0x228
    BLEIFn(ui32Module)->INTEN = ui32IntEnable;
   2ceba:	f8c3 7220 	str.w	r7, [r3, #544]	; 0x220
    return AM_HAL_STATUS_SUCCESS;
   2cebe:	2000      	movs	r0, #0
} // am_hal_ble_plf_reg_read()
   2cec0:	b00c      	add	sp, #48	; 0x30
   2cec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 500,
   2cec6:	4803      	ldr	r0, [pc, #12]	; (2ced4 <am_hal_ble_plf_reg_read+0xac>)
   2cec8:	e7fa      	b.n	2cec0 <am_hal_ble_plf_reg_read+0x98>
   2ceca:	bf00      	nop
   2cecc:	5000c000 	.word	0x5000c000
   2ced0:	0007a11f 	.word	0x0007a11f
   2ced4:	08000004 	.word	0x08000004

0002ced8 <am_hal_ble_check_32k_clock>:
{
   2ced8:	b500      	push	{lr}
   2ceda:	b083      	sub	sp, #12
    uint32_t rc32k_clock = 0xFFFFFFFF;
   2cedc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cee0:	9301      	str	r3, [sp, #4]
    if (APOLLO3_B0)
   2cee2:	4b0d      	ldr	r3, [pc, #52]	; (2cf18 <am_hal_ble_check_32k_clock+0x40>)
   2cee4:	68db      	ldr	r3, [r3, #12]
   2cee6:	b2db      	uxtb	r3, r3
   2cee8:	2b21      	cmp	r3, #33	; 0x21
   2ceea:	d00d      	beq.n	2cf08 <am_hal_ble_check_32k_clock+0x30>
        am_hal_ble_plf_reg_read(pBLE, AM_HAL_BLE_IP_RAM_32K_CLOCK_ADDR_A1, &rc32k_clock);
   2ceec:	aa01      	add	r2, sp, #4
   2ceee:	490b      	ldr	r1, [pc, #44]	; (2cf1c <am_hal_ble_check_32k_clock+0x44>)
   2cef0:	f7ff ff9a 	bl	2ce28 <am_hal_ble_plf_reg_read>
    if ( (rc32k_clock > 0x8200) || (rc32k_clock < 0x7B00) )
   2cef4:	9b01      	ldr	r3, [sp, #4]
   2cef6:	f5a3 43f6 	sub.w	r3, r3, #31488	; 0x7b00
   2cefa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   2cefe:	d908      	bls.n	2cf12 <am_hal_ble_check_32k_clock+0x3a>
        return AM_HAL_STATUS_FAIL;
   2cf00:	2001      	movs	r0, #1
} // am_hal_ble_check_32k_clock()
   2cf02:	b003      	add	sp, #12
   2cf04:	f85d fb04 	ldr.w	pc, [sp], #4
        am_hal_ble_plf_reg_read(pBLE, AM_HAL_BLE_IP_RAM_32K_CLOCK_ADDR_B0, &rc32k_clock);
   2cf08:	aa01      	add	r2, sp, #4
   2cf0a:	4905      	ldr	r1, [pc, #20]	; (2cf20 <am_hal_ble_check_32k_clock+0x48>)
   2cf0c:	f7ff ff8c 	bl	2ce28 <am_hal_ble_plf_reg_read>
   2cf10:	e7f0      	b.n	2cef4 <am_hal_ble_check_32k_clock+0x1c>
        return AM_HAL_STATUS_SUCCESS;
   2cf12:	2000      	movs	r0, #0
   2cf14:	e7f5      	b.n	2cf02 <am_hal_ble_check_32k_clock+0x2a>
   2cf16:	bf00      	nop
   2cf18:	40020000 	.word	0x40020000
   2cf1c:	20006054 	.word	0x20006054
   2cf20:	20006858 	.word	0x20006858

0002cf24 <am_hal_ble_plf_reg_write>:
{
   2cf24:	b5f0      	push	{r4, r5, r6, r7, lr}
   2cf26:	b08b      	sub	sp, #44	; 0x2c
   2cf28:	4605      	mov	r5, r0
    pui8Parameter[0] = ui32Address;
   2cf2a:	f88d 1020 	strb.w	r1, [sp, #32]
    pui8Parameter[1] = (ui32Address >> 8);
   2cf2e:	0a0b      	lsrs	r3, r1, #8
   2cf30:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    pui8Parameter[2] = (ui32Address >> 16);
   2cf34:	0c0b      	lsrs	r3, r1, #16
   2cf36:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    pui8Parameter[3] = (ui32Address >> 24);
   2cf3a:	0e09      	lsrs	r1, r1, #24
   2cf3c:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
    pui8Parameter[4] = ui32Value;
   2cf40:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    pui8Parameter[5] = (ui32Value >> 8);
   2cf44:	0a13      	lsrs	r3, r2, #8
   2cf46:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    pui8Parameter[6] = (ui32Value >> 16);
   2cf4a:	0c13      	lsrs	r3, r2, #16
   2cf4c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    pui8Parameter[7] = (ui32Value >> 24);
   2cf50:	0e12      	lsrs	r2, r2, #24
   2cf52:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    am_hal_ble_vs_command_build(sWriteCommand.words,
   2cf56:	ab08      	add	r3, sp, #32
   2cf58:	220c      	movs	r2, #12
   2cf5a:	f64f 5103 	movw	r1, #64771	; 0xfd03
   2cf5e:	a805      	add	r0, sp, #20
   2cf60:	f7ff fa58 	bl	2c414 <am_hal_ble_vs_command_build>
    ui32IntEnable = BLEIFn(ui32Module)->INTEN;
   2cf64:	4e17      	ldr	r6, [pc, #92]	; (2cfc4 <am_hal_ble_plf_reg_write+0xa0>)
   2cf66:	f8d6 7220 	ldr.w	r7, [r6, #544]	; 0x220
    BLEIFn(ui32Module)->INTEN = 0;
   2cf6a:	2400      	movs	r4, #0
   2cf6c:	f8c6 4220 	str.w	r4, [r6, #544]	; 0x220
    am_hal_ble_blocking_hci_write(pBLE,
   2cf70:	230c      	movs	r3, #12
   2cf72:	aa05      	add	r2, sp, #20
   2cf74:	4621      	mov	r1, r4
   2cf76:	4628      	mov	r0, r5
   2cf78:	f7ff fbea 	bl	2c750 <am_hal_ble_blocking_hci_write>
    BLEIFn(ui32Module)->BLEDBG_b.IOCLKON = 1;
   2cf7c:	f8d6 3410 	ldr.w	r3, [r6, #1040]	; 0x410
   2cf80:	f043 0302 	orr.w	r3, r3, #2
   2cf84:	f8c6 3410 	str.w	r3, [r6, #1040]	; 0x410
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 50,
   2cf88:	4b0e      	ldr	r3, [pc, #56]	; (2cfc4 <am_hal_ble_plf_reg_write+0xa0>)
   2cf8a:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2cf8e:	f013 0f80 	tst.w	r3, #128	; 0x80
   2cf92:	d108      	bne.n	2cfa6 <am_hal_ble_plf_reg_write+0x82>
   2cf94:	f24c 334f 	movw	r3, #49999	; 0xc34f
   2cf98:	429c      	cmp	r4, r3
   2cf9a:	d811      	bhi.n	2cfc0 <am_hal_ble_plf_reg_write+0x9c>
   2cf9c:	2010      	movs	r0, #16
   2cf9e:	f000 fa25 	bl	2d3ec <am_hal_flash_delay>
   2cfa2:	3401      	adds	r4, #1
   2cfa4:	e7f0      	b.n	2cf88 <am_hal_ble_plf_reg_write+0x64>
    am_hal_ble_blocking_hci_read(pBLE, sResponse.words, 0);
   2cfa6:	2200      	movs	r2, #0
   2cfa8:	a901      	add	r1, sp, #4
   2cfaa:	4628      	mov	r0, r5
   2cfac:	f7ff fe1a 	bl	2cbe4 <am_hal_ble_blocking_hci_read>
    BLEIFn(ui32Module)->INTCLR = ui32IntEnable;
   2cfb0:	4b04      	ldr	r3, [pc, #16]	; (2cfc4 <am_hal_ble_plf_reg_write+0xa0>)
   2cfb2:	f8c3 7228 	str.w	r7, [r3, #552]	; 0x228
    BLEIFn(ui32Module)->INTEN = ui32IntEnable;
   2cfb6:	f8c3 7220 	str.w	r7, [r3, #544]	; 0x220
    return AM_HAL_STATUS_SUCCESS;
   2cfba:	2000      	movs	r0, #0
} // am_hal_ble_plf_reg_write()
   2cfbc:	b00b      	add	sp, #44	; 0x2c
   2cfbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 50,
   2cfc0:	4801      	ldr	r0, [pc, #4]	; (2cfc8 <am_hal_ble_plf_reg_write+0xa4>)
   2cfc2:	e7fb      	b.n	2cfbc <am_hal_ble_plf_reg_write+0x98>
   2cfc4:	5000c000 	.word	0x5000c000
   2cfc8:	08000004 	.word	0x08000004

0002cfcc <am_hal_ble_transmitter_modex_set>:
// parameter default value is 0x34, increase to get larger frequency offset
//
//*****************************************************************************
uint32_t
am_hal_ble_transmitter_modex_set(void *pHandle, uint8_t ui8ModFrqOffset)
{
   2cfcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2cfce:	b085      	sub	sp, #20
   2cfd0:	4604      	mov	r4, r0
    am_hal_ble_state_t *pBLE = pHandle;
    uint32_t RegValueMCGR, RegValueBACKCR, RegValueSTCR, RegValueDACSPICR, temp = 0;
   2cfd2:	2300      	movs	r3, #0
   2cfd4:	9300      	str	r3, [sp, #0]

    ui8ModFrqOffset &= 0x7F;
   2cfd6:	f001 057f 	and.w	r5, r1, #127	; 0x7f

    am_hal_ble_plf_reg_read(pBLE, 0x43000004, &RegValueMCGR);
   2cfda:	4e2a      	ldr	r6, [pc, #168]	; (2d084 <am_hal_ble_transmitter_modex_set+0xb8>)
   2cfdc:	aa03      	add	r2, sp, #12
   2cfde:	4631      	mov	r1, r6
   2cfe0:	f7ff ff22 	bl	2ce28 <am_hal_ble_plf_reg_read>

    //
    // Unlock the BLE registers.
    //
    am_hal_ble_plf_reg_write(pBLE, 0x43000004, 0xFFFFFFFF);
   2cfe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2cfe8:	4631      	mov	r1, r6
   2cfea:	4620      	mov	r0, r4
   2cfec:	f7ff ff9a 	bl	2cf24 <am_hal_ble_plf_reg_write>
    am_hal_ble_plf_reg_read(pBLE, 0x52000008, &temp);
   2cff0:	4e25      	ldr	r6, [pc, #148]	; (2d088 <am_hal_ble_transmitter_modex_set+0xbc>)
   2cff2:	466a      	mov	r2, sp
   2cff4:	4631      	mov	r1, r6
   2cff6:	4620      	mov	r0, r4
   2cff8:	f7ff ff16 	bl	2ce28 <am_hal_ble_plf_reg_read>
    temp |= 0x08;
   2cffc:	9b00      	ldr	r3, [sp, #0]
   2cffe:	f043 0308 	orr.w	r3, r3, #8
   2d002:	9300      	str	r3, [sp, #0]
    am_hal_ble_plf_reg_read(pBLE, 0x52000000, &RegValueSTCR);
   2d004:	aa01      	add	r2, sp, #4
   2d006:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   2d00a:	4620      	mov	r0, r4
   2d00c:	f7ff ff0c 	bl	2ce28 <am_hal_ble_plf_reg_read>
    RegValueSTCR |= (1 << 10);
   2d010:	9a01      	ldr	r2, [sp, #4]
   2d012:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   2d016:	9201      	str	r2, [sp, #4]
    am_hal_ble_plf_reg_write(pBLE, 0x52000000, RegValueSTCR);
   2d018:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   2d01c:	4620      	mov	r0, r4
   2d01e:	f7ff ff81 	bl	2cf24 <am_hal_ble_plf_reg_write>

    am_hal_ble_plf_reg_read(pBLE, 0x45800070, &RegValueBACKCR);
   2d022:	4f1a      	ldr	r7, [pc, #104]	; (2d08c <am_hal_ble_transmitter_modex_set+0xc0>)
   2d024:	aa02      	add	r2, sp, #8
   2d026:	4639      	mov	r1, r7
   2d028:	4620      	mov	r0, r4
   2d02a:	f7ff fefd 	bl	2ce28 <am_hal_ble_plf_reg_read>
    am_hal_ble_plf_reg_write(pBLE, 0x45800070, (RegValueBACKCR | 0x8));
   2d02e:	9a02      	ldr	r2, [sp, #8]
   2d030:	f042 0208 	orr.w	r2, r2, #8
   2d034:	4639      	mov	r1, r7
   2d036:	4620      	mov	r0, r4
   2d038:	f7ff ff74 	bl	2cf24 <am_hal_ble_plf_reg_write>
    RegValueDACSPICR = (ui8ModFrqOffset << 1) | 0x1;
   2d03c:	006a      	lsls	r2, r5, #1
    am_hal_ble_plf_reg_write(pBLE, 0x52000014, RegValueDACSPICR);
   2d03e:	f042 0201 	orr.w	r2, r2, #1
   2d042:	4913      	ldr	r1, [pc, #76]	; (2d090 <am_hal_ble_transmitter_modex_set+0xc4>)
   2d044:	4620      	mov	r0, r4
   2d046:	f7ff ff6d 	bl	2cf24 <am_hal_ble_plf_reg_write>

    am_hal_ble_plf_reg_write(pBLE, 0x52000008, temp);
   2d04a:	9a00      	ldr	r2, [sp, #0]
   2d04c:	4631      	mov	r1, r6
   2d04e:	4620      	mov	r0, r4
   2d050:	f7ff ff68 	bl	2cf24 <am_hal_ble_plf_reg_write>

    if (APOLLO3_B0)
   2d054:	4b0f      	ldr	r3, [pc, #60]	; (2d094 <am_hal_ble_transmitter_modex_set+0xc8>)
   2d056:	68db      	ldr	r3, [r3, #12]
   2d058:	b2db      	uxtb	r3, r3
   2d05a:	2b21      	cmp	r3, #33	; 0x21
   2d05c:	d00c      	beq.n	2d078 <am_hal_ble_transmitter_modex_set+0xac>
    {
        am_hal_ble_plf_reg_write(pBLE, AM_HAL_BLE_IP_RAM_MODEX_TRIM_ADDR_B0, ui8ModFrqOffset);
    }
    else
    {
        am_hal_ble_plf_reg_write(pBLE, AM_HAL_BLE_IP_RAM_MODEX_TRIM_ADDR_A1, ui8ModFrqOffset);
   2d05e:	462a      	mov	r2, r5
   2d060:	490d      	ldr	r1, [pc, #52]	; (2d098 <am_hal_ble_transmitter_modex_set+0xcc>)
   2d062:	4620      	mov	r0, r4
   2d064:	f7ff ff5e 	bl	2cf24 <am_hal_ble_plf_reg_write>
    }
    am_hal_ble_plf_reg_write(pBLE, 0x43000004, RegValueMCGR);
   2d068:	9a03      	ldr	r2, [sp, #12]
   2d06a:	4906      	ldr	r1, [pc, #24]	; (2d084 <am_hal_ble_transmitter_modex_set+0xb8>)
   2d06c:	4620      	mov	r0, r4
   2d06e:	f7ff ff59 	bl	2cf24 <am_hal_ble_plf_reg_write>

    return AM_HAL_STATUS_SUCCESS;
} // am_hal_ble_transmitter_modex_set()
   2d072:	2000      	movs	r0, #0
   2d074:	b005      	add	sp, #20
   2d076:	bdf0      	pop	{r4, r5, r6, r7, pc}
        am_hal_ble_plf_reg_write(pBLE, AM_HAL_BLE_IP_RAM_MODEX_TRIM_ADDR_B0, ui8ModFrqOffset);
   2d078:	462a      	mov	r2, r5
   2d07a:	4908      	ldr	r1, [pc, #32]	; (2d09c <am_hal_ble_transmitter_modex_set+0xd0>)
   2d07c:	4620      	mov	r0, r4
   2d07e:	f7ff ff51 	bl	2cf24 <am_hal_ble_plf_reg_write>
   2d082:	e7f1      	b.n	2d068 <am_hal_ble_transmitter_modex_set+0x9c>
   2d084:	43000004 	.word	0x43000004
   2d088:	52000008 	.word	0x52000008
   2d08c:	45800070 	.word	0x45800070
   2d090:	52000014 	.word	0x52000014
   2d094:	40020000 	.word	0x40020000
   2d098:	20006070 	.word	0x20006070
   2d09c:	20006874 	.word	0x20006874

0002d0a0 <am_hal_ble_load_modex_trim_set>:
{
   2d0a0:	b510      	push	{r4, lr}
   2d0a2:	4604      	mov	r4, r0
    ui8TrimValue = am_hal_ble_read_trimdata_from_info1();
   2d0a4:	f7fe ff62 	bl	2bf6c <am_hal_ble_read_trimdata_from_info1>
    if ( ui8TrimValue )
   2d0a8:	b908      	cbnz	r0, 2d0ae <am_hal_ble_load_modex_trim_set+0xe>
        return AM_HAL_STATUS_FAIL;
   2d0aa:	2001      	movs	r0, #1
} // am_hal_ble_load_modex_trim_set()
   2d0ac:	bd10      	pop	{r4, pc}
   2d0ae:	4601      	mov	r1, r0
        am_hal_ble_transmitter_modex_set(pHandle, ui8TrimValue);
   2d0b0:	4620      	mov	r0, r4
   2d0b2:	f7ff ff8b 	bl	2cfcc <am_hal_ble_transmitter_modex_set>
        return AM_HAL_STATUS_SUCCESS;
   2d0b6:	2000      	movs	r0, #0
   2d0b8:	e7f8      	b.n	2d0ac <am_hal_ble_load_modex_trim_set+0xc>
	...

0002d0bc <am_hal_ble_patch_complete>:
{
   2d0bc:	b570      	push	{r4, r5, r6, lr}
   2d0be:	b08c      	sub	sp, #48	; 0x30
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2d0c0:	2800      	cmp	r0, #0
   2d0c2:	f000 80c6 	beq.w	2d252 <am_hal_ble_patch_complete+0x196>
   2d0c6:	4605      	mov	r5, r0
   2d0c8:	6803      	ldr	r3, [r0, #0]
   2d0ca:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2d0ce:	4a64      	ldr	r2, [pc, #400]	; (2d260 <am_hal_ble_patch_complete+0x1a4>)
   2d0d0:	4293      	cmp	r3, r2
   2d0d2:	d003      	beq.n	2d0dc <am_hal_ble_patch_complete+0x20>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2d0d4:	2402      	movs	r4, #2
} // am_hal_ble_patch_complete()
   2d0d6:	4620      	mov	r0, r4
   2d0d8:	b00c      	add	sp, #48	; 0x30
   2d0da:	bd70      	pop	{r4, r5, r6, pc}
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
   2d0dc:	2400      	movs	r4, #0
   2d0de:	9407      	str	r4, [sp, #28]
   2d0e0:	9408      	str	r4, [sp, #32]
   2d0e2:	9409      	str	r4, [sp, #36]	; 0x24
   2d0e4:	940a      	str	r4, [sp, #40]	; 0x28
   2d0e6:	940b      	str	r4, [sp, #44]	; 0x2c
    sTransfer.ui8Command = AM_HAL_BLE_WRITE;
   2d0e8:	2301      	movs	r3, #1
   2d0ea:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    sTransfer.pui32Data = sTxBuffer.words;
   2d0ee:	aa03      	add	r2, sp, #12
   2d0f0:	9206      	str	r2, [sp, #24]
    sTransfer.ui16Length = 6;
   2d0f2:	2206      	movs	r2, #6
   2d0f4:	f8ad 2020 	strh.w	r2, [sp, #32]
    sTxBuffer.bytes[0] = 0x01;
   2d0f8:	f88d 300c 	strb.w	r3, [sp, #12]
    sTxBuffer.bytes[1] = 0xEE;
   2d0fc:	23ee      	movs	r3, #238	; 0xee
   2d0fe:	f88d 300d 	strb.w	r3, [sp, #13]
    sTxBuffer.bytes[2] = 0xF1;
   2d102:	23f1      	movs	r3, #241	; 0xf1
   2d104:	f88d 300e 	strb.w	r3, [sp, #14]
    sTxBuffer.bytes[3] = 0x02;
   2d108:	2302      	movs	r3, #2
   2d10a:	f88d 300f 	strb.w	r3, [sp, #15]
    sTxBuffer.bytes[4] = 0x00;
   2d10e:	f88d 4010 	strb.w	r4, [sp, #16]
    sTxBuffer.bytes[5] = 0x00;
   2d112:	f88d 4011 	strb.w	r4, [sp, #17]
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_CMP_TRIALS; ui32Trial++)
   2d116:	f241 3387 	movw	r3, #4999	; 0x1387
   2d11a:	429c      	cmp	r4, r3
   2d11c:	d806      	bhi.n	2d12c <am_hal_ble_patch_complete+0x70>
        ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   2d11e:	a906      	add	r1, sp, #24
   2d120:	4628      	mov	r0, r5
   2d122:	f7ff f98b 	bl	2c43c <am_hal_ble_blocking_transfer>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
   2d126:	b108      	cbz	r0, 2d12c <am_hal_ble_patch_complete+0x70>
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_CMP_TRIALS; ui32Trial++)
   2d128:	3401      	adds	r4, #1
   2d12a:	e7f4      	b.n	2d116 <am_hal_ble_patch_complete+0x5a>
   2d12c:	2400      	movs	r4, #0
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 100,
   2d12e:	4b4d      	ldr	r3, [pc, #308]	; (2d264 <am_hal_ble_patch_complete+0x1a8>)
   2d130:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2d134:	f013 0f80 	tst.w	r3, #128	; 0x80
   2d138:	d108      	bne.n	2d14c <am_hal_ble_patch_complete+0x90>
   2d13a:	4b4b      	ldr	r3, [pc, #300]	; (2d268 <am_hal_ble_patch_complete+0x1ac>)
   2d13c:	429c      	cmp	r4, r3
   2d13e:	f200 808a 	bhi.w	2d256 <am_hal_ble_patch_complete+0x19a>
   2d142:	2010      	movs	r0, #16
   2d144:	f000 f952 	bl	2d3ec <am_hal_flash_delay>
   2d148:	3401      	adds	r4, #1
   2d14a:	e7f0      	b.n	2d12e <am_hal_ble_patch_complete+0x72>
    sTransfer.ui8Command = AM_HAL_BLE_READ;
   2d14c:	2302      	movs	r3, #2
   2d14e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    sTransfer.pui32Data = sRxBuffer.words;
   2d152:	f8cd d018 	str.w	sp, [sp, #24]
    sTransfer.ui16Length = 2;
   2d156:	f8ad 3020 	strh.w	r3, [sp, #32]
    ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   2d15a:	a906      	add	r1, sp, #24
   2d15c:	4628      	mov	r0, r5
   2d15e:	f7ff f96d 	bl	2c43c <am_hal_ble_blocking_transfer>
    if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   2d162:	4604      	mov	r4, r0
   2d164:	2800      	cmp	r0, #0
   2d166:	d1b6      	bne.n	2d0d6 <am_hal_ble_patch_complete+0x1a>
    if ( sRxBuffer.bytes[1] == 0xEE )
   2d168:	f89d 2001 	ldrb.w	r2, [sp, #1]
   2d16c:	2aee      	cmp	r2, #238	; 0xee
   2d16e:	d010      	beq.n	2d192 <am_hal_ble_patch_complete+0xd6>
        sTransfer.ui16Length = (sRxBuffer.bytes[0] + (sRxBuffer.bytes[1] << 8));
   2d170:	f89d 3000 	ldrb.w	r3, [sp]
   2d174:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   2d178:	f8ad 3020 	strh.w	r3, [sp, #32]
        ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   2d17c:	a906      	add	r1, sp, #24
   2d17e:	4628      	mov	r0, r5
   2d180:	f7ff f95c 	bl	2c43c <am_hal_ble_blocking_transfer>
        if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   2d184:	4604      	mov	r4, r0
   2d186:	2800      	cmp	r0, #0
   2d188:	d1a5      	bne.n	2d0d6 <am_hal_ble_patch_complete+0x1a>
        pBLE->bPatchComplete = true;
   2d18a:	2301      	movs	r3, #1
   2d18c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return AM_HAL_STATUS_SUCCESS;
   2d190:	e7a1      	b.n	2d0d6 <am_hal_ble_patch_complete+0x1a>
        sTransfer.ui16Length = 3;
   2d192:	2303      	movs	r3, #3
   2d194:	f8ad 3020 	strh.w	r3, [sp, #32]
        ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   2d198:	a906      	add	r1, sp, #24
   2d19a:	4628      	mov	r0, r5
   2d19c:	f7ff f94e 	bl	2c43c <am_hal_ble_blocking_transfer>
        if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   2d1a0:	4604      	mov	r4, r0
   2d1a2:	2800      	cmp	r0, #0
   2d1a4:	d197      	bne.n	2d0d6 <am_hal_ble_patch_complete+0x1a>
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
   2d1a6:	2300      	movs	r3, #0
   2d1a8:	9307      	str	r3, [sp, #28]
   2d1aa:	9308      	str	r3, [sp, #32]
   2d1ac:	9309      	str	r3, [sp, #36]	; 0x24
   2d1ae:	930a      	str	r3, [sp, #40]	; 0x28
   2d1b0:	930b      	str	r3, [sp, #44]	; 0x2c
    sTransfer.ui8Command = AM_HAL_BLE_WRITE;
   2d1b2:	2301      	movs	r3, #1
   2d1b4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    sTransfer.pui32Data = sTxBuffer.words;
   2d1b8:	aa03      	add	r2, sp, #12
   2d1ba:	9206      	str	r2, [sp, #24]
    sTransfer.ui16Length = 5;
   2d1bc:	2205      	movs	r2, #5
   2d1be:	f8ad 2020 	strh.w	r2, [sp, #32]
    sTxBuffer.bytes[0] = 0x01;
   2d1c2:	f88d 300c 	strb.w	r3, [sp, #12]
    sTxBuffer.bytes[1] = 0x04;
   2d1c6:	2204      	movs	r2, #4
   2d1c8:	f88d 200d 	strb.w	r2, [sp, #13]
    sTxBuffer.bytes[2] = 0xFD;
   2d1cc:	22fd      	movs	r2, #253	; 0xfd
   2d1ce:	f88d 200e 	strb.w	r2, [sp, #14]
    sTxBuffer.bytes[3] = 0x01;
   2d1d2:	f88d 300f 	strb.w	r3, [sp, #15]
    sTxBuffer.bytes[4] = 0x01;
   2d1d6:	f88d 3010 	strb.w	r3, [sp, #16]
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_CMP_TRIALS; ui32Trial++)
   2d1da:	4606      	mov	r6, r0
   2d1dc:	f241 3387 	movw	r3, #4999	; 0x1387
   2d1e0:	429e      	cmp	r6, r3
   2d1e2:	d807      	bhi.n	2d1f4 <am_hal_ble_patch_complete+0x138>
        ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   2d1e4:	a906      	add	r1, sp, #24
   2d1e6:	4628      	mov	r0, r5
   2d1e8:	f7ff f928 	bl	2c43c <am_hal_ble_blocking_transfer>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
   2d1ec:	4604      	mov	r4, r0
   2d1ee:	b108      	cbz	r0, 2d1f4 <am_hal_ble_patch_complete+0x138>
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_CMP_TRIALS; ui32Trial++)
   2d1f0:	3601      	adds	r6, #1
   2d1f2:	e7f3      	b.n	2d1dc <am_hal_ble_patch_complete+0x120>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
   2d1f4:	2c00      	cmp	r4, #0
   2d1f6:	f47f af6e 	bne.w	2d0d6 <am_hal_ble_patch_complete+0x1a>
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 100,
   2d1fa:	4b1a      	ldr	r3, [pc, #104]	; (2d264 <am_hal_ble_patch_complete+0x1a8>)
   2d1fc:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2d200:	f013 0f80 	tst.w	r3, #128	; 0x80
   2d204:	d107      	bne.n	2d216 <am_hal_ble_patch_complete+0x15a>
   2d206:	4b18      	ldr	r3, [pc, #96]	; (2d268 <am_hal_ble_patch_complete+0x1ac>)
   2d208:	429c      	cmp	r4, r3
   2d20a:	d826      	bhi.n	2d25a <am_hal_ble_patch_complete+0x19e>
   2d20c:	2010      	movs	r0, #16
   2d20e:	f000 f8ed 	bl	2d3ec <am_hal_flash_delay>
   2d212:	3401      	adds	r4, #1
   2d214:	e7f1      	b.n	2d1fa <am_hal_ble_patch_complete+0x13e>
    sTransfer.ui8Command = AM_HAL_BLE_READ;
   2d216:	2302      	movs	r3, #2
   2d218:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    sTransfer.pui32Data = sRxBuffer.words;
   2d21c:	f8cd d018 	str.w	sp, [sp, #24]
    sTransfer.ui16Length = 9;
   2d220:	2309      	movs	r3, #9
   2d222:	f8ad 3020 	strh.w	r3, [sp, #32]
    ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   2d226:	a906      	add	r1, sp, #24
   2d228:	4628      	mov	r0, r5
   2d22a:	f7ff f907 	bl	2c43c <am_hal_ble_blocking_transfer>
    if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   2d22e:	4604      	mov	r4, r0
   2d230:	2800      	cmp	r0, #0
   2d232:	f47f af50 	bne.w	2d0d6 <am_hal_ble_patch_complete+0x1a>
    am_hal_ble_wakeup_set(pBLE, 0);
   2d236:	2100      	movs	r1, #0
   2d238:	4628      	mov	r0, r5
   2d23a:	f7fe fec9 	bl	2bfd0 <am_hal_ble_wakeup_set>
    pBLE->bPatchComplete = true;
   2d23e:	2301      	movs	r3, #1
   2d240:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    delay_ms(500);
   2d244:	4809      	ldr	r0, [pc, #36]	; (2d26c <am_hal_ble_patch_complete+0x1b0>)
   2d246:	f000 f8d1 	bl	2d3ec <am_hal_flash_delay>
    am_hal_ble_load_modex_trim_set(pBLE);
   2d24a:	4628      	mov	r0, r5
   2d24c:	f7ff ff28 	bl	2d0a0 <am_hal_ble_load_modex_trim_set>
    return AM_HAL_STATUS_SUCCESS;
   2d250:	e741      	b.n	2d0d6 <am_hal_ble_patch_complete+0x1a>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2d252:	2402      	movs	r4, #2
   2d254:	e73f      	b.n	2d0d6 <am_hal_ble_patch_complete+0x1a>
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 100,
   2d256:	4c06      	ldr	r4, [pc, #24]	; (2d270 <am_hal_ble_patch_complete+0x1b4>)
   2d258:	e73d      	b.n	2d0d6 <am_hal_ble_patch_complete+0x1a>
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 100,
   2d25a:	4c05      	ldr	r4, [pc, #20]	; (2d270 <am_hal_ble_patch_complete+0x1b4>)
   2d25c:	e73b      	b.n	2d0d6 <am_hal_ble_patch_complete+0x1a>
   2d25e:	bf00      	nop
   2d260:	01775230 	.word	0x01775230
   2d264:	5000c000 	.word	0x5000c000
   2d268:	0001869f 	.word	0x0001869f
   2d26c:	007a1200 	.word	0x007a1200
   2d270:	08000004 	.word	0x08000004

0002d274 <am_hal_ble_boot>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2d274:	b370      	cbz	r0, 2d2d4 <am_hal_ble_boot+0x60>
{
   2d276:	b510      	push	{r4, lr}
   2d278:	4604      	mov	r4, r0
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2d27a:	6803      	ldr	r3, [r0, #0]
   2d27c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2d280:	4a16      	ldr	r2, [pc, #88]	; (2d2dc <am_hal_ble_boot+0x68>)
   2d282:	4293      	cmp	r3, r2
   2d284:	d128      	bne.n	2d2d8 <am_hal_ble_boot+0x64>
    if (pBLE->bUseDefaultPatches)
   2d286:	7a03      	ldrb	r3, [r0, #8]
   2d288:	b1ab      	cbz	r3, 2d2b6 <am_hal_ble_boot+0x42>
        if (APOLLO3_A0 || APOLLO3_A1)
   2d28a:	4b15      	ldr	r3, [pc, #84]	; (2d2e0 <am_hal_ble_boot+0x6c>)
   2d28c:	68db      	ldr	r3, [r3, #12]
   2d28e:	b2db      	uxtb	r3, r3
   2d290:	2b11      	cmp	r3, #17
   2d292:	d017      	beq.n	2d2c4 <am_hal_ble_boot+0x50>
   2d294:	4b12      	ldr	r3, [pc, #72]	; (2d2e0 <am_hal_ble_boot+0x6c>)
   2d296:	68db      	ldr	r3, [r3, #12]
   2d298:	b2db      	uxtb	r3, r3
   2d29a:	2b12      	cmp	r3, #18
   2d29c:	d012      	beq.n	2d2c4 <am_hal_ble_boot+0x50>
        ui32Status = am_hal_ble_default_trim_set_ramcode(pHandle);
   2d29e:	4620      	mov	r0, r4
   2d2a0:	f7ff f876 	bl	2c390 <am_hal_ble_default_trim_set_ramcode>
        if (ui32Status != AM_HAL_STATUS_SUCCESS)
   2d2a4:	b9c8      	cbnz	r0, 2d2da <am_hal_ble_boot+0x66>
        ui32Status = am_hal_ble_default_patch_apply(pHandle);
   2d2a6:	4620      	mov	r0, r4
   2d2a8:	f7ff fbd6 	bl	2ca58 <am_hal_ble_default_patch_apply>
        if (ui32Status != AM_HAL_STATUS_SUCCESS)
   2d2ac:	b9a8      	cbnz	r0, 2d2da <am_hal_ble_boot+0x66>
        ui32Status = am_hal_ble_patch_complete(pHandle);
   2d2ae:	4620      	mov	r0, r4
   2d2b0:	f7ff ff04 	bl	2d0bc <am_hal_ble_patch_complete>
        if (ui32Status != AM_HAL_STATUS_SUCCESS)
   2d2b4:	b988      	cbnz	r0, 2d2da <am_hal_ble_boot+0x66>
    if (am_hal_ble_check_32k_clock(pBLE) == AM_HAL_STATUS_FAIL)
   2d2b6:	4620      	mov	r0, r4
   2d2b8:	f7ff fe0e 	bl	2ced8 <am_hal_ble_check_32k_clock>
   2d2bc:	2801      	cmp	r0, #1
   2d2be:	d007      	beq.n	2d2d0 <am_hal_ble_boot+0x5c>
        return AM_HAL_STATUS_SUCCESS;
   2d2c0:	2000      	movs	r0, #0
   2d2c2:	e00a      	b.n	2d2da <am_hal_ble_boot+0x66>
            ui32Status = am_hal_ble_default_copy_patch_apply(pHandle);
   2d2c4:	4620      	mov	r0, r4
   2d2c6:	f7ff fc77 	bl	2cbb8 <am_hal_ble_default_copy_patch_apply>
            if (ui32Status != AM_HAL_STATUS_SUCCESS)
   2d2ca:	2800      	cmp	r0, #0
   2d2cc:	d0e7      	beq.n	2d29e <am_hal_ble_boot+0x2a>
   2d2ce:	e004      	b.n	2d2da <am_hal_ble_boot+0x66>
        return AM_HAL_BLE_32K_CLOCK_UNSTABLE;
   2d2d0:	4804      	ldr	r0, [pc, #16]	; (2d2e4 <am_hal_ble_boot+0x70>)
   2d2d2:	e002      	b.n	2d2da <am_hal_ble_boot+0x66>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2d2d4:	2002      	movs	r0, #2
} // am_hal_ble_boot()
   2d2d6:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2d2d8:	2002      	movs	r0, #2
} // am_hal_ble_boot()
   2d2da:	bd10      	pop	{r4, pc}
   2d2dc:	01775230 	.word	0x01775230
   2d2e0:	40020000 	.word	0x40020000
   2d2e4:	0800000b 	.word	0x0800000b

0002d2e8 <am_hal_ble_tx_power_set>:
// ui32TxPower: 0x04->-10dBm 0x05->-5dBm 0x08->0dBm 0x0F->3dBm
//
//*****************************************************************************
uint32_t
am_hal_ble_tx_power_set(void *pHandle, uint8_t ui32TxPower)
{
   2d2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d2ea:	b083      	sub	sp, #12
   2d2ec:	4604      	mov	r4, r0
   2d2ee:	460d      	mov	r5, r1
    am_hal_ble_state_t *pBLE = pHandle;
    uint32_t RegValueMCGR, tempreg = 0;
   2d2f0:	2300      	movs	r3, #0
   2d2f2:	9300      	str	r3, [sp, #0]
    uint32_t ui32PowerValue = 0x00000008;
    ui32PowerValue |= (ui32TxPower & 0xF) << 16;
   2d2f4:	040e      	lsls	r6, r1, #16
   2d2f6:	f406 2670 	and.w	r6, r6, #983040	; 0xf0000
   2d2fa:	f046 0608 	orr.w	r6, r6, #8

    am_hal_ble_plf_reg_read(pBLE, 0x43000004, &RegValueMCGR);
   2d2fe:	4f1d      	ldr	r7, [pc, #116]	; (2d374 <am_hal_ble_tx_power_set+0x8c>)
   2d300:	aa01      	add	r2, sp, #4
   2d302:	4639      	mov	r1, r7
   2d304:	f7ff fd90 	bl	2ce28 <am_hal_ble_plf_reg_read>

    //
    // Unlock the BLE controller registers.
    //
    am_hal_ble_plf_reg_write(pBLE, 0x43000004, 0xFFFFFFFF);
   2d308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d30c:	4639      	mov	r1, r7
   2d30e:	4620      	mov	r0, r4
   2d310:	f7ff fe08 	bl	2cf24 <am_hal_ble_plf_reg_write>

    // set tx power register at 0x52400018
    am_hal_ble_plf_reg_write(pBLE, 0x52400018, ui32PowerValue);
   2d314:	4632      	mov	r2, r6
   2d316:	4918      	ldr	r1, [pc, #96]	; (2d378 <am_hal_ble_tx_power_set+0x90>)
   2d318:	4620      	mov	r0, r4
   2d31a:	f7ff fe03 	bl	2cf24 <am_hal_ble_plf_reg_write>

    // Lock BLE controller registers
    am_hal_ble_plf_reg_write(pBLE, 0x43000004, RegValueMCGR);
   2d31e:	9a01      	ldr	r2, [sp, #4]
   2d320:	4639      	mov	r1, r7
   2d322:	4620      	mov	r0, r4
   2d324:	f7ff fdfe 	bl	2cf24 <am_hal_ble_plf_reg_write>
    // Note:
    //    Register values may be lost when BLE controller enters deepsleep.
    //    BLE controller loads RAM settings back upon wakeup.
    //    To retain the setting, BLE controller RAM settings should be updated.
    //
    if (APOLLO3_B0)
   2d328:	4b14      	ldr	r3, [pc, #80]	; (2d37c <am_hal_ble_tx_power_set+0x94>)
   2d32a:	68db      	ldr	r3, [r3, #12]
   2d32c:	b2db      	uxtb	r3, r3
   2d32e:	2b21      	cmp	r3, #33	; 0x21
   2d330:	d015      	beq.n	2d35e <am_hal_ble_tx_power_set+0x76>
    {
        am_hal_ble_plf_reg_read(pBLE, AM_HAL_BLE_IP_RAM_POWER_LEVEL_ADDR_B0, &tempreg);
    }
    else
    {
        am_hal_ble_plf_reg_read(pBLE, AM_HAL_BLE_IP_RAM_POWER_LEVEL_ADDR_A1, &tempreg);
   2d332:	466a      	mov	r2, sp
   2d334:	4912      	ldr	r1, [pc, #72]	; (2d380 <am_hal_ble_tx_power_set+0x98>)
   2d336:	4620      	mov	r0, r4
   2d338:	f7ff fd76 	bl	2ce28 <am_hal_ble_plf_reg_read>
    }

    tempreg &= 0xffffff00;
   2d33c:	9a00      	ldr	r2, [sp, #0]
   2d33e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    tempreg |= ui32TxPower;
   2d342:	432a      	orrs	r2, r5
   2d344:	9200      	str	r2, [sp, #0]

    if (APOLLO3_B0)
   2d346:	4b0d      	ldr	r3, [pc, #52]	; (2d37c <am_hal_ble_tx_power_set+0x94>)
   2d348:	68db      	ldr	r3, [r3, #12]
   2d34a:	b2db      	uxtb	r3, r3
   2d34c:	2b21      	cmp	r3, #33	; 0x21
   2d34e:	d00c      	beq.n	2d36a <am_hal_ble_tx_power_set+0x82>
    {
        am_hal_ble_plf_reg_write(pBLE, AM_HAL_BLE_IP_RAM_POWER_LEVEL_ADDR_B0, tempreg);
    }
    else
    {
        am_hal_ble_plf_reg_write(pBLE, AM_HAL_BLE_IP_RAM_POWER_LEVEL_ADDR_A1, tempreg);
   2d350:	490b      	ldr	r1, [pc, #44]	; (2d380 <am_hal_ble_tx_power_set+0x98>)
   2d352:	4620      	mov	r0, r4
   2d354:	f7ff fde6 	bl	2cf24 <am_hal_ble_plf_reg_write>
    }

    return AM_HAL_STATUS_SUCCESS;
} // am_hal_ble_tx_power_set()
   2d358:	2000      	movs	r0, #0
   2d35a:	b003      	add	sp, #12
   2d35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        am_hal_ble_plf_reg_read(pBLE, AM_HAL_BLE_IP_RAM_POWER_LEVEL_ADDR_B0, &tempreg);
   2d35e:	466a      	mov	r2, sp
   2d360:	4908      	ldr	r1, [pc, #32]	; (2d384 <am_hal_ble_tx_power_set+0x9c>)
   2d362:	4620      	mov	r0, r4
   2d364:	f7ff fd60 	bl	2ce28 <am_hal_ble_plf_reg_read>
   2d368:	e7e8      	b.n	2d33c <am_hal_ble_tx_power_set+0x54>
        am_hal_ble_plf_reg_write(pBLE, AM_HAL_BLE_IP_RAM_POWER_LEVEL_ADDR_B0, tempreg);
   2d36a:	4906      	ldr	r1, [pc, #24]	; (2d384 <am_hal_ble_tx_power_set+0x9c>)
   2d36c:	4620      	mov	r0, r4
   2d36e:	f7ff fdd9 	bl	2cf24 <am_hal_ble_plf_reg_write>
   2d372:	e7f1      	b.n	2d358 <am_hal_ble_tx_power_set+0x70>
   2d374:	43000004 	.word	0x43000004
   2d378:	52400018 	.word	0x52400018
   2d37c:	40020000 	.word	0x40020000
   2d380:	20006038 	.word	0x20006038
   2d384:	20006838 	.word	0x20006838

0002d388 <am_hal_flash_page_erase>:
//
//*****************************************************************************
int
am_hal_flash_page_erase(uint32_t ui32ProgramKey, uint32_t ui32FlashInst,
                        uint32_t ui32PageNum)
{
   2d388:	b508      	push	{r3, lr}
    return g_am_hal_flash.flash_page_erase(ui32ProgramKey,
   2d38a:	4b01      	ldr	r3, [pc, #4]	; (2d390 <am_hal_flash_page_erase+0x8>)
   2d38c:	4798      	blx	r3
                                           ui32FlashInst,
                                           ui32PageNum);
} // am_hal_flash_page_erase()
   2d38e:	bd08      	pop	{r3, pc}
   2d390:	08000051 	.word	0x08000051

0002d394 <am_hal_flash_program_main>:
//
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32ProgramKey, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
   2d394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d398:	b082      	sub	sp, #8
   2d39a:	4605      	mov	r5, r0
   2d39c:	4616      	mov	r6, r2
   2d39e:	461c      	mov	r4, r3
    uint32_t ui32MaxSrcAddr = (uint32_t)pui32Src + (ui32NumWords << 2);
   2d3a0:	eb01 0783 	add.w	r7, r1, r3, lsl #2

    //
    // Workaround, the last word of SRAM cannot be the source
    // of programming by BootRom, check to see if it is the last
    //
    if ( ui32MaxSrcAddr == ui32SramMaxAddr )
   2d3a4:	4b0f      	ldr	r3, [pc, #60]	; (2d3e4 <am_hal_flash_program_main+0x50>)
   2d3a6:	429f      	cmp	r7, r3
   2d3a8:	d005      	beq.n	2d3b6 <am_hal_flash_program_main+0x22>
                        &ui32Temp,
                        pui32Dst + ui32NumWords - 1,
                        1);
    }

    return g_am_hal_flash.flash_program_main(ui32ProgramKey, pui32Src,
   2d3aa:	4623      	mov	r3, r4
   2d3ac:	4c0e      	ldr	r4, [pc, #56]	; (2d3e8 <am_hal_flash_program_main+0x54>)
   2d3ae:	47a0      	blx	r4
                                             pui32Dst, ui32NumWords);
} // am_hal_flash_program_main()
   2d3b0:	b002      	add	sp, #8
   2d3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ( ui32NumWords > 1 )
   2d3b6:	2c01      	cmp	r4, #1
   2d3b8:	d905      	bls.n	2d3c6 <am_hal_flash_program_main+0x32>
            iRetVal = g_am_hal_flash.flash_program_main(
   2d3ba:	1e63      	subs	r3, r4, #1
   2d3bc:	f8df 8028 	ldr.w	r8, [pc, #40]	; 2d3e8 <am_hal_flash_program_main+0x54>
   2d3c0:	47c0      	blx	r8
            if ( iRetVal != 0 )
   2d3c2:	2800      	cmp	r0, #0
   2d3c4:	d1f4      	bne.n	2d3b0 <am_hal_flash_program_main+0x1c>
        ui32Temp = *(uint32_t *)(ui32MaxSrcAddr - 4);
   2d3c6:	f857 3c04 	ldr.w	r3, [r7, #-4]
   2d3ca:	9301      	str	r3, [sp, #4]
                        pui32Dst + ui32NumWords - 1,
   2d3cc:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   2d3d0:	3a01      	subs	r2, #1
        return g_am_hal_flash.flash_program_main(
   2d3d2:	2301      	movs	r3, #1
   2d3d4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   2d3d8:	a901      	add	r1, sp, #4
   2d3da:	4628      	mov	r0, r5
   2d3dc:	4c02      	ldr	r4, [pc, #8]	; (2d3e8 <am_hal_flash_program_main+0x54>)
   2d3de:	47a0      	blx	r4
   2d3e0:	e7e6      	b.n	2d3b0 <am_hal_flash_program_main+0x1c>
   2d3e2:	bf00      	nop
   2d3e4:	10060000 	.word	0x10060000
   2d3e8:	08000055 	.word	0x08000055

0002d3ec <am_hal_flash_delay>:
//! @return None.
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
   2d3ec:	b508      	push	{r3, lr}
    // as computing the cycle count adjustment itself.
    // Let's account for these delays as much as possible.
    //
    register uint32_t ui32CycleCntAdj;

    if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
   2d3ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2d3f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2d3f4:	f013 0f04 	tst.w	r3, #4
   2d3f8:	d007      	beq.n	2d40a <am_hal_flash_delay+0x1e>
    {
        ui32Iterations <<= 1;
   2d3fa:	0040      	lsls	r0, r0, #1

        //
        // There's an additional shift to account for.
        //
        ui32CycleCntAdj = ((13 * 2) + 16) / 3;
   2d3fc:	230e      	movs	r3, #14

    //
    // Allow for the overhead of the burst-mode check and these comparisons
    // by eliminating an appropriate number of iterations.
    //
    if ( ui32Iterations > ui32CycleCntAdj )
   2d3fe:	4298      	cmp	r0, r3
   2d400:	d902      	bls.n	2d408 <am_hal_flash_delay+0x1c>
    {
        ui32Iterations -= ui32CycleCntAdj;

        g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
   2d402:	1ac0      	subs	r0, r0, r3
   2d404:	4b02      	ldr	r3, [pc, #8]	; (2d410 <am_hal_flash_delay+0x24>)
   2d406:	4798      	blx	r3
    }

} // am_hal_flash_delay()
   2d408:	bd08      	pop	{r3, pc}
        ui32CycleCntAdj = ((13 * 1) + 20) / 3;
   2d40a:	230b      	movs	r3, #11
   2d40c:	e7f7      	b.n	2d3fe <am_hal_flash_delay+0x12>
   2d40e:	bf00      	nop
   2d410:	0800009d 	.word	0x0800009d

0002d414 <am_hal_flash_delay_status_check>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_check(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                uint32_t ui32Mask, uint32_t ui32Value,
                                bool bIsEqual)
{
   2d414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d418:	460f      	mov	r7, r1
   2d41a:	4616      	mov	r6, r2
   2d41c:	461d      	mov	r5, r3
   2d41e:	f89d 8018 	ldrb.w	r8, [sp, #24]
   2d422:	e009      	b.n	2d438 <am_hal_flash_delay_status_check+0x24>
                return AM_HAL_STATUS_SUCCESS;
            }
        }
        else
        {
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
   2d424:	683c      	ldr	r4, [r7, #0]
   2d426:	4034      	ands	r4, r6
   2d428:	42ac      	cmp	r4, r5
   2d42a:	d10e      	bne.n	2d44a <am_hal_flash_delay_status_check+0x36>
            {
                return AM_HAL_STATUS_SUCCESS;
            }
        }

        if ( ui32usMaxDelay-- )
   2d42c:	1e44      	subs	r4, r0, #1
   2d42e:	b170      	cbz	r0, 2d44e <am_hal_flash_delay_status_check+0x3a>
        {
            //
            // Call the BOOTROM cycle function to delay for about 1 microsecond.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(1) );
   2d430:	2010      	movs	r0, #16
   2d432:	f7ff ffdb 	bl	2d3ec <am_hal_flash_delay>
        if ( ui32usMaxDelay-- )
   2d436:	4620      	mov	r0, r4
        if ( bIsEqual )
   2d438:	f1b8 0f00 	cmp.w	r8, #0
   2d43c:	d0f2      	beq.n	2d424 <am_hal_flash_delay_status_check+0x10>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
   2d43e:	683c      	ldr	r4, [r7, #0]
   2d440:	4034      	ands	r4, r6
   2d442:	42ac      	cmp	r4, r5
   2d444:	d1f2      	bne.n	2d42c <am_hal_flash_delay_status_check+0x18>
                return AM_HAL_STATUS_SUCCESS;
   2d446:	2000      	movs	r0, #0
   2d448:	e002      	b.n	2d450 <am_hal_flash_delay_status_check+0x3c>
                return AM_HAL_STATUS_SUCCESS;
   2d44a:	2000      	movs	r0, #0
   2d44c:	e000      	b.n	2d450 <am_hal_flash_delay_status_check+0x3c>
        {
            break;
        }
    }

    return AM_HAL_STATUS_TIMEOUT;
   2d44e:	2004      	movs	r0, #4

} // am_hal_flash_delay_status_check()
   2d450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002d454 <am_hal_flash_load_ui32>:
//! @return The value read from the given address.
//
//*****************************************************************************
uint32_t
am_hal_flash_load_ui32(uint32_t *pui32Address)
{
   2d454:	b508      	push	{r3, lr}
    return g_am_hal_flash.flash_util_read_word(pui32Address);
   2d456:	4b01      	ldr	r3, [pc, #4]	; (2d45c <am_hal_flash_load_ui32+0x8>)
   2d458:	4798      	blx	r3
} // am_hal_flash_load_ui32()
   2d45a:	bd08      	pop	{r3, pc}
   2d45c:	08000075 	.word	0x08000075

0002d460 <am_hal_flash_store_ui32>:
#error Compiler is unknown, please contact Ambiq support team
#endif

void
am_hal_flash_store_ui32(uint32_t *pui32Address, uint32_t ui32Value)
{
   2d460:	b508      	push	{r3, lr}
    // Call the simple routine that has been coded in SRAM.
    // First set up a function pointer to the array, being sure to set the
    //  .T bit (Thumb bit, bit0) in the branch address, then use that
    //  function ptr to call the SRAM function.
    //
    uint32_t SRAMCode = (uint32_t)SRAM_write_ui32 | 0x1;
   2d462:	4b02      	ldr	r3, [pc, #8]	; (2d46c <am_hal_flash_store_ui32+0xc>)
   2d464:	f043 0301 	orr.w	r3, r3, #1
    uint32_t (*pFunc)(uint32_t*, uint32_t) = (uint32_t (*)(uint32_t*, uint32_t))SRAMCode;
    (*pFunc)(pui32Address, ui32Value);
   2d468:	4798      	blx	r3

} // am_hal_flash_store_ui32()
   2d46a:	bd08      	pop	{r3, pc}
   2d46c:	10001e28 	.word	0x10001e28

0002d470 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
   2d470:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
   2d474:	b672      	cpsid	i
    __asm("    bx lr");
   2d476:	4770      	bx	lr

0002d478 <am_hal_interrupt_master_set>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
   2d478:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
   2d47c:	4770      	bx	lr
	...

0002d480 <device_info_get>:
device_info_get(am_hal_mcuctrl_device_t *psDevice)
{
    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
   2d480:	4a2a      	ldr	r2, [pc, #168]	; (2d52c <device_info_get+0xac>)
   2d482:	6813      	ldr	r3, [r2, #0]
   2d484:	6003      	str	r3, [r0, #0]

    //
    // Read the Chip ID0.
    //
    psDevice->ui32ChipID0 = MCUCTRL->CHIPID0;
   2d486:	6851      	ldr	r1, [r2, #4]
   2d488:	6041      	str	r1, [r0, #4]

    //
    // Read the Chip ID1.
    //
    psDevice->ui32ChipID1 = MCUCTRL->CHIPID1;
   2d48a:	6891      	ldr	r1, [r2, #8]
   2d48c:	6081      	str	r1, [r0, #8]

    //
    // Read the Chip Revision.
    //
    psDevice->ui32ChipRev = MCUCTRL->CHIPREV;
   2d48e:	68d1      	ldr	r1, [r2, #12]
   2d490:	60c1      	str	r1, [r0, #12]

    //
    // Read the Chip VENDOR ID.
    //
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
   2d492:	6911      	ldr	r1, [r2, #16]
   2d494:	6101      	str	r1, [r0, #16]

    //
    // Read the SKU (new for Apollo3).
    //
    psDevice->ui32SKU = MCUCTRL->SKU;
   2d496:	6952      	ldr	r2, [r2, #20]
   2d498:	6142      	str	r2, [r0, #20]

    //
    // Qualified from Part Number.
    //
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
   2d49a:	f003 0201 	and.w	r2, r3, #1
   2d49e:	6182      	str	r2, [r0, #24]
    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
        g_am_hal_mcuctrl_flash_size[
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_FLASHSIZE_M) >>
   2d4a0:	f3c3 5103 	ubfx	r1, r3, #20, #4
        g_am_hal_mcuctrl_flash_size[
   2d4a4:	4a22      	ldr	r2, [pc, #136]	; (2d530 <device_info_get+0xb0>)
   2d4a6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    psDevice->ui32FlashSize =
   2d4aa:	61c2      	str	r2, [r0, #28]
    //
    // SRAM size from Part Number.
    //
    psDevice->ui32SRAMSize =
        g_am_hal_mcuctrl_sram_size[
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_SRAMSIZE_M) >>
   2d4ac:	f3c3 4303 	ubfx	r3, r3, #16, #4
        g_am_hal_mcuctrl_sram_size[
   2d4b0:	4a20      	ldr	r2, [pc, #128]	; (2d534 <device_info_get+0xb4>)
   2d4b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    psDevice->ui32SRAMSize =
   2d4b6:	6203      	str	r3, [r0, #32]
    // Bits [7:4] are 0xE for Apollo, 0xD for Apollo2, 0xC for Apollo3.
    // Bits [3:0] are defined differently for Apollo and Apollo2/Apollo3.
    //   For Apollo, the low nibble is 0x0.
    //   For Apollo2/Apollo3, the low nibble indicates flash and SRAM size.
    //
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
   2d4b8:	4a1f      	ldr	r2, [pc, #124]	; (2d538 <device_info_get+0xb8>)
   2d4ba:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   2d4be:	b2db      	uxtb	r3, r3
   2d4c0:	6243      	str	r3, [r0, #36]	; 0x24
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
   2d4c2:	f8d2 10e4 	ldr.w	r1, [r2, #228]	; 0xe4
   2d4c6:	f001 010f 	and.w	r1, r1, #15
   2d4ca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   2d4ce:	6243      	str	r3, [r0, #36]	; 0x24

    //
    // JEPID is the JEP-106 Manufacturer ID Code, which is assigned to Ambiq as
    //  0x1B, with parity bit is 0x9B.  It is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
   2d4d0:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
   2d4d4:	f3c3 1303 	ubfx	r3, r3, #4, #4
   2d4d8:	6283      	str	r3, [r0, #40]	; 0x28
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
   2d4da:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
   2d4de:	f001 010f 	and.w	r1, r1, #15
   2d4e2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
   2d4e6:	6283      	str	r3, [r0, #40]	; 0x28

    //
    // CHIPREV is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
   2d4e8:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
   2d4ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   2d4f0:	62c3      	str	r3, [r0, #44]	; 0x2c
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
   2d4f2:	f8d2 10ec 	ldr.w	r1, [r2, #236]	; 0xec
   2d4f6:	f3c1 1103 	ubfx	r1, r1, #4, #4
   2d4fa:	430b      	orrs	r3, r1
   2d4fc:	62c3      	str	r3, [r0, #44]	; 0x2c

    //
    // Let's get the Coresight ID (32-bits across 4 registers)
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = JEDEC->CID3_b.CID << 24;
   2d4fe:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   2d502:	061b      	lsls	r3, r3, #24
   2d504:	6303      	str	r3, [r0, #48]	; 0x30
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
   2d506:	f8d2 10f8 	ldr.w	r1, [r2, #248]	; 0xf8
   2d50a:	b2c9      	uxtb	r1, r1
   2d50c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2d510:	6303      	str	r3, [r0, #48]	; 0x30
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
   2d512:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
   2d516:	b2c9      	uxtb	r1, r1
   2d518:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   2d51c:	6303      	str	r3, [r0, #48]	; 0x30
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
   2d51e:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
   2d522:	b2d2      	uxtb	r2, r2
   2d524:	4313      	orrs	r3, r2
   2d526:	6303      	str	r3, [r0, #48]	; 0x30
} // device_info_get()
   2d528:	4770      	bx	lr
   2d52a:	bf00      	nop
   2d52c:	40020000 	.word	0x40020000
   2d530:	000372d4 	.word	0x000372d4
   2d534:	00037314 	.word	0x00037314
   2d538:	f0000f00 	.word	0xf0000f00

0002d53c <mcuctrl_fault_status>:
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
   2d53c:	4a0c      	ldr	r2, [pc, #48]	; (2d570 <mcuctrl_fault_status+0x34>)
   2d53e:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
   2d542:	f003 0101 	and.w	r1, r3, #1
   2d546:	7001      	strb	r1, [r0, #0]
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
   2d548:	f3c3 0140 	ubfx	r1, r3, #1, #1
   2d54c:	7201      	strb	r1, [r0, #8]
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
   2d54e:	f3c3 0380 	ubfx	r3, r3, #2, #1
   2d552:	7403      	strb	r3, [r0, #16]

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = MCUCTRL->DCODEFAULTADDR;
   2d554:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
   2d558:	60c3      	str	r3, [r0, #12]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
   2d55a:	f8d2 11c0 	ldr.w	r1, [r2, #448]	; 0x1c0
   2d55e:	6843      	ldr	r3, [r0, #4]
   2d560:	430b      	orrs	r3, r1
   2d562:	6043      	str	r3, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
   2d564:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
   2d568:	6943      	ldr	r3, [r0, #20]
   2d56a:	4313      	orrs	r3, r2
   2d56c:	6143      	str	r3, [r0, #20]
} // mcuctrl_fault_status()
   2d56e:	4770      	bx	lr
   2d570:	40020000 	.word	0x40020000

0002d574 <am_hal_mcuctrl_info_get>:
am_hal_mcuctrl_info_get(am_hal_mcuctrl_infoget_e eInfoGet, void *pInfo)
{
    am_hal_mcuctrl_feature_t *psFeature;
    uint32_t ui32Feature;

    if ( pInfo == NULL )
   2d574:	b339      	cbz	r1, 2d5c6 <am_hal_mcuctrl_info_get+0x52>
{
   2d576:	b508      	push	{r3, lr}
   2d578:	4603      	mov	r3, r0
   2d57a:	4608      	mov	r0, r1
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    switch ( eInfoGet )
   2d57c:	2b01      	cmp	r3, #1
   2d57e:	d01a      	beq.n	2d5b6 <am_hal_mcuctrl_info_get+0x42>
   2d580:	2b02      	cmp	r3, #2
   2d582:	d01c      	beq.n	2d5be <am_hal_mcuctrl_info_get+0x4a>
   2d584:	b10b      	cbz	r3, 2d58a <am_hal_mcuctrl_info_get+0x16>
   2d586:	2006      	movs	r0, #6
    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_mcuctrl_info_get()
   2d588:	bd08      	pop	{r3, pc}
            ui32Feature = MCUCTRL->FEATUREENABLE;
   2d58a:	4a10      	ldr	r2, [pc, #64]	; (2d5cc <am_hal_mcuctrl_info_get+0x58>)
   2d58c:	6993      	ldr	r3, [r2, #24]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
   2d58e:	f3c3 1180 	ubfx	r1, r3, #6, #1
            psFeature->bBurstAvail =
   2d592:	7001      	strb	r1, [r0, #0]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
   2d594:	f3c3 0380 	ubfx	r3, r3, #2, #1
            psFeature->bBLEavail =
   2d598:	7043      	strb	r3, [r0, #1]
            ui32Feature = MCUCTRL->BOOTLOADER;
   2d59a:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
                _FLD2VAL(MCUCTRL_BOOTLOADER_SECBOOTFEATURE, ui32Feature);
   2d59e:	f3c3 6381 	ubfx	r3, r3, #26, #2
            psFeature->ui8SecBootFeature =
   2d5a2:	7103      	strb	r3, [r0, #4]
            ui32Feature = MCUCTRL->SKU;
   2d5a4:	6953      	ldr	r3, [r2, #20]
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
   2d5a6:	f3c3 0240 	ubfx	r2, r3, #1, #1
            psFeature->bBLEFeature =
   2d5aa:	7082      	strb	r2, [r0, #2]
                _FLD2VAL(MCUCTRL_SKU_ALLOWBURST, ui32Feature);
   2d5ac:	f003 0301 	and.w	r3, r3, #1
            psFeature->bBurstFeature =
   2d5b0:	70c3      	strb	r3, [r0, #3]
    return AM_HAL_STATUS_SUCCESS;
   2d5b2:	2000      	movs	r0, #0
            break;
   2d5b4:	e7e8      	b.n	2d588 <am_hal_mcuctrl_info_get+0x14>
            device_info_get((am_hal_mcuctrl_device_t *)pInfo);
   2d5b6:	f7ff ff63 	bl	2d480 <device_info_get>
    return AM_HAL_STATUS_SUCCESS;
   2d5ba:	2000      	movs	r0, #0
            break;
   2d5bc:	e7e4      	b.n	2d588 <am_hal_mcuctrl_info_get+0x14>
            mcuctrl_fault_status((am_hal_mcuctrl_fault_t*)pInfo);
   2d5be:	f7ff ffbd 	bl	2d53c <mcuctrl_fault_status>
    return AM_HAL_STATUS_SUCCESS;
   2d5c2:	2000      	movs	r0, #0
            break;
   2d5c4:	e7e0      	b.n	2d588 <am_hal_mcuctrl_info_get+0x14>
        return AM_HAL_STATUS_INVALID_ARG;
   2d5c6:	2006      	movs	r0, #6
} // am_hal_mcuctrl_info_get()
   2d5c8:	4770      	bx	lr
   2d5ca:	bf00      	nop
   2d5cc:	40020000 	.word	0x40020000

0002d5d0 <pwrctrl_periph_disable_msk_check>:
// ****************************************************************************
static uint32_t
pwrctrl_periph_disable_msk_check(am_hal_pwrctrl_periph_e ePeripheral)
{
    uint32_t retVal = AM_HAL_STATUS_FAIL;
    uint32_t HCPxMask = PWRCTRL->DEVPWREN;
   2d5d0:	4b1c      	ldr	r3, [pc, #112]	; (2d644 <pwrctrl_periph_disable_msk_check+0x74>)
   2d5d2:	689b      	ldr	r3, [r3, #8]

    switch (am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus)
   2d5d4:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   2d5d8:	4a1b      	ldr	r2, [pc, #108]	; (2d648 <pwrctrl_periph_disable_msk_check+0x78>)
   2d5da:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   2d5de:	6852      	ldr	r2, [r2, #4]
   2d5e0:	2a08      	cmp	r2, #8
   2d5e2:	d010      	beq.n	2d606 <pwrctrl_periph_disable_msk_check+0x36>
   2d5e4:	2a10      	cmp	r2, #16
   2d5e6:	d01a      	beq.n	2d61e <pwrctrl_periph_disable_msk_check+0x4e>
   2d5e8:	2a04      	cmp	r2, #4
   2d5ea:	d001      	beq.n	2d5f0 <pwrctrl_periph_disable_msk_check+0x20>
   2d5ec:	2001      	movs	r0, #1
   2d5ee:	4770      	bx	lr
    {
        case (PWRCTRL_DEVPWRSTATUS_HCPA_Msk):
            if (((HCPxMask & HCPA_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   2d5f0:	f240 5281 	movw	r2, #1409	; 0x581
   2d5f4:	4213      	tst	r3, r2
   2d5f6:	d01e      	beq.n	2d636 <pwrctrl_periph_disable_msk_check+0x66>
   2d5f8:	4a13      	ldr	r2, [pc, #76]	; (2d648 <pwrctrl_periph_disable_msk_check+0x78>)
   2d5fa:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   2d5fe:	4018      	ands	r0, r3
   2d600:	d01e      	beq.n	2d640 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   2d602:	2001      	movs	r0, #1
   2d604:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPB_Msk):
            if (((HCPxMask & HCPB_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   2d606:	f013 0f0e 	tst.w	r3, #14
   2d60a:	d016      	beq.n	2d63a <pwrctrl_periph_disable_msk_check+0x6a>
   2d60c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   2d610:	4a0d      	ldr	r2, [pc, #52]	; (2d648 <pwrctrl_periph_disable_msk_check+0x78>)
   2d612:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   2d616:	4018      	ands	r0, r3
   2d618:	d012      	beq.n	2d640 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   2d61a:	2001      	movs	r0, #1
   2d61c:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPC_Msk):
            if (((HCPxMask & HCPC_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   2d61e:	f013 0f70 	tst.w	r3, #112	; 0x70
   2d622:	d00c      	beq.n	2d63e <pwrctrl_periph_disable_msk_check+0x6e>
   2d624:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   2d628:	4a07      	ldr	r2, [pc, #28]	; (2d648 <pwrctrl_periph_disable_msk_check+0x78>)
   2d62a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   2d62e:	4018      	ands	r0, r3
   2d630:	d006      	beq.n	2d640 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   2d632:	2001      	movs	r0, #1
   2d634:	4770      	bx	lr
   2d636:	2001      	movs	r0, #1
   2d638:	4770      	bx	lr
   2d63a:	2001      	movs	r0, #1
   2d63c:	4770      	bx	lr
   2d63e:	2001      	movs	r0, #1
        default:
            break;
    }

    return retVal;
}
   2d640:	4770      	bx	lr
   2d642:	bf00      	nop
   2d644:	40021000 	.word	0x40021000
   2d648:	00037354 	.word	0x00037354

0002d64c <simobuck_updates>:
simobuck_updates(void)
{
    //
    // Adjust the SIMOBUCK LP settings.
    //
    if ( APOLLO3_GE_B0 )
   2d64c:	4b2b      	ldr	r3, [pc, #172]	; (2d6fc <simobuck_updates+0xb0>)
   2d64e:	68db      	ldr	r3, [r3, #12]
   2d650:	b2db      	uxtb	r3, r3
   2d652:	2b20      	cmp	r3, #32
   2d654:	d944      	bls.n	2d6e0 <simobuck_updates+0x94>
{
   2d656:	b410      	push	{r4}
    {
        MCUCTRL->SIMOBUCK2_b.SIMOBUCKCORELPHIGHTONTRIM  = 2;
   2d658:	4b28      	ldr	r3, [pc, #160]	; (2d6fc <simobuck_updates+0xb0>)
   2d65a:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
   2d65e:	2002      	movs	r0, #2
   2d660:	f360 4213 	bfi	r2, r0, #16, #4
   2d664:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
        MCUCTRL->SIMOBUCK2_b.SIMOBUCKCORELPLOWTONTRIM   = 3;
   2d668:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
   2d66c:	2203      	movs	r2, #3
   2d66e:	f362 5117 	bfi	r1, r2, #20, #4
   2d672:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
        MCUCTRL->SIMOBUCK3_b.SIMOBUCKCORELPHIGHTOFFTRIM = 5;
   2d676:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   2d67a:	2405      	movs	r4, #5
   2d67c:	f364 0103 	bfi	r1, r4, #0, #4
   2d680:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
        MCUCTRL->SIMOBUCK3_b.SIMOBUCKCORELPLOWTOFFTRIM  = 2;
   2d684:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   2d688:	f360 1107 	bfi	r1, r0, #4, #4
   2d68c:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
        MCUCTRL->SIMOBUCK3_b.SIMOBUCKMEMLPHIGHTOFFTRIM  = 6;
   2d690:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   2d694:	2006      	movs	r0, #6
   2d696:	f360 210b 	bfi	r1, r0, #8, #4
   2d69a:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
        MCUCTRL->SIMOBUCK3_b.SIMOBUCKMEMLPLOWTOFFTRIM   = 1;
   2d69e:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   2d6a2:	2001      	movs	r0, #1
   2d6a4:	f360 310f 	bfi	r1, r0, #12, #4
   2d6a8:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
        MCUCTRL->SIMOBUCK3_b.SIMOBUCKMEMLPHIGHTONTRIM   = 3;
   2d6ac:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   2d6b0:	f362 61de 	bfi	r1, r2, #27, #4
   2d6b4:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
        MCUCTRL->SIMOBUCK4_b.SIMOBUCKMEMLPLOWTONTRIM    = 3;
   2d6b8:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
   2d6bc:	f362 0103 	bfi	r1, r2, #0, #4
   2d6c0:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    }

    //
    // Adjust the SIMOBUCK Timeout settings.
    //
    if ( APOLLO3_GE_A1 )
   2d6c4:	4b0d      	ldr	r3, [pc, #52]	; (2d6fc <simobuck_updates+0xb0>)
   2d6c6:	68db      	ldr	r3, [r3, #12]
   2d6c8:	b2db      	uxtb	r3, r3
   2d6ca:	2b11      	cmp	r3, #17
   2d6cc:	d906      	bls.n	2d6dc <simobuck_updates+0x90>
    {
        MCUCTRL->SIMOBUCK4_b.SIMOBUCKCOMP2TIMEOUTEN = 0;
   2d6ce:	4b0b      	ldr	r3, [pc, #44]	; (2d6fc <simobuck_updates+0xb0>)
   2d6d0:	f8d3 235c 	ldr.w	r2, [r3, #860]	; 0x35c
   2d6d4:	f36f 6218 	bfc	r2, #24, #1
   2d6d8:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    }

} // simobuck_updates()
   2d6dc:	bc10      	pop	{r4}
   2d6de:	4770      	bx	lr
    if ( APOLLO3_GE_A1 )
   2d6e0:	4b06      	ldr	r3, [pc, #24]	; (2d6fc <simobuck_updates+0xb0>)
   2d6e2:	68db      	ldr	r3, [r3, #12]
   2d6e4:	b2db      	uxtb	r3, r3
   2d6e6:	2b11      	cmp	r3, #17
   2d6e8:	d907      	bls.n	2d6fa <simobuck_updates+0xae>
        MCUCTRL->SIMOBUCK4_b.SIMOBUCKCOMP2TIMEOUTEN = 0;
   2d6ea:	4b04      	ldr	r3, [pc, #16]	; (2d6fc <simobuck_updates+0xb0>)
   2d6ec:	f8d3 235c 	ldr.w	r2, [r3, #860]	; 0x35c
   2d6f0:	f36f 6218 	bfc	r2, #24, #1
   2d6f4:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
   2d6f8:	4770      	bx	lr
   2d6fa:	4770      	bx	lr
   2d6fc:	40020000 	.word	0x40020000

0002d700 <am_hal_pwrctrl_periph_enable>:
{
   2d700:	b570      	push	{r4, r5, r6, lr}
   2d702:	b082      	sub	sp, #8
   2d704:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
   2d706:	f7ff feb3 	bl	2d470 <am_hal_interrupt_master_disable>
   2d70a:	9000      	str	r0, [sp, #0]
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   2d70c:	4a1e      	ldr	r2, [pc, #120]	; (2d788 <am_hal_pwrctrl_periph_enable+0x88>)
   2d70e:	6893      	ldr	r3, [r2, #8]
   2d710:	4626      	mov	r6, r4
   2d712:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   2d716:	491d      	ldr	r1, [pc, #116]	; (2d78c <am_hal_pwrctrl_periph_enable+0x8c>)
   2d718:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   2d71c:	430b      	orrs	r3, r1
   2d71e:	6093      	str	r3, [r2, #8]
    AM_CRITICAL_END
   2d720:	9800      	ldr	r0, [sp, #0]
   2d722:	f7ff fea9 	bl	2d478 <am_hal_interrupt_master_set>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   2d726:	2500      	movs	r5, #0
   2d728:	2d13      	cmp	r5, #19
   2d72a:	d80e      	bhi.n	2d74a <am_hal_pwrctrl_periph_enable+0x4a>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   2d72c:	20a0      	movs	r0, #160	; 0xa0
   2d72e:	f7ff fe5d 	bl	2d3ec <am_hal_flash_delay>
        if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
   2d732:	4b15      	ldr	r3, [pc, #84]	; (2d788 <am_hal_pwrctrl_periph_enable+0x88>)
   2d734:	6999      	ldr	r1, [r3, #24]
   2d736:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   2d73a:	4a14      	ldr	r2, [pc, #80]	; (2d78c <am_hal_pwrctrl_periph_enable+0x8c>)
   2d73c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2d740:	685b      	ldr	r3, [r3, #4]
   2d742:	4219      	tst	r1, r3
   2d744:	d101      	bne.n	2d74a <am_hal_pwrctrl_periph_enable+0x4a>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   2d746:	350a      	adds	r5, #10
   2d748:	e7ee      	b.n	2d728 <am_hal_pwrctrl_periph_enable+0x28>
    if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
   2d74a:	4b0f      	ldr	r3, [pc, #60]	; (2d788 <am_hal_pwrctrl_periph_enable+0x88>)
   2d74c:	6999      	ldr	r1, [r3, #24]
   2d74e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2d752:	4a0e      	ldr	r2, [pc, #56]	; (2d78c <am_hal_pwrctrl_periph_enable+0x8c>)
   2d754:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2d758:	685b      	ldr	r3, [r3, #4]
   2d75a:	4219      	tst	r1, r3
   2d75c:	d002      	beq.n	2d764 <am_hal_pwrctrl_periph_enable+0x64>
        return AM_HAL_STATUS_SUCCESS;
   2d75e:	2000      	movs	r0, #0
} // am_hal_pwrctrl_periph_enable()
   2d760:	b002      	add	sp, #8
   2d762:	bd70      	pop	{r4, r5, r6, pc}
        AM_CRITICAL_BEGIN
   2d764:	f7ff fe84 	bl	2d470 <am_hal_interrupt_master_disable>
   2d768:	9001      	str	r0, [sp, #4]
        PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   2d76a:	4a07      	ldr	r2, [pc, #28]	; (2d788 <am_hal_pwrctrl_periph_enable+0x88>)
   2d76c:	6893      	ldr	r3, [r2, #8]
   2d76e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2d772:	4906      	ldr	r1, [pc, #24]	; (2d78c <am_hal_pwrctrl_periph_enable+0x8c>)
   2d774:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   2d778:	ea23 0301 	bic.w	r3, r3, r1
   2d77c:	6093      	str	r3, [r2, #8]
        AM_CRITICAL_END
   2d77e:	9801      	ldr	r0, [sp, #4]
   2d780:	f7ff fe7a 	bl	2d478 <am_hal_interrupt_master_set>
        return AM_HAL_STATUS_FAIL;
   2d784:	2001      	movs	r0, #1
   2d786:	e7eb      	b.n	2d760 <am_hal_pwrctrl_periph_enable+0x60>
   2d788:	40021000 	.word	0x40021000
   2d78c:	00037354 	.word	0x00037354

0002d790 <am_hal_pwrctrl_periph_disable>:
{
   2d790:	b570      	push	{r4, r5, r6, lr}
   2d792:	b082      	sub	sp, #8
   2d794:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
   2d796:	f7ff fe6b 	bl	2d470 <am_hal_interrupt_master_disable>
   2d79a:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   2d79c:	4a17      	ldr	r2, [pc, #92]	; (2d7fc <am_hal_pwrctrl_periph_disable+0x6c>)
   2d79e:	6893      	ldr	r3, [r2, #8]
   2d7a0:	4626      	mov	r6, r4
   2d7a2:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   2d7a6:	4916      	ldr	r1, [pc, #88]	; (2d800 <am_hal_pwrctrl_periph_disable+0x70>)
   2d7a8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   2d7ac:	ea23 0301 	bic.w	r3, r3, r1
   2d7b0:	6093      	str	r3, [r2, #8]
    AM_CRITICAL_END
   2d7b2:	9801      	ldr	r0, [sp, #4]
   2d7b4:	f7ff fe60 	bl	2d478 <am_hal_interrupt_master_set>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   2d7b8:	2500      	movs	r5, #0
   2d7ba:	2d13      	cmp	r5, #19
   2d7bc:	d80e      	bhi.n	2d7dc <am_hal_pwrctrl_periph_disable+0x4c>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   2d7be:	20a0      	movs	r0, #160	; 0xa0
   2d7c0:	f7ff fe14 	bl	2d3ec <am_hal_flash_delay>
        if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
   2d7c4:	4b0d      	ldr	r3, [pc, #52]	; (2d7fc <am_hal_pwrctrl_periph_disable+0x6c>)
   2d7c6:	6999      	ldr	r1, [r3, #24]
   2d7c8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   2d7cc:	4a0c      	ldr	r2, [pc, #48]	; (2d800 <am_hal_pwrctrl_periph_disable+0x70>)
   2d7ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2d7d2:	685b      	ldr	r3, [r3, #4]
   2d7d4:	4219      	tst	r1, r3
   2d7d6:	d001      	beq.n	2d7dc <am_hal_pwrctrl_periph_disable+0x4c>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   2d7d8:	350a      	adds	r5, #10
   2d7da:	e7ee      	b.n	2d7ba <am_hal_pwrctrl_periph_disable+0x2a>
    if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
   2d7dc:	4b07      	ldr	r3, [pc, #28]	; (2d7fc <am_hal_pwrctrl_periph_disable+0x6c>)
   2d7de:	6998      	ldr	r0, [r3, #24]
   2d7e0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2d7e4:	4a06      	ldr	r2, [pc, #24]	; (2d800 <am_hal_pwrctrl_periph_disable+0x70>)
   2d7e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2d7ea:	685b      	ldr	r3, [r3, #4]
   2d7ec:	4018      	ands	r0, r3
   2d7ee:	d101      	bne.n	2d7f4 <am_hal_pwrctrl_periph_disable+0x64>
} // am_hal_pwrctrl_periph_disable()
   2d7f0:	b002      	add	sp, #8
   2d7f2:	bd70      	pop	{r4, r5, r6, pc}
        return pwrctrl_periph_disable_msk_check(ePeripheral);
   2d7f4:	4620      	mov	r0, r4
   2d7f6:	f7ff feeb 	bl	2d5d0 <pwrctrl_periph_disable_msk_check>
   2d7fa:	e7f9      	b.n	2d7f0 <am_hal_pwrctrl_periph_disable+0x60>
   2d7fc:	40021000 	.word	0x40021000
   2d800:	00037354 	.word	0x00037354

0002d804 <am_hal_pwrctrl_blebuck_trim>:
void am_hal_pwrctrl_blebuck_trim(void)
{
  //
  // Enable the BLE buck trim values
  //
  if ( APOLLO3_GE_A1 )
   2d804:	4b12      	ldr	r3, [pc, #72]	; (2d850 <am_hal_pwrctrl_blebuck_trim+0x4c>)
   2d806:	68db      	ldr	r3, [r3, #12]
   2d808:	b2db      	uxtb	r3, r3
   2d80a:	2b11      	cmp	r3, #17
   2d80c:	d800      	bhi.n	2d810 <am_hal_pwrctrl_blebuck_trim+0xc>
   2d80e:	4770      	bx	lr
{
   2d810:	b500      	push	{lr}
   2d812:	b083      	sub	sp, #12
  {
    AM_CRITICAL_BEGIN
   2d814:	f7ff fe2c 	bl	2d470 <am_hal_interrupt_master_disable>
   2d818:	9001      	str	r0, [sp, #4]
    MCUCTRL->BLEBUCK2_b.BLEBUCKTONHITRIM = 0x19;
   2d81a:	4b0d      	ldr	r3, [pc, #52]	; (2d850 <am_hal_pwrctrl_blebuck_trim+0x4c>)
   2d81c:	f8d3 2368 	ldr.w	r2, [r3, #872]	; 0x368
   2d820:	2119      	movs	r1, #25
   2d822:	f361 128b 	bfi	r2, r1, #6, #6
   2d826:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
    MCUCTRL->BLEBUCK2_b.BLEBUCKTONLOWTRIM = 0xC;
   2d82a:	f8d3 2368 	ldr.w	r2, [r3, #872]	; 0x368
   2d82e:	210c      	movs	r1, #12
   2d830:	f361 0205 	bfi	r2, r1, #0, #6
   2d834:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
    CLKGEN->BLEBUCKTONADJ_b.TONADJUSTEN = CLKGEN_BLEBUCKTONADJ_TONADJUSTEN_DIS;
   2d838:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2d83c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   2d83e:	f36f 5296 	bfc	r2, #22, #1
   2d842:	63da      	str	r2, [r3, #60]	; 0x3c
    AM_CRITICAL_END
   2d844:	9801      	ldr	r0, [sp, #4]
   2d846:	f7ff fe17 	bl	2d478 <am_hal_interrupt_master_set>
  }
} // am_hal_pwrctrl_blebuck_trim()
   2d84a:	b003      	add	sp, #12
   2d84c:	f85d fb04 	ldr.w	pc, [sp], #4
   2d850:	40020000 	.word	0x40020000

0002d854 <am_hal_pwrctrl_low_power_init>:
{
   2d854:	b500      	push	{lr}
   2d856:	b083      	sub	sp, #12
    if ( !gAmHalResetStatus )
   2d858:	4b2f      	ldr	r3, [pc, #188]	; (2d918 <am_hal_pwrctrl_low_power_init+0xc4>)
   2d85a:	681b      	ldr	r3, [r3, #0]
   2d85c:	b91b      	cbnz	r3, 2d866 <am_hal_pwrctrl_low_power_init+0x12>
        gAmHalResetStatus = RSTGEN->STAT;
   2d85e:	4b2f      	ldr	r3, [pc, #188]	; (2d91c <am_hal_pwrctrl_low_power_init+0xc8>)
   2d860:	681a      	ldr	r2, [r3, #0]
   2d862:	4b2d      	ldr	r3, [pc, #180]	; (2d918 <am_hal_pwrctrl_low_power_init+0xc4>)
   2d864:	601a      	str	r2, [r3, #0]
    if ((APOLLO3_A1) && (1 == PWRCTRL->SUPPLYSTATUS_b.SIMOBUCKON))
   2d866:	4b2e      	ldr	r3, [pc, #184]	; (2d920 <am_hal_pwrctrl_low_power_init+0xcc>)
   2d868:	68db      	ldr	r3, [r3, #12]
   2d86a:	b2db      	uxtb	r3, r3
   2d86c:	2b12      	cmp	r3, #18
   2d86e:	d104      	bne.n	2d87a <am_hal_pwrctrl_low_power_init+0x26>
   2d870:	4b2c      	ldr	r3, [pc, #176]	; (2d924 <am_hal_pwrctrl_low_power_init+0xd0>)
   2d872:	685b      	ldr	r3, [r3, #4]
   2d874:	f013 0f01 	tst.w	r3, #1
   2d878:	d10e      	bne.n	2d898 <am_hal_pwrctrl_low_power_init+0x44>
    simobuck_updates();
   2d87a:	f7ff fee7 	bl	2d64c <simobuck_updates>
    am_hal_cachectrl_control(AM_HAL_CACHECTRL_CONTROL_LPMMODE_RECOMMENDED, 0);
   2d87e:	2100      	movs	r1, #0
   2d880:	200c      	movs	r0, #12
   2d882:	f000 fb6d 	bl	2df60 <am_hal_cachectrl_control>
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
   2d886:	4b27      	ldr	r3, [pc, #156]	; (2d924 <am_hal_pwrctrl_low_power_init+0xd0>)
   2d888:	699b      	ldr	r3, [r3, #24]
   2d88a:	f413 7f80 	tst.w	r3, #256	; 0x100
   2d88e:	d009      	beq.n	2d8a4 <am_hal_pwrctrl_low_power_init+0x50>
    return AM_HAL_STATUS_SUCCESS;
   2d890:	2000      	movs	r0, #0
} // am_hal_pwrctrl_low_power_init()
   2d892:	b003      	add	sp, #12
   2d894:	f85d fb04 	ldr.w	pc, [sp], #4
        ui32Status = am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_PERIPH_PDM);
   2d898:	200d      	movs	r0, #13
   2d89a:	f7ff ff31 	bl	2d700 <am_hal_pwrctrl_periph_enable>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
   2d89e:	2800      	cmp	r0, #0
   2d8a0:	d0eb      	beq.n	2d87a <am_hal_pwrctrl_low_power_init+0x26>
   2d8a2:	e7f6      	b.n	2d892 <am_hal_pwrctrl_low_power_init+0x3e>
        am_hal_pwrctrl_blebuck_trim();
   2d8a4:	f7ff ffae 	bl	2d804 <am_hal_pwrctrl_blebuck_trim>
        MCUCTRL->FEATUREENABLE_b.BLEREQ = 1;
   2d8a8:	4a1d      	ldr	r2, [pc, #116]	; (2d920 <am_hal_pwrctrl_low_power_init+0xcc>)
   2d8aa:	6993      	ldr	r3, [r2, #24]
   2d8ac:	f043 0301 	orr.w	r3, r3, #1
   2d8b0:	6193      	str	r3, [r2, #24]
        ui32Status = am_hal_flash_delay_status_check(10000,
   2d8b2:	2301      	movs	r3, #1
   2d8b4:	9300      	str	r3, [sp, #0]
   2d8b6:	2307      	movs	r3, #7
   2d8b8:	461a      	mov	r2, r3
   2d8ba:	491b      	ldr	r1, [pc, #108]	; (2d928 <am_hal_pwrctrl_low_power_init+0xd4>)
   2d8bc:	f242 7010 	movw	r0, #10000	; 0x2710
   2d8c0:	f7ff fda8 	bl	2d414 <am_hal_flash_delay_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
   2d8c4:	bb30      	cbnz	r0, 2d914 <am_hal_pwrctrl_low_power_init+0xc0>
        PWRCTRL->SUPPLYSRC |= _VAL2FLD(PWRCTRL_SUPPLYSRC_BLEBUCKEN,
   2d8c6:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   2d8ca:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
   2d8ce:	681a      	ldr	r2, [r3, #0]
   2d8d0:	f042 0201 	orr.w	r2, r2, #1
   2d8d4:	601a      	str	r2, [r3, #0]
        PWRCTRL->MISC |= _VAL2FLD(PWRCTRL_MISC_MEMVRLPBLE,
   2d8d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2d8d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   2d8dc:	625a      	str	r2, [r3, #36]	; 0x24
        if ( APOLLO3_A0 )
   2d8de:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   2d8e2:	68db      	ldr	r3, [r3, #12]
   2d8e4:	b2db      	uxtb	r3, r3
   2d8e6:	2b11      	cmp	r3, #17
   2d8e8:	d1d3      	bne.n	2d892 <am_hal_pwrctrl_low_power_init+0x3e>
            MCUCTRL->SIMOBUCK4_b.SIMOBUCKCLKDIVSEL = 0x0;
   2d8ea:	4b0d      	ldr	r3, [pc, #52]	; (2d920 <am_hal_pwrctrl_low_power_init+0xcc>)
   2d8ec:	f8d3 235c 	ldr.w	r2, [r3, #860]	; 0x35c
   2d8f0:	f36f 5256 	bfc	r2, #21, #2
   2d8f4:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONHITRIM   = 0xF;
   2d8f8:	f8d3 2368 	ldr.w	r2, [r3, #872]	; 0x368
   2d8fc:	210f      	movs	r1, #15
   2d8fe:	f361 128b 	bfi	r2, r1, #6, #6
   2d902:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONLOWTRIM  = 0xF;
   2d906:	f8d3 2368 	ldr.w	r2, [r3, #872]	; 0x368
   2d90a:	f361 0205 	bfi	r2, r1, #0, #6
   2d90e:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
   2d912:	e7be      	b.n	2d892 <am_hal_pwrctrl_low_power_init+0x3e>
            return AM_HAL_STATUS_TIMEOUT;
   2d914:	2004      	movs	r0, #4
   2d916:	e7bc      	b.n	2d892 <am_hal_pwrctrl_low_power_init+0x3e>
   2d918:	10007068 	.word	0x10007068
   2d91c:	4ffff000 	.word	0x4ffff000
   2d920:	40020000 	.word	0x40020000
   2d924:	40021000 	.word	0x40021000
   2d928:	40020018 	.word	0x40020018

0002d92c <apollo3_flash_sector_info>:

static int
apollo3_flash_sector_info(const struct hal_flash *dev, int idx, uint32_t *addr,
    uint32_t *sz)
{
    *addr = idx * AM_HAL_FLASH_PAGE_SIZE;
   2d92c:	0349      	lsls	r1, r1, #13
   2d92e:	6011      	str	r1, [r2, #0]
    *sz = AM_HAL_FLASH_PAGE_SIZE;
   2d930:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2d934:	601a      	str	r2, [r3, #0]

    return (0);
}
   2d936:	2000      	movs	r0, #0
   2d938:	4770      	bx	lr

0002d93a <apollo3_flash_init>:

static int
apollo3_flash_init(const struct hal_flash *dev)
{
    return (0);
}
   2d93a:	2000      	movs	r0, #0
   2d93c:	4770      	bx	lr
	...

0002d940 <apollo3_flash_erase_sector>:
{
   2d940:	b508      	push	{r3, lr}
    rc = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, inst, page);
   2d942:	f3c1 3245 	ubfx	r2, r1, #13, #6
   2d946:	f3c1 41c0 	ubfx	r1, r1, #19, #1
   2d94a:	4802      	ldr	r0, [pc, #8]	; (2d954 <apollo3_flash_erase_sector+0x14>)
   2d94c:	f7ff fd1c 	bl	2d388 <am_hal_flash_page_erase>
}
   2d950:	bd08      	pop	{r3, pc}
   2d952:	bf00      	nop
   2d954:	12344321 	.word	0x12344321

0002d958 <apollo3_flash_write_odd>:
{
   2d958:	b510      	push	{r4, lr}
   2d95a:	b082      	sub	sp, #8
   2d95c:	460c      	mov	r4, r1
   2d95e:	4611      	mov	r1, r2
   2d960:	461a      	mov	r2, r3
    offset = address % 4;
   2d962:	f004 0003 	and.w	r0, r4, #3
    assert(offset + num_bytes <= 4);
   2d966:	18c3      	adds	r3, r0, r3
   2d968:	2b04      	cmp	r3, #4
   2d96a:	d80e      	bhi.n	2d98a <apollo3_flash_write_odd+0x32>
    base = (uint32_t *)(address - offset);
   2d96c:	1a24      	subs	r4, r4, r0
    word = *base;
   2d96e:	6823      	ldr	r3, [r4, #0]
   2d970:	9301      	str	r3, [sp, #4]
    memcpy(u8p, src, num_bytes);
   2d972:	ab01      	add	r3, sp, #4
   2d974:	4418      	add	r0, r3
   2d976:	f7ed f97d 	bl	1ac74 <memcpy>
    rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, &word,
   2d97a:	2301      	movs	r3, #1
   2d97c:	4622      	mov	r2, r4
   2d97e:	a901      	add	r1, sp, #4
   2d980:	4807      	ldr	r0, [pc, #28]	; (2d9a0 <apollo3_flash_write_odd+0x48>)
   2d982:	f7ff fd07 	bl	2d394 <am_hal_flash_program_main>
}
   2d986:	b002      	add	sp, #8
   2d988:	bd10      	pop	{r4, pc}
    assert(offset + num_bytes <= 4);
   2d98a:	f7e6 febb 	bl	14704 <hal_debugger_connected>
   2d98e:	b100      	cbz	r0, 2d992 <apollo3_flash_write_odd+0x3a>
   2d990:	be01      	bkpt	0x0001
   2d992:	2300      	movs	r3, #0
   2d994:	461a      	mov	r2, r3
   2d996:	4619      	mov	r1, r3
   2d998:	4618      	mov	r0, r3
   2d99a:	f7eb f9c3 	bl	18d24 <__assert_func>
   2d99e:	bf00      	nop
   2d9a0:	12344321 	.word	0x12344321

0002d9a4 <apollo3_flash_write>:
{
   2d9a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d9a8:	4607      	mov	r7, r0
   2d9aa:	460d      	mov	r5, r1
   2d9ac:	4616      	mov	r6, r2
   2d9ae:	4698      	mov	r8, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2d9b0:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2d9b4:	b672      	cpsid	i
    if (lead_off != 0) {
   2d9b6:	f011 0403 	ands.w	r4, r1, #3
   2d9ba:	d010      	beq.n	2d9de <apollo3_flash_write+0x3a>
        lead_size = 4 - lead_off;
   2d9bc:	f1c4 0404 	rsb	r4, r4, #4
        if (lead_size > num_bytes) {
   2d9c0:	429c      	cmp	r4, r3
   2d9c2:	d900      	bls.n	2d9c6 <apollo3_flash_write+0x22>
            lead_size = num_bytes;
   2d9c4:	461c      	mov	r4, r3
        rc = apollo3_flash_write_odd(dev, address, u8p, lead_size);
   2d9c6:	4623      	mov	r3, r4
   2d9c8:	4632      	mov	r2, r6
   2d9ca:	4629      	mov	r1, r5
   2d9cc:	4638      	mov	r0, r7
   2d9ce:	f7ff ffc3 	bl	2d958 <apollo3_flash_write_odd>
        if (rc != 0) {
   2d9d2:	4603      	mov	r3, r0
   2d9d4:	bb98      	cbnz	r0, 2da3e <apollo3_flash_write+0x9a>
        u8p += lead_size;
   2d9d6:	4426      	add	r6, r4
        num_bytes -= lead_size;
   2d9d8:	eba8 0804 	sub.w	r8, r8, r4
        address += lead_size;
   2d9dc:	4425      	add	r5, r4
    if (num_bytes == 0) {
   2d9de:	f1b8 0f00 	cmp.w	r8, #0
   2d9e2:	d02b      	beq.n	2da3c <apollo3_flash_write+0x98>
    words = num_bytes / 4;
   2d9e4:	ea4f 0b98 	mov.w	fp, r8, lsr #2
   2d9e8:	46d9      	mov	r9, fp
    if ((uint32_t)u8p % 4 == 0) {
   2d9ea:	f016 0f03 	tst.w	r6, #3
   2d9ee:	d00e      	beq.n	2da0e <apollo3_flash_write+0x6a>
        for (i = 0; i < words; i++) {
   2d9f0:	2400      	movs	r4, #0
   2d9f2:	454c      	cmp	r4, r9
   2d9f4:	da13      	bge.n	2da1e <apollo3_flash_write+0x7a>
            rc = apollo3_flash_write_odd(dev, address + i * 4, u8p + i * 4, 4);
   2d9f6:	2304      	movs	r3, #4
   2d9f8:	eb06 0284 	add.w	r2, r6, r4, lsl #2
   2d9fc:	eb05 0184 	add.w	r1, r5, r4, lsl #2
   2da00:	4638      	mov	r0, r7
   2da02:	f7ff ffa9 	bl	2d958 <apollo3_flash_write_odd>
            if (rc != 0) {
   2da06:	4603      	mov	r3, r0
   2da08:	b9c8      	cbnz	r0, 2da3e <apollo3_flash_write+0x9a>
        for (i = 0; i < words; i++) {
   2da0a:	3401      	adds	r4, #1
   2da0c:	e7f1      	b.n	2d9f2 <apollo3_flash_write+0x4e>
        rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY,
   2da0e:	465b      	mov	r3, fp
   2da10:	462a      	mov	r2, r5
   2da12:	4631      	mov	r1, r6
   2da14:	480d      	ldr	r0, [pc, #52]	; (2da4c <apollo3_flash_write+0xa8>)
   2da16:	f7ff fcbd 	bl	2d394 <am_hal_flash_program_main>
        if (rc != 0) {
   2da1a:	4603      	mov	r3, r0
   2da1c:	b978      	cbnz	r0, 2da3e <apollo3_flash_write+0x9a>
    remainder = num_bytes - (words * 4);
   2da1e:	ea4f 018b 	mov.w	r1, fp, lsl #2
   2da22:	eba8 038b 	sub.w	r3, r8, fp, lsl #2
    if (remainder > 0) {
   2da26:	2b00      	cmp	r3, #0
   2da28:	dc01      	bgt.n	2da2e <apollo3_flash_write+0x8a>
    rc = 0;
   2da2a:	2300      	movs	r3, #0
   2da2c:	e007      	b.n	2da3e <apollo3_flash_write+0x9a>
        rc = apollo3_flash_write_odd(dev,
   2da2e:	1872      	adds	r2, r6, r1
   2da30:	4429      	add	r1, r5
   2da32:	4638      	mov	r0, r7
   2da34:	f7ff ff90 	bl	2d958 <apollo3_flash_write_odd>
   2da38:	4603      	mov	r3, r0
        if (rc != 0) {
   2da3a:	e000      	b.n	2da3e <apollo3_flash_write+0x9a>
        rc = 0;
   2da3c:	2300      	movs	r3, #0
    __HAL_ENABLE_INTERRUPTS(sr);
   2da3e:	f1ba 0f00 	cmp.w	sl, #0
   2da42:	d100      	bne.n	2da46 <apollo3_flash_write+0xa2>
  __ASM volatile ("cpsie i" : : : "memory");
   2da44:	b662      	cpsie	i
}
   2da46:	4618      	mov	r0, r3
   2da48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2da4c:	12344321 	.word	0x12344321

0002da50 <apollo3_flash_read>:
{
   2da50:	b508      	push	{r3, lr}
   2da52:	4610      	mov	r0, r2
    memcpy(dst, (void *) address, num_bytes);
   2da54:	461a      	mov	r2, r3
   2da56:	f7ed f90d 	bl	1ac74 <memcpy>
}
   2da5a:	2000      	movs	r0, #0
   2da5c:	bd08      	pop	{r3, pc}
	...

0002da60 <apollo2_os_tick_set_timer>:
/*** Number of system ticks per single OS tick. */
static uint32_t apollo2_os_tick_dur;

static void
apollo2_os_tick_set_timer(int os_ticks)
{
   2da60:	b538      	push	{r3, r4, r5, lr}
   2da62:	4604      	mov	r4, r0
    uint32_t sys_ticks;
    uint32_t cfg;

    OS_ASSERT_CRITICAL();
   2da64:	f7ec ff3b 	bl	1a8de <os_arch_in_critical>
   2da68:	b180      	cbz	r0, 2da8c <apollo2_os_tick_set_timer+0x2c>

    sys_ticks = os_ticks * apollo2_os_tick_dur;
   2da6a:	4b0d      	ldr	r3, [pc, #52]	; (2daa0 <apollo2_os_tick_set_timer+0x40>)
   2da6c:	6818      	ldr	r0, [r3, #0]
   2da6e:	fb00 f404 	mul.w	r4, r0, r4

    /* Freeze time, set timer expiry, then unfreeze time. */
    cfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
   2da72:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   2da76:	f000 fe33 	bl	2e6e0 <am_hal_stimer_config>
   2da7a:	4605      	mov	r5, r0
    am_hal_stimer_compare_delta_set(0, sys_ticks);
   2da7c:	4621      	mov	r1, r4
   2da7e:	2000      	movs	r0, #0
   2da80:	f000 fe58 	bl	2e734 <am_hal_stimer_compare_delta_set>
    am_hal_stimer_config(cfg);
   2da84:	4628      	mov	r0, r5
   2da86:	f000 fe2b 	bl	2e6e0 <am_hal_stimer_config>
}
   2da8a:	bd38      	pop	{r3, r4, r5, pc}
    OS_ASSERT_CRITICAL();
   2da8c:	f7e6 fe3a 	bl	14704 <hal_debugger_connected>
   2da90:	b100      	cbz	r0, 2da94 <apollo2_os_tick_set_timer+0x34>
   2da92:	be01      	bkpt	0x0001
   2da94:	2300      	movs	r3, #0
   2da96:	461a      	mov	r2, r3
   2da98:	4619      	mov	r1, r3
   2da9a:	4618      	mov	r0, r3
   2da9c:	f7eb f942 	bl	18d24 <__assert_func>
   2daa0:	1000706c 	.word	0x1000706c

0002daa4 <apollo2_os_tick_handler>:

static void
apollo2_os_tick_handler(void)
{
   2daa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t cur;
    int os_ticks;
    int delta;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   2daa6:	f7ec ff11 	bl	1a8cc <os_arch_save_sr>
   2daaa:	4605      	mov	r5, r0

    /* Calculate elapsed ticks and advance OS time. */
    cur = am_hal_stimer_counter_get();
   2daac:	f000 fe22 	bl	2e6f4 <am_hal_stimer_counter_get>
    delta = cur - apollo2_os_tick_prev;
   2dab0:	4e0c      	ldr	r6, [pc, #48]	; (2dae4 <apollo2_os_tick_handler+0x40>)
   2dab2:	6834      	ldr	r4, [r6, #0]
   2dab4:	1b04      	subs	r4, r0, r4
    os_ticks = delta / apollo2_os_tick_dur;
   2dab6:	4f0c      	ldr	r7, [pc, #48]	; (2dae8 <apollo2_os_tick_handler+0x44>)
   2dab8:	6838      	ldr	r0, [r7, #0]
   2daba:	fbb4 f4f0 	udiv	r4, r4, r0
    os_time_advance(os_ticks);
   2dabe:	4620      	mov	r0, r4
   2dac0:	f7ec fdda 	bl	1a678 <os_time_advance>

    /* Clear timer interrupt. */
    am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   2dac4:	2001      	movs	r0, #1
   2dac6:	f000 fe7b 	bl	2e7c0 <am_hal_stimer_int_clear>

    /* Update the time associated with the most recent tick. */
    apollo2_os_tick_prev += os_ticks * apollo2_os_tick_dur;
   2daca:	683b      	ldr	r3, [r7, #0]
   2dacc:	6830      	ldr	r0, [r6, #0]
   2dace:	fb03 0404 	mla	r4, r3, r4, r0
   2dad2:	6034      	str	r4, [r6, #0]

    /* Schedule timer to interrupt at the next tick. */
    apollo2_os_tick_set_timer(1);
   2dad4:	2001      	movs	r0, #1
   2dad6:	f7ff ffc3 	bl	2da60 <apollo2_os_tick_set_timer>

    OS_EXIT_CRITICAL(sr);
   2dada:	4628      	mov	r0, r5
   2dadc:	f7ec fefc 	bl	1a8d8 <os_arch_restore_sr>
}
   2dae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2dae2:	bf00      	nop
   2dae4:	10007070 	.word	0x10007070
   2dae8:	1000706c 	.word	0x1000706c

0002daec <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   2daec:	b510      	push	{r4, lr}
   2daee:	4604      	mov	r4, r0
    OS_ASSERT_CRITICAL();
   2daf0:	f7ec fef5 	bl	1a8de <os_arch_in_critical>
   2daf4:	b128      	cbz	r0, 2db02 <os_tick_idle+0x16>
     */

    /* Only set the timer for nonzero tick values.  For values of 0, just let
     * the timer expire on the next tick, as scheduled earlier.
     */
    if (ticks > 0) {
   2daf6:	b974      	cbnz	r4, 2db16 <os_tick_idle+0x2a>
  __ASM volatile ("dsb 0xF":::"memory");
   2daf8:	f3bf 8f4f 	dsb	sy
        apollo2_os_tick_set_timer(ticks);
    }

    __DSB();
    __WFI();
   2dafc:	bf30      	wfi

    if (ticks > 0) {
   2dafe:	b974      	cbnz	r4, 2db1e <os_tick_idle+0x32>
        apollo2_os_tick_handler();
    }
}
   2db00:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   2db02:	f7e6 fdff 	bl	14704 <hal_debugger_connected>
   2db06:	b100      	cbz	r0, 2db0a <os_tick_idle+0x1e>
   2db08:	be01      	bkpt	0x0001
   2db0a:	2300      	movs	r3, #0
   2db0c:	461a      	mov	r2, r3
   2db0e:	4619      	mov	r1, r3
   2db10:	4618      	mov	r0, r3
   2db12:	f7eb f907 	bl	18d24 <__assert_func>
        apollo2_os_tick_set_timer(ticks);
   2db16:	4620      	mov	r0, r4
   2db18:	f7ff ffa2 	bl	2da60 <apollo2_os_tick_set_timer>
   2db1c:	e7ec      	b.n	2daf8 <os_tick_idle+0xc>
        apollo2_os_tick_handler();
   2db1e:	f7ff ffc1 	bl	2daa4 <apollo2_os_tick_handler>
}
   2db22:	e7ed      	b.n	2db00 <os_tick_idle+0x14>

0002db24 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   2db24:	b538      	push	{r3, r4, r5, lr}
   2db26:	4605      	mov	r5, r0
   2db28:	460c      	mov	r4, r1
    os_sr_t sr;

    /* Reset the timer to 0. */
    am_hal_stimer_counter_clear();
   2db2a:	f000 fdf3 	bl	2e714 <am_hal_stimer_counter_clear>

    /* The OS tick timer uses:
     * o The 1024 Hz low-frequency RC oscillator (LFRC)
     * o The first comparator (COMPAREA)
     */
    am_hal_stimer_config(AM_HAL_STIMER_LFRC_1KHZ |
   2db2e:	f44f 7083 	mov.w	r0, #262	; 0x106
   2db32:	f000 fdd5 	bl	2e6e0 <am_hal_stimer_config>
                         AM_HAL_STIMER_CFG_COMPARE_A_ENABLE);
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA);
   2db36:	2001      	movs	r0, #1
   2db38:	f000 fe38 	bl	2e7ac <am_hal_stimer_int_enable>

    apollo2_os_tick_dur = APOLLO2_OS_TICK_FREQ / os_ticks_per_sec;
   2db3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2db40:	fbb3 f5f5 	udiv	r5, r3, r5
   2db44:	4b0c      	ldr	r3, [pc, #48]	; (2db78 <os_tick_init+0x54>)
   2db46:	601d      	str	r5, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2db48:	0164      	lsls	r4, r4, #5
   2db4a:	b2e4      	uxtb	r4, r4
   2db4c:	4b0b      	ldr	r3, [pc, #44]	; (2db7c <os_tick_init+0x58>)
   2db4e:	f883 4317 	strb.w	r4, [r3, #791]	; 0x317
  uint32_t vectors = (uint32_t )SCB->VTOR;
   2db52:	4a0b      	ldr	r2, [pc, #44]	; (2db80 <os_tick_init+0x5c>)
   2db54:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   2db56:	490b      	ldr	r1, [pc, #44]	; (2db84 <os_tick_init+0x60>)
   2db58:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2db5c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2db60:	601a      	str	r2, [r3, #0]
    NVIC_SetPriority(APOLLO2_OS_TICK_IRQ, prio);
    NVIC_SetVector(APOLLO2_OS_TICK_IRQ, (uint32_t)apollo2_os_tick_handler);
    NVIC_EnableIRQ(APOLLO2_OS_TICK_IRQ);

    /* Schedule timer to interrupt at the next tick. */
    OS_ENTER_CRITICAL(sr);
   2db62:	f7ec feb3 	bl	1a8cc <os_arch_save_sr>
   2db66:	4604      	mov	r4, r0
    apollo2_os_tick_set_timer(1);
   2db68:	2001      	movs	r0, #1
   2db6a:	f7ff ff79 	bl	2da60 <apollo2_os_tick_set_timer>
    OS_EXIT_CRITICAL(sr);
   2db6e:	4620      	mov	r0, r4
   2db70:	f7ec feb2 	bl	1a8d8 <os_arch_restore_sr>
}
   2db74:	bd38      	pop	{r3, r4, r5, pc}
   2db76:	bf00      	nop
   2db78:	1000706c 	.word	0x1000706c
   2db7c:	e000e100 	.word	0xe000e100
   2db80:	e000ed00 	.word	0xe000ed00
   2db84:	0002daa5 	.word	0x0002daa5

0002db88 <apollo3_timer_resolve>:
#endif

static struct apollo3_timer *
apollo3_timer_resolve(int timer_num)
{
    switch (timer_num) {
   2db88:	b908      	cbnz	r0, 2db8e <apollo3_timer_resolve+0x6>
#if MYNEWT_VAL(TIMER_0)
        case 0:     return &apollo3_timer_0;
   2db8a:	4802      	ldr	r0, [pc, #8]	; (2db94 <apollo3_timer_resolve+0xc>)
   2db8c:	4770      	bx	lr
        case 1:     return &apollo3_timer_1;
#endif
#if MYNEWT_VAL(ADC_0)
        case 3:     return &apollo3_timer_adc;
#endif
        default:    return NULL;
   2db8e:	2000      	movs	r0, #0
    }
}
   2db90:	4770      	bx	lr
   2db92:	bf00      	nop
   2db94:	10001e34 	.word	0x10001e34

0002db98 <apollo3_timer_tbl_find>:
 * matches the one specified.
 */
static const struct apollo3_timer_freq_entry *
apollo3_timer_tbl_find(const struct apollo3_timer_freq_entry *table,
                       uint32_t freq)
{
   2db98:	b430      	push	{r4, r5}
   2db9a:	4604      	mov	r4, r0
    int i;

    /* If the requested value is less than all entries in the table, return the
     * smallest one.
     */
    if (table[0].freq >= freq) {
   2db9c:	6803      	ldr	r3, [r0, #0]
   2db9e:	428b      	cmp	r3, r1
   2dba0:	d218      	bcs.n	2dbd4 <apollo3_timer_tbl_find+0x3c>

    /* Find the first entry with a frequency value that is greater than the one
     * being requested.  Then determine which of it or its predecessor is
     * closer to the specified value.
     */
    for (i = 1; table[i].freq != 0; i++) {
   2dba2:	2301      	movs	r3, #1
   2dba4:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
   2dba8:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
   2dbac:	b16a      	cbz	r2, 2dbca <apollo3_timer_tbl_find+0x32>
        cur = &table[i];
        if (cur->freq >= freq) {
   2dbae:	428a      	cmp	r2, r1
   2dbb0:	d201      	bcs.n	2dbb6 <apollo3_timer_tbl_find+0x1e>
    for (i = 1; table[i].freq != 0; i++) {
   2dbb2:	3301      	adds	r3, #1
   2dbb4:	e7f6      	b.n	2dba4 <apollo3_timer_tbl_find+0xc>
            prev = cur - 1;
   2dbb6:	f1a0 0408 	sub.w	r4, r0, #8
            delta1 = freq - prev->freq;
   2dbba:	f850 3c08 	ldr.w	r3, [r0, #-8]
   2dbbe:	1acb      	subs	r3, r1, r3
            delta2 = cur->freq - freq;
   2dbc0:	1a52      	subs	r2, r2, r1

            if (delta1 <= delta2) {
   2dbc2:	4293      	cmp	r3, r2
   2dbc4:	d806      	bhi.n	2dbd4 <apollo3_timer_tbl_find+0x3c>
                return prev;
   2dbc6:	4620      	mov	r0, r4
   2dbc8:	e004      	b.n	2dbd4 <apollo3_timer_tbl_find+0x3c>
    }

    /* Requested value is greater than all entries in the table; return the
     * largest.
     */
    return table + i - 1;
   2dbca:	f103 5000 	add.w	r0, r3, #536870912	; 0x20000000
   2dbce:	3801      	subs	r0, #1
   2dbd0:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
}
   2dbd4:	bc30      	pop	{r4, r5}
   2dbd6:	4770      	bx	lr

0002dbd8 <apollo3_timer_sdk_cfg>:
 * ORed in, depending on the MCU timer being configured.
 */
static int
apollo3_timer_sdk_cfg(const struct apollo3_timer_cfg *cfg, uint32_t freq_hz,
                      uint32_t *out_actual_hz, uint32_t *out_cfg)
{
   2dbd8:	b538      	push	{r3, r4, r5, lr}
   2dbda:	4615      	mov	r5, r2
   2dbdc:	461c      	mov	r4, r3
    const struct apollo3_timer_freq_entry *entry;

    switch (cfg->source) {
   2dbde:	7800      	ldrb	r0, [r0, #0]
   2dbe0:	3801      	subs	r0, #1
   2dbe2:	2804      	cmp	r0, #4
   2dbe4:	d82b      	bhi.n	2dc3e <apollo3_timer_sdk_cfg+0x66>
   2dbe6:	e8df f000 	tbb	[pc, r0]
   2dbea:	0c03      	.short	0x0c03
   2dbec:	1e15      	.short	0x1e15
   2dbee:	24          	.byte	0x24
   2dbef:	00          	.byte	0x00
    case APOLLO3_TIMER_SOURCE_HFRC:
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_hfrc, freq_hz);
   2dbf0:	4814      	ldr	r0, [pc, #80]	; (2dc44 <apollo3_timer_sdk_cfg+0x6c>)
   2dbf2:	f7ff ffd1 	bl	2db98 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   2dbf6:	6803      	ldr	r3, [r0, #0]
   2dbf8:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   2dbfa:	6843      	ldr	r3, [r0, #4]
   2dbfc:	6023      	str	r3, [r4, #0]
        return 0;
   2dbfe:	2000      	movs	r0, #0
        return 0;

    default:
        return SYS_EINVAL;
    }
}
   2dc00:	bd38      	pop	{r3, r4, r5, pc}
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_xt, freq_hz);
   2dc02:	4811      	ldr	r0, [pc, #68]	; (2dc48 <apollo3_timer_sdk_cfg+0x70>)
   2dc04:	f7ff ffc8 	bl	2db98 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   2dc08:	6803      	ldr	r3, [r0, #0]
   2dc0a:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   2dc0c:	6843      	ldr	r3, [r0, #4]
   2dc0e:	6023      	str	r3, [r4, #0]
        return 0;
   2dc10:	2000      	movs	r0, #0
   2dc12:	e7f5      	b.n	2dc00 <apollo3_timer_sdk_cfg+0x28>
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_lfrc, freq_hz);
   2dc14:	480d      	ldr	r0, [pc, #52]	; (2dc4c <apollo3_timer_sdk_cfg+0x74>)
   2dc16:	f7ff ffbf 	bl	2db98 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   2dc1a:	6803      	ldr	r3, [r0, #0]
   2dc1c:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   2dc1e:	6843      	ldr	r3, [r0, #4]
   2dc20:	6023      	str	r3, [r4, #0]
        return 0;
   2dc22:	2000      	movs	r0, #0
   2dc24:	e7ec      	b.n	2dc00 <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 100;
   2dc26:	2364      	movs	r3, #100	; 0x64
   2dc28:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_RTC_100HZ;
   2dc2a:	231c      	movs	r3, #28
   2dc2c:	6023      	str	r3, [r4, #0]
        return 0;
   2dc2e:	2000      	movs	r0, #0
   2dc30:	e7e6      	b.n	2dc00 <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 48000000;
   2dc32:	4b07      	ldr	r3, [pc, #28]	; (2dc50 <apollo3_timer_sdk_cfg+0x78>)
   2dc34:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_HCLK_DIV4;
   2dc36:	231e      	movs	r3, #30
   2dc38:	6023      	str	r3, [r4, #0]
        return 0;
   2dc3a:	2000      	movs	r0, #0
   2dc3c:	e7e0      	b.n	2dc00 <apollo3_timer_sdk_cfg+0x28>
    switch (cfg->source) {
   2dc3e:	f06f 0001 	mvn.w	r0, #1
   2dc42:	e7dd      	b.n	2dc00 <apollo3_timer_sdk_cfg+0x28>
   2dc44:	0003743c 	.word	0x0003743c
   2dc48:	00037494 	.word	0x00037494
   2dc4c:	0003746c 	.word	0x0003746c
   2dc50:	02dc6c00 	.word	0x02dc6c00

0002dc54 <apollo3_timer_isr_cfg>:
 */ 
static int
apollo3_timer_isr_cfg(const struct apollo3_timer *bsp_timer,
                      uint32_t *out_isr_cfg)
{
    switch (bsp_timer->once_timer_idx) {
   2dc54:	7c43      	ldrb	r3, [r0, #17]
   2dc56:	2b01      	cmp	r3, #1
   2dc58:	d103      	bne.n	2dc62 <apollo3_timer_isr_cfg+0xe>
#if MYNEWT_VAL(TIMER_0)
    case 1:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA1C0;
   2dc5a:	2304      	movs	r3, #4
   2dc5c:	600b      	str	r3, [r1, #0]
        return 0;
   2dc5e:	2000      	movs	r0, #0
   2dc60:	4770      	bx	lr
    case 3:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA3C0;
        return 0;
#endif
    default:
        return SYS_EINVAL;
   2dc62:	f06f 0001 	mvn.w	r0, #1
    }
}
   2dc66:	4770      	bx	lr

0002dc68 <apollo3_timer_cur_ticks>:
/**
 * Retrieves the current time from the specified timer.
 */
static uint32_t
apollo3_timer_cur_ticks(const struct apollo3_timer *bsp_timer)
{
   2dc68:	b508      	push	{r3, lr}
    return am_hal_ctimer_read(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   2dc6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2dc6e:	7c00      	ldrb	r0, [r0, #16]
   2dc70:	f000 fafa 	bl	2e268 <am_hal_ctimer_read>
}
   2dc74:	bd08      	pop	{r3, pc}

0002dc76 <apollo3_timer_set_ocmp>:
 * time.
 */
static void
apollo3_timer_set_ocmp(const struct apollo3_timer *bsp_timer,
                       uint32_t ticks_from_now)
{
   2dc76:	b530      	push	{r4, r5, lr}
   2dc78:	b083      	sub	sp, #12
   2dc7a:	4604      	mov	r4, r0
   2dc7c:	460d      	mov	r5, r1
    uint32_t isr_cfg;
    int rc;

    /* Calculate the ISR flags for the "once" timer. */
    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   2dc7e:	a901      	add	r1, sp, #4
   2dc80:	f7ff ffe8 	bl	2dc54 <apollo3_timer_isr_cfg>
    assert(rc == 0);
   2dc84:	b9e8      	cbnz	r0, 2dcc2 <apollo3_timer_set_ocmp+0x4c>

    /* Clear any pending interrupt for this timer. */
    am_hal_ctimer_int_clear(isr_cfg);
   2dc86:	9801      	ldr	r0, [sp, #4]
   2dc88:	f000 fba8 	bl	2e3dc <am_hal_ctimer_int_clear>

    /* Stop and clear the "once" timer. */
    am_hal_ctimer_stop(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   2dc8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2dc90:	7c60      	ldrb	r0, [r4, #17]
   2dc92:	f000 fabf 	bl	2e214 <am_hal_ctimer_stop>
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   2dc96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2dc9a:	7c60      	ldrb	r0, [r4, #17]
   2dc9c:	f000 fad0 	bl	2e240 <am_hal_ctimer_clear>

    /* Schedule an interrupt at the requested relative time. */
    am_hal_ctimer_period_set(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
   2dca0:	2300      	movs	r3, #0
   2dca2:	462a      	mov	r2, r5
   2dca4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2dca8:	7c60      	ldrb	r0, [r4, #17]
   2dcaa:	f000 fb25 	bl	2e2f8 <am_hal_ctimer_period_set>
                             ticks_from_now, 0);

    /* Enable interrupts for this timer, in case they haven't been enabled
     * yet.
     */
    am_hal_ctimer_int_enable(isr_cfg);
   2dcae:	9801      	ldr	r0, [sp, #4]
   2dcb0:	f000 fb6c 	bl	2e38c <am_hal_ctimer_int_enable>

    /* Restart the timer. */
    am_hal_ctimer_start(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   2dcb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2dcb8:	7c60      	ldrb	r0, [r4, #17]
   2dcba:	f000 fa81 	bl	2e1c0 <am_hal_ctimer_start>
}
   2dcbe:	b003      	add	sp, #12
   2dcc0:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
   2dcc2:	f7e6 fd1f 	bl	14704 <hal_debugger_connected>
   2dcc6:	b100      	cbz	r0, 2dcca <apollo3_timer_set_ocmp+0x54>
   2dcc8:	be01      	bkpt	0x0001
   2dcca:	2300      	movs	r3, #0
   2dccc:	461a      	mov	r2, r3
   2dcce:	4619      	mov	r1, r3
   2dcd0:	4618      	mov	r0, r3
   2dcd2:	f7eb f827 	bl	18d24 <__assert_func>

0002dcd6 <apollo3_timer_set_ocmp_at>:
 * Configures a BSP timer to generate an interrupt at the specified absolute
 * time.
 */
static void
apollo3_timer_set_ocmp_at(const struct apollo3_timer *bsp_timer, uint32_t at)
{
   2dcd6:	b530      	push	{r4, r5, lr}
   2dcd8:	b083      	sub	sp, #12
   2dcda:	4605      	mov	r5, r0
   2dcdc:	460c      	mov	r4, r1
    uint32_t isr_cfg;
    uint32_t now;
    int32_t ticks_from_now;
    int rc;

    now = apollo3_timer_cur_ticks(bsp_timer);
   2dcde:	f7ff ffc3 	bl	2dc68 <apollo3_timer_cur_ticks>
    ticks_from_now = at - now;
   2dce2:	1a21      	subs	r1, r4, r0
    if (ticks_from_now <= 0) {
   2dce4:	2900      	cmp	r1, #0
   2dce6:	dd04      	ble.n	2dcf2 <apollo3_timer_set_ocmp_at+0x1c>
        /* Event already occurred. */
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
        assert(rc == 0);
        am_hal_ctimer_int_set(isr_cfg);
    } else {
        apollo3_timer_set_ocmp(bsp_timer, ticks_from_now);
   2dce8:	4628      	mov	r0, r5
   2dcea:	f7ff ffc4 	bl	2dc76 <apollo3_timer_set_ocmp>
    }
}
   2dcee:	b003      	add	sp, #12
   2dcf0:	bd30      	pop	{r4, r5, pc}
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   2dcf2:	a901      	add	r1, sp, #4
   2dcf4:	4628      	mov	r0, r5
   2dcf6:	f7ff ffad 	bl	2dc54 <apollo3_timer_isr_cfg>
        assert(rc == 0);
   2dcfa:	b918      	cbnz	r0, 2dd04 <apollo3_timer_set_ocmp_at+0x2e>
        am_hal_ctimer_int_set(isr_cfg);
   2dcfc:	9801      	ldr	r0, [sp, #4]
   2dcfe:	f000 fb7d 	bl	2e3fc <am_hal_ctimer_int_set>
   2dd02:	e7f4      	b.n	2dcee <apollo3_timer_set_ocmp_at+0x18>
        assert(rc == 0);
   2dd04:	f7e6 fcfe 	bl	14704 <hal_debugger_connected>
   2dd08:	b100      	cbz	r0, 2dd0c <apollo3_timer_set_ocmp_at+0x36>
   2dd0a:	be01      	bkpt	0x0001
   2dd0c:	2300      	movs	r3, #0
   2dd0e:	461a      	mov	r2, r3
   2dd10:	4619      	mov	r1, r3
   2dd12:	4618      	mov	r0, r3
   2dd14:	f7eb f806 	bl	18d24 <__assert_func>

0002dd18 <apollo3_timer_clear_ocmp>:
/**
 * Unsets a scheduled interrupt for the specified BSP timer.
 */
static void
apollo3_timer_clear_ocmp(const struct apollo3_timer *bsp_timer)
{
   2dd18:	b500      	push	{lr}
   2dd1a:	b083      	sub	sp, #12
    uint32_t isr_cfg;
    int rc;

    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   2dd1c:	a901      	add	r1, sp, #4
   2dd1e:	f7ff ff99 	bl	2dc54 <apollo3_timer_isr_cfg>
    assert(rc == 0);
   2dd22:	b928      	cbnz	r0, 2dd30 <apollo3_timer_clear_ocmp+0x18>

    am_hal_ctimer_int_disable(isr_cfg);
   2dd24:	9801      	ldr	r0, [sp, #4]
   2dd26:	f000 fb45 	bl	2e3b4 <am_hal_ctimer_int_disable>
}
   2dd2a:	b003      	add	sp, #12
   2dd2c:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   2dd30:	f7e6 fce8 	bl	14704 <hal_debugger_connected>
   2dd34:	b100      	cbz	r0, 2dd38 <apollo3_timer_clear_ocmp+0x20>
   2dd36:	be01      	bkpt	0x0001
   2dd38:	2300      	movs	r3, #0
   2dd3a:	461a      	mov	r2, r3
   2dd3c:	4619      	mov	r1, r3
   2dd3e:	4618      	mov	r0, r3
   2dd40:	f7ea fff0 	bl	18d24 <__assert_func>

0002dd44 <apollo3_timer_chk_queue>:
 * Executes callbacks for all expired timers in a BSP timer's queue.  This
 * function is called when a timer interrupt is handled.
 */
static void
apollo3_timer_chk_queue(struct apollo3_timer *bsp_timer)
{
   2dd44:	b570      	push	{r4, r5, r6, lr}
   2dd46:	4605      	mov	r5, r0
    struct hal_timer *timer;
    uint32_t ticks;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   2dd48:	f7ec fdc0 	bl	1a8cc <os_arch_save_sr>
   2dd4c:	4606      	mov	r6, r0

    /* Remove and process each expired timer in the sorted queue. */
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
   2dd4e:	e009      	b.n	2dd64 <apollo3_timer_chk_queue+0x20>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
        if ((int32_t)(ticks - timer->expiry) >= 0) {
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   2dd50:	6963      	ldr	r3, [r4, #20]
   2dd52:	606b      	str	r3, [r5, #4]
   2dd54:	6963      	ldr	r3, [r4, #20]
   2dd56:	6922      	ldr	r2, [r4, #16]
   2dd58:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   2dd5a:	2300      	movs	r3, #0
   2dd5c:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   2dd5e:	6863      	ldr	r3, [r4, #4]
   2dd60:	68a0      	ldr	r0, [r4, #8]
   2dd62:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
   2dd64:	682c      	ldr	r4, [r5, #0]
   2dd66:	b164      	cbz	r4, 2dd82 <apollo3_timer_chk_queue+0x3e>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
   2dd68:	4628      	mov	r0, r5
   2dd6a:	f7ff ff7d 	bl	2dc68 <apollo3_timer_cur_ticks>
        if ((int32_t)(ticks - timer->expiry) >= 0) {
   2dd6e:	68e3      	ldr	r3, [r4, #12]
   2dd70:	1ac0      	subs	r0, r0, r3
   2dd72:	2800      	cmp	r0, #0
   2dd74:	db05      	blt.n	2dd82 <apollo3_timer_chk_queue+0x3e>
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   2dd76:	6923      	ldr	r3, [r4, #16]
   2dd78:	2b00      	cmp	r3, #0
   2dd7a:	d0e9      	beq.n	2dd50 <apollo3_timer_chk_queue+0xc>
   2dd7c:	6962      	ldr	r2, [r4, #20]
   2dd7e:	615a      	str	r2, [r3, #20]
   2dd80:	e7e8      	b.n	2dd54 <apollo3_timer_chk_queue+0x10>
    }

    /* If any timers remain, schedule an interrupt for the timer that expires
     * next.
     */
    if (timer != NULL) {
   2dd82:	b13c      	cbz	r4, 2dd94 <apollo3_timer_chk_queue+0x50>
        apollo3_timer_set_ocmp_at(bsp_timer, timer->expiry);
   2dd84:	68e1      	ldr	r1, [r4, #12]
   2dd86:	4628      	mov	r0, r5
   2dd88:	f7ff ffa5 	bl	2dcd6 <apollo3_timer_set_ocmp_at>
    } else {
        apollo3_timer_clear_ocmp(bsp_timer);
    }

    OS_EXIT_CRITICAL(sr);
   2dd8c:	4630      	mov	r0, r6
   2dd8e:	f7ec fda3 	bl	1a8d8 <os_arch_restore_sr>
}
   2dd92:	bd70      	pop	{r4, r5, r6, pc}
        apollo3_timer_clear_ocmp(bsp_timer);
   2dd94:	4628      	mov	r0, r5
   2dd96:	f7ff ffbf 	bl	2dd18 <apollo3_timer_clear_ocmp>
   2dd9a:	e7f7      	b.n	2dd8c <apollo3_timer_chk_queue+0x48>

0002dd9c <apollo3_timer_isr>:
/**
 * Handles a ctimer interrupt.
 */
static void
apollo3_timer_isr(void)
{
   2dd9c:	b510      	push	{r4, lr}
    uint32_t status;

    /* Read the ctimer status to determine which timers generated the
     * interrupt.
     */
    status = am_hal_ctimer_int_status_get(true);
   2dd9e:	2001      	movs	r0, #1
   2dda0:	f000 fb3c 	bl	2e41c <am_hal_ctimer_int_status_get>
   2dda4:	4604      	mov	r4, r0
    am_hal_ctimer_int_clear(status);
   2dda6:	f000 fb19 	bl	2e3dc <am_hal_ctimer_int_clear>

    /* Service the appropriate timers. */
#if MYNEWT_VAL(TIMER_0)
    if (status & (AM_HAL_CTIMER_INT_TIMERA1C0 | AM_HAL_CTIMER_INT_TIMERA1C1)) {
   2ddaa:	f014 1f04 	tst.w	r4, #262148	; 0x40004
   2ddae:	d100      	bne.n	2ddb2 <apollo3_timer_isr+0x16>
#if MYNEWT_VAL(ADC_0)
    if (status & AM_HAL_CTIMER_INT_TIMERA3C0) {
        apollo3_timer_chk_queue(&apollo3_timer_adc);
    }
#endif
}
   2ddb0:	bd10      	pop	{r4, pc}
        apollo3_timer_chk_queue(&apollo3_timer_0);
   2ddb2:	4802      	ldr	r0, [pc, #8]	; (2ddbc <apollo3_timer_isr+0x20>)
   2ddb4:	f7ff ffc6 	bl	2dd44 <apollo3_timer_chk_queue>
}
   2ddb8:	e7fa      	b.n	2ddb0 <apollo3_timer_isr+0x14>
   2ddba:	bf00      	nop
   2ddbc:	10001e34 	.word	0x10001e34

0002ddc0 <hal_timer_init>:
 *
 * @return int          0: success; error code otherwise
 */
int
hal_timer_init(int timer_num, void *vcfg)
{
   2ddc0:	b510      	push	{r4, lr}
   2ddc2:	460c      	mov	r4, r1
    static int nvic_configured;

    const struct apollo3_timer_cfg *bsp_cfg;
    struct apollo3_timer *bsp_timer;

    bsp_timer = apollo3_timer_resolve(timer_num);
   2ddc4:	f7ff fee0 	bl	2db88 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
   2ddc8:	b1b8      	cbz	r0, 2ddfa <hal_timer_init+0x3a>
   2ddca:	4603      	mov	r3, r0
        return SYS_EINVAL;
    }

    if (!nvic_configured) {
   2ddcc:	4a0c      	ldr	r2, [pc, #48]	; (2de00 <hal_timer_init+0x40>)
   2ddce:	6812      	ldr	r2, [r2, #0]
   2ddd0:	b97a      	cbnz	r2, 2ddf2 <hal_timer_init+0x32>
        nvic_configured = 1;
   2ddd2:	4a0b      	ldr	r2, [pc, #44]	; (2de00 <hal_timer_init+0x40>)
   2ddd4:	2101      	movs	r1, #1
   2ddd6:	6011      	str	r1, [r2, #0]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   2ddd8:	4a0a      	ldr	r2, [pc, #40]	; (2de04 <hal_timer_init+0x44>)
   2ddda:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   2dddc:	490a      	ldr	r1, [pc, #40]	; (2de08 <hal_timer_init+0x48>)
   2ddde:	6791      	str	r1, [r2, #120]	; 0x78
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2dde0:	4a0a      	ldr	r2, [pc, #40]	; (2de0c <hal_timer_init+0x4c>)
   2dde2:	21e0      	movs	r1, #224	; 0xe0
   2dde4:	f882 130e 	strb.w	r1, [r2, #782]	; 0x30e
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2dde8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   2ddec:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2ddf0:	6011      	str	r1, [r2, #0]
        NVIC_ClearPendingIRQ(CTIMER_IRQn);
        NVIC_EnableIRQ(CTIMER_IRQn);
    }

    bsp_cfg = vcfg;
    bsp_timer->cfg = *bsp_cfg;
   2ddf2:	7822      	ldrb	r2, [r4, #0]
   2ddf4:	721a      	strb	r2, [r3, #8]

    return 0;
   2ddf6:	2000      	movs	r0, #0
}
   2ddf8:	bd10      	pop	{r4, pc}
        return SYS_EINVAL;
   2ddfa:	f06f 0001 	mvn.w	r0, #1
   2ddfe:	e7fb      	b.n	2ddf8 <hal_timer_init+0x38>
   2de00:	10007074 	.word	0x10007074
   2de04:	e000ed00 	.word	0xe000ed00
   2de08:	0002dd9d 	.word	0x0002dd9d
   2de0c:	e000e100 	.word	0xe000e100

0002de10 <hal_timer_config>:
 *
 * @return int
 */
int
hal_timer_config(int timer_num, uint32_t freq_hz)
{
   2de10:	b570      	push	{r4, r5, r6, lr}
   2de12:	b082      	sub	sp, #8
   2de14:	460d      	mov	r5, r1
    uint32_t cont_cfg;
    uint32_t once_cfg;
    uint32_t sdk_cfg;
    int rc;

    bsp_timer = apollo3_timer_resolve(timer_num);
   2de16:	f7ff feb7 	bl	2db88 <apollo3_timer_resolve>
    if (bsp_timer == NULL || bsp_timer->is_adc_clk) {
   2de1a:	b380      	cbz	r0, 2de7e <hal_timer_config+0x6e>
   2de1c:	4604      	mov	r4, r0
   2de1e:	7c83      	ldrb	r3, [r0, #18]
   2de20:	bb83      	cbnz	r3, 2de84 <hal_timer_config+0x74>
        return SYS_EINVAL;
    }

    rc = apollo3_timer_sdk_cfg(&bsp_timer->cfg, freq_hz, &bsp_timer->freq_hz,
   2de22:	ab01      	add	r3, sp, #4
   2de24:	f100 020c 	add.w	r2, r0, #12
   2de28:	4629      	mov	r1, r5
   2de2a:	3008      	adds	r0, #8
   2de2c:	f7ff fed4 	bl	2dbd8 <apollo3_timer_sdk_cfg>
                               &sdk_cfg);
    if (rc != 0) {
   2de30:	4605      	mov	r5, r0
   2de32:	b110      	cbz	r0, 2de3a <hal_timer_config+0x2a>

    /* Start the continuous timer. */
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);

    return 0;
}
   2de34:	4628      	mov	r0, r5
   2de36:	b002      	add	sp, #8
   2de38:	bd70      	pop	{r4, r5, r6, pc}
    cont_cfg = sdk_cfg | AM_HAL_CTIMER_FN_CONTINUOUS;
   2de3a:	9e01      	ldr	r6, [sp, #4]
   2de3c:	f446 76c0 	orr.w	r6, r6, #384	; 0x180
    am_hal_ctimer_clear(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   2de40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2de44:	7c20      	ldrb	r0, [r4, #16]
   2de46:	f000 f9fb 	bl	2e240 <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH,
   2de4a:	4632      	mov	r2, r6
   2de4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2de50:	7c20      	ldrb	r0, [r4, #16]
   2de52:	f000 f975 	bl	2e140 <am_hal_ctimer_config_single>
    once_cfg = sdk_cfg | AM_HAL_CTIMER_FN_ONCE | AM_HAL_CTIMER_INT_ENABLE;
   2de56:	9e01      	ldr	r6, [sp, #4]
   2de58:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   2de5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2de60:	7c60      	ldrb	r0, [r4, #17]
   2de62:	f000 f9ed 	bl	2e240 <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
   2de66:	4632      	mov	r2, r6
   2de68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2de6c:	7c60      	ldrb	r0, [r4, #17]
   2de6e:	f000 f967 	bl	2e140 <am_hal_ctimer_config_single>
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   2de72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2de76:	7c20      	ldrb	r0, [r4, #16]
   2de78:	f000 f9a2 	bl	2e1c0 <am_hal_ctimer_start>
    return 0;
   2de7c:	e7da      	b.n	2de34 <hal_timer_config+0x24>
        return SYS_EINVAL;
   2de7e:	f06f 0501 	mvn.w	r5, #1
   2de82:	e7d7      	b.n	2de34 <hal_timer_config+0x24>
   2de84:	f06f 0501 	mvn.w	r5, #1
   2de88:	e7d4      	b.n	2de34 <hal_timer_config+0x24>

0002de8a <hal_watchdog_init>:
int
hal_watchdog_init(uint32_t expire_msecs)
{
    /* XXX: Unimplemented. */
    return 0;
}
   2de8a:	2000      	movs	r0, #0
   2de8c:	4770      	bx	lr

0002de8e <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    /* XXX: Unimplemented. */
}
   2de8e:	4770      	bx	lr

0002de90 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    /* XXX: Unimplemented. */
}
   2de90:	4770      	bx	lr
	...

0002de94 <set_LPMMODE>:
set_LPMMODE(uint32_t ui32value)
{
    uint32_t ui32Val;
    uint32_t *pui32RegAddr;

    if ( ui32value > (CACHECTRL_FLASHCFG_LPMMODE_Msk >> CACHECTRL_FLASHCFG_LPMMODE_Pos) )
   2de94:	2803      	cmp	r0, #3
   2de96:	d901      	bls.n	2de9c <set_LPMMODE+0x8>
    {
        return false;
   2de98:	2000      	movs	r0, #0
               _VAL2FLD(CACHECTRL_FLASHCFG_LPM_RD_WAIT, 0x7);
    am_hal_flash_store_ui32(pui32RegAddr, ui32Val);
    AM_CRITICAL_END

    return true;
} // set_LPMMODE()
   2de9a:	4770      	bx	lr
{
   2de9c:	b530      	push	{r4, r5, lr}
   2de9e:	b083      	sub	sp, #12
   2dea0:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
   2dea2:	f7ff fae5 	bl	2d470 <am_hal_interrupt_master_disable>
   2dea6:	9001      	str	r0, [sp, #4]
    ui32Val = am_hal_flash_load_ui32(pui32RegAddr);
   2dea8:	4d0a      	ldr	r5, [pc, #40]	; (2ded4 <set_LPMMODE+0x40>)
   2deaa:	4628      	mov	r0, r5
   2deac:	f7ff fad2 	bl	2d454 <am_hal_flash_load_ui32>
    ui32Val &= ~(CACHECTRL_FLASHCFG_LPMMODE_Msk                 |
   2deb0:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    ui32Val |= _VAL2FLD(CACHECTRL_FLASHCFG_LPMMODE, ui32value)    |
   2deb4:	0321      	lsls	r1, r4, #12
   2deb6:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
   2deba:	4301      	orrs	r1, r0
    am_hal_flash_store_ui32(pui32RegAddr, ui32Val);
   2debc:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   2dec0:	4628      	mov	r0, r5
   2dec2:	f7ff facd 	bl	2d460 <am_hal_flash_store_ui32>
    AM_CRITICAL_END
   2dec6:	9801      	ldr	r0, [sp, #4]
   2dec8:	f7ff fad6 	bl	2d478 <am_hal_interrupt_master_set>
    return true;
   2decc:	2001      	movs	r0, #1
} // set_LPMMODE()
   2dece:	b003      	add	sp, #12
   2ded0:	bd30      	pop	{r4, r5, pc}
   2ded2:	bf00      	nop
   2ded4:	40018004 	.word	0x40018004

0002ded8 <set_SEDELAY>:
set_SEDELAY(uint32_t ui32value)
{
    uint32_t ui32Val;
    uint32_t *pui32RegAddr;

    if ( ui32value > (CACHECTRL_FLASHCFG_SEDELAY_Msk >> CACHECTRL_FLASHCFG_SEDELAY_Pos) )
   2ded8:	2807      	cmp	r0, #7
   2deda:	d901      	bls.n	2dee0 <set_SEDELAY+0x8>
    {
        return false;
   2dedc:	2000      	movs	r0, #0
               _VAL2FLD(CACHECTRL_FLASHCFG_LPM_RD_WAIT, 0x7);
    am_hal_flash_store_ui32(pui32RegAddr, ui32Val);
    AM_CRITICAL_END

    return true;
} // set_SEDELAY()
   2dede:	4770      	bx	lr
{
   2dee0:	b530      	push	{r4, r5, lr}
   2dee2:	b083      	sub	sp, #12
   2dee4:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
   2dee6:	f7ff fac3 	bl	2d470 <am_hal_interrupt_master_disable>
   2deea:	9001      	str	r0, [sp, #4]
    ui32Val = am_hal_flash_load_ui32(pui32RegAddr);
   2deec:	4d0a      	ldr	r5, [pc, #40]	; (2df18 <set_SEDELAY+0x40>)
   2deee:	4628      	mov	r0, r5
   2def0:	f7ff fab0 	bl	2d454 <am_hal_flash_load_ui32>
    ui32Val &= ~(CACHECTRL_FLASHCFG_SEDELAY_Msk                 |
   2def4:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    ui32Val |= _VAL2FLD(CACHECTRL_FLASHCFG_SEDELAY, ui32value)    |
   2def8:	0121      	lsls	r1, r4, #4
   2defa:	f001 0170 	and.w	r1, r1, #112	; 0x70
   2defe:	4301      	orrs	r1, r0
    am_hal_flash_store_ui32(pui32RegAddr, ui32Val);
   2df00:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   2df04:	4628      	mov	r0, r5
   2df06:	f7ff faab 	bl	2d460 <am_hal_flash_store_ui32>
    AM_CRITICAL_END
   2df0a:	9801      	ldr	r0, [sp, #4]
   2df0c:	f7ff fab4 	bl	2d478 <am_hal_interrupt_master_set>
    return true;
   2df10:	2001      	movs	r0, #1
} // set_SEDELAY()
   2df12:	b003      	add	sp, #12
   2df14:	bd30      	pop	{r4, r5, pc}
   2df16:	bf00      	nop
   2df18:	40018004 	.word	0x40018004

0002df1c <set_RDWAIT>:
set_RDWAIT(uint32_t ui32value)
{
    uint32_t ui32Val;
    uint32_t *pui32RegAddr;

    if ( ui32value > (CACHECTRL_FLASHCFG_RD_WAIT_Msk >> CACHECTRL_FLASHCFG_RD_WAIT_Pos) )
   2df1c:	280f      	cmp	r0, #15
   2df1e:	d901      	bls.n	2df24 <set_RDWAIT+0x8>
    {
        return false;
   2df20:	2000      	movs	r0, #0
               _VAL2FLD(CACHECTRL_FLASHCFG_LPM_RD_WAIT, 0x7);
    am_hal_flash_store_ui32(pui32RegAddr, ui32Val);
    AM_CRITICAL_END

    return true;
} // set_RDWAIT()
   2df22:	4770      	bx	lr
{
   2df24:	b530      	push	{r4, r5, lr}
   2df26:	b083      	sub	sp, #12
   2df28:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
   2df2a:	f7ff faa1 	bl	2d470 <am_hal_interrupt_master_disable>
   2df2e:	9001      	str	r0, [sp, #4]
    ui32Val = am_hal_flash_load_ui32(pui32RegAddr);
   2df30:	4d0a      	ldr	r5, [pc, #40]	; (2df5c <set_RDWAIT+0x40>)
   2df32:	4628      	mov	r0, r5
   2df34:	f7ff fa8e 	bl	2d454 <am_hal_flash_load_ui32>
    ui32Val &= ~(CACHECTRL_FLASHCFG_RD_WAIT_Msk                 |
   2df38:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   2df3c:	f021 010f 	bic.w	r1, r1, #15
    ui32Val |= _VAL2FLD(CACHECTRL_FLASHCFG_RD_WAIT, ui32value)  |
   2df40:	f004 040f 	and.w	r4, r4, #15
   2df44:	4321      	orrs	r1, r4
    am_hal_flash_store_ui32(pui32RegAddr, ui32Val);
   2df46:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   2df4a:	4628      	mov	r0, r5
   2df4c:	f7ff fa88 	bl	2d460 <am_hal_flash_store_ui32>
    AM_CRITICAL_END
   2df50:	9801      	ldr	r0, [sp, #4]
   2df52:	f7ff fa91 	bl	2d478 <am_hal_interrupt_master_set>
    return true;
   2df56:	2001      	movs	r0, #1
} // set_RDWAIT()
   2df58:	b003      	add	sp, #12
   2df5a:	bd30      	pop	{r4, r5, pc}
   2df5c:	40018004 	.word	0x40018004

0002df60 <am_hal_cachectrl_control>:
//  Select the cache configuration type.
//
//*****************************************************************************
uint32_t
am_hal_cachectrl_control(am_hal_cachectrl_control_e eControl, void *pArgs)
{
   2df60:	b500      	push	{lr}
   2df62:	b083      	sub	sp, #12
    uint32_t ui32Arg;
    uint32_t ui32SetMask = 0;

    switch ( eControl )
   2df64:	3801      	subs	r0, #1
   2df66:	2810      	cmp	r0, #16
   2df68:	f200 80b9 	bhi.w	2e0de <am_hal_cachectrl_control+0x17e>
   2df6c:	e8df f000 	tbb	[pc, r0]
   2df70:	b20911b5 	.word	0xb20911b5
   2df74:	a8abaeb0 	.word	0xa8abaeb0
   2df78:	45332619 	.word	0x45332619
   2df7c:	7b726957 	.word	0x7b726957
   2df80:	84          	.byte	0x84
   2df81:	00          	.byte	0x00
{
   2df82:	f44f 6388 	mov.w	r3, #1088	; 0x440
    // Important note - setting of an enable and disable simultanously has
    // unpredicable results.
    //
    if ( ui32SetMask )
    {
        CACHECTRL->CTRL = ui32SetMask;
   2df86:	4a62      	ldr	r2, [pc, #392]	; (2e110 <am_hal_cachectrl_control+0x1b0>)
   2df88:	6093      	str	r3, [r2, #8]
    }

    return AM_HAL_STATUS_SUCCESS;
   2df8a:	2000      	movs	r0, #0

} // am_hal_cachectrl_control()
   2df8c:	b003      	add	sp, #12
   2df8e:	f85d fb04 	ldr.w	pc, [sp], #4
            if ( !_FLD2VAL(CACHECTRL_CACHECFG_ENABLE_MONITOR, CACHECTRL->CACHECFG) )
   2df92:	4b5f      	ldr	r3, [pc, #380]	; (2e110 <am_hal_cachectrl_control+0x1b0>)
   2df94:	681b      	ldr	r3, [r3, #0]
   2df96:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   2df9a:	f000 80a2 	beq.w	2e0e2 <am_hal_cachectrl_control+0x182>
                ui32SetMask = CACHECTRL_CTRL_RESET_STAT_Msk;
   2df9e:	2302      	movs	r3, #2
   2dfa0:	e7f1      	b.n	2df86 <am_hal_cachectrl_control+0x26>
            AM_CRITICAL_BEGIN
   2dfa2:	f7ff fa65 	bl	2d470 <am_hal_interrupt_master_disable>
   2dfa6:	9000      	str	r0, [sp, #0]
            CACHECTRL->CACHECFG |= CACHECTRL_CACHECFG_ENABLE_MONITOR_Msk;
   2dfa8:	4a59      	ldr	r2, [pc, #356]	; (2e110 <am_hal_cachectrl_control+0x1b0>)
   2dfaa:	6813      	ldr	r3, [r2, #0]
   2dfac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   2dfb0:	6013      	str	r3, [r2, #0]
            AM_CRITICAL_END
   2dfb2:	9800      	ldr	r0, [sp, #0]
   2dfb4:	f7ff fa60 	bl	2d478 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
   2dfb8:	2000      	movs	r0, #0
   2dfba:	e7e7      	b.n	2df8c <am_hal_cachectrl_control+0x2c>
            AM_CRITICAL_BEGIN
   2dfbc:	f7ff fa58 	bl	2d470 <am_hal_interrupt_master_disable>
   2dfc0:	9001      	str	r0, [sp, #4]
            CACHECTRL->CACHECFG &= ~CACHECTRL_CACHECFG_ENABLE_MONITOR_Msk;
   2dfc2:	4a53      	ldr	r2, [pc, #332]	; (2e110 <am_hal_cachectrl_control+0x1b0>)
   2dfc4:	6813      	ldr	r3, [r2, #0]
   2dfc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   2dfca:	6013      	str	r3, [r2, #0]
            AM_CRITICAL_END
   2dfcc:	9801      	ldr	r0, [sp, #4]
   2dfce:	f7ff fa53 	bl	2d478 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
   2dfd2:	2000      	movs	r0, #0
   2dfd4:	e7da      	b.n	2df8c <am_hal_cachectrl_control+0x2c>
            if ( !set_LPMMODE(AM_HAL_CACHECTRL_FLASHCFG_LPMMODE_NEVER)      ||
   2dfd6:	2000      	movs	r0, #0
   2dfd8:	f7ff ff5c 	bl	2de94 <set_LPMMODE>
   2dfdc:	b908      	cbnz	r0, 2dfe2 <am_hal_cachectrl_control+0x82>
                return AM_HAL_STATUS_FAIL;
   2dfde:	2001      	movs	r0, #1
   2dfe0:	e7d4      	b.n	2df8c <am_hal_cachectrl_control+0x2c>
                 !set_SEDELAY(0x7)                                          ||
   2dfe2:	2007      	movs	r0, #7
   2dfe4:	f7ff ff78 	bl	2ded8 <set_SEDELAY>
            if ( !set_LPMMODE(AM_HAL_CACHECTRL_FLASHCFG_LPMMODE_NEVER)      ||
   2dfe8:	2800      	cmp	r0, #0
   2dfea:	d0f8      	beq.n	2dfde <am_hal_cachectrl_control+0x7e>
                 !set_RDWAIT(0x3) )
   2dfec:	2003      	movs	r0, #3
   2dfee:	f7ff ff95 	bl	2df1c <set_RDWAIT>
                 !set_SEDELAY(0x7)                                          ||
   2dff2:	2800      	cmp	r0, #0
   2dff4:	d0f3      	beq.n	2dfde <am_hal_cachectrl_control+0x7e>
    return AM_HAL_STATUS_SUCCESS;
   2dff6:	2000      	movs	r0, #0
   2dff8:	e7c8      	b.n	2df8c <am_hal_cachectrl_control+0x2c>
            if ( !set_LPMMODE(AM_HAL_CACHECTRL_FLASHCFG_LPMMODE_STANDBY)    ||
   2dffa:	2001      	movs	r0, #1
   2dffc:	f7ff ff4a 	bl	2de94 <set_LPMMODE>
   2e000:	b908      	cbnz	r0, 2e006 <am_hal_cachectrl_control+0xa6>
                return AM_HAL_STATUS_FAIL;
   2e002:	2001      	movs	r0, #1
   2e004:	e7c2      	b.n	2df8c <am_hal_cachectrl_control+0x2c>
                 !set_SEDELAY(0x5)                                          ||
   2e006:	2005      	movs	r0, #5
   2e008:	f7ff ff66 	bl	2ded8 <set_SEDELAY>
            if ( !set_LPMMODE(AM_HAL_CACHECTRL_FLASHCFG_LPMMODE_STANDBY)    ||
   2e00c:	2800      	cmp	r0, #0
   2e00e:	d0f8      	beq.n	2e002 <am_hal_cachectrl_control+0xa2>
                 !set_RDWAIT(0x1) )
   2e010:	2001      	movs	r0, #1
   2e012:	f7ff ff83 	bl	2df1c <set_RDWAIT>
                 !set_SEDELAY(0x5)                                          ||
   2e016:	2800      	cmp	r0, #0
   2e018:	d0f3      	beq.n	2e002 <am_hal_cachectrl_control+0xa2>
    return AM_HAL_STATUS_SUCCESS;
   2e01a:	2000      	movs	r0, #0
   2e01c:	e7b6      	b.n	2df8c <am_hal_cachectrl_control+0x2c>
            if ( !set_LPMMODE(AM_HAL_CACHECTRL_FLASHCFG_LPMMODE_STANDBY)    ||
   2e01e:	2001      	movs	r0, #1
   2e020:	f7ff ff38 	bl	2de94 <set_LPMMODE>
   2e024:	b908      	cbnz	r0, 2e02a <am_hal_cachectrl_control+0xca>
                return AM_HAL_STATUS_FAIL;
   2e026:	2001      	movs	r0, #1
   2e028:	e7b0      	b.n	2df8c <am_hal_cachectrl_control+0x2c>
                 !set_SEDELAY(0x6)                                          ||
   2e02a:	2006      	movs	r0, #6
   2e02c:	f7ff ff54 	bl	2ded8 <set_SEDELAY>
            if ( !set_LPMMODE(AM_HAL_CACHECTRL_FLASHCFG_LPMMODE_STANDBY)    ||
   2e030:	2800      	cmp	r0, #0
   2e032:	d0f8      	beq.n	2e026 <am_hal_cachectrl_control+0xc6>
                 !set_RDWAIT(0x1) )
   2e034:	2001      	movs	r0, #1
   2e036:	f7ff ff71 	bl	2df1c <set_RDWAIT>
                 !set_SEDELAY(0x6)                                          ||
   2e03a:	2800      	cmp	r0, #0
   2e03c:	d0f3      	beq.n	2e026 <am_hal_cachectrl_control+0xc6>
    return AM_HAL_STATUS_SUCCESS;
   2e03e:	2000      	movs	r0, #0
   2e040:	e7a4      	b.n	2df8c <am_hal_cachectrl_control+0x2c>
            if ( !pArgs )
   2e042:	2900      	cmp	r1, #0
   2e044:	d04f      	beq.n	2e0e6 <am_hal_cachectrl_control+0x186>
            if ( !set_LPMMODE(ui32Arg) )
   2e046:	6808      	ldr	r0, [r1, #0]
   2e048:	f7ff ff24 	bl	2de94 <set_LPMMODE>
   2e04c:	2800      	cmp	r0, #0
   2e04e:	d04c      	beq.n	2e0ea <am_hal_cachectrl_control+0x18a>
    return AM_HAL_STATUS_SUCCESS;
   2e050:	2000      	movs	r0, #0
   2e052:	e79b      	b.n	2df8c <am_hal_cachectrl_control+0x2c>
            if ( !pArgs )
   2e054:	2900      	cmp	r1, #0
   2e056:	d04a      	beq.n	2e0ee <am_hal_cachectrl_control+0x18e>
            if ( !set_SEDELAY(ui32Arg) )
   2e058:	6808      	ldr	r0, [r1, #0]
   2e05a:	f7ff ff3d 	bl	2ded8 <set_SEDELAY>
   2e05e:	2800      	cmp	r0, #0
   2e060:	d047      	beq.n	2e0f2 <am_hal_cachectrl_control+0x192>
    return AM_HAL_STATUS_SUCCESS;
   2e062:	2000      	movs	r0, #0
   2e064:	e792      	b.n	2df8c <am_hal_cachectrl_control+0x2c>
            if ( !pArgs )
   2e066:	2900      	cmp	r1, #0
   2e068:	d045      	beq.n	2e0f6 <am_hal_cachectrl_control+0x196>
            if ( !set_RDWAIT(ui32Arg) )
   2e06a:	6808      	ldr	r0, [r1, #0]
   2e06c:	f7ff ff56 	bl	2df1c <set_RDWAIT>
   2e070:	2800      	cmp	r0, #0
   2e072:	d042      	beq.n	2e0fa <am_hal_cachectrl_control+0x19a>
    return AM_HAL_STATUS_SUCCESS;
   2e074:	2000      	movs	r0, #0
   2e076:	e789      	b.n	2df8c <am_hal_cachectrl_control+0x2c>
            if ( pArgs == NULL )
   2e078:	2900      	cmp	r1, #0
   2e07a:	d040      	beq.n	2e0fe <am_hal_cachectrl_control+0x19e>
            if ((pNcCfg->ui32StartAddr & ~CACHECTRL_NCR0START_ADDR_Msk) ||
   2e07c:	684a      	ldr	r2, [r1, #4]
   2e07e:	4b25      	ldr	r3, [pc, #148]	; (2e114 <am_hal_cachectrl_control+0x1b4>)
   2e080:	4013      	ands	r3, r2
   2e082:	2b00      	cmp	r3, #0
   2e084:	d13d      	bne.n	2e102 <am_hal_cachectrl_control+0x1a2>
                (pNcCfg->ui32EndAddr & ~CACHECTRL_NCR0START_ADDR_Msk))
   2e086:	688b      	ldr	r3, [r1, #8]
   2e088:	4822      	ldr	r0, [pc, #136]	; (2e114 <am_hal_cachectrl_control+0x1b4>)
   2e08a:	4018      	ands	r0, r3
            if ((pNcCfg->ui32StartAddr & ~CACHECTRL_NCR0START_ADDR_Msk) ||
   2e08c:	2800      	cmp	r0, #0
   2e08e:	d13a      	bne.n	2e106 <am_hal_cachectrl_control+0x1a6>
            if (pNcCfg->eNCRegion == AM_HAL_CACHECTRL_NCR0)
   2e090:	780b      	ldrb	r3, [r1, #0]
   2e092:	b94b      	cbnz	r3, 2e0a8 <am_hal_cachectrl_control+0x148>
                CACHECTRL->NCR0START = pNcCfg->ui32StartAddr;
   2e094:	4b1e      	ldr	r3, [pc, #120]	; (2e110 <am_hal_cachectrl_control+0x1b0>)
   2e096:	611a      	str	r2, [r3, #16]
                CACHECTRL->NCR0END   = pNcCfg->ui32EndAddr;
   2e098:	688a      	ldr	r2, [r1, #8]
   2e09a:	615a      	str	r2, [r3, #20]
                CACHECTRL->CACHECFG_b.ENABLE_NC0 = pNcCfg->bEnable;
   2e09c:	7849      	ldrb	r1, [r1, #1]
   2e09e:	681a      	ldr	r2, [r3, #0]
   2e0a0:	f361 0282 	bfi	r2, r1, #2, #1
   2e0a4:	601a      	str	r2, [r3, #0]
   2e0a6:	e771      	b.n	2df8c <am_hal_cachectrl_control+0x2c>
            else if (pNcCfg->eNCRegion == AM_HAL_CACHECTRL_NCR1)
   2e0a8:	2b01      	cmp	r3, #1
   2e0aa:	d12e      	bne.n	2e10a <am_hal_cachectrl_control+0x1aa>
                CACHECTRL->NCR1START = pNcCfg->ui32StartAddr;
   2e0ac:	4b18      	ldr	r3, [pc, #96]	; (2e110 <am_hal_cachectrl_control+0x1b0>)
   2e0ae:	619a      	str	r2, [r3, #24]
                CACHECTRL->NCR1END   = pNcCfg->ui32EndAddr;
   2e0b0:	688a      	ldr	r2, [r1, #8]
   2e0b2:	61da      	str	r2, [r3, #28]
                CACHECTRL->CACHECFG_b.ENABLE_NC1 = pNcCfg->bEnable;
   2e0b4:	7849      	ldrb	r1, [r1, #1]
   2e0b6:	681a      	ldr	r2, [r3, #0]
   2e0b8:	f361 02c3 	bfi	r2, r1, #3, #1
   2e0bc:	601a      	str	r2, [r3, #0]
   2e0be:	e765      	b.n	2df8c <am_hal_cachectrl_control+0x2c>
            ui32SetMask = CACHECTRL_CTRL_FLASH1_SLM_DISABLE_Msk;
   2e0c0:	f44f 7300 	mov.w	r3, #512	; 0x200
   2e0c4:	e75f      	b.n	2df86 <am_hal_cachectrl_control+0x26>
            ui32SetMask = CACHECTRL_CTRL_FLASH1_SLM_ENABLE_Msk;
   2e0c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2e0ca:	e75c      	b.n	2df86 <am_hal_cachectrl_control+0x26>
            ui32SetMask = CACHECTRL_CTRL_FLASH0_SLM_DISABLE_Msk;
   2e0cc:	2320      	movs	r3, #32
   2e0ce:	e75a      	b.n	2df86 <am_hal_cachectrl_control+0x26>
            ui32SetMask = CACHECTRL_CTRL_FLASH0_SLM_ENABLE_Msk;
   2e0d0:	2340      	movs	r3, #64	; 0x40
   2e0d2:	e758      	b.n	2df86 <am_hal_cachectrl_control+0x26>
            ui32SetMask = CACHECTRL_CTRL_FLASH0_SLM_DISABLE_Msk     |
   2e0d4:	f44f 7308 	mov.w	r3, #544	; 0x220
   2e0d8:	e755      	b.n	2df86 <am_hal_cachectrl_control+0x26>
            ui32SetMask = CACHECTRL_CTRL_INVALIDATE_Msk;
   2e0da:	2301      	movs	r3, #1
   2e0dc:	e753      	b.n	2df86 <am_hal_cachectrl_control+0x26>
                ui32SetMask = CACHECTRL_CTRL_RESET_STAT_Msk;
   2e0de:	2006      	movs	r0, #6
   2e0e0:	e754      	b.n	2df8c <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_INVALID_OPERATION;
   2e0e2:	2007      	movs	r0, #7
   2e0e4:	e752      	b.n	2df8c <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_INVALID_ARG;
   2e0e6:	2006      	movs	r0, #6
   2e0e8:	e750      	b.n	2df8c <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_FAIL;
   2e0ea:	2001      	movs	r0, #1
   2e0ec:	e74e      	b.n	2df8c <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_INVALID_ARG;
   2e0ee:	2006      	movs	r0, #6
   2e0f0:	e74c      	b.n	2df8c <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_FAIL;
   2e0f2:	2001      	movs	r0, #1
   2e0f4:	e74a      	b.n	2df8c <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_INVALID_ARG;
   2e0f6:	2006      	movs	r0, #6
   2e0f8:	e748      	b.n	2df8c <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_FAIL;
   2e0fa:	2001      	movs	r0, #1
   2e0fc:	e746      	b.n	2df8c <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_INVALID_ARG;
   2e0fe:	2006      	movs	r0, #6
   2e100:	e744      	b.n	2df8c <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_INVALID_ARG;
   2e102:	2006      	movs	r0, #6
   2e104:	e742      	b.n	2df8c <am_hal_cachectrl_control+0x2c>
   2e106:	2006      	movs	r0, #6
   2e108:	e740      	b.n	2df8c <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_INVALID_ARG;
   2e10a:	2006      	movs	r0, #6
   2e10c:	e73e      	b.n	2df8c <am_hal_cachectrl_control+0x2c>
   2e10e:	bf00      	nop
   2e110:	40018000 	.word	0x40018000
   2e114:	f800000f 	.word	0xf800000f

0002e118 <ctimer_clr>:
// the CLR bit at that time.
//
//*****************************************************************************
static void
ctimer_clr(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   2e118:	b570      	push	{r4, r5, r6, lr}
   2e11a:	b082      	sub	sp, #8
   2e11c:	460c      	mov	r4, r1
    //
    // Find the address of the correct control register and set the CLR bit
    // for the timer segment in that control register.
    //
    volatile uint32_t *pui32ConfigReg =
        (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   2e11e:	0145      	lsls	r5, r0, #5
   2e120:	4e06      	ldr	r6, [pc, #24]	; (2e13c <ctimer_clr+0x24>)

    AM_CRITICAL_BEGIN
   2e122:	f7ff f9a5 	bl	2d470 <am_hal_interrupt_master_disable>
   2e126:	9001      	str	r0, [sp, #4]
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
   2e128:	59a9      	ldr	r1, [r5, r6]
   2e12a:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
   2e12e:	430c      	orrs	r4, r1
   2e130:	51ac      	str	r4, [r5, r6]
                                  (CTIMER_CTRL0_TMRA0CLR_Msk |
                                   CTIMER_CTRL0_TMRB0CLR_Msk));
    AM_CRITICAL_END
   2e132:	9801      	ldr	r0, [sp, #4]
   2e134:	f7ff f9a0 	bl	2d478 <am_hal_interrupt_master_set>

} // ctimer_clr()
   2e138:	b002      	add	sp, #8
   2e13a:	bd70      	pop	{r4, r5, r6, pc}
   2e13c:	4000800c 	.word	0x4000800c

0002e140 <am_hal_ctimer_config_single>:
//*****************************************************************************
void
am_hal_ctimer_config_single(uint32_t ui32TimerNumber,
                            uint32_t ui32TimerSegment,
                            uint32_t ui32ConfigVal)
{
   2e140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e144:	b082      	sub	sp, #8
   2e146:	4606      	mov	r6, r0
   2e148:	460c      	mov	r4, r1
   2e14a:	4615      	mov	r5, r2

    //
    // Make sure the timer is completely initialized on configuration by
    // setting the CLR bit.
    //
    ctimer_clr(ui32TimerNumber, ui32TimerSegment);
   2e14c:	f7ff ffe4 	bl	2e118 <ctimer_clr>

    //
    // Find the correct register to write based on the timer number.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   2e150:	ea4f 1846 	mov.w	r8, r6, lsl #5
   2e154:	4f18      	ldr	r7, [pc, #96]	; (2e1b8 <am_hal_ctimer_config_single+0x78>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
   2e156:	f7ff f98b 	bl	2d470 <am_hal_interrupt_master_disable>
   2e15a:	9001      	str	r0, [sp, #4]
    uint32_t ui32WriteVal;

    //
    // Save the value that's already in the register.
    //
    ui32WriteVal = AM_REGVAL(pui32ConfigReg);
   2e15c:	f858 3007 	ldr.w	r3, [r8, r7]

    //
    // If we're working with TIMERB, we need to shift our configuration value
    // up by 16 bits.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   2e160:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   2e164:	d017      	beq.n	2e196 <am_hal_ctimer_config_single+0x56>

    //
    // Replace part of the saved register value with the configuration value
    // from the caller.
    //
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
   2e166:	ea23 0304 	bic.w	r3, r3, r4
   2e16a:	432b      	orrs	r3, r5

    //
    // If we're configuring both timers, we need to set the "link" bit.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_BOTH )
   2e16c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   2e170:	d013      	beq.n	2e19a <am_hal_ctimer_config_single+0x5a>
    }

    //
    // Write our completed configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
   2e172:	f848 3007 	str.w	r3, [r8, r7]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2e176:	9801      	ldr	r0, [sp, #4]
   2e178:	f7ff f97e 	bl	2d478 <am_hal_interrupt_master_set>

    //
    // Save the clock source for this timer.
    //
    switch ( ui32TimerSegment )
   2e17c:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   2e180:	d010      	beq.n	2e1a4 <am_hal_ctimer_config_single+0x64>
   2e182:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   2e186:	d015      	beq.n	2e1b4 <am_hal_ctimer_config_single+0x74>
   2e188:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2e18c:	429c      	cmp	r4, r3
   2e18e:	d007      	beq.n	2e1a0 <am_hal_ctimer_config_single+0x60>
    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;

} // am_hal_ctimer_config_single()
   2e190:	b002      	add	sp, #8
   2e192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ui32ConfigVal = ((ui32ConfigVal & 0xFFFF) << 16);
   2e196:	042d      	lsls	r5, r5, #16
   2e198:	e7e5      	b.n	2e166 <am_hal_ctimer_config_single+0x26>
        ui32WriteVal |= AM_HAL_CTIMER_LINK;
   2e19a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2e19e:	e7e8      	b.n	2e172 <am_hal_ctimer_config_single+0x32>
    switch ( ui32TimerSegment )
   2e1a0:	2300      	movs	r3, #0
   2e1a2:	e000      	b.n	2e1a6 <am_hal_ctimer_config_single+0x66>
            ui32Seg = 1;
   2e1a4:	2301      	movs	r3, #1
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;
   2e1a6:	f3c5 0544 	ubfx	r5, r5, #1, #5
   2e1aa:	4804      	ldr	r0, [pc, #16]	; (2e1bc <am_hal_ctimer_config_single+0x7c>)
   2e1ac:	eb00 0646 	add.w	r6, r0, r6, lsl #1
   2e1b0:	54f5      	strb	r5, [r6, r3]
   2e1b2:	e7ed      	b.n	2e190 <am_hal_ctimer_config_single+0x50>
    switch ( ui32TimerSegment )
   2e1b4:	2300      	movs	r3, #0
   2e1b6:	e7f6      	b.n	2e1a6 <am_hal_ctimer_config_single+0x66>
   2e1b8:	4000800c 	.word	0x4000800c
   2e1bc:	10001e48 	.word	0x10001e48

0002e1c0 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   2e1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e1c2:	b083      	sub	sp, #12
   2e1c4:	4605      	mov	r5, r0
   2e1c6:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   2e1c8:	0147      	lsls	r7, r0, #5
   2e1ca:	4e10      	ldr	r6, [pc, #64]	; (2e20c <am_hal_ctimer_start+0x4c>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
   2e1cc:	f7ff f950 	bl	2d470 <am_hal_interrupt_master_disable>
   2e1d0:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    uint32_t ui32ConfigVal = *pui32ConfigReg;
   2e1d2:	59bb      	ldr	r3, [r7, r6]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (CTIMER_CTRL0_TMRA0CLR_Msk |
   2e1d4:	f004 2208 	and.w	r2, r4, #134219776	; 0x8000800
   2e1d8:	ea23 0202 	bic.w	r2, r3, r2
                                           CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (CTIMER_CTRL0_TMRA0EN_Msk |
   2e1dc:	f004 1301 	and.w	r3, r4, #65537	; 0x10001
   2e1e0:	4313      	orrs	r3, r2
                                          CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // While we already have the CTRL reg, get and save the CLKSRC.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   2e1e2:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   2e1e6:	d00c      	beq.n	2e202 <am_hal_ctimer_start+0x42>
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
    }
    else
    {
        ui32Seg = 0;
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32ConfigVal);
   2e1e8:	f3c3 0144 	ubfx	r1, r3, #1, #5
        ui32Seg = 0;
   2e1ec:	2200      	movs	r2, #0
    }

    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui32ClkSrc;
   2e1ee:	4808      	ldr	r0, [pc, #32]	; (2e210 <am_hal_ctimer_start+0x50>)
   2e1f0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
   2e1f4:	54a9      	strb	r1, [r5, r2]

    //
    // Write the configuration to start the timer.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
   2e1f6:	51bb      	str	r3, [r7, r6]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2e1f8:	9801      	ldr	r0, [sp, #4]
   2e1fa:	f7ff f93d 	bl	2d478 <am_hal_interrupt_master_set>

} // am_hal_ctimer_start()
   2e1fe:	b003      	add	sp, #12
   2e200:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
   2e202:	f3c3 4144 	ubfx	r1, r3, #17, #5
        ui32Seg = 1;
   2e206:	2201      	movs	r2, #1
   2e208:	e7f1      	b.n	2e1ee <am_hal_ctimer_start+0x2e>
   2e20a:	bf00      	nop
   2e20c:	4000800c 	.word	0x4000800c
   2e210:	10001e48 	.word	0x10001e48

0002e214 <am_hal_ctimer_stop>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_stop(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   2e214:	b570      	push	{r4, r5, r6, lr}
   2e216:	b082      	sub	sp, #8
   2e218:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   2e21a:	0145      	lsls	r5, r0, #5
   2e21c:	4e07      	ldr	r6, [pc, #28]	; (2e23c <am_hal_ctimer_stop+0x28>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   2e21e:	f7ff f927 	bl	2d470 <am_hal_interrupt_master_disable>
   2e222:	9001      	str	r0, [sp, #4]

    //
    // Clear the "enable" bit
    //
    AM_REGVAL(pui32ConfigReg) &= ~(ui32TimerSegment &
   2e224:	59a9      	ldr	r1, [r5, r6]
   2e226:	f004 1401 	and.w	r4, r4, #65537	; 0x10001
   2e22a:	ea21 0404 	bic.w	r4, r1, r4
   2e22e:	51ac      	str	r4, [r5, r6]
                                    CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2e230:	9801      	ldr	r0, [sp, #4]
   2e232:	f7ff f921 	bl	2d478 <am_hal_interrupt_master_set>

} // am_hal_ctimer_stop()
   2e236:	b002      	add	sp, #8
   2e238:	bd70      	pop	{r4, r5, r6, pc}
   2e23a:	bf00      	nop
   2e23c:	4000800c 	.word	0x4000800c

0002e240 <am_hal_ctimer_clear>:
//!
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   2e240:	b570      	push	{r4, r5, r6, lr}
   2e242:	b082      	sub	sp, #8
   2e244:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   2e246:	0145      	lsls	r5, r0, #5
   2e248:	4e06      	ldr	r6, [pc, #24]	; (2e264 <am_hal_ctimer_clear+0x24>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   2e24a:	f7ff f911 	bl	2d470 <am_hal_interrupt_master_disable>
   2e24e:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
   2e250:	59a9      	ldr	r1, [r5, r6]
   2e252:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
   2e256:	430c      	orrs	r4, r1
   2e258:	51ac      	str	r4, [r5, r6]
                                   CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2e25a:	9801      	ldr	r0, [sp, #4]
   2e25c:	f7ff f90c 	bl	2d478 <am_hal_interrupt_master_set>

} // am_hal_ctimer_clear()
   2e260:	b002      	add	sp, #8
   2e262:	bd70      	pop	{r4, r5, r6, pc}
   2e264:	4000800c 	.word	0x4000800c

0002e268 <am_hal_ctimer_read>:
//! @return Current timer value.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_read(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   2e268:	b530      	push	{r4, r5, lr}
   2e26a:	b085      	sub	sp, #20
   2e26c:	4602      	mov	r2, r0
   2e26e:	460c      	mov	r4, r1
    uint32_t ui32Values[3];

    //
    // Determine the timer segment.
    //
    ui32Seg = ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB ) ? 1 : 0;
   2e270:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
   2e274:	bf14      	ite	ne
   2e276:	2100      	movne	r1, #0
   2e278:	2101      	moveq	r1, #1

    //
    // Get the address of the register for this timer.
    //
    ui32TmrAddr = g_ui32TMRAddrTbl[ui32TimerNumber];
   2e27a:	4b1c      	ldr	r3, [pc, #112]	; (2e2ec <am_hal_ctimer_read+0x84>)
   2e27c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

    //
    // Get the clock source for this timer.
    //
    ui8ClkSrc = g_ui8ClkSrc[ui32TimerNumber][ui32Seg];
   2e280:	4b1b      	ldr	r3, [pc, #108]	; (2e2f0 <am_hal_ctimer_read+0x88>)
   2e282:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   2e286:	5c5b      	ldrb	r3, [r3, r1]

    if ( ui8ClkSrc == 0xFF )
   2e288:	2bff      	cmp	r3, #255	; 0xff
   2e28a:	d018      	beq.n	2e2be <am_hal_ctimer_read+0x56>
    }

    //
    // Based on the source clock, mask off bits not needed for the comparison.
    //
    ui32ClkMsk = g_ui8TmrClkSrcMask[ui8ClkSrc & _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, 0xFFFFFFFF)];
   2e28c:	f003 031f 	and.w	r3, r3, #31
   2e290:	4a18      	ldr	r2, [pc, #96]	; (2e2f4 <am_hal_ctimer_read+0x8c>)
   2e292:	5cd3      	ldrb	r3, [r2, r3]

    if ( ui32ClkMsk != 0 )
   2e294:	b30b      	cbz	r3, 2e2da <am_hal_ctimer_read+0x72>
    {
        if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
   2e296:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   2e29a:	6b52      	ldr	r2, [r2, #52]	; 0x34
   2e29c:	f012 0f04 	tst.w	r2, #4
   2e2a0:	d002      	beq.n	2e2a8 <am_hal_ctimer_read+0x40>
        {
            //
            // In burst mode, extend the mask by 1 bit.
            //
            ui32ClkMsk <<= 1;
   2e2a2:	005b      	lsls	r3, r3, #1
            ui32ClkMsk |= 0x1;
   2e2a4:	f043 0301 	orr.w	r3, r3, #1
        }

        //
        // Invert the mask so that the unneeded bits can be masked off.
        //
        ui32ClkMsk = ~ui32ClkMsk;
   2e2a8:	43dd      	mvns	r5, r3

        //
        // Read the register into ui32Values[].
        //
        am_hal_triple_read(ui32TmrAddr, ui32Values);
   2e2aa:	a901      	add	r1, sp, #4
   2e2ac:	f000 f8d0 	bl	2e450 <am_hal_triple_read>
        //
        // Now determine which of the three values is the correct value.
        // If the first 2 match, then the values are both correct and we're done.
        // Otherwise, the third value is taken to be the correct value.
        //
        if ( (ui32Values[0] & ui32ClkMsk)  == (ui32Values[1] & ui32ClkMsk) )
   2e2b0:	9802      	ldr	r0, [sp, #8]
   2e2b2:	9b01      	ldr	r3, [sp, #4]
   2e2b4:	4043      	eors	r3, r0
   2e2b6:	422b      	tst	r3, r5
   2e2b8:	d010      	beq.n	2e2dc <am_hal_ctimer_read+0x74>
            //
            ui32RetVal = ui32Values[1];
        }
        else
        {
            ui32RetVal = ui32Values[2];
   2e2ba:	9803      	ldr	r0, [sp, #12]
   2e2bc:	e00e      	b.n	2e2dc <am_hal_ctimer_read+0x74>
        ui32Ctrl = AM_REGVAL(ui32TmrAddr + 0xC);
   2e2be:	68c3      	ldr	r3, [r0, #12]
        if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   2e2c0:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   2e2c4:	d006      	beq.n	2e2d4 <am_hal_ctimer_read+0x6c>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32Ctrl);
   2e2c6:	f3c3 0344 	ubfx	r3, r3, #1, #5
        g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui8ClkSrc;
   2e2ca:	4d09      	ldr	r5, [pc, #36]	; (2e2f0 <am_hal_ctimer_read+0x88>)
   2e2cc:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   2e2d0:	5453      	strb	r3, [r2, r1]
   2e2d2:	e7db      	b.n	2e28c <am_hal_ctimer_read+0x24>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32Ctrl);
   2e2d4:	f3c3 4344 	ubfx	r3, r3, #17, #5
   2e2d8:	e7f7      	b.n	2e2ca <am_hal_ctimer_read+0x62>
    else
    {
        //
        // No need for the workaround.  Just read and return the register.
        //
        ui32RetVal = AM_REGVAL(ui32TmrAddr);
   2e2da:	6800      	ldr	r0, [r0, #0]
    }

    //
    // Get the correct return value
    //
    ui32RetVal &= ui32TimerSegment;
   2e2dc:	4020      	ands	r0, r4

    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   2e2de:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   2e2e2:	d001      	beq.n	2e2e8 <am_hal_ctimer_read+0x80>
        ui32RetVal >>= 16;
    }

    return ui32RetVal;

} // am_hal_ctimer_read()
   2e2e4:	b005      	add	sp, #20
   2e2e6:	bd30      	pop	{r4, r5, pc}
        ui32RetVal >>= 16;
   2e2e8:	0c00      	lsrs	r0, r0, #16
    return ui32RetVal;
   2e2ea:	e7fb      	b.n	2e2e4 <am_hal_ctimer_read+0x7c>
   2e2ec:	000374bc 	.word	0x000374bc
   2e2f0:	10001e48 	.word	0x10001e48
   2e2f4:	000374dc 	.word	0x000374dc

0002e2f8 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
   2e2f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2e2fc:	b083      	sub	sp, #12
   2e2fe:	460d      	mov	r5, r1
   2e300:	4614      	mov	r4, r2
   2e302:	461f      	mov	r7, r3

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   2e304:	0146      	lsls	r6, r0, #5

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRA0);
   2e306:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2e384 <am_hal_ctimer_period_set+0x8c>

    pui32CompareRegB = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRB0);
   2e30a:	f8df 907c 	ldr.w	r9, [pc, #124]	; 2e388 <am_hal_ctimer_period_set+0x90>

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   2e30e:	f7ff f8af 	bl	2d470 <am_hal_interrupt_master_disable>
   2e312:	9001      	str	r0, [sp, #4]

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
   2e314:	4b1a      	ldr	r3, [pc, #104]	; (2e380 <am_hal_ctimer_period_set+0x88>)
   2e316:	58f2      	ldr	r2, [r6, r3]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   2e318:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
   2e31c:	d007      	beq.n	2e32e <am_hal_ctimer_period_set+0x36>
    }

    //
    // Mask to get to the bits we're interested in.
    //
    ui32Mode = ui32Mode & CTIMER_CTRL0_TMRA0FN_Msk;
   2e31e:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
   2e322:	2a80      	cmp	r2, #128	; 0x80
   2e324:	d005      	beq.n	2e332 <am_hal_ctimer_period_set+0x3a>
   2e326:	2ac0      	cmp	r2, #192	; 0xc0
   2e328:	d003      	beq.n	2e332 <am_hal_ctimer_period_set+0x3a>
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
   2e32a:	2300      	movs	r3, #0
   2e32c:	e003      	b.n	2e336 <am_hal_ctimer_period_set+0x3e>
        ui32Mode = ui32Mode >> 16;
   2e32e:	0c12      	lsrs	r2, r2, #16
   2e330:	e7f5      	b.n	2e31e <am_hal_ctimer_period_set+0x26>
        ui32Comp1 = ui32Period;
   2e332:	4623      	mov	r3, r4
        ui32Comp0 = ui32Period - ui32OnTime;
   2e334:	1be4      	subs	r4, r4, r7

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
   2e336:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2e33a:	4295      	cmp	r5, r2
   2e33c:	d013      	beq.n	2e366 <am_hal_ctimer_period_set+0x6e>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   2e33e:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
   2e342:	d016      	beq.n	2e372 <am_hal_ctimer_period_set+0x7a>
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   2e344:	b2a2      	uxth	r2, r4
   2e346:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2e34a:	f846 2008 	str.w	r2, [r6, r8]
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));

        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1 >> 16));
   2e34e:	0c1b      	lsrs	r3, r3, #16
   2e350:	041b      	lsls	r3, r3, #16
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
   2e352:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
   2e356:	f846 3009 	str.w	r3, [r6, r9]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2e35a:	9801      	ldr	r0, [sp, #4]
   2e35c:	f7ff f88c 	bl	2d478 <am_hal_interrupt_master_set>

} // am_hal_ctimer_period_set()
   2e360:	b003      	add	sp, #12
   2e362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   2e366:	b2a4      	uxth	r4, r4
   2e368:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   2e36c:	f846 3008 	str.w	r3, [r6, r8]
   2e370:	e7f3      	b.n	2e35a <am_hal_ctimer_period_set+0x62>
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   2e372:	b2a4      	uxth	r4, r4
   2e374:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   2e378:	f846 3009 	str.w	r3, [r6, r9]
   2e37c:	e7ed      	b.n	2e35a <am_hal_ctimer_period_set+0x62>
   2e37e:	bf00      	nop
   2e380:	4000800c 	.word	0x4000800c
   2e384:	40008004 	.word	0x40008004
   2e388:	40008008 	.word	0x40008008

0002e38c <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
   2e38c:	b510      	push	{r4, lr}
   2e38e:	b082      	sub	sp, #8
   2e390:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   2e392:	f7ff f86d 	bl	2d470 <am_hal_interrupt_master_disable>
   2e396:	9001      	str	r0, [sp, #4]

    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN |= ui32Interrupt;
   2e398:	4a05      	ldr	r2, [pc, #20]	; (2e3b0 <am_hal_ctimer_int_enable+0x24>)
   2e39a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   2e39e:	4323      	orrs	r3, r4
   2e3a0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2e3a4:	9801      	ldr	r0, [sp, #4]
   2e3a6:	f7ff f867 	bl	2d478 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_enable()
   2e3aa:	b002      	add	sp, #8
   2e3ac:	bd10      	pop	{r4, pc}
   2e3ae:	bf00      	nop
   2e3b0:	40008000 	.word	0x40008000

0002e3b4 <am_hal_ctimer_int_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_disable(uint32_t ui32Interrupt)
{
   2e3b4:	b510      	push	{r4, lr}
   2e3b6:	b082      	sub	sp, #8
   2e3b8:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   2e3ba:	f7ff f859 	bl	2d470 <am_hal_interrupt_master_disable>
   2e3be:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN &= ~ui32Interrupt;
   2e3c0:	4a05      	ldr	r2, [pc, #20]	; (2e3d8 <am_hal_ctimer_int_disable+0x24>)
   2e3c2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   2e3c6:	ea23 0304 	bic.w	r3, r3, r4
   2e3ca:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2e3ce:	9801      	ldr	r0, [sp, #4]
   2e3d0:	f7ff f852 	bl	2d478 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_disable()
   2e3d4:	b002      	add	sp, #8
   2e3d6:	bd10      	pop	{r4, pc}
   2e3d8:	40008000 	.word	0x40008000

0002e3dc <am_hal_ctimer_int_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
   2e3dc:	b510      	push	{r4, lr}
   2e3de:	b082      	sub	sp, #8
   2e3e0:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   2e3e2:	f7ff f845 	bl	2d470 <am_hal_interrupt_master_disable>
   2e3e6:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTCLR = ui32Interrupt;
   2e3e8:	4b03      	ldr	r3, [pc, #12]	; (2e3f8 <am_hal_ctimer_int_clear+0x1c>)
   2e3ea:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2e3ee:	9801      	ldr	r0, [sp, #4]
   2e3f0:	f7ff f842 	bl	2d478 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_clear()
   2e3f4:	b002      	add	sp, #8
   2e3f6:	bd10      	pop	{r4, pc}
   2e3f8:	40008000 	.word	0x40008000

0002e3fc <am_hal_ctimer_int_set>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_set(uint32_t ui32Interrupt)
{
   2e3fc:	b510      	push	{r4, lr}
   2e3fe:	b082      	sub	sp, #8
   2e400:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   2e402:	f7ff f835 	bl	2d470 <am_hal_interrupt_master_disable>
   2e406:	9001      	str	r0, [sp, #4]

    //
    // Set the interrupts.
    //
    CTIMERn(0)->INTSET = ui32Interrupt;
   2e408:	4b03      	ldr	r3, [pc, #12]	; (2e418 <am_hal_ctimer_int_set+0x1c>)
   2e40a:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2e40e:	9801      	ldr	r0, [sp, #4]
   2e410:	f7ff f832 	bl	2d478 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_set()
   2e414:	b002      	add	sp, #8
   2e416:	bd10      	pop	{r4, pc}
   2e418:	40008000 	.word	0x40008000

0002e41c <am_hal_ctimer_int_status_get>:
//! @return ui32RetVal either the timer interrupt status, or interrupt enabled.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_int_status_get(bool bEnabledOnly)
{
   2e41c:	b510      	push	{r4, lr}
   2e41e:	b082      	sub	sp, #8
   2e420:	4604      	mov	r4, r0
    uint32_t ui32RetVal = 0;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   2e422:	f7ff f825 	bl	2d470 <am_hal_interrupt_master_disable>
   2e426:	9001      	str	r0, [sp, #4]

    //
    // Return the desired status.
    //

    if ( bEnabledOnly )
   2e428:	b15c      	cbz	r4, 2e442 <am_hal_ctimer_int_status_get+0x26>
    {
        ui32RetVal  = CTIMERn(0)->INTSTAT;
   2e42a:	4b08      	ldr	r3, [pc, #32]	; (2e44c <am_hal_ctimer_int_status_get+0x30>)
   2e42c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
        ui32RetVal &= CTIMERn(0)->INTEN;
   2e430:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   2e434:	401c      	ands	r4, r3
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2e436:	9801      	ldr	r0, [sp, #4]
   2e438:	f7ff f81e 	bl	2d478 <am_hal_interrupt_master_set>

    return ui32RetVal;

} // am_hal_ctimer_int_status_get()
   2e43c:	4620      	mov	r0, r4
   2e43e:	b002      	add	sp, #8
   2e440:	bd10      	pop	{r4, pc}
        ui32RetVal = CTIMERn(0)->INTSTAT;
   2e442:	4b02      	ldr	r3, [pc, #8]	; (2e44c <am_hal_ctimer_int_status_get+0x30>)
   2e444:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   2e448:	e7f5      	b.n	2e436 <am_hal_ctimer_int_status_get+0x1a>
   2e44a:	bf00      	nop
   2e44c:	40008000 	.word	0x40008000

0002e450 <am_hal_triple_read>:
#elif defined(__GNUC_STDC_INLINE__)
__attribute__((naked))
void
am_hal_triple_read(uint32_t ui32TimerAddr, uint32_t ui32Data[])
{
    __asm
   2e450:	b412      	push	{r1, r4}
   2e452:	f3ef 8410 	mrs	r4, PRIMASK
   2e456:	b672      	cpsid	i
   2e458:	6801      	ldr	r1, [r0, #0]
   2e45a:	6802      	ldr	r2, [r0, #0]
   2e45c:	6803      	ldr	r3, [r0, #0]
   2e45e:	f384 8810 	msr	PRIMASK, r4
   2e462:	bc11      	pop	{r0, r4}
   2e464:	6001      	str	r1, [r0, #0]
   2e466:	6042      	str	r2, [r0, #4]
   2e468:	6083      	str	r3, [r0, #8]
   2e46a:	4770      	bx	lr

0002e46c <pincfg_equ>:

    //
    // We're assuming that am_hal_gpio_pincfg_t boils down to a uint32_t,
    // which is its intent.
    //
    ui32A = *((uint32_t*)cfg1);
   2e46c:	6800      	ldr	r0, [r0, #0]
    ui32B = *((uint32_t*)cfg2);
   2e46e:	680b      	ldr	r3, [r1, #0]

    return ui32A == ui32B ? true : false;

} // pincfg_equ()
   2e470:	4298      	cmp	r0, r3
   2e472:	bf14      	ite	ne
   2e474:	2000      	movne	r0, #0
   2e476:	2001      	moveq	r0, #1
   2e478:	4770      	bx	lr
	...

0002e47c <am_hal_gpio_pinconfig>:
//
//*****************************************************************************
uint32_t
am_hal_gpio_pinconfig(uint32_t ui32Pin, am_hal_gpio_pincfg_t bfGpioCfg)

{
   2e47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e480:	b087      	sub	sp, #28
   2e482:	9103      	str	r1, [sp, #12]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
   2e484:	2831      	cmp	r0, #49	; 0x31
   2e486:	f200 8102 	bhi.w	2e68e <am_hal_gpio_pinconfig+0x212>
   2e48a:	4604      	mov	r4, r0
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
   2e48c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2e490:	f003 0107 	and.w	r1, r3, #7
    ui32PowerSw = bfGpioCfg.ePowerSw;
   2e494:	f3c3 05c1 	ubfx	r5, r3, #3, #2

    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
   2e498:	00ca      	lsls	r2, r1, #3

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
   2e49a:	f013 03e0 	ands.w	r3, r3, #224	; 0xe0
   2e49e:	d013      	beq.n	2e4c8 <am_hal_gpio_pinconfig+0x4c>
    {
        //
        // This setting is needed for all pullup settings including
        // AM_HAL_GPIO_PIN_PULLUP_WEAK and AM_HAL_GPIO_PIN_PULLDOWN.
        //
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
   2e4a0:	f042 0201 	orr.w	r2, r2, #1

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
   2e4a4:	f89d 000c 	ldrb.w	r0, [sp, #12]
   2e4a8:	0940      	lsrs	r0, r0, #5
   2e4aa:	1d86      	adds	r6, r0, #6
   2e4ac:	f006 0607 	and.w	r6, r6, #7
   2e4b0:	2e03      	cmp	r6, #3
   2e4b2:	f200 80a2 	bhi.w	2e5fa <am_hal_gpio_pinconfig+0x17e>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
   2e4b6:	3802      	subs	r0, #2
   2e4b8:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
                           PADREG_FLD_76_S);
#ifndef AM_HAL_DISABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
   2e4bc:	4b7a      	ldr	r3, [pc, #488]	; (2e6a8 <am_hal_gpio_pinconfig+0x22c>)
   2e4be:	5d1b      	ldrb	r3, [r3, r4]
   2e4c0:	f013 0f01 	tst.w	r3, #1
   2e4c4:	f000 80e5 	beq.w	2e692 <am_hal_gpio_pinconfig+0x216>
    }

    //
    // Check if requesting a power switch pin
    //
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
   2e4c8:	b16d      	cbz	r5, 2e4e6 <am_hal_gpio_pinconfig+0x6a>
    {
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
   2e4ca:	2d01      	cmp	r5, #1
   2e4cc:	f000 80a4 	beq.w	2e618 <am_hal_gpio_pinconfig+0x19c>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
        {
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
        }
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
   2e4d0:	2d02      	cmp	r5, #2
   2e4d2:	f040 80e0 	bne.w	2e696 <am_hal_gpio_pinconfig+0x21a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
   2e4d6:	4b74      	ldr	r3, [pc, #464]	; (2e6a8 <am_hal_gpio_pinconfig+0x22c>)
   2e4d8:	5d1b      	ldrb	r3, [r3, r4]
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
   2e4da:	f013 0f04 	tst.w	r3, #4
   2e4de:	f000 80dc 	beq.w	2e69a <am_hal_gpio_pinconfig+0x21e>
        {
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
   2e4e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    }

    //
    // Depending on the selected pin and FNSEL, determine if INPEN needs to be set.
    //
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
   2e4e6:	4b71      	ldr	r3, [pc, #452]	; (2e6ac <am_hal_gpio_pinconfig+0x230>)
   2e4e8:	5d1d      	ldrb	r5, [r3, r4]
   2e4ea:	410d      	asrs	r5, r1
   2e4ec:	006d      	lsls	r5, r5, #1
   2e4ee:	f005 0502 	and.w	r5, r5, #2
   2e4f2:	4315      	orrs	r5, r2

    //
    // Configure ui32GpCfg based on whether nCE requested.
    //
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
   2e4f4:	4b6e      	ldr	r3, [pc, #440]	; (2e6b0 <am_hal_gpio_pinconfig+0x234>)
   2e4f6:	5d1b      	ldrb	r3, [r3, r4]
   2e4f8:	428b      	cmp	r3, r1
   2e4fa:	f000 8096 	beq.w	2e62a <am_hal_gpio_pinconfig+0x1ae>
    {
        //
        // It's not nCE, it's one of the other funcsels.
        // Start by setting the value of the requested GPIO input.
        //
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
   2e4fe:	f89d 700d 	ldrb.w	r7, [sp, #13]
   2e502:	f3c7 1300 	ubfx	r3, r7, #4, #1
   2e506:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
        //  GPIOCFG register field, which is a 4-bit field:
        //  [INTD(1):OUTCFG(2):INCFG(1)].
        // Bit0 of eIntDir maps to GPIOCFG.INTD  (b3).
        // Bit1 of eIntDir maps to GPIOCFG.INCFG (b0).
        //
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
   2e50a:	f3c7 0281 	ubfx	r2, r7, #2, #2
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
   2e50e:	f3c7 1341 	ubfx	r3, r7, #5, #2
   2e512:	00de      	lsls	r6, r3, #3
   2e514:	f006 0608 	and.w	r6, r6, #8
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
   2e518:	ea46 0642 	orr.w	r6, r6, r2, lsl #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
   2e51c:	ea46 0653 	orr.w	r6, r6, r3, lsr #1
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);

        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
   2e520:	f007 030c 	and.w	r3, r7, #12
   2e524:	2b04      	cmp	r3, #4
   2e526:	f000 80a5 	beq.w	2e674 <am_hal_gpio_pinconfig+0x1f8>
             pincfg_equ(&bfGpioCfg, (void*)&g_AM_HAL_GPIO_DISABLE) )
   2e52a:	4962      	ldr	r1, [pc, #392]	; (2e6b4 <am_hal_gpio_pinconfig+0x238>)
   2e52c:	a803      	add	r0, sp, #12
   2e52e:	f7ff ff9d 	bl	2e46c <pincfg_equ>
   2e532:	9002      	str	r0, [sp, #8]
        //  use when GPIO interrupts are not in use and can be used when no
        //  eIntDir setting is provided.
        // If eIntDir is provided, eGPRdZero is ignored and can only be
        //  achieved via the AM_HAL_GPIO_PIN_INTDIR_NONE setting.
        //
        if ( bfGpioCfg.eIntDir == 0 )
   2e534:	f017 0f60 	tst.w	r7, #96	; 0x60
   2e538:	d104      	bne.n	2e544 <am_hal_gpio_pinconfig+0xc8>
        {
            ui32GPCfg &= ~(1 << GPIOCFG_FLD_INCFG_S);
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
   2e53a:	f89d 300d 	ldrb.w	r3, [sp, #13]
   2e53e:	09db      	lsrs	r3, r3, #7
   2e540:	f363 0600 	bfi	r6, r3, #0, #1
        }
    }

    switch ( bfGpioCfg.eDriveStrength )
   2e544:	f89d 300d 	ldrb.w	r3, [sp, #13]
   2e548:	f003 0303 	and.w	r3, r3, #3
   2e54c:	2b02      	cmp	r3, #2
   2e54e:	f000 809c 	beq.w	2e68a <am_hal_gpio_pinconfig+0x20e>
   2e552:	2b03      	cmp	r3, #3
   2e554:	f000 8095 	beq.w	2e682 <am_hal_gpio_pinconfig+0x206>
   2e558:	2b01      	cmp	r3, #1
   2e55a:	f000 808e 	beq.w	2e67a <am_hal_gpio_pinconfig+0x1fe>
   2e55e:	2000      	movs	r0, #0
    //
    uint32_t ui32GPCfgAddr, ui32PadregAddr, ui32AltpadAddr;
    uint32_t ui32GPCfgClearMask, ui32PadClearMask;
    uint32_t ui32GPCfgShft, ui32PadShft;

    ui32GPCfgAddr       = AM_REGADDR(GPIO, CFGA)       + ((ui32Pin >> 1) & ~0x3);
   2e560:	ea4f 0854 	mov.w	r8, r4, lsr #1
   2e564:	f028 0803 	bic.w	r8, r8, #3
   2e568:	f8df b170 	ldr.w	fp, [pc, #368]	; 2e6dc <am_hal_gpio_pinconfig+0x260>
    ui32PadregAddr      = AM_REGADDR(GPIO, PADREGA)    + (ui32Pin & ~0x3);
   2e56c:	f024 0a03 	bic.w	sl, r4, #3
   2e570:	f10a 4980 	add.w	r9, sl, #1073741824	; 0x40000000
   2e574:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    ui32AltpadAddr      = AM_REGADDR(GPIO, ALTPADCFGA) + (ui32Pin & ~0x3);

    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
   2e578:	00a2      	lsls	r2, r4, #2
   2e57a:	f002 021c 	and.w	r2, r2, #28
    ui32PadShft         = ((ui32Pin & 0x3) << 3);
   2e57e:	00e3      	lsls	r3, r4, #3
   2e580:	f003 0318 	and.w	r3, r3, #24
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
   2e584:	210f      	movs	r1, #15
   2e586:	4091      	lsls	r1, r2
   2e588:	43c9      	mvns	r1, r1
   2e58a:	9100      	str	r1, [sp, #0]
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
   2e58c:	27ff      	movs	r7, #255	; 0xff
   2e58e:	409f      	lsls	r7, r3
   2e590:	43ff      	mvns	r7, r7

    //
    // Get the new values into their rightful bit positions.
    //
    ui32Padreg    <<= ui32PadShft;
   2e592:	409d      	lsls	r5, r3
    ui32AltPadCfg <<= ui32PadShft;
   2e594:	fa00 f303 	lsl.w	r3, r0, r3
   2e598:	9301      	str	r3, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
   2e59a:	4096      	lsls	r6, r2

    AM_CRITICAL_BEGIN
   2e59c:	f7fe ff68 	bl	2d470 <am_hal_interrupt_master_disable>
   2e5a0:	9005      	str	r0, [sp, #20]

    if ( bClearEnable )
   2e5a2:	9b02      	ldr	r3, [sp, #8]
   2e5a4:	b143      	cbz	r3, 2e5b8 <am_hal_gpio_pinconfig+0x13c>
    {
        //
        // We're configuring a mode that requires clearing the Enable bit.
        //
        am_hal_gpio_output_tristate_disable(ui32Pin);
   2e5a6:	f004 021f 	and.w	r2, r4, #31
   2e5aa:	08e4      	lsrs	r4, r4, #3
   2e5ac:	f004 0404 	and.w	r4, r4, #4
   2e5b0:	2301      	movs	r3, #1
   2e5b2:	4093      	lsls	r3, r2
   2e5b4:	4a40      	ldr	r2, [pc, #256]	; (2e6b8 <am_hal_gpio_pinconfig+0x23c>)
   2e5b6:	50a3      	str	r3, [r4, r2]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
   2e5b8:	4a40      	ldr	r2, [pc, #256]	; (2e6bc <am_hal_gpio_pinconfig+0x240>)
   2e5ba:	2373      	movs	r3, #115	; 0x73
   2e5bc:	6613      	str	r3, [r2, #96]	; 0x60

    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
   2e5be:	f8d9 3000 	ldr.w	r3, [r9]
   2e5c2:	403b      	ands	r3, r7
   2e5c4:	431d      	orrs	r5, r3
   2e5c6:	f8c9 5000 	str.w	r5, [r9]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
   2e5ca:	f858 300b 	ldr.w	r3, [r8, fp]
   2e5ce:	9900      	ldr	r1, [sp, #0]
   2e5d0:	400b      	ands	r3, r1
   2e5d2:	431e      	orrs	r6, r3
   2e5d4:	f848 600b 	str.w	r6, [r8, fp]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
   2e5d8:	4939      	ldr	r1, [pc, #228]	; (2e6c0 <am_hal_gpio_pinconfig+0x244>)
   2e5da:	f85a 3001 	ldr.w	r3, [sl, r1]
   2e5de:	401f      	ands	r7, r3
   2e5e0:	9b01      	ldr	r3, [sp, #4]
   2e5e2:	431f      	orrs	r7, r3
   2e5e4:	f84a 7001 	str.w	r7, [sl, r1]

    GPIO->PADKEY = 0;
   2e5e8:	2400      	movs	r4, #0
   2e5ea:	6614      	str	r4, [r2, #96]	; 0x60

    AM_CRITICAL_END
   2e5ec:	9805      	ldr	r0, [sp, #20]
   2e5ee:	f7fe ff43 	bl	2d478 <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
   2e5f2:	4620      	mov	r0, r4

} // am_hal_gpio_pinconfig()
   2e5f4:	b007      	add	sp, #28
   2e5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
   2e5fa:	2bc0      	cmp	r3, #192	; 0xc0
   2e5fc:	d007      	beq.n	2e60e <am_hal_gpio_pinconfig+0x192>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
   2e5fe:	2b20      	cmp	r3, #32
   2e600:	f47f af62 	bne.w	2e4c8 <am_hal_gpio_pinconfig+0x4c>
            if ( ui32Pin == 20 )
   2e604:	2c14      	cmp	r4, #20
   2e606:	f47f af5f 	bne.w	2e4c8 <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLUP;
   2e60a:	482e      	ldr	r0, [pc, #184]	; (2e6c4 <am_hal_gpio_pinconfig+0x248>)
   2e60c:	e7f2      	b.n	2e5f4 <am_hal_gpio_pinconfig+0x178>
            if ( ui32Pin != 20 )
   2e60e:	2c14      	cmp	r4, #20
   2e610:	f43f af5a 	beq.w	2e4c8 <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLDOWN;
   2e614:	482c      	ldr	r0, [pc, #176]	; (2e6c8 <am_hal_gpio_pinconfig+0x24c>)
   2e616:	e7ed      	b.n	2e5f4 <am_hal_gpio_pinconfig+0x178>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
   2e618:	4b23      	ldr	r3, [pc, #140]	; (2e6a8 <am_hal_gpio_pinconfig+0x22c>)
   2e61a:	5d1b      	ldrb	r3, [r3, r4]
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
   2e61c:	f013 0f02 	tst.w	r3, #2
   2e620:	f43f af56 	beq.w	2e4d0 <am_hal_gpio_pinconfig+0x54>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
   2e624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   2e628:	e75d      	b.n	2e4e6 <am_hal_gpio_pinconfig+0x6a>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
   2e62a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   2e62e:	f003 0307 	and.w	r3, r3, #7
   2e632:	2b07      	cmp	r3, #7
   2e634:	d033      	beq.n	2e69e <am_hal_gpio_pinconfig+0x222>
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
   2e636:	f89d 300e 	ldrb.w	r3, [sp, #14]
   2e63a:	f003 0107 	and.w	r1, r3, #7
   2e63e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   2e642:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
   2e646:	2300      	movs	r3, #0
   2e648:	2b03      	cmp	r3, #3
   2e64a:	d807      	bhi.n	2e65c <am_hal_gpio_pinconfig+0x1e0>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
   2e64c:	4a1f      	ldr	r2, [pc, #124]	; (2e6cc <am_hal_gpio_pinconfig+0x250>)
   2e64e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
   2e652:	5cd2      	ldrb	r2, [r2, r3]
   2e654:	428a      	cmp	r2, r1
   2e656:	d001      	beq.n	2e65c <am_hal_gpio_pinconfig+0x1e0>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
   2e658:	3301      	adds	r3, #1
   2e65a:	e7f5      	b.n	2e648 <am_hal_gpio_pinconfig+0x1cc>
        if ( ui32Outcfg >= 4 )
   2e65c:	2b03      	cmp	r3, #3
   2e65e:	d820      	bhi.n	2e6a2 <am_hal_gpio_pinconfig+0x226>
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
   2e660:	f89d 600e 	ldrb.w	r6, [sp, #14]
   2e664:	f3c6 1640 	ubfx	r6, r6, #5, #1
   2e668:	00f6      	lsls	r6, r6, #3
   2e66a:	ea46 0643 	orr.w	r6, r6, r3, lsl #1
    bool bClearEnable = false;
   2e66e:	2300      	movs	r3, #0
   2e670:	9302      	str	r3, [sp, #8]
   2e672:	e767      	b.n	2e544 <am_hal_gpio_pinconfig+0xc8>
            bClearEnable = true;
   2e674:	2301      	movs	r3, #1
   2e676:	9302      	str	r3, [sp, #8]
   2e678:	e75c      	b.n	2e534 <am_hal_gpio_pinconfig+0xb8>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
   2e67a:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (0 << 0);
   2e67e:	2000      	movs	r0, #0
            break;
   2e680:	e76e      	b.n	2e560 <am_hal_gpio_pinconfig+0xe4>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
   2e682:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (1 << 0);
   2e686:	2001      	movs	r0, #1
            break;
   2e688:	e76a      	b.n	2e560 <am_hal_gpio_pinconfig+0xe4>
            ui32AltPadCfg |= (1 << 0);
   2e68a:	2001      	movs	r0, #1
   2e68c:	e768      	b.n	2e560 <am_hal_gpio_pinconfig+0xe4>
        return AM_HAL_STATUS_INVALID_ARG;
   2e68e:	2006      	movs	r0, #6
   2e690:	e7b0      	b.n	2e5f4 <am_hal_gpio_pinconfig+0x178>
                return AM_HAL_GPIO_ERR_PULLUP;
   2e692:	480c      	ldr	r0, [pc, #48]	; (2e6c4 <am_hal_gpio_pinconfig+0x248>)
   2e694:	e7ae      	b.n	2e5f4 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_PWRSW;
   2e696:	480e      	ldr	r0, [pc, #56]	; (2e6d0 <am_hal_gpio_pinconfig+0x254>)
   2e698:	e7ac      	b.n	2e5f4 <am_hal_gpio_pinconfig+0x178>
   2e69a:	480d      	ldr	r0, [pc, #52]	; (2e6d0 <am_hal_gpio_pinconfig+0x254>)
   2e69c:	e7aa      	b.n	2e5f4 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
   2e69e:	480d      	ldr	r0, [pc, #52]	; (2e6d4 <am_hal_gpio_pinconfig+0x258>)
   2e6a0:	e7a8      	b.n	2e5f4 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCEPIN;
   2e6a2:	480d      	ldr	r0, [pc, #52]	; (2e6d8 <am_hal_gpio_pinconfig+0x25c>)
   2e6a4:	e7a6      	b.n	2e5f4 <am_hal_gpio_pinconfig+0x178>
   2e6a6:	bf00      	nop
   2e6a8:	00037500 	.word	0x00037500
   2e6ac:	00037534 	.word	0x00037534
   2e6b0:	00037630 	.word	0x00037630
   2e6b4:	000374fc 	.word	0x000374fc
   2e6b8:	400100b4 	.word	0x400100b4
   2e6bc:	40010000 	.word	0x40010000
   2e6c0:	400100e0 	.word	0x400100e0
   2e6c4:	08000100 	.word	0x08000100
   2e6c8:	08000101 	.word	0x08000101
   2e6cc:	00037568 	.word	0x00037568
   2e6d0:	08000102 	.word	0x08000102
   2e6d4:	08000103 	.word	0x08000103
   2e6d8:	08000104 	.word	0x08000104
   2e6dc:	40010040 	.word	0x40010040

0002e6e0 <am_hal_stimer_config>:
//! @return The 32-bit current config of the STimer Config register
//
//*****************************************************************************
uint32_t
am_hal_stimer_config(uint32_t ui32STimerConfig)
{
   2e6e0:	4603      	mov	r3, r0
    uint32_t ui32CurrVal;

    //
    // Read the current config
    //
    ui32CurrVal = CTIMER->STCFG;
   2e6e2:	4a03      	ldr	r2, [pc, #12]	; (2e6f0 <am_hal_stimer_config+0x10>)
   2e6e4:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140

    //
    // Write our configuration value.
    //
    CTIMER->STCFG = ui32STimerConfig;
   2e6e8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        PWRCTRL->MISC_b.FORCEMEMVRLPTIMERS = 1;
    }
#endif

    return ui32CurrVal;
}
   2e6ec:	4770      	bx	lr
   2e6ee:	bf00      	nop
   2e6f0:	40008000 	.word	0x40008000

0002e6f4 <am_hal_stimer_counter_get>:
//! @return The 32-bit value from the STimer counter register.
//
//*****************************************************************************
uint32_t
am_hal_stimer_counter_get(void)
{
   2e6f4:	b500      	push	{lr}
   2e6f6:	b085      	sub	sp, #20
    uint32_t ui32RetVal;

    //
    // Read the register into ui32Values[].
    //
    am_hal_triple_read(ui32TmrAddr, ui32Values);
   2e6f8:	a901      	add	r1, sp, #4
   2e6fa:	4805      	ldr	r0, [pc, #20]	; (2e710 <am_hal_stimer_counter_get+0x1c>)
   2e6fc:	f7ff fea8 	bl	2e450 <am_hal_triple_read>
    //
    // Now determine which of the three values is the correct value.
    // If the first 2 match, then the values are both correct and we're done.
    // Otherwise, the third value is taken to be the correct value.
    //
    if ( ui32Values[0] == ui32Values[1] )
   2e700:	9802      	ldr	r0, [sp, #8]
   2e702:	9b01      	ldr	r3, [sp, #4]
   2e704:	4283      	cmp	r3, r0
   2e706:	d000      	beq.n	2e70a <am_hal_stimer_counter_get+0x16>
        //
        ui32RetVal = ui32Values[1];
    }
    else
    {
        ui32RetVal = ui32Values[2];
   2e708:	9803      	ldr	r0, [sp, #12]
    }
    return ui32RetVal;
}
   2e70a:	b005      	add	sp, #20
   2e70c:	f85d fb04 	ldr.w	pc, [sp], #4
   2e710:	40008144 	.word	0x40008144

0002e714 <am_hal_stimer_counter_clear>:
am_hal_stimer_counter_clear(void)
{
    //
    // Set the clear bit
    //
    CTIMER->STCFG |= CTIMER_STCFG_CLEAR_Msk;
   2e714:	4b06      	ldr	r3, [pc, #24]	; (2e730 <am_hal_stimer_counter_clear+0x1c>)
   2e716:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   2e71a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
   2e71e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

    //
    // Reset the clear bit
    //
    CTIMER->STCFG &= ~CTIMER_STCFG_CLEAR_Msk;
   2e722:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   2e726:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
   2e72a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
   2e72e:	4770      	bx	lr
   2e730:	40008000 	.word	0x40008000

0002e734 <am_hal_stimer_compare_delta_set>:
am_hal_stimer_compare_delta_set(uint32_t ui32CmprInstance, uint32_t ui32Delta)
{
    uint32_t cfgVal;
    uint32_t numTries = 0;

    if ( ui32CmprInstance > 7 )
   2e734:	2807      	cmp	r0, #7
   2e736:	d900      	bls.n	2e73a <am_hal_stimer_compare_delta_set+0x6>
   2e738:	4770      	bx	lr
{
   2e73a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e73c:	b083      	sub	sp, #12
   2e73e:	4605      	mov	r5, r0
   2e740:	460c      	mov	r4, r1
    // that delta value is at least > 1

    //
    // Start a critical section.
    //
    AM_CRITICAL_BEGIN
   2e742:	f7fe fe95 	bl	2d470 <am_hal_interrupt_master_disable>
   2e746:	9001      	str	r0, [sp, #4]

    //
    // Get current CFG value
    //
    cfgVal = CTIMER->STCFG;
   2e748:	4b16      	ldr	r3, [pc, #88]	; (2e7a4 <am_hal_stimer_compare_delta_set+0x70>)
   2e74a:	f8d3 6140 	ldr.w	r6, [r3, #320]	; 0x140

    //
    // Disable the compare if already enabled, when setting the new value
    //
    CTIMER->STCFG &= ~((AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance));
   2e74e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   2e752:	f44f 7080 	mov.w	r0, #256	; 0x100
   2e756:	40a8      	lsls	r0, r5
   2e758:	ea22 0200 	bic.w	r2, r2, r0
   2e75c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    uint32_t numTries = 0;
   2e760:	2100      	movs	r1, #0

    // In rare case the delta might not be effective
    // We retry if that is the case.
    // Allow for some variability in the value owing to execution latency
    while (numTries++ < 4)
   2e762:	2903      	cmp	r1, #3
   2e764:	f101 0101 	add.w	r1, r1, #1
   2e768:	d810      	bhi.n	2e78c <am_hal_stimer_compare_delta_set+0x58>
        uint32_t expVal;
        uint32_t expMax;
        uint32_t cmpVal;

        // Expected value
        expVal = CTIMER->STTMR + ui32Delta;
   2e76a:	4b0e      	ldr	r3, [pc, #56]	; (2e7a4 <am_hal_stimer_compare_delta_set+0x70>)
   2e76c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   2e770:	4423      	add	r3, r4

        // Max allowed - taking care of latency
        expMax = expVal + 10;
   2e772:	f103 070a 	add.w	r7, r3, #10

        //
        // Set the delta
        //
        AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance)) = ui32Delta;
   2e776:	4a0c      	ldr	r2, [pc, #48]	; (2e7a8 <am_hal_stimer_compare_delta_set+0x74>)
   2e778:	442a      	add	r2, r5
   2e77a:	0092      	lsls	r2, r2, #2
   2e77c:	6014      	str	r4, [r2, #0]

        // Read back the compare value
        cmpVal = AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance));
   2e77e:	6812      	ldr	r2, [r2, #0]

        // Make sure the value is in expected range
        if (!AM_HAL_U32_SMALLER(cmpVal, expVal) && !AM_HAL_U32_GREATER(cmpVal, expMax))
   2e780:	1ad3      	subs	r3, r2, r3
   2e782:	2b00      	cmp	r3, #0
   2e784:	dbed      	blt.n	2e762 <am_hal_stimer_compare_delta_set+0x2e>
   2e786:	1bd2      	subs	r2, r2, r7
   2e788:	2a00      	cmp	r2, #0
   2e78a:	dcea      	bgt.n	2e762 <am_hal_stimer_compare_delta_set+0x2e>


    //
    // Restore Compare Enable bit
    //
    CTIMER->STCFG |= cfgVal & (AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance);
   2e78c:	4a05      	ldr	r2, [pc, #20]	; (2e7a4 <am_hal_stimer_compare_delta_set+0x70>)
   2e78e:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
   2e792:	4030      	ands	r0, r6
   2e794:	4318      	orrs	r0, r3
   2e796:	f8c2 0140 	str.w	r0, [r2, #320]	; 0x140

    //
    // End the critical section.
    //
    AM_CRITICAL_END
   2e79a:	9801      	ldr	r0, [sp, #4]
   2e79c:	f7fe fe6c 	bl	2d478 <am_hal_interrupt_master_set>
}
   2e7a0:	b003      	add	sp, #12
   2e7a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e7a4:	40008000 	.word	0x40008000
   2e7a8:	10002054 	.word	0x10002054

0002e7ac <am_hal_stimer_int_enable>:
am_hal_stimer_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTEN |= ui32Interrupt;
   2e7ac:	4a03      	ldr	r2, [pc, #12]	; (2e7bc <am_hal_stimer_int_enable+0x10>)
   2e7ae:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
   2e7b2:	4303      	orrs	r3, r0
   2e7b4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
   2e7b8:	4770      	bx	lr
   2e7ba:	bf00      	nop
   2e7bc:	40008000 	.word	0x40008000

0002e7c0 <am_hal_stimer_int_clear>:
am_hal_stimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTCLR = ui32Interrupt;
   2e7c0:	4b01      	ldr	r3, [pc, #4]	; (2e7c8 <am_hal_stimer_int_clear+0x8>)
   2e7c2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
}
   2e7c6:	4770      	bx	lr
   2e7c8:	40008000 	.word	0x40008000

0002e7cc <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   2e7cc:	b508      	push	{r3, lr}
   2e7ce:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   2e7d0:	2000      	movs	r0, #0
   2e7d2:	f7ff fb1d 	bl	2de10 <hal_timer_config>
    return rc;
}
   2e7d6:	bd08      	pop	{r3, pc}

0002e7d8 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   2e7d8:	4603      	mov	r3, r0
   2e7da:	b118      	cbz	r0, 2e7e4 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   2e7dc:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   2e7de:	2000      	movs	r0, #0
   2e7e0:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
   2e7e2:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   2e7e4:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   2e7e6:	4770      	bx	lr

0002e7e8 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   2e7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   2e7ea:	4b17      	ldr	r3, [pc, #92]	; (2e848 <os_sem_release+0x60>)
   2e7ec:	681b      	ldr	r3, [r3, #0]
   2e7ee:	b33b      	cbz	r3, 2e840 <os_sem_release+0x58>
   2e7f0:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   2e7f2:	b338      	cbz	r0, 2e844 <os_sem_release+0x5c>
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   2e7f4:	f7eb fd10 	bl	1a218 <os_sched_get_current_task>
   2e7f8:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   2e7fa:	f7ec f867 	bl	1a8cc <os_arch_save_sr>
   2e7fe:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   2e800:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   2e802:	b165      	cbz	r5, 2e81e <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   2e804:	7b6b      	ldrb	r3, [r5, #13]
   2e806:	f023 0302 	bic.w	r3, r3, #2
   2e80a:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   2e80c:	4628      	mov	r0, r5
   2e80e:	f7eb fd57 	bl	1a2c0 <os_sched_wakeup>
         * switch may already started, in that case start next
         * context switch. In worst case scenario second task
         * switch interrupt will check that there is no need
         * for switching.
         */
        if (current->t_prio >= rdy->t_prio) {
   2e812:	7afa      	ldrb	r2, [r7, #11]
   2e814:	7aeb      	ldrb	r3, [r5, #11]
   2e816:	429a      	cmp	r2, r3
   2e818:	d20b      	bcs.n	2e832 <os_sem_release+0x4a>
    resched = 0;
   2e81a:	2400      	movs	r4, #0
   2e81c:	e003      	b.n	2e826 <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   2e81e:	88e3      	ldrh	r3, [r4, #6]
   2e820:	3301      	adds	r3, #1
   2e822:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   2e824:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   2e826:	4630      	mov	r0, r6
   2e828:	f7ec f856 	bl	1a8d8 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   2e82c:	b91c      	cbnz	r4, 2e836 <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   2e82e:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   2e830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   2e832:	2401      	movs	r4, #1
   2e834:	e7f7      	b.n	2e826 <os_sem_release+0x3e>
        os_sched(rdy);
   2e836:	4628      	mov	r0, r5
   2e838:	f7eb fdce 	bl	1a3d8 <os_sched>
    ret = OS_OK;
   2e83c:	2000      	movs	r0, #0
   2e83e:	e7f7      	b.n	2e830 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   2e840:	2009      	movs	r0, #9
   2e842:	e7f5      	b.n	2e830 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   2e844:	2003      	movs	r0, #3
   2e846:	e7f3      	b.n	2e830 <os_sem_release+0x48>
   2e848:	100040d0 	.word	0x100040d0

0002e84c <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   2e84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   2e84e:	4b2b      	ldr	r3, [pc, #172]	; (2e8fc <os_sem_pend+0xb0>)
   2e850:	681b      	ldr	r3, [r3, #0]
   2e852:	2b00      	cmp	r3, #0
   2e854:	d04d      	beq.n	2e8f2 <os_sem_pend+0xa6>
   2e856:	4604      	mov	r4, r0
   2e858:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   2e85a:	2800      	cmp	r0, #0
   2e85c:	d04b      	beq.n	2e8f6 <os_sem_pend+0xaa>
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   2e85e:	f7eb fcdb 	bl	1a218 <os_sched_get_current_task>
   2e862:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   2e864:	f7ec f832 	bl	1a8cc <os_arch_save_sr>
   2e868:	4606      	mov	r6, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   2e86a:	88e3      	ldrh	r3, [r4, #6]
   2e86c:	b14b      	cbz	r3, 2e882 <os_sem_pend+0x36>
        sem->sem_tokens--;
   2e86e:	3b01      	subs	r3, #1
   2e870:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   2e872:	2400      	movs	r4, #0
    sched = 0;
   2e874:	4627      	mov	r7, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   2e876:	4630      	mov	r0, r6
   2e878:	f7ec f82e 	bl	1a8d8 <os_arch_restore_sr>

    if (sched) {
   2e87c:	bb47      	cbnz	r7, 2e8d0 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   2e87e:	4620      	mov	r0, r4
   2e880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   2e882:	b317      	cbz	r7, 2e8ca <os_sem_pend+0x7e>
        current->t_obj = sem;
   2e884:	61ec      	str	r4, [r5, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   2e886:	7b6b      	ldrb	r3, [r5, #13]
   2e888:	f043 0302 	orr.w	r3, r3, #2
   2e88c:	736b      	strb	r3, [r5, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   2e88e:	f8d4 c000 	ldr.w	ip, [r4]
   2e892:	f1bc 0f00 	cmp.w	ip, #0
   2e896:	d00e      	beq.n	2e8b6 <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   2e898:	4663      	mov	r3, ip
        last = NULL;
   2e89a:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   2e89c:	b133      	cbz	r3, 2e8ac <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   2e89e:	7ae9      	ldrb	r1, [r5, #11]
   2e8a0:	7ada      	ldrb	r2, [r3, #11]
   2e8a2:	4291      	cmp	r1, r2
   2e8a4:	d302      	bcc.n	2e8ac <os_sem_pend+0x60>
                last = entry;
   2e8a6:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   2e8a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e8aa:	e7f7      	b.n	2e89c <os_sem_pend+0x50>
        if (last) {
   2e8ac:	b118      	cbz	r0, 2e8b6 <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   2e8ae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2e8b0:	64eb      	str	r3, [r5, #76]	; 0x4c
   2e8b2:	64c5      	str	r5, [r0, #76]	; 0x4c
   2e8b4:	e002      	b.n	2e8bc <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   2e8b6:	f8c5 c04c 	str.w	ip, [r5, #76]	; 0x4c
   2e8ba:	6025      	str	r5, [r4, #0]
        os_sched_sleep(current, timeout);
   2e8bc:	4639      	mov	r1, r7
   2e8be:	4628      	mov	r0, r5
   2e8c0:	f7eb fcb6 	bl	1a230 <os_sched_sleep>
        ret = OS_OK;
   2e8c4:	2400      	movs	r4, #0
        sched = 1;
   2e8c6:	2701      	movs	r7, #1
   2e8c8:	e7d5      	b.n	2e876 <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   2e8ca:	2406      	movs	r4, #6
    sched = 0;
   2e8cc:	2700      	movs	r7, #0
   2e8ce:	e7d2      	b.n	2e876 <os_sem_pend+0x2a>
        os_sched(NULL);
   2e8d0:	2000      	movs	r0, #0
   2e8d2:	f7eb fd81 	bl	1a3d8 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   2e8d6:	7b6c      	ldrb	r4, [r5, #13]
   2e8d8:	f014 0402 	ands.w	r4, r4, #2
   2e8dc:	d0cf      	beq.n	2e87e <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   2e8de:	f7eb fff5 	bl	1a8cc <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   2e8e2:	7b6b      	ldrb	r3, [r5, #13]
   2e8e4:	f023 0302 	bic.w	r3, r3, #2
   2e8e8:	736b      	strb	r3, [r5, #13]
            OS_EXIT_CRITICAL(sr);
   2e8ea:	f7eb fff5 	bl	1a8d8 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   2e8ee:	2406      	movs	r4, #6
   2e8f0:	e7c5      	b.n	2e87e <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   2e8f2:	2409      	movs	r4, #9
   2e8f4:	e7c3      	b.n	2e87e <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   2e8f6:	2403      	movs	r4, #3
   2e8f8:	e7c1      	b.n	2e87e <os_sem_pend+0x32>
   2e8fa:	bf00      	nop
   2e8fc:	100040d0 	.word	0x100040d0

0002e900 <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
   2e900:	2001      	movs	r0, #1
   2e902:	4770      	bx	lr

0002e904 <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
   2e904:	4770      	bx	lr

0002e906 <__malloc_from_block>:
static void *__malloc_from_block(struct free_arena_header *fp, size_t size)
{
    size_t fsize;
    struct free_arena_header *nfp, *na, *fpn, *fpp;

    fsize = fp->a.size;
   2e906:	6842      	ldr	r2, [r0, #4]

    /* We need the 2* to account for the larger requirements of a
       free block */
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
   2e908:	f101 0320 	add.w	r3, r1, #32
   2e90c:	4293      	cmp	r3, r2
   2e90e:	d816      	bhi.n	2e93e <__malloc_from_block+0x38>
{
   2e910:	b430      	push	{r4, r5}
        /* Bigger block than required -- split block */
        nfp = (struct free_arena_header *)((char *)fp + size);
   2e912:	1843      	adds	r3, r0, r1
        na = fp->a.next;
   2e914:	6884      	ldr	r4, [r0, #8]

        nfp->a.type = ARENA_TYPE_FREE;
   2e916:	2501      	movs	r5, #1
   2e918:	5045      	str	r5, [r0, r1]
        nfp->a.size = fsize - size;
   2e91a:	1a52      	subs	r2, r2, r1
   2e91c:	605a      	str	r2, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
   2e91e:	2200      	movs	r2, #0
   2e920:	6002      	str	r2, [r0, #0]
        fp->a.size = size;
   2e922:	6041      	str	r1, [r0, #4]

        /* Insert into all-block chain */
        nfp->a.prev = fp;
   2e924:	60d8      	str	r0, [r3, #12]
        nfp->a.next = na;
   2e926:	609c      	str	r4, [r3, #8]
        na->a.prev = nfp;
   2e928:	60e3      	str	r3, [r4, #12]
        fp->a.next = nfp;
   2e92a:	6083      	str	r3, [r0, #8]

        /* Replace current block on free chain */
        nfp->next_free = fpn = fp->next_free;
   2e92c:	6901      	ldr	r1, [r0, #16]
   2e92e:	6119      	str	r1, [r3, #16]
        nfp->prev_free = fpp = fp->prev_free;
   2e930:	6942      	ldr	r2, [r0, #20]
   2e932:	615a      	str	r2, [r3, #20]
        fpn->prev_free = nfp;
   2e934:	614b      	str	r3, [r1, #20]
        fpp->next_free = nfp;
   2e936:	6113      	str	r3, [r2, #16]
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
        remove_from_free_chain(fp);
    }

    return (void *)(&fp->a + 1);
}
   2e938:	3010      	adds	r0, #16
   2e93a:	bc30      	pop	{r4, r5}
   2e93c:	4770      	bx	lr
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
   2e93e:	2300      	movs	r3, #0
   2e940:	6003      	str	r3, [r0, #0]
    ap = ah->prev_free;
   2e942:	6942      	ldr	r2, [r0, #20]
    an = ah->next_free;
   2e944:	6903      	ldr	r3, [r0, #16]
    ap->next_free = an;
   2e946:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   2e948:	615a      	str	r2, [r3, #20]
}
   2e94a:	3010      	adds	r0, #16
   2e94c:	4770      	bx	lr
	...

0002e950 <__free_block>:

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
   2e950:	b410      	push	{r4}
   2e952:	4603      	mov	r3, r0
    struct free_arena_header *pah, *nah;

    pah = ah->a.prev;
   2e954:	68c0      	ldr	r0, [r0, #12]
    nah = ah->a.next;
   2e956:	6899      	ldr	r1, [r3, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
   2e958:	6802      	ldr	r2, [r0, #0]
   2e95a:	2a01      	cmp	r2, #1
   2e95c:	d00e      	beq.n	2e97c <__free_block+0x2c>

        ah = pah;
        pah = ah->a.prev;
    } else {
        /* Need to add this block to the free chain */
        ah->a.type = ARENA_TYPE_FREE;
   2e95e:	2201      	movs	r2, #1
   2e960:	601a      	str	r2, [r3, #0]

        ah->next_free = __malloc_head.next_free;
   2e962:	4a13      	ldr	r2, [pc, #76]	; (2e9b0 <__free_block+0x60>)
   2e964:	6910      	ldr	r0, [r2, #16]
   2e966:	6118      	str	r0, [r3, #16]
        ah->prev_free = &__malloc_head;
   2e968:	615a      	str	r2, [r3, #20]
        __malloc_head.next_free = ah;
   2e96a:	6113      	str	r3, [r2, #16]
        ah->next_free->prev_free = ah;
   2e96c:	691a      	ldr	r2, [r3, #16]
   2e96e:	6153      	str	r3, [r2, #20]
   2e970:	4618      	mov	r0, r3
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
   2e972:	680b      	ldr	r3, [r1, #0]
   2e974:	2b01      	cmp	r3, #1
   2e976:	d00b      	beq.n	2e990 <__free_block+0x40>
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
   2e978:	bc10      	pop	{r4}
   2e97a:	4770      	bx	lr
        (char *)pah + pah->a.size == (char *)ah) {
   2e97c:	6842      	ldr	r2, [r0, #4]
   2e97e:	1884      	adds	r4, r0, r2
    if (pah->a.type == ARENA_TYPE_FREE &&
   2e980:	429c      	cmp	r4, r3
   2e982:	d1ec      	bne.n	2e95e <__free_block+0xe>
        pah->a.size += ah->a.size;
   2e984:	685b      	ldr	r3, [r3, #4]
   2e986:	441a      	add	r2, r3
   2e988:	6042      	str	r2, [r0, #4]
        pah->a.next = nah;
   2e98a:	6081      	str	r1, [r0, #8]
        nah->a.prev = pah;
   2e98c:	60c8      	str	r0, [r1, #12]
        pah = ah->a.prev;
   2e98e:	e7f0      	b.n	2e972 <__free_block+0x22>
        (char *)ah + ah->a.size == (char *)nah) {
   2e990:	6843      	ldr	r3, [r0, #4]
   2e992:	18c2      	adds	r2, r0, r3
    if (nah->a.type == ARENA_TYPE_FREE &&
   2e994:	428a      	cmp	r2, r1
   2e996:	d1ef      	bne.n	2e978 <__free_block+0x28>
        ah->a.size += nah->a.size;
   2e998:	684a      	ldr	r2, [r1, #4]
   2e99a:	4413      	add	r3, r2
   2e99c:	6043      	str	r3, [r0, #4]
    ap = ah->prev_free;
   2e99e:	694a      	ldr	r2, [r1, #20]
    an = ah->next_free;
   2e9a0:	690b      	ldr	r3, [r1, #16]
    ap->next_free = an;
   2e9a2:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   2e9a4:	615a      	str	r2, [r3, #20]
    ap = ah->a.prev;
   2e9a6:	68ca      	ldr	r2, [r1, #12]
    an = ah->a.next;
   2e9a8:	688b      	ldr	r3, [r1, #8]
    ap->a.next = an;
   2e9aa:	6093      	str	r3, [r2, #8]
    an->a.prev = ap;
   2e9ac:	60da      	str	r2, [r3, #12]
    return ah;
   2e9ae:	e7e3      	b.n	2e978 <__free_block+0x28>
   2e9b0:	10001e58 	.word	0x10001e58

0002e9b4 <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
   2e9b4:	2917      	cmp	r1, #23
   2e9b6:	d91e      	bls.n	2e9f6 <add_malloc_block+0x42>
{
   2e9b8:	b510      	push	{r4, lr}
   2e9ba:	4604      	mov	r4, r0
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
   2e9bc:	2301      	movs	r3, #1
   2e9be:	6003      	str	r3, [r0, #0]
    fp->a.size = size;
   2e9c0:	6041      	str	r1, [r0, #4]

    if (!malloc_lock())
   2e9c2:	4b0d      	ldr	r3, [pc, #52]	; (2e9f8 <add_malloc_block+0x44>)
   2e9c4:	681b      	ldr	r3, [r3, #0]
   2e9c6:	4798      	blx	r3
   2e9c8:	b1a0      	cbz	r0, 2e9f4 <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
   2e9ca:	4b0c      	ldr	r3, [pc, #48]	; (2e9fc <add_malloc_block+0x48>)
   2e9cc:	68db      	ldr	r3, [r3, #12]
   2e9ce:	681a      	ldr	r2, [r3, #0]
   2e9d0:	2a02      	cmp	r2, #2
   2e9d2:	d003      	beq.n	2e9dc <add_malloc_block+0x28>
         pah = pah->a.prev) {
        if (pah < fp)
   2e9d4:	42a3      	cmp	r3, r4
   2e9d6:	d301      	bcc.n	2e9dc <add_malloc_block+0x28>
         pah = pah->a.prev) {
   2e9d8:	68db      	ldr	r3, [r3, #12]
   2e9da:	e7f8      	b.n	2e9ce <add_malloc_block+0x1a>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
   2e9dc:	689a      	ldr	r2, [r3, #8]
   2e9de:	60a2      	str	r2, [r4, #8]
    fp->a.prev = pah;
   2e9e0:	60e3      	str	r3, [r4, #12]
    pah->a.next = fp;
   2e9e2:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
   2e9e4:	68a3      	ldr	r3, [r4, #8]
   2e9e6:	60dc      	str	r4, [r3, #12]

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
   2e9e8:	4620      	mov	r0, r4
   2e9ea:	f7ff ffb1 	bl	2e950 <__free_block>

    malloc_unlock();
   2e9ee:	4b04      	ldr	r3, [pc, #16]	; (2ea00 <add_malloc_block+0x4c>)
   2e9f0:	681b      	ldr	r3, [r3, #0]
   2e9f2:	4798      	blx	r3
}
   2e9f4:	bd10      	pop	{r4, pc}
   2e9f6:	4770      	bx	lr
   2e9f8:	10001e70 	.word	0x10001e70
   2e9fc:	10001e58 	.word	0x10001e58
   2ea00:	10001e74 	.word	0x10001e74

0002ea04 <malloc>:
{
   2ea04:	b538      	push	{r3, r4, r5, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   2ea06:	1e43      	subs	r3, r0, #1
   2ea08:	f113 0f12 	cmn.w	r3, #18
   2ea0c:	d825      	bhi.n	2ea5a <malloc+0x56>
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   2ea0e:	301f      	adds	r0, #31
   2ea10:	f020 040f 	bic.w	r4, r0, #15
    if (!malloc_lock())
   2ea14:	4b13      	ldr	r3, [pc, #76]	; (2ea64 <malloc+0x60>)
   2ea16:	681b      	ldr	r3, [r3, #0]
   2ea18:	4798      	blx	r3
   2ea1a:	b300      	cbz	r0, 2ea5e <malloc+0x5a>
    void *result = NULL;
   2ea1c:	2500      	movs	r5, #0
   2ea1e:	e00d      	b.n	2ea3c <malloc+0x38>
            result = __malloc_from_block(fp, size);
   2ea20:	4621      	mov	r1, r4
   2ea22:	f7ff ff70 	bl	2e906 <__malloc_from_block>
   2ea26:	4605      	mov	r5, r0
    if (result == NULL) {
   2ea28:	b995      	cbnz	r5, 2ea50 <malloc+0x4c>
        more_mem = _sbrk(size);
   2ea2a:	4620      	mov	r0, r4
   2ea2c:	f7e5 fe4c 	bl	146c8 <_sbrk>
        if (more_mem != (void *)-1) {
   2ea30:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2ea34:	d00c      	beq.n	2ea50 <malloc+0x4c>
            add_malloc_block(more_mem, size);
   2ea36:	4621      	mov	r1, r4
   2ea38:	f7ff ffbc 	bl	2e9b4 <add_malloc_block>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
   2ea3c:	4b0a      	ldr	r3, [pc, #40]	; (2ea68 <malloc+0x64>)
   2ea3e:	6918      	ldr	r0, [r3, #16]
   2ea40:	6803      	ldr	r3, [r0, #0]
   2ea42:	2b02      	cmp	r3, #2
   2ea44:	d0f0      	beq.n	2ea28 <malloc+0x24>
        if (fp->a.size >= size) {
   2ea46:	6843      	ldr	r3, [r0, #4]
   2ea48:	42a3      	cmp	r3, r4
   2ea4a:	d2e9      	bcs.n	2ea20 <malloc+0x1c>
         fp = fp->next_free) {
   2ea4c:	6900      	ldr	r0, [r0, #16]
   2ea4e:	e7f7      	b.n	2ea40 <malloc+0x3c>
    malloc_unlock();
   2ea50:	4b06      	ldr	r3, [pc, #24]	; (2ea6c <malloc+0x68>)
   2ea52:	681b      	ldr	r3, [r3, #0]
   2ea54:	4798      	blx	r3
}
   2ea56:	4628      	mov	r0, r5
   2ea58:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
   2ea5a:	2500      	movs	r5, #0
   2ea5c:	e7fb      	b.n	2ea56 <malloc+0x52>
        return NULL;
   2ea5e:	2500      	movs	r5, #0
   2ea60:	e7f9      	b.n	2ea56 <malloc+0x52>
   2ea62:	bf00      	nop
   2ea64:	10001e70 	.word	0x10001e70
   2ea68:	10001e58 	.word	0x10001e58
   2ea6c:	10001e74 	.word	0x10001e74

0002ea70 <free>:

void free(void *ptr)
{
    struct free_arena_header *ah;

    if (!ptr)
   2ea70:	b170      	cbz	r0, 2ea90 <free+0x20>
{
   2ea72:	b510      	push	{r4, lr}
        return;

    ah = (struct free_arena_header *)
   2ea74:	f1a0 0410 	sub.w	r4, r0, #16

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
   2ea78:	4b06      	ldr	r3, [pc, #24]	; (2ea94 <free+0x24>)
   2ea7a:	681b      	ldr	r3, [r3, #0]
   2ea7c:	4798      	blx	r3
   2ea7e:	b900      	cbnz	r0, 2ea82 <free+0x12>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
    malloc_unlock();
}
   2ea80:	bd10      	pop	{r4, pc}
    ah = __free_block(ah);
   2ea82:	4620      	mov	r0, r4
   2ea84:	f7ff ff64 	bl	2e950 <__free_block>
    malloc_unlock();
   2ea88:	4b03      	ldr	r3, [pc, #12]	; (2ea98 <free+0x28>)
   2ea8a:	681b      	ldr	r3, [r3, #0]
   2ea8c:	4798      	blx	r3
   2ea8e:	e7f7      	b.n	2ea80 <free+0x10>
   2ea90:	4770      	bx	lr
   2ea92:	bf00      	nop
   2ea94:	10001e70 	.word	0x10001e70
   2ea98:	10001e74 	.word	0x10001e74

0002ea9c <realloc>:
#include "malloc.h"

/* FIXME: This is cheesy, it should be fixed later */

void *realloc(void *ptr, size_t size)
{
   2ea9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct free_arena_header *ah;
	void *newptr;
	size_t oldsize;

	if (!ptr)
   2ea9e:	b300      	cbz	r0, 2eae2 <realloc+0x46>
   2eaa0:	4606      	mov	r6, r0
		return malloc(size);

	if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   2eaa2:	1e4b      	subs	r3, r1, #1
   2eaa4:	f113 0f12 	cmn.w	r3, #18
   2eaa8:	d820      	bhi.n	2eaec <realloc+0x50>
		free(ptr);
		return NULL;
	}

	/* Add the obligatory arena header, and round up */
	size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   2eaaa:	311f      	adds	r1, #31
   2eaac:	f021 040f 	bic.w	r4, r1, #15

	ah = (struct free_arena_header *)
	    ((struct arena_header *)ptr - 1);

	if (ah->a.size >= size && size >= (ah->a.size >> 2)) {
   2eab0:	f850 5c0c 	ldr.w	r5, [r0, #-12]
   2eab4:	42a5      	cmp	r5, r4
   2eab6:	d302      	bcc.n	2eabe <realloc+0x22>
   2eab8:	ebb4 0f95 	cmp.w	r4, r5, lsr #2
   2eabc:	d21c      	bcs.n	2eaf8 <realloc+0x5c>
	} else {
		/* Make me a new block.  This is kind of bogus; we should
		   be checking the following block to see if we can do an
		   in-place adjustment... fix that later. */

		oldsize = ah->a.size - sizeof(struct arena_header);
   2eabe:	3d10      	subs	r5, #16

		newptr = malloc(size);
   2eac0:	4620      	mov	r0, r4
   2eac2:	f7ff ff9f 	bl	2ea04 <malloc>
                if (newptr) {
   2eac6:	4607      	mov	r7, r0
   2eac8:	b1a0      	cbz	r0, 2eaf4 <realloc+0x58>
                    memcpy(newptr, ptr, (size < oldsize) ? size : oldsize);
   2eaca:	4622      	mov	r2, r4
   2eacc:	42ac      	cmp	r4, r5
   2eace:	bf28      	it	cs
   2ead0:	462a      	movcs	r2, r5
   2ead2:	4631      	mov	r1, r6
   2ead4:	f7ec f8ce 	bl	1ac74 <memcpy>
                    free(ptr);
   2ead8:	4630      	mov	r0, r6
   2eada:	f7ff ffc9 	bl	2ea70 <free>
                } else {
                    newptr = ptr;
                }
		return newptr;
	}
}
   2eade:	4638      	mov	r0, r7
   2eae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return malloc(size);
   2eae2:	4608      	mov	r0, r1
   2eae4:	f7ff ff8e 	bl	2ea04 <malloc>
   2eae8:	4607      	mov	r7, r0
   2eaea:	e7f8      	b.n	2eade <realloc+0x42>
		free(ptr);
   2eaec:	f7ff ffc0 	bl	2ea70 <free>
		return NULL;
   2eaf0:	2700      	movs	r7, #0
   2eaf2:	e7f4      	b.n	2eade <realloc+0x42>
                    newptr = ptr;
   2eaf4:	4637      	mov	r7, r6
		return newptr;
   2eaf6:	e7f2      	b.n	2eade <realloc+0x42>
		return ptr;
   2eaf8:	4607      	mov	r7, r0
   2eafa:	e7f0      	b.n	2eade <realloc+0x42>

0002eafc <sprintf>:

#include <stdio.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   2eafc:	b40e      	push	{r1, r2, r3}
   2eafe:	b500      	push	{lr}
   2eb00:	b082      	sub	sp, #8
   2eb02:	ab03      	add	r3, sp, #12
   2eb04:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   2eb08:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   2eb0a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2eb0e:	f7ec fc95 	bl	1b43c <vsnprintf>
	va_end(ap);

	return rv;
}
   2eb12:	b002      	add	sp, #8
   2eb14:	f85d eb04 	ldr.w	lr, [sp], #4
   2eb18:	b003      	add	sp, #12
   2eb1a:	4770      	bx	lr

0002eb1c <strcat>:
 */

#include <string.h>

char *strcat(char *dst, const char *src)
{
   2eb1c:	b538      	push	{r3, r4, r5, lr}
   2eb1e:	4604      	mov	r4, r0
   2eb20:	460d      	mov	r5, r1
	strcpy(strchr(dst, '\0'), src);
   2eb22:	f7ec f90e 	bl	1ad42 <strlen>
   2eb26:	4629      	mov	r1, r5
   2eb28:	4420      	add	r0, r4
   2eb2a:	f000 f80c 	bl	2eb46 <strcpy>
	return dst;
}
   2eb2e:	4620      	mov	r0, r4
   2eb30:	bd38      	pop	{r3, r4, r5, pc}

0002eb32 <strchr>:

#include <string.h>

char *strchr(const char *s, int c)
{
	while (*s != (char)c) {
   2eb32:	7803      	ldrb	r3, [r0, #0]
   2eb34:	b2ca      	uxtb	r2, r1
   2eb36:	4293      	cmp	r3, r2
   2eb38:	d002      	beq.n	2eb40 <strchr+0xe>
		if (!*s)
   2eb3a:	b113      	cbz	r3, 2eb42 <strchr+0x10>
			return NULL;
		s++;
   2eb3c:	3001      	adds	r0, #1
   2eb3e:	e7f8      	b.n	2eb32 <strchr>
   2eb40:	4770      	bx	lr
			return NULL;
   2eb42:	2000      	movs	r0, #0
	}

	return (char *)s;
}
   2eb44:	4770      	bx	lr

0002eb46 <strcpy>:
 */

#include <string.h>

char *strcpy(char *dst, const char *src)
{
   2eb46:	b410      	push	{r4}
	char *q = dst;
   2eb48:	4602      	mov	r2, r0
	const char *p = src;
	char ch;

	do {
		*q++ = ch = *p++;
   2eb4a:	780c      	ldrb	r4, [r1, #0]
   2eb4c:	3101      	adds	r1, #1
   2eb4e:	7014      	strb	r4, [r2, #0]
   2eb50:	3201      	adds	r2, #1
	} while (ch);
   2eb52:	2c00      	cmp	r4, #0
   2eb54:	d1f9      	bne.n	2eb4a <strcpy+0x4>

	return dst;
}
   2eb56:	bc10      	pop	{r4}
   2eb58:	4770      	bx	lr

0002eb5a <strncmp>:
 */

#include <string.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
   2eb5a:	b410      	push	{r4}
   2eb5c:	4603      	mov	r3, r0
	const unsigned char *c1 = (const unsigned char *)s1;
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;
   2eb5e:	2000      	movs	r0, #0

	while (n--) {
   2eb60:	4614      	mov	r4, r2
   2eb62:	3a01      	subs	r2, #1
   2eb64:	b13c      	cbz	r4, 2eb76 <strncmp+0x1c>
		d = (int)(ch = *c1++) - (int)*c2++;
   2eb66:	f813 4b01 	ldrb.w	r4, [r3], #1
   2eb6a:	f811 0b01 	ldrb.w	r0, [r1], #1
		if (d || !ch)
   2eb6e:	1a20      	subs	r0, r4, r0
   2eb70:	d101      	bne.n	2eb76 <strncmp+0x1c>
   2eb72:	2c00      	cmp	r4, #0
   2eb74:	d1f4      	bne.n	2eb60 <strncmp+0x6>
			break;
	}

	return d;
}
   2eb76:	bc10      	pop	{r4}
   2eb78:	4770      	bx	lr

0002eb7a <strrchr>:
 */

#include <string.h>

char *strrchr(const char *s, int c)
{
   2eb7a:	4603      	mov	r3, r0
	const char *found = NULL;
   2eb7c:	2000      	movs	r0, #0

	while (*s) {
   2eb7e:	781a      	ldrb	r2, [r3, #0]
   2eb80:	b15a      	cbz	r2, 2eb9a <strrchr+0x20>
{
   2eb82:	b410      	push	{r4}
   2eb84:	e002      	b.n	2eb8c <strrchr+0x12>
		if (*s == (char)c)
			found = s;
		s++;
   2eb86:	3301      	adds	r3, #1
	while (*s) {
   2eb88:	781a      	ldrb	r2, [r3, #0]
   2eb8a:	b122      	cbz	r2, 2eb96 <strrchr+0x1c>
		if (*s == (char)c)
   2eb8c:	b2cc      	uxtb	r4, r1
   2eb8e:	4294      	cmp	r4, r2
   2eb90:	d1f9      	bne.n	2eb86 <strrchr+0xc>
			found = s;
   2eb92:	4618      	mov	r0, r3
   2eb94:	e7f7      	b.n	2eb86 <strrchr+0xc>
	}

	return (char *)found;
}
   2eb96:	bc10      	pop	{r4}
   2eb98:	4770      	bx	lr
   2eb9a:	4770      	bx	lr

0002eb9c <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   2eb9c:	b508      	push	{r3, lr}
   2eb9e:	460a      	mov	r2, r1
	return vfprintf(stdout, format, ap);
   2eba0:	4601      	mov	r1, r0
   2eba2:	4b02      	ldr	r3, [pc, #8]	; (2ebac <vprintf+0x10>)
   2eba4:	6818      	ldr	r0, [r3, #0]
   2eba6:	f7ec fc25 	bl	1b3f4 <vfprintf>
}
   2ebaa:	bd08      	pop	{r3, pc}
   2ebac:	00033dbc 	.word	0x00033dbc

0002ebb0 <ble_hs_shutdown_stop_cb>:
/**
 * Called when the host stop procedure has completed.
 */
static void
ble_hs_shutdown_stop_cb(int status, void *arg)
{
   2ebb0:	b508      	push	{r3, lr}
    SYSDOWN_ASSERT_ACTIVE();
   2ebb2:	4b08      	ldr	r3, [pc, #32]	; (2ebd4 <ble_hs_shutdown_stop_cb+0x24>)
   2ebb4:	781b      	ldrb	r3, [r3, #0]
   2ebb6:	b113      	cbz	r3, 2ebbe <ble_hs_shutdown_stop_cb+0xe>

    /* Indicate to sysdown that the host is fully shut down. */
    sysdown_release();
   2ebb8:	f7ef f9da 	bl	1df70 <sysdown_release>
}
   2ebbc:	bd08      	pop	{r3, pc}
    SYSDOWN_ASSERT_ACTIVE();
   2ebbe:	f7e5 fda1 	bl	14704 <hal_debugger_connected>
   2ebc2:	b100      	cbz	r0, 2ebc6 <ble_hs_shutdown_stop_cb+0x16>
   2ebc4:	be01      	bkpt	0x0001
   2ebc6:	2300      	movs	r3, #0
   2ebc8:	461a      	mov	r2, r3
   2ebca:	4619      	mov	r1, r3
   2ebcc:	4618      	mov	r0, r3
   2ebce:	f7ea f8a9 	bl	18d24 <__assert_func>
   2ebd2:	bf00      	nop
   2ebd4:	10005578 	.word	0x10005578

0002ebd8 <ble_hs_shutdown>:

int
ble_hs_shutdown(int reason)
{
   2ebd8:	b508      	push	{r3, lr}
    int rc;

    /* Ensure this function only gets called by sysdown. */
    SYSDOWN_ASSERT_ACTIVE();
   2ebda:	4b12      	ldr	r3, [pc, #72]	; (2ec24 <ble_hs_shutdown+0x4c>)
   2ebdc:	781b      	ldrb	r3, [r3, #0]
   2ebde:	b18b      	cbz	r3, 2ec04 <ble_hs_shutdown+0x2c>

    /* Initiate a host stop procedure. */
    rc = ble_hs_stop(&ble_hs_shutdown_stop_listener, ble_hs_shutdown_stop_cb,
   2ebe0:	2200      	movs	r2, #0
   2ebe2:	4911      	ldr	r1, [pc, #68]	; (2ec28 <ble_hs_shutdown+0x50>)
   2ebe4:	4811      	ldr	r0, [pc, #68]	; (2ec2c <ble_hs_shutdown+0x54>)
   2ebe6:	f7fa f857 	bl	28c98 <ble_hs_stop>
                     NULL);
    switch (rc) {
   2ebea:	2802      	cmp	r0, #2
   2ebec:	d014      	beq.n	2ec18 <ble_hs_shutdown+0x40>
   2ebee:	280f      	cmp	r0, #15
   2ebf0:	d014      	beq.n	2ec1c <ble_hs_shutdown+0x44>
   2ebf2:	b1a8      	cbz	r0, 2ec20 <ble_hs_shutdown+0x48>
    case BLE_HS_EALREADY:
        /* Already stopped.  Shutdown complete. */
        return SYSDOWN_COMPLETE;

    default:
        BLE_HS_LOG(ERROR, "ble_hs_shutdown: failed to stop host; rc=%d\n", rc);
   2ebf4:	4603      	mov	r3, r0
   2ebf6:	4a0e      	ldr	r2, [pc, #56]	; (2ec30 <ble_hs_shutdown+0x58>)
   2ebf8:	2103      	movs	r1, #3
   2ebfa:	2004      	movs	r0, #4
   2ebfc:	f7ee f88e 	bl	1cd1c <modlog_printf>
        return SYSDOWN_COMPLETE;
   2ec00:	2000      	movs	r0, #0
   2ec02:	e00a      	b.n	2ec1a <ble_hs_shutdown+0x42>
    SYSDOWN_ASSERT_ACTIVE();
   2ec04:	f7e5 fd7e 	bl	14704 <hal_debugger_connected>
   2ec08:	b100      	cbz	r0, 2ec0c <ble_hs_shutdown+0x34>
   2ec0a:	be01      	bkpt	0x0001
   2ec0c:	2300      	movs	r3, #0
   2ec0e:	461a      	mov	r2, r3
   2ec10:	4619      	mov	r1, r3
   2ec12:	4618      	mov	r0, r3
   2ec14:	f7ea f886 	bl	18d24 <__assert_func>
        return SYSDOWN_COMPLETE;
   2ec18:	2000      	movs	r0, #0
    }
}
   2ec1a:	bd08      	pop	{r3, pc}
    switch (rc) {
   2ec1c:	2001      	movs	r0, #1
   2ec1e:	e7fc      	b.n	2ec1a <ble_hs_shutdown+0x42>
   2ec20:	2001      	movs	r0, #1
   2ec22:	e7fa      	b.n	2ec1a <ble_hs_shutdown+0x42>
   2ec24:	10005578 	.word	0x10005578
   2ec28:	0002ebb1 	.word	0x0002ebb1
   2ec2c:	10007078 	.word	0x10007078
   2ec30:	00037664 	.word	0x00037664

0002ec34 <uart_hal_blocking_tx>:
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   2ec34:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   2ec36:	6b80      	ldr	r0, [r0, #56]	; 0x38
   2ec38:	b118      	cbz	r0, 2ec42 <uart_hal_blocking_tx+0xe>

    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
   2ec3a:	3801      	subs	r0, #1
   2ec3c:	f000 fa26 	bl	2f08c <hal_uart_blocking_tx>
}
   2ec40:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   2ec42:	f7e5 fd5f 	bl	14704 <hal_debugger_connected>
   2ec46:	b100      	cbz	r0, 2ec4a <uart_hal_blocking_tx+0x16>
   2ec48:	be01      	bkpt	0x0001
   2ec4a:	2300      	movs	r3, #0
   2ec4c:	461a      	mov	r2, r3
   2ec4e:	4619      	mov	r1, r3
   2ec50:	4618      	mov	r0, r3
   2ec52:	f7ea f867 	bl	18d24 <__assert_func>

0002ec56 <uart_hal_start_rx>:
{
   2ec56:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   2ec58:	6b80      	ldr	r0, [r0, #56]	; 0x38
   2ec5a:	b118      	cbz	r0, 2ec64 <uart_hal_start_rx+0xe>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
   2ec5c:	3801      	subs	r0, #1
   2ec5e:	f000 f9e1 	bl	2f024 <hal_uart_start_rx>
}
   2ec62:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   2ec64:	f7e5 fd4e 	bl	14704 <hal_debugger_connected>
   2ec68:	b100      	cbz	r0, 2ec6c <uart_hal_start_rx+0x16>
   2ec6a:	be01      	bkpt	0x0001
   2ec6c:	2300      	movs	r3, #0
   2ec6e:	461a      	mov	r2, r3
   2ec70:	4619      	mov	r1, r3
   2ec72:	4618      	mov	r0, r3
   2ec74:	f7ea f856 	bl	18d24 <__assert_func>

0002ec78 <uart_hal_start_tx>:
{
   2ec78:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   2ec7a:	6b80      	ldr	r0, [r0, #56]	; 0x38
   2ec7c:	b118      	cbz	r0, 2ec86 <uart_hal_start_tx+0xe>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
   2ec7e:	3801      	subs	r0, #1
   2ec80:	f000 f97e 	bl	2ef80 <hal_uart_start_tx>
}
   2ec84:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   2ec86:	f7e5 fd3d 	bl	14704 <hal_debugger_connected>
   2ec8a:	b100      	cbz	r0, 2ec8e <uart_hal_start_tx+0x16>
   2ec8c:	be01      	bkpt	0x0001
   2ec8e:	2300      	movs	r3, #0
   2ec90:	461a      	mov	r2, r3
   2ec92:	4619      	mov	r1, r3
   2ec94:	4618      	mov	r0, r3
   2ec96:	f7ea f845 	bl	18d24 <__assert_func>

0002ec9a <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
   2ec9a:	b510      	push	{r4, lr}
   2ec9c:	b082      	sub	sp, #8
    return (intptr_t)(dev->ud_priv) - 1;
   2ec9e:	6b84      	ldr	r4, [r0, #56]	; 0x38
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
                         ucp->uc_databits, ucp->uc_stopbits,
                         (enum hal_uart_parity)ucp->uc_parity,
   2eca0:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
                         (enum hal_uart_flow_ctl)ucp->uc_flow_ctl);
   2eca4:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
   2eca8:	9201      	str	r2, [sp, #4]
   2ecaa:	9300      	str	r3, [sp, #0]
   2ecac:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   2ecb0:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
   2ecb4:	6b01      	ldr	r1, [r0, #48]	; 0x30
   2ecb6:	1e60      	subs	r0, r4, #1
   2ecb8:	f000 fc4c 	bl	2f554 <hal_uart_config>
    if (rc) {
   2ecbc:	b908      	cbnz	r0, 2ecc2 <uart_hal_resume+0x28>
        return OS_EINVAL;
    }

    return OS_OK;
}
   2ecbe:	b002      	add	sp, #8
   2ecc0:	bd10      	pop	{r4, pc}
        return OS_EINVAL;
   2ecc2:	2002      	movs	r0, #2
   2ecc4:	e7fb      	b.n	2ecbe <uart_hal_resume+0x24>

0002ecc6 <uart_hal_suspend>:
{
   2ecc6:	b570      	push	{r4, r5, r6, lr}
   2ecc8:	4606      	mov	r6, r0
   2ecca:	460c      	mov	r4, r1
   2eccc:	4615      	mov	r5, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
   2ecce:	f7eb fccd 	bl	1a66c <os_time_get>
   2ecd2:	1a24      	subs	r4, r4, r0
   2ecd4:	2c00      	cmp	r4, #0
   2ecd6:	dc06      	bgt.n	2ece6 <uart_hal_suspend+0x20>
   2ecd8:	b13d      	cbz	r5, 2ecea <uart_hal_suspend+0x24>
    return (intptr_t)(dev->ud_priv) - 1;
   2ecda:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   2ecdc:	3801      	subs	r0, #1
   2ecde:	f000 fcd3 	bl	2f688 <hal_uart_close>
    if (rc) {
   2ece2:	b920      	cbnz	r0, 2ecee <uart_hal_suspend+0x28>
}
   2ece4:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   2ece6:	2002      	movs	r0, #2
   2ece8:	e7fc      	b.n	2ece4 <uart_hal_suspend+0x1e>
   2ecea:	2002      	movs	r0, #2
   2ecec:	e7fa      	b.n	2ece4 <uart_hal_suspend+0x1e>
        return OS_EINVAL;
   2ecee:	2002      	movs	r0, #2
   2ecf0:	e7f8      	b.n	2ece4 <uart_hal_suspend+0x1e>

0002ecf2 <uart_hal_close>:
{
   2ecf2:	b508      	push	{r3, lr}
    return (intptr_t)(dev->ud_priv) - 1;
   2ecf4:	6b80      	ldr	r0, [r0, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   2ecf6:	3801      	subs	r0, #1
   2ecf8:	f000 fcc6 	bl	2f688 <hal_uart_close>
    if (rc) {
   2ecfc:	b900      	cbnz	r0, 2ed00 <uart_hal_close+0xe>
}
   2ecfe:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
   2ed00:	2002      	movs	r0, #2
   2ed02:	e7fc      	b.n	2ecfe <uart_hal_close+0xc>

0002ed04 <uart_hal_open>:
{
   2ed04:	b550      	push	{r4, r6, lr}
   2ed06:	b083      	sub	sp, #12
   2ed08:	4606      	mov	r6, r0
    assert(dev->ud_priv);
   2ed0a:	6b80      	ldr	r0, [r0, #56]	; 0x38
   2ed0c:	2800      	cmp	r0, #0
   2ed0e:	d02b      	beq.n	2ed68 <uart_hal_open+0x64>
   2ed10:	4614      	mov	r4, r2
    if (!uc) {
   2ed12:	2a00      	cmp	r2, #0
   2ed14:	d032      	beq.n	2ed7c <uart_hal_open+0x78>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
   2ed16:	7ef3      	ldrb	r3, [r6, #27]
   2ed18:	f013 0f02 	tst.w	r3, #2
   2ed1c:	d130      	bne.n	2ed80 <uart_hal_open+0x7c>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
   2ed1e:	7913      	ldrb	r3, [r2, #4]
   2ed20:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
   2ed24:	79d3      	ldrb	r3, [r2, #7]
   2ed26:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
   2ed2a:	7993      	ldrb	r3, [r2, #6]
   2ed2c:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
   2ed30:	6813      	ldr	r3, [r2, #0]
   2ed32:	6333      	str	r3, [r6, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
   2ed34:	7953      	ldrb	r3, [r2, #5]
   2ed36:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
   2ed3a:	6953      	ldr	r3, [r2, #20]
   2ed3c:	9300      	str	r3, [sp, #0]
   2ed3e:	68d3      	ldr	r3, [r2, #12]
   2ed40:	6912      	ldr	r2, [r2, #16]
   2ed42:	68a1      	ldr	r1, [r4, #8]
   2ed44:	3801      	subs	r0, #1
   2ed46:	f000 f8fb 	bl	2ef40 <hal_uart_init_cbs>
    if (rc) {
   2ed4a:	b9e0      	cbnz	r0, 2ed86 <uart_hal_open+0x82>
    return (intptr_t)(dev->ud_priv) - 1;
   2ed4c:	6bb0      	ldr	r0, [r6, #56]	; 0x38
      uc->uc_stopbits, (enum hal_uart_parity)uc->uc_parity, (enum hal_uart_flow_ctl)uc->uc_flow_ctl);
   2ed4e:	79a3      	ldrb	r3, [r4, #6]
   2ed50:	79e2      	ldrb	r2, [r4, #7]
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
   2ed52:	9201      	str	r2, [sp, #4]
   2ed54:	9300      	str	r3, [sp, #0]
   2ed56:	7963      	ldrb	r3, [r4, #5]
   2ed58:	7922      	ldrb	r2, [r4, #4]
   2ed5a:	6821      	ldr	r1, [r4, #0]
   2ed5c:	3801      	subs	r0, #1
   2ed5e:	f000 fbf9 	bl	2f554 <hal_uart_config>
    if (rc) {
   2ed62:	b170      	cbz	r0, 2ed82 <uart_hal_open+0x7e>
        return OS_EINVAL;
   2ed64:	2002      	movs	r0, #2
   2ed66:	e00c      	b.n	2ed82 <uart_hal_open+0x7e>
    assert(dev->ud_priv);
   2ed68:	f7e5 fccc 	bl	14704 <hal_debugger_connected>
   2ed6c:	b100      	cbz	r0, 2ed70 <uart_hal_open+0x6c>
   2ed6e:	be01      	bkpt	0x0001
   2ed70:	2300      	movs	r3, #0
   2ed72:	461a      	mov	r2, r3
   2ed74:	4619      	mov	r1, r3
   2ed76:	4618      	mov	r0, r3
   2ed78:	f7e9 ffd4 	bl	18d24 <__assert_func>
        return OS_EINVAL;
   2ed7c:	2002      	movs	r0, #2
   2ed7e:	e000      	b.n	2ed82 <uart_hal_open+0x7e>
        return OS_EBUSY;
   2ed80:	200b      	movs	r0, #11
}
   2ed82:	b003      	add	sp, #12
   2ed84:	bd50      	pop	{r4, r6, pc}
        return OS_EINVAL;
   2ed86:	2002      	movs	r0, #2
   2ed88:	e7fb      	b.n	2ed82 <uart_hal_open+0x7e>
	...

0002ed8c <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
   2ed8c:	b570      	push	{r4, r5, r6, lr}
   2ed8e:	4604      	mov	r4, r0
   2ed90:	460e      	mov	r6, r1
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
   2ed92:	69c5      	ldr	r5, [r0, #28]
   2ed94:	4628      	mov	r0, r5
   2ed96:	f7eb ffd4 	bl	1ad42 <strlen>
   2ed9a:	3801      	subs	r0, #1
   2ed9c:	5c28      	ldrb	r0, [r5, r0]
    if (!isdigit((unsigned char)ch)) {
   2ed9e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2eda2:	2b09      	cmp	r3, #9
   2eda4:	d816      	bhi.n	2edd4 <uart_hal_init+0x48>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
   2eda6:	f1a0 032f 	sub.w	r3, r0, #47	; 0x2f
   2edaa:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
   2edac:	4b0a      	ldr	r3, [pc, #40]	; (2edd8 <uart_hal_init+0x4c>)
   2edae:	6023      	str	r3, [r4, #0]
   2edb0:	4b0a      	ldr	r3, [pc, #40]	; (2eddc <uart_hal_init+0x50>)
   2edb2:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
   2edb4:	4b0a      	ldr	r3, [pc, #40]	; (2ede0 <uart_hal_init+0x54>)
   2edb6:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
   2edb8:	4b0a      	ldr	r3, [pc, #40]	; (2ede4 <uart_hal_init+0x58>)
   2edba:	60a3      	str	r3, [r4, #8]

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
   2edbc:	4b0a      	ldr	r3, [pc, #40]	; (2ede8 <uart_hal_init+0x5c>)
   2edbe:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
   2edc0:	4b0a      	ldr	r3, [pc, #40]	; (2edec <uart_hal_init+0x60>)
   2edc2:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
   2edc4:	4b0a      	ldr	r3, [pc, #40]	; (2edf0 <uart_hal_init+0x64>)
   2edc6:	62e3      	str	r3, [r4, #44]	; 0x2c

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
   2edc8:	4631      	mov	r1, r6
   2edca:	3830      	subs	r0, #48	; 0x30
   2edcc:	f000 f974 	bl	2f0b8 <hal_uart_init>

    return OS_OK;
   2edd0:	2000      	movs	r0, #0
}
   2edd2:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   2edd4:	2002      	movs	r0, #2
   2edd6:	e7fc      	b.n	2edd2 <uart_hal_init+0x46>
   2edd8:	0002ed05 	.word	0x0002ed05
   2eddc:	0002ecf3 	.word	0x0002ecf3
   2ede0:	0002ecc7 	.word	0x0002ecc7
   2ede4:	0002ec9b 	.word	0x0002ec9b
   2ede8:	0002ec79 	.word	0x0002ec79
   2edec:	0002ec57 	.word	0x0002ec57
   2edf0:	0002ec35 	.word	0x0002ec35

0002edf4 <apollo3_uart_irqh_x>:
    UARTn(0)->DR = data;
}

static void
apollo3_uart_irqh_x(int num)
{
   2edf4:	b538      	push	{r3, r4, r5, lr}
   2edf6:	4604      	mov	r4, r0

    os_trace_isr_enter();

    u = &uarts[num];

    status = UARTn(0)->IES;
   2edf8:	4b2f      	ldr	r3, [pc, #188]	; (2eeb8 <apollo3_uart_irqh_x+0xc4>)
   2edfa:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    UARTn(0)->IEC &= ~status;
   2edfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2edfe:	ea22 0205 	bic.w	r2, r2, r5
   2ee02:	645a      	str	r2, [r3, #68]	; 0x44

    if (status & (UART0_IES_TXRIS_Msk)) {
   2ee04:	f015 0f20 	tst.w	r5, #32
   2ee08:	d034      	beq.n	2ee74 <apollo3_uart_irqh_x+0x80>
        if (u->u_tx_started) {
   2ee0a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   2ee0e:	4a2b      	ldr	r2, [pc, #172]	; (2eebc <apollo3_uart_irqh_x+0xc8>)
   2ee10:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   2ee14:	f013 0f04 	tst.w	r3, #4
   2ee18:	d02c      	beq.n	2ee74 <apollo3_uart_irqh_x+0x80>
            while (1) {
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
   2ee1a:	4b27      	ldr	r3, [pc, #156]	; (2eeb8 <apollo3_uart_irqh_x+0xc4>)
   2ee1c:	699b      	ldr	r3, [r3, #24]
   2ee1e:	f013 0f20 	tst.w	r3, #32
   2ee22:	d127      	bne.n	2ee74 <apollo3_uart_irqh_x+0x80>
                    break;
                }

                data = u->u_tx_func(u->u_func_arg);
   2ee24:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2ee28:	4a24      	ldr	r2, [pc, #144]	; (2eebc <apollo3_uart_irqh_x+0xc8>)
   2ee2a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2ee2e:	689a      	ldr	r2, [r3, #8]
   2ee30:	6918      	ldr	r0, [r3, #16]
   2ee32:	4790      	blx	r2
                if (data < 0) {
   2ee34:	2800      	cmp	r0, #0
   2ee36:	db02      	blt.n	2ee3e <apollo3_uart_irqh_x+0x4a>
                    apollo3_uart_disable_tx_irq();
                    u->u_tx_started = 0;
                    break;
                }

                UARTn(0)->DR = data;
   2ee38:	4b1f      	ldr	r3, [pc, #124]	; (2eeb8 <apollo3_uart_irqh_x+0xc4>)
   2ee3a:	6018      	str	r0, [r3, #0]
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
   2ee3c:	e7ed      	b.n	2ee1a <apollo3_uart_irqh_x+0x26>
                    if (u->u_tx_done) {
   2ee3e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2ee42:	4a1e      	ldr	r2, [pc, #120]	; (2eebc <apollo3_uart_irqh_x+0xc8>)
   2ee44:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2ee48:	68d9      	ldr	r1, [r3, #12]
   2ee4a:	b129      	cbz	r1, 2ee58 <apollo3_uart_irqh_x+0x64>
                        u->u_tx_done(u->u_func_arg);
   2ee4c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2ee50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2ee54:	6918      	ldr	r0, [r3, #16]
   2ee56:	4788      	blx	r1
    UARTn(0)->IER &= ~(AM_HAL_UART_INT_TX);
   2ee58:	4a17      	ldr	r2, [pc, #92]	; (2eeb8 <apollo3_uart_irqh_x+0xc4>)
   2ee5a:	6b93      	ldr	r3, [r2, #56]	; 0x38
   2ee5c:	f023 0320 	bic.w	r3, r3, #32
   2ee60:	6393      	str	r3, [r2, #56]	; 0x38
                    u->u_tx_started = 0;
   2ee62:	4b16      	ldr	r3, [pc, #88]	; (2eebc <apollo3_uart_irqh_x+0xc8>)
   2ee64:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   2ee68:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
   2ee6c:	f36f 0182 	bfc	r1, #2, #1
   2ee70:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
            }
        }
    }

    if (status & (UART0_IES_RXRIS_Msk | UART0_IES_RTRIS_Msk)) {
   2ee74:	f015 0f50 	tst.w	r5, #80	; 0x50
   2ee78:	d100      	bne.n	2ee7c <apollo3_uart_irqh_x+0x88>
            }
        }
    }

    os_trace_isr_exit();
}
   2ee7a:	bd38      	pop	{r3, r4, r5, pc}
        while (!(UARTn(0)->FR & UART0_FR_RXFE_Msk)) {
   2ee7c:	4b0e      	ldr	r3, [pc, #56]	; (2eeb8 <apollo3_uart_irqh_x+0xc4>)
   2ee7e:	699b      	ldr	r3, [r3, #24]
   2ee80:	f013 0f10 	tst.w	r3, #16
   2ee84:	d1f9      	bne.n	2ee7a <apollo3_uart_irqh_x+0x86>
            u->u_rx_buf = UARTn(0)->DR;
   2ee86:	4b0c      	ldr	r3, [pc, #48]	; (2eeb8 <apollo3_uart_irqh_x+0xc4>)
   2ee88:	6819      	ldr	r1, [r3, #0]
   2ee8a:	b2c9      	uxtb	r1, r1
   2ee8c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2ee90:	4a0a      	ldr	r2, [pc, #40]	; (2eebc <apollo3_uart_irqh_x+0xc8>)
   2ee92:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2ee96:	7059      	strb	r1, [r3, #1]
            rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   2ee98:	685a      	ldr	r2, [r3, #4]
   2ee9a:	6918      	ldr	r0, [r3, #16]
   2ee9c:	4790      	blx	r2
            if (rc < 0) {
   2ee9e:	2800      	cmp	r0, #0
   2eea0:	daec      	bge.n	2ee7c <apollo3_uart_irqh_x+0x88>
                u->u_rx_stall = 1;
   2eea2:	4a06      	ldr	r2, [pc, #24]	; (2eebc <apollo3_uart_irqh_x+0xc8>)
   2eea4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2eea8:	f812 3034 	ldrb.w	r3, [r2, r4, lsl #3]
   2eeac:	f043 0302 	orr.w	r3, r3, #2
   2eeb0:	f802 3034 	strb.w	r3, [r2, r4, lsl #3]
                break;
   2eeb4:	e7e1      	b.n	2ee7a <apollo3_uart_irqh_x+0x86>
   2eeb6:	bf00      	nop
   2eeb8:	4001c000 	.word	0x4001c000
   2eebc:	10007188 	.word	0x10007188

0002eec0 <apollo3_uart_irqh_0>:

static void apollo3_uart_irqh_0(void) { apollo3_uart_irqh_x(0); }
   2eec0:	b508      	push	{r3, lr}
   2eec2:	2000      	movs	r0, #0
   2eec4:	f7ff ff96 	bl	2edf4 <apollo3_uart_irqh_x>
   2eec8:	bd08      	pop	{r3, pc}

0002eeca <apollo3_uart_irqh_1>:
static void apollo3_uart_irqh_1(void) { apollo3_uart_irqh_x(1); }
   2eeca:	b508      	push	{r3, lr}
   2eecc:	2001      	movs	r0, #1
   2eece:	f7ff ff91 	bl	2edf4 <apollo3_uart_irqh_x>
   2eed2:	bd08      	pop	{r3, pc}

0002eed4 <apollo3_uart_irq_info>:
apollo3_uart_irq_info(int port, int *out_irqn, apollo3_uart_irqh_t **out_irqh)
{
    apollo3_uart_irqh_t *irqh;
    int irqn;

    switch (port) {
   2eed4:	b148      	cbz	r0, 2eeea <apollo3_uart_irq_info+0x16>
   2eed6:	2801      	cmp	r0, #1
   2eed8:	d10a      	bne.n	2eef0 <apollo3_uart_irq_info+0x1c>
        irqn = UART0_IRQn;
        irqh = apollo3_uart_irqh_0;
        break;

    case 1:
        irqn = UART1_IRQn;
   2eeda:	2010      	movs	r0, #16
        irqh = apollo3_uart_irqh_1;
   2eedc:	4b07      	ldr	r3, [pc, #28]	; (2eefc <apollo3_uart_irq_info+0x28>)

    default:
        return -1;
    }

    if (out_irqn != NULL) {
   2eede:	b101      	cbz	r1, 2eee2 <apollo3_uart_irq_info+0xe>
        *out_irqn = irqn;
   2eee0:	6008      	str	r0, [r1, #0]
    }
    if (out_irqh != NULL) {
   2eee2:	b142      	cbz	r2, 2eef6 <apollo3_uart_irq_info+0x22>
        *out_irqh = irqh;
   2eee4:	6013      	str	r3, [r2, #0]
    }
    return 0;
   2eee6:	2000      	movs	r0, #0
   2eee8:	4770      	bx	lr
    switch (port) {
   2eeea:	200f      	movs	r0, #15
   2eeec:	4b04      	ldr	r3, [pc, #16]	; (2ef00 <apollo3_uart_irq_info+0x2c>)
   2eeee:	e7f6      	b.n	2eede <apollo3_uart_irq_info+0xa>
   2eef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2eef4:	4770      	bx	lr
    return 0;
   2eef6:	2000      	movs	r0, #0
}
   2eef8:	4770      	bx	lr
   2eefa:	bf00      	nop
   2eefc:	0002eecb 	.word	0x0002eecb
   2ef00:	0002eec1 	.word	0x0002eec1

0002ef04 <apollo3_uart_set_nvic>:

static void
apollo3_uart_set_nvic(int port)
{
   2ef04:	b500      	push	{lr}
   2ef06:	b083      	sub	sp, #12
    apollo3_uart_irqh_t *irqh;
    int irqn;
    int rc;

    rc = apollo3_uart_irq_info(port, &irqn, &irqh);
   2ef08:	aa01      	add	r2, sp, #4
   2ef0a:	4669      	mov	r1, sp
   2ef0c:	f7ff ffe2 	bl	2eed4 <apollo3_uart_irq_info>
    assert(rc == 0);
   2ef10:	b950      	cbnz	r0, 2ef28 <apollo3_uart_set_nvic+0x24>

    NVIC_SetVector(irqn, (uint32_t)irqh);
   2ef12:	f99d 3000 	ldrsb.w	r3, [sp]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   2ef16:	4a09      	ldr	r2, [pc, #36]	; (2ef3c <apollo3_uart_set_nvic+0x38>)
   2ef18:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   2ef1a:	3310      	adds	r3, #16
   2ef1c:	9901      	ldr	r1, [sp, #4]
   2ef1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   2ef22:	b003      	add	sp, #12
   2ef24:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   2ef28:	f7e5 fbec 	bl	14704 <hal_debugger_connected>
   2ef2c:	b100      	cbz	r0, 2ef30 <apollo3_uart_set_nvic+0x2c>
   2ef2e:	be01      	bkpt	0x0001
   2ef30:	2300      	movs	r3, #0
   2ef32:	461a      	mov	r2, r3
   2ef34:	4619      	mov	r1, r3
   2ef36:	4618      	mov	r0, r3
   2ef38:	f7e9 fef4 	bl	18d24 <__assert_func>
   2ef3c:	e000ed00 	.word	0xe000ed00

0002ef40 <hal_uart_init_cbs>:
    if (port >= UART_CNT) {
   2ef40:	2801      	cmp	r0, #1
   2ef42:	dc14      	bgt.n	2ef6e <hal_uart_init_cbs+0x2e>
{
   2ef44:	b430      	push	{r4, r5}
    if (u->u_open) {
   2ef46:	eb00 0440 	add.w	r4, r0, r0, lsl #1
   2ef4a:	4d0c      	ldr	r5, [pc, #48]	; (2ef7c <hal_uart_init_cbs+0x3c>)
   2ef4c:	f815 4034 	ldrb.w	r4, [r5, r4, lsl #3]
   2ef50:	f014 0f01 	tst.w	r4, #1
   2ef54:	d10e      	bne.n	2ef74 <hal_uart_init_cbs+0x34>
    u->u_rx_func = rx_func;
   2ef56:	eb00 0440 	add.w	r4, r0, r0, lsl #1
   2ef5a:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   2ef5e:	6063      	str	r3, [r4, #4]
    u->u_tx_func = tx_func;
   2ef60:	60a1      	str	r1, [r4, #8]
    u->u_tx_done = tx_done;
   2ef62:	60e2      	str	r2, [r4, #12]
    u->u_func_arg = arg;
   2ef64:	9b02      	ldr	r3, [sp, #8]
   2ef66:	6123      	str	r3, [r4, #16]
    return 0;
   2ef68:	2000      	movs	r0, #0
}
   2ef6a:	bc30      	pop	{r4, r5}
   2ef6c:	4770      	bx	lr
        return -1;
   2ef6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2ef72:	4770      	bx	lr
        return -1;
   2ef74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ef78:	e7f7      	b.n	2ef6a <hal_uart_init_cbs+0x2a>
   2ef7a:	bf00      	nop
   2ef7c:	10007188 	.word	0x10007188

0002ef80 <hal_uart_start_tx>:
    if (port >= UART_CNT) {
   2ef80:	2801      	cmp	r0, #1
   2ef82:	dc49      	bgt.n	2f018 <hal_uart_start_tx+0x98>
{
   2ef84:	b538      	push	{r3, r4, r5, lr}
   2ef86:	4604      	mov	r4, r0
    if (!u->u_open) {
   2ef88:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   2ef8c:	4a23      	ldr	r2, [pc, #140]	; (2f01c <hal_uart_start_tx+0x9c>)
   2ef8e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   2ef92:	f013 0f01 	tst.w	r3, #1
   2ef96:	d100      	bne.n	2ef9a <hal_uart_start_tx+0x1a>
}
   2ef98:	bd38      	pop	{r3, r4, r5, pc}
    OS_ENTER_CRITICAL(sr);
   2ef9a:	f7eb fc97 	bl	1a8cc <os_arch_save_sr>
   2ef9e:	4605      	mov	r5, r0
    if (u->u_tx_started == 0) {
   2efa0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2efa4:	4a1d      	ldr	r2, [pc, #116]	; (2f01c <hal_uart_start_tx+0x9c>)
   2efa6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   2efaa:	f013 0f04 	tst.w	r3, #4
   2efae:	d11f      	bne.n	2eff0 <hal_uart_start_tx+0x70>
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
   2efb0:	4b1b      	ldr	r3, [pc, #108]	; (2f020 <hal_uart_start_tx+0xa0>)
   2efb2:	699b      	ldr	r3, [r3, #24]
   2efb4:	f013 0f20 	tst.w	r3, #32
   2efb8:	d10c      	bne.n	2efd4 <hal_uart_start_tx+0x54>
            data = u->u_tx_func(u->u_func_arg);
   2efba:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2efbe:	4a17      	ldr	r2, [pc, #92]	; (2f01c <hal_uart_start_tx+0x9c>)
   2efc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2efc4:	689a      	ldr	r2, [r3, #8]
   2efc6:	6918      	ldr	r0, [r3, #16]
   2efc8:	4790      	blx	r2
            if (data < 0) {
   2efca:	2800      	cmp	r0, #0
   2efcc:	db14      	blt.n	2eff8 <hal_uart_start_tx+0x78>
            UARTn(0)->DR = data;
   2efce:	4b14      	ldr	r3, [pc, #80]	; (2f020 <hal_uart_start_tx+0xa0>)
   2efd0:	6018      	str	r0, [r3, #0]
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
   2efd2:	e7ed      	b.n	2efb0 <hal_uart_start_tx+0x30>
                u->u_tx_started = 1;
   2efd4:	4a11      	ldr	r2, [pc, #68]	; (2f01c <hal_uart_start_tx+0x9c>)
   2efd6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2efda:	f812 3034 	ldrb.w	r3, [r2, r4, lsl #3]
   2efde:	f043 0304 	orr.w	r3, r3, #4
   2efe2:	f802 3034 	strb.w	r3, [r2, r4, lsl #3]
    UARTn(0)->IER |= (AM_HAL_UART_INT_TX);
   2efe6:	4a0e      	ldr	r2, [pc, #56]	; (2f020 <hal_uart_start_tx+0xa0>)
   2efe8:	6b93      	ldr	r3, [r2, #56]	; 0x38
   2efea:	f043 0320 	orr.w	r3, r3, #32
   2efee:	6393      	str	r3, [r2, #56]	; 0x38
    OS_EXIT_CRITICAL(sr);
   2eff0:	4628      	mov	r0, r5
   2eff2:	f7eb fc71 	bl	1a8d8 <os_arch_restore_sr>
   2eff6:	e7cf      	b.n	2ef98 <hal_uart_start_tx+0x18>
                if (u->u_tx_done) {
   2eff8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2effc:	4a07      	ldr	r2, [pc, #28]	; (2f01c <hal_uart_start_tx+0x9c>)
   2effe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2f002:	68da      	ldr	r2, [r3, #12]
   2f004:	2a00      	cmp	r2, #0
   2f006:	d0f3      	beq.n	2eff0 <hal_uart_start_tx+0x70>
                    u->u_tx_done(u->u_func_arg);
   2f008:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2f00c:	4b03      	ldr	r3, [pc, #12]	; (2f01c <hal_uart_start_tx+0x9c>)
   2f00e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   2f012:	6920      	ldr	r0, [r4, #16]
   2f014:	4790      	blx	r2
   2f016:	e7eb      	b.n	2eff0 <hal_uart_start_tx+0x70>
   2f018:	4770      	bx	lr
   2f01a:	bf00      	nop
   2f01c:	10007188 	.word	0x10007188
   2f020:	4001c000 	.word	0x4001c000

0002f024 <hal_uart_start_rx>:
    if (port >= UART_CNT) {
   2f024:	2801      	cmp	r0, #1
   2f026:	dc2c      	bgt.n	2f082 <hal_uart_start_rx+0x5e>
{
   2f028:	b538      	push	{r3, r4, r5, lr}
   2f02a:	4604      	mov	r4, r0
    if (!u->u_open) {
   2f02c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   2f030:	4a14      	ldr	r2, [pc, #80]	; (2f084 <hal_uart_start_rx+0x60>)
   2f032:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   2f036:	f013 0f01 	tst.w	r3, #1
   2f03a:	d002      	beq.n	2f042 <hal_uart_start_rx+0x1e>
    if (u->u_rx_stall) {
   2f03c:	f013 0f02 	tst.w	r3, #2
   2f040:	d100      	bne.n	2f044 <hal_uart_start_rx+0x20>
}
   2f042:	bd38      	pop	{r3, r4, r5, pc}
        OS_ENTER_CRITICAL(sr);
   2f044:	f7eb fc42 	bl	1a8cc <os_arch_save_sr>
   2f048:	4605      	mov	r5, r0
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   2f04a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2f04e:	4a0d      	ldr	r2, [pc, #52]	; (2f084 <hal_uart_start_rx+0x60>)
   2f050:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2f054:	685a      	ldr	r2, [r3, #4]
   2f056:	7859      	ldrb	r1, [r3, #1]
   2f058:	6918      	ldr	r0, [r3, #16]
   2f05a:	4790      	blx	r2
        if (rc == 0) {
   2f05c:	b968      	cbnz	r0, 2f07a <hal_uart_start_rx+0x56>
            u->u_rx_stall = 0;
   2f05e:	4b09      	ldr	r3, [pc, #36]	; (2f084 <hal_uart_start_rx+0x60>)
   2f060:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2f064:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
   2f068:	f36f 0241 	bfc	r2, #1, #1
   2f06c:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
    UARTn(0)->IER |= (AM_HAL_UART_INT_RX |
   2f070:	4a05      	ldr	r2, [pc, #20]	; (2f088 <hal_uart_start_rx+0x64>)
   2f072:	6b93      	ldr	r3, [r2, #56]	; 0x38
   2f074:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   2f078:	6393      	str	r3, [r2, #56]	; 0x38
        OS_EXIT_CRITICAL(sr);
   2f07a:	4628      	mov	r0, r5
   2f07c:	f7eb fc2c 	bl	1a8d8 <os_arch_restore_sr>
   2f080:	e7df      	b.n	2f042 <hal_uart_start_rx+0x1e>
   2f082:	4770      	bx	lr
   2f084:	10007188 	.word	0x10007188
   2f088:	4001c000 	.word	0x4001c000

0002f08c <hal_uart_blocking_tx>:
    if (port >= UART_CNT) {
   2f08c:	2801      	cmp	r0, #1
   2f08e:	dc0e      	bgt.n	2f0ae <hal_uart_blocking_tx+0x22>
    if (!u->u_open) {
   2f090:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   2f094:	4b06      	ldr	r3, [pc, #24]	; (2f0b0 <hal_uart_blocking_tx+0x24>)
   2f096:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
   2f09a:	f013 0f01 	tst.w	r3, #1
   2f09e:	d006      	beq.n	2f0ae <hal_uart_blocking_tx+0x22>
    while (UARTn(0)->FR & UART0_FR_TXFF_Msk);
   2f0a0:	4b04      	ldr	r3, [pc, #16]	; (2f0b4 <hal_uart_blocking_tx+0x28>)
   2f0a2:	699b      	ldr	r3, [r3, #24]
   2f0a4:	f013 0f20 	tst.w	r3, #32
   2f0a8:	d1fa      	bne.n	2f0a0 <hal_uart_blocking_tx+0x14>
    UARTn(0)->DR = data;
   2f0aa:	4b02      	ldr	r3, [pc, #8]	; (2f0b4 <hal_uart_blocking_tx+0x28>)
   2f0ac:	6019      	str	r1, [r3, #0]
}
   2f0ae:	4770      	bx	lr
   2f0b0:	10007188 	.word	0x10007188
   2f0b4:	4001c000 	.word	0x4001c000

0002f0b8 <hal_uart_init>:
    struct apollo3_uart_cfg *cfg;
    am_hal_gpio_pincfg_t pincfg;

    cfg = arg;

    if (port >= UART_CNT) {
   2f0b8:	2801      	cmp	r0, #1
   2f0ba:	f300 822f 	bgt.w	2f51c <hal_uart_init+0x464>
{
   2f0be:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f0c0:	b083      	sub	sp, #12
   2f0c2:	4604      	mov	r4, r0
   2f0c4:	460f      	mov	r7, r1
        return SYS_EINVAL;
    }

    am_hal_uart_initialize(port, &(uarts[port].uart_handle));
   2f0c6:	4e92      	ldr	r6, [pc, #584]	; (2f310 <hal_uart_init+0x258>)
   2f0c8:	0045      	lsls	r5, r0, #1
   2f0ca:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   2f0ce:	00db      	lsls	r3, r3, #3
   2f0d0:	3310      	adds	r3, #16
   2f0d2:	4433      	add	r3, r6
   2f0d4:	1d19      	adds	r1, r3, #4
   2f0d6:	f000 fb71 	bl	2f7bc <am_hal_uart_initialize>

    am_hal_uart_power_control(uarts[port].uart_handle, AM_HAL_SYSCTRL_WAKE, false);
   2f0da:	4425      	add	r5, r4
   2f0dc:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   2f0e0:	2200      	movs	r2, #0
   2f0e2:	4611      	mov	r1, r2
   2f0e4:	6968      	ldr	r0, [r5, #20]
   2f0e6:	f000 fca3 	bl	2fa30 <am_hal_uart_power_control>

    am_hal_uart_clock_speed_e eUartClockSpeed = eUART_CLK_SPEED_DEFAULT;
   2f0ea:	2100      	movs	r1, #0
   2f0ec:	f88d 1007 	strb.w	r1, [sp, #7]
    am_hal_uart_control(uarts[port].uart_handle, AM_HAL_UART_CONTROL_CLKSEL, &eUartClockSpeed);
   2f0f0:	f10d 0207 	add.w	r2, sp, #7
   2f0f4:	6968      	ldr	r0, [r5, #20]
   2f0f6:	f000 fd0f 	bl	2fb18 <am_hal_uart_control>
    am_hal_uart_configure(uarts[port].uart_handle, &g_sUartConfig);
   2f0fa:	4986      	ldr	r1, [pc, #536]	; (2f314 <hal_uart_init+0x25c>)
   2f0fc:	6968      	ldr	r0, [r5, #20]
   2f0fe:	f000 fbfb 	bl	2f8f8 <am_hal_uart_configure>

    switch (port) {
   2f102:	b12c      	cbz	r4, 2f110 <hal_uart_init+0x58>
   2f104:	2c01      	cmp	r4, #1
   2f106:	d061      	beq.n	2f1cc <hal_uart_init+0x114>
   2f108:	f06f 0001 	mvn.w	r0, #1
    }

    apollo3_uart_set_nvic(port);

    return 0;
}
   2f10c:	b003      	add	sp, #12
   2f10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        switch (cfg->suc_pin_tx) {
   2f110:	f997 3000 	ldrsb.w	r3, [r7]
   2f114:	3b01      	subs	r3, #1
   2f116:	2b2f      	cmp	r3, #47	; 0x2f
   2f118:	f200 8203 	bhi.w	2f522 <hal_uart_init+0x46a>
   2f11c:	e8df f013 	tbh	[pc, r3, lsl #1]
   2f120:	02010042 	.word	0x02010042
   2f124:	02010201 	.word	0x02010201
   2f128:	02010201 	.word	0x02010201
   2f12c:	0201004c 	.word	0x0201004c
   2f130:	02010201 	.word	0x02010201
   2f134:	02010201 	.word	0x02010201
   2f138:	02010201 	.word	0x02010201
   2f13c:	00510201 	.word	0x00510201
   2f140:	02010201 	.word	0x02010201
   2f144:	00470201 	.word	0x00470201
   2f148:	00300201 	.word	0x00300201
   2f14c:	02010201 	.word	0x02010201
   2f150:	00510201 	.word	0x00510201
   2f154:	00510201 	.word	0x00510201
   2f158:	00470201 	.word	0x00470201
   2f15c:	02010201 	.word	0x02010201
   2f160:	02010201 	.word	0x02010201
   2f164:	02010201 	.word	0x02010201
   2f168:	02010201 	.word	0x02010201
   2f16c:	02010030 	.word	0x02010030
   2f170:	02010051 	.word	0x02010051
   2f174:	00510201 	.word	0x00510201
   2f178:	02010201 	.word	0x02010201
   2f17c:	00300201 	.word	0x00300201
            pincfg.uFuncSel = 0;
   2f180:	2500      	movs	r5, #0
   2f182:	f36f 0502 	bfc	r5, #0, #3
    pincfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA;
   2f186:	f36f 2509 	bfc	r5, #8, #2
    am_hal_gpio_pinconfig(cfg->suc_pin_tx, pincfg);
   2f18a:	4629      	mov	r1, r5
   2f18c:	f997 0000 	ldrsb.w	r0, [r7]
   2f190:	f7ff f974 	bl	2e47c <am_hal_gpio_pinconfig>
    switch (port) {
   2f194:	2c00      	cmp	r4, #0
   2f196:	d062      	beq.n	2f25e <hal_uart_init+0x1a6>
   2f198:	2c01      	cmp	r4, #1
   2f19a:	f000 80bd 	beq.w	2f318 <hal_uart_init+0x260>
   2f19e:	f06f 0001 	mvn.w	r0, #1
   2f1a2:	e7b3      	b.n	2f10c <hal_uart_init+0x54>
            pincfg.uFuncSel = 2;
   2f1a4:	2500      	movs	r5, #0
   2f1a6:	2302      	movs	r3, #2
   2f1a8:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f1ac:	e7eb      	b.n	2f186 <hal_uart_init+0xce>
            pincfg.uFuncSel = 4;
   2f1ae:	2500      	movs	r5, #0
   2f1b0:	2304      	movs	r3, #4
   2f1b2:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f1b6:	e7e6      	b.n	2f186 <hal_uart_init+0xce>
            pincfg.uFuncSel = 5;
   2f1b8:	2500      	movs	r5, #0
   2f1ba:	2305      	movs	r3, #5
   2f1bc:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f1c0:	e7e1      	b.n	2f186 <hal_uart_init+0xce>
            pincfg.uFuncSel = 6;
   2f1c2:	2500      	movs	r5, #0
   2f1c4:	2306      	movs	r3, #6
   2f1c6:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f1ca:	e7dc      	b.n	2f186 <hal_uart_init+0xce>
        switch (cfg->suc_pin_tx) {
   2f1cc:	f997 3000 	ldrsb.w	r3, [r7]
   2f1d0:	3b08      	subs	r3, #8
   2f1d2:	2b26      	cmp	r3, #38	; 0x26
   2f1d4:	f200 81a8 	bhi.w	2f528 <hal_uart_init+0x470>
   2f1d8:	e8df f013 	tbh	[pc, r3, lsl #1]
   2f1dc:	01a6003a 	.word	0x01a6003a
   2f1e0:	01a60027 	.word	0x01a60027
   2f1e4:	01a6003f 	.word	0x01a6003f
   2f1e8:	01a60030 	.word	0x01a60030
   2f1ec:	01a601a6 	.word	0x01a601a6
   2f1f0:	01a6003a 	.word	0x01a6003a
   2f1f4:	01a60035 	.word	0x01a60035
   2f1f8:	01a601a6 	.word	0x01a601a6
   2f1fc:	01a60027 	.word	0x01a60027
   2f200:	01a601a6 	.word	0x01a601a6
   2f204:	01a601a6 	.word	0x01a601a6
   2f208:	01a601a6 	.word	0x01a601a6
   2f20c:	01a601a6 	.word	0x01a601a6
   2f210:	003001a6 	.word	0x003001a6
   2f214:	003501a6 	.word	0x003501a6
   2f218:	002b01a6 	.word	0x002b01a6
   2f21c:	01a601a6 	.word	0x01a601a6
   2f220:	01a60027 	.word	0x01a60027
   2f224:	01a601a6 	.word	0x01a601a6
   2f228:	003a      	.short	0x003a
            pincfg.uFuncSel = 0;
   2f22a:	2500      	movs	r5, #0
   2f22c:	f36f 0502 	bfc	r5, #0, #3
            break;
   2f230:	e7a9      	b.n	2f186 <hal_uart_init+0xce>
            pincfg.uFuncSel = 1;
   2f232:	2500      	movs	r5, #0
   2f234:	2301      	movs	r3, #1
   2f236:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f23a:	e7a4      	b.n	2f186 <hal_uart_init+0xce>
            pincfg.uFuncSel = 2;
   2f23c:	2500      	movs	r5, #0
   2f23e:	2302      	movs	r3, #2
   2f240:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f244:	e79f      	b.n	2f186 <hal_uart_init+0xce>
            pincfg.uFuncSel = 5;
   2f246:	2500      	movs	r5, #0
   2f248:	2305      	movs	r3, #5
   2f24a:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f24e:	e79a      	b.n	2f186 <hal_uart_init+0xce>
            pincfg.uFuncSel = 6;
   2f250:	2500      	movs	r5, #0
   2f252:	2306      	movs	r3, #6
   2f254:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f258:	e795      	b.n	2f186 <hal_uart_init+0xce>
            pincfg.uFuncSel = 7;
   2f25a:	2507      	movs	r5, #7
            break;
   2f25c:	e793      	b.n	2f186 <hal_uart_init+0xce>
        switch (cfg->suc_pin_rx) {
   2f25e:	f997 3001 	ldrsb.w	r3, [r7, #1]
   2f262:	3b02      	subs	r3, #2
   2f264:	2b2f      	cmp	r3, #47	; 0x2f
   2f266:	f200 8162 	bhi.w	2f52e <hal_uart_init+0x476>
   2f26a:	e8df f013 	tbh	[pc, r3, lsl #1]
   2f26e:	0044      	.short	0x0044
   2f270:	01600160 	.word	0x01600160
   2f274:	01600160 	.word	0x01600160
   2f278:	01600160 	.word	0x01600160
   2f27c:	01600160 	.word	0x01600160
   2f280:	0160004c 	.word	0x0160004c
   2f284:	01600160 	.word	0x01600160
   2f288:	01600160 	.word	0x01600160
   2f28c:	0160004c 	.word	0x0160004c
   2f290:	01600160 	.word	0x01600160
   2f294:	01600048 	.word	0x01600048
   2f298:	01600030 	.word	0x01600030
   2f29c:	01600160 	.word	0x01600160
   2f2a0:	01600030 	.word	0x01600030
   2f2a4:	0160004c 	.word	0x0160004c
   2f2a8:	01600048 	.word	0x01600048
   2f2ac:	004c0160 	.word	0x004c0160
   2f2b0:	01600160 	.word	0x01600160
   2f2b4:	01600160 	.word	0x01600160
   2f2b8:	00300160 	.word	0x00300160
   2f2bc:	01600160 	.word	0x01600160
   2f2c0:	01600160 	.word	0x01600160
   2f2c4:	0160004c 	.word	0x0160004c
   2f2c8:	01600160 	.word	0x01600160
   2f2cc:	0030      	.short	0x0030
            pincfg.uFuncSel = 0;
   2f2ce:	f36f 0502 	bfc	r5, #0, #3
    am_hal_gpio_pinconfig(cfg->suc_pin_rx, pincfg);
   2f2d2:	4629      	mov	r1, r5
   2f2d4:	f997 0001 	ldrsb.w	r0, [r7, #1]
   2f2d8:	f7ff f8d0 	bl	2e47c <am_hal_gpio_pinconfig>
    if (cfg->suc_pin_rts >= 0) {
   2f2dc:	f997 0002 	ldrsb.w	r0, [r7, #2]
   2f2e0:	2800      	cmp	r0, #0
   2f2e2:	f2c0 80b3 	blt.w	2f44c <hal_uart_init+0x394>
      switch (port) {
   2f2e6:	2c00      	cmp	r4, #0
   2f2e8:	d062      	beq.n	2f3b0 <hal_uart_init+0x2f8>
   2f2ea:	2c01      	cmp	r4, #1
   2f2ec:	f000 8090 	beq.w	2f410 <hal_uart_init+0x358>
   2f2f0:	f06f 0001 	mvn.w	r0, #1
   2f2f4:	e70a      	b.n	2f10c <hal_uart_init+0x54>
            pincfg.uFuncSel = 2;
   2f2f6:	2302      	movs	r3, #2
   2f2f8:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f2fc:	e7e9      	b.n	2f2d2 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 4;
   2f2fe:	2304      	movs	r3, #4
   2f300:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f304:	e7e5      	b.n	2f2d2 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 6;
   2f306:	2306      	movs	r3, #6
   2f308:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f30c:	e7e1      	b.n	2f2d2 <hal_uart_init+0x21a>
   2f30e:	bf00      	nop
   2f310:	10007188 	.word	0x10007188
   2f314:	00037694 	.word	0x00037694
        switch (cfg->suc_pin_rx) {
   2f318:	f997 3001 	ldrsb.w	r3, [r7, #1]
   2f31c:	3b02      	subs	r3, #2
   2f31e:	2b2d      	cmp	r3, #45	; 0x2d
   2f320:	f200 8108 	bhi.w	2f534 <hal_uart_init+0x47c>
   2f324:	e8df f013 	tbh	[pc, r3, lsl #1]
   2f328:	0106002e 	.word	0x0106002e
   2f32c:	01060039 	.word	0x01060039
   2f330:	01060106 	.word	0x01060106
   2f334:	003d0106 	.word	0x003d0106
   2f338:	01060106 	.word	0x01060106
   2f33c:	00410106 	.word	0x00410106
   2f340:	00350106 	.word	0x00350106
   2f344:	01060106 	.word	0x01060106
   2f348:	003d0106 	.word	0x003d0106
   2f34c:	00390106 	.word	0x00390106
   2f350:	01060106 	.word	0x01060106
   2f354:	002e0106 	.word	0x002e0106
   2f358:	01060106 	.word	0x01060106
   2f35c:	01060106 	.word	0x01060106
   2f360:	01060106 	.word	0x01060106
   2f364:	01060106 	.word	0x01060106
   2f368:	01060106 	.word	0x01060106
   2f36c:	01060035 	.word	0x01060035
   2f370:	0106003d 	.word	0x0106003d
   2f374:	01060031 	.word	0x01060031
   2f378:	002e0106 	.word	0x002e0106
   2f37c:	01060106 	.word	0x01060106
   2f380:	003d0106 	.word	0x003d0106
            pincfg.uFuncSel = 0;
   2f384:	f36f 0502 	bfc	r5, #0, #3
            break;
   2f388:	e7a3      	b.n	2f2d2 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 1;
   2f38a:	2301      	movs	r3, #1
   2f38c:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f390:	e79f      	b.n	2f2d2 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 2;
   2f392:	2302      	movs	r3, #2
   2f394:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f398:	e79b      	b.n	2f2d2 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 5;
   2f39a:	2305      	movs	r3, #5
   2f39c:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f3a0:	e797      	b.n	2f2d2 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 6;
   2f3a2:	2306      	movs	r3, #6
   2f3a4:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f3a8:	e793      	b.n	2f2d2 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 7;
   2f3aa:	f045 0507 	orr.w	r5, r5, #7
            break;
   2f3ae:	e790      	b.n	2f2d2 <hal_uart_init+0x21a>
          switch (cfg->suc_pin_rts) {
   2f3b0:	1ec3      	subs	r3, r0, #3
   2f3b2:	2b26      	cmp	r3, #38	; 0x26
   2f3b4:	f200 80c1 	bhi.w	2f53a <hal_uart_init+0x482>
   2f3b8:	e8df f003 	tbb	[pc, r3]
   2f3bc:	bf17bf14 	.word	0xbf17bf14
   2f3c0:	bfbfbfbf 	.word	0xbfbfbfbf
   2f3c4:	bf23bfbf 	.word	0xbf23bfbf
   2f3c8:	1bbfbfbf 	.word	0x1bbfbfbf
   2f3cc:	bfbfbfbf 	.word	0xbfbfbfbf
   2f3d0:	bfbfbfbf 	.word	0xbfbfbfbf
   2f3d4:	bfbfbfbf 	.word	0xbfbfbfbf
   2f3d8:	1fbfbfbf 	.word	0x1fbfbfbf
   2f3dc:	bf17bf23 	.word	0xbf17bf23
   2f3e0:	bfbf      	.short	0xbfbf
   2f3e2:	27          	.byte	0x27
   2f3e3:	00          	.byte	0x00
              pincfg.uFuncSel = 0;
   2f3e4:	f36f 0502 	bfc	r5, #0, #3
              break;
   2f3e8:	e02d      	b.n	2f446 <hal_uart_init+0x38e>
              pincfg.uFuncSel = 2;
   2f3ea:	2302      	movs	r3, #2
   2f3ec:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   2f3f0:	e029      	b.n	2f446 <hal_uart_init+0x38e>
              pincfg.uFuncSel = 4;
   2f3f2:	2304      	movs	r3, #4
   2f3f4:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   2f3f8:	e025      	b.n	2f446 <hal_uart_init+0x38e>
              pincfg.uFuncSel = 5;
   2f3fa:	2305      	movs	r3, #5
   2f3fc:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   2f400:	e021      	b.n	2f446 <hal_uart_init+0x38e>
              pincfg.uFuncSel = 6;
   2f402:	2306      	movs	r3, #6
   2f404:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   2f408:	e01d      	b.n	2f446 <hal_uart_init+0x38e>
              pincfg.uFuncSel = 7;
   2f40a:	f045 0507 	orr.w	r5, r5, #7
              break;
   2f40e:	e01a      	b.n	2f446 <hal_uart_init+0x38e>
          switch (cfg->suc_pin_rts) {
   2f410:	f1a0 030a 	sub.w	r3, r0, #10
   2f414:	2b22      	cmp	r3, #34	; 0x22
   2f416:	f200 8093 	bhi.w	2f540 <hal_uart_init+0x488>
   2f41a:	e8df f003 	tbb	[pc, r3]
   2f41e:	9125      	.short	0x9125
   2f420:	91919191 	.word	0x91919191
   2f424:	91919129 	.word	0x91919129
   2f428:	91919129 	.word	0x91919129
   2f42c:	91919191 	.word	0x91919191
   2f430:	29259191 	.word	0x29259191
   2f434:	91219191 	.word	0x91219191
   2f438:	91919191 	.word	0x91919191
   2f43c:	91912591 	.word	0x91912591
   2f440:	12          	.byte	0x12
   2f441:	00          	.byte	0x00
              pincfg.uFuncSel = 0;
   2f442:	f36f 0502 	bfc	r5, #0, #3
      am_hal_gpio_pinconfig(cfg->suc_pin_rts, pincfg);
   2f446:	4629      	mov	r1, r5
   2f448:	f7ff f818 	bl	2e47c <am_hal_gpio_pinconfig>
    if (cfg->suc_pin_cts >= 0) {
   2f44c:	f997 0003 	ldrsb.w	r0, [r7, #3]
   2f450:	2800      	cmp	r0, #0
   2f452:	db57      	blt.n	2f504 <hal_uart_init+0x44c>
      switch (port) {
   2f454:	b17c      	cbz	r4, 2f476 <hal_uart_init+0x3be>
   2f456:	2c01      	cmp	r4, #1
   2f458:	d037      	beq.n	2f4ca <hal_uart_init+0x412>
   2f45a:	f06f 0001 	mvn.w	r0, #1
   2f45e:	e655      	b.n	2f10c <hal_uart_init+0x54>
              pincfg.uFuncSel = 2;
   2f460:	2302      	movs	r3, #2
   2f462:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   2f466:	e7ee      	b.n	2f446 <hal_uart_init+0x38e>
              pincfg.uFuncSel = 5;
   2f468:	2305      	movs	r3, #5
   2f46a:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   2f46e:	e7ea      	b.n	2f446 <hal_uart_init+0x38e>
              pincfg.uFuncSel = 7;
   2f470:	f045 0507 	orr.w	r5, r5, #7
              break;
   2f474:	e7e7      	b.n	2f446 <hal_uart_init+0x38e>
          switch (cfg->suc_pin_cts) {
   2f476:	1f03      	subs	r3, r0, #4
   2f478:	2b22      	cmp	r3, #34	; 0x22
   2f47a:	d864      	bhi.n	2f546 <hal_uart_init+0x48e>
   2f47c:	e8df f003 	tbb	[pc, r3]
   2f480:	63156312 	.word	0x63156312
   2f484:	63636363 	.word	0x63636363
   2f488:	63636321 	.word	0x63636321
   2f48c:	63636363 	.word	0x63636363
   2f490:	63636363 	.word	0x63636363
   2f494:	63636319 	.word	0x63636319
   2f498:	63631963 	.word	0x63631963
   2f49c:	63631d63 	.word	0x63631d63
   2f4a0:	6321      	.short	0x6321
   2f4a2:	15          	.byte	0x15
   2f4a3:	00          	.byte	0x00
              pincfg.uFuncSel = 0;
   2f4a4:	f36f 0502 	bfc	r5, #0, #3
              break;
   2f4a8:	e029      	b.n	2f4fe <hal_uart_init+0x446>
              pincfg.uFuncSel = 2;
   2f4aa:	2302      	movs	r3, #2
   2f4ac:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   2f4b0:	e025      	b.n	2f4fe <hal_uart_init+0x446>
              pincfg.uFuncSel = 4;
   2f4b2:	2304      	movs	r3, #4
   2f4b4:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   2f4b8:	e021      	b.n	2f4fe <hal_uart_init+0x446>
              pincfg.uFuncSel = 5;
   2f4ba:	2305      	movs	r3, #5
   2f4bc:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   2f4c0:	e01d      	b.n	2f4fe <hal_uart_init+0x446>
              pincfg.uFuncSel = 6;
   2f4c2:	2306      	movs	r3, #6
   2f4c4:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   2f4c8:	e019      	b.n	2f4fe <hal_uart_init+0x446>
          switch (cfg->suc_pin_cts) {
   2f4ca:	f1a0 030b 	sub.w	r3, r0, #11
   2f4ce:	2b22      	cmp	r3, #34	; 0x22
   2f4d0:	d83c      	bhi.n	2f54c <hal_uart_init+0x494>
   2f4d2:	e8df f003 	tbb	[pc, r3]
   2f4d6:	3b1c      	.short	0x3b1c
   2f4d8:	3b3b3b3b 	.word	0x3b3b3b3b
   2f4dc:	3b3b3b20 	.word	0x3b3b3b20
   2f4e0:	3b3b3b20 	.word	0x3b3b3b20
   2f4e4:	3b3b203b 	.word	0x3b3b203b
   2f4e8:	203b3b1c 	.word	0x203b3b1c
   2f4ec:	1c3b3b3b 	.word	0x1c3b3b3b
   2f4f0:	3b3b3b3b 	.word	0x3b3b3b3b
   2f4f4:	3b3b3b1c 	.word	0x3b3b3b1c
   2f4f8:	12          	.byte	0x12
   2f4f9:	00          	.byte	0x00
              pincfg.uFuncSel = 0;
   2f4fa:	f36f 0502 	bfc	r5, #0, #3
      am_hal_gpio_pinconfig(cfg->suc_pin_cts, pincfg);
   2f4fe:	4629      	mov	r1, r5
   2f500:	f7fe ffbc 	bl	2e47c <am_hal_gpio_pinconfig>
    apollo3_uart_set_nvic(port);
   2f504:	4620      	mov	r0, r4
   2f506:	f7ff fcfd 	bl	2ef04 <apollo3_uart_set_nvic>
    return 0;
   2f50a:	2000      	movs	r0, #0
   2f50c:	e5fe      	b.n	2f10c <hal_uart_init+0x54>
              pincfg.uFuncSel = 5;
   2f50e:	2305      	movs	r3, #5
   2f510:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   2f514:	e7f3      	b.n	2f4fe <hal_uart_init+0x446>
              pincfg.uFuncSel = 7;
   2f516:	f045 0507 	orr.w	r5, r5, #7
              break;
   2f51a:	e7f0      	b.n	2f4fe <hal_uart_init+0x446>
        return SYS_EINVAL;
   2f51c:	f06f 0001 	mvn.w	r0, #1
}
   2f520:	4770      	bx	lr
        switch (cfg->suc_pin_tx) {
   2f522:	f06f 0001 	mvn.w	r0, #1
   2f526:	e5f1      	b.n	2f10c <hal_uart_init+0x54>
        switch (cfg->suc_pin_tx) {
   2f528:	f06f 0001 	mvn.w	r0, #1
   2f52c:	e5ee      	b.n	2f10c <hal_uart_init+0x54>
        switch (cfg->suc_pin_rx) {
   2f52e:	f06f 0001 	mvn.w	r0, #1
   2f532:	e5eb      	b.n	2f10c <hal_uart_init+0x54>
        switch (cfg->suc_pin_rx) {
   2f534:	f06f 0001 	mvn.w	r0, #1
   2f538:	e5e8      	b.n	2f10c <hal_uart_init+0x54>
      switch (port) {
   2f53a:	f06f 0001 	mvn.w	r0, #1
   2f53e:	e5e5      	b.n	2f10c <hal_uart_init+0x54>
   2f540:	f06f 0001 	mvn.w	r0, #1
   2f544:	e5e2      	b.n	2f10c <hal_uart_init+0x54>
      switch (port) {
   2f546:	f06f 0001 	mvn.w	r0, #1
   2f54a:	e5df      	b.n	2f10c <hal_uart_init+0x54>
   2f54c:	f06f 0001 	mvn.w	r0, #1
   2f550:	e5dc      	b.n	2f10c <hal_uart_init+0x54>
   2f552:	bf00      	nop

0002f554 <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
   2f554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f558:	b08d      	sub	sp, #52	; 0x34
   2f55a:	4604      	mov	r4, r0
   2f55c:	4688      	mov	r8, r1
   2f55e:	4615      	mov	r5, r2
   2f560:	461e      	mov	r6, r3
   2f562:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
   2f566:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    struct apollo3_uart *u;
    int irqn;
    int rc;

    am_hal_uart_config_t uart_cfg =
   2f56a:	2228      	movs	r2, #40	; 0x28
   2f56c:	2100      	movs	r1, #0
   2f56e:	a801      	add	r0, sp, #4
   2f570:	f7eb fba5 	bl	1acbe <memset>
   2f574:	2312      	movs	r3, #18
   2f576:	9306      	str	r3, [sp, #24]
        .ui32TxBufferSize = 0,
        .pui8RxBuffer = 0,
        .ui32RxBufferSize = 0,
    };

    if (port >= UART_CNT) {
   2f578:	2c01      	cmp	r4, #1
   2f57a:	dc6f      	bgt.n	2f65c <hal_uart_config+0x108>
        return -1;
    }

    u = &uarts[port];
    if (u->u_open) {
   2f57c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2f580:	4a3e      	ldr	r2, [pc, #248]	; (2f67c <hal_uart_config+0x128>)
   2f582:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   2f586:	f013 0f01 	tst.w	r3, #1
   2f58a:	d16a      	bne.n	2f662 <hal_uart_config+0x10e>
        return -1;
    }

    switch (databits) {
   2f58c:	1f6a      	subs	r2, r5, #5
   2f58e:	2a03      	cmp	r2, #3
   2f590:	d86a      	bhi.n	2f668 <hal_uart_config+0x114>
   2f592:	e8df f002 	tbb	[pc, r2]
   2f596:	1d20      	.short	0x1d20
   2f598:	021a      	.short	0x021a
    case 8:
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_8;
   2f59a:	2360      	movs	r3, #96	; 0x60
   2f59c:	9302      	str	r3, [sp, #8]
        break;
    default:
        return -1;
    }

    switch (stopbits) {
   2f59e:	2e01      	cmp	r6, #1
   2f5a0:	d01c      	beq.n	2f5dc <hal_uart_config+0x88>
   2f5a2:	2e02      	cmp	r6, #2
   2f5a4:	d163      	bne.n	2f66e <hal_uart_config+0x11a>
    case 2:
        uart_cfg.ui32StopBits = AM_HAL_UART_TWO_STOP_BITS;
   2f5a6:	2308      	movs	r3, #8
   2f5a8:	9304      	str	r3, [sp, #16]
        break;
    default:
        return -1;
    }

    rc = apollo3_uart_irq_info(port, &irqn, NULL);
   2f5aa:	2200      	movs	r2, #0
   2f5ac:	a90b      	add	r1, sp, #44	; 0x2c
   2f5ae:	4620      	mov	r0, r4
   2f5b0:	f7ff fc90 	bl	2eed4 <apollo3_uart_irq_info>
    if (rc != 0) {
   2f5b4:	4605      	mov	r5, r0
   2f5b6:	2800      	cmp	r0, #0
   2f5b8:	d15c      	bne.n	2f674 <hal_uart_config+0x120>
        return -1;
    }

    switch (parity) {
   2f5ba:	b197      	cbz	r7, 2f5e2 <hal_uart_config+0x8e>
   2f5bc:	3f01      	subs	r7, #1
   2f5be:	b2ff      	uxtb	r7, r7
   2f5c0:	2f01      	cmp	r7, #1
   2f5c2:	d810      	bhi.n	2f5e6 <hal_uart_config+0x92>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
        break;
    case HAL_UART_PARITY_ODD:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_ODD;
    case HAL_UART_PARITY_EVEN:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_EVEN;
   2f5c4:	2306      	movs	r3, #6
   2f5c6:	9303      	str	r3, [sp, #12]
        break;
   2f5c8:	e00d      	b.n	2f5e6 <hal_uart_config+0x92>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_7;
   2f5ca:	2340      	movs	r3, #64	; 0x40
   2f5cc:	9302      	str	r3, [sp, #8]
        break;
   2f5ce:	e7e6      	b.n	2f59e <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_6;
   2f5d0:	2320      	movs	r3, #32
   2f5d2:	9302      	str	r3, [sp, #8]
        break;
   2f5d4:	e7e3      	b.n	2f59e <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_5;
   2f5d6:	2300      	movs	r3, #0
   2f5d8:	9302      	str	r3, [sp, #8]
        break;
   2f5da:	e7e0      	b.n	2f59e <hal_uart_config+0x4a>
        uart_cfg.ui32StopBits = AM_HAL_UART_ONE_STOP_BIT;
   2f5dc:	2300      	movs	r3, #0
   2f5de:	9304      	str	r3, [sp, #16]
        break;
   2f5e0:	e7e3      	b.n	2f5aa <hal_uart_config+0x56>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
   2f5e2:	2300      	movs	r3, #0
   2f5e4:	9303      	str	r3, [sp, #12]
    }

    switch (flow_ctl) {
   2f5e6:	f1b9 0f00 	cmp.w	r9, #0
   2f5ea:	d030      	beq.n	2f64e <hal_uart_config+0xfa>
   2f5ec:	f1b9 0f01 	cmp.w	r9, #1
   2f5f0:	d030      	beq.n	2f654 <hal_uart_config+0x100>
    case HAL_UART_FLOW_CTL_RTS_CTS:
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
        break;
    }

    uart_cfg.ui32BaudRate = baudrate;
   2f5f2:	f8cd 8004 	str.w	r8, [sp, #4]

    am_hal_uart_configure(uarts[port].uart_handle, &uart_cfg);
   2f5f6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2f5fa:	4a20      	ldr	r2, [pc, #128]	; (2f67c <hal_uart_config+0x128>)
   2f5fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2f600:	a901      	add	r1, sp, #4
   2f602:	6958      	ldr	r0, [r3, #20]
   2f604:	f000 f978 	bl	2f8f8 <am_hal_uart_configure>

    NVIC_EnableIRQ(irqn);
   2f608:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2f60a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   2f60c:	2b00      	cmp	r3, #0
   2f60e:	db08      	blt.n	2f622 <hal_uart_config+0xce>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2f610:	f002 021f 	and.w	r2, r2, #31
   2f614:	095b      	lsrs	r3, r3, #5
   2f616:	2101      	movs	r1, #1
   2f618:	fa01 f202 	lsl.w	r2, r1, r2
   2f61c:	4918      	ldr	r1, [pc, #96]	; (2f680 <hal_uart_config+0x12c>)
   2f61e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    UARTn(0)->IER |= (AM_HAL_UART_INT_RX |
   2f622:	4a18      	ldr	r2, [pc, #96]	; (2f684 <hal_uart_config+0x130>)
   2f624:	6b93      	ldr	r3, [r2, #56]	; 0x38
   2f626:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   2f62a:	6393      	str	r3, [r2, #56]	; 0x38

    apollo3_uart_enable_rx_irq();

    u->u_rx_stall = 0;
   2f62c:	4a13      	ldr	r2, [pc, #76]	; (2f67c <hal_uart_config+0x128>)
   2f62e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2f632:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    u->u_tx_started = 0;
    u->u_open = 1;
   2f636:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2f63a:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
   2f63e:	f043 0301 	orr.w	r3, r3, #1
   2f642:	f802 3034 	strb.w	r3, [r2, r4, lsl #3]

    return 0;
}
   2f646:	4628      	mov	r0, r5
   2f648:	b00d      	add	sp, #52	; 0x34
   2f64a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_NONE;
   2f64e:	2300      	movs	r3, #0
   2f650:	9305      	str	r3, [sp, #20]
        break;
   2f652:	e7ce      	b.n	2f5f2 <hal_uart_config+0x9e>
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
   2f654:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   2f658:	9305      	str	r3, [sp, #20]
        break;
   2f65a:	e7ca      	b.n	2f5f2 <hal_uart_config+0x9e>
        return -1;
   2f65c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2f660:	e7f1      	b.n	2f646 <hal_uart_config+0xf2>
        return -1;
   2f662:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2f666:	e7ee      	b.n	2f646 <hal_uart_config+0xf2>
    if (u->u_open) {
   2f668:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2f66c:	e7eb      	b.n	2f646 <hal_uart_config+0xf2>
    switch (stopbits) {
   2f66e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2f672:	e7e8      	b.n	2f646 <hal_uart_config+0xf2>
        return -1;
   2f674:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2f678:	e7e5      	b.n	2f646 <hal_uart_config+0xf2>
   2f67a:	bf00      	nop
   2f67c:	10007188 	.word	0x10007188
   2f680:	e000e100 	.word	0xe000e100
   2f684:	4001c000 	.word	0x4001c000

0002f688 <hal_uart_close>:
int
hal_uart_close(int port)
{
    struct apollo3_uart *u;

    if (port >= UART_CNT) {
   2f688:	2801      	cmp	r0, #1
   2f68a:	dc34      	bgt.n	2f6f6 <hal_uart_close+0x6e>
{
   2f68c:	b510      	push	{r4, lr}
   2f68e:	b082      	sub	sp, #8
   2f690:	4604      	mov	r4, r0
        return -1;
    }

    u = &uarts[port];
    if (!u->u_open) {
   2f692:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   2f696:	4a1b      	ldr	r2, [pc, #108]	; (2f704 <hal_uart_close+0x7c>)
   2f698:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   2f69c:	f013 0f01 	tst.w	r3, #1
   2f6a0:	d02c      	beq.n	2f6fc <hal_uart_close+0x74>
        return -1;
    }

    u->u_open = 0;
   2f6a2:	4613      	mov	r3, r2
   2f6a4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   2f6a8:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
   2f6ac:	f36f 0100 	bfc	r1, #0, #1
   2f6b0:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
    AM_CRITICAL_BEGIN
   2f6b4:	f7fd fedc 	bl	2d470 <am_hal_interrupt_master_disable>
   2f6b8:	9001      	str	r0, [sp, #4]
    UARTn(port)->CR_b.UARTEN = 0;
   2f6ba:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
   2f6be:	331c      	adds	r3, #28
   2f6c0:	031b      	lsls	r3, r3, #12
   2f6c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   2f6c4:	f36f 0200 	bfc	r2, #0, #1
   2f6c8:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.RXE = 0;
   2f6ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   2f6cc:	f36f 2249 	bfc	r2, #9, #1
   2f6d0:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.TXE = 0;
   2f6d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   2f6d4:	f36f 2208 	bfc	r2, #8, #1
   2f6d8:	631a      	str	r2, [r3, #48]	; 0x30
    AM_CRITICAL_END
   2f6da:	9801      	ldr	r0, [sp, #4]
   2f6dc:	f7fd fecc 	bl	2d478 <am_hal_interrupt_master_set>
    UARTn(0)->CR_b.CLKEN = 0;
   2f6e0:	4b09      	ldr	r3, [pc, #36]	; (2f708 <hal_uart_close+0x80>)
   2f6e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   2f6e4:	f36f 02c3 	bfc	r2, #3, #1
   2f6e8:	631a      	str	r2, [r3, #48]	; 0x30
    am_hal_pwrctrl_periph_disable(port);
   2f6ea:	b2e0      	uxtb	r0, r4
   2f6ec:	f7fe f850 	bl	2d790 <am_hal_pwrctrl_periph_disable>
    return 0;
   2f6f0:	2000      	movs	r0, #0
}
   2f6f2:	b002      	add	sp, #8
   2f6f4:	bd10      	pop	{r4, pc}
        return -1;
   2f6f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2f6fa:	4770      	bx	lr
        return -1;
   2f6fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f700:	e7f7      	b.n	2f6f2 <hal_uart_close+0x6a>
   2f702:	bf00      	nop
   2f704:	10007188 	.word	0x10007188
   2f708:	4001c000 	.word	0x4001c000

0002f70c <config_baudrate>:
    uint32_t ui32UartClkFreq;

    //
    // Check that the baudrate is in range.
    //
    if (APOLLO3_A1)
   2f70c:	4b23      	ldr	r3, [pc, #140]	; (2f79c <config_baudrate+0x90>)
   2f70e:	68db      	ldr	r3, [r3, #12]
   2f710:	b2db      	uxtb	r3, r3
   2f712:	2b12      	cmp	r3, #18
   2f714:	d016      	beq.n	2f744 <config_baudrate+0x38>
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }
    if (APOLLO3_GE_B0)
   2f716:	4b21      	ldr	r3, [pc, #132]	; (2f79c <config_baudrate+0x90>)
   2f718:	68db      	ldr	r3, [r3, #12]
   2f71a:	b2db      	uxtb	r3, r3
   2f71c:	2b20      	cmp	r3, #32
   2f71e:	d902      	bls.n	2f726 <config_baudrate+0x1a>
    {
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_B0)
   2f720:	4b1f      	ldr	r3, [pc, #124]	; (2f7a0 <config_baudrate+0x94>)
   2f722:	4299      	cmp	r1, r3
   2f724:	d838      	bhi.n	2f798 <config_baudrate+0x8c>
{
   2f726:	b430      	push	{r4, r5}
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }

    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
   2f728:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
   2f72c:	301c      	adds	r0, #28
   2f72e:	0300      	lsls	r0, r0, #12
   2f730:	6b03      	ldr	r3, [r0, #48]	; 0x30
   2f732:	f3c3 1302 	ubfx	r3, r3, #4, #3
   2f736:	3b01      	subs	r3, #1
   2f738:	2b03      	cmp	r3, #3
   2f73a:	d80c      	bhi.n	2f756 <config_baudrate+0x4a>
   2f73c:	e8df f003 	tbb	[pc, r3]
   2f740:	0907260f 	.word	0x0907260f
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
   2f744:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   2f748:	d9e5      	bls.n	2f716 <config_baudrate+0xa>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   2f74a:	4816      	ldr	r0, [pc, #88]	; (2f7a4 <config_baudrate+0x98>)
   2f74c:	4770      	bx	lr
        case UART0_CR_CLKSEL_12MHZ:
            ui32UartClkFreq = 12000000;
            break;

        case UART0_CR_CLKSEL_6MHZ:
            ui32UartClkFreq = 6000000;
   2f74e:	4c16      	ldr	r4, [pc, #88]	; (2f7a8 <config_baudrate+0x9c>)
            break;
   2f750:	e006      	b.n	2f760 <config_baudrate+0x54>

        case UART0_CR_CLKSEL_3MHZ:
            ui32UartClkFreq = 3000000;
   2f752:	4c16      	ldr	r4, [pc, #88]	; (2f7ac <config_baudrate+0xa0>)
            break;
   2f754:	e004      	b.n	2f760 <config_baudrate+0x54>

        default:
            *pui32ActualBaud = 0;
   2f756:	2300      	movs	r3, #0
   2f758:	6013      	str	r3, [r2, #0]
            return AM_HAL_UART_STATUS_CLOCK_NOT_CONFIGURED;
   2f75a:	4815      	ldr	r0, [pc, #84]	; (2f7b0 <config_baudrate+0xa4>)
   2f75c:	e014      	b.n	2f788 <config_baudrate+0x7c>
    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
   2f75e:	4c15      	ldr	r4, [pc, #84]	; (2f7b4 <config_baudrate+0xa8>)
    }

    //
    // Calculate register values.
    //
    ui32BaudClk = BAUDCLK * ui32DesiredBaudrate;
   2f760:	0109      	lsls	r1, r1, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
   2f762:	fbb4 f5f1 	udiv	r5, r4, r1
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
   2f766:	01a3      	lsls	r3, r4, #6
   2f768:	fbb3 f3f1 	udiv	r3, r3, r1
    ui64FractionDivisorLong = ui64IntermediateLong - (ui32IntegerDivisor * 64);
    ui32FractionDivisor = (uint32_t)ui64FractionDivisorLong;
   2f76c:	eba3 1385 	sub.w	r3, r3, r5, lsl #6

    //
    // Check the result.
    //
    if (ui32IntegerDivisor == 0)
   2f770:	428c      	cmp	r4, r1
   2f772:	d30d      	bcc.n	2f790 <config_baudrate+0x84>
    }

    //
    // Write the UART regs.
    //
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
   2f774:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
   2f776:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->FBRD = ui32FractionDivisor;
   2f778:	6283      	str	r3, [r0, #40]	; 0x28

    //
    // Return the actual baud rate.
    //
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor / 4));
   2f77a:	089b      	lsrs	r3, r3, #2
   2f77c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   2f780:	fbb4 f3f3 	udiv	r3, r4, r3
   2f784:	6013      	str	r3, [r2, #0]
    return AM_HAL_STATUS_SUCCESS;
   2f786:	2000      	movs	r0, #0
} // config_baudrate()
   2f788:	bc30      	pop	{r4, r5}
   2f78a:	4770      	bx	lr
            ui32UartClkFreq = 12000000;
   2f78c:	4c0a      	ldr	r4, [pc, #40]	; (2f7b8 <config_baudrate+0xac>)
   2f78e:	e7e7      	b.n	2f760 <config_baudrate+0x54>
        *pui32ActualBaud = 0;
   2f790:	2300      	movs	r3, #0
   2f792:	6013      	str	r3, [r2, #0]
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   2f794:	4803      	ldr	r0, [pc, #12]	; (2f7a4 <config_baudrate+0x98>)
   2f796:	e7f7      	b.n	2f788 <config_baudrate+0x7c>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   2f798:	4802      	ldr	r0, [pc, #8]	; (2f7a4 <config_baudrate+0x98>)
} // config_baudrate()
   2f79a:	4770      	bx	lr
   2f79c:	40020000 	.word	0x40020000
   2f7a0:	0016e360 	.word	0x0016e360
   2f7a4:	08000003 	.word	0x08000003
   2f7a8:	005b8d80 	.word	0x005b8d80
   2f7ac:	002dc6c0 	.word	0x002dc6c0
   2f7b0:	08000002 	.word	0x08000002
   2f7b4:	016e3600 	.word	0x016e3600
   2f7b8:	00b71b00 	.word	0x00b71b00

0002f7bc <am_hal_uart_initialize>:
    if (ui32Module >= AM_REG_UART_NUM_MODULES )
   2f7bc:	2801      	cmp	r0, #1
   2f7be:	d81e      	bhi.n	2f7fe <am_hal_uart_initialize+0x42>
    if (!ppHandle)
   2f7c0:	b1f9      	cbz	r1, 2f802 <am_hal_uart_initialize+0x46>
    if (g_am_hal_uart_states[ui32Module].prefix.s.bInit)
   2f7c2:	4a12      	ldr	r2, [pc, #72]	; (2f80c <am_hal_uart_initialize+0x50>)
   2f7c4:	2368      	movs	r3, #104	; 0x68
   2f7c6:	fb03 2300 	mla	r3, r3, r0, r2
   2f7ca:	78db      	ldrb	r3, [r3, #3]
   2f7cc:	f013 0f01 	tst.w	r3, #1
   2f7d0:	d119      	bne.n	2f806 <am_hal_uart_initialize+0x4a>
{
   2f7d2:	b470      	push	{r4, r5, r6}
    g_am_hal_uart_states[ui32Module].prefix.s.bInit = true;
   2f7d4:	4614      	mov	r4, r2
   2f7d6:	2268      	movs	r2, #104	; 0x68
   2f7d8:	fb02 f200 	mul.w	r2, r2, r0
   2f7dc:	18a3      	adds	r3, r4, r2
   2f7de:	78dd      	ldrb	r5, [r3, #3]
   2f7e0:	f045 0501 	orr.w	r5, r5, #1
   2f7e4:	70dd      	strb	r5, [r3, #3]
    g_am_hal_uart_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_UART;
   2f7e6:	58a5      	ldr	r5, [r4, r2]
   2f7e8:	4e09      	ldr	r6, [pc, #36]	; (2f810 <am_hal_uart_initialize+0x54>)
   2f7ea:	f366 0517 	bfi	r5, r6, #0, #24
   2f7ee:	50a5      	str	r5, [r4, r2]
    g_am_hal_uart_states[ui32Module].ui32Module = ui32Module;
   2f7f0:	6258      	str	r0, [r3, #36]	; 0x24
    g_am_hal_uart_states[ui32Module].sRegState.bValid = false;
   2f7f2:	2000      	movs	r0, #0
   2f7f4:	7118      	strb	r0, [r3, #4]
    g_am_hal_uart_states[ui32Module].ui32BaudRate = 0;
   2f7f6:	6618      	str	r0, [r3, #96]	; 0x60
    *ppHandle = (void *)&g_am_hal_uart_states[ui32Module];
   2f7f8:	600b      	str	r3, [r1, #0]
} // am_hal_uart_initialize()
   2f7fa:	bc70      	pop	{r4, r5, r6}
   2f7fc:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   2f7fe:	2005      	movs	r0, #5
   2f800:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   2f802:	2006      	movs	r0, #6
   2f804:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   2f806:	2007      	movs	r0, #7
} // am_hal_uart_initialize()
   2f808:	4770      	bx	lr
   2f80a:	bf00      	nop
   2f80c:	100071b8 	.word	0x100071b8
   2f810:	00ea9e06 	.word	0x00ea9e06

0002f814 <am_hal_uart_interrupt_enable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_enable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   2f814:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   2f816:	b170      	cbz	r0, 2f836 <am_hal_uart_interrupt_enable+0x22>
   2f818:	6802      	ldr	r2, [r0, #0]
   2f81a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   2f81e:	4808      	ldr	r0, [pc, #32]	; (2f840 <am_hal_uart_interrupt_enable+0x2c>)
   2f820:	4282      	cmp	r2, r0
   2f822:	d10a      	bne.n	2f83a <am_hal_uart_interrupt_enable+0x26>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER |= ui32IntMask;
   2f824:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   2f828:	331c      	adds	r3, #28
   2f82a:	031b      	lsls	r3, r3, #12
   2f82c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2f82e:	4311      	orrs	r1, r2
   2f830:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
   2f832:	2000      	movs	r0, #0
   2f834:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2f836:	2002      	movs	r0, #2
   2f838:	4770      	bx	lr
   2f83a:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_enable()
   2f83c:	4770      	bx	lr
   2f83e:	bf00      	nop
   2f840:	01ea9e06 	.word	0x01ea9e06

0002f844 <am_hal_uart_interrupt_disable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_disable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   2f844:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   2f846:	b178      	cbz	r0, 2f868 <am_hal_uart_interrupt_disable+0x24>
   2f848:	6802      	ldr	r2, [r0, #0]
   2f84a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   2f84e:	4808      	ldr	r0, [pc, #32]	; (2f870 <am_hal_uart_interrupt_disable+0x2c>)
   2f850:	4282      	cmp	r2, r0
   2f852:	d10b      	bne.n	2f86c <am_hal_uart_interrupt_disable+0x28>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER &= ~ui32IntMask;
   2f854:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   2f858:	331c      	adds	r3, #28
   2f85a:	031b      	lsls	r3, r3, #12
   2f85c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2f85e:	ea22 0101 	bic.w	r1, r2, r1
   2f862:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
   2f864:	2000      	movs	r0, #0
   2f866:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2f868:	2002      	movs	r0, #2
   2f86a:	4770      	bx	lr
   2f86c:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_disable()
   2f86e:	4770      	bx	lr
   2f870:	01ea9e06 	.word	0x01ea9e06

0002f874 <buffer_configure>:
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   2f874:	b3d0      	cbz	r0, 2f8ec <buffer_configure+0x78>
{
   2f876:	b538      	push	{r3, r4, r5, lr}
   2f878:	461d      	mov	r5, r3
   2f87a:	4604      	mov	r4, r0
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   2f87c:	6800      	ldr	r0, [r0, #0]
   2f87e:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
   2f882:	4b1c      	ldr	r3, [pc, #112]	; (2f8f4 <buffer_configure+0x80>)
   2f884:	4298      	cmp	r0, r3
   2f886:	d133      	bne.n	2f8f0 <buffer_configure+0x7c>
    if (pui8TxBuffer && ui32TxBufferSize)
   2f888:	b101      	cbz	r1, 2f88c <buffer_configure+0x18>
   2f88a:	b992      	cbnz	r2, 2f8b2 <buffer_configure+0x3e>
        pState->bEnableTxQueue = false;
   2f88c:	2300      	movs	r3, #0
   2f88e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, AM_HAL_UART_INT_TX);
   2f892:	2120      	movs	r1, #32
   2f894:	4620      	mov	r0, r4
   2f896:	f7ff ffd5 	bl	2f844 <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   2f89a:	bb50      	cbnz	r0, 2f8f2 <buffer_configure+0x7e>
    if (pui8RxBuffer && ui32RxBufferSize)
   2f89c:	b10d      	cbz	r5, 2f8a2 <buffer_configure+0x2e>
   2f89e:	9b04      	ldr	r3, [sp, #16]
   2f8a0:	b9bb      	cbnz	r3, 2f8d2 <buffer_configure+0x5e>
        pState->bEnableRxQueue = false;
   2f8a2:	2300      	movs	r3, #0
   2f8a4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, (AM_HAL_UART_INT_RX |
   2f8a8:	2150      	movs	r1, #80	; 0x50
   2f8aa:	4620      	mov	r0, r4
   2f8ac:	f7ff ffca 	bl	2f844 <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   2f8b0:	e01f      	b.n	2f8f2 <buffer_configure+0x7e>
        pState->bEnableTxQueue = true;
   2f8b2:	2001      	movs	r0, #1
   2f8b4:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
        am_hal_queue_init(&pState->sTxQueue, pui8TxBuffer, 1, ui32TxBufferSize);
   2f8b8:	4613      	mov	r3, r2
   2f8ba:	4602      	mov	r2, r0
   2f8bc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   2f8c0:	f000 f93c 	bl	2fb3c <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, AM_HAL_UART_INT_TX);
   2f8c4:	2120      	movs	r1, #32
   2f8c6:	4620      	mov	r0, r4
   2f8c8:	f7ff ffa4 	bl	2f814 <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   2f8cc:	2800      	cmp	r0, #0
   2f8ce:	d0e5      	beq.n	2f89c <buffer_configure+0x28>
   2f8d0:	e00f      	b.n	2f8f2 <buffer_configure+0x7e>
        pState->bEnableRxQueue = true;
   2f8d2:	2201      	movs	r2, #1
   2f8d4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        am_hal_queue_init(&pState->sRxQueue, pui8RxBuffer, 1, ui32RxBufferSize);
   2f8d8:	4629      	mov	r1, r5
   2f8da:	f104 0048 	add.w	r0, r4, #72	; 0x48
   2f8de:	f000 f92d 	bl	2fb3c <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, (AM_HAL_UART_INT_RX |
   2f8e2:	2150      	movs	r1, #80	; 0x50
   2f8e4:	4620      	mov	r0, r4
   2f8e6:	f7ff ff95 	bl	2f814 <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   2f8ea:	e002      	b.n	2f8f2 <buffer_configure+0x7e>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2f8ec:	2002      	movs	r0, #2
} // buffer_configure()
   2f8ee:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2f8f0:	2002      	movs	r0, #2
} // buffer_configure()
   2f8f2:	bd38      	pop	{r3, r4, r5, pc}
   2f8f4:	01ea9e06 	.word	0x01ea9e06

0002f8f8 <am_hal_uart_configure>:
{
   2f8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f8fc:	b086      	sub	sp, #24
    uint32_t ui32Module = pState->ui32Module;
   2f8fe:	6a47      	ldr	r7, [r0, #36]	; 0x24
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   2f900:	2800      	cmp	r0, #0
   2f902:	d073      	beq.n	2f9ec <am_hal_uart_configure+0xf4>
   2f904:	4605      	mov	r5, r0
   2f906:	460e      	mov	r6, r1
   2f908:	6803      	ldr	r3, [r0, #0]
   2f90a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2f90e:	4a3c      	ldr	r2, [pc, #240]	; (2fa00 <am_hal_uart_configure+0x108>)
   2f910:	4293      	cmp	r3, r2
   2f912:	d16d      	bne.n	2f9f0 <am_hal_uart_configure+0xf8>
    UARTn(ui32Module)->CR = 0;
   2f914:	f507 2480 	add.w	r4, r7, #262144	; 0x40000
   2f918:	341c      	adds	r4, #28
   2f91a:	0324      	lsls	r4, r4, #12
   2f91c:	2300      	movs	r3, #0
   2f91e:	6323      	str	r3, [r4, #48]	; 0x30
    am_hal_uart_clock_speed_e eUartClkSpeed = pState->eUartClockSpeed ;
   2f920:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    if ( eUartClkSpeed >= eUART_CLK_SPEED_INVALID )
   2f924:	2b05      	cmp	r3, #5
   2f926:	d868      	bhi.n	2f9fa <am_hal_uart_configure+0x102>
                                   UART0_CR_CLKSEL_24MHZ :
   2f928:	2b00      	cmp	r3, #0
   2f92a:	d05c      	beq.n	2f9e6 <am_hal_uart_configure+0xee>
   2f92c:	3b01      	subs	r3, #1
   2f92e:	fa5f f883 	uxtb.w	r8, r3
    AM_CRITICAL_BEGIN
   2f932:	f7fd fd9d 	bl	2d470 <am_hal_interrupt_master_disable>
   2f936:	9003      	str	r0, [sp, #12]
    UARTn(ui32Module)->CR_b.CLKEN = 1;
   2f938:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2f93a:	f043 0308 	orr.w	r3, r3, #8
   2f93e:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CLKSEL = eClkSel;
   2f940:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2f942:	f368 1306 	bfi	r3, r8, #4, #3
   2f946:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   2f948:	9803      	ldr	r0, [sp, #12]
   2f94a:	f7fd fd95 	bl	2d478 <am_hal_interrupt_master_set>
    AM_CRITICAL_BEGIN
   2f94e:	f7fd fd8f 	bl	2d470 <am_hal_interrupt_master_disable>
   2f952:	9004      	str	r0, [sp, #16]
    UARTn(ui32Module)->CR_b.UARTEN = 0;
   2f954:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2f956:	f36f 0300 	bfc	r3, #0, #1
   2f95a:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 0;
   2f95c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2f95e:	f36f 2349 	bfc	r3, #9, #1
   2f962:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 0;
   2f964:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2f966:	f36f 2308 	bfc	r3, #8, #1
   2f96a:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   2f96c:	9804      	ldr	r0, [sp, #16]
   2f96e:	f7fd fd83 	bl	2d478 <am_hal_interrupt_master_set>
    ui32ErrorStatus = config_baudrate(ui32Module, psConfig->ui32BaudRate,
   2f972:	f105 0260 	add.w	r2, r5, #96	; 0x60
   2f976:	6831      	ldr	r1, [r6, #0]
   2f978:	4638      	mov	r0, r7
   2f97a:	f7ff fec7 	bl	2f70c <config_baudrate>
    RETURN_ON_ERROR(ui32ErrorStatus);
   2f97e:	4607      	mov	r7, r0
   2f980:	2800      	cmp	r0, #0
   2f982:	d136      	bne.n	2f9f2 <am_hal_uart_configure+0xfa>
    UARTn(ui32Module)->CR_b.RTSEN = 0;
   2f984:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2f986:	f36f 338e 	bfc	r3, #14, #1
   2f98a:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CTSEN = 0;
   2f98c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2f98e:	f36f 33cf 	bfc	r3, #15, #1
   2f992:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR |= psConfig->ui32FlowControl;
   2f994:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2f996:	6932      	ldr	r2, [r6, #16]
   2f998:	4313      	orrs	r3, r2
   2f99a:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->IFLS = psConfig->ui32FifoLevels;
   2f99c:	6973      	ldr	r3, [r6, #20]
   2f99e:	6363      	str	r3, [r4, #52]	; 0x34
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   2f9a0:	6873      	ldr	r3, [r6, #4]
                               psConfig->ui32Parity     |
   2f9a2:	68b2      	ldr	r2, [r6, #8]
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   2f9a4:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
   2f9a6:	68f2      	ldr	r2, [r6, #12]
                               psConfig->ui32Parity     |
   2f9a8:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
   2f9aa:	f043 0310 	orr.w	r3, r3, #16
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   2f9ae:	62e3      	str	r3, [r4, #44]	; 0x2c
    AM_CRITICAL_BEGIN
   2f9b0:	f7fd fd5e 	bl	2d470 <am_hal_interrupt_master_disable>
   2f9b4:	9005      	str	r0, [sp, #20]
    UARTn(ui32Module)->CR_b.UARTEN = 1;
   2f9b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2f9b8:	f043 0301 	orr.w	r3, r3, #1
   2f9bc:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 1;
   2f9be:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2f9c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2f9c4:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 1;
   2f9c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2f9c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2f9cc:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   2f9ce:	9805      	ldr	r0, [sp, #20]
   2f9d0:	f7fd fd52 	bl	2d478 <am_hal_interrupt_master_set>
    buffer_configure(pHandle,
   2f9d4:	6a73      	ldr	r3, [r6, #36]	; 0x24
   2f9d6:	9300      	str	r3, [sp, #0]
   2f9d8:	6a33      	ldr	r3, [r6, #32]
   2f9da:	69f2      	ldr	r2, [r6, #28]
   2f9dc:	69b1      	ldr	r1, [r6, #24]
   2f9de:	4628      	mov	r0, r5
   2f9e0:	f7ff ff48 	bl	2f874 <buffer_configure>
    return AM_HAL_STATUS_SUCCESS;
   2f9e4:	e005      	b.n	2f9f2 <am_hal_uart_configure+0xfa>
                                   UART0_CR_CLKSEL_24MHZ :
   2f9e6:	f04f 0801 	mov.w	r8, #1
   2f9ea:	e7a2      	b.n	2f932 <am_hal_uart_configure+0x3a>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2f9ec:	2702      	movs	r7, #2
   2f9ee:	e000      	b.n	2f9f2 <am_hal_uart_configure+0xfa>
   2f9f0:	2702      	movs	r7, #2
} // am_hal_uart_configure()
   2f9f2:	4638      	mov	r0, r7
   2f9f4:	b006      	add	sp, #24
   2f9f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_INVALID_ARG ;
   2f9fa:	2706      	movs	r7, #6
   2f9fc:	e7f9      	b.n	2f9f2 <am_hal_uart_configure+0xfa>
   2f9fe:	bf00      	nop
   2fa00:	01ea9e06 	.word	0x01ea9e06

0002fa04 <am_hal_uart_interrupt_clear>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_clear(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   2fa04:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   2fa06:	b160      	cbz	r0, 2fa22 <am_hal_uart_interrupt_clear+0x1e>
   2fa08:	6802      	ldr	r2, [r0, #0]
   2fa0a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   2fa0e:	4807      	ldr	r0, [pc, #28]	; (2fa2c <am_hal_uart_interrupt_clear+0x28>)
   2fa10:	4282      	cmp	r2, r0
   2fa12:	d108      	bne.n	2fa26 <am_hal_uart_interrupt_clear+0x22>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IEC = ui32IntMask;
   2fa14:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   2fa18:	331c      	adds	r3, #28
   2fa1a:	031b      	lsls	r3, r3, #12
   2fa1c:	6459      	str	r1, [r3, #68]	; 0x44

    return AM_HAL_STATUS_SUCCESS;
   2fa1e:	2000      	movs	r0, #0
   2fa20:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2fa22:	2002      	movs	r0, #2
   2fa24:	4770      	bx	lr
   2fa26:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_clear()
   2fa28:	4770      	bx	lr
   2fa2a:	bf00      	nop
   2fa2c:	01ea9e06 	.word	0x01ea9e06

0002fa30 <am_hal_uart_power_control>:
{
   2fa30:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fa32:	b083      	sub	sp, #12
   2fa34:	4604      	mov	r4, r0
    uint32_t ui32Module = pState->ui32Module;
   2fa36:	6a45      	ldr	r5, [r0, #36]	; 0x24
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   2fa38:	2800      	cmp	r0, #0
   2fa3a:	d061      	beq.n	2fb00 <am_hal_uart_power_control+0xd0>
   2fa3c:	4616      	mov	r6, r2
   2fa3e:	b2e8      	uxtb	r0, r5
   2fa40:	3008      	adds	r0, #8
   2fa42:	b2c7      	uxtb	r7, r0
   2fa44:	6823      	ldr	r3, [r4, #0]
   2fa46:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2fa4a:	4a32      	ldr	r2, [pc, #200]	; (2fb14 <am_hal_uart_power_control+0xe4>)
   2fa4c:	4293      	cmp	r3, r2
   2fa4e:	d159      	bne.n	2fb04 <am_hal_uart_power_control+0xd4>
    switch (ePowerState)
   2fa50:	b1a9      	cbz	r1, 2fa7e <am_hal_uart_power_control+0x4e>
   2fa52:	3901      	subs	r1, #1
   2fa54:	b2c9      	uxtb	r1, r1
   2fa56:	2901      	cmp	r1, #1
   2fa58:	d857      	bhi.n	2fb0a <am_hal_uart_power_control+0xda>
            if (bRetainState)
   2fa5a:	2e00      	cmp	r6, #0
   2fa5c:	d135      	bne.n	2faca <am_hal_uart_power_control+0x9a>
            am_hal_uart_interrupt_clear(pState, 0xFFFFFFFF);
   2fa5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2fa62:	4620      	mov	r0, r4
   2fa64:	f7ff ffce 	bl	2fa04 <am_hal_uart_interrupt_clear>
            UARTn(ui32Module)->CR = 0;
   2fa68:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   2fa6c:	351c      	adds	r5, #28
   2fa6e:	032d      	lsls	r5, r5, #12
   2fa70:	2400      	movs	r4, #0
   2fa72:	632c      	str	r4, [r5, #48]	; 0x30
            am_hal_pwrctrl_periph_disable(eUARTPowerModule);
   2fa74:	4638      	mov	r0, r7
   2fa76:	f7fd fe8b 	bl	2d790 <am_hal_pwrctrl_periph_disable>
    return AM_HAL_STATUS_SUCCESS;
   2fa7a:	4620      	mov	r0, r4
            break;
   2fa7c:	e043      	b.n	2fb06 <am_hal_uart_power_control+0xd6>
            if (bRetainState && !pState->sRegState.bValid)
   2fa7e:	b116      	cbz	r6, 2fa86 <am_hal_uart_power_control+0x56>
   2fa80:	7923      	ldrb	r3, [r4, #4]
   2fa82:	2b00      	cmp	r3, #0
   2fa84:	d043      	beq.n	2fb0e <am_hal_uart_power_control+0xde>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
   2fa86:	4638      	mov	r0, r7
   2fa88:	f7fd fe3a 	bl	2d700 <am_hal_pwrctrl_periph_enable>
            if (bRetainState)
   2fa8c:	b90e      	cbnz	r6, 2fa92 <am_hal_uart_power_control+0x62>
    return AM_HAL_STATUS_SUCCESS;
   2fa8e:	2000      	movs	r0, #0
   2fa90:	e039      	b.n	2fb06 <am_hal_uart_power_control+0xd6>
                AM_CRITICAL_BEGIN
   2fa92:	f7fd fced 	bl	2d470 <am_hal_interrupt_master_disable>
   2fa96:	9000      	str	r0, [sp, #0]
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
   2fa98:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   2fa9c:	351c      	adds	r5, #28
   2fa9e:	032d      	lsls	r5, r5, #12
   2faa0:	68a3      	ldr	r3, [r4, #8]
   2faa2:	622b      	str	r3, [r5, #32]
                UARTn(ui32Module)->IBRD = pState->sRegState.regIBRD;
   2faa4:	68e3      	ldr	r3, [r4, #12]
   2faa6:	626b      	str	r3, [r5, #36]	; 0x24
                UARTn(ui32Module)->FBRD = pState->sRegState.regFBRD;
   2faa8:	6923      	ldr	r3, [r4, #16]
   2faaa:	62ab      	str	r3, [r5, #40]	; 0x28
                UARTn(ui32Module)->LCRH = pState->sRegState.regLCRH;
   2faac:	6963      	ldr	r3, [r4, #20]
   2faae:	62eb      	str	r3, [r5, #44]	; 0x2c
                UARTn(ui32Module)->CR   = pState->sRegState.regCR;
   2fab0:	69a3      	ldr	r3, [r4, #24]
   2fab2:	632b      	str	r3, [r5, #48]	; 0x30
                UARTn(ui32Module)->IFLS = pState->sRegState.regIFLS;
   2fab4:	69e3      	ldr	r3, [r4, #28]
   2fab6:	636b      	str	r3, [r5, #52]	; 0x34
                UARTn(ui32Module)->IER  = pState->sRegState.regIER;
   2fab8:	6a23      	ldr	r3, [r4, #32]
   2faba:	63ab      	str	r3, [r5, #56]	; 0x38
                pState->sRegState.bValid = false;
   2fabc:	2500      	movs	r5, #0
   2fabe:	7125      	strb	r5, [r4, #4]
                AM_CRITICAL_END
   2fac0:	9800      	ldr	r0, [sp, #0]
   2fac2:	f7fd fcd9 	bl	2d478 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
   2fac6:	4628      	mov	r0, r5
   2fac8:	e01d      	b.n	2fb06 <am_hal_uart_power_control+0xd6>
                AM_CRITICAL_BEGIN
   2faca:	f7fd fcd1 	bl	2d470 <am_hal_interrupt_master_disable>
   2face:	9001      	str	r0, [sp, #4]
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
   2fad0:	f505 2380 	add.w	r3, r5, #262144	; 0x40000
   2fad4:	331c      	adds	r3, #28
   2fad6:	031b      	lsls	r3, r3, #12
   2fad8:	6a1a      	ldr	r2, [r3, #32]
   2fada:	60a2      	str	r2, [r4, #8]
                pState->sRegState.regIBRD = UARTn(ui32Module)->IBRD;
   2fadc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2fade:	60e2      	str	r2, [r4, #12]
                pState->sRegState.regFBRD = UARTn(ui32Module)->FBRD;
   2fae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2fae2:	6122      	str	r2, [r4, #16]
                pState->sRegState.regLCRH = UARTn(ui32Module)->LCRH;
   2fae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2fae6:	6162      	str	r2, [r4, #20]
                pState->sRegState.regCR   = UARTn(ui32Module)->CR;
   2fae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   2faea:	61a2      	str	r2, [r4, #24]
                pState->sRegState.regIFLS = UARTn(ui32Module)->IFLS;
   2faec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2faee:	61e2      	str	r2, [r4, #28]
                pState->sRegState.regIER  = UARTn(ui32Module)->IER;
   2faf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2faf2:	6223      	str	r3, [r4, #32]
                pState->sRegState.bValid = true;
   2faf4:	2301      	movs	r3, #1
   2faf6:	7123      	strb	r3, [r4, #4]
                AM_CRITICAL_END
   2faf8:	9801      	ldr	r0, [sp, #4]
   2fafa:	f7fd fcbd 	bl	2d478 <am_hal_interrupt_master_set>
   2fafe:	e7ae      	b.n	2fa5e <am_hal_uart_power_control+0x2e>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2fb00:	2002      	movs	r0, #2
   2fb02:	e000      	b.n	2fb06 <am_hal_uart_power_control+0xd6>
   2fb04:	2002      	movs	r0, #2
} // am_hal_uart_power_control()
   2fb06:	b003      	add	sp, #12
   2fb08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (ePowerState)
   2fb0a:	2006      	movs	r0, #6
   2fb0c:	e7fb      	b.n	2fb06 <am_hal_uart_power_control+0xd6>
                return AM_HAL_STATUS_INVALID_OPERATION;
   2fb0e:	2007      	movs	r0, #7
   2fb10:	e7f9      	b.n	2fb06 <am_hal_uart_power_control+0xd6>
   2fb12:	bf00      	nop
   2fb14:	01ea9e06 	.word	0x01ea9e06

0002fb18 <am_hal_uart_control>:
// ****************************************************************************
uint32_t
am_hal_uart_control(void *pHandle, am_hal_uart_control_e eControl, void *pArgs)
{
    #ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( pArgs == (void *) 0 || pHandle == (void *) 0)
   2fb18:	b142      	cbz	r2, 2fb2c <am_hal_uart_control+0x14>
   2fb1a:	b148      	cbz	r0, 2fb30 <am_hal_uart_control+0x18>
    #endif // AM_HAL_DISABLE_API_VALIDATION

    am_hal_status_e     eHalStatus  = AM_HAL_STATUS_SUCCESS ;
    am_hal_uart_state_t *pState    = (am_hal_uart_state_t *) pHandle;

    switch ( eControl )
   2fb1c:	b951      	cbnz	r1, 2fb34 <am_hal_uart_control+0x1c>
        case AM_HAL_UART_CONTROL_CLKSEL:
        {
            //
            // save the uart input clock setting
            //
            am_hal_uart_clock_speed_e eClkSpeed = *((am_hal_uart_clock_speed_e *)  pArgs) ;
   2fb1e:	7813      	ldrb	r3, [r2, #0]
            if (eClkSpeed >= eUART_CLK_SPEED_INVALID)
   2fb20:	2b05      	cmp	r3, #5
   2fb22:	d809      	bhi.n	2fb38 <am_hal_uart_control+0x20>
            {
                eHalStatus = AM_HAL_STATUS_INVALID_ARG ;
                break ;
            }

            pState->eUartClockSpeed = eClkSpeed ;
   2fb24:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
    am_hal_status_e     eHalStatus  = AM_HAL_STATUS_SUCCESS ;
   2fb28:	2000      	movs	r0, #0
            break ;
   2fb2a:	4770      	bx	lr
        return (uint32_t) AM_HAL_STATUS_INVALID_ARG ;
   2fb2c:	2006      	movs	r0, #6
   2fb2e:	4770      	bx	lr
   2fb30:	2006      	movs	r0, #6
   2fb32:	4770      	bx	lr
        }

        default:

            eHalStatus = AM_HAL_STATUS_INVALID_ARG ;
   2fb34:	2006      	movs	r0, #6
   2fb36:	4770      	bx	lr
                eHalStatus = AM_HAL_STATUS_INVALID_ARG ;
   2fb38:	2006      	movs	r0, #6
            break ;
    } // switch

    return (uint32_t) eHalStatus ;
}
   2fb3a:	4770      	bx	lr

0002fb3c <am_hal_queue_init>:
//
//*****************************************************************************
void
am_hal_queue_init(am_hal_queue_t *psQueue, void *pvData, uint32_t ui32ItemSize,
                  uint32_t ui32ArraySize)
{
   2fb3c:	b410      	push	{r4}
    psQueue->ui32WriteIndex = 0;
   2fb3e:	2400      	movs	r4, #0
   2fb40:	6004      	str	r4, [r0, #0]
    psQueue->ui32ReadIndex = 0;
   2fb42:	6044      	str	r4, [r0, #4]
    psQueue->ui32Length = 0;
   2fb44:	6084      	str	r4, [r0, #8]
    psQueue->ui32Capacity = ui32ArraySize;
   2fb46:	60c3      	str	r3, [r0, #12]
    psQueue->ui32ItemSize = ui32ItemSize;
   2fb48:	6102      	str	r2, [r0, #16]
    psQueue->pui8Data = (uint8_t *) pvData;
   2fb4a:	6141      	str	r1, [r0, #20]
}
   2fb4c:	bc10      	pop	{r4}
   2fb4e:	4770      	bx	lr
   2fb50:	feaa0010 	.word	0xfeaa0010
   2fb54:	28030010 	.word	0x28030010
   2fb58:	28020010 	.word	0x28020010
   2fb5c:	28000010 	.word	0x28000010
   2fb60:	28030010 	.word	0x28030010
   2fb64:	00000004 	.word	0x00000004
   2fb68:	00000020 	.word	0x00000020
   2fb6c:	00000020 	.word	0x00000020
   2fb70:	00000002 	.word	0x00000002
   2fb74:	00000000 	.word	0x00000000
   2fb78:	00000032 	.word	0x00000032
   2fb7c:	00010101 	.word	0x00010101
   2fb80:	00000000 	.word	0x00000000
   2fb84:	4f525245 	.word	0x4f525245
   2fb88:	00000052 	.word	0x00000052
   2fb8c:	203a7325 	.word	0x203a7325
   2fb90:	6e6e6f63 	.word	0x6e6e6f63
   2fb94:	6e61685f 	.word	0x6e61685f
   2fb98:	3d656c64 	.word	0x3d656c64
   2fb9c:	73206425 	.word	0x73206425
   2fba0:	75746174 	.word	0x75746174
   2fba4:	64253d73 	.word	0x64253d73
   2fba8:	74746120 	.word	0x74746120
   2fbac:	6e61685f 	.word	0x6e61685f
   2fbb0:	3d656c64 	.word	0x3d656c64
   2fbb4:	000a6425 	.word	0x000a6425
   2fbb8:	2075746d 	.word	0x2075746d
   2fbbc:	68637865 	.word	0x68637865
   2fbc0:	65676e61 	.word	0x65676e61
   2fbc4:	6d6f6320 	.word	0x6d6f6320
   2fbc8:	74656c70 	.word	0x74656c70
   2fbcc:	63203a65 	.word	0x63203a65
   2fbd0:	5f6e6e6f 	.word	0x5f6e6e6f
   2fbd4:	646e6168 	.word	0x646e6168
   2fbd8:	253d656c 	.word	0x253d656c
   2fbdc:	746d2064 	.word	0x746d2064
   2fbe0:	64253d75 	.word	0x64253d75
   2fbe4:	0000000a 	.word	0x0000000a
   2fbe8:	6c6c7566 	.word	0x6c6c7566
   2fbec:	73696420 	.word	0x73696420
   2fbf0:	65766f63 	.word	0x65766f63
   2fbf4:	63207972 	.word	0x63207972
   2fbf8:	6c706d6f 	.word	0x6c706d6f
   2fbfc:	3b657465 	.word	0x3b657465
   2fc00:	3d637220 	.word	0x3d637220
   2fc04:	000a6425 	.word	0x000a6425
   2fc08:	72616863 	.word	0x72616863
   2fc0c:	65746361 	.word	0x65746361
   2fc10:	74736972 	.word	0x74736972
   2fc14:	77206369 	.word	0x77206369
   2fc18:	65746972 	.word	0x65746972
   2fc1c:	6d6f6320 	.word	0x6d6f6320
   2fc20:	74656c70 	.word	0x74656c70
   2fc24:	63203b65 	.word	0x63203b65
   2fc28:	5f6e6e6f 	.word	0x5f6e6e6f
   2fc2c:	646e6168 	.word	0x646e6168
   2fc30:	253d656c 	.word	0x253d656c
   2fc34:	74612064 	.word	0x74612064
   2fc38:	685f7274 	.word	0x685f7274
   2fc3c:	6c646e61 	.word	0x6c646e61
   2fc40:	64253d65 	.word	0x64253d65
   2fc44:	0000000a 	.word	0x0000000a
   2fc48:	6f727245 	.word	0x6f727245
   2fc4c:	52203a72 	.word	0x52203a72
   2fc50:	74657365 	.word	0x74657365
   2fc54:	676e6974 	.word	0x676e6974
   2fc58:	61747320 	.word	0x61747320
   2fc5c:	203b6574 	.word	0x203b6574
   2fc60:	73616572 	.word	0x73616572
   2fc64:	253d6e6f 	.word	0x253d6e6f
   2fc68:	00000a64 	.word	0x00000a64
   2fc6c:	72616863 	.word	0x72616863
   2fc70:	65746361 	.word	0x65746361
   2fc74:	74736972 	.word	0x74736972
   2fc78:	72206369 	.word	0x72206369
   2fc7c:	3b646165 	.word	0x3b646165
   2fc80:	6e6f6320 	.word	0x6e6f6320
   2fc84:	61685f6e 	.word	0x61685f6e
   2fc88:	656c646e 	.word	0x656c646e
   2fc8c:	2064253d 	.word	0x2064253d
   2fc90:	72747461 	.word	0x72747461
   2fc94:	6e61685f 	.word	0x6e61685f
   2fc98:	3d656c64 	.word	0x3d656c64
   2fc9c:	6c206425 	.word	0x6c206425
   2fca0:	253d6e65 	.word	0x253d6e65
   2fca4:	61762064 	.word	0x61762064
   2fca8:	3d65756c 	.word	0x3d65756c
   2fcac:	00000000 	.word	0x00000000
   2fcb0:	72616863 	.word	0x72616863
   2fcb4:	65746361 	.word	0x65746361
   2fcb8:	74736972 	.word	0x74736972
   2fcbc:	72206369 	.word	0x72206369
   2fcc0:	20646165 	.word	0x20646165
   2fcc4:	706d6f63 	.word	0x706d6f63
   2fcc8:	6574656c 	.word	0x6574656c
   2fccc:	0000000a 	.word	0x0000000a
   2fcd0:	72616863 	.word	0x72616863
   2fcd4:	65746361 	.word	0x65746361
   2fcd8:	74736972 	.word	0x74736972
   2fcdc:	77206369 	.word	0x77206369
   2fce0:	65746972 	.word	0x65746972
   2fce4:	6c657220 	.word	0x6c657220
   2fce8:	6c626169 	.word	0x6c626169
   2fcec:	6f632065 	.word	0x6f632065
   2fcf0:	656c706d 	.word	0x656c706d
   2fcf4:	203b6574 	.word	0x203b6574
   2fcf8:	6e6e6f63 	.word	0x6e6e6f63
   2fcfc:	6e61685f 	.word	0x6e61685f
   2fd00:	3d656c64 	.word	0x3d656c64
   2fd04:	00006425 	.word	0x00006425
   2fd08:	74746120 	.word	0x74746120
   2fd0c:	61685f72 	.word	0x61685f72
   2fd10:	656c646e 	.word	0x656c646e
   2fd14:	2064253d 	.word	0x2064253d
   2fd18:	3d6e656c 	.word	0x3d6e656c
   2fd1c:	76206425 	.word	0x76206425
   2fd20:	65756c61 	.word	0x65756c61
   2fd24:	0000003d 	.word	0x0000003d
   2fd28:	20202020 	.word	0x20202020
   2fd2c:	67616c66 	.word	0x67616c66
   2fd30:	78303d73 	.word	0x78303d73
   2fd34:	78323025 	.word	0x78323025
   2fd38:	00000a3a 	.word	0x00000a3a
   2fd3c:	20202020 	.word	0x20202020
   2fd40:	20202020 	.word	0x20202020
   2fd44:	2d6e6f4e 	.word	0x2d6e6f4e
   2fd48:	63736964 	.word	0x63736964
   2fd4c:	7265766f 	.word	0x7265766f
   2fd50:	656c6261 	.word	0x656c6261
   2fd54:	646f6d20 	.word	0x646f6d20
   2fd58:	00000a65 	.word	0x00000a65
   2fd5c:	20202020 	.word	0x20202020
   2fd60:	20202020 	.word	0x20202020
   2fd64:	696d694c 	.word	0x696d694c
   2fd68:	20646574 	.word	0x20646574
   2fd6c:	63736964 	.word	0x63736964
   2fd70:	7265766f 	.word	0x7265766f
   2fd74:	656c6261 	.word	0x656c6261
   2fd78:	646f6d20 	.word	0x646f6d20
   2fd7c:	00000a65 	.word	0x00000a65
   2fd80:	20202020 	.word	0x20202020
   2fd84:	20202020 	.word	0x20202020
   2fd88:	656e6547 	.word	0x656e6547
   2fd8c:	206c6172 	.word	0x206c6172
   2fd90:	63736964 	.word	0x63736964
   2fd94:	7265766f 	.word	0x7265766f
   2fd98:	656c6261 	.word	0x656c6261
   2fd9c:	646f6d20 	.word	0x646f6d20
   2fda0:	00000a65 	.word	0x00000a65
   2fda4:	20202020 	.word	0x20202020
   2fda8:	20202020 	.word	0x20202020
   2fdac:	452f5242 	.word	0x452f5242
   2fdb0:	6e205244 	.word	0x6e205244
   2fdb4:	7320746f 	.word	0x7320746f
   2fdb8:	6f707075 	.word	0x6f707075
   2fdbc:	64657472 	.word	0x64657472
   2fdc0:	0000000a 	.word	0x0000000a
   2fdc4:	20202020 	.word	0x20202020
   2fdc8:	64697575 	.word	0x64697575
   2fdcc:	28363173 	.word	0x28363173
   2fdd0:	6f637325 	.word	0x6f637325
   2fdd4:	656c706d 	.word	0x656c706d
   2fdd8:	3d296574 	.word	0x3d296574
   2fddc:	00000000 	.word	0x00000000
   2fde0:	20202020 	.word	0x20202020
   2fde4:	64697575 	.word	0x64697575
   2fde8:	28323373 	.word	0x28323373
   2fdec:	6f637325 	.word	0x6f637325
   2fdf0:	656c706d 	.word	0x656c706d
   2fdf4:	3d296574 	.word	0x3d296574
   2fdf8:	00000000 	.word	0x00000000
   2fdfc:	20202020 	.word	0x20202020
   2fe00:	64697575 	.word	0x64697575
   2fe04:	38323173 	.word	0x38323173
   2fe08:	63732528 	.word	0x63732528
   2fe0c:	6c706d6f 	.word	0x6c706d6f
   2fe10:	29657465 	.word	0x29657465
   2fe14:	0000003d 	.word	0x0000003d
   2fe18:	20202020 	.word	0x20202020
   2fe1c:	656d616e 	.word	0x656d616e
   2fe20:	63732528 	.word	0x63732528
   2fe24:	6c706d6f 	.word	0x6c706d6f
   2fe28:	29657465 	.word	0x29657465
   2fe2c:	0000003d 	.word	0x0000003d
   2fe30:	20202020 	.word	0x20202020
   2fe34:	705f7874 	.word	0x705f7874
   2fe38:	6c5f7277 	.word	0x6c5f7277
   2fe3c:	253d6c76 	.word	0x253d6c76
   2fe40:	00000a64 	.word	0x00000a64
   2fe44:	20202020 	.word	0x20202020
   2fe48:	76616c73 	.word	0x76616c73
   2fe4c:	74695f65 	.word	0x74695f65
   2fe50:	725f6c76 	.word	0x725f6c76
   2fe54:	65676e61 	.word	0x65676e61
   2fe58:	0000003d 	.word	0x0000003d
   2fe5c:	20202020 	.word	0x20202020
   2fe60:	5f637673 	.word	0x5f637673
   2fe64:	61746164 	.word	0x61746164
   2fe68:	6975755f 	.word	0x6975755f
   2fe6c:	3d363164 	.word	0x3d363164
   2fe70:	00000000 	.word	0x00000000
   2fe74:	20202020 	.word	0x20202020
   2fe78:	6c627570 	.word	0x6c627570
   2fe7c:	745f6369 	.word	0x745f6369
   2fe80:	615f7467 	.word	0x615f7467
   2fe84:	3d726464 	.word	0x3d726464
   2fe88:	00000000 	.word	0x00000000
   2fe8c:	20202020 	.word	0x20202020
   2fe90:	65707061 	.word	0x65707061
   2fe94:	6e617261 	.word	0x6e617261
   2fe98:	303d6563 	.word	0x303d6563
   2fe9c:	34302578 	.word	0x34302578
   2fea0:	00000a78 	.word	0x00000a78
   2fea4:	20202020 	.word	0x20202020
   2fea8:	5f766461 	.word	0x5f766461
   2feac:	6c767469 	.word	0x6c767469
   2feb0:	2578303d 	.word	0x2578303d
   2feb4:	0a783430 	.word	0x0a783430
   2feb8:	00000000 	.word	0x00000000
   2febc:	20202020 	.word	0x20202020
   2fec0:	5f637673 	.word	0x5f637673
   2fec4:	61746164 	.word	0x61746164
   2fec8:	6975755f 	.word	0x6975755f
   2fecc:	3d323364 	.word	0x3d323364
   2fed0:	00000000 	.word	0x00000000
   2fed4:	20202020 	.word	0x20202020
   2fed8:	5f637673 	.word	0x5f637673
   2fedc:	61746164 	.word	0x61746164
   2fee0:	6975755f 	.word	0x6975755f
   2fee4:	38323164 	.word	0x38323164
   2fee8:	0000003d 	.word	0x0000003d
   2feec:	20202020 	.word	0x20202020
   2fef0:	3d697275 	.word	0x3d697275
   2fef4:	00000000 	.word	0x00000000
   2fef8:	20202020 	.word	0x20202020
   2fefc:	5f67666d 	.word	0x5f67666d
   2ff00:	61746164 	.word	0x61746164
   2ff04:	0000003d 	.word	0x0000003d
   2ff08:	74616420 	.word	0x74616420
   2ff0c:	656c5f61 	.word	0x656c5f61
   2ff10:	6874676e 	.word	0x6874676e
   2ff14:	2064253d 	.word	0x2064253d
   2ff18:	61746164 	.word	0x61746164
   2ff1c:	0000003d 	.word	0x0000003d
   2ff20:	65696620 	.word	0x65696620
   2ff24:	3a73646c 	.word	0x3a73646c
   2ff28:	0000000a 	.word	0x0000000a
   2ff2c:	6c696166 	.word	0x6c696166
   2ff30:	00006465 	.word	0x00006465
   2ff34:	61747365 	.word	0x61747365
   2ff38:	73696c62 	.word	0x73696c62
   2ff3c:	00646568 	.word	0x00646568
   2ff40:	6e6e6f63 	.word	0x6e6e6f63
   2ff44:	69746365 	.word	0x69746365
   2ff48:	25206e6f 	.word	0x25206e6f
   2ff4c:	73203b73 	.word	0x73203b73
   2ff50:	75746174 	.word	0x75746174
   2ff54:	64253d73 	.word	0x64253d73
   2ff58:	00000020 	.word	0x00000020
   2ff5c:	63736964 	.word	0x63736964
   2ff60:	656e6e6f 	.word	0x656e6e6f
   2ff64:	203b7463 	.word	0x203b7463
   2ff68:	73616572 	.word	0x73616572
   2ff6c:	253d6e6f 	.word	0x253d6e6f
   2ff70:	00002064 	.word	0x00002064
   2ff74:	65636572 	.word	0x65636572
   2ff78:	64657669 	.word	0x64657669
   2ff7c:	76646120 	.word	0x76646120
   2ff80:	69747265 	.word	0x69747265
   2ff84:	656d6573 	.word	0x656d6573
   2ff88:	203b746e 	.word	0x203b746e
   2ff8c:	6e657665 	.word	0x6e657665
   2ff90:	79745f74 	.word	0x79745f74
   2ff94:	253d6570 	.word	0x253d6570
   2ff98:	73722064 	.word	0x73722064
   2ff9c:	253d6973 	.word	0x253d6973
   2ffa0:	64612064 	.word	0x64612064
   2ffa4:	745f7264 	.word	0x745f7264
   2ffa8:	3d657079 	.word	0x3d657079
   2ffac:	61206425 	.word	0x61206425
   2ffb0:	3d726464 	.word	0x3d726464
   2ffb4:	00000000 	.word	0x00000000
   2ffb8:	6e6f430a 	.word	0x6e6f430a
   2ffbc:	7463656e 	.word	0x7463656e
   2ffc0:	656c6261 	.word	0x656c6261
   2ffc4:	72696420 	.word	0x72696420
   2ffc8:	65746365 	.word	0x65746365
   2ffcc:	64612064 	.word	0x64612064
   2ffd0:	74726576 	.word	0x74726576
   2ffd4:	6e697369 	.word	0x6e697369
   2ffd8:	76652067 	.word	0x76652067
   2ffdc:	0a746e65 	.word	0x0a746e65
   2ffe0:	00000000 	.word	0x00000000
   2ffe4:	6e6e6f63 	.word	0x6e6e6f63
   2ffe8:	69746365 	.word	0x69746365
   2ffec:	75206e6f 	.word	0x75206e6f
   2fff0:	74616470 	.word	0x74616470
   2fff4:	203b6465 	.word	0x203b6465
   2fff8:	74617473 	.word	0x74617473
   2fffc:	253d7375 	.word	0x253d7375
   30000:	00002064 	.word	0x00002064
   30004:	6e6e6f63 	.word	0x6e6e6f63
   30008:	69746365 	.word	0x69746365
   3000c:	75206e6f 	.word	0x75206e6f
   30010:	74616470 	.word	0x74616470
   30014:	65722065 	.word	0x65722065
   30018:	73657571 	.word	0x73657571
   3001c:	00000a74 	.word	0x00000a74
   30020:	73736170 	.word	0x73736170
   30024:	2079656b 	.word	0x2079656b
   30028:	69746361 	.word	0x69746361
   3002c:	65206e6f 	.word	0x65206e6f
   30030:	746e6576 	.word	0x746e6576
   30034:	6361203b 	.word	0x6361203b
   30038:	6e6f6974 	.word	0x6e6f6974
   3003c:	0064253d 	.word	0x0064253d
   30040:	6d756e20 	.word	0x6d756e20
   30044:	3d706d63 	.word	0x3d706d63
   30048:	00756c25 	.word	0x00756c25
   3004c:	63736964 	.word	0x63736964
   30050:	7265766f 	.word	0x7265766f
   30054:	6f632079 	.word	0x6f632079
   30058:	656c706d 	.word	0x656c706d
   3005c:	203b6574 	.word	0x203b6574
   30060:	73616572 	.word	0x73616572
   30064:	253d6e6f 	.word	0x253d6e6f
   30068:	00000a64 	.word	0x00000a64
   3006c:	65766461 	.word	0x65766461
   30070:	73697472 	.word	0x73697472
   30074:	6f632065 	.word	0x6f632065
   30078:	656c706d 	.word	0x656c706d
   3007c:	203b6574 	.word	0x203b6574
   30080:	73616572 	.word	0x73616572
   30084:	253d6e6f 	.word	0x253d6e6f
   30088:	00000a64 	.word	0x00000a64
   3008c:	72636e65 	.word	0x72636e65
   30090:	69747079 	.word	0x69747079
   30094:	63206e6f 	.word	0x63206e6f
   30098:	676e6168 	.word	0x676e6168
   3009c:	76652065 	.word	0x76652065
   300a0:	3b746e65 	.word	0x3b746e65
   300a4:	61747320 	.word	0x61747320
   300a8:	3d737574 	.word	0x3d737574
   300ac:	00206425 	.word	0x00206425
   300b0:	69746f6e 	.word	0x69746f6e
   300b4:	61636966 	.word	0x61636966
   300b8:	6e6f6974 	.word	0x6e6f6974
   300bc:	20787220 	.word	0x20787220
   300c0:	6e657665 	.word	0x6e657665
   300c4:	61203b74 	.word	0x61203b74
   300c8:	5f727474 	.word	0x5f727474
   300cc:	646e6168 	.word	0x646e6168
   300d0:	253d656c 	.word	0x253d656c
   300d4:	6e692064 	.word	0x6e692064
   300d8:	61636964 	.word	0x61636964
   300dc:	6e6f6974 	.word	0x6e6f6974
   300e0:	2064253d 	.word	0x2064253d
   300e4:	3d6e656c 	.word	0x3d6e656c
   300e8:	64206425 	.word	0x64206425
   300ec:	3d617461 	.word	0x3d617461
   300f0:	00000000 	.word	0x00000000
   300f4:	69746f6e 	.word	0x69746f6e
   300f8:	61636966 	.word	0x61636966
   300fc:	6e6f6974 	.word	0x6e6f6974
   30100:	20787420 	.word	0x20787420
   30104:	6e657665 	.word	0x6e657665
   30108:	73203b74 	.word	0x73203b74
   3010c:	75746174 	.word	0x75746174
   30110:	64253d73 	.word	0x64253d73
   30114:	74746120 	.word	0x74746120
   30118:	61685f72 	.word	0x61685f72
   3011c:	656c646e 	.word	0x656c646e
   30120:	2064253d 	.word	0x2064253d
   30124:	69646e69 	.word	0x69646e69
   30128:	69746163 	.word	0x69746163
   3012c:	253d6e6f 	.word	0x253d6e6f
   30130:	00000a64 	.word	0x00000a64
   30134:	73627573 	.word	0x73627573
   30138:	62697263 	.word	0x62697263
   3013c:	76652065 	.word	0x76652065
   30140:	3b746e65 	.word	0x3b746e65
   30144:	6e6f6320 	.word	0x6e6f6320
   30148:	61685f6e 	.word	0x61685f6e
   3014c:	656c646e 	.word	0x656c646e
   30150:	2064253d 	.word	0x2064253d
   30154:	72747461 	.word	0x72747461
   30158:	6e61685f 	.word	0x6e61685f
   3015c:	3d656c64 	.word	0x3d656c64
   30160:	72206425 	.word	0x72206425
   30164:	6f736165 	.word	0x6f736165
   30168:	64253d6e 	.word	0x64253d6e
   3016c:	65727020 	.word	0x65727020
   30170:	253d6e76 	.word	0x253d6e76
   30174:	75632064 	.word	0x75632064
   30178:	253d6e72 	.word	0x253d6e72
   3017c:	72702064 	.word	0x72702064
   30180:	3d697665 	.word	0x3d697665
   30184:	63206425 	.word	0x63206425
   30188:	3d697275 	.word	0x3d697275
   3018c:	000a6425 	.word	0x000a6425
   30190:	2075746d 	.word	0x2075746d
   30194:	61647075 	.word	0x61647075
   30198:	65206574 	.word	0x65206574
   3019c:	746e6576 	.word	0x746e6576
   301a0:	6f63203b 	.word	0x6f63203b
   301a4:	685f6e6e 	.word	0x685f6e6e
   301a8:	6c646e61 	.word	0x6c646e61
   301ac:	64253d65 	.word	0x64253d65
   301b0:	64696320 	.word	0x64696320
   301b4:	2064253d 	.word	0x2064253d
   301b8:	3d75746d 	.word	0x3d75746d
   301bc:	000a6425 	.word	0x000a6425
   301c0:	6e656469 	.word	0x6e656469
   301c4:	79746974 	.word	0x79746974
   301c8:	73657220 	.word	0x73657220
   301cc:	65766c6f 	.word	0x65766c6f
   301d0:	00002064 	.word	0x00002064
   301d4:	20594850 	.word	0x20594850
   301d8:	61647075 	.word	0x61647075
   301dc:	63206574 	.word	0x63206574
   301e0:	6c706d6f 	.word	0x6c706d6f
   301e4:	3b657465 	.word	0x3b657465
   301e8:	61747320 	.word	0x61747320
   301ec:	3d737574 	.word	0x3d737574
   301f0:	202c6425 	.word	0x202c6425
   301f4:	6e6e6f63 	.word	0x6e6e6f63
   301f8:	6e61685f 	.word	0x6e61685f
   301fc:	3d656c64 	.word	0x3d656c64
   30200:	20206425 	.word	0x20206425
   30204:	705f7874 	.word	0x705f7874
   30208:	253d7968 	.word	0x253d7968
   3020c:	72202c64 	.word	0x72202c64
   30210:	68705f78 	.word	0x68705f78
   30214:	64253d79 	.word	0x64253d79
   30218:	0000000a 	.word	0x0000000a
   3021c:	204d4f4f 	.word	0x204d4f4f
   30220:	4c494857 	.word	0x4c494857
   30224:	49442045 	.word	0x49442045
   30228:	564f4353 	.word	0x564f4353
   3022c:	4e495245 	.word	0x4e495245
   30230:	45442047 	.word	0x45442047
   30234:	49524353 	.word	0x49524353
   30238:	524f5450 	.word	0x524f5450
   3023c:	0000000a 	.word	0x0000000a
   30240:	646e6553 	.word	0x646e6553
   30244:	20676e69 	.word	0x20676e69
   30248:	252f6425 	.word	0x252f6425
   3024c:	656c2064 	.word	0x656c2064
   30250:	25203a6e 	.word	0x25203a6e
   30254:	00000a64 	.word	0x00000a64
   30258:	6c696146 	.word	0x6c696146
   3025c:	74206465 	.word	0x74206465
   30260:	6573206f 	.word	0x6573206f
   30264:	64692074 	.word	0x64692074
   30268:	69746e65 	.word	0x69746e65
   3026c:	61207974 	.word	0x61207974
   30270:	65726464 	.word	0x65726464
   30274:	000a7373 	.word	0x000a7373
   30278:	74736f48 	.word	0x74736f48
   3027c:	646e6120 	.word	0x646e6120
   30280:	6e6f6320 	.word	0x6e6f6320
   30284:	6c6f7274 	.word	0x6c6f7274
   30288:	2072656c 	.word	0x2072656c
   3028c:	636e7973 	.word	0x636e7973
   30290:	000a6465 	.word	0x000a6465
   30294:	72616863 	.word	0x72616863
   30298:	65746361 	.word	0x65746361
   3029c:	74736972 	.word	0x74736972
   302a0:	64206369 	.word	0x64206369
   302a4:	6f637369 	.word	0x6f637369
   302a8:	79726576 	.word	0x79726576
   302ac:	63757320 	.word	0x63757320
   302b0:	73736563 	.word	0x73736563
   302b4:	0a6c7566 	.word	0x0a6c7566
   302b8:	00000000 	.word	0x00000000
   302bc:	76726573 	.word	0x76726573
   302c0:	20656369 	.word	0x20656369
   302c4:	63736964 	.word	0x63736964
   302c8:	7265766f 	.word	0x7265766f
   302cc:	75732079 	.word	0x75732079
   302d0:	73656363 	.word	0x73656363
   302d4:	6c756673 	.word	0x6c756673
   302d8:	0000000a 	.word	0x0000000a
   302dc:	63736564 	.word	0x63736564
   302e0:	74706972 	.word	0x74706972
   302e4:	6420726f 	.word	0x6420726f
   302e8:	6f637369 	.word	0x6f637369
   302ec:	79726576 	.word	0x79726576
   302f0:	63757320 	.word	0x63757320
   302f4:	73736563 	.word	0x73736563
   302f8:	0a6c7566 	.word	0x0a6c7566
   302fc:	00000000 	.word	0x00000000
   30300:	64616572 	.word	0x64616572
   30304:	636f6c20 	.word	0x636f6c20
   30308:	203b6c61 	.word	0x203b6c61
   3030c:	72747461 	.word	0x72747461
   30310:	6e61685f 	.word	0x6e61685f
   30314:	3d656c64 	.word	0x3d656c64
   30318:	6c206425 	.word	0x6c206425
   3031c:	253d6e65 	.word	0x253d6e65
   30320:	61762064 	.word	0x61762064
   30324:	3d65756c 	.word	0x3d65756c
   30328:	00000000 	.word	0x00000000
   3032c:	20454c42 	.word	0x20454c42
   30330:	65747865 	.word	0x65747865
   30334:	6465646e 	.word	0x6465646e
   30338:	76646120 	.word	0x76646120
   3033c:	69747265 	.word	0x69747265
   30340:	676e6973 	.word	0x676e6973
   30344:	746f6e20 	.word	0x746f6e20
   30348:	70757320 	.word	0x70757320
   3034c:	74726f70 	.word	0x74726f70
   30350:	002e6465 	.word	0x002e6465
   30354:	6e6f4320 	.word	0x6e6f4320
   30358:	75676966 	.word	0x75676966
   3035c:	6e206572 	.word	0x6e206572
   30360:	6c626d69 	.word	0x6c626d69
   30364:	6f682065 	.word	0x6f682065
   30368:	74207473 	.word	0x74207473
   3036c:	6e65206f 	.word	0x6e65206f
   30370:	656c6261 	.word	0x656c6261
   30374:	0a746920 	.word	0x0a746920
   30378:	00000000 	.word	0x00000000
   3037c:	6c756f43 	.word	0x6c756f43
   30380:	6f6e2064 	.word	0x6f6e2064
   30384:	69662074 	.word	0x69662074
   30388:	6220646e 	.word	0x6220646e
   3038c:	685f656c 	.word	0x685f656c
   30390:	6f635f73 	.word	0x6f635f73
   30394:	66206e6e 	.word	0x66206e6e
   30398:	6820726f 	.word	0x6820726f
   3039c:	6c646e61 	.word	0x6c646e61
   303a0:	25203a65 	.word	0x25203a65
   303a4:	00000a64 	.word	0x00000a64
   303a8:	68737462 	.word	0x68737462
   303ac:	5f6c6c65 	.word	0x5f6c6c65
   303b0:	5f637673 	.word	0x5f637673
   303b4:	6c6f6f70 	.word	0x6c6f6f70
   303b8:	00000000 	.word	0x00000000
   303bc:	68737462 	.word	0x68737462
   303c0:	5f6c6c65 	.word	0x5f6c6c65
   303c4:	5f726863 	.word	0x5f726863
   303c8:	6c6f6f70 	.word	0x6c6f6f70
   303cc:	00000000 	.word	0x00000000
   303d0:	68737462 	.word	0x68737462
   303d4:	5f6c6c65 	.word	0x5f6c6c65
   303d8:	5f637364 	.word	0x5f637364
   303dc:	6c6f6f70 	.word	0x6c6f6f70
   303e0:	00000000 	.word	0x00000000
   303e4:	626d696e 	.word	0x626d696e
   303e8:	622d656c 	.word	0x622d656c
   303ec:	65687374 	.word	0x65687374
   303f0:	00006c6c 	.word	0x00006c6c
   303f4:	0000003a 	.word	0x0000003a
   303f8:	78307325 	.word	0x78307325
   303fc:	78323025 	.word	0x78323025
   30400:	00000000 	.word	0x00000000
   30404:	78323025 	.word	0x78323025
   30408:	3230253a 	.word	0x3230253a
   3040c:	30253a78 	.word	0x30253a78
   30410:	253a7832 	.word	0x253a7832
   30414:	3a783230 	.word	0x3a783230
   30418:	78323025 	.word	0x78323025
   3041c:	3230253a 	.word	0x3230253a
   30420:	00000078 	.word	0x00000078
   30424:	00007325 	.word	0x00007325
   30428:	20202020 	.word	0x20202020
   3042c:	20202020 	.word	0x20202020
   30430:	20202020 	.word	0x20202020
   30434:	5f637364 	.word	0x5f637364
   30438:	646e6168 	.word	0x646e6168
   3043c:	253d656c 	.word	0x253d656c
   30440:	75752064 	.word	0x75752064
   30444:	003d6469 	.word	0x003d6469
   30448:	20202020 	.word	0x20202020
   3044c:	20202020 	.word	0x20202020
   30450:	5f666564 	.word	0x5f666564
   30454:	646e6168 	.word	0x646e6168
   30458:	253d656c 	.word	0x253d656c
   3045c:	61762064 	.word	0x61762064
   30460:	61685f6c 	.word	0x61685f6c
   30464:	656c646e 	.word	0x656c646e
   30468:	2064253d 	.word	0x2064253d
   3046c:	706f7270 	.word	0x706f7270
   30470:	69747265 	.word	0x69747265
   30474:	303d7365 	.word	0x303d7365
   30478:	32302578 	.word	0x32302578
   3047c:	75752078 	.word	0x75752078
   30480:	003d6469 	.word	0x003d6469
   30484:	646e6168 	.word	0x646e6168
   30488:	253d656c 	.word	0x253d656c
   3048c:	756f2064 	.word	0x756f2064
   30490:	746f5f72 	.word	0x746f5f72
   30494:	64615f61 	.word	0x64615f61
   30498:	745f7264 	.word	0x745f7264
   3049c:	3d657079 	.word	0x3d657079
   304a0:	6f206425 	.word	0x6f206425
   304a4:	6f5f7275 	.word	0x6f5f7275
   304a8:	615f6174 	.word	0x615f6174
   304ac:	3d726464 	.word	0x3d726464
   304b0:	00000000 	.word	0x00000000
   304b4:	72756f20 	.word	0x72756f20
   304b8:	5f64695f 	.word	0x5f64695f
   304bc:	72646461 	.word	0x72646461
   304c0:	7079745f 	.word	0x7079745f
   304c4:	64253d65 	.word	0x64253d65
   304c8:	72756f20 	.word	0x72756f20
   304cc:	5f64695f 	.word	0x5f64695f
   304d0:	72646461 	.word	0x72646461
   304d4:	0000003d 	.word	0x0000003d
   304d8:	65657020 	.word	0x65657020
   304dc:	746f5f72 	.word	0x746f5f72
   304e0:	64615f61 	.word	0x64615f61
   304e4:	745f7264 	.word	0x745f7264
   304e8:	3d657079 	.word	0x3d657079
   304ec:	70206425 	.word	0x70206425
   304f0:	5f726565 	.word	0x5f726565
   304f4:	5f61746f 	.word	0x5f61746f
   304f8:	72646461 	.word	0x72646461
   304fc:	0000003d 	.word	0x0000003d
   30500:	65657020 	.word	0x65657020
   30504:	64695f72 	.word	0x64695f72
   30508:	6464615f 	.word	0x6464615f
   3050c:	79745f72 	.word	0x79745f72
   30510:	253d6570 	.word	0x253d6570
   30514:	65702064 	.word	0x65702064
   30518:	695f7265 	.word	0x695f7265
   3051c:	64615f64 	.word	0x64615f64
   30520:	003d7264 	.word	0x003d7264
   30524:	6e6f6320 	.word	0x6e6f6320
   30528:	74695f6e 	.word	0x74695f6e
   3052c:	253d6c76 	.word	0x253d6c76
   30530:	6f632064 	.word	0x6f632064
   30534:	6c5f6e6e 	.word	0x6c5f6e6e
   30538:	6e657461 	.word	0x6e657461
   3053c:	253d7963 	.word	0x253d7963
   30540:	75732064 	.word	0x75732064
   30544:	76726570 	.word	0x76726570
   30548:	6f697369 	.word	0x6f697369
   3054c:	69745f6e 	.word	0x69745f6e
   30550:	756f656d 	.word	0x756f656d
   30554:	64253d74 	.word	0x64253d74
   30558:	79656b20 	.word	0x79656b20
   3055c:	7a69735f 	.word	0x7a69735f
   30560:	64253d65 	.word	0x64253d65
   30564:	636e6520 	.word	0x636e6520
   30568:	74707972 	.word	0x74707972
   3056c:	253d6465 	.word	0x253d6465
   30570:	75612064 	.word	0x75612064
   30574:	6e656874 	.word	0x6e656874
   30578:	61636974 	.word	0x61636974
   3057c:	3d646574 	.word	0x3d646574
   30580:	62206425 	.word	0x62206425
   30584:	65646e6f 	.word	0x65646e6f
   30588:	64253d64 	.word	0x64253d64
   3058c:	0000000a 	.word	0x0000000a
   30590:	20202020 	.word	0x20202020
   30594:	72617473 	.word	0x72617473
   30598:	64253d74 	.word	0x64253d74
   3059c:	646e6520 	.word	0x646e6520
   305a0:	2064253d 	.word	0x2064253d
   305a4:	64697575 	.word	0x64697575
   305a8:	0000003d 	.word	0x0000003d
   305ac:	74736f68 	.word	0x74736f68
   305b0:	6f747320 	.word	0x6f747320
   305b4:	64657070 	.word	0x64657070
   305b8:	0000000a 	.word	0x0000000a
   305bc:	74736f68 	.word	0x74736f68
   305c0:	69616620 	.word	0x69616620
   305c4:	2064656c 	.word	0x2064656c
   305c8:	73206f74 	.word	0x73206f74
   305cc:	3b706f74 	.word	0x3b706f74
   305d0:	3d637220 	.word	0x3d637220
   305d4:	000a6425 	.word	0x000a6425
   305d8:	6e6e6f63 	.word	0x6e6e6f63
   305dc:	00000000 	.word	0x00000000
   305e0:	61766e69 	.word	0x61766e69
   305e4:	2064696c 	.word	0x2064696c
   305e8:	6e6f6327 	.word	0x6e6f6327
   305ec:	7020276e 	.word	0x7020276e
   305f0:	6d617261 	.word	0x6d617261
   305f4:	72657465 	.word	0x72657465
   305f8:	0000000a 	.word	0x0000000a
   305fc:	6c756f43 	.word	0x6c756f43
   30600:	6f6e2064 	.word	0x6f6e2064
   30604:	65722074 	.word	0x65722074
   30608:	50206461 	.word	0x50206461
   3060c:	65205948 	.word	0x65205948
   30610:	726f7272 	.word	0x726f7272
   30614:	6425203a 	.word	0x6425203a
   30618:	0000000a 	.word	0x0000000a
   3061c:	505f5854 	.word	0x505f5854
   30620:	203a5948 	.word	0x203a5948
   30624:	000a6425 	.word	0x000a6425
   30628:	505f5852 	.word	0x505f5852
   3062c:	203a5948 	.word	0x203a5948
   30630:	000a6425 	.word	0x000a6425
   30634:	705f7874 	.word	0x705f7874
   30638:	5f737968 	.word	0x5f737968
   3063c:	6b73616d 	.word	0x6b73616d
   30640:	00000000 	.word	0x00000000
   30644:	61766e69 	.word	0x61766e69
   30648:	2064696c 	.word	0x2064696c
   3064c:	5f787427 	.word	0x5f787427
   30650:	73796870 	.word	0x73796870
   30654:	73616d5f 	.word	0x73616d5f
   30658:	7020276b 	.word	0x7020276b
   3065c:	6d617261 	.word	0x6d617261
   30660:	72657465 	.word	0x72657465
   30664:	0000000a 	.word	0x0000000a
   30668:	705f7872 	.word	0x705f7872
   3066c:	5f737968 	.word	0x5f737968
   30670:	6b73616d 	.word	0x6b73616d
   30674:	00000000 	.word	0x00000000
   30678:	61766e69 	.word	0x61766e69
   3067c:	2064696c 	.word	0x2064696c
   30680:	5f787227 	.word	0x5f787227
   30684:	73796870 	.word	0x73796870
   30688:	73616d5f 	.word	0x73616d5f
   3068c:	7020276b 	.word	0x7020276b
   30690:	6d617261 	.word	0x6d617261
   30694:	72657465 	.word	0x72657465
   30698:	0000000a 	.word	0x0000000a
   3069c:	5f796870 	.word	0x5f796870
   306a0:	7374706f 	.word	0x7374706f
   306a4:	00000000 	.word	0x00000000
   306a8:	61766e69 	.word	0x61766e69
   306ac:	2064696c 	.word	0x2064696c
   306b0:	79687027 	.word	0x79687027
   306b4:	74706f5f 	.word	0x74706f5f
   306b8:	70202773 	.word	0x70202773
   306bc:	6d617261 	.word	0x6d617261
   306c0:	72657465 	.word	0x72657465
   306c4:	0000000a 	.word	0x0000000a
   306c8:	706f7473 	.word	0x706f7473
   306cc:	00000000 	.word	0x00000000
   306d0:	61766e69 	.word	0x61766e69
   306d4:	2064696c 	.word	0x2064696c
   306d8:	6f747327 	.word	0x6f747327
   306dc:	70202770 	.word	0x70202770
   306e0:	6d617261 	.word	0x6d617261
   306e4:	72657465 	.word	0x72657465
   306e8:	0000000a 	.word	0x0000000a
   306ec:	676e656c 	.word	0x676e656c
   306f0:	00006874 	.word	0x00006874
   306f4:	61766e69 	.word	0x61766e69
   306f8:	2064696c 	.word	0x2064696c
   306fc:	6e656c27 	.word	0x6e656c27
   30700:	27687467 	.word	0x27687467
   30704:	72617020 	.word	0x72617020
   30708:	74656d61 	.word	0x74656d61
   3070c:	000a7265 	.word	0x000a7265
   30710:	6f727265 	.word	0x6f727265
   30714:	6c203a72 	.word	0x6c203a72
   30718:	6d206e65 	.word	0x6d206e65
   3071c:	20747375 	.word	0x20747375
   30720:	62206562 	.word	0x62206562
   30724:	65777465 	.word	0x65777465
   30728:	34206e65 	.word	0x34206e65
   3072c:	646e6120 	.word	0x646e6120
   30730:	31353220 	.word	0x31353220
   30734:	6e69202c 	.word	0x6e69202c
   30738:	73756c63 	.word	0x73756c63
   3073c:	00657669 	.word	0x00657669
   30740:	65746172 	.word	0x65746172
   30744:	00000000 	.word	0x00000000
   30748:	61766e69 	.word	0x61766e69
   3074c:	2064696c 	.word	0x2064696c
   30750:	74617227 	.word	0x74617227
   30754:	70202765 	.word	0x70202765
   30758:	6d617261 	.word	0x6d617261
   3075c:	72657465 	.word	0x72657465
   30760:	0000000a 	.word	0x0000000a
   30764:	006d756e 	.word	0x006d756e
   30768:	61766e69 	.word	0x61766e69
   3076c:	2064696c 	.word	0x2064696c
   30770:	6d756e27 	.word	0x6d756e27
   30774:	61702027 	.word	0x61702027
   30778:	656d6172 	.word	0x656d6172
   3077c:	0a726574 	.word	0x0a726574
   30780:	00000000 	.word	0x00000000
   30784:	65707974 	.word	0x65707974
   30788:	00000000 	.word	0x00000000
   3078c:	61766e69 	.word	0x61766e69
   30790:	2064696c 	.word	0x2064696c
   30794:	70797427 	.word	0x70797427
   30798:	70202765 	.word	0x70202765
   3079c:	6d617261 	.word	0x6d617261
   307a0:	72657465 	.word	0x72657465
   307a4:	0000000a 	.word	0x0000000a
   307a8:	3a79654b 	.word	0x3a79654b
   307ac:	00000020 	.word	0x00000020
   307b0:	76696465 	.word	0x76696465
   307b4:	2075253d 	.word	0x2075253d
   307b8:	00000000 	.word	0x00000000
   307bc:	76696465 	.word	0x76696465
   307c0:	6c6c253d 	.word	0x6c6c253d
   307c4:	00002075 	.word	0x00002075
   307c8:	72646461 	.word	0x72646461
   307cc:	7079745f 	.word	0x7079745f
   307d0:	75253d65 	.word	0x75253d65
   307d4:	00000020 	.word	0x00000020
   307d8:	20202020 	.word	0x20202020
   307dc:	3a4b544c 	.word	0x3a4b544c
   307e0:	00000020 	.word	0x00000020
   307e4:	20202020 	.word	0x20202020
   307e8:	3a4b5249 	.word	0x3a4b5249
   307ec:	00000020 	.word	0x00000020
   307f0:	20202020 	.word	0x20202020
   307f4:	4b525343 	.word	0x4b525343
   307f8:	0000203a 	.word	0x0000203a
   307fc:	20202020 	.word	0x20202020
   30800:	72616863 	.word	0x72616863
   30804:	6c61765f 	.word	0x6c61765f
   30808:	6e61685f 	.word	0x6e61685f
   3080c:	3a656c64 	.word	0x3a656c64
   30810:	0a642520 	.word	0x0a642520
   30814:	00000000 	.word	0x00000000
   30818:	20202020 	.word	0x20202020
   3081c:	67616c66 	.word	0x67616c66
   30820:	20203a73 	.word	0x20203a73
   30824:	20202020 	.word	0x20202020
   30828:	20202020 	.word	0x20202020
   3082c:	25783020 	.word	0x25783020
   30830:	0a783230 	.word	0x0a783230
   30834:	00000000 	.word	0x00000000
   30838:	20202020 	.word	0x20202020
   3083c:	6e616863 	.word	0x6e616863
   30840:	3a646567 	.word	0x3a646567
   30844:	20202020 	.word	0x20202020
   30848:	20202020 	.word	0x20202020
   3084c:	0a642520 	.word	0x0a642520
   30850:	00000000 	.word	0x00000000
   30854:	72646461 	.word	0x72646461
   30858:	00000000 	.word	0x00000000
   3085c:	61766e69 	.word	0x61766e69
   30860:	2064696c 	.word	0x2064696c
   30864:	64646127 	.word	0x64646127
   30868:	70202772 	.word	0x70202772
   3086c:	6d617261 	.word	0x6d617261
   30870:	72657465 	.word	0x72657465
   30874:	0000000a 	.word	0x0000000a
   30878:	76696465 	.word	0x76696465
   3087c:	00000000 	.word	0x00000000
   30880:	61766e69 	.word	0x61766e69
   30884:	2064696c 	.word	0x2064696c
   30888:	69646527 	.word	0x69646527
   3088c:	70202776 	.word	0x70202776
   30890:	6d617261 	.word	0x6d617261
   30894:	72657465 	.word	0x72657465
   30898:	0000000a 	.word	0x0000000a
   3089c:	646e6172 	.word	0x646e6172
   308a0:	00000000 	.word	0x00000000
   308a4:	61766e69 	.word	0x61766e69
   308a8:	2064696c 	.word	0x2064696c
   308ac:	6e617227 	.word	0x6e617227
   308b0:	70202764 	.word	0x70202764
   308b4:	6d617261 	.word	0x6d617261
   308b8:	72657465 	.word	0x72657465
   308bc:	0000000a 	.word	0x0000000a
   308c0:	006b746c 	.word	0x006b746c
   308c4:	61766e69 	.word	0x61766e69
   308c8:	2064696c 	.word	0x2064696c
   308cc:	6b746c27 	.word	0x6b746c27
   308d0:	61702027 	.word	0x61702027
   308d4:	656d6172 	.word	0x656d6172
   308d8:	0a726574 	.word	0x0a726574
   308dc:	00000000 	.word	0x00000000
   308e0:	006b7269 	.word	0x006b7269
   308e4:	61766e69 	.word	0x61766e69
   308e8:	2064696c 	.word	0x2064696c
   308ec:	6b726927 	.word	0x6b726927
   308f0:	61702027 	.word	0x61702027
   308f4:	656d6172 	.word	0x656d6172
   308f8:	0a726574 	.word	0x0a726574
   308fc:	00000000 	.word	0x00000000
   30900:	6b727363 	.word	0x6b727363
   30904:	00000000 	.word	0x00000000
   30908:	61766e69 	.word	0x61766e69
   3090c:	2064696c 	.word	0x2064696c
   30910:	72736327 	.word	0x72736327
   30914:	7020276b 	.word	0x7020276b
   30918:	6d617261 	.word	0x6d617261
   3091c:	72657465 	.word	0x72657465
   30920:	0000000a 	.word	0x0000000a
   30924:	61766e69 	.word	0x61766e69
   30928:	2064696c 	.word	0x2064696c
   3092c:	74636f27 	.word	0x74636f27
   30930:	27737465 	.word	0x27737465
   30934:	72617020 	.word	0x72617020
   30938:	74656d61 	.word	0x74656d61
   3093c:	000a7265 	.word	0x000a7265
   30940:	656d6974 	.word	0x656d6974
   30944:	00000000 	.word	0x00000000
   30948:	61766e69 	.word	0x61766e69
   3094c:	2064696c 	.word	0x2064696c
   30950:	6d697427 	.word	0x6d697427
   30954:	70202765 	.word	0x70202765
   30958:	6d617261 	.word	0x6d617261
   3095c:	72657465 	.word	0x72657465
   30960:	0000000a 	.word	0x0000000a
   30964:	6f727265 	.word	0x6f727265
   30968:	65732072 	.word	0x65732072
   3096c:	6e697474 	.word	0x6e697474
   30970:	61642067 	.word	0x61642067
   30974:	6c206174 	.word	0x6c206174
   30978:	74676e65 	.word	0x74676e65
   3097c:	72203b68 	.word	0x72203b68
   30980:	64253d63 	.word	0x64253d63
   30984:	0000000a 	.word	0x0000000a
   30988:	65746e69 	.word	0x65746e69
   3098c:	6c617672 	.word	0x6c617672
   30990:	6e696d5f 	.word	0x6e696d5f
   30994:	00000000 	.word	0x00000000
   30998:	61766e69 	.word	0x61766e69
   3099c:	2064696c 	.word	0x2064696c
   309a0:	746e6927 	.word	0x746e6927
   309a4:	61767265 	.word	0x61767265
   309a8:	696d5f6c 	.word	0x696d5f6c
   309ac:	7020276e 	.word	0x7020276e
   309b0:	6d617261 	.word	0x6d617261
   309b4:	72657465 	.word	0x72657465
   309b8:	0000000a 	.word	0x0000000a
   309bc:	65746e69 	.word	0x65746e69
   309c0:	6c617672 	.word	0x6c617672
   309c4:	78616d5f 	.word	0x78616d5f
   309c8:	00000000 	.word	0x00000000
   309cc:	61766e69 	.word	0x61766e69
   309d0:	2064696c 	.word	0x2064696c
   309d4:	746e6927 	.word	0x746e6927
   309d8:	61767265 	.word	0x61767265
   309dc:	616d5f6c 	.word	0x616d5f6c
   309e0:	70202778 	.word	0x70202778
   309e4:	6d617261 	.word	0x6d617261
   309e8:	72657465 	.word	0x72657465
   309ec:	0000000a 	.word	0x0000000a
   309f0:	6574616c 	.word	0x6574616c
   309f4:	0079636e 	.word	0x0079636e
   309f8:	61766e69 	.word	0x61766e69
   309fc:	2064696c 	.word	0x2064696c
   30a00:	74616c27 	.word	0x74616c27
   30a04:	79636e65 	.word	0x79636e65
   30a08:	61702027 	.word	0x61702027
   30a0c:	656d6172 	.word	0x656d6172
   30a10:	0a726574 	.word	0x0a726574
   30a14:	00000000 	.word	0x00000000
   30a18:	656d6974 	.word	0x656d6974
   30a1c:	0074756f 	.word	0x0074756f
   30a20:	61766e69 	.word	0x61766e69
   30a24:	2064696c 	.word	0x2064696c
   30a28:	6d697427 	.word	0x6d697427
   30a2c:	74756f65 	.word	0x74756f65
   30a30:	61702027 	.word	0x61702027
   30a34:	656d6172 	.word	0x656d6172
   30a38:	0a726574 	.word	0x0a726574
   30a3c:	00000000 	.word	0x00000000
   30a40:	5f6e696d 	.word	0x5f6e696d
   30a44:	6e6e6f63 	.word	0x6e6e6f63
   30a48:	6576655f 	.word	0x6576655f
   30a4c:	6c5f746e 	.word	0x6c5f746e
   30a50:	00006e65 	.word	0x00006e65
   30a54:	61766e69 	.word	0x61766e69
   30a58:	2064696c 	.word	0x2064696c
   30a5c:	6e696d27 	.word	0x6e696d27
   30a60:	6e6f635f 	.word	0x6e6f635f
   30a64:	76655f6e 	.word	0x76655f6e
   30a68:	5f746e65 	.word	0x5f746e65
   30a6c:	276e656c 	.word	0x276e656c
   30a70:	72617020 	.word	0x72617020
   30a74:	74656d61 	.word	0x74656d61
   30a78:	000a7265 	.word	0x000a7265
   30a7c:	5f78616d 	.word	0x5f78616d
   30a80:	6e6e6f63 	.word	0x6e6e6f63
   30a84:	6576655f 	.word	0x6576655f
   30a88:	6c5f746e 	.word	0x6c5f746e
   30a8c:	00006e65 	.word	0x00006e65
   30a90:	61766e69 	.word	0x61766e69
   30a94:	2064696c 	.word	0x2064696c
   30a98:	78616d27 	.word	0x78616d27
   30a9c:	6e6f635f 	.word	0x6e6f635f
   30aa0:	76655f6e 	.word	0x76655f6e
   30aa4:	5f746e65 	.word	0x5f746e65
   30aa8:	276e656c 	.word	0x276e656c
   30aac:	72617020 	.word	0x72617020
   30ab0:	74656d61 	.word	0x74656d61
   30ab4:	000a7265 	.word	0x000a7265
   30ab8:	6f727265 	.word	0x6f727265
   30abc:	70752072 	.word	0x70752072
   30ac0:	69746164 	.word	0x69746164
   30ac4:	6320676e 	.word	0x6320676e
   30ac8:	656e6e6f 	.word	0x656e6e6f
   30acc:	6f697463 	.word	0x6f697463
   30ad0:	72203b6e 	.word	0x72203b6e
   30ad4:	64253d63 	.word	0x64253d63
   30ad8:	0000000a 	.word	0x0000000a
   30adc:	6f727265 	.word	0x6f727265
   30ae0:	65722072 	.word	0x65722072
   30ae4:	6e696461 	.word	0x6e696461
   30ae8:	73722067 	.word	0x73722067
   30aec:	203b6973 	.word	0x203b6973
   30af0:	253d6372 	.word	0x253d6372
   30af4:	00000a64 	.word	0x00000a64
   30af8:	6e6e6f63 	.word	0x6e6e6f63
   30afc:	2064253d 	.word	0x2064253d
   30b00:	69737372 	.word	0x69737372
   30b04:	0a64253d 	.word	0x0a64253d
   30b08:	00000000 	.word	0x00000000
   30b0c:	61766e69 	.word	0x61766e69
   30b10:	2064696c 	.word	0x2064696c
   30b14:	64646127 	.word	0x64646127
   30b18:	70202772 	.word	0x70202772
   30b1c:	6d617261 	.word	0x6d617261
   30b20:	72657465 	.word	0x72657465
   30b24:	64252320 	.word	0x64252320
   30b28:	0000000a 	.word	0x0000000a
   30b2c:	65646f6d 	.word	0x65646f6d
   30b30:	00000000 	.word	0x00000000
   30b34:	7373696d 	.word	0x7373696d
   30b38:	20676e69 	.word	0x20676e69
   30b3c:	65646f6d 	.word	0x65646f6d
   30b40:	0000000a 	.word	0x0000000a
   30b44:	6f636564 	.word	0x6f636564
   30b48:	6c5f6564 	.word	0x6c5f6564
   30b4c:	74696d69 	.word	0x74696d69
   30b50:	00000000 	.word	0x00000000
   30b54:	61766e69 	.word	0x61766e69
   30b58:	2064696c 	.word	0x2064696c
   30b5c:	63656427 	.word	0x63656427
   30b60:	5f65646f 	.word	0x5f65646f
   30b64:	696d696c 	.word	0x696d696c
   30b68:	70202774 	.word	0x70202774
   30b6c:	6d617261 	.word	0x6d617261
   30b70:	72657465 	.word	0x72657465
   30b74:	0000000a 	.word	0x0000000a
   30b78:	6f6e6769 	.word	0x6f6e6769
   30b7c:	6c5f6572 	.word	0x6c5f6572
   30b80:	63616765 	.word	0x63616765
   30b84:	00000079 	.word	0x00000079
   30b88:	61766e69 	.word	0x61766e69
   30b8c:	2064696c 	.word	0x2064696c
   30b90:	6e676927 	.word	0x6e676927
   30b94:	5f65726f 	.word	0x5f65726f
   30b98:	6167656c 	.word	0x6167656c
   30b9c:	20277963 	.word	0x20277963
   30ba0:	61726170 	.word	0x61726170
   30ba4:	6574656d 	.word	0x6574656d
   30ba8:	00000a72 	.word	0x00000a72
   30bac:	69726570 	.word	0x69726570
   30bb0:	6369646f 	.word	0x6369646f
   30bb4:	6c6e6f5f 	.word	0x6c6e6f5f
   30bb8:	00000079 	.word	0x00000079
   30bbc:	61766e69 	.word	0x61766e69
   30bc0:	2064696c 	.word	0x2064696c
   30bc4:	72657027 	.word	0x72657027
   30bc8:	69646f69 	.word	0x69646f69
   30bcc:	6e6f5f63 	.word	0x6e6f5f63
   30bd0:	2027796c 	.word	0x2027796c
   30bd4:	61726170 	.word	0x61726170
   30bd8:	6574656d 	.word	0x6574656d
   30bdc:	00000a72 	.word	0x00000a72
   30be0:	67616c66 	.word	0x67616c66
   30be4:	00000073 	.word	0x00000073
   30be8:	61766e69 	.word	0x61766e69
   30bec:	2064696c 	.word	0x2064696c
   30bf0:	616c6627 	.word	0x616c6627
   30bf4:	20277367 	.word	0x20277367
   30bf8:	61726170 	.word	0x61726170
   30bfc:	6574656d 	.word	0x6574656d
   30c00:	00000a72 	.word	0x00000a72
   30c04:	64697575 	.word	0x64697575
   30c08:	00003631 	.word	0x00003631
   30c0c:	61766e69 	.word	0x61766e69
   30c10:	2064696c 	.word	0x2064696c
   30c14:	69757527 	.word	0x69757527
   30c18:	27363164 	.word	0x27363164
   30c1c:	72617020 	.word	0x72617020
   30c20:	74656d61 	.word	0x74656d61
   30c24:	000a7265 	.word	0x000a7265
   30c28:	64697575 	.word	0x64697575
   30c2c:	5f363173 	.word	0x5f363173
   30c30:	635f7369 	.word	0x635f7369
   30c34:	6c706d6f 	.word	0x6c706d6f
   30c38:	00657465 	.word	0x00657465
   30c3c:	61766e69 	.word	0x61766e69
   30c40:	2064696c 	.word	0x2064696c
   30c44:	69757527 	.word	0x69757527
   30c48:	36317364 	.word	0x36317364
   30c4c:	5f73695f 	.word	0x5f73695f
   30c50:	706d6f63 	.word	0x706d6f63
   30c54:	6574656c 	.word	0x6574656c
   30c58:	61702027 	.word	0x61702027
   30c5c:	656d6172 	.word	0x656d6172
   30c60:	0a726574 	.word	0x0a726574
   30c64:	00000000 	.word	0x00000000
   30c68:	64697575 	.word	0x64697575
   30c6c:	00003233 	.word	0x00003233
   30c70:	61766e69 	.word	0x61766e69
   30c74:	2064696c 	.word	0x2064696c
   30c78:	69757527 	.word	0x69757527
   30c7c:	27323364 	.word	0x27323364
   30c80:	72617020 	.word	0x72617020
   30c84:	74656d61 	.word	0x74656d61
   30c88:	000a7265 	.word	0x000a7265
   30c8c:	64697575 	.word	0x64697575
   30c90:	5f323373 	.word	0x5f323373
   30c94:	635f7369 	.word	0x635f7369
   30c98:	6c706d6f 	.word	0x6c706d6f
   30c9c:	00657465 	.word	0x00657465
   30ca0:	61766e69 	.word	0x61766e69
   30ca4:	2064696c 	.word	0x2064696c
   30ca8:	69757527 	.word	0x69757527
   30cac:	32337364 	.word	0x32337364
   30cb0:	5f73695f 	.word	0x5f73695f
   30cb4:	706d6f63 	.word	0x706d6f63
   30cb8:	6574656c 	.word	0x6574656c
   30cbc:	61702027 	.word	0x61702027
   30cc0:	656d6172 	.word	0x656d6172
   30cc4:	0a726574 	.word	0x0a726574
   30cc8:	00000000 	.word	0x00000000
   30ccc:	64697575 	.word	0x64697575
   30cd0:	00383231 	.word	0x00383231
   30cd4:	61766e69 	.word	0x61766e69
   30cd8:	2064696c 	.word	0x2064696c
   30cdc:	69757527 	.word	0x69757527
   30ce0:	38323164 	.word	0x38323164
   30ce4:	61702027 	.word	0x61702027
   30ce8:	656d6172 	.word	0x656d6172
   30cec:	0a726574 	.word	0x0a726574
   30cf0:	00000000 	.word	0x00000000
   30cf4:	64697575 	.word	0x64697575
   30cf8:	38323173 	.word	0x38323173
   30cfc:	5f73695f 	.word	0x5f73695f
   30d00:	706d6f63 	.word	0x706d6f63
   30d04:	6574656c 	.word	0x6574656c
   30d08:	00000000 	.word	0x00000000
   30d0c:	61766e69 	.word	0x61766e69
   30d10:	2064696c 	.word	0x2064696c
   30d14:	69757527 	.word	0x69757527
   30d18:	32317364 	.word	0x32317364
   30d1c:	73695f38 	.word	0x73695f38
   30d20:	6d6f635f 	.word	0x6d6f635f
   30d24:	74656c70 	.word	0x74656c70
   30d28:	70202765 	.word	0x70202765
   30d2c:	6d617261 	.word	0x6d617261
   30d30:	72657465 	.word	0x72657465
   30d34:	0000000a 	.word	0x0000000a
   30d38:	656d616e 	.word	0x656d616e
   30d3c:	00000000 	.word	0x00000000
   30d40:	705f7874 	.word	0x705f7874
   30d44:	7265776f 	.word	0x7265776f
   30d48:	76656c5f 	.word	0x76656c5f
   30d4c:	00006c65 	.word	0x00006c65
   30d50:	61766e69 	.word	0x61766e69
   30d54:	2064696c 	.word	0x2064696c
   30d58:	5f787427 	.word	0x5f787427
   30d5c:	65776f70 	.word	0x65776f70
   30d60:	656c5f72 	.word	0x656c5f72
   30d64:	276c6576 	.word	0x276c6576
   30d68:	72617020 	.word	0x72617020
   30d6c:	74656d61 	.word	0x74656d61
   30d70:	000a7265 	.word	0x000a7265
   30d74:	76616c73 	.word	0x76616c73
   30d78:	6e695f65 	.word	0x6e695f65
   30d7c:	76726574 	.word	0x76726574
   30d80:	725f6c61 	.word	0x725f6c61
   30d84:	65676e61 	.word	0x65676e61
   30d88:	00000000 	.word	0x00000000
   30d8c:	61766e69 	.word	0x61766e69
   30d90:	2064696c 	.word	0x2064696c
   30d94:	616c7327 	.word	0x616c7327
   30d98:	695f6576 	.word	0x695f6576
   30d9c:	7265746e 	.word	0x7265746e
   30da0:	5f6c6176 	.word	0x5f6c6176
   30da4:	676e6172 	.word	0x676e6172
   30da8:	70202765 	.word	0x70202765
   30dac:	6d617261 	.word	0x6d617261
   30db0:	72657465 	.word	0x72657465
   30db4:	0000000a 	.word	0x0000000a
   30db8:	76726573 	.word	0x76726573
   30dbc:	5f656369 	.word	0x5f656369
   30dc0:	61746164 	.word	0x61746164
   30dc4:	6975755f 	.word	0x6975755f
   30dc8:	00363164 	.word	0x00363164
   30dcc:	61766e69 	.word	0x61766e69
   30dd0:	2064696c 	.word	0x2064696c
   30dd4:	72657327 	.word	0x72657327
   30dd8:	65636976 	.word	0x65636976
   30ddc:	7461645f 	.word	0x7461645f
   30de0:	75755f61 	.word	0x75755f61
   30de4:	36316469 	.word	0x36316469
   30de8:	61702027 	.word	0x61702027
   30dec:	656d6172 	.word	0x656d6172
   30df0:	0a726574 	.word	0x0a726574
   30df4:	00000000 	.word	0x00000000
   30df8:	6c627570 	.word	0x6c627570
   30dfc:	745f6369 	.word	0x745f6369
   30e00:	65677261 	.word	0x65677261
   30e04:	64615f74 	.word	0x64615f74
   30e08:	73657264 	.word	0x73657264
   30e0c:	00000073 	.word	0x00000073
   30e10:	61766e69 	.word	0x61766e69
   30e14:	2064696c 	.word	0x2064696c
   30e18:	62757027 	.word	0x62757027
   30e1c:	5f63696c 	.word	0x5f63696c
   30e20:	67726174 	.word	0x67726174
   30e24:	615f7465 	.word	0x615f7465
   30e28:	65726464 	.word	0x65726464
   30e2c:	20277373 	.word	0x20277373
   30e30:	61726170 	.word	0x61726170
   30e34:	6574656d 	.word	0x6574656d
   30e38:	00000a72 	.word	0x00000a72
   30e3c:	65707061 	.word	0x65707061
   30e40:	6e617261 	.word	0x6e617261
   30e44:	00006563 	.word	0x00006563
   30e48:	61766e69 	.word	0x61766e69
   30e4c:	2064696c 	.word	0x2064696c
   30e50:	70706127 	.word	0x70706127
   30e54:	61726165 	.word	0x61726165
   30e58:	2765636e 	.word	0x2765636e
   30e5c:	72617020 	.word	0x72617020
   30e60:	74656d61 	.word	0x74656d61
   30e64:	000a7265 	.word	0x000a7265
   30e68:	65766461 	.word	0x65766461
   30e6c:	73697472 	.word	0x73697472
   30e70:	5f676e69 	.word	0x5f676e69
   30e74:	65746e69 	.word	0x65746e69
   30e78:	6c617672 	.word	0x6c617672
   30e7c:	00000000 	.word	0x00000000
   30e80:	61766e69 	.word	0x61766e69
   30e84:	2064696c 	.word	0x2064696c
   30e88:	76646127 	.word	0x76646127
   30e8c:	69747265 	.word	0x69747265
   30e90:	676e6973 	.word	0x676e6973
   30e94:	746e695f 	.word	0x746e695f
   30e98:	61767265 	.word	0x61767265
   30e9c:	7020276c 	.word	0x7020276c
   30ea0:	6d617261 	.word	0x6d617261
   30ea4:	72657465 	.word	0x72657465
   30ea8:	0000000a 	.word	0x0000000a
   30eac:	76726573 	.word	0x76726573
   30eb0:	5f656369 	.word	0x5f656369
   30eb4:	61746164 	.word	0x61746164
   30eb8:	6975755f 	.word	0x6975755f
   30ebc:	00323364 	.word	0x00323364
   30ec0:	61766e69 	.word	0x61766e69
   30ec4:	2064696c 	.word	0x2064696c
   30ec8:	72657327 	.word	0x72657327
   30ecc:	65636976 	.word	0x65636976
   30ed0:	7461645f 	.word	0x7461645f
   30ed4:	75755f61 	.word	0x75755f61
   30ed8:	32336469 	.word	0x32336469
   30edc:	61702027 	.word	0x61702027
   30ee0:	656d6172 	.word	0x656d6172
   30ee4:	0a726574 	.word	0x0a726574
   30ee8:	00000000 	.word	0x00000000
   30eec:	76726573 	.word	0x76726573
   30ef0:	5f656369 	.word	0x5f656369
   30ef4:	61746164 	.word	0x61746164
   30ef8:	6975755f 	.word	0x6975755f
   30efc:	38323164 	.word	0x38323164
   30f00:	00000000 	.word	0x00000000
   30f04:	61766e69 	.word	0x61766e69
   30f08:	2064696c 	.word	0x2064696c
   30f0c:	72657327 	.word	0x72657327
   30f10:	65636976 	.word	0x65636976
   30f14:	7461645f 	.word	0x7461645f
   30f18:	75755f61 	.word	0x75755f61
   30f1c:	32316469 	.word	0x32316469
   30f20:	70202738 	.word	0x70202738
   30f24:	6d617261 	.word	0x6d617261
   30f28:	72657465 	.word	0x72657465
   30f2c:	0000000a 	.word	0x0000000a
   30f30:	00697275 	.word	0x00697275
   30f34:	61766e69 	.word	0x61766e69
   30f38:	2064696c 	.word	0x2064696c
   30f3c:	69727527 	.word	0x69727527
   30f40:	61702027 	.word	0x61702027
   30f44:	656d6172 	.word	0x656d6172
   30f48:	0a726574 	.word	0x0a726574
   30f4c:	00000000 	.word	0x00000000
   30f50:	5f67666d 	.word	0x5f67666d
   30f54:	61746164 	.word	0x61746164
   30f58:	00000000 	.word	0x00000000
   30f5c:	61766e69 	.word	0x61766e69
   30f60:	2064696c 	.word	0x2064696c
   30f64:	67666d27 	.word	0x67666d27
   30f68:	7461645f 	.word	0x7461645f
   30f6c:	70202761 	.word	0x70202761
   30f70:	6d617261 	.word	0x6d617261
   30f74:	72657465 	.word	0x72657465
   30f78:	0000000a 	.word	0x0000000a
   30f7c:	79646465 	.word	0x79646465
   30f80:	6e6f7473 	.word	0x6e6f7473
   30f84:	656d5f65 	.word	0x656d5f65
   30f88:	72757361 	.word	0x72757361
   30f8c:	705f6465 	.word	0x705f6465
   30f90:	7265776f 	.word	0x7265776f
   30f94:	00000000 	.word	0x00000000
   30f98:	61766e69 	.word	0x61766e69
   30f9c:	2064696c 	.word	0x2064696c
   30fa0:	64646527 	.word	0x64646527
   30fa4:	6f747379 	.word	0x6f747379
   30fa8:	6d5f656e 	.word	0x6d5f656e
   30fac:	75736165 	.word	0x75736165
   30fb0:	5f646572 	.word	0x5f646572
   30fb4:	65776f70 	.word	0x65776f70
   30fb8:	70202772 	.word	0x70202772
   30fbc:	6d617261 	.word	0x6d617261
   30fc0:	72657465 	.word	0x72657465
   30fc4:	0000000a 	.word	0x0000000a
   30fc8:	79646465 	.word	0x79646465
   30fcc:	6e6f7473 	.word	0x6e6f7473
   30fd0:	72755f65 	.word	0x72755f65
   30fd4:	0000006c 	.word	0x0000006c
   30fd8:	6f727265 	.word	0x6f727265
   30fdc:	65732072 	.word	0x65732072
   30fe0:	6e697474 	.word	0x6e697474
   30fe4:	64612067 	.word	0x64612067
   30fe8:	74726576 	.word	0x74726576
   30fec:	6d657369 	.word	0x6d657369
   30ff0:	20746e65 	.word	0x20746e65
   30ff4:	61746164 	.word	0x61746164
   30ff8:	6372203b 	.word	0x6372203b
   30ffc:	0a64253d 	.word	0x0a64253d
   31000:	00000000 	.word	0x00000000
   31004:	0075746d 	.word	0x0075746d
   31008:	61766e69 	.word	0x61766e69
   3100c:	2064696c 	.word	0x2064696c
   31010:	75746d27 	.word	0x75746d27
   31014:	61702027 	.word	0x61702027
   31018:	656d6172 	.word	0x656d6172
   3101c:	0a726574 	.word	0x0a726574
   31020:	00000000 	.word	0x00000000
   31024:	6f727245 	.word	0x6f727245
   31028:	6e203a72 	.word	0x6e203a72
   3102c:	6176206f 	.word	0x6176206f
   31030:	2064696c 	.word	0x2064696c
   31034:	74746573 	.word	0x74746573
   31038:	73676e69 	.word	0x73676e69
   3103c:	65707320 	.word	0x65707320
   31040:	69666963 	.word	0x69666963
   31044:	000a6465 	.word	0x000a6465
   31048:	636e6163 	.word	0x636e6163
   3104c:	00006c65 	.word	0x00006c65
   31050:	6e616373 	.word	0x6e616373
   31054:	6e616320 	.word	0x6e616320
   31058:	206c6563 	.word	0x206c6563
   3105c:	6c696166 	.word	0x6c696166
   31060:	6425203a 	.word	0x6425203a
   31064:	0000000a 	.word	0x0000000a
   31068:	65747865 	.word	0x65747865
   3106c:	6465646e 	.word	0x6465646e
   31070:	00000000 	.word	0x00000000
   31074:	61766e69 	.word	0x61766e69
   31078:	2064696c 	.word	0x2064696c
   3107c:	74786527 	.word	0x74786527
   31080:	65646e65 	.word	0x65646e65
   31084:	70202764 	.word	0x70202764
   31088:	6d617261 	.word	0x6d617261
   3108c:	72657465 	.word	0x72657465
   31090:	0000000a 	.word	0x0000000a
   31094:	61727564 	.word	0x61727564
   31098:	6e6f6974 	.word	0x6e6f6974
   3109c:	00000000 	.word	0x00000000
   310a0:	61766e69 	.word	0x61766e69
   310a4:	2064696c 	.word	0x2064696c
   310a8:	72756427 	.word	0x72756427
   310ac:	6f697461 	.word	0x6f697461
   310b0:	7020276e 	.word	0x7020276e
   310b4:	6d617261 	.word	0x6d617261
   310b8:	72657465 	.word	0x72657465
   310bc:	0000000a 	.word	0x0000000a
   310c0:	696d696c 	.word	0x696d696c
   310c4:	00646574 	.word	0x00646574
   310c8:	61766e69 	.word	0x61766e69
   310cc:	2064696c 	.word	0x2064696c
   310d0:	6d696c27 	.word	0x6d696c27
   310d4:	64657469 	.word	0x64657469
   310d8:	61702027 	.word	0x61702027
   310dc:	656d6172 	.word	0x656d6172
   310e0:	0a726574 	.word	0x0a726574
   310e4:	00000000 	.word	0x00000000
   310e8:	73736170 	.word	0x73736170
   310ec:	00657669 	.word	0x00657669
   310f0:	61766e69 	.word	0x61766e69
   310f4:	2064696c 	.word	0x2064696c
   310f8:	73617027 	.word	0x73617027
   310fc:	65766973 	.word	0x65766973
   31100:	61702027 	.word	0x61702027
   31104:	656d6172 	.word	0x656d6172
   31108:	0a726574 	.word	0x0a726574
   3110c:	00000000 	.word	0x00000000
   31110:	61766e69 	.word	0x61766e69
   31114:	2064696c 	.word	0x2064696c
   31118:	746e6927 	.word	0x746e6927
   3111c:	61767265 	.word	0x61767265
   31120:	7020276c 	.word	0x7020276c
   31124:	6d617261 	.word	0x6d617261
   31128:	72657465 	.word	0x72657465
   3112c:	0000000a 	.word	0x0000000a
   31130:	646e6977 	.word	0x646e6977
   31134:	0000776f 	.word	0x0000776f
   31138:	61766e69 	.word	0x61766e69
   3113c:	2064696c 	.word	0x2064696c
   31140:	6e697727 	.word	0x6e697727
   31144:	27776f64 	.word	0x27776f64
   31148:	72617020 	.word	0x72617020
   3114c:	74656d61 	.word	0x74656d61
   31150:	000a7265 	.word	0x000a7265
   31154:	746c6966 	.word	0x746c6966
   31158:	00007265 	.word	0x00007265
   3115c:	61766e69 	.word	0x61766e69
   31160:	2064696c 	.word	0x2064696c
   31164:	6c696627 	.word	0x6c696627
   31168:	27726574 	.word	0x27726574
   3116c:	72617020 	.word	0x72617020
   31170:	74656d61 	.word	0x74656d61
   31174:	000a7265 	.word	0x000a7265
   31178:	75646f6e 	.word	0x75646f6e
   3117c:	00007370 	.word	0x00007370
   31180:	61766e69 	.word	0x61766e69
   31184:	2064696c 	.word	0x2064696c
   31188:	646f6e27 	.word	0x646f6e27
   3118c:	27737075 	.word	0x27737075
   31190:	72617020 	.word	0x72617020
   31194:	74656d61 	.word	0x74656d61
   31198:	000a7265 	.word	0x000a7265
   3119c:	5f6e776f 	.word	0x5f6e776f
   311a0:	72646461 	.word	0x72646461
   311a4:	7079745f 	.word	0x7079745f
   311a8:	00000065 	.word	0x00000065
   311ac:	61766e69 	.word	0x61766e69
   311b0:	2064696c 	.word	0x2064696c
   311b4:	6e776f27 	.word	0x6e776f27
   311b8:	6464615f 	.word	0x6464615f
   311bc:	79745f72 	.word	0x79745f72
   311c0:	20276570 	.word	0x20276570
   311c4:	61726170 	.word	0x61726170
   311c8:	6574656d 	.word	0x6574656d
   311cc:	00000a72 	.word	0x00000a72
   311d0:	6f727265 	.word	0x6f727265
   311d4:	63732072 	.word	0x63732072
   311d8:	696e6e61 	.word	0x696e6e61
   311dc:	203b676e 	.word	0x203b676e
   311e0:	253d6372 	.word	0x253d6372
   311e4:	00000a64 	.word	0x00000a64
   311e8:	65747865 	.word	0x65747865
   311ec:	6465646e 	.word	0x6465646e
   311f0:	7275645f 	.word	0x7275645f
   311f4:	6f697461 	.word	0x6f697461
   311f8:	0000006e 	.word	0x0000006e
   311fc:	61766e69 	.word	0x61766e69
   31200:	2064696c 	.word	0x2064696c
   31204:	74786527 	.word	0x74786527
   31208:	65646e65 	.word	0x65646e65
   3120c:	75645f64 	.word	0x75645f64
   31210:	69746172 	.word	0x69746172
   31214:	20276e6f 	.word	0x20276e6f
   31218:	61726170 	.word	0x61726170
   3121c:	6574656d 	.word	0x6574656d
   31220:	00000a72 	.word	0x00000a72
   31224:	65747865 	.word	0x65747865
   31228:	6465646e 	.word	0x6465646e
   3122c:	7265705f 	.word	0x7265705f
   31230:	00646f69 	.word	0x00646f69
   31234:	61766e69 	.word	0x61766e69
   31238:	2064696c 	.word	0x2064696c
   3123c:	74786527 	.word	0x74786527
   31240:	65646e65 	.word	0x65646e65
   31244:	65705f64 	.word	0x65705f64
   31248:	646f6972 	.word	0x646f6972
   3124c:	61702027 	.word	0x61702027
   31250:	656d6172 	.word	0x656d6172
   31254:	0a726574 	.word	0x0a726574
   31258:	00000000 	.word	0x00000000
   3125c:	676e6f6c 	.word	0x676e6f6c
   31260:	676e6172 	.word	0x676e6172
   31264:	6e695f65 	.word	0x6e695f65
   31268:	76726574 	.word	0x76726574
   3126c:	00006c61 	.word	0x00006c61
   31270:	61766e69 	.word	0x61766e69
   31274:	2064696c 	.word	0x2064696c
   31278:	6e6f6c27 	.word	0x6e6f6c27
   3127c:	6e617267 	.word	0x6e617267
   31280:	695f6567 	.word	0x695f6567
   31284:	7265746e 	.word	0x7265746e
   31288:	276c6176 	.word	0x276c6176
   3128c:	72617020 	.word	0x72617020
   31290:	74656d61 	.word	0x74656d61
   31294:	000a7265 	.word	0x000a7265
   31298:	676e6f6c 	.word	0x676e6f6c
   3129c:	676e6172 	.word	0x676e6172
   312a0:	69775f65 	.word	0x69775f65
   312a4:	776f646e 	.word	0x776f646e
   312a8:	00000000 	.word	0x00000000
   312ac:	61766e69 	.word	0x61766e69
   312b0:	2064696c 	.word	0x2064696c
   312b4:	6e6f6c27 	.word	0x6e6f6c27
   312b8:	6e617267 	.word	0x6e617267
   312bc:	775f6567 	.word	0x775f6567
   312c0:	6f646e69 	.word	0x6f646e69
   312c4:	70202777 	.word	0x70202777
   312c8:	6d617261 	.word	0x6d617261
   312cc:	72657465 	.word	0x72657465
   312d0:	0000000a 	.word	0x0000000a
   312d4:	676e6f6c 	.word	0x676e6f6c
   312d8:	676e6172 	.word	0x676e6172
   312dc:	61705f65 	.word	0x61705f65
   312e0:	76697373 	.word	0x76697373
   312e4:	00000065 	.word	0x00000065
   312e8:	61766e69 	.word	0x61766e69
   312ec:	2064696c 	.word	0x2064696c
   312f0:	6e6f6c27 	.word	0x6e6f6c27
   312f4:	6e617267 	.word	0x6e617267
   312f8:	705f6567 	.word	0x705f6567
   312fc:	69737361 	.word	0x69737361
   31300:	20276576 	.word	0x20276576
   31304:	61726170 	.word	0x61726170
   31308:	6574656d 	.word	0x6574656d
   3130c:	00000a72 	.word	0x00000a72
   31310:	6c627570 	.word	0x6c627570
   31314:	695f6369 	.word	0x695f6369
   31318:	64615f64 	.word	0x64615f64
   3131c:	003d7264 	.word	0x003d7264
   31320:	6e617220 	.word	0x6e617220
   31324:	5f6d6f64 	.word	0x5f6d6f64
   31328:	615f6469 	.word	0x615f6469
   3132c:	3d726464 	.word	0x3d726464
   31330:	00000000 	.word	0x00000000
   31334:	73616572 	.word	0x73616572
   31338:	00006e6f 	.word	0x00006e6f
   3133c:	61766e69 	.word	0x61766e69
   31340:	2064696c 	.word	0x2064696c
   31344:	61657227 	.word	0x61657227
   31348:	276e6f73 	.word	0x276e6f73
   3134c:	72617020 	.word	0x72617020
   31350:	74656d61 	.word	0x74656d61
   31354:	000a7265 	.word	0x000a7265
   31358:	6f727265 	.word	0x6f727265
   3135c:	65742072 	.word	0x65742072
   31360:	6e696d72 	.word	0x6e696d72
   31364:	6e697461 	.word	0x6e697461
   31368:	6f632067 	.word	0x6f632067
   3136c:	63656e6e 	.word	0x63656e6e
   31370:	6e6f6974 	.word	0x6e6f6974
   31374:	6372203b 	.word	0x6372203b
   31378:	0a64253d 	.word	0x0a64253d
   3137c:	00000000 	.word	0x00000000
   31380:	6e6e6f63 	.word	0x6e6e6f63
   31384:	69746365 	.word	0x69746365
   31388:	63206e6f 	.word	0x63206e6f
   3138c:	65636e61 	.word	0x65636e61
   31390:	6166206c 	.word	0x6166206c
   31394:	203a6c69 	.word	0x203a6c69
   31398:	000a6425 	.word	0x000a6425
   3139c:	72656570 	.word	0x72656570
   313a0:	0000005f 	.word	0x0000005f
   313a4:	61766e69 	.word	0x61766e69
   313a8:	2064696c 	.word	0x2064696c
   313ac:	65657027 	.word	0x65657027
   313b0:	64615f72 	.word	0x64615f72
   313b4:	20277264 	.word	0x20277264
   313b8:	61726170 	.word	0x61726170
   313bc:	6574656d 	.word	0x6574656d
   313c0:	00000a72 	.word	0x00000a72
   313c4:	6e616373 	.word	0x6e616373
   313c8:	746e695f 	.word	0x746e695f
   313cc:	61767265 	.word	0x61767265
   313d0:	0000006c 	.word	0x0000006c
   313d4:	61766e69 	.word	0x61766e69
   313d8:	2064696c 	.word	0x2064696c
   313dc:	61637327 	.word	0x61637327
   313e0:	6e695f6e 	.word	0x6e695f6e
   313e4:	76726574 	.word	0x76726574
   313e8:	20276c61 	.word	0x20276c61
   313ec:	61726170 	.word	0x61726170
   313f0:	6574656d 	.word	0x6574656d
   313f4:	00000a72 	.word	0x00000a72
   313f8:	6e616373 	.word	0x6e616373
   313fc:	6e69775f 	.word	0x6e69775f
   31400:	00776f64 	.word	0x00776f64
   31404:	61766e69 	.word	0x61766e69
   31408:	2064696c 	.word	0x2064696c
   3140c:	61637327 	.word	0x61637327
   31410:	69775f6e 	.word	0x69775f6e
   31414:	776f646e 	.word	0x776f646e
   31418:	61702027 	.word	0x61702027
   3141c:	656d6172 	.word	0x656d6172
   31420:	0a726574 	.word	0x0a726574
   31424:	00000000 	.word	0x00000000
   31428:	6f727265 	.word	0x6f727265
   3142c:	6f632072 	.word	0x6f632072
   31430:	63656e6e 	.word	0x63656e6e
   31434:	676e6974 	.word	0x676e6974
   31438:	6372203b 	.word	0x6372203b
   3143c:	0a64253d 	.word	0x0a64253d
   31440:	00000000 	.word	0x00000000
   31444:	65646f63 	.word	0x65646f63
   31448:	63735f64 	.word	0x63735f64
   3144c:	695f6e61 	.word	0x695f6e61
   31450:	7265746e 	.word	0x7265746e
   31454:	006c6176 	.word	0x006c6176
   31458:	61766e69 	.word	0x61766e69
   3145c:	2064696c 	.word	0x2064696c
   31460:	646f6327 	.word	0x646f6327
   31464:	735f6465 	.word	0x735f6465
   31468:	5f6e6163 	.word	0x5f6e6163
   3146c:	65746e69 	.word	0x65746e69
   31470:	6c617672 	.word	0x6c617672
   31474:	61702027 	.word	0x61702027
   31478:	656d6172 	.word	0x656d6172
   3147c:	0a726574 	.word	0x0a726574
   31480:	00000000 	.word	0x00000000
   31484:	65646f63 	.word	0x65646f63
   31488:	63735f64 	.word	0x63735f64
   3148c:	775f6e61 	.word	0x775f6e61
   31490:	6f646e69 	.word	0x6f646e69
   31494:	00000077 	.word	0x00000077
   31498:	61766e69 	.word	0x61766e69
   3149c:	2064696c 	.word	0x2064696c
   314a0:	646f6327 	.word	0x646f6327
   314a4:	735f6465 	.word	0x735f6465
   314a8:	5f6e6163 	.word	0x5f6e6163
   314ac:	646e6977 	.word	0x646e6977
   314b0:	2027776f 	.word	0x2027776f
   314b4:	61726170 	.word	0x61726170
   314b8:	6574656d 	.word	0x6574656d
   314bc:	00000a72 	.word	0x00000a72
   314c0:	65646f63 	.word	0x65646f63
   314c4:	6e695f64 	.word	0x6e695f64
   314c8:	76726574 	.word	0x76726574
   314cc:	6d5f6c61 	.word	0x6d5f6c61
   314d0:	00006e69 	.word	0x00006e69
   314d4:	61766e69 	.word	0x61766e69
   314d8:	2064696c 	.word	0x2064696c
   314dc:	646f6327 	.word	0x646f6327
   314e0:	695f6465 	.word	0x695f6465
   314e4:	7265746e 	.word	0x7265746e
   314e8:	5f6c6176 	.word	0x5f6c6176
   314ec:	276e696d 	.word	0x276e696d
   314f0:	72617020 	.word	0x72617020
   314f4:	74656d61 	.word	0x74656d61
   314f8:	000a7265 	.word	0x000a7265
   314fc:	65646f63 	.word	0x65646f63
   31500:	6e695f64 	.word	0x6e695f64
   31504:	76726574 	.word	0x76726574
   31508:	6d5f6c61 	.word	0x6d5f6c61
   3150c:	00007861 	.word	0x00007861
   31510:	61766e69 	.word	0x61766e69
   31514:	2064696c 	.word	0x2064696c
   31518:	646f6327 	.word	0x646f6327
   3151c:	695f6465 	.word	0x695f6465
   31520:	7265746e 	.word	0x7265746e
   31524:	5f6c6176 	.word	0x5f6c6176
   31528:	2778616d 	.word	0x2778616d
   3152c:	72617020 	.word	0x72617020
   31530:	74656d61 	.word	0x74656d61
   31534:	000a7265 	.word	0x000a7265
   31538:	65646f63 	.word	0x65646f63
   3153c:	616c5f64 	.word	0x616c5f64
   31540:	636e6574 	.word	0x636e6574
   31544:	00000079 	.word	0x00000079
   31548:	61766e69 	.word	0x61766e69
   3154c:	2064696c 	.word	0x2064696c
   31550:	646f6327 	.word	0x646f6327
   31554:	6c5f6465 	.word	0x6c5f6465
   31558:	6e657461 	.word	0x6e657461
   3155c:	20277963 	.word	0x20277963
   31560:	61726170 	.word	0x61726170
   31564:	6574656d 	.word	0x6574656d
   31568:	00000a72 	.word	0x00000a72
   3156c:	65646f63 	.word	0x65646f63
   31570:	69745f64 	.word	0x69745f64
   31574:	756f656d 	.word	0x756f656d
   31578:	00000074 	.word	0x00000074
   3157c:	61766e69 	.word	0x61766e69
   31580:	2064696c 	.word	0x2064696c
   31584:	646f6327 	.word	0x646f6327
   31588:	745f6465 	.word	0x745f6465
   3158c:	6f656d69 	.word	0x6f656d69
   31590:	20277475 	.word	0x20277475
   31594:	61726170 	.word	0x61726170
   31598:	6574656d 	.word	0x6574656d
   3159c:	00000a72 	.word	0x00000a72
   315a0:	65646f63 	.word	0x65646f63
   315a4:	696d5f64 	.word	0x696d5f64
   315a8:	6f635f6e 	.word	0x6f635f6e
   315ac:	655f6e6e 	.word	0x655f6e6e
   315b0:	746e6576 	.word	0x746e6576
   315b4:	00000000 	.word	0x00000000
   315b8:	61766e69 	.word	0x61766e69
   315bc:	2064696c 	.word	0x2064696c
   315c0:	646f6327 	.word	0x646f6327
   315c4:	6d5f6465 	.word	0x6d5f6465
   315c8:	635f6e69 	.word	0x635f6e69
   315cc:	5f6e6e6f 	.word	0x5f6e6e6f
   315d0:	6e657665 	.word	0x6e657665
   315d4:	70202774 	.word	0x70202774
   315d8:	6d617261 	.word	0x6d617261
   315dc:	72657465 	.word	0x72657465
   315e0:	0000000a 	.word	0x0000000a
   315e4:	65646f63 	.word	0x65646f63
   315e8:	616d5f64 	.word	0x616d5f64
   315ec:	6f635f78 	.word	0x6f635f78
   315f0:	655f6e6e 	.word	0x655f6e6e
   315f4:	746e6576 	.word	0x746e6576
   315f8:	00000000 	.word	0x00000000
   315fc:	61766e69 	.word	0x61766e69
   31600:	2064696c 	.word	0x2064696c
   31604:	646f6327 	.word	0x646f6327
   31608:	6d5f6465 	.word	0x6d5f6465
   3160c:	635f7861 	.word	0x635f7861
   31610:	5f6e6e6f 	.word	0x5f6e6e6f
   31614:	6e657665 	.word	0x6e657665
   31618:	70202774 	.word	0x70202774
   3161c:	6d617261 	.word	0x6d617261
   31620:	72657465 	.word	0x72657465
   31624:	0000000a 	.word	0x0000000a
   31628:	695f4d32 	.word	0x695f4d32
   3162c:	7265746e 	.word	0x7265746e
   31630:	5f6c6176 	.word	0x5f6c6176
   31634:	006e696d 	.word	0x006e696d
   31638:	61766e69 	.word	0x61766e69
   3163c:	2064696c 	.word	0x2064696c
   31640:	5f4d3227 	.word	0x5f4d3227
   31644:	65746e69 	.word	0x65746e69
   31648:	6c617672 	.word	0x6c617672
   3164c:	6e696d5f 	.word	0x6e696d5f
   31650:	61702027 	.word	0x61702027
   31654:	656d6172 	.word	0x656d6172
   31658:	0a726574 	.word	0x0a726574
   3165c:	00000000 	.word	0x00000000
   31660:	695f4d32 	.word	0x695f4d32
   31664:	7265746e 	.word	0x7265746e
   31668:	5f6c6176 	.word	0x5f6c6176
   3166c:	0078616d 	.word	0x0078616d
   31670:	61766e69 	.word	0x61766e69
   31674:	2064696c 	.word	0x2064696c
   31678:	5f4d3227 	.word	0x5f4d3227
   3167c:	65746e69 	.word	0x65746e69
   31680:	6c617672 	.word	0x6c617672
   31684:	78616d5f 	.word	0x78616d5f
   31688:	61702027 	.word	0x61702027
   3168c:	656d6172 	.word	0x656d6172
   31690:	0a726574 	.word	0x0a726574
   31694:	00000000 	.word	0x00000000
   31698:	6c5f4d32 	.word	0x6c5f4d32
   3169c:	6e657461 	.word	0x6e657461
   316a0:	00007963 	.word	0x00007963
   316a4:	61766e69 	.word	0x61766e69
   316a8:	2064696c 	.word	0x2064696c
   316ac:	5f4d3227 	.word	0x5f4d3227
   316b0:	6574616c 	.word	0x6574616c
   316b4:	2779636e 	.word	0x2779636e
   316b8:	72617020 	.word	0x72617020
   316bc:	74656d61 	.word	0x74656d61
   316c0:	000a7265 	.word	0x000a7265
   316c4:	745f4d32 	.word	0x745f4d32
   316c8:	6f656d69 	.word	0x6f656d69
   316cc:	00007475 	.word	0x00007475
   316d0:	61766e69 	.word	0x61766e69
   316d4:	2064696c 	.word	0x2064696c
   316d8:	5f4d3227 	.word	0x5f4d3227
   316dc:	656d6974 	.word	0x656d6974
   316e0:	2774756f 	.word	0x2774756f
   316e4:	72617020 	.word	0x72617020
   316e8:	74656d61 	.word	0x74656d61
   316ec:	000a7265 	.word	0x000a7265
   316f0:	6d5f4d32 	.word	0x6d5f4d32
   316f4:	635f6e69 	.word	0x635f6e69
   316f8:	5f6e6e6f 	.word	0x5f6e6e6f
   316fc:	6e657665 	.word	0x6e657665
   31700:	00000074 	.word	0x00000074
   31704:	61766e69 	.word	0x61766e69
   31708:	2064696c 	.word	0x2064696c
   3170c:	5f4d3227 	.word	0x5f4d3227
   31710:	5f6e696d 	.word	0x5f6e696d
   31714:	6e6e6f63 	.word	0x6e6e6f63
   31718:	6576655f 	.word	0x6576655f
   3171c:	2027746e 	.word	0x2027746e
   31720:	61726170 	.word	0x61726170
   31724:	6574656d 	.word	0x6574656d
   31728:	00000a72 	.word	0x00000a72
   3172c:	6d5f4d32 	.word	0x6d5f4d32
   31730:	635f7861 	.word	0x635f7861
   31734:	5f6e6e6f 	.word	0x5f6e6e6f
   31738:	6e657665 	.word	0x6e657665
   3173c:	00000074 	.word	0x00000074
   31740:	61766e69 	.word	0x61766e69
   31744:	2064696c 	.word	0x2064696c
   31748:	5f4d3227 	.word	0x5f4d3227
   3174c:	5f78616d 	.word	0x5f78616d
   31750:	6e6e6f63 	.word	0x6e6e6f63
   31754:	6576655f 	.word	0x6576655f
   31758:	2027746e 	.word	0x2027746e
   3175c:	61726170 	.word	0x61726170
   31760:	6574656d 	.word	0x6574656d
   31764:	00000a72 	.word	0x00000a72
   31768:	65766461 	.word	0x65766461
   3176c:	73697472 	.word	0x73697472
   31770:	74732065 	.word	0x74732065
   31774:	6620706f 	.word	0x6620706f
   31778:	3a6c6961 	.word	0x3a6c6961
   3177c:	0a642520 	.word	0x0a642520
   31780:	00000000 	.word	0x00000000
   31784:	63736964 	.word	0x63736964
   31788:	0000766f 	.word	0x0000766f
   3178c:	61766e69 	.word	0x61766e69
   31790:	2064696c 	.word	0x2064696c
   31794:	73696427 	.word	0x73696427
   31798:	27766f63 	.word	0x27766f63
   3179c:	72617020 	.word	0x72617020
   317a0:	74656d61 	.word	0x74656d61
   317a4:	000a7265 	.word	0x000a7265
   317a8:	74736572 	.word	0x74736572
   317ac:	00747261 	.word	0x00747261
   317b0:	61766e69 	.word	0x61766e69
   317b4:	2064696c 	.word	0x2064696c
   317b8:	73657227 	.word	0x73657227
   317bc:	74726174 	.word	0x74726174
   317c0:	61702027 	.word	0x61702027
   317c4:	656d6172 	.word	0x656d6172
   317c8:	0a726574 	.word	0x0a726574
   317cc:	00000000 	.word	0x00000000
   317d0:	6e616863 	.word	0x6e616863
   317d4:	5f6c656e 	.word	0x5f6c656e
   317d8:	0070616d 	.word	0x0070616d
   317dc:	61766e69 	.word	0x61766e69
   317e0:	2064696c 	.word	0x2064696c
   317e4:	61686327 	.word	0x61686327
   317e8:	6c656e6e 	.word	0x6c656e6e
   317ec:	70616d5f 	.word	0x70616d5f
   317f0:	61702027 	.word	0x61702027
   317f4:	656d6172 	.word	0x656d6172
   317f8:	0a726574 	.word	0x0a726574
   317fc:	00000000 	.word	0x00000000
   31800:	68676968 	.word	0x68676968
   31804:	7475645f 	.word	0x7475645f
   31808:	00000079 	.word	0x00000079
   3180c:	61766e69 	.word	0x61766e69
   31810:	2064696c 	.word	0x2064696c
   31814:	67696827 	.word	0x67696827
   31818:	75645f68 	.word	0x75645f68
   3181c:	20277974 	.word	0x20277974
   31820:	61726170 	.word	0x61726170
   31824:	6574656d 	.word	0x6574656d
   31828:	00000a72 	.word	0x00000a72
   3182c:	65766461 	.word	0x65766461
   31830:	73697472 	.word	0x73697472
   31834:	61662065 	.word	0x61662065
   31838:	203a6c69 	.word	0x203a6c69
   3183c:	000a6425 	.word	0x000a6425
   31840:	72617473 	.word	0x72617473
   31844:	00000074 	.word	0x00000074
   31848:	00646e65 	.word	0x00646e65
   3184c:	68737462 	.word	0x68737462
   31850:	006c6c65 	.word	0x006c6c65
   31854:	65766461 	.word	0x65766461
   31858:	73697472 	.word	0x73697472
   3185c:	00000065 	.word	0x00000065
   31860:	6e6e6f63 	.word	0x6e6e6f63
   31864:	00746365 	.word	0x00746365
   31868:	63736964 	.word	0x63736964
   3186c:	656e6e6f 	.word	0x656e6e6f
   31870:	00007463 	.word	0x00007463
   31874:	776f6873 	.word	0x776f6873
   31878:	6464612d 	.word	0x6464612d
   3187c:	00000072 	.word	0x00000072
   31880:	776f6873 	.word	0x776f6873
   31884:	6e6f632d 	.word	0x6e6f632d
   31888:	0000006e 	.word	0x0000006e
   3188c:	2d746573 	.word	0x2d746573
   31890:	6e616373 	.word	0x6e616373
   31894:	74706f2d 	.word	0x74706f2d
   31898:	00000073 	.word	0x00000073
   3189c:	6e616373 	.word	0x6e616373
   318a0:	00000000 	.word	0x00000000
   318a4:	2d746573 	.word	0x2d746573
   318a8:	2d766461 	.word	0x2d766461
   318ac:	61746164 	.word	0x61746164
   318b0:	00000000 	.word	0x00000000
   318b4:	2d746573 	.word	0x2d746573
   318b8:	6e616373 	.word	0x6e616373
   318bc:	7073722d 	.word	0x7073722d
   318c0:	00000000 	.word	0x00000000
   318c4:	2d746573 	.word	0x2d746573
   318c8:	76697270 	.word	0x76697270
   318cc:	646f6d2d 	.word	0x646f6d2d
   318d0:	00000065 	.word	0x00000065
   318d4:	74696877 	.word	0x74696877
   318d8:	696c2d65 	.word	0x696c2d65
   318dc:	00007473 	.word	0x00007473
   318e0:	6e6e6f63 	.word	0x6e6e6f63
   318e4:	7373722d 	.word	0x7373722d
   318e8:	00000069 	.word	0x00000069
   318ec:	6e6e6f63 	.word	0x6e6e6f63
   318f0:	6470752d 	.word	0x6470752d
   318f4:	2d657461 	.word	0x2d657461
   318f8:	61726170 	.word	0x61726170
   318fc:	0000736d 	.word	0x0000736d
   31900:	6e6e6f63 	.word	0x6e6e6f63
   31904:	7461642d 	.word	0x7461642d
   31908:	6e656c61 	.word	0x6e656c61
   3190c:	00000000 	.word	0x00000000
   31910:	74746167 	.word	0x74746167
   31914:	7369642d 	.word	0x7369642d
   31918:	65766f63 	.word	0x65766f63
   3191c:	68632d72 	.word	0x68632d72
   31920:	63617261 	.word	0x63617261
   31924:	69726574 	.word	0x69726574
   31928:	63697473 	.word	0x63697473
   3192c:	00000000 	.word	0x00000000
   31930:	74746167 	.word	0x74746167
   31934:	7369642d 	.word	0x7369642d
   31938:	65766f63 	.word	0x65766f63
   3193c:	65642d72 	.word	0x65642d72
   31940:	69726373 	.word	0x69726373
   31944:	726f7470 	.word	0x726f7470
   31948:	00000000 	.word	0x00000000
   3194c:	74746167 	.word	0x74746167
   31950:	7369642d 	.word	0x7369642d
   31954:	65766f63 	.word	0x65766f63
   31958:	65732d72 	.word	0x65732d72
   3195c:	63697672 	.word	0x63697672
   31960:	00000065 	.word	0x00000065
   31964:	74746167 	.word	0x74746167
   31968:	7369642d 	.word	0x7369642d
   3196c:	65766f63 	.word	0x65766f63
   31970:	75662d72 	.word	0x75662d72
   31974:	00006c6c 	.word	0x00006c6c
   31978:	74746167 	.word	0x74746167
   3197c:	6e69662d 	.word	0x6e69662d
   31980:	6e692d64 	.word	0x6e692d64
   31984:	64756c63 	.word	0x64756c63
   31988:	732d6465 	.word	0x732d6465
   3198c:	69767265 	.word	0x69767265
   31990:	00736563 	.word	0x00736563
   31994:	74746167 	.word	0x74746167
   31998:	6378652d 	.word	0x6378652d
   3199c:	676e6168 	.word	0x676e6168
   319a0:	746d2d65 	.word	0x746d2d65
   319a4:	00000075 	.word	0x00000075
   319a8:	74746167 	.word	0x74746167
   319ac:	6165722d 	.word	0x6165722d
   319b0:	00000064 	.word	0x00000064
   319b4:	74746167 	.word	0x74746167
   319b8:	746f6e2d 	.word	0x746f6e2d
   319bc:	00796669 	.word	0x00796669
   319c0:	74746167 	.word	0x74746167
   319c4:	7265732d 	.word	0x7265732d
   319c8:	65636976 	.word	0x65636976
   319cc:	6168632d 	.word	0x6168632d
   319d0:	6465676e 	.word	0x6465676e
   319d4:	00000000 	.word	0x00000000
   319d8:	74746167 	.word	0x74746167
   319dc:	7265732d 	.word	0x7265732d
   319e0:	65636976 	.word	0x65636976
   319e4:	7369762d 	.word	0x7369762d
   319e8:	6c696269 	.word	0x6c696269
   319ec:	00797469 	.word	0x00797469
   319f0:	74746167 	.word	0x74746167
   319f4:	6f68732d 	.word	0x6f68732d
   319f8:	00000077 	.word	0x00000077
   319fc:	74746167 	.word	0x74746167
   31a00:	6f68732d 	.word	0x6f68732d
   31a04:	6f6c2d77 	.word	0x6f6c2d77
   31a08:	006c6163 	.word	0x006c6163
   31a0c:	74746167 	.word	0x74746167
   31a10:	6972772d 	.word	0x6972772d
   31a14:	00006574 	.word	0x00006574
   31a18:	7379656b 	.word	0x7379656b
   31a1c:	65726f74 	.word	0x65726f74
   31a20:	6464612d 	.word	0x6464612d
   31a24:	00000000 	.word	0x00000000
   31a28:	7379656b 	.word	0x7379656b
   31a2c:	65726f74 	.word	0x65726f74
   31a30:	6c65642d 	.word	0x6c65642d
   31a34:	00000000 	.word	0x00000000
   31a38:	7379656b 	.word	0x7379656b
   31a3c:	65726f74 	.word	0x65726f74
   31a40:	6f68732d 	.word	0x6f68732d
   31a44:	00000077 	.word	0x00000077
   31a48:	74736574 	.word	0x74736574
   31a4c:	0078742d 	.word	0x0078742d
   31a50:	2d796870 	.word	0x2d796870
   31a54:	00746573 	.word	0x00746573
   31a58:	2d796870 	.word	0x2d796870
   31a5c:	2d746573 	.word	0x2d746573
   31a60:	61666564 	.word	0x61666564
   31a64:	00746c75 	.word	0x00746c75
   31a68:	2d796870 	.word	0x2d796870
   31a6c:	64616572 	.word	0x64616572
   31a70:	00000000 	.word	0x00000000
   31a74:	74736f68 	.word	0x74736f68
   31a78:	616e652d 	.word	0x616e652d
   31a7c:	00656c62 	.word	0x00656c62
   31a80:	74736f68 	.word	0x74736f68
   31a84:	7369642d 	.word	0x7369642d
   31a88:	656c6261 	.word	0x656c6261
   31a8c:	00000000 	.word	0x00000000
   31a90:	66726570 	.word	0x66726570
   31a94:	206d726f 	.word	0x206d726f
   31a98:	74746167 	.word	0x74746167
   31a9c:	69727720 	.word	0x69727720
   31aa0:	70206574 	.word	0x70206574
   31aa4:	65636f72 	.word	0x65636f72
   31aa8:	65727564 	.word	0x65727564
   31aac:	00000000 	.word	0x00000000
   31ab0:	6e6e6f63 	.word	0x6e6e6f63
   31ab4:	69746365 	.word	0x69746365
   31ab8:	68206e6f 	.word	0x68206e6f
   31abc:	6c646e61 	.word	0x6c646e61
   31ac0:	75202c65 	.word	0x75202c65
   31ac4:	65676173 	.word	0x65676173
   31ac8:	3c3d203a 	.word	0x3c3d203a
   31acc:	544e4955 	.word	0x544e4955
   31ad0:	003e3631 	.word	0x003e3631
   31ad4:	725f6f6e 	.word	0x725f6f6e
   31ad8:	00007073 	.word	0x00007073
   31adc:	74697277 	.word	0x74697277
   31ae0:	69772065 	.word	0x69772065
   31ae4:	756f6874 	.word	0x756f6874
   31ae8:	65722074 	.word	0x65722074
   31aec:	6e6f7073 	.word	0x6e6f7073
   31af0:	202c6573 	.word	0x202c6573
   31af4:	67617375 	.word	0x67617375
   31af8:	3d203a65 	.word	0x3d203a65
   31afc:	312d305b 	.word	0x312d305b
   31b00:	64202c5d 	.word	0x64202c5d
   31b04:	75616665 	.word	0x75616665
   31b08:	303d746c 	.word	0x303d746c
   31b0c:	00000000 	.word	0x00000000
   31b10:	676e6f6c 	.word	0x676e6f6c
   31b14:	00000000 	.word	0x00000000
   31b18:	77207369 	.word	0x77207369
   31b1c:	65746972 	.word	0x65746972
   31b20:	6e6f6c20 	.word	0x6e6f6c20
   31b24:	75202c67 	.word	0x75202c67
   31b28:	65676173 	.word	0x65676173
   31b2c:	5b3d203a 	.word	0x5b3d203a
   31b30:	5d312d30 	.word	0x5d312d30
   31b34:	6564202c 	.word	0x6564202c
   31b38:	6c756166 	.word	0x6c756166
   31b3c:	00303d74 	.word	0x00303d74
   31b40:	72747461 	.word	0x72747461
   31b44:	00000000 	.word	0x00000000
   31b48:	72747461 	.word	0x72747461
   31b4c:	74756269 	.word	0x74756269
   31b50:	61682065 	.word	0x61682065
   31b54:	656c646e 	.word	0x656c646e
   31b58:	7375202c 	.word	0x7375202c
   31b5c:	3a656761 	.word	0x3a656761
   31b60:	553c3d20 	.word	0x553c3d20
   31b64:	31544e49 	.word	0x31544e49
   31b68:	00003e36 	.word	0x00003e36
   31b6c:	7366666f 	.word	0x7366666f
   31b70:	00007465 	.word	0x00007465
   31b74:	756c6176 	.word	0x756c6176
   31b78:	00000065 	.word	0x00000065
   31b7c:	67617375 	.word	0x67617375
   31b80:	3d203a65 	.word	0x3d203a65
   31b84:	74636f3c 	.word	0x74636f3c
   31b88:	3e737465 	.word	0x3e737465
   31b8c:	00000000 	.word	0x00000000
   31b90:	776f6873 	.word	0x776f6873
   31b94:	6e6f6320 	.word	0x6e6f6320
   31b98:	7463656e 	.word	0x7463656e
   31b9c:	736e6f69 	.word	0x736e6f69
   31ba0:	666e6920 	.word	0x666e6920
   31ba4:	616d726f 	.word	0x616d726f
   31ba8:	6e6f6974 	.word	0x6e6f6974
   31bac:	00000000 	.word	0x00000000
   31bb0:	776f6873 	.word	0x776f6873
   31bb4:	76656420 	.word	0x76656420
   31bb8:	20656369 	.word	0x20656369
   31bbc:	72646461 	.word	0x72646461
   31bc0:	00737365 	.word	0x00737365
   31bc4:	776f6873 	.word	0x776f6873
   31bc8:	636f6c20 	.word	0x636f6c20
   31bcc:	67206c61 	.word	0x67206c61
   31bd0:	20747461 	.word	0x20747461
   31bd4:	61746164 	.word	0x61746164
   31bd8:	65736162 	.word	0x65736162
   31bdc:	00000000 	.word	0x00000000
   31be0:	776f6873 	.word	0x776f6873
   31be4:	73696420 	.word	0x73696420
   31be8:	65766f63 	.word	0x65766f63
   31bec:	20646572 	.word	0x20646572
   31bf0:	74746167 	.word	0x74746167
   31bf4:	74616420 	.word	0x74616420
   31bf8:	73616261 	.word	0x73616261
   31bfc:	00000065 	.word	0x00000065
   31c00:	6e616863 	.word	0x6e616863
   31c04:	73206567 	.word	0x73206567
   31c08:	69767265 	.word	0x69767265
   31c0c:	76206563 	.word	0x76206563
   31c10:	62697369 	.word	0x62697369
   31c14:	74696c69 	.word	0x74696c69
   31c18:	00000079 	.word	0x00000079
   31c1c:	69736976 	.word	0x69736976
   31c20:	696c6962 	.word	0x696c6962
   31c24:	00007974 	.word	0x00007974
   31c28:	67617375 	.word	0x67617375
   31c2c:	3d203a65 	.word	0x3d203a65
   31c30:	312d303c 	.word	0x312d303c
   31c34:	0000003e 	.word	0x0000003e
   31c38:	646e6573 	.word	0x646e6573
   31c3c:	72657320 	.word	0x72657320
   31c40:	65636976 	.word	0x65636976
   31c44:	61686320 	.word	0x61686320
   31c48:	6465676e 	.word	0x6465676e
   31c4c:	646e6920 	.word	0x646e6920
   31c50:	74616369 	.word	0x74616369
   31c54:	006e6f69 	.word	0x006e6f69
   31c58:	72617473 	.word	0x72617473
   31c5c:	61682074 	.word	0x61682074
   31c60:	656c646e 	.word	0x656c646e
   31c64:	7375202c 	.word	0x7375202c
   31c68:	3a656761 	.word	0x3a656761
   31c6c:	553c3d20 	.word	0x553c3d20
   31c70:	31544e49 	.word	0x31544e49
   31c74:	00003e36 	.word	0x00003e36
   31c78:	20646e65 	.word	0x20646e65
   31c7c:	646e6168 	.word	0x646e6168
   31c80:	202c656c 	.word	0x202c656c
   31c84:	67617375 	.word	0x67617375
   31c88:	3d203a65 	.word	0x3d203a65
   31c8c:	4e49553c 	.word	0x4e49553c
   31c90:	3e363154 	.word	0x3e363154
   31c94:	00000000 	.word	0x00000000
   31c98:	66726570 	.word	0x66726570
   31c9c:	206d726f 	.word	0x206d726f
   31ca0:	74746167 	.word	0x74746167
   31ca4:	61657220 	.word	0x61657220
   31ca8:	72702064 	.word	0x72702064
   31cac:	6465636f 	.word	0x6465636f
   31cb0:	00657275 	.word	0x00657275
   31cb4:	72207369 	.word	0x72207369
   31cb8:	20646165 	.word	0x20646165
   31cbc:	676e6f6c 	.word	0x676e6f6c
   31cc0:	7375202c 	.word	0x7375202c
   31cc4:	3a656761 	.word	0x3a656761
   31cc8:	305b3d20 	.word	0x305b3d20
   31ccc:	2c5d312d 	.word	0x2c5d312d
   31cd0:	66656420 	.word	0x66656420
   31cd4:	746c7561 	.word	0x746c7561
   31cd8:	0000303d 	.word	0x0000303d
   31cdc:	7366666f 	.word	0x7366666f
   31ce0:	76207465 	.word	0x76207465
   31ce4:	65756c61 	.word	0x65756c61
   31ce8:	7375202c 	.word	0x7375202c
   31cec:	3a656761 	.word	0x3a656761
   31cf0:	553c3d20 	.word	0x553c3d20
   31cf4:	31544e49 	.word	0x31544e49
   31cf8:	00003e36 	.word	0x00003e36
   31cfc:	64697575 	.word	0x64697575
   31d00:	00000000 	.word	0x00000000
   31d04:	64616572 	.word	0x64616572
   31d08:	20796220 	.word	0x20796220
   31d0c:	64697575 	.word	0x64697575
   31d10:	7375202c 	.word	0x7375202c
   31d14:	3a656761 	.word	0x3a656761
   31d18:	555b3d20 	.word	0x555b3d20
   31d1c:	5d444955 	.word	0x5d444955
   31d20:	00000000 	.word	0x00000000
   31d24:	69746f6e 	.word	0x69746f6e
   31d28:	61207966 	.word	0x61207966
   31d2c:	74756f62 	.word	0x74756f62
   31d30:	74746120 	.word	0x74746120
   31d34:	75626972 	.word	0x75626972
   31d38:	76206574 	.word	0x76206574
   31d3c:	65756c61 	.word	0x65756c61
   31d40:	61686320 	.word	0x61686320
   31d44:	6465676e 	.word	0x6465676e
   31d48:	00000000 	.word	0x00000000
   31d4c:	66726570 	.word	0x66726570
   31d50:	206d726f 	.word	0x206d726f
   31d54:	646e6966 	.word	0x646e6966
   31d58:	636e6920 	.word	0x636e6920
   31d5c:	6564756c 	.word	0x6564756c
   31d60:	65732064 	.word	0x65732064
   31d64:	63697672 	.word	0x63697672
   31d68:	70207365 	.word	0x70207365
   31d6c:	65636f72 	.word	0x65636f72
   31d70:	65727564 	.word	0x65727564
   31d74:	00000000 	.word	0x00000000
   31d78:	66726570 	.word	0x66726570
   31d7c:	206d726f 	.word	0x206d726f
   31d80:	2075746d 	.word	0x2075746d
   31d84:	68637865 	.word	0x68637865
   31d88:	65676e61 	.word	0x65676e61
   31d8c:	6f727020 	.word	0x6f727020
   31d90:	75646563 	.word	0x75646563
   31d94:	00006572 	.word	0x00006572
   31d98:	66726570 	.word	0x66726570
   31d9c:	206d726f 	.word	0x206d726f
   31da0:	6c6c7566 	.word	0x6c6c7566
   31da4:	73696420 	.word	0x73696420
   31da8:	65766f63 	.word	0x65766f63
   31dac:	70207972 	.word	0x70207972
   31db0:	65636f72 	.word	0x65636f72
   31db4:	65727564 	.word	0x65727564
   31db8:	00000000 	.word	0x00000000
   31dbc:	66726570 	.word	0x66726570
   31dc0:	206d726f 	.word	0x206d726f
   31dc4:	76726573 	.word	0x76726573
   31dc8:	20656369 	.word	0x20656369
   31dcc:	63736964 	.word	0x63736964
   31dd0:	7265766f 	.word	0x7265766f
   31dd4:	72702079 	.word	0x72702079
   31dd8:	6465636f 	.word	0x6465636f
   31ddc:	00657275 	.word	0x00657275
   31de0:	63736964 	.word	0x63736964
   31de4:	7265766f 	.word	0x7265766f
   31de8:	20796220 	.word	0x20796220
   31dec:	64697575 	.word	0x64697575
   31df0:	7375202c 	.word	0x7375202c
   31df4:	3a656761 	.word	0x3a656761
   31df8:	555b3d20 	.word	0x555b3d20
   31dfc:	5d444955 	.word	0x5d444955
   31e00:	00000000 	.word	0x00000000
   31e04:	66726570 	.word	0x66726570
   31e08:	206d726f 	.word	0x206d726f
   31e0c:	63736564 	.word	0x63736564
   31e10:	74706972 	.word	0x74706972
   31e14:	6420726f 	.word	0x6420726f
   31e18:	6f637369 	.word	0x6f637369
   31e1c:	79726576 	.word	0x79726576
   31e20:	6f727020 	.word	0x6f727020
   31e24:	75646563 	.word	0x75646563
   31e28:	00006572 	.word	0x00006572
   31e2c:	66726570 	.word	0x66726570
   31e30:	206d726f 	.word	0x206d726f
   31e34:	72616863 	.word	0x72616863
   31e38:	65746361 	.word	0x65746361
   31e3c:	74736972 	.word	0x74736972
   31e40:	64206369 	.word	0x64206369
   31e44:	6f637369 	.word	0x6f637369
   31e48:	79726576 	.word	0x79726576
   31e4c:	6f727020 	.word	0x6f727020
   31e50:	75646563 	.word	0x75646563
   31e54:	00006572 	.word	0x00006572
   31e58:	706f7473 	.word	0x706f7473
   31e5c:	65687420 	.word	0x65687420
   31e60:	6d694e20 	.word	0x6d694e20
   31e64:	20454c42 	.word	0x20454c42
   31e68:	74736f68 	.word	0x74736f68
   31e6c:	00000000 	.word	0x00000000
   31e70:	72617473 	.word	0x72617473
   31e74:	68742074 	.word	0x68742074
   31e78:	694e2065 	.word	0x694e2065
   31e7c:	454c426d 	.word	0x454c426d
   31e80:	736f6820 	.word	0x736f6820
   31e84:	00000074 	.word	0x00000074
   31e88:	64616572 	.word	0x64616572
   31e8c:	59485020 	.word	0x59485020
   31e90:	00000073 	.word	0x00000073
   31e94:	20746573 	.word	0x20746573
   31e98:	66657270 	.word	0x66657270
   31e9c:	65727265 	.word	0x65727265
   31ea0:	65642064 	.word	0x65642064
   31ea4:	6c756166 	.word	0x6c756166
   31ea8:	48502074 	.word	0x48502074
   31eac:	00007359 	.word	0x00007359
   31eb0:	67617375 	.word	0x67617375
   31eb4:	3d203a65 	.word	0x3d203a65
   31eb8:	4e49553c 	.word	0x4e49553c
   31ebc:	003e3854 	.word	0x003e3854
   31ec0:	20746573 	.word	0x20746573
   31ec4:	66657270 	.word	0x66657270
   31ec8:	65727265 	.word	0x65727265
   31ecc:	48502064 	.word	0x48502064
   31ed0:	00007359 	.word	0x00007359
   31ed4:	74736574 	.word	0x74736574
   31ed8:	63617020 	.word	0x63617020
   31edc:	2074656b 	.word	0x2074656b
   31ee0:	6e617274 	.word	0x6e617274
   31ee4:	73696d73 	.word	0x73696d73
   31ee8:	6e6f6973 	.word	0x6e6f6973
   31eec:	00000000 	.word	0x00000000
   31ef0:	646e6168 	.word	0x646e6168
   31ef4:	7420656c 	.word	0x7420656c
   31ef8:	7874206f 	.word	0x7874206f
   31efc:	2c6f7420 	.word	0x2c6f7420
   31f00:	61737520 	.word	0x61737520
   31f04:	203a6567 	.word	0x203a6567
   31f08:	49553c3d 	.word	0x49553c3d
   31f0c:	3631544e 	.word	0x3631544e
   31f10:	0000003e 	.word	0x0000003e
   31f14:	657a6973 	.word	0x657a6973
   31f18:	20666f20 	.word	0x20666f20
   31f1c:	6b636170 	.word	0x6b636170
   31f20:	202c7465 	.word	0x202c7465
   31f24:	67617375 	.word	0x67617375
   31f28:	3d203a65 	.word	0x3d203a65
   31f2c:	4e49553c 	.word	0x4e49553c
   31f30:	3e363154 	.word	0x3e363154
   31f34:	00000000 	.word	0x00000000
   31f38:	65746172 	.word	0x65746172
   31f3c:	20666f20 	.word	0x20666f20
   31f40:	202c7874 	.word	0x202c7874
   31f44:	67617375 	.word	0x67617375
   31f48:	3d203a65 	.word	0x3d203a65
   31f4c:	4e49553c 	.word	0x4e49553c
   31f50:	3e363154 	.word	0x3e363154
   31f54:	6564202c 	.word	0x6564202c
   31f58:	6c756166 	.word	0x6c756166
   31f5c:	00313d74 	.word	0x00313d74
   31f60:	626d756e 	.word	0x626d756e
   31f64:	6f207265 	.word	0x6f207265
   31f68:	61702066 	.word	0x61702066
   31f6c:	74656b63 	.word	0x74656b63
   31f70:	75202c73 	.word	0x75202c73
   31f74:	65676173 	.word	0x65676173
   31f78:	3c3d203a 	.word	0x3c3d203a
   31f7c:	544e4955 	.word	0x544e4955
   31f80:	2c3e3631 	.word	0x2c3e3631
   31f84:	66656420 	.word	0x66656420
   31f88:	746c7561 	.word	0x746c7561
   31f8c:	0000313d 	.word	0x0000313d
   31f90:	706f7473 	.word	0x706f7473
   31f94:	6e657320 	.word	0x6e657320
   31f98:	676e6964 	.word	0x676e6964
   31f9c:	7375202c 	.word	0x7375202c
   31fa0:	3a656761 	.word	0x3a656761
   31fa4:	74203120 	.word	0x74203120
   31fa8:	7473206f 	.word	0x7473206f
   31fac:	202c706f 	.word	0x202c706f
   31fb0:	61666564 	.word	0x61666564
   31fb4:	20746c75 	.word	0x20746c75
   31fb8:	00000030 	.word	0x00000030
   31fbc:	776f6873 	.word	0x776f6873
   31fc0:	74616420 	.word	0x74616420
   31fc4:	6e692061 	.word	0x6e692061
   31fc8:	79656b20 	.word	0x79656b20
   31fcc:	726f7473 	.word	0x726f7473
   31fd0:	00000065 	.word	0x00000065
   31fd4:	72746e65 	.word	0x72746e65
   31fd8:	79742079 	.word	0x79742079
   31fdc:	202c6570 	.word	0x202c6570
   31fe0:	67617375 	.word	0x67617375
   31fe4:	3d203a65 	.word	0x3d203a65
   31fe8:	65736d3c 	.word	0x65736d3c
   31fec:	73737c63 	.word	0x73737c63
   31ff0:	637c6365 	.word	0x637c6365
   31ff4:	3e646363 	.word	0x3e646363
   31ff8:	00000000 	.word	0x00000000
   31ffc:	6f6d6572 	.word	0x6f6d6572
   32000:	64206576 	.word	0x64206576
   32004:	20617461 	.word	0x20617461
   32008:	6d6f7266 	.word	0x6d6f7266
   3200c:	79656b20 	.word	0x79656b20
   32010:	726f7473 	.word	0x726f7473
   32014:	00000065 	.word	0x00000065
   32018:	67617375 	.word	0x67617375
   3201c:	3d203a65 	.word	0x3d203a65
   32020:	6275703c 	.word	0x6275703c
   32024:	7c63696c 	.word	0x7c63696c
   32028:	646e6172 	.word	0x646e6172
   3202c:	003e6d6f 	.word	0x003e6d6f
   32030:	67617375 	.word	0x67617375
   32034:	3d203a65 	.word	0x3d203a65
   32038:	3a58583c 	.word	0x3a58583c
   3203c:	583a5858 	.word	0x583a5858
   32040:	58583a58 	.word	0x58583a58
   32044:	3a58583a 	.word	0x3a58583a
   32048:	003e5858 	.word	0x003e5858
   3204c:	67617375 	.word	0x67617375
   32050:	3d203a65 	.word	0x3d203a65
   32054:	4e49553c 	.word	0x4e49553c
   32058:	3e343654 	.word	0x3e343654
   3205c:	00000000 	.word	0x00000000
   32060:	20646461 	.word	0x20646461
   32064:	61746164 	.word	0x61746164
   32068:	206f7420 	.word	0x206f7420
   3206c:	7379656b 	.word	0x7379656b
   32070:	65726f74 	.word	0x65726f74
   32074:	00000000 	.word	0x00000000
   32078:	67617375 	.word	0x67617375
   3207c:	3d203a65 	.word	0x3d203a65
   32080:	3a58583c 	.word	0x3a58583c
   32084:	2e3a5858 	.word	0x2e3a5858
   32088:	2c3e2e2e 	.word	0x2c3e2e2e
   3208c:	6e656c20 	.word	0x6e656c20
   32090:	2036313d 	.word	0x2036313d
   32094:	6574636f 	.word	0x6574636f
   32098:	00007374 	.word	0x00007374
   3209c:	6365736d 	.word	0x6365736d
   320a0:	00000000 	.word	0x00000000
   320a4:	63657373 	.word	0x63657373
   320a8:	00000000 	.word	0x00000000
   320ac:	64636363 	.word	0x64636363
   320b0:	00000000 	.word	0x00000000
   320b4:	20746573 	.word	0x20746573
   320b8:	61746164 	.word	0x61746164
   320bc:	6e656c20 	.word	0x6e656c20
   320c0:	20687467 	.word	0x20687467
   320c4:	61726170 	.word	0x61726170
   320c8:	6574656d 	.word	0x6574656d
   320cc:	66207372 	.word	0x66207372
   320d0:	6320726f 	.word	0x6320726f
   320d4:	656e6e6f 	.word	0x656e6e6f
   320d8:	6f697463 	.word	0x6f697463
   320dc:	0000006e 	.word	0x0000006e
   320e0:	6e6e6f43 	.word	0x6e6e6f43
   320e4:	69746365 	.word	0x69746365
   320e8:	68206e6f 	.word	0x68206e6f
   320ec:	6c646e61 	.word	0x6c646e61
   320f0:	75202c65 	.word	0x75202c65
   320f4:	65676173 	.word	0x65676173
   320f8:	3c3d203a 	.word	0x3c3d203a
   320fc:	544e4955 	.word	0x544e4955
   32100:	003e3631 	.word	0x003e3631
   32104:	2078614d 	.word	0x2078614d
   32108:	6c796170 	.word	0x6c796170
   3210c:	2064616f 	.word	0x2064616f
   32110:	657a6973 	.word	0x657a6973
   32114:	206f7420 	.word	0x206f7420
   32118:	6c636e69 	.word	0x6c636e69
   3211c:	20656475 	.word	0x20656475
   32120:	4c206e69 	.word	0x4c206e69
   32124:	6144204c 	.word	0x6144204c
   32128:	50206174 	.word	0x50206174
   3212c:	202c5544 	.word	0x202c5544
   32130:	676e6172 	.word	0x676e6172
   32134:	323c3d65 	.word	0x323c3d65
   32138:	35322d37 	.word	0x35322d37
   3213c:	202c3e31 	.word	0x202c3e31
   32140:	67617375 	.word	0x67617375
   32144:	3d203a65 	.word	0x3d203a65
   32148:	4e49553c 	.word	0x4e49553c
   3214c:	3e363154 	.word	0x3e363154
   32150:	00000000 	.word	0x00000000
   32154:	2078614d 	.word	0x2078614d
   32158:	626d756e 	.word	0x626d756e
   3215c:	6f207265 	.word	0x6f207265
   32160:	696d2066 	.word	0x696d2066
   32164:	736f7263 	.word	0x736f7263
   32168:	6e6f6365 	.word	0x6e6f6365
   3216c:	74207364 	.word	0x74207364
   32170:	63206568 	.word	0x63206568
   32174:	72746e6f 	.word	0x72746e6f
   32178:	656c6c6f 	.word	0x656c6c6f
   3217c:	68732072 	.word	0x68732072
   32180:	646c756f 	.word	0x646c756f
   32184:	65737520 	.word	0x65737520
   32188:	206f7420 	.word	0x206f7420
   3218c:	73207874 	.word	0x73207874
   32190:	6c676e69 	.word	0x6c676e69
   32194:	4c4c2065 	.word	0x4c4c2065
   32198:	63617020 	.word	0x63617020
   3219c:	2c74656b 	.word	0x2c74656b
   321a0:	6e617220 	.word	0x6e617220
   321a4:	3c3d6567 	.word	0x3c3d6567
   321a8:	2d383233 	.word	0x2d383233
   321ac:	34303731 	.word	0x34303731
   321b0:	202c3e30 	.word	0x202c3e30
   321b4:	67617375 	.word	0x67617375
   321b8:	3d203a65 	.word	0x3d203a65
   321bc:	4e49553c 	.word	0x4e49553c
   321c0:	3e363154 	.word	0x3e363154
   321c4:	00000000 	.word	0x00000000
   321c8:	61647075 	.word	0x61647075
   321cc:	63206574 	.word	0x63206574
   321d0:	656e6e6f 	.word	0x656e6e6f
   321d4:	6f697463 	.word	0x6f697463
   321d8:	6170206e 	.word	0x6170206e
   321dc:	656d6172 	.word	0x656d6172
   321e0:	73726574 	.word	0x73726574
   321e4:	00000000 	.word	0x00000000
   321e8:	6e6e6f63 	.word	0x6e6e6f63
   321ec:	6470755f 	.word	0x6470755f
   321f0:	5f657461 	.word	0x5f657461
   321f4:	61726170 	.word	0x61726170
   321f8:	7520736d 	.word	0x7520736d
   321fc:	65676173 	.word	0x65676173
   32200:	00000000 	.word	0x00000000
   32204:	6e6e6f63 	.word	0x6e6e6f63
   32208:	6470755f 	.word	0x6470755f
   3220c:	5f657461 	.word	0x5f657461
   32210:	61726170 	.word	0x61726170
   32214:	6f69736d 	.word	0x6f69736d
   32218:	6168206e 	.word	0x6168206e
   3221c:	656c646e 	.word	0x656c646e
   32220:	7375202c 	.word	0x7375202c
   32224:	3a656761 	.word	0x3a656761
   32228:	553c3d20 	.word	0x553c3d20
   3222c:	31544e49 	.word	0x31544e49
   32230:	00003e36 	.word	0x00003e36
   32234:	67617375 	.word	0x67617375
   32238:	3d203a65 	.word	0x3d203a65
   3223c:	552d305b 	.word	0x552d305b
   32240:	31544e49 	.word	0x31544e49
   32244:	414d5f36 	.word	0x414d5f36
   32248:	202c5d58 	.word	0x202c5d58
   3224c:	61666564 	.word	0x61666564
   32250:	3a746c75 	.word	0x3a746c75
   32254:	00303320 	.word	0x00303320
   32258:	67617375 	.word	0x67617375
   3225c:	3d203a65 	.word	0x3d203a65
   32260:	552d305b 	.word	0x552d305b
   32264:	31544e49 	.word	0x31544e49
   32268:	414d5f36 	.word	0x414d5f36
   3226c:	202c5d58 	.word	0x202c5d58
   32270:	61666564 	.word	0x61666564
   32274:	3a746c75 	.word	0x3a746c75
   32278:	00303520 	.word	0x00303520
   3227c:	67617375 	.word	0x67617375
   32280:	3d203a65 	.word	0x3d203a65
   32284:	4e49555b 	.word	0x4e49555b
   32288:	5d363154 	.word	0x5d363154
   3228c:	6564202c 	.word	0x6564202c
   32290:	6c756166 	.word	0x6c756166
   32294:	30203a74 	.word	0x30203a74
   32298:	00000000 	.word	0x00000000
   3229c:	67617375 	.word	0x67617375
   322a0:	3d203a65 	.word	0x3d203a65
   322a4:	4e49555b 	.word	0x4e49555b
   322a8:	5d363154 	.word	0x5d363154
   322ac:	6564202c 	.word	0x6564202c
   322b0:	6c756166 	.word	0x6c756166
   322b4:	30203a74 	.word	0x30203a74
   322b8:	30313078 	.word	0x30313078
   322bc:	00000030 	.word	0x00000030
   322c0:	67617375 	.word	0x67617375
   322c4:	3d203a65 	.word	0x3d203a65
   322c8:	4e49555b 	.word	0x4e49555b
   322cc:	5d363154 	.word	0x5d363154
   322d0:	6564202c 	.word	0x6564202c
   322d4:	6c756166 	.word	0x6c756166
   322d8:	30203a74 	.word	0x30203a74
   322dc:	31303078 	.word	0x31303078
   322e0:	00000030 	.word	0x00000030
   322e4:	67617375 	.word	0x67617375
   322e8:	3d203a65 	.word	0x3d203a65
   322ec:	4e49555b 	.word	0x4e49555b
   322f0:	5d363154 	.word	0x5d363154
   322f4:	6564202c 	.word	0x6564202c
   322f8:	6c756166 	.word	0x6c756166
   322fc:	30203a74 	.word	0x30203a74
   32300:	30333078 	.word	0x30333078
   32304:	00000030 	.word	0x00000030
   32308:	63656863 	.word	0x63656863
   3230c:	6f63206b 	.word	0x6f63206b
   32310:	63656e6e 	.word	0x63656e6e
   32314:	6e6f6974 	.word	0x6e6f6974
   32318:	73737220 	.word	0x73737220
   3231c:	00000069 	.word	0x00000069
   32320:	6e6e6f63 	.word	0x6e6e6f63
   32324:	69746365 	.word	0x69746365
   32328:	68206e6f 	.word	0x68206e6f
   3232c:	6c646e61 	.word	0x6c646e61
   32330:	61702065 	.word	0x61702065
   32334:	656d6172 	.word	0x656d6172
   32338:	2c726574 	.word	0x2c726574
   3233c:	61737520 	.word	0x61737520
   32340:	203a6567 	.word	0x203a6567
   32344:	49553c3d 	.word	0x49553c3d
   32348:	3631544e 	.word	0x3631544e
   3234c:	0000003e 	.word	0x0000003e
   32350:	20746573 	.word	0x20746573
   32354:	74696877 	.word	0x74696877
   32358:	696c2d65 	.word	0x696c2d65
   3235c:	61207473 	.word	0x61207473
   32360:	65726464 	.word	0x65726464
   32364:	73657373 	.word	0x73657373
   32368:	00000000 	.word	0x00000000
   3236c:	74696877 	.word	0x74696877
   32370:	696c2d65 	.word	0x696c2d65
   32374:	64207473 	.word	0x64207473
   32378:	63697665 	.word	0x63697665
   3237c:	64612065 	.word	0x64612065
   32380:	73657264 	.word	0x73657264
   32384:	2c736573 	.word	0x2c736573
   32388:	61737520 	.word	0x61737520
   3238c:	203a6567 	.word	0x203a6567
   32390:	58585b3d 	.word	0x58585b3d
   32394:	3a58583a 	.word	0x3a58583a
   32398:	583a5858 	.word	0x583a5858
   3239c:	58583a58 	.word	0x58583a58
   323a0:	5d58583a 	.word	0x5d58583a
   323a4:	00000000 	.word	0x00000000
   323a8:	74696877 	.word	0x74696877
   323ac:	696c2d65 	.word	0x696c2d65
   323b0:	61207473 	.word	0x61207473
   323b4:	65726464 	.word	0x65726464
   323b8:	74207373 	.word	0x74207373
   323bc:	73657079 	.word	0x73657079
   323c0:	7375202c 	.word	0x7375202c
   323c4:	3a656761 	.word	0x3a656761
   323c8:	705b3d20 	.word	0x705b3d20
   323cc:	696c6275 	.word	0x696c6275
   323d0:	61727c63 	.word	0x61727c63
   323d4:	6d6f646e 	.word	0x6d6f646e
   323d8:	0000005d 	.word	0x0000005d
   323dc:	20746573 	.word	0x20746573
   323e0:	76697270 	.word	0x76697270
   323e4:	646f6d20 	.word	0x646f6d20
   323e8:	00000065 	.word	0x00000065
   323ec:	20746573 	.word	0x20746573
   323f0:	76697270 	.word	0x76697270
   323f4:	646f6d20 	.word	0x646f6d20
   323f8:	6f662065 	.word	0x6f662065
   323fc:	65642072 	.word	0x65642072
   32400:	65636976 	.word	0x65636976
   32404:	64646120 	.word	0x64646120
   32408:	73736572 	.word	0x73736572
   3240c:	7375202c 	.word	0x7375202c
   32410:	3a656761 	.word	0x3a656761
   32414:	585b3d20 	.word	0x585b3d20
   32418:	58583a58 	.word	0x58583a58
   3241c:	3a58583a 	.word	0x3a58583a
   32420:	583a5858 	.word	0x583a5858
   32424:	58583a58 	.word	0x58583a58
   32428:	0000005d 	.word	0x0000005d
   3242c:	20746573 	.word	0x20746573
   32430:	76697270 	.word	0x76697270
   32434:	646f6d20 	.word	0x646f6d20
   32438:	6f662065 	.word	0x6f662065
   3243c:	65642072 	.word	0x65642072
   32440:	65636976 	.word	0x65636976
   32444:	64646120 	.word	0x64646120
   32448:	73736572 	.word	0x73736572
   3244c:	70797420 	.word	0x70797420
   32450:	75202c65 	.word	0x75202c65
   32454:	65676173 	.word	0x65676173
   32458:	5b3d203a 	.word	0x5b3d203a
   3245c:	6c627570 	.word	0x6c627570
   32460:	727c6369 	.word	0x727c6369
   32464:	6f646e61 	.word	0x6f646e61
   32468:	202c5d6d 	.word	0x202c5d6d
   3246c:	61666564 	.word	0x61666564
   32470:	3a746c75 	.word	0x3a746c75
   32474:	62757020 	.word	0x62757020
   32478:	0063696c 	.word	0x0063696c
   3247c:	20746573 	.word	0x20746573
   32480:	76697270 	.word	0x76697270
   32484:	646f6d20 	.word	0x646f6d20
   32488:	75202c65 	.word	0x75202c65
   3248c:	65676173 	.word	0x65676173
   32490:	5b3d203a 	.word	0x5b3d203a
   32494:	49552d30 	.word	0x49552d30
   32498:	5f38544e 	.word	0x5f38544e
   3249c:	5d58414d 	.word	0x5d58414d
   324a0:	00000000 	.word	0x00000000
   324a4:	20746573 	.word	0x20746573
   324a8:	6e616373 	.word	0x6e616373
   324ac:	73657220 	.word	0x73657220
   324b0:	736e6f70 	.word	0x736e6f70
   324b4:	00000065 	.word	0x00000065
   324b8:	20746573 	.word	0x20746573
   324bc:	65766461 	.word	0x65766461
   324c0:	73697472 	.word	0x73697472
   324c4:	20676e69 	.word	0x20676e69
   324c8:	61746164 	.word	0x61746164
   324cc:	00000000 	.word	0x00000000
   324d0:	74736e69 	.word	0x74736e69
   324d4:	65636e61 	.word	0x65636e61
   324d8:	00000000 	.word	0x00000000
   324dc:	67617375 	.word	0x67617375
   324e0:	3d203a65 	.word	0x3d203a65
   324e4:	552d305b 	.word	0x552d305b
   324e8:	38544e49 	.word	0x38544e49
   324ec:	58414d5f 	.word	0x58414d5f
   324f0:	0000005d 	.word	0x0000005d
   324f4:	67617375 	.word	0x67617375
   324f8:	3d203a65 	.word	0x3d203a65
   324fc:	4e49555b 	.word	0x4e49555b
   32500:	5d363154 	.word	0x5d363154
   32504:	00000000 	.word	0x00000000
   32508:	64697575 	.word	0x64697575
   3250c:	695f3631 	.word	0x695f3631
   32510:	6f635f73 	.word	0x6f635f73
   32514:	656c706d 	.word	0x656c706d
   32518:	00006574 	.word	0x00006574
   3251c:	67617375 	.word	0x67617375
   32520:	3d203a65 	.word	0x3d203a65
   32524:	4e49555b 	.word	0x4e49555b
   32528:	5d323354 	.word	0x5d323354
   3252c:	00000000 	.word	0x00000000
   32530:	64697575 	.word	0x64697575
   32534:	695f3233 	.word	0x695f3233
   32538:	6f635f73 	.word	0x6f635f73
   3253c:	656c706d 	.word	0x656c706d
   32540:	00006574 	.word	0x00006574
   32544:	64697575 	.word	0x64697575
   32548:	5f383231 	.word	0x5f383231
   3254c:	635f7369 	.word	0x635f7369
   32550:	6c706d6f 	.word	0x6c706d6f
   32554:	00657465 	.word	0x00657465
   32558:	67617375 	.word	0x67617375
   3255c:	3d203a65 	.word	0x3d203a65
   32560:	544e495b 	.word	0x544e495b
   32564:	494d5f38 	.word	0x494d5f38
   32568:	4e492d4e 	.word	0x4e492d4e
   3256c:	4d5f3854 	.word	0x4d5f3854
   32570:	005d5841 	.word	0x005d5841
   32574:	67617375 	.word	0x67617375
   32578:	3d203a65 	.word	0x3d203a65
   3257c:	3a58585b 	.word	0x3a58585b
   32580:	583a5858 	.word	0x583a5858
   32584:	58583a58 	.word	0x58583a58
   32588:	0000005d 	.word	0x0000005d
   3258c:	67617375 	.word	0x67617375
   32590:	3d203a65 	.word	0x3d203a65
   32594:	7274735b 	.word	0x7274735b
   32598:	5d676e69 	.word	0x5d676e69
   3259c:	00000000 	.word	0x00000000
   325a0:	67617375 	.word	0x67617375
   325a4:	3d203a65 	.word	0x3d203a65
   325a8:	3a58585b 	.word	0x3a58585b
   325ac:	2e2e5858 	.word	0x2e2e5858
   325b0:	00005d2e 	.word	0x00005d2e
   325b4:	7361656d 	.word	0x7361656d
   325b8:	64657275 	.word	0x64657275
   325bc:	776f705f 	.word	0x776f705f
   325c0:	00007265 	.word	0x00007265
   325c4:	67617375 	.word	0x67617375
   325c8:	3d203a65 	.word	0x3d203a65
   325cc:	30312d5b 	.word	0x30312d5b
   325d0:	30322d30 	.word	0x30322d30
   325d4:	0000005d 	.word	0x0000005d
   325d8:	20746573 	.word	0x20746573
   325dc:	69766564 	.word	0x69766564
   325e0:	70206563 	.word	0x70206563
   325e4:	6d617261 	.word	0x6d617261
   325e8:	72657465 	.word	0x72657465
   325ec:	00000073 	.word	0x00000073
   325f0:	20746573 	.word	0x20746573
   325f4:	69766564 	.word	0x69766564
   325f8:	61206563 	.word	0x61206563
   325fc:	65726464 	.word	0x65726464
   32600:	202c7373 	.word	0x202c7373
   32604:	67617375 	.word	0x67617375
   32608:	3d203a65 	.word	0x3d203a65
   3260c:	3a58585b 	.word	0x3a58585b
   32610:	583a5858 	.word	0x583a5858
   32614:	58583a58 	.word	0x58583a58
   32618:	3a58583a 	.word	0x3a58583a
   3261c:	005d5858 	.word	0x005d5858
   32620:	20746573 	.word	0x20746573
   32624:	69766564 	.word	0x69766564
   32628:	61206563 	.word	0x61206563
   3262c:	65726464 	.word	0x65726464
   32630:	74207373 	.word	0x74207373
   32634:	2c657079 	.word	0x2c657079
   32638:	61737520 	.word	0x61737520
   3263c:	203a6567 	.word	0x203a6567
   32640:	75705b3d 	.word	0x75705b3d
   32644:	63696c62 	.word	0x63696c62
   32648:	6e61727c 	.word	0x6e61727c
   3264c:	5d6d6f64 	.word	0x5d6d6f64
   32650:	6564202c 	.word	0x6564202c
   32654:	6c756166 	.word	0x6c756166
   32658:	70203a74 	.word	0x70203a74
   3265c:	696c6275 	.word	0x696c6275
   32660:	00000063 	.word	0x00000063
   32664:	6978614d 	.word	0x6978614d
   32668:	206d756d 	.word	0x206d756d
   3266c:	6e617254 	.word	0x6e617254
   32670:	736d6973 	.word	0x736d6973
   32674:	6e6f6973 	.word	0x6e6f6973
   32678:	696e5520 	.word	0x696e5520
   3267c:	75202c74 	.word	0x75202c74
   32680:	65676173 	.word	0x65676173
   32684:	5b3d203a 	.word	0x5b3d203a
   32688:	49552d30 	.word	0x49552d30
   3268c:	3631544e 	.word	0x3631544e
   32690:	58414d5f 	.word	0x58414d5f
   32694:	0000005d 	.word	0x0000005d
   32698:	6e656449 	.word	0x6e656449
   3269c:	79746974 	.word	0x79746974
   326a0:	73655220 	.word	0x73655220
   326a4:	69766c6f 	.word	0x69766c6f
   326a8:	4b20676e 	.word	0x4b20676e
   326ac:	202c7965 	.word	0x202c7965
   326b0:	67617375 	.word	0x67617375
   326b4:	3d203a65 	.word	0x3d203a65
   326b8:	3a58585b 	.word	0x3a58585b
   326bc:	2e2e5858 	.word	0x2e2e5858
   326c0:	202c5d2e 	.word	0x202c5d2e
   326c4:	3d6e656c 	.word	0x3d6e656c
   326c8:	6f203631 	.word	0x6f203631
   326cc:	74657463 	.word	0x74657463
   326d0:	00000073 	.word	0x00000073
   326d4:	72617473 	.word	0x72617473
   326d8:	74732f74 	.word	0x74732f74
   326dc:	7320706f 	.word	0x7320706f
   326e0:	206e6163 	.word	0x206e6163
   326e4:	636f7270 	.word	0x636f7270
   326e8:	72756465 	.word	0x72756465
   326ec:	69772065 	.word	0x69772065
   326f0:	73206874 	.word	0x73206874
   326f4:	69636570 	.word	0x69636570
   326f8:	20636966 	.word	0x20636966
   326fc:	61726170 	.word	0x61726170
   32700:	6574656d 	.word	0x6574656d
   32704:	00007372 	.word	0x00007372
   32708:	636e6163 	.word	0x636e6163
   3270c:	73206c65 	.word	0x73206c65
   32710:	206e6163 	.word	0x206e6163
   32714:	636f7270 	.word	0x636f7270
   32718:	72756465 	.word	0x72756465
   3271c:	00000065 	.word	0x00000065
   32720:	67617375 	.word	0x67617375
   32724:	3d203a65 	.word	0x3d203a65
   32728:	6e6f6e5b 	.word	0x6e6f6e5b
   3272c:	4d317c65 	.word	0x4d317c65
   32730:	646f637c 	.word	0x646f637c
   32734:	627c6465 	.word	0x627c6465
   32738:	5d68746f 	.word	0x5d68746f
   3273c:	6564202c 	.word	0x6564202c
   32740:	6c756166 	.word	0x6c756166
   32744:	6e203a74 	.word	0x6e203a74
   32748:	00656e6f 	.word	0x00656e6f
   3274c:	67617375 	.word	0x67617375
   32750:	3d203a65 	.word	0x3d203a65
   32754:	492d315b 	.word	0x492d315b
   32758:	3233544e 	.word	0x3233544e
   3275c:	58414d5f 	.word	0x58414d5f
   32760:	64202c5d 	.word	0x64202c5d
   32764:	75616665 	.word	0x75616665
   32768:	203a746c 	.word	0x203a746c
   3276c:	33544e49 	.word	0x33544e49
   32770:	414d5f32 	.word	0x414d5f32
   32774:	00000058 	.word	0x00000058
   32778:	67617375 	.word	0x67617375
   3277c:	3d203a65 	.word	0x3d203a65
   32780:	312d305b 	.word	0x312d305b
   32784:	64202c5d 	.word	0x64202c5d
   32788:	75616665 	.word	0x75616665
   3278c:	203a746c 	.word	0x203a746c
   32790:	00000030 	.word	0x00000030
   32794:	67617375 	.word	0x67617375
   32798:	3d203a65 	.word	0x3d203a65
   3279c:	552d305b 	.word	0x552d305b
   327a0:	31544e49 	.word	0x31544e49
   327a4:	414d5f36 	.word	0x414d5f36
   327a8:	202c5d58 	.word	0x202c5d58
   327ac:	61666564 	.word	0x61666564
   327b0:	3a746c75 	.word	0x3a746c75
   327b4:	00003020 	.word	0x00003020
   327b8:	67617375 	.word	0x67617375
   327bc:	3d203a65 	.word	0x3d203a65
   327c0:	5f6f6e5b 	.word	0x5f6f6e5b
   327c4:	757c6c77 	.word	0x757c6c77
   327c8:	775f6573 	.word	0x775f6573
   327cc:	6f6e7c6c 	.word	0x6f6e7c6c
   327d0:	5f6c775f 	.word	0x5f6c775f
   327d4:	74696e69 	.word	0x74696e69
   327d8:	73757c61 	.word	0x73757c61
   327dc:	6c775f65 	.word	0x6c775f65
   327e0:	696e695f 	.word	0x696e695f
   327e4:	2c5d6174 	.word	0x2c5d6174
   327e8:	66656420 	.word	0x66656420
   327ec:	746c7561 	.word	0x746c7561
   327f0:	6f6e203a 	.word	0x6f6e203a
   327f4:	006c775f 	.word	0x006c775f
   327f8:	67617375 	.word	0x67617375
   327fc:	3d203a65 	.word	0x3d203a65
   32800:	6275705b 	.word	0x6275705b
   32804:	7c63696c 	.word	0x7c63696c
   32808:	646e6172 	.word	0x646e6172
   3280c:	727c6d6f 	.word	0x727c6d6f
   32810:	705f6170 	.word	0x705f6170
   32814:	727c6275 	.word	0x727c6275
   32818:	725f6170 	.word	0x725f6170
   3281c:	2c5d646e 	.word	0x2c5d646e
   32820:	66656420 	.word	0x66656420
   32824:	746c7561 	.word	0x746c7561
   32828:	7570203a 	.word	0x7570203a
   3282c:	63696c62 	.word	0x63696c62
   32830:	00000000 	.word	0x00000000
   32834:	00004d31 	.word	0x00004d31
   32838:	65646f63 	.word	0x65646f63
   3283c:	00000064 	.word	0x00000064
   32840:	68746f62 	.word	0x68746f62
   32844:	00000000 	.word	0x00000000
   32848:	775f6f6e 	.word	0x775f6f6e
   3284c:	0000006c 	.word	0x0000006c
   32850:	5f657375 	.word	0x5f657375
   32854:	00006c77 	.word	0x00006c77
   32858:	775f6f6e 	.word	0x775f6f6e
   3285c:	6e695f6c 	.word	0x6e695f6c
   32860:	00617469 	.word	0x00617469
   32864:	5f657375 	.word	0x5f657375
   32868:	695f6c77 	.word	0x695f6c77
   3286c:	6174696e 	.word	0x6174696e
   32870:	00000000 	.word	0x00000000
   32874:	20746573 	.word	0x20746573
   32878:	6e616373 	.word	0x6e616373
   3287c:	74706f20 	.word	0x74706f20
   32880:	736e6f69 	.word	0x736e6f69
   32884:	00000000 	.word	0x00000000
   32888:	67617375 	.word	0x67617375
   3288c:	3d203a65 	.word	0x3d203a65
   32890:	552d305b 	.word	0x552d305b
   32894:	31544e49 	.word	0x31544e49
   32898:	414d5f36 	.word	0x414d5f36
   3289c:	202c5d58 	.word	0x202c5d58
   328a0:	61666564 	.word	0x61666564
   328a4:	3a746c75 	.word	0x3a746c75
   328a8:	4e495520 	.word	0x4e495520
   328ac:	5f363154 	.word	0x5f363154
   328b0:	0058414d 	.word	0x0058414d
   328b4:	63736964 	.word	0x63736964
   328b8:	656e6e6f 	.word	0x656e6e6f
   328bc:	63207463 	.word	0x63207463
   328c0:	616d6d6f 	.word	0x616d6d6f
   328c4:	0000646e 	.word	0x0000646e
   328c8:	63736964 	.word	0x63736964
   328cc:	656e6e6f 	.word	0x656e6e6f
   328d0:	6f697463 	.word	0x6f697463
   328d4:	6572206e 	.word	0x6572206e
   328d8:	6e6f7361 	.word	0x6e6f7361
   328dc:	7375202c 	.word	0x7375202c
   328e0:	3a656761 	.word	0x3a656761
   328e4:	555b3d20 	.word	0x555b3d20
   328e8:	38544e49 	.word	0x38544e49
   328ec:	64202c5d 	.word	0x64202c5d
   328f0:	75616665 	.word	0x75616665
   328f4:	203a746c 	.word	0x203a746c
   328f8:	28203931 	.word	0x28203931
   328fc:	6f6d6572 	.word	0x6f6d6572
   32900:	75206574 	.word	0x75206574
   32904:	20726573 	.word	0x20726573
   32908:	6d726574 	.word	0x6d726574
   3290c:	74616e69 	.word	0x74616e69
   32910:	63206465 	.word	0x63206465
   32914:	656e6e6f 	.word	0x656e6e6f
   32918:	6f697463 	.word	0x6f697463
   3291c:	0000296e 	.word	0x0000296e
   32920:	72617473 	.word	0x72617473
   32924:	74732f74 	.word	0x74732f74
   32928:	6320706f 	.word	0x6320706f
   3292c:	656e6e6f 	.word	0x656e6e6f
   32930:	6f697463 	.word	0x6f697463
   32934:	7270206e 	.word	0x7270206e
   32938:	6465636f 	.word	0x6465636f
   3293c:	20657275 	.word	0x20657275
   32940:	68746977 	.word	0x68746977
   32944:	65707320 	.word	0x65707320
   32948:	69666963 	.word	0x69666963
   3294c:	61702063 	.word	0x61702063
   32950:	656d6172 	.word	0x656d6172
   32954:	73726574 	.word	0x73726574
   32958:	00000000 	.word	0x00000000
   3295c:	636e6163 	.word	0x636e6163
   32960:	63206c65 	.word	0x63206c65
   32964:	656e6e6f 	.word	0x656e6e6f
   32968:	6f697463 	.word	0x6f697463
   3296c:	7270206e 	.word	0x7270206e
   32970:	6465636f 	.word	0x6465636f
   32974:	00657275 	.word	0x00657275
   32978:	67617375 	.word	0x67617375
   3297c:	3d203a65 	.word	0x3d203a65
   32980:	6e6f6e5b 	.word	0x6e6f6e5b
   32984:	4d317c65 	.word	0x4d317c65
   32988:	646f637c 	.word	0x646f637c
   3298c:	627c6465 	.word	0x627c6465
   32990:	7c68746f 	.word	0x7c68746f
   32994:	5d6c6c61 	.word	0x5d6c6c61
   32998:	6564202c 	.word	0x6564202c
   3299c:	6c756166 	.word	0x6c756166
   329a0:	6e203a74 	.word	0x6e203a74
   329a4:	00656e6f 	.word	0x00656e6f
   329a8:	72656570 	.word	0x72656570
   329ac:	6464615f 	.word	0x6464615f
   329b0:	79745f72 	.word	0x79745f72
   329b4:	00006570 	.word	0x00006570
   329b8:	67617375 	.word	0x67617375
   329bc:	3d203a65 	.word	0x3d203a65
   329c0:	6275705b 	.word	0x6275705b
   329c4:	7c63696c 	.word	0x7c63696c
   329c8:	646e6172 	.word	0x646e6172
   329cc:	707c6d6f 	.word	0x707c6d6f
   329d0:	696c6275 	.word	0x696c6275
   329d4:	64695f63 	.word	0x64695f63
   329d8:	6e61727c 	.word	0x6e61727c
   329dc:	5f6d6f64 	.word	0x5f6d6f64
   329e0:	2c5d6469 	.word	0x2c5d6469
   329e4:	66656420 	.word	0x66656420
   329e8:	746c7561 	.word	0x746c7561
   329ec:	7570203a 	.word	0x7570203a
   329f0:	63696c62 	.word	0x63696c62
   329f4:	00000000 	.word	0x00000000
   329f8:	72656570 	.word	0x72656570
   329fc:	6464615f 	.word	0x6464615f
   32a00:	00000072 	.word	0x00000072
   32a04:	67617375 	.word	0x67617375
   32a08:	3d203a65 	.word	0x3d203a65
   32a0c:	492d315b 	.word	0x492d315b
   32a10:	3233544e 	.word	0x3233544e
   32a14:	58414d5f 	.word	0x58414d5f
   32a18:	64202c5d 	.word	0x64202c5d
   32a1c:	75616665 	.word	0x75616665
   32a20:	203a746c 	.word	0x203a746c
   32a24:	00000030 	.word	0x00000030
   32a28:	67617375 	.word	0x67617375
   32a2c:	3d203a65 	.word	0x3d203a65
   32a30:	552d305b 	.word	0x552d305b
   32a34:	31544e49 	.word	0x31544e49
   32a38:	414d5f36 	.word	0x414d5f36
   32a3c:	202c5d58 	.word	0x202c5d58
   32a40:	61666564 	.word	0x61666564
   32a44:	3a746c75 	.word	0x3a746c75
   32a48:	30783020 	.word	0x30783020
   32a4c:	00303130 	.word	0x00303130
   32a50:	65646f63 	.word	0x65646f63
   32a54:	696d5f64 	.word	0x696d5f64
   32a58:	6f635f6e 	.word	0x6f635f6e
   32a5c:	655f6e6e 	.word	0x655f6e6e
   32a60:	746e6576 	.word	0x746e6576
   32a64:	6e656c5f 	.word	0x6e656c5f
   32a68:	00000000 	.word	0x00000000
   32a6c:	65646f63 	.word	0x65646f63
   32a70:	616d5f64 	.word	0x616d5f64
   32a74:	6f635f78 	.word	0x6f635f78
   32a78:	655f6e6e 	.word	0x655f6e6e
   32a7c:	746e6576 	.word	0x746e6576
   32a80:	6e656c5f 	.word	0x6e656c5f
   32a84:	00000000 	.word	0x00000000
   32a88:	6d5f4d32 	.word	0x6d5f4d32
   32a8c:	635f6e69 	.word	0x635f6e69
   32a90:	5f6e6e6f 	.word	0x5f6e6e6f
   32a94:	6e657665 	.word	0x6e657665
   32a98:	656c5f74 	.word	0x656c5f74
   32a9c:	0000006e 	.word	0x0000006e
   32aa0:	6d5f4d32 	.word	0x6d5f4d32
   32aa4:	635f7861 	.word	0x635f7861
   32aa8:	5f6e6e6f 	.word	0x5f6e6e6f
   32aac:	6e657665 	.word	0x6e657665
   32ab0:	656c5f74 	.word	0x656c5f74
   32ab4:	0000006e 	.word	0x0000006e
   32ab8:	006c6c61 	.word	0x006c6c61
   32abc:	72617473 	.word	0x72617473
   32ac0:	74732f74 	.word	0x74732f74
   32ac4:	6120706f 	.word	0x6120706f
   32ac8:	72657664 	.word	0x72657664
   32acc:	69736974 	.word	0x69736974
   32ad0:	7720676e 	.word	0x7720676e
   32ad4:	20687469 	.word	0x20687469
   32ad8:	63657073 	.word	0x63657073
   32adc:	63696669 	.word	0x63696669
   32ae0:	72617020 	.word	0x72617020
   32ae4:	74656d61 	.word	0x74656d61
   32ae8:	00737265 	.word	0x00737265
   32aec:	706f7473 	.word	0x706f7473
   32af0:	76646120 	.word	0x76646120
   32af4:	69747265 	.word	0x69747265
   32af8:	676e6973 	.word	0x676e6973
   32afc:	6f727020 	.word	0x6f727020
   32b00:	75646563 	.word	0x75646563
   32b04:	00006572 	.word	0x00006572
   32b08:	6e6e6f63 	.word	0x6e6e6f63
   32b0c:	61746365 	.word	0x61746365
   32b10:	20656c62 	.word	0x20656c62
   32b14:	65646f6d 	.word	0x65646f6d
   32b18:	7375202c 	.word	0x7375202c
   32b1c:	3a656761 	.word	0x3a656761
   32b20:	6e5b3d20 	.word	0x6e5b3d20
   32b24:	757c6e6f 	.word	0x757c6e6f
   32b28:	647c646e 	.word	0x647c646e
   32b2c:	2c5d7269 	.word	0x2c5d7269
   32b30:	66656420 	.word	0x66656420
   32b34:	746c7561 	.word	0x746c7561
   32b38:	6e75203a 	.word	0x6e75203a
   32b3c:	00000064 	.word	0x00000064
   32b40:	63736964 	.word	0x63736964
   32b44:	7265766f 	.word	0x7265766f
   32b48:	656c6261 	.word	0x656c6261
   32b4c:	646f6d20 	.word	0x646f6d20
   32b50:	75202c65 	.word	0x75202c65
   32b54:	65676173 	.word	0x65676173
   32b58:	5b3d203a 	.word	0x5b3d203a
   32b5c:	7c6e6f6e 	.word	0x7c6e6f6e
   32b60:	7c64746c 	.word	0x7c64746c
   32b64:	5d6e6567 	.word	0x5d6e6567
   32b68:	6564202c 	.word	0x6564202c
   32b6c:	6c756166 	.word	0x6c756166
   32b70:	67203a74 	.word	0x67203a74
   32b74:	00006e65 	.word	0x00006e65
   32b78:	67617375 	.word	0x67617375
   32b7c:	3d203a65 	.word	0x3d203a65
   32b80:	3078305b 	.word	0x3078305b
   32b84:	78302d30 	.word	0x78302d30
   32b88:	2c5d6666 	.word	0x2c5d6666
   32b8c:	66656420 	.word	0x66656420
   32b90:	746c7561 	.word	0x746c7561
   32b94:	0030203a 	.word	0x0030203a
   32b98:	67617375 	.word	0x67617375
   32b9c:	3d203a65 	.word	0x3d203a65
   32ba0:	6e6f6e5b 	.word	0x6e6f6e5b
   32ba4:	63737c65 	.word	0x63737c65
   32ba8:	637c6e61 	.word	0x637c6e61
   32bac:	7c6e6e6f 	.word	0x7c6e6e6f
   32bb0:	68746f62 	.word	0x68746f62
   32bb4:	64202c5d 	.word	0x64202c5d
   32bb8:	75616665 	.word	0x75616665
   32bbc:	203a746c 	.word	0x203a746c
   32bc0:	656e6f6e 	.word	0x656e6f6e
   32bc4:	00000000 	.word	0x00000000
   32bc8:	74736572 	.word	0x74736572
   32bcc:	20747261 	.word	0x20747261
   32bd0:	65766461 	.word	0x65766461
   32bd4:	73697472 	.word	0x73697472
   32bd8:	20676e69 	.word	0x20676e69
   32bdc:	65746661 	.word	0x65746661
   32be0:	69642072 	.word	0x69642072
   32be4:	6e6f6373 	.word	0x6e6f6373
   32be8:	7463656e 	.word	0x7463656e
   32bec:	7375202c 	.word	0x7375202c
   32bf0:	3a656761 	.word	0x3a656761
   32bf4:	305b3d20 	.word	0x305b3d20
   32bf8:	2c5d312d 	.word	0x2c5d312d
   32bfc:	66656420 	.word	0x66656420
   32c00:	746c7561 	.word	0x746c7561
   32c04:	0030203a 	.word	0x0030203a
   32c08:	006e6f6e 	.word	0x006e6f6e
   32c0c:	0064746c 	.word	0x0064746c
   32c10:	006e6567 	.word	0x006e6567
   32c14:	00646e75 	.word	0x00646e75
   32c18:	00726964 	.word	0x00726964
   32c1c:	6c627570 	.word	0x6c627570
   32c20:	00006369 	.word	0x00006369
   32c24:	646e6172 	.word	0x646e6172
   32c28:	00006d6f 	.word	0x00006d6f
   32c2c:	6c627570 	.word	0x6c627570
   32c30:	695f6369 	.word	0x695f6369
   32c34:	00000064 	.word	0x00000064
   32c38:	646e6172 	.word	0x646e6172
   32c3c:	695f6d6f 	.word	0x695f6d6f
   32c40:	00000064 	.word	0x00000064
   32c44:	5f617072 	.word	0x5f617072
   32c48:	00627570 	.word	0x00627570
   32c4c:	5f617072 	.word	0x5f617072
   32c50:	00646e72 	.word	0x00646e72

00032c54 <advertise_help>:
   32c54:	00032abc 00000000 00032c60              .*......`,..

00032c60 <advertise_params>:
   32c60:	000306c8 00032aec 000305d8 00032b08     .....*.......+..
   32c70:	00031784 00032b40 000329a8 000329b8     ....@+...)...)..
   32c80:	000329f8 00032604 0003119c 000327f8     .)...&.......'..
   32c90:	000317d0 00032b78 00031154 00032b98     ....x+..T....+..
   32ca0:	00030988 00032794 000309bc 00032794     .....'.......'..
   32cb0:	00031800 00032778 00031094 0003274c     ....x'......L'..
   32cc0:	000317a8 00032bc8 00000000 00000000     .....+..........

00032cd0 <btshell_commands>:
   32cd0:	00000000 00017669 00031854 00032c54     ....iv..T...T,..
   32ce0:	00000000 000170e1 00031860 000330dc     .....p..`....0..
   32cf0:	00000000 0001706d 00031868 000331d0     ....mp..h....1..
   32d00:	00000000 00017009 00031874 0003338c     .....p..t....3..
   32d10:	00000000 00016fcd 00031880 00033398     .....o.......3..
   32d20:	00000000 00016595 0003188c 000336e8     .....e.......6..
   32d30:	00000000 00016c05 0003189c 00033540     .....l......@5..
   32d40:	00000000 00016b51 00034220 00033688     ....Qk.. B...6..
   32d50:	00000000 00016b05 000318a4 000335cc     .....k.......5..
   32d60:	00000000 00016af9 000318b4 00033714     .....j.......7..
   32d70:	00000000 00016539 000318c4 000336bc     ....9e.......6..
   32d80:	00000000 000164d9 000318d4 0003375c     .....d......\7..
   32d90:	00000000 00016471 000318e0 00033074     ....qd......t0..
   32da0:	00000000 00016321 000318ec 00033090     ....!c.......0..
   32db0:	00000000 0001628d 00031900 00033048     .....b......H0..
   32dc0:	00000000 00017919 00031910 000331f4     .....y.......1..
   32dd0:	00000000 000179a9 00031930 00033228     .....y..0...(2..
   32de0:	00000000 00017a01 0003194c 00033270     .....z..L...p2..
   32df0:	00000000 00017a81 00031964 00033254     .....z..d...T2..
   32e00:	00000000 00017dd1 00031978 000332b0     .....}..x....2..
   32e10:	00000000 00017ad1 00031994 00033294     .....z.......2..
   32e20:	00000000 00017b5d 000319a8 000332f8     ....]{.......2..
   32e30:	00000000 00017b21 000319b4 000332dc     ....!{.......2..
   32e40:	00000000 00017d0d 000319c0 00033344     .....}......D3..
   32e50:	00000000 00017d6d 000319d8 00033368     ....m}......h3..
   32e60:	00000000 00017e29 000319f0 000333a4     ....)~.......3..
   32e70:	00000000 00017e6d 000319fc 000333b0     ....m~.......3..
   32e80:	00000000 00017e79 00031a0c 000333c4     ....y~.......3..
   32e90:	00000000 00016215 00031a18 00033420     .....b...... 4..
   32ea0:	00000000 000160d9 00031a28 00033474     .....`..(...t4..
   32eb0:	00000000 00015e09 00031a38 000334b0     .....^..8....4..
   32ec0:	00000000 00015d21 00031a48 00033720     ....!]..H... 7..
   32ed0:	00000000 00015c81 00031a50 0003350c     .....\..P....5..
   32ee0:	00000000 00015c25 00031a58 000334e8     ....%\..X....4..
   32ef0:	00000000 00015bad 00031a68 000334cc     .....[..h....4..
   32f00:	00000000 00015b89 00031a74 00033414     .....[..t....4..
   32f10:	00000000 00015b45 00031a80 00033408     ....E[.......4..
	...

00032f30 <cmd_addr_type>:
   32f30:	00032c1c 00000000 00032c24 00000001     .,......$,......
	...

00032f48 <cmd_adv_conn_modes>:
   32f48:	00032c08 00000000 00032c14 00000002     .,.......,......
   32f58:	00032c18 00000001 00000000 00000000     .,..............

00032f68 <cmd_adv_disc_modes>:
   32f68:	00032c08 00000000 00032c0c 00000001     .,.......,......
   32f78:	00032c10 00000002 00000000 00000000     .,..............

00032f88 <cmd_adv_filt_types>:
   32f88:	00032bc0 00000000 0003189c 00000001     .+..............
   32f98:	000305d8 00000002 00032840 00000003     ........@(......
	...

00032fb0 <cmd_keystore_entry_type>:
   32fb0:	0003209c 00000002 000320a4 00000001     . ....... ......
   32fc0:	000320ac 00000003 00000000 00000000     . ..............

00032fd0 <cmd_own_addr_types>:
   32fd0:	00032c1c 00000000 00032c24 00000001     .,......$,......
   32fe0:	00032c44 00000002 00032c4c 00000003     D,......L,......
	...

00032ff8 <cmd_peer_addr_types>:
   32ff8:	00032c1c 00000000 00032c24 00000001     .,......$,......
   33008:	00032c2c 00000002 00032c38 00000003     ,,......8,......
	...

00033020 <cmd_scan_filt_policies>:
   33020:	00032848 00000000 00032850 00000001     H(......P(......
   33030:	00032858 00000002 00032864 00000003     X(......d(......
	...

00033048 <conn_datalen_help>:
   33048:	000320b4 00000000 00033054              . ......T0..

00033054 <conn_datalen_params>:
   33054:	000305d8 000320e0 00032094 00032104     ..... ... ...!..
   33064:	00030940 00032154 00000000 00000000     @...T!..........

00033074 <conn_rssi_help>:
   33074:	00032308 00000000 00033080              .#.......0..

00033080 <conn_rssi_params>:
   33080:	000305d8 00032320 00000000 00000000     .... #..........

00033090 <conn_update_params_help>:
   33090:	000321c8 000321e8 0003309c              .!...!...0..

0003309c <conn_update_params_params>:
   3309c:	000305d8 00032204 00030988 00032234     ....."......4"..
   330ac:	000309bc 00032258 000309f0 0003227c     ....X"......|"..
   330bc:	00030a18 0003229c 00030a40 000322c0     ....."..@...."..
   330cc:	00030a7c 000322e4 00000000 00000000     |...."..........

000330dc <connect_help>:
   330dc:	00032920 00000000 000330e8               ).......0..

000330e8 <connect_params>:
   330e8:	00031048 0003295c 00031068 00032978     H...\)..h...x)..
   330f8:	000329a8 000329b8 000329f8 00032604     .)...)...)...&..
   33108:	0003119c 000327f8 00031094 00032a04     .....'.......*..
   33118:	000313c4 00032a28 000313f8 00032a28     ....(*......(*..
   33128:	00030988 00032234 000309bc 00032258     ....4"......X"..
   33138:	000309f0 0003227c 00030a18 0003229c     ....|"......."..
   33148:	00030a40 000322c0 00030a7c 000322e4     @...."..|...."..
   33158:	00031444 00032a28 00031484 00032a28     D...(*......(*..
   33168:	000314c0 00032234 000314fc 00032258     ....4"......X"..
   33178:	00031538 0003227c 0003156c 0003229c     8...|"..l...."..
   33188:	00032a50 000322c0 00032a6c 000322e4     P*..."..l*..."..
   33198:	00031628 00032234 00031660 00032258     (...4"..`...X"..
   331a8:	00031698 0003227c 000316c4 0003229c     ....|"......."..
   331b8:	00032a88 000322c0 00032aa0 000322e4     .*..."...*..."..
	...

000331d0 <disconnect_help>:
   331d0:	000328b4 00000000 000331dc              .(.......1..

000331dc <disconnect_params>:
   331dc:	000305d8 00032320 00031334 000328c8     .... #..4....(..
	...

000331f4 <gatt_discover_characteristic_help>:
   331f4:	00031e2c 00000000 00033200              ,........2..

00033200 <gatt_discover_characteristic_params>:
   33200:	000305d8 00031ab0 00031cfc 00031de0     ................
   33210:	00031840 00031c58 00031848 00031c78     @...X...H...x...
	...

00033228 <gatt_discover_descriptor_help>:
   33228:	00031e04 00000000 00033234              ........42..

00033234 <gatt_discover_descriptor_params>:
   33234:	000305d8 00031ab0 00031840 00031c58     ........@...X...
   33244:	00031848 00031c78 00000000 00000000     H...x...........

00033254 <gatt_discover_full_help>:
   33254:	00031d98 00000000 00033260              ........`2..

00033260 <gatt_discover_full_params>:
   33260:	000305d8 00031ab0 00000000 00000000     ................

00033270 <gatt_discover_service_help>:
   33270:	00031dbc 00000000 0003327c              ........|2..

0003327c <gatt_discover_service_params>:
   3327c:	000305d8 00031ab0 00031cfc 00031de0     ................
	...

00033294 <gatt_exchange_mtu_help>:
   33294:	00031d78 00000000 000332a0              x........2..

000332a0 <gatt_exchange_mtu_params>:
   332a0:	000305d8 00031ab0 00000000 00000000     ................

000332b0 <gatt_find_included_services_help>:
   332b0:	00031d4c 00000000 000332bc              L........2..

000332bc <gatt_find_included_services_params>:
   332bc:	000305d8 00031ab0 00031840 00031c58     ........@...X...
   332cc:	00031848 00031c78 00000000 00000000     H...x...........

000332dc <gatt_notify_help>:
   332dc:	00031d24 00000000 000332e8              $........2..

000332e8 <gatt_notify_params>:
   332e8:	00031b40 00031b48 00000000 00000000     @...H...........

000332f8 <gatt_read_help>:
   332f8:	00031c98 00000000 00033304              .........3..

00033304 <gatt_read_params>:
   33304:	000305d8 00031ab0 00031b10 00031cb4     ................
   33314:	00031b40 00031b48 00031b6c 00031cdc     @...H...l.......
   33324:	00031cfc 00031d04 00031840 00031c58     ........@...X...
   33334:	00031848 00031c78 00000000 00000000     H...x...........

00033344 <gatt_service_changed_help>:
   33344:	00031c38 00000000 00033350              8.......P3..

00033350 <gatt_service_changed_params>:
   33350:	00031840 00031c58 00031848 00031c78     @...X...H...x...
	...

00033368 <gatt_service_visibility_help>:
   33368:	00031c00 00000000 00033374              ........t3..

00033374 <gatt_service_visibility_params>:
   33374:	00034d20 000321b4 00031c1c 00031c28      M...!......(...
	...

0003338c <gatt_show_addr_help>:
   3338c:	00031bb0 00000000 000333bc              .........3..

00033398 <gatt_show_conn_help>:
   33398:	00031b90 00000000 000333bc              .........3..

000333a4 <gatt_show_help>:
   333a4:	00031be0 00000000 000333bc              .........3..

000333b0 <gatt_show_local_help>:
   333b0:	00031bc4 00000000 000333bc              .........3..

000333bc <gatt_show_params>:
	...

000333c4 <gatt_write_help>:
   333c4:	00031a90 00000000 000333d0              .........3..

000333d0 <gatt_write_params>:
   333d0:	000305d8 00031ab0 00031ad4 00031adc     ................
   333e0:	00031b10 00031b18 00031b40 00031b48     ........@...H...
   333f0:	00031b6c 00031b48 00031b74 00031b7c     l...H...t...|...
	...

00033408 <host_disable_help>:
   33408:	00031e58 00000000 00000000              X...........

00033414 <host_enable_help>:
   33414:	00031e70 00000000 00000000              p...........

00033420 <keystore_add_help>:
   33420:	00032060 00000000 0003342c              ` ......,4..

0003342c <keystore_add_params>:
   3342c:	00030784 00031fd4 000311a0 00032018     ............. ..
   3343c:	00030854 00032030 00030878 000321b4     T...0 ..x....!..
   3344c:	0003089c 0003204c 000308c0 00032078     ....L ......x ..
   3345c:	000308e0 00032078 00030900 00032078     ....x ......x ..
	...

00033474 <keystore_del_help>:
   33474:	00031ffc 00000000 00033480              .........4..

00033480 <keystore_del_params>:
   33480:	00030784 00031fd4 000311a0 00032018     ............. ..
   33490:	00030854 00032030 00030878 000321b4     T...0 ..x....!..
   334a0:	0003089c 0003204c 00000000 00000000     ....L ..........

000334b0 <keystore_show_help>:
   334b0:	00031fbc 00000000 000334bc              .........4..

000334bc <keystore_show_params>:
   334bc:	00030784 00031fd4 00000000 00000000     ................

000334cc <phy_read_help>:
   334cc:	00031e88 00000000 000334d8              .........4..

000334d8 <phy_read_params>:
   334d8:	000305d8 00031ab0 00000000 00000000     ................

000334e8 <phy_set_default_help>:
   334e8:	00031e94 00000000 000334f4              .........4..

000334f4 <phy_set_default_params>:
   334f4:	00030634 00031eb0 00030668 00031eb0     4.......h.......
	...

0003350c <phy_set_help>:
   3350c:	00031ec0 00000000 00033518              .........5..

00033518 <phy_set_params>:
   33518:	000305d8 00031ab0 00030634 00031eb0     ........4.......
   33528:	00030668 00031eb0 0003069c 000321b4     h............!..
	...

00033540 <scan_help>:
   33540:	000326d4 00000000 0003354c              .&......L5..

0003354c <scan_params>:
   3354c:	00031048 00032708 00031068 00032720     H....'..h... '..
   3355c:	00031094 0003274c 000310c0 00032778     ....L'......x'..
   3356c:	000310e8 00032778 00030e74 00032794     ....x'..t....'..
   3357c:	00031130 00032794 00031154 000327b8     0....'..T....'..
   3358c:	00031178 00032778 0003119c 000327f8     x...x'.......'..
   3359c:	000311e8 00032794 00031224 00032794     .....'..$....'..
   335ac:	0003125c 00032794 00031298 00032794     \....'.......'..
   335bc:	000312d4 00032778 00000000 00000000     ....x'..........

000335cc <set_adv_data_help>:
   335cc:	000324b8 00000000 000335d8              .$.......5..

000335d8 <set_adv_data_params>:
   335d8:	000324d0 000327ac 00030be0 000324dc     .$...'.......$..
   335e8:	00030c04 000324f4 00032508 00031af4     .....$...%......
   335f8:	00030c68 0003251c 00032530 00031af4     h....%..0%......
   33608:	00030ccc 000326b0 00032544 00031af4     .....&..D%......
   33618:	00030d40 00032558 00030d74 00032574     @...X%..t...t%..
   33628:	00030df8 00032604 00030e3c 000324f4     .....&..<....$..
   33638:	00030d38 0003258c 00030e68 000324f4     8....%..h....$..
   33648:	00030db8 000325a0 00030eac 000325a0     .....%.......%..
   33658:	00030eec 000325a0 00030f30 000325a0     .....%..0....%..
   33668:	00030f50 000325a0 000325b4 000325c4     P....%...%...%..
   33678:	00030fc8 0003258c 00000000 00000000     .....%..........

00033688 <set_help>:
   33688:	000325d8 00000000 00033694              .%.......6..

00033694 <set_params>:
   33694:	00030854 000325f0 000311a0 00032620     T....%...... &..
   336a4:	00031004 00032664 000308e0 00032698     ....d&.......&..
	...

000336bc <set_priv_mode_help>:
   336bc:	000323dc 00000000 000336c8              .#.......6..

000336c8 <set_priv_mode_params>:
   336c8:	00030854 000323ec 000311a0 0003242c     T....#......,$..
   336d8:	00030b2c 0003247c 00000000 00000000     ,...|$..........

000336e8 <set_scan_opts_help>:
   336e8:	00032874 00000000 000336f4              t(.......6..

000336f4 <set_scan_opts_params>:
   336f4:	00030b44 00032888 00030b78 00032778     D....(..x...x'..
   33704:	00030bac 00032778 00000000 00000000     ....x'..........

00033714 <set_scan_rsp_help>:
   33714:	000324a4 00000000 000335d8              .$.......5..

00033720 <test_tx_help>:
   33720:	00031ed4 00000000 0003372c              ........,7..

0003372c <test_tx_params>:
   3372c:	000305d8 00031ef0 000306ec 00031f14     ................
   3373c:	00030740 00031f38 00030764 00031f60     @...8...d...`...
   3374c:	000306c8 00031f90 00000000 00000000     ................

0003375c <white_list_help>:
   3375c:	00032350 00000000 00033768              P#......h7..

00033768 <white_list_params>:
   33768:	00030854 0003236c 000311a0 000323a8     T...l#.......#..
	...
   33780:	61766e69 2064696c 6e6f6327 7473206e     invalid 'conn st
   33790:	20747261 27646e65 72617020 74656d61     art end' paramet
   337a0:	000a7265 61766e69 2064696c 69757527     er..invalid 'uui
   337b0:	70202764 6d617261 72657465 0000000a     d' parameter....
   337c0:	6f727265 69642072 766f6373 6e697265     error discoverin
   337d0:	68632067 63617261 69726574 63697473     g characteristic
   337e0:	72203b73 64253d63 0000000a 6f727265     s; rc=%d....erro
   337f0:	69642072 766f6373 6e697265 65642067     r discovering de
   33800:	69726373 726f7470 72203b73 64253d63     scriptors; rc=%d
   33810:	0000000a 6f727265 69642072 766f6373     ....error discov
   33820:	6e697265 65732067 63697672 203b7365     ering services; 
   33830:	253d6372 00000a64 6f727265 69642072     rc=%d...error di
   33840:	766f6373 6e697265 6c612067 72203b6c     scovering all; r
   33850:	64253d63 0000000a 6f727265 78652072     c=%d....error ex
   33860:	6e616863 676e6967 75746d20 6372203b     changing mtu; rc
   33870:	0a64253d 00000000 61766e69 2064696c     =%d.....invalid 
   33880:	74746127 70202772 6d617261 72657465     'attr' parameter
   33890:	0000000a 61766e69 2064696c 6e6f6c27     ....invalid 'lon
   338a0:	70202767 6d617261 72657465 0000000a     g' parameter....
   338b0:	61766e69 2064696c 61747327 20277472     invalid 'start' 
   338c0:	61726170 6574656d 00000a72 61766e69     parameter...inva
   338d0:	2064696c 646e6527 61702027 656d6172     lid 'end' parame
   338e0:	0a726574 00000000 61766e69 2064696c     ter.....invalid 
   338f0:	66666f27 27746573 72617020 74656d61     'offset' paramet
   33900:	000a7265 6f727265 65722072 6e696461     er..error readin
   33910:	68632067 63617261 69726574 63697473     g characteristic
   33920:	6372203b 0a64253d 00000000 61766e69     ; rc=%d.....inva
   33930:	2064696c 6e616827 27656c64 72617020     lid 'handle' par
   33940:	74656d61 000a7265 61766e69 2064696c     ameter..invalid 
   33950:	73697627 6c696269 27797469 72617020     'visibility' par
   33960:	74656d61 000a7265 6f727265 69662072     ameter..error fi
   33970:	6e69646e 6e692067 64756c63 73206465     nding included s
   33980:	69767265 3b736563 3d637220 000a6425     ervices; rc=%d..
   33990:	4e4e4f43 49544345 203a4e4f 646e6168     CONNECTION: hand
   339a0:	253d656c 00000a64 61766e69 2064696c     le=%d...invalid 
   339b0:	5f6f6e27 27707372 72617020 74656d61     'no_rsp' paramet
   339c0:	000a7265 61766e69 2064696c 6c617627     er..invalid 'val
   339d0:	20276575 61726170 6574656d 00000a72     ue' parameter...
   339e0:	6f727265 72772072 6e697469 68632067     error writing ch
   339f0:	63617261 69726574 63697473 6372203b     aracteristic; rc
   33a00:	0a64253d 00000000                       =%d.....

00033a08 <gatt_svr_chr_sec_test_rand_uuid>:
   33a08:	c96df680 16007107 7e45e1b0 3a659e89     ..m..q....E~..e:
   33a18:	0000005c                                \...

00033a1c <gatt_svr_chr_sec_test_static_auth_uuid>:
   33a1c:	c96df880 16007107 7e45e1b0 3a659e89     ..m..q....E~..e:
   33a2c:	0000005c                                \...

00033a30 <gatt_svr_chr_sec_test_static_uuid>:
   33a30:	c96df780 16007107 7e45e1b0 3a659e89     ..m..q....E~..e:
   33a40:	0000005c                                \...

00033a44 <gatt_svr_inc_svcs>:
   33a44:	00000001 10000590 10000660 100005b8     ........`.......
	...

00033a64 <gatt_svr_svc_sec_test_uuid>:
   33a64:	a2712d80 c858b459 43999912 462f1295     .-q.Y.X....C../F
   33a74:	00000059                                Y...

00033a78 <gatt_svr_svcs>:
   33a78:	00000001 10000160 00000000 10000224     ....`.......$...
   33a88:	00000001 100002e4 00000000 1000045c     ............\...
   33a98:	00000001 00033a64 00000000 10000530     ....d:......0...
	...
   33ab8:	00007375 00002d3a 6f727245 69203a72     us..:-..Error: i
   33ac8:	6c61766e 61206469 6d756772 3a746e65     nvalid argument:
   33ad8:	0a732520 00000000 6f727245 74203a72      %s.....Error: t
   33ae8:	6d206f6f 20796e61 75677261 746e656d     oo many argument
   33af8:	00000073 6d6f632e 0000002f 67726f2e     s....com/....org
   33b08:	0000002f 7564652e 0000002f 74656e2e     /....edu/....net
   33b18:	0000002f 666e692e 00002f6f 7a69622e     /....info/...biz
   33b28:	0000002f 766f672e 0000002f 6d6f632e     /....gov/....com
   33b38:	00000000 67726f2e 00000000 7564652e     .....org.....edu
   33b48:	00000000 74656e2e 00000000 666e692e     .....net.....inf
   33b58:	0000006f 7a69622e 00000000 766f672e     o....biz.....gov
   33b68:	00000000 70747468 772f2f3a 002e7777     ....http://www..
   33b78:	70747468 2f2f3a73 2e777777 00000000     https://www.....
   33b88:	70747468 002f2f3a 70747468 2f2f3a73     http://.https://
   33b98:	00000000                                ....

00033b9c <schemes.22337>:
   33b9c:	00033b6c 00000000 00033b78 00000001     l;......x;......
   33bac:	00033b88 00000002 00033b90 00000003     .;.......;......

00033bbc <suffixes.22341>:
   33bbc:	00033afc 00000000 00033b04 00000001     .:.......;......
   33bcc:	00033b0c 00000002 00033b14 00000003     .;.......;......
   33bdc:	00033b1c 00000004 00033b24 00000005     .;......$;......
   33bec:	00033b2c 00000006 00033b34 00000007     ,;......4;......
   33bfc:	00033b3c 00000008 00033b44 00000009     <;......D;......
   33c0c:	00033b4c 0000000a 00033b54 0000000b     L;......T;......
   33c1c:	00033b5c 0000000c 00033b64 0000000d     \;......d;......
   33c2c:	65737341 40207472 25783020 00000a78     Assert @ 0x%x...
   33c3c:	65737341 40207472 25783020 202d2078     Assert @ 0x%x - 
   33c4c:	253a7325 00000a64 61686e55 656c646e     %s:%d...Unhandle
   33c5c:	6e692064 72726574 20747075 646c2528     d interrupt (%ld
   33c6c:	65202c29 70656378 6e6f6974 20707320     ), exception sp 
   33c7c:	30257830 0a786c38 00000000 3a307220     0x%08lx..... r0:
   33c8c:	30257830 20786c38 3a317220 30257830     0x%08lx  r1:0x%0
   33c9c:	20786c38 3a327220 30257830 20786c38     8lx  r2:0x%08lx 
   33cac:	3a337220 30257830 0a786c38 00000000      r3:0x%08lx.....
   33cbc:	3a347220 30257830 20786c38 3a357220      r4:0x%08lx  r5:
   33ccc:	30257830 20786c38 3a367220 30257830     0x%08lx  r6:0x%0
   33cdc:	20786c38 3a377220 30257830 0a786c38     8lx  r7:0x%08lx.
   33cec:	00000000 3a387220 30257830 20786c38     .... r8:0x%08lx 
   33cfc:	3a397220 30257830 20786c38 3a303172      r9:0x%08lx r10:
   33d0c:	30257830 20786c38 3a313172 30257830     0x%08lx r11:0x%0
   33d1c:	0a786c38 00000000 3a323172 30257830     8lx.....r12:0x%0
   33d2c:	20786c38 3a726c20 30257830 20786c38     8lx  lr:0x%08lx 
   33d3c:	3a637020 30257830 20786c38 3a727370      pc:0x%08lx psr:
   33d4c:	30257830 0a786c38 00000000 52534349     0x%08lx.....ICSR
   33d5c:	2578303a 786c3830 53464820 78303a52     :0x%08lx HFSR:0x
   33d6c:	6c383025 46432078 303a5253 38302578     %08lx CFSR:0x%08
   33d7c:	000a786c 52414642 2578303a 786c3830     lx..BFAR:0x%08lx
   33d8c:	464d4d20 303a5241 38302578 000a786c      MMFAR:0x%08lx..
   33d9c:	656c6469 00000000 6e69616d 00000000     idle....main....
   33dac:	7379736d 0000315f                       msys_1..

00033db4 <MemFile_methods>:
   33db4:	0001b4e5 00000000                       ........

00033dbc <stdout>:
   33dbc:	10000688 6c363025 00002075 74726175     ....%06lu ..uart
   33dcc:	00000030 3d73745b 756c6c25 202c7375     0...[ts=%lluus, 
   33ddc:	3d646f6d 6c207525 6c657665 2075253d     mod=%u level=%u 
   33dec:	00000000 303d6869 25782578 25782578     ....ih=0x%x%x%x%
   33dfc:	00000078 736e6f63 00656c6f              x...console.

00033e08 <log_console_handler>:
   33e08:	00000000 0001c95d 00000000 0001ca39     ....].......9...
   33e18:	0001c9f9 00000000 00000000 0001c961     ............a...
   33e28:	00000000 0001c965 00000000 6c646f6d     ....e.......modl
   33e38:	6d5f676f 69707061 705f676e 006c6f6f     og_mapping_pool.
   33e48:	706c6568 0000000a 30332d25 00000073     help....%-30s...
   33e58:	30332d25 0a732573 00000000 65726e55     %-30s%s.....Unre
   33e68:	6e676f63 64657a69 6d6f6320 646e616d     cognized command
   33e78:	0000000a 65726e55 6e676f63 64657a69     ....Unrecognized
   33e88:	6d6f6320 646e616d 7325203a 0000000a      command: %s....
   33e98:	656c6c49 206c6167 75646f6d 2520656c     Illegal module %
   33ea8:	00000a73 656c6c49 206c6167 61726170     s...Illegal para
   33eb8:	6574656d 00000a72 706c6568 00000000     meter...help....
   33ec8:	656c6573 00007463 7373694d 20676e69     select..Missing 
   33ed8:	61726170 6574656d 00000a72 206f6e28     parameter...(no 
   33ee8:	706c6568 61766120 62616c69 0a29656c     help available).
   33ef8:	00000000 6d6d7553 3a797261 0000000a     ....Summary:....
   33f08:	67617355 000a3a65 61726150 6574656d     Usage:..Paramete
   33f18:	0a3a7372 00000000 69617641 6c62616c     rs:.....Availabl
   33f28:	6f6d2065 656c7564 000a3a73 73206f54     e modules:..To s
   33f38:	63656c65 20612074 75646f6d 202c656c     elect a module, 
   33f48:	65746e65 73272072 63656c65 6d3c2074     enter 'select <m
   33f58:	6c75646f 616e2065 273e656d 00000a2e     odule name>'....
   33f68:	0000203e 206f6f54 796e616d 72617020     > ..Too many par
   33f78:	74656d61 20737265 78616d28 757a2520     ameters (max %zu
   33f88:	00000a29 65707954 65682720 2027706c     )...Type 'help' 
   33f98:	20726f66 7473696c 20666f20 69617661     for list of avai
   33fa8:	6c62616c 6f632065 6e616d6d 000a7364     lable commands..
   33fb8:	2078614d 626d756e 6f207265 6f6d2066     Max number of mo
   33fc8:	656c7564 65722073 65686361 00000a64     dules reached...
   33fd8:	2078614d 626d756e 6f207265 6f632066     Max number of co
   33fe8:	7461706d 6d6f6320 646e616d 65722073     mpat commands re
   33ff8:	65686361 00000a64 706d6f63 00007461     ached...compat..
   34008:	656c6c49 206c6167 75646f6d 2520656c     Illegal module %
   34018:	64202c73 75616665 6920746c 6f6e2073     s, default is no
   34028:	68632074 65676e61 00000a64 6c656873     t changed...shel
   34038:	0000006c                                l...

0003403c <shell_cmd_help>:
   3403c:	00000001 0001d1f1 00033ec0 00000000     .........>......

0003404c <shell_cmd_select_module>:
   3404c:	00000001 0001cfa1 00033ec8 00000000     .........>......
   3405c:	20643425 20783325 000a7325 706d654d     %4d %3x %s..Memp
   3406c:	736c6f6f 000a203a 736b6c62 0000007a     ools: ..blksz...
   3407c:	73323325 73352520 73342520 73342520     %32s %5s %4s %4s
   3408c:	73342520 0000000a 65657266 00000000      %4s....free....
   3409c:	00746e63 73323325 64352520 64342520     cnt.%32s %5d %4d
   340ac:	64342520 64342520 0000000a 6c756f43      %4d %4d....Coul
   340bc:	74276e64 6e696620 20612064 6f6d656d     dn't find a memo
   340cc:	70207972 206c6f6f 68746977 6d616e20     ry pool with nam
   340dc:	73252065 0000000a 61766e49 2064696c     e %s....Invalid 
   340ec:	65746164 656d6974 0000000a 00676c66     datetime....flg.
   340fc:	00666572 20733425 20733325 000a7325     ref.%4s %3s %s..
   3410c:	6b736154 0a203a73 00000000 00697270     Tasks: .....pri.
   3411c:	6b736174 00000000 20733825 20733325     task....%8s %3s 
   3412c:	20733325 20733825 20733825 20733825     %3s %8s %8s %8s 
   3413c:	20733825 20733825 20733825 0a733325     %8s %8s %8s %3s.
   3414c:	00000000 6568636e 00006b63 6568636c     ....ncheck..lche
   3415c:	00006b63 756b7473 00006573 736b7473     ck..stkuse..stks
   3416c:	0000007a 00777363 746e7572 00656d69     z...csw.runtime.
   3417c:	00646974 20733825 20753325 20753325     tid.%8s %3u %3u 
   3418c:	756c3825 6c382520 38252075 38252075     %8lu %8lu %8u %8
   3419c:	38252075 2520756c 0a756c38 00000000     u %8lu %8lu.....
   341ac:	6c756f43 74276e64 6e696620 61742064     Couldn't find ta
   341bc:	77206b73 20687469 656d616e 0a732520     sk with name %s.
   341cc:	00000000 65736572 00000074 6564736c     ....reset...lsde
   341dc:	00000076 7473696c 20534f20 69766564     v...list OS devi
   341ec:	00736563 65736572 79732074 6d657473     ces.reset system
   341fc:	00000000 776f6873 73797320 206d6574     ....show system 
   3420c:	65746164 00000000 65746164 656d6974     date....datetime
   3421c:	206f7420 00746573 776f6873 73797320      to set.show sys
   3422c:	206d6574 6f6f706d 0000006c 6f6f706d     tem mpool...mpoo
   3423c:	616e206c 0000656d 776f6873 20736f20     l name..show os 
   3424c:	6b736174 00000073 6b736174 6d616e20     tasks...task nam
   3425c:	00000065                                e...

00034260 <date_help>:
   34260:	00034200 00000000 0003426c              .B......lB..

0003426c <date_params>:
   3426c:	00034114 00034214 00000000 00000000     .A...B..........

0003427c <ls_dev_help>:
   3427c:	000341e0 00000000 00000000              .A..........

00034288 <mpool_help>:
   34288:	00034224 00000000 00034294              $B.......B..

00034294 <mpool_params>:
   34294:	00034114 00034238 00000000 00000000     .A..8B..........

000342a4 <os_commands>:
   342a4:	00000001 0001dcbd 0003424c 00034318     ........LB...C..
   342b4:	00000001 0001db2d 00034230 00034288     ....-...0B...B..
   342c4:	00000001 0001dbdd 0003420c 00034260     .........B..`B..
   342d4:	00000001 0001dc71 000341d0 00034304     ....q....A...C..
   342e4:	00000001 0001dc85 000341d8 0003427c     .........A..|B..
	...

00034304 <reset_help>:
   34304:	000341f0 00000000 00034310              .A.......C..

00034310 <reset_params>:
	...

00034318 <tasks_help>:
   34318:	00034244 00000000 00034324              DB......$C..

00034324 <tasks_params>:
   34324:	00034114 00034254 00000000 00000000     .A..TB..........
   34334:	74617473 00000000 64343025 3230252d     stat....%04d-%02
   34344:	30252d64 25546432 3a643230 64323025     d-%02dT%02d:%02d
   34354:	3230253a 30252e64 00006436 30256325     :%02d.%06d..%c%0
   34364:	253a6432 00643230                       2d:%02d.

0003436c <month_days>:
   3436c:	0000001f 0000001c 0000001f 0000001e     ................
   3437c:	0000001f 0000001e 0000001f 0000001f     ................
   3438c:	0000001e 0000001f 0000001e 0000001f     ................

0003439c <streamer_cfg_console>:
   3439c:	0001e91b 0001e90f 5f656c62 00747461     ........ble_att.

000343ac <ble_att_rx_dispatch>:
   343ac:	00000001 0001f00b 00000002 00020649     ............I...
   343bc:	00000003 0001f0b5 00000004 000206dd     ................
   343cc:	00000005 0001f151 00000006 0002074b     ....Q.......K...
   343dc:	00000007 0001f1e9 00000008 000207c7     ................
   343ec:	00000009 0001f267 0000000a 0002086d     ....g.......m...
   343fc:	0000000b 0001f303 0000000c 000208eb     ................
   3440c:	0000000d 0001f341 0000000e 0002096d     ....A.......m...
   3441c:	0000000f 0001f38f 00000010 000209ab     ................
   3442c:	00000011 0001f3e7 00000012 00020a6d     ............m...
   3443c:	00000013 0001f4dd 00000016 00020b53     ............S...
   3444c:	00000017 0001f549 00000018 00020c05     ....I...........
   3445c:	00000019 0001f5b1 0000001b 00020cb9     ................
   3446c:	0000001d 00020cf7 0000001e 0001f63d     ............=...
   3447c:	00000052 00020adb 5f656c62 5f747461     R.......ble_att_
   3448c:	5f727673 72746e65 6f705f79 00006c6f     svr_entry_pool..
   3449c:	5f656c62 5f747461 5f727673 70657270     ble_att_svr_prep
   344ac:	746e655f 705f7972 006c6f6f 6e756f63     _entry_pool.coun
   344bc:	64253d74 00000020 72746e65 64252d79     t=%d ...entry-%d
   344cc:	64617b3d 745f7264 3d657079 61206425     ={addr_type=%d a
   344dc:	3d726464 00000000 0000207d 63736964     ddr=....} ..disc
   344ec:	646f6d5f 64253d65 00000000 72696420     _mode=%d.... dir
   344fc:	5f746365 72646461 7079745f 64253d65     ect_addr_type=%d
   3450c:	72696420 5f746365 72646461 0000003d      direct_addr=...
   3451c:	76646120 6168635f 6c656e6e 70616d5f      adv_channel_map
   3452c:	2064253d 5f6e776f 72646461 7079745f     =%d own_addr_typ
   3453c:	64253d65 76646120 6c69665f 5f726574     e=%d adv_filter_
   3454c:	696c6f70 253d7963 64612064 74695f76     policy=%d adv_it
   3455c:	6d5f6c76 253d6e69 64612064 74695f76     vl_min=%d adv_it
   3456c:	6d5f6c76 253d7861 00000064 61727564     vl_max=%d...dura
   3457c:	6e6f6974 726f663d 72657665 00000000     tion=forever....
   3458c:	61727564 6e6f6974 6d64253d 00000073     duration=%dms...
   3459c:	5f6e776f 72646461 7079745f 64253d65     own_addr_type=%d
   345ac:	6c696620 5f726574 696c6f70 253d7963      filter_policy=%
   345bc:	61702064 76697373 64253d65 6d696c20     d passive=%d lim
   345cc:	64657469 2064253d 746c6966 645f7265     ited=%d filter_d
   345dc:	696c7075 65746163 64253d73 00000020     uplicates=%d ...
   345ec:	72656570 6464615f 79745f72 253d6570     peer_addr_type=%
   345fc:	65702064 615f7265 3d726464 00000000     d peer_addr=....
   3460c:	61637320 74695f6e 253d6c76 63732064      scan_itvl=%d sc
   3461c:	775f6e61 6f646e69 64253d77 76746920     an_window=%d itv
   3462c:	696d5f6c 64253d6e 76746920 616d5f6c     l_min=%d itvl_ma
   3463c:	64253d78 74616c20 79636e65 2064253d     x=%d latency=%d 
   3464c:	65707573 73697672 5f6e6f69 656d6974     supervision_time
   3465c:	3d74756f 6d206425 635f6e69 656c5f65     out=%d min_ce_le
   3466c:	64253d6e 78616d20 5f65635f 3d6e656c     n=%d max_ce_len=
   3467c:	6f206425 615f6e77 5f726464 65707974     %d own_addr_type
   3468c:	0064253d 6e6e6f63 69746365 70206e6f     =%d.connection p
   3469c:	6d617261 72657465 64707520 3b657461     arameter update;
   346ac:	6e6f6320 61685f6e 656c646e 2064253d      conn_handle=%d 
   346bc:	6c767469 6e696d5f 2064253d 6c767469     itvl_min=%d itvl
   346cc:	78616d5f 2064253d 6574616c 3d79636e     _max=%d latency=
   346dc:	73206425 72657075 69736976 745f6e6f     %d supervision_t
   346ec:	6f656d69 253d7475 696d2064 65635f6e     imeout=%d min_ce
   346fc:	6e656c5f 2064253d 5f78616d 6c5f6563     _len=%d max_ce_l
   3470c:	253d6e65 00000064 20504147 636f7270     en=%d...GAP proc
   3471c:	72756465 6e692065 61697469 3a646574     edure initiated:
   3472c:	74657320 69687720 696c6574 203b7473      set whitelist; 
   3473c:	00000000 20504147 636f7270 72756465     ....GAP procedur
   3474c:	6e692065 61697469 3a646574 76646120     e initiated: adv
   3475c:	69747265 203b6573 00000000 746e6f63     ertise; ....cont
   3476c:	6c6c6f72 72207265 726f7065 20646574     roller reported 
   3477c:	61766e69 2064696c 6f727265 6f632072     invalid error co
   3478c:	69206564 6f63206e 6f636e6e 656c706d     de in conncomple
   3479c:	65206574 746e6576 7525203a 00000000     te event: %u....
   347ac:	20504147 636f7270 72756465 6e692065     GAP procedure in
   347bc:	61697469 3a646574 6f747320 64612070     itiated: stop ad
   347cc:	74726576 6e697369 000a2e67 20504147     vertising...GAP 
   347dc:	636f7270 72756465 6e692065 61697469     procedure initia
   347ec:	3a646574 73696420 65766f63 203b7972     ted: discovery; 
   347fc:	00000000 20504147 636f7270 72756465     ....GAP procedur
   3480c:	6e692065 61697469 3a646574 6e6f6320     e initiated: con
   3481c:	7463656e 0000203b 20504147 636f7270     nect; ..GAP proc
   3482c:	72756465 6e692065 61697469 3a646574     edure initiated:
   3483c:	6e616320 206c6563 6e6e6f63 69746365      cancel connecti
   3484c:	000a6e6f 20504147 636f7270 72756465     on..GAP procedur
   3485c:	6e692065 61697469 3a646574 72657420     e initiated: ter
   3486c:	616e696d 63206574 656e6e6f 6f697463     minate connectio
   3487c:	63203b6e 5f6e6e6f 646e6168 253d656c     n; conn_handle=%
   3488c:	63682064 65725f69 6e6f7361 0a64253d     d hci_reason=%d.
   3489c:	00000000 20504147 636f7270 72756465     ....GAP procedur
   348ac:	6e692065 61697469 3a646574 00000020     e initiated: ...
   348bc:	5f656c62 5f706167 61647075 00006574     ble_gap_update..
   348cc:	5f656c62 00706167                       ble_gap.

000348d4 <ble_gap_conn_params_dflt>:
   348d4:	00100010 00280018 01000000 00000000     ......(.........
   348e4:	54544147 6f727020 75646563 69206572     GATT procedure i
   348f4:	6974696e 64657461 7325203a 00000000     nitiated: %s....
   34904:	646e6966 636e6920 6564756c 65732064     find included se
   34914:	63697672 203b7365 00000000 72617473     rvices; ....star
   34924:	61685f74 656c646e 2064253d 5f646e65     t_handle=%d end_
   34934:	646e6168 253d656c 00000a64 63736964     handle=%d...disc
   34944:	7265766f 6c6c6120 61686320 74636172     over all charact
   34954:	73697265 73636974 0000203b 63736964     eristics; ..disc
   34964:	7265766f 6c6c6120 73656420 70697263     over all descrip
   34974:	73726f74 0000203b 5f726863 5f6c6176     tors; ..chr_val_
   34984:	646e6168 253d656c 6e652064 61685f64     handle=%d end_ha
   34994:	656c646e 0a64253d 00000000 64616572     ndle=%d.....read
   349a4:	0000203b 5f747461 646e6168 253d656c     ; ..att_handle=%
   349b4:	00000a64 64616572 6e6f6c20 00203b67     d...read long; .
   349c4:	0000002c 64616572 6c756d20 6c706974     ,...read multipl
   349d4:	00203b65 5f747461 646e6168 3d73656c     e; .att_handles=
   349e4:	00000000 64257325 00000000 74697277     ....%s%d....writ
   349f4:	6f6e2065 70737220 0000203b 74697277     e no rsp; ..writ
   34a04:	00203b65 5f747461 646e6168 253d656c     e; .att_handle=%
   34a14:	656c2064 64253d6e 0000000a 74697277     d len=%d....writ
   34a24:	6f6c2065 203b676e 00000000 74697277     e long; ....writ
   34a34:	65722065 6261696c 203b656c 00000000     e reliable; ....
   34a44:	69746f6e 203b7966 00000000 69646e69     notify; ....indi
   34a54:	65746163 0000203b 63736964 7265766f     cate; ..discover
   34a64:	72657320 65636976 20796220 64697575      service by uuid
   34a74:	7575203b 003d6469 63736964 7265766f     ; uuid=.discover
   34a84:	61686320 74636172 73697265 73636974      characteristics
   34a94:	20796220 64697575 0000203b 72617473      by uuid; ..star
   34aa4:	61685f74 656c646e 2064253d 5f646e65     t_handle=%d end_
   34ab4:	646e6168 253d656c 75752064 003d6469     handle=%d uuid=.
   34ac4:	64616572 20796220 64697575 0000203b     read by uuid; ..
   34ad4:	68637865 65676e61 75746d20 0000000a     exchange mtu....
   34ae4:	63736964 7265766f 6c6c6120 72657320     discover all ser
   34af4:	65636976 00000a73 5f656c62 74746167     vices...ble_gatt
   34b04:	72705f63 705f636f 006c6f6f 5f656c62     c_proc_pool.ble_
   34b14:	74746167 00000063                       gattc...

00034b1c <ble_gattc_err_dispatch>:
   34b1c:	0002308b 000230db 00023137 000231db     .0...0..71...1..
   34b2c:	0002323b 00023297 000232fb 0002339b     ;2...2...2...3..
   34b3c:	00023413 0002347f 000234eb 000237d1     .4...4...4...7..
   34b4c:	0002387b 0002385b 000241c5              {8..[8...A..

00034b58 <ble_gattc_resume_dispatch>:
   34b58:	00000000 00023d55 00023cd1 00023c2d     ....U=...<..-<..
   34b68:	00023ba5 00023b29 00023aad 00000000     .;..);...:......
   34b78:	00000000 00023a0b 00000000 00000000     .....:..........
   34b88:	000239c1 0002392f 00000000              .9../9......

00034b94 <ble_gattc_rx_exec_entries>:
   34b94:	0000000c 00023539 0000000d 000235a5     ....95.......5..

00034ba4 <ble_gattc_rx_prep_entries>:
   34ba4:	0000000c 0002450b 0000000d 0002447f     .....E.......D..

00034bb4 <ble_gattc_rx_read_rsp_entries>:
   34bb4:	00000007 000233a5 00000009 00023a31     .....3......1:..
   34bc4:	00000003 0002440f                       .....D..

00034bcc <ble_gattc_rx_read_type_complete_entries>:
   34bcc:	00000003 00023c53 00000004 00023bcb     ....S<.......;..
   34bdc:	00000005 00023b4f 00000008 0002341d     ....O;.......4..

00034bec <ble_gattc_rx_read_type_elem_entries>:
   34bec:	00000003 000242e7 00000004 0002426b     .....B......kB..
   34bfc:	00000005 00024375 00000008 00024181     ....uC.......A..

00034c0c <ble_gattc_tmo_dispatch>:
   34c0c:	0002307d 000230cd 00023129 000231cd     }0...0..)1...1..
   34c1c:	0002322d 00023289 000232ed 0002338d     -2...2...2...3..
   34c2c:	00023405 00023471 000234dd 000237c5     .4..q4...4...7..
   34c3c:	0002352d 00023599 00023771 5f656c62     -5...5..q7..ble_
   34c4c:	74746167 6c635f73 66635f74 6f705f67     gatts_clt_cfg_po
   34c5c:	00006c6f 5f656c62 74746167 00000073     ol..ble_gatts...
   34c6c:	6c636e69 64656475 72657320 65636976     included service
   34c7c:	0000000a 20733225 73323125 0a732520     ....%2s %12s %s.
   34c8c:	00000000 72747461 6e616820 00656c64     ....attr handle.
   34c9c:	20733225 73323125 0a642520 00000000     %2s %12s %d.....
   34cac:	0000005b 0000007c 72616863 65746361     [...|...characte
   34cbc:	74736972 000a6369 5f666564 646e6168     ristic..def_hand
   34ccc:	0000656c 5f6c6176 646e6168 0000656c     le..val_handle..
   34cdc:	5f6e696d 5f79656b 657a6973 00000000     min_key_size....
   34cec:	20636363 63736564 74706972 000a726f     ccc descriptor..
   34cfc:	6f636573 7261646e 00000079 6d697270     secondary...prim
   34d0c:	00797261 73207325 69767265 000a6563     ary.%s service..
   34d1c:	5f646e65 646e6168 0000656c 44414552     end_handle..READ
   34d2c:	00000000 44414552 434e455f 00000000     ....READ_ENC....
   34d3c:	44414552 5455415f 004e4548 44414552     READ_AUTHEN.READ
   34d4c:	5455415f 00524f48 54495257 4e455f45     _AUTHOR.WRITE_EN
   34d5c:	00000043 54495257 55415f45 4e454854     C...WRITE_AUTHEN
   34d6c:	00000000 54495257 55415f45 524f4854     ....WRITE_AUTHOR
   34d7c:	00000000 414f5242 53414344 00000054     ....BROADCAST...
   34d8c:	54495257 4f4e5f45 5053525f 00000000     WRITE_NO_RSP....
   34d9c:	49544f4e 00005946 49444e49 45544143     NOTIFY..INDICATE
   34dac:	00000000 48545541 4749535f 52575f4e     ....AUTH_SIGN_WR
   34dbc:	00455449 494c4552 454c4241 4952575f     ITE.RELIABLE_WRI
   34dcc:	00004554 5f585541 54495257 00000045     TE..AUX_WRITE...

00034ddc <ble_gatt_chr_f_names>:
   34ddc:	00034d80 00034d28 00034d8c 00034dd4     .M..(M...M...M..
   34dec:	00034d9c 00034da4 00034db0 00034dc0     .M...M...M...M..
   34dfc:	00034dd0 00034d30 00034d3c 00034d48     .M..0M..<M..HM..
   34e0c:	00034d54 00034d60 00034d70 00000000     TM..`M..pM......

00034e1c <ble_gatt_dsc_f_names>:
   34e1c:	00034d28 00034dd4 00034d30 00034d3c     (M...M..0M..<M..
   34e2c:	00034d48 00034d54 00034d60 00034d70     HM..TM..`M..pM..
   34e3c:	00000000 6c696146 74206465 6572206f     ....Failed to re
   34e4c:	726f7473 52492065 6620734b 206d6f72     store IRKs from 
   34e5c:	726f7473 73203b65 75746174 64253d73     store; status=%d
   34e6c:	0000000a 5f656c62 685f7368 655f6963     ....ble_hs_hci_e
   34e7c:	6f705f76 00006c6f 5f656c62 00007368     v_pool..ble_hs..
   34e8c:	5f656c62 635f7368 5f6e6e6f 6c6f6f70     ble_hs_conn_pool
   34e9c:	00000000                                ....

00034ea0 <ble_hs_conn_null_addr>:
	...
   34ea8:	5f656c62 685f7368 665f6963 00676172     ble_hs_hci_frag.

00034eb8 <ble_hs_hci_evt_dispatch>:
   34eb8:	0000003e 00027d99 00000013 00027e7d     >....}......}~..
   34ec8:	00000005 00027e4b 00000008 00027d81     ....K~.......}..
   34ed8:	00000030 00027d8d 00000010 00027e37     0....}......7~..

00034ee8 <ble_hs_hci_evt_le_dispatch>:
   34ee8:	00000000 00028079 00027f75 00028107     ....y...u.......
   34ef8:	000280f3 00027e2b 000280df 00000000     ....+~..........
	...
   34f10:	00027ff3 00027ef3 00027edf 00027e0b     .....~...~...~..
   34f20:	00027e0f 00027e13 00027e17 00027e1f     .~...~...~...~..
   34f30:	00027e23 00027e27 00000000 00000000     #~..'~..........
	...
   34f48:	00027e1b 65766461 73697472 74207265     .~..advertiser t
   34f58:	72777078 74756f20 20666f20 676e6172     xpwr out of rang
   34f68:	00000a65 6c696166 74206465 6f63206f     e...failed to co
   34f78:	6769666e 20657275 74736572 6465726f     nfigure restored
   34f88:	4b524920 0000000a                        IRK....

00034f90 <ble_hs_misc_null_addr>:
	...
   34f98:	16e28def 0d43ec4f 34dd5bbf b81e53c0     ....O.C..[.4.S..
   34fa8:	00000000 746e6f43 6c6c6f72 64207265     ....Controller d
   34fb8:	6e73656f 73207427 6f707075 4c207472     oesn't support L
   34fc8:	00000a45 75716552 64657269 6e6f6320     E...Required con
   34fd8:	6c6f7274 2072656c 73726576 206e6f69     troller version 
   34fe8:	34207369 2820302e 000a2936 5f656c62     is 4.0 (6)..ble_
   34ff8:	735f7368 3a706f74 69616620 2064656c     hs_stop: failed 
   35008:	74206f74 696d7265 6574616e 6e6f6320     to terminate con
   35018:	7463656e 3b6e6f69 3d637220 000a6425     nection; rc=%d..
   35028:	5f656c62 735f7368 5f706f74 6d726574     ble_hs_stop_term
   35038:	74616e69 69745f65 756f656d 62635f74     inate_timeout_cb
   35048:	2064252c 6e6e6f63 69746365 73286e6f     ,%d connection(s
   35058:	74732029 206c6c69 0a207075 00000000     ) still up .....
   35068:	5f656c62 6163326c 68635f70 705f6e61     ble_l2cap_chan_p
   35078:	006c6f6f 5f656c62 6163326c 00000070     ool.ble_l2cap...
   35088:	5f656c62 6163326c 69735f70 72705f67     ble_l2cap_sig_pr
   35098:	705f636f 006c6f6f                       oc_pool.

000350a0 <ble_l2cap_sig_dispatch>:
   350a0:	00000000 000291b1 00000000 00029049     ............I...
   350b0:	00000000 00029049 00029049 00029049     ....I...I...I...
   350c0:	00000000 00029049 00000000 00029049     ....I.......I...
   350d0:	00000000 00029049 00000000 00029049     ....I.......I...
   350e0:	00000000 00029049 00029295 000291c5     ....I...........
   350f0:	00029049 00029049 00029049 00029049     I...I...I...I...
   35100:	00029049 00029049 00029049 30257830     I...I...I...0x%0
   35110:	00786834 30257830 00786c38 78323025     4hx.0x%08lx.%02x
   35120:	78323025 78323025 78323025 3230252d     %02x%02x%02x-%02
   35130:	32302578 30252d78 30257832 252d7832     x%02x-%02x%02x-%
   35140:	25783230 2d783230 78323025 78323025     02x%02x-%02x%02x
   35150:	78323025 78323025 78323025 78323025     %02x%02x%02x%02x
   35160:	00000000                                ....

00035164 <ble_uuid_base>:
   35164:	5f9b34fb 80000080 00001000 00000000     .4._............

00035174 <ble_svc_ans_defs>:
   35174:	00000001 100006fc 00000000 10000714     ................
	...

00035194 <ble_svc_gap_defs>:
   35194:	00000001 100007a4 00000000 100007b0     ................
	...

000351b4 <ble_svc_gatt_defs>:
   351b4:	00000001 10000818 00000000 10000820     ............ ...
	...
   351d4:	6c6f7061 5f336f6c 5f656c62 5f696368     apollo3_ble_hci_
   351e4:	6c6f6f70 6c63615f 00000000 6c6f7061     pool_acl....apol
   351f4:	5f336f6c 5f656c62 5f696368 6c6f6f70     lo3_ble_hci_pool
   35204:	7476655f 0069685f 6c6f7061 5f336f6c     _evt_hi.apollo3_
   35214:	5f656c62 5f696368 6c6f6f70 7476655f     ble_hci_pool_evt
   35224:	006f6c5f 6c6f7061 5f336f6c 5f656c62     _lo.apollo3_ble_
   35234:	5f696368 6c6f6f70 646d635f 6d656d5f     hci_pool_cmd_mem
   35244:	6c6f6f70 00000000                       pool....

0003524c <sysdown_cbs>:
   3524c:	0002ebd9 00000000                       ........

00035254 <sysflash_map_dflt>:
   35254:	00000000 0000c000 00008000 00000001     ................
   35264:	00014000 00038000 00000002 0004c000     .@..............
   35274:	00038000 00000003 00084000 00002000     .........@... ..
   35284:	00000010 00086000 00004000 00000011     .....`...@......
   35294:	0008a000 00004000 68323025 00007868     .....@..%02hhx..
   352a4:	00006325 0063255c 3025755c 5c586c34     %c..\%c.\u%04lX\
   352b4:	34302575 0000586c 3025755c 00586c34     u%04lX..\u%04lX.
   352c4:	0000007b 0000007d 736c6166 00000065     {...}...false...
   352d4:	65757274 00000000 0000205f 756c6c25     true...._ ..%llu
   352e4:	00000000 6c6c252d 00000075 3438312d     ....-%llu...-184
   352f4:	34373634 33373034 35393037 31363135     4674407370955161
   35304:	00000036 00002768 00000027 00000022     6...h'..'..."...
   35314:	756c6c25 00000028 00000029 706d6973     %llu(...)...simp
   35324:	2528656c 29756868 00000000 6c6c756e     le(%hhu)....null
   35334:	00000000 65646e75 656e6966 00000064     ....undefined...
   35344:	61766e69 0064696c 0000202c 74726175     invalid., ..uart
   35354:	00000031                                1...

00035358 <os_bsp_uart0_cfg>:
   35358:	26251716                                ..%&

0003535c <os_bsp_uart1_cfg>:
   3535c:	2d2c2423                                #$,-

00035360 <ccitt_table>:
   35360:	80050000 000a800f 001e801b 80110014     ................
   35370:	00368033 8039003c 802d0028 00228027     3.6.<.9.(.-.'.".
   35380:	00668063 8069006c 807d0078 00728077     c.f.l.i.x.}.w.r.
   35390:	80550050 005a805f 004e804b 80410044     P.U._.Z.K.N.D.A.
   353a0:	00c680c3 80c900cc 80dd00d8 00d280d7     ................
   353b0:	80f500f0 00fa80ff 00ee80eb 80e100e4     ................
   353c0:	80a500a0 00aa80af 00be80bb 80b100b4     ................
   353d0:	00968093 8099009c 808d0088 00828087     ................
   353e0:	01868183 8189018c 819d0198 01928197     ................
   353f0:	81b501b0 01ba81bf 01ae81ab 81a101a4     ................
   35400:	81e501e0 01ea81ef 01fe81fb 81f101f4     ................
   35410:	01d681d3 81d901dc 81cd01c8 01c281c7     ................
   35420:	81450140 014a814f 015e815b 81510154     @.E.O.J.[.^.T.Q.
   35430:	01768173 8179017c 816d0168 01628167     s.v.|.y.h.m.g.b.
   35440:	01268123 8129012c 813d0138 01328137     #.&.,.).8.=.7.2.
   35450:	81150110 011a811f 010e810b 81010104     ................
   35460:	03068303 8309030c 831d0318 03128317     ................
   35470:	83350330 033a833f 032e832b 83210324     0.5.?.:.+...$.!.
   35480:	83650360 036a836f 037e837b 83710374     `.e.o.j.{.~.t.q.
   35490:	03568353 8359035c 834d0348 03428347     S.V.\.Y.H.M.G.B.
   354a0:	83c503c0 03ca83cf 03de83db 83d103d4     ................
   354b0:	03f683f3 83f903fc 83ed03e8 03e283e7     ................
   354c0:	03a683a3 83a903ac 83bd03b8 03b283b7     ................
   354d0:	83950390 039a839f 038e838b 83810384     ................
   354e0:	82850280 028a828f 029e829b 82910294     ................
   354f0:	02b682b3 82b902bc 82ad02a8 02a282a7     ................
   35500:	02e682e3 82e902ec 82fd02f8 02f282f7     ................
   35510:	82d502d0 02da82df 02ce82cb 82c102c4     ................
   35520:	02468243 8249024c 825d0258 02528257     C.F.L.I.X.].W.R.
   35530:	82750270 027a827f 026e826b 82610264     p.u...z.k.n.d.a.
   35540:	82250220 022a822f 023e823b 82310234      .%./.*.;.>.4.1.
   35550:	02168213 8219021c 820d0208 02028207     ................

00035560 <am_ble_buffer_patch_data>:
   35560:	0d382200 0000ffff 00093532 00093965     ."8.....25..e9..
   35570:	0009452b 000948a9 000953f7 00095c1a     +E...H...S...\..
   35580:	0009641c 00096afd 0009751a 00097bde     .d...j...u...{..
   35590:	0009854b 00098bb3 0009951f 00099c4f     K...........O...
   355a0:	0009a2f5 0009ad1e 00000000 00000000     ................
	...
   355dc:	47004800 20004841 bf00bf00 b005bf00     .H.GAH. ........
   355ec:	0000bdf0 20006790 00002710 20001000     .....g. .'..... 
   355fc:	00001388 20001018 000003ff b0ffb5ff     ....... ........
   3560c:	4607b082 4616460c 48302500 99846006     ...F.F.F.%0H.`..
   3561c:	28eed004 2003d002 bd707360 28f17c60     ...(... `sp.`|.(
   3562c:	28f2d006 28f3d004 2002d002 bd707360     ...(...(... `sp.
   3563c:	73602000 0000bd70 20001018 2000100a     . `sp...... ... 
   3564c:	47004800 20004d81 28008870 2014d116     .H.G.M. p..(... 
   3565c:	200b2101 fcc6f7ed 0000bd10 47004800     .!. .........H.G
   3566c:	20004e15 d0022800 28017808 7808d01a     .N. .(...x.(...x
   3567c:	d0172802 d00e2800 d00c2801 fed9f7f0     .(...(...(......
   3568c:	d0082800 f816f000 f7ef2032 f7f0f851     .(......2 ..Q...
   3569c:	e000e180 e000e100 68014802 43912228     .........H.h(".C
   356ac:	47706001 52c00000 47004800 20004881     .`pG...R.H.G.H. 
   356bc:	47706001 52c00000 68014802 43912250     .`pG...R.H.hP".C
   356cc:	47706001 52c00000 47004800 200048a1     .`pG...R.H.G.H. 
   356dc:	508040c0 460bb510 24024611 4350220c     .@.P...F.F.$."PC
   356ec:	18804a06 d0062800 2a006842 4618d003     .J...(..Bh.*...F
   356fc:	fb10f000 46204604 0000bd10 00015698     .....F F.....V..
   3570c:	47084900 20004e99 fd5cf7f3 5b00207c     .I.G.N. ..\.| .[
   3571c:	1940f80b 2900b2c1 3440d003 f7f98fa0     ..@....)..@4....
   3572c:	bd70fd73 e7e12101 47084900 20005081     s.p..!...I.G.P. 
   3573c:	8810f380 f7f34628 2100f94d 8810f381     ....(F..M..!....
   3574c:	d00f2800 460a8881 2a463a0a 1c64d20c     .(.....F.:F*..d.
   3575c:	03d20bd2 84c2430a f3802000 47708810     .....C... ....pG
   3576c:	00000466 50804440 47084900 200050ed     f...@D.P.I.G.P. 
   3577c:	8f809011 9812900e 900d3008 30309812     .........0....00
   3578c:	9812900c 900b3044 900a2000 980c2501     ....D0... ...%..
   3579c:	f8a4f007 d02d2800 bf00bf00 bf00bf00     .....(-.........
   357ac:	bf00bf00 bf00bf00 bf00bf00 9a0ce091     ................
   357bc:	232220ff 300a4611 fb9ef7fd 88617007     . "#.F.0.....pa.
   357cc:	88a181c1 88e18201 892180c1 7aa18101     ..........!....z
   357dc:	e02301c0 9802e077 01401a08 42900940     ..#.w.....@.@..B
   357ec:	9802d91c 01401a40 42400940 9802e016     ....@.@.@.@B....
   357fc:	bf00bf00 bf00bf00 bf00bf00 bf00bf00     ................
   3580c:	2000bf00 9802e00a 01401a38 42900940     ... ....8.@.@..B
   3581c:	607565c1 84b88960 20019a04 88607550     .eu``...... Pu`.
   3582c:	9a0485f8 75107860 47004800 200048e1     ....`x.u.H.G.H. 
   3583c:	0000bf00 8d3a8960 b2801e40 d1034282     ....`.:.@....B..
   3584c:	43012008 71819803 bdf0b007 20006160     . .C...q....`a. 
	...
   3586c:	00000021 00000000 00000001 00000000     !...............
   3587c:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   3588c:	00002001 00007d89 00002002 000076fd     . ...}... ...v..
   3589c:	8c001810 9b080bc0 42181e5b 9808d105     ........[..B....
   358ac:	47004800 200048c1 0000bf00 18d24b80     .H.G.H. .....K..
   358bc:	20018450 8810f380 280068b8 2000d016     P.. .....h.(... 
   358cc:	d0192800 28006b38 2000d012 d0132800     .(..8k.(... .(..
   358dc:	1900fc9f 68594b06 088a1809 1b090094     .....KYh........
   358ec:	01416059 18801a08 0000bd10 2000602c     Y`A.........,`. 
   358fc:	200067b8 47084900 20005579 6a80217d     .g. .I.GyU. }!.j
   3590c:	42880209 1a40d302 e0002201 2a001a08     ...B..@..".....*
   3591c:	1a081929 f7ee4621 b288feb1 3028bd70     )...!F......p.(0
   3592c:	7e003060 b4104770 32404602 24068cd3     `0.~pG...F@2...$
   3593c:	8d144363 b29b18e3 30608493 46187541     cC........`0Au.F
   3594c:	4770bc10 30603028 28007d40 20002000     ..pG(0`0@}.(. . 
   3595c:	07007940 2004d502 e0347060 f0056928     @y..... `p4.(i..
   3596c:	2800fb51 2002d002 e02c7060 f0039803     Q..(... `p,.....
   3597c:	2804fe4d 4668d107 20027901 d0054388     M..(..hF.y. .C..
   3598c:	28002000 2000d004 e01c7060 e7f82001     . .(... `p... ..
   3599c:	20006758 50800040 200067b8 04000000     Xg. @..P.g. ....
   359ac:	200067c8 47084900 200055cd 207d6a81     .g. .I.G.U. .j} 
   359bc:	42810200 1a08d302 e0002201 2a001a40     ...B....."..@..*
   359cc:	4360d004 fca4f7eb e0031a20 f7eb4360     ..`C.... ...`C..
   359dc:	2400b5f8 7800481c d12d2800 68704e1b     ...$.H.x.(-..Nph
   359ec:	28004d1b 4f1bda09 200b2101 210147b8     .M.(...O.!. .G.!
   359fc:	47a8200b 28006870 2100dbf6 47a8200b     . .Gph.(...!. .G
   35a0c:	200a4e15 270547b0 69f8073f 0d2d0505     .N. .G.'?..i..-.
   35a1c:	d1042d00 68c04811 0e800580 2c64d00c     .-...H.h......d,
   35a2c:	2014d20a 69f847b0 0d000500 d90442a8     ... .G.i.....B..
   35a3c:	1c644605 d3f42c64 4903bdf8 70082001     .Fd.d,.....I. .p
   35a4c:	70084907 0000bdf8 20001001 45800080     .I.p....... ...E
   35a5c:	00002455 00002391 00003ba1 52c00000     U$...#...;.....R
   35a6c:	20001000 4818b510 29406801 2140d201     ... ...H.h@)..@!
   35a7c:	7a806001 d00107c0 bd102000 47804813     .`.z..... ...H.G
   35a8c:	07002005 491269c0 d0040500 28017808     . ...i.I.....x.(
   35a9c:	2802d014 7808d012 d0082800 d0062801     ...(...x.(...(..
   35aac:	d0042802 4780480b 2032490b 490b4788     .(...H.G.I2 .G.I
   35abc:	47882004 4780480a bd102000 20044909     . .G.H.G. ...I. 
   35acc:	20014788 0000bd10 200067b8 00009305     .G. .....g. ....
   35adc:	20001018 00014b25 00003ba1 00014441     ... %K...;..AD..
   35aec:	00014aaf 00014489 b08db5f0 496c4604     .J...D.......FlI
   35afc:	4788a804 5b00207c 25009003 90022000     ...G| .[...%. ..
   35b0c:	f3802001 6c608810 f3812100 46268810     . ....`l.!....&F
   35b1c:	28003660 4621d06b 910c3144 910b3928     `6.(k.!FD1..(9..
   35b2c:	910a3164 00ca8881 1851495e 0bc98cc9     d1......^IQ.....
   35b3c:	d05c2900 f3812101 68008810 495a9001     .)\..!.....h..ZI
   35b4c:	4788980c 69e04607 d0032800 28002000     ...G.F.i.(... .(
   35b5c:	e008d002 e7fa2001 980b4953 28004788     ..... ..SI...G.(
   35b6c:	4952d001 20004788 8810f380 494d88b8     ..RI.G. ......MI
   35b7c:	184000c0 0bd28cc2 84c203d2 280788b8     ..@............(
   35b8c:	7e30d21e 76301e40 f3802001 6b208810     ..0~@.0v. .... k
   35b9c:	d0132800 28002000 980ad005 798021fb     .(... .(.....!.y
   35bac:	990a4008 49417188 47884638 f3802000     .@...qAI8F.G. ..
   35bbc:	4a3f8810 98037b39 e0154790 e7ea2001     ..?J9{...G... ..
   35bcc:	d90f2809 184000c0 0a008d00 49399000     .(....@.......9I
   35bdc:	47884638 d0072800 28009800 1c6dd004     8F.G.(.....(..m.
   35bec:	e001b2ed b2ed1c6d 28009801 9803d19a     ....m......(....
   35bfc:	d00e2807 d00c2d00 f3802001 7e308810     .(...-... ....0~
   35c0c:	76301b40 f3802000 4a2b8810 98034629     @.0v. ....+J)F..
   35c1c:	20014790 8810f380 4f234828 47b89009     .G. ....(H#O...G
   35c2c:	20004604 8810f380 d0360020 88e04e1f     .F. .... .6..N..
   35c3c:	42889903 2807d112 7aa1d007 4f209100     ...B...(...z.. O
   35c4c:	7b227ae3 47b88921 4b1ee005 89207921     .z"{!..G...K!y .
   35c5c:	4798462a 46209002 e00347b0 46214a1a     *F.G.. F.G...J!F
   35c6c:	4790a804 f3802001 490f8810 47889809     ...G. .....I...G
   35c7c:	00204604 9804d10c d0032800 28002000     .F ......(... .(
   35c8c:	e005d002 e7fa2001 a9044a10 47909809     ..... ...J.....G
   35c9c:	f3802000 2c008810 9802d1c9 bdf0b00d     . .....,........
   35cac:	000038b5 50804440 00003945 000093a5     .8..@D.PE9......
   35cbc:	0000b809 0000565d 0000b705 200061b8     ....]V.......a. 
   35ccc:	0000b729 00012235 00003967 0000390f     )...5"..g9...9..
   35cdc:	2400b5f1 4e164d15 f3802001 98008810     ...$.M.N. ......
   35cec:	210047a8 8810f381 d0172800 460a8881     .G.!.....(.....F
   35cfc:	2a463a0a 00c9d214 8d091989 21010a0f     .:F*...........!
   35d0c:	8810f381 4788490b d0032800 d0012f00     .....I.G.(.../..
   35d1c:	b2e41c64 f3802000 e7dd8810 bdf84620     d.... ...... F..
   35d2c:	29491fc9 4904d3d8 e7d54788 00003945     ..I)...I.G..E9..
   35d3c:	50804440 0000565d 000093a5 b092b5f1     @D.P]V..........
   35d4c:	30409812 8f809011 9812900e 900d3008     ..@0.........0..
   35d5c:	30309812 9812900c 900b3044 900a2000     ..00....D0... ..
   35d6c:	980c2501 2c006804 2000d003 d0022800     .%...h.,... .(..
   35d7c:	2001e093 980ee7fa 48f900c1 90101808     ... .......H....
   35d8c:	0bc08cc0 d06e2800 49f6980e 900f0080     .....(n....I....
   35d9c:	30a05808 20017946 d5190771 d0172c00     .X.0Fy. q....,..
   35dac:	06b04ff1 7b20d507 078047b8 2000d401     .O.... {.G..... 
   35dbc:	2001e006 7b20e004 07c047b8 2001d003     ... .. {.G..... 
   35dcc:	d0022800 2000e004 6824e7fa d1e82c00     .(..... ..$h.,..
   35ddc:	d0622800 22004be5 980c4621 68a64798     .(b..K."!F...G.h
   35dec:	a9094ae3 47904630 d1562800 4fdc88a0     .J..0F.G.(V....O
   35dfc:	19c000c0 49df8d40 20001841 7912aa08     ....@..IA.. ...y
   35e0c:	dd062a00 540a5c32 aa081c40 42907912     .*..2\.T@....y.B
   35e1c:	49d9dbf8 478868a0 980f49d2 30a05808     ...I.h.G.I...X.0
   35e2c:	07c07940 a908d003 1d007908 a8089009     @y.......y......
   35e3c:	98107901 02098d02 430ab2d2 21038502     .y.........C...!
   35e4c:	8d029810 430a438a 98118502 21008f80     .....C.C.......!
   35e5c:	19c000c0 980b84c1 28006800 2000d004     .........h.(... 
   35e6c:	d0032800 e018e010 e7f92001 88a1980b     .(....... ......
   35e7c:	00ca6840 888049c1 00c01851 8cc219c0     @h...I..Q.......
   35e8c:	03d20bd2 84c2430a 46214abd 4790980b     .....C...J!F...G
   35e9c:	30609812 1c497e01 98117601 28078f80     ..`0.~I..v.....(
   35eac:	990ed208 49af008a 31a05889 07497949     .......I.X.1IyI.
   35ebc:	2500d500 6809990d d01f2900 462a2100     ...%...h.)...!*F
   35ecc:	d077438a d2762807 48ae49af 90094788     .Cw..(v..I.H.G..
   35edc:	90082000 8f809811 48a20081 30a05840     . .........H@X.0
   35eec:	07c07940 90070fc0 6806980d d0092e00     @y.........h....
   35efc:	6830990d 28006008 e003d002 e7de2101     ..0h.`.(.....!..
   35f0c:	6048990d d07d2e00 90062000 90039812     ..H`..}.. ......
   35f1c:	9004a806 9b099f07 25089705 20005f75     ...........%u_. 
   35f2c:	90019002 90002001 8e429811 b2d44684     ..... ....B..F..
   35f3c:	46292001 b2893109 2f009f05 1d09d001     . )F.1...../....
   35f4c:	00c9b289 b2893108 8e3f4667 d205428f     .....1..gF?..B..
   35f5c:	05793f50 42a20e0c b2d4d200 dd0142a5     P?y....B.....B..
   35f6c:	00640864 1a6f4621 42971c62 1909db05     d.d.!Fo.b..B....
   35f7c:	b2c01c40 42971a6f 4298daf9 2500d901     @...o..B...B...%
   35f8c:	9904e034 4f817008 487e4981 46014788     4....p.O.I~H.G.F
   35f9c:	28009800 2000d012 7ab09000 0f800780     ...(... ...z....
   35fac:	d0092801 72882002 88c268f0 88809202     .(... .r.h......
   35fbc:	e0099001 e058e062 e7f42001 72882001     ....b.X.. ... .r
   35fcc:	19009802 9002b280 dd0142a5 e00072cc     .........B...r..
   35fdc:	980172cd 980280c8 1b288108 2d00b205     .r........(....-
   35fec:	2201dc22 98039b05 250147b8 d0202d00     "..".....G.%.- .
   35ffc:	7e004668 18099908 9108b2c9 1a089909     hF.~............
   3600c:	e000b280 9009e035 69c09812 d01a2800     ....5......i.(..
   3601c:	6a009812 98126006 20006206 98086030     ...j.`...b. 0`..
   3602c:	d913280a e0242500 9b052200 47b89803     .(...%$..".....G
   3603c:	980de7aa 28006800 990dd101 6030604e     .....h.(....N`0`
   3604c:	6006980d 9812e015 e7e461c6 6806980d     ...`.....a.....h
   3605c:	d0062e00 6830990d 28006008 990dd101     ......0h.`.(....
   3606c:	2e006048 e74fd000 4a4ae003 980b990d     H`....O...JJ....
   3607c:	2d004790 4948d002 4788980d 6800980b     .G.-..HI...G...h
   3608c:	d0032800 28002000 e04bd002 e7fa2001     .(... .(..K.. ..
   3609c:	8f809811 d2452807 30809812 280478c0     .....(E....0.x.(
   360ac:	493bd140 47884837 d03b2800 21008882     @.;I7H.G.(;....!
   360bc:	00d24b2b 855118d2 00c98881 8d8a18c9     +K....Q.........
   360cc:	0c640454 858c2200 00c98881 8d0c18c9     T.d.."..........
   360dc:	850cb2e4 24018881 18c900c9 08ad8d0d     .......$........
   360ec:	432500ad 8881850d 18c900c9 0be48ccc     ..%C............
   360fc:	84cc03e4 8884990b 00e56849 88894c1f     ........Ih...L..
   3610c:	00c9192c 8ccb18c9 03db0bdb 84cb4323     ,...........#C..
   3611c:	6809990b d00d2900 6849990b 990b6008     ...h.)....Ih.`..
   3612c:	60026048 6800980b d0062800 29002100     H`.`...h.(...!.)
   3613c:	e03cd005 6008990b 2101e7f1 2800e7f7     ..<....`...!...(
   3614c:	4a07d00a 00c98881 8cc91889 29000bc9     ...J...........)
   3615c:	6800d024 d1f52800 d0262800 0000e027     $..h.(...(&.'...
   3616c:	50804440 20006160 0000af81 00003817     @D.P`a. .....8..
   3617c:	00010341 50804000 000093a5 00000466     A....@.P....f...
   3618c:	00003967 200061e4 000039bb 00010011     g9...a. .9......
   3619c:	00003945 0000390f 000038b5 00ca8881     E9...9...8......
   361ac:	18514907 910ab289 2000e7d6 990a900a     .IQ........ ....
   361bc:	225a980e 4a034350 84811880 bdf0b013     ..Z"PC.J........
   361cc:	00000466 50804080 2300b410 46022114     f....@.P...#.!.F
   361dc:	4911434a 6809247d 42a10224 1b09d902     JC.I}$.h$..B....
   361ec:	e0002301 43481a61 18410081 0c0c0a88     .#..a.HC..A.....
   361fc:	0c4c1900 0d4c1900 0e4c1900 0fc91900     ..L...L...L.....
   3620c:	08c01840 d0012b00 e0011810 1e401a10     @....+........@.
   3621c:	bc101e40 00004770 20006054 2300b4f0     @...pG..T`. ...#
   3622c:	6be54c18 227d4918 02126809 d3024291     .L.k.I}".h...B..
   3623c:	23011a8a 1a52e000 43564606 435113f2     ...#..R..FVC..QC
   3624c:	261e1a71 104f434e 118f19f6 124919f6     q..&NCO.......I.
   3625c:	13ce1871 d0012b00 e0001a80 19421810     q....+........B.
   3626c:	008d0891 2b001b52 0143d004 18401a18     ....R..+..C...@.
   3627c:	e0031b80 1a180143 19801840 bcf063e2     ....C...@....c..
   3628c:	00004770 20006780 20006054              pG...g. T`. 

00036298 <am_ble_performance_copy_patch_data>:
   36298:	006e1100 00000400 00000000 01c50101     ..n.............
   362a8:	00000039 00000000 00000000 00000000     9...............
   362b8:	00000000 ffffffff 2000b570 8849490c     ........p.. .II.
   362c8:	188b4a0c 490c881a 24001c9b 022d2513     .J.....I...$.%-.
   362d8:	1c40540c dbfb42a8 2a002000 5c1cdd04     .T@..B... .*...\
   362e8:	1c40540c dbfa4290 47804804 bd702000     .T@..B...H.G. p.
   362f8:	20004800 20004802 20003500 000133af     .H. .H. .5. .3..
   36308:	b51f08a0 98002400 d243281d 44790001     .....$...(C...yD
   36318:	18497909 130e448f 40251a40 40404040     .yI..D..@.%@@@@@
   36328:	40404040 402a4040 2d404040 35403240     @@@@@@*@@@@-@2@5
   36338:	00404038 b2c09801 fa07f000 9802e02c     8@@.........,...
   36348:	9801b2c1 f000b2c0 e025f8b8 b2839806     ..........%.....
   36358:	b2829803 b2c19802 b2c09801 f971f000     ..............q.
   36368:	9801e01a f000b2c0 e015f90a f829f000     ..............).
   36378:	9801e012 f000b280 e00df962 fb3bf000     ........b.....;.
   36388:	f000e00a e007fb94 b2c09801 fac7f000     ................
   36398:	e0014604 43e42400 b0044620 b403bd10     .F...$.C F......
   363a8:	90014801 2739bd01 b4030000 90014801     .H....9'.....H..
   363b8:	2895bd01 b4030000 90014801 0101bd01     ...(.....H......
   363c8:	b4f00000 22432000 68510612 340124ff     ..... C"..Qh.$.4
   363d8:	60514321 03236851 60514319 05db23a3     !CQ`Qh#..CQ`.#..
   363e8:	08496819 60190049 6909492a 4d29b2ce     .hI.I..`*I.i..)M
   363f8:	88294f2a d30142b9 e00d2004 42b94f28     *O)..B... ..(O.B
   36408:	2003d301 4f26e008 d30142b9 e0032002     ... ..&O.B... ..
   36418:	42b94f25 2001d300 18394f24 7e093120     %O.B... $O9. 1.~
   36428:	da0942b1 dd012800 b2401e40 7a091839     .B...(..@.@.9..z
   36438:	19c00040 e00b8b00 da042804 42b15c39     @........(..9\.B
   36448:	1c40db01 1839b240 00407a09 8b0019c0     ..@.@.9..z@.....
   36458:	62314e17 08496819 60190049 6b314e15     .N1b.hI.I..`.N1k
   36468:	4327460f 62986337 633143a1 68518028     .F'C7c.b.C1c(.Qh
   36478:	438103b0 78004810 0fc007c0 43190503     ...C.H.x.......C
   36488:	68516051 43a10200 60514301 4770bcf0     Q`Qh...C.CQ`..pG
   36498:	00800000 604e4580 3ff62000 38f60000     .....EN`. .?...8
   364a8:	2df60000 09f60000 67fc0000 04802000     ...-.......g. ..
   364b8:	004050c0 603a4580 b5f02000 2243b082     .P@..E:`. ....C"
   364c8:	68530612 04642401 60534323 0fd207ca     ..Sh.$d.#CS`....
   364d8:	078a4696 074a0fd3 070a0fd4 92010fd2     .F....J.........
   364e8:	0fd206ca 068a9200 46940fd2 0fd5064a     ...........FJ...
   364f8:	4a1f09ce 27036811 43b9057f 4f1d6912     ...J.h.'...C.i.O
   36508:	2800403a 2801d006 2701d009 280205bf     :@.(...(...'...(
   36518:	4339d003 d0062800 4339e01b 2701e7fa     ..9C.(....9C...'
   36528:	4339057f 0330e7f6 016a4310 46624310     ..9C..0..Cj..CbF
   36538:	431002d2 01d29a00 9a014310 43100192     ...C.....C.....C
   36548:	431002a2 4310025a 02124672 4a084310     ...CZ..CrF...C.J
   36558:	48076110 20436001 68410600 04522201     .a.H.`C ..Ah."R.
   36568:	4a054391 07d27812 43110b92 b0026041     .C.J.x.....CA`..
   36578:	0000bdf0 e00343c0 603affff b5f82000     .....C....:`. ..
   36588:	20432400 68410600 03bf2701 60414339     .$C ..Ah.'..9CA`
   36598:	00ba6841 60414311 68054821 430d1c51     Ah...CA`!H.hQ..C
   365a8:	4e1f6005 47b020c8 6888491f 60884338     .`.N. .G.I.h8C.`
   365b8:	68f0460e 0fc70400 2001491a 46204788     .F.h.....I. .G F
   365c8:	1c64491a d8014288 d0f22f00 40054818     .Id..B.../...H.@
   365d8:	60054813 03402001 68f160b0 40014815     .H.`. @..`.h.H.@
   365e8:	4a146870 43084010 68306070 0289213f     ph.J.@.Cp`0h?!..
   365f8:	60304388 06092143 2001684a 43820380     .C0`C!..Jh. ...C
   36608:	7800480e 0fc007c0 431a0383 684a604a     .H.x.......CJ`Jh
   36618:	041b2301 0400439a 604a4302 0000bdf8     .#...C...CJ`....
   36628:	3ba15240 00000000 271051c0 fffe0000     @R.;.....Q.'....
   36638:	3f3ffffe c0c00000 603affff 47702000     ..??......:`. pG
   36648:	b5f00000 2508b083 2000493c 20437008     .......%<I. .pC 
   36658:	68410600 431102aa 27296041 067f4938     ..Ah...CA`)'8I..
   36668:	684160f9 43914b37 07db781b 43190c9b     .`Ah7K.C.x.....C
   36678:	24256041 684101a4 60414311 10526841     A`%$..Ah.CA`AhR.
   36688:	60414311 210368f8 43880649 43060356     .CA`.h.!I..CV..C
   36698:	43060390 200168b8 fe81f7ff 20104621     ...C.h. ....!F. 
   366a8:	fe83f7ff 43060328 2d002400 60fed90c     ....(..C.$.-...`
   366b8:	20644925 68f84788 0a004669 55081c80     %Id .G.hiF.....U
   366c8:	b2e41c64 d3f242ac 79d0466a 18407991     d....B..jF.y.y@.
   366d8:	79127951 18401889 78d1466a 78901841     Qy.y..@.jF.xA..x
   366e8:	78501809 78101809 46291808 fe63f7ff     ..Px...x..)F..c.
   366f8:	b2c04912 68397008 02922201 60394311     .I...p9h."...C9`
   36708:	1c400040 20006178 fe49f7ff 06092143     @.@.xa. ..I.C!..
   36718:	2001684a 43820300 7800480a 0fc007c0     Jh. ...C.H.x....
   36728:	431a0303 684a604a 035b2301 0340439a     ...CJ`Jh.#[..C@.
   36738:	604a4302 bdf0b003 60700000 34cc2000     .CJ`......p`. .4
   36748:	603a0263 3ba12000 b4700000 06092143     c.:`. .;..p.C!..
   36758:	24016848 432004a4 20c46048 05d22287     Hh.$.. CH`. ."..
   36768:	485c6010 68486150 43a04a5c 07d27812     .`\HPaHh\J.C.x..
   36778:	04930fd2 60484318 4b58208b 634305c0     .....CH`. XK..Cc
   36788:	25014b58 250660dd 250560cd 688563c5     XK.%.`.%.`.%.c.h
   36798:	3df0086d 68c56085 355d086d 690560c5     m..=.`.hm.]5.`.i
   367a8:	6105086d 086d6945 69856145 6185086d     m..aEim.Ea.im..a
   367b8:	086d69c5 6a0561c5 6205086d 086d6a45     .im..a.jm..bEjm.
   367c8:	6a856245 6285086d 086d6ac5 250162c5     Eb.jm..b.jm..b.%
   367d8:	625d611d 4b43639d 4d43601d 6a1d615d     .a]b.cCK.`CM]a.j
   367e8:	621d086d 25016ac3 62c3432b 10a36848     m..b.j.%+C.bHh..
   367f8:	60484318 109b6848 60484318 4b3b483d     .CH`Hh...CH`=H;K
   36808:	68836143 05ad253f 6083432b 60c32300     Ca.h?%..+C.`.#.`
   36818:	61834b39 682b4d39 43b3261e 6a83602b     9K.a9M+h.&.C+`.j
   36828:	43ab03f5 6283191b 10a36848 04134398     ...C...bHh...C..
   36838:	60484318 11236848 03934398 60484318     .CH`Hh#..C...CH`
   36848:	11636848 60484318 06402029 09246a04     Hhc..CH`) @..j$.
   36858:	34080124 68486204 03534398 60484318     $..4.bHh.CS..CH`
   36868:	23016848 4318051b 24286048 05c020a3     Hh.#...CH`($. ..
   36878:	4d226004 6285882d 05126848 43104398     .`"M-..bHh...C.C
   36888:	481f6048 700121e6 4a1d7204 8310481e     H`.H.!.p.r.J.H..
   36898:	23e0481e 4c1a7603 706222d4 7262223c     .H.#.v.L."bp<"br
   368a8:	83624a1b 22c87641 4d1570a2 72ac2446     .Jb.Av.".p.MF$.r
   368b8:	83ac4c18 46297681 215070ca 72d1462a     .L...v)F.pP!*F.r
   368c8:	83d14915 215a76c3 49137311 77038411     .I...vZ!.s.I...w
   368d8:	4770bc70 7fff0000 603a0000 02492000     p.pG......:`. I.
   368e8:	00400000 00804580 021e4580 00030000     ..@..E...E......
   368f8:	0000003c 00085240 0000000f 604e51c0     <...@R.......QN`
   36908:	67fc2000 07f62000 681c0000 09f62000     . .g. .....h. ..
   36918:	2df60000 38f60000 3ff60000 b5f80000     ...-...8...?....
   36928:	6800482d d1542800 06122243 21016850     -H.h.(T.C"..Ph.!
   36938:	430803c9 4f286050 2501683c 06002003     ...CP`(O<h.%. ..
   36948:	60384320 49252600 4788201e 20014924      C8`.&%I. .G$I. 
   36958:	68784788 0fc007c0 4a214631 42911c76     .Gxh....1F!Jv..B
   36968:	2800d801 481cd0f2 481e6881 20006001     ...(...H.h.H.`. 
   36978:	2d002600 4b1cd011 25004632 41aa1acb     .&.-...K2F.%...A
   36988:	1c40da14 4f184605 4633434d 1b7d2200     ..@..F.OMC3F."}.
   36998:	1b4d419a dbf44193 4b14e008 d2054299     .AM..A.....K.B..
   369a8:	46021c40 1a9a434a d8f9428a 06092101     @..FJC...B...!..
   369b8:	0049438c 4908430c 2243600c 68510612     .CI..C.I.`C"..Qh
   369c8:	03db2301 4b0a4399 07db781b 43190c1b     .#...C.K.x.....C
   369d8:	bdf86051 605c0000 00002000 3ba14440     Q`....\`. ..@D.;
   369e8:	27100000 60600000 20002000 d000bebc     ...'..``. . ....
   369f8:	603a1312 b5702000 47804823 06242443     ..:`. p.#H.GC$$.
   36a08:	68602101 43080489 481f6060 481f4780     .!`h...C``.H.G.H
   36a18:	28aa7800 68a0d106 d1030780 4788491d     .x.(...h.....I.G
   36a28:	6008491d 05c020a1 21026b02 430a438a     .I.`. ...k.!.C.C
   36a38:	21016302 438a6b02 6302430a 26046b01     .c.!.k.C.C.c.k.&
   36a48:	433143b1 4c146301 4d146860 d5040080     .C1C.c.L`h.M....
   36a58:	47a82001 00806860 4c11d4fa 6060200f     . .G`h.....L. ``
   36a68:	47a82001 60602007 47a82004 60602006     . .G. ``. .G. ``
   36a78:	480c218b 600805c9 6901480c 61014331     .!.H...`.H.i1C.a
   36a88:	bd70bf30 37350000 9c390000 602c0000     0.p...57..9...,`
   36a98:	39d12000 60540000 00802000 3ba14580     . .9..T`. ...E.;
   36aa8:	00400000 03264580 ed000000 b570e000     ..@..E&.......p.
   36ab8:	200f4d2f 248b6068 682005e4 02492101     /M. h`.$.. h.!I.
   36ac8:	60204388 4780482b f3802001 48298810     .C `+H.G. ....)H
   36ad8:	49296840 d4060080 22086820 60204310     @h)I.... h.".C `
   36ae8:	47882001 2001e001 48244788 48244780     . .G... .G$H.G$H
   36af8:	78004925 200d4788 48236068 20434780     %I.x.G. h`#H.GC 
   36b08:	68410600 035b2301 60414319 4a1f2129     ..Ah.#[..CA`)!.J
   36b18:	60ca0649 09126a0a 32080112 680a620a     I..`.j.....2.b.h
   36b28:	432210dc 4a1a600a 00527812 614a1c52     .."C.`.J.xR.R.Ja
   36b38:	49186842 7809439a 0fc907c9 431a034b     Bh.I.C.x....K..C
   36b48:	68436042 431302a2 24286043 05db23a3     B`Ch...CC`($.#..
   36b58:	4c11601c 629c8824 05096843 430b4393     .`.L$..bCh...C.C
   36b68:	20006043 8810f380 4780480d 0040bd70     C`. .....H.Gp.@.
   36b78:	3b854580 00800001 44894580 346d0001     .E.;.....E.D..m4
   36b88:	60400001 3ba12000 4d990000 34cc0001     ..@`. .;...M...4
   36b98:	60700463 603a2000 604e2000 34ad2000     c.p`. :`. N`. .4
   36ba8:	00000001                                ....

00036bac <am_hal_ble_num_default_patches>:
   36bac:	00000003                                ....

00036bb0 <am_ble_buffer_patch_data_b0>:
   36bb0:	07202200 00003fff 0007f584 0007fd73     ." ..?......s...
   36bc0:	00080575 00080b17 000815a9 00081b18     u...............
   36bd0:	0008232d 00082cc5 000832f4 000839ff     -#...,...2...9..
   36be0:	00084364 000849f9 000851ee 00085c54     dC...I...Q..T\..
	...
   36bfc:	f7ec2021 2800fcf9 2000d00a 46039000     ! .....(... ...F
   36c0c:	46014602 20216824 47a03435 bd38bf00     .F.F$h! 54.G..8.
   36c1c:	fefbf7ef 2800490f 7808d002 d0122801     .....I.(...x.(..
   36c2c:	28027808 2800d00f 2801d006 f000d004     .x.(...(...(....
   36c3c:	20006e0c 04000000 20006e1c 47084900     .n. .....n. .I.G
   36c4c:	20004301 7cca4e23 6ac96875 d01d2a00     .C. #N.|uh.j.*..
   36c5c:	0212227d d3024291 20011a8a 1a52e000     }"...B..... ..R.
   36c6c:	d0052800 43504620 fa02f7ea e0041a20     .(.. FPC.... ...
   36c7c:	f9def7ea 02011900 186900c2 18891812     ..........i.....
   36c8c:	02530a4a 60711ac9 4348211e bd701880     J.S...q`.!HC..p.
   36c9c:	2000682c 20006e0c 47084900 20004331     ,h. .n. .I.G1C. 
   36cac:	6ac07cc1 d0152900 0209217d d3024288     .|.j.)..}!...B..
   36cbc:	2004d502 e0347060 f0066928 2800f8b5     ... `p4.(i.....(
   36ccc:	2002d002 e02c7060 f0049803 2804fa1f     ... `p,........(
   36cdc:	4668d107 20027901 d0054388 28002000     ..hF.y. .C... .(
   36cec:	bf00d004 e01c2000 e7f82001 900088f0     ..... ... ......
   36cfc:	00000021 00000000 00000001 00000000     !...............
   36d0c:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   36d1c:	00002001 0000848d 00002002 00007dcd     . ....... ...}..
   36d2c:	00002003 00007ed1 00002005 000084fd     . ...~... ......
   36d3c:	30286928 8d013040 1a409800 b280492a     (i(0@0....@.*I..
   36d4c:	bf00bf00 22054628 30631c71 fdacf7f3     ....(F."q.c0....
   36d5c:	99006928 fbdff001 70602001 2003e001     (i....... `p... 
   36d6c:	2f007060 7860d139 d2362806 44790001     `p./9.`x.(6...yD
   36d7c:	bf00bf00 22568931 46315351 fe3ef001     ....1.V"QS1F..>.
   36d8c:	70602001 2003e001 2f007060 7860d167     . `p... `p./g.`x
   36d9c:	d2642806 44790001 18497909 185f448f     .(d...yD.yI..D_.
   36dac:	1207020c 98052128 fc54f7ff 213de057     ....(!....T.W.=!
   36dbc:	20006878 20006dac 50800040 00002017     xh. .m. @..P. ..
   36dcc:	00000801 5080407e 200068d8 47084900     ....~@.P.h. .I.G
   36ddc:	20004391 78c34311 021b7882 0412431a     .C. .C.x.x...C..
   36dec:	4c1a430a 79426062 02127901 79c34311     .C.Lb`By.y...C.y
   36dfc:	d01b2e13 550e21a1 46692202 724e720a     .....!.U."iF.rNr
   36e0c:	4308210f 46019001 f7fe4638 4669f909     .!.C...F8F....iF
   36e1c:	b2e87a0a f7ffa902 3440ff55 8aa220ff     .z......U.@4. ..
   36e2c:	30034639 bf00bf00 bdf0b003 21a12216     9F.0.........".!
   36e3c:	00808820 30405838 07c07f00 2500d005      ...8X@0.......%
   36e4c:	8820e02f fd22f008 4668e02b 20017a01     /. ...".+.hF.z. 
   36e5c:	d0034388 28002000 e001d108 e7fa2001     .C... .(..... ..
   36e6c:	43882004 2000d004 d0032800 e018253a     . .C... .(..:%..
   36e7c:	83814311 4630210f fb12f7fc f0034628     .C...!0F....(F..
   36e8c:	2804f885 7861d103 f7fe4628 2000fd83     ...(..ax(F..... 
   36e9c:	0000bd70 20006964 4c02b430 bc3046a4     p...di. 0..L.F0.
   36eac:	00004760 20004439 4601fae9 98039000     `G..9D. ...F....
   36ebc:	80688820 f0014628 2000f8b5 0000bdf8      .h.(F..... ....
   36ecc:	00002015 00000801 20006964 b083b5f0     . ......di. ....
   36edc:	24004618 7ae94d18 d0002900 46212400     .F.$.M.z.)...$!F
   36eec:	fe42f00a d1242c00 96012601 aa024c13     ..B..,$..&...L..
   36efc:	4604fdf9 4630e003 fe5cf00b 46214604     ...F..0F..\..F!F
   36f0c:	f00a4638 2000ffa3 0000bdf8 0000202e     8F..... ..... ..
   36f1c:	ffffdfd9 200068f8 b082b510 461c460a     .....h. .....F.F
   36f2c:	480d2100 2b007ac3 bf00d000 d10c2100     .!.H.z.+.....!..
   36f3c:	fe3af7ee 281678a0 2019d302 e0137020     ..:..x.(...  p..
   36f4c:	4a0c210c 5c114348 d00242b1 70202019     .!.JHC.\.B...  p
   36f5c:	2100e00a 1c6d7021 1e761880 6883b2ad     ...!!pm...v....h
   36f6c:	1ca2b2f1 47984628 bd704620 50804480     ....(F.G Fp..D.P
   36f7c:	6b114a08 4b086b52 d9014298 47702000     .J.kRk.K.B... pG
   36f8c:	43424341 0c900989 49041808 d9f64288     ACBC.......I.B..
   36f9c:	47702000 20007ec0 001e8480 03938700     . pG.~. ........
   36fac:	4913b410 4a136b89 d9024290 2000bc10     ...I.k.J.B..... 
   36fbc:	4a114770 6813247d 02242214 42a34342     pG.J}$.h."$.BC.B
   36fcc:	4341d903 18100c08 4341e002 1a100c08     ..AC......AC....
   36fdc:	4288490a 2000d902 4770bc10 d0002800     .I.B... ..pG.(..
   36fec:	42a31e40 2800d2f8 bc10d0f6 47701e40     @..B...(....@.pG
   36ffc:	20007ec0 000186a0 20006858 001e8480     .~. ....Xh. ....
   3700c:	f3efb4f0 b2cc8110 f3812101 78428810     .........!....Bx
   3701c:	02127801 78c34311 021b7882 0412431a     .x...C.x.x...C..
   3702c:	4d1d430a 7942606a 02127901 79c34311     .C.Mj`By.y...C.y
   3703c:	021b7982 0412431a 60aa430a 7a017a42     .y...C...C.`Bz.z
   3704c:	43110212 7a827ac3 431a021b 430a0412     ...C.z.z...C...C
   3705c:	7b4260ea 02127b01 7bc34311 021b7b82     .`B{.{...C.{.{..
   3706c:	0412431a 612a430a 23103010 21004a0b     .C...C*a.0.#.J.!
   3707c:	54565c46 b2891c49 d3f94299 6168206e     F\VTI....B..n ha
   3708c:	60282001 21014806 f3847401 bcf08810     . (`.H.!.t......
   3709c:	20104904 00004708 508000c0 5080406e     .I. .G.....Pn@.P
   370ac:	200068d8 000159a1 b085b5ff 461f460e     .h. .Y.......F.F
   370bc:	90022000 46304974 46014788 98059001     . ..tI0F.G.F....
   370cc:	00804a72 58149004 35a04625 0718796b     rJ.....X%F.5ky..
   370dc:	78e8d507 d004280d 213d4a6d 47909805     ...x.(..mJ=!...G
   370ec:	2001e0ce d00d4388 28002000 78e8d074     ... .C... .(t..x
   370fc:	92034a68 d0702805 2801dc06 2804d01b     hJ...(p....(...(
   3710c:	e074d16a e7f02001 d02d2807 d163280d     j.t.. ...(-..(c.
   3711c:	d46106d8 716c2400 4b5f221a 98052100     ..a..$lq."_K.!..
   3712c:	46684798 08497901 91010049 46304a5b     .GhF.yI.I...[J0F
   3713c:	70ec4790 7878e0a4 d14d280e 4a5820ff     .G.p..xx.(M.. XJ
   3714c:	30034631 46224790 4b563269 9905201a     1F.0.G"Fi2VK. ..
   3715c:	46684798 08497901 91010049 46304a4f     .GhF.yI.I...OJ0F
   3716c:	20004790 e08b70e8 280f7878 20ffd134     .G. .p..xx.(4.. 
   3717c:	46314a4b 47903003 30604620 22fd7a41     KJ1F.0.G F`0Az."
   3718c:	72414011 98054948 28034788 4620d026     .@ArHI...G.(&. F
   3719c:	46013040 06428b80 2240d510 83884390     @0.F..B...@".C..
   371ac:	21049803 40087f00 2001d000 d0052800     ...!...@... .(..
   371bc:	32286922 201a4b3d 47989905 21004a3c     "i(2=K. ...G<J.!
   371cc:	47909805 79014668 00490849 4a339101     ...GhF.yI.I...3J
   371dc:	47904630 70e82000 e041e052 9804492b     0F.G. .pR.A.+I..
   371ec:	68005808 70012102 47884932 7878e048     .X.h.!.p2I.GH.xx
   371fc:	d1452814 4a2a20ff 30034631 20014790     .(E.. *J1F.0.G. 
   3720c:	74a03440 21409803 40087f00 2001d000     @4.t..@!...@... 
   3721c:	d01a2800 07807ce0 230cd417 223e4f27     .(...|.....#'O>"
   3722c:	99054825 210747b8 99057001 89218041     %H...G.!.p..A.!.
   3723c:	8a218101 88e18141 89e18081 492080c1     ..!.A......... I
   3724c:	7ce04788 43082102 466874e0 08497901     .G.|.!.C.thF.yI.
   3725c:	91010049 46304a11 20004790 e00f70e8     I....J0F.G. .p..
   3726c:	28127878 0849d10c 91010049 46304a0b     xx.(..I.I....J0F
   3727c:	20004790 20ff70e8 46314a09 47903003     .G. .p. .J1F.0.G
   3728c:	b0099802 0000bdf0 00009f0d 20006964     ............di. 
   3729c:	0000c425 200068b8 0000a805 00009f31     %....h. ....1...
   372ac:	0000a189 0000b01d 00010a1d 0000ab09     ................
   372bc:	0000c405 00009e31 00000804 00009df5     ....1...........
   372cc:	00008fb5                                ....

000372d0 <am_hal_ble_num_default_patches_b0>:
   372d0:	00000003                                ....

000372d4 <g_am_hal_mcuctrl_flash_size>:
   372d4:	00004000 00008000 00010000 00020000     .@..............
   372e4:	00040000 00080000 00100000 00200000     .............. .
   372f4:	00180000 00000000 00000000 00000000     ................
	...

00037314 <g_am_hal_mcuctrl_sram_size>:
   37314:	00004000 00008000 00010000 00020000     .@..............
   37324:	00040000 00080000 00100000 00060000     ................
   37334:	000c0000 00000000 00000000 00000000     ................
	...

00037354 <am_hal_pwrctrl_peripheral_control>:
	...
   37360:	00000001 00000004 00000004 00000002     ................
   37370:	00000008 00000008 00000004 00000008     ................
   37380:	00000008 00000008 00000008 00000008     ................
   37390:	00000010 00000010 00000010 00000020     ............ ...
   373a0:	00000010 00000010 00000040 00000010     ........@.......
   373b0:	00000010 00000080 00000004 00000004     ................
   373c0:	00000100 00000004 00000004 00000200     ................
   373d0:	00000020 00000020 00000400 00000004      ... ...........
   373e0:	00000004 00000800 00000040 00000040     ........@...@...
   373f0:	00001000 00000080 00000080 00002000     ............. ..
   37400:	00000100 00000100                       ........

00037408 <apollo3_flash_dev>:
   37408:	00037420 00000000 00100000 00000080      t..............
   37418:	00000001 000000ff                       ........

00037420 <apollo3_flash_funcs>:
   37420:	0002da51 0002d9a5 0002d941 0002d92d     Q.......A...-...
   37430:	00000000 0002d93b 00000000              ....;.......

0003743c <apollo3_timer_tbl_hfrc>:
   3743c:	00002ee0 0000000a 0000b798 00000008     ................
   3744c:	0002dc6c 00000006 002dc6c0 00000004     l.........-.....
   3745c:	00b71b00 00000002 00000000 00000000     ................

0003746c <apollo3_timer_tbl_lfrc>:
   3746c:	00000001 00000018 00000020 00000016     ........ .......
   3747c:	00000200 00000014 00000400 0000001a     ................
	...

00037494 <apollo3_timer_tbl_xt>:
   37494:	00000100 00000012 00000800 00000010     ................
   374a4:	00004000 0000000e 00008000 0000000c     .@..............
	...

000374bc <g_ui32TMRAddrTbl>:
   374bc:	40008000 40008020 40008040 40008060     ...@ ..@@..@`..@
   374cc:	40008080 400080a0 400080c0 400080e0     ...@...@...@...@

000374dc <g_ui8TmrClkSrcMask>:
   374dc:	01030f0f 00000101 00000000 00000000     ................
   374ec:	00000000 0f0f0f0f 0f0f0f0f 0000000f     ................

000374fc <g_AM_HAL_GPIO_DISABLE>:
   374fc:	00000003                                ....

00037500 <g_ui8Bit76Capabilities>:
   37500:	02800101 80010180 80800101 80808080     ................
   37510:	80808080 80808008 01800180 80808080     ................
   37520:	80808080 01800402 01010401 80808080     ................
   37530:	00000101                                ....

00037534 <g_ui8Inpen>:
   37534:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   37544:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   37554:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   37564:	00003130                                01..

00037568 <g_ui8NCEtable>:
   37568:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   37578:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   37588:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   37598:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   375a8:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   375b8:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   375c8:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   375d8:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   375e8:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   375f8:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   37608:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   37618:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   37628:	32221202 43231303                       .."2..#C

00037630 <g_ui8nCEpins>:
   37630:	02070707 00080802 01020202 01010101     ................
   37640:	01010101 01010101 01010101 01010101     ................
   37650:	01010101 08010101 01010008 01010101     ................
   37660:	00000101 5f656c62 735f7368 64747568     ....ble_hs_shutd
   37670:	3a6e776f 69616620 2064656c 73206f74     own: failed to s
   37680:	20706f74 74736f68 6372203b 0a64253d     top host; rc=%d.
   37690:	00000000                                ....

00037694 <g_sUartConfig>:
   37694:	0001c200 00000060 00000000 00000000     ....`...........
   376a4:	00000000 00000012 10007088 00000100     .........p......
   376b4:	10007084 00000002                       .p......

/Users/tianzeng/Documents/workspace/playground/bin/targets/ble_test_target/app/apps/btshell/btshell.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 145076	   7544	  21808	 174428	  2a95c	/Users/tianzeng/Documents/workspace/playground/bin/targets/ble_test_target/app/apps/btshell/btshell.elf
