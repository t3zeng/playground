
/Users/tianzeng/Documents/workspace/playground/bin/targets/ble_test_target/app/apps/btshell/btshell.elf:     file format elf32-littlearm
/Users/tianzeng/Documents/workspace/playground/bin/targets/ble_test_target/app/apps/btshell/btshell.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00014121

Program Header:
0x70000001 off    0x00029cb8 vaddr 0x00039cb8 paddr 0x00039cb8 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00010000 paddr 0x00010000 align 2**16
         filesz 0x00029cd0 memsz 0x00029cd0 flags rwx
    LOAD off    0x00030100 vaddr 0x10000100 paddr 0x00039cd0 align 2**16
         filesz 0x000007b0 memsz 0x00005d80 flags rw-
    LOAD off    0x00040000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x00000000 memsz 0x00000100 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00014000  00014000  00004000  2**0  ALLOC
  1 .text              00025c98  00014020  00014020  00004020  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  00039cb8  00039cb8  000308b0  2**0  CONTENTS
  3 .ARM.exidx         00000018  00039cb8  00039cb8  00029cb8  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 00000100  10000000  10000000  00040000  2**0  ALLOC
  5 .data              000007b0  10000100  00039cd0  00030100  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bss               000055d0  100008b0  0003a480  000308b0  2**3  ALLOC
  7 .stack_dummy       000001b0  10005e80  10005e80  000308b0  2**3  CONTENTS, READONLY
  8 .ARM.attributes    0000002a  00000000  00000000  00030a60  2**0  CONTENTS, READONLY
  9 .comment           00000079  00000000  00000000  00030a8a  2**0  CONTENTS, READONLY
 10 .svc_table         00000004  00000000  00000000  00030b03  2**0  CONTENTS, READONLY
 11 .debug_line        00066992  00000000  00000000  00030b07  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_info        00135bd5  00000000  00000000  00097499  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev      0001c7bb  00000000  00000000  001cd06e  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges     00005270  00000000  00000000  001e9830  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_str         0001e741  00000000  00000000  001eeaa0  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges      000054c0  00000000  00000000  0020d1e1  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame       0000eff0  00000000  00000000  002126a4  2**2  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00058824  00000000  00000000  00221694  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00014000 l    d  .imghdr	00000000 .imghdr
00014020 l    d  .text	00000000 .text
00039cb8 l    d  .ARM.extab	00000000 .ARM.extab
00039cb8 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .vector_relocation	00000000 .vector_relocation
10000100 l    d  .data	00000000 .data
100008b0 l    d  .bss	00000000 .bss
10005e80 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 gcc_startup_apollo3.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
000140e0 l       .text	00000000 __ble_patch
00014128 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 HAL_CM4.o
000141d0 l       .text	00000000 SVC_User
000141ee l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 system_apollo3.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 sbrk.c
100008b0 l     O .bss	00000004 brk
100008b4 l     O .bss	00000004 sbrk_base
100008b8 l     O .bss	00000004 sbrk_limit
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
00014798 l     F .text	0000002c btshell_conn_find_idx
000147c4 l     F .text	00000020 btshell_conn_find
000147e4 l     F .text	00000014 btshell_svc_find_prev
000147f8 l     F .text	00000028 btshell_svc_find
00014820 l     F .text	00000016 btshell_svc_find_range
00014836 l     F .text	00000014 btshell_chr_find_prev
0001484a l     F .text	00000028 btshell_chr_find
00014872 l     F .text	00000014 btshell_dsc_find_prev
00014886 l     F .text	00000028 btshell_dsc_find
000148b0 l     F .text	00000028 btshell_print_error
000148d8 l     F .text	00000024 btshell_on_mtu
000148fc l     F .text	0000001c btshell_full_disc_complete
00014918 l     F .text	00000024 btshell_on_write
0001493c l     F .text	00000010 btshell_on_reset
0001494c l     F .text	00000048 btshell_conn_add
00014994 l     F .text	0000004c btshell_on_read
000149e0 l     F .text	00000058 btshell_on_write_reliable
00014a38 l     F .text	00000028 btshell_chr_delete
00014a60 l     F .text	00000020 btshell_svc_delete
00014a80 l     F .text	00000050 btshell_conn_delete_idx
00014ad0 l     F .text	00000040 btshell_restart_adv
00014b10 l     F .text	00000288 btshell_print_adv_fields
00014d98 l     F .text	00000048 btshell_decode_adv_data
000150a8 l     F .text	00000070 btshell_chr_add
00015118 l     F .text	00000064 btshell_svc_add
0001517c l     F .text	0000008c btshell_dsc_add
00015208 l     F .text	000000cc btshell_tx_timer_cb
000152d4 l     F .text	00000024 btshell_on_sync
00015434 l     F .text	00000040 btshell_on_disc_c
00015474 l     F .text	00000048 btshell_on_disc_c_in_s
000154bc l     F .text	00000044 btshell_on_disc_s
00015500 l     F .text	00000044 btshell_on_disc_d
0001538c l     F .text	00000070 btshell_disc_full_dscs
000153fc l     F .text	00000036 btshell_disc_full_chrs
100008bc l     O .bss	0000001c adv_params
100008d8 l     O .bss	00000900 btshell_chr_mem
100011d8 l     O .bss	0000001c btshell_chr_pool
100011f4 l     O .bss	00000700 btshell_dsc_mem
100018f4 l     O .bss	0000001c btshell_dsc_pool
10001918 l     O .bss	00000480 btshell_svc_mem
10001d98 l     O .bss	0000001c btshell_svc_pool
10001db4 l     O .bss	00000010 btshell_tx_data
10001dc4 l     O .bss	00000020 btshell_tx_timer
00000000 l    df *ABS*	00000000 misc.c
000159fc l     F .text	00000024 print_dsc
00015a20 l     F .text	00000038 print_chr
00000000 l    df *ABS*	00000000 cmd.c
00015b34 l     F .text	00000024 cmd_host_disable
00015b58 l     F .text	00000020 on_stop
00015b78 l     F .text	00000024 cmd_host_enable
00015b9c l     F .text	00000078 cmd_phy_read
00015c14 l     F .text	0000005c cmd_phy_set_default
00015c70 l     F .text	000000a0 cmd_phy_set
00015d10 l     F .text	000000e8 cmd_test_tx
00015df8 l     F .text	0000004c cmd_keystore_show
00015e44 l     F .text	00000134 cmd_keystore_iterator
00015f78 l     F .text	000000a8 parse_dev_addr
00016020 l     F .text	000000a8 cmd_keystore_parse_keydata
000160c8 l     F .text	00000038 cmd_keystore_del
00016100 l     F .text	00000104 cmd_keystore_parse_valuedata
00016204 l     F .text	00000078 cmd_keystore_add
0001627c l     F .text	00000094 cmd_conn_datalen
00016310 l     F .text	00000150 cmd_conn_update_params
00016460 l     F .text	00000068 cmd_conn_rssi
000164c8 l     F .text	00000060 cmd_white_list
00016528 l     F .text	0000005c cmd_set_priv_mode
00016584 l     F .text	00000098 cmd_set_scan_opts
0001661c l     F .text	000004cc cmd_set_adv_data_or_scan_rsp
00016ae8 l     F .text	0000000c cmd_set_scan_rsp
00016af4 l     F .text	0000000c cmd_set_adv_data
00016b00 l     F .text	00000058 cmd_set_addr
00016b58 l     F .text	000000b4 cmd_set
00016c0c l     F .text	000003c8 cmd_scan
00016fd4 l     F .text	0000003c cmd_show_conn
00017010 l     F .text	00000064 cmd_show_addr
00017074 l     F .text	00000074 cmd_disconnect
000170e8 l     F .text	00000588 cmd_connect
00017670 l     F .text	0000024c cmd_advertise
10001df0 l     O .bss	00000038 addrs.23897
10001e28 l     O .bss	00000020 uuids16.23834
10001e48 l     O .bss	00000040 uuids32.23835
10001e88 l     O .bss	00000022 uuids128.23836
10001eac l     O .bss	00000004 slave_itvl_range.23838
10001eb0 l     O .bss	0000001d svc_data_uuid16.23839
10001ed0 l     O .bss	00000030 public_tgt_addrs.23837
10001f00 l     O .bss	0000001d svc_data_uuid32.23840
10001f20 l     O .bss	0000001d svc_data_uuid128.23841
10001f40 l     O .bss	0000001d uri.23842
10001f60 l     O .bss	0000001d mfg_data.23843
10001f80 l     O .bss	0000000c listener.24053
10000104 l     O .data	00000030 cmd_ext_conn_phy_opts
10000134 l     O .data	00000028 cmd_scan_ext_types
1000015c l     O .data	00000004 g_scan_opts
00037470 l     O .text	0000000c advertise_help
0003747c l     O .text	00000070 advertise_params
000374ec l     O .text	00000260 btshell_commands
000378f8 l     O .text	0000000c connect_help
000379ec l     O .text	0000000c disconnect_help
00037ba8 l     O .text	0000000c gatt_show_addr_help
00037bb4 l     O .text	0000000c gatt_show_conn_help
00037f04 l     O .text	0000000c set_scan_opts_help
00037d5c l     O .text	0000000c scan_help
00037ea4 l     O .text	0000000c set_help
00037de8 l     O .text	0000000c set_adv_data_help
00037f30 l     O .text	0000000c set_scan_rsp_help
00037ed8 l     O .text	0000000c set_priv_mode_help
00037f78 l     O .text	0000000c white_list_help
00037890 l     O .text	0000000c conn_rssi_help
000378ac l     O .text	0000000c conn_update_params_help
00037864 l     O .text	0000000c conn_datalen_help
00037a10 l     O .text	0000000c gatt_discover_characteristic_help
00037a44 l     O .text	0000000c gatt_discover_descriptor_help
00037a8c l     O .text	0000000c gatt_discover_service_help
00037a70 l     O .text	0000000c gatt_discover_full_help
00037acc l     O .text	0000000c gatt_find_included_services_help
00037ab0 l     O .text	0000000c gatt_exchange_mtu_help
00037b14 l     O .text	0000000c gatt_read_help
00037af8 l     O .text	0000000c gatt_notify_help
00037b60 l     O .text	0000000c gatt_service_changed_help
00037b84 l     O .text	0000000c gatt_service_visibility_help
00037bc0 l     O .text	0000000c gatt_show_help
00037bcc l     O .text	0000000c gatt_show_local_help
00037be0 l     O .text	0000000c gatt_write_help
00037c3c l     O .text	0000000c keystore_add_help
00037c90 l     O .text	0000000c keystore_del_help
00037ccc l     O .text	0000000c keystore_show_help
00037f3c l     O .text	0000000c test_tx_help
00037d28 l     O .text	0000000c phy_set_help
00037d04 l     O .text	0000000c phy_set_default_help
00037ce8 l     O .text	0000000c phy_read_help
00037c30 l     O .text	0000000c host_enable_help
00037c24 l     O .text	0000000c host_disable_help
0003774c l     O .text	00000018 cmd_addr_type
00037764 l     O .text	00000020 cmd_adv_conn_modes
00037784 l     O .text	00000020 cmd_adv_disc_modes
000377a4 l     O .text	00000028 cmd_adv_filt_types
000377cc l     O .text	00000020 cmd_keystore_entry_type
000377ec l     O .text	00000028 cmd_own_addr_types
00037814 l     O .text	00000028 cmd_peer_addr_types
0003783c l     O .text	00000028 cmd_scan_filt_policies
00037870 l     O .text	00000020 conn_datalen_params
0003789c l     O .text	00000010 conn_rssi_params
000378b8 l     O .text	00000040 conn_update_params_params
00037904 l     O .text	000000e8 connect_params
000379f8 l     O .text	00000018 disconnect_params
00037a1c l     O .text	00000028 gatt_discover_characteristic_params
00037a50 l     O .text	00000020 gatt_discover_descriptor_params
00037a7c l     O .text	00000010 gatt_discover_full_params
00037a98 l     O .text	00000018 gatt_discover_service_params
00037abc l     O .text	00000010 gatt_exchange_mtu_params
00037ad8 l     O .text	00000020 gatt_find_included_services_params
00037b04 l     O .text	00000010 gatt_notify_params
00037b20 l     O .text	00000040 gatt_read_params
00037b6c l     O .text	00000018 gatt_service_changed_params
00037b90 l     O .text	00000018 gatt_service_visibility_params
00037bd8 l     O .text	00000008 gatt_show_params
00037bec l     O .text	00000038 gatt_write_params
00037c48 l     O .text	00000048 keystore_add_params
00037c9c l     O .text	00000030 keystore_del_params
00037cd8 l     O .text	00000010 keystore_show_params
00037cf4 l     O .text	00000010 phy_read_params
00037d10 l     O .text	00000018 phy_set_default_params
00037d34 l     O .text	00000028 phy_set_params
00037d68 l     O .text	00000080 scan_params
00037df4 l     O .text	000000b0 set_adv_data_params
00037eb0 l     O .text	00000028 set_params
00037ee4 l     O .text	00000020 set_priv_mode_params
00037f10 l     O .text	00000020 set_scan_opts_params
00037f48 l     O .text	00000030 test_tx_params
00037f84 l     O .text	00000018 white_list_params
00000000 l    df *ABS*	00000000 cmd_gatt.c
10001f8c l     O .bss	00000010 attr_handles.22109
10001f9c l     O .bss	00000100 cmd_buf
00000000 l    df *ABS*	00000000 gatt_svr.c
00018074 l     F .text	0000000a extract_uuid16_from_pts_uuid128
0001807e l     F .text	00000026 gatt_svr_chr_write
000180a4 l     F .text	000001a0 gatt_svr_access_test
00018244 l     F .text	00000200 gatt_svr_long_access_test
00018444 l     F .text	000000c0 gatt_svr_chr_access_sec_test
1000209c l     O .bss	0000001e gatt_svr_pts_static_long_val
100020bc l     O .bss	0000001e gatt_svr_pts_static_long_val_alt
100020da l     O .bss	00000001 gatt_svr_pts_static_val
100020db l     O .bss	00000001 gatt_svr_sec_test_static_val
10000160 l     O .data	00000011 __compound_literal.0
10000174 l     O .data	00000011 __compound_literal.1
10000188 l     O .data	00000011 __compound_literal.10
1000019c l     O .data	00000011 __compound_literal.11
100001b0 l     O .data	00000011 __compound_literal.12
100001c4 l     O .data	00000060 __compound_literal.13
10000638 l     O .data	00000011 __compound_literal.8
1000064c l     O .data	00000011 __compound_literal.9
10000224 l     O .data	000000c0 __compound_literal.14
10000348 l     O .data	00000011 __compound_literal.2
1000051c l     O .data	00000011 __compound_literal.3
100005e8 l     O .data	00000011 __compound_literal.4
100005fc l     O .data	00000011 __compound_literal.5
10000610 l     O .data	00000011 __compound_literal.6
10000624 l     O .data	00000011 __compound_literal.7
100002e4 l     O .data	00000011 __compound_literal.15
100002f8 l     O .data	00000011 __compound_literal.16
1000030c l     O .data	00000011 __compound_literal.17
10000320 l     O .data	00000011 __compound_literal.18
10000334 l     O .data	00000011 __compound_literal.19
1000035c l     O .data	00000011 __compound_literal.20
10000370 l     O .data	00000011 __compound_literal.21
10000384 l     O .data	00000011 __compound_literal.22
10000398 l     O .data	00000011 __compound_literal.23
100003ac l     O .data	00000011 __compound_literal.24
100003c0 l     O .data	00000011 __compound_literal.25
100003d4 l     O .data	00000011 __compound_literal.26
100003e8 l     O .data	00000011 __compound_literal.27
100003fc l     O .data	00000060 __compound_literal.28
1000045c l     O .data	000000c0 __compound_literal.29
10000530 l     O .data	00000060 __compound_literal.30
00038224 l     O .text	00000011 gatt_svr_chr_sec_test_rand_uuid
0003824c l     O .text	00000011 gatt_svr_chr_sec_test_static_uuid
00038238 l     O .text	00000011 gatt_svr_chr_sec_test_static_auth_uuid
10000590 l     O .data	00000011 __compound_literal.31
100005a4 l     O .data	00000011 __compound_literal.32
100005b8 l     O .data	00000030 __compound_literal.33
10000660 l     O .data	00000008 inc_svcs
00038294 l     O .text	00000040 gatt_svr_svcs
00038260 l     O .text	00000020 gatt_svr_inc_svcs
00038280 l     O .text	00000011 gatt_svr_svc_sec_test_uuid
00000000 l    df *ABS*	00000000 parse.c
00018598 l     F .text	00000018 parse_arg_long_base
000185b0 l     F .text	0000002c parse_reverse_bytes
000185dc l     F .text	00000044 parse_time_unit_mult
00018620 l     F .text	00000072 parse_time_us
00018692 l     F .text	0000006a parse_arg_byte_stream_delim
100020dc l     O .bss	00000080 cmd_args
1000215c l     O .bss	00000004 cmd_num_args
000383b8 l     O .text	00000020 schemes.22325
000383d8 l     O .text	00000070 suffixes.22329
00000000 l    df *ABS*	00000000 ble_test_target-sysinit-app.c
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 endian.c
00000000 l    df *ABS*	00000000 os.c
00018f5c l     F .text	0000001e os_main
100021b0 l     O .bss	00000100 g_idle_task_stack
100022b8 l     O .bss	00000800 g_os_main_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_dev.c
000192d8 l     F .text	00000022 os_dev_initialize
10002b14 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
10002b1c l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
00019d4c l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
00019f10 l     F .text	00000010 os_msys_find_biggest_pool
00019f20 l     F .text	0000002c os_msys_find_pool
00019f98 l     F .text	00000058 os_msys_init_once
10002b34 l     O .bss	00000db0 os_msys_1_data
100038e4 l     O .bss	0000000c os_msys_1_mbuf_pool
100038f0 l     O .bss	0000001c os_msys_1_mempool
10000668 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_sanity.c
0001a070 l     F .text	00000020 os_sanity_check_list_lock
0001a090 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_task.c
0001a404 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0001a584 l     F .text	00000044 os_deltatime
0001a5c8 l     F .text	0000001c os_time_change_notify
0001a5e4 l     F .text	00000064 os_time_tick
0001a718 l     F .text	00000048 os_time_populate_info
10003930 l     O .bss	00000030 basetod
10000680 l     O .data	00000008 os_time_change_listeners
00000000 l    df *ABS*	00000000 os_arch_arm.c
0001a888 l     F .text	00000002 os_arch_task_return_handler
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 lrand48.c
00000000 l    df *ABS*	00000000 memcmp.c
0001ac20 l       .text	00000000 test1
0001ac14 l       .text	00000000 loop1
0001ac26 l       .text	00000000 res1
0001ac42 l       .text	00000000 test2
0001ac4a l       .text	00000000 done
0001ac36 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0001ac56 l       .text	00000000 test1
0001ac52 l       .text	00000000 loop1
0001ac64 l       .text	00000000 test2
0001ac60 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncat.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0001ad9a l     F .text	000000fc ui2a
0001ae96 l     F .text	00000028 i2a
0001aebe l     F .text	00000030 a2d
0001aeee l     F .text	00000036 a2i
0001af24 l     F .text	00000024 putf
0001af48 l     F .text	00000124 putchw
0001b06c l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 jrand48.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
0001b508 l     F .text	00000004 stdin_read
0001b50c l     F .text	00000010 stdout_write
10000688 l     O .data	00000004 _stdin
1000068c l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 strntoumax.c
00000000 l    df *ABS*	00000000 strsep.c
00000000 l    df *ABS*	00000000 strpbrk.c
00000000 l    df *ABS*	00000000 console.c
0001b708 l     F .text	00000004 hal_debug_break
10003978 l     O .bss	00000010 avail_queue
100039a4 l     O .bss	0000000c console_write_lock
0001b70c l     F .text	0000004c add_ascii_num_with_char
0001b758 l     F .text	0000003c console_handle_line
0001b794 l     F .text	00000048 console_filter_out
0001b7dc l     F .text	0000001e console_filter_write
0001b7fc l     F .text	00000044 console_append_char
0001b840 l     F .text	0000001e console_write_nolock
0001b860 l     F .text	00000050 handle_end
0001b8b0 l     F .text	00000050 handle_home
0001b900 l     F .text	00000068 del_char
0001b968 l     F .text	00000020 handle_delete
0001b988 l     F .text	00000190 handle_ansi
0001bb18 l     F .text	00000058 handle_backspace
0001bb70 l     F .text	0000005c console_clear_line
0001bbcc l     F .text	000000a8 insert_char
0001bc80 l     F .text	0000000a console_nlip_enable_echo
0001bc8a l     F .text	0000000a console_nlip_disable_echo
0001bc94 l     F .text	00000104 handle_nlip
10003970 l     O .bss	00000004 ansi_val
10003974 l     O .bss	00000004 ansi_val_2
10003988 l     O .bss	00000004 completion
1000398c l     O .bss	00000004 console_compat_rx_cb
10003994 l     O .bss	00000010 console_prompt
100039b0 l     O .bss	00000002 cur
100039b4 l     O .bss	00000004 current_line_ev
100039b8 l     O .bss	00000004 esc_state
100039c0 l     O .bss	00000004 lines_queue
100039c4 l     O .bss	00000004 nlip_state
100039c8 l     O .bss	00000001 prev_endl.19705
100039c9 l     O .bss	00000001 prompt_has_focus
100039ca l     O .bss	00000002 prompt_len
100039cc l     O .bss	00000001 rx_stalled
100039ce l     O .bss	00000002 trailing_chars
10000694 l     O .data	00000004 echo
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
10000698 l     O .data	00000001 do_ticks
00000000 l    df *ABS*	00000000 uart_console.c
0001c160 l     F .text	00000008 uart_blocking_tx
0001c168 l     F .text	00000014 uart_console_ring_add_char
0001c17c l     F .text	00000014 uart_console_ring_pull_char
0001c190 l     F .text	00000016 uart_console_ring_is_full
0001c1a6 l     F .text	0000000e uart_console_ring_is_empty
0001c1b4 l     F .text	00000030 uart_console_tx_flush
0001c1e4 l     F .text	0000001c uart_console_tx_char
0001c200 l     F .text	00000058 uart_console_queue_char
0001c258 l     F .text	00000044 uart_console_rx_char
0001c29c l     F .text	00000074 uart_console_rx_char_event
100039d0 l     O .bss	00000008 cr_rx
100039d8 l     O .bss	00000020 cr_rx_buf
100039f8 l     O .bss	00000008 cr_tx
10003a00 l     O .bss	00000020 cr_tx_buf
10003a30 l     O .bss	00000001 uart_console_rx_stalled
10003a34 l     O .bss	00000004 uart_dev
10003a38 l     O .bss	00000004 write_char_cb
1000069c l     O .data	00000004 b.19553
00000000 l    df *ABS*	00000000 flash_map.c
0001c438 l     F .text	00000038 flash_area_find_idx
0001c470 l     F .text	00000058 flash_map_area_overlaps
0001c4c8 l     F .text	00000080 flash_map_add_new_dflt_areas
00000000 l    df *ABS*	00000000 log.c
0001c5b0 l     F .text	0000001c log_registered
0001c5cc l     F .text	0000000c log_chk_type
0001c5d8 l     F .text	00000014 log_chk_max_entry_len
0001c5ec l     F .text	00000016 log_call_append_cb
0001c608 l     F .text	00000138 log_append_prepare
0001c7fc l     F .text	0000003c log_read_last_hdr
0001c92c l     F .text	00000040 log_read_hdr_walk
10003a4c l     O .bss	00000001 log_written
100006a0 l     O .data	00000008 g_log_list
00000000 l    df *ABS*	00000000 log_console.c
0001c96c l     F .text	00000004 log_console_read
0001c970 l     F .text	00000004 log_console_walk
0001c974 l     F .text	00000004 log_console_flush
0001c978 l     F .text	00000048 log_console_print_hdr
0001c9c0 l     F .text	00000048 log_console_dump_cbor_entry
0001ca08 l     F .text	00000040 log_console_append_body
0001ca48 l     F .text	0000001c log_console_append
10003a50 l     O .bss	0000001c log_console
00000000 l    df *ABS*	00000000 log_level.c
10003a6c l     O .bss	00000080 log_level_map
00000000 l    df *ABS*	00000000 modlog.c
0001caec l     F .text	00000028 modlog_find_by_module
0001cb14 l     F .text	0000003c modlog_insert
0001cb50 l     F .text	0000001c modlog_alloc
0001cb6c l     F .text	00000058 modlog_infer_handle
0001cbc4 l     F .text	00000046 modlog_register_no_lock
0001cc0a l     F .text	0000002a modlog_append_one
0001cc34 l     F .text	00000084 modlog_append_no_lock
10003aec l     O .bss	00000004 modlog_first_dflt
10003af0 l     O .bss	000000c0 modlog_mapping_buf
10003bcc l     O .bss	00000004 modlog_mappings
10003bd0 l     O .bss	00000024 modlog_rwl
00000000 l    df *ABS*	00000000 shell.c
0001ce30 l     F .text	00000038 get_prompt
0001ce68 l     F .text	0000006c print_module_commands
0001ced4 l     F .text	00000030 print_modules
0001cf04 l     F .text	00000044 print_command_params
0001cf48 l     F .text	0000004c get_destination_module
0001cf94 l     F .text	0000001c set_default_module
0001cfb0 l     F .text	00000020 select_module
0001cfd0 l     F .text	00000080 get_command_and_module
0001d050 l     F .text	000000d0 shell_find_cmd
0001d120 l     F .text	000000e0 show_cmd_help
0001d200 l     F .text	00000088 show_help
0001d288 l     F .text	00000038 print_prompt
0001d2c0 l     F .text	00000016 print_prompt_if_console
0001d2d8 l     F .text	000000fc complete_module
0001d3d4 l     F .text	0000010c complete_command
0001d4e0 l     F .text	00000048 get_command_from_module
0001d528 l     F .text	000000e8 complete_param
0001d610 l     F .text	0000003c get_token
0001d64c l     F .text	00000048 complete_select
0001d694 l     F .text	00000070 line2argv
0001d704 l     F .text	0000001e get_last_token
0001d724 l     F .text	00000164 completion
0001d888 l     F .text	00000030 shell_avail_queue_init
0001d9aa l     F .text	0000002c shell
0001d984 l     F .text	00000026 shell_process_command
10003bf4 l     O .bss	00000010 app_cmd
10003c04 l     O .bss	00000004 app_prompt_handler
10003c08 l     O .bss	00000200 buf
10003e08 l     O .bss	00000150 compat_commands
10003f58 l     O .bss	00000004 module_registered
10003f5c l     O .bss	00000004 num_compat_commands
10003f60 l     O .bss	00000004 num_of_shell_entities
10003f64 l     O .bss	00000004 prompt
10003f68 l     O .bss	00000020 shell_console_ev
10003f88 l     O .bss	00000018 shell_modules
100006a8 l     O .data	00000004 default_module
00038858 l     O .text	00000010 shell_cmd_help
00038868 l     O .text	00000010 shell_cmd_select_module
00000000 l    df *ABS*	00000000 shell_os.c
0001db18 l     F .text	00000024 shell_os_ls_dev
0001dccc l     F .text	000000f0 shell_os_tasks_display_cmd
00038a7c l     O .text	0000000c date_help
00038a88 l     O .text	00000010 date_params
00038a98 l     O .text	0000000c ls_dev_help
00038aa4 l     O .text	0000000c mpool_help
00038ab0 l     O .text	00000010 mpool_params
00038ac0 l     O .text	00000060 os_commands
00038b34 l     O .text	0000000c tasks_help
00038b20 l     O .text	0000000c reset_help
00038b2c l     O .text	00000008 reset_params
00038b40 l     O .text	00000010 tasks_params
00000000 l    df *ABS*	00000000 stats.c
0001ddfc l     F .text	00000010 stats_offset
0001de0c l     F .text	0000004c stats_register_internal
0001de7c l     F .text	00000038 stats_module_init_internal
00000000 l    df *ABS*	00000000 sysdown.c
0001df54 l     F .text	00000014 sysdown_complete
0001df68 l     F .text	00000016 sysdown_timer_exp
10003fb4 l     O .bss	00000004 sysdown_num_in_progress
10003fb8 l     O .bss	00000020 sysdown_timer
00000000 l    df *ABS*	00000000 sysinit.c
0001e04c l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 datetime.c
0001e06c l     F .text	00000044 leapyear
0001e0b0 l     F .text	00000032 parse_number
00038b88 l     O .text	00000030 month_days
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 rwlock.c
0001e760 l     F .text	0000000c rwlock_complete_handoff
0001e76c l     F .text	0000001a rwlock_read_must_block
0001e786 l     F .text	00000016 rwlock_write_must_block
0001e79c l     F .text	0000003a rwlock_unblock
00000000 l    df *ABS*	00000000 streamer.c
00000000 l    df *ABS*	00000000 streamer_console.c
0001e91e l     F .text	0000000c streamer_console_vprintf
0001e92a l     F .text	0000000e streamer_console_write
100006b8 l     O .data	00000004 streamer_console
00038bb8 l     O .text	00000008 streamer_cfg_console
00000000 l    df *ABS*	00000000 ble_ll.c
0001e940 l     F .text	00000070 ble_ll_count_rx_adv_pdus
0001e9b0 l     F .text	00000060 ble_ll_count_rx_stats
0001ea10 l     F .text	00000020 ble_ll_flush_pkt_queue
0001ea84 l     F .text	00000038 ble_ll_validate_task
0001eabc l     F .text	0000001c ble_ll_hw_err_timer_cb
0001ead8 l     F .text	0000000a ble_ll_event_comp_pkts
0001eae2 l     F .text	00000008 ble_ll_event_dbuf_overflow
0001eaec l     F .text	00000080 ble_ll_tx_pkt_in
0001eb6c l     F .text	00000008 ble_ll_event_tx_pkt
0001eb74 l     F .text	00000098 ble_ll_rx_pkt_in
0001ec0c l     F .text	00000008 ble_ll_event_rx_pkt
10004178 l     O .bss	00000180 g_ble_ll_stack
00038bc8 l     O .text	00000008 g_ble_ll_pdu_header_tx_time
00000000 l    df *ABS*	00000000 ble_ll_adv.c
0001f090 l     F .text	0000001a ble_ll_adv_first_chan
0001f0aa l     F .text	0000001a ble_ll_adv_final_chan
0001f0c4 l     F .text	00000016 ble_ll_adv_flags_set
0001f0da l     F .text	00000018 ble_ll_adv_flags_clear
0001f0f2 l     F .text	0000007c ble_ll_adv_rpa_update
0001f16e l     F .text	00000016 ble_ll_adv_active_chanset_clear
0001f184 l     F .text	00000030 ble_ll_adv_drop_event
0001f1b4 l     F .text	00000038 ble_ll_adv_tx_done
0001f1ec l     F .text	00000050 ble_ll_adv_sm_find_configured
0001f23c l     F .text	00000034 ble_ll_adv_active_chanset_set_pri
0001f270 l     F .text	0000002c ble_ll_adv_scheduled
0001f29c l     F .text	00000068 ble_ll_adv_set_sched
0001f430 l     F .text	000000ec ble_ll_adv_tx_start_cb
0001f304 l     F .text	0000012c ble_ll_adv_sm_start
0001f51c l     F .text	000000aa ble_ll_adv_legacy_pdu_make
0001f5c6 l     F .text	00000052 ble_ll_adv_update_adv_scan_rsp_data
0001f618 l     F .text	0000006c ble_ll_adv_sm_stop
0001f684 l     F .text	0000002e ble_ll_adv_set_enable
0001f6b2 l     F .text	0000006a ble_ll_adv_update_data_mbuf
0001f71c l     F .text	000000a2 ble_ll_adv_set_scan_rsp_data
0001f7be l     F .text	000000bc ble_ll_adv_set_adv_data
0001f87c l     F .text	000000fc ble_ll_adv_conn_req_rxd
0001f978 l     F .text	00000026 ble_ll_adv_sm_stop_timeout
0001f9a0 l     F .text	00000054 ble_ll_adv_reschedule_event
0001f9f4 l     F .text	00000034 ble_ll_adv_sm_init
0001fb84 l     F .text	0000000a ble_ll_adv_event_done
0001fa50 l     F .text	00000124 ble_ll_adv_done
0001fb74 l     F .text	00000010 ble_ll_adv_make_done
00000000 l    df *ABS*	00000000 ble_ll_conn.c
0001fec8 l     F .text	0000004a ble_ll_conn_calc_dci_csa1
0001ff14 l     F .text	00000018 ble_ll_conn_halt
0001ff2c l     F .text	00000014 ble_ll_conn_current_sm_over
0001ff40 l     F .text	00000010 ble_ll_conn_rxend_unencrypt
0001ff50 l     F .text	00000010 ble_ll_conn_txend_encrypt
0001ff60 l     F .text	00000008 ble_ll_conn_wait_txend
0001ff68 l     F .text	0000006c ble_ll_conn_central_common_init
00020604 l     F .text	00000160 ble_ll_conn_event_start_cb
0001ffd4 l     F .text	00000028 ble_ll_init_get_conn_comp_ev
0001fffc l     F .text	0000002e ble_ll_conn_start_rx_encrypt
0002002a l     F .text	00000010 ble_ll_conn_start_rx_unencrypt
0002003a l     F .text	00000016 ble_ll_conn_continue_rx_encrypt
00020050 l     F .text	0000002a ble_ll_conn_adjust_pyld_len
0002007a l     F .text	0000006c ble_ll_conn_chk_csm_flags
000200e8 l     F .text	00000058 ble_ll_conn_get_next_sched_time
00020140 l     F .text	000004c4 ble_ll_conn_tx_pdu
00020840 l     F .text	000002f0 ble_ll_conn_next_event
00020b30 l     F .text	00000178 ble_ll_conn_created
00020ca8 l     F .text	00000016 ble_ll_conn_set_csa
00020cc0 l     F .text	000000c4 ble_ll_conn_central_start
00021084 l     F .text	0000014c ble_ll_conn_event_end
00000000 l    df *ABS*	00000000 ble_ll_conn_hci.c
00021864 l     F .text	00000028 ble_ll_init_alloc_conn_comp_ev
000218e2 l     F .text	00000044 ble_ll_conn_hci_create_check_params
00021926 l     F .text	00000066 ble_ll_conn_process_conn_params
00021b1c l     F .text	00000034 ble_ll_conn_hci_cancel_conn_complete_event
10004630 l     O .bss	00000004 g_ble_ll_last_num_comp_pkt_evt
00000000 l    df *ABS*	00000000 ble_ll_ctrl.c
00022430 l     F .text	00000038 ble_ll_ctrl_enc_allowed_pdu
00022468 l     F .text	0000001a ble_ll_ctrl_rx_pause_enc_req
00022482 l     F .text	0000000e ble_ll_ctrl_start_rsp_timer
00022490 l     F .text	0000003a ble_ll_ctrl_rx_start_enc_req
000224ca l     F .text	0000003a ble_ll_ctrl_rx_pause_enc_rsp
00022504 l     F .text	00000114 ble_ll_ctrl_conn_upd_make
00022618 l     F .text	000000ca ble_ll_ctrl_conn_param_pdu_make
000226e2 l     F .text	00000026 ble_ll_ctrl_version_ind_make
00022708 l     F .text	00000028 ble_ll_ctrl_datalen_upd_make
00022730 l     F .text	00000044 ble_ll_ctrl_chanmap_req_make
00022774 l     F .text	00000028 ble_ll_ctrl_update_features
0002279c l     F .text	00000052 ble_ll_ctrl_rx_feature_req
000227ee l     F .text	00000048 ble_ll_ctrl_enc_req_make
00022838 l     F .text	000000f8 ble_ll_ctrl_proc_init
00022930 l     F .text	00000088 ble_ll_ctrl_rx_conn_update
000229b8 l     F .text	0000004c ble_ll_ctrl_rx_chanmap_req
00022a04 l     F .text	0000000c ble_ll_ctrl_proc_rsp_timer_cb
00022a10 l     F .text	00000066 ble_ll_ctrl_len_proc
00022a76 l     F .text	0000007c ble_ll_ctrl_rx_enc_req
00022b04 l     F .text	0000003c ble_ll_ctrl_rx_enc_rsp
00022c10 l     F .text	00000164 ble_ll_ctrl_conn_param_pdu_proc
00022d74 l     F .text	00000034 ble_ll_ctrl_rx_conn_param_rsp
00022f48 l     F .text	000000cc ble_ll_ctrl_proc_unk_rsp
00023014 l     F .text	00000038 ble_ll_ctrl_rx_feature_rsp
0002304c l     F .text	00000060 ble_ll_ctrl_rx_version_ind
000230ac l     F .text	00000064 ble_ll_ctrl_rx_start_enc_rsp
00023110 l     F .text	0000000a ble_ll_ctrl_rx_ping_rsp
0002311a l     F .text	00000080 ble_ll_ctrl_rx_conn_param_req
0002319a l     F .text	00000094 ble_ll_ctrl_rx_reject_ind
00000000 l    df *ABS*	00000000 ble_ll_hci.c
00023644 l     F .text	00000004 ble_ll_hci_get_num_cmd_pkts
00023648 l     F .text	00000020 ble_ll_hci_rd_local_version
00023668 l     F .text	0000001c ble_ll_hci_rd_local_supp_feat
00023684 l     F .text	00000018 ble_ll_hci_rd_bd_addr
0002369c l     F .text	0000001c ble_ll_hci_set_le_event_mask
000236b8 l     F .text	00000018 ble_ll_hci_le_read_bufsize
000236d0 l     F .text	00000018 ble_ll_hci_le_rd_sugg_data_len
000236e8 l     F .text	00000020 ble_ll_hci_le_rd_max_data_len
00023708 l     F .text	0000004a ble_ll_hci_le_cmd_send_cmd_status
00023754 l     F .text	0000001c ble_ll_read_rf_path_compensation
00023770 l     F .text	0000001c ble_ll_hci_cb_set_event_mask
0002378c l     F .text	0000001c ble_ll_hci_cb_set_event_mask2
000237a8 l     F .text	00000010 ble_ll_hci_disconnect
000237b8 l     F .text	00000022 ble_ll_hci_link_ctrl_cmd_proc
000237da l     F .text	0000004c ble_ll_hci_ctlr_bb_cmd_proc
00023828 l     F .text	0000004c ble_ll_hci_rd_local_supp_cmd
00023874 l     F .text	0000005a ble_ll_hci_info_params_cmd_proc
000238ce l     F .text	00000016 ble_ll_hci_status_params_cmd_proc
000238e4 l     F .text	00000016 ble_ll_hci_le_read_local_features
000238fa l     F .text	00000042 ble_ll_hci_le_encrypt
0002393c l     F .text	00000012 ble_ll_hci_le_rand
0002394e l     F .text	00000016 ble_ll_hci_le_read_supp_states
00023964 l     F .text	00000060 ble_ll_hci_le_wr_sugg_data_len
000239c4 l     F .text	00000020 ble_ll_read_tx_power
000239e4 l     F .text	00000064 ble_ll_write_rf_path_compensation
00023a48 l     F .text	000002be ble_ll_hci_le_cmd_proc
00023d3c l     F .text	00000148 ble_ll_hci_cmd_proc
10004634 l     O .bss	00000010 g_ble_ll_hci_cmd_ev
10004648 l     O .bss	00000008 g_ble_ll_hci_event_mask
10004650 l     O .bss	00000008 g_ble_ll_hci_event_mask2
10004658 l     O .bss	00000008 g_ble_ll_hci_le_event_mask
10004660 l     O .bss	00000002 rx_path_pwr_compensation
10004662 l     O .bss	00000002 tx_path_pwr_compensation
00000000 l    df *ABS*	00000000 ble_ll_hci_ev.c
00000000 l    df *ABS*	00000000 ble_ll_hci_vs.c
0002427c l     F .text	00000018 ble_ll_hci_vs_find_by_ocf
00024294 l     F .text	00000044 ble_ll_hci_vs_is_controller_busy
000242d8 l     F .text	00000048 ble_ll_hci_vs_set_tx_power
00024320 l     F .text	00000032 ble_ll_hci_vs_rd_static_addr
10004664 l     O .bss	00000004 g_ble_ll_hci_vs_list
100006bc l     O .data	00000018 g_ble_ll_hci_vs_cmds
00000000 l    df *ABS*	00000000 ble_ll_rand.c
10004694 l     O .bss	00000006 xsubi.20467
100006d4 l     O .data	00000001 init.20468
00000000 l    df *ABS*	00000000 ble_ll_resolv.c
00024558 l     F .text	00000018 ble_ll_resolv_irk_nonzero
00024570 l     F .text	00000028 ble_ll_is_controller_busy
00024598 l     F .text	00000020 ble_ll_resolv_list_chg_allowed
000245b8 l     F .text	00000040 ble_ll_is_on_resolv_list
000245f8 l     F .text	00000078 ble_ll_resolv_gen_priv_addr
00024670 l     F .text	00000064 ble_ll_resolv_rpa_timer_cb
00000000 l    df *ABS*	00000000 ble_ll_rfmgmt.c
1000479c l     O .bss	00000001 enabled.20603
00000000 l    df *ABS*	00000000 ble_ll_scan.c
00024bc0 l     F .text	0000000e ble_ll_scan_get_next_adv_prim_chan
00024bce l     F .text	0000002a ble_ll_scan_move_window_to
00024bf8 l     F .text	00000030 ble_ll_scan_is_inside_window
00024c28 l     F .text	00000064 ble_ll_scan_get_addr_data_from_legacy
00024c8c l     F .text	000000c4 ble_ll_scan_req_backoff
00024d50 l     F .text	00000060 ble_ll_scan_dup_update_legacy
00024dbc l     F .text	000000a0 ble_ll_scan_start
00024e5c l     F .text	000000a0 ble_ll_scan_rx_pkt_in_restore_addr_data
00024efc l     F .text	000000f8 ble_ll_scan_dup_check_legacy
00024ff4 l     F .text	00000064 ble_ll_hci_send_dir_adv_report
00025058 l     F .text	00000094 ble_ll_hci_send_adv_report
000250ec l     F .text	000000c8 ble_ll_scan_send_adv_report
000251b4 l     F .text	00000094 ble_ll_scan_rx_pkt_in_on_legacy
00025248 l     F .text	00000090 ble_ll_scan_sm_start
000252d8 l     F .text	000000b4 ble_ll_scan_event_proc
0002538c l     F .text	0000007c ble_ll_scan_common_init
000255f8 l     F .text	00000024 ble_ll_scan_interrupted_event_cb
000254a0 l     F .text	000000ec ble_ll_scan_set_enable
1000479d l     O .bss	00000001 g_ble_ll_scan_num_rsp_advs
100047a0 l     O .bss	00000014 g_ble_ll_scan_params
10004804 l     O .bss	00000088 g_ble_ll_scan_sm
1000488c l     O .bss	00000008 g_scan_dup_list
10004894 l     O .bss	00000080 g_scan_dup_mem
10004914 l     O .bss	0000001c g_scan_dup_pool
00000000 l    df *ABS*	00000000 ble_ll_sched.c
000258d4 l     F .text	00000004 preempt_any
000258d8 l     F .text	00000004 preempt_none
000258dc l     F .text	00000030 preempt_any_except_conn
0002590c l     F .text	00000024 ble_ll_sched_overlaps_current
00025930 l     F .text	00000060 ble_ll_sched_preempt
00025990 l     F .text	00000138 ble_ll_sched_insert
00025ac8 l     F .text	00000084 ble_ll_sched_execute_item
00025b4c l     F .text	00000054 ble_ll_sched_run
10004934 l     O .bss	00000008 g_ble_ll_sched_q
1000493c l     O .bss	00000001 g_ble_ll_sched_q_head_changed
10004940 l     O .bss	00000018 g_ble_ll_sched_timer
00000000 l    df *ABS*	00000000 ble_ll_utils.c
00038c50 l     O .text	00000010 g_ble_sca_ppm_tbl
00000000 l    df *ABS*	00000000 ble_ll_whitelist.c
000260f8 l     F .text	00000004 ble_ll_whitelist_search
000260fc l     F .text	00000018 ble_ll_whitelist_chg_allowed
00000000 l    df *ABS*	00000000 ble_hw.c
10004958 l     O .bss	00000004 rng_cb
1000495c l     O .bss	00000001 rng_started
00000000 l    df *ABS*	00000000 ble_phy.c
100049bc l     O .bss	00000101 g_ble_phy_tx_buf
00000000 l    df *ABS*	00000000 ble_att.c
00026388 l     F .text	00000028 ble_att_rx_dispatch_entry_find
000263b0 l     F .text	000001f4 ble_att_inc_rx_stat
000265a4 l     F .text	00000032 ble_att_rx_handle_unknown_request
000265d6 l     F .text	00000084 ble_att_rx
10004abe l     O .bss	00000002 ble_att_preferred_mtu_val
00038c68 l     O .text	000000d8 ble_att_rx_dispatch
00000000 l    df *ABS*	00000000 ble_att_clt.c
00026984 l     F .text	0000002c ble_att_clt_parse_find_type_value_hinfo
000269b0 l     F .text	0000003e ble_att_clt_parse_read_group_type_adata
000269ee l     F .text	00000074 ble_att_clt_parse_find_info_entry
00000000 l    df *ABS*	00000000 ble_att_cmd.c
00000000 l    df *ABS*	00000000 ble_att_svr.c
0002712c l     F .text	00000010 ble_att_svr_next_id
0002713c l     F .text	00000024 ble_att_svr_prep_find_prev
00027160 l     F .text	0000005c ble_att_svr_prep_validate
000271bc l     F .text	00000082 ble_att_svr_move_entries
00027240 l     F .text	00000020 ble_att_svr_entry_alloc
00027260 l     F .text	0000001a ble_att_svr_get_sec_state
0002727a l     F .text	0000010c ble_att_svr_check_perms
00027386 l     F .text	00000062 ble_att_svr_read
000273e8 l     F .text	00000064 ble_att_svr_write
0002744c l     F .text	00000018 ble_att_svr_pullup_req_base
00027464 l     F .text	0000006e ble_att_svr_build_mtu_rsp
000274d2 l     F .text	00000024 ble_att_svr_pkt
000274f6 l     F .text	00000032 ble_att_svr_build_write_rsp
00027528 l     F .text	00000032 ble_att_svr_build_indicate_rsp
0002755c l     F .text	0000009c ble_att_svr_fill_info
000275f8 l     F .text	0000005e ble_att_svr_build_find_info_rsp
00027656 l     F .text	00000050 ble_att_svr_read_group_type_entry_write
000276a6 l     F .text	00000024 ble_att_svr_is_valid_find_group_type
000276ca l     F .text	00000058 ble_att_svr_is_valid_group_end
00027722 l     F .text	00000016 ble_att_svr_is_valid_read_group_type
00027738 l     F .text	0000005c ble_att_svr_read_flat
00027794 l     F .text	0000005c ble_att_svr_fill_type_value_entry
000277f0 l     F .text	000000e8 ble_att_svr_fill_type_value
000278d8 l     F .text	0000005e ble_att_svr_build_find_type_value_rsp
00027936 l     F .text	00000034 ble_att_svr_service_uuid
0002796c l     F .text	00000178 ble_att_svr_build_read_group_type_rsp
00027ae4 l     F .text	0000001c ble_att_svr_prep_free
00027b00 l     F .text	0000003c ble_att_svr_prep_alloc
00027b3c l     F .text	00000010 ble_att_svr_entry_free
00027b4c l     F .text	0000007a ble_att_svr_insert_prep_entry
00027bc6 l     F .text	00000048 ble_att_svr_prep_extract
00027c10 l     F .text	00000014 ble_att_svr_free_start_mem
00027c98 l     F .text	00000030 ble_att_svr_write_handle
00027cc8 l     F .text	00000064 ble_att_svr_prep_write
00027d64 l     F .text	0000013e ble_att_svr_build_read_type_rsp
00027ee8 l     F .text	000000a4 ble_att_svr_build_read_mult_rsp
00027ff4 l     F .text	000000ac ble_att_svr_tx_rsp
10004ba4 l     O .bss	00000004 ble_att_svr_entry_mem
10004ba8 l     O .bss	0000001c ble_att_svr_entry_pool
10004bc4 l     O .bss	00000008 ble_att_svr_hidden_list
10004bcc l     O .bss	00000002 ble_att_svr_id
10004bd0 l     O .bss	00000008 ble_att_svr_list
10004bd8 l     O .bss	00000300 ble_att_svr_prep_entry_mem
10004ed8 l     O .bss	0000001c ble_att_svr_prep_entry_pool
00000000 l    df *ABS*	00000000 ble_eddystone.c
000288d4 l     F .text	0000001c ble_eddystone_set_svc_data_base
000288f0 l     F .text	00000074 ble_eddystone_set_adv_data_gen
10004ef4 l     O .bss	00000016 ble_eddystone_svc_data
10004f0c l     O .bss	00000010 ble_eddystone_uuids16
00000000 l    df *ABS*	00000000 ble_gap.c
000289d2 l     F .text	0000002a ble_gap_call_event_cb
000289fc l     F .text	0000002c ble_gap_is_preempted
00028a28 l     F .text	00000010 ble_gap_has_client
00028a38 l     F .text	00000012 ble_gap_update_to_l2cap
00028a4c l     F .text	00000018 ble_gap_adv_active_instance
00028a64 l     F .text	00000020 ble_gap_accept_master_conn
00028a84 l     F .text	0000003c ble_gap_accept_slave_conn
00028ac0 l     F .text	00000024 ble_gap_wl_busy
00028ae4 l     F .text	00000028 ble_gap_adv_type
00028b0c l     F .text	00000032 ble_gap_adv_dflt_itvls
00028b3e l     F .text	0000002e ble_gap_disc_fill_dflts
00028b6c l     F .text	00000024 ble_gap_update_entry_find
00028b90 l     F .text	00000046 ble_gap_validate_conn_params
00028bd8 l     F .text	00000020 ble_gap_event_listener_call
00028bf8 l     F .text	00000034 ble_gap_extract_conn_cb
00028c2c l     F .text	00000022 ble_gap_call_conn_event_cb
00028c4e l     F .text	0000009a ble_gap_fill_conn_desc
00028ce8 l     F .text	00000016 ble_gap_conn_to_snapshot
00028cfe l     F .text	00000028 ble_gap_find_snapshot
00028d26 l     F .text	0000001e ble_gap_rd_rem_sup_feat_tx
00028d44 l     F .text	0000001a ble_gap_conn_cancel_tx
00028d5e l     F .text	0000002e ble_gap_disc_enable_tx
00028d8c l     F .text	0000000c ble_gap_disc_disable_tx
00028d98 l     F .text	00000024 ble_gap_adv_enable_tx
00028dbc l     F .text	0000001a ble_gap_wl_tx_clear
00028dd6 l     F .text	0000003a ble_gap_wl_tx_add
00028e10 l     F .text	00000094 ble_gap_adv_params_tx
00028ea4 l     F .text	00000046 ble_gap_disc_tx_params
00028eea l     F .text	00000042 ble_gap_tx_param_pos_reply
00028f2c l     F .text	00000022 ble_gap_tx_param_neg_reply
00028f4e l     F .text	00000042 ble_gap_update_tx
00028f90 l     F .text	00000082 ble_gap_conn_create_tx
00029014 l     F .text	00000030 ble_gap_update_entry_remove
00029044 l     F .text	00000020 ble_gap_slave_reset_state
00029064 l     F .text	0000002c ble_gap_slave_extract_cb
00029090 l     F .text	00000038 ble_gap_adv_finished
000290c8 l     F .text	00000024 ble_gap_master_reset_state
000290ec l     F .text	00000030 ble_gap_master_extract_state
0002911c l     F .text	00000038 ble_gap_master_connect_failure
00029154 l     F .text	0000003c ble_gap_disc_complete
00029190 l     F .text	00000046 ble_gap_disc_report
000291d6 l     F .text	00000046 ble_gap_master_connect_cancelled
0002921c l     F .text	00000038 ble_gap_master_failed
00029254 l     F .text	00000014 ble_gap_update_entry_free
00029268 l     F .text	00000034 ble_gap_master_ticks_until_exp
0002929c l     F .text	00000050 ble_gap_master_timer
000292ec l     F .text	0000003c ble_gap_update_next_exp
00029328 l     F .text	0000003c ble_gap_update_timer
00029364 l     F .text	00000034 ble_gap_slave_ticks_until_exp
00029398 l     F .text	0000002c ble_gap_slave_timer
000293c4 l     F .text	00000020 ble_gap_slave_set_timer
000293e4 l     F .text	00000020 ble_gap_master_set_timer
00029404 l     F .text	0000005c ble_gap_rx_adv_report_sanity_check
00029460 l     F .text	00000074 ble_gap_log_wl
000294d4 l     F .text	00000074 ble_gap_log_adv
00029548 l     F .text	0000002c ble_gap_log_duration
00029574 l     F .text	00000038 ble_gap_log_disc
000295ac l     F .text	00000078 ble_gap_log_conn
00029624 l     F .text	00000030 ble_gap_log_update
00029654 l     F .text	00000084 ble_gap_adv_validate
000296d8 l     F .text	00000024 ble_gap_update_entry_alloc
00029d90 l     F .text	00000044 ble_gap_adv_stop_no_lock
00029dfc l     F .text	00000038 ble_gap_disc_cancel_no_lock
00029e5c l     F .text	00000038 ble_gap_disc_ext_validate
00029e94 l     F .text	00000048 ble_gap_disc_validate
0002a13c l     F .text	00000048 ble_gap_conn_cancel_no_lock
0002a218 l     F .text	0000003e ble_gap_update_notify
0002a440 l     F .text	0000002c ble_gap_update_l2cap_cb
0002a46c l     F .text	00000034 ble_gap_update_failed
10004f1c l     O .bss	00000004 ble_gap_event_listener_list
10004fa8 l     O .bss	00000004 ble_gap_update_entries
10004fac l     O .bss	00000018 ble_gap_update_entry_mem
10004fc4 l     O .bss	0000001c ble_gap_update_entry_pool
10004fe0 l     O .bss	00000014 ble_gap_master
10004ff4 l     O .bss	00000010 ble_gap_slave
10005004 l     O .bss	0000000c preempt_done_mutex
10005010 l     O .bss	00000008 slaves.23925
00039190 l     O .text	00000010 ble_gap_conn_params_dflt
00000000 l    df *ABS*	00000000 ble_gattc.c
0002a9b0 l     F .text	00000020 ble_gattc_rx_entry_find
0002a9d0 l     F .text	0000000c ble_gattc_err_dispatch_get
0002a9dc l     F .text	0000000c ble_gattc_resume_dispatch_get
0002a9e8 l     F .text	0000000c ble_gattc_tmo_dispatch_get
0002a9f4 l     F .text	00000024 ble_gattc_proc_matches_conn_op
0002aa18 l     F .text	0000001e ble_gattc_proc_matches_expired
0002aa36 l     F .text	0000002c ble_gattc_proc_matches_conn_rx_entry
0002aa62 l     F .text	00000008 ble_gattc_proc_matches_stalled
0002aa6a l     F .text	00000014 ble_gattc_proc_timeout
0002aa80 l     F .text	0000001c ble_gattc_error
0002aa9c l     F .text	00000038 ble_gattc_mtu_cb
0002aad4 l     F .text	0000000e ble_gattc_mtu_tmo
0002aae2 l     F .text	0000000a ble_gattc_mtu_err
0002aaec l     F .text	00000038 ble_gattc_disc_all_svcs_cb
0002ab24 l     F .text	0000000e ble_gattc_disc_all_svcs_tmo
0002ab32 l     F .text	00000016 ble_gattc_disc_all_svcs_err
0002ab48 l     F .text	00000038 ble_gattc_disc_svc_uuid_cb
0002ab80 l     F .text	0000000e ble_gattc_disc_svc_uuid_tmo
0002ab8e l     F .text	00000014 ble_gattc_disc_svc_uuid_err
0002aba2 l     F .text	0000004a ble_gattc_disc_svc_uuid_rx_hinfo
0002abec l     F .text	00000038 ble_gattc_find_inc_svcs_cb
0002ac24 l     F .text	0000000e ble_gattc_find_inc_svcs_tmo
0002ac32 l     F .text	00000018 ble_gattc_find_inc_svcs_err
0002ac4c l     F .text	00000038 ble_gattc_disc_all_chrs_cb
0002ac84 l     F .text	0000000e ble_gattc_disc_all_chrs_tmo
0002ac92 l     F .text	00000014 ble_gattc_disc_all_chrs_err
0002aca8 l     F .text	00000038 ble_gattc_disc_chr_uuid_cb
0002ace0 l     F .text	0000000e ble_gattc_disc_chr_uuid_tmo
0002acee l     F .text	00000014 ble_gattc_disc_chr_uuid_err
0002ad04 l     F .text	00000040 ble_gattc_disc_all_dscs_cb
0002ad44 l     F .text	0000000e ble_gattc_disc_all_dscs_tmo
0002ad52 l     F .text	00000014 ble_gattc_disc_all_dscs_err
0002ad66 l     F .text	00000046 ble_gattc_disc_all_dscs_rx_idata
0002adac l     F .text	00000038 ble_gattc_read_cb
0002ade4 l     F .text	0000000e ble_gattc_read_tmo
0002adf2 l     F .text	0000000a ble_gattc_read_err
0002adfc l     F .text	00000026 ble_gattc_read_rx_read_rsp
0002ae24 l     F .text	00000038 ble_gattc_read_uuid_cb
0002ae5c l     F .text	0000000e ble_gattc_read_uuid_tmo
0002ae6a l     F .text	0000000a ble_gattc_read_uuid_err
0002ae74 l     F .text	0000001c ble_gattc_read_uuid_rx_complete
0002ae90 l     F .text	00000038 ble_gattc_read_long_cb
0002aec8 l     F .text	0000000e ble_gattc_read_long_tmo
0002aed6 l     F .text	0000000a ble_gattc_read_long_err
0002aee0 l     F .text	00000054 ble_gattc_read_mult_cb
0002af34 l     F .text	0000000e ble_gattc_read_mult_tmo
0002af42 l     F .text	0000000a ble_gattc_read_mult_err
0002af4c l     F .text	00000038 ble_gattc_write_long_cb
0002af84 l     F .text	0000000c ble_gattc_write_long_tmo
0002af90 l     F .text	0000001a ble_gattc_write_long_rx_exec
0002afac l     F .text	00000044 ble_gattc_write_reliable_cb
0002aff0 l     F .text	0000000c ble_gattc_write_reliable_tmo
0002affc l     F .text	0000000c ble_gattc_write_reliable_rx_exec
0002b008 l     F .text	0000002c ble_gattc_proc_set_resume_timer
0002b034 l     F .text	00000014 ble_gattc_process_resume_status
0002b048 l     F .text	00000010 ble_gattc_proc_set_exp_timer
0002b058 l     F .text	00000028 ble_gattc_ticks_until_resume
0002b080 l     F .text	00000078 ble_gattc_extract
0002b0f8 l     F .text	0000002c ble_gattc_extract_expired
0002b124 l     F .text	00000014 ble_gattc_extract_stalled
0002b138 l     F .text	00000020 ble_gattc_extract_by_conn_op
0002b158 l     F .text	00000014 ble_gattc_extract_first_by_conn_op
0002b16c l     F .text	00000014 ble_gattc_extract_one
0002b180 l     F .text	00000028 ble_gattc_extract_with_rx_entry
0002b1a8 l     F .text	00000020 ble_gattc_proc_insert
0002b1c8 l     F .text	00000010 ble_gattc_indicate_tmo
0002b1d8 l     F .text	00000044 ble_gattc_write_cb
0002b21c l     F .text	0000000c ble_gattc_write_tmo
0002b228 l     F .text	00000008 ble_gattc_write_err
0002b230 l     F .text	00000044 ble_gattc_proc_free
0002b274 l     F .text	0000003e ble_gattc_fail_procs
0002b2b2 l     F .text	00000020 ble_gattc_write_reliable_err
0002b2d2 l     F .text	0000002a ble_gattc_write_long_err
0002b2fc l     F .text	0000008a ble_gattc_write_reliable_tx
0002b386 l     F .text	00000024 ble_gattc_write_reliable_resume
0002b3aa l     F .text	0000006e ble_gattc_write_long_tx
0002b418 l     F .text	00000024 ble_gattc_write_long_resume
0002b43c l     F .text	0000000c ble_gattc_read_tx
0002b448 l     F .text	0000001a ble_gattc_read_long_tx
0002b462 l     F .text	00000026 ble_gattc_read_long_resume
0002b488 l     F .text	0000006a ble_gattc_read_long_rx_read_rsp
0002b4f2 l     F .text	00000012 ble_gattc_disc_all_dscs_tx
0002b504 l     F .text	00000026 ble_gattc_disc_all_dscs_resume
0002b52a l     F .text	00000032 ble_gattc_disc_all_dscs_rx_complete
0002b55c l     F .text	00000024 ble_gattc_disc_chr_uuid_tx
0002b580 l     F .text	00000026 ble_gattc_disc_chr_uuid_resume
0002b5a6 l     F .text	00000032 ble_gattc_disc_chr_uuid_rx_complete
0002b5d8 l     F .text	00000024 ble_gattc_disc_all_chrs_tx
0002b5fc l     F .text	00000026 ble_gattc_disc_all_chrs_resume
0002b622 l     F .text	00000032 ble_gattc_disc_all_chrs_rx_complete
0002b654 l     F .text	00000030 ble_gattc_find_inc_svcs_tx
0002b684 l     F .text	00000026 ble_gattc_find_inc_svcs_resume
0002b6aa l     F .text	00000034 ble_gattc_find_inc_svcs_rx_complete
0002b6de l     F .text	00000012 ble_gattc_read_uuid_tx
0002b6f0 l     F .text	00000038 ble_gattc_disc_svc_uuid_tx
0002b728 l     F .text	00000026 ble_gattc_disc_svc_uuid_resume
0002b74e l     F .text	00000034 ble_gattc_disc_svc_uuid_rx_complete
0002b784 l     F .text	00000028 ble_gattc_disc_all_svcs_tx
0002b7ac l     F .text	00000026 ble_gattc_disc_all_svcs_resume
0002b7d2 l     F .text	00000036 ble_gattc_disc_all_svcs_rx_complete
0002b808 l     F .text	00000026 ble_gattc_process_status
0002b830 l     F .text	0000003c ble_gattc_resume_procs
0002b86c l     F .text	0000001c ble_gattc_proc_alloc
0002b888 l     F .text	00000014 ble_gattc_log_proc_init
0002b89c l     F .text	0000002c ble_gattc_log_find_inc_svcs
0002b8c8 l     F .text	0000002c ble_gattc_log_disc_all_chrs
0002b8f4 l     F .text	00000028 ble_gattc_log_disc_all_dscs
0002b91c l     F .text	00000020 ble_gattc_log_read
0002b93c l     F .text	00000020 ble_gattc_log_read_long
0002b95c l     F .text	00000064 ble_gattc_log_read_mult
0002b9c0 l     F .text	00000034 ble_gattc_log_write
0002b9f4 l     F .text	0000002c ble_gattc_log_write_long
0002ba20 l     F .text	00000068 ble_gattc_log_write_reliable
0002ba88 l     F .text	00000020 ble_gattc_log_notify
0002baa8 l     F .text	00000020 ble_gattc_log_indicate
0002bac8 l     F .text	00000036 ble_gattc_mtu_tx
0002bb00 l     F .text	00000020 ble_gattc_log_uuid
0002bb20 l     F .text	00000028 ble_gattc_log_disc_svc_uuid
0002bb48 l     F .text	00000040 ble_gattc_log_disc_chr_uuid
0002bb88 l     F .text	00000040 ble_gattc_log_read_uuid
0002bbc8 l     F .text	00000010 ble_gattc_read_mult_tx
0002bbd8 l     F .text	00000044 ble_gattc_read_uuid_rx_adata
0002bc1c l     F .text	00000028 ble_gattc_indicate_err
0002bc44 l     F .text	00000024 ble_gattc_indicate_rx_rsp
0002bc68 l     F .text	0000005a ble_gattc_disc_all_svcs_rx_adata
0002bcc2 l     F .text	0000007c ble_gattc_disc_all_chrs_rx_adata
0002bd3e l     F .text	0000008e ble_gattc_find_inc_svcs_rx_adata
0002bdcc l     F .text	0000009a ble_gattc_disc_chr_uuid_rx_adata
0002be66 l     F .text	00000070 ble_gattc_find_inc_svcs_rx_read_rsp
0002bed6 l     F .text	0000008c ble_gattc_write_reliable_rx_prep
0002bf62 l     F .text	0000007e ble_gattc_write_long_rx_prep
10005018 l     O .bss	000000e0 ble_gattc_proc_mem
100050f8 l     O .bss	0000001c ble_gattc_proc_pool
10005114 l     O .bss	00000008 ble_gattc_procs
1000511c l     O .bss	00000004 ble_gattc_resume_at
100051b8 l     O .bss	00000004 error.23597
000393d8 l     O .text	0000003c ble_gattc_err_dispatch
00039414 l     O .text	0000003c ble_gattc_resume_dispatch
00039450 l     O .text	00000010 ble_gattc_rx_exec_entries
00039460 l     O .text	00000010 ble_gattc_rx_prep_entries
00039470 l     O .text	00000018 ble_gattc_rx_read_rsp_entries
00039488 l     O .text	00000020 ble_gattc_rx_read_type_complete_entries
000394a8 l     O .text	00000020 ble_gattc_rx_read_type_elem_entries
000394c8 l     O .text	0000003c ble_gattc_tmo_dispatch
00000000 l    df *ABS*	00000000 ble_gatts.c
0002ca64 l     F .text	00000016 ble_gatts_chr_clt_cfg_allowed
0002ca7a l     F .text	00000056 ble_gatts_att_flags_from_chr_flags
0002cad0 l     F .text	00000056 ble_gatts_chr_properties
0002cb26 l     F .text	00000014 ble_gatts_chr_is_sane
0002cb3a l     F .text	0000000c ble_gatts_chr_op
0002cb48 l     F .text	00000020 ble_gatts_chr_inc_val_stat
0002cb68 l     F .text	0000002c ble_gatts_find_svc_entry_idx
0002cb94 l     F .text	00000040 ble_gatts_svc_incs_satisfied
0002cbd4 l     F .text	0000000c ble_gatts_dsc_op
0002cbe0 l     F .text	00000024 ble_gatts_dsc_inc_stat
0002cc04 l     F .text	00000014 ble_gatts_dsc_is_sane
0002cc18 l     F .text	00000024 ble_gatts_clt_cfg_find_idx
0002cc3c l     F .text	00000018 ble_gatts_clt_cfg_find
0002cc54 l     F .text	00000024 ble_gatts_svc_type_to_uuid
0002cc78 l     F .text	0000001a ble_gatts_svc_is_sane
0002cc94 l     F .text	0000000c ble_gatts_clt_cfg_size
0002cca0 l     F .text	00000038 ble_gatts_schedule_update
0002ccd8 l     F .text	000000e8 ble_gatts_count_resources
0002cdc0 l     F .text	000000f4 ble_gatts_clt_cfg_access_locked
0002ceb4 l     F .text	00000032 ble_gatts_subscribe_event
0002cf74 l     F .text	00000028 ble_gatts_register_inc
0002d30c l     F .text	00000058 ble_gatts_inc_access
0002cf9c l     F .text	00000034 ble_gatts_register_clt_cfg_dsc
0002cfd0 l     F .text	00000064 ble_gatts_register_dsc
0002d43e l     F .text	00000038 ble_gatts_dsc_access
0002d034 l     F .text	00000108 ble_gatts_register_chr
0002d2b0 l     F .text	0000005c ble_gatts_chr_def_access
0002d406 l     F .text	00000038 ble_gatts_chr_val_access
0002d13c l     F .text	000000cc ble_gatts_register_svc
0002d27c l     F .text	00000034 ble_gatts_svc_access
0002d208 l     F .text	00000074 ble_gatts_register_round
0002d364 l     F .text	000000a2 ble_gatts_val_access
0002d476 l     F .text	0000002a ble_gatts_mutable
0002d4a0 l     F .text	00000024 ble_gatts_free_mem
0002d4c4 l     F .text	0000001c ble_gatts_free_svc_defs
0002d4e0 l     F .text	0000006c ble_gatts_tx_notifications_one_chr
100051bc l     O .bss	00000004 ble_gatts_clt_cfg_mem
100051c0 l     O .bss	0000001c ble_gatts_clt_cfg_pool
100051dc l     O .bss	00000004 ble_gatts_clt_cfgs
100051e0 l     O .bss	00000004 ble_gatts_num_cfgable_chrs
100051e4 l     O .bss	00000004 ble_gatts_num_svc_defs
100051e8 l     O .bss	00000002 ble_gatts_num_svc_entries
10005220 l     O .bss	00000004 ble_gatts_svc_defs
10005224 l     O .bss	00000004 ble_gatts_svc_entries
100006d8 l     O .data	00000004 __compound_literal.0
100006dc l     O .data	00000004 __compound_literal.1
100006e0 l     O .data	00000004 __compound_literal.2
100006e4 l     O .data	00000004 __compound_literal.3
100006e8 l     O .data	00000004 __compound_literal.4
00000000 l    df *ABS*	00000000 ble_gatts_lcl.c
0002db48 l     F .text	00000060 ble_gatt_show_local_inc_svc
0002dba8 l     F .text	00000084 ble_gatts_flags_to_str
0002dc2c l     F .text	0000018c ble_gatt_show_local_chr
0002ddb8 l     F .text	0000009c ble_gatt_show_local_svc
100006ec l     O .data	00000004 __compound_literal.0
00039698 l     O .text	00000040 ble_gatt_chr_f_names
000396d8 l     O .text	00000024 ble_gatt_dsc_f_names
00000000 l    df *ABS*	00000000 ble_hs.c
0002de64 l     F .text	00000048 ble_hs_wakeup_tx_conn
0002deac l     F .text	00000018 ble_hs_event_rx_hci_ev
0002dec4 l     F .text	0000001c ble_hs_clear_rx_queue
0002dee0 l     F .text	0000002c ble_hs_rx_data
0002df0c l     F .text	00000008 ble_hs_event_tx_notify
0002df20 l     F .text	00000014 ble_hs_sched_start_stage2
0002df34 l     F .text	00000008 ble_hs_event_start_stage1
0002dfbc l     F .text	00000008 ble_hs_event_rx_data
0002e014 l     F .text	00000020 ble_hs_timer_reset
0002e034 l     F .text	00000030 ble_hs_timer_sched
0002e064 l     F .text	00000064 ble_hs_sync
0002e0c8 l     F .text	00000050 ble_hs_reset
0002e118 l     F .text	00000008 ble_hs_event_reset
0002e120 l     F .text	00000054 ble_hs_timer_exp
0002e290 l     F .text	0000001e ble_hs_event_start_stage2
1000522c l     O .bss	00000010 ble_hs_ev_reset
1000523c l     O .bss	00000010 ble_hs_ev_start_stage1
1000524c l     O .bss	00000010 ble_hs_ev_start_stage2
1000525c l     O .bss	00000010 ble_hs_ev_tx_notifications
1000526c l     O .bss	00000004 ble_hs_evq
1000528c l     O .bss	000000a0 ble_hs_hci_os_event_buf
10005334 l     O .bss	0000000c ble_hs_mutex
10005340 l     O .bss	00000004 ble_hs_parent_task
10005344 l     O .bss	00000004 ble_hs_reset_reason
10005348 l     O .bss	00000018 ble_hs_rx_q
1000539c l     O .bss	00000020 ble_hs_timer
00000000 l    df *ABS*	00000000 ble_hs_adv.c
0002e520 l     F .text	00000012 find_field_func
0002e532 l     F .text	00000062 ble_hs_adv_set_hdr
0002e594 l     F .text	00000050 ble_hs_adv_set_flat_mbuf
0002e5e4 l     F .text	00000068 ble_hs_adv_set_array_uuid16
0002e64c l     F .text	0000006c ble_hs_adv_set_array_uuid128
0002e6b8 l     F .text	00000072 ble_hs_adv_set_array_uuid32
0002e72a l     F .text	00000072 ble_hs_adv_set_array16
0002e79c l     F .text	000002ce adv_set_fields
0002ea6c l     F .text	00000044 ble_hs_adv_parse_uuids16
0002eab0 l     F .text	0000004c ble_hs_adv_parse_uuids32
0002eafc l     F .text	00000060 ble_hs_adv_parse_uuids128
0002eb5c l     F .text	00000258 ble_hs_adv_parse_one_field
100053bc l     O .bss	00000011 ble_hs_adv_uuids128
100053d0 l     O .bss	00000038 ble_hs_adv_uuids16
10005408 l     O .bss	00000038 ble_hs_adv_uuids32
00000000 l    df *ABS*	00000000 ble_hs_atomic.c
00000000 l    df *ABS*	00000000 ble_hs_conn.c
10005440 l     O .bss	00000064 ble_hs_conn_elem_mem
100054a4 l     O .bss	0000001c ble_hs_conn_pool
100054c0 l     O .bss	00000004 ble_hs_conns
0003975c l     O .text	00000006 ble_hs_conn_null_addr
00000000 l    df *ABS*	00000000 ble_hs_flow.c
00000000 l    df *ABS*	00000000 ble_hs_hci.c
0002f308 l     F .text	0000004a ble_hs_hci_rx_cmd_complete
0002f352 l     F .text	00000024 ble_hs_hci_rx_cmd_status
0002f378 l     F .text	0000000c ble_hs_hci_max_acl_payload_sz
0002f384 l     F .text	00000014 ble_hs_hci_lock
0002f398 l     F .text	00000010 ble_hs_hci_unlock
0002f3a8 l     F .text	0000002c ble_hs_hci_wait_for_ack
0002f3d4 l     F .text	00000090 ble_hs_hci_process_ack
0002f464 l     F .text	00000024 ble_hs_hci_rx_ack
0002f488 l     F .text	00000020 ble_hs_hci_frag_alloc
0002f4a8 l     F .text	0000004c ble_hs_hci_acl_hdr_prepend
100054c4 l     O .bss	00000004 ble_hs_hci_ack
100054ca l     O .bss	00000002 ble_hs_hci_buf_sz
100054cc l     O .bss	0000012c ble_hs_hci_frag_data
100055f8 l     O .bss	0000000c ble_hs_hci_frag_mbuf_pool
10005604 l     O .bss	0000001c ble_hs_hci_frag_mempool
10005620 l     O .bss	0000000c ble_hs_hci_mutex
1000562c l     O .bss	00000008 ble_hs_hci_sem
10005634 l     O .bss	00000004 ble_hs_hci_sup_feat
10005638 l     O .bss	00000001 ble_hs_hci_version
00000000 l    df *ABS*	00000000 ble_hs_hci_cmd.c
0002f718 l     F .text	00000018 ble_hs_hci_cmd_transport
0002f730 l     F .text	00000038 ble_hs_hci_cmd_send
00000000 l    df *ABS*	00000000 ble_hs_hci_evt.c
0002f7a0 l     F .text	00000024 ble_hs_hci_evt_dispatch_find
0002f7c4 l     F .text	00000014 ble_hs_hci_evt_le_dispatch_find
0002f7d8 l     F .text	0000000c ble_hs_hci_evt_encrypt_change
0002f7e4 l     F .text	0000000c ble_hs_hci_evt_enc_key_refresh
0002f7f0 l     F .text	00000026 ble_hs_hci_evt_le_meta
0002f816 l     F .text	0000004c ble_hs_hci_evt_le_adv_rpt_first_pass
0002f862 l     F .text	00000004 ble_hs_hci_evt_le_ext_adv_rpt
0002f866 l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_estab
0002f86a l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_rpt
0002f86e l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_lost
0002f872 l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_transfer
0002f876 l     F .text	00000004 ble_hs_hci_evt_le_scan_timeout
0002f87a l     F .text	00000004 ble_hs_hci_evt_le_adv_set_terminated
0002f87e l     F .text	00000004 ble_hs_hci_evt_le_scan_req_rcvd
0002f882 l     F .text	0000000c ble_hs_hci_evt_le_lt_key_req
0002f88e l     F .text	00000014 ble_hs_hci_evt_hw_error
0002f8a2 l     F .text	00000032 ble_hs_hci_evt_disconn_complete
0002f8d4 l     F .text	00000062 ble_hs_hci_evt_num_completed_pkts
0002f936 l     F .text	00000014 ble_hs_hci_evt_le_phy_update_complete
0002f94a l     F .text	00000082 ble_hs_hci_evt_le_dir_adv_rpt
0002f9cc l     F .text	0000007e ble_hs_hci_evt_le_adv_rpt
0002fa4a l     F .text	00000086 ble_hs_hci_evt_le_enh_conn_complete
0002fad0 l     F .text	00000066 ble_hs_hci_evt_le_conn_complete
0002fb36 l     F .text	00000014 ble_hs_hci_evt_le_conn_parm_req
0002fb4a l     F .text	00000014 ble_hs_hci_evt_le_rd_rem_used_feat_complete
0002fb5e l     F .text	00000014 ble_hs_hci_evt_le_conn_upd_complete
00039774 l     O .text	00000030 ble_hs_hci_evt_dispatch
000397a4 l     O .text	00000064 ble_hs_hci_evt_le_dispatch
00000000 l    df *ABS*	00000000 ble_hs_hci_util.c
00000000 l    df *ABS*	00000000 ble_hs_id.c
0002fe6c l     F .text	00000038 ble_hs_id_addr_type_usable
1000563c l     O .bss	00000006 ble_hs_id_pub
10005644 l     O .bss	00000006 ble_hs_id_rnd
00000000 l    df *ABS*	00000000 ble_hs_log.c
00000000 l    df *ABS*	00000000 ble_hs_mbuf.c
0002ff38 l     F .text	0000002a ble_hs_mbuf_gen_pkt
00000000 l    df *ABS*	00000000 ble_hs_misc.c
00030000 l     F .text	00000034 ble_hs_misc_restore_one_irk
00000000 l    df *ABS*	00000000 ble_hs_mqueue.c
00000000 l    df *ABS*	00000000 ble_hs_pvcy.c
00030130 l     F .text	0000002e ble_hs_pvcy_set_addr_timeout
0003015e l     F .text	0000001a ble_hs_pvcy_clear_entries
00030178 l     F .text	0000001e ble_hs_pvcy_set_resolve_enabled
000301fc l     F .text	00000084 ble_hs_pvcy_add_entry_hci
1000564c l     O .bss	00000010 ble_hs_pvcy_irk
1000565c l     O .bss	00000001 ble_hs_pvcy_started
00000000 l    df *ABS*	00000000 ble_hs_startup.c
00030330 l     F .text	0000001a ble_hs_startup_reset_tx
0003034a l     F .text	0000002c ble_hs_startup_le_read_buf_sz_tx
00030376 l     F .text	0000002c ble_hs_startup_read_buf_sz_tx
000303a2 l     F .text	0000002a ble_hs_startup_read_local_ver_tx
000303d0 l     F .text	00000058 ble_hs_startup_set_evmask_tx
00030428 l     F .text	00000046 ble_hs_startup_le_set_evmask_tx
0003046e l     F .text	00000060 ble_hs_startup_read_buf_sz
000304ce l     F .text	00000028 ble_hs_startup_le_read_sup_f_tx
000304f6 l     F .text	00000028 ble_hs_startup_read_bd_addr
00000000 l    df *ABS*	00000000 ble_hs_stop.c
00030574 l     F .text	00000014 ble_hs_stop_register_listener
00030588 l     F .text	0000002c ble_hs_stop_terminate_conn
000305b4 l     F .text	00000050 ble_hs_stop_begin
00030604 l     F .text	00000044 ble_hs_stop_done
00030648 l     F .text	0000002c ble_hs_stop_gap_event
00030674 l     F .text	00000020 ble_hs_stop_terminate_timeout_cb
1000565d l     O .bss	00000001 ble_hs_stop_conn_cnt
10005660 l     O .bss	0000000c ble_hs_stop_gap_listener
1000566c l     O .bss	00000004 ble_hs_stop_listeners
10005670 l     O .bss	00000020 ble_hs_stop_terminate_tmo
00000000 l    df *ABS*	00000000 ble_l2cap.c
00030730 l     F .text	00000012 ble_l2cap_get_mtu
00030742 l     F .text	00000020 ble_l2cap_append_rx
00030842 l     F .text	0000004c ble_l2cap_rx_payload
10005690 l     O .bss	00000054 ble_l2cap_chan_mem
00000000 l    df *ABS*	00000000 ble_l2cap_sig.c
000309e8 l     F .text	0000001c ble_l2cap_sig_next_id
00030a04 l     F .text	00000014 ble_l2cap_sig_dispatch_get
00030a18 l     F .text	0000002c ble_l2cap_sig_proc_matches
00030a44 l     F .text	00000004 ble_l2cap_sig_rx_noop
00030a48 l     F .text	00000020 ble_l2cap_sig_update_call_cb
00030a68 l     F .text	00000024 ble_l2cap_sig_proc_insert
00030a8c l     F .text	00000068 ble_l2cap_sig_proc_extract
00030af4 l     F .text	00000020 ble_l2cap_sig_proc_alloc
00030b14 l     F .text	00000014 ble_l2cap_sig_proc_set_timer
00030b28 l     F .text	00000058 ble_l2cap_sig_extract_expired
00030b80 l     F .text	00000014 ble_l2cap_sig_proc_free
00030b94 l     F .text	00000018 ble_l2cap_sig_process_status
00030bac l     F .text	00000014 ble_l2cap_sig_rx_reject
00030bc0 l     F .text	0000004a ble_l2cap_sig_update_rsp_rx
00030c0c l     F .text	00000084 ble_l2cap_sig_rx
00030c90 l     F .text	0000009c ble_l2cap_sig_update_req_rx
10005734 l     O .bss	00000001 ble_l2cap_sig_cur_id
10005738 l     O .bss	00000014 ble_l2cap_sig_proc_mem
1000574c l     O .bss	0000001c ble_l2cap_sig_proc_pool
10005768 l     O .bss	00000008 ble_l2cap_sig_procs
00039914 l     O .text	0000006c ble_l2cap_sig_dispatch
00000000 l    df *ABS*	00000000 ble_l2cap_sig_cmd.c
00000000 l    df *ABS*	00000000 ble_sm.c
00030fa2 l     F .text	0000003c ble_sm_rx
00000000 l    df *ABS*	00000000 ble_sm_cmd.c
00000000 l    df *ABS*	00000000 ble_store.c
00031070 l     F .text	00000018 ble_store_status
00031134 l     F .text	00000008 ble_store_persist_sec
00000000 l    df *ABS*	00000000 ble_store_util.c
00000000 l    df *ABS*	00000000 ble_uuid.c
000399d8 l     O .text	00000010 ble_uuid_base
00000000 l    df *ABS*	00000000 ble_svc_ans.c
000315b8 l     F .text	00000074 ble_svc_ans_new_alert_notify
0003162c l     F .text	0000002c ble_svc_ans_unr_alert_notify
00031658 l     F .text	00000026 ble_svc_ans_chr_write
00031680 l     F .text	00000200 ble_svc_ans_access
10005770 l     O .bss	00000002 ble_svc_ans_alert_not_ctrl_pt
10005772 l     O .bss	00000002 ble_svc_ans_conn_handle
10005774 l     O .bss	00000001 ble_svc_ans_new_alert_cat
10005778 l     O .bss	00000008 ble_svc_ans_new_alert_cnt
10005780 l     O .bss	00000014 ble_svc_ans_new_alert_val
10005794 l     O .bss	00000002 ble_svc_ans_new_alert_val_handle
10005796 l     O .bss	00000002 ble_svc_ans_new_alert_val_len
10005798 l     O .bss	00000001 ble_svc_ans_unr_alert_cat
1000579c l     O .bss	00000008 ble_svc_ans_unr_alert_cnt
100057a4 l     O .bss	00000002 ble_svc_ans_unr_alert_stat
100057a6 l     O .bss	00000002 ble_svc_ans_unr_alert_val_handle
10000718 l     O .data	00000004 __compound_literal.0
1000071c l     O .data	00000004 __compound_literal.1
10000720 l     O .data	00000004 __compound_literal.2
10000724 l     O .data	00000004 __compound_literal.3
10000728 l     O .data	00000004 __compound_literal.4
1000072c l     O .data	00000004 __compound_literal.5
10000730 l     O .data	00000090 __compound_literal.6
000399e8 l     O .text	00000020 ble_svc_ans_defs
00000000 l    df *ABS*	00000000 ble_svc_gap.c
00031904 l     F .text	00000016 ble_svc_gap_device_name_write_access
0003191a l     F .text	00000016 ble_svc_gap_appearance_write_access
00031930 l     F .text	00000024 ble_svc_gap_device_name_read_access
00031954 l     F .text	00000028 ble_svc_gap_appearance_read_access
0003197c l     F .text	00000098 ble_svc_gap_access
100057a8 l     O .bss	00000002 ble_svc_gap_appearance
100007c0 l     O .data	00000004 __compound_literal.0
100007c4 l     O .data	00000004 __compound_literal.1
100007c8 l     O .data	00000004 __compound_literal.2
100007cc l     O .data	00000048 __compound_literal.3
10000814 l     O .data	00000020 ble_svc_gap_name
00039a08 l     O .text	00000020 ble_svc_gap_defs
00000000 l    df *ABS*	00000000 ble_svc_gatt.c
00031ab0 l     F .text	00000068 ble_svc_gatt_access
100057aa l     O .bss	00000002 ble_svc_gatt_changed_val_handle
100057ac l     O .bss	00000002 ble_svc_gatt_end_handle
100057ae l     O .bss	00000002 ble_svc_gatt_start_handle
10000834 l     O .data	00000004 __compound_literal.0
10000838 l     O .data	00000004 __compound_literal.1
1000083c l     O .data	00000030 __compound_literal.2
00039a28 l     O .text	00000020 ble_svc_gatt_defs
00000000 l    df *ABS*	00000000 ble_store_config.c
00031bac l     F .text	00000098 ble_store_config_find_sec
00031c44 l     F .text	00000038 ble_store_config_read_peer_sec
00031c7c l     F .text	00000038 ble_store_config_read_our_sec
00031cb4 l     F .text	00000084 ble_store_config_find_cccd
00031d38 l     F .text	00000028 ble_store_config_read_cccd
00031d60 l     F .text	0000002e ble_store_config_print_key_sec
00031dce l     F .text	00000046 ble_store_config_print_value_sec
00031e14 l     F .text	00000058 ble_store_config_write_peer_sec
00031e6c l     F .text	00000058 ble_store_config_write_our_sec
00031ec4 l     F .text	0000004c ble_store_config_write_cccd
00031f38 l     F .text	00000022 ble_store_config_delete_obj
00031f5a l     F .text	00000024 ble_store_config_delete_sec
00031f80 l     F .text	00000014 ble_store_config_delete_peer_sec
00031f94 l     F .text	00000014 ble_store_config_delete_our_sec
00031fa8 l     F .text	00000028 ble_store_config_delete_cccd
00000000 l    df *ABS*	00000000 addr.c
00032054 l     F .text	0000003a ble_hs_util_load_rand_addr
0003208e l     F .text	00000032 ble_hs_util_ensure_rand_addr
00000000 l    df *ABS*	00000000 ble_hci_ram.c
10005a20 l     O .bss	00000104 ble_hci_ram_cmd_buf
10005b24 l     O .bss	0000001c ble_hci_ram_cmd_pool
10005b40 l     O .bss	00000090 ble_hci_ram_evt_hi_buf
10005bd0 l     O .bss	0000001c ble_hci_ram_evt_hi_pool
10005bec l     O .bss	00000240 ble_hci_ram_evt_lo_buf
10005e2c l     O .bss	0000001c ble_hci_ram_evt_lo_pool
10005e48 l     O .bss	00000004 ble_hci_ram_rx_acl_hs_arg
10005e4c l     O .bss	00000004 ble_hci_ram_rx_acl_hs_cb
10005e50 l     O .bss	00000004 ble_hci_ram_rx_acl_ll_arg
10005e54 l     O .bss	00000004 ble_hci_ram_rx_acl_ll_cb
10005e58 l     O .bss	00000004 ble_hci_ram_rx_cmd_hs_arg
10005e5c l     O .bss	00000004 ble_hci_ram_rx_cmd_hs_cb
10005e60 l     O .bss	00000004 ble_hci_ram_rx_cmd_ll_arg
10005e64 l     O .bss	00000004 ble_hci_ram_rx_cmd_ll_cb
00000000 l    df *ABS*	00000000 cbor_buf_reader.c
000323bc l     F .text	00000006 cbuf_buf_reader_get8
000323c2 l     F .text	00000014 cbor_buf_reader_cpy
000323d6 l     F .text	0000001a cbor_buf_reader_cmp
000323f0 l     F .text	0000001c cbuf_buf_reader_get64
0003240c l     F .text	00000008 cbuf_buf_reader_get32
00032414 l     F .text	0000000a cbuf_buf_reader_get16
00000000 l    df *ABS*	00000000 cborparser.c
00032458 l     F .text	00000024 is_fixed_type
0003247c l     F .text	00000004 iterate_noop
00032480 l     F .text	0000013c preparse_value
000325bc l     F .text	0000004a preparse_next_value
00032606 l     F .text	000000ba extract_length
000326c0 l     F .text	00000172 iterate_string_chunks
00032832 l     F .text	000000f6 advance_internal
00000000 l    df *ABS*	00000000 cborpretty.c
00032bf8 l     F .text	00000028 hexDump
00032c20 l     F .text	0000022c utf8EscapedDump
00032e4c l     F .text	000003dc value_to_pretty
00033228 l     F .text	00000064 container_to_pretty
00000000 l    df *ABS*	00000000 cborparser_dup_string.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
00000000 l    df *ABS*	00000000 hal_flash.c
0003339c l     F .text	0000000e apollo3_flash_sector_info
000333aa l     F .text	00000004 apollo3_flash_init
000333b0 l     F .text	00000018 apollo3_flash_erase_sector
000333c8 l     F .text	0000004c apollo3_flash_write_odd
00033414 l     F .text	000000ac apollo3_flash_write
000334c0 l     F .text	0000000e apollo3_flash_read
00039bac l     O .text	0000001c apollo3_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
000334d0 l     F .text	00000044 apollo2_os_tick_set_timer
00033514 l     F .text	00000048 apollo2_os_tick_handler
10005e68 l     O .bss	00000004 apollo2_os_tick_dur
10005e6c l     O .bss	00000004 apollo2_os_tick_prev
00000000 l    df *ABS*	00000000 hal_timer.c
000335f8 l     F .text	00000010 apollo3_timer_resolve
00033608 l     F .text	00000040 apollo3_timer_tbl_find
00033648 l     F .text	0000007c apollo3_timer_sdk_cfg
000336c4 l     F .text	00000014 apollo3_timer_isr_cfg
000336d8 l     F .text	0000000e apollo3_timer_cur_ticks
000336e6 l     F .text	00000060 apollo3_timer_set_ocmp
00033746 l     F .text	00000042 apollo3_timer_set_ocmp_at
00033788 l     F .text	0000002c apollo3_timer_clear_ocmp
000337b4 l     F .text	00000058 apollo3_timer_chk_queue
0003380c l     F .text	00000024 apollo3_timer_isr
10005e70 l     O .bss	00000004 nvic_configured.21941
1000086c l     O .data	00000014 apollo3_timer_0
00039bc8 l     O .text	00000030 apollo3_timer_tbl_hfrc
00039bf8 l     O .text	00000028 apollo3_timer_tbl_lfrc
00039c20 l     O .text	00000028 apollo3_timer_tbl_xt
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000000 l    df *ABS*	00000000 am_hal_ctimer.c
000339f0 l     F .text	00000028 ctimer_clr
10000880 l     O .data	00000010 g_ui8ClkSrc
00039c48 l     O .text	00000020 g_ui32TMRAddrTbl
00039c68 l     O .text	00000020 g_ui8TmrClkSrcMask
00000000 l    df *ABS*	00000000 am_hal_flash.c
00000000 l    df *ABS*	00000000 am_hal_global.c
00000000 l    df *ABS*	00000000 am_hal_interrupt.c
00000000 l    df *ABS*	00000000 am_hal_stimer.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_cputime_pwr2.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 malloc.c
00034058 l     F .text	00000004 malloc_lock_nop
0003405c l     F .text	00000002 malloc_unlock_nop
0003405e l     F .text	00000048 __malloc_from_block
000340a8 l     F .text	00000064 __free_block
10000890 l     O .data	00000018 __malloc_head
100008a8 l     O .data	00000004 malloc_lock
100008ac l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strrchr.c
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 ble_hs_shutdown.c
00034308 l     F .text	00000028 ble_hs_shutdown_stop_cb
10005e74 l     O .bss	0000000c ble_hs_shutdown_stop_listener
00000000 l    df *ABS*	00000000 ble_ll_supp_cmd.c
00000000 l    df *ABS*	00000000 ble_test_target-sysdown-app.c
00000000 l    df *ABS*	00000000 ble_test_target-sysflash.c
00000000 l    df *ABS*	00000000 ble_hs_cfg.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00000000 l    df *ABS*	00000000 srand48.c
00000000 l    df *ABS*	00000000 
100008b0 l       .data	00000000 __init_array_end
100008b0 l       .data	00000000 __preinit_array_end
100008b0 l       .data	00000000 __init_array_start
100008b0 l       .data	00000000 __preinit_array_start
00032928 g     F .text	00000090 _cbor_value_decode_int64_internal
00019c4a g     F .text	00000054 os_mbuf_trim_front
10005930 g     O .bss	000000f0 ble_store_config_peer_secs
00014190  w    F .text	00000002 GPIO_IRQHandler
00022192 g     F .text	00000054 ble_ll_conn_hci_rd_chan_map
00026df4 g     F .text	0000004a ble_att_clt_tx_read_group_type
0002f0d0 g     F .text	0000001c ble_hs_conn_find_by_idx
0002fbb0 g     F .text	000000a0 ble_hs_hci_evt_acl_process
0001c398 g     F .text	000000a0 uart_console_init
0001fb90 g     F .text	00000030 ble_ll_adv_rpa_timeout
10004930 g     O .bss	00000001 g_ble_ll_sched_offset_ticks
00026e3e g     F .text	0000005a ble_att_clt_rx_read_group_type
0001a9b0 g     F .text	00000030 os_arch_start
10005360 g     O .bss	00000038 ble_hs_stats
10005e80 g       .bss	00000000 __HeapBase
10003924 g     O .bss	00000008 g_os_task_list
00018ed8 g     F .text	00000084 os_idle_task
00026d68 g     F .text	00000030 ble_att_clt_tx_read_blob
0003429e g     F .text	00000014 strcpy
00033e98 g     F .text	0000000c am_hal_stimer_int_clear
000262e8 g     F .text	0000000c ble_phy_state_get
000214e0 g     F .text	00000044 ble_ll_conn_set_global_chanmap
0002e180 g     F .text	00000014 ble_hs_sched_start
10004ac0 g     O .bss	000000e4 ble_att_stats
10003968 g     O .bss	00000006 __rand48_seed
00000000 g       .svc_table	00000000 SVC_Count
0002de54 g     F .text	00000010 ble_gatts_show_local
0001b4f0 g     F .text	00000018 fmemopen_w
00017d74 g     F .text	00000064 cmd_gatt_service_visibility
0002c210 g     F .text	0000006c ble_gattc_disc_chrs_by_uuid
00014190  w    F .text	00000002 IOMASTER5_IRQHandler
0001e718 g     F .text	00000048 mem_split_frag
0001418a  w    F .text	00000002 DebugMon_Handler
000159b8 g     F .text	00000028 print_addr
00019710 g     F .text	0000005a os_mbuf_copydata
10002b2c g     O .bss	00000008 g_os_mempool_list
00019168 g     F .text	0000001a os_callout_init
00019184 g     F .text	0000003c os_callout_stop
0002a688 g     F .text	0000004a ble_gap_notify_rx_event
00025e0c g     F .text	00000070 ble_ll_sched_adv_resched_pdu
000262f4 g     F .text	00000074 ble_phy_tx
00031b38 g     F .text	00000074 ble_svc_gatt_init
00022e24 g     F .text	00000050 ble_ll_ctrl_proc_start
0003410c g     F .text	00000050 add_malloc_block
10004958 g     O .bss	00000000 g_ble_ll_whitelist
0002c786 g     F .text	0000002c ble_gattc_rx_err
0002561c g     F .text	0000005c ble_ll_scan_rx_pkt_in
0002f300 g     F .text	00000002 ble_hs_flow_connection_broken
00018ac8 g     F .text	00000070 parse_arg_addr
00022214 g     F .text	00000070 ble_ll_conn_hci_set_data_len
00024ae8 g     F .text	0000002c ble_ll_resolv_set_local_rpa
10001914 g     O .bss	00000004 btshell_num_conns
0001ee14 g     F .text	00000078 ble_ll_reset
000193d6 g     F .text	00000070 os_eventq_put
00033cf4 g     F .text	00000034 am_hal_ctimer_int_status_get
0001d8b8 g     F .text	00000008 shell_evq_set
0002fd88 g     F .text	0000001c ble_hs_id_set_pub
00024750 g     F .text	0000012c ble_ll_resolv_list_add
10000100 g       .data	00000000 __data_start__
00015544 g     F .text	00000034 btshell_disc_full
000311ce g     F .text	00000018 ble_store_key_from_value_cccd
00019ad4 g     F .text	0000005c os_mbuf_extend
0002c936 g     F .text	00000024 ble_gattc_rx_read_mult_rsp
0001ad56 g     F .text	00000020 strtok_r
00030e3c g     F .text	00000048 ble_l2cap_sig_timer
10004990 g     O .bss	0000002c g_ble_phy_stats
10005270 g     O .bss	0000001c ble_hs_hci_ev_pool
00014190  w    F .text	00000002 IOSLAVE_IOS_IRQHandler
0001b3f4 g     F .text	00000024 printf
000385d8 g     O .text	00000004 stdout
00031210 g     F .text	0000007a ble_store_iterate
100056e4 g     O .bss	0000001c ble_l2cap_chan_pool
00022346 g     F .text	0000004c ble_ll_conn_hci_le_ltk_neg_reply
0001a920 g     F .text	0000008c os_arch_os_init
0001417e  w    F .text	00000002 HardFault_Handler
0002821e g     F .text	000000a6 ble_att_svr_rx_read_type
0001e624 g     F .text	000000c4 datetime_format
00015a58 g     F .text	00000010 chr_end_handle
00033830 g     F .text	00000050 hal_timer_init
00028402 g     F .text	000000c2 ble_att_svr_rx_read_group_type
0002ca0c g     F .text	00000058 ble_gattc_init
00033ef6 g     F .text	00000008 os_cputime_timer_stop
00026254 g     F .text	00000004 ble_phy_rx_set_start_time
00018a0c g     F .text	00000032 parse_arg_kv
0001a9e0 g     F .text	00000060 os_arch_os_start
10004f20 g     O .bss	00000088 ble_gap_stats
000287d4 g     F .text	00000018 ble_att_svr_restore_range
100051ec g     O .bss	00000034 ble_gatts_stats
100039bc g     O .bss	00000001 g_console_ignore_non_nlip
0002ee3c g     F .text	00000030 ble_hs_adv_find_field
0002985c g     F .text	00000010 ble_gap_master_in_progress
0002c2d8 g     F .text	00000058 ble_gattc_read
00032140 g     F .text	0000002c ble_hci_trans_hs_cmd_tx
0002ee6c g     F .text	0000002a ble_hs_atomic_conn_delete
100039be g     O .bss	00000001 g_console_silence_non_nlip
00018504 g     F .text	0000004e gatt_svr_register_cb
00014190  w    F .text	00000002 STIMER_CMPR4_IRQHandler
000329da g     F .text	00000048 cbor_value_advance_fixed
0002888c g     F .text	00000048 ble_att_svr_init
00014190  w    F .text	00000002 STIMER_CMPR6_IRQHandler
0001c90c g     F .text	00000014 log_read
0002db0c g     F .text	0000003c ble_gatts_init
0001ede0 g     F .text	0000000c ble_ll_state_get
00015748 g     F .text	0000000a btshell_wl_set
000311a8 g     F .text	0000000e ble_store_read_cccd
0002c7b2 g     F .text	00000024 ble_gattc_rx_mtu
0001421e g     F .text	0000000c SysTick_Handler
00030eb8 g     F .text	0000003a ble_l2cap_sig_tx
00024092 g     F .text	00000044 ble_ll_hci_ev_conn_update
00028134 g     F .text	0000006e ble_att_svr_rx_find_info
00024444 g     F .text	00000080 ble_ll_rand_data_get
000310f4 g     F .text	00000040 ble_store_write
000283c4 g     F .text	0000003e ble_att_svr_rx_read_mult
00018764 g     F .text	0000003c parse_arg_extract
00030de4 g     F .text	00000020 ble_l2cap_sig_create_chan
000261cc g     F .text	0000000c ble_hw_rng_init
00015600 g     F .text	00000018 btshell_read_by_uuid
00019e9c g     F .text	0000002a os_memblock_put
0001a000 g     F .text	00000024 os_msys_get_pkthdr
00033da8 g     F .text	00000008 am_hal_interrupt_master_disable
000187a0 g     F .text	0000003a parse_long_bounds
10003a3c g     O .bss	00000004 flash_map
0001ac6a g     F .text	00000030 memmove
000249ac g     F .text	00000054 ble_ll_resolv_set_rpa_tmo
00026d5a g     F .text	0000000e ble_att_clt_rx_read
0002df90 g     F .text	00000008 ble_hs_lock
00025678 g     F .text	000000c8 ble_ll_scan_hci_set_params
00024976 g     F .text	00000036 ble_ll_resolv_local_addr_rd
000310dc g     F .text	00000018 ble_store_overflow_event
000141f4 g     F .text	0000002a PendSV_Handler
00019dd8 g     F .text	00000036 os_mempool_clear
0001b452 g     F .text	0000001c snprintf
0003082e g     F .text	00000014 ble_l2cap_remove_rx
0001417c  w    F .text	00000002 NMI_Handler
0002d5c4 g     F .text	0000005c ble_gatts_connection_broken
00014190  w    F .text	00000002 IOMASTER1_IRQHandler
00039cd0 g       .ARM.exidx	00000000 __exidx_end
0002621c g     F .text	00000002 ble_hw_resolv_list_clear
000188a4 g     F .text	00000012 parse_arg_long
0001855c g     F .text	0000003c gatt_svr_init
00014020 g       .text	00000000 __isr_vector_start
00022088 g     F .text	00000098 ble_ll_conn_hci_disconnect_cmd
0001c740 g     F .text	00000048 log_init
0001b4c0 g     F .text	0000002e memfile_write
0001a894 g     F .text	00000014 os_arch_ctx_sw
00021524 g     F .text	000001ec ble_ll_conn_periph_start
00019112 g     F .text	0000000a os_system_reset
0001df34 g     F .text	00000020 stats_init_and_reg
00014704 g     F .text	0000002c hal_system_reset
00024b54 g     F .text	00000034 ble_ll_resolv_init
00014190  w    F .text	00000002 STIMER_IRQHandler
00018f88 g     F .text	00000088 os_init_idle_task
00032420 g     F .text	00000038 cbor_buf_reader_init
00014190  w    F .text	00000002 UART1_IRQHandler
10000100 g       .data	00000000 __aeabi_unwind_cpp_pr0
0001a200 g     F .text	0000000c os_sched_set_current_task
000307c8 g     F .text	0000002c ble_l2cap_parse_hdr
00020f10 g     F .text	00000060 ble_ll_conn_update_eff_data_len
00039cd0 g       .ARM.exidx	00000000 __etext
000298aa g     F .text	0000002a ble_gap_rx_l2cap_update_req
00038bdc g     O .text	0000002a g_ble_ll_ctrl_pkt_lengths
0001ed08 g     F .text	00000054 ble_ll_set_random_addr
000301bc g     F .text	0000003e ble_hs_pvcy_set_mode
0002c77c g     F .text	0000000a ble_gattc_indicate
0001a810 g     F .text	0000004e os_get_uptime_usec
00017a88 g     F .text	00000050 cmd_gatt_discover_full
00027f8c g     F .text	00000036 ble_att_svr_read_local
0001c0fc g     F .text	0000003c console_vprintf
0002e2b8 g     F .text	00000268 ble_hs_init
00026224 g     F .text	00000004 ble_hw_resolv_list_size
0002a54c g     F .text	0000012c ble_gap_update_params
00021c38 g     F .text	0000002a ble_ll_auth_pyld_tmo_event_send
00033dec g     F .text	00000020 am_hal_stimer_counter_clear
00014190  w    F .text	00000002 STIMER_CMPR1_IRQHandler
0002efa4 g     F .text	00000050 ble_hs_conn_free
0001fc04 g     F .text	00000108 ble_ll_adv_set_adv_params
00019b30 g     F .text	00000108 os_mbuf_pullup
0002bfe0 g     F .text	00000068 ble_gattc_timer
00015814 g     F .text	00000018 btshell_tx_stop
0002c812 g     F .text	0000001e ble_gattc_rx_find_type_value_hinfo
10003a20 g     O .bss	00000010 rx_ev
10003fdc g     O .bss	0000010c ble_ll_stats
0001aa58 g     F .text	000000c0 os_mutex_release
0001df0c g     F .text	00000028 stats_register
0001bea0 g     F .text	00000084 console_prompt_set
0002ff62 g     F .text	0000000a ble_hs_mbuf_bare_pkt
0002ffdc g     F .text	00000022 ble_hs_mbuf_pullup_base
0002c9e4 g     F .text	0000001a ble_gattc_rx_indicate_rsp
0001a0bc g     F .text	00000020 os_sanity_check_register
000157a0 g     F .text	00000008 btshell_datalen
00026e98 g     F .text	00000036 ble_att_clt_tx_write_req
0001fe50 g     F .text	00000034 ble_ll_adv_reset
0001a6a0 g     F .text	00000026 os_time_delay
0002a6d2 g     F .text	00000044 ble_gap_notify_tx_event
10004960 g     O .bss	00000030 g_ble_phy_data
000322e4 g     F .text	00000004 ble_hci_trans_reset
00014190  w    F .text	00000002 IOMASTER2_IRQHandler
00019a08 g     F .text	00000088 os_mbuf_copyinto
00022dc0 g     F .text	00000064 ble_ll_ctrl_terminate_start
00014190  w    F .text	00000002 PDM_IRQHandler
00029b80 g     F .text	00000024 ble_gap_adv_set_fields
0001c154 g     F .text	0000000c console_get_ticks
00026290 g     F .text	00000016 ble_phy_txpower_round
0001fe84 g     F .text	00000024 ble_ll_adv_enabled
000329b8 g     F .text	00000022 cbor_parser_init
0002f6b8 g     F .text	0000000c ble_hs_hci_set_hci_version
00019944 g     F .text	000000c4 os_mbuf_prepend
0001ed70 g     F .text	00000034 ble_ll_acl_data_in
100006f0 g     O .data	00000028 ble_hs_cfg
00028596 g     F .text	00000014 ble_att_svr_prep_clear
0003130e g     F .text	00000038 ble_store_util_status_rr
0002c9b8 g     F .text	0000002c ble_gattc_rx_exec_write_rsp
000261c4 g     F .text	00000006 ble_hw_encrypt_block
000189e8 g     F .text	00000024 parse_kv_find
00015578 g     F .text	00000018 btshell_find_inc_svcs
100046c4 g     O .bss	000000d8 g_ble_ll_resolv_list
00015960 g     F .text	00000030 print_bytes
0001c374 g     F .text	00000014 console_rx_restart
00019f00 g     F .text	00000010 os_mempool_module_init
0001a8ba g     F .text	0000000a os_arch_in_critical
0003147c g     F .text	0000000e ble_uuid_u16
00020d84 g     F .text	00000026 ble_ll_conn_auth_pyld_timer_start
00018a64 g     F .text	00000028 parse_arg_byte_stream
0002f1d0 g     F .text	00000080 ble_hs_conn_find_by_addr
00026210 g     F .text	0000000c ble_hw_rng_stop
00014190  w    F .text	00000002 UART0_IRQHandler
0001ec68 g     F .text	00000078 ble_ll_is_valid_random_addr
00021250 g     F .text	000001a4 ble_ll_conn_rx_data_pdu
0001a88a g     F .text	0000000a timer_handler
0002a8c8 g     F .text	00000030 ble_gap_event_listener_register
00019328 g     F .text	00000020 os_dev_lookup
0001a20c g     F .text	00000090 os_sched_sleep
0002f302 g     F .text	00000002 ble_hs_flow_track_data_mbuf
00018998 g     F .text	00000050 parse_arg_time_dflt
00015634 g     F .text	0000002c btshell_write
0002da20 g     F .text	00000040 ble_gatts_svc_set_visibility
0001c0f0 g     F .text	0000000c console_set_completion_cb
0001ac50 g     F .text	0000001a memcpy
0002df14 g     F .text	0000000c ble_hs_evq_get
000261b6 g     F .text	00000006 ble_hw_get_static_addr
000186fc g     F .text	00000030 parse_arg_find_idx
00025888 g     F .text	0000004c ble_ll_scan_init
0002f0c8 g     F .text	00000008 ble_hs_conn_find_assert
0001fe20 g     F .text	0000002c ble_ll_adv_get_local_rpa
00024a00 g     F .text	0000003a ble_ll_resolve_set_priv_mode
000339e6 g     F .text	00000004 hal_watchdog_init
000246fc g     F .text	00000014 ble_ll_resolv_list_read_size
00025c84 g     F .text	0000008c ble_ll_sched_conn_periph_new
00024914 g     F .text	0000002c ble_ll_resolv_enable_cmd
10004348 g     O .bss	00000001 g_ble_ll_tx_power
00026384 g     F .text	00000002 ble_phy_wfr_enable
0002d54c g     F .text	00000078 ble_gatts_register_svcs
00021fd8 g     F .text	00000066 ble_ll_conn_hci_param_nrr
00025824 g     F .text	00000008 ble_ll_scan_get_local_rpa
00018552 g     F .text	00000008 gatt_svr_print_svcs
00033ea4 g     F .text	0000000c os_cputime_init
00039b94 g     O .text	00000018 apollo3_flash_dev
0003390c g     F .text	00000020 hal_timer_set_cb
0002865c g     F .text	000000b4 ble_att_svr_rx_exec_write
0002a184 g     F .text	00000054 ble_gap_terminate_with_conn
0002fda4 g     F .text	00000078 ble_hs_id_set_rnd
00022e74 g     F .text	00000030 ble_ll_ctrl_initiate_dle
000188b6 g     F .text	00000010 parse_arg_bool
000142fc g     F .text	00000000 .hidden __aeabi_uldivmod
00027054 g     F .text	00000040 ble_att_clt_tx_indicate
00014190  w    F .text	00000002 WATCHDOG_IRQHandler
00000020 g       *ABS*	00000000 _imghdr_size
0001a1c4 g     F .text	00000030 os_sched_ctx_sw_hook
10003990 g     O .bss	00000004 console_is_midline
0001d8c0 g     F .text	000000c4 shell_exec
000195ba g     F .text	00000014 os_mbuf_free
00015754 g     F .text	00000018 btshell_scan
0002a784 g     F .text	00000038 ble_gap_mtu_event
0002709e g     F .text	00000026 ble_att_cmd_prepare
00017b64 g     F .text	000001b0 cmd_gatt_read
10000100 g     O .data	00000004 SystemCoreClock
000188de g     F .text	00000010 parse_arg_uint8
000243d8 g     F .text	0000001c ble_ll_hci_vs_init
000146f0 g     F .text	00000002 hal_system_init
00031034 g     F .text	0000003c ble_sm_tx
00030798 g     F .text	00000028 ble_l2cap_chan_free
0002c914 g     F .text	00000022 ble_gattc_rx_read_blob_rsp
100047b4 g     O .bss	00000050 g_ble_ll_scan_rsp_advs
000188c6 g     F .text	00000018 parse_arg_bool_dflt
0001a8c4 g     F .text	00000044 os_arch_task_stack_init
0003148a g     F .text	0000003e ble_uuid_init_from_att_buf
00021c62 g     F .text	00000034 ble_ll_disconn_comp_event_send
0003415c g     F .text	0000006c malloc
00027eb8 g     F .text	00000030 ble_att_svr_read_handle
0002362c g     F .text	00000018 ble_ll_ctrl_init_conn_sm
00019886 g     F .text	000000be os_mbuf_cmpm
00018d30 g     F .text	00000044 __assert_func
00024710 g     F .text	00000040 ble_ll_resolv_list_find
0002d82c g     F .text	000000cc ble_gatts_rx_indicate_ack
00033d8c g     F .text	0000001c am_hal_triple_read
00026668 g     F .text	000001f8 ble_att_inc_tx_stat
0001a360 g     F .text	00000048 os_sched_wakeup_ticks
0001b688 g     F .text	00000080 console_pkg_init
00014184  w    F .text	00000002 UsageFault_Handler
00033bd0 g     F .text	00000094 am_hal_ctimer_period_set
000207fc g     F .text	00000028 ble_ll_conn_sm_get
0001b418 g     F .text	0000003a vsnprintf
10002b0c g     O .bss	00000008 g_callout_list
00030280 g     F .text	00000038 ble_hs_pvcy_add_entry
00033c64 g     F .text	00000028 am_hal_ctimer_int_enable
000314c8 g     F .text	00000026 ble_uuid_init_from_att_mbuf
00025760 g     F .text	00000020 ble_ll_scan_can_chg_whitelist
0002f6ac g     F .text	0000000c ble_hs_hci_set_le_supported_feat
000261d8 g     F .text	00000038 ble_hw_rng_start
0002d9b0 g     F .text	00000028 ble_gatts_tx_notifications
0002c830 g     F .text	0000001e ble_gattc_rx_find_type_value_complete
0001ec24 g     F .text	00000016 ble_ll_chk_txrx_time
00033d34 g     F .text	00000058 am_hal_flash_program_main
0002daac g     F .text	00000038 ble_gatts_lcl_svc_foreach
10004474 g     O .bss	00000016 g_ble_ll_conn_params
00017ad8 g     F .text	00000050 cmd_gatt_exchange_mtu
0001b0d0 g     F .text	00000300 tfp_format
1005fe48 g       *ABS*	00000000 __HeapLimit
100008b0 g       .bss	00000000 __bss_start__
0002df98 g     F .text	00000008 ble_hs_unlock
000146f4 g     F .text	00000010 hal_debugger_connected
00018950 g     F .text	00000024 parse_arg_uint8_dflt
0003158c g     F .text	00000006 ble_uuid_length
00026fe2 g     F .text	00000026 ble_att_clt_tx_exec_write
0001ad82 g     F .text	0000000c strtoul
00029e34 g     F .text	00000014 ble_gap_disc_cancel
00026ba8 g     F .text	00000050 ble_att_clt_rx_find_info
0002c6c4 g     F .text	000000b8 ble_gattc_indicate_custom
00026da6 g     F .text	00000040 ble_att_clt_tx_read_mult
000261b0 g     F .text	00000006 ble_hw_get_public_addr
0002a716 g     F .text	0000006e ble_gap_subscribe_event
00015740 g     F .text	00000008 btshell_term_conn
0002c510 g     F .text	0000006c ble_gattc_write_long
00014354 g     F .text	000002be .hidden __udivmoddi4
00015704 g     F .text	00000018 btshell_conn_initiate
00023ef4 g     F .text	0000006c ble_ll_hci_is_event_enabled
00015990 g     F .text	00000028 print_mbuf
0002623c g     F .text	00000002 ble_phy_encrypt_enable
00032bc0 g     F .text	00000038 _cbor_value_copy_string
00026244 g     F .text	0000000c ble_phy_set_txend_cb
0002621e g     F .text	00000004 ble_hw_resolv_list_add
000268d4 g     F .text	00000050 ble_att_set_preferred_mtu
0002fc50 g     F .text	0000000e ble_hs_hci_util_handle_pb_bc_join
000244ec g     F .text	0000002c ble_ll_rand_prand_get
0002f0f8 g     F .text	000000d8 ble_hs_conn_addrs
1000391c g     O .bss	00000004 g_current_task
0001a0dc g     F .text	00000084 os_sanity_run
000262a8 g     F .text	0000000c ble_phy_set_rx_pwr_compensation
00021214 g     F .text	0000003c ble_ll_conn_timeout
100043d8 g     O .bss	00000004 g_ble_ll_cur_adv_sm
0001a8a8 g     F .text	0000000c os_arch_save_sr
00030096 g     F .text	00000010 ble_hs_misc_peer_addr_type_to_id
000246d4 g     F .text	00000028 ble_ll_resolv_list_clr
10003fb0 g     O .bss	00000001 sysdown_active
00019dc4 g     F .text	00000014 os_mempool_init
0001a6c8 g     F .text	00000038 os_gettimeofday
0002c27c g     F .text	0000005c ble_gattc_disc_all_dscs
1000392c g     O .bss	00000001 g_task_id
000221e6 g     F .text	0000002e ble_ll_conn_hci_set_chan_class
00018c34 g     F .text	000000c0 parse_eddystone_url
0001e2ec g     F .text	00000140 timeval_to_clocktime
0002c46c g     F .text	00000034 ble_gattc_write_no_rsp
10005398 g     O .bss	00000001 ble_hs_sync_state
100006ac g     O .data	00000008 g_stats_registry
000299d8 g     F .text	00000124 ble_gap_adv_start
00027014 g     F .text	00000040 ble_att_clt_tx_notify
0001ee94 g     F .text	00000070 ble_ll_pdu_max_tx_octets_get
0002c09c g     F .text	00000058 ble_gattc_disc_all_svcs
0002f69c g     F .text	00000010 ble_hs_hci_acl_tx
00020764 g     F .text	00000048 ble_ll_conn_itvl_to_ticks
10004688 g     O .bss	0000000c g_ble_ll_rnum_data
000282c4 g     F .text	0000007e ble_att_svr_rx_read
00018e58 g     F .text	00000016 get_le32
00022b7c g     F .text	0000001e ble_ll_ctrl_is_start_enc_rsp
00039cb8 g       .text	00000000 __exidx_start
0001b51c g     F .text	0000011c strntoumax
00029de8 g     F .text	00000014 ble_gap_disc_active
0001a160 g     F .text	00000010 os_sanity_init
10004468 g     O .bss	00000004 g_ble_ll_conn_cur_sm
00017e30 g     F .text	00000044 cmd_gatt_show
00018930 g     F .text	00000020 parse_arg_uint64
000195ee g     F .text	000000a8 os_mbuf_append
0001d9d6 g     F .text	0000001c shell_register_default_module
00026d2e g     F .text	0000002c ble_att_clt_tx_read
00014194 g     F .text	00000014 os_set_env
00026fa0 g     F .text	00000042 ble_att_clt_rx_prep_write
00033314 g     F .text	00000010 hal_bsp_flash_dev
00033a98 g     F .text	00000054 am_hal_ctimer_start
00014734 g     F .text	0000004c __libc_init_array
00025740 g     F .text	00000020 ble_ll_scan_hci_set_enable
000385d0 g     O .text	00000008 MemFile_methods
10003910 g     O .bss	0000000c g_os_sanity_check_mu
000152f8 g     F .text	00000010 btshell_exchange_mtu
00014190  w    F .text	00000002 CLKGEN_IRQHandler
0002dfa0 g     F .text	0000001c ble_hs_process_rx_data_queue
0002c8a8 g     F .text	0000001e ble_gattc_rx_read_group_type_adata
0003984c g     O .text	00000006 ble_hs_misc_null_addr
0001a50c g     F .text	0000005c os_task_info_get
0001c0bc g     F .text	0000000c console_line_queue_set
000146b8 g     F .text	00000038 _sbrk
0002623e g     F .text	00000002 ble_phy_encrypt_set_pkt_cntr
000311c2 g     F .text	0000000c ble_store_delete_cccd
0003355c g     F .text	00000038 os_tick_idle
00020f70 g     F .text	00000114 ble_ll_conn_end
0002c330 g     F .text	0000006c ble_gattc_read_by_uuid
0001c138 g     F .text	0000001c console_printf
0001dc80 g     F .text	00000012 shell_os_reset_cmd
000260c0 g     F .text	00000038 ble_ll_utils_calc_window_widening
0001bf24 g     F .text	00000008 console_blocking_mode
00032a22 g     F .text	0000014e cbor_value_enter_container
00029bc8 g     F .text	0000000a ble_gap_adv_active
00033d28 g     F .text	0000000c am_hal_flash_page_erase
00014730  w    F .text	00000002 _init
0001fd5a g     F .text	00000020 ble_ll_hci_set_adv_data
00033cb4 g     F .text	00000020 am_hal_ctimer_int_clear
000270e0 g     F .text	0000004a ble_att_tx
00015698 g     F .text	00000014 btshell_adv_stop
0002da60 g     F .text	0000004c ble_gatts_count_cfg
000261bc g     F .text	00000002 ble_hw_whitelist_clear
0002c39c g     F .text	0000005c ble_gattc_read_long
0001ad76 g     F .text	0000000c strtol
0001fd20 g     F .text	0000001a ble_ll_hci_adv_set_enable
0001dbec g     F .text	00000094 shell_os_date_cmd
0001533c g     F .text	00000018 btshell_disc_chrs_by_uuid
0002fea4 g     F .text	00000032 ble_hs_id_copy_addr
0001fd7c g     F .text	00000044 ble_ll_adv_rx_pkt_in
0002c6ac g     F .text	0000000a ble_gattc_notify
0002a8f8 g     F .text	00000038 ble_gap_event_listener_unregister
0003088e g     F .text	000000ca ble_l2cap_rx
00033594 g     F .text	00000064 os_tick_init
00031d8e g     F .text	00000040 ble_store_config_read
0002ff6c g     F .text	0000000a ble_hs_mbuf_acl_pkt
00014190  w    F .text	00000002 RTC_IRQHandler
00027008 g     F .text	0000000c ble_att_clt_rx_exec_write
0001ca64 g     F .text	00000008 log_console_get
000321f0 g     F .text	00000050 ble_hci_trans_buf_alloc
00019010 g     F .text	000000d8 os_init
0002d620 g     F .text	00000148 ble_gatts_start
00014120 g     F .text	0000005c Reset_Handler
0002581c g     F .text	00000008 ble_ll_scan_get_peer_rpa
10001910 g     O .bss	00000004 btshell_full_disc_prev_chr_val
0002f4f4 g     F .text	00000020 ble_hs_hci_set_buf_sz
000342d2 g     F .text	00000022 strrchr
00033f18 g     F .text	00000016 os_cputime_ticks_to_usecs
0001ccec g     F .text	00000040 modlog_append
100054c8 g     O .bss	00000002 ble_hs_hci_avail_pkts
0001bc74 g     F .text	0000000c console_echo
000287ec g     F .text	00000048 ble_att_svr_reset
0002c978 g     F .text	00000040 ble_gattc_rx_prep_write_rsp
00019ec8 g     F .text	00000038 os_mempool_info_get_next
10003fd8 g     O .bss	00000001 sysinit_active
000261c2 g     F .text	00000002 ble_hw_whitelist_disable
00025d10 g     F .text	00000074 ble_ll_sched_adv_new
00022120 g     F .text	00000042 ble_ll_conn_hci_rd_rem_ver_cmd
100039bd g     O .bss	00000001 g_console_silence
000244c4 g     F .text	00000028 ble_ll_rand
0002d7d4 g     F .text	00000058 ble_gatts_send_next_indicate
00015374 g     F .text	00000018 btshell_disc_all_dscs
00018e0c g     F .text	00000008 put_le16
0002a678 g     F .text	00000004 ble_gap_unpair_oldest_peer
10005330 g     O .bss	00000002 ble_hs_max_services
00022b5c g     F .text	00000020 ble_ll_ctrl_enc_allowed_pdu_tx
00019550 g     F .text	0000000a os_mbuf_pool_init
00027d2c g     F .text	00000038 ble_att_svr_find_by_uuid
0001422a g     F .text	0000001e os_default_irq_asm
0001a3a8 g     F .text	0000000c os_sched_next_task
0002a258 g     F .text	0000008c ble_gap_conn_broken
0001a170 g     F .text	00000054 os_sched_insert
000191c0 g     F .text	00000080 os_callout_reset
000268a6 g     F .text	0000002c ble_att_mtu
0001938c g     F .text	00000010 os_dev_reset
00026a62 g     F .text	00000028 ble_att_clt_rx_error
00030e04 g     F .text	00000038 ble_l2cap_sig_conn_broken
00025408 g     F .text	0000001c ble_ll_scan_halt
0001dacc g     F .text	0000004c shell_init
0002f250 g     F .text	0000007c ble_hs_conn_timer
0001b3d8 g     F .text	0000001c fprintf
00030086 g     F .text	00000010 ble_hs_misc_own_addr_type_to_id
0002e208 g     F .text	0000000c ble_hs_hw_error
0002fb74 g     F .text	0000003c ble_hs_hci_evt_process
0001aa44 g     F .text	00000014 os_mutex_init
0002a680 g     F .text	00000008 ble_gap_conn_rssi
00034274 g     F .text	00000016 strcat
0001469c g     F .text	0000001c _sbrkInit
0002d788 g     F .text	0000004c ble_gatts_conn_init
00019446 g     F .text	0000001a os_eventq_get_no_wait
00014de0 g     F .text	000002c8 btshell_gap_event
000270c4 g     F .text	0000001c ble_att_cmd_get
0001c548 g     F .text	00000068 flash_map_init
000342f4 g     F .text	00000014 vprintf
0001432c g     F .text	00000028 .hidden __popcountsi2
00018f7c g     F .text	0000000c os_started
10000000 g       .bss	00000000 _ram_start
00031396 g     F .text	0000003c ble_uuid_cmp
0002f6d0 g     F .text	00000048 ble_hs_hci_init
0001a324 g     F .text	0000003c os_sched_os_timer_exp
10000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00023f60 g     F .text	0000003c ble_ll_hci_cmd_rx
0002df48 g     F .text	00000024 ble_hs_is_parent_task
00024226 g     F .text	00000030 ble_ll_hci_ev_hw_err
00026128 g     F .text	0000000c ble_ll_whitelist_read_size
00038624 g     O .text	0000002c log_console_handler
00024940 g     F .text	00000036 ble_ll_resolv_peer_addr_rd
0001e8aa g     F .text	0000001e rwlock_release_write
000196b8 g     F .text	00000058 os_mbuf_appendfrom
000314ee g     F .text	00000046 ble_uuid_to_any
00014190  w    F .text	00000002 IOMASTER0_IRQHandler
0002e1e8 g     F .text	00000020 ble_hs_sched_reset
00022f14 g     F .text	00000034 ble_ll_ctrl_proc_stop
00018a3e g     F .text	00000024 parse_arg_kv_dflt
00015680 g     F .text	00000018 btshell_write_reliable
000281a2 g     F .text	0000007c ble_att_svr_rx_find_type_value
10004354 g     O .bss	00000006 g_random_addr
100008b0 g       .data	00000000 __data_end__
0001c838 g     F .text	000000d4 log_register
0002fd50 g     F .text	00000038 ble_hs_hci_util_data_hdr_strip
0002c62c g     F .text	00000080 ble_gattc_notify_custom
0001e830 g     F .text	00000026 rwlock_release_read
00031534 g     F .text	00000058 ble_uuid_flat
00025f40 g     F .text	00000010 ble_ll_sched_stop
0002198c g     F .text	00000190 ble_ll_conn_comp_event_send
10005838 g     O .bss	00000004 ble_store_config_num_peer_secs
00030fe0 g     F .text	00000020 ble_sm_create_chan
0002636c g     F .text	0000000c ble_phy_resolv_list_enable
00023fa8 g     F .text	00000058 ble_ll_hci_init
00018912 g     F .text	0000001e parse_arg_uint32
000280a0 g     F .text	00000094 ble_att_svr_rx_mtu
00018aac g     F .text	0000001c parse_arg_mac
00015354 g     F .text	00000010 btshell_disc_svcs
000156ac g     F .text	00000058 btshell_adv_start
00027c74 g     F .text	0000000c ble_att_svr_prev_handle
00029fe8 g     F .text	00000154 ble_gap_connect
00026250 g     F .text	00000004 ble_phy_tx_set_start_time
00031088 g     F .text	0000002c ble_store_read
10003960 g     O .bss	00000004 g_os_time
00033db0 g     F .text	00000006 am_hal_interrupt_master_set
00014186  w    F .text	00000002 SecureFault_Handler
00026860 g     F .text	0000000a ble_att_set_peer_mtu
00026924 g     F .text	00000028 ble_att_create_chan
000339ec g     F .text	00000002 hal_watchdog_tickle
10005e80 g       .bss	00000000 __bss_end__
0001939c g     F .text	00000020 os_dev_walk
0001955a g     F .text	0000002e os_mbuf_get
000300a8 g     F .text	00000014 ble_hs_misc_restore_irks
000312a8 g     F .text	00000066 ble_store_util_delete_peer
00017e74 g     F .text	0000000a cmd_gatt_show_local
00015590 g     F .text	00000058 btshell_read
10001de4 g     O .bss	0000000c btshell_conns
000261c0 g     F .text	00000002 ble_hw_whitelist_enable
0002c4a0 g     F .text	00000070 ble_gattc_write
00029884 g     F .text	00000026 ble_gap_rx_rd_rem_sup_feat_complete
000155e8 g     F .text	00000018 btshell_read_long
0002688a g     F .text	0000001c ble_att_truncate_to_mtu
0001ef04 g     F .text	0000018c ble_ll_init
0002ef22 g     F .text	00000034 ble_hs_conn_chan_insert
0001c788 g     F .text	00000010 log_hdr_len
1000532c g     O .bss	00000002 ble_hs_max_attrs
100057b0 g     O .bss	00000080 ble_store_config_cccds
00026222 g     F .text	00000002 ble_hw_resolv_list_rmv
00019ff0 g     F .text	00000010 os_msys_reset
00014190 g     F .text	00000002 Default_Handler
00014780 g     F .text	00000018 _start
00028834 g     F .text	00000058 ble_att_svr_start
000261be g     F .text	00000002 ble_hw_whitelist_rmv
0001fd3a g     F .text	00000020 ble_ll_hci_set_scan_rsp_data
0001dc94 g     F .text	00000038 shell_os_ls_dev_cmd
0001c920 g     F .text	0000000c log_fill_current_img_hash
000157a8 g     F .text	0000006c btshell_tx_start
00029edc g     F .text	0000010c ble_gap_disc
00031880 g     F .text	00000084 ble_svc_ans_init
10003fa0 g     O .bss	00000010 g_stats_stats
10004460 g     O .bss	00000004 g_ble_ll_conn_comp_ev
0001a700 g     F .text	00000018 os_time_is_set
000141a8 g     F .text	00000006 os_arch_init_task_stack
10005834 g     O .bss	00000004 ble_store_config_num_our_secs
00022bdc g     F .text	00000034 ble_ll_ctrl_conn_param_reply
000194e2 g     F .text	00000022 os_eventq_run
00021f2c g     F .text	000000ac ble_ll_conn_hci_param_rr
00033f08 g     F .text	00000010 os_cputime_usecs_to_ticks
00030694 g     F .text	00000080 ble_hs_stop
00018e9c g     F .text	00000020 swap_in_place
0001a568 g     F .text	0000001c os_task_info_get_next
00019e0e g     F .text	0000003e os_memblock_from
1000434c g     O .bss	00000006 g_dev_addr
00026030 g     F .text	00000052 ble_ll_utils_remapped_channel
0001bd98 g     F .text	00000034 console_lock
0001edec g     F .text	00000010 ble_ll_event_send
000342b2 g     F .text	00000020 strncmp
0001576c g     F .text	0000001c btshell_ext_scan
00025780 g     F .text	00000090 ble_ll_scan_initiator_start
00014190  w    F .text	00000002 ADC_IRQHandler
00025f7c g     F .text	000000b4 ble_ll_utils_calc_access_addr
00030f00 g     F .text	0000003e ble_l2cap_sig_cmd_get
00025d84 g     F .text	00000088 ble_ll_sched_adv_reschedule
10002160 g     O .bss	00000050 g_idle_task
00033cd4 g     F .text	00000020 am_hal_ctimer_int_set
100006b4 g     O .data	00000004 sysinit_panic_cb
00014190  w    F .text	00000002 IOMASTER4_IRQHandler
0003392c g     F .text	00000070 hal_timer_start_at
00026082 g     F .text	0000003e ble_ll_utils_calc_num_used_chans
000300bc g     F .text	00000014 ble_mqueue_init
0001edd4 g     F .text	0000000c ble_ll_state_set
1000390c g     O .bss	00000004 g_os_sanity_check_list
0003216c g     F .text	0000002c ble_hci_trans_ll_evt_tx
0002f098 g     F .text	00000018 ble_hs_conn_find
0002fe1c g     F .text	00000050 ble_hs_id_addr
00020dc4 g     F .text	00000052 ble_ll_conn_central_init
0002c1b4 g     F .text	0000005c ble_gattc_disc_all_chrs
000310b4 g     F .text	00000028 ble_store_delete
0001acd2 g     F .text	00000034 strcasecmp
00014190  w    F .text	00000002 CTIMER_IRQHandler
00019e4c g     F .text	00000032 os_memblock_get
0001a29c g     F .text	00000088 os_sched_wakeup
00031ff8 g     F .text	0000005c ble_store_config_init
0002c7d6 g     F .text	0000001e ble_gattc_rx_find_info_idata
00033f2e g     F .text	00000010 os_sem_init
0001db3c g     F .text	000000b0 shell_os_mpool_display_cmd
0002df3c g     F .text	0000000c ble_hs_evq_set
0002a7bc g     F .text	00000030 ble_gap_preempt_no_lock
00031a14 g     F .text	00000028 ble_svc_gap_device_name_set
000341f4 g     F .text	00000060 realloc
0001ddbc g     F .text	00000040 shell_os_register
0001e6e8 g     F .text	00000030 mem_init_mbuf_pool
0002f0ec g     F .text	0000000c ble_hs_conn_first
000262dc g     F .text	0000000c ble_phy_disable
00018d74 g     F .text	00000098 os_default_irq
0001df80 g     F .text	00000024 sysdown_release
00022162 g     F .text	00000030 ble_ll_conn_hci_rd_rssi
00033b18 g     F .text	00000028 am_hal_ctimer_clear
10005228 g     O .bss	00000001 ble_hs_enabled_state
000207d8 g     F .text	00000024 ble_ll_conn_find_active_conn
00029914 g     F .text	00000026 ble_gap_timer
0002f5e8 g     F .text	000000b4 ble_hs_hci_acl_tx_now
00014190  w    F .text	00000002 IOSLAVE_ACC_IRQHandler
00015788 g     F .text	00000008 btshell_scan_cancel
0002c8e4 g     F .text	00000030 ble_gattc_rx_read_rsp
10003920 g     O .bss	00000004 g_os_last_ctx_sw_time
1000446c g     O .bss	00000008 g_ble_ll_conn_free_list
00033f40 g     F .text	00000064 os_sem_release
00025f1c g     F .text	00000024 ble_ll_sched_next_time
00034330 g     F .text	0000005c ble_hs_shutdown
00021cbc g     F .text	00000128 ble_ll_conn_hci_create
00014190  w    F .text	00000002 SOFTWARE0_IRQHandler
0001edfc g     F .text	0000000a ble_ll_read_supp_states
0001ac08 g     F .text	00000048 memcmp
0001a908 g     F .text	00000018 os_arch_init
00014190  w    F .text	00000002 STIMER_CMPR3_IRQHandler
0002e1d0 g     F .text	00000018 ble_hs_notifications_sched
0002c7f4 g     F .text	0000001e ble_gattc_rx_find_info_complete
00026258 g     F .text	00000038 ble_phy_txpwr_set
00014614  w    F .text	00000002 .hidden __aeabi_ldiv0
00018e6e g     F .text	0000002e get_le64
0002c0f4 g     F .text	00000064 ble_gattc_disc_svc_by_uuid
0001e054 g     F .text	0000000c sysinit_start
00033880 g     F .text	00000070 hal_timer_config
00019348 g     F .text	00000044 os_dev_open
00031f10 g     F .text	00000028 ble_store_config_write
0001ad2c g     F .text	0000002a strncat
0001fdc0 g     F .text	00000030 ble_ll_adv_can_chg_whitelist
0002c57c g     F .text	000000b0 ble_gattc_write_reliable
000207ac g     F .text	00000012 ble_ll_conn_is_lru
00019c9e g     F .text	000000ae os_mbuf_pack_chains
0002d8f8 g     F .text	000000b8 ble_gatts_chr_updated
000188ee g     F .text	00000012 parse_arg_uint16
0001c0b4 g     F .text	00000008 console_is_init
0002f538 g     F .text	0000007c ble_hs_hci_cmd_tx
00026134 g     F .text	0000002a ble_ll_whitelist_add
00020daa g     F .text	0000001a ble_ll_conn_auth_pyld_timer_cb
00033fa4 g     F .text	000000b4 os_sem_pend
0002edfe g     F .text	0000003c ble_hs_adv_parse
000339ea g     F .text	00000002 hal_watchdog_enable
0001e8c8 g     F .text	00000030 rwlock_init
0001fdf0 g     F .text	00000030 ble_ll_adv_send_conn_comp_ev
0003051e g     F .text	00000054 ble_hs_startup_go
0001e7d6 g     F .text	0000005a rwlock_acquire_read
0002e214 g     F .text	0000007c ble_hs_start
0001fbc8 g     F .text	0000003c ble_ll_adv_halt
00033eee g     F .text	00000008 os_cputime_timer_start
0001fa28 g     F .text	00000026 ble_ll_adv_chk_rpa_timeout
00022b40 g     F .text	0000001c ble_ll_ctrl_enc_allowed_pdu_rx
00026240 g     F .text	00000002 ble_phy_encrypt_disable
00022284 g     F .text	00000060 ble_ll_conn_hci_le_start_encrypt
0002e174 g     F .text	0000000a ble_hs_timer_resched
00023e84 g     F .text	00000028 ble_ll_hci_send_noop
00019f4c g     F .text	0000004c os_msys_register
0002582c g     F .text	00000014 ble_ll_scan_set_peer_rpa
100022b0 g     O .bss	00000004 g_os_idle_ctr
000223c4 g     F .text	0000006c ble_ll_conn_hci_wr_auth_pyld_tmo
0001ad8e g     F .text	0000000c strtoull
0001980c g     F .text	0000007a os_mbuf_cmpf
00022af2 g     F .text	00000012 ble_ll_calc_session_key
000321c4 g     F .text	0000002c ble_hci_trans_ll_acl_tx
000313d4 g     F .text	000000a8 ble_uuid_to_str
0002cee6 g     F .text	0000008e ble_gatts_clt_cfg_access
00024352 g     F .text	00000032 ble_ll_hci_vs_cmd_proc
0001ac9a g     F .text	00000038 memset
00026ece g     F .text	00000066 ble_att_clt_tx_write_cmd
00014020 g       .text	00000100 __isr_vector
000284c4 g     F .text	0000006e ble_att_svr_rx_write
00015834 g     F .text	0000012c main
00014190  w    F .text	00000002 STIMER_CMPR2_IRQHandler
0002874e g     F .text	0000006c ble_att_svr_rx_indicate
000222e4 g     F .text	00000062 ble_ll_conn_hci_le_ltk_reply
0003128a g     F .text	0000001e ble_store_util_delete_all
00025f50 g     F .text	0000002c ble_ll_sched_init
00024534 g     F .text	00000024 ble_ll_rand_init
0001c33c g     F .text	00000038 console_out_nolock
00024148 g     F .text	00000050 ble_ll_hci_ev_ltk_req
00015a7c g     F .text	00000084 print_conn_desc
00024db0 g     F .text	0000000a ble_ll_scan_timer_cb
0001883e g     F .text	00000066 parse_arg_uint64_bounds
0001ea30 g     F .text	00000054 ble_ll_task
00030822 g     F .text	0000000c ble_l2cap_get_conn_handle
0001ccb8 g     F .text	00000034 modlog_register
0002188c g     F .text	00000056 ble_ll_conn_hci_chk_conn_params
100042f8 g     O .bss	00000050 g_ble_ll_task
000241e4 g     F .text	00000042 ble_ll_hci_ev_rd_rem_ver
0001e060 g     F .text	0000000c sysinit_end
0002a1d8 g     F .text	00000040 ble_gap_terminate
0001cd68 g     F .text	000000c8 modlog_init
000141ae g     F .text	00000046 SVC_Handler
0002a930 g     F .text	00000080 ble_gap_init
00023eac g     F .text	00000048 ble_ll_hci_is_le_event_enabled
00029e48 g     F .text	00000014 ble_gap_conn_active
00024256 g     F .text	00000026 ble_ll_hci_ev_databuf_overflow
000297d8 g     F .text	00000084 ble_gap_set_prefered_le_phy
00023d06 g     F .text	00000004 ble_ll_hci_adv_mode_ext
000193cc g     F .text	0000000a os_eventq_inited
00039a90 g     O .text	00000008 sysdown_cbs
0002487c g     F .text	00000098 ble_ll_resolv_list_rmv
00024048 g     F .text	0000004a ble_ll_hci_ev_rem_conn_parm_req
0001e0e4 g     F .text	00000208 clocktime_to_timeval
00021de4 g     F .text	00000060 ble_ll_conn_hci_read_rem_features
0001e902 g     F .text	0000001c streamer_printf
0002fef0 g     F .text	00000018 ble_hs_id_reset
0001bdcc g     F .text	0000003c console_unlock
00019548 g     F .text	00000008 os_eventq_dflt_get
000338f0 g     F .text	0000001c hal_timer_read
00018b9c g     F .text	00000098 parse_arg_all
0002ff8a g     F .text	00000028 ble_hs_mbuf_from_flat
00019460 g     F .text	00000082 os_eventq_get
0001a85e g     F .text	0000002a os_time_ms_to_ticks
00025810 g     F .text	0000000c ble_ll_scan_enabled
0001c7f0 g     F .text	0000000a log_walk
0001929c g     F .text	0000003c os_callout_wakeup_ticks
0002986c g     F .text	00000018 ble_gap_rx_adv_report
000307f4 g     F .text	0000002e ble_l2cap_prepend_hdr
0001fea8 g     F .text	00000020 ble_ll_adv_init
0001e8f8 g     F .text	0000000a streamer_vprintf
000322e8 g     F .text	000000d4 ble_hci_ram_init
0002ff80 g     F .text	0000000a ble_hs_mbuf_att_pkt
10003a40 g     O .bss	00000004 flash_map_entries
0001976a g     F .text	000000a2 os_mbuf_adj
00014190  w    F .text	00000002 SCARD_IRQHandler
0002a348 g     F .text	00000036 ble_gap_reset_state
0001910a g     F .text	00000008 os_reboot
00014020 g       .imghdr	00000000 __text
0002993c g     F .text	0000009c ble_gap_wl_set
00025424 g     F .text	0000007c ble_ll_scan_sm_stop
00017e80 g     F .text	000001f4 cmd_gatt_write
10005700 g     O .bss	00000034 ble_l2cap_stats
0002e2ae g     F .text	00000008 ble_hs_tx_data
0001ad06 g     F .text	00000018 strcmp
00031b18 g     F .text	00000020 ble_svc_gatt_changed
0001c310 g     F .text	0000002c uart_console_blocking_mode
0001a1f4 g     F .text	0000000c os_sched_get_current_task
0001be28 g     F .text	00000078 console_write
1000469c g     O .bss	00000028 g_ble_ll_resolv_data
000159e0 g     F .text	0000001c print_uuid
000307c0 g     F .text	00000008 ble_l2cap_is_mtu_req_sent
0001abf8 g     F .text	00000010 lrand48
00026228 g     F .text	00000014 ble_phy_init
00026c74 g     F .text	0000004a ble_att_clt_tx_read_type
0002c048 g     F .text	00000054 ble_gattc_exchange_mtu
00014638 g     F .text	00000030 SystemInit
00033efe g     F .text	0000000a os_cputime_get32
0001ec52 g     F .text	00000016 ble_ll_is_valid_public_addr
00031346 g     F .text	00000050 ble_uuid_init_from_buf
0002ff08 g     F .text	00000024 ble_hs_log_mbuf
00019504 g     F .text	00000042 os_eventq_remove
00026160 g     F .text	00000040 ble_ll_whitelist_rmv
100040e8 g     O .bss	00000090 g_ble_ll_data
0002f0b0 g     F .text	00000018 ble_hs_conn_insert
00026368 g     F .text	00000004 ble_phy_max_data_pdu_pyld
0001a024 g     F .text	00000018 os_msys_num_free
00030d2c g     F .text	000000b8 ble_l2cap_sig_update
00031a3c g     F .text	00000074 ble_svc_gap_init
00033dcc g     F .text	00000020 am_hal_stimer_counter_get
00026f34 g     F .text	0000000a ble_att_clt_rx_write
00018e14 g     F .text	00000014 put_le32
00033db8 g     F .text	00000014 am_hal_stimer_config
00025ba0 g     F .text	000000e4 ble_ll_sched_conn_reschedule
0002d9d8 g     F .text	00000048 ble_gatts_add_svcs
00017b28 g     F .text	0000003c cmd_gatt_notify
00034254 g     F .text	00000020 sprintf
0001eda4 g     F .text	00000030 ble_ll_tx_mbuf_pducb
00018900 g     F .text	00000012 parse_arg_uint16_peek
10004464 g     O .bss	00000004 g_ble_ll_conn_create_sm
0002f768 g     F .text	00000038 ble_hs_hci_cmd_send_buf
00027094 g     F .text	0000000a ble_att_clt_rx_indicate
00026bf8 g     F .text	00000048 ble_att_clt_tx_find_type_value
00026d98 g     F .text	0000000e ble_att_clt_rx_read_blob
0001a3b4 g     F .text	00000022 os_sched
00026c40 g     F .text	00000034 ble_att_clt_rx_find_type_value
0002ef0c g     F .text	00000016 ble_hs_conn_chan_find_by_scid
00026cbe g     F .text	00000070 ble_att_clt_rx_read_type
0002ffb2 g     F .text	0000002a ble_hs_mbuf_to_flat
00021498 g     F .text	00000048 ble_ll_conn_tx_pkt_in
10005830 g     O .bss	00000004 ble_store_config_num_cccds
1000435c g     O .bss	0000007c g_ble_ll_adv_sm
0001ab18 g     F .text	000000e0 os_mutex_pend
00000000 g       .svc_table	00000000 SVC_Table
0002ff76 g     F .text	0000000a ble_hs_mbuf_l2cap_pkt
00024ac0 g     F .text	00000028 ble_ll_resolv_set_peer_rpa
00024b48 g     F .text	0000000c ble_ll_resolv_enabled
0002c850 g     F .text	0000002c ble_gattc_rx_read_type_adata
00039cd0 g       *ABS*	00000000 _init_data
1005fff8 g       .bss	00000000 __StackTop
0002686a g     F .text	00000020 ble_att_chan_mtu
0002fc60 g     F .text	00000040 ble_hs_hci_util_read_adv_tx_pwr
00024198 g     F .text	0000004c ble_ll_hci_ev_rd_rem_used_feat
0001a760 g     F .text	00000074 os_settimeofday
0003113c g     F .text	0000000c ble_store_write_our_sec
00015320 g     F .text	0000001c btshell_disc_all_chrs_in_svc
00017dd8 g     F .text	00000058 cmd_gatt_find_included_services
00030064 g     F .text	00000022 ble_hs_misc_conn_chan_find_reqd
0002c158 g     F .text	0000005c ble_gattc_find_inc_svcs
0002ef84 g     F .text	00000020 ble_hs_conn_foreach
00022da8 g     F .text	00000018 ble_ll_ctrl_is_terminate_ind
00033a18 g     F .text	00000080 am_hal_ctimer_config_single
0001b638 g     F .text	0000001e strsep
00024384 g     F .text	00000054 ble_ll_hci_vs_register
00024000 g     F .text	00000048 ble_ll_hci_ev_datalen_chg
00028710 g     F .text	0000003e ble_att_svr_rx_notify
0002694c g     F .text	00000038 ble_att_init
00027ea2 g     F .text	00000016 ble_att_svr_ticks_until_tmo
00014190  w    F .text	00000002 VCOMP_IRQHandler
0002fed6 g     F .text	0000001a ble_hs_id_use_addr
00015798 g     F .text	00000008 btshell_notify
0002eee0 g     F .text	0000002c ble_hs_conn_can_alloc
0002ee96 g     F .text	0000002c ble_hs_atomic_conn_flags
000300f2 g     F .text	0000003e ble_mqueue_put
00029782 g     F .text	00000056 ble_gap_set_prefered_default_le_phy
0002fcd6 g     F .text	00000026 ble_hs_hci_util_set_random_addr
00033e0c g     F .text	00000078 am_hal_stimer_compare_delta_set
00029afc g     F .text	00000048 ble_gap_adv_set_data
00028964 g     F .text	0000006e ble_eddystone_set_adv_data_url
00015308 g     F .text	00000018 btshell_disc_all_chrs
0002f304 g     F .text	00000004 ble_hs_flow_startup
00030e84 g     F .text	00000034 ble_l2cap_sig_init
00033b40 g     F .text	00000090 am_hal_ctimer_read
00019240 g     F .text	0000005c os_callout_tick
0002f2cc g     F .text	00000034 ble_hs_conn_init
00039a98 g     O .text	00000048 sysflash_map_dflt
0002a7ec g     F .text	00000018 ble_gap_preempt
0001c388 g     F .text	00000010 uart_console_is_init
00014120 g       .text	00000000 __isr_vector_end
000190e8 g     F .text	00000022 os_start
0001ece0 g     F .text	00000028 ble_ll_is_valid_own_addr_type
00030f84 g     F .text	0000001e ble_l2cap_sig_reject_invalid_cid_tx
000235dc g     F .text	0000004e ble_ll_ctrl_reject_ind_send
0001ec3a g     F .text	00000018 ble_ll_is_rpa
0002a4b4 g     F .text	00000098 ble_gap_rx_param_req
00018ebc g     F .text	0000001c swap_buf
00022b9a g     F .text	00000042 ble_ll_ctrl_start_enc_send
0001ee08 g     F .text	0000000c ble_ll_read_supp_features
00020e18 g     F .text	000000f8 ble_ll_conn_sm_new
00022040 g     F .text	00000048 ble_ll_conn_create_cancel
00021e44 g     F .text	000000e6 ble_ll_conn_hci_update
000243f4 g     F .text	00000050 ble_ll_rand_sample
00031148 g     F .text	0000000e ble_store_read_peer_sec
00017920 g     F .text	00000090 cmd_gatt_discover_characteristic
00018974 g     F .text	00000024 parse_arg_uint16_dflt
0001a41c g     F .text	0000000a os_task_stacktop_get
000211fc g     F .text	00000016 ble_ll_conn_created_on_legacy
000187da g     F .text	00000020 parse_arg_long_bounds_peek
10005120 g     O .bss	00000098 ble_gattc_stats
00014190  w    F .text	00000002 MSPI_IRQHandler
0001ee8c g     F .text	00000006 ble_ll_pdu_tx_time_get
00033eb0 g     F .text	0000003e os_cputime_timer_init
00033e84 g     F .text	00000014 am_hal_stimer_int_enable
00030ef2 g     F .text	0000000e ble_l2cap_sig_hdr_parse
00027fc2 g     F .text	00000030 ble_att_svr_tx_error_rsp
00020824 g     F .text	0000001a ble_ll_conn_calc_dci
00033c8c g     F .text	00000028 am_hal_ctimer_int_disable
000187fa g     F .text	00000020 parse_arg_long_bounds
000261a8 g     F .text	00000008 ble_ll_whitelist_disable
0001ed5c g     F .text	00000014 ble_ll_get_our_devaddr
000302b8 g     F .text	00000078 ble_hs_pvcy_set_our_irk
0002a380 g     F .text	000000c0 ble_gap_rx_update_complete
00019a90 g     F .text	00000044 os_mbuf_concat
0001bf2c g     F .text	00000188 console_handle_char
00031156 g     F .text	00000052 ble_store_write_peer_sec
00033aec g     F .text	0000002c am_hal_ctimer_stop
0002558c g     F .text	0000006c ble_ll_scan_chk_resume
00018a8c g     F .text	00000020 parse_arg_byte_stream_exact_length
00033294 g     F .text	0000007e _cbor_value_dup_string
0001d9f4 g     F .text	0000004c shell_register
000178bc g     F .text	00000048 cmd_parse_conn_start_end
00015668 g     F .text	00000018 btshell_write_long
10000670 g     O .data	00000008 g_os_run_list
00024ba4 g     F .text	0000001c ble_ll_rfmgmt_init
00014668 g     F .text	00000034 NVIC_Relocate
0002df80 g     F .text	00000010 ble_hs_unlock_nested
00014190  w    F .text	00000002 IOMASTER3_IRQHandler
00018cf4 g     F .text	0000003c sysinit_app
00030764 g     F .text	00000034 ble_l2cap_chan_alloc
00026b70 g     F .text	00000038 ble_att_clt_tx_find_info
10003964 g     O .bss	00000004 os_flags
00015364 g     F .text	00000010 btshell_disc_svc_by_uuid
0001872c g     F .text	00000038 parse_arg_peek
00015b00 g     F .text	00000034 print_svc
0001a8b4 g     F .text	00000006 os_arch_restore_sr
00014190  w    F .text	00000002 BLE_IRQHandler
00030998 g     F .text	00000050 ble_l2cap_init
00026a8a g     F .text	00000082 ble_att_clt_tx_mtu
0002972e g     F .text	00000054 ble_gap_read_le_phy
00025840 g     F .text	00000048 ble_ll_scan_reset
00023d0c g     F .text	00000030 ble_ll_hci_event_send
0001fe4c g     F .text	00000004 ble_ll_adv_get_peer_rpa
000320c0 g     F .text	0000002e ble_hs_util_ensure_addr
1005fe48 g       *ABS*	000001b0 __StackLimit
0002c8c6 g     F .text	0000001e ble_gattc_rx_read_group_type_complete
10002b08 g     O .bss	00000004 g_os_started
00015618 g     F .text	0000001c btshell_read_mult
00017d14 g     F .text	00000060 cmd_gatt_service_changed
00014190  w    F .text	00000002 STIMER_CMPR7_IRQHandler
00017904 g     F .text	0000001c cmd_init
00029bd4 g     F .text	000001bc ble_gap_rx_conn_complete
00032240 g     F .text	000000a4 ble_hci_trans_buf_free
00030958 g     F .text	0000003e ble_l2cap_tx
000320f0 g     F .text	00000028 ble_hci_trans_cfg_hs
00023f9c g     F .text	0000000a ble_ll_hci_acl_rx
0002c87c g     F .text	0000002c ble_gattc_rx_read_type_complete
00032b70 g     F .text	00000050 cbor_value_leave_container
10004490 g     O .bss	000001a0 g_ble_ll_conn_sm
0002a67c g     F .text	00000004 ble_gap_unpair_oldest_except
0002c3f8 g     F .text	00000074 ble_gattc_read_mult
00018e28 g     F .text	00000026 put_le64
0001ec14 g     F .text	00000010 ble_ll_chk_txrx_octets
000311b6 g     F .text	0000000c ble_store_write_cccd
00014618 g     F .text	00000020 SystemCoreClockUpdate
000195ce g     F .text	00000020 os_mbuf_free_chain
00031fd0 g     F .text	00000028 ble_store_config_delete
0002dfc4 g     F .text	0000003a ble_hs_wakeup_tx
0001a7d4 g     F .text	0000003c os_get_uptime
0002fca0 g     F .text	00000036 ble_hs_hci_util_read_rssi
0001a03c g     F .text	00000034 os_msys_init
0002f074 g     F .text	00000024 ble_hs_conn_remove
00027c80 g     F .text	00000018 ble_att_svr_find_by_handle
00019696 g     F .text	00000022 os_mbuf_off
100039bf g     O .bss	00000001 g_is_output_nlip
0002f514 g     F .text	00000024 ble_hs_hci_add_avail_pkts
0001da40 g     F .text	0000008c shell_cmd_register
0001a648 g     F .text	0000000c os_time_get
10003bb0 g     O .bss	0000001c modlog_mapping_pool
00032118 g     F .text	00000028 ble_hci_trans_cfg_ll
00015660 g     F .text	00000008 btshell_write_no_rsp
000285aa g     F .text	000000b2 ble_att_svr_rx_prep_write
0003399c g     F .text	0000004a hal_timer_stop
0001c798 g     F .text	00000058 log_append_body
00024a3a g     F .text	00000086 ble_ll_resolv_get_priv_addr
00026f3e g     F .text	00000062 ble_att_clt_tx_prep_write
00019588 g     F .text	00000032 os_mbuf_get_pkthdr
10005840 g     O .bss	000000f0 ble_store_config_our_secs
10003a44 g     O .bss	00000008 g_log_info
00026386 g     F .text	00000002 ble_phy_rfclk_enable
00014614  w    F .text	00000002 .hidden __aeabi_idiv0
0001e42c g     F .text	000001f6 datetime_parse
1000532e g     O .bss	00000002 ble_hs_max_client_configs
00028342 g     F .text	00000082 ble_att_svr_rx_read_blob
0002d768 g     F .text	00000020 ble_gatts_conn_can_alloc
000261a0 g     F .text	00000008 ble_ll_whitelist_enable
0002df6c g     F .text	00000014 ble_hs_lock_nested
0001571c g     F .text	0000001c btshell_ext_conn_initiate
0002edb4 g     F .text	00000010 ble_hs_adv_set_fields
00038c20 g     O .text	0000002d g_ble_ll_supp_cmds
00014190  w    F .text	00000002 STIMER_CMPR0_IRQHandler
0001a428 g     F .text	000000e4 os_task_init
00014190  w    F .text	00000002 BROWNOUT_IRQHandler
000311e6 g     F .text	0000002a ble_store_key_from_value_sec
00014182  w    F .text	00000002 BusFault_Handler
00030714 g     F .text	0000001c ble_hs_stop_init
0001ca6c g     F .text	00000064 log_console_init
0002e194 g     F .text	0000003c ble_hs_enqueue_hci_event
0001dfa4 g     F .text	000000a8 sysdown
000240d6 g     F .text	00000072 ble_ll_hci_ev_encrypt_chg
00015a68 g     F .text	00000014 chr_is_empty
00021c96 g     F .text	00000024 ble_ll_conn_hci_create_check_scan
0001c0c8 g     F .text	00000028 console_line_event_put
0001ad1e g     F .text	0000000e strlen
0002ef56 g     F .text	0000002c ble_hs_conn_delete_chan
00019e7e g     F .text	0000001e os_memblock_put_from_cb
00026378 g     F .text	0000000c ble_phy_resolv_list_disable
0001e856 g     F .text	00000054 rwlock_acquire_write
10004668 g     O .bss	00000020 g_ble_ll_rnum_buf
000193bc g     F .text	00000010 os_eventq_init
00017a08 g     F .text	00000080 cmd_gatt_discover_service
00026de6 g     F .text	0000000e ble_att_clt_rx_read_mult
0001a654 g     F .text	0000004c os_time_advance
00015738 g     F .text	00000008 btshell_conn_cancel
00022392 g     F .text	00000032 ble_ll_conn_hci_rd_auth_pyld_tmo
000287bc g     F .text	00000018 ble_att_svr_hide_range
000207c0 g     F .text	00000018 ble_ll_conn_get_ce_end_time
0001a3d8 g     F .text	0000002c os_sched_resort
00031592 g     F .text	00000024 ble_uuid_to_mbuf
0001582c g     F .text	00000008 btshell_rssi
00028572 g     F .text	00000024 ble_att_svr_write_local
000296fc g     F .text	0000002a ble_gap_conn_find
00019c38 g     F .text	00000012 os_mbuf_prepend_pullup
0002665a g     F .text	0000000e ble_att_conn_chan_find
00033370 g     F .text	0000002c hal_flash_init
00018e4e g     F .text	0000000a get_le16
0003428a g     F .text	00000014 strchr
0001deb4 g     F .text	00000058 stats_module_init
000298d4 g     F .text	00000040 ble_gap_rx_phy_update_complete
00021710 g     F .text	000000c8 ble_ll_conn_module_reset
00014180  w    F .text	00000002 MemoryManagement_Handler
0002a804 g     F .text	000000c4 ble_gap_preempt_done
0001fd0c g     F .text	00000014 ble_ll_adv_read_txpwr
0002c95a g     F .text	0000001e ble_gattc_rx_write_rsp
00031000 g     F .text	00000032 ble_sm_cmd_get
0002f6c4 g     F .text	0000000c ble_hs_hci_get_hci_version
00026b0c g     F .text	00000064 ble_att_clt_rx_mtu
00032198 g     F .text	0000002c ble_hci_trans_hs_acl_tx
100043dc g     O .bss	00000080 ble_ll_conn_stats
0002e000 g     F .text	00000014 ble_hs_is_enabled
0001cad0 g     F .text	0000001c log_level_get
000213f4 g     F .text	000000a4 ble_ll_conn_enqueue_pkt
0001fbc0 g     F .text	00000008 ble_ll_adv_event_rmvd_from_sched
0002ff2c g     F .text	0000000c ble_hs_log_flat_buf
00022ea4 g     F .text	00000070 ble_ll_ctrl_chk_proc_start
00030f40 g     F .text	00000044 ble_l2cap_sig_reject_tx
00028532 g     F .text	00000040 ble_att_svr_rx_write_no_rsp
00027c24 g     F .text	00000050 ble_att_svr_register
000192fc g     F .text	0000002c os_dev_initialize_all
000300d0 g     F .text	00000022 ble_mqueue_get
00029dd4 g     F .text	00000014 ble_gap_adv_stop
000217d8 g     F .text	0000008c ble_ll_conn_module_init
0001cd2c g     F .text	0000003a modlog_printf
00025e7c g     F .text	000000a0 ble_ll_sched_rmv_elem
0002dae4 g     F .text	00000028 ble_gatts_reset
000179b0 g     F .text	00000058 cmd_gatt_discover_descriptor
00030034 g     F .text	00000030 ble_hs_misc_conn_chan_find
0002c6b6 g     F .text	0000000c ble_gatts_indicate_fail_notconn
0002eec2 g     F .text	0000001c ble_hs_atomic_first_conn_handle
10000678 g     O .data	00000008 g_os_sleep_list
0001b470 g     F .text	00000050 jrand48
0001425c g     F .text	00000000 .hidden __aeabi_ldivmod
00030198 g     F .text	00000024 ble_hs_pvcy_ensure_started
00023230 g     F .text	000003aa ble_ll_ctrl_rx_pdu
0001e938 g     F .text	00000008 streamer_console_get
0002edc4 g     F .text	0000003a ble_hs_adv_parse_fields
00033324 g     F .text	0000004c hal_bsp_init
00014190  w    F .text	00000002 STIMER_CMPR5_IRQHandler
0002c9fe g     F .text	0000000c ble_gattc_connection_broken
0001911c g     F .text	0000004c os_pkg_init
0002a4a0 g     F .text	00000014 ble_gap_conn_cancel
000262b4 g     F .text	00000028 ble_phy_setchan
00029726 g     F .text	00000008 ble_gap_set_priv_mode
00029ba4 g     F .text	00000024 ble_gap_adv_rsp_set_fields
1000445c g     O .bss	00000004 g_ble_ll_conn_active_list
00021b50 g     F .text	000000e8 ble_ll_conn_num_comp_pkts_event_send
00018b38 g     F .text	00000064 parse_arg_uuid
00029b44 g     F .text	0000003c ble_gap_adv_rsp_set_data
00024518 g     F .text	0000001c ble_ll_rand_start
0002a2e4 g     F .text	00000064 ble_gap_rx_disconn_complete
0001a0ac g     F .text	00000010 os_sanity_check_init
0001881a g     F .text	00000024 parse_arg_long_bounds_dflt
00024b88 g     F .text	0000001c ble_ll_resolv_list_reset
00026114 g     F .text	00000014 ble_ll_whitelist_clear
0002eff4 g     F .text	00000080 ble_hs_conn_alloc
0002f5b4 g     F .text	00000032 ble_hs_hci_rx_evt
0003328c g     F .text	00000008 cbor_value_to_pretty_advance
0002fcfc g     F .text	00000054 ble_hs_hci_util_set_data_len
000211d0 g     F .text	0000002c ble_ll_conn_event_halt
0001de58 g     F .text	00000022 stats_init
0001b3d0 g     F .text	00000008 vfprintf
0001b656 g     F .text	00000032 strpbrk
00024b14 g     F .text	00000034 ble_ll_resolv_gen_rpa
10002ab8 g     O .bss	00000050 g_os_main_task
000341c8 g     F .text	0000002c free
00015790 g     F .text	00000008 btshell_update_conn
0001be08 g     F .text	0000001e console_out



Disassembly of section .text:

00014020 <__isr_vector>:
   14020:	1005fff8 	.word	0x1005fff8
   14024:	00014121 	.word	0x00014121
   14028:	0001417d 	.word	0x0001417d
   1402c:	0001417f 	.word	0x0001417f
   14030:	00014181 	.word	0x00014181
   14034:	00014183 	.word	0x00014183
   14038:	00014185 	.word	0x00014185
   1403c:	00014187 	.word	0x00014187
	...
   1404c:	000141af 	.word	0x000141af
   14050:	0001418b 	.word	0x0001418b
   14054:	00000000 	.word	0x00000000
   14058:	000141f5 	.word	0x000141f5
   1405c:	0001421f 	.word	0x0001421f
   14060:	00014191 	.word	0x00014191
   14064:	00014191 	.word	0x00014191
   14068:	00014191 	.word	0x00014191
   1406c:	00014191 	.word	0x00014191
   14070:	00014191 	.word	0x00014191
   14074:	00014191 	.word	0x00014191
   14078:	00014191 	.word	0x00014191
   1407c:	00014191 	.word	0x00014191
   14080:	00014191 	.word	0x00014191
   14084:	00014191 	.word	0x00014191
   14088:	00014191 	.word	0x00014191
   1408c:	00014191 	.word	0x00014191
   14090:	00014191 	.word	0x00014191
   14094:	00014191 	.word	0x00014191
   14098:	00014191 	.word	0x00014191
   1409c:	00014191 	.word	0x00014191
   140a0:	00014191 	.word	0x00014191
   140a4:	00014191 	.word	0x00014191
   140a8:	00014191 	.word	0x00014191
   140ac:	00014191 	.word	0x00014191
   140b0:	00014191 	.word	0x00014191
   140b4:	00014191 	.word	0x00014191
   140b8:	00014191 	.word	0x00014191
   140bc:	00014191 	.word	0x00014191
   140c0:	00014191 	.word	0x00014191
   140c4:	00014191 	.word	0x00014191
   140c8:	00014191 	.word	0x00014191
   140cc:	00014191 	.word	0x00014191
   140d0:	00014191 	.word	0x00014191
   140d4:	00014191 	.word	0x00014191
   140d8:	00014191 	.word	0x00014191
   140dc:	00014191 	.word	0x00014191

000140e0 <__ble_patch>:
	...

00014120 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
   14120:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
   14124:	4a0c      	ldr	r2, [pc, #48]	; (14158 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
   14126:	4b0d      	ldr	r3, [pc, #52]	; (1415c <.bss_zero_loop+0x34>)

00014128 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
   14128:	429a      	cmp	r2, r3
    itt     lt
   1412a:	bfbc      	itt	lt
    strlt   r0, [r2], #4
   1412c:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
   14130:	e7fa      	blt.n	14128 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
   14132:	490b      	ldr	r1, [pc, #44]	; (14160 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
   14134:	4a0b      	ldr	r2, [pc, #44]	; (14164 <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
   14136:	4b0c      	ldr	r3, [pc, #48]	; (14168 <.bss_zero_loop+0x40>)

    subs    r3, r2
   14138:	1a9b      	subs	r3, r3, r2
    ble     .LC0
   1413a:	dd03      	ble.n	14144 <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
   1413c:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
   1413e:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
   14140:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
   14142:	dcfb      	bgt.n	1413c <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
   14144:	4809      	ldr	r0, [pc, #36]	; (1416c <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
   14146:	490a      	ldr	r1, [pc, #40]	; (14170 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
   14148:	f000 faa8 	bl	1469c <_sbrkInit>

    LDR     R0, =SystemInit
   1414c:	4809      	ldr	r0, [pc, #36]	; (14174 <.bss_zero_loop+0x4c>)
    BLX     R0
   1414e:	4780      	blx	r0

    BL      hal_system_init
   14150:	f000 face 	bl	146f0 <hal_system_init>

    LDR     R0, =_start
   14154:	4808      	ldr	r0, [pc, #32]	; (14178 <.bss_zero_loop+0x50>)
    BX      R0
   14156:	4700      	bx	r0
    ldr     r2, =__bss_start__
   14158:	100008b0 	.word	0x100008b0
    ldr     r3, =__bss_end__
   1415c:	10005e80 	.word	0x10005e80
    ldr    r1, =__etext
   14160:	00039cd0 	.word	0x00039cd0
    ldr    r2, =__data_start__
   14164:	10000100 	.word	0x10000100
    ldr    r3, =__data_end__
   14168:	100008b0 	.word	0x100008b0
    LDR     R0, =__HeapBase
   1416c:	10005e80 	.word	0x10005e80
    LDR     R1, =__HeapLimit
   14170:	1005fe48 	.word	0x1005fe48
    LDR     R0, =SystemInit
   14174:	00014639 	.word	0x00014639
    LDR     R0, =_start
   14178:	00014781 	.word	0x00014781

0001417c <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
   1417c:	e7fe      	b.n	1417c <NMI_Handler>

0001417e <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
   1417e:	e7fe      	b.n	1417e <HardFault_Handler>

00014180 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
   14180:	e7fe      	b.n	14180 <MemoryManagement_Handler>

00014182 <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
   14182:	e7fe      	b.n	14182 <BusFault_Handler>

00014184 <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
   14184:	e7fe      	b.n	14184 <UsageFault_Handler>

00014186 <SecureFault_Handler>:


    .weak   SecureFault_Handler
    .type   SecureFault_Handler, %function
SecureFault_Handler:
    B       .
   14186:	e7fe      	b.n	14186 <SecureFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
   14188:	e7fe      	b.n	14188 <SecureFault_Handler+0x2>

0001418a <DebugMon_Handler>:


    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    B       .
   1418a:	e7fe      	b.n	1418a <DebugMon_Handler>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
   1418c:	e7fe      	b.n	1418c <DebugMon_Handler+0x2>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
   1418e:	e7fe      	b.n	1418e <DebugMon_Handler+0x4>

00014190 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
   14190:	e7fe      	b.n	14190 <Default_Handler>
   14192:	bf00      	nop

00014194 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   14194:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   14198:	482b      	ldr	r0, [pc, #172]	; (14248 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   1419a:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   1419c:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   1419e:	f380 8814 	msr	CONTROL, r0
        ISB
   141a2:	f3bf 8f6f 	isb	sy
        BX      LR
   141a6:	4770      	bx	lr

000141a8 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   141a8:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   141ac:	4770      	bx	lr

000141ae <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   141ae:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   141b2:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   141b4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   141b8:	b951      	cbnz	r1, 141d0 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   141ba:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   141be:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   141c0:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   141c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   141c6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   141ca:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   141ce:	4770      	bx	lr

000141d0 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   141d0:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   141d2:	4a1e      	ldr	r2, [pc, #120]	; (1424c <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   141d4:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   141d6:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   141d8:	d809      	bhi.n	141ee <SVC_Done>

        LDR     R4,=SVC_Table-4
   141da:	4c1d      	ldr	r4, [pc, #116]	; (14250 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   141dc:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   141e0:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   141e4:	47a0      	blx	r4

        MRS     R12,PSP
   141e6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   141ea:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

000141ee <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   141ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   141f2:	4770      	bx	lr

000141f4 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   141f4:	4b17      	ldr	r3, [pc, #92]	; (14254 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   141f6:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   141f8:	4b17      	ldr	r3, [pc, #92]	; (14258 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   141fa:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   141fc:	4291      	cmp	r1, r2
        IT      EQ
   141fe:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   14200:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   14202:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
   14206:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   1420a:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1420e:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   14210:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
   14214:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
   14218:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1421c:	4770      	bx	lr

0001421e <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1421e:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   14220:	f006 fb33 	bl	1a88a <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   14224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   14228:	4770      	bx	lr

0001422a <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1422a:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1422e:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   14230:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   14234:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   14238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   1423c:	4668      	mov	r0, sp
        BL      os_default_irq
   1423e:	f004 fd99 	bl	18d74 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   14242:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   14246:	4770      	bx	lr
        LDR     R0,=os_flags
   14248:	10003964 	.word	0x10003964
        LDR     R2,=SVC_Count
   1424c:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   14250:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   14254:	10000670 	.word	0x10000670
        LDR     R3,=g_current_task      /* Get current task */
   14258:	1000391c 	.word	0x1000391c

0001425c <__aeabi_ldivmod>:
   1425c:	b97b      	cbnz	r3, 1427e <__aeabi_ldivmod+0x22>
   1425e:	b972      	cbnz	r2, 1427e <__aeabi_ldivmod+0x22>
   14260:	2900      	cmp	r1, #0
   14262:	bfbe      	ittt	lt
   14264:	2000      	movlt	r0, #0
   14266:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1426a:	e006      	blt.n	1427a <__aeabi_ldivmod+0x1e>
   1426c:	bf08      	it	eq
   1426e:	2800      	cmpeq	r0, #0
   14270:	bf1c      	itt	ne
   14272:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   14276:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1427a:	f000 b9cb 	b.w	14614 <__aeabi_idiv0>
   1427e:	f1ad 0c08 	sub.w	ip, sp, #8
   14282:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   14286:	2900      	cmp	r1, #0
   14288:	db09      	blt.n	1429e <__aeabi_ldivmod+0x42>
   1428a:	2b00      	cmp	r3, #0
   1428c:	db1a      	blt.n	142c4 <__aeabi_ldivmod+0x68>
   1428e:	f000 f861 	bl	14354 <__udivmoddi4>
   14292:	f8dd e004 	ldr.w	lr, [sp, #4]
   14296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1429a:	b004      	add	sp, #16
   1429c:	4770      	bx	lr
   1429e:	4240      	negs	r0, r0
   142a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   142a4:	2b00      	cmp	r3, #0
   142a6:	db1b      	blt.n	142e0 <__aeabi_ldivmod+0x84>
   142a8:	f000 f854 	bl	14354 <__udivmoddi4>
   142ac:	f8dd e004 	ldr.w	lr, [sp, #4]
   142b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   142b4:	b004      	add	sp, #16
   142b6:	4240      	negs	r0, r0
   142b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   142bc:	4252      	negs	r2, r2
   142be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   142c2:	4770      	bx	lr
   142c4:	4252      	negs	r2, r2
   142c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   142ca:	f000 f843 	bl	14354 <__udivmoddi4>
   142ce:	f8dd e004 	ldr.w	lr, [sp, #4]
   142d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   142d6:	b004      	add	sp, #16
   142d8:	4240      	negs	r0, r0
   142da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   142de:	4770      	bx	lr
   142e0:	4252      	negs	r2, r2
   142e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   142e6:	f000 f835 	bl	14354 <__udivmoddi4>
   142ea:	f8dd e004 	ldr.w	lr, [sp, #4]
   142ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   142f2:	b004      	add	sp, #16
   142f4:	4252      	negs	r2, r2
   142f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   142fa:	4770      	bx	lr

000142fc <__aeabi_uldivmod>:
   142fc:	b953      	cbnz	r3, 14314 <__aeabi_uldivmod+0x18>
   142fe:	b94a      	cbnz	r2, 14314 <__aeabi_uldivmod+0x18>
   14300:	2900      	cmp	r1, #0
   14302:	bf08      	it	eq
   14304:	2800      	cmpeq	r0, #0
   14306:	bf1c      	itt	ne
   14308:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1430c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   14310:	f000 b980 	b.w	14614 <__aeabi_idiv0>
   14314:	f1ad 0c08 	sub.w	ip, sp, #8
   14318:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1431c:	f000 f81a 	bl	14354 <__udivmoddi4>
   14320:	f8dd e004 	ldr.w	lr, [sp, #4]
   14324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   14328:	b004      	add	sp, #16
   1432a:	4770      	bx	lr

0001432c <__popcountsi2>:
   1432c:	0843      	lsrs	r3, r0, #1
   1432e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
   14332:	1ac0      	subs	r0, r0, r3
   14334:	0883      	lsrs	r3, r0, #2
   14336:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
   1433a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
   1433e:	4418      	add	r0, r3
   14340:	eb00 1010 	add.w	r0, r0, r0, lsr #4
   14344:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
   14348:	eb00 2000 	add.w	r0, r0, r0, lsl #8
   1434c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
   14350:	0e00      	lsrs	r0, r0, #24
   14352:	4770      	bx	lr

00014354 <__udivmoddi4>:
   14354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14358:	9e08      	ldr	r6, [sp, #32]
   1435a:	460d      	mov	r5, r1
   1435c:	4604      	mov	r4, r0
   1435e:	468e      	mov	lr, r1
   14360:	2b00      	cmp	r3, #0
   14362:	f040 8082 	bne.w	1446a <__udivmoddi4+0x116>
   14366:	428a      	cmp	r2, r1
   14368:	4617      	mov	r7, r2
   1436a:	d946      	bls.n	143fa <__udivmoddi4+0xa6>
   1436c:	fab2 f282 	clz	r2, r2
   14370:	b14a      	cbz	r2, 14386 <__udivmoddi4+0x32>
   14372:	f1c2 0120 	rsb	r1, r2, #32
   14376:	fa05 f302 	lsl.w	r3, r5, r2
   1437a:	fa20 f101 	lsr.w	r1, r0, r1
   1437e:	4097      	lsls	r7, r2
   14380:	ea41 0e03 	orr.w	lr, r1, r3
   14384:	4094      	lsls	r4, r2
   14386:	ea4f 4817 	mov.w	r8, r7, lsr #16
   1438a:	0c23      	lsrs	r3, r4, #16
   1438c:	fbbe fcf8 	udiv	ip, lr, r8
   14390:	b2b9      	uxth	r1, r7
   14392:	fb08 ee1c 	mls	lr, r8, ip, lr
   14396:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
   1439a:	fb0c f001 	mul.w	r0, ip, r1
   1439e:	4298      	cmp	r0, r3
   143a0:	d90a      	bls.n	143b8 <__udivmoddi4+0x64>
   143a2:	18fb      	adds	r3, r7, r3
   143a4:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
   143a8:	f080 8116 	bcs.w	145d8 <__udivmoddi4+0x284>
   143ac:	4298      	cmp	r0, r3
   143ae:	f240 8113 	bls.w	145d8 <__udivmoddi4+0x284>
   143b2:	f1ac 0c02 	sub.w	ip, ip, #2
   143b6:	443b      	add	r3, r7
   143b8:	1a1b      	subs	r3, r3, r0
   143ba:	b2a4      	uxth	r4, r4
   143bc:	fbb3 f0f8 	udiv	r0, r3, r8
   143c0:	fb08 3310 	mls	r3, r8, r0, r3
   143c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   143c8:	fb00 f101 	mul.w	r1, r0, r1
   143cc:	42a1      	cmp	r1, r4
   143ce:	d909      	bls.n	143e4 <__udivmoddi4+0x90>
   143d0:	193c      	adds	r4, r7, r4
   143d2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   143d6:	f080 8101 	bcs.w	145dc <__udivmoddi4+0x288>
   143da:	42a1      	cmp	r1, r4
   143dc:	f240 80fe 	bls.w	145dc <__udivmoddi4+0x288>
   143e0:	3802      	subs	r0, #2
   143e2:	443c      	add	r4, r7
   143e4:	1a64      	subs	r4, r4, r1
   143e6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   143ea:	2100      	movs	r1, #0
   143ec:	b11e      	cbz	r6, 143f6 <__udivmoddi4+0xa2>
   143ee:	40d4      	lsrs	r4, r2
   143f0:	2300      	movs	r3, #0
   143f2:	e9c6 4300 	strd	r4, r3, [r6]
   143f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   143fa:	b902      	cbnz	r2, 143fe <__udivmoddi4+0xaa>
   143fc:	deff      	udf	#255	; 0xff
   143fe:	fab2 f282 	clz	r2, r2
   14402:	2a00      	cmp	r2, #0
   14404:	d14f      	bne.n	144a6 <__udivmoddi4+0x152>
   14406:	1bcb      	subs	r3, r1, r7
   14408:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   1440c:	fa1f f887 	uxth.w	r8, r7
   14410:	2101      	movs	r1, #1
   14412:	fbb3 fcfe 	udiv	ip, r3, lr
   14416:	0c25      	lsrs	r5, r4, #16
   14418:	fb0e 331c 	mls	r3, lr, ip, r3
   1441c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   14420:	fb08 f30c 	mul.w	r3, r8, ip
   14424:	42ab      	cmp	r3, r5
   14426:	d907      	bls.n	14438 <__udivmoddi4+0xe4>
   14428:	197d      	adds	r5, r7, r5
   1442a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1442e:	d202      	bcs.n	14436 <__udivmoddi4+0xe2>
   14430:	42ab      	cmp	r3, r5
   14432:	f200 80e7 	bhi.w	14604 <__udivmoddi4+0x2b0>
   14436:	4684      	mov	ip, r0
   14438:	1aed      	subs	r5, r5, r3
   1443a:	b2a3      	uxth	r3, r4
   1443c:	fbb5 f0fe 	udiv	r0, r5, lr
   14440:	fb0e 5510 	mls	r5, lr, r0, r5
   14444:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   14448:	fb08 f800 	mul.w	r8, r8, r0
   1444c:	45a0      	cmp	r8, r4
   1444e:	d907      	bls.n	14460 <__udivmoddi4+0x10c>
   14450:	193c      	adds	r4, r7, r4
   14452:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   14456:	d202      	bcs.n	1445e <__udivmoddi4+0x10a>
   14458:	45a0      	cmp	r8, r4
   1445a:	f200 80d7 	bhi.w	1460c <__udivmoddi4+0x2b8>
   1445e:	4618      	mov	r0, r3
   14460:	eba4 0408 	sub.w	r4, r4, r8
   14464:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   14468:	e7c0      	b.n	143ec <__udivmoddi4+0x98>
   1446a:	428b      	cmp	r3, r1
   1446c:	d908      	bls.n	14480 <__udivmoddi4+0x12c>
   1446e:	2e00      	cmp	r6, #0
   14470:	f000 80af 	beq.w	145d2 <__udivmoddi4+0x27e>
   14474:	2100      	movs	r1, #0
   14476:	e9c6 0500 	strd	r0, r5, [r6]
   1447a:	4608      	mov	r0, r1
   1447c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14480:	fab3 f183 	clz	r1, r3
   14484:	2900      	cmp	r1, #0
   14486:	d14b      	bne.n	14520 <__udivmoddi4+0x1cc>
   14488:	42ab      	cmp	r3, r5
   1448a:	d302      	bcc.n	14492 <__udivmoddi4+0x13e>
   1448c:	4282      	cmp	r2, r0
   1448e:	f200 80b7 	bhi.w	14600 <__udivmoddi4+0x2ac>
   14492:	1a84      	subs	r4, r0, r2
   14494:	eb65 0303 	sbc.w	r3, r5, r3
   14498:	2001      	movs	r0, #1
   1449a:	469e      	mov	lr, r3
   1449c:	2e00      	cmp	r6, #0
   1449e:	d0aa      	beq.n	143f6 <__udivmoddi4+0xa2>
   144a0:	e9c6 4e00 	strd	r4, lr, [r6]
   144a4:	e7a7      	b.n	143f6 <__udivmoddi4+0xa2>
   144a6:	f1c2 0c20 	rsb	ip, r2, #32
   144aa:	fa01 f302 	lsl.w	r3, r1, r2
   144ae:	4097      	lsls	r7, r2
   144b0:	fa20 f00c 	lsr.w	r0, r0, ip
   144b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   144b8:	fa21 fc0c 	lsr.w	ip, r1, ip
   144bc:	4318      	orrs	r0, r3
   144be:	fbbc f1fe 	udiv	r1, ip, lr
   144c2:	0c05      	lsrs	r5, r0, #16
   144c4:	fb0e cc11 	mls	ip, lr, r1, ip
   144c8:	fa1f f887 	uxth.w	r8, r7
   144cc:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   144d0:	fb01 f308 	mul.w	r3, r1, r8
   144d4:	42ab      	cmp	r3, r5
   144d6:	fa04 f402 	lsl.w	r4, r4, r2
   144da:	d909      	bls.n	144f0 <__udivmoddi4+0x19c>
   144dc:	197d      	adds	r5, r7, r5
   144de:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   144e2:	f080 808b 	bcs.w	145fc <__udivmoddi4+0x2a8>
   144e6:	42ab      	cmp	r3, r5
   144e8:	f240 8088 	bls.w	145fc <__udivmoddi4+0x2a8>
   144ec:	3902      	subs	r1, #2
   144ee:	443d      	add	r5, r7
   144f0:	1aeb      	subs	r3, r5, r3
   144f2:	b285      	uxth	r5, r0
   144f4:	fbb3 f0fe 	udiv	r0, r3, lr
   144f8:	fb0e 3310 	mls	r3, lr, r0, r3
   144fc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   14500:	fb00 f308 	mul.w	r3, r0, r8
   14504:	42ab      	cmp	r3, r5
   14506:	d907      	bls.n	14518 <__udivmoddi4+0x1c4>
   14508:	197d      	adds	r5, r7, r5
   1450a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   1450e:	d271      	bcs.n	145f4 <__udivmoddi4+0x2a0>
   14510:	42ab      	cmp	r3, r5
   14512:	d96f      	bls.n	145f4 <__udivmoddi4+0x2a0>
   14514:	3802      	subs	r0, #2
   14516:	443d      	add	r5, r7
   14518:	1aeb      	subs	r3, r5, r3
   1451a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1451e:	e778      	b.n	14412 <__udivmoddi4+0xbe>
   14520:	f1c1 0c20 	rsb	ip, r1, #32
   14524:	408b      	lsls	r3, r1
   14526:	fa22 f70c 	lsr.w	r7, r2, ip
   1452a:	431f      	orrs	r7, r3
   1452c:	fa20 f40c 	lsr.w	r4, r0, ip
   14530:	fa05 f301 	lsl.w	r3, r5, r1
   14534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   14538:	fa25 f50c 	lsr.w	r5, r5, ip
   1453c:	431c      	orrs	r4, r3
   1453e:	0c23      	lsrs	r3, r4, #16
   14540:	fbb5 f9fe 	udiv	r9, r5, lr
   14544:	fa1f f887 	uxth.w	r8, r7
   14548:	fb0e 5519 	mls	r5, lr, r9, r5
   1454c:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
   14550:	fb09 fa08 	mul.w	sl, r9, r8
   14554:	45aa      	cmp	sl, r5
   14556:	fa02 f201 	lsl.w	r2, r2, r1
   1455a:	fa00 f301 	lsl.w	r3, r0, r1
   1455e:	d908      	bls.n	14572 <__udivmoddi4+0x21e>
   14560:	197d      	adds	r5, r7, r5
   14562:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   14566:	d247      	bcs.n	145f8 <__udivmoddi4+0x2a4>
   14568:	45aa      	cmp	sl, r5
   1456a:	d945      	bls.n	145f8 <__udivmoddi4+0x2a4>
   1456c:	f1a9 0902 	sub.w	r9, r9, #2
   14570:	443d      	add	r5, r7
   14572:	eba5 050a 	sub.w	r5, r5, sl
   14576:	b2a4      	uxth	r4, r4
   14578:	fbb5 f0fe 	udiv	r0, r5, lr
   1457c:	fb0e 5510 	mls	r5, lr, r0, r5
   14580:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   14584:	fb00 f808 	mul.w	r8, r0, r8
   14588:	45a0      	cmp	r8, r4
   1458a:	d907      	bls.n	1459c <__udivmoddi4+0x248>
   1458c:	193c      	adds	r4, r7, r4
   1458e:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
   14592:	d22d      	bcs.n	145f0 <__udivmoddi4+0x29c>
   14594:	45a0      	cmp	r8, r4
   14596:	d92b      	bls.n	145f0 <__udivmoddi4+0x29c>
   14598:	3802      	subs	r0, #2
   1459a:	443c      	add	r4, r7
   1459c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   145a0:	eba4 0408 	sub.w	r4, r4, r8
   145a4:	fba0 8902 	umull	r8, r9, r0, r2
   145a8:	454c      	cmp	r4, r9
   145aa:	46c6      	mov	lr, r8
   145ac:	464d      	mov	r5, r9
   145ae:	d319      	bcc.n	145e4 <__udivmoddi4+0x290>
   145b0:	d016      	beq.n	145e0 <__udivmoddi4+0x28c>
   145b2:	b15e      	cbz	r6, 145cc <__udivmoddi4+0x278>
   145b4:	ebb3 020e 	subs.w	r2, r3, lr
   145b8:	eb64 0405 	sbc.w	r4, r4, r5
   145bc:	fa04 fc0c 	lsl.w	ip, r4, ip
   145c0:	40ca      	lsrs	r2, r1
   145c2:	ea4c 0202 	orr.w	r2, ip, r2
   145c6:	40cc      	lsrs	r4, r1
   145c8:	e9c6 2400 	strd	r2, r4, [r6]
   145cc:	2100      	movs	r1, #0
   145ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   145d2:	4631      	mov	r1, r6
   145d4:	4630      	mov	r0, r6
   145d6:	e70e      	b.n	143f6 <__udivmoddi4+0xa2>
   145d8:	46ac      	mov	ip, r5
   145da:	e6ed      	b.n	143b8 <__udivmoddi4+0x64>
   145dc:	4618      	mov	r0, r3
   145de:	e701      	b.n	143e4 <__udivmoddi4+0x90>
   145e0:	4543      	cmp	r3, r8
   145e2:	d2e6      	bcs.n	145b2 <__udivmoddi4+0x25e>
   145e4:	ebb8 0e02 	subs.w	lr, r8, r2
   145e8:	eb69 0507 	sbc.w	r5, r9, r7
   145ec:	3801      	subs	r0, #1
   145ee:	e7e0      	b.n	145b2 <__udivmoddi4+0x25e>
   145f0:	4628      	mov	r0, r5
   145f2:	e7d3      	b.n	1459c <__udivmoddi4+0x248>
   145f4:	4660      	mov	r0, ip
   145f6:	e78f      	b.n	14518 <__udivmoddi4+0x1c4>
   145f8:	4681      	mov	r9, r0
   145fa:	e7ba      	b.n	14572 <__udivmoddi4+0x21e>
   145fc:	4661      	mov	r1, ip
   145fe:	e777      	b.n	144f0 <__udivmoddi4+0x19c>
   14600:	4608      	mov	r0, r1
   14602:	e74b      	b.n	1449c <__udivmoddi4+0x148>
   14604:	f1ac 0c02 	sub.w	ip, ip, #2
   14608:	443d      	add	r5, r7
   1460a:	e715      	b.n	14438 <__udivmoddi4+0xe4>
   1460c:	3802      	subs	r0, #2
   1460e:	443c      	add	r4, r7
   14610:	e726      	b.n	14460 <__udivmoddi4+0x10c>
   14612:	bf00      	nop

00014614 <__aeabi_idiv0>:
   14614:	4770      	bx	lr
   14616:	bf00      	nop

00014618 <SystemCoreClockUpdate>:
    //
    // Calculate the system frequency based upon the current register settings.
    // This function can be used to retrieve the system core clock frequeny
    // after user changed register sittings.
    //
    SystemCoreClock = __SYS_OSC_CLK / (CLKGEN->CCTRL_b.CORESEL + 1);
   14618:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1461c:	699b      	ldr	r3, [r3, #24]
   1461e:	f003 0301 	and.w	r3, r3, #1
   14622:	3301      	adds	r3, #1
   14624:	4a02      	ldr	r2, [pc, #8]	; (14630 <SystemCoreClockUpdate+0x18>)
   14626:	fb92 f3f3 	sdiv	r3, r2, r3
   1462a:	4a02      	ldr	r2, [pc, #8]	; (14634 <SystemCoreClockUpdate+0x1c>)
   1462c:	6013      	str	r3, [r2, #0]
}
   1462e:	4770      	bx	lr
   14630:	02dc6c00 	.word	0x02dc6c00
   14634:	10000100 	.word	0x10000100

00014638 <SystemInit>:
//! @return None.
//
//*****************************************************************************
void
SystemInit(void)
{
   14638:	b508      	push	{r3, lr}
    //
    // Initialize the system
    // Do not use global variables because this function is called before
    // reaching pre-main. RW section maybe overwritten afterwards.
    //
    SystemCoreClock = __SYSTEM_CLOCK;
   1463a:	4b09      	ldr	r3, [pc, #36]	; (14660 <SystemInit+0x28>)
   1463c:	4a09      	ldr	r2, [pc, #36]	; (14664 <SystemInit+0x2c>)
   1463e:	601a      	str	r2, [r3, #0]

    CLKGEN->CLKKEY = 0x47;              // Enable write to CCTRL
   14640:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   14644:	2247      	movs	r2, #71	; 0x47
   14646:	615a      	str	r2, [r3, #20]
    CLKGEN->CCTRL_b.CORESEL = 0;        // Div by 1 for 48MHz
   14648:	699a      	ldr	r2, [r3, #24]
   1464a:	f36f 0200 	bfc	r2, #0, #1
   1464e:	619a      	str	r2, [r3, #24]
    CLKGEN->CLKKEY = 0;                 // Disable write to CCTRL
   14650:	2200      	movs	r2, #0
   14652:	615a      	str	r2, [r3, #20]

    SystemCoreClockUpdate();
   14654:	f7ff ffe0 	bl	14618 <SystemCoreClockUpdate>

    NVIC_Relocate();
   14658:	f000 f806 	bl	14668 <NVIC_Relocate>
}
   1465c:	bd08      	pop	{r3, pc}
   1465e:	bf00      	nop
   14660:	10000100 	.word	0x10000100
   14664:	02dc6c00 	.word	0x02dc6c00

00014668 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   14668:	4a09      	ldr	r2, [pc, #36]	; (14690 <NVIC_Relocate+0x28>)
   1466a:	4b0a      	ldr	r3, [pc, #40]	; (14694 <NVIC_Relocate+0x2c>)
   1466c:	429a      	cmp	r2, r3
   1466e:	d00a      	beq.n	14686 <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   14670:	2300      	movs	r3, #0
   14672:	2b29      	cmp	r3, #41	; 0x29
   14674:	dc07      	bgt.n	14686 <NVIC_Relocate+0x1e>
            new_location[i] = current_location[i];
   14676:	4a07      	ldr	r2, [pc, #28]	; (14694 <NVIC_Relocate+0x2c>)
   14678:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   1467c:	4a04      	ldr	r2, [pc, #16]	; (14690 <NVIC_Relocate+0x28>)
   1467e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   14682:	3301      	adds	r3, #1
   14684:	e7f5      	b.n	14672 <NVIC_Relocate+0xa>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   14686:	4a02      	ldr	r2, [pc, #8]	; (14690 <NVIC_Relocate+0x28>)
   14688:	4b03      	ldr	r3, [pc, #12]	; (14698 <NVIC_Relocate+0x30>)
   1468a:	609a      	str	r2, [r3, #8]
#endif
}
   1468c:	4770      	bx	lr
   1468e:	bf00      	nop
   14690:	10000000 	.word	0x10000000
   14694:	00014020 	.word	0x00014020
   14698:	e000ed00 	.word	0xe000ed00

0001469c <_sbrkInit>:
static char *brk;

void
_sbrkInit(char *base, char *limit)
{
    sbrk_base = base;
   1469c:	4b03      	ldr	r3, [pc, #12]	; (146ac <_sbrkInit+0x10>)
   1469e:	6018      	str	r0, [r3, #0]
    sbrk_limit = limit;
   146a0:	4b03      	ldr	r3, [pc, #12]	; (146b0 <_sbrkInit+0x14>)
   146a2:	6019      	str	r1, [r3, #0]
    brk = base;
   146a4:	4b03      	ldr	r3, [pc, #12]	; (146b4 <_sbrkInit+0x18>)
   146a6:	6018      	str	r0, [r3, #0]
}
   146a8:	4770      	bx	lr
   146aa:	bf00      	nop
   146ac:	100008b4 	.word	0x100008b4
   146b0:	100008b8 	.word	0x100008b8
   146b4:	100008b0 	.word	0x100008b0

000146b8 <_sbrk>:

void *
_sbrk(int incr)
{
   146b8:	4603      	mov	r3, r0
    char *prev_brk;
    char *new_brk = brk + incr;
   146ba:	4a0a      	ldr	r2, [pc, #40]	; (146e4 <_sbrk+0x2c>)
   146bc:	6810      	ldr	r0, [r2, #0]
   146be:	4403      	add	r3, r0

    if (new_brk < sbrk_base || new_brk > sbrk_limit) {
   146c0:	4a09      	ldr	r2, [pc, #36]	; (146e8 <_sbrk+0x30>)
   146c2:	6812      	ldr	r2, [r2, #0]
   146c4:	429a      	cmp	r2, r3
   146c6:	d806      	bhi.n	146d6 <_sbrk+0x1e>
   146c8:	4a08      	ldr	r2, [pc, #32]	; (146ec <_sbrk+0x34>)
   146ca:	6812      	ldr	r2, [r2, #0]
   146cc:	429a      	cmp	r2, r3
   146ce:	d305      	bcc.n	146dc <_sbrk+0x24>
        prev_brk = (char *)-1;
    } else {
        prev_brk = brk;
        brk = new_brk;
   146d0:	4a04      	ldr	r2, [pc, #16]	; (146e4 <_sbrk+0x2c>)
   146d2:	6013      	str	r3, [r2, #0]
   146d4:	4770      	bx	lr
        prev_brk = (char *)-1;
   146d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   146da:	4770      	bx	lr
   146dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return prev_brk;
}
   146e0:	4770      	bx	lr
   146e2:	bf00      	nop
   146e4:	100008b0 	.word	0x100008b0
   146e8:	100008b4 	.word	0x100008b4
   146ec:	100008b8 	.word	0x100008b8

000146f0 <hal_system_init>:
am_hal_mcuctrl_device_t adevinfo;

void
hal_system_init(void)
{
}
   146f0:	4770      	bx	lr
	...

000146f4 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   146f4:	4b02      	ldr	r3, [pc, #8]	; (14700 <hal_debugger_connected+0xc>)
   146f6:	6818      	ldr	r0, [r3, #0]
}
   146f8:	f000 0001 	and.w	r0, r0, #1
   146fc:	4770      	bx	lr
   146fe:	bf00      	nop
   14700:	e000edf0 	.word	0xe000edf0

00014704 <hal_system_reset>:
{
   14704:	b508      	push	{r3, lr}
        HAL_DEBUG_BREAK();
   14706:	f7ff fff5 	bl	146f4 <hal_debugger_connected>
   1470a:	b100      	cbz	r0, 1470e <hal_system_reset+0xa>
#endif

static inline void
hal_debug_break(void)
{
    __BKPT(1);
   1470c:	be01      	bkpt	0x0001
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1470e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14712:	4905      	ldr	r1, [pc, #20]	; (14728 <hal_system_reset+0x24>)
   14714:	68ca      	ldr	r2, [r1, #12]
   14716:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1471a:	4b04      	ldr	r3, [pc, #16]	; (1472c <hal_system_reset+0x28>)
   1471c:	4313      	orrs	r3, r2
   1471e:	60cb      	str	r3, [r1, #12]
   14720:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14724:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14726:	e7fd      	b.n	14724 <hal_system_reset+0x20>
   14728:	e000ed00 	.word	0xe000ed00
   1472c:	05fa0004 	.word	0x05fa0004

00014730 <_init>:
}

__attribute__((weak)) void
_init(void)
{
}
   14730:	4770      	bx	lr
	...

00014734 <__libc_init_array>:
extern void (*__init_array_start[])(void);
extern void (*__init_array_end[])(void);

void
__libc_init_array(void)
{
   14734:	b538      	push	{r3, r4, r5, lr}
    size_t count;
    size_t i;

    count = __preinit_array_end - __preinit_array_start;
   14736:	4d0e      	ldr	r5, [pc, #56]	; (14770 <__libc_init_array+0x3c>)
   14738:	4b0e      	ldr	r3, [pc, #56]	; (14774 <__libc_init_array+0x40>)
   1473a:	1aed      	subs	r5, r5, r3
   1473c:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
   1473e:	2400      	movs	r4, #0
   14740:	42ac      	cmp	r4, r5
   14742:	d205      	bcs.n	14750 <__libc_init_array+0x1c>
        __preinit_array_start[i]();
   14744:	4b0b      	ldr	r3, [pc, #44]	; (14774 <__libc_init_array+0x40>)
   14746:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1474a:	4798      	blx	r3
    for (i = 0; i < count; i++)
   1474c:	3401      	adds	r4, #1
   1474e:	e7f7      	b.n	14740 <__libc_init_array+0xc>

    _init();
   14750:	f7ff ffee 	bl	14730 <_init>

    count = __init_array_end - __init_array_start;
   14754:	4d08      	ldr	r5, [pc, #32]	; (14778 <__libc_init_array+0x44>)
   14756:	4b09      	ldr	r3, [pc, #36]	; (1477c <__libc_init_array+0x48>)
   14758:	1aed      	subs	r5, r5, r3
   1475a:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
   1475c:	2400      	movs	r4, #0
   1475e:	e004      	b.n	1476a <__libc_init_array+0x36>
        __init_array_start[i]();
   14760:	4b06      	ldr	r3, [pc, #24]	; (1477c <__libc_init_array+0x48>)
   14762:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   14766:	4798      	blx	r3
    for (i = 0; i < count; i++)
   14768:	3401      	adds	r4, #1
   1476a:	42ac      	cmp	r4, r5
   1476c:	d3f8      	bcc.n	14760 <__libc_init_array+0x2c>
}
   1476e:	bd38      	pop	{r3, r4, r5, pc}
   14770:	100008b0 	.word	0x100008b0
   14774:	100008b0 	.word	0x100008b0
   14778:	100008b0 	.word	0x100008b0
   1477c:	100008b0 	.word	0x100008b0

00014780 <_start>:
{
   14780:	b508      	push	{r3, lr}
        __libc_init_array();
   14782:	f7ff ffd7 	bl	14734 <__libc_init_array>
    os_init(main);
   14786:	4803      	ldr	r0, [pc, #12]	; (14794 <_start+0x14>)
   14788:	f004 fc42 	bl	19010 <os_init>
    os_start();
   1478c:	f004 fcac 	bl	190e8 <os_start>
}
   14790:	bd08      	pop	{r3, pc}
   14792:	bf00      	nop
   14794:	00015835 	.word	0x00015835

00014798 <btshell_conn_find_idx>:
    }
}

static int
btshell_conn_find_idx(uint16_t handle)
{
   14798:	4601      	mov	r1, r0
    int i;

    for (i = 0; i < btshell_num_conns; i++) {
   1479a:	2000      	movs	r0, #0
   1479c:	4b07      	ldr	r3, [pc, #28]	; (147bc <btshell_conn_find_idx+0x24>)
   1479e:	681b      	ldr	r3, [r3, #0]
   147a0:	4283      	cmp	r3, r0
   147a2:	dd08      	ble.n	147b6 <btshell_conn_find_idx+0x1e>
        if (btshell_conns[i].handle == handle) {
   147a4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   147a8:	4a05      	ldr	r2, [pc, #20]	; (147c0 <btshell_conn_find_idx+0x28>)
   147aa:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   147ae:	428b      	cmp	r3, r1
   147b0:	d003      	beq.n	147ba <btshell_conn_find_idx+0x22>
    for (i = 0; i < btshell_num_conns; i++) {
   147b2:	3001      	adds	r0, #1
   147b4:	e7f2      	b.n	1479c <btshell_conn_find_idx+0x4>
            return i;
        }
    }

    return -1;
   147b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   147ba:	4770      	bx	lr
   147bc:	10001914 	.word	0x10001914
   147c0:	10001de4 	.word	0x10001de4

000147c4 <btshell_conn_find>:

static struct btshell_conn *
btshell_conn_find(uint16_t handle)
{
   147c4:	b508      	push	{r3, lr}
    int idx;

    idx = btshell_conn_find_idx(handle);
   147c6:	f7ff ffe7 	bl	14798 <btshell_conn_find_idx>
    if (idx == -1) {
   147ca:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   147ce:	d005      	beq.n	147dc <btshell_conn_find+0x18>
        return NULL;
    } else {
        return btshell_conns + idx;
   147d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   147d4:	4b02      	ldr	r3, [pc, #8]	; (147e0 <btshell_conn_find+0x1c>)
   147d6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    }
}
   147da:	bd08      	pop	{r3, pc}
        return NULL;
   147dc:	2000      	movs	r0, #0
   147de:	e7fc      	b.n	147da <btshell_conn_find+0x16>
   147e0:	10001de4 	.word	0x10001de4

000147e4 <btshell_svc_find_prev>:
{
    struct btshell_svc *prev;
    struct btshell_svc *svc;

    prev = NULL;
    SLIST_FOREACH(svc, &conn->svcs, next) {
   147e4:	6843      	ldr	r3, [r0, #4]
    prev = NULL;
   147e6:	2000      	movs	r0, #0
    SLIST_FOREACH(svc, &conn->svcs, next) {
   147e8:	b12b      	cbz	r3, 147f6 <btshell_svc_find_prev+0x12>
        if (svc->svc.start_handle >= svc_start_handle) {
   147ea:	889a      	ldrh	r2, [r3, #4]
   147ec:	428a      	cmp	r2, r1
   147ee:	d202      	bcs.n	147f6 <btshell_svc_find_prev+0x12>
            break;
        }

        prev = svc;
   147f0:	4618      	mov	r0, r3
    SLIST_FOREACH(svc, &conn->svcs, next) {
   147f2:	681b      	ldr	r3, [r3, #0]
   147f4:	e7f8      	b.n	147e8 <btshell_svc_find_prev+0x4>
    }

    return prev;
}
   147f6:	4770      	bx	lr

000147f8 <btshell_svc_find>:

static struct btshell_svc *
btshell_svc_find(struct btshell_conn *conn, uint16_t svc_start_handle,
                 struct btshell_svc **out_prev)
{
   147f8:	b570      	push	{r4, r5, r6, lr}
   147fa:	4606      	mov	r6, r0
   147fc:	460d      	mov	r5, r1
   147fe:	4614      	mov	r4, r2
    struct btshell_svc *prev;
    struct btshell_svc *svc;

    prev = btshell_svc_find_prev(conn, svc_start_handle);
   14800:	f7ff fff0 	bl	147e4 <btshell_svc_find_prev>
    if (prev == NULL) {
   14804:	4603      	mov	r3, r0
   14806:	b138      	cbz	r0, 14818 <btshell_svc_find+0x20>
        svc = SLIST_FIRST(&conn->svcs);
    } else {
        svc = SLIST_NEXT(prev, next);
   14808:	6800      	ldr	r0, [r0, #0]
    }

    if (svc != NULL && svc->svc.start_handle != svc_start_handle) {
   1480a:	b110      	cbz	r0, 14812 <btshell_svc_find+0x1a>
   1480c:	8882      	ldrh	r2, [r0, #4]
   1480e:	42aa      	cmp	r2, r5
   14810:	d104      	bne.n	1481c <btshell_svc_find+0x24>
        svc = NULL;
    }

    if (out_prev != NULL) {
   14812:	b104      	cbz	r4, 14816 <btshell_svc_find+0x1e>
        *out_prev = prev;
   14814:	6023      	str	r3, [r4, #0]
    }
    return svc;
}
   14816:	bd70      	pop	{r4, r5, r6, pc}
        svc = SLIST_FIRST(&conn->svcs);
   14818:	6870      	ldr	r0, [r6, #4]
   1481a:	e7f6      	b.n	1480a <btshell_svc_find+0x12>
        svc = NULL;
   1481c:	2000      	movs	r0, #0
   1481e:	e7f8      	b.n	14812 <btshell_svc_find+0x1a>

00014820 <btshell_svc_find_range>:
static struct btshell_svc *
btshell_svc_find_range(struct btshell_conn *conn, uint16_t attr_handle)
{
    struct btshell_svc *svc;

    SLIST_FOREACH(svc, &conn->svcs, next) {
   14820:	6840      	ldr	r0, [r0, #4]
   14822:	e000      	b.n	14826 <btshell_svc_find_range+0x6>
   14824:	6800      	ldr	r0, [r0, #0]
   14826:	b128      	cbz	r0, 14834 <btshell_svc_find_range+0x14>
        if (svc->svc.start_handle <= attr_handle &&
   14828:	8883      	ldrh	r3, [r0, #4]
   1482a:	428b      	cmp	r3, r1
   1482c:	d8fa      	bhi.n	14824 <btshell_svc_find_range+0x4>
            svc->svc.end_handle >= attr_handle) {
   1482e:	88c3      	ldrh	r3, [r0, #6]
        if (svc->svc.start_handle <= attr_handle &&
   14830:	428b      	cmp	r3, r1
   14832:	d3f7      	bcc.n	14824 <btshell_svc_find_range+0x4>
            return svc;
        }
    }

    return NULL;
}
   14834:	4770      	bx	lr

00014836 <btshell_chr_find_prev>:
{
    struct btshell_chr *prev;
    struct btshell_chr *chr;

    prev = NULL;
    SLIST_FOREACH(chr, &svc->chrs, next) {
   14836:	69c3      	ldr	r3, [r0, #28]
    prev = NULL;
   14838:	2000      	movs	r0, #0
    SLIST_FOREACH(chr, &svc->chrs, next) {
   1483a:	b12b      	cbz	r3, 14848 <btshell_chr_find_prev+0x12>
        if (chr->chr.val_handle >= chr_val_handle) {
   1483c:	88da      	ldrh	r2, [r3, #6]
   1483e:	428a      	cmp	r2, r1
   14840:	d202      	bcs.n	14848 <btshell_chr_find_prev+0x12>
            break;
        }

        prev = chr;
   14842:	4618      	mov	r0, r3
    SLIST_FOREACH(chr, &svc->chrs, next) {
   14844:	681b      	ldr	r3, [r3, #0]
   14846:	e7f8      	b.n	1483a <btshell_chr_find_prev+0x4>
    }

    return prev;
}
   14848:	4770      	bx	lr

0001484a <btshell_chr_find>:

static struct btshell_chr *
btshell_chr_find(const struct btshell_svc *svc, uint16_t chr_val_handle,
                 struct btshell_chr **out_prev)
{
   1484a:	b570      	push	{r4, r5, r6, lr}
   1484c:	4606      	mov	r6, r0
   1484e:	460d      	mov	r5, r1
   14850:	4614      	mov	r4, r2
    struct btshell_chr *prev;
    struct btshell_chr *chr;

    prev = btshell_chr_find_prev(svc, chr_val_handle);
   14852:	f7ff fff0 	bl	14836 <btshell_chr_find_prev>
    if (prev == NULL) {
   14856:	4603      	mov	r3, r0
   14858:	b138      	cbz	r0, 1486a <btshell_chr_find+0x20>
        chr = SLIST_FIRST(&svc->chrs);
    } else {
        chr = SLIST_NEXT(prev, next);
   1485a:	6800      	ldr	r0, [r0, #0]
    }

    if (chr != NULL && chr->chr.val_handle != chr_val_handle) {
   1485c:	b110      	cbz	r0, 14864 <btshell_chr_find+0x1a>
   1485e:	88c2      	ldrh	r2, [r0, #6]
   14860:	42aa      	cmp	r2, r5
   14862:	d104      	bne.n	1486e <btshell_chr_find+0x24>
        chr = NULL;
    }

    if (out_prev != NULL) {
   14864:	b104      	cbz	r4, 14868 <btshell_chr_find+0x1e>
        *out_prev = prev;
   14866:	6023      	str	r3, [r4, #0]
    }
    return chr;
}
   14868:	bd70      	pop	{r4, r5, r6, pc}
        chr = SLIST_FIRST(&svc->chrs);
   1486a:	69f0      	ldr	r0, [r6, #28]
   1486c:	e7f6      	b.n	1485c <btshell_chr_find+0x12>
        chr = NULL;
   1486e:	2000      	movs	r0, #0
   14870:	e7f8      	b.n	14864 <btshell_chr_find+0x1a>

00014872 <btshell_dsc_find_prev>:
{
    struct btshell_dsc *prev;
    struct btshell_dsc *dsc;

    prev = NULL;
    SLIST_FOREACH(dsc, &chr->dscs, next) {
   14872:	6a03      	ldr	r3, [r0, #32]
    prev = NULL;
   14874:	2000      	movs	r0, #0
    SLIST_FOREACH(dsc, &chr->dscs, next) {
   14876:	b12b      	cbz	r3, 14884 <btshell_dsc_find_prev+0x12>
        if (dsc->dsc.handle >= dsc_handle) {
   14878:	889a      	ldrh	r2, [r3, #4]
   1487a:	428a      	cmp	r2, r1
   1487c:	d202      	bcs.n	14884 <btshell_dsc_find_prev+0x12>
            break;
        }

        prev = dsc;
   1487e:	4618      	mov	r0, r3
    SLIST_FOREACH(dsc, &chr->dscs, next) {
   14880:	681b      	ldr	r3, [r3, #0]
   14882:	e7f8      	b.n	14876 <btshell_dsc_find_prev+0x4>
    }

    return prev;
}
   14884:	4770      	bx	lr

00014886 <btshell_dsc_find>:

static struct btshell_dsc *
btshell_dsc_find(const struct btshell_chr *chr, uint16_t dsc_handle,
                 struct btshell_dsc **out_prev)
{
   14886:	b570      	push	{r4, r5, r6, lr}
   14888:	4606      	mov	r6, r0
   1488a:	460d      	mov	r5, r1
   1488c:	4614      	mov	r4, r2
    struct btshell_dsc *prev;
    struct btshell_dsc *dsc;

    prev = btshell_dsc_find_prev(chr, dsc_handle);
   1488e:	f7ff fff0 	bl	14872 <btshell_dsc_find_prev>
    if (prev == NULL) {
   14892:	4603      	mov	r3, r0
   14894:	b138      	cbz	r0, 148a6 <btshell_dsc_find+0x20>
        dsc = SLIST_FIRST(&chr->dscs);
    } else {
        dsc = SLIST_NEXT(prev, next);
   14896:	6800      	ldr	r0, [r0, #0]
    }

    if (dsc != NULL && dsc->dsc.handle != dsc_handle) {
   14898:	b110      	cbz	r0, 148a0 <btshell_dsc_find+0x1a>
   1489a:	8882      	ldrh	r2, [r0, #4]
   1489c:	42aa      	cmp	r2, r5
   1489e:	d104      	bne.n	148aa <btshell_dsc_find+0x24>
        dsc = NULL;
    }

    if (out_prev != NULL) {
   148a0:	b104      	cbz	r4, 148a4 <btshell_dsc_find+0x1e>
        *out_prev = prev;
   148a2:	6023      	str	r3, [r4, #0]
    }
    return dsc;
}
   148a4:	bd70      	pop	{r4, r5, r6, pc}
        dsc = SLIST_FIRST(&chr->dscs);
   148a6:	6a30      	ldr	r0, [r6, #32]
   148a8:	e7f6      	b.n	14898 <btshell_dsc_find+0x12>
        dsc = NULL;
   148aa:	2000      	movs	r0, #0
   148ac:	e7f8      	b.n	148a0 <btshell_dsc_find+0x1a>
	...

000148b0 <btshell_print_error>:
{
   148b0:	b510      	push	{r4, lr}
   148b2:	b082      	sub	sp, #8
   148b4:	460c      	mov	r4, r1
    if (msg == NULL) {
   148b6:	4601      	mov	r1, r0
   148b8:	b140      	cbz	r0, 148cc <btshell_print_error+0x1c>
                   msg, conn_handle, error->status, error->att_handle);
   148ba:	8853      	ldrh	r3, [r2, #2]
    console_printf("%s: conn_handle=%d status=%d att_handle=%d\n",
   148bc:	9300      	str	r3, [sp, #0]
   148be:	8813      	ldrh	r3, [r2, #0]
   148c0:	4622      	mov	r2, r4
   148c2:	4803      	ldr	r0, [pc, #12]	; (148d0 <btshell_print_error+0x20>)
   148c4:	f007 fc38 	bl	1c138 <console_printf>
}
   148c8:	b002      	add	sp, #8
   148ca:	bd10      	pop	{r4, pc}
        msg = "ERROR";
   148cc:	4901      	ldr	r1, [pc, #4]	; (148d4 <btshell_print_error+0x24>)
   148ce:	e7f4      	b.n	148ba <btshell_print_error+0xa>
   148d0:	000343a8 	.word	0x000343a8
   148d4:	000343a0 	.word	0x000343a0

000148d8 <btshell_on_mtu>:
}

static int
btshell_on_mtu(uint16_t conn_handle, const struct ble_gatt_error *error,
               uint16_t mtu, void *arg)
{
   148d8:	b508      	push	{r3, lr}
    switch (error->status) {
   148da:	880b      	ldrh	r3, [r1, #0]
   148dc:	b92b      	cbnz	r3, 148ea <btshell_on_mtu+0x12>
    case 0:
        console_printf("mtu exchange complete: conn_handle=%d mtu=%d\n",
   148de:	4601      	mov	r1, r0
   148e0:	4805      	ldr	r0, [pc, #20]	; (148f8 <btshell_on_mtu+0x20>)
   148e2:	f007 fc29 	bl	1c138 <console_printf>
        btshell_print_error(NULL, conn_handle, error);
        break;
    }

    return 0;
}
   148e6:	2000      	movs	r0, #0
   148e8:	bd08      	pop	{r3, pc}
        btshell_print_error(NULL, conn_handle, error);
   148ea:	460a      	mov	r2, r1
   148ec:	4601      	mov	r1, r0
   148ee:	2000      	movs	r0, #0
   148f0:	f7ff ffde 	bl	148b0 <btshell_print_error>
        break;
   148f4:	e7f7      	b.n	148e6 <btshell_on_mtu+0xe>
   148f6:	bf00      	nop
   148f8:	000343d4 	.word	0x000343d4

000148fc <btshell_full_disc_complete>:

static void
btshell_full_disc_complete(int rc)
{
   148fc:	b508      	push	{r3, lr}
   148fe:	4601      	mov	r1, r0
    console_printf("full discovery complete; rc=%d\n", rc);
   14900:	4803      	ldr	r0, [pc, #12]	; (14910 <btshell_full_disc_complete+0x14>)
   14902:	f007 fc19 	bl	1c138 <console_printf>
    btshell_full_disc_prev_chr_val = 0;
   14906:	4b03      	ldr	r3, [pc, #12]	; (14914 <btshell_full_disc_complete+0x18>)
   14908:	2200      	movs	r2, #0
   1490a:	601a      	str	r2, [r3, #0]
}
   1490c:	bd08      	pop	{r3, pc}
   1490e:	bf00      	nop
   14910:	00034404 	.word	0x00034404
   14914:	10001910 	.word	0x10001910

00014918 <btshell_on_write>:
}

static int
btshell_on_write(uint16_t conn_handle, const struct ble_gatt_error *error,
                 struct ble_gatt_attr *attr, void *arg)
{
   14918:	b508      	push	{r3, lr}
    switch (error->status) {
   1491a:	880b      	ldrh	r3, [r1, #0]
   1491c:	b933      	cbnz	r3, 1492c <btshell_on_write+0x14>
    case 0:
        console_printf("characteristic write complete; conn_handle=%d "
   1491e:	8812      	ldrh	r2, [r2, #0]
   14920:	4601      	mov	r1, r0
   14922:	4805      	ldr	r0, [pc, #20]	; (14938 <btshell_on_write+0x20>)
   14924:	f007 fc08 	bl	1c138 <console_printf>
        btshell_print_error(NULL, conn_handle, error);
        break;
    }

    return 0;
}
   14928:	2000      	movs	r0, #0
   1492a:	bd08      	pop	{r3, pc}
        btshell_print_error(NULL, conn_handle, error);
   1492c:	460a      	mov	r2, r1
   1492e:	4601      	mov	r1, r0
   14930:	2000      	movs	r0, #0
   14932:	f7ff ffbd 	bl	148b0 <btshell_print_error>
        break;
   14936:	e7f7      	b.n	14928 <btshell_on_write+0x10>
   14938:	00034424 	.word	0x00034424

0001493c <btshell_on_reset>:
    return 0;
}

static void
btshell_on_reset(int reason)
{
   1493c:	b508      	push	{r3, lr}
   1493e:	4601      	mov	r1, r0
    console_printf("Error: Resetting state; reason=%d\n", reason);
   14940:	4801      	ldr	r0, [pc, #4]	; (14948 <btshell_on_reset+0xc>)
   14942:	f007 fbf9 	bl	1c138 <console_printf>
}
   14946:	bd08      	pop	{r3, pc}
   14948:	00034464 	.word	0x00034464

0001494c <btshell_conn_add>:
{
   1494c:	b538      	push	{r3, r4, r5, lr}
    assert(btshell_num_conns < MYNEWT_VAL(BLE_MAX_CONNECTIONS));
   1494e:	4b0f      	ldr	r3, [pc, #60]	; (1498c <btshell_conn_add+0x40>)
   14950:	681b      	ldr	r3, [r3, #0]
   14952:	2b00      	cmp	r3, #0
   14954:	dc0f      	bgt.n	14976 <btshell_conn_add+0x2a>
   14956:	4602      	mov	r2, r0
    conn = btshell_conns + btshell_num_conns;
   14958:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1495c:	490c      	ldr	r1, [pc, #48]	; (14990 <btshell_conn_add+0x44>)
   1495e:	eb01 0084 	add.w	r0, r1, r4, lsl #2
    btshell_num_conns++;
   14962:	3301      	adds	r3, #1
   14964:	4d09      	ldr	r5, [pc, #36]	; (1498c <btshell_conn_add+0x40>)
   14966:	602b      	str	r3, [r5, #0]
    conn->handle = desc->conn_handle;
   14968:	8c13      	ldrh	r3, [r2, #32]
   1496a:	f821 3024 	strh.w	r3, [r1, r4, lsl #2]
    SLIST_INIT(&conn->svcs);
   1496e:	2300      	movs	r3, #0
   14970:	6043      	str	r3, [r0, #4]
    SLIST_INIT(&conn->coc_list);
   14972:	6083      	str	r3, [r0, #8]
}
   14974:	bd38      	pop	{r3, r4, r5, pc}
    assert(btshell_num_conns < MYNEWT_VAL(BLE_MAX_CONNECTIONS));
   14976:	f7ff febd 	bl	146f4 <hal_debugger_connected>
   1497a:	b100      	cbz	r0, 1497e <btshell_conn_add+0x32>
   1497c:	be01      	bkpt	0x0001
   1497e:	2300      	movs	r3, #0
   14980:	461a      	mov	r2, r3
   14982:	4619      	mov	r1, r3
   14984:	4618      	mov	r0, r3
   14986:	f004 f9d3 	bl	18d30 <__assert_func>
   1498a:	bf00      	nop
   1498c:	10001914 	.word	0x10001914
   14990:	10001de4 	.word	0x10001de4

00014994 <btshell_on_read>:
{
   14994:	b510      	push	{r4, lr}
    switch (error->status) {
   14996:	880b      	ldrh	r3, [r1, #0]
   14998:	b13b      	cbz	r3, 149aa <btshell_on_read+0x16>
   1499a:	2b0e      	cmp	r3, #14
   1499c:	d015      	beq.n	149ca <btshell_on_read+0x36>
        btshell_print_error(NULL, conn_handle, error);
   1499e:	460a      	mov	r2, r1
   149a0:	4601      	mov	r1, r0
   149a2:	2000      	movs	r0, #0
   149a4:	f7ff ff84 	bl	148b0 <btshell_print_error>
        break;
   149a8:	e00d      	b.n	149c6 <btshell_on_read+0x32>
   149aa:	4614      	mov	r4, r2
                       attr->handle, OS_MBUF_PKTLEN(attr->om));
   149ac:	6853      	ldr	r3, [r2, #4]
        console_printf("characteristic read; conn_handle=%d "
   149ae:	8a1b      	ldrh	r3, [r3, #16]
   149b0:	8812      	ldrh	r2, [r2, #0]
   149b2:	4601      	mov	r1, r0
   149b4:	4807      	ldr	r0, [pc, #28]	; (149d4 <btshell_on_read+0x40>)
   149b6:	f007 fbbf 	bl	1c138 <console_printf>
        print_mbuf(attr->om);
   149ba:	6860      	ldr	r0, [r4, #4]
   149bc:	f000 ffe8 	bl	15990 <print_mbuf>
        console_printf("\n");
   149c0:	4805      	ldr	r0, [pc, #20]	; (149d8 <btshell_on_read+0x44>)
   149c2:	f007 fbb9 	bl	1c138 <console_printf>
}
   149c6:	2000      	movs	r0, #0
   149c8:	bd10      	pop	{r4, pc}
        console_printf("characteristic read complete\n");
   149ca:	4804      	ldr	r0, [pc, #16]	; (149dc <btshell_on_read+0x48>)
   149cc:	f007 fbb4 	bl	1c138 <console_printf>
        break;
   149d0:	e7f9      	b.n	149c6 <btshell_on_read+0x32>
   149d2:	bf00      	nop
   149d4:	00034488 	.word	0x00034488
   149d8:	00034744 	.word	0x00034744
   149dc:	000344cc 	.word	0x000344cc

000149e0 <btshell_on_write_reliable>:
{
   149e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   149e2:	461f      	mov	r7, r3
    switch (error->status) {
   149e4:	880b      	ldrh	r3, [r1, #0]
   149e6:	b9d3      	cbnz	r3, 14a1e <btshell_on_write_reliable+0x3e>
   149e8:	4616      	mov	r6, r2
        console_printf("characteristic write reliable complete; "
   149ea:	4601      	mov	r1, r0
   149ec:	480f      	ldr	r0, [pc, #60]	; (14a2c <btshell_on_write_reliable+0x4c>)
   149ee:	f007 fba3 	bl	1c138 <console_printf>
        for (i = 0; i < num_attrs; i++) {
   149f2:	2400      	movs	r4, #0
   149f4:	42a7      	cmp	r7, r4
   149f6:	dd0d      	ble.n	14a14 <btshell_on_write_reliable+0x34>
            console_printf(" attr_handle=%d len=%d value=", attrs[i].handle,
   149f8:	eb06 05c4 	add.w	r5, r6, r4, lsl #3
                           OS_MBUF_PKTLEN(attrs[i].om));
   149fc:	686a      	ldr	r2, [r5, #4]
            console_printf(" attr_handle=%d len=%d value=", attrs[i].handle,
   149fe:	8a12      	ldrh	r2, [r2, #16]
   14a00:	f836 1034 	ldrh.w	r1, [r6, r4, lsl #3]
   14a04:	480a      	ldr	r0, [pc, #40]	; (14a30 <btshell_on_write_reliable+0x50>)
   14a06:	f007 fb97 	bl	1c138 <console_printf>
            print_mbuf(attrs[i].om);
   14a0a:	6868      	ldr	r0, [r5, #4]
   14a0c:	f000 ffc0 	bl	15990 <print_mbuf>
        for (i = 0; i < num_attrs; i++) {
   14a10:	3401      	adds	r4, #1
   14a12:	e7ef      	b.n	149f4 <btshell_on_write_reliable+0x14>
        console_printf("\n");
   14a14:	4807      	ldr	r0, [pc, #28]	; (14a34 <btshell_on_write_reliable+0x54>)
   14a16:	f007 fb8f 	bl	1c138 <console_printf>
}
   14a1a:	2000      	movs	r0, #0
   14a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        btshell_print_error(NULL, conn_handle, error);
   14a1e:	460a      	mov	r2, r1
   14a20:	4601      	mov	r1, r0
   14a22:	2000      	movs	r0, #0
   14a24:	f7ff ff44 	bl	148b0 <btshell_print_error>
        break;
   14a28:	e7f7      	b.n	14a1a <btshell_on_write_reliable+0x3a>
   14a2a:	bf00      	nop
   14a2c:	000344ec 	.word	0x000344ec
   14a30:	00034524 	.word	0x00034524
   14a34:	00034744 	.word	0x00034744

00014a38 <btshell_chr_delete>:
{
   14a38:	b510      	push	{r4, lr}
   14a3a:	4604      	mov	r4, r0
    while ((dsc = SLIST_FIRST(&chr->dscs)) != NULL) {
   14a3c:	6a21      	ldr	r1, [r4, #32]
   14a3e:	b129      	cbz	r1, 14a4c <btshell_chr_delete+0x14>
        SLIST_REMOVE_HEAD(&chr->dscs, next);
   14a40:	680b      	ldr	r3, [r1, #0]
   14a42:	6223      	str	r3, [r4, #32]
        os_memblock_put(&btshell_dsc_pool, dsc);
   14a44:	4804      	ldr	r0, [pc, #16]	; (14a58 <btshell_chr_delete+0x20>)
   14a46:	f005 fa29 	bl	19e9c <os_memblock_put>
   14a4a:	e7f7      	b.n	14a3c <btshell_chr_delete+0x4>
    os_memblock_put(&btshell_chr_pool, chr);
   14a4c:	4621      	mov	r1, r4
   14a4e:	4803      	ldr	r0, [pc, #12]	; (14a5c <btshell_chr_delete+0x24>)
   14a50:	f005 fa24 	bl	19e9c <os_memblock_put>
}
   14a54:	bd10      	pop	{r4, pc}
   14a56:	bf00      	nop
   14a58:	100018f4 	.word	0x100018f4
   14a5c:	100011d8 	.word	0x100011d8

00014a60 <btshell_svc_delete>:
{
   14a60:	b510      	push	{r4, lr}
   14a62:	4604      	mov	r4, r0
    while ((chr = SLIST_FIRST(&svc->chrs)) != NULL) {
   14a64:	69e0      	ldr	r0, [r4, #28]
   14a66:	b120      	cbz	r0, 14a72 <btshell_svc_delete+0x12>
        SLIST_REMOVE_HEAD(&svc->chrs, next);
   14a68:	6803      	ldr	r3, [r0, #0]
   14a6a:	61e3      	str	r3, [r4, #28]
        btshell_chr_delete(chr);
   14a6c:	f7ff ffe4 	bl	14a38 <btshell_chr_delete>
   14a70:	e7f8      	b.n	14a64 <btshell_svc_delete+0x4>
    os_memblock_put(&btshell_svc_pool, svc);
   14a72:	4621      	mov	r1, r4
   14a74:	4801      	ldr	r0, [pc, #4]	; (14a7c <btshell_svc_delete+0x1c>)
   14a76:	f005 fa11 	bl	19e9c <os_memblock_put>
}
   14a7a:	bd10      	pop	{r4, pc}
   14a7c:	10001d98 	.word	0x10001d98

00014a80 <btshell_conn_delete_idx>:
{
   14a80:	b510      	push	{r4, lr}
    assert(idx >= 0 && idx < btshell_num_conns);
   14a82:	1e04      	subs	r4, r0, #0
   14a84:	db09      	blt.n	14a9a <btshell_conn_delete_idx+0x1a>
   14a86:	4b10      	ldr	r3, [pc, #64]	; (14ac8 <btshell_conn_delete_idx+0x48>)
   14a88:	681b      	ldr	r3, [r3, #0]
   14a8a:	42a3      	cmp	r3, r4
   14a8c:	dd05      	ble.n	14a9a <btshell_conn_delete_idx+0x1a>
    conn = btshell_conns + idx;
   14a8e:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   14a92:	4c0e      	ldr	r4, [pc, #56]	; (14acc <btshell_conn_delete_idx+0x4c>)
   14a94:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    while ((svc = SLIST_FIRST(&conn->svcs)) != NULL) {
   14a98:	e00d      	b.n	14ab6 <btshell_conn_delete_idx+0x36>
    assert(idx >= 0 && idx < btshell_num_conns);
   14a9a:	f7ff fe2b 	bl	146f4 <hal_debugger_connected>
   14a9e:	b100      	cbz	r0, 14aa2 <btshell_conn_delete_idx+0x22>
   14aa0:	be01      	bkpt	0x0001
   14aa2:	2300      	movs	r3, #0
   14aa4:	461a      	mov	r2, r3
   14aa6:	4619      	mov	r1, r3
   14aa8:	4618      	mov	r0, r3
   14aaa:	f004 f941 	bl	18d30 <__assert_func>
        SLIST_REMOVE_HEAD(&conn->svcs, next);
   14aae:	6803      	ldr	r3, [r0, #0]
   14ab0:	6063      	str	r3, [r4, #4]
        btshell_svc_delete(svc);
   14ab2:	f7ff ffd5 	bl	14a60 <btshell_svc_delete>
    while ((svc = SLIST_FIRST(&conn->svcs)) != NULL) {
   14ab6:	6860      	ldr	r0, [r4, #4]
   14ab8:	2800      	cmp	r0, #0
   14aba:	d1f8      	bne.n	14aae <btshell_conn_delete_idx+0x2e>
    btshell_num_conns--;
   14abc:	4a02      	ldr	r2, [pc, #8]	; (14ac8 <btshell_conn_delete_idx+0x48>)
   14abe:	6813      	ldr	r3, [r2, #0]
   14ac0:	3b01      	subs	r3, #1
   14ac2:	6013      	str	r3, [r2, #0]
}
   14ac4:	bd10      	pop	{r4, pc}
   14ac6:	bf00      	nop
   14ac8:	10001914 	.word	0x10001914
   14acc:	10001de4 	.word	0x10001de4

00014ad0 <btshell_restart_adv>:
    if (event->type != BLE_GAP_EVENT_DISCONNECT) {
   14ad0:	7803      	ldrb	r3, [r0, #0]
   14ad2:	2b01      	cmp	r3, #1
   14ad4:	d115      	bne.n	14b02 <btshell_restart_adv+0x32>
    if (!adv_params.restart) {
   14ad6:	4b0c      	ldr	r3, [pc, #48]	; (14b08 <btshell_restart_adv+0x38>)
   14ad8:	781b      	ldrb	r3, [r3, #0]
   14ada:	b90b      	cbnz	r3, 14ae0 <btshell_restart_adv+0x10>
        return 0;
   14adc:	2000      	movs	r0, #0
}
   14ade:	4770      	bx	lr
{
   14ae0:	b500      	push	{lr}
   14ae2:	b083      	sub	sp, #12
    rc = ble_gap_adv_start(adv_params.own_addr_type, &adv_params.direct_addr,
   14ae4:	4808      	ldr	r0, [pc, #32]	; (14b08 <btshell_restart_adv+0x38>)
   14ae6:	2300      	movs	r3, #0
   14ae8:	9301      	str	r3, [sp, #4]
   14aea:	4b08      	ldr	r3, [pc, #32]	; (14b0c <btshell_restart_adv+0x3c>)
   14aec:	9300      	str	r3, [sp, #0]
   14aee:	f100 0310 	add.w	r3, r0, #16
   14af2:	68c2      	ldr	r2, [r0, #12]
   14af4:	1c81      	adds	r1, r0, #2
   14af6:	7840      	ldrb	r0, [r0, #1]
   14af8:	f014 ff6e 	bl	299d8 <ble_gap_adv_start>
}
   14afc:	b003      	add	sp, #12
   14afe:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
   14b02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14b06:	4770      	bx	lr
   14b08:	100008bc 	.word	0x100008bc
   14b0c:	00014de1 	.word	0x00014de1

00014b10 <btshell_print_adv_fields>:
{
   14b10:	b570      	push	{r4, r5, r6, lr}
   14b12:	4604      	mov	r4, r0
    if (fields->flags != 0) {
   14b14:	7801      	ldrb	r1, [r0, #0]
   14b16:	b9c1      	cbnz	r1, 14b4a <btshell_print_adv_fields+0x3a>
    if (fields->uuids16 != NULL) {
   14b18:	6863      	ldr	r3, [r4, #4]
   14b1a:	2b00      	cmp	r3, #0
   14b1c:	d03d      	beq.n	14b9a <btshell_print_adv_fields+0x8a>
                       fields->uuids16_is_complete ? "" : "in");
   14b1e:	7a63      	ldrb	r3, [r4, #9]
        console_printf("    uuids16(%scomplete)=",
   14b20:	f013 0f01 	tst.w	r3, #1
   14b24:	d034      	beq.n	14b90 <btshell_print_adv_fields+0x80>
   14b26:	4985      	ldr	r1, [pc, #532]	; (14d3c <btshell_print_adv_fields+0x22c>)
   14b28:	4885      	ldr	r0, [pc, #532]	; (14d40 <btshell_print_adv_fields+0x230>)
   14b2a:	f007 fb05 	bl	1c138 <console_printf>
        for (i = 0; i < fields->num_uuids16; i++) {
   14b2e:	2500      	movs	r5, #0
   14b30:	7a23      	ldrb	r3, [r4, #8]
   14b32:	42ab      	cmp	r3, r5
   14b34:	dd2e      	ble.n	14b94 <btshell_print_adv_fields+0x84>
            print_uuid(&fields->uuids16[i].u);
   14b36:	6860      	ldr	r0, [r4, #4]
   14b38:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   14b3c:	f000 ff50 	bl	159e0 <print_uuid>
            console_printf(" ");
   14b40:	4880      	ldr	r0, [pc, #512]	; (14d44 <btshell_print_adv_fields+0x234>)
   14b42:	f007 faf9 	bl	1c138 <console_printf>
        for (i = 0; i < fields->num_uuids16; i++) {
   14b46:	3501      	adds	r5, #1
   14b48:	e7f2      	b.n	14b30 <btshell_print_adv_fields+0x20>
        console_printf("    flags=0x%02x:\n", fields->flags);
   14b4a:	487f      	ldr	r0, [pc, #508]	; (14d48 <btshell_print_adv_fields+0x238>)
   14b4c:	f007 faf4 	bl	1c138 <console_printf>
        if (!(fields->flags & BLE_HS_ADV_F_DISC_LTD) &&
   14b50:	7823      	ldrb	r3, [r4, #0]
   14b52:	f013 0f03 	tst.w	r3, #3
   14b56:	d00f      	beq.n	14b78 <btshell_print_adv_fields+0x68>
        if (fields->flags & BLE_HS_ADV_F_DISC_LTD) {
   14b58:	7823      	ldrb	r3, [r4, #0]
   14b5a:	f013 0f01 	tst.w	r3, #1
   14b5e:	d10f      	bne.n	14b80 <btshell_print_adv_fields+0x70>
        if (fields->flags & BLE_HS_ADV_F_DISC_GEN) {
   14b60:	7823      	ldrb	r3, [r4, #0]
   14b62:	f013 0f02 	tst.w	r3, #2
   14b66:	d10f      	bne.n	14b88 <btshell_print_adv_fields+0x78>
        if (fields->flags & BLE_HS_ADV_F_BREDR_UNSUP) {
   14b68:	7823      	ldrb	r3, [r4, #0]
   14b6a:	f013 0f04 	tst.w	r3, #4
   14b6e:	d0d3      	beq.n	14b18 <btshell_print_adv_fields+0x8>
                console_printf("        BR/EDR not supported\n");
   14b70:	4876      	ldr	r0, [pc, #472]	; (14d4c <btshell_print_adv_fields+0x23c>)
   14b72:	f007 fae1 	bl	1c138 <console_printf>
   14b76:	e7cf      	b.n	14b18 <btshell_print_adv_fields+0x8>
                console_printf("        Non-discoverable mode\n");
   14b78:	4875      	ldr	r0, [pc, #468]	; (14d50 <btshell_print_adv_fields+0x240>)
   14b7a:	f007 fadd 	bl	1c138 <console_printf>
   14b7e:	e7eb      	b.n	14b58 <btshell_print_adv_fields+0x48>
                console_printf("        Limited discoverable mode\n");
   14b80:	4874      	ldr	r0, [pc, #464]	; (14d54 <btshell_print_adv_fields+0x244>)
   14b82:	f007 fad9 	bl	1c138 <console_printf>
   14b86:	e7eb      	b.n	14b60 <btshell_print_adv_fields+0x50>
                console_printf("        General discoverable mode\n");
   14b88:	4873      	ldr	r0, [pc, #460]	; (14d58 <btshell_print_adv_fields+0x248>)
   14b8a:	f007 fad5 	bl	1c138 <console_printf>
   14b8e:	e7eb      	b.n	14b68 <btshell_print_adv_fields+0x58>
        console_printf("    uuids16(%scomplete)=",
   14b90:	4972      	ldr	r1, [pc, #456]	; (14d5c <btshell_print_adv_fields+0x24c>)
   14b92:	e7c9      	b.n	14b28 <btshell_print_adv_fields+0x18>
        console_printf("\n");
   14b94:	4872      	ldr	r0, [pc, #456]	; (14d60 <btshell_print_adv_fields+0x250>)
   14b96:	f007 facf 	bl	1c138 <console_printf>
    if (fields->uuids32 != NULL) {
   14b9a:	68e3      	ldr	r3, [r4, #12]
   14b9c:	b1d3      	cbz	r3, 14bd4 <btshell_print_adv_fields+0xc4>
                       fields->uuids32_is_complete ? "" : "in");
   14b9e:	7c63      	ldrb	r3, [r4, #17]
        console_printf("    uuids32(%scomplete)=",
   14ba0:	f013 0f01 	tst.w	r3, #1
   14ba4:	d011      	beq.n	14bca <btshell_print_adv_fields+0xba>
   14ba6:	4965      	ldr	r1, [pc, #404]	; (14d3c <btshell_print_adv_fields+0x22c>)
   14ba8:	486e      	ldr	r0, [pc, #440]	; (14d64 <btshell_print_adv_fields+0x254>)
   14baa:	f007 fac5 	bl	1c138 <console_printf>
        for (i = 0; i < fields->num_uuids32; i++) {
   14bae:	2500      	movs	r5, #0
   14bb0:	7c23      	ldrb	r3, [r4, #16]
   14bb2:	42ab      	cmp	r3, r5
   14bb4:	dd0b      	ble.n	14bce <btshell_print_adv_fields+0xbe>
            print_uuid(&fields->uuids32[i].u);
   14bb6:	68e0      	ldr	r0, [r4, #12]
   14bb8:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   14bbc:	f000 ff10 	bl	159e0 <print_uuid>
            console_printf(" ");
   14bc0:	4860      	ldr	r0, [pc, #384]	; (14d44 <btshell_print_adv_fields+0x234>)
   14bc2:	f007 fab9 	bl	1c138 <console_printf>
        for (i = 0; i < fields->num_uuids32; i++) {
   14bc6:	3501      	adds	r5, #1
   14bc8:	e7f2      	b.n	14bb0 <btshell_print_adv_fields+0xa0>
        console_printf("    uuids32(%scomplete)=",
   14bca:	4964      	ldr	r1, [pc, #400]	; (14d5c <btshell_print_adv_fields+0x24c>)
   14bcc:	e7ec      	b.n	14ba8 <btshell_print_adv_fields+0x98>
        console_printf("\n");
   14bce:	4864      	ldr	r0, [pc, #400]	; (14d60 <btshell_print_adv_fields+0x250>)
   14bd0:	f007 fab2 	bl	1c138 <console_printf>
    if (fields->uuids128 != NULL) {
   14bd4:	6963      	ldr	r3, [r4, #20]
   14bd6:	b1db      	cbz	r3, 14c10 <btshell_print_adv_fields+0x100>
                       fields->uuids128_is_complete ? "" : "in");
   14bd8:	7e63      	ldrb	r3, [r4, #25]
        console_printf("    uuids128(%scomplete)=",
   14bda:	f013 0f01 	tst.w	r3, #1
   14bde:	d005      	beq.n	14bec <btshell_print_adv_fields+0xdc>
   14be0:	4956      	ldr	r1, [pc, #344]	; (14d3c <btshell_print_adv_fields+0x22c>)
   14be2:	4861      	ldr	r0, [pc, #388]	; (14d68 <btshell_print_adv_fields+0x258>)
   14be4:	f007 faa8 	bl	1c138 <console_printf>
        for (i = 0; i < fields->num_uuids128; i++) {
   14be8:	2500      	movs	r5, #0
   14bea:	e00b      	b.n	14c04 <btshell_print_adv_fields+0xf4>
        console_printf("    uuids128(%scomplete)=",
   14bec:	495b      	ldr	r1, [pc, #364]	; (14d5c <btshell_print_adv_fields+0x24c>)
   14bee:	e7f8      	b.n	14be2 <btshell_print_adv_fields+0xd2>
            print_uuid(&fields->uuids128[i].u);
   14bf0:	6960      	ldr	r0, [r4, #20]
   14bf2:	eb05 1305 	add.w	r3, r5, r5, lsl #4
   14bf6:	4418      	add	r0, r3
   14bf8:	f000 fef2 	bl	159e0 <print_uuid>
            console_printf(" ");
   14bfc:	4851      	ldr	r0, [pc, #324]	; (14d44 <btshell_print_adv_fields+0x234>)
   14bfe:	f007 fa9b 	bl	1c138 <console_printf>
        for (i = 0; i < fields->num_uuids128; i++) {
   14c02:	3501      	adds	r5, #1
   14c04:	7e23      	ldrb	r3, [r4, #24]
   14c06:	42ab      	cmp	r3, r5
   14c08:	dcf2      	bgt.n	14bf0 <btshell_print_adv_fields+0xe0>
        console_printf("\n");
   14c0a:	4855      	ldr	r0, [pc, #340]	; (14d60 <btshell_print_adv_fields+0x250>)
   14c0c:	f007 fa94 	bl	1c138 <console_printf>
    if (fields->name != NULL) {
   14c10:	69e3      	ldr	r3, [r4, #28]
   14c12:	b183      	cbz	r3, 14c36 <btshell_print_adv_fields+0x126>
                       fields->name_is_complete ? "" : "in");
   14c14:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
        console_printf("    name(%scomplete)=",
   14c18:	f013 0f01 	tst.w	r3, #1
   14c1c:	d03a      	beq.n	14c94 <btshell_print_adv_fields+0x184>
   14c1e:	4947      	ldr	r1, [pc, #284]	; (14d3c <btshell_print_adv_fields+0x22c>)
   14c20:	4852      	ldr	r0, [pc, #328]	; (14d6c <btshell_print_adv_fields+0x25c>)
   14c22:	f007 fa89 	bl	1c138 <console_printf>
        console_write((char *)fields->name, fields->name_len);
   14c26:	f894 1020 	ldrb.w	r1, [r4, #32]
   14c2a:	69e0      	ldr	r0, [r4, #28]
   14c2c:	f007 f8fc 	bl	1be28 <console_write>
        console_printf("\n");
   14c30:	484b      	ldr	r0, [pc, #300]	; (14d60 <btshell_print_adv_fields+0x250>)
   14c32:	f007 fa81 	bl	1c138 <console_printf>
    if (fields->tx_pwr_lvl_is_present) {
   14c36:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   14c3a:	f013 0f01 	tst.w	r3, #1
   14c3e:	d12b      	bne.n	14c98 <btshell_print_adv_fields+0x188>
    if (fields->slave_itvl_range != NULL) {
   14c40:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14c42:	b14b      	cbz	r3, 14c58 <btshell_print_adv_fields+0x148>
        console_printf("    slave_itvl_range=");
   14c44:	484a      	ldr	r0, [pc, #296]	; (14d70 <btshell_print_adv_fields+0x260>)
   14c46:	f007 fa77 	bl	1c138 <console_printf>
        print_bytes(fields->slave_itvl_range,
   14c4a:	2104      	movs	r1, #4
   14c4c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   14c4e:	f000 fe87 	bl	15960 <print_bytes>
        console_printf("\n");
   14c52:	4843      	ldr	r0, [pc, #268]	; (14d60 <btshell_print_adv_fields+0x250>)
   14c54:	f007 fa70 	bl	1c138 <console_printf>
    if (fields->svc_data_uuid16 != NULL) {
   14c58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14c5a:	b153      	cbz	r3, 14c72 <btshell_print_adv_fields+0x162>
        console_printf("    svc_data_uuid16=");
   14c5c:	4845      	ldr	r0, [pc, #276]	; (14d74 <btshell_print_adv_fields+0x264>)
   14c5e:	f007 fa6b 	bl	1c138 <console_printf>
        print_bytes(fields->svc_data_uuid16,
   14c62:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   14c66:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   14c68:	f000 fe7a 	bl	15960 <print_bytes>
        console_printf("\n");
   14c6c:	483c      	ldr	r0, [pc, #240]	; (14d60 <btshell_print_adv_fields+0x250>)
   14c6e:	f007 fa63 	bl	1c138 <console_printf>
    if (fields->public_tgt_addr != NULL) {
   14c72:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14c74:	b1cb      	cbz	r3, 14caa <btshell_print_adv_fields+0x19a>
        console_printf("    public_tgt_addr=");
   14c76:	4840      	ldr	r0, [pc, #256]	; (14d78 <btshell_print_adv_fields+0x268>)
   14c78:	f007 fa5e 	bl	1c138 <console_printf>
        u8p = fields->public_tgt_addr;
   14c7c:	6b26      	ldr	r6, [r4, #48]	; 0x30
        for (i = 0; i < fields->num_public_tgt_addrs; i++) {
   14c7e:	2500      	movs	r5, #0
   14c80:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   14c84:	42ab      	cmp	r3, r5
   14c86:	dd0d      	ble.n	14ca4 <btshell_print_adv_fields+0x194>
            print_addr(u8p);
   14c88:	4630      	mov	r0, r6
   14c8a:	f000 fe95 	bl	159b8 <print_addr>
            u8p += BLE_HS_ADV_PUBLIC_TGT_ADDR_ENTRY_LEN;
   14c8e:	3606      	adds	r6, #6
        for (i = 0; i < fields->num_public_tgt_addrs; i++) {
   14c90:	3501      	adds	r5, #1
   14c92:	e7f5      	b.n	14c80 <btshell_print_adv_fields+0x170>
        console_printf("    name(%scomplete)=",
   14c94:	4931      	ldr	r1, [pc, #196]	; (14d5c <btshell_print_adv_fields+0x24c>)
   14c96:	e7c3      	b.n	14c20 <btshell_print_adv_fields+0x110>
        console_printf("    tx_pwr_lvl=%d\n", fields->tx_pwr_lvl);
   14c98:	f994 1022 	ldrsb.w	r1, [r4, #34]	; 0x22
   14c9c:	4837      	ldr	r0, [pc, #220]	; (14d7c <btshell_print_adv_fields+0x26c>)
   14c9e:	f007 fa4b 	bl	1c138 <console_printf>
   14ca2:	e7cd      	b.n	14c40 <btshell_print_adv_fields+0x130>
        console_printf("\n");
   14ca4:	482e      	ldr	r0, [pc, #184]	; (14d60 <btshell_print_adv_fields+0x250>)
   14ca6:	f007 fa47 	bl	1c138 <console_printf>
    if (fields->appearance_is_present) {
   14caa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   14cae:	f013 0f01 	tst.w	r3, #1
   14cb2:	d139      	bne.n	14d28 <btshell_print_adv_fields+0x218>
    if (fields->adv_itvl_is_present) {
   14cb4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   14cb8:	f013 0f01 	tst.w	r3, #1
   14cbc:	d139      	bne.n	14d32 <btshell_print_adv_fields+0x222>
    if (fields->svc_data_uuid32 != NULL) {
   14cbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
   14cc0:	b153      	cbz	r3, 14cd8 <btshell_print_adv_fields+0x1c8>
        console_printf("    svc_data_uuid32=");
   14cc2:	482f      	ldr	r0, [pc, #188]	; (14d80 <btshell_print_adv_fields+0x270>)
   14cc4:	f007 fa38 	bl	1c138 <console_printf>
        print_bytes(fields->svc_data_uuid32,
   14cc8:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
   14ccc:	6c20      	ldr	r0, [r4, #64]	; 0x40
   14cce:	f000 fe47 	bl	15960 <print_bytes>
        console_printf("\n");
   14cd2:	4823      	ldr	r0, [pc, #140]	; (14d60 <btshell_print_adv_fields+0x250>)
   14cd4:	f007 fa30 	bl	1c138 <console_printf>
    if (fields->svc_data_uuid128 != NULL) {
   14cd8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   14cda:	b153      	cbz	r3, 14cf2 <btshell_print_adv_fields+0x1e2>
        console_printf("    svc_data_uuid128=");
   14cdc:	4829      	ldr	r0, [pc, #164]	; (14d84 <btshell_print_adv_fields+0x274>)
   14cde:	f007 fa2b 	bl	1c138 <console_printf>
        print_bytes(fields->svc_data_uuid128,
   14ce2:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
   14ce6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   14ce8:	f000 fe3a 	bl	15960 <print_bytes>
        console_printf("\n");
   14cec:	481c      	ldr	r0, [pc, #112]	; (14d60 <btshell_print_adv_fields+0x250>)
   14cee:	f007 fa23 	bl	1c138 <console_printf>
    if (fields->uri != NULL) {
   14cf2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   14cf4:	b153      	cbz	r3, 14d0c <btshell_print_adv_fields+0x1fc>
        console_printf("    uri=");
   14cf6:	4824      	ldr	r0, [pc, #144]	; (14d88 <btshell_print_adv_fields+0x278>)
   14cf8:	f007 fa1e 	bl	1c138 <console_printf>
        print_bytes(fields->uri, fields->uri_len);
   14cfc:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
   14d00:	6d20      	ldr	r0, [r4, #80]	; 0x50
   14d02:	f000 fe2d 	bl	15960 <print_bytes>
        console_printf("\n");
   14d06:	4816      	ldr	r0, [pc, #88]	; (14d60 <btshell_print_adv_fields+0x250>)
   14d08:	f007 fa16 	bl	1c138 <console_printf>
    if (fields->mfg_data != NULL) {
   14d0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   14d0e:	b153      	cbz	r3, 14d26 <btshell_print_adv_fields+0x216>
        console_printf("    mfg_data=");
   14d10:	481e      	ldr	r0, [pc, #120]	; (14d8c <btshell_print_adv_fields+0x27c>)
   14d12:	f007 fa11 	bl	1c138 <console_printf>
        print_bytes(fields->mfg_data, fields->mfg_data_len);
   14d16:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
   14d1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14d1c:	f000 fe20 	bl	15960 <print_bytes>
        console_printf("\n");
   14d20:	480f      	ldr	r0, [pc, #60]	; (14d60 <btshell_print_adv_fields+0x250>)
   14d22:	f007 fa09 	bl	1c138 <console_printf>
}
   14d26:	bd70      	pop	{r4, r5, r6, pc}
        console_printf("    appearance=0x%04x\n", fields->appearance);
   14d28:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
   14d2a:	4819      	ldr	r0, [pc, #100]	; (14d90 <btshell_print_adv_fields+0x280>)
   14d2c:	f007 fa04 	bl	1c138 <console_printf>
   14d30:	e7c0      	b.n	14cb4 <btshell_print_adv_fields+0x1a4>
        console_printf("    adv_itvl=0x%04x\n", fields->adv_itvl);
   14d32:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
   14d34:	4817      	ldr	r0, [pc, #92]	; (14d94 <btshell_print_adv_fields+0x284>)
   14d36:	f007 f9ff 	bl	1c138 <console_printf>
   14d3a:	e7c0      	b.n	14cbe <btshell_print_adv_fields+0x1ae>
   14d3c:	00038930 	.word	0x00038930
   14d40:	000345e0 	.word	0x000345e0
   14d44:	00035008 	.word	0x00035008
   14d48:	00034544 	.word	0x00034544
   14d4c:	000345c0 	.word	0x000345c0
   14d50:	00034558 	.word	0x00034558
   14d54:	00034578 	.word	0x00034578
   14d58:	0003459c 	.word	0x0003459c
   14d5c:	00035cec 	.word	0x00035cec
   14d60:	00034744 	.word	0x00034744
   14d64:	000345fc 	.word	0x000345fc
   14d68:	00034618 	.word	0x00034618
   14d6c:	00034634 	.word	0x00034634
   14d70:	00034660 	.word	0x00034660
   14d74:	00034678 	.word	0x00034678
   14d78:	00034690 	.word	0x00034690
   14d7c:	0003464c 	.word	0x0003464c
   14d80:	000346d8 	.word	0x000346d8
   14d84:	000346f0 	.word	0x000346f0
   14d88:	00034708 	.word	0x00034708
   14d8c:	00034714 	.word	0x00034714
   14d90:	000346a8 	.word	0x000346a8
   14d94:	000346c0 	.word	0x000346c0

00014d98 <btshell_decode_adv_data>:
{
   14d98:	b570      	push	{r4, r5, r6, lr}
   14d9a:	b098      	sub	sp, #96	; 0x60
   14d9c:	4605      	mov	r5, r0
   14d9e:	460c      	mov	r4, r1
   14da0:	4616      	mov	r6, r2
    console_printf(" data_length=%d data=", adv_data_len);
   14da2:	480d      	ldr	r0, [pc, #52]	; (14dd8 <btshell_decode_adv_data+0x40>)
   14da4:	f007 f9c8 	bl	1c138 <console_printf>
    if (scan_opts) {
   14da8:	b126      	cbz	r6, 14db4 <btshell_decode_adv_data+0x1c>
        adv_data_len = min(adv_data_len, scan_opts->limit);
   14daa:	b2a3      	uxth	r3, r4
   14dac:	8832      	ldrh	r2, [r6, #0]
   14dae:	4293      	cmp	r3, r2
   14db0:	d300      	bcc.n	14db4 <btshell_decode_adv_data+0x1c>
   14db2:	b2d4      	uxtb	r4, r2
    print_bytes(adv_data, adv_data_len);
   14db4:	4621      	mov	r1, r4
   14db6:	4628      	mov	r0, r5
   14db8:	f000 fdd2 	bl	15960 <print_bytes>
    console_printf(" fields:\n");
   14dbc:	4807      	ldr	r0, [pc, #28]	; (14ddc <btshell_decode_adv_data+0x44>)
   14dbe:	f007 f9bb 	bl	1c138 <console_printf>
    ble_hs_adv_parse_fields(&fields, adv_data, adv_data_len);
   14dc2:	4622      	mov	r2, r4
   14dc4:	4629      	mov	r1, r5
   14dc6:	4668      	mov	r0, sp
   14dc8:	f019 fffc 	bl	2edc4 <ble_hs_adv_parse_fields>
    btshell_print_adv_fields(&fields);
   14dcc:	4668      	mov	r0, sp
   14dce:	f7ff fe9f 	bl	14b10 <btshell_print_adv_fields>
}
   14dd2:	b018      	add	sp, #96	; 0x60
   14dd4:	bd70      	pop	{r4, r5, r6, pc}
   14dd6:	bf00      	nop
   14dd8:	00034724 	.word	0x00034724
   14ddc:	0003473c 	.word	0x0003473c

00014de0 <btshell_gap_event>:
{
   14de0:	b530      	push	{r4, r5, lr}
   14de2:	b091      	sub	sp, #68	; 0x44
   14de4:	4604      	mov	r4, r0
    switch (event->type) {
   14de6:	7803      	ldrb	r3, [r0, #0]
   14de8:	2b12      	cmp	r3, #18
   14dea:	f200 8130 	bhi.w	1504e <btshell_gap_event+0x26e>
   14dee:	e8df f013 	tbh	[pc, r3, lsl #1]
   14df2:	0013      	.short	0x0013
   14df4:	012e0036 	.word	0x012e0036
   14df8:	007e0066 	.word	0x007e0066
   14dfc:	012e012e 	.word	0x012e012e
   14e00:	009c004c 	.word	0x009c004c
   14e04:	00a800a2 	.word	0x00a800a2
   14e08:	00c0008b 	.word	0x00c0008b
   14e0c:	00db00d1 	.word	0x00db00d1
   14e10:	00f800f0 	.word	0x00f800f0
   14e14:	010f0119 	.word	0x010f0119
                       event->connect.status == 0 ? "established" : "failed",
   14e18:	6842      	ldr	r2, [r0, #4]
        console_printf("connection %s; status=%d ",
   14e1a:	b93a      	cbnz	r2, 14e2c <btshell_gap_event+0x4c>
   14e1c:	498e      	ldr	r1, [pc, #568]	; (15058 <btshell_gap_event+0x278>)
   14e1e:	488f      	ldr	r0, [pc, #572]	; (1505c <btshell_gap_event+0x27c>)
   14e20:	f007 f98a 	bl	1c138 <console_printf>
        if (event->connect.status == 0) {
   14e24:	6863      	ldr	r3, [r4, #4]
   14e26:	b11b      	cbz	r3, 14e30 <btshell_gap_event+0x50>
        return 0;
   14e28:	2400      	movs	r4, #0
   14e2a:	e111      	b.n	15050 <btshell_gap_event+0x270>
        console_printf("connection %s; status=%d ",
   14e2c:	498c      	ldr	r1, [pc, #560]	; (15060 <btshell_gap_event+0x280>)
   14e2e:	e7f6      	b.n	14e1e <btshell_gap_event+0x3e>
            rc = ble_gap_conn_find(event->connect.conn_handle, &desc);
   14e30:	a905      	add	r1, sp, #20
   14e32:	8920      	ldrh	r0, [r4, #8]
   14e34:	f014 fc62 	bl	296fc <ble_gap_conn_find>
            assert(rc == 0);
   14e38:	4604      	mov	r4, r0
   14e3a:	b930      	cbnz	r0, 14e4a <btshell_gap_event+0x6a>
            print_conn_desc(&desc);
   14e3c:	a805      	add	r0, sp, #20
   14e3e:	f000 fe1d 	bl	15a7c <print_conn_desc>
            btshell_conn_add(&desc);
   14e42:	a805      	add	r0, sp, #20
   14e44:	f7ff fd82 	bl	1494c <btshell_conn_add>
   14e48:	e102      	b.n	15050 <btshell_gap_event+0x270>
            assert(rc == 0);
   14e4a:	f7ff fc53 	bl	146f4 <hal_debugger_connected>
   14e4e:	b100      	cbz	r0, 14e52 <btshell_gap_event+0x72>
   14e50:	be01      	bkpt	0x0001
   14e52:	2300      	movs	r3, #0
   14e54:	461a      	mov	r2, r3
   14e56:	4619      	mov	r1, r3
   14e58:	4618      	mov	r0, r3
   14e5a:	f003 ff69 	bl	18d30 <__assert_func>
        console_printf("disconnect; reason=%d ", event->disconnect.reason);
   14e5e:	6841      	ldr	r1, [r0, #4]
   14e60:	4880      	ldr	r0, [pc, #512]	; (15064 <btshell_gap_event+0x284>)
   14e62:	f007 f969 	bl	1c138 <console_printf>
        print_conn_desc(&event->disconnect.conn);
   14e66:	f104 0008 	add.w	r0, r4, #8
   14e6a:	f000 fe07 	bl	15a7c <print_conn_desc>
        conn_idx = btshell_conn_find_idx(event->disconnect.conn.conn_handle);
   14e6e:	8d20      	ldrh	r0, [r4, #40]	; 0x28
   14e70:	f7ff fc92 	bl	14798 <btshell_conn_find_idx>
        if (conn_idx != -1) {
   14e74:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   14e78:	d104      	bne.n	14e84 <btshell_gap_event+0xa4>
        return btshell_restart_adv(event);
   14e7a:	4620      	mov	r0, r4
   14e7c:	f7ff fe28 	bl	14ad0 <btshell_restart_adv>
   14e80:	4604      	mov	r4, r0
   14e82:	e0e5      	b.n	15050 <btshell_gap_event+0x270>
            btshell_conn_delete_idx(conn_idx);
   14e84:	f7ff fdfc 	bl	14a80 <btshell_conn_delete_idx>
   14e88:	e7f7      	b.n	14e7a <btshell_gap_event+0x9a>
   14e8a:	460d      	mov	r5, r1
        console_printf("received advertisement; event_type=%d rssi=%d "
   14e8c:	7983      	ldrb	r3, [r0, #6]
   14e8e:	f990 200d 	ldrsb.w	r2, [r0, #13]
   14e92:	7901      	ldrb	r1, [r0, #4]
   14e94:	4874      	ldr	r0, [pc, #464]	; (15068 <btshell_gap_event+0x288>)
   14e96:	f007 f94f 	bl	1c138 <console_printf>
        print_addr(event->disc.addr.val);
   14e9a:	1de0      	adds	r0, r4, #7
   14e9c:	f000 fd8c 	bl	159b8 <print_addr>
        if (event->disc.event_type == BLE_HCI_ADV_RPT_EVTYPE_DIR_IND) {
   14ea0:	7923      	ldrb	r3, [r4, #4]
   14ea2:	2b01      	cmp	r3, #1
   14ea4:	d006      	beq.n	14eb4 <btshell_gap_event+0xd4>
        btshell_decode_adv_data(event->disc.data, event->disc.length_data, arg);
   14ea6:	462a      	mov	r2, r5
   14ea8:	7961      	ldrb	r1, [r4, #5]
   14eaa:	6920      	ldr	r0, [r4, #16]
   14eac:	f7ff ff74 	bl	14d98 <btshell_decode_adv_data>
        return 0;
   14eb0:	2400      	movs	r4, #0
   14eb2:	e0cd      	b.n	15050 <btshell_gap_event+0x270>
                console_printf("\nConnectable directed advertising event\n");
   14eb4:	486d      	ldr	r0, [pc, #436]	; (1506c <btshell_gap_event+0x28c>)
   14eb6:	f007 f93f 	bl	1c138 <console_printf>
                return 0;
   14eba:	2400      	movs	r4, #0
   14ebc:	e0c8      	b.n	15050 <btshell_gap_event+0x270>
        console_printf("connection updated; status=%d ",
   14ebe:	6841      	ldr	r1, [r0, #4]
   14ec0:	486b      	ldr	r0, [pc, #428]	; (15070 <btshell_gap_event+0x290>)
   14ec2:	f007 f939 	bl	1c138 <console_printf>
        rc = ble_gap_conn_find(event->conn_update.conn_handle, &desc);
   14ec6:	a905      	add	r1, sp, #20
   14ec8:	8920      	ldrh	r0, [r4, #8]
   14eca:	f014 fc17 	bl	296fc <ble_gap_conn_find>
        assert(rc == 0);
   14ece:	4604      	mov	r4, r0
   14ed0:	b918      	cbnz	r0, 14eda <btshell_gap_event+0xfa>
        print_conn_desc(&desc);
   14ed2:	a805      	add	r0, sp, #20
   14ed4:	f000 fdd2 	bl	15a7c <print_conn_desc>
        return 0;
   14ed8:	e0ba      	b.n	15050 <btshell_gap_event+0x270>
        assert(rc == 0);
   14eda:	f7ff fc0b 	bl	146f4 <hal_debugger_connected>
   14ede:	b100      	cbz	r0, 14ee2 <btshell_gap_event+0x102>
   14ee0:	be01      	bkpt	0x0001
   14ee2:	2300      	movs	r3, #0
   14ee4:	461a      	mov	r2, r3
   14ee6:	4619      	mov	r1, r3
   14ee8:	4618      	mov	r0, r3
   14eea:	f003 ff21 	bl	18d30 <__assert_func>
        console_printf("connection update request\n");
   14eee:	4861      	ldr	r0, [pc, #388]	; (15074 <btshell_gap_event+0x294>)
   14ef0:	f007 f922 	bl	1c138 <console_printf>
            *event->conn_update_req.peer_params;
   14ef4:	6862      	ldr	r2, [r4, #4]
        *event->conn_update_req.self_params =
   14ef6:	68a3      	ldr	r3, [r4, #8]
   14ef8:	6810      	ldr	r0, [r2, #0]
   14efa:	6851      	ldr	r1, [r2, #4]
   14efc:	6892      	ldr	r2, [r2, #8]
   14efe:	6018      	str	r0, [r3, #0]
   14f00:	6059      	str	r1, [r3, #4]
   14f02:	609a      	str	r2, [r3, #8]
        return 0;
   14f04:	2400      	movs	r4, #0
   14f06:	e0a3      	b.n	15050 <btshell_gap_event+0x270>
        console_printf("passkey action event; action=%d",
   14f08:	7901      	ldrb	r1, [r0, #4]
   14f0a:	485b      	ldr	r0, [pc, #364]	; (15078 <btshell_gap_event+0x298>)
   14f0c:	f007 f914 	bl	1c138 <console_printf>
        if (event->passkey.params.action == BLE_SM_IOACT_NUMCMP) {
   14f10:	7923      	ldrb	r3, [r4, #4]
   14f12:	2b04      	cmp	r3, #4
   14f14:	d004      	beq.n	14f20 <btshell_gap_event+0x140>
        console_printf("\n");
   14f16:	4859      	ldr	r0, [pc, #356]	; (1507c <btshell_gap_event+0x29c>)
   14f18:	f007 f90e 	bl	1c138 <console_printf>
        return 0;
   14f1c:	2400      	movs	r4, #0
   14f1e:	e097      	b.n	15050 <btshell_gap_event+0x270>
            console_printf(" numcmp=%lu",
   14f20:	68a1      	ldr	r1, [r4, #8]
   14f22:	4857      	ldr	r0, [pc, #348]	; (15080 <btshell_gap_event+0x2a0>)
   14f24:	f007 f908 	bl	1c138 <console_printf>
   14f28:	e7f5      	b.n	14f16 <btshell_gap_event+0x136>
        console_printf("discovery complete; reason=%d\n",
   14f2a:	6841      	ldr	r1, [r0, #4]
   14f2c:	4855      	ldr	r0, [pc, #340]	; (15084 <btshell_gap_event+0x2a4>)
   14f2e:	f007 f903 	bl	1c138 <console_printf>
        return 0;
   14f32:	2400      	movs	r4, #0
   14f34:	e08c      	b.n	15050 <btshell_gap_event+0x270>
        console_printf("advertise complete; reason=%d\n",
   14f36:	6841      	ldr	r1, [r0, #4]
   14f38:	4853      	ldr	r0, [pc, #332]	; (15088 <btshell_gap_event+0x2a8>)
   14f3a:	f007 f8fd 	bl	1c138 <console_printf>
        return 0;
   14f3e:	2400      	movs	r4, #0
   14f40:	e086      	b.n	15050 <btshell_gap_event+0x270>
        console_printf("encryption change event; status=%d ",
   14f42:	6841      	ldr	r1, [r0, #4]
   14f44:	4851      	ldr	r0, [pc, #324]	; (1508c <btshell_gap_event+0x2ac>)
   14f46:	f007 f8f7 	bl	1c138 <console_printf>
        rc = ble_gap_conn_find(event->enc_change.conn_handle, &desc);
   14f4a:	a905      	add	r1, sp, #20
   14f4c:	8920      	ldrh	r0, [r4, #8]
   14f4e:	f014 fbd5 	bl	296fc <ble_gap_conn_find>
        assert(rc == 0);
   14f52:	4604      	mov	r4, r0
   14f54:	b918      	cbnz	r0, 14f5e <btshell_gap_event+0x17e>
        print_conn_desc(&desc);
   14f56:	a805      	add	r0, sp, #20
   14f58:	f000 fd90 	bl	15a7c <print_conn_desc>
        return 0;
   14f5c:	e078      	b.n	15050 <btshell_gap_event+0x270>
        assert(rc == 0);
   14f5e:	f7ff fbc9 	bl	146f4 <hal_debugger_connected>
   14f62:	b100      	cbz	r0, 14f66 <btshell_gap_event+0x186>
   14f64:	be01      	bkpt	0x0001
   14f66:	2300      	movs	r3, #0
   14f68:	461a      	mov	r2, r3
   14f6a:	4619      	mov	r1, r3
   14f6c:	4618      	mov	r0, r3
   14f6e:	f003 fedf 	bl	18d30 <__assert_func>
                       event->notify_rx.indication,
   14f72:	7b02      	ldrb	r2, [r0, #12]
                       OS_MBUF_PKTLEN(event->notify_rx.om));
   14f74:	6843      	ldr	r3, [r0, #4]
        console_printf("notification rx event; attr_handle=%d indication=%d "
   14f76:	8a1b      	ldrh	r3, [r3, #16]
   14f78:	f002 0201 	and.w	r2, r2, #1
   14f7c:	8901      	ldrh	r1, [r0, #8]
   14f7e:	4844      	ldr	r0, [pc, #272]	; (15090 <btshell_gap_event+0x2b0>)
   14f80:	f007 f8da 	bl	1c138 <console_printf>
        print_mbuf(event->notify_rx.om);
   14f84:	6860      	ldr	r0, [r4, #4]
   14f86:	f000 fd03 	bl	15990 <print_mbuf>
        console_printf("\n");
   14f8a:	483c      	ldr	r0, [pc, #240]	; (1507c <btshell_gap_event+0x29c>)
   14f8c:	f007 f8d4 	bl	1c138 <console_printf>
        return 0;
   14f90:	2400      	movs	r4, #0
   14f92:	e05d      	b.n	15050 <btshell_gap_event+0x270>
                       event->notify_tx.indication);
   14f94:	7b03      	ldrb	r3, [r0, #12]
        console_printf("notification tx event; status=%d attr_handle=%d "
   14f96:	f003 0301 	and.w	r3, r3, #1
   14f9a:	8942      	ldrh	r2, [r0, #10]
   14f9c:	6841      	ldr	r1, [r0, #4]
   14f9e:	483d      	ldr	r0, [pc, #244]	; (15094 <btshell_gap_event+0x2b4>)
   14fa0:	f007 f8ca 	bl	1c138 <console_printf>
        return 0;
   14fa4:	2400      	movs	r4, #0
   14fa6:	e053      	b.n	15050 <btshell_gap_event+0x270>
                       event->subscribe.prev_notify,
   14fa8:	7a43      	ldrb	r3, [r0, #9]
   14faa:	f003 0201 	and.w	r2, r3, #1
                       event->subscribe.cur_notify,
   14fae:	f3c3 0140 	ubfx	r1, r3, #1, #1
                       event->subscribe.prev_indicate,
   14fb2:	f3c3 0080 	ubfx	r0, r3, #2, #1
                       event->subscribe.cur_indicate);
   14fb6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
        console_printf("subscribe event; conn_handle=%d attr_handle=%d "
   14fba:	9303      	str	r3, [sp, #12]
   14fbc:	9002      	str	r0, [sp, #8]
   14fbe:	9101      	str	r1, [sp, #4]
   14fc0:	9200      	str	r2, [sp, #0]
   14fc2:	7a23      	ldrb	r3, [r4, #8]
   14fc4:	88e2      	ldrh	r2, [r4, #6]
   14fc6:	88a1      	ldrh	r1, [r4, #4]
   14fc8:	4833      	ldr	r0, [pc, #204]	; (15098 <btshell_gap_event+0x2b8>)
   14fca:	f007 f8b5 	bl	1c138 <console_printf>
        return 0;
   14fce:	2400      	movs	r4, #0
   14fd0:	e03e      	b.n	15050 <btshell_gap_event+0x270>
        console_printf("mtu update event; conn_handle=%d cid=%d mtu=%d\n",
   14fd2:	8903      	ldrh	r3, [r0, #8]
   14fd4:	88c2      	ldrh	r2, [r0, #6]
   14fd6:	8881      	ldrh	r1, [r0, #4]
   14fd8:	4830      	ldr	r0, [pc, #192]	; (1509c <btshell_gap_event+0x2bc>)
   14fda:	f007 f8ad 	bl	1c138 <console_printf>
        return 0;
   14fde:	2400      	movs	r4, #0
   14fe0:	e036      	b.n	15050 <btshell_gap_event+0x270>
        console_printf("identity resolved ");
   14fe2:	482f      	ldr	r0, [pc, #188]	; (150a0 <btshell_gap_event+0x2c0>)
   14fe4:	f007 f8a8 	bl	1c138 <console_printf>
        rc = ble_gap_conn_find(event->identity_resolved.conn_handle, &desc);
   14fe8:	a905      	add	r1, sp, #20
   14fea:	88a0      	ldrh	r0, [r4, #4]
   14fec:	f014 fb86 	bl	296fc <ble_gap_conn_find>
        assert(rc == 0);
   14ff0:	4604      	mov	r4, r0
   14ff2:	b918      	cbnz	r0, 14ffc <btshell_gap_event+0x21c>
        print_conn_desc(&desc);
   14ff4:	a805      	add	r0, sp, #20
   14ff6:	f000 fd41 	bl	15a7c <print_conn_desc>
        return 0;
   14ffa:	e029      	b.n	15050 <btshell_gap_event+0x270>
        assert(rc == 0);
   14ffc:	f7ff fb7a 	bl	146f4 <hal_debugger_connected>
   15000:	b100      	cbz	r0, 15004 <btshell_gap_event+0x224>
   15002:	be01      	bkpt	0x0001
   15004:	2300      	movs	r3, #0
   15006:	461a      	mov	r2, r3
   15008:	4619      	mov	r1, r3
   1500a:	4618      	mov	r0, r3
   1500c:	f003 fe90 	bl	18d30 <__assert_func>
                       event->phy_updated.rx_phy);
   15010:	7ac3      	ldrb	r3, [r0, #11]
        console_printf("PHY update complete; status=%d, conn_handle=%d "
   15012:	9300      	str	r3, [sp, #0]
   15014:	7a83      	ldrb	r3, [r0, #10]
   15016:	8902      	ldrh	r2, [r0, #8]
   15018:	6841      	ldr	r1, [r0, #4]
   1501a:	4822      	ldr	r0, [pc, #136]	; (150a4 <btshell_gap_event+0x2c4>)
   1501c:	f007 f88c 	bl	1c138 <console_printf>
        return 0;
   15020:	2400      	movs	r4, #0
   15022:	e015      	b.n	15050 <btshell_gap_event+0x270>
        rc = ble_gap_conn_find(event->repeat_pairing.conn_handle, &desc);
   15024:	a905      	add	r1, sp, #20
   15026:	8880      	ldrh	r0, [r0, #4]
   15028:	f014 fb68 	bl	296fc <ble_gap_conn_find>
        assert(rc == 0);
   1502c:	b928      	cbnz	r0, 1503a <btshell_gap_event+0x25a>
        ble_store_util_delete_peer(&desc.peer_id_addr);
   1502e:	f10d 001f 	add.w	r0, sp, #31
   15032:	f01c f939 	bl	312a8 <ble_store_util_delete_peer>
        return BLE_GAP_REPEAT_PAIRING_RETRY;
   15036:	2401      	movs	r4, #1
   15038:	e00a      	b.n	15050 <btshell_gap_event+0x270>
        assert(rc == 0);
   1503a:	f7ff fb5b 	bl	146f4 <hal_debugger_connected>
   1503e:	b100      	cbz	r0, 15042 <btshell_gap_event+0x262>
   15040:	be01      	bkpt	0x0001
   15042:	2300      	movs	r3, #0
   15044:	461a      	mov	r2, r3
   15046:	4619      	mov	r1, r3
   15048:	4618      	mov	r0, r3
   1504a:	f003 fe71 	bl	18d30 <__assert_func>
    switch (event->type) {
   1504e:	2400      	movs	r4, #0
}
   15050:	4620      	mov	r0, r4
   15052:	b011      	add	sp, #68	; 0x44
   15054:	bd30      	pop	{r4, r5, pc}
   15056:	bf00      	nop
   15058:	00034750 	.word	0x00034750
   1505c:	0003475c 	.word	0x0003475c
   15060:	00034748 	.word	0x00034748
   15064:	00034778 	.word	0x00034778
   15068:	00034790 	.word	0x00034790
   1506c:	000347d4 	.word	0x000347d4
   15070:	00034800 	.word	0x00034800
   15074:	00034820 	.word	0x00034820
   15078:	0003483c 	.word	0x0003483c
   1507c:	00034744 	.word	0x00034744
   15080:	0003485c 	.word	0x0003485c
   15084:	00034868 	.word	0x00034868
   15088:	00034888 	.word	0x00034888
   1508c:	000348a8 	.word	0x000348a8
   15090:	000348cc 	.word	0x000348cc
   15094:	00034910 	.word	0x00034910
   15098:	00034950 	.word	0x00034950
   1509c:	000349ac 	.word	0x000349ac
   150a0:	000349dc 	.word	0x000349dc
   150a4:	000349f0 	.word	0x000349f0

000150a8 <btshell_chr_add>:
{
   150a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   150aa:	b083      	sub	sp, #12
   150ac:	460d      	mov	r5, r1
   150ae:	4616      	mov	r6, r2
    conn = btshell_conn_find(conn_handle);
   150b0:	f7ff fb88 	bl	147c4 <btshell_conn_find>
    if (conn == NULL) {
   150b4:	4604      	mov	r4, r0
   150b6:	b158      	cbz	r0, 150d0 <btshell_chr_add+0x28>
    svc = btshell_svc_find(conn, svc_start_handle, NULL);
   150b8:	2200      	movs	r2, #0
   150ba:	4629      	mov	r1, r5
   150bc:	f7ff fb9c 	bl	147f8 <btshell_svc_find>
    if (svc == NULL) {
   150c0:	4607      	mov	r7, r0
   150c2:	b320      	cbz	r0, 1510e <btshell_chr_add+0x66>
    chr = btshell_chr_find(svc, gatt_chr->val_handle, &prev);
   150c4:	aa01      	add	r2, sp, #4
   150c6:	8871      	ldrh	r1, [r6, #2]
   150c8:	f7ff fbbf 	bl	1484a <btshell_chr_find>
    if (chr != NULL) {
   150cc:	4604      	mov	r4, r0
   150ce:	b110      	cbz	r0, 150d6 <btshell_chr_add+0x2e>
}
   150d0:	4620      	mov	r0, r4
   150d2:	b003      	add	sp, #12
   150d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    chr = os_memblock_get(&btshell_chr_pool);
   150d6:	480f      	ldr	r0, [pc, #60]	; (15114 <btshell_chr_add+0x6c>)
   150d8:	f004 feb8 	bl	19e4c <os_memblock_get>
    if (chr == NULL) {
   150dc:	4604      	mov	r4, r0
   150de:	2800      	cmp	r0, #0
   150e0:	d0f6      	beq.n	150d0 <btshell_chr_add+0x28>
    memset(chr, 0, sizeof *chr);
   150e2:	2224      	movs	r2, #36	; 0x24
   150e4:	2100      	movs	r1, #0
   150e6:	f005 fdd8 	bl	1ac9a <memset>
    chr->chr = *gatt_chr;
   150ea:	f104 0c04 	add.w	ip, r4, #4
   150ee:	4635      	mov	r5, r6
   150f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   150f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   150f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   150fa:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    if (prev == NULL) {
   150fe:	9b01      	ldr	r3, [sp, #4]
   15100:	b10b      	cbz	r3, 15106 <btshell_chr_add+0x5e>
        SLIST_NEXT(prev, next) = chr;
   15102:	601c      	str	r4, [r3, #0]
   15104:	e7e4      	b.n	150d0 <btshell_chr_add+0x28>
        SLIST_INSERT_HEAD(&svc->chrs, chr, next);
   15106:	69fb      	ldr	r3, [r7, #28]
   15108:	6023      	str	r3, [r4, #0]
   1510a:	61fc      	str	r4, [r7, #28]
   1510c:	e7e0      	b.n	150d0 <btshell_chr_add+0x28>
        return NULL;
   1510e:	4604      	mov	r4, r0
   15110:	e7de      	b.n	150d0 <btshell_chr_add+0x28>
   15112:	bf00      	nop
   15114:	100011d8 	.word	0x100011d8

00015118 <btshell_svc_add>:
{
   15118:	b5f0      	push	{r4, r5, r6, r7, lr}
   1511a:	b083      	sub	sp, #12
   1511c:	460c      	mov	r4, r1
    conn = btshell_conn_find(conn_handle);
   1511e:	f7ff fb51 	bl	147c4 <btshell_conn_find>
    if (conn == NULL) {
   15122:	4606      	mov	r6, r0
   15124:	b330      	cbz	r0, 15174 <btshell_svc_add+0x5c>
    svc = btshell_svc_find(conn, gatt_svc->start_handle, &prev);
   15126:	aa01      	add	r2, sp, #4
   15128:	8821      	ldrh	r1, [r4, #0]
   1512a:	f7ff fb65 	bl	147f8 <btshell_svc_find>
    if (svc != NULL) {
   1512e:	4605      	mov	r5, r0
   15130:	b110      	cbz	r0, 15138 <btshell_svc_add+0x20>
}
   15132:	4628      	mov	r0, r5
   15134:	b003      	add	sp, #12
   15136:	bdf0      	pop	{r4, r5, r6, r7, pc}
    svc = os_memblock_get(&btshell_svc_pool);
   15138:	480f      	ldr	r0, [pc, #60]	; (15178 <btshell_svc_add+0x60>)
   1513a:	f004 fe87 	bl	19e4c <os_memblock_get>
    if (svc == NULL) {
   1513e:	4605      	mov	r5, r0
   15140:	2800      	cmp	r0, #0
   15142:	d0f6      	beq.n	15132 <btshell_svc_add+0x1a>
    memset(svc, 0, sizeof *svc);
   15144:	2224      	movs	r2, #36	; 0x24
   15146:	2100      	movs	r1, #0
   15148:	f005 fda7 	bl	1ac9a <memset>
    svc->svc = *gatt_svc;
   1514c:	1d2f      	adds	r7, r5, #4
   1514e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   15150:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   15152:	e894 0003 	ldmia.w	r4, {r0, r1}
   15156:	e887 0003 	stmia.w	r7, {r0, r1}
    SLIST_INIT(&svc->chrs);
   1515a:	2300      	movs	r3, #0
   1515c:	61eb      	str	r3, [r5, #28]
    if (prev == NULL) {
   1515e:	9b01      	ldr	r3, [sp, #4]
   15160:	b123      	cbz	r3, 1516c <btshell_svc_add+0x54>
        SLIST_INSERT_AFTER(prev, svc, next);
   15162:	681b      	ldr	r3, [r3, #0]
   15164:	602b      	str	r3, [r5, #0]
   15166:	9b01      	ldr	r3, [sp, #4]
   15168:	601d      	str	r5, [r3, #0]
   1516a:	e7e2      	b.n	15132 <btshell_svc_add+0x1a>
        SLIST_INSERT_HEAD(&conn->svcs, svc, next);
   1516c:	6873      	ldr	r3, [r6, #4]
   1516e:	602b      	str	r3, [r5, #0]
   15170:	6075      	str	r5, [r6, #4]
   15172:	e7de      	b.n	15132 <btshell_svc_add+0x1a>
        return NULL;
   15174:	4605      	mov	r5, r0
   15176:	e7dc      	b.n	15132 <btshell_svc_add+0x1a>
   15178:	10001d98 	.word	0x10001d98

0001517c <btshell_dsc_add>:
{
   1517c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1517e:	b083      	sub	sp, #12
   15180:	460d      	mov	r5, r1
   15182:	4616      	mov	r6, r2
    conn = btshell_conn_find(conn_handle);
   15184:	f7ff fb1e 	bl	147c4 <btshell_conn_find>
    if (conn == NULL) {
   15188:	4604      	mov	r4, r0
   1518a:	b180      	cbz	r0, 151ae <btshell_dsc_add+0x32>
    svc = btshell_svc_find_range(conn, chr_val_handle);
   1518c:	4629      	mov	r1, r5
   1518e:	f7ff fb47 	bl	14820 <btshell_svc_find_range>
    if (svc == NULL) {
   15192:	4604      	mov	r4, r0
   15194:	b158      	cbz	r0, 151ae <btshell_dsc_add+0x32>
    chr = btshell_chr_find(svc, chr_val_handle, NULL);
   15196:	2200      	movs	r2, #0
   15198:	4629      	mov	r1, r5
   1519a:	f7ff fb56 	bl	1484a <btshell_chr_find>
    if (chr == NULL) {
   1519e:	4607      	mov	r7, r0
   151a0:	b358      	cbz	r0, 151fa <btshell_dsc_add+0x7e>
    dsc = btshell_dsc_find(chr, gatt_dsc->handle, &prev);
   151a2:	aa01      	add	r2, sp, #4
   151a4:	8831      	ldrh	r1, [r6, #0]
   151a6:	f7ff fb6e 	bl	14886 <btshell_dsc_find>
    if (dsc != NULL) {
   151aa:	4604      	mov	r4, r0
   151ac:	b110      	cbz	r0, 151b4 <btshell_dsc_add+0x38>
}
   151ae:	4620      	mov	r0, r4
   151b0:	b003      	add	sp, #12
   151b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dsc = os_memblock_get(&btshell_dsc_pool);
   151b4:	4812      	ldr	r0, [pc, #72]	; (15200 <btshell_dsc_add+0x84>)
   151b6:	f004 fe49 	bl	19e4c <os_memblock_get>
    if (dsc == NULL) {
   151ba:	4604      	mov	r4, r0
   151bc:	b1a8      	cbz	r0, 151ea <btshell_dsc_add+0x6e>
    memset(dsc, 0, sizeof *dsc);
   151be:	2300      	movs	r3, #0
   151c0:	6003      	str	r3, [r0, #0]
   151c2:	6043      	str	r3, [r0, #4]
   151c4:	6083      	str	r3, [r0, #8]
   151c6:	60c3      	str	r3, [r0, #12]
   151c8:	6103      	str	r3, [r0, #16]
   151ca:	6143      	str	r3, [r0, #20]
   151cc:	6183      	str	r3, [r0, #24]
    dsc->dsc = *gatt_dsc;
   151ce:	f100 0c04 	add.w	ip, r0, #4
   151d2:	4635      	mov	r5, r6
   151d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   151d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   151da:	e895 0003 	ldmia.w	r5, {r0, r1}
   151de:	e88c 0003 	stmia.w	ip, {r0, r1}
    if (prev == NULL) {
   151e2:	9b01      	ldr	r3, [sp, #4]
   151e4:	b12b      	cbz	r3, 151f2 <btshell_dsc_add+0x76>
        SLIST_NEXT(prev, next) = dsc;
   151e6:	601c      	str	r4, [r3, #0]
   151e8:	e7e1      	b.n	151ae <btshell_dsc_add+0x32>
        console_printf("OOM WHILE DISCOVERING DESCRIPTOR\n");
   151ea:	4806      	ldr	r0, [pc, #24]	; (15204 <btshell_dsc_add+0x88>)
   151ec:	f006 ffa4 	bl	1c138 <console_printf>
        return NULL;
   151f0:	e7dd      	b.n	151ae <btshell_dsc_add+0x32>
        SLIST_INSERT_HEAD(&chr->dscs, dsc, next);
   151f2:	6a3b      	ldr	r3, [r7, #32]
   151f4:	6023      	str	r3, [r4, #0]
   151f6:	623c      	str	r4, [r7, #32]
   151f8:	e7d9      	b.n	151ae <btshell_dsc_add+0x32>
        return NULL;
   151fa:	4604      	mov	r4, r0
   151fc:	e7d7      	b.n	151ae <btshell_dsc_add+0x32>
   151fe:	bf00      	nop
   15200:	100018f4 	.word	0x100018f4
   15204:	00034a38 	.word	0x00034a38

00015208 <btshell_tx_timer_cb>:
    if ((btshell_tx_data.tx_num == 0) || (btshell_tx_data.tx_len == 0)) {
   15208:	4b2e      	ldr	r3, [pc, #184]	; (152c4 <btshell_tx_timer_cb+0xbc>)
   1520a:	8819      	ldrh	r1, [r3, #0]
   1520c:	b109      	cbz	r1, 15212 <btshell_tx_timer_cb+0xa>
   1520e:	891b      	ldrh	r3, [r3, #8]
   15210:	b903      	cbnz	r3, 15214 <btshell_tx_timer_cb+0xc>
   15212:	4770      	bx	lr
{
   15214:	b530      	push	{r4, r5, lr}
   15216:	b085      	sub	sp, #20
                       btshell_tx_data.tx_num_requested - btshell_tx_data.tx_num + 1,
   15218:	4c2a      	ldr	r4, [pc, #168]	; (152c4 <btshell_tx_timer_cb+0xbc>)
   1521a:	8862      	ldrh	r2, [r4, #2]
   1521c:	1a51      	subs	r1, r2, r1
    console_printf("Sending %d/%d len: %d\n",
   1521e:	3101      	adds	r1, #1
   15220:	4829      	ldr	r0, [pc, #164]	; (152c8 <btshell_tx_timer_cb+0xc0>)
   15222:	f006 ff89 	bl	1c138 <console_printf>
    len = btshell_tx_data.tx_len;
   15226:	8925      	ldrh	r5, [r4, #8]
   15228:	b2ec      	uxtb	r4, r5
    om = NULL;
   1522a:	2300      	movs	r3, #0
   1522c:	9301      	str	r3, [sp, #4]
    if (os_msys_num_free() >= 4) {
   1522e:	f004 fef9 	bl	1a024 <os_msys_num_free>
   15232:	2803      	cmp	r0, #3
   15234:	dc14      	bgt.n	15260 <btshell_tx_timer_cb+0x58>
    if (om) {
   15236:	9b01      	ldr	r3, [sp, #4]
   15238:	b3a3      	cbz	r3, 152a4 <btshell_tx_timer_cb+0x9c>
        put_le16(&l2cap_hdr.len, len);
   1523a:	b2e9      	uxtb	r1, r5
   1523c:	a802      	add	r0, sp, #8
   1523e:	f003 fde5 	bl	18e0c <put_le16>
        put_le16(&l2cap_hdr.cid, 0xffff);
   15242:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15246:	f10d 000a 	add.w	r0, sp, #10
   1524a:	f003 fddf 	bl	18e0c <put_le16>
        os_mbuf_append(om, (void *)&l2cap_hdr, BLE_L2CAP_HDR_SZ);
   1524e:	2204      	movs	r2, #4
   15250:	a902      	add	r1, sp, #8
   15252:	9801      	ldr	r0, [sp, #4]
   15254:	f004 f9cb 	bl	195ee <os_mbuf_append>
        for (i = 0; i < len; ++i) {
   15258:	2300      	movs	r3, #0
   1525a:	f88d 300f 	strb.w	r3, [sp, #15]
   1525e:	e011      	b.n	15284 <btshell_tx_timer_cb+0x7c>
        om = os_msys_get_pkthdr(len + BLE_L2CAP_HDR_SZ, BLE_HCI_DATA_HDR_SZ);
   15260:	4620      	mov	r0, r4
   15262:	2104      	movs	r1, #4
   15264:	4408      	add	r0, r1
   15266:	f004 fecb 	bl	1a000 <os_msys_get_pkthdr>
   1526a:	9001      	str	r0, [sp, #4]
   1526c:	e7e3      	b.n	15236 <btshell_tx_timer_cb+0x2e>
            os_mbuf_append(om, (void *)&i, 1);
   1526e:	2201      	movs	r2, #1
   15270:	f10d 010f 	add.w	r1, sp, #15
   15274:	9801      	ldr	r0, [sp, #4]
   15276:	f004 f9ba 	bl	195ee <os_mbuf_append>
        for (i = 0; i < len; ++i) {
   1527a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1527e:	3301      	adds	r3, #1
   15280:	f88d 300f 	strb.w	r3, [sp, #15]
   15284:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15288:	42a3      	cmp	r3, r4
   1528a:	d3f0      	bcc.n	1526e <btshell_tx_timer_cb+0x66>
        ble_hs_lock();
   1528c:	f018 fe80 	bl	2df90 <ble_hs_lock>
        ble_hs_hci_acl_tx_now(btshell_tx_data.conn, &om);
   15290:	4c0c      	ldr	r4, [pc, #48]	; (152c4 <btshell_tx_timer_cb+0xbc>)
   15292:	a901      	add	r1, sp, #4
   15294:	68e0      	ldr	r0, [r4, #12]
   15296:	f01a f9a7 	bl	2f5e8 <ble_hs_hci_acl_tx_now>
        ble_hs_unlock();
   1529a:	f018 fe7d 	bl	2df98 <ble_hs_unlock>
        --btshell_tx_data.tx_num;
   1529e:	8823      	ldrh	r3, [r4, #0]
   152a0:	3b01      	subs	r3, #1
   152a2:	8023      	strh	r3, [r4, #0]
    if (btshell_tx_data.tx_num) {
   152a4:	4b07      	ldr	r3, [pc, #28]	; (152c4 <btshell_tx_timer_cb+0xbc>)
   152a6:	881b      	ldrh	r3, [r3, #0]
   152a8:	b90b      	cbnz	r3, 152ae <btshell_tx_timer_cb+0xa6>
}
   152aa:	b005      	add	sp, #20
   152ac:	bd30      	pop	{r4, r5, pc}
        timeout = (int32_t)btshell_tx_data.tx_rate;
   152ae:	4b05      	ldr	r3, [pc, #20]	; (152c4 <btshell_tx_timer_cb+0xbc>)
   152b0:	8899      	ldrh	r1, [r3, #4]
        timeout = (timeout * OS_TICKS_PER_SEC) / 1000;
   152b2:	01c9      	lsls	r1, r1, #7
   152b4:	4b05      	ldr	r3, [pc, #20]	; (152cc <btshell_tx_timer_cb+0xc4>)
   152b6:	fb83 3101 	smull	r3, r1, r3, r1
        os_callout_reset(&btshell_tx_timer, timeout);
   152ba:	1189      	asrs	r1, r1, #6
   152bc:	4804      	ldr	r0, [pc, #16]	; (152d0 <btshell_tx_timer_cb+0xc8>)
   152be:	f003 ff7f 	bl	191c0 <os_callout_reset>
   152c2:	e7f2      	b.n	152aa <btshell_tx_timer_cb+0xa2>
   152c4:	10001db4 	.word	0x10001db4
   152c8:	00034a5c 	.word	0x00034a5c
   152cc:	10624dd3 	.word	0x10624dd3
   152d0:	10001dc4 	.word	0x10001dc4

000152d4 <btshell_on_sync>:

static void
btshell_on_sync(void)
{
   152d4:	b508      	push	{r3, lr}
    /* Make sure we have proper identity address set (public preferred) */
    if (ble_hs_util_ensure_addr(0) != 0) {
   152d6:	2000      	movs	r0, #0
   152d8:	f01c fef2 	bl	320c0 <ble_hs_util_ensure_addr>
   152dc:	b918      	cbnz	r0, 152e6 <btshell_on_sync+0x12>
        console_printf("Error: generating oob data; reason=%d\n", rc);
        return;
    }
#endif

    console_printf("Host and controller synced\n");
   152de:	4804      	ldr	r0, [pc, #16]	; (152f0 <btshell_on_sync+0x1c>)
   152e0:	f006 ff2a 	bl	1c138 <console_printf>
}
   152e4:	bd08      	pop	{r3, pc}
        console_printf("Failed to set identity address\n");
   152e6:	4803      	ldr	r0, [pc, #12]	; (152f4 <btshell_on_sync+0x20>)
   152e8:	f006 ff26 	bl	1c138 <console_printf>
   152ec:	e7f7      	b.n	152de <btshell_on_sync+0xa>
   152ee:	bf00      	nop
   152f0:	00034a94 	.word	0x00034a94
   152f4:	00034a74 	.word	0x00034a74

000152f8 <btshell_exchange_mtu>:
{
   152f8:	b508      	push	{r3, lr}
    rc = ble_gattc_exchange_mtu(conn_handle, btshell_on_mtu, NULL);
   152fa:	2200      	movs	r2, #0
   152fc:	4901      	ldr	r1, [pc, #4]	; (15304 <btshell_exchange_mtu+0xc>)
   152fe:	f016 fea3 	bl	2c048 <ble_gattc_exchange_mtu>
}
   15302:	bd08      	pop	{r3, pc}
   15304:	000148d9 	.word	0x000148d9

00015308 <btshell_disc_all_chrs>:
{
   15308:	b500      	push	{lr}
   1530a:	b083      	sub	sp, #12
    rc = ble_gattc_disc_all_chrs(conn_handle, start_handle, end_handle,
   1530c:	9100      	str	r1, [sp, #0]
   1530e:	4b03      	ldr	r3, [pc, #12]	; (1531c <btshell_disc_all_chrs+0x14>)
   15310:	f016 ff50 	bl	2c1b4 <ble_gattc_disc_all_chrs>
}
   15314:	b003      	add	sp, #12
   15316:	f85d fb04 	ldr.w	pc, [sp], #4
   1531a:	bf00      	nop
   1531c:	00015435 	.word	0x00015435

00015320 <btshell_disc_all_chrs_in_svc>:
{
   15320:	b500      	push	{lr}
   15322:	b083      	sub	sp, #12
    rc = ble_gattc_disc_all_chrs(conn_handle, svc->svc.start_handle,
   15324:	9100      	str	r1, [sp, #0]
   15326:	4b04      	ldr	r3, [pc, #16]	; (15338 <btshell_disc_all_chrs_in_svc+0x18>)
   15328:	88ca      	ldrh	r2, [r1, #6]
   1532a:	8889      	ldrh	r1, [r1, #4]
   1532c:	f016 ff42 	bl	2c1b4 <ble_gattc_disc_all_chrs>
}
   15330:	b003      	add	sp, #12
   15332:	f85d fb04 	ldr.w	pc, [sp], #4
   15336:	bf00      	nop
   15338:	00015475 	.word	0x00015475

0001533c <btshell_disc_chrs_by_uuid>:
{
   1533c:	b510      	push	{r4, lr}
   1533e:	b082      	sub	sp, #8
    rc = ble_gattc_disc_chrs_by_uuid(conn_handle, start_handle, end_handle,
   15340:	9101      	str	r1, [sp, #4]
   15342:	4c03      	ldr	r4, [pc, #12]	; (15350 <btshell_disc_chrs_by_uuid+0x14>)
   15344:	9400      	str	r4, [sp, #0]
   15346:	f016 ff63 	bl	2c210 <ble_gattc_disc_chrs_by_uuid>
}
   1534a:	b002      	add	sp, #8
   1534c:	bd10      	pop	{r4, pc}
   1534e:	bf00      	nop
   15350:	00015435 	.word	0x00015435

00015354 <btshell_disc_svcs>:
{
   15354:	b508      	push	{r3, lr}
    rc = ble_gattc_disc_all_svcs(conn_handle, btshell_on_disc_s, NULL);
   15356:	2200      	movs	r2, #0
   15358:	4901      	ldr	r1, [pc, #4]	; (15360 <btshell_disc_svcs+0xc>)
   1535a:	f016 fe9f 	bl	2c09c <ble_gattc_disc_all_svcs>
}
   1535e:	bd08      	pop	{r3, pc}
   15360:	000154bd 	.word	0x000154bd

00015364 <btshell_disc_svc_by_uuid>:
{
   15364:	b508      	push	{r3, lr}
    rc = ble_gattc_disc_svc_by_uuid(conn_handle, uuid,
   15366:	2300      	movs	r3, #0
   15368:	4a01      	ldr	r2, [pc, #4]	; (15370 <btshell_disc_svc_by_uuid+0xc>)
   1536a:	f016 fec3 	bl	2c0f4 <ble_gattc_disc_svc_by_uuid>
}
   1536e:	bd08      	pop	{r3, pc}
   15370:	000154bd 	.word	0x000154bd

00015374 <btshell_disc_all_dscs>:
{
   15374:	b500      	push	{lr}
   15376:	b083      	sub	sp, #12
    rc = ble_gattc_disc_all_dscs(conn_handle, start_handle, end_handle,
   15378:	2300      	movs	r3, #0
   1537a:	9300      	str	r3, [sp, #0]
   1537c:	4b02      	ldr	r3, [pc, #8]	; (15388 <btshell_disc_all_dscs+0x14>)
   1537e:	f016 ff7d 	bl	2c27c <ble_gattc_disc_all_dscs>
}
   15382:	b003      	add	sp, #12
   15384:	f85d fb04 	ldr.w	pc, [sp], #4
   15388:	00015501 	.word	0x00015501

0001538c <btshell_disc_full_dscs>:
{
   1538c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1538e:	4606      	mov	r6, r0
    conn = btshell_conn_find(conn_handle);
   15390:	f7ff fa18 	bl	147c4 <btshell_conn_find>
    if (conn == NULL) {
   15394:	b108      	cbz	r0, 1539a <btshell_disc_full_dscs+0xe>
    SLIST_FOREACH(svc, &conn->svcs, next) {
   15396:	6845      	ldr	r5, [r0, #4]
   15398:	e027      	b.n	153ea <btshell_disc_full_dscs+0x5e>
        btshell_full_disc_complete(BLE_HS_ENOTCONN);
   1539a:	2007      	movs	r0, #7
   1539c:	f7ff faae 	bl	148fc <btshell_full_disc_complete>
        return;
   153a0:	e021      	b.n	153e6 <btshell_disc_full_dscs+0x5a>
                    btshell_full_disc_complete(rc);
   153a2:	f7ff faab 	bl	148fc <btshell_full_disc_complete>
   153a6:	e01b      	b.n	153e0 <btshell_disc_full_dscs+0x54>
        SLIST_FOREACH(chr, &svc->chrs, next) {
   153a8:	6824      	ldr	r4, [r4, #0]
   153aa:	b1ec      	cbz	r4, 153e8 <btshell_disc_full_dscs+0x5c>
            if (!chr_is_empty(svc, chr) &&
   153ac:	4621      	mov	r1, r4
   153ae:	4628      	mov	r0, r5
   153b0:	f000 fb5a 	bl	15a68 <chr_is_empty>
   153b4:	2800      	cmp	r0, #0
   153b6:	d1f7      	bne.n	153a8 <btshell_disc_full_dscs+0x1c>
                SLIST_EMPTY(&chr->dscs) &&
   153b8:	6a23      	ldr	r3, [r4, #32]
            if (!chr_is_empty(svc, chr) &&
   153ba:	2b00      	cmp	r3, #0
   153bc:	d1f4      	bne.n	153a8 <btshell_disc_full_dscs+0x1c>
                btshell_full_disc_prev_chr_val <= chr->chr.def_handle) {
   153be:	88a2      	ldrh	r2, [r4, #4]
   153c0:	4b0d      	ldr	r3, [pc, #52]	; (153f8 <btshell_disc_full_dscs+0x6c>)
   153c2:	681b      	ldr	r3, [r3, #0]
                SLIST_EMPTY(&chr->dscs) &&
   153c4:	429a      	cmp	r2, r3
   153c6:	dbef      	blt.n	153a8 <btshell_disc_full_dscs+0x1c>
                rc = btshell_disc_all_dscs(conn_handle,
   153c8:	88e7      	ldrh	r7, [r4, #6]
   153ca:	4621      	mov	r1, r4
   153cc:	4628      	mov	r0, r5
   153ce:	f000 fb43 	bl	15a58 <chr_end_handle>
   153d2:	4602      	mov	r2, r0
   153d4:	4639      	mov	r1, r7
   153d6:	4630      	mov	r0, r6
   153d8:	f7ff ffcc 	bl	15374 <btshell_disc_all_dscs>
                if (rc != 0) {
   153dc:	2800      	cmp	r0, #0
   153de:	d1e0      	bne.n	153a2 <btshell_disc_full_dscs+0x16>
                btshell_full_disc_prev_chr_val = chr->chr.val_handle;
   153e0:	88e2      	ldrh	r2, [r4, #6]
   153e2:	4b05      	ldr	r3, [pc, #20]	; (153f8 <btshell_disc_full_dscs+0x6c>)
   153e4:	601a      	str	r2, [r3, #0]
}
   153e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SLIST_FOREACH(svc, &conn->svcs, next) {
   153e8:	682d      	ldr	r5, [r5, #0]
   153ea:	b10d      	cbz	r5, 153f0 <btshell_disc_full_dscs+0x64>
        SLIST_FOREACH(chr, &svc->chrs, next) {
   153ec:	69ec      	ldr	r4, [r5, #28]
   153ee:	e7dc      	b.n	153aa <btshell_disc_full_dscs+0x1e>
    btshell_full_disc_complete(0);
   153f0:	2000      	movs	r0, #0
   153f2:	f7ff fa83 	bl	148fc <btshell_full_disc_complete>
   153f6:	e7f6      	b.n	153e6 <btshell_disc_full_dscs+0x5a>
   153f8:	10001910 	.word	0x10001910

000153fc <btshell_disc_full_chrs>:
{
   153fc:	b510      	push	{r4, lr}
   153fe:	4604      	mov	r4, r0
    conn = btshell_conn_find(conn_handle);
   15400:	f7ff f9e0 	bl	147c4 <btshell_conn_find>
    if (conn == NULL) {
   15404:	b130      	cbz	r0, 15414 <btshell_disc_full_chrs+0x18>
    SLIST_FOREACH(svc, &conn->svcs, next) {
   15406:	6841      	ldr	r1, [r0, #4]
   15408:	b179      	cbz	r1, 1542a <btshell_disc_full_chrs+0x2e>
        if (!svc->discovered) {
   1540a:	f891 3020 	ldrb.w	r3, [r1, #32]
   1540e:	b12b      	cbz	r3, 1541c <btshell_disc_full_chrs+0x20>
    SLIST_FOREACH(svc, &conn->svcs, next) {
   15410:	6809      	ldr	r1, [r1, #0]
   15412:	e7f9      	b.n	15408 <btshell_disc_full_chrs+0xc>
        btshell_full_disc_complete(BLE_HS_ENOTCONN);
   15414:	2007      	movs	r0, #7
   15416:	f7ff fa71 	bl	148fc <btshell_full_disc_complete>
        return;
   1541a:	e009      	b.n	15430 <btshell_disc_full_chrs+0x34>
            rc = btshell_disc_all_chrs_in_svc(conn_handle, svc);
   1541c:	4620      	mov	r0, r4
   1541e:	f7ff ff7f 	bl	15320 <btshell_disc_all_chrs_in_svc>
            if (rc != 0) {
   15422:	b128      	cbz	r0, 15430 <btshell_disc_full_chrs+0x34>
                btshell_full_disc_complete(rc);
   15424:	f7ff fa6a 	bl	148fc <btshell_full_disc_complete>
            return;
   15428:	e002      	b.n	15430 <btshell_disc_full_chrs+0x34>
    btshell_disc_full_dscs(conn_handle);
   1542a:	4620      	mov	r0, r4
   1542c:	f7ff ffae 	bl	1538c <btshell_disc_full_dscs>
}
   15430:	bd10      	pop	{r4, pc}
	...

00015434 <btshell_on_disc_c>:
{
   15434:	b538      	push	{r3, r4, r5, lr}
   15436:	4605      	mov	r5, r0
    switch (error->status) {
   15438:	880c      	ldrh	r4, [r1, #0]
   1543a:	b13c      	cbz	r4, 1544c <btshell_on_disc_c+0x18>
   1543c:	2c0e      	cmp	r4, #14
   1543e:	d00a      	beq.n	15456 <btshell_on_disc_c+0x22>
        btshell_print_error(NULL, conn_handle, error);
   15440:	460a      	mov	r2, r1
   15442:	4601      	mov	r1, r0
   15444:	2000      	movs	r0, #0
   15446:	f7ff fa33 	bl	148b0 <btshell_print_error>
        break;
   1544a:	e002      	b.n	15452 <btshell_on_disc_c+0x1e>
        btshell_chr_add(conn_handle, svc_start_handle, chr);
   1544c:	b299      	uxth	r1, r3
   1544e:	f7ff fe2b 	bl	150a8 <btshell_chr_add>
}
   15452:	2000      	movs	r0, #0
   15454:	bd38      	pop	{r3, r4, r5, pc}
        console_printf("characteristic discovery successful\n");
   15456:	4805      	ldr	r0, [pc, #20]	; (1546c <btshell_on_disc_c+0x38>)
   15458:	f006 fe6e 	bl	1c138 <console_printf>
        if (btshell_full_disc_prev_chr_val > 0) {
   1545c:	4b04      	ldr	r3, [pc, #16]	; (15470 <btshell_on_disc_c+0x3c>)
   1545e:	681b      	ldr	r3, [r3, #0]
   15460:	2b00      	cmp	r3, #0
   15462:	ddf6      	ble.n	15452 <btshell_on_disc_c+0x1e>
            btshell_disc_full_chrs(conn_handle);
   15464:	4628      	mov	r0, r5
   15466:	f7ff ffc9 	bl	153fc <btshell_disc_full_chrs>
   1546a:	e7f2      	b.n	15452 <btshell_on_disc_c+0x1e>
   1546c:	00034ab0 	.word	0x00034ab0
   15470:	10001910 	.word	0x10001910

00015474 <btshell_on_disc_c_in_s>:
{
   15474:	b538      	push	{r3, r4, r5, lr}
   15476:	4605      	mov	r5, r0
    switch (error->status) {
   15478:	880c      	ldrh	r4, [r1, #0]
   1547a:	b13c      	cbz	r4, 1548c <btshell_on_disc_c_in_s+0x18>
   1547c:	2c0e      	cmp	r4, #14
   1547e:	d00a      	beq.n	15496 <btshell_on_disc_c_in_s+0x22>
        btshell_print_error(NULL, conn_handle, error);
   15480:	460a      	mov	r2, r1
   15482:	4601      	mov	r1, r0
   15484:	2000      	movs	r0, #0
   15486:	f7ff fa13 	bl	148b0 <btshell_print_error>
        break;
   1548a:	e002      	b.n	15492 <btshell_on_disc_c_in_s+0x1e>
        btshell_chr_add(conn_handle, svc->svc.start_handle, chr);
   1548c:	8899      	ldrh	r1, [r3, #4]
   1548e:	f7ff fe0b 	bl	150a8 <btshell_chr_add>
}
   15492:	2000      	movs	r0, #0
   15494:	bd38      	pop	{r3, r4, r5, pc}
        svc->discovered = true;
   15496:	2201      	movs	r2, #1
   15498:	f883 2020 	strb.w	r2, [r3, #32]
        console_printf("characteristic discovery successful\n");
   1549c:	4805      	ldr	r0, [pc, #20]	; (154b4 <btshell_on_disc_c_in_s+0x40>)
   1549e:	f006 fe4b 	bl	1c138 <console_printf>
        if (btshell_full_disc_prev_chr_val > 0) {
   154a2:	4b05      	ldr	r3, [pc, #20]	; (154b8 <btshell_on_disc_c_in_s+0x44>)
   154a4:	681b      	ldr	r3, [r3, #0]
   154a6:	2b00      	cmp	r3, #0
   154a8:	ddf3      	ble.n	15492 <btshell_on_disc_c_in_s+0x1e>
            btshell_disc_full_chrs(conn_handle);
   154aa:	4628      	mov	r0, r5
   154ac:	f7ff ffa6 	bl	153fc <btshell_disc_full_chrs>
   154b0:	e7ef      	b.n	15492 <btshell_on_disc_c_in_s+0x1e>
   154b2:	bf00      	nop
   154b4:	00034ab0 	.word	0x00034ab0
   154b8:	10001910 	.word	0x10001910

000154bc <btshell_on_disc_s>:
{
   154bc:	b510      	push	{r4, lr}
   154be:	4604      	mov	r4, r0
   154c0:	460b      	mov	r3, r1
    switch (error->status) {
   154c2:	8809      	ldrh	r1, [r1, #0]
   154c4:	b139      	cbz	r1, 154d6 <btshell_on_disc_s+0x1a>
   154c6:	290e      	cmp	r1, #14
   154c8:	d00a      	beq.n	154e0 <btshell_on_disc_s+0x24>
        btshell_print_error(NULL, conn_handle, error);
   154ca:	461a      	mov	r2, r3
   154cc:	4601      	mov	r1, r0
   154ce:	2000      	movs	r0, #0
   154d0:	f7ff f9ee 	bl	148b0 <btshell_print_error>
        break;
   154d4:	e002      	b.n	154dc <btshell_on_disc_s+0x20>
        btshell_svc_add(conn_handle, service);
   154d6:	4611      	mov	r1, r2
   154d8:	f7ff fe1e 	bl	15118 <btshell_svc_add>
}
   154dc:	2000      	movs	r0, #0
   154de:	bd10      	pop	{r4, pc}
        console_printf("service discovery successful\n");
   154e0:	4805      	ldr	r0, [pc, #20]	; (154f8 <btshell_on_disc_s+0x3c>)
   154e2:	f006 fe29 	bl	1c138 <console_printf>
        if (btshell_full_disc_prev_chr_val > 0) {
   154e6:	4b05      	ldr	r3, [pc, #20]	; (154fc <btshell_on_disc_s+0x40>)
   154e8:	681b      	ldr	r3, [r3, #0]
   154ea:	2b00      	cmp	r3, #0
   154ec:	ddf6      	ble.n	154dc <btshell_on_disc_s+0x20>
            btshell_disc_full_chrs(conn_handle);
   154ee:	4620      	mov	r0, r4
   154f0:	f7ff ff84 	bl	153fc <btshell_disc_full_chrs>
   154f4:	e7f2      	b.n	154dc <btshell_on_disc_s+0x20>
   154f6:	bf00      	nop
   154f8:	00034ad8 	.word	0x00034ad8
   154fc:	10001910 	.word	0x10001910

00015500 <btshell_on_disc_d>:
{
   15500:	b538      	push	{r3, r4, r5, lr}
   15502:	4605      	mov	r5, r0
   15504:	460c      	mov	r4, r1
   15506:	4611      	mov	r1, r2
    switch (error->status) {
   15508:	8822      	ldrh	r2, [r4, #0]
   1550a:	b13a      	cbz	r2, 1551c <btshell_on_disc_d+0x1c>
   1550c:	2a0e      	cmp	r2, #14
   1550e:	d00a      	beq.n	15526 <btshell_on_disc_d+0x26>
        btshell_print_error(NULL, conn_handle, error);
   15510:	4622      	mov	r2, r4
   15512:	4601      	mov	r1, r0
   15514:	2000      	movs	r0, #0
   15516:	f7ff f9cb 	bl	148b0 <btshell_print_error>
        break;
   1551a:	e002      	b.n	15522 <btshell_on_disc_d+0x22>
        btshell_dsc_add(conn_handle, chr_val_handle, dsc);
   1551c:	461a      	mov	r2, r3
   1551e:	f7ff fe2d 	bl	1517c <btshell_dsc_add>
}
   15522:	2000      	movs	r0, #0
   15524:	bd38      	pop	{r3, r4, r5, pc}
        console_printf("descriptor discovery successful\n");
   15526:	4805      	ldr	r0, [pc, #20]	; (1553c <btshell_on_disc_d+0x3c>)
   15528:	f006 fe06 	bl	1c138 <console_printf>
        if (btshell_full_disc_prev_chr_val > 0) {
   1552c:	4b04      	ldr	r3, [pc, #16]	; (15540 <btshell_on_disc_d+0x40>)
   1552e:	681b      	ldr	r3, [r3, #0]
   15530:	2b00      	cmp	r3, #0
   15532:	ddf6      	ble.n	15522 <btshell_on_disc_d+0x22>
            btshell_disc_full_dscs(conn_handle);
   15534:	4628      	mov	r0, r5
   15536:	f7ff ff29 	bl	1538c <btshell_disc_full_dscs>
   1553a:	e7f2      	b.n	15522 <btshell_on_disc_d+0x22>
   1553c:	00034af8 	.word	0x00034af8
   15540:	10001910 	.word	0x10001910

00015544 <btshell_disc_full>:
{
   15544:	b538      	push	{r3, r4, r5, lr}
   15546:	4605      	mov	r5, r0
    conn = btshell_conn_find(conn_handle);
   15548:	f7ff f93c 	bl	147c4 <btshell_conn_find>
    if (conn == NULL) {
   1554c:	4604      	mov	r4, r0
   1554e:	b928      	cbnz	r0, 1555c <btshell_disc_full+0x18>
        return BLE_HS_ENOTCONN;
   15550:	2007      	movs	r0, #7
   15552:	e00d      	b.n	15570 <btshell_disc_full+0x2c>
        SLIST_REMOVE_HEAD(&conn->svcs, next);
   15554:	6803      	ldr	r3, [r0, #0]
   15556:	6063      	str	r3, [r4, #4]
        btshell_svc_delete(svc);
   15558:	f7ff fa82 	bl	14a60 <btshell_svc_delete>
    while ((svc = SLIST_FIRST(&conn->svcs)) != NULL) {
   1555c:	6860      	ldr	r0, [r4, #4]
   1555e:	2800      	cmp	r0, #0
   15560:	d1f8      	bne.n	15554 <btshell_disc_full+0x10>
    btshell_full_disc_prev_chr_val = 1;
   15562:	4b04      	ldr	r3, [pc, #16]	; (15574 <btshell_disc_full+0x30>)
   15564:	2201      	movs	r2, #1
   15566:	601a      	str	r2, [r3, #0]
    btshell_disc_svcs(conn_handle);
   15568:	4628      	mov	r0, r5
   1556a:	f7ff fef3 	bl	15354 <btshell_disc_svcs>
    return 0;
   1556e:	2000      	movs	r0, #0
}
   15570:	bd38      	pop	{r3, r4, r5, pc}
   15572:	bf00      	nop
   15574:	10001910 	.word	0x10001910

00015578 <btshell_find_inc_svcs>:
{
   15578:	b500      	push	{lr}
   1557a:	b083      	sub	sp, #12
    rc = ble_gattc_find_inc_svcs(conn_handle, start_handle, end_handle,
   1557c:	2300      	movs	r3, #0
   1557e:	9300      	str	r3, [sp, #0]
   15580:	4b02      	ldr	r3, [pc, #8]	; (1558c <btshell_find_inc_svcs+0x14>)
   15582:	f016 fde9 	bl	2c158 <ble_gattc_find_inc_svcs>
}
   15586:	b003      	add	sp, #12
   15588:	f85d fb04 	ldr.w	pc, [sp], #4
   1558c:	000154bd 	.word	0x000154bd

00015590 <btshell_read>:
{
   15590:	b530      	push	{r4, r5, lr}
   15592:	b083      	sub	sp, #12
   15594:	460c      	mov	r4, r1
    if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   15596:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1559a:	4298      	cmp	r0, r3
   1559c:	d007      	beq.n	155ae <btshell_read+0x1e>
        rc = ble_gattc_read(conn_handle, attr_handle, btshell_on_read, NULL);
   1559e:	2300      	movs	r3, #0
   155a0:	4a0e      	ldr	r2, [pc, #56]	; (155dc <btshell_read+0x4c>)
   155a2:	f016 fe99 	bl	2c2d8 <ble_gattc_read>
   155a6:	4605      	mov	r5, r0
}
   155a8:	4628      	mov	r0, r5
   155aa:	b003      	add	sp, #12
   155ac:	bd30      	pop	{r4, r5, pc}
        rc = ble_att_svr_read_local(attr_handle, &om);
   155ae:	a901      	add	r1, sp, #4
   155b0:	4620      	mov	r0, r4
   155b2:	f012 fceb 	bl	27f8c <ble_att_svr_read_local>
        if (rc == 0) {
   155b6:	4605      	mov	r5, r0
   155b8:	2800      	cmp	r0, #0
   155ba:	d1f5      	bne.n	155a8 <btshell_read+0x18>
            console_printf("read local; attr_handle=%d len=%d value=",
   155bc:	9b01      	ldr	r3, [sp, #4]
   155be:	8a1a      	ldrh	r2, [r3, #16]
   155c0:	4621      	mov	r1, r4
   155c2:	4807      	ldr	r0, [pc, #28]	; (155e0 <btshell_read+0x50>)
   155c4:	f006 fdb8 	bl	1c138 <console_printf>
            print_mbuf(om);
   155c8:	9801      	ldr	r0, [sp, #4]
   155ca:	f000 f9e1 	bl	15990 <print_mbuf>
            console_printf("\n");
   155ce:	4805      	ldr	r0, [pc, #20]	; (155e4 <btshell_read+0x54>)
   155d0:	f006 fdb2 	bl	1c138 <console_printf>
            os_mbuf_free_chain(om);
   155d4:	9801      	ldr	r0, [sp, #4]
   155d6:	f003 fffa 	bl	195ce <os_mbuf_free_chain>
   155da:	e7e5      	b.n	155a8 <btshell_read+0x18>
   155dc:	00014995 	.word	0x00014995
   155e0:	00034b1c 	.word	0x00034b1c
   155e4:	00034744 	.word	0x00034744

000155e8 <btshell_read_long>:
{
   155e8:	b500      	push	{lr}
   155ea:	b083      	sub	sp, #12
    rc = ble_gattc_read_long(conn_handle, attr_handle, offset,
   155ec:	2300      	movs	r3, #0
   155ee:	9300      	str	r3, [sp, #0]
   155f0:	4b02      	ldr	r3, [pc, #8]	; (155fc <btshell_read_long+0x14>)
   155f2:	f016 fed3 	bl	2c39c <ble_gattc_read_long>
}
   155f6:	b003      	add	sp, #12
   155f8:	f85d fb04 	ldr.w	pc, [sp], #4
   155fc:	00014995 	.word	0x00014995

00015600 <btshell_read_by_uuid>:
{
   15600:	b510      	push	{r4, lr}
   15602:	b082      	sub	sp, #8
    rc = ble_gattc_read_by_uuid(conn_handle, start_handle, end_handle, uuid,
   15604:	2400      	movs	r4, #0
   15606:	9401      	str	r4, [sp, #4]
   15608:	4c02      	ldr	r4, [pc, #8]	; (15614 <btshell_read_by_uuid+0x14>)
   1560a:	9400      	str	r4, [sp, #0]
   1560c:	f016 fe90 	bl	2c330 <ble_gattc_read_by_uuid>
}
   15610:	b002      	add	sp, #8
   15612:	bd10      	pop	{r4, pc}
   15614:	00014995 	.word	0x00014995

00015618 <btshell_read_mult>:
{
   15618:	b500      	push	{lr}
   1561a:	b083      	sub	sp, #12
    rc = ble_gattc_read_mult(conn_handle, attr_handles, num_attr_handles,
   1561c:	2300      	movs	r3, #0
   1561e:	9300      	str	r3, [sp, #0]
   15620:	4b03      	ldr	r3, [pc, #12]	; (15630 <btshell_read_mult+0x18>)
   15622:	b2d2      	uxtb	r2, r2
   15624:	f016 fee8 	bl	2c3f8 <ble_gattc_read_mult>
}
   15628:	b003      	add	sp, #12
   1562a:	f85d fb04 	ldr.w	pc, [sp], #4
   1562e:	bf00      	nop
   15630:	00014995 	.word	0x00014995

00015634 <btshell_write>:
{
   15634:	b510      	push	{r4, lr}
   15636:	b082      	sub	sp, #8
   15638:	460c      	mov	r4, r1
    if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   1563a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1563e:	4298      	cmp	r0, r3
   15640:	d006      	beq.n	15650 <btshell_write+0x1c>
        rc = ble_gattc_write(conn_handle, attr_handle, om,
   15642:	2300      	movs	r3, #0
   15644:	9300      	str	r3, [sp, #0]
   15646:	4b05      	ldr	r3, [pc, #20]	; (1565c <btshell_write+0x28>)
   15648:	f016 ff2a 	bl	2c4a0 <ble_gattc_write>
}
   1564c:	b002      	add	sp, #8
   1564e:	bd10      	pop	{r4, pc}
        rc = ble_att_svr_write_local(attr_handle, om);
   15650:	4611      	mov	r1, r2
   15652:	4620      	mov	r0, r4
   15654:	f012 ff8d 	bl	28572 <ble_att_svr_write_local>
   15658:	e7f8      	b.n	1564c <btshell_write+0x18>
   1565a:	bf00      	nop
   1565c:	00014919 	.word	0x00014919

00015660 <btshell_write_no_rsp>:
{
   15660:	b508      	push	{r3, lr}
    rc = ble_gattc_write_no_rsp(conn_handle, attr_handle, om);
   15662:	f016 ff03 	bl	2c46c <ble_gattc_write_no_rsp>
}
   15666:	bd08      	pop	{r3, pc}

00015668 <btshell_write_long>:
{
   15668:	b510      	push	{r4, lr}
   1566a:	b082      	sub	sp, #8
    rc = ble_gattc_write_long(conn_handle, attr_handle, offset,
   1566c:	2400      	movs	r4, #0
   1566e:	9401      	str	r4, [sp, #4]
   15670:	4c02      	ldr	r4, [pc, #8]	; (1567c <btshell_write_long+0x14>)
   15672:	9400      	str	r4, [sp, #0]
   15674:	f016 ff4c 	bl	2c510 <ble_gattc_write_long>
}
   15678:	b002      	add	sp, #8
   1567a:	bd10      	pop	{r4, pc}
   1567c:	00014919 	.word	0x00014919

00015680 <btshell_write_reliable>:
{
   15680:	b500      	push	{lr}
   15682:	b083      	sub	sp, #12
    rc = ble_gattc_write_reliable(conn_handle, attrs, num_attrs,
   15684:	2300      	movs	r3, #0
   15686:	9300      	str	r3, [sp, #0]
   15688:	4b02      	ldr	r3, [pc, #8]	; (15694 <btshell_write_reliable+0x14>)
   1568a:	f016 ff77 	bl	2c57c <ble_gattc_write_reliable>
}
   1568e:	b003      	add	sp, #12
   15690:	f85d fb04 	ldr.w	pc, [sp], #4
   15694:	000149e1 	.word	0x000149e1

00015698 <btshell_adv_stop>:
{
   15698:	b508      	push	{r3, lr}
    adv_params.restart = false;
   1569a:	4b03      	ldr	r3, [pc, #12]	; (156a8 <btshell_adv_stop+0x10>)
   1569c:	2200      	movs	r2, #0
   1569e:	701a      	strb	r2, [r3, #0]
    rc = ble_gap_adv_stop();
   156a0:	f014 fb98 	bl	29dd4 <ble_gap_adv_stop>
}
   156a4:	bd08      	pop	{r3, pc}
   156a6:	bf00      	nop
   156a8:	100008bc 	.word	0x100008bc

000156ac <btshell_adv_start>:
{
   156ac:	b570      	push	{r4, r5, r6, lr}
   156ae:	b082      	sub	sp, #8
   156b0:	4606      	mov	r6, r0
   156b2:	460c      	mov	r4, r1
   156b4:	f89d 1018 	ldrb.w	r1, [sp, #24]
    if (restart) {
   156b8:	b199      	cbz	r1, 156e2 <btshell_adv_start+0x36>
        adv_params.restart = restart;
   156ba:	4d0f      	ldr	r5, [pc, #60]	; (156f8 <btshell_adv_start+0x4c>)
   156bc:	7029      	strb	r1, [r5, #0]
        adv_params.own_addr_type = own_addr_type;
   156be:	7068      	strb	r0, [r5, #1]
        adv_params.duration_ms = duration_ms;
   156c0:	60ea      	str	r2, [r5, #12]
        if (direct_addr) {
   156c2:	b13c      	cbz	r4, 156d4 <btshell_adv_start+0x28>
            memcpy(&adv_params.direct_addr, direct_addr, sizeof(adv_params.direct_addr));
   156c4:	4629      	mov	r1, r5
   156c6:	6820      	ldr	r0, [r4, #0]
   156c8:	f8c5 0002 	str.w	r0, [r5, #2]
   156cc:	88a5      	ldrh	r5, [r4, #4]
   156ce:	79a0      	ldrb	r0, [r4, #6]
   156d0:	80cd      	strh	r5, [r1, #6]
   156d2:	7208      	strb	r0, [r1, #8]
        if (params) {
   156d4:	b12b      	cbz	r3, 156e2 <btshell_adv_start+0x36>
            memcpy(&adv_params.params, params, sizeof(adv_params.params));
   156d6:	4d09      	ldr	r5, [pc, #36]	; (156fc <btshell_adv_start+0x50>)
   156d8:	6818      	ldr	r0, [r3, #0]
   156da:	6859      	ldr	r1, [r3, #4]
   156dc:	c503      	stmia	r5!, {r0, r1}
   156de:	8919      	ldrh	r1, [r3, #8]
   156e0:	8029      	strh	r1, [r5, #0]
    rc = ble_gap_adv_start(own_addr_type, direct_addr, duration_ms, params,
   156e2:	2100      	movs	r1, #0
   156e4:	9101      	str	r1, [sp, #4]
   156e6:	4906      	ldr	r1, [pc, #24]	; (15700 <btshell_adv_start+0x54>)
   156e8:	9100      	str	r1, [sp, #0]
   156ea:	4621      	mov	r1, r4
   156ec:	4630      	mov	r0, r6
   156ee:	f014 f973 	bl	299d8 <ble_gap_adv_start>
}
   156f2:	b002      	add	sp, #8
   156f4:	bd70      	pop	{r4, r5, r6, pc}
   156f6:	bf00      	nop
   156f8:	100008bc 	.word	0x100008bc
   156fc:	100008cc 	.word	0x100008cc
   15700:	00014de1 	.word	0x00014de1

00015704 <btshell_conn_initiate>:
{
   15704:	b510      	push	{r4, lr}
   15706:	b082      	sub	sp, #8
    rc = ble_gap_connect(own_addr_type, peer_addr, duration_ms, params,
   15708:	2400      	movs	r4, #0
   1570a:	9401      	str	r4, [sp, #4]
   1570c:	4c02      	ldr	r4, [pc, #8]	; (15718 <btshell_conn_initiate+0x14>)
   1570e:	9400      	str	r4, [sp, #0]
   15710:	f014 fc6a 	bl	29fe8 <ble_gap_connect>
}
   15714:	b002      	add	sp, #8
   15716:	bd10      	pop	{r4, pc}
   15718:	00014de1 	.word	0x00014de1

0001571c <btshell_ext_conn_initiate>:
{
   1571c:	b508      	push	{r3, lr}
    console_printf("BLE extended advertising not supported.");
   1571e:	4804      	ldr	r0, [pc, #16]	; (15730 <btshell_ext_conn_initiate+0x14>)
   15720:	f006 fd0a 	bl	1c138 <console_printf>
    console_printf(" Configure nimble host to enable it\n");
   15724:	4803      	ldr	r0, [pc, #12]	; (15734 <btshell_ext_conn_initiate+0x18>)
   15726:	f006 fd07 	bl	1c138 <console_printf>
}
   1572a:	2000      	movs	r0, #0
   1572c:	bd08      	pop	{r3, pc}
   1572e:	bf00      	nop
   15730:	00034b48 	.word	0x00034b48
   15734:	00034b70 	.word	0x00034b70

00015738 <btshell_conn_cancel>:
{
   15738:	b508      	push	{r3, lr}
    rc = ble_gap_conn_cancel();
   1573a:	f014 feb1 	bl	2a4a0 <ble_gap_conn_cancel>
}
   1573e:	bd08      	pop	{r3, pc}

00015740 <btshell_term_conn>:
{
   15740:	b508      	push	{r3, lr}
    rc = ble_gap_terminate(conn_handle, reason);
   15742:	f014 fd49 	bl	2a1d8 <ble_gap_terminate>
}
   15746:	bd08      	pop	{r3, pc}

00015748 <btshell_wl_set>:
{
   15748:	b508      	push	{r3, lr}
    rc = ble_gap_wl_set(addrs, addrs_count);
   1574a:	b2c9      	uxtb	r1, r1
   1574c:	f014 f8f6 	bl	2993c <ble_gap_wl_set>
}
   15750:	bd08      	pop	{r3, pc}
	...

00015754 <btshell_scan>:
{
   15754:	b500      	push	{lr}
   15756:	b083      	sub	sp, #12
    rc = ble_gap_disc(own_addr_type, duration_ms, disc_params,
   15758:	9300      	str	r3, [sp, #0]
   1575a:	4b03      	ldr	r3, [pc, #12]	; (15768 <btshell_scan+0x14>)
   1575c:	f014 fbbe 	bl	29edc <ble_gap_disc>
}
   15760:	b003      	add	sp, #12
   15762:	f85d fb04 	ldr.w	pc, [sp], #4
   15766:	bf00      	nop
   15768:	00014de1 	.word	0x00014de1

0001576c <btshell_ext_scan>:
{
   1576c:	b508      	push	{r3, lr}
    console_printf("BLE extended advertising not supported.");
   1576e:	4804      	ldr	r0, [pc, #16]	; (15780 <btshell_ext_scan+0x14>)
   15770:	f006 fce2 	bl	1c138 <console_printf>
    console_printf(" Configure nimble host to enable it\n");
   15774:	4803      	ldr	r0, [pc, #12]	; (15784 <btshell_ext_scan+0x18>)
   15776:	f006 fcdf 	bl	1c138 <console_printf>
}
   1577a:	2000      	movs	r0, #0
   1577c:	bd08      	pop	{r3, pc}
   1577e:	bf00      	nop
   15780:	00034b48 	.word	0x00034b48
   15784:	00034b70 	.word	0x00034b70

00015788 <btshell_scan_cancel>:
{
   15788:	b508      	push	{r3, lr}
    rc = ble_gap_disc_cancel();
   1578a:	f014 fb53 	bl	29e34 <ble_gap_disc_cancel>
}
   1578e:	bd08      	pop	{r3, pc}

00015790 <btshell_update_conn>:
{
   15790:	b508      	push	{r3, lr}
    rc = ble_gap_update_params(conn_handle, params);
   15792:	f014 fedb 	bl	2a54c <ble_gap_update_params>
}
   15796:	bd08      	pop	{r3, pc}

00015798 <btshell_notify>:
{
   15798:	b508      	push	{r3, lr}
    ble_gatts_chr_updated(attr_handle);
   1579a:	f018 f8ad 	bl	2d8f8 <ble_gatts_chr_updated>
}
   1579e:	bd08      	pop	{r3, pc}

000157a0 <btshell_datalen>:
{
   157a0:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_set_data_len(conn_handle, tx_octets, tx_time);
   157a2:	f01a faab 	bl	2fcfc <ble_hs_hci_util_set_data_len>
}
   157a6:	bd08      	pop	{r3, pc}

000157a8 <btshell_tx_start>:
    if (num == 0) {
   157a8:	b32b      	cbz	r3, 157f6 <btshell_tx_start+0x4e>
{
   157aa:	b538      	push	{r3, r4, r5, lr}
   157ac:	4605      	mov	r5, r0
   157ae:	4618      	mov	r0, r3
    if (btshell_tx_data.tx_num != 0) {
   157b0:	4b15      	ldr	r3, [pc, #84]	; (15808 <btshell_tx_start+0x60>)
   157b2:	881b      	ldrh	r3, [r3, #0]
   157b4:	bb0b      	cbnz	r3, 157fa <btshell_tx_start+0x52>
    if ((len + 4) > MYNEWT_VAL_MSYS_1_BLOCK_SIZE) {
   157b6:	f5b1 7f90 	cmp.w	r1, #288	; 0x120
   157ba:	d821      	bhi.n	15800 <btshell_tx_start+0x58>
    btshell_tx_data.tx_num = num;
   157bc:	4c12      	ldr	r4, [pc, #72]	; (15808 <btshell_tx_start+0x60>)
   157be:	8020      	strh	r0, [r4, #0]
    btshell_tx_data.tx_num_requested = num;
   157c0:	8060      	strh	r0, [r4, #2]
    btshell_tx_data.tx_rate = rate;
   157c2:	80a2      	strh	r2, [r4, #4]
    btshell_tx_data.tx_len = len;
   157c4:	8121      	strh	r1, [r4, #8]
    btshell_tx_data.tx_conn_handle = conn_handle;
   157c6:	80e5      	strh	r5, [r4, #6]
    ble_hs_lock();
   157c8:	f018 fbe2 	bl	2df90 <ble_hs_lock>
    btshell_tx_data.conn = ble_hs_conn_find(conn_handle);
   157cc:	4628      	mov	r0, r5
   157ce:	f019 fc63 	bl	2f098 <ble_hs_conn_find>
   157d2:	60e0      	str	r0, [r4, #12]
    ble_hs_unlock();
   157d4:	f018 fbe0 	bl	2df98 <ble_hs_unlock>
    if (!btshell_tx_data.conn) {
   157d8:	68e3      	ldr	r3, [r4, #12]
   157da:	b12b      	cbz	r3, 157e8 <btshell_tx_start+0x40>
    os_callout_reset(&btshell_tx_timer, 0);
   157dc:	2100      	movs	r1, #0
   157de:	480b      	ldr	r0, [pc, #44]	; (1580c <btshell_tx_start+0x64>)
   157e0:	f003 fcee 	bl	191c0 <os_callout_reset>
    return 0;
   157e4:	2000      	movs	r0, #0
}
   157e6:	bd38      	pop	{r3, r4, r5, pc}
        console_printf("Could not find ble_hs_conn for handle: %d\n",
   157e8:	4629      	mov	r1, r5
   157ea:	4809      	ldr	r0, [pc, #36]	; (15810 <btshell_tx_start+0x68>)
   157ec:	f006 fca4 	bl	1c138 <console_printf>
        return -1;
   157f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   157f4:	e7f7      	b.n	157e6 <btshell_tx_start+0x3e>
        return 0;
   157f6:	2000      	movs	r0, #0
}
   157f8:	4770      	bx	lr
        return -1;
   157fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   157fe:	e7f2      	b.n	157e6 <btshell_tx_start+0x3e>
        return -2;
   15800:	f06f 0001 	mvn.w	r0, #1
   15804:	e7ef      	b.n	157e6 <btshell_tx_start+0x3e>
   15806:	bf00      	nop
   15808:	10001db4 	.word	0x10001db4
   1580c:	10001dc4 	.word	0x10001dc4
   15810:	00034b98 	.word	0x00034b98

00015814 <btshell_tx_stop>:
{
   15814:	b508      	push	{r3, lr}
    os_callout_stop(&btshell_tx_timer);
   15816:	4803      	ldr	r0, [pc, #12]	; (15824 <btshell_tx_stop+0x10>)
   15818:	f003 fcb4 	bl	19184 <os_callout_stop>
    btshell_tx_data.tx_num = 0;
   1581c:	4b02      	ldr	r3, [pc, #8]	; (15828 <btshell_tx_stop+0x14>)
   1581e:	2200      	movs	r2, #0
   15820:	801a      	strh	r2, [r3, #0]
}
   15822:	bd08      	pop	{r3, pc}
   15824:	10001dc4 	.word	0x10001dc4
   15828:	10001db4 	.word	0x10001db4

0001582c <btshell_rssi>:
{
   1582c:	b508      	push	{r3, lr}
    rc = ble_gap_conn_rssi(conn_handle, out_rssi);
   1582e:	f014 ff27 	bl	2a680 <ble_gap_conn_rssi>
}
   15832:	bd08      	pop	{r3, pc}

00015834 <main>:
 *
 * @return int NOTE: this function should never return!
 */
int
main(int argc, char **argv)
{
   15834:	b500      	push	{lr}
   15836:	b083      	sub	sp, #12
#ifdef ARCH_sim
    mcu_sim_parse_args(argc, argv);
#endif

    /* Initialize OS */
    sysinit();
   15838:	f008 fc0c 	bl	1e054 <sysinit_start>
   1583c:	f003 fa5a 	bl	18cf4 <sysinit_app>
   15840:	f008 fc0e 	bl	1e060 <sysinit_end>

    /* Initialize some application specific memory pools. */
    rc = os_mempool_init(&btshell_svc_pool, BTSHELL_MAX_SVCS,
   15844:	4b35      	ldr	r3, [pc, #212]	; (1591c <main+0xe8>)
   15846:	9300      	str	r3, [sp, #0]
   15848:	4b35      	ldr	r3, [pc, #212]	; (15920 <main+0xec>)
   1584a:	2224      	movs	r2, #36	; 0x24
   1584c:	2120      	movs	r1, #32
   1584e:	4835      	ldr	r0, [pc, #212]	; (15924 <main+0xf0>)
   15850:	f004 fab8 	bl	19dc4 <os_mempool_init>
                         sizeof (struct btshell_svc), btshell_svc_mem,
                         "btshell_svc_pool");
    assert(rc == 0);
   15854:	b148      	cbz	r0, 1586a <main+0x36>
   15856:	f7fe ff4d 	bl	146f4 <hal_debugger_connected>
   1585a:	b100      	cbz	r0, 1585e <main+0x2a>
   1585c:	be01      	bkpt	0x0001
   1585e:	2300      	movs	r3, #0
   15860:	461a      	mov	r2, r3
   15862:	4619      	mov	r1, r3
   15864:	4618      	mov	r0, r3
   15866:	f003 fa63 	bl	18d30 <__assert_func>

    rc = os_mempool_init(&btshell_chr_pool, BTSHELL_MAX_CHRS,
   1586a:	4b2f      	ldr	r3, [pc, #188]	; (15928 <main+0xf4>)
   1586c:	9300      	str	r3, [sp, #0]
   1586e:	4b2f      	ldr	r3, [pc, #188]	; (1592c <main+0xf8>)
   15870:	2224      	movs	r2, #36	; 0x24
   15872:	2140      	movs	r1, #64	; 0x40
   15874:	482e      	ldr	r0, [pc, #184]	; (15930 <main+0xfc>)
   15876:	f004 faa5 	bl	19dc4 <os_mempool_init>
                         sizeof (struct btshell_chr), btshell_chr_mem,
                         "btshell_chr_pool");
    assert(rc == 0);
   1587a:	b148      	cbz	r0, 15890 <main+0x5c>
   1587c:	f7fe ff3a 	bl	146f4 <hal_debugger_connected>
   15880:	b100      	cbz	r0, 15884 <main+0x50>
   15882:	be01      	bkpt	0x0001
   15884:	2300      	movs	r3, #0
   15886:	461a      	mov	r2, r3
   15888:	4619      	mov	r1, r3
   1588a:	4618      	mov	r0, r3
   1588c:	f003 fa50 	bl	18d30 <__assert_func>

    rc = os_mempool_init(&btshell_dsc_pool, BTSHELL_MAX_DSCS,
   15890:	4b28      	ldr	r3, [pc, #160]	; (15934 <main+0x100>)
   15892:	9300      	str	r3, [sp, #0]
   15894:	4b28      	ldr	r3, [pc, #160]	; (15938 <main+0x104>)
   15896:	221c      	movs	r2, #28
   15898:	2140      	movs	r1, #64	; 0x40
   1589a:	4828      	ldr	r0, [pc, #160]	; (1593c <main+0x108>)
   1589c:	f004 fa92 	bl	19dc4 <os_mempool_init>
                         sizeof (struct btshell_dsc), btshell_dsc_mem,
                         "btshell_dsc_pool");
    assert(rc == 0);
   158a0:	b148      	cbz	r0, 158b6 <main+0x82>
   158a2:	f7fe ff27 	bl	146f4 <hal_debugger_connected>
   158a6:	b100      	cbz	r0, 158aa <main+0x76>
   158a8:	be01      	bkpt	0x0001
   158aa:	2300      	movs	r3, #0
   158ac:	461a      	mov	r2, r3
   158ae:	4619      	mov	r1, r3
   158b0:	4618      	mov	r0, r3
   158b2:	f003 fa3d 	bl	18d30 <__assert_func>
                         "btshell_coc_conn_pool");
    assert(rc == 0);
#endif

    /* Initialize the NimBLE host configuration. */
    ble_hs_cfg.reset_cb = btshell_on_reset;
   158b6:	4b22      	ldr	r3, [pc, #136]	; (15940 <main+0x10c>)
   158b8:	4a22      	ldr	r2, [pc, #136]	; (15944 <main+0x110>)
   158ba:	60da      	str	r2, [r3, #12]
    ble_hs_cfg.sync_cb = btshell_on_sync;
   158bc:	4a22      	ldr	r2, [pc, #136]	; (15948 <main+0x114>)
   158be:	611a      	str	r2, [r3, #16]
    ble_hs_cfg.gatts_register_cb = gatt_svr_register_cb;
   158c0:	4a22      	ldr	r2, [pc, #136]	; (1594c <main+0x118>)
   158c2:	601a      	str	r2, [r3, #0]
    ble_hs_cfg.store_status_cb = ble_store_util_status_rr;
   158c4:	4a22      	ldr	r2, [pc, #136]	; (15950 <main+0x11c>)
   158c6:	621a      	str	r2, [r3, #32]

    rc = gatt_svr_init();
   158c8:	f002 fe48 	bl	1855c <gatt_svr_init>
    assert(rc == 0);
   158cc:	b148      	cbz	r0, 158e2 <main+0xae>
   158ce:	f7fe ff11 	bl	146f4 <hal_debugger_connected>
   158d2:	b100      	cbz	r0, 158d6 <main+0xa2>
   158d4:	be01      	bkpt	0x0001
   158d6:	2300      	movs	r3, #0
   158d8:	461a      	mov	r2, r3
   158da:	4619      	mov	r1, r3
   158dc:	4618      	mov	r0, r3
   158de:	f003 fa27 	bl	18d30 <__assert_func>

    cmd_init();
   158e2:	f002 f80f 	bl	17904 <cmd_init>

    /* Set the default device name. */
    rc = ble_svc_gap_device_name_set("nimble-btshell");
   158e6:	481b      	ldr	r0, [pc, #108]	; (15954 <main+0x120>)
   158e8:	f01c f894 	bl	31a14 <ble_svc_gap_device_name_set>
    assert(rc == 0);
   158ec:	b148      	cbz	r0, 15902 <main+0xce>
   158ee:	f7fe ff01 	bl	146f4 <hal_debugger_connected>
   158f2:	b100      	cbz	r0, 158f6 <main+0xc2>
   158f4:	be01      	bkpt	0x0001
   158f6:	2300      	movs	r3, #0
   158f8:	461a      	mov	r2, r3
   158fa:	4619      	mov	r1, r3
   158fc:	4618      	mov	r0, r3
   158fe:	f003 fa17 	bl	18d30 <__assert_func>

    /* Create a callout (timer).  This callout is used by the "tx" btshell
     * command to repeatedly send packets of sequential data bytes.
     */
    os_callout_init(&btshell_tx_timer, os_eventq_dflt_get(),
   15902:	f003 fe21 	bl	19548 <os_eventq_dflt_get>
   15906:	4601      	mov	r1, r0
   15908:	2300      	movs	r3, #0
   1590a:	4a13      	ldr	r2, [pc, #76]	; (15958 <main+0x124>)
   1590c:	4813      	ldr	r0, [pc, #76]	; (1595c <main+0x128>)
   1590e:	f003 fc2b 	bl	19168 <os_callout_init>
                    btshell_tx_timer_cb, NULL);

    btshell_init_ext_adv_restart();

    while (1) {
        os_eventq_run(os_eventq_dflt_get());
   15912:	f003 fe19 	bl	19548 <os_eventq_dflt_get>
   15916:	f003 fde4 	bl	194e2 <os_eventq_run>
    while (1) {
   1591a:	e7fa      	b.n	15912 <main+0xde>
   1591c:	00034bc4 	.word	0x00034bc4
   15920:	10001918 	.word	0x10001918
   15924:	10001d98 	.word	0x10001d98
   15928:	00034bd8 	.word	0x00034bd8
   1592c:	100008d8 	.word	0x100008d8
   15930:	100011d8 	.word	0x100011d8
   15934:	00034bec 	.word	0x00034bec
   15938:	100011f4 	.word	0x100011f4
   1593c:	100018f4 	.word	0x100018f4
   15940:	100006f0 	.word	0x100006f0
   15944:	0001493d 	.word	0x0001493d
   15948:	000152d5 	.word	0x000152d5
   1594c:	00018505 	.word	0x00018505
   15950:	0003130f 	.word	0x0003130f
   15954:	00034c00 	.word	0x00034c00
   15958:	00015209 	.word	0x00015209
   1595c:	10001dc4 	.word	0x10001dc4

00015960 <print_bytes>:
/**
 * Utility function to log an array of bytes.
 */
void
print_bytes(const uint8_t *bytes, int len)
{
   15960:	b570      	push	{r4, r5, r6, lr}
   15962:	4606      	mov	r6, r0
   15964:	460d      	mov	r5, r1
    int i;

    for (i = 0; i < len; i++) {
   15966:	2400      	movs	r4, #0
   15968:	e005      	b.n	15976 <print_bytes+0x16>
        console_printf("%s0x%02x", i != 0 ? ":" : "", bytes[i]);
   1596a:	4906      	ldr	r1, [pc, #24]	; (15984 <print_bytes+0x24>)
   1596c:	5d32      	ldrb	r2, [r6, r4]
   1596e:	4806      	ldr	r0, [pc, #24]	; (15988 <print_bytes+0x28>)
   15970:	f006 fbe2 	bl	1c138 <console_printf>
    for (i = 0; i < len; i++) {
   15974:	3401      	adds	r4, #1
   15976:	42ac      	cmp	r4, r5
   15978:	da03      	bge.n	15982 <print_bytes+0x22>
        console_printf("%s0x%02x", i != 0 ? ":" : "", bytes[i]);
   1597a:	2c00      	cmp	r4, #0
   1597c:	d0f5      	beq.n	1596a <print_bytes+0xa>
   1597e:	4903      	ldr	r1, [pc, #12]	; (1598c <print_bytes+0x2c>)
   15980:	e7f4      	b.n	1596c <print_bytes+0xc>
    }
}
   15982:	bd70      	pop	{r4, r5, r6, pc}
   15984:	00038930 	.word	0x00038930
   15988:	00034c14 	.word	0x00034c14
   1598c:	00034c10 	.word	0x00034c10

00015990 <print_mbuf>:

void
print_mbuf(const struct os_mbuf *om)
{
   15990:	b538      	push	{r3, r4, r5, lr}
   15992:	4604      	mov	r4, r0
    int colon;

    colon = 0;
   15994:	2500      	movs	r5, #0
    while (om != NULL) {
   15996:	e007      	b.n	159a8 <print_mbuf+0x18>
        if (colon) {
            console_printf(":");
   15998:	4806      	ldr	r0, [pc, #24]	; (159b4 <print_mbuf+0x24>)
   1599a:	f006 fbcd 	bl	1c138 <console_printf>
        } else {
            colon = 1;
        }
        print_bytes(om->om_data, om->om_len);
   1599e:	88e1      	ldrh	r1, [r4, #6]
   159a0:	6820      	ldr	r0, [r4, #0]
   159a2:	f7ff ffdd 	bl	15960 <print_bytes>
        om = SLIST_NEXT(om, om_next);
   159a6:	68e4      	ldr	r4, [r4, #12]
    while (om != NULL) {
   159a8:	b11c      	cbz	r4, 159b2 <print_mbuf+0x22>
        if (colon) {
   159aa:	2d00      	cmp	r5, #0
   159ac:	d1f4      	bne.n	15998 <print_mbuf+0x8>
            colon = 1;
   159ae:	2501      	movs	r5, #1
   159b0:	e7f5      	b.n	1599e <print_mbuf+0xe>
    }
}
   159b2:	bd38      	pop	{r3, r4, r5, pc}
   159b4:	00034c10 	.word	0x00034c10

000159b8 <print_addr>:

void
print_addr(const void *addr)
{
   159b8:	b500      	push	{lr}
   159ba:	b085      	sub	sp, #20
    const uint8_t *u8p;

    u8p = addr;
    console_printf("%02x:%02x:%02x:%02x:%02x:%02x",
                   u8p[5], u8p[4], u8p[3], u8p[2], u8p[1], u8p[0]);
   159bc:	7883      	ldrb	r3, [r0, #2]
   159be:	7842      	ldrb	r2, [r0, #1]
   159c0:	7801      	ldrb	r1, [r0, #0]
    console_printf("%02x:%02x:%02x:%02x:%02x:%02x",
   159c2:	9102      	str	r1, [sp, #8]
   159c4:	9201      	str	r2, [sp, #4]
   159c6:	9300      	str	r3, [sp, #0]
   159c8:	78c3      	ldrb	r3, [r0, #3]
   159ca:	7902      	ldrb	r2, [r0, #4]
   159cc:	7941      	ldrb	r1, [r0, #5]
   159ce:	4803      	ldr	r0, [pc, #12]	; (159dc <print_addr+0x24>)
   159d0:	f006 fbb2 	bl	1c138 <console_printf>
}
   159d4:	b005      	add	sp, #20
   159d6:	f85d fb04 	ldr.w	pc, [sp], #4
   159da:	bf00      	nop
   159dc:	00034c20 	.word	0x00034c20

000159e0 <print_uuid>:

void
print_uuid(const ble_uuid_t *uuid)
{
   159e0:	b500      	push	{lr}
   159e2:	b08b      	sub	sp, #44	; 0x2c
    char buf[BLE_UUID_STR_LEN];

    ble_uuid_to_str(uuid, buf);
   159e4:	4669      	mov	r1, sp
   159e6:	f01b fcf5 	bl	313d4 <ble_uuid_to_str>

    console_printf("%s", buf);
   159ea:	4669      	mov	r1, sp
   159ec:	4802      	ldr	r0, [pc, #8]	; (159f8 <print_uuid+0x18>)
   159ee:	f006 fba3 	bl	1c138 <console_printf>
}
   159f2:	b00b      	add	sp, #44	; 0x2c
   159f4:	f85d fb04 	ldr.w	pc, [sp], #4
   159f8:	00034c40 	.word	0x00034c40

000159fc <print_dsc>:
                   desc->sec_state.bonded);
}

static void
print_dsc(struct btshell_dsc *dsc)
{
   159fc:	b510      	push	{r4, lr}
   159fe:	4604      	mov	r4, r0
    console_printf("            dsc_handle=%d uuid=", dsc->dsc.handle);
   15a00:	8881      	ldrh	r1, [r0, #4]
   15a02:	4805      	ldr	r0, [pc, #20]	; (15a18 <print_dsc+0x1c>)
   15a04:	f006 fb98 	bl	1c138 <console_printf>
    print_uuid(&dsc->dsc.uuid.u);
   15a08:	f104 0008 	add.w	r0, r4, #8
   15a0c:	f7ff ffe8 	bl	159e0 <print_uuid>
    console_printf("\n");
   15a10:	4802      	ldr	r0, [pc, #8]	; (15a1c <print_dsc+0x20>)
   15a12:	f006 fb91 	bl	1c138 <console_printf>
}
   15a16:	bd10      	pop	{r4, pc}
   15a18:	00034c44 	.word	0x00034c44
   15a1c:	00034744 	.word	0x00034744

00015a20 <print_chr>:

static void
print_chr(struct btshell_chr *chr)
{
   15a20:	b510      	push	{r4, lr}
   15a22:	4604      	mov	r4, r0
    struct btshell_dsc *dsc;

    console_printf("        def_handle=%d val_handle=%d properties=0x%02x "
   15a24:	7a03      	ldrb	r3, [r0, #8]
   15a26:	88c2      	ldrh	r2, [r0, #6]
   15a28:	8881      	ldrh	r1, [r0, #4]
   15a2a:	4809      	ldr	r0, [pc, #36]	; (15a50 <print_chr+0x30>)
   15a2c:	f006 fb84 	bl	1c138 <console_printf>
                   "uuid=", chr->chr.def_handle, chr->chr.val_handle,
                   chr->chr.properties);
    print_uuid(&chr->chr.uuid.u);
   15a30:	f104 000c 	add.w	r0, r4, #12
   15a34:	f7ff ffd4 	bl	159e0 <print_uuid>
    console_printf("\n");
   15a38:	4806      	ldr	r0, [pc, #24]	; (15a54 <print_chr+0x34>)
   15a3a:	f006 fb7d 	bl	1c138 <console_printf>

    SLIST_FOREACH(dsc, &chr->dscs, next) {
   15a3e:	6a24      	ldr	r4, [r4, #32]
   15a40:	b124      	cbz	r4, 15a4c <print_chr+0x2c>
        print_dsc(dsc);
   15a42:	4620      	mov	r0, r4
   15a44:	f7ff ffda 	bl	159fc <print_dsc>
    SLIST_FOREACH(dsc, &chr->dscs, next) {
   15a48:	6824      	ldr	r4, [r4, #0]
   15a4a:	e7f9      	b.n	15a40 <print_chr+0x20>
    }
}
   15a4c:	bd10      	pop	{r4, pc}
   15a4e:	bf00      	nop
   15a50:	00034c64 	.word	0x00034c64
   15a54:	00034744 	.word	0x00034744

00015a58 <chr_end_handle>:
    next_chr = SLIST_NEXT(chr, next);
   15a58:	680b      	ldr	r3, [r1, #0]
    if (next_chr != NULL) {
   15a5a:	b11b      	cbz	r3, 15a64 <chr_end_handle+0xc>
        return next_chr->chr.def_handle - 1;
   15a5c:	8898      	ldrh	r0, [r3, #4]
   15a5e:	3801      	subs	r0, #1
   15a60:	b280      	uxth	r0, r0
   15a62:	4770      	bx	lr
        return svc->svc.end_handle;
   15a64:	88c0      	ldrh	r0, [r0, #6]
}
   15a66:	4770      	bx	lr

00015a68 <chr_is_empty>:
{
   15a68:	b510      	push	{r4, lr}
   15a6a:	460c      	mov	r4, r1
    return chr_end_handle(svc, chr) <= chr->chr.val_handle;
   15a6c:	f7ff fff4 	bl	15a58 <chr_end_handle>
   15a70:	88e3      	ldrh	r3, [r4, #6]
}
   15a72:	4298      	cmp	r0, r3
   15a74:	bf8c      	ite	hi
   15a76:	2000      	movhi	r0, #0
   15a78:	2001      	movls	r0, #1
   15a7a:	bd10      	pop	{r4, pc}

00015a7c <print_conn_desc>:
{
   15a7c:	b510      	push	{r4, lr}
   15a7e:	b084      	sub	sp, #16
   15a80:	4604      	mov	r4, r0
    console_printf("handle=%d our_ota_addr_type=%d our_ota_addr=",
   15a82:	7c82      	ldrb	r2, [r0, #18]
   15a84:	8c01      	ldrh	r1, [r0, #32]
   15a86:	4819      	ldr	r0, [pc, #100]	; (15aec <print_conn_desc+0x70>)
   15a88:	f006 fb56 	bl	1c138 <console_printf>
    print_addr(desc->our_ota_addr.val);
   15a8c:	f104 0013 	add.w	r0, r4, #19
   15a90:	f7ff ff92 	bl	159b8 <print_addr>
    console_printf(" our_id_addr_type=%d our_id_addr=",
   15a94:	7921      	ldrb	r1, [r4, #4]
   15a96:	4816      	ldr	r0, [pc, #88]	; (15af0 <print_conn_desc+0x74>)
   15a98:	f006 fb4e 	bl	1c138 <console_printf>
    print_addr(desc->our_id_addr.val);
   15a9c:	1d60      	adds	r0, r4, #5
   15a9e:	f7ff ff8b 	bl	159b8 <print_addr>
    console_printf(" peer_ota_addr_type=%d peer_ota_addr=",
   15aa2:	7e61      	ldrb	r1, [r4, #25]
   15aa4:	4813      	ldr	r0, [pc, #76]	; (15af4 <print_conn_desc+0x78>)
   15aa6:	f006 fb47 	bl	1c138 <console_printf>
    print_addr(desc->peer_ota_addr.val);
   15aaa:	f104 001a 	add.w	r0, r4, #26
   15aae:	f7ff ff83 	bl	159b8 <print_addr>
    console_printf(" peer_id_addr_type=%d peer_id_addr=",
   15ab2:	7ae1      	ldrb	r1, [r4, #11]
   15ab4:	4810      	ldr	r0, [pc, #64]	; (15af8 <print_conn_desc+0x7c>)
   15ab6:	f006 fb3f 	bl	1c138 <console_printf>
    print_addr(desc->peer_id_addr.val);
   15aba:	f104 000c 	add.w	r0, r4, #12
   15abe:	f7ff ff7b 	bl	159b8 <print_addr>
                   desc->sec_state.key_size,
   15ac2:	7823      	ldrb	r3, [r4, #0]
   15ac4:	08da      	lsrs	r2, r3, #3
                   desc->sec_state.encrypted,
   15ac6:	f003 0101 	and.w	r1, r3, #1
                   desc->sec_state.authenticated,
   15aca:	f3c3 0040 	ubfx	r0, r3, #1, #1
                   desc->sec_state.bonded);
   15ace:	f3c3 0380 	ubfx	r3, r3, #2, #1
    console_printf(" conn_itvl=%d conn_latency=%d supervision_timeout=%d"
   15ad2:	9303      	str	r3, [sp, #12]
   15ad4:	9002      	str	r0, [sp, #8]
   15ad6:	9101      	str	r1, [sp, #4]
   15ad8:	9200      	str	r2, [sp, #0]
   15ada:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   15adc:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   15ade:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   15ae0:	4806      	ldr	r0, [pc, #24]	; (15afc <print_conn_desc+0x80>)
   15ae2:	f006 fb29 	bl	1c138 <console_printf>
}
   15ae6:	b004      	add	sp, #16
   15ae8:	bd10      	pop	{r4, pc}
   15aea:	bf00      	nop
   15aec:	00034ca0 	.word	0x00034ca0
   15af0:	00034cd0 	.word	0x00034cd0
   15af4:	00034cf4 	.word	0x00034cf4
   15af8:	00034d1c 	.word	0x00034d1c
   15afc:	00034d40 	.word	0x00034d40

00015b00 <print_svc>:

void
print_svc(struct btshell_svc *svc)
{
   15b00:	b510      	push	{r4, lr}
   15b02:	4604      	mov	r4, r0
    struct btshell_chr *chr;

    console_printf("    start=%d end=%d uuid=", svc->svc.start_handle,
   15b04:	88c2      	ldrh	r2, [r0, #6]
   15b06:	8881      	ldrh	r1, [r0, #4]
   15b08:	4808      	ldr	r0, [pc, #32]	; (15b2c <print_svc+0x2c>)
   15b0a:	f006 fb15 	bl	1c138 <console_printf>
                   svc->svc.end_handle);
    print_uuid(&svc->svc.uuid.u);
   15b0e:	f104 0008 	add.w	r0, r4, #8
   15b12:	f7ff ff65 	bl	159e0 <print_uuid>
    console_printf("\n");
   15b16:	4806      	ldr	r0, [pc, #24]	; (15b30 <print_svc+0x30>)
   15b18:	f006 fb0e 	bl	1c138 <console_printf>

    SLIST_FOREACH(chr, &svc->chrs, next) {
   15b1c:	69e4      	ldr	r4, [r4, #28]
   15b1e:	b124      	cbz	r4, 15b2a <print_svc+0x2a>
        print_chr(chr);
   15b20:	4620      	mov	r0, r4
   15b22:	f7ff ff7d 	bl	15a20 <print_chr>
    SLIST_FOREACH(chr, &svc->chrs, next) {
   15b26:	6824      	ldr	r4, [r4, #0]
   15b28:	e7f9      	b.n	15b1e <print_svc+0x1e>
    }
}
   15b2a:	bd10      	pop	{r4, pc}
   15b2c:	00034dac 	.word	0x00034dac
   15b30:	00034744 	.word	0x00034744

00015b34 <cmd_host_disable>:
    }
}

static int
cmd_host_disable(int argc, char **argv)
{
   15b34:	b510      	push	{r4, lr}
    static struct ble_hs_stop_listener listener;
    int rc;

    rc = ble_hs_stop(&listener, on_stop, NULL);
   15b36:	2200      	movs	r2, #0
   15b38:	4905      	ldr	r1, [pc, #20]	; (15b50 <cmd_host_disable+0x1c>)
   15b3a:	4806      	ldr	r0, [pc, #24]	; (15b54 <cmd_host_disable+0x20>)
   15b3c:	f01a fdaa 	bl	30694 <ble_hs_stop>
    if (rc) {
   15b40:	4604      	mov	r4, r0
   15b42:	b108      	cbz	r0, 15b48 <cmd_host_disable+0x14>
    }

    ble_gatts_reset();

    return 0;
}
   15b44:	4620      	mov	r0, r4
   15b46:	bd10      	pop	{r4, pc}
    ble_gatts_reset();
   15b48:	f017 ffcc 	bl	2dae4 <ble_gatts_reset>
    return 0;
   15b4c:	e7fa      	b.n	15b44 <cmd_host_disable+0x10>
   15b4e:	bf00      	nop
   15b50:	00015b59 	.word	0x00015b59
   15b54:	10001f80 	.word	0x10001f80

00015b58 <on_stop>:
{
   15b58:	b508      	push	{r3, lr}
    if (status == 0) {
   15b5a:	b918      	cbnz	r0, 15b64 <on_stop+0xc>
        console_printf("host stopped\n");
   15b5c:	4804      	ldr	r0, [pc, #16]	; (15b70 <on_stop+0x18>)
   15b5e:	f006 faeb 	bl	1c138 <console_printf>
}
   15b62:	bd08      	pop	{r3, pc}
   15b64:	4601      	mov	r1, r0
        console_printf("host failed to stop; rc=%d\n", status);
   15b66:	4803      	ldr	r0, [pc, #12]	; (15b74 <on_stop+0x1c>)
   15b68:	f006 fae6 	bl	1c138 <console_printf>
}
   15b6c:	e7f9      	b.n	15b62 <on_stop+0xa>
   15b6e:	bf00      	nop
   15b70:	00034dc8 	.word	0x00034dc8
   15b74:	00034dd8 	.word	0x00034dd8

00015b78 <cmd_host_enable>:
{
   15b78:	b508      	push	{r3, lr}
    rc = gatt_svr_init();
   15b7a:	f002 fcef 	bl	1855c <gatt_svr_init>
    assert(rc == 0);
   15b7e:	b918      	cbnz	r0, 15b88 <cmd_host_enable+0x10>
    ble_hs_sched_start();
   15b80:	f018 fafe 	bl	2e180 <ble_hs_sched_start>
}
   15b84:	2000      	movs	r0, #0
   15b86:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   15b88:	f7fe fdb4 	bl	146f4 <hal_debugger_connected>
   15b8c:	b100      	cbz	r0, 15b90 <cmd_host_enable+0x18>
   15b8e:	be01      	bkpt	0x0001
   15b90:	2300      	movs	r3, #0
   15b92:	461a      	mov	r2, r3
   15b94:	4619      	mov	r1, r3
   15b96:	4618      	mov	r0, r3
   15b98:	f003 f8ca 	bl	18d30 <__assert_func>

00015b9c <cmd_phy_read>:
{
   15b9c:	b510      	push	{r4, lr}
   15b9e:	b082      	sub	sp, #8
    rc = parse_arg_all(argc - 1, argv + 1);
   15ba0:	3104      	adds	r1, #4
   15ba2:	3801      	subs	r0, #1
   15ba4:	f002 fffa 	bl	18b9c <parse_arg_all>
   15ba8:	4604      	mov	r4, r0
   15baa:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   15bac:	b110      	cbz	r0, 15bb4 <cmd_phy_read+0x18>
}
   15bae:	4620      	mov	r0, r4
   15bb0:	b002      	add	sp, #8
   15bb2:	bd10      	pop	{r4, pc}
    conn = parse_arg_uint16("conn", &rc);
   15bb4:	4669      	mov	r1, sp
   15bb6:	4812      	ldr	r0, [pc, #72]	; (15c00 <cmd_phy_read+0x64>)
   15bb8:	f002 fe99 	bl	188ee <parse_arg_uint16>
    if (rc != 0) {
   15bbc:	9b00      	ldr	r3, [sp, #0]
   15bbe:	b99b      	cbnz	r3, 15be8 <cmd_phy_read+0x4c>
    rc = ble_gap_read_le_phy(conn, &tx_phy, &rx_phy);
   15bc0:	f10d 0206 	add.w	r2, sp, #6
   15bc4:	f10d 0107 	add.w	r1, sp, #7
   15bc8:	f013 fdb1 	bl	2972e <ble_gap_read_le_phy>
   15bcc:	4604      	mov	r4, r0
   15bce:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   15bd0:	b978      	cbnz	r0, 15bf2 <cmd_phy_read+0x56>
    console_printf("TX_PHY: %d\n", tx_phy);
   15bd2:	f89d 1007 	ldrb.w	r1, [sp, #7]
   15bd6:	480b      	ldr	r0, [pc, #44]	; (15c04 <cmd_phy_read+0x68>)
   15bd8:	f006 faae 	bl	1c138 <console_printf>
    console_printf("RX_PHY: %d\n", tx_phy);
   15bdc:	f89d 1007 	ldrb.w	r1, [sp, #7]
   15be0:	4809      	ldr	r0, [pc, #36]	; (15c08 <cmd_phy_read+0x6c>)
   15be2:	f006 faa9 	bl	1c138 <console_printf>
    return 0;
   15be6:	e7e2      	b.n	15bae <cmd_phy_read+0x12>
        console_printf("invalid 'conn' parameter\n");
   15be8:	4808      	ldr	r0, [pc, #32]	; (15c0c <cmd_phy_read+0x70>)
   15bea:	f006 faa5 	bl	1c138 <console_printf>
        return rc;
   15bee:	9c00      	ldr	r4, [sp, #0]
   15bf0:	e7dd      	b.n	15bae <cmd_phy_read+0x12>
        console_printf("Could not read PHY error: %d\n", rc);
   15bf2:	4601      	mov	r1, r0
   15bf4:	4806      	ldr	r0, [pc, #24]	; (15c10 <cmd_phy_read+0x74>)
   15bf6:	f006 fa9f 	bl	1c138 <console_printf>
        return rc;
   15bfa:	9c00      	ldr	r4, [sp, #0]
   15bfc:	e7d7      	b.n	15bae <cmd_phy_read+0x12>
   15bfe:	bf00      	nop
   15c00:	00034df4 	.word	0x00034df4
   15c04:	00034e38 	.word	0x00034e38
   15c08:	00034e44 	.word	0x00034e44
   15c0c:	00034dfc 	.word	0x00034dfc
   15c10:	00034e18 	.word	0x00034e18

00015c14 <cmd_phy_set_default>:
{
   15c14:	b510      	push	{r4, lr}
   15c16:	b082      	sub	sp, #8
    rc = parse_arg_all(argc - 1, argv + 1);
   15c18:	3104      	adds	r1, #4
   15c1a:	3801      	subs	r0, #1
   15c1c:	f002 ffbe 	bl	18b9c <parse_arg_all>
   15c20:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   15c22:	b108      	cbz	r0, 15c28 <cmd_phy_set_default+0x14>
}
   15c24:	b002      	add	sp, #8
   15c26:	bd10      	pop	{r4, pc}
    tx_phys_mask = parse_arg_uint8("tx_phys_mask", &rc);
   15c28:	a901      	add	r1, sp, #4
   15c2a:	480d      	ldr	r0, [pc, #52]	; (15c60 <cmd_phy_set_default+0x4c>)
   15c2c:	f002 fe57 	bl	188de <parse_arg_uint8>
   15c30:	4604      	mov	r4, r0
    if (rc != 0) {
   15c32:	9b01      	ldr	r3, [sp, #4]
   15c34:	b953      	cbnz	r3, 15c4c <cmd_phy_set_default+0x38>
    rx_phys_mask = parse_arg_uint8("rx_phys_mask", &rc);
   15c36:	a901      	add	r1, sp, #4
   15c38:	480a      	ldr	r0, [pc, #40]	; (15c64 <cmd_phy_set_default+0x50>)
   15c3a:	f002 fe50 	bl	188de <parse_arg_uint8>
   15c3e:	4601      	mov	r1, r0
    if (rc != 0) {
   15c40:	9b01      	ldr	r3, [sp, #4]
   15c42:	b943      	cbnz	r3, 15c56 <cmd_phy_set_default+0x42>
    return ble_gap_set_prefered_default_le_phy(tx_phys_mask, rx_phys_mask);
   15c44:	4620      	mov	r0, r4
   15c46:	f013 fd9c 	bl	29782 <ble_gap_set_prefered_default_le_phy>
   15c4a:	e7eb      	b.n	15c24 <cmd_phy_set_default+0x10>
        console_printf("invalid 'tx_phys_mask' parameter\n");
   15c4c:	4806      	ldr	r0, [pc, #24]	; (15c68 <cmd_phy_set_default+0x54>)
   15c4e:	f006 fa73 	bl	1c138 <console_printf>
        return rc;
   15c52:	9801      	ldr	r0, [sp, #4]
   15c54:	e7e6      	b.n	15c24 <cmd_phy_set_default+0x10>
        console_printf("invalid 'rx_phys_mask' parameter\n");
   15c56:	4805      	ldr	r0, [pc, #20]	; (15c6c <cmd_phy_set_default+0x58>)
   15c58:	f006 fa6e 	bl	1c138 <console_printf>
        return rc;
   15c5c:	9801      	ldr	r0, [sp, #4]
   15c5e:	e7e1      	b.n	15c24 <cmd_phy_set_default+0x10>
   15c60:	00034e50 	.word	0x00034e50
   15c64:	00034e84 	.word	0x00034e84
   15c68:	00034e60 	.word	0x00034e60
   15c6c:	00034e94 	.word	0x00034e94

00015c70 <cmd_phy_set>:
{
   15c70:	b570      	push	{r4, r5, r6, lr}
   15c72:	b082      	sub	sp, #8
    rc = parse_arg_all(argc - 1, argv + 1);
   15c74:	3104      	adds	r1, #4
   15c76:	3801      	subs	r0, #1
   15c78:	f002 ff90 	bl	18b9c <parse_arg_all>
   15c7c:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   15c7e:	b108      	cbz	r0, 15c84 <cmd_phy_set+0x14>
}
   15c80:	b002      	add	sp, #8
   15c82:	bd70      	pop	{r4, r5, r6, pc}
    conn = parse_arg_uint16("conn", &rc);
   15c84:	a901      	add	r1, sp, #4
   15c86:	481a      	ldr	r0, [pc, #104]	; (15cf0 <cmd_phy_set+0x80>)
   15c88:	f002 fe31 	bl	188ee <parse_arg_uint16>
   15c8c:	4604      	mov	r4, r0
    if (rc != 0) {
   15c8e:	9b01      	ldr	r3, [sp, #4]
   15c90:	b9d3      	cbnz	r3, 15cc8 <cmd_phy_set+0x58>
    tx_phys_mask = parse_arg_uint8("tx_phys_mask", &rc);
   15c92:	a901      	add	r1, sp, #4
   15c94:	4817      	ldr	r0, [pc, #92]	; (15cf4 <cmd_phy_set+0x84>)
   15c96:	f002 fe22 	bl	188de <parse_arg_uint8>
   15c9a:	4606      	mov	r6, r0
    if (rc != 0) {
   15c9c:	9b01      	ldr	r3, [sp, #4]
   15c9e:	b9c3      	cbnz	r3, 15cd2 <cmd_phy_set+0x62>
    rx_phys_mask = parse_arg_uint8("rx_phys_mask", &rc);
   15ca0:	a901      	add	r1, sp, #4
   15ca2:	4815      	ldr	r0, [pc, #84]	; (15cf8 <cmd_phy_set+0x88>)
   15ca4:	f002 fe1b 	bl	188de <parse_arg_uint8>
   15ca8:	4605      	mov	r5, r0
    if (rc != 0) {
   15caa:	9b01      	ldr	r3, [sp, #4]
   15cac:	b9b3      	cbnz	r3, 15cdc <cmd_phy_set+0x6c>
    phy_opts = parse_arg_uint16("phy_opts", &rc);
   15cae:	a901      	add	r1, sp, #4
   15cb0:	4812      	ldr	r0, [pc, #72]	; (15cfc <cmd_phy_set+0x8c>)
   15cb2:	f002 fe1c 	bl	188ee <parse_arg_uint16>
   15cb6:	4603      	mov	r3, r0
    if (rc != 0) {
   15cb8:	9a01      	ldr	r2, [sp, #4]
   15cba:	b9a2      	cbnz	r2, 15ce6 <cmd_phy_set+0x76>
    return ble_gap_set_prefered_le_phy(conn, tx_phys_mask, rx_phys_mask,
   15cbc:	462a      	mov	r2, r5
   15cbe:	4631      	mov	r1, r6
   15cc0:	4620      	mov	r0, r4
   15cc2:	f013 fd89 	bl	297d8 <ble_gap_set_prefered_le_phy>
   15cc6:	e7db      	b.n	15c80 <cmd_phy_set+0x10>
        console_printf("invalid 'conn' parameter\n");
   15cc8:	480d      	ldr	r0, [pc, #52]	; (15d00 <cmd_phy_set+0x90>)
   15cca:	f006 fa35 	bl	1c138 <console_printf>
        return rc;
   15cce:	9801      	ldr	r0, [sp, #4]
   15cd0:	e7d6      	b.n	15c80 <cmd_phy_set+0x10>
        console_printf("invalid 'tx_phys_mask' parameter\n");
   15cd2:	480c      	ldr	r0, [pc, #48]	; (15d04 <cmd_phy_set+0x94>)
   15cd4:	f006 fa30 	bl	1c138 <console_printf>
        return rc;
   15cd8:	9801      	ldr	r0, [sp, #4]
   15cda:	e7d1      	b.n	15c80 <cmd_phy_set+0x10>
        console_printf("invalid 'rx_phys_mask' parameter\n");
   15cdc:	480a      	ldr	r0, [pc, #40]	; (15d08 <cmd_phy_set+0x98>)
   15cde:	f006 fa2b 	bl	1c138 <console_printf>
        return rc;
   15ce2:	9801      	ldr	r0, [sp, #4]
   15ce4:	e7cc      	b.n	15c80 <cmd_phy_set+0x10>
        console_printf("invalid 'phy_opts' parameter\n");
   15ce6:	4809      	ldr	r0, [pc, #36]	; (15d0c <cmd_phy_set+0x9c>)
   15ce8:	f006 fa26 	bl	1c138 <console_printf>
        return rc;
   15cec:	9801      	ldr	r0, [sp, #4]
   15cee:	e7c7      	b.n	15c80 <cmd_phy_set+0x10>
   15cf0:	00034df4 	.word	0x00034df4
   15cf4:	00034e50 	.word	0x00034e50
   15cf8:	00034e84 	.word	0x00034e84
   15cfc:	00034eb8 	.word	0x00034eb8
   15d00:	00034dfc 	.word	0x00034dfc
   15d04:	00034e60 	.word	0x00034e60
   15d08:	00034e94 	.word	0x00034e94
   15d0c:	00034ec4 	.word	0x00034ec4

00015d10 <cmd_test_tx>:
{
   15d10:	b570      	push	{r4, r5, r6, lr}
   15d12:	b082      	sub	sp, #8
    rc = parse_arg_all(argc - 1, argv + 1);
   15d14:	3104      	adds	r1, #4
   15d16:	3801      	subs	r0, #1
   15d18:	f002 ff40 	bl	18b9c <parse_arg_all>
   15d1c:	4604      	mov	r4, r0
   15d1e:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   15d20:	b110      	cbz	r0, 15d28 <cmd_test_tx+0x18>
}
   15d22:	4620      	mov	r0, r4
   15d24:	b002      	add	sp, #8
   15d26:	bd70      	pop	{r4, r5, r6, pc}
    stop = parse_arg_uint8_dflt("stop", 0, &rc);
   15d28:	aa01      	add	r2, sp, #4
   15d2a:	2100      	movs	r1, #0
   15d2c:	4827      	ldr	r0, [pc, #156]	; (15dcc <cmd_test_tx+0xbc>)
   15d2e:	f002 fe0f 	bl	18950 <parse_arg_uint8_dflt>
    if (rc != 0) {
   15d32:	9c01      	ldr	r4, [sp, #4]
   15d34:	bb4c      	cbnz	r4, 15d8a <cmd_test_tx+0x7a>
    if (stop) {
   15d36:	bb68      	cbnz	r0, 15d94 <cmd_test_tx+0x84>
    conn = parse_arg_uint16("conn", &rc);
   15d38:	a901      	add	r1, sp, #4
   15d3a:	4825      	ldr	r0, [pc, #148]	; (15dd0 <cmd_test_tx+0xc0>)
   15d3c:	f002 fdd7 	bl	188ee <parse_arg_uint16>
   15d40:	4605      	mov	r5, r0
    if (rc != 0) {
   15d42:	9b01      	ldr	r3, [sp, #4]
   15d44:	bb4b      	cbnz	r3, 15d9a <cmd_test_tx+0x8a>
    len = parse_arg_uint16("length", &rc);
   15d46:	a901      	add	r1, sp, #4
   15d48:	4822      	ldr	r0, [pc, #136]	; (15dd4 <cmd_test_tx+0xc4>)
   15d4a:	f002 fdd0 	bl	188ee <parse_arg_uint16>
   15d4e:	4604      	mov	r4, r0
    if (rc != 0) {
   15d50:	9b01      	ldr	r3, [sp, #4]
   15d52:	bb3b      	cbnz	r3, 15da4 <cmd_test_tx+0x94>
    if ((len > 251) || (len < 4)) {
   15d54:	1f03      	subs	r3, r0, #4
   15d56:	b29b      	uxth	r3, r3
   15d58:	2bf7      	cmp	r3, #247	; 0xf7
   15d5a:	d828      	bhi.n	15dae <cmd_test_tx+0x9e>
    rate = parse_arg_uint16_dflt("rate", 1, &rc);
   15d5c:	aa01      	add	r2, sp, #4
   15d5e:	2101      	movs	r1, #1
   15d60:	481d      	ldr	r0, [pc, #116]	; (15dd8 <cmd_test_tx+0xc8>)
   15d62:	f002 fe07 	bl	18974 <parse_arg_uint16_dflt>
   15d66:	4606      	mov	r6, r0
    if (rc != 0) {
   15d68:	9b01      	ldr	r3, [sp, #4]
   15d6a:	bb23      	cbnz	r3, 15db6 <cmd_test_tx+0xa6>
    num = parse_arg_uint16_dflt("num", 1, &rc);
   15d6c:	aa01      	add	r2, sp, #4
   15d6e:	2101      	movs	r1, #1
   15d70:	481a      	ldr	r0, [pc, #104]	; (15ddc <cmd_test_tx+0xcc>)
   15d72:	f002 fdff 	bl	18974 <parse_arg_uint16_dflt>
   15d76:	4603      	mov	r3, r0
    if (rc != 0) {
   15d78:	9a01      	ldr	r2, [sp, #4]
   15d7a:	bb0a      	cbnz	r2, 15dc0 <cmd_test_tx+0xb0>
    rc = btshell_tx_start(conn, len, rate, num);
   15d7c:	4632      	mov	r2, r6
   15d7e:	4621      	mov	r1, r4
   15d80:	4628      	mov	r0, r5
   15d82:	f7ff fd11 	bl	157a8 <btshell_tx_start>
   15d86:	4604      	mov	r4, r0
    return rc;
   15d88:	e7cb      	b.n	15d22 <cmd_test_tx+0x12>
        console_printf("invalid 'stop' parameter\n");
   15d8a:	4815      	ldr	r0, [pc, #84]	; (15de0 <cmd_test_tx+0xd0>)
   15d8c:	f006 f9d4 	bl	1c138 <console_printf>
        return rc;
   15d90:	9c01      	ldr	r4, [sp, #4]
   15d92:	e7c6      	b.n	15d22 <cmd_test_tx+0x12>
        btshell_tx_stop();
   15d94:	f7ff fd3e 	bl	15814 <btshell_tx_stop>
        return 0;
   15d98:	e7c3      	b.n	15d22 <cmd_test_tx+0x12>
        console_printf("invalid 'conn' parameter\n");
   15d9a:	4812      	ldr	r0, [pc, #72]	; (15de4 <cmd_test_tx+0xd4>)
   15d9c:	f006 f9cc 	bl	1c138 <console_printf>
        return rc;
   15da0:	9c01      	ldr	r4, [sp, #4]
   15da2:	e7be      	b.n	15d22 <cmd_test_tx+0x12>
        console_printf("invalid 'length' parameter\n");
   15da4:	4810      	ldr	r0, [pc, #64]	; (15de8 <cmd_test_tx+0xd8>)
   15da6:	f006 f9c7 	bl	1c138 <console_printf>
        return rc;
   15daa:	9c01      	ldr	r4, [sp, #4]
   15dac:	e7b9      	b.n	15d22 <cmd_test_tx+0x12>
        console_printf("error: len must be between 4 and 251, inclusive");
   15dae:	480f      	ldr	r0, [pc, #60]	; (15dec <cmd_test_tx+0xdc>)
   15db0:	f006 f9c2 	bl	1c138 <console_printf>
   15db4:	e7d2      	b.n	15d5c <cmd_test_tx+0x4c>
        console_printf("invalid 'rate' parameter\n");
   15db6:	480e      	ldr	r0, [pc, #56]	; (15df0 <cmd_test_tx+0xe0>)
   15db8:	f006 f9be 	bl	1c138 <console_printf>
        return rc;
   15dbc:	9c01      	ldr	r4, [sp, #4]
   15dbe:	e7b0      	b.n	15d22 <cmd_test_tx+0x12>
        console_printf("invalid 'num' parameter\n");
   15dc0:	480c      	ldr	r0, [pc, #48]	; (15df4 <cmd_test_tx+0xe4>)
   15dc2:	f006 f9b9 	bl	1c138 <console_printf>
        return rc;
   15dc6:	9c01      	ldr	r4, [sp, #4]
   15dc8:	e7ab      	b.n	15d22 <cmd_test_tx+0x12>
   15dca:	bf00      	nop
   15dcc:	00034ee4 	.word	0x00034ee4
   15dd0:	00034df4 	.word	0x00034df4
   15dd4:	00034f08 	.word	0x00034f08
   15dd8:	00034f5c 	.word	0x00034f5c
   15ddc:	00034f80 	.word	0x00034f80
   15de0:	00034eec 	.word	0x00034eec
   15de4:	00034dfc 	.word	0x00034dfc
   15de8:	00034f10 	.word	0x00034f10
   15dec:	00034f2c 	.word	0x00034f2c
   15df0:	00034f64 	.word	0x00034f64
   15df4:	00034f84 	.word	0x00034f84

00015df8 <cmd_keystore_show>:
{
   15df8:	b510      	push	{r4, lr}
   15dfa:	b082      	sub	sp, #8
    rc = parse_arg_all(argc - 1, argv + 1);
   15dfc:	3104      	adds	r1, #4
   15dfe:	3801      	subs	r0, #1
   15e00:	f002 fecc 	bl	18b9c <parse_arg_all>
   15e04:	4604      	mov	r4, r0
   15e06:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   15e08:	b110      	cbz	r0, 15e10 <cmd_keystore_show+0x18>
}
   15e0a:	4620      	mov	r0, r4
   15e0c:	b002      	add	sp, #8
   15e0e:	bd10      	pop	{r4, pc}
    type = parse_arg_kv("type", cmd_keystore_entry_type, &rc);
   15e10:	aa01      	add	r2, sp, #4
   15e12:	4908      	ldr	r1, [pc, #32]	; (15e34 <cmd_keystore_show+0x3c>)
   15e14:	4808      	ldr	r0, [pc, #32]	; (15e38 <cmd_keystore_show+0x40>)
   15e16:	f002 fdf9 	bl	18a0c <parse_arg_kv>
    if (rc != 0) {
   15e1a:	9c01      	ldr	r4, [sp, #4]
   15e1c:	b924      	cbnz	r4, 15e28 <cmd_keystore_show+0x30>
    ble_store_iterate(type, &cmd_keystore_iterator, NULL);
   15e1e:	2200      	movs	r2, #0
   15e20:	4906      	ldr	r1, [pc, #24]	; (15e3c <cmd_keystore_show+0x44>)
   15e22:	f01b f9f5 	bl	31210 <ble_store_iterate>
    return 0;
   15e26:	e7f0      	b.n	15e0a <cmd_keystore_show+0x12>
        console_printf("invalid 'type' parameter\n");
   15e28:	4805      	ldr	r0, [pc, #20]	; (15e40 <cmd_keystore_show+0x48>)
   15e2a:	f006 f985 	bl	1c138 <console_printf>
        return rc;
   15e2e:	9c01      	ldr	r4, [sp, #4]
   15e30:	e7eb      	b.n	15e0a <cmd_keystore_show+0x12>
   15e32:	bf00      	nop
   15e34:	000377cc 	.word	0x000377cc
   15e38:	00034fa0 	.word	0x00034fa0
   15e3c:	00015e45 	.word	0x00015e45
   15e40:	00034fa8 	.word	0x00034fa8

00015e44 <cmd_keystore_iterator>:
                      void *cookie) {
   15e44:	b530      	push	{r4, r5, lr}
   15e46:	b083      	sub	sp, #12
   15e48:	460c      	mov	r4, r1
    switch (obj_type) {
   15e4a:	2802      	cmp	r0, #2
   15e4c:	dd1f      	ble.n	15e8e <cmd_keystore_iterator+0x4a>
   15e4e:	2803      	cmp	r0, #3
   15e50:	d11f      	bne.n	15e92 <cmd_keystore_iterator+0x4e>
            console_printf("Key: ");
   15e52:	483e      	ldr	r0, [pc, #248]	; (15f4c <cmd_keystore_iterator+0x108>)
   15e54:	f006 f970 	bl	1c138 <console_printf>
            console_printf("addr_type=%u ", val->cccd.peer_addr.type);
   15e58:	4625      	mov	r5, r4
   15e5a:	f815 1b01 	ldrb.w	r1, [r5], #1
   15e5e:	483c      	ldr	r0, [pc, #240]	; (15f50 <cmd_keystore_iterator+0x10c>)
   15e60:	f006 f96a 	bl	1c138 <console_printf>
            print_addr(val->cccd.peer_addr.val);
   15e64:	4628      	mov	r0, r5
   15e66:	f7ff fda7 	bl	159b8 <print_addr>
            console_printf("\n");
   15e6a:	483a      	ldr	r0, [pc, #232]	; (15f54 <cmd_keystore_iterator+0x110>)
   15e6c:	f006 f964 	bl	1c138 <console_printf>
            console_printf("    char_val_handle: %d\n", val->cccd.chr_val_handle);
   15e70:	8921      	ldrh	r1, [r4, #8]
   15e72:	4839      	ldr	r0, [pc, #228]	; (15f58 <cmd_keystore_iterator+0x114>)
   15e74:	f006 f960 	bl	1c138 <console_printf>
            console_printf("    flags:           0x%02x\n", val->cccd.flags);
   15e78:	8961      	ldrh	r1, [r4, #10]
   15e7a:	4838      	ldr	r0, [pc, #224]	; (15f5c <cmd_keystore_iterator+0x118>)
   15e7c:	f006 f95c 	bl	1c138 <console_printf>
            console_printf("    changed:         %d\n", val->cccd.value_changed);
   15e80:	7b21      	ldrb	r1, [r4, #12]
   15e82:	f001 0101 	and.w	r1, r1, #1
   15e86:	4836      	ldr	r0, [pc, #216]	; (15f60 <cmd_keystore_iterator+0x11c>)
   15e88:	f006 f956 	bl	1c138 <console_printf>
            break;
   15e8c:	e001      	b.n	15e92 <cmd_keystore_iterator+0x4e>
    switch (obj_type) {
   15e8e:	2800      	cmp	r0, #0
   15e90:	dc02      	bgt.n	15e98 <cmd_keystore_iterator+0x54>
}
   15e92:	2000      	movs	r0, #0
   15e94:	b003      	add	sp, #12
   15e96:	bd30      	pop	{r4, r5, pc}
            console_printf("Key: ");
   15e98:	482c      	ldr	r0, [pc, #176]	; (15f4c <cmd_keystore_iterator+0x108>)
   15e9a:	f006 f94d 	bl	1c138 <console_printf>
            if (ble_addr_cmp(&val->sec.peer_addr, BLE_ADDR_ANY) == 0) {
   15e9e:	2300      	movs	r3, #0
   15ea0:	9300      	str	r3, [sp, #0]
   15ea2:	f8cd 3003 	str.w	r3, [sp, #3]

static inline int ble_addr_cmp(const ble_addr_t *a, const ble_addr_t *b)
{
    int type_diff;

    type_diff = a->type - b->type;
   15ea6:	7825      	ldrb	r5, [r4, #0]
    if (type_diff != 0) {
   15ea8:	bb6d      	cbnz	r5, 15f06 <cmd_keystore_iterator+0xc2>
        return type_diff;
    }

    return memcmp(a->val, b->val, sizeof(a->val));
   15eaa:	2206      	movs	r2, #6
   15eac:	f10d 0101 	add.w	r1, sp, #1
   15eb0:	1c60      	adds	r0, r4, #1
   15eb2:	f004 fea9 	bl	1ac08 <memcmp>
   15eb6:	bb40      	cbnz	r0, 15f0a <cmd_keystore_iterator+0xc6>
                console_printf("ediv=%u ", val->sec.ediv);
   15eb8:	8921      	ldrh	r1, [r4, #8]
   15eba:	482a      	ldr	r0, [pc, #168]	; (15f64 <cmd_keystore_iterator+0x120>)
   15ebc:	f006 f93c 	bl	1c138 <console_printf>
                console_printf("ediv=%llu ", val->sec.rand_num);
   15ec0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   15ec4:	4828      	ldr	r0, [pc, #160]	; (15f68 <cmd_keystore_iterator+0x124>)
   15ec6:	f006 f937 	bl	1c138 <console_printf>
            console_printf("\n");
   15eca:	4822      	ldr	r0, [pc, #136]	; (15f54 <cmd_keystore_iterator+0x110>)
   15ecc:	f006 f934 	bl	1c138 <console_printf>
            if (val->sec.ltk_present) {
   15ed0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   15ed4:	f013 0f01 	tst.w	r3, #1
   15ed8:	d11f      	bne.n	15f1a <cmd_keystore_iterator+0xd6>
            if (val->sec.irk_present) {
   15eda:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   15ede:	f013 0f01 	tst.w	r3, #1
   15ee2:	d126      	bne.n	15f32 <cmd_keystore_iterator+0xee>
            if (val->sec.csrk_present) {
   15ee4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   15ee8:	f013 0f01 	tst.w	r3, #1
   15eec:	d0d1      	beq.n	15e92 <cmd_keystore_iterator+0x4e>
                console_printf("    CSRK: ");
   15eee:	481f      	ldr	r0, [pc, #124]	; (15f6c <cmd_keystore_iterator+0x128>)
   15ef0:	f006 f922 	bl	1c138 <console_printf>
                print_bytes(val->sec.csrk, 16);
   15ef4:	2110      	movs	r1, #16
   15ef6:	f104 003a 	add.w	r0, r4, #58	; 0x3a
   15efa:	f7ff fd31 	bl	15960 <print_bytes>
                console_printf("\n");
   15efe:	4815      	ldr	r0, [pc, #84]	; (15f54 <cmd_keystore_iterator+0x110>)
   15f00:	f006 f91a 	bl	1c138 <console_printf>
   15f04:	e7c5      	b.n	15e92 <cmd_keystore_iterator+0x4e>
        return type_diff;
   15f06:	4628      	mov	r0, r5
   15f08:	e7d5      	b.n	15eb6 <cmd_keystore_iterator+0x72>
                console_printf("addr_type=%u ", val->sec.peer_addr.type);
   15f0a:	4629      	mov	r1, r5
   15f0c:	4810      	ldr	r0, [pc, #64]	; (15f50 <cmd_keystore_iterator+0x10c>)
   15f0e:	f006 f913 	bl	1c138 <console_printf>
                print_addr(val->sec.peer_addr.val);
   15f12:	1c60      	adds	r0, r4, #1
   15f14:	f7ff fd50 	bl	159b8 <print_addr>
   15f18:	e7d7      	b.n	15eca <cmd_keystore_iterator+0x86>
                console_printf("    LTK: ");
   15f1a:	4815      	ldr	r0, [pc, #84]	; (15f70 <cmd_keystore_iterator+0x12c>)
   15f1c:	f006 f90c 	bl	1c138 <console_printf>
                print_bytes(val->sec.ltk, 16);
   15f20:	2110      	movs	r1, #16
   15f22:	f104 0018 	add.w	r0, r4, #24
   15f26:	f7ff fd1b 	bl	15960 <print_bytes>
                console_printf("\n");
   15f2a:	480a      	ldr	r0, [pc, #40]	; (15f54 <cmd_keystore_iterator+0x110>)
   15f2c:	f006 f904 	bl	1c138 <console_printf>
   15f30:	e7d3      	b.n	15eda <cmd_keystore_iterator+0x96>
                console_printf("    IRK: ");
   15f32:	4810      	ldr	r0, [pc, #64]	; (15f74 <cmd_keystore_iterator+0x130>)
   15f34:	f006 f900 	bl	1c138 <console_printf>
                print_bytes(val->sec.irk, 16);
   15f38:	2110      	movs	r1, #16
   15f3a:	f104 0029 	add.w	r0, r4, #41	; 0x29
   15f3e:	f7ff fd0f 	bl	15960 <print_bytes>
                console_printf("\n");
   15f42:	4804      	ldr	r0, [pc, #16]	; (15f54 <cmd_keystore_iterator+0x110>)
   15f44:	f006 f8f8 	bl	1c138 <console_printf>
   15f48:	e7cc      	b.n	15ee4 <cmd_keystore_iterator+0xa0>
   15f4a:	bf00      	nop
   15f4c:	00034fc4 	.word	0x00034fc4
   15f50:	00034fe4 	.word	0x00034fe4
   15f54:	00034744 	.word	0x00034744
   15f58:	00035018 	.word	0x00035018
   15f5c:	00035034 	.word	0x00035034
   15f60:	00035054 	.word	0x00035054
   15f64:	00034fcc 	.word	0x00034fcc
   15f68:	00034fd8 	.word	0x00034fd8
   15f6c:	0003500c 	.word	0x0003500c
   15f70:	00034ff4 	.word	0x00034ff4
   15f74:	00035000 	.word	0x00035000

00015f78 <parse_dev_addr>:
{
   15f78:	b5f0      	push	{r4, r5, r6, r7, lr}
   15f7a:	b08b      	sub	sp, #44	; 0x2c
   15f7c:	460f      	mov	r7, r1
   15f7e:	4616      	mov	r6, r2
    if (!prefix) {
   15f80:	b148      	cbz	r0, 15f96 <parse_dev_addr+0x1e>
   15f82:	4603      	mov	r3, r0
        written = snprintf(name, sizeof(name) - 1, "%s", prefix);
   15f84:	4a23      	ldr	r2, [pc, #140]	; (16014 <parse_dev_addr+0x9c>)
   15f86:	211f      	movs	r1, #31
   15f88:	a802      	add	r0, sp, #8
   15f8a:	f005 fa62 	bl	1b452 <snprintf>
        if (written >= sizeof(name) || written < 0) {
   15f8e:	281f      	cmp	r0, #31
   15f90:	d903      	bls.n	15f9a <parse_dev_addr+0x22>
            return EINVAL;
   15f92:	2416      	movs	r4, #22
   15f94:	e03a      	b.n	1600c <parse_dev_addr+0x94>
        name[0] = '\0';
   15f96:	f88d 0008 	strb.w	r0, [sp, #8]
    written = snprintf(name + written, sizeof(name) - written - 1, "%s", "addr");
   15f9a:	4b1f      	ldr	r3, [pc, #124]	; (16018 <parse_dev_addr+0xa0>)
   15f9c:	4a1d      	ldr	r2, [pc, #116]	; (16014 <parse_dev_addr+0x9c>)
   15f9e:	f1c0 011f 	rsb	r1, r0, #31
   15fa2:	ac02      	add	r4, sp, #8
   15fa4:	4420      	add	r0, r4
   15fa6:	f005 fa54 	bl	1b452 <snprintf>
   15faa:	4605      	mov	r5, r0
    if (written >= sizeof(name) || written < 0) {
   15fac:	281f      	cmp	r0, #31
   15fae:	d82c      	bhi.n	1600a <parse_dev_addr+0x92>
    rc = parse_arg_addr(name, addr);
   15fb0:	4631      	mov	r1, r6
   15fb2:	a802      	add	r0, sp, #8
   15fb4:	f002 fd88 	bl	18ac8 <parse_arg_addr>
   15fb8:	4604      	mov	r4, r0
   15fba:	9001      	str	r0, [sp, #4]
    if (rc == ENOENT) {
   15fbc:	2802      	cmp	r0, #2
   15fbe:	d025      	beq.n	1600c <parse_dev_addr+0x94>
    } else if (rc == EAGAIN) {
   15fc0:	280b      	cmp	r0, #11
   15fc2:	d00e      	beq.n	15fe2 <parse_dev_addr+0x6a>
    } else if (rc != 0) {
   15fc4:	bb10      	cbnz	r0, 1600c <parse_dev_addr+0x94>
        written = snprintf(name + written, sizeof(name) - written, "%s", "_type");
   15fc6:	4b15      	ldr	r3, [pc, #84]	; (1601c <parse_dev_addr+0xa4>)
   15fc8:	4a12      	ldr	r2, [pc, #72]	; (16014 <parse_dev_addr+0x9c>)
   15fca:	f1c5 0120 	rsb	r1, r5, #32
   15fce:	a802      	add	r0, sp, #8
   15fd0:	4428      	add	r0, r5
   15fd2:	f005 fa3e 	bl	1b452 <snprintf>
        if (parse_arg_extract(name)) {
   15fd6:	a802      	add	r0, sp, #8
   15fd8:	f002 fbc4 	bl	18764 <parse_arg_extract>
   15fdc:	b1b0      	cbz	r0, 1600c <parse_dev_addr+0x94>
            return E2BIG;
   15fde:	2407      	movs	r4, #7
   15fe0:	e014      	b.n	1600c <parse_dev_addr+0x94>
        written = snprintf(name + written, sizeof(name) - written - 1, "%s", "_type");
   15fe2:	4b0e      	ldr	r3, [pc, #56]	; (1601c <parse_dev_addr+0xa4>)
   15fe4:	4a0b      	ldr	r2, [pc, #44]	; (16014 <parse_dev_addr+0x9c>)
   15fe6:	f1c5 011f 	rsb	r1, r5, #31
   15fea:	a802      	add	r0, sp, #8
   15fec:	4428      	add	r0, r5
   15fee:	f005 fa30 	bl	1b452 <snprintf>
        addr->type = parse_arg_kv(name, addr_types, &rc);
   15ff2:	aa01      	add	r2, sp, #4
   15ff4:	4639      	mov	r1, r7
   15ff6:	a802      	add	r0, sp, #8
   15ff8:	f002 fd08 	bl	18a0c <parse_arg_kv>
   15ffc:	7030      	strb	r0, [r6, #0]
        if (rc == ENOENT) {
   15ffe:	9c01      	ldr	r4, [sp, #4]
   16000:	2c02      	cmp	r4, #2
   16002:	d103      	bne.n	1600c <parse_dev_addr+0x94>
            addr->type = BLE_ADDR_PUBLIC;
   16004:	2400      	movs	r4, #0
   16006:	7034      	strb	r4, [r6, #0]
   16008:	e000      	b.n	1600c <parse_dev_addr+0x94>
        return EINVAL;
   1600a:	2416      	movs	r4, #22
}
   1600c:	4620      	mov	r0, r4
   1600e:	b00b      	add	sp, #44	; 0x2c
   16010:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16012:	bf00      	nop
   16014:	00034c40 	.word	0x00034c40
   16018:	00035070 	.word	0x00035070
   1601c:	000359c0 	.word	0x000359c0

00016020 <cmd_keystore_parse_keydata>:
{
   16020:	b530      	push	{r4, r5, lr}
   16022:	b083      	sub	sp, #12
   16024:	4614      	mov	r4, r2
   16026:	461d      	mov	r5, r3
    memset(out, 0, sizeof(*out));
   16028:	2220      	movs	r2, #32
   1602a:	2100      	movs	r1, #0
   1602c:	4620      	mov	r0, r4
   1602e:	f004 fe34 	bl	1ac9a <memset>
    *obj_type = parse_arg_kv("type", cmd_keystore_entry_type, &rc);
   16032:	aa01      	add	r2, sp, #4
   16034:	491b      	ldr	r1, [pc, #108]	; (160a4 <cmd_keystore_parse_keydata+0x84>)
   16036:	481c      	ldr	r0, [pc, #112]	; (160a8 <cmd_keystore_parse_keydata+0x88>)
   16038:	f002 fce8 	bl	18a0c <parse_arg_kv>
   1603c:	6028      	str	r0, [r5, #0]
    if (rc != 0) {
   1603e:	9b01      	ldr	r3, [sp, #4]
   16040:	b92b      	cbnz	r3, 1604e <cmd_keystore_parse_keydata+0x2e>
    switch (*obj_type) {
   16042:	3801      	subs	r0, #1
   16044:	2801      	cmp	r0, #1
   16046:	d907      	bls.n	16058 <cmd_keystore_parse_keydata+0x38>
        return EINVAL;
   16048:	2016      	movs	r0, #22
}
   1604a:	b003      	add	sp, #12
   1604c:	bd30      	pop	{r4, r5, pc}
        console_printf("invalid 'type' parameter\n");
   1604e:	4817      	ldr	r0, [pc, #92]	; (160ac <cmd_keystore_parse_keydata+0x8c>)
   16050:	f006 f872 	bl	1c138 <console_printf>
        return rc;
   16054:	9801      	ldr	r0, [sp, #4]
   16056:	e7f8      	b.n	1604a <cmd_keystore_parse_keydata+0x2a>
        rc = parse_dev_addr(NULL, cmd_addr_type, &out->sec.peer_addr);
   16058:	4622      	mov	r2, r4
   1605a:	4915      	ldr	r1, [pc, #84]	; (160b0 <cmd_keystore_parse_keydata+0x90>)
   1605c:	2000      	movs	r0, #0
   1605e:	f7ff ff8b 	bl	15f78 <parse_dev_addr>
   16062:	9001      	str	r0, [sp, #4]
        if (rc != 0) {
   16064:	b9a0      	cbnz	r0, 16090 <cmd_keystore_parse_keydata+0x70>
        out->sec.ediv = parse_arg_uint16("ediv", &rc);
   16066:	a901      	add	r1, sp, #4
   16068:	4812      	ldr	r0, [pc, #72]	; (160b4 <cmd_keystore_parse_keydata+0x94>)
   1606a:	f002 fc40 	bl	188ee <parse_arg_uint16>
   1606e:	8120      	strh	r0, [r4, #8]
        if (rc != 0) {
   16070:	9b01      	ldr	r3, [sp, #4]
   16072:	b993      	cbnz	r3, 1609a <cmd_keystore_parse_keydata+0x7a>
        out->sec.rand_num = parse_arg_uint64("rand", &rc);
   16074:	a901      	add	r1, sp, #4
   16076:	4810      	ldr	r0, [pc, #64]	; (160b8 <cmd_keystore_parse_keydata+0x98>)
   16078:	f002 fc5a 	bl	18930 <parse_arg_uint64>
   1607c:	e9c4 0104 	strd	r0, r1, [r4, #16]
        if (rc != 0) {
   16080:	9801      	ldr	r0, [sp, #4]
   16082:	2800      	cmp	r0, #0
   16084:	d0e1      	beq.n	1604a <cmd_keystore_parse_keydata+0x2a>
            console_printf("invalid 'rand' parameter\n");
   16086:	480d      	ldr	r0, [pc, #52]	; (160bc <cmd_keystore_parse_keydata+0x9c>)
   16088:	f006 f856 	bl	1c138 <console_printf>
            return rc;
   1608c:	9801      	ldr	r0, [sp, #4]
   1608e:	e7dc      	b.n	1604a <cmd_keystore_parse_keydata+0x2a>
            console_printf("invalid 'addr' parameter\n");
   16090:	480b      	ldr	r0, [pc, #44]	; (160c0 <cmd_keystore_parse_keydata+0xa0>)
   16092:	f006 f851 	bl	1c138 <console_printf>
            return rc;
   16096:	9801      	ldr	r0, [sp, #4]
   16098:	e7d7      	b.n	1604a <cmd_keystore_parse_keydata+0x2a>
            console_printf("invalid 'ediv' parameter\n");
   1609a:	480a      	ldr	r0, [pc, #40]	; (160c4 <cmd_keystore_parse_keydata+0xa4>)
   1609c:	f006 f84c 	bl	1c138 <console_printf>
            return rc;
   160a0:	9801      	ldr	r0, [sp, #4]
   160a2:	e7d2      	b.n	1604a <cmd_keystore_parse_keydata+0x2a>
   160a4:	000377cc 	.word	0x000377cc
   160a8:	00034fa0 	.word	0x00034fa0
   160ac:	00034fa8 	.word	0x00034fa8
   160b0:	0003774c 	.word	0x0003774c
   160b4:	00035094 	.word	0x00035094
   160b8:	000350b8 	.word	0x000350b8
   160bc:	000350c0 	.word	0x000350c0
   160c0:	00035078 	.word	0x00035078
   160c4:	0003509c 	.word	0x0003509c

000160c8 <cmd_keystore_del>:
{
   160c8:	b530      	push	{r4, r5, lr}
   160ca:	b08b      	sub	sp, #44	; 0x2c
   160cc:	4604      	mov	r4, r0
   160ce:	460d      	mov	r5, r1
    rc = parse_arg_all(argc - 1, argv + 1);
   160d0:	3104      	adds	r1, #4
   160d2:	3801      	subs	r0, #1
   160d4:	f002 fd62 	bl	18b9c <parse_arg_all>
    if (rc != 0) {
   160d8:	4603      	mov	r3, r0
   160da:	b110      	cbz	r0, 160e2 <cmd_keystore_del+0x1a>
}
   160dc:	4618      	mov	r0, r3
   160de:	b00b      	add	sp, #44	; 0x2c
   160e0:	bd30      	pop	{r4, r5, pc}
    rc = cmd_keystore_parse_keydata(argc, argv, &key, &obj_type);
   160e2:	ab01      	add	r3, sp, #4
   160e4:	aa02      	add	r2, sp, #8
   160e6:	4629      	mov	r1, r5
   160e8:	4620      	mov	r0, r4
   160ea:	f7ff ff99 	bl	16020 <cmd_keystore_parse_keydata>
    if (rc) {
   160ee:	4603      	mov	r3, r0
   160f0:	2800      	cmp	r0, #0
   160f2:	d1f3      	bne.n	160dc <cmd_keystore_del+0x14>
    rc = ble_store_delete(obj_type, &key);
   160f4:	a902      	add	r1, sp, #8
   160f6:	9801      	ldr	r0, [sp, #4]
   160f8:	f01a ffdc 	bl	310b4 <ble_store_delete>
   160fc:	4603      	mov	r3, r0
    return rc;
   160fe:	e7ed      	b.n	160dc <cmd_keystore_del+0x14>

00016100 <cmd_keystore_parse_valuedata>:
{
   16100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16104:	4615      	mov	r5, r2
   16106:	461e      	mov	r6, r3
   16108:	9c06      	ldr	r4, [sp, #24]
    memset(out, 0, sizeof(*out));
   1610a:	2250      	movs	r2, #80	; 0x50
   1610c:	2100      	movs	r1, #0
   1610e:	4620      	mov	r0, r4
   16110:	f004 fdc3 	bl	1ac9a <memset>
    switch (obj_type) {
   16114:	3d01      	subs	r5, #1
   16116:	2d01      	cmp	r5, #1
   16118:	d865      	bhi.n	161e6 <cmd_keystore_parse_valuedata+0xe6>
            rc = parse_arg_byte_stream_exact_length("ltk", out->sec.ltk, 16);
   1611a:	f104 0718 	add.w	r7, r4, #24
   1611e:	2210      	movs	r2, #16
   16120:	4639      	mov	r1, r7
   16122:	4832      	ldr	r0, [pc, #200]	; (161ec <cmd_keystore_parse_valuedata+0xec>)
   16124:	f002 fcb2 	bl	18a8c <parse_arg_byte_stream_exact_length>
            if (rc == 0) {
   16128:	4605      	mov	r5, r0
   1612a:	b348      	cbz	r0, 16180 <cmd_keystore_parse_valuedata+0x80>
            } else if (rc != ENOENT) {
   1612c:	2802      	cmp	r0, #2
   1612e:	d133      	bne.n	16198 <cmd_keystore_parse_valuedata+0x98>
    int valcnt = 0;
   16130:	2700      	movs	r7, #0
            rc = parse_arg_byte_stream_exact_length("irk", out->sec.irk, 16);
   16132:	f104 0829 	add.w	r8, r4, #41	; 0x29
   16136:	2210      	movs	r2, #16
   16138:	4641      	mov	r1, r8
   1613a:	482d      	ldr	r0, [pc, #180]	; (161f0 <cmd_keystore_parse_valuedata+0xf0>)
   1613c:	f002 fca6 	bl	18a8c <parse_arg_byte_stream_exact_length>
            if (rc == 0) {
   16140:	4605      	mov	r5, r0
   16142:	b368      	cbz	r0, 161a0 <cmd_keystore_parse_valuedata+0xa0>
            } else if (rc != ENOENT) {
   16144:	2802      	cmp	r0, #2
   16146:	d137      	bne.n	161b8 <cmd_keystore_parse_valuedata+0xb8>
            rc = parse_arg_byte_stream_exact_length("csrk", out->sec.csrk, 16);
   16148:	f104 083a 	add.w	r8, r4, #58	; 0x3a
   1614c:	2210      	movs	r2, #16
   1614e:	4641      	mov	r1, r8
   16150:	4828      	ldr	r0, [pc, #160]	; (161f4 <cmd_keystore_parse_valuedata+0xf4>)
   16152:	f002 fc9b 	bl	18a8c <parse_arg_byte_stream_exact_length>
            if (rc == 0) {
   16156:	4605      	mov	r5, r0
   16158:	b390      	cbz	r0, 161c0 <cmd_keystore_parse_valuedata+0xc0>
            } else if (rc != ENOENT) {
   1615a:	2802      	cmp	r0, #2
   1615c:	d13c      	bne.n	161d8 <cmd_keystore_parse_valuedata+0xd8>
            out->sec.peer_addr = key->sec.peer_addr;
   1615e:	e896 0003 	ldmia.w	r6, {r0, r1}
   16162:	6020      	str	r0, [r4, #0]
   16164:	80a1      	strh	r1, [r4, #4]
   16166:	0c09      	lsrs	r1, r1, #16
   16168:	71a1      	strb	r1, [r4, #6]
            out->sec.ediv = key->sec.ediv;
   1616a:	8933      	ldrh	r3, [r6, #8]
   1616c:	8123      	strh	r3, [r4, #8]
            out->sec.rand_num = key->sec.rand_num;
   1616e:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
   16172:	e9c4 2304 	strd	r2, r3, [r4, #16]
    if (valcnt) {
   16176:	b39f      	cbz	r7, 161e0 <cmd_keystore_parse_valuedata+0xe0>
        return 0;
   16178:	2500      	movs	r5, #0
}
   1617a:	4628      	mov	r0, r5
   1617c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                out->sec.ltk_present = 1;
   16180:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   16184:	f043 0301 	orr.w	r3, r3, #1
   16188:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
                swap_in_place(out->sec.ltk, 16);
   1618c:	2110      	movs	r1, #16
   1618e:	4638      	mov	r0, r7
   16190:	f002 fe84 	bl	18e9c <swap_in_place>
                valcnt++;
   16194:	2701      	movs	r7, #1
   16196:	e7cc      	b.n	16132 <cmd_keystore_parse_valuedata+0x32>
                console_printf("invalid 'ltk' parameter\n");
   16198:	4817      	ldr	r0, [pc, #92]	; (161f8 <cmd_keystore_parse_valuedata+0xf8>)
   1619a:	f005 ffcd 	bl	1c138 <console_printf>
                return rc;
   1619e:	e7ec      	b.n	1617a <cmd_keystore_parse_valuedata+0x7a>
                out->sec.irk_present = 1;
   161a0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   161a4:	f043 0301 	orr.w	r3, r3, #1
   161a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
                swap_in_place(out->sec.irk, 16);
   161ac:	2110      	movs	r1, #16
   161ae:	4640      	mov	r0, r8
   161b0:	f002 fe74 	bl	18e9c <swap_in_place>
                valcnt++;
   161b4:	3701      	adds	r7, #1
   161b6:	e7c7      	b.n	16148 <cmd_keystore_parse_valuedata+0x48>
                console_printf("invalid 'irk' parameter\n");
   161b8:	4810      	ldr	r0, [pc, #64]	; (161fc <cmd_keystore_parse_valuedata+0xfc>)
   161ba:	f005 ffbd 	bl	1c138 <console_printf>
                return rc;
   161be:	e7dc      	b.n	1617a <cmd_keystore_parse_valuedata+0x7a>
                out->sec.csrk_present = 1;
   161c0:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   161c4:	f043 0301 	orr.w	r3, r3, #1
   161c8:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
                swap_in_place(out->sec.csrk, 16);
   161cc:	2110      	movs	r1, #16
   161ce:	4640      	mov	r0, r8
   161d0:	f002 fe64 	bl	18e9c <swap_in_place>
                valcnt++;
   161d4:	3701      	adds	r7, #1
   161d6:	e7c2      	b.n	1615e <cmd_keystore_parse_valuedata+0x5e>
                console_printf("invalid 'csrk' parameter\n");
   161d8:	4809      	ldr	r0, [pc, #36]	; (16200 <cmd_keystore_parse_valuedata+0x100>)
   161da:	f005 ffad 	bl	1c138 <console_printf>
                return rc;
   161de:	e7cc      	b.n	1617a <cmd_keystore_parse_valuedata+0x7a>
    return -1;
   161e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   161e4:	e7c9      	b.n	1617a <cmd_keystore_parse_valuedata+0x7a>
   161e6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   161ea:	e7c6      	b.n	1617a <cmd_keystore_parse_valuedata+0x7a>
   161ec:	000350dc 	.word	0x000350dc
   161f0:	000350fc 	.word	0x000350fc
   161f4:	0003511c 	.word	0x0003511c
   161f8:	000350e0 	.word	0x000350e0
   161fc:	00035100 	.word	0x00035100
   16200:	00035124 	.word	0x00035124

00016204 <cmd_keystore_add>:
{
   16204:	b530      	push	{r4, r5, lr}
   16206:	b0a1      	sub	sp, #132	; 0x84
   16208:	4604      	mov	r4, r0
   1620a:	460d      	mov	r5, r1
    rc = parse_arg_all(argc - 1, argv + 1);
   1620c:	3104      	adds	r1, #4
   1620e:	3801      	subs	r0, #1
   16210:	f002 fcc4 	bl	18b9c <parse_arg_all>
    if (rc != 0) {
   16214:	4603      	mov	r3, r0
   16216:	b110      	cbz	r0, 1621e <cmd_keystore_add+0x1a>
}
   16218:	4618      	mov	r0, r3
   1621a:	b021      	add	sp, #132	; 0x84
   1621c:	bd30      	pop	{r4, r5, pc}
    rc = cmd_keystore_parse_keydata(argc, argv, &key, &obj_type);
   1621e:	ab03      	add	r3, sp, #12
   16220:	aa18      	add	r2, sp, #96	; 0x60
   16222:	4629      	mov	r1, r5
   16224:	4620      	mov	r0, r4
   16226:	f7ff fefb 	bl	16020 <cmd_keystore_parse_keydata>
    if (rc) {
   1622a:	4603      	mov	r3, r0
   1622c:	2800      	cmp	r0, #0
   1622e:	d1f3      	bne.n	16218 <cmd_keystore_add+0x14>
    rc = cmd_keystore_parse_valuedata(argc, argv, obj_type, &key, &value);
   16230:	ab04      	add	r3, sp, #16
   16232:	9300      	str	r3, [sp, #0]
   16234:	ab18      	add	r3, sp, #96	; 0x60
   16236:	9a03      	ldr	r2, [sp, #12]
   16238:	4629      	mov	r1, r5
   1623a:	4620      	mov	r0, r4
   1623c:	f7ff ff60 	bl	16100 <cmd_keystore_parse_valuedata>
    if (rc) {
   16240:	4603      	mov	r3, r0
   16242:	2800      	cmp	r0, #0
   16244:	d1e8      	bne.n	16218 <cmd_keystore_add+0x14>
    switch(obj_type) {
   16246:	9803      	ldr	r0, [sp, #12]
   16248:	2802      	cmp	r0, #2
   1624a:	d008      	beq.n	1625e <cmd_keystore_add+0x5a>
   1624c:	2803      	cmp	r0, #3
   1624e:	d010      	beq.n	16272 <cmd_keystore_add+0x6e>
   16250:	2801      	cmp	r0, #1
   16252:	d009      	beq.n	16268 <cmd_keystore_add+0x64>
            rc = ble_store_write(obj_type, &value);
   16254:	a904      	add	r1, sp, #16
   16256:	f01a ff4d 	bl	310f4 <ble_store_write>
   1625a:	4603      	mov	r3, r0
   1625c:	e7dc      	b.n	16218 <cmd_keystore_add+0x14>
            rc = ble_store_write_peer_sec(&value.sec);
   1625e:	a804      	add	r0, sp, #16
   16260:	f01a ff79 	bl	31156 <ble_store_write_peer_sec>
   16264:	4603      	mov	r3, r0
            break;
   16266:	e7d7      	b.n	16218 <cmd_keystore_add+0x14>
            rc = ble_store_write_our_sec(&value.sec);
   16268:	a804      	add	r0, sp, #16
   1626a:	f01a ff67 	bl	3113c <ble_store_write_our_sec>
   1626e:	4603      	mov	r3, r0
            break;
   16270:	e7d2      	b.n	16218 <cmd_keystore_add+0x14>
            rc = ble_store_write_cccd(&value.cccd);
   16272:	a804      	add	r0, sp, #16
   16274:	f01a ff9f 	bl	311b6 <ble_store_write_cccd>
   16278:	4603      	mov	r3, r0
            break;
   1627a:	e7cd      	b.n	16218 <cmd_keystore_add+0x14>

0001627c <cmd_conn_datalen>:
{
   1627c:	b530      	push	{r4, r5, lr}
   1627e:	b083      	sub	sp, #12
    rc = parse_arg_all(argc - 1, argv + 1);
   16280:	3104      	adds	r1, #4
   16282:	3801      	subs	r0, #1
   16284:	f002 fc8a 	bl	18b9c <parse_arg_all>
   16288:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   1628a:	b108      	cbz	r0, 16290 <cmd_conn_datalen+0x14>
}
   1628c:	b003      	add	sp, #12
   1628e:	bd30      	pop	{r4, r5, pc}
    conn_handle = parse_arg_uint16("conn", &rc);
   16290:	a901      	add	r1, sp, #4
   16292:	4818      	ldr	r0, [pc, #96]	; (162f4 <cmd_conn_datalen+0x78>)
   16294:	f002 fb2b 	bl	188ee <parse_arg_uint16>
   16298:	4604      	mov	r4, r0
    if (rc != 0) {
   1629a:	9b01      	ldr	r3, [sp, #4]
   1629c:	b9d3      	cbnz	r3, 162d4 <cmd_conn_datalen+0x58>
    tx_octets = parse_arg_uint16("octets", &rc);
   1629e:	a901      	add	r1, sp, #4
   162a0:	4815      	ldr	r0, [pc, #84]	; (162f8 <cmd_conn_datalen+0x7c>)
   162a2:	f002 fb24 	bl	188ee <parse_arg_uint16>
   162a6:	4605      	mov	r5, r0
    if (rc != 0) {
   162a8:	9b01      	ldr	r3, [sp, #4]
   162aa:	b9c3      	cbnz	r3, 162de <cmd_conn_datalen+0x62>
    tx_time = parse_arg_uint16("time", &rc);
   162ac:	a901      	add	r1, sp, #4
   162ae:	4813      	ldr	r0, [pc, #76]	; (162fc <cmd_conn_datalen+0x80>)
   162b0:	f002 fb1d 	bl	188ee <parse_arg_uint16>
   162b4:	4602      	mov	r2, r0
    if (rc != 0) {
   162b6:	9b01      	ldr	r3, [sp, #4]
   162b8:	b9b3      	cbnz	r3, 162e8 <cmd_conn_datalen+0x6c>
    rc = btshell_datalen(conn_handle, tx_octets, tx_time);
   162ba:	4629      	mov	r1, r5
   162bc:	4620      	mov	r0, r4
   162be:	f7ff fa6f 	bl	157a0 <btshell_datalen>
   162c2:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   162c4:	2800      	cmp	r0, #0
   162c6:	d0e1      	beq.n	1628c <cmd_conn_datalen+0x10>
        console_printf("error setting data length; rc=%d\n", rc);
   162c8:	4601      	mov	r1, r0
   162ca:	480d      	ldr	r0, [pc, #52]	; (16300 <cmd_conn_datalen+0x84>)
   162cc:	f005 ff34 	bl	1c138 <console_printf>
        return rc;
   162d0:	9801      	ldr	r0, [sp, #4]
   162d2:	e7db      	b.n	1628c <cmd_conn_datalen+0x10>
        console_printf("invalid 'conn' parameter\n");
   162d4:	480b      	ldr	r0, [pc, #44]	; (16304 <cmd_conn_datalen+0x88>)
   162d6:	f005 ff2f 	bl	1c138 <console_printf>
        return rc;
   162da:	9801      	ldr	r0, [sp, #4]
   162dc:	e7d6      	b.n	1628c <cmd_conn_datalen+0x10>
        console_printf("invalid 'octets' parameter\n");
   162de:	480a      	ldr	r0, [pc, #40]	; (16308 <cmd_conn_datalen+0x8c>)
   162e0:	f005 ff2a 	bl	1c138 <console_printf>
        return rc;
   162e4:	9801      	ldr	r0, [sp, #4]
   162e6:	e7d1      	b.n	1628c <cmd_conn_datalen+0x10>
        console_printf("invalid 'time' parameter\n");
   162e8:	4808      	ldr	r0, [pc, #32]	; (1630c <cmd_conn_datalen+0x90>)
   162ea:	f005 ff25 	bl	1c138 <console_printf>
        return rc;
   162ee:	9801      	ldr	r0, [sp, #4]
   162f0:	e7cc      	b.n	1628c <cmd_conn_datalen+0x10>
   162f2:	bf00      	nop
   162f4:	00034df4 	.word	0x00034df4
   162f8:	000368b0 	.word	0x000368b0
   162fc:	0003515c 	.word	0x0003515c
   16300:	00035180 	.word	0x00035180
   16304:	00034dfc 	.word	0x00034dfc
   16308:	00035140 	.word	0x00035140
   1630c:	00035164 	.word	0x00035164

00016310 <cmd_conn_update_params>:
{
   16310:	b510      	push	{r4, lr}
   16312:	b084      	sub	sp, #16
    rc = parse_arg_all(argc - 1, argv + 1);
   16314:	3104      	adds	r1, #4
   16316:	3801      	subs	r0, #1
   16318:	f002 fc40 	bl	18b9c <parse_arg_all>
   1631c:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   1631e:	b108      	cbz	r0, 16324 <cmd_conn_update_params+0x14>
}
   16320:	b004      	add	sp, #16
   16322:	bd10      	pop	{r4, pc}
    conn_handle = parse_arg_uint16("conn", &rc);
   16324:	4669      	mov	r1, sp
   16326:	483f      	ldr	r0, [pc, #252]	; (16424 <cmd_conn_update_params+0x114>)
   16328:	f002 fae1 	bl	188ee <parse_arg_uint16>
   1632c:	4604      	mov	r4, r0
    if (rc != 0) {
   1632e:	9b00      	ldr	r3, [sp, #0]
   16330:	2b00      	cmp	r3, #0
   16332:	d153      	bne.n	163dc <cmd_conn_update_params+0xcc>
    params.itvl_min = parse_arg_time_dflt("interval_min", 1250,
   16334:	466b      	mov	r3, sp
   16336:	2218      	movs	r2, #24
   16338:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1633c:	483a      	ldr	r0, [pc, #232]	; (16428 <cmd_conn_update_params+0x118>)
   1633e:	f002 fb2b 	bl	18998 <parse_arg_time_dflt>
   16342:	f8ad 0004 	strh.w	r0, [sp, #4]
    if (rc != 0) {
   16346:	9b00      	ldr	r3, [sp, #0]
   16348:	2b00      	cmp	r3, #0
   1634a:	d14c      	bne.n	163e6 <cmd_conn_update_params+0xd6>
    params.itvl_max = parse_arg_time_dflt("interval_max", 1250,
   1634c:	466b      	mov	r3, sp
   1634e:	2228      	movs	r2, #40	; 0x28
   16350:	f240 41e2 	movw	r1, #1250	; 0x4e2
   16354:	4835      	ldr	r0, [pc, #212]	; (1642c <cmd_conn_update_params+0x11c>)
   16356:	f002 fb1f 	bl	18998 <parse_arg_time_dflt>
   1635a:	f8ad 0006 	strh.w	r0, [sp, #6]
    if (rc != 0) {
   1635e:	9b00      	ldr	r3, [sp, #0]
   16360:	2b00      	cmp	r3, #0
   16362:	d145      	bne.n	163f0 <cmd_conn_update_params+0xe0>
    params.latency = parse_arg_uint16_dflt("latency", 0, &rc);
   16364:	466a      	mov	r2, sp
   16366:	2100      	movs	r1, #0
   16368:	4831      	ldr	r0, [pc, #196]	; (16430 <cmd_conn_update_params+0x120>)
   1636a:	f002 fb03 	bl	18974 <parse_arg_uint16_dflt>
   1636e:	f8ad 0008 	strh.w	r0, [sp, #8]
    if (rc != 0) {
   16372:	9b00      	ldr	r3, [sp, #0]
   16374:	2b00      	cmp	r3, #0
   16376:	d140      	bne.n	163fa <cmd_conn_update_params+0xea>
    params.supervision_timeout = parse_arg_time_dflt("timeout", 10000, 0x0100,
   16378:	466b      	mov	r3, sp
   1637a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1637e:	f242 7110 	movw	r1, #10000	; 0x2710
   16382:	482c      	ldr	r0, [pc, #176]	; (16434 <cmd_conn_update_params+0x124>)
   16384:	f002 fb08 	bl	18998 <parse_arg_time_dflt>
   16388:	f8ad 000a 	strh.w	r0, [sp, #10]
    if (rc != 0) {
   1638c:	9b00      	ldr	r3, [sp, #0]
   1638e:	2b00      	cmp	r3, #0
   16390:	d138      	bne.n	16404 <cmd_conn_update_params+0xf4>
    params.min_ce_len = parse_arg_time_dflt("min_conn_event_len", 625,
   16392:	466b      	mov	r3, sp
   16394:	2210      	movs	r2, #16
   16396:	f240 2171 	movw	r1, #625	; 0x271
   1639a:	4827      	ldr	r0, [pc, #156]	; (16438 <cmd_conn_update_params+0x128>)
   1639c:	f002 fafc 	bl	18998 <parse_arg_time_dflt>
   163a0:	f8ad 000c 	strh.w	r0, [sp, #12]
    if (rc != 0) {
   163a4:	9b00      	ldr	r3, [sp, #0]
   163a6:	2b00      	cmp	r3, #0
   163a8:	d131      	bne.n	1640e <cmd_conn_update_params+0xfe>
    params.max_ce_len = parse_arg_time_dflt("max_conn_event_len", 625,
   163aa:	466b      	mov	r3, sp
   163ac:	f44f 7240 	mov.w	r2, #768	; 0x300
   163b0:	f240 2171 	movw	r1, #625	; 0x271
   163b4:	4821      	ldr	r0, [pc, #132]	; (1643c <cmd_conn_update_params+0x12c>)
   163b6:	f002 faef 	bl	18998 <parse_arg_time_dflt>
   163ba:	f8ad 000e 	strh.w	r0, [sp, #14]
    if (rc != 0) {
   163be:	9b00      	ldr	r3, [sp, #0]
   163c0:	bb53      	cbnz	r3, 16418 <cmd_conn_update_params+0x108>
    rc = btshell_update_conn(conn_handle, &params);
   163c2:	a901      	add	r1, sp, #4
   163c4:	4620      	mov	r0, r4
   163c6:	f7ff f9e3 	bl	15790 <btshell_update_conn>
   163ca:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   163cc:	2800      	cmp	r0, #0
   163ce:	d0a7      	beq.n	16320 <cmd_conn_update_params+0x10>
        console_printf("error updating connection; rc=%d\n", rc);
   163d0:	4601      	mov	r1, r0
   163d2:	481b      	ldr	r0, [pc, #108]	; (16440 <cmd_conn_update_params+0x130>)
   163d4:	f005 feb0 	bl	1c138 <console_printf>
        return rc;
   163d8:	9800      	ldr	r0, [sp, #0]
   163da:	e7a1      	b.n	16320 <cmd_conn_update_params+0x10>
        console_printf("invalid 'conn' parameter\n");
   163dc:	4819      	ldr	r0, [pc, #100]	; (16444 <cmd_conn_update_params+0x134>)
   163de:	f005 feab 	bl	1c138 <console_printf>
        return rc;
   163e2:	9800      	ldr	r0, [sp, #0]
   163e4:	e79c      	b.n	16320 <cmd_conn_update_params+0x10>
        console_printf("invalid 'interval_min' parameter\n");
   163e6:	4818      	ldr	r0, [pc, #96]	; (16448 <cmd_conn_update_params+0x138>)
   163e8:	f005 fea6 	bl	1c138 <console_printf>
        return rc;
   163ec:	9800      	ldr	r0, [sp, #0]
   163ee:	e797      	b.n	16320 <cmd_conn_update_params+0x10>
        console_printf("invalid 'interval_max' parameter\n");
   163f0:	4816      	ldr	r0, [pc, #88]	; (1644c <cmd_conn_update_params+0x13c>)
   163f2:	f005 fea1 	bl	1c138 <console_printf>
        return rc;
   163f6:	9800      	ldr	r0, [sp, #0]
   163f8:	e792      	b.n	16320 <cmd_conn_update_params+0x10>
        console_printf("invalid 'latency' parameter\n");
   163fa:	4815      	ldr	r0, [pc, #84]	; (16450 <cmd_conn_update_params+0x140>)
   163fc:	f005 fe9c 	bl	1c138 <console_printf>
        return rc;
   16400:	9800      	ldr	r0, [sp, #0]
   16402:	e78d      	b.n	16320 <cmd_conn_update_params+0x10>
        console_printf("invalid 'timeout' parameter\n");
   16404:	4813      	ldr	r0, [pc, #76]	; (16454 <cmd_conn_update_params+0x144>)
   16406:	f005 fe97 	bl	1c138 <console_printf>
        return rc;
   1640a:	9800      	ldr	r0, [sp, #0]
   1640c:	e788      	b.n	16320 <cmd_conn_update_params+0x10>
        console_printf("invalid 'min_conn_event_len' parameter\n");
   1640e:	4812      	ldr	r0, [pc, #72]	; (16458 <cmd_conn_update_params+0x148>)
   16410:	f005 fe92 	bl	1c138 <console_printf>
        return rc;
   16414:	9800      	ldr	r0, [sp, #0]
   16416:	e783      	b.n	16320 <cmd_conn_update_params+0x10>
        console_printf("invalid 'max_conn_event_len' parameter\n");
   16418:	4810      	ldr	r0, [pc, #64]	; (1645c <cmd_conn_update_params+0x14c>)
   1641a:	f005 fe8d 	bl	1c138 <console_printf>
        return rc;
   1641e:	9800      	ldr	r0, [sp, #0]
   16420:	e77e      	b.n	16320 <cmd_conn_update_params+0x10>
   16422:	bf00      	nop
   16424:	00034df4 	.word	0x00034df4
   16428:	000351a4 	.word	0x000351a4
   1642c:	000351d8 	.word	0x000351d8
   16430:	0003520c 	.word	0x0003520c
   16434:	00035234 	.word	0x00035234
   16438:	0003525c 	.word	0x0003525c
   1643c:	00035298 	.word	0x00035298
   16440:	000352d4 	.word	0x000352d4
   16444:	00034dfc 	.word	0x00034dfc
   16448:	000351b4 	.word	0x000351b4
   1644c:	000351e8 	.word	0x000351e8
   16450:	00035214 	.word	0x00035214
   16454:	0003523c 	.word	0x0003523c
   16458:	00035270 	.word	0x00035270
   1645c:	000352ac 	.word	0x000352ac

00016460 <cmd_conn_rssi>:
{
   16460:	b530      	push	{r4, r5, lr}
   16462:	b083      	sub	sp, #12
    rc = parse_arg_all(argc - 1, argv + 1);
   16464:	3104      	adds	r1, #4
   16466:	3801      	subs	r0, #1
   16468:	f002 fb98 	bl	18b9c <parse_arg_all>
   1646c:	4604      	mov	r4, r0
   1646e:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   16470:	b110      	cbz	r0, 16478 <cmd_conn_rssi+0x18>
}
   16472:	4620      	mov	r0, r4
   16474:	b003      	add	sp, #12
   16476:	bd30      	pop	{r4, r5, pc}
    conn_handle = parse_arg_uint16("conn", &rc);
   16478:	4669      	mov	r1, sp
   1647a:	480f      	ldr	r0, [pc, #60]	; (164b8 <cmd_conn_rssi+0x58>)
   1647c:	f002 fa37 	bl	188ee <parse_arg_uint16>
   16480:	4605      	mov	r5, r0
    if (rc != 0) {
   16482:	9b00      	ldr	r3, [sp, #0]
   16484:	b96b      	cbnz	r3, 164a2 <cmd_conn_rssi+0x42>
    rc = btshell_rssi(conn_handle, &rssi);
   16486:	f10d 0107 	add.w	r1, sp, #7
   1648a:	f7ff f9cf 	bl	1582c <btshell_rssi>
   1648e:	4604      	mov	r4, r0
   16490:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   16492:	b958      	cbnz	r0, 164ac <cmd_conn_rssi+0x4c>
    console_printf("conn=%d rssi=%d\n", conn_handle, rssi);
   16494:	f99d 2007 	ldrsb.w	r2, [sp, #7]
   16498:	4629      	mov	r1, r5
   1649a:	4808      	ldr	r0, [pc, #32]	; (164bc <cmd_conn_rssi+0x5c>)
   1649c:	f005 fe4c 	bl	1c138 <console_printf>
    return 0;
   164a0:	e7e7      	b.n	16472 <cmd_conn_rssi+0x12>
        console_printf("invalid 'conn' parameter\n");
   164a2:	4807      	ldr	r0, [pc, #28]	; (164c0 <cmd_conn_rssi+0x60>)
   164a4:	f005 fe48 	bl	1c138 <console_printf>
        return rc;
   164a8:	9c00      	ldr	r4, [sp, #0]
   164aa:	e7e2      	b.n	16472 <cmd_conn_rssi+0x12>
        console_printf("error reading rssi; rc=%d\n", rc);
   164ac:	4601      	mov	r1, r0
   164ae:	4805      	ldr	r0, [pc, #20]	; (164c4 <cmd_conn_rssi+0x64>)
   164b0:	f005 fe42 	bl	1c138 <console_printf>
        return rc;
   164b4:	9c00      	ldr	r4, [sp, #0]
   164b6:	e7dc      	b.n	16472 <cmd_conn_rssi+0x12>
   164b8:	00034df4 	.word	0x00034df4
   164bc:	00035314 	.word	0x00035314
   164c0:	00034dfc 	.word	0x00034dfc
   164c4:	000352f8 	.word	0x000352f8

000164c8 <cmd_white_list>:
{
   164c8:	b570      	push	{r4, r5, r6, lr}
    rc = parse_arg_all(argc - 1, argv + 1);
   164ca:	3104      	adds	r1, #4
   164cc:	3801      	subs	r0, #1
   164ce:	f002 fb65 	bl	18b9c <parse_arg_all>
    if (rc != 0) {
   164d2:	4606      	mov	r6, r0
   164d4:	b9f0      	cbnz	r0, 16514 <cmd_white_list+0x4c>
    addrs_cnt = 0;
   164d6:	4604      	mov	r4, r0
   164d8:	e000      	b.n	164dc <cmd_white_list+0x14>
        addrs_cnt++;
   164da:	3401      	adds	r4, #1
        if (addrs_cnt >= CMD_WL_MAX_SZ) {
   164dc:	2c07      	cmp	r4, #7
   164de:	dc18      	bgt.n	16512 <cmd_white_list+0x4a>
        rc = parse_dev_addr(NULL, cmd_addr_type, &addrs[addrs_cnt]);
   164e0:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   164e4:	4b0d      	ldr	r3, [pc, #52]	; (1651c <cmd_white_list+0x54>)
   164e6:	441a      	add	r2, r3
   164e8:	490d      	ldr	r1, [pc, #52]	; (16520 <cmd_white_list+0x58>)
   164ea:	2000      	movs	r0, #0
   164ec:	f7ff fd44 	bl	15f78 <parse_dev_addr>
   164f0:	4605      	mov	r5, r0
        if (rc == ENOENT) {
   164f2:	2802      	cmp	r0, #2
   164f4:	d007      	beq.n	16506 <cmd_white_list+0x3e>
        } else if (rc != 0) {
   164f6:	2800      	cmp	r0, #0
   164f8:	d0ef      	beq.n	164da <cmd_white_list+0x12>
            console_printf("invalid 'addr' parameter #%d\n", addrs_cnt + 1);
   164fa:	1c61      	adds	r1, r4, #1
   164fc:	4809      	ldr	r0, [pc, #36]	; (16524 <cmd_white_list+0x5c>)
   164fe:	f005 fe1b 	bl	1c138 <console_printf>
            return rc;
   16502:	462e      	mov	r6, r5
   16504:	e006      	b.n	16514 <cmd_white_list+0x4c>
    if (addrs_cnt == 0) {
   16506:	b13c      	cbz	r4, 16518 <cmd_white_list+0x50>
    btshell_wl_set(addrs, addrs_cnt);
   16508:	4621      	mov	r1, r4
   1650a:	4804      	ldr	r0, [pc, #16]	; (1651c <cmd_white_list+0x54>)
   1650c:	f7ff f91c 	bl	15748 <btshell_wl_set>
    return 0;
   16510:	e000      	b.n	16514 <cmd_white_list+0x4c>
            return EINVAL;
   16512:	2616      	movs	r6, #22
}
   16514:	4630      	mov	r0, r6
   16516:	bd70      	pop	{r4, r5, r6, pc}
        return EINVAL;
   16518:	2616      	movs	r6, #22
   1651a:	e7fb      	b.n	16514 <cmd_white_list+0x4c>
   1651c:	10001df0 	.word	0x10001df0
   16520:	0003774c 	.word	0x0003774c
   16524:	00035328 	.word	0x00035328

00016528 <cmd_set_priv_mode>:
{
   16528:	b500      	push	{lr}
   1652a:	b085      	sub	sp, #20
    rc = parse_arg_all(argc - 1, argv + 1);
   1652c:	3104      	adds	r1, #4
   1652e:	3801      	subs	r0, #1
   16530:	f002 fb34 	bl	18b9c <parse_arg_all>
   16534:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   16536:	b110      	cbz	r0, 1653e <cmd_set_priv_mode+0x16>
}
   16538:	b005      	add	sp, #20
   1653a:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = parse_dev_addr(NULL, cmd_addr_type, &addr);
   1653e:	aa02      	add	r2, sp, #8
   16540:	490c      	ldr	r1, [pc, #48]	; (16574 <cmd_set_priv_mode+0x4c>)
   16542:	f7ff fd19 	bl	15f78 <parse_dev_addr>
   16546:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   16548:	b950      	cbnz	r0, 16560 <cmd_set_priv_mode+0x38>
    priv_mode = parse_arg_uint8("mode", &rc);
   1654a:	a901      	add	r1, sp, #4
   1654c:	480a      	ldr	r0, [pc, #40]	; (16578 <cmd_set_priv_mode+0x50>)
   1654e:	f002 f9c6 	bl	188de <parse_arg_uint8>
   16552:	4601      	mov	r1, r0
    if (rc != 0) {
   16554:	9b01      	ldr	r3, [sp, #4]
   16556:	b943      	cbnz	r3, 1656a <cmd_set_priv_mode+0x42>
    return ble_gap_set_priv_mode(&addr, priv_mode);
   16558:	a802      	add	r0, sp, #8
   1655a:	f013 f8e4 	bl	29726 <ble_gap_set_priv_mode>
   1655e:	e7eb      	b.n	16538 <cmd_set_priv_mode+0x10>
        console_printf("invalid 'addr' parameter\n");
   16560:	4806      	ldr	r0, [pc, #24]	; (1657c <cmd_set_priv_mode+0x54>)
   16562:	f005 fde9 	bl	1c138 <console_printf>
        return rc;
   16566:	9801      	ldr	r0, [sp, #4]
   16568:	e7e6      	b.n	16538 <cmd_set_priv_mode+0x10>
        console_printf("missing mode\n");
   1656a:	4805      	ldr	r0, [pc, #20]	; (16580 <cmd_set_priv_mode+0x58>)
   1656c:	f005 fde4 	bl	1c138 <console_printf>
        return rc;
   16570:	9801      	ldr	r0, [sp, #4]
   16572:	e7e1      	b.n	16538 <cmd_set_priv_mode+0x10>
   16574:	0003774c 	.word	0x0003774c
   16578:	00035348 	.word	0x00035348
   1657c:	00035078 	.word	0x00035078
   16580:	00035350 	.word	0x00035350

00016584 <cmd_set_scan_opts>:
{
   16584:	b500      	push	{lr}
   16586:	b083      	sub	sp, #12
    rc = parse_arg_all(argc - 1, argv + 1);
   16588:	3104      	adds	r1, #4
   1658a:	3801      	subs	r0, #1
   1658c:	f002 fb06 	bl	18b9c <parse_arg_all>
   16590:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   16592:	b110      	cbz	r0, 1659a <cmd_set_scan_opts+0x16>
}
   16594:	b003      	add	sp, #12
   16596:	f85d fb04 	ldr.w	pc, [sp], #4
    g_scan_opts.limit = parse_arg_uint16_dflt("decode_limit", UINT16_MAX, &rc);
   1659a:	aa01      	add	r2, sp, #4
   1659c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   165a0:	4817      	ldr	r0, [pc, #92]	; (16600 <cmd_set_scan_opts+0x7c>)
   165a2:	f002 f9e7 	bl	18974 <parse_arg_uint16_dflt>
   165a6:	4b17      	ldr	r3, [pc, #92]	; (16604 <cmd_set_scan_opts+0x80>)
   165a8:	8018      	strh	r0, [r3, #0]
    if (rc != 0) {
   165aa:	9b01      	ldr	r3, [sp, #4]
   165ac:	b9eb      	cbnz	r3, 165ea <cmd_set_scan_opts+0x66>
    g_scan_opts.ignore_legacy = parse_arg_bool_dflt("ignore_legacy", 0, &rc);
   165ae:	aa01      	add	r2, sp, #4
   165b0:	2100      	movs	r1, #0
   165b2:	4815      	ldr	r0, [pc, #84]	; (16608 <cmd_set_scan_opts+0x84>)
   165b4:	f002 f987 	bl	188c6 <parse_arg_bool_dflt>
   165b8:	4b12      	ldr	r3, [pc, #72]	; (16604 <cmd_set_scan_opts+0x80>)
   165ba:	789a      	ldrb	r2, [r3, #2]
   165bc:	f360 0200 	bfi	r2, r0, #0, #1
   165c0:	709a      	strb	r2, [r3, #2]
    if (rc != 0) {
   165c2:	9b01      	ldr	r3, [sp, #4]
   165c4:	b9b3      	cbnz	r3, 165f4 <cmd_set_scan_opts+0x70>
    g_scan_opts.periodic_only = parse_arg_bool_dflt("periodic_only", 0, &rc);
   165c6:	aa01      	add	r2, sp, #4
   165c8:	2100      	movs	r1, #0
   165ca:	4810      	ldr	r0, [pc, #64]	; (1660c <cmd_set_scan_opts+0x88>)
   165cc:	f002 f97b 	bl	188c6 <parse_arg_bool_dflt>
   165d0:	4b0c      	ldr	r3, [pc, #48]	; (16604 <cmd_set_scan_opts+0x80>)
   165d2:	789a      	ldrb	r2, [r3, #2]
   165d4:	f360 0241 	bfi	r2, r0, #1, #1
   165d8:	709a      	strb	r2, [r3, #2]
    if (rc != 0) {
   165da:	9801      	ldr	r0, [sp, #4]
   165dc:	2800      	cmp	r0, #0
   165de:	d0d9      	beq.n	16594 <cmd_set_scan_opts+0x10>
        console_printf("invalid 'periodic_only' parameter\n");
   165e0:	480b      	ldr	r0, [pc, #44]	; (16610 <cmd_set_scan_opts+0x8c>)
   165e2:	f005 fda9 	bl	1c138 <console_printf>
        return rc;
   165e6:	9801      	ldr	r0, [sp, #4]
   165e8:	e7d4      	b.n	16594 <cmd_set_scan_opts+0x10>
        console_printf("invalid 'decode_limit' parameter\n");
   165ea:	480a      	ldr	r0, [pc, #40]	; (16614 <cmd_set_scan_opts+0x90>)
   165ec:	f005 fda4 	bl	1c138 <console_printf>
        return rc;
   165f0:	9801      	ldr	r0, [sp, #4]
   165f2:	e7cf      	b.n	16594 <cmd_set_scan_opts+0x10>
        console_printf("invalid 'ignore_legacy' parameter\n");
   165f4:	4808      	ldr	r0, [pc, #32]	; (16618 <cmd_set_scan_opts+0x94>)
   165f6:	f005 fd9f 	bl	1c138 <console_printf>
        return rc;
   165fa:	9801      	ldr	r0, [sp, #4]
   165fc:	e7ca      	b.n	16594 <cmd_set_scan_opts+0x10>
   165fe:	bf00      	nop
   16600:	00035360 	.word	0x00035360
   16604:	1000015c 	.word	0x1000015c
   16608:	00035394 	.word	0x00035394
   1660c:	000353c8 	.word	0x000353c8
   16610:	000353d8 	.word	0x000353d8
   16614:	00035370 	.word	0x00035370
   16618:	000353a4 	.word	0x000353a4

0001661c <cmd_set_adv_data_or_scan_rsp>:
{
   1661c:	b570      	push	{r4, r5, r6, lr}
   1661e:	b0ac      	sub	sp, #176	; 0xb0
   16620:	4605      	mov	r5, r0
   16622:	460e      	mov	r6, r1
    if (scan_rsp && periodic) {
   16624:	4614      	mov	r4, r2
   16626:	b112      	cbz	r2, 1662e <cmd_set_adv_data_or_scan_rsp+0x12>
   16628:	2b00      	cmp	r3, #0
   1662a:	f040 822d 	bne.w	16a88 <cmd_set_adv_data_or_scan_rsp+0x46c>
    memset(&adv_fields, 0, sizeof adv_fields);
   1662e:	2260      	movs	r2, #96	; 0x60
   16630:	2100      	movs	r1, #0
   16632:	a814      	add	r0, sp, #80	; 0x50
   16634:	f004 fb31 	bl	1ac9a <memset>
    rc = parse_arg_all(argc - 1, argv + 1);
   16638:	1d31      	adds	r1, r6, #4
   1663a:	1e68      	subs	r0, r5, #1
   1663c:	f002 faae 	bl	18b9c <parse_arg_all>
   16640:	9003      	str	r0, [sp, #12]
    if (rc != 0) {
   16642:	b108      	cbz	r0, 16648 <cmd_set_adv_data_or_scan_rsp+0x2c>
}
   16644:	b02c      	add	sp, #176	; 0xb0
   16646:	bd70      	pop	{r4, r5, r6, pc}
    tmp = parse_arg_uint8("flags", &rc);
   16648:	a903      	add	r1, sp, #12
   1664a:	4888      	ldr	r0, [pc, #544]	; (1686c <cmd_set_adv_data_or_scan_rsp+0x250>)
   1664c:	f002 f947 	bl	188de <parse_arg_uint8>
    if (rc == 0) {
   16650:	9b03      	ldr	r3, [sp, #12]
   16652:	b9b3      	cbnz	r3, 16682 <cmd_set_adv_data_or_scan_rsp+0x66>
        adv_fields.flags = tmp;
   16654:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
        uuid16 = parse_arg_uint16("uuid16", &rc);
   16658:	a903      	add	r1, sp, #12
   1665a:	4885      	ldr	r0, [pc, #532]	; (16870 <cmd_set_adv_data_or_scan_rsp+0x254>)
   1665c:	f002 f947 	bl	188ee <parse_arg_uint16>
        if (rc == 0) {
   16660:	9b03      	ldr	r3, [sp, #12]
   16662:	b9d3      	cbnz	r3, 1669a <cmd_set_adv_data_or_scan_rsp+0x7e>
            if (adv_fields.num_uuids16 >= CMD_ADV_DATA_MAX_UUIDS16) {
   16664:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   16668:	2b07      	cmp	r3, #7
   1666a:	d811      	bhi.n	16690 <cmd_set_adv_data_or_scan_rsp+0x74>
            uuids16[adv_fields.num_uuids16] = (ble_uuid16_t) BLE_UUID16_INIT(uuid16);
   1666c:	4a81      	ldr	r2, [pc, #516]	; (16874 <cmd_set_adv_data_or_scan_rsp+0x258>)
   1666e:	2110      	movs	r1, #16
   16670:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
   16674:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   16678:	8050      	strh	r0, [r2, #2]
            adv_fields.num_uuids16++;
   1667a:	3301      	adds	r3, #1
   1667c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   16680:	e7ea      	b.n	16658 <cmd_set_adv_data_or_scan_rsp+0x3c>
    } else if (rc != ENOENT) {
   16682:	2b02      	cmp	r3, #2
   16684:	d0e8      	beq.n	16658 <cmd_set_adv_data_or_scan_rsp+0x3c>
        console_printf("invalid 'flags' parameter\n");
   16686:	487c      	ldr	r0, [pc, #496]	; (16878 <cmd_set_adv_data_or_scan_rsp+0x25c>)
   16688:	f005 fd56 	bl	1c138 <console_printf>
        return rc;
   1668c:	9803      	ldr	r0, [sp, #12]
   1668e:	e7d9      	b.n	16644 <cmd_set_adv_data_or_scan_rsp+0x28>
                console_printf("invalid 'uuid16' parameter\n");
   16690:	487a      	ldr	r0, [pc, #488]	; (1687c <cmd_set_adv_data_or_scan_rsp+0x260>)
   16692:	f005 fd51 	bl	1c138 <console_printf>
                return EINVAL;
   16696:	2016      	movs	r0, #22
   16698:	e7d4      	b.n	16644 <cmd_set_adv_data_or_scan_rsp+0x28>
        } else if (rc == ENOENT) {
   1669a:	2b02      	cmp	r3, #2
   1669c:	d120      	bne.n	166e0 <cmd_set_adv_data_or_scan_rsp+0xc4>
    if (adv_fields.num_uuids16 > 0) {
   1669e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   166a2:	b10b      	cbz	r3, 166a8 <cmd_set_adv_data_or_scan_rsp+0x8c>
        adv_fields.uuids16 = uuids16;
   166a4:	4b73      	ldr	r3, [pc, #460]	; (16874 <cmd_set_adv_data_or_scan_rsp+0x258>)
   166a6:	9315      	str	r3, [sp, #84]	; 0x54
    tmp = parse_arg_bool_dflt("uuids16_is_complete", 0, &rc);
   166a8:	aa03      	add	r2, sp, #12
   166aa:	2100      	movs	r1, #0
   166ac:	4874      	ldr	r0, [pc, #464]	; (16880 <cmd_set_adv_data_or_scan_rsp+0x264>)
   166ae:	f002 f90a 	bl	188c6 <parse_arg_bool_dflt>
    if (rc != 0) {
   166b2:	9b03      	ldr	r3, [sp, #12]
   166b4:	b9cb      	cbnz	r3, 166ea <cmd_set_adv_data_or_scan_rsp+0xce>
        uuid32 = parse_arg_uint32("uuid32", &rc);
   166b6:	a903      	add	r1, sp, #12
   166b8:	4872      	ldr	r0, [pc, #456]	; (16884 <cmd_set_adv_data_or_scan_rsp+0x268>)
   166ba:	f002 f92a 	bl	18912 <parse_arg_uint32>
        if (rc == 0) {
   166be:	9b03      	ldr	r3, [sp, #12]
   166c0:	b9eb      	cbnz	r3, 166fe <cmd_set_adv_data_or_scan_rsp+0xe2>
            if (adv_fields.num_uuids32 >= CMD_ADV_DATA_MAX_UUIDS32) {
   166c2:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   166c6:	2b07      	cmp	r3, #7
   166c8:	d814      	bhi.n	166f4 <cmd_set_adv_data_or_scan_rsp+0xd8>
            uuids32[adv_fields.num_uuids32] = (ble_uuid32_t) BLE_UUID32_INIT(uuid32);
   166ca:	4a6a      	ldr	r2, [pc, #424]	; (16874 <cmd_set_adv_data_or_scan_rsp+0x258>)
   166cc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   166d0:	2120      	movs	r1, #32
   166d2:	f882 1020 	strb.w	r1, [r2, #32]
   166d6:	6250      	str	r0, [r2, #36]	; 0x24
            adv_fields.num_uuids32++;
   166d8:	3301      	adds	r3, #1
   166da:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
   166de:	e7ea      	b.n	166b6 <cmd_set_adv_data_or_scan_rsp+0x9a>
            console_printf("invalid 'uuid16' parameter\n");
   166e0:	4866      	ldr	r0, [pc, #408]	; (1687c <cmd_set_adv_data_or_scan_rsp+0x260>)
   166e2:	f005 fd29 	bl	1c138 <console_printf>
            return rc;
   166e6:	9803      	ldr	r0, [sp, #12]
   166e8:	e7ac      	b.n	16644 <cmd_set_adv_data_or_scan_rsp+0x28>
        console_printf("invalid 'uuids16_is_complete' parameter\n");
   166ea:	4867      	ldr	r0, [pc, #412]	; (16888 <cmd_set_adv_data_or_scan_rsp+0x26c>)
   166ec:	f005 fd24 	bl	1c138 <console_printf>
        return rc;
   166f0:	9803      	ldr	r0, [sp, #12]
   166f2:	e7a7      	b.n	16644 <cmd_set_adv_data_or_scan_rsp+0x28>
                console_printf("invalid 'uuid32' parameter\n");
   166f4:	4865      	ldr	r0, [pc, #404]	; (1688c <cmd_set_adv_data_or_scan_rsp+0x270>)
   166f6:	f005 fd1f 	bl	1c138 <console_printf>
                return EINVAL;
   166fa:	2016      	movs	r0, #22
   166fc:	e7a2      	b.n	16644 <cmd_set_adv_data_or_scan_rsp+0x28>
        } else if (rc == ENOENT) {
   166fe:	2b02      	cmp	r3, #2
   16700:	d110      	bne.n	16724 <cmd_set_adv_data_or_scan_rsp+0x108>
    if (adv_fields.num_uuids32 > 0) {
   16702:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   16706:	b10b      	cbz	r3, 1670c <cmd_set_adv_data_or_scan_rsp+0xf0>
        adv_fields.uuids32 = uuids32;
   16708:	4b61      	ldr	r3, [pc, #388]	; (16890 <cmd_set_adv_data_or_scan_rsp+0x274>)
   1670a:	9317      	str	r3, [sp, #92]	; 0x5c
    tmp = parse_arg_bool_dflt("uuids32_is_complete", 0, &rc);
   1670c:	aa03      	add	r2, sp, #12
   1670e:	2100      	movs	r1, #0
   16710:	4860      	ldr	r0, [pc, #384]	; (16894 <cmd_set_adv_data_or_scan_rsp+0x278>)
   16712:	f002 f8d8 	bl	188c6 <parse_arg_bool_dflt>
    if (rc != 0) {
   16716:	9b03      	ldr	r3, [sp, #12]
   16718:	b1b3      	cbz	r3, 16748 <cmd_set_adv_data_or_scan_rsp+0x12c>
        console_printf("invalid 'uuids32_is_complete' parameter\n");
   1671a:	485f      	ldr	r0, [pc, #380]	; (16898 <cmd_set_adv_data_or_scan_rsp+0x27c>)
   1671c:	f005 fd0c 	bl	1c138 <console_printf>
        return rc;
   16720:	9803      	ldr	r0, [sp, #12]
   16722:	e78f      	b.n	16644 <cmd_set_adv_data_or_scan_rsp+0x28>
            console_printf("invalid 'uuid32' parameter\n");
   16724:	4859      	ldr	r0, [pc, #356]	; (1688c <cmd_set_adv_data_or_scan_rsp+0x270>)
   16726:	f005 fd07 	bl	1c138 <console_printf>
            return rc;
   1672a:	9803      	ldr	r0, [sp, #12]
   1672c:	e78a      	b.n	16644 <cmd_set_adv_data_or_scan_rsp+0x28>
            ble_uuid_init_from_buf((ble_uuid_any_t *) &uuids128[adv_fields.num_uuids128],
   1672e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   16732:	2210      	movs	r2, #16
   16734:	a910      	add	r1, sp, #64	; 0x40
   16736:	4b59      	ldr	r3, [pc, #356]	; (1689c <cmd_set_adv_data_or_scan_rsp+0x280>)
   16738:	4418      	add	r0, r3
   1673a:	f01a fe04 	bl	31346 <ble_uuid_init_from_buf>
            adv_fields.num_uuids128++;
   1673e:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   16742:	3301      	adds	r3, #1
   16744:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
        rc = parse_arg_byte_stream_exact_length("uuid128", uuid128, 16);
   16748:	2210      	movs	r2, #16
   1674a:	a910      	add	r1, sp, #64	; 0x40
   1674c:	4854      	ldr	r0, [pc, #336]	; (168a0 <cmd_set_adv_data_or_scan_rsp+0x284>)
   1674e:	f002 f99d 	bl	18a8c <parse_arg_byte_stream_exact_length>
   16752:	9003      	str	r0, [sp, #12]
        if (rc == 0) {
   16754:	b940      	cbnz	r0, 16768 <cmd_set_adv_data_or_scan_rsp+0x14c>
            if (adv_fields.num_uuids128 >= CMD_ADV_DATA_MAX_UUIDS128) {
   16756:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
   1675a:	2801      	cmp	r0, #1
   1675c:	d9e7      	bls.n	1672e <cmd_set_adv_data_or_scan_rsp+0x112>
                console_printf("invalid 'uuid128' parameter\n");
   1675e:	4851      	ldr	r0, [pc, #324]	; (168a4 <cmd_set_adv_data_or_scan_rsp+0x288>)
   16760:	f005 fcea 	bl	1c138 <console_printf>
                return EINVAL;
   16764:	2016      	movs	r0, #22
   16766:	e76d      	b.n	16644 <cmd_set_adv_data_or_scan_rsp+0x28>
        } else if (rc == ENOENT) {
   16768:	2802      	cmp	r0, #2
   1676a:	d15b      	bne.n	16824 <cmd_set_adv_data_or_scan_rsp+0x208>
    if (adv_fields.num_uuids128 > 0) {
   1676c:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   16770:	b10b      	cbz	r3, 16776 <cmd_set_adv_data_or_scan_rsp+0x15a>
        adv_fields.uuids128 = uuids128;
   16772:	4b4a      	ldr	r3, [pc, #296]	; (1689c <cmd_set_adv_data_or_scan_rsp+0x280>)
   16774:	9319      	str	r3, [sp, #100]	; 0x64
    tmp = parse_arg_bool_dflt("uuids128_is_complete", 0, &rc);
   16776:	aa03      	add	r2, sp, #12
   16778:	2100      	movs	r1, #0
   1677a:	484b      	ldr	r0, [pc, #300]	; (168a8 <cmd_set_adv_data_or_scan_rsp+0x28c>)
   1677c:	f002 f8a3 	bl	188c6 <parse_arg_bool_dflt>
    if (rc != 0) {
   16780:	9b03      	ldr	r3, [sp, #12]
   16782:	2b00      	cmp	r3, #0
   16784:	d153      	bne.n	1682e <cmd_set_adv_data_or_scan_rsp+0x212>
    adv_fields.name = (uint8_t *)parse_arg_extract("name");
   16786:	4849      	ldr	r0, [pc, #292]	; (168ac <cmd_set_adv_data_or_scan_rsp+0x290>)
   16788:	f001 ffec 	bl	18764 <parse_arg_extract>
   1678c:	901b      	str	r0, [sp, #108]	; 0x6c
    if (adv_fields.name != NULL) {
   1678e:	b118      	cbz	r0, 16798 <cmd_set_adv_data_or_scan_rsp+0x17c>
        adv_fields.name_len = strlen((char *)adv_fields.name);
   16790:	f004 fac5 	bl	1ad1e <strlen>
   16794:	f88d 0070 	strb.w	r0, [sp, #112]	; 0x70
    tmp = parse_arg_long_bounds("tx_power_level", INT8_MIN, INT8_MAX, &rc);
   16798:	ab03      	add	r3, sp, #12
   1679a:	227f      	movs	r2, #127	; 0x7f
   1679c:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   167a0:	4843      	ldr	r0, [pc, #268]	; (168b0 <cmd_set_adv_data_or_scan_rsp+0x294>)
   167a2:	f002 f82a 	bl	187fa <parse_arg_long_bounds>
    if (rc == 0) {
   167a6:	9a03      	ldr	r2, [sp, #12]
   167a8:	2a00      	cmp	r2, #0
   167aa:	d145      	bne.n	16838 <cmd_set_adv_data_or_scan_rsp+0x21c>
        adv_fields.tx_pwr_lvl = tmp;
   167ac:	f88d 0072 	strb.w	r0, [sp, #114]	; 0x72
        adv_fields.tx_pwr_lvl_is_present = 1;
   167b0:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
   167b4:	f043 0301 	orr.w	r3, r3, #1
   167b8:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    rc = parse_arg_byte_stream_exact_length("slave_interval_range",
   167bc:	2204      	movs	r2, #4
   167be:	493d      	ldr	r1, [pc, #244]	; (168b4 <cmd_set_adv_data_or_scan_rsp+0x298>)
   167c0:	483d      	ldr	r0, [pc, #244]	; (168b8 <cmd_set_adv_data_or_scan_rsp+0x29c>)
   167c2:	f002 f963 	bl	18a8c <parse_arg_byte_stream_exact_length>
   167c6:	9003      	str	r0, [sp, #12]
    if (rc == 0) {
   167c8:	2800      	cmp	r0, #0
   167ca:	d13c      	bne.n	16846 <cmd_set_adv_data_or_scan_rsp+0x22a>
        adv_fields.slave_itvl_range = slave_itvl_range;
   167cc:	4b39      	ldr	r3, [pc, #228]	; (168b4 <cmd_set_adv_data_or_scan_rsp+0x298>)
   167ce:	931d      	str	r3, [sp, #116]	; 0x74
    rc = parse_arg_byte_stream("service_data_uuid16",
   167d0:	ab08      	add	r3, sp, #32
   167d2:	4a3a      	ldr	r2, [pc, #232]	; (168bc <cmd_set_adv_data_or_scan_rsp+0x2a0>)
   167d4:	211d      	movs	r1, #29
   167d6:	483a      	ldr	r0, [pc, #232]	; (168c0 <cmd_set_adv_data_or_scan_rsp+0x2a4>)
   167d8:	f002 f944 	bl	18a64 <parse_arg_byte_stream>
   167dc:	9003      	str	r0, [sp, #12]
    if (rc == 0) {
   167de:	2800      	cmp	r0, #0
   167e0:	d138      	bne.n	16854 <cmd_set_adv_data_or_scan_rsp+0x238>
        adv_fields.svc_data_uuid16 = svc_data_uuid16;
   167e2:	4b36      	ldr	r3, [pc, #216]	; (168bc <cmd_set_adv_data_or_scan_rsp+0x2a0>)
   167e4:	931e      	str	r3, [sp, #120]	; 0x78
        adv_fields.svc_data_uuid16_len = svc_data_uuid16_len;
   167e6:	9b08      	ldr	r3, [sp, #32]
   167e8:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
        rc = parse_arg_byte_stream_exact_length(
   167ec:	2206      	movs	r2, #6
   167ee:	a90e      	add	r1, sp, #56	; 0x38
   167f0:	4834      	ldr	r0, [pc, #208]	; (168c4 <cmd_set_adv_data_or_scan_rsp+0x2a8>)
   167f2:	f002 f94b 	bl	18a8c <parse_arg_byte_stream_exact_length>
   167f6:	9003      	str	r0, [sp, #12]
        if (rc == 0) {
   167f8:	2800      	cmp	r0, #0
   167fa:	d16f      	bne.n	168dc <cmd_set_adv_data_or_scan_rsp+0x2c0>
            if (adv_fields.num_public_tgt_addrs >=
   167fc:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
   16800:	2b07      	cmp	r3, #7
   16802:	d82e      	bhi.n	16862 <cmd_set_adv_data_or_scan_rsp+0x246>
            memcpy(public_tgt_addrs[adv_fields.num_public_tgt_addrs],
   16804:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   16808:	4a1a      	ldr	r2, [pc, #104]	; (16874 <cmd_set_adv_data_or_scan_rsp+0x258>)
   1680a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1680e:	980e      	ldr	r0, [sp, #56]	; 0x38
   16810:	f8c2 00a8 	str.w	r0, [r2, #168]	; 0xa8
   16814:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
   16818:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
            adv_fields.num_public_tgt_addrs++;
   1681c:	3301      	adds	r3, #1
   1681e:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
        rc = parse_arg_byte_stream_exact_length(
   16822:	e7e3      	b.n	167ec <cmd_set_adv_data_or_scan_rsp+0x1d0>
            console_printf("invalid 'uuid128' parameter\n");
   16824:	481f      	ldr	r0, [pc, #124]	; (168a4 <cmd_set_adv_data_or_scan_rsp+0x288>)
   16826:	f005 fc87 	bl	1c138 <console_printf>
            return rc;
   1682a:	9803      	ldr	r0, [sp, #12]
   1682c:	e70a      	b.n	16644 <cmd_set_adv_data_or_scan_rsp+0x28>
        console_printf("invalid 'uuids128_is_complete' parameter\n");
   1682e:	4826      	ldr	r0, [pc, #152]	; (168c8 <cmd_set_adv_data_or_scan_rsp+0x2ac>)
   16830:	f005 fc82 	bl	1c138 <console_printf>
        return rc;
   16834:	9803      	ldr	r0, [sp, #12]
   16836:	e705      	b.n	16644 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   16838:	2a02      	cmp	r2, #2
   1683a:	d0bf      	beq.n	167bc <cmd_set_adv_data_or_scan_rsp+0x1a0>
        console_printf("invalid 'tx_power_level' parameter\n");
   1683c:	4823      	ldr	r0, [pc, #140]	; (168cc <cmd_set_adv_data_or_scan_rsp+0x2b0>)
   1683e:	f005 fc7b 	bl	1c138 <console_printf>
        return rc;
   16842:	9803      	ldr	r0, [sp, #12]
   16844:	e6fe      	b.n	16644 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   16846:	2802      	cmp	r0, #2
   16848:	d0c2      	beq.n	167d0 <cmd_set_adv_data_or_scan_rsp+0x1b4>
        console_printf("invalid 'slave_interval_range' parameter\n");
   1684a:	4821      	ldr	r0, [pc, #132]	; (168d0 <cmd_set_adv_data_or_scan_rsp+0x2b4>)
   1684c:	f005 fc74 	bl	1c138 <console_printf>
        return rc;
   16850:	9803      	ldr	r0, [sp, #12]
   16852:	e6f7      	b.n	16644 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   16854:	2802      	cmp	r0, #2
   16856:	d0c9      	beq.n	167ec <cmd_set_adv_data_or_scan_rsp+0x1d0>
        console_printf("invalid 'service_data_uuid16' parameter\n");
   16858:	481e      	ldr	r0, [pc, #120]	; (168d4 <cmd_set_adv_data_or_scan_rsp+0x2b8>)
   1685a:	f005 fc6d 	bl	1c138 <console_printf>
        return rc;
   1685e:	9803      	ldr	r0, [sp, #12]
   16860:	e6f0      	b.n	16644 <cmd_set_adv_data_or_scan_rsp+0x28>
                console_printf("invalid 'public_target_address' parameter\n");
   16862:	481d      	ldr	r0, [pc, #116]	; (168d8 <cmd_set_adv_data_or_scan_rsp+0x2bc>)
   16864:	f005 fc68 	bl	1c138 <console_printf>
                return EINVAL;
   16868:	2016      	movs	r0, #22
   1686a:	e6eb      	b.n	16644 <cmd_set_adv_data_or_scan_rsp+0x28>
   1686c:	000353fc 	.word	0x000353fc
   16870:	00035420 	.word	0x00035420
   16874:	10001e28 	.word	0x10001e28
   16878:	00035404 	.word	0x00035404
   1687c:	00035428 	.word	0x00035428
   16880:	00035444 	.word	0x00035444
   16884:	00035484 	.word	0x00035484
   16888:	00035458 	.word	0x00035458
   1688c:	0003548c 	.word	0x0003548c
   16890:	10001e48 	.word	0x10001e48
   16894:	000354a8 	.word	0x000354a8
   16898:	000354bc 	.word	0x000354bc
   1689c:	10001e88 	.word	0x10001e88
   168a0:	000354e8 	.word	0x000354e8
   168a4:	000354f0 	.word	0x000354f0
   168a8:	00035510 	.word	0x00035510
   168ac:	00035554 	.word	0x00035554
   168b0:	0003555c 	.word	0x0003555c
   168b4:	10001eac 	.word	0x10001eac
   168b8:	00035590 	.word	0x00035590
   168bc:	10001eb0 	.word	0x10001eb0
   168c0:	000355d4 	.word	0x000355d4
   168c4:	00035614 	.word	0x00035614
   168c8:	00035528 	.word	0x00035528
   168cc:	0003556c 	.word	0x0003556c
   168d0:	000355a8 	.word	0x000355a8
   168d4:	000355e8 	.word	0x000355e8
   168d8:	0003562c 	.word	0x0003562c
        } else if (rc == ENOENT) {
   168dc:	2802      	cmp	r0, #2
   168de:	f040 8082 	bne.w	169e6 <cmd_set_adv_data_or_scan_rsp+0x3ca>
    if (adv_fields.num_public_tgt_addrs > 0) {
   168e2:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
   168e6:	b10b      	cbz	r3, 168ec <cmd_set_adv_data_or_scan_rsp+0x2d0>
        adv_fields.public_tgt_addr = (void *)public_tgt_addrs;
   168e8:	4b69      	ldr	r3, [pc, #420]	; (16a90 <cmd_set_adv_data_or_scan_rsp+0x474>)
   168ea:	9320      	str	r3, [sp, #128]	; 0x80
    adv_fields.appearance = parse_arg_uint16("appearance", &rc);
   168ec:	a903      	add	r1, sp, #12
   168ee:	4869      	ldr	r0, [pc, #420]	; (16a94 <cmd_set_adv_data_or_scan_rsp+0x478>)
   168f0:	f001 fffd 	bl	188ee <parse_arg_uint16>
   168f4:	f8ad 0086 	strh.w	r0, [sp, #134]	; 0x86
    if (rc == 0) {
   168f8:	9b03      	ldr	r3, [sp, #12]
   168fa:	2b00      	cmp	r3, #0
   168fc:	d178      	bne.n	169f0 <cmd_set_adv_data_or_scan_rsp+0x3d4>
        adv_fields.appearance_is_present = 1;
   168fe:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   16902:	f043 0301 	orr.w	r3, r3, #1
   16906:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
    adv_fields.adv_itvl = parse_arg_uint16("advertising_interval", &rc);
   1690a:	a903      	add	r1, sp, #12
   1690c:	4862      	ldr	r0, [pc, #392]	; (16a98 <cmd_set_adv_data_or_scan_rsp+0x47c>)
   1690e:	f001 ffee 	bl	188ee <parse_arg_uint16>
   16912:	f8ad 008a 	strh.w	r0, [sp, #138]	; 0x8a
    if (rc == 0) {
   16916:	9b03      	ldr	r3, [sp, #12]
   16918:	2b00      	cmp	r3, #0
   1691a:	d170      	bne.n	169fe <cmd_set_adv_data_or_scan_rsp+0x3e2>
        adv_fields.adv_itvl_is_present = 1;
   1691c:	f89d 308c 	ldrb.w	r3, [sp, #140]	; 0x8c
   16920:	f043 0301 	orr.w	r3, r3, #1
   16924:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
    rc = parse_arg_byte_stream("service_data_uuid32",
   16928:	ab07      	add	r3, sp, #28
   1692a:	4a5c      	ldr	r2, [pc, #368]	; (16a9c <cmd_set_adv_data_or_scan_rsp+0x480>)
   1692c:	211d      	movs	r1, #29
   1692e:	485c      	ldr	r0, [pc, #368]	; (16aa0 <cmd_set_adv_data_or_scan_rsp+0x484>)
   16930:	f002 f898 	bl	18a64 <parse_arg_byte_stream>
   16934:	9003      	str	r0, [sp, #12]
    if (rc == 0) {
   16936:	2800      	cmp	r0, #0
   16938:	d168      	bne.n	16a0c <cmd_set_adv_data_or_scan_rsp+0x3f0>
        adv_fields.svc_data_uuid32 = svc_data_uuid32;
   1693a:	4b58      	ldr	r3, [pc, #352]	; (16a9c <cmd_set_adv_data_or_scan_rsp+0x480>)
   1693c:	9324      	str	r3, [sp, #144]	; 0x90
        adv_fields.svc_data_uuid32_len = svc_data_uuid32_len;
   1693e:	9b07      	ldr	r3, [sp, #28]
   16940:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
    rc = parse_arg_byte_stream("service_data_uuid128",
   16944:	ab06      	add	r3, sp, #24
   16946:	4a57      	ldr	r2, [pc, #348]	; (16aa4 <cmd_set_adv_data_or_scan_rsp+0x488>)
   16948:	211d      	movs	r1, #29
   1694a:	4857      	ldr	r0, [pc, #348]	; (16aa8 <cmd_set_adv_data_or_scan_rsp+0x48c>)
   1694c:	f002 f88a 	bl	18a64 <parse_arg_byte_stream>
   16950:	9003      	str	r0, [sp, #12]
    if (rc == 0) {
   16952:	2800      	cmp	r0, #0
   16954:	d161      	bne.n	16a1a <cmd_set_adv_data_or_scan_rsp+0x3fe>
        adv_fields.svc_data_uuid128 = svc_data_uuid128;
   16956:	4b53      	ldr	r3, [pc, #332]	; (16aa4 <cmd_set_adv_data_or_scan_rsp+0x488>)
   16958:	9326      	str	r3, [sp, #152]	; 0x98
        adv_fields.svc_data_uuid128_len = svc_data_uuid128_len;
   1695a:	9b06      	ldr	r3, [sp, #24]
   1695c:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
    rc = parse_arg_byte_stream("uri", CMD_ADV_DATA_URI_MAX_LEN, uri, &uri_len);
   16960:	ab05      	add	r3, sp, #20
   16962:	4a52      	ldr	r2, [pc, #328]	; (16aac <cmd_set_adv_data_or_scan_rsp+0x490>)
   16964:	211d      	movs	r1, #29
   16966:	4852      	ldr	r0, [pc, #328]	; (16ab0 <cmd_set_adv_data_or_scan_rsp+0x494>)
   16968:	f002 f87c 	bl	18a64 <parse_arg_byte_stream>
   1696c:	9003      	str	r0, [sp, #12]
    if (rc == 0) {
   1696e:	2800      	cmp	r0, #0
   16970:	d15a      	bne.n	16a28 <cmd_set_adv_data_or_scan_rsp+0x40c>
        adv_fields.uri = uri;
   16972:	4b4e      	ldr	r3, [pc, #312]	; (16aac <cmd_set_adv_data_or_scan_rsp+0x490>)
   16974:	9328      	str	r3, [sp, #160]	; 0xa0
        adv_fields.uri_len = uri_len;
   16976:	9b05      	ldr	r3, [sp, #20]
   16978:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
    rc = parse_arg_byte_stream("mfg_data", CMD_ADV_DATA_MFG_DATA_MAX_LEN,
   1697c:	ab04      	add	r3, sp, #16
   1697e:	4a4d      	ldr	r2, [pc, #308]	; (16ab4 <cmd_set_adv_data_or_scan_rsp+0x498>)
   16980:	211d      	movs	r1, #29
   16982:	484d      	ldr	r0, [pc, #308]	; (16ab8 <cmd_set_adv_data_or_scan_rsp+0x49c>)
   16984:	f002 f86e 	bl	18a64 <parse_arg_byte_stream>
   16988:	9003      	str	r0, [sp, #12]
    if (rc == 0) {
   1698a:	2800      	cmp	r0, #0
   1698c:	d153      	bne.n	16a36 <cmd_set_adv_data_or_scan_rsp+0x41a>
        adv_fields.mfg_data = mfg_data;
   1698e:	4b49      	ldr	r3, [pc, #292]	; (16ab4 <cmd_set_adv_data_or_scan_rsp+0x498>)
   16990:	932a      	str	r3, [sp, #168]	; 0xa8
        adv_fields.mfg_data_len = mfg_data_len;
   16992:	9b04      	ldr	r3, [sp, #16]
   16994:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
    tmp = parse_arg_long_bounds("eddystone_measured_power", -100, 20, &rc);
   16998:	ab03      	add	r3, sp, #12
   1699a:	2214      	movs	r2, #20
   1699c:	f06f 0163 	mvn.w	r1, #99	; 0x63
   169a0:	4846      	ldr	r0, [pc, #280]	; (16abc <cmd_set_adv_data_or_scan_rsp+0x4a0>)
   169a2:	f001 ff2a 	bl	187fa <parse_arg_long_bounds>
    if (rc == 0) {
   169a6:	9b03      	ldr	r3, [sp, #12]
   169a8:	2b00      	cmp	r3, #0
   169aa:	d14b      	bne.n	16a44 <cmd_set_adv_data_or_scan_rsp+0x428>
        eddystone_measured_power = tmp;
   169ac:	b245      	sxtb	r5, r0
    eddystone_url_full = parse_arg_extract("eddystone_url");
   169ae:	4844      	ldr	r0, [pc, #272]	; (16ac0 <cmd_set_adv_data_or_scan_rsp+0x4a4>)
   169b0:	f001 fed8 	bl	18764 <parse_arg_extract>
    if (eddystone_url_full != NULL) {
   169b4:	2800      	cmp	r0, #0
   169b6:	d05c      	beq.n	16a72 <cmd_set_adv_data_or_scan_rsp+0x456>
        rc = parse_eddystone_url(eddystone_url_full, &eddystone_url_scheme,
   169b8:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   169bc:	9300      	str	r3, [sp, #0]
   169be:	f10d 0337 	add.w	r3, sp, #55	; 0x37
   169c2:	aa09      	add	r2, sp, #36	; 0x24
   169c4:	f10d 0135 	add.w	r1, sp, #53	; 0x35
   169c8:	f002 f934 	bl	18c34 <parse_eddystone_url>
   169cc:	9003      	str	r0, [sp, #12]
        if (rc != 0) {
   169ce:	2800      	cmp	r0, #0
   169d0:	d041      	beq.n	16a56 <cmd_set_adv_data_or_scan_rsp+0x43a>
    if (rc != 0) {
   169d2:	9803      	ldr	r0, [sp, #12]
   169d4:	2800      	cmp	r0, #0
   169d6:	f43f ae35 	beq.w	16644 <cmd_set_adv_data_or_scan_rsp+0x28>
        console_printf("error setting advertisement data; rc=%d\n", rc);
   169da:	4601      	mov	r1, r0
   169dc:	4839      	ldr	r0, [pc, #228]	; (16ac4 <cmd_set_adv_data_or_scan_rsp+0x4a8>)
   169de:	f005 fbab 	bl	1c138 <console_printf>
        return rc;
   169e2:	9803      	ldr	r0, [sp, #12]
   169e4:	e62e      	b.n	16644 <cmd_set_adv_data_or_scan_rsp+0x28>
            console_printf("invalid 'public_target_address' parameter\n");
   169e6:	4838      	ldr	r0, [pc, #224]	; (16ac8 <cmd_set_adv_data_or_scan_rsp+0x4ac>)
   169e8:	f005 fba6 	bl	1c138 <console_printf>
            return rc;
   169ec:	9803      	ldr	r0, [sp, #12]
   169ee:	e629      	b.n	16644 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   169f0:	2b02      	cmp	r3, #2
   169f2:	d08a      	beq.n	1690a <cmd_set_adv_data_or_scan_rsp+0x2ee>
        console_printf("invalid 'appearance' parameter\n");
   169f4:	4835      	ldr	r0, [pc, #212]	; (16acc <cmd_set_adv_data_or_scan_rsp+0x4b0>)
   169f6:	f005 fb9f 	bl	1c138 <console_printf>
        return rc;
   169fa:	9803      	ldr	r0, [sp, #12]
   169fc:	e622      	b.n	16644 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   169fe:	2b02      	cmp	r3, #2
   16a00:	d092      	beq.n	16928 <cmd_set_adv_data_or_scan_rsp+0x30c>
        console_printf("invalid 'advertising_interval' parameter\n");
   16a02:	4833      	ldr	r0, [pc, #204]	; (16ad0 <cmd_set_adv_data_or_scan_rsp+0x4b4>)
   16a04:	f005 fb98 	bl	1c138 <console_printf>
        return rc;
   16a08:	9803      	ldr	r0, [sp, #12]
   16a0a:	e61b      	b.n	16644 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   16a0c:	2802      	cmp	r0, #2
   16a0e:	d099      	beq.n	16944 <cmd_set_adv_data_or_scan_rsp+0x328>
        console_printf("invalid 'service_data_uuid32' parameter\n");
   16a10:	4830      	ldr	r0, [pc, #192]	; (16ad4 <cmd_set_adv_data_or_scan_rsp+0x4b8>)
   16a12:	f005 fb91 	bl	1c138 <console_printf>
        return rc;
   16a16:	9803      	ldr	r0, [sp, #12]
   16a18:	e614      	b.n	16644 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   16a1a:	2802      	cmp	r0, #2
   16a1c:	d0a0      	beq.n	16960 <cmd_set_adv_data_or_scan_rsp+0x344>
        console_printf("invalid 'service_data_uuid128' parameter\n");
   16a1e:	482e      	ldr	r0, [pc, #184]	; (16ad8 <cmd_set_adv_data_or_scan_rsp+0x4bc>)
   16a20:	f005 fb8a 	bl	1c138 <console_printf>
        return rc;
   16a24:	9803      	ldr	r0, [sp, #12]
   16a26:	e60d      	b.n	16644 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   16a28:	2802      	cmp	r0, #2
   16a2a:	d0a7      	beq.n	1697c <cmd_set_adv_data_or_scan_rsp+0x360>
        console_printf("invalid 'uri' parameter\n");
   16a2c:	482b      	ldr	r0, [pc, #172]	; (16adc <cmd_set_adv_data_or_scan_rsp+0x4c0>)
   16a2e:	f005 fb83 	bl	1c138 <console_printf>
        return rc;
   16a32:	9803      	ldr	r0, [sp, #12]
   16a34:	e606      	b.n	16644 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   16a36:	2802      	cmp	r0, #2
   16a38:	d0ae      	beq.n	16998 <cmd_set_adv_data_or_scan_rsp+0x37c>
        console_printf("invalid 'mfg_data' parameter\n");
   16a3a:	4829      	ldr	r0, [pc, #164]	; (16ae0 <cmd_set_adv_data_or_scan_rsp+0x4c4>)
   16a3c:	f005 fb7c 	bl	1c138 <console_printf>
        return rc;
   16a40:	9803      	ldr	r0, [sp, #12]
   16a42:	e5ff      	b.n	16644 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   16a44:	2b02      	cmp	r3, #2
   16a46:	d101      	bne.n	16a4c <cmd_set_adv_data_or_scan_rsp+0x430>
    int8_t eddystone_measured_power = 0;
   16a48:	2500      	movs	r5, #0
   16a4a:	e7b0      	b.n	169ae <cmd_set_adv_data_or_scan_rsp+0x392>
        console_printf("invalid 'eddystone_measured_power' parameter\n");
   16a4c:	4825      	ldr	r0, [pc, #148]	; (16ae4 <cmd_set_adv_data_or_scan_rsp+0x4c8>)
   16a4e:	f005 fb73 	bl	1c138 <console_printf>
        return rc;
   16a52:	9803      	ldr	r0, [sp, #12]
   16a54:	e5f6      	b.n	16644 <cmd_set_adv_data_or_scan_rsp+0x28>
        rc = ble_eddystone_set_adv_data_url(&adv_fields, eddystone_url_scheme,
   16a56:	9501      	str	r5, [sp, #4]
   16a58:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
   16a5c:	9300      	str	r3, [sp, #0]
   16a5e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   16a62:	aa09      	add	r2, sp, #36	; 0x24
   16a64:	f89d 1035 	ldrb.w	r1, [sp, #53]	; 0x35
   16a68:	a814      	add	r0, sp, #80	; 0x50
   16a6a:	f011 ff7b 	bl	28964 <ble_eddystone_set_adv_data_url>
   16a6e:	9003      	str	r0, [sp, #12]
   16a70:	e7af      	b.n	169d2 <cmd_set_adv_data_or_scan_rsp+0x3b6>
        if (scan_rsp) {
   16a72:	b124      	cbz	r4, 16a7e <cmd_set_adv_data_or_scan_rsp+0x462>
            rc = ble_gap_adv_rsp_set_fields(&adv_fields);
   16a74:	a814      	add	r0, sp, #80	; 0x50
   16a76:	f013 f895 	bl	29ba4 <ble_gap_adv_rsp_set_fields>
   16a7a:	9003      	str	r0, [sp, #12]
   16a7c:	e7a9      	b.n	169d2 <cmd_set_adv_data_or_scan_rsp+0x3b6>
            rc = ble_gap_adv_set_fields(&adv_fields);
   16a7e:	a814      	add	r0, sp, #80	; 0x50
   16a80:	f013 f87e 	bl	29b80 <ble_gap_adv_set_fields>
   16a84:	9003      	str	r0, [sp, #12]
   16a86:	e7a4      	b.n	169d2 <cmd_set_adv_data_or_scan_rsp+0x3b6>
        return -1;
   16a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16a8c:	e5da      	b.n	16644 <cmd_set_adv_data_or_scan_rsp+0x28>
   16a8e:	bf00      	nop
   16a90:	10001ed0 	.word	0x10001ed0
   16a94:	00035658 	.word	0x00035658
   16a98:	00035684 	.word	0x00035684
   16a9c:	10001f00 	.word	0x10001f00
   16aa0:	000356c8 	.word	0x000356c8
   16aa4:	10001f20 	.word	0x10001f20
   16aa8:	00035708 	.word	0x00035708
   16aac:	10001f40 	.word	0x10001f40
   16ab0:	0003574c 	.word	0x0003574c
   16ab4:	10001f60 	.word	0x10001f60
   16ab8:	0003576c 	.word	0x0003576c
   16abc:	00035798 	.word	0x00035798
   16ac0:	000357e4 	.word	0x000357e4
   16ac4:	000357f4 	.word	0x000357f4
   16ac8:	0003562c 	.word	0x0003562c
   16acc:	00035664 	.word	0x00035664
   16ad0:	0003569c 	.word	0x0003569c
   16ad4:	000356dc 	.word	0x000356dc
   16ad8:	00035720 	.word	0x00035720
   16adc:	00035750 	.word	0x00035750
   16ae0:	00035778 	.word	0x00035778
   16ae4:	000357b4 	.word	0x000357b4

00016ae8 <cmd_set_scan_rsp>:
{
   16ae8:	b508      	push	{r3, lr}
    return cmd_set_adv_data_or_scan_rsp(argc, argv, true, false);
   16aea:	2300      	movs	r3, #0
   16aec:	2201      	movs	r2, #1
   16aee:	f7ff fd95 	bl	1661c <cmd_set_adv_data_or_scan_rsp>
}
   16af2:	bd08      	pop	{r3, pc}

00016af4 <cmd_set_adv_data>:
{
   16af4:	b508      	push	{r3, lr}
    return cmd_set_adv_data_or_scan_rsp(argc, argv, false, false);
   16af6:	2300      	movs	r3, #0
   16af8:	461a      	mov	r2, r3
   16afa:	f7ff fd8f 	bl	1661c <cmd_set_adv_data_or_scan_rsp>
}
   16afe:	bd08      	pop	{r3, pc}

00016b00 <cmd_set_addr>:
{
   16b00:	b510      	push	{r4, lr}
   16b02:	b082      	sub	sp, #8
    rc = parse_dev_addr(NULL, cmd_addr_type, &addr);
   16b04:	466a      	mov	r2, sp
   16b06:	4911      	ldr	r1, [pc, #68]	; (16b4c <cmd_set_addr+0x4c>)
   16b08:	2000      	movs	r0, #0
   16b0a:	f7ff fa35 	bl	15f78 <parse_dev_addr>
    if (rc != 0) {
   16b0e:	4604      	mov	r4, r0
   16b10:	b940      	cbnz	r0, 16b24 <cmd_set_addr+0x24>
    switch (addr.type) {
   16b12:	f89d 3000 	ldrb.w	r3, [sp]
   16b16:	b14b      	cbz	r3, 16b2c <cmd_set_addr+0x2c>
   16b18:	2b01      	cmp	r3, #1
   16b1a:	d011      	beq.n	16b40 <cmd_set_addr+0x40>
   16b1c:	2411      	movs	r4, #17
}
   16b1e:	4620      	mov	r0, r4
   16b20:	b002      	add	sp, #8
   16b22:	bd10      	pop	{r4, pc}
        console_printf("invalid 'addr' parameter\n");
   16b24:	480a      	ldr	r0, [pc, #40]	; (16b50 <cmd_set_addr+0x50>)
   16b26:	f005 fb07 	bl	1c138 <console_printf>
        return rc;
   16b2a:	e7f8      	b.n	16b1e <cmd_set_addr+0x1e>
        memcpy(g_dev_addr, addr.val, 6);
   16b2c:	4809      	ldr	r0, [pc, #36]	; (16b54 <cmd_set_addr+0x54>)
   16b2e:	f8dd 3001 	ldr.w	r3, [sp, #1]
   16b32:	6003      	str	r3, [r0, #0]
   16b34:	f8bd 3005 	ldrh.w	r3, [sp, #5]
   16b38:	8083      	strh	r3, [r0, #4]
        ble_hs_id_set_pub(g_dev_addr);
   16b3a:	f019 f925 	bl	2fd88 <ble_hs_id_set_pub>
        break;
   16b3e:	e7ee      	b.n	16b1e <cmd_set_addr+0x1e>
        rc = ble_hs_id_set_rnd(addr.val);
   16b40:	f10d 0001 	add.w	r0, sp, #1
   16b44:	f019 f92e 	bl	2fda4 <ble_hs_id_set_rnd>
   16b48:	4604      	mov	r4, r0
        if (rc != 0) {
   16b4a:	e7e8      	b.n	16b1e <cmd_set_addr+0x1e>
   16b4c:	0003774c 	.word	0x0003774c
   16b50:	00035078 	.word	0x00035078
   16b54:	1000434c 	.word	0x1000434c

00016b58 <cmd_set>:
{
   16b58:	b570      	push	{r4, r5, r6, lr}
   16b5a:	b086      	sub	sp, #24
    rc = parse_arg_all(argc - 1, argv + 1);
   16b5c:	3104      	adds	r1, #4
   16b5e:	3801      	subs	r0, #1
   16b60:	f002 f81c 	bl	18b9c <parse_arg_all>
   16b64:	4604      	mov	r4, r0
   16b66:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   16b68:	b110      	cbz	r0, 16b70 <cmd_set+0x18>
}
   16b6a:	4620      	mov	r0, r4
   16b6c:	b006      	add	sp, #24
   16b6e:	bd70      	pop	{r4, r5, r6, pc}
    rc = parse_arg_find_idx("addr");
   16b70:	4820      	ldr	r0, [pc, #128]	; (16bf4 <cmd_set+0x9c>)
   16b72:	f001 fdc3 	bl	186fc <parse_arg_find_idx>
   16b76:	9001      	str	r0, [sp, #4]
    if (rc != -1) {
   16b78:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   16b7c:	d01f      	beq.n	16bbe <cmd_set+0x66>
        rc = cmd_set_addr();
   16b7e:	f7ff ffbf 	bl	16b00 <cmd_set_addr>
   16b82:	9001      	str	r0, [sp, #4]
        if (rc != 0) {
   16b84:	2800      	cmp	r0, #0
   16b86:	d132      	bne.n	16bee <cmd_set+0x96>
        good = 1;
   16b88:	2601      	movs	r6, #1
    mtu = parse_arg_uint16("mtu", &rc);
   16b8a:	a901      	add	r1, sp, #4
   16b8c:	481a      	ldr	r0, [pc, #104]	; (16bf8 <cmd_set+0xa0>)
   16b8e:	f001 feae 	bl	188ee <parse_arg_uint16>
    if (rc == 0) {
   16b92:	9b01      	ldr	r3, [sp, #4]
   16b94:	b1ab      	cbz	r3, 16bc2 <cmd_set+0x6a>
    } else if (rc != ENOENT) {
   16b96:	2b02      	cmp	r3, #2
   16b98:	d11a      	bne.n	16bd0 <cmd_set+0x78>
    rc = parse_arg_byte_stream_exact_length("irk", irk, 16);
   16b9a:	2210      	movs	r2, #16
   16b9c:	a902      	add	r1, sp, #8
   16b9e:	4817      	ldr	r0, [pc, #92]	; (16bfc <cmd_set+0xa4>)
   16ba0:	f001 ff74 	bl	18a8c <parse_arg_byte_stream_exact_length>
   16ba4:	4605      	mov	r5, r0
   16ba6:	9001      	str	r0, [sp, #4]
    if (rc == 0) {
   16ba8:	b1b8      	cbz	r0, 16bda <cmd_set+0x82>
    } else if (rc != ENOENT) {
   16baa:	2802      	cmp	r0, #2
   16bac:	d11a      	bne.n	16be4 <cmd_set+0x8c>
    if (!good) {
   16bae:	2e00      	cmp	r6, #0
   16bb0:	d1db      	bne.n	16b6a <cmd_set+0x12>
        console_printf("Error: no valid settings specified\n");
   16bb2:	4813      	ldr	r0, [pc, #76]	; (16c00 <cmd_set+0xa8>)
   16bb4:	f005 fac0 	bl	1c138 <console_printf>
        return -1;
   16bb8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16bbc:	e7d5      	b.n	16b6a <cmd_set+0x12>
    int good = 0;
   16bbe:	4626      	mov	r6, r4
   16bc0:	e7e3      	b.n	16b8a <cmd_set+0x32>
        rc = ble_att_set_preferred_mtu(mtu);
   16bc2:	f00f fe87 	bl	268d4 <ble_att_set_preferred_mtu>
   16bc6:	9001      	str	r0, [sp, #4]
        if (rc == 0) {
   16bc8:	2800      	cmp	r0, #0
   16bca:	d1e6      	bne.n	16b9a <cmd_set+0x42>
            good = 1;
   16bcc:	2601      	movs	r6, #1
   16bce:	e7e4      	b.n	16b9a <cmd_set+0x42>
        console_printf("invalid 'mtu' parameter\n");
   16bd0:	480c      	ldr	r0, [pc, #48]	; (16c04 <cmd_set+0xac>)
   16bd2:	f005 fab1 	bl	1c138 <console_printf>
        return rc;
   16bd6:	9c01      	ldr	r4, [sp, #4]
   16bd8:	e7c7      	b.n	16b6a <cmd_set+0x12>
        ble_hs_pvcy_set_our_irk(irk);
   16bda:	a802      	add	r0, sp, #8
   16bdc:	f019 fb6c 	bl	302b8 <ble_hs_pvcy_set_our_irk>
    return 0;
   16be0:	462c      	mov	r4, r5
   16be2:	e7c2      	b.n	16b6a <cmd_set+0x12>
        console_printf("invalid 'irk' parameter\n");
   16be4:	4808      	ldr	r0, [pc, #32]	; (16c08 <cmd_set+0xb0>)
   16be6:	f005 faa7 	bl	1c138 <console_printf>
        return rc;
   16bea:	9c01      	ldr	r4, [sp, #4]
   16bec:	e7bd      	b.n	16b6a <cmd_set+0x12>
            return rc;
   16bee:	4604      	mov	r4, r0
   16bf0:	e7bb      	b.n	16b6a <cmd_set+0x12>
   16bf2:	bf00      	nop
   16bf4:	00035070 	.word	0x00035070
   16bf8:	00035820 	.word	0x00035820
   16bfc:	000350fc 	.word	0x000350fc
   16c00:	00035840 	.word	0x00035840
   16c04:	00035824 	.word	0x00035824
   16c08:	00035100 	.word	0x00035100

00016c0c <cmd_scan>:
{
   16c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16c0e:	b08f      	sub	sp, #60	; 0x3c
   16c10:	4604      	mov	r4, r0
   16c12:	460d      	mov	r5, r1
    struct ble_gap_disc_params params = {0};
   16c14:	2300      	movs	r3, #0
   16c16:	930c      	str	r3, [sp, #48]	; 0x30
   16c18:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    struct ble_gap_ext_disc_params uncoded = {0};
   16c1c:	930a      	str	r3, [sp, #40]	; 0x28
   16c1e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    struct ble_gap_ext_disc_params coded = {0};
   16c22:	9308      	str	r3, [sp, #32]
   16c24:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    rc = parse_arg_all(argc - 1, argv + 1);
   16c28:	3104      	adds	r1, #4
   16c2a:	3801      	subs	r0, #1
   16c2c:	f001 ffb6 	bl	18b9c <parse_arg_all>
   16c30:	9007      	str	r0, [sp, #28]
    if (rc != 0) {
   16c32:	2800      	cmp	r0, #0
   16c34:	f040 8094 	bne.w	16d60 <cmd_scan+0x154>
    if (argc > 1 && strcmp(argv[1], "cancel") == 0) {
   16c38:	2c01      	cmp	r4, #1
   16c3a:	dd05      	ble.n	16c48 <cmd_scan+0x3c>
   16c3c:	49a6      	ldr	r1, [pc, #664]	; (16ed8 <cmd_scan+0x2cc>)
   16c3e:	6868      	ldr	r0, [r5, #4]
   16c40:	f004 f861 	bl	1ad06 <strcmp>
   16c44:	2800      	cmp	r0, #0
   16c46:	d07d      	beq.n	16d44 <cmd_scan+0x138>
    extended = parse_arg_kv_dflt("extended", cmd_scan_ext_types, 0, &rc);
   16c48:	ab07      	add	r3, sp, #28
   16c4a:	2200      	movs	r2, #0
   16c4c:	49a3      	ldr	r1, [pc, #652]	; (16edc <cmd_scan+0x2d0>)
   16c4e:	48a4      	ldr	r0, [pc, #656]	; (16ee0 <cmd_scan+0x2d4>)
   16c50:	f001 fef5 	bl	18a3e <parse_arg_kv_dflt>
   16c54:	4604      	mov	r4, r0
   16c56:	b2c6      	uxtb	r6, r0
    if (rc != 0) {
   16c58:	9b07      	ldr	r3, [sp, #28]
   16c5a:	2b00      	cmp	r3, #0
   16c5c:	d17c      	bne.n	16d58 <cmd_scan+0x14c>
    duration_ms = parse_arg_time_dflt("duration", 10000, BLE_HS_FOREVER, &rc);
   16c5e:	ab07      	add	r3, sp, #28
   16c60:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   16c64:	f242 7110 	movw	r1, #10000	; 0x2710
   16c68:	489e      	ldr	r0, [pc, #632]	; (16ee4 <cmd_scan+0x2d8>)
   16c6a:	f001 fe95 	bl	18998 <parse_arg_time_dflt>
   16c6e:	4605      	mov	r5, r0
    if (rc != 0) {
   16c70:	9b07      	ldr	r3, [sp, #28]
   16c72:	2b00      	cmp	r3, #0
   16c74:	d176      	bne.n	16d64 <cmd_scan+0x158>
    params.limited = parse_arg_bool_dflt("limited", 0, &rc);
   16c76:	aa07      	add	r2, sp, #28
   16c78:	2100      	movs	r1, #0
   16c7a:	489b      	ldr	r0, [pc, #620]	; (16ee8 <cmd_scan+0x2dc>)
   16c7c:	f001 fe23 	bl	188c6 <parse_arg_bool_dflt>
   16c80:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
   16c84:	f360 0300 	bfi	r3, r0, #0, #1
   16c88:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    if (rc != 0) {
   16c8c:	9b07      	ldr	r3, [sp, #28]
   16c8e:	2b00      	cmp	r3, #0
   16c90:	d16d      	bne.n	16d6e <cmd_scan+0x162>
    params.passive = parse_arg_bool_dflt("passive", 0, &rc);
   16c92:	aa07      	add	r2, sp, #28
   16c94:	2100      	movs	r1, #0
   16c96:	4895      	ldr	r0, [pc, #596]	; (16eec <cmd_scan+0x2e0>)
   16c98:	f001 fe15 	bl	188c6 <parse_arg_bool_dflt>
   16c9c:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
   16ca0:	f360 0341 	bfi	r3, r0, #1, #1
   16ca4:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    if (rc != 0) {
   16ca8:	9b07      	ldr	r3, [sp, #28]
   16caa:	2b00      	cmp	r3, #0
   16cac:	d164      	bne.n	16d78 <cmd_scan+0x16c>
    params.itvl = parse_arg_time_dflt("interval", 625, 0, &rc);
   16cae:	ab07      	add	r3, sp, #28
   16cb0:	2200      	movs	r2, #0
   16cb2:	f240 2171 	movw	r1, #625	; 0x271
   16cb6:	488e      	ldr	r0, [pc, #568]	; (16ef0 <cmd_scan+0x2e4>)
   16cb8:	f001 fe6e 	bl	18998 <parse_arg_time_dflt>
   16cbc:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
    if (rc != 0) {
   16cc0:	9b07      	ldr	r3, [sp, #28]
   16cc2:	2b00      	cmp	r3, #0
   16cc4:	d15d      	bne.n	16d82 <cmd_scan+0x176>
    params.window = parse_arg_time_dflt("window", 625, 0, &rc);
   16cc6:	ab07      	add	r3, sp, #28
   16cc8:	2200      	movs	r2, #0
   16cca:	f240 2171 	movw	r1, #625	; 0x271
   16cce:	4889      	ldr	r0, [pc, #548]	; (16ef4 <cmd_scan+0x2e8>)
   16cd0:	f001 fe62 	bl	18998 <parse_arg_time_dflt>
   16cd4:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
    if (rc != 0) {
   16cd8:	9b07      	ldr	r3, [sp, #28]
   16cda:	2b00      	cmp	r3, #0
   16cdc:	d156      	bne.n	16d8c <cmd_scan+0x180>
    params.filter_policy = parse_arg_kv_dflt("filter", cmd_scan_filt_policies,
   16cde:	ab07      	add	r3, sp, #28
   16ce0:	2200      	movs	r2, #0
   16ce2:	4985      	ldr	r1, [pc, #532]	; (16ef8 <cmd_scan+0x2ec>)
   16ce4:	4885      	ldr	r0, [pc, #532]	; (16efc <cmd_scan+0x2f0>)
   16ce6:	f001 feaa 	bl	18a3e <parse_arg_kv_dflt>
   16cea:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    if (rc != 0) {
   16cee:	9b07      	ldr	r3, [sp, #28]
   16cf0:	2b00      	cmp	r3, #0
   16cf2:	d150      	bne.n	16d96 <cmd_scan+0x18a>
    params.filter_duplicates = parse_arg_bool_dflt("nodups", 0, &rc);
   16cf4:	aa07      	add	r2, sp, #28
   16cf6:	2100      	movs	r1, #0
   16cf8:	4881      	ldr	r0, [pc, #516]	; (16f00 <cmd_scan+0x2f4>)
   16cfa:	f001 fde4 	bl	188c6 <parse_arg_bool_dflt>
   16cfe:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
   16d02:	f360 0382 	bfi	r3, r0, #2, #1
   16d06:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    if (rc != 0) {
   16d0a:	9b07      	ldr	r3, [sp, #28]
   16d0c:	2b00      	cmp	r3, #0
   16d0e:	d147      	bne.n	16da0 <cmd_scan+0x194>
    own_addr_type = parse_arg_kv_dflt("own_addr_type", cmd_own_addr_types,
   16d10:	ab07      	add	r3, sp, #28
   16d12:	2200      	movs	r2, #0
   16d14:	497b      	ldr	r1, [pc, #492]	; (16f04 <cmd_scan+0x2f8>)
   16d16:	487c      	ldr	r0, [pc, #496]	; (16f08 <cmd_scan+0x2fc>)
   16d18:	f001 fe91 	bl	18a3e <parse_arg_kv_dflt>
   16d1c:	b2c7      	uxtb	r7, r0
    if (rc != 0) {
   16d1e:	9b07      	ldr	r3, [sp, #28]
   16d20:	2b00      	cmp	r3, #0
   16d22:	d142      	bne.n	16daa <cmd_scan+0x19e>
    if (extended == 0) {
   16d24:	2e00      	cmp	r6, #0
   16d26:	d145      	bne.n	16db4 <cmd_scan+0x1a8>
        rc = btshell_scan(own_addr_type, duration_ms, &params, &g_scan_opts);
   16d28:	4b78      	ldr	r3, [pc, #480]	; (16f0c <cmd_scan+0x300>)
   16d2a:	aa0c      	add	r2, sp, #48	; 0x30
   16d2c:	4629      	mov	r1, r5
   16d2e:	4638      	mov	r0, r7
   16d30:	f7fe fd10 	bl	15754 <btshell_scan>
   16d34:	9007      	str	r0, [sp, #28]
        if (rc != 0) {
   16d36:	b198      	cbz	r0, 16d60 <cmd_scan+0x154>
            console_printf("error scanning; rc=%d\n", rc);
   16d38:	4601      	mov	r1, r0
   16d3a:	4875      	ldr	r0, [pc, #468]	; (16f10 <cmd_scan+0x304>)
   16d3c:	f005 f9fc 	bl	1c138 <console_printf>
            return rc;
   16d40:	9807      	ldr	r0, [sp, #28]
   16d42:	e00d      	b.n	16d60 <cmd_scan+0x154>
        rc = btshell_scan_cancel();
   16d44:	f7fe fd20 	bl	15788 <btshell_scan_cancel>
   16d48:	9007      	str	r0, [sp, #28]
        if (rc != 0) {
   16d4a:	b148      	cbz	r0, 16d60 <cmd_scan+0x154>
            console_printf("scan cancel fail: %d\n", rc);
   16d4c:	4601      	mov	r1, r0
   16d4e:	4871      	ldr	r0, [pc, #452]	; (16f14 <cmd_scan+0x308>)
   16d50:	f005 f9f2 	bl	1c138 <console_printf>
            return rc;
   16d54:	9807      	ldr	r0, [sp, #28]
   16d56:	e003      	b.n	16d60 <cmd_scan+0x154>
        console_printf("invalid 'extended' parameter\n");
   16d58:	486f      	ldr	r0, [pc, #444]	; (16f18 <cmd_scan+0x30c>)
   16d5a:	f005 f9ed 	bl	1c138 <console_printf>
        return rc;
   16d5e:	9807      	ldr	r0, [sp, #28]
}
   16d60:	b00f      	add	sp, #60	; 0x3c
   16d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
        console_printf("invalid 'duration' parameter\n");
   16d64:	486d      	ldr	r0, [pc, #436]	; (16f1c <cmd_scan+0x310>)
   16d66:	f005 f9e7 	bl	1c138 <console_printf>
        return rc;
   16d6a:	9807      	ldr	r0, [sp, #28]
   16d6c:	e7f8      	b.n	16d60 <cmd_scan+0x154>
        console_printf("invalid 'limited' parameter\n");
   16d6e:	486c      	ldr	r0, [pc, #432]	; (16f20 <cmd_scan+0x314>)
   16d70:	f005 f9e2 	bl	1c138 <console_printf>
        return rc;
   16d74:	9807      	ldr	r0, [sp, #28]
   16d76:	e7f3      	b.n	16d60 <cmd_scan+0x154>
        console_printf("invalid 'passive' parameter\n");
   16d78:	486a      	ldr	r0, [pc, #424]	; (16f24 <cmd_scan+0x318>)
   16d7a:	f005 f9dd 	bl	1c138 <console_printf>
        return rc;
   16d7e:	9807      	ldr	r0, [sp, #28]
   16d80:	e7ee      	b.n	16d60 <cmd_scan+0x154>
        console_printf("invalid 'interval' parameter\n");
   16d82:	4869      	ldr	r0, [pc, #420]	; (16f28 <cmd_scan+0x31c>)
   16d84:	f005 f9d8 	bl	1c138 <console_printf>
        return rc;
   16d88:	9807      	ldr	r0, [sp, #28]
   16d8a:	e7e9      	b.n	16d60 <cmd_scan+0x154>
        console_printf("invalid 'window' parameter\n");
   16d8c:	4867      	ldr	r0, [pc, #412]	; (16f2c <cmd_scan+0x320>)
   16d8e:	f005 f9d3 	bl	1c138 <console_printf>
        return rc;
   16d92:	9807      	ldr	r0, [sp, #28]
   16d94:	e7e4      	b.n	16d60 <cmd_scan+0x154>
        console_printf("invalid 'filter' parameter\n");
   16d96:	4866      	ldr	r0, [pc, #408]	; (16f30 <cmd_scan+0x324>)
   16d98:	f005 f9ce 	bl	1c138 <console_printf>
        return rc;
   16d9c:	9807      	ldr	r0, [sp, #28]
   16d9e:	e7df      	b.n	16d60 <cmd_scan+0x154>
        console_printf("invalid 'nodups' parameter\n");
   16da0:	4864      	ldr	r0, [pc, #400]	; (16f34 <cmd_scan+0x328>)
   16da2:	f005 f9c9 	bl	1c138 <console_printf>
        return rc;
   16da6:	9807      	ldr	r0, [sp, #28]
   16da8:	e7da      	b.n	16d60 <cmd_scan+0x154>
        console_printf("invalid 'own_addr_type' parameter\n");
   16daa:	4863      	ldr	r0, [pc, #396]	; (16f38 <cmd_scan+0x32c>)
   16dac:	f005 f9c4 	bl	1c138 <console_printf>
        return rc;
   16db0:	9807      	ldr	r0, [sp, #28]
   16db2:	e7d5      	b.n	16d60 <cmd_scan+0x154>
    uncoded.passive = params.passive;
   16db4:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
   16db8:	f3c3 0340 	ubfx	r3, r3, #1, #1
   16dbc:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   16dc0:	f363 0200 	bfi	r2, r3, #0, #1
   16dc4:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
    uncoded.itvl = params.itvl;
   16dc8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   16dcc:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    uncoded.window = params.window;
   16dd0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   16dd4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    duration = parse_arg_time_dflt("extended_duration", 10000, 0, &rc);
   16dd8:	ab07      	add	r3, sp, #28
   16dda:	2200      	movs	r2, #0
   16ddc:	f242 7110 	movw	r1, #10000	; 0x2710
   16de0:	4856      	ldr	r0, [pc, #344]	; (16f3c <cmd_scan+0x330>)
   16de2:	f001 fdd9 	bl	18998 <parse_arg_time_dflt>
   16de6:	b285      	uxth	r5, r0
    if (rc != 0) {
   16de8:	9b07      	ldr	r3, [sp, #28]
   16dea:	2b00      	cmp	r3, #0
   16dec:	d140      	bne.n	16e70 <cmd_scan+0x264>
    period = parse_arg_time_dflt("extended_period", 1280000, 0, &rc);
   16dee:	ab07      	add	r3, sp, #28
   16df0:	2200      	movs	r2, #0
   16df2:	4953      	ldr	r1, [pc, #332]	; (16f40 <cmd_scan+0x334>)
   16df4:	4853      	ldr	r0, [pc, #332]	; (16f44 <cmd_scan+0x338>)
   16df6:	f001 fdcf 	bl	18998 <parse_arg_time_dflt>
   16dfa:	b286      	uxth	r6, r0
    if (rc != 0) {
   16dfc:	9b07      	ldr	r3, [sp, #28]
   16dfe:	2b00      	cmp	r3, #0
   16e00:	d13b      	bne.n	16e7a <cmd_scan+0x26e>
    coded.itvl = parse_arg_time_dflt("longrange_interval", 625, 0, &rc);
   16e02:	ab07      	add	r3, sp, #28
   16e04:	2200      	movs	r2, #0
   16e06:	f240 2171 	movw	r1, #625	; 0x271
   16e0a:	484f      	ldr	r0, [pc, #316]	; (16f48 <cmd_scan+0x33c>)
   16e0c:	f001 fdc4 	bl	18998 <parse_arg_time_dflt>
   16e10:	f8ad 0020 	strh.w	r0, [sp, #32]
    if (rc != 0) {
   16e14:	9b07      	ldr	r3, [sp, #28]
   16e16:	2b00      	cmp	r3, #0
   16e18:	d134      	bne.n	16e84 <cmd_scan+0x278>
    coded.window = parse_arg_time_dflt("longrange_window", 625, 0, &rc);
   16e1a:	ab07      	add	r3, sp, #28
   16e1c:	2200      	movs	r2, #0
   16e1e:	f240 2171 	movw	r1, #625	; 0x271
   16e22:	484a      	ldr	r0, [pc, #296]	; (16f4c <cmd_scan+0x340>)
   16e24:	f001 fdb8 	bl	18998 <parse_arg_time_dflt>
   16e28:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
    if (rc != 0) {
   16e2c:	9b07      	ldr	r3, [sp, #28]
   16e2e:	bb73      	cbnz	r3, 16e8e <cmd_scan+0x282>
    coded.passive = parse_arg_uint16_dflt("longrange_passive", 0, &rc);
   16e30:	aa07      	add	r2, sp, #28
   16e32:	2100      	movs	r1, #0
   16e34:	4846      	ldr	r0, [pc, #280]	; (16f50 <cmd_scan+0x344>)
   16e36:	f001 fd9d 	bl	18974 <parse_arg_uint16_dflt>
   16e3a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   16e3e:	f360 0300 	bfi	r3, r0, #0, #1
   16e42:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if (rc != 0) {
   16e46:	9b07      	ldr	r3, [sp, #28]
   16e48:	bb33      	cbnz	r3, 16e98 <cmd_scan+0x28c>
    switch (extended) {
   16e4a:	b2e4      	uxtb	r4, r4
   16e4c:	2c02      	cmp	r4, #2
   16e4e:	f000 808b 	beq.w	16f68 <cmd_scan+0x35c>
   16e52:	2c03      	cmp	r4, #3
   16e54:	f000 809f 	beq.w	16f96 <cmd_scan+0x38a>
   16e58:	2c01      	cmp	r4, #1
   16e5a:	d022      	beq.n	16ea2 <cmd_scan+0x296>
        assert(0);
   16e5c:	f7fd fc4a 	bl	146f4 <hal_debugger_connected>
   16e60:	b100      	cbz	r0, 16e64 <cmd_scan+0x258>
   16e62:	be01      	bkpt	0x0001
   16e64:	2300      	movs	r3, #0
   16e66:	461a      	mov	r2, r3
   16e68:	4619      	mov	r1, r3
   16e6a:	4618      	mov	r0, r3
   16e6c:	f001 ff60 	bl	18d30 <__assert_func>
        console_printf("invalid 'extended_duration' parameter\n");
   16e70:	4838      	ldr	r0, [pc, #224]	; (16f54 <cmd_scan+0x348>)
   16e72:	f005 f961 	bl	1c138 <console_printf>
        return rc;
   16e76:	9807      	ldr	r0, [sp, #28]
   16e78:	e772      	b.n	16d60 <cmd_scan+0x154>
        console_printf("invalid 'extended_period' parameter\n");
   16e7a:	4837      	ldr	r0, [pc, #220]	; (16f58 <cmd_scan+0x34c>)
   16e7c:	f005 f95c 	bl	1c138 <console_printf>
        return rc;
   16e80:	9807      	ldr	r0, [sp, #28]
   16e82:	e76d      	b.n	16d60 <cmd_scan+0x154>
        console_printf("invalid 'longrange_interval' parameter\n");
   16e84:	4835      	ldr	r0, [pc, #212]	; (16f5c <cmd_scan+0x350>)
   16e86:	f005 f957 	bl	1c138 <console_printf>
        return rc;
   16e8a:	9807      	ldr	r0, [sp, #28]
   16e8c:	e768      	b.n	16d60 <cmd_scan+0x154>
        console_printf("invalid 'longrange_window' parameter\n");
   16e8e:	4834      	ldr	r0, [pc, #208]	; (16f60 <cmd_scan+0x354>)
   16e90:	f005 f952 	bl	1c138 <console_printf>
        return rc;
   16e94:	9807      	ldr	r0, [sp, #28]
   16e96:	e763      	b.n	16d60 <cmd_scan+0x154>
        console_printf("invalid 'longrange_passive' parameter\n");
   16e98:	4832      	ldr	r0, [pc, #200]	; (16f64 <cmd_scan+0x358>)
   16e9a:	f005 f94d 	bl	1c138 <console_printf>
        return rc;
   16e9e:	9807      	ldr	r0, [sp, #28]
   16ea0:	e75e      	b.n	16d60 <cmd_scan+0x154>
                              params.filter_duplicates, params.filter_policy,
   16ea2:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
                              params.limited, &uncoded, NULL,
   16ea6:	f003 0201 	and.w	r2, r3, #1
        rc = btshell_ext_scan(own_addr_type, duration, period,
   16eaa:	4918      	ldr	r1, [pc, #96]	; (16f0c <cmd_scan+0x300>)
   16eac:	9104      	str	r1, [sp, #16]
   16eae:	2100      	movs	r1, #0
   16eb0:	9103      	str	r1, [sp, #12]
   16eb2:	a90a      	add	r1, sp, #40	; 0x28
   16eb4:	9102      	str	r1, [sp, #8]
   16eb6:	9201      	str	r2, [sp, #4]
   16eb8:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   16ebc:	9200      	str	r2, [sp, #0]
   16ebe:	f3c3 0380 	ubfx	r3, r3, #2, #1
   16ec2:	4632      	mov	r2, r6
   16ec4:	4629      	mov	r1, r5
   16ec6:	4638      	mov	r0, r7
   16ec8:	f7fe fc50 	bl	1576c <btshell_ext_scan>
   16ecc:	9007      	str	r0, [sp, #28]
    if (rc != 0) {
   16ece:	9907      	ldr	r1, [sp, #28]
   16ed0:	2900      	cmp	r1, #0
   16ed2:	d177      	bne.n	16fc4 <cmd_scan+0x3b8>
    return rc;
   16ed4:	9807      	ldr	r0, [sp, #28]
   16ed6:	e743      	b.n	16d60 <cmd_scan+0x154>
   16ed8:	00035864 	.word	0x00035864
   16edc:	10000134 	.word	0x10000134
   16ee0:	00035884 	.word	0x00035884
   16ee4:	000358b0 	.word	0x000358b0
   16ee8:	000358dc 	.word	0x000358dc
   16eec:	00035904 	.word	0x00035904
   16ef0:	00035690 	.word	0x00035690
   16ef4:	0003594c 	.word	0x0003594c
   16ef8:	0003783c 	.word	0x0003783c
   16efc:	00035970 	.word	0x00035970
   16f00:	00035994 	.word	0x00035994
   16f04:	000377ec 	.word	0x000377ec
   16f08:	000359b8 	.word	0x000359b8
   16f0c:	1000015c 	.word	0x1000015c
   16f10:	000359ec 	.word	0x000359ec
   16f14:	0003586c 	.word	0x0003586c
   16f18:	00035890 	.word	0x00035890
   16f1c:	000358bc 	.word	0x000358bc
   16f20:	000358e4 	.word	0x000358e4
   16f24:	0003590c 	.word	0x0003590c
   16f28:	0003592c 	.word	0x0003592c
   16f2c:	00035954 	.word	0x00035954
   16f30:	00035978 	.word	0x00035978
   16f34:	0003599c 	.word	0x0003599c
   16f38:	000359c8 	.word	0x000359c8
   16f3c:	00035a04 	.word	0x00035a04
   16f40:	00138800 	.word	0x00138800
   16f44:	00035a40 	.word	0x00035a40
   16f48:	00035a78 	.word	0x00035a78
   16f4c:	00035ab4 	.word	0x00035ab4
   16f50:	00035af0 	.word	0x00035af0
   16f54:	00035a18 	.word	0x00035a18
   16f58:	00035a50 	.word	0x00035a50
   16f5c:	00035a8c 	.word	0x00035a8c
   16f60:	00035ac8 	.word	0x00035ac8
   16f64:	00035b04 	.word	0x00035b04
                              params.filter_duplicates, params.filter_policy,
   16f68:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
                              params.limited, NULL, &coded,
   16f6c:	f003 0201 	and.w	r2, r3, #1
        rc = btshell_ext_scan(own_addr_type, duration, period,
   16f70:	4916      	ldr	r1, [pc, #88]	; (16fcc <cmd_scan+0x3c0>)
   16f72:	9104      	str	r1, [sp, #16]
   16f74:	a908      	add	r1, sp, #32
   16f76:	9103      	str	r1, [sp, #12]
   16f78:	2100      	movs	r1, #0
   16f7a:	9102      	str	r1, [sp, #8]
   16f7c:	9201      	str	r2, [sp, #4]
   16f7e:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   16f82:	9200      	str	r2, [sp, #0]
   16f84:	f3c3 0380 	ubfx	r3, r3, #2, #1
   16f88:	4632      	mov	r2, r6
   16f8a:	4629      	mov	r1, r5
   16f8c:	4638      	mov	r0, r7
   16f8e:	f7fe fbed 	bl	1576c <btshell_ext_scan>
   16f92:	9007      	str	r0, [sp, #28]
        break;
   16f94:	e79b      	b.n	16ece <cmd_scan+0x2c2>
                              params.filter_duplicates, params.filter_policy,
   16f96:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
                              params.limited, &uncoded, &coded,
   16f9a:	f003 0201 	and.w	r2, r3, #1
        rc = btshell_ext_scan(own_addr_type, duration, period,
   16f9e:	490b      	ldr	r1, [pc, #44]	; (16fcc <cmd_scan+0x3c0>)
   16fa0:	9104      	str	r1, [sp, #16]
   16fa2:	a908      	add	r1, sp, #32
   16fa4:	9103      	str	r1, [sp, #12]
   16fa6:	a90a      	add	r1, sp, #40	; 0x28
   16fa8:	9102      	str	r1, [sp, #8]
   16faa:	9201      	str	r2, [sp, #4]
   16fac:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   16fb0:	9200      	str	r2, [sp, #0]
   16fb2:	f3c3 0380 	ubfx	r3, r3, #2, #1
   16fb6:	4632      	mov	r2, r6
   16fb8:	4629      	mov	r1, r5
   16fba:	4638      	mov	r0, r7
   16fbc:	f7fe fbd6 	bl	1576c <btshell_ext_scan>
   16fc0:	9007      	str	r0, [sp, #28]
        break;
   16fc2:	e784      	b.n	16ece <cmd_scan+0x2c2>
        console_printf("error scanning; rc=%d\n", rc);
   16fc4:	4802      	ldr	r0, [pc, #8]	; (16fd0 <cmd_scan+0x3c4>)
   16fc6:	f005 f8b7 	bl	1c138 <console_printf>
   16fca:	e783      	b.n	16ed4 <cmd_scan+0x2c8>
   16fcc:	1000015c 	.word	0x1000015c
   16fd0:	000359ec 	.word	0x000359ec

00016fd4 <cmd_show_conn>:
{
   16fd4:	b510      	push	{r4, lr}
   16fd6:	b08c      	sub	sp, #48	; 0x30
    for (i = 0; i < btshell_num_conns; i++) {
   16fd8:	2400      	movs	r4, #0
   16fda:	e003      	b.n	16fe4 <cmd_show_conn+0x10>
            print_conn_desc(&conn_desc);
   16fdc:	a801      	add	r0, sp, #4
   16fde:	f7fe fd4d 	bl	15a7c <print_conn_desc>
    for (i = 0; i < btshell_num_conns; i++) {
   16fe2:	3401      	adds	r4, #1
   16fe4:	4b08      	ldr	r3, [pc, #32]	; (17008 <cmd_show_conn+0x34>)
   16fe6:	681b      	ldr	r3, [r3, #0]
   16fe8:	42a3      	cmp	r3, r4
   16fea:	dd0a      	ble.n	17002 <cmd_show_conn+0x2e>
        conn = btshell_conns + i;
   16fec:	eb04 0344 	add.w	r3, r4, r4, lsl #1
        rc = ble_gap_conn_find(conn->handle, &conn_desc);
   16ff0:	a901      	add	r1, sp, #4
   16ff2:	4a06      	ldr	r2, [pc, #24]	; (1700c <cmd_show_conn+0x38>)
   16ff4:	f832 0023 	ldrh.w	r0, [r2, r3, lsl #2]
   16ff8:	f012 fb80 	bl	296fc <ble_gap_conn_find>
        if (rc == 0) {
   16ffc:	2800      	cmp	r0, #0
   16ffe:	d1f0      	bne.n	16fe2 <cmd_show_conn+0xe>
   17000:	e7ec      	b.n	16fdc <cmd_show_conn+0x8>
}
   17002:	2000      	movs	r0, #0
   17004:	b00c      	add	sp, #48	; 0x30
   17006:	bd10      	pop	{r4, pc}
   17008:	10001914 	.word	0x10001914
   1700c:	10001de4 	.word	0x10001de4

00017010 <cmd_show_addr>:
{
   17010:	b500      	push	{lr}
   17012:	b083      	sub	sp, #12
    console_printf("public_id_addr=");
   17014:	4813      	ldr	r0, [pc, #76]	; (17064 <cmd_show_addr+0x54>)
   17016:	f005 f88f 	bl	1c138 <console_printf>
    rc = ble_hs_id_copy_addr(BLE_ADDR_PUBLIC, id_addr, NULL);
   1701a:	2200      	movs	r2, #0
   1701c:	4669      	mov	r1, sp
   1701e:	4610      	mov	r0, r2
   17020:	f018 ff40 	bl	2fea4 <ble_hs_id_copy_addr>
    if (rc == 0) {
   17024:	b9a8      	cbnz	r0, 17052 <cmd_show_addr+0x42>
        print_addr(id_addr);
   17026:	4668      	mov	r0, sp
   17028:	f7fe fcc6 	bl	159b8 <print_addr>
    console_printf(" random_id_addr=");
   1702c:	480e      	ldr	r0, [pc, #56]	; (17068 <cmd_show_addr+0x58>)
   1702e:	f005 f883 	bl	1c138 <console_printf>
    rc = ble_hs_id_copy_addr(BLE_ADDR_RANDOM, id_addr, NULL);
   17032:	2200      	movs	r2, #0
   17034:	4669      	mov	r1, sp
   17036:	2001      	movs	r0, #1
   17038:	f018 ff34 	bl	2fea4 <ble_hs_id_copy_addr>
    if (rc == 0) {
   1703c:	b968      	cbnz	r0, 1705a <cmd_show_addr+0x4a>
        print_addr(id_addr);
   1703e:	4668      	mov	r0, sp
   17040:	f7fe fcba 	bl	159b8 <print_addr>
    console_printf("\n");
   17044:	4809      	ldr	r0, [pc, #36]	; (1706c <cmd_show_addr+0x5c>)
   17046:	f005 f877 	bl	1c138 <console_printf>
}
   1704a:	2000      	movs	r0, #0
   1704c:	b003      	add	sp, #12
   1704e:	f85d fb04 	ldr.w	pc, [sp], #4
        console_printf("none");
   17052:	4807      	ldr	r0, [pc, #28]	; (17070 <cmd_show_addr+0x60>)
   17054:	f005 f870 	bl	1c138 <console_printf>
   17058:	e7e8      	b.n	1702c <cmd_show_addr+0x1c>
        console_printf("none");
   1705a:	4805      	ldr	r0, [pc, #20]	; (17070 <cmd_show_addr+0x60>)
   1705c:	f005 f86c 	bl	1c138 <console_printf>
   17060:	e7f0      	b.n	17044 <cmd_show_addr+0x34>
   17062:	bf00      	nop
   17064:	00035b2c 	.word	0x00035b2c
   17068:	00035b3c 	.word	0x00035b3c
   1706c:	00034744 	.word	0x00034744
   17070:	000373dc 	.word	0x000373dc

00017074 <cmd_disconnect>:
{
   17074:	b510      	push	{r4, lr}
   17076:	b082      	sub	sp, #8
    rc = parse_arg_all(argc - 1, argv + 1);
   17078:	3104      	adds	r1, #4
   1707a:	3801      	subs	r0, #1
   1707c:	f001 fd8e 	bl	18b9c <parse_arg_all>
   17080:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   17082:	b108      	cbz	r0, 17088 <cmd_disconnect+0x14>
}
   17084:	b002      	add	sp, #8
   17086:	bd10      	pop	{r4, pc}
    conn_handle = parse_arg_uint16("conn", &rc);
   17088:	a901      	add	r1, sp, #4
   1708a:	4812      	ldr	r0, [pc, #72]	; (170d4 <cmd_disconnect+0x60>)
   1708c:	f001 fc2f 	bl	188ee <parse_arg_uint16>
   17090:	4604      	mov	r4, r0
    if (rc != 0) {
   17092:	9b01      	ldr	r3, [sp, #4]
   17094:	b99b      	cbnz	r3, 170be <cmd_disconnect+0x4a>
    reason = parse_arg_uint8_dflt("reason", BLE_ERR_REM_USER_CONN_TERM, &rc);
   17096:	aa01      	add	r2, sp, #4
   17098:	2113      	movs	r1, #19
   1709a:	480f      	ldr	r0, [pc, #60]	; (170d8 <cmd_disconnect+0x64>)
   1709c:	f001 fc58 	bl	18950 <parse_arg_uint8_dflt>
   170a0:	4601      	mov	r1, r0
    if (rc != 0) {
   170a2:	9b01      	ldr	r3, [sp, #4]
   170a4:	b983      	cbnz	r3, 170c8 <cmd_disconnect+0x54>
    rc = btshell_term_conn(conn_handle, reason);
   170a6:	4620      	mov	r0, r4
   170a8:	f7fe fb4a 	bl	15740 <btshell_term_conn>
   170ac:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   170ae:	2800      	cmp	r0, #0
   170b0:	d0e8      	beq.n	17084 <cmd_disconnect+0x10>
        console_printf("error terminating connection; rc=%d\n", rc);
   170b2:	4601      	mov	r1, r0
   170b4:	4809      	ldr	r0, [pc, #36]	; (170dc <cmd_disconnect+0x68>)
   170b6:	f005 f83f 	bl	1c138 <console_printf>
        return rc;
   170ba:	9801      	ldr	r0, [sp, #4]
   170bc:	e7e2      	b.n	17084 <cmd_disconnect+0x10>
        console_printf("invalid 'conn' parameter\n");
   170be:	4808      	ldr	r0, [pc, #32]	; (170e0 <cmd_disconnect+0x6c>)
   170c0:	f005 f83a 	bl	1c138 <console_printf>
        return rc;
   170c4:	9801      	ldr	r0, [sp, #4]
   170c6:	e7dd      	b.n	17084 <cmd_disconnect+0x10>
        console_printf("invalid 'reason' parameter\n");
   170c8:	4806      	ldr	r0, [pc, #24]	; (170e4 <cmd_disconnect+0x70>)
   170ca:	f005 f835 	bl	1c138 <console_printf>
        return rc;
   170ce:	9801      	ldr	r0, [sp, #4]
   170d0:	e7d8      	b.n	17084 <cmd_disconnect+0x10>
   170d2:	bf00      	nop
   170d4:	00034df4 	.word	0x00034df4
   170d8:	00035b50 	.word	0x00035b50
   170dc:	00035b74 	.word	0x00035b74
   170e0:	00034dfc 	.word	0x00034dfc
   170e4:	00035b58 	.word	0x00035b58

000170e8 <cmd_connect>:
{
   170e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   170ea:	b093      	sub	sp, #76	; 0x4c
   170ec:	4604      	mov	r4, r0
   170ee:	460d      	mov	r5, r1
    struct ble_gap_conn_params phy_1M_params = {0};
   170f0:	2300      	movs	r3, #0
   170f2:	930e      	str	r3, [sp, #56]	; 0x38
   170f4:	930f      	str	r3, [sp, #60]	; 0x3c
   170f6:	9310      	str	r3, [sp, #64]	; 0x40
   170f8:	9311      	str	r3, [sp, #68]	; 0x44
    struct ble_gap_conn_params phy_coded_params = {0};
   170fa:	930a      	str	r3, [sp, #40]	; 0x28
   170fc:	930b      	str	r3, [sp, #44]	; 0x2c
   170fe:	930c      	str	r3, [sp, #48]	; 0x30
   17100:	930d      	str	r3, [sp, #52]	; 0x34
    struct ble_gap_conn_params phy_2M_params = {0};
   17102:	9306      	str	r3, [sp, #24]
   17104:	9307      	str	r3, [sp, #28]
   17106:	9308      	str	r3, [sp, #32]
   17108:	9309      	str	r3, [sp, #36]	; 0x24
    rc = parse_arg_all(argc - 1, argv + 1);
   1710a:	3104      	adds	r1, #4
   1710c:	3801      	subs	r0, #1
   1710e:	f001 fd45 	bl	18b9c <parse_arg_all>
   17112:	9003      	str	r0, [sp, #12]
    if (rc != 0) {
   17114:	2800      	cmp	r0, #0
   17116:	f040 81bd 	bne.w	17494 <cmd_connect+0x3ac>
    if (argc > 1 && strcmp(argv[1], "cancel") == 0) {
   1711a:	2c01      	cmp	r4, #1
   1711c:	dd06      	ble.n	1712c <cmd_connect+0x44>
   1711e:	49bc      	ldr	r1, [pc, #752]	; (17410 <cmd_connect+0x328>)
   17120:	6868      	ldr	r0, [r5, #4]
   17122:	f003 fdf0 	bl	1ad06 <strcmp>
   17126:	2800      	cmp	r0, #0
   17128:	f000 8166 	beq.w	173f8 <cmd_connect+0x310>
    ext = parse_arg_kv_dflt("extended", cmd_ext_conn_phy_opts, 0, &rc);
   1712c:	ab03      	add	r3, sp, #12
   1712e:	2200      	movs	r2, #0
   17130:	49b8      	ldr	r1, [pc, #736]	; (17414 <cmd_connect+0x32c>)
   17132:	48b9      	ldr	r0, [pc, #740]	; (17418 <cmd_connect+0x330>)
   17134:	f001 fc83 	bl	18a3e <parse_arg_kv_dflt>
   17138:	b2c4      	uxtb	r4, r0
    if (rc != 0) {
   1713a:	9b03      	ldr	r3, [sp, #12]
   1713c:	2b00      	cmp	r3, #0
   1713e:	f040 81a5 	bne.w	1748c <cmd_connect+0x3a4>
    rc = parse_dev_addr("peer_", cmd_peer_addr_types, &peer_addr);
   17142:	aa04      	add	r2, sp, #16
   17144:	49b5      	ldr	r1, [pc, #724]	; (1741c <cmd_connect+0x334>)
   17146:	48b6      	ldr	r0, [pc, #728]	; (17420 <cmd_connect+0x338>)
   17148:	f7fe ff16 	bl	15f78 <parse_dev_addr>
   1714c:	9003      	str	r0, [sp, #12]
    if (rc == ENOENT) {
   1714e:	2802      	cmp	r0, #2
   17150:	f000 81a7 	beq.w	174a2 <cmd_connect+0x3ba>
    } else if (rc != 0) {
   17154:	2800      	cmp	r0, #0
   17156:	f040 819f 	bne.w	17498 <cmd_connect+0x3b0>
    ble_addr_t *peer_addr_param = &peer_addr;
   1715a:	af04      	add	r7, sp, #16
    own_addr_type = parse_arg_kv_dflt("own_addr_type", cmd_own_addr_types,
   1715c:	ab03      	add	r3, sp, #12
   1715e:	2200      	movs	r2, #0
   17160:	49b0      	ldr	r1, [pc, #704]	; (17424 <cmd_connect+0x33c>)
   17162:	48b1      	ldr	r0, [pc, #708]	; (17428 <cmd_connect+0x340>)
   17164:	f001 fc6b 	bl	18a3e <parse_arg_kv_dflt>
   17168:	4605      	mov	r5, r0
    if (rc != 0) {
   1716a:	9b03      	ldr	r3, [sp, #12]
   1716c:	2b00      	cmp	r3, #0
   1716e:	f040 819a 	bne.w	174a6 <cmd_connect+0x3be>
    duration_ms = parse_arg_long_bounds_dflt("duration", 1, INT32_MAX, 0, &rc);
   17172:	ab03      	add	r3, sp, #12
   17174:	9300      	str	r3, [sp, #0]
   17176:	2300      	movs	r3, #0
   17178:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1717c:	2101      	movs	r1, #1
   1717e:	48ab      	ldr	r0, [pc, #684]	; (1742c <cmd_connect+0x344>)
   17180:	f001 fb4b 	bl	1881a <parse_arg_long_bounds_dflt>
   17184:	4606      	mov	r6, r0
    if (rc != 0) {
   17186:	9b03      	ldr	r3, [sp, #12]
   17188:	2b00      	cmp	r3, #0
   1718a:	f040 8191 	bne.w	174b0 <cmd_connect+0x3c8>
    phy_1M_params.scan_itvl = parse_arg_time_dflt("scan_interval", 625, 0x0010, &rc);
   1718e:	ab03      	add	r3, sp, #12
   17190:	2210      	movs	r2, #16
   17192:	f240 2171 	movw	r1, #625	; 0x271
   17196:	48a6      	ldr	r0, [pc, #664]	; (17430 <cmd_connect+0x348>)
   17198:	f001 fbfe 	bl	18998 <parse_arg_time_dflt>
   1719c:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
    if (rc != 0) {
   171a0:	9b03      	ldr	r3, [sp, #12]
   171a2:	2b00      	cmp	r3, #0
   171a4:	f040 8189 	bne.w	174ba <cmd_connect+0x3d2>
    phy_1M_params.scan_window = parse_arg_time_dflt("scan_window", 625, 0x0010, &rc);
   171a8:	ab03      	add	r3, sp, #12
   171aa:	2210      	movs	r2, #16
   171ac:	f240 2171 	movw	r1, #625	; 0x271
   171b0:	48a0      	ldr	r0, [pc, #640]	; (17434 <cmd_connect+0x34c>)
   171b2:	f001 fbf1 	bl	18998 <parse_arg_time_dflt>
   171b6:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
    if (rc != 0) {
   171ba:	9b03      	ldr	r3, [sp, #12]
   171bc:	2b00      	cmp	r3, #0
   171be:	f040 8181 	bne.w	174c4 <cmd_connect+0x3dc>
    phy_1M_params.itvl_min = parse_arg_time_dflt("interval_min", 1250,
   171c2:	ab03      	add	r3, sp, #12
   171c4:	2218      	movs	r2, #24
   171c6:	f240 41e2 	movw	r1, #1250	; 0x4e2
   171ca:	489b      	ldr	r0, [pc, #620]	; (17438 <cmd_connect+0x350>)
   171cc:	f001 fbe4 	bl	18998 <parse_arg_time_dflt>
   171d0:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
    if (rc != 0) {
   171d4:	9b03      	ldr	r3, [sp, #12]
   171d6:	2b00      	cmp	r3, #0
   171d8:	f040 8179 	bne.w	174ce <cmd_connect+0x3e6>
    phy_1M_params.itvl_max = parse_arg_time_dflt("interval_max", 1250,
   171dc:	ab03      	add	r3, sp, #12
   171de:	2228      	movs	r2, #40	; 0x28
   171e0:	f240 41e2 	movw	r1, #1250	; 0x4e2
   171e4:	4895      	ldr	r0, [pc, #596]	; (1743c <cmd_connect+0x354>)
   171e6:	f001 fbd7 	bl	18998 <parse_arg_time_dflt>
   171ea:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
    if (rc != 0) {
   171ee:	9b03      	ldr	r3, [sp, #12]
   171f0:	2b00      	cmp	r3, #0
   171f2:	f040 8171 	bne.w	174d8 <cmd_connect+0x3f0>
    phy_1M_params.latency = parse_arg_uint16_dflt("latency", 0, &rc);
   171f6:	aa03      	add	r2, sp, #12
   171f8:	2100      	movs	r1, #0
   171fa:	4891      	ldr	r0, [pc, #580]	; (17440 <cmd_connect+0x358>)
   171fc:	f001 fbba 	bl	18974 <parse_arg_uint16_dflt>
   17200:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
    if (rc != 0) {
   17204:	9b03      	ldr	r3, [sp, #12]
   17206:	2b00      	cmp	r3, #0
   17208:	f040 816b 	bne.w	174e2 <cmd_connect+0x3fa>
    phy_1M_params.supervision_timeout = parse_arg_time_dflt("timeout", 10000,
   1720c:	ab03      	add	r3, sp, #12
   1720e:	f44f 7280 	mov.w	r2, #256	; 0x100
   17212:	f242 7110 	movw	r1, #10000	; 0x2710
   17216:	488b      	ldr	r0, [pc, #556]	; (17444 <cmd_connect+0x35c>)
   17218:	f001 fbbe 	bl	18998 <parse_arg_time_dflt>
   1721c:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    if (rc != 0) {
   17220:	9b03      	ldr	r3, [sp, #12]
   17222:	2b00      	cmp	r3, #0
   17224:	f040 8162 	bne.w	174ec <cmd_connect+0x404>
    phy_1M_params.min_ce_len = parse_arg_time_dflt("min_conn_event_len", 625,
   17228:	ab03      	add	r3, sp, #12
   1722a:	2210      	movs	r2, #16
   1722c:	f240 2171 	movw	r1, #625	; 0x271
   17230:	4885      	ldr	r0, [pc, #532]	; (17448 <cmd_connect+0x360>)
   17232:	f001 fbb1 	bl	18998 <parse_arg_time_dflt>
   17236:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    if (rc != 0) {
   1723a:	9b03      	ldr	r3, [sp, #12]
   1723c:	2b00      	cmp	r3, #0
   1723e:	f040 815a 	bne.w	174f6 <cmd_connect+0x40e>
    phy_1M_params.max_ce_len = parse_arg_time_dflt("max_conn_event_len", 625,
   17242:	ab03      	add	r3, sp, #12
   17244:	f44f 7240 	mov.w	r2, #768	; 0x300
   17248:	f240 2171 	movw	r1, #625	; 0x271
   1724c:	487f      	ldr	r0, [pc, #508]	; (1744c <cmd_connect+0x364>)
   1724e:	f001 fba3 	bl	18998 <parse_arg_time_dflt>
   17252:	f8ad 0046 	strh.w	r0, [sp, #70]	; 0x46
    if (rc != 0) {
   17256:	9b03      	ldr	r3, [sp, #12]
   17258:	2b00      	cmp	r3, #0
   1725a:	f040 8151 	bne.w	17500 <cmd_connect+0x418>
    if (ext == 0x00) {
   1725e:	2c00      	cmp	r4, #0
   17260:	f000 8153 	beq.w	1750a <cmd_connect+0x422>
    if (ext == 0x01) {
   17264:	2c01      	cmp	r4, #1
   17266:	f000 815f 	beq.w	17528 <cmd_connect+0x440>
    phy_coded_params.scan_itvl = parse_arg_time_dflt("coded_scan_interval",
   1726a:	ab03      	add	r3, sp, #12
   1726c:	2210      	movs	r2, #16
   1726e:	f240 2171 	movw	r1, #625	; 0x271
   17272:	4877      	ldr	r0, [pc, #476]	; (17450 <cmd_connect+0x368>)
   17274:	f001 fb90 	bl	18998 <parse_arg_time_dflt>
   17278:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
    if (rc != 0) {
   1727c:	9b03      	ldr	r3, [sp, #12]
   1727e:	2b00      	cmp	r3, #0
   17280:	f040 8164 	bne.w	1754c <cmd_connect+0x464>
    phy_coded_params.scan_window = parse_arg_time_dflt("coded_scan_window",
   17284:	ab03      	add	r3, sp, #12
   17286:	2210      	movs	r2, #16
   17288:	f240 2171 	movw	r1, #625	; 0x271
   1728c:	4871      	ldr	r0, [pc, #452]	; (17454 <cmd_connect+0x36c>)
   1728e:	f001 fb83 	bl	18998 <parse_arg_time_dflt>
   17292:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
    if (rc != 0) {
   17296:	9b03      	ldr	r3, [sp, #12]
   17298:	2b00      	cmp	r3, #0
   1729a:	f040 815c 	bne.w	17556 <cmd_connect+0x46e>
    phy_coded_params.itvl_min = parse_arg_time_dflt("coded_interval_min", 1250,
   1729e:	ab03      	add	r3, sp, #12
   172a0:	2218      	movs	r2, #24
   172a2:	f240 41e2 	movw	r1, #1250	; 0x4e2
   172a6:	486c      	ldr	r0, [pc, #432]	; (17458 <cmd_connect+0x370>)
   172a8:	f001 fb76 	bl	18998 <parse_arg_time_dflt>
   172ac:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    if (rc != 0) {
   172b0:	9b03      	ldr	r3, [sp, #12]
   172b2:	2b00      	cmp	r3, #0
   172b4:	f040 8154 	bne.w	17560 <cmd_connect+0x478>
    phy_coded_params.itvl_max = parse_arg_time_dflt("coded_interval_max", 1250,
   172b8:	ab03      	add	r3, sp, #12
   172ba:	2228      	movs	r2, #40	; 0x28
   172bc:	f240 41e2 	movw	r1, #1250	; 0x4e2
   172c0:	4866      	ldr	r0, [pc, #408]	; (1745c <cmd_connect+0x374>)
   172c2:	f001 fb69 	bl	18998 <parse_arg_time_dflt>
   172c6:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
    if (rc != 0) {
   172ca:	9b03      	ldr	r3, [sp, #12]
   172cc:	2b00      	cmp	r3, #0
   172ce:	f040 814c 	bne.w	1756a <cmd_connect+0x482>
        parse_arg_uint16_dflt("coded_latency", 0, &rc);
   172d2:	aa03      	add	r2, sp, #12
   172d4:	2100      	movs	r1, #0
   172d6:	4862      	ldr	r0, [pc, #392]	; (17460 <cmd_connect+0x378>)
   172d8:	f001 fb4c 	bl	18974 <parse_arg_uint16_dflt>
    phy_coded_params.latency =
   172dc:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
    if (rc != 0) {
   172e0:	9b03      	ldr	r3, [sp, #12]
   172e2:	2b00      	cmp	r3, #0
   172e4:	f040 8146 	bne.w	17574 <cmd_connect+0x48c>
        parse_arg_time_dflt("coded_timeout", 10000, 0x0100, &rc);
   172e8:	ab03      	add	r3, sp, #12
   172ea:	f44f 7280 	mov.w	r2, #256	; 0x100
   172ee:	f242 7110 	movw	r1, #10000	; 0x2710
   172f2:	485c      	ldr	r0, [pc, #368]	; (17464 <cmd_connect+0x37c>)
   172f4:	f001 fb50 	bl	18998 <parse_arg_time_dflt>
    phy_coded_params.supervision_timeout =
   172f8:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
    if (rc != 0) {
   172fc:	9b03      	ldr	r3, [sp, #12]
   172fe:	2b00      	cmp	r3, #0
   17300:	f040 813d 	bne.w	1757e <cmd_connect+0x496>
        parse_arg_time_dflt("coded_min_conn_event", 625, 0x0010, &rc);
   17304:	ab03      	add	r3, sp, #12
   17306:	2210      	movs	r2, #16
   17308:	f240 2171 	movw	r1, #625	; 0x271
   1730c:	4856      	ldr	r0, [pc, #344]	; (17468 <cmd_connect+0x380>)
   1730e:	f001 fb43 	bl	18998 <parse_arg_time_dflt>
    phy_coded_params.min_ce_len =
   17312:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    if (rc != 0) {
   17316:	9b03      	ldr	r3, [sp, #12]
   17318:	2b00      	cmp	r3, #0
   1731a:	f040 8135 	bne.w	17588 <cmd_connect+0x4a0>
    phy_coded_params.max_ce_len = parse_arg_time_dflt("coded_max_conn_event",
   1731e:	ab03      	add	r3, sp, #12
   17320:	f44f 7240 	mov.w	r2, #768	; 0x300
   17324:	f240 2171 	movw	r1, #625	; 0x271
   17328:	4850      	ldr	r0, [pc, #320]	; (1746c <cmd_connect+0x384>)
   1732a:	f001 fb35 	bl	18998 <parse_arg_time_dflt>
   1732e:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
    if (rc != 0) {
   17332:	9b03      	ldr	r3, [sp, #12]
   17334:	2b00      	cmp	r3, #0
   17336:	f040 812c 	bne.w	17592 <cmd_connect+0x4aa>
    phy_2M_params.itvl_min = parse_arg_time_dflt("2M_interval_min", 1250,
   1733a:	ab03      	add	r3, sp, #12
   1733c:	2218      	movs	r2, #24
   1733e:	f240 41e2 	movw	r1, #1250	; 0x4e2
   17342:	484b      	ldr	r0, [pc, #300]	; (17470 <cmd_connect+0x388>)
   17344:	f001 fb28 	bl	18998 <parse_arg_time_dflt>
   17348:	f8ad 001c 	strh.w	r0, [sp, #28]
    if (rc != 0) {
   1734c:	9b03      	ldr	r3, [sp, #12]
   1734e:	2b00      	cmp	r3, #0
   17350:	f040 8124 	bne.w	1759c <cmd_connect+0x4b4>
    phy_2M_params.itvl_max = parse_arg_time_dflt("2M_interval_max", 1250,
   17354:	ab03      	add	r3, sp, #12
   17356:	2228      	movs	r2, #40	; 0x28
   17358:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1735c:	4845      	ldr	r0, [pc, #276]	; (17474 <cmd_connect+0x38c>)
   1735e:	f001 fb1b 	bl	18998 <parse_arg_time_dflt>
   17362:	f8ad 001e 	strh.w	r0, [sp, #30]
    if (rc != 0) {
   17366:	9b03      	ldr	r3, [sp, #12]
   17368:	2b00      	cmp	r3, #0
   1736a:	f040 811c 	bne.w	175a6 <cmd_connect+0x4be>
        parse_arg_uint16_dflt("2M_latency", 0, &rc);
   1736e:	aa03      	add	r2, sp, #12
   17370:	2100      	movs	r1, #0
   17372:	4841      	ldr	r0, [pc, #260]	; (17478 <cmd_connect+0x390>)
   17374:	f001 fafe 	bl	18974 <parse_arg_uint16_dflt>
    phy_2M_params.latency =
   17378:	f8ad 0020 	strh.w	r0, [sp, #32]
    if (rc != 0) {
   1737c:	9b03      	ldr	r3, [sp, #12]
   1737e:	2b00      	cmp	r3, #0
   17380:	f040 8116 	bne.w	175b0 <cmd_connect+0x4c8>
    phy_2M_params.supervision_timeout = parse_arg_time_dflt("2M_timeout", 10000,
   17384:	ab03      	add	r3, sp, #12
   17386:	f44f 7280 	mov.w	r2, #256	; 0x100
   1738a:	f242 7110 	movw	r1, #10000	; 0x2710
   1738e:	483b      	ldr	r0, [pc, #236]	; (1747c <cmd_connect+0x394>)
   17390:	f001 fb02 	bl	18998 <parse_arg_time_dflt>
   17394:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
    if (rc != 0) {
   17398:	9b03      	ldr	r3, [sp, #12]
   1739a:	2b00      	cmp	r3, #0
   1739c:	f040 810d 	bne.w	175ba <cmd_connect+0x4d2>
    phy_2M_params.min_ce_len = parse_arg_time_dflt("2M_min_conn_event", 625,
   173a0:	ab03      	add	r3, sp, #12
   173a2:	2210      	movs	r2, #16
   173a4:	f240 2171 	movw	r1, #625	; 0x271
   173a8:	4835      	ldr	r0, [pc, #212]	; (17480 <cmd_connect+0x398>)
   173aa:	f001 faf5 	bl	18998 <parse_arg_time_dflt>
   173ae:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
    if (rc != 0) {
   173b2:	9b03      	ldr	r3, [sp, #12]
   173b4:	2b00      	cmp	r3, #0
   173b6:	f040 8105 	bne.w	175c4 <cmd_connect+0x4dc>
    phy_2M_params.max_ce_len = parse_arg_time_dflt("2M_max_conn_event", 625,
   173ba:	ab03      	add	r3, sp, #12
   173bc:	f44f 7240 	mov.w	r2, #768	; 0x300
   173c0:	f240 2171 	movw	r1, #625	; 0x271
   173c4:	482f      	ldr	r0, [pc, #188]	; (17484 <cmd_connect+0x39c>)
   173c6:	f001 fae7 	bl	18998 <parse_arg_time_dflt>
   173ca:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
    if (rc != 0) {
   173ce:	9b03      	ldr	r3, [sp, #12]
   173d0:	2b00      	cmp	r3, #0
   173d2:	f040 80fc 	bne.w	175ce <cmd_connect+0x4e6>
    if (ext == 0x02) {
   173d6:	2c02      	cmp	r4, #2
   173d8:	f000 80fe 	beq.w	175d8 <cmd_connect+0x4f0>
    if (ext == 0x03) {
   173dc:	2c03      	cmp	r4, #3
   173de:	f000 8105 	beq.w	175ec <cmd_connect+0x504>
    rc = btshell_ext_conn_initiate(own_addr_type, peer_addr_param,
   173e2:	ab0a      	add	r3, sp, #40	; 0x28
   173e4:	9301      	str	r3, [sp, #4]
   173e6:	ab06      	add	r3, sp, #24
   173e8:	9300      	str	r3, [sp, #0]
   173ea:	ab0e      	add	r3, sp, #56	; 0x38
   173ec:	4632      	mov	r2, r6
   173ee:	4639      	mov	r1, r7
   173f0:	b2e8      	uxtb	r0, r5
   173f2:	f7fe f993 	bl	1571c <btshell_ext_conn_initiate>
    return rc;
   173f6:	e04d      	b.n	17494 <cmd_connect+0x3ac>
        rc = btshell_conn_cancel();
   173f8:	f7fe f99e 	bl	15738 <btshell_conn_cancel>
   173fc:	9003      	str	r0, [sp, #12]
        if (rc != 0) {
   173fe:	2800      	cmp	r0, #0
   17400:	d048      	beq.n	17494 <cmd_connect+0x3ac>
            console_printf("connection cancel fail: %d\n", rc);
   17402:	4601      	mov	r1, r0
   17404:	4820      	ldr	r0, [pc, #128]	; (17488 <cmd_connect+0x3a0>)
   17406:	f004 fe97 	bl	1c138 <console_printf>
            return rc;
   1740a:	9803      	ldr	r0, [sp, #12]
   1740c:	e042      	b.n	17494 <cmd_connect+0x3ac>
   1740e:	bf00      	nop
   17410:	00035864 	.word	0x00035864
   17414:	10000104 	.word	0x10000104
   17418:	00035884 	.word	0x00035884
   1741c:	00037814 	.word	0x00037814
   17420:	00035bb8 	.word	0x00035bb8
   17424:	000377ec 	.word	0x000377ec
   17428:	000359b8 	.word	0x000359b8
   1742c:	000358b0 	.word	0x000358b0
   17430:	00035be0 	.word	0x00035be0
   17434:	00035c14 	.word	0x00035c14
   17438:	000351a4 	.word	0x000351a4
   1743c:	000351d8 	.word	0x000351d8
   17440:	0003520c 	.word	0x0003520c
   17444:	00035234 	.word	0x00035234
   17448:	0003525c 	.word	0x0003525c
   1744c:	00035298 	.word	0x00035298
   17450:	00035c60 	.word	0x00035c60
   17454:	00035ca0 	.word	0x00035ca0
   17458:	00035cdc 	.word	0x00035cdc
   1745c:	00035d18 	.word	0x00035d18
   17460:	00035d54 	.word	0x00035d54
   17464:	00035d88 	.word	0x00035d88
   17468:	00035dbc 	.word	0x00035dbc
   1746c:	00035e00 	.word	0x00035e00
   17470:	00035e44 	.word	0x00035e44
   17474:	00035e7c 	.word	0x00035e7c
   17478:	00035eb4 	.word	0x00035eb4
   1747c:	00035ee0 	.word	0x00035ee0
   17480:	00035f0c 	.word	0x00035f0c
   17484:	00035f48 	.word	0x00035f48
   17488:	00035b9c 	.word	0x00035b9c
        console_printf("invalid 'extended' parameter\n");
   1748c:	485d      	ldr	r0, [pc, #372]	; (17604 <cmd_connect+0x51c>)
   1748e:	f004 fe53 	bl	1c138 <console_printf>
        return rc;
   17492:	9803      	ldr	r0, [sp, #12]
}
   17494:	b013      	add	sp, #76	; 0x4c
   17496:	bdf0      	pop	{r4, r5, r6, r7, pc}
        console_printf("invalid 'peer_addr' parameter\n");
   17498:	485b      	ldr	r0, [pc, #364]	; (17608 <cmd_connect+0x520>)
   1749a:	f004 fe4d 	bl	1c138 <console_printf>
        return rc;
   1749e:	9803      	ldr	r0, [sp, #12]
   174a0:	e7f8      	b.n	17494 <cmd_connect+0x3ac>
        peer_addr_param = NULL;
   174a2:	2700      	movs	r7, #0
   174a4:	e65a      	b.n	1715c <cmd_connect+0x74>
        console_printf("invalid 'own_addr_type' parameter\n");
   174a6:	4859      	ldr	r0, [pc, #356]	; (1760c <cmd_connect+0x524>)
   174a8:	f004 fe46 	bl	1c138 <console_printf>
        return rc;
   174ac:	9803      	ldr	r0, [sp, #12]
   174ae:	e7f1      	b.n	17494 <cmd_connect+0x3ac>
        console_printf("invalid 'duration' parameter\n");
   174b0:	4857      	ldr	r0, [pc, #348]	; (17610 <cmd_connect+0x528>)
   174b2:	f004 fe41 	bl	1c138 <console_printf>
        return rc;
   174b6:	9803      	ldr	r0, [sp, #12]
   174b8:	e7ec      	b.n	17494 <cmd_connect+0x3ac>
        console_printf("invalid 'scan_interval' parameter\n");
   174ba:	4856      	ldr	r0, [pc, #344]	; (17614 <cmd_connect+0x52c>)
   174bc:	f004 fe3c 	bl	1c138 <console_printf>
        return rc;
   174c0:	9803      	ldr	r0, [sp, #12]
   174c2:	e7e7      	b.n	17494 <cmd_connect+0x3ac>
        console_printf("invalid 'scan_window' parameter\n");
   174c4:	4854      	ldr	r0, [pc, #336]	; (17618 <cmd_connect+0x530>)
   174c6:	f004 fe37 	bl	1c138 <console_printf>
        return rc;
   174ca:	9803      	ldr	r0, [sp, #12]
   174cc:	e7e2      	b.n	17494 <cmd_connect+0x3ac>
        console_printf("invalid 'interval_min' parameter\n");
   174ce:	4853      	ldr	r0, [pc, #332]	; (1761c <cmd_connect+0x534>)
   174d0:	f004 fe32 	bl	1c138 <console_printf>
        return rc;
   174d4:	9803      	ldr	r0, [sp, #12]
   174d6:	e7dd      	b.n	17494 <cmd_connect+0x3ac>
        console_printf("invalid 'interval_max' parameter\n");
   174d8:	4851      	ldr	r0, [pc, #324]	; (17620 <cmd_connect+0x538>)
   174da:	f004 fe2d 	bl	1c138 <console_printf>
        return rc;
   174de:	9803      	ldr	r0, [sp, #12]
   174e0:	e7d8      	b.n	17494 <cmd_connect+0x3ac>
        console_printf("invalid 'latency' parameter\n");
   174e2:	4850      	ldr	r0, [pc, #320]	; (17624 <cmd_connect+0x53c>)
   174e4:	f004 fe28 	bl	1c138 <console_printf>
        return rc;
   174e8:	9803      	ldr	r0, [sp, #12]
   174ea:	e7d3      	b.n	17494 <cmd_connect+0x3ac>
        console_printf("invalid 'timeout' parameter\n");
   174ec:	484e      	ldr	r0, [pc, #312]	; (17628 <cmd_connect+0x540>)
   174ee:	f004 fe23 	bl	1c138 <console_printf>
        return rc;
   174f2:	9803      	ldr	r0, [sp, #12]
   174f4:	e7ce      	b.n	17494 <cmd_connect+0x3ac>
        console_printf("invalid 'min_conn_event_len' parameter\n");
   174f6:	484d      	ldr	r0, [pc, #308]	; (1762c <cmd_connect+0x544>)
   174f8:	f004 fe1e 	bl	1c138 <console_printf>
        return rc;
   174fc:	9803      	ldr	r0, [sp, #12]
   174fe:	e7c9      	b.n	17494 <cmd_connect+0x3ac>
        console_printf("invalid 'max_conn_event_len' parameter\n");
   17500:	484b      	ldr	r0, [pc, #300]	; (17630 <cmd_connect+0x548>)
   17502:	f004 fe19 	bl	1c138 <console_printf>
        return rc;
   17506:	9803      	ldr	r0, [sp, #12]
   17508:	e7c4      	b.n	17494 <cmd_connect+0x3ac>
        rc = btshell_conn_initiate(own_addr_type, peer_addr_param, duration_ms,
   1750a:	ab0e      	add	r3, sp, #56	; 0x38
   1750c:	4632      	mov	r2, r6
   1750e:	4639      	mov	r1, r7
   17510:	b2e8      	uxtb	r0, r5
   17512:	f7fe f8f7 	bl	15704 <btshell_conn_initiate>
   17516:	4601      	mov	r1, r0
   17518:	9003      	str	r0, [sp, #12]
        if (rc) {
   1751a:	b908      	cbnz	r0, 17520 <cmd_connect+0x438>
        return rc;
   1751c:	9803      	ldr	r0, [sp, #12]
   1751e:	e7b9      	b.n	17494 <cmd_connect+0x3ac>
            console_printf("error connecting; rc=%d\n", rc);
   17520:	4844      	ldr	r0, [pc, #272]	; (17634 <cmd_connect+0x54c>)
   17522:	f004 fe09 	bl	1c138 <console_printf>
   17526:	e7f9      	b.n	1751c <cmd_connect+0x434>
        rc = btshell_ext_conn_initiate(own_addr_type, peer_addr_param,
   17528:	2300      	movs	r3, #0
   1752a:	9301      	str	r3, [sp, #4]
   1752c:	9300      	str	r3, [sp, #0]
   1752e:	ab0e      	add	r3, sp, #56	; 0x38
   17530:	4632      	mov	r2, r6
   17532:	4639      	mov	r1, r7
   17534:	b2e8      	uxtb	r0, r5
   17536:	f7fe f8f1 	bl	1571c <btshell_ext_conn_initiate>
   1753a:	4601      	mov	r1, r0
   1753c:	9003      	str	r0, [sp, #12]
        if (rc) {
   1753e:	b908      	cbnz	r0, 17544 <cmd_connect+0x45c>
        return rc;
   17540:	9803      	ldr	r0, [sp, #12]
   17542:	e7a7      	b.n	17494 <cmd_connect+0x3ac>
            console_printf("error connecting; rc=%d\n", rc);
   17544:	483b      	ldr	r0, [pc, #236]	; (17634 <cmd_connect+0x54c>)
   17546:	f004 fdf7 	bl	1c138 <console_printf>
   1754a:	e7f9      	b.n	17540 <cmd_connect+0x458>
        console_printf("invalid 'coded_scan_interval' parameter\n");
   1754c:	483a      	ldr	r0, [pc, #232]	; (17638 <cmd_connect+0x550>)
   1754e:	f004 fdf3 	bl	1c138 <console_printf>
        return rc;
   17552:	9803      	ldr	r0, [sp, #12]
   17554:	e79e      	b.n	17494 <cmd_connect+0x3ac>
        console_printf("invalid 'coded_scan_window' parameter\n");
   17556:	4839      	ldr	r0, [pc, #228]	; (1763c <cmd_connect+0x554>)
   17558:	f004 fdee 	bl	1c138 <console_printf>
        return rc;
   1755c:	9803      	ldr	r0, [sp, #12]
   1755e:	e799      	b.n	17494 <cmd_connect+0x3ac>
        console_printf("invalid 'coded_interval_min' parameter\n");
   17560:	4837      	ldr	r0, [pc, #220]	; (17640 <cmd_connect+0x558>)
   17562:	f004 fde9 	bl	1c138 <console_printf>
        return rc;
   17566:	9803      	ldr	r0, [sp, #12]
   17568:	e794      	b.n	17494 <cmd_connect+0x3ac>
        console_printf("invalid 'coded_interval_max' parameter\n");
   1756a:	4836      	ldr	r0, [pc, #216]	; (17644 <cmd_connect+0x55c>)
   1756c:	f004 fde4 	bl	1c138 <console_printf>
        return rc;
   17570:	9803      	ldr	r0, [sp, #12]
   17572:	e78f      	b.n	17494 <cmd_connect+0x3ac>
        console_printf("invalid 'coded_latency' parameter\n");
   17574:	4834      	ldr	r0, [pc, #208]	; (17648 <cmd_connect+0x560>)
   17576:	f004 fddf 	bl	1c138 <console_printf>
        return rc;
   1757a:	9803      	ldr	r0, [sp, #12]
   1757c:	e78a      	b.n	17494 <cmd_connect+0x3ac>
        console_printf("invalid 'coded_timeout' parameter\n");
   1757e:	4833      	ldr	r0, [pc, #204]	; (1764c <cmd_connect+0x564>)
   17580:	f004 fdda 	bl	1c138 <console_printf>
        return rc;
   17584:	9803      	ldr	r0, [sp, #12]
   17586:	e785      	b.n	17494 <cmd_connect+0x3ac>
        console_printf("invalid 'coded_min_conn_event' parameter\n");
   17588:	4831      	ldr	r0, [pc, #196]	; (17650 <cmd_connect+0x568>)
   1758a:	f004 fdd5 	bl	1c138 <console_printf>
        return rc;
   1758e:	9803      	ldr	r0, [sp, #12]
   17590:	e780      	b.n	17494 <cmd_connect+0x3ac>
        console_printf("invalid 'coded_max_conn_event' parameter\n");
   17592:	4830      	ldr	r0, [pc, #192]	; (17654 <cmd_connect+0x56c>)
   17594:	f004 fdd0 	bl	1c138 <console_printf>
        return rc;
   17598:	9803      	ldr	r0, [sp, #12]
   1759a:	e77b      	b.n	17494 <cmd_connect+0x3ac>
        console_printf("invalid '2M_interval_min' parameter\n");
   1759c:	482e      	ldr	r0, [pc, #184]	; (17658 <cmd_connect+0x570>)
   1759e:	f004 fdcb 	bl	1c138 <console_printf>
        return rc;
   175a2:	9803      	ldr	r0, [sp, #12]
   175a4:	e776      	b.n	17494 <cmd_connect+0x3ac>
        console_printf("invalid '2M_interval_max' parameter\n");
   175a6:	482d      	ldr	r0, [pc, #180]	; (1765c <cmd_connect+0x574>)
   175a8:	f004 fdc6 	bl	1c138 <console_printf>
        return rc;
   175ac:	9803      	ldr	r0, [sp, #12]
   175ae:	e771      	b.n	17494 <cmd_connect+0x3ac>
        console_printf("invalid '2M_latency' parameter\n");
   175b0:	482b      	ldr	r0, [pc, #172]	; (17660 <cmd_connect+0x578>)
   175b2:	f004 fdc1 	bl	1c138 <console_printf>
        return rc;
   175b6:	9803      	ldr	r0, [sp, #12]
   175b8:	e76c      	b.n	17494 <cmd_connect+0x3ac>
        console_printf("invalid '2M_timeout' parameter\n");
   175ba:	482a      	ldr	r0, [pc, #168]	; (17664 <cmd_connect+0x57c>)
   175bc:	f004 fdbc 	bl	1c138 <console_printf>
        return rc;
   175c0:	9803      	ldr	r0, [sp, #12]
   175c2:	e767      	b.n	17494 <cmd_connect+0x3ac>
        console_printf("invalid '2M_min_conn_event' parameter\n");
   175c4:	4828      	ldr	r0, [pc, #160]	; (17668 <cmd_connect+0x580>)
   175c6:	f004 fdb7 	bl	1c138 <console_printf>
        return rc;
   175ca:	9803      	ldr	r0, [sp, #12]
   175cc:	e762      	b.n	17494 <cmd_connect+0x3ac>
        console_printf("invalid '2M_max_conn_event' parameter\n");
   175ce:	4827      	ldr	r0, [pc, #156]	; (1766c <cmd_connect+0x584>)
   175d0:	f004 fdb2 	bl	1c138 <console_printf>
        return rc;
   175d4:	9803      	ldr	r0, [sp, #12]
   175d6:	e75d      	b.n	17494 <cmd_connect+0x3ac>
        rc = btshell_ext_conn_initiate(own_addr_type, peer_addr_param,
   175d8:	ab0a      	add	r3, sp, #40	; 0x28
   175da:	9301      	str	r3, [sp, #4]
   175dc:	2300      	movs	r3, #0
   175de:	9300      	str	r3, [sp, #0]
   175e0:	4632      	mov	r2, r6
   175e2:	4639      	mov	r1, r7
   175e4:	b2e8      	uxtb	r0, r5
   175e6:	f7fe f899 	bl	1571c <btshell_ext_conn_initiate>
        return rc;
   175ea:	e753      	b.n	17494 <cmd_connect+0x3ac>
        rc = btshell_ext_conn_initiate(own_addr_type, peer_addr_param,
   175ec:	ab0a      	add	r3, sp, #40	; 0x28
   175ee:	9301      	str	r3, [sp, #4]
   175f0:	2300      	movs	r3, #0
   175f2:	9300      	str	r3, [sp, #0]
   175f4:	ab0e      	add	r3, sp, #56	; 0x38
   175f6:	4632      	mov	r2, r6
   175f8:	4639      	mov	r1, r7
   175fa:	b2e8      	uxtb	r0, r5
   175fc:	f7fe f88e 	bl	1571c <btshell_ext_conn_initiate>
        return rc;
   17600:	e748      	b.n	17494 <cmd_connect+0x3ac>
   17602:	bf00      	nop
   17604:	00035890 	.word	0x00035890
   17608:	00035bc0 	.word	0x00035bc0
   1760c:	000359c8 	.word	0x000359c8
   17610:	000358bc 	.word	0x000358bc
   17614:	00035bf0 	.word	0x00035bf0
   17618:	00035c20 	.word	0x00035c20
   1761c:	000351b4 	.word	0x000351b4
   17620:	000351e8 	.word	0x000351e8
   17624:	00035214 	.word	0x00035214
   17628:	0003523c 	.word	0x0003523c
   1762c:	00035270 	.word	0x00035270
   17630:	000352ac 	.word	0x000352ac
   17634:	00035c44 	.word	0x00035c44
   17638:	00035c74 	.word	0x00035c74
   1763c:	00035cb4 	.word	0x00035cb4
   17640:	00035cf0 	.word	0x00035cf0
   17644:	00035d2c 	.word	0x00035d2c
   17648:	00035d64 	.word	0x00035d64
   1764c:	00035d98 	.word	0x00035d98
   17650:	00035dd4 	.word	0x00035dd4
   17654:	00035e18 	.word	0x00035e18
   17658:	00035e54 	.word	0x00035e54
   1765c:	00035e8c 	.word	0x00035e8c
   17660:	00035ec0 	.word	0x00035ec0
   17664:	00035eec 	.word	0x00035eec
   17668:	00035f20 	.word	0x00035f20
   1766c:	00035f5c 	.word	0x00035f5c

00017670 <cmd_advertise>:
{
   17670:	b570      	push	{r4, r5, r6, lr}
   17672:	b088      	sub	sp, #32
   17674:	4604      	mov	r4, r0
   17676:	460d      	mov	r5, r1
    rc = parse_arg_all(argc - 1, argv + 1);
   17678:	3104      	adds	r1, #4
   1767a:	3801      	subs	r0, #1
   1767c:	f001 fa8e 	bl	18b9c <parse_arg_all>
   17680:	9002      	str	r0, [sp, #8]
    if (rc != 0) {
   17682:	2800      	cmp	r0, #0
   17684:	f040 80a7 	bne.w	177d6 <cmd_advertise+0x166>
    if (argc > 1 && strcmp(argv[1], "stop") == 0) {
   17688:	2c01      	cmp	r4, #1
   1768a:	dd06      	ble.n	1769a <cmd_advertise+0x2a>
   1768c:	496d      	ldr	r1, [pc, #436]	; (17844 <cmd_advertise+0x1d4>)
   1768e:	6868      	ldr	r0, [r5, #4]
   17690:	f003 fb39 	bl	1ad06 <strcmp>
   17694:	2800      	cmp	r0, #0
   17696:	f000 8090 	beq.w	177ba <cmd_advertise+0x14a>
    params.conn_mode = parse_arg_kv_dflt("conn", cmd_adv_conn_modes,
   1769a:	ab02      	add	r3, sp, #8
   1769c:	2202      	movs	r2, #2
   1769e:	496a      	ldr	r1, [pc, #424]	; (17848 <cmd_advertise+0x1d8>)
   176a0:	486a      	ldr	r0, [pc, #424]	; (1784c <cmd_advertise+0x1dc>)
   176a2:	f001 f9cc 	bl	18a3e <parse_arg_kv_dflt>
   176a6:	f88d 0014 	strb.w	r0, [sp, #20]
    if (rc != 0) {
   176aa:	9b02      	ldr	r3, [sp, #8]
   176ac:	2b00      	cmp	r3, #0
   176ae:	f040 808e 	bne.w	177ce <cmd_advertise+0x15e>
    params.disc_mode = parse_arg_kv_dflt("discov", cmd_adv_disc_modes,
   176b2:	ab02      	add	r3, sp, #8
   176b4:	2202      	movs	r2, #2
   176b6:	4966      	ldr	r1, [pc, #408]	; (17850 <cmd_advertise+0x1e0>)
   176b8:	4866      	ldr	r0, [pc, #408]	; (17854 <cmd_advertise+0x1e4>)
   176ba:	f001 f9c0 	bl	18a3e <parse_arg_kv_dflt>
   176be:	f88d 0015 	strb.w	r0, [sp, #21]
    if (rc != 0) {
   176c2:	9b02      	ldr	r3, [sp, #8]
   176c4:	2b00      	cmp	r3, #0
   176c6:	f040 8088 	bne.w	177da <cmd_advertise+0x16a>
    rc = parse_dev_addr("peer_", cmd_peer_addr_types, &peer_addr);
   176ca:	aa03      	add	r2, sp, #12
   176cc:	4962      	ldr	r1, [pc, #392]	; (17858 <cmd_advertise+0x1e8>)
   176ce:	4863      	ldr	r0, [pc, #396]	; (1785c <cmd_advertise+0x1ec>)
   176d0:	f7fe fc52 	bl	15f78 <parse_dev_addr>
   176d4:	9002      	str	r0, [sp, #8]
    if (rc == ENOENT) {
   176d6:	2802      	cmp	r0, #2
   176d8:	f000 8089 	beq.w	177ee <cmd_advertise+0x17e>
    } else if (rc != 0) {
   176dc:	2800      	cmp	r0, #0
   176de:	f040 8081 	bne.w	177e4 <cmd_advertise+0x174>
    ble_addr_t *peer_addr_param = &peer_addr;
   176e2:	ae03      	add	r6, sp, #12
    restart = parse_arg_bool_dflt("restart", 0, &rc);
   176e4:	aa02      	add	r2, sp, #8
   176e6:	2100      	movs	r1, #0
   176e8:	485d      	ldr	r0, [pc, #372]	; (17860 <cmd_advertise+0x1f0>)
   176ea:	f001 f8ec 	bl	188c6 <parse_arg_bool_dflt>
   176ee:	1e04      	subs	r4, r0, #0
   176f0:	bf18      	it	ne
   176f2:	2401      	movne	r4, #1
    if (rc != 0) {
   176f4:	9b02      	ldr	r3, [sp, #8]
   176f6:	2b00      	cmp	r3, #0
   176f8:	d17b      	bne.n	177f2 <cmd_advertise+0x182>
    own_addr_type = parse_arg_kv_dflt("own_addr_type", cmd_own_addr_types,
   176fa:	ab02      	add	r3, sp, #8
   176fc:	2200      	movs	r2, #0
   176fe:	4959      	ldr	r1, [pc, #356]	; (17864 <cmd_advertise+0x1f4>)
   17700:	4859      	ldr	r0, [pc, #356]	; (17868 <cmd_advertise+0x1f8>)
   17702:	f001 f99c 	bl	18a3e <parse_arg_kv_dflt>
   17706:	b2c5      	uxtb	r5, r0
    if (rc != 0) {
   17708:	9b02      	ldr	r3, [sp, #8]
   1770a:	2b00      	cmp	r3, #0
   1770c:	d176      	bne.n	177fc <cmd_advertise+0x18c>
    params.channel_map = parse_arg_uint8_dflt("channel_map", 0, &rc);
   1770e:	aa02      	add	r2, sp, #8
   17710:	2100      	movs	r1, #0
   17712:	4856      	ldr	r0, [pc, #344]	; (1786c <cmd_advertise+0x1fc>)
   17714:	f001 f91c 	bl	18950 <parse_arg_uint8_dflt>
   17718:	f88d 001a 	strb.w	r0, [sp, #26]
    if (rc != 0) {
   1771c:	9b02      	ldr	r3, [sp, #8]
   1771e:	2b00      	cmp	r3, #0
   17720:	d171      	bne.n	17806 <cmd_advertise+0x196>
    params.filter_policy = parse_arg_kv_dflt("filter", cmd_adv_filt_types,
   17722:	ab02      	add	r3, sp, #8
   17724:	2200      	movs	r2, #0
   17726:	4952      	ldr	r1, [pc, #328]	; (17870 <cmd_advertise+0x200>)
   17728:	4852      	ldr	r0, [pc, #328]	; (17874 <cmd_advertise+0x204>)
   1772a:	f001 f988 	bl	18a3e <parse_arg_kv_dflt>
   1772e:	f88d 001b 	strb.w	r0, [sp, #27]
    if (rc != 0) {
   17732:	9b02      	ldr	r3, [sp, #8]
   17734:	2b00      	cmp	r3, #0
   17736:	d16b      	bne.n	17810 <cmd_advertise+0x1a0>
    params.itvl_min = parse_arg_time_dflt("interval_min", 625, 0, &rc);
   17738:	ab02      	add	r3, sp, #8
   1773a:	2200      	movs	r2, #0
   1773c:	f240 2171 	movw	r1, #625	; 0x271
   17740:	484d      	ldr	r0, [pc, #308]	; (17878 <cmd_advertise+0x208>)
   17742:	f001 f929 	bl	18998 <parse_arg_time_dflt>
   17746:	f8ad 0016 	strh.w	r0, [sp, #22]
    if (rc != 0) {
   1774a:	9b02      	ldr	r3, [sp, #8]
   1774c:	2b00      	cmp	r3, #0
   1774e:	d164      	bne.n	1781a <cmd_advertise+0x1aa>
    params.itvl_max = parse_arg_time_dflt("interval_max", 625, 0, &rc);
   17750:	ab02      	add	r3, sp, #8
   17752:	2200      	movs	r2, #0
   17754:	f240 2171 	movw	r1, #625	; 0x271
   17758:	4848      	ldr	r0, [pc, #288]	; (1787c <cmd_advertise+0x20c>)
   1775a:	f001 f91d 	bl	18998 <parse_arg_time_dflt>
   1775e:	f8ad 0018 	strh.w	r0, [sp, #24]
    if (rc != 0) {
   17762:	9b02      	ldr	r3, [sp, #8]
   17764:	2b00      	cmp	r3, #0
   17766:	d15d      	bne.n	17824 <cmd_advertise+0x1b4>
    params.high_duty_cycle = parse_arg_bool_dflt("high_duty", 0, &rc);
   17768:	aa02      	add	r2, sp, #8
   1776a:	2100      	movs	r1, #0
   1776c:	4844      	ldr	r0, [pc, #272]	; (17880 <cmd_advertise+0x210>)
   1776e:	f001 f8aa 	bl	188c6 <parse_arg_bool_dflt>
   17772:	f89d 301c 	ldrb.w	r3, [sp, #28]
   17776:	f360 0300 	bfi	r3, r0, #0, #1
   1777a:	f88d 301c 	strb.w	r3, [sp, #28]
    if (rc != 0) {
   1777e:	9b02      	ldr	r3, [sp, #8]
   17780:	2b00      	cmp	r3, #0
   17782:	d154      	bne.n	1782e <cmd_advertise+0x1be>
    duration_ms = parse_arg_long_bounds_dflt("duration", 1, INT32_MAX,
   17784:	ab02      	add	r3, sp, #8
   17786:	9300      	str	r3, [sp, #0]
   17788:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1778c:	461a      	mov	r2, r3
   1778e:	2101      	movs	r1, #1
   17790:	483c      	ldr	r0, [pc, #240]	; (17884 <cmd_advertise+0x214>)
   17792:	f001 f842 	bl	1881a <parse_arg_long_bounds_dflt>
   17796:	4602      	mov	r2, r0
    if (rc != 0) {
   17798:	9b02      	ldr	r3, [sp, #8]
   1779a:	2b00      	cmp	r3, #0
   1779c:	d14c      	bne.n	17838 <cmd_advertise+0x1c8>
    rc = btshell_adv_start(own_addr_type, peer_addr_param, duration_ms,
   1779e:	9400      	str	r4, [sp, #0]
   177a0:	ab05      	add	r3, sp, #20
   177a2:	4631      	mov	r1, r6
   177a4:	4628      	mov	r0, r5
   177a6:	f7fd ff81 	bl	156ac <btshell_adv_start>
   177aa:	9002      	str	r0, [sp, #8]
    if (rc != 0) {
   177ac:	b198      	cbz	r0, 177d6 <cmd_advertise+0x166>
        console_printf("advertise fail: %d\n", rc);
   177ae:	4601      	mov	r1, r0
   177b0:	4835      	ldr	r0, [pc, #212]	; (17888 <cmd_advertise+0x218>)
   177b2:	f004 fcc1 	bl	1c138 <console_printf>
        return rc;
   177b6:	9802      	ldr	r0, [sp, #8]
   177b8:	e00d      	b.n	177d6 <cmd_advertise+0x166>
        rc = btshell_adv_stop();
   177ba:	f7fd ff6d 	bl	15698 <btshell_adv_stop>
   177be:	9002      	str	r0, [sp, #8]
        if (rc != 0) {
   177c0:	b148      	cbz	r0, 177d6 <cmd_advertise+0x166>
            console_printf("advertise stop fail: %d\n", rc);
   177c2:	4601      	mov	r1, r0
   177c4:	4831      	ldr	r0, [pc, #196]	; (1788c <cmd_advertise+0x21c>)
   177c6:	f004 fcb7 	bl	1c138 <console_printf>
            return rc;
   177ca:	9802      	ldr	r0, [sp, #8]
   177cc:	e003      	b.n	177d6 <cmd_advertise+0x166>
        console_printf("invalid 'conn' parameter\n");
   177ce:	4830      	ldr	r0, [pc, #192]	; (17890 <cmd_advertise+0x220>)
   177d0:	f004 fcb2 	bl	1c138 <console_printf>
        return rc;
   177d4:	9802      	ldr	r0, [sp, #8]
}
   177d6:	b008      	add	sp, #32
   177d8:	bd70      	pop	{r4, r5, r6, pc}
        console_printf("invalid 'discov' parameter\n");
   177da:	482e      	ldr	r0, [pc, #184]	; (17894 <cmd_advertise+0x224>)
   177dc:	f004 fcac 	bl	1c138 <console_printf>
        return rc;
   177e0:	9802      	ldr	r0, [sp, #8]
   177e2:	e7f8      	b.n	177d6 <cmd_advertise+0x166>
        console_printf("invalid 'peer_addr' parameter\n");
   177e4:	482c      	ldr	r0, [pc, #176]	; (17898 <cmd_advertise+0x228>)
   177e6:	f004 fca7 	bl	1c138 <console_printf>
        return rc;
   177ea:	9802      	ldr	r0, [sp, #8]
   177ec:	e7f3      	b.n	177d6 <cmd_advertise+0x166>
        peer_addr_param = NULL;
   177ee:	2600      	movs	r6, #0
   177f0:	e778      	b.n	176e4 <cmd_advertise+0x74>
        console_printf("invalid 'restart' parameter\n");
   177f2:	482a      	ldr	r0, [pc, #168]	; (1789c <cmd_advertise+0x22c>)
   177f4:	f004 fca0 	bl	1c138 <console_printf>
        return rc;
   177f8:	9802      	ldr	r0, [sp, #8]
   177fa:	e7ec      	b.n	177d6 <cmd_advertise+0x166>
        console_printf("invalid 'own_addr_type' parameter\n");
   177fc:	4828      	ldr	r0, [pc, #160]	; (178a0 <cmd_advertise+0x230>)
   177fe:	f004 fc9b 	bl	1c138 <console_printf>
        return rc;
   17802:	9802      	ldr	r0, [sp, #8]
   17804:	e7e7      	b.n	177d6 <cmd_advertise+0x166>
        console_printf("invalid 'channel_map' parameter\n");
   17806:	4827      	ldr	r0, [pc, #156]	; (178a4 <cmd_advertise+0x234>)
   17808:	f004 fc96 	bl	1c138 <console_printf>
        return rc;
   1780c:	9802      	ldr	r0, [sp, #8]
   1780e:	e7e2      	b.n	177d6 <cmd_advertise+0x166>
        console_printf("invalid 'filter' parameter\n");
   17810:	4825      	ldr	r0, [pc, #148]	; (178a8 <cmd_advertise+0x238>)
   17812:	f004 fc91 	bl	1c138 <console_printf>
        return rc;
   17816:	9802      	ldr	r0, [sp, #8]
   17818:	e7dd      	b.n	177d6 <cmd_advertise+0x166>
        console_printf("invalid 'interval_min' parameter\n");
   1781a:	4824      	ldr	r0, [pc, #144]	; (178ac <cmd_advertise+0x23c>)
   1781c:	f004 fc8c 	bl	1c138 <console_printf>
        return rc;
   17820:	9802      	ldr	r0, [sp, #8]
   17822:	e7d8      	b.n	177d6 <cmd_advertise+0x166>
        console_printf("invalid 'interval_max' parameter\n");
   17824:	4822      	ldr	r0, [pc, #136]	; (178b0 <cmd_advertise+0x240>)
   17826:	f004 fc87 	bl	1c138 <console_printf>
        return rc;
   1782a:	9802      	ldr	r0, [sp, #8]
   1782c:	e7d3      	b.n	177d6 <cmd_advertise+0x166>
        console_printf("invalid 'high_duty' parameter\n");
   1782e:	4821      	ldr	r0, [pc, #132]	; (178b4 <cmd_advertise+0x244>)
   17830:	f004 fc82 	bl	1c138 <console_printf>
        return rc;
   17834:	9802      	ldr	r0, [sp, #8]
   17836:	e7ce      	b.n	177d6 <cmd_advertise+0x166>
        console_printf("invalid 'duration' parameter\n");
   17838:	481f      	ldr	r0, [pc, #124]	; (178b8 <cmd_advertise+0x248>)
   1783a:	f004 fc7d 	bl	1c138 <console_printf>
        return rc;
   1783e:	9802      	ldr	r0, [sp, #8]
   17840:	e7c9      	b.n	177d6 <cmd_advertise+0x166>
   17842:	bf00      	nop
   17844:	00034ee4 	.word	0x00034ee4
   17848:	00037764 	.word	0x00037764
   1784c:	00034df4 	.word	0x00034df4
   17850:	00037784 	.word	0x00037784
   17854:	00035fa0 	.word	0x00035fa0
   17858:	00037814 	.word	0x00037814
   1785c:	00035bb8 	.word	0x00035bb8
   17860:	00035fc4 	.word	0x00035fc4
   17864:	000377ec 	.word	0x000377ec
   17868:	000359b8 	.word	0x000359b8
   1786c:	00035fec 	.word	0x00035fec
   17870:	000377a4 	.word	0x000377a4
   17874:	00035970 	.word	0x00035970
   17878:	000351a4 	.word	0x000351a4
   1787c:	000351d8 	.word	0x000351d8
   17880:	0003601c 	.word	0x0003601c
   17884:	000358b0 	.word	0x000358b0
   17888:	00036048 	.word	0x00036048
   1788c:	00035f84 	.word	0x00035f84
   17890:	00034dfc 	.word	0x00034dfc
   17894:	00035fa8 	.word	0x00035fa8
   17898:	00035bc0 	.word	0x00035bc0
   1789c:	00035fcc 	.word	0x00035fcc
   178a0:	000359c8 	.word	0x000359c8
   178a4:	00035ff8 	.word	0x00035ff8
   178a8:	00035978 	.word	0x00035978
   178ac:	000351b4 	.word	0x000351b4
   178b0:	000351e8 	.word	0x000351e8
   178b4:	00036028 	.word	0x00036028
   178b8:	000358bc 	.word	0x000358bc

000178bc <cmd_parse_conn_start_end>:
{
   178bc:	b570      	push	{r4, r5, r6, lr}
   178be:	b082      	sub	sp, #8
   178c0:	4604      	mov	r4, r0
   178c2:	460d      	mov	r5, r1
   178c4:	4616      	mov	r6, r2
    *out_conn = parse_arg_uint16("conn", &rc);
   178c6:	a901      	add	r1, sp, #4
   178c8:	480b      	ldr	r0, [pc, #44]	; (178f8 <cmd_parse_conn_start_end+0x3c>)
   178ca:	f001 f810 	bl	188ee <parse_arg_uint16>
   178ce:	8020      	strh	r0, [r4, #0]
    if (rc != 0) {
   178d0:	9801      	ldr	r0, [sp, #4]
   178d2:	b108      	cbz	r0, 178d8 <cmd_parse_conn_start_end+0x1c>
}
   178d4:	b002      	add	sp, #8
   178d6:	bd70      	pop	{r4, r5, r6, pc}
    *out_start = parse_arg_uint16("start", &rc);
   178d8:	a901      	add	r1, sp, #4
   178da:	4808      	ldr	r0, [pc, #32]	; (178fc <cmd_parse_conn_start_end+0x40>)
   178dc:	f001 f807 	bl	188ee <parse_arg_uint16>
   178e0:	8028      	strh	r0, [r5, #0]
    if (rc != 0) {
   178e2:	9801      	ldr	r0, [sp, #4]
   178e4:	2800      	cmp	r0, #0
   178e6:	d1f5      	bne.n	178d4 <cmd_parse_conn_start_end+0x18>
    *out_end = parse_arg_uint16("end", &rc);
   178e8:	a901      	add	r1, sp, #4
   178ea:	4805      	ldr	r0, [pc, #20]	; (17900 <cmd_parse_conn_start_end+0x44>)
   178ec:	f000 ffff 	bl	188ee <parse_arg_uint16>
   178f0:	8030      	strh	r0, [r6, #0]
    if (rc != 0) {
   178f2:	9801      	ldr	r0, [sp, #4]
   178f4:	e7ee      	b.n	178d4 <cmd_parse_conn_start_end+0x18>
   178f6:	bf00      	nop
   178f8:	00034df4 	.word	0x00034df4
   178fc:	0003605c 	.word	0x0003605c
   17900:	00036064 	.word	0x00036064

00017904 <cmd_init>:
};


void
cmd_init(void)
{
   17904:	b510      	push	{r4, lr}
    shell_register(BTSHELL_MODULE, btshell_commands);
   17906:	4c04      	ldr	r4, [pc, #16]	; (17918 <cmd_init+0x14>)
   17908:	4904      	ldr	r1, [pc, #16]	; (1791c <cmd_init+0x18>)
   1790a:	4620      	mov	r0, r4
   1790c:	f006 f872 	bl	1d9f4 <shell_register>
    shell_register_default_module(BTSHELL_MODULE);
   17910:	4620      	mov	r0, r4
   17912:	f006 f860 	bl	1d9d6 <shell_register_default_module>
}
   17916:	bd10      	pop	{r4, pc}
   17918:	00036068 	.word	0x00036068
   1791c:	000374ec 	.word	0x000374ec

00017920 <cmd_gatt_discover_characteristic>:
 * $gatt-discover                                                            *
 *****************************************************************************/

int
cmd_gatt_discover_characteristic(int argc, char **argv)
{
   17920:	b510      	push	{r4, lr}
   17922:	b088      	sub	sp, #32
    uint16_t conn_handle;
    uint16_t end_handle;
    ble_uuid_any_t uuid;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17924:	3104      	adds	r1, #4
   17926:	3801      	subs	r0, #1
   17928:	f001 f938 	bl	18b9c <parse_arg_all>
    if (rc != 0) {
   1792c:	4604      	mov	r4, r0
   1792e:	b110      	cbz	r0, 17936 <cmd_gatt_discover_characteristic+0x16>
        console_printf("error discovering characteristics; rc=%d\n", rc);
        return rc;
    }

    return 0;
}
   17930:	4620      	mov	r0, r4
   17932:	b008      	add	sp, #32
   17934:	bd10      	pop	{r4, pc}
    rc = cmd_parse_conn_start_end(&conn_handle, &start_handle, &end_handle);
   17936:	f10d 021a 	add.w	r2, sp, #26
   1793a:	f10d 011e 	add.w	r1, sp, #30
   1793e:	a807      	add	r0, sp, #28
   17940:	f7ff ffbc 	bl	178bc <cmd_parse_conn_start_end>
    if (rc != 0) {
   17944:	4604      	mov	r4, r0
   17946:	b9b8      	cbnz	r0, 17978 <cmd_gatt_discover_characteristic+0x58>
    rc = parse_arg_uuid("uuid", &uuid);
   17948:	a901      	add	r1, sp, #4
   1794a:	4815      	ldr	r0, [pc, #84]	; (179a0 <cmd_gatt_discover_characteristic+0x80>)
   1794c:	f001 f8f4 	bl	18b38 <parse_arg_uuid>
    if (rc == 0) {
   17950:	4604      	mov	r4, r0
   17952:	b1a8      	cbz	r0, 17980 <cmd_gatt_discover_characteristic+0x60>
    } else if (rc == ENOENT) {
   17954:	2802      	cmp	r0, #2
   17956:	d11e      	bne.n	17996 <cmd_gatt_discover_characteristic+0x76>
        rc = btshell_disc_all_chrs(conn_handle, start_handle, end_handle);
   17958:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   1795c:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   17960:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   17964:	f7fd fcd0 	bl	15308 <btshell_disc_all_chrs>
   17968:	4604      	mov	r4, r0
    if (rc != 0) {
   1796a:	2c00      	cmp	r4, #0
   1796c:	d0e0      	beq.n	17930 <cmd_gatt_discover_characteristic+0x10>
        console_printf("error discovering characteristics; rc=%d\n", rc);
   1796e:	4621      	mov	r1, r4
   17970:	480c      	ldr	r0, [pc, #48]	; (179a4 <cmd_gatt_discover_characteristic+0x84>)
   17972:	f004 fbe1 	bl	1c138 <console_printf>
        return rc;
   17976:	e7db      	b.n	17930 <cmd_gatt_discover_characteristic+0x10>
        console_printf("invalid 'conn start end' parameter\n");
   17978:	480b      	ldr	r0, [pc, #44]	; (179a8 <cmd_gatt_discover_characteristic+0x88>)
   1797a:	f004 fbdd 	bl	1c138 <console_printf>
        return rc;
   1797e:	e7d7      	b.n	17930 <cmd_gatt_discover_characteristic+0x10>
        rc = btshell_disc_chrs_by_uuid(conn_handle, start_handle, end_handle,
   17980:	ab01      	add	r3, sp, #4
   17982:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   17986:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   1798a:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   1798e:	f7fd fcd5 	bl	1533c <btshell_disc_chrs_by_uuid>
   17992:	4604      	mov	r4, r0
   17994:	e7e9      	b.n	1796a <cmd_gatt_discover_characteristic+0x4a>
        console_printf("invalid 'uuid' parameter\n");
   17996:	4805      	ldr	r0, [pc, #20]	; (179ac <cmd_gatt_discover_characteristic+0x8c>)
   17998:	f004 fbce 	bl	1c138 <console_printf>
        return rc;
   1799c:	e7c8      	b.n	17930 <cmd_gatt_discover_characteristic+0x10>
   1799e:	bf00      	nop
   179a0:	00036518 	.word	0x00036518
   179a4:	00037fdc 	.word	0x00037fdc
   179a8:	00037f9c 	.word	0x00037f9c
   179ac:	00037fc0 	.word	0x00037fc0

000179b0 <cmd_gatt_discover_descriptor>:

int
cmd_gatt_discover_descriptor(int argc, char **argv)
{
   179b0:	b510      	push	{r4, lr}
   179b2:	b082      	sub	sp, #8
    uint16_t start_handle;
    uint16_t conn_handle;
    uint16_t end_handle;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   179b4:	3104      	adds	r1, #4
   179b6:	3801      	subs	r0, #1
   179b8:	f001 f8f0 	bl	18b9c <parse_arg_all>
    if (rc != 0) {
   179bc:	4604      	mov	r4, r0
   179be:	b110      	cbz	r0, 179c6 <cmd_gatt_discover_descriptor+0x16>
        console_printf("error discovering descriptors; rc=%d\n", rc);
        return rc;
    }

    return 0;
}
   179c0:	4620      	mov	r0, r4
   179c2:	b002      	add	sp, #8
   179c4:	bd10      	pop	{r4, pc}
    rc = cmd_parse_conn_start_end(&conn_handle, &start_handle, &end_handle);
   179c6:	f10d 0202 	add.w	r2, sp, #2
   179ca:	f10d 0106 	add.w	r1, sp, #6
   179ce:	a801      	add	r0, sp, #4
   179d0:	f7ff ff74 	bl	178bc <cmd_parse_conn_start_end>
    if (rc != 0) {
   179d4:	4604      	mov	r4, r0
   179d6:	b978      	cbnz	r0, 179f8 <cmd_gatt_discover_descriptor+0x48>
    rc = btshell_disc_all_dscs(conn_handle, start_handle, end_handle);
   179d8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   179dc:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   179e0:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   179e4:	f7fd fcc6 	bl	15374 <btshell_disc_all_dscs>
    if (rc != 0) {
   179e8:	4604      	mov	r4, r0
   179ea:	2800      	cmp	r0, #0
   179ec:	d0e8      	beq.n	179c0 <cmd_gatt_discover_descriptor+0x10>
        console_printf("error discovering descriptors; rc=%d\n", rc);
   179ee:	4601      	mov	r1, r0
   179f0:	4803      	ldr	r0, [pc, #12]	; (17a00 <cmd_gatt_discover_descriptor+0x50>)
   179f2:	f004 fba1 	bl	1c138 <console_printf>
        return rc;
   179f6:	e7e3      	b.n	179c0 <cmd_gatt_discover_descriptor+0x10>
        console_printf("invalid 'conn start end' parameter\n");
   179f8:	4802      	ldr	r0, [pc, #8]	; (17a04 <cmd_gatt_discover_descriptor+0x54>)
   179fa:	f004 fb9d 	bl	1c138 <console_printf>
        return rc;
   179fe:	e7df      	b.n	179c0 <cmd_gatt_discover_descriptor+0x10>
   17a00:	00038008 	.word	0x00038008
   17a04:	00037f9c 	.word	0x00037f9c

00017a08 <cmd_gatt_discover_service>:

int
cmd_gatt_discover_service(int argc, char **argv)
{
   17a08:	b510      	push	{r4, lr}
   17a0a:	b086      	sub	sp, #24
    ble_uuid_any_t uuid;
    int conn_handle;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17a0c:	3104      	adds	r1, #4
   17a0e:	3801      	subs	r0, #1
   17a10:	f001 f8c4 	bl	18b9c <parse_arg_all>
   17a14:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   17a16:	b108      	cbz	r0, 17a1c <cmd_gatt_discover_service+0x14>
        console_printf("error discovering services; rc=%d\n", rc);
        return rc;
    }

    return 0;
}
   17a18:	b006      	add	sp, #24
   17a1a:	bd10      	pop	{r4, pc}
    conn_handle = parse_arg_uint16("conn", &rc);
   17a1c:	4669      	mov	r1, sp
   17a1e:	4815      	ldr	r0, [pc, #84]	; (17a74 <cmd_gatt_discover_service+0x6c>)
   17a20:	f000 ff65 	bl	188ee <parse_arg_uint16>
   17a24:	4604      	mov	r4, r0
    if (rc != 0) {
   17a26:	9b00      	ldr	r3, [sp, #0]
   17a28:	b9a3      	cbnz	r3, 17a54 <cmd_gatt_discover_service+0x4c>
    rc = parse_arg_uuid("uuid", &uuid);
   17a2a:	a901      	add	r1, sp, #4
   17a2c:	4812      	ldr	r0, [pc, #72]	; (17a78 <cmd_gatt_discover_service+0x70>)
   17a2e:	f001 f883 	bl	18b38 <parse_arg_uuid>
   17a32:	9000      	str	r0, [sp, #0]
    if (rc == 0) {
   17a34:	b198      	cbz	r0, 17a5e <cmd_gatt_discover_service+0x56>
    } else if (rc == ENOENT) {
   17a36:	2802      	cmp	r0, #2
   17a38:	d117      	bne.n	17a6a <cmd_gatt_discover_service+0x62>
        rc = btshell_disc_svcs(conn_handle);
   17a3a:	4620      	mov	r0, r4
   17a3c:	f7fd fc8a 	bl	15354 <btshell_disc_svcs>
   17a40:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   17a42:	9800      	ldr	r0, [sp, #0]
   17a44:	2800      	cmp	r0, #0
   17a46:	d0e7      	beq.n	17a18 <cmd_gatt_discover_service+0x10>
        console_printf("error discovering services; rc=%d\n", rc);
   17a48:	4601      	mov	r1, r0
   17a4a:	480c      	ldr	r0, [pc, #48]	; (17a7c <cmd_gatt_discover_service+0x74>)
   17a4c:	f004 fb74 	bl	1c138 <console_printf>
        return rc;
   17a50:	9800      	ldr	r0, [sp, #0]
   17a52:	e7e1      	b.n	17a18 <cmd_gatt_discover_service+0x10>
        console_printf("invalid 'conn' parameter\n");
   17a54:	480a      	ldr	r0, [pc, #40]	; (17a80 <cmd_gatt_discover_service+0x78>)
   17a56:	f004 fb6f 	bl	1c138 <console_printf>
        return rc;
   17a5a:	9800      	ldr	r0, [sp, #0]
   17a5c:	e7dc      	b.n	17a18 <cmd_gatt_discover_service+0x10>
        rc = btshell_disc_svc_by_uuid(conn_handle, &uuid.u);
   17a5e:	a901      	add	r1, sp, #4
   17a60:	4620      	mov	r0, r4
   17a62:	f7fd fc7f 	bl	15364 <btshell_disc_svc_by_uuid>
   17a66:	9000      	str	r0, [sp, #0]
   17a68:	e7eb      	b.n	17a42 <cmd_gatt_discover_service+0x3a>
        console_printf("invalid 'uuid' parameter\n");
   17a6a:	4806      	ldr	r0, [pc, #24]	; (17a84 <cmd_gatt_discover_service+0x7c>)
   17a6c:	f004 fb64 	bl	1c138 <console_printf>
        return rc;
   17a70:	9800      	ldr	r0, [sp, #0]
   17a72:	e7d1      	b.n	17a18 <cmd_gatt_discover_service+0x10>
   17a74:	00034df4 	.word	0x00034df4
   17a78:	00036518 	.word	0x00036518
   17a7c:	00038030 	.word	0x00038030
   17a80:	00034dfc 	.word	0x00034dfc
   17a84:	00037fc0 	.word	0x00037fc0

00017a88 <cmd_gatt_discover_full>:

int
cmd_gatt_discover_full(int argc, char **argv)
{
   17a88:	b500      	push	{lr}
   17a8a:	b083      	sub	sp, #12
    int conn_handle;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17a8c:	3104      	adds	r1, #4
   17a8e:	3801      	subs	r0, #1
   17a90:	f001 f884 	bl	18b9c <parse_arg_all>
   17a94:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   17a96:	b110      	cbz	r0, 17a9e <cmd_gatt_discover_full+0x16>
        console_printf("error discovering all; rc=%d\n", rc);
        return rc;
    }

    return 0;
}
   17a98:	b003      	add	sp, #12
   17a9a:	f85d fb04 	ldr.w	pc, [sp], #4
    conn_handle = parse_arg_uint16("conn", &rc);
   17a9e:	a901      	add	r1, sp, #4
   17aa0:	480a      	ldr	r0, [pc, #40]	; (17acc <cmd_gatt_discover_full+0x44>)
   17aa2:	f000 ff24 	bl	188ee <parse_arg_uint16>
    if (rc != 0) {
   17aa6:	9b01      	ldr	r3, [sp, #4]
   17aa8:	b953      	cbnz	r3, 17ac0 <cmd_gatt_discover_full+0x38>
    rc = btshell_disc_full(conn_handle);
   17aaa:	f7fd fd4b 	bl	15544 <btshell_disc_full>
   17aae:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   17ab0:	2800      	cmp	r0, #0
   17ab2:	d0f1      	beq.n	17a98 <cmd_gatt_discover_full+0x10>
        console_printf("error discovering all; rc=%d\n", rc);
   17ab4:	4601      	mov	r1, r0
   17ab6:	4806      	ldr	r0, [pc, #24]	; (17ad0 <cmd_gatt_discover_full+0x48>)
   17ab8:	f004 fb3e 	bl	1c138 <console_printf>
        return rc;
   17abc:	9801      	ldr	r0, [sp, #4]
   17abe:	e7eb      	b.n	17a98 <cmd_gatt_discover_full+0x10>
        console_printf("invalid 'conn' parameter\n");
   17ac0:	4804      	ldr	r0, [pc, #16]	; (17ad4 <cmd_gatt_discover_full+0x4c>)
   17ac2:	f004 fb39 	bl	1c138 <console_printf>
        return rc;
   17ac6:	9801      	ldr	r0, [sp, #4]
   17ac8:	e7e6      	b.n	17a98 <cmd_gatt_discover_full+0x10>
   17aca:	bf00      	nop
   17acc:	00034df4 	.word	0x00034df4
   17ad0:	00038054 	.word	0x00038054
   17ad4:	00034dfc 	.word	0x00034dfc

00017ad8 <cmd_gatt_exchange_mtu>:
 * $gatt-exchange-mtu                                                        *
 *****************************************************************************/

int
cmd_gatt_exchange_mtu(int argc, char **argv)
{
   17ad8:	b500      	push	{lr}
   17ada:	b083      	sub	sp, #12
    uint16_t conn_handle;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17adc:	3104      	adds	r1, #4
   17ade:	3801      	subs	r0, #1
   17ae0:	f001 f85c 	bl	18b9c <parse_arg_all>
   17ae4:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   17ae6:	b110      	cbz	r0, 17aee <cmd_gatt_exchange_mtu+0x16>
        console_printf("error exchanging mtu; rc=%d\n", rc);
        return rc;
    }

    return 0;
}
   17ae8:	b003      	add	sp, #12
   17aea:	f85d fb04 	ldr.w	pc, [sp], #4
    conn_handle = parse_arg_uint16("conn", &rc);
   17aee:	a901      	add	r1, sp, #4
   17af0:	480a      	ldr	r0, [pc, #40]	; (17b1c <cmd_gatt_exchange_mtu+0x44>)
   17af2:	f000 fefc 	bl	188ee <parse_arg_uint16>
    if (rc != 0) {
   17af6:	9b01      	ldr	r3, [sp, #4]
   17af8:	b953      	cbnz	r3, 17b10 <cmd_gatt_exchange_mtu+0x38>
    rc = btshell_exchange_mtu(conn_handle);
   17afa:	f7fd fbfd 	bl	152f8 <btshell_exchange_mtu>
   17afe:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   17b00:	2800      	cmp	r0, #0
   17b02:	d0f1      	beq.n	17ae8 <cmd_gatt_exchange_mtu+0x10>
        console_printf("error exchanging mtu; rc=%d\n", rc);
   17b04:	4601      	mov	r1, r0
   17b06:	4806      	ldr	r0, [pc, #24]	; (17b20 <cmd_gatt_exchange_mtu+0x48>)
   17b08:	f004 fb16 	bl	1c138 <console_printf>
        return rc;
   17b0c:	9801      	ldr	r0, [sp, #4]
   17b0e:	e7eb      	b.n	17ae8 <cmd_gatt_exchange_mtu+0x10>
        console_printf("invalid 'conn' parameter\n");
   17b10:	4804      	ldr	r0, [pc, #16]	; (17b24 <cmd_gatt_exchange_mtu+0x4c>)
   17b12:	f004 fb11 	bl	1c138 <console_printf>
        return rc;
   17b16:	9801      	ldr	r0, [sp, #4]
   17b18:	e7e6      	b.n	17ae8 <cmd_gatt_exchange_mtu+0x10>
   17b1a:	bf00      	nop
   17b1c:	00034df4 	.word	0x00034df4
   17b20:	00038074 	.word	0x00038074
   17b24:	00034dfc 	.word	0x00034dfc

00017b28 <cmd_gatt_notify>:
 * $gatt-notify                                                              *
 *****************************************************************************/

int
cmd_gatt_notify(int argc, char **argv)
{
   17b28:	b510      	push	{r4, lr}
   17b2a:	b082      	sub	sp, #8
    uint16_t attr_handle;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17b2c:	3104      	adds	r1, #4
   17b2e:	3801      	subs	r0, #1
   17b30:	f001 f834 	bl	18b9c <parse_arg_all>
   17b34:	4604      	mov	r4, r0
   17b36:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   17b38:	b110      	cbz	r0, 17b40 <cmd_gatt_notify+0x18>
    }

    btshell_notify(attr_handle);

    return 0;
}
   17b3a:	4620      	mov	r0, r4
   17b3c:	b002      	add	sp, #8
   17b3e:	bd10      	pop	{r4, pc}
    attr_handle = parse_arg_uint16("attr", &rc);
   17b40:	a901      	add	r1, sp, #4
   17b42:	4806      	ldr	r0, [pc, #24]	; (17b5c <cmd_gatt_notify+0x34>)
   17b44:	f000 fed3 	bl	188ee <parse_arg_uint16>
    if (rc != 0) {
   17b48:	9c01      	ldr	r4, [sp, #4]
   17b4a:	b914      	cbnz	r4, 17b52 <cmd_gatt_notify+0x2a>
    btshell_notify(attr_handle);
   17b4c:	f7fd fe24 	bl	15798 <btshell_notify>
    return 0;
   17b50:	e7f3      	b.n	17b3a <cmd_gatt_notify+0x12>
        console_printf("invalid 'attr' parameter\n");
   17b52:	4803      	ldr	r0, [pc, #12]	; (17b60 <cmd_gatt_notify+0x38>)
   17b54:	f004 faf0 	bl	1c138 <console_printf>
        return rc;
   17b58:	9c01      	ldr	r4, [sp, #4]
   17b5a:	e7ee      	b.n	17b3a <cmd_gatt_notify+0x12>
   17b5c:	0003635c 	.word	0x0003635c
   17b60:	00038094 	.word	0x00038094

00017b64 <cmd_gatt_read>:

#define CMD_READ_MAX_ATTRS  8

int
cmd_gatt_read(int argc, char **argv)
{
   17b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17b68:	b087      	sub	sp, #28
    uint8_t num_attr_handles;
    int is_uuid;
    int is_long;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17b6a:	3104      	adds	r1, #4
   17b6c:	3801      	subs	r0, #1
   17b6e:	f001 f815 	bl	18b9c <parse_arg_all>
   17b72:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   17b74:	b110      	cbz	r0, 17b7c <cmd_gatt_read+0x18>
        console_printf("error reading characteristic; rc=%d\n", rc);
        return rc;
    }

    return 0;
}
   17b76:	b007      	add	sp, #28
   17b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    conn_handle = parse_arg_uint16("conn", &rc);
   17b7c:	4669      	mov	r1, sp
   17b7e:	4855      	ldr	r0, [pc, #340]	; (17cd4 <cmd_gatt_read+0x170>)
   17b80:	f000 feb5 	bl	188ee <parse_arg_uint16>
   17b84:	4605      	mov	r5, r0
    if (rc != 0) {
   17b86:	9e00      	ldr	r6, [sp, #0]
   17b88:	b956      	cbnz	r6, 17ba0 <cmd_gatt_read+0x3c>
    is_long = parse_arg_long("long", &rc);
   17b8a:	4669      	mov	r1, sp
   17b8c:	4852      	ldr	r0, [pc, #328]	; (17cd8 <cmd_gatt_read+0x174>)
   17b8e:	f000 fe89 	bl	188a4 <parse_arg_long>
   17b92:	4607      	mov	r7, r0
    if (rc == ENOENT) {
   17b94:	9b00      	ldr	r3, [sp, #0]
   17b96:	2b02      	cmp	r3, #2
   17b98:	d00c      	beq.n	17bb4 <cmd_gatt_read+0x50>
    } else if (rc != 0) {
   17b9a:	b933      	cbnz	r3, 17baa <cmd_gatt_read+0x46>
    for (num_attr_handles = 0;
   17b9c:	2400      	movs	r4, #0
   17b9e:	e00d      	b.n	17bbc <cmd_gatt_read+0x58>
        console_printf("invalid 'conn' parameter\n");
   17ba0:	484e      	ldr	r0, [pc, #312]	; (17cdc <cmd_gatt_read+0x178>)
   17ba2:	f004 fac9 	bl	1c138 <console_printf>
        return rc;
   17ba6:	9800      	ldr	r0, [sp, #0]
   17ba8:	e7e5      	b.n	17b76 <cmd_gatt_read+0x12>
        console_printf("invalid 'long' parameter\n");
   17baa:	484d      	ldr	r0, [pc, #308]	; (17ce0 <cmd_gatt_read+0x17c>)
   17bac:	f004 fac4 	bl	1c138 <console_printf>
        return rc;
   17bb0:	9800      	ldr	r0, [sp, #0]
   17bb2:	e7e0      	b.n	17b76 <cmd_gatt_read+0x12>
        is_long = 0;
   17bb4:	4637      	mov	r7, r6
   17bb6:	e7f1      	b.n	17b9c <cmd_gatt_read+0x38>
         num_attr_handles++) {
   17bb8:	3401      	adds	r4, #1
   17bba:	b2e4      	uxtb	r4, r4
    for (num_attr_handles = 0;
   17bbc:	2c07      	cmp	r4, #7
   17bbe:	d810      	bhi.n	17be2 <cmd_gatt_read+0x7e>
        attr_handles[num_attr_handles] = parse_arg_uint16("attr", &rc);
   17bc0:	4669      	mov	r1, sp
   17bc2:	4848      	ldr	r0, [pc, #288]	; (17ce4 <cmd_gatt_read+0x180>)
   17bc4:	f000 fe93 	bl	188ee <parse_arg_uint16>
   17bc8:	4b47      	ldr	r3, [pc, #284]	; (17ce8 <cmd_gatt_read+0x184>)
   17bca:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
        if (rc == ENOENT) {
   17bce:	9b00      	ldr	r3, [sp, #0]
   17bd0:	2b02      	cmp	r3, #2
   17bd2:	d006      	beq.n	17be2 <cmd_gatt_read+0x7e>
        } else if (rc != 0) {
   17bd4:	2b00      	cmp	r3, #0
   17bd6:	d0ef      	beq.n	17bb8 <cmd_gatt_read+0x54>
            console_printf("invalid 'attr' parameter\n");
   17bd8:	4844      	ldr	r0, [pc, #272]	; (17cec <cmd_gatt_read+0x188>)
   17bda:	f004 faad 	bl	1c138 <console_printf>
            return rc;
   17bde:	9800      	ldr	r0, [sp, #0]
   17be0:	e7c9      	b.n	17b76 <cmd_gatt_read+0x12>
    rc = parse_arg_uuid("uuid", &uuid);
   17be2:	a901      	add	r1, sp, #4
   17be4:	4842      	ldr	r0, [pc, #264]	; (17cf0 <cmd_gatt_read+0x18c>)
   17be6:	f000 ffa7 	bl	18b38 <parse_arg_uuid>
   17bea:	9000      	str	r0, [sp, #0]
    if (rc == ENOENT) {
   17bec:	2802      	cmp	r0, #2
   17bee:	d001      	beq.n	17bf4 <cmd_gatt_read+0x90>
    } else if (rc == 0) {
   17bf0:	bb48      	cbnz	r0, 17c46 <cmd_gatt_read+0xe2>
        is_uuid = 1;
   17bf2:	2601      	movs	r6, #1
    start = parse_arg_uint16("start", &rc);
   17bf4:	4669      	mov	r1, sp
   17bf6:	483f      	ldr	r0, [pc, #252]	; (17cf4 <cmd_gatt_read+0x190>)
   17bf8:	f000 fe79 	bl	188ee <parse_arg_uint16>
   17bfc:	4680      	mov	r8, r0
    if (rc == ENOENT) {
   17bfe:	9b00      	ldr	r3, [sp, #0]
   17c00:	2b02      	cmp	r3, #2
   17c02:	d02a      	beq.n	17c5a <cmd_gatt_read+0xf6>
    } else if (rc != 0) {
   17c04:	bb23      	cbnz	r3, 17c50 <cmd_gatt_read+0xec>
    end = parse_arg_uint16("end", &rc);
   17c06:	4669      	mov	r1, sp
   17c08:	483b      	ldr	r0, [pc, #236]	; (17cf8 <cmd_gatt_read+0x194>)
   17c0a:	f000 fe70 	bl	188ee <parse_arg_uint16>
   17c0e:	4681      	mov	r9, r0
    if (rc == ENOENT) {
   17c10:	9b00      	ldr	r3, [sp, #0]
   17c12:	2b02      	cmp	r3, #2
   17c14:	d029      	beq.n	17c6a <cmd_gatt_read+0x106>
    } else if (rc != 0) {
   17c16:	bb1b      	cbnz	r3, 17c60 <cmd_gatt_read+0xfc>
    offset = parse_arg_uint16("offset", &rc);
   17c18:	4669      	mov	r1, sp
   17c1a:	4838      	ldr	r0, [pc, #224]	; (17cfc <cmd_gatt_read+0x198>)
   17c1c:	f000 fe67 	bl	188ee <parse_arg_uint16>
    if (rc == ENOENT) {
   17c20:	9b00      	ldr	r3, [sp, #0]
   17c22:	2b02      	cmp	r3, #2
   17c24:	d029      	beq.n	17c7a <cmd_gatt_read+0x116>
    } else if (rc != 0) {
   17c26:	bb1b      	cbnz	r3, 17c70 <cmd_gatt_read+0x10c>
    if (num_attr_handles == 1) {
   17c28:	2c01      	cmp	r4, #1
   17c2a:	d028      	beq.n	17c7e <cmd_gatt_read+0x11a>
    } else if (num_attr_handles > 1) {
   17c2c:	2c01      	cmp	r4, #1
   17c2e:	d836      	bhi.n	17c9e <cmd_gatt_read+0x13a>
    } else if (is_uuid) {
   17c30:	2e00      	cmp	r6, #0
   17c32:	d04c      	beq.n	17cce <cmd_gatt_read+0x16a>
        if (start == 0 || end == 0) {
   17c34:	f1b8 0f00 	cmp.w	r8, #0
   17c38:	d002      	beq.n	17c40 <cmd_gatt_read+0xdc>
   17c3a:	f1b9 0f00 	cmp.w	r9, #0
   17c3e:	d13e      	bne.n	17cbe <cmd_gatt_read+0x15a>
            rc = EINVAL;
   17c40:	2316      	movs	r3, #22
   17c42:	9300      	str	r3, [sp, #0]
   17c44:	e031      	b.n	17caa <cmd_gatt_read+0x146>
        console_printf("invalid 'uuid' parameter\n");
   17c46:	482e      	ldr	r0, [pc, #184]	; (17d00 <cmd_gatt_read+0x19c>)
   17c48:	f004 fa76 	bl	1c138 <console_printf>
        return rc;
   17c4c:	9800      	ldr	r0, [sp, #0]
   17c4e:	e792      	b.n	17b76 <cmd_gatt_read+0x12>
        console_printf("invalid 'start' parameter\n");
   17c50:	482c      	ldr	r0, [pc, #176]	; (17d04 <cmd_gatt_read+0x1a0>)
   17c52:	f004 fa71 	bl	1c138 <console_printf>
        return rc;
   17c56:	9800      	ldr	r0, [sp, #0]
   17c58:	e78d      	b.n	17b76 <cmd_gatt_read+0x12>
        start = 0;
   17c5a:	f04f 0800 	mov.w	r8, #0
   17c5e:	e7d2      	b.n	17c06 <cmd_gatt_read+0xa2>
        console_printf("invalid 'end' parameter\n");
   17c60:	4829      	ldr	r0, [pc, #164]	; (17d08 <cmd_gatt_read+0x1a4>)
   17c62:	f004 fa69 	bl	1c138 <console_printf>
        return rc;
   17c66:	9800      	ldr	r0, [sp, #0]
   17c68:	e785      	b.n	17b76 <cmd_gatt_read+0x12>
        end = 0;
   17c6a:	f04f 0900 	mov.w	r9, #0
   17c6e:	e7d3      	b.n	17c18 <cmd_gatt_read+0xb4>
        console_printf("invalid 'offset' parameter\n");
   17c70:	4826      	ldr	r0, [pc, #152]	; (17d0c <cmd_gatt_read+0x1a8>)
   17c72:	f004 fa61 	bl	1c138 <console_printf>
        return rc;
   17c76:	9800      	ldr	r0, [sp, #0]
   17c78:	e77d      	b.n	17b76 <cmd_gatt_read+0x12>
        offset = 0;
   17c7a:	2000      	movs	r0, #0
   17c7c:	e7d4      	b.n	17c28 <cmd_gatt_read+0xc4>
        if (is_long) {
   17c7e:	b13f      	cbz	r7, 17c90 <cmd_gatt_read+0x12c>
            rc = btshell_read_long(conn_handle, attr_handles[0], offset);
   17c80:	4602      	mov	r2, r0
   17c82:	4b19      	ldr	r3, [pc, #100]	; (17ce8 <cmd_gatt_read+0x184>)
   17c84:	8819      	ldrh	r1, [r3, #0]
   17c86:	4628      	mov	r0, r5
   17c88:	f7fd fcae 	bl	155e8 <btshell_read_long>
   17c8c:	9000      	str	r0, [sp, #0]
   17c8e:	e00c      	b.n	17caa <cmd_gatt_read+0x146>
            rc = btshell_read(conn_handle, attr_handles[0]);
   17c90:	4b15      	ldr	r3, [pc, #84]	; (17ce8 <cmd_gatt_read+0x184>)
   17c92:	8819      	ldrh	r1, [r3, #0]
   17c94:	4628      	mov	r0, r5
   17c96:	f7fd fc7b 	bl	15590 <btshell_read>
   17c9a:	9000      	str	r0, [sp, #0]
   17c9c:	e005      	b.n	17caa <cmd_gatt_read+0x146>
        rc = btshell_read_mult(conn_handle, attr_handles, num_attr_handles);
   17c9e:	4622      	mov	r2, r4
   17ca0:	4911      	ldr	r1, [pc, #68]	; (17ce8 <cmd_gatt_read+0x184>)
   17ca2:	4628      	mov	r0, r5
   17ca4:	f7fd fcb8 	bl	15618 <btshell_read_mult>
   17ca8:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   17caa:	9800      	ldr	r0, [sp, #0]
   17cac:	2800      	cmp	r0, #0
   17cae:	f43f af62 	beq.w	17b76 <cmd_gatt_read+0x12>
        console_printf("error reading characteristic; rc=%d\n", rc);
   17cb2:	4601      	mov	r1, r0
   17cb4:	4816      	ldr	r0, [pc, #88]	; (17d10 <cmd_gatt_read+0x1ac>)
   17cb6:	f004 fa3f 	bl	1c138 <console_printf>
        return rc;
   17cba:	9800      	ldr	r0, [sp, #0]
   17cbc:	e75b      	b.n	17b76 <cmd_gatt_read+0x12>
            rc = btshell_read_by_uuid(conn_handle, start, end, &uuid.u);
   17cbe:	ab01      	add	r3, sp, #4
   17cc0:	464a      	mov	r2, r9
   17cc2:	4641      	mov	r1, r8
   17cc4:	4628      	mov	r0, r5
   17cc6:	f7fd fc9b 	bl	15600 <btshell_read_by_uuid>
   17cca:	9000      	str	r0, [sp, #0]
   17ccc:	e7ed      	b.n	17caa <cmd_gatt_read+0x146>
        rc = EINVAL;
   17cce:	2316      	movs	r3, #22
   17cd0:	9300      	str	r3, [sp, #0]
   17cd2:	e7ea      	b.n	17caa <cmd_gatt_read+0x146>
   17cd4:	00034df4 	.word	0x00034df4
   17cd8:	0003632c 	.word	0x0003632c
   17cdc:	00034dfc 	.word	0x00034dfc
   17ce0:	000380b0 	.word	0x000380b0
   17ce4:	0003635c 	.word	0x0003635c
   17ce8:	10001f8c 	.word	0x10001f8c
   17cec:	00038094 	.word	0x00038094
   17cf0:	00036518 	.word	0x00036518
   17cf4:	0003605c 	.word	0x0003605c
   17cf8:	00036064 	.word	0x00036064
   17cfc:	00036388 	.word	0x00036388
   17d00:	00037fc0 	.word	0x00037fc0
   17d04:	000380cc 	.word	0x000380cc
   17d08:	000380e8 	.word	0x000380e8
   17d0c:	00038104 	.word	0x00038104
   17d10:	00038120 	.word	0x00038120

00017d14 <cmd_gatt_service_changed>:
 * $gatt-service-changed                                                     *
 *****************************************************************************/

int
cmd_gatt_service_changed(int argc, char **argv)
{
   17d14:	b530      	push	{r4, r5, lr}
   17d16:	b083      	sub	sp, #12
    uint16_t start;
    uint16_t end;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17d18:	3104      	adds	r1, #4
   17d1a:	3801      	subs	r0, #1
   17d1c:	f000 ff3e 	bl	18b9c <parse_arg_all>
   17d20:	4604      	mov	r4, r0
   17d22:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   17d24:	b110      	cbz	r0, 17d2c <cmd_gatt_service_changed+0x18>
    }

    ble_svc_gatt_changed(start, end);

    return 0;
}
   17d26:	4620      	mov	r0, r4
   17d28:	b003      	add	sp, #12
   17d2a:	bd30      	pop	{r4, r5, pc}
    start = parse_arg_uint16("start", &rc);
   17d2c:	a901      	add	r1, sp, #4
   17d2e:	480d      	ldr	r0, [pc, #52]	; (17d64 <cmd_gatt_service_changed+0x50>)
   17d30:	f000 fddd 	bl	188ee <parse_arg_uint16>
   17d34:	4605      	mov	r5, r0
    if (rc != 0) {
   17d36:	9b01      	ldr	r3, [sp, #4]
   17d38:	b953      	cbnz	r3, 17d50 <cmd_gatt_service_changed+0x3c>
    end = parse_arg_uint16("end", &rc);
   17d3a:	a901      	add	r1, sp, #4
   17d3c:	480a      	ldr	r0, [pc, #40]	; (17d68 <cmd_gatt_service_changed+0x54>)
   17d3e:	f000 fdd6 	bl	188ee <parse_arg_uint16>
   17d42:	4601      	mov	r1, r0
    if (rc != 0) {
   17d44:	9c01      	ldr	r4, [sp, #4]
   17d46:	b944      	cbnz	r4, 17d5a <cmd_gatt_service_changed+0x46>
    ble_svc_gatt_changed(start, end);
   17d48:	4628      	mov	r0, r5
   17d4a:	f019 fee5 	bl	31b18 <ble_svc_gatt_changed>
    return 0;
   17d4e:	e7ea      	b.n	17d26 <cmd_gatt_service_changed+0x12>
        console_printf("invalid 'start' parameter\n");
   17d50:	4806      	ldr	r0, [pc, #24]	; (17d6c <cmd_gatt_service_changed+0x58>)
   17d52:	f004 f9f1 	bl	1c138 <console_printf>
        return rc;
   17d56:	9c01      	ldr	r4, [sp, #4]
   17d58:	e7e5      	b.n	17d26 <cmd_gatt_service_changed+0x12>
        console_printf("invalid 'end' parameter\n");
   17d5a:	4805      	ldr	r0, [pc, #20]	; (17d70 <cmd_gatt_service_changed+0x5c>)
   17d5c:	f004 f9ec 	bl	1c138 <console_printf>
        return rc;
   17d60:	9c01      	ldr	r4, [sp, #4]
   17d62:	e7e0      	b.n	17d26 <cmd_gatt_service_changed+0x12>
   17d64:	0003605c 	.word	0x0003605c
   17d68:	00036064 	.word	0x00036064
   17d6c:	000380cc 	.word	0x000380cc
   17d70:	000380e8 	.word	0x000380e8

00017d74 <cmd_gatt_service_visibility>:
 * $gatt-service-visibility                                                  *
 *****************************************************************************/

int
cmd_gatt_service_visibility(int argc, char **argv)
{
   17d74:	b530      	push	{r4, r5, lr}
   17d76:	b083      	sub	sp, #12
    uint16_t handle;
    bool vis;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17d78:	3104      	adds	r1, #4
   17d7a:	3801      	subs	r0, #1
   17d7c:	f000 ff0e 	bl	18b9c <parse_arg_all>
   17d80:	4604      	mov	r4, r0
   17d82:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   17d84:	b110      	cbz	r0, 17d8c <cmd_gatt_service_visibility+0x18>
    }

    ble_gatts_svc_set_visibility(handle, vis);

    return 0;
}
   17d86:	4620      	mov	r0, r4
   17d88:	b003      	add	sp, #12
   17d8a:	bd30      	pop	{r4, r5, pc}
    handle = parse_arg_uint16("handle", &rc);
   17d8c:	a901      	add	r1, sp, #4
   17d8e:	480e      	ldr	r0, [pc, #56]	; (17dc8 <cmd_gatt_service_visibility+0x54>)
   17d90:	f000 fdad 	bl	188ee <parse_arg_uint16>
   17d94:	4605      	mov	r5, r0
    if (rc != 0) {
   17d96:	9b01      	ldr	r3, [sp, #4]
   17d98:	b963      	cbnz	r3, 17db4 <cmd_gatt_service_visibility+0x40>
    vis = parse_arg_bool("visibility", &rc);
   17d9a:	a901      	add	r1, sp, #4
   17d9c:	480b      	ldr	r0, [pc, #44]	; (17dcc <cmd_gatt_service_visibility+0x58>)
   17d9e:	f000 fd8a 	bl	188b6 <parse_arg_bool>
   17da2:	1e01      	subs	r1, r0, #0
   17da4:	bf18      	it	ne
   17da6:	2101      	movne	r1, #1
    if (rc != 0) {
   17da8:	9c01      	ldr	r4, [sp, #4]
   17daa:	b944      	cbnz	r4, 17dbe <cmd_gatt_service_visibility+0x4a>
    ble_gatts_svc_set_visibility(handle, vis);
   17dac:	4628      	mov	r0, r5
   17dae:	f015 fe37 	bl	2da20 <ble_gatts_svc_set_visibility>
    return 0;
   17db2:	e7e8      	b.n	17d86 <cmd_gatt_service_visibility+0x12>
        console_printf("invalid 'handle' parameter\n");
   17db4:	4806      	ldr	r0, [pc, #24]	; (17dd0 <cmd_gatt_service_visibility+0x5c>)
   17db6:	f004 f9bf 	bl	1c138 <console_printf>
        return rc;
   17dba:	9c01      	ldr	r4, [sp, #4]
   17dbc:	e7e3      	b.n	17d86 <cmd_gatt_service_visibility+0x12>
        console_printf("invalid 'visibility' parameter\n");
   17dbe:	4805      	ldr	r0, [pc, #20]	; (17dd4 <cmd_gatt_service_visibility+0x60>)
   17dc0:	f004 f9ba 	bl	1c138 <console_printf>
        return rc;
   17dc4:	9c01      	ldr	r4, [sp, #4]
   17dc6:	e7de      	b.n	17d86 <cmd_gatt_service_visibility+0x12>
   17dc8:	000395dc 	.word	0x000395dc
   17dcc:	00036438 	.word	0x00036438
   17dd0:	00038148 	.word	0x00038148
   17dd4:	00038164 	.word	0x00038164

00017dd8 <cmd_gatt_find_included_services>:
 * $gatt-find-included-services                                              *
 *****************************************************************************/

int
cmd_gatt_find_included_services(int argc, char **argv)
{
   17dd8:	b510      	push	{r4, lr}
   17dda:	b082      	sub	sp, #8
    uint16_t start_handle;
    uint16_t conn_handle;
    uint16_t end_handle;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17ddc:	3104      	adds	r1, #4
   17dde:	3801      	subs	r0, #1
   17de0:	f000 fedc 	bl	18b9c <parse_arg_all>
    if (rc != 0) {
   17de4:	4604      	mov	r4, r0
   17de6:	b110      	cbz	r0, 17dee <cmd_gatt_find_included_services+0x16>
        console_printf("error finding included services; rc=%d\n", rc);
        return rc;
    }

    return 0;
}
   17de8:	4620      	mov	r0, r4
   17dea:	b002      	add	sp, #8
   17dec:	bd10      	pop	{r4, pc}
    rc = cmd_parse_conn_start_end(&conn_handle, &start_handle, &end_handle);
   17dee:	f10d 0202 	add.w	r2, sp, #2
   17df2:	f10d 0106 	add.w	r1, sp, #6
   17df6:	a801      	add	r0, sp, #4
   17df8:	f7ff fd60 	bl	178bc <cmd_parse_conn_start_end>
    if (rc != 0) {
   17dfc:	4604      	mov	r4, r0
   17dfe:	b978      	cbnz	r0, 17e20 <cmd_gatt_find_included_services+0x48>
    rc = btshell_find_inc_svcs(conn_handle, start_handle, end_handle);
   17e00:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   17e04:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   17e08:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   17e0c:	f7fd fbb4 	bl	15578 <btshell_find_inc_svcs>
    if (rc != 0) {
   17e10:	4604      	mov	r4, r0
   17e12:	2800      	cmp	r0, #0
   17e14:	d0e8      	beq.n	17de8 <cmd_gatt_find_included_services+0x10>
        console_printf("error finding included services; rc=%d\n", rc);
   17e16:	4601      	mov	r1, r0
   17e18:	4803      	ldr	r0, [pc, #12]	; (17e28 <cmd_gatt_find_included_services+0x50>)
   17e1a:	f004 f98d 	bl	1c138 <console_printf>
        return rc;
   17e1e:	e7e3      	b.n	17de8 <cmd_gatt_find_included_services+0x10>
        console_printf("invalid 'conn start end' parameter\n");
   17e20:	4802      	ldr	r0, [pc, #8]	; (17e2c <cmd_gatt_find_included_services+0x54>)
   17e22:	f004 f989 	bl	1c138 <console_printf>
        return rc;
   17e26:	e7df      	b.n	17de8 <cmd_gatt_find_included_services+0x10>
   17e28:	00038184 	.word	0x00038184
   17e2c:	00037f9c 	.word	0x00037f9c

00017e30 <cmd_gatt_show>:
 * $gatt-show                                                                *
 *****************************************************************************/

int
cmd_gatt_show(int argc, char **argv)
{
   17e30:	b538      	push	{r3, r4, r5, lr}
    struct btshell_conn *conn;
    struct btshell_svc *svc;
    int i;

    for (i = 0; i < btshell_num_conns; i++) {
   17e32:	2500      	movs	r5, #0
   17e34:	e006      	b.n	17e44 <cmd_gatt_show+0x14>
        conn = btshell_conns + i;

        console_printf("CONNECTION: handle=%d\n", conn->handle);

        SLIST_FOREACH(svc, &conn->svcs, next) {
            print_svc(svc);
   17e36:	4620      	mov	r0, r4
   17e38:	f7fd fe62 	bl	15b00 <print_svc>
        SLIST_FOREACH(svc, &conn->svcs, next) {
   17e3c:	6824      	ldr	r4, [r4, #0]
   17e3e:	2c00      	cmp	r4, #0
   17e40:	d1f9      	bne.n	17e36 <cmd_gatt_show+0x6>
    for (i = 0; i < btshell_num_conns; i++) {
   17e42:	3501      	adds	r5, #1
   17e44:	4b08      	ldr	r3, [pc, #32]	; (17e68 <cmd_gatt_show+0x38>)
   17e46:	681b      	ldr	r3, [r3, #0]
   17e48:	42ab      	cmp	r3, r5
   17e4a:	dd0a      	ble.n	17e62 <cmd_gatt_show+0x32>
        conn = btshell_conns + i;
   17e4c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   17e50:	0093      	lsls	r3, r2, #2
   17e52:	4a06      	ldr	r2, [pc, #24]	; (17e6c <cmd_gatt_show+0x3c>)
   17e54:	189c      	adds	r4, r3, r2
        console_printf("CONNECTION: handle=%d\n", conn->handle);
   17e56:	5ad1      	ldrh	r1, [r2, r3]
   17e58:	4805      	ldr	r0, [pc, #20]	; (17e70 <cmd_gatt_show+0x40>)
   17e5a:	f004 f96d 	bl	1c138 <console_printf>
        SLIST_FOREACH(svc, &conn->svcs, next) {
   17e5e:	6864      	ldr	r4, [r4, #4]
   17e60:	e7ed      	b.n	17e3e <cmd_gatt_show+0xe>
        }
    }

    return 0;
}
   17e62:	2000      	movs	r0, #0
   17e64:	bd38      	pop	{r3, r4, r5, pc}
   17e66:	bf00      	nop
   17e68:	10001914 	.word	0x10001914
   17e6c:	10001de4 	.word	0x10001de4
   17e70:	000381ac 	.word	0x000381ac

00017e74 <cmd_gatt_show_local>:

int
cmd_gatt_show_local(int argc, char **argv)
{
   17e74:	b508      	push	{r3, lr}
    gatt_svr_print_svcs();
   17e76:	f000 fb6c 	bl	18552 <gatt_svr_print_svcs>
    return 0;
}
   17e7a:	2000      	movs	r0, #0
   17e7c:	bd08      	pop	{r3, pc}
	...

00017e80 <cmd_gatt_write>:
 * $gatt-write                                                               *
 *****************************************************************************/

int
cmd_gatt_write(int argc, char **argv)
{
   17e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e84:	b08d      	sub	sp, #52	; 0x34
   17e86:	4604      	mov	r4, r0
   17e88:	460d      	mov	r5, r1
    struct ble_gatt_attr attrs[MYNEWT_VAL(BLE_GATT_WRITE_MAX_ATTRS)] = { { 0 } };
   17e8a:	2220      	movs	r2, #32
   17e8c:	2100      	movs	r1, #0
   17e8e:	a804      	add	r0, sp, #16
   17e90:	f002 ff03 	bl	1ac9a <memset>
    int is_long;
    int no_rsp;
    int rc;
    int i;

    rc = parse_arg_all(argc - 1, argv + 1);
   17e94:	1d29      	adds	r1, r5, #4
   17e96:	1e60      	subs	r0, r4, #1
   17e98:	f000 fe80 	bl	18b9c <parse_arg_all>
   17e9c:	9002      	str	r0, [sp, #8]
    if (rc != 0) {
   17e9e:	b110      	cbz	r0, 17ea6 <cmd_gatt_write+0x26>
    if (rc != 0) {
        console_printf("error writing characteristic; rc=%d\n", rc);
    }

    return rc;
}
   17ea0:	b00d      	add	sp, #52	; 0x34
   17ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    conn_handle = parse_arg_uint16("conn", &rc);
   17ea6:	a902      	add	r1, sp, #8
   17ea8:	4864      	ldr	r0, [pc, #400]	; (1803c <cmd_gatt_write+0x1bc>)
   17eaa:	f000 fd20 	bl	188ee <parse_arg_uint16>
   17eae:	4682      	mov	sl, r0
    if (rc != 0) {
   17eb0:	9b02      	ldr	r3, [sp, #8]
   17eb2:	b993      	cbnz	r3, 17eda <cmd_gatt_write+0x5a>
    no_rsp = parse_arg_bool_dflt("no_rsp", 0, &rc);
   17eb4:	aa02      	add	r2, sp, #8
   17eb6:	2100      	movs	r1, #0
   17eb8:	4861      	ldr	r0, [pc, #388]	; (18040 <cmd_gatt_write+0x1c0>)
   17eba:	f000 fd04 	bl	188c6 <parse_arg_bool_dflt>
   17ebe:	4683      	mov	fp, r0
    if (rc != 0) {
   17ec0:	9b02      	ldr	r3, [sp, #8]
   17ec2:	b97b      	cbnz	r3, 17ee4 <cmd_gatt_write+0x64>
    is_long = parse_arg_bool_dflt("long", 0, &rc);
   17ec4:	aa02      	add	r2, sp, #8
   17ec6:	2100      	movs	r1, #0
   17ec8:	485e      	ldr	r0, [pc, #376]	; (18044 <cmd_gatt_write+0x1c4>)
   17eca:	f000 fcfc 	bl	188c6 <parse_arg_bool_dflt>
   17ece:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   17ed0:	9c02      	ldr	r4, [sp, #8]
   17ed2:	b964      	cbnz	r4, 17eee <cmd_gatt_write+0x6e>
    num_attrs = 0;
   17ed4:	46a0      	mov	r8, r4
    total_attr_len = 0;
   17ed6:	4627      	mov	r7, r4
   17ed8:	e030      	b.n	17f3c <cmd_gatt_write+0xbc>
        console_printf("invalid 'conn' parameter\n");
   17eda:	485b      	ldr	r0, [pc, #364]	; (18048 <cmd_gatt_write+0x1c8>)
   17edc:	f004 f92c 	bl	1c138 <console_printf>
        return rc;
   17ee0:	9802      	ldr	r0, [sp, #8]
   17ee2:	e7dd      	b.n	17ea0 <cmd_gatt_write+0x20>
        console_printf("invalid 'no_rsp' parameter\n");
   17ee4:	4859      	ldr	r0, [pc, #356]	; (1804c <cmd_gatt_write+0x1cc>)
   17ee6:	f004 f927 	bl	1c138 <console_printf>
        return rc;
   17eea:	9802      	ldr	r0, [sp, #8]
   17eec:	e7d8      	b.n	17ea0 <cmd_gatt_write+0x20>
        console_printf("invalid 'long' parameter\n");
   17eee:	4858      	ldr	r0, [pc, #352]	; (18050 <cmd_gatt_write+0x1d0>)
   17ef0:	f004 f922 	bl	1c138 <console_printf>
        return rc;
   17ef4:	9802      	ldr	r0, [sp, #8]
   17ef6:	e7d3      	b.n	17ea0 <cmd_gatt_write+0x20>
            rc = -rc;
   17ef8:	425b      	negs	r3, r3
   17efa:	9302      	str	r3, [sp, #8]
            console_printf("invalid 'attr' parameter\n");
   17efc:	4855      	ldr	r0, [pc, #340]	; (18054 <cmd_gatt_write+0x1d4>)
   17efe:	f004 f91b 	bl	1c138 <console_printf>
            goto done;
   17f02:	e091      	b.n	18028 <cmd_gatt_write+0x1a8>
            console_printf("invalid 'value' parameter\n");
   17f04:	4854      	ldr	r0, [pc, #336]	; (18058 <cmd_gatt_write+0x1d8>)
   17f06:	f004 f917 	bl	1c138 <console_printf>
            goto done;
   17f0a:	e08d      	b.n	18028 <cmd_gatt_write+0x1a8>
            offset = 0;
   17f0c:	2000      	movs	r0, #0
        if (num_attrs >= sizeof attrs / sizeof attrs[0]) {
   17f0e:	f1b8 0f03 	cmp.w	r8, #3
   17f12:	d839      	bhi.n	17f88 <cmd_gatt_write+0x108>
        attrs[num_attrs].handle = attr_handle;
   17f14:	ab0c      	add	r3, sp, #48	; 0x30
   17f16:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
   17f1a:	f829 6c20 	strh.w	r6, [r9, #-32]
        attrs[num_attrs].offset = offset;
   17f1e:	f829 0c1e 	strh.w	r0, [r9, #-30]
        attrs[num_attrs].om = ble_hs_mbuf_from_flat(cmd_buf + total_attr_len,
   17f22:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   17f26:	4628      	mov	r0, r5
   17f28:	f018 f82f 	bl	2ff8a <ble_hs_mbuf_from_flat>
   17f2c:	f849 0c1c 	str.w	r0, [r9, #-28]
        if (attrs[num_attrs].om == NULL) {
   17f30:	2800      	cmp	r0, #0
   17f32:	d079      	beq.n	18028 <cmd_gatt_write+0x1a8>
        total_attr_len += attr_len;
   17f34:	9b03      	ldr	r3, [sp, #12]
   17f36:	441f      	add	r7, r3
        num_attrs++;
   17f38:	f108 0801 	add.w	r8, r8, #1
        attr_handle = parse_arg_uint16("attr", &rc);
   17f3c:	a902      	add	r1, sp, #8
   17f3e:	4847      	ldr	r0, [pc, #284]	; (1805c <cmd_gatt_write+0x1dc>)
   17f40:	f000 fcd5 	bl	188ee <parse_arg_uint16>
   17f44:	4606      	mov	r6, r0
        if (rc == ENOENT) {
   17f46:	9b02      	ldr	r3, [sp, #8]
   17f48:	2b02      	cmp	r3, #2
   17f4a:	d021      	beq.n	17f90 <cmd_gatt_write+0x110>
        } else if (rc != 0) {
   17f4c:	2b00      	cmp	r3, #0
   17f4e:	d1d3      	bne.n	17ef8 <cmd_gatt_write+0x78>
        rc = parse_arg_byte_stream("value", sizeof cmd_buf - total_attr_len,
   17f50:	4d43      	ldr	r5, [pc, #268]	; (18060 <cmd_gatt_write+0x1e0>)
   17f52:	443d      	add	r5, r7
   17f54:	ab03      	add	r3, sp, #12
   17f56:	462a      	mov	r2, r5
   17f58:	f5c7 7180 	rsb	r1, r7, #256	; 0x100
   17f5c:	4841      	ldr	r0, [pc, #260]	; (18064 <cmd_gatt_write+0x1e4>)
   17f5e:	f000 fd81 	bl	18a64 <parse_arg_byte_stream>
   17f62:	9002      	str	r0, [sp, #8]
        if (rc == ENOENT) {
   17f64:	2802      	cmp	r0, #2
   17f66:	d013      	beq.n	17f90 <cmd_gatt_write+0x110>
        } else if (rc != 0) {
   17f68:	2800      	cmp	r0, #0
   17f6a:	d1cb      	bne.n	17f04 <cmd_gatt_write+0x84>
        offset = parse_arg_uint16("offset", &rc);
   17f6c:	a902      	add	r1, sp, #8
   17f6e:	483e      	ldr	r0, [pc, #248]	; (18068 <cmd_gatt_write+0x1e8>)
   17f70:	f000 fcbd 	bl	188ee <parse_arg_uint16>
        if (rc == ENOENT) {
   17f74:	9b02      	ldr	r3, [sp, #8]
   17f76:	2b02      	cmp	r3, #2
   17f78:	d0c8      	beq.n	17f0c <cmd_gatt_write+0x8c>
        } else if (rc != 0) {
   17f7a:	2b00      	cmp	r3, #0
   17f7c:	d0c7      	beq.n	17f0e <cmd_gatt_write+0x8e>
            console_printf("invalid 'offset' parameter\n");
   17f7e:	483b      	ldr	r0, [pc, #236]	; (1806c <cmd_gatt_write+0x1ec>)
   17f80:	f004 f8da 	bl	1c138 <console_printf>
            return rc;
   17f84:	9802      	ldr	r0, [sp, #8]
   17f86:	e78b      	b.n	17ea0 <cmd_gatt_write+0x20>
            rc = -EINVAL;
   17f88:	f06f 0315 	mvn.w	r3, #21
   17f8c:	9302      	str	r3, [sp, #8]
            goto done;
   17f8e:	e04b      	b.n	18028 <cmd_gatt_write+0x1a8>
    if (no_rsp) {
   17f90:	f1bb 0f00 	cmp.w	fp, #0
   17f94:	d010      	beq.n	17fb8 <cmd_gatt_write+0x138>
        if (num_attrs != 1) {
   17f96:	f1b8 0f01 	cmp.w	r8, #1
   17f9a:	d003      	beq.n	17fa4 <cmd_gatt_write+0x124>
            rc = -EINVAL;
   17f9c:	f06f 0315 	mvn.w	r3, #21
   17fa0:	9302      	str	r3, [sp, #8]
            goto done;
   17fa2:	e041      	b.n	18028 <cmd_gatt_write+0x1a8>
        rc = btshell_write_no_rsp(conn_handle, attrs[0].handle, attrs[0].om);
   17fa4:	9a05      	ldr	r2, [sp, #20]
   17fa6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   17faa:	4650      	mov	r0, sl
   17fac:	f7fd fb58 	bl	15660 <btshell_write_no_rsp>
   17fb0:	9002      	str	r0, [sp, #8]
        attrs[0].om = NULL;
   17fb2:	2300      	movs	r3, #0
   17fb4:	9305      	str	r3, [sp, #20]
   17fb6:	e037      	b.n	18028 <cmd_gatt_write+0x1a8>
    } else if (is_long) {
   17fb8:	9b01      	ldr	r3, [sp, #4]
   17fba:	b193      	cbz	r3, 17fe2 <cmd_gatt_write+0x162>
        if (num_attrs != 1) {
   17fbc:	f1b8 0f01 	cmp.w	r8, #1
   17fc0:	d003      	beq.n	17fca <cmd_gatt_write+0x14a>
            rc = -EINVAL;
   17fc2:	f06f 0315 	mvn.w	r3, #21
   17fc6:	9302      	str	r3, [sp, #8]
            goto done;
   17fc8:	e02e      	b.n	18028 <cmd_gatt_write+0x1a8>
        rc = btshell_write_long(conn_handle, attrs[0].handle,
   17fca:	9b05      	ldr	r3, [sp, #20]
   17fcc:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   17fd0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   17fd4:	4650      	mov	r0, sl
   17fd6:	f7fd fb47 	bl	15668 <btshell_write_long>
   17fda:	9002      	str	r0, [sp, #8]
        attrs[0].om = NULL;
   17fdc:	2300      	movs	r3, #0
   17fde:	9305      	str	r3, [sp, #20]
   17fe0:	e022      	b.n	18028 <cmd_gatt_write+0x1a8>
    } else if (num_attrs > 1) {
   17fe2:	f1b8 0f01 	cmp.w	r8, #1
   17fe6:	dc06      	bgt.n	17ff6 <cmd_gatt_write+0x176>
    } else if (num_attrs == 1) {
   17fe8:	f1b8 0f01 	cmp.w	r8, #1
   17fec:	d00a      	beq.n	18004 <cmd_gatt_write+0x184>
        rc = -EINVAL;
   17fee:	f06f 0315 	mvn.w	r3, #21
   17ff2:	9302      	str	r3, [sp, #8]
   17ff4:	e018      	b.n	18028 <cmd_gatt_write+0x1a8>
        rc = btshell_write_reliable(conn_handle, attrs, num_attrs);
   17ff6:	4642      	mov	r2, r8
   17ff8:	a904      	add	r1, sp, #16
   17ffa:	4650      	mov	r0, sl
   17ffc:	f7fd fb40 	bl	15680 <btshell_write_reliable>
   18000:	9002      	str	r0, [sp, #8]
   18002:	e011      	b.n	18028 <cmd_gatt_write+0x1a8>
        rc = btshell_write(conn_handle, attrs[0].handle, attrs[0].om);
   18004:	9a05      	ldr	r2, [sp, #20]
   18006:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1800a:	4650      	mov	r0, sl
   1800c:	f7fd fb12 	bl	15634 <btshell_write>
   18010:	9002      	str	r0, [sp, #8]
        attrs[0].om = NULL;
   18012:	2300      	movs	r3, #0
   18014:	9305      	str	r3, [sp, #20]
   18016:	e007      	b.n	18028 <cmd_gatt_write+0x1a8>
        os_mbuf_free_chain(attrs[i].om);
   18018:	ab0c      	add	r3, sp, #48	; 0x30
   1801a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1801e:	f853 0c1c 	ldr.w	r0, [r3, #-28]
   18022:	f001 fad4 	bl	195ce <os_mbuf_free_chain>
    for (i = 0; i < sizeof attrs / sizeof attrs[0]; i++) {
   18026:	3401      	adds	r4, #1
   18028:	2c03      	cmp	r4, #3
   1802a:	d9f5      	bls.n	18018 <cmd_gatt_write+0x198>
    if (rc != 0) {
   1802c:	9902      	ldr	r1, [sp, #8]
   1802e:	b909      	cbnz	r1, 18034 <cmd_gatt_write+0x1b4>
    return rc;
   18030:	9802      	ldr	r0, [sp, #8]
   18032:	e735      	b.n	17ea0 <cmd_gatt_write+0x20>
        console_printf("error writing characteristic; rc=%d\n", rc);
   18034:	480e      	ldr	r0, [pc, #56]	; (18070 <cmd_gatt_write+0x1f0>)
   18036:	f004 f87f 	bl	1c138 <console_printf>
   1803a:	e7f9      	b.n	18030 <cmd_gatt_write+0x1b0>
   1803c:	00034df4 	.word	0x00034df4
   18040:	000362f0 	.word	0x000362f0
   18044:	0003632c 	.word	0x0003632c
   18048:	00034dfc 	.word	0x00034dfc
   1804c:	000381c4 	.word	0x000381c4
   18050:	000380b0 	.word	0x000380b0
   18054:	00038094 	.word	0x00038094
   18058:	000381e0 	.word	0x000381e0
   1805c:	0003635c 	.word	0x0003635c
   18060:	10001f9c 	.word	0x10001f9c
   18064:	00036390 	.word	0x00036390
   18068:	00036388 	.word	0x00036388
   1806c:	00038104 	.word	0x00038104
   18070:	000381fc 	.word	0x000381fc

00018074 <extract_uuid16_from_pts_uuid128>:
{
    const uint8_t *u8ptr;
    uint16_t uuid16;

    u8ptr = BLE_UUID128(uuid)->value;
    uuid16 = u8ptr[12];
   18074:	7b43      	ldrb	r3, [r0, #13]
    uuid16 |= (uint16_t)u8ptr[13] << 8;
   18076:	7b80      	ldrb	r0, [r0, #14]
    return uuid16;
}
   18078:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   1807c:	4770      	bx	lr

0001807e <gatt_svr_chr_write>:
{
   1807e:	b510      	push	{r4, lr}
   18080:	461c      	mov	r4, r3
    om_len = OS_MBUF_PKTLEN(om);
   18082:	8a03      	ldrh	r3, [r0, #16]
    if (om_len < min_len || om_len > max_len) {
   18084:	428b      	cmp	r3, r1
   18086:	d307      	bcc.n	18098 <gatt_svr_chr_write+0x1a>
   18088:	4293      	cmp	r3, r2
   1808a:	d807      	bhi.n	1809c <gatt_svr_chr_write+0x1e>
    rc = ble_hs_mbuf_to_flat(om, dst, max_len, len);
   1808c:	9b02      	ldr	r3, [sp, #8]
   1808e:	4621      	mov	r1, r4
   18090:	f017 ff8f 	bl	2ffb2 <ble_hs_mbuf_to_flat>
    if (rc != 0) {
   18094:	b920      	cbnz	r0, 180a0 <gatt_svr_chr_write+0x22>
}
   18096:	bd10      	pop	{r4, pc}
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   18098:	200d      	movs	r0, #13
   1809a:	e7fc      	b.n	18096 <gatt_svr_chr_write+0x18>
   1809c:	200d      	movs	r0, #13
   1809e:	e7fa      	b.n	18096 <gatt_svr_chr_write+0x18>
        return BLE_ATT_ERR_UNLIKELY;
   180a0:	200e      	movs	r0, #14
   180a2:	e7f8      	b.n	18096 <gatt_svr_chr_write+0x18>

000180a4 <gatt_svr_access_test>:

static int
gatt_svr_access_test(uint16_t conn_handle, uint16_t attr_handle,
                     struct ble_gatt_access_ctxt *ctxt,
                     void *arg)
{
   180a4:	b510      	push	{r4, lr}
   180a6:	b082      	sub	sp, #8
   180a8:	4614      	mov	r4, r2
    uint16_t uuid16;
    int rc;

    uuid16 = extract_uuid16_from_pts_uuid128(ctxt->chr->uuid);
   180aa:	6893      	ldr	r3, [r2, #8]
   180ac:	6818      	ldr	r0, [r3, #0]
   180ae:	f7ff ffe1 	bl	18074 <extract_uuid16_from_pts_uuid128>
    assert(uuid16 != 0);
   180b2:	b1a0      	cbz	r0, 180de <gatt_svr_access_test+0x3a>

    switch (uuid16) {
   180b4:	1e83      	subs	r3, r0, #2
   180b6:	2b1d      	cmp	r3, #29
   180b8:	f200 80b8 	bhi.w	1822c <gatt_svr_access_test+0x188>
   180bc:	e8df f003 	tbb	[pc, r3]
   180c0:	2e2e2e19 	.word	0x2e2e2e19
   180c4:	6b4d4d4d 	.word	0x6b4d4d4d
   180c8:	96969680 	.word	0x96969680
   180cc:	b6b6b6b6 	.word	0xb6b6b6b6
   180d0:	b6b6b6b6 	.word	0xb6b6b6b6
   180d4:	b6b6b6b6 	.word	0xb6b6b6b6
   180d8:	b6b6b6b6 	.word	0xb6b6b6b6
   180dc:	4db6      	.short	0x4db6
    assert(uuid16 != 0);
   180de:	f7fc fb09 	bl	146f4 <hal_debugger_connected>
   180e2:	b100      	cbz	r0, 180e6 <gatt_svr_access_test+0x42>
   180e4:	be01      	bkpt	0x0001
   180e6:	2300      	movs	r3, #0
   180e8:	461a      	mov	r2, r3
   180ea:	4619      	mov	r1, r3
   180ec:	4618      	mov	r0, r3
   180ee:	f000 fe1f 	bl	18d30 <__assert_func>
    case PTS_CHR_READ:
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   180f2:	7823      	ldrb	r3, [r4, #0]
   180f4:	b943      	cbnz	r3, 18108 <gatt_svr_access_test+0x64>
        rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_val,
   180f6:	2201      	movs	r2, #1
   180f8:	4951      	ldr	r1, [pc, #324]	; (18240 <gatt_svr_access_test+0x19c>)
   180fa:	6860      	ldr	r0, [r4, #4]
   180fc:	f001 fa77 	bl	195ee <os_mbuf_append>
                            sizeof gatt_svr_pts_static_val);
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   18100:	2800      	cmp	r0, #0
   18102:	d067      	beq.n	181d4 <gatt_svr_access_test+0x130>
   18104:	2011      	movs	r0, #17
   18106:	e065      	b.n	181d4 <gatt_svr_access_test+0x130>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   18108:	f7fc faf4 	bl	146f4 <hal_debugger_connected>
   1810c:	b100      	cbz	r0, 18110 <gatt_svr_access_test+0x6c>
   1810e:	be01      	bkpt	0x0001
   18110:	2300      	movs	r3, #0
   18112:	461a      	mov	r2, r3
   18114:	4619      	mov	r1, r3
   18116:	4618      	mov	r0, r3
   18118:	f000 fe0a 	bl	18d30 <__assert_func>

    case PTS_CHR_WRITE:
    case PTS_CHR_RELIABLE_WRITE:
    case PTS_CHR_WRITE_NO_RSP:
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   1811c:	7823      	ldrb	r3, [r4, #0]
   1811e:	2b01      	cmp	r3, #1
   18120:	d009      	beq.n	18136 <gatt_svr_access_test+0x92>
            rc = gatt_svr_chr_write(ctxt->om,0,
                                    sizeof gatt_svr_pts_static_val,
                                    &gatt_svr_pts_static_val, NULL);
            return rc;
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   18122:	b983      	cbnz	r3, 18146 <gatt_svr_access_test+0xa2>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_val,
   18124:	2201      	movs	r2, #1
   18126:	4946      	ldr	r1, [pc, #280]	; (18240 <gatt_svr_access_test+0x19c>)
   18128:	6860      	ldr	r0, [r4, #4]
   1812a:	f001 fa60 	bl	195ee <os_mbuf_append>
                                sizeof gatt_svr_pts_static_val);
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   1812e:	2800      	cmp	r0, #0
   18130:	d050      	beq.n	181d4 <gatt_svr_access_test+0x130>
   18132:	2011      	movs	r0, #17
   18134:	e04e      	b.n	181d4 <gatt_svr_access_test+0x130>
            rc = gatt_svr_chr_write(ctxt->om,0,
   18136:	2100      	movs	r1, #0
   18138:	9100      	str	r1, [sp, #0]
   1813a:	4b41      	ldr	r3, [pc, #260]	; (18240 <gatt_svr_access_test+0x19c>)
   1813c:	2201      	movs	r2, #1
   1813e:	6860      	ldr	r0, [r4, #4]
   18140:	f7ff ff9d 	bl	1807e <gatt_svr_chr_write>
            return rc;
   18144:	e046      	b.n	181d4 <gatt_svr_access_test+0x130>
        }
        assert(0);
   18146:	f7fc fad5 	bl	146f4 <hal_debugger_connected>
   1814a:	b100      	cbz	r0, 1814e <gatt_svr_access_test+0xaa>
   1814c:	be01      	bkpt	0x0001
   1814e:	2300      	movs	r3, #0
   18150:	461a      	mov	r2, r3
   18152:	4619      	mov	r1, r3
   18154:	4618      	mov	r0, r3
   18156:	f000 fdeb 	bl	18d30 <__assert_func>
        break;
    case PTS_CHR_READ_WRITE:
    case PTS_CHR_READ_WRITE_ENC:
    case PTS_CHR_READ_WRITE_AUTHEN:
    case PTS_CHR_READ_WRITE_ALT:
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   1815a:	7823      	ldrb	r3, [r4, #0]
   1815c:	2b01      	cmp	r3, #1
   1815e:	d008      	beq.n	18172 <gatt_svr_access_test+0xce>
            rc = gatt_svr_chr_write(ctxt->om,0,
                                    sizeof gatt_svr_pts_static_val,
                                    &gatt_svr_pts_static_val, NULL);
            return rc;
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   18160:	b97b      	cbnz	r3, 18182 <gatt_svr_access_test+0xde>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_val,
   18162:	2201      	movs	r2, #1
   18164:	4936      	ldr	r1, [pc, #216]	; (18240 <gatt_svr_access_test+0x19c>)
   18166:	6860      	ldr	r0, [r4, #4]
   18168:	f001 fa41 	bl	195ee <os_mbuf_append>
                                sizeof gatt_svr_pts_static_val);
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   1816c:	b390      	cbz	r0, 181d4 <gatt_svr_access_test+0x130>
   1816e:	2011      	movs	r0, #17
   18170:	e030      	b.n	181d4 <gatt_svr_access_test+0x130>
            rc = gatt_svr_chr_write(ctxt->om,0,
   18172:	2100      	movs	r1, #0
   18174:	9100      	str	r1, [sp, #0]
   18176:	4b32      	ldr	r3, [pc, #200]	; (18240 <gatt_svr_access_test+0x19c>)
   18178:	2201      	movs	r2, #1
   1817a:	6860      	ldr	r0, [r4, #4]
   1817c:	f7ff ff7f 	bl	1807e <gatt_svr_chr_write>
            return rc;
   18180:	e028      	b.n	181d4 <gatt_svr_access_test+0x130>
        }
        assert(0);
   18182:	f7fc fab7 	bl	146f4 <hal_debugger_connected>
   18186:	b100      	cbz	r0, 1818a <gatt_svr_access_test+0xe6>
   18188:	be01      	bkpt	0x0001
   1818a:	2300      	movs	r3, #0
   1818c:	461a      	mov	r2, r3
   1818e:	4619      	mov	r1, r3
   18190:	4618      	mov	r0, r3
   18192:	f000 fdcd 	bl	18d30 <__assert_func>
        break;
    case PTS_DSC_READ:
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_DSC);
   18196:	7823      	ldrb	r3, [r4, #0]
   18198:	2b02      	cmp	r3, #2
   1819a:	d107      	bne.n	181ac <gatt_svr_access_test+0x108>
        rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_val,
   1819c:	2201      	movs	r2, #1
   1819e:	4928      	ldr	r1, [pc, #160]	; (18240 <gatt_svr_access_test+0x19c>)
   181a0:	6860      	ldr	r0, [r4, #4]
   181a2:	f001 fa24 	bl	195ee <os_mbuf_append>
                            sizeof gatt_svr_pts_static_val);
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   181a6:	b1a8      	cbz	r0, 181d4 <gatt_svr_access_test+0x130>
   181a8:	2011      	movs	r0, #17
   181aa:	e013      	b.n	181d4 <gatt_svr_access_test+0x130>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_DSC);
   181ac:	f7fc faa2 	bl	146f4 <hal_debugger_connected>
   181b0:	b100      	cbz	r0, 181b4 <gatt_svr_access_test+0x110>
   181b2:	be01      	bkpt	0x0001
   181b4:	2300      	movs	r3, #0
   181b6:	461a      	mov	r2, r3
   181b8:	4619      	mov	r1, r3
   181ba:	4618      	mov	r0, r3
   181bc:	f000 fdb8 	bl	18d30 <__assert_func>

    case PTS_DSC_WRITE:
        assert(ctxt->op == BLE_GATT_ACCESS_OP_WRITE_DSC);
   181c0:	7823      	ldrb	r3, [r4, #0]
   181c2:	2b03      	cmp	r3, #3
   181c4:	d108      	bne.n	181d8 <gatt_svr_access_test+0x134>
        rc = gatt_svr_chr_write(ctxt->om,0,
   181c6:	2100      	movs	r1, #0
   181c8:	9100      	str	r1, [sp, #0]
   181ca:	4b1d      	ldr	r3, [pc, #116]	; (18240 <gatt_svr_access_test+0x19c>)
   181cc:	2201      	movs	r2, #1
   181ce:	6860      	ldr	r0, [r4, #4]
   181d0:	f7ff ff55 	bl	1807e <gatt_svr_chr_write>
        assert(0);
        break;
    }

    return BLE_ATT_ERR_UNLIKELY;
}
   181d4:	b002      	add	sp, #8
   181d6:	bd10      	pop	{r4, pc}
        assert(ctxt->op == BLE_GATT_ACCESS_OP_WRITE_DSC);
   181d8:	f7fc fa8c 	bl	146f4 <hal_debugger_connected>
   181dc:	b100      	cbz	r0, 181e0 <gatt_svr_access_test+0x13c>
   181de:	be01      	bkpt	0x0001
   181e0:	2300      	movs	r3, #0
   181e2:	461a      	mov	r2, r3
   181e4:	4619      	mov	r1, r3
   181e6:	4618      	mov	r0, r3
   181e8:	f000 fda2 	bl	18d30 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_DSC) {
   181ec:	7823      	ldrb	r3, [r4, #0]
   181ee:	2b03      	cmp	r3, #3
   181f0:	d00a      	beq.n	18208 <gatt_svr_access_test+0x164>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_DSC) {
   181f2:	2b02      	cmp	r3, #2
   181f4:	d110      	bne.n	18218 <gatt_svr_access_test+0x174>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_val,
   181f6:	2201      	movs	r2, #1
   181f8:	4911      	ldr	r1, [pc, #68]	; (18240 <gatt_svr_access_test+0x19c>)
   181fa:	6860      	ldr	r0, [r4, #4]
   181fc:	f001 f9f7 	bl	195ee <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   18200:	2800      	cmp	r0, #0
   18202:	d0e7      	beq.n	181d4 <gatt_svr_access_test+0x130>
   18204:	2011      	movs	r0, #17
   18206:	e7e5      	b.n	181d4 <gatt_svr_access_test+0x130>
            rc = gatt_svr_chr_write(ctxt->om,0,
   18208:	2100      	movs	r1, #0
   1820a:	9100      	str	r1, [sp, #0]
   1820c:	4b0c      	ldr	r3, [pc, #48]	; (18240 <gatt_svr_access_test+0x19c>)
   1820e:	2201      	movs	r2, #1
   18210:	6860      	ldr	r0, [r4, #4]
   18212:	f7ff ff34 	bl	1807e <gatt_svr_chr_write>
            return rc;
   18216:	e7dd      	b.n	181d4 <gatt_svr_access_test+0x130>
        assert(0);
   18218:	f7fc fa6c 	bl	146f4 <hal_debugger_connected>
   1821c:	b100      	cbz	r0, 18220 <gatt_svr_access_test+0x17c>
   1821e:	be01      	bkpt	0x0001
   18220:	2300      	movs	r3, #0
   18222:	461a      	mov	r2, r3
   18224:	4619      	mov	r1, r3
   18226:	4618      	mov	r0, r3
   18228:	f000 fd82 	bl	18d30 <__assert_func>
        assert(0);
   1822c:	f7fc fa62 	bl	146f4 <hal_debugger_connected>
   18230:	b100      	cbz	r0, 18234 <gatt_svr_access_test+0x190>
   18232:	be01      	bkpt	0x0001
   18234:	2300      	movs	r3, #0
   18236:	461a      	mov	r2, r3
   18238:	4619      	mov	r1, r3
   1823a:	4618      	mov	r0, r3
   1823c:	f000 fd78 	bl	18d30 <__assert_func>
   18240:	100020da 	.word	0x100020da

00018244 <gatt_svr_long_access_test>:

static int
gatt_svr_long_access_test(uint16_t conn_handle, uint16_t attr_handle,
                          struct ble_gatt_access_ctxt *ctxt,
                          void *arg)
{
   18244:	b510      	push	{r4, lr}
   18246:	b082      	sub	sp, #8
   18248:	4614      	mov	r4, r2
    uint16_t uuid16;
    int rc;

    uuid16 = extract_uuid16_from_pts_uuid128(ctxt->chr->uuid);
   1824a:	6893      	ldr	r3, [r2, #8]
   1824c:	6818      	ldr	r0, [r3, #0]
   1824e:	f7ff ff11 	bl	18074 <extract_uuid16_from_pts_uuid128>
    assert(uuid16 != 0);
   18252:	b160      	cbz	r0, 1826e <gatt_svr_long_access_test+0x2a>

    switch (uuid16) {
   18254:	f1a0 0312 	sub.w	r3, r0, #18
   18258:	2b0b      	cmp	r3, #11
   1825a:	f200 80e5 	bhi.w	18428 <gatt_svr_long_access_test+0x1e4>
   1825e:	e8df f003 	tbb	[pc, r3]
   18262:	2410      	.short	0x2410
   18264:	78593a24 	.word	0x78593a24
   18268:	c2ad9778 	.word	0xc2ad9778
   1826c:	c2c2      	.short	0xc2c2
    assert(uuid16 != 0);
   1826e:	f7fc fa41 	bl	146f4 <hal_debugger_connected>
   18272:	b100      	cbz	r0, 18276 <gatt_svr_long_access_test+0x32>
   18274:	be01      	bkpt	0x0001
   18276:	2300      	movs	r3, #0
   18278:	461a      	mov	r2, r3
   1827a:	4619      	mov	r1, r3
   1827c:	4618      	mov	r0, r3
   1827e:	f000 fd57 	bl	18d30 <__assert_func>
    case PTS_LONG_CHR_READ:
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   18282:	7823      	ldrb	r3, [r4, #0]
   18284:	b93b      	cbnz	r3, 18296 <gatt_svr_long_access_test+0x52>
        rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_long_val,
   18286:	221e      	movs	r2, #30
   18288:	496c      	ldr	r1, [pc, #432]	; (1843c <gatt_svr_long_access_test+0x1f8>)
   1828a:	6860      	ldr	r0, [r4, #4]
   1828c:	f001 f9af 	bl	195ee <os_mbuf_append>
                            sizeof gatt_svr_pts_static_long_val);
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   18290:	b1a8      	cbz	r0, 182be <gatt_svr_long_access_test+0x7a>
   18292:	2011      	movs	r0, #17
   18294:	e013      	b.n	182be <gatt_svr_long_access_test+0x7a>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   18296:	f7fc fa2d 	bl	146f4 <hal_debugger_connected>
   1829a:	b100      	cbz	r0, 1829e <gatt_svr_long_access_test+0x5a>
   1829c:	be01      	bkpt	0x0001
   1829e:	2300      	movs	r3, #0
   182a0:	461a      	mov	r2, r3
   182a2:	4619      	mov	r1, r3
   182a4:	4618      	mov	r0, r3
   182a6:	f000 fd43 	bl	18d30 <__assert_func>

    case PTS_LONG_CHR_WRITE:
    case PTS_LONG_CHR_RELIABLE_WRITE:
        assert(ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR);
   182aa:	7823      	ldrb	r3, [r4, #0]
   182ac:	2b01      	cmp	r3, #1
   182ae:	d108      	bne.n	182c2 <gatt_svr_long_access_test+0x7e>
        rc = gatt_svr_chr_write(ctxt->om,0,
   182b0:	2100      	movs	r1, #0
   182b2:	9100      	str	r1, [sp, #0]
   182b4:	4b61      	ldr	r3, [pc, #388]	; (1843c <gatt_svr_long_access_test+0x1f8>)
   182b6:	221e      	movs	r2, #30
   182b8:	6860      	ldr	r0, [r4, #4]
   182ba:	f7ff fee0 	bl	1807e <gatt_svr_chr_write>

    default:
        assert(0);
        return BLE_ATT_ERR_UNLIKELY;
    }
}
   182be:	b002      	add	sp, #8
   182c0:	bd10      	pop	{r4, pc}
        assert(ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR);
   182c2:	f7fc fa17 	bl	146f4 <hal_debugger_connected>
   182c6:	b100      	cbz	r0, 182ca <gatt_svr_long_access_test+0x86>
   182c8:	be01      	bkpt	0x0001
   182ca:	2300      	movs	r3, #0
   182cc:	461a      	mov	r2, r3
   182ce:	4619      	mov	r1, r3
   182d0:	4618      	mov	r0, r3
   182d2:	f000 fd2d 	bl	18d30 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   182d6:	7823      	ldrb	r3, [r4, #0]
   182d8:	2b01      	cmp	r3, #1
   182da:	d009      	beq.n	182f0 <gatt_svr_long_access_test+0xac>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   182dc:	b983      	cbnz	r3, 18300 <gatt_svr_long_access_test+0xbc>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_long_val,
   182de:	221e      	movs	r2, #30
   182e0:	4956      	ldr	r1, [pc, #344]	; (1843c <gatt_svr_long_access_test+0x1f8>)
   182e2:	6860      	ldr	r0, [r4, #4]
   182e4:	f001 f983 	bl	195ee <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   182e8:	2800      	cmp	r0, #0
   182ea:	d0e8      	beq.n	182be <gatt_svr_long_access_test+0x7a>
   182ec:	2011      	movs	r0, #17
   182ee:	e7e6      	b.n	182be <gatt_svr_long_access_test+0x7a>
            rc = gatt_svr_chr_write(ctxt->om,0,
   182f0:	2100      	movs	r1, #0
   182f2:	9100      	str	r1, [sp, #0]
   182f4:	4b51      	ldr	r3, [pc, #324]	; (1843c <gatt_svr_long_access_test+0x1f8>)
   182f6:	221e      	movs	r2, #30
   182f8:	6860      	ldr	r0, [r4, #4]
   182fa:	f7ff fec0 	bl	1807e <gatt_svr_chr_write>
            return rc;
   182fe:	e7de      	b.n	182be <gatt_svr_long_access_test+0x7a>
        assert(0);
   18300:	f7fc f9f8 	bl	146f4 <hal_debugger_connected>
   18304:	b100      	cbz	r0, 18308 <gatt_svr_long_access_test+0xc4>
   18306:	be01      	bkpt	0x0001
   18308:	2300      	movs	r3, #0
   1830a:	461a      	mov	r2, r3
   1830c:	4619      	mov	r1, r3
   1830e:	4618      	mov	r0, r3
   18310:	f000 fd0e 	bl	18d30 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   18314:	7823      	ldrb	r3, [r4, #0]
   18316:	2b01      	cmp	r3, #1
   18318:	d009      	beq.n	1832e <gatt_svr_long_access_test+0xea>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   1831a:	b983      	cbnz	r3, 1833e <gatt_svr_long_access_test+0xfa>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_long_val_alt,
   1831c:	221e      	movs	r2, #30
   1831e:	4948      	ldr	r1, [pc, #288]	; (18440 <gatt_svr_long_access_test+0x1fc>)
   18320:	6860      	ldr	r0, [r4, #4]
   18322:	f001 f964 	bl	195ee <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   18326:	2800      	cmp	r0, #0
   18328:	d0c9      	beq.n	182be <gatt_svr_long_access_test+0x7a>
   1832a:	2011      	movs	r0, #17
   1832c:	e7c7      	b.n	182be <gatt_svr_long_access_test+0x7a>
            rc = gatt_svr_chr_write(ctxt->om,0,
   1832e:	2100      	movs	r1, #0
   18330:	9100      	str	r1, [sp, #0]
   18332:	4b43      	ldr	r3, [pc, #268]	; (18440 <gatt_svr_long_access_test+0x1fc>)
   18334:	221e      	movs	r2, #30
   18336:	6860      	ldr	r0, [r4, #4]
   18338:	f7ff fea1 	bl	1807e <gatt_svr_chr_write>
            return rc;
   1833c:	e7bf      	b.n	182be <gatt_svr_long_access_test+0x7a>
        assert(0);
   1833e:	f7fc f9d9 	bl	146f4 <hal_debugger_connected>
   18342:	b100      	cbz	r0, 18346 <gatt_svr_long_access_test+0x102>
   18344:	be01      	bkpt	0x0001
   18346:	2300      	movs	r3, #0
   18348:	461a      	mov	r2, r3
   1834a:	4619      	mov	r1, r3
   1834c:	4618      	mov	r0, r3
   1834e:	f000 fcef 	bl	18d30 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   18352:	7823      	ldrb	r3, [r4, #0]
   18354:	2b01      	cmp	r3, #1
   18356:	d009      	beq.n	1836c <gatt_svr_long_access_test+0x128>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   18358:	b983      	cbnz	r3, 1837c <gatt_svr_long_access_test+0x138>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_long_val,
   1835a:	221e      	movs	r2, #30
   1835c:	4937      	ldr	r1, [pc, #220]	; (1843c <gatt_svr_long_access_test+0x1f8>)
   1835e:	6860      	ldr	r0, [r4, #4]
   18360:	f001 f945 	bl	195ee <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   18364:	2800      	cmp	r0, #0
   18366:	d0aa      	beq.n	182be <gatt_svr_long_access_test+0x7a>
   18368:	2011      	movs	r0, #17
   1836a:	e7a8      	b.n	182be <gatt_svr_long_access_test+0x7a>
            rc = gatt_svr_chr_write(ctxt->om,0,
   1836c:	2100      	movs	r1, #0
   1836e:	9100      	str	r1, [sp, #0]
   18370:	4b32      	ldr	r3, [pc, #200]	; (1843c <gatt_svr_long_access_test+0x1f8>)
   18372:	221e      	movs	r2, #30
   18374:	6860      	ldr	r0, [r4, #4]
   18376:	f7ff fe82 	bl	1807e <gatt_svr_chr_write>
            return rc;
   1837a:	e7a0      	b.n	182be <gatt_svr_long_access_test+0x7a>
        assert(0);
   1837c:	f7fc f9ba 	bl	146f4 <hal_debugger_connected>
   18380:	b100      	cbz	r0, 18384 <gatt_svr_long_access_test+0x140>
   18382:	be01      	bkpt	0x0001
   18384:	2300      	movs	r3, #0
   18386:	461a      	mov	r2, r3
   18388:	4619      	mov	r1, r3
   1838a:	4618      	mov	r0, r3
   1838c:	f000 fcd0 	bl	18d30 <__assert_func>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_DSC);
   18390:	7823      	ldrb	r3, [r4, #0]
   18392:	2b02      	cmp	r3, #2
   18394:	d108      	bne.n	183a8 <gatt_svr_long_access_test+0x164>
        rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_long_val,
   18396:	221e      	movs	r2, #30
   18398:	4928      	ldr	r1, [pc, #160]	; (1843c <gatt_svr_long_access_test+0x1f8>)
   1839a:	6860      	ldr	r0, [r4, #4]
   1839c:	f001 f927 	bl	195ee <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   183a0:	2800      	cmp	r0, #0
   183a2:	d08c      	beq.n	182be <gatt_svr_long_access_test+0x7a>
   183a4:	2011      	movs	r0, #17
   183a6:	e78a      	b.n	182be <gatt_svr_long_access_test+0x7a>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_DSC);
   183a8:	f7fc f9a4 	bl	146f4 <hal_debugger_connected>
   183ac:	b100      	cbz	r0, 183b0 <gatt_svr_long_access_test+0x16c>
   183ae:	be01      	bkpt	0x0001
   183b0:	2300      	movs	r3, #0
   183b2:	461a      	mov	r2, r3
   183b4:	4619      	mov	r1, r3
   183b6:	4618      	mov	r0, r3
   183b8:	f000 fcba 	bl	18d30 <__assert_func>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_WRITE_DSC);
   183bc:	7823      	ldrb	r3, [r4, #0]
   183be:	2b03      	cmp	r3, #3
   183c0:	d107      	bne.n	183d2 <gatt_svr_long_access_test+0x18e>
        rc = gatt_svr_chr_write(ctxt->om,0,
   183c2:	2100      	movs	r1, #0
   183c4:	9100      	str	r1, [sp, #0]
   183c6:	4b1d      	ldr	r3, [pc, #116]	; (1843c <gatt_svr_long_access_test+0x1f8>)
   183c8:	221e      	movs	r2, #30
   183ca:	6860      	ldr	r0, [r4, #4]
   183cc:	f7ff fe57 	bl	1807e <gatt_svr_chr_write>
        return rc;
   183d0:	e775      	b.n	182be <gatt_svr_long_access_test+0x7a>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_WRITE_DSC);
   183d2:	f7fc f98f 	bl	146f4 <hal_debugger_connected>
   183d6:	b100      	cbz	r0, 183da <gatt_svr_long_access_test+0x196>
   183d8:	be01      	bkpt	0x0001
   183da:	2300      	movs	r3, #0
   183dc:	461a      	mov	r2, r3
   183de:	4619      	mov	r1, r3
   183e0:	4618      	mov	r0, r3
   183e2:	f000 fca5 	bl	18d30 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_DSC) {
   183e6:	7823      	ldrb	r3, [r4, #0]
   183e8:	2b03      	cmp	r3, #3
   183ea:	d00b      	beq.n	18404 <gatt_svr_long_access_test+0x1c0>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_DSC) {
   183ec:	2b02      	cmp	r3, #2
   183ee:	d111      	bne.n	18414 <gatt_svr_long_access_test+0x1d0>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_long_val,
   183f0:	221e      	movs	r2, #30
   183f2:	4912      	ldr	r1, [pc, #72]	; (1843c <gatt_svr_long_access_test+0x1f8>)
   183f4:	6860      	ldr	r0, [r4, #4]
   183f6:	f001 f8fa 	bl	195ee <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   183fa:	2800      	cmp	r0, #0
   183fc:	f43f af5f 	beq.w	182be <gatt_svr_long_access_test+0x7a>
   18400:	2011      	movs	r0, #17
   18402:	e75c      	b.n	182be <gatt_svr_long_access_test+0x7a>
            rc = gatt_svr_chr_write(ctxt->om,0,
   18404:	2100      	movs	r1, #0
   18406:	9100      	str	r1, [sp, #0]
   18408:	4b0c      	ldr	r3, [pc, #48]	; (1843c <gatt_svr_long_access_test+0x1f8>)
   1840a:	221e      	movs	r2, #30
   1840c:	6860      	ldr	r0, [r4, #4]
   1840e:	f7ff fe36 	bl	1807e <gatt_svr_chr_write>
            return rc;
   18412:	e754      	b.n	182be <gatt_svr_long_access_test+0x7a>
        assert(0);
   18414:	f7fc f96e 	bl	146f4 <hal_debugger_connected>
   18418:	b100      	cbz	r0, 1841c <gatt_svr_long_access_test+0x1d8>
   1841a:	be01      	bkpt	0x0001
   1841c:	2300      	movs	r3, #0
   1841e:	461a      	mov	r2, r3
   18420:	4619      	mov	r1, r3
   18422:	4618      	mov	r0, r3
   18424:	f000 fc84 	bl	18d30 <__assert_func>
        assert(0);
   18428:	f7fc f964 	bl	146f4 <hal_debugger_connected>
   1842c:	b100      	cbz	r0, 18430 <gatt_svr_long_access_test+0x1ec>
   1842e:	be01      	bkpt	0x0001
   18430:	2300      	movs	r3, #0
   18432:	461a      	mov	r2, r3
   18434:	4619      	mov	r1, r3
   18436:	4618      	mov	r0, r3
   18438:	f000 fc7a 	bl	18d30 <__assert_func>
   1843c:	1000209c 	.word	0x1000209c
   18440:	100020bc 	.word	0x100020bc

00018444 <gatt_svr_chr_access_sec_test>:
{
   18444:	b530      	push	{r4, r5, lr}
   18446:	b085      	sub	sp, #20
   18448:	4614      	mov	r4, r2
    uuid = ctxt->chr->uuid;
   1844a:	6893      	ldr	r3, [r2, #8]
   1844c:	681d      	ldr	r5, [r3, #0]
    if (ble_uuid_cmp(uuid, &gatt_svr_chr_sec_test_rand_uuid.u) == 0) {
   1844e:	4929      	ldr	r1, [pc, #164]	; (184f4 <gatt_svr_chr_access_sec_test+0xb0>)
   18450:	4628      	mov	r0, r5
   18452:	f018 ffa0 	bl	31396 <ble_uuid_cmp>
   18456:	b9b8      	cbnz	r0, 18488 <gatt_svr_chr_access_sec_test+0x44>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   18458:	7823      	ldrb	r3, [r4, #0]
   1845a:	b95b      	cbnz	r3, 18474 <gatt_svr_chr_access_sec_test+0x30>
}

#define RAND_MAX 0x7fffffff
__extern_inline int rand(void)
{
	return (int)lrand48();
   1845c:	f002 fbcc 	bl	1abf8 <lrand48>
        rand_num = rand();
   18460:	9003      	str	r0, [sp, #12]
        rc = os_mbuf_append(ctxt->om, &rand_num, sizeof rand_num);
   18462:	2204      	movs	r2, #4
   18464:	a903      	add	r1, sp, #12
   18466:	6860      	ldr	r0, [r4, #4]
   18468:	f001 f8c1 	bl	195ee <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   1846c:	b100      	cbz	r0, 18470 <gatt_svr_chr_access_sec_test+0x2c>
   1846e:	2011      	movs	r0, #17
}
   18470:	b005      	add	sp, #20
   18472:	bd30      	pop	{r4, r5, pc}
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   18474:	f7fc f93e 	bl	146f4 <hal_debugger_connected>
   18478:	b100      	cbz	r0, 1847c <gatt_svr_chr_access_sec_test+0x38>
   1847a:	be01      	bkpt	0x0001
   1847c:	2300      	movs	r3, #0
   1847e:	461a      	mov	r2, r3
   18480:	4619      	mov	r1, r3
   18482:	4618      	mov	r0, r3
   18484:	f000 fc54 	bl	18d30 <__assert_func>
    if (ble_uuid_cmp(uuid, &gatt_svr_chr_sec_test_static_uuid.u) == 0 ||
   18488:	491b      	ldr	r1, [pc, #108]	; (184f8 <gatt_svr_chr_access_sec_test+0xb4>)
   1848a:	4628      	mov	r0, r5
   1848c:	f018 ff83 	bl	31396 <ble_uuid_cmp>
   18490:	b960      	cbnz	r0, 184ac <gatt_svr_chr_access_sec_test+0x68>
        switch (ctxt->op) {
   18492:	7823      	ldrb	r3, [r4, #0]
   18494:	b1d3      	cbz	r3, 184cc <gatt_svr_chr_access_sec_test+0x88>
   18496:	2b01      	cmp	r3, #1
   18498:	d121      	bne.n	184de <gatt_svr_chr_access_sec_test+0x9a>
            rc = gatt_svr_chr_write(ctxt->om,
   1849a:	2300      	movs	r3, #0
   1849c:	9300      	str	r3, [sp, #0]
   1849e:	4b17      	ldr	r3, [pc, #92]	; (184fc <gatt_svr_chr_access_sec_test+0xb8>)
   184a0:	2201      	movs	r2, #1
   184a2:	4611      	mov	r1, r2
   184a4:	6860      	ldr	r0, [r4, #4]
   184a6:	f7ff fdea 	bl	1807e <gatt_svr_chr_write>
            return rc;
   184aa:	e7e1      	b.n	18470 <gatt_svr_chr_access_sec_test+0x2c>
        ble_uuid_cmp(uuid, &gatt_svr_chr_sec_test_static_auth_uuid.u) == 0) {
   184ac:	4914      	ldr	r1, [pc, #80]	; (18500 <gatt_svr_chr_access_sec_test+0xbc>)
   184ae:	4628      	mov	r0, r5
   184b0:	f018 ff71 	bl	31396 <ble_uuid_cmp>
    if (ble_uuid_cmp(uuid, &gatt_svr_chr_sec_test_static_uuid.u) == 0 ||
   184b4:	2800      	cmp	r0, #0
   184b6:	d0ec      	beq.n	18492 <gatt_svr_chr_access_sec_test+0x4e>
    assert(0);
   184b8:	f7fc f91c 	bl	146f4 <hal_debugger_connected>
   184bc:	b100      	cbz	r0, 184c0 <gatt_svr_chr_access_sec_test+0x7c>
   184be:	be01      	bkpt	0x0001
   184c0:	2300      	movs	r3, #0
   184c2:	461a      	mov	r2, r3
   184c4:	4619      	mov	r1, r3
   184c6:	4618      	mov	r0, r3
   184c8:	f000 fc32 	bl	18d30 <__assert_func>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_sec_test_static_val,
   184cc:	2201      	movs	r2, #1
   184ce:	490b      	ldr	r1, [pc, #44]	; (184fc <gatt_svr_chr_access_sec_test+0xb8>)
   184d0:	6860      	ldr	r0, [r4, #4]
   184d2:	f001 f88c 	bl	195ee <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   184d6:	2800      	cmp	r0, #0
   184d8:	d0ca      	beq.n	18470 <gatt_svr_chr_access_sec_test+0x2c>
   184da:	2011      	movs	r0, #17
   184dc:	e7c8      	b.n	18470 <gatt_svr_chr_access_sec_test+0x2c>
            assert(0);
   184de:	f7fc f909 	bl	146f4 <hal_debugger_connected>
   184e2:	b100      	cbz	r0, 184e6 <gatt_svr_chr_access_sec_test+0xa2>
   184e4:	be01      	bkpt	0x0001
   184e6:	2300      	movs	r3, #0
   184e8:	461a      	mov	r2, r3
   184ea:	4619      	mov	r1, r3
   184ec:	4618      	mov	r0, r3
   184ee:	f000 fc1f 	bl	18d30 <__assert_func>
   184f2:	bf00      	nop
   184f4:	00038224 	.word	0x00038224
   184f8:	0003824c 	.word	0x0003824c
   184fc:	100020db 	.word	0x100020db
   18500:	00038238 	.word	0x00038238

00018504 <gatt_svr_register_cb>:

void
gatt_svr_register_cb(struct ble_gatt_register_ctxt *ctxt, void *arg)
{
   18504:	b500      	push	{lr}
   18506:	b08b      	sub	sp, #44	; 0x2c
    char buf[BLE_UUID_STR_LEN];

    switch (ctxt->op) {
   18508:	7803      	ldrb	r3, [r0, #0]
   1850a:	2b02      	cmp	r3, #2
   1850c:	d015      	beq.n	1853a <gatt_svr_register_cb+0x36>
   1850e:	2b03      	cmp	r3, #3
   18510:	d019      	beq.n	18546 <gatt_svr_register_cb+0x42>
   18512:	2b01      	cmp	r3, #1
   18514:	d009      	beq.n	1852a <gatt_svr_register_cb+0x26>
                    ble_uuid_to_str(ctxt->dsc.dsc_def->uuid, buf),
                    ctxt->dsc.handle);
        break;

    default:
        assert(0);
   18516:	f7fc f8ed 	bl	146f4 <hal_debugger_connected>
   1851a:	b100      	cbz	r0, 1851e <gatt_svr_register_cb+0x1a>
   1851c:	be01      	bkpt	0x0001
   1851e:	2300      	movs	r3, #0
   18520:	461a      	mov	r2, r3
   18522:	4619      	mov	r1, r3
   18524:	4618      	mov	r0, r3
   18526:	f000 fc03 	bl	18d30 <__assert_func>
        MODLOG_DFLT(DEBUG, "registered service %s with handle=%d\n",
   1852a:	6883      	ldr	r3, [r0, #8]
   1852c:	4669      	mov	r1, sp
   1852e:	6858      	ldr	r0, [r3, #4]
   18530:	f018 ff50 	bl	313d4 <ble_uuid_to_str>
        break;
    }
}
   18534:	b00b      	add	sp, #44	; 0x2c
   18536:	f85d fb04 	ldr.w	pc, [sp], #4
        MODLOG_DFLT(DEBUG, "registering characteristic %s with "
   1853a:	6883      	ldr	r3, [r0, #8]
   1853c:	4669      	mov	r1, sp
   1853e:	6818      	ldr	r0, [r3, #0]
   18540:	f018 ff48 	bl	313d4 <ble_uuid_to_str>
        break;
   18544:	e7f6      	b.n	18534 <gatt_svr_register_cb+0x30>
        MODLOG_DFLT(DEBUG, "registering descriptor %s with handle=%d\n",
   18546:	6883      	ldr	r3, [r0, #8]
   18548:	4669      	mov	r1, sp
   1854a:	6818      	ldr	r0, [r3, #0]
   1854c:	f018 ff42 	bl	313d4 <ble_uuid_to_str>
        break;
   18550:	e7f0      	b.n	18534 <gatt_svr_register_cb+0x30>

00018552 <gatt_svr_print_svcs>:

void
gatt_svr_print_svcs(void)
{
   18552:	b508      	push	{r3, lr}
    ble_gatts_show_local();
   18554:	f015 fc7e 	bl	2de54 <ble_gatts_show_local>
}
   18558:	bd08      	pop	{r3, pc}
	...

0001855c <gatt_svr_init>:

int
gatt_svr_init(void)
{
   1855c:	b508      	push	{r3, lr}
    int rc;

    rc = ble_gatts_count_cfg(gatt_svr_svcs);
   1855e:	480c      	ldr	r0, [pc, #48]	; (18590 <gatt_svr_init+0x34>)
   18560:	f015 fa7e 	bl	2da60 <ble_gatts_count_cfg>
    if (rc != 0) {
   18564:	4603      	mov	r3, r0
   18566:	b108      	cbz	r0, 1856c <gatt_svr_init+0x10>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   18568:	4618      	mov	r0, r3
   1856a:	bd08      	pop	{r3, pc}
    rc = ble_gatts_add_svcs(gatt_svr_svcs);
   1856c:	4808      	ldr	r0, [pc, #32]	; (18590 <gatt_svr_init+0x34>)
   1856e:	f015 fa33 	bl	2d9d8 <ble_gatts_add_svcs>
    if (rc != 0) {
   18572:	4603      	mov	r3, r0
   18574:	2800      	cmp	r0, #0
   18576:	d1f7      	bne.n	18568 <gatt_svr_init+0xc>
    rc = ble_gatts_count_cfg(gatt_svr_inc_svcs);
   18578:	4806      	ldr	r0, [pc, #24]	; (18594 <gatt_svr_init+0x38>)
   1857a:	f015 fa71 	bl	2da60 <ble_gatts_count_cfg>
    if (rc != 0) {
   1857e:	4603      	mov	r3, r0
   18580:	2800      	cmp	r0, #0
   18582:	d1f1      	bne.n	18568 <gatt_svr_init+0xc>
    rc = ble_gatts_add_svcs(gatt_svr_inc_svcs);
   18584:	4803      	ldr	r0, [pc, #12]	; (18594 <gatt_svr_init+0x38>)
   18586:	f015 fa27 	bl	2d9d8 <ble_gatts_add_svcs>
   1858a:	4603      	mov	r3, r0
    if (rc != 0) {
   1858c:	e7ec      	b.n	18568 <gatt_svr_init+0xc>
   1858e:	bf00      	nop
   18590:	00038294 	.word	0x00038294
   18594:	00038260 	.word	0x00038260

00018598 <parse_arg_long_base>:
 * octal.
 */
static int
parse_arg_long_base(char *sval)
{
    if (sval[0] == '0' && sval[1] == 'x') {
   18598:	7803      	ldrb	r3, [r0, #0]
   1859a:	2b30      	cmp	r3, #48	; 0x30
   1859c:	d104      	bne.n	185a8 <parse_arg_long_base+0x10>
   1859e:	7843      	ldrb	r3, [r0, #1]
   185a0:	2b78      	cmp	r3, #120	; 0x78
   185a2:	d003      	beq.n	185ac <parse_arg_long_base+0x14>
        return 0;
    } else {
        return 10;
   185a4:	200a      	movs	r0, #10
   185a6:	4770      	bx	lr
   185a8:	200a      	movs	r0, #10
   185aa:	4770      	bx	lr
        return 0;
   185ac:	2000      	movs	r0, #0
    }
}
   185ae:	4770      	bx	lr

000185b0 <parse_reverse_bytes>:
parse_reverse_bytes(uint8_t *bytes, int len)
{
    uint8_t tmp;
    int i;

    for (i = 0; i < len / 2; i++) {
   185b0:	2300      	movs	r3, #0
   185b2:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
   185b6:	ebb3 0f62 	cmp.w	r3, r2, asr #1
   185ba:	da0e      	bge.n	185da <parse_reverse_bytes+0x2a>
{
   185bc:	b430      	push	{r4, r5}
        tmp = bytes[i];
   185be:	5cc4      	ldrb	r4, [r0, r3]
        bytes[i] = bytes[len - i - 1];
   185c0:	1aca      	subs	r2, r1, r3
   185c2:	3a01      	subs	r2, #1
   185c4:	5c85      	ldrb	r5, [r0, r2]
   185c6:	54c5      	strb	r5, [r0, r3]
        bytes[len - i - 1] = tmp;
   185c8:	5484      	strb	r4, [r0, r2]
    for (i = 0; i < len / 2; i++) {
   185ca:	3301      	adds	r3, #1
   185cc:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
   185d0:	ebb3 0f62 	cmp.w	r3, r2, asr #1
   185d4:	dbf3      	blt.n	185be <parse_reverse_bytes+0xe>
    }
}
   185d6:	bc30      	pop	{r4, r5}
   185d8:	4770      	bx	lr
   185da:	4770      	bx	lr

000185dc <parse_time_unit_mult>:
{
   185dc:	b510      	push	{r4, lr}
   185de:	4604      	mov	r4, r0
    if (!strcasecmp(str, "us")) {
   185e0:	490b      	ldr	r1, [pc, #44]	; (18610 <parse_time_unit_mult+0x34>)
   185e2:	f002 fb76 	bl	1acd2 <strcasecmp>
   185e6:	b158      	cbz	r0, 18600 <parse_time_unit_mult+0x24>
    } else if (!strcasecmp(str, "ms")) {
   185e8:	490a      	ldr	r1, [pc, #40]	; (18614 <parse_time_unit_mult+0x38>)
   185ea:	4620      	mov	r0, r4
   185ec:	f002 fb71 	bl	1acd2 <strcasecmp>
   185f0:	b140      	cbz	r0, 18604 <parse_time_unit_mult+0x28>
    } else if (!strcasecmp(str, "s")) {
   185f2:	4909      	ldr	r1, [pc, #36]	; (18618 <parse_time_unit_mult+0x3c>)
   185f4:	4620      	mov	r0, r4
   185f6:	f002 fb6c 	bl	1acd2 <strcasecmp>
   185fa:	b130      	cbz	r0, 1860a <parse_time_unit_mult+0x2e>
    return 0;
   185fc:	2000      	movs	r0, #0
}
   185fe:	bd10      	pop	{r4, pc}
        return 1;
   18600:	2001      	movs	r0, #1
   18602:	e7fc      	b.n	185fe <parse_time_unit_mult+0x22>
        return 1000;
   18604:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   18608:	e7f9      	b.n	185fe <parse_time_unit_mult+0x22>
        return 1000000;
   1860a:	4804      	ldr	r0, [pc, #16]	; (1861c <parse_time_unit_mult+0x40>)
   1860c:	e7f7      	b.n	185fe <parse_time_unit_mult+0x22>
   1860e:	bf00      	nop
   18610:	000382d4 	.word	0x000382d4
   18614:	00036118 	.word	0x00036118
   18618:	00038670 	.word	0x00038670
   1861c:	000f4240 	.word	0x000f4240

00018620 <parse_time_us>:
{
   18620:	b570      	push	{r4, r5, r6, lr}
   18622:	460e      	mov	r6, r1
    uint32_t val = 0;
   18624:	2400      	movs	r4, #0
    while (isdigit((unsigned char)*str)) {
   18626:	7803      	ldrb	r3, [r0, #0]
   18628:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1862c:	2a09      	cmp	r2, #9
   1862e:	d806      	bhi.n	1863e <parse_time_us+0x1e>
        val *= 10;
   18630:	eb04 0484 	add.w	r4, r4, r4, lsl #2
        val += *str - '0';
   18634:	eb03 0444 	add.w	r4, r3, r4, lsl #1
   18638:	3c30      	subs	r4, #48	; 0x30
        str++;
   1863a:	3001      	adds	r0, #1
   1863c:	e7f3      	b.n	18626 <parse_time_us+0x6>
    if (*str == '.') {
   1863e:	2b2e      	cmp	r3, #46	; 0x2e
   18640:	d00e      	beq.n	18660 <parse_time_us+0x40>
    uint32_t val_div = 1;
   18642:	2501      	movs	r5, #1
    val_mult = parse_time_unit_mult(str);
   18644:	f7ff ffca 	bl	185dc <parse_time_unit_mult>
    if (val_mult == 0) {
   18648:	4603      	mov	r3, r0
   1864a:	b1d0      	cbz	r0, 18682 <parse_time_us+0x62>
    if (val_mult > val_div) {
   1864c:	4285      	cmp	r5, r0
   1864e:	d21b      	bcs.n	18688 <parse_time_us+0x68>
        val_us = val * (val_mult / val_div);
   18650:	fbb0 f3f5 	udiv	r3, r0, r5
   18654:	fb04 f303 	mul.w	r3, r4, r3
    *out_status = 0;
   18658:	2200      	movs	r2, #0
   1865a:	6032      	str	r2, [r6, #0]
}
   1865c:	4618      	mov	r0, r3
   1865e:	bd70      	pop	{r4, r5, r6, pc}
        str++;
   18660:	3001      	adds	r0, #1
    uint32_t val_div = 1;
   18662:	2501      	movs	r5, #1
        while (isdigit((unsigned char)*str)) {
   18664:	7803      	ldrb	r3, [r0, #0]
   18666:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1866a:	2a09      	cmp	r2, #9
   1866c:	d8ea      	bhi.n	18644 <parse_time_us+0x24>
            val *= 10;
   1866e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
            val += *str - '0';
   18672:	eb03 0444 	add.w	r4, r3, r4, lsl #1
   18676:	3c30      	subs	r4, #48	; 0x30
            val_div *= 10;
   18678:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1867c:	006d      	lsls	r5, r5, #1
            str++;
   1867e:	3001      	adds	r0, #1
   18680:	e7f0      	b.n	18664 <parse_time_us+0x44>
        *out_status = EINVAL;
   18682:	2216      	movs	r2, #22
   18684:	6032      	str	r2, [r6, #0]
        return 0;
   18686:	e7e9      	b.n	1865c <parse_time_us+0x3c>
        val_us = val * (val_div / val_mult);
   18688:	fbb5 f5f0 	udiv	r5, r5, r0
   1868c:	fb04 f305 	mul.w	r3, r4, r5
   18690:	e7e2      	b.n	18658 <parse_time_us+0x38>

00018692 <parse_arg_byte_stream_delim>:
{
   18692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18696:	b082      	sub	sp, #8
   18698:	4605      	mov	r5, r0
   1869a:	460f      	mov	r7, r1
   1869c:	4614      	mov	r4, r2
   1869e:	461e      	mov	r6, r3
    for (token = strtok_r(sval, delims, &tok_ptr);
   186a0:	466a      	mov	r2, sp
   186a2:	f002 fb58 	bl	1ad56 <strtok_r>
    i = 0;
   186a6:	f04f 0800 	mov.w	r8, #0
    for (token = strtok_r(sval, delims, &tok_ptr);
   186aa:	b1b0      	cbz	r0, 186da <parse_arg_byte_stream_delim+0x48>
        if (i >= max_len) {
   186ac:	45a0      	cmp	r8, r4
   186ae:	da1a      	bge.n	186e6 <parse_arg_byte_stream_delim+0x54>
        ul = strtoul(token, &endptr, 16);
   186b0:	2210      	movs	r2, #16
   186b2:	a901      	add	r1, sp, #4
   186b4:	f002 fb65 	bl	1ad82 <strtoul>
        if (sval[0] == '\0' || *endptr != '\0' || ul > UINT8_MAX) {
   186b8:	782b      	ldrb	r3, [r5, #0]
   186ba:	b1b3      	cbz	r3, 186ea <parse_arg_byte_stream_delim+0x58>
   186bc:	9b01      	ldr	r3, [sp, #4]
   186be:	781b      	ldrb	r3, [r3, #0]
   186c0:	b9b3      	cbnz	r3, 186f0 <parse_arg_byte_stream_delim+0x5e>
   186c2:	28ff      	cmp	r0, #255	; 0xff
   186c4:	d817      	bhi.n	186f6 <parse_arg_byte_stream_delim+0x64>
        dst[i] = ul;
   186c6:	f806 0008 	strb.w	r0, [r6, r8]
        i++;
   186ca:	f108 0801 	add.w	r8, r8, #1
         token = strtok_r(NULL, delims, &tok_ptr)) {
   186ce:	466a      	mov	r2, sp
   186d0:	4639      	mov	r1, r7
   186d2:	2000      	movs	r0, #0
   186d4:	f002 fb3f 	bl	1ad56 <strtok_r>
   186d8:	e7e7      	b.n	186aa <parse_arg_byte_stream_delim+0x18>
    *out_len = i;
   186da:	9b08      	ldr	r3, [sp, #32]
   186dc:	f8c3 8000 	str.w	r8, [r3]
}
   186e0:	b002      	add	sp, #8
   186e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return EINVAL;
   186e6:	2016      	movs	r0, #22
   186e8:	e7fa      	b.n	186e0 <parse_arg_byte_stream_delim+0x4e>
            return -1;
   186ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   186ee:	e7f7      	b.n	186e0 <parse_arg_byte_stream_delim+0x4e>
   186f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   186f4:	e7f4      	b.n	186e0 <parse_arg_byte_stream_delim+0x4e>
   186f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   186fa:	e7f1      	b.n	186e0 <parse_arg_byte_stream_delim+0x4e>

000186fc <parse_arg_find_idx>:
{
   186fc:	b538      	push	{r3, r4, r5, lr}
   186fe:	4605      	mov	r5, r0
    for (i = 0; i < cmd_num_args; i++) {
   18700:	2400      	movs	r4, #0
   18702:	4b08      	ldr	r3, [pc, #32]	; (18724 <parse_arg_find_idx+0x28>)
   18704:	681b      	ldr	r3, [r3, #0]
   18706:	42a3      	cmp	r3, r4
   18708:	dd08      	ble.n	1871c <parse_arg_find_idx+0x20>
        if (strcmp(cmd_args[i][0], key) == 0) {
   1870a:	4629      	mov	r1, r5
   1870c:	4b06      	ldr	r3, [pc, #24]	; (18728 <parse_arg_find_idx+0x2c>)
   1870e:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   18712:	f002 faf8 	bl	1ad06 <strcmp>
   18716:	b118      	cbz	r0, 18720 <parse_arg_find_idx+0x24>
    for (i = 0; i < cmd_num_args; i++) {
   18718:	3401      	adds	r4, #1
   1871a:	e7f2      	b.n	18702 <parse_arg_find_idx+0x6>
    return -1;
   1871c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   18720:	4620      	mov	r0, r4
   18722:	bd38      	pop	{r3, r4, r5, pc}
   18724:	1000215c 	.word	0x1000215c
   18728:	100020dc 	.word	0x100020dc

0001872c <parse_arg_peek>:
{
   1872c:	b538      	push	{r3, r4, r5, lr}
   1872e:	4605      	mov	r5, r0
    for (i = 0; i < cmd_num_args; i++) {
   18730:	2400      	movs	r4, #0
   18732:	4b0a      	ldr	r3, [pc, #40]	; (1875c <parse_arg_peek+0x30>)
   18734:	681b      	ldr	r3, [r3, #0]
   18736:	42a3      	cmp	r3, r4
   18738:	dd0d      	ble.n	18756 <parse_arg_peek+0x2a>
        if (strcmp(cmd_args[i][0], key) == 0) {
   1873a:	4629      	mov	r1, r5
   1873c:	4b08      	ldr	r3, [pc, #32]	; (18760 <parse_arg_peek+0x34>)
   1873e:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   18742:	f002 fae0 	bl	1ad06 <strcmp>
   18746:	b108      	cbz	r0, 1874c <parse_arg_peek+0x20>
    for (i = 0; i < cmd_num_args; i++) {
   18748:	3401      	adds	r4, #1
   1874a:	e7f2      	b.n	18732 <parse_arg_peek+0x6>
            return cmd_args[i][1];
   1874c:	4b04      	ldr	r3, [pc, #16]	; (18760 <parse_arg_peek+0x34>)
   1874e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   18752:	6860      	ldr	r0, [r4, #4]
   18754:	e000      	b.n	18758 <parse_arg_peek+0x2c>
    return NULL;
   18756:	2000      	movs	r0, #0
}
   18758:	bd38      	pop	{r3, r4, r5, pc}
   1875a:	bf00      	nop
   1875c:	1000215c 	.word	0x1000215c
   18760:	100020dc 	.word	0x100020dc

00018764 <parse_arg_extract>:
{
   18764:	b570      	push	{r4, r5, r6, lr}
   18766:	4606      	mov	r6, r0
    for (i = 0; i < cmd_num_args; i++) {
   18768:	2400      	movs	r4, #0
   1876a:	4b0b      	ldr	r3, [pc, #44]	; (18798 <parse_arg_extract+0x34>)
   1876c:	681b      	ldr	r3, [r3, #0]
   1876e:	42a3      	cmp	r3, r4
   18770:	dd10      	ble.n	18794 <parse_arg_extract+0x30>
        if (strcmp(cmd_args[i][0], key) == 0) {
   18772:	4b0a      	ldr	r3, [pc, #40]	; (1879c <parse_arg_extract+0x38>)
   18774:	f853 5034 	ldr.w	r5, [r3, r4, lsl #3]
   18778:	4631      	mov	r1, r6
   1877a:	4628      	mov	r0, r5
   1877c:	f002 fac3 	bl	1ad06 <strcmp>
   18780:	b108      	cbz	r0, 18786 <parse_arg_extract+0x22>
    for (i = 0; i < cmd_num_args; i++) {
   18782:	3401      	adds	r4, #1
   18784:	e7f1      	b.n	1876a <parse_arg_extract+0x6>
            cmd_args[i][0][0] = '\0';
   18786:	2300      	movs	r3, #0
   18788:	702b      	strb	r3, [r5, #0]
            return cmd_args[i][1];
   1878a:	4b04      	ldr	r3, [pc, #16]	; (1879c <parse_arg_extract+0x38>)
   1878c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   18790:	6860      	ldr	r0, [r4, #4]
   18792:	e000      	b.n	18796 <parse_arg_extract+0x32>
    return NULL;
   18794:	2000      	movs	r0, #0
}
   18796:	bd70      	pop	{r4, r5, r6, pc}
   18798:	1000215c 	.word	0x1000215c
   1879c:	100020dc 	.word	0x100020dc

000187a0 <parse_long_bounds>:
{
   187a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   187a2:	b083      	sub	sp, #12
   187a4:	4604      	mov	r4, r0
   187a6:	460d      	mov	r5, r1
   187a8:	4616      	mov	r6, r2
   187aa:	461f      	mov	r7, r3
    lval = strtol(sval, &endptr, parse_arg_long_base(sval));
   187ac:	f7ff fef4 	bl	18598 <parse_arg_long_base>
   187b0:	4602      	mov	r2, r0
   187b2:	a901      	add	r1, sp, #4
   187b4:	4620      	mov	r0, r4
   187b6:	f002 fade 	bl	1ad76 <strtol>
    if (sval[0] != '\0' && *endptr == '\0' &&
   187ba:	7824      	ldrb	r4, [r4, #0]
   187bc:	b134      	cbz	r4, 187cc <parse_long_bounds+0x2c>
   187be:	9b01      	ldr	r3, [sp, #4]
   187c0:	781b      	ldrb	r3, [r3, #0]
   187c2:	b91b      	cbnz	r3, 187cc <parse_long_bounds+0x2c>
   187c4:	42a8      	cmp	r0, r5
   187c6:	db01      	blt.n	187cc <parse_long_bounds+0x2c>
        lval >= min && lval <= max) {
   187c8:	42b0      	cmp	r0, r6
   187ca:	dd04      	ble.n	187d6 <parse_long_bounds+0x36>
    *out_status = EINVAL;
   187cc:	2316      	movs	r3, #22
   187ce:	603b      	str	r3, [r7, #0]
    return 0;
   187d0:	2000      	movs	r0, #0
}
   187d2:	b003      	add	sp, #12
   187d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *out_status = 0;
   187d6:	603b      	str	r3, [r7, #0]
        return lval;
   187d8:	e7fb      	b.n	187d2 <parse_long_bounds+0x32>

000187da <parse_arg_long_bounds_peek>:
{
   187da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   187dc:	460d      	mov	r5, r1
   187de:	4616      	mov	r6, r2
   187e0:	461c      	mov	r4, r3
    sval = parse_arg_peek(name);
   187e2:	f7ff ffa3 	bl	1872c <parse_arg_peek>
    if (sval == NULL) {
   187e6:	b128      	cbz	r0, 187f4 <parse_arg_long_bounds_peek+0x1a>
    return parse_long_bounds(sval, min, max, out_status);
   187e8:	4623      	mov	r3, r4
   187ea:	4632      	mov	r2, r6
   187ec:	4629      	mov	r1, r5
   187ee:	f7ff ffd7 	bl	187a0 <parse_long_bounds>
}
   187f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        *out_status = ENOENT;
   187f4:	2302      	movs	r3, #2
   187f6:	6023      	str	r3, [r4, #0]
        return 0;
   187f8:	e7fb      	b.n	187f2 <parse_arg_long_bounds_peek+0x18>

000187fa <parse_arg_long_bounds>:
{
   187fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   187fc:	460d      	mov	r5, r1
   187fe:	4616      	mov	r6, r2
   18800:	461c      	mov	r4, r3
    sval = parse_arg_extract(name);
   18802:	f7ff ffaf 	bl	18764 <parse_arg_extract>
    if (sval == NULL) {
   18806:	b128      	cbz	r0, 18814 <parse_arg_long_bounds+0x1a>
    return parse_long_bounds(sval, min, max, out_status);
   18808:	4623      	mov	r3, r4
   1880a:	4632      	mov	r2, r6
   1880c:	4629      	mov	r1, r5
   1880e:	f7ff ffc7 	bl	187a0 <parse_long_bounds>
}
   18812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        *out_status = ENOENT;
   18814:	2302      	movs	r3, #2
   18816:	6023      	str	r3, [r4, #0]
        return 0;
   18818:	e7fb      	b.n	18812 <parse_arg_long_bounds+0x18>

0001881a <parse_arg_long_bounds_dflt>:
{
   1881a:	b510      	push	{r4, lr}
   1881c:	b082      	sub	sp, #8
   1881e:	461c      	mov	r4, r3
    val = parse_arg_long_bounds(name, min, max, &rc);
   18820:	ab01      	add	r3, sp, #4
   18822:	f7ff ffea 	bl	187fa <parse_arg_long_bounds>
    if (rc == ENOENT) {
   18826:	9b01      	ldr	r3, [sp, #4]
   18828:	2b02      	cmp	r3, #2
   1882a:	d004      	beq.n	18836 <parse_arg_long_bounds_dflt+0x1c>
    *out_status = rc;
   1882c:	9a01      	ldr	r2, [sp, #4]
   1882e:	9b04      	ldr	r3, [sp, #16]
   18830:	601a      	str	r2, [r3, #0]
}
   18832:	b002      	add	sp, #8
   18834:	bd10      	pop	{r4, pc}
        rc = 0;
   18836:	2300      	movs	r3, #0
   18838:	9301      	str	r3, [sp, #4]
        val = dflt;
   1883a:	4620      	mov	r0, r4
   1883c:	e7f6      	b.n	1882c <parse_arg_long_bounds_dflt+0x12>

0001883e <parse_arg_uint64_bounds>:
{
   1883e:	b570      	push	{r4, r5, r6, lr}
   18840:	b082      	sub	sp, #8
   18842:	4614      	mov	r4, r2
   18844:	461d      	mov	r5, r3
    sval = parse_arg_extract(name);
   18846:	f7ff ff8d 	bl	18764 <parse_arg_extract>
    if (sval == NULL) {
   1884a:	b308      	cbz	r0, 18890 <parse_arg_uint64_bounds+0x52>
   1884c:	4606      	mov	r6, r0
    lval = strtoull(sval, &endptr, parse_arg_long_base(sval));
   1884e:	f7ff fea3 	bl	18598 <parse_arg_long_base>
   18852:	4602      	mov	r2, r0
   18854:	a901      	add	r1, sp, #4
   18856:	4630      	mov	r0, r6
   18858:	f002 fa99 	bl	1ad8e <strtoull>
   1885c:	4602      	mov	r2, r0
   1885e:	460b      	mov	r3, r1
   18860:	4610      	mov	r0, r2
   18862:	4619      	mov	r1, r3
    if (sval[0] != '\0' && *endptr == '\0' &&
   18864:	7833      	ldrb	r3, [r6, #0]
   18866:	b163      	cbz	r3, 18882 <parse_arg_uint64_bounds+0x44>
   18868:	9b01      	ldr	r3, [sp, #4]
   1886a:	781b      	ldrb	r3, [r3, #0]
   1886c:	b94b      	cbnz	r3, 18882 <parse_arg_uint64_bounds+0x44>
   1886e:	42a9      	cmp	r1, r5
   18870:	bf08      	it	eq
   18872:	42a2      	cmpeq	r2, r4
   18874:	d305      	bcc.n	18882 <parse_arg_uint64_bounds+0x44>
        lval >= min && lval <= max) {
   18876:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1887a:	428b      	cmp	r3, r1
   1887c:	bf08      	it	eq
   1887e:	4282      	cmpeq	r2, r0
   18880:	d20c      	bcs.n	1889c <parse_arg_uint64_bounds+0x5e>
    *out_status = EINVAL;
   18882:	2316      	movs	r3, #22
   18884:	9a08      	ldr	r2, [sp, #32]
   18886:	6013      	str	r3, [r2, #0]
    return 0;
   18888:	2000      	movs	r0, #0
   1888a:	2100      	movs	r1, #0
}
   1888c:	b002      	add	sp, #8
   1888e:	bd70      	pop	{r4, r5, r6, pc}
        *out_status = ENOENT;
   18890:	2302      	movs	r3, #2
   18892:	9a08      	ldr	r2, [sp, #32]
   18894:	6013      	str	r3, [r2, #0]
        return 0;
   18896:	2000      	movs	r0, #0
   18898:	2100      	movs	r1, #0
   1889a:	e7f7      	b.n	1888c <parse_arg_uint64_bounds+0x4e>
        *out_status = 0;
   1889c:	2300      	movs	r3, #0
   1889e:	9a08      	ldr	r2, [sp, #32]
   188a0:	6013      	str	r3, [r2, #0]
        return lval;
   188a2:	e7f3      	b.n	1888c <parse_arg_uint64_bounds+0x4e>

000188a4 <parse_arg_long>:
{
   188a4:	b508      	push	{r3, lr}
   188a6:	460b      	mov	r3, r1
    return parse_arg_long_bounds(name, LONG_MIN, LONG_MAX, out_status);
   188a8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   188ac:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   188b0:	f7ff ffa3 	bl	187fa <parse_arg_long_bounds>
}
   188b4:	bd08      	pop	{r3, pc}

000188b6 <parse_arg_bool>:
{
   188b6:	b508      	push	{r3, lr}
   188b8:	460b      	mov	r3, r1
    return parse_arg_long_bounds(name, 0, 1, out_status);
   188ba:	2201      	movs	r2, #1
   188bc:	2100      	movs	r1, #0
   188be:	f7ff ff9c 	bl	187fa <parse_arg_long_bounds>
}
   188c2:	b2c0      	uxtb	r0, r0
   188c4:	bd08      	pop	{r3, pc}

000188c6 <parse_arg_bool_dflt>:
{
   188c6:	b500      	push	{lr}
   188c8:	b083      	sub	sp, #12
   188ca:	460b      	mov	r3, r1
    return parse_arg_long_bounds_dflt(name, 0, 1, dflt, out_status);
   188cc:	9200      	str	r2, [sp, #0]
   188ce:	2201      	movs	r2, #1
   188d0:	2100      	movs	r1, #0
   188d2:	f7ff ffa2 	bl	1881a <parse_arg_long_bounds_dflt>
}
   188d6:	b2c0      	uxtb	r0, r0
   188d8:	b003      	add	sp, #12
   188da:	f85d fb04 	ldr.w	pc, [sp], #4

000188de <parse_arg_uint8>:
{
   188de:	b508      	push	{r3, lr}
   188e0:	460b      	mov	r3, r1
    return parse_arg_long_bounds(name, 0, UINT8_MAX, out_status);
   188e2:	22ff      	movs	r2, #255	; 0xff
   188e4:	2100      	movs	r1, #0
   188e6:	f7ff ff88 	bl	187fa <parse_arg_long_bounds>
}
   188ea:	b2c0      	uxtb	r0, r0
   188ec:	bd08      	pop	{r3, pc}

000188ee <parse_arg_uint16>:
{
   188ee:	b508      	push	{r3, lr}
   188f0:	460b      	mov	r3, r1
    return parse_arg_long_bounds(name, 0, UINT16_MAX, out_status);
   188f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   188f6:	2100      	movs	r1, #0
   188f8:	f7ff ff7f 	bl	187fa <parse_arg_long_bounds>
}
   188fc:	b280      	uxth	r0, r0
   188fe:	bd08      	pop	{r3, pc}

00018900 <parse_arg_uint16_peek>:
{
   18900:	b508      	push	{r3, lr}
   18902:	460b      	mov	r3, r1
    return parse_arg_long_bounds_peek(name, 0, UINT16_MAX, out_status);
   18904:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18908:	2100      	movs	r1, #0
   1890a:	f7ff ff66 	bl	187da <parse_arg_long_bounds_peek>
}
   1890e:	b280      	uxth	r0, r0
   18910:	bd08      	pop	{r3, pc}

00018912 <parse_arg_uint32>:
{
   18912:	b500      	push	{lr}
   18914:	b085      	sub	sp, #20
    return parse_arg_uint64_bounds(name, 0, UINT32_MAX, out_status);
   18916:	9102      	str	r1, [sp, #8]
   18918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1891c:	2300      	movs	r3, #0
   1891e:	e9cd 2300 	strd	r2, r3, [sp]
   18922:	2200      	movs	r2, #0
   18924:	2300      	movs	r3, #0
   18926:	f7ff ff8a 	bl	1883e <parse_arg_uint64_bounds>
}
   1892a:	b005      	add	sp, #20
   1892c:	f85d fb04 	ldr.w	pc, [sp], #4

00018930 <parse_arg_uint64>:
{
   18930:	b500      	push	{lr}
   18932:	b085      	sub	sp, #20
    return parse_arg_uint64_bounds(name, 0, UINT64_MAX, out_status);
   18934:	9102      	str	r1, [sp, #8]
   18936:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1893a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1893e:	e9cd 2300 	strd	r2, r3, [sp]
   18942:	2200      	movs	r2, #0
   18944:	2300      	movs	r3, #0
   18946:	f7ff ff7a 	bl	1883e <parse_arg_uint64_bounds>
}
   1894a:	b005      	add	sp, #20
   1894c:	f85d fb04 	ldr.w	pc, [sp], #4

00018950 <parse_arg_uint8_dflt>:
{
   18950:	b530      	push	{r4, r5, lr}
   18952:	b083      	sub	sp, #12
   18954:	460d      	mov	r5, r1
   18956:	4614      	mov	r4, r2
    val = parse_arg_uint8(name, &rc);
   18958:	a901      	add	r1, sp, #4
   1895a:	f7ff ffc0 	bl	188de <parse_arg_uint8>
    if (rc == ENOENT) {
   1895e:	9b01      	ldr	r3, [sp, #4]
   18960:	2b02      	cmp	r3, #2
   18962:	d003      	beq.n	1896c <parse_arg_uint8_dflt+0x1c>
    *out_status = rc;
   18964:	9b01      	ldr	r3, [sp, #4]
   18966:	6023      	str	r3, [r4, #0]
}
   18968:	b003      	add	sp, #12
   1896a:	bd30      	pop	{r4, r5, pc}
        rc = 0;
   1896c:	2300      	movs	r3, #0
   1896e:	9301      	str	r3, [sp, #4]
        val = dflt;
   18970:	4628      	mov	r0, r5
   18972:	e7f7      	b.n	18964 <parse_arg_uint8_dflt+0x14>

00018974 <parse_arg_uint16_dflt>:
{
   18974:	b530      	push	{r4, r5, lr}
   18976:	b083      	sub	sp, #12
   18978:	460d      	mov	r5, r1
   1897a:	4614      	mov	r4, r2
    val = parse_arg_uint16(name, &rc);
   1897c:	a901      	add	r1, sp, #4
   1897e:	f7ff ffb6 	bl	188ee <parse_arg_uint16>
    if (rc == ENOENT) {
   18982:	9b01      	ldr	r3, [sp, #4]
   18984:	2b02      	cmp	r3, #2
   18986:	d003      	beq.n	18990 <parse_arg_uint16_dflt+0x1c>
    *out_status = rc;
   18988:	9b01      	ldr	r3, [sp, #4]
   1898a:	6023      	str	r3, [r4, #0]
}
   1898c:	b003      	add	sp, #12
   1898e:	bd30      	pop	{r4, r5, pc}
        rc = 0;
   18990:	2300      	movs	r3, #0
   18992:	9301      	str	r3, [sp, #4]
        val = dflt;
   18994:	4628      	mov	r0, r5
   18996:	e7f7      	b.n	18988 <parse_arg_uint16_dflt+0x14>

00018998 <parse_arg_time_dflt>:
{
   18998:	b5f0      	push	{r4, r5, r6, r7, lr}
   1899a:	b083      	sub	sp, #12
   1899c:	4606      	mov	r6, r0
   1899e:	460c      	mov	r4, r1
   189a0:	4617      	mov	r7, r2
   189a2:	461d      	mov	r5, r3
    arg = parse_arg_peek(name);
   189a4:	f7ff fec2 	bl	1872c <parse_arg_peek>
    if (!arg) {
   189a8:	b180      	cbz	r0, 189cc <parse_arg_time_dflt+0x34>
    val = parse_time_us(arg, &rc);
   189aa:	a901      	add	r1, sp, #4
   189ac:	f7ff fe38 	bl	18620 <parse_time_us>
    if (rc) {
   189b0:	9b01      	ldr	r3, [sp, #4]
   189b2:	b17b      	cbz	r3, 189d4 <parse_arg_time_dflt+0x3c>
        val = parse_arg_uint32(name, &rc);
   189b4:	a901      	add	r1, sp, #4
   189b6:	4630      	mov	r0, r6
   189b8:	f7ff ffab 	bl	18912 <parse_arg_uint32>
   189bc:	4604      	mov	r4, r0
        if (rc == ENOENT) {
   189be:	9b01      	ldr	r3, [sp, #4]
   189c0:	2b02      	cmp	r3, #2
   189c2:	d10c      	bne.n	189de <parse_arg_time_dflt+0x46>
            *out_status = 0;
   189c4:	2300      	movs	r3, #0
   189c6:	602b      	str	r3, [r5, #0]
            return dflt;
   189c8:	463c      	mov	r4, r7
   189ca:	e00a      	b.n	189e2 <parse_arg_time_dflt+0x4a>
        *out_status = 0;
   189cc:	2300      	movs	r3, #0
   189ce:	602b      	str	r3, [r5, #0]
        return dflt;
   189d0:	463c      	mov	r4, r7
   189d2:	e006      	b.n	189e2 <parse_arg_time_dflt+0x4a>
        val /= step_us;
   189d4:	fbb0 f4f4 	udiv	r4, r0, r4
        parse_arg_extract(name);
   189d8:	4630      	mov	r0, r6
   189da:	f7ff fec3 	bl	18764 <parse_arg_extract>
    *out_status = rc;
   189de:	9b01      	ldr	r3, [sp, #4]
   189e0:	602b      	str	r3, [r5, #0]
}
   189e2:	4620      	mov	r0, r4
   189e4:	b003      	add	sp, #12
   189e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000189e8 <parse_kv_find>:
{
   189e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   189ea:	4605      	mov	r5, r0
   189ec:	460e      	mov	r6, r1
    for (i = 0; kvs[i].key != NULL; i++) {
   189ee:	2400      	movs	r4, #0
   189f0:	eb05 07c4 	add.w	r7, r5, r4, lsl #3
   189f4:	f855 1034 	ldr.w	r1, [r5, r4, lsl #3]
   189f8:	b131      	cbz	r1, 18a08 <parse_kv_find+0x20>
        if (strcmp(name, kv->key) == 0) {
   189fa:	4630      	mov	r0, r6
   189fc:	f002 f983 	bl	1ad06 <strcmp>
   18a00:	b108      	cbz	r0, 18a06 <parse_kv_find+0x1e>
    for (i = 0; kvs[i].key != NULL; i++) {
   18a02:	3401      	adds	r4, #1
   18a04:	e7f4      	b.n	189f0 <parse_kv_find+0x8>
            return kv;
   18a06:	4639      	mov	r1, r7
}
   18a08:	4608      	mov	r0, r1
   18a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018a0c <parse_arg_kv>:
{
   18a0c:	b538      	push	{r3, r4, r5, lr}
   18a0e:	460c      	mov	r4, r1
   18a10:	4615      	mov	r5, r2
    sval = parse_arg_extract(name);
   18a12:	f7ff fea7 	bl	18764 <parse_arg_extract>
    if (sval == NULL) {
   18a16:	b140      	cbz	r0, 18a2a <parse_arg_kv+0x1e>
   18a18:	4601      	mov	r1, r0
    kv = parse_kv_find(kvs, sval);
   18a1a:	4620      	mov	r0, r4
   18a1c:	f7ff ffe4 	bl	189e8 <parse_kv_find>
    if (kv == NULL) {
   18a20:	b140      	cbz	r0, 18a34 <parse_arg_kv+0x28>
    *out_status = 0;
   18a22:	2200      	movs	r2, #0
   18a24:	602a      	str	r2, [r5, #0]
    return kv->val;
   18a26:	6840      	ldr	r0, [r0, #4]
}
   18a28:	bd38      	pop	{r3, r4, r5, pc}
        *out_status = ENOENT;
   18a2a:	2302      	movs	r3, #2
   18a2c:	602b      	str	r3, [r5, #0]
        return -1;
   18a2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18a32:	e7f9      	b.n	18a28 <parse_arg_kv+0x1c>
        *out_status = EINVAL;
   18a34:	2316      	movs	r3, #22
   18a36:	602b      	str	r3, [r5, #0]
        return -1;
   18a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18a3c:	e7f4      	b.n	18a28 <parse_arg_kv+0x1c>

00018a3e <parse_arg_kv_dflt>:
{
   18a3e:	b530      	push	{r4, r5, lr}
   18a40:	b083      	sub	sp, #12
   18a42:	4615      	mov	r5, r2
   18a44:	461c      	mov	r4, r3
    val = parse_arg_kv(name, kvs, &rc);
   18a46:	aa01      	add	r2, sp, #4
   18a48:	f7ff ffe0 	bl	18a0c <parse_arg_kv>
    if (rc == ENOENT) {
   18a4c:	9b01      	ldr	r3, [sp, #4]
   18a4e:	2b02      	cmp	r3, #2
   18a50:	d003      	beq.n	18a5a <parse_arg_kv_dflt+0x1c>
    *out_status = rc;
   18a52:	9b01      	ldr	r3, [sp, #4]
   18a54:	6023      	str	r3, [r4, #0]
}
   18a56:	b003      	add	sp, #12
   18a58:	bd30      	pop	{r4, r5, pc}
        rc = 0;
   18a5a:	2300      	movs	r3, #0
   18a5c:	9301      	str	r3, [sp, #4]
        val = def_val;
   18a5e:	4628      	mov	r0, r5
   18a60:	e7f7      	b.n	18a52 <parse_arg_kv_dflt+0x14>
	...

00018a64 <parse_arg_byte_stream>:
{
   18a64:	b5f0      	push	{r4, r5, r6, r7, lr}
   18a66:	b083      	sub	sp, #12
   18a68:	460c      	mov	r4, r1
   18a6a:	4615      	mov	r5, r2
   18a6c:	461e      	mov	r6, r3
    sval = parse_arg_extract(name);
   18a6e:	f7ff fe79 	bl	18764 <parse_arg_extract>
    if (sval == NULL) {
   18a72:	b138      	cbz	r0, 18a84 <parse_arg_byte_stream+0x20>
    return parse_arg_byte_stream_delim(sval, ":-", max_len, dst, out_len);
   18a74:	9600      	str	r6, [sp, #0]
   18a76:	462b      	mov	r3, r5
   18a78:	4622      	mov	r2, r4
   18a7a:	4903      	ldr	r1, [pc, #12]	; (18a88 <parse_arg_byte_stream+0x24>)
   18a7c:	f7ff fe09 	bl	18692 <parse_arg_byte_stream_delim>
}
   18a80:	b003      	add	sp, #12
   18a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ENOENT;
   18a84:	2002      	movs	r0, #2
   18a86:	e7fb      	b.n	18a80 <parse_arg_byte_stream+0x1c>
   18a88:	000382d8 	.word	0x000382d8

00018a8c <parse_arg_byte_stream_exact_length>:
{
   18a8c:	b510      	push	{r4, lr}
   18a8e:	b082      	sub	sp, #8
   18a90:	4614      	mov	r4, r2
    rc = parse_arg_byte_stream(name, len, dst, &actual_len);
   18a92:	ab01      	add	r3, sp, #4
   18a94:	460a      	mov	r2, r1
   18a96:	4621      	mov	r1, r4
   18a98:	f7ff ffe4 	bl	18a64 <parse_arg_byte_stream>
    if (rc != 0) {
   18a9c:	b910      	cbnz	r0, 18aa4 <parse_arg_byte_stream_exact_length+0x18>
    if (actual_len != len) {
   18a9e:	9b01      	ldr	r3, [sp, #4]
   18aa0:	42a3      	cmp	r3, r4
   18aa2:	d101      	bne.n	18aa8 <parse_arg_byte_stream_exact_length+0x1c>
}
   18aa4:	b002      	add	sp, #8
   18aa6:	bd10      	pop	{r4, pc}
        return EINVAL;
   18aa8:	2016      	movs	r0, #22
   18aaa:	e7fb      	b.n	18aa4 <parse_arg_byte_stream_exact_length+0x18>

00018aac <parse_arg_mac>:

int
parse_arg_mac(char *name, uint8_t *dst)
{
   18aac:	b538      	push	{r3, r4, r5, lr}
   18aae:	460c      	mov	r4, r1
    int rc;

    rc = parse_arg_byte_stream_exact_length(name, dst, 6);
   18ab0:	2206      	movs	r2, #6
   18ab2:	f7ff ffeb 	bl	18a8c <parse_arg_byte_stream_exact_length>
    if (rc != 0) {
   18ab6:	4605      	mov	r5, r0
   18ab8:	b108      	cbz	r0, 18abe <parse_arg_mac+0x12>
    }

    parse_reverse_bytes(dst, 6);

    return 0;
}
   18aba:	4628      	mov	r0, r5
   18abc:	bd38      	pop	{r3, r4, r5, pc}
    parse_reverse_bytes(dst, 6);
   18abe:	2106      	movs	r1, #6
   18ac0:	4620      	mov	r0, r4
   18ac2:	f7ff fd75 	bl	185b0 <parse_reverse_bytes>
    return 0;
   18ac6:	e7f8      	b.n	18aba <parse_arg_mac+0xe>

00018ac8 <parse_arg_addr>:

int
parse_arg_addr(char *name, ble_addr_t *addr)
{
   18ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18aca:	4605      	mov	r5, r0
   18acc:	460c      	mov	r4, r1
    size_t len;
    uint8_t addr_type;
    bool addr_type_found;
    int rc;

    arg = parse_arg_peek(name);
   18ace:	f7ff fe2d 	bl	1872c <parse_arg_peek>
    if (!arg) {
   18ad2:	b358      	cbz	r0, 18b2c <parse_arg_addr+0x64>
   18ad4:	2700      	movs	r7, #0
   18ad6:	4606      	mov	r6, r0
        return ENOENT;
    }

    len = strlen(arg);
   18ad8:	f002 f921 	bl	1ad1e <strlen>
    if (len < 2) {
   18adc:	2801      	cmp	r0, #1
   18ade:	d927      	bls.n	18b30 <parse_arg_addr+0x68>
        return EINVAL;
    }

    addr_type_found = false;
    if ((arg[len - 2] == ':') || (arg[len - 2] == '-')) {
   18ae0:	1e82      	subs	r2, r0, #2
   18ae2:	5cb3      	ldrb	r3, [r6, r2]
   18ae4:	2b3a      	cmp	r3, #58	; 0x3a
   18ae6:	d00a      	beq.n	18afe <parse_arg_addr+0x36>
   18ae8:	2b2d      	cmp	r3, #45	; 0x2d
   18aea:	d008      	beq.n	18afe <parse_arg_addr+0x36>
    addr_type_found = false;
   18aec:	2600      	movs	r6, #0
        if (addr_type_found) {
            arg[len - 2] = '\0';
        }
}

    rc = parse_arg_mac(name, addr->val);
   18aee:	1c61      	adds	r1, r4, #1
   18af0:	4628      	mov	r0, r5
   18af2:	f7ff ffdb 	bl	18aac <parse_arg_mac>
    if (rc != 0) {
   18af6:	b908      	cbnz	r0, 18afc <parse_arg_addr+0x34>
        return rc;
    }

    if (addr_type_found) {
   18af8:	b1e6      	cbz	r6, 18b34 <parse_arg_addr+0x6c>
        addr->type = addr_type;
   18afa:	7027      	strb	r7, [r4, #0]
    } else {
        rc = EAGAIN;
    }

    return rc;
}
   18afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (tolower(arg[len - 1]) == 'p') {
   18afe:	1833      	adds	r3, r6, r0
   18b00:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   18b04:	4619      	mov	r1, r3
extern "C" {
#endif

__extern_inline int isupper(int __c)
{
	return __c >= 'A' && __c <= 'Z';
   18b06:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
	return islower(__c) ? (__c & ~32) : __c;
}

__extern_inline int tolower(int __c)
{
	return isupper(__c) ? (__c | 32) : __c;
   18b0a:	2819      	cmp	r0, #25
   18b0c:	d801      	bhi.n	18b12 <parse_arg_addr+0x4a>
   18b0e:	f043 0120 	orr.w	r1, r3, #32
   18b12:	2970      	cmp	r1, #112	; 0x70
   18b14:	d005      	beq.n	18b22 <parse_arg_addr+0x5a>
        } else if (tolower(arg[len - 1]) == 'r') {
   18b16:	2972      	cmp	r1, #114	; 0x72
   18b18:	d001      	beq.n	18b1e <parse_arg_addr+0x56>
    addr_type_found = false;
   18b1a:	2600      	movs	r6, #0
   18b1c:	e7e7      	b.n	18aee <parse_arg_addr+0x26>
            addr_type = BLE_ADDR_RANDOM;
   18b1e:	2701      	movs	r7, #1
   18b20:	e000      	b.n	18b24 <parse_arg_addr+0x5c>
            addr_type = BLE_ADDR_PUBLIC;
   18b22:	2700      	movs	r7, #0
            arg[len - 2] = '\0';
   18b24:	2300      	movs	r3, #0
   18b26:	54b3      	strb	r3, [r6, r2]
   18b28:	2601      	movs	r6, #1
   18b2a:	e7e0      	b.n	18aee <parse_arg_addr+0x26>
        return ENOENT;
   18b2c:	2002      	movs	r0, #2
   18b2e:	e7e5      	b.n	18afc <parse_arg_addr+0x34>
        return EINVAL;
   18b30:	2016      	movs	r0, #22
   18b32:	e7e3      	b.n	18afc <parse_arg_addr+0x34>
        rc = EAGAIN;
   18b34:	200b      	movs	r0, #11
   18b36:	e7e1      	b.n	18afc <parse_arg_addr+0x34>

00018b38 <parse_arg_uuid>:

int
parse_arg_uuid(char *str, ble_uuid_any_t *uuid)
{
   18b38:	b570      	push	{r4, r5, r6, lr}
   18b3a:	b086      	sub	sp, #24
   18b3c:	4605      	mov	r5, r0
   18b3e:	460e      	mov	r6, r1
    uint16_t uuid16;
    uint8_t val[16];
    int len;
    int rc;

    uuid16 = parse_arg_uint16_peek(str, &rc);
   18b40:	a901      	add	r1, sp, #4
   18b42:	f7ff fedd 	bl	18900 <parse_arg_uint16_peek>
    switch (rc) {
   18b46:	9c01      	ldr	r4, [sp, #4]
   18b48:	b12c      	cbz	r4, 18b56 <parse_arg_uuid+0x1e>
   18b4a:	2c02      	cmp	r4, #2
   18b4c:	d115      	bne.n	18b7a <parse_arg_uuid+0x42>
    case ENOENT:
        parse_arg_extract(str);
   18b4e:	4628      	mov	r0, r5
   18b50:	f7ff fe08 	bl	18764 <parse_arg_extract>
        return ENOENT;
   18b54:	e00e      	b.n	18b74 <parse_arg_uuid+0x3c>

    case 0:
        len = 2;
        val[0] = uuid16;
   18b56:	f88d 0008 	strb.w	r0, [sp, #8]
        val[1] = uuid16 >> 8;
   18b5a:	0a03      	lsrs	r3, r0, #8
   18b5c:	f88d 3009 	strb.w	r3, [sp, #9]
        parse_arg_extract(str);
   18b60:	4628      	mov	r0, r5
   18b62:	f7ff fdff 	bl	18764 <parse_arg_extract>
        len = 2;
   18b66:	2202      	movs	r2, #2
        }
        parse_reverse_bytes(val, 16);
        break;
    }

    rc = ble_uuid_init_from_buf(uuid, val, len);
   18b68:	a902      	add	r1, sp, #8
   18b6a:	4630      	mov	r0, r6
   18b6c:	f018 fbeb 	bl	31346 <ble_uuid_init_from_buf>
    if (rc != 0) {
   18b70:	4604      	mov	r4, r0
   18b72:	b978      	cbnz	r0, 18b94 <parse_arg_uuid+0x5c>
        return EINVAL;
    } else {
        return 0;
    }
}
   18b74:	4620      	mov	r0, r4
   18b76:	b006      	add	sp, #24
   18b78:	bd70      	pop	{r4, r5, r6, pc}
        rc = parse_arg_byte_stream_exact_length(str, val, 16);
   18b7a:	2210      	movs	r2, #16
   18b7c:	a902      	add	r1, sp, #8
   18b7e:	4628      	mov	r0, r5
   18b80:	f7ff ff84 	bl	18a8c <parse_arg_byte_stream_exact_length>
   18b84:	9001      	str	r0, [sp, #4]
        if (rc != 0) {
   18b86:	b938      	cbnz	r0, 18b98 <parse_arg_uuid+0x60>
        parse_reverse_bytes(val, 16);
   18b88:	2110      	movs	r1, #16
   18b8a:	a802      	add	r0, sp, #8
   18b8c:	f7ff fd10 	bl	185b0 <parse_reverse_bytes>
        len = 16;
   18b90:	2210      	movs	r2, #16
        break;
   18b92:	e7e9      	b.n	18b68 <parse_arg_uuid+0x30>
        return EINVAL;
   18b94:	2416      	movs	r4, #22
   18b96:	e7ed      	b.n	18b74 <parse_arg_uuid+0x3c>
            return EINVAL;
   18b98:	2416      	movs	r4, #22
   18b9a:	e7eb      	b.n	18b74 <parse_arg_uuid+0x3c>

00018b9c <parse_arg_all>:

int
parse_arg_all(int argc, char **argv)
{
   18b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18ba0:	b083      	sub	sp, #12
   18ba2:	4607      	mov	r7, r0
   18ba4:	460e      	mov	r6, r1
    char *key;
    char *val;
    int i;
    char *tok_ptr;

    cmd_num_args = 0;
   18ba6:	2400      	movs	r4, #0
   18ba8:	4b1d      	ldr	r3, [pc, #116]	; (18c20 <parse_arg_all+0x84>)
   18baa:	601c      	str	r4, [r3, #0]

    for (i = 0; i < argc; i++) {
   18bac:	e011      	b.n	18bd2 <parse_arg_all+0x36>
        key = strtok_r(argv[i], "=", &tok_ptr);
        val = strtok_r(NULL, "=", &tok_ptr);

        if (key != NULL && val != NULL) {
            if (strlen(key) == 0) {
                console_printf("Error: invalid argument: %s\n", argv[i]);
   18bae:	f8d9 1000 	ldr.w	r1, [r9]
   18bb2:	481c      	ldr	r0, [pc, #112]	; (18c24 <parse_arg_all+0x88>)
   18bb4:	f003 fac0 	bl	1c138 <console_printf>
                return -1;
   18bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18bbc:	e02d      	b.n	18c1a <parse_arg_all+0x7e>
            if (cmd_num_args >= CMD_MAX_ARGS) {
                console_printf("Error: too many arguments");
                return -1;
            }

            cmd_args[cmd_num_args][0] = key;
   18bbe:	4a1a      	ldr	r2, [pc, #104]	; (18c28 <parse_arg_all+0x8c>)
   18bc0:	f842 5033 	str.w	r5, [r2, r3, lsl #3]
            cmd_args[cmd_num_args][1] = val;
   18bc4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   18bc8:	6050      	str	r0, [r2, #4]
            cmd_num_args++;
   18bca:	3301      	adds	r3, #1
   18bcc:	4a14      	ldr	r2, [pc, #80]	; (18c20 <parse_arg_all+0x84>)
   18bce:	6013      	str	r3, [r2, #0]
    for (i = 0; i < argc; i++) {
   18bd0:	3401      	adds	r4, #1
   18bd2:	42bc      	cmp	r4, r7
   18bd4:	da20      	bge.n	18c18 <parse_arg_all+0x7c>
        key = strtok_r(argv[i], "=", &tok_ptr);
   18bd6:	eb06 0984 	add.w	r9, r6, r4, lsl #2
   18bda:	f8df 8054 	ldr.w	r8, [pc, #84]	; 18c30 <parse_arg_all+0x94>
   18bde:	aa01      	add	r2, sp, #4
   18be0:	4641      	mov	r1, r8
   18be2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   18be6:	f002 f8b6 	bl	1ad56 <strtok_r>
   18bea:	4605      	mov	r5, r0
        val = strtok_r(NULL, "=", &tok_ptr);
   18bec:	aa01      	add	r2, sp, #4
   18bee:	4641      	mov	r1, r8
   18bf0:	2000      	movs	r0, #0
   18bf2:	f002 f8b0 	bl	1ad56 <strtok_r>
        if (key != NULL && val != NULL) {
   18bf6:	2d00      	cmp	r5, #0
   18bf8:	d0ea      	beq.n	18bd0 <parse_arg_all+0x34>
   18bfa:	2800      	cmp	r0, #0
   18bfc:	d0e8      	beq.n	18bd0 <parse_arg_all+0x34>
            if (strlen(key) == 0) {
   18bfe:	782b      	ldrb	r3, [r5, #0]
   18c00:	2b00      	cmp	r3, #0
   18c02:	d0d4      	beq.n	18bae <parse_arg_all+0x12>
            if (cmd_num_args >= CMD_MAX_ARGS) {
   18c04:	4b06      	ldr	r3, [pc, #24]	; (18c20 <parse_arg_all+0x84>)
   18c06:	681b      	ldr	r3, [r3, #0]
   18c08:	2b0f      	cmp	r3, #15
   18c0a:	ddd8      	ble.n	18bbe <parse_arg_all+0x22>
                console_printf("Error: too many arguments");
   18c0c:	4807      	ldr	r0, [pc, #28]	; (18c2c <parse_arg_all+0x90>)
   18c0e:	f003 fa93 	bl	1c138 <console_printf>
                return -1;
   18c12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18c16:	e000      	b.n	18c1a <parse_arg_all+0x7e>
        }
    }

    return 0;
   18c18:	2000      	movs	r0, #0
}
   18c1a:	b003      	add	sp, #12
   18c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18c20:	1000215c 	.word	0x1000215c
   18c24:	000382dc 	.word	0x000382dc
   18c28:	100020dc 	.word	0x100020dc
   18c2c:	000382fc 	.word	0x000382fc
   18c30:	00034630 	.word	0x00034630

00018c34 <parse_eddystone_url>:

int
parse_eddystone_url(char *full_url, uint8_t *out_scheme, char *out_body,
                    uint8_t *out_body_len, uint8_t *out_suffix)
{
   18c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c38:	b085      	sub	sp, #20
   18c3a:	4680      	mov	r8, r0
   18c3c:	468b      	mov	fp, r1
   18c3e:	9202      	str	r2, [sp, #8]
   18c40:	9301      	str	r3, [sp, #4]
    int suffix_len;
    int suffix_idx;
    int rc;
    int i;

    full_url_len = strlen(full_url);
   18c42:	f002 f86c 	bl	1ad1e <strlen>
   18c46:	4682      	mov	sl, r0
   18c48:	4607      	mov	r7, r0

    rc = BLE_HS_EINVAL;
    for (i = 0; i < sizeof schemes / sizeof schemes[0]; i++) {
   18c4a:	2500      	movs	r5, #0
   18c4c:	e000      	b.n	18c50 <parse_eddystone_url+0x1c>
   18c4e:	3501      	adds	r5, #1
   18c50:	2d03      	cmp	r5, #3
   18c52:	d816      	bhi.n	18c82 <parse_eddystone_url+0x4e>
        prefix = schemes[i].s;
   18c54:	4b25      	ldr	r3, [pc, #148]	; (18cec <parse_eddystone_url+0xb8>)
   18c56:	f853 6035 	ldr.w	r6, [r3, r5, lsl #3]
        prefix_len = strlen(schemes[i].s);
   18c5a:	4630      	mov	r0, r6
   18c5c:	f002 f85f 	bl	1ad1e <strlen>
   18c60:	4604      	mov	r4, r0
   18c62:	4681      	mov	r9, r0

        if (full_url_len >= prefix_len &&
   18c64:	4287      	cmp	r7, r0
   18c66:	dbf2      	blt.n	18c4e <parse_eddystone_url+0x1a>
            memcmp(full_url, prefix, prefix_len) == 0) {
   18c68:	4602      	mov	r2, r0
   18c6a:	4631      	mov	r1, r6
   18c6c:	4640      	mov	r0, r8
   18c6e:	f001 ffcb 	bl	1ac08 <memcmp>
        if (full_url_len >= prefix_len &&
   18c72:	4606      	mov	r6, r0
   18c74:	2800      	cmp	r0, #0
   18c76:	d1ea      	bne.n	18c4e <parse_eddystone_url+0x1a>

            *out_scheme = i;
   18c78:	f88b 5000 	strb.w	r5, [fp]
   18c7c:	4605      	mov	r5, r0
   18c7e:	46bb      	mov	fp, r7
   18c80:	e005      	b.n	18c8e <parse_eddystone_url+0x5a>
    rc = BLE_HS_EINVAL;
   18c82:	2603      	movs	r6, #3
    }

    memcpy(out_body, full_url + prefix_len, *out_body_len);

    return 0;
}
   18c84:	4630      	mov	r0, r6
   18c86:	b005      	add	sp, #20
   18c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (i = 0; i < sizeof suffixes / sizeof suffixes[0]; i++) {
   18c8c:	3501      	adds	r5, #1
   18c8e:	2d0d      	cmp	r5, #13
   18c90:	d81b      	bhi.n	18cca <parse_eddystone_url+0x96>
        suffix = suffixes[i].s;
   18c92:	4b17      	ldr	r3, [pc, #92]	; (18cf0 <parse_eddystone_url+0xbc>)
   18c94:	f853 7035 	ldr.w	r7, [r3, r5, lsl #3]
        suffix_len = strlen(suffixes[i].s);
   18c98:	4638      	mov	r0, r7
   18c9a:	f002 f840 	bl	1ad1e <strlen>
   18c9e:	4602      	mov	r2, r0
   18ca0:	9003      	str	r0, [sp, #12]
        suffix_idx = full_url_len - suffix_len;
   18ca2:	ebab 0000 	sub.w	r0, fp, r0
        if (suffix_idx >= prefix_len &&
   18ca6:	4581      	cmp	r9, r0
   18ca8:	dcf0      	bgt.n	18c8c <parse_eddystone_url+0x58>
            memcmp(full_url + suffix_idx, suffix, suffix_len) == 0) {
   18caa:	4639      	mov	r1, r7
   18cac:	4440      	add	r0, r8
   18cae:	f001 ffab 	bl	1ac08 <memcmp>
        if (suffix_idx >= prefix_len &&
   18cb2:	2800      	cmp	r0, #0
   18cb4:	d1ea      	bne.n	18c8c <parse_eddystone_url+0x58>
            *out_suffix = i;
   18cb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18cb8:	701d      	strb	r5, [r3, #0]
        *out_body_len = full_url_len - prefix_len - suffix_len;
   18cba:	ebaa 0309 	sub.w	r3, sl, r9
   18cbe:	b2db      	uxtb	r3, r3
   18cc0:	9a03      	ldr	r2, [sp, #12]
   18cc2:	1a9b      	subs	r3, r3, r2
   18cc4:	9a01      	ldr	r2, [sp, #4]
   18cc6:	7013      	strb	r3, [r2, #0]
   18cc8:	e007      	b.n	18cda <parse_eddystone_url+0xa6>
        *out_suffix = BLE_EDDYSTONE_URL_SUFFIX_NONE;
   18cca:	23ff      	movs	r3, #255	; 0xff
   18ccc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18cce:	7013      	strb	r3, [r2, #0]
        *out_body_len = full_url_len - prefix_len;
   18cd0:	ebaa 0909 	sub.w	r9, sl, r9
   18cd4:	9b01      	ldr	r3, [sp, #4]
   18cd6:	f883 9000 	strb.w	r9, [r3]
    memcpy(out_body, full_url + prefix_len, *out_body_len);
   18cda:	9b01      	ldr	r3, [sp, #4]
   18cdc:	781a      	ldrb	r2, [r3, #0]
   18cde:	eb08 0104 	add.w	r1, r8, r4
   18ce2:	9802      	ldr	r0, [sp, #8]
   18ce4:	f001 ffb4 	bl	1ac50 <memcpy>
    return 0;
   18ce8:	e7cc      	b.n	18c84 <parse_eddystone_url+0x50>
   18cea:	bf00      	nop
   18cec:	000383b8 	.word	0x000383b8
   18cf0:	000383d8 	.word	0x000383d8

00018cf4 <sysinit_app>:
void ble_store_config_init(void);
void shell_init(void);

void
sysinit_app(void)
{
   18cf4:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   18cf6:	f000 fa11 	bl	1911c <os_pkg_init>

    /*** Stage 9 */
    /* 9.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   18cfa:	f003 fc25 	bl	1c548 <flash_map_init>

    /*** Stage 10 */
    /* 10.0: stats_module_init (sys/stats/full) */
    stats_module_init();
   18cfe:	f005 f8d9 	bl	1deb4 <stats_module_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (sys/console/full) */
    console_pkg_init();
   18d02:	f002 fcc1 	bl	1b688 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: ble_hci_ram_init (nimble/transport/ram) */
    ble_hci_ram_init();
   18d06:	f019 faef 	bl	322e8 <ble_hci_ram_init>
    /* 100.1: log_init (sys/log/full) */
    log_init();
   18d0a:	f003 fd19 	bl	1c740 <log_init>
    /* 100.2: modlog_init (sys/log/modlog) */
    modlog_init();
   18d0e:	f004 f82b 	bl	1cd68 <modlog_init>

    /*** Stage 200 */
    /* 200.0: ble_hs_init (nimble/host) */
    ble_hs_init();
   18d12:	f015 fad1 	bl	2e2b8 <ble_hs_init>

    /*** Stage 250 */
    /* 250.0: ble_ll_init (nimble/controller) */
    ble_ll_init();
   18d16:	f006 f8f5 	bl	1ef04 <ble_ll_init>

    /*** Stage 301 */
    /* 301.0: ble_svc_gap_init (nimble/host/services/gap) */
    ble_svc_gap_init();
   18d1a:	f018 fe8f 	bl	31a3c <ble_svc_gap_init>

    /*** Stage 302 */
    /* 302.0: ble_svc_gatt_init (nimble/host/services/gatt) */
    ble_svc_gatt_init();
   18d1e:	f018 ff0b 	bl	31b38 <ble_svc_gatt_init>

    /*** Stage 303 */
    /* 303.0: ble_svc_ans_init (nimble/host/services/ans) */
    ble_svc_ans_init();
   18d22:	f018 fdad 	bl	31880 <ble_svc_ans_init>

    /*** Stage 500 */
    /* 500.0: ble_store_config_init (nimble/host/store/config) */
    ble_store_config_init();
   18d26:	f019 f967 	bl	31ff8 <ble_store_config_init>
    /* 500.1: shell_init (sys/shell) */
    shell_init();
   18d2a:	f004 fecf 	bl	1dacc <shell_init>
}
   18d2e:	bd08      	pop	{r3, pc}

00018d30 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   18d30:	b508      	push	{r3, lr}
   18d32:	4675      	mov	r5, lr
   18d34:	4604      	mov	r4, r0
   18d36:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   18d38:	f001 fdb6 	bl	1a8a8 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   18d3c:	f003 f8f2 	bl	1bf24 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   18d40:	b16c      	cbz	r4, 18d5e <__assert_func+0x2e>
   18d42:	4633      	mov	r3, r6
   18d44:	4622      	mov	r2, r4
   18d46:	4629      	mov	r1, r5
   18d48:	4807      	ldr	r0, [pc, #28]	; (18d68 <__assert_func+0x38>)
   18d4a:	f003 f9f5 	bl	1c138 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   18d4e:	4b07      	ldr	r3, [pc, #28]	; (18d6c <__assert_func+0x3c>)
   18d50:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   18d54:	605a      	str	r2, [r3, #4]
    asm("isb");
   18d56:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   18d5a:	f7fb fcd3 	bl	14704 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   18d5e:	4629      	mov	r1, r5
   18d60:	4803      	ldr	r0, [pc, #12]	; (18d70 <__assert_func+0x40>)
   18d62:	f003 f9e9 	bl	1c138 <console_printf>
   18d66:	e7f2      	b.n	18d4e <__assert_func+0x1e>
   18d68:	00038458 	.word	0x00038458
   18d6c:	e000ed00 	.word	0xe000ed00
   18d70:	00038448 	.word	0x00038448

00018d74 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   18d74:	b500      	push	{lr}
   18d76:	b083      	sub	sp, #12
   18d78:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   18d7a:	f003 f8d3 	bl	1bf24 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   18d7e:	4d1b      	ldr	r5, [pc, #108]	; (18dec <os_default_irq+0x78>)
   18d80:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   18d82:	6822      	ldr	r2, [r4, #0]
   18d84:	f3c1 0108 	ubfx	r1, r1, #0, #9
   18d88:	4819      	ldr	r0, [pc, #100]	; (18df0 <os_default_irq+0x7c>)
   18d8a:	f003 f9d5 	bl	1c138 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   18d8e:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   18d90:	6883      	ldr	r3, [r0, #8]
   18d92:	6842      	ldr	r2, [r0, #4]
   18d94:	6801      	ldr	r1, [r0, #0]
   18d96:	68c0      	ldr	r0, [r0, #12]
   18d98:	9000      	str	r0, [sp, #0]
   18d9a:	4816      	ldr	r0, [pc, #88]	; (18df4 <os_default_irq+0x80>)
   18d9c:	f003 f9cc 	bl	1c138 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   18da0:	6923      	ldr	r3, [r4, #16]
   18da2:	9300      	str	r3, [sp, #0]
   18da4:	68e3      	ldr	r3, [r4, #12]
   18da6:	68a2      	ldr	r2, [r4, #8]
   18da8:	6861      	ldr	r1, [r4, #4]
   18daa:	4813      	ldr	r0, [pc, #76]	; (18df8 <os_default_irq+0x84>)
   18dac:	f003 f9c4 	bl	1c138 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   18db0:	6a23      	ldr	r3, [r4, #32]
   18db2:	9300      	str	r3, [sp, #0]
   18db4:	69e3      	ldr	r3, [r4, #28]
   18db6:	69a2      	ldr	r2, [r4, #24]
   18db8:	6961      	ldr	r1, [r4, #20]
   18dba:	4810      	ldr	r0, [pc, #64]	; (18dfc <os_default_irq+0x88>)
   18dbc:	f003 f9bc 	bl	1c138 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   18dc0:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   18dc2:	6983      	ldr	r3, [r0, #24]
   18dc4:	6942      	ldr	r2, [r0, #20]
   18dc6:	6901      	ldr	r1, [r0, #16]
   18dc8:	69c0      	ldr	r0, [r0, #28]
   18dca:	9000      	str	r0, [sp, #0]
   18dcc:	480c      	ldr	r0, [pc, #48]	; (18e00 <os_default_irq+0x8c>)
   18dce:	f003 f9b3 	bl	1c138 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   18dd2:	6869      	ldr	r1, [r5, #4]
   18dd4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   18dd6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   18dd8:	480a      	ldr	r0, [pc, #40]	; (18e04 <os_default_irq+0x90>)
   18dda:	f003 f9ad 	bl	1c138 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   18dde:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   18de0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   18de2:	4809      	ldr	r0, [pc, #36]	; (18e08 <os_default_irq+0x94>)
   18de4:	f003 f9a8 	bl	1c138 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   18de8:	f7fb fc8c 	bl	14704 <hal_system_reset>
   18dec:	e000ed00 	.word	0xe000ed00
   18df0:	00038470 	.word	0x00038470
   18df4:	000384a4 	.word	0x000384a4
   18df8:	000384d8 	.word	0x000384d8
   18dfc:	0003850c 	.word	0x0003850c
   18e00:	00038540 	.word	0x00038540
   18e04:	00038574 	.word	0x00038574
   18e08:	0003859c 	.word	0x0003859c

00018e0c <put_le16>:
put_le16(void *buf, uint16_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   18e0c:	7001      	strb	r1, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   18e0e:	0a09      	lsrs	r1, r1, #8
   18e10:	7041      	strb	r1, [r0, #1]
}
   18e12:	4770      	bx	lr

00018e14 <put_le32>:
put_le32(void *buf, uint32_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   18e14:	7001      	strb	r1, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   18e16:	f3c1 2307 	ubfx	r3, r1, #8, #8
   18e1a:	7043      	strb	r3, [r0, #1]
    u8ptr[2] = (uint8_t)(x >> 16);
   18e1c:	f3c1 4307 	ubfx	r3, r1, #16, #8
   18e20:	7083      	strb	r3, [r0, #2]
    u8ptr[3] = (uint8_t)(x >> 24);
   18e22:	0e09      	lsrs	r1, r1, #24
   18e24:	70c1      	strb	r1, [r0, #3]
}
   18e26:	4770      	bx	lr

00018e28 <put_le64>:
put_le64(void *buf, uint64_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   18e28:	7002      	strb	r2, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   18e2a:	f3c2 2107 	ubfx	r1, r2, #8, #8
   18e2e:	7041      	strb	r1, [r0, #1]
    u8ptr[2] = (uint8_t)(x >> 16);
   18e30:	f3c2 4107 	ubfx	r1, r2, #16, #8
   18e34:	7081      	strb	r1, [r0, #2]
    u8ptr[3] = (uint8_t)(x >> 24);
   18e36:	0e12      	lsrs	r2, r2, #24
   18e38:	70c2      	strb	r2, [r0, #3]
    u8ptr[4] = (uint8_t)(x >> 32);
   18e3a:	7103      	strb	r3, [r0, #4]
    u8ptr[5] = (uint8_t)(x >> 40);
   18e3c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   18e40:	7142      	strb	r2, [r0, #5]
    u8ptr[6] = (uint8_t)(x >> 48);
   18e42:	f3c3 4207 	ubfx	r2, r3, #16, #8
   18e46:	7182      	strb	r2, [r0, #6]
    u8ptr[7] = (uint8_t)(x >> 56);
   18e48:	0e1b      	lsrs	r3, r3, #24
   18e4a:	71c3      	strb	r3, [r0, #7]
}
   18e4c:	4770      	bx	lr

00018e4e <get_le16>:
{
    const uint8_t *u8ptr;
    uint16_t x;

    u8ptr = buf;
    x = u8ptr[0];
   18e4e:	7803      	ldrb	r3, [r0, #0]
    x |= (uint16_t)u8ptr[1] << 8;
   18e50:	7840      	ldrb	r0, [r0, #1]

    return x;
}
   18e52:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   18e56:	4770      	bx	lr

00018e58 <get_le32>:
{
    const uint8_t *u8ptr;
    uint32_t x;

    u8ptr = buf;
    x = u8ptr[0];
   18e58:	7803      	ldrb	r3, [r0, #0]
    x |= (uint32_t)u8ptr[1] << 8;
   18e5a:	7842      	ldrb	r2, [r0, #1]
   18e5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    x |= (uint32_t)u8ptr[2] << 16;
   18e60:	7882      	ldrb	r2, [r0, #2]
   18e62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    x |= (uint32_t)u8ptr[3] << 24;
   18e66:	78c0      	ldrb	r0, [r0, #3]

    return x;
}
   18e68:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   18e6c:	4770      	bx	lr

00018e6e <get_le64>:

uint64_t
get_le64(const void *buf)
{
   18e6e:	b4f0      	push	{r4, r5, r6, r7}
    const uint8_t *u8ptr;
    uint64_t x;

    u8ptr = buf;
    x = u8ptr[0];
   18e70:	7802      	ldrb	r2, [r0, #0]
    x |= (uint64_t)u8ptr[1] << 8;
   18e72:	7844      	ldrb	r4, [r0, #1]
   18e74:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
    x |= (uint64_t)u8ptr[2] << 16;
   18e78:	7884      	ldrb	r4, [r0, #2]
   18e7a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    x |= (uint64_t)u8ptr[3] << 24;
   18e7e:	78c6      	ldrb	r6, [r0, #3]
    x |= (uint64_t)u8ptr[4] << 32;
   18e80:	7903      	ldrb	r3, [r0, #4]
    x |= (uint64_t)u8ptr[5] << 40;
   18e82:	7944      	ldrb	r4, [r0, #5]
   18e84:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    x |= (uint64_t)u8ptr[6] << 48;
   18e88:	7984      	ldrb	r4, [r0, #6]
   18e8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    x |= (uint64_t)u8ptr[7] << 56;
   18e8e:	79c4      	ldrb	r4, [r0, #7]

    return x;
}
   18e90:	ea42 6006 	orr.w	r0, r2, r6, lsl #24
   18e94:	ea43 6104 	orr.w	r1, r3, r4, lsl #24
   18e98:	bcf0      	pop	{r4, r5, r6, r7}
   18e9a:	4770      	bx	lr

00018e9c <swap_in_place>:
    int i;
    int j;

    u8ptr = buf;

    for (i = 0, j = len - 1; i < j; i++, j--) {
   18e9c:	3901      	subs	r1, #1
   18e9e:	2300      	movs	r3, #0
   18ea0:	428b      	cmp	r3, r1
   18ea2:	da0a      	bge.n	18eba <swap_in_place+0x1e>
{
   18ea4:	b410      	push	{r4}
        tmp = u8ptr[i];
   18ea6:	5cc2      	ldrb	r2, [r0, r3]

        u8ptr[i] = u8ptr[j];
   18ea8:	5c44      	ldrb	r4, [r0, r1]
   18eaa:	54c4      	strb	r4, [r0, r3]
        u8ptr[j] = tmp;
   18eac:	5442      	strb	r2, [r0, r1]
    for (i = 0, j = len - 1; i < j; i++, j--) {
   18eae:	3301      	adds	r3, #1
   18eb0:	3901      	subs	r1, #1
   18eb2:	428b      	cmp	r3, r1
   18eb4:	dbf7      	blt.n	18ea6 <swap_in_place+0xa>
    }
}
   18eb6:	bc10      	pop	{r4}
   18eb8:	4770      	bx	lr
   18eba:	4770      	bx	lr

00018ebc <swap_buf>:
void
swap_buf(uint8_t *dst, const uint8_t *src, int len)
{
    int i;

    for (i = 0; i < len; i++) {
   18ebc:	2300      	movs	r3, #0
   18ebe:	4293      	cmp	r3, r2
   18ec0:	da09      	bge.n	18ed6 <swap_buf+0x1a>
{
   18ec2:	b430      	push	{r4, r5}
        dst[len - 1 - i] = src[i];
   18ec4:	1e54      	subs	r4, r2, #1
   18ec6:	1ae4      	subs	r4, r4, r3
   18ec8:	5ccd      	ldrb	r5, [r1, r3]
   18eca:	5505      	strb	r5, [r0, r4]
    for (i = 0; i < len; i++) {
   18ecc:	3301      	adds	r3, #1
   18ece:	4293      	cmp	r3, r2
   18ed0:	dbf8      	blt.n	18ec4 <swap_buf+0x8>
    }
}
   18ed2:	bc30      	pop	{r4, r5}
   18ed4:	4770      	bx	lr
   18ed6:	4770      	bx	lr

00018ed8 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   18ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    hal_watchdog_tickle();
   18eda:	f01a fd87 	bl	339ec <hal_watchdog_tickle>
    sanity_last = 0;
   18ede:	2600      	movs	r6, #0
   18ee0:	e00e      	b.n	18f00 <os_idle_task+0x28>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   18ee2:	f001 f8fb 	bl	1a0dc <os_sanity_run>
#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   18ee6:	f01a fd81 	bl	339ec <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
            sanity_last = now;
   18eea:	4626      	mov	r6, r4
   18eec:	e014      	b.n	18f18 <os_idle_task+0x40>
         * happens on next interval in case it was already performed on current
         * tick.
         */
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
        if ((int)sanity_to_next <= 0) {
            sanity_to_next += sanity_itvl_ticks;
   18eee:	f500 60f0 	add.w	r0, r0, #1920	; 0x780
   18ef2:	e025      	b.n	18f40 <os_idle_task+0x68>
        }
        iticks = min(iticks, sanity_to_next);

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   18ef4:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   18ef6:	f01a fb31 	bl	3355c <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   18efa:	4628      	mov	r0, r5
   18efc:	f001 fcda 	bl	1a8b4 <os_arch_restore_sr>
        ++g_os_idle_ctr;
   18f00:	4a15      	ldr	r2, [pc, #84]	; (18f58 <os_idle_task+0x80>)
   18f02:	6813      	ldr	r3, [r2, #0]
   18f04:	3301      	adds	r3, #1
   18f06:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   18f08:	f001 fb9e 	bl	1a648 <os_time_get>
   18f0c:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
   18f0e:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
   18f12:	1ac3      	subs	r3, r0, r3
   18f14:	2b00      	cmp	r3, #0
   18f16:	dae4      	bge.n	18ee2 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   18f18:	f001 fcc6 	bl	1a8a8 <os_arch_save_sr>
   18f1c:	4605      	mov	r5, r0
        now = os_time_get();
   18f1e:	f001 fb93 	bl	1a648 <os_time_get>
   18f22:	4607      	mov	r7, r0
        sticks = os_sched_wakeup_ticks(now);
   18f24:	f001 fa1c 	bl	1a360 <os_sched_wakeup_ticks>
   18f28:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   18f2a:	4638      	mov	r0, r7
   18f2c:	f000 f9b6 	bl	1929c <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   18f30:	4284      	cmp	r4, r0
   18f32:	bf28      	it	cs
   18f34:	4604      	movcs	r4, r0
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
   18f36:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
   18f3a:	1bd8      	subs	r0, r3, r7
        if ((int)sanity_to_next <= 0) {
   18f3c:	2800      	cmp	r0, #0
   18f3e:	ddd6      	ble.n	18eee <os_idle_task+0x16>
        iticks = min(iticks, sanity_to_next);
   18f40:	42a0      	cmp	r0, r4
   18f42:	bf28      	it	cs
   18f44:	4620      	movcs	r0, r4
        if (iticks < MIN_IDLE_TICKS) {
   18f46:	280b      	cmp	r0, #11
   18f48:	d9d4      	bls.n	18ef4 <os_idle_task+0x1c>
        } else if (iticks > MAX_IDLE_TICKS) {
   18f4a:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   18f4e:	d9d2      	bls.n	18ef6 <os_idle_task+0x1e>
            iticks = MAX_IDLE_TICKS;
   18f50:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   18f54:	e7cf      	b.n	18ef6 <os_idle_task+0x1e>
   18f56:	bf00      	nop
   18f58:	100022b0 	.word	0x100022b0

00018f5c <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   18f5c:	b508      	push	{r3, lr}
   18f5e:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   18f60:	2100      	movs	r1, #0
   18f62:	4608      	mov	r0, r1
   18f64:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   18f66:	f7fb fbc5 	bl	146f4 <hal_debugger_connected>
   18f6a:	b100      	cbz	r0, 18f6e <os_main+0x12>
   18f6c:	be01      	bkpt	0x0001
   18f6e:	2300      	movs	r3, #0
   18f70:	461a      	mov	r2, r3
   18f72:	4619      	mov	r1, r3
   18f74:	4618      	mov	r0, r3
   18f76:	f7ff fedb 	bl	18d30 <__assert_func>
	...

00018f7c <os_started>:
}
   18f7c:	4b01      	ldr	r3, [pc, #4]	; (18f84 <os_started+0x8>)
   18f7e:	6818      	ldr	r0, [r3, #0]
   18f80:	4770      	bx	lr
   18f82:	bf00      	nop
   18f84:	10002b08 	.word	0x10002b08

00018f88 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   18f88:	b500      	push	{lr}
   18f8a:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   18f8c:	2340      	movs	r3, #64	; 0x40
   18f8e:	9303      	str	r3, [sp, #12]
   18f90:	4b1b      	ldr	r3, [pc, #108]	; (19000 <os_init_idle_task+0x78>)
   18f92:	9302      	str	r3, [sp, #8]
   18f94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18f98:	9301      	str	r3, [sp, #4]
   18f9a:	23ff      	movs	r3, #255	; 0xff
   18f9c:	9300      	str	r3, [sp, #0]
   18f9e:	2300      	movs	r3, #0
   18fa0:	4a18      	ldr	r2, [pc, #96]	; (19004 <os_init_idle_task+0x7c>)
   18fa2:	4919      	ldr	r1, [pc, #100]	; (19008 <os_init_idle_task+0x80>)
   18fa4:	4819      	ldr	r0, [pc, #100]	; (1900c <os_init_idle_task+0x84>)
   18fa6:	f001 fa3f 	bl	1a428 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   18faa:	b950      	cbnz	r0, 18fc2 <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   18fac:	f001 f8d8 	bl	1a160 <os_sanity_init>
    assert(rc == 0);
   18fb0:	b988      	cbnz	r0, 18fd6 <os_init_idle_task+0x4e>

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   18fb2:	f247 5030 	movw	r0, #30000	; 0x7530
   18fb6:	f01a fd16 	bl	339e6 <hal_watchdog_init>
    assert(rc == 0);
   18fba:	b9b0      	cbnz	r0, 18fea <os_init_idle_task+0x62>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
}
   18fbc:	b005      	add	sp, #20
   18fbe:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   18fc2:	f7fb fb97 	bl	146f4 <hal_debugger_connected>
   18fc6:	b100      	cbz	r0, 18fca <os_init_idle_task+0x42>
   18fc8:	be01      	bkpt	0x0001
   18fca:	2300      	movs	r3, #0
   18fcc:	461a      	mov	r2, r3
   18fce:	4619      	mov	r1, r3
   18fd0:	4618      	mov	r0, r3
   18fd2:	f7ff fead 	bl	18d30 <__assert_func>
    assert(rc == 0);
   18fd6:	f7fb fb8d 	bl	146f4 <hal_debugger_connected>
   18fda:	b100      	cbz	r0, 18fde <os_init_idle_task+0x56>
   18fdc:	be01      	bkpt	0x0001
   18fde:	2300      	movs	r3, #0
   18fe0:	461a      	mov	r2, r3
   18fe2:	4619      	mov	r1, r3
   18fe4:	4618      	mov	r0, r3
   18fe6:	f7ff fea3 	bl	18d30 <__assert_func>
    assert(rc == 0);
   18fea:	f7fb fb83 	bl	146f4 <hal_debugger_connected>
   18fee:	b100      	cbz	r0, 18ff2 <os_init_idle_task+0x6a>
   18ff0:	be01      	bkpt	0x0001
   18ff2:	2300      	movs	r3, #0
   18ff4:	461a      	mov	r2, r3
   18ff6:	4619      	mov	r1, r3
   18ff8:	4618      	mov	r0, r3
   18ffa:	f7ff fe99 	bl	18d30 <__assert_func>
   18ffe:	bf00      	nop
   19000:	100021b0 	.word	0x100021b0
   19004:	00018ed9 	.word	0x00018ed9
   19008:	000385b8 	.word	0x000385b8
   1900c:	10002160 	.word	0x10002160

00019010 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   19010:	b510      	push	{r4, lr}
   19012:	b084      	sub	sp, #16
   19014:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   19016:	4b2e      	ldr	r3, [pc, #184]	; (190d0 <os_init+0xc0>)
   19018:	2200      	movs	r2, #0
   1901a:	601a      	str	r2, [r3, #0]
   1901c:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   1901e:	4b2d      	ldr	r3, [pc, #180]	; (190d4 <os_init+0xc4>)
   19020:	601a      	str	r2, [r3, #0]
   19022:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   19024:	f000 fa90 	bl	19548 <os_eventq_dflt_get>
   19028:	f000 f9c8 	bl	193bc <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   1902c:	f000 f9ae 	bl	1938c <os_dev_reset>

    err = os_arch_os_init();
   19030:	f001 fc76 	bl	1a920 <os_arch_os_init>
    assert(err == OS_OK);
   19034:	bb18      	cbnz	r0, 1907e <os_init+0x6e>

    if (main_fn) {
   19036:	b194      	cbz	r4, 1905e <os_init+0x4e>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   19038:	f44f 7300 	mov.w	r3, #512	; 0x200
   1903c:	9303      	str	r3, [sp, #12]
   1903e:	4b26      	ldr	r3, [pc, #152]	; (190d8 <os_init+0xc8>)
   19040:	9302      	str	r3, [sp, #8]
   19042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19046:	9301      	str	r3, [sp, #4]
   19048:	237f      	movs	r3, #127	; 0x7f
   1904a:	9300      	str	r3, [sp, #0]
   1904c:	4623      	mov	r3, r4
   1904e:	4a23      	ldr	r2, [pc, #140]	; (190dc <os_init+0xcc>)
   19050:	4923      	ldr	r1, [pc, #140]	; (190e0 <os_init+0xd0>)
   19052:	4824      	ldr	r0, [pc, #144]	; (190e4 <os_init+0xd4>)
   19054:	f001 f9e8 	bl	1a428 <os_task_init>
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   19058:	f010 0fff 	tst.w	r0, #255	; 0xff
   1905c:	d119      	bne.n	19092 <os_init+0x82>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   1905e:	f01a f961 	bl	33324 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   19062:	2001      	movs	r0, #1
   19064:	f000 f94a 	bl	192fc <os_dev_initialize_all>
    assert(err == OS_OK);
   19068:	f010 0fff 	tst.w	r0, #255	; 0xff
   1906c:	d11b      	bne.n	190a6 <os_init+0x96>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   1906e:	2002      	movs	r0, #2
   19070:	f000 f944 	bl	192fc <os_dev_initialize_all>
    assert(err == OS_OK);
   19074:	f010 0fff 	tst.w	r0, #255	; 0xff
   19078:	d11f      	bne.n	190ba <os_init+0xaa>
}
   1907a:	b004      	add	sp, #16
   1907c:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   1907e:	f7fb fb39 	bl	146f4 <hal_debugger_connected>
   19082:	b100      	cbz	r0, 19086 <os_init+0x76>
   19084:	be01      	bkpt	0x0001
   19086:	2300      	movs	r3, #0
   19088:	461a      	mov	r2, r3
   1908a:	4619      	mov	r1, r3
   1908c:	4618      	mov	r0, r3
   1908e:	f7ff fe4f 	bl	18d30 <__assert_func>
        assert(err == 0);
   19092:	f7fb fb2f 	bl	146f4 <hal_debugger_connected>
   19096:	b100      	cbz	r0, 1909a <os_init+0x8a>
   19098:	be01      	bkpt	0x0001
   1909a:	2300      	movs	r3, #0
   1909c:	461a      	mov	r2, r3
   1909e:	4619      	mov	r1, r3
   190a0:	4618      	mov	r0, r3
   190a2:	f7ff fe45 	bl	18d30 <__assert_func>
    assert(err == OS_OK);
   190a6:	f7fb fb25 	bl	146f4 <hal_debugger_connected>
   190aa:	b100      	cbz	r0, 190ae <os_init+0x9e>
   190ac:	be01      	bkpt	0x0001
   190ae:	2300      	movs	r3, #0
   190b0:	461a      	mov	r2, r3
   190b2:	4619      	mov	r1, r3
   190b4:	4618      	mov	r0, r3
   190b6:	f7ff fe3b 	bl	18d30 <__assert_func>
    assert(err == OS_OK);
   190ba:	f7fb fb1b 	bl	146f4 <hal_debugger_connected>
   190be:	b100      	cbz	r0, 190c2 <os_init+0xb2>
   190c0:	be01      	bkpt	0x0001
   190c2:	2300      	movs	r3, #0
   190c4:	461a      	mov	r2, r3
   190c6:	4619      	mov	r1, r3
   190c8:	4618      	mov	r0, r3
   190ca:	f7ff fe31 	bl	18d30 <__assert_func>
   190ce:	bf00      	nop
   190d0:	10002b0c 	.word	0x10002b0c
   190d4:	10003924 	.word	0x10003924
   190d8:	100022b8 	.word	0x100022b8
   190dc:	00018f5d 	.word	0x00018f5d
   190e0:	000385c0 	.word	0x000385c0
   190e4:	10002ab8 	.word	0x10002ab8

000190e8 <os_start>:

void
os_start(void)
{
   190e8:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   190ea:	f01a fc7e 	bl	339ea <hal_watchdog_enable>
#endif

    err = os_arch_os_start();
   190ee:	f001 fc77 	bl	1a9e0 <os_arch_os_start>
    assert(err == OS_OK);
   190f2:	b900      	cbnz	r0, 190f6 <os_start+0xe>
#else
    assert(0);
#endif
}
   190f4:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   190f6:	f7fb fafd 	bl	146f4 <hal_debugger_connected>
   190fa:	b100      	cbz	r0, 190fe <os_start+0x16>
   190fc:	be01      	bkpt	0x0001
   190fe:	2300      	movs	r3, #0
   19100:	461a      	mov	r2, r3
   19102:	4619      	mov	r1, r3
   19104:	4618      	mov	r0, r3
   19106:	f7ff fe13 	bl	18d30 <__assert_func>

0001910a <os_reboot>:

void
os_reboot(int reason)
{
   1910a:	b508      	push	{r3, lr}
    sysdown(reason);
   1910c:	f004 ff4a 	bl	1dfa4 <sysdown>
}
   19110:	bd08      	pop	{r3, pc}

00019112 <os_system_reset>:

void
os_system_reset(void)
{
   19112:	b508      	push	{r3, lr}
#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    /* Tickle watchdog just before re-entering bootloader.  Depending on what
     * the system has been doing lately, the watchdog timer might be close to
     * firing.
     */
    hal_watchdog_tickle();
   19114:	f01a fc6a 	bl	339ec <hal_watchdog_tickle>
#endif
    hal_system_reset();
   19118:	f7fb faf4 	bl	14704 <hal_system_reset>

0001911c <os_pkg_init>:
}

void
os_pkg_init(void)
{
   1911c:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1911e:	4b11      	ldr	r3, [pc, #68]	; (19164 <os_pkg_init+0x48>)
   19120:	781b      	ldrb	r3, [r3, #0]
   19122:	b153      	cbz	r3, 1913a <os_pkg_init+0x1e>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   19124:	2003      	movs	r0, #3
   19126:	f000 f8e9 	bl	192fc <os_dev_initialize_all>
    assert(err == OS_OK);
   1912a:	f010 0fff 	tst.w	r0, #255	; 0xff
   1912e:	d10e      	bne.n	1914e <os_pkg_init+0x32>

    os_mempool_module_init();
   19130:	f000 fee6 	bl	19f00 <os_mempool_module_init>
    os_msys_init();
   19134:	f000 ff82 	bl	1a03c <os_msys_init>
}
   19138:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1913a:	f7fb fadb 	bl	146f4 <hal_debugger_connected>
   1913e:	b100      	cbz	r0, 19142 <os_pkg_init+0x26>
   19140:	be01      	bkpt	0x0001
   19142:	2300      	movs	r3, #0
   19144:	461a      	mov	r2, r3
   19146:	4619      	mov	r1, r3
   19148:	4618      	mov	r0, r3
   1914a:	f7ff fdf1 	bl	18d30 <__assert_func>
    assert(err == OS_OK);
   1914e:	f7fb fad1 	bl	146f4 <hal_debugger_connected>
   19152:	b100      	cbz	r0, 19156 <os_pkg_init+0x3a>
   19154:	be01      	bkpt	0x0001
   19156:	2300      	movs	r3, #0
   19158:	461a      	mov	r2, r3
   1915a:	4619      	mov	r1, r3
   1915c:	4618      	mov	r0, r3
   1915e:	f7ff fde7 	bl	18d30 <__assert_func>
   19162:	bf00      	nop
   19164:	10003fd8 	.word	0x10003fd8

00019168 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
   19168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1916a:	4604      	mov	r4, r0
   1916c:	460d      	mov	r5, r1
   1916e:	4617      	mov	r7, r2
   19170:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
   19172:	2220      	movs	r2, #32
   19174:	2100      	movs	r1, #0
   19176:	f001 fd90 	bl	1ac9a <memset>
    c->c_ev.ev_cb = ev_cb;
   1917a:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
   1917c:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
   1917e:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
   19180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00019184 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
   19184:	b538      	push	{r3, r4, r5, lr}
   19186:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
   19188:	f001 fb8e 	bl	1a8a8 <os_arch_save_sr>
   1918c:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
   1918e:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
   19190:	b13b      	cbz	r3, 191a2 <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   19192:	69a2      	ldr	r2, [r4, #24]
   19194:	b172      	cbz	r2, 191b4 <os_callout_stop+0x30>
   19196:	61d3      	str	r3, [r2, #28]
   19198:	69e3      	ldr	r3, [r4, #28]
   1919a:	69a2      	ldr	r2, [r4, #24]
   1919c:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
   1919e:	2300      	movs	r3, #0
   191a0:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
   191a2:	6920      	ldr	r0, [r4, #16]
   191a4:	b110      	cbz	r0, 191ac <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
   191a6:	4621      	mov	r1, r4
   191a8:	f000 f9ac 	bl	19504 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
   191ac:	4628      	mov	r0, r5
   191ae:	f001 fb81 	bl	1a8b4 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
   191b2:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   191b4:	4a01      	ldr	r2, [pc, #4]	; (191bc <os_callout_stop+0x38>)
   191b6:	6053      	str	r3, [r2, #4]
   191b8:	e7ee      	b.n	19198 <os_callout_stop+0x14>
   191ba:	bf00      	nop
   191bc:	10002b0c 	.word	0x10002b0c

000191c0 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
   191c0:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
   191c2:	6903      	ldr	r3, [r0, #16]
   191c4:	b1c3      	cbz	r3, 191f8 <os_callout_reset+0x38>
   191c6:	4604      	mov	r4, r0
   191c8:	460e      	mov	r6, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
   191ca:	2900      	cmp	r1, #0
   191cc:	db34      	blt.n	19238 <os_callout_reset+0x78>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
   191ce:	f001 fb6b 	bl	1a8a8 <os_arch_save_sr>
   191d2:	4605      	mov	r5, r0

    os_callout_stop(c);
   191d4:	4620      	mov	r0, r4
   191d6:	f7ff ffd5 	bl	19184 <os_callout_stop>

    if (ticks == 0) {
   191da:	b906      	cbnz	r6, 191de <os_callout_reset+0x1e>
        ticks = 1;
   191dc:	2601      	movs	r6, #1
    }

    c->c_ticks = os_time_get() + ticks;
   191de:	f001 fa33 	bl	1a648 <os_time_get>
   191e2:	4430      	add	r0, r6
   191e4:	6160      	str	r0, [r4, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   191e6:	4b15      	ldr	r3, [pc, #84]	; (1923c <os_callout_reset+0x7c>)
   191e8:	681b      	ldr	r3, [r3, #0]
   191ea:	b17b      	cbz	r3, 1920c <os_callout_reset+0x4c>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
   191ec:	695a      	ldr	r2, [r3, #20]
   191ee:	1a82      	subs	r2, r0, r2
   191f0:	2a00      	cmp	r2, #0
   191f2:	db0b      	blt.n	1920c <os_callout_reset+0x4c>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   191f4:	699b      	ldr	r3, [r3, #24]
   191f6:	e7f8      	b.n	191ea <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
   191f8:	f7fb fa7c 	bl	146f4 <hal_debugger_connected>
   191fc:	b100      	cbz	r0, 19200 <os_callout_reset+0x40>
   191fe:	be01      	bkpt	0x0001
   19200:	2300      	movs	r3, #0
   19202:	461a      	mov	r2, r3
   19204:	4619      	mov	r1, r3
   19206:	4618      	mov	r0, r3
   19208:	f7ff fd92 	bl	18d30 <__assert_func>
            break;
        }
    }

    if (entry) {
   1920c:	b15b      	cbz	r3, 19226 <os_callout_reset+0x66>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
   1920e:	69da      	ldr	r2, [r3, #28]
   19210:	61e2      	str	r2, [r4, #28]
   19212:	61a3      	str	r3, [r4, #24]
   19214:	69da      	ldr	r2, [r3, #28]
   19216:	6014      	str	r4, [r2, #0]
   19218:	3418      	adds	r4, #24
   1921a:	61dc      	str	r4, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
   1921c:	4628      	mov	r0, r5
   1921e:	f001 fb49 	bl	1a8b4 <os_arch_restore_sr>

    ret = OS_OK;
   19222:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
   19224:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
   19226:	2300      	movs	r3, #0
   19228:	61a3      	str	r3, [r4, #24]
   1922a:	4b04      	ldr	r3, [pc, #16]	; (1923c <os_callout_reset+0x7c>)
   1922c:	685a      	ldr	r2, [r3, #4]
   1922e:	61e2      	str	r2, [r4, #28]
   19230:	6014      	str	r4, [r2, #0]
   19232:	3418      	adds	r4, #24
   19234:	605c      	str	r4, [r3, #4]
   19236:	e7f1      	b.n	1921c <os_callout_reset+0x5c>
        ret = OS_EINVAL;
   19238:	2002      	movs	r0, #2
    return ret;
   1923a:	e7f3      	b.n	19224 <os_callout_reset+0x64>
   1923c:	10002b0c 	.word	0x10002b0c

00019240 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   19240:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   19242:	f001 fa01 	bl	1a648 <os_time_get>
   19246:	4605      	mov	r5, r0
   19248:	e00f      	b.n	1926a <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   1924a:	69e2      	ldr	r2, [r4, #28]
   1924c:	4b12      	ldr	r3, [pc, #72]	; (19298 <os_callout_tick+0x58>)
   1924e:	605a      	str	r2, [r3, #4]
   19250:	69e3      	ldr	r3, [r4, #28]
   19252:	69a2      	ldr	r2, [r4, #24]
   19254:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   19256:	2300      	movs	r3, #0
   19258:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   1925a:	f001 fb2b 	bl	1a8b4 <os_arch_restore_sr>

        if (c) {
   1925e:	b1d4      	cbz	r4, 19296 <os_callout_tick+0x56>
            if (c->c_evq) {
   19260:	6920      	ldr	r0, [r4, #16]
   19262:	b1a0      	cbz	r0, 1928e <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
   19264:	4621      	mov	r1, r4
   19266:	f000 f8b6 	bl	193d6 <os_eventq_put>
        OS_ENTER_CRITICAL(sr);
   1926a:	f001 fb1d 	bl	1a8a8 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   1926e:	4b0a      	ldr	r3, [pc, #40]	; (19298 <os_callout_tick+0x58>)
   19270:	681c      	ldr	r4, [r3, #0]
        if (c) {
   19272:	2c00      	cmp	r4, #0
   19274:	d0f1      	beq.n	1925a <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   19276:	6963      	ldr	r3, [r4, #20]
   19278:	1aeb      	subs	r3, r5, r3
   1927a:	2b00      	cmp	r3, #0
   1927c:	db05      	blt.n	1928a <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   1927e:	69a3      	ldr	r3, [r4, #24]
   19280:	2b00      	cmp	r3, #0
   19282:	d0e2      	beq.n	1924a <os_callout_tick+0xa>
   19284:	69e2      	ldr	r2, [r4, #28]
   19286:	61da      	str	r2, [r3, #28]
   19288:	e7e2      	b.n	19250 <os_callout_tick+0x10>
                c = NULL;
   1928a:	2400      	movs	r4, #0
   1928c:	e7e5      	b.n	1925a <os_callout_tick+0x1a>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   1928e:	6863      	ldr	r3, [r4, #4]
   19290:	4620      	mov	r0, r4
   19292:	4798      	blx	r3
   19294:	e7e9      	b.n	1926a <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   19296:	bd38      	pop	{r3, r4, r5, pc}
   19298:	10002b0c 	.word	0x10002b0c

0001929c <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   1929c:	b510      	push	{r4, lr}
   1929e:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   192a0:	f001 fb0b 	bl	1a8ba <os_arch_in_critical>
   192a4:	b130      	cbz	r0, 192b4 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   192a6:	4b0b      	ldr	r3, [pc, #44]	; (192d4 <os_callout_wakeup_ticks+0x38>)
   192a8:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   192aa:	b17b      	cbz	r3, 192cc <os_callout_wakeup_ticks+0x30>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   192ac:	6958      	ldr	r0, [r3, #20]
   192ae:	1b00      	subs	r0, r0, r4
   192b0:	d40a      	bmi.n	192c8 <os_callout_wakeup_ticks+0x2c>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   192b2:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   192b4:	f7fb fa1e 	bl	146f4 <hal_debugger_connected>
   192b8:	b100      	cbz	r0, 192bc <os_callout_wakeup_ticks+0x20>
   192ba:	be01      	bkpt	0x0001
   192bc:	2300      	movs	r3, #0
   192be:	461a      	mov	r2, r3
   192c0:	4619      	mov	r1, r3
   192c2:	4618      	mov	r0, r3
   192c4:	f7ff fd34 	bl	18d30 <__assert_func>
            rt = 0;     /* callout time is in the past */
   192c8:	2000      	movs	r0, #0
   192ca:	e7f2      	b.n	192b2 <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   192cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   192d0:	e7ef      	b.n	192b2 <os_callout_wakeup_ticks+0x16>
   192d2:	bf00      	nop
   192d4:	10002b0c 	.word	0x10002b0c

000192d8 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   192d8:	b510      	push	{r4, lr}
   192da:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   192dc:	6903      	ldr	r3, [r0, #16]
   192de:	6941      	ldr	r1, [r0, #20]
   192e0:	4798      	blx	r3
    if (rc != 0) {
   192e2:	b128      	cbz	r0, 192f0 <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   192e4:	7ee3      	ldrb	r3, [r4, #27]
   192e6:	f013 0f08 	tst.w	r3, #8
   192ea:	d105      	bne.n	192f8 <os_dev_initialize+0x20>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   192ec:	2000      	movs	r0, #0
   192ee:	e003      	b.n	192f8 <os_dev_initialize+0x20>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   192f0:	7ee3      	ldrb	r3, [r4, #27]
   192f2:	f043 0301 	orr.w	r3, r3, #1
   192f6:	76e3      	strb	r3, [r4, #27]
err:
    return rc;
}
   192f8:	bd10      	pop	{r4, pc}
	...

000192fc <os_dev_initialize_all>:
    return (rc);
}

int
os_dev_initialize_all(uint8_t stage)
{
   192fc:	b538      	push	{r3, r4, r5, lr}
   192fe:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   19300:	4b08      	ldr	r3, [pc, #32]	; (19324 <os_dev_initialize_all+0x28>)
   19302:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   19304:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   19306:	e000      	b.n	1930a <os_dev_initialize_all+0xe>
   19308:	6a24      	ldr	r4, [r4, #32]
   1930a:	b144      	cbz	r4, 1931e <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   1930c:	7e23      	ldrb	r3, [r4, #24]
   1930e:	42ab      	cmp	r3, r5
   19310:	d1fa      	bne.n	19308 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   19312:	4620      	mov	r0, r4
   19314:	f7ff ffe0 	bl	192d8 <os_dev_initialize>
            if (rc) {
   19318:	4602      	mov	r2, r0
   1931a:	2800      	cmp	r0, #0
   1931c:	d0f4      	beq.n	19308 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   1931e:	4610      	mov	r0, r2
   19320:	bd38      	pop	{r3, r4, r5, pc}
   19322:	bf00      	nop
   19324:	10002b14 	.word	0x10002b14

00019328 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   19328:	b538      	push	{r3, r4, r5, lr}
   1932a:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1932c:	4b05      	ldr	r3, [pc, #20]	; (19344 <os_dev_lookup+0x1c>)
   1932e:	681c      	ldr	r4, [r3, #0]
   19330:	b134      	cbz	r4, 19340 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   19332:	4629      	mov	r1, r5
   19334:	69e0      	ldr	r0, [r4, #28]
   19336:	f001 fce6 	bl	1ad06 <strcmp>
   1933a:	b108      	cbz	r0, 19340 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1933c:	6a24      	ldr	r4, [r4, #32]
   1933e:	e7f7      	b.n	19330 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   19340:	4620      	mov	r0, r4
   19342:	bd38      	pop	{r3, r4, r5, pc}
   19344:	10002b14 	.word	0x10002b14

00019348 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   19348:	b570      	push	{r4, r5, r6, lr}
   1934a:	460d      	mov	r5, r1
   1934c:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   1934e:	f7ff ffeb 	bl	19328 <os_dev_lookup>
    if (dev == NULL) {
   19352:	4604      	mov	r4, r0
   19354:	b1a0      	cbz	r0, 19380 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   19356:	7ec3      	ldrb	r3, [r0, #27]
   19358:	f013 0f01 	tst.w	r3, #1
   1935c:	d012      	beq.n	19384 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   1935e:	6803      	ldr	r3, [r0, #0]
   19360:	b11b      	cbz	r3, 1936a <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   19362:	4632      	mov	r2, r6
   19364:	4629      	mov	r1, r5
   19366:	4798      	blx	r3
        if (rc != 0) {
   19368:	b970      	cbnz	r0, 19388 <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   1936a:	f001 fa9d 	bl	1a8a8 <os_arch_save_sr>
    ++dev->od_open_ref;
   1936e:	7ea3      	ldrb	r3, [r4, #26]
   19370:	3301      	adds	r3, #1
   19372:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   19374:	7ee3      	ldrb	r3, [r4, #27]
   19376:	f043 0302 	orr.w	r3, r3, #2
   1937a:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   1937c:	f001 fa9a 	bl	1a8b4 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   19380:	4620      	mov	r0, r4
   19382:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   19384:	2400      	movs	r4, #0
   19386:	e7fb      	b.n	19380 <os_dev_open+0x38>
    return (NULL);
   19388:	2400      	movs	r4, #0
   1938a:	e7f9      	b.n	19380 <os_dev_open+0x38>

0001938c <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   1938c:	4b02      	ldr	r3, [pc, #8]	; (19398 <os_dev_reset+0xc>)
   1938e:	2200      	movs	r2, #0
   19390:	601a      	str	r2, [r3, #0]
   19392:	605b      	str	r3, [r3, #4]
}
   19394:	4770      	bx	lr
   19396:	bf00      	nop
   19398:	10002b14 	.word	0x10002b14

0001939c <os_dev_walk>:

void
os_dev_walk(int (*walk_func)(struct os_dev *, void *), void *arg)
{
   1939c:	b570      	push	{r4, r5, r6, lr}
   1939e:	4606      	mov	r6, r0
   193a0:	460d      	mov	r5, r1
    struct os_dev *dev;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   193a2:	4b05      	ldr	r3, [pc, #20]	; (193b8 <os_dev_walk+0x1c>)
   193a4:	681c      	ldr	r4, [r3, #0]
   193a6:	b12c      	cbz	r4, 193b4 <os_dev_walk+0x18>
        if (walk_func(dev, arg)) {
   193a8:	4629      	mov	r1, r5
   193aa:	4620      	mov	r0, r4
   193ac:	47b0      	blx	r6
   193ae:	b908      	cbnz	r0, 193b4 <os_dev_walk+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   193b0:	6a24      	ldr	r4, [r4, #32]
   193b2:	e7f8      	b.n	193a6 <os_dev_walk+0xa>
            break;
        }
    }
}
   193b4:	bd70      	pop	{r4, r5, r6, pc}
   193b6:	bf00      	nop
   193b8:	10002b14 	.word	0x10002b14

000193bc <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   193bc:	2200      	movs	r2, #0
   193be:	6002      	str	r2, [r0, #0]
   193c0:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   193c2:	4603      	mov	r3, r0
   193c4:	f843 2f08 	str.w	r2, [r3, #8]!
   193c8:	60c3      	str	r3, [r0, #12]
}
   193ca:	4770      	bx	lr

000193cc <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   193cc:	68c0      	ldr	r0, [r0, #12]
}
   193ce:	3800      	subs	r0, #0
   193d0:	bf18      	it	ne
   193d2:	2001      	movne	r0, #1
   193d4:	4770      	bx	lr

000193d6 <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   193d6:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   193d8:	b1f0      	cbz	r0, 19418 <os_eventq_put+0x42>
   193da:	460c      	mov	r4, r1
   193dc:	4606      	mov	r6, r0
   193de:	f7ff fff5 	bl	193cc <os_eventq_inited>
   193e2:	b1c8      	cbz	r0, 19418 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   193e4:	f001 fa60 	bl	1a8a8 <os_arch_save_sr>
   193e8:	4605      	mov	r5, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   193ea:	7823      	ldrb	r3, [r4, #0]
   193ec:	b9f3      	cbnz	r3, 1942c <os_eventq_put+0x56>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   193ee:	2301      	movs	r3, #1
   193f0:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   193f2:	2300      	movs	r3, #0
   193f4:	60e3      	str	r3, [r4, #12]
   193f6:	68f3      	ldr	r3, [r6, #12]
   193f8:	601c      	str	r4, [r3, #0]
   193fa:	340c      	adds	r4, #12
   193fc:	60f4      	str	r4, [r6, #12]

    resched = 0;
    if (evq->evq_task) {
   193fe:	6870      	ldr	r0, [r6, #4]
   19400:	b1d8      	cbz	r0, 1943a <os_eventq_put+0x64>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   19402:	7b03      	ldrb	r3, [r0, #12]
   19404:	2b02      	cmp	r3, #2
   19406:	d014      	beq.n	19432 <os_eventq_put+0x5c>
    resched = 0;
   19408:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   1940a:	2300      	movs	r3, #0
   1940c:	6073      	str	r3, [r6, #4]
    }

    OS_EXIT_CRITICAL(sr);
   1940e:	4628      	mov	r0, r5
   19410:	f001 fa50 	bl	1a8b4 <os_arch_restore_sr>

    if (resched) {
   19414:	b99c      	cbnz	r4, 1943e <os_eventq_put+0x68>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   19416:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   19418:	f7fb f96c 	bl	146f4 <hal_debugger_connected>
   1941c:	b100      	cbz	r0, 19420 <os_eventq_put+0x4a>
   1941e:	be01      	bkpt	0x0001
   19420:	2300      	movs	r3, #0
   19422:	461a      	mov	r2, r3
   19424:	4619      	mov	r1, r3
   19426:	4618      	mov	r0, r3
   19428:	f7ff fc82 	bl	18d30 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   1942c:	f001 fa42 	bl	1a8b4 <os_arch_restore_sr>
        return;
   19430:	e7f1      	b.n	19416 <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   19432:	f000 ff33 	bl	1a29c <os_sched_wakeup>
            resched = 1;
   19436:	2401      	movs	r4, #1
   19438:	e7e7      	b.n	1940a <os_eventq_put+0x34>
    resched = 0;
   1943a:	2400      	movs	r4, #0
   1943c:	e7e7      	b.n	1940e <os_eventq_put+0x38>
        os_sched(NULL);
   1943e:	2000      	movs	r0, #0
   19440:	f000 ffb8 	bl	1a3b4 <os_sched>
   19444:	e7e7      	b.n	19416 <os_eventq_put+0x40>

00019446 <os_eventq_get_no_wait>:

struct os_event *
os_eventq_get_no_wait(struct os_eventq *evq)
{
   19446:	4603      	mov	r3, r0
    struct os_event *ev;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)evq);

    ev = STAILQ_FIRST(&evq->evq_list);
   19448:	6880      	ldr	r0, [r0, #8]
    if (ev) {
   1944a:	b120      	cbz	r0, 19456 <os_eventq_get_no_wait+0x10>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1944c:	68c2      	ldr	r2, [r0, #12]
   1944e:	609a      	str	r2, [r3, #8]
   19450:	b112      	cbz	r2, 19458 <os_eventq_get_no_wait+0x12>
        ev->ev_queued = 0;
   19452:	2300      	movs	r3, #0
   19454:	7003      	strb	r3, [r0, #0]
    }

    os_trace_api_ret_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)ev);

    return ev;
}
   19456:	4770      	bx	lr
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   19458:	f103 0208 	add.w	r2, r3, #8
   1945c:	60da      	str	r2, [r3, #12]
   1945e:	e7f8      	b.n	19452 <os_eventq_get_no_wait+0xc>

00019460 <os_eventq_get>:

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
   19460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19462:	4606      	mov	r6, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
   19464:	f000 fec6 	bl	1a1f4 <os_sched_get_current_task>
   19468:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
   1946a:	6833      	ldr	r3, [r6, #0]
   1946c:	4283      	cmp	r3, r0
   1946e:	d001      	beq.n	19474 <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
   19470:	b9db      	cbnz	r3, 194aa <os_eventq_get+0x4a>
            evq->evq_owner = t;
   19472:	6030      	str	r0, [r6, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
   19474:	f001 fa18 	bl	1a8a8 <os_arch_save_sr>
   19478:	4605      	mov	r5, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
   1947a:	68b7      	ldr	r7, [r6, #8]
    if (ev) {
   1947c:	b9ff      	cbnz	r7, 194be <os_eventq_get+0x5e>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
   1947e:	6074      	str	r4, [r6, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
   19480:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19484:	4620      	mov	r0, r4
   19486:	f000 fec1 	bl	1a20c <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
   1948a:	7b63      	ldrb	r3, [r4, #13]
   1948c:	f043 0308 	orr.w	r3, r3, #8
   19490:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
   19492:	4628      	mov	r0, r5
   19494:	f001 fa0e 	bl	1a8b4 <os_arch_restore_sr>

        os_sched(NULL);
   19498:	2000      	movs	r0, #0
   1949a:	f000 ff8b 	bl	1a3b4 <os_sched>

        OS_ENTER_CRITICAL(sr);
   1949e:	f001 fa03 	bl	1a8a8 <os_arch_save_sr>
   194a2:	4605      	mov	r5, r0
        evq->evq_task = NULL;
   194a4:	2300      	movs	r3, #0
   194a6:	6073      	str	r3, [r6, #4]
        goto pull_one;
   194a8:	e7e7      	b.n	1947a <os_eventq_get+0x1a>
            assert(0);
   194aa:	f7fb f923 	bl	146f4 <hal_debugger_connected>
   194ae:	b100      	cbz	r0, 194b2 <os_eventq_get+0x52>
   194b0:	be01      	bkpt	0x0001
   194b2:	2300      	movs	r3, #0
   194b4:	461a      	mov	r2, r3
   194b6:	4619      	mov	r1, r3
   194b8:	4618      	mov	r0, r3
   194ba:	f7ff fc39 	bl	18d30 <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   194be:	68fb      	ldr	r3, [r7, #12]
   194c0:	60b3      	str	r3, [r6, #8]
   194c2:	b153      	cbz	r3, 194da <os_eventq_get+0x7a>
        ev->ev_queued = 0;
   194c4:	2300      	movs	r3, #0
   194c6:	703b      	strb	r3, [r7, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
   194c8:	7b63      	ldrb	r3, [r4, #13]
   194ca:	f023 0308 	bic.w	r3, r3, #8
   194ce:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
   194d0:	4628      	mov	r0, r5
   194d2:	f001 f9ef 	bl	1a8b4 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
   194d6:	4638      	mov	r0, r7
   194d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   194da:	f106 0308 	add.w	r3, r6, #8
   194de:	60f3      	str	r3, [r6, #12]
   194e0:	e7f0      	b.n	194c4 <os_eventq_get+0x64>

000194e2 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
   194e2:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
   194e4:	f7ff ffbc 	bl	19460 <os_eventq_get>
    assert(ev->ev_cb != NULL);
   194e8:	6843      	ldr	r3, [r0, #4]
   194ea:	b10b      	cbz	r3, 194f0 <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
   194ec:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
   194ee:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
   194f0:	f7fb f900 	bl	146f4 <hal_debugger_connected>
   194f4:	b100      	cbz	r0, 194f8 <os_eventq_run+0x16>
   194f6:	be01      	bkpt	0x0001
   194f8:	2300      	movs	r3, #0
   194fa:	461a      	mov	r2, r3
   194fc:	4619      	mov	r1, r3
   194fe:	4618      	mov	r0, r3
   19500:	f7ff fc16 	bl	18d30 <__assert_func>

00019504 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
   19504:	b538      	push	{r3, r4, r5, lr}
   19506:	4605      	mov	r5, r0
   19508:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   1950a:	f001 f9cd 	bl	1a8a8 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
   1950e:	7823      	ldrb	r3, [r4, #0]
   19510:	b14b      	cbz	r3, 19526 <os_eventq_remove+0x22>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   19512:	68ab      	ldr	r3, [r5, #8]
   19514:	42a3      	cmp	r3, r4
   19516:	d00b      	beq.n	19530 <os_eventq_remove+0x2c>
   19518:	461a      	mov	r2, r3
   1951a:	68db      	ldr	r3, [r3, #12]
   1951c:	42a3      	cmp	r3, r4
   1951e:	d1fb      	bne.n	19518 <os_eventq_remove+0x14>
   19520:	68db      	ldr	r3, [r3, #12]
   19522:	60d3      	str	r3, [r2, #12]
   19524:	b163      	cbz	r3, 19540 <os_eventq_remove+0x3c>
    }
    ev->ev_queued = 0;
   19526:	2300      	movs	r3, #0
   19528:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
   1952a:	f001 f9c3 	bl	1a8b4 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
   1952e:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   19530:	68db      	ldr	r3, [r3, #12]
   19532:	60ab      	str	r3, [r5, #8]
   19534:	2b00      	cmp	r3, #0
   19536:	d1f6      	bne.n	19526 <os_eventq_remove+0x22>
   19538:	f105 0308 	add.w	r3, r5, #8
   1953c:	60eb      	str	r3, [r5, #12]
   1953e:	e7f2      	b.n	19526 <os_eventq_remove+0x22>
   19540:	320c      	adds	r2, #12
   19542:	60ea      	str	r2, [r5, #12]
   19544:	e7ef      	b.n	19526 <os_eventq_remove+0x22>
	...

00019548 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   19548:	4800      	ldr	r0, [pc, #0]	; (1954c <os_eventq_dflt_get+0x4>)
   1954a:	4770      	bx	lr
   1954c:	10002b1c 	.word	0x10002b1c

00019550 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   19550:	3a10      	subs	r2, #16
   19552:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   19554:	6041      	str	r1, [r0, #4]

    return (0);
}
   19556:	2000      	movs	r0, #0
   19558:	4770      	bx	lr

0001955a <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
   1955a:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
   1955c:	8803      	ldrh	r3, [r0, #0]
   1955e:	428b      	cmp	r3, r1
   19560:	d310      	bcc.n	19584 <os_mbuf_get+0x2a>
   19562:	4604      	mov	r4, r0
   19564:	460d      	mov	r5, r1
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
   19566:	6840      	ldr	r0, [r0, #4]
   19568:	f000 fc70 	bl	19e4c <os_memblock_get>
    if (!om) {
   1956c:	b148      	cbz	r0, 19582 <os_mbuf_get+0x28>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
   1956e:	2300      	movs	r3, #0
   19570:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
   19572:	7103      	strb	r3, [r0, #4]
    om->om_pkthdr_len = 0;
   19574:	7143      	strb	r3, [r0, #5]
    om->om_len = 0;
   19576:	80c3      	strh	r3, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   19578:	f100 0110 	add.w	r1, r0, #16
   1957c:	440d      	add	r5, r1
   1957e:	6005      	str	r5, [r0, #0]
    om->om_omp = omp;
   19580:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
   19582:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   19584:	2000      	movs	r0, #0
    return om;
   19586:	e7fc      	b.n	19582 <os_mbuf_get+0x28>

00019588 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   19588:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
   1958a:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   1958e:	8803      	ldrh	r3, [r0, #0]
   19590:	42ab      	cmp	r3, r5
   19592:	d30e      	bcc.n	195b2 <os_mbuf_get_pkthdr+0x2a>
   19594:	2dff      	cmp	r5, #255	; 0xff
   19596:	d80e      	bhi.n	195b6 <os_mbuf_get_pkthdr+0x2e>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
   19598:	2100      	movs	r1, #0
   1959a:	f7ff ffde 	bl	1955a <os_mbuf_get>
    if (om) {
   1959e:	b138      	cbz	r0, 195b0 <os_mbuf_get_pkthdr+0x28>
        om->om_pkthdr_len = pkthdr_len;
   195a0:	7145      	strb	r5, [r0, #5]
        om->om_data += pkthdr_len;
   195a2:	6803      	ldr	r3, [r0, #0]
   195a4:	441d      	add	r5, r3
   195a6:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   195a8:	2300      	movs	r3, #0
   195aa:	8203      	strh	r3, [r0, #16]
        pkthdr->omp_flags = 0;
   195ac:	8243      	strh	r3, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   195ae:	6143      	str	r3, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
   195b0:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   195b2:	2000      	movs	r0, #0
   195b4:	e7fc      	b.n	195b0 <os_mbuf_get_pkthdr+0x28>
   195b6:	2000      	movs	r0, #0
    return om;
   195b8:	e7fa      	b.n	195b0 <os_mbuf_get_pkthdr+0x28>

000195ba <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
   195ba:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
   195bc:	6883      	ldr	r3, [r0, #8]
   195be:	b123      	cbz	r3, 195ca <os_mbuf_free+0x10>
   195c0:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
   195c2:	6858      	ldr	r0, [r3, #4]
   195c4:	f000 fc6a 	bl	19e9c <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
   195c8:	bd08      	pop	{r3, pc}
    rc = 0;
   195ca:	2000      	movs	r0, #0
    return (rc);
   195cc:	e7fc      	b.n	195c8 <os_mbuf_free+0xe>

000195ce <os_mbuf_free_chain>:
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
   195ce:	b158      	cbz	r0, 195e8 <os_mbuf_free_chain+0x1a>
{
   195d0:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   195d2:	68c4      	ldr	r4, [r0, #12]

        rc = os_mbuf_free(om);
   195d4:	f7ff fff1 	bl	195ba <os_mbuf_free>
        if (rc != 0) {
   195d8:	4603      	mov	r3, r0
   195da:	b918      	cbnz	r0, 195e4 <os_mbuf_free_chain+0x16>
            goto done;
        }

        om = next;
   195dc:	4620      	mov	r0, r4
    while (om != NULL) {
   195de:	2c00      	cmp	r4, #0
   195e0:	d1f7      	bne.n	195d2 <os_mbuf_free_chain+0x4>
    }

    rc = 0;
   195e2:	2300      	movs	r3, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
   195e4:	4618      	mov	r0, r3
   195e6:	bd10      	pop	{r4, pc}
    rc = 0;
   195e8:	2300      	movs	r3, #0
}
   195ea:	4618      	mov	r0, r3
   195ec:	4770      	bx	lr

000195ee <os_mbuf_append>:
    return len;
}

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
   195ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   195f2:	2800      	cmp	r0, #0
   195f4:	d04b      	beq.n	1968e <os_mbuf_append+0xa0>
   195f6:	460f      	mov	r7, r1
   195f8:	4691      	mov	r9, r2
   195fa:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   195fc:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   19600:	4603      	mov	r3, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   19602:	461e      	mov	r6, r3
   19604:	68db      	ldr	r3, [r3, #12]
   19606:	2b00      	cmp	r3, #0
   19608:	d1fb      	bne.n	19602 <os_mbuf_append+0x14>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
   1960a:	464d      	mov	r5, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
   1960c:	68b3      	ldr	r3, [r6, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1960e:	f106 0410 	add.w	r4, r6, #16
   19612:	881b      	ldrh	r3, [r3, #0]
   19614:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   19616:	6830      	ldr	r0, [r6, #0]
   19618:	88f3      	ldrh	r3, [r6, #6]
   1961a:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1961c:	1a24      	subs	r4, r4, r0
   1961e:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   19620:	b164      	cbz	r4, 1963c <os_mbuf_append+0x4e>
        if (space > remainder) {
   19622:	454c      	cmp	r4, r9
   19624:	dd00      	ble.n	19628 <os_mbuf_append+0x3a>
            space = remainder;
   19626:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   19628:	4622      	mov	r2, r4
   1962a:	4639      	mov	r1, r7
   1962c:	f001 fb10 	bl	1ac50 <memcpy>

        last->om_len += space;
   19630:	88f3      	ldrh	r3, [r6, #6]
   19632:	4423      	add	r3, r4
   19634:	80f3      	strh	r3, [r6, #6]
        data += space;
   19636:	4427      	add	r7, r4
        remainder -= space;
   19638:	eba9 0504 	sub.w	r5, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   1963c:	2d00      	cmp	r5, #0
   1963e:	dd16      	ble.n	1966e <os_mbuf_append+0x80>
        new = os_mbuf_get(omp, 0);
   19640:	2100      	movs	r1, #0
   19642:	4640      	mov	r0, r8
   19644:	f7ff ff89 	bl	1955a <os_mbuf_get>
        if (!new) {
   19648:	4604      	mov	r4, r0
   1964a:	b180      	cbz	r0, 1966e <os_mbuf_append+0x80>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
   1964c:	f8b8 2000 	ldrh.w	r2, [r8]
   19650:	42aa      	cmp	r2, r5
   19652:	bfa8      	it	ge
   19654:	462a      	movge	r2, r5
   19656:	b292      	uxth	r2, r2
   19658:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
   1965a:	4639      	mov	r1, r7
   1965c:	6800      	ldr	r0, [r0, #0]
   1965e:	f001 faf7 	bl	1ac50 <memcpy>
        data += new->om_len;
   19662:	88e3      	ldrh	r3, [r4, #6]
   19664:	441f      	add	r7, r3
        remainder -= new->om_len;
   19666:	1aed      	subs	r5, r5, r3
        SLIST_NEXT(last, om_next) = new;
   19668:	60f4      	str	r4, [r6, #12]
        last = new;
   1966a:	4626      	mov	r6, r4
   1966c:	e7e6      	b.n	1963c <os_mbuf_append+0x4e>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
   1966e:	f89a 3005 	ldrb.w	r3, [sl, #5]
   19672:	2b07      	cmp	r3, #7
   19674:	d907      	bls.n	19686 <os_mbuf_append+0x98>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
   19676:	eba9 0905 	sub.w	r9, r9, r5
   1967a:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   1967e:	fa13 f989 	uxtah	r9, r3, r9
   19682:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   19686:	b925      	cbnz	r5, 19692 <os_mbuf_append+0xa4>


    return (0);
err:
    return (rc);
}
   19688:	4628      	mov	r0, r5
   1968a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   1968e:	2502      	movs	r5, #2
   19690:	e7fa      	b.n	19688 <os_mbuf_append+0x9a>
        rc = OS_ENOMEM;
   19692:	2501      	movs	r5, #1
   19694:	e7f8      	b.n	19688 <os_mbuf_append+0x9a>

00019696 <os_mbuf_off>:

    /* Cast away const. */
    cur = (struct os_mbuf *)om;

    while (1) {
        if (cur == NULL) {
   19696:	b170      	cbz	r0, 196b6 <os_mbuf_off+0x20>
{
   19698:	b410      	push	{r4}
   1969a:	e002      	b.n	196a2 <os_mbuf_off+0xc>

            *out_off = off;
            return cur;
        }

        off -= cur->om_len;
   1969c:	1ac9      	subs	r1, r1, r3
        cur = next;
   1969e:	4620      	mov	r0, r4
        if (cur == NULL) {
   196a0:	b13c      	cbz	r4, 196b2 <os_mbuf_off+0x1c>
        next = SLIST_NEXT(cur, om_next);
   196a2:	68c4      	ldr	r4, [r0, #12]
        if (cur->om_len > off ||
   196a4:	88c3      	ldrh	r3, [r0, #6]
   196a6:	428b      	cmp	r3, r1
   196a8:	dc02      	bgt.n	196b0 <os_mbuf_off+0x1a>
   196aa:	d1f7      	bne.n	1969c <os_mbuf_off+0x6>
            (cur->om_len == off && next == NULL)) {
   196ac:	2c00      	cmp	r4, #0
   196ae:	d1f5      	bne.n	1969c <os_mbuf_off+0x6>
            *out_off = off;
   196b0:	8011      	strh	r1, [r2, #0]
    }
}
   196b2:	bc10      	pop	{r4}
   196b4:	4770      	bx	lr
   196b6:	4770      	bx	lr

000196b8 <os_mbuf_appendfrom>:
{
   196b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   196ba:	b083      	sub	sp, #12
   196bc:	4607      	mov	r7, r0
   196be:	4608      	mov	r0, r1
   196c0:	4611      	mov	r1, r2
   196c2:	461e      	mov	r6, r3
    src_cur_om = os_mbuf_off(src, src_off, &src_cur_off);
   196c4:	f10d 0206 	add.w	r2, sp, #6
   196c8:	f7ff ffe5 	bl	19696 <os_mbuf_off>
   196cc:	4605      	mov	r5, r0
    while (len > 0) {
   196ce:	e005      	b.n	196dc <os_mbuf_appendfrom+0x24>
        len -= chunk_sz;
   196d0:	1b34      	subs	r4, r6, r4
   196d2:	b2a6      	uxth	r6, r4
        src_cur_om = SLIST_NEXT(src_cur_om, om_next);
   196d4:	68ed      	ldr	r5, [r5, #12]
        src_cur_off = 0;
   196d6:	2300      	movs	r3, #0
   196d8:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (len > 0) {
   196dc:	b196      	cbz	r6, 19704 <os_mbuf_appendfrom+0x4c>
        if (src_cur_om == NULL) {
   196de:	b1ad      	cbz	r5, 1970c <os_mbuf_appendfrom+0x54>
        chunk_sz = min(len, src_cur_om->om_len - src_cur_off);
   196e0:	88ec      	ldrh	r4, [r5, #6]
   196e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   196e6:	1ae4      	subs	r4, r4, r3
   196e8:	42b4      	cmp	r4, r6
   196ea:	bfa8      	it	ge
   196ec:	4634      	movge	r4, r6
   196ee:	b2a4      	uxth	r4, r4
        rc = os_mbuf_append(dst, src_cur_om->om_data + src_cur_off, chunk_sz);
   196f0:	6829      	ldr	r1, [r5, #0]
   196f2:	4622      	mov	r2, r4
   196f4:	4419      	add	r1, r3
   196f6:	4638      	mov	r0, r7
   196f8:	f7ff ff79 	bl	195ee <os_mbuf_append>
        if (rc != 0) {
   196fc:	4603      	mov	r3, r0
   196fe:	2800      	cmp	r0, #0
   19700:	d0e6      	beq.n	196d0 <os_mbuf_appendfrom+0x18>
   19702:	e000      	b.n	19706 <os_mbuf_appendfrom+0x4e>
    return 0;
   19704:	2300      	movs	r3, #0
}
   19706:	4618      	mov	r0, r3
   19708:	b003      	add	sp, #12
   1970a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return OS_EINVAL;
   1970c:	2302      	movs	r3, #2
   1970e:	e7fa      	b.n	19706 <os_mbuf_appendfrom+0x4e>

00019710 <os_mbuf_copydata>:

int
os_mbuf_copydata(const struct os_mbuf *m, int off, int len, void *dst)
{
   19710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19712:	4604      	mov	r4, r0
   19714:	461f      	mov	r7, r3
    unsigned int count;
    uint8_t *udst;

    if (!len) {
   19716:	4616      	mov	r6, r2
   19718:	b91a      	cbnz	r2, 19722 <os_mbuf_copydata+0x12>
        return 0;
   1971a:	4610      	mov	r0, r2
   1971c:	e01e      	b.n	1975c <os_mbuf_copydata+0x4c>
            return (-1);
        }

        if (off < m->om_len)
            break;
        off -= m->om_len;
   1971e:	1a89      	subs	r1, r1, r2
        m = SLIST_NEXT(m, om_next);
   19720:	68e4      	ldr	r4, [r4, #12]
    while (off > 0) {
   19722:	2900      	cmp	r1, #0
   19724:	dd13      	ble.n	1974e <os_mbuf_copydata+0x3e>
        if (!m) {
   19726:	b1ec      	cbz	r4, 19764 <os_mbuf_copydata+0x54>
        if (off < m->om_len)
   19728:	88e2      	ldrh	r2, [r4, #6]
   1972a:	428a      	cmp	r2, r1
   1972c:	ddf7      	ble.n	1971e <os_mbuf_copydata+0xe>
   1972e:	e00e      	b.n	1974e <os_mbuf_copydata+0x3e>
    }
    while (len > 0 && m != NULL) {
        count = min(m->om_len - off, len);
   19730:	88e5      	ldrh	r5, [r4, #6]
   19732:	1a6d      	subs	r5, r5, r1
   19734:	42b5      	cmp	r5, r6
   19736:	bfa8      	it	ge
   19738:	4635      	movge	r5, r6
        memcpy(udst, m->om_data + off, count);
   1973a:	6823      	ldr	r3, [r4, #0]
   1973c:	462a      	mov	r2, r5
   1973e:	4419      	add	r1, r3
   19740:	4638      	mov	r0, r7
   19742:	f001 fa85 	bl	1ac50 <memcpy>
        len -= count;
   19746:	1b76      	subs	r6, r6, r5
        udst += count;
   19748:	442f      	add	r7, r5
        off = 0;
        m = SLIST_NEXT(m, om_next);
   1974a:	68e4      	ldr	r4, [r4, #12]
        off = 0;
   1974c:	2100      	movs	r1, #0
    while (len > 0 && m != NULL) {
   1974e:	2e00      	cmp	r6, #0
   19750:	dd01      	ble.n	19756 <os_mbuf_copydata+0x46>
   19752:	2c00      	cmp	r4, #0
   19754:	d1ec      	bne.n	19730 <os_mbuf_copydata+0x20>
    }

    return (len > 0 ? -1 : 0);
   19756:	2e00      	cmp	r6, #0
   19758:	dc01      	bgt.n	1975e <os_mbuf_copydata+0x4e>
   1975a:	2000      	movs	r0, #0
}
   1975c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (len > 0 ? -1 : 0);
   1975e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19762:	e7fb      	b.n	1975c <os_mbuf_copydata+0x4c>
            return (-1);
   19764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19768:	e7f8      	b.n	1975c <os_mbuf_copydata+0x4c>

0001976a <os_mbuf_adj>:
{
    int len = req_len;
    struct os_mbuf *m;
    int count;

    if ((m = mp) == NULL)
   1976a:	2800      	cmp	r0, #0
   1976c:	d04d      	beq.n	1980a <os_mbuf_adj+0xa0>
{
   1976e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19770:	4604      	mov	r4, r0
        return;
    if (len >= 0) {
   19772:	2900      	cmp	r1, #0
   19774:	db1b      	blt.n	197ae <os_mbuf_adj+0x44>
    if ((m = mp) == NULL)
   19776:	4603      	mov	r3, r0
    int len = req_len;
   19778:	460a      	mov	r2, r1
   1977a:	e005      	b.n	19788 <os_mbuf_adj+0x1e>
            if (m->om_len <= len) {
                len -= m->om_len;
                m->om_len = 0;
                m = SLIST_NEXT(m, om_next);
            } else {
                m->om_len -= len;
   1977c:	1a80      	subs	r0, r0, r2
   1977e:	80d8      	strh	r0, [r3, #6]
                m->om_data += len;
   19780:	6818      	ldr	r0, [r3, #0]
   19782:	4402      	add	r2, r0
   19784:	601a      	str	r2, [r3, #0]
                len = 0;
   19786:	2200      	movs	r2, #0
        while (m != NULL && len > 0) {
   19788:	b14b      	cbz	r3, 1979e <os_mbuf_adj+0x34>
   1978a:	2a00      	cmp	r2, #0
   1978c:	dd07      	ble.n	1979e <os_mbuf_adj+0x34>
            if (m->om_len <= len) {
   1978e:	88d8      	ldrh	r0, [r3, #6]
   19790:	4290      	cmp	r0, r2
   19792:	dcf3      	bgt.n	1977c <os_mbuf_adj+0x12>
                len -= m->om_len;
   19794:	1a12      	subs	r2, r2, r0
                m->om_len = 0;
   19796:	2000      	movs	r0, #0
   19798:	80d8      	strh	r0, [r3, #6]
                m = SLIST_NEXT(m, om_next);
   1979a:	68db      	ldr	r3, [r3, #12]
   1979c:	e7f4      	b.n	19788 <os_mbuf_adj+0x1e>
            }
        }
        if (OS_MBUF_IS_PKTHDR(mp))
   1979e:	7963      	ldrb	r3, [r4, #5]
   197a0:	2b07      	cmp	r3, #7
   197a2:	d903      	bls.n	197ac <os_mbuf_adj+0x42>
            OS_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
   197a4:	1a52      	subs	r2, r2, r1
   197a6:	8a23      	ldrh	r3, [r4, #16]
   197a8:	441a      	add	r2, r3
   197aa:	8222      	strh	r2, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
   197ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        len = -len;
   197ae:	424f      	negs	r7, r1
    if ((m = mp) == NULL)
   197b0:	4603      	mov	r3, r0
        count = 0;
   197b2:	2200      	movs	r2, #0
            count += m->om_len;
   197b4:	88d8      	ldrh	r0, [r3, #6]
   197b6:	4402      	add	r2, r0
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
   197b8:	461e      	mov	r6, r3
   197ba:	68db      	ldr	r3, [r3, #12]
   197bc:	2b00      	cmp	r3, #0
   197be:	d1f9      	bne.n	197b4 <os_mbuf_adj+0x4a>
        if (m->om_len >= len) {
   197c0:	42b8      	cmp	r0, r7
   197c2:	da0d      	bge.n	197e0 <os_mbuf_adj+0x76>
        if (count < 0)
   197c4:	188a      	adds	r2, r1, r2
   197c6:	d415      	bmi.n	197f4 <os_mbuf_adj+0x8a>
        if (OS_MBUF_IS_PKTHDR(m))
   197c8:	7963      	ldrb	r3, [r4, #5]
   197ca:	2b07      	cmp	r3, #7
   197cc:	d900      	bls.n	197d0 <os_mbuf_adj+0x66>
            OS_MBUF_PKTHDR(m)->omp_len = count;
   197ce:	8222      	strh	r2, [r4, #16]
        for (; m; m = SLIST_NEXT(m, om_next)) {
   197d0:	2c00      	cmp	r4, #0
   197d2:	d0eb      	beq.n	197ac <os_mbuf_adj+0x42>
            if (m->om_len >= count) {
   197d4:	88e3      	ldrh	r3, [r4, #6]
   197d6:	4293      	cmp	r3, r2
   197d8:	da0e      	bge.n	197f8 <os_mbuf_adj+0x8e>
            count -= m->om_len;
   197da:	1ad2      	subs	r2, r2, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
   197dc:	68e4      	ldr	r4, [r4, #12]
   197de:	e7f7      	b.n	197d0 <os_mbuf_adj+0x66>
            m->om_len -= len;
   197e0:	b2bf      	uxth	r7, r7
   197e2:	1bc0      	subs	r0, r0, r7
   197e4:	80f0      	strh	r0, [r6, #6]
            if (OS_MBUF_IS_PKTHDR(mp))
   197e6:	7963      	ldrb	r3, [r4, #5]
   197e8:	2b07      	cmp	r3, #7
   197ea:	d9df      	bls.n	197ac <os_mbuf_adj+0x42>
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
   197ec:	8a23      	ldrh	r3, [r4, #16]
   197ee:	1bdf      	subs	r7, r3, r7
   197f0:	8227      	strh	r7, [r4, #16]
            return;
   197f2:	e7db      	b.n	197ac <os_mbuf_adj+0x42>
            count = 0;
   197f4:	2200      	movs	r2, #0
   197f6:	e7e7      	b.n	197c8 <os_mbuf_adj+0x5e>
                m->om_len = count;
   197f8:	80e2      	strh	r2, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
   197fa:	68e0      	ldr	r0, [r4, #12]
   197fc:	2800      	cmp	r0, #0
   197fe:	d0d5      	beq.n	197ac <os_mbuf_adj+0x42>
                    os_mbuf_free_chain(SLIST_NEXT(m, om_next));
   19800:	f7ff fee5 	bl	195ce <os_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
   19804:	2300      	movs	r3, #0
   19806:	60e3      	str	r3, [r4, #12]
   19808:	e7d0      	b.n	197ac <os_mbuf_adj+0x42>
   1980a:	4770      	bx	lr

0001980c <os_mbuf_cmpf>:

int
os_mbuf_cmpf(const struct os_mbuf *om, int off, const void *data, int len)
{
   1980c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19810:	b082      	sub	sp, #8
    uint16_t chunk_sz;
    uint16_t data_off;
    uint16_t om_off;
    int rc;

    if (len <= 0) {
   19812:	1e1e      	subs	r6, r3, #0
   19814:	dd2d      	ble.n	19872 <os_mbuf_cmpf+0x66>
   19816:	4617      	mov	r7, r2
        return 0;
    }

    data_off = 0;
    om = os_mbuf_off(om, off, &om_off);
   19818:	f10d 0206 	add.w	r2, sp, #6
   1981c:	f7ff ff3b 	bl	19696 <os_mbuf_off>
   19820:	4604      	mov	r4, r0
    data_off = 0;
   19822:	f04f 0800 	mov.w	r8, #0
   19826:	e009      	b.n	1983c <os_mbuf_cmpf+0x30>
            if (rc != 0) {
                return rc;
            }
        }

        data_off += chunk_sz;
   19828:	4445      	add	r5, r8
   1982a:	fa1f f885 	uxth.w	r8, r5
        if (data_off == len) {
   1982e:	45b0      	cmp	r8, r6
   19830:	d027      	beq.n	19882 <os_mbuf_cmpf+0x76>
            return 0;
        }

        om = SLIST_NEXT(om, om_next);
   19832:	68e4      	ldr	r4, [r4, #12]
        om_off = 0;
   19834:	2300      	movs	r3, #0
   19836:	f8ad 3006 	strh.w	r3, [sp, #6]

        if (om == NULL) {
   1983a:	b1bc      	cbz	r4, 1986c <os_mbuf_cmpf+0x60>
        if (om == NULL) {
   1983c:	b1f4      	cbz	r4, 1987c <os_mbuf_cmpf+0x70>
        chunk_sz = min(om->om_len - om_off, len - data_off);
   1983e:	eba6 0208 	sub.w	r2, r6, r8
   19842:	88e3      	ldrh	r3, [r4, #6]
   19844:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   19848:	1a1b      	subs	r3, r3, r0
   1984a:	429a      	cmp	r2, r3
   1984c:	bfa8      	it	ge
   1984e:	461a      	movge	r2, r3
   19850:	b295      	uxth	r5, r2
        if (chunk_sz > 0) {
   19852:	2d00      	cmp	r5, #0
   19854:	d0e8      	beq.n	19828 <os_mbuf_cmpf+0x1c>
            rc = memcmp(om->om_data + om_off, data + data_off, chunk_sz);
   19856:	6823      	ldr	r3, [r4, #0]
   19858:	462a      	mov	r2, r5
   1985a:	eb07 0108 	add.w	r1, r7, r8
   1985e:	4418      	add	r0, r3
   19860:	f001 f9d2 	bl	1ac08 <memcmp>
            if (rc != 0) {
   19864:	4603      	mov	r3, r0
   19866:	2800      	cmp	r0, #0
   19868:	d0de      	beq.n	19828 <os_mbuf_cmpf+0x1c>
   1986a:	e003      	b.n	19874 <os_mbuf_cmpf+0x68>
            return INT_MAX;
   1986c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   19870:	e000      	b.n	19874 <os_mbuf_cmpf+0x68>
        return 0;
   19872:	2300      	movs	r3, #0
        }
    }
}
   19874:	4618      	mov	r0, r3
   19876:	b002      	add	sp, #8
   19878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return INT_MAX;
   1987c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   19880:	e7f8      	b.n	19874 <os_mbuf_cmpf+0x68>
            return 0;
   19882:	2300      	movs	r3, #0
   19884:	e7f6      	b.n	19874 <os_mbuf_cmpf+0x68>

00019886 <os_mbuf_cmpm>:

int
os_mbuf_cmpm(const struct os_mbuf *om1, uint16_t offset1,
             const struct os_mbuf *om2, uint16_t offset2,
             uint16_t len)
{
   19886:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1988a:	b083      	sub	sp, #12
   1988c:	4615      	mov	r5, r2
   1988e:	461f      	mov	r7, r3
   19890:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
    uint16_t om2_left;
    uint16_t om1_off;
    uint16_t om2_off;
    int rc;

    om1_off = 0;
   19894:	2300      	movs	r3, #0
   19896:	f8ad 3006 	strh.w	r3, [sp, #6]
    om2_off = 0;
   1989a:	f8ad 3004 	strh.w	r3, [sp, #4]

    cur1 = os_mbuf_off(om1, offset1, &om1_off);
   1989e:	f10d 0206 	add.w	r2, sp, #6
   198a2:	f7ff fef8 	bl	19696 <os_mbuf_off>
   198a6:	4604      	mov	r4, r0
    cur2 = os_mbuf_off(om2, offset2, &om2_off);
   198a8:	aa01      	add	r2, sp, #4
   198aa:	4639      	mov	r1, r7
   198ac:	4628      	mov	r0, r5
   198ae:	f7ff fef2 	bl	19696 <os_mbuf_off>
   198b2:	4605      	mov	r5, r0

    bytes_remaining = len;
   198b4:	e039      	b.n	1992a <os_mbuf_cmpm+0xa4>
        if (bytes_remaining == 0) {
            return 0;
        }

        while (cur1 != NULL && om1_off >= cur1->om_len) {
            cur1 = SLIST_NEXT(cur1, om_next);
   198b6:	68e4      	ldr	r4, [r4, #12]
            om1_off = 0;
   198b8:	2300      	movs	r3, #0
   198ba:	f8ad 3006 	strh.w	r3, [sp, #6]
        while (cur1 != NULL && om1_off >= cur1->om_len) {
   198be:	b14c      	cbz	r4, 198d4 <os_mbuf_cmpm+0x4e>
   198c0:	88e2      	ldrh	r2, [r4, #6]
   198c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   198c6:	429a      	cmp	r2, r3
   198c8:	d9f5      	bls.n	198b6 <os_mbuf_cmpm+0x30>
   198ca:	e003      	b.n	198d4 <os_mbuf_cmpm+0x4e>
        }
        while (cur2 != NULL && om2_off >= cur2->om_len) {
            cur2 = SLIST_NEXT(cur2, om_next);
   198cc:	68ed      	ldr	r5, [r5, #12]
            om2_off = 0;
   198ce:	2300      	movs	r3, #0
   198d0:	f8ad 3004 	strh.w	r3, [sp, #4]
        while (cur2 != NULL && om2_off >= cur2->om_len) {
   198d4:	b125      	cbz	r5, 198e0 <os_mbuf_cmpm+0x5a>
   198d6:	88ea      	ldrh	r2, [r5, #6]
   198d8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   198dc:	429a      	cmp	r2, r3
   198de:	d9f5      	bls.n	198cc <os_mbuf_cmpm+0x46>
        }

        if (cur1 == NULL || cur2 == NULL) {
   198e0:	b354      	cbz	r4, 19938 <os_mbuf_cmpm+0xb2>
   198e2:	b365      	cbz	r5, 1993e <os_mbuf_cmpm+0xb8>
            return INT_MAX;
        }

        om1_left = cur1->om_len - om1_off;
   198e4:	88e7      	ldrh	r7, [r4, #6]
   198e6:	f8bd 8006 	ldrh.w	r8, [sp, #6]
   198ea:	eba7 0708 	sub.w	r7, r7, r8
   198ee:	b2bf      	uxth	r7, r7
        om2_left = cur2->om_len - om2_off;
   198f0:	88eb      	ldrh	r3, [r5, #6]
   198f2:	f8bd 9004 	ldrh.w	r9, [sp, #4]
   198f6:	eba3 0309 	sub.w	r3, r3, r9
   198fa:	b29b      	uxth	r3, r3
        chunk_sz = min(min(om1_left, om2_left), bytes_remaining);
   198fc:	429f      	cmp	r7, r3
   198fe:	bf28      	it	cs
   19900:	461f      	movcs	r7, r3
   19902:	42b7      	cmp	r7, r6
   19904:	bf28      	it	cs
   19906:	4637      	movcs	r7, r6

        rc = memcmp(cur1->om_data + om1_off, cur2->om_data + om2_off,
   19908:	6820      	ldr	r0, [r4, #0]
   1990a:	6829      	ldr	r1, [r5, #0]
   1990c:	463a      	mov	r2, r7
   1990e:	4449      	add	r1, r9
   19910:	4440      	add	r0, r8
   19912:	f001 f979 	bl	1ac08 <memcmp>
                    chunk_sz);
        if (rc != 0) {
   19916:	4603      	mov	r3, r0
   19918:	b950      	cbnz	r0, 19930 <os_mbuf_cmpm+0xaa>
            return rc;
        }

        om1_off += chunk_sz;
   1991a:	44b8      	add	r8, r7
   1991c:	f8ad 8006 	strh.w	r8, [sp, #6]
        om2_off += chunk_sz;
   19920:	44b9      	add	r9, r7
   19922:	f8ad 9004 	strh.w	r9, [sp, #4]
        bytes_remaining -= chunk_sz;
   19926:	1bf6      	subs	r6, r6, r7
   19928:	b2b6      	uxth	r6, r6
        if (bytes_remaining == 0) {
   1992a:	2e00      	cmp	r6, #0
   1992c:	d1c7      	bne.n	198be <os_mbuf_cmpm+0x38>
            return 0;
   1992e:	2300      	movs	r3, #0
    }
}
   19930:	4618      	mov	r0, r3
   19932:	b003      	add	sp, #12
   19934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return INT_MAX;
   19938:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1993c:	e7f8      	b.n	19930 <os_mbuf_cmpm+0xaa>
   1993e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   19942:	e7f5      	b.n	19930 <os_mbuf_cmpm+0xaa>

00019944 <os_mbuf_prepend>:

struct os_mbuf *
os_mbuf_prepend(struct os_mbuf *om, int len)
{
   19944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19946:	4604      	mov	r4, r0
   19948:	460e      	mov	r6, r1
   1994a:	e019      	b.n	19980 <os_mbuf_prepend+0x3c>
    startoff = 0;
   1994c:	2000      	movs	r0, #0
   1994e:	e01b      	b.n	19988 <os_mbuf_prepend+0x44>
        /* The current head didn't have enough space; allocate a new head. */
        if (OS_MBUF_IS_PKTHDR(om)) {
            p = os_mbuf_get_pkthdr(om->om_omp,
                om->om_pkthdr_len - sizeof (struct os_mbuf_pkthdr));
        } else {
            p = os_mbuf_get(om->om_omp, 0);
   19950:	2100      	movs	r1, #0
   19952:	68a0      	ldr	r0, [r4, #8]
   19954:	f7ff fe01 	bl	1955a <os_mbuf_get>
   19958:	4605      	mov	r5, r0
        }
        if (p == NULL) {
   1995a:	2d00      	cmp	r5, #0
   1995c:	d033      	beq.n	199c6 <os_mbuf_prepend+0x82>
            os_mbuf_free_chain(om);
            om = NULL;
            break;
        }

        if (OS_MBUF_IS_PKTHDR(om)) {
   1995e:	7963      	ldrb	r3, [r4, #5]
   19960:	2b07      	cmp	r3, #7
   19962:	d836      	bhi.n	199d2 <os_mbuf_prepend+0x8e>
    omp = om->om_omp;
   19964:	68aa      	ldr	r2, [r5, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   19966:	f105 0310 	add.w	r3, r5, #16
   1996a:	8812      	ldrh	r2, [r2, #0]
   1996c:	4413      	add	r3, r2
      (om->om_data + om->om_len);
   1996e:	6829      	ldr	r1, [r5, #0]
   19970:	88ea      	ldrh	r2, [r5, #6]
   19972:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   19974:	1a9b      	subs	r3, r3, r2
        }

        /* Move the new head's data pointer to the end so that data can be
         * prepended.
         */
        p->om_data += OS_MBUF_TRAILINGSPACE(p);
   19976:	fa11 f383 	uxtah	r3, r1, r3
   1997a:	602b      	str	r3, [r5, #0]

        SLIST_NEXT(p, om_next) = om;
   1997c:	60ec      	str	r4, [r5, #12]
        om = p;
   1997e:	462c      	mov	r4, r5
    if (OS_MBUF_IS_PKTHDR(om)) {
   19980:	7961      	ldrb	r1, [r4, #5]
   19982:	2907      	cmp	r1, #7
   19984:	d9e2      	bls.n	1994c <os_mbuf_prepend+0x8>
        startoff = om->om_pkthdr_len;
   19986:	b288      	uxth	r0, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   19988:	4623      	mov	r3, r4
   1998a:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1998e:	4403      	add	r3, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   19990:	1ad3      	subs	r3, r2, r3
    return (leadingspace);
   19992:	b29b      	uxth	r3, r3
        leading = min(len, OS_MBUF_LEADINGSPACE(om));
   19994:	429e      	cmp	r6, r3
   19996:	da00      	bge.n	1999a <os_mbuf_prepend+0x56>
   19998:	4633      	mov	r3, r6
        om->om_data -= leading;
   1999a:	1ad2      	subs	r2, r2, r3
   1999c:	6022      	str	r2, [r4, #0]
        om->om_len += leading;
   1999e:	b298      	uxth	r0, r3
   199a0:	88e2      	ldrh	r2, [r4, #6]
   199a2:	4402      	add	r2, r0
   199a4:	80e2      	strh	r2, [r4, #6]
        if (OS_MBUF_IS_PKTHDR(om)) {
   199a6:	2907      	cmp	r1, #7
   199a8:	d902      	bls.n	199b0 <os_mbuf_prepend+0x6c>
            OS_MBUF_PKTHDR(om)->omp_len += leading;
   199aa:	8a22      	ldrh	r2, [r4, #16]
   199ac:	4410      	add	r0, r2
   199ae:	8220      	strh	r0, [r4, #16]
        if (len == 0) {
   199b0:	1af6      	subs	r6, r6, r3
   199b2:	d00c      	beq.n	199ce <os_mbuf_prepend+0x8a>
        if (OS_MBUF_IS_PKTHDR(om)) {
   199b4:	2907      	cmp	r1, #7
   199b6:	d9cb      	bls.n	19950 <os_mbuf_prepend+0xc>
            p = os_mbuf_get_pkthdr(om->om_omp,
   199b8:	3908      	subs	r1, #8
   199ba:	b2c9      	uxtb	r1, r1
   199bc:	68a0      	ldr	r0, [r4, #8]
   199be:	f7ff fde3 	bl	19588 <os_mbuf_get_pkthdr>
   199c2:	4605      	mov	r5, r0
   199c4:	e7c9      	b.n	1995a <os_mbuf_prepend+0x16>
            os_mbuf_free_chain(om);
   199c6:	4620      	mov	r0, r4
   199c8:	f7ff fe01 	bl	195ce <os_mbuf_free_chain>
            om = NULL;
   199cc:	462c      	mov	r4, r5
    }

    return om;
}
   199ce:	4620      	mov	r0, r4
   199d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(new_buf->om_len == 0);
   199d2:	88eb      	ldrh	r3, [r5, #6]
   199d4:	b973      	cbnz	r3, 199f4 <os_mbuf_prepend+0xb0>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   199d6:	f105 0710 	add.w	r7, r5, #16
   199da:	7962      	ldrb	r2, [r4, #5]
   199dc:	f104 0110 	add.w	r1, r4, #16
   199e0:	4638      	mov	r0, r7
   199e2:	f001 f935 	bl	1ac50 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   199e6:	7963      	ldrb	r3, [r4, #5]
   199e8:	716b      	strb	r3, [r5, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   199ea:	441f      	add	r7, r3
   199ec:	602f      	str	r7, [r5, #0]
            om->om_pkthdr_len = 0;
   199ee:	2300      	movs	r3, #0
   199f0:	7163      	strb	r3, [r4, #5]
   199f2:	e7b7      	b.n	19964 <os_mbuf_prepend+0x20>
    assert(new_buf->om_len == 0);
   199f4:	f7fa fe7e 	bl	146f4 <hal_debugger_connected>
   199f8:	b100      	cbz	r0, 199fc <os_mbuf_prepend+0xb8>
   199fa:	be01      	bkpt	0x0001
   199fc:	2300      	movs	r3, #0
   199fe:	461a      	mov	r2, r3
   19a00:	4619      	mov	r1, r3
   19a02:	4618      	mov	r0, r3
   19a04:	f7ff f994 	bl	18d30 <__assert_func>

00019a08 <os_mbuf_copyinto>:
    return om;
}

int
os_mbuf_copyinto(struct os_mbuf *om, int off, const void *src, int len)
{
   19a08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19a0c:	b083      	sub	sp, #12
   19a0e:	4681      	mov	r9, r0
   19a10:	4688      	mov	r8, r1
   19a12:	4617      	mov	r7, r2
   19a14:	461e      	mov	r6, r3
    uint16_t cur_off;
    int copylen;
    int rc;

    /* Find the mbuf,offset pair for the start of the destination. */
    cur = os_mbuf_off(om, off, &cur_off);
   19a16:	f10d 0206 	add.w	r2, sp, #6
   19a1a:	f7ff fe3c 	bl	19696 <os_mbuf_off>
    if (cur == NULL) {
   19a1e:	4605      	mov	r5, r0
   19a20:	b948      	cbnz	r0, 19a36 <os_mbuf_copyinto+0x2e>
        return -1;
   19a22:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   19a26:	e02d      	b.n	19a84 <os_mbuf_copyinto+0x7c>
            len -= copylen;

            copylen = 0;
        }

        if (len == 0) {
   19a28:	b366      	cbz	r6, 19a84 <os_mbuf_copyinto+0x7c>
            /* All the source data fit in the existing mbuf chain. */
            return 0;
        }

        next = SLIST_NEXT(cur, om_next);
   19a2a:	68eb      	ldr	r3, [r5, #12]
        if (next == NULL) {
   19a2c:	b1ab      	cbz	r3, 19a5a <os_mbuf_copyinto+0x52>
            break;
        }

        cur = next;
        cur_off = 0;
   19a2e:	2200      	movs	r2, #0
   19a30:	f8ad 2006 	strh.w	r2, [sp, #6]
        cur = next;
   19a34:	461d      	mov	r5, r3
        copylen = min(cur->om_len - cur_off, len);
   19a36:	88ec      	ldrh	r4, [r5, #6]
   19a38:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   19a3c:	1ae4      	subs	r4, r4, r3
   19a3e:	42b4      	cmp	r4, r6
   19a40:	bfa8      	it	ge
   19a42:	4634      	movge	r4, r6
        if (copylen > 0) {
   19a44:	2c00      	cmp	r4, #0
   19a46:	ddef      	ble.n	19a28 <os_mbuf_copyinto+0x20>
            memcpy(cur->om_data + cur_off, sptr, copylen);
   19a48:	6828      	ldr	r0, [r5, #0]
   19a4a:	4622      	mov	r2, r4
   19a4c:	4639      	mov	r1, r7
   19a4e:	4418      	add	r0, r3
   19a50:	f001 f8fe 	bl	1ac50 <memcpy>
            sptr += copylen;
   19a54:	4427      	add	r7, r4
            len -= copylen;
   19a56:	1b36      	subs	r6, r6, r4
            copylen = 0;
   19a58:	e7e6      	b.n	19a28 <os_mbuf_copyinto+0x20>
    }

    /* Append the remaining data to the end of the chain. */
    rc = os_mbuf_append(cur, sptr, len);
   19a5a:	b2b2      	uxth	r2, r6
   19a5c:	4639      	mov	r1, r7
   19a5e:	4628      	mov	r0, r5
   19a60:	f7ff fdc5 	bl	195ee <os_mbuf_append>
    if (rc != 0) {
   19a64:	b968      	cbnz	r0, 19a82 <os_mbuf_copyinto+0x7a>
        return rc;
    }

    /* Fix up the packet header, if one is present. */
    if (OS_MBUF_IS_PKTHDR(om)) {
   19a66:	f899 2005 	ldrb.w	r2, [r9, #5]
   19a6a:	2a07      	cmp	r2, #7
   19a6c:	d90e      	bls.n	19a8c <os_mbuf_copyinto+0x84>
        OS_MBUF_PKTHDR(om)->omp_len =
            max(OS_MBUF_PKTHDR(om)->omp_len, off + len);
   19a6e:	4446      	add	r6, r8
   19a70:	f8b9 8010 	ldrh.w	r8, [r9, #16]
   19a74:	4546      	cmp	r6, r8
   19a76:	bfb8      	it	lt
   19a78:	4646      	movlt	r6, r8
        OS_MBUF_PKTHDR(om)->omp_len =
   19a7a:	f8a9 6010 	strh.w	r6, [r9, #16]
    }

    return 0;
   19a7e:	4606      	mov	r6, r0
   19a80:	e000      	b.n	19a84 <os_mbuf_copyinto+0x7c>
        return rc;
   19a82:	4606      	mov	r6, r0
}
   19a84:	4630      	mov	r0, r6
   19a86:	b003      	add	sp, #12
   19a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
   19a8c:	4606      	mov	r6, r0
   19a8e:	e7f9      	b.n	19a84 <os_mbuf_copyinto+0x7c>

00019a90 <os_mbuf_concat>:
{
    struct os_mbuf *next;
    struct os_mbuf *cur;

    /* Point 'cur' to the last buffer in the first chain. */
    cur = first;
   19a90:	4603      	mov	r3, r0
    while (1) {
        next = SLIST_NEXT(cur, om_next);
   19a92:	461a      	mov	r2, r3
   19a94:	68db      	ldr	r3, [r3, #12]
        if (next == NULL) {
   19a96:	2b00      	cmp	r3, #0
   19a98:	d1fb      	bne.n	19a92 <os_mbuf_concat+0x2>

        cur = next;
    }

    /* Attach the second chain to the end of the first. */
    SLIST_NEXT(cur, om_next) = second;
   19a9a:	60d1      	str	r1, [r2, #12]

    /* If the first chain has a packet header, calculate the length of the
     * second chain and add it to the header length.
     */
    if (OS_MBUF_IS_PKTHDR(first)) {
   19a9c:	7943      	ldrb	r3, [r0, #5]
   19a9e:	2b07      	cmp	r3, #7
   19aa0:	d906      	bls.n	19ab0 <os_mbuf_concat+0x20>
        if (OS_MBUF_IS_PKTHDR(second)) {
   19aa2:	794b      	ldrb	r3, [r1, #5]
   19aa4:	2b07      	cmp	r3, #7
   19aa6:	d906      	bls.n	19ab6 <os_mbuf_concat+0x26>
            OS_MBUF_PKTHDR(first)->omp_len += OS_MBUF_PKTHDR(second)->omp_len;
   19aa8:	8a0b      	ldrh	r3, [r1, #16]
   19aaa:	8a02      	ldrh	r2, [r0, #16]
   19aac:	4413      	add	r3, r2
   19aae:	8203      	strh	r3, [r0, #16]
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
            }
        }
    }

    second->om_pkthdr_len = 0;
   19ab0:	2300      	movs	r3, #0
   19ab2:	714b      	strb	r3, [r1, #5]
   19ab4:	4770      	bx	lr
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
   19ab6:	460b      	mov	r3, r1
   19ab8:	2900      	cmp	r1, #0
   19aba:	d0f9      	beq.n	19ab0 <os_mbuf_concat+0x20>
{
   19abc:	b410      	push	{r4}
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
   19abe:	88da      	ldrh	r2, [r3, #6]
   19ac0:	8a04      	ldrh	r4, [r0, #16]
   19ac2:	4422      	add	r2, r4
   19ac4:	8202      	strh	r2, [r0, #16]
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
   19ac6:	68db      	ldr	r3, [r3, #12]
   19ac8:	2b00      	cmp	r3, #0
   19aca:	d1f8      	bne.n	19abe <os_mbuf_concat+0x2e>
    second->om_pkthdr_len = 0;
   19acc:	2300      	movs	r3, #0
   19ace:	714b      	strb	r3, [r1, #5]
}
   19ad0:	bc10      	pop	{r4}
   19ad2:	4770      	bx	lr

00019ad4 <os_mbuf_extend>:

void *
os_mbuf_extend(struct os_mbuf *om, uint16_t len)
{
   19ad4:	b570      	push	{r4, r5, r6, lr}
   19ad6:	4606      	mov	r6, r0
    struct os_mbuf *newm;
    struct os_mbuf *last;
    void *data;

    if (len > om->om_omp->omp_databuf_len) {
   19ad8:	6880      	ldr	r0, [r0, #8]
   19ada:	8803      	ldrh	r3, [r0, #0]
   19adc:	428b      	cmp	r3, r1
   19ade:	d325      	bcc.n	19b2c <os_mbuf_extend+0x58>
   19ae0:	460d      	mov	r5, r1
        return NULL;
    }

    /* Scroll to last mbuf in the chain */
    last = om;
   19ae2:	4633      	mov	r3, r6
    while (SLIST_NEXT(last, om_next) != NULL) {
   19ae4:	461c      	mov	r4, r3
   19ae6:	68db      	ldr	r3, [r3, #12]
   19ae8:	2b00      	cmp	r3, #0
   19aea:	d1fb      	bne.n	19ae4 <os_mbuf_extend+0x10>
    omp = om->om_omp;
   19aec:	68a2      	ldr	r2, [r4, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   19aee:	f104 0310 	add.w	r3, r4, #16
   19af2:	8812      	ldrh	r2, [r2, #0]
   19af4:	4413      	add	r3, r2
      (om->om_data + om->om_len);
   19af6:	6822      	ldr	r2, [r4, #0]
   19af8:	88e1      	ldrh	r1, [r4, #6]
   19afa:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   19afc:	1a9b      	subs	r3, r3, r2
   19afe:	b29b      	uxth	r3, r3
        last = SLIST_NEXT(last, om_next);
    }

    if (OS_MBUF_TRAILINGSPACE(last) < len) {
   19b00:	429d      	cmp	r5, r3
   19b02:	d80b      	bhi.n	19b1c <os_mbuf_extend+0x48>

        SLIST_NEXT(last, om_next) = newm;
        last = newm;
    }

    data = last->om_data + last->om_len;
   19b04:	6820      	ldr	r0, [r4, #0]
   19b06:	88e3      	ldrh	r3, [r4, #6]
   19b08:	4418      	add	r0, r3
    last->om_len += len;
   19b0a:	442b      	add	r3, r5
   19b0c:	80e3      	strh	r3, [r4, #6]

    if (OS_MBUF_IS_PKTHDR(om)) {
   19b0e:	7973      	ldrb	r3, [r6, #5]
   19b10:	2b07      	cmp	r3, #7
   19b12:	d902      	bls.n	19b1a <os_mbuf_extend+0x46>
        OS_MBUF_PKTHDR(om)->omp_len += len;
   19b14:	8a33      	ldrh	r3, [r6, #16]
   19b16:	441d      	add	r5, r3
   19b18:	8235      	strh	r5, [r6, #16]
    }

    return data;
}
   19b1a:	bd70      	pop	{r4, r5, r6, pc}
        newm = os_mbuf_get(om->om_omp, 0);
   19b1c:	2100      	movs	r1, #0
   19b1e:	f7ff fd1c 	bl	1955a <os_mbuf_get>
        if (newm == NULL) {
   19b22:	2800      	cmp	r0, #0
   19b24:	d0f9      	beq.n	19b1a <os_mbuf_extend+0x46>
        SLIST_NEXT(last, om_next) = newm;
   19b26:	60e0      	str	r0, [r4, #12]
        last = newm;
   19b28:	4604      	mov	r4, r0
   19b2a:	e7eb      	b.n	19b04 <os_mbuf_extend+0x30>
        return NULL;
   19b2c:	2000      	movs	r0, #0
   19b2e:	e7f4      	b.n	19b1a <os_mbuf_extend+0x46>

00019b30 <os_mbuf_pullup>:


struct os_mbuf *
os_mbuf_pullup(struct os_mbuf *om, uint16_t len)
{
   19b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b34:	4604      	mov	r4, r0
    struct os_mbuf *next;
    struct os_mbuf *om2;
    int count;
    int space;

    omp = om->om_omp;
   19b36:	6880      	ldr	r0, [r0, #8]
    /*
     * If first mbuf has no cluster, and has room for len bytes
     * without shifting current data, pullup into it,
     * otherwise allocate a new mbuf to prepend to the chain.
     */
    if (om->om_len >= len) {
   19b38:	88e2      	ldrh	r2, [r4, #6]
   19b3a:	428a      	cmp	r2, r1
   19b3c:	d27a      	bcs.n	19c34 <os_mbuf_pullup+0x104>
   19b3e:	460d      	mov	r5, r1
   19b40:	f104 0310 	add.w	r3, r4, #16
   19b44:	8806      	ldrh	r6, [r0, #0]
   19b46:	4433      	add	r3, r6
      (om->om_data + om->om_len);
   19b48:	6821      	ldr	r1, [r4, #0]
   19b4a:	4411      	add	r1, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   19b4c:	1a5b      	subs	r3, r3, r1
        return (om);
    }
    if (om->om_len + OS_MBUF_TRAILINGSPACE(om) >= len &&
   19b4e:	fa12 f383 	uxtah	r3, r2, r3
   19b52:	4629      	mov	r1, r5
   19b54:	42ab      	cmp	r3, r5
   19b56:	db12      	blt.n	19b7e <os_mbuf_pullup+0x4e>
        SLIST_NEXT(om, om_next)) {
   19b58:	68e3      	ldr	r3, [r4, #12]
    if (om->om_len + OS_MBUF_TRAILINGSPACE(om) >= len &&
   19b5a:	b183      	cbz	r3, 19b7e <os_mbuf_pullup+0x4e>
        om2 = om;
        om = SLIST_NEXT(om, om_next);
        len -= om2->om_len;
   19b5c:	1aad      	subs	r5, r5, r2
   19b5e:	b2ad      	uxth	r5, r5
        om2 = om;
   19b60:	4627      	mov	r7, r4
        om = SLIST_NEXT(om, om_next);
   19b62:	461c      	mov	r4, r3
    omp = om->om_omp;
   19b64:	68bb      	ldr	r3, [r7, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   19b66:	f107 0810 	add.w	r8, r7, #16
   19b6a:	881b      	ldrh	r3, [r3, #0]
   19b6c:	4498      	add	r8, r3
      (om->om_data + om->om_len);
   19b6e:	683b      	ldr	r3, [r7, #0]
   19b70:	88fa      	ldrh	r2, [r7, #6]
   19b72:	4413      	add	r3, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   19b74:	eba8 0803 	sub.w	r8, r8, r3
   19b78:	fa1f f888 	uxth.w	r8, r8
   19b7c:	e02c      	b.n	19bd8 <os_mbuf_pullup+0xa8>
    } else {
        if (len > omp->omp_databuf_len - om->om_pkthdr_len) {
   19b7e:	7963      	ldrb	r3, [r4, #5]
   19b80:	1af6      	subs	r6, r6, r3
   19b82:	42b1      	cmp	r1, r6
   19b84:	dc51      	bgt.n	19c2a <os_mbuf_pullup+0xfa>
            goto bad;
        }

        om2 = os_mbuf_get(omp, 0);
   19b86:	2100      	movs	r1, #0
   19b88:	f7ff fce7 	bl	1955a <os_mbuf_get>
        if (om2 == NULL) {
   19b8c:	4607      	mov	r7, r0
   19b8e:	2800      	cmp	r0, #0
   19b90:	d04b      	beq.n	19c2a <os_mbuf_pullup+0xfa>
            goto bad;
        }

        if (OS_MBUF_IS_PKTHDR(om)) {
   19b92:	7963      	ldrb	r3, [r4, #5]
   19b94:	2b07      	cmp	r3, #7
   19b96:	d9e5      	bls.n	19b64 <os_mbuf_pullup+0x34>
    assert(new_buf->om_len == 0);
   19b98:	88c3      	ldrh	r3, [r0, #6]
   19b9a:	b963      	cbnz	r3, 19bb6 <os_mbuf_pullup+0x86>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   19b9c:	f100 0610 	add.w	r6, r0, #16
   19ba0:	7962      	ldrb	r2, [r4, #5]
   19ba2:	f104 0110 	add.w	r1, r4, #16
   19ba6:	4630      	mov	r0, r6
   19ba8:	f001 f852 	bl	1ac50 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   19bac:	7963      	ldrb	r3, [r4, #5]
   19bae:	717b      	strb	r3, [r7, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   19bb0:	441e      	add	r6, r3
   19bb2:	603e      	str	r6, [r7, #0]
}
   19bb4:	e7d6      	b.n	19b64 <os_mbuf_pullup+0x34>
    assert(new_buf->om_len == 0);
   19bb6:	f7fa fd9d 	bl	146f4 <hal_debugger_connected>
   19bba:	b100      	cbz	r0, 19bbe <os_mbuf_pullup+0x8e>
   19bbc:	be01      	bkpt	0x0001
   19bbe:	2300      	movs	r3, #0
   19bc0:	461a      	mov	r2, r3
   19bc2:	4619      	mov	r1, r3
   19bc4:	4618      	mov	r0, r3
   19bc6:	f7ff f8b3 	bl	18d30 <__assert_func>
        om->om_len -= count;
        space -= count;
        if (om->om_len) {
            om->om_data += count;
        } else {
            next = SLIST_NEXT(om, om_next);
   19bca:	68e6      	ldr	r6, [r4, #12]
            os_mbuf_free(om);
   19bcc:	4620      	mov	r0, r4
   19bce:	f7ff fcf4 	bl	195ba <os_mbuf_free>
            om = next;
   19bd2:	4634      	mov	r4, r6
        }
    } while (len > 0 && om);
   19bd4:	b30d      	cbz	r5, 19c1a <os_mbuf_pullup+0xea>
   19bd6:	b304      	cbz	r4, 19c1a <os_mbuf_pullup+0xea>
        count = min(min(len, space), om->om_len);
   19bd8:	88e6      	ldrh	r6, [r4, #6]
   19bda:	462b      	mov	r3, r5
   19bdc:	4545      	cmp	r5, r8
   19bde:	bfa8      	it	ge
   19be0:	4643      	movge	r3, r8
   19be2:	429e      	cmp	r6, r3
   19be4:	bfa8      	it	ge
   19be6:	461e      	movge	r6, r3
        memcpy(om2->om_data + om2->om_len, om->om_data, count);
   19be8:	6838      	ldr	r0, [r7, #0]
   19bea:	88fb      	ldrh	r3, [r7, #6]
   19bec:	4632      	mov	r2, r6
   19bee:	6821      	ldr	r1, [r4, #0]
   19bf0:	4418      	add	r0, r3
   19bf2:	f001 f82d 	bl	1ac50 <memcpy>
        len -= count;
   19bf6:	b2b2      	uxth	r2, r6
   19bf8:	1aad      	subs	r5, r5, r2
   19bfa:	b2ad      	uxth	r5, r5
        om2->om_len += count;
   19bfc:	88fb      	ldrh	r3, [r7, #6]
   19bfe:	4413      	add	r3, r2
   19c00:	80fb      	strh	r3, [r7, #6]
        om->om_len -= count;
   19c02:	88e3      	ldrh	r3, [r4, #6]
   19c04:	1a9b      	subs	r3, r3, r2
   19c06:	b29b      	uxth	r3, r3
   19c08:	80e3      	strh	r3, [r4, #6]
        space -= count;
   19c0a:	eba8 0806 	sub.w	r8, r8, r6
        if (om->om_len) {
   19c0e:	2b00      	cmp	r3, #0
   19c10:	d0db      	beq.n	19bca <os_mbuf_pullup+0x9a>
            om->om_data += count;
   19c12:	6823      	ldr	r3, [r4, #0]
   19c14:	441e      	add	r6, r3
   19c16:	6026      	str	r6, [r4, #0]
   19c18:	e7dc      	b.n	19bd4 <os_mbuf_pullup+0xa4>
    if (len > 0) {
   19c1a:	b91d      	cbnz	r5, 19c24 <os_mbuf_pullup+0xf4>
        os_mbuf_free(om2);
        goto bad;
    }
    SLIST_NEXT(om2, om_next) = om;
   19c1c:	60fc      	str	r4, [r7, #12]
    return (om2);
bad:
    os_mbuf_free_chain(om);
    return (NULL);
}
   19c1e:	4638      	mov	r0, r7
   19c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        os_mbuf_free(om2);
   19c24:	4638      	mov	r0, r7
   19c26:	f7ff fcc8 	bl	195ba <os_mbuf_free>
    os_mbuf_free_chain(om);
   19c2a:	4620      	mov	r0, r4
   19c2c:	f7ff fccf 	bl	195ce <os_mbuf_free_chain>
    return (NULL);
   19c30:	2700      	movs	r7, #0
   19c32:	e7f4      	b.n	19c1e <os_mbuf_pullup+0xee>
        return (om);
   19c34:	4627      	mov	r7, r4
   19c36:	e7f2      	b.n	19c1e <os_mbuf_pullup+0xee>

00019c38 <os_mbuf_prepend_pullup>:
{
   19c38:	b510      	push	{r4, lr}
   19c3a:	460c      	mov	r4, r1
    om = os_mbuf_prepend(om, len);
   19c3c:	f7ff fe82 	bl	19944 <os_mbuf_prepend>
    if (om == NULL) {
   19c40:	b110      	cbz	r0, 19c48 <os_mbuf_prepend_pullup+0x10>
    om = os_mbuf_pullup(om, len);
   19c42:	4621      	mov	r1, r4
   19c44:	f7ff ff74 	bl	19b30 <os_mbuf_pullup>
}
   19c48:	bd10      	pop	{r4, pc}

00019c4a <os_mbuf_trim_front>:

struct os_mbuf *
os_mbuf_trim_front(struct os_mbuf *om)
{
   19c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19c4c:	4606      	mov	r6, r0
    struct os_mbuf *next;
    struct os_mbuf *cur;

    /* Abort early if there is nothing to trim. */
    if (om->om_len != 0) {
   19c4e:	88c7      	ldrh	r7, [r0, #6]
   19c50:	b9cf      	cbnz	r7, 19c86 <os_mbuf_trim_front+0x3c>
    }

    /* Starting with the second mbuf in the chain, continue removing and
     * freeing mbufs until an non-empty one is encountered.
     */
    cur = SLIST_NEXT(om, om_next);
   19c52:	68c4      	ldr	r4, [r0, #12]
    while (cur != NULL && cur->om_len == 0) {
   19c54:	b144      	cbz	r4, 19c68 <os_mbuf_trim_front+0x1e>
   19c56:	88e3      	ldrh	r3, [r4, #6]
   19c58:	b933      	cbnz	r3, 19c68 <os_mbuf_trim_front+0x1e>
        next = SLIST_NEXT(cur, om_next);
   19c5a:	68e5      	ldr	r5, [r4, #12]

        SLIST_NEXT(om, om_next) = next;
   19c5c:	60f5      	str	r5, [r6, #12]
        os_mbuf_free(cur);
   19c5e:	4620      	mov	r0, r4
   19c60:	f7ff fcab 	bl	195ba <os_mbuf_free>

        cur = next;
   19c64:	462c      	mov	r4, r5
   19c66:	e7f5      	b.n	19c54 <os_mbuf_trim_front+0xa>
    }

    if (cur == NULL) {
   19c68:	b16c      	cbz	r4, 19c86 <os_mbuf_trim_front+0x3c>
    if (OS_MBUF_IS_PKTHDR(om)) {
   19c6a:	7963      	ldrb	r3, [r4, #5]
   19c6c:	2b07      	cmp	r3, #7
   19c6e:	d900      	bls.n	19c72 <os_mbuf_trim_front+0x28>
        startoff = om->om_pkthdr_len;
   19c70:	b29f      	uxth	r7, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   19c72:	4620      	mov	r0, r4
   19c74:	f850 3b10 	ldr.w	r3, [r0], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   19c78:	4407      	add	r7, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   19c7a:	1bdf      	subs	r7, r3, r7
   19c7c:	b2bf      	uxth	r7, r7
    }

    /* Try to remove the first mbuf in the chain.  If this buffer contains a
     * packet header, make sure the second buffer can accommodate it.
     */
    if (OS_MBUF_LEADINGSPACE(cur) >= om->om_pkthdr_len) {
   19c7e:	7972      	ldrb	r2, [r6, #5]
   19c80:	b293      	uxth	r3, r2
   19c82:	42bb      	cmp	r3, r7
   19c84:	d901      	bls.n	19c8a <os_mbuf_trim_front+0x40>
        os_mbuf_free(om);
        om = cur;
    }

    return om;
}
   19c86:	4630      	mov	r0, r6
   19c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        cur->om_pkthdr_len = om->om_pkthdr_len;
   19c8a:	7162      	strb	r2, [r4, #5]
        memcpy(OS_MBUF_PKTHDR(cur), OS_MBUF_PKTHDR(om), om->om_pkthdr_len);
   19c8c:	f106 0110 	add.w	r1, r6, #16
   19c90:	f000 ffde 	bl	1ac50 <memcpy>
        os_mbuf_free(om);
   19c94:	4630      	mov	r0, r6
   19c96:	f7ff fc90 	bl	195ba <os_mbuf_free>
        om = cur;
   19c9a:	4626      	mov	r6, r4
   19c9c:	e7f3      	b.n	19c86 <os_mbuf_trim_front+0x3c>

00019c9e <os_mbuf_pack_chains>:
    return 0;
}

struct os_mbuf *
os_mbuf_pack_chains(struct os_mbuf *m1, struct os_mbuf *m2)
{
   19c9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t *dptr;
    struct os_mbuf *cur;
    struct os_mbuf *next;

    /* If m1 is NULL, return NULL */
    if (m1 == NULL) {
   19ca2:	4681      	mov	r9, r0
   19ca4:	2800      	cmp	r0, #0
   19ca6:	d04e      	beq.n	19d46 <os_mbuf_pack_chains+0xa8>

    /*
     * Concatenate the two chains to start. This will discard packet header in
     * m2 and adjust packet length in m1 if m1 has a packet header.
     */
    if (m2 != NULL) {
   19ca8:	b109      	cbz	r1, 19cae <os_mbuf_pack_chains+0x10>
        os_mbuf_concat(m1, m2);
   19caa:	f7ff fef1 	bl	19a90 <os_mbuf_concat>
{
   19cae:	464d      	mov	r5, r9
   19cb0:	e006      	b.n	19cc0 <os_mbuf_pack_chains+0x22>
    startoff = 0;
   19cb2:	2300      	movs	r3, #0
   19cb4:	e008      	b.n	19cc8 <os_mbuf_pack_chains+0x2a>

    cur = m1;
    while (1) {
        /* If there is leading space in the mbuf, move data up */
        if (OS_MBUF_LEADINGSPACE(cur)) {
            dptr = &cur->om_databuf[0];
   19cb6:	4634      	mov	r4, r6
   19cb8:	e010      	b.n	19cdc <os_mbuf_pack_chains+0x3e>
                }
            }
        }

        /* If no mbufs are left, we are done */
        if (next == NULL) {
   19cba:	2c00      	cmp	r4, #0
   19cbc:	d043      	beq.n	19d46 <os_mbuf_pack_chains+0xa8>
            break;
        }

        /* Move cur to next as we filled up current */
        cur = next;
   19cbe:	4625      	mov	r5, r4
    if (OS_MBUF_IS_PKTHDR(om)) {
   19cc0:	796a      	ldrb	r2, [r5, #5]
   19cc2:	2a07      	cmp	r2, #7
   19cc4:	d9f5      	bls.n	19cb2 <os_mbuf_pack_chains+0x14>
        startoff = om->om_pkthdr_len;
   19cc6:	b293      	uxth	r3, r2
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   19cc8:	462e      	mov	r6, r5
   19cca:	f856 1b10 	ldr.w	r1, [r6], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   19cce:	4433      	add	r3, r6
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   19cd0:	1acb      	subs	r3, r1, r3
   19cd2:	b29b      	uxth	r3, r3
        if (OS_MBUF_LEADINGSPACE(cur)) {
   19cd4:	b13b      	cbz	r3, 19ce6 <os_mbuf_pack_chains+0x48>
            if (OS_MBUF_IS_PKTHDR(cur)) {
   19cd6:	2a07      	cmp	r2, #7
   19cd8:	d9ed      	bls.n	19cb6 <os_mbuf_pack_chains+0x18>
                dptr += cur->om_pkthdr_len;
   19cda:	18b4      	adds	r4, r6, r2
            memmove(dptr, cur->om_data, cur->om_len);
   19cdc:	88ea      	ldrh	r2, [r5, #6]
   19cde:	4620      	mov	r0, r4
   19ce0:	f000 ffc3 	bl	1ac6a <memmove>
            cur->om_data = dptr;
   19ce4:	602c      	str	r4, [r5, #0]
        dptr = cur->om_data + cur->om_len;
   19ce6:	682b      	ldr	r3, [r5, #0]
   19ce8:	f8b5 8006 	ldrh.w	r8, [r5, #6]
   19cec:	4498      	add	r8, r3
        next = SLIST_NEXT(cur, om_next);
   19cee:	68ec      	ldr	r4, [r5, #12]
    omp = om->om_omp;
   19cf0:	68ab      	ldr	r3, [r5, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   19cf2:	881f      	ldrh	r7, [r3, #0]
   19cf4:	4437      	add	r7, r6
   19cf6:	eba7 0708 	sub.w	r7, r7, r8
   19cfa:	b2bf      	uxth	r7, r7
        while (rem_len && next) {
   19cfc:	2f00      	cmp	r7, #0
   19cfe:	d0dc      	beq.n	19cba <os_mbuf_pack_chains+0x1c>
   19d00:	2c00      	cmp	r4, #0
   19d02:	d0da      	beq.n	19cba <os_mbuf_pack_chains+0x1c>
            copylen = min(rem_len, next->om_len);
   19d04:	88e6      	ldrh	r6, [r4, #6]
   19d06:	42be      	cmp	r6, r7
   19d08:	bf28      	it	cs
   19d0a:	463e      	movcs	r6, r7
            memcpy(dptr, next->om_data, copylen);
   19d0c:	4632      	mov	r2, r6
   19d0e:	6821      	ldr	r1, [r4, #0]
   19d10:	4640      	mov	r0, r8
   19d12:	f000 ff9d 	bl	1ac50 <memcpy>
            cur->om_len += copylen;
   19d16:	88eb      	ldrh	r3, [r5, #6]
   19d18:	4433      	add	r3, r6
   19d1a:	80eb      	strh	r3, [r5, #6]
            dptr += copylen;
   19d1c:	44b0      	add	r8, r6
            rem_len -= copylen;
   19d1e:	1bbf      	subs	r7, r7, r6
   19d20:	b2bf      	uxth	r7, r7
            next->om_data += copylen;
   19d22:	6823      	ldr	r3, [r4, #0]
   19d24:	4433      	add	r3, r6
   19d26:	6023      	str	r3, [r4, #0]
            next->om_len -= copylen;
   19d28:	88e3      	ldrh	r3, [r4, #6]
   19d2a:	1b9e      	subs	r6, r3, r6
   19d2c:	80e6      	strh	r6, [r4, #6]
            while (next->om_len == 0) {
   19d2e:	88e3      	ldrh	r3, [r4, #6]
   19d30:	2b00      	cmp	r3, #0
   19d32:	d1e3      	bne.n	19cfc <os_mbuf_pack_chains+0x5e>
                SLIST_NEXT(cur, om_next) = SLIST_NEXT(next, om_next);
   19d34:	68e3      	ldr	r3, [r4, #12]
   19d36:	60eb      	str	r3, [r5, #12]
                os_mbuf_free(next);
   19d38:	4620      	mov	r0, r4
   19d3a:	f7ff fc3e 	bl	195ba <os_mbuf_free>
                next = SLIST_NEXT(cur, om_next);
   19d3e:	68ec      	ldr	r4, [r5, #12]
                if (next == NULL) {
   19d40:	2c00      	cmp	r4, #0
   19d42:	d1f4      	bne.n	19d2e <os_mbuf_pack_chains+0x90>
   19d44:	e7da      	b.n	19cfc <os_mbuf_pack_chains+0x5e>
    }

    return m1;
}
   19d46:	4648      	mov	r0, r9
   19d48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00019d4c <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   19d4c:	2800      	cmp	r0, #0
   19d4e:	d031      	beq.n	19db4 <os_mempool_init_internal+0x68>
{
   19d50:	b430      	push	{r4, r5}
   19d52:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   19d54:	2a00      	cmp	r2, #0
   19d56:	d02f      	beq.n	19db8 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   19d58:	b1bb      	cbz	r3, 19d8a <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   19d5a:	b113      	cbz	r3, 19d62 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   19d5c:	f013 0f03 	tst.w	r3, #3
   19d60:	d12c      	bne.n	19dbc <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   19d62:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   19d64:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   19d66:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   19d68:	f89d 000c 	ldrb.w	r0, [sp, #12]
   19d6c:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   19d6e:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   19d70:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   19d72:	9802      	ldr	r0, [sp, #8]
   19d74:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   19d76:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   19d78:	b199      	cbz	r1, 19da2 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   19d7a:	f012 0f03 	tst.w	r2, #3
   19d7e:	d002      	beq.n	19d86 <os_mempool_init_internal+0x3a>
   19d80:	f022 0203 	bic.w	r2, r2, #3
   19d84:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   19d86:	2001      	movs	r0, #1
   19d88:	e007      	b.n	19d9a <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   19d8a:	2900      	cmp	r1, #0
   19d8c:	d0e5      	beq.n	19d5a <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   19d8e:	2003      	movs	r0, #3
   19d90:	e00e      	b.n	19db0 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   19d92:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   19d94:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   19d96:	3001      	adds	r0, #1
            block_addr += true_block_size;
   19d98:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   19d9a:	4281      	cmp	r1, r0
   19d9c:	dcf9      	bgt.n	19d92 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   19d9e:	2200      	movs	r2, #0
   19da0:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   19da2:	2000      	movs	r0, #0
   19da4:	6120      	str	r0, [r4, #16]
   19da6:	4b06      	ldr	r3, [pc, #24]	; (19dc0 <os_mempool_init_internal+0x74>)
   19da8:	685a      	ldr	r2, [r3, #4]
   19daa:	6014      	str	r4, [r2, #0]
   19dac:	3410      	adds	r4, #16
   19dae:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   19db0:	bc30      	pop	{r4, r5}
   19db2:	4770      	bx	lr
        return OS_INVALID_PARM;
   19db4:	2003      	movs	r0, #3
}
   19db6:	4770      	bx	lr
        return OS_INVALID_PARM;
   19db8:	2003      	movs	r0, #3
   19dba:	e7f9      	b.n	19db0 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   19dbc:	2004      	movs	r0, #4
   19dbe:	e7f7      	b.n	19db0 <os_mempool_init_internal+0x64>
   19dc0:	10002b2c 	.word	0x10002b2c

00019dc4 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   19dc4:	b510      	push	{r4, lr}
   19dc6:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   19dc8:	2400      	movs	r4, #0
   19dca:	9401      	str	r4, [sp, #4]
   19dcc:	9c04      	ldr	r4, [sp, #16]
   19dce:	9400      	str	r4, [sp, #0]
   19dd0:	f7ff ffbc 	bl	19d4c <os_mempool_init_internal>
}
   19dd4:	b002      	add	sp, #8
   19dd6:	bd10      	pop	{r4, pc}

00019dd8 <os_mempool_clear>:
    struct os_memblock *block_ptr;
    int true_block_size;
    uint8_t *block_addr;
    uint16_t blocks;

    if (!mp) {
   19dd8:	4601      	mov	r1, r0
   19dda:	b1b0      	cbz	r0, 19e0a <os_mempool_clear+0x32>
        return OS_INVALID_PARM;
    }

    true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   19ddc:	6800      	ldr	r0, [r0, #0]
   19dde:	f010 0f03 	tst.w	r0, #3
   19de2:	d002      	beq.n	19dea <os_mempool_clear+0x12>
   19de4:	f020 0003 	bic.w	r0, r0, #3
   19de8:	3004      	adds	r0, #4

    /* cleanup the memory pool structure */
    mp->mp_num_free = mp->mp_num_blocks;
   19dea:	888b      	ldrh	r3, [r1, #4]
   19dec:	80cb      	strh	r3, [r1, #6]
    mp->mp_min_free = mp->mp_num_blocks;
   19dee:	810b      	strh	r3, [r1, #8]
    os_mempool_poison(mp, (void *)mp->mp_membuf_addr);
    os_mempool_guard(mp, (void *)mp->mp_membuf_addr);
    SLIST_FIRST(mp) = (void *)mp->mp_membuf_addr;
   19df0:	68ca      	ldr	r2, [r1, #12]
   19df2:	614a      	str	r2, [r1, #20]
    /* Chain the memory blocks to the free list */
    block_addr = (uint8_t *)mp->mp_membuf_addr;
    block_ptr = (struct os_memblock *)block_addr;
    blocks = mp->mp_num_blocks;

    while (blocks > 1) {
   19df4:	e004      	b.n	19e00 <os_mempool_clear+0x28>
        block_addr += true_block_size;
   19df6:	1811      	adds	r1, r2, r0
        os_mempool_poison(mp, block_addr);
        os_mempool_guard(mp, block_addr);
        SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   19df8:	6011      	str	r1, [r2, #0]
        block_ptr = (struct os_memblock *)block_addr;
        --blocks;
   19dfa:	3b01      	subs	r3, #1
   19dfc:	b29b      	uxth	r3, r3
        block_ptr = (struct os_memblock *)block_addr;
   19dfe:	460a      	mov	r2, r1
    while (blocks > 1) {
   19e00:	2b01      	cmp	r3, #1
   19e02:	d8f8      	bhi.n	19df6 <os_mempool_clear+0x1e>
    }

    /* Last one in the list should be NULL */
    SLIST_NEXT(block_ptr, mb_next) = NULL;
   19e04:	2000      	movs	r0, #0
   19e06:	6010      	str	r0, [r2, #0]

    return OS_OK;
   19e08:	4770      	bx	lr
        return OS_INVALID_PARM;
   19e0a:	2003      	movs	r0, #3
}
   19e0c:	4770      	bx	lr

00019e0e <os_memblock_from>:
    return true;
}

int
os_memblock_from(const struct os_mempool *mp, const void *block_addr)
{
   19e0e:	b410      	push	{r4}

    static_assert(sizeof block_addr == sizeof baddr32,
                  "Pointer to void must be 32-bits.");

    baddr32 = (uint32_t)block_addr;
    true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   19e10:	6803      	ldr	r3, [r0, #0]
   19e12:	f013 0f03 	tst.w	r3, #3
   19e16:	d002      	beq.n	19e1e <os_memblock_from+0x10>
   19e18:	f023 0303 	bic.w	r3, r3, #3
   19e1c:	3304      	adds	r3, #4
    end = mp->mp_membuf_addr + (mp->mp_num_blocks * true_block_size);
   19e1e:	68c4      	ldr	r4, [r0, #12]
   19e20:	8882      	ldrh	r2, [r0, #4]
   19e22:	fb03 4202 	mla	r2, r3, r2, r4

    /* Check that the block is in the memory buffer range. */
    if ((baddr32 < mp->mp_membuf_addr) || (baddr32 >= end)) {
   19e26:	428c      	cmp	r4, r1
   19e28:	d809      	bhi.n	19e3e <os_memblock_from+0x30>
   19e2a:	4291      	cmp	r1, r2
   19e2c:	d20a      	bcs.n	19e44 <os_memblock_from+0x36>
        return 0;
    }

    /* All freed blocks should be on true block size boundaries! */
    if (((baddr32 - mp->mp_membuf_addr) % true_block_size) != 0) {
   19e2e:	1b09      	subs	r1, r1, r4
   19e30:	fbb1 f2f3 	udiv	r2, r1, r3
   19e34:	fb03 1112 	mls	r1, r3, r2, r1
   19e38:	b931      	cbnz	r1, 19e48 <os_memblock_from+0x3a>
        return 0;
    }

    return 1;
   19e3a:	2001      	movs	r0, #1
   19e3c:	e000      	b.n	19e40 <os_memblock_from+0x32>
        return 0;
   19e3e:	2000      	movs	r0, #0
}
   19e40:	bc10      	pop	{r4}
   19e42:	4770      	bx	lr
        return 0;
   19e44:	2000      	movs	r0, #0
   19e46:	e7fb      	b.n	19e40 <os_memblock_from+0x32>
        return 0;
   19e48:	2000      	movs	r0, #0
   19e4a:	e7f9      	b.n	19e40 <os_memblock_from+0x32>

00019e4c <os_memblock_get>:

void *
os_memblock_get(struct os_mempool *mp)
{
   19e4c:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   19e4e:	4604      	mov	r4, r0
   19e50:	b198      	cbz	r0, 19e7a <os_memblock_get+0x2e>
        OS_ENTER_CRITICAL(sr);
   19e52:	f000 fd29 	bl	1a8a8 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   19e56:	88e3      	ldrh	r3, [r4, #6]
   19e58:	b153      	cbz	r3, 19e70 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   19e5a:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   19e5c:	682a      	ldr	r2, [r5, #0]
   19e5e:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   19e60:	3b01      	subs	r3, #1
   19e62:	b29b      	uxth	r3, r3
   19e64:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   19e66:	8922      	ldrh	r2, [r4, #8]
   19e68:	4293      	cmp	r3, r2
   19e6a:	d202      	bcs.n	19e72 <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   19e6c:	8123      	strh	r3, [r4, #8]
   19e6e:	e000      	b.n	19e72 <os_memblock_get+0x26>
    block = NULL;
   19e70:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   19e72:	f000 fd1f 	bl	1a8b4 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   19e76:	4628      	mov	r0, r5
   19e78:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   19e7a:	4605      	mov	r5, r0
    return (void *)block;
   19e7c:	e7fb      	b.n	19e76 <os_memblock_get+0x2a>

00019e7e <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
   19e7e:	b538      	push	{r3, r4, r5, lr}
   19e80:	4604      	mov	r4, r0
   19e82:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
   19e84:	f000 fd10 	bl	1a8a8 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   19e88:	6963      	ldr	r3, [r4, #20]
   19e8a:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   19e8c:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   19e8e:	88e3      	ldrh	r3, [r4, #6]
   19e90:	3301      	adds	r3, #1
   19e92:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
   19e94:	f000 fd0e 	bl	1a8b4 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
   19e98:	2000      	movs	r0, #0
   19e9a:	bd38      	pop	{r3, r4, r5, pc}

00019e9c <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   19e9c:	b178      	cbz	r0, 19ebe <os_memblock_put+0x22>
   19e9e:	4603      	mov	r3, r0
   19ea0:	b179      	cbz	r1, 19ec2 <os_memblock_put+0x26>
{
   19ea2:	b510      	push	{r4, lr}
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
   19ea4:	7a82      	ldrb	r2, [r0, #10]
   19ea6:	f012 0f01 	tst.w	r2, #1
   19eaa:	d004      	beq.n	19eb6 <os_memblock_put+0x1a>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   19eac:	69c4      	ldr	r4, [r0, #28]
   19eae:	b114      	cbz	r4, 19eb6 <os_memblock_put+0x1a>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   19eb0:	6a02      	ldr	r2, [r0, #32]
   19eb2:	47a0      	blx	r4
            goto done;
   19eb4:	e002      	b.n	19ebc <os_memblock_put+0x20>
        }
    }

    /* No callback; free the block. */
    ret = os_memblock_put_from_cb(mp, block_addr);
   19eb6:	4618      	mov	r0, r3
   19eb8:	f7ff ffe1 	bl	19e7e <os_memblock_put_from_cb>

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
   19ebc:	bd10      	pop	{r4, pc}
        ret = OS_INVALID_PARM;
   19ebe:	2003      	movs	r0, #3
   19ec0:	4770      	bx	lr
   19ec2:	2003      	movs	r0, #3
}
   19ec4:	4770      	bx	lr
	...

00019ec8 <os_mempool_info_get_next>:

struct os_mempool *
os_mempool_info_get_next(struct os_mempool *mp, struct os_mempool_info *omi)
{
   19ec8:	b510      	push	{r4, lr}
    struct os_mempool *cur;

    if (mp == NULL) {
   19eca:	b198      	cbz	r0, 19ef4 <os_mempool_info_get_next+0x2c>
        cur = STAILQ_FIRST(&g_os_mempool_list);
    } else {
        cur = STAILQ_NEXT(mp, mp_list);
   19ecc:	6904      	ldr	r4, [r0, #16]
    }

    if (cur == NULL) {
   19ece:	b17c      	cbz	r4, 19ef0 <os_mempool_info_get_next+0x28>
        return (NULL);
    }

    omi->omi_block_size = cur->mp_block_size;
   19ed0:	6823      	ldr	r3, [r4, #0]
   19ed2:	600b      	str	r3, [r1, #0]
    omi->omi_num_blocks = cur->mp_num_blocks;
   19ed4:	88a3      	ldrh	r3, [r4, #4]
   19ed6:	604b      	str	r3, [r1, #4]
    omi->omi_num_free = cur->mp_num_free;
   19ed8:	88e3      	ldrh	r3, [r4, #6]
   19eda:	608b      	str	r3, [r1, #8]
    omi->omi_min_free = cur->mp_min_free;
   19edc:	8923      	ldrh	r3, [r4, #8]
   19ede:	60cb      	str	r3, [r1, #12]
    omi->omi_name[0] = '\0';
   19ee0:	4608      	mov	r0, r1
   19ee2:	2300      	movs	r3, #0
   19ee4:	f800 3f10 	strb.w	r3, [r0, #16]!
    strncat(omi->omi_name, cur->name, sizeof(omi->omi_name) - 1);
   19ee8:	221f      	movs	r2, #31
   19eea:	69a1      	ldr	r1, [r4, #24]
   19eec:	f000 ff1e 	bl	1ad2c <strncat>

    return (cur);
}
   19ef0:	4620      	mov	r0, r4
   19ef2:	bd10      	pop	{r4, pc}
        cur = STAILQ_FIRST(&g_os_mempool_list);
   19ef4:	4b01      	ldr	r3, [pc, #4]	; (19efc <os_mempool_info_get_next+0x34>)
   19ef6:	681c      	ldr	r4, [r3, #0]
   19ef8:	e7e9      	b.n	19ece <os_mempool_info_get_next+0x6>
   19efa:	bf00      	nop
   19efc:	10002b2c 	.word	0x10002b2c

00019f00 <os_mempool_module_init>:

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   19f00:	4b02      	ldr	r3, [pc, #8]	; (19f0c <os_mempool_module_init+0xc>)
   19f02:	2200      	movs	r2, #0
   19f04:	601a      	str	r2, [r3, #0]
   19f06:	605b      	str	r3, [r3, #4]
}
   19f08:	4770      	bx	lr
   19f0a:	bf00      	nop
   19f0c:	10002b2c 	.word	0x10002b2c

00019f10 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   19f10:	4b02      	ldr	r3, [pc, #8]	; (19f1c <os_msys_find_biggest_pool+0xc>)
   19f12:	6818      	ldr	r0, [r3, #0]
   19f14:	b108      	cbz	r0, 19f1a <os_msys_find_biggest_pool+0xa>
   19f16:	6858      	ldr	r0, [r3, #4]
   19f18:	3808      	subs	r0, #8
}
   19f1a:	4770      	bx	lr
   19f1c:	10000668 	.word	0x10000668

00019f20 <os_msys_find_pool>:

static struct os_mbuf_pool *
os_msys_find_pool(uint16_t dsize)
{
   19f20:	4602      	mov	r2, r0
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   19f22:	4b09      	ldr	r3, [pc, #36]	; (19f48 <os_msys_find_pool+0x28>)
   19f24:	6819      	ldr	r1, [r3, #0]
   19f26:	4608      	mov	r0, r1
   19f28:	b120      	cbz	r0, 19f34 <os_msys_find_pool+0x14>
        if (dsize <= pool->omp_databuf_len) {
   19f2a:	8803      	ldrh	r3, [r0, #0]
   19f2c:	4293      	cmp	r3, r2
   19f2e:	d201      	bcs.n	19f34 <os_msys_find_pool+0x14>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   19f30:	6880      	ldr	r0, [r0, #8]
   19f32:	e7f9      	b.n	19f28 <os_msys_find_pool+0x8>
            break;
        }
    }

    if (!pool) {
   19f34:	b100      	cbz	r0, 19f38 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
   19f36:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   19f38:	b119      	cbz	r1, 19f42 <os_msys_find_pool+0x22>
   19f3a:	4b03      	ldr	r3, [pc, #12]	; (19f48 <os_msys_find_pool+0x28>)
   19f3c:	6858      	ldr	r0, [r3, #4]
   19f3e:	3808      	subs	r0, #8
   19f40:	4770      	bx	lr
   19f42:	4608      	mov	r0, r1
    return (pool);
   19f44:	e7f7      	b.n	19f36 <os_msys_find_pool+0x16>
   19f46:	bf00      	nop
   19f48:	10000668 	.word	0x10000668

00019f4c <os_msys_register>:
{
   19f4c:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   19f4e:	4b11      	ldr	r3, [pc, #68]	; (19f94 <os_msys_register+0x48>)
   19f50:	681d      	ldr	r5, [r3, #0]
   19f52:	462b      	mov	r3, r5
    prev = NULL;
   19f54:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   19f56:	b133      	cbz	r3, 19f66 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   19f58:	8801      	ldrh	r1, [r0, #0]
   19f5a:	881a      	ldrh	r2, [r3, #0]
   19f5c:	4291      	cmp	r1, r2
   19f5e:	d302      	bcc.n	19f66 <os_msys_register+0x1a>
        prev = pool;
   19f60:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   19f62:	689b      	ldr	r3, [r3, #8]
   19f64:	e7f7      	b.n	19f56 <os_msys_register+0xa>
    if (prev) {
   19f66:	b15c      	cbz	r4, 19f80 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   19f68:	68a3      	ldr	r3, [r4, #8]
   19f6a:	6083      	str	r3, [r0, #8]
   19f6c:	b11b      	cbz	r3, 19f76 <os_msys_register+0x2a>
   19f6e:	60a0      	str	r0, [r4, #8]
}
   19f70:	2000      	movs	r0, #0
   19f72:	bc30      	pop	{r4, r5}
   19f74:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   19f76:	f100 0308 	add.w	r3, r0, #8
   19f7a:	4a06      	ldr	r2, [pc, #24]	; (19f94 <os_msys_register+0x48>)
   19f7c:	6053      	str	r3, [r2, #4]
   19f7e:	e7f6      	b.n	19f6e <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   19f80:	6085      	str	r5, [r0, #8]
   19f82:	b115      	cbz	r5, 19f8a <os_msys_register+0x3e>
   19f84:	4b03      	ldr	r3, [pc, #12]	; (19f94 <os_msys_register+0x48>)
   19f86:	6018      	str	r0, [r3, #0]
   19f88:	e7f2      	b.n	19f70 <os_msys_register+0x24>
   19f8a:	f100 0308 	add.w	r3, r0, #8
   19f8e:	4a01      	ldr	r2, [pc, #4]	; (19f94 <os_msys_register+0x48>)
   19f90:	6053      	str	r3, [r2, #4]
   19f92:	e7f7      	b.n	19f84 <os_msys_register+0x38>
   19f94:	10000668 	.word	0x10000668

00019f98 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   19f98:	b530      	push	{r4, r5, lr}
   19f9a:	b083      	sub	sp, #12
   19f9c:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   19f9e:	9d07      	ldr	r5, [sp, #28]
   19fa0:	9501      	str	r5, [sp, #4]
   19fa2:	9d06      	ldr	r5, [sp, #24]
   19fa4:	9500      	str	r5, [sp, #0]
   19fa6:	f004 fb9f 	bl	1e6e8 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   19faa:	b928      	cbnz	r0, 19fb8 <os_msys_init_once+0x20>

    rc = os_msys_register(mbuf_pool);
   19fac:	4620      	mov	r0, r4
   19fae:	f7ff ffcd 	bl	19f4c <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   19fb2:	b970      	cbnz	r0, 19fd2 <os_msys_init_once+0x3a>
}
   19fb4:	b003      	add	sp, #12
   19fb6:	bd30      	pop	{r4, r5, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
   19fb8:	f7fa fb9c 	bl	146f4 <hal_debugger_connected>
   19fbc:	b100      	cbz	r0, 19fc0 <os_msys_init_once+0x28>
   19fbe:	be01      	bkpt	0x0001
   19fc0:	2000      	movs	r0, #0
   19fc2:	9000      	str	r0, [sp, #0]
   19fc4:	4b09      	ldr	r3, [pc, #36]	; (19fec <os_msys_init_once+0x54>)
   19fc6:	681d      	ldr	r5, [r3, #0]
   19fc8:	4603      	mov	r3, r0
   19fca:	4602      	mov	r2, r0
   19fcc:	4601      	mov	r1, r0
   19fce:	47a8      	blx	r5
   19fd0:	e7ec      	b.n	19fac <os_msys_init_once+0x14>
    SYSINIT_PANIC_ASSERT(rc == 0);
   19fd2:	f7fa fb8f 	bl	146f4 <hal_debugger_connected>
   19fd6:	b100      	cbz	r0, 19fda <os_msys_init_once+0x42>
   19fd8:	be01      	bkpt	0x0001
   19fda:	2000      	movs	r0, #0
   19fdc:	9000      	str	r0, [sp, #0]
   19fde:	4b03      	ldr	r3, [pc, #12]	; (19fec <os_msys_init_once+0x54>)
   19fe0:	681c      	ldr	r4, [r3, #0]
   19fe2:	4603      	mov	r3, r0
   19fe4:	4602      	mov	r2, r0
   19fe6:	4601      	mov	r1, r0
   19fe8:	47a0      	blx	r4
}
   19fea:	e7e3      	b.n	19fb4 <os_msys_init_once+0x1c>
   19fec:	100006b4 	.word	0x100006b4

00019ff0 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   19ff0:	4b02      	ldr	r3, [pc, #8]	; (19ffc <os_msys_reset+0xc>)
   19ff2:	2200      	movs	r2, #0
   19ff4:	601a      	str	r2, [r3, #0]
   19ff6:	605b      	str	r3, [r3, #4]
}
   19ff8:	4770      	bx	lr
   19ffa:	bf00      	nop
   19ffc:	10000668 	.word	0x10000668

0001a000 <os_msys_get_pkthdr>:
{
   1a000:	b510      	push	{r4, lr}
   1a002:	460c      	mov	r4, r1
    if (dsize == 0) {
   1a004:	b930      	cbnz	r0, 1a014 <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
   1a006:	f7ff ff83 	bl	19f10 <os_msys_find_biggest_pool>
    if (!pool) {
   1a00a:	b110      	cbz	r0, 1a012 <os_msys_get_pkthdr+0x12>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
   1a00c:	b2e1      	uxtb	r1, r4
   1a00e:	f7ff fabb 	bl	19588 <os_mbuf_get_pkthdr>
}
   1a012:	bd10      	pop	{r4, pc}
   1a014:	f101 0308 	add.w	r3, r1, #8
   1a018:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
   1a01a:	4403      	add	r3, r0
   1a01c:	b298      	uxth	r0, r3
   1a01e:	f7ff ff7f 	bl	19f20 <os_msys_find_pool>
   1a022:	e7f2      	b.n	1a00a <os_msys_get_pkthdr+0xa>

0001a024 <os_msys_num_free>:
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
   1a024:	4b04      	ldr	r3, [pc, #16]	; (1a038 <os_msys_num_free+0x14>)
   1a026:	681b      	ldr	r3, [r3, #0]
    total = 0;
   1a028:	2000      	movs	r0, #0
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
   1a02a:	b123      	cbz	r3, 1a036 <os_msys_num_free+0x12>
        total += omp->omp_pool->mp_num_free;
   1a02c:	685a      	ldr	r2, [r3, #4]
   1a02e:	88d2      	ldrh	r2, [r2, #6]
   1a030:	4410      	add	r0, r2
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
   1a032:	689b      	ldr	r3, [r3, #8]
   1a034:	e7f9      	b.n	1a02a <os_msys_num_free+0x6>
}
   1a036:	4770      	bx	lr
   1a038:	10000668 	.word	0x10000668

0001a03c <os_msys_init>:

void
os_msys_init(void)
{
   1a03c:	b500      	push	{lr}
   1a03e:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   1a040:	f7ff ffd6 	bl	19ff0 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   1a044:	4b06      	ldr	r3, [pc, #24]	; (1a060 <os_msys_init+0x24>)
   1a046:	9301      	str	r3, [sp, #4]
   1a048:	f44f 7392 	mov.w	r3, #292	; 0x124
   1a04c:	9300      	str	r3, [sp, #0]
   1a04e:	230c      	movs	r3, #12
   1a050:	4a04      	ldr	r2, [pc, #16]	; (1a064 <os_msys_init+0x28>)
   1a052:	4905      	ldr	r1, [pc, #20]	; (1a068 <os_msys_init+0x2c>)
   1a054:	4805      	ldr	r0, [pc, #20]	; (1a06c <os_msys_init+0x30>)
   1a056:	f7ff ff9f 	bl	19f98 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   1a05a:	b003      	add	sp, #12
   1a05c:	f85d fb04 	ldr.w	pc, [sp], #4
   1a060:	000385c8 	.word	0x000385c8
   1a064:	100038e4 	.word	0x100038e4
   1a068:	100038f0 	.word	0x100038f0
   1a06c:	10002b34 	.word	0x10002b34

0001a070 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   1a070:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1a072:	4b05      	ldr	r3, [pc, #20]	; (1a088 <os_sanity_check_list_lock+0x18>)
   1a074:	6818      	ldr	r0, [r3, #0]
   1a076:	b900      	cbnz	r0, 1a07a <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1a078:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   1a07a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a07e:	4803      	ldr	r0, [pc, #12]	; (1a08c <os_sanity_check_list_lock+0x1c>)
   1a080:	f000 fd4a 	bl	1ab18 <os_mutex_pend>
    if (rc != OS_OK) {
   1a084:	e7f8      	b.n	1a078 <os_sanity_check_list_lock+0x8>
   1a086:	bf00      	nop
   1a088:	10002b08 	.word	0x10002b08
   1a08c:	10003910 	.word	0x10003910

0001a090 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   1a090:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1a092:	4b04      	ldr	r3, [pc, #16]	; (1a0a4 <os_sanity_check_list_unlock+0x14>)
   1a094:	6818      	ldr	r0, [r3, #0]
   1a096:	b900      	cbnz	r0, 1a09a <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1a098:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   1a09a:	4803      	ldr	r0, [pc, #12]	; (1a0a8 <os_sanity_check_list_unlock+0x18>)
   1a09c:	f000 fcdc 	bl	1aa58 <os_mutex_release>
    if (rc != 0) {
   1a0a0:	e7fa      	b.n	1a098 <os_sanity_check_list_unlock+0x8>
   1a0a2:	bf00      	nop
   1a0a4:	10002b08 	.word	0x10002b08
   1a0a8:	10003910 	.word	0x10003910

0001a0ac <os_sanity_check_init>:
{
   1a0ac:	4603      	mov	r3, r0
    memset(sc, 0, sizeof(*sc));
   1a0ae:	2000      	movs	r0, #0
   1a0b0:	6018      	str	r0, [r3, #0]
   1a0b2:	6058      	str	r0, [r3, #4]
   1a0b4:	6098      	str	r0, [r3, #8]
   1a0b6:	60d8      	str	r0, [r3, #12]
   1a0b8:	6118      	str	r0, [r3, #16]
}
   1a0ba:	4770      	bx	lr

0001a0bc <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   1a0bc:	b510      	push	{r4, lr}
   1a0be:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   1a0c0:	f7ff ffd6 	bl	1a070 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   1a0c4:	b100      	cbz	r0, 1a0c8 <os_sanity_check_register+0xc>
    }

    return (0);
err:
    return (rc);
}
   1a0c6:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   1a0c8:	4b03      	ldr	r3, [pc, #12]	; (1a0d8 <os_sanity_check_register+0x1c>)
   1a0ca:	681a      	ldr	r2, [r3, #0]
   1a0cc:	6122      	str	r2, [r4, #16]
   1a0ce:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   1a0d0:	f7ff ffde 	bl	1a090 <os_sanity_check_list_unlock>
    if (rc != OS_OK) {
   1a0d4:	e7f7      	b.n	1a0c6 <os_sanity_check_register+0xa>
   1a0d6:	bf00      	nop
   1a0d8:	1000390c 	.word	0x1000390c

0001a0dc <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   1a0dc:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   1a0de:	f7ff ffc7 	bl	1a070 <os_sanity_check_list_lock>
    if (rc != 0) {
   1a0e2:	b910      	cbnz	r0, 1a0ea <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1a0e4:	4b1d      	ldr	r3, [pc, #116]	; (1a15c <os_sanity_run+0x80>)
   1a0e6:	681c      	ldr	r4, [r3, #0]
   1a0e8:	e012      	b.n	1a110 <os_sanity_run+0x34>
        assert(0);
   1a0ea:	f7fa fb03 	bl	146f4 <hal_debugger_connected>
   1a0ee:	b100      	cbz	r0, 1a0f2 <os_sanity_run+0x16>
   1a0f0:	be01      	bkpt	0x0001
   1a0f2:	2300      	movs	r3, #0
   1a0f4:	461a      	mov	r2, r3
   1a0f6:	4619      	mov	r1, r3
   1a0f8:	4618      	mov	r0, r3
   1a0fa:	f7fe fe19 	bl	18d30 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   1a0fe:	f000 faa3 	bl	1a648 <os_time_get>
   1a102:	6823      	ldr	r3, [r4, #0]
   1a104:	6862      	ldr	r2, [r4, #4]
   1a106:	4413      	add	r3, r2
   1a108:	1ac0      	subs	r0, r0, r3
   1a10a:	2800      	cmp	r0, #0
   1a10c:	dc0d      	bgt.n	1a12a <os_sanity_run+0x4e>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1a10e:	6924      	ldr	r4, [r4, #16]
   1a110:	b1ac      	cbz	r4, 1a13e <os_sanity_run+0x62>
        if (sc->sc_func) {
   1a112:	68a3      	ldr	r3, [r4, #8]
   1a114:	2b00      	cmp	r3, #0
   1a116:	d0f2      	beq.n	1a0fe <os_sanity_run+0x22>
            rc = sc->sc_func(sc, sc->sc_arg);
   1a118:	68e1      	ldr	r1, [r4, #12]
   1a11a:	4620      	mov	r0, r4
   1a11c:	4798      	blx	r3
            if (rc == OS_OK) {
   1a11e:	2800      	cmp	r0, #0
   1a120:	d1ed      	bne.n	1a0fe <os_sanity_run+0x22>
                sc->sc_checkin_last = os_time_get();
   1a122:	f000 fa91 	bl	1a648 <os_time_get>
   1a126:	6020      	str	r0, [r4, #0]
                continue;
   1a128:	e7f1      	b.n	1a10e <os_sanity_run+0x32>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   1a12a:	f7fa fae3 	bl	146f4 <hal_debugger_connected>
   1a12e:	b100      	cbz	r0, 1a132 <os_sanity_run+0x56>
   1a130:	be01      	bkpt	0x0001
   1a132:	2300      	movs	r3, #0
   1a134:	461a      	mov	r2, r3
   1a136:	4619      	mov	r1, r3
   1a138:	4618      	mov	r0, r3
   1a13a:	f7fe fdf9 	bl	18d30 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   1a13e:	f7ff ffa7 	bl	1a090 <os_sanity_check_list_unlock>
    if (rc != 0) {
   1a142:	b900      	cbnz	r0, 1a146 <os_sanity_run+0x6a>
        assert(0);
    }
}
   1a144:	bd10      	pop	{r4, pc}
        assert(0);
   1a146:	f7fa fad5 	bl	146f4 <hal_debugger_connected>
   1a14a:	b100      	cbz	r0, 1a14e <os_sanity_run+0x72>
   1a14c:	be01      	bkpt	0x0001
   1a14e:	2300      	movs	r3, #0
   1a150:	461a      	mov	r2, r3
   1a152:	4619      	mov	r1, r3
   1a154:	4618      	mov	r0, r3
   1a156:	f7fe fdeb 	bl	18d30 <__assert_func>
   1a15a:	bf00      	nop
   1a15c:	1000390c 	.word	0x1000390c

0001a160 <os_sanity_init>:

int
os_sanity_init(void)
{
   1a160:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   1a162:	4802      	ldr	r0, [pc, #8]	; (1a16c <os_sanity_init+0xc>)
   1a164:	f000 fc6e 	bl	1aa44 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   1a168:	bd08      	pop	{r3, pc}
   1a16a:	bf00      	nop
   1a16c:	10003910 	.word	0x10003910

0001a170 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   1a170:	7b03      	ldrb	r3, [r0, #12]
   1a172:	2b01      	cmp	r3, #1
   1a174:	d001      	beq.n	1a17a <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   1a176:	2002      	movs	r0, #2
}
   1a178:	4770      	bx	lr
{
   1a17a:	b510      	push	{r4, lr}
   1a17c:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1a17e:	f000 fb93 	bl	1a8a8 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1a182:	4b0f      	ldr	r3, [pc, #60]	; (1a1c0 <os_sched_insert+0x50>)
   1a184:	681b      	ldr	r3, [r3, #0]
   1a186:	b12b      	cbz	r3, 1a194 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   1a188:	7ae1      	ldrb	r1, [r4, #11]
   1a18a:	7ada      	ldrb	r2, [r3, #11]
   1a18c:	4291      	cmp	r1, r2
   1a18e:	d301      	bcc.n	1a194 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1a190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a192:	e7f8      	b.n	1a186 <os_sched_insert+0x16>
    if (entry) {
   1a194:	b153      	cbz	r3, 1a1ac <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   1a196:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1a198:	64a2      	str	r2, [r4, #72]	; 0x48
   1a19a:	6463      	str	r3, [r4, #68]	; 0x44
   1a19c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1a19e:	6014      	str	r4, [r2, #0]
   1a1a0:	3444      	adds	r4, #68	; 0x44
   1a1a2:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   1a1a4:	f000 fb86 	bl	1a8b4 <os_arch_restore_sr>
    return (0);
   1a1a8:	2000      	movs	r0, #0
}
   1a1aa:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   1a1ac:	2300      	movs	r3, #0
   1a1ae:	6463      	str	r3, [r4, #68]	; 0x44
   1a1b0:	4b03      	ldr	r3, [pc, #12]	; (1a1c0 <os_sched_insert+0x50>)
   1a1b2:	685a      	ldr	r2, [r3, #4]
   1a1b4:	64a2      	str	r2, [r4, #72]	; 0x48
   1a1b6:	6014      	str	r4, [r2, #0]
   1a1b8:	3444      	adds	r4, #68	; 0x44
   1a1ba:	605c      	str	r4, [r3, #4]
   1a1bc:	e7f2      	b.n	1a1a4 <os_sched_insert+0x34>
   1a1be:	bf00      	nop
   1a1c0:	10000670 	.word	0x10000670

0001a1c4 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   1a1c4:	b410      	push	{r4}
    stack = g_current_task->t_stackbottom;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(stack[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   1a1c6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1a1c8:	3301      	adds	r3, #1
   1a1ca:	63c3      	str	r3, [r0, #60]	; 0x3c
#if MYNEWT_VAL(OS_TASK_RUN_TIME_CPUTIME)
    ticks = os_cputime_get32();
#else
    ticks = g_os_time;
   1a1cc:	4b06      	ldr	r3, [pc, #24]	; (1a1e8 <os_sched_ctx_sw_hook+0x24>)
   1a1ce:	6818      	ldr	r0, [r3, #0]
#endif
    g_current_task->t_run_time += ticks - g_os_last_ctx_sw_time;
   1a1d0:	4b06      	ldr	r3, [pc, #24]	; (1a1ec <os_sched_ctx_sw_hook+0x28>)
   1a1d2:	681c      	ldr	r4, [r3, #0]
   1a1d4:	4906      	ldr	r1, [pc, #24]	; (1a1f0 <os_sched_ctx_sw_hook+0x2c>)
   1a1d6:	680b      	ldr	r3, [r1, #0]
   1a1d8:	1ac2      	subs	r2, r0, r3
   1a1da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1a1dc:	4413      	add	r3, r2
   1a1de:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = ticks;
   1a1e0:	6008      	str	r0, [r1, #0]
}
   1a1e2:	bc10      	pop	{r4}
   1a1e4:	4770      	bx	lr
   1a1e6:	bf00      	nop
   1a1e8:	10003960 	.word	0x10003960
   1a1ec:	1000391c 	.word	0x1000391c
   1a1f0:	10003920 	.word	0x10003920

0001a1f4 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   1a1f4:	4b01      	ldr	r3, [pc, #4]	; (1a1fc <os_sched_get_current_task+0x8>)
   1a1f6:	6818      	ldr	r0, [r3, #0]
   1a1f8:	4770      	bx	lr
   1a1fa:	bf00      	nop
   1a1fc:	1000391c 	.word	0x1000391c

0001a200 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   1a200:	4b01      	ldr	r3, [pc, #4]	; (1a208 <os_sched_set_current_task+0x8>)
   1a202:	6018      	str	r0, [r3, #0]
}
   1a204:	4770      	bx	lr
   1a206:	bf00      	nop
   1a208:	1000391c 	.word	0x1000391c

0001a20c <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   1a20c:	b538      	push	{r3, r4, r5, lr}
   1a20e:	4604      	mov	r4, r0
   1a210:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1a212:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1a214:	b183      	cbz	r3, 1a238 <os_sched_sleep+0x2c>
   1a216:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a218:	649a      	str	r2, [r3, #72]	; 0x48
   1a21a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1a21c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1a21e:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   1a220:	2302      	movs	r3, #2
   1a222:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   1a224:	f000 fa10 	bl	1a648 <os_time_get>
   1a228:	4428      	add	r0, r5
   1a22a:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   1a22c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1a230:	d006      	beq.n	1a240 <os_sched_sleep+0x34>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1a232:	4b18      	ldr	r3, [pc, #96]	; (1a294 <os_sched_sleep+0x88>)
   1a234:	681b      	ldr	r3, [r3, #0]
   1a236:	e011      	b.n	1a25c <os_sched_sleep+0x50>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1a238:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a23a:	4b17      	ldr	r3, [pc, #92]	; (1a298 <os_sched_sleep+0x8c>)
   1a23c:	605a      	str	r2, [r3, #4]
   1a23e:	e7ec      	b.n	1a21a <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   1a240:	7b63      	ldrb	r3, [r4, #13]
   1a242:	f043 0301 	orr.w	r3, r3, #1
   1a246:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1a248:	2300      	movs	r3, #0
   1a24a:	6463      	str	r3, [r4, #68]	; 0x44
   1a24c:	4b11      	ldr	r3, [pc, #68]	; (1a294 <os_sched_sleep+0x88>)
   1a24e:	685a      	ldr	r2, [r3, #4]
   1a250:	64a2      	str	r2, [r4, #72]	; 0x48
   1a252:	6014      	str	r4, [r2, #0]
   1a254:	3444      	adds	r4, #68	; 0x44
   1a256:	605c      	str	r4, [r3, #4]
   1a258:	e011      	b.n	1a27e <os_sched_sleep+0x72>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1a25a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a25c:	b13b      	cbz	r3, 1a26e <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1a25e:	7b5a      	ldrb	r2, [r3, #13]
   1a260:	f012 0f01 	tst.w	r2, #1
   1a264:	d103      	bne.n	1a26e <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   1a266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1a268:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1a26a:	2a00      	cmp	r2, #0
   1a26c:	ddf5      	ble.n	1a25a <os_sched_sleep+0x4e>
                break;
            }
        }
        if (entry) {
   1a26e:	b143      	cbz	r3, 1a282 <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   1a270:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1a272:	64a2      	str	r2, [r4, #72]	; 0x48
   1a274:	6463      	str	r3, [r4, #68]	; 0x44
   1a276:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1a278:	6014      	str	r4, [r2, #0]
   1a27a:	3444      	adds	r4, #68	; 0x44
   1a27c:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   1a27e:	2000      	movs	r0, #0
   1a280:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1a282:	2300      	movs	r3, #0
   1a284:	6463      	str	r3, [r4, #68]	; 0x44
   1a286:	4b03      	ldr	r3, [pc, #12]	; (1a294 <os_sched_sleep+0x88>)
   1a288:	685a      	ldr	r2, [r3, #4]
   1a28a:	64a2      	str	r2, [r4, #72]	; 0x48
   1a28c:	6014      	str	r4, [r2, #0]
   1a28e:	3444      	adds	r4, #68	; 0x44
   1a290:	605c      	str	r4, [r3, #4]
   1a292:	e7f4      	b.n	1a27e <os_sched_sleep+0x72>
   1a294:	10000678 	.word	0x10000678
   1a298:	10000670 	.word	0x10000670

0001a29c <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   1a29c:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   1a29e:	7b03      	ldrb	r3, [r0, #12]
   1a2a0:	2b02      	cmp	r3, #2
   1a2a2:	d121      	bne.n	1a2e8 <os_sched_wakeup+0x4c>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   1a2a4:	69c2      	ldr	r2, [r0, #28]
   1a2a6:	b162      	cbz	r2, 1a2c2 <os_sched_wakeup+0x26>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1a2a8:	6813      	ldr	r3, [r2, #0]
   1a2aa:	b33b      	cbz	r3, 1a2fc <os_sched_wakeup+0x60>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1a2ac:	4283      	cmp	r3, r0
   1a2ae:	d02f      	beq.n	1a310 <os_sched_wakeup+0x74>
   1a2b0:	461a      	mov	r2, r3
   1a2b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1a2b4:	4283      	cmp	r3, r0
   1a2b6:	d1fb      	bne.n	1a2b0 <os_sched_wakeup+0x14>
   1a2b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1a2ba:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   1a2bc:	2300      	movs	r3, #0
   1a2be:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   1a2c0:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   1a2c2:	2301      	movs	r3, #1
   1a2c4:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   1a2c6:	2300      	movs	r3, #0
   1a2c8:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   1a2ca:	7b43      	ldrb	r3, [r0, #13]
   1a2cc:	f023 0301 	bic.w	r3, r3, #1
   1a2d0:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1a2d2:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1a2d4:	b1fb      	cbz	r3, 1a316 <os_sched_wakeup+0x7a>
   1a2d6:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a2d8:	649a      	str	r2, [r3, #72]	; 0x48
   1a2da:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1a2dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1a2de:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   1a2e0:	f7ff ff46 	bl	1a170 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   1a2e4:	2000      	movs	r0, #0
   1a2e6:	bd08      	pop	{r3, pc}
    assert(t->t_state == OS_TASK_SLEEP);
   1a2e8:	f7fa fa04 	bl	146f4 <hal_debugger_connected>
   1a2ec:	b100      	cbz	r0, 1a2f0 <os_sched_wakeup+0x54>
   1a2ee:	be01      	bkpt	0x0001
   1a2f0:	2300      	movs	r3, #0
   1a2f2:	461a      	mov	r2, r3
   1a2f4:	4619      	mov	r1, r3
   1a2f6:	4618      	mov	r0, r3
   1a2f8:	f7fe fd1a 	bl	18d30 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1a2fc:	f7fa f9fa 	bl	146f4 <hal_debugger_connected>
   1a300:	b100      	cbz	r0, 1a304 <os_sched_wakeup+0x68>
   1a302:	be01      	bkpt	0x0001
   1a304:	2300      	movs	r3, #0
   1a306:	461a      	mov	r2, r3
   1a308:	4619      	mov	r1, r3
   1a30a:	4618      	mov	r0, r3
   1a30c:	f7fe fd10 	bl	18d30 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1a310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1a312:	6013      	str	r3, [r2, #0]
   1a314:	e7d2      	b.n	1a2bc <os_sched_wakeup+0x20>
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1a316:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a318:	4b01      	ldr	r3, [pc, #4]	; (1a320 <os_sched_wakeup+0x84>)
   1a31a:	605a      	str	r2, [r3, #4]
   1a31c:	e7dd      	b.n	1a2da <os_sched_wakeup+0x3e>
   1a31e:	bf00      	nop
   1a320:	10000678 	.word	0x10000678

0001a324 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   1a324:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   1a326:	f000 f98f 	bl	1a648 <os_time_get>
   1a32a:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   1a32c:	f000 fabc 	bl	1a8a8 <os_arch_save_sr>
   1a330:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   1a332:	4b0a      	ldr	r3, [pc, #40]	; (1a35c <os_sched_os_timer_exp+0x38>)
   1a334:	6818      	ldr	r0, [r3, #0]
    while (t) {
   1a336:	e002      	b.n	1a33e <os_sched_os_timer_exp+0x1a>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
            os_sched_wakeup(t);
   1a338:	f7ff ffb0 	bl	1a29c <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   1a33c:	4620      	mov	r0, r4
    while (t) {
   1a33e:	b140      	cbz	r0, 1a352 <os_sched_os_timer_exp+0x2e>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   1a340:	7b43      	ldrb	r3, [r0, #13]
   1a342:	f013 0f01 	tst.w	r3, #1
   1a346:	d104      	bne.n	1a352 <os_sched_os_timer_exp+0x2e>
        next = TAILQ_NEXT(t, t_os_list);
   1a348:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   1a34a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1a34c:	1aeb      	subs	r3, r5, r3
   1a34e:	2b00      	cmp	r3, #0
   1a350:	daf2      	bge.n	1a338 <os_sched_os_timer_exp+0x14>
    }

    OS_EXIT_CRITICAL(sr);
   1a352:	4630      	mov	r0, r6
   1a354:	f000 faae 	bl	1a8b4 <os_arch_restore_sr>
}
   1a358:	bd70      	pop	{r4, r5, r6, pc}
   1a35a:	bf00      	nop
   1a35c:	10000678 	.word	0x10000678

0001a360 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   1a360:	b510      	push	{r4, lr}
   1a362:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   1a364:	f000 faa9 	bl	1a8ba <os_arch_in_critical>
   1a368:	b150      	cbz	r0, 1a380 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   1a36a:	4b0e      	ldr	r3, [pc, #56]	; (1a3a4 <os_sched_wakeup_ticks+0x44>)
   1a36c:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   1a36e:	b19b      	cbz	r3, 1a398 <os_sched_wakeup_ticks+0x38>
   1a370:	7b5a      	ldrb	r2, [r3, #13]
   1a372:	f012 0f01 	tst.w	r2, #1
   1a376:	d112      	bne.n	1a39e <os_sched_wakeup_ticks+0x3e>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   1a378:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1a37a:	1b00      	subs	r0, r0, r4
   1a37c:	d40a      	bmi.n	1a394 <os_sched_wakeup_ticks+0x34>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   1a37e:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   1a380:	f7fa f9b8 	bl	146f4 <hal_debugger_connected>
   1a384:	b100      	cbz	r0, 1a388 <os_sched_wakeup_ticks+0x28>
   1a386:	be01      	bkpt	0x0001
   1a388:	2300      	movs	r3, #0
   1a38a:	461a      	mov	r2, r3
   1a38c:	4619      	mov	r1, r3
   1a38e:	4618      	mov	r0, r3
   1a390:	f7fe fcce 	bl	18d30 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   1a394:	2000      	movs	r0, #0
   1a396:	e7f2      	b.n	1a37e <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   1a398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a39c:	e7ef      	b.n	1a37e <os_sched_wakeup_ticks+0x1e>
   1a39e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1a3a2:	e7ec      	b.n	1a37e <os_sched_wakeup_ticks+0x1e>
   1a3a4:	10000678 	.word	0x10000678

0001a3a8 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   1a3a8:	4b01      	ldr	r3, [pc, #4]	; (1a3b0 <os_sched_next_task+0x8>)
   1a3aa:	6818      	ldr	r0, [r3, #0]
   1a3ac:	4770      	bx	lr
   1a3ae:	bf00      	nop
   1a3b0:	10000670 	.word	0x10000670

0001a3b4 <os_sched>:
{
   1a3b4:	b538      	push	{r3, r4, r5, lr}
   1a3b6:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1a3b8:	f000 fa76 	bl	1a8a8 <os_arch_save_sr>
   1a3bc:	4605      	mov	r5, r0
    if (!next_t) {
   1a3be:	b134      	cbz	r4, 1a3ce <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   1a3c0:	4620      	mov	r0, r4
   1a3c2:	f000 fa67 	bl	1a894 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   1a3c6:	4628      	mov	r0, r5
   1a3c8:	f000 fa74 	bl	1a8b4 <os_arch_restore_sr>
}
   1a3cc:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   1a3ce:	f7ff ffeb 	bl	1a3a8 <os_sched_next_task>
   1a3d2:	4604      	mov	r4, r0
   1a3d4:	e7f4      	b.n	1a3c0 <os_sched+0xc>
	...

0001a3d8 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   1a3d8:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   1a3da:	7b03      	ldrb	r3, [r0, #12]
   1a3dc:	2b01      	cmp	r3, #1
   1a3de:	d000      	beq.n	1a3e2 <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   1a3e0:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1a3e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1a3e4:	b13b      	cbz	r3, 1a3f6 <os_sched_resort+0x1e>
   1a3e6:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a3e8:	649a      	str	r2, [r3, #72]	; 0x48
   1a3ea:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1a3ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1a3ee:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   1a3f0:	f7ff febe 	bl	1a170 <os_sched_insert>
}
   1a3f4:	e7f4      	b.n	1a3e0 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1a3f6:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a3f8:	4b01      	ldr	r3, [pc, #4]	; (1a400 <os_sched_resort+0x28>)
   1a3fa:	605a      	str	r2, [r3, #4]
   1a3fc:	e7f5      	b.n	1a3ea <os_sched_resort+0x12>
   1a3fe:	bf00      	nop
   1a400:	10000670 	.word	0x10000670

0001a404 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   1a404:	2300      	movs	r3, #0
   1a406:	428b      	cmp	r3, r1
   1a408:	da04      	bge.n	1a414 <_clear_stack+0x10>
        stack_bottom[i] = OS_STACK_PATTERN;
   1a40a:	4a03      	ldr	r2, [pc, #12]	; (1a418 <_clear_stack+0x14>)
   1a40c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   1a410:	3301      	adds	r3, #1
   1a412:	e7f8      	b.n	1a406 <_clear_stack+0x2>
    }
}
   1a414:	4770      	bx	lr
   1a416:	bf00      	nop
   1a418:	deadbeef 	.word	0xdeadbeef

0001a41c <os_task_stacktop_get>:
}

os_stack_t *
os_task_stacktop_get(struct os_task *t)
{
    return &t->t_stackbottom[t->t_stacksize];
   1a41c:	6843      	ldr	r3, [r0, #4]
   1a41e:	8900      	ldrh	r0, [r0, #8]
}
   1a420:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1a424:	4770      	bx	lr
	...

0001a428 <os_task_init>:
{
   1a428:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
   1a42c:	4604      	mov	r4, r0
   1a42e:	460d      	mov	r5, r1
   1a430:	4617      	mov	r7, r2
   1a432:	461e      	mov	r6, r3
   1a434:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    memset(t, 0, sizeof(*t));
   1a438:	2250      	movs	r2, #80	; 0x50
   1a43a:	2100      	movs	r1, #0
   1a43c:	f000 fc2d 	bl	1ac9a <memset>
    t->t_func = func;
   1a440:	6167      	str	r7, [r4, #20]
    t->t_arg = arg;
   1a442:	61a6      	str	r6, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   1a444:	f000 fa30 	bl	1a8a8 <os_arch_save_sr>
    rc = g_task_id;
   1a448:	4b2e      	ldr	r3, [pc, #184]	; (1a504 <os_task_init+0xdc>)
   1a44a:	781e      	ldrb	r6, [r3, #0]
    g_task_id++;
   1a44c:	1c72      	adds	r2, r6, #1
   1a44e:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1a450:	f000 fa30 	bl	1a8b4 <os_arch_restore_sr>
    t->t_taskid = os_task_next_id();
   1a454:	72a6      	strb	r6, [r4, #10]
    t->t_prio = prio;
   1a456:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1a45a:	72e3      	strb	r3, [r4, #11]
    t->t_state = OS_TASK_READY;
   1a45c:	2301      	movs	r3, #1
   1a45e:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   1a460:	6125      	str	r5, [r4, #16]
    t->t_next_wakeup = 0;
   1a462:	2300      	movs	r3, #0
   1a464:	6363      	str	r3, [r4, #52]	; 0x34
    rc = os_sanity_check_init(&t->t_sanity_check);
   1a466:	f104 0620 	add.w	r6, r4, #32
   1a46a:	4630      	mov	r0, r6
   1a46c:	f7ff fe1e 	bl	1a0ac <os_sanity_check_init>
    if (rc != OS_OK) {
   1a470:	4605      	mov	r5, r0
   1a472:	2800      	cmp	r0, #0
   1a474:	d139      	bne.n	1a4ea <os_task_init+0xc2>
    if (sanity_itvl != OS_WAIT_FOREVER) {
   1a476:	9b07      	ldr	r3, [sp, #28]
   1a478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1a47c:	d005      	beq.n	1a48a <os_task_init+0x62>
        sc->sc_checkin_itvl = sanity_itvl;
   1a47e:	6263      	str	r3, [r4, #36]	; 0x24
        rc = os_sanity_check_register(sc);
   1a480:	4630      	mov	r0, r6
   1a482:	f7ff fe1b 	bl	1a0bc <os_sanity_check_register>
        if (rc != OS_OK) {
   1a486:	4605      	mov	r5, r0
   1a488:	bb78      	cbnz	r0, 1a4ea <os_task_init+0xc2>
    _clear_stack(stack_bottom, stack_size);
   1a48a:	4649      	mov	r1, r9
   1a48c:	9808      	ldr	r0, [sp, #32]
   1a48e:	f7ff ffb9 	bl	1a404 <_clear_stack>
    t->t_stackbottom = stack_bottom;
   1a492:	9b08      	ldr	r3, [sp, #32]
   1a494:	6063      	str	r3, [r4, #4]
    t->t_stacksize = stack_size;
   1a496:	f8a4 9008 	strh.w	r9, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, os_task_stacktop_get(t),
   1a49a:	4620      	mov	r0, r4
   1a49c:	f7ff ffbe 	bl	1a41c <os_task_stacktop_get>
   1a4a0:	4601      	mov	r1, r0
   1a4a2:	464a      	mov	r2, r9
   1a4a4:	4620      	mov	r0, r4
   1a4a6:	f000 fa0d 	bl	1a8c4 <os_arch_task_stack_init>
   1a4aa:	6020      	str	r0, [r4, #0]
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1a4ac:	4b16      	ldr	r3, [pc, #88]	; (1a508 <os_task_init+0xe0>)
   1a4ae:	681b      	ldr	r3, [r3, #0]
   1a4b0:	b17b      	cbz	r3, 1a4d2 <os_task_init+0xaa>
        assert(t->t_prio != task->t_prio);
   1a4b2:	7ae1      	ldrb	r1, [r4, #11]
   1a4b4:	7ada      	ldrb	r2, [r3, #11]
   1a4b6:	4291      	cmp	r1, r2
   1a4b8:	d001      	beq.n	1a4be <os_task_init+0x96>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1a4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a4bc:	e7f8      	b.n	1a4b0 <os_task_init+0x88>
        assert(t->t_prio != task->t_prio);
   1a4be:	f7fa f919 	bl	146f4 <hal_debugger_connected>
   1a4c2:	b100      	cbz	r0, 1a4c6 <os_task_init+0x9e>
   1a4c4:	be01      	bkpt	0x0001
   1a4c6:	2300      	movs	r3, #0
   1a4c8:	461a      	mov	r2, r3
   1a4ca:	4619      	mov	r1, r3
   1a4cc:	4618      	mov	r0, r3
   1a4ce:	f7fe fc2f 	bl	18d30 <__assert_func>
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   1a4d2:	6423      	str	r3, [r4, #64]	; 0x40
   1a4d4:	4b0c      	ldr	r3, [pc, #48]	; (1a508 <os_task_init+0xe0>)
   1a4d6:	685a      	ldr	r2, [r3, #4]
   1a4d8:	6014      	str	r4, [r2, #0]
   1a4da:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1a4de:	605a      	str	r2, [r3, #4]
    rc = os_sched_insert(t);
   1a4e0:	4620      	mov	r0, r4
   1a4e2:	f7ff fe45 	bl	1a170 <os_sched_insert>
   1a4e6:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   1a4e8:	b110      	cbz	r0, 1a4f0 <os_task_init+0xc8>
}
   1a4ea:	4628      	mov	r0, r5
   1a4ec:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    if (os_started()) {
   1a4f0:	f7fe fd44 	bl	18f7c <os_started>
   1a4f4:	b908      	cbnz	r0, 1a4fa <os_task_init+0xd2>
    return (0);
   1a4f6:	4605      	mov	r5, r0
   1a4f8:	e7f7      	b.n	1a4ea <os_task_init+0xc2>
        os_sched(NULL);
   1a4fa:	2000      	movs	r0, #0
   1a4fc:	f7ff ff5a 	bl	1a3b4 <os_sched>
   1a500:	e7f3      	b.n	1a4ea <os_task_init+0xc2>
   1a502:	bf00      	nop
   1a504:	1000392c 	.word	0x1000392c
   1a508:	10003924 	.word	0x10003924

0001a50c <os_task_info_get>:
    return rc;
}

void
os_task_info_get(const struct os_task *task, struct os_task_info *oti)
{
   1a50c:	b570      	push	{r4, r5, r6, lr}
   1a50e:	4606      	mov	r6, r0
    os_stack_t *bottom;
    os_stack_t *top;

    oti->oti_prio = task->t_prio;
   1a510:	7ac3      	ldrb	r3, [r0, #11]
   1a512:	700b      	strb	r3, [r1, #0]
    oti->oti_taskid = task->t_taskid;
   1a514:	7a83      	ldrb	r3, [r0, #10]
   1a516:	704b      	strb	r3, [r1, #1]
    oti->oti_state = task->t_state;
   1a518:	7b03      	ldrb	r3, [r0, #12]
   1a51a:	708b      	strb	r3, [r1, #2]

    bottom = task->t_stackbottom;
   1a51c:	6843      	ldr	r3, [r0, #4]
    top = bottom + task->t_stacksize;
   1a51e:	8905      	ldrh	r5, [r0, #8]
   1a520:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    while (bottom < top) {
   1a524:	42ab      	cmp	r3, r5
   1a526:	d205      	bcs.n	1a534 <os_task_info_get+0x28>
        if (*bottom != OS_STACK_PATTERN) {
   1a528:	681c      	ldr	r4, [r3, #0]
   1a52a:	4a0e      	ldr	r2, [pc, #56]	; (1a564 <os_task_info_get+0x58>)
   1a52c:	4294      	cmp	r4, r2
   1a52e:	d101      	bne.n	1a534 <os_task_info_get+0x28>
            break;
        }
        ++bottom;
   1a530:	3304      	adds	r3, #4
   1a532:	e7f7      	b.n	1a524 <os_task_info_get+0x18>
    }

    oti->oti_stkusage = (uint16_t) (top - bottom);
   1a534:	1aeb      	subs	r3, r5, r3
   1a536:	f3c3 038f 	ubfx	r3, r3, #2, #16
   1a53a:	808b      	strh	r3, [r1, #4]
    oti->oti_stksize = task->t_stacksize;
   1a53c:	8933      	ldrh	r3, [r6, #8]
   1a53e:	80cb      	strh	r3, [r1, #6]
    oti->oti_cswcnt = task->t_ctx_sw_cnt;
   1a540:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   1a542:	608b      	str	r3, [r1, #8]
    oti->oti_runtime = task->t_run_time;
   1a544:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1a546:	60cb      	str	r3, [r1, #12]
    oti->oti_last_checkin = task->t_sanity_check.sc_checkin_last;
   1a548:	6a33      	ldr	r3, [r6, #32]
   1a54a:	610b      	str	r3, [r1, #16]
    oti->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
                            task->t_sanity_check.sc_checkin_itvl;
   1a54c:	6a72      	ldr	r2, [r6, #36]	; 0x24
    oti->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
   1a54e:	4413      	add	r3, r2
   1a550:	614b      	str	r3, [r1, #20]
    oti->oti_name[0] = '\0';
   1a552:	4608      	mov	r0, r1
   1a554:	2300      	movs	r3, #0
   1a556:	f800 3f18 	strb.w	r3, [r0, #24]!
    strncat(oti->oti_name, task->t_name, sizeof(oti->oti_name) - 1);
   1a55a:	221f      	movs	r2, #31
   1a55c:	6931      	ldr	r1, [r6, #16]
   1a55e:	f000 fbe5 	bl	1ad2c <strncat>
}
   1a562:	bd70      	pop	{r4, r5, r6, pc}
   1a564:	deadbeef 	.word	0xdeadbeef

0001a568 <os_task_info_get_next>:

struct os_task *
os_task_info_get_next(const struct os_task *prev, struct os_task_info *oti)
{
   1a568:	b510      	push	{r4, lr}
    struct os_task *next;

    if (prev != NULL) {
   1a56a:	b130      	cbz	r0, 1a57a <os_task_info_get_next+0x12>
        next = STAILQ_NEXT(prev, t_os_task_list);
   1a56c:	6c04      	ldr	r4, [r0, #64]	; 0x40
    } else {
        next = STAILQ_FIRST(&g_os_task_list);
    }

    if (next) {
   1a56e:	b114      	cbz	r4, 1a576 <os_task_info_get_next+0xe>
        os_task_info_get(next, oti);
   1a570:	4620      	mov	r0, r4
   1a572:	f7ff ffcb 	bl	1a50c <os_task_info_get>
    }

    return next;
}
   1a576:	4620      	mov	r0, r4
   1a578:	bd10      	pop	{r4, pc}
        next = STAILQ_FIRST(&g_os_task_list);
   1a57a:	4b01      	ldr	r3, [pc, #4]	; (1a580 <os_task_info_get_next+0x18>)
   1a57c:	681c      	ldr	r4, [r3, #0]
   1a57e:	e7f6      	b.n	1a56e <os_task_info_get_next+0x6>
   1a580:	10003924 	.word	0x10003924

0001a584 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   1a584:	b430      	push	{r4, r5}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   1a586:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   1a588:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   1a58c:	e9d1 4500 	ldrd	r4, r5, [r1]
   1a590:	18e4      	adds	r4, r4, r3
   1a592:	f145 0500 	adc.w	r5, r5, #0
   1a596:	e9c2 4500 	strd	r4, r5, [r2]
   1a59a:	688b      	ldr	r3, [r1, #8]
   1a59c:	f641 6184 	movw	r1, #7812	; 0x1e84
   1a5a0:	fb01 3000 	mla	r0, r1, r0, r3
   1a5a4:	6090      	str	r0, [r2, #8]
   1a5a6:	4b07      	ldr	r3, [pc, #28]	; (1a5c4 <os_deltatime+0x40>)
   1a5a8:	4298      	cmp	r0, r3
   1a5aa:	dd09      	ble.n	1a5c0 <os_deltatime+0x3c>
   1a5ac:	1c61      	adds	r1, r4, #1
   1a5ae:	f145 0300 	adc.w	r3, r5, #0
   1a5b2:	6011      	str	r1, [r2, #0]
   1a5b4:	6053      	str	r3, [r2, #4]
   1a5b6:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   1a5ba:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   1a5be:	6090      	str	r0, [r2, #8]
}
   1a5c0:	bc30      	pop	{r4, r5}
   1a5c2:	4770      	bx	lr
   1a5c4:	000f423f 	.word	0x000f423f

0001a5c8 <os_time_change_notify>:
    return 0;
}

static void
os_time_change_notify(const struct os_time_change_info *info)
{
   1a5c8:	b538      	push	{r3, r4, r5, lr}
   1a5ca:	4605      	mov	r5, r0
    struct os_time_change_listener *listener;

    STAILQ_FOREACH(listener, &os_time_change_listeners, tcl_next) {
   1a5cc:	4b04      	ldr	r3, [pc, #16]	; (1a5e0 <os_time_change_notify+0x18>)
   1a5ce:	681c      	ldr	r4, [r3, #0]
   1a5d0:	b12c      	cbz	r4, 1a5de <os_time_change_notify+0x16>
        listener->tcl_fn(info, listener->tcl_arg);
   1a5d2:	6823      	ldr	r3, [r4, #0]
   1a5d4:	6861      	ldr	r1, [r4, #4]
   1a5d6:	4628      	mov	r0, r5
   1a5d8:	4798      	blx	r3
    STAILQ_FOREACH(listener, &os_time_change_listeners, tcl_next) {
   1a5da:	68a4      	ldr	r4, [r4, #8]
   1a5dc:	e7f8      	b.n	1a5d0 <os_time_change_notify+0x8>
    }
}
   1a5de:	bd38      	pop	{r3, r4, r5, pc}
   1a5e0:	10000680 	.word	0x10000680

0001a5e4 <os_time_tick>:
{
   1a5e4:	b570      	push	{r4, r5, r6, lr}
    assert(ticks >= 0);
   1a5e6:	1e04      	subs	r4, r0, #0
   1a5e8:	db0d      	blt.n	1a606 <os_time_tick+0x22>
    OS_ENTER_CRITICAL(sr);
   1a5ea:	f000 f95d 	bl	1a8a8 <os_arch_save_sr>
   1a5ee:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   1a5f0:	4913      	ldr	r1, [pc, #76]	; (1a640 <os_time_tick+0x5c>)
   1a5f2:	680a      	ldr	r2, [r1, #0]
    g_os_time += ticks;
   1a5f4:	18a3      	adds	r3, r4, r2
   1a5f6:	600b      	str	r3, [r1, #0]
    if ((prev_os_time ^ g_os_time) >> 31) {
   1a5f8:	ea93 0f02 	teq	r3, r2
   1a5fc:	d40d      	bmi.n	1a61a <os_time_tick+0x36>
    OS_EXIT_CRITICAL(sr);
   1a5fe:	4628      	mov	r0, r5
   1a600:	f000 f958 	bl	1a8b4 <os_arch_restore_sr>
}
   1a604:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   1a606:	f7fa f875 	bl	146f4 <hal_debugger_connected>
   1a60a:	b100      	cbz	r0, 1a60e <os_time_tick+0x2a>
   1a60c:	be01      	bkpt	0x0001
   1a60e:	2300      	movs	r3, #0
   1a610:	461a      	mov	r2, r3
   1a612:	4619      	mov	r1, r3
   1a614:	4618      	mov	r0, r3
   1a616:	f7fe fb8b 	bl	18d30 <__assert_func>
        delta = g_os_time - basetod.ostime;
   1a61a:	4e0a      	ldr	r6, [pc, #40]	; (1a644 <os_time_tick+0x60>)
   1a61c:	4631      	mov	r1, r6
   1a61e:	f851 4b08 	ldr.w	r4, [r1], #8
   1a622:	1b1c      	subs	r4, r3, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   1a624:	460a      	mov	r2, r1
   1a626:	4620      	mov	r0, r4
   1a628:	f7ff ffac 	bl	1a584 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   1a62c:	f106 0118 	add.w	r1, r6, #24
   1a630:	460a      	mov	r2, r1
   1a632:	4620      	mov	r0, r4
   1a634:	f7ff ffa6 	bl	1a584 <os_deltatime>
        basetod.ostime = g_os_time;
   1a638:	4b01      	ldr	r3, [pc, #4]	; (1a640 <os_time_tick+0x5c>)
   1a63a:	681b      	ldr	r3, [r3, #0]
   1a63c:	6033      	str	r3, [r6, #0]
   1a63e:	e7de      	b.n	1a5fe <os_time_tick+0x1a>
   1a640:	10003960 	.word	0x10003960
   1a644:	10003930 	.word	0x10003930

0001a648 <os_time_get>:
}
   1a648:	4b01      	ldr	r3, [pc, #4]	; (1a650 <os_time_get+0x8>)
   1a64a:	6818      	ldr	r0, [r3, #0]
   1a64c:	4770      	bx	lr
   1a64e:	bf00      	nop
   1a650:	10003960 	.word	0x10003960

0001a654 <os_time_advance>:
{
   1a654:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   1a656:	1e04      	subs	r4, r0, #0
   1a658:	db02      	blt.n	1a660 <os_time_advance+0xc>
    if (ticks > 0) {
   1a65a:	2c00      	cmp	r4, #0
   1a65c:	dc0a      	bgt.n	1a674 <os_time_advance+0x20>
}
   1a65e:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   1a660:	f7fa f848 	bl	146f4 <hal_debugger_connected>
   1a664:	b100      	cbz	r0, 1a668 <os_time_advance+0x14>
   1a666:	be01      	bkpt	0x0001
   1a668:	2300      	movs	r3, #0
   1a66a:	461a      	mov	r2, r3
   1a66c:	4619      	mov	r1, r3
   1a66e:	4618      	mov	r0, r3
   1a670:	f7fe fb5e 	bl	18d30 <__assert_func>
        if (!os_started()) {
   1a674:	f7fe fc82 	bl	18f7c <os_started>
   1a678:	b920      	cbnz	r0, 1a684 <os_time_advance+0x30>
            g_os_time += ticks;
   1a67a:	4b08      	ldr	r3, [pc, #32]	; (1a69c <os_time_advance+0x48>)
   1a67c:	6818      	ldr	r0, [r3, #0]
   1a67e:	4420      	add	r0, r4
   1a680:	6018      	str	r0, [r3, #0]
   1a682:	e7ec      	b.n	1a65e <os_time_advance+0xa>
            os_time_tick(ticks);
   1a684:	4620      	mov	r0, r4
   1a686:	f7ff ffad 	bl	1a5e4 <os_time_tick>
            os_callout_tick();
   1a68a:	f7fe fdd9 	bl	19240 <os_callout_tick>
            os_sched_os_timer_exp();
   1a68e:	f7ff fe49 	bl	1a324 <os_sched_os_timer_exp>
            os_sched(NULL);
   1a692:	2000      	movs	r0, #0
   1a694:	f7ff fe8e 	bl	1a3b4 <os_sched>
}
   1a698:	e7e1      	b.n	1a65e <os_time_advance+0xa>
   1a69a:	bf00      	nop
   1a69c:	10003960 	.word	0x10003960

0001a6a0 <os_time_delay>:
    if (osticks > 0) {
   1a6a0:	b900      	cbnz	r0, 1a6a4 <os_time_delay+0x4>
   1a6a2:	4770      	bx	lr
{
   1a6a4:	b538      	push	{r3, r4, r5, lr}
   1a6a6:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1a6a8:	f000 f8fe 	bl	1a8a8 <os_arch_save_sr>
   1a6ac:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   1a6ae:	f7ff fda1 	bl	1a1f4 <os_sched_get_current_task>
   1a6b2:	4621      	mov	r1, r4
   1a6b4:	f7ff fdaa 	bl	1a20c <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   1a6b8:	4628      	mov	r0, r5
   1a6ba:	f000 f8fb 	bl	1a8b4 <os_arch_restore_sr>
        os_sched(NULL);
   1a6be:	2000      	movs	r0, #0
   1a6c0:	f7ff fe78 	bl	1a3b4 <os_sched>
}
   1a6c4:	bd38      	pop	{r3, r4, r5, pc}
	...

0001a6c8 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
   1a6c8:	b570      	push	{r4, r5, r6, lr}
   1a6ca:	4605      	mov	r5, r0
   1a6cc:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
   1a6ce:	f000 f8eb 	bl	1a8a8 <os_arch_save_sr>
   1a6d2:	4606      	mov	r6, r0
    if (tv != NULL) {
   1a6d4:	b145      	cbz	r5, 1a6e8 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
   1a6d6:	f7ff ffb7 	bl	1a648 <os_time_get>
   1a6da:	4908      	ldr	r1, [pc, #32]	; (1a6fc <os_gettimeofday+0x34>)
   1a6dc:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
   1a6e0:	462a      	mov	r2, r5
   1a6e2:	1ac0      	subs	r0, r0, r3
   1a6e4:	f7ff ff4e 	bl	1a584 <os_deltatime>
    }

    if (tz != NULL) {
   1a6e8:	b114      	cbz	r4, 1a6f0 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
   1a6ea:	4b04      	ldr	r3, [pc, #16]	; (1a6fc <os_gettimeofday+0x34>)
   1a6ec:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1a6ee:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
   1a6f0:	4630      	mov	r0, r6
   1a6f2:	f000 f8df 	bl	1a8b4 <os_arch_restore_sr>

    return (0);
}
   1a6f6:	2000      	movs	r0, #0
   1a6f8:	bd70      	pop	{r4, r5, r6, pc}
   1a6fa:	bf00      	nop
   1a6fc:	10003930 	.word	0x10003930

0001a700 <os_time_is_set>:

bool
os_time_is_set(void)
{
    return basetod.utctime.tv_sec > 0;
   1a700:	4b04      	ldr	r3, [pc, #16]	; (1a714 <os_time_is_set+0x14>)
   1a702:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
   1a706:	2a01      	cmp	r2, #1
   1a708:	f173 0300 	sbcs.w	r3, r3, #0
}
   1a70c:	bfac      	ite	ge
   1a70e:	2001      	movge	r0, #1
   1a710:	2000      	movlt	r0, #0
   1a712:	4770      	bx	lr
   1a714:	10003930 	.word	0x10003930

0001a718 <os_time_populate_info>:
{
   1a718:	b510      	push	{r4, lr}
   1a71a:	4604      	mov	r4, r0
    if (new_tv == NULL && new_tz == NULL) {
   1a71c:	4608      	mov	r0, r1
   1a71e:	b181      	cbz	r1, 1a742 <os_time_populate_info+0x2a>
    if (new_tv == NULL) {
   1a720:	b1a0      	cbz	r0, 1a74c <os_time_populate_info+0x34>
    if (new_tz == NULL) {
   1a722:	b1aa      	cbz	r2, 1a750 <os_time_populate_info+0x38>
    info->tci_prev_tv = &basetod.utctime;
   1a724:	4b0b      	ldr	r3, [pc, #44]	; (1a754 <os_time_populate_info+0x3c>)
   1a726:	f103 0118 	add.w	r1, r3, #24
   1a72a:	6021      	str	r1, [r4, #0]
    info->tci_cur_tv = new_tv;
   1a72c:	60a0      	str	r0, [r4, #8]
    info->tci_prev_tz = &basetod.timezone;
   1a72e:	3328      	adds	r3, #40	; 0x28
   1a730:	6063      	str	r3, [r4, #4]
    info->tci_cur_tz = new_tz;
   1a732:	60e2      	str	r2, [r4, #12]
    info->tci_newly_synced = !os_time_is_set();
   1a734:	f7ff ffe4 	bl	1a700 <os_time_is_set>
   1a738:	f080 0001 	eor.w	r0, r0, #1
   1a73c:	7420      	strb	r0, [r4, #16]
    return 0;
   1a73e:	2000      	movs	r0, #0
}
   1a740:	bd10      	pop	{r4, pc}
    if (new_tv == NULL && new_tz == NULL) {
   1a742:	2a00      	cmp	r2, #0
   1a744:	d1ec      	bne.n	1a720 <os_time_populate_info+0x8>
        return SYS_EINVAL;
   1a746:	f06f 0001 	mvn.w	r0, #1
   1a74a:	e7f9      	b.n	1a740 <os_time_populate_info+0x28>
        new_tv = &basetod.utctime;
   1a74c:	4802      	ldr	r0, [pc, #8]	; (1a758 <os_time_populate_info+0x40>)
   1a74e:	e7e8      	b.n	1a722 <os_time_populate_info+0xa>
        new_tz = &basetod.timezone;
   1a750:	4a02      	ldr	r2, [pc, #8]	; (1a75c <os_time_populate_info+0x44>)
   1a752:	e7e7      	b.n	1a724 <os_time_populate_info+0xc>
   1a754:	10003930 	.word	0x10003930
   1a758:	10003948 	.word	0x10003948
   1a75c:	10003958 	.word	0x10003958

0001a760 <os_settimeofday>:
{
   1a760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a764:	b087      	sub	sp, #28
   1a766:	4604      	mov	r4, r0
   1a768:	460d      	mov	r5, r1
    OS_ENTER_CRITICAL(sr);
   1a76a:	f000 f89d 	bl	1a8a8 <os_arch_save_sr>
   1a76e:	4607      	mov	r7, r0
    rc = os_time_populate_info(&info, utctime, tz);
   1a770:	462a      	mov	r2, r5
   1a772:	4621      	mov	r1, r4
   1a774:	a801      	add	r0, sp, #4
   1a776:	f7ff ffcf 	bl	1a718 <os_time_populate_info>
   1a77a:	4606      	mov	r6, r0
    if (utctime != NULL) {
   1a77c:	b1bc      	cbz	r4, 1a7ae <os_settimeofday+0x4e>
        delta = os_time_get() - basetod.ostime;
   1a77e:	f7ff ff63 	bl	1a648 <os_time_get>
   1a782:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1a7d0 <os_settimeofday+0x70>
   1a786:	4641      	mov	r1, r8
   1a788:	f851 3b08 	ldr.w	r3, [r1], #8
   1a78c:	eba0 0903 	sub.w	r9, r0, r3
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   1a790:	460a      	mov	r2, r1
   1a792:	4648      	mov	r0, r9
   1a794:	f7ff fef6 	bl	1a584 <os_deltatime>
        basetod.utctime = *utctime;
   1a798:	f108 0c18 	add.w	ip, r8, #24
   1a79c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1a7a0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        basetod.ostime += delta;
   1a7a4:	f8d8 0000 	ldr.w	r0, [r8]
   1a7a8:	4448      	add	r0, r9
   1a7aa:	f8c8 0000 	str.w	r0, [r8]
    if (tz != NULL) {
   1a7ae:	b115      	cbz	r5, 1a7b6 <os_settimeofday+0x56>
        basetod.timezone = *tz;
   1a7b0:	6828      	ldr	r0, [r5, #0]
   1a7b2:	4b07      	ldr	r3, [pc, #28]	; (1a7d0 <os_settimeofday+0x70>)
   1a7b4:	6298      	str	r0, [r3, #40]	; 0x28
    OS_EXIT_CRITICAL(sr);
   1a7b6:	4638      	mov	r0, r7
   1a7b8:	f000 f87c 	bl	1a8b4 <os_arch_restore_sr>
    if (notify) {
   1a7bc:	b11e      	cbz	r6, 1a7c6 <os_settimeofday+0x66>
}
   1a7be:	2000      	movs	r0, #0
   1a7c0:	b007      	add	sp, #28
   1a7c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        os_time_change_notify(&info);
   1a7c6:	a801      	add	r0, sp, #4
   1a7c8:	f7ff fefe 	bl	1a5c8 <os_time_change_notify>
   1a7cc:	e7f7      	b.n	1a7be <os_settimeofday+0x5e>
   1a7ce:	bf00      	nop
   1a7d0:	10003930 	.word	0x10003930

0001a7d4 <os_get_uptime>:

void
os_get_uptime(struct os_timeval *tvp)
{
   1a7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a7d6:	b085      	sub	sp, #20
   1a7d8:	4606      	mov	r6, r0
  struct os_timeval tv;
  os_time_t delta;
  os_sr_t sr;
  os_time_t ostime;

  OS_ENTER_CRITICAL(sr);
   1a7da:	f000 f865 	bl	1a8a8 <os_arch_save_sr>
   1a7de:	4607      	mov	r7, r0
  tv = basetod.uptime;
   1a7e0:	4d0a      	ldr	r5, [pc, #40]	; (1a80c <os_get_uptime+0x38>)
   1a7e2:	466c      	mov	r4, sp
   1a7e4:	f105 0308 	add.w	r3, r5, #8
   1a7e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1a7ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ostime = basetod.ostime;
   1a7ee:	682d      	ldr	r5, [r5, #0]
  delta = os_time_get() - ostime;
   1a7f0:	f7ff ff2a 	bl	1a648 <os_time_get>
   1a7f4:	1b45      	subs	r5, r0, r5
  OS_EXIT_CRITICAL(sr);
   1a7f6:	4638      	mov	r0, r7
   1a7f8:	f000 f85c 	bl	1a8b4 <os_arch_restore_sr>

  os_deltatime(delta, &tv, tvp);
   1a7fc:	4632      	mov	r2, r6
   1a7fe:	4621      	mov	r1, r4
   1a800:	4628      	mov	r0, r5
   1a802:	f7ff febf 	bl	1a584 <os_deltatime>
}
   1a806:	b005      	add	sp, #20
   1a808:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a80a:	bf00      	nop
   1a80c:	10003930 	.word	0x10003930

0001a810 <os_get_uptime_usec>:

int64_t
os_get_uptime_usec(void)
{
   1a810:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a812:	b085      	sub	sp, #20
  struct os_timeval tv;

  os_get_uptime(&tv);
   1a814:	4668      	mov	r0, sp
   1a816:	f7ff ffdd 	bl	1a7d4 <os_get_uptime>

  return (tv.tv_sec * 1000000 + tv.tv_usec);
   1a81a:	9900      	ldr	r1, [sp, #0]
   1a81c:	9f01      	ldr	r7, [sp, #4]
   1a81e:	0178      	lsls	r0, r7, #5
   1a820:	014b      	lsls	r3, r1, #5
   1a822:	ea40 62d1 	orr.w	r2, r0, r1, lsr #27
   1a826:	1a5b      	subs	r3, r3, r1
   1a828:	eb62 0207 	sbc.w	r2, r2, r7
   1a82c:	0250      	lsls	r0, r2, #9
   1a82e:	ea40 50d3 	orr.w	r0, r0, r3, lsr #23
   1a832:	025e      	lsls	r6, r3, #9
   1a834:	4602      	mov	r2, r0
   1a836:	1873      	adds	r3, r6, r1
   1a838:	eb47 0202 	adc.w	r2, r7, r2
   1a83c:	0196      	lsls	r6, r2, #6
   1a83e:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
   1a842:	0198      	lsls	r0, r3, #6
   1a844:	1ac3      	subs	r3, r0, r3
   1a846:	eb66 0202 	sbc.w	r2, r6, r2
   1a84a:	185c      	adds	r4, r3, r1
   1a84c:	eb42 0507 	adc.w	r5, r2, r7
}
   1a850:	9802      	ldr	r0, [sp, #8]
   1a852:	4603      	mov	r3, r0
   1a854:	1820      	adds	r0, r4, r0
   1a856:	eb45 71e3 	adc.w	r1, r5, r3, asr #31
   1a85a:	b005      	add	sp, #20
   1a85c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a85e <os_time_ms_to_ticks>:

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
   1a85e:	b570      	push	{r4, r5, r6, lr}
   1a860:	460e      	mov	r6, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   1a862:	0e45      	lsrs	r5, r0, #25
   1a864:	01c4      	lsls	r4, r0, #7
   1a866:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a86a:	2300      	movs	r3, #0
   1a86c:	4620      	mov	r0, r4
   1a86e:	4629      	mov	r1, r5
   1a870:	f7f9 fd44 	bl	142fc <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
   1a874:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
   1a878:	bf08      	it	eq
   1a87a:	2c00      	cmpeq	r4, #0
   1a87c:	d202      	bcs.n	1a884 <os_time_ms_to_ticks+0x26>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
   1a87e:	6030      	str	r0, [r6, #0]
    return 0;
   1a880:	2000      	movs	r0, #0
}
   1a882:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   1a884:	2002      	movs	r0, #2
   1a886:	e7fc      	b.n	1a882 <os_time_ms_to_ticks+0x24>

0001a888 <os_arch_task_return_handler>:
{
    /*
     * If you are stuck here it means that task finished by
     * simple return which is not supported.
     */
    while (1);
   1a888:	e7fe      	b.n	1a888 <os_arch_task_return_handler>

0001a88a <timer_handler>:
{
   1a88a:	b508      	push	{r3, lr}
    os_time_advance(1);
   1a88c:	2001      	movs	r0, #1
   1a88e:	f7ff fee1 	bl	1a654 <os_time_advance>
}
   1a892:	bd08      	pop	{r3, pc}

0001a894 <os_arch_ctx_sw>:
{
   1a894:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   1a896:	f7ff fc95 	bl	1a1c4 <os_sched_ctx_sw_hook>
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   1a89a:	4b02      	ldr	r3, [pc, #8]	; (1a8a4 <os_arch_ctx_sw+0x10>)
   1a89c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1a8a0:	605a      	str	r2, [r3, #4]
}
   1a8a2:	bd08      	pop	{r3, pc}
   1a8a4:	e000ed00 	.word	0xe000ed00

0001a8a8 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a8a8:	f3ef 8010 	mrs	r0, PRIMASK
    isr_ctx = __get_PRIMASK() & 1;
   1a8ac:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("cpsid i" : : : "memory");
   1a8b0:	b672      	cpsid	i
}
   1a8b2:	4770      	bx	lr

0001a8b4 <os_arch_restore_sr>:
    if (!isr_ctx) {
   1a8b4:	b900      	cbnz	r0, 1a8b8 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   1a8b6:	b662      	cpsie	i
}
   1a8b8:	4770      	bx	lr

0001a8ba <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a8ba:	f3ef 8010 	mrs	r0, PRIMASK
}
   1a8be:	f000 0001 	and.w	r0, r0, #1
   1a8c2:	4770      	bx	lr

0001a8c4 <os_arch_task_stack_init>:
}

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   1a8c4:	b570      	push	{r4, r5, r6, lr}
   1a8c6:	4606      	mov	r6, r0
   1a8c8:	460c      	mov	r4, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   1a8ca:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40

    /* Zero out R1-R3, R12 */
    for (i = 9; i < 13; ++i) {
   1a8ce:	2309      	movs	r3, #9
   1a8d0:	e003      	b.n	1a8da <os_arch_task_stack_init+0x16>
        s[i] = 0;
   1a8d2:	2200      	movs	r2, #0
   1a8d4:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    for (i = 9; i < 13; ++i) {
   1a8d8:	3301      	adds	r3, #1
   1a8da:	2b0c      	cmp	r3, #12
   1a8dc:	ddf9      	ble.n	1a8d2 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   1a8de:	4628      	mov	r0, r5
   1a8e0:	f7f9 fc62 	bl	141a8 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   1a8e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1a8e8:	f844 3c04 	str.w	r3, [r4, #-4]
    sf->pc = (uint32_t)t->t_func;
   1a8ec:	6973      	ldr	r3, [r6, #20]
   1a8ee:	f844 3c08 	str.w	r3, [r4, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   1a8f2:	69b3      	ldr	r3, [r6, #24]
   1a8f4:	f844 3c20 	str.w	r3, [r4, #-32]
    /* Set function to cache returns from tasks. */
    sf->lr = (uint32_t)os_arch_task_return_handler;
   1a8f8:	4b02      	ldr	r3, [pc, #8]	; (1a904 <os_arch_task_stack_init+0x40>)
   1a8fa:	f844 3c0c 	str.w	r3, [r4, #-12]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
#endif

    return (s);
}
   1a8fe:	4628      	mov	r0, r5
   1a900:	bd70      	pop	{r4, r5, r6, pc}
   1a902:	bf00      	nop
   1a904:	0001a889 	.word	0x0001a889

0001a908 <os_arch_init>:

void
os_arch_init(void)
{
   1a908:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1a90a:	4a04      	ldr	r2, [pc, #16]	; (1a91c <os_arch_init+0x14>)
   1a90c:	6953      	ldr	r3, [r2, #20]
   1a90e:	f043 0310 	orr.w	r3, r3, #16
   1a912:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   1a914:	f7fe fb38 	bl	18f88 <os_init_idle_task>
}
   1a918:	bd08      	pop	{r3, pc}
   1a91a:	bf00      	nop
   1a91c:	e000ed00 	.word	0xe000ed00

0001a920 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   1a920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1a922:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1a926:	b90c      	cbnz	r4, 1a92c <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1a928:	2400      	movs	r4, #0
   1a92a:	e009      	b.n	1a940 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   1a92c:	2007      	movs	r0, #7
   1a92e:	e02e      	b.n	1a98e <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   1a930:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   1a934:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   1a938:	26ff      	movs	r6, #255	; 0xff
   1a93a:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1a93e:	3401      	adds	r4, #1
   1a940:	2cef      	cmp	r4, #239	; 0xef
   1a942:	d9f5      	bls.n	1a930 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1a944:	f06f 040d 	mvn.w	r4, #13
   1a948:	e007      	b.n	1a95a <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   1a94a:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a94c:	4e12      	ldr	r6, [pc, #72]	; (1a998 <os_arch_os_init+0x78>)
   1a94e:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a950:	3510      	adds	r5, #16
   1a952:	4f12      	ldr	r7, [pc, #72]	; (1a99c <os_arch_os_init+0x7c>)
   1a954:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   1a958:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1a95a:	2c19      	cmp	r4, #25
   1a95c:	ddf5      	ble.n	1a94a <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a95e:	4c0e      	ldr	r4, [pc, #56]	; (1a998 <os_arch_os_init+0x78>)
   1a960:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a962:	4e0f      	ldr	r6, [pc, #60]	; (1a9a0 <os_arch_os_init+0x80>)
   1a964:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a966:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a968:	4e0e      	ldr	r6, [pc, #56]	; (1a9a4 <os_arch_os_init+0x84>)
   1a96a:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a96c:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a96e:	4e0e      	ldr	r6, [pc, #56]	; (1a9a8 <os_arch_os_init+0x88>)
   1a970:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a972:	25e0      	movs	r5, #224	; 0xe0
   1a974:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   1a978:	2520      	movs	r5, #32
   1a97a:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1a97c:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   1a980:	f014 0f01 	tst.w	r4, #1
   1a984:	d004      	beq.n	1a990 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   1a986:	f8df c024 	ldr.w	ip, [pc, #36]	; 1a9ac <os_arch_os_init+0x8c>
   1a98a:	df00      	svc	0
        err = OS_OK;
   1a98c:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   1a98e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   1a990:	f7ff ffba 	bl	1a908 <os_arch_init>
        err = OS_OK;
   1a994:	2000      	movs	r0, #0
   1a996:	e7fa      	b.n	1a98e <os_arch_os_init+0x6e>
   1a998:	e000ed00 	.word	0xe000ed00
   1a99c:	0001422b 	.word	0x0001422b
   1a9a0:	000141af 	.word	0x000141af
   1a9a4:	000141f5 	.word	0x000141f5
   1a9a8:	0001421f 	.word	0x0001421f
   1a9ac:	0001a909 	.word	0x0001a909

0001a9b0 <os_arch_start>:

uint32_t
os_arch_start(void)
{
   1a9b0:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   1a9b2:	f7ff fcf9 	bl	1a3a8 <os_sched_next_task>
   1a9b6:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   1a9b8:	f7ff fc22 	bl	1a200 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   1a9bc:	6823      	ldr	r3, [r4, #0]
   1a9be:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1a9c0:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   1a9c4:	2106      	movs	r1, #6
   1a9c6:	2080      	movs	r0, #128	; 0x80
   1a9c8:	f018 fde4 	bl	33594 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   1a9cc:	4b03      	ldr	r3, [pc, #12]	; (1a9dc <os_arch_start+0x2c>)
   1a9ce:	2201      	movs	r2, #1
   1a9d0:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   1a9d2:	4620      	mov	r0, r4
   1a9d4:	f7ff ff5e 	bl	1a894 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   1a9d8:	69a0      	ldr	r0, [r4, #24]
   1a9da:	bd10      	pop	{r4, pc}
   1a9dc:	10002b08 	.word	0x10002b08

0001a9e0 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   1a9e0:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   1a9e2:	4815      	ldr	r0, [pc, #84]	; (1aa38 <os_arch_os_start+0x58>)
   1a9e4:	6800      	ldr	r0, [r0, #0]
   1a9e6:	3804      	subs	r0, #4
   1a9e8:	f7f9 fbd4 	bl	14194 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1a9ec:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1a9f0:	b9ec      	cbnz	r4, 1aa2e <os_arch_os_start+0x4e>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1a9f2:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   1a9f6:	f004 0403 	and.w	r4, r4, #3
   1a9fa:	2c02      	cmp	r4, #2
   1a9fc:	d00d      	beq.n	1aa1a <os_arch_os_start+0x3a>
   1a9fe:	d803      	bhi.n	1aa08 <os_arch_os_start+0x28>
   1aa00:	2c01      	cmp	r4, #1
   1aa02:	d80f      	bhi.n	1aa24 <os_arch_os_start+0x44>
   1aa04:	2008      	movs	r0, #8
            svc_os_arch_start();
        }
    }

    return err;
}
   1aa06:	bd10      	pop	{r4, pc}
        switch (__get_CONTROL() & 0x03) {
   1aa08:	2c03      	cmp	r4, #3
   1aa0a:	d10b      	bne.n	1aa24 <os_arch_os_start+0x44>
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   1aa0c:	4c0b      	ldr	r4, [pc, #44]	; (1aa3c <os_arch_os_start+0x5c>)
   1aa0e:	6824      	ldr	r4, [r4, #0]
   1aa10:	f014 0f01 	tst.w	r4, #1
   1aa14:	d106      	bne.n	1aa24 <os_arch_os_start+0x44>
                err = OS_ERR_PRIV;
   1aa16:	2008      	movs	r0, #8
   1aa18:	e7f5      	b.n	1aa06 <os_arch_os_start+0x26>
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   1aa1a:	4c08      	ldr	r4, [pc, #32]	; (1aa3c <os_arch_os_start+0x5c>)
   1aa1c:	6824      	ldr	r4, [r4, #0]
   1aa1e:	f014 0f01 	tst.w	r4, #1
   1aa22:	d106      	bne.n	1aa32 <os_arch_os_start+0x52>
    SVC_Call(os_arch_start);
   1aa24:	f8df c018 	ldr.w	ip, [pc, #24]	; 1aa40 <os_arch_os_start+0x60>
   1aa28:	df00      	svc	0
}
   1aa2a:	2000      	movs	r0, #0
   1aa2c:	e7eb      	b.n	1aa06 <os_arch_os_start+0x26>
    err = OS_ERR_IN_ISR;
   1aa2e:	2007      	movs	r0, #7
   1aa30:	e7e9      	b.n	1aa06 <os_arch_os_start+0x26>
                err = OS_ERR_PRIV;
   1aa32:	2008      	movs	r0, #8
   1aa34:	e7e7      	b.n	1aa06 <os_arch_os_start+0x26>
   1aa36:	bf00      	nop
   1aa38:	10002160 	.word	0x10002160
   1aa3c:	10003964 	.word	0x10003964
   1aa40:	0001a9b1 	.word	0x0001a9b1

0001aa44 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   1aa44:	4603      	mov	r3, r0
   1aa46:	b128      	cbz	r0, 1aa54 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   1aa48:	2000      	movs	r0, #0
   1aa4a:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   1aa4c:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   1aa4e:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   1aa50:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
   1aa52:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1aa54:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   1aa56:	4770      	bx	lr

0001aa58 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   1aa58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   1aa5a:	4b2e      	ldr	r3, [pc, #184]	; (1ab14 <os_mutex_release+0xbc>)
   1aa5c:	681b      	ldr	r3, [r3, #0]
   1aa5e:	2b00      	cmp	r3, #0
   1aa60:	d050      	beq.n	1ab04 <os_mutex_release+0xac>
   1aa62:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1aa64:	2800      	cmp	r0, #0
   1aa66:	d04f      	beq.n	1ab08 <os_mutex_release+0xb0>
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   1aa68:	f7ff fbc4 	bl	1a1f4 <os_sched_get_current_task>
   1aa6c:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   1aa6e:	88e3      	ldrh	r3, [r4, #6]
   1aa70:	2b00      	cmp	r3, #0
   1aa72:	d04b      	beq.n	1ab0c <os_mutex_release+0xb4>
   1aa74:	68a2      	ldr	r2, [r4, #8]
   1aa76:	4282      	cmp	r2, r0
   1aa78:	d14a      	bne.n	1ab10 <os_mutex_release+0xb8>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   1aa7a:	2b01      	cmp	r3, #1
   1aa7c:	d003      	beq.n	1aa86 <os_mutex_release+0x2e>
        --mu->mu_level;
   1aa7e:	3b01      	subs	r3, #1
   1aa80:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1aa82:	2000      	movs	r0, #0
        goto done;
   1aa84:	e03f      	b.n	1ab06 <os_mutex_release+0xae>
    }

    OS_ENTER_CRITICAL(sr);
   1aa86:	f7ff ff0f 	bl	1a8a8 <os_arch_save_sr>
   1aa8a:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   1aa8c:	88e3      	ldrh	r3, [r4, #6]
   1aa8e:	3b01      	subs	r3, #1
   1aa90:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   1aa92:	7aea      	ldrb	r2, [r5, #11]
   1aa94:	7963      	ldrb	r3, [r4, #5]
   1aa96:	429a      	cmp	r2, r3
   1aa98:	d11e      	bne.n	1aad8 <os_mutex_release+0x80>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   1aa9a:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   1aa9c:	b146      	cbz	r6, 1aab0 <os_mutex_release+0x58>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   1aa9e:	69f3      	ldr	r3, [r6, #28]
   1aaa0:	b1fb      	cbz	r3, 1aae2 <os_mutex_release+0x8a>
        os_sched_wakeup(rdy);
   1aaa2:	4630      	mov	r0, r6
   1aaa4:	f7ff fbfa 	bl	1a29c <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   1aaa8:	2301      	movs	r3, #1
   1aaaa:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   1aaac:	7af3      	ldrb	r3, [r6, #11]
   1aaae:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   1aab0:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   1aab2:	b116      	cbz	r6, 1aaba <os_mutex_release+0x62>
        rdy->t_lockcnt++;
   1aab4:	7bb3      	ldrb	r3, [r6, #14]
   1aab6:	3301      	adds	r3, #1
   1aab8:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   1aaba:	7bab      	ldrb	r3, [r5, #14]
   1aabc:	3b01      	subs	r3, #1
   1aabe:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   1aac0:	f7ff fc72 	bl	1a3a8 <os_sched_next_task>
   1aac4:	4604      	mov	r4, r0
    if (rdy != current) {
   1aac6:	4285      	cmp	r5, r0
   1aac8:	d015      	beq.n	1aaf6 <os_mutex_release+0x9e>
        resched = 1;
   1aaca:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   1aacc:	4638      	mov	r0, r7
   1aace:	f7ff fef1 	bl	1a8b4 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1aad2:	b995      	cbnz	r5, 1aafa <os_mutex_release+0xa2>
        os_sched(rdy);
    }

    ret = OS_OK;
   1aad4:	2000      	movs	r0, #0
   1aad6:	e016      	b.n	1ab06 <os_mutex_release+0xae>
        current->t_prio = mu->mu_prio;
   1aad8:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   1aada:	4628      	mov	r0, r5
   1aadc:	f7ff fc7c 	bl	1a3d8 <os_sched_resort>
   1aae0:	e7db      	b.n	1aa9a <os_mutex_release+0x42>
        assert(rdy->t_obj);
   1aae2:	f7f9 fe07 	bl	146f4 <hal_debugger_connected>
   1aae6:	b100      	cbz	r0, 1aaea <os_mutex_release+0x92>
   1aae8:	be01      	bkpt	0x0001
   1aaea:	2300      	movs	r3, #0
   1aaec:	461a      	mov	r2, r3
   1aaee:	4619      	mov	r1, r3
   1aaf0:	4618      	mov	r0, r3
   1aaf2:	f7fe f91d 	bl	18d30 <__assert_func>
    resched = 0;
   1aaf6:	2500      	movs	r5, #0
   1aaf8:	e7e8      	b.n	1aacc <os_mutex_release+0x74>
        os_sched(rdy);
   1aafa:	4620      	mov	r0, r4
   1aafc:	f7ff fc5a 	bl	1a3b4 <os_sched>
    ret = OS_OK;
   1ab00:	2000      	movs	r0, #0
   1ab02:	e000      	b.n	1ab06 <os_mutex_release+0xae>
        ret = OS_NOT_STARTED;
   1ab04:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   1ab06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   1ab08:	2003      	movs	r0, #3
   1ab0a:	e7fc      	b.n	1ab06 <os_mutex_release+0xae>
        ret = OS_BAD_MUTEX;
   1ab0c:	2005      	movs	r0, #5
   1ab0e:	e7fa      	b.n	1ab06 <os_mutex_release+0xae>
   1ab10:	2005      	movs	r0, #5
   1ab12:	e7f8      	b.n	1ab06 <os_mutex_release+0xae>
   1ab14:	10002b08 	.word	0x10002b08

0001ab18 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   1ab18:	4b36      	ldr	r3, [pc, #216]	; (1abf4 <os_mutex_pend+0xdc>)
   1ab1a:	681b      	ldr	r3, [r3, #0]
   1ab1c:	2b00      	cmp	r3, #0
   1ab1e:	d065      	beq.n	1abec <os_mutex_pend+0xd4>
{
   1ab20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab24:	4605      	mov	r5, r0
   1ab26:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1ab28:	2800      	cmp	r0, #0
   1ab2a:	d061      	beq.n	1abf0 <os_mutex_pend+0xd8>
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   1ab2c:	f7ff febc 	bl	1a8a8 <os_arch_save_sr>
   1ab30:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   1ab32:	f7ff fb5f 	bl	1a1f4 <os_sched_get_current_task>
   1ab36:	4604      	mov	r4, r0
    if (mu->mu_level == 0) {
   1ab38:	88ea      	ldrh	r2, [r5, #6]
   1ab3a:	b19a      	cbz	r2, 1ab64 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   1ab3c:	68ab      	ldr	r3, [r5, #8]
   1ab3e:	4283      	cmp	r3, r0
   1ab40:	d01d      	beq.n	1ab7e <os_mutex_pend+0x66>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   1ab42:	b31f      	cbz	r7, 1ab8c <os_mutex_pend+0x74>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   1ab44:	7ad9      	ldrb	r1, [r3, #11]
   1ab46:	7ac2      	ldrb	r2, [r0, #11]
   1ab48:	4291      	cmp	r1, r2
   1ab4a:	d824      	bhi.n	1ab96 <os_mutex_pend+0x7e>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   1ab4c:	6828      	ldr	r0, [r5, #0]
   1ab4e:	b360      	cbz	r0, 1abaa <os_mutex_pend+0x92>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1ab50:	4603      	mov	r3, r0
    last = NULL;
   1ab52:	2100      	movs	r1, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1ab54:	b323      	cbz	r3, 1aba0 <os_mutex_pend+0x88>
            if (current->t_prio < entry->t_prio) {
   1ab56:	7ae6      	ldrb	r6, [r4, #11]
   1ab58:	7ada      	ldrb	r2, [r3, #11]
   1ab5a:	4296      	cmp	r6, r2
   1ab5c:	d320      	bcc.n	1aba0 <os_mutex_pend+0x88>
                break;
            }
            last = entry;
   1ab5e:	4619      	mov	r1, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1ab60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1ab62:	e7f7      	b.n	1ab54 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   1ab64:	60a8      	str	r0, [r5, #8]
        mu->mu_prio  = current->t_prio;
   1ab66:	7ac3      	ldrb	r3, [r0, #11]
   1ab68:	716b      	strb	r3, [r5, #5]
        current->t_lockcnt++;
   1ab6a:	7b83      	ldrb	r3, [r0, #14]
   1ab6c:	3301      	adds	r3, #1
   1ab6e:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   1ab70:	2301      	movs	r3, #1
   1ab72:	80eb      	strh	r3, [r5, #6]
        OS_EXIT_CRITICAL(sr);
   1ab74:	4640      	mov	r0, r8
   1ab76:	f7ff fe9d 	bl	1a8b4 <os_arch_restore_sr>
        ret = OS_OK;
   1ab7a:	2000      	movs	r0, #0
        goto done;
   1ab7c:	e032      	b.n	1abe4 <os_mutex_pend+0xcc>
        ++mu->mu_level;
   1ab7e:	3201      	adds	r2, #1
   1ab80:	80ea      	strh	r2, [r5, #6]
        OS_EXIT_CRITICAL(sr);
   1ab82:	4640      	mov	r0, r8
   1ab84:	f7ff fe96 	bl	1a8b4 <os_arch_restore_sr>
        ret = OS_OK;
   1ab88:	2000      	movs	r0, #0
        goto done;
   1ab8a:	e02b      	b.n	1abe4 <os_mutex_pend+0xcc>
        OS_EXIT_CRITICAL(sr);
   1ab8c:	4640      	mov	r0, r8
   1ab8e:	f7ff fe91 	bl	1a8b4 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   1ab92:	2006      	movs	r0, #6
        goto done;
   1ab94:	e026      	b.n	1abe4 <os_mutex_pend+0xcc>
        mu->mu_owner->t_prio = current->t_prio;
   1ab96:	72da      	strb	r2, [r3, #11]
        os_sched_resort(mu->mu_owner);
   1ab98:	68a8      	ldr	r0, [r5, #8]
   1ab9a:	f7ff fc1d 	bl	1a3d8 <os_sched_resort>
   1ab9e:	e7d5      	b.n	1ab4c <os_mutex_pend+0x34>
        }
    }

    if (last) {
   1aba0:	b119      	cbz	r1, 1abaa <os_mutex_pend+0x92>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   1aba2:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   1aba4:	64e3      	str	r3, [r4, #76]	; 0x4c
   1aba6:	64cc      	str	r4, [r1, #76]	; 0x4c
   1aba8:	e001      	b.n	1abae <os_mutex_pend+0x96>
    } else {
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   1abaa:	64e0      	str	r0, [r4, #76]	; 0x4c
   1abac:	602c      	str	r4, [r5, #0]
    }

    /* Set mutex pointer in task */
    current->t_obj = mu;
   1abae:	61e5      	str	r5, [r4, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   1abb0:	7b63      	ldrb	r3, [r4, #13]
   1abb2:	f043 0304 	orr.w	r3, r3, #4
   1abb6:	7363      	strb	r3, [r4, #13]
    os_sched_sleep(current, timeout);
   1abb8:	4639      	mov	r1, r7
   1abba:	4620      	mov	r0, r4
   1abbc:	f7ff fb26 	bl	1a20c <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   1abc0:	4640      	mov	r0, r8
   1abc2:	f7ff fe77 	bl	1a8b4 <os_arch_restore_sr>

    os_sched(NULL);
   1abc6:	2000      	movs	r0, #0
   1abc8:	f7ff fbf4 	bl	1a3b4 <os_sched>

    OS_ENTER_CRITICAL(sr);
   1abcc:	f7ff fe6c 	bl	1a8a8 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   1abd0:	7b63      	ldrb	r3, [r4, #13]
   1abd2:	f023 0304 	bic.w	r3, r3, #4
   1abd6:	7363      	strb	r3, [r4, #13]
    OS_EXIT_CRITICAL(sr);
   1abd8:	f7ff fe6c 	bl	1a8b4 <os_arch_restore_sr>

    /* If we are owner we did not time out. */
    if (mu->mu_owner == current) {
   1abdc:	68ab      	ldr	r3, [r5, #8]
   1abde:	42a3      	cmp	r3, r4
   1abe0:	d002      	beq.n	1abe8 <os_mutex_pend+0xd0>
        ret = OS_OK;
    } else {
        ret = OS_TIMEOUT;
   1abe2:	2006      	movs	r0, #6
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   1abe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = OS_OK;
   1abe8:	2000      	movs	r0, #0
   1abea:	e7fb      	b.n	1abe4 <os_mutex_pend+0xcc>
        ret = OS_NOT_STARTED;
   1abec:	2009      	movs	r0, #9
}
   1abee:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1abf0:	2003      	movs	r0, #3
   1abf2:	e7f7      	b.n	1abe4 <os_mutex_pend+0xcc>
   1abf4:	10002b08 	.word	0x10002b08

0001abf8 <lrand48>:
#include <stdint.h>

extern unsigned short __rand48_seed[3];	/* Common with mrand48.c, srand48.c */

long lrand48(void)
{
   1abf8:	b508      	push	{r3, lr}
	return (uint32_t) jrand48(__rand48_seed) >> 1;
   1abfa:	4802      	ldr	r0, [pc, #8]	; (1ac04 <lrand48+0xc>)
   1abfc:	f000 fc38 	bl	1b470 <jrand48>
}
   1ac00:	0840      	lsrs	r0, r0, #1
   1ac02:	bd08      	pop	{r3, pc}
   1ac04:	10003968 	.word	0x10003968

0001ac08 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7) || defined(ARCH_cortex_m33)
    asm (".syntax unified                   \n"
   1ac08:	b470      	push	{r4, r5, r6}
   1ac0a:	f04f 0500 	mov.w	r5, #0
   1ac0e:	f022 0603 	bic.w	r6, r2, #3
   1ac12:	e005      	b.n	1ac20 <test1>

0001ac14 <loop1>:
   1ac14:	5943      	ldr	r3, [r0, r5]
   1ac16:	594c      	ldr	r4, [r1, r5]
   1ac18:	42a3      	cmp	r3, r4
   1ac1a:	d104      	bne.n	1ac26 <res1>
   1ac1c:	f105 0504 	add.w	r5, r5, #4

0001ac20 <test1>:
   1ac20:	42b5      	cmp	r5, r6
   1ac22:	d1f7      	bne.n	1ac14 <loop1>
   1ac24:	e00d      	b.n	1ac42 <test2>

0001ac26 <res1>:
   1ac26:	ba1b      	rev	r3, r3
   1ac28:	ba24      	rev	r4, r4
   1ac2a:	1b1b      	subs	r3, r3, r4
   1ac2c:	bf8c      	ite	hi
   1ac2e:	2301      	movhi	r3, #1
   1ac30:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   1ac34:	e009      	b.n	1ac4a <done>

0001ac36 <loop2>:
   1ac36:	5d43      	ldrb	r3, [r0, r5]
   1ac38:	5d4c      	ldrb	r4, [r1, r5]
   1ac3a:	1b1b      	subs	r3, r3, r4
   1ac3c:	d105      	bne.n	1ac4a <done>
   1ac3e:	f105 0501 	add.w	r5, r5, #1

0001ac42 <test2>:
   1ac42:	4295      	cmp	r5, r2
   1ac44:	d1f7      	bne.n	1ac36 <loop2>
   1ac46:	f04f 0300 	mov.w	r3, #0

0001ac4a <done>:
   1ac4a:	4618      	mov	r0, r3
   1ac4c:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   1ac4e:	4770      	bx	lr

0001ac50 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   1ac50:	e001      	b.n	1ac56 <test1>

0001ac52 <loop1>:
   1ac52:	588b      	ldr	r3, [r1, r2]
   1ac54:	5083      	str	r3, [r0, r2]

0001ac56 <test1>:
   1ac56:	3a04      	subs	r2, #4
   1ac58:	d5fb      	bpl.n	1ac52 <loop1>
   1ac5a:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   1ac5e:	e001      	b.n	1ac64 <test2>

0001ac60 <loop2>:
   1ac60:	5c8b      	ldrb	r3, [r1, r2]
   1ac62:	5483      	strb	r3, [r0, r2]

0001ac64 <test2>:
   1ac64:	3a01      	subs	r2, #1
   1ac66:	d5fb      	bpl.n	1ac60 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   1ac68:	4770      	bx	lr

0001ac6a <memmove>:
 */

#include <string.h>

void *memmove(void *dst, const void *src, size_t n)
{
   1ac6a:	b410      	push	{r4}
		q += (n - 1);
		asm volatile("std; rep; movsb; cld"
			     : "+c" (n), "+S"(p), "+D"(q));
	}
#else
	if (q < p) {
   1ac6c:	4281      	cmp	r1, r0
   1ac6e:	d809      	bhi.n	1ac84 <memmove+0x1a>
		while (n--) {
			*q++ = *p++;
		}
	} else {
		p += n;
   1ac70:	4411      	add	r1, r2
		q += n;
   1ac72:	1883      	adds	r3, r0, r2
		while (n--) {
   1ac74:	1e54      	subs	r4, r2, #1
   1ac76:	b172      	cbz	r2, 1ac96 <memmove+0x2c>
			*--q = *--p;
   1ac78:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
   1ac7c:	f803 2d01 	strb.w	r2, [r3, #-1]!
		while (n--) {
   1ac80:	4622      	mov	r2, r4
   1ac82:	e7f7      	b.n	1ac74 <memmove+0xa>
	char *q = dst;
   1ac84:	4603      	mov	r3, r0
		while (n--) {
   1ac86:	1e54      	subs	r4, r2, #1
   1ac88:	b12a      	cbz	r2, 1ac96 <memmove+0x2c>
			*q++ = *p++;
   1ac8a:	f811 2b01 	ldrb.w	r2, [r1], #1
   1ac8e:	f803 2b01 	strb.w	r2, [r3], #1
		while (n--) {
   1ac92:	4622      	mov	r2, r4
   1ac94:	e7f7      	b.n	1ac86 <memmove+0x1c>
		}
	}
#endif

	return dst;
}
   1ac96:	bc10      	pop	{r4}
   1ac98:	4770      	bx	lr

0001ac9a <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   1ac9a:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   1ac9c:	4605      	mov	r5, r0
   1ac9e:	b2c9      	uxtb	r1, r1
   1aca0:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1aca4:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1aca8:	18ab      	adds	r3, r5, r2
   1acaa:	2403      	movs	r4, #3
   1acac:	4023      	ands	r3, r4
   1acae:	1ad3      	subs	r3, r2, r3
   1acb0:	d40b      	bmi.n	1acca <memset+0x30>
   1acb2:	e001      	b.n	1acb8 <memset+0x1e>
   1acb4:	3a01      	subs	r2, #1
   1acb6:	54a9      	strb	r1, [r5, r2]
   1acb8:	429a      	cmp	r2, r3
   1acba:	d1fb      	bne.n	1acb4 <memset+0x1a>
   1acbc:	e000      	b.n	1acc0 <memset+0x26>
   1acbe:	50a9      	str	r1, [r5, r2]
   1acc0:	3a04      	subs	r2, #4
   1acc2:	d5fc      	bpl.n	1acbe <memset+0x24>
   1acc4:	3204      	adds	r2, #4
   1acc6:	e000      	b.n	1acca <memset+0x30>
   1acc8:	54a9      	strb	r1, [r5, r2]
   1acca:	3a01      	subs	r2, #1
   1accc:	d5fc      	bpl.n	1acc8 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   1acce:	bc30      	pop	{r4, r5}
   1acd0:	4770      	bx	lr

0001acd2 <strcasecmp>:

#include <string.h>
#include <ctype.h>

int strcasecmp(const char *s1, const char *s2)
{
   1acd2:	b430      	push	{r4, r5}
   1acd4:	4604      	mov	r4, r0
	const unsigned char *c1 = (const unsigned char *)s1;
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;
   1acd6:	e002      	b.n	1acde <strcasecmp+0xc>

	while (1) {
		/* toupper() expects an unsigned char (implicitly cast to int)
		   as input, and returns an int, which is exactly what we want. */
		d = toupper(ch = *c1++) - toupper(*c2++);
		if (d || !ch)
   1acd8:	1ac0      	subs	r0, r0, r3
   1acda:	d112      	bne.n	1ad02 <strcasecmp+0x30>
   1acdc:	b18a      	cbz	r2, 1ad02 <strcasecmp+0x30>
		d = toupper(ch = *c1++) - toupper(*c2++);
   1acde:	7822      	ldrb	r2, [r4, #0]
   1ace0:	3401      	adds	r4, #1
   1ace2:	4610      	mov	r0, r2
	return __c >= 'a' && __c <= 'z';
   1ace4:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
	return islower(__c) ? (__c & ~32) : __c;
   1ace8:	2b19      	cmp	r3, #25
   1acea:	d801      	bhi.n	1acf0 <strcasecmp+0x1e>
   1acec:	f022 0020 	bic.w	r0, r2, #32
   1acf0:	f811 3b01 	ldrb.w	r3, [r1], #1
	return __c >= 'a' && __c <= 'z';
   1acf4:	f1a3 0561 	sub.w	r5, r3, #97	; 0x61
	return islower(__c) ? (__c & ~32) : __c;
   1acf8:	2d19      	cmp	r5, #25
   1acfa:	d8ed      	bhi.n	1acd8 <strcasecmp+0x6>
   1acfc:	f023 0320 	bic.w	r3, r3, #32
   1ad00:	e7ea      	b.n	1acd8 <strcasecmp+0x6>
			break;
	}

	return d;
}
   1ad02:	bc30      	pop	{r4, r5}
   1ad04:	4770      	bx	lr

0001ad06 <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   1ad06:	b410      	push	{r4}
   1ad08:	4604      	mov	r4, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   1ad0a:	7822      	ldrb	r2, [r4, #0]
   1ad0c:	3401      	adds	r4, #1
   1ad0e:	7808      	ldrb	r0, [r1, #0]
   1ad10:	3101      	adds	r1, #1
		if (d || !ch)
   1ad12:	1a10      	subs	r0, r2, r0
   1ad14:	d101      	bne.n	1ad1a <strcmp+0x14>
   1ad16:	2a00      	cmp	r2, #0
   1ad18:	d1f7      	bne.n	1ad0a <strcmp+0x4>
			break;
	}

	return d;
}
   1ad1a:	bc10      	pop	{r4}
   1ad1c:	4770      	bx	lr

0001ad1e <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   1ad1e:	4603      	mov	r3, r0
	while (*ss)
   1ad20:	781a      	ldrb	r2, [r3, #0]
   1ad22:	b10a      	cbz	r2, 1ad28 <strlen+0xa>
		ss++;
   1ad24:	3301      	adds	r3, #1
   1ad26:	e7fb      	b.n	1ad20 <strlen+0x2>
	return ss - s;
}
   1ad28:	1a18      	subs	r0, r3, r0
   1ad2a:	4770      	bx	lr

0001ad2c <strncat>:
 */

#include <string.h>

char *strncat(char *dst, const char *src, size_t n)
{
   1ad2c:	b570      	push	{r4, r5, r6, lr}
   1ad2e:	4606      	mov	r6, r0
   1ad30:	460c      	mov	r4, r1
   1ad32:	4615      	mov	r5, r2
	char *q = strchr(dst, '\0');
   1ad34:	f7ff fff3 	bl	1ad1e <strlen>
   1ad38:	4430      	add	r0, r6
	const char *p = src;
	char ch;

	while (n--) {
   1ad3a:	462b      	mov	r3, r5
   1ad3c:	3d01      	subs	r5, #1
   1ad3e:	b13b      	cbz	r3, 1ad50 <strncat+0x24>
		*q++ = ch = *p++;
   1ad40:	4621      	mov	r1, r4
   1ad42:	f811 3b01 	ldrb.w	r3, [r1], #1
   1ad46:	f800 3b01 	strb.w	r3, [r0], #1
		if (!ch)
   1ad4a:	b113      	cbz	r3, 1ad52 <strncat+0x26>
		*q++ = ch = *p++;
   1ad4c:	460c      	mov	r4, r1
   1ad4e:	e7f4      	b.n	1ad3a <strncat+0xe>
			return dst;
	}
	*q = '\0';
   1ad50:	7003      	strb	r3, [r0, #0]

	return dst;
}
   1ad52:	4630      	mov	r0, r6
   1ad54:	bd70      	pop	{r4, r5, r6, pc}

0001ad56 <strtok_r>:
#include <string.h>

char *strtok_r(char *s, const char *delim, char **holder)
{
   1ad56:	b538      	push	{r3, r4, r5, lr}
   1ad58:	460d      	mov	r5, r1
   1ad5a:	4614      	mov	r4, r2
	if (s)
   1ad5c:	b100      	cbz	r0, 1ad60 <strtok_r+0xa>
		*holder = s;
   1ad5e:	6020      	str	r0, [r4, #0]

	do {
		s = strsep(holder, delim);
   1ad60:	4629      	mov	r1, r5
   1ad62:	4620      	mov	r0, r4
   1ad64:	f000 fc68 	bl	1b638 <strsep>
	} while (s && !*s);
   1ad68:	4603      	mov	r3, r0
   1ad6a:	b110      	cbz	r0, 1ad72 <strtok_r+0x1c>
   1ad6c:	7800      	ldrb	r0, [r0, #0]
   1ad6e:	2800      	cmp	r0, #0
   1ad70:	d0f6      	beq.n	1ad60 <strtok_r+0xa>

	return s;
}
   1ad72:	4618      	mov	r0, r3
   1ad74:	bd38      	pop	{r3, r4, r5, pc}

0001ad76 <strtol>:
#include <stddef.h>
#include <stdlib.h>
#include <strntoimax.h>

TYPE NAME(const char *nptr, char **endptr, int base)
{
   1ad76:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   1ad78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ad7c:	f000 fbce 	bl	1b51c <strntoumax>
}
   1ad80:	bd08      	pop	{r3, pc}

0001ad82 <strtoul>:
{
   1ad82:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   1ad84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ad88:	f000 fbc8 	bl	1b51c <strntoumax>
}
   1ad8c:	bd08      	pop	{r3, pc}

0001ad8e <strtoull>:
{
   1ad8e:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   1ad90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ad94:	f000 fbc2 	bl	1b51c <strntoumax>
}
   1ad98:	bd08      	pop	{r3, pc}

0001ad9a <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   1ad9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad9e:	b087      	sub	sp, #28
   1ada0:	4604      	mov	r4, r0
   1ada2:	4692      	mov	sl, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   1ada4:	6853      	ldr	r3, [r2, #4]
   1ada6:	9304      	str	r3, [sp, #16]

    if (p->hh == 1) {
   1ada8:	7893      	ldrb	r3, [r2, #2]
   1adaa:	f003 0330 	and.w	r3, r3, #48	; 0x30
   1adae:	2b10      	cmp	r3, #16
   1adb0:	d018      	beq.n	1ade4 <ui2a+0x4a>
   1adb2:	460d      	mov	r5, r1
        num = (unsigned short int)num;
    } else if (p->hh == 2) {
   1adb4:	2b20      	cmp	r3, #32
   1adb6:	d019      	beq.n	1adec <ui2a+0x52>
{
   1adb8:	2601      	movs	r6, #1
   1adba:	2700      	movs	r7, #0
        num = (unsigned char)num;
    }

    while (num / d >= p->base)
   1adbc:	4632      	mov	r2, r6
   1adbe:	463b      	mov	r3, r7
   1adc0:	4620      	mov	r0, r4
   1adc2:	4629      	mov	r1, r5
   1adc4:	f7f9 fa9a 	bl	142fc <__aeabi_uldivmod>
   1adc8:	f89a 8003 	ldrb.w	r8, [sl, #3]
   1adcc:	f04f 0900 	mov.w	r9, #0
   1add0:	4549      	cmp	r1, r9
   1add2:	bf08      	it	eq
   1add4:	4540      	cmpeq	r0, r8
   1add6:	d30e      	bcc.n	1adf6 <ui2a+0x5c>
        d *= p->base;
   1add8:	fb08 f307 	mul.w	r3, r8, r7
   1addc:	fba6 6708 	umull	r6, r7, r6, r8
   1ade0:	441f      	add	r7, r3
   1ade2:	e7eb      	b.n	1adbc <ui2a+0x22>
        num = (unsigned short int)num;
   1ade4:	b283      	uxth	r3, r0
   1ade6:	461c      	mov	r4, r3
   1ade8:	2500      	movs	r5, #0
   1adea:	e7e5      	b.n	1adb8 <ui2a+0x1e>
        num = (unsigned char)num;
   1adec:	f000 03ff 	and.w	r3, r0, #255	; 0xff
   1adf0:	461c      	mov	r4, r3
   1adf2:	2500      	movs	r5, #0
   1adf4:	e7e0      	b.n	1adb8 <ui2a+0x1e>
    int n = 0;
   1adf6:	f04f 0b00 	mov.w	fp, #0
   1adfa:	f8cd a014 	str.w	sl, [sp, #20]
   1adfe:	e00c      	b.n	1ae1a <ui2a+0x80>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1ae00:	2230      	movs	r2, #48	; 0x30
   1ae02:	9b04      	ldr	r3, [sp, #16]
   1ae04:	9c00      	ldr	r4, [sp, #0]
   1ae06:	4414      	add	r4, r2
   1ae08:	f803 4b01 	strb.w	r4, [r3], #1
            ++n;
   1ae0c:	f10b 0b01 	add.w	fp, fp, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1ae10:	9304      	str	r3, [sp, #16]
   1ae12:	4606      	mov	r6, r0
   1ae14:	460f      	mov	r7, r1
   1ae16:	9c02      	ldr	r4, [sp, #8]
   1ae18:	9d03      	ldr	r5, [sp, #12]
    while (d != 0) {
   1ae1a:	ea56 0307 	orrs.w	r3, r6, r7
   1ae1e:	d034      	beq.n	1ae8a <ui2a+0xf0>
        unsigned long long  dgt = num / d;
   1ae20:	4632      	mov	r2, r6
   1ae22:	463b      	mov	r3, r7
   1ae24:	4620      	mov	r0, r4
   1ae26:	4629      	mov	r1, r5
   1ae28:	f7f9 fa68 	bl	142fc <__aeabi_uldivmod>
   1ae2c:	9000      	str	r0, [sp, #0]
   1ae2e:	9101      	str	r1, [sp, #4]
        num %= d;
   1ae30:	4632      	mov	r2, r6
   1ae32:	463b      	mov	r3, r7
   1ae34:	4620      	mov	r0, r4
   1ae36:	4629      	mov	r1, r5
   1ae38:	f7f9 fa60 	bl	142fc <__aeabi_uldivmod>
   1ae3c:	9202      	str	r2, [sp, #8]
   1ae3e:	9303      	str	r3, [sp, #12]
        d /= p->base;
   1ae40:	9b05      	ldr	r3, [sp, #20]
   1ae42:	f893 8003 	ldrb.w	r8, [r3, #3]
   1ae46:	f04f 0900 	mov.w	r9, #0
   1ae4a:	4642      	mov	r2, r8
   1ae4c:	464b      	mov	r3, r9
   1ae4e:	4630      	mov	r0, r6
   1ae50:	4639      	mov	r1, r7
   1ae52:	f7f9 fa53 	bl	142fc <__aeabi_uldivmod>
        if (n || dgt > 0 || d == 0) {
   1ae56:	f1bb 0f00 	cmp.w	fp, #0
   1ae5a:	d107      	bne.n	1ae6c <ui2a+0xd2>
   1ae5c:	42bd      	cmp	r5, r7
   1ae5e:	bf08      	it	eq
   1ae60:	42b4      	cmpeq	r4, r6
   1ae62:	d203      	bcs.n	1ae6c <ui2a+0xd2>
   1ae64:	454f      	cmp	r7, r9
   1ae66:	bf08      	it	eq
   1ae68:	4546      	cmpeq	r6, r8
   1ae6a:	d2d2      	bcs.n	1ae12 <ui2a+0x78>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1ae6c:	e9dd 3400 	ldrd	r3, r4, [sp]
   1ae70:	2c00      	cmp	r4, #0
   1ae72:	bf08      	it	eq
   1ae74:	2b0a      	cmpeq	r3, #10
   1ae76:	d3c3      	bcc.n	1ae00 <ui2a+0x66>
   1ae78:	9b05      	ldr	r3, [sp, #20]
   1ae7a:	789b      	ldrb	r3, [r3, #2]
   1ae7c:	f013 0f04 	tst.w	r3, #4
   1ae80:	d001      	beq.n	1ae86 <ui2a+0xec>
   1ae82:	2237      	movs	r2, #55	; 0x37
   1ae84:	e7bd      	b.n	1ae02 <ui2a+0x68>
   1ae86:	2257      	movs	r2, #87	; 0x57
   1ae88:	e7bb      	b.n	1ae02 <ui2a+0x68>
        }
    }
    *bf = 0;
   1ae8a:	2300      	movs	r3, #0
   1ae8c:	9a04      	ldr	r2, [sp, #16]
   1ae8e:	7013      	strb	r3, [r2, #0]
}
   1ae90:	b007      	add	sp, #28
   1ae92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ae96 <i2a>:

static void i2a(long long int num, struct param *p)
{
   1ae96:	b510      	push	{r4, lr}
   1ae98:	4604      	mov	r4, r0
   1ae9a:	460b      	mov	r3, r1
   1ae9c:	4620      	mov	r0, r4
   1ae9e:	4619      	mov	r1, r3
    if (num < 0) {
   1aea0:	2c00      	cmp	r4, #0
   1aea2:	f173 0300 	sbcs.w	r3, r3, #0
   1aea6:	db02      	blt.n	1aeae <i2a+0x18>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   1aea8:	f7ff ff77 	bl	1ad9a <ui2a>
}
   1aeac:	bd10      	pop	{r4, pc}
        num = -num;
   1aeae:	4260      	negs	r0, r4
   1aeb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   1aeb4:	7893      	ldrb	r3, [r2, #2]
   1aeb6:	f043 0301 	orr.w	r3, r3, #1
   1aeba:	7093      	strb	r3, [r2, #2]
   1aebc:	e7f4      	b.n	1aea8 <i2a+0x12>

0001aebe <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   1aebe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1aec2:	b2db      	uxtb	r3, r3
   1aec4:	2b09      	cmp	r3, #9
   1aec6:	d90b      	bls.n	1aee0 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   1aec8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1aecc:	b2db      	uxtb	r3, r3
   1aece:	2b05      	cmp	r3, #5
   1aed0:	d908      	bls.n	1aee4 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   1aed2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1aed6:	b2db      	uxtb	r3, r3
   1aed8:	2b05      	cmp	r3, #5
   1aeda:	d805      	bhi.n	1aee8 <a2d+0x2a>
        return ch - 'A' + 10;
   1aedc:	3837      	subs	r0, #55	; 0x37
   1aede:	4770      	bx	lr
        return ch - '0';
   1aee0:	3830      	subs	r0, #48	; 0x30
   1aee2:	4770      	bx	lr
        return ch - 'a' + 10;
   1aee4:	3857      	subs	r0, #87	; 0x57
   1aee6:	4770      	bx	lr
    else
        return -1;
   1aee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1aeec:	4770      	bx	lr

0001aeee <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   1aeee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1aef2:	4605      	mov	r5, r0
   1aef4:	4688      	mov	r8, r1
   1aef6:	4616      	mov	r6, r2
   1aef8:	4699      	mov	r9, r3
    const char *p = *src;
   1aefa:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   1aefc:	2700      	movs	r7, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   1aefe:	4628      	mov	r0, r5
   1af00:	f7ff ffdd 	bl	1aebe <a2d>
   1af04:	2800      	cmp	r0, #0
   1af06:	db06      	blt.n	1af16 <a2i+0x28>
        if (digit > base)
   1af08:	42b0      	cmp	r0, r6
   1af0a:	dc04      	bgt.n	1af16 <a2i+0x28>
            break;
        num = num * base + digit;
   1af0c:	fb06 0707 	mla	r7, r6, r7, r0
        ch = *p++;
   1af10:	f814 5b01 	ldrb.w	r5, [r4], #1
   1af14:	e7f3      	b.n	1aefe <a2i+0x10>
    }
    *src = p;
   1af16:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   1af1a:	f889 7000 	strb.w	r7, [r9]
    return ch;
}
   1af1e:	4628      	mov	r0, r5
   1af20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001af24 <putf>:

static int putf(FILE *putp, char c)
{
   1af24:	b500      	push	{lr}
   1af26:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   1af28:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   1af2c:	6803      	ldr	r3, [r0, #0]
   1af2e:	681b      	ldr	r3, [r3, #0]
   1af30:	b143      	cbz	r3, 1af44 <putf+0x20>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   1af32:	2201      	movs	r2, #1
   1af34:	f10d 0107 	add.w	r1, sp, #7
   1af38:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   1af3a:	2801      	cmp	r0, #1
   1af3c:	d102      	bne.n	1af44 <putf+0x20>
    if (fputc(c, putp) == EOF)
        return 0;
    else
        return 1;
}
   1af3e:	b003      	add	sp, #12
   1af40:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   1af44:	2000      	movs	r0, #0
   1af46:	e7fa      	b.n	1af3e <putf+0x1a>

0001af48 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   1af48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af4c:	4607      	mov	r7, r0
   1af4e:	4688      	mov	r8, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   1af50:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   1af52:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   1af54:	f813 2b01 	ldrb.w	r2, [r3], #1
   1af58:	b11a      	cbz	r2, 1af62 <putchw+0x1a>
   1af5a:	2c00      	cmp	r4, #0
   1af5c:	dd01      	ble.n	1af62 <putchw+0x1a>
        n--;
   1af5e:	3c01      	subs	r4, #1
   1af60:	e7f8      	b.n	1af54 <putchw+0xc>
    if (p->sign)
   1af62:	f898 3002 	ldrb.w	r3, [r8, #2]
   1af66:	f013 0f01 	tst.w	r3, #1
   1af6a:	d000      	beq.n	1af6e <putchw+0x26>
        n--;
   1af6c:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   1af6e:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   1af72:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1af76:	b29b      	uxth	r3, r3
   1af78:	f241 0202 	movw	r2, #4098	; 0x1002
   1af7c:	4293      	cmp	r3, r2
   1af7e:	d028      	beq.n	1afd2 <putchw+0x8a>
        n -= 2;
    else if (p->alt && p->base == 8)
   1af80:	f640 0202 	movw	r2, #2050	; 0x802
   1af84:	4293      	cmp	r3, r2
   1af86:	d026      	beq.n	1afd6 <putchw+0x8e>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   1af88:	f8d8 3000 	ldr.w	r3, [r8]
   1af8c:	4e36      	ldr	r6, [pc, #216]	; (1b068 <putchw+0x120>)
   1af8e:	401e      	ands	r6, r3
   1af90:	b34e      	cbz	r6, 1afe6 <putchw+0x9e>
    unsigned written = 0;
   1af92:	2600      	movs	r6, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   1af94:	f898 3002 	ldrb.w	r3, [r8, #2]
   1af98:	f013 0f01 	tst.w	r3, #1
   1af9c:	d128      	bne.n	1aff0 <putchw+0xa8>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   1af9e:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   1afa2:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1afa6:	b29b      	uxth	r3, r3
   1afa8:	f241 0202 	movw	r2, #4098	; 0x1002
   1afac:	4293      	cmp	r3, r2
   1afae:	d025      	beq.n	1affc <putchw+0xb4>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   1afb0:	f640 0202 	movw	r2, #2050	; 0x802
   1afb4:	4293      	cmp	r3, r2
   1afb6:	d033      	beq.n	1b020 <putchw+0xd8>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   1afb8:	f898 3001 	ldrb.w	r3, [r8, #1]
   1afbc:	bbe3      	cbnz	r3, 1b038 <putchw+0xf0>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   1afbe:	f8d8 5004 	ldr.w	r5, [r8, #4]
    while ((ch = *bf++))
   1afc2:	f815 1b01 	ldrb.w	r1, [r5], #1
   1afc6:	b3e1      	cbz	r1, 1b042 <putchw+0xfa>
        written += putf(putp, ch);
   1afc8:	4638      	mov	r0, r7
   1afca:	f7ff ffab 	bl	1af24 <putf>
   1afce:	4406      	add	r6, r0
   1afd0:	e7f7      	b.n	1afc2 <putchw+0x7a>
        n -= 2;
   1afd2:	3c02      	subs	r4, #2
   1afd4:	e7d8      	b.n	1af88 <putchw+0x40>
        n--;
   1afd6:	3c01      	subs	r4, #1
   1afd8:	e7d6      	b.n	1af88 <putchw+0x40>
            written += putf(putp, ' ');
   1afda:	2120      	movs	r1, #32
   1afdc:	4638      	mov	r0, r7
   1afde:	f7ff ffa1 	bl	1af24 <putf>
   1afe2:	4406      	add	r6, r0
        while (n-- > 0)
   1afe4:	462c      	mov	r4, r5
   1afe6:	1e65      	subs	r5, r4, #1
   1afe8:	2c00      	cmp	r4, #0
   1afea:	dcf6      	bgt.n	1afda <putchw+0x92>
   1afec:	462c      	mov	r4, r5
   1afee:	e7d1      	b.n	1af94 <putchw+0x4c>
        written += putf(putp, '-');
   1aff0:	212d      	movs	r1, #45	; 0x2d
   1aff2:	4638      	mov	r0, r7
   1aff4:	f7ff ff96 	bl	1af24 <putf>
   1aff8:	4406      	add	r6, r0
   1affa:	e7d0      	b.n	1af9e <putchw+0x56>
        written += putf(putp, '0');
   1affc:	2130      	movs	r1, #48	; 0x30
   1affe:	4638      	mov	r0, r7
   1b000:	f7ff ff90 	bl	1af24 <putf>
   1b004:	4406      	add	r6, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   1b006:	f898 3002 	ldrb.w	r3, [r8, #2]
   1b00a:	f013 0f04 	tst.w	r3, #4
   1b00e:	d005      	beq.n	1b01c <putchw+0xd4>
   1b010:	2158      	movs	r1, #88	; 0x58
   1b012:	4638      	mov	r0, r7
   1b014:	f7ff ff86 	bl	1af24 <putf>
   1b018:	4406      	add	r6, r0
   1b01a:	e7cd      	b.n	1afb8 <putchw+0x70>
   1b01c:	2178      	movs	r1, #120	; 0x78
   1b01e:	e7f8      	b.n	1b012 <putchw+0xca>
        written += putf(putp, '0');
   1b020:	2130      	movs	r1, #48	; 0x30
   1b022:	4638      	mov	r0, r7
   1b024:	f7ff ff7e 	bl	1af24 <putf>
   1b028:	4406      	add	r6, r0
   1b02a:	e7c5      	b.n	1afb8 <putchw+0x70>
            written += putf(putp, '0');
   1b02c:	2130      	movs	r1, #48	; 0x30
   1b02e:	4638      	mov	r0, r7
   1b030:	f7ff ff78 	bl	1af24 <putf>
   1b034:	4406      	add	r6, r0
        while (n-- > 0)
   1b036:	462c      	mov	r4, r5
   1b038:	1e65      	subs	r5, r4, #1
   1b03a:	2c00      	cmp	r4, #0
   1b03c:	dcf6      	bgt.n	1b02c <putchw+0xe4>
   1b03e:	462c      	mov	r4, r5
   1b040:	e7bd      	b.n	1afbe <putchw+0x76>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   1b042:	f898 3002 	ldrb.w	r3, [r8, #2]
   1b046:	f013 0f08 	tst.w	r3, #8
   1b04a:	d102      	bne.n	1b052 <putchw+0x10a>
        while (n-- > 0)
            written += putf(putp, ' ');
    }
    
    return written;
}
   1b04c:	4630      	mov	r0, r6
   1b04e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (n-- > 0)
   1b052:	1e65      	subs	r5, r4, #1
   1b054:	2c00      	cmp	r4, #0
   1b056:	ddf9      	ble.n	1b04c <putchw+0x104>
            written += putf(putp, ' ');
   1b058:	2120      	movs	r1, #32
   1b05a:	4638      	mov	r0, r7
   1b05c:	f7ff ff62 	bl	1af24 <putf>
   1b060:	4406      	add	r6, r0
        while (n-- > 0)
   1b062:	462c      	mov	r4, r5
   1b064:	e7f5      	b.n	1b052 <putchw+0x10a>
   1b066:	bf00      	nop
   1b068:	0008ff00 	.word	0x0008ff00

0001b06c <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   1b06c:	b160      	cbz	r0, 1b088 <intarg+0x1c>
   1b06e:	2801      	cmp	r0, #1
   1b070:	d017      	beq.n	1b0a2 <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   1b072:	b319      	cbz	r1, 1b0bc <intarg+0x50>
            val = va_arg(*va, long long);
   1b074:	6813      	ldr	r3, [r2, #0]
   1b076:	3307      	adds	r3, #7
   1b078:	f023 0307 	bic.w	r3, r3, #7
   1b07c:	f103 0108 	add.w	r1, r3, #8
   1b080:	6011      	str	r1, [r2, #0]
   1b082:	e9d3 0100 	ldrd	r0, r1, [r3]
   1b086:	4770      	bx	lr
        if (sign) {
   1b088:	b129      	cbz	r1, 1b096 <intarg+0x2a>
            val = va_arg(*va, int);
   1b08a:	6813      	ldr	r3, [r2, #0]
   1b08c:	1d19      	adds	r1, r3, #4
   1b08e:	6011      	str	r1, [r2, #0]
   1b090:	6818      	ldr	r0, [r3, #0]
   1b092:	17c1      	asrs	r1, r0, #31
   1b094:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   1b096:	6813      	ldr	r3, [r2, #0]
   1b098:	1d19      	adds	r1, r3, #4
   1b09a:	6011      	str	r1, [r2, #0]
   1b09c:	6818      	ldr	r0, [r3, #0]
   1b09e:	2100      	movs	r1, #0
   1b0a0:	4770      	bx	lr
        if (sign) {
   1b0a2:	b129      	cbz	r1, 1b0b0 <intarg+0x44>
            val = va_arg(*va, long);
   1b0a4:	6813      	ldr	r3, [r2, #0]
   1b0a6:	1d19      	adds	r1, r3, #4
   1b0a8:	6011      	str	r1, [r2, #0]
   1b0aa:	6818      	ldr	r0, [r3, #0]
   1b0ac:	17c1      	asrs	r1, r0, #31
   1b0ae:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   1b0b0:	6813      	ldr	r3, [r2, #0]
   1b0b2:	1d19      	adds	r1, r3, #4
   1b0b4:	6011      	str	r1, [r2, #0]
   1b0b6:	6818      	ldr	r0, [r3, #0]
   1b0b8:	2100      	movs	r1, #0
   1b0ba:	4770      	bx	lr
        } else {
            val = va_arg(*va, unsigned long long);
   1b0bc:	6813      	ldr	r3, [r2, #0]
   1b0be:	3307      	adds	r3, #7
   1b0c0:	f023 0307 	bic.w	r3, r3, #7
   1b0c4:	f103 0108 	add.w	r1, r3, #8
   1b0c8:	6011      	str	r1, [r2, #0]
   1b0ca:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   1b0ce:	4770      	bx	lr

0001b0d0 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   1b0d0:	b570      	push	{r4, r5, r6, lr}
   1b0d2:	b08a      	sub	sp, #40	; 0x28
   1b0d4:	4606      	mov	r6, r0
   1b0d6:	9101      	str	r1, [sp, #4]
   1b0d8:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   1b0da:	ab02      	add	r3, sp, #8
   1b0dc:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   1b0de:	2500      	movs	r5, #0

    while ((ch = *(fmt++))) {
   1b0e0:	9b01      	ldr	r3, [sp, #4]
   1b0e2:	1c5a      	adds	r2, r3, #1
   1b0e4:	9201      	str	r2, [sp, #4]
   1b0e6:	7819      	ldrb	r1, [r3, #0]
   1b0e8:	2900      	cmp	r1, #0
   1b0ea:	f000 816e 	beq.w	1b3ca <tfp_format+0x2fa>
        if (ch != '%') {
   1b0ee:	2925      	cmp	r1, #37	; 0x25
   1b0f0:	d004      	beq.n	1b0fc <tfp_format+0x2c>
            written += putf(putp, ch);
   1b0f2:	4630      	mov	r0, r6
   1b0f4:	f7ff ff16 	bl	1af24 <putf>
   1b0f8:	4405      	add	r5, r0
   1b0fa:	e7f1      	b.n	1b0e0 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   1b0fc:	2200      	movs	r2, #0
   1b0fe:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   1b102:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   1b106:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
            p.hh = 0;
   1b10a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1b10e:	f362 1305 	bfi	r3, r2, #4, #2
   1b112:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   1b116:	9b01      	ldr	r3, [sp, #4]
   1b118:	1c5a      	adds	r2, r3, #1
   1b11a:	9201      	str	r2, [sp, #4]
   1b11c:	781c      	ldrb	r4, [r3, #0]
   1b11e:	b12c      	cbz	r4, 1b12c <tfp_format+0x5c>
                switch (ch) {
   1b120:	2c2d      	cmp	r4, #45	; 0x2d
   1b122:	d073      	beq.n	1b20c <tfp_format+0x13c>
   1b124:	2c30      	cmp	r4, #48	; 0x30
   1b126:	d061      	beq.n	1b1ec <tfp_format+0x11c>
   1b128:	2c23      	cmp	r4, #35	; 0x23
   1b12a:	d068      	beq.n	1b1fe <tfp_format+0x12e>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   1b12c:	2c2a      	cmp	r4, #42	; 0x2a
   1b12e:	d077      	beq.n	1b220 <tfp_format+0x150>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   1b130:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1b134:	b2db      	uxtb	r3, r3
   1b136:	2b09      	cmp	r3, #9
   1b138:	f240 8086 	bls.w	1b248 <tfp_format+0x178>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   1b13c:	2c6c      	cmp	r4, #108	; 0x6c
   1b13e:	f000 808b 	beq.w	1b258 <tfp_format+0x188>

                if (ch == 'l') {
                    ch = *(fmt++);
                    lng = 2;
                }
            } else if (ch == 'h') {
   1b142:	2c68      	cmp	r4, #104	; 0x68
   1b144:	f000 8095 	beq.w	1b272 <tfp_format+0x1a2>
            lng = 0;
   1b148:	2000      	movs	r0, #0
                    ch = *(fmt++);
                    p.hh = 2;
                }
            }

            if (ch == 'z') {
   1b14a:	2c7a      	cmp	r4, #122	; 0x7a
   1b14c:	f000 80ab 	beq.w	1b2a6 <tfp_format+0x1d6>
                ch = *(fmt++);
            }

            switch (ch) {
   1b150:	2c78      	cmp	r4, #120	; 0x78
   1b152:	d8c5      	bhi.n	1b0e0 <tfp_format+0x10>
   1b154:	2c58      	cmp	r4, #88	; 0x58
   1b156:	f0c0 80ab 	bcc.w	1b2b0 <tfp_format+0x1e0>
   1b15a:	f1a4 0358 	sub.w	r3, r4, #88	; 0x58
   1b15e:	2b20      	cmp	r3, #32
   1b160:	d8be      	bhi.n	1b0e0 <tfp_format+0x10>
   1b162:	a201      	add	r2, pc, #4	; (adr r2, 1b168 <tfp_format+0x98>)
   1b164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1b168:	0001b309 	.word	0x0001b309
   1b16c:	0001b0e1 	.word	0x0001b0e1
   1b170:	0001b0e1 	.word	0x0001b0e1
   1b174:	0001b0e1 	.word	0x0001b0e1
   1b178:	0001b0e1 	.word	0x0001b0e1
   1b17c:	0001b0e1 	.word	0x0001b0e1
   1b180:	0001b0e1 	.word	0x0001b0e1
   1b184:	0001b0e1 	.word	0x0001b0e1
   1b188:	0001b0e1 	.word	0x0001b0e1
   1b18c:	0001b0e1 	.word	0x0001b0e1
   1b190:	0001b0e1 	.word	0x0001b0e1
   1b194:	0001b39f 	.word	0x0001b39f
   1b198:	0001b2e9 	.word	0x0001b2e9
   1b19c:	0001b0e1 	.word	0x0001b0e1
   1b1a0:	0001b0e1 	.word	0x0001b0e1
   1b1a4:	0001b0e1 	.word	0x0001b0e1
   1b1a8:	0001b0e1 	.word	0x0001b0e1
   1b1ac:	0001b2e9 	.word	0x0001b2e9
   1b1b0:	0001b0e1 	.word	0x0001b0e1
   1b1b4:	0001b0e1 	.word	0x0001b0e1
   1b1b8:	0001b0e1 	.word	0x0001b0e1
   1b1bc:	0001b0e1 	.word	0x0001b0e1
   1b1c0:	0001b0e1 	.word	0x0001b0e1
   1b1c4:	0001b33d 	.word	0x0001b33d
   1b1c8:	0001b35d 	.word	0x0001b35d
   1b1cc:	0001b0e1 	.word	0x0001b0e1
   1b1d0:	0001b0e1 	.word	0x0001b0e1
   1b1d4:	0001b3b1 	.word	0x0001b3b1
   1b1d8:	0001b0e1 	.word	0x0001b0e1
   1b1dc:	0001b2c9 	.word	0x0001b2c9
   1b1e0:	0001b0e1 	.word	0x0001b0e1
   1b1e4:	0001b0e1 	.word	0x0001b0e1
   1b1e8:	0001b309 	.word	0x0001b309
                    if (!p.left) {
   1b1ec:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b1f0:	f013 0f08 	tst.w	r3, #8
   1b1f4:	d18f      	bne.n	1b116 <tfp_format+0x46>
                        p.lz = 1;
   1b1f6:	2301      	movs	r3, #1
   1b1f8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1b1fc:	e78b      	b.n	1b116 <tfp_format+0x46>
                    p.alt = 1;
   1b1fe:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b202:	f043 0302 	orr.w	r3, r3, #2
   1b206:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   1b20a:	e784      	b.n	1b116 <tfp_format+0x46>
                    p.left = 1;
   1b20c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b210:	f043 0308 	orr.w	r3, r3, #8
   1b214:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   1b218:	2300      	movs	r3, #0
   1b21a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1b21e:	e77a      	b.n	1b116 <tfp_format+0x46>
                i = intarg(0, 1, &va);
   1b220:	466a      	mov	r2, sp
   1b222:	2101      	movs	r1, #1
   1b224:	2000      	movs	r0, #0
   1b226:	f7ff ff21 	bl	1b06c <intarg>
                if (i > UCHAR_MAX) {
   1b22a:	28ff      	cmp	r0, #255	; 0xff
   1b22c:	dd07      	ble.n	1b23e <tfp_format+0x16e>
                    p.width = UCHAR_MAX;
   1b22e:	23ff      	movs	r3, #255	; 0xff
   1b230:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   1b234:	9b01      	ldr	r3, [sp, #4]
   1b236:	1c5a      	adds	r2, r3, #1
   1b238:	9201      	str	r2, [sp, #4]
   1b23a:	781c      	ldrb	r4, [r3, #0]
   1b23c:	e77e      	b.n	1b13c <tfp_format+0x6c>
                } else if (i > 0) {
   1b23e:	2800      	cmp	r0, #0
   1b240:	ddf8      	ble.n	1b234 <tfp_format+0x164>
                    p.width = i;
   1b242:	f88d 0020 	strb.w	r0, [sp, #32]
   1b246:	e7f5      	b.n	1b234 <tfp_format+0x164>
                ch = a2i(ch, &fmt, 10, &(p.width));
   1b248:	ab08      	add	r3, sp, #32
   1b24a:	220a      	movs	r2, #10
   1b24c:	a901      	add	r1, sp, #4
   1b24e:	4620      	mov	r0, r4
   1b250:	f7ff fe4d 	bl	1aeee <a2i>
   1b254:	4604      	mov	r4, r0
   1b256:	e771      	b.n	1b13c <tfp_format+0x6c>
                ch = *(fmt++);
   1b258:	9b01      	ldr	r3, [sp, #4]
   1b25a:	1c5a      	adds	r2, r3, #1
   1b25c:	9201      	str	r2, [sp, #4]
   1b25e:	781c      	ldrb	r4, [r3, #0]
                if (ch == 'l') {
   1b260:	2c6c      	cmp	r4, #108	; 0x6c
   1b262:	d001      	beq.n	1b268 <tfp_format+0x198>
                lng = 1;
   1b264:	2001      	movs	r0, #1
   1b266:	e770      	b.n	1b14a <tfp_format+0x7a>
                    ch = *(fmt++);
   1b268:	1c9a      	adds	r2, r3, #2
   1b26a:	9201      	str	r2, [sp, #4]
   1b26c:	785c      	ldrb	r4, [r3, #1]
                    lng = 2;
   1b26e:	2002      	movs	r0, #2
   1b270:	e76b      	b.n	1b14a <tfp_format+0x7a>
                ch = *(fmt++);
   1b272:	9b01      	ldr	r3, [sp, #4]
   1b274:	1c5a      	adds	r2, r3, #1
   1b276:	9201      	str	r2, [sp, #4]
   1b278:	781c      	ldrb	r4, [r3, #0]
                p.hh = 1;
   1b27a:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
   1b27e:	2001      	movs	r0, #1
   1b280:	f360 1105 	bfi	r1, r0, #4, #2
   1b284:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
                if (ch == 'h') {
   1b288:	2c68      	cmp	r4, #104	; 0x68
   1b28a:	d001      	beq.n	1b290 <tfp_format+0x1c0>
            lng = 0;
   1b28c:	2000      	movs	r0, #0
   1b28e:	e75c      	b.n	1b14a <tfp_format+0x7a>
                    ch = *(fmt++);
   1b290:	4402      	add	r2, r0
   1b292:	9201      	str	r2, [sp, #4]
   1b294:	785c      	ldrb	r4, [r3, #1]
                    p.hh = 2;
   1b296:	b2cb      	uxtb	r3, r1
   1b298:	2202      	movs	r2, #2
   1b29a:	f362 1305 	bfi	r3, r2, #4, #2
   1b29e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;
   1b2a2:	2000      	movs	r0, #0
   1b2a4:	e751      	b.n	1b14a <tfp_format+0x7a>
                ch = *(fmt++);
   1b2a6:	9b01      	ldr	r3, [sp, #4]
   1b2a8:	1c5a      	adds	r2, r3, #1
   1b2aa:	9201      	str	r2, [sp, #4]
   1b2ac:	781c      	ldrb	r4, [r3, #0]
   1b2ae:	e74f      	b.n	1b150 <tfp_format+0x80>
            switch (ch) {
   1b2b0:	2c00      	cmp	r4, #0
   1b2b2:	f000 808a 	beq.w	1b3ca <tfp_format+0x2fa>
   1b2b6:	2c25      	cmp	r4, #37	; 0x25
   1b2b8:	f47f af12 	bne.w	1b0e0 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   1b2bc:	4621      	mov	r1, r4
   1b2be:	4630      	mov	r0, r6
   1b2c0:	f7ff fe30 	bl	1af24 <putf>
   1b2c4:	4405      	add	r5, r0
                break;
   1b2c6:	e70b      	b.n	1b0e0 <tfp_format+0x10>
                p.base = 10;
   1b2c8:	230a      	movs	r3, #10
   1b2ca:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1b2ce:	466a      	mov	r2, sp
   1b2d0:	2100      	movs	r1, #0
   1b2d2:	f7ff fecb 	bl	1b06c <intarg>
   1b2d6:	aa08      	add	r2, sp, #32
   1b2d8:	f7ff fd5f 	bl	1ad9a <ui2a>
                written += putchw(putp, &p);
   1b2dc:	a908      	add	r1, sp, #32
   1b2de:	4630      	mov	r0, r6
   1b2e0:	f7ff fe32 	bl	1af48 <putchw>
   1b2e4:	4405      	add	r5, r0
                break;
   1b2e6:	e6fb      	b.n	1b0e0 <tfp_format+0x10>
                p.base = 10;
   1b2e8:	230a      	movs	r3, #10
   1b2ea:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   1b2ee:	466a      	mov	r2, sp
   1b2f0:	2101      	movs	r1, #1
   1b2f2:	f7ff febb 	bl	1b06c <intarg>
   1b2f6:	aa08      	add	r2, sp, #32
   1b2f8:	f7ff fdcd 	bl	1ae96 <i2a>
                written += putchw(putp, &p);
   1b2fc:	a908      	add	r1, sp, #32
   1b2fe:	4630      	mov	r0, r6
   1b300:	f7ff fe22 	bl	1af48 <putchw>
   1b304:	4405      	add	r5, r0
                break;
   1b306:	e6eb      	b.n	1b0e0 <tfp_format+0x10>
                p.base = 16;
   1b308:	2310      	movs	r3, #16
   1b30a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   1b30e:	2c58      	cmp	r4, #88	; 0x58
   1b310:	bf14      	ite	ne
   1b312:	2400      	movne	r4, #0
   1b314:	2401      	moveq	r4, #1
   1b316:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b31a:	f364 0382 	bfi	r3, r4, #2, #1
   1b31e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   1b322:	466a      	mov	r2, sp
   1b324:	2100      	movs	r1, #0
   1b326:	f7ff fea1 	bl	1b06c <intarg>
   1b32a:	aa08      	add	r2, sp, #32
   1b32c:	f7ff fd35 	bl	1ad9a <ui2a>
                written += putchw(putp, &p);
   1b330:	a908      	add	r1, sp, #32
   1b332:	4630      	mov	r0, r6
   1b334:	f7ff fe08 	bl	1af48 <putchw>
   1b338:	4405      	add	r5, r0
                break;
   1b33a:	e6d1      	b.n	1b0e0 <tfp_format+0x10>
                p.base = 8;
   1b33c:	2308      	movs	r3, #8
   1b33e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1b342:	466a      	mov	r2, sp
   1b344:	2100      	movs	r1, #0
   1b346:	f7ff fe91 	bl	1b06c <intarg>
   1b34a:	aa08      	add	r2, sp, #32
   1b34c:	f7ff fd25 	bl	1ad9a <ui2a>
                written += putchw(putp, &p);
   1b350:	a908      	add	r1, sp, #32
   1b352:	4630      	mov	r0, r6
   1b354:	f7ff fdf8 	bl	1af48 <putchw>
   1b358:	4405      	add	r5, r0
                break;
   1b35a:	e6c1      	b.n	1b0e0 <tfp_format+0x10>
                v = va_arg(va, void *);
   1b35c:	9b00      	ldr	r3, [sp, #0]
   1b35e:	1d1a      	adds	r2, r3, #4
   1b360:	9200      	str	r2, [sp, #0]
   1b362:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   1b364:	2310      	movs	r3, #16
   1b366:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   1b36a:	aa08      	add	r2, sp, #32
   1b36c:	2100      	movs	r1, #0
   1b36e:	f7ff fd14 	bl	1ad9a <ui2a>
                p.width = 2 * sizeof(void*);
   1b372:	2308      	movs	r3, #8
   1b374:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   1b378:	2301      	movs	r3, #1
   1b37a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   1b37e:	2130      	movs	r1, #48	; 0x30
   1b380:	4630      	mov	r0, r6
   1b382:	f7ff fdcf 	bl	1af24 <putf>
   1b386:	4405      	add	r5, r0
                written += putf(putp, 'x');
   1b388:	2178      	movs	r1, #120	; 0x78
   1b38a:	4630      	mov	r0, r6
   1b38c:	f7ff fdca 	bl	1af24 <putf>
   1b390:	4405      	add	r5, r0
                written += putchw(putp, &p);
   1b392:	a908      	add	r1, sp, #32
   1b394:	4630      	mov	r0, r6
   1b396:	f7ff fdd7 	bl	1af48 <putchw>
   1b39a:	4405      	add	r5, r0
                break;
   1b39c:	e6a0      	b.n	1b0e0 <tfp_format+0x10>
                written += putf(putp, (char)(va_arg(va, int)));
   1b39e:	9b00      	ldr	r3, [sp, #0]
   1b3a0:	1d1a      	adds	r2, r3, #4
   1b3a2:	9200      	str	r2, [sp, #0]
   1b3a4:	7819      	ldrb	r1, [r3, #0]
   1b3a6:	4630      	mov	r0, r6
   1b3a8:	f7ff fdbc 	bl	1af24 <putf>
   1b3ac:	4405      	add	r5, r0
                break;
   1b3ae:	e697      	b.n	1b0e0 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   1b3b0:	9b00      	ldr	r3, [sp, #0]
   1b3b2:	1d1a      	adds	r2, r3, #4
   1b3b4:	9200      	str	r2, [sp, #0]
   1b3b6:	681b      	ldr	r3, [r3, #0]
   1b3b8:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   1b3ba:	a908      	add	r1, sp, #32
   1b3bc:	4630      	mov	r0, r6
   1b3be:	f7ff fdc3 	bl	1af48 <putchw>
   1b3c2:	4405      	add	r5, r0
                p.bf = bf;
   1b3c4:	ab02      	add	r3, sp, #8
   1b3c6:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   1b3c8:	e68a      	b.n	1b0e0 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   1b3ca:	4628      	mov	r0, r5
   1b3cc:	b00a      	add	sp, #40	; 0x28
   1b3ce:	bd70      	pop	{r4, r5, r6, pc}

0001b3d0 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   1b3d0:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   1b3d2:	f7ff fe7d 	bl	1b0d0 <tfp_format>
}
   1b3d6:	bd08      	pop	{r3, pc}

0001b3d8 <fprintf>:

int fprintf(FILE *f, const char *fmt, ...)
{
   1b3d8:	b40e      	push	{r1, r2, r3}
   1b3da:	b500      	push	{lr}
   1b3dc:	b082      	sub	sp, #8
   1b3de:	aa03      	add	r2, sp, #12
   1b3e0:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   1b3e4:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(f, fmt, va);
   1b3e6:	f7ff fff3 	bl	1b3d0 <vfprintf>
    va_end(va);
    return rv;
}
   1b3ea:	b002      	add	sp, #8
   1b3ec:	f85d eb04 	ldr.w	lr, [sp], #4
   1b3f0:	b003      	add	sp, #12
   1b3f2:	4770      	bx	lr

0001b3f4 <printf>:

int printf(const char *fmt, ...)
{
   1b3f4:	b40f      	push	{r0, r1, r2, r3}
   1b3f6:	b500      	push	{lr}
   1b3f8:	b083      	sub	sp, #12
   1b3fa:	aa04      	add	r2, sp, #16
   1b3fc:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   1b400:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   1b402:	4b04      	ldr	r3, [pc, #16]	; (1b414 <printf+0x20>)
   1b404:	6818      	ldr	r0, [r3, #0]
   1b406:	f7ff ffe3 	bl	1b3d0 <vfprintf>
    va_end(va);
    return rv;
}
   1b40a:	b003      	add	sp, #12
   1b40c:	f85d eb04 	ldr.w	lr, [sp], #4
   1b410:	b004      	add	sp, #16
   1b412:	4770      	bx	lr
   1b414:	000385d8 	.word	0x000385d8

0001b418 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   1b418:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b41a:	b085      	sub	sp, #20
   1b41c:	4605      	mov	r5, r0
   1b41e:	460c      	mov	r4, r1
   1b420:	4616      	mov	r6, r2
   1b422:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   1b424:	460a      	mov	r2, r1
   1b426:	4601      	mov	r1, r0
   1b428:	4668      	mov	r0, sp
   1b42a:	f000 f861 	bl	1b4f0 <fmemopen_w>
    tfp_format(f, fmt, va);
   1b42e:	463a      	mov	r2, r7
   1b430:	4631      	mov	r1, r6
   1b432:	f7ff fe4d 	bl	1b0d0 <tfp_format>
    if (size > 0) {
   1b436:	b12c      	cbz	r4, 1b444 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   1b438:	9b02      	ldr	r3, [sp, #8]
   1b43a:	42a3      	cmp	r3, r4
   1b43c:	d205      	bcs.n	1b44a <vsnprintf+0x32>
            *(state.buffer) = '\0';
   1b43e:	9b01      	ldr	r3, [sp, #4]
   1b440:	2200      	movs	r2, #0
   1b442:	701a      	strb	r2, [r3, #0]
        } else {
            str[size - 1] = '\0';
        }
    }
    return state.bytes_written;
}
   1b444:	9802      	ldr	r0, [sp, #8]
   1b446:	b005      	add	sp, #20
   1b448:	bdf0      	pop	{r4, r5, r6, r7, pc}
            str[size - 1] = '\0';
   1b44a:	3c01      	subs	r4, #1
   1b44c:	2300      	movs	r3, #0
   1b44e:	552b      	strb	r3, [r5, r4]
   1b450:	e7f8      	b.n	1b444 <vsnprintf+0x2c>

0001b452 <snprintf>:

int snprintf(char *str, size_t size, const char *fmt, ...)
{
   1b452:	b40c      	push	{r2, r3}
   1b454:	b500      	push	{lr}
   1b456:	b083      	sub	sp, #12
   1b458:	ab04      	add	r3, sp, #16
   1b45a:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list va;
    va_start(va, fmt);
   1b45e:	9301      	str	r3, [sp, #4]
    int rv = vsnprintf(str, size, fmt, va);
   1b460:	f7ff ffda 	bl	1b418 <vsnprintf>
    va_end(va);
    return rv;
}
   1b464:	b003      	add	sp, #12
   1b466:	f85d eb04 	ldr.w	lr, [sp], #4
   1b46a:	b002      	add	sp, #8
   1b46c:	4770      	bx	lr
	...

0001b470 <jrand48>:

#include <stdlib.h>
#include <stdint.h>

long jrand48(unsigned short xsubi[3])
{
   1b470:	b4f0      	push	{r4, r5, r6, r7}
   1b472:	4601      	mov	r1, r0
	uint64_t x;

	/* The xsubi[] array is littleendian by spec */
	x = (uint64_t) (uint16_t) xsubi[0] +
   1b474:	8804      	ldrh	r4, [r0, #0]
   1b476:	2500      	movs	r5, #0
	    ((uint64_t) (uint16_t) xsubi[1] << 16) +
   1b478:	8846      	ldrh	r6, [r0, #2]
   1b47a:	0432      	lsls	r2, r6, #16
	x = (uint64_t) (uint16_t) xsubi[0] +
   1b47c:	18a2      	adds	r2, r4, r2
   1b47e:	f04f 0000 	mov.w	r0, #0
   1b482:	eb45 0000 	adc.w	r0, r5, r0
	    ((uint64_t) (uint16_t) xsubi[2] << 32);
   1b486:	2300      	movs	r3, #0
   1b488:	888c      	ldrh	r4, [r1, #4]
	x = (uint64_t) (uint16_t) xsubi[0] +
   1b48a:	18d2      	adds	r2, r2, r3
   1b48c:	eb44 0000 	adc.w	r0, r4, r0

	x = (0x5deece66dULL * x) + 0xb;
   1b490:	4c0a      	ldr	r4, [pc, #40]	; (1b4bc <jrand48+0x4c>)
   1b492:	2305      	movs	r3, #5
   1b494:	fb03 f302 	mul.w	r3, r3, r2
   1b498:	fb04 3000 	mla	r0, r4, r0, r3
   1b49c:	fba2 2304 	umull	r2, r3, r2, r4
   1b4a0:	4403      	add	r3, r0
   1b4a2:	f112 000b 	adds.w	r0, r2, #11
   1b4a6:	f143 0300 	adc.w	r3, r3, #0

	xsubi[0] = (unsigned short)(uint16_t) x;
   1b4aa:	8008      	strh	r0, [r1, #0]
	xsubi[1] = (unsigned short)(uint16_t) (x >> 16);
   1b4ac:	0c00      	lsrs	r0, r0, #16
   1b4ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   1b4b2:	8048      	strh	r0, [r1, #2]
	xsubi[2] = (unsigned short)(uint16_t) (x >> 32);
   1b4b4:	808b      	strh	r3, [r1, #4]

	return (long)(int32_t) (x >> 16);
}
   1b4b6:	bcf0      	pop	{r4, r5, r6, r7}
   1b4b8:	4770      	bx	lr
   1b4ba:	bf00      	nop
   1b4bc:	deece66d 	.word	0xdeece66d

0001b4c0 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   1b4c0:	b430      	push	{r4, r5}
   1b4c2:	4604      	mov	r4, r0
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   1b4c4:	2000      	movs	r0, #0
    
    while (n--)
   1b4c6:	e000      	b.n	1b4ca <memfile_write+0xa>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   1b4c8:	462a      	mov	r2, r5
    while (n--)
   1b4ca:	1e55      	subs	r5, r2, #1
   1b4cc:	b16a      	cbz	r2, 1b4ea <memfile_write+0x2a>
        f->bytes_written++;
   1b4ce:	68a3      	ldr	r3, [r4, #8]
   1b4d0:	3301      	adds	r3, #1
   1b4d2:	60a3      	str	r3, [r4, #8]
        if (f->bytes_written <= f->size)
   1b4d4:	68e2      	ldr	r2, [r4, #12]
   1b4d6:	4293      	cmp	r3, r2
   1b4d8:	d8f6      	bhi.n	1b4c8 <memfile_write+0x8>
            *f->buffer++ = *bp++;
   1b4da:	6863      	ldr	r3, [r4, #4]
   1b4dc:	1c5a      	adds	r2, r3, #1
   1b4de:	6062      	str	r2, [r4, #4]
   1b4e0:	f811 2b01 	ldrb.w	r2, [r1], #1
   1b4e4:	701a      	strb	r2, [r3, #0]
            i++;
   1b4e6:	3001      	adds	r0, #1
   1b4e8:	e7ee      	b.n	1b4c8 <memfile_write+0x8>
        }
    }
    
    return i;
}
   1b4ea:	bc30      	pop	{r4, r5}
   1b4ec:	4770      	bx	lr
	...

0001b4f0 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   1b4f0:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   1b4f2:	4c04      	ldr	r4, [pc, #16]	; (1b504 <fmemopen_w+0x14>)
   1b4f4:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   1b4f6:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   1b4f8:	2100      	movs	r1, #0
   1b4fa:	6081      	str	r1, [r0, #8]
    storage->size = size;
   1b4fc:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   1b4fe:	bc10      	pop	{r4}
   1b500:	4770      	bx	lr
   1b502:	bf00      	nop
   1b504:	000385d0 	.word	0x000385d0

0001b508 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   1b508:	2000      	movs	r0, #0
   1b50a:	4770      	bx	lr

0001b50c <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   1b50c:	b510      	push	{r4, lr}
   1b50e:	4608      	mov	r0, r1
   1b510:	4614      	mov	r4, r2
    console_write(bp, n);
   1b512:	4611      	mov	r1, r2
   1b514:	f000 fc88 	bl	1be28 <console_write>
    return n;
}
   1b518:	4620      	mov	r0, r4
   1b51a:	bd10      	pop	{r4, pc}

0001b51c <strntoumax>:
		return -1;
	}
}

uintmax_t strntoumax(const char *nptr, char **endptr, int base, size_t n)
{
   1b51c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b520:	4605      	mov	r5, r0
   1b522:	468c      	mov	ip, r1
	int minus = 0;
	uintmax_t v = 0;
	int d;

	while (n && isspace((unsigned char)*nptr)) {
   1b524:	e001      	b.n	1b52a <strntoumax+0xe>
		nptr++;
   1b526:	3501      	adds	r5, #1
		n--;
   1b528:	3b01      	subs	r3, #1
	while (n && isspace((unsigned char)*nptr)) {
   1b52a:	b143      	cbz	r3, 1b53e <strntoumax+0x22>
   1b52c:	7829      	ldrb	r1, [r5, #0]
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
   1b52e:	2920      	cmp	r1, #32
   1b530:	d0f9      	beq.n	1b526 <strntoumax+0xa>
   1b532:	290a      	cmp	r1, #10
   1b534:	d0f7      	beq.n	1b526 <strntoumax+0xa>
   1b536:	2909      	cmp	r1, #9
   1b538:	d0f5      	beq.n	1b526 <strntoumax+0xa>
   1b53a:	290d      	cmp	r1, #13
   1b53c:	d0f3      	beq.n	1b526 <strntoumax+0xa>
	}

	/* Single optional + or - */
	if (n) {
   1b53e:	b1a3      	cbz	r3, 1b56a <strntoumax+0x4e>
		char c = *nptr;
   1b540:	f895 e000 	ldrb.w	lr, [r5]
		if (c == '-' || c == '+') {
   1b544:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   1b548:	d005      	beq.n	1b556 <strntoumax+0x3a>
   1b54a:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   1b54e:	d002      	beq.n	1b556 <strntoumax+0x3a>
	int minus = 0;
   1b550:	f04f 0e00 	mov.w	lr, #0
   1b554:	e00b      	b.n	1b56e <strntoumax+0x52>
			minus = (c == '-');
   1b556:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   1b55a:	bf14      	ite	ne
   1b55c:	f04f 0e00 	movne.w	lr, #0
   1b560:	f04f 0e01 	moveq.w	lr, #1
			nptr++;
   1b564:	3501      	adds	r5, #1
			n--;
   1b566:	3b01      	subs	r3, #1
   1b568:	e001      	b.n	1b56e <strntoumax+0x52>
	int minus = 0;
   1b56a:	f04f 0e00 	mov.w	lr, #0
		}
	}

	if (base == 0) {
   1b56e:	b9ba      	cbnz	r2, 1b5a0 <strntoumax+0x84>
		if (n >= 2 && nptr[0] == '0' &&
   1b570:	2b01      	cmp	r3, #1
   1b572:	d902      	bls.n	1b57a <strntoumax+0x5e>
   1b574:	782a      	ldrb	r2, [r5, #0]
   1b576:	2a30      	cmp	r2, #48	; 0x30
   1b578:	d005      	beq.n	1b586 <strntoumax+0x6a>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
			n -= 2;
			nptr += 2;
			base = 16;
		} else if (n >= 1 && nptr[0] == '0') {
   1b57a:	b32b      	cbz	r3, 1b5c8 <strntoumax+0xac>
   1b57c:	782a      	ldrb	r2, [r5, #0]
   1b57e:	2a30      	cmp	r2, #48	; 0x30
   1b580:	d00a      	beq.n	1b598 <strntoumax+0x7c>
			n--;
			nptr++;
			base = 8;
		} else {
			base = 10;
   1b582:	220a      	movs	r2, #10
   1b584:	e00e      	b.n	1b5a4 <strntoumax+0x88>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1b586:	786a      	ldrb	r2, [r5, #1]
		if (n >= 2 && nptr[0] == '0' &&
   1b588:	2a78      	cmp	r2, #120	; 0x78
   1b58a:	d001      	beq.n	1b590 <strntoumax+0x74>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1b58c:	2a58      	cmp	r2, #88	; 0x58
   1b58e:	d1f4      	bne.n	1b57a <strntoumax+0x5e>
			n -= 2;
   1b590:	3b02      	subs	r3, #2
			nptr += 2;
   1b592:	3502      	adds	r5, #2
			base = 16;
   1b594:	2210      	movs	r2, #16
   1b596:	e005      	b.n	1b5a4 <strntoumax+0x88>
			n--;
   1b598:	3b01      	subs	r3, #1
			nptr++;
   1b59a:	3501      	adds	r5, #1
			base = 8;
   1b59c:	2208      	movs	r2, #8
   1b59e:	e001      	b.n	1b5a4 <strntoumax+0x88>
		}
	} else if (base == 16) {
   1b5a0:	2a10      	cmp	r2, #16
   1b5a2:	d004      	beq.n	1b5ae <strntoumax+0x92>
			base = 16;
   1b5a4:	f04f 0800 	mov.w	r8, #0
   1b5a8:	f04f 0900 	mov.w	r9, #0
   1b5ac:	e026      	b.n	1b5fc <strntoumax+0xe0>
		if (n >= 2 && nptr[0] == '0' &&
   1b5ae:	2b01      	cmp	r3, #1
   1b5b0:	d9f8      	bls.n	1b5a4 <strntoumax+0x88>
   1b5b2:	7829      	ldrb	r1, [r5, #0]
   1b5b4:	2930      	cmp	r1, #48	; 0x30
   1b5b6:	d1f5      	bne.n	1b5a4 <strntoumax+0x88>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1b5b8:	7869      	ldrb	r1, [r5, #1]
		if (n >= 2 && nptr[0] == '0' &&
   1b5ba:	2978      	cmp	r1, #120	; 0x78
   1b5bc:	d001      	beq.n	1b5c2 <strntoumax+0xa6>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1b5be:	2958      	cmp	r1, #88	; 0x58
   1b5c0:	d1f0      	bne.n	1b5a4 <strntoumax+0x88>
			n -= 2;
   1b5c2:	3b02      	subs	r3, #2
			nptr += 2;
   1b5c4:	3502      	adds	r5, #2
   1b5c6:	e7ed      	b.n	1b5a4 <strntoumax+0x88>
			base = 10;
   1b5c8:	220a      	movs	r2, #10
   1b5ca:	e7eb      	b.n	1b5a4 <strntoumax+0x88>
		return ch - '0';
   1b5cc:	4634      	mov	r4, r6
   1b5ce:	e002      	b.n	1b5d6 <strntoumax+0xba>
		return ch - 'A' + 10;
   1b5d0:	3c37      	subs	r4, #55	; 0x37
   1b5d2:	e000      	b.n	1b5d6 <strntoumax+0xba>
		return ch - 'a' + 10;
   1b5d4:	3c57      	subs	r4, #87	; 0x57
		}
	}

	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   1b5d6:	2c00      	cmp	r4, #0
   1b5d8:	db1e      	blt.n	1b618 <strntoumax+0xfc>
   1b5da:	42a2      	cmp	r2, r4
   1b5dc:	dd1c      	ble.n	1b618 <strntoumax+0xfc>
		v = v * base + d;
   1b5de:	fb02 f109 	mul.w	r1, r2, r9
   1b5e2:	17d7      	asrs	r7, r2, #31
   1b5e4:	fb08 1607 	mla	r6, r8, r7, r1
   1b5e8:	fba2 0108 	umull	r0, r1, r2, r8
   1b5ec:	4431      	add	r1, r6
   1b5ee:	1900      	adds	r0, r0, r4
   1b5f0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   1b5f4:	4680      	mov	r8, r0
   1b5f6:	4689      	mov	r9, r1
		n--;
   1b5f8:	3b01      	subs	r3, #1
		nptr++;
   1b5fa:	3501      	adds	r5, #1
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   1b5fc:	b163      	cbz	r3, 1b618 <strntoumax+0xfc>
   1b5fe:	782c      	ldrb	r4, [r5, #0]
	if (ch >= '0' && ch <= '9') {
   1b600:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   1b604:	2e09      	cmp	r6, #9
   1b606:	d9e1      	bls.n	1b5cc <strntoumax+0xb0>
	} else if (ch >= 'A' && ch <= 'Z') {
   1b608:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   1b60c:	2e19      	cmp	r6, #25
   1b60e:	d9df      	bls.n	1b5d0 <strntoumax+0xb4>
	} else if (ch >= 'a' && ch <= 'z') {
   1b610:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   1b614:	2e19      	cmp	r6, #25
   1b616:	d9dd      	bls.n	1b5d4 <strntoumax+0xb8>
	}

	if (endptr)
   1b618:	f1bc 0f00 	cmp.w	ip, #0
   1b61c:	d001      	beq.n	1b622 <strntoumax+0x106>
		*endptr = (char *)nptr;
   1b61e:	f8cc 5000 	str.w	r5, [ip]

	return minus ? -v : v;
   1b622:	f1be 0f00 	cmp.w	lr, #0
   1b626:	d003      	beq.n	1b630 <strntoumax+0x114>
   1b628:	f1d8 0800 	rsbs	r8, r8, #0
   1b62c:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
}
   1b630:	4640      	mov	r0, r8
   1b632:	4649      	mov	r1, r9
   1b634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001b638 <strsep>:
 */

#include <string.h>

char *strsep(char **stringp, const char *delim)
{
   1b638:	b538      	push	{r3, r4, r5, lr}
	char *s = *stringp;
   1b63a:	6805      	ldr	r5, [r0, #0]
	char *e;

	if (!s)
   1b63c:	b14d      	cbz	r5, 1b652 <strsep+0x1a>
   1b63e:	4604      	mov	r4, r0
		return NULL;

	e = strpbrk(s, delim);
   1b640:	4628      	mov	r0, r5
   1b642:	f000 f808 	bl	1b656 <strpbrk>
	if (e)
   1b646:	4603      	mov	r3, r0
   1b648:	b110      	cbz	r0, 1b650 <strsep+0x18>
		*e++ = '\0';
   1b64a:	2200      	movs	r2, #0
   1b64c:	f803 2b01 	strb.w	r2, [r3], #1

	*stringp = e;
   1b650:	6023      	str	r3, [r4, #0]
	return s;
}
   1b652:	4628      	mov	r0, r5
   1b654:	bd38      	pop	{r3, r4, r5, pc}

0001b656 <strpbrk>:
#include <string.h>

char *strpbrk(const char *s1, const char *s2)
{
  const char *c = s2;
  if (!*s1)
   1b656:	7803      	ldrb	r3, [r0, #0]
   1b658:	b193      	cbz	r3, 1b680 <strpbrk+0x2a>
{
   1b65a:	b410      	push	{r4}
  const char *c = s2;
   1b65c:	460a      	mov	r2, r1
   1b65e:	e001      	b.n	1b664 <strpbrk+0xe>
      for (c = s2; *c; c++)
	{
	  if (*s1 == *c)
	    break;
	}
      if (*c)
   1b660:	b953      	cbnz	r3, 1b678 <strpbrk+0x22>
	break;
      s1++;
   1b662:	3001      	adds	r0, #1
  while (*s1)
   1b664:	7804      	ldrb	r4, [r0, #0]
   1b666:	b13c      	cbz	r4, 1b678 <strpbrk+0x22>
      for (c = s2; *c; c++)
   1b668:	460a      	mov	r2, r1
   1b66a:	7813      	ldrb	r3, [r2, #0]
   1b66c:	2b00      	cmp	r3, #0
   1b66e:	d0f7      	beq.n	1b660 <strpbrk+0xa>
	  if (*s1 == *c)
   1b670:	42a3      	cmp	r3, r4
   1b672:	d0f5      	beq.n	1b660 <strpbrk+0xa>
      for (c = s2; *c; c++)
   1b674:	3201      	adds	r2, #1
   1b676:	e7f8      	b.n	1b66a <strpbrk+0x14>
    }

  if (*c == '\0')
   1b678:	7813      	ldrb	r3, [r2, #0]
   1b67a:	b11b      	cbz	r3, 1b684 <strpbrk+0x2e>
    s1 = NULL;

  return (char *) s1;
}
   1b67c:	bc10      	pop	{r4}
   1b67e:	4770      	bx	lr
    return (char *) NULL;
   1b680:	2000      	movs	r0, #0
}
   1b682:	4770      	bx	lr
    s1 = NULL;
   1b684:	2000      	movs	r0, #0
   1b686:	e7f9      	b.n	1b67c <strpbrk+0x26>

0001b688 <console_pkg_init>:
}
#endif

void __attribute__((optimize("O0")))
console_pkg_init(void)
{
   1b688:	b590      	push	{r4, r7, lr}
   1b68a:	b085      	sub	sp, #20
   1b68c:	af02      	add	r7, sp, #8
    int rc = 0;
   1b68e:	2300      	movs	r3, #0
   1b690:	607b      	str	r3, [r7, #4]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1b692:	4b19      	ldr	r3, [pc, #100]	; (1b6f8 <console_pkg_init+0x70>)
   1b694:	781b      	ldrb	r3, [r3, #0]
   1b696:	2b00      	cmp	r3, #0
   1b698:	d10d      	bne.n	1b6b6 <console_pkg_init+0x2e>
   1b69a:	f7f9 f82b 	bl	146f4 <hal_debugger_connected>
   1b69e:	4603      	mov	r3, r0
   1b6a0:	2b00      	cmp	r3, #0
   1b6a2:	d002      	beq.n	1b6aa <console_pkg_init+0x22>
   1b6a4:	f000 f830 	bl	1b708 <hal_debug_break>
   1b6a8:	bf00      	nop
   1b6aa:	2300      	movs	r3, #0
   1b6ac:	2200      	movs	r2, #0
   1b6ae:	2100      	movs	r1, #0
   1b6b0:	2000      	movs	r0, #0
   1b6b2:	f7fd fb3d 	bl	18d30 <__assert_func>

    os_eventq_init(&avail_queue);
   1b6b6:	4811      	ldr	r0, [pc, #68]	; (1b6fc <console_pkg_init+0x74>)
   1b6b8:	f7fd fe80 	bl	193bc <os_eventq_init>
    os_mutex_init(&console_write_lock);
   1b6bc:	4810      	ldr	r0, [pc, #64]	; (1b700 <console_pkg_init+0x78>)
   1b6be:	f7ff f9c1 	bl	1aa44 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_UART)
    rc = uart_console_init();
   1b6c2:	f000 fe69 	bl	1c398 <uart_console_init>
   1b6c6:	6078      	str	r0, [r7, #4]
#endif
#if MYNEWT_VAL(CONSOLE_RTT)
    rc = rtt_console_init();
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   1b6c8:	687b      	ldr	r3, [r7, #4]
   1b6ca:	2b00      	cmp	r3, #0
   1b6cc:	d010      	beq.n	1b6f0 <console_pkg_init+0x68>
   1b6ce:	f7f9 f811 	bl	146f4 <hal_debugger_connected>
   1b6d2:	4603      	mov	r3, r0
   1b6d4:	2b00      	cmp	r3, #0
   1b6d6:	d002      	beq.n	1b6de <console_pkg_init+0x56>
   1b6d8:	f000 f816 	bl	1b708 <hal_debug_break>
   1b6dc:	bf00      	nop
   1b6de:	4b09      	ldr	r3, [pc, #36]	; (1b704 <console_pkg_init+0x7c>)
   1b6e0:	681c      	ldr	r4, [r3, #0]
   1b6e2:	2300      	movs	r3, #0
   1b6e4:	9300      	str	r3, [sp, #0]
   1b6e6:	2300      	movs	r3, #0
   1b6e8:	2200      	movs	r2, #0
   1b6ea:	2100      	movs	r1, #0
   1b6ec:	2000      	movs	r0, #0
   1b6ee:	47a0      	blx	r4
}
   1b6f0:	bf00      	nop
   1b6f2:	370c      	adds	r7, #12
   1b6f4:	46bd      	mov	sp, r7
   1b6f6:	bd90      	pop	{r4, r7, pc}
   1b6f8:	10003fd8 	.word	0x10003fd8
   1b6fc:	10003978 	.word	0x10003978
   1b700:	100039a4 	.word	0x100039a4
   1b704:	100006b4 	.word	0x100006b4

0001b708 <hal_debug_break>:
   1b708:	be01      	bkpt	0x0001
}
   1b70a:	4770      	bx	lr

0001b70c <add_ascii_num_with_char>:
{
   1b70c:	b470      	push	{r4, r5, r6}
    char *p = str;
   1b70e:	4604      	mov	r4, r0
        *p++ = (num % 10) + '0';
   1b710:	4b10      	ldr	r3, [pc, #64]	; (1b754 <add_ascii_num_with_char+0x48>)
   1b712:	fba3 5301 	umull	r5, r3, r3, r1
   1b716:	08db      	lsrs	r3, r3, #3
   1b718:	461e      	mov	r6, r3
   1b71a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1b71e:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
   1b722:	4625      	mov	r5, r4
   1b724:	3401      	adds	r4, #1
   1b726:	3330      	adds	r3, #48	; 0x30
   1b728:	702b      	strb	r3, [r5, #0]
        num /= 10;
   1b72a:	460b      	mov	r3, r1
   1b72c:	4631      	mov	r1, r6
    } while (num);
   1b72e:	2b09      	cmp	r3, #9
   1b730:	d8ee      	bhi.n	1b710 <add_ascii_num_with_char+0x4>
    --p;
   1b732:	462b      	mov	r3, r5
   1b734:	e005      	b.n	1b742 <add_ascii_num_with_char+0x36>
       tmp = *s;
   1b736:	7801      	ldrb	r1, [r0, #0]
       *s++ = *p;
   1b738:	781e      	ldrb	r6, [r3, #0]
   1b73a:	f800 6b01 	strb.w	r6, [r0], #1
       *p-- = tmp;
   1b73e:	f803 1901 	strb.w	r1, [r3], #-1
    while (s < p) {
   1b742:	4283      	cmp	r3, r0
   1b744:	d8f7      	bhi.n	1b736 <add_ascii_num_with_char+0x2a>
    *str++ = c;
   1b746:	7022      	strb	r2, [r4, #0]
    *str = '\0';
   1b748:	2300      	movs	r3, #0
   1b74a:	7063      	strb	r3, [r4, #1]
}
   1b74c:	1ca8      	adds	r0, r5, #2
   1b74e:	bc70      	pop	{r4, r5, r6}
   1b750:	4770      	bx	lr
   1b752:	bf00      	nop
   1b754:	cccccccd 	.word	0xcccccccd

0001b758 <console_handle_line>:
{
   1b758:	b508      	push	{r3, lr}
    cur = 0;
   1b75a:	2300      	movs	r3, #0
   1b75c:	4a08      	ldr	r2, [pc, #32]	; (1b780 <console_handle_line+0x28>)
   1b75e:	8013      	strh	r3, [r2, #0]
    trailing_chars = 0;
   1b760:	4a08      	ldr	r2, [pc, #32]	; (1b784 <console_handle_line+0x2c>)
   1b762:	8013      	strh	r3, [r2, #0]
    os_eventq_put(lines_queue, current_line_ev);
   1b764:	4b08      	ldr	r3, [pc, #32]	; (1b788 <console_handle_line+0x30>)
   1b766:	6819      	ldr	r1, [r3, #0]
   1b768:	4b08      	ldr	r3, [pc, #32]	; (1b78c <console_handle_line+0x34>)
   1b76a:	6818      	ldr	r0, [r3, #0]
   1b76c:	f7fd fe33 	bl	193d6 <os_eventq_put>
    if (console_compat_rx_cb) {
   1b770:	4b07      	ldr	r3, [pc, #28]	; (1b790 <console_handle_line+0x38>)
   1b772:	681b      	ldr	r3, [r3, #0]
   1b774:	b103      	cbz	r3, 1b778 <console_handle_line+0x20>
        console_compat_rx_cb();
   1b776:	4798      	blx	r3
    current_line_ev = NULL;
   1b778:	4b03      	ldr	r3, [pc, #12]	; (1b788 <console_handle_line+0x30>)
   1b77a:	2200      	movs	r2, #0
   1b77c:	601a      	str	r2, [r3, #0]
}
   1b77e:	bd08      	pop	{r3, pc}
   1b780:	100039b0 	.word	0x100039b0
   1b784:	100039ce 	.word	0x100039ce
   1b788:	100039b4 	.word	0x100039b4
   1b78c:	100039c0 	.word	0x100039c0
   1b790:	1000398c 	.word	0x1000398c

0001b794 <console_filter_out>:
{
   1b794:	b508      	push	{r3, lr}
    if (g_console_silence) {
   1b796:	4b0d      	ldr	r3, [pc, #52]	; (1b7cc <console_filter_out+0x38>)
   1b798:	781b      	ldrb	r3, [r3, #0]
   1b79a:	b973      	cbnz	r3, 1b7ba <console_filter_out+0x26>
    if (prompt_has_focus || g_is_output_nlip) {
   1b79c:	4b0c      	ldr	r3, [pc, #48]	; (1b7d0 <console_filter_out+0x3c>)
   1b79e:	781b      	ldrb	r3, [r3, #0]
   1b7a0:	b963      	cbnz	r3, 1b7bc <console_filter_out+0x28>
   1b7a2:	4b0c      	ldr	r3, [pc, #48]	; (1b7d4 <console_filter_out+0x40>)
   1b7a4:	781b      	ldrb	r3, [r3, #0]
   1b7a6:	b94b      	cbnz	r3, 1b7bc <console_filter_out+0x28>
    console_is_midline = c != '\n' && c != '\r';
   1b7a8:	280a      	cmp	r0, #10
   1b7aa:	d00c      	beq.n	1b7c6 <console_filter_out+0x32>
   1b7ac:	280d      	cmp	r0, #13
   1b7ae:	d008      	beq.n	1b7c2 <console_filter_out+0x2e>
   1b7b0:	2201      	movs	r2, #1
   1b7b2:	4b09      	ldr	r3, [pc, #36]	; (1b7d8 <console_filter_out+0x44>)
   1b7b4:	601a      	str	r2, [r3, #0]
        c = console_out_nolock(c);
   1b7b6:	f000 fdc1 	bl	1c33c <console_out_nolock>
}
   1b7ba:	bd08      	pop	{r3, pc}
        return console_out_nolock(c);
   1b7bc:	f000 fdbe 	bl	1c33c <console_out_nolock>
   1b7c0:	e7fb      	b.n	1b7ba <console_filter_out+0x26>
    console_is_midline = c != '\n' && c != '\r';
   1b7c2:	2200      	movs	r2, #0
   1b7c4:	e7f5      	b.n	1b7b2 <console_filter_out+0x1e>
   1b7c6:	2200      	movs	r2, #0
   1b7c8:	e7f3      	b.n	1b7b2 <console_filter_out+0x1e>
   1b7ca:	bf00      	nop
   1b7cc:	100039bd 	.word	0x100039bd
   1b7d0:	100039c9 	.word	0x100039c9
   1b7d4:	100039bf 	.word	0x100039bf
   1b7d8:	10003990 	.word	0x10003990

0001b7dc <console_filter_write>:
{
   1b7dc:	b570      	push	{r4, r5, r6, lr}
   1b7de:	4606      	mov	r6, r0
   1b7e0:	460d      	mov	r5, r1
    for (i = 0; i < cnt; i++) {
   1b7e2:	2400      	movs	r4, #0
   1b7e4:	42ac      	cmp	r4, r5
   1b7e6:	da07      	bge.n	1b7f8 <console_filter_write+0x1c>
        if (console_filter_out((int)str[i]) == EOF) {
   1b7e8:	5d30      	ldrb	r0, [r6, r4]
   1b7ea:	f7ff ffd3 	bl	1b794 <console_filter_out>
   1b7ee:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1b7f2:	d001      	beq.n	1b7f8 <console_filter_write+0x1c>
    for (i = 0; i < cnt; i++) {
   1b7f4:	3401      	adds	r4, #1
   1b7f6:	e7f5      	b.n	1b7e4 <console_filter_write+0x8>
}
   1b7f8:	bd70      	pop	{r4, r5, r6, pc}
	...

0001b7fc <console_append_char>:
{
   1b7fc:	b508      	push	{r3, lr}
    if (cur + trailing_chars >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   1b7fe:	4b0d      	ldr	r3, [pc, #52]	; (1b834 <console_append_char+0x38>)
   1b800:	881b      	ldrh	r3, [r3, #0]
   1b802:	4a0d      	ldr	r2, [pc, #52]	; (1b838 <console_append_char+0x3c>)
   1b804:	8812      	ldrh	r2, [r2, #0]
   1b806:	4413      	add	r3, r2
   1b808:	2bfe      	cmp	r3, #254	; 0xfe
   1b80a:	dc0e      	bgt.n	1b82a <console_append_char+0x2e>
    line[cur + trailing_chars] = byte;
   1b80c:	54c1      	strb	r1, [r0, r3]
    if (byte == '\0') {
   1b80e:	b171      	cbz	r1, 1b82e <console_append_char+0x32>
    if (echo) {
   1b810:	4b0a      	ldr	r3, [pc, #40]	; (1b83c <console_append_char+0x40>)
   1b812:	681b      	ldr	r3, [r3, #0]
   1b814:	b92b      	cbnz	r3, 1b822 <console_append_char+0x26>
    ++cur;
   1b816:	4a07      	ldr	r2, [pc, #28]	; (1b834 <console_append_char+0x38>)
   1b818:	8813      	ldrh	r3, [r2, #0]
   1b81a:	3301      	adds	r3, #1
   1b81c:	8013      	strh	r3, [r2, #0]
    return 1;
   1b81e:	2001      	movs	r0, #1
}
   1b820:	bd08      	pop	{r3, pc}
        console_out_nolock(byte);
   1b822:	4608      	mov	r0, r1
   1b824:	f000 fd8a 	bl	1c33c <console_out_nolock>
        console_switch_to_logs();
   1b828:	e7f5      	b.n	1b816 <console_append_char+0x1a>
        return 0;
   1b82a:	2000      	movs	r0, #0
   1b82c:	e7f8      	b.n	1b820 <console_append_char+0x24>
        return 1;
   1b82e:	2001      	movs	r0, #1
   1b830:	e7f6      	b.n	1b820 <console_append_char+0x24>
   1b832:	bf00      	nop
   1b834:	100039b0 	.word	0x100039b0
   1b838:	100039ce 	.word	0x100039ce
   1b83c:	10000694 	.word	0x10000694

0001b840 <console_write_nolock>:
{
   1b840:	b570      	push	{r4, r5, r6, lr}
   1b842:	4606      	mov	r6, r0
   1b844:	460d      	mov	r5, r1
    for (i = 0; i < cnt; i++) {
   1b846:	2400      	movs	r4, #0
   1b848:	42ac      	cmp	r4, r5
   1b84a:	da07      	bge.n	1b85c <console_write_nolock+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) {
   1b84c:	5d30      	ldrb	r0, [r6, r4]
   1b84e:	f000 fd75 	bl	1c33c <console_out_nolock>
   1b852:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1b856:	d001      	beq.n	1b85c <console_write_nolock+0x1c>
    for (i = 0; i < cnt; i++) {
   1b858:	3401      	adds	r4, #1
   1b85a:	e7f5      	b.n	1b848 <console_write_nolock+0x8>
}
   1b85c:	bd70      	pop	{r4, r5, r6, pc}
	...

0001b860 <handle_end>:
    if (trailing_chars) {
   1b860:	4b11      	ldr	r3, [pc, #68]	; (1b8a8 <handle_end+0x48>)
   1b862:	8819      	ldrh	r1, [r3, #0]
   1b864:	b901      	cbnz	r1, 1b868 <handle_end+0x8>
   1b866:	4770      	bx	lr
{
   1b868:	b510      	push	{r4, lr}
   1b86a:	b084      	sub	sp, #16
    char seq[14] = CSI;
   1b86c:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1b870:	9300      	str	r3, [sp, #0]
   1b872:	2300      	movs	r3, #0
   1b874:	9301      	str	r3, [sp, #4]
   1b876:	9302      	str	r3, [sp, #8]
   1b878:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   1b87c:	b949      	cbnz	r1, 1b892 <handle_end+0x32>
        cur += trailing_chars;
   1b87e:	490b      	ldr	r1, [pc, #44]	; (1b8ac <handle_end+0x4c>)
   1b880:	4a09      	ldr	r2, [pc, #36]	; (1b8a8 <handle_end+0x48>)
   1b882:	880b      	ldrh	r3, [r1, #0]
   1b884:	8810      	ldrh	r0, [r2, #0]
   1b886:	4403      	add	r3, r0
   1b888:	800b      	strh	r3, [r1, #0]
        trailing_chars = 0;
   1b88a:	2300      	movs	r3, #0
   1b88c:	8013      	strh	r3, [r2, #0]
}
   1b88e:	b004      	add	sp, #16
   1b890:	bd10      	pop	{r4, pc}
        p = add_ascii_num_with_char(seq + 2, count, 'C');
   1b892:	466c      	mov	r4, sp
   1b894:	2243      	movs	r2, #67	; 0x43
   1b896:	f10d 0002 	add.w	r0, sp, #2
   1b89a:	f7ff ff37 	bl	1b70c <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   1b89e:	1b01      	subs	r1, r0, r4
   1b8a0:	4620      	mov	r0, r4
   1b8a2:	f7ff ffcd 	bl	1b840 <console_write_nolock>
   1b8a6:	e7ea      	b.n	1b87e <handle_end+0x1e>
   1b8a8:	100039ce 	.word	0x100039ce
   1b8ac:	100039b0 	.word	0x100039b0

0001b8b0 <handle_home>:
    if (cur) {
   1b8b0:	4b11      	ldr	r3, [pc, #68]	; (1b8f8 <handle_home+0x48>)
   1b8b2:	8819      	ldrh	r1, [r3, #0]
   1b8b4:	b901      	cbnz	r1, 1b8b8 <handle_home+0x8>
   1b8b6:	4770      	bx	lr
{
   1b8b8:	b510      	push	{r4, lr}
   1b8ba:	b084      	sub	sp, #16
    char seq[14] = CSI;
   1b8bc:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1b8c0:	9300      	str	r3, [sp, #0]
   1b8c2:	2300      	movs	r3, #0
   1b8c4:	9301      	str	r3, [sp, #4]
   1b8c6:	9302      	str	r3, [sp, #8]
   1b8c8:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   1b8cc:	b949      	cbnz	r1, 1b8e2 <handle_home+0x32>
        trailing_chars += cur;
   1b8ce:	490b      	ldr	r1, [pc, #44]	; (1b8fc <handle_home+0x4c>)
   1b8d0:	4a09      	ldr	r2, [pc, #36]	; (1b8f8 <handle_home+0x48>)
   1b8d2:	880b      	ldrh	r3, [r1, #0]
   1b8d4:	8810      	ldrh	r0, [r2, #0]
   1b8d6:	4403      	add	r3, r0
   1b8d8:	800b      	strh	r3, [r1, #0]
        cur = 0;
   1b8da:	2300      	movs	r3, #0
   1b8dc:	8013      	strh	r3, [r2, #0]
}
   1b8de:	b004      	add	sp, #16
   1b8e0:	bd10      	pop	{r4, pc}
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   1b8e2:	466c      	mov	r4, sp
   1b8e4:	2244      	movs	r2, #68	; 0x44
   1b8e6:	f10d 0002 	add.w	r0, sp, #2
   1b8ea:	f7ff ff0f 	bl	1b70c <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   1b8ee:	1b01      	subs	r1, r0, r4
   1b8f0:	4620      	mov	r0, r4
   1b8f2:	f7ff ffa5 	bl	1b840 <console_write_nolock>
   1b8f6:	e7ea      	b.n	1b8ce <handle_home+0x1e>
   1b8f8:	100039b0 	.word	0x100039b0
   1b8fc:	100039ce 	.word	0x100039ce

0001b900 <del_char>:
{
   1b900:	b530      	push	{r4, r5, lr}
   1b902:	b085      	sub	sp, #20
   1b904:	4604      	mov	r4, r0
    left = trailing_chars;
   1b906:	4b17      	ldr	r3, [pc, #92]	; (1b964 <del_char+0x64>)
   1b908:	881b      	ldrh	r3, [r3, #0]
    while (left-- > 1) {
   1b90a:	1e5d      	subs	r5, r3, #1
   1b90c:	2b01      	cmp	r3, #1
   1b90e:	dd06      	ble.n	1b91e <del_char+0x1e>
        *pos = *(pos + 1);
   1b910:	7860      	ldrb	r0, [r4, #1]
   1b912:	f804 0b01 	strb.w	r0, [r4], #1
        console_out_nolock(*(pos++));
   1b916:	f000 fd11 	bl	1c33c <console_out_nolock>
    while (left-- > 1) {
   1b91a:	462b      	mov	r3, r5
   1b91c:	e7f5      	b.n	1b90a <del_char+0xa>
    if (trailing_chars) {
   1b91e:	4b11      	ldr	r3, [pc, #68]	; (1b964 <del_char+0x64>)
   1b920:	881b      	ldrh	r3, [r3, #0]
   1b922:	b90b      	cbnz	r3, 1b928 <del_char+0x28>
}
   1b924:	b005      	add	sp, #20
   1b926:	bd30      	pop	{r4, r5, pc}
        console_out_nolock(' ');
   1b928:	2020      	movs	r0, #32
   1b92a:	f000 fd07 	bl	1c33c <console_out_nolock>
        cursor_backward(trailing_chars);
   1b92e:	4b0d      	ldr	r3, [pc, #52]	; (1b964 <del_char+0x64>)
   1b930:	8819      	ldrh	r1, [r3, #0]
    char seq[14] = CSI;
   1b932:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1b936:	9300      	str	r3, [sp, #0]
   1b938:	2300      	movs	r3, #0
   1b93a:	9301      	str	r3, [sp, #4]
   1b93c:	9302      	str	r3, [sp, #8]
   1b93e:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   1b942:	b921      	cbnz	r1, 1b94e <del_char+0x4e>
        trailing_chars--;
   1b944:	4a07      	ldr	r2, [pc, #28]	; (1b964 <del_char+0x64>)
   1b946:	8813      	ldrh	r3, [r2, #0]
   1b948:	3b01      	subs	r3, #1
   1b94a:	8013      	strh	r3, [r2, #0]
}
   1b94c:	e7ea      	b.n	1b924 <del_char+0x24>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   1b94e:	466c      	mov	r4, sp
   1b950:	2244      	movs	r2, #68	; 0x44
   1b952:	f10d 0002 	add.w	r0, sp, #2
   1b956:	f7ff fed9 	bl	1b70c <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   1b95a:	1b01      	subs	r1, r0, r4
   1b95c:	4620      	mov	r0, r4
   1b95e:	f7ff ff6f 	bl	1b840 <console_write_nolock>
   1b962:	e7ef      	b.n	1b944 <del_char+0x44>
   1b964:	100039ce 	.word	0x100039ce

0001b968 <handle_delete>:
{
   1b968:	b508      	push	{r3, lr}
    if (trailing_chars) {
   1b96a:	4b05      	ldr	r3, [pc, #20]	; (1b980 <handle_delete+0x18>)
   1b96c:	881b      	ldrh	r3, [r3, #0]
   1b96e:	b903      	cbnz	r3, 1b972 <handle_delete+0xa>
}
   1b970:	bd08      	pop	{r3, pc}
        del_char(&line[cur]);
   1b972:	4b04      	ldr	r3, [pc, #16]	; (1b984 <handle_delete+0x1c>)
   1b974:	881b      	ldrh	r3, [r3, #0]
   1b976:	4418      	add	r0, r3
   1b978:	f7ff ffc2 	bl	1b900 <del_char>
}
   1b97c:	e7f8      	b.n	1b970 <handle_delete+0x8>
   1b97e:	bf00      	nop
   1b980:	100039ce 	.word	0x100039ce
   1b984:	100039b0 	.word	0x100039b0

0001b988 <handle_ansi>:
{
   1b988:	4603      	mov	r3, r0
    if (esc_state & ESC_ANSI_FIRST) {
   1b98a:	4a5e      	ldr	r2, [pc, #376]	; (1bb04 <handle_ansi+0x17c>)
   1b98c:	6812      	ldr	r2, [r2, #0]
   1b98e:	f012 0f04 	tst.w	r2, #4
   1b992:	d025      	beq.n	1b9e0 <handle_ansi+0x58>
        esc_state &= ~ESC_ANSI_FIRST;
   1b994:	f022 0204 	bic.w	r2, r2, #4
   1b998:	485a      	ldr	r0, [pc, #360]	; (1bb04 <handle_ansi+0x17c>)
   1b99a:	6002      	str	r2, [r0, #0]
        if (!isdigit(byte)) {
   1b99c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1b9a0:	2809      	cmp	r0, #9
   1b9a2:	d912      	bls.n	1b9ca <handle_ansi+0x42>
            ansi_val = 1;
   1b9a4:	4a58      	ldr	r2, [pc, #352]	; (1bb08 <handle_ansi+0x180>)
   1b9a6:	2001      	movs	r0, #1
   1b9a8:	6010      	str	r0, [r2, #0]
{
   1b9aa:	b510      	push	{r4, lr}
   1b9ac:	b084      	sub	sp, #16
    switch (byte) {
   1b9ae:	2b48      	cmp	r3, #72	; 0x48
   1b9b0:	d840      	bhi.n	1ba34 <handle_ansi+0xac>
   1b9b2:	2b43      	cmp	r3, #67	; 0x43
   1b9b4:	f0c0 8093 	bcc.w	1bade <handle_ansi+0x156>
   1b9b8:	3b43      	subs	r3, #67	; 0x43
   1b9ba:	2b05      	cmp	r3, #5
   1b9bc:	f200 808f 	bhi.w	1bade <handle_ansi+0x156>
   1b9c0:	e8df f003 	tbb	[pc, r3]
   1b9c4:	948d4668 	.word	0x948d4668
   1b9c8:	8a8d      	.short	0x8a8d
        esc_state |= ESC_ANSI_VAL;
   1b9ca:	f042 0208 	orr.w	r2, r2, #8
   1b9ce:	494d      	ldr	r1, [pc, #308]	; (1bb04 <handle_ansi+0x17c>)
   1b9d0:	600a      	str	r2, [r1, #0]
        ansi_val = byte - '0';
   1b9d2:	3b30      	subs	r3, #48	; 0x30
   1b9d4:	4a4c      	ldr	r2, [pc, #304]	; (1bb08 <handle_ansi+0x180>)
   1b9d6:	6013      	str	r3, [r2, #0]
        ansi_val_2 = 0;
   1b9d8:	4b4c      	ldr	r3, [pc, #304]	; (1bb0c <handle_ansi+0x184>)
   1b9da:	2200      	movs	r2, #0
   1b9dc:	601a      	str	r2, [r3, #0]
        return;
   1b9de:	4770      	bx	lr
    if (esc_state & ESC_ANSI_VAL) {
   1b9e0:	f012 0f08 	tst.w	r2, #8
   1b9e4:	d0e1      	beq.n	1b9aa <handle_ansi+0x22>
        if (isdigit(byte)) {
   1b9e6:	3830      	subs	r0, #48	; 0x30
   1b9e8:	2809      	cmp	r0, #9
   1b9ea:	d906      	bls.n	1b9fa <handle_ansi+0x72>
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
   1b9ec:	2b3b      	cmp	r3, #59	; 0x3b
   1b9ee:	d019      	beq.n	1ba24 <handle_ansi+0x9c>
        esc_state &= ~ESC_ANSI_VAL_2;
   1b9f0:	f022 0218 	bic.w	r2, r2, #24
   1b9f4:	4843      	ldr	r0, [pc, #268]	; (1bb04 <handle_ansi+0x17c>)
   1b9f6:	6002      	str	r2, [r0, #0]
   1b9f8:	e7d7      	b.n	1b9aa <handle_ansi+0x22>
            if (esc_state & ESC_ANSI_VAL_2) {
   1b9fa:	f012 0f10 	tst.w	r2, #16
   1b9fe:	d008      	beq.n	1ba12 <handle_ansi+0x8a>
                ansi_val_2 *= 10;
   1ba00:	4942      	ldr	r1, [pc, #264]	; (1bb0c <handle_ansi+0x184>)
   1ba02:	680a      	ldr	r2, [r1, #0]
   1ba04:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                ansi_val_2 += byte - '0';
   1ba08:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1ba0c:	3b30      	subs	r3, #48	; 0x30
   1ba0e:	600b      	str	r3, [r1, #0]
   1ba10:	4770      	bx	lr
                ansi_val *= 10;
   1ba12:	493d      	ldr	r1, [pc, #244]	; (1bb08 <handle_ansi+0x180>)
   1ba14:	680a      	ldr	r2, [r1, #0]
   1ba16:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                ansi_val += byte - '0';
   1ba1a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1ba1e:	3b30      	subs	r3, #48	; 0x30
   1ba20:	600b      	str	r3, [r1, #0]
            return;
   1ba22:	4770      	bx	lr
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
   1ba24:	f012 0f10 	tst.w	r2, #16
   1ba28:	d1e2      	bne.n	1b9f0 <handle_ansi+0x68>
            esc_state |= ESC_ANSI_VAL_2;
   1ba2a:	f042 0210 	orr.w	r2, r2, #16
   1ba2e:	4b35      	ldr	r3, [pc, #212]	; (1bb04 <handle_ansi+0x17c>)
   1ba30:	601a      	str	r2, [r3, #0]
            return;
   1ba32:	4770      	bx	lr
    switch (byte) {
   1ba34:	2b7e      	cmp	r3, #126	; 0x7e
   1ba36:	d152      	bne.n	1bade <handle_ansi+0x156>
        switch (ansi_val) {
   1ba38:	4b33      	ldr	r3, [pc, #204]	; (1bb08 <handle_ansi+0x180>)
   1ba3a:	681b      	ldr	r3, [r3, #0]
   1ba3c:	2b03      	cmp	r3, #3
   1ba3e:	d059      	beq.n	1baf4 <handle_ansi+0x16c>
   1ba40:	2b04      	cmp	r3, #4
   1ba42:	d05b      	beq.n	1bafc <handle_ansi+0x174>
   1ba44:	2b01      	cmp	r3, #1
   1ba46:	d14a      	bne.n	1bade <handle_ansi+0x156>
            handle_home(line);
   1ba48:	4608      	mov	r0, r1
   1ba4a:	f7ff ff31 	bl	1b8b0 <handle_home>
            break;
   1ba4e:	e046      	b.n	1bade <handle_ansi+0x156>
        if (ansi_val > cur) {
   1ba50:	4b2f      	ldr	r3, [pc, #188]	; (1bb10 <handle_ansi+0x188>)
   1ba52:	881b      	ldrh	r3, [r3, #0]
   1ba54:	4a2c      	ldr	r2, [pc, #176]	; (1bb08 <handle_ansi+0x180>)
   1ba56:	6811      	ldr	r1, [r2, #0]
   1ba58:	428b      	cmp	r3, r1
   1ba5a:	d340      	bcc.n	1bade <handle_ansi+0x156>
        trailing_chars += ansi_val;
   1ba5c:	b28a      	uxth	r2, r1
   1ba5e:	4c2d      	ldr	r4, [pc, #180]	; (1bb14 <handle_ansi+0x18c>)
   1ba60:	8820      	ldrh	r0, [r4, #0]
   1ba62:	4410      	add	r0, r2
   1ba64:	8020      	strh	r0, [r4, #0]
        cur -= ansi_val;
   1ba66:	1a9b      	subs	r3, r3, r2
   1ba68:	4a29      	ldr	r2, [pc, #164]	; (1bb10 <handle_ansi+0x188>)
   1ba6a:	8013      	strh	r3, [r2, #0]
    char seq[14] = CSI;
   1ba6c:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1ba70:	9300      	str	r3, [sp, #0]
   1ba72:	2300      	movs	r3, #0
   1ba74:	9301      	str	r3, [sp, #4]
   1ba76:	9302      	str	r3, [sp, #8]
   1ba78:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   1ba7c:	b379      	cbz	r1, 1bade <handle_ansi+0x156>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   1ba7e:	466c      	mov	r4, sp
   1ba80:	2244      	movs	r2, #68	; 0x44
   1ba82:	f10d 0002 	add.w	r0, sp, #2
   1ba86:	f7ff fe41 	bl	1b70c <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   1ba8a:	1b01      	subs	r1, r0, r4
   1ba8c:	4620      	mov	r0, r4
   1ba8e:	f7ff fed7 	bl	1b840 <console_write_nolock>
}
   1ba92:	e024      	b.n	1bade <handle_ansi+0x156>
        if (ansi_val > trailing_chars) {
   1ba94:	4b1f      	ldr	r3, [pc, #124]	; (1bb14 <handle_ansi+0x18c>)
   1ba96:	881b      	ldrh	r3, [r3, #0]
   1ba98:	4a1b      	ldr	r2, [pc, #108]	; (1bb08 <handle_ansi+0x180>)
   1ba9a:	6811      	ldr	r1, [r2, #0]
   1ba9c:	428b      	cmp	r3, r1
   1ba9e:	d31e      	bcc.n	1bade <handle_ansi+0x156>
        trailing_chars -= ansi_val;
   1baa0:	b28a      	uxth	r2, r1
   1baa2:	1a9b      	subs	r3, r3, r2
   1baa4:	481b      	ldr	r0, [pc, #108]	; (1bb14 <handle_ansi+0x18c>)
   1baa6:	8003      	strh	r3, [r0, #0]
        cur += ansi_val;
   1baa8:	4b19      	ldr	r3, [pc, #100]	; (1bb10 <handle_ansi+0x188>)
   1baaa:	8818      	ldrh	r0, [r3, #0]
   1baac:	4402      	add	r2, r0
   1baae:	801a      	strh	r2, [r3, #0]
    char seq[14] = CSI;
   1bab0:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1bab4:	9300      	str	r3, [sp, #0]
   1bab6:	2300      	movs	r3, #0
   1bab8:	9301      	str	r3, [sp, #4]
   1baba:	9302      	str	r3, [sp, #8]
   1babc:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   1bac0:	b169      	cbz	r1, 1bade <handle_ansi+0x156>
        p = add_ascii_num_with_char(seq + 2, count, 'C');
   1bac2:	466c      	mov	r4, sp
   1bac4:	2243      	movs	r2, #67	; 0x43
   1bac6:	f10d 0002 	add.w	r0, sp, #2
   1baca:	f7ff fe1f 	bl	1b70c <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   1bace:	1b01      	subs	r1, r0, r4
   1bad0:	4620      	mov	r0, r4
   1bad2:	f7ff feb5 	bl	1b840 <console_write_nolock>
}
   1bad6:	e002      	b.n	1bade <handle_ansi+0x156>
        handle_home(line);
   1bad8:	4608      	mov	r0, r1
   1bada:	f7ff fee9 	bl	1b8b0 <handle_home>
    esc_state &= ~ESC_ANSI;
   1bade:	4a09      	ldr	r2, [pc, #36]	; (1bb04 <handle_ansi+0x17c>)
   1bae0:	6813      	ldr	r3, [r2, #0]
   1bae2:	f023 0302 	bic.w	r3, r3, #2
   1bae6:	6013      	str	r3, [r2, #0]
}
   1bae8:	b004      	add	sp, #16
   1baea:	bd10      	pop	{r4, pc}
        handle_end(line);
   1baec:	4608      	mov	r0, r1
   1baee:	f7ff feb7 	bl	1b860 <handle_end>
        break;
   1baf2:	e7f4      	b.n	1bade <handle_ansi+0x156>
            handle_delete(line);
   1baf4:	4608      	mov	r0, r1
   1baf6:	f7ff ff37 	bl	1b968 <handle_delete>
            break;
   1bafa:	e7f0      	b.n	1bade <handle_ansi+0x156>
            handle_end(line);
   1bafc:	4608      	mov	r0, r1
   1bafe:	f7ff feaf 	bl	1b860 <handle_end>
            break;
   1bb02:	e7ec      	b.n	1bade <handle_ansi+0x156>
   1bb04:	100039b8 	.word	0x100039b8
   1bb08:	10003970 	.word	0x10003970
   1bb0c:	10003974 	.word	0x10003974
   1bb10:	100039b0 	.word	0x100039b0
   1bb14:	100039ce 	.word	0x100039ce

0001bb18 <handle_backspace>:
    if (cur > 0) {
   1bb18:	4b13      	ldr	r3, [pc, #76]	; (1bb68 <handle_backspace+0x50>)
   1bb1a:	881b      	ldrh	r3, [r3, #0]
   1bb1c:	b903      	cbnz	r3, 1bb20 <handle_backspace+0x8>
   1bb1e:	4770      	bx	lr
{
   1bb20:	b530      	push	{r4, r5, lr}
   1bb22:	b085      	sub	sp, #20
   1bb24:	4604      	mov	r4, r0
    char seq[14] = CSI;
   1bb26:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1bb2a:	9300      	str	r3, [sp, #0]
   1bb2c:	2300      	movs	r3, #0
   1bb2e:	9301      	str	r3, [sp, #4]
   1bb30:	9302      	str	r3, [sp, #8]
   1bb32:	f8ad 300c 	strh.w	r3, [sp, #12]
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   1bb36:	466d      	mov	r5, sp
   1bb38:	2244      	movs	r2, #68	; 0x44
   1bb3a:	2101      	movs	r1, #1
   1bb3c:	f10d 0002 	add.w	r0, sp, #2
   1bb40:	f7ff fde4 	bl	1b70c <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   1bb44:	1b41      	subs	r1, r0, r5
   1bb46:	4628      	mov	r0, r5
   1bb48:	f7ff fe7a 	bl	1b840 <console_write_nolock>
        cur--;
   1bb4c:	4a06      	ldr	r2, [pc, #24]	; (1bb68 <handle_backspace+0x50>)
   1bb4e:	8813      	ldrh	r3, [r2, #0]
   1bb50:	3b01      	subs	r3, #1
   1bb52:	b29b      	uxth	r3, r3
   1bb54:	8013      	strh	r3, [r2, #0]
        trailing_chars++;
   1bb56:	4905      	ldr	r1, [pc, #20]	; (1bb6c <handle_backspace+0x54>)
   1bb58:	880a      	ldrh	r2, [r1, #0]
   1bb5a:	3201      	adds	r2, #1
   1bb5c:	800a      	strh	r2, [r1, #0]
        del_char(&line[cur]);
   1bb5e:	18e0      	adds	r0, r4, r3
   1bb60:	f7ff fece 	bl	1b900 <del_char>
}
   1bb64:	b005      	add	sp, #20
   1bb66:	bd30      	pop	{r4, r5, pc}
   1bb68:	100039b0 	.word	0x100039b0
   1bb6c:	100039ce 	.word	0x100039ce

0001bb70 <console_clear_line>:
{
   1bb70:	b510      	push	{r4, lr}
   1bb72:	b084      	sub	sp, #16
    if (cur) {
   1bb74:	4b13      	ldr	r3, [pc, #76]	; (1bbc4 <console_clear_line+0x54>)
   1bb76:	8819      	ldrh	r1, [r3, #0]
   1bb78:	b979      	cbnz	r1, 1bb9a <console_clear_line+0x2a>
    cur = 0;
   1bb7a:	2300      	movs	r3, #0
   1bb7c:	4a11      	ldr	r2, [pc, #68]	; (1bbc4 <console_clear_line+0x54>)
   1bb7e:	8013      	strh	r3, [r2, #0]
    trailing_chars = 0;
   1bb80:	4a11      	ldr	r2, [pc, #68]	; (1bbc8 <console_clear_line+0x58>)
   1bb82:	8013      	strh	r3, [r2, #0]
    console_out_nolock(ESC);
   1bb84:	201b      	movs	r0, #27
   1bb86:	f000 fbd9 	bl	1c33c <console_out_nolock>
    console_out_nolock('[');
   1bb8a:	205b      	movs	r0, #91	; 0x5b
   1bb8c:	f000 fbd6 	bl	1c33c <console_out_nolock>
    console_out_nolock('K');
   1bb90:	204b      	movs	r0, #75	; 0x4b
   1bb92:	f000 fbd3 	bl	1c33c <console_out_nolock>
}
   1bb96:	b004      	add	sp, #16
   1bb98:	bd10      	pop	{r4, pc}
    char seq[14] = CSI;
   1bb9a:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1bb9e:	9300      	str	r3, [sp, #0]
   1bba0:	2300      	movs	r3, #0
   1bba2:	9301      	str	r3, [sp, #4]
   1bba4:	9302      	str	r3, [sp, #8]
   1bba6:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   1bbaa:	2900      	cmp	r1, #0
   1bbac:	d0e5      	beq.n	1bb7a <console_clear_line+0xa>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   1bbae:	466c      	mov	r4, sp
   1bbb0:	2244      	movs	r2, #68	; 0x44
   1bbb2:	f10d 0002 	add.w	r0, sp, #2
   1bbb6:	f7ff fda9 	bl	1b70c <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   1bbba:	1b01      	subs	r1, r0, r4
   1bbbc:	4620      	mov	r0, r4
   1bbbe:	f7ff fe3f 	bl	1b840 <console_write_nolock>
}
   1bbc2:	e7da      	b.n	1bb7a <console_clear_line+0xa>
   1bbc4:	100039b0 	.word	0x100039b0
   1bbc8:	100039ce 	.word	0x100039ce

0001bbcc <insert_char>:
        cur + trailing_chars >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   1bbcc:	4b26      	ldr	r3, [pc, #152]	; (1bc68 <insert_char+0x9c>)
   1bbce:	881b      	ldrh	r3, [r3, #0]
   1bbd0:	4a26      	ldr	r2, [pc, #152]	; (1bc6c <insert_char+0xa0>)
   1bbd2:	8812      	ldrh	r2, [r2, #0]
   1bbd4:	4413      	add	r3, r2
    if ((!MYNEWT_VAL(CONSOLE_HISTORY_AUTO_SEARCH) || !trailing_selection) &&
   1bbd6:	2bfe      	cmp	r3, #254	; 0xfe
   1bbd8:	dc44      	bgt.n	1bc64 <insert_char+0x98>
{
   1bbda:	b570      	push	{r4, r5, r6, lr}
   1bbdc:	b084      	sub	sp, #16
   1bbde:	4604      	mov	r4, r0
   1bbe0:	460e      	mov	r6, r1
    if (echo) {
   1bbe2:	4b23      	ldr	r3, [pc, #140]	; (1bc70 <insert_char+0xa4>)
   1bbe4:	681b      	ldr	r3, [r3, #0]
   1bbe6:	b95b      	cbnz	r3, 1bc00 <insert_char+0x34>
    ++cur;
   1bbe8:	4a1f      	ldr	r2, [pc, #124]	; (1bc68 <insert_char+0x9c>)
   1bbea:	8813      	ldrh	r3, [r2, #0]
   1bbec:	3301      	adds	r3, #1
   1bbee:	8013      	strh	r3, [r2, #0]
    if (trailing_chars == 0) {
   1bbf0:	4b1e      	ldr	r3, [pc, #120]	; (1bc6c <insert_char+0xa0>)
   1bbf2:	881b      	ldrh	r3, [r3, #0]
   1bbf4:	b903      	cbnz	r3, 1bbf8 <insert_char+0x2c>
        *pos = c;
   1bbf6:	7026      	strb	r6, [r4, #0]
    tmp = *pos;
   1bbf8:	7825      	ldrb	r5, [r4, #0]
    *(pos++) = c;
   1bbfa:	f804 6b01 	strb.w	r6, [r4], #1
    while (end-- > 0) {
   1bbfe:	e00d      	b.n	1bc1c <insert_char+0x50>
        console_out_nolock(c);
   1bc00:	4608      	mov	r0, r1
   1bc02:	f000 fb9b 	bl	1c33c <console_out_nolock>
   1bc06:	e7ef      	b.n	1bbe8 <insert_char+0x1c>
            console_out_nolock(tmp);
   1bc08:	4628      	mov	r0, r5
   1bc0a:	f000 fb97 	bl	1c33c <console_out_nolock>
        c = *pos;
   1bc0e:	7822      	ldrb	r2, [r4, #0]
        *(pos++) = tmp;
   1bc10:	4620      	mov	r0, r4
   1bc12:	f800 5b01 	strb.w	r5, [r0], #1
    while (end-- > 0) {
   1bc16:	4633      	mov	r3, r6
        tmp = c;
   1bc18:	4615      	mov	r5, r2
        *(pos++) = tmp;
   1bc1a:	4604      	mov	r4, r0
    while (end-- > 0) {
   1bc1c:	1e5e      	subs	r6, r3, #1
   1bc1e:	2b00      	cmp	r3, #0
   1bc20:	dd04      	ble.n	1bc2c <insert_char+0x60>
        if (echo) {
   1bc22:	4b13      	ldr	r3, [pc, #76]	; (1bc70 <insert_char+0xa4>)
   1bc24:	681b      	ldr	r3, [r3, #0]
   1bc26:	2b00      	cmp	r3, #0
   1bc28:	d0f1      	beq.n	1bc0e <insert_char+0x42>
   1bc2a:	e7ed      	b.n	1bc08 <insert_char+0x3c>
    if (echo) {
   1bc2c:	4b10      	ldr	r3, [pc, #64]	; (1bc70 <insert_char+0xa4>)
   1bc2e:	681b      	ldr	r3, [r3, #0]
   1bc30:	b90b      	cbnz	r3, 1bc36 <insert_char+0x6a>
}
   1bc32:	b004      	add	sp, #16
   1bc34:	bd70      	pop	{r4, r5, r6, pc}
        cursor_backward(trailing_chars);
   1bc36:	4b0d      	ldr	r3, [pc, #52]	; (1bc6c <insert_char+0xa0>)
   1bc38:	8819      	ldrh	r1, [r3, #0]
    char seq[14] = CSI;
   1bc3a:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1bc3e:	9300      	str	r3, [sp, #0]
   1bc40:	2300      	movs	r3, #0
   1bc42:	9301      	str	r3, [sp, #4]
   1bc44:	9302      	str	r3, [sp, #8]
   1bc46:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   1bc4a:	2900      	cmp	r1, #0
   1bc4c:	d0f1      	beq.n	1bc32 <insert_char+0x66>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   1bc4e:	466c      	mov	r4, sp
   1bc50:	2244      	movs	r2, #68	; 0x44
   1bc52:	f10d 0002 	add.w	r0, sp, #2
   1bc56:	f7ff fd59 	bl	1b70c <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   1bc5a:	1b01      	subs	r1, r0, r4
   1bc5c:	4620      	mov	r0, r4
   1bc5e:	f7ff fdef 	bl	1b840 <console_write_nolock>
}
   1bc62:	e7e6      	b.n	1bc32 <insert_char+0x66>
   1bc64:	4770      	bx	lr
   1bc66:	bf00      	nop
   1bc68:	100039b0 	.word	0x100039b0
   1bc6c:	100039ce 	.word	0x100039ce
   1bc70:	10000694 	.word	0x10000694

0001bc74 <console_echo>:
    echo = on;
   1bc74:	4b01      	ldr	r3, [pc, #4]	; (1bc7c <console_echo+0x8>)
   1bc76:	6018      	str	r0, [r3, #0]
}
   1bc78:	4770      	bx	lr
   1bc7a:	bf00      	nop
   1bc7c:	10000694 	.word	0x10000694

0001bc80 <console_nlip_enable_echo>:
{
   1bc80:	b508      	push	{r3, lr}
    console_echo(1);
   1bc82:	2001      	movs	r0, #1
   1bc84:	f7ff fff6 	bl	1bc74 <console_echo>
}
   1bc88:	bd08      	pop	{r3, pc}

0001bc8a <console_nlip_disable_echo>:
{
   1bc8a:	b508      	push	{r3, lr}
    console_echo(0);
   1bc8c:	2000      	movs	r0, #0
   1bc8e:	f7ff fff1 	bl	1bc74 <console_echo>
}
   1bc92:	bd08      	pop	{r3, pc}

0001bc94 <handle_nlip>:
{
   1bc94:	b570      	push	{r4, r5, r6, lr}
   1bc96:	4604      	mov	r4, r0
    input = current_line_ev->ev_arg;
   1bc98:	4b3b      	ldr	r3, [pc, #236]	; (1bd88 <handle_nlip+0xf4>)
   1bc9a:	681b      	ldr	r3, [r3, #0]
   1bc9c:	689d      	ldr	r5, [r3, #8]
    switch (nlip_state) {
   1bc9e:	4b3b      	ldr	r3, [pc, #236]	; (1bd8c <handle_nlip+0xf8>)
   1bca0:	681b      	ldr	r3, [r3, #0]
   1bca2:	3b04      	subs	r3, #4
   1bca4:	2b10      	cmp	r3, #16
   1bca6:	d852      	bhi.n	1bd4e <handle_nlip+0xba>
   1bca8:	e8df f003 	tbb	[pc, r3]
   1bcac:	511f5138 	.word	0x511f5138
   1bcb0:	51510951 	.word	0x51510951
   1bcb4:	51515151 	.word	0x51515151
   1bcb8:	51515151 	.word	0x51515151
   1bcbc:	09          	.byte	0x09
   1bcbd:	00          	.byte	0x00
        insert_char(&input->line[cur], byte);
   1bcbe:	4b34      	ldr	r3, [pc, #208]	; (1bd90 <handle_nlip+0xfc>)
   1bcc0:	8818      	ldrh	r0, [r3, #0]
   1bcc2:	4621      	mov	r1, r4
   1bcc4:	4428      	add	r0, r5
   1bcc6:	f7ff ff81 	bl	1bbcc <insert_char>
        if (byte == '\n') {
   1bcca:	2c0a      	cmp	r4, #10
   1bccc:	d001      	beq.n	1bcd2 <handle_nlip+0x3e>
    handled = 1;
   1bcce:	2001      	movs	r0, #1
}
   1bcd0:	bd70      	pop	{r4, r5, r6, pc}
            input->line[cur] = '\0';
   1bcd2:	4b2f      	ldr	r3, [pc, #188]	; (1bd90 <handle_nlip+0xfc>)
   1bcd4:	881b      	ldrh	r3, [r3, #0]
   1bcd6:	2400      	movs	r4, #0
   1bcd8:	54ec      	strb	r4, [r5, r3]
            console_nlip_enable_echo();
   1bcda:	f7ff ffd1 	bl	1bc80 <console_nlip_enable_echo>
            nlip_state = 0;
   1bcde:	4b2b      	ldr	r3, [pc, #172]	; (1bd8c <handle_nlip+0xf8>)
   1bce0:	601c      	str	r4, [r3, #0]
            console_handle_line();
   1bce2:	f7ff fd39 	bl	1b758 <console_handle_line>
    handled = 1;
   1bce6:	2001      	movs	r0, #1
   1bce8:	e7f2      	b.n	1bcd0 <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_PKT_START2) {
   1bcea:	2809      	cmp	r0, #9
   1bcec:	d005      	beq.n	1bcfa <handle_nlip+0x66>
            nlip_state = 0;
   1bcee:	4b27      	ldr	r3, [pc, #156]	; (1bd8c <handle_nlip+0xf8>)
   1bcf0:	2200      	movs	r2, #0
   1bcf2:	601a      	str	r2, [r3, #0]
            handled = g_console_ignore_non_nlip;
   1bcf4:	4b27      	ldr	r3, [pc, #156]	; (1bd94 <handle_nlip+0x100>)
   1bcf6:	7818      	ldrb	r0, [r3, #0]
   1bcf8:	e7ea      	b.n	1bcd0 <handle_nlip+0x3c>
            nlip_state = NLIP_PKT_START2;
   1bcfa:	4b24      	ldr	r3, [pc, #144]	; (1bd8c <handle_nlip+0xf8>)
   1bcfc:	6018      	str	r0, [r3, #0]
            console_nlip_disable_echo();
   1bcfe:	f7ff ffc4 	bl	1bc8a <console_nlip_disable_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START1);
   1bd02:	4e23      	ldr	r6, [pc, #140]	; (1bd90 <handle_nlip+0xfc>)
   1bd04:	8830      	ldrh	r0, [r6, #0]
   1bd06:	2106      	movs	r1, #6
   1bd08:	4428      	add	r0, r5
   1bd0a:	f7ff ff5f 	bl	1bbcc <insert_char>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START2);
   1bd0e:	8830      	ldrh	r0, [r6, #0]
   1bd10:	4621      	mov	r1, r4
   1bd12:	4428      	add	r0, r5
   1bd14:	f7ff ff5a 	bl	1bbcc <insert_char>
    handled = 1;
   1bd18:	2001      	movs	r0, #1
   1bd1a:	e7d9      	b.n	1bcd0 <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_DATA_START2) {
   1bd1c:	2814      	cmp	r0, #20
   1bd1e:	d005      	beq.n	1bd2c <handle_nlip+0x98>
            nlip_state = 0;
   1bd20:	4b1a      	ldr	r3, [pc, #104]	; (1bd8c <handle_nlip+0xf8>)
   1bd22:	2200      	movs	r2, #0
   1bd24:	601a      	str	r2, [r3, #0]
            handled = g_console_ignore_non_nlip;
   1bd26:	4b1b      	ldr	r3, [pc, #108]	; (1bd94 <handle_nlip+0x100>)
   1bd28:	7818      	ldrb	r0, [r3, #0]
   1bd2a:	e7d1      	b.n	1bcd0 <handle_nlip+0x3c>
            nlip_state = NLIP_DATA_START2;
   1bd2c:	4b17      	ldr	r3, [pc, #92]	; (1bd8c <handle_nlip+0xf8>)
   1bd2e:	6018      	str	r0, [r3, #0]
            console_nlip_disable_echo();
   1bd30:	f7ff ffab 	bl	1bc8a <console_nlip_disable_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1);
   1bd34:	4e16      	ldr	r6, [pc, #88]	; (1bd90 <handle_nlip+0xfc>)
   1bd36:	8830      	ldrh	r0, [r6, #0]
   1bd38:	2104      	movs	r1, #4
   1bd3a:	4428      	add	r0, r5
   1bd3c:	f7ff ff46 	bl	1bbcc <insert_char>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START2);
   1bd40:	8830      	ldrh	r0, [r6, #0]
   1bd42:	4621      	mov	r1, r4
   1bd44:	4428      	add	r0, r5
   1bd46:	f7ff ff41 	bl	1bbcc <insert_char>
    handled = 1;
   1bd4a:	2001      	movs	r0, #1
   1bd4c:	e7c0      	b.n	1bcd0 <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_DATA_START1) {
   1bd4e:	2804      	cmp	r0, #4
   1bd50:	d00a      	beq.n	1bd68 <handle_nlip+0xd4>
        } else if (byte == CONSOLE_NLIP_PKT_START1) {
   1bd52:	2806      	cmp	r0, #6
   1bd54:	d00d      	beq.n	1bd72 <handle_nlip+0xde>
            handled = g_console_ignore_non_nlip && byte != '\r' && byte != '\n';
   1bd56:	4b0f      	ldr	r3, [pc, #60]	; (1bd94 <handle_nlip+0x100>)
   1bd58:	781b      	ldrb	r3, [r3, #0]
   1bd5a:	b18b      	cbz	r3, 1bd80 <handle_nlip+0xec>
   1bd5c:	280d      	cmp	r0, #13
   1bd5e:	d011      	beq.n	1bd84 <handle_nlip+0xf0>
   1bd60:	280a      	cmp	r0, #10
   1bd62:	d00b      	beq.n	1bd7c <handle_nlip+0xe8>
   1bd64:	2001      	movs	r0, #1
    return handled;
   1bd66:	e7b3      	b.n	1bcd0 <handle_nlip+0x3c>
            nlip_state = NLIP_DATA_START1;
   1bd68:	4b08      	ldr	r3, [pc, #32]	; (1bd8c <handle_nlip+0xf8>)
   1bd6a:	2204      	movs	r2, #4
   1bd6c:	601a      	str	r2, [r3, #0]
    handled = 1;
   1bd6e:	2001      	movs	r0, #1
   1bd70:	e7ae      	b.n	1bcd0 <handle_nlip+0x3c>
            nlip_state = NLIP_PKT_START1;
   1bd72:	4b06      	ldr	r3, [pc, #24]	; (1bd8c <handle_nlip+0xf8>)
   1bd74:	2206      	movs	r2, #6
   1bd76:	601a      	str	r2, [r3, #0]
    handled = 1;
   1bd78:	2001      	movs	r0, #1
   1bd7a:	e7a9      	b.n	1bcd0 <handle_nlip+0x3c>
            handled = g_console_ignore_non_nlip && byte != '\r' && byte != '\n';
   1bd7c:	2000      	movs	r0, #0
   1bd7e:	e7a7      	b.n	1bcd0 <handle_nlip+0x3c>
   1bd80:	2000      	movs	r0, #0
   1bd82:	e7a5      	b.n	1bcd0 <handle_nlip+0x3c>
   1bd84:	2000      	movs	r0, #0
   1bd86:	e7a3      	b.n	1bcd0 <handle_nlip+0x3c>
   1bd88:	100039b4 	.word	0x100039b4
   1bd8c:	100039c4 	.word	0x100039c4
   1bd90:	100039b0 	.word	0x100039b0
   1bd94:	100039bc 	.word	0x100039bc

0001bd98 <console_lock>:
{
   1bd98:	b508      	push	{r3, lr}
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   1bd9a:	4b0a      	ldr	r3, [pc, #40]	; (1bdc4 <console_lock+0x2c>)
   1bd9c:	685b      	ldr	r3, [r3, #4]
   1bd9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   1bda2:	b133      	cbz	r3, 1bdb2 <console_lock+0x1a>
 *
 * @return number of times lock was called from current task
 */
static inline uint16_t os_mutex_get_level(struct os_mutex *mu)
{
    return mu->mu_level;
   1bda4:	4b08      	ldr	r3, [pc, #32]	; (1bdc8 <console_lock+0x30>)
   1bda6:	88db      	ldrh	r3, [r3, #6]
        if (os_mutex_get_level(&console_write_lock)) {
   1bda8:	b90b      	cbnz	r3, 1bdae <console_lock+0x16>
    int rc = OS_OK;
   1bdaa:	2000      	movs	r0, #0
   1bdac:	e007      	b.n	1bdbe <console_lock+0x26>
            rc = OS_EBUSY;
   1bdae:	200b      	movs	r0, #11
        goto end;
   1bdb0:	e005      	b.n	1bdbe <console_lock+0x26>
    rc = os_mutex_pend(&console_write_lock, timeout);
   1bdb2:	4601      	mov	r1, r0
   1bdb4:	4804      	ldr	r0, [pc, #16]	; (1bdc8 <console_lock+0x30>)
   1bdb6:	f7fe feaf 	bl	1ab18 <os_mutex_pend>
    if (rc == OS_NOT_STARTED) {
   1bdba:	2809      	cmp	r0, #9
   1bdbc:	d000      	beq.n	1bdc0 <console_lock+0x28>
}
   1bdbe:	bd08      	pop	{r3, pc}
        rc = OS_OK;
   1bdc0:	2000      	movs	r0, #0
    return rc;
   1bdc2:	e7fc      	b.n	1bdbe <console_lock+0x26>
   1bdc4:	e000ed00 	.word	0xe000ed00
   1bdc8:	100039a4 	.word	0x100039a4

0001bdcc <console_unlock>:
{
   1bdcc:	b508      	push	{r3, lr}
   1bdce:	4b0c      	ldr	r3, [pc, #48]	; (1be00 <console_unlock+0x34>)
   1bdd0:	685b      	ldr	r3, [r3, #4]
   1bdd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   1bdd6:	b10b      	cbz	r3, 1bddc <console_unlock+0x10>
    int rc = OS_OK;
   1bdd8:	2000      	movs	r0, #0
}
   1bdda:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&console_write_lock);
   1bddc:	4809      	ldr	r0, [pc, #36]	; (1be04 <console_unlock+0x38>)
   1bdde:	f7fe fe3b 	bl	1aa58 <os_mutex_release>
    assert(rc == OS_OK || rc == OS_NOT_STARTED);
   1bde2:	2800      	cmp	r0, #0
   1bde4:	d0f9      	beq.n	1bdda <console_unlock+0xe>
   1bde6:	2809      	cmp	r0, #9
   1bde8:	d0f7      	beq.n	1bdda <console_unlock+0xe>
   1bdea:	f7f8 fc83 	bl	146f4 <hal_debugger_connected>
   1bdee:	b100      	cbz	r0, 1bdf2 <console_unlock+0x26>
    __BKPT(1);
   1bdf0:	be01      	bkpt	0x0001
   1bdf2:	2300      	movs	r3, #0
   1bdf4:	461a      	mov	r2, r3
   1bdf6:	4619      	mov	r1, r3
   1bdf8:	4618      	mov	r0, r3
   1bdfa:	f7fc ff99 	bl	18d30 <__assert_func>
   1bdfe:	bf00      	nop
   1be00:	e000ed00 	.word	0xe000ed00
   1be04:	100039a4 	.word	0x100039a4

0001be08 <console_out>:
{
   1be08:	b510      	push	{r4, lr}
   1be0a:	4604      	mov	r4, r0
    if (console_lock(timeout) != OS_OK) {
   1be0c:	2080      	movs	r0, #128	; 0x80
   1be0e:	f7ff ffc3 	bl	1bd98 <console_lock>
   1be12:	b108      	cbz	r0, 1be18 <console_out+0x10>
}
   1be14:	4620      	mov	r0, r4
   1be16:	bd10      	pop	{r4, pc}
    rc = console_filter_out(c);
   1be18:	4620      	mov	r0, r4
   1be1a:	f7ff fcbb 	bl	1b794 <console_filter_out>
   1be1e:	4604      	mov	r4, r0
    (void)console_unlock();
   1be20:	f7ff ffd4 	bl	1bdcc <console_unlock>
    return rc;
   1be24:	e7f6      	b.n	1be14 <console_out+0xc>
	...

0001be28 <console_write>:
{
   1be28:	b538      	push	{r3, r4, r5, lr}
   1be2a:	4605      	mov	r5, r0
   1be2c:	460c      	mov	r4, r1
    if (console_lock(timeout) != OS_OK) {
   1be2e:	2080      	movs	r0, #128	; 0x80
   1be30:	f7ff ffb2 	bl	1bd98 <console_lock>
   1be34:	b9e0      	cbnz	r0, 1be70 <console_write+0x48>
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   1be36:	2c01      	cmp	r4, #1
   1be38:	dd02      	ble.n	1be40 <console_write+0x18>
   1be3a:	782b      	ldrb	r3, [r5, #0]
   1be3c:	2b04      	cmp	r3, #4
   1be3e:	d018      	beq.n	1be72 <console_write+0x4a>
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   1be40:	2c02      	cmp	r4, #2
   1be42:	dd02      	ble.n	1be4a <console_write+0x22>
   1be44:	786b      	ldrb	r3, [r5, #1]
   1be46:	2b06      	cmp	r3, #6
   1be48:	d01a      	beq.n	1be80 <console_write+0x58>
    if (!g_is_output_nlip && g_console_silence_non_nlip) {
   1be4a:	4b13      	ldr	r3, [pc, #76]	; (1be98 <console_write+0x70>)
   1be4c:	781b      	ldrb	r3, [r3, #0]
   1be4e:	b913      	cbnz	r3, 1be56 <console_write+0x2e>
   1be50:	4b12      	ldr	r3, [pc, #72]	; (1be9c <console_write+0x74>)
   1be52:	781b      	ldrb	r3, [r3, #0]
   1be54:	b91b      	cbnz	r3, 1be5e <console_write+0x36>
    console_filter_write(str, cnt);
   1be56:	4621      	mov	r1, r4
   1be58:	4628      	mov	r0, r5
   1be5a:	f7ff fcbf 	bl	1b7dc <console_filter_write>
    if (cnt > 0 && str[cnt - 1] == '\n') {
   1be5e:	2c00      	cmp	r4, #0
   1be60:	dd04      	ble.n	1be6c <console_write+0x44>
   1be62:	1928      	adds	r0, r5, r4
   1be64:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   1be68:	2b0a      	cmp	r3, #10
   1be6a:	d010      	beq.n	1be8e <console_write+0x66>
    (void)console_unlock();
   1be6c:	f7ff ffae 	bl	1bdcc <console_unlock>
}
   1be70:	bd38      	pop	{r3, r4, r5, pc}
        str[1] == CONSOLE_NLIP_DATA_START2) {
   1be72:	786b      	ldrb	r3, [r5, #1]
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   1be74:	2b14      	cmp	r3, #20
   1be76:	d1e3      	bne.n	1be40 <console_write+0x18>
        g_is_output_nlip = 1;
   1be78:	4b07      	ldr	r3, [pc, #28]	; (1be98 <console_write+0x70>)
   1be7a:	2201      	movs	r2, #1
   1be7c:	701a      	strb	r2, [r3, #0]
   1be7e:	e7df      	b.n	1be40 <console_write+0x18>
        str[2] == CONSOLE_NLIP_PKT_START2) {
   1be80:	78ab      	ldrb	r3, [r5, #2]
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   1be82:	2b09      	cmp	r3, #9
   1be84:	d1e1      	bne.n	1be4a <console_write+0x22>
        g_is_output_nlip = 1;
   1be86:	4b04      	ldr	r3, [pc, #16]	; (1be98 <console_write+0x70>)
   1be88:	2201      	movs	r2, #1
   1be8a:	701a      	strb	r2, [r3, #0]
   1be8c:	e7dd      	b.n	1be4a <console_write+0x22>
        g_is_output_nlip = 0;
   1be8e:	4b02      	ldr	r3, [pc, #8]	; (1be98 <console_write+0x70>)
   1be90:	2200      	movs	r2, #0
   1be92:	701a      	strb	r2, [r3, #0]
   1be94:	e7ea      	b.n	1be6c <console_write+0x44>
   1be96:	bf00      	nop
   1be98:	100039bf 	.word	0x100039bf
   1be9c:	100039be 	.word	0x100039be

0001bea0 <console_prompt_set>:
{
   1bea0:	b570      	push	{r4, r5, r6, lr}
   1bea2:	4605      	mov	r5, r0
   1bea4:	460c      	mov	r4, r1
    prompt_len = strlen(prompt);
   1bea6:	f7fe ff3a 	bl	1ad1e <strlen>
   1beaa:	b283      	uxth	r3, r0
   1beac:	4a19      	ldr	r2, [pc, #100]	; (1bf14 <console_prompt_set+0x74>)
   1beae:	8013      	strh	r3, [r2, #0]
    assert(MYNEWT_VAL(CONSOLE_PROMPT_MAX_LEN) > prompt_len);
   1beb0:	2b0f      	cmp	r3, #15
   1beb2:	d81d      	bhi.n	1bef0 <console_prompt_set+0x50>
    strcpy(console_prompt, prompt);
   1beb4:	4629      	mov	r1, r5
   1beb6:	4818      	ldr	r0, [pc, #96]	; (1bf18 <console_prompt_set+0x78>)
   1beb8:	f018 f9f1 	bl	3429e <strcpy>
    if (line) {
   1bebc:	b314      	cbz	r4, 1bf04 <console_prompt_set+0x64>
        cur = strlen(line);
   1bebe:	4620      	mov	r0, r4
   1bec0:	f7fe ff2d 	bl	1ad1e <strlen>
   1bec4:	4b15      	ldr	r3, [pc, #84]	; (1bf1c <console_prompt_set+0x7c>)
   1bec6:	8018      	strh	r0, [r3, #0]
    trailing_chars = 0;
   1bec8:	4b15      	ldr	r3, [pc, #84]	; (1bf20 <console_prompt_set+0x80>)
   1beca:	2200      	movs	r2, #0
   1becc:	801a      	strh	r2, [r3, #0]
    locked = console_lock(1000) == OS_OK;
   1bece:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1bed2:	f7ff ff61 	bl	1bd98 <console_lock>
   1bed6:	4606      	mov	r6, r0
        console_write(prompt, prompt_len);
   1bed8:	4b0e      	ldr	r3, [pc, #56]	; (1bf14 <console_prompt_set+0x74>)
   1beda:	8819      	ldrh	r1, [r3, #0]
   1bedc:	4628      	mov	r0, r5
   1bede:	f7ff ffa3 	bl	1be28 <console_write>
        console_write(line, cur);
   1bee2:	4b0e      	ldr	r3, [pc, #56]	; (1bf1c <console_prompt_set+0x7c>)
   1bee4:	8819      	ldrh	r1, [r3, #0]
   1bee6:	4620      	mov	r0, r4
   1bee8:	f7ff ff9e 	bl	1be28 <console_write>
    if (locked) {
   1beec:	b176      	cbz	r6, 1bf0c <console_prompt_set+0x6c>
}
   1beee:	bd70      	pop	{r4, r5, r6, pc}
    assert(MYNEWT_VAL(CONSOLE_PROMPT_MAX_LEN) > prompt_len);
   1bef0:	f7f8 fc00 	bl	146f4 <hal_debugger_connected>
   1bef4:	b100      	cbz	r0, 1bef8 <console_prompt_set+0x58>
   1bef6:	be01      	bkpt	0x0001
   1bef8:	2300      	movs	r3, #0
   1befa:	461a      	mov	r2, r3
   1befc:	4619      	mov	r1, r3
   1befe:	4618      	mov	r0, r3
   1bf00:	f7fc ff16 	bl	18d30 <__assert_func>
        cur = 0;
   1bf04:	4b05      	ldr	r3, [pc, #20]	; (1bf1c <console_prompt_set+0x7c>)
   1bf06:	2200      	movs	r2, #0
   1bf08:	801a      	strh	r2, [r3, #0]
   1bf0a:	e7dd      	b.n	1bec8 <console_prompt_set+0x28>
        (void)console_unlock();
   1bf0c:	f7ff ff5e 	bl	1bdcc <console_unlock>
}
   1bf10:	e7ed      	b.n	1beee <console_prompt_set+0x4e>
   1bf12:	bf00      	nop
   1bf14:	100039ca 	.word	0x100039ca
   1bf18:	10003994 	.word	0x10003994
   1bf1c:	100039b0 	.word	0x100039b0
   1bf20:	100039ce 	.word	0x100039ce

0001bf24 <console_blocking_mode>:
{
   1bf24:	b508      	push	{r3, lr}
    uart_console_blocking_mode();
   1bf26:	f000 f9f3 	bl	1c310 <uart_console_blocking_mode>
}
   1bf2a:	bd08      	pop	{r3, pc}

0001bf2c <console_handle_char>:
{
   1bf2c:	b570      	push	{r4, r5, r6, lr}
    if (!lines_queue) {
   1bf2e:	4b57      	ldr	r3, [pc, #348]	; (1c08c <console_handle_char+0x160>)
   1bf30:	681b      	ldr	r3, [r3, #0]
   1bf32:	2b00      	cmp	r3, #0
   1bf34:	f000 80a5 	beq.w	1c082 <console_handle_char+0x156>
   1bf38:	4604      	mov	r4, r0
    if (!current_line_ev) {
   1bf3a:	4b55      	ldr	r3, [pc, #340]	; (1c090 <console_handle_char+0x164>)
   1bf3c:	681b      	ldr	r3, [r3, #0]
   1bf3e:	b14b      	cbz	r3, 1bf54 <console_handle_char+0x28>
    input = current_line_ev->ev_arg;
   1bf40:	4b53      	ldr	r3, [pc, #332]	; (1c090 <console_handle_char+0x164>)
   1bf42:	681b      	ldr	r3, [r3, #0]
   1bf44:	689e      	ldr	r6, [r3, #8]
    if (handle_nlip(byte)) {
   1bf46:	4620      	mov	r0, r4
   1bf48:	f7ff fea4 	bl	1bc94 <handle_nlip>
   1bf4c:	b178      	cbz	r0, 1bf6e <console_handle_char+0x42>
        return 0;
   1bf4e:	2500      	movs	r5, #0
}
   1bf50:	4628      	mov	r0, r5
   1bf52:	bd70      	pop	{r4, r5, r6, pc}
        current_line_ev = os_eventq_get_no_wait(&avail_queue);
   1bf54:	484f      	ldr	r0, [pc, #316]	; (1c094 <console_handle_char+0x168>)
   1bf56:	f7fd fa76 	bl	19446 <os_eventq_get_no_wait>
   1bf5a:	4b4d      	ldr	r3, [pc, #308]	; (1c090 <console_handle_char+0x164>)
   1bf5c:	6018      	str	r0, [r3, #0]
        if (!current_line_ev) {
   1bf5e:	2800      	cmp	r0, #0
   1bf60:	d1ee      	bne.n	1bf40 <console_handle_char+0x14>
            rx_stalled = true;
   1bf62:	4b4d      	ldr	r3, [pc, #308]	; (1c098 <console_handle_char+0x16c>)
   1bf64:	2201      	movs	r2, #1
   1bf66:	701a      	strb	r2, [r3, #0]
            return -1;
   1bf68:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1bf6c:	e7f0      	b.n	1bf50 <console_handle_char+0x24>
    if (console_lock(1000)) {
   1bf6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1bf72:	f7ff ff11 	bl	1bd98 <console_lock>
   1bf76:	4605      	mov	r5, r0
   1bf78:	2800      	cmp	r0, #0
   1bf7a:	f040 8084 	bne.w	1c086 <console_handle_char+0x15a>
    if (esc_state & ESC_ANSI) {
   1bf7e:	4b47      	ldr	r3, [pc, #284]	; (1c09c <console_handle_char+0x170>)
   1bf80:	681b      	ldr	r3, [r3, #0]
   1bf82:	f013 0f02 	tst.w	r3, #2
   1bf86:	d120      	bne.n	1bfca <console_handle_char+0x9e>
    if (esc_state & ESC_ESC) {
   1bf88:	f013 0f01 	tst.w	r3, #1
   1bf8c:	d122      	bne.n	1bfd4 <console_handle_char+0xa8>
	return (__c >= 0x20 && __c <= 0x7e);
   1bf8e:	f1a4 0320 	sub.w	r3, r4, #32
    if (!isprint(byte)) {
   1bf92:	2b5e      	cmp	r3, #94	; 0x5e
   1bf94:	d96c      	bls.n	1c070 <console_handle_char+0x144>
        handle_ansi(byte, input->line);
   1bf96:	4631      	mov	r1, r6
   1bf98:	4620      	mov	r0, r4
   1bf9a:	f7ff fcf5 	bl	1b988 <handle_ansi>
        switch (byte) {
   1bf9e:	2c1b      	cmp	r4, #27
   1bfa0:	d828      	bhi.n	1bff4 <console_handle_char+0xc8>
   1bfa2:	2c03      	cmp	r4, #3
   1bfa4:	d332      	bcc.n	1c00c <console_handle_char+0xe0>
   1bfa6:	1ee3      	subs	r3, r4, #3
   1bfa8:	2b18      	cmp	r3, #24
   1bfaa:	d82f      	bhi.n	1c00c <console_handle_char+0xe0>
   1bfac:	e8df f003 	tbb	[pc, r3]
   1bfb0:	2e2e2e59 	.word	0x2e2e2e59
   1bfb4:	344f242e 	.word	0x344f242e
   1bfb8:	2e345c2e 	.word	0x2e345c2e
   1bfbc:	2e2e2e2e 	.word	0x2e2e2e2e
   1bfc0:	2e2e2e2e 	.word	0x2e2e2e2e
   1bfc4:	2e2e2e2e 	.word	0x2e2e2e2e
   1bfc8:	28          	.byte	0x28
   1bfc9:	00          	.byte	0x00
        handle_ansi(byte, input->line);
   1bfca:	4631      	mov	r1, r6
   1bfcc:	4620      	mov	r0, r4
   1bfce:	f7ff fcdb 	bl	1b988 <handle_ansi>
        goto unlock;
   1bfd2:	e053      	b.n	1c07c <console_handle_char+0x150>
        esc_state &= ~ESC_ESC;
   1bfd4:	f023 0301 	bic.w	r3, r3, #1
   1bfd8:	4a30      	ldr	r2, [pc, #192]	; (1c09c <console_handle_char+0x170>)
   1bfda:	6013      	str	r3, [r2, #0]
        handle_ansi(byte, input->line);
   1bfdc:	4631      	mov	r1, r6
   1bfde:	4620      	mov	r0, r4
   1bfe0:	f7ff fcd2 	bl	1b988 <handle_ansi>
        switch (byte) {
   1bfe4:	2c5b      	cmp	r4, #91	; 0x5b
   1bfe6:	d149      	bne.n	1c07c <console_handle_char+0x150>
            esc_state |= ESC_ANSI;
   1bfe8:	4a2c      	ldr	r2, [pc, #176]	; (1c09c <console_handle_char+0x170>)
   1bfea:	6813      	ldr	r3, [r2, #0]
            esc_state |= ESC_ANSI_FIRST;
   1bfec:	f043 0306 	orr.w	r3, r3, #6
   1bff0:	6013      	str	r3, [r2, #0]
        goto unlock;
   1bff2:	e043      	b.n	1c07c <console_handle_char+0x150>
        switch (byte) {
   1bff4:	2c7f      	cmp	r4, #127	; 0x7f
   1bff6:	d109      	bne.n	1c00c <console_handle_char+0xe0>
            handle_backspace(input->line);
   1bff8:	4630      	mov	r0, r6
   1bffa:	f7ff fd8d 	bl	1bb18 <handle_backspace>
            break;
   1bffe:	e03d      	b.n	1c07c <console_handle_char+0x150>
            esc_state |= ESC_ESC;
   1c000:	4a26      	ldr	r2, [pc, #152]	; (1c09c <console_handle_char+0x170>)
   1c002:	6813      	ldr	r3, [r2, #0]
   1c004:	f043 0301 	orr.w	r3, r3, #1
   1c008:	6013      	str	r3, [r2, #0]
            break;
   1c00a:	e037      	b.n	1c07c <console_handle_char+0x150>
            insert_char(&input->line[cur], byte);
   1c00c:	4b24      	ldr	r3, [pc, #144]	; (1c0a0 <console_handle_char+0x174>)
   1c00e:	8818      	ldrh	r0, [r3, #0]
   1c010:	4621      	mov	r1, r4
   1c012:	4430      	add	r0, r6
   1c014:	f7ff fdda 	bl	1bbcc <insert_char>
            if (byte == '\n' && prev_endl == '\r') {
   1c018:	2c0a      	cmp	r4, #10
   1c01a:	d103      	bne.n	1c024 <console_handle_char+0xf8>
   1c01c:	4b21      	ldr	r3, [pc, #132]	; (1c0a4 <console_handle_char+0x178>)
   1c01e:	781b      	ldrb	r3, [r3, #0]
   1c020:	2b0d      	cmp	r3, #13
   1c022:	d011      	beq.n	1c048 <console_handle_char+0x11c>
            prev_endl = byte;
   1c024:	4b1f      	ldr	r3, [pc, #124]	; (1c0a4 <console_handle_char+0x178>)
   1c026:	701c      	strb	r4, [r3, #0]
            input->line[cur + trailing_chars] = '\0';
   1c028:	4b1d      	ldr	r3, [pc, #116]	; (1c0a0 <console_handle_char+0x174>)
   1c02a:	881b      	ldrh	r3, [r3, #0]
   1c02c:	4a1e      	ldr	r2, [pc, #120]	; (1c0a8 <console_handle_char+0x17c>)
   1c02e:	8812      	ldrh	r2, [r2, #0]
   1c030:	4413      	add	r3, r2
   1c032:	2200      	movs	r2, #0
   1c034:	54f2      	strb	r2, [r6, r3]
                console_filter_out('\r');
   1c036:	200d      	movs	r0, #13
   1c038:	f7ff fbac 	bl	1b794 <console_filter_out>
                console_filter_out('\n');
   1c03c:	200a      	movs	r0, #10
   1c03e:	f7ff fba9 	bl	1b794 <console_filter_out>
            console_handle_line();
   1c042:	f7ff fb89 	bl	1b758 <console_handle_line>
            break;
   1c046:	e019      	b.n	1c07c <console_handle_char+0x150>
                prev_endl = byte;
   1c048:	4b16      	ldr	r3, [pc, #88]	; (1c0a4 <console_handle_char+0x178>)
   1c04a:	701c      	strb	r4, [r3, #0]
                break;
   1c04c:	e016      	b.n	1c07c <console_handle_char+0x150>
            if (completion && (!trailing_chars ||
   1c04e:	4b17      	ldr	r3, [pc, #92]	; (1c0ac <console_handle_char+0x180>)
   1c050:	681b      	ldr	r3, [r3, #0]
   1c052:	b19b      	cbz	r3, 1c07c <console_handle_char+0x150>
   1c054:	4a14      	ldr	r2, [pc, #80]	; (1c0a8 <console_handle_char+0x17c>)
   1c056:	8812      	ldrh	r2, [r2, #0]
   1c058:	b982      	cbnz	r2, 1c07c <console_handle_char+0x150>
                completion(input->line, console_append_char);
   1c05a:	4915      	ldr	r1, [pc, #84]	; (1c0b0 <console_handle_char+0x184>)
   1c05c:	4630      	mov	r0, r6
   1c05e:	4798      	blx	r3
                console_switch_to_prompt();
   1c060:	e00c      	b.n	1c07c <console_handle_char+0x150>
            console_clear_line();
   1c062:	f7ff fd85 	bl	1bb70 <console_clear_line>
            break;
   1c066:	e009      	b.n	1c07c <console_handle_char+0x150>
                console_out_nolock(VT);
   1c068:	200c      	movs	r0, #12
   1c06a:	f000 f967 	bl	1c33c <console_out_nolock>
            break;
   1c06e:	e005      	b.n	1c07c <console_handle_char+0x150>
        insert_char(&input->line[cur], byte);
   1c070:	4b0b      	ldr	r3, [pc, #44]	; (1c0a0 <console_handle_char+0x174>)
   1c072:	8818      	ldrh	r0, [r3, #0]
   1c074:	4621      	mov	r1, r4
   1c076:	4430      	add	r0, r6
   1c078:	f7ff fda8 	bl	1bbcc <insert_char>
    (void)console_unlock();
   1c07c:	f7ff fea6 	bl	1bdcc <console_unlock>
    return 0;
   1c080:	e766      	b.n	1bf50 <console_handle_char+0x24>
        return 0;
   1c082:	2500      	movs	r5, #0
   1c084:	e764      	b.n	1bf50 <console_handle_char+0x24>
        return -1;
   1c086:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1c08a:	e761      	b.n	1bf50 <console_handle_char+0x24>
   1c08c:	100039c0 	.word	0x100039c0
   1c090:	100039b4 	.word	0x100039b4
   1c094:	10003978 	.word	0x10003978
   1c098:	100039cc 	.word	0x100039cc
   1c09c:	100039b8 	.word	0x100039b8
   1c0a0:	100039b0 	.word	0x100039b0
   1c0a4:	100039c8 	.word	0x100039c8
   1c0a8:	100039ce 	.word	0x100039ce
   1c0ac:	10003988 	.word	0x10003988
   1c0b0:	0001b7fd 	.word	0x0001b7fd

0001c0b4 <console_is_init>:
{
   1c0b4:	b508      	push	{r3, lr}
    return uart_console_is_init();
   1c0b6:	f000 f967 	bl	1c388 <uart_console_is_init>
}
   1c0ba:	bd08      	pop	{r3, pc}

0001c0bc <console_line_queue_set>:
    lines_queue = evq;
   1c0bc:	4b01      	ldr	r3, [pc, #4]	; (1c0c4 <console_line_queue_set+0x8>)
   1c0be:	6018      	str	r0, [r3, #0]
}
   1c0c0:	4770      	bx	lr
   1c0c2:	bf00      	nop
   1c0c4:	100039c0 	.word	0x100039c0

0001c0c8 <console_line_event_put>:
{
   1c0c8:	b508      	push	{r3, lr}
   1c0ca:	4601      	mov	r1, r0
    os_eventq_put(&avail_queue, ev);
   1c0cc:	4806      	ldr	r0, [pc, #24]	; (1c0e8 <console_line_event_put+0x20>)
   1c0ce:	f7fd f982 	bl	193d6 <os_eventq_put>
    if (rx_stalled) {
   1c0d2:	4b06      	ldr	r3, [pc, #24]	; (1c0ec <console_line_event_put+0x24>)
   1c0d4:	781b      	ldrb	r3, [r3, #0]
   1c0d6:	b903      	cbnz	r3, 1c0da <console_line_event_put+0x12>
}
   1c0d8:	bd08      	pop	{r3, pc}
        rx_stalled = false;
   1c0da:	4b04      	ldr	r3, [pc, #16]	; (1c0ec <console_line_event_put+0x24>)
   1c0dc:	2200      	movs	r2, #0
   1c0de:	701a      	strb	r2, [r3, #0]
        console_rx_restart();
   1c0e0:	f000 f948 	bl	1c374 <console_rx_restart>
}
   1c0e4:	e7f8      	b.n	1c0d8 <console_line_event_put+0x10>
   1c0e6:	bf00      	nop
   1c0e8:	10003978 	.word	0x10003978
   1c0ec:	100039cc 	.word	0x100039cc

0001c0f0 <console_set_completion_cb>:
    completion = cb;
   1c0f0:	4b01      	ldr	r3, [pc, #4]	; (1c0f8 <console_set_completion_cb+0x8>)
   1c0f2:	6018      	str	r0, [r3, #0]
}
   1c0f4:	4770      	bx	lr
   1c0f6:	bf00      	nop
   1c0f8:	10003988 	.word	0x10003988

0001c0fc <console_vprintf>:

#if MYNEWT_VAL(BASELIBC_PRESENT)

int
console_vprintf(const char *fmt, va_list ap)
{
   1c0fc:	b570      	push	{r4, r5, r6, lr}
   1c0fe:	4604      	mov	r4, r0
   1c100:	460d      	mov	r5, r1
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   1c102:	f000 f827 	bl	1c154 <console_get_ticks>
   1c106:	b160      	cbz	r0, 1c122 <console_vprintf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   1c108:	4b09      	ldr	r3, [pc, #36]	; (1c130 <console_vprintf+0x34>)
   1c10a:	681b      	ldr	r3, [r3, #0]
   1c10c:	b10b      	cbz	r3, 1c112 <console_vprintf+0x16>
    num_chars = 0;
   1c10e:	2600      	movs	r6, #0
   1c110:	e008      	b.n	1c124 <console_vprintf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   1c112:	f7fe fa99 	bl	1a648 <os_time_get>
   1c116:	4601      	mov	r1, r0
   1c118:	4806      	ldr	r0, [pc, #24]	; (1c134 <console_vprintf+0x38>)
   1c11a:	f7ff f96b 	bl	1b3f4 <printf>
   1c11e:	4606      	mov	r6, r0
   1c120:	e000      	b.n	1c124 <console_vprintf+0x28>
    num_chars = 0;
   1c122:	2600      	movs	r6, #0
        }
    }

    num_chars += vprintf(fmt, ap);
   1c124:	4629      	mov	r1, r5
   1c126:	4620      	mov	r0, r4
   1c128:	f018 f8e4 	bl	342f4 <vprintf>

    return num_chars;
}
   1c12c:	4430      	add	r0, r6
   1c12e:	bd70      	pop	{r4, r5, r6, pc}
   1c130:	10003990 	.word	0x10003990
   1c134:	000385dc 	.word	0x000385dc

0001c138 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   1c138:	b40f      	push	{r0, r1, r2, r3}
   1c13a:	b500      	push	{lr}
   1c13c:	b083      	sub	sp, #12
   1c13e:	a904      	add	r1, sp, #16
   1c140:	f851 0b04 	ldr.w	r0, [r1], #4
    va_list args;
    int num_chars;

    va_start(args, fmt);
   1c144:	9101      	str	r1, [sp, #4]
    num_chars = console_vprintf(fmt, args);
   1c146:	f7ff ffd9 	bl	1c0fc <console_vprintf>
    va_end(args);

    return num_chars;
}
   1c14a:	b003      	add	sp, #12
   1c14c:	f85d eb04 	ldr.w	lr, [sp], #4
   1c150:	b004      	add	sp, #16
   1c152:	4770      	bx	lr

0001c154 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   1c154:	4b01      	ldr	r3, [pc, #4]	; (1c15c <console_get_ticks+0x8>)
   1c156:	7818      	ldrb	r0, [r3, #0]
   1c158:	4770      	bx	lr
   1c15a:	bf00      	nop
   1c15c:	10000698 	.word	0x10000698

0001c160 <uart_blocking_tx>:
 *
 * @param dev		Uart device in question
 */
static inline void
uart_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   1c160:	b508      	push	{r3, lr}
    dev->ud_funcs.uf_blocking_tx(dev, byte);
   1c162:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1c164:	4798      	blx	r3
}
   1c166:	bd08      	pop	{r3, pc}

0001c168 <uart_console_ring_add_char>:
}

static void
uart_console_ring_add_char(struct console_ring *cr, char ch)
{
    cr->buf[cr->head] = ch;
   1c168:	6842      	ldr	r2, [r0, #4]
   1c16a:	7803      	ldrb	r3, [r0, #0]
   1c16c:	54d1      	strb	r1, [r2, r3]
    cr->head = inc_and_wrap(cr->head, cr->size);
   1c16e:	7803      	ldrb	r3, [r0, #0]
   1c170:	8842      	ldrh	r2, [r0, #2]
    return (i + 1) & (max - 1);
   1c172:	3301      	adds	r3, #1
   1c174:	3a01      	subs	r2, #1
   1c176:	4013      	ands	r3, r2
    cr->head = inc_and_wrap(cr->head, cr->size);
   1c178:	7003      	strb	r3, [r0, #0]
}
   1c17a:	4770      	bx	lr

0001c17c <uart_console_ring_pull_char>:

static uint8_t
uart_console_ring_pull_char(struct console_ring *cr)
{
   1c17c:	4603      	mov	r3, r0
    uint8_t ch;

    ch = cr->buf[cr->tail];
   1c17e:	6841      	ldr	r1, [r0, #4]
   1c180:	7842      	ldrb	r2, [r0, #1]
   1c182:	5c88      	ldrb	r0, [r1, r2]
    cr->tail = inc_and_wrap(cr->tail, cr->size);
   1c184:	8859      	ldrh	r1, [r3, #2]
    return (i + 1) & (max - 1);
   1c186:	3201      	adds	r2, #1
   1c188:	3901      	subs	r1, #1
   1c18a:	400a      	ands	r2, r1
    cr->tail = inc_and_wrap(cr->tail, cr->size);
   1c18c:	705a      	strb	r2, [r3, #1]
    return ch;
}
   1c18e:	4770      	bx	lr

0001c190 <uart_console_ring_is_full>:

static bool
uart_console_ring_is_full(const struct console_ring *cr)
{
    return inc_and_wrap(cr->head, cr->size) == cr->tail;
   1c190:	7803      	ldrb	r3, [r0, #0]
   1c192:	8842      	ldrh	r2, [r0, #2]
    return (i + 1) & (max - 1);
   1c194:	3301      	adds	r3, #1
   1c196:	3a01      	subs	r2, #1
   1c198:	4013      	ands	r3, r2
    return inc_and_wrap(cr->head, cr->size) == cr->tail;
   1c19a:	7840      	ldrb	r0, [r0, #1]
}
   1c19c:	4298      	cmp	r0, r3
   1c19e:	bf14      	ite	ne
   1c1a0:	2000      	movne	r0, #0
   1c1a2:	2001      	moveq	r0, #1
   1c1a4:	4770      	bx	lr

0001c1a6 <uart_console_ring_is_empty>:

static bool
uart_console_ring_is_empty(const struct console_ring *cr)
{
    return cr->head == cr->tail;
   1c1a6:	7802      	ldrb	r2, [r0, #0]
   1c1a8:	7840      	ldrb	r0, [r0, #1]
}
   1c1aa:	4282      	cmp	r2, r0
   1c1ac:	bf14      	ite	ne
   1c1ae:	2000      	movne	r0, #0
   1c1b0:	2001      	moveq	r0, #1
   1c1b2:	4770      	bx	lr

0001c1b4 <uart_console_tx_flush>:
/*
 * Flush cnt characters from console output queue.
 */
static void
uart_console_tx_flush(int cnt)
{
   1c1b4:	b538      	push	{r3, r4, r5, lr}
   1c1b6:	4605      	mov	r5, r0
    int i;
    uint8_t byte;

    for (i = 0; i < cnt; i++) {
   1c1b8:	2400      	movs	r4, #0
   1c1ba:	42ac      	cmp	r4, r5
   1c1bc:	da0d      	bge.n	1c1da <uart_console_tx_flush+0x26>
        if (uart_console_ring_is_empty(&cr_tx)) {
   1c1be:	4807      	ldr	r0, [pc, #28]	; (1c1dc <uart_console_tx_flush+0x28>)
   1c1c0:	f7ff fff1 	bl	1c1a6 <uart_console_ring_is_empty>
   1c1c4:	b948      	cbnz	r0, 1c1da <uart_console_tx_flush+0x26>
            break;
        }
        byte = uart_console_ring_pull_char(&cr_tx);
   1c1c6:	4805      	ldr	r0, [pc, #20]	; (1c1dc <uart_console_tx_flush+0x28>)
   1c1c8:	f7ff ffd8 	bl	1c17c <uart_console_ring_pull_char>
   1c1cc:	4601      	mov	r1, r0
        uart_blocking_tx(uart_dev, byte);
   1c1ce:	4b04      	ldr	r3, [pc, #16]	; (1c1e0 <uart_console_tx_flush+0x2c>)
   1c1d0:	6818      	ldr	r0, [r3, #0]
    dev->ud_funcs.uf_blocking_tx(dev, byte);
   1c1d2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   1c1d4:	4790      	blx	r2
    for (i = 0; i < cnt; i++) {
   1c1d6:	3401      	adds	r4, #1
   1c1d8:	e7ef      	b.n	1c1ba <uart_console_tx_flush+0x6>
    }
}
   1c1da:	bd38      	pop	{r3, r4, r5, pc}
   1c1dc:	100039f8 	.word	0x100039f8
   1c1e0:	10003a34 	.word	0x10003a34

0001c1e4 <uart_console_tx_char>:
 * Interrupts disabled when console_tx_char/console_rx_char are called.
 * Characters sent only in blocking mode.
 */
static int
uart_console_tx_char(void *arg)
{
   1c1e4:	b508      	push	{r3, lr}
    if (uart_console_ring_is_empty(&cr_tx)) {
   1c1e6:	4805      	ldr	r0, [pc, #20]	; (1c1fc <uart_console_tx_char+0x18>)
   1c1e8:	f7ff ffdd 	bl	1c1a6 <uart_console_ring_is_empty>
   1c1ec:	b918      	cbnz	r0, 1c1f6 <uart_console_tx_char+0x12>
        return -1;
    }
    return uart_console_ring_pull_char(&cr_tx);
   1c1ee:	4803      	ldr	r0, [pc, #12]	; (1c1fc <uart_console_tx_char+0x18>)
   1c1f0:	f7ff ffc4 	bl	1c17c <uart_console_ring_pull_char>
}
   1c1f4:	bd08      	pop	{r3, pc}
        return -1;
   1c1f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c1fa:	e7fb      	b.n	1c1f4 <uart_console_tx_char+0x10>
   1c1fc:	100039f8 	.word	0x100039f8

0001c200 <uart_console_queue_char>:
    if (((uart_dev->ud_dev.od_flags & OS_DEV_F_STATUS_OPEN) == 0) ||
   1c200:	7ec3      	ldrb	r3, [r0, #27]
   1c202:	f003 0306 	and.w	r3, r3, #6
   1c206:	2b02      	cmp	r3, #2
   1c208:	d000      	beq.n	1c20c <uart_console_queue_char+0xc>
   1c20a:	4770      	bx	lr
{
   1c20c:	b570      	push	{r4, r5, r6, lr}
   1c20e:	4605      	mov	r5, r0
   1c210:	460e      	mov	r6, r1
    OS_ENTER_CRITICAL(sr);
   1c212:	f7fe fb49 	bl	1a8a8 <os_arch_save_sr>
   1c216:	4604      	mov	r4, r0
    while (uart_console_ring_is_full(&cr_tx)) {
   1c218:	e005      	b.n	1c226 <uart_console_queue_char+0x26>
            os_time_delay(1);
   1c21a:	2001      	movs	r0, #1
   1c21c:	f7fe fa40 	bl	1a6a0 <os_time_delay>
        OS_ENTER_CRITICAL(sr);
   1c220:	f7fe fb42 	bl	1a8a8 <os_arch_save_sr>
   1c224:	4604      	mov	r4, r0
    while (uart_console_ring_is_full(&cr_tx)) {
   1c226:	480b      	ldr	r0, [pc, #44]	; (1c254 <uart_console_queue_char+0x54>)
   1c228:	f7ff ffb2 	bl	1c190 <uart_console_ring_is_full>
   1c22c:	b150      	cbz	r0, 1c244 <uart_console_queue_char+0x44>
    dev->ud_funcs.uf_start_tx(dev);
   1c22e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1c230:	4628      	mov	r0, r5
   1c232:	4798      	blx	r3
        OS_EXIT_CRITICAL(sr);
   1c234:	4620      	mov	r0, r4
   1c236:	f7fe fb3d 	bl	1a8b4 <os_arch_restore_sr>
        if (os_started()) {
   1c23a:	f7fc fe9f 	bl	18f7c <os_started>
   1c23e:	2800      	cmp	r0, #0
   1c240:	d0ee      	beq.n	1c220 <uart_console_queue_char+0x20>
   1c242:	e7ea      	b.n	1c21a <uart_console_queue_char+0x1a>
    uart_console_ring_add_char(&cr_tx, ch);
   1c244:	4631      	mov	r1, r6
   1c246:	4803      	ldr	r0, [pc, #12]	; (1c254 <uart_console_queue_char+0x54>)
   1c248:	f7ff ff8e 	bl	1c168 <uart_console_ring_add_char>
    OS_EXIT_CRITICAL(sr);
   1c24c:	4620      	mov	r0, r4
   1c24e:	f7fe fb31 	bl	1a8b4 <os_arch_restore_sr>
}
   1c252:	bd70      	pop	{r4, r5, r6, pc}
   1c254:	100039f8 	.word	0x100039f8

0001c258 <uart_console_rx_char>:
/*
 * Interrupts disabled when console_tx_char/console_rx_char are called.
 */
static int
uart_console_rx_char(void *arg, uint8_t byte)
{
   1c258:	b510      	push	{r4, lr}
   1c25a:	460c      	mov	r4, r1
#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
    if (uart_console_ring_is_full(&cr_rx)) {
   1c25c:	480c      	ldr	r0, [pc, #48]	; (1c290 <uart_console_rx_char+0x38>)
   1c25e:	f7ff ff97 	bl	1c190 <uart_console_ring_is_full>
   1c262:	b940      	cbnz	r0, 1c276 <uart_console_rx_char+0x1e>
        uart_console_rx_stalled = true;
        return -1;
    }

    uart_console_ring_add_char(&cr_rx, byte);
   1c264:	4621      	mov	r1, r4
   1c266:	480a      	ldr	r0, [pc, #40]	; (1c290 <uart_console_rx_char+0x38>)
   1c268:	f7ff ff7e 	bl	1c168 <uart_console_ring_add_char>

    if (!rx_ev.ev_queued) {
   1c26c:	4b09      	ldr	r3, [pc, #36]	; (1c294 <uart_console_rx_char+0x3c>)
   1c26e:	781b      	ldrb	r3, [r3, #0]
   1c270:	b13b      	cbz	r3, 1c282 <uart_console_rx_char+0x2a>
        os_eventq_put(os_eventq_dflt_get(), &rx_ev);
    }

    return 0;
   1c272:	2000      	movs	r0, #0
#else
    return console_handle_char(byte);
#endif
}
   1c274:	bd10      	pop	{r4, pc}
        uart_console_rx_stalled = true;
   1c276:	4b08      	ldr	r3, [pc, #32]	; (1c298 <uart_console_rx_char+0x40>)
   1c278:	2201      	movs	r2, #1
   1c27a:	701a      	strb	r2, [r3, #0]
        return -1;
   1c27c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c280:	e7f8      	b.n	1c274 <uart_console_rx_char+0x1c>
        os_eventq_put(os_eventq_dflt_get(), &rx_ev);
   1c282:	f7fd f961 	bl	19548 <os_eventq_dflt_get>
   1c286:	4903      	ldr	r1, [pc, #12]	; (1c294 <uart_console_rx_char+0x3c>)
   1c288:	f7fd f8a5 	bl	193d6 <os_eventq_put>
    return 0;
   1c28c:	2000      	movs	r0, #0
   1c28e:	e7f1      	b.n	1c274 <uart_console_rx_char+0x1c>
   1c290:	100039d0 	.word	0x100039d0
   1c294:	10003a20 	.word	0x10003a20
   1c298:	10003a30 	.word	0x10003a30

0001c29c <uart_console_rx_char_event>:

#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
static void
uart_console_rx_char_event(struct os_event *ev)
{
   1c29c:	b510      	push	{r4, lr}
    static int b = -1;
    int sr;
    int ret;

    /* We may have unhandled character - try it first */
    if (b >= 0) {
   1c29e:	4b18      	ldr	r3, [pc, #96]	; (1c300 <uart_console_rx_char_event+0x64>)
   1c2a0:	6818      	ldr	r0, [r3, #0]
   1c2a2:	2800      	cmp	r0, #0
   1c2a4:	db0b      	blt.n	1c2be <uart_console_rx_char_event+0x22>
        ret = console_handle_char(b);
   1c2a6:	b2c0      	uxtb	r0, r0
   1c2a8:	f7ff fe40 	bl	1bf2c <console_handle_char>
        if (ret < 0) {
   1c2ac:	2800      	cmp	r0, #0
   1c2ae:	da06      	bge.n	1c2be <uart_console_rx_char_event+0x22>
   1c2b0:	e024      	b.n	1c2fc <uart_console_rx_char_event+0x60>
        if (uart_console_rx_stalled) {
            uart_console_rx_stalled = false;
            uart_start_rx(uart_dev);
        }

        ret = console_handle_char(b);
   1c2b2:	4b13      	ldr	r3, [pc, #76]	; (1c300 <uart_console_rx_char_event+0x64>)
   1c2b4:	7818      	ldrb	r0, [r3, #0]
   1c2b6:	f7ff fe39 	bl	1bf2c <console_handle_char>
        if (ret < 0) {
   1c2ba:	2800      	cmp	r0, #0
   1c2bc:	db1e      	blt.n	1c2fc <uart_console_rx_char_event+0x60>
    while (!uart_console_ring_is_empty(&cr_rx)) {
   1c2be:	4811      	ldr	r0, [pc, #68]	; (1c304 <uart_console_rx_char_event+0x68>)
   1c2c0:	f7ff ff71 	bl	1c1a6 <uart_console_ring_is_empty>
   1c2c4:	b9b0      	cbnz	r0, 1c2f4 <uart_console_rx_char_event+0x58>
        OS_ENTER_CRITICAL(sr);
   1c2c6:	f7fe faef 	bl	1a8a8 <os_arch_save_sr>
   1c2ca:	4604      	mov	r4, r0
        b = uart_console_ring_pull_char(&cr_rx);
   1c2cc:	480d      	ldr	r0, [pc, #52]	; (1c304 <uart_console_rx_char_event+0x68>)
   1c2ce:	f7ff ff55 	bl	1c17c <uart_console_ring_pull_char>
   1c2d2:	4b0b      	ldr	r3, [pc, #44]	; (1c300 <uart_console_rx_char_event+0x64>)
   1c2d4:	6018      	str	r0, [r3, #0]
        OS_EXIT_CRITICAL(sr);
   1c2d6:	4620      	mov	r0, r4
   1c2d8:	f7fe faec 	bl	1a8b4 <os_arch_restore_sr>
        if (uart_console_rx_stalled) {
   1c2dc:	4b0a      	ldr	r3, [pc, #40]	; (1c308 <uart_console_rx_char_event+0x6c>)
   1c2de:	781b      	ldrb	r3, [r3, #0]
   1c2e0:	2b00      	cmp	r3, #0
   1c2e2:	d0e6      	beq.n	1c2b2 <uart_console_rx_char_event+0x16>
            uart_console_rx_stalled = false;
   1c2e4:	4b08      	ldr	r3, [pc, #32]	; (1c308 <uart_console_rx_char_event+0x6c>)
   1c2e6:	2200      	movs	r2, #0
   1c2e8:	701a      	strb	r2, [r3, #0]
            uart_start_rx(uart_dev);
   1c2ea:	4b08      	ldr	r3, [pc, #32]	; (1c30c <uart_console_rx_char_event+0x70>)
   1c2ec:	6818      	ldr	r0, [r3, #0]
    dev->ud_funcs.uf_start_rx(dev);
   1c2ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1c2f0:	4798      	blx	r3
}
   1c2f2:	e7de      	b.n	1c2b2 <uart_console_rx_char_event+0x16>
            return;
        }
    }

    b = -1;
   1c2f4:	4b02      	ldr	r3, [pc, #8]	; (1c300 <uart_console_rx_char_event+0x64>)
   1c2f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c2fa:	601a      	str	r2, [r3, #0]
}
   1c2fc:	bd10      	pop	{r4, pc}
   1c2fe:	bf00      	nop
   1c300:	1000069c 	.word	0x1000069c
   1c304:	100039d0 	.word	0x100039d0
   1c308:	10003a30 	.word	0x10003a30
   1c30c:	10003a34 	.word	0x10003a34

0001c310 <uart_console_blocking_mode>:
{
   1c310:	b510      	push	{r4, lr}
    OS_ENTER_CRITICAL(sr);
   1c312:	f7fe fac9 	bl	1a8a8 <os_arch_save_sr>
   1c316:	4604      	mov	r4, r0
    if (write_char_cb) {
   1c318:	4b06      	ldr	r3, [pc, #24]	; (1c334 <uart_console_blocking_mode+0x24>)
   1c31a:	681b      	ldr	r3, [r3, #0]
   1c31c:	b12b      	cbz	r3, 1c32a <uart_console_blocking_mode+0x1a>
        write_char_cb = uart_blocking_tx;
   1c31e:	4b05      	ldr	r3, [pc, #20]	; (1c334 <uart_console_blocking_mode+0x24>)
   1c320:	4a05      	ldr	r2, [pc, #20]	; (1c338 <uart_console_blocking_mode+0x28>)
   1c322:	601a      	str	r2, [r3, #0]
        uart_console_tx_flush(MYNEWT_VAL(CONSOLE_UART_TX_BUF_SIZE));
   1c324:	2020      	movs	r0, #32
   1c326:	f7ff ff45 	bl	1c1b4 <uart_console_tx_flush>
    OS_EXIT_CRITICAL(sr);
   1c32a:	4620      	mov	r0, r4
   1c32c:	f7fe fac2 	bl	1a8b4 <os_arch_restore_sr>
}
   1c330:	bd10      	pop	{r4, pc}
   1c332:	bf00      	nop
   1c334:	10003a38 	.word	0x10003a38
   1c338:	0001c161 	.word	0x0001c161

0001c33c <console_out_nolock>:
{
   1c33c:	b538      	push	{r3, r4, r5, lr}
   1c33e:	4604      	mov	r4, r0
    if (!write_char_cb) {
   1c340:	4b0a      	ldr	r3, [pc, #40]	; (1c36c <console_out_nolock+0x30>)
   1c342:	681b      	ldr	r3, [r3, #0]
   1c344:	b153      	cbz	r3, 1c35c <console_out_nolock+0x20>
    if ('\n' == c) {
   1c346:	280a      	cmp	r0, #10
   1c348:	d00a      	beq.n	1c360 <console_out_nolock+0x24>
    write_char_cb(uart_dev, c);
   1c34a:	4d09      	ldr	r5, [pc, #36]	; (1c370 <console_out_nolock+0x34>)
   1c34c:	4b07      	ldr	r3, [pc, #28]	; (1c36c <console_out_nolock+0x30>)
   1c34e:	681b      	ldr	r3, [r3, #0]
   1c350:	b2e1      	uxtb	r1, r4
   1c352:	6828      	ldr	r0, [r5, #0]
   1c354:	4798      	blx	r3
    uart_start_tx(uart_dev);
   1c356:	6828      	ldr	r0, [r5, #0]
    dev->ud_funcs.uf_start_tx(dev);
   1c358:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1c35a:	4798      	blx	r3
}
   1c35c:	4620      	mov	r0, r4
   1c35e:	bd38      	pop	{r3, r4, r5, pc}
        write_char_cb(uart_dev, '\r');
   1c360:	210d      	movs	r1, #13
   1c362:	4a03      	ldr	r2, [pc, #12]	; (1c370 <console_out_nolock+0x34>)
   1c364:	6810      	ldr	r0, [r2, #0]
   1c366:	4798      	blx	r3
   1c368:	e7ef      	b.n	1c34a <console_out_nolock+0xe>
   1c36a:	bf00      	nop
   1c36c:	10003a38 	.word	0x10003a38
   1c370:	10003a34 	.word	0x10003a34

0001c374 <console_rx_restart>:
{
   1c374:	b508      	push	{r3, lr}
    os_eventq_put(os_eventq_dflt_get(), &rx_ev);
   1c376:	f7fd f8e7 	bl	19548 <os_eventq_dflt_get>
   1c37a:	4902      	ldr	r1, [pc, #8]	; (1c384 <console_rx_restart+0x10>)
   1c37c:	f7fd f82b 	bl	193d6 <os_eventq_put>
}
   1c380:	bd08      	pop	{r3, pc}
   1c382:	bf00      	nop
   1c384:	10003a20 	.word	0x10003a20

0001c388 <uart_console_is_init>:
#endif

int
uart_console_is_init(void)
{
    return uart_dev != NULL;
   1c388:	4b02      	ldr	r3, [pc, #8]	; (1c394 <uart_console_is_init+0xc>)
   1c38a:	6818      	ldr	r0, [r3, #0]
}
   1c38c:	3800      	subs	r0, #0
   1c38e:	bf18      	it	ne
   1c390:	2001      	movne	r0, #1
   1c392:	4770      	bx	lr
   1c394:	10003a34 	.word	0x10003a34

0001c398 <uart_console_init>:
    return 0;
}

int
uart_console_init(void)
{
   1c398:	b500      	push	{lr}
   1c39a:	b087      	sub	sp, #28
    struct uart_conf uc = {
   1c39c:	2300      	movs	r3, #0
   1c39e:	9301      	str	r3, [sp, #4]
   1c3a0:	9304      	str	r3, [sp, #16]
   1c3a2:	9305      	str	r3, [sp, #20]
   1c3a4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   1c3a8:	9300      	str	r3, [sp, #0]
   1c3aa:	2308      	movs	r3, #8
   1c3ac:	f88d 3004 	strb.w	r3, [sp, #4]
   1c3b0:	2301      	movs	r3, #1
   1c3b2:	f88d 3005 	strb.w	r3, [sp, #5]
   1c3b6:	4b14      	ldr	r3, [pc, #80]	; (1c408 <uart_console_init+0x70>)
   1c3b8:	9302      	str	r3, [sp, #8]
   1c3ba:	4b14      	ldr	r3, [pc, #80]	; (1c40c <uart_console_init+0x74>)
   1c3bc:	9303      	str	r3, [sp, #12]
        .uc_flow_ctl = MYNEWT_VAL(CONSOLE_UART_FLOW_CONTROL),
        .uc_tx_char = uart_console_tx_char,
        .uc_rx_char = uart_console_rx_char,
    };

    cr_tx.size = MYNEWT_VAL(CONSOLE_UART_TX_BUF_SIZE);
   1c3be:	4b14      	ldr	r3, [pc, #80]	; (1c410 <uart_console_init+0x78>)
   1c3c0:	2220      	movs	r2, #32
   1c3c2:	805a      	strh	r2, [r3, #2]
    cr_tx.buf = cr_tx_buf;
   1c3c4:	4913      	ldr	r1, [pc, #76]	; (1c414 <uart_console_init+0x7c>)
   1c3c6:	6059      	str	r1, [r3, #4]
    write_char_cb = uart_console_queue_char;
   1c3c8:	4b13      	ldr	r3, [pc, #76]	; (1c418 <uart_console_init+0x80>)
   1c3ca:	4914      	ldr	r1, [pc, #80]	; (1c41c <uart_console_init+0x84>)
   1c3cc:	6019      	str	r1, [r3, #0]

#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
    cr_rx.size = MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE);
   1c3ce:	4b14      	ldr	r3, [pc, #80]	; (1c420 <uart_console_init+0x88>)
   1c3d0:	805a      	strh	r2, [r3, #2]
    cr_rx.buf = cr_rx_buf;
   1c3d2:	4a14      	ldr	r2, [pc, #80]	; (1c424 <uart_console_init+0x8c>)
   1c3d4:	605a      	str	r2, [r3, #4]

    rx_ev.ev_cb = uart_console_rx_char_event;
   1c3d6:	4b14      	ldr	r3, [pc, #80]	; (1c428 <uart_console_init+0x90>)
   1c3d8:	4a14      	ldr	r2, [pc, #80]	; (1c42c <uart_console_init+0x94>)
   1c3da:	605a      	str	r2, [r3, #4]
#endif

    if (!uart_dev) {
   1c3dc:	4b14      	ldr	r3, [pc, #80]	; (1c430 <uart_console_init+0x98>)
   1c3de:	681b      	ldr	r3, [r3, #0]
   1c3e0:	b11b      	cbz	r3, 1c3ea <uart_console_init+0x52>
          OS_TIMEOUT_NEVER, &uc);
        if (!uart_dev) {
            return -1;
        }
    }
    return 0;
   1c3e2:	2000      	movs	r0, #0
}
   1c3e4:	b007      	add	sp, #28
   1c3e6:	f85d fb04 	ldr.w	pc, [sp], #4
        uart_dev = (struct uart_dev *)os_dev_open(MYNEWT_VAL(CONSOLE_UART_DEV),
   1c3ea:	466a      	mov	r2, sp
   1c3ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c3f0:	4810      	ldr	r0, [pc, #64]	; (1c434 <uart_console_init+0x9c>)
   1c3f2:	f7fc ffa9 	bl	19348 <os_dev_open>
   1c3f6:	4b0e      	ldr	r3, [pc, #56]	; (1c430 <uart_console_init+0x98>)
   1c3f8:	6018      	str	r0, [r3, #0]
        if (!uart_dev) {
   1c3fa:	b108      	cbz	r0, 1c400 <uart_console_init+0x68>
    return 0;
   1c3fc:	2000      	movs	r0, #0
   1c3fe:	e7f1      	b.n	1c3e4 <uart_console_init+0x4c>
            return -1;
   1c400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c404:	e7ee      	b.n	1c3e4 <uart_console_init+0x4c>
   1c406:	bf00      	nop
   1c408:	0001c1e5 	.word	0x0001c1e5
   1c40c:	0001c259 	.word	0x0001c259
   1c410:	100039f8 	.word	0x100039f8
   1c414:	10003a00 	.word	0x10003a00
   1c418:	10003a38 	.word	0x10003a38
   1c41c:	0001c201 	.word	0x0001c201
   1c420:	100039d0 	.word	0x100039d0
   1c424:	100039d8 	.word	0x100039d8
   1c428:	10003a20 	.word	0x10003a20
   1c42c:	0001c29d 	.word	0x0001c29d
   1c430:	10003a34 	.word	0x10003a34
   1c434:	000385e4 	.word	0x000385e4

0001c438 <flash_area_find_idx>:
const struct flash_area *flash_map;
int flash_map_entries;

static int
flash_area_find_idx(uint8_t id)
{
   1c438:	4602      	mov	r2, r0
    int i;

    if (flash_map == NULL) {
   1c43a:	4b0b      	ldr	r3, [pc, #44]	; (1c468 <flash_area_find_idx+0x30>)
   1c43c:	6819      	ldr	r1, [r3, #0]
   1c43e:	b179      	cbz	r1, 1c460 <flash_area_find_idx+0x28>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
   1c440:	2000      	movs	r0, #0
   1c442:	4b0a      	ldr	r3, [pc, #40]	; (1c46c <flash_area_find_idx+0x34>)
   1c444:	681b      	ldr	r3, [r3, #0]
   1c446:	4283      	cmp	r3, r0
   1c448:	dd07      	ble.n	1c45a <flash_area_find_idx+0x22>
        if (flash_map[i].fa_id == id) {
   1c44a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1c44e:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
   1c452:	4293      	cmp	r3, r2
   1c454:	d006      	beq.n	1c464 <flash_area_find_idx+0x2c>
    for (i = 0; i < flash_map_entries; i++) {
   1c456:	3001      	adds	r0, #1
   1c458:	e7f3      	b.n	1c442 <flash_area_find_idx+0xa>
            return i;
        }
    }

    return -1;
   1c45a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c45e:	4770      	bx	lr
        return -1;
   1c460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1c464:	4770      	bx	lr
   1c466:	bf00      	nop
   1c468:	10003a3c 	.word	0x10003a3c
   1c46c:	10003a40 	.word	0x10003a40

0001c470 <flash_map_area_overlaps>:
    const struct flash_area *area2;
    uint32_t end1;
    uint32_t end2;
    int i;

    for (i = 0; i < flash_map_entries; i++) {
   1c470:	2300      	movs	r3, #0
   1c472:	4a13      	ldr	r2, [pc, #76]	; (1c4c0 <flash_map_area_overlaps+0x50>)
   1c474:	6812      	ldr	r2, [r2, #0]
   1c476:	429a      	cmp	r2, r3
   1c478:	dd1f      	ble.n	1c4ba <flash_map_area_overlaps+0x4a>
{
   1c47a:	b430      	push	{r4, r5}
   1c47c:	e004      	b.n	1c488 <flash_map_area_overlaps+0x18>
    for (i = 0; i < flash_map_entries; i++) {
   1c47e:	3301      	adds	r3, #1
   1c480:	4a0f      	ldr	r2, [pc, #60]	; (1c4c0 <flash_map_area_overlaps+0x50>)
   1c482:	6812      	ldr	r2, [r2, #0]
   1c484:	429a      	cmp	r2, r3
   1c486:	dd15      	ble.n	1c4b4 <flash_map_area_overlaps+0x44>
        area2 = &flash_map[i];
   1c488:	4a0e      	ldr	r2, [pc, #56]	; (1c4c4 <flash_map_area_overlaps+0x54>)
   1c48a:	6812      	ldr	r2, [r2, #0]
   1c48c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1c490:	eb02 0281 	add.w	r2, r2, r1, lsl #2

        if (area1->fa_device_id == area2->fa_device_id) {
   1c494:	7844      	ldrb	r4, [r0, #1]
   1c496:	7851      	ldrb	r1, [r2, #1]
   1c498:	428c      	cmp	r4, r1
   1c49a:	d1f0      	bne.n	1c47e <flash_map_area_overlaps+0xe>
            end1 = area1->fa_off + area1->fa_size;
   1c49c:	6845      	ldr	r5, [r0, #4]
   1c49e:	6881      	ldr	r1, [r0, #8]
   1c4a0:	4429      	add	r1, r5
            end2 = area2->fa_off + area2->fa_size;
   1c4a2:	6854      	ldr	r4, [r2, #4]
   1c4a4:	6892      	ldr	r2, [r2, #8]
   1c4a6:	4422      	add	r2, r4

            if (end1 > area2->fa_off && area1->fa_off < end2) {
   1c4a8:	428c      	cmp	r4, r1
   1c4aa:	d2e8      	bcs.n	1c47e <flash_map_area_overlaps+0xe>
   1c4ac:	4295      	cmp	r5, r2
   1c4ae:	d2e6      	bcs.n	1c47e <flash_map_area_overlaps+0xe>
                return true;
   1c4b0:	2001      	movs	r0, #1
   1c4b2:	e000      	b.n	1c4b6 <flash_map_area_overlaps+0x46>
            }
        }
    }

    return false;
   1c4b4:	2000      	movs	r0, #0
}
   1c4b6:	bc30      	pop	{r4, r5}
   1c4b8:	4770      	bx	lr
    return false;
   1c4ba:	2000      	movs	r0, #0
}
   1c4bc:	4770      	bx	lr
   1c4be:	bf00      	nop
   1c4c0:	10003a40 	.word	0x10003a40
   1c4c4:	10003a3c 	.word	0x10003a3c

0001c4c8 <flash_map_add_new_dflt_areas>:
 * Adds areas from the hardcoded flash map that aren't present in, and don't
 * overlap with, the manufacturing flash map.
 */
static void
flash_map_add_new_dflt_areas(void)
{
   1c4c8:	b570      	push	{r4, r5, r6, lr}

    const struct flash_area *dflt_area;
    struct flash_area *dst_area;
    int i;
    
    for (i = 0; i < num_dflt_entries; i++) {
   1c4ca:	2400      	movs	r4, #0
   1c4cc:	e00a      	b.n	1c4e4 <flash_map_add_new_dflt_areas+0x1c>
            /* Default flash map contains a new entry. */
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "no room: id=%d",
                               dflt_area->fa_id);
                DEBUG_PANIC();
   1c4ce:	f7f8 f911 	bl	146f4 <hal_debugger_connected>
   1c4d2:	b100      	cbz	r0, 1c4d6 <flash_map_add_new_dflt_areas+0xe>
   1c4d4:	be01      	bkpt	0x0001
   1c4d6:	2300      	movs	r3, #0
   1c4d8:	461a      	mov	r2, r3
   1c4da:	4619      	mov	r1, r3
   1c4dc:	4618      	mov	r0, r3
   1c4de:	f7fc fc27 	bl	18d30 <__assert_func>
    for (i = 0; i < num_dflt_entries; i++) {
   1c4e2:	3401      	adds	r4, #1
   1c4e4:	2c05      	cmp	r4, #5
   1c4e6:	dc28      	bgt.n	1c53a <flash_map_add_new_dflt_areas+0x72>
        dflt_area = &sysflash_map_dflt[i];
   1c4e8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1c4ec:	4a13      	ldr	r2, [pc, #76]	; (1c53c <flash_map_add_new_dflt_areas+0x74>)
   1c4ee:	eb02 0683 	add.w	r6, r2, r3, lsl #2
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
   1c4f2:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   1c4f6:	f7ff ff9f 	bl	1c438 <flash_area_find_idx>
   1c4fa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1c4fe:	d1f0      	bne.n	1c4e2 <flash_map_add_new_dflt_areas+0x1a>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
   1c500:	4b0f      	ldr	r3, [pc, #60]	; (1c540 <flash_map_add_new_dflt_areas+0x78>)
   1c502:	681d      	ldr	r5, [r3, #0]
   1c504:	2d09      	cmp	r5, #9
   1c506:	dce2      	bgt.n	1c4ce <flash_map_add_new_dflt_areas+0x6>
                return;
            } 

            /* Add the default entry if it doesn't cause any overlaps. */
            if (flash_map_area_overlaps(dflt_area)) {
   1c508:	4630      	mov	r0, r6
   1c50a:	f7ff ffb1 	bl	1c470 <flash_map_area_overlaps>
   1c50e:	2800      	cmp	r0, #0
   1c510:	d1e7      	bne.n	1c4e2 <flash_map_add_new_dflt_areas+0x1a>
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "overlap: id=%d",
                               dflt_area->fa_id);
            } else {
                /* Cast away const. */
                dst_area = (struct flash_area *) &flash_map[flash_map_entries];
   1c512:	4b0c      	ldr	r3, [pc, #48]	; (1c544 <flash_map_add_new_dflt_areas+0x7c>)
   1c514:	681b      	ldr	r3, [r3, #0]
   1c516:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1c51a:	eb03 0585 	add.w	r5, r3, r5, lsl #2

                *dst_area = *dflt_area;
   1c51e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1c522:	4a06      	ldr	r2, [pc, #24]	; (1c53c <flash_map_add_new_dflt_areas+0x74>)
   1c524:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1c528:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1c52c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                flash_map_entries++;
   1c530:	4a03      	ldr	r2, [pc, #12]	; (1c540 <flash_map_add_new_dflt_areas+0x78>)
   1c532:	6813      	ldr	r3, [r2, #0]
   1c534:	3301      	adds	r3, #1
   1c536:	6013      	str	r3, [r2, #0]
   1c538:	e7d3      	b.n	1c4e2 <flash_map_add_new_dflt_areas+0x1a>
            }
        }
    }
}
   1c53a:	bd70      	pop	{r4, r5, r6, pc}
   1c53c:	00039a98 	.word	0x00039a98
   1c540:	10003a40 	.word	0x10003a40
   1c544:	10003a3c 	.word	0x10003a3c

0001c548 <flash_map_init>:

void
flash_map_init(void)
{
   1c548:	b510      	push	{r4, lr}
   1c54a:	b082      	sub	sp, #8
#endif

    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1c54c:	4b13      	ldr	r3, [pc, #76]	; (1c59c <flash_map_init+0x54>)
   1c54e:	781b      	ldrb	r3, [r3, #0]
   1c550:	b163      	cbz	r3, 1c56c <flash_map_init+0x24>

    rc = hal_flash_init();
   1c552:	f016 ff0d 	bl	33370 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1c556:	b998      	cbnz	r0, 1c580 <flash_map_init+0x38>
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   1c558:	4b11      	ldr	r3, [pc, #68]	; (1c5a0 <flash_map_init+0x58>)
   1c55a:	4a12      	ldr	r2, [pc, #72]	; (1c5a4 <flash_map_init+0x5c>)
   1c55c:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1c55e:	4b12      	ldr	r3, [pc, #72]	; (1c5a8 <flash_map_init+0x60>)
   1c560:	2206      	movs	r2, #6
   1c562:	601a      	str	r2, [r3, #0]

    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
   1c564:	f7ff ffb0 	bl	1c4c8 <flash_map_add_new_dflt_areas>
}
   1c568:	b002      	add	sp, #8
   1c56a:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1c56c:	f7f8 f8c2 	bl	146f4 <hal_debugger_connected>
   1c570:	b100      	cbz	r0, 1c574 <flash_map_init+0x2c>
   1c572:	be01      	bkpt	0x0001
   1c574:	2300      	movs	r3, #0
   1c576:	461a      	mov	r2, r3
   1c578:	4619      	mov	r1, r3
   1c57a:	4618      	mov	r0, r3
   1c57c:	f7fc fbd8 	bl	18d30 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1c580:	f7f8 f8b8 	bl	146f4 <hal_debugger_connected>
   1c584:	b100      	cbz	r0, 1c588 <flash_map_init+0x40>
   1c586:	be01      	bkpt	0x0001
   1c588:	2000      	movs	r0, #0
   1c58a:	9000      	str	r0, [sp, #0]
   1c58c:	4b07      	ldr	r3, [pc, #28]	; (1c5ac <flash_map_init+0x64>)
   1c58e:	681c      	ldr	r4, [r3, #0]
   1c590:	4603      	mov	r3, r0
   1c592:	4602      	mov	r2, r0
   1c594:	4601      	mov	r1, r0
   1c596:	47a0      	blx	r4
   1c598:	e7de      	b.n	1c558 <flash_map_init+0x10>
   1c59a:	bf00      	nop
   1c59c:	10003fd8 	.word	0x10003fd8
   1c5a0:	10003a3c 	.word	0x10003a3c
   1c5a4:	00039a98 	.word	0x00039a98
   1c5a8:	10003a40 	.word	0x10003a40
   1c5ac:	100006b4 	.word	0x100006b4

0001c5b0 <log_registered>:
static int
log_registered(struct log *log)
{
    struct log *cur;

    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   1c5b0:	4b05      	ldr	r3, [pc, #20]	; (1c5c8 <log_registered+0x18>)
   1c5b2:	681b      	ldr	r3, [r3, #0]
   1c5b4:	b11b      	cbz	r3, 1c5be <log_registered+0xe>
        if (cur == log) {
   1c5b6:	4283      	cmp	r3, r0
   1c5b8:	d003      	beq.n	1c5c2 <log_registered+0x12>
    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   1c5ba:	68db      	ldr	r3, [r3, #12]
   1c5bc:	e7fa      	b.n	1c5b4 <log_registered+0x4>
            return 1;
        }
    }

    return 0;
   1c5be:	2000      	movs	r0, #0
   1c5c0:	4770      	bx	lr
            return 1;
   1c5c2:	2001      	movs	r0, #1
}
   1c5c4:	4770      	bx	lr
   1c5c6:	bf00      	nop
   1c5c8:	100006a0 	.word	0x100006a0

0001c5cc <log_chk_type>:
{
    int rc;

    rc = OS_OK;

    switch(etype) {
   1c5cc:	2802      	cmp	r0, #2
   1c5ce:	d801      	bhi.n	1c5d4 <log_chk_type+0x8>
    rc = OS_OK;
   1c5d0:	2000      	movs	r0, #0
   1c5d2:	4770      	bx	lr
        case LOG_ETYPE_STRING:
        case LOG_ETYPE_BINARY:
        case LOG_ETYPE_CBOR:
            break;
        default:
            rc = OS_ERROR;
   1c5d4:	200c      	movs	r0, #12
            break;
    }

    return rc;
}
   1c5d6:	4770      	bx	lr

0001c5d8 <log_chk_max_entry_len>:
log_chk_max_entry_len(struct log *log, uint16_t len)
{
    int rc;

    rc = OS_OK;
    if (log->l_max_entry_len != 0) {
   1c5d8:	8b43      	ldrh	r3, [r0, #26]
   1c5da:	b11b      	cbz	r3, 1c5e4 <log_chk_max_entry_len+0xc>
        if (len > log->l_max_entry_len) {
   1c5dc:	428b      	cmp	r3, r1
   1c5de:	d303      	bcc.n	1c5e8 <log_chk_max_entry_len+0x10>
    rc = OS_OK;
   1c5e0:	2000      	movs	r0, #0
   1c5e2:	4770      	bx	lr
   1c5e4:	2000      	movs	r0, #0
   1c5e6:	4770      	bx	lr
            LOG_STATS_INC(log, too_long);
            rc = OS_ENOMEM;
   1c5e8:	2001      	movs	r0, #1
        }
    }

    return rc;
}
   1c5ea:	4770      	bx	lr

0001c5ec <log_call_append_cb>:
/**
 * Calls the given log's append callback, if it has one.
 */
static void
log_call_append_cb(struct log *log, uint32_t idx)
{
   1c5ec:	b500      	push	{lr}
   1c5ee:	b083      	sub	sp, #12
     * preventing a TOCTTOU race.
     * (This all assumes that function pointer reads and writes are atomic.)
     */
    log_append_cb * volatile cb;

    cb = log->l_append_cb;
   1c5f0:	6903      	ldr	r3, [r0, #16]
   1c5f2:	9301      	str	r3, [sp, #4]
    if (cb != NULL) {
   1c5f4:	9b01      	ldr	r3, [sp, #4]
   1c5f6:	b10b      	cbz	r3, 1c5fc <log_call_append_cb+0x10>
        cb(log, idx);
   1c5f8:	9b01      	ldr	r3, [sp, #4]
   1c5fa:	4798      	blx	r3
    }
}
   1c5fc:	b003      	add	sp, #12
   1c5fe:	f85d fb04 	ldr.w	pc, [sp], #4
   1c602:	0000      	movs	r0, r0
   1c604:	0000      	movs	r0, r0
	...

0001c608 <log_append_prepare>:
{
   1c608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c60c:	b085      	sub	sp, #20
   1c60e:	4606      	mov	r6, r0
   1c610:	468a      	mov	sl, r1
   1c612:	4615      	mov	r5, r2
   1c614:	461f      	mov	r7, r3
   1c616:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    rc = log_chk_type(etype);
   1c618:	4618      	mov	r0, r3
   1c61a:	f7ff ffd7 	bl	1c5cc <log_chk_type>
    assert(rc == OS_OK);
   1c61e:	2800      	cmp	r0, #0
   1c620:	d13e      	bne.n	1c6a0 <log_append_prepare+0x98>
    if (log->l_name == NULL || log->l_log == NULL) {
   1c622:	6833      	ldr	r3, [r6, #0]
   1c624:	2b00      	cmp	r3, #0
   1c626:	d074      	beq.n	1c712 <log_append_prepare+0x10a>
   1c628:	6873      	ldr	r3, [r6, #4]
   1c62a:	2b00      	cmp	r3, #0
   1c62c:	d074      	beq.n	1c718 <log_append_prepare+0x110>
    if (level > LOG_LEVEL_MAX) {
   1c62e:	2d0f      	cmp	r5, #15
   1c630:	d900      	bls.n	1c634 <log_append_prepare+0x2c>
        level = LOG_LEVEL_MAX;
   1c632:	250f      	movs	r5, #15
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   1c634:	681b      	ldr	r3, [r3, #0]
   1c636:	2b02      	cmp	r3, #2
   1c638:	d03c      	beq.n	1c6b4 <log_append_prepare+0xac>
    if (level < log->l_level) {
   1c63a:	7e33      	ldrb	r3, [r6, #24]
   1c63c:	42ab      	cmp	r3, r5
   1c63e:	d86e      	bhi.n	1c71e <log_append_prepare+0x116>
    if (level < log_level_get(module)) {
   1c640:	4650      	mov	r0, sl
   1c642:	f000 fa45 	bl	1cad0 <log_level_get>
   1c646:	42a8      	cmp	r0, r5
   1c648:	d86c      	bhi.n	1c724 <log_append_prepare+0x11c>
    OS_ENTER_CRITICAL(sr);
   1c64a:	f7fe f92d 	bl	1a8a8 <os_arch_save_sr>
    idx = g_log_info.li_next_index++;
   1c64e:	4b3a      	ldr	r3, [pc, #232]	; (1c738 <log_append_prepare+0x130>)
   1c650:	f8d3 b000 	ldr.w	fp, [r3]
   1c654:	f10b 0201 	add.w	r2, fp, #1
   1c658:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1c65a:	f7fe f92b 	bl	1a8b4 <os_arch_restore_sr>
    rc = os_gettimeofday(&tv, NULL);
   1c65e:	2100      	movs	r1, #0
   1c660:	4668      	mov	r0, sp
   1c662:	f7fe f831 	bl	1a6c8 <os_gettimeofday>
    if (rc || tv.tv_sec < UTC01_01_2016) {
   1c666:	4606      	mov	r6, r0
   1c668:	b938      	cbnz	r0, 1c67a <log_append_prepare+0x72>
   1c66a:	e9dd 0100 	ldrd	r0, r1, [sp]
   1c66e:	a330      	add	r3, pc, #192	; (adr r3, 1c730 <log_append_prepare+0x128>)
   1c670:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c674:	4282      	cmp	r2, r0
   1c676:	418b      	sbcs	r3, r1
   1c678:	db20      	blt.n	1c6bc <log_append_prepare+0xb4>
        ue->ue_ts = os_get_uptime_usec();
   1c67a:	f7fe f8c9 	bl	1a810 <os_get_uptime_usec>
   1c67e:	6020      	str	r0, [r4, #0]
   1c680:	6061      	str	r1, [r4, #4]
    ue->ue_level = level;
   1c682:	7365      	strb	r5, [r4, #13]
    ue->ue_module = module;
   1c684:	f884 a00c 	strb.w	sl, [r4, #12]
    ue->ue_index = idx;
   1c688:	f8c4 b008 	str.w	fp, [r4, #8]
    ue->ue_etype = etype;
   1c68c:	7ba3      	ldrb	r3, [r4, #14]
   1c68e:	f367 0303 	bfi	r3, r7, #0, #4
    ue->ue_flags = 0;
   1c692:	f36f 1307 	bfc	r3, #4, #4
   1c696:	73a3      	strb	r3, [r4, #14]
}
   1c698:	4630      	mov	r0, r6
   1c69a:	b005      	add	sp, #20
   1c69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(rc == OS_OK);
   1c6a0:	f7f8 f828 	bl	146f4 <hal_debugger_connected>
   1c6a4:	b100      	cbz	r0, 1c6a8 <log_append_prepare+0xa0>
   1c6a6:	be01      	bkpt	0x0001
   1c6a8:	2300      	movs	r3, #0
   1c6aa:	461a      	mov	r2, r3
   1c6ac:	4619      	mov	r1, r3
   1c6ae:	4618      	mov	r0, r3
   1c6b0:	f7fc fb3e 	bl	18d30 <__assert_func>
        log_written = 1;
   1c6b4:	4b21      	ldr	r3, [pc, #132]	; (1c73c <log_append_prepare+0x134>)
   1c6b6:	2201      	movs	r2, #1
   1c6b8:	701a      	strb	r2, [r3, #0]
   1c6ba:	e7be      	b.n	1c63a <log_append_prepare+0x32>
        ue->ue_ts = tv.tv_sec * 1000000 + tv.tv_usec;
   1c6bc:	ea4f 1c41 	mov.w	ip, r1, lsl #5
   1c6c0:	0143      	lsls	r3, r0, #5
   1c6c2:	ea4c 62d0 	orr.w	r2, ip, r0, lsr #27
   1c6c6:	1a1b      	subs	r3, r3, r0
   1c6c8:	eb62 0201 	sbc.w	r2, r2, r1
   1c6cc:	ea4f 2c42 	mov.w	ip, r2, lsl #9
   1c6d0:	ea4c 5cd3 	orr.w	ip, ip, r3, lsr #23
   1c6d4:	ea4f 2e43 	mov.w	lr, r3, lsl #9
   1c6d8:	4662      	mov	r2, ip
   1c6da:	eb1e 0300 	adds.w	r3, lr, r0
   1c6de:	eb41 0202 	adc.w	r2, r1, r2
   1c6e2:	ea4f 1c82 	mov.w	ip, r2, lsl #6
   1c6e6:	ea4c 6c93 	orr.w	ip, ip, r3, lsr #26
   1c6ea:	ea4f 1e83 	mov.w	lr, r3, lsl #6
   1c6ee:	ebbe 0303 	subs.w	r3, lr, r3
   1c6f2:	eb6c 0202 	sbc.w	r2, ip, r2
   1c6f6:	eb13 0800 	adds.w	r8, r3, r0
   1c6fa:	eb42 0901 	adc.w	r9, r2, r1
   1c6fe:	9b02      	ldr	r3, [sp, #8]
   1c700:	eb18 0803 	adds.w	r8, r8, r3
   1c704:	eb49 79e3 	adc.w	r9, r9, r3, asr #31
   1c708:	f8c4 8000 	str.w	r8, [r4]
   1c70c:	f8c4 9004 	str.w	r9, [r4, #4]
   1c710:	e7b7      	b.n	1c682 <log_append_prepare+0x7a>
        rc = -1;
   1c712:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1c716:	e7bf      	b.n	1c698 <log_append_prepare+0x90>
   1c718:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1c71c:	e7bc      	b.n	1c698 <log_append_prepare+0x90>
        rc = -1;
   1c71e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1c722:	e7b9      	b.n	1c698 <log_append_prepare+0x90>
        rc = -1;
   1c724:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    return (rc);
   1c728:	e7b6      	b.n	1c698 <log_append_prepare+0x90>
   1c72a:	bf00      	nop
   1c72c:	f3af 8000 	nop.w
   1c730:	5685c17f 	.word	0x5685c17f
   1c734:	00000000 	.word	0x00000000
   1c738:	10003a44 	.word	0x10003a44
   1c73c:	10003a4c 	.word	0x10003a4c

0001c740 <log_init>:
{
   1c740:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1c742:	4b0d      	ldr	r3, [pc, #52]	; (1c778 <log_init+0x38>)
   1c744:	781b      	ldrb	r3, [r3, #0]
   1c746:	b163      	cbz	r3, 1c762 <log_init+0x22>
    log_written = 0;
   1c748:	2300      	movs	r3, #0
   1c74a:	4a0c      	ldr	r2, [pc, #48]	; (1c77c <log_init+0x3c>)
   1c74c:	7013      	strb	r3, [r2, #0]
    STAILQ_INIT(&g_log_list);
   1c74e:	4a0c      	ldr	r2, [pc, #48]	; (1c780 <log_init+0x40>)
   1c750:	6013      	str	r3, [r2, #0]
   1c752:	6052      	str	r2, [r2, #4]
    g_log_info.li_version = MYNEWT_VAL(LOG_VERSION);
   1c754:	4a0b      	ldr	r2, [pc, #44]	; (1c784 <log_init+0x44>)
   1c756:	2103      	movs	r1, #3
   1c758:	7111      	strb	r1, [r2, #4]
    g_log_info.li_next_index = 0;
   1c75a:	6013      	str	r3, [r2, #0]
    log_console_init();
   1c75c:	f000 f986 	bl	1ca6c <log_console_init>
}
   1c760:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1c762:	f7f7 ffc7 	bl	146f4 <hal_debugger_connected>
   1c766:	b100      	cbz	r0, 1c76a <log_init+0x2a>
   1c768:	be01      	bkpt	0x0001
   1c76a:	2300      	movs	r3, #0
   1c76c:	461a      	mov	r2, r3
   1c76e:	4619      	mov	r1, r3
   1c770:	4618      	mov	r0, r3
   1c772:	f7fc fadd 	bl	18d30 <__assert_func>
   1c776:	bf00      	nop
   1c778:	10003fd8 	.word	0x10003fd8
   1c77c:	10003a4c 	.word	0x10003a4c
   1c780:	100006a0 	.word	0x100006a0
   1c784:	10003a44 	.word	0x10003a44

0001c788 <log_hdr_len>:
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   1c788:	7b83      	ldrb	r3, [r0, #14]
   1c78a:	f013 0f10 	tst.w	r3, #16
   1c78e:	d101      	bne.n	1c794 <log_hdr_len+0xc>
    return LOG_BASE_ENTRY_HDR_SIZE;
   1c790:	200f      	movs	r0, #15
   1c792:	4770      	bx	lr
        return LOG_BASE_ENTRY_HDR_SIZE + LOG_IMG_HASHLEN;
   1c794:	2013      	movs	r0, #19
}
   1c796:	4770      	bx	lr

0001c798 <log_append_body>:
}

int
log_append_body(struct log *log, uint8_t module, uint8_t level, uint8_t etype,
                const void *body, uint16_t body_len)
{
   1c798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c79c:	b089      	sub	sp, #36	; 0x24
   1c79e:	4604      	mov	r4, r0
   1c7a0:	460d      	mov	r5, r1
   1c7a2:	4691      	mov	r9, r2
   1c7a4:	461e      	mov	r6, r3
   1c7a6:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
    struct log_entry_hdr hdr;
    int rc;

    LOG_STATS_INC(log, writes);

    rc = log_chk_max_entry_len(log, body_len);
   1c7aa:	4641      	mov	r1, r8
   1c7ac:	f7ff ff14 	bl	1c5d8 <log_chk_max_entry_len>
    if (rc != OS_OK) {
   1c7b0:	4607      	mov	r7, r0
   1c7b2:	b118      	cbz	r0, 1c7bc <log_append_body+0x24>
    }

    log_call_append_cb(log, hdr.ue_index);

    return 0;
}
   1c7b4:	4638      	mov	r0, r7
   1c7b6:	b009      	add	sp, #36	; 0x24
   1c7b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = log_append_prepare(log, module, level, etype, &hdr);
   1c7bc:	ab03      	add	r3, sp, #12
   1c7be:	9300      	str	r3, [sp, #0]
   1c7c0:	4633      	mov	r3, r6
   1c7c2:	464a      	mov	r2, r9
   1c7c4:	4629      	mov	r1, r5
   1c7c6:	4620      	mov	r0, r4
   1c7c8:	f7ff ff1e 	bl	1c608 <log_append_prepare>
    if (rc != 0) {
   1c7cc:	4607      	mov	r7, r0
   1c7ce:	2800      	cmp	r0, #0
   1c7d0:	d1f0      	bne.n	1c7b4 <log_append_body+0x1c>
    rc = log->l_log->log_append_body(log, &hdr, body, body_len);
   1c7d2:	6863      	ldr	r3, [r4, #4]
   1c7d4:	691d      	ldr	r5, [r3, #16]
   1c7d6:	4643      	mov	r3, r8
   1c7d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1c7da:	a903      	add	r1, sp, #12
   1c7dc:	4620      	mov	r0, r4
   1c7de:	47a8      	blx	r5
    if (rc != 0) {
   1c7e0:	4607      	mov	r7, r0
   1c7e2:	2800      	cmp	r0, #0
   1c7e4:	d1e6      	bne.n	1c7b4 <log_append_body+0x1c>
    log_call_append_cb(log, hdr.ue_index);
   1c7e6:	9905      	ldr	r1, [sp, #20]
   1c7e8:	4620      	mov	r0, r4
   1c7ea:	f7ff feff 	bl	1c5ec <log_call_append_cb>
    return 0;
   1c7ee:	e7e1      	b.n	1c7b4 <log_append_body+0x1c>

0001c7f0 <log_walk>:
}

int
log_walk(struct log *log, log_walk_func_t walk_func,
         struct log_offset *log_offset)
{
   1c7f0:	b508      	push	{r3, lr}
    int rc;

    rc = log->l_log->log_walk(log, walk_func, log_offset);
   1c7f2:	6843      	ldr	r3, [r0, #4]
   1c7f4:	69db      	ldr	r3, [r3, #28]
   1c7f6:	4798      	blx	r3
    }

    return (0);
err:
    return (rc);
}
   1c7f8:	bd08      	pop	{r3, pc}
	...

0001c7fc <log_read_last_hdr>:
{
   1c7fc:	b530      	push	{r4, r5, lr}
   1c7fe:	b089      	sub	sp, #36	; 0x24
    arg.hdr = out_hdr;
   1c800:	9106      	str	r1, [sp, #24]
    arg.read_success = 0;
   1c802:	2300      	movs	r3, #0
   1c804:	9307      	str	r3, [sp, #28]
    log_offset.lo_arg = &arg;
   1c806:	aa06      	add	r2, sp, #24
   1c808:	9204      	str	r2, [sp, #16]
    log_offset.lo_ts = -1;
   1c80a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1c80e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1c812:	e9cd 4500 	strd	r4, r5, [sp]
    log_offset.lo_index = 0;
   1c816:	9302      	str	r3, [sp, #8]
    log_offset.lo_data_len = 0;
   1c818:	9303      	str	r3, [sp, #12]
    log_walk(log, log_read_hdr_walk, &log_offset);
   1c81a:	466a      	mov	r2, sp
   1c81c:	4905      	ldr	r1, [pc, #20]	; (1c834 <log_read_last_hdr+0x38>)
   1c81e:	f7ff ffe7 	bl	1c7f0 <log_walk>
    if (!arg.read_success) {
   1c822:	9b07      	ldr	r3, [sp, #28]
   1c824:	b113      	cbz	r3, 1c82c <log_read_last_hdr+0x30>
    return 0;
   1c826:	2000      	movs	r0, #0
}
   1c828:	b009      	add	sp, #36	; 0x24
   1c82a:	bd30      	pop	{r4, r5, pc}
        return -1;
   1c82c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c830:	e7fa      	b.n	1c828 <log_read_last_hdr+0x2c>
   1c832:	bf00      	nop
   1c834:	0001c92d 	.word	0x0001c92d

0001c838 <log_register>:
{
   1c838:	b530      	push	{r4, r5, lr}
   1c83a:	b087      	sub	sp, #28
   1c83c:	460c      	mov	r4, r1
   1c83e:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
    assert(!log_written);
   1c842:	4d2f      	ldr	r5, [pc, #188]	; (1c900 <log_register+0xc8>)
   1c844:	782d      	ldrb	r5, [r5, #0]
   1c846:	bb25      	cbnz	r5, 1c892 <log_register+0x5a>
    if (level > LOG_LEVEL_MAX) {
   1c848:	290f      	cmp	r1, #15
   1c84a:	d900      	bls.n	1c84e <log_register+0x16>
        level = LOG_LEVEL_MAX;
   1c84c:	210f      	movs	r1, #15
    log->l_name = name;
   1c84e:	6020      	str	r0, [r4, #0]
    log->l_log = lh;
   1c850:	6062      	str	r2, [r4, #4]
    log->l_arg = arg;
   1c852:	60a3      	str	r3, [r4, #8]
    log->l_level = level;
   1c854:	7621      	strb	r1, [r4, #24]
    log->l_append_cb = NULL;
   1c856:	2300      	movs	r3, #0
   1c858:	6123      	str	r3, [r4, #16]
    log->l_max_entry_len = 0;
   1c85a:	8363      	strh	r3, [r4, #26]
    if (!log_registered(log)) {
   1c85c:	4620      	mov	r0, r4
   1c85e:	f7ff fea7 	bl	1c5b0 <log_registered>
   1c862:	b938      	cbnz	r0, 1c874 <log_register+0x3c>
        STAILQ_INSERT_TAIL(&g_log_list, log, l_next);
   1c864:	2300      	movs	r3, #0
   1c866:	60e3      	str	r3, [r4, #12]
   1c868:	4b26      	ldr	r3, [pc, #152]	; (1c904 <log_register+0xcc>)
   1c86a:	685a      	ldr	r2, [r3, #4]
   1c86c:	6014      	str	r4, [r2, #0]
   1c86e:	f104 020c 	add.w	r2, r4, #12
   1c872:	605a      	str	r2, [r3, #4]
    if (log->l_log->log_registered) {
   1c874:	6863      	ldr	r3, [r4, #4]
   1c876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c878:	b11b      	cbz	r3, 1c882 <log_register+0x4a>
        rc = log->l_log->log_registered(log);
   1c87a:	4620      	mov	r0, r4
   1c87c:	4798      	blx	r3
        if (rc) {
   1c87e:	4605      	mov	r5, r0
   1c880:	b988      	cbnz	r0, 1c8a6 <log_register+0x6e>
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   1c882:	6863      	ldr	r3, [r4, #4]
   1c884:	681b      	ldr	r3, [r3, #0]
   1c886:	2b02      	cmp	r3, #2
   1c888:	d024      	beq.n	1c8d4 <log_register+0x9c>
    return (0);
   1c88a:	2500      	movs	r5, #0
}
   1c88c:	4628      	mov	r0, r5
   1c88e:	b007      	add	sp, #28
   1c890:	bd30      	pop	{r4, r5, pc}
    assert(!log_written);
   1c892:	f7f7 ff2f 	bl	146f4 <hal_debugger_connected>
   1c896:	b100      	cbz	r0, 1c89a <log_register+0x62>
   1c898:	be01      	bkpt	0x0001
   1c89a:	2300      	movs	r3, #0
   1c89c:	461a      	mov	r2, r3
   1c89e:	4619      	mov	r1, r3
   1c8a0:	4618      	mov	r0, r3
   1c8a2:	f7fc fa45 	bl	18d30 <__assert_func>
            STAILQ_REMOVE(&g_log_list, log, log, l_next);
   1c8a6:	4b17      	ldr	r3, [pc, #92]	; (1c904 <log_register+0xcc>)
   1c8a8:	681b      	ldr	r3, [r3, #0]
   1c8aa:	42a3      	cmp	r3, r4
   1c8ac:	d00b      	beq.n	1c8c6 <log_register+0x8e>
   1c8ae:	461a      	mov	r2, r3
   1c8b0:	68db      	ldr	r3, [r3, #12]
   1c8b2:	42a3      	cmp	r3, r4
   1c8b4:	d1fb      	bne.n	1c8ae <log_register+0x76>
   1c8b6:	68db      	ldr	r3, [r3, #12]
   1c8b8:	60d3      	str	r3, [r2, #12]
   1c8ba:	2b00      	cmp	r3, #0
   1c8bc:	d1e6      	bne.n	1c88c <log_register+0x54>
   1c8be:	320c      	adds	r2, #12
   1c8c0:	4b10      	ldr	r3, [pc, #64]	; (1c904 <log_register+0xcc>)
   1c8c2:	605a      	str	r2, [r3, #4]
            return rc;
   1c8c4:	e7e2      	b.n	1c88c <log_register+0x54>
            STAILQ_REMOVE(&g_log_list, log, log, l_next);
   1c8c6:	68db      	ldr	r3, [r3, #12]
   1c8c8:	4a0e      	ldr	r2, [pc, #56]	; (1c904 <log_register+0xcc>)
   1c8ca:	6013      	str	r3, [r2, #0]
   1c8cc:	2b00      	cmp	r3, #0
   1c8ce:	d1dd      	bne.n	1c88c <log_register+0x54>
   1c8d0:	6052      	str	r2, [r2, #4]
   1c8d2:	e7db      	b.n	1c88c <log_register+0x54>
        rc = log_read_last_hdr(log, &hdr);
   1c8d4:	a901      	add	r1, sp, #4
   1c8d6:	4620      	mov	r0, r4
   1c8d8:	f7ff ff90 	bl	1c7fc <log_read_last_hdr>
        if (rc == 0) {
   1c8dc:	4605      	mov	r5, r0
   1c8de:	b108      	cbz	r0, 1c8e4 <log_register+0xac>
    return (0);
   1c8e0:	2500      	movs	r5, #0
   1c8e2:	e7d3      	b.n	1c88c <log_register+0x54>
            OS_ENTER_CRITICAL(sr);
   1c8e4:	f7fd ffe0 	bl	1a8a8 <os_arch_save_sr>
            if (hdr.ue_index >= g_log_info.li_next_index) {
   1c8e8:	9b03      	ldr	r3, [sp, #12]
   1c8ea:	4a07      	ldr	r2, [pc, #28]	; (1c908 <log_register+0xd0>)
   1c8ec:	6812      	ldr	r2, [r2, #0]
   1c8ee:	4293      	cmp	r3, r2
   1c8f0:	d302      	bcc.n	1c8f8 <log_register+0xc0>
                g_log_info.li_next_index = hdr.ue_index + 1;
   1c8f2:	3301      	adds	r3, #1
   1c8f4:	4a04      	ldr	r2, [pc, #16]	; (1c908 <log_register+0xd0>)
   1c8f6:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
   1c8f8:	f7fd ffdc 	bl	1a8b4 <os_arch_restore_sr>
   1c8fc:	e7c6      	b.n	1c88c <log_register+0x54>
   1c8fe:	bf00      	nop
   1c900:	10003a4c 	.word	0x10003a4c
   1c904:	100006a0 	.word	0x100006a0
   1c908:	10003a44 	.word	0x10003a44

0001c90c <log_read>:
 * @return                      The number of bytes read; 0 on failure.
 */
int
log_read(struct log *log, const void *dptr, void *buf, uint16_t off,
         uint16_t len)
{
   1c90c:	b530      	push	{r4, r5, lr}
   1c90e:	b083      	sub	sp, #12
    int rc;

    rc = log->l_log->log_read(log, dptr, buf, off, len);
   1c910:	6844      	ldr	r4, [r0, #4]
   1c912:	6864      	ldr	r4, [r4, #4]
   1c914:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1c918:	9500      	str	r5, [sp, #0]
   1c91a:	47a0      	blx	r4

    return (rc);
}
   1c91c:	b003      	add	sp, #12
   1c91e:	bd30      	pop	{r4, r5, pc}

0001c920 <log_fill_current_img_hash>:
    hdr->ue_flags |= LOG_FLAGS_IMG_HASH;

    /* We have to account for LOG_IMG_HASHLEN bytes of hash */
    return imgr_get_current_hash(hdr->ue_imghash, LOG_IMG_HASHLEN);
#endif
    memset(hdr->ue_imghash, 0, LOG_IMG_HASHLEN);
   1c920:	2300      	movs	r3, #0
   1c922:	f8c0 300f 	str.w	r3, [r0, #15]

    return SYS_ENOTSUP;
}
   1c926:	f06f 000b 	mvn.w	r0, #11
   1c92a:	4770      	bx	lr

0001c92c <log_read_hdr_walk>:
{
   1c92c:	b510      	push	{r4, lr}
   1c92e:	b082      	sub	sp, #8
   1c930:	460b      	mov	r3, r1
   1c932:	4611      	mov	r1, r2
    arg = log_offset->lo_arg;
   1c934:	691c      	ldr	r4, [r3, #16]
    rc = log_read(log, dptr, arg->hdr, 0, LOG_BASE_ENTRY_HDR_SIZE);
   1c936:	6822      	ldr	r2, [r4, #0]
   1c938:	230f      	movs	r3, #15
   1c93a:	9300      	str	r3, [sp, #0]
   1c93c:	2300      	movs	r3, #0
   1c93e:	f7ff ffe5 	bl	1c90c <log_read>
    if (rc >= LOG_BASE_ENTRY_HDR_SIZE) {
   1c942:	280e      	cmp	r0, #14
   1c944:	dd01      	ble.n	1c94a <log_read_hdr_walk+0x1e>
        arg->read_success = 1;
   1c946:	2301      	movs	r3, #1
   1c948:	6063      	str	r3, [r4, #4]
    if (arg->hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   1c94a:	6820      	ldr	r0, [r4, #0]
   1c94c:	7b83      	ldrb	r3, [r0, #14]
   1c94e:	f013 0f10 	tst.w	r3, #16
   1c952:	d102      	bne.n	1c95a <log_read_hdr_walk+0x2e>
}
   1c954:	2001      	movs	r0, #1
   1c956:	b002      	add	sp, #8
   1c958:	bd10      	pop	{r4, pc}
        rc = log_fill_current_img_hash(arg->hdr);
   1c95a:	f7ff ffe1 	bl	1c920 <log_fill_current_img_hash>
        if (!rc || rc == SYS_ENOTSUP) {
   1c95e:	b110      	cbz	r0, 1c966 <log_read_hdr_walk+0x3a>
   1c960:	f110 0f0c 	cmn.w	r0, #12
   1c964:	d1f6      	bne.n	1c954 <log_read_hdr_walk+0x28>
            arg->read_success = 1;
   1c966:	2301      	movs	r3, #1
   1c968:	6063      	str	r3, [r4, #4]
   1c96a:	e7f3      	b.n	1c954 <log_read_hdr_walk+0x28>

0001c96c <log_console_read>:
log_console_read(struct log *log, const void *dptr, void *buf, uint16_t offset,
        uint16_t len)
{
    /* You don't read console, console read you */
    return (OS_EINVAL);
}
   1c96c:	2002      	movs	r0, #2
   1c96e:	4770      	bx	lr

0001c970 <log_console_walk>:
log_console_walk(struct log *log, log_walk_func_t walk_func,
        struct log_offset *log_offset)
{
    /* You don't walk console, console walk you. */
    return (OS_EINVAL);
}
   1c970:	2002      	movs	r0, #2
   1c972:	4770      	bx	lr

0001c974 <log_console_flush>:
static int
log_console_flush(struct log *log)
{
    /* You don't flush console, console flush you. */
    return (OS_EINVAL);
}
   1c974:	2002      	movs	r0, #2
   1c976:	4770      	bx	lr

0001c978 <log_console_print_hdr>:
{
   1c978:	b510      	push	{r4, lr}
   1c97a:	b082      	sub	sp, #8
   1c97c:	4604      	mov	r4, r0
                   hdr->ue_ts, hdr->ue_module, hdr->ue_level);
   1c97e:	7b03      	ldrb	r3, [r0, #12]
   1c980:	7b42      	ldrb	r2, [r0, #13]
    console_printf("[ts=%lluus, mod=%u level=%u ",
   1c982:	9201      	str	r2, [sp, #4]
   1c984:	9300      	str	r3, [sp, #0]
   1c986:	6802      	ldr	r2, [r0, #0]
   1c988:	6843      	ldr	r3, [r0, #4]
   1c98a:	480a      	ldr	r0, [pc, #40]	; (1c9b4 <log_console_print_hdr+0x3c>)
   1c98c:	f7ff fbd4 	bl	1c138 <console_printf>
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   1c990:	7ba3      	ldrb	r3, [r4, #14]
   1c992:	f013 0f10 	tst.w	r3, #16
   1c996:	d104      	bne.n	1c9a2 <log_console_print_hdr+0x2a>
    console_printf("]");
   1c998:	4807      	ldr	r0, [pc, #28]	; (1c9b8 <log_console_print_hdr+0x40>)
   1c99a:	f7ff fbcd 	bl	1c138 <console_printf>
}
   1c99e:	b002      	add	sp, #8
   1c9a0:	bd10      	pop	{r4, pc}
                       hdr->ue_imghash[2], hdr->ue_imghash[3]);
   1c9a2:	7ca3      	ldrb	r3, [r4, #18]
        console_printf("ih=0x%x%x%x%x", hdr->ue_imghash[0], hdr->ue_imghash[1],
   1c9a4:	9300      	str	r3, [sp, #0]
   1c9a6:	7c63      	ldrb	r3, [r4, #17]
   1c9a8:	7c22      	ldrb	r2, [r4, #16]
   1c9aa:	7be1      	ldrb	r1, [r4, #15]
   1c9ac:	4803      	ldr	r0, [pc, #12]	; (1c9bc <log_console_print_hdr+0x44>)
   1c9ae:	f7ff fbc3 	bl	1c138 <console_printf>
   1c9b2:	e7f1      	b.n	1c998 <log_console_print_hdr+0x20>
   1c9b4:	000385ec 	.word	0x000385ec
   1c9b8:	00036df0 	.word	0x00036df0
   1c9bc:	0003860c 	.word	0x0003860c

0001c9c0 <log_console_dump_cbor_entry>:
{
   1c9c0:	b530      	push	{r4, r5, lr}
   1c9c2:	b095      	sub	sp, #84	; 0x54
   1c9c4:	460a      	mov	r2, r1
    cbor_buf_reader_init(&cbor_buf_reader, dptr, len);
   1c9c6:	4601      	mov	r1, r0
   1c9c8:	a805      	add	r0, sp, #20
   1c9ca:	f015 fd29 	bl	32420 <cbor_buf_reader_init>
    cbor_parser_init(&cbor_buf_reader.r, 0, &cbor_parser, &cbor_value);
   1c9ce:	ad0d      	add	r5, sp, #52	; 0x34
   1c9d0:	462b      	mov	r3, r5
   1c9d2:	aa11      	add	r2, sp, #68	; 0x44
   1c9d4:	2100      	movs	r1, #0
   1c9d6:	a805      	add	r0, sp, #20
   1c9d8:	f015 ffee 	bl	329b8 <cbor_parser_init>

/* Human-readable (dump) API */
CBOR_API CborError cbor_value_to_pretty_advance(FILE *out, CborValue *value);
CBOR_INLINE_API CborError cbor_value_to_pretty(FILE *out, const CborValue *value)
{
    CborValue copy = *value;
   1c9dc:	ac01      	add	r4, sp, #4
   1c9de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1c9e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return cbor_value_to_pretty_advance(out, &copy);
   1c9e6:	4621      	mov	r1, r4
   1c9e8:	4b05      	ldr	r3, [pc, #20]	; (1ca00 <log_console_dump_cbor_entry+0x40>)
   1c9ea:	6818      	ldr	r0, [r3, #0]
   1c9ec:	f016 fc4e 	bl	3328c <cbor_value_to_pretty_advance>
    console_write("\n", 1);
   1c9f0:	2101      	movs	r1, #1
   1c9f2:	4804      	ldr	r0, [pc, #16]	; (1ca04 <log_console_dump_cbor_entry+0x44>)
   1c9f4:	f7ff fa18 	bl	1be28 <console_write>
}
   1c9f8:	2000      	movs	r0, #0
   1c9fa:	b015      	add	sp, #84	; 0x54
   1c9fc:	bd30      	pop	{r4, r5, pc}
   1c9fe:	bf00      	nop
   1ca00:	000385d8 	.word	0x000385d8
   1ca04:	00034744 	.word	0x00034744

0001ca08 <log_console_append_body>:
{
   1ca08:	b570      	push	{r4, r5, r6, lr}
   1ca0a:	460c      	mov	r4, r1
   1ca0c:	4616      	mov	r6, r2
   1ca0e:	461d      	mov	r5, r3
    if (!console_is_init()) {
   1ca10:	f7ff fb50 	bl	1c0b4 <console_is_init>
   1ca14:	b158      	cbz	r0, 1ca2e <log_console_append_body+0x26>
    if (!console_is_midline) {
   1ca16:	4b0b      	ldr	r3, [pc, #44]	; (1ca44 <log_console_append_body+0x3c>)
   1ca18:	681b      	ldr	r3, [r3, #0]
   1ca1a:	b153      	cbz	r3, 1ca32 <log_console_append_body+0x2a>
    if (hdr->ue_etype != LOG_ETYPE_CBOR) {
   1ca1c:	7ba3      	ldrb	r3, [r4, #14]
   1ca1e:	f003 030f 	and.w	r3, r3, #15
   1ca22:	2b01      	cmp	r3, #1
   1ca24:	d009      	beq.n	1ca3a <log_console_append_body+0x32>
        console_write(body, body_len);
   1ca26:	4629      	mov	r1, r5
   1ca28:	4630      	mov	r0, r6
   1ca2a:	f7ff f9fd 	bl	1be28 <console_write>
}
   1ca2e:	2000      	movs	r0, #0
   1ca30:	bd70      	pop	{r4, r5, r6, pc}
        log_console_print_hdr(hdr);
   1ca32:	4620      	mov	r0, r4
   1ca34:	f7ff ffa0 	bl	1c978 <log_console_print_hdr>
   1ca38:	e7f0      	b.n	1ca1c <log_console_append_body+0x14>
        log_console_dump_cbor_entry(body, body_len);
   1ca3a:	b2a9      	uxth	r1, r5
   1ca3c:	4630      	mov	r0, r6
   1ca3e:	f7ff ffbf 	bl	1c9c0 <log_console_dump_cbor_entry>
   1ca42:	e7f4      	b.n	1ca2e <log_console_append_body+0x26>
   1ca44:	10003990 	.word	0x10003990

0001ca48 <log_console_append>:
{
   1ca48:	b570      	push	{r4, r5, r6, lr}
   1ca4a:	4605      	mov	r5, r0
   1ca4c:	460c      	mov	r4, r1
   1ca4e:	4616      	mov	r6, r2
    hdr_len = log_hdr_len(buf);
   1ca50:	4608      	mov	r0, r1
   1ca52:	f7ff fe99 	bl	1c788 <log_hdr_len>
    return log_console_append_body(log, buf, (uint8_t *)buf + hdr_len,
   1ca56:	1a33      	subs	r3, r6, r0
   1ca58:	1822      	adds	r2, r4, r0
   1ca5a:	4621      	mov	r1, r4
   1ca5c:	4628      	mov	r0, r5
   1ca5e:	f7ff ffd3 	bl	1ca08 <log_console_append_body>
}
   1ca62:	bd70      	pop	{r4, r5, r6, pc}

0001ca64 <log_console_get>:
}
   1ca64:	4800      	ldr	r0, [pc, #0]	; (1ca68 <log_console_get+0x4>)
   1ca66:	4770      	bx	lr
   1ca68:	10003a50 	.word	0x10003a50

0001ca6c <log_console_init>:
    .log_flush = log_console_flush,
};

void
log_console_init(void)
{
   1ca6c:	b510      	push	{r4, lr}
   1ca6e:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1ca70:	4b12      	ldr	r3, [pc, #72]	; (1cabc <log_console_init+0x50>)
   1ca72:	781b      	ldrb	r3, [r3, #0]
   1ca74:	b153      	cbz	r3, 1ca8c <log_console_init+0x20>

    rc = log_register("console", &log_console, &log_console_handler, NULL,
   1ca76:	2301      	movs	r3, #1
   1ca78:	9300      	str	r3, [sp, #0]
   1ca7a:	2300      	movs	r3, #0
   1ca7c:	4a10      	ldr	r2, [pc, #64]	; (1cac0 <log_console_init+0x54>)
   1ca7e:	4911      	ldr	r1, [pc, #68]	; (1cac4 <log_console_init+0x58>)
   1ca80:	4811      	ldr	r0, [pc, #68]	; (1cac8 <log_console_init+0x5c>)
   1ca82:	f7ff fed9 	bl	1c838 <log_register>
                      MYNEWT_VAL(LOG_LEVEL));
    SYSINIT_PANIC_ASSERT(rc == 0);
   1ca86:	b958      	cbnz	r0, 1caa0 <log_console_init+0x34>
}
   1ca88:	b002      	add	sp, #8
   1ca8a:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1ca8c:	f7f7 fe32 	bl	146f4 <hal_debugger_connected>
   1ca90:	b100      	cbz	r0, 1ca94 <log_console_init+0x28>
   1ca92:	be01      	bkpt	0x0001
   1ca94:	2300      	movs	r3, #0
   1ca96:	461a      	mov	r2, r3
   1ca98:	4619      	mov	r1, r3
   1ca9a:	4618      	mov	r0, r3
   1ca9c:	f7fc f948 	bl	18d30 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1caa0:	f7f7 fe28 	bl	146f4 <hal_debugger_connected>
   1caa4:	b100      	cbz	r0, 1caa8 <log_console_init+0x3c>
   1caa6:	be01      	bkpt	0x0001
   1caa8:	2000      	movs	r0, #0
   1caaa:	9000      	str	r0, [sp, #0]
   1caac:	4b07      	ldr	r3, [pc, #28]	; (1cacc <log_console_init+0x60>)
   1caae:	681c      	ldr	r4, [r3, #0]
   1cab0:	4603      	mov	r3, r0
   1cab2:	4602      	mov	r2, r0
   1cab4:	4601      	mov	r1, r0
   1cab6:	47a0      	blx	r4
}
   1cab8:	e7e6      	b.n	1ca88 <log_console_init+0x1c>
   1caba:	bf00      	nop
   1cabc:	10003fd8 	.word	0x10003fd8
   1cac0:	00038624 	.word	0x00038624
   1cac4:	10003a50 	.word	0x10003a50
   1cac8:	0003861c 	.word	0x0003861c
   1cacc:	100006b4 	.word	0x100006b4

0001cad0 <log_level_get>:
uint8_t
log_level_get(uint8_t module)
{
    uint8_t byte;

    byte = log_level_map[module / 2];
   1cad0:	0843      	lsrs	r3, r0, #1
   1cad2:	4a05      	ldr	r2, [pc, #20]	; (1cae8 <log_level_get+0x18>)
   1cad4:	5cd3      	ldrb	r3, [r2, r3]
    if (module % 2 == 0) {
   1cad6:	f010 0f01 	tst.w	r0, #1
   1cada:	d102      	bne.n	1cae2 <log_level_get+0x12>
        return byte & 0x0f;
   1cadc:	f003 000f 	and.w	r0, r3, #15
   1cae0:	4770      	bx	lr
    } else {
        return byte >> 4;
   1cae2:	0918      	lsrs	r0, r3, #4
    }
}
   1cae4:	4770      	bx	lr
   1cae6:	bf00      	nop
   1cae8:	10003a6c 	.word	0x10003a6c

0001caec <modlog_find_by_module>:
    return cur;
}

static struct modlog_mapping *
modlog_find_by_module(uint8_t module, struct modlog_mapping **out_prev)
{
   1caec:	b410      	push	{r4}
   1caee:	4602      	mov	r2, r0
    struct modlog_mapping *prev;
    struct modlog_mapping *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1caf0:	4b07      	ldr	r3, [pc, #28]	; (1cb10 <modlog_find_by_module+0x24>)
   1caf2:	6818      	ldr	r0, [r3, #0]
    prev = NULL;
   1caf4:	2400      	movs	r4, #0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1caf6:	e001      	b.n	1cafc <modlog_find_by_module+0x10>
        if (cur->desc.module > module) {
            cur = NULL;
            break;
        }

        prev = cur;
   1caf8:	4604      	mov	r4, r0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1cafa:	6800      	ldr	r0, [r0, #0]
   1cafc:	b120      	cbz	r0, 1cb08 <modlog_find_by_module+0x1c>
        if (cur->desc.module == module) {
   1cafe:	7a43      	ldrb	r3, [r0, #9]
   1cb00:	4293      	cmp	r3, r2
   1cb02:	d001      	beq.n	1cb08 <modlog_find_by_module+0x1c>
        if (cur->desc.module > module) {
   1cb04:	d9f8      	bls.n	1caf8 <modlog_find_by_module+0xc>
            cur = NULL;
   1cb06:	2000      	movs	r0, #0
    }

    if (out_prev != NULL) {
   1cb08:	b101      	cbz	r1, 1cb0c <modlog_find_by_module+0x20>
        *out_prev = prev;
   1cb0a:	600c      	str	r4, [r1, #0]
    }

    return cur;
}
   1cb0c:	bc10      	pop	{r4}
   1cb0e:	4770      	bx	lr
   1cb10:	10003bcc 	.word	0x10003bcc

0001cb14 <modlog_insert>:

static void
modlog_insert(struct modlog_mapping *mm)
{
   1cb14:	b510      	push	{r4, lr}
   1cb16:	b082      	sub	sp, #8
   1cb18:	4604      	mov	r4, r0
    struct modlog_mapping *prev;

    modlog_find_by_module(mm->desc.module, &prev);
   1cb1a:	a901      	add	r1, sp, #4
   1cb1c:	7a40      	ldrb	r0, [r0, #9]
   1cb1e:	f7ff ffe5 	bl	1caec <modlog_find_by_module>
    if (prev == NULL) {
   1cb22:	9b01      	ldr	r3, [sp, #4]
   1cb24:	b143      	cbz	r3, 1cb38 <modlog_insert+0x24>
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
    } else {
        SLIST_INSERT_AFTER(prev, mm, next);
   1cb26:	681b      	ldr	r3, [r3, #0]
   1cb28:	6023      	str	r3, [r4, #0]
   1cb2a:	9b01      	ldr	r3, [sp, #4]
   1cb2c:	601c      	str	r4, [r3, #0]
    }

    if (mm->desc.module == MODLOG_MODULE_DFLT) {
   1cb2e:	7a63      	ldrb	r3, [r4, #9]
   1cb30:	2bff      	cmp	r3, #255	; 0xff
   1cb32:	d006      	beq.n	1cb42 <modlog_insert+0x2e>
        modlog_first_dflt = mm;
    }
}
   1cb34:	b002      	add	sp, #8
   1cb36:	bd10      	pop	{r4, pc}
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
   1cb38:	4b03      	ldr	r3, [pc, #12]	; (1cb48 <modlog_insert+0x34>)
   1cb3a:	681a      	ldr	r2, [r3, #0]
   1cb3c:	6022      	str	r2, [r4, #0]
   1cb3e:	601c      	str	r4, [r3, #0]
   1cb40:	e7f5      	b.n	1cb2e <modlog_insert+0x1a>
        modlog_first_dflt = mm;
   1cb42:	4b02      	ldr	r3, [pc, #8]	; (1cb4c <modlog_insert+0x38>)
   1cb44:	601c      	str	r4, [r3, #0]
}
   1cb46:	e7f5      	b.n	1cb34 <modlog_insert+0x20>
   1cb48:	10003bcc 	.word	0x10003bcc
   1cb4c:	10003aec 	.word	0x10003aec

0001cb50 <modlog_alloc>:
{
   1cb50:	b508      	push	{r3, lr}
    mm = os_memblock_get(&modlog_mapping_pool);
   1cb52:	4805      	ldr	r0, [pc, #20]	; (1cb68 <modlog_alloc+0x18>)
   1cb54:	f7fd f97a 	bl	19e4c <os_memblock_get>
    if (mm != NULL) {
   1cb58:	4603      	mov	r3, r0
   1cb5a:	b118      	cbz	r0, 1cb64 <modlog_alloc+0x14>
        *mm = (struct modlog_mapping) { 0 };
   1cb5c:	2200      	movs	r2, #0
   1cb5e:	6002      	str	r2, [r0, #0]
   1cb60:	6042      	str	r2, [r0, #4]
   1cb62:	6082      	str	r2, [r0, #8]
}
   1cb64:	4618      	mov	r0, r3
   1cb66:	bd08      	pop	{r3, pc}
   1cb68:	10003bb0 	.word	0x10003bb0

0001cb6c <modlog_infer_handle>:
{
   1cb6c:	b508      	push	{r3, lr}
    off = (uintptr_t)mm - (uintptr_t)modlog_mapping_buf;
   1cb6e:	4a13      	ldr	r2, [pc, #76]	; (1cbbc <modlog_infer_handle+0x50>)
   1cb70:	1a82      	subs	r2, r0, r2
    idx = off / elem_sz;
   1cb72:	4813      	ldr	r0, [pc, #76]	; (1cbc0 <modlog_infer_handle+0x54>)
   1cb74:	fba0 3002 	umull	r3, r0, r0, r2
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   1cb78:	2abf      	cmp	r2, #191	; 0xbf
   1cb7a:	d80b      	bhi.n	1cb94 <modlog_infer_handle+0x28>
   1cb7c:	08c0      	lsrs	r0, r0, #3
    assert(off % elem_sz == 0);
   1cb7e:	4b10      	ldr	r3, [pc, #64]	; (1cbc0 <modlog_infer_handle+0x54>)
   1cb80:	fba3 1302 	umull	r1, r3, r3, r2
   1cb84:	08db      	lsrs	r3, r3, #3
   1cb86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1cb8a:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   1cb8e:	d10b      	bne.n	1cba8 <modlog_infer_handle+0x3c>
}
   1cb90:	b2c0      	uxtb	r0, r0
   1cb92:	bd08      	pop	{r3, pc}
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   1cb94:	f7f7 fdae 	bl	146f4 <hal_debugger_connected>
   1cb98:	b100      	cbz	r0, 1cb9c <modlog_infer_handle+0x30>
   1cb9a:	be01      	bkpt	0x0001
   1cb9c:	2300      	movs	r3, #0
   1cb9e:	461a      	mov	r2, r3
   1cba0:	4619      	mov	r1, r3
   1cba2:	4618      	mov	r0, r3
   1cba4:	f7fc f8c4 	bl	18d30 <__assert_func>
    assert(off % elem_sz == 0);
   1cba8:	f7f7 fda4 	bl	146f4 <hal_debugger_connected>
   1cbac:	b100      	cbz	r0, 1cbb0 <modlog_infer_handle+0x44>
   1cbae:	be01      	bkpt	0x0001
   1cbb0:	2300      	movs	r3, #0
   1cbb2:	461a      	mov	r2, r3
   1cbb4:	4619      	mov	r1, r3
   1cbb6:	4618      	mov	r0, r3
   1cbb8:	f7fc f8ba 	bl	18d30 <__assert_func>
   1cbbc:	10003af0 	.word	0x10003af0
   1cbc0:	aaaaaaab 	.word	0xaaaaaaab

0001cbc4 <modlog_register_no_lock>:
modlog_register_no_lock(uint8_t module, struct log *log, uint8_t min_level,
                        uint8_t *out_handle)
{
    struct modlog_mapping *mm;

    if (log == NULL) {
   1cbc4:	b1c9      	cbz	r1, 1cbfa <modlog_register_no_lock+0x36>
{
   1cbc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cbca:	4607      	mov	r7, r0
   1cbcc:	4616      	mov	r6, r2
   1cbce:	461d      	mov	r5, r3
   1cbd0:	4688      	mov	r8, r1
        return SYS_EINVAL;
    }

    mm = modlog_alloc();
   1cbd2:	f7ff ffbd 	bl	1cb50 <modlog_alloc>
    if (mm == NULL) {
   1cbd6:	4604      	mov	r4, r0
   1cbd8:	b190      	cbz	r0, 1cc00 <modlog_register_no_lock+0x3c>
        return SYS_ENOMEM;
    }

    mm->desc = (struct modlog_desc) {
        .log = log,
        .handle = modlog_infer_handle(mm),
   1cbda:	f7ff ffc7 	bl	1cb6c <modlog_infer_handle>
    mm->desc = (struct modlog_desc) {
   1cbde:	f8c4 8004 	str.w	r8, [r4, #4]
   1cbe2:	7220      	strb	r0, [r4, #8]
   1cbe4:	7267      	strb	r7, [r4, #9]
   1cbe6:	72a6      	strb	r6, [r4, #10]
        .module = module,
        .min_level = min_level,
    };

    modlog_insert(mm);
   1cbe8:	4620      	mov	r0, r4
   1cbea:	f7ff ff93 	bl	1cb14 <modlog_insert>

    if (out_handle != NULL) {
   1cbee:	b155      	cbz	r5, 1cc06 <modlog_register_no_lock+0x42>
        *out_handle = mm->desc.handle;
   1cbf0:	7a23      	ldrb	r3, [r4, #8]
   1cbf2:	702b      	strb	r3, [r5, #0]
    }

    return 0;
   1cbf4:	2000      	movs	r0, #0
}
   1cbf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   1cbfa:	f06f 0001 	mvn.w	r0, #1
}
   1cbfe:	4770      	bx	lr
        return SYS_ENOMEM;
   1cc00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cc04:	e7f7      	b.n	1cbf6 <modlog_register_no_lock+0x32>
    return 0;
   1cc06:	2000      	movs	r0, #0
   1cc08:	e7f5      	b.n	1cbf6 <modlog_register_no_lock+0x32>

0001cc0a <modlog_append_one>:
}

static int
modlog_append_one(struct modlog_mapping *mm, uint8_t module, uint8_t level,
                  uint8_t etype, void *data, uint16_t len)
{
   1cc0a:	b510      	push	{r4, lr}
   1cc0c:	b082      	sub	sp, #8
    int rc;

    if (level >= mm->desc.min_level) {
   1cc0e:	7a84      	ldrb	r4, [r0, #10]
   1cc10:	4294      	cmp	r4, r2
   1cc12:	d902      	bls.n	1cc1a <modlog_append_one+0x10>
    } else {
        LOG_STATS_INC(mm->desc.log, writes);
        LOG_STATS_INC(mm->desc.log, drops);
    }

    return 0;
   1cc14:	2000      	movs	r0, #0
}
   1cc16:	b002      	add	sp, #8
   1cc18:	bd10      	pop	{r4, pc}
        rc = log_append_body(mm->desc.log, module, level, etype, data, len);
   1cc1a:	f8bd 4014 	ldrh.w	r4, [sp, #20]
   1cc1e:	9401      	str	r4, [sp, #4]
   1cc20:	9c04      	ldr	r4, [sp, #16]
   1cc22:	9400      	str	r4, [sp, #0]
   1cc24:	6840      	ldr	r0, [r0, #4]
   1cc26:	f7ff fdb7 	bl	1c798 <log_append_body>
        if (rc != 0) {
   1cc2a:	2800      	cmp	r0, #0
   1cc2c:	d0f3      	beq.n	1cc16 <modlog_append_one+0xc>
            return SYS_EIO;
   1cc2e:	f06f 0004 	mvn.w	r0, #4
   1cc32:	e7f0      	b.n	1cc16 <modlog_append_one+0xc>

0001cc34 <modlog_append_no_lock>:

static int
modlog_append_no_lock(uint8_t module, uint8_t level, uint8_t etype,
                      void *data, uint16_t len)
{
   1cc34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cc38:	b083      	sub	sp, #12
   1cc3a:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
    struct modlog_mapping *mm;
    int rc;

    if (module == MODLOG_MODULE_DFLT) {
   1cc3e:	28ff      	cmp	r0, #255	; 0xff
   1cc40:	d030      	beq.n	1cca4 <modlog_append_no_lock+0x70>
   1cc42:	4605      	mov	r5, r0
   1cc44:	460e      	mov	r6, r1
   1cc46:	4617      	mov	r7, r2
   1cc48:	4698      	mov	r8, r3
        return SYS_EINVAL;
    }

    mm = modlog_find_by_module(module, NULL);
   1cc4a:	2100      	movs	r1, #0
   1cc4c:	f7ff ff4e 	bl	1caec <modlog_find_by_module>
    if (mm != NULL) {
   1cc50:	4604      	mov	r4, r0
   1cc52:	b988      	cbnz	r0, 1cc78 <modlog_append_no_lock+0x44>
        }
        return 0;
    }

    /* No mappings match the specified module; write to the default set. */
    for (mm = modlog_first_dflt;
   1cc54:	4b17      	ldr	r3, [pc, #92]	; (1ccb4 <modlog_append_no_lock+0x80>)
   1cc56:	681c      	ldr	r4, [r3, #0]
   1cc58:	b314      	cbz	r4, 1cca0 <modlog_append_no_lock+0x6c>
         mm != NULL;
         mm = SLIST_NEXT(mm, next)) {

        rc = modlog_append_one(mm, module, level, etype, data, len);
   1cc5a:	f8cd 9004 	str.w	r9, [sp, #4]
   1cc5e:	f8cd 8000 	str.w	r8, [sp]
   1cc62:	463b      	mov	r3, r7
   1cc64:	4632      	mov	r2, r6
   1cc66:	4629      	mov	r1, r5
   1cc68:	4620      	mov	r0, r4
   1cc6a:	f7ff ffce 	bl	1cc0a <modlog_append_one>
        if (rc != 0) {
   1cc6e:	4603      	mov	r3, r0
   1cc70:	b9e0      	cbnz	r0, 1ccac <modlog_append_no_lock+0x78>
         mm = SLIST_NEXT(mm, next)) {
   1cc72:	6824      	ldr	r4, [r4, #0]
   1cc74:	e7f0      	b.n	1cc58 <modlog_append_no_lock+0x24>
            mm = SLIST_NEXT(mm, next);
   1cc76:	6824      	ldr	r4, [r4, #0]
        while (mm != NULL && mm->desc.module == module) {
   1cc78:	b1bc      	cbz	r4, 1ccaa <modlog_append_no_lock+0x76>
   1cc7a:	7a60      	ldrb	r0, [r4, #9]
   1cc7c:	42a8      	cmp	r0, r5
   1cc7e:	d10d      	bne.n	1cc9c <modlog_append_no_lock+0x68>
            rc = modlog_append_one(mm, module, level, etype, data, len);
   1cc80:	f8cd 9004 	str.w	r9, [sp, #4]
   1cc84:	f8cd 8000 	str.w	r8, [sp]
   1cc88:	463b      	mov	r3, r7
   1cc8a:	4632      	mov	r2, r6
   1cc8c:	4629      	mov	r1, r5
   1cc8e:	4620      	mov	r0, r4
   1cc90:	f7ff ffbb 	bl	1cc0a <modlog_append_one>
            if (rc != 0) {
   1cc94:	4603      	mov	r3, r0
   1cc96:	2800      	cmp	r0, #0
   1cc98:	d0ed      	beq.n	1cc76 <modlog_append_no_lock+0x42>
   1cc9a:	e007      	b.n	1ccac <modlog_append_no_lock+0x78>
        return 0;
   1cc9c:	2300      	movs	r3, #0
   1cc9e:	e005      	b.n	1ccac <modlog_append_no_lock+0x78>
            return rc;
        }
    }

    return 0;
   1cca0:	2300      	movs	r3, #0
   1cca2:	e003      	b.n	1ccac <modlog_append_no_lock+0x78>
        return SYS_EINVAL;
   1cca4:	f06f 0301 	mvn.w	r3, #1
   1cca8:	e000      	b.n	1ccac <modlog_append_no_lock+0x78>
        return 0;
   1ccaa:	2300      	movs	r3, #0
}
   1ccac:	4618      	mov	r0, r3
   1ccae:	b003      	add	sp, #12
   1ccb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ccb4:	10003aec 	.word	0x10003aec

0001ccb8 <modlog_register>:
}

int
modlog_register(uint8_t module, struct log *log, uint8_t min_level,
                uint8_t *out_handle)
{
   1ccb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ccbc:	4604      	mov	r4, r0
   1ccbe:	460d      	mov	r5, r1
   1ccc0:	4616      	mov	r6, r2
   1ccc2:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_write(&modlog_rwl);
   1ccc4:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1cce8 <modlog_register+0x30>
   1ccc8:	4640      	mov	r0, r8
   1ccca:	f001 fdc4 	bl	1e856 <rwlock_acquire_write>
    rc = modlog_register_no_lock(module, log, min_level, out_handle);
   1ccce:	463b      	mov	r3, r7
   1ccd0:	4632      	mov	r2, r6
   1ccd2:	4629      	mov	r1, r5
   1ccd4:	4620      	mov	r0, r4
   1ccd6:	f7ff ff75 	bl	1cbc4 <modlog_register_no_lock>
   1ccda:	4604      	mov	r4, r0
    rwlock_release_write(&modlog_rwl);
   1ccdc:	4640      	mov	r0, r8
   1ccde:	f001 fde4 	bl	1e8aa <rwlock_release_write>

    return rc;
}
   1cce2:	4620      	mov	r0, r4
   1cce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cce8:	10003bd0 	.word	0x10003bd0

0001ccec <modlog_append>:
}

int
modlog_append(uint8_t module, uint8_t level, uint8_t etype,
              void *data, uint16_t len)
{
   1ccec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ccf0:	b082      	sub	sp, #8
   1ccf2:	4604      	mov	r4, r0
   1ccf4:	460d      	mov	r5, r1
   1ccf6:	4616      	mov	r6, r2
   1ccf8:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_read(&modlog_rwl);
   1ccfa:	f8df 802c 	ldr.w	r8, [pc, #44]	; 1cd28 <modlog_append+0x3c>
   1ccfe:	4640      	mov	r0, r8
   1cd00:	f001 fd69 	bl	1e7d6 <rwlock_acquire_read>
    rc = modlog_append_no_lock(module, level, etype, data, len);
   1cd04:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1cd08:	9300      	str	r3, [sp, #0]
   1cd0a:	463b      	mov	r3, r7
   1cd0c:	4632      	mov	r2, r6
   1cd0e:	4629      	mov	r1, r5
   1cd10:	4620      	mov	r0, r4
   1cd12:	f7ff ff8f 	bl	1cc34 <modlog_append_no_lock>
   1cd16:	4604      	mov	r4, r0
    rwlock_release_read(&modlog_rwl);
   1cd18:	4640      	mov	r0, r8
   1cd1a:	f001 fd89 	bl	1e830 <rwlock_release_read>

    return rc;
}
   1cd1e:	4620      	mov	r0, r4
   1cd20:	b002      	add	sp, #8
   1cd22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cd26:	bf00      	nop
   1cd28:	10003bd0 	.word	0x10003bd0

0001cd2c <modlog_printf>:
    return rc;
}

void
modlog_printf(uint8_t module, uint8_t level, const char *msg, ...)
{
   1cd2c:	b40c      	push	{r2, r3}
   1cd2e:	b530      	push	{r4, r5, lr}
   1cd30:	b0a5      	sub	sp, #148	; 0x94
   1cd32:	4604      	mov	r4, r0
   1cd34:	460d      	mov	r5, r1
   1cd36:	ab28      	add	r3, sp, #160	; 0xa0
   1cd38:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    char buf[MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)];
    int len;

    va_start(args, msg);
   1cd3c:	9323      	str	r3, [sp, #140]	; 0x8c
    len = vsnprintf(buf, MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN), msg, args);
   1cd3e:	2180      	movs	r1, #128	; 0x80
   1cd40:	a803      	add	r0, sp, #12
   1cd42:	f7fe fb69 	bl	1b418 <vsnprintf>
    va_end(args);

    if (len >= MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)) {
   1cd46:	287f      	cmp	r0, #127	; 0x7f
   1cd48:	dd00      	ble.n	1cd4c <modlog_printf+0x20>
        len = MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN) - 1;
   1cd4a:	207f      	movs	r0, #127	; 0x7f
    }

    modlog_append(module, level, LOG_ETYPE_STRING, buf, len);
   1cd4c:	b280      	uxth	r0, r0
   1cd4e:	9000      	str	r0, [sp, #0]
   1cd50:	ab03      	add	r3, sp, #12
   1cd52:	2200      	movs	r2, #0
   1cd54:	4629      	mov	r1, r5
   1cd56:	4620      	mov	r0, r4
   1cd58:	f7ff ffc8 	bl	1ccec <modlog_append>
}
   1cd5c:	b025      	add	sp, #148	; 0x94
   1cd5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1cd62:	b002      	add	sp, #8
   1cd64:	4770      	bx	lr
	...

0001cd68 <modlog_init>:

void
modlog_init(void)
{
   1cd68:	b510      	push	{r4, lr}
   1cd6a:	b082      	sub	sp, #8
    int rc;

    SYSINIT_ASSERT_ACTIVE();
   1cd6c:	4b28      	ldr	r3, [pc, #160]	; (1ce10 <modlog_init+0xa8>)
   1cd6e:	781b      	ldrb	r3, [r3, #0]
   1cd70:	b1e3      	cbz	r3, 1cdac <modlog_init+0x44>

    rc = os_mempool_init(&modlog_mapping_pool, MYNEWT_VAL(MODLOG_MAX_MAPPINGS),
   1cd72:	4b28      	ldr	r3, [pc, #160]	; (1ce14 <modlog_init+0xac>)
   1cd74:	9300      	str	r3, [sp, #0]
   1cd76:	4b28      	ldr	r3, [pc, #160]	; (1ce18 <modlog_init+0xb0>)
   1cd78:	220c      	movs	r2, #12
   1cd7a:	2110      	movs	r1, #16
   1cd7c:	4827      	ldr	r0, [pc, #156]	; (1ce1c <modlog_init+0xb4>)
   1cd7e:	f7fd f821 	bl	19dc4 <os_mempool_init>
                         sizeof (struct modlog_mapping), modlog_mapping_buf,
                         "modlog_mapping_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   1cd82:	b9e8      	cbnz	r0, 1cdc0 <modlog_init+0x58>

    SLIST_INIT(&modlog_mappings);
   1cd84:	2300      	movs	r3, #0
   1cd86:	4a26      	ldr	r2, [pc, #152]	; (1ce20 <modlog_init+0xb8>)
   1cd88:	6013      	str	r3, [r2, #0]
    modlog_first_dflt = NULL;
   1cd8a:	4a26      	ldr	r2, [pc, #152]	; (1ce24 <modlog_init+0xbc>)
   1cd8c:	6013      	str	r3, [r2, #0]

    rc = rwlock_init(&modlog_rwl);
   1cd8e:	4826      	ldr	r0, [pc, #152]	; (1ce28 <modlog_init+0xc0>)
   1cd90:	f001 fd9a 	bl	1e8c8 <rwlock_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1cd94:	bb08      	cbnz	r0, 1cdda <modlog_init+0x72>

    /* Register the default console mapping if configured. */
#if MYNEWT_VAL(MODLOG_CONSOLE_DFLT)
    rc = modlog_register(MODLOG_MODULE_DFLT, log_console_get(),
   1cd96:	f7ff fe65 	bl	1ca64 <log_console_get>
   1cd9a:	4601      	mov	r1, r0
   1cd9c:	2300      	movs	r3, #0
   1cd9e:	461a      	mov	r2, r3
   1cda0:	20ff      	movs	r0, #255	; 0xff
   1cda2:	f7ff ff89 	bl	1ccb8 <modlog_register>
                         LOG_LEVEL_DEBUG, NULL);
    SYSINIT_PANIC_ASSERT(rc == 0);
   1cda6:	bb28      	cbnz	r0, 1cdf4 <modlog_init+0x8c>
#endif
}
   1cda8:	b002      	add	sp, #8
   1cdaa:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1cdac:	f7f7 fca2 	bl	146f4 <hal_debugger_connected>
   1cdb0:	b100      	cbz	r0, 1cdb4 <modlog_init+0x4c>
   1cdb2:	be01      	bkpt	0x0001
   1cdb4:	2300      	movs	r3, #0
   1cdb6:	461a      	mov	r2, r3
   1cdb8:	4619      	mov	r1, r3
   1cdba:	4618      	mov	r0, r3
   1cdbc:	f7fb ffb8 	bl	18d30 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1cdc0:	f7f7 fc98 	bl	146f4 <hal_debugger_connected>
   1cdc4:	b100      	cbz	r0, 1cdc8 <modlog_init+0x60>
   1cdc6:	be01      	bkpt	0x0001
   1cdc8:	2000      	movs	r0, #0
   1cdca:	9000      	str	r0, [sp, #0]
   1cdcc:	4b17      	ldr	r3, [pc, #92]	; (1ce2c <modlog_init+0xc4>)
   1cdce:	681c      	ldr	r4, [r3, #0]
   1cdd0:	4603      	mov	r3, r0
   1cdd2:	4602      	mov	r2, r0
   1cdd4:	4601      	mov	r1, r0
   1cdd6:	47a0      	blx	r4
   1cdd8:	e7d4      	b.n	1cd84 <modlog_init+0x1c>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1cdda:	f7f7 fc8b 	bl	146f4 <hal_debugger_connected>
   1cdde:	b100      	cbz	r0, 1cde2 <modlog_init+0x7a>
   1cde0:	be01      	bkpt	0x0001
   1cde2:	2000      	movs	r0, #0
   1cde4:	9000      	str	r0, [sp, #0]
   1cde6:	4b11      	ldr	r3, [pc, #68]	; (1ce2c <modlog_init+0xc4>)
   1cde8:	681c      	ldr	r4, [r3, #0]
   1cdea:	4603      	mov	r3, r0
   1cdec:	4602      	mov	r2, r0
   1cdee:	4601      	mov	r1, r0
   1cdf0:	47a0      	blx	r4
   1cdf2:	e7d0      	b.n	1cd96 <modlog_init+0x2e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1cdf4:	f7f7 fc7e 	bl	146f4 <hal_debugger_connected>
   1cdf8:	b100      	cbz	r0, 1cdfc <modlog_init+0x94>
   1cdfa:	be01      	bkpt	0x0001
   1cdfc:	2000      	movs	r0, #0
   1cdfe:	9000      	str	r0, [sp, #0]
   1ce00:	4b0a      	ldr	r3, [pc, #40]	; (1ce2c <modlog_init+0xc4>)
   1ce02:	681c      	ldr	r4, [r3, #0]
   1ce04:	4603      	mov	r3, r0
   1ce06:	4602      	mov	r2, r0
   1ce08:	4601      	mov	r1, r0
   1ce0a:	47a0      	blx	r4
}
   1ce0c:	e7cc      	b.n	1cda8 <modlog_init+0x40>
   1ce0e:	bf00      	nop
   1ce10:	10003fd8 	.word	0x10003fd8
   1ce14:	00038650 	.word	0x00038650
   1ce18:	10003af0 	.word	0x10003af0
   1ce1c:	10003bb0 	.word	0x10003bb0
   1ce20:	10003bcc 	.word	0x10003bcc
   1ce24:	10003aec 	.word	0x10003aec
   1ce28:	10003bd0 	.word	0x10003bd0
   1ce2c:	100006b4 	.word	0x100006b4

0001ce30 <get_prompt>:
    console_line_queue_set(shell_evq);
}

static const char *
get_prompt(void)
{
   1ce30:	b508      	push	{r3, lr}
    const char *str;

    if (app_prompt_handler) {
   1ce32:	4b09      	ldr	r3, [pc, #36]	; (1ce58 <get_prompt+0x28>)
   1ce34:	681b      	ldr	r3, [r3, #0]
   1ce36:	b113      	cbz	r3, 1ce3e <get_prompt+0xe>

        str = app_prompt_handler();
   1ce38:	4798      	blx	r3
        if (str) {
   1ce3a:	b100      	cbz	r0, 1ce3e <get_prompt+0xe>
    if (default_module != -1) {
        return shell_modules[default_module].name;
    }

    return prompt;
}
   1ce3c:	bd08      	pop	{r3, pc}
    if (default_module != -1) {
   1ce3e:	4b07      	ldr	r3, [pc, #28]	; (1ce5c <get_prompt+0x2c>)
   1ce40:	681b      	ldr	r3, [r3, #0]
   1ce42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1ce46:	d003      	beq.n	1ce50 <get_prompt+0x20>
        return shell_modules[default_module].name;
   1ce48:	4a05      	ldr	r2, [pc, #20]	; (1ce60 <get_prompt+0x30>)
   1ce4a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   1ce4e:	e7f5      	b.n	1ce3c <get_prompt+0xc>
    return prompt;
   1ce50:	4b04      	ldr	r3, [pc, #16]	; (1ce64 <get_prompt+0x34>)
   1ce52:	6818      	ldr	r0, [r3, #0]
   1ce54:	e7f2      	b.n	1ce3c <get_prompt+0xc>
   1ce56:	bf00      	nop
   1ce58:	10003c04 	.word	0x10003c04
   1ce5c:	100006a8 	.word	0x100006a8
   1ce60:	10003f88 	.word	0x10003f88
   1ce64:	10003f64 	.word	0x10003f64

0001ce68 <print_module_commands>:
    }
}

static void
print_module_commands(const int module, struct streamer *streamer)
{
   1ce68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ce6a:	4606      	mov	r6, r0
   1ce6c:	460d      	mov	r5, r1
    const struct shell_module *shell_module = &shell_modules[module];
    int i;

    streamer_printf(streamer, "help\n");
   1ce6e:	4914      	ldr	r1, [pc, #80]	; (1cec0 <print_module_commands+0x58>)
   1ce70:	4628      	mov	r0, r5
   1ce72:	f001 fd46 	bl	1e902 <streamer_printf>

    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   1ce76:	2400      	movs	r4, #0
   1ce78:	e008      	b.n	1ce8c <print_module_commands+0x24>
        streamer_printf(streamer, "%-30s", shell_module->commands[i].sc_cmd);
        if (shell_module->commands[i].help &&
            shell_module->commands[i].help->summary) {
        
            streamer_printf(streamer, "%s",
   1ce7a:	4912      	ldr	r1, [pc, #72]	; (1cec4 <print_module_commands+0x5c>)
   1ce7c:	4628      	mov	r0, r5
   1ce7e:	f001 fd40 	bl	1e902 <streamer_printf>
                            shell_module->commands[i].help->summary);
        }
        streamer_printf(streamer, "\n");
   1ce82:	4911      	ldr	r1, [pc, #68]	; (1cec8 <print_module_commands+0x60>)
   1ce84:	4628      	mov	r0, r5
   1ce86:	f001 fd3c 	bl	1e902 <streamer_printf>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   1ce8a:	3401      	adds	r4, #1
   1ce8c:	4b0f      	ldr	r3, [pc, #60]	; (1cecc <print_module_commands+0x64>)
   1ce8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1ce92:	685b      	ldr	r3, [r3, #4]
   1ce94:	0127      	lsls	r7, r4, #4
   1ce96:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1ce9a:	689a      	ldr	r2, [r3, #8]
   1ce9c:	b17a      	cbz	r2, 1cebe <print_module_commands+0x56>
        streamer_printf(streamer, "%-30s", shell_module->commands[i].sc_cmd);
   1ce9e:	490c      	ldr	r1, [pc, #48]	; (1ced0 <print_module_commands+0x68>)
   1cea0:	4628      	mov	r0, r5
   1cea2:	f001 fd2e 	bl	1e902 <streamer_printf>
        if (shell_module->commands[i].help &&
   1cea6:	4b09      	ldr	r3, [pc, #36]	; (1cecc <print_module_commands+0x64>)
   1cea8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1ceac:	685b      	ldr	r3, [r3, #4]
   1ceae:	443b      	add	r3, r7
   1ceb0:	68db      	ldr	r3, [r3, #12]
   1ceb2:	2b00      	cmp	r3, #0
   1ceb4:	d0e5      	beq.n	1ce82 <print_module_commands+0x1a>
            shell_module->commands[i].help->summary) {
   1ceb6:	681a      	ldr	r2, [r3, #0]
        if (shell_module->commands[i].help &&
   1ceb8:	2a00      	cmp	r2, #0
   1ceba:	d1de      	bne.n	1ce7a <print_module_commands+0x12>
   1cebc:	e7e1      	b.n	1ce82 <print_module_commands+0x1a>
    }
}
   1cebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cec0:	00038664 	.word	0x00038664
   1cec4:	00034c40 	.word	0x00034c40
   1cec8:	00034744 	.word	0x00034744
   1cecc:	10003f88 	.word	0x10003f88
   1ced0:	0003866c 	.word	0x0003866c

0001ced4 <print_modules>:
{
   1ced4:	b538      	push	{r3, r4, r5, lr}
   1ced6:	4605      	mov	r5, r0
    for (module = 0; module < num_of_shell_entities; module++) {
   1ced8:	2400      	movs	r4, #0
   1ceda:	e007      	b.n	1ceec <print_modules+0x18>
        streamer_printf(streamer, "%s\n", shell_modules[module].name);
   1cedc:	4b06      	ldr	r3, [pc, #24]	; (1cef8 <print_modules+0x24>)
   1cede:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   1cee2:	4906      	ldr	r1, [pc, #24]	; (1cefc <print_modules+0x28>)
   1cee4:	4628      	mov	r0, r5
   1cee6:	f001 fd0c 	bl	1e902 <streamer_printf>
    for (module = 0; module < num_of_shell_entities; module++) {
   1ceea:	3401      	adds	r4, #1
   1ceec:	4b04      	ldr	r3, [pc, #16]	; (1cf00 <print_modules+0x2c>)
   1ceee:	681b      	ldr	r3, [r3, #0]
   1cef0:	429c      	cmp	r4, r3
   1cef2:	d3f3      	bcc.n	1cedc <print_modules+0x8>
}
   1cef4:	bd38      	pop	{r3, r4, r5, pc}
   1cef6:	bf00      	nop
   1cef8:	10003f88 	.word	0x10003f88
   1cefc:	00038924 	.word	0x00038924
   1cf00:	10003f60 	.word	0x10003f60

0001cf04 <print_command_params>:
{
   1cf04:	b570      	push	{r4, r5, r6, lr}
	const struct shell_cmd *shell_cmd = &shell_module->commands[command];
   1cf06:	4b0e      	ldr	r3, [pc, #56]	; (1cf40 <print_command_params+0x3c>)
   1cf08:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   1cf0c:	685d      	ldr	r5, [r3, #4]
   1cf0e:	eb05 1501 	add.w	r5, r5, r1, lsl #4
	if (!(shell_cmd->help && shell_cmd->help->params)) {
   1cf12:	68eb      	ldr	r3, [r5, #12]
   1cf14:	b193      	cbz	r3, 1cf3c <print_command_params+0x38>
   1cf16:	4616      	mov	r6, r2
   1cf18:	689b      	ldr	r3, [r3, #8]
   1cf1a:	b17b      	cbz	r3, 1cf3c <print_command_params+0x38>
	for (i = 0; shell_cmd->help->params[i].param_name; i++) {
   1cf1c:	2400      	movs	r4, #0
   1cf1e:	e005      	b.n	1cf2c <print_command_params+0x28>
		streamer_printf(streamer, "%-30s%s\n",
   1cf20:	6843      	ldr	r3, [r0, #4]
   1cf22:	4908      	ldr	r1, [pc, #32]	; (1cf44 <print_command_params+0x40>)
   1cf24:	4630      	mov	r0, r6
   1cf26:	f001 fcec 	bl	1e902 <streamer_printf>
	for (i = 0; shell_cmd->help->params[i].param_name; i++) {
   1cf2a:	3401      	adds	r4, #1
   1cf2c:	68eb      	ldr	r3, [r5, #12]
   1cf2e:	689b      	ldr	r3, [r3, #8]
   1cf30:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
   1cf34:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   1cf38:	2a00      	cmp	r2, #0
   1cf3a:	d1f1      	bne.n	1cf20 <print_command_params+0x1c>
}
   1cf3c:	bd70      	pop	{r4, r5, r6, pc}
   1cf3e:	bf00      	nop
   1cf40:	10003f88 	.word	0x10003f88
   1cf44:	00038674 	.word	0x00038674

0001cf48 <get_destination_module>:
{
   1cf48:	b570      	push	{r4, r5, r6, lr}
   1cf4a:	4606      	mov	r6, r0
   1cf4c:	460d      	mov	r5, r1
    for (i = 0; i < num_of_shell_entities; i++) {
   1cf4e:	2400      	movs	r4, #0
   1cf50:	e007      	b.n	1cf62 <get_destination_module+0x1a>
            if (!strcmp(module_str, shell_modules[i].name)) {
   1cf52:	4b0e      	ldr	r3, [pc, #56]	; (1cf8c <get_destination_module+0x44>)
   1cf54:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   1cf58:	4630      	mov	r0, r6
   1cf5a:	f7fd fed4 	bl	1ad06 <strcmp>
   1cf5e:	b190      	cbz	r0, 1cf86 <get_destination_module+0x3e>
    for (i = 0; i < num_of_shell_entities; i++) {
   1cf60:	3401      	adds	r4, #1
   1cf62:	4b0b      	ldr	r3, [pc, #44]	; (1cf90 <get_destination_module+0x48>)
   1cf64:	681b      	ldr	r3, [r3, #0]
   1cf66:	429c      	cmp	r4, r3
   1cf68:	d20b      	bcs.n	1cf82 <get_destination_module+0x3a>
        if (len < 0) {
   1cf6a:	2d00      	cmp	r5, #0
   1cf6c:	dbf1      	blt.n	1cf52 <get_destination_module+0xa>
            if (!strncmp(module_str, shell_modules[i].name, len)) {
   1cf6e:	462a      	mov	r2, r5
   1cf70:	4b06      	ldr	r3, [pc, #24]	; (1cf8c <get_destination_module+0x44>)
   1cf72:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   1cf76:	4630      	mov	r0, r6
   1cf78:	f017 f99b 	bl	342b2 <strncmp>
   1cf7c:	2800      	cmp	r0, #0
   1cf7e:	d1ef      	bne.n	1cf60 <get_destination_module+0x18>
   1cf80:	e001      	b.n	1cf86 <get_destination_module+0x3e>
    return -1;
   1cf82:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   1cf86:	4620      	mov	r0, r4
   1cf88:	bd70      	pop	{r4, r5, r6, pc}
   1cf8a:	bf00      	nop
   1cf8c:	10003f88 	.word	0x10003f88
   1cf90:	10003f60 	.word	0x10003f60

0001cf94 <set_default_module>:
static const struct shell_cmd shell_cmd_help =
    SHELL_CMD_EXT("help", show_help, NULL);

static int
set_default_module(const char *name)
{
   1cf94:	b508      	push	{r3, lr}
    int module;

    module = get_destination_module(name, -1);
   1cf96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cf9a:	f7ff ffd5 	bl	1cf48 <get_destination_module>

    if (module == -1) {
   1cf9e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1cfa2:	d002      	beq.n	1cfaa <set_default_module+0x16>
        return -1;
    }

    default_module = module;
   1cfa4:	4b01      	ldr	r3, [pc, #4]	; (1cfac <set_default_module+0x18>)
   1cfa6:	6018      	str	r0, [r3, #0]

    return 0;
   1cfa8:	2000      	movs	r0, #0
}
   1cfaa:	bd08      	pop	{r3, pc}
   1cfac:	100006a8 	.word	0x100006a8

0001cfb0 <select_module>:

static int
select_module(const struct shell_cmd *cmd, int argc, char *argv[],
              struct streamer *streamer)
{
   1cfb0:	b508      	push	{r3, lr}
    if (argc == 1) {
   1cfb2:	2901      	cmp	r1, #1
   1cfb4:	d105      	bne.n	1cfc2 <select_module+0x12>
        default_module = -1;
   1cfb6:	4b05      	ldr	r3, [pc, #20]	; (1cfcc <select_module+0x1c>)
   1cfb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cfbc:	601a      	str	r2, [r3, #0]
    } else {
        set_default_module(argv[1]);
    }

    return 0;
}
   1cfbe:	2000      	movs	r0, #0
   1cfc0:	bd08      	pop	{r3, pc}
        set_default_module(argv[1]);
   1cfc2:	6850      	ldr	r0, [r2, #4]
   1cfc4:	f7ff ffe6 	bl	1cf94 <set_default_module>
   1cfc8:	e7f9      	b.n	1cfbe <select_module+0xe>
   1cfca:	bf00      	nop
   1cfcc:	100006a8 	.word	0x100006a8

0001cfd0 <get_command_and_module>:
{
   1cfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cfd2:	4604      	mov	r4, r0
   1cfd4:	4617      	mov	r7, r2
    int def_module = default_module;
   1cfd6:	4b1a      	ldr	r3, [pc, #104]	; (1d040 <get_command_and_module+0x70>)
   1cfd8:	681b      	ldr	r3, [r3, #0]
    const char *first_arg = argv[0];
   1cfda:	6800      	ldr	r0, [r0, #0]
    *module = -1;
   1cfdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cfe0:	600a      	str	r2, [r1, #0]
    if (!argv[0]) {
   1cfe2:	6826      	ldr	r6, [r4, #0]
   1cfe4:	b156      	cbz	r6, 1cffc <get_command_and_module+0x2c>
   1cfe6:	460d      	mov	r5, r1
    if (first_arg[0] == '/') {
   1cfe8:	7802      	ldrb	r2, [r0, #0]
   1cfea:	2a2f      	cmp	r2, #47	; 0x2f
   1cfec:	d00b      	beq.n	1d006 <get_command_and_module+0x36>
    if (def_module == -1) {
   1cfee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1cff2:	d009      	beq.n	1d008 <get_command_and_module+0x38>
    *module = def_module;
   1cff4:	600b      	str	r3, [r1, #0]
    return argv[0];
   1cff6:	6826      	ldr	r6, [r4, #0]
}
   1cff8:	4630      	mov	r0, r6
   1cffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Unrecognized command\n");
   1cffc:	4911      	ldr	r1, [pc, #68]	; (1d044 <get_command_and_module+0x74>)
   1cffe:	4638      	mov	r0, r7
   1d000:	f001 fc7f 	bl	1e902 <streamer_printf>
        return NULL;
   1d004:	e7f8      	b.n	1cff8 <get_command_and_module+0x28>
        first_arg++;
   1d006:	3001      	adds	r0, #1
        if (!argv[1] || argv[1][0] == '\0') {
   1d008:	6863      	ldr	r3, [r4, #4]
   1d00a:	b15b      	cbz	r3, 1d024 <get_command_and_module+0x54>
   1d00c:	781b      	ldrb	r3, [r3, #0]
   1d00e:	b14b      	cbz	r3, 1d024 <get_command_and_module+0x54>
        *module = get_destination_module(first_arg, -1);
   1d010:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d014:	f7ff ff98 	bl	1cf48 <get_destination_module>
   1d018:	6028      	str	r0, [r5, #0]
        if (*module == -1) {
   1d01a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1d01e:	d008      	beq.n	1d032 <get_command_and_module+0x62>
        return argv[1];
   1d020:	6866      	ldr	r6, [r4, #4]
   1d022:	e7e9      	b.n	1cff8 <get_command_and_module+0x28>
            streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
   1d024:	4632      	mov	r2, r6
   1d026:	4908      	ldr	r1, [pc, #32]	; (1d048 <get_command_and_module+0x78>)
   1d028:	4638      	mov	r0, r7
   1d02a:	f001 fc6a 	bl	1e902 <streamer_printf>
            return NULL;
   1d02e:	2600      	movs	r6, #0
   1d030:	e7e2      	b.n	1cff8 <get_command_and_module+0x28>
            streamer_printf(streamer, "Illegal module %s\n", argv[0]);
   1d032:	6822      	ldr	r2, [r4, #0]
   1d034:	4905      	ldr	r1, [pc, #20]	; (1d04c <get_command_and_module+0x7c>)
   1d036:	4638      	mov	r0, r7
   1d038:	f001 fc63 	bl	1e902 <streamer_printf>
            return NULL;
   1d03c:	2600      	movs	r6, #0
   1d03e:	e7db      	b.n	1cff8 <get_command_and_module+0x28>
   1d040:	100006a8 	.word	0x100006a8
   1d044:	00038680 	.word	0x00038680
   1d048:	00038698 	.word	0x00038698
   1d04c:	000386b4 	.word	0x000386b4

0001d050 <shell_find_cmd>:
static const struct shell_cmd shell_cmd_select_module =
    SHELL_CMD_EXT("select", select_module, NULL);

static const struct shell_cmd *
shell_find_cmd(int argc, char *argv[], struct streamer *streamer)
{
   1d050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d054:	b082      	sub	sp, #8
   1d056:	4616      	mov	r6, r2
    const char *first_string = argv[0];
   1d058:	680c      	ldr	r4, [r1, #0]
    int module = -1;
   1d05a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d05e:	9301      	str	r3, [sp, #4]
    int def_module = default_module;
   1d060:	4b27      	ldr	r3, [pc, #156]	; (1d100 <shell_find_cmd+0xb0>)
   1d062:	f8d3 8000 	ldr.w	r8, [r3]
    const struct shell_module *shell_module;
    const char *command;
    int i;

    if (!first_string || first_string[0] == '\0') {
   1d066:	b374      	cbz	r4, 1d0c6 <shell_find_cmd+0x76>
   1d068:	4607      	mov	r7, r0
   1d06a:	460d      	mov	r5, r1
   1d06c:	7823      	ldrb	r3, [r4, #0]
   1d06e:	b353      	cbz	r3, 1d0c6 <shell_find_cmd+0x76>
        streamer_printf(streamer, "Illegal parameter\n");
        return NULL;
    }

    if (first_string[0] == '/') {
   1d070:	2b2f      	cmp	r3, #47	; 0x2f
   1d072:	d02e      	beq.n	1d0d2 <shell_find_cmd+0x82>
        first_string++;
        def_module = -1;
    }

    if (!strcmp(first_string, "help")) {
   1d074:	4923      	ldr	r1, [pc, #140]	; (1d104 <shell_find_cmd+0xb4>)
   1d076:	4620      	mov	r0, r4
   1d078:	f7fd fe45 	bl	1ad06 <strcmp>
   1d07c:	b398      	cbz	r0, 1d0e6 <shell_find_cmd+0x96>
        return &shell_cmd_help;
    }

    if (!strcmp(first_string, "select")) {
   1d07e:	4922      	ldr	r1, [pc, #136]	; (1d108 <shell_find_cmd+0xb8>)
   1d080:	4620      	mov	r0, r4
   1d082:	f7fd fe40 	bl	1ad06 <strcmp>
   1d086:	b398      	cbz	r0, 1d0f0 <shell_find_cmd+0xa0>
        return &shell_cmd_select_module;
    }

    if ((argc == 1) && (def_module == -1)) {
   1d088:	2f01      	cmp	r7, #1
   1d08a:	d102      	bne.n	1d092 <shell_find_cmd+0x42>
   1d08c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1d090:	d023      	beq.n	1d0da <shell_find_cmd+0x8a>
        streamer_printf(streamer, "Missing parameter\n");
        return NULL;
    }

    command = get_command_and_module(argv, &module, streamer);
   1d092:	4632      	mov	r2, r6
   1d094:	a901      	add	r1, sp, #4
   1d096:	4628      	mov	r0, r5
   1d098:	f7ff ff9a 	bl	1cfd0 <get_command_and_module>
   1d09c:	4606      	mov	r6, r0
    if ((module == -1) || (command == NULL)) {
   1d09e:	9f01      	ldr	r7, [sp, #4]
   1d0a0:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   1d0a4:	d026      	beq.n	1d0f4 <shell_find_cmd+0xa4>
   1d0a6:	b338      	cbz	r0, 1d0f8 <shell_find_cmd+0xa8>
        return NULL;
    }

    shell_module = &shell_modules[module];
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   1d0a8:	2500      	movs	r5, #0
   1d0aa:	4b18      	ldr	r3, [pc, #96]	; (1d10c <shell_find_cmd+0xbc>)
   1d0ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   1d0b0:	685c      	ldr	r4, [r3, #4]
   1d0b2:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   1d0b6:	68a1      	ldr	r1, [r4, #8]
   1d0b8:	b1b1      	cbz	r1, 1d0e8 <shell_find_cmd+0x98>
        if (!strcmp(command, shell_module->commands[i].sc_cmd)) {
   1d0ba:	4630      	mov	r0, r6
   1d0bc:	f7fd fe23 	bl	1ad06 <strcmp>
   1d0c0:	b1e0      	cbz	r0, 1d0fc <shell_find_cmd+0xac>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   1d0c2:	3501      	adds	r5, #1
   1d0c4:	e7f1      	b.n	1d0aa <shell_find_cmd+0x5a>
        streamer_printf(streamer, "Illegal parameter\n");
   1d0c6:	4912      	ldr	r1, [pc, #72]	; (1d110 <shell_find_cmd+0xc0>)
   1d0c8:	4630      	mov	r0, r6
   1d0ca:	f001 fc1a 	bl	1e902 <streamer_printf>
        return NULL;
   1d0ce:	2100      	movs	r1, #0
   1d0d0:	e00a      	b.n	1d0e8 <shell_find_cmd+0x98>
        first_string++;
   1d0d2:	3401      	adds	r4, #1
        def_module = -1;
   1d0d4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1d0d8:	e7cc      	b.n	1d074 <shell_find_cmd+0x24>
        streamer_printf(streamer, "Missing parameter\n");
   1d0da:	490e      	ldr	r1, [pc, #56]	; (1d114 <shell_find_cmd+0xc4>)
   1d0dc:	4630      	mov	r0, r6
   1d0de:	f001 fc10 	bl	1e902 <streamer_printf>
        return NULL;
   1d0e2:	2100      	movs	r1, #0
   1d0e4:	e000      	b.n	1d0e8 <shell_find_cmd+0x98>
        return &shell_cmd_help;
   1d0e6:	490c      	ldr	r1, [pc, #48]	; (1d118 <shell_find_cmd+0xc8>)
            return &shell_module->commands[i];
        }
    }

    return NULL;
}
   1d0e8:	4608      	mov	r0, r1
   1d0ea:	b002      	add	sp, #8
   1d0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return &shell_cmd_select_module;
   1d0f0:	490a      	ldr	r1, [pc, #40]	; (1d11c <shell_find_cmd+0xcc>)
   1d0f2:	e7f9      	b.n	1d0e8 <shell_find_cmd+0x98>
        return NULL;
   1d0f4:	2100      	movs	r1, #0
   1d0f6:	e7f7      	b.n	1d0e8 <shell_find_cmd+0x98>
   1d0f8:	4601      	mov	r1, r0
   1d0fa:	e7f5      	b.n	1d0e8 <shell_find_cmd+0x98>
            return &shell_module->commands[i];
   1d0fc:	4621      	mov	r1, r4
   1d0fe:	e7f3      	b.n	1d0e8 <shell_find_cmd+0x98>
   1d100:	100006a8 	.word	0x100006a8
   1d104:	000386dc 	.word	0x000386dc
   1d108:	000386e4 	.word	0x000386e4
   1d10c:	10003f88 	.word	0x10003f88
   1d110:	000386c8 	.word	0x000386c8
   1d114:	000386ec 	.word	0x000386ec
   1d118:	00038858 	.word	0x00038858
   1d11c:	00038868 	.word	0x00038868

0001d120 <show_cmd_help>:
{
   1d120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d124:	b083      	sub	sp, #12
   1d126:	4681      	mov	r9, r0
   1d128:	4688      	mov	r8, r1
    int module = -1;
   1d12a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d12e:	9301      	str	r3, [sp, #4]
    command = get_command_and_module(argv, &module, streamer);
   1d130:	460a      	mov	r2, r1
   1d132:	a901      	add	r1, sp, #4
   1d134:	f7ff ff4c 	bl	1cfd0 <get_command_and_module>
    if ((module == -1) || (command == NULL)) {
   1d138:	9f01      	ldr	r7, [sp, #4]
   1d13a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   1d13e:	d04d      	beq.n	1d1dc <show_cmd_help+0xbc>
   1d140:	4606      	mov	r6, r0
   1d142:	2800      	cmp	r0, #0
   1d144:	d04a      	beq.n	1d1dc <show_cmd_help+0xbc>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   1d146:	2500      	movs	r5, #0
   1d148:	4b26      	ldr	r3, [pc, #152]	; (1d1e4 <show_cmd_help+0xc4>)
   1d14a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   1d14e:	685c      	ldr	r4, [r3, #4]
   1d150:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   1d154:	68a1      	ldr	r1, [r4, #8]
   1d156:	2900      	cmp	r1, #0
   1d158:	d03a      	beq.n	1d1d0 <show_cmd_help+0xb0>
        if (!strcmp(command, cmd->sc_cmd)) {
   1d15a:	4630      	mov	r0, r6
   1d15c:	f7fd fdd3 	bl	1ad06 <strcmp>
   1d160:	b108      	cbz	r0, 1d166 <show_cmd_help+0x46>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   1d162:	3501      	adds	r5, #1
   1d164:	e7f0      	b.n	1d148 <show_cmd_help+0x28>
            if (!cmd->help || (!cmd->help->summary &&
   1d166:	68e3      	ldr	r3, [r4, #12]
   1d168:	2b00      	cmp	r3, #0
   1d16a:	d02c      	beq.n	1d1c6 <show_cmd_help+0xa6>
   1d16c:	681a      	ldr	r2, [r3, #0]
   1d16e:	b322      	cbz	r2, 1d1ba <show_cmd_help+0x9a>
            if (cmd->help->summary) {
   1d170:	b14a      	cbz	r2, 1d186 <show_cmd_help+0x66>
                streamer_printf(streamer, "Summary:\n");
   1d172:	491d      	ldr	r1, [pc, #116]	; (1d1e8 <show_cmd_help+0xc8>)
   1d174:	4640      	mov	r0, r8
   1d176:	f001 fbc4 	bl	1e902 <streamer_printf>
                streamer_printf(streamer, "%s\n", cmd->help->summary);
   1d17a:	68e3      	ldr	r3, [r4, #12]
   1d17c:	681a      	ldr	r2, [r3, #0]
   1d17e:	491b      	ldr	r1, [pc, #108]	; (1d1ec <show_cmd_help+0xcc>)
   1d180:	4640      	mov	r0, r8
   1d182:	f001 fbbe 	bl	1e902 <streamer_printf>
            if (cmd->help->usage) {
   1d186:	68e3      	ldr	r3, [r4, #12]
   1d188:	685b      	ldr	r3, [r3, #4]
   1d18a:	b14b      	cbz	r3, 1d1a0 <show_cmd_help+0x80>
                streamer_printf(streamer, "Usage:\n");
   1d18c:	4918      	ldr	r1, [pc, #96]	; (1d1f0 <show_cmd_help+0xd0>)
   1d18e:	4640      	mov	r0, r8
   1d190:	f001 fbb7 	bl	1e902 <streamer_printf>
                streamer_printf(streamer, "%s\n", cmd->help->usage);
   1d194:	68e3      	ldr	r3, [r4, #12]
   1d196:	685a      	ldr	r2, [r3, #4]
   1d198:	4914      	ldr	r1, [pc, #80]	; (1d1ec <show_cmd_help+0xcc>)
   1d19a:	4640      	mov	r0, r8
   1d19c:	f001 fbb1 	bl	1e902 <streamer_printf>
            if (cmd->help->params) {
   1d1a0:	68e3      	ldr	r3, [r4, #12]
   1d1a2:	689b      	ldr	r3, [r3, #8]
   1d1a4:	b1d3      	cbz	r3, 1d1dc <show_cmd_help+0xbc>
                streamer_printf(streamer, "Parameters:\n");
   1d1a6:	4913      	ldr	r1, [pc, #76]	; (1d1f4 <show_cmd_help+0xd4>)
   1d1a8:	4640      	mov	r0, r8
   1d1aa:	f001 fbaa 	bl	1e902 <streamer_printf>
                print_command_params(module, i, streamer);
   1d1ae:	4642      	mov	r2, r8
   1d1b0:	4629      	mov	r1, r5
   1d1b2:	9801      	ldr	r0, [sp, #4]
   1d1b4:	f7ff fea6 	bl	1cf04 <print_command_params>
            return 0;
   1d1b8:	e010      	b.n	1d1dc <show_cmd_help+0xbc>
                               !cmd->help->usage &&
   1d1ba:	6859      	ldr	r1, [r3, #4]
            if (!cmd->help || (!cmd->help->summary &&
   1d1bc:	2900      	cmp	r1, #0
   1d1be:	d1d7      	bne.n	1d170 <show_cmd_help+0x50>
                               !cmd->help->params)) {
   1d1c0:	689b      	ldr	r3, [r3, #8]
                               !cmd->help->usage &&
   1d1c2:	2b00      	cmp	r3, #0
   1d1c4:	d1d4      	bne.n	1d170 <show_cmd_help+0x50>
                streamer_printf(streamer, "(no help available)\n");
   1d1c6:	490c      	ldr	r1, [pc, #48]	; (1d1f8 <show_cmd_help+0xd8>)
   1d1c8:	4640      	mov	r0, r8
   1d1ca:	f001 fb9a 	bl	1e902 <streamer_printf>
                return 0;
   1d1ce:	e005      	b.n	1d1dc <show_cmd_help+0xbc>
    streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
   1d1d0:	f8d9 2000 	ldr.w	r2, [r9]
   1d1d4:	4909      	ldr	r1, [pc, #36]	; (1d1fc <show_cmd_help+0xdc>)
   1d1d6:	4640      	mov	r0, r8
   1d1d8:	f001 fb93 	bl	1e902 <streamer_printf>
}
   1d1dc:	2000      	movs	r0, #0
   1d1de:	b003      	add	sp, #12
   1d1e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d1e4:	10003f88 	.word	0x10003f88
   1d1e8:	00038718 	.word	0x00038718
   1d1ec:	00038924 	.word	0x00038924
   1d1f0:	00038724 	.word	0x00038724
   1d1f4:	0003872c 	.word	0x0003872c
   1d1f8:	00038700 	.word	0x00038700
   1d1fc:	00038698 	.word	0x00038698

0001d200 <show_help>:
{
   1d200:	b538      	push	{r3, r4, r5, lr}
   1d202:	461c      	mov	r4, r3
    if ((argc > 2) || ((default_module != -1) && (argc == 2))) {
   1d204:	2902      	cmp	r1, #2
   1d206:	dc1a      	bgt.n	1d23e <show_help+0x3e>
   1d208:	4b1b      	ldr	r3, [pc, #108]	; (1d278 <show_help+0x78>)
   1d20a:	6818      	ldr	r0, [r3, #0]
   1d20c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1d210:	d001      	beq.n	1d216 <show_help+0x16>
   1d212:	2902      	cmp	r1, #2
   1d214:	d013      	beq.n	1d23e <show_help+0x3e>
    if ((argc == 2) || ((default_module != -1) && (argc == 1))) {
   1d216:	2902      	cmp	r1, #2
   1d218:	d016      	beq.n	1d248 <show_help+0x48>
   1d21a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1d21e:	d001      	beq.n	1d224 <show_help+0x24>
   1d220:	2901      	cmp	r1, #1
   1d222:	d011      	beq.n	1d248 <show_help+0x48>
        streamer_printf(streamer, "Available modules:\n");
   1d224:	4915      	ldr	r1, [pc, #84]	; (1d27c <show_help+0x7c>)
   1d226:	4620      	mov	r0, r4
   1d228:	f001 fb6b 	bl	1e902 <streamer_printf>
        print_modules(streamer);
   1d22c:	4620      	mov	r0, r4
   1d22e:	f7ff fe51 	bl	1ced4 <print_modules>
        streamer_printf(streamer,
   1d232:	4913      	ldr	r1, [pc, #76]	; (1d280 <show_help+0x80>)
   1d234:	4620      	mov	r0, r4
   1d236:	f001 fb64 	bl	1e902 <streamer_printf>
    return 0;
   1d23a:	2000      	movs	r0, #0
   1d23c:	e014      	b.n	1d268 <show_help+0x68>
        return show_cmd_help(&argv[1], streamer);
   1d23e:	4621      	mov	r1, r4
   1d240:	1d10      	adds	r0, r2, #4
   1d242:	f7ff ff6d 	bl	1d120 <show_cmd_help>
   1d246:	e00f      	b.n	1d268 <show_help+0x68>
        if (default_module == -1) {
   1d248:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1d24c:	d108      	bne.n	1d260 <show_help+0x60>
            module = get_destination_module(argv[1], -1);
   1d24e:	6855      	ldr	r5, [r2, #4]
   1d250:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d254:	4628      	mov	r0, r5
   1d256:	f7ff fe77 	bl	1cf48 <get_destination_module>
            if (module == -1) {
   1d25a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1d25e:	d004      	beq.n	1d26a <show_help+0x6a>
        print_module_commands(module, streamer);
   1d260:	4621      	mov	r1, r4
   1d262:	f7ff fe01 	bl	1ce68 <print_module_commands>
    return 0;
   1d266:	2000      	movs	r0, #0
}
   1d268:	bd38      	pop	{r3, r4, r5, pc}
                streamer_printf(streamer, "Illegal module %s\n", argv[1]);
   1d26a:	462a      	mov	r2, r5
   1d26c:	4905      	ldr	r1, [pc, #20]	; (1d284 <show_help+0x84>)
   1d26e:	4620      	mov	r0, r4
   1d270:	f001 fb47 	bl	1e902 <streamer_printf>
                return 0;
   1d274:	2000      	movs	r0, #0
   1d276:	e7f7      	b.n	1d268 <show_help+0x68>
   1d278:	100006a8 	.word	0x100006a8
   1d27c:	0003873c 	.word	0x0003873c
   1d280:	00038750 	.word	0x00038750
   1d284:	000386b4 	.word	0x000386b4

0001d288 <print_prompt>:
{
   1d288:	b510      	push	{r4, lr}
   1d28a:	b088      	sub	sp, #32
   1d28c:	4604      	mov	r4, r0
    strcpy(full_prompt, get_prompt());
   1d28e:	f7ff fdcf 	bl	1ce30 <get_prompt>
   1d292:	4601      	mov	r1, r0
   1d294:	4668      	mov	r0, sp
   1d296:	f017 f802 	bl	3429e <strcpy>
    strcat(full_prompt, MYNEWT_VAL(SHELL_PROMPT_SUFFIX));
   1d29a:	4668      	mov	r0, sp
   1d29c:	f7fd fd3f 	bl	1ad1e <strlen>
   1d2a0:	eb0d 0200 	add.w	r2, sp, r0
   1d2a4:	4b05      	ldr	r3, [pc, #20]	; (1d2bc <print_prompt+0x34>)
   1d2a6:	8819      	ldrh	r1, [r3, #0]
   1d2a8:	789b      	ldrb	r3, [r3, #2]
   1d2aa:	f82d 1000 	strh.w	r1, [sp, r0]
   1d2ae:	7093      	strb	r3, [r2, #2]
    console_prompt_set(full_prompt, line);
   1d2b0:	4621      	mov	r1, r4
   1d2b2:	4668      	mov	r0, sp
   1d2b4:	f7fe fdf4 	bl	1bea0 <console_prompt_set>
}
   1d2b8:	b008      	add	sp, #32
   1d2ba:	bd10      	pop	{r4, pc}
   1d2bc:	00038784 	.word	0x00038784

0001d2c0 <print_prompt_if_console>:
{
   1d2c0:	b510      	push	{r4, lr}
   1d2c2:	4604      	mov	r4, r0
    if (streamer == streamer_console_get()) {
   1d2c4:	f001 fb38 	bl	1e938 <streamer_console_get>
   1d2c8:	4284      	cmp	r4, r0
   1d2ca:	d000      	beq.n	1d2ce <print_prompt_if_console+0xe>
}
   1d2cc:	bd10      	pop	{r4, pc}
        print_prompt(NULL);
   1d2ce:	2000      	movs	r0, #0
   1d2d0:	f7ff ffda 	bl	1d288 <print_prompt>
}
   1d2d4:	e7fa      	b.n	1d2cc <print_prompt_if_console+0xc>
	...

0001d2d8 <complete_module>:
}

static void
complete_module(char *line, char *module_prefix,
                int module_len, console_append_char_cb append_char)
{
   1d2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d2dc:	b083      	sub	sp, #12
   1d2de:	4681      	mov	r9, r0
   1d2e0:	9101      	str	r1, [sp, #4]
    int i, j;
    const char *first_match = NULL;
    int common_chars = -1, space = 0;

    if (!module_len) {
   1d2e2:	4615      	mov	r5, r2
   1d2e4:	b132      	cbz	r2, 1d2f4 <complete_module+0x1c>
   1d2e6:	469a      	mov	sl, r3
    int common_chars = -1, space = 0;
   1d2e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    const char *first_match = NULL;
   1d2ec:	f04f 0800 	mov.w	r8, #0
        }
        print_prompt(line);
        return;
    }

    for (i = 0; i < num_of_shell_entities; i++) {
   1d2f0:	4646      	mov	r6, r8
   1d2f2:	e028      	b.n	1d346 <complete_module+0x6e>
        console_out('\n');
   1d2f4:	200a      	movs	r0, #10
   1d2f6:	f7fe fd87 	bl	1be08 <console_out>
        for (i = 0; i < num_of_shell_entities; i++) {
   1d2fa:	e006      	b.n	1d30a <complete_module+0x32>
            console_printf("%s\n", shell_modules[i].name);
   1d2fc:	4b32      	ldr	r3, [pc, #200]	; (1d3c8 <complete_module+0xf0>)
   1d2fe:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
   1d302:	4832      	ldr	r0, [pc, #200]	; (1d3cc <complete_module+0xf4>)
   1d304:	f7fe ff18 	bl	1c138 <console_printf>
        for (i = 0; i < num_of_shell_entities; i++) {
   1d308:	3501      	adds	r5, #1
   1d30a:	4b31      	ldr	r3, [pc, #196]	; (1d3d0 <complete_module+0xf8>)
   1d30c:	681b      	ldr	r3, [r3, #0]
   1d30e:	429d      	cmp	r5, r3
   1d310:	d3f4      	bcc.n	1d2fc <complete_module+0x24>
        print_prompt(line);
   1d312:	4648      	mov	r0, r9
   1d314:	f7ff ffb8 	bl	1d288 <print_prompt>

    /* for convenience add space after command */
    if (space) {
        append_char(line, ' ');
    }
}
   1d318:	b003      	add	sp, #12
   1d31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            console_out('\n');
   1d31e:	200a      	movs	r0, #10
   1d320:	f7fe fd72 	bl	1be08 <console_out>
            console_printf("%s\n", first_match);
   1d324:	4641      	mov	r1, r8
   1d326:	4829      	ldr	r0, [pc, #164]	; (1d3cc <complete_module+0xf4>)
   1d328:	f7fe ff06 	bl	1c138 <console_printf>
            common_chars = strlen(first_match);
   1d32c:	4640      	mov	r0, r8
   1d32e:	f7fd fcf6 	bl	1ad1e <strlen>
   1d332:	4607      	mov	r7, r0
        for (j = 0; j < common_chars; j++) {
   1d334:	e01b      	b.n	1d36e <complete_module+0x96>
        console_printf("%s\n", shell_modules[i].name);
   1d336:	4b24      	ldr	r3, [pc, #144]	; (1d3c8 <complete_module+0xf0>)
   1d338:	f853 1036 	ldr.w	r1, [r3, r6, lsl #3]
   1d33c:	4823      	ldr	r0, [pc, #140]	; (1d3cc <complete_module+0xf4>)
   1d33e:	f7fe fefb 	bl	1c138 <console_printf>
        common_chars = j;
   1d342:	4627      	mov	r7, r4
    for (i = 0; i < num_of_shell_entities; i++) {
   1d344:	3601      	adds	r6, #1
   1d346:	4b22      	ldr	r3, [pc, #136]	; (1d3d0 <complete_module+0xf8>)
   1d348:	681b      	ldr	r3, [r3, #0]
   1d34a:	429e      	cmp	r6, r3
   1d34c:	d21d      	bcs.n	1d38a <complete_module+0xb2>
        if (strncmp(module_prefix,
   1d34e:	4b1e      	ldr	r3, [pc, #120]	; (1d3c8 <complete_module+0xf0>)
   1d350:	f853 b036 	ldr.w	fp, [r3, r6, lsl #3]
   1d354:	462a      	mov	r2, r5
   1d356:	4659      	mov	r1, fp
   1d358:	9801      	ldr	r0, [sp, #4]
   1d35a:	f016 ffaa 	bl	342b2 <strncmp>
   1d35e:	4604      	mov	r4, r0
   1d360:	2800      	cmp	r0, #0
   1d362:	d1ef      	bne.n	1d344 <complete_module+0x6c>
        if (!first_match) {
   1d364:	f1b8 0f00 	cmp.w	r8, #0
   1d368:	d00d      	beq.n	1d386 <complete_module+0xae>
        if (first_match && (common_chars < 0)) {
   1d36a:	2f00      	cmp	r7, #0
   1d36c:	dbd7      	blt.n	1d31e <complete_module+0x46>
        for (j = 0; j < common_chars; j++) {
   1d36e:	42bc      	cmp	r4, r7
   1d370:	dae1      	bge.n	1d336 <complete_module+0x5e>
            if (first_match[j] != shell_modules[i].name[j]) {
   1d372:	f818 2004 	ldrb.w	r2, [r8, r4]
   1d376:	4b14      	ldr	r3, [pc, #80]	; (1d3c8 <complete_module+0xf0>)
   1d378:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
   1d37c:	5d1b      	ldrb	r3, [r3, r4]
   1d37e:	429a      	cmp	r2, r3
   1d380:	d1d9      	bne.n	1d336 <complete_module+0x5e>
        for (j = 0; j < common_chars; j++) {
   1d382:	3401      	adds	r4, #1
   1d384:	e7f3      	b.n	1d36e <complete_module+0x96>
            first_match = shell_modules[i].name;
   1d386:	46d8      	mov	r8, fp
   1d388:	e7dc      	b.n	1d344 <complete_module+0x6c>
    if (!first_match) {
   1d38a:	f1b8 0f00 	cmp.w	r8, #0
   1d38e:	d0c3      	beq.n	1d318 <complete_module+0x40>
    if (common_chars >= 0) {
   1d390:	2f00      	cmp	r7, #0
   1d392:	da0e      	bge.n	1d3b2 <complete_module+0xda>
        common_chars = strlen(first_match);
   1d394:	4640      	mov	r0, r8
   1d396:	f7fd fcc2 	bl	1ad1e <strlen>
   1d39a:	4607      	mov	r7, r0
        space = 1;
   1d39c:	2401      	movs	r4, #1
    for (i = module_len; i < common_chars; i++) {
   1d39e:	42bd      	cmp	r5, r7
   1d3a0:	da0c      	bge.n	1d3bc <complete_module+0xe4>
        if (!append_char(line, first_match[i])) {
   1d3a2:	f818 1005 	ldrb.w	r1, [r8, r5]
   1d3a6:	4648      	mov	r0, r9
   1d3a8:	47d0      	blx	sl
   1d3aa:	2800      	cmp	r0, #0
   1d3ac:	d0b4      	beq.n	1d318 <complete_module+0x40>
    for (i = module_len; i < common_chars; i++) {
   1d3ae:	3501      	adds	r5, #1
   1d3b0:	e7f5      	b.n	1d39e <complete_module+0xc6>
        print_prompt(line);
   1d3b2:	4648      	mov	r0, r9
   1d3b4:	f7ff ff68 	bl	1d288 <print_prompt>
    int common_chars = -1, space = 0;
   1d3b8:	2400      	movs	r4, #0
   1d3ba:	e7f0      	b.n	1d39e <complete_module+0xc6>
    if (space) {
   1d3bc:	2c00      	cmp	r4, #0
   1d3be:	d0ab      	beq.n	1d318 <complete_module+0x40>
        append_char(line, ' ');
   1d3c0:	2120      	movs	r1, #32
   1d3c2:	4648      	mov	r0, r9
   1d3c4:	47d0      	blx	sl
   1d3c6:	e7a7      	b.n	1d318 <complete_module+0x40>
   1d3c8:	10003f88 	.word	0x10003f88
   1d3cc:	00038924 	.word	0x00038924
   1d3d0:	10003f60 	.word	0x10003f60

0001d3d4 <complete_command>:
{
   1d3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d3d8:	b083      	sub	sp, #12
   1d3da:	9001      	str	r0, [sp, #4]
   1d3dc:	468b      	mov	fp, r1
   1d3de:	4617      	mov	r7, r2
    commands = shell_modules[module_idx].commands;
   1d3e0:	4a3d      	ldr	r2, [pc, #244]	; (1d4d8 <complete_command+0x104>)
   1d3e2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1d3e6:	6856      	ldr	r6, [r2, #4]
    int i, j, common_chars = -1;
   1d3e8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; commands[i].sc_cmd; i++) {
   1d3ec:	f04f 0800 	mov.w	r8, #0
    int match_count = 0;
   1d3f0:	46c2      	mov	sl, r8
    int first_match = -1;
   1d3f2:	46a9      	mov	r9, r5
    for (i = 0; commands[i].sc_cmd; i++) {
   1d3f4:	e006      	b.n	1d404 <complete_command+0x30>
            common_chars = strlen(commands[i].sc_cmd);
   1d3f6:	4620      	mov	r0, r4
   1d3f8:	f7fd fc91 	bl	1ad1e <strlen>
   1d3fc:	4605      	mov	r5, r0
            first_match = i;
   1d3fe:	46c1      	mov	r9, r8
    for (i = 0; commands[i].sc_cmd; i++) {
   1d400:	f108 0801 	add.w	r8, r8, #1
   1d404:	eb06 1308 	add.w	r3, r6, r8, lsl #4
   1d408:	689c      	ldr	r4, [r3, #8]
   1d40a:	b1ec      	cbz	r4, 1d448 <complete_command+0x74>
        if (0 != strncmp(command_prefix, commands[i].sc_cmd, command_len)) {
   1d40c:	463a      	mov	r2, r7
   1d40e:	4621      	mov	r1, r4
   1d410:	4658      	mov	r0, fp
   1d412:	f016 ff4e 	bl	342b2 <strncmp>
   1d416:	2800      	cmp	r0, #0
   1d418:	d1f2      	bne.n	1d400 <complete_command+0x2c>
        match_count++;
   1d41a:	f10a 0a01 	add.w	sl, sl, #1
        if (match_count == 1) {
   1d41e:	f1ba 0f01 	cmp.w	sl, #1
   1d422:	d0e8      	beq.n	1d3f6 <complete_command+0x22>
        if (common_chars <= command_len) {
   1d424:	42bd      	cmp	r5, r7
   1d426:	ddeb      	ble.n	1d400 <complete_command+0x2c>
        for (j = command_len; j < common_chars; j++) {
   1d428:	463b      	mov	r3, r7
   1d42a:	42ab      	cmp	r3, r5
   1d42c:	da08      	bge.n	1d440 <complete_command+0x6c>
            if (commands[first_match].sc_cmd[j] != commands[i].sc_cmd[j]) {
   1d42e:	eb06 1209 	add.w	r2, r6, r9, lsl #4
   1d432:	6892      	ldr	r2, [r2, #8]
   1d434:	5cd1      	ldrb	r1, [r2, r3]
   1d436:	5ce2      	ldrb	r2, [r4, r3]
   1d438:	4291      	cmp	r1, r2
   1d43a:	d103      	bne.n	1d444 <complete_command+0x70>
        for (j = command_len; j < common_chars; j++) {
   1d43c:	3301      	adds	r3, #1
   1d43e:	e7f4      	b.n	1d42a <complete_command+0x56>
        common_chars = j;
   1d440:	461d      	mov	r5, r3
   1d442:	e7dd      	b.n	1d400 <complete_command+0x2c>
   1d444:	461d      	mov	r5, r3
   1d446:	e7db      	b.n	1d400 <complete_command+0x2c>
    if (match_count == 0) {
   1d448:	f1ba 0f00 	cmp.w	sl, #0
   1d44c:	d040      	beq.n	1d4d0 <complete_command+0xfc>
    if (common_chars > command_len) {
   1d44e:	42bd      	cmp	r5, r7
   1d450:	dc0e      	bgt.n	1d470 <complete_command+0x9c>
    } else if (match_count == 1) {
   1d452:	f1ba 0f01 	cmp.w	sl, #1
   1d456:	d021      	beq.n	1d49c <complete_command+0xc8>
    console_out('\n');
   1d458:	200a      	movs	r0, #10
   1d45a:	f7fe fcd5 	bl	1be08 <console_out>
    console_printf("%s\n", commands[first_match].sc_cmd);
   1d45e:	eb06 1309 	add.w	r3, r6, r9, lsl #4
   1d462:	6899      	ldr	r1, [r3, #8]
   1d464:	481d      	ldr	r0, [pc, #116]	; (1d4dc <complete_command+0x108>)
   1d466:	f7fe fe67 	bl	1c138 <console_printf>
    for (i = first_match + 1; commands[i].sc_cmd; i++) {
   1d46a:	f109 0901 	add.w	r9, r9, #1
   1d46e:	e01c      	b.n	1d4aa <complete_command+0xd6>
   1d470:	9c01      	ldr	r4, [sp, #4]
   1d472:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
        for (i = command_len; i < common_chars; i++) {
   1d476:	42af      	cmp	r7, r5
   1d478:	da08      	bge.n	1d48c <complete_command+0xb8>
            if (!append_char(line, (uint8_t)commands[first_match].sc_cmd[i])) {
   1d47a:	eb06 1309 	add.w	r3, r6, r9, lsl #4
   1d47e:	689b      	ldr	r3, [r3, #8]
   1d480:	5dd9      	ldrb	r1, [r3, r7]
   1d482:	4620      	mov	r0, r4
   1d484:	47c0      	blx	r8
   1d486:	b318      	cbz	r0, 1d4d0 <complete_command+0xfc>
        for (i = command_len; i < common_chars; i++) {
   1d488:	3701      	adds	r7, #1
   1d48a:	e7f4      	b.n	1d476 <complete_command+0xa2>
        if (match_count == 1) {
   1d48c:	f1ba 0f01 	cmp.w	sl, #1
   1d490:	d11e      	bne.n	1d4d0 <complete_command+0xfc>
            append_char(line, ' ');
   1d492:	2120      	movs	r1, #32
   1d494:	9801      	ldr	r0, [sp, #4]
   1d496:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d498:	4798      	blx	r3
        return;
   1d49a:	e019      	b.n	1d4d0 <complete_command+0xfc>
        append_char(line, ' ');
   1d49c:	2120      	movs	r1, #32
   1d49e:	9801      	ldr	r0, [sp, #4]
   1d4a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d4a2:	4798      	blx	r3
        return;
   1d4a4:	e014      	b.n	1d4d0 <complete_command+0xfc>
    for (i = first_match + 1; commands[i].sc_cmd; i++) {
   1d4a6:	f109 0901 	add.w	r9, r9, #1
   1d4aa:	eb06 1309 	add.w	r3, r6, r9, lsl #4
   1d4ae:	689c      	ldr	r4, [r3, #8]
   1d4b0:	b15c      	cbz	r4, 1d4ca <complete_command+0xf6>
        if (0 == strncmp(command_prefix, commands[i].sc_cmd, command_len)) {
   1d4b2:	463a      	mov	r2, r7
   1d4b4:	4621      	mov	r1, r4
   1d4b6:	4658      	mov	r0, fp
   1d4b8:	f016 fefb 	bl	342b2 <strncmp>
   1d4bc:	2800      	cmp	r0, #0
   1d4be:	d1f2      	bne.n	1d4a6 <complete_command+0xd2>
            console_printf("%s\n", commands[i].sc_cmd);
   1d4c0:	4621      	mov	r1, r4
   1d4c2:	4806      	ldr	r0, [pc, #24]	; (1d4dc <complete_command+0x108>)
   1d4c4:	f7fe fe38 	bl	1c138 <console_printf>
   1d4c8:	e7ed      	b.n	1d4a6 <complete_command+0xd2>
    print_prompt(line);
   1d4ca:	9801      	ldr	r0, [sp, #4]
   1d4cc:	f7ff fedc 	bl	1d288 <print_prompt>
}
   1d4d0:	b003      	add	sp, #12
   1d4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d4d6:	bf00      	nop
   1d4d8:	10003f88 	.word	0x10003f88
   1d4dc:	00038924 	.word	0x00038924

0001d4e0 <get_command_from_module>:
{
   1d4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d4e4:	4680      	mov	r8, r0
   1d4e6:	460d      	mov	r5, r1
   1d4e8:	4616      	mov	r6, r2
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   1d4ea:	2400      	movs	r4, #0
   1d4ec:	e000      	b.n	1d4f0 <get_command_from_module+0x10>
   1d4ee:	3401      	adds	r4, #1
   1d4f0:	4b0c      	ldr	r3, [pc, #48]	; (1d524 <get_command_from_module+0x44>)
   1d4f2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1d4f6:	685b      	ldr	r3, [r3, #4]
   1d4f8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1d4fc:	689f      	ldr	r7, [r3, #8]
   1d4fe:	b167      	cbz	r7, 1d51a <get_command_from_module+0x3a>
        if (strlen(shell_module->commands[i].sc_cmd) != len) {
   1d500:	4638      	mov	r0, r7
   1d502:	f7fd fc0c 	bl	1ad1e <strlen>
   1d506:	42a8      	cmp	r0, r5
   1d508:	d1f1      	bne.n	1d4ee <get_command_from_module+0xe>
        if (!strncmp(command, shell_module->commands[i].sc_cmd, len)) {
   1d50a:	462a      	mov	r2, r5
   1d50c:	4639      	mov	r1, r7
   1d50e:	4640      	mov	r0, r8
   1d510:	f016 fecf 	bl	342b2 <strncmp>
   1d514:	2800      	cmp	r0, #0
   1d516:	d1ea      	bne.n	1d4ee <get_command_from_module+0xe>
   1d518:	e001      	b.n	1d51e <get_command_from_module+0x3e>
    return -1;
   1d51a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   1d51e:	4620      	mov	r0, r4
   1d520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d524:	10003f88 	.word	0x10003f88

0001d528 <complete_param>:
{
   1d528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d52c:	b083      	sub	sp, #12
   1d52e:	9001      	str	r0, [sp, #4]
   1d530:	9100      	str	r1, [sp, #0]
   1d532:	4691      	mov	r9, r2
    command = &shell_modules[module_idx].commands[command_idx];
   1d534:	4a33      	ldr	r2, [pc, #204]	; (1d604 <complete_param+0xdc>)
   1d536:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1d53a:	6857      	ldr	r7, [r2, #4]
   1d53c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d53e:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    if (!(command->help && command->help->params)) {
   1d542:	68fb      	ldr	r3, [r7, #12]
   1d544:	2b00      	cmp	r3, #0
   1d546:	d059      	beq.n	1d5fc <complete_param+0xd4>
   1d548:	689b      	ldr	r3, [r3, #8]
   1d54a:	2b00      	cmp	r3, #0
   1d54c:	d056      	beq.n	1d5fc <complete_param+0xd4>
    int i, j, common_chars = -1;
   1d54e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; command->help->params[i].param_name; i++) {
   1d552:	f04f 0a00 	mov.w	sl, #0
    const char *first_match = NULL;
   1d556:	4656      	mov	r6, sl
   1d558:	e015      	b.n	1d586 <complete_param+0x5e>
            console_printf("\n");
   1d55a:	482b      	ldr	r0, [pc, #172]	; (1d608 <complete_param+0xe0>)
   1d55c:	f7fe fdec 	bl	1c138 <console_printf>
            console_printf("%s\n", first_match);
   1d560:	4631      	mov	r1, r6
   1d562:	482a      	ldr	r0, [pc, #168]	; (1d60c <complete_param+0xe4>)
   1d564:	f7fe fde8 	bl	1c138 <console_printf>
            common_chars = strlen(first_match);
   1d568:	4630      	mov	r0, r6
   1d56a:	f7fd fbd8 	bl	1ad1e <strlen>
   1d56e:	4605      	mov	r5, r0
        for (j = 0; j < common_chars; j++) {
   1d570:	e01d      	b.n	1d5ae <complete_param+0x86>
        console_printf("%s\n", command->help->params[i].param_name);
   1d572:	68fb      	ldr	r3, [r7, #12]
   1d574:	689b      	ldr	r3, [r3, #8]
   1d576:	f853 1008 	ldr.w	r1, [r3, r8]
   1d57a:	4824      	ldr	r0, [pc, #144]	; (1d60c <complete_param+0xe4>)
   1d57c:	f7fe fddc 	bl	1c138 <console_printf>
        common_chars = j;
   1d580:	4625      	mov	r5, r4
    for (i = 0; command->help->params[i].param_name; i++) {
   1d582:	f10a 0a01 	add.w	sl, sl, #1
   1d586:	68fb      	ldr	r3, [r7, #12]
   1d588:	689b      	ldr	r3, [r3, #8]
   1d58a:	ea4f 08ca 	mov.w	r8, sl, lsl #3
   1d58e:	f853 b03a 	ldr.w	fp, [r3, sl, lsl #3]
   1d592:	f1bb 0f00 	cmp.w	fp, #0
   1d596:	d018      	beq.n	1d5ca <complete_param+0xa2>
        if (strncmp(param_prefix,
   1d598:	464a      	mov	r2, r9
   1d59a:	4659      	mov	r1, fp
   1d59c:	9800      	ldr	r0, [sp, #0]
   1d59e:	f016 fe88 	bl	342b2 <strncmp>
   1d5a2:	4604      	mov	r4, r0
   1d5a4:	2800      	cmp	r0, #0
   1d5a6:	d1ec      	bne.n	1d582 <complete_param+0x5a>
        if (!first_match) {
   1d5a8:	b16e      	cbz	r6, 1d5c6 <complete_param+0x9e>
        if (first_match && (common_chars < 0)) {
   1d5aa:	2d00      	cmp	r5, #0
   1d5ac:	dbd5      	blt.n	1d55a <complete_param+0x32>
        for (j = 0; j < common_chars; j++) {
   1d5ae:	42ac      	cmp	r4, r5
   1d5b0:	dadf      	bge.n	1d572 <complete_param+0x4a>
            if (first_match[j] != command->help->params[i].param_name[j]) {
   1d5b2:	5d32      	ldrb	r2, [r6, r4]
   1d5b4:	68fb      	ldr	r3, [r7, #12]
   1d5b6:	689b      	ldr	r3, [r3, #8]
   1d5b8:	f853 3008 	ldr.w	r3, [r3, r8]
   1d5bc:	5d1b      	ldrb	r3, [r3, r4]
   1d5be:	429a      	cmp	r2, r3
   1d5c0:	d1d7      	bne.n	1d572 <complete_param+0x4a>
        for (j = 0; j < common_chars; j++) {
   1d5c2:	3401      	adds	r4, #1
   1d5c4:	e7f3      	b.n	1d5ae <complete_param+0x86>
            first_match = command->help->params[i].param_name;
   1d5c6:	465e      	mov	r6, fp
   1d5c8:	e7db      	b.n	1d582 <complete_param+0x5a>
    if (!first_match) {
   1d5ca:	b1be      	cbz	r6, 1d5fc <complete_param+0xd4>
    if (common_chars >= 0) {
   1d5cc:	2d00      	cmp	r5, #0
   1d5ce:	da0f      	bge.n	1d5f0 <complete_param+0xc8>
        common_chars = strlen(first_match);
   1d5d0:	4630      	mov	r0, r6
   1d5d2:	f7fd fba4 	bl	1ad1e <strlen>
   1d5d6:	4605      	mov	r5, r0
    for (i = param_len; i < common_chars; i++) {
   1d5d8:	9c01      	ldr	r4, [sp, #4]
   1d5da:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1d5dc:	45a9      	cmp	r9, r5
   1d5de:	da0d      	bge.n	1d5fc <complete_param+0xd4>
        if (!append_char(line, first_match[i])) {
   1d5e0:	f816 1009 	ldrb.w	r1, [r6, r9]
   1d5e4:	4620      	mov	r0, r4
   1d5e6:	47b8      	blx	r7
   1d5e8:	b140      	cbz	r0, 1d5fc <complete_param+0xd4>
    for (i = param_len; i < common_chars; i++) {
   1d5ea:	f109 0901 	add.w	r9, r9, #1
   1d5ee:	e7f5      	b.n	1d5dc <complete_param+0xb4>
        print_prompt(line);
   1d5f0:	9c01      	ldr	r4, [sp, #4]
   1d5f2:	4620      	mov	r0, r4
   1d5f4:	f7ff fe48 	bl	1d288 <print_prompt>
   1d5f8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1d5fa:	e7ef      	b.n	1d5dc <complete_param+0xb4>
}
   1d5fc:	b003      	add	sp, #12
   1d5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d602:	bf00      	nop
   1d604:	10003f88 	.word	0x10003f88
   1d608:	00034744 	.word	0x00034744
   1d60c:	00038924 	.word	0x00038924

0001d610 <get_token>:
{
   1d610:	b570      	push	{r4, r5, r6, lr}
   1d612:	4605      	mov	r5, r0
   1d614:	460e      	mov	r6, r1
    char *str = *cur;
   1d616:	6804      	ldr	r4, [r0, #0]
    *null_terminated = 0;
   1d618:	2300      	movs	r3, #0
   1d61a:	600b      	str	r3, [r1, #0]
    while (*str && *str == ' ') {
   1d61c:	7823      	ldrb	r3, [r4, #0]
   1d61e:	2b20      	cmp	r3, #32
   1d620:	d101      	bne.n	1d626 <get_token+0x16>
        str++;
   1d622:	3401      	adds	r4, #1
   1d624:	e7fa      	b.n	1d61c <get_token+0xc>
    if (*str == '\0') {
   1d626:	b13b      	cbz	r3, 1d638 <get_token+0x28>
    *cur = str;
   1d628:	602c      	str	r4, [r5, #0]
    str = strchr(str, ' ');
   1d62a:	2120      	movs	r1, #32
   1d62c:	4620      	mov	r0, r4
   1d62e:	f016 fe2c 	bl	3428a <strchr>
    if (str == NULL) {
   1d632:	b128      	cbz	r0, 1d640 <get_token+0x30>
    return str - *cur;
   1d634:	1b00      	subs	r0, r0, r4
}
   1d636:	bd70      	pop	{r4, r5, r6, pc}
        *null_terminated = 1;
   1d638:	2301      	movs	r3, #1
   1d63a:	6033      	str	r3, [r6, #0]
        return 0;
   1d63c:	2000      	movs	r0, #0
   1d63e:	e7fa      	b.n	1d636 <get_token+0x26>
        *null_terminated = 1;
   1d640:	2301      	movs	r3, #1
   1d642:	6033      	str	r3, [r6, #0]
        return strlen(*cur);
   1d644:	6828      	ldr	r0, [r5, #0]
   1d646:	f7fd fb6a 	bl	1ad1e <strlen>
   1d64a:	e7f4      	b.n	1d636 <get_token+0x26>

0001d64c <complete_select>:

static void
complete_select(char *line, char *cur,
                int tok_len, console_append_char_cb append_char)
{
   1d64c:	b530      	push	{r4, r5, lr}
   1d64e:	b085      	sub	sp, #20
   1d650:	4604      	mov	r4, r0
   1d652:	461d      	mov	r5, r3
    int null_terminated = 0;
   1d654:	2000      	movs	r0, #0
   1d656:	9003      	str	r0, [sp, #12]

    cur += tok_len + 1;
   1d658:	3201      	adds	r2, #1
   1d65a:	4411      	add	r1, r2
   1d65c:	9101      	str	r1, [sp, #4]
    tok_len = get_token(&cur, &null_terminated);
   1d65e:	a903      	add	r1, sp, #12
   1d660:	a801      	add	r0, sp, #4
   1d662:	f7ff ffd5 	bl	1d610 <get_token>
    if (tok_len == 0) {
   1d666:	b120      	cbz	r0, 1d672 <complete_select+0x26>
   1d668:	4602      	mov	r2, r0
        print_modules(streamer_console_get());
        print_prompt(line);
        return;
    }

    if (null_terminated) {
   1d66a:	9b03      	ldr	r3, [sp, #12]
   1d66c:	b963      	cbnz	r3, 1d688 <complete_select+0x3c>
        complete_module(line, cur, tok_len, append_char);
    }
}
   1d66e:	b005      	add	sp, #20
   1d670:	bd30      	pop	{r4, r5, pc}
        console_out('\n');
   1d672:	200a      	movs	r0, #10
   1d674:	f7fe fbc8 	bl	1be08 <console_out>
        print_modules(streamer_console_get());
   1d678:	f001 f95e 	bl	1e938 <streamer_console_get>
   1d67c:	f7ff fc2a 	bl	1ced4 <print_modules>
        print_prompt(line);
   1d680:	4620      	mov	r0, r4
   1d682:	f7ff fe01 	bl	1d288 <print_prompt>
        return;
   1d686:	e7f2      	b.n	1d66e <complete_select+0x22>
        complete_module(line, cur, tok_len, append_char);
   1d688:	462b      	mov	r3, r5
   1d68a:	9901      	ldr	r1, [sp, #4]
   1d68c:	4620      	mov	r0, r4
   1d68e:	f7ff fe23 	bl	1d2d8 <complete_module>
   1d692:	e7ec      	b.n	1d66e <complete_select+0x22>

0001d694 <line2argv>:
{
   1d694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d698:	460e      	mov	r6, r1
   1d69a:	4617      	mov	r7, r2
   1d69c:	4698      	mov	r8, r3
    if (!strlen(str)) {
   1d69e:	7803      	ldrb	r3, [r0, #0]
   1d6a0:	b343      	cbz	r3, 1d6f4 <line2argv+0x60>
    while (*str && *str == ' ') {
   1d6a2:	7804      	ldrb	r4, [r0, #0]
   1d6a4:	2c20      	cmp	r4, #32
   1d6a6:	d101      	bne.n	1d6ac <line2argv+0x18>
        str++;
   1d6a8:	3001      	adds	r0, #1
   1d6aa:	e7fa      	b.n	1d6a2 <line2argv+0xe>
    if (!*str) {
   1d6ac:	b334      	cbz	r4, 1d6fc <line2argv+0x68>
    argv[argc++] = str;
   1d6ae:	6030      	str	r0, [r6, #0]
   1d6b0:	2501      	movs	r5, #1
    while ((str = strchr(str, ' '))) {
   1d6b2:	e006      	b.n	1d6c2 <line2argv+0x2e>
        if (!*str) {
   1d6b4:	b1d4      	cbz	r4, 1d6ec <line2argv+0x58>
        argv[argc++] = str;
   1d6b6:	1c6b      	adds	r3, r5, #1
   1d6b8:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
        if (argc == size) {
   1d6bc:	42bb      	cmp	r3, r7
   1d6be:	d00e      	beq.n	1d6de <line2argv+0x4a>
        argv[argc++] = str;
   1d6c0:	461d      	mov	r5, r3
    while ((str = strchr(str, ' '))) {
   1d6c2:	2120      	movs	r1, #32
   1d6c4:	f016 fde1 	bl	3428a <strchr>
   1d6c8:	4603      	mov	r3, r0
   1d6ca:	b178      	cbz	r0, 1d6ec <line2argv+0x58>
        *str++ = '\0';
   1d6cc:	4618      	mov	r0, r3
   1d6ce:	2300      	movs	r3, #0
   1d6d0:	f800 3b01 	strb.w	r3, [r0], #1
        while (*str && *str == ' ') {
   1d6d4:	7804      	ldrb	r4, [r0, #0]
   1d6d6:	2c20      	cmp	r4, #32
   1d6d8:	d1ec      	bne.n	1d6b4 <line2argv+0x20>
            str++;
   1d6da:	3001      	adds	r0, #1
   1d6dc:	e7fa      	b.n	1d6d4 <line2argv+0x40>
            streamer_printf(streamer, "Too many parameters (max %zu)\n",
   1d6de:	1e7a      	subs	r2, r7, #1
   1d6e0:	4907      	ldr	r1, [pc, #28]	; (1d700 <line2argv+0x6c>)
   1d6e2:	4640      	mov	r0, r8
   1d6e4:	f001 f90d 	bl	1e902 <streamer_printf>
            return 0;
   1d6e8:	2500      	movs	r5, #0
   1d6ea:	e004      	b.n	1d6f6 <line2argv+0x62>
    argv[argc] = NULL;
   1d6ec:	2300      	movs	r3, #0
   1d6ee:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
    return argc;
   1d6f2:	e000      	b.n	1d6f6 <line2argv+0x62>
        return 0;
   1d6f4:	2500      	movs	r5, #0
}
   1d6f6:	4628      	mov	r0, r5
   1d6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return 0;
   1d6fc:	2500      	movs	r5, #0
   1d6fe:	e7fa      	b.n	1d6f6 <line2argv+0x62>
   1d700:	00038788 	.word	0x00038788

0001d704 <get_last_token>:
{
   1d704:	b510      	push	{r4, lr}
   1d706:	4604      	mov	r4, r0
    *cur = strrchr(*cur, ' ');
   1d708:	2120      	movs	r1, #32
   1d70a:	6800      	ldr	r0, [r0, #0]
   1d70c:	f016 fde1 	bl	342d2 <strrchr>
   1d710:	6020      	str	r0, [r4, #0]
    if (*cur == NULL) {
   1d712:	b120      	cbz	r0, 1d71e <get_last_token+0x1a>
    (*cur)++;
   1d714:	3001      	adds	r0, #1
   1d716:	6020      	str	r0, [r4, #0]
    return strlen(*cur);
   1d718:	f7fd fb01 	bl	1ad1e <strlen>
}
   1d71c:	bd10      	pop	{r4, pc}
        return 0;
   1d71e:	2000      	movs	r0, #0
   1d720:	e7fc      	b.n	1d71c <get_last_token+0x18>
	...

0001d724 <completion>:

static void
completion(char *line, console_append_char_cb append_char)
{
   1d724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d728:	b085      	sub	sp, #20
   1d72a:	4606      	mov	r6, r0
   1d72c:	460c      	mov	r4, r1
    char *cur;
    int tok_len;
    int module, command;
    int null_terminated = 0;
   1d72e:	2100      	movs	r1, #0
   1d730:	9102      	str	r1, [sp, #8]
    int def_module = default_module;
   1d732:	4b53      	ldr	r3, [pc, #332]	; (1d880 <completion+0x15c>)
   1d734:	681f      	ldr	r7, [r3, #0]

    /*
     * line to completion is not ended by '\0' as the line that gets from
     * os_eventq_get function
     */
    if (!append_char(line, '\0')) {
   1d736:	47a0      	blx	r4
   1d738:	b910      	cbnz	r0, 1d740 <completion+0x1c>
        return;
    }
    complete_param(line, cur, tok_len,
                   module, command, append_char);
    return;
}
   1d73a:	b005      	add	sp, #20
   1d73c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cur = line;
   1d740:	9603      	str	r6, [sp, #12]
    tok_len = get_token(&cur, &null_terminated);
   1d742:	a902      	add	r1, sp, #8
   1d744:	a803      	add	r0, sp, #12
   1d746:	f7ff ff63 	bl	1d610 <get_token>
    if (tok_len > 0 && cur[0] == '/') {
   1d74a:	1e05      	subs	r5, r0, #0
   1d74c:	dd03      	ble.n	1d756 <completion+0x32>
   1d74e:	9b03      	ldr	r3, [sp, #12]
   1d750:	781a      	ldrb	r2, [r3, #0]
   1d752:	2a2f      	cmp	r2, #47	; 0x2f
   1d754:	d00d      	beq.n	1d772 <completion+0x4e>
    if (tok_len == 0) {
   1d756:	b195      	cbz	r5, 1d77e <completion+0x5a>
    if (null_terminated) {
   1d758:	9b02      	ldr	r3, [sp, #8]
   1d75a:	b363      	cbz	r3, 1d7b6 <completion+0x92>
        if (def_module == -1) {
   1d75c:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   1d760:	d022      	beq.n	1d7a8 <completion+0x84>
        complete_command(line, cur, tok_len,
   1d762:	9400      	str	r4, [sp, #0]
   1d764:	463b      	mov	r3, r7
   1d766:	462a      	mov	r2, r5
   1d768:	9903      	ldr	r1, [sp, #12]
   1d76a:	4630      	mov	r0, r6
   1d76c:	f7ff fe32 	bl	1d3d4 <complete_command>
        return;
   1d770:	e7e3      	b.n	1d73a <completion+0x16>
        tok_len--;
   1d772:	3d01      	subs	r5, #1
        cur++;
   1d774:	3301      	adds	r3, #1
   1d776:	9303      	str	r3, [sp, #12]
        def_module = -1;
   1d778:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1d77c:	e7eb      	b.n	1d756 <completion+0x32>
        console_out('\n');
   1d77e:	200a      	movs	r0, #10
   1d780:	f7fe fb42 	bl	1be08 <console_out>
        if (def_module == -1) {
   1d784:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   1d788:	d009      	beq.n	1d79e <completion+0x7a>
            print_module_commands(def_module, streamer_console_get());
   1d78a:	f001 f8d5 	bl	1e938 <streamer_console_get>
   1d78e:	4601      	mov	r1, r0
   1d790:	4638      	mov	r0, r7
   1d792:	f7ff fb69 	bl	1ce68 <print_module_commands>
        print_prompt(line);
   1d796:	4630      	mov	r0, r6
   1d798:	f7ff fd76 	bl	1d288 <print_prompt>
        return;
   1d79c:	e7cd      	b.n	1d73a <completion+0x16>
            print_modules(streamer_console_get());
   1d79e:	f001 f8cb 	bl	1e938 <streamer_console_get>
   1d7a2:	f7ff fb97 	bl	1ced4 <print_modules>
   1d7a6:	e7f6      	b.n	1d796 <completion+0x72>
            complete_module(line, cur, tok_len, append_char);
   1d7a8:	4623      	mov	r3, r4
   1d7aa:	462a      	mov	r2, r5
   1d7ac:	9903      	ldr	r1, [sp, #12]
   1d7ae:	4630      	mov	r0, r6
   1d7b0:	f7ff fd92 	bl	1d2d8 <complete_module>
            return;
   1d7b4:	e7c1      	b.n	1d73a <completion+0x16>
    if (strncmp("select", cur, tok_len) == 0) {
   1d7b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1d7ba:	462a      	mov	r2, r5
   1d7bc:	4641      	mov	r1, r8
   1d7be:	4831      	ldr	r0, [pc, #196]	; (1d884 <completion+0x160>)
   1d7c0:	f016 fd77 	bl	342b2 <strncmp>
   1d7c4:	b1f0      	cbz	r0, 1d804 <completion+0xe0>
    if (def_module != -1) {
   1d7c6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   1d7ca:	d022      	beq.n	1d812 <completion+0xee>
    command = get_command_from_module(cur, tok_len, module);
   1d7cc:	f8dd 900c 	ldr.w	r9, [sp, #12]
   1d7d0:	463a      	mov	r2, r7
   1d7d2:	4629      	mov	r1, r5
   1d7d4:	4648      	mov	r0, r9
   1d7d6:	f7ff fe83 	bl	1d4e0 <get_command_from_module>
   1d7da:	4680      	mov	r8, r0
    if (command == -1) {
   1d7dc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1d7e0:	d0ab      	beq.n	1d73a <completion+0x16>
    cur += tok_len;
   1d7e2:	444d      	add	r5, r9
   1d7e4:	9503      	str	r5, [sp, #12]
    tok_len = get_last_token(&cur);
   1d7e6:	a803      	add	r0, sp, #12
   1d7e8:	f7ff ff8c 	bl	1d704 <get_last_token>
    if (tok_len == 0) {
   1d7ec:	4602      	mov	r2, r0
   1d7ee:	2800      	cmp	r0, #0
   1d7f0:	d038      	beq.n	1d864 <completion+0x140>
    complete_param(line, cur, tok_len,
   1d7f2:	9401      	str	r4, [sp, #4]
   1d7f4:	f8cd 8000 	str.w	r8, [sp]
   1d7f8:	463b      	mov	r3, r7
   1d7fa:	9903      	ldr	r1, [sp, #12]
   1d7fc:	4630      	mov	r0, r6
   1d7fe:	f7ff fe93 	bl	1d528 <complete_param>
    return;
   1d802:	e79a      	b.n	1d73a <completion+0x16>
        complete_select(line, cur, tok_len, append_char);
   1d804:	4623      	mov	r3, r4
   1d806:	462a      	mov	r2, r5
   1d808:	4641      	mov	r1, r8
   1d80a:	4630      	mov	r0, r6
   1d80c:	f7ff ff1e 	bl	1d64c <complete_select>
        return;
   1d810:	e793      	b.n	1d73a <completion+0x16>
        module = get_destination_module(cur, tok_len);
   1d812:	4629      	mov	r1, r5
   1d814:	4640      	mov	r0, r8
   1d816:	f7ff fb97 	bl	1cf48 <get_destination_module>
   1d81a:	4607      	mov	r7, r0
        if (module == -1) {
   1d81c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1d820:	d08b      	beq.n	1d73a <completion+0x16>
        cur += tok_len + 1;
   1d822:	1c6b      	adds	r3, r5, #1
   1d824:	4443      	add	r3, r8
   1d826:	9303      	str	r3, [sp, #12]
        tok_len = get_token(&cur, &null_terminated);
   1d828:	a902      	add	r1, sp, #8
   1d82a:	a803      	add	r0, sp, #12
   1d82c:	f7ff fef0 	bl	1d610 <get_token>
        if (tok_len == 0) {
   1d830:	4605      	mov	r5, r0
   1d832:	b150      	cbz	r0, 1d84a <completion+0x126>
        if (null_terminated) {
   1d834:	9b02      	ldr	r3, [sp, #8]
   1d836:	2b00      	cmp	r3, #0
   1d838:	d0c8      	beq.n	1d7cc <completion+0xa8>
            complete_command(line, cur, tok_len,
   1d83a:	9400      	str	r4, [sp, #0]
   1d83c:	463b      	mov	r3, r7
   1d83e:	4602      	mov	r2, r0
   1d840:	9903      	ldr	r1, [sp, #12]
   1d842:	4630      	mov	r0, r6
   1d844:	f7ff fdc6 	bl	1d3d4 <complete_command>
            return;
   1d848:	e777      	b.n	1d73a <completion+0x16>
            console_out('\n');
   1d84a:	200a      	movs	r0, #10
   1d84c:	f7fe fadc 	bl	1be08 <console_out>
            print_module_commands(module, streamer_console_get());
   1d850:	f001 f872 	bl	1e938 <streamer_console_get>
   1d854:	4601      	mov	r1, r0
   1d856:	4638      	mov	r0, r7
   1d858:	f7ff fb06 	bl	1ce68 <print_module_commands>
            print_prompt(line);
   1d85c:	4630      	mov	r0, r6
   1d85e:	f7ff fd13 	bl	1d288 <print_prompt>
            return;
   1d862:	e76a      	b.n	1d73a <completion+0x16>
        console_out('\n');
   1d864:	200a      	movs	r0, #10
   1d866:	f7fe facf 	bl	1be08 <console_out>
        print_command_params(module, command, streamer_console_get());
   1d86a:	f001 f865 	bl	1e938 <streamer_console_get>
   1d86e:	4602      	mov	r2, r0
   1d870:	4641      	mov	r1, r8
   1d872:	4638      	mov	r0, r7
   1d874:	f7ff fb46 	bl	1cf04 <print_command_params>
        print_prompt(line);
   1d878:	4630      	mov	r0, r6
   1d87a:	f7ff fd05 	bl	1d288 <print_prompt>
        return;
   1d87e:	e75c      	b.n	1d73a <completion+0x16>
   1d880:	100006a8 	.word	0x100006a8
   1d884:	000386e4 	.word	0x000386e4

0001d888 <shell_avail_queue_init>:
    }
}

static void
shell_avail_queue_init(void)
{
   1d888:	b510      	push	{r4, lr}
    int i;

    for (i = 0; i < MYNEWT_VAL(SHELL_MAX_CMD_QUEUED); i++) {
   1d88a:	2400      	movs	r4, #0
   1d88c:	e00b      	b.n	1d8a6 <shell_avail_queue_init+0x1e>
        shell_console_ev[i].ev_cb = shell;
   1d88e:	4807      	ldr	r0, [pc, #28]	; (1d8ac <shell_avail_queue_init+0x24>)
   1d890:	eb00 1004 	add.w	r0, r0, r4, lsl #4
   1d894:	4b06      	ldr	r3, [pc, #24]	; (1d8b0 <shell_avail_queue_init+0x28>)
   1d896:	6043      	str	r3, [r0, #4]
        shell_console_ev[i].ev_arg = &buf[i];
   1d898:	4b06      	ldr	r3, [pc, #24]	; (1d8b4 <shell_avail_queue_init+0x2c>)
   1d89a:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   1d89e:	6083      	str	r3, [r0, #8]
        console_line_event_put(&shell_console_ev[i]);
   1d8a0:	f7fe fc12 	bl	1c0c8 <console_line_event_put>
    for (i = 0; i < MYNEWT_VAL(SHELL_MAX_CMD_QUEUED); i++) {
   1d8a4:	3401      	adds	r4, #1
   1d8a6:	2c01      	cmp	r4, #1
   1d8a8:	ddf1      	ble.n	1d88e <shell_avail_queue_init+0x6>
    }
}
   1d8aa:	bd10      	pop	{r4, pc}
   1d8ac:	10003f68 	.word	0x10003f68
   1d8b0:	0001d9ab 	.word	0x0001d9ab
   1d8b4:	10003c08 	.word	0x10003c08

0001d8b8 <shell_evq_set>:
{
   1d8b8:	b508      	push	{r3, lr}
    console_line_queue_set(shell_evq);
   1d8ba:	f7fe fbff 	bl	1c0bc <console_line_queue_set>
}
   1d8be:	bd08      	pop	{r3, pc}

0001d8c0 <shell_exec>:
{
   1d8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d8c4:	4607      	mov	r7, r0
   1d8c6:	460c      	mov	r4, r1
   1d8c8:	4616      	mov	r6, r2
    int def_module = default_module;
   1d8ca:	4b28      	ldr	r3, [pc, #160]	; (1d96c <shell_exec+0xac>)
   1d8cc:	f8d3 8000 	ldr.w	r8, [r3]
    cmd = shell_find_cmd(argc, argv, streamer);
   1d8d0:	f7ff fbbe 	bl	1d050 <shell_find_cmd>
    if (!cmd) {
   1d8d4:	4605      	mov	r5, r0
   1d8d6:	b1c8      	cbz	r0, 1d90c <shell_exec+0x4c>
    if (argv[0][0] == '/') {
   1d8d8:	6823      	ldr	r3, [r4, #0]
   1d8da:	781b      	ldrb	r3, [r3, #0]
   1d8dc:	2b2f      	cmp	r3, #47	; 0x2f
   1d8de:	d029      	beq.n	1d934 <shell_exec+0x74>
    if (def_module == -1 && cmd != &shell_cmd_select_module &&
   1d8e0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1d8e4:	d026      	beq.n	1d934 <shell_exec+0x74>
    size_t argc_offset = 0;
   1d8e6:	2000      	movs	r0, #0
    if (!cmd->sc_ext) {
   1d8e8:	782b      	ldrb	r3, [r5, #0]
   1d8ea:	f013 0f01 	tst.w	r3, #1
   1d8ee:	d12d      	bne.n	1d94c <shell_exec+0x8c>
        rc = cmd->sc_cmd_func(argc - argc_offset, &argv[argc_offset]);
   1d8f0:	686b      	ldr	r3, [r5, #4]
   1d8f2:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   1d8f6:	1a38      	subs	r0, r7, r0
   1d8f8:	4798      	blx	r3
   1d8fa:	4605      	mov	r5, r0
    if (rc < 0) {
   1d8fc:	2d00      	cmp	r5, #0
   1d8fe:	db2f      	blt.n	1d960 <shell_exec+0xa0>
    print_prompt_if_console(streamer);
   1d900:	4630      	mov	r0, r6
   1d902:	f7ff fcdd 	bl	1d2c0 <print_prompt_if_console>
}
   1d906:	4628      	mov	r0, r5
   1d908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (app_cmd.sc_cmd_func != NULL) {
   1d90c:	4b18      	ldr	r3, [pc, #96]	; (1d970 <shell_exec+0xb0>)
   1d90e:	685b      	ldr	r3, [r3, #4]
   1d910:	b10b      	cbz	r3, 1d916 <shell_exec+0x56>
            cmd = &app_cmd;
   1d912:	4d17      	ldr	r5, [pc, #92]	; (1d970 <shell_exec+0xb0>)
   1d914:	e7e0      	b.n	1d8d8 <shell_exec+0x18>
            streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
   1d916:	6822      	ldr	r2, [r4, #0]
   1d918:	4916      	ldr	r1, [pc, #88]	; (1d974 <shell_exec+0xb4>)
   1d91a:	4630      	mov	r0, r6
   1d91c:	f000 fff1 	bl	1e902 <streamer_printf>
            streamer_printf(streamer,
   1d920:	4915      	ldr	r1, [pc, #84]	; (1d978 <shell_exec+0xb8>)
   1d922:	4630      	mov	r0, r6
   1d924:	f000 ffed 	bl	1e902 <streamer_printf>
            print_prompt_if_console(streamer);
   1d928:	4630      	mov	r0, r6
   1d92a:	f7ff fcc9 	bl	1d2c0 <print_prompt_if_console>
            return SYS_ENOENT;
   1d92e:	f06f 0503 	mvn.w	r5, #3
   1d932:	e7e8      	b.n	1d906 <shell_exec+0x46>
    if (def_module == -1 && cmd != &shell_cmd_select_module &&
   1d934:	4b11      	ldr	r3, [pc, #68]	; (1d97c <shell_exec+0xbc>)
   1d936:	429d      	cmp	r5, r3
   1d938:	d006      	beq.n	1d948 <shell_exec+0x88>
   1d93a:	4b11      	ldr	r3, [pc, #68]	; (1d980 <shell_exec+0xc0>)
   1d93c:	429d      	cmp	r5, r3
   1d93e:	d001      	beq.n	1d944 <shell_exec+0x84>
        argc_offset = 1;
   1d940:	2001      	movs	r0, #1
   1d942:	e7d1      	b.n	1d8e8 <shell_exec+0x28>
    size_t argc_offset = 0;
   1d944:	2000      	movs	r0, #0
   1d946:	e7cf      	b.n	1d8e8 <shell_exec+0x28>
   1d948:	2000      	movs	r0, #0
   1d94a:	e7cd      	b.n	1d8e8 <shell_exec+0x28>
        rc = cmd->sc_cmd_ext_func(cmd, argc - argc_offset, &argv[argc_offset],
   1d94c:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1d950:	4633      	mov	r3, r6
   1d952:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1d956:	1a39      	subs	r1, r7, r0
   1d958:	4628      	mov	r0, r5
   1d95a:	47c0      	blx	r8
   1d95c:	4605      	mov	r5, r0
   1d95e:	e7cd      	b.n	1d8fc <shell_exec+0x3c>
        show_cmd_help(argv, streamer);
   1d960:	4631      	mov	r1, r6
   1d962:	4620      	mov	r0, r4
   1d964:	f7ff fbdc 	bl	1d120 <show_cmd_help>
   1d968:	e7ca      	b.n	1d900 <shell_exec+0x40>
   1d96a:	bf00      	nop
   1d96c:	100006a8 	.word	0x100006a8
   1d970:	10003bf4 	.word	0x10003bf4
   1d974:	00038698 	.word	0x00038698
   1d978:	000387a8 	.word	0x000387a8
   1d97c:	00038868 	.word	0x00038868
   1d980:	00038858 	.word	0x00038858

0001d984 <shell_process_command>:
{
   1d984:	b510      	push	{r4, lr}
   1d986:	b08e      	sub	sp, #56	; 0x38
   1d988:	460c      	mov	r4, r1
    argc = line2argv(line, argv, MYNEWT_VAL(SHELL_CMD_ARGC_MAX) + 1, streamer);
   1d98a:	460b      	mov	r3, r1
   1d98c:	220d      	movs	r2, #13
   1d98e:	a901      	add	r1, sp, #4
   1d990:	f7ff fe80 	bl	1d694 <line2argv>
    if (!argc) {
   1d994:	b128      	cbz	r0, 1d9a2 <shell_process_command+0x1e>
    shell_exec(argc, argv, streamer);
   1d996:	4622      	mov	r2, r4
   1d998:	a901      	add	r1, sp, #4
   1d99a:	f7ff ff91 	bl	1d8c0 <shell_exec>
}
   1d99e:	b00e      	add	sp, #56	; 0x38
   1d9a0:	bd10      	pop	{r4, pc}
        print_prompt_if_console(streamer);
   1d9a2:	4620      	mov	r0, r4
   1d9a4:	f7ff fc8c 	bl	1d2c0 <print_prompt_if_console>
        return;
   1d9a8:	e7f9      	b.n	1d99e <shell_process_command+0x1a>

0001d9aa <shell>:
{
   1d9aa:	b538      	push	{r3, r4, r5, lr}
    if (!ev) {
   1d9ac:	b160      	cbz	r0, 1d9c8 <shell+0x1e>
   1d9ae:	4604      	mov	r4, r0
    cmd = ev->ev_arg;
   1d9b0:	6885      	ldr	r5, [r0, #8]
    if (!cmd) {
   1d9b2:	b165      	cbz	r5, 1d9ce <shell+0x24>
    streamer = streamer_console_get();
   1d9b4:	f000 ffc0 	bl	1e938 <streamer_console_get>
   1d9b8:	4601      	mov	r1, r0
    shell_process_command(cmd->line, streamer);
   1d9ba:	4628      	mov	r0, r5
   1d9bc:	f7ff ffe2 	bl	1d984 <shell_process_command>
    console_line_event_put(ev);
   1d9c0:	4620      	mov	r0, r4
   1d9c2:	f7fe fb81 	bl	1c0c8 <console_line_event_put>
}
   1d9c6:	bd38      	pop	{r3, r4, r5, pc}
        print_prompt(NULL);
   1d9c8:	f7ff fc5e 	bl	1d288 <print_prompt>
        return;
   1d9cc:	e7fb      	b.n	1d9c6 <shell+0x1c>
        print_prompt(NULL);
   1d9ce:	2000      	movs	r0, #0
   1d9d0:	f7ff fc5a 	bl	1d288 <print_prompt>
        return;
   1d9d4:	e7f7      	b.n	1d9c6 <shell+0x1c>

0001d9d6 <shell_register_default_module>:
{
   1d9d6:	b508      	push	{r3, lr}
    int result = set_default_module(name);
   1d9d8:	f7ff fadc 	bl	1cf94 <set_default_module>
    if (result != -1) {
   1d9dc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1d9e0:	d100      	bne.n	1d9e4 <shell_register_default_module+0xe>
}
   1d9e2:	bd08      	pop	{r3, pc}
        console_out('\n');
   1d9e4:	200a      	movs	r0, #10
   1d9e6:	f7fe fa0f 	bl	1be08 <console_out>
        print_prompt(NULL);
   1d9ea:	2000      	movs	r0, #0
   1d9ec:	f7ff fc4c 	bl	1d288 <print_prompt>
}
   1d9f0:	e7f7      	b.n	1d9e2 <shell_register_default_module+0xc>
	...

0001d9f4 <shell_register>:

int
shell_register(const char *module_name, const struct shell_cmd *commands)
{
   1d9f4:	b508      	push	{r3, lr}
    if (num_of_shell_entities >= MYNEWT_VAL(SHELL_MAX_MODULES)) {
   1d9f6:	4b0f      	ldr	r3, [pc, #60]	; (1da34 <shell_register+0x40>)
   1d9f8:	681b      	ldr	r3, [r3, #0]
   1d9fa:	2b02      	cmp	r3, #2
   1d9fc:	d80a      	bhi.n	1da14 <shell_register+0x20>
        DFLT_LOG_ERROR("Max number of modules reached\n");
        assert(0);
    }

    shell_modules[num_of_shell_entities].name = module_name;
   1d9fe:	4a0e      	ldr	r2, [pc, #56]	; (1da38 <shell_register+0x44>)
   1da00:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    shell_modules[num_of_shell_entities].commands = commands;
   1da04:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1da08:	6051      	str	r1, [r2, #4]
    ++num_of_shell_entities;
   1da0a:	3301      	adds	r3, #1
   1da0c:	4a09      	ldr	r2, [pc, #36]	; (1da34 <shell_register+0x40>)
   1da0e:	6013      	str	r3, [r2, #0]

    return 0;
}
   1da10:	2000      	movs	r0, #0
   1da12:	bd08      	pop	{r3, pc}
        DFLT_LOG_ERROR("Max number of modules reached\n");
   1da14:	4a09      	ldr	r2, [pc, #36]	; (1da3c <shell_register+0x48>)
   1da16:	2103      	movs	r1, #3
   1da18:	2000      	movs	r0, #0
   1da1a:	f7ff f987 	bl	1cd2c <modlog_printf>
        assert(0);
   1da1e:	f7f6 fe69 	bl	146f4 <hal_debugger_connected>
   1da22:	b100      	cbz	r0, 1da26 <shell_register+0x32>
   1da24:	be01      	bkpt	0x0001
   1da26:	2300      	movs	r3, #0
   1da28:	461a      	mov	r2, r3
   1da2a:	4619      	mov	r1, r3
   1da2c:	4618      	mov	r0, r3
   1da2e:	f7fb f97f 	bl	18d30 <__assert_func>
   1da32:	bf00      	nop
   1da34:	10003f60 	.word	0x10003f60
   1da38:	10003f88 	.word	0x10003f88
   1da3c:	000387d4 	.word	0x000387d4

0001da40 <shell_cmd_register>:
static int num_compat_commands;
static int module_registered;

int
shell_cmd_register(const struct shell_cmd *sc)
{
   1da40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int rc;

    if (num_compat_commands >= MYNEWT_VAL(SHELL_MAX_COMPAT_COMMANDS)) {
   1da42:	4b1c      	ldr	r3, [pc, #112]	; (1dab4 <shell_cmd_register+0x74>)
   1da44:	681b      	ldr	r3, [r3, #0]
   1da46:	2b13      	cmp	r3, #19
   1da48:	dc10      	bgt.n	1da6c <shell_cmd_register+0x2c>
   1da4a:	4604      	mov	r4, r0
        DFLT_LOG_ERROR(
                     "Max number of compat commands reached\n");
        assert(0);
    }

    if (!module_registered) {
   1da4c:	4b1a      	ldr	r3, [pc, #104]	; (1dab8 <shell_cmd_register+0x78>)
   1da4e:	681b      	ldr	r3, [r3, #0]
   1da50:	b1db      	cbz	r3, 1da8a <shell_cmd_register+0x4a>
                         "Illegal module %s, default is not changed\n",
                         SHELL_COMPAT_MODULE_NAME);
        }
    }

    compat_commands[num_compat_commands] = *sc;
   1da52:	4f18      	ldr	r7, [pc, #96]	; (1dab4 <shell_cmd_register+0x74>)
   1da54:	683e      	ldr	r6, [r7, #0]
   1da56:	4d19      	ldr	r5, [pc, #100]	; (1dabc <shell_cmd_register+0x7c>)
   1da58:	eb05 1506 	add.w	r5, r5, r6, lsl #4
   1da5c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1da60:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    ++num_compat_commands;
   1da64:	3601      	adds	r6, #1
   1da66:	603e      	str	r6, [r7, #0]
    return 0;
}
   1da68:	2000      	movs	r0, #0
   1da6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        DFLT_LOG_ERROR(
   1da6c:	4a14      	ldr	r2, [pc, #80]	; (1dac0 <shell_cmd_register+0x80>)
   1da6e:	2103      	movs	r1, #3
   1da70:	2000      	movs	r0, #0
   1da72:	f7ff f95b 	bl	1cd2c <modlog_printf>
        assert(0);
   1da76:	f7f6 fe3d 	bl	146f4 <hal_debugger_connected>
   1da7a:	b100      	cbz	r0, 1da7e <shell_cmd_register+0x3e>
   1da7c:	be01      	bkpt	0x0001
   1da7e:	2300      	movs	r3, #0
   1da80:	461a      	mov	r2, r3
   1da82:	4619      	mov	r1, r3
   1da84:	4618      	mov	r0, r3
   1da86:	f7fb f953 	bl	18d30 <__assert_func>
        shell_register(SHELL_COMPAT_MODULE_NAME, compat_commands);
   1da8a:	4d0e      	ldr	r5, [pc, #56]	; (1dac4 <shell_cmd_register+0x84>)
   1da8c:	490b      	ldr	r1, [pc, #44]	; (1dabc <shell_cmd_register+0x7c>)
   1da8e:	4628      	mov	r0, r5
   1da90:	f7ff ffb0 	bl	1d9f4 <shell_register>
        module_registered = 1;
   1da94:	4b08      	ldr	r3, [pc, #32]	; (1dab8 <shell_cmd_register+0x78>)
   1da96:	2201      	movs	r2, #1
   1da98:	601a      	str	r2, [r3, #0]
        rc = set_default_module(SHELL_COMPAT_MODULE_NAME);
   1da9a:	4628      	mov	r0, r5
   1da9c:	f7ff fa7a 	bl	1cf94 <set_default_module>
        if (rc != 0) {
   1daa0:	2800      	cmp	r0, #0
   1daa2:	d0d6      	beq.n	1da52 <shell_cmd_register+0x12>
            DFLT_LOG_ERROR(
   1daa4:	462b      	mov	r3, r5
   1daa6:	4a08      	ldr	r2, [pc, #32]	; (1dac8 <shell_cmd_register+0x88>)
   1daa8:	2103      	movs	r1, #3
   1daaa:	2000      	movs	r0, #0
   1daac:	f7ff f93e 	bl	1cd2c <modlog_printf>
   1dab0:	e7cf      	b.n	1da52 <shell_cmd_register+0x12>
   1dab2:	bf00      	nop
   1dab4:	10003f5c 	.word	0x10003f5c
   1dab8:	10003f58 	.word	0x10003f58
   1dabc:	10003e08 	.word	0x10003e08
   1dac0:	000387f4 	.word	0x000387f4
   1dac4:	0003881c 	.word	0x0003881c
   1dac8:	00038824 	.word	0x00038824

0001dacc <shell_init>:
#endif

void
shell_init(void)
{
   1dacc:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1dace:	4b0e      	ldr	r3, [pc, #56]	; (1db08 <shell_init+0x3c>)
   1dad0:	781b      	ldrb	r3, [r3, #0]
   1dad2:	b173      	cbz	r3, 1daf2 <shell_init+0x26>

#if !MYNEWT_VAL(SHELL_TASK)
    return;
#endif

    shell_avail_queue_init();
   1dad4:	f7ff fed8 	bl	1d888 <shell_avail_queue_init>
    shell_evq_set(os_eventq_dflt_get());
   1dad8:	f7fb fd36 	bl	19548 <os_eventq_dflt_get>
   1dadc:	f7ff feec 	bl	1d8b8 <shell_evq_set>

    prompt = SHELL_PROMPT;
   1dae0:	4b0a      	ldr	r3, [pc, #40]	; (1db0c <shell_init+0x40>)
   1dae2:	4a0b      	ldr	r2, [pc, #44]	; (1db10 <shell_init+0x44>)
   1dae4:	601a      	str	r2, [r3, #0]
#if MYNEWT_VAL(SHELL_MGMT)
    shell_nlip_init();
#endif

#if MYNEWT_VAL(SHELL_COMPLETION)
    console_set_completion_cb(completion);
   1dae6:	480b      	ldr	r0, [pc, #44]	; (1db14 <shell_init+0x48>)
   1dae8:	f7fe fb02 	bl	1c0f0 <console_set_completion_cb>
#endif

#if MYNEWT_VAL(SHELL_OS_MODULE)
    shell_os_register();
   1daec:	f000 f966 	bl	1ddbc <shell_os_register>
    shell_prompt_register();
#endif
#if MYNEWT_VAL(SHELL_BRIDGE)
    shell_bridge_init();
#endif
}
   1daf0:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1daf2:	f7f6 fdff 	bl	146f4 <hal_debugger_connected>
   1daf6:	b100      	cbz	r0, 1dafa <shell_init+0x2e>
   1daf8:	be01      	bkpt	0x0001
   1dafa:	2300      	movs	r3, #0
   1dafc:	461a      	mov	r2, r3
   1dafe:	4619      	mov	r1, r3
   1db00:	4618      	mov	r0, r3
   1db02:	f7fb f915 	bl	18d30 <__assert_func>
   1db06:	bf00      	nop
   1db08:	10003fd8 	.word	0x10003fd8
   1db0c:	10003f64 	.word	0x10003f64
   1db10:	00038850 	.word	0x00038850
   1db14:	0001d725 	.word	0x0001d725

0001db18 <shell_os_ls_dev>:
    return 0;
}

static int
shell_os_ls_dev(struct os_dev *dev, void *arg)
{
   1db18:	b500      	push	{lr}
   1db1a:	b083      	sub	sp, #12
   1db1c:	4602      	mov	r2, r0
   1db1e:	4608      	mov	r0, r1
    struct streamer *streamer;

    streamer = arg;
    streamer_printf(streamer, "%4d %3x %s\n",
   1db20:	69d3      	ldr	r3, [r2, #28]
   1db22:	9300      	str	r3, [sp, #0]
   1db24:	7ed3      	ldrb	r3, [r2, #27]
   1db26:	7e92      	ldrb	r2, [r2, #26]
   1db28:	4903      	ldr	r1, [pc, #12]	; (1db38 <shell_os_ls_dev+0x20>)
   1db2a:	f000 feea 	bl	1e902 <streamer_printf>
                    dev->od_open_ref, dev->od_flags, dev->od_name);
    return 0;
}
   1db2e:	2000      	movs	r0, #0
   1db30:	b003      	add	sp, #12
   1db32:	f85d fb04 	ldr.w	pc, [sp], #4
   1db36:	bf00      	nop
   1db38:	00038878 	.word	0x00038878

0001db3c <shell_os_mpool_display_cmd>:
{
   1db3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db3e:	b091      	sub	sp, #68	; 0x44
   1db40:	461e      	mov	r6, r3
    if (argc > 1 && strcmp(argv[1], "")) {
   1db42:	2901      	cmp	r1, #1
   1db44:	dd04      	ble.n	1db50 <shell_os_mpool_display_cmd+0x14>
   1db46:	6855      	ldr	r5, [r2, #4]
   1db48:	782b      	ldrb	r3, [r5, #0]
   1db4a:	b913      	cbnz	r3, 1db52 <shell_os_mpool_display_cmd+0x16>
    name = NULL;
   1db4c:	2500      	movs	r5, #0
   1db4e:	e000      	b.n	1db52 <shell_os_mpool_display_cmd+0x16>
   1db50:	2500      	movs	r5, #0
    streamer_printf(streamer, "Mempools: \n");
   1db52:	491d      	ldr	r1, [pc, #116]	; (1dbc8 <shell_os_mpool_display_cmd+0x8c>)
   1db54:	4630      	mov	r0, r6
   1db56:	f000 fed4 	bl	1e902 <streamer_printf>
    streamer_printf(streamer, "%32s %5s %4s %4s %4s\n",
   1db5a:	4b1c      	ldr	r3, [pc, #112]	; (1dbcc <shell_os_mpool_display_cmd+0x90>)
   1db5c:	9302      	str	r3, [sp, #8]
   1db5e:	4b1c      	ldr	r3, [pc, #112]	; (1dbd0 <shell_os_mpool_display_cmd+0x94>)
   1db60:	9301      	str	r3, [sp, #4]
   1db62:	4b1c      	ldr	r3, [pc, #112]	; (1dbd4 <shell_os_mpool_display_cmd+0x98>)
   1db64:	9300      	str	r3, [sp, #0]
   1db66:	4b1c      	ldr	r3, [pc, #112]	; (1dbd8 <shell_os_mpool_display_cmd+0x9c>)
   1db68:	4a1c      	ldr	r2, [pc, #112]	; (1dbdc <shell_os_mpool_display_cmd+0xa0>)
   1db6a:	491d      	ldr	r1, [pc, #116]	; (1dbe0 <shell_os_mpool_display_cmd+0xa4>)
   1db6c:	4630      	mov	r0, r6
   1db6e:	f000 fec8 	bl	1e902 <streamer_printf>
    found = 0;
   1db72:	2700      	movs	r7, #0
    mp = NULL;
   1db74:	463c      	mov	r4, r7
   1db76:	e00b      	b.n	1db90 <shell_os_mpool_display_cmd+0x54>
        streamer_printf(streamer, "%32s %5d %4d %4d %4d\n", omi.omi_name,
   1db78:	9b07      	ldr	r3, [sp, #28]
   1db7a:	9302      	str	r3, [sp, #8]
   1db7c:	9a06      	ldr	r2, [sp, #24]
   1db7e:	9201      	str	r2, [sp, #4]
   1db80:	9a05      	ldr	r2, [sp, #20]
   1db82:	9200      	str	r2, [sp, #0]
   1db84:	9b04      	ldr	r3, [sp, #16]
   1db86:	aa08      	add	r2, sp, #32
   1db88:	4916      	ldr	r1, [pc, #88]	; (1dbe4 <shell_os_mpool_display_cmd+0xa8>)
   1db8a:	4630      	mov	r0, r6
   1db8c:	f000 feb9 	bl	1e902 <streamer_printf>
        mp = os_mempool_info_get_next(mp, &omi);
   1db90:	a904      	add	r1, sp, #16
   1db92:	4620      	mov	r0, r4
   1db94:	f7fc f998 	bl	19ec8 <os_mempool_info_get_next>
        if (mp == NULL) {
   1db98:	4604      	mov	r4, r0
   1db9a:	b148      	cbz	r0, 1dbb0 <shell_os_mpool_display_cmd+0x74>
        if (name) {
   1db9c:	2d00      	cmp	r5, #0
   1db9e:	d0eb      	beq.n	1db78 <shell_os_mpool_display_cmd+0x3c>
            if (strcmp(name, omi.omi_name)) {
   1dba0:	a908      	add	r1, sp, #32
   1dba2:	4628      	mov	r0, r5
   1dba4:	f7fd f8af 	bl	1ad06 <strcmp>
   1dba8:	2800      	cmp	r0, #0
   1dbaa:	d1f1      	bne.n	1db90 <shell_os_mpool_display_cmd+0x54>
                found = 1;
   1dbac:	2701      	movs	r7, #1
   1dbae:	e7e3      	b.n	1db78 <shell_os_mpool_display_cmd+0x3c>
    if (name && !found) {
   1dbb0:	b105      	cbz	r5, 1dbb4 <shell_os_mpool_display_cmd+0x78>
   1dbb2:	b117      	cbz	r7, 1dbba <shell_os_mpool_display_cmd+0x7e>
}
   1dbb4:	2000      	movs	r0, #0
   1dbb6:	b011      	add	sp, #68	; 0x44
   1dbb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Couldn't find a memory pool with name %s\n",
   1dbba:	462a      	mov	r2, r5
   1dbbc:	490a      	ldr	r1, [pc, #40]	; (1dbe8 <shell_os_mpool_display_cmd+0xac>)
   1dbbe:	4630      	mov	r0, r6
   1dbc0:	f000 fe9f 	bl	1e902 <streamer_printf>
   1dbc4:	e7f6      	b.n	1dbb4 <shell_os_mpool_display_cmd+0x78>
   1dbc6:	bf00      	nop
   1dbc8:	00038884 	.word	0x00038884
   1dbcc:	00035e50 	.word	0x00035e50
   1dbd0:	000388b0 	.word	0x000388b0
   1dbd4:	000388b8 	.word	0x000388b8
   1dbd8:	00038890 	.word	0x00038890
   1dbdc:	00035554 	.word	0x00035554
   1dbe0:	00038898 	.word	0x00038898
   1dbe4:	000388bc 	.word	0x000388bc
   1dbe8:	000388d4 	.word	0x000388d4

0001dbec <shell_os_date_cmd>:
{
   1dbec:	b530      	push	{r4, r5, lr}
   1dbee:	b08f      	sub	sp, #60	; 0x3c
   1dbf0:	461c      	mov	r4, r3
    if (argc == 0) {
   1dbf2:	3901      	subs	r1, #1
   1dbf4:	d00f      	beq.n	1dc16 <shell_os_date_cmd+0x2a>
   1dbf6:	4610      	mov	r0, r2
    } else if (argc == 1) {
   1dbf8:	2901      	cmp	r1, #1
   1dbfa:	d13a      	bne.n	1dc72 <shell_os_date_cmd+0x86>
        rc = datetime_parse(*argv, &tv, &tz);
   1dbfc:	aa09      	add	r2, sp, #36	; 0x24
   1dbfe:	a90a      	add	r1, sp, #40	; 0x28
   1dc00:	6840      	ldr	r0, [r0, #4]
   1dc02:	f000 fc13 	bl	1e42c <datetime_parse>
        if (rc == 0) {
   1dc06:	4605      	mov	r5, r0
   1dc08:	bb70      	cbnz	r0, 1dc68 <shell_os_date_cmd+0x7c>
            rc = os_settimeofday(&tv, &tz);
   1dc0a:	a909      	add	r1, sp, #36	; 0x24
   1dc0c:	a80a      	add	r0, sp, #40	; 0x28
   1dc0e:	f7fc fda7 	bl	1a760 <os_settimeofday>
   1dc12:	4605      	mov	r5, r0
   1dc14:	e011      	b.n	1dc3a <shell_os_date_cmd+0x4e>
        rc = os_gettimeofday(&tv, &tz);
   1dc16:	a909      	add	r1, sp, #36	; 0x24
   1dc18:	a80a      	add	r0, sp, #40	; 0x28
   1dc1a:	f7fc fd55 	bl	1a6c8 <os_gettimeofday>
        assert(rc == 0);
   1dc1e:	b978      	cbnz	r0, 1dc40 <shell_os_date_cmd+0x54>
        rc = datetime_format(&tv, &tz, buf, sizeof(buf));
   1dc20:	2321      	movs	r3, #33	; 0x21
   1dc22:	466a      	mov	r2, sp
   1dc24:	a909      	add	r1, sp, #36	; 0x24
   1dc26:	a80a      	add	r0, sp, #40	; 0x28
   1dc28:	f000 fcfc 	bl	1e624 <datetime_format>
        assert(rc == 0);
   1dc2c:	4605      	mov	r5, r0
   1dc2e:	b988      	cbnz	r0, 1dc54 <shell_os_date_cmd+0x68>
        streamer_printf(streamer, "%s\n", buf);
   1dc30:	466a      	mov	r2, sp
   1dc32:	4911      	ldr	r1, [pc, #68]	; (1dc78 <shell_os_date_cmd+0x8c>)
   1dc34:	4620      	mov	r0, r4
   1dc36:	f000 fe64 	bl	1e902 <streamer_printf>
}
   1dc3a:	4628      	mov	r0, r5
   1dc3c:	b00f      	add	sp, #60	; 0x3c
   1dc3e:	bd30      	pop	{r4, r5, pc}
        assert(rc == 0);
   1dc40:	f7f6 fd58 	bl	146f4 <hal_debugger_connected>
   1dc44:	b100      	cbz	r0, 1dc48 <shell_os_date_cmd+0x5c>
   1dc46:	be01      	bkpt	0x0001
   1dc48:	2300      	movs	r3, #0
   1dc4a:	461a      	mov	r2, r3
   1dc4c:	4619      	mov	r1, r3
   1dc4e:	4618      	mov	r0, r3
   1dc50:	f7fb f86e 	bl	18d30 <__assert_func>
        assert(rc == 0);
   1dc54:	f7f6 fd4e 	bl	146f4 <hal_debugger_connected>
   1dc58:	b100      	cbz	r0, 1dc5c <shell_os_date_cmd+0x70>
   1dc5a:	be01      	bkpt	0x0001
   1dc5c:	2300      	movs	r3, #0
   1dc5e:	461a      	mov	r2, r3
   1dc60:	4619      	mov	r1, r3
   1dc62:	4618      	mov	r0, r3
   1dc64:	f7fb f864 	bl	18d30 <__assert_func>
            streamer_printf(streamer, "Invalid datetime\n");
   1dc68:	4904      	ldr	r1, [pc, #16]	; (1dc7c <shell_os_date_cmd+0x90>)
   1dc6a:	4620      	mov	r0, r4
   1dc6c:	f000 fe49 	bl	1e902 <streamer_printf>
   1dc70:	e7e3      	b.n	1dc3a <shell_os_date_cmd+0x4e>
        rc = -1;
   1dc72:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    return rc;
   1dc76:	e7e0      	b.n	1dc3a <shell_os_date_cmd+0x4e>
   1dc78:	00038924 	.word	0x00038924
   1dc7c:	00038900 	.word	0x00038900

0001dc80 <shell_os_reset_cmd>:
{
   1dc80:	b508      	push	{r3, lr}
    os_time_delay(OS_TICKS_PER_SEC / 10);
   1dc82:	200c      	movs	r0, #12
   1dc84:	f7fc fd0c 	bl	1a6a0 <os_time_delay>
    os_reboot(HAL_RESET_REQUESTED);
   1dc88:	2006      	movs	r0, #6
   1dc8a:	f7fb fa3e 	bl	1910a <os_reboot>
}
   1dc8e:	2000      	movs	r0, #0
   1dc90:	bd08      	pop	{r3, pc}
	...

0001dc94 <shell_os_ls_dev_cmd>:

int
shell_os_ls_dev_cmd(const struct shell_cmd *cmd, int argc, char **argv,
                    struct streamer *streamer)
{
   1dc94:	b510      	push	{r4, lr}
   1dc96:	b082      	sub	sp, #8
   1dc98:	461c      	mov	r4, r3
    streamer_printf(streamer, "%4s %3s %s\n", "ref", "flg", "name");
   1dc9a:	4b07      	ldr	r3, [pc, #28]	; (1dcb8 <shell_os_ls_dev_cmd+0x24>)
   1dc9c:	9300      	str	r3, [sp, #0]
   1dc9e:	4b07      	ldr	r3, [pc, #28]	; (1dcbc <shell_os_ls_dev_cmd+0x28>)
   1dca0:	4a07      	ldr	r2, [pc, #28]	; (1dcc0 <shell_os_ls_dev_cmd+0x2c>)
   1dca2:	4908      	ldr	r1, [pc, #32]	; (1dcc4 <shell_os_ls_dev_cmd+0x30>)
   1dca4:	4620      	mov	r0, r4
   1dca6:	f000 fe2c 	bl	1e902 <streamer_printf>
    os_dev_walk(shell_os_ls_dev, streamer);
   1dcaa:	4621      	mov	r1, r4
   1dcac:	4806      	ldr	r0, [pc, #24]	; (1dcc8 <shell_os_ls_dev_cmd+0x34>)
   1dcae:	f7fb fb75 	bl	1939c <os_dev_walk>
    return 0;
}
   1dcb2:	2000      	movs	r0, #0
   1dcb4:	b002      	add	sp, #8
   1dcb6:	bd10      	pop	{r4, pc}
   1dcb8:	00035554 	.word	0x00035554
   1dcbc:	00038914 	.word	0x00038914
   1dcc0:	00038918 	.word	0x00038918
   1dcc4:	0003891c 	.word	0x0003891c
   1dcc8:	0001db19 	.word	0x0001db19

0001dccc <shell_os_tasks_display_cmd>:
{
   1dccc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dcce:	b097      	sub	sp, #92	; 0x5c
   1dcd0:	461e      	mov	r6, r3
    if (argc > 1 && strcmp(argv[1], "")) {
   1dcd2:	2901      	cmp	r1, #1
   1dcd4:	dd04      	ble.n	1dce0 <shell_os_tasks_display_cmd+0x14>
   1dcd6:	6855      	ldr	r5, [r2, #4]
   1dcd8:	782b      	ldrb	r3, [r5, #0]
   1dcda:	b913      	cbnz	r3, 1dce2 <shell_os_tasks_display_cmd+0x16>
    name = NULL;
   1dcdc:	2500      	movs	r5, #0
   1dcde:	e000      	b.n	1dce2 <shell_os_tasks_display_cmd+0x16>
   1dce0:	2500      	movs	r5, #0
    streamer_printf(streamer, "Tasks: \n");
   1dce2:	4928      	ldr	r1, [pc, #160]	; (1dd84 <shell_os_tasks_display_cmd+0xb8>)
   1dce4:	4630      	mov	r0, r6
   1dce6:	f000 fe0c 	bl	1e902 <streamer_printf>
    streamer_printf(streamer, "%8s %3s %3s %8s %8s %8s %8s %8s %8s %3s\n",
   1dcea:	4b27      	ldr	r3, [pc, #156]	; (1dd88 <shell_os_tasks_display_cmd+0xbc>)
   1dcec:	9307      	str	r3, [sp, #28]
   1dcee:	4b27      	ldr	r3, [pc, #156]	; (1dd8c <shell_os_tasks_display_cmd+0xc0>)
   1dcf0:	9306      	str	r3, [sp, #24]
   1dcf2:	4b27      	ldr	r3, [pc, #156]	; (1dd90 <shell_os_tasks_display_cmd+0xc4>)
   1dcf4:	9305      	str	r3, [sp, #20]
   1dcf6:	4b27      	ldr	r3, [pc, #156]	; (1dd94 <shell_os_tasks_display_cmd+0xc8>)
   1dcf8:	9304      	str	r3, [sp, #16]
   1dcfa:	4b27      	ldr	r3, [pc, #156]	; (1dd98 <shell_os_tasks_display_cmd+0xcc>)
   1dcfc:	9303      	str	r3, [sp, #12]
   1dcfe:	4b27      	ldr	r3, [pc, #156]	; (1dd9c <shell_os_tasks_display_cmd+0xd0>)
   1dd00:	9302      	str	r3, [sp, #8]
   1dd02:	4b27      	ldr	r3, [pc, #156]	; (1dda0 <shell_os_tasks_display_cmd+0xd4>)
   1dd04:	9301      	str	r3, [sp, #4]
   1dd06:	4b27      	ldr	r3, [pc, #156]	; (1dda4 <shell_os_tasks_display_cmd+0xd8>)
   1dd08:	9300      	str	r3, [sp, #0]
   1dd0a:	4b27      	ldr	r3, [pc, #156]	; (1dda8 <shell_os_tasks_display_cmd+0xdc>)
   1dd0c:	4a27      	ldr	r2, [pc, #156]	; (1ddac <shell_os_tasks_display_cmd+0xe0>)
   1dd0e:	4928      	ldr	r1, [pc, #160]	; (1ddb0 <shell_os_tasks_display_cmd+0xe4>)
   1dd10:	4630      	mov	r0, r6
   1dd12:	f000 fdf6 	bl	1e902 <streamer_printf>
    found = 0;
   1dd16:	2700      	movs	r7, #0
    prev_task = NULL;
   1dd18:	463c      	mov	r4, r7
   1dd1a:	e017      	b.n	1dd4c <shell_os_tasks_display_cmd+0x80>
                oti.oti_name, oti.oti_prio, oti.oti_taskid,
   1dd1c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
                oti.oti_stksize, oti.oti_stkusage,
   1dd20:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   1dd24:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
        streamer_printf(streamer, "%8s %3u %3u %8lu %8lu %8u %8u %8lu %8lu\n",
   1dd28:	980d      	ldr	r0, [sp, #52]	; 0x34
   1dd2a:	9006      	str	r0, [sp, #24]
   1dd2c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1dd2e:	9005      	str	r0, [sp, #20]
   1dd30:	9104      	str	r1, [sp, #16]
   1dd32:	9303      	str	r3, [sp, #12]
   1dd34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1dd36:	9302      	str	r3, [sp, #8]
   1dd38:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1dd3a:	9101      	str	r1, [sp, #4]
   1dd3c:	9200      	str	r2, [sp, #0]
   1dd3e:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1dd42:	aa0e      	add	r2, sp, #56	; 0x38
   1dd44:	491b      	ldr	r1, [pc, #108]	; (1ddb4 <shell_os_tasks_display_cmd+0xe8>)
   1dd46:	4630      	mov	r0, r6
   1dd48:	f000 fddb 	bl	1e902 <streamer_printf>
        prev_task = os_task_info_get_next(prev_task, &oti);
   1dd4c:	a908      	add	r1, sp, #32
   1dd4e:	4620      	mov	r0, r4
   1dd50:	f7fc fc0a 	bl	1a568 <os_task_info_get_next>
        if (prev_task == NULL) {
   1dd54:	4604      	mov	r4, r0
   1dd56:	b148      	cbz	r0, 1dd6c <shell_os_tasks_display_cmd+0xa0>
        if (name) {
   1dd58:	2d00      	cmp	r5, #0
   1dd5a:	d0df      	beq.n	1dd1c <shell_os_tasks_display_cmd+0x50>
            if (strcmp(name, oti.oti_name)) {
   1dd5c:	a90e      	add	r1, sp, #56	; 0x38
   1dd5e:	4628      	mov	r0, r5
   1dd60:	f7fc ffd1 	bl	1ad06 <strcmp>
   1dd64:	2800      	cmp	r0, #0
   1dd66:	d1f1      	bne.n	1dd4c <shell_os_tasks_display_cmd+0x80>
                found = 1;
   1dd68:	2701      	movs	r7, #1
   1dd6a:	e7d7      	b.n	1dd1c <shell_os_tasks_display_cmd+0x50>
    if (name && !found) {
   1dd6c:	b105      	cbz	r5, 1dd70 <shell_os_tasks_display_cmd+0xa4>
   1dd6e:	b117      	cbz	r7, 1dd76 <shell_os_tasks_display_cmd+0xaa>
}
   1dd70:	2000      	movs	r0, #0
   1dd72:	b017      	add	sp, #92	; 0x5c
   1dd74:	bdf0      	pop	{r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Couldn't find task with name %s\n", name);
   1dd76:	462a      	mov	r2, r5
   1dd78:	490f      	ldr	r1, [pc, #60]	; (1ddb8 <shell_os_tasks_display_cmd+0xec>)
   1dd7a:	4630      	mov	r0, r6
   1dd7c:	f000 fdc1 	bl	1e902 <streamer_printf>
   1dd80:	e7f6      	b.n	1dd70 <shell_os_tasks_display_cmd+0xa4>
   1dd82:	bf00      	nop
   1dd84:	00038928 	.word	0x00038928
   1dd88:	00038914 	.word	0x00038914
   1dd8c:	0003896c 	.word	0x0003896c
   1dd90:	00038974 	.word	0x00038974
   1dd94:	0003897c 	.word	0x0003897c
   1dd98:	00038984 	.word	0x00038984
   1dd9c:	0003898c 	.word	0x0003898c
   1dda0:	00038990 	.word	0x00038990
   1dda4:	00038998 	.word	0x00038998
   1dda8:	00038934 	.word	0x00038934
   1ddac:	00038938 	.word	0x00038938
   1ddb0:	00038940 	.word	0x00038940
   1ddb4:	0003899c 	.word	0x0003899c
   1ddb8:	000389c8 	.word	0x000389c8

0001ddbc <shell_os_register>:
    { 0 },
};

void
shell_os_register(void)
{
   1ddbc:	b530      	push	{r4, r5, lr}
   1ddbe:	b083      	sub	sp, #12
    const struct shell_cmd *cmd;
    int rc;

    for (cmd = os_commands; cmd->sc_cmd != NULL; cmd++) {
   1ddc0:	4c0c      	ldr	r4, [pc, #48]	; (1ddf4 <shell_os_register+0x38>)
   1ddc2:	e008      	b.n	1ddd6 <shell_os_register+0x1a>
        rc = shell_cmd_register(cmd);
        SYSINIT_PANIC_ASSERT_MSG(
   1ddc4:	2000      	movs	r0, #0
   1ddc6:	9000      	str	r0, [sp, #0]
   1ddc8:	4b0b      	ldr	r3, [pc, #44]	; (1ddf8 <shell_os_register+0x3c>)
   1ddca:	681d      	ldr	r5, [r3, #0]
   1ddcc:	4603      	mov	r3, r0
   1ddce:	4602      	mov	r2, r0
   1ddd0:	4601      	mov	r1, r0
   1ddd2:	47a8      	blx	r5
    for (cmd = os_commands; cmd->sc_cmd != NULL; cmd++) {
   1ddd4:	3410      	adds	r4, #16
   1ddd6:	68a3      	ldr	r3, [r4, #8]
   1ddd8:	b153      	cbz	r3, 1ddf0 <shell_os_register+0x34>
        rc = shell_cmd_register(cmd);
   1ddda:	4620      	mov	r0, r4
   1dddc:	f7ff fe30 	bl	1da40 <shell_cmd_register>
        SYSINIT_PANIC_ASSERT_MSG(
   1dde0:	2800      	cmp	r0, #0
   1dde2:	d0f7      	beq.n	1ddd4 <shell_os_register+0x18>
   1dde4:	f7f6 fc86 	bl	146f4 <hal_debugger_connected>
   1dde8:	2800      	cmp	r0, #0
   1ddea:	d0eb      	beq.n	1ddc4 <shell_os_register+0x8>
   1ddec:	be01      	bkpt	0x0001
   1ddee:	e7e9      	b.n	1ddc4 <shell_os_register+0x8>
            rc == 0, "Failed to register OS shell commands");
    }
}
   1ddf0:	b003      	add	sp, #12
   1ddf2:	bd30      	pop	{r4, r5, pc}
   1ddf4:	00038ac0 	.word	0x00038ac0
   1ddf8:	100006b4 	.word	0x100006b4

0001ddfc <stats_offset>:
    STAILQ_HEAD_INITIALIZER(g_stats_registry);

static size_t
stats_offset(const struct stats_hdr *hdr)
{
    if (hdr->s_flags & STATS_HDR_F_PERSIST) {
   1ddfc:	88c3      	ldrh	r3, [r0, #6]
   1ddfe:	f013 0f01 	tst.w	r3, #1
   1de02:	d001      	beq.n	1de08 <stats_offset+0xc>
        return sizeof (struct stats_persisted_hdr);
   1de04:	2030      	movs	r0, #48	; 0x30
   1de06:	4770      	bx	lr
    } else {
        return sizeof (struct stats_hdr);
   1de08:	200c      	movs	r0, #12
    }
}
   1de0a:	4770      	bx	lr

0001de0c <stats_register_internal>:
    return (uint8_t *)hdr + offset;
}

static int
stats_register_internal(const char *name, struct stats_hdr *shdr)
{
   1de0c:	b570      	push	{r4, r5, r6, lr}
   1de0e:	4606      	mov	r6, r0
   1de10:	460d      	mov	r5, r1
    int rc;

    /* Don't allow duplicate entries, return an error if this stat
     * is already registered.
     */
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   1de12:	4b0f      	ldr	r3, [pc, #60]	; (1de50 <stats_register_internal+0x44>)
   1de14:	681c      	ldr	r4, [r3, #0]
   1de16:	e000      	b.n	1de1a <stats_register_internal+0xe>
   1de18:	68a4      	ldr	r4, [r4, #8]
   1de1a:	b14c      	cbz	r4, 1de30 <stats_register_internal+0x24>
        if (!strcmp(cur->s_name, name) || cur == shdr) {
   1de1c:	4631      	mov	r1, r6
   1de1e:	6820      	ldr	r0, [r4, #0]
   1de20:	f7fc ff71 	bl	1ad06 <strcmp>
   1de24:	b188      	cbz	r0, 1de4a <stats_register_internal+0x3e>
   1de26:	42ac      	cmp	r4, r5
   1de28:	d1f6      	bne.n	1de18 <stats_register_internal+0xc>

    STATS_INC(g_stats_stats, num_registered);

    return (0);
err:
    return (rc);
   1de2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1de2e:	e00b      	b.n	1de48 <stats_register_internal+0x3c>
    shdr->s_name = name;
   1de30:	602e      	str	r6, [r5, #0]
    STAILQ_INSERT_TAIL(&g_stats_registry, shdr, s_next);
   1de32:	2000      	movs	r0, #0
   1de34:	60a8      	str	r0, [r5, #8]
   1de36:	4b06      	ldr	r3, [pc, #24]	; (1de50 <stats_register_internal+0x44>)
   1de38:	685a      	ldr	r2, [r3, #4]
   1de3a:	6015      	str	r5, [r2, #0]
   1de3c:	3508      	adds	r5, #8
   1de3e:	605d      	str	r5, [r3, #4]
    STATS_INC(g_stats_stats, num_registered);
   1de40:	4a04      	ldr	r2, [pc, #16]	; (1de54 <stats_register_internal+0x48>)
   1de42:	68d3      	ldr	r3, [r2, #12]
   1de44:	3301      	adds	r3, #1
   1de46:	60d3      	str	r3, [r2, #12]
}
   1de48:	bd70      	pop	{r4, r5, r6, pc}
    return (rc);
   1de4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1de4e:	e7fb      	b.n	1de48 <stats_register_internal+0x3c>
   1de50:	100006ac 	.word	0x100006ac
   1de54:	10003fa0 	.word	0x10003fa0

0001de58 <stats_init>:
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_init(struct stats_hdr *shdr, uint8_t size, uint8_t cnt,
        const struct stats_name_map *map, uint8_t map_cnt)
{
   1de58:	b570      	push	{r4, r5, r6, lr}
   1de5a:	4604      	mov	r4, r0
   1de5c:	460e      	mov	r6, r1
   1de5e:	4615      	mov	r5, r2
    size_t offset;

    offset = stats_offset(shdr);
   1de60:	f7ff ffcc 	bl	1ddfc <stats_offset>
    memset((uint8_t *)shdr + offset, 0, size * cnt);
   1de64:	fb05 f206 	mul.w	r2, r5, r6
   1de68:	2100      	movs	r1, #0
   1de6a:	4420      	add	r0, r4
   1de6c:	f7fc ff15 	bl	1ac9a <memset>

    shdr->s_size = size;
   1de70:	7126      	strb	r6, [r4, #4]
    shdr->s_cnt = cnt;
   1de72:	7165      	strb	r5, [r4, #5]
    shdr->s_flags = 0;
   1de74:	2000      	movs	r0, #0
   1de76:	80e0      	strh	r0, [r4, #6]
    shdr->s_map = map;
    shdr->s_map_cnt = map_cnt;
#endif

    return (0);
}
   1de78:	bd70      	pop	{r4, r5, r6, pc}
	...

0001de7c <stats_module_init_internal>:
{
   1de7c:	b500      	push	{lr}
   1de7e:	b083      	sub	sp, #12
    STAILQ_INIT(&g_stats_registry);
   1de80:	4a09      	ldr	r2, [pc, #36]	; (1dea8 <stats_module_init_internal+0x2c>)
   1de82:	2300      	movs	r3, #0
   1de84:	6013      	str	r3, [r2, #0]
   1de86:	6052      	str	r2, [r2, #4]
    rc = stats_init(STATS_HDR(g_stats_stats),
   1de88:	9300      	str	r3, [sp, #0]
   1de8a:	2201      	movs	r2, #1
   1de8c:	2104      	movs	r1, #4
   1de8e:	4807      	ldr	r0, [pc, #28]	; (1deac <stats_module_init_internal+0x30>)
   1de90:	f7ff ffe2 	bl	1de58 <stats_init>
    if (rc) {
   1de94:	b110      	cbz	r0, 1de9c <stats_module_init_internal+0x20>
}
   1de96:	b003      	add	sp, #12
   1de98:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = stats_register_internal("stat", STATS_HDR(g_stats_stats));
   1de9c:	4903      	ldr	r1, [pc, #12]	; (1deac <stats_module_init_internal+0x30>)
   1de9e:	4804      	ldr	r0, [pc, #16]	; (1deb0 <stats_module_init_internal+0x34>)
   1dea0:	f7ff ffb4 	bl	1de0c <stats_register_internal>
    if (rc) {
   1dea4:	e7f7      	b.n	1de96 <stats_module_init_internal+0x1a>
   1dea6:	bf00      	nop
   1dea8:	100006ac 	.word	0x100006ac
   1deac:	10003fa0 	.word	0x10003fa0
   1deb0:	00038b50 	.word	0x00038b50

0001deb4 <stats_module_init>:
{
   1deb4:	b510      	push	{r4, lr}
   1deb6:	b082      	sub	sp, #8
    SYSINIT_ASSERT_ACTIVE();
   1deb8:	4b11      	ldr	r3, [pc, #68]	; (1df00 <stats_module_init+0x4c>)
   1deba:	781b      	ldrb	r3, [r3, #0]
   1debc:	b123      	cbz	r3, 1dec8 <stats_module_init+0x14>
    if (g_stats_stats.snum_registered) {
   1debe:	4b11      	ldr	r3, [pc, #68]	; (1df04 <stats_module_init+0x50>)
   1dec0:	68db      	ldr	r3, [r3, #12]
   1dec2:	b15b      	cbz	r3, 1dedc <stats_module_init+0x28>
}
   1dec4:	b002      	add	sp, #8
   1dec6:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1dec8:	f7f6 fc14 	bl	146f4 <hal_debugger_connected>
   1decc:	b100      	cbz	r0, 1ded0 <stats_module_init+0x1c>
   1dece:	be01      	bkpt	0x0001
   1ded0:	2300      	movs	r3, #0
   1ded2:	461a      	mov	r2, r3
   1ded4:	4619      	mov	r1, r3
   1ded6:	4618      	mov	r0, r3
   1ded8:	f7fa ff2a 	bl	18d30 <__assert_func>
    rc = stats_module_init_internal();
   1dedc:	f7ff ffce 	bl	1de7c <stats_module_init_internal>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1dee0:	2800      	cmp	r0, #0
   1dee2:	d0ef      	beq.n	1dec4 <stats_module_init+0x10>
   1dee4:	f7f6 fc06 	bl	146f4 <hal_debugger_connected>
   1dee8:	b100      	cbz	r0, 1deec <stats_module_init+0x38>
   1deea:	be01      	bkpt	0x0001
   1deec:	2000      	movs	r0, #0
   1deee:	9000      	str	r0, [sp, #0]
   1def0:	4b05      	ldr	r3, [pc, #20]	; (1df08 <stats_module_init+0x54>)
   1def2:	681c      	ldr	r4, [r3, #0]
   1def4:	4603      	mov	r3, r0
   1def6:	4602      	mov	r2, r0
   1def8:	4601      	mov	r1, r0
   1defa:	47a0      	blx	r4
   1defc:	e7e2      	b.n	1dec4 <stats_module_init+0x10>
   1defe:	bf00      	nop
   1df00:	10003fd8 	.word	0x10003fd8
   1df04:	10003fa0 	.word	0x10003fa0
   1df08:	100006b4 	.word	0x100006b4

0001df0c <stats_register>:
 *
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_register(const char *name, struct stats_hdr *shdr)
{
   1df0c:	b538      	push	{r3, r4, r5, lr}
   1df0e:	4604      	mov	r4, r0
   1df10:	460d      	mov	r5, r1
    /*
     * We should always have at least "stat" registered so if there are no stats
     * registered, try to initialize module first. This allows to register stat
     * before sysinit is called (e.g. from BSP).
     */
    if (g_stats_stats.snum_registered == 0) {
   1df12:	4b07      	ldr	r3, [pc, #28]	; (1df30 <stats_register+0x24>)
   1df14:	68db      	ldr	r3, [r3, #12]
   1df16:	b913      	cbnz	r3, 1df1e <stats_register+0x12>
        if (stats_module_init_internal()) {
   1df18:	f7ff ffb0 	bl	1de7c <stats_module_init_internal>
   1df1c:	b920      	cbnz	r0, 1df28 <stats_register+0x1c>
            return -1;
        }
    }

    return stats_register_internal(name, shdr);
   1df1e:	4629      	mov	r1, r5
   1df20:	4620      	mov	r0, r4
   1df22:	f7ff ff73 	bl	1de0c <stats_register_internal>
}
   1df26:	bd38      	pop	{r3, r4, r5, pc}
            return -1;
   1df28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1df2c:	e7fb      	b.n	1df26 <stats_register+0x1a>
   1df2e:	bf00      	nop
   1df30:	10003fa0 	.word	0x10003fa0

0001df34 <stats_init_and_reg>:
 */
int
stats_init_and_reg(struct stats_hdr *shdr, uint8_t size, uint8_t cnt,
                   const struct stats_name_map *map, uint8_t map_cnt,
                   const char *name)
{
   1df34:	b530      	push	{r4, r5, lr}
   1df36:	b083      	sub	sp, #12
   1df38:	4604      	mov	r4, r0
    int rc;

    rc = stats_init(shdr, size, cnt, map, map_cnt);
   1df3a:	f89d 5018 	ldrb.w	r5, [sp, #24]
   1df3e:	9500      	str	r5, [sp, #0]
   1df40:	f7ff ff8a 	bl	1de58 <stats_init>
    if (rc != 0) {
   1df44:	b108      	cbz	r0, 1df4a <stats_init_and_reg+0x16>
    if (rc != 0) {
        return rc;
    }

    return rc;
}
   1df46:	b003      	add	sp, #12
   1df48:	bd30      	pop	{r4, r5, pc}
    rc = stats_register(name, shdr);
   1df4a:	4621      	mov	r1, r4
   1df4c:	9807      	ldr	r0, [sp, #28]
   1df4e:	f7ff ffdd 	bl	1df0c <stats_register>
    if (rc != 0) {
   1df52:	e7f8      	b.n	1df46 <stats_init_and_reg+0x12>

0001df54 <sysdown_complete>:
    sysdown_panic_cb = panic_cb;
}

static void
sysdown_complete(void)
{
   1df54:	b508      	push	{r3, lr}
    os_callout_stop(&sysdown_timer);
   1df56:	4803      	ldr	r0, [pc, #12]	; (1df64 <sysdown_complete+0x10>)
   1df58:	f7fb f914 	bl	19184 <os_callout_stop>
    os_system_reset();
   1df5c:	f7fb f8d9 	bl	19112 <os_system_reset>
}
   1df60:	bd08      	pop	{r3, pc}
   1df62:	bf00      	nop
   1df64:	10003fb8 	.word	0x10003fb8

0001df68 <sysdown_timer_exp>:
    }
}

static void
sysdown_timer_exp(struct os_event *unused)
{
   1df68:	b508      	push	{r3, lr}
    assert(0);
   1df6a:	f7f6 fbc3 	bl	146f4 <hal_debugger_connected>
   1df6e:	b100      	cbz	r0, 1df72 <sysdown_timer_exp+0xa>
   1df70:	be01      	bkpt	0x0001
   1df72:	2300      	movs	r3, #0
   1df74:	461a      	mov	r2, r3
   1df76:	4619      	mov	r1, r3
   1df78:	4618      	mov	r0, r3
   1df7a:	f7fa fed9 	bl	18d30 <__assert_func>
	...

0001df80 <sysdown_release>:
{
   1df80:	b510      	push	{r4, lr}
    OS_ENTER_CRITICAL(sr);
   1df82:	f7fc fc91 	bl	1a8a8 <os_arch_save_sr>
    count = --sysdown_num_in_progress;
   1df86:	4b06      	ldr	r3, [pc, #24]	; (1dfa0 <sysdown_release+0x20>)
   1df88:	681c      	ldr	r4, [r3, #0]
   1df8a:	3c01      	subs	r4, #1
   1df8c:	601c      	str	r4, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1df8e:	f7fc fc91 	bl	1a8b4 <os_arch_restore_sr>
    if (count <= 0) {
   1df92:	2c00      	cmp	r4, #0
   1df94:	dd00      	ble.n	1df98 <sysdown_release+0x18>
}
   1df96:	bd10      	pop	{r4, pc}
        sysdown_complete();
   1df98:	f7ff ffdc 	bl	1df54 <sysdown_complete>
}
   1df9c:	e7fb      	b.n	1df96 <sysdown_release+0x16>
   1df9e:	bf00      	nop
   1dfa0:	10003fb4 	.word	0x10003fb4

0001dfa4 <sysdown>:
}

int
sysdown(int reason)
{
   1dfa4:	b570      	push	{r4, r5, r6, lr}
   1dfa6:	4605      	mov	r5, r0
    os_sr_t sr;
    int rc;
    int i;

    /* Only allow one shutdown operation. */
    OS_ENTER_CRITICAL(sr);
   1dfa8:	f7fc fc7e 	bl	1a8a8 <os_arch_save_sr>
    if (sysdown_active) {
   1dfac:	4b22      	ldr	r3, [pc, #136]	; (1e038 <sysdown+0x94>)
   1dfae:	781b      	ldrb	r3, [r3, #0]
   1dfb0:	b943      	cbnz	r3, 1dfc4 <sysdown+0x20>
        rc = SYS_EALREADY;
    } else {
        sysdown_active = true;
   1dfb2:	4b21      	ldr	r3, [pc, #132]	; (1e038 <sysdown+0x94>)
   1dfb4:	2201      	movs	r2, #1
   1dfb6:	701a      	strb	r2, [r3, #0]
        rc = 0;
   1dfb8:	2600      	movs	r6, #0
    }
    OS_EXIT_CRITICAL(sr);
   1dfba:	f7fc fc7b 	bl	1a8b4 <os_arch_restore_sr>

    if (rc != 0) {
   1dfbe:	b126      	cbz	r6, 1dfca <sysdown+0x26>
    if (sysdown_num_in_progress == 0) {
        sysdown_complete();
    }

    return 0;
}
   1dfc0:	4630      	mov	r0, r6
   1dfc2:	bd70      	pop	{r4, r5, r6, pc}
        rc = SYS_EALREADY;
   1dfc4:	f06f 060a 	mvn.w	r6, #10
   1dfc8:	e7f7      	b.n	1dfba <sysdown+0x16>
    os_callout_init(&sysdown_timer, os_eventq_dflt_get(), sysdown_timer_exp,
   1dfca:	f7fb fabd 	bl	19548 <os_eventq_dflt_get>
   1dfce:	4601      	mov	r1, r0
   1dfd0:	4c1a      	ldr	r4, [pc, #104]	; (1e03c <sysdown+0x98>)
   1dfd2:	2300      	movs	r3, #0
   1dfd4:	4a1a      	ldr	r2, [pc, #104]	; (1e040 <sysdown+0x9c>)
   1dfd6:	4620      	mov	r0, r4
   1dfd8:	f7fb f8c6 	bl	19168 <os_callout_init>
    rc = os_callout_reset(&sysdown_timer, SYSDOWN_TIMEOUT_TICKS);
   1dfdc:	f44f 61a0 	mov.w	r1, #1280	; 0x500
   1dfe0:	4620      	mov	r0, r4
   1dfe2:	f7fb f8ed 	bl	191c0 <os_callout_reset>
    assert(rc == 0);
   1dfe6:	4606      	mov	r6, r0
   1dfe8:	b908      	cbnz	r0, 1dfee <sysdown+0x4a>
    for (i = 0; sysdown_cbs[i] != NULL; i++) {
   1dfea:	4604      	mov	r4, r0
   1dfec:	e012      	b.n	1e014 <sysdown+0x70>
    assert(rc == 0);
   1dfee:	f7f6 fb81 	bl	146f4 <hal_debugger_connected>
   1dff2:	b100      	cbz	r0, 1dff6 <sysdown+0x52>
   1dff4:	be01      	bkpt	0x0001
   1dff6:	2300      	movs	r3, #0
   1dff8:	461a      	mov	r2, r3
   1dffa:	4619      	mov	r1, r3
   1dffc:	4618      	mov	r0, r3
   1dffe:	f7fa fe97 	bl	18d30 <__assert_func>
            OS_ENTER_CRITICAL(sr);
   1e002:	f7fc fc51 	bl	1a8a8 <os_arch_save_sr>
            sysdown_num_in_progress++;
   1e006:	4a0f      	ldr	r2, [pc, #60]	; (1e044 <sysdown+0xa0>)
   1e008:	6813      	ldr	r3, [r2, #0]
   1e00a:	3301      	adds	r3, #1
   1e00c:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
   1e00e:	f7fc fc51 	bl	1a8b4 <os_arch_restore_sr>
    for (i = 0; sysdown_cbs[i] != NULL; i++) {
   1e012:	3401      	adds	r4, #1
   1e014:	4b0c      	ldr	r3, [pc, #48]	; (1e048 <sysdown+0xa4>)
   1e016:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1e01a:	b123      	cbz	r3, 1e026 <sysdown+0x82>
        rc = sysdown_cbs[i](reason);
   1e01c:	4628      	mov	r0, r5
   1e01e:	4798      	blx	r3
        switch (rc) {
   1e020:	2801      	cmp	r0, #1
   1e022:	d1f6      	bne.n	1e012 <sysdown+0x6e>
   1e024:	e7ed      	b.n	1e002 <sysdown+0x5e>
    if (sysdown_num_in_progress == 0) {
   1e026:	4b07      	ldr	r3, [pc, #28]	; (1e044 <sysdown+0xa0>)
   1e028:	681c      	ldr	r4, [r3, #0]
   1e02a:	2c00      	cmp	r4, #0
   1e02c:	d1c8      	bne.n	1dfc0 <sysdown+0x1c>
        sysdown_complete();
   1e02e:	f7ff ff91 	bl	1df54 <sysdown_complete>
    return 0;
   1e032:	4626      	mov	r6, r4
   1e034:	e7c4      	b.n	1dfc0 <sysdown+0x1c>
   1e036:	bf00      	nop
   1e038:	10003fb0 	.word	0x10003fb0
   1e03c:	10003fb8 	.word	0x10003fb8
   1e040:	0001df69 	.word	0x0001df69
   1e044:	10003fb4 	.word	0x10003fb4
   1e048:	00039a90 	.word	0x00039a90

0001e04c <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   1e04c:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   1e04e:	f7fa fe6f 	bl	18d30 <__assert_func>
	...

0001e054 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   1e054:	4b01      	ldr	r3, [pc, #4]	; (1e05c <sysinit_start+0x8>)
   1e056:	2201      	movs	r2, #1
   1e058:	701a      	strb	r2, [r3, #0]
}
   1e05a:	4770      	bx	lr
   1e05c:	10003fd8 	.word	0x10003fd8

0001e060 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   1e060:	4b01      	ldr	r3, [pc, #4]	; (1e068 <sysinit_end+0x8>)
   1e062:	2200      	movs	r2, #0
   1e064:	701a      	strb	r2, [r3, #0]
}
   1e066:	4770      	bx	lr
   1e068:	10003fd8 	.word	0x10003fd8

0001e06c <leapyear>:
 *     ((year % 400) == 0) )
 * It is otherwise equivalent.
 */
static int
leapyear(int year)
{
   1e06c:	4603      	mov	r3, r0
    int rv = 0;

    if ((year & 3) == 0) {
   1e06e:	f010 0f03 	tst.w	r0, #3
   1e072:	d115      	bne.n	1e0a0 <leapyear+0x34>
        rv = 1;
        if ((year % 100) == 0) {
   1e074:	4a0d      	ldr	r2, [pc, #52]	; (1e0ac <leapyear+0x40>)
   1e076:	fb82 1200 	smull	r1, r2, r2, r0
   1e07a:	17c0      	asrs	r0, r0, #31
   1e07c:	ebc0 1062 	rsb	r0, r0, r2, asr #5
   1e080:	2264      	movs	r2, #100	; 0x64
   1e082:	fb02 3010 	mls	r0, r2, r0, r3
   1e086:	b968      	cbnz	r0, 1e0a4 <leapyear+0x38>
            rv = 0;
            if ((year % 400) == 0)
   1e088:	4908      	ldr	r1, [pc, #32]	; (1e0ac <leapyear+0x40>)
   1e08a:	fb81 2103 	smull	r2, r1, r1, r3
   1e08e:	17da      	asrs	r2, r3, #31
   1e090:	ebc2 12e1 	rsb	r2, r2, r1, asr #7
   1e094:	f44f 71c8 	mov.w	r1, #400	; 0x190
   1e098:	fb01 3212 	mls	r2, r1, r2, r3
   1e09c:	b122      	cbz	r2, 1e0a8 <leapyear+0x3c>
   1e09e:	4770      	bx	lr
    int rv = 0;
   1e0a0:	2000      	movs	r0, #0
   1e0a2:	4770      	bx	lr
        rv = 1;
   1e0a4:	2001      	movs	r0, #1
   1e0a6:	4770      	bx	lr
                rv = 1;
   1e0a8:	2001      	movs	r0, #1
        }
    }
    return (rv);
}
   1e0aa:	4770      	bx	lr
   1e0ac:	51eb851f 	.word	0x51eb851f

0001e0b0 <parse_number>:
    return (0);
}

static const char *
parse_number(const char *str, int digits, int *val)
{
   1e0b0:	b430      	push	{r4, r5}
   1e0b2:	4604      	mov	r4, r0
    const char *cp;
    const char *end;

    *val = 0;
   1e0b4:	2300      	movs	r3, #0
   1e0b6:	6013      	str	r3, [r2, #0]
    cp = str;
    end = str + digits;
   1e0b8:	4408      	add	r0, r1
    while (cp < end) {
   1e0ba:	4284      	cmp	r4, r0
   1e0bc:	d20f      	bcs.n	1e0de <parse_number+0x2e>
        if (!isdigit((unsigned char)*cp)) {
   1e0be:	7823      	ldrb	r3, [r4, #0]
   1e0c0:	3b30      	subs	r3, #48	; 0x30
   1e0c2:	2b09      	cmp	r3, #9
   1e0c4:	d80a      	bhi.n	1e0dc <parse_number+0x2c>
            return (NULL);
        }
        *val *= 10;
   1e0c6:	6813      	ldr	r3, [r2, #0]
   1e0c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1e0cc:	005b      	lsls	r3, r3, #1
   1e0ce:	6013      	str	r3, [r2, #0]
        *val += (*cp - '0');
   1e0d0:	f814 5b01 	ldrb.w	r5, [r4], #1
   1e0d4:	3d30      	subs	r5, #48	; 0x30
   1e0d6:	442b      	add	r3, r5
   1e0d8:	6013      	str	r3, [r2, #0]
        cp++;
   1e0da:	e7ee      	b.n	1e0ba <parse_number+0xa>
            return (NULL);
   1e0dc:	2000      	movs	r0, #0
    }
    return (end);
}
   1e0de:	bc30      	pop	{r4, r5}
   1e0e0:	4770      	bx	lr
	...

0001e0e4 <clocktime_to_timeval>:
{
   1e0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e0e8:	b08b      	sub	sp, #44	; 0x2c
   1e0ea:	9101      	str	r1, [sp, #4]
   1e0ec:	9200      	str	r2, [sp, #0]
    year = ct->year;
   1e0ee:	6806      	ldr	r6, [r0, #0]
    if (year < POSIX_BASE_YEAR ||
   1e0f0:	f240 73b1 	movw	r3, #1969	; 0x7b1
   1e0f4:	429e      	cmp	r6, r3
   1e0f6:	f340 80d6 	ble.w	1e2a6 <clocktime_to_timeval+0x1c2>
   1e0fa:	4604      	mov	r4, r0
        ct->mon < 1 || ct->mon > 12 ||
   1e0fc:	6845      	ldr	r5, [r0, #4]
    if (year < POSIX_BASE_YEAR ||
   1e0fe:	2d00      	cmp	r5, #0
   1e100:	f340 80d5 	ble.w	1e2ae <clocktime_to_timeval+0x1ca>
        ct->mon < 1 || ct->mon > 12 ||
   1e104:	2d0c      	cmp	r5, #12
   1e106:	f300 80d4 	bgt.w	1e2b2 <clocktime_to_timeval+0x1ce>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   1e10a:	f8d0 8008 	ldr.w	r8, [r0, #8]
        ct->mon < 1 || ct->mon > 12 ||
   1e10e:	f1b8 0f00 	cmp.w	r8, #0
   1e112:	f340 80d0 	ble.w	1e2b6 <clocktime_to_timeval+0x1d2>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   1e116:	1e6b      	subs	r3, r5, #1
   1e118:	4a72      	ldr	r2, [pc, #456]	; (1e2e4 <clocktime_to_timeval+0x200>)
   1e11a:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
   1e11e:	2d02      	cmp	r5, #2
   1e120:	d02b      	beq.n	1e17a <clocktime_to_timeval+0x96>
   1e122:	2000      	movs	r0, #0
   1e124:	4407      	add	r7, r0
   1e126:	45b8      	cmp	r8, r7
   1e128:	f300 80c7 	bgt.w	1e2ba <clocktime_to_timeval+0x1d6>
        ct->hour < 0 || ct->hour > 23 ||
   1e12c:	f8d4 b00c 	ldr.w	fp, [r4, #12]
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   1e130:	f1bb 0f00 	cmp.w	fp, #0
   1e134:	f2c0 80c3 	blt.w	1e2be <clocktime_to_timeval+0x1da>
        ct->hour < 0 || ct->hour > 23 ||
   1e138:	f1bb 0f17 	cmp.w	fp, #23
   1e13c:	f300 80c1 	bgt.w	1e2c2 <clocktime_to_timeval+0x1de>
        ct->min < 0 || ct->min > 59 ||
   1e140:	6923      	ldr	r3, [r4, #16]
   1e142:	9308      	str	r3, [sp, #32]
        ct->hour < 0 || ct->hour > 23 ||
   1e144:	2b00      	cmp	r3, #0
   1e146:	f2c0 80be 	blt.w	1e2c6 <clocktime_to_timeval+0x1e2>
        ct->min < 0 || ct->min > 59 ||
   1e14a:	2b3b      	cmp	r3, #59	; 0x3b
   1e14c:	f300 80bd 	bgt.w	1e2ca <clocktime_to_timeval+0x1e6>
        ct->sec < 0 || ct->sec > 59 ||
   1e150:	6963      	ldr	r3, [r4, #20]
   1e152:	9309      	str	r3, [sp, #36]	; 0x24
        ct->min < 0 || ct->min > 59 ||
   1e154:	2b00      	cmp	r3, #0
   1e156:	f2c0 80ba 	blt.w	1e2ce <clocktime_to_timeval+0x1ea>
        ct->sec < 0 || ct->sec > 59 ||
   1e15a:	2b3b      	cmp	r3, #59	; 0x3b
   1e15c:	f300 80b9 	bgt.w	1e2d2 <clocktime_to_timeval+0x1ee>
        ct->usec < 0 || ct->usec > 999999) {
   1e160:	69e3      	ldr	r3, [r4, #28]
        ct->sec < 0 || ct->sec > 59 ||
   1e162:	2b00      	cmp	r3, #0
   1e164:	f2c0 80b7 	blt.w	1e2d6 <clocktime_to_timeval+0x1f2>
        ct->usec < 0 || ct->usec > 999999) {
   1e168:	4a5f      	ldr	r2, [pc, #380]	; (1e2e8 <clocktime_to_timeval+0x204>)
   1e16a:	4293      	cmp	r3, r2
   1e16c:	f300 80b5 	bgt.w	1e2da <clocktime_to_timeval+0x1f6>
    days = 0;
   1e170:	f04f 0900 	mov.w	r9, #0
    for (i = POSIX_BASE_YEAR; i < year; i++)
   1e174:	f240 77b2 	movw	r7, #1970	; 0x7b2
   1e178:	e007      	b.n	1e18a <clocktime_to_timeval+0xa6>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   1e17a:	4630      	mov	r0, r6
   1e17c:	f7ff ff76 	bl	1e06c <leapyear>
   1e180:	e7d0      	b.n	1e124 <clocktime_to_timeval+0x40>
        days += days_in_year(i);
   1e182:	f240 136d 	movw	r3, #365	; 0x16d
   1e186:	4499      	add	r9, r3
    for (i = POSIX_BASE_YEAR; i < year; i++)
   1e188:	3701      	adds	r7, #1
   1e18a:	42b7      	cmp	r7, r6
   1e18c:	da07      	bge.n	1e19e <clocktime_to_timeval+0xba>
        days += days_in_year(i);
   1e18e:	4638      	mov	r0, r7
   1e190:	f7ff ff6c 	bl	1e06c <leapyear>
   1e194:	2800      	cmp	r0, #0
   1e196:	d0f4      	beq.n	1e182 <clocktime_to_timeval+0x9e>
   1e198:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   1e19c:	e7f3      	b.n	1e186 <clocktime_to_timeval+0xa2>
    for (i = 1; i < ct->mon; i++)
   1e19e:	2701      	movs	r7, #1
   1e1a0:	46aa      	mov	sl, r5
   1e1a2:	e005      	b.n	1e1b0 <clocktime_to_timeval+0xcc>
          days += days_in_month(year, i);
   1e1a4:	4630      	mov	r0, r6
   1e1a6:	f7ff ff61 	bl	1e06c <leapyear>
   1e1aa:	4405      	add	r5, r0
   1e1ac:	44a9      	add	r9, r5
    for (i = 1; i < ct->mon; i++)
   1e1ae:	3701      	adds	r7, #1
   1e1b0:	45ba      	cmp	sl, r7
   1e1b2:	dd07      	ble.n	1e1c4 <clocktime_to_timeval+0xe0>
          days += days_in_month(year, i);
   1e1b4:	1e7b      	subs	r3, r7, #1
   1e1b6:	4a4b      	ldr	r2, [pc, #300]	; (1e2e4 <clocktime_to_timeval+0x200>)
   1e1b8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1e1bc:	2f02      	cmp	r7, #2
   1e1be:	d0f1      	beq.n	1e1a4 <clocktime_to_timeval+0xc0>
   1e1c0:	2000      	movs	r0, #0
   1e1c2:	e7f2      	b.n	1e1aa <clocktime_to_timeval+0xc6>
    days += (ct->day - 1);
   1e1c4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   1e1c8:	4491      	add	r9, r2
    tv->tv_sec = (((int64_t)days * 24 + ct->hour) * 60 + ct->min) * 60 +
   1e1ca:	464a      	mov	r2, r9
   1e1cc:	17d3      	asrs	r3, r2, #31
   1e1ce:	eb19 0109 	adds.w	r1, r9, r9
   1e1d2:	eb43 0003 	adc.w	r0, r3, r3
   1e1d6:	eb11 0109 	adds.w	r1, r1, r9
   1e1da:	9102      	str	r1, [sp, #8]
   1e1dc:	eb40 0303 	adc.w	r3, r0, r3
   1e1e0:	9303      	str	r3, [sp, #12]
   1e1e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1e1e6:	00cb      	lsls	r3, r1, #3
   1e1e8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
   1e1ec:	00c2      	lsls	r2, r0, #3
   1e1ee:	9202      	str	r2, [sp, #8]
   1e1f0:	9303      	str	r3, [sp, #12]
   1e1f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1e1f6:	eb12 020b 	adds.w	r2, r2, fp
   1e1fa:	eb43 73eb 	adc.w	r3, r3, fp, asr #31
   1e1fe:	011d      	lsls	r5, r3, #4
   1e200:	0111      	lsls	r1, r2, #4
   1e202:	ea45 7012 	orr.w	r0, r5, r2, lsr #28
   1e206:	1a89      	subs	r1, r1, r2
   1e208:	9104      	str	r1, [sp, #16]
   1e20a:	eb60 0303 	sbc.w	r3, r0, r3
   1e20e:	9305      	str	r3, [sp, #20]
   1e210:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1e214:	008b      	lsls	r3, r1, #2
   1e216:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
   1e21a:	0082      	lsls	r2, r0, #2
   1e21c:	9204      	str	r2, [sp, #16]
   1e21e:	9305      	str	r3, [sp, #20]
   1e220:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1e224:	9b08      	ldr	r3, [sp, #32]
   1e226:	18c9      	adds	r1, r1, r3
   1e228:	eb42 72e3 	adc.w	r2, r2, r3, asr #31
   1e22c:	4613      	mov	r3, r2
   1e22e:	460a      	mov	r2, r1
   1e230:	011d      	lsls	r5, r3, #4
   1e232:	0111      	lsls	r1, r2, #4
   1e234:	ea45 7012 	orr.w	r0, r5, r2, lsr #28
   1e238:	1a89      	subs	r1, r1, r2
   1e23a:	9106      	str	r1, [sp, #24]
   1e23c:	eb60 0303 	sbc.w	r3, r0, r3
   1e240:	9307      	str	r3, [sp, #28]
   1e242:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1e246:	008b      	lsls	r3, r1, #2
   1e248:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
   1e24c:	0082      	lsls	r2, r0, #2
   1e24e:	9206      	str	r2, [sp, #24]
   1e250:	9307      	str	r3, [sp, #28]
   1e252:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   1e256:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e258:	18c9      	adds	r1, r1, r3
   1e25a:	eb42 72e3 	adc.w	r2, r2, r3, asr #31
   1e25e:	4613      	mov	r3, r2
   1e260:	460a      	mov	r2, r1
   1e262:	9800      	ldr	r0, [sp, #0]
   1e264:	e9c0 2300 	strd	r2, r3, [r0]
    tv->tv_usec = ct->usec;
   1e268:	69e1      	ldr	r1, [r4, #28]
   1e26a:	6081      	str	r1, [r0, #8]
    if (tz != NULL) {
   1e26c:	9c01      	ldr	r4, [sp, #4]
   1e26e:	b3b4      	cbz	r4, 1e2de <clocktime_to_timeval+0x1fa>
	tv->tv_sec += tz->tz_minuteswest * 60;
   1e270:	f9b4 1000 	ldrsh.w	r1, [r4]
   1e274:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
   1e278:	0089      	lsls	r1, r1, #2
   1e27a:	1852      	adds	r2, r2, r1
   1e27c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   1e280:	e9c0 2300 	strd	r2, r3, [r0]
	tv->tv_sec -= tz->tz_dsttime ? 3600 : 0;
   1e284:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
   1e288:	b151      	cbz	r1, 1e2a0 <clocktime_to_timeval+0x1bc>
   1e28a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1e28e:	2000      	movs	r0, #0
   1e290:	1a51      	subs	r1, r2, r1
   1e292:	eb63 0000 	sbc.w	r0, r3, r0
   1e296:	9b00      	ldr	r3, [sp, #0]
   1e298:	6019      	str	r1, [r3, #0]
   1e29a:	6058      	str	r0, [r3, #4]
    return (0);
   1e29c:	2000      	movs	r0, #0
   1e29e:	e003      	b.n	1e2a8 <clocktime_to_timeval+0x1c4>
	tv->tv_sec -= tz->tz_dsttime ? 3600 : 0;
   1e2a0:	2100      	movs	r1, #0
   1e2a2:	4608      	mov	r0, r1
   1e2a4:	e7f4      	b.n	1e290 <clocktime_to_timeval+0x1ac>
        return (OS_EINVAL);
   1e2a6:	2002      	movs	r0, #2
}
   1e2a8:	b00b      	add	sp, #44	; 0x2c
   1e2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return (OS_EINVAL);
   1e2ae:	2002      	movs	r0, #2
   1e2b0:	e7fa      	b.n	1e2a8 <clocktime_to_timeval+0x1c4>
   1e2b2:	2002      	movs	r0, #2
   1e2b4:	e7f8      	b.n	1e2a8 <clocktime_to_timeval+0x1c4>
   1e2b6:	2002      	movs	r0, #2
   1e2b8:	e7f6      	b.n	1e2a8 <clocktime_to_timeval+0x1c4>
   1e2ba:	2002      	movs	r0, #2
   1e2bc:	e7f4      	b.n	1e2a8 <clocktime_to_timeval+0x1c4>
   1e2be:	2002      	movs	r0, #2
   1e2c0:	e7f2      	b.n	1e2a8 <clocktime_to_timeval+0x1c4>
   1e2c2:	2002      	movs	r0, #2
   1e2c4:	e7f0      	b.n	1e2a8 <clocktime_to_timeval+0x1c4>
   1e2c6:	2002      	movs	r0, #2
   1e2c8:	e7ee      	b.n	1e2a8 <clocktime_to_timeval+0x1c4>
   1e2ca:	2002      	movs	r0, #2
   1e2cc:	e7ec      	b.n	1e2a8 <clocktime_to_timeval+0x1c4>
   1e2ce:	2002      	movs	r0, #2
   1e2d0:	e7ea      	b.n	1e2a8 <clocktime_to_timeval+0x1c4>
   1e2d2:	2002      	movs	r0, #2
   1e2d4:	e7e8      	b.n	1e2a8 <clocktime_to_timeval+0x1c4>
   1e2d6:	2002      	movs	r0, #2
   1e2d8:	e7e6      	b.n	1e2a8 <clocktime_to_timeval+0x1c4>
   1e2da:	2002      	movs	r0, #2
   1e2dc:	e7e4      	b.n	1e2a8 <clocktime_to_timeval+0x1c4>
    return (0);
   1e2de:	2000      	movs	r0, #0
   1e2e0:	e7e2      	b.n	1e2a8 <clocktime_to_timeval+0x1c4>
   1e2e2:	bf00      	nop
   1e2e4:	00038b88 	.word	0x00038b88
   1e2e8:	000f423f 	.word	0x000f423f

0001e2ec <timeval_to_clocktime>:
{
   1e2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e2f0:	4606      	mov	r6, r0
   1e2f2:	4615      	mov	r5, r2
    secs = tv->tv_sec;
   1e2f4:	e9d0 8900 	ldrd	r8, r9, [r0]
    if (tz != NULL) {
   1e2f8:	b199      	cbz	r1, 1e322 <timeval_to_clocktime+0x36>
   1e2fa:	460a      	mov	r2, r1
        secs -= tz->tz_minuteswest * 60;
   1e2fc:	f9b1 3000 	ldrsh.w	r3, [r1]
   1e300:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1e304:	009b      	lsls	r3, r3, #2
   1e306:	ebb8 0003 	subs.w	r0, r8, r3
   1e30a:	eb69 71e3 	sbc.w	r1, r9, r3, asr #31
        secs += tz->tz_dsttime ? 3600 : 0;
   1e30e:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
   1e312:	b38b      	cbz	r3, 1e378 <timeval_to_clocktime+0x8c>
   1e314:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   1e318:	2200      	movs	r2, #0
   1e31a:	eb13 0800 	adds.w	r8, r3, r0
   1e31e:	eb42 0901 	adc.w	r9, r2, r1
    if (secs < 0 || tv->tv_usec < 0 || tv->tv_usec > 999999) {
   1e322:	f1b8 0f00 	cmp.w	r8, #0
   1e326:	f179 0300 	sbcs.w	r3, r9, #0
   1e32a:	db71      	blt.n	1e410 <timeval_to_clocktime+0x124>
   1e32c:	68b3      	ldr	r3, [r6, #8]
   1e32e:	2b00      	cmp	r3, #0
   1e330:	db70      	blt.n	1e414 <timeval_to_clocktime+0x128>
   1e332:	4a3a      	ldr	r2, [pc, #232]	; (1e41c <timeval_to_clocktime+0x130>)
   1e334:	4293      	cmp	r3, r2
   1e336:	dc6f      	bgt.n	1e418 <timeval_to_clocktime+0x12c>
    days = secs / SECDAY;
   1e338:	4a39      	ldr	r2, [pc, #228]	; (1e420 <timeval_to_clocktime+0x134>)
   1e33a:	2300      	movs	r3, #0
   1e33c:	4640      	mov	r0, r8
   1e33e:	4649      	mov	r1, r9
   1e340:	f7f5 ff8c 	bl	1425c <__aeabi_ldivmod>
   1e344:	4682      	mov	sl, r0
   1e346:	4604      	mov	r4, r0
    rsec = secs % SECDAY;
   1e348:	4a35      	ldr	r2, [pc, #212]	; (1e420 <timeval_to_clocktime+0x134>)
   1e34a:	2300      	movs	r3, #0
   1e34c:	4640      	mov	r0, r8
   1e34e:	4649      	mov	r1, r9
   1e350:	f7f5 ff84 	bl	1425c <__aeabi_ldivmod>
   1e354:	4690      	mov	r8, r2
   1e356:	461f      	mov	r7, r3
    ct->dow = day_of_week(days);
   1e358:	f10a 0004 	add.w	r0, sl, #4
   1e35c:	4b31      	ldr	r3, [pc, #196]	; (1e424 <timeval_to_clocktime+0x138>)
   1e35e:	fb83 2300 	smull	r2, r3, r3, r0
   1e362:	181a      	adds	r2, r3, r0
   1e364:	17c3      	asrs	r3, r0, #31
   1e366:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   1e36a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1e36e:	1ac3      	subs	r3, r0, r3
   1e370:	61ab      	str	r3, [r5, #24]
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   1e372:	f240 79b2 	movw	r9, #1970	; 0x7b2
   1e376:	e009      	b.n	1e38c <timeval_to_clocktime+0xa0>
        secs += tz->tz_dsttime ? 3600 : 0;
   1e378:	2300      	movs	r3, #0
   1e37a:	461a      	mov	r2, r3
   1e37c:	e7cd      	b.n	1e31a <timeval_to_clocktime+0x2e>
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   1e37e:	f240 136d 	movw	r3, #365	; 0x16d
   1e382:	429c      	cmp	r4, r3
   1e384:	db0b      	blt.n	1e39e <timeval_to_clocktime+0xb2>
        days -= days_in_year(year);
   1e386:	1ae4      	subs	r4, r4, r3
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   1e388:	f109 0901 	add.w	r9, r9, #1
   1e38c:	4648      	mov	r0, r9
   1e38e:	f7ff fe6d 	bl	1e06c <leapyear>
   1e392:	4684      	mov	ip, r0
   1e394:	2800      	cmp	r0, #0
   1e396:	d0f2      	beq.n	1e37e <timeval_to_clocktime+0x92>
   1e398:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   1e39c:	e7f1      	b.n	1e382 <timeval_to_clocktime+0x96>
    ct->year = year;
   1e39e:	f8c5 9000 	str.w	r9, [r5]
    for (i = 1; days >= days_in_month(year, i); i++)
   1e3a2:	2301      	movs	r3, #1
   1e3a4:	e005      	b.n	1e3b2 <timeval_to_clocktime+0xc6>
   1e3a6:	4662      	mov	r2, ip
   1e3a8:	4411      	add	r1, r2
   1e3aa:	42a1      	cmp	r1, r4
   1e3ac:	dc09      	bgt.n	1e3c2 <timeval_to_clocktime+0xd6>
        days -= days_in_month(year, i);
   1e3ae:	1a64      	subs	r4, r4, r1
    for (i = 1; days >= days_in_month(year, i); i++)
   1e3b0:	3301      	adds	r3, #1
   1e3b2:	1e5a      	subs	r2, r3, #1
   1e3b4:	491c      	ldr	r1, [pc, #112]	; (1e428 <timeval_to_clocktime+0x13c>)
   1e3b6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   1e3ba:	2b02      	cmp	r3, #2
   1e3bc:	d0f3      	beq.n	1e3a6 <timeval_to_clocktime+0xba>
   1e3be:	2200      	movs	r2, #0
   1e3c0:	e7f2      	b.n	1e3a8 <timeval_to_clocktime+0xbc>
    ct->mon = i;
   1e3c2:	606b      	str	r3, [r5, #4]
    ct->day = days + 1;
   1e3c4:	3401      	adds	r4, #1
   1e3c6:	60ac      	str	r4, [r5, #8]
    ct->hour = rsec / 3600;
   1e3c8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   1e3cc:	2300      	movs	r3, #0
   1e3ce:	4640      	mov	r0, r8
   1e3d0:	4639      	mov	r1, r7
   1e3d2:	f7f5 ff43 	bl	1425c <__aeabi_ldivmod>
   1e3d6:	60e8      	str	r0, [r5, #12]
    rsec = rsec % 3600;
   1e3d8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   1e3dc:	2300      	movs	r3, #0
   1e3de:	4640      	mov	r0, r8
   1e3e0:	4639      	mov	r1, r7
   1e3e2:	f7f5 ff3b 	bl	1425c <__aeabi_ldivmod>
   1e3e6:	4617      	mov	r7, r2
   1e3e8:	461c      	mov	r4, r3
    ct->min  = rsec / 60;
   1e3ea:	223c      	movs	r2, #60	; 0x3c
   1e3ec:	2300      	movs	r3, #0
   1e3ee:	4638      	mov	r0, r7
   1e3f0:	4621      	mov	r1, r4
   1e3f2:	f7f5 ff33 	bl	1425c <__aeabi_ldivmod>
   1e3f6:	6128      	str	r0, [r5, #16]
    rsec = rsec % 60;
   1e3f8:	223c      	movs	r2, #60	; 0x3c
   1e3fa:	2300      	movs	r3, #0
   1e3fc:	4638      	mov	r0, r7
   1e3fe:	4621      	mov	r1, r4
   1e400:	f7f5 ff2c 	bl	1425c <__aeabi_ldivmod>
    ct->sec  = rsec;
   1e404:	616a      	str	r2, [r5, #20]
    ct->usec = tv->tv_usec;
   1e406:	68b3      	ldr	r3, [r6, #8]
   1e408:	61eb      	str	r3, [r5, #28]
    return (0);
   1e40a:	2000      	movs	r0, #0
}
   1e40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return (OS_EINVAL);
   1e410:	2002      	movs	r0, #2
   1e412:	e7fb      	b.n	1e40c <timeval_to_clocktime+0x120>
   1e414:	2002      	movs	r0, #2
   1e416:	e7f9      	b.n	1e40c <timeval_to_clocktime+0x120>
   1e418:	2002      	movs	r0, #2
   1e41a:	e7f7      	b.n	1e40c <timeval_to_clocktime+0x120>
   1e41c:	000f423f 	.word	0x000f423f
   1e420:	00015180 	.word	0x00015180
   1e424:	92492493 	.word	0x92492493
   1e428:	00038b88 	.word	0x00038b88

0001e42c <datetime_parse>:
 * 2016-03-02T22:44:00.1                fractional seconds
 * 2016-03-02T22:44:00.101+05:30        fractional seconds with timezone
 */
int
datetime_parse(const char *input, struct os_timeval *tv, struct os_timezone *tz)
{
   1e42c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e42e:	b08b      	sub	sp, #44	; 0x2c
   1e430:	4604      	mov	r4, r0
   1e432:	460d      	mov	r5, r1
   1e434:	4616      	mov	r6, r2
    int off_hour, off_min;
    const char *cp;
    const char *ep;
    struct clocktime ct;

    bzero(&ct, sizeof(struct clocktime));
   1e436:	2220      	movs	r2, #32
   1e438:	2100      	movs	r1, #0
   1e43a:	4668      	mov	r0, sp
   1e43c:	f7fc fc2d 	bl	1ac9a <memset>
    bzero(tv, sizeof(struct os_timeval));
   1e440:	2300      	movs	r3, #0
   1e442:	602b      	str	r3, [r5, #0]
   1e444:	606b      	str	r3, [r5, #4]
   1e446:	60ab      	str	r3, [r5, #8]
   1e448:	60eb      	str	r3, [r5, #12]
    bzero(tz, sizeof(struct os_timezone));      /* default to UTC time */
   1e44a:	6033      	str	r3, [r6, #0]

    cp = input;
    cp = parse_number(cp, 4, &ct.year);
   1e44c:	466a      	mov	r2, sp
   1e44e:	2104      	movs	r1, #4
   1e450:	4620      	mov	r0, r4
   1e452:	f7ff fe2d 	bl	1e0b0 <parse_number>
    if (cp == NULL || *cp != '-') {
   1e456:	2800      	cmp	r0, #0
   1e458:	f000 80a4 	beq.w	1e5a4 <datetime_parse+0x178>
   1e45c:	7802      	ldrb	r2, [r0, #0]
   1e45e:	2a2d      	cmp	r2, #45	; 0x2d
   1e460:	f040 80a3 	bne.w	1e5aa <datetime_parse+0x17e>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.mon);
   1e464:	aa01      	add	r2, sp, #4
   1e466:	2102      	movs	r1, #2
   1e468:	3001      	adds	r0, #1
   1e46a:	f7ff fe21 	bl	1e0b0 <parse_number>
    if (cp == NULL || *cp != '-') {
   1e46e:	2800      	cmp	r0, #0
   1e470:	f000 809e 	beq.w	1e5b0 <datetime_parse+0x184>
   1e474:	7802      	ldrb	r2, [r0, #0]
   1e476:	2a2d      	cmp	r2, #45	; 0x2d
   1e478:	f040 809d 	bne.w	1e5b6 <datetime_parse+0x18a>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.day);
   1e47c:	aa02      	add	r2, sp, #8
   1e47e:	2102      	movs	r1, #2
   1e480:	3001      	adds	r0, #1
   1e482:	f7ff fe15 	bl	1e0b0 <parse_number>
    if (cp == NULL || *cp != 'T') {
   1e486:	2800      	cmp	r0, #0
   1e488:	f000 8098 	beq.w	1e5bc <datetime_parse+0x190>
   1e48c:	7802      	ldrb	r2, [r0, #0]
   1e48e:	2a54      	cmp	r2, #84	; 0x54
   1e490:	f040 8097 	bne.w	1e5c2 <datetime_parse+0x196>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.hour);
   1e494:	aa03      	add	r2, sp, #12
   1e496:	2102      	movs	r1, #2
   1e498:	3001      	adds	r0, #1
   1e49a:	f7ff fe09 	bl	1e0b0 <parse_number>
    if (cp == NULL || *cp != ':') {
   1e49e:	2800      	cmp	r0, #0
   1e4a0:	f000 8092 	beq.w	1e5c8 <datetime_parse+0x19c>
   1e4a4:	7802      	ldrb	r2, [r0, #0]
   1e4a6:	2a3a      	cmp	r2, #58	; 0x3a
   1e4a8:	f040 8091 	bne.w	1e5ce <datetime_parse+0x1a2>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.min);
   1e4ac:	aa04      	add	r2, sp, #16
   1e4ae:	2102      	movs	r1, #2
   1e4b0:	3001      	adds	r0, #1
   1e4b2:	f7ff fdfd 	bl	1e0b0 <parse_number>
    if (cp == NULL || *cp != ':') {
   1e4b6:	2800      	cmp	r0, #0
   1e4b8:	f000 808c 	beq.w	1e5d4 <datetime_parse+0x1a8>
   1e4bc:	7802      	ldrb	r2, [r0, #0]
   1e4be:	2a3a      	cmp	r2, #58	; 0x3a
   1e4c0:	f040 808b 	bne.w	1e5da <datetime_parse+0x1ae>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.sec);
   1e4c4:	aa05      	add	r2, sp, #20
   1e4c6:	2102      	movs	r1, #2
   1e4c8:	3001      	adds	r0, #1
   1e4ca:	f7ff fdf1 	bl	1e0b0 <parse_number>
    if (cp == NULL) {
   1e4ce:	4607      	mov	r7, r0
   1e4d0:	2800      	cmp	r0, #0
   1e4d2:	f000 8085 	beq.w	1e5e0 <datetime_parse+0x1b4>
        goto err;
    }

    /* parse fractional seconds if specified */
    if (*cp == '.') {
   1e4d6:	7803      	ldrb	r3, [r0, #0]
   1e4d8:	2b2e      	cmp	r3, #46	; 0x2e
   1e4da:	d035      	beq.n	1e548 <datetime_parse+0x11c>
        while (digits++ < 6) {
            ct.usec *= 10;
        }
    }

    if (*cp == 'Z' || *cp == 'z') {
   1e4dc:	783b      	ldrb	r3, [r7, #0]
   1e4de:	2b5a      	cmp	r3, #90	; 0x5a
   1e4e0:	d051      	beq.n	1e586 <datetime_parse+0x15a>
   1e4e2:	2b7a      	cmp	r3, #122	; 0x7a
   1e4e4:	d04f      	beq.n	1e586 <datetime_parse+0x15a>
        cp++;
    } else if (*cp == '+' || *cp == '-') {
   1e4e6:	2b2b      	cmp	r3, #43	; 0x2b
   1e4e8:	d001      	beq.n	1e4ee <datetime_parse+0xc2>
   1e4ea:	2b2d      	cmp	r3, #45	; 0x2d
   1e4ec:	d14c      	bne.n	1e588 <datetime_parse+0x15c>
        sign = (*cp == '+') ? +1 : -1;
   1e4ee:	2b2b      	cmp	r3, #43	; 0x2b
   1e4f0:	d056      	beq.n	1e5a0 <datetime_parse+0x174>
   1e4f2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        cp = parse_number(cp + 1, 2, &off_hour);
   1e4f6:	aa09      	add	r2, sp, #36	; 0x24
   1e4f8:	2102      	movs	r1, #2
   1e4fa:	1c78      	adds	r0, r7, #1
   1e4fc:	f7ff fdd8 	bl	1e0b0 <parse_number>
        if (cp == NULL || *cp != ':') {
   1e500:	2800      	cmp	r0, #0
   1e502:	d073      	beq.n	1e5ec <datetime_parse+0x1c0>
   1e504:	7802      	ldrb	r2, [r0, #0]
   1e506:	2a3a      	cmp	r2, #58	; 0x3a
   1e508:	d173      	bne.n	1e5f2 <datetime_parse+0x1c6>
            goto err;
        }

        cp = parse_number(cp + 1, 2, &off_min);
   1e50a:	aa08      	add	r2, sp, #32
   1e50c:	2102      	movs	r1, #2
   1e50e:	3001      	adds	r0, #1
   1e510:	f7ff fdce 	bl	1e0b0 <parse_number>
        if (cp == NULL) {
   1e514:	4607      	mov	r7, r0
   1e516:	2800      	cmp	r0, #0
   1e518:	d06e      	beq.n	1e5f8 <datetime_parse+0x1cc>
            goto err;
        }

        if (off_hour < 0 || off_hour > 23 || off_min < 0 || off_min > 59) {
   1e51a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e51c:	2a17      	cmp	r2, #23
   1e51e:	d86e      	bhi.n	1e5fe <datetime_parse+0x1d2>
   1e520:	9b08      	ldr	r3, [sp, #32]
   1e522:	2b00      	cmp	r3, #0
   1e524:	db6e      	blt.n	1e604 <datetime_parse+0x1d8>
   1e526:	2b3b      	cmp	r3, #59	; 0x3b
   1e528:	dc6f      	bgt.n	1e60a <datetime_parse+0x1de>

        /*
         * Allow time zone offsets of up to 18 hours from the GMT.
         * https://docs.oracle.com/javase/8/docs/api/java/time/ZoneOffset.html
         */
        tz->tz_minuteswest = off_hour * 60 + off_min;
   1e52a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   1e52e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1e532:	b29a      	uxth	r2, r3
   1e534:	b21b      	sxth	r3, r3
   1e536:	8033      	strh	r3, [r6, #0]
        if (tz->tz_minuteswest > 18 * 60) {
   1e538:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
   1e53c:	dc68      	bgt.n	1e610 <datetime_parse+0x1e4>

        /*
         * Positive GMT offsets (i.e. timezones to the east of GMT) are
         * represented with a negative 'tz_minuteswest' value.
         */
        if (sign > 0) {
   1e53e:	2c00      	cmp	r4, #0
   1e540:	dd22      	ble.n	1e588 <datetime_parse+0x15c>
            tz->tz_minuteswest = -tz->tz_minuteswest;
   1e542:	4252      	negs	r2, r2
   1e544:	8032      	strh	r2, [r6, #0]
   1e546:	e01f      	b.n	1e588 <datetime_parse+0x15c>
        ep = ++cp;
   1e548:	3001      	adds	r0, #1
   1e54a:	4604      	mov	r4, r0
        while (isdigit((unsigned char)*ep)) {
   1e54c:	e000      	b.n	1e550 <datetime_parse+0x124>
            ep++;
   1e54e:	3401      	adds	r4, #1
        while (isdigit((unsigned char)*ep)) {
   1e550:	7823      	ldrb	r3, [r4, #0]
   1e552:	3b30      	subs	r3, #48	; 0x30
   1e554:	2b09      	cmp	r3, #9
   1e556:	d9fa      	bls.n	1e54e <datetime_parse+0x122>
        digits = ep - cp;
   1e558:	1a24      	subs	r4, r4, r0
        if (digits <= 0 || digits > 6) {
   1e55a:	1e63      	subs	r3, r4, #1
   1e55c:	2b05      	cmp	r3, #5
   1e55e:	d842      	bhi.n	1e5e6 <datetime_parse+0x1ba>
        cp = parse_number(cp, digits, &ct.usec);
   1e560:	aa07      	add	r2, sp, #28
   1e562:	4621      	mov	r1, r4
   1e564:	f7ff fda4 	bl	1e0b0 <parse_number>
        if (cp == NULL) {
   1e568:	4607      	mov	r7, r0
   1e56a:	b940      	cbnz	r0, 1e57e <datetime_parse+0x152>
        goto err;
    }

    return (0);
err:
    return (-1);
   1e56c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e570:	e014      	b.n	1e59c <datetime_parse+0x170>
            ct.usec *= 10;
   1e572:	9b07      	ldr	r3, [sp, #28]
   1e574:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1e578:	005b      	lsls	r3, r3, #1
   1e57a:	9307      	str	r3, [sp, #28]
        while (digits++ < 6) {
   1e57c:	4614      	mov	r4, r2
   1e57e:	1c62      	adds	r2, r4, #1
   1e580:	2c05      	cmp	r4, #5
   1e582:	ddf6      	ble.n	1e572 <datetime_parse+0x146>
   1e584:	e7aa      	b.n	1e4dc <datetime_parse+0xb0>
        cp++;
   1e586:	3701      	adds	r7, #1
    if (*cp != '\0') {
   1e588:	783b      	ldrb	r3, [r7, #0]
   1e58a:	2b00      	cmp	r3, #0
   1e58c:	d143      	bne.n	1e616 <datetime_parse+0x1ea>
    if (clocktime_to_timeval(&ct, tz, tv) != 0) {
   1e58e:	462a      	mov	r2, r5
   1e590:	4631      	mov	r1, r6
   1e592:	4668      	mov	r0, sp
   1e594:	f7ff fda6 	bl	1e0e4 <clocktime_to_timeval>
   1e598:	2800      	cmp	r0, #0
   1e59a:	d13f      	bne.n	1e61c <datetime_parse+0x1f0>
}
   1e59c:	b00b      	add	sp, #44	; 0x2c
   1e59e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        sign = (*cp == '+') ? +1 : -1;
   1e5a0:	2401      	movs	r4, #1
   1e5a2:	e7a8      	b.n	1e4f6 <datetime_parse+0xca>
    return (-1);
   1e5a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5a8:	e7f8      	b.n	1e59c <datetime_parse+0x170>
   1e5aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5ae:	e7f5      	b.n	1e59c <datetime_parse+0x170>
   1e5b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5b4:	e7f2      	b.n	1e59c <datetime_parse+0x170>
   1e5b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5ba:	e7ef      	b.n	1e59c <datetime_parse+0x170>
   1e5bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5c0:	e7ec      	b.n	1e59c <datetime_parse+0x170>
   1e5c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5c6:	e7e9      	b.n	1e59c <datetime_parse+0x170>
   1e5c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5cc:	e7e6      	b.n	1e59c <datetime_parse+0x170>
   1e5ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5d2:	e7e3      	b.n	1e59c <datetime_parse+0x170>
   1e5d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5d8:	e7e0      	b.n	1e59c <datetime_parse+0x170>
   1e5da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5de:	e7dd      	b.n	1e59c <datetime_parse+0x170>
   1e5e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5e4:	e7da      	b.n	1e59c <datetime_parse+0x170>
   1e5e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5ea:	e7d7      	b.n	1e59c <datetime_parse+0x170>
   1e5ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5f0:	e7d4      	b.n	1e59c <datetime_parse+0x170>
   1e5f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5f6:	e7d1      	b.n	1e59c <datetime_parse+0x170>
   1e5f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5fc:	e7ce      	b.n	1e59c <datetime_parse+0x170>
   1e5fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e602:	e7cb      	b.n	1e59c <datetime_parse+0x170>
   1e604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e608:	e7c8      	b.n	1e59c <datetime_parse+0x170>
   1e60a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e60e:	e7c5      	b.n	1e59c <datetime_parse+0x170>
   1e610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e614:	e7c2      	b.n	1e59c <datetime_parse+0x170>
   1e616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e61a:	e7bf      	b.n	1e59c <datetime_parse+0x170>
   1e61c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e620:	e7bc      	b.n	1e59c <datetime_parse+0x170>
	...

0001e624 <datetime_format>:

int
datetime_format(const struct os_timeval *tv, const struct os_timezone *tz,
    char *ostr, int olen)
{
   1e624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e628:	b08e      	sub	sp, #56	; 0x38
   1e62a:	460f      	mov	r7, r1
   1e62c:	4690      	mov	r8, r2
   1e62e:	461c      	mov	r4, r3
    char *cp;
    int rc, rlen, minswest;
    int off_hour, off_min, sign;
    struct clocktime ct;

    rc = timeval_to_clocktime(tv, tz, &ct);
   1e630:	aa06      	add	r2, sp, #24
   1e632:	f7ff fe5b 	bl	1e2ec <timeval_to_clocktime>
    if (rc != 0) {
   1e636:	2800      	cmp	r0, #0
   1e638:	d141      	bne.n	1e6be <datetime_format+0x9a>
   1e63a:	4606      	mov	r6, r0
    }

    cp = ostr;
    rlen = olen;

    rc = snprintf(cp, rlen, "%04d-%02d-%02dT%02d:%02d:%02d.%06d",
   1e63c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1e63e:	9305      	str	r3, [sp, #20]
   1e640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e642:	9304      	str	r3, [sp, #16]
   1e644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e646:	9303      	str	r3, [sp, #12]
   1e648:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e64a:	9302      	str	r3, [sp, #8]
   1e64c:	9b08      	ldr	r3, [sp, #32]
   1e64e:	9301      	str	r3, [sp, #4]
   1e650:	9b07      	ldr	r3, [sp, #28]
   1e652:	9300      	str	r3, [sp, #0]
   1e654:	9b06      	ldr	r3, [sp, #24]
   1e656:	4a21      	ldr	r2, [pc, #132]	; (1e6dc <datetime_format+0xb8>)
   1e658:	4621      	mov	r1, r4
   1e65a:	4640      	mov	r0, r8
   1e65c:	f7fc fef9 	bl	1b452 <snprintf>
   1e660:	4605      	mov	r5, r0
        ct.year, ct.mon, ct.day, ct.hour, ct.min, ct.sec, ct.usec);
    cp += rc;
   1e662:	4440      	add	r0, r8
    rlen -= rc;
   1e664:	1b64      	subs	r4, r4, r5
    if (rc < 0 || rlen <= 0) {
   1e666:	2d00      	cmp	r5, #0
   1e668:	db2c      	blt.n	1e6c4 <datetime_format+0xa0>
   1e66a:	2c00      	cmp	r4, #0
   1e66c:	dd2d      	ble.n	1e6ca <datetime_format+0xa6>
        goto err;
    }

    if (tz != NULL) {
   1e66e:	b14f      	cbz	r7, 1e684 <datetime_format+0x60>
        minswest = tz->tz_minuteswest;
   1e670:	f9b7 5000 	ldrsh.w	r5, [r7]
        if (tz->tz_dsttime) {
   1e674:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
   1e678:	b103      	cbz	r3, 1e67c <datetime_format+0x58>
            minswest -= 60;
   1e67a:	3d3c      	subs	r5, #60	; 0x3c
        }
    } else {
        minswest = 0;
    }

    if (minswest <= 0) {
   1e67c:	2d00      	cmp	r5, #0
   1e67e:	dd02      	ble.n	1e686 <datetime_format+0x62>
        sign = '+';
        minswest = -minswest;
    } else {
        sign = '-';
   1e680:	232d      	movs	r3, #45	; 0x2d
   1e682:	e002      	b.n	1e68a <datetime_format+0x66>
        minswest = 0;
   1e684:	4635      	mov	r5, r6
        minswest = -minswest;
   1e686:	426d      	negs	r5, r5
        sign = '+';
   1e688:	232b      	movs	r3, #43	; 0x2b
    }

    off_hour = minswest / 60;
   1e68a:	4a15      	ldr	r2, [pc, #84]	; (1e6e0 <datetime_format+0xbc>)
   1e68c:	fb82 1205 	smull	r1, r2, r2, r5
   1e690:	1951      	adds	r1, r2, r5
   1e692:	17ea      	asrs	r2, r5, #31
   1e694:	ebc2 1261 	rsb	r2, r2, r1, asr #5
    off_min = minswest % 60;
   1e698:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
   1e69c:	eba5 0581 	sub.w	r5, r5, r1, lsl #2

    rc = snprintf(cp, rlen, "%c%02d:%02d", sign, off_hour, off_min);
   1e6a0:	9501      	str	r5, [sp, #4]
   1e6a2:	9200      	str	r2, [sp, #0]
   1e6a4:	4a0f      	ldr	r2, [pc, #60]	; (1e6e4 <datetime_format+0xc0>)
   1e6a6:	4621      	mov	r1, r4
   1e6a8:	f7fc fed3 	bl	1b452 <snprintf>
    cp += rc;
    rlen -= rc;
   1e6ac:	1a24      	subs	r4, r4, r0
    if (rc < 0 || rlen <= 0) {
   1e6ae:	2800      	cmp	r0, #0
   1e6b0:	db0e      	blt.n	1e6d0 <datetime_format+0xac>
   1e6b2:	2c00      	cmp	r4, #0
   1e6b4:	dd0f      	ble.n	1e6d6 <datetime_format+0xb2>

    return (0);

err:
    return (-1);
}
   1e6b6:	4630      	mov	r0, r6
   1e6b8:	b00e      	add	sp, #56	; 0x38
   1e6ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (-1);
   1e6be:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1e6c2:	e7f8      	b.n	1e6b6 <datetime_format+0x92>
   1e6c4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1e6c8:	e7f5      	b.n	1e6b6 <datetime_format+0x92>
   1e6ca:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1e6ce:	e7f2      	b.n	1e6b6 <datetime_format+0x92>
   1e6d0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1e6d4:	e7ef      	b.n	1e6b6 <datetime_format+0x92>
   1e6d6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1e6da:	e7ec      	b.n	1e6b6 <datetime_format+0x92>
   1e6dc:	00038b58 	.word	0x00038b58
   1e6e0:	88888889 	.word	0x88888889
   1e6e4:	00038b7c 	.word	0x00038b7c

0001e6e8 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   1e6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e6ea:	b083      	sub	sp, #12
   1e6ec:	460d      	mov	r5, r1
   1e6ee:	4617      	mov	r7, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   1e6f0:	b29e      	uxth	r6, r3
   1e6f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e6f4:	9300      	str	r3, [sp, #0]
   1e6f6:	4603      	mov	r3, r0
   1e6f8:	9a08      	ldr	r2, [sp, #32]
   1e6fa:	4631      	mov	r1, r6
   1e6fc:	4628      	mov	r0, r5
   1e6fe:	f7fb fb61 	bl	19dc4 <os_mempool_init>
    if (rc != 0) {
   1e702:	b108      	cbz	r0, 1e708 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1e704:	b003      	add	sp, #12
   1e706:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   1e708:	4633      	mov	r3, r6
   1e70a:	9a08      	ldr	r2, [sp, #32]
   1e70c:	b292      	uxth	r2, r2
   1e70e:	4629      	mov	r1, r5
   1e710:	4638      	mov	r0, r7
   1e712:	f7fa ff1d 	bl	19550 <os_mbuf_pool_init>
    if (rc != 0) {
   1e716:	e7f5      	b.n	1e704 <mem_init_mbuf_pool+0x1c>

0001e718 <mem_split_frag>:
 *                              NULL on failure.
 */
struct os_mbuf *
mem_split_frag(struct os_mbuf **om, uint16_t max_frag_sz,
               mem_frag_alloc_fn *alloc_cb, void *cb_arg)
{
   1e718:	b570      	push	{r4, r5, r6, lr}
   1e71a:	4604      	mov	r4, r0
   1e71c:	460d      	mov	r5, r1
   1e71e:	4619      	mov	r1, r3
    struct os_mbuf *frag;
    int rc;

    if (OS_MBUF_PKTLEN(*om) <= max_frag_sz) {
   1e720:	6806      	ldr	r6, [r0, #0]
   1e722:	8a33      	ldrh	r3, [r6, #16]
   1e724:	42ab      	cmp	r3, r5
   1e726:	d913      	bls.n	1e750 <mem_split_frag+0x38>
        *om = NULL;
        return frag;
    }

    /* Packet needs to be split.  Allocate a new buffer for the fragment. */
    frag = alloc_cb(max_frag_sz, cb_arg);
   1e728:	4628      	mov	r0, r5
   1e72a:	4790      	blx	r2
    if (frag == NULL) {
   1e72c:	4606      	mov	r6, r0
   1e72e:	b190      	cbz	r0, 1e756 <mem_split_frag+0x3e>
        goto err;
    }

    /* Move data from the front of the packet into the fragment mbuf. */
    rc = os_mbuf_appendfrom(frag, *om, 0, max_frag_sz);
   1e730:	462b      	mov	r3, r5
   1e732:	2200      	movs	r2, #0
   1e734:	6821      	ldr	r1, [r4, #0]
   1e736:	f7fa ffbf 	bl	196b8 <os_mbuf_appendfrom>
    if (rc != 0) {
   1e73a:	b960      	cbnz	r0, 1e756 <mem_split_frag+0x3e>
        goto err;
    }
    os_mbuf_adj(*om, max_frag_sz);
   1e73c:	4629      	mov	r1, r5
   1e73e:	6820      	ldr	r0, [r4, #0]
   1e740:	f7fb f813 	bl	1976a <os_mbuf_adj>

    /* Free unused portion of of source mbuf chain, if possible. */
    *om = os_mbuf_trim_front(*om);
   1e744:	6820      	ldr	r0, [r4, #0]
   1e746:	f7fb fa80 	bl	19c4a <os_mbuf_trim_front>
   1e74a:	6020      	str	r0, [r4, #0]
    return frag;

err:
    os_mbuf_free_chain(frag);
    return NULL;
}
   1e74c:	4630      	mov	r0, r6
   1e74e:	bd70      	pop	{r4, r5, r6, pc}
        *om = NULL;
   1e750:	2300      	movs	r3, #0
   1e752:	6003      	str	r3, [r0, #0]
        return frag;
   1e754:	e7fa      	b.n	1e74c <mem_split_frag+0x34>
    os_mbuf_free_chain(frag);
   1e756:	4630      	mov	r0, r6
   1e758:	f7fa ff39 	bl	195ce <os_mbuf_free_chain>
    return NULL;
   1e75c:	2600      	movs	r6, #0
   1e75e:	e7f5      	b.n	1e74c <mem_split_frag+0x34>

0001e760 <rwlock_complete_handoff>:
static void
rwlock_complete_handoff(struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);
    RWLOCK_DBG_ASSERT(lock->handoffs > 0);
    lock->handoffs--;
   1e760:	f890 3020 	ldrb.w	r3, [r0, #32]
   1e764:	3b01      	subs	r3, #1
   1e766:	f880 3020 	strb.w	r3, [r0, #32]
}
   1e76a:	4770      	bx	lr

0001e76c <rwlock_read_must_block>:
static bool
rwlock_read_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   1e76c:	69c3      	ldr	r3, [r0, #28]
           lock->pending_writers > 0 ||
   1e76e:	f013 2fff 	tst.w	r3, #4278255360	; 0xff00ff00
   1e772:	d104      	bne.n	1e77e <rwlock_read_must_block+0x12>
           lock->handoffs > 0;
   1e774:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->pending_writers > 0 ||
   1e778:	b11b      	cbz	r3, 1e782 <rwlock_read_must_block+0x16>
   1e77a:	2001      	movs	r0, #1
   1e77c:	4770      	bx	lr
   1e77e:	2001      	movs	r0, #1
   1e780:	4770      	bx	lr
   1e782:	2000      	movs	r0, #0
}
   1e784:	4770      	bx	lr

0001e786 <rwlock_write_must_block>:
static bool
rwlock_write_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   1e786:	8b83      	ldrh	r3, [r0, #28]
           lock->num_readers > 0 ||
   1e788:	b923      	cbnz	r3, 1e794 <rwlock_write_must_block+0xe>
           lock->handoffs > 0;
   1e78a:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->num_readers > 0 ||
   1e78e:	b11b      	cbz	r3, 1e798 <rwlock_write_must_block+0x12>
   1e790:	2001      	movs	r0, #1
   1e792:	4770      	bx	lr
   1e794:	2001      	movs	r0, #1
   1e796:	4770      	bx	lr
   1e798:	2000      	movs	r0, #0
}
   1e79a:	4770      	bx	lr

0001e79c <rwlock_unblock>:
{
   1e79c:	b510      	push	{r4, lr}
   1e79e:	4604      	mov	r4, r0
    if (lock->pending_writers > 0) {
   1e7a0:	7fc3      	ldrb	r3, [r0, #31]
   1e7a2:	b91b      	cbnz	r3, 1e7ac <rwlock_unblock+0x10>
        lock->handoffs = lock->pending_readers;
   1e7a4:	7f83      	ldrb	r3, [r0, #30]
   1e7a6:	f880 3020 	strb.w	r3, [r0, #32]
        while (lock->pending_readers > 0) {
   1e7aa:	e010      	b.n	1e7ce <rwlock_unblock+0x32>
        lock->handoffs = 1;
   1e7ac:	2301      	movs	r3, #1
   1e7ae:	f880 3020 	strb.w	r3, [r0, #32]
        os_sem_release(&lock->wsem);
   1e7b2:	3014      	adds	r0, #20
   1e7b4:	f015 fbc4 	bl	33f40 <os_sem_release>
        lock->pending_writers--;
   1e7b8:	7fe3      	ldrb	r3, [r4, #31]
   1e7ba:	3b01      	subs	r3, #1
   1e7bc:	77e3      	strb	r3, [r4, #31]
   1e7be:	e009      	b.n	1e7d4 <rwlock_unblock+0x38>
            os_sem_release(&lock->rsem);
   1e7c0:	f104 000c 	add.w	r0, r4, #12
   1e7c4:	f015 fbbc 	bl	33f40 <os_sem_release>
            lock->pending_readers--;
   1e7c8:	7fa3      	ldrb	r3, [r4, #30]
   1e7ca:	3b01      	subs	r3, #1
   1e7cc:	77a3      	strb	r3, [r4, #30]
        while (lock->pending_readers > 0) {
   1e7ce:	7fa3      	ldrb	r3, [r4, #30]
   1e7d0:	2b00      	cmp	r3, #0
   1e7d2:	d1f5      	bne.n	1e7c0 <rwlock_unblock+0x24>
}
   1e7d4:	bd10      	pop	{r4, pc}

0001e7d6 <rwlock_acquire_read>:

void
rwlock_acquire_read(struct rwlock *lock)
{
   1e7d6:	b538      	push	{r3, r4, r5, lr}
   1e7d8:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1e7da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e7de:	f7fc f99b 	bl	1ab18 <os_mutex_pend>

    if (rwlock_read_must_block(lock)) {
   1e7e2:	4620      	mov	r0, r4
   1e7e4:	f7ff ffc2 	bl	1e76c <rwlock_read_must_block>
   1e7e8:	b140      	cbz	r0, 1e7fc <rwlock_acquire_read+0x26>
        lock->pending_readers++;
   1e7ea:	7fa3      	ldrb	r3, [r4, #30]
   1e7ec:	3301      	adds	r3, #1
   1e7ee:	77a3      	strb	r3, [r4, #30]
        acquired = false;
   1e7f0:	2500      	movs	r5, #0
    } else {
        lock->num_readers++;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   1e7f2:	4620      	mov	r0, r4
   1e7f4:	f7fc f930 	bl	1aa58 <os_mutex_release>

    if (acquired) {
   1e7f8:	b12d      	cbz	r5, 1e806 <rwlock_acquire_read+0x30>
    /* Record reader ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->num_readers++;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   1e7fa:	bd38      	pop	{r3, r4, r5, pc}
        lock->num_readers++;
   1e7fc:	7f23      	ldrb	r3, [r4, #28]
   1e7fe:	3301      	adds	r3, #1
   1e800:	7723      	strb	r3, [r4, #28]
        acquired = true;
   1e802:	2501      	movs	r5, #1
   1e804:	e7f5      	b.n	1e7f2 <rwlock_acquire_read+0x1c>
    os_sem_pend(&lock->rsem, OS_TIMEOUT_NEVER);
   1e806:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e80a:	f104 000c 	add.w	r0, r4, #12
   1e80e:	f015 fbc9 	bl	33fa4 <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1e812:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e816:	4620      	mov	r0, r4
   1e818:	f7fc f97e 	bl	1ab18 <os_mutex_pend>
    lock->num_readers++;
   1e81c:	7f23      	ldrb	r3, [r4, #28]
   1e81e:	3301      	adds	r3, #1
   1e820:	7723      	strb	r3, [r4, #28]
    rwlock_complete_handoff(lock);
   1e822:	4620      	mov	r0, r4
   1e824:	f7ff ff9c 	bl	1e760 <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   1e828:	4620      	mov	r0, r4
   1e82a:	f7fc f915 	bl	1aa58 <os_mutex_release>
   1e82e:	e7e4      	b.n	1e7fa <rwlock_acquire_read+0x24>

0001e830 <rwlock_release_read>:

void
rwlock_release_read(struct rwlock *lock)
{
   1e830:	b510      	push	{r4, lr}
   1e832:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1e834:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e838:	f7fc f96e 	bl	1ab18 <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->num_readers > 0);
    lock->num_readers--;
   1e83c:	7f23      	ldrb	r3, [r4, #28]
   1e83e:	3b01      	subs	r3, #1
   1e840:	b2db      	uxtb	r3, r3
   1e842:	7723      	strb	r3, [r4, #28]

    /* If this is the last active reader, unblock a pending writer if there is
     * one.
     */
    if (lock->num_readers == 0) {
   1e844:	b11b      	cbz	r3, 1e84e <rwlock_release_read+0x1e>
        rwlock_unblock(lock);
    }

    os_mutex_release(&lock->mtx);
   1e846:	4620      	mov	r0, r4
   1e848:	f7fc f906 	bl	1aa58 <os_mutex_release>
}
   1e84c:	bd10      	pop	{r4, pc}
        rwlock_unblock(lock);
   1e84e:	4620      	mov	r0, r4
   1e850:	f7ff ffa4 	bl	1e79c <rwlock_unblock>
   1e854:	e7f7      	b.n	1e846 <rwlock_release_read+0x16>

0001e856 <rwlock_acquire_write>:

void
rwlock_acquire_write(struct rwlock *lock)
{
   1e856:	b538      	push	{r3, r4, r5, lr}
   1e858:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1e85a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e85e:	f7fc f95b 	bl	1ab18 <os_mutex_pend>

    if (rwlock_write_must_block(lock)) {
   1e862:	4620      	mov	r0, r4
   1e864:	f7ff ff8f 	bl	1e786 <rwlock_write_must_block>
   1e868:	b140      	cbz	r0, 1e87c <rwlock_acquire_write+0x26>
        lock->pending_writers++;
   1e86a:	7fe3      	ldrb	r3, [r4, #31]
   1e86c:	3301      	adds	r3, #1
   1e86e:	77e3      	strb	r3, [r4, #31]
        acquired = false;
   1e870:	2500      	movs	r5, #0
    } else {
        lock->active_writer = true;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   1e872:	4620      	mov	r0, r4
   1e874:	f7fc f8f0 	bl	1aa58 <os_mutex_release>

    if (acquired) {
   1e878:	b11d      	cbz	r5, 1e882 <rwlock_acquire_write+0x2c>
    /* Record writer ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->active_writer = true;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   1e87a:	bd38      	pop	{r3, r4, r5, pc}
        lock->active_writer = true;
   1e87c:	2501      	movs	r5, #1
   1e87e:	7765      	strb	r5, [r4, #29]
        acquired = true;
   1e880:	e7f7      	b.n	1e872 <rwlock_acquire_write+0x1c>
    os_sem_pend(&lock->wsem, OS_TIMEOUT_NEVER);
   1e882:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e886:	f104 0014 	add.w	r0, r4, #20
   1e88a:	f015 fb8b 	bl	33fa4 <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1e88e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e892:	4620      	mov	r0, r4
   1e894:	f7fc f940 	bl	1ab18 <os_mutex_pend>
    lock->active_writer = true;
   1e898:	2301      	movs	r3, #1
   1e89a:	7763      	strb	r3, [r4, #29]
    rwlock_complete_handoff(lock);
   1e89c:	4620      	mov	r0, r4
   1e89e:	f7ff ff5f 	bl	1e760 <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   1e8a2:	4620      	mov	r0, r4
   1e8a4:	f7fc f8d8 	bl	1aa58 <os_mutex_release>
   1e8a8:	e7e7      	b.n	1e87a <rwlock_acquire_write+0x24>

0001e8aa <rwlock_release_write>:

void
rwlock_release_write(struct rwlock *lock)
{
   1e8aa:	b510      	push	{r4, lr}
   1e8ac:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1e8ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e8b2:	f7fc f931 	bl	1ab18 <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->active_writer);
    lock->active_writer = false;
   1e8b6:	2300      	movs	r3, #0
   1e8b8:	7763      	strb	r3, [r4, #29]

    rwlock_unblock(lock);
   1e8ba:	4620      	mov	r0, r4
   1e8bc:	f7ff ff6e 	bl	1e79c <rwlock_unblock>

    os_mutex_release(&lock->mtx);
   1e8c0:	4620      	mov	r0, r4
   1e8c2:	f7fc f8c9 	bl	1aa58 <os_mutex_release>
}
   1e8c6:	bd10      	pop	{r4, pc}

0001e8c8 <rwlock_init>:

int
rwlock_init(struct rwlock *lock)
{
   1e8c8:	b510      	push	{r4, lr}
   1e8ca:	4604      	mov	r4, r0
    int rc;

    *lock = (struct rwlock) { 0 };
   1e8cc:	2224      	movs	r2, #36	; 0x24
   1e8ce:	2100      	movs	r1, #0
   1e8d0:	f7fc f9e3 	bl	1ac9a <memset>

    rc = os_mutex_init(&lock->mtx);
   1e8d4:	4620      	mov	r0, r4
   1e8d6:	f7fc f8b5 	bl	1aa44 <os_mutex_init>
    if (rc != 0) {
   1e8da:	b100      	cbz	r0, 1e8de <rwlock_init+0x16>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1e8dc:	bd10      	pop	{r4, pc}
    rc = os_sem_init(&lock->rsem, 0);
   1e8de:	2100      	movs	r1, #0
   1e8e0:	f104 000c 	add.w	r0, r4, #12
   1e8e4:	f015 fb23 	bl	33f2e <os_sem_init>
    if (rc != 0) {
   1e8e8:	2800      	cmp	r0, #0
   1e8ea:	d1f7      	bne.n	1e8dc <rwlock_init+0x14>
    rc = os_sem_init(&lock->wsem, 0);
   1e8ec:	2100      	movs	r1, #0
   1e8ee:	f104 0014 	add.w	r0, r4, #20
   1e8f2:	f015 fb1c 	bl	33f2e <os_sem_init>
    if (rc != 0) {
   1e8f6:	e7f1      	b.n	1e8dc <rwlock_init+0x14>

0001e8f8 <streamer_vprintf>:
    return streamer->cfg->write_cb(streamer, src, len);
}

int
streamer_vprintf(struct streamer *streamer, const char *fmt, va_list ap)
{
   1e8f8:	b508      	push	{r3, lr}
    return streamer->cfg->vprintf_cb(streamer, fmt, ap);
   1e8fa:	6803      	ldr	r3, [r0, #0]
   1e8fc:	685b      	ldr	r3, [r3, #4]
   1e8fe:	4798      	blx	r3
}
   1e900:	bd08      	pop	{r3, pc}

0001e902 <streamer_printf>:

int
streamer_printf(struct streamer *streamer, const char *fmt, ...)
{
   1e902:	b40e      	push	{r1, r2, r3}
   1e904:	b500      	push	{lr}
   1e906:	b082      	sub	sp, #8
   1e908:	aa03      	add	r2, sp, #12
   1e90a:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list ap;
    int rc;

    va_start(ap, fmt);
   1e90e:	9201      	str	r2, [sp, #4]
    rc = streamer_vprintf(streamer, fmt, ap);
   1e910:	f7ff fff2 	bl	1e8f8 <streamer_vprintf>
    va_end(ap);

    return rc;
}
   1e914:	b002      	add	sp, #8
   1e916:	f85d eb04 	ldr.w	lr, [sp], #4
   1e91a:	b003      	add	sp, #12
   1e91c:	4770      	bx	lr

0001e91e <streamer_console_vprintf>:
}

static int
streamer_console_vprintf(struct streamer *streamer,
                         const char *fmt, va_list ap)
{
   1e91e:	b508      	push	{r3, lr}
   1e920:	4608      	mov	r0, r1
    return console_vprintf(fmt, ap);
   1e922:	4611      	mov	r1, r2
   1e924:	f7fd fbea 	bl	1c0fc <console_vprintf>
}
   1e928:	bd08      	pop	{r3, pc}

0001e92a <streamer_console_write>:
{
   1e92a:	b508      	push	{r3, lr}
   1e92c:	4608      	mov	r0, r1
    console_write(src, len);
   1e92e:	4611      	mov	r1, r2
   1e930:	f7fd fa7a 	bl	1be28 <console_write>
}
   1e934:	2000      	movs	r0, #0
   1e936:	bd08      	pop	{r3, pc}

0001e938 <streamer_console_get>:

struct streamer *
streamer_console_get(void)
{
    return &streamer_console;
}
   1e938:	4800      	ldr	r0, [pc, #0]	; (1e93c <streamer_console_get+0x4>)
   1e93a:	4770      	bx	lr
   1e93c:	100006b8 	.word	0x100006b8

0001e940 <ble_ll_count_rx_adv_pdus>:
 */
static void
ble_ll_count_rx_adv_pdus(uint8_t pdu_type)
{
    /* Count received packet types  */
    switch (pdu_type) {
   1e940:	2808      	cmp	r0, #8
   1e942:	d832      	bhi.n	1e9aa <ble_ll_count_rx_adv_pdus+0x6a>
   1e944:	e8df f000 	tbb	[pc, r0]
   1e948:	19140f0a 	.word	0x19140f0a
   1e94c:	052d231e 	.word	0x052d231e
   1e950:	28          	.byte	0x28
   1e951:	00          	.byte	0x00
    case BLE_ADV_PDU_TYPE_ADV_EXT_IND:
        STATS_INC(ble_ll_stats, rx_adv_ext_ind);
   1e952:	4a16      	ldr	r2, [pc, #88]	; (1e9ac <ble_ll_count_rx_adv_pdus+0x6c>)
   1e954:	6d53      	ldr	r3, [r2, #84]	; 0x54
   1e956:	3301      	adds	r3, #1
   1e958:	6553      	str	r3, [r2, #84]	; 0x54
        break;
   1e95a:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_ADV_IND:
        STATS_INC(ble_ll_stats, rx_adv_ind);
   1e95c:	4a13      	ldr	r2, [pc, #76]	; (1e9ac <ble_ll_count_rx_adv_pdus+0x6c>)
   1e95e:	6c93      	ldr	r3, [r2, #72]	; 0x48
   1e960:	3301      	adds	r3, #1
   1e962:	6493      	str	r3, [r2, #72]	; 0x48
        break;
   1e964:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_ADV_DIRECT_IND:
        STATS_INC(ble_ll_stats, rx_adv_direct_ind);
   1e966:	4a11      	ldr	r2, [pc, #68]	; (1e9ac <ble_ll_count_rx_adv_pdus+0x6c>)
   1e968:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1e96a:	3301      	adds	r3, #1
   1e96c:	64d3      	str	r3, [r2, #76]	; 0x4c
        break;
   1e96e:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_ADV_NONCONN_IND:
        STATS_INC(ble_ll_stats, rx_adv_nonconn_ind);
   1e970:	4a0e      	ldr	r2, [pc, #56]	; (1e9ac <ble_ll_count_rx_adv_pdus+0x6c>)
   1e972:	6d13      	ldr	r3, [r2, #80]	; 0x50
   1e974:	3301      	adds	r3, #1
   1e976:	6513      	str	r3, [r2, #80]	; 0x50
        break;
   1e978:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_SCAN_REQ:
        STATS_INC(ble_ll_stats, rx_scan_reqs);
   1e97a:	4a0c      	ldr	r2, [pc, #48]	; (1e9ac <ble_ll_count_rx_adv_pdus+0x6c>)
   1e97c:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1e97e:	3301      	adds	r3, #1
   1e980:	6593      	str	r3, [r2, #88]	; 0x58
        break;
   1e982:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_SCAN_RSP:
        STATS_INC(ble_ll_stats, rx_scan_rsps);
   1e984:	4a09      	ldr	r2, [pc, #36]	; (1e9ac <ble_ll_count_rx_adv_pdus+0x6c>)
   1e986:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1e988:	3301      	adds	r3, #1
   1e98a:	65d3      	str	r3, [r2, #92]	; 0x5c
        break;
   1e98c:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_CONNECT_IND:
        STATS_INC(ble_ll_stats, rx_connect_reqs);
   1e98e:	4a07      	ldr	r2, [pc, #28]	; (1e9ac <ble_ll_count_rx_adv_pdus+0x6c>)
   1e990:	6e13      	ldr	r3, [r2, #96]	; 0x60
   1e992:	3301      	adds	r3, #1
   1e994:	6613      	str	r3, [r2, #96]	; 0x60
        break;
   1e996:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_AUX_CONNECT_RSP:
        STATS_INC(ble_ll_stats, rx_aux_connect_rsp);
   1e998:	4a04      	ldr	r2, [pc, #16]	; (1e9ac <ble_ll_count_rx_adv_pdus+0x6c>)
   1e99a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1e99c:	3301      	adds	r3, #1
   1e99e:	6693      	str	r3, [r2, #104]	; 0x68
        break;
   1e9a0:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_ADV_SCAN_IND:
        STATS_INC(ble_ll_stats, rx_scan_ind);
   1e9a2:	4a02      	ldr	r2, [pc, #8]	; (1e9ac <ble_ll_count_rx_adv_pdus+0x6c>)
   1e9a4:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1e9a6:	3301      	adds	r3, #1
   1e9a8:	6653      	str	r3, [r2, #100]	; 0x64
        break;
    default:
        break;
    }
}
   1e9aa:	4770      	bx	lr
   1e9ac:	10003fdc 	.word	0x10003fdc

0001e9b0 <ble_ll_count_rx_stats>:
 * @param hdr
 * @param len
 */
static void
ble_ll_count_rx_stats(struct ble_mbuf_hdr *hdr, uint16_t len, uint8_t pdu_type)
{
   1e9b0:	b508      	push	{r3, lr}
    uint8_t crcok;
    bool connection_data;

    crcok = BLE_MBUF_HDR_CRC_OK(hdr);
   1e9b2:	8803      	ldrh	r3, [r0, #0]

#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL) || MYNEWT_VAL(BLE_LL_ROLE_CENTRAL)
    connection_data = (BLE_MBUF_HDR_RX_STATE(hdr) == BLE_LL_STATE_CONNECTION);
   1e9b4:	f003 0007 	and.w	r0, r3, #7
    if (!connection_data) {
        connection_data = (BLE_MBUF_HDR_RX_STATE(hdr) == BLE_LL_STATE_DTM);
    }
#endif

    if (crcok) {
   1e9b8:	f013 0f80 	tst.w	r3, #128	; 0x80
   1e9bc:	d014      	beq.n	1e9e8 <ble_ll_count_rx_stats+0x38>
        if (connection_data) {
   1e9be:	2804      	cmp	r0, #4
   1e9c0:	d107      	bne.n	1e9d2 <ble_ll_count_rx_stats+0x22>
            STATS_INC(ble_ll_stats, rx_data_pdu_crc_ok);
   1e9c2:	4b12      	ldr	r3, [pc, #72]	; (1ea0c <ble_ll_count_rx_stats+0x5c>)
   1e9c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1e9c6:	3201      	adds	r2, #1
   1e9c8:	635a      	str	r2, [r3, #52]	; 0x34
            STATS_INCN(ble_ll_stats, rx_data_bytes_crc_ok, len);
   1e9ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1e9cc:	4411      	add	r1, r2
   1e9ce:	63d9      	str	r1, [r3, #60]	; 0x3c
   1e9d0:	e013      	b.n	1e9fa <ble_ll_count_rx_stats+0x4a>
        } else {
            STATS_INC(ble_ll_stats, rx_adv_pdu_crc_ok);
   1e9d2:	4b0e      	ldr	r3, [pc, #56]	; (1ea0c <ble_ll_count_rx_stats+0x5c>)
   1e9d4:	6a58      	ldr	r0, [r3, #36]	; 0x24
   1e9d6:	3001      	adds	r0, #1
   1e9d8:	6258      	str	r0, [r3, #36]	; 0x24
            STATS_INCN(ble_ll_stats, rx_adv_bytes_crc_ok, len);
   1e9da:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1e9dc:	4401      	add	r1, r0
   1e9de:	62d9      	str	r1, [r3, #44]	; 0x2c
            ble_ll_count_rx_adv_pdus(pdu_type);
   1e9e0:	4610      	mov	r0, r2
   1e9e2:	f7ff ffad 	bl	1e940 <ble_ll_count_rx_adv_pdus>
   1e9e6:	e008      	b.n	1e9fa <ble_ll_count_rx_stats+0x4a>
        }
    } else {
        if (connection_data) {
   1e9e8:	2804      	cmp	r0, #4
   1e9ea:	d007      	beq.n	1e9fc <ble_ll_count_rx_stats+0x4c>
            STATS_INC(ble_ll_stats, rx_data_pdu_crc_err);
            STATS_INCN(ble_ll_stats, rx_data_bytes_crc_err, len);
        } else {
            STATS_INC(ble_ll_stats, rx_adv_pdu_crc_err);
   1e9ec:	4b07      	ldr	r3, [pc, #28]	; (1ea0c <ble_ll_count_rx_stats+0x5c>)
   1e9ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1e9f0:	3201      	adds	r2, #1
   1e9f2:	629a      	str	r2, [r3, #40]	; 0x28
            STATS_INCN(ble_ll_stats, rx_adv_bytes_crc_err, len);
   1e9f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1e9f6:	4411      	add	r1, r2
   1e9f8:	6319      	str	r1, [r3, #48]	; 0x30
        }
    }
}
   1e9fa:	bd08      	pop	{r3, pc}
            STATS_INC(ble_ll_stats, rx_data_pdu_crc_err);
   1e9fc:	4b03      	ldr	r3, [pc, #12]	; (1ea0c <ble_ll_count_rx_stats+0x5c>)
   1e9fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1ea00:	3201      	adds	r2, #1
   1ea02:	639a      	str	r2, [r3, #56]	; 0x38
            STATS_INCN(ble_ll_stats, rx_data_bytes_crc_err, len);
   1ea04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1ea06:	4411      	add	r1, r2
   1ea08:	6419      	str	r1, [r3, #64]	; 0x40
   1ea0a:	e7f6      	b.n	1e9fa <ble_ll_count_rx_stats+0x4a>
   1ea0c:	10003fdc 	.word	0x10003fdc

0001ea10 <ble_ll_flush_pkt_queue>:
 *
 * @param pktq
 */
static void
ble_ll_flush_pkt_queue(struct ble_ll_pkt_q *pktq)
{
   1ea10:	b510      	push	{r4, lr}
   1ea12:	4604      	mov	r4, r0
    struct os_mbuf_pkthdr *pkthdr;
    struct os_mbuf *om;

    /* FLush all packets from Link layer queues */
    while (STAILQ_FIRST(pktq)) {
   1ea14:	e002      	b.n	1ea1c <ble_ll_flush_pkt_queue+0xc>
        /* Get mbuf pointer from packet header pointer */
        pkthdr = STAILQ_FIRST(pktq);
        om = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);

        /* Remove from queue and free the mbuf */
        STAILQ_REMOVE_HEAD(pktq, omp_next);
   1ea16:	6064      	str	r4, [r4, #4]
        os_mbuf_free_chain(om);
   1ea18:	f7fa fdd9 	bl	195ce <os_mbuf_free_chain>
    while (STAILQ_FIRST(pktq)) {
   1ea1c:	6823      	ldr	r3, [r4, #0]
   1ea1e:	b133      	cbz	r3, 1ea2e <ble_ll_flush_pkt_queue+0x1e>
        om = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);
   1ea20:	f1a3 0010 	sub.w	r0, r3, #16
        STAILQ_REMOVE_HEAD(pktq, omp_next);
   1ea24:	685b      	ldr	r3, [r3, #4]
   1ea26:	6023      	str	r3, [r4, #0]
   1ea28:	2b00      	cmp	r3, #0
   1ea2a:	d1f5      	bne.n	1ea18 <ble_ll_flush_pkt_queue+0x8>
   1ea2c:	e7f3      	b.n	1ea16 <ble_ll_flush_pkt_queue+0x6>
    }
}
   1ea2e:	bd10      	pop	{r4, pc}

0001ea30 <ble_ll_task>:
{
   1ea30:	b508      	push	{r3, lr}
    ble_phy_init();
   1ea32:	f007 fbf9 	bl	26228 <ble_phy_init>
    ble_phy_txpwr_set(g_ble_ll_tx_power);
   1ea36:	4b0f      	ldr	r3, [pc, #60]	; (1ea74 <ble_ll_task+0x44>)
   1ea38:	f993 0000 	ldrsb.w	r0, [r3]
   1ea3c:	f007 fc0c 	bl	26258 <ble_phy_txpwr_set>
    ble_hci_trans_cfg_ll(ble_ll_hci_cmd_rx, NULL, ble_ll_hci_acl_rx, NULL);
   1ea40:	2300      	movs	r3, #0
   1ea42:	4a0d      	ldr	r2, [pc, #52]	; (1ea78 <ble_ll_task+0x48>)
   1ea44:	4619      	mov	r1, r3
   1ea46:	480d      	ldr	r0, [pc, #52]	; (1ea7c <ble_ll_task+0x4c>)
   1ea48:	f013 fb66 	bl	32118 <ble_hci_trans_cfg_ll>
    ble_ll_hci_send_noop();
   1ea4c:	f005 fa1a 	bl	23e84 <ble_ll_hci_send_noop>
ble_npl_eventq_get(struct ble_npl_eventq *evq, ble_npl_time_t tmo)
{
    struct os_event *ev;

    if (tmo == BLE_NPL_TIME_FOREVER) {
        ev = os_eventq_get(&evq->evq);
   1ea50:	480b      	ldr	r0, [pc, #44]	; (1ea80 <ble_ll_task+0x50>)
   1ea52:	f7fa fd05 	bl	19460 <os_eventq_get>
        BLE_LL_ASSERT(ev);
   1ea56:	b110      	cbz	r0, 1ea5e <ble_ll_task+0x2e>
}

static inline void
ble_npl_event_run(struct ble_npl_event *ev)
{
    ev->ev.ev_cb(&ev->ev);
   1ea58:	6842      	ldr	r2, [r0, #4]
   1ea5a:	4790      	blx	r2
}
   1ea5c:	e7f8      	b.n	1ea50 <ble_ll_task+0x20>
   1ea5e:	f7f5 fe49 	bl	146f4 <hal_debugger_connected>
   1ea62:	b100      	cbz	r0, 1ea66 <ble_ll_task+0x36>
   1ea64:	be01      	bkpt	0x0001
   1ea66:	2300      	movs	r3, #0
   1ea68:	461a      	mov	r2, r3
   1ea6a:	4619      	mov	r1, r3
   1ea6c:	4618      	mov	r0, r3
   1ea6e:	f7fa f95f 	bl	18d30 <__assert_func>
   1ea72:	bf00      	nop
   1ea74:	10004348 	.word	0x10004348
   1ea78:	00023f9d 	.word	0x00023f9d
   1ea7c:	00023f61 	.word	0x00023f61
   1ea80:	100040f8 	.word	0x100040f8

0001ea84 <ble_ll_validate_task>:
    ble_hdr->txinfo.hdr_byte = hdr;
}

static void
ble_ll_validate_task(void)
{
   1ea84:	b500      	push	{lr}
   1ea86:	b08f      	sub	sp, #60	; 0x3c
#ifdef MYNEWT
#ifndef NDEBUG
    struct os_task_info oti;

    os_task_info_get(&g_ble_ll_task, &oti);
   1ea88:	4669      	mov	r1, sp
   1ea8a:	480b      	ldr	r0, [pc, #44]	; (1eab8 <ble_ll_validate_task+0x34>)
   1ea8c:	f7fb fd3e 	bl	1a50c <os_task_info_get>

    BLE_LL_ASSERT(oti.oti_stkusage < oti.oti_stksize);
   1ea90:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1ea94:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1ea98:	429a      	cmp	r2, r3
   1ea9a:	d202      	bcs.n	1eaa2 <ble_ll_validate_task+0x1e>
#endif
#endif
}
   1ea9c:	b00f      	add	sp, #60	; 0x3c
   1ea9e:	f85d fb04 	ldr.w	pc, [sp], #4
    BLE_LL_ASSERT(oti.oti_stkusage < oti.oti_stksize);
   1eaa2:	f7f5 fe27 	bl	146f4 <hal_debugger_connected>
   1eaa6:	b100      	cbz	r0, 1eaaa <ble_ll_validate_task+0x26>
   1eaa8:	be01      	bkpt	0x0001
   1eaaa:	2300      	movs	r3, #0
   1eaac:	461a      	mov	r2, r3
   1eaae:	4619      	mov	r1, r3
   1eab0:	4618      	mov	r0, r3
   1eab2:	f7fa f93d 	bl	18d30 <__assert_func>
   1eab6:	bf00      	nop
   1eab8:	100042f8 	.word	0x100042f8

0001eabc <ble_ll_hw_err_timer_cb>:
{
   1eabc:	b508      	push	{r3, lr}
    if (ble_ll_hci_ev_hw_err(BLE_HW_ERR_HCI_SYNC_LOSS)) {
   1eabe:	2001      	movs	r0, #1
   1eac0:	f005 fbb1 	bl	24226 <ble_ll_hci_ev_hw_err>
   1eac4:	b900      	cbnz	r0, 1eac8 <ble_ll_hw_err_timer_cb+0xc>
}
   1eac6:	bd08      	pop	{r3, pc}
}

static inline ble_npl_error_t
ble_npl_callout_reset(struct ble_npl_callout *co, ble_npl_time_t ticks)
{
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   1eac8:	2106      	movs	r1, #6
   1eaca:	4802      	ldr	r0, [pc, #8]	; (1ead4 <ble_ll_hw_err_timer_cb+0x18>)
   1eacc:	f7fa fb78 	bl	191c0 <os_callout_reset>
   1ead0:	e7f9      	b.n	1eac6 <ble_ll_hw_err_timer_cb+0xa>
   1ead2:	bf00      	nop
   1ead4:	10004158 	.word	0x10004158

0001ead8 <ble_ll_event_comp_pkts>:
{
   1ead8:	b508      	push	{r3, lr}
    ble_ll_conn_num_comp_pkts_event_send(NULL);
   1eada:	2000      	movs	r0, #0
   1eadc:	f003 f838 	bl	21b50 <ble_ll_conn_num_comp_pkts_event_send>
}
   1eae0:	bd08      	pop	{r3, pc}

0001eae2 <ble_ll_event_dbuf_overflow>:
{
   1eae2:	b508      	push	{r3, lr}
    ble_ll_hci_ev_databuf_overflow();
   1eae4:	f005 fbb7 	bl	24256 <ble_ll_hci_ev_databuf_overflow>
}
   1eae8:	bd08      	pop	{r3, pc}
	...

0001eaec <ble_ll_tx_pkt_in>:
{
   1eaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    while (STAILQ_FIRST(&g_ble_ll_data.ll_tx_pkt_q)) {
   1eaee:	e00a      	b.n	1eb06 <ble_ll_tx_pkt_in+0x1a>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_tx_pkt_q, omp_next);
   1eaf0:	4613      	mov	r3, r2
   1eaf2:	3248      	adds	r2, #72	; 0x48
   1eaf4:	64da      	str	r2, [r3, #76]	; 0x4c
   1eaf6:	e013      	b.n	1eb20 <ble_ll_tx_pkt_in+0x34>
            STATS_INC(ble_ll_stats, bad_acl_hdr);
   1eaf8:	4a1a      	ldr	r2, [pc, #104]	; (1eb64 <ble_ll_tx_pkt_in+0x78>)
   1eafa:	69d3      	ldr	r3, [r2, #28]
   1eafc:	3301      	adds	r3, #1
   1eafe:	61d3      	str	r3, [r2, #28]
            os_mbuf_free_chain(om);
   1eb00:	4638      	mov	r0, r7
   1eb02:	f7fa fd64 	bl	195ce <os_mbuf_free_chain>
    while (STAILQ_FIRST(&g_ble_ll_data.ll_tx_pkt_q)) {
   1eb06:	4b18      	ldr	r3, [pc, #96]	; (1eb68 <ble_ll_tx_pkt_in+0x7c>)
   1eb08:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   1eb0a:	b354      	cbz	r4, 1eb62 <ble_ll_tx_pkt_in+0x76>
        om = (struct os_mbuf *)((uint8_t *)pkthdr - sizeof(struct os_mbuf));
   1eb0c:	f1a4 0710 	sub.w	r7, r4, #16
        OS_ENTER_CRITICAL(sr);
   1eb10:	f7fb feca 	bl	1a8a8 <os_arch_save_sr>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_tx_pkt_q, omp_next);
   1eb14:	4a14      	ldr	r2, [pc, #80]	; (1eb68 <ble_ll_tx_pkt_in+0x7c>)
   1eb16:	6c93      	ldr	r3, [r2, #72]	; 0x48
   1eb18:	685b      	ldr	r3, [r3, #4]
   1eb1a:	6493      	str	r3, [r2, #72]	; 0x48
   1eb1c:	2b00      	cmp	r3, #0
   1eb1e:	d0e7      	beq.n	1eaf0 <ble_ll_tx_pkt_in+0x4>
        OS_EXIT_CRITICAL(sr);
   1eb20:	f7fb fec8 	bl	1a8b4 <os_arch_restore_sr>
        handle = get_le16(om->om_data);
   1eb24:	f854 0c10 	ldr.w	r0, [r4, #-16]
   1eb28:	f7fa f991 	bl	18e4e <get_le16>
   1eb2c:	4606      	mov	r6, r0
        length = get_le16(om->om_data + 2);
   1eb2e:	f854 0c10 	ldr.w	r0, [r4, #-16]
   1eb32:	3002      	adds	r0, #2
   1eb34:	f7fa f98b 	bl	18e4e <get_le16>
   1eb38:	4605      	mov	r5, r0
        os_mbuf_adj(om, sizeof(struct hci_data_hdr));
   1eb3a:	2104      	movs	r1, #4
   1eb3c:	4638      	mov	r0, r7
   1eb3e:	f7fa fe14 	bl	1976a <os_mbuf_adj>
        pb = handle & 0x3000;
   1eb42:	f406 5240 	and.w	r2, r6, #12288	; 0x3000
        if ((pkthdr->omp_len != length) || (pb > 0x1000) || (length == 0)) {
   1eb46:	8823      	ldrh	r3, [r4, #0]
   1eb48:	42ab      	cmp	r3, r5
   1eb4a:	d1d5      	bne.n	1eaf8 <ble_ll_tx_pkt_in+0xc>
   1eb4c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   1eb50:	d8d2      	bhi.n	1eaf8 <ble_ll_tx_pkt_in+0xc>
   1eb52:	2d00      	cmp	r5, #0
   1eb54:	d0d0      	beq.n	1eaf8 <ble_ll_tx_pkt_in+0xc>
        ble_ll_conn_tx_pkt_in(om, handle, length);
   1eb56:	462a      	mov	r2, r5
   1eb58:	4631      	mov	r1, r6
   1eb5a:	4638      	mov	r0, r7
   1eb5c:	f002 fc9c 	bl	21498 <ble_ll_conn_tx_pkt_in>
   1eb60:	e7d1      	b.n	1eb06 <ble_ll_tx_pkt_in+0x1a>
}
   1eb62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1eb64:	10003fdc 	.word	0x10003fdc
   1eb68:	100040e8 	.word	0x100040e8

0001eb6c <ble_ll_event_tx_pkt>:
{
   1eb6c:	b508      	push	{r3, lr}
    ble_ll_tx_pkt_in();
   1eb6e:	f7ff ffbd 	bl	1eaec <ble_ll_tx_pkt_in>
}
   1eb72:	bd08      	pop	{r3, pc}

0001eb74 <ble_ll_rx_pkt_in>:
{
   1eb74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    while (STAILQ_FIRST(&g_ble_ll_data.ll_rx_pkt_q)) {
   1eb78:	e011      	b.n	1eb9e <ble_ll_rx_pkt_in+0x2a>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_rx_pkt_q, omp_next);
   1eb7a:	4613      	mov	r3, r2
   1eb7c:	3230      	adds	r2, #48	; 0x30
   1eb7e:	635a      	str	r2, [r3, #52]	; 0x34
   1eb80:	e01a      	b.n	1ebb8 <ble_ll_rx_pkt_in+0x44>
            ble_ll_conn_rx_data_pdu(m, ble_hdr);
   1eb82:	4639      	mov	r1, r7
   1eb84:	4630      	mov	r0, r6
   1eb86:	f002 fb63 	bl	21250 <ble_ll_conn_rx_data_pdu>
        if (m) {
   1eb8a:	e008      	b.n	1eb9e <ble_ll_rx_pkt_in+0x2a>
            ble_ll_adv_rx_pkt_in(pdu_type, rxbuf, ble_hdr);
   1eb8c:	463a      	mov	r2, r7
   1eb8e:	4641      	mov	r1, r8
   1eb90:	4628      	mov	r0, r5
   1eb92:	f001 f8f3 	bl	1fd7c <ble_ll_adv_rx_pkt_in>
        if (m) {
   1eb96:	b116      	cbz	r6, 1eb9e <ble_ll_rx_pkt_in+0x2a>
            os_mbuf_free_chain(m);
   1eb98:	4630      	mov	r0, r6
   1eb9a:	f7fa fd18 	bl	195ce <os_mbuf_free_chain>
    while (STAILQ_FIRST(&g_ble_ll_data.ll_rx_pkt_q)) {
   1eb9e:	4b19      	ldr	r3, [pc, #100]	; (1ec04 <ble_ll_rx_pkt_in+0x90>)
   1eba0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   1eba2:	b364      	cbz	r4, 1ebfe <ble_ll_rx_pkt_in+0x8a>
        m = (struct os_mbuf *)((uint8_t *)pkthdr - sizeof(struct os_mbuf));
   1eba4:	f1a4 0610 	sub.w	r6, r4, #16
        OS_ENTER_CRITICAL(sr);
   1eba8:	f7fb fe7e 	bl	1a8a8 <os_arch_save_sr>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_rx_pkt_q, omp_next);
   1ebac:	4a15      	ldr	r2, [pc, #84]	; (1ec04 <ble_ll_rx_pkt_in+0x90>)
   1ebae:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1ebb0:	685b      	ldr	r3, [r3, #4]
   1ebb2:	6313      	str	r3, [r2, #48]	; 0x30
   1ebb4:	2b00      	cmp	r3, #0
   1ebb6:	d0e0      	beq.n	1eb7a <ble_ll_rx_pkt_in+0x6>
        OS_EXIT_CRITICAL(sr);
   1ebb8:	f7fb fe7c 	bl	1a8b4 <os_arch_restore_sr>
        ble_hdr = BLE_MBUF_HDR_PTR(m);
   1ebbc:	f104 0708 	add.w	r7, r4, #8
        rxbuf = m->om_data;
   1ebc0:	f854 8c10 	ldr.w	r8, [r4, #-16]
        pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   1ebc4:	f898 5000 	ldrb.w	r5, [r8]
   1ebc8:	f005 050f 	and.w	r5, r5, #15
        ble_ll_count_rx_stats(ble_hdr, pkthdr->omp_len, pdu_type);
   1ebcc:	462a      	mov	r2, r5
   1ebce:	8821      	ldrh	r1, [r4, #0]
   1ebd0:	4638      	mov	r0, r7
   1ebd2:	f7ff feed 	bl	1e9b0 <ble_ll_count_rx_stats>
        switch (BLE_MBUF_HDR_RX_STATE(ble_hdr)) {
   1ebd6:	7a23      	ldrb	r3, [r4, #8]
   1ebd8:	f003 0307 	and.w	r3, r3, #7
   1ebdc:	2b02      	cmp	r3, #2
   1ebde:	d008      	beq.n	1ebf2 <ble_ll_rx_pkt_in+0x7e>
   1ebe0:	2b04      	cmp	r3, #4
   1ebe2:	d0ce      	beq.n	1eb82 <ble_ll_rx_pkt_in+0xe>
   1ebe4:	2b01      	cmp	r3, #1
   1ebe6:	d0d1      	beq.n	1eb8c <ble_ll_rx_pkt_in+0x18>
            STATS_INC(ble_ll_stats, bad_ll_state);
   1ebe8:	4a07      	ldr	r2, [pc, #28]	; (1ec08 <ble_ll_rx_pkt_in+0x94>)
   1ebea:	6993      	ldr	r3, [r2, #24]
   1ebec:	3301      	adds	r3, #1
   1ebee:	6193      	str	r3, [r2, #24]
            break;
   1ebf0:	e7d1      	b.n	1eb96 <ble_ll_rx_pkt_in+0x22>
            ble_ll_scan_rx_pkt_in(pdu_type, m, ble_hdr);
   1ebf2:	463a      	mov	r2, r7
   1ebf4:	4631      	mov	r1, r6
   1ebf6:	4628      	mov	r0, r5
   1ebf8:	f006 fd10 	bl	2561c <ble_ll_scan_rx_pkt_in>
            break;
   1ebfc:	e7cb      	b.n	1eb96 <ble_ll_rx_pkt_in+0x22>
}
   1ebfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ec02:	bf00      	nop
   1ec04:	100040e8 	.word	0x100040e8
   1ec08:	10003fdc 	.word	0x10003fdc

0001ec0c <ble_ll_event_rx_pkt>:
{
   1ec0c:	b508      	push	{r3, lr}
    ble_ll_rx_pkt_in();
   1ec0e:	f7ff ffb1 	bl	1eb74 <ble_ll_rx_pkt_in>
}
   1ec12:	bd08      	pop	{r3, pc}

0001ec14 <ble_ll_chk_txrx_octets>:
    if ((octets < BLE_LL_CONN_SUPP_BYTES_MIN) ||
   1ec14:	381b      	subs	r0, #27
   1ec16:	b280      	uxth	r0, r0
   1ec18:	28e0      	cmp	r0, #224	; 0xe0
   1ec1a:	d901      	bls.n	1ec20 <ble_ll_chk_txrx_octets+0xc>
        rc = 0;
   1ec1c:	2000      	movs	r0, #0
   1ec1e:	4770      	bx	lr
        rc = 1;
   1ec20:	2001      	movs	r0, #1
}
   1ec22:	4770      	bx	lr

0001ec24 <ble_ll_chk_txrx_time>:
    if ((time < BLE_LL_CONN_SUPP_TIME_MIN) ||
   1ec24:	f5a0 70a4 	sub.w	r0, r0, #328	; 0x148
   1ec28:	b280      	uxth	r0, r0
   1ec2a:	f244 1348 	movw	r3, #16712	; 0x4148
   1ec2e:	4298      	cmp	r0, r3
   1ec30:	d901      	bls.n	1ec36 <ble_ll_chk_txrx_time+0x12>
        rc = 0;
   1ec32:	2000      	movs	r0, #0
   1ec34:	4770      	bx	lr
        rc = 1;
   1ec36:	2001      	movs	r0, #1
}
   1ec38:	4770      	bx	lr

0001ec3a <ble_ll_is_rpa>:
    if (addr_type && ((addr[5] & 0xc0) == 0x40)) {
   1ec3a:	b131      	cbz	r1, 1ec4a <ble_ll_is_rpa+0x10>
   1ec3c:	7943      	ldrb	r3, [r0, #5]
   1ec3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1ec42:	2b40      	cmp	r3, #64	; 0x40
   1ec44:	d003      	beq.n	1ec4e <ble_ll_is_rpa+0x14>
        rc = 0;
   1ec46:	2000      	movs	r0, #0
   1ec48:	4770      	bx	lr
   1ec4a:	2000      	movs	r0, #0
   1ec4c:	4770      	bx	lr
        rc = 1;
   1ec4e:	2001      	movs	r0, #1
}
   1ec50:	4770      	bx	lr

0001ec52 <ble_ll_is_valid_public_addr>:
    for (i = 0; i < BLE_DEV_ADDR_LEN; ++i) {
   1ec52:	2300      	movs	r3, #0
   1ec54:	2b05      	cmp	r3, #5
   1ec56:	dc03      	bgt.n	1ec60 <ble_ll_is_valid_public_addr+0xe>
        if (addr[i]) {
   1ec58:	5cc2      	ldrb	r2, [r0, r3]
   1ec5a:	b91a      	cbnz	r2, 1ec64 <ble_ll_is_valid_public_addr+0x12>
    for (i = 0; i < BLE_DEV_ADDR_LEN; ++i) {
   1ec5c:	3301      	adds	r3, #1
   1ec5e:	e7f9      	b.n	1ec54 <ble_ll_is_valid_public_addr+0x2>
    return 0;
   1ec60:	2000      	movs	r0, #0
   1ec62:	4770      	bx	lr
            return 1;
   1ec64:	2001      	movs	r0, #1
}
   1ec66:	4770      	bx	lr

0001ec68 <ble_ll_is_valid_random_addr>:
{
   1ec68:	b510      	push	{r4, lr}
    sum = 0;
   1ec6a:	2300      	movs	r3, #0
    for (i = 0; i < (BLE_DEV_ADDR_LEN -1); ++i) {
   1ec6c:	461a      	mov	r2, r3
   1ec6e:	2a04      	cmp	r2, #4
   1ec70:	dc04      	bgt.n	1ec7c <ble_ll_is_valid_random_addr+0x14>
        sum += addr[i];
   1ec72:	5c84      	ldrb	r4, [r0, r2]
   1ec74:	4423      	add	r3, r4
   1ec76:	b29b      	uxth	r3, r3
    for (i = 0; i < (BLE_DEV_ADDR_LEN -1); ++i) {
   1ec78:	3201      	adds	r2, #1
   1ec7a:	e7f8      	b.n	1ec6e <ble_ll_is_valid_random_addr+0x6>
    sum += addr[5] & 0x3f;
   1ec7c:	7942      	ldrb	r2, [r0, #5]
   1ec7e:	f002 013f 	and.w	r1, r2, #63	; 0x3f
   1ec82:	440b      	add	r3, r1
   1ec84:	b29b      	uxth	r3, r3
    if ((sum == 0) || (sum == ((5*255) + 0x3f))) {
   1ec86:	b1eb      	cbz	r3, 1ecc4 <ble_ll_is_valid_random_addr+0x5c>
   1ec88:	f240 543a 	movw	r4, #1338	; 0x53a
   1ec8c:	42a3      	cmp	r3, r4
   1ec8e:	d01b      	beq.n	1ecc8 <ble_ll_is_valid_random_addr+0x60>
    addr_type = addr[5] & 0xc0;
   1ec90:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    if (addr_type == 0xc0) {
   1ec94:	2ac0      	cmp	r2, #192	; 0xc0
   1ec96:	d019      	beq.n	1eccc <ble_ll_is_valid_random_addr+0x64>
    } else if (addr_type == 0x40) {
   1ec98:	2a40      	cmp	r2, #64	; 0x40
   1ec9a:	d008      	beq.n	1ecae <ble_ll_is_valid_random_addr+0x46>
    } else if (addr_type == 0) {
   1ec9c:	b9e2      	cbnz	r2, 1ecd8 <ble_ll_is_valid_random_addr+0x70>
        if (!memcmp(g_dev_addr, addr, BLE_DEV_ADDR_LEN)) {
   1ec9e:	2206      	movs	r2, #6
   1eca0:	4601      	mov	r1, r0
   1eca2:	480e      	ldr	r0, [pc, #56]	; (1ecdc <ble_ll_is_valid_random_addr+0x74>)
   1eca4:	f7fb ffb0 	bl	1ac08 <memcmp>
   1eca8:	b168      	cbz	r0, 1ecc6 <ble_ll_is_valid_random_addr+0x5e>
    rc = 1;
   1ecaa:	2001      	movs	r0, #1
   1ecac:	e00b      	b.n	1ecc6 <ble_ll_is_valid_random_addr+0x5e>
        sum = addr[3] + addr[4] + (addr[5] & 0x3f);
   1ecae:	78c3      	ldrb	r3, [r0, #3]
   1ecb0:	7902      	ldrb	r2, [r0, #4]
   1ecb2:	4413      	add	r3, r2
        if ((sum == 0) || (sum == (255 + 255 + 0x3f))) {
   1ecb4:	18c9      	adds	r1, r1, r3
   1ecb6:	d00b      	beq.n	1ecd0 <ble_ll_is_valid_random_addr+0x68>
   1ecb8:	f240 233d 	movw	r3, #573	; 0x23d
   1ecbc:	4299      	cmp	r1, r3
   1ecbe:	d009      	beq.n	1ecd4 <ble_ll_is_valid_random_addr+0x6c>
    rc = 1;
   1ecc0:	2001      	movs	r0, #1
   1ecc2:	e000      	b.n	1ecc6 <ble_ll_is_valid_random_addr+0x5e>
        return 0;
   1ecc4:	2000      	movs	r0, #0
}
   1ecc6:	bd10      	pop	{r4, pc}
        return 0;
   1ecc8:	2000      	movs	r0, #0
   1ecca:	e7fc      	b.n	1ecc6 <ble_ll_is_valid_random_addr+0x5e>
    rc = 1;
   1eccc:	2001      	movs	r0, #1
   1ecce:	e7fa      	b.n	1ecc6 <ble_ll_is_valid_random_addr+0x5e>
            rc = 0;
   1ecd0:	2000      	movs	r0, #0
   1ecd2:	e7f8      	b.n	1ecc6 <ble_ll_is_valid_random_addr+0x5e>
   1ecd4:	2000      	movs	r0, #0
   1ecd6:	e7f6      	b.n	1ecc6 <ble_ll_is_valid_random_addr+0x5e>
        rc = 0;
   1ecd8:	2000      	movs	r0, #0
   1ecda:	e7f4      	b.n	1ecc6 <ble_ll_is_valid_random_addr+0x5e>
   1ecdc:	1000434c 	.word	0x1000434c

0001ece0 <ble_ll_is_valid_own_addr_type>:
{
   1ece0:	b508      	push	{r3, lr}
    switch (own_addr_type) {
   1ece2:	2803      	cmp	r0, #3
   1ece4:	d80b      	bhi.n	1ecfe <ble_ll_is_valid_own_addr_type+0x1e>
   1ece6:	e8df f000 	tbb	[pc, r0]
   1ecea:	0602      	.short	0x0602
   1ecec:	0602      	.short	0x0602
        rc = ble_ll_is_valid_public_addr(g_dev_addr);
   1ecee:	4805      	ldr	r0, [pc, #20]	; (1ed04 <ble_ll_is_valid_own_addr_type+0x24>)
   1ecf0:	f7ff ffaf 	bl	1ec52 <ble_ll_is_valid_public_addr>
}
   1ecf4:	bd08      	pop	{r3, pc}
        rc = ble_ll_is_valid_random_addr(random_addr);
   1ecf6:	4608      	mov	r0, r1
   1ecf8:	f7ff ffb6 	bl	1ec68 <ble_ll_is_valid_random_addr>
        break;
   1ecfc:	e7fa      	b.n	1ecf4 <ble_ll_is_valid_own_addr_type+0x14>
{
   1ecfe:	2000      	movs	r0, #0
    return rc;
   1ed00:	e7f8      	b.n	1ecf4 <ble_ll_is_valid_own_addr_type+0x14>
   1ed02:	bf00      	nop
   1ed04:	1000434c 	.word	0x1000434c

0001ed08 <ble_ll_set_random_addr>:
{
   1ed08:	b570      	push	{r4, r5, r6, lr}
    if (len < sizeof(*cmd)) {
   1ed0a:	2905      	cmp	r1, #5
   1ed0c:	d91c      	bls.n	1ed48 <ble_ll_set_random_addr+0x40>
   1ed0e:	4606      	mov	r6, r0
   1ed10:	4614      	mov	r4, r2
    if (g_ble_ll_conn_create_sm.connsm) {
   1ed12:	4b10      	ldr	r3, [pc, #64]	; (1ed54 <ble_ll_set_random_addr+0x4c>)
   1ed14:	681b      	ldr	r3, [r3, #0]
   1ed16:	b113      	cbz	r3, 1ed1e <ble_ll_set_random_addr+0x16>
        return BLE_ERR_CMD_DISALLOWED;
   1ed18:	250c      	movs	r5, #12
}
   1ed1a:	4628      	mov	r0, r5
   1ed1c:	bd70      	pop	{r4, r5, r6, pc}
    if (ble_ll_scan_enabled()){
   1ed1e:	f006 fd77 	bl	25810 <ble_ll_scan_enabled>
   1ed22:	4605      	mov	r5, r0
   1ed24:	b990      	cbnz	r0, 1ed4c <ble_ll_set_random_addr+0x44>
    if (!hci_adv_ext && ble_ll_adv_enabled()) {
   1ed26:	b14c      	cbz	r4, 1ed3c <ble_ll_set_random_addr+0x34>
    if (!ble_ll_is_valid_random_addr(cmd->addr)) {
   1ed28:	4630      	mov	r0, r6
   1ed2a:	f7ff ff9d 	bl	1ec68 <ble_ll_is_valid_random_addr>
   1ed2e:	b178      	cbz	r0, 1ed50 <ble_ll_set_random_addr+0x48>
    memcpy(g_random_addr, cmd->addr, BLE_DEV_ADDR_LEN);
   1ed30:	4b09      	ldr	r3, [pc, #36]	; (1ed58 <ble_ll_set_random_addr+0x50>)
   1ed32:	6830      	ldr	r0, [r6, #0]
   1ed34:	6018      	str	r0, [r3, #0]
   1ed36:	88b2      	ldrh	r2, [r6, #4]
   1ed38:	809a      	strh	r2, [r3, #4]
    return BLE_ERR_SUCCESS;
   1ed3a:	e7ee      	b.n	1ed1a <ble_ll_set_random_addr+0x12>
    if (!hci_adv_ext && ble_ll_adv_enabled()) {
   1ed3c:	f001 f8a2 	bl	1fe84 <ble_ll_adv_enabled>
   1ed40:	2800      	cmp	r0, #0
   1ed42:	d0f1      	beq.n	1ed28 <ble_ll_set_random_addr+0x20>
        return BLE_ERR_CMD_DISALLOWED;
   1ed44:	250c      	movs	r5, #12
   1ed46:	e7e8      	b.n	1ed1a <ble_ll_set_random_addr+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1ed48:	2512      	movs	r5, #18
   1ed4a:	e7e6      	b.n	1ed1a <ble_ll_set_random_addr+0x12>
        return BLE_ERR_CMD_DISALLOWED;
   1ed4c:	250c      	movs	r5, #12
   1ed4e:	e7e4      	b.n	1ed1a <ble_ll_set_random_addr+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1ed50:	2512      	movs	r5, #18
   1ed52:	e7e2      	b.n	1ed1a <ble_ll_set_random_addr+0x12>
   1ed54:	10004464 	.word	0x10004464
   1ed58:	10004354 	.word	0x10004354

0001ed5c <ble_ll_get_our_devaddr>:
    if (addr_type) {
   1ed5c:	b908      	cbnz	r0, 1ed62 <ble_ll_get_our_devaddr+0x6>
    return g_dev_addr;
   1ed5e:	4802      	ldr	r0, [pc, #8]	; (1ed68 <ble_ll_get_our_devaddr+0xc>)
   1ed60:	4770      	bx	lr
        return g_random_addr;
   1ed62:	4802      	ldr	r0, [pc, #8]	; (1ed6c <ble_ll_get_our_devaddr+0x10>)
}
   1ed64:	4770      	bx	lr
   1ed66:	bf00      	nop
   1ed68:	1000434c 	.word	0x1000434c
   1ed6c:	10004354 	.word	0x10004354

0001ed70 <ble_ll_acl_data_in>:
{
   1ed70:	b538      	push	{r3, r4, r5, lr}
   1ed72:	4604      	mov	r4, r0
    pkthdr = OS_MBUF_PKTHDR(txpkt);
   1ed74:	f100 0510 	add.w	r5, r0, #16
    OS_ENTER_CRITICAL(sr);
   1ed78:	f7fb fd96 	bl	1a8a8 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&g_ble_ll_data.ll_tx_pkt_q, pkthdr, omp_next);
   1ed7c:	4623      	mov	r3, r4
   1ed7e:	2200      	movs	r2, #0
   1ed80:	f843 2f14 	str.w	r2, [r3, #20]!
   1ed84:	4c06      	ldr	r4, [pc, #24]	; (1eda0 <ble_ll_acl_data_in+0x30>)
   1ed86:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   1ed88:	6015      	str	r5, [r2, #0]
   1ed8a:	64e3      	str	r3, [r4, #76]	; 0x4c
    OS_EXIT_CRITICAL(sr);
   1ed8c:	f7fb fd92 	bl	1a8b4 <os_arch_restore_sr>
    os_eventq_put(&evq->evq, &ev->ev);
   1ed90:	f104 0138 	add.w	r1, r4, #56	; 0x38
   1ed94:	f104 0010 	add.w	r0, r4, #16
   1ed98:	f7fa fb1d 	bl	193d6 <os_eventq_put>
}
   1ed9c:	bd38      	pop	{r3, r4, r5, pc}
   1ed9e:	bf00      	nop
   1eda0:	100040e8 	.word	0x100040e8

0001eda4 <ble_ll_tx_mbuf_pducb>:
{
   1eda4:	b538      	push	{r3, r4, r5, lr}
    BLE_LL_ASSERT(txpdu);
   1eda6:	b159      	cbz	r1, 1edc0 <ble_ll_tx_mbuf_pducb+0x1c>
   1eda8:	4603      	mov	r3, r0
   1edaa:	4615      	mov	r5, r2
   1edac:	460c      	mov	r4, r1
    os_mbuf_copydata(txpdu, ble_hdr->txinfo.offset, ble_hdr->txinfo.pyld_len,
   1edae:	8b8a      	ldrh	r2, [r1, #28]
   1edb0:	8b49      	ldrh	r1, [r1, #26]
   1edb2:	4620      	mov	r0, r4
   1edb4:	f7fa fcac 	bl	19710 <os_mbuf_copydata>
    *hdr_byte = ble_hdr->txinfo.hdr_byte;
   1edb8:	7e63      	ldrb	r3, [r4, #25]
   1edba:	702b      	strb	r3, [r5, #0]
}
   1edbc:	7f20      	ldrb	r0, [r4, #28]
   1edbe:	bd38      	pop	{r3, r4, r5, pc}
    BLE_LL_ASSERT(txpdu);
   1edc0:	f7f5 fc98 	bl	146f4 <hal_debugger_connected>
   1edc4:	b100      	cbz	r0, 1edc8 <ble_ll_tx_mbuf_pducb+0x24>
   1edc6:	be01      	bkpt	0x0001
   1edc8:	2300      	movs	r3, #0
   1edca:	461a      	mov	r2, r3
   1edcc:	4619      	mov	r1, r3
   1edce:	4618      	mov	r0, r3
   1edd0:	f7f9 ffae 	bl	18d30 <__assert_func>

0001edd4 <ble_ll_state_set>:
    g_ble_ll_data.ll_state = ll_state;
   1edd4:	4b01      	ldr	r3, [pc, #4]	; (1eddc <ble_ll_state_set+0x8>)
   1edd6:	7218      	strb	r0, [r3, #8]
}
   1edd8:	4770      	bx	lr
   1edda:	bf00      	nop
   1eddc:	100040e8 	.word	0x100040e8

0001ede0 <ble_ll_state_get>:
}
   1ede0:	4b01      	ldr	r3, [pc, #4]	; (1ede8 <ble_ll_state_get+0x8>)
   1ede2:	7a18      	ldrb	r0, [r3, #8]
   1ede4:	4770      	bx	lr
   1ede6:	bf00      	nop
   1ede8:	100040e8 	.word	0x100040e8

0001edec <ble_ll_event_send>:
{
   1edec:	b508      	push	{r3, lr}
   1edee:	4601      	mov	r1, r0
   1edf0:	4801      	ldr	r0, [pc, #4]	; (1edf8 <ble_ll_event_send+0xc>)
   1edf2:	f7fa faf0 	bl	193d6 <os_eventq_put>
}
   1edf6:	bd08      	pop	{r3, pc}
   1edf8:	100040f8 	.word	0x100040f8

0001edfc <ble_ll_read_supp_states>:
}
   1edfc:	f46f 0040 	mvn.w	r0, #12582912	; 0xc00000
   1ee00:	f240 31ff 	movw	r1, #1023	; 0x3ff
   1ee04:	4770      	bx	lr
	...

0001ee08 <ble_ll_read_supp_features>:
}
   1ee08:	4b01      	ldr	r3, [pc, #4]	; (1ee10 <ble_ll_read_supp_features+0x8>)
   1ee0a:	e9d3 0100 	ldrd	r0, r1, [r3]
   1ee0e:	4770      	bx	lr
   1ee10:	100040e8 	.word	0x100040e8

0001ee14 <ble_ll_reset>:
 * @return int The ble error code to place in the command complete event that
 * is returned when this command is issued.
 */
int
ble_ll_reset(void)
{
   1ee14:	b538      	push	{r3, r4, r5, lr}
    int rc;
    os_sr_t sr;

    /* do sanity check on LL task stack */
    ble_ll_validate_task();
   1ee16:	f7ff fe35 	bl	1ea84 <ble_ll_validate_task>

    OS_ENTER_CRITICAL(sr);
   1ee1a:	f7fb fd45 	bl	1a8a8 <os_arch_save_sr>
   1ee1e:	4604      	mov	r4, r0
    ble_phy_disable();
   1ee20:	f007 fa5c 	bl	262dc <ble_phy_disable>
    ble_ll_sched_stop();
   1ee24:	f007 f88c 	bl	25f40 <ble_ll_sched_stop>
#if MYNEWT_VAL(BLE_LL_ROLE_OBSERVER)
    ble_ll_scan_reset();
   1ee28:	f006 fd0a 	bl	25840 <ble_ll_scan_reset>
#endif
    ble_ll_rfmgmt_reset();
    OS_EXIT_CRITICAL(sr);
   1ee2c:	4620      	mov	r0, r4
   1ee2e:	f7fb fd41 	bl	1a8b4 <os_arch_restore_sr>

#if MYNEWT_VAL(BLE_LL_ROLE_BROADCASTER)
    /* Stop any advertising */
    ble_ll_adv_reset();
   1ee32:	f001 f80d 	bl	1fe50 <ble_ll_adv_reset>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PERIODIC_ADV) && MYNEWT_VAL(BLE_LL_ROLE_OBSERVER)
    ble_ll_sync_reset();
#endif

    /* FLush all packets from Link layer queues */
    ble_ll_flush_pkt_queue(&g_ble_ll_data.ll_tx_pkt_q);
   1ee36:	4d12      	ldr	r5, [pc, #72]	; (1ee80 <ble_ll_reset+0x6c>)
   1ee38:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1ee3c:	f7ff fde8 	bl	1ea10 <ble_ll_flush_pkt_queue>
    ble_ll_flush_pkt_queue(&g_ble_ll_data.ll_rx_pkt_q);
   1ee40:	f105 0030 	add.w	r0, r5, #48	; 0x30
   1ee44:	f7ff fde4 	bl	1ea10 <ble_ll_flush_pkt_queue>

    /* Reset LL stats */
    STATS_RESET(ble_ll_stats);
   1ee48:	f44f 7280 	mov.w	r2, #256	; 0x100
   1ee4c:	2100      	movs	r1, #0
   1ee4e:	480d      	ldr	r0, [pc, #52]	; (1ee84 <ble_ll_reset+0x70>)
   1ee50:	f7fb ff23 	bl	1ac9a <memset>

    /* Reset any preferred PHYs */
    g_ble_ll_data.ll_pref_tx_phys = 0;
   1ee54:	2400      	movs	r4, #0
   1ee56:	732c      	strb	r4, [r5, #12]
    g_ble_ll_data.ll_pref_rx_phys = 0;
   1ee58:	736c      	strb	r4, [r5, #13]

#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL) || MYNEWT_VAL(BLE_LL_ROLE_CENTRAL)
    /* Reset connection module */
    ble_ll_conn_module_reset();
   1ee5a:	f002 fc59 	bl	21710 <ble_ll_conn_module_reset>
#endif

    /* All this does is re-initialize the event masks so call the hci init */
    ble_ll_hci_init();
   1ee5e:	f005 f8a3 	bl	23fa8 <ble_ll_hci_init>

    /* Reset scheduler */
    ble_ll_sched_init();
   1ee62:	f007 f875 	bl	25f50 <ble_ll_sched_init>

    /* Set state to standby */
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1ee66:	4620      	mov	r0, r4
   1ee68:	f7ff ffb4 	bl	1edd4 <ble_ll_state_set>

    /* Reset our random address */
    memset(g_random_addr, 0, BLE_DEV_ADDR_LEN);
   1ee6c:	4b06      	ldr	r3, [pc, #24]	; (1ee88 <ble_ll_reset+0x74>)
   1ee6e:	601c      	str	r4, [r3, #0]
   1ee70:	809c      	strh	r4, [r3, #4]

    /* Clear the whitelist */
    ble_ll_whitelist_clear();
   1ee72:	f007 f94f 	bl	26114 <ble_ll_whitelist_clear>

    /* Reset resolving list */
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    ble_ll_resolv_list_reset();
   1ee76:	f005 fe87 	bl	24b88 <ble_ll_resolv_list_reset>
#if MYNEWT_VAL(BLE_LL_LNA)
    ble_ll_plna_lna_init();
#endif

    /* Re-initialize the PHY */
    rc = ble_phy_init();
   1ee7a:	f007 f9d5 	bl	26228 <ble_phy_init>

    return rc;
}
   1ee7e:	bd38      	pop	{r3, r4, r5, pc}
   1ee80:	100040e8 	.word	0x100040e8
   1ee84:	10003fe8 	.word	0x10003fe8
   1ee88:	10004354 	.word	0x10004354

0001ee8c <ble_ll_pdu_tx_time_get>:
    }

    usecs += g_ble_ll_pdu_header_tx_time[phy_mode];
#else
    usecs = (((payload_len) + BLE_LL_PDU_HDR_LEN + BLE_LL_ACC_ADDR_LEN
            + BLE_LL_PREAMBLE_LEN + BLE_LL_CRC_LEN) << 3);
   1ee8c:	300a      	adds	r0, #10
#endif

    return usecs;
}
   1ee8e:	00c0      	lsls	r0, r0, #3
   1ee90:	4770      	bx	lr
	...

0001ee94 <ble_ll_pdu_max_tx_octets_get>:

uint16_t
ble_ll_pdu_max_tx_octets_get(uint32_t usecs, int phy_mode)
{
   1ee94:	b508      	push	{r3, lr}
    uint32_t header_tx_time;
    uint16_t octets = 0;

    BLE_LL_ASSERT(phy_mode < BLE_PHY_NUM_MODE);
   1ee96:	2903      	cmp	r1, #3
   1ee98:	dc0f      	bgt.n	1eeba <ble_ll_pdu_max_tx_octets_get+0x26>

    header_tx_time = g_ble_ll_pdu_header_tx_time[phy_mode];
   1ee9a:	4b19      	ldr	r3, [pc, #100]	; (1ef00 <ble_ll_pdu_max_tx_octets_get+0x6c>)
   1ee9c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
     * Reference:
     * Core v5.0, Vol 6, Part B, section 4.5.10
     * see connEffectiveMaxTxTime and connEffectiveMaxRxTime definitions
     */

    if (usecs < header_tx_time) {
   1eea0:	4283      	cmp	r3, r0
   1eea2:	d82a      	bhi.n	1eefa <ble_ll_pdu_max_tx_octets_get+0x66>
        return 27;
    }

    usecs -= header_tx_time;
   1eea4:	1ac0      	subs	r0, r0, r3

    if (phy_mode == BLE_PHY_MODE_1M) {
   1eea6:	2901      	cmp	r1, #1
   1eea8:	d011      	beq.n	1eece <ble_ll_pdu_max_tx_octets_get+0x3a>
        /* 8 usecs per byte */
        octets = usecs >> 3;
    } else if (phy_mode == BLE_PHY_MODE_2M) {
   1eeaa:	2902      	cmp	r1, #2
   1eeac:	d015      	beq.n	1eeda <ble_ll_pdu_max_tx_octets_get+0x46>
        /* 4 usecs per byte */
        octets = usecs >> 2;
    } else if (phy_mode == BLE_PHY_MODE_CODED_125KBPS) {
   1eeae:	2903      	cmp	r1, #3
   1eeb0:	d016      	beq.n	1eee0 <ble_ll_pdu_max_tx_octets_get+0x4c>
        /* S=8 => 8 * 8 = 64 usecs per byte */
        octets = usecs >> 6;
    } else if (phy_mode == BLE_PHY_MODE_CODED_500KBPS) {
   1eeb2:	b9c1      	cbnz	r1, 1eee6 <ble_ll_pdu_max_tx_octets_get+0x52>
        /* S=2 => 2 * 8 = 16 usecs per byte */
        octets = usecs >> 4;
   1eeb4:	f3c0 100f 	ubfx	r0, r0, #4, #16
   1eeb8:	e00b      	b.n	1eed2 <ble_ll_pdu_max_tx_octets_get+0x3e>
    BLE_LL_ASSERT(phy_mode < BLE_PHY_NUM_MODE);
   1eeba:	f7f5 fc1b 	bl	146f4 <hal_debugger_connected>
   1eebe:	b100      	cbz	r0, 1eec2 <ble_ll_pdu_max_tx_octets_get+0x2e>
   1eec0:	be01      	bkpt	0x0001
   1eec2:	2300      	movs	r3, #0
   1eec4:	461a      	mov	r2, r3
   1eec6:	4619      	mov	r1, r3
   1eec8:	4618      	mov	r0, r3
   1eeca:	f7f9 ff31 	bl	18d30 <__assert_func>
        octets = usecs >> 3;
   1eece:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    } else {
        BLE_LL_ASSERT(0);
    }

    /* see comment at the beginning */
    return max(27, octets);
   1eed2:	281b      	cmp	r0, #27
   1eed4:	bf38      	it	cc
   1eed6:	201b      	movcc	r0, #27
}
   1eed8:	bd08      	pop	{r3, pc}
        octets = usecs >> 2;
   1eeda:	f3c0 008f 	ubfx	r0, r0, #2, #16
   1eede:	e7f8      	b.n	1eed2 <ble_ll_pdu_max_tx_octets_get+0x3e>
        octets = usecs >> 6;
   1eee0:	f3c0 108f 	ubfx	r0, r0, #6, #16
   1eee4:	e7f5      	b.n	1eed2 <ble_ll_pdu_max_tx_octets_get+0x3e>
        BLE_LL_ASSERT(0);
   1eee6:	f7f5 fc05 	bl	146f4 <hal_debugger_connected>
   1eeea:	b100      	cbz	r0, 1eeee <ble_ll_pdu_max_tx_octets_get+0x5a>
   1eeec:	be01      	bkpt	0x0001
   1eeee:	2300      	movs	r3, #0
   1eef0:	461a      	mov	r2, r3
   1eef2:	4619      	mov	r1, r3
   1eef4:	4618      	mov	r0, r3
   1eef6:	f7f9 ff1b 	bl	18d30 <__assert_func>
        return 27;
   1eefa:	201b      	movs	r0, #27
   1eefc:	e7ec      	b.n	1eed8 <ble_ll_pdu_max_tx_octets_get+0x44>
   1eefe:	bf00      	nop
   1ef00:	00038bc8 	.word	0x00038bc8

0001ef04 <ble_ll_init>:
 *
 * @return int
 */
void
ble_ll_init(void)
{
   1ef04:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ef06:	b08b      	sub	sp, #44	; 0x2c
#endif
    ble_addr_t addr;
    struct ble_ll_obj *lldata;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1ef08:	4b53      	ldr	r3, [pc, #332]	; (1f058 <ble_ll_init+0x154>)
   1ef0a:	781b      	ldrb	r3, [r3, #0]
   1ef0c:	2b00      	cmp	r3, #0
   1ef0e:	d07f      	beq.n	1f010 <ble_ll_init+0x10c>
    return memcmp(addr, BLE_ADDR_ANY, BLE_DEV_ADDR_LEN) == 0;
   1ef10:	2300      	movs	r3, #0
   1ef12:	9306      	str	r3, [sp, #24]
   1ef14:	f8cd 301b 	str.w	r3, [sp, #27]
   1ef18:	2206      	movs	r2, #6
   1ef1a:	a906      	add	r1, sp, #24
   1ef1c:	484f      	ldr	r0, [pc, #316]	; (1f05c <ble_ll_init+0x158>)
   1ef1e:	f7fb fe73 	bl	1ac08 <memcmp>

    ble_ll_trace_init();
    ble_phy_trace_init();

    /* Set public device address if not already set */
    if (ble_ll_is_addr_empty(g_dev_addr)) {
   1ef22:	b960      	cbnz	r0, 1ef3e <ble_ll_init+0x3a>
        for (i = 0; i < BLE_DEV_ADDR_LEN; i++) {
            g_dev_addr[i] = pub_dev_addr & 0xff;
            pub_dev_addr >>= 8;
        }
#else
        memcpy(g_dev_addr, MYNEWT_VAL(BLE_PUBLIC_DEV_ADDR), BLE_DEV_ADDR_LEN);
   1ef24:	484d      	ldr	r0, [pc, #308]	; (1f05c <ble_ll_init+0x158>)
   1ef26:	2300      	movs	r3, #0
   1ef28:	6003      	str	r3, [r0, #0]
   1ef2a:	8083      	strh	r3, [r0, #4]
    return memcmp(addr, BLE_ADDR_ANY, BLE_DEV_ADDR_LEN) == 0;
   1ef2c:	9308      	str	r3, [sp, #32]
   1ef2e:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
   1ef32:	2206      	movs	r2, #6
   1ef34:	a908      	add	r1, sp, #32
   1ef36:	f7fb fe67 	bl	1ac08 <memcmp>
#endif
        if (ble_ll_is_addr_empty(g_dev_addr)) {
   1ef3a:	2800      	cmp	r0, #0
   1ef3c:	d072      	beq.n	1f024 <ble_ll_init+0x120>
                memcpy(g_dev_addr, &addr.val[0], BLE_DEV_ADDR_LEN);
            }
        }
    }

    ble_ll_rfmgmt_init();
   1ef3e:	f005 fe31 	bl	24ba4 <ble_ll_rfmgmt_init>
    /* Get pointer to global data object */
    lldata = &g_ble_ll_data;

#if MYNEWT_VAL(BLE_LL_ROLE_CENTRAL) || MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
    /* Set acl pkt size and number */
    lldata->ll_num_acl_pkts = MYNEWT_VAL(BLE_ACL_BUF_COUNT);
   1ef42:	4c47      	ldr	r4, [pc, #284]	; (1f060 <ble_ll_init+0x15c>)
   1ef44:	2604      	movs	r6, #4
   1ef46:	7266      	strb	r6, [r4, #9]
    lldata->ll_acl_pkt_size = MYNEWT_VAL(BLE_ACL_BUF_SIZE);
   1ef48:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ef4c:	8163      	strh	r3, [r4, #10]
    os_eventq_init(&evq->evq);
   1ef4e:	f104 0710 	add.w	r7, r4, #16
   1ef52:	4638      	mov	r0, r7
   1ef54:	f7fa fa32 	bl	193bc <os_eventq_init>

    /* Initialize eventq */
    ble_npl_eventq_init(&lldata->ll_evq);

    /* Initialize the transmit (from host) and receive (from phy) queues */
    STAILQ_INIT(&lldata->ll_tx_pkt_q);
   1ef58:	2500      	movs	r5, #0
   1ef5a:	4623      	mov	r3, r4
   1ef5c:	f843 5f48 	str.w	r5, [r3, #72]!
   1ef60:	64e3      	str	r3, [r4, #76]	; 0x4c
    STAILQ_INIT(&lldata->ll_rx_pkt_q);
   1ef62:	4623      	mov	r3, r4
   1ef64:	f843 5f30 	str.w	r5, [r3, #48]!
   1ef68:	6363      	str	r3, [r4, #52]	; 0x34
    memset(ev, 0, sizeof(*ev));
   1ef6a:	6225      	str	r5, [r4, #32]
   1ef6c:	62e5      	str	r5, [r4, #44]	; 0x2c
    ev->ev.ev_queued = 0;
   1ef6e:	f884 5020 	strb.w	r5, [r4, #32]
    ev->ev.ev_cb = (os_event_fn *)fn;
   1ef72:	4b3c      	ldr	r3, [pc, #240]	; (1f064 <ble_ll_init+0x160>)
   1ef74:	6263      	str	r3, [r4, #36]	; 0x24
    ev->ev.ev_arg = arg;
   1ef76:	62a5      	str	r5, [r4, #40]	; 0x28
    memset(ev, 0, sizeof(*ev));
   1ef78:	63a5      	str	r5, [r4, #56]	; 0x38
   1ef7a:	6465      	str	r5, [r4, #68]	; 0x44
    ev->ev.ev_queued = 0;
   1ef7c:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    ev->ev.ev_cb = (os_event_fn *)fn;
   1ef80:	4b39      	ldr	r3, [pc, #228]	; (1f068 <ble_ll_init+0x164>)
   1ef82:	63e3      	str	r3, [r4, #60]	; 0x3c
    ev->ev.ev_arg = arg;
   1ef84:	6425      	str	r5, [r4, #64]	; 0x40
    memset(ev, 0, sizeof(*ev));
   1ef86:	6525      	str	r5, [r4, #80]	; 0x50
   1ef88:	65e5      	str	r5, [r4, #92]	; 0x5c
    ev->ev.ev_queued = 0;
   1ef8a:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    ev->ev.ev_cb = (os_event_fn *)fn;
   1ef8e:	4b37      	ldr	r3, [pc, #220]	; (1f06c <ble_ll_init+0x168>)
   1ef90:	6563      	str	r3, [r4, #84]	; 0x54
    ev->ev.ev_arg = arg;
   1ef92:	65a5      	str	r5, [r4, #88]	; 0x58
    memset(ev, 0, sizeof(*ev));
   1ef94:	6625      	str	r5, [r4, #96]	; 0x60
   1ef96:	66e5      	str	r5, [r4, #108]	; 0x6c
    ev->ev.ev_queued = 0;
   1ef98:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
    ev->ev.ev_cb = (os_event_fn *)fn;
   1ef9c:	4b34      	ldr	r3, [pc, #208]	; (1f070 <ble_ll_init+0x16c>)
   1ef9e:	6663      	str	r3, [r4, #100]	; 0x64
    ev->ev.ev_arg = arg;
   1efa0:	66a5      	str	r5, [r4, #104]	; 0x68
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   1efa2:	462b      	mov	r3, r5
   1efa4:	4a33      	ldr	r2, [pc, #204]	; (1f074 <ble_ll_init+0x170>)
   1efa6:	4639      	mov	r1, r7
   1efa8:	f104 0070 	add.w	r0, r4, #112	; 0x70
   1efac:	f7fa f8dc 	bl	19168 <os_callout_init>
                         &g_ble_ll_data.ll_evq,
                         ble_ll_hw_err_timer_cb,
                         NULL);

    /* Initialize LL HCI */
    ble_ll_hci_init();
   1efb0:	f004 fffa 	bl	23fa8 <ble_ll_hci_init>

    /* Init the scheduler */
    ble_ll_sched_init();
   1efb4:	f006 ffcc 	bl	25f50 <ble_ll_sched_init>

#if MYNEWT_VAL(BLE_LL_ROLE_BROADCASTER)
    /* Initialize advertiser */
    ble_ll_adv_init();
   1efb8:	f000 ff76 	bl	1fea8 <ble_ll_adv_init>
#endif

#if MYNEWT_VAL(BLE_LL_ROLE_OBSERVER)
    /* Initialize a scanner */
    ble_ll_scan_init();
   1efbc:	f006 fc64 	bl	25888 <ble_ll_scan_init>
#endif

#if MYNEWT_VAL(BLE_LL_ROLE_CENTRAL) || MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
    /* Initialize the connection module */
    ble_ll_conn_module_init();
   1efc0:	f002 fc0a 	bl	217d8 <ble_ll_conn_module_init>
    features |= BLE_LL_FEAT_LE_ENCRYPTION;
#endif

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    features |= (BLE_LL_FEAT_LL_PRIVACY | BLE_LL_FEAT_EXT_SCAN_FILT);
    ble_ll_resolv_init();
   1efc4:	f005 fdc6 	bl	24b54 <ble_ll_resolv_init>
    features |= BLE_LL_FEAT_CIS_PERIPH;
    features |= BLE_LL_FEAT_ISO_BROADCASTER;
    features |= BLE_LL_FEAT_ISO_HOST_SUPPORT;
#endif

    lldata->ll_supp_features = features;
   1efc8:	22ff      	movs	r2, #255	; 0xff
   1efca:	2300      	movs	r3, #0
   1efcc:	e9c4 2300 	strd	r2, r3, [r4]

    /* Initialize random number generation */
    ble_ll_rand_init();
   1efd0:	f005 fab0 	bl	24534 <ble_ll_rand_init>
    /* Start the random number generator */
    ble_ll_rand_start();
   1efd4:	f005 faa0 	bl	24518 <ble_ll_rand_start>

    rc = stats_init_and_reg(STATS_HDR(ble_ll_stats),
   1efd8:	4b27      	ldr	r3, [pc, #156]	; (1f078 <ble_ll_init+0x174>)
   1efda:	9301      	str	r3, [sp, #4]
   1efdc:	9500      	str	r5, [sp, #0]
   1efde:	462b      	mov	r3, r5
   1efe0:	2240      	movs	r2, #64	; 0x40
   1efe2:	4631      	mov	r1, r6
   1efe4:	4825      	ldr	r0, [pc, #148]	; (1f07c <ble_ll_init+0x178>)
   1efe6:	f7fe ffa5 	bl	1df34 <stats_init_and_reg>
                            STATS_SIZE_INIT_PARMS(ble_ll_stats, STATS_SIZE_32),
                            STATS_NAME_INIT_PARMS(ble_ll_stats),
                            "ble_ll");
    SYSINIT_PANIC_ASSERT(rc == 0);
   1efea:	bb40      	cbnz	r0, 1f03e <ble_ll_init+0x13a>
#if MYNEWT_VAL(BLE_LL_DTM)
    ble_ll_dtm_init();
#endif

#if MYNEWT_VAL(BLE_LL_HCI_VS)
    ble_ll_hci_vs_init();
   1efec:	f005 f9f4 	bl	243d8 <ble_ll_hci_vs_init>
#endif

#if MYNEWT
    /* Initialize the LL task */
    os_task_init(&g_ble_ll_task, "ble_ll", ble_ll_task, NULL,
   1eff0:	235a      	movs	r3, #90	; 0x5a
   1eff2:	9303      	str	r3, [sp, #12]
   1eff4:	4b22      	ldr	r3, [pc, #136]	; (1f080 <ble_ll_init+0x17c>)
   1eff6:	9302      	str	r3, [sp, #8]
   1eff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1effc:	9301      	str	r3, [sp, #4]
   1effe:	2300      	movs	r3, #0
   1f000:	9300      	str	r3, [sp, #0]
   1f002:	4a20      	ldr	r2, [pc, #128]	; (1f084 <ble_ll_init+0x180>)
   1f004:	491c      	ldr	r1, [pc, #112]	; (1f078 <ble_ll_init+0x174>)
   1f006:	4820      	ldr	r0, [pc, #128]	; (1f088 <ble_ll_init+0x184>)
   1f008:	f7fb fa0e 	bl	1a428 <os_task_init>
 * For non-Mynewt OS it is required that OS creates task for LL and run LL
 * routine which is wrapped by nimble_port_ll_task_func().
 */

#endif
}
   1f00c:	b00b      	add	sp, #44	; 0x2c
   1f00e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SYSINIT_ASSERT_ACTIVE();
   1f010:	f7f5 fb70 	bl	146f4 <hal_debugger_connected>
   1f014:	b100      	cbz	r0, 1f018 <ble_ll_init+0x114>
   1f016:	be01      	bkpt	0x0001
   1f018:	2300      	movs	r3, #0
   1f01a:	461a      	mov	r2, r3
   1f01c:	4619      	mov	r1, r3
   1f01e:	4618      	mov	r0, r3
   1f020:	f7f9 fe86 	bl	18d30 <__assert_func>
            rc = ble_hw_get_public_addr(&addr);
   1f024:	a804      	add	r0, sp, #16
   1f026:	f007 f8c3 	bl	261b0 <ble_hw_get_public_addr>
            if (!rc) {
   1f02a:	2800      	cmp	r0, #0
   1f02c:	d187      	bne.n	1ef3e <ble_ll_init+0x3a>
                memcpy(g_dev_addr, &addr.val[0], BLE_DEV_ADDR_LEN);
   1f02e:	4b0b      	ldr	r3, [pc, #44]	; (1f05c <ble_ll_init+0x158>)
   1f030:	f8dd 0011 	ldr.w	r0, [sp, #17]
   1f034:	6018      	str	r0, [r3, #0]
   1f036:	f8bd 2015 	ldrh.w	r2, [sp, #21]
   1f03a:	809a      	strh	r2, [r3, #4]
   1f03c:	e77f      	b.n	1ef3e <ble_ll_init+0x3a>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1f03e:	f7f5 fb59 	bl	146f4 <hal_debugger_connected>
   1f042:	b100      	cbz	r0, 1f046 <ble_ll_init+0x142>
   1f044:	be01      	bkpt	0x0001
   1f046:	2000      	movs	r0, #0
   1f048:	9000      	str	r0, [sp, #0]
   1f04a:	4b10      	ldr	r3, [pc, #64]	; (1f08c <ble_ll_init+0x188>)
   1f04c:	681c      	ldr	r4, [r3, #0]
   1f04e:	4603      	mov	r3, r0
   1f050:	4602      	mov	r2, r0
   1f052:	4601      	mov	r1, r0
   1f054:	47a0      	blx	r4
   1f056:	e7c9      	b.n	1efec <ble_ll_init+0xe8>
   1f058:	10003fd8 	.word	0x10003fd8
   1f05c:	1000434c 	.word	0x1000434c
   1f060:	100040e8 	.word	0x100040e8
   1f064:	0001ec0d 	.word	0x0001ec0d
   1f068:	0001eb6d 	.word	0x0001eb6d
   1f06c:	0001eae3 	.word	0x0001eae3
   1f070:	0001ead9 	.word	0x0001ead9
   1f074:	0001eabd 	.word	0x0001eabd
   1f078:	00038bc0 	.word	0x00038bc0
   1f07c:	10003fdc 	.word	0x10003fdc
   1f080:	10004178 	.word	0x10004178
   1f084:	0001ea31 	.word	0x0001ea31
   1f088:	100042f8 	.word	0x100042f8
   1f08c:	100006b4 	.word	0x100006b4

0001f090 <ble_ll_adv_first_chan>:
ble_ll_adv_first_chan(struct ble_ll_adv_sm *advsm)
{
    uint8_t adv_chan;

    /* Set first advertising channel */
    if (advsm->adv_chanmask & 0x01) {
   1f090:	7883      	ldrb	r3, [r0, #2]
   1f092:	f013 0f01 	tst.w	r3, #1
   1f096:	d104      	bne.n	1f0a2 <ble_ll_adv_first_chan+0x12>
        adv_chan = BLE_PHY_ADV_CHAN_START;
    } else if (advsm->adv_chanmask & 0x02) {
   1f098:	f013 0f02 	tst.w	r3, #2
   1f09c:	d003      	beq.n	1f0a6 <ble_ll_adv_first_chan+0x16>
        adv_chan = BLE_PHY_ADV_CHAN_START + 1;
   1f09e:	2026      	movs	r0, #38	; 0x26
   1f0a0:	4770      	bx	lr
        adv_chan = BLE_PHY_ADV_CHAN_START;
   1f0a2:	2025      	movs	r0, #37	; 0x25
   1f0a4:	4770      	bx	lr
    } else {
        adv_chan = BLE_PHY_ADV_CHAN_START + 2;
   1f0a6:	2027      	movs	r0, #39	; 0x27
    }

    return adv_chan;
}
   1f0a8:	4770      	bx	lr

0001f0aa <ble_ll_adv_final_chan>:
static uint8_t
ble_ll_adv_final_chan(struct ble_ll_adv_sm *advsm)
{
    uint8_t adv_chan;

    if (advsm->adv_chanmask & 0x04) {
   1f0aa:	7883      	ldrb	r3, [r0, #2]
   1f0ac:	f013 0f04 	tst.w	r3, #4
   1f0b0:	d104      	bne.n	1f0bc <ble_ll_adv_final_chan+0x12>
        adv_chan = BLE_PHY_ADV_CHAN_START + 2;
    } else if (advsm->adv_chanmask & 0x02) {
   1f0b2:	f013 0f02 	tst.w	r3, #2
   1f0b6:	d003      	beq.n	1f0c0 <ble_ll_adv_final_chan+0x16>
        adv_chan = BLE_PHY_ADV_CHAN_START + 1;
   1f0b8:	2026      	movs	r0, #38	; 0x26
   1f0ba:	4770      	bx	lr
        adv_chan = BLE_PHY_ADV_CHAN_START + 2;
   1f0bc:	2027      	movs	r0, #39	; 0x27
   1f0be:	4770      	bx	lr
    } else {
        adv_chan = BLE_PHY_ADV_CHAN_START;
   1f0c0:	2025      	movs	r0, #37	; 0x25
    }

    return adv_chan;
}
   1f0c2:	4770      	bx	lr

0001f0c4 <ble_ll_adv_flags_set>:
{
   1f0c4:	b538      	push	{r3, r4, r5, lr}
   1f0c6:	4605      	mov	r5, r0
   1f0c8:	460c      	mov	r4, r1
    OS_ENTER_CRITICAL(sr);
   1f0ca:	f7fb fbed 	bl	1a8a8 <os_arch_save_sr>
    advsm->flags |= flags;
   1f0ce:	8969      	ldrh	r1, [r5, #10]
   1f0d0:	430c      	orrs	r4, r1
   1f0d2:	816c      	strh	r4, [r5, #10]
    OS_EXIT_CRITICAL(sr);
   1f0d4:	f7fb fbee 	bl	1a8b4 <os_arch_restore_sr>
}
   1f0d8:	bd38      	pop	{r3, r4, r5, pc}

0001f0da <ble_ll_adv_flags_clear>:
{
   1f0da:	b538      	push	{r3, r4, r5, lr}
   1f0dc:	4604      	mov	r4, r0
   1f0de:	460d      	mov	r5, r1
    OS_ENTER_CRITICAL(sr);
   1f0e0:	f7fb fbe2 	bl	1a8a8 <os_arch_save_sr>
    advsm->flags &= ~flags;
   1f0e4:	8963      	ldrh	r3, [r4, #10]
   1f0e6:	ea23 0105 	bic.w	r1, r3, r5
   1f0ea:	8161      	strh	r1, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   1f0ec:	f7fb fbe2 	bl	1a8b4 <os_arch_restore_sr>
}
   1f0f0:	bd38      	pop	{r3, r4, r5, pc}

0001f0f2 <ble_ll_adv_rpa_update>:
{
   1f0f2:	b538      	push	{r3, r4, r5, lr}
   1f0f4:	4604      	mov	r4, r0
    if (ble_ll_resolv_gen_rpa(advsm->peer_addr, advsm->peer_addr_type,
   1f0f6:	f100 0530 	add.w	r5, r0, #48	; 0x30
   1f0fa:	2301      	movs	r3, #1
   1f0fc:	f100 0224 	add.w	r2, r0, #36	; 0x24
   1f100:	7941      	ldrb	r1, [r0, #5]
   1f102:	4628      	mov	r0, r5
   1f104:	f005 fd06 	bl	24b14 <ble_ll_resolv_gen_rpa>
   1f108:	b960      	cbnz	r0, 1f124 <ble_ll_adv_rpa_update+0x32>
        if (advsm->own_addr_type & 1) {
   1f10a:	7923      	ldrb	r3, [r4, #4]
   1f10c:	f013 0f01 	tst.w	r3, #1
   1f110:	d00d      	beq.n	1f12e <ble_ll_adv_rpa_update+0x3c>
            ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD);
   1f112:	2101      	movs	r1, #1
   1f114:	4620      	mov	r0, r4
   1f116:	f7ff ffd5 	bl	1f0c4 <ble_ll_adv_flags_set>
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1f11a:	89a3      	ldrh	r3, [r4, #12]
   1f11c:	f013 0f04 	tst.w	r3, #4
   1f120:	d10a      	bne.n	1f138 <ble_ll_adv_rpa_update+0x46>
}
   1f122:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD);
   1f124:	2101      	movs	r1, #1
   1f126:	4620      	mov	r0, r4
   1f128:	f7ff ffcc 	bl	1f0c4 <ble_ll_adv_flags_set>
   1f12c:	e7f5      	b.n	1f11a <ble_ll_adv_rpa_update+0x28>
            ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD);
   1f12e:	2101      	movs	r1, #1
   1f130:	4620      	mov	r0, r4
   1f132:	f7ff ffd2 	bl	1f0da <ble_ll_adv_flags_clear>
   1f136:	e7f0      	b.n	1f11a <ble_ll_adv_rpa_update+0x28>
        if (ble_ll_resolv_gen_rpa(advsm->peer_addr, advsm->peer_addr_type,
   1f138:	2300      	movs	r3, #0
   1f13a:	f104 0236 	add.w	r2, r4, #54	; 0x36
   1f13e:	7961      	ldrb	r1, [r4, #5]
   1f140:	4628      	mov	r0, r5
   1f142:	f005 fce7 	bl	24b14 <ble_ll_resolv_gen_rpa>
   1f146:	b940      	cbnz	r0, 1f15a <ble_ll_adv_rpa_update+0x68>
            if (advsm->peer_addr_type & 1) {
   1f148:	7963      	ldrb	r3, [r4, #5]
   1f14a:	f013 0f01 	tst.w	r3, #1
   1f14e:	d009      	beq.n	1f164 <ble_ll_adv_rpa_update+0x72>
                ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_RX_ADD);
   1f150:	2102      	movs	r1, #2
   1f152:	4620      	mov	r0, r4
   1f154:	f7ff ffb6 	bl	1f0c4 <ble_ll_adv_flags_set>
   1f158:	e7e3      	b.n	1f122 <ble_ll_adv_rpa_update+0x30>
            ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_RX_ADD);
   1f15a:	2102      	movs	r1, #2
   1f15c:	4620      	mov	r0, r4
   1f15e:	f7ff ffb1 	bl	1f0c4 <ble_ll_adv_flags_set>
   1f162:	e7de      	b.n	1f122 <ble_ll_adv_rpa_update+0x30>
                ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_RX_ADD);
   1f164:	2102      	movs	r1, #2
   1f166:	4620      	mov	r0, r4
   1f168:	f7ff ffb7 	bl	1f0da <ble_ll_adv_flags_clear>
}
   1f16c:	e7d9      	b.n	1f122 <ble_ll_adv_rpa_update+0x30>

0001f16e <ble_ll_adv_active_chanset_clear>:
{
   1f16e:	b510      	push	{r4, lr}
   1f170:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1f172:	f7fb fb99 	bl	1a8a8 <os_arch_save_sr>
    advsm->flags &= ~BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK;
   1f176:	8963      	ldrh	r3, [r4, #10]
   1f178:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1f17c:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   1f17e:	f7fb fb99 	bl	1a8b4 <os_arch_restore_sr>
}
   1f182:	bd10      	pop	{r4, pc}

0001f184 <ble_ll_adv_drop_event>:
    return rc;
}

static void
ble_ll_adv_drop_event(struct ble_ll_adv_sm *advsm)
{
   1f184:	b510      	push	{r4, lr}
   1f186:	4604      	mov	r4, r0
    STATS_INC(ble_ll_stats, adv_drop_event);
   1f188:	4a08      	ldr	r2, [pc, #32]	; (1f1ac <ble_ll_adv_drop_event+0x28>)
   1f18a:	6f93      	ldr	r3, [r2, #120]	; 0x78
   1f18c:	3301      	adds	r3, #1
   1f18e:	6793      	str	r3, [r2, #120]	; 0x78

    ble_ll_sched_rmv_elem(&advsm->adv_sch);
   1f190:	3060      	adds	r0, #96	; 0x60
   1f192:	f006 fe73 	bl	25e7c <ble_ll_sched_rmv_elem>

    ble_npl_eventq_remove(&g_ble_ll_data.ll_evq, &advsm->adv_sec_txdone_ev);
    advsm->aux_active = 0;
#endif

    advsm->adv_chan = ble_ll_adv_final_chan(advsm);
   1f196:	4620      	mov	r0, r4
   1f198:	f7ff ff87 	bl	1f0aa <ble_ll_adv_final_chan>
   1f19c:	71a0      	strb	r0, [r4, #6]
    os_eventq_put(&evq->evq, &ev->ev);
   1f19e:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1f1a2:	4803      	ldr	r0, [pc, #12]	; (1f1b0 <ble_ll_adv_drop_event+0x2c>)
   1f1a4:	f7fa f917 	bl	193d6 <os_eventq_put>
    ble_npl_eventq_put(&g_ble_ll_data.ll_evq, &advsm->adv_txdone_ev);
}
   1f1a8:	bd10      	pop	{r4, pc}
   1f1aa:	bf00      	nop
   1f1ac:	10003fdc 	.word	0x10003fdc
   1f1b0:	100040f8 	.word	0x100040f8

0001f1b4 <ble_ll_adv_tx_done>:
{
   1f1b4:	b510      	push	{r4, lr}
   1f1b6:	4604      	mov	r4, r0
    ble_phy_txpwr_set(g_ble_ll_tx_power);
   1f1b8:	4b09      	ldr	r3, [pc, #36]	; (1f1e0 <ble_ll_adv_tx_done+0x2c>)
   1f1ba:	f993 0000 	ldrsb.w	r0, [r3]
   1f1be:	f007 f84b 	bl	26258 <ble_phy_txpwr_set>
   1f1c2:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1f1c6:	4807      	ldr	r0, [pc, #28]	; (1f1e4 <ble_ll_adv_tx_done+0x30>)
   1f1c8:	f7fa f905 	bl	193d6 <os_eventq_put>
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1f1cc:	2000      	movs	r0, #0
   1f1ce:	f7ff fe01 	bl	1edd4 <ble_ll_state_set>
    ble_ll_adv_active_chanset_clear(advsm);
   1f1d2:	4620      	mov	r0, r4
   1f1d4:	f7ff ffcb 	bl	1f16e <ble_ll_adv_active_chanset_clear>
    g_ble_ll_cur_adv_sm = NULL;
   1f1d8:	4b03      	ldr	r3, [pc, #12]	; (1f1e8 <ble_ll_adv_tx_done+0x34>)
   1f1da:	2200      	movs	r2, #0
   1f1dc:	601a      	str	r2, [r3, #0]
}
   1f1de:	bd10      	pop	{r4, pc}
   1f1e0:	10004348 	.word	0x10004348
   1f1e4:	100040f8 	.word	0x100040f8
   1f1e8:	100043d8 	.word	0x100043d8

0001f1ec <ble_ll_adv_sm_find_configured>:
{
   1f1ec:	b510      	push	{r4, lr}
   1f1ee:	4604      	mov	r4, r0
    if (!ble_ll_hci_adv_mode_ext()) {
   1f1f0:	f004 fd89 	bl	23d06 <ble_ll_hci_adv_mode_ext>
   1f1f4:	b9d0      	cbnz	r0, 1f22c <ble_ll_adv_sm_find_configured+0x40>
        BLE_LL_ASSERT(instance == 0);
   1f1f6:	b90c      	cbnz	r4, 1f1fc <ble_ll_adv_sm_find_configured+0x10>
        return &g_ble_ll_adv_sm[0];
   1f1f8:	480f      	ldr	r0, [pc, #60]	; (1f238 <ble_ll_adv_sm_find_configured+0x4c>)
}
   1f1fa:	bd10      	pop	{r4, pc}
        BLE_LL_ASSERT(instance == 0);
   1f1fc:	f7f5 fa7a 	bl	146f4 <hal_debugger_connected>
   1f200:	b100      	cbz	r0, 1f204 <ble_ll_adv_sm_find_configured+0x18>
   1f202:	be01      	bkpt	0x0001
   1f204:	2300      	movs	r3, #0
   1f206:	461a      	mov	r2, r3
   1f208:	4619      	mov	r1, r3
   1f20a:	4618      	mov	r0, r3
   1f20c:	f7f9 fd90 	bl	18d30 <__assert_func>
        advsm = &g_ble_ll_adv_sm[i];
   1f210:	ebc2 1042 	rsb	r0, r2, r2, lsl #5
   1f214:	4b08      	ldr	r3, [pc, #32]	; (1f238 <ble_ll_adv_sm_find_configured+0x4c>)
   1f216:	eb03 0080 	add.w	r0, r3, r0, lsl #2
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_CONFIGURED) &&
   1f21a:	8943      	ldrh	r3, [r0, #10]
   1f21c:	f013 0f80 	tst.w	r3, #128	; 0x80
   1f220:	d002      	beq.n	1f228 <ble_ll_adv_sm_find_configured+0x3c>
                (advsm->adv_instance == instance)) {
   1f222:	7843      	ldrb	r3, [r0, #1]
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_CONFIGURED) &&
   1f224:	42a3      	cmp	r3, r4
   1f226:	d0e8      	beq.n	1f1fa <ble_ll_adv_sm_find_configured+0xe>
    for (i = 0; i < ARRAY_SIZE(g_ble_ll_adv_sm); i++) {
   1f228:	3201      	adds	r2, #1
   1f22a:	e000      	b.n	1f22e <ble_ll_adv_sm_find_configured+0x42>
   1f22c:	2200      	movs	r2, #0
   1f22e:	2a00      	cmp	r2, #0
   1f230:	d0ee      	beq.n	1f210 <ble_ll_adv_sm_find_configured+0x24>
    return NULL;
   1f232:	2000      	movs	r0, #0
   1f234:	e7e1      	b.n	1f1fa <ble_ll_adv_sm_find_configured+0xe>
   1f236:	bf00      	nop
   1f238:	1000435c 	.word	0x1000435c

0001f23c <ble_ll_adv_active_chanset_set_pri>:
{
   1f23c:	b510      	push	{r4, lr}
   1f23e:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1f240:	f7fb fb32 	bl	1a8a8 <os_arch_save_sr>
    BLE_LL_ASSERT((advsm->flags & BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK) == 0);
   1f244:	8963      	ldrh	r3, [r4, #10]
   1f246:	f013 0f30 	tst.w	r3, #48	; 0x30
   1f24a:	d107      	bne.n	1f25c <ble_ll_adv_active_chanset_set_pri+0x20>
    advsm->flags &= ~BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK;
   1f24c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    advsm->flags |= 0x10;
   1f250:	f043 0310 	orr.w	r3, r3, #16
   1f254:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   1f256:	f7fb fb2d 	bl	1a8b4 <os_arch_restore_sr>
}
   1f25a:	bd10      	pop	{r4, pc}
    BLE_LL_ASSERT((advsm->flags & BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK) == 0);
   1f25c:	f7f5 fa4a 	bl	146f4 <hal_debugger_connected>
   1f260:	b100      	cbz	r0, 1f264 <ble_ll_adv_active_chanset_set_pri+0x28>
   1f262:	be01      	bkpt	0x0001
   1f264:	2300      	movs	r3, #0
   1f266:	461a      	mov	r2, r3
   1f268:	4619      	mov	r1, r3
   1f26a:	4618      	mov	r0, r3
   1f26c:	f7f9 fd60 	bl	18d30 <__assert_func>

0001f270 <ble_ll_adv_scheduled>:
{
   1f270:	b538      	push	{r3, r4, r5, lr}
    advsm->adv_event_start_time = sch_start + g_ble_ll_sched_offset_ticks;
   1f272:	4b08      	ldr	r3, [pc, #32]	; (1f294 <ble_ll_adv_scheduled+0x24>)
   1f274:	781d      	ldrb	r5, [r3, #0]
   1f276:	440d      	add	r5, r1
   1f278:	6185      	str	r5, [r0, #24]
    advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   1f27a:	61c5      	str	r5, [r0, #28]
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   1f27c:	8983      	ldrh	r3, [r0, #12]
   1f27e:	f013 0f08 	tst.w	r3, #8
   1f282:	d100      	bne.n	1f286 <ble_ll_adv_scheduled+0x16>
}
   1f284:	bd38      	pop	{r3, r4, r5, pc}
   1f286:	4604      	mov	r4, r0
    if (usecs <= 31249) {
        return (usecs * 137439) / 4194304;
    }
#endif

    return os_cputime_usecs_to_ticks(usecs);
   1f288:	4803      	ldr	r0, [pc, #12]	; (1f298 <ble_ll_adv_scheduled+0x28>)
   1f28a:	f014 fe3d 	bl	33f08 <os_cputime_usecs_to_ticks>
        advsm->adv_end_time = advsm->adv_event_start_time +
   1f28e:	4405      	add	r5, r0
   1f290:	6225      	str	r5, [r4, #32]
}
   1f292:	e7f7      	b.n	1f284 <ble_ll_adv_scheduled+0x14>
   1f294:	10004930 	.word	0x10004930
   1f298:	00138800 	.word	0x00138800

0001f29c <ble_ll_adv_set_sched>:
{
   1f29c:	b538      	push	{r3, r4, r5, lr}
   1f29e:	4604      	mov	r4, r0
    sch->cb_arg = advsm;
   1f2a0:	66c0      	str	r0, [r0, #108]	; 0x6c
    sch->sched_cb = ble_ll_adv_tx_start_cb;
   1f2a2:	4b15      	ldr	r3, [pc, #84]	; (1f2f8 <ble_ll_adv_set_sched+0x5c>)
   1f2a4:	6703      	str	r3, [r0, #112]	; 0x70
    sch->sched_type = BLE_LL_SCHED_TYPE_ADV;
   1f2a6:	2101      	movs	r1, #1
   1f2a8:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    max_usecs = ble_ll_pdu_tx_time_get(advsm->adv_pdu_len, BLE_PHY_MODE_1M);
   1f2ac:	79c0      	ldrb	r0, [r0, #7]
   1f2ae:	f7ff fded 	bl	1ee8c <ble_ll_pdu_tx_time_get>
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1f2b2:	89a3      	ldrh	r3, [r4, #12]
   1f2b4:	f013 0f04 	tst.w	r3, #4
   1f2b8:	d015      	beq.n	1f2e6 <ble_ll_adv_set_sched+0x4a>
        max_usecs += BLE_LL_SCHED_DIRECT_ADV_MAX_USECS;
   1f2ba:	f500 70fb 	add.w	r0, r0, #502	; 0x1f6
    sch->start_time = advsm->adv_pdu_start_time - g_ble_ll_sched_offset_ticks;
   1f2be:	69e5      	ldr	r5, [r4, #28]
   1f2c0:	4b0e      	ldr	r3, [pc, #56]	; (1f2fc <ble_ll_adv_set_sched+0x60>)
   1f2c2:	781b      	ldrb	r3, [r3, #0]
   1f2c4:	1aeb      	subs	r3, r5, r3
   1f2c6:	6663      	str	r3, [r4, #100]	; 0x64
    sch->remainder = 0;
   1f2c8:	2300      	movs	r3, #0
   1f2ca:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}

static inline uint32_t
ble_ll_tmr_u2t_up(uint32_t usecs)
{
    return ble_ll_tmr_u2t(usecs + (USECS_PER_TICK - 1));
   1f2ce:	301e      	adds	r0, #30
    if (usecs <= 31249) {
   1f2d0:	f647 2311 	movw	r3, #31249	; 0x7a11
   1f2d4:	4298      	cmp	r0, r3
   1f2d6:	d80c      	bhi.n	1f2f2 <ble_ll_adv_set_sched+0x56>
        return (usecs * 137439) / 4194304;
   1f2d8:	4b09      	ldr	r3, [pc, #36]	; (1f300 <ble_ll_adv_set_sched+0x64>)
   1f2da:	fb03 f000 	mul.w	r0, r3, r0
   1f2de:	0d80      	lsrs	r0, r0, #22
    sch->end_time = advsm->adv_pdu_start_time + ble_ll_tmr_u2t_up(max_usecs);
   1f2e0:	4428      	add	r0, r5
   1f2e2:	66a0      	str	r0, [r4, #104]	; 0x68
}
   1f2e4:	bd38      	pop	{r3, r4, r5, pc}
    } else if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   1f2e6:	f013 0f01 	tst.w	r3, #1
   1f2ea:	d0e8      	beq.n	1f2be <ble_ll_adv_set_sched+0x22>
        max_usecs += BLE_LL_SCHED_ADV_MAX_USECS;
   1f2ec:	f500 7055 	add.w	r0, r0, #852	; 0x354
   1f2f0:	e7e5      	b.n	1f2be <ble_ll_adv_set_sched+0x22>
    return os_cputime_usecs_to_ticks(usecs);
   1f2f2:	f014 fe09 	bl	33f08 <os_cputime_usecs_to_ticks>
   1f2f6:	e7f3      	b.n	1f2e0 <ble_ll_adv_set_sched+0x44>
   1f2f8:	0001f431 	.word	0x0001f431
   1f2fc:	10004930 	.word	0x10004930
   1f300:	000218df 	.word	0x000218df

0001f304 <ble_ll_adv_sm_start>:
{
   1f304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f306:	4604      	mov	r4, r0
    ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD |
   1f308:	210b      	movs	r1, #11
   1f30a:	f7ff fee6 	bl	1f0da <ble_ll_adv_flags_clear>
    if (!ble_ll_is_valid_own_addr_type(advsm->own_addr_type, random_addr)) {
   1f30e:	4943      	ldr	r1, [pc, #268]	; (1f41c <ble_ll_adv_sm_start+0x118>)
   1f310:	7920      	ldrb	r0, [r4, #4]
   1f312:	f7ff fce5 	bl	1ece0 <ble_ll_is_valid_own_addr_type>
   1f316:	2800      	cmp	r0, #0
   1f318:	d07e      	beq.n	1f418 <ble_ll_adv_sm_start+0x114>
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   1f31a:	89a3      	ldrh	r3, [r4, #12]
   1f31c:	f013 0f01 	tst.w	r3, #1
   1f320:	d001      	beq.n	1f326 <ble_ll_adv_sm_start+0x22>
        if (advsm->conn_comp_ev == NULL) {
   1f322:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1f324:	b14b      	cbz	r3, 1f33a <ble_ll_adv_sm_start+0x36>
    if ((advsm->own_addr_type & 1) == 0) {
   1f326:	7923      	ldrb	r3, [r4, #4]
   1f328:	f013 0f01 	tst.w	r3, #1
   1f32c:	d00d      	beq.n	1f34a <ble_ll_adv_sm_start+0x46>
        advsm->flags |= BLE_LL_ADV_SM_FLAG_TX_ADD;
   1f32e:	8962      	ldrh	r2, [r4, #10]
   1f330:	f042 0201 	orr.w	r2, r2, #1
   1f334:	8162      	strh	r2, [r4, #10]
        addr = g_random_addr;
   1f336:	4a39      	ldr	r2, [pc, #228]	; (1f41c <ble_ll_adv_sm_start+0x118>)
   1f338:	e008      	b.n	1f34c <ble_ll_adv_sm_start+0x48>
            advsm->conn_comp_ev = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1f33a:	2002      	movs	r0, #2
   1f33c:	f012 ff58 	bl	321f0 <ble_hci_trans_buf_alloc>
   1f340:	64e0      	str	r0, [r4, #76]	; 0x4c
            if (!advsm->conn_comp_ev) {
   1f342:	2800      	cmp	r0, #0
   1f344:	d1ef      	bne.n	1f326 <ble_ll_adv_sm_start+0x22>
                return BLE_ERR_MEM_CAPACITY;
   1f346:	2007      	movs	r0, #7
   1f348:	e03f      	b.n	1f3ca <ble_ll_adv_sm_start+0xc6>
        addr = g_dev_addr;
   1f34a:	4a35      	ldr	r2, [pc, #212]	; (1f420 <ble_ll_adv_sm_start+0x11c>)
    memcpy(advsm->adva, addr, BLE_DEV_ADDR_LEN);
   1f34c:	6811      	ldr	r1, [r2, #0]
   1f34e:	6261      	str	r1, [r4, #36]	; 0x24
   1f350:	8892      	ldrh	r2, [r2, #4]
   1f352:	8522      	strh	r2, [r4, #40]	; 0x28
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1f354:	89a2      	ldrh	r2, [r4, #12]
   1f356:	f012 0f04 	tst.w	r2, #4
   1f35a:	d137      	bne.n	1f3cc <ble_ll_adv_sm_start+0xc8>
    if (advsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   1f35c:	2b01      	cmp	r3, #1
   1f35e:	d845      	bhi.n	1f3ec <ble_ll_adv_sm_start+0xe8>
    advsm->adv_enabled = 1;
   1f360:	2301      	movs	r3, #1
   1f362:	7023      	strb	r3, [r4, #0]
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   1f364:	89a3      	ldrh	r3, [r4, #12]
   1f366:	f013 0f08 	tst.w	r3, #8
   1f36a:	d043      	beq.n	1f3f4 <ble_ll_adv_sm_start+0xf0>
        advsm->adv_itvl_usecs = BLE_LL_ADV_PDU_ITVL_HD_MS_MAX;
   1f36c:	f640 63a6 	movw	r3, #3750	; 0xea6
   1f370:	6163      	str	r3, [r4, #20]
    adv_chan = ble_ll_adv_first_chan(advsm);
   1f372:	4620      	mov	r0, r4
   1f374:	f7ff fe8c 	bl	1f090 <ble_ll_adv_first_chan>
    advsm->adv_chan = adv_chan;
   1f378:	71a0      	strb	r0, [r4, #6]
    return os_cputime_get32();
   1f37a:	f014 fdc0 	bl	33efe <os_cputime_get32>
   1f37e:	4606      	mov	r6, r0
    start_delay_us = ble_ll_rand() % (BLE_LL_ADV_DELAY_MS_MAX * 1000);
   1f380:	f005 f8a0 	bl	244c4 <ble_ll_rand>
   1f384:	4d27      	ldr	r5, [pc, #156]	; (1f424 <ble_ll_adv_sm_start+0x120>)
   1f386:	fba5 3500 	umull	r3, r5, r5, r0
   1f38a:	0b6d      	lsrs	r5, r5, #13
   1f38c:	f242 7310 	movw	r3, #10000	; 0x2710
   1f390:	fb03 0515 	mls	r5, r3, r5, r0
   1f394:	f014 fdb3 	bl	33efe <os_cputime_get32>
   1f398:	4607      	mov	r7, r0
    if (usecs <= 31249) {
   1f39a:	f647 2311 	movw	r3, #31249	; 0x7a11
   1f39e:	429d      	cmp	r5, r3
   1f3a0:	d82f      	bhi.n	1f402 <ble_ll_adv_sm_start+0xfe>
        return (usecs * 137439) / 4194304;
   1f3a2:	4b21      	ldr	r3, [pc, #132]	; (1f428 <ble_ll_adv_sm_start+0x124>)
   1f3a4:	fb03 f505 	mul.w	r5, r3, r5
   1f3a8:	0dad      	lsrs	r5, r5, #22
    advsm->adv_pdu_start_time = ble_ll_tmr_get() +
   1f3aa:	443d      	add	r5, r7
   1f3ac:	61e5      	str	r5, [r4, #28]
    ble_ll_adv_set_sched(advsm);
   1f3ae:	4620      	mov	r0, r4
   1f3b0:	f7ff ff74 	bl	1f29c <ble_ll_adv_set_sched>
    delta = (int32_t)(advsm->adv_sch.start_time - earliest_start_time);
   1f3b4:	6e60      	ldr	r0, [r4, #100]	; 0x64
   1f3b6:	1b83      	subs	r3, r0, r6
    if (delta < 0) {
   1f3b8:	2b00      	cmp	r3, #0
   1f3ba:	db27      	blt.n	1f40c <ble_ll_adv_sm_start+0x108>
    ble_ll_sched_adv_new(&advsm->adv_sch, ble_ll_adv_scheduled, NULL);
   1f3bc:	2200      	movs	r2, #0
   1f3be:	491b      	ldr	r1, [pc, #108]	; (1f42c <ble_ll_adv_sm_start+0x128>)
   1f3c0:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1f3c4:	f006 fca4 	bl	25d10 <ble_ll_sched_adv_new>
    return BLE_ERR_SUCCESS;
   1f3c8:	2000      	movs	r0, #0
}
   1f3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memcpy(advsm->initiator_addr, advsm->peer_addr, BLE_DEV_ADDR_LEN);
   1f3cc:	4622      	mov	r2, r4
   1f3ce:	f852 1f30 	ldr.w	r1, [r2, #48]!
   1f3d2:	f8c4 1036 	str.w	r1, [r4, #54]	; 0x36
   1f3d6:	8892      	ldrh	r2, [r2, #4]
   1f3d8:	8762      	strh	r2, [r4, #58]	; 0x3a
        if (advsm->peer_addr_type & 1) {
   1f3da:	7962      	ldrb	r2, [r4, #5]
   1f3dc:	f012 0f01 	tst.w	r2, #1
   1f3e0:	d0bc      	beq.n	1f35c <ble_ll_adv_sm_start+0x58>
            advsm->flags |= BLE_LL_ADV_SM_FLAG_RX_ADD;
   1f3e2:	8962      	ldrh	r2, [r4, #10]
   1f3e4:	f042 0202 	orr.w	r2, r2, #2
   1f3e8:	8162      	strh	r2, [r4, #10]
   1f3ea:	e7b7      	b.n	1f35c <ble_ll_adv_sm_start+0x58>
        ble_ll_adv_rpa_update(advsm);
   1f3ec:	4620      	mov	r0, r4
   1f3ee:	f7ff fe80 	bl	1f0f2 <ble_ll_adv_rpa_update>
   1f3f2:	e7b5      	b.n	1f360 <ble_ll_adv_sm_start+0x5c>
        advsm->adv_itvl_usecs = (uint32_t)advsm->adv_itvl_max;
   1f3f4:	8a22      	ldrh	r2, [r4, #16]
        advsm->adv_itvl_usecs *= BLE_LL_ADV_ITVL;
   1f3f6:	f240 2371 	movw	r3, #625	; 0x271
   1f3fa:	fb03 f302 	mul.w	r3, r3, r2
   1f3fe:	6163      	str	r3, [r4, #20]
   1f400:	e7b7      	b.n	1f372 <ble_ll_adv_sm_start+0x6e>
    return os_cputime_usecs_to_ticks(usecs);
   1f402:	4628      	mov	r0, r5
   1f404:	f014 fd80 	bl	33f08 <os_cputime_usecs_to_ticks>
   1f408:	4605      	mov	r5, r0
   1f40a:	e7ce      	b.n	1f3aa <ble_ll_adv_sm_start+0xa6>
        advsm->adv_sch.start_time -= delta;
   1f40c:	6666      	str	r6, [r4, #100]	; 0x64
        advsm->adv_sch.end_time -= delta;
   1f40e:	1a36      	subs	r6, r6, r0
   1f410:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1f412:	4406      	add	r6, r0
   1f414:	66a6      	str	r6, [r4, #104]	; 0x68
   1f416:	e7d1      	b.n	1f3bc <ble_ll_adv_sm_start+0xb8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1f418:	2012      	movs	r0, #18
   1f41a:	e7d6      	b.n	1f3ca <ble_ll_adv_sm_start+0xc6>
   1f41c:	10004354 	.word	0x10004354
   1f420:	1000434c 	.word	0x1000434c
   1f424:	d1b71759 	.word	0xd1b71759
   1f428:	000218df 	.word	0x000218df
   1f42c:	0001f271 	.word	0x0001f271

0001f430 <ble_ll_adv_tx_start_cb>:
{
   1f430:	b538      	push	{r3, r4, r5, lr}
   1f432:	4605      	mov	r5, r0
    advsm = (struct ble_ll_adv_sm *)sch->cb_arg;
   1f434:	68c4      	ldr	r4, [r0, #12]
    g_ble_ll_cur_adv_sm = advsm;
   1f436:	4b32      	ldr	r3, [pc, #200]	; (1f500 <ble_ll_adv_tx_start_cb+0xd0>)
   1f438:	601c      	str	r4, [r3, #0]
    ble_ll_adv_active_chanset_set_pri(advsm);
   1f43a:	4620      	mov	r0, r4
   1f43c:	f7ff fefe 	bl	1f23c <ble_ll_adv_active_chanset_set_pri>
    if ((advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA) ||
   1f440:	8963      	ldrh	r3, [r4, #10]
   1f442:	f413 6fc0 	tst.w	r3, #1536	; 0x600
   1f446:	d005      	beq.n	1f454 <ble_ll_adv_tx_start_cb+0x24>
    ble_ll_adv_tx_done(advsm);
   1f448:	4620      	mov	r0, r4
   1f44a:	f7ff feb3 	bl	1f1b4 <ble_ll_adv_tx_done>
    return BLE_LL_SCHED_STATE_DONE;
   1f44e:	2501      	movs	r5, #1
}
   1f450:	4628      	mov	r0, r5
   1f452:	bd38      	pop	{r3, r4, r5, pc}
    ble_phy_txpwr_set(advsm->adv_txpwr);
   1f454:	f994 0009 	ldrsb.w	r0, [r4, #9]
   1f458:	f006 fefe 	bl	26258 <ble_phy_txpwr_set>
    rc = ble_phy_setchan(advsm->adv_chan, BLE_ACCESS_ADDR_ADV, BLE_LL_CRCINIT_ADV);
   1f45c:	4a29      	ldr	r2, [pc, #164]	; (1f504 <ble_ll_adv_tx_start_cb+0xd4>)
   1f45e:	492a      	ldr	r1, [pc, #168]	; (1f508 <ble_ll_adv_tx_start_cb+0xd8>)
   1f460:	79a0      	ldrb	r0, [r4, #6]
   1f462:	f006 ff27 	bl	262b4 <ble_phy_setchan>
    BLE_LL_ASSERT(rc == 0);
   1f466:	b960      	cbnz	r0, 1f482 <ble_ll_adv_tx_start_cb+0x52>
    txstart = sch->start_time + g_ble_ll_sched_offset_ticks;
   1f468:	6868      	ldr	r0, [r5, #4]
   1f46a:	4b28      	ldr	r3, [pc, #160]	; (1f50c <ble_ll_adv_tx_start_cb+0xdc>)
   1f46c:	781b      	ldrb	r3, [r3, #0]
    rc = ble_phy_tx_set_start_time(txstart, sch->remainder);
   1f46e:	78a9      	ldrb	r1, [r5, #2]
   1f470:	4418      	add	r0, r3
   1f472:	f006 feed 	bl	26250 <ble_phy_tx_set_start_time>
    if (rc) {
   1f476:	b170      	cbz	r0, 1f496 <ble_ll_adv_tx_start_cb+0x66>
        STATS_INC(ble_ll_stats, adv_late_starts);
   1f478:	4a25      	ldr	r2, [pc, #148]	; (1f510 <ble_ll_adv_tx_start_cb+0xe0>)
   1f47a:	6f13      	ldr	r3, [r2, #112]	; 0x70
   1f47c:	3301      	adds	r3, #1
   1f47e:	6713      	str	r3, [r2, #112]	; 0x70
        goto adv_tx_done;
   1f480:	e7e2      	b.n	1f448 <ble_ll_adv_tx_start_cb+0x18>
    BLE_LL_ASSERT(rc == 0);
   1f482:	f7f5 f937 	bl	146f4 <hal_debugger_connected>
   1f486:	b100      	cbz	r0, 1f48a <ble_ll_adv_tx_start_cb+0x5a>
   1f488:	be01      	bkpt	0x0001
   1f48a:	2300      	movs	r3, #0
   1f48c:	461a      	mov	r2, r3
   1f48e:	4619      	mov	r1, r3
   1f490:	4618      	mov	r0, r3
   1f492:	f7f9 fc4d 	bl	18d30 <__assert_func>
    ble_phy_encrypt_disable();
   1f496:	f006 fed3 	bl	26240 <ble_phy_encrypt_disable>
    advsm->adv_rpa_index = -1;
   1f49a:	23ff      	movs	r3, #255	; 0xff
   1f49c:	7223      	strb	r3, [r4, #8]
    if (ble_ll_resolv_enabled()) {
   1f49e:	f005 fb53 	bl	24b48 <ble_ll_resolv_enabled>
   1f4a2:	b300      	cbz	r0, 1f4e6 <ble_ll_adv_tx_start_cb+0xb6>
        ble_phy_resolv_list_enable();
   1f4a4:	f006 ff62 	bl	2636c <ble_phy_resolv_list_enable>
    if ((advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) &&
   1f4a8:	89a3      	ldrh	r3, [r4, #12]
   1f4aa:	f013 0f10 	tst.w	r3, #16
   1f4ae:	d002      	beq.n	1f4b6 <ble_ll_adv_tx_start_cb+0x86>
   1f4b0:	f013 0f03 	tst.w	r3, #3
   1f4b4:	d11a      	bne.n	1f4ec <ble_ll_adv_tx_start_cb+0xbc>
        ble_phy_set_txend_cb(ble_ll_adv_tx_done, advsm);
   1f4b6:	4621      	mov	r1, r4
   1f4b8:	4816      	ldr	r0, [pc, #88]	; (1f514 <ble_ll_adv_tx_start_cb+0xe4>)
   1f4ba:	f006 fec3 	bl	26244 <ble_phy_set_txend_cb>
        end_trans = BLE_PHY_TRANSITION_NONE;
   1f4be:	2200      	movs	r2, #0
    rc = ble_phy_tx(ble_ll_adv_legacy_pdu_make, advsm, end_trans);
   1f4c0:	4621      	mov	r1, r4
   1f4c2:	4815      	ldr	r0, [pc, #84]	; (1f518 <ble_ll_adv_tx_start_cb+0xe8>)
   1f4c4:	f006 ff16 	bl	262f4 <ble_phy_tx>
    if (rc) {
   1f4c8:	4605      	mov	r5, r0
   1f4ca:	2800      	cmp	r0, #0
   1f4cc:	d1bc      	bne.n	1f448 <ble_ll_adv_tx_start_cb+0x18>
    if (advsm->adv_filter_policy != BLE_HCI_ADV_FILT_NONE) {
   1f4ce:	78e3      	ldrb	r3, [r4, #3]
   1f4d0:	b193      	cbz	r3, 1f4f8 <ble_ll_adv_tx_start_cb+0xc8>
        ble_ll_whitelist_enable();
   1f4d2:	f006 fe65 	bl	261a0 <ble_ll_whitelist_enable>
    ble_ll_state_set(BLE_LL_STATE_ADV);
   1f4d6:	2001      	movs	r0, #1
   1f4d8:	f7ff fc7c 	bl	1edd4 <ble_ll_state_set>
    STATS_INC(ble_ll_stats, adv_txg);
   1f4dc:	4a0c      	ldr	r2, [pc, #48]	; (1f510 <ble_ll_adv_tx_start_cb+0xe0>)
   1f4de:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1f4e0:	3301      	adds	r3, #1
   1f4e2:	66d3      	str	r3, [r2, #108]	; 0x6c
    return BLE_LL_SCHED_STATE_RUNNING;
   1f4e4:	e7b4      	b.n	1f450 <ble_ll_adv_tx_start_cb+0x20>
        ble_phy_resolv_list_disable();
   1f4e6:	f006 ff47 	bl	26378 <ble_phy_resolv_list_disable>
   1f4ea:	e7dd      	b.n	1f4a8 <ble_ll_adv_tx_start_cb+0x78>
        ble_phy_set_txend_cb(NULL, NULL);
   1f4ec:	2100      	movs	r1, #0
   1f4ee:	4608      	mov	r0, r1
   1f4f0:	f006 fea8 	bl	26244 <ble_phy_set_txend_cb>
        end_trans = BLE_PHY_TRANSITION_TX_RX;
   1f4f4:	2202      	movs	r2, #2
        ble_phy_set_txend_cb(NULL, NULL);
   1f4f6:	e7e3      	b.n	1f4c0 <ble_ll_adv_tx_start_cb+0x90>
        ble_ll_whitelist_disable();
   1f4f8:	f006 fe56 	bl	261a8 <ble_ll_whitelist_disable>
   1f4fc:	e7eb      	b.n	1f4d6 <ble_ll_adv_tx_start_cb+0xa6>
   1f4fe:	bf00      	nop
   1f500:	100043d8 	.word	0x100043d8
   1f504:	00555555 	.word	0x00555555
   1f508:	8e89bed6 	.word	0x8e89bed6
   1f50c:	10004930 	.word	0x10004930
   1f510:	10003fdc 	.word	0x10003fdc
   1f514:	0001f1b5 	.word	0x0001f1b5
   1f518:	0001f51d 	.word	0x0001f51d

0001f51c <ble_ll_adv_legacy_pdu_make>:
{
   1f51c:	b570      	push	{r4, r5, r6, lr}
   1f51e:	460c      	mov	r4, r1
   1f520:	4613      	mov	r3, r2
    adv_data_len = ADV_DATA_LEN(advsm);
   1f522:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   1f524:	b332      	cbz	r2, 1f574 <ble_ll_adv_legacy_pdu_make+0x58>
   1f526:	7c12      	ldrb	r2, [r2, #16]
    pdulen = BLE_DEV_ADDR_LEN + adv_data_len;
   1f528:	1d95      	adds	r5, r2, #6
   1f52a:	b2ed      	uxtb	r5, r5
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1f52c:	89a1      	ldrh	r1, [r4, #12]
   1f52e:	f011 0f04 	tst.w	r1, #4
   1f532:	d021      	beq.n	1f578 <ble_ll_adv_legacy_pdu_make+0x5c>
        if (advsm->flags & BLE_LL_ADV_SM_FLAG_RX_ADD) {
   1f534:	8962      	ldrh	r2, [r4, #10]
   1f536:	f012 0f02 	tst.w	r2, #2
   1f53a:	d125      	bne.n	1f588 <ble_ll_adv_legacy_pdu_make+0x6c>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_DIRECT_IND;
   1f53c:	2101      	movs	r1, #1
        pdulen = BLE_ADV_DIRECT_IND_LEN;
   1f53e:	250c      	movs	r5, #12
        adv_data_len = 0;
   1f540:	2200      	movs	r2, #0
    BLE_LL_ASSERT(adv_data_len <= BLE_ADV_LEGACY_DATA_MAX_LEN);
   1f542:	2a1f      	cmp	r2, #31
   1f544:	d828      	bhi.n	1f598 <ble_ll_adv_legacy_pdu_make+0x7c>
    advsm->adv_pdu_len = pdulen + BLE_LL_PDU_HDR_LEN;
   1f546:	1cae      	adds	r6, r5, #2
   1f548:	71e6      	strb	r6, [r4, #7]
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) {
   1f54a:	8966      	ldrh	r6, [r4, #10]
   1f54c:	f016 0f01 	tst.w	r6, #1
   1f550:	d001      	beq.n	1f556 <ble_ll_adv_legacy_pdu_make+0x3a>
        pdu_type |= BLE_ADV_PDU_HDR_TXADD_RAND;
   1f552:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    *hdr_byte = pdu_type;
   1f556:	7019      	strb	r1, [r3, #0]
    memcpy(dptr, advsm->adva, BLE_DEV_ADDR_LEN);
   1f558:	4623      	mov	r3, r4
   1f55a:	f853 1f24 	ldr.w	r1, [r3, #36]!
   1f55e:	6001      	str	r1, [r0, #0]
   1f560:	889b      	ldrh	r3, [r3, #4]
   1f562:	8083      	strh	r3, [r0, #4]
    dptr += BLE_DEV_ADDR_LEN;
   1f564:	1d83      	adds	r3, r0, #6
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1f566:	89a1      	ldrh	r1, [r4, #12]
   1f568:	f011 0f04 	tst.w	r1, #4
   1f56c:	d11e      	bne.n	1f5ac <ble_ll_adv_legacy_pdu_make+0x90>
    if (adv_data_len != 0) {
   1f56e:	bb2a      	cbnz	r2, 1f5bc <ble_ll_adv_legacy_pdu_make+0xa0>
}
   1f570:	4628      	mov	r0, r5
   1f572:	bd70      	pop	{r4, r5, r6, pc}
    adv_data_len = ADV_DATA_LEN(advsm);
   1f574:	2200      	movs	r2, #0
   1f576:	e7d7      	b.n	1f528 <ble_ll_adv_legacy_pdu_make+0xc>
    } else if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   1f578:	f011 0f01 	tst.w	r1, #1
   1f57c:	d108      	bne.n	1f590 <ble_ll_adv_legacy_pdu_make+0x74>
    } else if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE) {
   1f57e:	f011 0f02 	tst.w	r1, #2
   1f582:	d007      	beq.n	1f594 <ble_ll_adv_legacy_pdu_make+0x78>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_SCAN_IND;
   1f584:	2106      	movs	r1, #6
   1f586:	e7dc      	b.n	1f542 <ble_ll_adv_legacy_pdu_make+0x26>
            pdu_type |= BLE_ADV_PDU_HDR_RXADD_RAND;
   1f588:	2181      	movs	r1, #129	; 0x81
        pdulen = BLE_ADV_DIRECT_IND_LEN;
   1f58a:	250c      	movs	r5, #12
        adv_data_len = 0;
   1f58c:	2200      	movs	r2, #0
   1f58e:	e7d8      	b.n	1f542 <ble_ll_adv_legacy_pdu_make+0x26>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_IND;
   1f590:	2100      	movs	r1, #0
   1f592:	e7d6      	b.n	1f542 <ble_ll_adv_legacy_pdu_make+0x26>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_NONCONN_IND;
   1f594:	2102      	movs	r1, #2
   1f596:	e7d4      	b.n	1f542 <ble_ll_adv_legacy_pdu_make+0x26>
    BLE_LL_ASSERT(adv_data_len <= BLE_ADV_LEGACY_DATA_MAX_LEN);
   1f598:	f7f5 f8ac 	bl	146f4 <hal_debugger_connected>
   1f59c:	b100      	cbz	r0, 1f5a0 <ble_ll_adv_legacy_pdu_make+0x84>
   1f59e:	be01      	bkpt	0x0001
   1f5a0:	2300      	movs	r3, #0
   1f5a2:	461a      	mov	r2, r3
   1f5a4:	4619      	mov	r1, r3
   1f5a6:	4618      	mov	r0, r3
   1f5a8:	f7f9 fbc2 	bl	18d30 <__assert_func>
        memcpy(dptr, advsm->initiator_addr, BLE_DEV_ADDR_LEN);
   1f5ac:	4621      	mov	r1, r4
   1f5ae:	f851 6f36 	ldr.w	r6, [r1, #54]!
   1f5b2:	f8c0 6006 	str.w	r6, [r0, #6]
   1f5b6:	8889      	ldrh	r1, [r1, #4]
   1f5b8:	8099      	strh	r1, [r3, #4]
   1f5ba:	e7d8      	b.n	1f56e <ble_ll_adv_legacy_pdu_make+0x52>
        os_mbuf_copydata(advsm->adv_data, 0, adv_data_len, dptr);
   1f5bc:	2100      	movs	r1, #0
   1f5be:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1f5c0:	f7fa f8a6 	bl	19710 <os_mbuf_copydata>
   1f5c4:	e7d4      	b.n	1f570 <ble_ll_adv_legacy_pdu_make+0x54>

0001f5c6 <ble_ll_adv_update_adv_scan_rsp_data>:
    if (!(advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA) &&
   1f5c6:	8943      	ldrh	r3, [r0, #10]
   1f5c8:	f413 6fc0 	tst.w	r3, #1536	; 0x600
   1f5cc:	d023      	beq.n	1f616 <ble_ll_adv_update_adv_scan_rsp_data+0x50>
{
   1f5ce:	b510      	push	{r4, lr}
   1f5d0:	4604      	mov	r4, r0
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA) {
   1f5d2:	f413 7f00 	tst.w	r3, #512	; 0x200
   1f5d6:	d00e      	beq.n	1f5f6 <ble_ll_adv_update_adv_scan_rsp_data+0x30>
        if (advsm->new_adv_data) {
   1f5d8:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1f5da:	b133      	cbz	r3, 1f5ea <ble_ll_adv_update_adv_scan_rsp_data+0x24>
            os_mbuf_free_chain(advsm->adv_data);
   1f5dc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   1f5de:	f7f9 fff6 	bl	195ce <os_mbuf_free_chain>
            advsm->adv_data = advsm->new_adv_data;
   1f5e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1f5e4:	63e3      	str	r3, [r4, #60]	; 0x3c
            advsm->new_adv_data = NULL;
   1f5e6:	2300      	movs	r3, #0
   1f5e8:	6423      	str	r3, [r4, #64]	; 0x40
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA);
   1f5ea:	f44f 7100 	mov.w	r1, #512	; 0x200
   1f5ee:	4620      	mov	r0, r4
   1f5f0:	f7ff fd73 	bl	1f0da <ble_ll_adv_flags_clear>
}
   1f5f4:	bd10      	pop	{r4, pc}
    } else if (advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA) {
   1f5f6:	f413 6f80 	tst.w	r3, #1024	; 0x400
   1f5fa:	d0fb      	beq.n	1f5f4 <ble_ll_adv_update_adv_scan_rsp_data+0x2e>
        os_mbuf_free_chain(advsm->scan_rsp_data);
   1f5fc:	6c40      	ldr	r0, [r0, #68]	; 0x44
   1f5fe:	f7f9 ffe6 	bl	195ce <os_mbuf_free_chain>
        advsm->scan_rsp_data = advsm->new_scan_rsp_data;
   1f602:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1f604:	6463      	str	r3, [r4, #68]	; 0x44
        advsm->new_scan_rsp_data = NULL;
   1f606:	2300      	movs	r3, #0
   1f608:	64a3      	str	r3, [r4, #72]	; 0x48
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA);
   1f60a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1f60e:	4620      	mov	r0, r4
   1f610:	f7ff fd63 	bl	1f0da <ble_ll_adv_flags_clear>
   1f614:	e7ee      	b.n	1f5f4 <ble_ll_adv_update_adv_scan_rsp_data+0x2e>
   1f616:	4770      	bx	lr

0001f618 <ble_ll_adv_sm_stop>:
{
   1f618:	b538      	push	{r3, r4, r5, lr}
    if (advsm->adv_enabled) {
   1f61a:	7803      	ldrb	r3, [r0, #0]
   1f61c:	b903      	cbnz	r3, 1f620 <ble_ll_adv_sm_stop+0x8>
}
   1f61e:	bd38      	pop	{r3, r4, r5, pc}
   1f620:	4604      	mov	r4, r0
        ble_ll_sched_rmv_elem(&advsm->adv_sch);
   1f622:	3060      	adds	r0, #96	; 0x60
   1f624:	f006 fc2a 	bl	25e7c <ble_ll_sched_rmv_elem>
        OS_ENTER_CRITICAL(sr);
   1f628:	f7fb f93e 	bl	1a8a8 <os_arch_save_sr>
   1f62c:	4605      	mov	r5, r0
        if (ble_ll_state_get() == BLE_LL_STATE_ADV) {
   1f62e:	f7ff fbd7 	bl	1ede0 <ble_ll_state_get>
   1f632:	2801      	cmp	r0, #1
   1f634:	d016      	beq.n	1f664 <ble_ll_adv_sm_stop+0x4c>
        OS_EXIT_CRITICAL(sr);
   1f636:	4628      	mov	r0, r5
   1f638:	f7fb f93c 	bl	1a8b4 <os_arch_restore_sr>
    os_eventq_remove(&evq->evq, &ev->ev);
   1f63c:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1f640:	480e      	ldr	r0, [pc, #56]	; (1f67c <ble_ll_adv_sm_stop+0x64>)
   1f642:	f7f9 ff5f 	bl	19504 <os_eventq_remove>
        if (advsm->conn_comp_ev) {
   1f646:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1f648:	b118      	cbz	r0, 1f652 <ble_ll_adv_sm_stop+0x3a>
            ble_hci_trans_buf_free(advsm->conn_comp_ev);
   1f64a:	f012 fdf9 	bl	32240 <ble_hci_trans_buf_free>
            advsm->conn_comp_ev = NULL;
   1f64e:	2300      	movs	r3, #0
   1f650:	64e3      	str	r3, [r4, #76]	; 0x4c
        ble_ll_adv_active_chanset_clear(advsm);
   1f652:	4620      	mov	r0, r4
   1f654:	f7ff fd8b 	bl	1f16e <ble_ll_adv_active_chanset_clear>
        advsm->adv_enabled = 0;
   1f658:	2300      	movs	r3, #0
   1f65a:	7023      	strb	r3, [r4, #0]
        ble_ll_adv_update_adv_scan_rsp_data(advsm);
   1f65c:	4620      	mov	r0, r4
   1f65e:	f7ff ffb2 	bl	1f5c6 <ble_ll_adv_update_adv_scan_rsp_data>
}
   1f662:	e7dc      	b.n	1f61e <ble_ll_adv_sm_stop+0x6>
            ble_phy_disable();
   1f664:	f006 fe3a 	bl	262dc <ble_phy_disable>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1f668:	2000      	movs	r0, #0
   1f66a:	f7ff fbb3 	bl	1edd4 <ble_ll_state_set>
            g_ble_ll_cur_adv_sm = NULL;
   1f66e:	4b04      	ldr	r3, [pc, #16]	; (1f680 <ble_ll_adv_sm_stop+0x68>)
   1f670:	2200      	movs	r2, #0
   1f672:	601a      	str	r2, [r3, #0]
            ble_ll_scan_chk_resume();
   1f674:	f005 ff8a 	bl	2558c <ble_ll_scan_chk_resume>
   1f678:	e7dd      	b.n	1f636 <ble_ll_adv_sm_stop+0x1e>
   1f67a:	bf00      	nop
   1f67c:	100040f8 	.word	0x100040f8
   1f680:	100043d8 	.word	0x100043d8

0001f684 <ble_ll_adv_set_enable>:
{
   1f684:	b510      	push	{r4, lr}
   1f686:	460c      	mov	r4, r1
    advsm = ble_ll_adv_sm_find_configured(instance);
   1f688:	f7ff fdb0 	bl	1f1ec <ble_ll_adv_sm_find_configured>
    if (!advsm) {
   1f68c:	b178      	cbz	r0, 1f6ae <ble_ll_adv_set_enable+0x2a>
    if (enable == 1) {
   1f68e:	2c01      	cmp	r4, #1
   1f690:	d002      	beq.n	1f698 <ble_ll_adv_set_enable+0x14>
    } else if (enable == 0) {
   1f692:	b144      	cbz	r4, 1f6a6 <ble_ll_adv_set_enable+0x22>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1f694:	2012      	movs	r0, #18
}
   1f696:	bd10      	pop	{r4, pc}
        if (!advsm->adv_enabled) {
   1f698:	7802      	ldrb	r2, [r0, #0]
   1f69a:	b10a      	cbz	r2, 1f6a0 <ble_ll_adv_set_enable+0x1c>
    rc = BLE_ERR_SUCCESS;
   1f69c:	2000      	movs	r0, #0
   1f69e:	e7fa      	b.n	1f696 <ble_ll_adv_set_enable+0x12>
            rc = ble_ll_adv_sm_start(advsm);
   1f6a0:	f7ff fe30 	bl	1f304 <ble_ll_adv_sm_start>
   1f6a4:	e7f7      	b.n	1f696 <ble_ll_adv_set_enable+0x12>
        ble_ll_adv_sm_stop(advsm);
   1f6a6:	f7ff ffb7 	bl	1f618 <ble_ll_adv_sm_stop>
    rc = BLE_ERR_SUCCESS;
   1f6aa:	2000      	movs	r0, #0
   1f6ac:	e7f3      	b.n	1f696 <ble_ll_adv_set_enable+0x12>
        return BLE_ERR_UNK_ADV_INDENT;
   1f6ae:	2042      	movs	r0, #66	; 0x42
   1f6b0:	e7f1      	b.n	1f696 <ble_ll_adv_set_enable+0x12>

0001f6b2 <ble_ll_adv_update_data_mbuf>:
{
   1f6b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f6b6:	4605      	mov	r5, r0
   1f6b8:	4616      	mov	r6, r2
   1f6ba:	461f      	mov	r7, r3
   1f6bc:	f8bd 8018 	ldrh.w	r8, [sp, #24]
    om = *omp;
   1f6c0:	6804      	ldr	r4, [r0, #0]
    if (new_data) {
   1f6c2:	b149      	cbz	r1, 1f6d8 <ble_ll_adv_update_data_mbuf+0x26>
        if (om) {
   1f6c4:	b114      	cbz	r4, 1f6cc <ble_ll_adv_update_data_mbuf+0x1a>
            os_mbuf_free_chain(om);
   1f6c6:	4620      	mov	r0, r4
   1f6c8:	f7f9 ff81 	bl	195ce <os_mbuf_free_chain>
        om = os_msys_get_pkthdr(datalen, 0);
   1f6cc:	2100      	movs	r1, #0
   1f6ce:	4640      	mov	r0, r8
   1f6d0:	f7fa fc96 	bl	1a000 <os_msys_get_pkthdr>
        if (!om) {
   1f6d4:	4604      	mov	r4, r0
   1f6d6:	b150      	cbz	r0, 1f6ee <ble_ll_adv_update_data_mbuf+0x3c>
    BLE_LL_ASSERT(om);
   1f6d8:	b164      	cbz	r4, 1f6f4 <ble_ll_adv_update_data_mbuf+0x42>
    if (OS_MBUF_PKTLEN(om) + datalen > maxlen) {
   1f6da:	8a22      	ldrh	r2, [r4, #16]
   1f6dc:	4442      	add	r2, r8
   1f6de:	42b2      	cmp	r2, r6
   1f6e0:	dc12      	bgt.n	1f708 <ble_ll_adv_update_data_mbuf+0x56>
    ret = os_mbuf_append(om, data, datalen);
   1f6e2:	4642      	mov	r2, r8
   1f6e4:	4639      	mov	r1, r7
   1f6e6:	4620      	mov	r0, r4
   1f6e8:	f7f9 ff81 	bl	195ee <os_mbuf_append>
    if (ret) {
   1f6ec:	b988      	cbnz	r0, 1f712 <ble_ll_adv_update_data_mbuf+0x60>
    *omp = om;
   1f6ee:	602c      	str	r4, [r5, #0]
}
   1f6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    BLE_LL_ASSERT(om);
   1f6f4:	f7f4 fffe 	bl	146f4 <hal_debugger_connected>
   1f6f8:	b100      	cbz	r0, 1f6fc <ble_ll_adv_update_data_mbuf+0x4a>
   1f6fa:	be01      	bkpt	0x0001
   1f6fc:	2300      	movs	r3, #0
   1f6fe:	461a      	mov	r2, r3
   1f700:	4619      	mov	r1, r3
   1f702:	4618      	mov	r0, r3
   1f704:	f7f9 fb14 	bl	18d30 <__assert_func>
        os_mbuf_free_chain(om);
   1f708:	4620      	mov	r0, r4
   1f70a:	f7f9 ff60 	bl	195ce <os_mbuf_free_chain>
        om = NULL;
   1f70e:	2400      	movs	r4, #0
        goto done;
   1f710:	e7ed      	b.n	1f6ee <ble_ll_adv_update_data_mbuf+0x3c>
        os_mbuf_free_chain(om);
   1f712:	4620      	mov	r0, r4
   1f714:	f7f9 ff5b 	bl	195ce <os_mbuf_free_chain>
        om = NULL;
   1f718:	2400      	movs	r4, #0
   1f71a:	e7e8      	b.n	1f6ee <ble_ll_adv_update_data_mbuf+0x3c>

0001f71c <ble_ll_adv_set_scan_rsp_data>:
{
   1f71c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f71e:	b083      	sub	sp, #12
   1f720:	4606      	mov	r6, r0
   1f722:	460f      	mov	r7, r1
   1f724:	461c      	mov	r4, r3
    advsm = ble_ll_adv_sm_find_configured(instance);
   1f726:	4610      	mov	r0, r2
   1f728:	f7ff fd60 	bl	1f1ec <ble_ll_adv_sm_find_configured>
    if (!advsm) {
   1f72c:	2800      	cmp	r0, #0
   1f72e:	d03c      	beq.n	1f7aa <ble_ll_adv_set_scan_rsp_data+0x8e>
   1f730:	4605      	mov	r5, r0
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE)) {
   1f732:	8983      	ldrh	r3, [r0, #12]
   1f734:	f013 0f02 	tst.w	r3, #2
   1f738:	d102      	bne.n	1f740 <ble_ll_adv_set_scan_rsp_data+0x24>
        if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY)) {
   1f73a:	f013 0f10 	tst.w	r3, #16
   1f73e:	d036      	beq.n	1f7ae <ble_ll_adv_set_scan_rsp_data+0x92>
    switch (operation) {
   1f740:	2c03      	cmp	r4, #3
   1f742:	d002      	beq.n	1f74a <ble_ll_adv_set_scan_rsp_data+0x2e>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1f744:	2012      	movs	r0, #18
}
   1f746:	b003      	add	sp, #12
   1f748:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) {
   1f74a:	f013 0f10 	tst.w	r3, #16
   1f74e:	d001      	beq.n	1f754 <ble_ll_adv_set_scan_rsp_data+0x38>
            if (datalen > BLE_SCAN_RSP_LEGACY_DATA_MAX_LEN) {
   1f750:	2f1f      	cmp	r7, #31
   1f752:	d82e      	bhi.n	1f7b2 <ble_ll_adv_set_scan_rsp_data+0x96>
    if (advsm->adv_enabled) {
   1f754:	782b      	ldrb	r3, [r5, #0]
   1f756:	b1e3      	cbz	r3, 1f792 <ble_ll_adv_set_scan_rsp_data+0x76>
        if (advsm->new_scan_rsp_data) {
   1f758:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1f75a:	b14b      	cbz	r3, 1f770 <ble_ll_adv_set_scan_rsp_data+0x54>
            ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA);
   1f75c:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1f760:	4628      	mov	r0, r5
   1f762:	f7ff fcba 	bl	1f0da <ble_ll_adv_flags_clear>
            os_mbuf_free_chain(advsm->new_scan_rsp_data);
   1f766:	6ca8      	ldr	r0, [r5, #72]	; 0x48
   1f768:	f7f9 ff31 	bl	195ce <os_mbuf_free_chain>
            advsm->new_scan_rsp_data = NULL;
   1f76c:	2300      	movs	r3, #0
   1f76e:	64ab      	str	r3, [r5, #72]	; 0x48
        ble_ll_adv_update_data_mbuf(&advsm->new_scan_rsp_data, new_data,
   1f770:	9700      	str	r7, [sp, #0]
   1f772:	4633      	mov	r3, r6
   1f774:	221f      	movs	r2, #31
   1f776:	2101      	movs	r1, #1
   1f778:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1f77c:	f7ff ff99 	bl	1f6b2 <ble_ll_adv_update_data_mbuf>
        if (!advsm->new_scan_rsp_data) {
   1f780:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1f782:	b1c3      	cbz	r3, 1f7b6 <ble_ll_adv_set_scan_rsp_data+0x9a>
        ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA);
   1f784:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1f788:	4628      	mov	r0, r5
   1f78a:	f7ff fc9b 	bl	1f0c4 <ble_ll_adv_flags_set>
    return BLE_ERR_SUCCESS;
   1f78e:	2000      	movs	r0, #0
   1f790:	e7d9      	b.n	1f746 <ble_ll_adv_set_scan_rsp_data+0x2a>
        ble_ll_adv_update_data_mbuf(&advsm->scan_rsp_data, new_data,
   1f792:	9700      	str	r7, [sp, #0]
   1f794:	4633      	mov	r3, r6
   1f796:	221f      	movs	r2, #31
   1f798:	2101      	movs	r1, #1
   1f79a:	f105 0044 	add.w	r0, r5, #68	; 0x44
   1f79e:	f7ff ff88 	bl	1f6b2 <ble_ll_adv_update_data_mbuf>
        if (!advsm->scan_rsp_data) {
   1f7a2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   1f7a4:	b14b      	cbz	r3, 1f7ba <ble_ll_adv_set_scan_rsp_data+0x9e>
    return BLE_ERR_SUCCESS;
   1f7a6:	2000      	movs	r0, #0
   1f7a8:	e7cd      	b.n	1f746 <ble_ll_adv_set_scan_rsp_data+0x2a>
        return BLE_ERR_UNK_ADV_INDENT;
   1f7aa:	2042      	movs	r0, #66	; 0x42
   1f7ac:	e7cb      	b.n	1f746 <ble_ll_adv_set_scan_rsp_data+0x2a>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   1f7ae:	2012      	movs	r0, #18
   1f7b0:	e7c9      	b.n	1f746 <ble_ll_adv_set_scan_rsp_data+0x2a>
                return BLE_ERR_INV_HCI_CMD_PARMS;
   1f7b2:	2012      	movs	r0, #18
   1f7b4:	e7c7      	b.n	1f746 <ble_ll_adv_set_scan_rsp_data+0x2a>
            return BLE_ERR_MEM_CAPACITY;
   1f7b6:	2007      	movs	r0, #7
   1f7b8:	e7c5      	b.n	1f746 <ble_ll_adv_set_scan_rsp_data+0x2a>
            return BLE_ERR_MEM_CAPACITY;
   1f7ba:	2007      	movs	r0, #7
   1f7bc:	e7c3      	b.n	1f746 <ble_ll_adv_set_scan_rsp_data+0x2a>

0001f7be <ble_ll_adv_set_adv_data>:
{
   1f7be:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f7c0:	b083      	sub	sp, #12
   1f7c2:	4606      	mov	r6, r0
   1f7c4:	460f      	mov	r7, r1
   1f7c6:	461d      	mov	r5, r3
    advsm = ble_ll_adv_sm_find_configured(instance);
   1f7c8:	4610      	mov	r0, r2
   1f7ca:	f7ff fd0f 	bl	1f1ec <ble_ll_adv_sm_find_configured>
    if (!advsm) {
   1f7ce:	2800      	cmp	r0, #0
   1f7d0:	d049      	beq.n	1f866 <ble_ll_adv_set_adv_data+0xa8>
   1f7d2:	4604      	mov	r4, r0
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) {
   1f7d4:	8983      	ldrh	r3, [r0, #12]
   1f7d6:	f013 0f10 	tst.w	r3, #16
   1f7da:	d007      	beq.n	1f7ec <ble_ll_adv_set_adv_data+0x2e>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1f7dc:	f013 0f04 	tst.w	r3, #4
   1f7e0:	d007      	beq.n	1f7f2 <ble_ll_adv_set_adv_data+0x34>
            if (ble_ll_hci_adv_mode_ext()) {
   1f7e2:	f004 fa90 	bl	23d06 <ble_ll_hci_adv_mode_ext>
   1f7e6:	b120      	cbz	r0, 1f7f2 <ble_ll_adv_set_adv_data+0x34>
                return BLE_ERR_INV_HCI_CMD_PARMS;
   1f7e8:	2012      	movs	r0, #18
   1f7ea:	e005      	b.n	1f7f8 <ble_ll_adv_set_adv_data+0x3a>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE) {
   1f7ec:	f013 0f02 	tst.w	r3, #2
   1f7f0:	d13b      	bne.n	1f86a <ble_ll_adv_set_adv_data+0xac>
    switch (operation) {
   1f7f2:	2d03      	cmp	r5, #3
   1f7f4:	d002      	beq.n	1f7fc <ble_ll_adv_set_adv_data+0x3e>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1f7f6:	2012      	movs	r0, #18
}
   1f7f8:	b003      	add	sp, #12
   1f7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) {
   1f7fc:	89a3      	ldrh	r3, [r4, #12]
   1f7fe:	f013 0f10 	tst.w	r3, #16
   1f802:	d001      	beq.n	1f808 <ble_ll_adv_set_adv_data+0x4a>
            if (datalen > BLE_ADV_LEGACY_DATA_MAX_LEN) {
   1f804:	2f1f      	cmp	r7, #31
   1f806:	d832      	bhi.n	1f86e <ble_ll_adv_set_adv_data+0xb0>
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_ADV_DATA_INCOMPLETE);
   1f808:	2140      	movs	r1, #64	; 0x40
   1f80a:	4620      	mov	r0, r4
   1f80c:	f7ff fc65 	bl	1f0da <ble_ll_adv_flags_clear>
    if (advsm->adv_enabled) {
   1f810:	7823      	ldrb	r3, [r4, #0]
   1f812:	b1e3      	cbz	r3, 1f84e <ble_ll_adv_set_adv_data+0x90>
        if (advsm->new_adv_data) {
   1f814:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1f816:	b14b      	cbz	r3, 1f82c <ble_ll_adv_set_adv_data+0x6e>
            ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA);
   1f818:	f44f 7100 	mov.w	r1, #512	; 0x200
   1f81c:	4620      	mov	r0, r4
   1f81e:	f7ff fc5c 	bl	1f0da <ble_ll_adv_flags_clear>
            os_mbuf_free_chain(advsm->new_adv_data);
   1f822:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1f824:	f7f9 fed3 	bl	195ce <os_mbuf_free_chain>
            advsm->new_adv_data = NULL;
   1f828:	2300      	movs	r3, #0
   1f82a:	6423      	str	r3, [r4, #64]	; 0x40
        ble_ll_adv_update_data_mbuf(&advsm->new_adv_data, new_data,
   1f82c:	9700      	str	r7, [sp, #0]
   1f82e:	4633      	mov	r3, r6
   1f830:	221f      	movs	r2, #31
   1f832:	2101      	movs	r1, #1
   1f834:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1f838:	f7ff ff3b 	bl	1f6b2 <ble_ll_adv_update_data_mbuf>
        if (!advsm->new_adv_data) {
   1f83c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1f83e:	b1c3      	cbz	r3, 1f872 <ble_ll_adv_set_adv_data+0xb4>
        ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA);
   1f840:	f44f 7100 	mov.w	r1, #512	; 0x200
   1f844:	4620      	mov	r0, r4
   1f846:	f7ff fc3d 	bl	1f0c4 <ble_ll_adv_flags_set>
    return BLE_ERR_SUCCESS;
   1f84a:	2000      	movs	r0, #0
   1f84c:	e7d4      	b.n	1f7f8 <ble_ll_adv_set_adv_data+0x3a>
        ble_ll_adv_update_data_mbuf(&advsm->adv_data, new_data,
   1f84e:	9700      	str	r7, [sp, #0]
   1f850:	4633      	mov	r3, r6
   1f852:	221f      	movs	r2, #31
   1f854:	2101      	movs	r1, #1
   1f856:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   1f85a:	f7ff ff2a 	bl	1f6b2 <ble_ll_adv_update_data_mbuf>
        if (!advsm->adv_data) {
   1f85e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1f860:	b14b      	cbz	r3, 1f876 <ble_ll_adv_set_adv_data+0xb8>
    return BLE_ERR_SUCCESS;
   1f862:	2000      	movs	r0, #0
   1f864:	e7c8      	b.n	1f7f8 <ble_ll_adv_set_adv_data+0x3a>
        return BLE_ERR_UNK_ADV_INDENT;
   1f866:	2042      	movs	r0, #66	; 0x42
   1f868:	e7c6      	b.n	1f7f8 <ble_ll_adv_set_adv_data+0x3a>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   1f86a:	2012      	movs	r0, #18
   1f86c:	e7c4      	b.n	1f7f8 <ble_ll_adv_set_adv_data+0x3a>
                return BLE_ERR_INV_HCI_CMD_PARMS;
   1f86e:	2012      	movs	r0, #18
   1f870:	e7c2      	b.n	1f7f8 <ble_ll_adv_set_adv_data+0x3a>
            return BLE_ERR_MEM_CAPACITY;
   1f872:	2007      	movs	r0, #7
   1f874:	e7c0      	b.n	1f7f8 <ble_ll_adv_set_adv_data+0x3a>
            return BLE_ERR_MEM_CAPACITY;
   1f876:	2007      	movs	r0, #7
   1f878:	e7be      	b.n	1f7f8 <ble_ll_adv_set_adv_data+0x3a>
	...

0001f87c <ble_ll_adv_conn_req_rxd>:
{
   1f87c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f880:	4606      	mov	r6, r0
   1f882:	460f      	mov	r7, r1
   1f884:	4614      	mov	r4, r2
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY)) {
   1f886:	8992      	ldrh	r2, [r2, #12]
   1f888:	f012 0f10 	tst.w	r2, #16
   1f88c:	d103      	bne.n	1f896 <ble_ll_adv_conn_req_rxd+0x1a>
        if (!(advsm->flags & BLE_LL_ADV_SM_FLAG_CONN_RSP_TXD)) {
   1f88e:	8963      	ldrh	r3, [r4, #10]
   1f890:	f013 0f08 	tst.w	r3, #8
   1f894:	d066      	beq.n	1f964 <ble_ll_adv_conn_req_rxd+0xe8>
    resolved = BLE_MBUF_HDR_RESOLVED(hdr);
   1f896:	883b      	ldrh	r3, [r7, #0]
   1f898:	f403 6880 	and.w	r8, r3, #1024	; 0x400
    inita = rxbuf + BLE_LL_PDU_HDR_LEN;
   1f89c:	f106 0902 	add.w	r9, r6, #2
    if (hdr->rxinfo.flags & BLE_MBUF_HDR_F_DEVMATCH) {
   1f8a0:	f013 0f40 	tst.w	r3, #64	; 0x40
   1f8a4:	d060      	beq.n	1f968 <ble_ll_adv_conn_req_rxd+0xec>
        if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
   1f8a6:	7835      	ldrb	r5, [r6, #0]
   1f8a8:	f015 0540 	ands.w	r5, r5, #64	; 0x40
   1f8ac:	d000      	beq.n	1f8b0 <ble_ll_adv_conn_req_rxd+0x34>
            addr_type = BLE_ADDR_RANDOM;
   1f8ae:	2501      	movs	r5, #1
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1f8b0:	f012 0f04 	tst.w	r2, #4
   1f8b4:	d01b      	beq.n	1f8ee <ble_ll_adv_conn_req_rxd+0x72>
            if (resolved) {
   1f8b6:	f1b8 0f00 	cmp.w	r8, #0
   1f8ba:	d00f      	beq.n	1f8dc <ble_ll_adv_conn_req_rxd+0x60>
                ident_addr = g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_identity_addr;
   1f8bc:	f994 2008 	ldrsb.w	r2, [r4, #8]
   1f8c0:	2336      	movs	r3, #54	; 0x36
   1f8c2:	fb03 f302 	mul.w	r3, r3, r2
   1f8c6:	f103 0120 	add.w	r1, r3, #32
   1f8ca:	4a2a      	ldr	r2, [pc, #168]	; (1f974 <ble_ll_adv_conn_req_rxd+0xf8>)
   1f8cc:	4411      	add	r1, r2
   1f8ce:	3104      	adds	r1, #4
                addr_type = g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_addr_type;
   1f8d0:	5cd5      	ldrb	r5, [r2, r3]
            if ((addr_type != advsm->peer_addr_type) ||
   1f8d2:	7963      	ldrb	r3, [r4, #5]
   1f8d4:	42ab      	cmp	r3, r5
   1f8d6:	d003      	beq.n	1f8e0 <ble_ll_adv_conn_req_rxd+0x64>
                valid = 0;
   1f8d8:	2500      	movs	r5, #0
   1f8da:	e046      	b.n	1f96a <ble_ll_adv_conn_req_rxd+0xee>
            ident_addr = inita;
   1f8dc:	4649      	mov	r1, r9
   1f8de:	e7f8      	b.n	1f8d2 <ble_ll_adv_conn_req_rxd+0x56>
                memcmp(advsm->peer_addr, ident_addr, BLE_DEV_ADDR_LEN)) {
   1f8e0:	2206      	movs	r2, #6
   1f8e2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1f8e6:	f7fb f98f 	bl	1ac08 <memcmp>
            if ((addr_type != advsm->peer_addr_type) ||
   1f8ea:	2800      	cmp	r0, #0
   1f8ec:	d140      	bne.n	1f970 <ble_ll_adv_conn_req_rxd+0xf4>
        if (resolved) {
   1f8ee:	f1b8 0f00 	cmp.w	r8, #0
   1f8f2:	d114      	bne.n	1f91e <ble_ll_adv_conn_req_rxd+0xa2>
                                         !(advsm->props &
   1f8f4:	89a3      	ldrh	r3, [r4, #12]
        valid = ble_ll_conn_periph_start(rxbuf, addr_type, hdr,
   1f8f6:	091b      	lsrs	r3, r3, #4
   1f8f8:	f083 0301 	eor.w	r3, r3, #1
   1f8fc:	f003 0301 	and.w	r3, r3, #1
   1f900:	463a      	mov	r2, r7
   1f902:	4629      	mov	r1, r5
   1f904:	4630      	mov	r0, r6
   1f906:	f001 fe0d 	bl	21524 <ble_ll_conn_periph_start>
        if (valid) {
   1f90a:	4605      	mov	r5, r0
   1f90c:	b368      	cbz	r0, 1f96a <ble_ll_adv_conn_req_rxd+0xee>
            if (!(advsm->flags & BLE_LL_ADV_SM_FLAG_CONN_RSP_TXD)) {
   1f90e:	8963      	ldrh	r3, [r4, #10]
   1f910:	f013 0f08 	tst.w	r3, #8
   1f914:	d129      	bne.n	1f96a <ble_ll_adv_conn_req_rxd+0xee>
                ble_ll_adv_sm_stop(advsm);
   1f916:	4620      	mov	r0, r4
   1f918:	f7ff fe7e 	bl	1f618 <ble_ll_adv_sm_stop>
   1f91c:	e025      	b.n	1f96a <ble_ll_adv_conn_req_rxd+0xee>
            memcpy(advsm->adv_rpa, inita, BLE_DEV_ADDR_LEN);
   1f91e:	f8d9 3000 	ldr.w	r3, [r9]
   1f922:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
   1f926:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   1f92a:	85e3      	strh	r3, [r4, #46]	; 0x2e
            ble_ll_resolv_set_peer_rpa(advsm->adv_rpa_index, inita);
   1f92c:	4649      	mov	r1, r9
   1f92e:	f994 0008 	ldrsb.w	r0, [r4, #8]
   1f932:	f005 f8c5 	bl	24ac0 <ble_ll_resolv_set_peer_rpa>
                   g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_identity_addr,
   1f936:	f994 3008 	ldrsb.w	r3, [r4, #8]
   1f93a:	2236      	movs	r2, #54	; 0x36
   1f93c:	fb02 f303 	mul.w	r3, r2, r3
   1f940:	3320      	adds	r3, #32
   1f942:	490c      	ldr	r1, [pc, #48]	; (1f974 <ble_ll_adv_conn_req_rxd+0xf8>)
   1f944:	440b      	add	r3, r1
            memcpy(inita,
   1f946:	f853 0f04 	ldr.w	r0, [r3, #4]!
   1f94a:	f8c6 0002 	str.w	r0, [r6, #2]
   1f94e:	889b      	ldrh	r3, [r3, #4]
   1f950:	f8a9 3004 	strh.w	r3, [r9, #4]
            addr_type = g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_addr_type;
   1f954:	f994 3008 	ldrsb.w	r3, [r4, #8]
   1f958:	fb02 f203 	mul.w	r2, r2, r3
   1f95c:	5c8d      	ldrb	r5, [r1, r2]
            addr_type += 2;
   1f95e:	3502      	adds	r5, #2
   1f960:	b2ed      	uxtb	r5, r5
   1f962:	e7c7      	b.n	1f8f4 <ble_ll_adv_conn_req_rxd+0x78>
            return 0;
   1f964:	2500      	movs	r5, #0
   1f966:	e000      	b.n	1f96a <ble_ll_adv_conn_req_rxd+0xee>
    valid = 0;
   1f968:	2500      	movs	r5, #0
}
   1f96a:	4628      	mov	r0, r5
   1f96c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                valid = 0;
   1f970:	2500      	movs	r5, #0
   1f972:	e7fa      	b.n	1f96a <ble_ll_adv_conn_req_rxd+0xee>
   1f974:	100046c4 	.word	0x100046c4

0001f978 <ble_ll_adv_sm_stop_timeout>:
{
   1f978:	b510      	push	{r4, lr}
   1f97a:	4604      	mov	r4, r0
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   1f97c:	8983      	ldrh	r3, [r0, #12]
   1f97e:	f013 0f08 	tst.w	r3, #8
   1f982:	d103      	bne.n	1f98c <ble_ll_adv_sm_stop_timeout+0x14>
    ble_ll_adv_sm_stop(advsm);
   1f984:	4620      	mov	r0, r4
   1f986:	f7ff fe47 	bl	1f618 <ble_ll_adv_sm_stop>
}
   1f98a:	bd10      	pop	{r4, pc}
        ble_ll_conn_comp_event_send(NULL, BLE_ERR_DIR_ADV_TMO,
   1f98c:	4603      	mov	r3, r0
   1f98e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   1f990:	213c      	movs	r1, #60	; 0x3c
   1f992:	2000      	movs	r0, #0
   1f994:	f001 fffa 	bl	2198c <ble_ll_conn_comp_event_send>
        advsm->conn_comp_ev = NULL;
   1f998:	2300      	movs	r3, #0
   1f99a:	64e3      	str	r3, [r4, #76]	; 0x4c
   1f99c:	e7f2      	b.n	1f984 <ble_ll_adv_sm_stop_timeout+0xc>
	...

0001f9a0 <ble_ll_adv_reschedule_event>:

static void
ble_ll_adv_reschedule_event(struct ble_ll_adv_sm *advsm)
{
   1f9a0:	b510      	push	{r4, lr}
    struct ble_ll_sched_item *sch;
    uint32_t max_delay_ticks;
    int rc;

    BLE_LL_ASSERT(advsm->adv_enabled);
   1f9a2:	7803      	ldrb	r3, [r0, #0]
   1f9a4:	b19b      	cbz	r3, 1f9ce <ble_ll_adv_reschedule_event+0x2e>
   1f9a6:	4604      	mov	r4, r0

    sch = &advsm->adv_sch;
   1f9a8:	3060      	adds	r0, #96	; 0x60

    if (!sch->enqueued) {
   1f9aa:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   1f9ae:	b96b      	cbnz	r3, 1f9cc <ble_ll_adv_reschedule_event+0x2c>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   1f9b0:	89a3      	ldrh	r3, [r4, #12]
   1f9b2:	f013 0f08 	tst.w	r3, #8
   1f9b6:	d014      	beq.n	1f9e2 <ble_ll_adv_reschedule_event+0x42>
            max_delay_ticks = 0;
   1f9b8:	2100      	movs	r1, #0
        } else {
            max_delay_ticks = ble_ll_tmr_u2t(BLE_LL_ADV_DELAY_MS_MAX * 1000);
        }

        rc = ble_ll_sched_adv_reschedule(sch, max_delay_ticks);
   1f9ba:	f006 f9e3 	bl	25d84 <ble_ll_sched_adv_reschedule>
        if (rc) {
   1f9be:	b998      	cbnz	r0, 1f9e8 <ble_ll_adv_reschedule_event+0x48>
            ble_ll_adv_drop_event(advsm);
            return;
        }

        advsm->adv_event_start_time = sch->start_time +
   1f9c0:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1f9c2:	4b0b      	ldr	r3, [pc, #44]	; (1f9f0 <ble_ll_adv_reschedule_event+0x50>)
   1f9c4:	781b      	ldrb	r3, [r3, #0]
   1f9c6:	4413      	add	r3, r2
   1f9c8:	61a3      	str	r3, [r4, #24]
                                      g_ble_ll_sched_offset_ticks;
        advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   1f9ca:	61e3      	str	r3, [r4, #28]
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) &&
                                                        !advsm->aux_active) {
        ble_ll_adv_aux_schedule(advsm);
    }
#endif
}
   1f9cc:	bd10      	pop	{r4, pc}
    BLE_LL_ASSERT(advsm->adv_enabled);
   1f9ce:	f7f4 fe91 	bl	146f4 <hal_debugger_connected>
   1f9d2:	b100      	cbz	r0, 1f9d6 <ble_ll_adv_reschedule_event+0x36>
   1f9d4:	be01      	bkpt	0x0001
   1f9d6:	2300      	movs	r3, #0
   1f9d8:	461a      	mov	r2, r3
   1f9da:	4619      	mov	r1, r3
   1f9dc:	4618      	mov	r0, r3
   1f9de:	f7f9 f9a7 	bl	18d30 <__assert_func>
            max_delay_ticks = ble_ll_tmr_u2t(BLE_LL_ADV_DELAY_MS_MAX * 1000);
   1f9e2:	f240 1147 	movw	r1, #327	; 0x147
   1f9e6:	e7e8      	b.n	1f9ba <ble_ll_adv_reschedule_event+0x1a>
            ble_ll_adv_drop_event(advsm);
   1f9e8:	4620      	mov	r0, r4
   1f9ea:	f7ff fbcb 	bl	1f184 <ble_ll_adv_drop_event>
            return;
   1f9ee:	e7ed      	b.n	1f9cc <ble_ll_adv_reschedule_event+0x2c>
   1f9f0:	10004930 	.word	0x10004930

0001f9f4 <ble_ll_adv_sm_init>:
    return 0;
}

static void
ble_ll_adv_sm_init(struct ble_ll_adv_sm *advsm)
{
   1f9f4:	b510      	push	{r4, lr}
   1f9f6:	4604      	mov	r4, r0
    memset(advsm, 0, sizeof(struct ble_ll_adv_sm));
   1f9f8:	227c      	movs	r2, #124	; 0x7c
   1f9fa:	2100      	movs	r1, #0
   1f9fc:	f7fb f94d 	bl	1ac9a <memset>

    advsm->adv_itvl_min = BLE_HCI_ADV_ITVL_DEF;
   1fa00:	f44f 6300 	mov.w	r3, #2048	; 0x800
   1fa04:	81e3      	strh	r3, [r4, #14]
    advsm->adv_itvl_max = BLE_HCI_ADV_ITVL_DEF;
   1fa06:	8223      	strh	r3, [r4, #16]
    advsm->adv_chanmask = BLE_HCI_ADV_CHANMASK_DEF;
   1fa08:	2307      	movs	r3, #7
   1fa0a:	70a3      	strb	r3, [r4, #2]
    memset(ev, 0, sizeof(*ev));
   1fa0c:	2300      	movs	r3, #0
   1fa0e:	6523      	str	r3, [r4, #80]	; 0x50
   1fa10:	65e3      	str	r3, [r4, #92]	; 0x5c
    ev->ev.ev_queued = 0;
   1fa12:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    ev->ev.ev_cb = (os_event_fn *)fn;
   1fa16:	4b03      	ldr	r3, [pc, #12]	; (1fa24 <ble_ll_adv_sm_init+0x30>)
   1fa18:	6563      	str	r3, [r4, #84]	; 0x54
    ev->ev.ev_arg = arg;
   1fa1a:	65a4      	str	r4, [r4, #88]	; 0x58
#endif
#endif

    /* Configure instances to be legacy on start */
    advsm->props |= BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE;
    advsm->props |= BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY;
   1fa1c:	2312      	movs	r3, #18
   1fa1e:	81a3      	strh	r3, [r4, #12]
}
   1fa20:	bd10      	pop	{r4, pc}
   1fa22:	bf00      	nop
   1fa24:	0001fb85 	.word	0x0001fb85

0001fa28 <ble_ll_adv_chk_rpa_timeout>:
    if (advsm->own_addr_type < BLE_HCI_ADV_OWN_ADDR_PRIV_PUB) {
   1fa28:	7903      	ldrb	r3, [r0, #4]
   1fa2a:	2b01      	cmp	r3, #1
   1fa2c:	d90e      	bls.n	1fa4c <ble_ll_adv_chk_rpa_timeout+0x24>
{
   1fa2e:	b510      	push	{r4, lr}
   1fa30:	4604      	mov	r4, r0
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_ADV_RPA_TMO) {
   1fa32:	8943      	ldrh	r3, [r0, #10]
   1fa34:	f413 7f80 	tst.w	r3, #256	; 0x100
   1fa38:	d100      	bne.n	1fa3c <ble_ll_adv_chk_rpa_timeout+0x14>
}
   1fa3a:	bd10      	pop	{r4, pc}
        ble_ll_adv_rpa_update(advsm);
   1fa3c:	f7ff fb59 	bl	1f0f2 <ble_ll_adv_rpa_update>
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_ADV_RPA_TMO);
   1fa40:	f44f 7180 	mov.w	r1, #256	; 0x100
   1fa44:	4620      	mov	r0, r4
   1fa46:	f7ff fb48 	bl	1f0da <ble_ll_adv_flags_clear>
   1fa4a:	e7f6      	b.n	1fa3a <ble_ll_adv_chk_rpa_timeout+0x12>
   1fa4c:	4770      	bx	lr
	...

0001fa50 <ble_ll_adv_done>:
{
   1fa50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    BLE_LL_ASSERT(advsm->adv_enabled);
   1fa54:	7803      	ldrb	r3, [r0, #0]
   1fa56:	2b00      	cmp	r3, #0
   1fa58:	d03e      	beq.n	1fad8 <ble_ll_adv_done+0x88>
   1fa5a:	4604      	mov	r4, r0
    ble_ll_adv_update_adv_scan_rsp_data(advsm);
   1fa5c:	f7ff fdb3 	bl	1f5c6 <ble_ll_adv_update_adv_scan_rsp_data>
    ble_ll_sched_rmv_elem(&advsm->adv_sch);
   1fa60:	f104 0560 	add.w	r5, r4, #96	; 0x60
   1fa64:	4628      	mov	r0, r5
   1fa66:	f006 fa09 	bl	25e7c <ble_ll_sched_rmv_elem>
    os_eventq_remove(&evq->evq, &ev->ev);
   1fa6a:	f104 0650 	add.w	r6, r4, #80	; 0x50
   1fa6e:	4631      	mov	r1, r6
   1fa70:	483c      	ldr	r0, [pc, #240]	; (1fb64 <ble_ll_adv_done+0x114>)
   1fa72:	f7f9 fd47 	bl	19504 <os_eventq_remove>
    final_adv_chan = ble_ll_adv_final_chan(advsm);
   1fa76:	4620      	mov	r0, r4
   1fa78:	f7ff fb17 	bl	1f0aa <ble_ll_adv_final_chan>
    if (advsm->adv_chan == final_adv_chan) {
   1fa7c:	79a3      	ldrb	r3, [r4, #6]
   1fa7e:	4283      	cmp	r3, r0
   1fa80:	d034      	beq.n	1faec <ble_ll_adv_done+0x9c>
        ++advsm->adv_chan;
   1fa82:	3301      	adds	r3, #1
   1fa84:	b2db      	uxtb	r3, r3
   1fa86:	71a3      	strb	r3, [r4, #6]
        mask = 1 << (advsm->adv_chan - BLE_PHY_ADV_CHAN_START);
   1fa88:	f1a3 0125 	sub.w	r1, r3, #37	; 0x25
   1fa8c:	2201      	movs	r2, #1
   1fa8e:	408a      	lsls	r2, r1
        if ((mask & advsm->adv_chanmask) == 0) {
   1fa90:	78a1      	ldrb	r1, [r4, #2]
   1fa92:	420a      	tst	r2, r1
   1fa94:	d101      	bne.n	1fa9a <ble_ll_adv_done+0x4a>
            ++advsm->adv_chan;
   1fa96:	3301      	adds	r3, #1
   1fa98:	71a3      	strb	r3, [r4, #6]
    return os_cputime_get32();
   1fa9a:	f014 fa30 	bl	33efe <os_cputime_get32>
        advsm->adv_pdu_start_time = ble_ll_tmr_get() +
   1fa9e:	4b32      	ldr	r3, [pc, #200]	; (1fb68 <ble_ll_adv_done+0x118>)
   1faa0:	781b      	ldrb	r3, [r3, #0]
   1faa2:	4403      	add	r3, r0
   1faa4:	61e3      	str	r3, [r4, #28]
        resched_pdu = 1;
   1faa6:	2701      	movs	r7, #1
    if ((advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) &&
   1faa8:	89a3      	ldrh	r3, [r4, #12]
   1faaa:	f013 0f08 	tst.w	r3, #8
   1faae:	d004      	beq.n	1faba <ble_ll_adv_done+0x6a>
        LL_TMR_GEQ(advsm->adv_pdu_start_time, advsm->adv_end_time)) {
   1fab0:	69e3      	ldr	r3, [r4, #28]
   1fab2:	6a22      	ldr	r2, [r4, #32]
   1fab4:	1a9b      	subs	r3, r3, r2
    if ((advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) &&
   1fab6:	2b00      	cmp	r3, #0
   1fab8:	da43      	bge.n	1fb42 <ble_ll_adv_done+0xf2>
    ble_ll_adv_chk_rpa_timeout(advsm);
   1faba:	4620      	mov	r0, r4
   1fabc:	f7ff ffb4 	bl	1fa28 <ble_ll_adv_chk_rpa_timeout>
    ble_ll_adv_set_sched(advsm);
   1fac0:	4620      	mov	r0, r4
   1fac2:	f7ff fbeb 	bl	1f29c <ble_ll_adv_set_sched>
    if (!resched_pdu) {
   1fac6:	2f00      	cmp	r7, #0
   1fac8:	d03f      	beq.n	1fb4a <ble_ll_adv_done+0xfa>
    rc = ble_ll_sched_adv_resched_pdu(&advsm->adv_sch);
   1faca:	4628      	mov	r0, r5
   1facc:	f006 f99e 	bl	25e0c <ble_ll_sched_adv_resched_pdu>
    if (rc) {
   1fad0:	2800      	cmp	r0, #0
   1fad2:	d13e      	bne.n	1fb52 <ble_ll_adv_done+0x102>
}
   1fad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    BLE_LL_ASSERT(advsm->adv_enabled);
   1fad8:	f7f4 fe0c 	bl	146f4 <hal_debugger_connected>
   1fadc:	b100      	cbz	r0, 1fae0 <ble_ll_adv_done+0x90>
   1fade:	be01      	bkpt	0x0001
   1fae0:	2300      	movs	r3, #0
   1fae2:	461a      	mov	r2, r3
   1fae4:	4619      	mov	r1, r3
   1fae6:	4618      	mov	r0, r3
   1fae8:	f7f9 f922 	bl	18d30 <__assert_func>
        ble_ll_scan_chk_resume();
   1faec:	f005 fd4e 	bl	2558c <ble_ll_scan_chk_resume>
        advsm->adv_chan = ble_ll_adv_first_chan(advsm);
   1faf0:	4620      	mov	r0, r4
   1faf2:	f7ff facd 	bl	1f090 <ble_ll_adv_first_chan>
   1faf6:	71a0      	strb	r0, [r4, #6]
        itvl = advsm->adv_itvl_usecs;
   1faf8:	6960      	ldr	r0, [r4, #20]
    if (usecs <= 31249) {
   1fafa:	f647 2311 	movw	r3, #31249	; 0x7a11
   1fafe:	4298      	cmp	r0, r3
   1fb00:	d811      	bhi.n	1fb26 <ble_ll_adv_done+0xd6>
        return (usecs * 137439) / 4194304;
   1fb02:	4b1a      	ldr	r3, [pc, #104]	; (1fb6c <ble_ll_adv_done+0x11c>)
   1fb04:	fb03 f000 	mul.w	r0, r3, r0
   1fb08:	ea4f 5890 	mov.w	r8, r0, lsr #22
        advsm->adv_event_start_time += tick_itvl;
   1fb0c:	69a3      	ldr	r3, [r4, #24]
   1fb0e:	4443      	add	r3, r8
   1fb10:	61a3      	str	r3, [r4, #24]
        advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   1fb12:	61e3      	str	r3, [r4, #28]
        start_time = advsm->adv_pdu_start_time - g_ble_ll_sched_offset_ticks;
   1fb14:	4a14      	ldr	r2, [pc, #80]	; (1fb68 <ble_ll_adv_done+0x118>)
   1fb16:	7817      	ldrb	r7, [r2, #0]
   1fb18:	1bdf      	subs	r7, r3, r7
    return os_cputime_get32();
   1fb1a:	f014 f9f0 	bl	33efe <os_cputime_get32>
        if (delta_t < 0) {
   1fb1e:	1a3b      	subs	r3, r7, r0
   1fb20:	d405      	bmi.n	1fb2e <ble_ll_adv_done+0xde>
        resched_pdu = 0;
   1fb22:	2700      	movs	r7, #0
   1fb24:	e7c0      	b.n	1faa8 <ble_ll_adv_done+0x58>
    return os_cputime_usecs_to_ticks(usecs);
   1fb26:	f014 f9ef 	bl	33f08 <os_cputime_usecs_to_ticks>
   1fb2a:	4680      	mov	r8, r0
   1fb2c:	e7ee      	b.n	1fb0c <ble_ll_adv_done+0xbc>
            while (delta_t < 0) {
   1fb2e:	2b00      	cmp	r3, #0
   1fb30:	da05      	bge.n	1fb3e <ble_ll_adv_done+0xee>
                advsm->adv_event_start_time += tick_itvl;
   1fb32:	69a2      	ldr	r2, [r4, #24]
   1fb34:	4442      	add	r2, r8
   1fb36:	61a2      	str	r2, [r4, #24]
                advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   1fb38:	61e2      	str	r2, [r4, #28]
                delta_t += (int32_t)tick_itvl;
   1fb3a:	4443      	add	r3, r8
   1fb3c:	e7f7      	b.n	1fb2e <ble_ll_adv_done+0xde>
        resched_pdu = 0;
   1fb3e:	2700      	movs	r7, #0
   1fb40:	e7b2      	b.n	1faa8 <ble_ll_adv_done+0x58>
        ble_ll_adv_sm_stop_timeout(advsm);
   1fb42:	4620      	mov	r0, r4
   1fb44:	f7ff ff18 	bl	1f978 <ble_ll_adv_sm_stop_timeout>
        return;
   1fb48:	e7c4      	b.n	1fad4 <ble_ll_adv_done+0x84>
        ble_ll_adv_reschedule_event(advsm);
   1fb4a:	4620      	mov	r0, r4
   1fb4c:	f7ff ff28 	bl	1f9a0 <ble_ll_adv_reschedule_event>
        return;
   1fb50:	e7c0      	b.n	1fad4 <ble_ll_adv_done+0x84>
        STATS_INC(ble_ll_stats, adv_resched_pdu_fail);
   1fb52:	4a07      	ldr	r2, [pc, #28]	; (1fb70 <ble_ll_adv_done+0x120>)
   1fb54:	6f53      	ldr	r3, [r2, #116]	; 0x74
   1fb56:	3301      	adds	r3, #1
   1fb58:	6753      	str	r3, [r2, #116]	; 0x74
    os_eventq_put(&evq->evq, &ev->ev);
   1fb5a:	4631      	mov	r1, r6
   1fb5c:	4801      	ldr	r0, [pc, #4]	; (1fb64 <ble_ll_adv_done+0x114>)
   1fb5e:	f7f9 fc3a 	bl	193d6 <os_eventq_put>
}
   1fb62:	e7b7      	b.n	1fad4 <ble_ll_adv_done+0x84>
   1fb64:	100040f8 	.word	0x100040f8
   1fb68:	10004930 	.word	0x10004930
   1fb6c:	000218df 	.word	0x000218df
   1fb70:	10003fdc 	.word	0x10003fdc

0001fb74 <ble_ll_adv_make_done>:
{
   1fb74:	b510      	push	{r4, lr}
   1fb76:	4604      	mov	r4, r0
    ble_ll_adv_active_chanset_clear(advsm);
   1fb78:	f7ff faf9 	bl	1f16e <ble_ll_adv_active_chanset_clear>
    ble_ll_adv_done(advsm);
   1fb7c:	4620      	mov	r0, r4
   1fb7e:	f7ff ff67 	bl	1fa50 <ble_ll_adv_done>
}
   1fb82:	bd10      	pop	{r4, pc}

0001fb84 <ble_ll_adv_event_done>:
{
   1fb84:	b508      	push	{r3, lr}
    ble_ll_adv_done(ble_npl_event_get_arg(ev));
   1fb86:	6880      	ldr	r0, [r0, #8]
   1fb88:	f7ff ff62 	bl	1fa50 <ble_ll_adv_done>
}
   1fb8c:	bd08      	pop	{r3, pc}
	...

0001fb90 <ble_ll_adv_rpa_timeout>:
{
   1fb90:	b510      	push	{r4, lr}
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1fb92:	2400      	movs	r4, #0
   1fb94:	2c00      	cmp	r4, #0
   1fb96:	dd00      	ble.n	1fb9a <ble_ll_adv_rpa_timeout+0xa>
}
   1fb98:	bd10      	pop	{r4, pc}
        advsm = &g_ble_ll_adv_sm[i];
   1fb9a:	4a08      	ldr	r2, [pc, #32]	; (1fbbc <ble_ll_adv_rpa_timeout+0x2c>)
   1fb9c:	ebc4 1144 	rsb	r1, r4, r4, lsl #5
   1fba0:	008b      	lsls	r3, r1, #2
   1fba2:	18d0      	adds	r0, r2, r3
        if (advsm->adv_enabled &&
   1fba4:	5cd3      	ldrb	r3, [r2, r3]
   1fba6:	b113      	cbz	r3, 1fbae <ble_ll_adv_rpa_timeout+0x1e>
                advsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   1fba8:	7903      	ldrb	r3, [r0, #4]
        if (advsm->adv_enabled &&
   1fbaa:	2b01      	cmp	r3, #1
   1fbac:	d801      	bhi.n	1fbb2 <ble_ll_adv_rpa_timeout+0x22>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1fbae:	3401      	adds	r4, #1
   1fbb0:	e7f0      	b.n	1fb94 <ble_ll_adv_rpa_timeout+0x4>
            ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_ADV_RPA_TMO);
   1fbb2:	f44f 7180 	mov.w	r1, #256	; 0x100
   1fbb6:	f7ff fa85 	bl	1f0c4 <ble_ll_adv_flags_set>
   1fbba:	e7f8      	b.n	1fbae <ble_ll_adv_rpa_timeout+0x1e>
   1fbbc:	1000435c 	.word	0x1000435c

0001fbc0 <ble_ll_adv_event_rmvd_from_sched>:
{
   1fbc0:	b508      	push	{r3, lr}
    ble_ll_adv_drop_event(advsm);
   1fbc2:	f7ff fadf 	bl	1f184 <ble_ll_adv_drop_event>
}
   1fbc6:	bd08      	pop	{r3, pc}

0001fbc8 <ble_ll_adv_halt>:
{
   1fbc8:	b510      	push	{r4, lr}
    if (g_ble_ll_cur_adv_sm != NULL) {
   1fbca:	4b0b      	ldr	r3, [pc, #44]	; (1fbf8 <ble_ll_adv_halt+0x30>)
   1fbcc:	681c      	ldr	r4, [r3, #0]
   1fbce:	b194      	cbz	r4, 1fbf6 <ble_ll_adv_halt+0x2e>
        ble_phy_txpwr_set(g_ble_ll_tx_power);
   1fbd0:	4b0a      	ldr	r3, [pc, #40]	; (1fbfc <ble_ll_adv_halt+0x34>)
   1fbd2:	f993 0000 	ldrsb.w	r0, [r3]
   1fbd6:	f006 fb3f 	bl	26258 <ble_phy_txpwr_set>
    os_eventq_put(&evq->evq, &ev->ev);
   1fbda:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1fbde:	4808      	ldr	r0, [pc, #32]	; (1fc00 <ble_ll_adv_halt+0x38>)
   1fbe0:	f7f9 fbf9 	bl	193d6 <os_eventq_put>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1fbe4:	2000      	movs	r0, #0
   1fbe6:	f7ff f8f5 	bl	1edd4 <ble_ll_state_set>
        ble_ll_adv_active_chanset_clear(g_ble_ll_cur_adv_sm);
   1fbea:	4c03      	ldr	r4, [pc, #12]	; (1fbf8 <ble_ll_adv_halt+0x30>)
   1fbec:	6820      	ldr	r0, [r4, #0]
   1fbee:	f7ff fabe 	bl	1f16e <ble_ll_adv_active_chanset_clear>
        g_ble_ll_cur_adv_sm = NULL;
   1fbf2:	2300      	movs	r3, #0
   1fbf4:	6023      	str	r3, [r4, #0]
}
   1fbf6:	bd10      	pop	{r4, pc}
   1fbf8:	100043d8 	.word	0x100043d8
   1fbfc:	10004348 	.word	0x10004348
   1fc00:	100040f8 	.word	0x100040f8

0001fc04 <ble_ll_adv_set_adv_params>:
    if (len != sizeof(*cmd)) {
   1fc04:	290f      	cmp	r1, #15
   1fc06:	d163      	bne.n	1fcd0 <ble_ll_adv_set_adv_params+0xcc>
   1fc08:	4603      	mov	r3, r0
    if (advsm->adv_enabled) {
   1fc0a:	4a3e      	ldr	r2, [pc, #248]	; (1fd04 <ble_ll_adv_set_adv_params+0x100>)
   1fc0c:	7811      	ldrb	r1, [r2, #0]
   1fc0e:	2900      	cmp	r1, #0
   1fc10:	d160      	bne.n	1fcd4 <ble_ll_adv_set_adv_params+0xd0>
{
   1fc12:	b4f0      	push	{r4, r5, r6, r7}
    adv_itvl_min = le16toh(cmd->min_interval);
   1fc14:	8804      	ldrh	r4, [r0, #0]
    adv_itvl_max = le16toh(cmd->max_interval);
   1fc16:	8845      	ldrh	r5, [r0, #2]
    adv_filter_policy = cmd->filter_policy;
   1fc18:	7b86      	ldrb	r6, [r0, #14]
    switch (cmd->type) {
   1fc1a:	7902      	ldrb	r2, [r0, #4]
   1fc1c:	2a04      	cmp	r2, #4
   1fc1e:	d85b      	bhi.n	1fcd8 <ble_ll_adv_set_adv_params+0xd4>
   1fc20:	e8df f002 	tbb	[pc, r2]
   1fc24:	54523c03 	.word	0x54523c03
   1fc28:	48          	.byte	0x48
   1fc29:	00          	.byte	0x00
   1fc2a:	2213      	movs	r2, #19
    if (!(props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED)) {
   1fc2c:	f012 0f08 	tst.w	r2, #8
   1fc30:	d10b      	bne.n	1fc4a <ble_ll_adv_set_adv_params+0x46>
        if ((adv_itvl_min > adv_itvl_max) ||
   1fc32:	42ac      	cmp	r4, r5
   1fc34:	d852      	bhi.n	1fcdc <ble_ll_adv_set_adv_params+0xd8>
   1fc36:	2c1f      	cmp	r4, #31
   1fc38:	d952      	bls.n	1fce0 <ble_ll_adv_set_adv_params+0xdc>
                (adv_itvl_min < BLE_HCI_ADV_ITVL_MIN) ||
   1fc3a:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
   1fc3e:	d851      	bhi.n	1fce4 <ble_ll_adv_set_adv_params+0xe0>
                (adv_itvl_min > BLE_HCI_ADV_ITVL_MAX) ||
   1fc40:	2d1f      	cmp	r5, #31
   1fc42:	d951      	bls.n	1fce8 <ble_ll_adv_set_adv_params+0xe4>
                (adv_itvl_max < BLE_HCI_ADV_ITVL_MIN) ||
   1fc44:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
   1fc48:	d850      	bhi.n	1fcec <ble_ll_adv_set_adv_params+0xe8>
    if ((cmd->own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) ||
   1fc4a:	7959      	ldrb	r1, [r3, #5]
   1fc4c:	2903      	cmp	r1, #3
   1fc4e:	d84f      	bhi.n	1fcf0 <ble_ll_adv_set_adv_params+0xec>
        (cmd->peer_addr_type > BLE_HCI_ADV_PEER_ADDR_MAX)) {
   1fc50:	7999      	ldrb	r1, [r3, #6]
    if ((cmd->own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) ||
   1fc52:	2901      	cmp	r1, #1
   1fc54:	d84e      	bhi.n	1fcf4 <ble_ll_adv_set_adv_params+0xf0>
    advsm->adv_txpwr = g_ble_ll_tx_power;
   1fc56:	492c      	ldr	r1, [pc, #176]	; (1fd08 <ble_ll_adv_set_adv_params+0x104>)
   1fc58:	7808      	ldrb	r0, [r1, #0]
   1fc5a:	492a      	ldr	r1, [pc, #168]	; (1fd04 <ble_ll_adv_set_adv_params+0x100>)
   1fc5c:	7248      	strb	r0, [r1, #9]
    if (cmd->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   1fc5e:	7959      	ldrb	r1, [r3, #5]
   1fc60:	2901      	cmp	r1, #1
   1fc62:	d906      	bls.n	1fc72 <ble_ll_adv_set_adv_params+0x6e>
        memcpy(advsm->peer_addr, cmd->peer_addr, BLE_DEV_ADDR_LEN);
   1fc64:	4619      	mov	r1, r3
   1fc66:	4f27      	ldr	r7, [pc, #156]	; (1fd04 <ble_ll_adv_set_adv_params+0x100>)
   1fc68:	f851 0f07 	ldr.w	r0, [r1, #7]!
   1fc6c:	6338      	str	r0, [r7, #48]	; 0x30
   1fc6e:	8889      	ldrh	r1, [r1, #4]
   1fc70:	86b9      	strh	r1, [r7, #52]	; 0x34
    if (((cmd->chan_map & 0xF8) != 0) || (cmd->chan_map == 0)) {
   1fc72:	7b58      	ldrb	r0, [r3, #13]
   1fc74:	f010 0ff8 	tst.w	r0, #248	; 0xf8
   1fc78:	d13e      	bne.n	1fcf8 <ble_ll_adv_set_adv_params+0xf4>
   1fc7a:	2800      	cmp	r0, #0
   1fc7c:	d03e      	beq.n	1fcfc <ble_ll_adv_set_adv_params+0xf8>
    if (adv_filter_policy > BLE_HCI_ADV_FILT_MAX) {
   1fc7e:	2e03      	cmp	r6, #3
   1fc80:	d83e      	bhi.n	1fd00 <ble_ll_adv_set_adv_params+0xfc>
    advsm->own_addr_type = cmd->own_addr_type;
   1fc82:	795f      	ldrb	r7, [r3, #5]
   1fc84:	491f      	ldr	r1, [pc, #124]	; (1fd04 <ble_ll_adv_set_adv_params+0x100>)
   1fc86:	710f      	strb	r7, [r1, #4]
    advsm->peer_addr_type = cmd->peer_addr_type;
   1fc88:	799b      	ldrb	r3, [r3, #6]
   1fc8a:	714b      	strb	r3, [r1, #5]
    advsm->adv_filter_policy = adv_filter_policy;
   1fc8c:	70ce      	strb	r6, [r1, #3]
    advsm->adv_chanmask = cmd->chan_map;
   1fc8e:	7088      	strb	r0, [r1, #2]
    advsm->adv_itvl_min = adv_itvl_min;
   1fc90:	81cc      	strh	r4, [r1, #14]
    advsm->adv_itvl_max = adv_itvl_max;
   1fc92:	820d      	strh	r5, [r1, #16]
    advsm->props = props;
   1fc94:	818a      	strh	r2, [r1, #12]
    return 0;
   1fc96:	2000      	movs	r0, #0
}
   1fc98:	bcf0      	pop	{r4, r5, r6, r7}
   1fc9a:	4770      	bx	lr
        memcpy(advsm->peer_addr, cmd->peer_addr, BLE_DEV_ADDR_LEN);
   1fc9c:	461a      	mov	r2, r3
   1fc9e:	4c19      	ldr	r4, [pc, #100]	; (1fd04 <ble_ll_adv_set_adv_params+0x100>)
   1fca0:	f852 0f07 	ldr.w	r0, [r2, #7]!
   1fca4:	6320      	str	r0, [r4, #48]	; 0x30
   1fca6:	8892      	ldrh	r2, [r2, #4]
   1fca8:	86a2      	strh	r2, [r4, #52]	; 0x34
        adv_filter_policy = BLE_HCI_ADV_FILT_NONE;
   1fcaa:	460e      	mov	r6, r1
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_HD_DIR ;
   1fcac:	221d      	movs	r2, #29
        adv_itvl_max = 0;
   1fcae:	2500      	movs	r5, #0
        adv_itvl_min = 0;
   1fcb0:	462c      	mov	r4, r5
        break;
   1fcb2:	e7bb      	b.n	1fc2c <ble_ll_adv_set_adv_params+0x28>
        memcpy(advsm->peer_addr, cmd->peer_addr, BLE_DEV_ADDR_LEN);
   1fcb4:	461a      	mov	r2, r3
   1fcb6:	4e13      	ldr	r6, [pc, #76]	; (1fd04 <ble_ll_adv_set_adv_params+0x100>)
   1fcb8:	f852 0f07 	ldr.w	r0, [r2, #7]!
   1fcbc:	6330      	str	r0, [r6, #48]	; 0x30
   1fcbe:	8892      	ldrh	r2, [r2, #4]
   1fcc0:	86b2      	strh	r2, [r6, #52]	; 0x34
        adv_filter_policy = BLE_HCI_ADV_FILT_NONE;
   1fcc2:	460e      	mov	r6, r1
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_LD_DIR ;
   1fcc4:	2215      	movs	r2, #21
        break;
   1fcc6:	e7b1      	b.n	1fc2c <ble_ll_adv_set_adv_params+0x28>
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_SCAN;
   1fcc8:	2212      	movs	r2, #18
        break;
   1fcca:	e7af      	b.n	1fc2c <ble_ll_adv_set_adv_params+0x28>
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_NONCONN;
   1fccc:	2210      	movs	r2, #16
   1fcce:	e7ad      	b.n	1fc2c <ble_ll_adv_set_adv_params+0x28>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1fcd0:	2012      	movs	r0, #18
   1fcd2:	4770      	bx	lr
        return BLE_ERR_CMD_DISALLOWED;
   1fcd4:	200c      	movs	r0, #12
}
   1fcd6:	4770      	bx	lr
    switch (cmd->type) {
   1fcd8:	2012      	movs	r0, #18
   1fcda:	e7dd      	b.n	1fc98 <ble_ll_adv_set_adv_params+0x94>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   1fcdc:	2012      	movs	r0, #18
   1fcde:	e7db      	b.n	1fc98 <ble_ll_adv_set_adv_params+0x94>
   1fce0:	2012      	movs	r0, #18
   1fce2:	e7d9      	b.n	1fc98 <ble_ll_adv_set_adv_params+0x94>
   1fce4:	2012      	movs	r0, #18
   1fce6:	e7d7      	b.n	1fc98 <ble_ll_adv_set_adv_params+0x94>
   1fce8:	2012      	movs	r0, #18
   1fcea:	e7d5      	b.n	1fc98 <ble_ll_adv_set_adv_params+0x94>
   1fcec:	2012      	movs	r0, #18
   1fcee:	e7d3      	b.n	1fc98 <ble_ll_adv_set_adv_params+0x94>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1fcf0:	2012      	movs	r0, #18
   1fcf2:	e7d1      	b.n	1fc98 <ble_ll_adv_set_adv_params+0x94>
   1fcf4:	2012      	movs	r0, #18
   1fcf6:	e7cf      	b.n	1fc98 <ble_ll_adv_set_adv_params+0x94>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1fcf8:	2012      	movs	r0, #18
   1fcfa:	e7cd      	b.n	1fc98 <ble_ll_adv_set_adv_params+0x94>
   1fcfc:	2012      	movs	r0, #18
   1fcfe:	e7cb      	b.n	1fc98 <ble_ll_adv_set_adv_params+0x94>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1fd00:	2012      	movs	r0, #18
   1fd02:	e7c9      	b.n	1fc98 <ble_ll_adv_set_adv_params+0x94>
   1fd04:	1000435c 	.word	0x1000435c
   1fd08:	10004348 	.word	0x10004348

0001fd0c <ble_ll_adv_read_txpwr>:
    rsp->power_level = g_ble_ll_tx_power;
   1fd0c:	4b03      	ldr	r3, [pc, #12]	; (1fd1c <ble_ll_adv_read_txpwr+0x10>)
   1fd0e:	f993 3000 	ldrsb.w	r3, [r3]
   1fd12:	7003      	strb	r3, [r0, #0]
    *rsplen = sizeof(*rsp);
   1fd14:	2301      	movs	r3, #1
   1fd16:	700b      	strb	r3, [r1, #0]
}
   1fd18:	2000      	movs	r0, #0
   1fd1a:	4770      	bx	lr
   1fd1c:	10004348 	.word	0x10004348

0001fd20 <ble_ll_hci_adv_set_enable>:
    if (len != sizeof(*cmd)) {
   1fd20:	2901      	cmp	r1, #1
   1fd22:	d001      	beq.n	1fd28 <ble_ll_hci_adv_set_enable+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1fd24:	2012      	movs	r0, #18
}
   1fd26:	4770      	bx	lr
{
   1fd28:	b508      	push	{r3, lr}
    return ble_ll_adv_set_enable(0, cmd->enable, -1, 0);
   1fd2a:	2300      	movs	r3, #0
   1fd2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1fd30:	7801      	ldrb	r1, [r0, #0]
   1fd32:	4618      	mov	r0, r3
   1fd34:	f7ff fca6 	bl	1f684 <ble_ll_adv_set_enable>
}
   1fd38:	bd08      	pop	{r3, pc}

0001fd3a <ble_ll_hci_set_scan_rsp_data>:
    if ((len != sizeof(*cmd)) || (cmd->scan_rsp_len > sizeof(cmd->scan_rsp))) {
   1fd3a:	2920      	cmp	r1, #32
   1fd3c:	d109      	bne.n	1fd52 <ble_ll_hci_set_scan_rsp_data+0x18>
   1fd3e:	7801      	ldrb	r1, [r0, #0]
   1fd40:	291f      	cmp	r1, #31
   1fd42:	d808      	bhi.n	1fd56 <ble_ll_hci_set_scan_rsp_data+0x1c>
{
   1fd44:	b508      	push	{r3, lr}
    return ble_ll_adv_set_scan_rsp_data(cmd->scan_rsp, cmd->scan_rsp_len, 0,
   1fd46:	2303      	movs	r3, #3
   1fd48:	2200      	movs	r2, #0
   1fd4a:	3001      	adds	r0, #1
   1fd4c:	f7ff fce6 	bl	1f71c <ble_ll_adv_set_scan_rsp_data>
}
   1fd50:	bd08      	pop	{r3, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1fd52:	2012      	movs	r0, #18
   1fd54:	4770      	bx	lr
   1fd56:	2012      	movs	r0, #18
}
   1fd58:	4770      	bx	lr

0001fd5a <ble_ll_hci_set_adv_data>:
    if ((len != sizeof(*cmd)) || (cmd->adv_data_len > sizeof(cmd->adv_data))) {
   1fd5a:	2920      	cmp	r1, #32
   1fd5c:	d109      	bne.n	1fd72 <ble_ll_hci_set_adv_data+0x18>
   1fd5e:	7801      	ldrb	r1, [r0, #0]
   1fd60:	291f      	cmp	r1, #31
   1fd62:	d808      	bhi.n	1fd76 <ble_ll_hci_set_adv_data+0x1c>
{
   1fd64:	b508      	push	{r3, lr}
    return ble_ll_adv_set_adv_data(cmd->adv_data, cmd->adv_data_len, 0,
   1fd66:	2303      	movs	r3, #3
   1fd68:	2200      	movs	r2, #0
   1fd6a:	3001      	adds	r0, #1
   1fd6c:	f7ff fd27 	bl	1f7be <ble_ll_adv_set_adv_data>
}
   1fd70:	bd08      	pop	{r3, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1fd72:	2012      	movs	r0, #18
   1fd74:	4770      	bx	lr
   1fd76:	2012      	movs	r0, #18
}
   1fd78:	4770      	bx	lr
	...

0001fd7c <ble_ll_adv_rx_pkt_in>:
{
   1fd7c:	b510      	push	{r4, lr}
   1fd7e:	4614      	mov	r4, r2
    if (!advsm->adv_enabled) {
   1fd80:	4a0e      	ldr	r2, [pc, #56]	; (1fdbc <ble_ll_adv_rx_pkt_in+0x40>)
   1fd82:	7812      	ldrb	r2, [r2, #0]
   1fd84:	b162      	cbz	r2, 1fda0 <ble_ll_adv_rx_pkt_in+0x24>
   1fd86:	460b      	mov	r3, r1
    if (BLE_MBUF_HDR_CRC_OK(hdr)) {
   1fd88:	8822      	ldrh	r2, [r4, #0]
   1fd8a:	f012 0f80 	tst.w	r2, #128	; 0x80
   1fd8e:	d003      	beq.n	1fd98 <ble_ll_adv_rx_pkt_in+0x1c>
        if (ptype == BLE_ADV_PDU_TYPE_CONNECT_IND) {
   1fd90:	2805      	cmp	r0, #5
   1fd92:	d006      	beq.n	1fda2 <ble_ll_adv_rx_pkt_in+0x26>
            if ((ptype == BLE_ADV_PDU_TYPE_SCAN_REQ) &&
   1fd94:	2803      	cmp	r0, #3
   1fd96:	d00c      	beq.n	1fdb2 <ble_ll_adv_rx_pkt_in+0x36>
        ble_ll_adv_make_done(advsm, hdr);
   1fd98:	4621      	mov	r1, r4
   1fd9a:	4808      	ldr	r0, [pc, #32]	; (1fdbc <ble_ll_adv_rx_pkt_in+0x40>)
   1fd9c:	f7ff feea 	bl	1fb74 <ble_ll_adv_make_done>
}
   1fda0:	bd10      	pop	{r4, pc}
            if (ble_ll_adv_conn_req_rxd(rxbuf, hdr, advsm)) {
   1fda2:	4a06      	ldr	r2, [pc, #24]	; (1fdbc <ble_ll_adv_rx_pkt_in+0x40>)
   1fda4:	4621      	mov	r1, r4
   1fda6:	4618      	mov	r0, r3
   1fda8:	f7ff fd68 	bl	1f87c <ble_ll_adv_conn_req_rxd>
   1fdac:	2800      	cmp	r0, #0
   1fdae:	d1f7      	bne.n	1fda0 <ble_ll_adv_rx_pkt_in+0x24>
   1fdb0:	e7f2      	b.n	1fd98 <ble_ll_adv_rx_pkt_in+0x1c>
            if ((ptype == BLE_ADV_PDU_TYPE_SCAN_REQ) &&
   1fdb2:	f012 0f10 	tst.w	r2, #16
   1fdb6:	d1f3      	bne.n	1fda0 <ble_ll_adv_rx_pkt_in+0x24>
   1fdb8:	e7ee      	b.n	1fd98 <ble_ll_adv_rx_pkt_in+0x1c>
   1fdba:	bf00      	nop
   1fdbc:	1000435c 	.word	0x1000435c

0001fdc0 <ble_ll_adv_can_chg_whitelist>:
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   1fdc0:	2300      	movs	r3, #0
   1fdc2:	2b00      	cmp	r3, #0
   1fdc4:	dd01      	ble.n	1fdca <ble_ll_adv_can_chg_whitelist+0xa>
    rc = 1;
   1fdc6:	2001      	movs	r0, #1
   1fdc8:	4770      	bx	lr
        if (advsm->adv_enabled &&
   1fdca:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   1fdce:	008a      	lsls	r2, r1, #2
   1fdd0:	4906      	ldr	r1, [pc, #24]	; (1fdec <ble_ll_adv_can_chg_whitelist+0x2c>)
   1fdd2:	5c8a      	ldrb	r2, [r1, r2]
   1fdd4:	b132      	cbz	r2, 1fde4 <ble_ll_adv_can_chg_whitelist+0x24>
            (advsm->adv_filter_policy != BLE_HCI_ADV_FILT_NONE)) {
   1fdd6:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   1fdda:	0091      	lsls	r1, r2, #2
   1fddc:	4a03      	ldr	r2, [pc, #12]	; (1fdec <ble_ll_adv_can_chg_whitelist+0x2c>)
   1fdde:	440a      	add	r2, r1
   1fde0:	78d2      	ldrb	r2, [r2, #3]
        if (advsm->adv_enabled &&
   1fde2:	b90a      	cbnz	r2, 1fde8 <ble_ll_adv_can_chg_whitelist+0x28>
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   1fde4:	3301      	adds	r3, #1
   1fde6:	e7ec      	b.n	1fdc2 <ble_ll_adv_can_chg_whitelist+0x2>
            rc = 0;
   1fde8:	2000      	movs	r0, #0
}
   1fdea:	4770      	bx	lr
   1fdec:	1000435c 	.word	0x1000435c

0001fdf0 <ble_ll_adv_send_conn_comp_ev>:
{
   1fdf0:	b510      	push	{r4, lr}
    BLE_LL_ASSERT(advsm->conn_comp_ev != NULL);
   1fdf2:	4b0a      	ldr	r3, [pc, #40]	; (1fe1c <ble_ll_adv_send_conn_comp_ev+0x2c>)
   1fdf4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   1fdf6:	b13a      	cbz	r2, 1fe08 <ble_ll_adv_send_conn_comp_ev+0x18>
    ble_ll_conn_comp_event_send(connsm, BLE_ERR_SUCCESS, advsm->conn_comp_ev,
   1fdf8:	4c08      	ldr	r4, [pc, #32]	; (1fe1c <ble_ll_adv_send_conn_comp_ev+0x2c>)
   1fdfa:	4623      	mov	r3, r4
   1fdfc:	2100      	movs	r1, #0
   1fdfe:	f001 fdc5 	bl	2198c <ble_ll_conn_comp_event_send>
    advsm->conn_comp_ev = NULL;
   1fe02:	2300      	movs	r3, #0
   1fe04:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   1fe06:	bd10      	pop	{r4, pc}
    BLE_LL_ASSERT(advsm->conn_comp_ev != NULL);
   1fe08:	f7f4 fc74 	bl	146f4 <hal_debugger_connected>
   1fe0c:	b100      	cbz	r0, 1fe10 <ble_ll_adv_send_conn_comp_ev+0x20>
   1fe0e:	be01      	bkpt	0x0001
   1fe10:	2300      	movs	r3, #0
   1fe12:	461a      	mov	r2, r3
   1fe14:	4619      	mov	r1, r3
   1fe16:	4618      	mov	r0, r3
   1fe18:	f7f8 ff8a 	bl	18d30 <__assert_func>
   1fe1c:	1000435c 	.word	0x1000435c

0001fe20 <ble_ll_adv_get_local_rpa>:
{
   1fe20:	b510      	push	{r4, lr}
    if (advsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   1fe22:	7903      	ldrb	r3, [r0, #4]
   1fe24:	2b01      	cmp	r3, #1
   1fe26:	d90c      	bls.n	1fe42 <ble_ll_adv_get_local_rpa+0x22>
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) &&
   1fe28:	8943      	ldrh	r3, [r0, #10]
   1fe2a:	f013 0f01 	tst.w	r3, #1
   1fe2e:	d00a      	beq.n	1fe46 <ble_ll_adv_get_local_rpa+0x26>
                                    ble_ll_is_rpa(advsm->adva, 1)) {
   1fe30:	f100 0424 	add.w	r4, r0, #36	; 0x24
   1fe34:	2101      	movs	r1, #1
   1fe36:	4620      	mov	r0, r4
   1fe38:	f7fe feff 	bl	1ec3a <ble_ll_is_rpa>
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) &&
   1fe3c:	b920      	cbnz	r0, 1fe48 <ble_ll_adv_get_local_rpa+0x28>
    uint8_t *rpa = NULL;
   1fe3e:	2400      	movs	r4, #0
   1fe40:	e002      	b.n	1fe48 <ble_ll_adv_get_local_rpa+0x28>
   1fe42:	2400      	movs	r4, #0
   1fe44:	e000      	b.n	1fe48 <ble_ll_adv_get_local_rpa+0x28>
   1fe46:	2400      	movs	r4, #0
}
   1fe48:	4620      	mov	r0, r4
   1fe4a:	bd10      	pop	{r4, pc}

0001fe4c <ble_ll_adv_get_peer_rpa>:
}
   1fe4c:	302a      	adds	r0, #42	; 0x2a
   1fe4e:	4770      	bx	lr

0001fe50 <ble_ll_adv_reset>:
{
   1fe50:	b538      	push	{r3, r4, r5, lr}
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   1fe52:	2400      	movs	r4, #0
   1fe54:	2c00      	cmp	r4, #0
   1fe56:	dd00      	ble.n	1fe5a <ble_ll_adv_reset+0xa>
}
   1fe58:	bd38      	pop	{r3, r4, r5, pc}
        advsm = &g_ble_ll_adv_sm[i];
   1fe5a:	ebc4 1244 	rsb	r2, r4, r4, lsl #5
   1fe5e:	0093      	lsls	r3, r2, #2
   1fe60:	4d07      	ldr	r5, [pc, #28]	; (1fe80 <ble_ll_adv_reset+0x30>)
   1fe62:	441d      	add	r5, r3
        ble_ll_adv_sm_stop(advsm);
   1fe64:	4628      	mov	r0, r5
   1fe66:	f7ff fbd7 	bl	1f618 <ble_ll_adv_sm_stop>
        os_mbuf_free_chain(advsm->adv_data);
   1fe6a:	6be8      	ldr	r0, [r5, #60]	; 0x3c
   1fe6c:	f7f9 fbaf 	bl	195ce <os_mbuf_free_chain>
        os_mbuf_free_chain(advsm->scan_rsp_data);
   1fe70:	6c68      	ldr	r0, [r5, #68]	; 0x44
   1fe72:	f7f9 fbac 	bl	195ce <os_mbuf_free_chain>
        ble_ll_adv_sm_init(advsm);
   1fe76:	4628      	mov	r0, r5
   1fe78:	f7ff fdbc 	bl	1f9f4 <ble_ll_adv_sm_init>
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   1fe7c:	3401      	adds	r4, #1
   1fe7e:	e7e9      	b.n	1fe54 <ble_ll_adv_reset+0x4>
   1fe80:	1000435c 	.word	0x1000435c

0001fe84 <ble_ll_adv_enabled>:
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1fe84:	2300      	movs	r3, #0
   1fe86:	2b00      	cmp	r3, #0
   1fe88:	dd01      	ble.n	1fe8e <ble_ll_adv_enabled+0xa>
    return 0;
   1fe8a:	2000      	movs	r0, #0
   1fe8c:	4770      	bx	lr
        if (g_ble_ll_adv_sm[i].adv_enabled) {
   1fe8e:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   1fe92:	008a      	lsls	r2, r1, #2
   1fe94:	4903      	ldr	r1, [pc, #12]	; (1fea4 <ble_ll_adv_enabled+0x20>)
   1fe96:	5c8a      	ldrb	r2, [r1, r2]
   1fe98:	b90a      	cbnz	r2, 1fe9e <ble_ll_adv_enabled+0x1a>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1fe9a:	3301      	adds	r3, #1
   1fe9c:	e7f3      	b.n	1fe86 <ble_ll_adv_enabled+0x2>
            return 1;
   1fe9e:	2001      	movs	r0, #1
}
   1fea0:	4770      	bx	lr
   1fea2:	bf00      	nop
   1fea4:	1000435c 	.word	0x1000435c

0001fea8 <ble_ll_adv_init>:
 * Initialize the advertising functionality of a BLE device. This should
 * be called once on initialization
 */
void
ble_ll_adv_init(void)
{
   1fea8:	b510      	push	{r4, lr}
    int i;

    /* Set default advertising parameters */
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   1feaa:	2400      	movs	r4, #0
   1feac:	2c00      	cmp	r4, #0
   1feae:	dd00      	ble.n	1feb2 <ble_ll_adv_init+0xa>
        ble_ll_adv_sm_init(&g_ble_ll_adv_sm[i]);
    }
}
   1feb0:	bd10      	pop	{r4, pc}
        ble_ll_adv_sm_init(&g_ble_ll_adv_sm[i]);
   1feb2:	ebc4 1244 	rsb	r2, r4, r4, lsl #5
   1feb6:	0093      	lsls	r3, r2, #2
   1feb8:	4802      	ldr	r0, [pc, #8]	; (1fec4 <ble_ll_adv_init+0x1c>)
   1feba:	4418      	add	r0, r3
   1febc:	f7ff fd9a 	bl	1f9f4 <ble_ll_adv_sm_init>
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   1fec0:	3401      	adds	r4, #1
   1fec2:	e7f3      	b.n	1feac <ble_ll_adv_init+0x4>
   1fec4:	1000435c 	.word	0x1000435c

0001fec8 <ble_ll_conn_calc_dci_csa1>:
    return connsm;
}

static uint8_t
ble_ll_conn_calc_dci_csa1(struct ble_ll_conn_sm *conn)
{
   1fec8:	b508      	push	{r3, lr}
   1feca:	4601      	mov	r1, r0
    uint8_t curchan;
    uint8_t remap_index;
    uint8_t bitpos;

    /* Get next unmapped channel */
    curchan = conn->last_unmapped_chan + conn->hop_inc;
   1fecc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   1fed0:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
   1fed4:	4403      	add	r3, r0
   1fed6:	b2d8      	uxtb	r0, r3
    if (curchan > BLE_PHY_NUM_DATA_CHANS) {
   1fed8:	2825      	cmp	r0, #37	; 0x25
   1feda:	d902      	bls.n	1fee2 <ble_ll_conn_calc_dci_csa1+0x1a>
        curchan -= BLE_PHY_NUM_DATA_CHANS;
   1fedc:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   1fee0:	b2d8      	uxtb	r0, r3
    }

    /* Save unmapped channel */
    conn->last_unmapped_chan = curchan;
   1fee2:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c

    /* Is this a valid channel? */
    bitpos = 1 << (curchan & 0x07);
   1fee6:	f000 0207 	and.w	r2, r0, #7
   1feea:	2301      	movs	r3, #1
   1feec:	4093      	lsls	r3, r2
    if (conn->chanmap[curchan >> 3] & bitpos) {
   1feee:	f3c0 02c7 	ubfx	r2, r0, #3, #8
   1fef2:	440a      	add	r2, r1
   1fef4:	7f12      	ldrb	r2, [r2, #28]
   1fef6:	4213      	tst	r3, r2
   1fef8:	d000      	beq.n	1fefc <ble_ll_conn_calc_dci_csa1+0x34>

    /* Calculate remap index */
    remap_index = curchan % conn->num_used_chans;

    return ble_ll_utils_remapped_channel(remap_index, conn->chanmap);
}
   1fefa:	bd08      	pop	{r3, pc}
    remap_index = curchan % conn->num_used_chans;
   1fefc:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
   1ff00:	fbb0 f3f2 	udiv	r3, r0, r2
   1ff04:	fb02 0013 	mls	r0, r2, r3, r0
    return ble_ll_utils_remapped_channel(remap_index, conn->chanmap);
   1ff08:	311c      	adds	r1, #28
   1ff0a:	b2c0      	uxtb	r0, r0
   1ff0c:	f006 f890 	bl	26030 <ble_ll_utils_remapped_channel>
   1ff10:	e7f3      	b.n	1fefa <ble_ll_conn_calc_dci_csa1+0x32>
	...

0001ff14 <ble_ll_conn_halt>:
{
   1ff14:	b508      	push	{r3, lr}
    ble_phy_disable();
   1ff16:	f006 f9e1 	bl	262dc <ble_phy_disable>
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1ff1a:	2000      	movs	r0, #0
   1ff1c:	f7fe ff5a 	bl	1edd4 <ble_ll_state_set>
    g_ble_ll_conn_cur_sm = NULL;
   1ff20:	4b01      	ldr	r3, [pc, #4]	; (1ff28 <ble_ll_conn_halt+0x14>)
   1ff22:	2200      	movs	r2, #0
   1ff24:	601a      	str	r2, [r3, #0]
}
   1ff26:	bd08      	pop	{r3, pc}
   1ff28:	10004468 	.word	0x10004468

0001ff2c <ble_ll_conn_current_sm_over>:
{
   1ff2c:	b510      	push	{r4, lr}
   1ff2e:	4604      	mov	r4, r0
    ble_ll_conn_halt();
   1ff30:	f7ff fff0 	bl	1ff14 <ble_ll_conn_halt>
    if (connsm) {
   1ff34:	b11c      	cbz	r4, 1ff3e <ble_ll_conn_current_sm_over+0x12>
        ble_ll_event_send(&connsm->conn_ev_end);
   1ff36:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1ff3a:	f7fe ff57 	bl	1edec <ble_ll_event_send>
}
   1ff3e:	bd10      	pop	{r4, pc}

0001ff40 <ble_ll_conn_rxend_unencrypt>:
}

#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
static void
ble_ll_conn_rxend_unencrypt(void *arg)
{
   1ff40:	b508      	push	{r3, lr}
    struct ble_ll_conn_sm *connsm;

    connsm = (struct ble_ll_conn_sm *)arg;
    CONN_F_ENCRYPTED(connsm) = 0;
   1ff42:	7882      	ldrb	r2, [r0, #2]
   1ff44:	f36f 0241 	bfc	r2, #1, #1
   1ff48:	7082      	strb	r2, [r0, #2]
    ble_ll_conn_current_sm_over(connsm);
   1ff4a:	f7ff ffef 	bl	1ff2c <ble_ll_conn_current_sm_over>
}
   1ff4e:	bd08      	pop	{r3, pc}

0001ff50 <ble_ll_conn_txend_encrypt>:
{
   1ff50:	b508      	push	{r3, lr}
    CONN_F_ENCRYPTED(connsm) = 1;
   1ff52:	7882      	ldrb	r2, [r0, #2]
   1ff54:	f042 0202 	orr.w	r2, r2, #2
   1ff58:	7082      	strb	r2, [r0, #2]
    ble_ll_conn_current_sm_over(connsm);
   1ff5a:	f7ff ffe7 	bl	1ff2c <ble_ll_conn_current_sm_over>
}
   1ff5e:	bd08      	pop	{r3, pc}

0001ff60 <ble_ll_conn_wait_txend>:
{
   1ff60:	b508      	push	{r3, lr}
    ble_ll_conn_current_sm_over(connsm);
   1ff62:	f7ff ffe3 	bl	1ff2c <ble_ll_conn_current_sm_over>
}
   1ff66:	bd08      	pop	{r3, pc}

0001ff68 <ble_ll_conn_central_common_init>:
#endif

#if MYNEWT_VAL(BLE_LL_ROLE_CENTRAL)
static void
ble_ll_conn_central_common_init(struct ble_ll_conn_sm *connsm)
{
   1ff68:	b510      	push	{r4, lr}
   1ff6a:	4604      	mov	r4, r0

    /* Set central role */
    connsm->conn_role = BLE_LL_CONN_ROLE_CENTRAL;
   1ff6c:	2301      	movs	r3, #1
   1ff6e:	71c3      	strb	r3, [r0, #7]

    /*
     * XXX: for now, we need twice the transmit window as our calculations
     * for the transmit window offset could be off.
     */
    connsm->tx_win_size = BLE_LL_CONN_TX_WIN_MIN + 1;
   1ff70:	2302      	movs	r3, #2
   1ff72:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
    connsm->tx_win_off = 0;
   1ff76:	2300      	movs	r3, #0
   1ff78:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
    connsm->central_sca = BLE_LL_SCA_ENUM;
   1ff7c:	2304      	movs	r3, #4
   1ff7e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

    /* Hop increment is a random value between 5 and 16. */
    connsm->hop_inc = (ble_ll_rand() % 12) + 5;
   1ff82:	f004 fa9f 	bl	244c4 <ble_ll_rand>
   1ff86:	4b10      	ldr	r3, [pc, #64]	; (1ffc8 <ble_ll_conn_central_common_init+0x60>)
   1ff88:	fba3 2300 	umull	r2, r3, r3, r0
   1ff8c:	08db      	lsrs	r3, r3, #3
   1ff8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1ff92:	eba0 0383 	sub.w	r3, r0, r3, lsl #2
   1ff96:	3305      	adds	r3, #5
   1ff98:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a

    /* Set channel map to map requested by host */
    connsm->num_used_chans = g_ble_ll_conn_params.num_used_chans;
   1ff9c:	4b0b      	ldr	r3, [pc, #44]	; (1ffcc <ble_ll_conn_central_common_init+0x64>)
   1ff9e:	795a      	ldrb	r2, [r3, #5]
   1ffa0:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
    memcpy(connsm->chanmap, g_ble_ll_conn_params.central_chan_map,
   1ffa4:	6818      	ldr	r0, [r3, #0]
   1ffa6:	61e0      	str	r0, [r4, #28]
   1ffa8:	791b      	ldrb	r3, [r3, #4]
   1ffaa:	f884 3020 	strb.w	r3, [r4, #32]
           BLE_LL_CONN_CHMAP_LEN);

    /*  Calculate random access address and crc initialization value */
    connsm->access_addr = ble_ll_utils_calc_access_addr();
   1ffae:	f005 ffe5 	bl	25f7c <ble_ll_utils_calc_access_addr>
   1ffb2:	6520      	str	r0, [r4, #80]	; 0x50
    connsm->crcinit = ble_ll_rand() & 0xffffff;
   1ffb4:	f004 fa86 	bl	244c4 <ble_ll_rand>
   1ffb8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1ffbc:	6560      	str	r0, [r4, #84]	; 0x54

    /* Set initial schedule callback */
    connsm->conn_sch.sched_cb = ble_ll_conn_event_start_cb;
   1ffbe:	4b04      	ldr	r3, [pc, #16]	; (1ffd0 <ble_ll_conn_central_common_init+0x68>)
   1ffc0:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
}
   1ffc4:	bd10      	pop	{r4, pc}
   1ffc6:	bf00      	nop
   1ffc8:	aaaaaaab 	.word	0xaaaaaaab
   1ffcc:	10004474 	.word	0x10004474
   1ffd0:	00020605 	.word	0x00020605

0001ffd4 <ble_ll_init_get_conn_comp_ev>:
{
   1ffd4:	b508      	push	{r3, lr}
    evbuf = g_ble_ll_conn_comp_ev;
   1ffd6:	4b08      	ldr	r3, [pc, #32]	; (1fff8 <ble_ll_init_get_conn_comp_ev+0x24>)
   1ffd8:	6818      	ldr	r0, [r3, #0]
    BLE_LL_ASSERT(evbuf != NULL);
   1ffda:	b118      	cbz	r0, 1ffe4 <ble_ll_init_get_conn_comp_ev+0x10>
    g_ble_ll_conn_comp_ev = NULL;
   1ffdc:	4b06      	ldr	r3, [pc, #24]	; (1fff8 <ble_ll_init_get_conn_comp_ev+0x24>)
   1ffde:	2200      	movs	r2, #0
   1ffe0:	601a      	str	r2, [r3, #0]
}
   1ffe2:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(evbuf != NULL);
   1ffe4:	f7f4 fb86 	bl	146f4 <hal_debugger_connected>
   1ffe8:	b100      	cbz	r0, 1ffec <ble_ll_init_get_conn_comp_ev+0x18>
   1ffea:	be01      	bkpt	0x0001
   1ffec:	2300      	movs	r3, #0
   1ffee:	461a      	mov	r2, r3
   1fff0:	4619      	mov	r1, r3
   1fff2:	4618      	mov	r0, r3
   1fff4:	f7f8 fe9c 	bl	18d30 <__assert_func>
   1fff8:	10004460 	.word	0x10004460

0001fffc <ble_ll_conn_start_rx_encrypt>:
{
   1fffc:	b500      	push	{lr}
   1fffe:	b083      	sub	sp, #12
    CONN_F_ENCRYPTED(connsm) = 1;
   20000:	7883      	ldrb	r3, [r0, #2]
   20002:	f043 0302 	orr.w	r3, r3, #2
   20006:	7083      	strb	r3, [r0, #2]
                           !CONN_IS_CENTRAL(connsm));
   20008:	79c3      	ldrb	r3, [r0, #7]
    ble_phy_encrypt_enable(connsm->enc_data.rx_pkt_cntr,
   2000a:	3b01      	subs	r3, #1
   2000c:	bf18      	it	ne
   2000e:	2301      	movne	r3, #1
   20010:	9300      	str	r3, [sp, #0]
   20012:	f500 73ac 	add.w	r3, r0, #344	; 0x158
   20016:	f500 7298 	add.w	r2, r0, #304	; 0x130
   2001a:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
   2001e:	2100      	movs	r1, #0
   20020:	f006 f90c 	bl	2623c <ble_phy_encrypt_enable>
}
   20024:	b003      	add	sp, #12
   20026:	f85d fb04 	ldr.w	pc, [sp], #4

0002002a <ble_ll_conn_start_rx_unencrypt>:
{
   2002a:	b508      	push	{r3, lr}
    CONN_F_ENCRYPTED(connsm) = 0;
   2002c:	7883      	ldrb	r3, [r0, #2]
   2002e:	f36f 0341 	bfc	r3, #1, #1
   20032:	7083      	strb	r3, [r0, #2]
    ble_phy_encrypt_disable();
   20034:	f006 f904 	bl	26240 <ble_phy_encrypt_disable>
}
   20038:	bd08      	pop	{r3, pc}

0002003a <ble_ll_conn_continue_rx_encrypt>:
{
   2003a:	b508      	push	{r3, lr}
                                 !CONN_IS_CENTRAL(connsm));
   2003c:	79c2      	ldrb	r2, [r0, #7]
    ble_phy_encrypt_set_pkt_cntr(connsm->enc_data.rx_pkt_cntr,
   2003e:	3a01      	subs	r2, #1
   20040:	bf18      	it	ne
   20042:	2201      	movne	r2, #1
   20044:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
   20048:	2100      	movs	r1, #0
   2004a:	f006 f8f8 	bl	2623e <ble_phy_encrypt_set_pkt_cntr>
}
   2004e:	bd08      	pop	{r3, pc}

00020050 <ble_ll_conn_adjust_pyld_len>:
{
   20050:	b538      	push	{r3, r4, r5, lr}
   20052:	4604      	mov	r4, r0
   20054:	460d      	mov	r5, r1
    max_pyld_len = ble_ll_pdu_max_tx_octets_get(connsm->eff_max_tx_time,
   20056:	2101      	movs	r1, #1
   20058:	8b00      	ldrh	r0, [r0, #24]
   2005a:	f7fe ff1b 	bl	1ee94 <ble_ll_pdu_max_tx_octets_get>
    if (CONN_F_ENCRYPTED(connsm)) {
   2005e:	78a3      	ldrb	r3, [r4, #2]
   20060:	f013 0f02 	tst.w	r3, #2
   20064:	d001      	beq.n	2006a <ble_ll_conn_adjust_pyld_len+0x1a>
        max_pyld_len -= BLE_LL_DATA_MIC_LEN;
   20066:	1f03      	subs	r3, r0, #4
   20068:	b298      	uxth	r0, r3
    if (ret > connsm->eff_max_tx_octets) {
   2006a:	7b63      	ldrb	r3, [r4, #13]
   2006c:	42ab      	cmp	r3, r5
   2006e:	d300      	bcc.n	20072 <ble_ll_conn_adjust_pyld_len+0x22>
    ret = pyld_len;
   20070:	462b      	mov	r3, r5
    if (ret > max_pyld_len) {
   20072:	4298      	cmp	r0, r3
   20074:	d300      	bcc.n	20078 <ble_ll_conn_adjust_pyld_len+0x28>
   20076:	4618      	mov	r0, r3
}
   20078:	bd38      	pop	{r3, r4, r5, pc}

0002007a <ble_ll_conn_chk_csm_flags>:
{
   2007a:	b510      	push	{r4, lr}
   2007c:	4604      	mov	r4, r0
    if (connsm->csmflags.cfbit.send_ltk_req) {
   2007e:	7883      	ldrb	r3, [r0, #2]
   20080:	f013 0f01 	tst.w	r3, #1
   20084:	d114      	bne.n	200b0 <ble_ll_conn_chk_csm_flags+0x36>
    if (connsm->csmflags.cfbit.host_expects_upd_event) {
   20086:	7863      	ldrb	r3, [r4, #1]
   20088:	f013 0f02 	tst.w	r3, #2
   2008c:	d00f      	beq.n	200ae <ble_ll_conn_chk_csm_flags+0x34>
        if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_UPDATE)) {
   2008e:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
   20092:	f013 0f01 	tst.w	r3, #1
   20096:	d119      	bne.n	200cc <ble_ll_conn_chk_csm_flags+0x52>
            if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) {
   20098:	f013 0f40 	tst.w	r3, #64	; 0x40
   2009c:	d11c      	bne.n	200d8 <ble_ll_conn_chk_csm_flags+0x5e>
        update_status = BLE_ERR_SUCCESS;
   2009e:	2100      	movs	r1, #0
        ble_ll_hci_ev_conn_update(connsm, update_status);
   200a0:	4620      	mov	r0, r4
   200a2:	f003 fff6 	bl	24092 <ble_ll_hci_ev_conn_update>
        connsm->csmflags.cfbit.host_expects_upd_event = 0;
   200a6:	7863      	ldrb	r3, [r4, #1]
   200a8:	f36f 0341 	bfc	r3, #1, #1
   200ac:	7063      	strb	r3, [r4, #1]
}
   200ae:	bd10      	pop	{r4, pc}
        if (ble_ll_hci_ev_ltk_req(connsm)) {
   200b0:	f004 f84a 	bl	24148 <ble_ll_hci_ev_ltk_req>
   200b4:	b920      	cbnz	r0, 200c0 <ble_ll_conn_chk_csm_flags+0x46>
        connsm->csmflags.cfbit.send_ltk_req = 0;
   200b6:	78a3      	ldrb	r3, [r4, #2]
   200b8:	f36f 0300 	bfc	r3, #0, #1
   200bc:	70a3      	strb	r3, [r4, #2]
   200be:	e7e2      	b.n	20086 <ble_ll_conn_chk_csm_flags+0xc>
            ble_ll_ctrl_reject_ind_send(connsm, BLE_LL_CTRL_ENC_REQ,
   200c0:	2206      	movs	r2, #6
   200c2:	2103      	movs	r1, #3
   200c4:	4620      	mov	r0, r4
   200c6:	f003 fa89 	bl	235dc <ble_ll_ctrl_reject_ind_send>
   200ca:	e7f4      	b.n	200b6 <ble_ll_conn_chk_csm_flags+0x3c>
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_UPDATE);
   200cc:	2100      	movs	r1, #0
   200ce:	4620      	mov	r0, r4
   200d0:	f002 ff20 	bl	22f14 <ble_ll_ctrl_proc_stop>
        update_status = BLE_ERR_SUCCESS;
   200d4:	2100      	movs	r1, #0
   200d6:	e7e3      	b.n	200a0 <ble_ll_conn_chk_csm_flags+0x26>
                ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ);
   200d8:	2106      	movs	r1, #6
   200da:	4620      	mov	r0, r4
   200dc:	f002 ff1a 	bl	22f14 <ble_ll_ctrl_proc_stop>
                update_status = connsm->reject_reason;
   200e0:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
   200e4:	e7dc      	b.n	200a0 <ble_ll_conn_chk_csm_flags+0x26>
	...

000200e8 <ble_ll_conn_get_next_sched_time>:
{
   200e8:	b510      	push	{r4, lr}
   200ea:	b082      	sub	sp, #8
    ce_end = connsm->anchor_point + connsm->conn_itvl_ticks -
   200ec:	6f04      	ldr	r4, [r0, #112]	; 0x70
   200ee:	6f83      	ldr	r3, [r0, #120]	; 0x78
   200f0:	441c      	add	r4, r3
   200f2:	4b12      	ldr	r3, [pc, #72]	; (2013c <ble_ll_conn_get_next_sched_time+0x54>)
   200f4:	781b      	ldrb	r3, [r3, #0]
   200f6:	1ae4      	subs	r4, r4, r3
    rem_us = connsm->anchor_point_usecs;
   200f8:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    ble_ll_tmr_add_u(&ce_end, &rem_us, connsm->conn_itvl_usecs);
   200fc:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
}

static inline void
ble_ll_tmr_add_u(uint32_t *ticks, uint8_t *rem_us, uint8_t usecs)
{
    BLE_LL_ASSERT(usecs < USECS_PER_TICK);
   20100:	2a1e      	cmp	r2, #30
   20102:	d80f      	bhi.n	20124 <ble_ll_conn_get_next_sched_time+0x3c>

    *rem_us += usecs;
   20104:	4413      	add	r3, r2
   20106:	b2db      	uxtb	r3, r3
    if (*rem_us >= USECS_PER_TICK) {
   20108:	2b1e      	cmp	r3, #30
   2010a:	d900      	bls.n	2010e <ble_ll_conn_get_next_sched_time+0x26>
        *rem_us -= USECS_PER_TICK;
        *ticks += 1;
   2010c:	3401      	adds	r4, #1
    if (ble_ll_sched_next_time(&next_sched_time)) {
   2010e:	a801      	add	r0, sp, #4
   20110:	f005 ff04 	bl	25f1c <ble_ll_sched_next_time>
   20114:	b118      	cbz	r0, 2011e <ble_ll_conn_get_next_sched_time+0x36>
        if (LL_TMR_LT(next_sched_time, ce_end)) {
   20116:	9b01      	ldr	r3, [sp, #4]
   20118:	1b1a      	subs	r2, r3, r4
   2011a:	2a00      	cmp	r2, #0
   2011c:	db0c      	blt.n	20138 <ble_ll_conn_get_next_sched_time+0x50>
}
   2011e:	4620      	mov	r0, r4
   20120:	b002      	add	sp, #8
   20122:	bd10      	pop	{r4, pc}
    BLE_LL_ASSERT(usecs < USECS_PER_TICK);
   20124:	f7f4 fae6 	bl	146f4 <hal_debugger_connected>
   20128:	b100      	cbz	r0, 2012c <ble_ll_conn_get_next_sched_time+0x44>
   2012a:	be01      	bkpt	0x0001
   2012c:	2300      	movs	r3, #0
   2012e:	461a      	mov	r2, r3
   20130:	4619      	mov	r1, r3
   20132:	4618      	mov	r0, r3
   20134:	f7f8 fdfc 	bl	18d30 <__assert_func>
            ce_end = next_sched_time;
   20138:	461c      	mov	r4, r3
    return ce_end;
   2013a:	e7f0      	b.n	2011e <ble_ll_conn_get_next_sched_time+0x36>
   2013c:	10004930 	.word	0x10004930

00020140 <ble_ll_conn_tx_pdu>:
{
   20140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20144:	b08f      	sub	sp, #60	; 0x3c
   20146:	4604      	mov	r4, r0
    if (connsm->csmflags.cfbit.terminate_ind_rxd) {
   20148:	7806      	ldrb	r6, [r0, #0]
   2014a:	f016 0604 	ands.w	r6, r6, #4
   2014e:	d12f      	bne.n	201b0 <ble_ll_conn_tx_pdu+0x70>
    pkthdr = STAILQ_FIRST(&connsm->conn_txq);
   20150:	f8d0 a0ac 	ldr.w	sl, [r0, #172]	; 0xac
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm) && !pkthdr) {
   20154:	f8d0 50a8 	ldr.w	r5, [r0, #168]	; 0xa8
   20158:	2d00      	cmp	r5, #0
   2015a:	d061      	beq.n	20220 <ble_ll_conn_tx_pdu+0xe0>
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm)) {
   2015c:	2d00      	cmp	r5, #0
   2015e:	d06f      	beq.n	20240 <ble_ll_conn_tx_pdu+0x100>
        if (connsm->cur_tx_pdu) {
   20160:	2d00      	cmp	r5, #0
   20162:	f000 8113 	beq.w	2038c <ble_ll_conn_tx_pdu+0x24c>
            ble_hdr = BLE_MBUF_HDR_PTR(m);
   20166:	f105 0818 	add.w	r8, r5, #24
            pktlen = OS_MBUF_PKTLEN(m);
   2016a:	8a2b      	ldrh	r3, [r5, #16]
   2016c:	9302      	str	r3, [sp, #8]
            cur_txlen = ble_hdr->txinfo.pyld_len;
   2016e:	f895 b01c 	ldrb.w	fp, [r5, #28]
            cur_offset = ble_hdr->txinfo.offset;
   20172:	f8b5 901a 	ldrh.w	r9, [r5, #26]
            if (cur_offset == 0) {
   20176:	f1b9 0f00 	cmp.w	r9, #0
   2017a:	f040 80fc 	bne.w	20376 <ble_ll_conn_tx_pdu+0x236>
                hdr_byte = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   2017e:	7e6f      	ldrb	r7, [r5, #25]
   20180:	f007 0703 	and.w	r7, r7, #3
            if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   20184:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   20188:	2b02      	cmp	r3, #2
   2018a:	f240 808d 	bls.w	202a8 <ble_ll_conn_tx_pdu+0x168>
                if (nextpkthdr && !ble_ll_ctrl_enc_allowed_pdu_tx(nextpkthdr)
   2018e:	f1ba 0f00 	cmp.w	sl, #0
   20192:	f000 8089 	beq.w	202a8 <ble_ll_conn_tx_pdu+0x168>
   20196:	4650      	mov	r0, sl
   20198:	f002 fce0 	bl	22b5c <ble_ll_ctrl_enc_allowed_pdu_tx>
   2019c:	2800      	cmp	r0, #0
   2019e:	f040 8083 	bne.w	202a8 <ble_ll_conn_tx_pdu+0x168>
                    && (CONN_IS_CENTRAL(connsm) ||
   201a2:	79e3      	ldrb	r3, [r4, #7]
   201a4:	2b01      	cmp	r3, #1
   201a6:	f040 80e8 	bne.w	2037a <ble_ll_conn_tx_pdu+0x23a>
                    nextpkthdr = NULL;
   201aa:	f04f 0a00 	mov.w	sl, #0
   201ae:	e07b      	b.n	202a8 <ble_ll_conn_tx_pdu+0x168>
        CONN_F_EMPTY_PDU_TXD(connsm) = 1;
   201b0:	7843      	ldrb	r3, [r0, #1]
   201b2:	f043 0320 	orr.w	r3, r3, #32
   201b6:	7043      	strb	r3, [r0, #1]
    ble_hdr = NULL;
   201b8:	f04f 0800 	mov.w	r8, #0
    m = NULL;
   201bc:	4645      	mov	r5, r8
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   201be:	2701      	movs	r7, #1
    md = 0;
   201c0:	4646      	mov	r6, r8
    if (CONN_F_EMPTY_PDU_TXD(connsm)) {
   201c2:	7863      	ldrb	r3, [r4, #1]
   201c4:	f013 0f20 	tst.w	r3, #32
   201c8:	d00b      	beq.n	201e2 <ble_ll_conn_tx_pdu+0xa2>
        m->om_data += BLE_MBUF_MEMBLOCK_OVERHEAD;
   201ca:	ab0e      	add	r3, sp, #56	; 0x38
   201cc:	9304      	str	r3, [sp, #16]
        ble_hdr->txinfo.flags = 0;
   201ce:	2300      	movs	r3, #0
   201d0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        ble_hdr->txinfo.offset = 0;
   201d4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
        ble_hdr->txinfo.pyld_len = 0;
   201d8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        ble_hdr = &empty_pdu.ble_hdr;
   201dc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
        m = (struct os_mbuf *)&empty_pdu;
   201e0:	ad04      	add	r5, sp, #16
    if (connsm->tx_seqnum) {
   201e2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   201e6:	b10b      	cbz	r3, 201ec <ble_ll_conn_tx_pdu+0xac>
        hdr_byte |= BLE_LL_DATA_HDR_SN_MASK;
   201e8:	f047 0708 	orr.w	r7, r7, #8
    if (md) {
   201ec:	b10e      	cbz	r6, 201f2 <ble_ll_conn_tx_pdu+0xb2>
        hdr_byte |= BLE_LL_DATA_HDR_MD_MASK;
   201ee:	f047 0710 	orr.w	r7, r7, #16
    if (connsm->next_exp_seqnum) {
   201f2:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   201f6:	b10b      	cbz	r3, 201fc <ble_ll_conn_tx_pdu+0xbc>
        hdr_byte |= BLE_LL_DATA_HDR_NESN_MASK;
   201f8:	f047 0704 	orr.w	r7, r7, #4
    ble_hdr->txinfo.hdr_byte = hdr_byte;
   201fc:	f888 7001 	strb.w	r7, [r8, #1]
    if ((connsm->csmflags.cfbit.terminate_ind_rxd) ||
   20200:	7823      	ldrb	r3, [r4, #0]
   20202:	f013 0f04 	tst.w	r3, #4
   20206:	f040 8113 	bne.w	20430 <ble_ll_conn_tx_pdu+0x2f0>
        (CONN_IS_PERIPHERAL(connsm) && (md == 0) &&
   2020a:	f894 9007 	ldrb.w	r9, [r4, #7]
    if ((connsm->csmflags.cfbit.terminate_ind_rxd) ||
   2020e:	f1b9 0f02 	cmp.w	r9, #2
   20212:	f000 80f5 	beq.w	20400 <ble_ll_conn_tx_pdu+0x2c0>
        txend_func = NULL;
   20216:	f04f 0a00 	mov.w	sl, #0
        end_transition = BLE_PHY_TRANSITION_TX_RX;
   2021a:	f04f 0902 	mov.w	r9, #2
   2021e:	e10b      	b.n	20438 <ble_ll_conn_tx_pdu+0x2f8>
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm) && !pkthdr) {
   20220:	7843      	ldrb	r3, [r0, #1]
   20222:	f013 0320 	ands.w	r3, r3, #32
   20226:	d199      	bne.n	2015c <ble_ll_conn_tx_pdu+0x1c>
   20228:	f1ba 0f00 	cmp.w	sl, #0
   2022c:	d196      	bne.n	2015c <ble_ll_conn_tx_pdu+0x1c>
        CONN_F_EMPTY_PDU_TXD(connsm) = 1;
   2022e:	7842      	ldrb	r2, [r0, #1]
   20230:	f042 0220 	orr.w	r2, r2, #32
   20234:	7042      	strb	r2, [r0, #1]
    ble_hdr = NULL;
   20236:	46d0      	mov	r8, sl
    m = NULL;
   20238:	4655      	mov	r5, sl
    md = 0;
   2023a:	461e      	mov	r6, r3
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   2023c:	2701      	movs	r7, #1
        goto conn_tx_pdu;
   2023e:	e7c0      	b.n	201c2 <ble_ll_conn_tx_pdu+0x82>
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm)) {
   20240:	7863      	ldrb	r3, [r4, #1]
   20242:	f013 0720 	ands.w	r7, r3, #32
   20246:	d18b      	bne.n	20160 <ble_ll_conn_tx_pdu+0x20>
        m = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);
   20248:	f1aa 0910 	sub.w	r9, sl, #16
        nextpkthdr = STAILQ_NEXT(pkthdr, omp_next);
   2024c:	f8da 3004 	ldr.w	r3, [sl, #4]
   20250:	9303      	str	r3, [sp, #12]
        if (((connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) &&
   20252:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   20256:	2b02      	cmp	r3, #2
   20258:	d902      	bls.n	20260 <ble_ll_conn_tx_pdu+0x120>
             CONN_IS_CENTRAL(connsm)) ||
   2025a:	79e2      	ldrb	r2, [r4, #7]
        if (((connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) &&
   2025c:	2a01      	cmp	r2, #1
   2025e:	d05d      	beq.n	2031c <ble_ll_conn_tx_pdu+0x1dc>
             CONN_IS_CENTRAL(connsm)) ||
   20260:	2b03      	cmp	r3, #3
   20262:	d902      	bls.n	2026a <ble_ll_conn_tx_pdu+0x12a>
             CONN_IS_PERIPHERAL(connsm))) {
   20264:	79e3      	ldrb	r3, [r4, #7]
            ((connsm->enc_data.enc_state > CONN_ENC_S_ENC_RSP_TO_BE_SENT) &&
   20266:	2b02      	cmp	r3, #2
   20268:	d058      	beq.n	2031c <ble_ll_conn_tx_pdu+0x1dc>
        STAILQ_REMOVE_HEAD(&connsm->conn_txq, omp_next);
   2026a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   2026e:	685b      	ldr	r3, [r3, #4]
   20270:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
   20274:	2b00      	cmp	r3, #0
   20276:	d072      	beq.n	2035e <ble_ll_conn_tx_pdu+0x21e>
        ble_hdr = BLE_MBUF_HDR_PTR(m);
   20278:	f10a 0808 	add.w	r8, sl, #8
        llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   2027c:	f89a 3009 	ldrb.w	r3, [sl, #9]
   20280:	f003 0303 	and.w	r3, r3, #3
        pktlen = pkthdr->omp_len;
   20284:	f8ba 2000 	ldrh.w	r2, [sl]
   20288:	9202      	str	r2, [sp, #8]
        if (llid == BLE_LL_LLID_CTRL) {
   2028a:	2b03      	cmp	r3, #3
   2028c:	d16c      	bne.n	20368 <ble_ll_conn_tx_pdu+0x228>
            cur_txlen = pktlen;
   2028e:	fa5f fb82 	uxtb.w	fp, r2
        ble_hdr->txinfo.pyld_len = cur_txlen;
   20292:	f8aa b00c 	strh.w	fp, [sl, #12]
        hdr_byte = ble_hdr->txinfo.hdr_byte;
   20296:	f89a 7009 	ldrb.w	r7, [sl, #9]
        connsm->cur_tx_pdu = m;
   2029a:	f8c4 90a8 	str.w	r9, [r4, #168]	; 0xa8
   2029e:	f8dd a00c 	ldr.w	sl, [sp, #12]
        m = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);
   202a2:	464d      	mov	r5, r9
    cur_offset = 0;
   202a4:	f04f 0900 	mov.w	r9, #0
    if (nextpkthdr || ((cur_offset + cur_txlen) < pktlen)) {
   202a8:	f1ba 0f00 	cmp.w	sl, #0
   202ac:	f000 8097 	beq.w	203de <ble_ll_conn_tx_pdu+0x29e>
        next_event_time = ble_ll_conn_get_next_sched_time(connsm);
   202b0:	4620      	mov	r0, r4
   202b2:	f7ff ff19 	bl	200e8 <ble_ll_conn_get_next_sched_time>
   202b6:	4682      	mov	sl, r0
        if ((cur_offset + cur_txlen) < pktlen) {
   202b8:	eb09 030b 	add.w	r3, r9, fp
   202bc:	9a02      	ldr	r2, [sp, #8]
   202be:	4293      	cmp	r3, r2
   202c0:	f280 8094 	bge.w	203ec <ble_ll_conn_tx_pdu+0x2ac>
            next_txlen = pktlen - (cur_offset + cur_txlen);
   202c4:	b29b      	uxth	r3, r3
   202c6:	1ad3      	subs	r3, r2, r3
   202c8:	b29b      	uxth	r3, r3
        if (next_txlen > connsm->eff_max_tx_octets) {
   202ca:	7b60      	ldrb	r0, [r4, #13]
   202cc:	4298      	cmp	r0, r3
   202ce:	d300      	bcc.n	202d2 <ble_ll_conn_tx_pdu+0x192>
   202d0:	4618      	mov	r0, r3
        ticks = (BLE_LL_IFS * 3) + connsm->eff_max_rx_time +
   202d2:	f8b4 901a 	ldrh.w	r9, [r4, #26]
            ble_ll_pdu_tx_time_get(next_txlen, tx_phy_mode) +
   202d6:	2101      	movs	r1, #1
   202d8:	f7fe fdd8 	bl	1ee8c <ble_ll_pdu_tx_time_get>
        ticks = (BLE_LL_IFS * 3) + connsm->eff_max_rx_time +
   202dc:	4481      	add	r9, r0
            ble_ll_pdu_tx_time_get(cur_txlen, tx_phy_mode);
   202de:	2101      	movs	r1, #1
   202e0:	fa1f f08b 	uxth.w	r0, fp
   202e4:	f7fe fdd2 	bl	1ee8c <ble_ll_pdu_tx_time_get>
            ble_ll_pdu_tx_time_get(next_txlen, tx_phy_mode) +
   202e8:	4448      	add	r0, r9
        ticks = (BLE_LL_IFS * 3) + connsm->eff_max_rx_time +
   202ea:	f500 70e1 	add.w	r0, r0, #450	; 0x1c2
        if (connsm->conn_role == BLE_LL_CONN_ROLE_CENTRAL) {
   202ee:	79e3      	ldrb	r3, [r4, #7]
   202f0:	2b01      	cmp	r3, #1
   202f2:	d07d      	beq.n	203f0 <ble_ll_conn_tx_pdu+0x2b0>
    if (usecs <= 31249) {
   202f4:	f647 2311 	movw	r3, #31249	; 0x7a11
   202f8:	4298      	cmp	r0, r3
   202fa:	d87d      	bhi.n	203f8 <ble_ll_conn_tx_pdu+0x2b8>
        return (usecs * 137439) / 4194304;
   202fc:	4bb8      	ldr	r3, [pc, #736]	; (205e0 <ble_ll_conn_tx_pdu+0x4a0>)
   202fe:	fb03 f000 	mul.w	r0, r3, r0
   20302:	ea4f 5990 	mov.w	r9, r0, lsr #22
    return os_cputime_get32();
   20306:	f013 fdfa 	bl	33efe <os_cputime_get32>
        if (LL_TMR_LT(ble_ll_tmr_get() + ticks, next_event_time)) {
   2030a:	4448      	add	r0, r9
   2030c:	eba0 0a0a 	sub.w	sl, r0, sl
   20310:	f1ba 0f00 	cmp.w	sl, #0
   20314:	f6bf af55 	bge.w	201c2 <ble_ll_conn_tx_pdu+0x82>
            md = 1;
   20318:	2601      	movs	r6, #1
   2031a:	e752      	b.n	201c2 <ble_ll_conn_tx_pdu+0x82>
            if (!ble_ll_ctrl_enc_allowed_pdu_tx(pkthdr)) {
   2031c:	4650      	mov	r0, sl
   2031e:	f002 fc1d 	bl	22b5c <ble_ll_ctrl_enc_allowed_pdu_tx>
   20322:	b160      	cbz	r0, 2033e <ble_ll_conn_tx_pdu+0x1fe>
            if (nextpkthdr && !ble_ll_ctrl_enc_allowed_pdu_tx(nextpkthdr)
   20324:	9b03      	ldr	r3, [sp, #12]
   20326:	2b00      	cmp	r3, #0
   20328:	d09f      	beq.n	2026a <ble_ll_conn_tx_pdu+0x12a>
   2032a:	4618      	mov	r0, r3
   2032c:	f002 fc16 	bl	22b5c <ble_ll_ctrl_enc_allowed_pdu_tx>
   20330:	2800      	cmp	r0, #0
   20332:	d19a      	bne.n	2026a <ble_ll_conn_tx_pdu+0x12a>
                && (CONN_IS_CENTRAL(connsm) ||
   20334:	79e3      	ldrb	r3, [r4, #7]
   20336:	2b01      	cmp	r3, #1
   20338:	d10a      	bne.n	20350 <ble_ll_conn_tx_pdu+0x210>
                nextpkthdr = NULL;
   2033a:	9503      	str	r5, [sp, #12]
   2033c:	e795      	b.n	2026a <ble_ll_conn_tx_pdu+0x12a>
                CONN_F_EMPTY_PDU_TXD(connsm) = 1;
   2033e:	7863      	ldrb	r3, [r4, #1]
   20340:	f043 0320 	orr.w	r3, r3, #32
   20344:	7063      	strb	r3, [r4, #1]
    ble_hdr = NULL;
   20346:	46a8      	mov	r8, r5
        m = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);
   20348:	464d      	mov	r5, r9
    md = 0;
   2034a:	463e      	mov	r6, r7
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   2034c:	2701      	movs	r7, #1
                goto conn_tx_pdu;
   2034e:	e738      	b.n	201c2 <ble_ll_conn_tx_pdu+0x82>
                    !ble_ll_ctrl_is_start_enc_rsp(m))) {
   20350:	4648      	mov	r0, r9
   20352:	f002 fc13 	bl	22b7c <ble_ll_ctrl_is_start_enc_rsp>
                && (CONN_IS_CENTRAL(connsm) ||
   20356:	2800      	cmp	r0, #0
   20358:	d187      	bne.n	2026a <ble_ll_conn_tx_pdu+0x12a>
                nextpkthdr = NULL;
   2035a:	9503      	str	r5, [sp, #12]
   2035c:	e785      	b.n	2026a <ble_ll_conn_tx_pdu+0x12a>
        STAILQ_REMOVE_HEAD(&connsm->conn_txq, omp_next);
   2035e:	f104 03ac 	add.w	r3, r4, #172	; 0xac
   20362:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
   20366:	e787      	b.n	20278 <ble_ll_conn_tx_pdu+0x138>
            cur_txlen = ble_ll_conn_adjust_pyld_len(connsm, pktlen);
   20368:	9902      	ldr	r1, [sp, #8]
   2036a:	4620      	mov	r0, r4
   2036c:	f7ff fe70 	bl	20050 <ble_ll_conn_adjust_pyld_len>
   20370:	fa5f fb80 	uxtb.w	fp, r0
   20374:	e78d      	b.n	20292 <ble_ll_conn_tx_pdu+0x152>
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   20376:	2701      	movs	r7, #1
   20378:	e704      	b.n	20184 <ble_ll_conn_tx_pdu+0x44>
                        !ble_ll_ctrl_is_start_enc_rsp(connsm->cur_tx_pdu))) {
   2037a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   2037e:	f002 fbfd 	bl	22b7c <ble_ll_ctrl_is_start_enc_rsp>
                    && (CONN_IS_CENTRAL(connsm) ||
   20382:	2800      	cmp	r0, #0
   20384:	d190      	bne.n	202a8 <ble_ll_conn_tx_pdu+0x168>
                    nextpkthdr = NULL;
   20386:	f04f 0a00 	mov.w	sl, #0
   2038a:	e78d      	b.n	202a8 <ble_ll_conn_tx_pdu+0x168>
            if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   2038c:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   20390:	2b02      	cmp	r3, #2
   20392:	d90d      	bls.n	203b0 <ble_ll_conn_tx_pdu+0x270>
                if (nextpkthdr && !ble_ll_ctrl_enc_allowed_pdu_tx(nextpkthdr)) {
   20394:	f1ba 0f00 	cmp.w	sl, #0
   20398:	d011      	beq.n	203be <ble_ll_conn_tx_pdu+0x27e>
   2039a:	4650      	mov	r0, sl
   2039c:	f002 fbde 	bl	22b5c <ble_ll_ctrl_enc_allowed_pdu_tx>
   203a0:	b1a8      	cbz	r0, 203ce <ble_ll_conn_tx_pdu+0x28e>
    ble_hdr = NULL;
   203a2:	46a8      	mov	r8, r5
            cur_txlen = 0;
   203a4:	46b3      	mov	fp, r6
            pktlen = 0;
   203a6:	2300      	movs	r3, #0
   203a8:	9302      	str	r3, [sp, #8]
    cur_offset = 0;
   203aa:	4699      	mov	r9, r3
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   203ac:	2701      	movs	r7, #1
   203ae:	e77b      	b.n	202a8 <ble_ll_conn_tx_pdu+0x168>
    ble_hdr = NULL;
   203b0:	46a8      	mov	r8, r5
            cur_txlen = 0;
   203b2:	46b3      	mov	fp, r6
            pktlen = 0;
   203b4:	2300      	movs	r3, #0
   203b6:	9302      	str	r3, [sp, #8]
    cur_offset = 0;
   203b8:	4699      	mov	r9, r3
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   203ba:	2701      	movs	r7, #1
   203bc:	e774      	b.n	202a8 <ble_ll_conn_tx_pdu+0x168>
    ble_hdr = NULL;
   203be:	46d0      	mov	r8, sl
    m = NULL;
   203c0:	4655      	mov	r5, sl
            cur_txlen = 0;
   203c2:	46b3      	mov	fp, r6
            pktlen = 0;
   203c4:	2300      	movs	r3, #0
   203c6:	9302      	str	r3, [sp, #8]
    cur_offset = 0;
   203c8:	4699      	mov	r9, r3
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   203ca:	2701      	movs	r7, #1
   203cc:	e76c      	b.n	202a8 <ble_ll_conn_tx_pdu+0x168>
                    nextpkthdr = NULL;
   203ce:	46aa      	mov	sl, r5
    ble_hdr = NULL;
   203d0:	46a8      	mov	r8, r5
            cur_txlen = 0;
   203d2:	46b3      	mov	fp, r6
            pktlen = 0;
   203d4:	2300      	movs	r3, #0
   203d6:	9302      	str	r3, [sp, #8]
    cur_offset = 0;
   203d8:	4699      	mov	r9, r3
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   203da:	2701      	movs	r7, #1
   203dc:	e764      	b.n	202a8 <ble_ll_conn_tx_pdu+0x168>
    if (nextpkthdr || ((cur_offset + cur_txlen) < pktlen)) {
   203de:	eb09 030b 	add.w	r3, r9, fp
   203e2:	9a02      	ldr	r2, [sp, #8]
   203e4:	4293      	cmp	r3, r2
   203e6:	f6bf aeec 	bge.w	201c2 <ble_ll_conn_tx_pdu+0x82>
   203ea:	e761      	b.n	202b0 <ble_ll_conn_tx_pdu+0x170>
            next_txlen = connsm->eff_max_tx_octets;
   203ec:	7b63      	ldrb	r3, [r4, #13]
   203ee:	e76c      	b.n	202ca <ble_ll_conn_tx_pdu+0x18a>
            ticks += (BLE_LL_IFS + connsm->eff_max_rx_time);
   203f0:	8b63      	ldrh	r3, [r4, #26]
   203f2:	4418      	add	r0, r3
   203f4:	3096      	adds	r0, #150	; 0x96
   203f6:	e77d      	b.n	202f4 <ble_ll_conn_tx_pdu+0x1b4>
    return os_cputime_usecs_to_ticks(usecs);
   203f8:	f013 fd86 	bl	33f08 <os_cputime_usecs_to_ticks>
   203fc:	4681      	mov	r9, r0
   203fe:	e782      	b.n	20306 <ble_ll_conn_tx_pdu+0x1c6>
        (CONN_IS_PERIPHERAL(connsm) && (md == 0) &&
   20400:	2e00      	cmp	r6, #0
   20402:	d14e      	bne.n	204a2 <ble_ll_conn_tx_pdu+0x362>
         (connsm->cons_rxd_bad_crc == 0) &&
   20404:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
        (CONN_IS_PERIPHERAL(connsm) && (md == 0) &&
   20408:	2b00      	cmp	r3, #0
   2040a:	d14d      	bne.n	204a8 <ble_ll_conn_tx_pdu+0x368>
         ((connsm->last_rxd_hdr_byte & BLE_LL_DATA_HDR_MD_MASK) == 0) &&
   2040c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
         (connsm->cons_rxd_bad_crc == 0) &&
   20410:	f013 0a10 	ands.w	sl, r3, #16
   20414:	d002      	beq.n	2041c <ble_ll_conn_tx_pdu+0x2dc>
        txend_func = NULL;
   20416:	f04f 0a00 	mov.w	sl, #0
   2041a:	e00d      	b.n	20438 <ble_ll_conn_tx_pdu+0x2f8>
         !ble_ll_ctrl_is_terminate_ind(hdr_byte, m->om_data[0]))) {
   2041c:	682b      	ldr	r3, [r5, #0]
   2041e:	7819      	ldrb	r1, [r3, #0]
   20420:	4638      	mov	r0, r7
   20422:	f002 fcc1 	bl	22da8 <ble_ll_ctrl_is_terminate_ind>
         ((connsm->last_rxd_hdr_byte & BLE_LL_DATA_HDR_MD_MASK) == 0) &&
   20426:	2800      	cmp	r0, #0
   20428:	d041      	beq.n	204ae <ble_ll_conn_tx_pdu+0x36e>
        txend_func = NULL;
   2042a:	f04f 0a00 	mov.w	sl, #0
   2042e:	e003      	b.n	20438 <ble_ll_conn_tx_pdu+0x2f8>
        txend_func = ble_ll_conn_wait_txend;
   20430:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 205ec <ble_ll_conn_tx_pdu+0x4ac>
        end_transition = BLE_PHY_TRANSITION_NONE;
   20434:	f04f 0900 	mov.w	r9, #0
    llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   20438:	f898 3001 	ldrb.w	r3, [r8, #1]
   2043c:	f003 0303 	and.w	r3, r3, #3
    if (llid == BLE_LL_LLID_CTRL) {
   20440:	2b03      	cmp	r3, #3
   20442:	d038      	beq.n	204b6 <ble_ll_conn_tx_pdu+0x376>
        opcode = 0;
   20444:	2300      	movs	r3, #0
        is_ctrl = 0;
   20446:	461a      	mov	r2, r3
    } else if (is_ctrl && (opcode == BLE_LL_CTRL_START_ENC_REQ)) {
   20448:	b10a      	cbz	r2, 2044e <ble_ll_conn_tx_pdu+0x30e>
   2044a:	2b05      	cmp	r3, #5
   2044c:	d050      	beq.n	204f0 <ble_ll_conn_tx_pdu+0x3b0>
    } else if (is_ctrl && (opcode == BLE_LL_CTRL_PAUSE_ENC_RSP)) {
   2044e:	b10a      	cbz	r2, 20454 <ble_ll_conn_tx_pdu+0x314>
   20450:	2b0b      	cmp	r3, #11
   20452:	d062      	beq.n	2051a <ble_ll_conn_tx_pdu+0x3da>
        if (CONN_F_ENCRYPTED(connsm)) {
   20454:	78a3      	ldrb	r3, [r4, #2]
   20456:	f013 0f02 	tst.w	r3, #2
   2045a:	f040 8098 	bne.w	2058e <ble_ll_conn_tx_pdu+0x44e>
    ble_phy_set_txend_cb(txend_func, connsm);
   2045e:	4621      	mov	r1, r4
   20460:	4650      	mov	r0, sl
   20462:	f005 feef 	bl	26244 <ble_phy_set_txend_cb>
    rc = ble_phy_tx(ble_ll_tx_mbuf_pducb, m, end_transition);
   20466:	464a      	mov	r2, r9
   20468:	4629      	mov	r1, r5
   2046a:	485e      	ldr	r0, [pc, #376]	; (205e4 <ble_ll_conn_tx_pdu+0x4a4>)
   2046c:	f005 ff42 	bl	262f4 <ble_phy_tx>
    if (!rc) {
   20470:	b9a0      	cbnz	r0, 2049c <ble_ll_conn_tx_pdu+0x35c>
        cur_txlen = ble_hdr->txinfo.pyld_len;
   20472:	f898 2004 	ldrb.w	r2, [r8, #4]
        CONN_F_LAST_TXD_MD(connsm) = md;
   20476:	7863      	ldrb	r3, [r4, #1]
   20478:	f366 1386 	bfi	r3, r6, #6, #1
   2047c:	7063      	strb	r3, [r4, #1]
        if (CONN_F_EMPTY_PDU_TXD(connsm)) {
   2047e:	f013 0f20 	tst.w	r3, #32
   20482:	f000 8098 	beq.w	205b6 <ble_ll_conn_tx_pdu+0x476>
            if (connsm->csmflags.cfbit.terminate_ind_rxd) {
   20486:	7823      	ldrb	r3, [r4, #0]
   20488:	f013 0f04 	tst.w	r3, #4
   2048c:	d002      	beq.n	20494 <ble_ll_conn_tx_pdu+0x354>
                connsm->csmflags.cfbit.terminate_ind_rxd_acked = 1;
   2048e:	f043 0308 	orr.w	r3, r3, #8
   20492:	7023      	strb	r3, [r4, #0]
            STATS_INC(ble_ll_conn_stats, tx_empty_pdus);
   20494:	4a54      	ldr	r2, [pc, #336]	; (205e8 <ble_ll_conn_tx_pdu+0x4a8>)
   20496:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   20498:	3301      	adds	r3, #1
   2049a:	66d3      	str	r3, [r2, #108]	; 0x6c
}
   2049c:	b00f      	add	sp, #60	; 0x3c
   2049e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        txend_func = NULL;
   204a2:	f04f 0a00 	mov.w	sl, #0
   204a6:	e7c7      	b.n	20438 <ble_ll_conn_tx_pdu+0x2f8>
   204a8:	f04f 0a00 	mov.w	sl, #0
   204ac:	e7c4      	b.n	20438 <ble_ll_conn_tx_pdu+0x2f8>
        end_transition = BLE_PHY_TRANSITION_NONE;
   204ae:	46d1      	mov	r9, sl
        txend_func = ble_ll_conn_wait_txend;
   204b0:	f8df a138 	ldr.w	sl, [pc, #312]	; 205ec <ble_ll_conn_tx_pdu+0x4ac>
   204b4:	e7c0      	b.n	20438 <ble_ll_conn_tx_pdu+0x2f8>
        opcode = m->om_data[0];
   204b6:	682b      	ldr	r3, [r5, #0]
   204b8:	781b      	ldrb	r3, [r3, #0]
    if (is_ctrl && (opcode == BLE_LL_CTRL_START_ENC_RSP)) {
   204ba:	2b06      	cmp	r3, #6
   204bc:	d001      	beq.n	204c2 <ble_ll_conn_tx_pdu+0x382>
        is_ctrl = 1;
   204be:	2201      	movs	r2, #1
   204c0:	e7c2      	b.n	20448 <ble_ll_conn_tx_pdu+0x308>
        CONN_F_ENCRYPTED(connsm) = 1;
   204c2:	78a3      	ldrb	r3, [r4, #2]
   204c4:	f043 0302 	orr.w	r3, r3, #2
   204c8:	70a3      	strb	r3, [r4, #2]
        connsm->enc_data.tx_encrypted = 1;
   204ca:	2301      	movs	r3, #1
   204cc:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
                               CONN_IS_CENTRAL(connsm));
   204d0:	79e3      	ldrb	r3, [r4, #7]
        ble_phy_encrypt_enable(connsm->enc_data.tx_pkt_cntr,
   204d2:	2b01      	cmp	r3, #1
   204d4:	bf14      	ite	ne
   204d6:	2300      	movne	r3, #0
   204d8:	2301      	moveq	r3, #1
   204da:	9300      	str	r3, [sp, #0]
   204dc:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   204e0:	f504 7298 	add.w	r2, r4, #304	; 0x130
   204e4:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
   204e8:	2100      	movs	r1, #0
   204ea:	f005 fea7 	bl	2623c <ble_phy_encrypt_enable>
   204ee:	e7b6      	b.n	2045e <ble_ll_conn_tx_pdu+0x31e>
        CONN_F_ENCRYPTED(connsm) = 0;
   204f0:	78a3      	ldrb	r3, [r4, #2]
   204f2:	f36f 0341 	bfc	r3, #1, #1
   204f6:	70a3      	strb	r3, [r4, #2]
        connsm->enc_data.enc_state = CONN_ENC_S_START_ENC_RSP_WAIT;
   204f8:	2308      	movs	r3, #8
   204fa:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
        connsm->enc_data.tx_encrypted = 0;
   204fe:	2300      	movs	r3, #0
   20500:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
        ble_phy_encrypt_disable();
   20504:	f005 fe9c 	bl	26240 <ble_phy_encrypt_disable>
        if (txend_func == NULL) {
   20508:	f1ba 0f00 	cmp.w	sl, #0
   2050c:	d002      	beq.n	20514 <ble_ll_conn_tx_pdu+0x3d4>
            txend_func = ble_ll_conn_txend_encrypt;
   2050e:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 205f0 <ble_ll_conn_tx_pdu+0x4b0>
   20512:	e7a4      	b.n	2045e <ble_ll_conn_tx_pdu+0x31e>
            txend_func = ble_ll_conn_start_rx_encrypt;
   20514:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 205f4 <ble_ll_conn_tx_pdu+0x4b4>
   20518:	e7a1      	b.n	2045e <ble_ll_conn_tx_pdu+0x31e>
        switch (connsm->conn_role) {
   2051a:	79e3      	ldrb	r3, [r4, #7]
   2051c:	2b01      	cmp	r3, #1
   2051e:	d01c      	beq.n	2055a <ble_ll_conn_tx_pdu+0x41a>
   20520:	2b02      	cmp	r3, #2
   20522:	d12a      	bne.n	2057a <ble_ll_conn_tx_pdu+0x43a>
            CONN_F_ENCRYPTED(connsm) = 1;
   20524:	78a2      	ldrb	r2, [r4, #2]
   20526:	f042 0202 	orr.w	r2, r2, #2
   2052a:	70a2      	strb	r2, [r4, #2]
            connsm->enc_data.tx_encrypted = 1;
   2052c:	2201      	movs	r2, #1
   2052e:	f884 2119 	strb.w	r2, [r4, #281]	; 0x119
            ble_phy_encrypt_enable(connsm->enc_data.tx_pkt_cntr,
   20532:	4293      	cmp	r3, r2
   20534:	bf14      	ite	ne
   20536:	2300      	movne	r3, #0
   20538:	2301      	moveq	r3, #1
   2053a:	9300      	str	r3, [sp, #0]
   2053c:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   20540:	f504 7298 	add.w	r2, r4, #304	; 0x130
   20544:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
   20548:	2100      	movs	r1, #0
   2054a:	f005 fe77 	bl	2623c <ble_phy_encrypt_enable>
            if (txend_func == NULL) {
   2054e:	f1ba 0f00 	cmp.w	sl, #0
   20552:	d00f      	beq.n	20574 <ble_ll_conn_tx_pdu+0x434>
                txend_func = ble_ll_conn_rxend_unencrypt;
   20554:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 205f8 <ble_ll_conn_tx_pdu+0x4b8>
   20558:	e781      	b.n	2045e <ble_ll_conn_tx_pdu+0x31e>
            CONN_F_ENCRYPTED(connsm) = 0;
   2055a:	78a3      	ldrb	r3, [r4, #2]
   2055c:	f36f 0341 	bfc	r3, #1, #1
   20560:	70a3      	strb	r3, [r4, #2]
            connsm->enc_data.enc_state = CONN_ENC_S_PAUSED;
   20562:	2306      	movs	r3, #6
   20564:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
            connsm->enc_data.tx_encrypted = 0;
   20568:	2300      	movs	r3, #0
   2056a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
            ble_phy_encrypt_disable();
   2056e:	f005 fe67 	bl	26240 <ble_phy_encrypt_disable>
            break;
   20572:	e774      	b.n	2045e <ble_ll_conn_tx_pdu+0x31e>
                txend_func = ble_ll_conn_start_rx_unencrypt;
   20574:	f8df a084 	ldr.w	sl, [pc, #132]	; 205fc <ble_ll_conn_tx_pdu+0x4bc>
   20578:	e771      	b.n	2045e <ble_ll_conn_tx_pdu+0x31e>
            BLE_LL_ASSERT(0);
   2057a:	f7f4 f8bb 	bl	146f4 <hal_debugger_connected>
   2057e:	b100      	cbz	r0, 20582 <ble_ll_conn_tx_pdu+0x442>
   20580:	be01      	bkpt	0x0001
   20582:	2300      	movs	r3, #0
   20584:	461a      	mov	r2, r3
   20586:	4619      	mov	r1, r3
   20588:	4618      	mov	r0, r3
   2058a:	f7f8 fbd1 	bl	18d30 <__assert_func>
            connsm->enc_data.tx_encrypted = 1;
   2058e:	2301      	movs	r3, #1
   20590:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
                                         CONN_IS_CENTRAL(connsm));
   20594:	79e2      	ldrb	r2, [r4, #7]
            ble_phy_encrypt_set_pkt_cntr(connsm->enc_data.tx_pkt_cntr,
   20596:	429a      	cmp	r2, r3
   20598:	bf14      	ite	ne
   2059a:	2200      	movne	r2, #0
   2059c:	2201      	moveq	r2, #1
   2059e:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
   205a2:	2100      	movs	r1, #0
   205a4:	f005 fe4b 	bl	2623e <ble_phy_encrypt_set_pkt_cntr>
            if (txend_func == NULL) {
   205a8:	f1ba 0f00 	cmp.w	sl, #0
   205ac:	f47f af57 	bne.w	2045e <ble_ll_conn_tx_pdu+0x31e>
                txend_func = ble_ll_conn_continue_rx_encrypt;
   205b0:	f8df a04c 	ldr.w	sl, [pc, #76]	; 20600 <ble_ll_conn_tx_pdu+0x4c0>
   205b4:	e753      	b.n	2045e <ble_ll_conn_tx_pdu+0x31e>
        } else if ((hdr_byte & BLE_LL_DATA_HDR_LLID_MASK) == BLE_LL_LLID_CTRL) {
   205b6:	f007 0703 	and.w	r7, r7, #3
   205ba:	2f03      	cmp	r7, #3
   205bc:	d007      	beq.n	205ce <ble_ll_conn_tx_pdu+0x48e>
            STATS_INC(ble_ll_conn_stats, tx_l2cap_pdus);
   205be:	4b0a      	ldr	r3, [pc, #40]	; (205e8 <ble_ll_conn_tx_pdu+0x4a8>)
   205c0:	6e59      	ldr	r1, [r3, #100]	; 0x64
   205c2:	3101      	adds	r1, #1
   205c4:	6659      	str	r1, [r3, #100]	; 0x64
            STATS_INCN(ble_ll_conn_stats, tx_l2cap_bytes, cur_txlen);
   205c6:	6e99      	ldr	r1, [r3, #104]	; 0x68
   205c8:	440a      	add	r2, r1
   205ca:	669a      	str	r2, [r3, #104]	; 0x68
    return rc;
   205cc:	e766      	b.n	2049c <ble_ll_conn_tx_pdu+0x35c>
            STATS_INC(ble_ll_conn_stats, tx_ctrl_pdus);
   205ce:	4b06      	ldr	r3, [pc, #24]	; (205e8 <ble_ll_conn_tx_pdu+0x4a8>)
   205d0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
   205d2:	3101      	adds	r1, #1
   205d4:	65d9      	str	r1, [r3, #92]	; 0x5c
            STATS_INCN(ble_ll_conn_stats, tx_ctrl_bytes, cur_txlen);
   205d6:	6e19      	ldr	r1, [r3, #96]	; 0x60
   205d8:	440a      	add	r2, r1
   205da:	661a      	str	r2, [r3, #96]	; 0x60
   205dc:	e75e      	b.n	2049c <ble_ll_conn_tx_pdu+0x35c>
   205de:	bf00      	nop
   205e0:	000218df 	.word	0x000218df
   205e4:	0001eda5 	.word	0x0001eda5
   205e8:	100043dc 	.word	0x100043dc
   205ec:	0001ff61 	.word	0x0001ff61
   205f0:	0001ff51 	.word	0x0001ff51
   205f4:	0001fffd 	.word	0x0001fffd
   205f8:	0001ff41 	.word	0x0001ff41
   205fc:	0002002b 	.word	0x0002002b
   20600:	0002003b 	.word	0x0002003b

00020604 <ble_ll_conn_event_start_cb>:
{
   20604:	b530      	push	{r4, r5, lr}
   20606:	b083      	sub	sp, #12
    connsm = (struct ble_ll_conn_sm *)sch->cb_arg;
   20608:	68c4      	ldr	r4, [r0, #12]
    g_ble_ll_conn_cur_sm = connsm;
   2060a:	4b53      	ldr	r3, [pc, #332]	; (20758 <ble_ll_conn_event_start_cb+0x154>)
   2060c:	601c      	str	r4, [r3, #0]
    BLE_LL_ASSERT(connsm);
   2060e:	2c00      	cmp	r4, #0
   20610:	d046      	beq.n	206a0 <ble_ll_conn_event_start_cb+0x9c>
   20612:	4605      	mov	r5, r0
    if (connsm->conn_state == BLE_LL_CONN_STATE_IDLE) {
   20614:	79a3      	ldrb	r3, [r4, #6]
   20616:	2b00      	cmp	r3, #0
   20618:	d04c      	beq.n	206b4 <ble_ll_conn_event_start_cb+0xb0>
    ble_ll_whitelist_disable();
   2061a:	f005 fdc5 	bl	261a8 <ble_ll_whitelist_disable>
    ble_ll_state_set(BLE_LL_STATE_CONNECTION);
   2061e:	2004      	movs	r0, #4
   20620:	f7fe fbd8 	bl	1edd4 <ble_ll_state_set>
    ble_phy_setchan(connsm->data_chan_index, connsm->access_addr,
   20624:	6d62      	ldr	r2, [r4, #84]	; 0x54
   20626:	6d21      	ldr	r1, [r4, #80]	; 0x50
   20628:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   2062c:	f005 fe42 	bl	262b4 <ble_phy_setchan>
    ble_phy_resolv_list_disable();
   20630:	f005 fea2 	bl	26378 <ble_phy_resolv_list_disable>
    switch (connsm->conn_role) {
   20634:	79e3      	ldrb	r3, [r4, #7]
   20636:	2b01      	cmp	r3, #1
   20638:	d04a      	beq.n	206d0 <ble_ll_conn_event_start_cb+0xcc>
   2063a:	2b02      	cmp	r3, #2
   2063c:	f040 8081 	bne.w	20742 <ble_ll_conn_event_start_cb+0x13e>
        if (CONN_F_ENCRYPTED(connsm)) {
   20640:	78a3      	ldrb	r3, [r4, #2]
   20642:	f013 0f02 	tst.w	r3, #2
   20646:	d069      	beq.n	2071c <ble_ll_conn_event_start_cb+0x118>
            ble_phy_encrypt_enable(connsm->enc_data.rx_pkt_cntr,
   20648:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
   2064c:	2301      	movs	r3, #1
   2064e:	9300      	str	r3, [sp, #0]
   20650:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   20654:	f504 7298 	add.w	r2, r4, #304	; 0x130
   20658:	2100      	movs	r1, #0
   2065a:	f005 fdef 	bl	2623c <ble_phy_encrypt_enable>
        start = sch->start_time + g_ble_ll_sched_offset_ticks;
   2065e:	6868      	ldr	r0, [r5, #4]
   20660:	4b3e      	ldr	r3, [pc, #248]	; (2075c <ble_ll_conn_event_start_cb+0x158>)
   20662:	781b      	ldrb	r3, [r3, #0]
        rc = ble_phy_rx_set_start_time(start, sch->remainder);
   20664:	78a9      	ldrb	r1, [r5, #2]
   20666:	4418      	add	r0, r3
   20668:	f005 fdf4 	bl	26254 <ble_phy_rx_set_start_time>
        if (rc) {
   2066c:	4605      	mov	r5, r0
   2066e:	2800      	cmp	r0, #0
   20670:	d057      	beq.n	20722 <ble_ll_conn_event_start_cb+0x11e>
            STATS_INC(ble_ll_conn_stats, periph_ce_failures);
   20672:	4a3b      	ldr	r2, [pc, #236]	; (20760 <ble_ll_conn_event_start_cb+0x15c>)
   20674:	6b13      	ldr	r3, [r2, #48]	; 0x30
   20676:	3301      	adds	r3, #1
   20678:	6313      	str	r3, [r2, #48]	; 0x30
        ble_ll_event_send(&connsm->conn_ev_end);
   2067a:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2067e:	f7fe fbb5 	bl	1edec <ble_ll_event_send>
        ble_phy_disable();
   20682:	f005 fe2b 	bl	262dc <ble_phy_disable>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   20686:	2000      	movs	r0, #0
   20688:	f7fe fba4 	bl	1edd4 <ble_ll_state_set>
        g_ble_ll_conn_cur_sm = NULL;
   2068c:	4b32      	ldr	r3, [pc, #200]	; (20758 <ble_ll_conn_event_start_cb+0x154>)
   2068e:	2200      	movs	r2, #0
   20690:	601a      	str	r2, [r3, #0]
   20692:	2501      	movs	r5, #1
    return os_cputime_get32();
   20694:	f013 fc33 	bl	33efe <os_cputime_get32>
    connsm->last_scheduled = ble_ll_tmr_get();
   20698:	6620      	str	r0, [r4, #96]	; 0x60
}
   2069a:	4628      	mov	r0, r5
   2069c:	b003      	add	sp, #12
   2069e:	bd30      	pop	{r4, r5, pc}
    BLE_LL_ASSERT(connsm);
   206a0:	f7f4 f828 	bl	146f4 <hal_debugger_connected>
   206a4:	b100      	cbz	r0, 206a8 <ble_ll_conn_event_start_cb+0xa4>
   206a6:	be01      	bkpt	0x0001
   206a8:	2300      	movs	r3, #0
   206aa:	461a      	mov	r2, r3
   206ac:	4619      	mov	r1, r3
   206ae:	4618      	mov	r0, r3
   206b0:	f7f8 fb3e 	bl	18d30 <__assert_func>
        STATS_INC(ble_ll_conn_stats, sched_start_in_idle);
   206b4:	4a2a      	ldr	r2, [pc, #168]	; (20760 <ble_ll_conn_event_start_cb+0x15c>)
   206b6:	6f53      	ldr	r3, [r2, #116]	; 0x74
   206b8:	3301      	adds	r3, #1
   206ba:	6753      	str	r3, [r2, #116]	; 0x74
        BLE_LL_ASSERT(0);
   206bc:	f7f4 f81a 	bl	146f4 <hal_debugger_connected>
   206c0:	b100      	cbz	r0, 206c4 <ble_ll_conn_event_start_cb+0xc0>
   206c2:	be01      	bkpt	0x0001
   206c4:	2300      	movs	r3, #0
   206c6:	461a      	mov	r2, r3
   206c8:	4619      	mov	r1, r3
   206ca:	4618      	mov	r0, r3
   206cc:	f7f8 fb30 	bl	18d30 <__assert_func>
        start = sch->start_time + g_ble_ll_sched_offset_ticks;
   206d0:	6868      	ldr	r0, [r5, #4]
   206d2:	4b22      	ldr	r3, [pc, #136]	; (2075c <ble_ll_conn_event_start_cb+0x158>)
   206d4:	781b      	ldrb	r3, [r3, #0]
        rc = ble_phy_tx_set_start_time(start, sch->remainder);
   206d6:	78a9      	ldrb	r1, [r5, #2]
   206d8:	4418      	add	r0, r3
   206da:	f005 fdb9 	bl	26250 <ble_phy_tx_set_start_time>
        if (!rc) {
   206de:	b9c0      	cbnz	r0, 20712 <ble_ll_conn_event_start_cb+0x10e>
            if (CONN_F_ENCRYPTED(connsm)) {
   206e0:	78a3      	ldrb	r3, [r4, #2]
   206e2:	f013 0f02 	tst.w	r3, #2
   206e6:	d011      	beq.n	2070c <ble_ll_conn_event_start_cb+0x108>
                ble_phy_encrypt_enable(connsm->enc_data.tx_pkt_cntr,
   206e8:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
   206ec:	2301      	movs	r3, #1
   206ee:	9300      	str	r3, [sp, #0]
   206f0:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   206f4:	f504 7298 	add.w	r2, r4, #304	; 0x130
   206f8:	2100      	movs	r1, #0
   206fa:	f005 fd9f 	bl	2623c <ble_phy_encrypt_enable>
            rc = ble_ll_conn_tx_pdu(connsm);
   206fe:	4620      	mov	r0, r4
   20700:	f7ff fd1e 	bl	20140 <ble_ll_conn_tx_pdu>
            if (!rc) {
   20704:	4605      	mov	r5, r0
   20706:	2800      	cmp	r0, #0
   20708:	d0c4      	beq.n	20694 <ble_ll_conn_event_start_cb+0x90>
   2070a:	e7b6      	b.n	2067a <ble_ll_conn_event_start_cb+0x76>
                ble_phy_encrypt_disable();
   2070c:	f005 fd98 	bl	26240 <ble_phy_encrypt_disable>
   20710:	e7f5      	b.n	206fe <ble_ll_conn_event_start_cb+0xfa>
            STATS_INC(ble_ll_conn_stats, conn_ev_late);
   20712:	4a13      	ldr	r2, [pc, #76]	; (20760 <ble_ll_conn_event_start_cb+0x15c>)
   20714:	6913      	ldr	r3, [r2, #16]
   20716:	3301      	adds	r3, #1
   20718:	6113      	str	r3, [r2, #16]
    if (rc == BLE_LL_SCHED_STATE_DONE) {
   2071a:	e7ae      	b.n	2067a <ble_ll_conn_event_start_cb+0x76>
            ble_phy_encrypt_disable();
   2071c:	f005 fd90 	bl	26240 <ble_phy_encrypt_disable>
   20720:	e79d      	b.n	2065e <ble_ll_conn_event_start_cb+0x5a>
            connsm->csmflags.cfbit.periph_set_last_anchor = 1;
   20722:	7823      	ldrb	r3, [r4, #0]
   20724:	f043 0320 	orr.w	r3, r3, #32
   20728:	7023      	strb	r3, [r4, #0]
            usecs = connsm->periph_cur_tx_win_usecs + 61 +
   2072a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
                    (2 * connsm->periph_cur_window_widening);
   2072e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
            usecs = connsm->periph_cur_tx_win_usecs + 61 +
   20732:	eb02 0243 	add.w	r2, r2, r3, lsl #1
            ble_phy_wfr_enable(BLE_PHY_WFR_ENABLE_RX, 0, usecs);
   20736:	323d      	adds	r2, #61	; 0x3d
   20738:	2100      	movs	r1, #0
   2073a:	4608      	mov	r0, r1
   2073c:	f005 fe22 	bl	26384 <ble_phy_wfr_enable>
    if (rc == BLE_LL_SCHED_STATE_DONE) {
   20740:	e7a8      	b.n	20694 <ble_ll_conn_event_start_cb+0x90>
        BLE_LL_ASSERT(0);
   20742:	f7f3 ffd7 	bl	146f4 <hal_debugger_connected>
   20746:	b100      	cbz	r0, 2074a <ble_ll_conn_event_start_cb+0x146>
   20748:	be01      	bkpt	0x0001
   2074a:	2300      	movs	r3, #0
   2074c:	461a      	mov	r2, r3
   2074e:	4619      	mov	r1, r3
   20750:	4618      	mov	r0, r3
   20752:	f7f8 faed 	bl	18d30 <__assert_func>
   20756:	bf00      	nop
   20758:	10004468 	.word	0x10004468
   2075c:	10004930 	.word	0x10004930
   20760:	100043dc 	.word	0x100043dc

00020764 <ble_ll_conn_itvl_to_ticks>:
{
   20764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20766:	460f      	mov	r7, r1
   20768:	4616      	mov	r6, r2
    *itvl_ticks = ble_ll_tmr_u2t_r(itvl * BLE_LL_CONN_ITVL_USECS, itvl_usecs);
   2076a:	f240 44e2 	movw	r4, #1250	; 0x4e2
   2076e:	fb04 f400 	mul.w	r4, r4, r0
    if (usecs <= 31249) {
   20772:	f647 2311 	movw	r3, #31249	; 0x7a11
   20776:	429c      	cmp	r4, r3
   20778:	d80d      	bhi.n	20796 <ble_ll_conn_itvl_to_ticks+0x32>
        return (usecs * 137439) / 4194304;
   2077a:	4d0b      	ldr	r5, [pc, #44]	; (207a8 <ble_ll_conn_itvl_to_ticks+0x44>)
   2077c:	fb05 f504 	mul.w	r5, r5, r4
   20780:	0dad      	lsrs	r5, r5, #22
    return os_cputime_ticks_to_usecs(ticks);
   20782:	4628      	mov	r0, r5
   20784:	f013 fbc8 	bl	33f18 <os_cputime_ticks_to_usecs>
    *rem_us = usecs - ble_ll_tmr_t2u(ticks);
   20788:	1a24      	subs	r4, r4, r0
   2078a:	b2e4      	uxtb	r4, r4
   2078c:	7034      	strb	r4, [r6, #0]
    if (*rem_us == USECS_PER_TICK) {
   2078e:	2c1f      	cmp	r4, #31
   20790:	d006      	beq.n	207a0 <ble_ll_conn_itvl_to_ticks+0x3c>
   20792:	603d      	str	r5, [r7, #0]
}
   20794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return os_cputime_usecs_to_ticks(usecs);
   20796:	4620      	mov	r0, r4
   20798:	f013 fbb6 	bl	33f08 <os_cputime_usecs_to_ticks>
   2079c:	4605      	mov	r5, r0
   2079e:	e7f0      	b.n	20782 <ble_ll_conn_itvl_to_ticks+0x1e>
        *rem_us = 0;
   207a0:	2300      	movs	r3, #0
   207a2:	7033      	strb	r3, [r6, #0]
        ticks++;
   207a4:	3501      	adds	r5, #1
   207a6:	e7f4      	b.n	20792 <ble_ll_conn_itvl_to_ticks+0x2e>
   207a8:	000218df 	.word	0x000218df

000207ac <ble_ll_conn_is_lru>:
    if (LL_TMR_LT(s1->last_scheduled, s2->last_scheduled)) {
   207ac:	6e03      	ldr	r3, [r0, #96]	; 0x60
   207ae:	6e0a      	ldr	r2, [r1, #96]	; 0x60
   207b0:	1a9b      	subs	r3, r3, r2
   207b2:	2b00      	cmp	r3, #0
   207b4:	db01      	blt.n	207ba <ble_ll_conn_is_lru+0xe>
        rc = 0;
   207b6:	2000      	movs	r0, #0
}
   207b8:	4770      	bx	lr
        rc = 1;
   207ba:	2001      	movs	r0, #1
   207bc:	4770      	bx	lr
	...

000207c0 <ble_ll_conn_get_ce_end_time>:
{
   207c0:	b508      	push	{r3, lr}
    if (g_ble_ll_conn_cur_sm) {
   207c2:	4b04      	ldr	r3, [pc, #16]	; (207d4 <ble_ll_conn_get_ce_end_time+0x14>)
   207c4:	681b      	ldr	r3, [r3, #0]
   207c6:	b10b      	cbz	r3, 207cc <ble_ll_conn_get_ce_end_time+0xc>
        ce_end_time = g_ble_ll_conn_cur_sm->ce_end_time;
   207c8:	6d98      	ldr	r0, [r3, #88]	; 0x58
}
   207ca:	bd08      	pop	{r3, pc}
    return os_cputime_get32();
   207cc:	f013 fb97 	bl	33efe <os_cputime_get32>
    return ce_end_time;
   207d0:	e7fb      	b.n	207ca <ble_ll_conn_get_ce_end_time+0xa>
   207d2:	bf00      	nop
   207d4:	10004468 	.word	0x10004468

000207d8 <ble_ll_conn_find_active_conn>:
    if ((handle != 0) && (handle <= MYNEWT_VAL(BLE_MAX_CONNECTIONS))) {
   207d8:	2801      	cmp	r0, #1
   207da:	d108      	bne.n	207ee <ble_ll_conn_find_active_conn+0x16>
        connsm = &g_ble_ll_conn_sm[handle - 1];
   207dc:	3801      	subs	r0, #1
   207de:	4b06      	ldr	r3, [pc, #24]	; (207f8 <ble_ll_conn_find_active_conn+0x20>)
   207e0:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   207e4:	fb02 3000 	mla	r0, r2, r0, r3
        if (connsm->conn_state == BLE_LL_CONN_STATE_IDLE) {
   207e8:	7983      	ldrb	r3, [r0, #6]
   207ea:	b113      	cbz	r3, 207f2 <ble_ll_conn_find_active_conn+0x1a>
}
   207ec:	4770      	bx	lr
    connsm = NULL;
   207ee:	2000      	movs	r0, #0
   207f0:	4770      	bx	lr
            connsm = NULL;
   207f2:	2000      	movs	r0, #0
    return connsm;
   207f4:	e7fa      	b.n	207ec <ble_ll_conn_find_active_conn+0x14>
   207f6:	bf00      	nop
   207f8:	10004490 	.word	0x10004490

000207fc <ble_ll_conn_sm_get>:
    connsm = STAILQ_FIRST(&g_ble_ll_conn_free_list);
   207fc:	4b07      	ldr	r3, [pc, #28]	; (2081c <ble_ll_conn_sm_get+0x20>)
   207fe:	6818      	ldr	r0, [r3, #0]
    if (connsm) {
   20800:	b138      	cbz	r0, 20812 <ble_ll_conn_sm_get+0x16>
        STAILQ_REMOVE_HEAD(&g_ble_ll_conn_free_list, free_stqe);
   20802:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   20806:	4a05      	ldr	r2, [pc, #20]	; (2081c <ble_ll_conn_sm_get+0x20>)
   20808:	6013      	str	r3, [r2, #0]
   2080a:	b103      	cbz	r3, 2080e <ble_ll_conn_sm_get+0x12>
}
   2080c:	4770      	bx	lr
        STAILQ_REMOVE_HEAD(&g_ble_ll_conn_free_list, free_stqe);
   2080e:	6052      	str	r2, [r2, #4]
   20810:	4770      	bx	lr
        STATS_INC(ble_ll_conn_stats, no_free_conn_sm);
   20812:	4a03      	ldr	r2, [pc, #12]	; (20820 <ble_ll_conn_sm_get+0x24>)
   20814:	6a13      	ldr	r3, [r2, #32]
   20816:	3301      	adds	r3, #1
   20818:	6213      	str	r3, [r2, #32]
    return connsm;
   2081a:	e7f7      	b.n	2080c <ble_ll_conn_sm_get+0x10>
   2081c:	1000446c 	.word	0x1000446c
   20820:	100043dc 	.word	0x100043dc

00020824 <ble_ll_conn_calc_dci>:
{
   20824:	b538      	push	{r3, r4, r5, lr}
   20826:	4605      	mov	r5, r0
   20828:	460c      	mov	r4, r1
    index = conn->data_chan_index;
   2082a:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
    while (latency > 0) {
   2082e:	b12c      	cbz	r4, 2083c <ble_ll_conn_calc_dci+0x18>
        index = ble_ll_conn_calc_dci_csa1(conn);
   20830:	4628      	mov	r0, r5
   20832:	f7ff fb49 	bl	1fec8 <ble_ll_conn_calc_dci_csa1>
        latency--;
   20836:	3c01      	subs	r4, #1
   20838:	b2a4      	uxth	r4, r4
   2083a:	e7f8      	b.n	2082e <ble_ll_conn_calc_dci+0xa>
}
   2083c:	bd38      	pop	{r3, r4, r5, pc}
	...

00020840 <ble_ll_conn_next_event>:
 *
 * @return int
 */
static int
ble_ll_conn_next_event(struct ble_ll_conn_sm *connsm)
{
   20840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20842:	4604      	mov	r4, r0
#endif
    struct ble_ll_conn_upd_req *upd;
    uint32_t usecs;

    /* XXX: deal with connection request procedure here as well */
    ble_ll_conn_chk_csm_flags(connsm);
   20844:	f7ff fc19 	bl	2007a <ble_ll_conn_chk_csm_flags>

    /* If unable to start terminate procedure, start it now */
    if (connsm->disconnect_reason && !CONN_F_TERMINATE_STARTED(connsm)) {
   20848:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2084c:	b11b      	cbz	r3, 20856 <ble_ll_conn_next_event+0x16>
   2084e:	f994 3000 	ldrsb.w	r3, [r4]
   20852:	2b00      	cmp	r3, #0
   20854:	da66      	bge.n	20924 <ble_ll_conn_next_event+0xe4>
        ble_ll_ctrl_terminate_start(connsm);
    }

    if (CONN_F_TERMINATE_STARTED(connsm) && CONN_IS_PERIPHERAL(connsm)) {
   20856:	7821      	ldrb	r1, [r4, #0]
   20858:	f994 3000 	ldrsb.w	r3, [r4]
   2085c:	2b00      	cmp	r3, #0
   2085e:	db65      	blt.n	2092c <ble_ll_conn_next_event+0xec>
     * latency if we are doing one of these updates as long as we
     * know that the central has received the ACK to the PDU that set
     * the instant
     */
    /* Set event counter to the next connection event that we will tx/rx in */
    itvl = connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   20860:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
   20864:	f240 45e2 	movw	r5, #1250	; 0x4e2
   20868:	fb05 f500 	mul.w	r5, r5, r0
    latency = 1;
    if (connsm->csmflags.cfbit.allow_periph_latency     &&
        !connsm->csmflags.cfbit.conn_update_sched       &&
        !CONN_F_PHY_UPDATE_SCHED(connsm)                &&
   2086c:	6822      	ldr	r2, [r4, #0]
   2086e:	4bad      	ldr	r3, [pc, #692]	; (20b24 <ble_ll_conn_next_event+0x2e4>)
   20870:	4013      	ands	r3, r2
    if (connsm->csmflags.cfbit.allow_periph_latency     &&
   20872:	2b10      	cmp	r3, #16
   20874:	d061      	beq.n	2093a <ble_ll_conn_next_event+0xfa>
    latency = 1;
   20876:	2601      	movs	r6, #1
        if (connsm->csmflags.cfbit.pkt_rxd) {
            latency += connsm->periph_latency;
            itvl = itvl * latency;
        }
    }
    connsm->event_cntr += latency;
   20878:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
   2087c:	4433      	add	r3, r6
   2087e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46

    /* Set next connection event start time */
    /* We can use pre-calculated values for one interval if latency is 1. */
    if (latency == 1) {
   20882:	2e01      	cmp	r6, #1
   20884:	d065      	beq.n	20952 <ble_ll_conn_next_event+0x112>
    if (usecs <= 31249) {
   20886:	f647 2311 	movw	r3, #31249	; 0x7a11
   2088a:	429d      	cmp	r5, r3
   2088c:	f200 8082 	bhi.w	20994 <ble_ll_conn_next_event+0x154>
        return (usecs * 137439) / 4194304;
   20890:	4fa5      	ldr	r7, [pc, #660]	; (20b28 <ble_ll_conn_next_event+0x2e8>)
   20892:	fb07 f705 	mul.w	r7, r7, r5
   20896:	0dbf      	lsrs	r7, r7, #22
    return os_cputime_ticks_to_usecs(ticks);
   20898:	4638      	mov	r0, r7
   2089a:	f013 fb3d 	bl	33f18 <os_cputime_ticks_to_usecs>
    *rem_us = usecs - ble_ll_tmr_t2u(ticks);
   2089e:	1a2d      	subs	r5, r5, r0
   208a0:	b2ed      	uxtb	r5, r5
    if (*rem_us == USECS_PER_TICK) {
   208a2:	2d1f      	cmp	r5, #31
   208a4:	d07b      	beq.n	2099e <ble_ll_conn_next_event+0x15e>
    *ticks += t_ticks;
   208a6:	6f20      	ldr	r0, [r4, #112]	; 0x70
   208a8:	4438      	add	r0, r7
   208aa:	6720      	str	r0, [r4, #112]	; 0x70
    *rem_us += t_rem_us;
   208ac:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
   208b0:	4405      	add	r5, r0
   208b2:	b2ed      	uxtb	r5, r5
   208b4:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    if (*rem_us >= USECS_PER_TICK) {
   208b8:	2d1e      	cmp	r5, #30
   208ba:	d905      	bls.n	208c8 <ble_ll_conn_next_event+0x88>
        *rem_us -= USECS_PER_TICK;
   208bc:	3d1f      	subs	r5, #31
   208be:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
        *ticks += 1;
   208c2:	6f23      	ldr	r3, [r4, #112]	; 0x70
   208c4:	3301      	adds	r3, #1
   208c6:	6723      	str	r3, [r4, #112]	; 0x70
     * If a connection update has been scheduled and the event counter
     * is now equal to the instant, we need to adjust the start of the
     * connection by the the transmit window offset. We also copy in the
     * update parameters as they now should take effect.
     */
    if (connsm->csmflags.cfbit.conn_update_sched &&
   208c8:	7863      	ldrb	r3, [r4, #1]
   208ca:	f013 0f01 	tst.w	r3, #1
   208ce:	d005      	beq.n	208dc <ble_ll_conn_next_event+0x9c>
        (connsm->event_cntr == connsm->conn_update_req.instant)) {
   208d0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
   208d4:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
    if (connsm->csmflags.cfbit.conn_update_sched &&
   208d8:	429a      	cmp	r2, r3
   208da:	d063      	beq.n	209a4 <ble_ll_conn_next_event+0x164>
     * counter, when we get here the event counter has already been
     * incremented by 1. That is why we do a signed comparison and change to
     * new channel map once the event counter equals or has passed channel
     * map update instant.
     */
    if (connsm->csmflags.cfbit.chanmap_update_scheduled &&
   208dc:	7863      	ldrb	r3, [r4, #1]
   208de:	f013 0f10 	tst.w	r3, #16
   208e2:	d007      	beq.n	208f4 <ble_ll_conn_next_event+0xb4>
        ((int16_t)(connsm->chanmap_instant - connsm->event_cntr) <= 0)) {
   208e4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   208e6:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
   208ea:	1a9b      	subs	r3, r3, r2
   208ec:	b21b      	sxth	r3, r3
    if (connsm->csmflags.cfbit.chanmap_update_scheduled &&
   208ee:	2b00      	cmp	r3, #0
   208f0:	f340 80d2 	ble.w	20a98 <ble_ll_conn_next_event+0x258>
#endif
    }
#endif

    /* Calculate data channel index of next connection event */
    connsm->data_chan_index = ble_ll_conn_calc_dci(connsm, latency);
   208f4:	4631      	mov	r1, r6
   208f6:	4620      	mov	r0, r4
   208f8:	f7ff ff94 	bl	20824 <ble_ll_conn_calc_dci>
   208fc:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    /*
     * If we are trying to terminate connection, check if next wake time is
     * passed the termination timeout. If so, no need to continue with
     * connection as we will time out anyway.
     */
    if (CONN_F_TERMINATE_STARTED(connsm)) {
   20900:	f994 3000 	ldrsb.w	r3, [r4]
   20904:	2b00      	cmp	r3, #0
   20906:	f2c0 80de 	blt.w	20ac6 <ble_ll_conn_next_event+0x286>
#else
    itvl = ble_ll_tmr_u2t(MYNEWT_VAL(BLE_LL_CONN_INIT_SLOTS) *
                          BLE_LL_SCHED_USECS_PER_SLOT);
#endif
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
    if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   2090a:	79e3      	ldrb	r3, [r4, #7]
   2090c:	2b02      	cmp	r3, #2
   2090e:	f000 80e3 	beq.w	20ad8 <ble_ll_conn_next_event+0x298>
    itvl = ble_ll_tmr_u2t(MYNEWT_VAL(BLE_LL_CONN_INIT_SLOTS) *
   20912:	20a3      	movs	r0, #163	; 0xa3
        cur_ww += BLE_LL_JITTER_USECS;
        connsm->periph_cur_window_widening = cur_ww;
        itvl += ble_ll_tmr_u2t(cur_ww + connsm->periph_cur_tx_win_usecs);
    }
#endif
    itvl -= g_ble_ll_sched_offset_ticks;
   20914:	4b85      	ldr	r3, [pc, #532]	; (20b2c <ble_ll_conn_next_event+0x2ec>)
   20916:	781b      	ldrb	r3, [r3, #0]
   20918:	1ac0      	subs	r0, r0, r3
    connsm->ce_end_time = connsm->anchor_point + itvl;
   2091a:	6f23      	ldr	r3, [r4, #112]	; 0x70
   2091c:	4418      	add	r0, r3
   2091e:	65a0      	str	r0, [r4, #88]	; 0x58

    return 0;
   20920:	2000      	movs	r0, #0
}
   20922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ble_ll_ctrl_terminate_start(connsm);
   20924:	4620      	mov	r0, r4
   20926:	f002 fa4b 	bl	22dc0 <ble_ll_ctrl_terminate_start>
   2092a:	e794      	b.n	20856 <ble_ll_conn_next_event+0x16>
    if (CONN_F_TERMINATE_STARTED(connsm) && CONN_IS_PERIPHERAL(connsm)) {
   2092c:	79e3      	ldrb	r3, [r4, #7]
   2092e:	2b02      	cmp	r3, #2
   20930:	d196      	bne.n	20860 <ble_ll_conn_next_event+0x20>
        connsm->periph_latency = 0;
   20932:	2300      	movs	r3, #0
   20934:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
   20938:	e792      	b.n	20860 <ble_ll_conn_next_event+0x20>
        if (connsm->csmflags.cfbit.pkt_rxd) {
   2093a:	f011 0f01 	tst.w	r1, #1
   2093e:	d006      	beq.n	2094e <ble_ll_conn_next_event+0x10e>
            latency += connsm->periph_latency;
   20940:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
   20944:	3601      	adds	r6, #1
   20946:	b2b6      	uxth	r6, r6
            itvl = itvl * latency;
   20948:	fb06 f505 	mul.w	r5, r6, r5
   2094c:	e794      	b.n	20878 <ble_ll_conn_next_event+0x38>
    latency = 1;
   2094e:	2601      	movs	r6, #1
   20950:	e792      	b.n	20878 <ble_ll_conn_next_event+0x38>
        connsm->anchor_point += connsm->conn_itvl_ticks;
   20952:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   20954:	6f23      	ldr	r3, [r4, #112]	; 0x70
   20956:	4413      	add	r3, r2
   20958:	6723      	str	r3, [r4, #112]	; 0x70
        ble_ll_tmr_add_u(&connsm->anchor_point, &connsm->anchor_point_usecs,
   2095a:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    BLE_LL_ASSERT(usecs < USECS_PER_TICK);
   2095e:	2b1e      	cmp	r3, #30
   20960:	d80e      	bhi.n	20980 <ble_ll_conn_next_event+0x140>
    *rem_us += usecs;
   20962:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   20966:	4413      	add	r3, r2
   20968:	b2db      	uxtb	r3, r3
   2096a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    if (*rem_us >= USECS_PER_TICK) {
   2096e:	2b1e      	cmp	r3, #30
   20970:	d9aa      	bls.n	208c8 <ble_ll_conn_next_event+0x88>
        *rem_us -= USECS_PER_TICK;
   20972:	3b1f      	subs	r3, #31
   20974:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
        *ticks += 1;
   20978:	6f23      	ldr	r3, [r4, #112]	; 0x70
   2097a:	3301      	adds	r3, #1
   2097c:	6723      	str	r3, [r4, #112]	; 0x70
    }
}
   2097e:	e7a3      	b.n	208c8 <ble_ll_conn_next_event+0x88>
    BLE_LL_ASSERT(usecs < USECS_PER_TICK);
   20980:	f7f3 feb8 	bl	146f4 <hal_debugger_connected>
   20984:	b100      	cbz	r0, 20988 <ble_ll_conn_next_event+0x148>
   20986:	be01      	bkpt	0x0001
   20988:	2300      	movs	r3, #0
   2098a:	461a      	mov	r2, r3
   2098c:	4619      	mov	r1, r3
   2098e:	4618      	mov	r0, r3
   20990:	f7f8 f9ce 	bl	18d30 <__assert_func>
    return os_cputime_usecs_to_ticks(usecs);
   20994:	4628      	mov	r0, r5
   20996:	f013 fab7 	bl	33f08 <os_cputime_usecs_to_ticks>
   2099a:	4607      	mov	r7, r0
   2099c:	e77c      	b.n	20898 <ble_ll_conn_next_event+0x58>
        ticks++;
   2099e:	3701      	adds	r7, #1
        *rem_us = 0;
   209a0:	2500      	movs	r5, #0
   209a2:	e780      	b.n	208a6 <ble_ll_conn_next_event+0x66>
        if (CONN_IS_CENTRAL(connsm) ||
   209a4:	79e3      	ldrb	r3, [r4, #7]
   209a6:	2b01      	cmp	r3, #1
   209a8:	d007      	beq.n	209ba <ble_ll_conn_next_event+0x17a>
   209aa:	2b02      	cmp	r3, #2
   209ac:	d034      	beq.n	20a18 <ble_ll_conn_next_event+0x1d8>
            (connsm->conn_itvl != upd->interval) ||
   209ae:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
   209b2:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
             IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) ||
   209b6:	429a      	cmp	r2, r3
   209b8:	d034      	beq.n	20a24 <ble_ll_conn_next_event+0x1e4>
            connsm->csmflags.cfbit.host_expects_upd_event = 1;
   209ba:	7863      	ldrb	r3, [r4, #1]
   209bc:	f043 0302 	orr.w	r3, r3, #2
   209c0:	7063      	strb	r3, [r4, #1]
        connsm->supervision_tmo = upd->timeout;
   209c2:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
   209c6:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
        connsm->periph_latency = upd->latency;
   209ca:	f8b4 317c 	ldrh.w	r3, [r4, #380]	; 0x17c
   209ce:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        connsm->tx_win_size = upd->winsize;
   209d2:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
   209d6:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
            connsm->tx_win_size * BLE_LL_CONN_TX_WIN_USECS;
   209da:	f240 43e2 	movw	r3, #1250	; 0x4e2
   209de:	fb03 f302 	mul.w	r3, r3, r2
        connsm->periph_cur_tx_win_usecs =
   209e2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        connsm->tx_win_off = upd->winoffset;
   209e6:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
   209ea:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
        connsm->conn_itvl = upd->interval;
   209ee:	f8b4 017a 	ldrh.w	r0, [r4, #378]	; 0x17a
   209f2:	f8a4 0064 	strh.w	r0, [r4, #100]	; 0x64
        ble_ll_conn_itvl_to_ticks(connsm->conn_itvl, &connsm->conn_itvl_ticks,
   209f6:	f104 0275 	add.w	r2, r4, #117	; 0x75
   209fa:	f104 0178 	add.w	r1, r4, #120	; 0x78
   209fe:	f7ff feb1 	bl	20764 <ble_ll_conn_itvl_to_ticks>
        if (upd->winoffset != 0) {
   20a02:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
   20a06:	b9d3      	cbnz	r3, 20a3e <ble_ll_conn_next_event+0x1fe>
        connsm->last_rxd_pdu_cputime = connsm->anchor_point;
   20a08:	6f23      	ldr	r3, [r4, #112]	; 0x70
   20a0a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        connsm->csmflags.cfbit.conn_update_sched = 0;
   20a0e:	7863      	ldrb	r3, [r4, #1]
   20a10:	f36f 0300 	bfc	r3, #0, #1
   20a14:	7063      	strb	r3, [r4, #1]
   20a16:	e761      	b.n	208dc <ble_ll_conn_next_event+0x9c>
             IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) ||
   20a18:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
            (CONN_IS_PERIPHERAL(connsm) &&
   20a1c:	f013 0f40 	tst.w	r3, #64	; 0x40
   20a20:	d1cb      	bne.n	209ba <ble_ll_conn_next_event+0x17a>
   20a22:	e7c4      	b.n	209ae <ble_ll_conn_next_event+0x16e>
            (connsm->periph_latency != upd->latency) ||
   20a24:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
   20a28:	f8b4 317c 	ldrh.w	r3, [r4, #380]	; 0x17c
            (connsm->conn_itvl != upd->interval) ||
   20a2c:	429a      	cmp	r2, r3
   20a2e:	d1c4      	bne.n	209ba <ble_ll_conn_next_event+0x17a>
            (connsm->supervision_tmo != upd->timeout)) {
   20a30:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
   20a34:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
            (connsm->periph_latency != upd->latency) ||
   20a38:	429a      	cmp	r2, r3
   20a3a:	d1be      	bne.n	209ba <ble_ll_conn_next_event+0x17a>
   20a3c:	e7c1      	b.n	209c2 <ble_ll_conn_next_event+0x182>
            usecs = upd->winoffset * BLE_LL_CONN_ITVL_USECS;
   20a3e:	f240 45e2 	movw	r5, #1250	; 0x4e2
   20a42:	fb05 f503 	mul.w	r5, r5, r3
    if (usecs <= 31249) {
   20a46:	f647 2311 	movw	r3, #31249	; 0x7a11
   20a4a:	429d      	cmp	r5, r3
   20a4c:	d81c      	bhi.n	20a88 <ble_ll_conn_next_event+0x248>
        return (usecs * 137439) / 4194304;
   20a4e:	4f36      	ldr	r7, [pc, #216]	; (20b28 <ble_ll_conn_next_event+0x2e8>)
   20a50:	fb07 f705 	mul.w	r7, r7, r5
   20a54:	0dbf      	lsrs	r7, r7, #22
    return os_cputime_ticks_to_usecs(ticks);
   20a56:	4638      	mov	r0, r7
   20a58:	f013 fa5e 	bl	33f18 <os_cputime_ticks_to_usecs>
    *rem_us = usecs - ble_ll_tmr_t2u(ticks);
   20a5c:	1a2b      	subs	r3, r5, r0
   20a5e:	b2db      	uxtb	r3, r3
    if (*rem_us == USECS_PER_TICK) {
   20a60:	2b1f      	cmp	r3, #31
   20a62:	d016      	beq.n	20a92 <ble_ll_conn_next_event+0x252>
    *ticks += t_ticks;
   20a64:	6f22      	ldr	r2, [r4, #112]	; 0x70
   20a66:	4417      	add	r7, r2
   20a68:	6727      	str	r7, [r4, #112]	; 0x70
    *rem_us += t_rem_us;
   20a6a:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   20a6e:	4413      	add	r3, r2
   20a70:	b2db      	uxtb	r3, r3
   20a72:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    if (*rem_us >= USECS_PER_TICK) {
   20a76:	2b1e      	cmp	r3, #30
   20a78:	d9c6      	bls.n	20a08 <ble_ll_conn_next_event+0x1c8>
        *rem_us -= USECS_PER_TICK;
   20a7a:	3b1f      	subs	r3, #31
   20a7c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
        *ticks += 1;
   20a80:	463b      	mov	r3, r7
   20a82:	3301      	adds	r3, #1
   20a84:	6723      	str	r3, [r4, #112]	; 0x70
}
   20a86:	e7bf      	b.n	20a08 <ble_ll_conn_next_event+0x1c8>
    return os_cputime_usecs_to_ticks(usecs);
   20a88:	4628      	mov	r0, r5
   20a8a:	f013 fa3d 	bl	33f08 <os_cputime_usecs_to_ticks>
   20a8e:	4607      	mov	r7, r0
   20a90:	e7e1      	b.n	20a56 <ble_ll_conn_next_event+0x216>
        ticks++;
   20a92:	3701      	adds	r7, #1
        *rem_us = 0;
   20a94:	2300      	movs	r3, #0
   20a96:	e7e5      	b.n	20a64 <ble_ll_conn_next_event+0x224>
            ble_ll_utils_calc_num_used_chans(connsm->req_chanmap);
   20a98:	f104 0521 	add.w	r5, r4, #33	; 0x21
   20a9c:	4628      	mov	r0, r5
   20a9e:	f005 faf0 	bl	26082 <ble_ll_utils_calc_num_used_chans>
        connsm->num_used_chans =
   20aa2:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
        memcpy(connsm->chanmap, connsm->req_chanmap, BLE_LL_CONN_CHMAP_LEN);
   20aa6:	f8d4 3021 	ldr.w	r3, [r4, #33]	; 0x21
   20aaa:	61e3      	str	r3, [r4, #28]
   20aac:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   20ab0:	f884 3020 	strb.w	r3, [r4, #32]
        connsm->csmflags.cfbit.chanmap_update_scheduled = 0;
   20ab4:	7863      	ldrb	r3, [r4, #1]
   20ab6:	f36f 1304 	bfc	r3, #4, #1
   20aba:	7063      	strb	r3, [r4, #1]
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CHAN_MAP_UPD);
   20abc:	2101      	movs	r1, #1
   20abe:	4620      	mov	r0, r4
   20ac0:	f002 fa28 	bl	22f14 <ble_ll_ctrl_proc_stop>
   20ac4:	e716      	b.n	208f4 <ble_ll_conn_next_event+0xb4>
        if ((int32_t)(connsm->terminate_timeout - connsm->anchor_point) <= 0) {
   20ac6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   20ac8:	6f22      	ldr	r2, [r4, #112]	; 0x70
   20aca:	1a9b      	subs	r3, r3, r2
   20acc:	2b00      	cmp	r3, #0
   20ace:	f73f af1c 	bgt.w	2090a <ble_ll_conn_next_event+0xca>
            return -1;
   20ad2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20ad6:	e724      	b.n	20922 <ble_ll_conn_next_event+0xe2>
        cur_ww = ble_ll_utils_calc_window_widening(connsm->anchor_point,
   20ad8:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
   20adc:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   20ade:	6f20      	ldr	r0, [r4, #112]	; 0x70
   20ae0:	f005 faee 	bl	260c0 <ble_ll_utils_calc_window_widening>
        max_ww = (connsm->conn_itvl * (BLE_LL_CONN_ITVL_USECS/2)) - BLE_LL_IFS;
   20ae4:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
   20ae8:	f240 2371 	movw	r3, #625	; 0x271
   20aec:	fb03 f302 	mul.w	r3, r3, r2
   20af0:	3b96      	subs	r3, #150	; 0x96
        if (cur_ww >= max_ww) {
   20af2:	4298      	cmp	r0, r3
   20af4:	d212      	bcs.n	20b1c <ble_ll_conn_next_event+0x2dc>
        cur_ww += BLE_LL_JITTER_USECS;
   20af6:	3010      	adds	r0, #16
        connsm->periph_cur_window_widening = cur_ww;
   20af8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
        itvl += ble_ll_tmr_u2t(cur_ww + connsm->periph_cur_tx_win_usecs);
   20afc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   20b00:	4418      	add	r0, r3
    if (usecs <= 31249) {
   20b02:	f647 2311 	movw	r3, #31249	; 0x7a11
   20b06:	4298      	cmp	r0, r3
   20b08:	d805      	bhi.n	20b16 <ble_ll_conn_next_event+0x2d6>
        return (usecs * 137439) / 4194304;
   20b0a:	4b07      	ldr	r3, [pc, #28]	; (20b28 <ble_ll_conn_next_event+0x2e8>)
   20b0c:	fb03 f000 	mul.w	r0, r3, r0
   20b10:	0d80      	lsrs	r0, r0, #22
   20b12:	30a3      	adds	r0, #163	; 0xa3
   20b14:	e6fe      	b.n	20914 <ble_ll_conn_next_event+0xd4>
    return os_cputime_usecs_to_ticks(usecs);
   20b16:	f013 f9f7 	bl	33f08 <os_cputime_usecs_to_ticks>
   20b1a:	e7fa      	b.n	20b12 <ble_ll_conn_next_event+0x2d2>
            return -1;
   20b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20b20:	e6ff      	b.n	20922 <ble_ll_conn_next_event+0xe2>
   20b22:	bf00      	nop
   20b24:	00401110 	.word	0x00401110
   20b28:	000218df 	.word	0x000218df
   20b2c:	10004930 	.word	0x10004930

00020b30 <ble_ll_conn_created>:
 *
 * @ return 0: connection NOT created. 1: connection created
 */
static int
ble_ll_conn_created(struct ble_ll_conn_sm *connsm, struct ble_mbuf_hdr *rxhdr)
{
   20b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20b32:	4604      	mov	r4, r0
   20b34:	460d      	mov	r5, r1
#endif

    /* XXX: TODO this assumes we received in 1M phy */

    /* Set state to created */
    connsm->conn_state = BLE_LL_CONN_STATE_CREATED;
   20b36:	2301      	movs	r3, #1
   20b38:	7183      	strb	r3, [r0, #6]

    /* Clear packet received flag */
    connsm->csmflags.cfbit.pkt_rxd = 0;
   20b3a:	7803      	ldrb	r3, [r0, #0]
   20b3c:	f36f 0300 	bfc	r3, #0, #1
   20b40:	7003      	strb	r3, [r0, #0]
    return os_cputime_get32();
   20b42:	f013 f9dc 	bl	33efe <os_cputime_get32>

    /* Consider time created the last scheduled time */
    connsm->last_scheduled = ble_ll_tmr_get();
   20b46:	6620      	str	r0, [r4, #96]	; 0x60

    /*
     * Set the last rxd pdu time since this is where we want to start the
     * supervision timer from.
     */
    connsm->last_rxd_pdu_cputime = connsm->last_scheduled;
   20b48:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
     * time of the connect request. The actual connection starts 1.25 msecs plus
     * the transmit window offset from the end of the connection request.
     */
    rc = 1;
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
    if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   20b4c:	79e3      	ldrb	r3, [r4, #7]
   20b4e:	2b02      	cmp	r3, #2
   20b50:	d00c      	beq.n	20b6c <ble_ll_conn_created+0x3c>
         */
        if (!ble_ll_conn_chk_phy_upd_start(connsm)) {
            CONN_F_CTRLR_PHY_UPDATE(connsm) = 1;
        }
#endif
        switch (connsm->conn_role) {
   20b52:	79e3      	ldrb	r3, [r4, #7]
   20b54:	2b01      	cmp	r3, #1
   20b56:	f000 808a 	beq.w	20c6e <ble_ll_conn_created+0x13e>
   20b5a:	2b02      	cmp	r3, #2
   20b5c:	f040 8095 	bne.w	20c8a <ble_ll_conn_created+0x15a>
            ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG);
            break;
#endif
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
        case BLE_LL_CONN_ROLE_PERIPHERAL:
            ble_ll_adv_send_conn_comp_ev(connsm, rxhdr);
   20b60:	4629      	mov	r1, r5
   20b62:	4620      	mov	r0, r4
   20b64:	f7ff f944 	bl	1fdf0 <ble_ll_adv_send_conn_comp_ev>
            break;
   20b68:	2001      	movs	r0, #1
   20b6a:	e08d      	b.n	20c88 <ble_ll_conn_created+0x158>
        connsm->last_anchor_point = rxhdr->beg_cputime;
   20b6c:	68ab      	ldr	r3, [r5, #8]
   20b6e:	67e3      	str	r3, [r4, #124]	; 0x7c
        usecs = rxhdr->rem_usecs + 1250 +
   20b70:	68ee      	ldr	r6, [r5, #12]
                (connsm->tx_win_off * BLE_LL_CONN_TX_WIN_USECS) +
   20b72:	f8b4 006e 	ldrh.w	r0, [r4, #110]	; 0x6e
        usecs = rxhdr->rem_usecs + 1250 +
   20b76:	f240 43e2 	movw	r3, #1250	; 0x4e2
   20b7a:	fb03 6600 	mla	r6, r3, r0, r6
                ble_ll_pdu_tx_time_get(BLE_CONNECT_REQ_LEN,
   20b7e:	79a9      	ldrb	r1, [r5, #6]
   20b80:	2022      	movs	r0, #34	; 0x22
   20b82:	f7fe f983 	bl	1ee8c <ble_ll_pdu_tx_time_get>
                (connsm->tx_win_off * BLE_LL_CONN_TX_WIN_USECS) +
   20b86:	4430      	add	r0, r6
        usecs = rxhdr->rem_usecs + 1250 +
   20b88:	f200 46e2 	addw	r6, r0, #1250	; 0x4e2
        if (rxhdr->rxinfo.channel < BLE_PHY_NUM_DATA_CHANS) {
   20b8c:	78ab      	ldrb	r3, [r5, #2]
   20b8e:	2b24      	cmp	r3, #36	; 0x24
   20b90:	d816      	bhi.n	20bc0 <ble_ll_conn_created+0x90>
            switch (rxhdr->rxinfo.phy) {
   20b92:	f995 3005 	ldrsb.w	r3, [r5, #5]
   20b96:	2b02      	cmp	r3, #2
   20b98:	dc0b      	bgt.n	20bb2 <ble_ll_conn_created+0x82>
   20b9a:	2b00      	cmp	r3, #0
   20b9c:	dc0e      	bgt.n	20bbc <ble_ll_conn_created+0x8c>
                BLE_LL_ASSERT(0);
   20b9e:	f7f3 fda9 	bl	146f4 <hal_debugger_connected>
   20ba2:	b100      	cbz	r0, 20ba6 <ble_ll_conn_created+0x76>
   20ba4:	be01      	bkpt	0x0001
   20ba6:	2300      	movs	r3, #0
   20ba8:	461a      	mov	r2, r3
   20baa:	4619      	mov	r1, r3
   20bac:	4618      	mov	r0, r3
   20bae:	f7f8 f8bf 	bl	18d30 <__assert_func>
            switch (rxhdr->rxinfo.phy) {
   20bb2:	2b03      	cmp	r3, #3
   20bb4:	d1f3      	bne.n	20b9e <ble_ll_conn_created+0x6e>
                usecs += 2500;
   20bb6:	f600 66a6 	addw	r6, r0, #3750	; 0xea6
                break;
   20bba:	e001      	b.n	20bc0 <ble_ll_conn_created+0x90>
                usecs += 1250;
   20bbc:	f600 16c4 	addw	r6, r0, #2500	; 0x9c4
        connsm->anchor_point = rxhdr->beg_cputime;
   20bc0:	68ab      	ldr	r3, [r5, #8]
   20bc2:	6723      	str	r3, [r4, #112]	; 0x70
        connsm->anchor_point_usecs = 0;
   20bc4:	2300      	movs	r3, #0
   20bc6:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    if (usecs <= 31249) {
   20bca:	f647 2311 	movw	r3, #31249	; 0x7a11
   20bce:	429e      	cmp	r6, r3
   20bd0:	d842      	bhi.n	20c58 <ble_ll_conn_created+0x128>
        return (usecs * 137439) / 4194304;
   20bd2:	4f33      	ldr	r7, [pc, #204]	; (20ca0 <ble_ll_conn_created+0x170>)
   20bd4:	fb07 f706 	mul.w	r7, r7, r6
   20bd8:	0dbf      	lsrs	r7, r7, #22
    return os_cputime_ticks_to_usecs(ticks);
   20bda:	4638      	mov	r0, r7
   20bdc:	f013 f99c 	bl	33f18 <os_cputime_ticks_to_usecs>
    *rem_us = usecs - ble_ll_tmr_t2u(ticks);
   20be0:	1a36      	subs	r6, r6, r0
   20be2:	b2f6      	uxtb	r6, r6
    if (*rem_us == USECS_PER_TICK) {
   20be4:	2e1f      	cmp	r6, #31
   20be6:	d03c      	beq.n	20c62 <ble_ll_conn_created+0x132>
    *ticks += t_ticks;
   20be8:	6f20      	ldr	r0, [r4, #112]	; 0x70
   20bea:	4438      	add	r0, r7
   20bec:	6720      	str	r0, [r4, #112]	; 0x70
    *rem_us += t_rem_us;
   20bee:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   20bf2:	441e      	add	r6, r3
   20bf4:	b2f3      	uxtb	r3, r6
   20bf6:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    if (*rem_us >= USECS_PER_TICK) {
   20bfa:	2b1e      	cmp	r3, #30
   20bfc:	d905      	bls.n	20c0a <ble_ll_conn_created+0xda>
        *rem_us -= USECS_PER_TICK;
   20bfe:	3b1f      	subs	r3, #31
   20c00:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
        *ticks += 1;
   20c04:	4603      	mov	r3, r0
   20c06:	3301      	adds	r3, #1
   20c08:	6723      	str	r3, [r4, #112]	; 0x70
            connsm->tx_win_size * BLE_LL_CONN_TX_WIN_USECS;
   20c0a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   20c0e:	f240 40e2 	movw	r0, #1250	; 0x4e2
   20c12:	fb00 f003 	mul.w	r0, r0, r3
        connsm->periph_cur_tx_win_usecs =
   20c16:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
        connsm->ce_end_time = connsm->anchor_point +
   20c1a:	6f26      	ldr	r6, [r4, #112]	; 0x70
                              ble_ll_tmr_u2t(MYNEWT_VAL(BLE_LL_CONN_INIT_SLOTS) *
   20c1c:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
   20c20:	3008      	adds	r0, #8
    if (usecs <= 31249) {
   20c22:	f647 2311 	movw	r3, #31249	; 0x7a11
   20c26:	4298      	cmp	r0, r3
   20c28:	d81e      	bhi.n	20c68 <ble_ll_conn_created+0x138>
        return (usecs * 137439) / 4194304;
   20c2a:	4b1d      	ldr	r3, [pc, #116]	; (20ca0 <ble_ll_conn_created+0x170>)
   20c2c:	fb03 f000 	mul.w	r0, r3, r0
   20c30:	0d80      	lsrs	r0, r0, #22
        connsm->ce_end_time = connsm->anchor_point +
   20c32:	4406      	add	r6, r0
                                             connsm->periph_cur_tx_win_usecs) + 1;
   20c34:	3601      	adds	r6, #1
        connsm->ce_end_time = connsm->anchor_point +
   20c36:	65a6      	str	r6, [r4, #88]	; 0x58
        while (ble_ll_sched_conn_periph_new(connsm)) {
   20c38:	4620      	mov	r0, r4
   20c3a:	f005 f823 	bl	25c84 <ble_ll_sched_conn_periph_new>
   20c3e:	2800      	cmp	r0, #0
   20c40:	d087      	beq.n	20b52 <ble_ll_conn_created+0x22>
            if (ble_ll_conn_next_event(connsm)) {
   20c42:	4620      	mov	r0, r4
   20c44:	f7ff fdfc 	bl	20840 <ble_ll_conn_next_event>
   20c48:	2800      	cmp	r0, #0
   20c4a:	d0f5      	beq.n	20c38 <ble_ll_conn_created+0x108>
                STATS_INC(ble_ll_conn_stats, cant_set_sched);
   20c4c:	4a15      	ldr	r2, [pc, #84]	; (20ca4 <ble_ll_conn_created+0x174>)
   20c4e:	68d3      	ldr	r3, [r2, #12]
   20c50:	3301      	adds	r3, #1
   20c52:	60d3      	str	r3, [r2, #12]
                rc = 0;
   20c54:	2000      	movs	r0, #0
   20c56:	e017      	b.n	20c88 <ble_ll_conn_created+0x158>
    return os_cputime_usecs_to_ticks(usecs);
   20c58:	4630      	mov	r0, r6
   20c5a:	f013 f955 	bl	33f08 <os_cputime_usecs_to_ticks>
   20c5e:	4607      	mov	r7, r0
   20c60:	e7bb      	b.n	20bda <ble_ll_conn_created+0xaa>
        ticks++;
   20c62:	3701      	adds	r7, #1
        *rem_us = 0;
   20c64:	2600      	movs	r6, #0
   20c66:	e7bf      	b.n	20be8 <ble_ll_conn_created+0xb8>
    return os_cputime_usecs_to_ticks(usecs);
   20c68:	f013 f94e 	bl	33f08 <os_cputime_usecs_to_ticks>
   20c6c:	e7e1      	b.n	20c32 <ble_ll_conn_created+0x102>
            evbuf = ble_ll_init_get_conn_comp_ev();
   20c6e:	f7ff f9b1 	bl	1ffd4 <ble_ll_init_get_conn_comp_ev>
   20c72:	4602      	mov	r2, r0
            ble_ll_conn_comp_event_send(connsm, BLE_ERR_SUCCESS, evbuf, NULL);
   20c74:	2300      	movs	r3, #0
   20c76:	4619      	mov	r1, r3
   20c78:	4620      	mov	r0, r4
   20c7a:	f000 fe87 	bl	2198c <ble_ll_conn_comp_event_send>
            ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG);
   20c7e:	2103      	movs	r1, #3
   20c80:	4620      	mov	r0, r4
   20c82:	f002 f8cf 	bl	22e24 <ble_ll_ctrl_proc_start>
            break;
   20c86:	2001      	movs	r0, #1
            break;
        }
    }

    return rc;
}
   20c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            BLE_LL_ASSERT(0);
   20c8a:	f7f3 fd33 	bl	146f4 <hal_debugger_connected>
   20c8e:	b100      	cbz	r0, 20c92 <ble_ll_conn_created+0x162>
   20c90:	be01      	bkpt	0x0001
   20c92:	2300      	movs	r3, #0
   20c94:	461a      	mov	r2, r3
   20c96:	4619      	mov	r1, r3
   20c98:	4618      	mov	r0, r3
   20c9a:	f7f8 f849 	bl	18d30 <__assert_func>
   20c9e:	bf00      	nop
   20ca0:	000218df 	.word	0x000218df
   20ca4:	100043dc 	.word	0x100043dc

00020ca8 <ble_ll_conn_set_csa>:
{
   20ca8:	b510      	push	{r4, lr}
   20caa:	4604      	mov	r4, r0
    connsm->last_unmapped_chan = 0;
   20cac:	2300      	movs	r3, #0
   20cae:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    connsm->data_chan_index = ble_ll_conn_calc_dci(connsm, 1);
   20cb2:	2101      	movs	r1, #1
   20cb4:	f7ff fdb6 	bl	20824 <ble_ll_conn_calc_dci>
   20cb8:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
}
   20cbc:	bd10      	pop	{r4, pc}
	...

00020cc0 <ble_ll_conn_central_start>:
}

static void
ble_ll_conn_central_start(uint8_t phy, uint8_t csa,
                          struct ble_ll_scan_addr_data *addrd, uint8_t *targeta)
{
   20cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20cc2:	460f      	mov	r7, r1
   20cc4:	4614      	mov	r4, r2
   20cc6:	461e      	mov	r6, r3
    struct ble_ll_conn_sm *connsm;

    connsm = g_ble_ll_conn_create_sm.connsm;
   20cc8:	4b2d      	ldr	r3, [pc, #180]	; (20d80 <ble_ll_conn_central_start+0xc0>)
   20cca:	681d      	ldr	r5, [r3, #0]
    g_ble_ll_conn_create_sm.connsm = NULL;
   20ccc:	2200      	movs	r2, #0
   20cce:	601a      	str	r2, [r3, #0]

    connsm->peer_addr_type = addrd->adv_addr_type;
   20cd0:	7b23      	ldrb	r3, [r4, #12]
   20cd2:	f3c3 0380 	ubfx	r3, r3, #2, #1
   20cd6:	f885 308e 	strb.w	r3, [r5, #142]	; 0x8e
    memcpy(connsm->peer_addr, addrd->adv_addr, 6);
   20cda:	68a3      	ldr	r3, [r4, #8]
   20cdc:	681a      	ldr	r2, [r3, #0]
   20cde:	f8c5 208f 	str.w	r2, [r5, #143]	; 0x8f
   20ce2:	889b      	ldrh	r3, [r3, #4]
   20ce4:	f8a5 3093 	strh.w	r3, [r5, #147]	; 0x93

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    if (addrd->adva_resolved) {
   20ce8:	7b23      	ldrb	r3, [r4, #12]
   20cea:	f013 0f08 	tst.w	r3, #8
   20cee:	d019      	beq.n	20d24 <ble_ll_conn_central_start+0x64>
        BLE_LL_ASSERT(addrd->rpa_index >= 0);
   20cf0:	f994 300d 	ldrsb.w	r3, [r4, #13]
   20cf4:	2b00      	cmp	r3, #0
   20cf6:	db0b      	blt.n	20d10 <ble_ll_conn_central_start+0x50>
        connsm->peer_addr_resolved = 1;
   20cf8:	2301      	movs	r3, #1
   20cfa:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95
        ble_ll_resolv_set_peer_rpa(addrd->rpa_index, addrd->adva);
   20cfe:	6821      	ldr	r1, [r4, #0]
   20d00:	f994 000d 	ldrsb.w	r0, [r4, #13]
   20d04:	f003 fedc 	bl	24ac0 <ble_ll_resolv_set_peer_rpa>
        ble_ll_scan_set_peer_rpa(addrd->adva);
   20d08:	6820      	ldr	r0, [r4, #0]
   20d0a:	f004 fd8f 	bl	2582c <ble_ll_scan_set_peer_rpa>
   20d0e:	e00c      	b.n	20d2a <ble_ll_conn_central_start+0x6a>
        BLE_LL_ASSERT(addrd->rpa_index >= 0);
   20d10:	f7f3 fcf0 	bl	146f4 <hal_debugger_connected>
   20d14:	b100      	cbz	r0, 20d18 <ble_ll_conn_central_start+0x58>
   20d16:	be01      	bkpt	0x0001
   20d18:	2300      	movs	r3, #0
   20d1a:	461a      	mov	r2, r3
   20d1c:	4619      	mov	r1, r3
   20d1e:	4618      	mov	r0, r3
   20d20:	f7f8 f806 	bl	18d30 <__assert_func>
    } else {
        connsm->peer_addr_resolved = 0;
   20d24:	2300      	movs	r3, #0
   20d26:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95
    }

    if (addrd->targeta_resolved) {
   20d2a:	7b23      	ldrb	r3, [r4, #12]
   20d2c:	f013 0f10 	tst.w	r3, #16
   20d30:	d007      	beq.n	20d42 <ble_ll_conn_central_start+0x82>
        BLE_LL_ASSERT(addrd->rpa_index >= 0);
   20d32:	f994 000d 	ldrsb.w	r0, [r4, #13]
   20d36:	2800      	cmp	r0, #0
   20d38:	db0e      	blt.n	20d58 <ble_ll_conn_central_start+0x98>
        BLE_LL_ASSERT(targeta);
   20d3a:	b1be      	cbz	r6, 20d6c <ble_ll_conn_central_start+0xac>
        ble_ll_resolv_set_local_rpa(addrd->rpa_index, targeta);
   20d3c:	4631      	mov	r1, r6
   20d3e:	f003 fed3 	bl	24ae8 <ble_ll_resolv_set_local_rpa>
    }
#endif

    ble_ll_conn_set_csa(connsm, csa);
   20d42:	1e39      	subs	r1, r7, #0
   20d44:	bf18      	it	ne
   20d46:	2101      	movne	r1, #1
   20d48:	4628      	mov	r0, r5
   20d4a:	f7ff ffad 	bl	20ca8 <ble_ll_conn_set_csa>
#if BLE_LL_BT5_PHY_SUPPORTED
    ble_ll_conn_init_phy(connsm, phy);
#endif
    ble_ll_conn_created(connsm, NULL);
   20d4e:	2100      	movs	r1, #0
   20d50:	4628      	mov	r0, r5
   20d52:	f7ff feed 	bl	20b30 <ble_ll_conn_created>
}
   20d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BLE_LL_ASSERT(addrd->rpa_index >= 0);
   20d58:	f7f3 fccc 	bl	146f4 <hal_debugger_connected>
   20d5c:	b100      	cbz	r0, 20d60 <ble_ll_conn_central_start+0xa0>
   20d5e:	be01      	bkpt	0x0001
   20d60:	2300      	movs	r3, #0
   20d62:	461a      	mov	r2, r3
   20d64:	4619      	mov	r1, r3
   20d66:	4618      	mov	r0, r3
   20d68:	f7f7 ffe2 	bl	18d30 <__assert_func>
        BLE_LL_ASSERT(targeta);
   20d6c:	f7f3 fcc2 	bl	146f4 <hal_debugger_connected>
   20d70:	b100      	cbz	r0, 20d74 <ble_ll_conn_central_start+0xb4>
   20d72:	be01      	bkpt	0x0001
   20d74:	2300      	movs	r3, #0
   20d76:	461a      	mov	r2, r3
   20d78:	4619      	mov	r1, r3
   20d7a:	4618      	mov	r0, r3
   20d7c:	f7f7 ffd8 	bl	18d30 <__assert_func>
   20d80:	10004464 	.word	0x10004464

00020d84 <ble_ll_conn_auth_pyld_timer_start>:
{
   20d84:	b510      	push	{r4, lr}
   20d86:	4604      	mov	r4, r0
    tmo = (int32_t)BLE_LL_CONN_AUTH_PYLD_OS_TMO(connsm->auth_pyld_tmo);
   20d88:	f8b0 004e 	ldrh.w	r0, [r0, #78]	; 0x4e
   20d8c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
os_time_ms_to_ticks32(uint32_t ms)
{
#if OS_TICKS_PER_SEC == 1000
    return ms;
#else
    return ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   20d90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20d94:	2300      	movs	r3, #0
   20d96:	0200      	lsls	r0, r0, #8
   20d98:	2100      	movs	r1, #0
   20d9a:	f7f3 faaf 	bl	142fc <__aeabi_uldivmod>
   20d9e:	4601      	mov	r1, r0
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   20da0:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
   20da4:	f7f8 fa0c 	bl	191c0 <os_callout_reset>
}
   20da8:	bd10      	pop	{r4, pc}

00020daa <ble_ll_conn_auth_pyld_timer_cb>:
{
   20daa:	b510      	push	{r4, lr}
    return ev->ev.ev_arg;
   20dac:	6884      	ldr	r4, [r0, #8]
    ble_ll_auth_pyld_tmo_event_send(connsm);
   20dae:	4620      	mov	r0, r4
   20db0:	f000 ff42 	bl	21c38 <ble_ll_auth_pyld_tmo_event_send>
    ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_LE_PING);
   20db4:	2107      	movs	r1, #7
   20db6:	4620      	mov	r0, r4
   20db8:	f002 f834 	bl	22e24 <ble_ll_ctrl_proc_start>
    ble_ll_conn_auth_pyld_timer_start(connsm);
   20dbc:	4620      	mov	r0, r4
   20dbe:	f7ff ffe1 	bl	20d84 <ble_ll_conn_auth_pyld_timer_start>
}
   20dc2:	bd10      	pop	{r4, pc}

00020dc4 <ble_ll_conn_central_init>:
{
   20dc4:	b570      	push	{r4, r5, r6, lr}
   20dc6:	4604      	mov	r4, r0
   20dc8:	460e      	mov	r6, r1
   20dca:	4615      	mov	r5, r2
    ble_ll_conn_central_common_init(connsm);
   20dcc:	f7ff f8cc 	bl	1ff68 <ble_ll_conn_central_common_init>
    connsm->own_addr_type = cc_scan->own_addr_type;
   20dd0:	7873      	ldrb	r3, [r6, #1]
   20dd2:	f884 308d 	strb.w	r3, [r4, #141]	; 0x8d
    memcpy(&connsm->peer_addr, &cc_scan->peer_addr, BLE_DEV_ADDR_LEN);
   20dd6:	4633      	mov	r3, r6
   20dd8:	f853 2f03 	ldr.w	r2, [r3, #3]!
   20ddc:	f8c4 208f 	str.w	r2, [r4, #143]	; 0x8f
   20de0:	889b      	ldrh	r3, [r3, #4]
   20de2:	f8a4 3093 	strh.w	r3, [r4, #147]	; 0x93
    connsm->peer_addr_type = cc_scan->peer_addr_type;
   20de6:	78b3      	ldrb	r3, [r6, #2]
   20de8:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
    connsm->conn_itvl = cc_params->conn_itvl;
   20dec:	682b      	ldr	r3, [r5, #0]
   20dee:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    connsm->conn_itvl_ticks = cc_params->conn_itvl_ticks;
   20df2:	686b      	ldr	r3, [r5, #4]
   20df4:	67a3      	str	r3, [r4, #120]	; 0x78
    connsm->conn_itvl_usecs = cc_params->conn_itvl_usecs;
   20df6:	7a2b      	ldrb	r3, [r5, #8]
   20df8:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    connsm->periph_latency = cc_params->conn_latency;
   20dfc:	896b      	ldrh	r3, [r5, #10]
   20dfe:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    connsm->supervision_tmo = cc_params->supervision_timeout;
   20e02:	89ab      	ldrh	r3, [r5, #12]
   20e04:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    connsm->min_ce_len = cc_params->min_ce_len;
   20e08:	89eb      	ldrh	r3, [r5, #14]
   20e0a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    connsm->max_ce_len = cc_params->max_ce_len;
   20e0e:	8a2b      	ldrh	r3, [r5, #16]
   20e10:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
}
   20e14:	bd70      	pop	{r4, r5, r6, pc}
	...

00020e18 <ble_ll_conn_sm_new>:
{
   20e18:	b538      	push	{r3, r4, r5, lr}
   20e1a:	4604      	mov	r4, r0
    connsm->csmflags.conn_flags = 0;
   20e1c:	2100      	movs	r1, #0
   20e1e:	6001      	str	r1, [r0, #0]
    connsm->event_cntr = 0;
   20e20:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
    connsm->conn_state = BLE_LL_CONN_STATE_IDLE;
   20e24:	7181      	strb	r1, [r0, #6]
    connsm->disconnect_reason = 0;
   20e26:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    connsm->rxd_disconnect_reason = 0;
   20e2a:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
    connsm->conn_features = BLE_LL_CONN_INITIAL_FEATURES;
   20e2e:	2322      	movs	r3, #34	; 0x22
   20e30:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
    memset(connsm->remote_features, 0, sizeof(connsm->remote_features));
   20e34:	63c1      	str	r1, [r0, #60]	; 0x3c
   20e36:	f8c0 103f 	str.w	r1, [r0, #63]	; 0x3f
    connsm->vers_nr = 0;
   20e3a:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    connsm->comp_id = 0;
   20e3e:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
    connsm->sub_vers_nr = 0;
   20e42:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    connsm->reject_reason = BLE_ERR_SUCCESS;
   20e46:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    connsm->conn_rssi = BLE_LL_CONN_UNKNOWN_RSSI;
   20e4a:	237f      	movs	r3, #127	; 0x7f
   20e4c:	7203      	strb	r3, [r0, #8]
    connsm->inita_identity_used = 0;
   20e4e:	f880 108c 	strb.w	r1, [r0, #140]	; 0x8c
    connsm->cur_ctrl_proc = BLE_LL_CTRL_PROC_IDLE;
   20e52:	23ff      	movs	r3, #255	; 0xff
   20e54:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
    connsm->pending_ctrl_procs = 0;
   20e58:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    connsm->conn_param_req.handle = 0;
   20e5c:	f8a0 1168 	strh.w	r1, [r0, #360]	; 0x168
    memset(ev, 0, sizeof(*ev));
   20e60:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
   20e64:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
    ev->ev.ev_queued = 0;
   20e68:	f880 1098 	strb.w	r1, [r0, #152]	; 0x98
    ev->ev.ev_cb = (os_event_fn *)fn;
   20e6c:	4b23      	ldr	r3, [pc, #140]	; (20efc <ble_ll_conn_sm_new+0xe4>)
   20e6e:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    ev->ev.ev_arg = arg;
   20e72:	f8c0 00a0 	str.w	r0, [r0, #160]	; 0xa0
    STAILQ_INIT(&connsm->conn_txq);
   20e76:	4603      	mov	r3, r0
   20e78:	f843 1fac 	str.w	r1, [r3, #172]!
   20e7c:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
    connsm->cur_tx_pdu = NULL;
   20e80:	f8c0 10a8 	str.w	r1, [r0, #168]	; 0xa8
    connsm->tx_seqnum = 0;
   20e84:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
    connsm->next_exp_seqnum = 0;
   20e88:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
    connsm->cons_rxd_bad_crc = 0;
   20e8c:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
    connsm->last_rxd_sn = 1;
   20e90:	2501      	movs	r5, #1
   20e92:	f880 5031 	strb.w	r5, [r0, #49]	; 0x31
    connsm->completed_pkts = 0;
   20e96:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
    connsm->max_tx_octets = conn_params->conn_init_max_tx_octets;
   20e9a:	4b19      	ldr	r3, [pc, #100]	; (20f00 <ble_ll_conn_sm_new+0xe8>)
   20e9c:	7a1a      	ldrb	r2, [r3, #8]
   20e9e:	7242      	strb	r2, [r0, #9]
    connsm->max_rx_octets = conn_params->supp_max_rx_octets;
   20ea0:	79da      	ldrb	r2, [r3, #7]
   20ea2:	7282      	strb	r2, [r0, #10]
    connsm->max_tx_time = conn_params->conn_init_max_tx_time;
   20ea4:	899a      	ldrh	r2, [r3, #12]
   20ea6:	8202      	strh	r2, [r0, #16]
    connsm->max_rx_time = conn_params->supp_max_rx_time;
   20ea8:	8a9b      	ldrh	r3, [r3, #20]
   20eaa:	8243      	strh	r3, [r0, #18]
    connsm->rem_max_tx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   20eac:	f44f 73a4 	mov.w	r3, #328	; 0x148
   20eb0:	8283      	strh	r3, [r0, #20]
    connsm->rem_max_rx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   20eb2:	82c3      	strh	r3, [r0, #22]
    connsm->eff_max_tx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   20eb4:	8303      	strh	r3, [r0, #24]
    connsm->eff_max_rx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   20eb6:	8343      	strh	r3, [r0, #26]
    connsm->rem_max_tx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   20eb8:	231b      	movs	r3, #27
   20eba:	72c3      	strb	r3, [r0, #11]
    connsm->rem_max_rx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   20ebc:	7303      	strb	r3, [r0, #12]
    connsm->eff_max_tx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   20ebe:	7343      	strb	r3, [r0, #13]
    connsm->eff_max_rx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   20ec0:	7383      	strb	r3, [r0, #14]
    memset(&connsm->enc_data, 0, sizeof(struct ble_ll_conn_enc_data));
   20ec2:	2250      	movs	r2, #80	; 0x50
   20ec4:	f500 708c 	add.w	r0, r0, #280	; 0x118
   20ec8:	f7f9 fee7 	bl	1ac9a <memset>
    connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   20ecc:	f884 5118 	strb.w	r5, [r4, #280]	; 0x118
    connsm->auth_pyld_tmo = BLE_LL_CONN_DEF_AUTH_PYLD_TMO;
   20ed0:	f640 33b8 	movw	r3, #3000	; 0xbb8
   20ed4:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
    CONN_F_LE_PING_SUPP(connsm) = 1;
   20ed8:	78a3      	ldrb	r3, [r4, #2]
   20eda:	f043 0308 	orr.w	r3, r3, #8
   20ede:	70a3      	strb	r3, [r4, #2]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   20ee0:	4623      	mov	r3, r4
   20ee2:	4a08      	ldr	r2, [pc, #32]	; (20f04 <ble_ll_conn_sm_new+0xec>)
   20ee4:	4908      	ldr	r1, [pc, #32]	; (20f08 <ble_ll_conn_sm_new+0xf0>)
   20ee6:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
   20eea:	f7f8 f93d 	bl	19168 <os_callout_init>
    SLIST_INSERT_HEAD(&g_ble_ll_conn_active_list, connsm, act_sle);
   20eee:	4b07      	ldr	r3, [pc, #28]	; (20f0c <ble_ll_conn_sm_new+0xf4>)
   20ef0:	681a      	ldr	r2, [r3, #0]
   20ef2:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
   20ef6:	601c      	str	r4, [r3, #0]
}
   20ef8:	bd38      	pop	{r3, r4, r5, pc}
   20efa:	bf00      	nop
   20efc:	00021085 	.word	0x00021085
   20f00:	10004474 	.word	0x10004474
   20f04:	00020dab 	.word	0x00020dab
   20f08:	100040f8 	.word	0x100040f8
   20f0c:	1000445c 	.word	0x1000445c

00020f10 <ble_ll_conn_update_eff_data_len>:
{
   20f10:	b508      	push	{r3, lr}
    eff_time = min(connsm->rem_max_tx_time, connsm->max_rx_time);
   20f12:	8a43      	ldrh	r3, [r0, #18]
   20f14:	8a82      	ldrh	r2, [r0, #20]
   20f16:	4293      	cmp	r3, r2
   20f18:	bf28      	it	cs
   20f1a:	4613      	movcs	r3, r2
    if (eff_time != connsm->eff_max_rx_time) {
   20f1c:	8b42      	ldrh	r2, [r0, #26]
   20f1e:	429a      	cmp	r2, r3
   20f20:	d021      	beq.n	20f66 <ble_ll_conn_update_eff_data_len+0x56>
        connsm->eff_max_rx_time = eff_time;
   20f22:	8343      	strh	r3, [r0, #26]
        send_event = 1;
   20f24:	2201      	movs	r2, #1
    eff_time = min(connsm->rem_max_rx_time, connsm->max_tx_time);
   20f26:	8a03      	ldrh	r3, [r0, #16]
   20f28:	8ac1      	ldrh	r1, [r0, #22]
   20f2a:	428b      	cmp	r3, r1
   20f2c:	bf28      	it	cs
   20f2e:	460b      	movcs	r3, r1
    if (eff_time != connsm->eff_max_tx_time) {
   20f30:	8b01      	ldrh	r1, [r0, #24]
   20f32:	4299      	cmp	r1, r3
   20f34:	d001      	beq.n	20f3a <ble_ll_conn_update_eff_data_len+0x2a>
        connsm->eff_max_tx_time = eff_time;
   20f36:	8303      	strh	r3, [r0, #24]
        send_event = 1;
   20f38:	2201      	movs	r2, #1
    eff_bytes = min(connsm->rem_max_tx_octets, connsm->max_rx_octets);
   20f3a:	7a83      	ldrb	r3, [r0, #10]
   20f3c:	7ac1      	ldrb	r1, [r0, #11]
   20f3e:	428b      	cmp	r3, r1
   20f40:	bf28      	it	cs
   20f42:	460b      	movcs	r3, r1
    if (eff_bytes != connsm->eff_max_rx_octets) {
   20f44:	7b81      	ldrb	r1, [r0, #14]
   20f46:	428b      	cmp	r3, r1
   20f48:	d001      	beq.n	20f4e <ble_ll_conn_update_eff_data_len+0x3e>
        connsm->eff_max_rx_octets = eff_bytes;
   20f4a:	7383      	strb	r3, [r0, #14]
        send_event = 1;
   20f4c:	2201      	movs	r2, #1
    eff_bytes = min(connsm->rem_max_rx_octets, connsm->max_tx_octets);
   20f4e:	7a43      	ldrb	r3, [r0, #9]
   20f50:	7b01      	ldrb	r1, [r0, #12]
   20f52:	428b      	cmp	r3, r1
   20f54:	bf28      	it	cs
   20f56:	460b      	movcs	r3, r1
    if (eff_bytes != connsm->eff_max_tx_octets) {
   20f58:	7b41      	ldrb	r1, [r0, #13]
   20f5a:	428b      	cmp	r3, r1
   20f5c:	d005      	beq.n	20f6a <ble_ll_conn_update_eff_data_len+0x5a>
        connsm->eff_max_tx_octets = eff_bytes;
   20f5e:	7343      	strb	r3, [r0, #13]
        ble_ll_hci_ev_datalen_chg(connsm);
   20f60:	f003 f84e 	bl	24000 <ble_ll_hci_ev_datalen_chg>
}
   20f64:	bd08      	pop	{r3, pc}
    send_event = 0;
   20f66:	2200      	movs	r2, #0
   20f68:	e7dd      	b.n	20f26 <ble_ll_conn_update_eff_data_len+0x16>
    if (send_event) {
   20f6a:	2a00      	cmp	r2, #0
   20f6c:	d0fa      	beq.n	20f64 <ble_ll_conn_update_eff_data_len+0x54>
   20f6e:	e7f7      	b.n	20f60 <ble_ll_conn_update_eff_data_len+0x50>

00020f70 <ble_ll_conn_end>:
{
   20f70:	b570      	push	{r4, r5, r6, lr}
   20f72:	4604      	mov	r4, r0
   20f74:	460d      	mov	r5, r1
    ble_ll_sched_rmv_elem(&connsm->conn_sch);
   20f76:	30d8      	adds	r0, #216	; 0xd8
   20f78:	f004 ff80 	bl	25e7c <ble_ll_sched_rmv_elem>
    OS_ENTER_CRITICAL(sr);
   20f7c:	f7f9 fc94 	bl	1a8a8 <os_arch_save_sr>
   20f80:	4606      	mov	r6, r0
    if (g_ble_ll_conn_cur_sm == connsm) {
   20f82:	4b3b      	ldr	r3, [pc, #236]	; (21070 <ble_ll_conn_end+0x100>)
   20f84:	681b      	ldr	r3, [r3, #0]
   20f86:	42a3      	cmp	r3, r4
   20f88:	d020      	beq.n	20fcc <ble_ll_conn_end+0x5c>
    OS_EXIT_CRITICAL(sr);
   20f8a:	4630      	mov	r0, r6
   20f8c:	f7f9 fc92 	bl	1a8b4 <os_arch_restore_sr>
}

static inline void
ble_npl_callout_stop(struct ble_npl_callout *co)
{
    os_callout_stop(&co->co);
   20f90:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   20f94:	f7f8 f8f6 	bl	19184 <os_callout_stop>
   20f98:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
   20f9c:	f7f8 f8f2 	bl	19184 <os_callout_stop>
    SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   20fa0:	4b34      	ldr	r3, [pc, #208]	; (21074 <ble_ll_conn_end+0x104>)
   20fa2:	681b      	ldr	r3, [r3, #0]
   20fa4:	42a3      	cmp	r3, r4
   20fa6:	d018      	beq.n	20fda <ble_ll_conn_end+0x6a>
   20fa8:	461a      	mov	r2, r3
   20faa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   20fae:	42a3      	cmp	r3, r4
   20fb0:	d1fa      	bne.n	20fa8 <ble_ll_conn_end+0x38>
   20fb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   20fb6:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    if (connsm->cur_tx_pdu) {
   20fba:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   20fbe:	b1c0      	cbz	r0, 20ff2 <ble_ll_conn_end+0x82>
        os_mbuf_free_chain(connsm->cur_tx_pdu);
   20fc0:	f7f8 fb05 	bl	195ce <os_mbuf_free_chain>
        connsm->cur_tx_pdu = NULL;
   20fc4:	2300      	movs	r3, #0
   20fc6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   20fca:	e012      	b.n	20ff2 <ble_ll_conn_end+0x82>
        ble_ll_conn_halt();
   20fcc:	f7fe ffa2 	bl	1ff14 <ble_ll_conn_halt>
        STATS_INC(ble_ll_conn_stats, conn_event_while_tmo);
   20fd0:	4a29      	ldr	r2, [pc, #164]	; (21078 <ble_ll_conn_end+0x108>)
   20fd2:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   20fd4:	3301      	adds	r3, #1
   20fd6:	67d3      	str	r3, [r2, #124]	; 0x7c
   20fd8:	e7d7      	b.n	20f8a <ble_ll_conn_end+0x1a>
    SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   20fda:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   20fde:	4b25      	ldr	r3, [pc, #148]	; (21074 <ble_ll_conn_end+0x104>)
   20fe0:	601a      	str	r2, [r3, #0]
   20fe2:	e7ea      	b.n	20fba <ble_ll_conn_end+0x4a>
        STAILQ_REMOVE_HEAD(&connsm->conn_txq, omp_next);
   20fe4:	f104 03ac 	add.w	r3, r4, #172	; 0xac
   20fe8:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
        os_mbuf_free_chain(m);
   20fec:	3810      	subs	r0, #16
   20fee:	f7f8 faee 	bl	195ce <os_mbuf_free_chain>
        pkthdr = STAILQ_FIRST(&connsm->conn_txq);
   20ff2:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
        if (!pkthdr) {
   20ff6:	b128      	cbz	r0, 21004 <ble_ll_conn_end+0x94>
        STAILQ_REMOVE_HEAD(&connsm->conn_txq, omp_next);
   20ff8:	6843      	ldr	r3, [r0, #4]
   20ffa:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
   20ffe:	2b00      	cmp	r3, #0
   21000:	d1f4      	bne.n	20fec <ble_ll_conn_end+0x7c>
   21002:	e7ef      	b.n	20fe4 <ble_ll_conn_end+0x74>
    os_eventq_remove(&evq->evq, &ev->ev);
   21004:	f104 0198 	add.w	r1, r4, #152	; 0x98
   21008:	481c      	ldr	r0, [pc, #112]	; (2107c <ble_ll_conn_end+0x10c>)
   2100a:	f7f8 fa7b 	bl	19504 <os_eventq_remove>
    connsm->conn_state = BLE_LL_CONN_STATE_IDLE;
   2100e:	2300      	movs	r3, #0
   21010:	71a3      	strb	r3, [r4, #6]
    if (connsm->csmflags.cfbit.pending_hci_rd_features &&
   21012:	78e3      	ldrb	r3, [r4, #3]
   21014:	f003 0318 	and.w	r3, r3, #24
   21018:	2b18      	cmp	r3, #24
   2101a:	d017      	beq.n	2104c <ble_ll_conn_end+0xdc>
    if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   2101c:	78e3      	ldrb	r3, [r4, #3]
   2101e:	f013 0f10 	tst.w	r3, #16
   21022:	d11c      	bne.n	2105e <ble_ll_conn_end+0xee>
    if (ble_err && (ble_err != BLE_ERR_UNK_CONN_ID ||
   21024:	b14d      	cbz	r5, 2103a <ble_ll_conn_end+0xca>
   21026:	2d02      	cmp	r5, #2
   21028:	d103      	bne.n	21032 <ble_ll_conn_end+0xc2>
   2102a:	7823      	ldrb	r3, [r4, #0]
   2102c:	f013 0f04 	tst.w	r3, #4
   21030:	d003      	beq.n	2103a <ble_ll_conn_end+0xca>
        ble_ll_disconn_comp_event_send(connsm, ble_err);
   21032:	4629      	mov	r1, r5
   21034:	4620      	mov	r0, r4
   21036:	f000 fe14 	bl	21c62 <ble_ll_disconn_comp_event_send>
    STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   2103a:	2300      	movs	r3, #0
   2103c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
   21040:	4b0f      	ldr	r3, [pc, #60]	; (21080 <ble_ll_conn_end+0x110>)
   21042:	685a      	ldr	r2, [r3, #4]
   21044:	6014      	str	r4, [r2, #0]
   21046:	34b4      	adds	r4, #180	; 0xb4
   21048:	605c      	str	r4, [r3, #4]
}
   2104a:	bd70      	pop	{r4, r5, r6, pc}
        ble_ll_hci_ev_rd_rem_used_feat(connsm, BLE_ERR_SUCCESS);
   2104c:	2100      	movs	r1, #0
   2104e:	4620      	mov	r0, r4
   21050:	f003 f8a2 	bl	24198 <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   21054:	78e3      	ldrb	r3, [r4, #3]
   21056:	f36f 1304 	bfc	r3, #4, #1
   2105a:	70e3      	strb	r3, [r4, #3]
   2105c:	e7de      	b.n	2101c <ble_ll_conn_end+0xac>
        ble_ll_hci_ev_rd_rem_used_feat(connsm, ble_err);
   2105e:	4629      	mov	r1, r5
   21060:	4620      	mov	r0, r4
   21062:	f003 f899 	bl	24198 <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   21066:	78e3      	ldrb	r3, [r4, #3]
   21068:	f36f 1304 	bfc	r3, #4, #1
   2106c:	70e3      	strb	r3, [r4, #3]
   2106e:	e7d9      	b.n	21024 <ble_ll_conn_end+0xb4>
   21070:	10004468 	.word	0x10004468
   21074:	1000445c 	.word	0x1000445c
   21078:	100043dc 	.word	0x100043dc
   2107c:	100040f8 	.word	0x100040f8
   21080:	1000446c 	.word	0x1000446c

00021084 <ble_ll_conn_event_end>:
{
   21084:	b538      	push	{r3, r4, r5, lr}
    return ev->ev.ev_arg;
   21086:	6884      	ldr	r4, [r0, #8]
    BLE_LL_ASSERT(connsm);
   21088:	2c00      	cmp	r4, #0
   2108a:	d038      	beq.n	210fe <ble_ll_conn_event_end+0x7a>
    if (connsm->conn_state == BLE_LL_CONN_STATE_IDLE) {
   2108c:	79a3      	ldrb	r3, [r4, #6]
   2108e:	2b00      	cmp	r3, #0
   21090:	d03f      	beq.n	21112 <ble_ll_conn_event_end+0x8e>
    ble_ll_scan_chk_resume();
   21092:	f004 fa7b 	bl	2558c <ble_ll_scan_chk_resume>
    if ((connsm->csmflags.cfbit.terminate_ind_txd) ||
   21096:	7823      	ldrb	r3, [r4, #0]
   21098:	f013 0202 	ands.w	r2, r3, #2
   2109c:	d147      	bne.n	2112e <ble_ll_conn_event_end+0xaa>
                    (connsm->csmflags.cfbit.terminate_ind_rxd &&
   2109e:	f003 030c 	and.w	r3, r3, #12
    if ((connsm->csmflags.cfbit.terminate_ind_txd) ||
   210a2:	2b0c      	cmp	r3, #12
   210a4:	d043      	beq.n	2112e <ble_ll_conn_event_end+0xaa>
    os_eventq_remove(&evq->evq, &ev->ev);
   210a6:	f104 0198 	add.w	r1, r4, #152	; 0x98
   210aa:	4845      	ldr	r0, [pc, #276]	; (211c0 <ble_ll_conn_event_end+0x13c>)
   210ac:	f7f8 fa2a 	bl	19504 <os_eventq_remove>
    if (connsm->csmflags.cfbit.pkt_rxd) {
   210b0:	7823      	ldrb	r3, [r4, #0]
   210b2:	f013 0f01 	tst.w	r3, #1
   210b6:	d002      	beq.n	210be <ble_ll_conn_event_end+0x3a>
        connsm->periph_cur_tx_win_usecs = 0;
   210b8:	2300      	movs	r3, #0
   210ba:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (ble_ll_conn_next_event(connsm)) {
   210be:	4620      	mov	r0, r4
   210c0:	f7ff fbbe 	bl	20840 <ble_ll_conn_next_event>
   210c4:	2800      	cmp	r0, #0
   210c6:	d13d      	bne.n	21144 <ble_ll_conn_event_end+0xc0>
    connsm->cons_rxd_bad_crc = 0;
   210c8:	2200      	movs	r2, #0
   210ca:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    connsm->csmflags.cfbit.pkt_rxd = 0;
   210ce:	7823      	ldrb	r3, [r4, #0]
   210d0:	f362 0300 	bfi	r3, r2, #0, #1
   210d4:	7023      	strb	r3, [r4, #0]
    ble_ll_ctrl_chk_proc_start(connsm);
   210d6:	4620      	mov	r0, r4
   210d8:	f001 fee4 	bl	22ea4 <ble_ll_ctrl_chk_proc_start>
    connsm->conn_sch.sched_cb = ble_ll_conn_event_start_cb;
   210dc:	4b39      	ldr	r3, [pc, #228]	; (211c4 <ble_ll_conn_event_end+0x140>)
   210de:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    while (ble_ll_sched_conn_reschedule(connsm)) {
   210e2:	4620      	mov	r0, r4
   210e4:	f004 fd5c 	bl	25ba0 <ble_ll_sched_conn_reschedule>
   210e8:	b388      	cbz	r0, 2114e <ble_ll_conn_event_end+0xca>
        if (ble_ll_conn_next_event(connsm)) {
   210ea:	4620      	mov	r0, r4
   210ec:	f7ff fba8 	bl	20840 <ble_ll_conn_next_event>
   210f0:	2800      	cmp	r0, #0
   210f2:	d0f6      	beq.n	210e2 <ble_ll_conn_event_end+0x5e>
            ble_ll_conn_end(connsm, BLE_ERR_CONN_TERM_LOCAL);
   210f4:	2116      	movs	r1, #22
   210f6:	4620      	mov	r0, r4
   210f8:	f7ff ff3a 	bl	20f70 <ble_ll_conn_end>
            return;
   210fc:	e021      	b.n	21142 <ble_ll_conn_event_end+0xbe>
    BLE_LL_ASSERT(connsm);
   210fe:	f7f3 faf9 	bl	146f4 <hal_debugger_connected>
   21102:	b100      	cbz	r0, 21106 <ble_ll_conn_event_end+0x82>
   21104:	be01      	bkpt	0x0001
   21106:	2300      	movs	r3, #0
   21108:	461a      	mov	r2, r3
   2110a:	4619      	mov	r1, r3
   2110c:	4618      	mov	r0, r3
   2110e:	f7f7 fe0f 	bl	18d30 <__assert_func>
        STATS_INC(ble_ll_conn_stats, sched_end_in_idle);
   21112:	4a2d      	ldr	r2, [pc, #180]	; (211c8 <ble_ll_conn_event_end+0x144>)
   21114:	6f93      	ldr	r3, [r2, #120]	; 0x78
   21116:	3301      	adds	r3, #1
   21118:	6793      	str	r3, [r2, #120]	; 0x78
        BLE_LL_ASSERT(0);
   2111a:	f7f3 faeb 	bl	146f4 <hal_debugger_connected>
   2111e:	b100      	cbz	r0, 21122 <ble_ll_conn_event_end+0x9e>
   21120:	be01      	bkpt	0x0001
   21122:	2300      	movs	r3, #0
   21124:	461a      	mov	r2, r3
   21126:	4619      	mov	r1, r3
   21128:	4618      	mov	r0, r3
   2112a:	f7f7 fe01 	bl	18d30 <__assert_func>
        if (connsm->csmflags.cfbit.terminate_ind_txd) {
   2112e:	b922      	cbnz	r2, 2113a <ble_ll_conn_event_end+0xb6>
            ble_err = connsm->rxd_disconnect_reason;
   21130:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
            if (ble_err == 0) {
   21134:	b911      	cbnz	r1, 2113c <ble_ll_conn_event_end+0xb8>
                ble_err = BLE_ERR_REM_USER_CONN_TERM;
   21136:	2113      	movs	r1, #19
   21138:	e000      	b.n	2113c <ble_ll_conn_event_end+0xb8>
            ble_err = BLE_ERR_CONN_TERM_LOCAL;
   2113a:	2116      	movs	r1, #22
        ble_ll_conn_end(connsm, ble_err);
   2113c:	4620      	mov	r0, r4
   2113e:	f7ff ff17 	bl	20f70 <ble_ll_conn_end>
}
   21142:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_conn_end(connsm, BLE_ERR_CONN_TERM_LOCAL);
   21144:	2116      	movs	r1, #22
   21146:	4620      	mov	r0, r4
   21148:	f7ff ff12 	bl	20f70 <ble_ll_conn_end>
        return;
   2114c:	e7f9      	b.n	21142 <ble_ll_conn_event_end+0xbe>
    if (connsm->conn_state == BLE_LL_CONN_STATE_CREATED) {
   2114e:	79a3      	ldrb	r3, [r4, #6]
   21150:	2b01      	cmp	r3, #1
   21152:	d025      	beq.n	211a0 <ble_ll_conn_event_end+0x11c>
        tmo = connsm->supervision_tmo * BLE_HCI_CONN_SPVN_TMO_UNITS * 1000UL;
   21154:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
   21158:	f242 7010 	movw	r0, #10000	; 0x2710
   2115c:	fb00 f003 	mul.w	r0, r0, r3
        ble_err = BLE_ERR_CONN_SPVN_TMO;
   21160:	2508      	movs	r5, #8
    if (usecs <= 31249) {
   21162:	f647 2311 	movw	r3, #31249	; 0x7a11
   21166:	4298      	cmp	r0, r3
   21168:	d822      	bhi.n	211b0 <ble_ll_conn_event_end+0x12c>
        return (usecs * 137439) / 4194304;
   2116a:	4b18      	ldr	r3, [pc, #96]	; (211cc <ble_ll_conn_event_end+0x148>)
   2116c:	fb03 f000 	mul.w	r0, r3, r0
   21170:	0d80      	lsrs	r0, r0, #22
    if ((int32_t)(connsm->anchor_point - connsm->last_rxd_pdu_cputime) >= tmo) {
   21172:	6f23      	ldr	r3, [r4, #112]	; 0x70
   21174:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   21178:	1a9b      	subs	r3, r3, r2
   2117a:	4283      	cmp	r3, r0
   2117c:	d21b      	bcs.n	211b6 <ble_ll_conn_event_end+0x132>
    ble_ll_conn_num_comp_pkts_event_send(connsm);
   2117e:	4620      	mov	r0, r4
   21180:	f000 fce6 	bl	21b50 <ble_ll_conn_num_comp_pkts_event_send>
    if (connsm->csmflags.cfbit.pending_hci_rd_features &&
   21184:	78e3      	ldrb	r3, [r4, #3]
   21186:	f003 0318 	and.w	r3, r3, #24
   2118a:	2b18      	cmp	r3, #24
   2118c:	d1d9      	bne.n	21142 <ble_ll_conn_event_end+0xbe>
        ble_ll_hci_ev_rd_rem_used_feat(connsm, BLE_ERR_SUCCESS);
   2118e:	2100      	movs	r1, #0
   21190:	4620      	mov	r0, r4
   21192:	f003 f801 	bl	24198 <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   21196:	78e3      	ldrb	r3, [r4, #3]
   21198:	f36f 1304 	bfc	r3, #4, #1
   2119c:	70e3      	strb	r3, [r4, #3]
   2119e:	e7d0      	b.n	21142 <ble_ll_conn_event_end+0xbe>
        tmo = (uint32_t)connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS * 6UL;
   211a0:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
   211a4:	f641 504c 	movw	r0, #7500	; 0x1d4c
   211a8:	fb00 f003 	mul.w	r0, r0, r3
        ble_err = BLE_ERR_CONN_ESTABLISHMENT;
   211ac:	253e      	movs	r5, #62	; 0x3e
   211ae:	e7d8      	b.n	21162 <ble_ll_conn_event_end+0xde>
    return os_cputime_usecs_to_ticks(usecs);
   211b0:	f012 feaa 	bl	33f08 <os_cputime_usecs_to_ticks>
   211b4:	e7dd      	b.n	21172 <ble_ll_conn_event_end+0xee>
        ble_ll_conn_end(connsm, ble_err);
   211b6:	4629      	mov	r1, r5
   211b8:	4620      	mov	r0, r4
   211ba:	f7ff fed9 	bl	20f70 <ble_ll_conn_end>
        return;
   211be:	e7c0      	b.n	21142 <ble_ll_conn_event_end+0xbe>
   211c0:	100040f8 	.word	0x100040f8
   211c4:	00020605 	.word	0x00020605
   211c8:	100043dc 	.word	0x100043dc
   211cc:	000218df 	.word	0x000218df

000211d0 <ble_ll_conn_event_halt>:
{
   211d0:	b510      	push	{r4, lr}
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   211d2:	2000      	movs	r0, #0
   211d4:	f7fd fdfe 	bl	1edd4 <ble_ll_state_set>
    if (g_ble_ll_conn_cur_sm) {
   211d8:	4b07      	ldr	r3, [pc, #28]	; (211f8 <ble_ll_conn_event_halt+0x28>)
   211da:	681b      	ldr	r3, [r3, #0]
   211dc:	b153      	cbz	r3, 211f4 <ble_ll_conn_event_halt+0x24>
        g_ble_ll_conn_cur_sm->csmflags.cfbit.pkt_rxd = 0;
   211de:	781a      	ldrb	r2, [r3, #0]
   211e0:	f36f 0200 	bfc	r2, #0, #1
   211e4:	701a      	strb	r2, [r3, #0]
        ble_ll_event_send(&g_ble_ll_conn_cur_sm->conn_ev_end);
   211e6:	4c04      	ldr	r4, [pc, #16]	; (211f8 <ble_ll_conn_event_halt+0x28>)
   211e8:	6820      	ldr	r0, [r4, #0]
   211ea:	3098      	adds	r0, #152	; 0x98
   211ec:	f7fd fdfe 	bl	1edec <ble_ll_event_send>
        g_ble_ll_conn_cur_sm = NULL;
   211f0:	2300      	movs	r3, #0
   211f2:	6023      	str	r3, [r4, #0]
}
   211f4:	bd10      	pop	{r4, pc}
   211f6:	bf00      	nop
   211f8:	10004468 	.word	0x10004468

000211fc <ble_ll_conn_created_on_legacy>:

void
ble_ll_conn_created_on_legacy(struct os_mbuf *rxpdu,
                              struct ble_ll_scan_addr_data *addrd,
                              uint8_t *targeta)
{
   211fc:	b508      	push	{r3, lr}
   211fe:	4613      	mov	r3, r2
    uint8_t *rxbuf;
    uint8_t csa;

    rxbuf = rxpdu->om_data;
   21200:	6802      	ldr	r2, [r0, #0]
    csa = rxbuf[0] & BLE_ADV_PDU_HDR_CHSEL_MASK;
   21202:	7810      	ldrb	r0, [r2, #0]

    ble_ll_conn_central_start(BLE_PHY_1M, csa, addrd, targeta);
   21204:	460a      	mov	r2, r1
   21206:	f000 0120 	and.w	r1, r0, #32
   2120a:	2001      	movs	r0, #1
   2120c:	f7ff fd58 	bl	20cc0 <ble_ll_conn_central_start>
}
   21210:	bd08      	pop	{r3, pc}
	...

00021214 <ble_ll_conn_timeout>:
 * @param connsm
 * @param ble_err
 */
void
ble_ll_conn_timeout(struct ble_ll_conn_sm *connsm, uint8_t ble_err)
{
   21214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21216:	4604      	mov	r4, r0
   21218:	460d      	mov	r5, r1
    int was_current;
    os_sr_t sr;

    was_current = 0;
    OS_ENTER_CRITICAL(sr);
   2121a:	f7f9 fb45 	bl	1a8a8 <os_arch_save_sr>
   2121e:	4606      	mov	r6, r0
    if (g_ble_ll_conn_cur_sm == connsm) {
   21220:	4b0a      	ldr	r3, [pc, #40]	; (2124c <ble_ll_conn_timeout+0x38>)
   21222:	681b      	ldr	r3, [r3, #0]
   21224:	42a3      	cmp	r3, r4
   21226:	d009      	beq.n	2123c <ble_ll_conn_timeout+0x28>
    was_current = 0;
   21228:	2700      	movs	r7, #0
        ble_ll_conn_current_sm_over(NULL);
        was_current = 1;
    }
    OS_EXIT_CRITICAL(sr);
   2122a:	4630      	mov	r0, r6
   2122c:	f7f9 fb42 	bl	1a8b4 <os_arch_restore_sr>

    /* Check if we need to resume scanning */
    if (was_current) {
   21230:	b94f      	cbnz	r7, 21246 <ble_ll_conn_timeout+0x32>
        ble_ll_scan_chk_resume();
    }

    ble_ll_conn_end(connsm, ble_err);
   21232:	4629      	mov	r1, r5
   21234:	4620      	mov	r0, r4
   21236:	f7ff fe9b 	bl	20f70 <ble_ll_conn_end>
}
   2123a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ble_ll_conn_current_sm_over(NULL);
   2123c:	2000      	movs	r0, #0
   2123e:	f7fe fe75 	bl	1ff2c <ble_ll_conn_current_sm_over>
        was_current = 1;
   21242:	2701      	movs	r7, #1
   21244:	e7f1      	b.n	2122a <ble_ll_conn_timeout+0x16>
        ble_ll_scan_chk_resume();
   21246:	f004 f9a1 	bl	2558c <ble_ll_scan_chk_resume>
   2124a:	e7f2      	b.n	21232 <ble_ll_conn_timeout+0x1e>
   2124c:	10004468 	.word	0x10004468

00021250 <ble_ll_conn_rx_data_pdu>:
 * @param rxpdu Pointer to received pdu
 * @param rxpdu Pointer to ble mbuf header of received pdu
 */
void
ble_ll_conn_rx_data_pdu(struct os_mbuf *rxpdu, struct ble_mbuf_hdr *hdr)
{
   21250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint16_t acl_len;
    uint16_t acl_hdr;
    struct ble_ll_conn_sm *connsm;

    /* Packets with invalid CRC are not sent to LL */
    BLE_LL_ASSERT(BLE_MBUF_HDR_CRC_OK(hdr));
   21254:	880b      	ldrh	r3, [r1, #0]
   21256:	f013 0f80 	tst.w	r3, #128	; 0x80
   2125a:	d020      	beq.n	2129e <ble_ll_conn_rx_data_pdu+0x4e>
   2125c:	4605      	mov	r5, r0
   2125e:	460c      	mov	r4, r1

    /* XXX: there is a chance that the connection was thrown away and
       re-used before processing packets here. Fix this. */
    /* We better have a connection state machine */
    connsm = ble_ll_conn_find_active_conn(hdr->rxinfo.handle);
   21260:	78c8      	ldrb	r0, [r1, #3]
   21262:	f7ff fab9 	bl	207d8 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   21266:	4606      	mov	r6, r0
   21268:	b318      	cbz	r0, 212b2 <ble_ll_conn_rx_data_pdu+0x62>
       STATS_INC(ble_ll_conn_stats, no_conn_sm);
       goto conn_rx_data_pdu_end;
    }

    /* Check state machine */
    ble_ll_conn_chk_csm_flags(connsm);
   2126a:	f7fe ff06 	bl	2007a <ble_ll_conn_chk_csm_flags>

    /* Validate rx data pdu */
    rxbuf = rxpdu->om_data;
   2126e:	682b      	ldr	r3, [r5, #0]
    hdr_byte = rxbuf[0];
   21270:	781f      	ldrb	r7, [r3, #0]
    acl_len = rxbuf[1];
   21272:	f893 8001 	ldrb.w	r8, [r3, #1]
   21276:	fa1f fa88 	uxth.w	sl, r8

    /*
     * Check that the LLID and payload length are reasonable.
     * Empty payload is only allowed for LLID == 01b.
     *  */
    if ((llid == 0) || ((acl_len == 0) && (llid != BLE_LL_LLID_DATA_FRAG))) {
   2127a:	f017 0903 	ands.w	r9, r7, #3
   2127e:	d005      	beq.n	2128c <ble_ll_conn_rx_data_pdu+0x3c>
   21280:	f1ba 0f00 	cmp.w	sl, #0
   21284:	d11a      	bne.n	212bc <ble_ll_conn_rx_data_pdu+0x6c>
   21286:	f1b9 0f01 	cmp.w	r9, #1
   2128a:	d017      	beq.n	212bc <ble_ll_conn_rx_data_pdu+0x6c>
        STATS_INC(ble_ll_conn_stats, rx_bad_llid);
   2128c:	4a58      	ldr	r2, [pc, #352]	; (213f0 <ble_ll_conn_rx_data_pdu+0x1a0>)
   2128e:	6d93      	ldr	r3, [r2, #88]	; 0x58
   21290:	3301      	adds	r3, #1
   21292:	6593      	str	r3, [r2, #88]	; 0x58
    if (hdr->rxinfo.flags & BLE_MBUF_HDR_F_CONN_CREDIT) {
        ble_ll_conn_cth_flow_free_credit(connsm, 1);
    }
#endif

    os_mbuf_free_chain(rxpdu);
   21294:	4628      	mov	r0, r5
   21296:	f7f8 f99a 	bl	195ce <os_mbuf_free_chain>
}
   2129a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    BLE_LL_ASSERT(BLE_MBUF_HDR_CRC_OK(hdr));
   2129e:	f7f3 fa29 	bl	146f4 <hal_debugger_connected>
   212a2:	b100      	cbz	r0, 212a6 <ble_ll_conn_rx_data_pdu+0x56>
   212a4:	be01      	bkpt	0x0001
   212a6:	2300      	movs	r3, #0
   212a8:	461a      	mov	r2, r3
   212aa:	4619      	mov	r1, r3
   212ac:	4618      	mov	r0, r3
   212ae:	f7f7 fd3f 	bl	18d30 <__assert_func>
       STATS_INC(ble_ll_conn_stats, no_conn_sm);
   212b2:	4a4f      	ldr	r2, [pc, #316]	; (213f0 <ble_ll_conn_rx_data_pdu+0x1a0>)
   212b4:	69d3      	ldr	r3, [r2, #28]
   212b6:	3301      	adds	r3, #1
   212b8:	61d3      	str	r3, [r2, #28]
       goto conn_rx_data_pdu_end;
   212ba:	e7eb      	b.n	21294 <ble_ll_conn_rx_data_pdu+0x44>
    if ((connsm->enc_data.enc_state > CONN_ENC_S_PAUSE_ENC_RSP_WAIT &&
   212bc:	f896 3118 	ldrb.w	r3, [r6, #280]	; 0x118
   212c0:	2b05      	cmp	r3, #5
   212c2:	d902      	bls.n	212ca <ble_ll_conn_rx_data_pdu+0x7a>
         CONN_IS_CENTRAL(connsm)) ||
   212c4:	79f2      	ldrb	r2, [r6, #7]
    if ((connsm->enc_data.enc_state > CONN_ENC_S_PAUSE_ENC_RSP_WAIT &&
   212c6:	2a01      	cmp	r2, #1
   212c8:	d048      	beq.n	2135c <ble_ll_conn_rx_data_pdu+0x10c>
         CONN_IS_CENTRAL(connsm)) ||
   212ca:	2b02      	cmp	r3, #2
   212cc:	d902      	bls.n	212d4 <ble_ll_conn_rx_data_pdu+0x84>
         CONN_IS_PERIPHERAL(connsm))) {
   212ce:	79f3      	ldrb	r3, [r6, #7]
        (connsm->enc_data.enc_state >= CONN_ENC_S_ENC_RSP_TO_BE_SENT &&
   212d0:	2b02      	cmp	r3, #2
   212d2:	d043      	beq.n	2135c <ble_ll_conn_rx_data_pdu+0x10c>
    if ((connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED) &&
   212d4:	f896 3118 	ldrb.w	r3, [r6, #280]	; 0x118
   212d8:	2b02      	cmp	r3, #2
   212da:	d049      	beq.n	21370 <ble_ll_conn_rx_data_pdu+0x120>
    connsm->conn_rssi = hdr->rxinfo.rssi;
   212dc:	f994 3004 	ldrsb.w	r3, [r4, #4]
   212e0:	7233      	strb	r3, [r6, #8]
    if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   212e2:	79f3      	ldrb	r3, [r6, #7]
   212e4:	2b02      	cmp	r3, #2
   212e6:	d04e      	beq.n	21386 <ble_ll_conn_rx_data_pdu+0x136>
    rxd_sn = hdr_byte & BLE_LL_DATA_HDR_SN_MASK;
   212e8:	f007 0708 	and.w	r7, r7, #8
    if (rxd_sn == connsm->last_rxd_sn) {
   212ec:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
   212f0:	42bb      	cmp	r3, r7
   212f2:	d050      	beq.n	21396 <ble_ll_conn_rx_data_pdu+0x146>
    connsm->last_rxd_sn = rxd_sn;
   212f4:	f886 7031 	strb.w	r7, [r6, #49]	; 0x31
    if ((llid == BLE_LL_LLID_DATA_FRAG) && (acl_len == 0)) {
   212f8:	f1b9 0f01 	cmp.w	r9, #1
   212fc:	d050      	beq.n	213a0 <ble_ll_conn_rx_data_pdu+0x150>
    if (BLE_MBUF_HDR_MIC_FAILURE(hdr)) {
   212fe:	8823      	ldrh	r3, [r4, #0]
   21300:	f013 0220 	ands.w	r2, r3, #32
   21304:	d150      	bne.n	213a8 <ble_ll_conn_rx_data_pdu+0x158>
    if (llid == BLE_LL_LLID_CTRL) {
   21306:	f1b9 0f03 	cmp.w	r9, #3
   2130a:	d056      	beq.n	213ba <ble_ll_conn_rx_data_pdu+0x16a>
        STATS_INC(ble_ll_conn_stats, rx_l2cap_pdus);
   2130c:	4938      	ldr	r1, [pc, #224]	; (213f0 <ble_ll_conn_rx_data_pdu+0x1a0>)
   2130e:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   21310:	3301      	adds	r3, #1
   21312:	64cb      	str	r3, [r1, #76]	; 0x4c
        STATS_INCN(ble_ll_conn_stats, rx_l2cap_bytes, acl_len);
   21314:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   21316:	4443      	add	r3, r8
   21318:	650b      	str	r3, [r1, #80]	; 0x50
    if (OS_MBUF_IS_PKTHDR(om)) {
   2131a:	796b      	ldrb	r3, [r5, #5]
   2131c:	2b07      	cmp	r3, #7
   2131e:	d900      	bls.n	21322 <ble_ll_conn_rx_data_pdu+0xd2>
        startoff = om->om_pkthdr_len;
   21320:	b29a      	uxth	r2, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   21322:	4629      	mov	r1, r5
   21324:	f851 3b10 	ldr.w	r3, [r1], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   21328:	440a      	add	r2, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   2132a:	1a9b      	subs	r3, r3, r2
   2132c:	b29b      	uxth	r3, r3
        BLE_LL_ASSERT(OS_MBUF_LEADINGSPACE(rxpdu) >= 2);
   2132e:	2b01      	cmp	r3, #1
   21330:	d953      	bls.n	213da <ble_ll_conn_rx_data_pdu+0x18a>
        os_mbuf_prepend(rxpdu, 2);
   21332:	2102      	movs	r1, #2
   21334:	4628      	mov	r0, r5
   21336:	f7f8 fb05 	bl	19944 <os_mbuf_prepend>
        rxbuf = rxpdu->om_data;
   2133a:	682c      	ldr	r4, [r5, #0]
        acl_hdr = (llid << 12) | connsm->conn_handle;
   2133c:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
   21340:	ea41 3109 	orr.w	r1, r1, r9, lsl #12
        put_le16(rxbuf, acl_hdr);
   21344:	b289      	uxth	r1, r1
   21346:	4620      	mov	r0, r4
   21348:	f7f7 fd60 	bl	18e0c <put_le16>
        put_le16(rxbuf + 2, acl_len);
   2134c:	4651      	mov	r1, sl
   2134e:	1ca0      	adds	r0, r4, #2
   21350:	f7f7 fd5c 	bl	18e0c <put_le16>
        ble_hci_trans_ll_acl_tx(rxpdu);
   21354:	4628      	mov	r0, r5
   21356:	f010 ff35 	bl	321c4 <ble_hci_trans_ll_acl_tx>
   2135a:	e79e      	b.n	2129a <ble_ll_conn_rx_data_pdu+0x4a>
        if (!ble_ll_ctrl_enc_allowed_pdu_rx(rxpdu)) {
   2135c:	4628      	mov	r0, r5
   2135e:	f001 fbef 	bl	22b40 <ble_ll_ctrl_enc_allowed_pdu_rx>
   21362:	2800      	cmp	r0, #0
   21364:	d1b6      	bne.n	212d4 <ble_ll_conn_rx_data_pdu+0x84>
            ble_ll_conn_timeout(connsm, BLE_ERR_CONN_TERM_MIC);
   21366:	213d      	movs	r1, #61	; 0x3d
   21368:	4630      	mov	r0, r6
   2136a:	f7ff ff53 	bl	21214 <ble_ll_conn_timeout>
            goto conn_rx_data_pdu_end;
   2136e:	e791      	b.n	21294 <ble_ll_conn_rx_data_pdu+0x44>
    if ((connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED) &&
   21370:	78b3      	ldrb	r3, [r6, #2]
   21372:	f013 0f08 	tst.w	r3, #8
   21376:	d0b1      	beq.n	212dc <ble_ll_conn_rx_data_pdu+0x8c>
        CONN_F_LE_PING_SUPP(connsm) && (acl_len != 0)) {
   21378:	f1ba 0f00 	cmp.w	sl, #0
   2137c:	d0ae      	beq.n	212dc <ble_ll_conn_rx_data_pdu+0x8c>
        ble_ll_conn_auth_pyld_timer_start(connsm);
   2137e:	4630      	mov	r0, r6
   21380:	f7ff fd00 	bl	20d84 <ble_ll_conn_auth_pyld_timer_start>
   21384:	e7aa      	b.n	212dc <ble_ll_conn_rx_data_pdu+0x8c>
        if (hdr_byte & BLE_LL_DATA_HDR_NESN_MASK) {
   21386:	f017 0f04 	tst.w	r7, #4
   2138a:	d0ad      	beq.n	212e8 <ble_ll_conn_rx_data_pdu+0x98>
            connsm->csmflags.cfbit.allow_periph_latency = 1;
   2138c:	7833      	ldrb	r3, [r6, #0]
   2138e:	f043 0310 	orr.w	r3, r3, #16
   21392:	7033      	strb	r3, [r6, #0]
   21394:	e7a8      	b.n	212e8 <ble_ll_conn_rx_data_pdu+0x98>
       STATS_INC(ble_ll_conn_stats, data_pdu_rx_dup);
   21396:	4a16      	ldr	r2, [pc, #88]	; (213f0 <ble_ll_conn_rx_data_pdu+0x1a0>)
   21398:	6b53      	ldr	r3, [r2, #52]	; 0x34
   2139a:	3301      	adds	r3, #1
   2139c:	6353      	str	r3, [r2, #52]	; 0x34
       goto conn_rx_data_pdu_end;
   2139e:	e779      	b.n	21294 <ble_ll_conn_rx_data_pdu+0x44>
    if ((llid == BLE_LL_LLID_DATA_FRAG) && (acl_len == 0)) {
   213a0:	f1ba 0f00 	cmp.w	sl, #0
   213a4:	d1ab      	bne.n	212fe <ble_ll_conn_rx_data_pdu+0xae>
   213a6:	e775      	b.n	21294 <ble_ll_conn_rx_data_pdu+0x44>
        STATS_INC(ble_ll_conn_stats, mic_failures);
   213a8:	4a11      	ldr	r2, [pc, #68]	; (213f0 <ble_ll_conn_rx_data_pdu+0x1a0>)
   213aa:	6f13      	ldr	r3, [r2, #112]	; 0x70
   213ac:	3301      	adds	r3, #1
   213ae:	6713      	str	r3, [r2, #112]	; 0x70
        ble_ll_conn_timeout(connsm, BLE_ERR_CONN_TERM_MIC);
   213b0:	213d      	movs	r1, #61	; 0x3d
   213b2:	4630      	mov	r0, r6
   213b4:	f7ff ff2e 	bl	21214 <ble_ll_conn_timeout>
        goto conn_rx_data_pdu_end;
   213b8:	e76c      	b.n	21294 <ble_ll_conn_rx_data_pdu+0x44>
        STATS_INC(ble_ll_conn_stats, rx_ctrl_pdus);
   213ba:	4a0d      	ldr	r2, [pc, #52]	; (213f0 <ble_ll_conn_rx_data_pdu+0x1a0>)
   213bc:	6c93      	ldr	r3, [r2, #72]	; 0x48
   213be:	3301      	adds	r3, #1
   213c0:	6493      	str	r3, [r2, #72]	; 0x48
        if (ble_ll_ctrl_rx_pdu(connsm, rxpdu)) {
   213c2:	4629      	mov	r1, r5
   213c4:	4630      	mov	r0, r6
   213c6:	f001 ff33 	bl	23230 <ble_ll_ctrl_rx_pdu>
   213ca:	2800      	cmp	r0, #0
   213cc:	f43f af65 	beq.w	2129a <ble_ll_conn_rx_data_pdu+0x4a>
            STATS_INC(ble_ll_conn_stats, rx_malformed_ctrl_pdus);
   213d0:	4a07      	ldr	r2, [pc, #28]	; (213f0 <ble_ll_conn_rx_data_pdu+0x1a0>)
   213d2:	6d53      	ldr	r3, [r2, #84]	; 0x54
   213d4:	3301      	adds	r3, #1
   213d6:	6553      	str	r3, [r2, #84]	; 0x54
   213d8:	e75f      	b.n	2129a <ble_ll_conn_rx_data_pdu+0x4a>
        BLE_LL_ASSERT(OS_MBUF_LEADINGSPACE(rxpdu) >= 2);
   213da:	f7f3 f98b 	bl	146f4 <hal_debugger_connected>
   213de:	b100      	cbz	r0, 213e2 <ble_ll_conn_rx_data_pdu+0x192>
   213e0:	be01      	bkpt	0x0001
   213e2:	2300      	movs	r3, #0
   213e4:	461a      	mov	r2, r3
   213e6:	4619      	mov	r1, r3
   213e8:	4618      	mov	r0, r3
   213ea:	f7f7 fca1 	bl	18d30 <__assert_func>
   213ee:	bf00      	nop
   213f0:	100043dc 	.word	0x100043dc

000213f4 <ble_ll_conn_enqueue_pkt>:
 * @param om
 */
void
ble_ll_conn_enqueue_pkt(struct ble_ll_conn_sm *connsm, struct os_mbuf *om,
                        uint8_t hdr_byte, uint16_t length)
{
   213f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   213f6:	4605      	mov	r5, r0
   213f8:	460c      	mov	r4, r1
    struct os_mbuf_pkthdr *pkthdr;
    struct ble_mbuf_hdr *ble_hdr;
    int lifo;

    /* Set mbuf length and packet length if a control PDU */
    if (hdr_byte == BLE_LL_LLID_CTRL) {
   213fa:	2a03      	cmp	r2, #3
   213fc:	d00d      	beq.n	2141a <ble_ll_conn_enqueue_pkt+0x26>
        OS_MBUF_PKTHDR(om)->omp_len = length;
    }

    /* Set BLE transmit header */
    ble_hdr = BLE_MBUF_HDR_PTR(om);
    ble_hdr->txinfo.flags = 0;
   213fe:	2300      	movs	r3, #0
   21400:	7623      	strb	r3, [r4, #24]
    ble_hdr->txinfo.offset = 0;
   21402:	8363      	strh	r3, [r4, #26]
    ble_hdr->txinfo.hdr_byte = hdr_byte;
   21404:	7662      	strb	r2, [r4, #25]
     * need to do this now.
     */

    lifo = 0;
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
    if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   21406:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   2140a:	2b02      	cmp	r3, #2
   2140c:	d922      	bls.n	21454 <ble_ll_conn_enqueue_pkt+0x60>

        /*
         * If this is one of the following types we need to insert it at
         * head of queue.
         */
        llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   2140e:	f002 0203 	and.w	r2, r2, #3
        if (llid == BLE_LL_LLID_CTRL) {
   21412:	2a03      	cmp	r2, #3
   21414:	d004      	beq.n	21420 <ble_ll_conn_enqueue_pkt+0x2c>
    lifo = 0;
   21416:	2600      	movs	r6, #0
   21418:	e01d      	b.n	21456 <ble_ll_conn_enqueue_pkt+0x62>
        om->om_len = length;
   2141a:	80cb      	strh	r3, [r1, #6]
        OS_MBUF_PKTHDR(om)->omp_len = length;
   2141c:	820b      	strh	r3, [r1, #16]
   2141e:	e7ee      	b.n	213fe <ble_ll_conn_enqueue_pkt+0xa>
            switch (om->om_data[0]) {
   21420:	6822      	ldr	r2, [r4, #0]
   21422:	7812      	ldrb	r2, [r2, #0]
   21424:	3a02      	subs	r2, #2
   21426:	2a0f      	cmp	r2, #15
   21428:	d809      	bhi.n	2143e <ble_ll_conn_enqueue_pkt+0x4a>
   2142a:	e8df f002 	tbb	[pc, r2]
   2142e:	0f22      	.short	0x0f22
   21430:	0822220f 	.word	0x0822220f
   21434:	0a080808 	.word	0x0a080808
   21438:	08082208 	.word	0x08082208
   2143c:	2208      	.short	0x2208
   2143e:	2600      	movs	r6, #0
   21440:	e009      	b.n	21456 <ble_ll_conn_enqueue_pkt+0x62>
            case BLE_LL_CTRL_START_ENC_RSP:
                lifo = 1;
                break;
            case BLE_LL_CTRL_PAUSE_ENC_RSP:
#if MYNEWT_VAL(BLE_LL_ROLE_CENTRAL)
                if (connsm->conn_role == BLE_LL_CONN_ROLE_CENTRAL) {
   21442:	79eb      	ldrb	r3, [r5, #7]
   21444:	2b01      	cmp	r3, #1
   21446:	d016      	beq.n	21476 <ble_ll_conn_enqueue_pkt+0x82>
    lifo = 0;
   21448:	2600      	movs	r6, #0
   2144a:	e004      	b.n	21456 <ble_ll_conn_enqueue_pkt+0x62>
            case BLE_LL_CTRL_ENC_REQ:
            case BLE_LL_CTRL_ENC_RSP:
                /* If encryption has been paused, we don't want to send any packets from the
                 * TX queue, as they would go unencrypted.
                 */
                if (connsm->enc_data.enc_state == CONN_ENC_S_PAUSED) {
   2144c:	2b06      	cmp	r3, #6
   2144e:	d014      	beq.n	2147a <ble_ll_conn_enqueue_pkt+0x86>
    lifo = 0;
   21450:	2600      	movs	r6, #0
   21452:	e000      	b.n	21456 <ble_ll_conn_enqueue_pkt+0x62>
   21454:	2600      	movs	r6, #0
        }
    }
#endif

    /* Add to transmit queue for the connection */
    pkthdr = OS_MBUF_PKTHDR(om);
   21456:	f104 0710 	add.w	r7, r4, #16
    OS_ENTER_CRITICAL(sr);
   2145a:	f7f9 fa25 	bl	1a8a8 <os_arch_save_sr>
    if (lifo) {
   2145e:	b196      	cbz	r6, 21486 <ble_ll_conn_enqueue_pkt+0x92>
        STAILQ_INSERT_HEAD(&connsm->conn_txq, pkthdr, omp_next);
   21460:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
   21464:	6163      	str	r3, [r4, #20]
   21466:	b153      	cbz	r3, 2147e <ble_ll_conn_enqueue_pkt+0x8a>
   21468:	f8c5 70ac 	str.w	r7, [r5, #172]	; 0xac
    } else {
        STAILQ_INSERT_TAIL(&connsm->conn_txq, pkthdr, omp_next);
    }
    OS_EXIT_CRITICAL(sr);
   2146c:	f7f9 fa22 	bl	1a8b4 <os_arch_restore_sr>
}
   21470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lifo = 1;
   21472:	2601      	movs	r6, #1
   21474:	e7ef      	b.n	21456 <ble_ll_conn_enqueue_pkt+0x62>
                    lifo = 1;
   21476:	2601      	movs	r6, #1
   21478:	e7ed      	b.n	21456 <ble_ll_conn_enqueue_pkt+0x62>
                    lifo = 1;
   2147a:	2601      	movs	r6, #1
   2147c:	e7eb      	b.n	21456 <ble_ll_conn_enqueue_pkt+0x62>
        STAILQ_INSERT_HEAD(&connsm->conn_txq, pkthdr, omp_next);
   2147e:	3414      	adds	r4, #20
   21480:	f8c5 40b0 	str.w	r4, [r5, #176]	; 0xb0
   21484:	e7f0      	b.n	21468 <ble_ll_conn_enqueue_pkt+0x74>
        STAILQ_INSERT_TAIL(&connsm->conn_txq, pkthdr, omp_next);
   21486:	2300      	movs	r3, #0
   21488:	f844 3f14 	str.w	r3, [r4, #20]!
   2148c:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
   21490:	601f      	str	r7, [r3, #0]
   21492:	f8c5 40b0 	str.w	r4, [r5, #176]	; 0xb0
   21496:	e7e9      	b.n	2146c <ble_ll_conn_enqueue_pkt+0x78>

00021498 <ble_ll_conn_tx_pkt_in>:
 *
 * @return int
 */
void
ble_ll_conn_tx_pkt_in(struct os_mbuf *om, uint16_t handle, uint16_t length)
{
   21498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2149a:	4605      	mov	r5, r0
   2149c:	460c      	mov	r4, r1
   2149e:	4616      	mov	r6, r2
    uint16_t pb;
    struct ble_ll_conn_sm *connsm;

    /* See if we have an active matching connection handle */
    conn_handle = handle & 0x0FFF;
    connsm = ble_ll_conn_find_active_conn(conn_handle);
   214a0:	f3c1 000b 	ubfx	r0, r1, #0, #12
   214a4:	f7ff f998 	bl	207d8 <ble_ll_conn_find_active_conn>
    if (connsm) {
   214a8:	b180      	cbz	r0, 214cc <ble_ll_conn_tx_pkt_in+0x34>
   214aa:	4607      	mov	r7, r0
        /* Construct LL header in buffer (NOTE: pb already checked) */
        pb = handle & 0x3000;
        if (pb == 0) {
   214ac:	f414 5f40 	tst.w	r4, #12288	; 0x3000
   214b0:	d10a      	bne.n	214c8 <ble_ll_conn_tx_pkt_in+0x30>
            hdr_byte = BLE_LL_LLID_DATA_START;
   214b2:	2202      	movs	r2, #2
        } else {
            hdr_byte = BLE_LL_LLID_DATA_FRAG;
        }

        /* Add to total l2cap pdus enqueue */
        STATS_INC(ble_ll_conn_stats, l2cap_enqueued);
   214b4:	4909      	ldr	r1, [pc, #36]	; (214dc <ble_ll_conn_tx_pkt_in+0x44>)
   214b6:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   214b8:	3301      	adds	r3, #1
   214ba:	644b      	str	r3, [r1, #68]	; 0x44

        /* Clear flags field in BLE header */
        ble_ll_conn_enqueue_pkt(connsm, om, hdr_byte, length);
   214bc:	4633      	mov	r3, r6
   214be:	4629      	mov	r1, r5
   214c0:	4638      	mov	r0, r7
   214c2:	f7ff ff97 	bl	213f4 <ble_ll_conn_enqueue_pkt>
    } else {
        /* No connection found! */
        STATS_INC(ble_ll_conn_stats, handle_not_found);
        os_mbuf_free_chain(om);
    }
}
   214c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            hdr_byte = BLE_LL_LLID_DATA_FRAG;
   214c8:	2201      	movs	r2, #1
   214ca:	e7f3      	b.n	214b4 <ble_ll_conn_tx_pkt_in+0x1c>
        STATS_INC(ble_ll_conn_stats, handle_not_found);
   214cc:	4a03      	ldr	r2, [pc, #12]	; (214dc <ble_ll_conn_tx_pkt_in+0x44>)
   214ce:	6993      	ldr	r3, [r2, #24]
   214d0:	3301      	adds	r3, #1
   214d2:	6193      	str	r3, [r2, #24]
        os_mbuf_free_chain(om);
   214d4:	4628      	mov	r0, r5
   214d6:	f7f8 f87a 	bl	195ce <os_mbuf_free_chain>
}
   214da:	e7f4      	b.n	214c6 <ble_ll_conn_tx_pkt_in+0x2e>
   214dc:	100043dc 	.word	0x100043dc

000214e0 <ble_ll_conn_set_global_chanmap>:
 * @param num_used_chans
 * @param chanmap
 */
void
ble_ll_conn_set_global_chanmap(uint8_t num_used_chans, const uint8_t *chanmap)
{
   214e0:	b538      	push	{r3, r4, r5, lr}
   214e2:	4605      	mov	r5, r0
   214e4:	460c      	mov	r4, r1
#endif
    struct ble_ll_conn_global_params *conn_params;

    /* Do nothing if same channel map */
    conn_params = &g_ble_ll_conn_params;
    if (!memcmp(conn_params->central_chan_map, chanmap, BLE_LL_CONN_CHMAP_LEN)) {
   214e6:	2205      	movs	r2, #5
   214e8:	480c      	ldr	r0, [pc, #48]	; (2151c <ble_ll_conn_set_global_chanmap+0x3c>)
   214ea:	f7f9 fb8d 	bl	1ac08 <memcmp>
   214ee:	b198      	cbz	r0, 21518 <ble_ll_conn_set_global_chanmap+0x38>
        return;
    }

    /* Change channel map and cause channel map update procedure to start */
    conn_params->num_used_chans = num_used_chans;
   214f0:	4b0a      	ldr	r3, [pc, #40]	; (2151c <ble_ll_conn_set_global_chanmap+0x3c>)
   214f2:	715d      	strb	r5, [r3, #5]
    memcpy(conn_params->central_chan_map, chanmap, BLE_LL_CONN_CHMAP_LEN);
   214f4:	6820      	ldr	r0, [r4, #0]
   214f6:	6018      	str	r0, [r3, #0]
   214f8:	7922      	ldrb	r2, [r4, #4]
   214fa:	711a      	strb	r2, [r3, #4]

#if MYNEWT_VAL(BLE_LL_ROLE_CENTRAL)
    /* Perform channel map update */
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   214fc:	4b08      	ldr	r3, [pc, #32]	; (21520 <ble_ll_conn_set_global_chanmap+0x40>)
   214fe:	681c      	ldr	r4, [r3, #0]
   21500:	e005      	b.n	2150e <ble_ll_conn_set_global_chanmap+0x2e>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_CENTRAL) {
            ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_CHAN_MAP_UPD);
   21502:	2101      	movs	r1, #1
   21504:	4620      	mov	r0, r4
   21506:	f001 fc8d 	bl	22e24 <ble_ll_ctrl_proc_start>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   2150a:	f8d4 40b4 	ldr.w	r4, [r4, #180]	; 0xb4
   2150e:	b11c      	cbz	r4, 21518 <ble_ll_conn_set_global_chanmap+0x38>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_CENTRAL) {
   21510:	79e3      	ldrb	r3, [r4, #7]
   21512:	2b01      	cmp	r3, #1
   21514:	d1f9      	bne.n	2150a <ble_ll_conn_set_global_chanmap+0x2a>
   21516:	e7f4      	b.n	21502 <ble_ll_conn_set_global_chanmap+0x22>
        }
    }
#endif
}
   21518:	bd38      	pop	{r3, r4, r5, pc}
   2151a:	bf00      	nop
   2151c:	10004474 	.word	0x10004474
   21520:	1000445c 	.word	0x1000445c

00021524 <ble_ll_conn_periph_start>:
 */
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
int
ble_ll_conn_periph_start(uint8_t *rxbuf, uint8_t pat, struct ble_mbuf_hdr *rxhdr,
                         bool force_csa2)
{
   21524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21528:	4607      	mov	r7, r0
   2152a:	468a      	mov	sl, r1
   2152c:	4690      	mov	r8, r2
   2152e:	4699      	mov	r9, r3
    uint8_t *inita;
    uint8_t *dptr;
    struct ble_ll_conn_sm *connsm;

    /* Ignore the connection request if we are already connected*/
    inita = rxbuf + BLE_LL_PDU_HDR_LEN;
   21530:	1c86      	adds	r6, r0, #2
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   21532:	4b73      	ldr	r3, [pc, #460]	; (21700 <ble_ll_conn_periph_start+0x1dc>)
   21534:	681c      	ldr	r4, [r3, #0]
   21536:	e007      	b.n	21548 <ble_ll_conn_periph_start+0x24>
            if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
                if (connsm->peer_addr_type & 1) {
                    return 0;
                }
            } else {
                if ((connsm->peer_addr_type & 1) == 0) {
   21538:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   2153c:	f013 0f01 	tst.w	r3, #1
   21540:	f000 8088 	beq.w	21654 <ble_ll_conn_periph_start+0x130>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   21544:	f8d4 40b4 	ldr.w	r4, [r4, #180]	; 0xb4
   21548:	b194      	cbz	r4, 21570 <ble_ll_conn_periph_start+0x4c>
        if (!memcmp(&connsm->peer_addr, inita, BLE_DEV_ADDR_LEN)) {
   2154a:	2206      	movs	r2, #6
   2154c:	4631      	mov	r1, r6
   2154e:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   21552:	f7f9 fb59 	bl	1ac08 <memcmp>
   21556:	4605      	mov	r5, r0
   21558:	2800      	cmp	r0, #0
   2155a:	d1f3      	bne.n	21544 <ble_ll_conn_periph_start+0x20>
            if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
   2155c:	783b      	ldrb	r3, [r7, #0]
   2155e:	f013 0f40 	tst.w	r3, #64	; 0x40
   21562:	d0e9      	beq.n	21538 <ble_ll_conn_periph_start+0x14>
                if (connsm->peer_addr_type & 1) {
   21564:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   21568:	f013 0f01 	tst.w	r3, #1
   2156c:	d0ea      	beq.n	21544 <ble_ll_conn_periph_start+0x20>
   2156e:	e071      	b.n	21654 <ble_ll_conn_periph_start+0x130>
            }
        }
    }

    /* Allocate a connection. If none available, dont do anything */
    connsm = ble_ll_conn_sm_get();
   21570:	f7ff f944 	bl	207fc <ble_ll_conn_sm_get>
    if (connsm == NULL) {
   21574:	4604      	mov	r4, r0
   21576:	2800      	cmp	r0, #0
   21578:	f000 80bf 	beq.w	216fa <ble_ll_conn_periph_start+0x1d6>

    /* Set the pointer at the start of the connection data */
    dptr = rxbuf + BLE_LL_CONN_REQ_ADVA_OFF + BLE_DEV_ADDR_LEN;

    /* Set connection state machine information */
    connsm->access_addr = get_le32(dptr);
   2157c:	f107 000e 	add.w	r0, r7, #14
   21580:	f7f7 fc6a 	bl	18e58 <get_le32>
   21584:	6520      	str	r0, [r4, #80]	; 0x50
    crcinit = dptr[6];
   21586:	7d3a      	ldrb	r2, [r7, #20]
    crcinit = (crcinit << 8) | dptr[5];
   21588:	7cfb      	ldrb	r3, [r7, #19]
   2158a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    crcinit = (crcinit << 8) | dptr[4];
   2158e:	7cbb      	ldrb	r3, [r7, #18]
   21590:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    connsm->crcinit = crcinit;
   21594:	6563      	str	r3, [r4, #84]	; 0x54
    connsm->tx_win_size = dptr[7];
   21596:	7d7b      	ldrb	r3, [r7, #21]
   21598:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    connsm->tx_win_off = get_le16(dptr + 8);
   2159c:	f107 0016 	add.w	r0, r7, #22
   215a0:	f7f7 fc55 	bl	18e4e <get_le16>
   215a4:	f8a4 006e 	strh.w	r0, [r4, #110]	; 0x6e
    connsm->conn_itvl = get_le16(dptr + 10);
   215a8:	f107 0018 	add.w	r0, r7, #24
   215ac:	f7f7 fc4f 	bl	18e4e <get_le16>
   215b0:	f8a4 0064 	strh.w	r0, [r4, #100]	; 0x64
    connsm->periph_latency = get_le16(dptr + 12);
   215b4:	f107 001a 	add.w	r0, r7, #26
   215b8:	f7f7 fc49 	bl	18e4e <get_le16>
   215bc:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
    connsm->supervision_tmo = get_le16(dptr + 14);
   215c0:	f107 001c 	add.w	r0, r7, #28
   215c4:	f7f7 fc43 	bl	18e4e <get_le16>
   215c8:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    memcpy(&connsm->chanmap, dptr + 16, BLE_LL_CONN_CHMAP_LEN);
   215cc:	f104 021c 	add.w	r2, r4, #28
   215d0:	463b      	mov	r3, r7
   215d2:	f853 1f1e 	ldr.w	r1, [r3, #30]!
   215d6:	61e1      	str	r1, [r4, #28]
   215d8:	791b      	ldrb	r3, [r3, #4]
   215da:	7113      	strb	r3, [r2, #4]
    connsm->hop_inc = dptr[21] & 0x1F;
   215dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   215e0:	f003 031f 	and.w	r3, r3, #31
   215e4:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    connsm->central_sca = dptr[21] >> 5;
   215e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   215ec:	095b      	lsrs	r3, r3, #5
   215ee:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

    /* Error check parameters */
    if ((connsm->tx_win_off > connsm->conn_itvl) ||
   215f2:	f8b4 106e 	ldrh.w	r1, [r4, #110]	; 0x6e
   215f6:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
   215fa:	4299      	cmp	r1, r3
   215fc:	d81e      	bhi.n	2163c <ble_ll_conn_periph_start+0x118>
   215fe:	2b05      	cmp	r3, #5
   21600:	d91c      	bls.n	2163c <ble_ll_conn_periph_start+0x118>
        (connsm->conn_itvl < BLE_HCI_CONN_ITVL_MIN) ||
   21602:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   21606:	d819      	bhi.n	2163c <ble_ll_conn_periph_start+0x118>
        (connsm->conn_itvl > BLE_HCI_CONN_ITVL_MAX) ||
        (connsm->tx_win_size < BLE_LL_CONN_TX_WIN_MIN) ||
   21608:	f894 5036 	ldrb.w	r5, [r4, #54]	; 0x36
        (connsm->conn_itvl > BLE_HCI_CONN_ITVL_MAX) ||
   2160c:	b1b5      	cbz	r5, 2163c <ble_ll_conn_periph_start+0x118>
        (connsm->periph_latency > BLE_LL_CONN_PERIPH_LATENCY_MAX)) {
   2160e:	f8b4 1066 	ldrh.w	r1, [r4, #102]	; 0x66
        (connsm->tx_win_size < BLE_LL_CONN_TX_WIN_MIN) ||
   21612:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   21616:	d211      	bcs.n	2163c <ble_ll_conn_periph_start+0x118>
        goto err_periph_start;
    }

    /* Slave latency cannot cause a supervision timeout */
    temp = (connsm->periph_latency + 1) * (connsm->conn_itvl * 2) *
   21618:	fb01 3103 	mla	r1, r1, r3, r3
   2161c:	f640 1cc4 	movw	ip, #2500	; 0x9c4
   21620:	fb0c f101 	mul.w	r1, ip, r1
           BLE_LL_CONN_ITVL_USECS;
    if ((connsm->supervision_tmo * 10000) <= temp ) {
   21624:	f242 7c10 	movw	ip, #10000	; 0x2710
   21628:	fb0c f000 	mul.w	r0, ip, r0
   2162c:	4288      	cmp	r0, r1
   2162e:	d905      	bls.n	2163c <ble_ll_conn_periph_start+0x118>

    /*
     * The transmit window must be less than or equal to the lesser of 10
     * msecs or the connection interval minus 1.25 msecs.
     */
    temp = connsm->conn_itvl - 1;
   21630:	3b01      	subs	r3, #1
    if (temp > 8) {
   21632:	2b08      	cmp	r3, #8
   21634:	d900      	bls.n	21638 <ble_ll_conn_periph_start+0x114>
        temp = 8;
   21636:	2308      	movs	r3, #8
    }
    if (connsm->tx_win_size > temp) {
   21638:	429d      	cmp	r5, r3
   2163a:	d90e      	bls.n	2165a <ble_ll_conn_periph_start+0x136>
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
    }
    return rc;

err_periph_start:
    STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   2163c:	2500      	movs	r5, #0
   2163e:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
   21642:	4b30      	ldr	r3, [pc, #192]	; (21704 <ble_ll_conn_periph_start+0x1e0>)
   21644:	685a      	ldr	r2, [r3, #4]
   21646:	6014      	str	r4, [r2, #0]
   21648:	34b4      	adds	r4, #180	; 0xb4
   2164a:	605c      	str	r4, [r3, #4]
    STATS_INC(ble_ll_conn_stats, periph_rxd_bad_conn_req_params);
   2164c:	4a2e      	ldr	r2, [pc, #184]	; (21708 <ble_ll_conn_periph_start+0x1e4>)
   2164e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   21650:	3301      	adds	r3, #1
   21652:	62d3      	str	r3, [r2, #44]	; 0x2c
    return 0;
}
   21654:	4628      	mov	r0, r5
   21656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    memcpy(&connsm->peer_addr, inita, BLE_DEV_ADDR_LEN);
   2165a:	6833      	ldr	r3, [r6, #0]
   2165c:	f8c4 308f 	str.w	r3, [r4, #143]	; 0x8f
   21660:	88b3      	ldrh	r3, [r6, #4]
   21662:	f8a4 3093 	strh.w	r3, [r4, #147]	; 0x93
    connsm->peer_addr_type = pat;
   21666:	f884 a08e 	strb.w	sl, [r4, #142]	; 0x8e
    connsm->num_used_chans = ble_ll_utils_calc_num_used_chans(connsm->chanmap);
   2166a:	4610      	mov	r0, r2
   2166c:	f004 fd09 	bl	26082 <ble_ll_utils_calc_num_used_chans>
   21670:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    if (connsm->num_used_chans < 2) {
   21674:	2801      	cmp	r0, #1
   21676:	d9e1      	bls.n	2163c <ble_ll_conn_periph_start+0x118>
    ble_ll_conn_itvl_to_ticks(connsm->conn_itvl, &connsm->conn_itvl_ticks,
   21678:	f104 0275 	add.w	r2, r4, #117	; 0x75
   2167c:	f104 0178 	add.w	r1, r4, #120	; 0x78
   21680:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
   21684:	f7ff f86e 	bl	20764 <ble_ll_conn_itvl_to_ticks>
    connsm->conn_role = BLE_LL_CONN_ROLE_PERIPHERAL;
   21688:	2302      	movs	r3, #2
   2168a:	71e3      	strb	r3, [r4, #7]
    ble_ll_conn_sm_new(connsm);
   2168c:	4620      	mov	r0, r4
   2168e:	f7ff fbc3 	bl	20e18 <ble_ll_conn_sm_new>
                        force_csa2 || (rxbuf[0] & BLE_ADV_PDU_HDR_CHSEL_MASK));
   21692:	f1b9 0f00 	cmp.w	r9, #0
   21696:	d105      	bne.n	216a4 <ble_ll_conn_periph_start+0x180>
   21698:	783b      	ldrb	r3, [r7, #0]
   2169a:	f013 0f20 	tst.w	r3, #32
   2169e:	d025      	beq.n	216ec <ble_ll_conn_periph_start+0x1c8>
   216a0:	2101      	movs	r1, #1
   216a2:	e000      	b.n	216a6 <ble_ll_conn_periph_start+0x182>
   216a4:	2101      	movs	r1, #1
    ble_ll_conn_set_csa(connsm,
   216a6:	4620      	mov	r0, r4
   216a8:	f7ff fafe 	bl	20ca8 <ble_ll_conn_set_csa>
    connsm->conn_sch.sched_cb = ble_ll_conn_event_start_cb;
   216ac:	4b17      	ldr	r3, [pc, #92]	; (2170c <ble_ll_conn_periph_start+0x1e8>)
   216ae:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    rc = ble_ll_conn_created(connsm, rxhdr);
   216b2:	4641      	mov	r1, r8
   216b4:	4620      	mov	r0, r4
   216b6:	f7ff fa3b 	bl	20b30 <ble_ll_conn_created>
    if (!rc) {
   216ba:	4605      	mov	r5, r0
   216bc:	2800      	cmp	r0, #0
   216be:	d1c9      	bne.n	21654 <ble_ll_conn_periph_start+0x130>
        SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   216c0:	4b0f      	ldr	r3, [pc, #60]	; (21700 <ble_ll_conn_periph_start+0x1dc>)
   216c2:	681b      	ldr	r3, [r3, #0]
   216c4:	42a3      	cmp	r3, r4
   216c6:	d013      	beq.n	216f0 <ble_ll_conn_periph_start+0x1cc>
   216c8:	461a      	mov	r2, r3
   216ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   216ce:	42a3      	cmp	r3, r4
   216d0:	d1fa      	bne.n	216c8 <ble_ll_conn_periph_start+0x1a4>
   216d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   216d6:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   216da:	2300      	movs	r3, #0
   216dc:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
   216e0:	4b08      	ldr	r3, [pc, #32]	; (21704 <ble_ll_conn_periph_start+0x1e0>)
   216e2:	685a      	ldr	r2, [r3, #4]
   216e4:	6014      	str	r4, [r2, #0]
   216e6:	34b4      	adds	r4, #180	; 0xb4
   216e8:	605c      	str	r4, [r3, #4]
   216ea:	e7b3      	b.n	21654 <ble_ll_conn_periph_start+0x130>
                        force_csa2 || (rxbuf[0] & BLE_ADV_PDU_HDR_CHSEL_MASK));
   216ec:	2100      	movs	r1, #0
   216ee:	e7da      	b.n	216a6 <ble_ll_conn_periph_start+0x182>
        SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   216f0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   216f4:	4b02      	ldr	r3, [pc, #8]	; (21700 <ble_ll_conn_periph_start+0x1dc>)
   216f6:	601a      	str	r2, [r3, #0]
   216f8:	e7ef      	b.n	216da <ble_ll_conn_periph_start+0x1b6>
        return 0;
   216fa:	2500      	movs	r5, #0
   216fc:	e7aa      	b.n	21654 <ble_ll_conn_periph_start+0x130>
   216fe:	bf00      	nop
   21700:	1000445c 	.word	0x1000445c
   21704:	1000446c 	.word	0x1000446c
   21708:	100043dc 	.word	0x100043dc
   2170c:	00020605 	.word	0x00020605

00021710 <ble_ll_conn_module_reset>:
 *
 * Context: Link Layer task
 */
void
ble_ll_conn_module_reset(void)
{
   21710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint16_t maxbytes;
    struct ble_ll_conn_sm *connsm;
    struct ble_ll_conn_global_params *conn_params;

    /* Kill the current one first (if one is running) */
    if (g_ble_ll_conn_cur_sm) {
   21712:	4b2b      	ldr	r3, [pc, #172]	; (217c0 <ble_ll_conn_module_reset+0xb0>)
   21714:	6818      	ldr	r0, [r3, #0]
   21716:	b118      	cbz	r0, 21720 <ble_ll_conn_module_reset+0x10>
        connsm = g_ble_ll_conn_cur_sm;
        g_ble_ll_conn_cur_sm = NULL;
   21718:	2100      	movs	r1, #0
   2171a:	6019      	str	r1, [r3, #0]
        ble_ll_conn_end(connsm, BLE_ERR_SUCCESS);
   2171c:	f7ff fc28 	bl	20f70 <ble_ll_conn_end>
    }

#if MYNEWT_VAL(BLE_LL_ROLE_CENTRAL)
    /* Free the global connection complete event if there is one */
    if (g_ble_ll_conn_comp_ev) {
   21720:	4b28      	ldr	r3, [pc, #160]	; (217c4 <ble_ll_conn_module_reset+0xb4>)
   21722:	6818      	ldr	r0, [r3, #0]
   21724:	b120      	cbz	r0, 21730 <ble_ll_conn_module_reset+0x20>
        ble_hci_trans_buf_free(g_ble_ll_conn_comp_ev);
   21726:	f010 fd8b 	bl	32240 <ble_hci_trans_buf_free>
        g_ble_ll_conn_comp_ev = NULL;
   2172a:	4b26      	ldr	r3, [pc, #152]	; (217c4 <ble_ll_conn_module_reset+0xb4>)
   2172c:	2200      	movs	r2, #0
   2172e:	601a      	str	r2, [r3, #0]
    }

    /* Reset connection we are attempting to create */
    g_ble_ll_conn_create_sm.connsm = NULL;
   21730:	4b25      	ldr	r3, [pc, #148]	; (217c8 <ble_ll_conn_module_reset+0xb8>)
   21732:	2200      	movs	r2, #0
   21734:	601a      	str	r2, [r3, #0]
#endif

    /* Now go through and end all the connections */
    while (1) {
        connsm = SLIST_FIRST(&g_ble_ll_conn_active_list);
   21736:	4b25      	ldr	r3, [pc, #148]	; (217cc <ble_ll_conn_module_reset+0xbc>)
   21738:	6818      	ldr	r0, [r3, #0]
        if (!connsm) {
   2173a:	b118      	cbz	r0, 21744 <ble_ll_conn_module_reset+0x34>
            break;
        }
        ble_ll_conn_end(connsm, BLE_ERR_SUCCESS);
   2173c:	2100      	movs	r1, #0
   2173e:	f7ff fc17 	bl	20f70 <ble_ll_conn_end>
        connsm = SLIST_FIRST(&g_ble_ll_conn_active_list);
   21742:	e7f8      	b.n	21736 <ble_ll_conn_module_reset+0x26>
    }

    /* Get the maximum supported PHY PDU size from the PHY */
    max_phy_pyld = ble_phy_max_data_pdu_pyld();
   21744:	f004 fe10 	bl	26368 <ble_phy_max_data_pdu_pyld>
   21748:	4605      	mov	r5, r0

    /* Configure the global LL parameters */
    conn_params = &g_ble_ll_conn_params;

    maxbytes = min(MYNEWT_VAL(BLE_LL_SUPP_MAX_RX_BYTES), max_phy_pyld);
   2174a:	4606      	mov	r6, r0
   2174c:	28fb      	cmp	r0, #251	; 0xfb
   2174e:	bf28      	it	cs
   21750:	26fb      	movcs	r6, #251	; 0xfb
   21752:	b2f7      	uxtb	r7, r6
   21754:	463e      	mov	r6, r7
    conn_params->supp_max_rx_octets = maxbytes;
   21756:	4c1e      	ldr	r4, [pc, #120]	; (217d0 <ble_ll_conn_module_reset+0xc0>)
   21758:	71e7      	strb	r7, [r4, #7]
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_CODED_PHY)
    conn_params->supp_max_rx_time = MAX_TIME_CODED(maxbytes);
#else
    conn_params->supp_max_rx_time = MAX_TIME_UNCODED(maxbytes);
   2175a:	3604      	adds	r6, #4
   2175c:	2101      	movs	r1, #1
   2175e:	4630      	mov	r0, r6
   21760:	f7fd fb94 	bl	1ee8c <ble_ll_pdu_tx_time_get>
   21764:	82a0      	strh	r0, [r4, #20]
#endif

    maxbytes = min(MYNEWT_VAL(BLE_LL_SUPP_MAX_TX_BYTES), max_phy_pyld);
    conn_params->supp_max_tx_octets = maxbytes;
   21766:	71a7      	strb	r7, [r4, #6]
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_CODED_PHY)
    conn_params->supp_max_tx_time = MAX_TIME_CODED(maxbytes);
#else
    conn_params->supp_max_tx_time = MAX_TIME_UNCODED(maxbytes);
   21768:	2101      	movs	r1, #1
   2176a:	4630      	mov	r0, r6
   2176c:	f7fd fb8e 	bl	1ee8c <ble_ll_pdu_tx_time_get>
   21770:	8260      	strh	r0, [r4, #18]
#endif

    maxbytes = min(MYNEWT_VAL(BLE_LL_CONN_INIT_MAX_TX_BYTES), max_phy_pyld);
   21772:	2d1b      	cmp	r5, #27
   21774:	bf28      	it	cs
   21776:	251b      	movcs	r5, #27
   21778:	b2eb      	uxtb	r3, r5
    conn_params->conn_init_max_tx_octets = maxbytes;
   2177a:	7225      	strb	r5, [r4, #8]
    conn_params->conn_init_max_tx_time = MAX_TIME_UNCODED(maxbytes);
   2177c:	1d1d      	adds	r5, r3, #4
   2177e:	2101      	movs	r1, #1
   21780:	4628      	mov	r0, r5
   21782:	f7fd fb83 	bl	1ee8c <ble_ll_pdu_tx_time_get>
   21786:	81a0      	strh	r0, [r4, #12]
    conn_params->conn_init_max_tx_time_uncoded = MAX_TIME_UNCODED(maxbytes);
   21788:	2101      	movs	r1, #1
   2178a:	4628      	mov	r0, r5
   2178c:	f7fd fb7e 	bl	1ee8c <ble_ll_pdu_tx_time_get>
   21790:	81e0      	strh	r0, [r4, #14]
    conn_params->conn_init_max_tx_time_coded = MAX_TIME_CODED(maxbytes);
   21792:	2103      	movs	r1, #3
   21794:	4628      	mov	r0, r5
   21796:	f7fd fb79 	bl	1ee8c <ble_ll_pdu_tx_time_get>
   2179a:	8220      	strh	r0, [r4, #16]

    conn_params->sugg_tx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   2179c:	231b      	movs	r3, #27
   2179e:	7263      	strb	r3, [r4, #9]
    conn_params->sugg_tx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   217a0:	f44f 73a4 	mov.w	r3, #328	; 0x148
   217a4:	8163      	strh	r3, [r4, #10]

    /* Mask in all channels by default */
    conn_params->num_used_chans = BLE_PHY_NUM_DATA_CHANS;
   217a6:	2325      	movs	r3, #37	; 0x25
   217a8:	7163      	strb	r3, [r4, #5]
    memset(conn_params->central_chan_map, 0xff, BLE_LL_CONN_CHMAP_LEN - 1);
   217aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   217ae:	6023      	str	r3, [r4, #0]
    conn_params->central_chan_map[4] = 0x1f;
   217b0:	231f      	movs	r3, #31
   217b2:	7123      	strb	r3, [r4, #4]

    /* Reset statistics */
    STATS_RESET(ble_ll_conn_stats);
   217b4:	2274      	movs	r2, #116	; 0x74
   217b6:	2100      	movs	r1, #0
   217b8:	4806      	ldr	r0, [pc, #24]	; (217d4 <ble_ll_conn_module_reset+0xc4>)
   217ba:	f7f9 fa6e 	bl	1ac9a <memset>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_CTRL_TO_HOST_FLOW_CONTROL)
    g_ble_ll_conn_cth_flow.enabled = false;
    g_ble_ll_conn_cth_flow.max_buffers = 1;
    g_ble_ll_conn_cth_flow.num_buffers = 1;
#endif
}
   217be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   217c0:	10004468 	.word	0x10004468
   217c4:	10004460 	.word	0x10004460
   217c8:	10004464 	.word	0x10004464
   217cc:	1000445c 	.word	0x1000445c
   217d0:	10004474 	.word	0x10004474
   217d4:	100043e8 	.word	0x100043e8

000217d8 <ble_ll_conn_module_init>:

/* Initialize the connection module */
void
ble_ll_conn_module_init(void)
{
   217d8:	b530      	push	{r4, r5, lr}
   217da:	b083      	sub	sp, #12
    int rc;
    uint16_t i;
    struct ble_ll_conn_sm *connsm;

    /* Initialize list of active connections */
    SLIST_INIT(&g_ble_ll_conn_active_list);
   217dc:	2400      	movs	r4, #0
   217de:	4b1c      	ldr	r3, [pc, #112]	; (21850 <ble_ll_conn_module_init+0x78>)
   217e0:	601c      	str	r4, [r3, #0]
    STAILQ_INIT(&g_ble_ll_conn_free_list);
   217e2:	4b1c      	ldr	r3, [pc, #112]	; (21854 <ble_ll_conn_module_init+0x7c>)
   217e4:	601c      	str	r4, [r3, #0]
   217e6:	605b      	str	r3, [r3, #4]
    /*
     * Take all the connections off the free memory pool and add them to
     * the free connection list, assigning handles in linear order. Note:
     * the specification allows a handle of zero; we just avoid using it.
     */
    connsm = &g_ble_ll_conn_sm[0];
   217e8:	4d1b      	ldr	r5, [pc, #108]	; (21858 <ble_ll_conn_module_init+0x80>)
    for (i = 0; i < MYNEWT_VAL(BLE_MAX_CONNECTIONS); ++i) {
   217ea:	b16c      	cbz	r4, 21808 <ble_ll_conn_module_init+0x30>

        ++connsm;
    }

    /* Register connection statistics */
    rc = stats_init_and_reg(STATS_HDR(ble_ll_conn_stats),
   217ec:	4b1b      	ldr	r3, [pc, #108]	; (2185c <ble_ll_conn_module_init+0x84>)
   217ee:	9301      	str	r3, [sp, #4]
   217f0:	2300      	movs	r3, #0
   217f2:	9300      	str	r3, [sp, #0]
   217f4:	221d      	movs	r2, #29
   217f6:	2104      	movs	r1, #4
   217f8:	4819      	ldr	r0, [pc, #100]	; (21860 <ble_ll_conn_module_init+0x88>)
   217fa:	f7fc fb9b 	bl	1df34 <stats_init_and_reg>
                            STATS_SIZE_INIT_PARMS(ble_ll_conn_stats, STATS_SIZE_32),
                            STATS_NAME_INIT_PARMS(ble_ll_conn_stats),
                            "ble_ll_conn");
    BLE_LL_ASSERT(rc == 0);
   217fe:	b9e8      	cbnz	r0, 2183c <ble_ll_conn_module_init+0x64>
    ble_npl_event_init(&g_ble_ll_conn_cth_flow_error_ev,
                       ble_ll_conn_cth_flow_error_fn, NULL);
#endif

    /* Call reset to finish reset of initialization */
    ble_ll_conn_module_reset();
   21800:	f7ff ff86 	bl	21710 <ble_ll_conn_module_reset>
}
   21804:	b003      	add	sp, #12
   21806:	bd30      	pop	{r4, r5, pc}
        memset(connsm, 0, sizeof(struct ble_ll_conn_sm));
   21808:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   2180c:	2100      	movs	r1, #0
   2180e:	4628      	mov	r0, r5
   21810:	f7f9 fa43 	bl	1ac9a <memset>
        connsm->conn_handle = i + 1;
   21814:	3401      	adds	r4, #1
   21816:	b2a4      	uxth	r4, r4
   21818:	80ac      	strh	r4, [r5, #4]
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   2181a:	4b0e      	ldr	r3, [pc, #56]	; (21854 <ble_ll_conn_module_init+0x7c>)
   2181c:	685a      	ldr	r2, [r3, #4]
   2181e:	6015      	str	r5, [r2, #0]
   21820:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
   21824:	605a      	str	r2, [r3, #4]
        connsm->conn_sch.sched_type = BLE_LL_SCHED_TYPE_CONN;
   21826:	2303      	movs	r3, #3
   21828:	f885 30d8 	strb.w	r3, [r5, #216]	; 0xd8
        connsm->conn_sch.cb_arg = connsm;
   2182c:	f8c5 50e4 	str.w	r5, [r5, #228]	; 0xe4
        ble_ll_ctrl_init_conn_sm(connsm);
   21830:	4628      	mov	r0, r5
   21832:	f001 fefb 	bl	2362c <ble_ll_ctrl_init_conn_sm>
        ++connsm;
   21836:	f505 75d0 	add.w	r5, r5, #416	; 0x1a0
    for (i = 0; i < MYNEWT_VAL(BLE_MAX_CONNECTIONS); ++i) {
   2183a:	e7d6      	b.n	217ea <ble_ll_conn_module_init+0x12>
    BLE_LL_ASSERT(rc == 0);
   2183c:	f7f2 ff5a 	bl	146f4 <hal_debugger_connected>
   21840:	b100      	cbz	r0, 21844 <ble_ll_conn_module_init+0x6c>
   21842:	be01      	bkpt	0x0001
   21844:	2300      	movs	r3, #0
   21846:	461a      	mov	r2, r3
   21848:	4619      	mov	r1, r3
   2184a:	4618      	mov	r0, r3
   2184c:	f7f7 fa70 	bl	18d30 <__assert_func>
   21850:	1000445c 	.word	0x1000445c
   21854:	1000446c 	.word	0x1000446c
   21858:	10004490 	.word	0x10004490
   2185c:	00038bd0 	.word	0x00038bd0
   21860:	100043dc 	.word	0x100043dc

00021864 <ble_ll_init_alloc_conn_comp_ev>:
 *
 * @return int 0: success -1: failure
 */
static int
ble_ll_init_alloc_conn_comp_ev(void)
{
   21864:	b508      	push	{r3, lr}
    int rc;
    uint8_t *evbuf;

    rc = 0;
    evbuf = g_ble_ll_conn_comp_ev;
   21866:	4b08      	ldr	r3, [pc, #32]	; (21888 <ble_ll_init_alloc_conn_comp_ev+0x24>)
   21868:	681b      	ldr	r3, [r3, #0]
    if (evbuf == NULL) {
   2186a:	b10b      	cbz	r3, 21870 <ble_ll_init_alloc_conn_comp_ev+0xc>
    rc = 0;
   2186c:	2000      	movs	r0, #0
            g_ble_ll_conn_comp_ev = evbuf;
        }
    }

    return rc;
}
   2186e:	bd08      	pop	{r3, pc}
        evbuf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   21870:	2002      	movs	r0, #2
   21872:	f010 fcbd 	bl	321f0 <ble_hci_trans_buf_alloc>
        if (!evbuf) {
   21876:	b118      	cbz	r0, 21880 <ble_ll_init_alloc_conn_comp_ev+0x1c>
            g_ble_ll_conn_comp_ev = evbuf;
   21878:	4a03      	ldr	r2, [pc, #12]	; (21888 <ble_ll_init_alloc_conn_comp_ev+0x24>)
   2187a:	6010      	str	r0, [r2, #0]
    rc = 0;
   2187c:	2000      	movs	r0, #0
   2187e:	e7f6      	b.n	2186e <ble_ll_init_alloc_conn_comp_ev+0xa>
            rc = -1;
   21880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
   21884:	e7f3      	b.n	2186e <ble_ll_init_alloc_conn_comp_ev+0xa>
   21886:	bf00      	nop
   21888:	10004460 	.word	0x10004460

0002188c <ble_ll_conn_hci_chk_conn_params>:
                                uint16_t latency, uint16_t spvn_tmo)
{
    uint32_t spvn_tmo_usecs;
    uint32_t min_spvn_tmo_usecs;

    if ((itvl_min > itvl_max) ||
   2188c:	4288      	cmp	r0, r1
   2188e:	d81a      	bhi.n	218c6 <ble_ll_conn_hci_chk_conn_params+0x3a>
   21890:	2805      	cmp	r0, #5
   21892:	d91a      	bls.n	218ca <ble_ll_conn_hci_chk_conn_params+0x3e>
        (itvl_min < BLE_HCI_CONN_ITVL_MIN) ||
   21894:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   21898:	d819      	bhi.n	218ce <ble_ll_conn_hci_chk_conn_params+0x42>
        (itvl_max > BLE_HCI_CONN_ITVL_MAX) ||
   2189a:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   2189e:	d218      	bcs.n	218d2 <ble_ll_conn_hci_chk_conn_params+0x46>
        (latency > BLE_HCI_CONN_LATENCY_MAX) ||
   218a0:	2b09      	cmp	r3, #9
   218a2:	d918      	bls.n	218d6 <ble_ll_conn_hci_chk_conn_params+0x4a>
        (spvn_tmo < BLE_HCI_CONN_SPVN_TIMEOUT_MIN) ||
   218a4:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   218a8:	d817      	bhi.n	218da <ble_ll_conn_hci_chk_conn_params+0x4e>
    /*
    * Supervision timeout (in msecs) must be more than:
    *  (1 + connLatency) * connIntervalMax * 1.25 msecs * 2.
    */
    spvn_tmo_usecs = spvn_tmo;
    spvn_tmo_usecs *= (BLE_HCI_CONN_SPVN_TMO_UNITS * 1000);
   218aa:	f242 7010 	movw	r0, #10000	; 0x2710
   218ae:	fb00 f303 	mul.w	r3, r0, r3
    min_spvn_tmo_usecs = (uint32_t)itvl_max * 2 * BLE_LL_CONN_ITVL_USECS;
    min_spvn_tmo_usecs *= (1 + latency);
   218b2:	fb02 1101 	mla	r1, r2, r1, r1
   218b6:	f640 12c4 	movw	r2, #2500	; 0x9c4
   218ba:	fb02 f101 	mul.w	r1, r2, r1
    if (spvn_tmo_usecs <= min_spvn_tmo_usecs) {
   218be:	428b      	cmp	r3, r1
   218c0:	d90d      	bls.n	218de <ble_ll_conn_hci_chk_conn_params+0x52>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    return BLE_ERR_SUCCESS;
   218c2:	2000      	movs	r0, #0
   218c4:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   218c6:	2012      	movs	r0, #18
   218c8:	4770      	bx	lr
   218ca:	2012      	movs	r0, #18
   218cc:	4770      	bx	lr
   218ce:	2012      	movs	r0, #18
   218d0:	4770      	bx	lr
   218d2:	2012      	movs	r0, #18
   218d4:	4770      	bx	lr
   218d6:	2012      	movs	r0, #18
   218d8:	4770      	bx	lr
   218da:	2012      	movs	r0, #18
   218dc:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   218de:	2012      	movs	r0, #18
}
   218e0:	4770      	bx	lr

000218e2 <ble_ll_conn_hci_create_check_params>:
    return 0;
}

static int
ble_ll_conn_hci_create_check_params(struct ble_ll_conn_create_params *cc_params)
{
   218e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   218e4:	4604      	mov	r4, r0
    int rc;

    rc = ble_ll_conn_hci_chk_conn_params(cc_params->conn_itvl,
   218e6:	6805      	ldr	r5, [r0, #0]
   218e8:	b2ae      	uxth	r6, r5
   218ea:	8983      	ldrh	r3, [r0, #12]
   218ec:	8942      	ldrh	r2, [r0, #10]
   218ee:	4631      	mov	r1, r6
   218f0:	4630      	mov	r0, r6
   218f2:	f7ff ffcb 	bl	2188c <ble_ll_conn_hci_chk_conn_params>
                                         cc_params->conn_itvl,
                                         cc_params->conn_latency,
                                         cc_params->supervision_timeout);
    if (rc) {
   218f6:	b990      	cbnz	r0, 2191e <ble_ll_conn_hci_create_check_params+0x3c>
   218f8:	4607      	mov	r7, r0
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    if (cc_params->min_ce_len > cc_params->max_ce_len) {
   218fa:	89e2      	ldrh	r2, [r4, #14]
   218fc:	8a23      	ldrh	r3, [r4, #16]
   218fe:	429a      	cmp	r2, r3
   21900:	d80f      	bhi.n	21922 <ble_ll_conn_hci_create_check_params+0x40>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    /* Adjust min/max ce length to be less than interval */
    if (cc_params->min_ce_len > cc_params->conn_itvl) {
   21902:	4295      	cmp	r5, r2
   21904:	d200      	bcs.n	21908 <ble_ll_conn_hci_create_check_params+0x26>
        cc_params->min_ce_len = cc_params->conn_itvl;
   21906:	81e6      	strh	r6, [r4, #14]
    }
    if (cc_params->max_ce_len > cc_params->conn_itvl) {
   21908:	429d      	cmp	r5, r3
   2190a:	d200      	bcs.n	2190e <ble_ll_conn_hci_create_check_params+0x2c>
        cc_params->max_ce_len = cc_params->conn_itvl;
   2190c:	8226      	strh	r6, [r4, #16]
    }

    /* Precalculate conn interval */
    ble_ll_conn_itvl_to_ticks(cc_params->conn_itvl, &cc_params->conn_itvl_ticks,
   2190e:	f104 0208 	add.w	r2, r4, #8
   21912:	1d21      	adds	r1, r4, #4
   21914:	4628      	mov	r0, r5
   21916:	f7fe ff25 	bl	20764 <ble_ll_conn_itvl_to_ticks>
                              &cc_params->conn_itvl_usecs);

    return 0;
}
   2191a:	4638      	mov	r0, r7
   2191c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2191e:	2712      	movs	r7, #18
   21920:	e7fb      	b.n	2191a <ble_ll_conn_hci_create_check_params+0x38>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   21922:	2712      	movs	r7, #18
   21924:	e7f9      	b.n	2191a <ble_ll_conn_hci_create_check_params+0x38>

00021926 <ble_ll_conn_process_conn_params>:
#endif

static int
ble_ll_conn_process_conn_params(const struct ble_hci_le_rem_conn_param_rr_cp *cmd,
                                struct ble_ll_conn_sm *connsm)
{
   21926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int rc;
    struct hci_conn_update *hcu;

    /* Retrieve command data */
    hcu = &connsm->conn_param_req;
    hcu->handle = connsm->conn_handle;
   21928:	888b      	ldrh	r3, [r1, #4]
   2192a:	f8a1 3168 	strh.w	r3, [r1, #360]	; 0x168

    BLE_LL_ASSERT(connsm->conn_handle == le16toh(cmd->conn_handle));
   2192e:	8802      	ldrh	r2, [r0, #0]
   21930:	4293      	cmp	r3, r2
   21932:	d11d      	bne.n	21970 <ble_ll_conn_process_conn_params+0x4a>

    hcu->conn_itvl_min = le16toh(cmd->conn_itvl_min);
   21934:	8844      	ldrh	r4, [r0, #2]
   21936:	f8a1 416a 	strh.w	r4, [r1, #362]	; 0x16a
    hcu->conn_itvl_max = le16toh(cmd->conn_itvl_max);
   2193a:	8885      	ldrh	r5, [r0, #4]
   2193c:	f8a1 516c 	strh.w	r5, [r1, #364]	; 0x16c
    hcu->conn_latency = le16toh(cmd->conn_latency);
   21940:	88c2      	ldrh	r2, [r0, #6]
   21942:	f8a1 216e 	strh.w	r2, [r1, #366]	; 0x16e
    hcu->supervision_timeout = le16toh(cmd->supervision_timeout);
   21946:	8903      	ldrh	r3, [r0, #8]
   21948:	f8a1 3170 	strh.w	r3, [r1, #368]	; 0x170
    hcu->min_ce_len = le16toh(cmd->min_ce);
   2194c:	8947      	ldrh	r7, [r0, #10]
   2194e:	b2be      	uxth	r6, r7
   21950:	f8a1 7172 	strh.w	r7, [r1, #370]	; 0x172
    hcu->max_ce_len = le16toh(cmd->max_ce);
   21954:	8980      	ldrh	r0, [r0, #12]
   21956:	b287      	uxth	r7, r0
   21958:	f8a1 0174 	strh.w	r0, [r1, #372]	; 0x174

    /* Check that parameter values are in range */
    rc = ble_ll_conn_hci_chk_conn_params(hcu->conn_itvl_min,
   2195c:	b29b      	uxth	r3, r3
   2195e:	b292      	uxth	r2, r2
   21960:	b2a9      	uxth	r1, r5
   21962:	b2a0      	uxth	r0, r4
   21964:	f7ff ff92 	bl	2188c <ble_ll_conn_hci_chk_conn_params>
                                         hcu->conn_itvl_max,
                                         hcu->conn_latency,
                                         hcu->supervision_timeout);

    /* Check valid min/max ce length */
    if (rc || (hcu->min_ce_len > hcu->max_ce_len)) {
   21968:	b960      	cbnz	r0, 21984 <ble_ll_conn_process_conn_params+0x5e>
   2196a:	42be      	cmp	r6, r7
   2196c:	d80c      	bhi.n	21988 <ble_ll_conn_process_conn_params+0x62>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }
    return rc;
}
   2196e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BLE_LL_ASSERT(connsm->conn_handle == le16toh(cmd->conn_handle));
   21970:	f7f2 fec0 	bl	146f4 <hal_debugger_connected>
   21974:	b100      	cbz	r0, 21978 <ble_ll_conn_process_conn_params+0x52>
   21976:	be01      	bkpt	0x0001
   21978:	2300      	movs	r3, #0
   2197a:	461a      	mov	r2, r3
   2197c:	4619      	mov	r1, r3
   2197e:	4618      	mov	r0, r3
   21980:	f7f7 f9d6 	bl	18d30 <__assert_func>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   21984:	2012      	movs	r0, #18
   21986:	e7f2      	b.n	2196e <ble_ll_conn_process_conn_params+0x48>
   21988:	2012      	movs	r0, #18
   2198a:	e7f0      	b.n	2196e <ble_ll_conn_process_conn_params+0x48>

0002198c <ble_ll_conn_comp_event_send>:
{
   2198c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BLE_LL_ASSERT(evbuf);
   2198e:	2a00      	cmp	r2, #0
   21990:	d043      	beq.n	21a1a <ble_ll_conn_comp_event_send+0x8e>
   21992:	4605      	mov	r5, r0
   21994:	460e      	mov	r6, r1
   21996:	461f      	mov	r7, r3
   21998:	4614      	mov	r4, r2
    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_ENH_CONN_COMPLETE)) {
   2199a:	200a      	movs	r0, #10
   2199c:	f002 fa86 	bl	23eac <ble_ll_hci_is_le_event_enabled>
   219a0:	2800      	cmp	r0, #0
   219a2:	d07e      	beq.n	21aa2 <ble_ll_conn_comp_event_send+0x116>
        hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   219a4:	233e      	movs	r3, #62	; 0x3e
   219a6:	7023      	strb	r3, [r4, #0]
        hci_ev->length = sizeof(*enh_ev);
   219a8:	221f      	movs	r2, #31
   219aa:	7062      	strb	r2, [r4, #1]
        memset(enh_ev, 0, sizeof(*enh_ev));
   219ac:	2100      	movs	r1, #0
   219ae:	1ca0      	adds	r0, r4, #2
   219b0:	f7f9 f973 	bl	1ac9a <memset>
        enh_ev->subev_code = BLE_HCI_LE_SUBEV_ENH_CONN_COMPLETE;
   219b4:	230a      	movs	r3, #10
   219b6:	70a3      	strb	r3, [r4, #2]
        enh_ev->status = status;
   219b8:	70e6      	strb	r6, [r4, #3]
        if (connsm) {
   219ba:	2d00      	cmp	r5, #0
   219bc:	d05e      	beq.n	21a7c <ble_ll_conn_comp_event_send+0xf0>
            enh_ev->conn_handle = htole16(connsm->conn_handle);
   219be:	88ab      	ldrh	r3, [r5, #4]
   219c0:	80a3      	strh	r3, [r4, #4]
            enh_ev->role = connsm->conn_role - 1;
   219c2:	79eb      	ldrb	r3, [r5, #7]
   219c4:	3b01      	subs	r3, #1
   219c6:	71a3      	strb	r3, [r4, #6]
            enh_ev->peer_addr_type = connsm->peer_addr_type;
   219c8:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   219cc:	71e3      	strb	r3, [r4, #7]
            memcpy(enh_ev->peer_addr, connsm->peer_addr, BLE_DEV_ADDR_LEN);
   219ce:	462b      	mov	r3, r5
   219d0:	f853 2f8f 	ldr.w	r2, [r3, #143]!
   219d4:	60a2      	str	r2, [r4, #8]
   219d6:	889b      	ldrh	r3, [r3, #4]
   219d8:	81a3      	strh	r3, [r4, #12]
            switch (connsm->conn_role) {
   219da:	79eb      	ldrb	r3, [r5, #7]
   219dc:	2b01      	cmp	r3, #1
   219de:	d026      	beq.n	21a2e <ble_ll_conn_comp_event_send+0xa2>
   219e0:	2b02      	cmp	r3, #2
   219e2:	d12f      	bne.n	21a44 <ble_ll_conn_comp_event_send+0xb8>
                rpa = ble_ll_adv_get_local_rpa(advsm);
   219e4:	4638      	mov	r0, r7
   219e6:	f7fe fa1b 	bl	1fe20 <ble_ll_adv_get_local_rpa>
            if (rpa) {
   219ea:	b120      	cbz	r0, 219f6 <ble_ll_conn_comp_event_send+0x6a>
                memcpy(enh_ev->local_rpa, rpa, BLE_DEV_ADDR_LEN);
   219ec:	6803      	ldr	r3, [r0, #0]
   219ee:	f8c4 300e 	str.w	r3, [r4, #14]
   219f2:	8883      	ldrh	r3, [r0, #4]
   219f4:	8263      	strh	r3, [r4, #18]
             if (connsm->peer_addr_resolved) {
   219f6:	f895 3095 	ldrb.w	r3, [r5, #149]	; 0x95
   219fa:	b113      	cbz	r3, 21a02 <ble_ll_conn_comp_event_send+0x76>
                 enh_ev->peer_addr_type += 2;
   219fc:	79e3      	ldrb	r3, [r4, #7]
   219fe:	3302      	adds	r3, #2
   21a00:	71e3      	strb	r3, [r4, #7]
             if (enh_ev->peer_addr_type > BLE_HCI_CONN_PEER_ADDR_RANDOM) {
   21a02:	79e3      	ldrb	r3, [r4, #7]
   21a04:	2b01      	cmp	r3, #1
   21a06:	d92d      	bls.n	21a64 <ble_ll_conn_comp_event_send+0xd8>
                 switch (connsm->conn_role) {
   21a08:	79eb      	ldrb	r3, [r5, #7]
   21a0a:	2b01      	cmp	r3, #1
   21a0c:	d024      	beq.n	21a58 <ble_ll_conn_comp_event_send+0xcc>
   21a0e:	2b02      	cmp	r3, #2
   21a10:	d138      	bne.n	21a84 <ble_ll_conn_comp_event_send+0xf8>
                     rpa = ble_ll_adv_get_peer_rpa(advsm);
   21a12:	4638      	mov	r0, r7
   21a14:	f7fe fa1a 	bl	1fe4c <ble_ll_adv_get_peer_rpa>
                 break;
   21a18:	e020      	b.n	21a5c <ble_ll_conn_comp_event_send+0xd0>
    BLE_LL_ASSERT(evbuf);
   21a1a:	f7f2 fe6b 	bl	146f4 <hal_debugger_connected>
   21a1e:	b100      	cbz	r0, 21a22 <ble_ll_conn_comp_event_send+0x96>
   21a20:	be01      	bkpt	0x0001
   21a22:	2300      	movs	r3, #0
   21a24:	461a      	mov	r2, r3
   21a26:	4619      	mov	r1, r3
   21a28:	4618      	mov	r0, r3
   21a2a:	f7f7 f981 	bl	18d30 <__assert_func>
                if (connsm->inita_identity_used) {
   21a2e:	f895 308c 	ldrb.w	r3, [r5, #140]	; 0x8c
   21a32:	2b00      	cmp	r3, #0
   21a34:	d1df      	bne.n	219f6 <ble_ll_conn_comp_event_send+0x6a>
                } else  if (connsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   21a36:	f895 308d 	ldrb.w	r3, [r5, #141]	; 0x8d
   21a3a:	2b01      	cmp	r3, #1
   21a3c:	d9db      	bls.n	219f6 <ble_ll_conn_comp_event_send+0x6a>
                    rpa = ble_ll_scan_get_local_rpa();
   21a3e:	f003 fef1 	bl	25824 <ble_ll_scan_get_local_rpa>
   21a42:	e7d2      	b.n	219ea <ble_ll_conn_comp_event_send+0x5e>
                BLE_LL_ASSERT(0);
   21a44:	f7f2 fe56 	bl	146f4 <hal_debugger_connected>
   21a48:	b100      	cbz	r0, 21a4c <ble_ll_conn_comp_event_send+0xc0>
   21a4a:	be01      	bkpt	0x0001
   21a4c:	2300      	movs	r3, #0
   21a4e:	461a      	mov	r2, r3
   21a50:	4619      	mov	r1, r3
   21a52:	4618      	mov	r0, r3
   21a54:	f7f7 f96c 	bl	18d30 <__assert_func>
                     rpa = ble_ll_scan_get_peer_rpa();
   21a58:	f003 fee0 	bl	2581c <ble_ll_scan_get_peer_rpa>
                 memcpy(enh_ev->peer_rpa, rpa, BLE_DEV_ADDR_LEN);
   21a5c:	6803      	ldr	r3, [r0, #0]
   21a5e:	6163      	str	r3, [r4, #20]
   21a60:	8883      	ldrh	r3, [r0, #4]
   21a62:	8323      	strh	r3, [r4, #24]
            enh_ev->conn_itvl = htole16(connsm->conn_itvl);
   21a64:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
   21a68:	8363      	strh	r3, [r4, #26]
            enh_ev->conn_latency = htole16(connsm->periph_latency);
   21a6a:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
   21a6e:	83a3      	strh	r3, [r4, #28]
            enh_ev->supervision_timeout = htole16(connsm->supervision_tmo);
   21a70:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
   21a74:	83e3      	strh	r3, [r4, #30]
            if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   21a76:	79eb      	ldrb	r3, [r5, #7]
   21a78:	2b02      	cmp	r3, #2
   21a7a:	d00d      	beq.n	21a98 <ble_ll_conn_comp_event_send+0x10c>
        ble_ll_hci_event_send(hci_ev);
   21a7c:	4620      	mov	r0, r4
   21a7e:	f002 f945 	bl	23d0c <ble_ll_hci_event_send>
}
   21a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                     BLE_LL_ASSERT(0);
   21a84:	f7f2 fe36 	bl	146f4 <hal_debugger_connected>
   21a88:	b100      	cbz	r0, 21a8c <ble_ll_conn_comp_event_send+0x100>
   21a8a:	be01      	bkpt	0x0001
   21a8c:	2300      	movs	r3, #0
   21a8e:	461a      	mov	r2, r3
   21a90:	4619      	mov	r1, r3
   21a92:	4618      	mov	r0, r3
   21a94:	f7f7 f94c 	bl	18d30 <__assert_func>
                enh_ev->mca = connsm->central_sca;
   21a98:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   21a9c:	f884 3020 	strb.w	r3, [r4, #32]
   21aa0:	e7ec      	b.n	21a7c <ble_ll_conn_comp_event_send+0xf0>
    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_CONN_COMPLETE)) {
   21aa2:	2001      	movs	r0, #1
   21aa4:	f002 fa02 	bl	23eac <ble_ll_hci_is_le_event_enabled>
   21aa8:	b918      	cbnz	r0, 21ab2 <ble_ll_conn_comp_event_send+0x126>
    ble_hci_trans_buf_free(evbuf);
   21aaa:	4620      	mov	r0, r4
   21aac:	f010 fbc8 	bl	32240 <ble_hci_trans_buf_free>
   21ab0:	e7e7      	b.n	21a82 <ble_ll_conn_comp_event_send+0xf6>
        hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   21ab2:	233e      	movs	r3, #62	; 0x3e
   21ab4:	7023      	strb	r3, [r4, #0]
        hci_ev->length = sizeof(*ev);
   21ab6:	2313      	movs	r3, #19
   21ab8:	7063      	strb	r3, [r4, #1]
        memset(ev, 0, sizeof(*ev));
   21aba:	2300      	movs	r3, #0
   21abc:	f8c4 3002 	str.w	r3, [r4, #2]
   21ac0:	f8c4 3006 	str.w	r3, [r4, #6]
   21ac4:	f8c4 300a 	str.w	r3, [r4, #10]
   21ac8:	f8c4 300e 	str.w	r3, [r4, #14]
   21acc:	f8c4 3011 	str.w	r3, [r4, #17]
        ev->subev_code = BLE_HCI_LE_SUBEV_CONN_COMPLETE;
   21ad0:	2301      	movs	r3, #1
   21ad2:	70a3      	strb	r3, [r4, #2]
        ev->status = status;
   21ad4:	70e6      	strb	r6, [r4, #3]
        if (connsm) {
   21ad6:	b1cd      	cbz	r5, 21b0c <ble_ll_conn_comp_event_send+0x180>
            ev->conn_handle = htole16(connsm->conn_handle);
   21ad8:	88ab      	ldrh	r3, [r5, #4]
   21ada:	80a3      	strh	r3, [r4, #4]
            ev->role = connsm->conn_role - 1;
   21adc:	79eb      	ldrb	r3, [r5, #7]
   21ade:	3b01      	subs	r3, #1
   21ae0:	71a3      	strb	r3, [r4, #6]
            ev->peer_addr_type = connsm->peer_addr_type;
   21ae2:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   21ae6:	71e3      	strb	r3, [r4, #7]
            memcpy(ev->peer_addr, connsm->peer_addr, BLE_DEV_ADDR_LEN);
   21ae8:	462b      	mov	r3, r5
   21aea:	f853 2f8f 	ldr.w	r2, [r3, #143]!
   21aee:	60a2      	str	r2, [r4, #8]
   21af0:	889b      	ldrh	r3, [r3, #4]
   21af2:	81a3      	strh	r3, [r4, #12]
            ev->conn_itvl = htole16(connsm->conn_itvl);
   21af4:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
   21af8:	81e3      	strh	r3, [r4, #14]
            ev->conn_latency = htole16(connsm->periph_latency);
   21afa:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
   21afe:	8223      	strh	r3, [r4, #16]
            ev->supervision_timeout = htole16(connsm->supervision_tmo);
   21b00:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
   21b04:	8263      	strh	r3, [r4, #18]
            if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   21b06:	79eb      	ldrb	r3, [r5, #7]
   21b08:	2b02      	cmp	r3, #2
   21b0a:	d003      	beq.n	21b14 <ble_ll_conn_comp_event_send+0x188>
        ble_ll_hci_event_send(hci_ev);
   21b0c:	4620      	mov	r0, r4
   21b0e:	f002 f8fd 	bl	23d0c <ble_ll_hci_event_send>
        return;
   21b12:	e7b6      	b.n	21a82 <ble_ll_conn_comp_event_send+0xf6>
                ev->mca = connsm->central_sca;
   21b14:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   21b18:	7523      	strb	r3, [r4, #20]
   21b1a:	e7f7      	b.n	21b0c <ble_ll_conn_comp_event_send+0x180>

00021b1c <ble_ll_conn_hci_cancel_conn_complete_event>:
/* this is called from same context after cmd complete is send so it is
 * safe to use g_ble_ll_conn_comp_ev
 */
static void
ble_ll_conn_hci_cancel_conn_complete_event(void)
{
   21b1c:	b508      	push	{r3, lr}
    BLE_LL_ASSERT(g_ble_ll_conn_comp_ev);
   21b1e:	4b0b      	ldr	r3, [pc, #44]	; (21b4c <ble_ll_conn_hci_cancel_conn_complete_event+0x30>)
   21b20:	681a      	ldr	r2, [r3, #0]
   21b22:	b142      	cbz	r2, 21b36 <ble_ll_conn_hci_cancel_conn_complete_event+0x1a>

    ble_ll_conn_comp_event_send(NULL, BLE_ERR_UNK_CONN_ID,
   21b24:	2300      	movs	r3, #0
   21b26:	2102      	movs	r1, #2
   21b28:	4618      	mov	r0, r3
   21b2a:	f7ff ff2f 	bl	2198c <ble_ll_conn_comp_event_send>
                                g_ble_ll_conn_comp_ev, NULL);
    g_ble_ll_conn_comp_ev = NULL;
   21b2e:	4b07      	ldr	r3, [pc, #28]	; (21b4c <ble_ll_conn_hci_cancel_conn_complete_event+0x30>)
   21b30:	2200      	movs	r2, #0
   21b32:	601a      	str	r2, [r3, #0]
}
   21b34:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(g_ble_ll_conn_comp_ev);
   21b36:	f7f2 fddd 	bl	146f4 <hal_debugger_connected>
   21b3a:	b100      	cbz	r0, 21b3e <ble_ll_conn_hci_cancel_conn_complete_event+0x22>
   21b3c:	be01      	bkpt	0x0001
   21b3e:	2300      	movs	r3, #0
   21b40:	461a      	mov	r2, r3
   21b42:	4619      	mov	r1, r3
   21b44:	4618      	mov	r0, r3
   21b46:	f7f7 f8f3 	bl	18d30 <__assert_func>
   21b4a:	bf00      	nop
   21b4c:	10004460 	.word	0x10004460

00021b50 <ble_ll_conn_num_comp_pkts_event_send>:
{
   21b50:	b570      	push	{r4, r5, r6, lr}
    if (connsm == NULL) {
   21b52:	b138      	cbz	r0, 21b64 <ble_ll_conn_num_comp_pkts_event_send+0x14>
   21b54:	4604      	mov	r4, r0
}

static inline uint32_t
ble_npl_time_get(void)
{
    return os_time_get();
   21b56:	f7f8 fd77 	bl	1a648 <os_time_get>
    if ((ble_npl_stime_t)(ble_npl_time_get() - g_ble_ll_last_num_comp_pkt_evt) <
   21b5a:	4b35      	ldr	r3, [pc, #212]	; (21c30 <ble_ll_conn_num_comp_pkts_event_send+0xe0>)
   21b5c:	681b      	ldr	r3, [r3, #0]
   21b5e:	1ac0      	subs	r0, r0, r3
   21b60:	28ff      	cmp	r0, #255	; 0xff
   21b62:	d905      	bls.n	21b70 <ble_ll_conn_num_comp_pkts_event_send+0x20>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   21b64:	4b33      	ldr	r3, [pc, #204]	; (21c34 <ble_ll_conn_num_comp_pkts_event_send+0xe4>)
   21b66:	681c      	ldr	r4, [r3, #0]
    event_sent = 0;
   21b68:	2600      	movs	r6, #0
    hci_ev = NULL;
   21b6a:	4630      	mov	r0, r6
    ev = NULL;
   21b6c:	4635      	mov	r5, r6
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   21b6e:	e035      	b.n	21bdc <ble_ll_conn_num_comp_pkts_event_send+0x8c>
        if (connsm->completed_pkts) {
   21b70:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   21b74:	2b00      	cmp	r3, #0
   21b76:	d056      	beq.n	21c26 <ble_ll_conn_num_comp_pkts_event_send+0xd6>
            hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   21b78:	2002      	movs	r0, #2
   21b7a:	f010 fb39 	bl	321f0 <ble_hci_trans_buf_alloc>
            if (hci_ev) {
   21b7e:	2800      	cmp	r0, #0
   21b80:	d051      	beq.n	21c26 <ble_ll_conn_num_comp_pkts_event_send+0xd6>
                hci_ev->opcode = BLE_HCI_EVCODE_NUM_COMP_PKTS;
   21b82:	2213      	movs	r2, #19
   21b84:	7002      	strb	r2, [r0, #0]
                hci_ev->length = sizeof(*ev);
   21b86:	2201      	movs	r2, #1
   21b88:	7042      	strb	r2, [r0, #1]
                ev->count = 1;
   21b8a:	7082      	strb	r2, [r0, #2]
                ev->completed[0].handle = htole16(connsm->conn_handle);
   21b8c:	88a2      	ldrh	r2, [r4, #4]
   21b8e:	f8a0 2003 	strh.w	r2, [r0, #3]
                ev->completed[0].packets = htole16(connsm->completed_pkts);
   21b92:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
   21b96:	f8a0 2005 	strh.w	r2, [r0, #5]
                hci_ev->length += sizeof(ev->completed[0]);
   21b9a:	2205      	movs	r2, #5
   21b9c:	7042      	strb	r2, [r0, #1]
                connsm->completed_pkts = 0;
   21b9e:	2200      	movs	r2, #0
   21ba0:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
                ble_ll_hci_event_send(hci_ev);
   21ba4:	f002 f8b2 	bl	23d0c <ble_ll_hci_event_send>
        return;
   21ba8:	e03d      	b.n	21c26 <ble_ll_conn_num_comp_pkts_event_send+0xd6>
            if (!hci_ev) {
   21baa:	b320      	cbz	r0, 21bf6 <ble_ll_conn_num_comp_pkts_event_send+0xa6>
            ev->completed[ev->count].handle = htole16(connsm->conn_handle);
   21bac:	782b      	ldrb	r3, [r5, #0]
   21bae:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   21bb2:	88a2      	ldrh	r2, [r4, #4]
   21bb4:	f8a3 2001 	strh.w	r2, [r3, #1]
            ev->completed[ev->count].packets = htole16(connsm->completed_pkts);
   21bb8:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
   21bbc:	f8a3 2003 	strh.w	r2, [r3, #3]
            hci_ev->length += sizeof(ev->completed[ev->count]);
   21bc0:	7843      	ldrb	r3, [r0, #1]
   21bc2:	3304      	adds	r3, #4
   21bc4:	7043      	strb	r3, [r0, #1]
            ev->count++;
   21bc6:	782b      	ldrb	r3, [r5, #0]
   21bc8:	3301      	adds	r3, #1
   21bca:	702b      	strb	r3, [r5, #0]
            connsm->completed_pkts = 0;
   21bcc:	2300      	movs	r3, #0
   21bce:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
            if (ev->count == max_handles) {
   21bd2:	782b      	ldrb	r3, [r5, #0]
   21bd4:	2b11      	cmp	r3, #17
   21bd6:	d01a      	beq.n	21c0e <ble_ll_conn_num_comp_pkts_event_send+0xbe>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   21bd8:	f8d4 40b4 	ldr.w	r4, [r4, #180]	; 0xb4
   21bdc:	b1e4      	cbz	r4, 21c18 <ble_ll_conn_num_comp_pkts_event_send+0xc8>
        if ((connsm->conn_state != BLE_LL_CONN_STATE_IDLE) &&
   21bde:	79a3      	ldrb	r3, [r4, #6]
   21be0:	2b00      	cmp	r3, #0
   21be2:	d0f9      	beq.n	21bd8 <ble_ll_conn_num_comp_pkts_event_send+0x88>
            (connsm->completed_pkts || !STAILQ_EMPTY(&connsm->conn_txq))) {
   21be4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
        if ((connsm->conn_state != BLE_LL_CONN_STATE_IDLE) &&
   21be8:	2b00      	cmp	r3, #0
   21bea:	d1de      	bne.n	21baa <ble_ll_conn_num_comp_pkts_event_send+0x5a>
            (connsm->completed_pkts || !STAILQ_EMPTY(&connsm->conn_txq))) {
   21bec:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   21bf0:	2b00      	cmp	r3, #0
   21bf2:	d1da      	bne.n	21baa <ble_ll_conn_num_comp_pkts_event_send+0x5a>
   21bf4:	e7f0      	b.n	21bd8 <ble_ll_conn_num_comp_pkts_event_send+0x88>
                hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   21bf6:	2002      	movs	r0, #2
   21bf8:	f010 fafa 	bl	321f0 <ble_hci_trans_buf_alloc>
                if (!hci_ev) {
   21bfc:	b160      	cbz	r0, 21c18 <ble_ll_conn_num_comp_pkts_event_send+0xc8>
                hci_ev->opcode = BLE_HCI_EVCODE_NUM_COMP_PKTS;
   21bfe:	2313      	movs	r3, #19
   21c00:	7003      	strb	r3, [r0, #0]
                hci_ev->length = sizeof(*ev);
   21c02:	2301      	movs	r3, #1
   21c04:	7043      	strb	r3, [r0, #1]
                ev = (void *)hci_ev->data;
   21c06:	1c85      	adds	r5, r0, #2
                ev->count = 0;
   21c08:	2300      	movs	r3, #0
   21c0a:	7083      	strb	r3, [r0, #2]
   21c0c:	e7ce      	b.n	21bac <ble_ll_conn_num_comp_pkts_event_send+0x5c>
                ble_ll_hci_event_send(hci_ev);
   21c0e:	f002 f87d 	bl	23d0c <ble_ll_hci_event_send>
                event_sent = 1;
   21c12:	2601      	movs	r6, #1
                hci_ev = NULL;
   21c14:	2000      	movs	r0, #0
   21c16:	e7df      	b.n	21bd8 <ble_ll_conn_num_comp_pkts_event_send+0x88>
    if (hci_ev) {
   21c18:	b130      	cbz	r0, 21c28 <ble_ll_conn_num_comp_pkts_event_send+0xd8>
        ble_ll_hci_event_send(hci_ev);
   21c1a:	f002 f877 	bl	23d0c <ble_ll_hci_event_send>
   21c1e:	f7f8 fd13 	bl	1a648 <os_time_get>
        g_ble_ll_last_num_comp_pkt_evt = ble_npl_time_get();
   21c22:	4b03      	ldr	r3, [pc, #12]	; (21c30 <ble_ll_conn_num_comp_pkts_event_send+0xe0>)
   21c24:	6018      	str	r0, [r3, #0]
}
   21c26:	bd70      	pop	{r4, r5, r6, pc}
    if (event_sent) {
   21c28:	2e00      	cmp	r6, #0
   21c2a:	d0fc      	beq.n	21c26 <ble_ll_conn_num_comp_pkts_event_send+0xd6>
   21c2c:	e7f7      	b.n	21c1e <ble_ll_conn_num_comp_pkts_event_send+0xce>
   21c2e:	bf00      	nop
   21c30:	10004630 	.word	0x10004630
   21c34:	1000445c 	.word	0x1000445c

00021c38 <ble_ll_auth_pyld_tmo_event_send>:
{
   21c38:	b510      	push	{r4, lr}
   21c3a:	4604      	mov	r4, r0
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_AUTH_PYLD_TMO)) {
   21c3c:	2057      	movs	r0, #87	; 0x57
   21c3e:	f002 f959 	bl	23ef4 <ble_ll_hci_is_event_enabled>
   21c42:	b900      	cbnz	r0, 21c46 <ble_ll_auth_pyld_tmo_event_send+0xe>
}
   21c44:	bd10      	pop	{r4, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   21c46:	2002      	movs	r0, #2
   21c48:	f010 fad2 	bl	321f0 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   21c4c:	2800      	cmp	r0, #0
   21c4e:	d0f9      	beq.n	21c44 <ble_ll_auth_pyld_tmo_event_send+0xc>
            hci_ev->opcode = BLE_HCI_EVCODE_AUTH_PYLD_TMO;
   21c50:	2257      	movs	r2, #87	; 0x57
   21c52:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   21c54:	2202      	movs	r2, #2
   21c56:	7042      	strb	r2, [r0, #1]
            ev->conn_handle = htole16(connsm->conn_handle);
   21c58:	88a2      	ldrh	r2, [r4, #4]
   21c5a:	8042      	strh	r2, [r0, #2]
            ble_ll_hci_event_send(hci_ev);
   21c5c:	f002 f856 	bl	23d0c <ble_ll_hci_event_send>
}
   21c60:	e7f0      	b.n	21c44 <ble_ll_auth_pyld_tmo_event_send+0xc>

00021c62 <ble_ll_disconn_comp_event_send>:
{
   21c62:	b538      	push	{r3, r4, r5, lr}
   21c64:	4605      	mov	r5, r0
   21c66:	460c      	mov	r4, r1
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_DISCONN_CMP)) {
   21c68:	2005      	movs	r0, #5
   21c6a:	f002 f943 	bl	23ef4 <ble_ll_hci_is_event_enabled>
   21c6e:	b900      	cbnz	r0, 21c72 <ble_ll_disconn_comp_event_send+0x10>
}
   21c70:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   21c72:	2002      	movs	r0, #2
   21c74:	f010 fabc 	bl	321f0 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   21c78:	2800      	cmp	r0, #0
   21c7a:	d0f9      	beq.n	21c70 <ble_ll_disconn_comp_event_send+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_DISCONN_CMP;
   21c7c:	2205      	movs	r2, #5
   21c7e:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   21c80:	2204      	movs	r2, #4
   21c82:	7042      	strb	r2, [r0, #1]
            ev->status = BLE_ERR_SUCCESS;
   21c84:	2200      	movs	r2, #0
   21c86:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   21c88:	88aa      	ldrh	r2, [r5, #4]
   21c8a:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->reason = reason;
   21c8e:	7144      	strb	r4, [r0, #5]
            ble_ll_hci_event_send(hci_ev);
   21c90:	f002 f83c 	bl	23d0c <ble_ll_hci_event_send>
}
   21c94:	e7ec      	b.n	21c70 <ble_ll_disconn_comp_event_send+0xe>

00021c96 <ble_ll_conn_hci_create_check_scan>:
    if (p->filter_policy > BLE_HCI_INITIATOR_FILT_POLICY_MAX) {
   21c96:	7803      	ldrb	r3, [r0, #0]
   21c98:	2b01      	cmp	r3, #1
   21c9a:	d808      	bhi.n	21cae <ble_ll_conn_hci_create_check_scan+0x18>
    if ((p->filter_policy == 0) &&
   21c9c:	b913      	cbnz	r3, 21ca4 <ble_ll_conn_hci_create_check_scan+0xe>
        (p->peer_addr_type > BLE_HCI_CONN_PEER_ADDR_MAX)) {
   21c9e:	7883      	ldrb	r3, [r0, #2]
    if ((p->filter_policy == 0) &&
   21ca0:	2b03      	cmp	r3, #3
   21ca2:	d806      	bhi.n	21cb2 <ble_ll_conn_hci_create_check_scan+0x1c>
    if (p->own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) {
   21ca4:	7843      	ldrb	r3, [r0, #1]
   21ca6:	2b03      	cmp	r3, #3
   21ca8:	d805      	bhi.n	21cb6 <ble_ll_conn_hci_create_check_scan+0x20>
    return 0;
   21caa:	2000      	movs	r0, #0
   21cac:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   21cae:	2012      	movs	r0, #18
   21cb0:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   21cb2:	2012      	movs	r0, #18
   21cb4:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   21cb6:	2012      	movs	r0, #18
}
   21cb8:	4770      	bx	lr
	...

00021cbc <ble_ll_conn_hci_create>:
    if (len < sizeof(*cmd)) {
   21cbc:	2918      	cmp	r1, #24
   21cbe:	f240 8081 	bls.w	21dc4 <ble_ll_conn_hci_create+0x108>
{
   21cc2:	b510      	push	{r4, lr}
   21cc4:	b08a      	sub	sp, #40	; 0x28
   21cc6:	4604      	mov	r4, r0
    if (g_ble_ll_conn_create_sm.connsm) {
   21cc8:	4b43      	ldr	r3, [pc, #268]	; (21dd8 <ble_ll_conn_hci_create+0x11c>)
   21cca:	681b      	ldr	r3, [r3, #0]
   21ccc:	b113      	cbz	r3, 21cd4 <ble_ll_conn_hci_create+0x18>
        return BLE_ERR_CMD_DISALLOWED;
   21cce:	200c      	movs	r0, #12
}
   21cd0:	b00a      	add	sp, #40	; 0x28
   21cd2:	bd10      	pop	{r4, pc}
    if (ble_ll_scan_enabled()) {
   21cd4:	f003 fd9c 	bl	25810 <ble_ll_scan_enabled>
   21cd8:	2800      	cmp	r0, #0
   21cda:	d175      	bne.n	21dc8 <ble_ll_conn_hci_create+0x10c>
    cc_scan.own_addr_type = cmd->own_addr_type;
   21cdc:	7b23      	ldrb	r3, [r4, #12]
   21cde:	f88d 3015 	strb.w	r3, [sp, #21]
    cc_scan.filter_policy = cmd->filter_policy;
   21ce2:	7923      	ldrb	r3, [r4, #4]
   21ce4:	f88d 3014 	strb.w	r3, [sp, #20]
    if (cc_scan.filter_policy == 0) {
   21ce8:	2b00      	cmp	r3, #0
   21cea:	d15e      	bne.n	21daa <ble_ll_conn_hci_create+0xee>
        cc_scan.peer_addr_type = cmd->peer_addr_type;
   21cec:	7963      	ldrb	r3, [r4, #5]
   21cee:	f88d 3016 	strb.w	r3, [sp, #22]
        memcpy(&cc_scan.peer_addr, cmd->peer_addr, BLE_DEV_ADDR_LEN);
   21cf2:	4623      	mov	r3, r4
   21cf4:	f853 2f06 	ldr.w	r2, [r3, #6]!
   21cf8:	f8cd 2017 	str.w	r2, [sp, #23]
   21cfc:	889b      	ldrh	r3, [r3, #4]
   21cfe:	f8ad 301b 	strh.w	r3, [sp, #27]
    cc_scan.scan_params[PHY_UNCODED].itvl = le16toh(cmd->scan_itvl);
   21d02:	8823      	ldrh	r3, [r4, #0]
   21d04:	f8ad 301e 	strh.w	r3, [sp, #30]
    cc_scan.scan_params[PHY_UNCODED].window = le16toh(cmd->scan_window);
   21d08:	8863      	ldrh	r3, [r4, #2]
   21d0a:	f8ad 3020 	strh.w	r3, [sp, #32]
    rc = ble_ll_conn_hci_create_check_scan(&cc_scan);
   21d0e:	a805      	add	r0, sp, #20
   21d10:	f7ff ffc1 	bl	21c96 <ble_ll_conn_hci_create_check_scan>
    if (rc) {
   21d14:	2800      	cmp	r0, #0
   21d16:	d1db      	bne.n	21cd0 <ble_ll_conn_hci_create+0x14>
    conn_itvl_min = le16toh(cmd->min_conn_itvl);
   21d18:	f8b4 200d 	ldrh.w	r2, [r4, #13]
    conn_itvl_max = le16toh(cmd->max_conn_itvl);
   21d1c:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    if (conn_itvl_min > conn_itvl_max) {
   21d20:	429a      	cmp	r2, r3
   21d22:	d853      	bhi.n	21dcc <ble_ll_conn_hci_create+0x110>
    cc_params.conn_itvl = conn_itvl_max;
   21d24:	9300      	str	r3, [sp, #0]
    cc_params.conn_latency = le16toh(cmd->conn_latency);
   21d26:	f8b4 3011 	ldrh.w	r3, [r4, #17]
   21d2a:	f8ad 300a 	strh.w	r3, [sp, #10]
    cc_params.supervision_timeout = le16toh(cmd->tmo);
   21d2e:	f8b4 3013 	ldrh.w	r3, [r4, #19]
   21d32:	f8ad 300c 	strh.w	r3, [sp, #12]
    cc_params.min_ce_len = le16toh(cmd->min_ce);
   21d36:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   21d3a:	f8ad 300e 	strh.w	r3, [sp, #14]
    cc_params.max_ce_len = le16toh(cmd->max_ce);
   21d3e:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   21d42:	f8ad 3010 	strh.w	r3, [sp, #16]
    rc = ble_ll_conn_hci_create_check_params(&cc_params);
   21d46:	4668      	mov	r0, sp
   21d48:	f7ff fdcb 	bl	218e2 <ble_ll_conn_hci_create_check_params>
    if (rc) {
   21d4c:	2800      	cmp	r0, #0
   21d4e:	d1bf      	bne.n	21cd0 <ble_ll_conn_hci_create+0x14>
    if (ble_ll_init_alloc_conn_comp_ev()) {
   21d50:	f7ff fd88 	bl	21864 <ble_ll_init_alloc_conn_comp_ev>
   21d54:	2800      	cmp	r0, #0
   21d56:	d13b      	bne.n	21dd0 <ble_ll_conn_hci_create+0x114>
    connsm = ble_ll_conn_sm_get();
   21d58:	f7fe fd50 	bl	207fc <ble_ll_conn_sm_get>
    if (connsm == NULL) {
   21d5c:	4604      	mov	r4, r0
   21d5e:	2800      	cmp	r0, #0
   21d60:	d038      	beq.n	21dd4 <ble_ll_conn_hci_create+0x118>
    ble_ll_conn_central_init(connsm, &cc_scan, &cc_params);
   21d62:	466a      	mov	r2, sp
   21d64:	a905      	add	r1, sp, #20
   21d66:	f7ff f82d 	bl	20dc4 <ble_ll_conn_central_init>
    ble_ll_conn_sm_new(connsm);
   21d6a:	4620      	mov	r0, r4
   21d6c:	f7ff f854 	bl	20e18 <ble_ll_conn_sm_new>
    rc = ble_ll_scan_initiator_start(connsm, 0, &cc_scan);
   21d70:	aa05      	add	r2, sp, #20
   21d72:	2100      	movs	r1, #0
   21d74:	4620      	mov	r0, r4
   21d76:	f003 fd03 	bl	25780 <ble_ll_scan_initiator_start>
    if (rc) {
   21d7a:	2800      	cmp	r0, #0
   21d7c:	d0a8      	beq.n	21cd0 <ble_ll_conn_hci_create+0x14>
        SLIST_REMOVE(&g_ble_ll_conn_active_list,connsm,ble_ll_conn_sm,act_sle);
   21d7e:	4b17      	ldr	r3, [pc, #92]	; (21ddc <ble_ll_conn_hci_create+0x120>)
   21d80:	681b      	ldr	r3, [r3, #0]
   21d82:	42a3      	cmp	r3, r4
   21d84:	d019      	beq.n	21dba <ble_ll_conn_hci_create+0xfe>
   21d86:	461a      	mov	r2, r3
   21d88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   21d8c:	42a3      	cmp	r3, r4
   21d8e:	d1fa      	bne.n	21d86 <ble_ll_conn_hci_create+0xca>
   21d90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   21d94:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   21d98:	2300      	movs	r3, #0
   21d9a:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
   21d9e:	4b10      	ldr	r3, [pc, #64]	; (21de0 <ble_ll_conn_hci_create+0x124>)
   21da0:	685a      	ldr	r2, [r3, #4]
   21da2:	6014      	str	r4, [r2, #0]
   21da4:	34b4      	adds	r4, #180	; 0xb4
   21da6:	605c      	str	r4, [r3, #4]
   21da8:	e792      	b.n	21cd0 <ble_ll_conn_hci_create+0x14>
        cc_scan.peer_addr_type = 0;
   21daa:	2300      	movs	r3, #0
   21dac:	f88d 3016 	strb.w	r3, [sp, #22]
        memset(&cc_scan.peer_addr, 0, BLE_DEV_ADDR_LEN);
   21db0:	f8cd 3017 	str.w	r3, [sp, #23]
   21db4:	f8ad 301b 	strh.w	r3, [sp, #27]
   21db8:	e7a3      	b.n	21d02 <ble_ll_conn_hci_create+0x46>
        SLIST_REMOVE(&g_ble_ll_conn_active_list,connsm,ble_ll_conn_sm,act_sle);
   21dba:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   21dbe:	4b07      	ldr	r3, [pc, #28]	; (21ddc <ble_ll_conn_hci_create+0x120>)
   21dc0:	601a      	str	r2, [r3, #0]
   21dc2:	e7e9      	b.n	21d98 <ble_ll_conn_hci_create+0xdc>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   21dc4:	2012      	movs	r0, #18
}
   21dc6:	4770      	bx	lr
        return BLE_ERR_CMD_DISALLOWED;
   21dc8:	200c      	movs	r0, #12
   21dca:	e781      	b.n	21cd0 <ble_ll_conn_hci_create+0x14>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   21dcc:	2012      	movs	r0, #18
   21dce:	e77f      	b.n	21cd0 <ble_ll_conn_hci_create+0x14>
        return BLE_ERR_MEM_CAPACITY;
   21dd0:	2007      	movs	r0, #7
   21dd2:	e77d      	b.n	21cd0 <ble_ll_conn_hci_create+0x14>
        return BLE_ERR_CONN_LIMIT;
   21dd4:	2009      	movs	r0, #9
   21dd6:	e77b      	b.n	21cd0 <ble_ll_conn_hci_create+0x14>
   21dd8:	10004464 	.word	0x10004464
   21ddc:	1000445c 	.word	0x1000445c
   21de0:	1000446c 	.word	0x1000446c

00021de4 <ble_ll_conn_hci_read_rem_features>:
    if (len != sizeof(*cmd)) {
   21de4:	2902      	cmp	r1, #2
   21de6:	d001      	beq.n	21dec <ble_ll_conn_hci_read_rem_features+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   21de8:	2012      	movs	r0, #18
}
   21dea:	4770      	bx	lr
{
   21dec:	b510      	push	{r4, lr}
    connsm = ble_ll_conn_find_active_conn(le16toh(cmd->conn_handle));
   21dee:	8800      	ldrh	r0, [r0, #0]
   21df0:	f7fe fcf2 	bl	207d8 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   21df4:	4604      	mov	r4, r0
   21df6:	b308      	cbz	r0, 21e3c <ble_ll_conn_hci_read_rem_features+0x58>
    if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   21df8:	78c3      	ldrb	r3, [r0, #3]
   21dfa:	f013 0f10 	tst.w	r3, #16
   21dfe:	d11f      	bne.n	21e40 <ble_ll_conn_hci_read_rem_features+0x5c>
    if (!connsm->csmflags.cfbit.rxd_features &&
   21e00:	f013 0f08 	tst.w	r3, #8
   21e04:	d10b      	bne.n	21e1e <ble_ll_conn_hci_read_rem_features+0x3a>
                !IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG)) {
   21e06:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    if (!connsm->csmflags.cfbit.rxd_features &&
   21e0a:	f013 0f08 	tst.w	r3, #8
   21e0e:	d106      	bne.n	21e1e <ble_ll_conn_hci_read_rem_features+0x3a>
        if ((connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) &&
   21e10:	79c3      	ldrb	r3, [r0, #7]
   21e12:	2b02      	cmp	r3, #2
   21e14:	d009      	beq.n	21e2a <ble_ll_conn_hci_read_rem_features+0x46>
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG);
   21e16:	2103      	movs	r1, #3
   21e18:	4620      	mov	r0, r4
   21e1a:	f001 f803 	bl	22e24 <ble_ll_ctrl_proc_start>
    connsm->csmflags.cfbit.pending_hci_rd_features = 1;
   21e1e:	78e3      	ldrb	r3, [r4, #3]
   21e20:	f043 0310 	orr.w	r3, r3, #16
   21e24:	70e3      	strb	r3, [r4, #3]
    return BLE_ERR_SUCCESS;
   21e26:	2000      	movs	r0, #0
}
   21e28:	bd10      	pop	{r4, pc}
            !(ble_ll_read_supp_features() & BLE_LL_FEAT_PERIPH_INIT)) {
   21e2a:	f7fc ffed 	bl	1ee08 <ble_ll_read_supp_features>
   21e2e:	f000 0208 	and.w	r2, r0, #8
   21e32:	2300      	movs	r3, #0
        if ((connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) &&
   21e34:	4313      	orrs	r3, r2
   21e36:	d1ee      	bne.n	21e16 <ble_ll_conn_hci_read_rem_features+0x32>
                return BLE_ERR_CMD_DISALLOWED;
   21e38:	200c      	movs	r0, #12
   21e3a:	e7f5      	b.n	21e28 <ble_ll_conn_hci_read_rem_features+0x44>
        return BLE_ERR_UNK_CONN_ID;
   21e3c:	2002      	movs	r0, #2
   21e3e:	e7f3      	b.n	21e28 <ble_ll_conn_hci_read_rem_features+0x44>
        return BLE_ERR_CMD_DISALLOWED;
   21e40:	200c      	movs	r0, #12
   21e42:	e7f1      	b.n	21e28 <ble_ll_conn_hci_read_rem_features+0x44>

00021e44 <ble_ll_conn_hci_update>:
{
   21e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21e46:	4605      	mov	r5, r0
    handle = le16toh(cmd->conn_handle);
   21e48:	8807      	ldrh	r7, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   21e4a:	b2b8      	uxth	r0, r7
   21e4c:	f7fe fcc4 	bl	207d8 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   21e50:	2800      	cmp	r0, #0
   21e52:	d062      	beq.n	21f1a <ble_ll_conn_hci_update+0xd6>
   21e54:	4604      	mov	r4, r0
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ) ||
   21e56:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   21e5a:	f013 0f41 	tst.w	r3, #65	; 0x41
   21e5e:	d15e      	bne.n	21f1e <ble_ll_conn_hci_update+0xda>
    if ((connsm->conn_features & BLE_LL_FEAT_CONN_PARM_REQ) == 0) {
   21e60:	f890 103b 	ldrb.w	r1, [r0, #59]	; 0x3b
   21e64:	f011 0602 	ands.w	r6, r1, #2
   21e68:	d104      	bne.n	21e74 <ble_ll_conn_hci_update+0x30>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   21e6a:	79c3      	ldrb	r3, [r0, #7]
   21e6c:	2b02      	cmp	r3, #2
   21e6e:	d102      	bne.n	21e76 <ble_ll_conn_hci_update+0x32>
            return BLE_ERR_UNSUPP_REM_FEATURE;
   21e70:	251a      	movs	r5, #26
   21e72:	e00a      	b.n	21e8a <ble_ll_conn_hci_update+0x46>
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_PARAM_REQ;
   21e74:	2606      	movs	r6, #6
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   21e76:	7823      	ldrb	r3, [r4, #0]
   21e78:	f013 0f40 	tst.w	r3, #64	; 0x40
   21e7c:	d011      	beq.n	21ea2 <ble_ll_conn_hci_update+0x5e>
        switch (connsm->conn_role) {
   21e7e:	79e3      	ldrb	r3, [r4, #7]
   21e80:	2b01      	cmp	r3, #1
   21e82:	d004      	beq.n	21e8e <ble_ll_conn_hci_update+0x4a>
   21e84:	2b02      	cmp	r3, #2
   21e86:	d13e      	bne.n	21f06 <ble_ll_conn_hci_update+0xc2>
   21e88:	2523      	movs	r5, #35	; 0x23
}
   21e8a:	4628      	mov	r0, r5
   21e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            connsm->csmflags.cfbit.awaiting_host_reply = 0;
   21e8e:	7823      	ldrb	r3, [r4, #0]
   21e90:	f36f 1386 	bfc	r3, #6, #1
   21e94:	7023      	strb	r3, [r4, #0]
            ble_ll_ctrl_reject_ind_send(connsm, connsm->host_reply_opcode,
   21e96:	2223      	movs	r2, #35	; 0x23
   21e98:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
   21e9c:	4620      	mov	r0, r4
   21e9e:	f001 fb9d 	bl	235dc <ble_ll_ctrl_reject_ind_send>
    if (connsm->csmflags.cfbit.chanmap_update_scheduled) {
   21ea2:	7863      	ldrb	r3, [r4, #1]
   21ea4:	f013 0f10 	tst.w	r3, #16
   21ea8:	d002      	beq.n	21eb0 <ble_ll_conn_hci_update+0x6c>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   21eaa:	79e3      	ldrb	r3, [r4, #7]
   21eac:	2b02      	cmp	r3, #2
   21eae:	d038      	beq.n	21f22 <ble_ll_conn_hci_update+0xde>
    hcu->conn_itvl_min = le16toh(cmd->conn_itvl_min);
   21eb0:	886b      	ldrh	r3, [r5, #2]
   21eb2:	b298      	uxth	r0, r3
   21eb4:	f8a4 316a 	strh.w	r3, [r4, #362]	; 0x16a
    hcu->conn_itvl_max = le16toh(cmd->conn_itvl_max);
   21eb8:	88ab      	ldrh	r3, [r5, #4]
   21eba:	b299      	uxth	r1, r3
   21ebc:	f8a4 316c 	strh.w	r3, [r4, #364]	; 0x16c
    hcu->conn_latency = le16toh(cmd->conn_latency);
   21ec0:	88eb      	ldrh	r3, [r5, #6]
   21ec2:	b29a      	uxth	r2, r3
   21ec4:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
    hcu->supervision_timeout = le16toh(cmd->supervision_timeout);
   21ec8:	f8b5 c008 	ldrh.w	ip, [r5, #8]
   21ecc:	fa1f f38c 	uxth.w	r3, ip
   21ed0:	f8a4 c170 	strh.w	ip, [r4, #368]	; 0x170
    hcu->min_ce_len = le16toh(cmd->min_ce_len);
   21ed4:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
   21ed8:	fa1f fe8c 	uxth.w	lr, ip
   21edc:	f8a4 c172 	strh.w	ip, [r4, #370]	; 0x172
    hcu->max_ce_len = le16toh(cmd->max_ce_len);
   21ee0:	89ad      	ldrh	r5, [r5, #12]
   21ee2:	fa1f fc85 	uxth.w	ip, r5
   21ee6:	f8a4 5174 	strh.w	r5, [r4, #372]	; 0x174
    if (hcu->min_ce_len > hcu->max_ce_len) {
   21eea:	45e6      	cmp	lr, ip
   21eec:	d81b      	bhi.n	21f26 <ble_ll_conn_hci_update+0xe2>
    rc = ble_ll_conn_hci_chk_conn_params(hcu->conn_itvl_min,
   21eee:	f7ff fccd 	bl	2188c <ble_ll_conn_hci_chk_conn_params>
    if (!rc) {
   21ef2:	4605      	mov	r5, r0
   21ef4:	2800      	cmp	r0, #0
   21ef6:	d1c8      	bne.n	21e8a <ble_ll_conn_hci_update+0x46>
        hcu->handle = handle;
   21ef8:	f8a4 7168 	strh.w	r7, [r4, #360]	; 0x168
        ble_ll_ctrl_proc_start(connsm, ctrl_proc);
   21efc:	4631      	mov	r1, r6
   21efe:	4620      	mov	r0, r4
   21f00:	f000 ff90 	bl	22e24 <ble_ll_ctrl_proc_start>
   21f04:	e7c1      	b.n	21e8a <ble_ll_conn_hci_update+0x46>
            BLE_LL_ASSERT(0);
   21f06:	f7f2 fbf5 	bl	146f4 <hal_debugger_connected>
   21f0a:	b100      	cbz	r0, 21f0e <ble_ll_conn_hci_update+0xca>
   21f0c:	be01      	bkpt	0x0001
   21f0e:	2300      	movs	r3, #0
   21f10:	461a      	mov	r2, r3
   21f12:	4619      	mov	r1, r3
   21f14:	4618      	mov	r0, r3
   21f16:	f7f6 ff0b 	bl	18d30 <__assert_func>
        return BLE_ERR_UNK_CONN_ID;
   21f1a:	2502      	movs	r5, #2
   21f1c:	e7b5      	b.n	21e8a <ble_ll_conn_hci_update+0x46>
        return BLE_ERR_CMD_DISALLOWED;
   21f1e:	250c      	movs	r5, #12
   21f20:	e7b3      	b.n	21e8a <ble_ll_conn_hci_update+0x46>
            return BLE_ERR_DIFF_TRANS_COLL;
   21f22:	252a      	movs	r5, #42	; 0x2a
   21f24:	e7b1      	b.n	21e8a <ble_ll_conn_hci_update+0x46>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   21f26:	2512      	movs	r5, #18
   21f28:	e7af      	b.n	21e8a <ble_ll_conn_hci_update+0x46>
	...

00021f2c <ble_ll_conn_hci_param_rr>:
{
   21f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len != sizeof(*cmd)) {
   21f30:	290e      	cmp	r1, #14
   21f32:	d003      	beq.n	21f3c <ble_ll_conn_hci_param_rr+0x10>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   21f34:	2412      	movs	r4, #18
}
   21f36:	4620      	mov	r0, r4
   21f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21f3c:	4604      	mov	r4, r0
   21f3e:	4616      	mov	r6, r2
   21f40:	461d      	mov	r5, r3
    handle = le16toh(cmd->conn_handle);
   21f42:	8807      	ldrh	r7, [r0, #0]
   21f44:	fa1f f887 	uxth.w	r8, r7
    if ((ble_ll_read_supp_features() & BLE_LL_FEAT_CONN_PARM_REQ) == 0) {
   21f48:	f7fc ff5e 	bl	1ee08 <ble_ll_read_supp_features>
   21f4c:	f000 0202 	and.w	r2, r0, #2
   21f50:	2300      	movs	r3, #0
   21f52:	4313      	orrs	r3, r2
   21f54:	d104      	bne.n	21f60 <ble_ll_conn_hci_param_rr+0x34>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   21f56:	2401      	movs	r4, #1
    rsp->conn_handle = htole16(handle);
   21f58:	8037      	strh	r7, [r6, #0]
    *rsplen = sizeof(*rsp);
   21f5a:	2302      	movs	r3, #2
   21f5c:	702b      	strb	r3, [r5, #0]
    return rc;
   21f5e:	e7ea      	b.n	21f36 <ble_ll_conn_hci_param_rr+0xa>
    connsm = ble_ll_conn_find_active_conn(handle);
   21f60:	4640      	mov	r0, r8
   21f62:	f7fe fc39 	bl	207d8 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   21f66:	4680      	mov	r8, r0
   21f68:	b388      	cbz	r0, 21fce <ble_ll_conn_hci_param_rr+0xa2>
    rc = ble_ll_conn_process_conn_params(cmd, connsm);
   21f6a:	4601      	mov	r1, r0
   21f6c:	4620      	mov	r0, r4
   21f6e:	f7ff fcda 	bl	21926 <ble_ll_conn_process_conn_params>
   21f72:	4604      	mov	r4, r0
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   21f74:	f898 3000 	ldrb.w	r3, [r8]
   21f78:	f013 0f40 	tst.w	r3, #64	; 0x40
   21f7c:	d0ec      	beq.n	21f58 <ble_ll_conn_hci_param_rr+0x2c>
        if (rc == BLE_ERR_SUCCESS) {
   21f7e:	b9c8      	cbnz	r0, 21fb4 <ble_ll_conn_hci_param_rr+0x88>
            om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN,
   21f80:	2110      	movs	r1, #16
   21f82:	201b      	movs	r0, #27
   21f84:	f7f8 f83c 	bl	1a000 <os_msys_get_pkthdr>
            if (om) {
   21f88:	4681      	mov	r9, r0
   21f8a:	b1c8      	cbz	r0, 21fc0 <ble_ll_conn_hci_param_rr+0x94>
                dptr = om->om_data;
   21f8c:	f8d0 a000 	ldr.w	sl, [r0]
                rsp_opcode = ble_ll_ctrl_conn_param_reply(connsm, dptr,
   21f90:	f508 72c1 	add.w	r2, r8, #386	; 0x182
   21f94:	4651      	mov	r1, sl
   21f96:	4640      	mov	r0, r8
   21f98:	f000 fe20 	bl	22bdc <ble_ll_ctrl_conn_param_reply>
                dptr[0] = rsp_opcode;
   21f9c:	f88a 0000 	strb.w	r0, [sl]
                len = g_ble_ll_ctrl_pkt_lengths[rsp_opcode] + 1;
   21fa0:	4b0c      	ldr	r3, [pc, #48]	; (21fd4 <ble_ll_conn_hci_param_rr+0xa8>)
   21fa2:	5c1b      	ldrb	r3, [r3, r0]
   21fa4:	3301      	adds	r3, #1
                ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   21fa6:	b2db      	uxtb	r3, r3
   21fa8:	2203      	movs	r2, #3
   21faa:	4649      	mov	r1, r9
   21fac:	4640      	mov	r0, r8
   21fae:	f7ff fa21 	bl	213f4 <ble_ll_conn_enqueue_pkt>
   21fb2:	e005      	b.n	21fc0 <ble_ll_conn_hci_param_rr+0x94>
            ble_ll_ctrl_reject_ind_send(connsm, connsm->host_reply_opcode,
   21fb4:	223b      	movs	r2, #59	; 0x3b
   21fb6:	f898 1034 	ldrb.w	r1, [r8, #52]	; 0x34
   21fba:	4640      	mov	r0, r8
   21fbc:	f001 fb0e 	bl	235dc <ble_ll_ctrl_reject_ind_send>
        connsm->csmflags.cfbit.awaiting_host_reply = 0;
   21fc0:	f898 3000 	ldrb.w	r3, [r8]
   21fc4:	f36f 1386 	bfc	r3, #6, #1
   21fc8:	f888 3000 	strb.w	r3, [r8]
   21fcc:	e7c4      	b.n	21f58 <ble_ll_conn_hci_param_rr+0x2c>
        rc = BLE_ERR_UNK_CONN_ID;
   21fce:	2402      	movs	r4, #2
   21fd0:	e7c2      	b.n	21f58 <ble_ll_conn_hci_param_rr+0x2c>
   21fd2:	bf00      	nop
   21fd4:	00038bdc 	.word	0x00038bdc

00021fd8 <ble_ll_conn_hci_param_nrr>:
    if (len != sizeof(*cmd)) {
   21fd8:	2903      	cmp	r1, #3
   21fda:	d001      	beq.n	21fe0 <ble_ll_conn_hci_param_nrr+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   21fdc:	2012      	movs	r0, #18
}
   21fde:	4770      	bx	lr
{
   21fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21fe4:	4606      	mov	r6, r0
   21fe6:	4615      	mov	r5, r2
   21fe8:	461c      	mov	r4, r3
    handle = le16toh(cmd->conn_handle);
   21fea:	8807      	ldrh	r7, [r0, #0]
   21fec:	fa1f f887 	uxth.w	r8, r7
    if ((ble_ll_read_supp_features() & BLE_LL_FEAT_CONN_PARM_REQ) == 0) {
   21ff0:	f7fc ff0a 	bl	1ee08 <ble_ll_read_supp_features>
   21ff4:	f000 0202 	and.w	r2, r0, #2
   21ff8:	2300      	movs	r3, #0
   21ffa:	4313      	orrs	r3, r2
   21ffc:	d105      	bne.n	2200a <ble_ll_conn_hci_param_nrr+0x32>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   21ffe:	2001      	movs	r0, #1
    rsp->conn_handle = htole16(handle);
   22000:	802f      	strh	r7, [r5, #0]
    *rsplen = sizeof(*rsp);
   22002:	2302      	movs	r3, #2
   22004:	7023      	strb	r3, [r4, #0]
}
   22006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connsm = ble_ll_conn_find_active_conn(handle);
   2200a:	4640      	mov	r0, r8
   2200c:	f7fe fbe4 	bl	207d8 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   22010:	4680      	mov	r8, r0
   22012:	b190      	cbz	r0, 2203a <ble_ll_conn_hci_param_nrr+0x62>
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   22014:	7803      	ldrb	r3, [r0, #0]
   22016:	f013 0f40 	tst.w	r3, #64	; 0x40
   2201a:	d101      	bne.n	22020 <ble_ll_conn_hci_param_nrr+0x48>
    rc = BLE_ERR_SUCCESS;
   2201c:	2000      	movs	r0, #0
   2201e:	e7ef      	b.n	22000 <ble_ll_conn_hci_param_nrr+0x28>
        ble_ll_ctrl_reject_ind_send(connsm, connsm->host_reply_opcode,
   22020:	78b2      	ldrb	r2, [r6, #2]
   22022:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
   22026:	f001 fad9 	bl	235dc <ble_ll_ctrl_reject_ind_send>
        connsm->csmflags.cfbit.awaiting_host_reply = 0;
   2202a:	f898 3000 	ldrb.w	r3, [r8]
   2202e:	f36f 1386 	bfc	r3, #6, #1
   22032:	f888 3000 	strb.w	r3, [r8]
    rc = BLE_ERR_SUCCESS;
   22036:	2000      	movs	r0, #0
   22038:	e7e2      	b.n	22000 <ble_ll_conn_hci_param_nrr+0x28>
        rc = BLE_ERR_UNK_CONN_ID;
   2203a:	2002      	movs	r0, #2
   2203c:	e7e0      	b.n	22000 <ble_ll_conn_hci_param_nrr+0x28>
	...

00022040 <ble_ll_conn_create_cancel>:
 *
 * @return int
 */
int
ble_ll_conn_create_cancel(ble_ll_hci_post_cmd_complete_cb *post_cmd_cb)
{
   22040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22042:	4607      	mov	r7, r0
     * If we receive this command and we have not got a connection
     * create command, we have to return disallowed. The spec does not say
     * what happens if the connection has already been established. We
     * return disallowed as well
     */
    OS_ENTER_CRITICAL(sr);
   22044:	f7f8 fc30 	bl	1a8a8 <os_arch_save_sr>
   22048:	4604      	mov	r4, r0
    connsm = g_ble_ll_conn_create_sm.connsm;
   2204a:	4b0d      	ldr	r3, [pc, #52]	; (22080 <ble_ll_conn_create_cancel+0x40>)
   2204c:	681d      	ldr	r5, [r3, #0]
    if (connsm && (connsm->conn_state == BLE_LL_CONN_STATE_IDLE)) {
   2204e:	b1a5      	cbz	r5, 2207a <ble_ll_conn_create_cancel+0x3a>
   22050:	79ab      	ldrb	r3, [r5, #6]
   22052:	b12b      	cbz	r3, 22060 <ble_ll_conn_create_cancel+0x20>
        *post_cmd_cb = ble_ll_conn_hci_cancel_conn_complete_event;

        rc = BLE_ERR_SUCCESS;
    } else {
        /* If we are not attempting to create a connection*/
        rc = BLE_ERR_CMD_DISALLOWED;
   22054:	260c      	movs	r6, #12
    }
    OS_EXIT_CRITICAL(sr);
   22056:	4620      	mov	r0, r4
   22058:	f7f8 fc2c 	bl	1a8b4 <os_arch_restore_sr>

    return rc;
}
   2205c:	4630      	mov	r0, r6
   2205e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        g_ble_ll_conn_create_sm.connsm = NULL;
   22060:	2600      	movs	r6, #0
   22062:	4b07      	ldr	r3, [pc, #28]	; (22080 <ble_ll_conn_create_cancel+0x40>)
   22064:	601e      	str	r6, [r3, #0]
        ble_ll_scan_sm_stop(1);
   22066:	2001      	movs	r0, #1
   22068:	f003 f9dc 	bl	25424 <ble_ll_scan_sm_stop>
        ble_ll_conn_end(connsm, BLE_ERR_UNK_CONN_ID);
   2206c:	2102      	movs	r1, #2
   2206e:	4628      	mov	r0, r5
   22070:	f7fe ff7e 	bl	20f70 <ble_ll_conn_end>
        *post_cmd_cb = ble_ll_conn_hci_cancel_conn_complete_event;
   22074:	4b03      	ldr	r3, [pc, #12]	; (22084 <ble_ll_conn_create_cancel+0x44>)
   22076:	603b      	str	r3, [r7, #0]
        rc = BLE_ERR_SUCCESS;
   22078:	e7ed      	b.n	22056 <ble_ll_conn_create_cancel+0x16>
        rc = BLE_ERR_CMD_DISALLOWED;
   2207a:	260c      	movs	r6, #12
   2207c:	e7eb      	b.n	22056 <ble_ll_conn_create_cancel+0x16>
   2207e:	bf00      	nop
   22080:	10004464 	.word	0x10004464
   22084:	00021b1d 	.word	0x00021b1d

00022088 <ble_ll_conn_hci_disconnect_cmd>:
 *
 * @return int
 */
int
ble_ll_conn_hci_disconnect_cmd(const struct ble_hci_lc_disconnect_cp *cmd)
{
   22088:	b510      	push	{r4, lr}
   2208a:	4604      	mov	r4, r0
    int rc;
    uint16_t handle;
    struct ble_ll_conn_sm *connsm;

    /* Check for valid parameters */
    handle = le16toh(cmd->conn_handle);
   2208c:	8800      	ldrh	r0, [r0, #0]

    rc = BLE_ERR_INV_HCI_CMD_PARMS;
    if (handle <= BLE_LL_CONN_MAX_CONN_HANDLE) {
   2208e:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
   22092:	d23b      	bcs.n	2210c <ble_ll_conn_hci_disconnect_cmd+0x84>
        /* Make sure reason is valid */
        switch (cmd->reason) {
   22094:	78a3      	ldrb	r3, [r4, #2]
   22096:	2b29      	cmp	r3, #41	; 0x29
   22098:	d819      	bhi.n	220ce <ble_ll_conn_hci_disconnect_cmd+0x46>
   2209a:	2b05      	cmp	r3, #5
   2209c:	d338      	bcc.n	22110 <ble_ll_conn_hci_disconnect_cmd+0x88>
   2209e:	3b05      	subs	r3, #5
   220a0:	2b24      	cmp	r3, #36	; 0x24
   220a2:	d837      	bhi.n	22114 <ble_ll_conn_hci_disconnect_cmd+0x8c>
   220a4:	e8df f003 	tbb	[pc, r3]
   220a8:	36363617 	.word	0x36363617
   220ac:	36363636 	.word	0x36363636
   220b0:	36363636 	.word	0x36363636
   220b4:	17173636 	.word	0x17173636
   220b8:	36363617 	.word	0x36363617
   220bc:	36361736 	.word	0x36361736
   220c0:	36363636 	.word	0x36363636
   220c4:	36363636 	.word	0x36363636
   220c8:	36363636 	.word	0x36363636
   220cc:	17          	.byte	0x17
   220cd:	00          	.byte	0x00
   220ce:	2b3b      	cmp	r3, #59	; 0x3b
   220d0:	d001      	beq.n	220d6 <ble_ll_conn_hci_disconnect_cmd+0x4e>
   220d2:	2012      	movs	r0, #18
            break;
        }
    }

    return rc;
}
   220d4:	bd10      	pop	{r4, pc}
            connsm = ble_ll_conn_find_active_conn(handle);
   220d6:	f7fe fb7f 	bl	207d8 <ble_ll_conn_find_active_conn>
            if (connsm) {
   220da:	b1e8      	cbz	r0, 22118 <ble_ll_conn_hci_disconnect_cmd+0x90>
                if (connsm->disconnect_reason) {
   220dc:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
   220e0:	b9e2      	cbnz	r2, 2211c <ble_ll_conn_hci_disconnect_cmd+0x94>
                    BLE_LL_ASSERT(CONN_F_TERMINATE_STARTED(connsm) == 0);
   220e2:	f990 2000 	ldrsb.w	r2, [r0]
   220e6:	2a00      	cmp	r2, #0
   220e8:	db06      	blt.n	220f8 <ble_ll_conn_hci_disconnect_cmd+0x70>
                    connsm->disconnect_reason = cmd->reason;
   220ea:	78a2      	ldrb	r2, [r4, #2]
   220ec:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
                    ble_ll_ctrl_terminate_start(connsm);
   220f0:	f000 fe66 	bl	22dc0 <ble_ll_ctrl_terminate_start>
                    rc = BLE_ERR_SUCCESS;
   220f4:	2000      	movs	r0, #0
   220f6:	e7ed      	b.n	220d4 <ble_ll_conn_hci_disconnect_cmd+0x4c>
                    BLE_LL_ASSERT(CONN_F_TERMINATE_STARTED(connsm) == 0);
   220f8:	f7f2 fafc 	bl	146f4 <hal_debugger_connected>
   220fc:	b100      	cbz	r0, 22100 <ble_ll_conn_hci_disconnect_cmd+0x78>
   220fe:	be01      	bkpt	0x0001
   22100:	2300      	movs	r3, #0
   22102:	461a      	mov	r2, r3
   22104:	4619      	mov	r1, r3
   22106:	4618      	mov	r0, r3
   22108:	f7f6 fe12 	bl	18d30 <__assert_func>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   2210c:	2012      	movs	r0, #18
   2210e:	e7e1      	b.n	220d4 <ble_ll_conn_hci_disconnect_cmd+0x4c>
        switch (cmd->reason) {
   22110:	2012      	movs	r0, #18
   22112:	e7df      	b.n	220d4 <ble_ll_conn_hci_disconnect_cmd+0x4c>
   22114:	2012      	movs	r0, #18
   22116:	e7dd      	b.n	220d4 <ble_ll_conn_hci_disconnect_cmd+0x4c>
                rc = BLE_ERR_UNK_CONN_ID;
   22118:	2002      	movs	r0, #2
   2211a:	e7db      	b.n	220d4 <ble_ll_conn_hci_disconnect_cmd+0x4c>
                    rc = BLE_ERR_CMD_DISALLOWED;
   2211c:	200c      	movs	r0, #12
    return rc;
   2211e:	e7d9      	b.n	220d4 <ble_ll_conn_hci_disconnect_cmd+0x4c>

00022120 <ble_ll_conn_hci_rd_rem_ver_cmd>:
ble_ll_conn_hci_rd_rem_ver_cmd(const uint8_t *cmdbuf, uint8_t len)
{
    struct ble_ll_conn_sm *connsm;
    const struct ble_hci_rd_rem_ver_info_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof(*cmd)) {
   22120:	2902      	cmp	r1, #2
   22122:	d001      	beq.n	22128 <ble_ll_conn_hci_rd_rem_ver_cmd+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   22124:	2012      	movs	r0, #18
    } else {
        connsm->pending_ctrl_procs |= (1 << BLE_LL_CTRL_PROC_VERSION_XCHG);
    }

    return BLE_ERR_SUCCESS;
}
   22126:	4770      	bx	lr
{
   22128:	b508      	push	{r3, lr}
    connsm = ble_ll_conn_find_active_conn(le16toh(cmd->conn_handle));
   2212a:	8800      	ldrh	r0, [r0, #0]
   2212c:	f7fe fb54 	bl	207d8 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   22130:	b198      	cbz	r0, 2215a <ble_ll_conn_hci_rd_rem_ver_cmd+0x3a>
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG)) {
   22132:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
   22136:	f012 0f10 	tst.w	r2, #16
   2213a:	d110      	bne.n	2215e <ble_ll_conn_hci_rd_rem_ver_cmd+0x3e>
    if (!connsm->csmflags.cfbit.version_ind_sent) {
   2213c:	7841      	ldrb	r1, [r0, #1]
   2213e:	f011 0f04 	tst.w	r1, #4
   22142:	d005      	beq.n	22150 <ble_ll_conn_hci_rd_rem_ver_cmd+0x30>
        connsm->pending_ctrl_procs |= (1 << BLE_LL_CTRL_PROC_VERSION_XCHG);
   22144:	f042 0210 	orr.w	r2, r2, #16
   22148:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
    return BLE_ERR_SUCCESS;
   2214c:	2000      	movs	r0, #0
}
   2214e:	bd08      	pop	{r3, pc}
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG);
   22150:	2104      	movs	r1, #4
   22152:	f000 fe67 	bl	22e24 <ble_ll_ctrl_proc_start>
    return BLE_ERR_SUCCESS;
   22156:	2000      	movs	r0, #0
   22158:	e7f9      	b.n	2214e <ble_ll_conn_hci_rd_rem_ver_cmd+0x2e>
        return BLE_ERR_UNK_CONN_ID;
   2215a:	2002      	movs	r0, #2
   2215c:	e7f7      	b.n	2214e <ble_ll_conn_hci_rd_rem_ver_cmd+0x2e>
        return BLE_ERR_CMD_DISALLOWED;
   2215e:	200c      	movs	r0, #12
   22160:	e7f5      	b.n	2214e <ble_ll_conn_hci_rd_rem_ver_cmd+0x2e>

00022162 <ble_ll_conn_hci_rd_rssi>:
    const struct ble_hci_rd_rssi_cp *cmd = (const void *) cmdbuf;
    struct ble_hci_rd_rssi_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    int rc;

    if (len != sizeof(*cmd)) {
   22162:	2902      	cmp	r1, #2
   22164:	d001      	beq.n	2216a <ble_ll_conn_hci_rd_rssi+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   22166:	2012      	movs	r0, #18
        rc = BLE_ERR_SUCCESS;
    }

    *rsplen = sizeof(*rsp);
    return rc;
}
   22168:	4770      	bx	lr
{
   2216a:	b538      	push	{r3, r4, r5, lr}
   2216c:	4614      	mov	r4, r2
   2216e:	461d      	mov	r5, r3
    rsp->handle = cmd->handle;
   22170:	8803      	ldrh	r3, [r0, #0]
   22172:	8013      	strh	r3, [r2, #0]
    connsm = ble_ll_conn_find_active_conn(le16toh(cmd->handle));
   22174:	8800      	ldrh	r0, [r0, #0]
   22176:	f7fe fb2f 	bl	207d8 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   2217a:	b130      	cbz	r0, 2218a <ble_ll_conn_hci_rd_rssi+0x28>
        rsp->rssi = connsm->conn_rssi;
   2217c:	f990 3008 	ldrsb.w	r3, [r0, #8]
   22180:	70a3      	strb	r3, [r4, #2]
        rc = BLE_ERR_SUCCESS;
   22182:	2000      	movs	r0, #0
    *rsplen = sizeof(*rsp);
   22184:	2303      	movs	r3, #3
   22186:	702b      	strb	r3, [r5, #0]
}
   22188:	bd38      	pop	{r3, r4, r5, pc}
        rsp->rssi = 127;
   2218a:	237f      	movs	r3, #127	; 0x7f
   2218c:	70a3      	strb	r3, [r4, #2]
        rc = BLE_ERR_UNK_CONN_ID;
   2218e:	2002      	movs	r0, #2
   22190:	e7f8      	b.n	22184 <ble_ll_conn_hci_rd_rssi+0x22>

00022192 <ble_ll_conn_hci_rd_chan_map>:
    struct ble_hci_le_rd_chan_map_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;

    if (len != sizeof(*cmd)) {
   22192:	2902      	cmp	r1, #2
   22194:	d001      	beq.n	2219a <ble_ll_conn_hci_rd_chan_map+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   22196:	2012      	movs	r0, #18

    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   22198:	4770      	bx	lr
{
   2219a:	b570      	push	{r4, r5, r6, lr}
   2219c:	4614      	mov	r4, r2
   2219e:	461d      	mov	r5, r3
    handle = le16toh(cmd->conn_handle);
   221a0:	8806      	ldrh	r6, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   221a2:	b2b0      	uxth	r0, r6
   221a4:	f7fe fb18 	bl	207d8 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   221a8:	4602      	mov	r2, r0
   221aa:	b170      	cbz	r0, 221ca <ble_ll_conn_hci_rd_chan_map+0x38>
        if (connsm->csmflags.cfbit.chanmap_update_scheduled) {
   221ac:	7843      	ldrb	r3, [r0, #1]
   221ae:	f013 0f10 	tst.w	r3, #16
   221b2:	d010      	beq.n	221d6 <ble_ll_conn_hci_rd_chan_map+0x44>
            memcpy(rsp->chan_map, connsm->req_chanmap, BLE_LL_CONN_CHMAP_LEN);
   221b4:	f852 3f21 	ldr.w	r3, [r2, #33]!
   221b8:	f8c4 3002 	str.w	r3, [r4, #2]
   221bc:	7913      	ldrb	r3, [r2, #4]
   221be:	71a3      	strb	r3, [r4, #6]
        rc = BLE_ERR_SUCCESS;
   221c0:	2000      	movs	r0, #0
    rsp->conn_handle = htole16(handle);
   221c2:	8026      	strh	r6, [r4, #0]
    *rsplen = sizeof(*rsp);
   221c4:	2307      	movs	r3, #7
   221c6:	702b      	strb	r3, [r5, #0]
}
   221c8:	bd70      	pop	{r4, r5, r6, pc}
        memset(rsp->chan_map, 0, sizeof(rsp->chan_map));
   221ca:	2200      	movs	r2, #0
   221cc:	f8c4 2002 	str.w	r2, [r4, #2]
   221d0:	71a2      	strb	r2, [r4, #6]
        rc = BLE_ERR_UNK_CONN_ID;
   221d2:	2002      	movs	r0, #2
   221d4:	e7f5      	b.n	221c2 <ble_ll_conn_hci_rd_chan_map+0x30>
            memcpy(rsp->chan_map, connsm->chanmap, BLE_LL_CONN_CHMAP_LEN);
   221d6:	f852 3f1c 	ldr.w	r3, [r2, #28]!
   221da:	f8c4 3002 	str.w	r3, [r4, #2]
   221de:	7913      	ldrb	r3, [r2, #4]
   221e0:	71a3      	strb	r3, [r4, #6]
        rc = BLE_ERR_SUCCESS;
   221e2:	2000      	movs	r0, #0
   221e4:	e7ed      	b.n	221c2 <ble_ll_conn_hci_rd_chan_map+0x30>

000221e6 <ble_ll_conn_hci_set_chan_class>:
ble_ll_conn_hci_set_chan_class(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_host_chan_class_cp *cmd = (const void *) cmdbuf;
    uint8_t num_used_chans;

    if (len != sizeof(*cmd)) {
   221e6:	2905      	cmp	r1, #5
   221e8:	d001      	beq.n	221ee <ble_ll_conn_hci_set_chan_class+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   221ea:	2012      	movs	r0, #18
    }

    /* Set the host channel mask */
    ble_ll_conn_set_global_chanmap(num_used_chans, cmd->chan_map);
    return BLE_ERR_SUCCESS;
}
   221ec:	4770      	bx	lr
{
   221ee:	b510      	push	{r4, lr}
   221f0:	4604      	mov	r4, r0
    num_used_chans = ble_ll_utils_calc_num_used_chans(cmd->chan_map);
   221f2:	f003 ff46 	bl	26082 <ble_ll_utils_calc_num_used_chans>
    if ((num_used_chans < 2) || ((cmd->chan_map[4] & 0xe0) != 0)) {
   221f6:	2801      	cmp	r0, #1
   221f8:	d908      	bls.n	2220c <ble_ll_conn_hci_set_chan_class+0x26>
   221fa:	7923      	ldrb	r3, [r4, #4]
   221fc:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   22200:	d106      	bne.n	22210 <ble_ll_conn_hci_set_chan_class+0x2a>
    ble_ll_conn_set_global_chanmap(num_used_chans, cmd->chan_map);
   22202:	4621      	mov	r1, r4
   22204:	f7ff f96c 	bl	214e0 <ble_ll_conn_set_global_chanmap>
    return BLE_ERR_SUCCESS;
   22208:	2000      	movs	r0, #0
}
   2220a:	bd10      	pop	{r4, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2220c:	2012      	movs	r0, #18
   2220e:	e7fc      	b.n	2220a <ble_ll_conn_hci_set_chan_class+0x24>
   22210:	2012      	movs	r0, #18
   22212:	e7fa      	b.n	2220a <ble_ll_conn_hci_set_chan_class+0x24>

00022214 <ble_ll_conn_hci_set_data_len>:
    uint16_t handle;
    uint16_t txoctets;
    uint16_t txtime;
    struct ble_ll_conn_sm *connsm;

    if (len != sizeof(*cmd)) {
   22214:	2906      	cmp	r1, #6
   22216:	d001      	beq.n	2221c <ble_ll_conn_hci_set_data_len+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   22218:	2012      	movs	r0, #18

done:
    rsp->conn_handle = htole16(handle);
    *rsplen = sizeof(*rsp);
    return rc;
}
   2221a:	4770      	bx	lr
{
   2221c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22220:	4604      	mov	r4, r0
   22222:	4616      	mov	r6, r2
   22224:	461d      	mov	r5, r3
    handle = le16toh(cmd->conn_handle);
   22226:	8807      	ldrh	r7, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   22228:	b2b8      	uxth	r0, r7
   2222a:	f7fe fad5 	bl	207d8 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   2222e:	4680      	mov	r8, r0
   22230:	b320      	cbz	r0, 2227c <ble_ll_conn_hci_set_data_len+0x68>
    txoctets = le16toh(cmd->tx_octets);
   22232:	f8b4 9002 	ldrh.w	r9, [r4, #2]
    txtime = le16toh(cmd->tx_time);
   22236:	88a4      	ldrh	r4, [r4, #4]
   22238:	fa1f fa84 	uxth.w	sl, r4
    if (!ble_ll_chk_txrx_octets(txoctets) ||
   2223c:	4648      	mov	r0, r9
   2223e:	f7fc fce9 	bl	1ec14 <ble_ll_chk_txrx_octets>
   22242:	b928      	cbnz	r0, 22250 <ble_ll_conn_hci_set_data_len+0x3c>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   22244:	2012      	movs	r0, #18
    rsp->conn_handle = htole16(handle);
   22246:	8037      	strh	r7, [r6, #0]
    *rsplen = sizeof(*rsp);
   22248:	2302      	movs	r3, #2
   2224a:	702b      	strb	r3, [r5, #0]
}
   2224c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        !ble_ll_chk_txrx_time(txtime)) {
   22250:	4650      	mov	r0, sl
   22252:	f7fc fce7 	bl	1ec24 <ble_ll_chk_txrx_time>
    if (!ble_ll_chk_txrx_octets(txoctets) ||
   22256:	2800      	cmp	r0, #0
   22258:	d0f4      	beq.n	22244 <ble_ll_conn_hci_set_data_len+0x30>
    if (connsm->max_tx_time != txtime ||
   2225a:	f8b8 3010 	ldrh.w	r3, [r8, #16]
   2225e:	4553      	cmp	r3, sl
   22260:	d103      	bne.n	2226a <ble_ll_conn_hci_set_data_len+0x56>
        connsm->max_tx_octets != txoctets) {
   22262:	f898 3009 	ldrb.w	r3, [r8, #9]
    if (connsm->max_tx_time != txtime ||
   22266:	454b      	cmp	r3, r9
   22268:	d00a      	beq.n	22280 <ble_ll_conn_hci_set_data_len+0x6c>
        connsm->max_tx_time = txtime;
   2226a:	f8a8 4010 	strh.w	r4, [r8, #16]
        connsm->max_tx_octets = txoctets;
   2226e:	f888 9009 	strb.w	r9, [r8, #9]
        ble_ll_ctrl_initiate_dle(connsm);
   22272:	4640      	mov	r0, r8
   22274:	f000 fdfe 	bl	22e74 <ble_ll_ctrl_initiate_dle>
    rc = BLE_ERR_SUCCESS;
   22278:	2000      	movs	r0, #0
   2227a:	e7e4      	b.n	22246 <ble_ll_conn_hci_set_data_len+0x32>
        rc = BLE_ERR_UNK_CONN_ID;
   2227c:	2002      	movs	r0, #2
   2227e:	e7e2      	b.n	22246 <ble_ll_conn_hci_set_data_len+0x32>
    rc = BLE_ERR_SUCCESS;
   22280:	2000      	movs	r0, #0
   22282:	e7e0      	b.n	22246 <ble_ll_conn_hci_set_data_len+0x32>

00022284 <ble_ll_conn_hci_le_start_encrypt>:
{
    const struct ble_hci_le_start_encrypt_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_conn_sm *connsm;
    int rc;

    if (len != sizeof(*cmd)) {
   22284:	291c      	cmp	r1, #28
   22286:	d001      	beq.n	2228c <ble_ll_conn_hci_le_start_encrypt+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   22288:	2012      	movs	r0, #18
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
        rc = BLE_ERR_SUCCESS;
    }

    return rc;
}
   2228a:	4770      	bx	lr
{
   2228c:	b538      	push	{r3, r4, r5, lr}
   2228e:	4604      	mov	r4, r0
    connsm = ble_ll_conn_find_active_conn(le16toh(cmd->conn_handle));
   22290:	8800      	ldrh	r0, [r0, #0]
   22292:	f7fe faa1 	bl	207d8 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   22296:	4605      	mov	r5, r0
   22298:	b1f0      	cbz	r0, 222d8 <ble_ll_conn_hci_le_start_encrypt+0x54>
    } else if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   2229a:	79c3      	ldrb	r3, [r0, #7]
   2229c:	2b02      	cmp	r3, #2
   2229e:	d01d      	beq.n	222dc <ble_ll_conn_hci_le_start_encrypt+0x58>
    } else if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_ENCRYPT) {
   222a0:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   222a4:	2b02      	cmp	r3, #2
   222a6:	d01b      	beq.n	222e0 <ble_ll_conn_hci_le_start_encrypt+0x5c>
        connsm->enc_data.host_rand_num = le64toh(cmd->rand);
   222a8:	f8d4 2002 	ldr.w	r2, [r4, #2]
   222ac:	f8d4 3006 	ldr.w	r3, [r4, #6]
   222b0:	f8c0 2128 	str.w	r2, [r0, #296]	; 0x128
   222b4:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
        connsm->enc_data.enc_div = le16toh(cmd->div);
   222b8:	8963      	ldrh	r3, [r4, #10]
   222ba:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
        swap_buf(connsm->enc_data.enc_block.key, cmd->ltk, 16);
   222be:	2210      	movs	r2, #16
   222c0:	f104 010c 	add.w	r1, r4, #12
   222c4:	f500 709c 	add.w	r0, r0, #312	; 0x138
   222c8:	f7f6 fdf8 	bl	18ebc <swap_buf>
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   222cc:	2102      	movs	r1, #2
   222ce:	4628      	mov	r0, r5
   222d0:	f000 fda8 	bl	22e24 <ble_ll_ctrl_proc_start>
        rc = BLE_ERR_SUCCESS;
   222d4:	2000      	movs	r0, #0
}
   222d6:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_ERR_UNK_CONN_ID;
   222d8:	2002      	movs	r0, #2
   222da:	e7fc      	b.n	222d6 <ble_ll_conn_hci_le_start_encrypt+0x52>
        rc = BLE_ERR_UNSPECIFIED;
   222dc:	201f      	movs	r0, #31
   222de:	e7fa      	b.n	222d6 <ble_ll_conn_hci_le_start_encrypt+0x52>
        rc = BLE_ERR_CMD_DISALLOWED;
   222e0:	200c      	movs	r0, #12
   222e2:	e7f8      	b.n	222d6 <ble_ll_conn_hci_le_start_encrypt+0x52>

000222e4 <ble_ll_conn_hci_le_ltk_reply>:
    struct ble_hci_le_lt_key_req_reply_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;

    if (len != sizeof(*cmd)) {
   222e4:	2912      	cmp	r1, #18
   222e6:	d001      	beq.n	222ec <ble_ll_conn_hci_le_ltk_reply+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   222e8:	2012      	movs	r0, #18
ltk_key_cmd_complete:
    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   222ea:	4770      	bx	lr
{
   222ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   222f0:	4606      	mov	r6, r0
   222f2:	4615      	mov	r5, r2
   222f4:	461c      	mov	r4, r3
    handle = le16toh(cmd->conn_handle);
   222f6:	f8b0 8000 	ldrh.w	r8, [r0]
    connsm = ble_ll_conn_find_active_conn(handle);
   222fa:	fa1f f088 	uxth.w	r0, r8
   222fe:	f7fe fa6b 	bl	207d8 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   22302:	4607      	mov	r7, r0
   22304:	b1d8      	cbz	r0, 2233e <ble_ll_conn_hci_le_ltk_reply+0x5a>
    if (connsm->conn_role == BLE_LL_CONN_ROLE_CENTRAL) {
   22306:	79c3      	ldrb	r3, [r0, #7]
   22308:	2b01      	cmp	r3, #1
   2230a:	d01a      	beq.n	22342 <ble_ll_conn_hci_le_ltk_reply+0x5e>
    if (connsm->enc_data.enc_state != CONN_ENC_S_LTK_REQ_WAIT) {
   2230c:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   22310:	2b09      	cmp	r3, #9
   22312:	d006      	beq.n	22322 <ble_ll_conn_hci_le_ltk_reply+0x3e>
        rc = BLE_ERR_CMD_DISALLOWED;
   22314:	200c      	movs	r0, #12
    rsp->conn_handle = htole16(handle);
   22316:	f8a5 8000 	strh.w	r8, [r5]
    *rsplen = sizeof(*rsp);
   2231a:	2302      	movs	r3, #2
   2231c:	7023      	strb	r3, [r4, #0]
}
   2231e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    swap_buf(connsm->enc_data.enc_block.key, cmd->ltk, 16);
   22322:	2210      	movs	r2, #16
   22324:	1cb1      	adds	r1, r6, #2
   22326:	f500 709c 	add.w	r0, r0, #312	; 0x138
   2232a:	f7f6 fdc7 	bl	18ebc <swap_buf>
    ble_ll_calc_session_key(connsm);
   2232e:	4638      	mov	r0, r7
   22330:	f000 fbdf 	bl	22af2 <ble_ll_calc_session_key>
    ble_ll_ctrl_start_enc_send(connsm);
   22334:	4638      	mov	r0, r7
   22336:	f000 fc30 	bl	22b9a <ble_ll_ctrl_start_enc_send>
    rc = BLE_ERR_SUCCESS;
   2233a:	2000      	movs	r0, #0
   2233c:	e7eb      	b.n	22316 <ble_ll_conn_hci_le_ltk_reply+0x32>
        rc = BLE_ERR_UNK_CONN_ID;
   2233e:	2002      	movs	r0, #2
   22340:	e7e9      	b.n	22316 <ble_ll_conn_hci_le_ltk_reply+0x32>
        rc = BLE_ERR_UNSPECIFIED;
   22342:	201f      	movs	r0, #31
   22344:	e7e7      	b.n	22316 <ble_ll_conn_hci_le_ltk_reply+0x32>

00022346 <ble_ll_conn_hci_le_ltk_neg_reply>:
    struct ble_hci_le_lt_key_req_neg_reply_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;

    if (len != sizeof(*cmd)) {
   22346:	2902      	cmp	r1, #2
   22348:	d001      	beq.n	2234e <ble_ll_conn_hci_le_ltk_neg_reply+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2234a:	2012      	movs	r0, #18
ltk_key_cmd_complete:
    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   2234c:	4770      	bx	lr
{
   2234e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22350:	4615      	mov	r5, r2
   22352:	461c      	mov	r4, r3
    handle = le16toh(cmd->conn_handle);
   22354:	8806      	ldrh	r6, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   22356:	b2b0      	uxth	r0, r6
   22358:	f7fe fa3e 	bl	207d8 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   2235c:	4607      	mov	r7, r0
   2235e:	b1a0      	cbz	r0, 2238a <ble_ll_conn_hci_le_ltk_neg_reply+0x44>
    if (connsm->conn_role == BLE_LL_CONN_ROLE_CENTRAL) {
   22360:	79c3      	ldrb	r3, [r0, #7]
   22362:	2b01      	cmp	r3, #1
   22364:	d013      	beq.n	2238e <ble_ll_conn_hci_le_ltk_neg_reply+0x48>
    if (connsm->enc_data.enc_state != CONN_ENC_S_LTK_REQ_WAIT) {
   22366:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   2236a:	2b09      	cmp	r3, #9
   2236c:	d004      	beq.n	22378 <ble_ll_conn_hci_le_ltk_neg_reply+0x32>
        rc = BLE_ERR_CMD_DISALLOWED;
   2236e:	200c      	movs	r0, #12
    rsp->conn_handle = htole16(handle);
   22370:	802e      	strh	r6, [r5, #0]
    *rsplen = sizeof(*rsp);
   22372:	2302      	movs	r3, #2
   22374:	7023      	strb	r3, [r4, #0]
}
   22376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ble_ll_ctrl_reject_ind_send(connsm, BLE_LL_CTRL_ENC_REQ,
   22378:	2206      	movs	r2, #6
   2237a:	2103      	movs	r1, #3
   2237c:	f001 f92e 	bl	235dc <ble_ll_ctrl_reject_ind_send>
    connsm->enc_data.enc_state = CONN_ENC_S_LTK_NEG_REPLY;
   22380:	230a      	movs	r3, #10
   22382:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
    rc = BLE_ERR_SUCCESS;
   22386:	2000      	movs	r0, #0
   22388:	e7f2      	b.n	22370 <ble_ll_conn_hci_le_ltk_neg_reply+0x2a>
        rc = BLE_ERR_UNK_CONN_ID;
   2238a:	2002      	movs	r0, #2
   2238c:	e7f0      	b.n	22370 <ble_ll_conn_hci_le_ltk_neg_reply+0x2a>
        rc = BLE_ERR_UNSPECIFIED;
   2238e:	201f      	movs	r0, #31
   22390:	e7ee      	b.n	22370 <ble_ll_conn_hci_le_ltk_neg_reply+0x2a>

00022392 <ble_ll_conn_hci_rd_auth_pyld_tmo>:
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;


    if (len != sizeof(*cmd)) {
   22392:	2902      	cmp	r1, #2
   22394:	d001      	beq.n	2239a <ble_ll_conn_hci_rd_auth_pyld_tmo+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   22396:	2012      	movs	r0, #18

    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   22398:	4770      	bx	lr
{
   2239a:	b570      	push	{r4, r5, r6, lr}
   2239c:	4614      	mov	r4, r2
   2239e:	461d      	mov	r5, r3
    handle = le16toh(cmd->conn_handle);
   223a0:	8806      	ldrh	r6, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   223a2:	b2b0      	uxth	r0, r6
   223a4:	f7fe fa18 	bl	207d8 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   223a8:	b138      	cbz	r0, 223ba <ble_ll_conn_hci_rd_auth_pyld_tmo+0x28>
        rsp->tmo = htole16(connsm->auth_pyld_tmo);
   223aa:	f8b0 304e 	ldrh.w	r3, [r0, #78]	; 0x4e
   223ae:	8063      	strh	r3, [r4, #2]
        rc = BLE_ERR_SUCCESS;
   223b0:	2000      	movs	r0, #0
    rsp->conn_handle = htole16(handle);
   223b2:	8026      	strh	r6, [r4, #0]
    *rsplen = sizeof(*rsp);
   223b4:	2304      	movs	r3, #4
   223b6:	702b      	strb	r3, [r5, #0]
}
   223b8:	bd70      	pop	{r4, r5, r6, pc}
        rsp->tmo = 0;
   223ba:	2300      	movs	r3, #0
   223bc:	70a3      	strb	r3, [r4, #2]
   223be:	70e3      	strb	r3, [r4, #3]
        rc = BLE_ERR_UNK_CONN_ID;
   223c0:	2002      	movs	r0, #2
   223c2:	e7f6      	b.n	223b2 <ble_ll_conn_hci_rd_auth_pyld_tmo+0x20>

000223c4 <ble_ll_conn_hci_wr_auth_pyld_tmo>:
    uint32_t min_tmo;
    uint16_t handle;
    uint16_t tmo;
    int rc;

    if (len != sizeof(*cmd)) {
   223c4:	2904      	cmp	r1, #4
   223c6:	d001      	beq.n	223cc <ble_ll_conn_hci_wr_auth_pyld_tmo+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   223c8:	2012      	movs	r0, #18
    }

    rsp->conn_handle = htole16(handle);
    *rsplen = sizeof(*rsp);
    return rc;
}
   223ca:	4770      	bx	lr
{
   223cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   223ce:	4604      	mov	r4, r0
   223d0:	4616      	mov	r6, r2
   223d2:	461d      	mov	r5, r3
    handle = le16toh(cmd->conn_handle);
   223d4:	8807      	ldrh	r7, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   223d6:	b2b8      	uxth	r0, r7
   223d8:	f7fe f9fe 	bl	207d8 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   223dc:	4602      	mov	r2, r0
   223de:	b1d8      	cbz	r0, 22418 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x54>
        tmo = le16toh(cmd->tmo);
   223e0:	8860      	ldrh	r0, [r4, #2]
   223e2:	b284      	uxth	r4, r0
        min_tmo = (uint32_t)connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   223e4:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
        min_tmo *= (connsm->periph_latency + 1);
   223e8:	f8b2 3066 	ldrh.w	r3, [r2, #102]	; 0x66
   223ec:	fb03 1301 	mla	r3, r3, r1, r1
   223f0:	f240 41e2 	movw	r1, #1250	; 0x4e2
   223f4:	fb01 f103 	mul.w	r1, r1, r3
        min_tmo /= 10000;
   223f8:	4b0c      	ldr	r3, [pc, #48]	; (2242c <ble_ll_conn_hci_wr_auth_pyld_tmo+0x68>)
   223fa:	fba3 3101 	umull	r3, r1, r3, r1
        if (tmo < min_tmo) {
   223fe:	ebb4 3f51 	cmp.w	r4, r1, lsr #13
   22402:	d30b      	bcc.n	2241c <ble_ll_conn_hci_wr_auth_pyld_tmo+0x58>
            connsm->auth_pyld_tmo = tmo;
   22404:	f8a2 004e 	strh.w	r0, [r2, #78]	; 0x4e
   22408:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
            if (ble_npl_callout_is_active(&connsm->auth_pyld_timer)) {
   2240c:	b15b      	cbz	r3, 22426 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x62>
                ble_ll_conn_auth_pyld_timer_start(connsm);
   2240e:	4610      	mov	r0, r2
   22410:	f7fe fcb8 	bl	20d84 <ble_ll_conn_auth_pyld_timer_start>
    rc = BLE_ERR_SUCCESS;
   22414:	2000      	movs	r0, #0
   22416:	e002      	b.n	2241e <ble_ll_conn_hci_wr_auth_pyld_tmo+0x5a>
        rc = BLE_ERR_UNK_CONN_ID;
   22418:	2002      	movs	r0, #2
   2241a:	e000      	b.n	2241e <ble_ll_conn_hci_wr_auth_pyld_tmo+0x5a>
            rc = BLE_ERR_INV_HCI_CMD_PARMS;
   2241c:	2012      	movs	r0, #18
    rsp->conn_handle = htole16(handle);
   2241e:	8037      	strh	r7, [r6, #0]
    *rsplen = sizeof(*rsp);
   22420:	2302      	movs	r3, #2
   22422:	702b      	strb	r3, [r5, #0]
}
   22424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rc = BLE_ERR_SUCCESS;
   22426:	2000      	movs	r0, #0
   22428:	e7f9      	b.n	2241e <ble_ll_conn_hci_wr_auth_pyld_tmo+0x5a>
   2242a:	bf00      	nop
   2242c:	d1b71759 	.word	0xd1b71759

00022430 <ble_ll_ctrl_enc_allowed_pdu>:
{
    int allowed;

    allowed = 0;

    switch (llid) {
   22430:	2801      	cmp	r0, #1
   22432:	d010      	beq.n	22456 <ble_ll_ctrl_enc_allowed_pdu+0x26>
   22434:	2803      	cmp	r0, #3
   22436:	d111      	bne.n	2245c <ble_ll_ctrl_enc_allowed_pdu+0x2c>
    case BLE_LL_LLID_CTRL:
        switch (opcode) {
   22438:	3a02      	subs	r2, #2
   2243a:	2a0f      	cmp	r2, #15
   2243c:	d809      	bhi.n	22452 <ble_ll_ctrl_enc_allowed_pdu+0x22>
   2243e:	e8df f002 	tbb	[pc, r2]
   22442:	0f0f      	.short	0x0f0f
   22444:	080f0f0f 	.word	0x080f0f0f
   22448:	0f0f0808 	.word	0x0f0f0808
   2244c:	08080f08 	.word	0x08080f08
   22450:	0f08      	.short	0x0f08
    switch (llid) {
   22452:	2000      	movs	r0, #0
   22454:	4770      	bx	lr
            allowed = 1;
            break;
        }
        break;
    case BLE_LL_LLID_DATA_FRAG:
        if (len == 0) {
   22456:	b129      	cbz	r1, 22464 <ble_ll_ctrl_enc_allowed_pdu+0x34>
    allowed = 0;
   22458:	2000      	movs	r0, #0
   2245a:	4770      	bx	lr
    switch (llid) {
   2245c:	2000      	movs	r0, #0
   2245e:	4770      	bx	lr
            allowed = 1;
   22460:	2001      	movs	r0, #1
   22462:	4770      	bx	lr
            /* Empty PDUs are allowed */
            allowed = 1;
   22464:	2001      	movs	r0, #1
        }
        break;
    }

    return allowed;
}
   22466:	4770      	bx	lr

00022468 <ble_ll_ctrl_rx_pause_enc_req>:
     * The spec does not say what to do here, but if we receive a pause
     * encryption request and we are not encrypted, what do we do? We
     * ignore it...
     */
    rc = BLE_ERR_MAX;
    if (CONN_IS_PERIPHERAL(connsm) &&
   22468:	79c3      	ldrb	r3, [r0, #7]
   2246a:	2b02      	cmp	r3, #2
   2246c:	d001      	beq.n	22472 <ble_ll_ctrl_rx_pause_enc_req+0xa>
        (connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED)) {
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
    } else {
        rc = BLE_LL_CTRL_UNKNOWN_RSP;
   2246e:	2007      	movs	r0, #7
   22470:	4770      	bx	lr
        (connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED)) {
   22472:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
    if (CONN_IS_PERIPHERAL(connsm) &&
   22476:	2b02      	cmp	r3, #2
   22478:	d001      	beq.n	2247e <ble_ll_ctrl_rx_pause_enc_req+0x16>
        rc = BLE_LL_CTRL_UNKNOWN_RSP;
   2247a:	2007      	movs	r0, #7
   2247c:	4770      	bx	lr
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
   2247e:	200b      	movs	r0, #11
    }

    return rc;
}
   22480:	4770      	bx	lr

00022482 <ble_ll_ctrl_start_rsp_timer>:
{
   22482:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   22484:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
   22488:	30b8      	adds	r0, #184	; 0xb8
   2248a:	f7f6 fe99 	bl	191c0 <os_callout_reset>
}
   2248e:	bd08      	pop	{r3, pc}

00022490 <ble_ll_ctrl_rx_start_enc_req>:
{
   22490:	b508      	push	{r3, lr}
    switch (connsm->conn_role) {
   22492:	79c3      	ldrb	r3, [r0, #7]
   22494:	2b01      	cmp	r3, #1
   22496:	d003      	beq.n	224a0 <ble_ll_ctrl_rx_start_enc_req+0x10>
   22498:	2b02      	cmp	r3, #2
   2249a:	d10c      	bne.n	224b6 <ble_ll_ctrl_rx_start_enc_req+0x26>
   2249c:	2007      	movs	r0, #7
}
   2249e:	bd08      	pop	{r3, pc}
        if (connsm->enc_data.enc_state == CONN_ENC_S_START_ENC_REQ_WAIT) {
   224a0:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   224a4:	2b07      	cmp	r3, #7
   224a6:	d001      	beq.n	224ac <ble_ll_ctrl_rx_start_enc_req+0x1c>
    rc = BLE_ERR_MAX;
   224a8:	20ff      	movs	r0, #255	; 0xff
   224aa:	e7f8      	b.n	2249e <ble_ll_ctrl_rx_start_enc_req+0xe>
            connsm->enc_data.enc_state = CONN_ENC_S_START_ENC_RSP_WAIT;
   224ac:	2308      	movs	r3, #8
   224ae:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
            rc = BLE_LL_CTRL_START_ENC_RSP;
   224b2:	2006      	movs	r0, #6
   224b4:	e7f3      	b.n	2249e <ble_ll_ctrl_rx_start_enc_req+0xe>
        BLE_LL_ASSERT(0);
   224b6:	f7f2 f91d 	bl	146f4 <hal_debugger_connected>
   224ba:	b100      	cbz	r0, 224be <ble_ll_ctrl_rx_start_enc_req+0x2e>
   224bc:	be01      	bkpt	0x0001
   224be:	2300      	movs	r3, #0
   224c0:	461a      	mov	r2, r3
   224c2:	4619      	mov	r1, r3
   224c4:	4618      	mov	r0, r3
   224c6:	f7f6 fc33 	bl	18d30 <__assert_func>

000224ca <ble_ll_ctrl_rx_pause_enc_rsp>:
 *
 * @return uint8_t
 */
static uint8_t
ble_ll_ctrl_rx_pause_enc_rsp(struct ble_ll_conn_sm *connsm)
{
   224ca:	b508      	push	{r3, lr}
    int rc;

    switch (connsm->conn_role) {
   224cc:	79c3      	ldrb	r3, [r0, #7]
   224ce:	2b01      	cmp	r3, #1
   224d0:	d016      	beq.n	22500 <ble_ll_ctrl_rx_pause_enc_rsp+0x36>
   224d2:	2b02      	cmp	r3, #2
   224d4:	d10a      	bne.n	224ec <ble_ll_ctrl_rx_pause_enc_rsp+0x22>
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
        break;
#endif
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
    case BLE_LL_CONN_ROLE_PERIPHERAL:
        if (connsm->enc_data.enc_state == CONN_ENC_S_PAUSE_ENC_RSP_WAIT) {
   224d6:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   224da:	2b05      	cmp	r3, #5
   224dc:	d001      	beq.n	224e2 <ble_ll_ctrl_rx_pause_enc_rsp+0x18>
                 * From this moment encryption is paused.
                 */
                rc = BLE_ERR_MAX;
                connsm->enc_data.enc_state = CONN_ENC_S_PAUSED;
            } else {
                rc = BLE_LL_CTRL_UNKNOWN_RSP;
   224de:	2007      	movs	r0, #7
   224e0:	e00f      	b.n	22502 <ble_ll_ctrl_rx_pause_enc_rsp+0x38>
                connsm->enc_data.enc_state = CONN_ENC_S_PAUSED;
   224e2:	2306      	movs	r3, #6
   224e4:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
                rc = BLE_ERR_MAX;
   224e8:	20ff      	movs	r0, #255	; 0xff
   224ea:	e00a      	b.n	22502 <ble_ll_ctrl_rx_pause_enc_rsp+0x38>
            }
        break;
#endif
    default:
        BLE_LL_ASSERT(0);
   224ec:	f7f2 f902 	bl	146f4 <hal_debugger_connected>
   224f0:	b100      	cbz	r0, 224f4 <ble_ll_ctrl_rx_pause_enc_rsp+0x2a>
   224f2:	be01      	bkpt	0x0001
   224f4:	2300      	movs	r3, #0
   224f6:	461a      	mov	r2, r3
   224f8:	4619      	mov	r1, r3
   224fa:	4618      	mov	r0, r3
   224fc:	f7f6 fc18 	bl	18d30 <__assert_func>
    switch (connsm->conn_role) {
   22500:	200b      	movs	r0, #11
        break;
    }

    return rc;
}
   22502:	bd08      	pop	{r3, pc}

00022504 <ble_ll_ctrl_conn_upd_make>:
{
   22504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22506:	4604      	mov	r4, r0
   22508:	460e      	mov	r6, r1
    instant = connsm->event_cntr + connsm->periph_latency + 6 + 1;
   2250a:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
   2250e:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
   22512:	441d      	add	r5, r3
   22514:	b2ad      	uxth	r5, r5
   22516:	3507      	adds	r5, #7
   22518:	b2ad      	uxth	r5, r5
    if (cp) {
   2251a:	2a00      	cmp	r2, #0
   2251c:	d066      	beq.n	225ec <ble_ll_ctrl_conn_upd_make+0xe8>
   2251e:	4611      	mov	r1, r2
        if (cp->offset0 != 0xFFFF) {
   22520:	8997      	ldrh	r7, [r2, #12]
   22522:	f64f 73ff 	movw	r3, #65535	; 0xffff
   22526:	429f      	cmp	r7, r3
   22528:	d05c      	beq.n	225e4 <ble_ll_ctrl_conn_upd_make+0xe0>
            new_itvl_usecs = cp->interval_max * BLE_LL_CONN_ITVL_USECS;
   2252a:	8853      	ldrh	r3, [r2, #2]
   2252c:	f240 42e2 	movw	r2, #1250	; 0x4e2
   22530:	fb02 f303 	mul.w	r3, r2, r3
            old_itvl_usecs = connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   22534:	f8b0 0064 	ldrh.w	r0, [r0, #100]	; 0x64
   22538:	fb02 f200 	mul.w	r2, r2, r0
            if ((int16_t)(cp->ref_conn_event_cnt - instant) >= 0) {
   2253c:	8948      	ldrh	r0, [r1, #10]
   2253e:	eba0 0c05 	sub.w	ip, r0, r5
   22542:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
   22546:	d140      	bne.n	225ca <ble_ll_ctrl_conn_upd_make+0xc6>
                num_old_ce = cp->ref_conn_event_cnt - instant;
   22548:	4660      	mov	r0, ip
                dt += (cp->offset0 * BLE_LL_CONN_ITVL_USECS);
   2254a:	f240 4ce2 	movw	ip, #1250	; 0x4e2
   2254e:	fb0c f707 	mul.w	r7, ip, r7
   22552:	fb00 7202 	mla	r2, r0, r2, r7
                dt = dt % new_itvl_usecs;
   22556:	fbb2 f0f3 	udiv	r0, r2, r3
   2255a:	fb03 2310 	mls	r3, r3, r0, r2
            req->winoffset = dt / BLE_LL_CONN_TX_WIN_USECS;
   2255e:	4a2d      	ldr	r2, [pc, #180]	; (22614 <ble_ll_ctrl_conn_upd_make+0x110>)
   22560:	fba2 2303 	umull	r2, r3, r2, r3
   22564:	0a9b      	lsrs	r3, r3, #10
   22566:	f8a4 3178 	strh.w	r3, [r4, #376]	; 0x178
        req->interval = cp->interval_max;
   2256a:	884b      	ldrh	r3, [r1, #2]
   2256c:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
        req->timeout = cp->timeout;
   22570:	88cb      	ldrh	r3, [r1, #6]
   22572:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
        req->latency = cp->latency;
   22576:	888b      	ldrh	r3, [r1, #4]
   22578:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
        req->winsize = 1;
   2257c:	2301      	movs	r3, #1
   2257e:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
    req->instant = instant;
   22582:	f8a4 5180 	strh.w	r5, [r4, #384]	; 0x180
    pyld[0] = req->winsize;
   22586:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
   2258a:	4630      	mov	r0, r6
   2258c:	f800 3b01 	strb.w	r3, [r0], #1
    put_le16(pyld + 1, req->winoffset);
   22590:	f8b4 1178 	ldrh.w	r1, [r4, #376]	; 0x178
   22594:	f7f6 fc3a 	bl	18e0c <put_le16>
    put_le16(pyld + 3, req->interval);
   22598:	f8b4 117a 	ldrh.w	r1, [r4, #378]	; 0x17a
   2259c:	1cf0      	adds	r0, r6, #3
   2259e:	f7f6 fc35 	bl	18e0c <put_le16>
    put_le16(pyld + 5, req->latency);
   225a2:	f8b4 117c 	ldrh.w	r1, [r4, #380]	; 0x17c
   225a6:	1d70      	adds	r0, r6, #5
   225a8:	f7f6 fc30 	bl	18e0c <put_le16>
    put_le16(pyld + 7, req->timeout);
   225ac:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
   225b0:	1df0      	adds	r0, r6, #7
   225b2:	f7f6 fc2b 	bl	18e0c <put_le16>
    put_le16(pyld + 9, instant);
   225b6:	4629      	mov	r1, r5
   225b8:	f106 0009 	add.w	r0, r6, #9
   225bc:	f7f6 fc26 	bl	18e0c <put_le16>
    connsm->csmflags.cfbit.conn_update_sched = 1;
   225c0:	7863      	ldrb	r3, [r4, #1]
   225c2:	f043 0301 	orr.w	r3, r3, #1
   225c6:	7063      	strb	r3, [r4, #1]
}
   225c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                num_old_ce = instant - cp->ref_conn_event_cnt;
   225ca:	1a28      	subs	r0, r5, r0
                dt = old_itvl_usecs * num_old_ce;
   225cc:	fb00 f202 	mul.w	r2, r0, r2
                dt -= (cp->offset0 * BLE_LL_CONN_ITVL_USECS);
   225d0:	f240 40e2 	movw	r0, #1250	; 0x4e2
   225d4:	fb00 2217 	mls	r2, r0, r7, r2
                dt = dt % new_itvl_usecs;
   225d8:	fbb2 f7f3 	udiv	r7, r2, r3
   225dc:	fb03 2217 	mls	r2, r3, r7, r2
                dt = new_itvl_usecs - dt;
   225e0:	1a9b      	subs	r3, r3, r2
   225e2:	e7bc      	b.n	2255e <ble_ll_ctrl_conn_upd_make+0x5a>
            req->winoffset = 0;
   225e4:	2300      	movs	r3, #0
   225e6:	f8a0 3178 	strh.w	r3, [r0, #376]	; 0x178
   225ea:	e7be      	b.n	2256a <ble_ll_ctrl_conn_upd_make+0x66>
        req->interval = hcu->conn_itvl_max;
   225ec:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   225f0:	f8a0 317a 	strh.w	r3, [r0, #378]	; 0x17a
        req->timeout = hcu->supervision_timeout;
   225f4:	f8b0 3170 	ldrh.w	r3, [r0, #368]	; 0x170
   225f8:	f8a0 317e 	strh.w	r3, [r0, #382]	; 0x17e
        req->latency = hcu->conn_latency;
   225fc:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   22600:	f8a0 317c 	strh.w	r3, [r0, #380]	; 0x17c
        req->winoffset = 0;
   22604:	2300      	movs	r3, #0
   22606:	f8a0 3178 	strh.w	r3, [r0, #376]	; 0x178
        req->winsize = connsm->tx_win_size;
   2260a:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
   2260e:	f880 3176 	strb.w	r3, [r0, #374]	; 0x176
   22612:	e7b6      	b.n	22582 <ble_ll_ctrl_conn_upd_make+0x7e>
   22614:	d1b71759 	.word	0xd1b71759

00022618 <ble_ll_ctrl_conn_param_pdu_make>:
 *             of the data.
 */
static void
ble_ll_ctrl_conn_param_pdu_make(struct ble_ll_conn_sm *connsm, uint8_t *dptr,
                                struct ble_ll_conn_params *req)
{
   22618:	b570      	push	{r4, r5, r6, lr}
   2261a:	4605      	mov	r5, r0
   2261c:	460c      	mov	r4, r1
    uint16_t offset;
    struct hci_conn_update *hcu;

    /* If we were passed in a request, we use the parameters from the request */
    if (req) {
   2261e:	2a00      	cmp	r2, #0
   22620:	d03d      	beq.n	2269e <ble_ll_ctrl_conn_param_pdu_make+0x86>
   22622:	4616      	mov	r6, r2
        put_le16(dptr, req->interval_min);
   22624:	8811      	ldrh	r1, [r2, #0]
   22626:	4620      	mov	r0, r4
   22628:	f7f6 fbf0 	bl	18e0c <put_le16>
        put_le16(dptr + 2, req->interval_max);
   2262c:	8871      	ldrh	r1, [r6, #2]
   2262e:	1ca0      	adds	r0, r4, #2
   22630:	f7f6 fbec 	bl	18e0c <put_le16>
        put_le16(dptr + 4, req->latency);
   22634:	88b1      	ldrh	r1, [r6, #4]
   22636:	1d20      	adds	r0, r4, #4
   22638:	f7f6 fbe8 	bl	18e0c <put_le16>
        put_le16(dptr + 6, req->timeout);
   2263c:	88f1      	ldrh	r1, [r6, #6]
   2263e:	1da0      	adds	r0, r4, #6
   22640:	f7f6 fbe4 	bl	18e0c <put_le16>
     * other this value should be set to non-zero. I think this
     * applies only when an offset field is set. See section 5.1.7.1 pg 103
     * Vol 6 Part B.
     */
    /* XXX: for now, set periodicity to 0 */
    dptr[8] = 0;
   22644:	2300      	movs	r3, #0
   22646:	7223      	strb	r3, [r4, #8]

    /* XXX: deal with reference event count. what to put here? */
    put_le16(dptr + 9, connsm->event_cntr);
   22648:	f8b5 1046 	ldrh.w	r1, [r5, #70]	; 0x46
   2264c:	f104 0009 	add.w	r0, r4, #9
   22650:	f7f6 fbdc 	bl	18e0c <put_le16>

    /* XXX: For now, dont use offsets */
    offset = 0xFFFF;
    put_le16(dptr + 11, offset);
   22654:	f64f 71ff 	movw	r1, #65535	; 0xffff
   22658:	f104 000b 	add.w	r0, r4, #11
   2265c:	f7f6 fbd6 	bl	18e0c <put_le16>
    put_le16(dptr + 13, offset);
   22660:	f64f 71ff 	movw	r1, #65535	; 0xffff
   22664:	f104 000d 	add.w	r0, r4, #13
   22668:	f7f6 fbd0 	bl	18e0c <put_le16>
    put_le16(dptr + 15, offset);
   2266c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   22670:	f104 000f 	add.w	r0, r4, #15
   22674:	f7f6 fbca 	bl	18e0c <put_le16>
    put_le16(dptr + 17, offset);
   22678:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2267c:	f104 0011 	add.w	r0, r4, #17
   22680:	f7f6 fbc4 	bl	18e0c <put_le16>
    put_le16(dptr + 19, offset);
   22684:	f64f 71ff 	movw	r1, #65535	; 0xffff
   22688:	f104 0013 	add.w	r0, r4, #19
   2268c:	f7f6 fbbe 	bl	18e0c <put_le16>
    put_le16(dptr + 21, offset);
   22690:	f64f 71ff 	movw	r1, #65535	; 0xffff
   22694:	f104 0015 	add.w	r0, r4, #21
   22698:	f7f6 fbb8 	bl	18e0c <put_le16>
}
   2269c:	bd70      	pop	{r4, r5, r6, pc}
        BLE_LL_ASSERT(hcu->handle != 0);
   2269e:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
   226a2:	b1a3      	cbz	r3, 226ce <ble_ll_ctrl_conn_param_pdu_make+0xb6>
        put_le16(dptr, hcu->conn_itvl_min);
   226a4:	f8b0 116a 	ldrh.w	r1, [r0, #362]	; 0x16a
   226a8:	4620      	mov	r0, r4
   226aa:	f7f6 fbaf 	bl	18e0c <put_le16>
        put_le16(dptr + 2, hcu->conn_itvl_max);
   226ae:	f8b5 116c 	ldrh.w	r1, [r5, #364]	; 0x16c
   226b2:	1ca0      	adds	r0, r4, #2
   226b4:	f7f6 fbaa 	bl	18e0c <put_le16>
        put_le16(dptr + 4, hcu->conn_latency);
   226b8:	f8b5 116e 	ldrh.w	r1, [r5, #366]	; 0x16e
   226bc:	1d20      	adds	r0, r4, #4
   226be:	f7f6 fba5 	bl	18e0c <put_le16>
        put_le16(dptr + 6, hcu->supervision_timeout);
   226c2:	f8b5 1170 	ldrh.w	r1, [r5, #368]	; 0x170
   226c6:	1da0      	adds	r0, r4, #6
   226c8:	f7f6 fba0 	bl	18e0c <put_le16>
   226cc:	e7ba      	b.n	22644 <ble_ll_ctrl_conn_param_pdu_make+0x2c>
        BLE_LL_ASSERT(hcu->handle != 0);
   226ce:	f7f2 f811 	bl	146f4 <hal_debugger_connected>
   226d2:	b100      	cbz	r0, 226d6 <ble_ll_ctrl_conn_param_pdu_make+0xbe>
   226d4:	be01      	bkpt	0x0001
   226d6:	2300      	movs	r3, #0
   226d8:	461a      	mov	r2, r3
   226da:	4619      	mov	r1, r3
   226dc:	4618      	mov	r0, r3
   226de:	f7f6 fb27 	bl	18d30 <__assert_func>

000226e2 <ble_ll_ctrl_version_ind_make>:

static void
ble_ll_ctrl_version_ind_make(struct ble_ll_conn_sm *connsm, uint8_t *pyld)
{
   226e2:	b510      	push	{r4, lr}
   226e4:	460c      	mov	r4, r1
    /* Set flag to denote we have sent/received this */
    connsm->csmflags.cfbit.version_ind_sent = 1;
   226e6:	7843      	ldrb	r3, [r0, #1]
   226e8:	f043 0304 	orr.w	r3, r3, #4
   226ec:	7043      	strb	r3, [r0, #1]

    /* Fill out response */
    pyld[0] = BLE_HCI_VER_BCS;
   226ee:	4608      	mov	r0, r1
   226f0:	2309      	movs	r3, #9
   226f2:	f800 3b01 	strb.w	r3, [r0], #1
    put_le16(pyld + 1, MYNEWT_VAL(BLE_LL_MFRG_ID));
   226f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   226fa:	f7f6 fb87 	bl	18e0c <put_le16>
    put_le16(pyld + 3, BLE_LL_SUB_VERS_NR);
   226fe:	2100      	movs	r1, #0
   22700:	1ce0      	adds	r0, r4, #3
   22702:	f7f6 fb83 	bl	18e0c <put_le16>
}
   22706:	bd10      	pop	{r4, pc}

00022708 <ble_ll_ctrl_datalen_upd_make>:
{
   22708:	b538      	push	{r3, r4, r5, lr}
   2270a:	4605      	mov	r5, r0
   2270c:	460c      	mov	r4, r1
    put_le16(dptr + 1, connsm->max_rx_octets);
   2270e:	7a81      	ldrb	r1, [r0, #10]
   22710:	1c60      	adds	r0, r4, #1
   22712:	f7f6 fb7b 	bl	18e0c <put_le16>
    put_le16(dptr + 3, connsm->max_rx_time);
   22716:	8a69      	ldrh	r1, [r5, #18]
   22718:	1ce0      	adds	r0, r4, #3
   2271a:	f7f6 fb77 	bl	18e0c <put_le16>
    put_le16(dptr + 5, connsm->max_tx_octets);
   2271e:	7a69      	ldrb	r1, [r5, #9]
   22720:	1d60      	adds	r0, r4, #5
   22722:	f7f6 fb73 	bl	18e0c <put_le16>
    put_le16(dptr + 7, connsm->max_tx_time);
   22726:	8a29      	ldrh	r1, [r5, #16]
   22728:	1de0      	adds	r0, r4, #7
   2272a:	f7f6 fb6f 	bl	18e0c <put_le16>
}
   2272e:	bd38      	pop	{r3, r4, r5, pc}

00022730 <ble_ll_ctrl_chanmap_req_make>:
 * @param connsm    Pointer to connection state machine
 * @param pyld      Pointer to payload of LL control PDU
 */
static void
ble_ll_ctrl_chanmap_req_make(struct ble_ll_conn_sm *connsm, uint8_t *pyld)
{
   22730:	b510      	push	{r4, lr}
   22732:	4604      	mov	r4, r0
   22734:	4608      	mov	r0, r1
    /* Copy channel map that host desires into request */
    memcpy(pyld, g_ble_ll_conn_params.central_chan_map, BLE_LL_CONN_CHMAP_LEN);
   22736:	4b0e      	ldr	r3, [pc, #56]	; (22770 <ble_ll_ctrl_chanmap_req_make+0x40>)
   22738:	681a      	ldr	r2, [r3, #0]
   2273a:	600a      	str	r2, [r1, #0]
   2273c:	791b      	ldrb	r3, [r3, #4]
   2273e:	710b      	strb	r3, [r1, #4]
    memcpy(connsm->req_chanmap, pyld, BLE_LL_CONN_CHMAP_LEN);
   22740:	680b      	ldr	r3, [r1, #0]
   22742:	f8c4 3021 	str.w	r3, [r4, #33]	; 0x21
   22746:	790b      	ldrb	r3, [r1, #4]
   22748:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25

    /* Place instant into request */
    connsm->chanmap_instant = connsm->event_cntr + connsm->periph_latency + 6 + 1;
   2274c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
   22750:	f8b4 1066 	ldrh.w	r1, [r4, #102]	; 0x66
   22754:	440b      	add	r3, r1
   22756:	b29b      	uxth	r3, r3
   22758:	3307      	adds	r3, #7
   2275a:	b299      	uxth	r1, r3
   2275c:	84e1      	strh	r1, [r4, #38]	; 0x26
    put_le16(pyld + BLE_LL_CONN_CHMAP_LEN, connsm->chanmap_instant);
   2275e:	3005      	adds	r0, #5
   22760:	f7f6 fb54 	bl	18e0c <put_le16>

    /* Set scheduled flag */
    connsm->csmflags.cfbit.chanmap_update_scheduled = 1;
   22764:	7863      	ldrb	r3, [r4, #1]
   22766:	f043 0310 	orr.w	r3, r3, #16
   2276a:	7063      	strb	r3, [r4, #1]
}
   2276c:	bd10      	pop	{r4, pc}
   2276e:	bf00      	nop
   22770:	10004474 	.word	0x10004474

00022774 <ble_ll_ctrl_update_features>:
}

static void
ble_ll_ctrl_update_features(struct ble_ll_conn_sm *connsm, uint8_t *feat)
{
    connsm->conn_features = feat[0];
   22774:	780b      	ldrb	r3, [r1, #0]
   22776:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
    memcpy(connsm->remote_features, feat + 1, 7);
   2277a:	f851 3f01 	ldr.w	r3, [r1, #1]!
   2277e:	63c3      	str	r3, [r0, #60]	; 0x3c
   22780:	888a      	ldrh	r2, [r1, #4]
   22782:	798b      	ldrb	r3, [r1, #6]
   22784:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
   22788:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42

    /* If we received peer's features for the 1st time, we should try DLE */
    if (!connsm->csmflags.cfbit.rxd_features) {
   2278c:	78c3      	ldrb	r3, [r0, #3]
   2278e:	f013 0f08 	tst.w	r3, #8
   22792:	d102      	bne.n	2279a <ble_ll_ctrl_update_features+0x26>
            connsm->max_rx_time = BLE_LL_CONN_SUPP_TIME_MAX_CODED;
        }
#endif

        connsm->csmflags.cfbit.pending_initiate_dle = 1;
        connsm->csmflags.cfbit.rxd_features = 1;
   22794:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   22798:	70c3      	strb	r3, [r0, #3]
    }
}
   2279a:	4770      	bx	lr

0002279c <ble_ll_ctrl_rx_feature_req>:
 * @return int
 */
static int
ble_ll_ctrl_rx_feature_req(struct ble_ll_conn_sm *connsm, uint8_t *dptr,
                           uint8_t *rspbuf, uint8_t opcode)
{
   2279c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   227a0:	4604      	mov	r4, r0
   227a2:	460e      	mov	r6, r1
   227a4:	4615      	mov	r5, r2

    /*
     * Only accept peripheral feature requests if we are a central and feature
     * requests if we are a peripheral.
     */
    if (opcode == BLE_LL_CTRL_PERIPH_FEATURE_REQ) {
   227a6:	2b0e      	cmp	r3, #14
   227a8:	d01a      	beq.n	227e0 <ble_ll_ctrl_rx_feature_req+0x44>
        if (!CONN_IS_CENTRAL(connsm)) {
            return BLE_LL_CTRL_UNKNOWN_RSP;
        }
    } else {
        /* XXX: not sure this is correct but do it anyway */
        if (!CONN_IS_PERIPHERAL(connsm)) {
   227aa:	79c3      	ldrb	r3, [r0, #7]
   227ac:	2b02      	cmp	r3, #2
   227ae:	d11c      	bne.n	227ea <ble_ll_ctrl_rx_feature_req+0x4e>
            return BLE_LL_CTRL_UNKNOWN_RSP;
        }
    }

    our_feat = ble_ll_read_supp_features();
   227b0:	f7fc fb2a 	bl	1ee08 <ble_ll_read_supp_features>
   227b4:	4607      	mov	r7, r0
   227b6:	4688      	mov	r8, r1

    rsp_opcode = BLE_LL_CTRL_FEATURE_RSP;

    ble_ll_ctrl_update_features(connsm, dptr);
   227b8:	4631      	mov	r1, r6
   227ba:	4620      	mov	r0, r4
   227bc:	f7ff ffda 	bl	22774 <ble_ll_ctrl_update_features>
     * remaining octets are features of controller which sends PDU, in this case
     * it's our controller
     *
     * See: Vol 6, Part B, section 2.4.2.10
     */
    connsm->conn_features &= our_feat;
   227c0:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   227c4:	403b      	ands	r3, r7
   227c6:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b

    put_le64(rspbuf + 1, our_feat);
   227ca:	463a      	mov	r2, r7
   227cc:	4643      	mov	r3, r8
   227ce:	1c68      	adds	r0, r5, #1
   227d0:	f7f6 fb2a 	bl	18e28 <put_le64>
    rspbuf[1] = connsm->conn_features;
   227d4:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   227d8:	706b      	strb	r3, [r5, #1]

    return rsp_opcode;
   227da:	2009      	movs	r0, #9
}
   227dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (!CONN_IS_CENTRAL(connsm)) {
   227e0:	79c3      	ldrb	r3, [r0, #7]
   227e2:	2b01      	cmp	r3, #1
   227e4:	d0e4      	beq.n	227b0 <ble_ll_ctrl_rx_feature_req+0x14>
            return BLE_LL_CTRL_UNKNOWN_RSP;
   227e6:	2007      	movs	r0, #7
   227e8:	e7f8      	b.n	227dc <ble_ll_ctrl_rx_feature_req+0x40>
            return BLE_LL_CTRL_UNKNOWN_RSP;
   227ea:	2007      	movs	r0, #7
   227ec:	e7f6      	b.n	227dc <ble_ll_ctrl_rx_feature_req+0x40>

000227ee <ble_ll_ctrl_enc_req_make>:
{
   227ee:	b570      	push	{r4, r5, r6, lr}
   227f0:	4604      	mov	r4, r0
   227f2:	460d      	mov	r5, r1
    put_le64(dptr, connsm->enc_data.host_rand_num);
   227f4:	e9d0 234a 	ldrd	r2, r3, [r0, #296]	; 0x128
   227f8:	4608      	mov	r0, r1
   227fa:	f7f6 fb15 	bl	18e28 <put_le64>
    put_le16(dptr + 8, connsm->enc_data.enc_div);
   227fe:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
   22802:	f105 0008 	add.w	r0, r5, #8
   22806:	f7f6 fb01 	bl	18e0c <put_le16>
    ble_ll_rand_data_get(connsm->enc_data.enc_block.plain_text + 8, 8);
   2280a:	f504 76a8 	add.w	r6, r4, #336	; 0x150
   2280e:	2108      	movs	r1, #8
   22810:	4630      	mov	r0, r6
   22812:	f001 fe17 	bl	24444 <ble_ll_rand_data_get>
    swap_buf(dptr + 10, connsm->enc_data.enc_block.plain_text + 8, 8);
   22816:	2208      	movs	r2, #8
   22818:	4631      	mov	r1, r6
   2281a:	f105 000a 	add.w	r0, r5, #10
   2281e:	f7f6 fb4d 	bl	18ebc <swap_buf>
    ble_ll_rand_data_get(connsm->enc_data.iv, 4);
   22822:	2104      	movs	r1, #4
   22824:	f504 7098 	add.w	r0, r4, #304	; 0x130
   22828:	f001 fe0c 	bl	24444 <ble_ll_rand_data_get>
    memcpy(dptr + 18, connsm->enc_data.iv, 4);
   2282c:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   22830:	f8c5 3012 	str.w	r3, [r5, #18]
}
   22834:	bd70      	pop	{r4, r5, r6, pc}
	...

00022838 <ble_ll_ctrl_proc_init>:
 * @param connsm
 * @param ctrl_proc
 */
static struct os_mbuf *
ble_ll_ctrl_proc_init(struct ble_ll_conn_sm *connsm, int ctrl_proc)
{
   22838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2283c:	4605      	mov	r5, r0
   2283e:	460c      	mov	r4, r1
    uint8_t *dptr;
    uint8_t *ctrdata;
    struct os_mbuf *om;

    /* Get an mbuf for the control pdu */
    om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN, sizeof(struct ble_mbuf_hdr));
   22840:	2110      	movs	r1, #16
   22842:	201b      	movs	r0, #27
   22844:	f7f7 fbdc 	bl	1a000 <os_msys_get_pkthdr>

    if (om) {
   22848:	4606      	mov	r6, r0
   2284a:	2800      	cmp	r0, #0
   2284c:	d06b      	beq.n	22926 <ble_ll_ctrl_proc_init+0xee>
        /* The control data starts after the opcode (1 byte) */
        dptr = om->om_data;
   2284e:	6807      	ldr	r7, [r0, #0]
        ctrdata = dptr + 1;
   22850:	f107 0801 	add.w	r8, r7, #1

        switch (ctrl_proc) {
   22854:	2c08      	cmp	r4, #8
   22856:	d851      	bhi.n	228fc <ble_ll_ctrl_proc_init+0xc4>
   22858:	e8df f004 	tbb	[pc, r4]
   2285c:	12440c05 	.word	0x12440c05
   22860:	5a37322c 	.word	0x5a37322c
   22864:	3e          	.byte	0x3e
   22865:	00          	.byte	0x00
        case BLE_LL_CTRL_PROC_CONN_UPDATE:
            opcode = BLE_LL_CTRL_CONN_UPDATE_IND;
            ble_ll_ctrl_conn_upd_make(connsm, ctrdata, NULL);
   22866:	2200      	movs	r2, #0
   22868:	4641      	mov	r1, r8
   2286a:	4628      	mov	r0, r5
   2286c:	f7ff fe4a 	bl	22504 <ble_ll_ctrl_conn_upd_make>
            opcode = BLE_LL_CTRL_CONN_UPDATE_IND;
   22870:	2400      	movs	r4, #0
            break;
   22872:	e04e      	b.n	22912 <ble_ll_ctrl_proc_init+0xda>
        case BLE_LL_CTRL_PROC_CHAN_MAP_UPD:
            opcode = BLE_LL_CTRL_CHANNEL_MAP_REQ;
            ble_ll_ctrl_chanmap_req_make(connsm, ctrdata);
   22874:	4641      	mov	r1, r8
   22876:	4628      	mov	r0, r5
   22878:	f7ff ff5a 	bl	22730 <ble_ll_ctrl_chanmap_req_make>
            opcode = BLE_LL_CTRL_CHANNEL_MAP_REQ;
   2287c:	2401      	movs	r4, #1
            break;
   2287e:	e048      	b.n	22912 <ble_ll_ctrl_proc_init+0xda>
        case BLE_LL_CTRL_PROC_FEATURE_XCHG:
            switch (connsm->conn_role) {
   22880:	79eb      	ldrb	r3, [r5, #7]
   22882:	2b01      	cmp	r3, #1
   22884:	d014      	beq.n	228b0 <ble_ll_ctrl_proc_init+0x78>
   22886:	2b02      	cmp	r3, #2
   22888:	d108      	bne.n	2289c <ble_ll_ctrl_proc_init+0x64>
                opcode = BLE_LL_CTRL_FEATURE_REQ;
                break;
#endif
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
            case BLE_LL_CONN_ROLE_PERIPHERAL:
                opcode = BLE_LL_CTRL_PERIPH_FEATURE_REQ;
   2288a:	240e      	movs	r4, #14
#endif
            default:
                BLE_LL_ASSERT(0);
                break;
            }
            put_le64(ctrdata, ble_ll_read_supp_features());
   2288c:	f7fc fabc 	bl	1ee08 <ble_ll_read_supp_features>
   22890:	4602      	mov	r2, r0
   22892:	460b      	mov	r3, r1
   22894:	4640      	mov	r0, r8
   22896:	f7f6 fac7 	bl	18e28 <put_le64>
            break;
   2289a:	e03a      	b.n	22912 <ble_ll_ctrl_proc_init+0xda>
                BLE_LL_ASSERT(0);
   2289c:	f7f1 ff2a 	bl	146f4 <hal_debugger_connected>
   228a0:	b100      	cbz	r0, 228a4 <ble_ll_ctrl_proc_init+0x6c>
   228a2:	be01      	bkpt	0x0001
   228a4:	2300      	movs	r3, #0
   228a6:	461a      	mov	r2, r3
   228a8:	4619      	mov	r1, r3
   228aa:	4618      	mov	r0, r3
   228ac:	f7f6 fa40 	bl	18d30 <__assert_func>
   228b0:	2408      	movs	r4, #8
   228b2:	e7eb      	b.n	2288c <ble_ll_ctrl_proc_init+0x54>
        case BLE_LL_CTRL_PROC_VERSION_XCHG:
            opcode = BLE_LL_CTRL_VERSION_IND;
            ble_ll_ctrl_version_ind_make(connsm, ctrdata);
   228b4:	4641      	mov	r1, r8
   228b6:	4628      	mov	r0, r5
   228b8:	f7ff ff13 	bl	226e2 <ble_ll_ctrl_version_ind_make>
            opcode = BLE_LL_CTRL_VERSION_IND;
   228bc:	240c      	movs	r4, #12
            break;
   228be:	e028      	b.n	22912 <ble_ll_ctrl_proc_init+0xda>
        case BLE_LL_CTRL_PROC_TERMINATE:
            opcode = BLE_LL_CTRL_TERMINATE_IND;
            ctrdata[0] = connsm->disconnect_reason;
   228c0:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   228c4:	707b      	strb	r3, [r7, #1]
            opcode = BLE_LL_CTRL_TERMINATE_IND;
   228c6:	2402      	movs	r4, #2
            break;
   228c8:	e023      	b.n	22912 <ble_ll_ctrl_proc_init+0xda>
        case BLE_LL_CTRL_PROC_CONN_PARAM_REQ:
            opcode = BLE_LL_CTRL_CONN_PARM_REQ;
            ble_ll_ctrl_conn_param_pdu_make(connsm, ctrdata, NULL);
   228ca:	2200      	movs	r2, #0
   228cc:	4641      	mov	r1, r8
   228ce:	4628      	mov	r0, r5
   228d0:	f7ff fea2 	bl	22618 <ble_ll_ctrl_conn_param_pdu_make>
            opcode = BLE_LL_CTRL_CONN_PARM_REQ;
   228d4:	240f      	movs	r4, #15
            break;
   228d6:	e01c      	b.n	22912 <ble_ll_ctrl_proc_init+0xda>
        case BLE_LL_CTRL_PROC_LE_PING:
            opcode = BLE_LL_CTRL_PING_REQ;
            break;
        case BLE_LL_CTRL_PROC_DATA_LEN_UPD:
            opcode = BLE_LL_CTRL_LENGTH_REQ;
            ble_ll_ctrl_datalen_upd_make(connsm, dptr);
   228d8:	4639      	mov	r1, r7
   228da:	4628      	mov	r0, r5
   228dc:	f7ff ff14 	bl	22708 <ble_ll_ctrl_datalen_upd_make>
            opcode = BLE_LL_CTRL_LENGTH_REQ;
   228e0:	2414      	movs	r4, #20
            break;
   228e2:	e016      	b.n	22912 <ble_ll_ctrl_proc_init+0xda>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
        /* XXX: deal with already encrypted connection.*/
        case BLE_LL_CTRL_PROC_ENCRYPT:
            /* If we are already encrypted we do pause procedure */
            if (connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED) {
   228e4:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   228e8:	2b02      	cmp	r3, #2
   228ea:	d101      	bne.n	228f0 <ble_ll_ctrl_proc_init+0xb8>
                opcode = BLE_LL_CTRL_PAUSE_ENC_REQ;
   228ec:	240a      	movs	r4, #10
   228ee:	e010      	b.n	22912 <ble_ll_ctrl_proc_init+0xda>
            } else {
                opcode = BLE_LL_CTRL_ENC_REQ;
                ble_ll_ctrl_enc_req_make(connsm, ctrdata);
   228f0:	4641      	mov	r1, r8
   228f2:	4628      	mov	r0, r5
   228f4:	f7ff ff7b 	bl	227ee <ble_ll_ctrl_enc_req_make>
                opcode = BLE_LL_CTRL_ENC_REQ;
   228f8:	2403      	movs	r4, #3
   228fa:	e00a      	b.n	22912 <ble_ll_ctrl_proc_init+0xda>
            opcode = BLE_LL_CTRL_CIS_REQ;
            ble_ll_ctrl_cis_create(connsm, ctrdata);
            break;
#endif
        default:
            BLE_LL_ASSERT(0);
   228fc:	f7f1 fefa 	bl	146f4 <hal_debugger_connected>
   22900:	b100      	cbz	r0, 22904 <ble_ll_ctrl_proc_init+0xcc>
   22902:	be01      	bkpt	0x0001
   22904:	2300      	movs	r3, #0
   22906:	461a      	mov	r2, r3
   22908:	4619      	mov	r1, r3
   2290a:	4618      	mov	r0, r3
   2290c:	f7f6 fa10 	bl	18d30 <__assert_func>
        ctrdata = dptr + 1;
   22910:	2412      	movs	r4, #18
            break;
        }

        /* Set llid, length and opcode */
        dptr[0] = opcode;
   22912:	703c      	strb	r4, [r7, #0]
        len = g_ble_ll_ctrl_pkt_lengths[opcode] + 1;
   22914:	4b05      	ldr	r3, [pc, #20]	; (2292c <ble_ll_ctrl_proc_init+0xf4>)
   22916:	5d1b      	ldrb	r3, [r3, r4]
   22918:	3301      	adds	r3, #1

        /* Add packet to transmit queue of connection */
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   2291a:	b2db      	uxtb	r3, r3
   2291c:	2203      	movs	r2, #3
   2291e:	4631      	mov	r1, r6
   22920:	4628      	mov	r0, r5
   22922:	f7fe fd67 	bl	213f4 <ble_ll_conn_enqueue_pkt>
    }

    return om;
}
   22926:	4630      	mov	r0, r6
   22928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2292c:	00038bdc 	.word	0x00038bdc

00022930 <ble_ll_ctrl_rx_conn_update>:
{
   22930:	b538      	push	{r3, r4, r5, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_CENTRAL) {
   22932:	79c3      	ldrb	r3, [r0, #7]
   22934:	2b01      	cmp	r3, #1
   22936:	d03b      	beq.n	229b0 <ble_ll_ctrl_rx_conn_update+0x80>
   22938:	4604      	mov	r4, r0
   2293a:	460d      	mov	r5, r1
    reqdata->winsize = dptr[0];
   2293c:	4608      	mov	r0, r1
   2293e:	f810 3b01 	ldrb.w	r3, [r0], #1
   22942:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
    reqdata->winoffset = get_le16(dptr + 1);
   22946:	f7f6 fa82 	bl	18e4e <get_le16>
   2294a:	f8a4 0178 	strh.w	r0, [r4, #376]	; 0x178
    reqdata->interval = get_le16(dptr + 3);
   2294e:	1ce8      	adds	r0, r5, #3
   22950:	f7f6 fa7d 	bl	18e4e <get_le16>
   22954:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
    reqdata->latency = get_le16(dptr + 5);
   22958:	1d68      	adds	r0, r5, #5
   2295a:	f7f6 fa78 	bl	18e4e <get_le16>
   2295e:	f8a4 017c 	strh.w	r0, [r4, #380]	; 0x17c
    reqdata->timeout = get_le16(dptr + 7);
   22962:	1de8      	adds	r0, r5, #7
   22964:	f7f6 fa73 	bl	18e4e <get_le16>
   22968:	f8a4 017e 	strh.w	r0, [r4, #382]	; 0x17e
    reqdata->instant = get_le16(dptr + 9);
   2296c:	f105 0009 	add.w	r0, r5, #9
   22970:	f7f6 fa6d 	bl	18e4e <get_le16>
   22974:	f8a4 0180 	strh.w	r0, [r4, #384]	; 0x180
    conn_events = (reqdata->instant - connsm->event_cntr) & 0xFFFF;
   22978:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
   2297c:	1ac3      	subs	r3, r0, r3
   2297e:	b29b      	uxth	r3, r3
    if (conn_events >= 32767) {
   22980:	f647 72fe 	movw	r2, #32766	; 0x7ffe
   22984:	4293      	cmp	r3, r2
   22986:	d80d      	bhi.n	229a4 <ble_ll_ctrl_rx_conn_update+0x74>
        connsm->csmflags.cfbit.conn_update_sched = 1;
   22988:	7862      	ldrb	r2, [r4, #1]
   2298a:	f042 0201 	orr.w	r2, r2, #1
   2298e:	7062      	strb	r2, [r4, #1]
        if (conn_events == 0) {
   22990:	b983      	cbnz	r3, 229b4 <ble_ll_ctrl_rx_conn_update+0x84>
            reqdata->winoffset = 0;
   22992:	f8a4 3178 	strh.w	r3, [r4, #376]	; 0x178
            reqdata->winsize = 0;
   22996:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
            reqdata->instant += 1;
   2299a:	3001      	adds	r0, #1
   2299c:	f8a4 0180 	strh.w	r0, [r4, #384]	; 0x180
    return rsp_opcode;
   229a0:	20ff      	movs	r0, #255	; 0xff
   229a2:	e006      	b.n	229b2 <ble_ll_ctrl_rx_conn_update+0x82>
        ble_ll_conn_timeout(connsm, BLE_ERR_INSTANT_PASSED);
   229a4:	2128      	movs	r1, #40	; 0x28
   229a6:	4620      	mov	r0, r4
   229a8:	f7fe fc34 	bl	21214 <ble_ll_conn_timeout>
    return rsp_opcode;
   229ac:	20ff      	movs	r0, #255	; 0xff
   229ae:	e000      	b.n	229b2 <ble_ll_ctrl_rx_conn_update+0x82>
        return BLE_LL_CTRL_UNKNOWN_RSP;
   229b0:	2007      	movs	r0, #7
}
   229b2:	bd38      	pop	{r3, r4, r5, pc}
    return rsp_opcode;
   229b4:	20ff      	movs	r0, #255	; 0xff
   229b6:	e7fc      	b.n	229b2 <ble_ll_ctrl_rx_conn_update+0x82>

000229b8 <ble_ll_ctrl_rx_chanmap_req>:
{
   229b8:	b538      	push	{r3, r4, r5, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_CENTRAL) {
   229ba:	79c3      	ldrb	r3, [r0, #7]
   229bc:	2b01      	cmp	r3, #1
   229be:	d01f      	beq.n	22a00 <ble_ll_ctrl_rx_chanmap_req+0x48>
   229c0:	4604      	mov	r4, r0
   229c2:	460d      	mov	r5, r1
    instant = get_le16(dptr + BLE_LL_CONN_CHMAP_LEN);
   229c4:	1d48      	adds	r0, r1, #5
   229c6:	f7f6 fa42 	bl	18e4e <get_le16>
    conn_events = (instant - connsm->event_cntr) & 0xFFFF;
   229ca:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
   229ce:	1ac3      	subs	r3, r0, r3
   229d0:	b29b      	uxth	r3, r3
    if (conn_events >= 32767) {
   229d2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
   229d6:	4293      	cmp	r3, r2
   229d8:	d905      	bls.n	229e6 <ble_ll_ctrl_rx_chanmap_req+0x2e>
        ble_ll_conn_timeout(connsm, BLE_ERR_INSTANT_PASSED);
   229da:	2128      	movs	r1, #40	; 0x28
   229dc:	4620      	mov	r0, r4
   229de:	f7fe fc19 	bl	21214 <ble_ll_conn_timeout>
    return BLE_ERR_MAX;
   229e2:	20ff      	movs	r0, #255	; 0xff
   229e4:	e00d      	b.n	22a02 <ble_ll_ctrl_rx_chanmap_req+0x4a>
        connsm->chanmap_instant = instant;
   229e6:	84e0      	strh	r0, [r4, #38]	; 0x26
        memcpy(connsm->req_chanmap, dptr, BLE_LL_CONN_CHMAP_LEN);
   229e8:	682b      	ldr	r3, [r5, #0]
   229ea:	f8c4 3021 	str.w	r3, [r4, #33]	; 0x21
   229ee:	792b      	ldrb	r3, [r5, #4]
   229f0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
        connsm->csmflags.cfbit.chanmap_update_scheduled = 1;
   229f4:	7863      	ldrb	r3, [r4, #1]
   229f6:	f043 0310 	orr.w	r3, r3, #16
   229fa:	7063      	strb	r3, [r4, #1]
    return BLE_ERR_MAX;
   229fc:	20ff      	movs	r0, #255	; 0xff
   229fe:	e000      	b.n	22a02 <ble_ll_ctrl_rx_chanmap_req+0x4a>
        return BLE_LL_CTRL_UNKNOWN_RSP;
   22a00:	2007      	movs	r0, #7
}
   22a02:	bd38      	pop	{r3, r4, r5, pc}

00022a04 <ble_ll_ctrl_proc_rsp_timer_cb>:
{
   22a04:	b508      	push	{r3, lr}
    ble_ll_conn_timeout((struct ble_ll_conn_sm *)ble_npl_event_get_arg(ev),
   22a06:	2122      	movs	r1, #34	; 0x22
   22a08:	6880      	ldr	r0, [r0, #8]
   22a0a:	f7fe fc03 	bl	21214 <ble_ll_conn_timeout>
}
   22a0e:	bd08      	pop	{r3, pc}

00022a10 <ble_ll_ctrl_len_proc>:
{
   22a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22a14:	4680      	mov	r8, r0
   22a16:	460c      	mov	r4, r1
    ctrl_req.max_rx_bytes = get_le16(dptr);
   22a18:	4608      	mov	r0, r1
   22a1a:	f7f6 fa18 	bl	18e4e <get_le16>
   22a1e:	4605      	mov	r5, r0
    ctrl_req.max_rx_time = get_le16(dptr + 2);
   22a20:	1ca0      	adds	r0, r4, #2
   22a22:	f7f6 fa14 	bl	18e4e <get_le16>
   22a26:	4606      	mov	r6, r0
    ctrl_req.max_tx_bytes = get_le16(dptr + 4);
   22a28:	1d20      	adds	r0, r4, #4
   22a2a:	f7f6 fa10 	bl	18e4e <get_le16>
   22a2e:	4607      	mov	r7, r0
    ctrl_req.max_tx_time = get_le16(dptr + 6);
   22a30:	1da0      	adds	r0, r4, #6
   22a32:	f7f6 fa0c 	bl	18e4e <get_le16>
    if ((ctrl_req.max_rx_bytes < BLE_LL_CONN_SUPP_BYTES_MIN) ||
   22a36:	2d1a      	cmp	r5, #26
   22a38:	d916      	bls.n	22a68 <ble_ll_ctrl_len_proc+0x58>
   22a3a:	f5b6 7fa4 	cmp.w	r6, #328	; 0x148
   22a3e:	d316      	bcc.n	22a6e <ble_ll_ctrl_len_proc+0x5e>
        (ctrl_req.max_rx_time < BLE_LL_CONN_SUPP_TIME_MIN) ||
   22a40:	2f1a      	cmp	r7, #26
   22a42:	d916      	bls.n	22a72 <ble_ll_ctrl_len_proc+0x62>
        (ctrl_req.max_tx_bytes < BLE_LL_CONN_SUPP_BYTES_MIN) ||
   22a44:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   22a48:	d201      	bcs.n	22a4e <ble_ll_ctrl_len_proc+0x3e>
        rc = 1;
   22a4a:	2001      	movs	r0, #1
    return rc;
   22a4c:	e00d      	b.n	22a6a <ble_ll_ctrl_len_proc+0x5a>
        connsm->rem_max_rx_time = ctrl_req.max_rx_time;
   22a4e:	f8a8 6016 	strh.w	r6, [r8, #22]
        connsm->rem_max_tx_time = ctrl_req.max_tx_time;
   22a52:	f8a8 0014 	strh.w	r0, [r8, #20]
        connsm->rem_max_rx_octets = ctrl_req.max_rx_bytes;
   22a56:	f888 500c 	strb.w	r5, [r8, #12]
        connsm->rem_max_tx_octets = ctrl_req.max_tx_bytes;
   22a5a:	f888 700b 	strb.w	r7, [r8, #11]
        ble_ll_conn_update_eff_data_len(connsm);
   22a5e:	4640      	mov	r0, r8
   22a60:	f7fe fa56 	bl	20f10 <ble_ll_conn_update_eff_data_len>
        rc = 0;
   22a64:	2000      	movs	r0, #0
   22a66:	e000      	b.n	22a6a <ble_ll_ctrl_len_proc+0x5a>
        rc = 1;
   22a68:	2001      	movs	r0, #1
}
   22a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 1;
   22a6e:	2001      	movs	r0, #1
   22a70:	e7fb      	b.n	22a6a <ble_ll_ctrl_len_proc+0x5a>
   22a72:	2001      	movs	r0, #1
   22a74:	e7f9      	b.n	22a6a <ble_ll_ctrl_len_proc+0x5a>

00022a76 <ble_ll_ctrl_rx_enc_req>:
    if (connsm->conn_role == BLE_LL_CONN_ROLE_CENTRAL) {
   22a76:	79c3      	ldrb	r3, [r0, #7]
   22a78:	2b01      	cmp	r3, #1
   22a7a:	d038      	beq.n	22aee <ble_ll_ctrl_rx_enc_req+0x78>
{
   22a7c:	b570      	push	{r4, r5, r6, lr}
   22a7e:	4604      	mov	r4, r0
   22a80:	460d      	mov	r5, r1
   22a82:	4616      	mov	r6, r2
    connsm->enc_data.enc_state = CONN_ENC_S_ENC_RSP_TO_BE_SENT;
   22a84:	2303      	movs	r3, #3
   22a86:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
    connsm->enc_data.rx_pkt_cntr = 0;
   22a8a:	2300      	movs	r3, #0
   22a8c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
    connsm->enc_data.tx_pkt_cntr = 0;
   22a90:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    connsm->enc_data.tx_encrypted = 0;
   22a94:	f880 3119 	strb.w	r3, [r0, #281]	; 0x119
    connsm->enc_data.host_rand_num = get_le64(dptr);
   22a98:	4608      	mov	r0, r1
   22a9a:	f7f6 f9e8 	bl	18e6e <get_le64>
   22a9e:	e9c4 014a 	strd	r0, r1, [r4, #296]	; 0x128
    connsm->enc_data.enc_div = get_le16(dptr + 8);
   22aa2:	f105 0008 	add.w	r0, r5, #8
   22aa6:	f7f6 f9d2 	bl	18e4e <get_le16>
   22aaa:	f8a4 011a 	strh.w	r0, [r4, #282]	; 0x11a
    swap_buf(connsm->enc_data.enc_block.plain_text + 8, dptr + 10, 8);
   22aae:	2208      	movs	r2, #8
   22ab0:	f105 010a 	add.w	r1, r5, #10
   22ab4:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   22ab8:	f7f6 fa00 	bl	18ebc <swap_buf>
    memcpy(connsm->enc_data.iv, dptr + 18, 4);
   22abc:	f8d5 3012 	ldr.w	r3, [r5, #18]
   22ac0:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    ble_ll_rand_data_get(connsm->enc_data.enc_block.plain_text, 8);
   22ac4:	f504 75a4 	add.w	r5, r4, #328	; 0x148
   22ac8:	2108      	movs	r1, #8
   22aca:	4628      	mov	r0, r5
   22acc:	f001 fcba 	bl	24444 <ble_ll_rand_data_get>
    swap_buf(rspdata, connsm->enc_data.enc_block.plain_text, 8);
   22ad0:	2208      	movs	r2, #8
   22ad2:	4629      	mov	r1, r5
   22ad4:	4630      	mov	r0, r6
   22ad6:	f7f6 f9f1 	bl	18ebc <swap_buf>
    ble_ll_rand_data_get(connsm->enc_data.iv + 4, 4);
   22ada:	2104      	movs	r1, #4
   22adc:	f504 709a 	add.w	r0, r4, #308	; 0x134
   22ae0:	f001 fcb0 	bl	24444 <ble_ll_rand_data_get>
    memcpy(rspdata + 8, connsm->enc_data.iv + 4, 4);
   22ae4:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   22ae8:	60b3      	str	r3, [r6, #8]
    return BLE_LL_CTRL_ENC_RSP;
   22aea:	2004      	movs	r0, #4
}
   22aec:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_LL_CTRL_UNKNOWN_RSP;
   22aee:	2007      	movs	r0, #7
}
   22af0:	4770      	bx	lr

00022af2 <ble_ll_calc_session_key>:
{
   22af2:	b510      	push	{r4, lr}
   22af4:	4604      	mov	r4, r0
        if (!ble_hw_encrypt_block(&connsm->enc_data.enc_block)) {
   22af6:	f504 709c 	add.w	r0, r4, #312	; 0x138
   22afa:	f003 fb63 	bl	261c4 <ble_hw_encrypt_block>
   22afe:	2800      	cmp	r0, #0
   22b00:	d1f9      	bne.n	22af6 <ble_ll_calc_session_key+0x4>
}
   22b02:	bd10      	pop	{r4, pc}

00022b04 <ble_ll_ctrl_rx_enc_rsp>:
{
   22b04:	b538      	push	{r3, r4, r5, lr}
    if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_ENCRYPT) {
   22b06:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   22b0a:	2b02      	cmp	r3, #2
   22b0c:	d000      	beq.n	22b10 <ble_ll_ctrl_rx_enc_rsp+0xc>
}
   22b0e:	bd38      	pop	{r3, r4, r5, pc}
   22b10:	4604      	mov	r4, r0
   22b12:	460d      	mov	r5, r1
        connsm->enc_data.rx_pkt_cntr = 0;
   22b14:	2300      	movs	r3, #0
   22b16:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
        connsm->enc_data.tx_pkt_cntr = 0;
   22b1a:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
        connsm->enc_data.tx_encrypted = 0;
   22b1e:	f880 3119 	strb.w	r3, [r0, #281]	; 0x119
        swap_buf(connsm->enc_data.enc_block.plain_text, dptr, 8);
   22b22:	2208      	movs	r2, #8
   22b24:	f500 70a4 	add.w	r0, r0, #328	; 0x148
   22b28:	f7f6 f9c8 	bl	18ebc <swap_buf>
        memcpy(connsm->enc_data.iv + 4, dptr + 8, 4);
   22b2c:	68ab      	ldr	r3, [r5, #8]
   22b2e:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
        ble_ll_calc_session_key(connsm);
   22b32:	4620      	mov	r0, r4
   22b34:	f7ff ffdd 	bl	22af2 <ble_ll_calc_session_key>
        connsm->enc_data.enc_state = CONN_ENC_S_START_ENC_REQ_WAIT;
   22b38:	2307      	movs	r3, #7
   22b3a:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
}
   22b3e:	e7e6      	b.n	22b0e <ble_ll_ctrl_rx_enc_rsp+0xa>

00022b40 <ble_ll_ctrl_enc_allowed_pdu_rx>:
{
   22b40:	b508      	push	{r3, lr}
    llid = rxpdu->om_data[0] & BLE_LL_DATA_HDR_LLID_MASK;
   22b42:	6803      	ldr	r3, [r0, #0]
   22b44:	7818      	ldrb	r0, [r3, #0]
   22b46:	f000 0003 	and.w	r0, r0, #3
    len = rxpdu->om_data[1];
   22b4a:	7859      	ldrb	r1, [r3, #1]
    if (llid == BLE_LL_LLID_CTRL) {
   22b4c:	2803      	cmp	r0, #3
   22b4e:	d003      	beq.n	22b58 <ble_ll_ctrl_enc_allowed_pdu_rx+0x18>
        opcode = 0;
   22b50:	2200      	movs	r2, #0
    return ble_ll_ctrl_enc_allowed_pdu(llid, len, opcode);
   22b52:	f7ff fc6d 	bl	22430 <ble_ll_ctrl_enc_allowed_pdu>
}
   22b56:	bd08      	pop	{r3, pc}
        opcode = rxpdu->om_data[2];
   22b58:	789a      	ldrb	r2, [r3, #2]
   22b5a:	e7fa      	b.n	22b52 <ble_ll_ctrl_enc_allowed_pdu_rx+0x12>

00022b5c <ble_ll_ctrl_enc_allowed_pdu_tx>:
{
   22b5c:	b508      	push	{r3, lr}
   22b5e:	4603      	mov	r3, r0
    llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   22b60:	7a40      	ldrb	r0, [r0, #9]
   22b62:	f000 0003 	and.w	r0, r0, #3
    len = ble_hdr->txinfo.pyld_len;
   22b66:	7b19      	ldrb	r1, [r3, #12]
    if (llid == BLE_LL_LLID_CTRL) {
   22b68:	2803      	cmp	r0, #3
   22b6a:	d003      	beq.n	22b74 <ble_ll_ctrl_enc_allowed_pdu_tx+0x18>
        opcode = 0;
   22b6c:	2200      	movs	r2, #0
    return ble_ll_ctrl_enc_allowed_pdu(llid, len, opcode);
   22b6e:	f7ff fc5f 	bl	22430 <ble_ll_ctrl_enc_allowed_pdu>
}
   22b72:	bd08      	pop	{r3, pc}
        opcode = m->om_data[0];
   22b74:	f853 3c10 	ldr.w	r3, [r3, #-16]
   22b78:	781a      	ldrb	r2, [r3, #0]
   22b7a:	e7f8      	b.n	22b6e <ble_ll_ctrl_enc_allowed_pdu_tx+0x12>

00022b7c <ble_ll_ctrl_is_start_enc_rsp>:
    llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   22b7c:	7e43      	ldrb	r3, [r0, #25]
   22b7e:	f003 0303 	and.w	r3, r3, #3
    if (llid == BLE_LL_LLID_CTRL) {
   22b82:	2b03      	cmp	r3, #3
   22b84:	d001      	beq.n	22b8a <ble_ll_ctrl_is_start_enc_rsp+0xe>
    is_start_enc_rsp = 0;
   22b86:	2000      	movs	r0, #0
   22b88:	4770      	bx	lr
        opcode = txpdu->om_data[0];
   22b8a:	6803      	ldr	r3, [r0, #0]
   22b8c:	781b      	ldrb	r3, [r3, #0]
        if (opcode == BLE_LL_CTRL_START_ENC_RSP) {
   22b8e:	2b06      	cmp	r3, #6
   22b90:	d001      	beq.n	22b96 <ble_ll_ctrl_is_start_enc_rsp+0x1a>
    is_start_enc_rsp = 0;
   22b92:	2000      	movs	r0, #0
   22b94:	4770      	bx	lr
            is_start_enc_rsp = 1;
   22b96:	2001      	movs	r0, #1
}
   22b98:	4770      	bx	lr

00022b9a <ble_ll_ctrl_start_enc_send>:
{
   22b9a:	b510      	push	{r4, lr}
   22b9c:	4604      	mov	r4, r0
    om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN,
   22b9e:	2110      	movs	r1, #16
   22ba0:	201b      	movs	r0, #27
   22ba2:	f7f7 fa2d 	bl	1a000 <os_msys_get_pkthdr>
    if (om) {
   22ba6:	b1b0      	cbz	r0, 22bd6 <ble_ll_ctrl_start_enc_send+0x3c>
   22ba8:	4601      	mov	r1, r0
        om->om_data[0] = BLE_LL_CTRL_START_ENC_REQ;
   22baa:	6803      	ldr	r3, [r0, #0]
   22bac:	2205      	movs	r2, #5
   22bae:	701a      	strb	r2, [r3, #0]
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, 1);
   22bb0:	2301      	movs	r3, #1
   22bb2:	2203      	movs	r2, #3
   22bb4:	4620      	mov	r0, r4
   22bb6:	f7fe fc1d 	bl	213f4 <ble_ll_conn_enqueue_pkt>
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) {
   22bba:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   22bbe:	2bff      	cmp	r3, #255	; 0xff
   22bc0:	d001      	beq.n	22bc6 <ble_ll_ctrl_start_enc_send+0x2c>
        rc = 0;
   22bc2:	2000      	movs	r0, #0
}
   22bc4:	bd10      	pop	{r4, pc}
            connsm->cur_ctrl_proc = BLE_LL_CTRL_PROC_ENCRYPT;
   22bc6:	2302      	movs	r3, #2
   22bc8:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
            ble_ll_ctrl_start_rsp_timer(connsm);
   22bcc:	4620      	mov	r0, r4
   22bce:	f7ff fc58 	bl	22482 <ble_ll_ctrl_start_rsp_timer>
        rc = 0;
   22bd2:	2000      	movs	r0, #0
   22bd4:	e7f6      	b.n	22bc4 <ble_ll_ctrl_start_enc_send+0x2a>
        rc = -1;
   22bd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22bda:	e7f3      	b.n	22bc4 <ble_ll_ctrl_start_enc_send+0x2a>

00022bdc <ble_ll_ctrl_conn_param_reply>:
{
   22bdc:	b508      	push	{r3, lr}
    switch (connsm->conn_role) {
   22bde:	79c3      	ldrb	r3, [r0, #7]
   22be0:	2b01      	cmp	r3, #1
   22be2:	d006      	beq.n	22bf2 <ble_ll_ctrl_conn_param_reply+0x16>
   22be4:	2b02      	cmp	r3, #2
   22be6:	d109      	bne.n	22bfc <ble_ll_ctrl_conn_param_reply+0x20>
        ble_ll_ctrl_conn_param_pdu_make(connsm, rsp + 1, req);
   22be8:	3101      	adds	r1, #1
   22bea:	f7ff fd15 	bl	22618 <ble_ll_ctrl_conn_param_pdu_make>
        rsp_opcode = BLE_LL_CTRL_CONN_PARM_RSP;
   22bee:	2010      	movs	r0, #16
        break;
   22bf0:	e003      	b.n	22bfa <ble_ll_ctrl_conn_param_reply+0x1e>
        ble_ll_ctrl_conn_upd_make(connsm, rsp + 1, req);
   22bf2:	3101      	adds	r1, #1
   22bf4:	f7ff fc86 	bl	22504 <ble_ll_ctrl_conn_upd_make>
        rsp_opcode = BLE_LL_CTRL_CONN_UPDATE_IND;
   22bf8:	2000      	movs	r0, #0
}
   22bfa:	bd08      	pop	{r3, pc}
        BLE_LL_ASSERT(0);
   22bfc:	f7f1 fd7a 	bl	146f4 <hal_debugger_connected>
   22c00:	b100      	cbz	r0, 22c04 <ble_ll_ctrl_conn_param_reply+0x28>
   22c02:	be01      	bkpt	0x0001
   22c04:	2300      	movs	r3, #0
   22c06:	461a      	mov	r2, r3
   22c08:	4619      	mov	r1, r3
   22c0a:	4618      	mov	r0, r3
   22c0c:	f7f6 f890 	bl	18d30 <__assert_func>

00022c10 <ble_ll_ctrl_conn_param_pdu_proc>:
{
   22c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22c14:	4604      	mov	r4, r0
   22c16:	460d      	mov	r5, r1
   22c18:	4617      	mov	r7, r2
   22c1a:	461e      	mov	r6, r3
    req = &connsm->conn_cp;
   22c1c:	f500 78c1 	add.w	r8, r0, #386	; 0x182
    req->interval_min = get_le16(dptr);
   22c20:	4608      	mov	r0, r1
   22c22:	f7f6 f914 	bl	18e4e <get_le16>
   22c26:	f8a4 0182 	strh.w	r0, [r4, #386]	; 0x182
    req->interval_max = get_le16(dptr + 2);
   22c2a:	1ca8      	adds	r0, r5, #2
   22c2c:	f7f6 f90f 	bl	18e4e <get_le16>
   22c30:	f8a4 0184 	strh.w	r0, [r4, #388]	; 0x184
    req->latency = get_le16(dptr + 4);
   22c34:	1d28      	adds	r0, r5, #4
   22c36:	f7f6 f90a 	bl	18e4e <get_le16>
   22c3a:	f8a4 0186 	strh.w	r0, [r4, #390]	; 0x186
    req->timeout = get_le16(dptr + 6);
   22c3e:	1da8      	adds	r0, r5, #6
   22c40:	f7f6 f905 	bl	18e4e <get_le16>
   22c44:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
    req->pref_periodicity = dptr[8];
   22c48:	7a2b      	ldrb	r3, [r5, #8]
   22c4a:	f884 318a 	strb.w	r3, [r4, #394]	; 0x18a
    req->ref_conn_event_cnt  = get_le16(dptr + 9);
   22c4e:	f105 0009 	add.w	r0, r5, #9
   22c52:	f7f6 f8fc 	bl	18e4e <get_le16>
   22c56:	f8a4 018c 	strh.w	r0, [r4, #396]	; 0x18c
    req->offset0 = get_le16(dptr + 11);
   22c5a:	f105 000b 	add.w	r0, r5, #11
   22c5e:	f7f6 f8f6 	bl	18e4e <get_le16>
   22c62:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
    req->offset1 = get_le16(dptr + 13);
   22c66:	f105 000d 	add.w	r0, r5, #13
   22c6a:	f7f6 f8f0 	bl	18e4e <get_le16>
   22c6e:	f8a4 0190 	strh.w	r0, [r4, #400]	; 0x190
    req->offset2 = get_le16(dptr + 15);
   22c72:	f105 000f 	add.w	r0, r5, #15
   22c76:	f7f6 f8ea 	bl	18e4e <get_le16>
   22c7a:	f8a4 0192 	strh.w	r0, [r4, #402]	; 0x192
    req->offset3 = get_le16(dptr + 17);
   22c7e:	f105 0011 	add.w	r0, r5, #17
   22c82:	f7f6 f8e4 	bl	18e4e <get_le16>
   22c86:	f8a4 0194 	strh.w	r0, [r4, #404]	; 0x194
    req->offset4 = get_le16(dptr + 19);
   22c8a:	f105 0013 	add.w	r0, r5, #19
   22c8e:	f7f6 f8de 	bl	18e4e <get_le16>
   22c92:	f8a4 0196 	strh.w	r0, [r4, #406]	; 0x196
    req->offset5 = get_le16(dptr + 21);
   22c96:	f105 0015 	add.w	r0, r5, #21
   22c9a:	f7f6 f8d8 	bl	18e4e <get_le16>
   22c9e:	f8a4 0198 	strh.w	r0, [r4, #408]	; 0x198
    rc = ble_ll_conn_hci_chk_conn_params(req->interval_min,
   22ca2:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   22ca6:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   22caa:	f8b4 1184 	ldrh.w	r1, [r4, #388]	; 0x184
   22cae:	f8b4 0182 	ldrh.w	r0, [r4, #386]	; 0x182
   22cb2:	f7fe fdeb 	bl	2188c <ble_ll_conn_hci_chk_conn_params>
    if (rc) {
   22cb6:	2800      	cmp	r0, #0
   22cb8:	d156      	bne.n	22d68 <ble_ll_ctrl_conn_param_pdu_proc+0x158>
    if (opcode == BLE_LL_CTRL_CONN_PARM_REQ) {
   22cba:	2e0f      	cmp	r6, #15
   22cbc:	d00b      	beq.n	22cd6 <ble_ll_ctrl_conn_param_pdu_proc+0xc6>
    if (CONN_IS_PERIPHERAL(connsm) || (opcode == BLE_LL_CTRL_CONN_PARM_RSP)) {
   22cbe:	79e3      	ldrb	r3, [r4, #7]
   22cc0:	2b02      	cmp	r3, #2
   22cc2:	d024      	beq.n	22d0e <ble_ll_ctrl_conn_param_pdu_proc+0xfe>
   22cc4:	2e10      	cmp	r6, #16
   22cc6:	d022      	beq.n	22d0e <ble_ll_ctrl_conn_param_pdu_proc+0xfe>
        if (!ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_REM_CONN_PARM_REQ)){
   22cc8:	2006      	movs	r0, #6
   22cca:	f001 f8ef 	bl	23eac <ble_ll_hci_is_le_event_enabled>
   22cce:	2800      	cmp	r0, #0
   22cd0:	d13e      	bne.n	22d50 <ble_ll_ctrl_conn_param_pdu_proc+0x140>
            ble_err = BLE_ERR_UNSUPP_REM_FEATURE;
   22cd2:	231a      	movs	r3, #26
   22cd4:	e049      	b.n	22d6a <ble_ll_ctrl_conn_param_pdu_proc+0x15a>
        if ((connsm->conn_itvl >= req->interval_min) &&
   22cd6:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
   22cda:	f8b4 2182 	ldrh.w	r2, [r4, #386]	; 0x182
   22cde:	4293      	cmp	r3, r2
   22ce0:	d3ed      	bcc.n	22cbe <ble_ll_ctrl_conn_param_pdu_proc+0xae>
            (connsm->conn_itvl <= req->interval_max) &&
   22ce2:	f8b4 2184 	ldrh.w	r2, [r4, #388]	; 0x184
        if ((connsm->conn_itvl >= req->interval_min) &&
   22ce6:	4293      	cmp	r3, r2
   22ce8:	d8e9      	bhi.n	22cbe <ble_ll_ctrl_conn_param_pdu_proc+0xae>
            (connsm->supervision_tmo == req->timeout) &&
   22cea:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
   22cee:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
            (connsm->conn_itvl <= req->interval_max) &&
   22cf2:	429a      	cmp	r2, r3
   22cf4:	d1e3      	bne.n	22cbe <ble_ll_ctrl_conn_param_pdu_proc+0xae>
            (connsm->periph_latency == req->latency)) {
   22cf6:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
   22cfa:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
            (connsm->supervision_tmo == req->timeout) &&
   22cfe:	429a      	cmp	r2, r3
   22d00:	d1dd      	bne.n	22cbe <ble_ll_ctrl_conn_param_pdu_proc+0xae>
        rsp_opcode = ble_ll_ctrl_conn_param_reply(connsm, rspbuf, req);
   22d02:	4642      	mov	r2, r8
   22d04:	4639      	mov	r1, r7
   22d06:	4620      	mov	r0, r4
   22d08:	f7ff ff68 	bl	22bdc <ble_ll_ctrl_conn_param_reply>
    if (ble_err) {
   22d0c:	e030      	b.n	22d70 <ble_ll_ctrl_conn_param_pdu_proc+0x160>
        if (hcu->handle != 0) {
   22d0e:	f8b4 3168 	ldrh.w	r3, [r4, #360]	; 0x168
   22d12:	2b00      	cmp	r3, #0
   22d14:	d0d8      	beq.n	22cc8 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
            if (!((req->interval_min < hcu->conn_itvl_min) ||
   22d16:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
   22d1a:	f8b4 216a 	ldrh.w	r2, [r4, #362]	; 0x16a
   22d1e:	4293      	cmp	r3, r2
   22d20:	d3d2      	bcc.n	22cc8 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->interval_min > hcu->conn_itvl_max) ||
   22d22:	f8b4 116c 	ldrh.w	r1, [r4, #364]	; 0x16c
            if (!((req->interval_min < hcu->conn_itvl_min) ||
   22d26:	428b      	cmp	r3, r1
   22d28:	d8ce      	bhi.n	22cc8 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->interval_max < hcu->conn_itvl_min) ||
   22d2a:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
                  (req->interval_min > hcu->conn_itvl_max) ||
   22d2e:	429a      	cmp	r2, r3
   22d30:	d8ca      	bhi.n	22cc8 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->interval_max < hcu->conn_itvl_min) ||
   22d32:	4299      	cmp	r1, r3
   22d34:	d3c8      	bcc.n	22cc8 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->latency != hcu->conn_latency) ||
   22d36:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   22d3a:	f8b4 316e 	ldrh.w	r3, [r4, #366]	; 0x16e
                  (req->interval_max > hcu->conn_itvl_max) ||
   22d3e:	429a      	cmp	r2, r3
   22d40:	d1c2      	bne.n	22cc8 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->timeout != hcu->supervision_timeout))) {
   22d42:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
   22d46:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
            if (!((req->interval_min < hcu->conn_itvl_min) ||
   22d4a:	429a      	cmp	r2, r3
   22d4c:	d1bc      	bne.n	22cc8 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
   22d4e:	e7d8      	b.n	22d02 <ble_ll_ctrl_conn_param_pdu_proc+0xf2>
        ble_ll_hci_ev_rem_conn_parm_req(connsm, req);
   22d50:	4641      	mov	r1, r8
   22d52:	4620      	mov	r0, r4
   22d54:	f001 f978 	bl	24048 <ble_ll_hci_ev_rem_conn_parm_req>
        connsm->host_reply_opcode = opcode;
   22d58:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
        connsm->csmflags.cfbit.awaiting_host_reply = 1;
   22d5c:	7823      	ldrb	r3, [r4, #0]
   22d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22d62:	7023      	strb	r3, [r4, #0]
        rsp_opcode = 255;
   22d64:	20ff      	movs	r0, #255	; 0xff
   22d66:	e003      	b.n	22d70 <ble_ll_ctrl_conn_param_pdu_proc+0x160>
        ble_err = BLE_ERR_INV_LMP_LL_PARM;
   22d68:	231e      	movs	r3, #30
        rspbuf[1] = opcode;
   22d6a:	707e      	strb	r6, [r7, #1]
        rspbuf[2] = ble_err;
   22d6c:	70bb      	strb	r3, [r7, #2]
        rsp_opcode = BLE_LL_CTRL_REJECT_IND_EXT;
   22d6e:	2011      	movs	r0, #17
}
   22d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022d74 <ble_ll_ctrl_rx_conn_param_rsp>:
{
   22d74:	b508      	push	{r3, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   22d76:	79c3      	ldrb	r3, [r0, #7]
   22d78:	2b02      	cmp	r3, #2
   22d7a:	d011      	beq.n	22da0 <ble_ll_ctrl_rx_conn_param_rsp+0x2c>
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   22d7c:	7803      	ldrb	r3, [r0, #0]
   22d7e:	f013 0f40 	tst.w	r3, #64	; 0x40
   22d82:	d003      	beq.n	22d8c <ble_ll_ctrl_rx_conn_param_rsp+0x18>
        connsm->csmflags.cfbit.awaiting_host_reply = 0;
   22d84:	7803      	ldrb	r3, [r0, #0]
   22d86:	f36f 1386 	bfc	r3, #6, #1
   22d8a:	7003      	strb	r3, [r0, #0]
    if (!IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) {
   22d8c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   22d90:	f013 0f40 	tst.w	r3, #64	; 0x40
   22d94:	d006      	beq.n	22da4 <ble_ll_ctrl_rx_conn_param_rsp+0x30>
    rsp_opcode = ble_ll_ctrl_conn_param_pdu_proc(connsm, dptr, rspbuf,
   22d96:	2310      	movs	r3, #16
   22d98:	f7ff ff3a 	bl	22c10 <ble_ll_ctrl_conn_param_pdu_proc>
    return rsp_opcode;
   22d9c:	b2c0      	uxtb	r0, r0
}
   22d9e:	bd08      	pop	{r3, pc}
        return BLE_LL_CTRL_UNKNOWN_RSP;
   22da0:	2007      	movs	r0, #7
   22da2:	e7fc      	b.n	22d9e <ble_ll_ctrl_rx_conn_param_rsp+0x2a>
        return BLE_ERR_MAX;
   22da4:	20ff      	movs	r0, #255	; 0xff
   22da6:	e7fa      	b.n	22d9e <ble_ll_ctrl_rx_conn_param_rsp+0x2a>

00022da8 <ble_ll_ctrl_is_terminate_ind>:
ble_ll_ctrl_is_terminate_ind(uint8_t hdr, uint8_t opcode)
{
    int rc;

    rc = 0;
    if ((hdr & BLE_LL_DATA_HDR_LLID_MASK) == BLE_LL_LLID_CTRL) {
   22da8:	f000 0003 	and.w	r0, r0, #3
   22dac:	2803      	cmp	r0, #3
   22dae:	d001      	beq.n	22db4 <ble_ll_ctrl_is_terminate_ind+0xc>
    rc = 0;
   22db0:	2000      	movs	r0, #0
   22db2:	4770      	bx	lr
        if (opcode == BLE_LL_CTRL_TERMINATE_IND) {
   22db4:	2902      	cmp	r1, #2
   22db6:	d001      	beq.n	22dbc <ble_ll_ctrl_is_terminate_ind+0x14>
    rc = 0;
   22db8:	2000      	movs	r0, #0
   22dba:	4770      	bx	lr
            rc = 1;
   22dbc:	2001      	movs	r0, #1
        }
    }
    return rc;
}
   22dbe:	4770      	bx	lr

00022dc0 <ble_ll_ctrl_terminate_start>:
 *
 * @param connsm
 */
void
ble_ll_ctrl_terminate_start(struct ble_ll_conn_sm *connsm)
{
   22dc0:	b570      	push	{r4, r5, r6, lr}
    int ctrl_proc;
    uint32_t usecs;
    struct os_mbuf *om;

    BLE_LL_ASSERT(connsm->disconnect_reason != 0);
   22dc2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   22dc6:	b1e3      	cbz	r3, 22e02 <ble_ll_ctrl_terminate_start+0x42>
   22dc8:	4604      	mov	r4, r0

    ctrl_proc = BLE_LL_CTRL_PROC_TERMINATE;
    om = ble_ll_ctrl_proc_init(connsm, ctrl_proc);
   22dca:	2105      	movs	r1, #5
   22dcc:	f7ff fd34 	bl	22838 <ble_ll_ctrl_proc_init>
    if (om) {
   22dd0:	b1b0      	cbz	r0, 22e00 <ble_ll_ctrl_terminate_start+0x40>
        CONN_F_TERMINATE_STARTED(connsm) = 1;
   22dd2:	7823      	ldrb	r3, [r4, #0]
   22dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   22dd8:	7023      	strb	r3, [r4, #0]

        /* Set terminate "timeout" */
        usecs = connsm->supervision_tmo * BLE_HCI_CONN_SPVN_TMO_UNITS * 1000;
   22dda:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
   22dde:	f242 7310 	movw	r3, #10000	; 0x2710
   22de2:	fb03 f505 	mul.w	r5, r3, r5
    return os_cputime_get32();
   22de6:	f011 f88a 	bl	33efe <os_cputime_get32>
   22dea:	4606      	mov	r6, r0
    if (usecs <= 31249) {
   22dec:	f647 2311 	movw	r3, #31249	; 0x7a11
   22df0:	429d      	cmp	r5, r3
   22df2:	d810      	bhi.n	22e16 <ble_ll_ctrl_terminate_start+0x56>
        return (usecs * 137439) / 4194304;
   22df4:	4b0a      	ldr	r3, [pc, #40]	; (22e20 <ble_ll_ctrl_terminate_start+0x60>)
   22df6:	fb03 f305 	mul.w	r3, r3, r5
   22dfa:	0d98      	lsrs	r0, r3, #22
        connsm->terminate_timeout = ble_ll_tmr_get() + ble_ll_tmr_u2t(usecs);
   22dfc:	4430      	add	r0, r6
   22dfe:	65e0      	str	r0, [r4, #92]	; 0x5c
    }
}
   22e00:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(connsm->disconnect_reason != 0);
   22e02:	f7f1 fc77 	bl	146f4 <hal_debugger_connected>
   22e06:	b100      	cbz	r0, 22e0a <ble_ll_ctrl_terminate_start+0x4a>
   22e08:	be01      	bkpt	0x0001
   22e0a:	2300      	movs	r3, #0
   22e0c:	461a      	mov	r2, r3
   22e0e:	4619      	mov	r1, r3
   22e10:	4618      	mov	r0, r3
   22e12:	f7f5 ff8d 	bl	18d30 <__assert_func>
    return os_cputime_usecs_to_ticks(usecs);
   22e16:	4628      	mov	r0, r5
   22e18:	f011 f876 	bl	33f08 <os_cputime_usecs_to_ticks>
   22e1c:	e7ee      	b.n	22dfc <ble_ll_ctrl_terminate_start+0x3c>
   22e1e:	bf00      	nop
   22e20:	000218df 	.word	0x000218df

00022e24 <ble_ll_ctrl_proc_start>:
 *
 * @param connsm Pointer to connection state machine.
 */
void
ble_ll_ctrl_proc_start(struct ble_ll_conn_sm *connsm, int ctrl_proc)
{
   22e24:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    BLE_LL_ASSERT(ctrl_proc != BLE_LL_CTRL_PROC_TERMINATE);
   22e26:	2905      	cmp	r1, #5
   22e28:	d00e      	beq.n	22e48 <ble_ll_ctrl_proc_start+0x24>
   22e2a:	4604      	mov	r4, r0
   22e2c:	460d      	mov	r5, r1

    om = NULL;
    if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) {
   22e2e:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   22e32:	2bff      	cmp	r3, #255	; 0xff
   22e34:	d012      	beq.n	22e5c <ble_ll_ctrl_proc_start+0x38>
            }
        }
    }

    /* Set bitmask denoting control procedure is pending */
    connsm->pending_ctrl_procs |= (1 << ctrl_proc);
   22e36:	2301      	movs	r3, #1
   22e38:	fa03 f105 	lsl.w	r1, r3, r5
   22e3c:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
   22e40:	4319      	orrs	r1, r3
   22e42:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
}
   22e46:	bd38      	pop	{r3, r4, r5, pc}
    BLE_LL_ASSERT(ctrl_proc != BLE_LL_CTRL_PROC_TERMINATE);
   22e48:	f7f1 fc54 	bl	146f4 <hal_debugger_connected>
   22e4c:	b100      	cbz	r0, 22e50 <ble_ll_ctrl_proc_start+0x2c>
   22e4e:	be01      	bkpt	0x0001
   22e50:	2300      	movs	r3, #0
   22e52:	461a      	mov	r2, r3
   22e54:	4619      	mov	r1, r3
   22e56:	4618      	mov	r0, r3
   22e58:	f7f5 ff6a 	bl	18d30 <__assert_func>
        om = ble_ll_ctrl_proc_init(connsm, ctrl_proc);
   22e5c:	f7ff fcec 	bl	22838 <ble_ll_ctrl_proc_init>
        if (om) {
   22e60:	2800      	cmp	r0, #0
   22e62:	d0e8      	beq.n	22e36 <ble_ll_ctrl_proc_start+0x12>
            connsm->cur_ctrl_proc = ctrl_proc;
   22e64:	f884 5037 	strb.w	r5, [r4, #55]	; 0x37
            if (ctrl_proc != BLE_LL_CTRL_PROC_CHAN_MAP_UPD) {
   22e68:	2d01      	cmp	r5, #1
   22e6a:	d0e4      	beq.n	22e36 <ble_ll_ctrl_proc_start+0x12>
                ble_ll_ctrl_start_rsp_timer(connsm);
   22e6c:	4620      	mov	r0, r4
   22e6e:	f7ff fb08 	bl	22482 <ble_ll_ctrl_start_rsp_timer>
   22e72:	e7e0      	b.n	22e36 <ble_ll_ctrl_proc_start+0x12>

00022e74 <ble_ll_ctrl_initiate_dle>:
{
   22e74:	b508      	push	{r3, lr}
    if (!(connsm->conn_features & BLE_LL_FEAT_DATA_LEN_EXT)) {
   22e76:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   22e7a:	f013 0f20 	tst.w	r3, #32
   22e7e:	d010      	beq.n	22ea2 <ble_ll_ctrl_initiate_dle+0x2e>
    if ((connsm->max_tx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   22e80:	7a43      	ldrb	r3, [r0, #9]
   22e82:	2b1b      	cmp	r3, #27
   22e84:	d80a      	bhi.n	22e9c <ble_ll_ctrl_initiate_dle+0x28>
        (connsm->max_rx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   22e86:	7a83      	ldrb	r3, [r0, #10]
    if ((connsm->max_tx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   22e88:	2b1b      	cmp	r3, #27
   22e8a:	d807      	bhi.n	22e9c <ble_ll_ctrl_initiate_dle+0x28>
        (connsm->max_tx_time <= BLE_LL_CONN_SUPP_TIME_MIN) &&
   22e8c:	8a03      	ldrh	r3, [r0, #16]
        (connsm->max_rx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   22e8e:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   22e92:	d803      	bhi.n	22e9c <ble_ll_ctrl_initiate_dle+0x28>
        (connsm->max_rx_time <= BLE_LL_CONN_SUPP_TIME_MIN)) {
   22e94:	8a43      	ldrh	r3, [r0, #18]
        (connsm->max_tx_time <= BLE_LL_CONN_SUPP_TIME_MIN) &&
   22e96:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   22e9a:	d902      	bls.n	22ea2 <ble_ll_ctrl_initiate_dle+0x2e>
    ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   22e9c:	2108      	movs	r1, #8
   22e9e:	f7ff ffc1 	bl	22e24 <ble_ll_ctrl_proc_start>
}
   22ea2:	bd08      	pop	{r3, pc}

00022ea4 <ble_ll_ctrl_chk_proc_start>:
 *
 * @param connsm Pointer to connection state machine.
 */
void
ble_ll_ctrl_chk_proc_start(struct ble_ll_conn_sm *connsm)
{
   22ea4:	b538      	push	{r3, r4, r5, lr}
   22ea6:	4604      	mov	r4, r0

    /*
     * If we are terminating, dont start any new procedures but start
     * terminate if needed
     */
    if (connsm->disconnect_reason) {
   22ea8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   22eac:	b923      	cbnz	r3, 22eb8 <ble_ll_ctrl_chk_proc_start+0x14>
        }
        return;
    }

    /* If there is a running procedure or no pending, do nothing */
    if ((connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) &&
   22eae:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   22eb2:	2bff      	cmp	r3, #255	; 0xff
   22eb4:	d007      	beq.n	22ec6 <ble_ll_ctrl_chk_proc_start+0x22>
                    break;
                }
            }
        }
    }
}
   22eb6:	bd38      	pop	{r3, r4, r5, pc}
        if (!CONN_F_TERMINATE_STARTED(connsm)) {
   22eb8:	f990 3000 	ldrsb.w	r3, [r0]
   22ebc:	2b00      	cmp	r3, #0
   22ebe:	dbfa      	blt.n	22eb6 <ble_ll_ctrl_chk_proc_start+0x12>
            ble_ll_ctrl_terminate_start(connsm);
   22ec0:	f7ff ff7e 	bl	22dc0 <ble_ll_ctrl_terminate_start>
        return;
   22ec4:	e7f7      	b.n	22eb6 <ble_ll_ctrl_chk_proc_start+0x12>
        (connsm->pending_ctrl_procs != 0)) {
   22ec6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    if ((connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) &&
   22eca:	2b00      	cmp	r3, #0
   22ecc:	d0f3      	beq.n	22eb6 <ble_ll_ctrl_chk_proc_start+0x12>
        for (i = 0; i < BLE_LL_CTRL_PROC_NUM; ++i) {
   22ece:	2500      	movs	r5, #0
   22ed0:	2d0b      	cmp	r5, #11
   22ed2:	dcf0      	bgt.n	22eb6 <ble_ll_ctrl_chk_proc_start+0x12>
            if (IS_PENDING_CTRL_PROC(connsm, i)) {
   22ed4:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
   22ed8:	412b      	asrs	r3, r5
   22eda:	f013 0f01 	tst.w	r3, #1
   22ede:	d017      	beq.n	22f10 <ble_ll_ctrl_chk_proc_start+0x6c>
                if ((i == BLE_LL_CTRL_PROC_VERSION_XCHG) &&
   22ee0:	2d04      	cmp	r5, #4
   22ee2:	d004      	beq.n	22eee <ble_ll_ctrl_chk_proc_start+0x4a>
                    ble_ll_ctrl_proc_start(connsm, i);
   22ee4:	4629      	mov	r1, r5
   22ee6:	4620      	mov	r0, r4
   22ee8:	f7ff ff9c 	bl	22e24 <ble_ll_ctrl_proc_start>
                    break;
   22eec:	e7e3      	b.n	22eb6 <ble_ll_ctrl_chk_proc_start+0x12>
                if ((i == BLE_LL_CTRL_PROC_VERSION_XCHG) &&
   22eee:	7863      	ldrb	r3, [r4, #1]
   22ef0:	f013 0f08 	tst.w	r3, #8
   22ef4:	d0f6      	beq.n	22ee4 <ble_ll_ctrl_chk_proc_start+0x40>
                    ble_ll_hci_ev_rd_rem_ver(connsm, BLE_ERR_SUCCESS);
   22ef6:	2100      	movs	r1, #0
   22ef8:	4620      	mov	r0, r4
   22efa:	f001 f973 	bl	241e4 <ble_ll_hci_ev_rd_rem_ver>
                    CLR_PENDING_CTRL_PROC(connsm, i);
   22efe:	2301      	movs	r3, #1
   22f00:	fa03 f205 	lsl.w	r2, r3, r5
   22f04:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
   22f08:	ea23 0302 	bic.w	r3, r3, r2
   22f0c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        for (i = 0; i < BLE_LL_CTRL_PROC_NUM; ++i) {
   22f10:	3501      	adds	r5, #1
   22f12:	e7dd      	b.n	22ed0 <ble_ll_ctrl_chk_proc_start+0x2c>

00022f14 <ble_ll_ctrl_proc_stop>:
{
   22f14:	b538      	push	{r3, r4, r5, lr}
   22f16:	4604      	mov	r4, r0
   22f18:	460d      	mov	r5, r1
    if (connsm->cur_ctrl_proc == ctrl_proc) {
   22f1a:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   22f1e:	428b      	cmp	r3, r1
   22f20:	d00b      	beq.n	22f3a <ble_ll_ctrl_proc_stop+0x26>
    CLR_PENDING_CTRL_PROC(connsm, ctrl_proc);
   22f22:	2101      	movs	r1, #1
   22f24:	40a9      	lsls	r1, r5
   22f26:	f8b4 5044 	ldrh.w	r5, [r4, #68]	; 0x44
   22f2a:	ea25 0501 	bic.w	r5, r5, r1
   22f2e:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
    ble_ll_ctrl_chk_proc_start(connsm);
   22f32:	4620      	mov	r0, r4
   22f34:	f7ff ffb6 	bl	22ea4 <ble_ll_ctrl_chk_proc_start>
}
   22f38:	bd38      	pop	{r3, r4, r5, pc}
    os_callout_stop(&co->co);
   22f3a:	30b8      	adds	r0, #184	; 0xb8
   22f3c:	f7f6 f922 	bl	19184 <os_callout_stop>
        connsm->cur_ctrl_proc = BLE_LL_CTRL_PROC_IDLE;
   22f40:	23ff      	movs	r3, #255	; 0xff
   22f42:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   22f46:	e7ec      	b.n	22f22 <ble_ll_ctrl_proc_stop+0xe>

00022f48 <ble_ll_ctrl_proc_unk_rsp>:
{
   22f48:	b538      	push	{r3, r4, r5, lr}
   22f4a:	4604      	mov	r4, r0
   22f4c:	4613      	mov	r3, r2
    opcode = dptr[0];
   22f4e:	780d      	ldrb	r5, [r1, #0]
    switch (opcode) {
   22f50:	2d14      	cmp	r5, #20
   22f52:	d83c      	bhi.n	22fce <ble_ll_ctrl_proc_unk_rsp+0x86>
   22f54:	e8df f005 	tbb	[pc, r5]
   22f58:	3b3b3b12 	.word	0x3b3b3b12
   22f5c:	3b3b3b3b 	.word	0x3b3b3b3b
   22f60:	3b3b3b3b 	.word	0x3b3b3b3b
   22f64:	20183b3b 	.word	0x20183b3b
   22f68:	3b333b3d 	.word	0x3b333b3d
   22f6c:	0b          	.byte	0x0b
   22f6d:	00          	.byte	0x00
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_DATA_LEN_EXT);
   22f6e:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   22f72:	f023 0320 	bic.w	r3, r3, #32
   22f76:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
        ctrl_proc = BLE_LL_CTRL_PROC_DATA_LEN_UPD;
   22f7a:	2508      	movs	r5, #8
    if (connsm->cur_ctrl_proc == ctrl_proc) {
   22f7c:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   22f80:	42ab      	cmp	r3, r5
   22f82:	d028      	beq.n	22fd6 <ble_ll_ctrl_proc_unk_rsp+0x8e>
    return BLE_ERR_MAX;
   22f84:	20ff      	movs	r0, #255	; 0xff
}
   22f86:	bd38      	pop	{r3, r4, r5, pc}
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_PERIPH_INIT);
   22f88:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   22f8c:	f023 0308 	bic.w	r3, r3, #8
   22f90:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
        ctrl_proc = BLE_LL_CTRL_PROC_FEATURE_XCHG;
   22f94:	2503      	movs	r5, #3
        break;
   22f96:	e7f1      	b.n	22f7c <ble_ll_ctrl_proc_unk_rsp+0x34>
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_CONN_PARM_REQ);
   22f98:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
   22f9c:	f022 0202 	bic.w	r2, r2, #2
   22fa0:	f880 203b 	strb.w	r2, [r0, #59]	; 0x3b
        if (connsm->conn_role == BLE_LL_CONN_ROLE_CENTRAL) {
   22fa4:	79c2      	ldrb	r2, [r0, #7]
   22fa6:	2a01      	cmp	r2, #1
   22fa8:	d001      	beq.n	22fae <ble_ll_ctrl_proc_unk_rsp+0x66>
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_PARAM_REQ;
   22faa:	2506      	movs	r5, #6
   22fac:	e7e6      	b.n	22f7c <ble_ll_ctrl_proc_unk_rsp+0x34>
            ble_ll_ctrl_conn_upd_make(connsm, rspdata, NULL);
   22fae:	2200      	movs	r2, #0
   22fb0:	4619      	mov	r1, r3
   22fb2:	f7ff faa7 	bl	22504 <ble_ll_ctrl_conn_upd_make>
            connsm->reject_reason = BLE_ERR_SUCCESS;
   22fb6:	2000      	movs	r0, #0
   22fb8:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
            return BLE_LL_CTRL_CONN_UPDATE_IND;
   22fbc:	e7e3      	b.n	22f86 <ble_ll_ctrl_proc_unk_rsp+0x3e>
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_LE_PING);
   22fbe:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   22fc2:	f023 0310 	bic.w	r3, r3, #16
   22fc6:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
        ctrl_proc = BLE_LL_CTRL_PROC_LE_PING;
   22fca:	2507      	movs	r5, #7
        break;
   22fcc:	e7d6      	b.n	22f7c <ble_ll_ctrl_proc_unk_rsp+0x34>
        ctrl_proc = BLE_LL_CTRL_PROC_NUM;
   22fce:	250c      	movs	r5, #12
        break;
   22fd0:	e7d4      	b.n	22f7c <ble_ll_ctrl_proc_unk_rsp+0x34>
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_PARAM_REQ;
   22fd2:	2506      	movs	r5, #6
   22fd4:	e7d2      	b.n	22f7c <ble_ll_ctrl_proc_unk_rsp+0x34>
        ble_ll_ctrl_proc_stop(connsm, ctrl_proc);
   22fd6:	4629      	mov	r1, r5
   22fd8:	4620      	mov	r0, r4
   22fda:	f7ff ff9b 	bl	22f14 <ble_ll_ctrl_proc_stop>
        if (ctrl_proc == BLE_LL_CTRL_PROC_CONN_PARAM_REQ) {
   22fde:	2d06      	cmp	r5, #6
   22fe0:	d003      	beq.n	22fea <ble_ll_ctrl_proc_unk_rsp+0xa2>
        } else if (ctrl_proc == BLE_LL_CTRL_PROC_FEATURE_XCHG) {
   22fe2:	2d03      	cmp	r5, #3
   22fe4:	d007      	beq.n	22ff6 <ble_ll_ctrl_proc_unk_rsp+0xae>
    return BLE_ERR_MAX;
   22fe6:	20ff      	movs	r0, #255	; 0xff
   22fe8:	e7cd      	b.n	22f86 <ble_ll_ctrl_proc_unk_rsp+0x3e>
            ble_ll_hci_ev_conn_update(connsm, BLE_ERR_UNSUPP_REM_FEATURE);
   22fea:	211a      	movs	r1, #26
   22fec:	4620      	mov	r0, r4
   22fee:	f001 f850 	bl	24092 <ble_ll_hci_ev_conn_update>
    return BLE_ERR_MAX;
   22ff2:	20ff      	movs	r0, #255	; 0xff
   22ff4:	e7c7      	b.n	22f86 <ble_ll_ctrl_proc_unk_rsp+0x3e>
            if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   22ff6:	78e3      	ldrb	r3, [r4, #3]
   22ff8:	f013 0f10 	tst.w	r3, #16
   22ffc:	d105      	bne.n	2300a <ble_ll_ctrl_proc_unk_rsp+0xc2>
            connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   22ffe:	78e3      	ldrb	r3, [r4, #3]
   23000:	f36f 1304 	bfc	r3, #4, #1
   23004:	70e3      	strb	r3, [r4, #3]
    return BLE_ERR_MAX;
   23006:	20ff      	movs	r0, #255	; 0xff
   23008:	e7bd      	b.n	22f86 <ble_ll_ctrl_proc_unk_rsp+0x3e>
                ble_ll_hci_ev_rd_rem_used_feat(connsm,
   2300a:	211a      	movs	r1, #26
   2300c:	4620      	mov	r0, r4
   2300e:	f001 f8c3 	bl	24198 <ble_ll_hci_ev_rd_rem_used_feat>
   23012:	e7f4      	b.n	22ffe <ble_ll_ctrl_proc_unk_rsp+0xb6>

00023014 <ble_ll_ctrl_rx_feature_rsp>:
{
   23014:	b510      	push	{r4, lr}
   23016:	4604      	mov	r4, r0
    ble_ll_ctrl_update_features(connsm, dptr);
   23018:	f7ff fbac 	bl	22774 <ble_ll_ctrl_update_features>
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG)) {
   2301c:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
   23020:	f013 0f08 	tst.w	r3, #8
   23024:	d104      	bne.n	23030 <ble_ll_ctrl_rx_feature_rsp+0x1c>
    if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   23026:	78e3      	ldrb	r3, [r4, #3]
   23028:	f013 0f10 	tst.w	r3, #16
   2302c:	d105      	bne.n	2303a <ble_ll_ctrl_rx_feature_rsp+0x26>
}
   2302e:	bd10      	pop	{r4, pc}
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG);
   23030:	2103      	movs	r1, #3
   23032:	4620      	mov	r0, r4
   23034:	f7ff ff6e 	bl	22f14 <ble_ll_ctrl_proc_stop>
   23038:	e7f5      	b.n	23026 <ble_ll_ctrl_rx_feature_rsp+0x12>
        ble_ll_hci_ev_rd_rem_used_feat(connsm, BLE_ERR_SUCCESS);
   2303a:	2100      	movs	r1, #0
   2303c:	4620      	mov	r0, r4
   2303e:	f001 f8ab 	bl	24198 <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   23042:	78e3      	ldrb	r3, [r4, #3]
   23044:	f36f 1304 	bfc	r3, #4, #1
   23048:	70e3      	strb	r3, [r4, #3]
}
   2304a:	e7f0      	b.n	2302e <ble_ll_ctrl_rx_feature_rsp+0x1a>

0002304c <ble_ll_ctrl_rx_version_ind>:
{
   2304c:	b570      	push	{r4, r5, r6, lr}
   2304e:	4604      	mov	r4, r0
   23050:	460d      	mov	r5, r1
   23052:	4616      	mov	r6, r2
    connsm->vers_nr = dptr[0];
   23054:	4608      	mov	r0, r1
   23056:	f810 3b01 	ldrb.w	r3, [r0], #1
   2305a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    connsm->comp_id = get_le16(dptr + 1);
   2305e:	f7f5 fef6 	bl	18e4e <get_le16>
   23062:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
    connsm->sub_vers_nr = get_le16(dptr + 3);
   23066:	1ce8      	adds	r0, r5, #3
   23068:	f7f5 fef1 	bl	18e4e <get_le16>
   2306c:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
    connsm->csmflags.cfbit.rxd_version_ind = 1;
   23070:	7863      	ldrb	r3, [r4, #1]
   23072:	f043 0308 	orr.w	r3, r3, #8
   23076:	7063      	strb	r3, [r4, #1]
    if (!connsm->csmflags.cfbit.version_ind_sent) {
   23078:	f013 0f04 	tst.w	r3, #4
   2307c:	d007      	beq.n	2308e <ble_ll_ctrl_rx_version_ind+0x42>
    rsp_opcode = BLE_ERR_MAX;
   2307e:	25ff      	movs	r5, #255	; 0xff
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG)) {
   23080:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
   23084:	f013 0f10 	tst.w	r3, #16
   23088:	d107      	bne.n	2309a <ble_ll_ctrl_rx_version_ind+0x4e>
}
   2308a:	4628      	mov	r0, r5
   2308c:	bd70      	pop	{r4, r5, r6, pc}
        ble_ll_ctrl_version_ind_make(connsm, rspbuf);
   2308e:	4631      	mov	r1, r6
   23090:	4620      	mov	r0, r4
   23092:	f7ff fb26 	bl	226e2 <ble_ll_ctrl_version_ind_make>
        rsp_opcode = BLE_LL_CTRL_VERSION_IND;
   23096:	250c      	movs	r5, #12
   23098:	e7f2      	b.n	23080 <ble_ll_ctrl_rx_version_ind+0x34>
        ble_ll_hci_ev_rd_rem_ver(connsm, BLE_ERR_SUCCESS);
   2309a:	2100      	movs	r1, #0
   2309c:	4620      	mov	r0, r4
   2309e:	f001 f8a1 	bl	241e4 <ble_ll_hci_ev_rd_rem_ver>
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG);
   230a2:	2104      	movs	r1, #4
   230a4:	4620      	mov	r0, r4
   230a6:	f7ff ff35 	bl	22f14 <ble_ll_ctrl_proc_stop>
   230aa:	e7ee      	b.n	2308a <ble_ll_ctrl_rx_version_ind+0x3e>

000230ac <ble_ll_ctrl_rx_start_enc_rsp>:
{
   230ac:	b538      	push	{r3, r4, r5, lr}
    if (connsm->enc_data.enc_state != CONN_ENC_S_START_ENC_RSP_WAIT) {
   230ae:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   230b2:	2b08      	cmp	r3, #8
   230b4:	d12a      	bne.n	2310c <ble_ll_ctrl_rx_start_enc_rsp+0x60>
   230b6:	4604      	mov	r4, r0
    switch (connsm->conn_role) {
   230b8:	79c3      	ldrb	r3, [r0, #7]
   230ba:	2b01      	cmp	r3, #1
   230bc:	d007      	beq.n	230ce <ble_ll_ctrl_rx_start_enc_rsp+0x22>
   230be:	2b02      	cmp	r3, #2
   230c0:	d11a      	bne.n	230f8 <ble_ll_ctrl_rx_start_enc_rsp+0x4c>
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_ENCRYPT) {
   230c2:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   230c6:	2b02      	cmp	r3, #2
   230c8:	d011      	beq.n	230ee <ble_ll_ctrl_rx_start_enc_rsp+0x42>
        rc = BLE_LL_CTRL_START_ENC_RSP;
   230ca:	2506      	movs	r5, #6
   230cc:	e009      	b.n	230e2 <ble_ll_ctrl_rx_start_enc_rsp+0x36>
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   230ce:	2102      	movs	r1, #2
   230d0:	f7ff ff20 	bl	22f14 <ble_ll_ctrl_proc_stop>
        connsm->enc_data.enc_state = CONN_ENC_S_ENCRYPTED;
   230d4:	2302      	movs	r3, #2
   230d6:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
        ble_ll_conn_auth_pyld_timer_start(connsm);
   230da:	4620      	mov	r0, r4
   230dc:	f7fd fe52 	bl	20d84 <ble_ll_conn_auth_pyld_timer_start>
        rc = BLE_ERR_MAX;
   230e0:	25ff      	movs	r5, #255	; 0xff
    ble_ll_hci_ev_encrypt_chg(connsm, BLE_ERR_SUCCESS);
   230e2:	2100      	movs	r1, #0
   230e4:	4620      	mov	r0, r4
   230e6:	f000 fff6 	bl	240d6 <ble_ll_hci_ev_encrypt_chg>
    return rc;
   230ea:	b2e8      	uxtb	r0, r5
}
   230ec:	bd38      	pop	{r3, r4, r5, pc}
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   230ee:	2102      	movs	r1, #2
   230f0:	f7ff ff10 	bl	22f14 <ble_ll_ctrl_proc_stop>
        rc = BLE_LL_CTRL_START_ENC_RSP;
   230f4:	2506      	movs	r5, #6
   230f6:	e7f4      	b.n	230e2 <ble_ll_ctrl_rx_start_enc_rsp+0x36>
        BLE_LL_ASSERT(0);
   230f8:	f7f1 fafc 	bl	146f4 <hal_debugger_connected>
   230fc:	b100      	cbz	r0, 23100 <ble_ll_ctrl_rx_start_enc_rsp+0x54>
   230fe:	be01      	bkpt	0x0001
   23100:	2300      	movs	r3, #0
   23102:	461a      	mov	r2, r3
   23104:	4619      	mov	r1, r3
   23106:	4618      	mov	r0, r3
   23108:	f7f5 fe12 	bl	18d30 <__assert_func>
        return BLE_ERR_MAX;
   2310c:	20ff      	movs	r0, #255	; 0xff
   2310e:	e7ed      	b.n	230ec <ble_ll_ctrl_rx_start_enc_rsp+0x40>

00023110 <ble_ll_ctrl_rx_ping_rsp>:
{
   23110:	b508      	push	{r3, lr}
    ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_LE_PING);
   23112:	2107      	movs	r1, #7
   23114:	f7ff fefe 	bl	22f14 <ble_ll_ctrl_proc_stop>
}
   23118:	bd08      	pop	{r3, pc}

0002311a <ble_ll_ctrl_rx_conn_param_req>:
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   2311a:	7803      	ldrb	r3, [r0, #0]
   2311c:	f013 0f40 	tst.w	r3, #64	; 0x40
   23120:	d139      	bne.n	23196 <ble_ll_ctrl_rx_conn_param_req+0x7c>
{
   23122:	b570      	push	{r4, r5, r6, lr}
   23124:	4604      	mov	r4, r0
   23126:	460e      	mov	r6, r1
   23128:	4615      	mov	r5, r2
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) {
   2312a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   2312e:	f013 0f40 	tst.w	r3, #64	; 0x40
   23132:	d00b      	beq.n	2314c <ble_ll_ctrl_rx_conn_param_req+0x32>
        switch (connsm->conn_role) {
   23134:	79c3      	ldrb	r3, [r0, #7]
   23136:	2b01      	cmp	r3, #1
   23138:	d017      	beq.n	2316a <ble_ll_ctrl_rx_conn_param_req+0x50>
   2313a:	2b02      	cmp	r3, #2
   2313c:	d11b      	bne.n	23176 <ble_ll_ctrl_rx_conn_param_req+0x5c>
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ);
   2313e:	2106      	movs	r1, #6
   23140:	f7ff fee8 	bl	22f14 <ble_ll_ctrl_proc_stop>
            ble_ll_hci_ev_conn_update(connsm, BLE_ERR_LMP_COLLISION);
   23144:	2123      	movs	r1, #35	; 0x23
   23146:	4620      	mov	r0, r4
   23148:	f000 ffa3 	bl	24092 <ble_ll_hci_ev_conn_update>
    if ((connsm->conn_role == BLE_LL_CONN_ROLE_CENTRAL) &&
   2314c:	79e3      	ldrb	r3, [r4, #7]
   2314e:	2b01      	cmp	r3, #1
   23150:	d103      	bne.n	2315a <ble_ll_ctrl_rx_conn_param_req+0x40>
   23152:	7863      	ldrb	r3, [r4, #1]
   23154:	f013 0f10 	tst.w	r3, #16
   23158:	d117      	bne.n	2318a <ble_ll_ctrl_rx_conn_param_req+0x70>
    rsp_opcode = ble_ll_ctrl_conn_param_pdu_proc(connsm, dptr, rspbuf,
   2315a:	230f      	movs	r3, #15
   2315c:	462a      	mov	r2, r5
   2315e:	4631      	mov	r1, r6
   23160:	4620      	mov	r0, r4
   23162:	f7ff fd55 	bl	22c10 <ble_ll_ctrl_conn_param_pdu_proc>
    return rsp_opcode;
   23166:	b2c0      	uxtb	r0, r0
}
   23168:	bd70      	pop	{r4, r5, r6, pc}
            rspbuf[1] = BLE_LL_CTRL_CONN_PARM_REQ;
   2316a:	230f      	movs	r3, #15
   2316c:	7053      	strb	r3, [r2, #1]
            rspbuf[2] = BLE_ERR_LMP_COLLISION;
   2316e:	2323      	movs	r3, #35	; 0x23
   23170:	7093      	strb	r3, [r2, #2]
            return rsp_opcode;
   23172:	2011      	movs	r0, #17
   23174:	e7f8      	b.n	23168 <ble_ll_ctrl_rx_conn_param_req+0x4e>
            BLE_LL_ASSERT(0);
   23176:	f7f1 fabd 	bl	146f4 <hal_debugger_connected>
   2317a:	b100      	cbz	r0, 2317e <ble_ll_ctrl_rx_conn_param_req+0x64>
   2317c:	be01      	bkpt	0x0001
   2317e:	2300      	movs	r3, #0
   23180:	461a      	mov	r2, r3
   23182:	4619      	mov	r1, r3
   23184:	4618      	mov	r0, r3
   23186:	f7f5 fdd3 	bl	18d30 <__assert_func>
        rspbuf[1] = BLE_LL_CTRL_CONN_PARM_REQ;
   2318a:	230f      	movs	r3, #15
   2318c:	706b      	strb	r3, [r5, #1]
        rspbuf[2] = BLE_ERR_DIFF_TRANS_COLL;
   2318e:	232a      	movs	r3, #42	; 0x2a
   23190:	70ab      	strb	r3, [r5, #2]
        return rsp_opcode;
   23192:	2011      	movs	r0, #17
   23194:	e7e8      	b.n	23168 <ble_ll_ctrl_rx_conn_param_req+0x4e>
        return BLE_ERR_MAX;
   23196:	20ff      	movs	r0, #255	; 0xff
}
   23198:	4770      	bx	lr

0002319a <ble_ll_ctrl_rx_reject_ind>:
{
   2319a:	b538      	push	{r3, r4, r5, lr}
   2319c:	4604      	mov	r4, r0
    if (opcode == BLE_LL_CTRL_REJECT_IND) {
   2319e:	2a0d      	cmp	r2, #13
   231a0:	d00a      	beq.n	231b8 <ble_ll_ctrl_rx_reject_ind+0x1e>
        ble_error = dptr[1];
   231a2:	784d      	ldrb	r5, [r1, #1]
    switch (connsm->cur_ctrl_proc) {
   231a4:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
   231a8:	2806      	cmp	r0, #6
   231aa:	d007      	beq.n	231bc <ble_ll_ctrl_rx_reject_ind+0x22>
   231ac:	2808      	cmp	r0, #8
   231ae:	d038      	beq.n	23222 <ble_ll_ctrl_rx_reject_ind+0x88>
   231b0:	2802      	cmp	r0, #2
   231b2:	d029      	beq.n	23208 <ble_ll_ctrl_rx_reject_ind+0x6e>
   231b4:	20ff      	movs	r0, #255	; 0xff
}
   231b6:	bd38      	pop	{r3, r4, r5, pc}
        ble_error = dptr[0];
   231b8:	780d      	ldrb	r5, [r1, #0]
   231ba:	e7f3      	b.n	231a4 <ble_ll_ctrl_rx_reject_ind+0xa>
        if (opcode == BLE_LL_CTRL_REJECT_IND_EXT) {
   231bc:	2a11      	cmp	r2, #17
   231be:	d001      	beq.n	231c4 <ble_ll_ctrl_rx_reject_ind+0x2a>
    uint8_t rsp_opcode = BLE_ERR_MAX;
   231c0:	20ff      	movs	r0, #255	; 0xff
   231c2:	e7f8      	b.n	231b6 <ble_ll_ctrl_rx_reject_ind+0x1c>
            switch (connsm->conn_role) {
   231c4:	79e2      	ldrb	r2, [r4, #7]
   231c6:	2a01      	cmp	r2, #1
   231c8:	d00b      	beq.n	231e2 <ble_ll_ctrl_rx_reject_ind+0x48>
   231ca:	2a02      	cmp	r2, #2
   231cc:	d112      	bne.n	231f4 <ble_ll_ctrl_rx_reject_ind+0x5a>
                ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ);
   231ce:	2106      	movs	r1, #6
   231d0:	4620      	mov	r0, r4
   231d2:	f7ff fe9f 	bl	22f14 <ble_ll_ctrl_proc_stop>
                ble_ll_hci_ev_conn_update(connsm, ble_error);
   231d6:	4629      	mov	r1, r5
   231d8:	4620      	mov	r0, r4
   231da:	f000 ff5a 	bl	24092 <ble_ll_hci_ev_conn_update>
    uint8_t rsp_opcode = BLE_ERR_MAX;
   231de:	20ff      	movs	r0, #255	; 0xff
                break;
   231e0:	e7e9      	b.n	231b6 <ble_ll_ctrl_rx_reject_ind+0x1c>
                ble_ll_ctrl_conn_upd_make(connsm, rspdata, NULL);
   231e2:	2200      	movs	r2, #0
   231e4:	4619      	mov	r1, r3
   231e6:	4620      	mov	r0, r4
   231e8:	f7ff f98c 	bl	22504 <ble_ll_ctrl_conn_upd_make>
                connsm->reject_reason = BLE_ERR_SUCCESS;
   231ec:	2000      	movs	r0, #0
   231ee:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
                break;
   231f2:	e7e0      	b.n	231b6 <ble_ll_ctrl_rx_reject_ind+0x1c>
                BLE_LL_ASSERT(0);
   231f4:	f7f1 fa7e 	bl	146f4 <hal_debugger_connected>
   231f8:	b100      	cbz	r0, 231fc <ble_ll_ctrl_rx_reject_ind+0x62>
   231fa:	be01      	bkpt	0x0001
   231fc:	2300      	movs	r3, #0
   231fe:	461a      	mov	r2, r3
   23200:	4619      	mov	r1, r3
   23202:	4618      	mov	r0, r3
   23204:	f7f5 fd94 	bl	18d30 <__assert_func>
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   23208:	2102      	movs	r1, #2
   2320a:	4620      	mov	r0, r4
   2320c:	f7ff fe82 	bl	22f14 <ble_ll_ctrl_proc_stop>
        ble_ll_hci_ev_encrypt_chg(connsm, ble_error);
   23210:	4629      	mov	r1, r5
   23212:	4620      	mov	r0, r4
   23214:	f000 ff5f 	bl	240d6 <ble_ll_hci_ev_encrypt_chg>
        connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   23218:	2301      	movs	r3, #1
   2321a:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
    uint8_t rsp_opcode = BLE_ERR_MAX;
   2321e:	20ff      	movs	r0, #255	; 0xff
        break;
   23220:	e7c9      	b.n	231b6 <ble_ll_ctrl_rx_reject_ind+0x1c>
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   23222:	2108      	movs	r1, #8
   23224:	4620      	mov	r0, r4
   23226:	f7ff fe75 	bl	22f14 <ble_ll_ctrl_proc_stop>
    uint8_t rsp_opcode = BLE_ERR_MAX;
   2322a:	20ff      	movs	r0, #255	; 0xff
        break;
   2322c:	e7c3      	b.n	231b6 <ble_ll_ctrl_rx_reject_ind+0x1c>
	...

00023230 <ble_ll_ctrl_rx_pdu>:
 * @param om
 * @param connsm
 */
int
ble_ll_ctrl_rx_pdu(struct ble_ll_conn_sm *connsm, struct os_mbuf *om)
{
   23230:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23234:	4604      	mov	r4, r0
   23236:	460f      	mov	r7, r1
    /*
     * dptr points to om_data pointer. The first byte of om_data is the
     * first byte of the Data Channel PDU header. Get length from header and
     * opcode from LL control PDU.
     */
    dptr = om->om_data;
   23238:	680d      	ldr	r5, [r1, #0]
    len = dptr[1];
   2323a:	786b      	ldrb	r3, [r5, #1]
    opcode = dptr[2];
   2323c:	78ae      	ldrb	r6, [r5, #2]
#endif

    /* If opcode comes from reserved value or CtrlData fields is invalid
     * we shall respond with LL_UNKNOWN_RSP
     */
    if ((opcode >= BLE_LL_CTRL_OPCODES) ||
   2323e:	2e29      	cmp	r6, #41	; 0x29
   23240:	f200 8198 	bhi.w	23574 <ble_ll_ctrl_rx_pdu+0x344>
   23244:	f105 0901 	add.w	r9, r5, #1
   23248:	f105 0803 	add.w	r8, r5, #3
   2324c:	3b01      	subs	r3, #1
   2324e:	b2db      	uxtb	r3, r3
        (len != g_ble_ll_ctrl_pkt_lengths[opcode])) {
   23250:	4ab6      	ldr	r2, [pc, #728]	; (2352c <ble_ll_ctrl_rx_pdu+0x2fc>)
   23252:	5d92      	ldrb	r2, [r2, r6]
    if ((opcode >= BLE_LL_CTRL_OPCODES) ||
   23254:	429a      	cmp	r2, r3
   23256:	f040 8194 	bne.w	23582 <ble_ll_ctrl_rx_pdu+0x352>
        rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
        goto ll_ctrl_send_rsp;
    }

    /* Check if the feature is supported. */
    switch (opcode) {
   2325a:	1ef3      	subs	r3, r6, #3
   2325c:	2b24      	cmp	r3, #36	; 0x24
   2325e:	d825      	bhi.n	232ac <ble_ll_ctrl_rx_pdu+0x7c>
   23260:	e8df f003 	tbb	[pc, r3]
   23264:	244d244d 	.word	0x244d244d
   23268:	4d242424 	.word	0x4d242424
   2326c:	57242424 	.word	0x57242424
   23270:	48245252 	.word	0x48245252
   23274:	43241324 	.word	0x43241324
   23278:	243e2424 	.word	0x243e2424
   2327c:	24241824 	.word	0x24241824
   23280:	24242424 	.word	0x24242424
   23284:	5c242424 	.word	0x5c242424
   23288:	5c          	.byte	0x5c
   23289:	00          	.byte	0x00
    if ((opcode >= BLE_LL_CTRL_OPCODES) ||
   2328a:	f04f 0b20 	mov.w	fp, #32
   2328e:	f04f 0a00 	mov.w	sl, #0
   23292:	e003      	b.n	2329c <ble_ll_ctrl_rx_pdu+0x6c>
        break;
    case BLE_LL_CTRL_MIN_USED_CHAN_IND:
        feature = BLE_LL_FEAT_MIN_USED_CHAN;
        break;
    case BLE_LL_CTRL_PERIODIC_SYNC_IND:
        feature = BLE_LL_FEAT_SYNC_TRANS_RECV;
   23294:	f04f 7b00 	mov.w	fp, #33554432	; 0x2000000
   23298:	f04f 0a00 	mov.w	sl, #0
        feature = 0;
        break;
    }

    if (feature) {
        features = ble_ll_read_supp_features();
   2329c:	f7fb fdb4 	bl	1ee08 <ble_ll_read_supp_features>
        if ((features & feature) == 0) {
   232a0:	ea0b 0200 	and.w	r2, fp, r0
   232a4:	ea0a 0301 	and.w	r3, sl, r1
   232a8:	4313      	orrs	r3, r2
   232aa:	d03c      	beq.n	23326 <ble_ll_ctrl_rx_pdu+0xf6>
        }
    }

    /* Process opcode */
    rsp_opcode = BLE_ERR_MAX;
    switch (opcode) {
   232ac:	2e15      	cmp	r6, #21
   232ae:	d871      	bhi.n	23394 <ble_ll_ctrl_rx_pdu+0x164>
   232b0:	e8df f016 	tbh	[pc, r6, lsl #1]
   232b4:	00800076 	.word	0x00800076
   232b8:	00fd0070 	.word	0x00fd0070
   232bc:	01110107 	.word	0x01110107
   232c0:	00c50119 	.word	0x00c50119
   232c4:	00dc00d0 	.word	0x00dc00d0
   232c8:	01290121 	.word	0x01290121
   232cc:	015400e6 	.word	0x015400e6
   232d0:	013e00f1 	.word	0x013e00f1
   232d4:	01540149 	.word	0x01540149
   232d8:	0133016e 	.word	0x0133016e
   232dc:	00a7008a 	.word	0x00a7008a
        feature = BLE_LL_FEAT_MIN_USED_CHAN;
   232e0:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
   232e4:	f04f 0a00 	mov.w	sl, #0
   232e8:	e7d8      	b.n	2329c <ble_ll_ctrl_rx_pdu+0x6c>
        feature = BLE_LL_FEAT_LE_2M_PHY | BLE_LL_FEAT_LE_CODED_PHY;
   232ea:	f44f 6b10 	mov.w	fp, #2304	; 0x900
   232ee:	f04f 0a00 	mov.w	sl, #0
   232f2:	e7d3      	b.n	2329c <ble_ll_ctrl_rx_pdu+0x6c>
        feature = BLE_LL_FEAT_LE_PING;
   232f4:	f04f 0b10 	mov.w	fp, #16
   232f8:	f04f 0a00 	mov.w	sl, #0
   232fc:	e7ce      	b.n	2329c <ble_ll_ctrl_rx_pdu+0x6c>
        feature = BLE_LL_FEAT_LE_ENCRYPTION;
   232fe:	f04f 0b01 	mov.w	fp, #1
   23302:	f04f 0a00 	mov.w	sl, #0
   23306:	e7c9      	b.n	2329c <ble_ll_ctrl_rx_pdu+0x6c>
        feature = BLE_LL_FEAT_CONN_PARM_REQ;
   23308:	f04f 0b02 	mov.w	fp, #2
   2330c:	f04f 0a00 	mov.w	sl, #0
   23310:	e7c4      	b.n	2329c <ble_ll_ctrl_rx_pdu+0x6c>
        feature = BLE_LL_FEAT_PERIPH_INIT;
   23312:	f04f 0b08 	mov.w	fp, #8
   23316:	f04f 0a00 	mov.w	sl, #0
   2331a:	e7bf      	b.n	2329c <ble_ll_ctrl_rx_pdu+0x6c>
        feature = BLE_LL_FEAT_CONN_SUBRATING;
   2331c:	f04f 0b00 	mov.w	fp, #0
   23320:	f04f 0a20 	mov.w	sl, #32
   23324:	e7ba      	b.n	2329c <ble_ll_ctrl_rx_pdu+0x6c>
            if (opcode == BLE_LL_CTRL_ENC_REQ) {
   23326:	2e03      	cmp	r6, #3
   23328:	d024      	beq.n	23374 <ble_ll_ctrl_rx_pdu+0x144>
                rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   2332a:	f04f 0807 	mov.w	r8, #7
    int rc = 0;
   2332e:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   23332:	46ca      	mov	sl, r9
        break;
    }

    /* Free mbuf or send response */
ll_ctrl_send_rsp:
    if (rsp_opcode == BLE_ERR_MAX) {
   23334:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   23338:	f000 813c 	beq.w	235b4 <ble_ll_ctrl_rx_pdu+0x384>
    } else {
        /*
         * Write the response opcode into the buffer. If this is an unknown
         * response, put opcode of unknown pdu into buffer.
         */
        rspbuf[0] = rsp_opcode;
   2333c:	f885 8000 	strb.w	r8, [r5]
        if (rsp_opcode == BLE_LL_CTRL_UNKNOWN_RSP) {
   23340:	f1b8 0f07 	cmp.w	r8, #7
   23344:	f000 813a 	beq.w	235bc <ble_ll_ctrl_rx_pdu+0x38c>
            rspbuf[1] = opcode;
        }
        len = g_ble_ll_ctrl_pkt_lengths[rsp_opcode] + 1;
   23348:	4b78      	ldr	r3, [pc, #480]	; (2352c <ble_ll_ctrl_rx_pdu+0x2fc>)
   2334a:	f813 3008 	ldrb.w	r3, [r3, r8]
   2334e:	3301      	adds	r3, #1
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   23350:	b2db      	uxtb	r3, r3
   23352:	2203      	movs	r2, #3
   23354:	4639      	mov	r1, r7
   23356:	4620      	mov	r0, r4
   23358:	f7fe f84c 	bl	213f4 <ble_ll_conn_enqueue_pkt>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
        if (restart_encryption) {
   2335c:	f1ba 0f00 	cmp.w	sl, #0
   23360:	f040 812e 	bne.w	235c0 <ble_ll_ctrl_rx_pdu+0x390>
            ble_ll_ctrl_proc_init(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
        }
#endif
    }

    if (connsm->csmflags.cfbit.pending_initiate_dle) {
   23364:	78e3      	ldrb	r3, [r4, #3]
   23366:	f013 0f20 	tst.w	r3, #32
   2336a:	f040 812e 	bne.w	235ca <ble_ll_ctrl_rx_pdu+0x39a>
        connsm->csmflags.cfbit.pending_initiate_dle = 0;
        ble_ll_ctrl_initiate_dle(connsm);
    }

    return rc;
}
   2336e:	4648      	mov	r0, r9
   23370:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (connsm->conn_features & BLE_LL_FEAT_EXTENDED_REJ) {
   23374:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   23378:	f013 0f04 	tst.w	r3, #4
   2337c:	d005      	beq.n	2338a <ble_ll_ctrl_rx_pdu+0x15a>
                    rspbuf[1] = opcode;
   2337e:	706e      	strb	r6, [r5, #1]
                    rspbuf[2] = BLE_ERR_UNSUPP_REM_FEATURE;
   23380:	231a      	movs	r3, #26
   23382:	70ab      	strb	r3, [r5, #2]
                    rsp_opcode = BLE_LL_CTRL_REJECT_IND_EXT;
   23384:	f04f 0811 	mov.w	r8, #17
   23388:	e7d1      	b.n	2332e <ble_ll_ctrl_rx_pdu+0xfe>
                    rspbuf[1] = BLE_ERR_UNSUPP_REM_FEATURE;
   2338a:	231a      	movs	r3, #26
   2338c:	706b      	strb	r3, [r5, #1]
                    rsp_opcode = BLE_LL_CTRL_REJECT_IND;
   2338e:	f04f 080d 	mov.w	r8, #13
   23392:	e7cc      	b.n	2332e <ble_ll_ctrl_rx_pdu+0xfe>
    restart_encryption = 0;
   23394:	f04f 0900 	mov.w	r9, #0
   23398:	46ca      	mov	sl, r9
   2339a:	f04f 08ff 	mov.w	r8, #255	; 0xff
   2339e:	e7c9      	b.n	23334 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_conn_update(connsm, dptr);
   233a0:	4641      	mov	r1, r8
   233a2:	4620      	mov	r0, r4
   233a4:	f7ff fac4 	bl	22930 <ble_ll_ctrl_rx_conn_update>
   233a8:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   233ac:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   233b0:	46ca      	mov	sl, r9
        break;
   233b2:	e7bf      	b.n	23334 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_chanmap_req(connsm, dptr);
   233b4:	4641      	mov	r1, r8
   233b6:	4620      	mov	r0, r4
   233b8:	f7ff fafe 	bl	229b8 <ble_ll_ctrl_rx_chanmap_req>
   233bc:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   233c0:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   233c4:	46ca      	mov	sl, r9
        break;
   233c6:	e7b5      	b.n	23334 <ble_ll_ctrl_rx_pdu+0x104>
        if (ble_ll_ctrl_len_proc(connsm, dptr)) {
   233c8:	4641      	mov	r1, r8
   233ca:	4620      	mov	r0, r4
   233cc:	f7ff fb20 	bl	22a10 <ble_ll_ctrl_len_proc>
   233d0:	4682      	mov	sl, r0
   233d2:	2800      	cmp	r0, #0
   233d4:	f040 80e2 	bne.w	2359c <ble_ll_ctrl_rx_pdu+0x36c>
        if ((connsm->cur_ctrl_proc != BLE_LL_CTRL_PROC_DATA_LEN_UPD) &&
   233d8:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   233dc:	2b08      	cmp	r3, #8
   233de:	d008      	beq.n	233f2 <ble_ll_ctrl_rx_pdu+0x1c2>
            IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD)) {
   233e0:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
        if ((connsm->cur_ctrl_proc != BLE_LL_CTRL_PROC_DATA_LEN_UPD) &&
   233e4:	f413 7f80 	tst.w	r3, #256	; 0x100
   233e8:	d003      	beq.n	233f2 <ble_ll_ctrl_rx_pdu+0x1c2>
            CLR_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   233ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   233ee:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        ble_ll_ctrl_datalen_upd_make(connsm, rspbuf);
   233f2:	4629      	mov	r1, r5
   233f4:	4620      	mov	r0, r4
   233f6:	f7ff f987 	bl	22708 <ble_ll_ctrl_datalen_upd_make>
    int rc = 0;
   233fa:	46d1      	mov	r9, sl
        rsp_opcode = BLE_LL_CTRL_LENGTH_RSP;
   233fc:	f04f 0815 	mov.w	r8, #21
        break;
   23400:	e798      	b.n	23334 <ble_ll_ctrl_rx_pdu+0x104>
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_DATA_LEN_UPD) {
   23402:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   23406:	2b08      	cmp	r3, #8
   23408:	d005      	beq.n	23416 <ble_ll_ctrl_rx_pdu+0x1e6>
    int rc = 0;
   2340a:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   2340e:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   23410:	f04f 08ff 	mov.w	r8, #255	; 0xff
   23414:	e78e      	b.n	23334 <ble_ll_ctrl_rx_pdu+0x104>
            if (ble_ll_ctrl_len_proc(connsm, dptr)) {
   23416:	4641      	mov	r1, r8
   23418:	4620      	mov	r0, r4
   2341a:	f7ff faf9 	bl	22a10 <ble_ll_ctrl_len_proc>
   2341e:	4681      	mov	r9, r0
   23420:	b940      	cbnz	r0, 23434 <ble_ll_ctrl_rx_pdu+0x204>
    rsp_opcode = BLE_ERR_MAX;
   23422:	f04f 08ff 	mov.w	r8, #255	; 0xff
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   23426:	2108      	movs	r1, #8
   23428:	4620      	mov	r0, r4
   2342a:	f7ff fd73 	bl	22f14 <ble_ll_ctrl_proc_stop>
    restart_encryption = 0;
   2342e:	f04f 0a00 	mov.w	sl, #0
   23432:	e77f      	b.n	23334 <ble_ll_ctrl_rx_pdu+0x104>
                rc = -1;
   23434:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
                rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   23438:	f04f 0807 	mov.w	r8, #7
   2343c:	e7f3      	b.n	23426 <ble_ll_ctrl_rx_pdu+0x1f6>
        rsp_opcode = ble_ll_ctrl_proc_unk_rsp(connsm, dptr, rspdata);
   2343e:	464a      	mov	r2, r9
   23440:	4641      	mov	r1, r8
   23442:	4620      	mov	r0, r4
   23444:	f7ff fd80 	bl	22f48 <ble_ll_ctrl_proc_unk_rsp>
   23448:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   2344c:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   23450:	46ca      	mov	sl, r9
        break;
   23452:	e76f      	b.n	23334 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_feature_req(connsm, dptr, rspbuf, opcode);
   23454:	4633      	mov	r3, r6
   23456:	462a      	mov	r2, r5
   23458:	4641      	mov	r1, r8
   2345a:	4620      	mov	r0, r4
   2345c:	f7ff f99e 	bl	2279c <ble_ll_ctrl_rx_feature_req>
   23460:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   23464:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   23468:	46ca      	mov	sl, r9
        break;
   2346a:	e763      	b.n	23334 <ble_ll_ctrl_rx_pdu+0x104>
        ble_ll_ctrl_rx_feature_rsp(connsm, dptr);
   2346c:	4641      	mov	r1, r8
   2346e:	4620      	mov	r0, r4
   23470:	f7ff fdd0 	bl	23014 <ble_ll_ctrl_rx_feature_rsp>
    int rc = 0;
   23474:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   23478:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   2347a:	f04f 08ff 	mov.w	r8, #255	; 0xff
        break;
   2347e:	e759      	b.n	23334 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_version_ind(connsm, dptr, rspdata);
   23480:	464a      	mov	r2, r9
   23482:	4641      	mov	r1, r8
   23484:	4620      	mov	r0, r4
   23486:	f7ff fde1 	bl	2304c <ble_ll_ctrl_rx_version_ind>
   2348a:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   2348e:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   23492:	46ca      	mov	sl, r9
        break;
   23494:	e74e      	b.n	23334 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_feature_req(connsm, dptr, rspbuf, opcode);
   23496:	4633      	mov	r3, r6
   23498:	462a      	mov	r2, r5
   2349a:	4641      	mov	r1, r8
   2349c:	4620      	mov	r0, r4
   2349e:	f7ff f97d 	bl	2279c <ble_ll_ctrl_rx_feature_req>
   234a2:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   234a6:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   234aa:	46ca      	mov	sl, r9
        break;
   234ac:	e742      	b.n	23334 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_enc_req(connsm, dptr, rspdata);
   234ae:	464a      	mov	r2, r9
   234b0:	4641      	mov	r1, r8
   234b2:	4620      	mov	r0, r4
   234b4:	f7ff fadf 	bl	22a76 <ble_ll_ctrl_rx_enc_req>
   234b8:	4680      	mov	r8, r0
    int rc = 0;
   234ba:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   234be:	46ca      	mov	sl, r9
        break;
   234c0:	e738      	b.n	23334 <ble_ll_ctrl_rx_pdu+0x104>
        ble_ll_ctrl_rx_enc_rsp(connsm, dptr);
   234c2:	4641      	mov	r1, r8
   234c4:	4620      	mov	r0, r4
   234c6:	f7ff fb1d 	bl	22b04 <ble_ll_ctrl_rx_enc_rsp>
    int rc = 0;
   234ca:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   234ce:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   234d0:	f04f 08ff 	mov.w	r8, #255	; 0xff
        break;
   234d4:	e72e      	b.n	23334 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_start_enc_req(connsm);
   234d6:	4620      	mov	r0, r4
   234d8:	f7fe ffda 	bl	22490 <ble_ll_ctrl_rx_start_enc_req>
   234dc:	4680      	mov	r8, r0
    int rc = 0;
   234de:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   234e2:	46ca      	mov	sl, r9
        break;
   234e4:	e726      	b.n	23334 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_start_enc_rsp(connsm);
   234e6:	4620      	mov	r0, r4
   234e8:	f7ff fde0 	bl	230ac <ble_ll_ctrl_rx_start_enc_rsp>
   234ec:	4680      	mov	r8, r0
    int rc = 0;
   234ee:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   234f2:	46ca      	mov	sl, r9
        break;
   234f4:	e71e      	b.n	23334 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_pause_enc_req(connsm);
   234f6:	4620      	mov	r0, r4
   234f8:	f7fe ffb6 	bl	22468 <ble_ll_ctrl_rx_pause_enc_req>
   234fc:	4680      	mov	r8, r0
    int rc = 0;
   234fe:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   23502:	46ca      	mov	sl, r9
        break;
   23504:	e716      	b.n	23334 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_pause_enc_rsp(connsm);
   23506:	4620      	mov	r0, r4
   23508:	f7fe ffdf 	bl	224ca <ble_ll_ctrl_rx_pause_enc_rsp>
   2350c:	4680      	mov	r8, r0
        if (rsp_opcode == BLE_LL_CTRL_PAUSE_ENC_RSP) {
   2350e:	280b      	cmp	r0, #11
   23510:	d04b      	beq.n	235aa <ble_ll_ctrl_rx_pdu+0x37a>
    int rc = 0;
   23512:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   23516:	46ca      	mov	sl, r9
   23518:	e70c      	b.n	23334 <ble_ll_ctrl_rx_pdu+0x104>
        ble_ll_ctrl_rx_ping_rsp(connsm);
   2351a:	4620      	mov	r0, r4
   2351c:	f7ff fdf8 	bl	23110 <ble_ll_ctrl_rx_ping_rsp>
    int rc = 0;
   23520:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   23524:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   23526:	f04f 08ff 	mov.w	r8, #255	; 0xff
        break;
   2352a:	e703      	b.n	23334 <ble_ll_ctrl_rx_pdu+0x104>
   2352c:	00038bdc 	.word	0x00038bdc
        rsp_opcode = ble_ll_ctrl_rx_conn_param_req(connsm, dptr, rspbuf);
   23530:	462a      	mov	r2, r5
   23532:	4641      	mov	r1, r8
   23534:	4620      	mov	r0, r4
   23536:	f7ff fdf0 	bl	2311a <ble_ll_ctrl_rx_conn_param_req>
   2353a:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   2353e:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   23542:	46ca      	mov	sl, r9
        break;
   23544:	e6f6      	b.n	23334 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_conn_param_rsp(connsm, dptr, rspbuf);
   23546:	462a      	mov	r2, r5
   23548:	4641      	mov	r1, r8
   2354a:	4620      	mov	r0, r4
   2354c:	f7ff fc12 	bl	22d74 <ble_ll_ctrl_rx_conn_param_rsp>
   23550:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   23554:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   23558:	46ca      	mov	sl, r9
        break;
   2355a:	e6eb      	b.n	23334 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_reject_ind(connsm, dptr, opcode, rspdata);
   2355c:	464b      	mov	r3, r9
   2355e:	4632      	mov	r2, r6
   23560:	4641      	mov	r1, r8
   23562:	4620      	mov	r0, r4
   23564:	f7ff fe19 	bl	2319a <ble_ll_ctrl_rx_reject_ind>
   23568:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   2356c:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   23570:	46ca      	mov	sl, r9
        break;
   23572:	e6df      	b.n	23334 <ble_ll_ctrl_rx_pdu+0x104>
        rc = -1;
   23574:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    restart_encryption = 0;
   23578:	f04f 0a00 	mov.w	sl, #0
        rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   2357c:	f04f 0807 	mov.w	r8, #7
   23580:	e6d8      	b.n	23334 <ble_ll_ctrl_rx_pdu+0x104>
        rc = -1;
   23582:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    restart_encryption = 0;
   23586:	f04f 0a00 	mov.w	sl, #0
        rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   2358a:	f04f 0807 	mov.w	r8, #7
   2358e:	e6d1      	b.n	23334 <ble_ll_ctrl_rx_pdu+0x104>
    int rc = 0;
   23590:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   23594:	46ca      	mov	sl, r9
        rsp_opcode = BLE_LL_CTRL_PING_RSP;
   23596:	f04f 0813 	mov.w	r8, #19
   2359a:	e6cb      	b.n	23334 <ble_ll_ctrl_rx_pdu+0x104>
            rc  = -1;
   2359c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    restart_encryption = 0;
   235a0:	f04f 0a00 	mov.w	sl, #0
            rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   235a4:	f04f 0807 	mov.w	r8, #7
   235a8:	e6c4      	b.n	23334 <ble_ll_ctrl_rx_pdu+0x104>
    int rc = 0;
   235aa:	f04f 0900 	mov.w	r9, #0
            restart_encryption = 1;
   235ae:	f04f 0a01 	mov.w	sl, #1
   235b2:	e6bf      	b.n	23334 <ble_ll_ctrl_rx_pdu+0x104>
        os_mbuf_free_chain(om);
   235b4:	4638      	mov	r0, r7
   235b6:	f7f6 f80a 	bl	195ce <os_mbuf_free_chain>
   235ba:	e6d3      	b.n	23364 <ble_ll_ctrl_rx_pdu+0x134>
            rspbuf[1] = opcode;
   235bc:	706e      	strb	r6, [r5, #1]
   235be:	e6c3      	b.n	23348 <ble_ll_ctrl_rx_pdu+0x118>
            ble_ll_ctrl_proc_init(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   235c0:	2102      	movs	r1, #2
   235c2:	4620      	mov	r0, r4
   235c4:	f7ff f938 	bl	22838 <ble_ll_ctrl_proc_init>
   235c8:	e6cc      	b.n	23364 <ble_ll_ctrl_rx_pdu+0x134>
        connsm->csmflags.cfbit.pending_initiate_dle = 0;
   235ca:	78e3      	ldrb	r3, [r4, #3]
   235cc:	f36f 1345 	bfc	r3, #5, #1
   235d0:	70e3      	strb	r3, [r4, #3]
        ble_ll_ctrl_initiate_dle(connsm);
   235d2:	4620      	mov	r0, r4
   235d4:	f7ff fc4e 	bl	22e74 <ble_ll_ctrl_initiate_dle>
    return rc;
   235d8:	e6c9      	b.n	2336e <ble_ll_ctrl_rx_pdu+0x13e>
   235da:	bf00      	nop

000235dc <ble_ll_ctrl_reject_ind_send>:
 * @return int
 */
int
ble_ll_ctrl_reject_ind_send(struct ble_ll_conn_sm *connsm, uint8_t rej_opcode,
                            uint8_t err)
{
   235dc:	b570      	push	{r4, r5, r6, lr}
   235de:	4606      	mov	r6, r0
   235e0:	460c      	mov	r4, r1
   235e2:	4615      	mov	r5, r2
    uint8_t len;
    uint8_t opcode;
    uint8_t *rspbuf;
    struct os_mbuf *om;

    om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN,
   235e4:	2110      	movs	r1, #16
   235e6:	201b      	movs	r0, #27
   235e8:	f7f6 fd0a 	bl	1a000 <os_msys_get_pkthdr>
                            sizeof(struct ble_mbuf_hdr));
    if (om) {
   235ec:	b1d8      	cbz	r0, 23626 <ble_ll_ctrl_reject_ind_send+0x4a>
   235ee:	4601      	mov	r1, r0
        rspbuf = om->om_data;
   235f0:	6803      	ldr	r3, [r0, #0]
        opcode = BLE_LL_CTRL_REJECT_IND_EXT;
        if (rej_opcode == BLE_LL_CTRL_ENC_REQ) {
   235f2:	2c03      	cmp	r4, #3
   235f4:	d00a      	beq.n	2360c <ble_ll_ctrl_reject_ind_send+0x30>
            if ((connsm->conn_features & BLE_LL_FEAT_EXTENDED_REJ) == 0) {
                opcode = BLE_LL_CTRL_REJECT_IND;
            }
        }
        rspbuf[0] = opcode;
   235f6:	2211      	movs	r2, #17
   235f8:	701a      	strb	r2, [r3, #0]
        if (opcode == BLE_LL_CTRL_REJECT_IND) {
            rspbuf[1] = err;
            len = BLE_LL_CTRL_REJ_IND_LEN + 1;
        } else {
            rspbuf[1] = rej_opcode;
   235fa:	705c      	strb	r4, [r3, #1]
            rspbuf[2] = err;
   235fc:	709d      	strb	r5, [r3, #2]
            len = BLE_LL_CTRL_REJECT_IND_EXT_LEN + 1;
   235fe:	2303      	movs	r3, #3
        }
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   23600:	2203      	movs	r2, #3
   23602:	4630      	mov	r0, r6
   23604:	f7fd fef6 	bl	213f4 <ble_ll_conn_enqueue_pkt>
        rc = 0;
   23608:	2000      	movs	r0, #0
    } else {
        rc = 1;
    }
    return rc;
}
   2360a:	bd70      	pop	{r4, r5, r6, pc}
            if ((connsm->conn_features & BLE_LL_FEAT_EXTENDED_REJ) == 0) {
   2360c:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
   23610:	f012 0f04 	tst.w	r2, #4
   23614:	d104      	bne.n	23620 <ble_ll_ctrl_reject_ind_send+0x44>
        rspbuf[0] = opcode;
   23616:	220d      	movs	r2, #13
   23618:	701a      	strb	r2, [r3, #0]
            rspbuf[1] = err;
   2361a:	705d      	strb	r5, [r3, #1]
            len = BLE_LL_CTRL_REJ_IND_LEN + 1;
   2361c:	2302      	movs	r3, #2
   2361e:	e7ef      	b.n	23600 <ble_ll_ctrl_reject_ind_send+0x24>
        rspbuf[0] = opcode;
   23620:	2211      	movs	r2, #17
   23622:	701a      	strb	r2, [r3, #0]
        if (opcode == BLE_LL_CTRL_REJECT_IND) {
   23624:	e7e9      	b.n	235fa <ble_ll_ctrl_reject_ind_send+0x1e>
        rc = 1;
   23626:	2001      	movs	r0, #1
    return rc;
   23628:	e7ef      	b.n	2360a <ble_ll_ctrl_reject_ind_send+0x2e>
	...

0002362c <ble_ll_ctrl_init_conn_sm>:
    return rc;
}

void
ble_ll_ctrl_init_conn_sm(struct ble_ll_conn_sm *connsm)
{
   2362c:	b508      	push	{r3, lr}
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   2362e:	4603      	mov	r3, r0
   23630:	4a02      	ldr	r2, [pc, #8]	; (2363c <ble_ll_ctrl_init_conn_sm+0x10>)
   23632:	4903      	ldr	r1, [pc, #12]	; (23640 <ble_ll_ctrl_init_conn_sm+0x14>)
   23634:	30b8      	adds	r0, #184	; 0xb8
   23636:	f7f5 fd97 	bl	19168 <os_callout_init>
    ble_npl_callout_init(&connsm->ctrl_proc_rsp_timer, &g_ble_ll_data.ll_evq,
                         ble_ll_ctrl_proc_rsp_timer_cb, connsm);
}
   2363a:	bd08      	pop	{r3, pc}
   2363c:	00022a05 	.word	0x00022a05
   23640:	100040f8 	.word	0x100040f8

00023644 <ble_ll_hci_get_num_cmd_pkts>:
 */
static uint8_t
ble_ll_hci_get_num_cmd_pkts(void)
{
    return BLE_LL_CFG_NUM_HCI_CMD_PKTS;
}
   23644:	2001      	movs	r0, #1
   23646:	4770      	bx	lr

00023648 <ble_ll_hci_rd_local_version>:
 *
 * @return int
 */
static int
ble_ll_hci_rd_local_version(uint8_t *rspbuf, uint8_t *rsplen)
{
   23648:	4603      	mov	r3, r0
    struct ble_hci_ip_rd_local_ver_rp *rsp = (void *) rspbuf;

    rsp->hci_ver = BLE_HCI_VER_BCS;
   2364a:	2209      	movs	r2, #9
   2364c:	7002      	strb	r2, [r0, #0]
    rsp->hci_rev = 0;
   2364e:	2000      	movs	r0, #0
   23650:	7058      	strb	r0, [r3, #1]
   23652:	7098      	strb	r0, [r3, #2]
    rsp->lmp_ver = BLE_LMP_VER_BCS;
   23654:	70da      	strb	r2, [r3, #3]
    rsp->manufacturer = htole16(MYNEWT_VAL(BLE_LL_MFRG_ID));
   23656:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2365a:	711a      	strb	r2, [r3, #4]
   2365c:	715a      	strb	r2, [r3, #5]
    rsp->lmp_subver = 0;
   2365e:	7198      	strb	r0, [r3, #6]
   23660:	71d8      	strb	r0, [r3, #7]

    *rsplen = sizeof(*rsp);
   23662:	2308      	movs	r3, #8
   23664:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   23666:	4770      	bx	lr

00023668 <ble_ll_hci_rd_local_supp_feat>:
 *
 * @return int
 */
static int
ble_ll_hci_rd_local_supp_feat(uint8_t *rspbuf, uint8_t *rsplen)
{
   23668:	4603      	mov	r3, r0
    /*
     * The only two bits we set here currently are (5th byte):
     *      BR/EDR not supported        (bit 5)
     *      LE supported (controller)   (bit 6)
     */
    rsp->features = htole64(0x0000006000000000);
   2366a:	2000      	movs	r0, #0
   2366c:	7018      	strb	r0, [r3, #0]
   2366e:	7058      	strb	r0, [r3, #1]
   23670:	7098      	strb	r0, [r3, #2]
   23672:	70d8      	strb	r0, [r3, #3]
   23674:	2260      	movs	r2, #96	; 0x60
   23676:	711a      	strb	r2, [r3, #4]
   23678:	7158      	strb	r0, [r3, #5]
   2367a:	7198      	strb	r0, [r3, #6]
   2367c:	71d8      	strb	r0, [r3, #7]

    *rsplen = sizeof(*rsp);
   2367e:	2308      	movs	r3, #8
   23680:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   23682:	4770      	bx	lr

00023684 <ble_ll_hci_rd_bd_addr>:
static int
ble_ll_hci_rd_bd_addr(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_ip_rd_bd_addr_rp *rsp = (void *) rspbuf;

    memcpy(rsp->addr, g_dev_addr, BLE_DEV_ADDR_LEN);
   23684:	4b04      	ldr	r3, [pc, #16]	; (23698 <ble_ll_hci_rd_bd_addr+0x14>)
   23686:	681a      	ldr	r2, [r3, #0]
   23688:	6002      	str	r2, [r0, #0]
   2368a:	889b      	ldrh	r3, [r3, #4]
   2368c:	8083      	strh	r3, [r0, #4]

    *rsplen = sizeof(*rsp);
   2368e:	2306      	movs	r3, #6
   23690:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   23692:	2000      	movs	r0, #0
   23694:	4770      	bx	lr
   23696:	bf00      	nop
   23698:	1000434c 	.word	0x1000434c

0002369c <ble_ll_hci_set_le_event_mask>:
static int
ble_ll_hci_set_le_event_mask(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_event_mask_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof(*cmd)) {
   2369c:	2908      	cmp	r1, #8
   2369e:	d106      	bne.n	236ae <ble_ll_hci_set_le_event_mask+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_hci_le_event_mask = le64toh(cmd->event_mask);
   236a0:	6801      	ldr	r1, [r0, #0]
   236a2:	6842      	ldr	r2, [r0, #4]
   236a4:	4b03      	ldr	r3, [pc, #12]	; (236b4 <ble_ll_hci_set_le_event_mask+0x18>)
   236a6:	6019      	str	r1, [r3, #0]
   236a8:	605a      	str	r2, [r3, #4]

    return BLE_ERR_SUCCESS;
   236aa:	2000      	movs	r0, #0
   236ac:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   236ae:	2012      	movs	r0, #18
}
   236b0:	4770      	bx	lr
   236b2:	bf00      	nop
   236b4:	10004658 	.word	0x10004658

000236b8 <ble_ll_hci_le_read_bufsize>:
ble_ll_hci_le_read_bufsize(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_buf_size_rp *rp = (void *) rspbuf;

#if MYNEWT_VAL(BLE_LL_ROLE_CENTRAL) || MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
    rp->data_len = htole16(g_ble_ll_data.ll_acl_pkt_size);
   236b8:	4b04      	ldr	r3, [pc, #16]	; (236cc <ble_ll_hci_le_read_bufsize+0x14>)
   236ba:	895a      	ldrh	r2, [r3, #10]
   236bc:	8002      	strh	r2, [r0, #0]
    rp->data_packets = g_ble_ll_data.ll_num_acl_pkts;
   236be:	7a5b      	ldrb	r3, [r3, #9]
   236c0:	7083      	strb	r3, [r0, #2]
    /* TODO check if can just not support this command */
    rp->data_len = 0;
    rp->data_packets = 0;
#endif

    *rsplen = sizeof(*rp);
   236c2:	2303      	movs	r3, #3
   236c4:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   236c6:	2000      	movs	r0, #0
   236c8:	4770      	bx	lr
   236ca:	bf00      	nop
   236cc:	100040e8 	.word	0x100040e8

000236d0 <ble_ll_hci_le_rd_sugg_data_len>:
ble_ll_hci_le_rd_sugg_data_len(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_sugg_def_data_len_rp *rsp = (void *) rspbuf;

    /* Place the data packet length and number of packets in the buffer */
    rsp->max_tx_octets = htole16(g_ble_ll_conn_params.sugg_tx_octets);
   236d0:	4b04      	ldr	r3, [pc, #16]	; (236e4 <ble_ll_hci_le_rd_sugg_data_len+0x14>)
   236d2:	7a5a      	ldrb	r2, [r3, #9]
   236d4:	8002      	strh	r2, [r0, #0]
    rsp->max_tx_time = htole16(g_ble_ll_conn_params.sugg_tx_time);
   236d6:	895b      	ldrh	r3, [r3, #10]
   236d8:	8043      	strh	r3, [r0, #2]

    *rsplen = sizeof(*rsp);
   236da:	2304      	movs	r3, #4
   236dc:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   236de:	2000      	movs	r0, #0
   236e0:	4770      	bx	lr
   236e2:	bf00      	nop
   236e4:	10004474 	.word	0x10004474

000236e8 <ble_ll_hci_le_rd_max_data_len>:
ble_ll_hci_le_rd_max_data_len(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_max_data_len_rp *rsp = (void *)rspbuf;

    /* Place the data packet length and number of packets in the buffer */
    rsp->max_tx_octests = htole16(g_ble_ll_conn_params.supp_max_tx_octets);
   236e8:	4b06      	ldr	r3, [pc, #24]	; (23704 <ble_ll_hci_le_rd_max_data_len+0x1c>)
   236ea:	799a      	ldrb	r2, [r3, #6]
   236ec:	8002      	strh	r2, [r0, #0]
    rsp->max_tx_time = htole16(g_ble_ll_conn_params.supp_max_tx_time);
   236ee:	8a5a      	ldrh	r2, [r3, #18]
   236f0:	8042      	strh	r2, [r0, #2]
    rsp->max_rx_octests = htole16(g_ble_ll_conn_params.supp_max_rx_octets);
   236f2:	79da      	ldrb	r2, [r3, #7]
   236f4:	8082      	strh	r2, [r0, #4]
    rsp->max_rx_time = htole16(g_ble_ll_conn_params.supp_max_rx_time);
   236f6:	8a9b      	ldrh	r3, [r3, #20]
   236f8:	80c3      	strh	r3, [r0, #6]

    *rsplen = sizeof(*rsp);
   236fa:	2308      	movs	r3, #8
   236fc:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   236fe:	2000      	movs	r0, #0
   23700:	4770      	bx	lr
   23702:	bf00      	nop
   23704:	10004474 	.word	0x10004474

00023708 <ble_ll_hci_le_cmd_send_cmd_status>:
static int
ble_ll_hci_le_cmd_send_cmd_status(uint16_t ocf)
{
    int rc;

    switch (ocf) {
   23708:	380d      	subs	r0, #13
   2370a:	2837      	cmp	r0, #55	; 0x37
   2370c:	d81f      	bhi.n	2374e <ble_ll_hci_le_cmd_send_cmd_status+0x46>
   2370e:	e8df f000 	tbb	[pc, r0]
   23712:	1e1c      	.short	0x1e1c
   23714:	1e1e1e1e 	.word	0x1e1e1e1e
   23718:	1c1e1e1c 	.word	0x1c1e1e1c
   2371c:	1e1c1e1e 	.word	0x1e1c1e1e
   23720:	1e1e1e1e 	.word	0x1e1e1e1e
   23724:	1e1e1e1e 	.word	0x1e1e1e1e
   23728:	1c1c1e1e 	.word	0x1c1c1e1e
   2372c:	1e1e1e1e 	.word	0x1e1e1e1e
   23730:	1e1e1e1e 	.word	0x1e1e1e1e
   23734:	1c1e1e1e 	.word	0x1c1e1e1e
   23738:	1e1e1e1e 	.word	0x1e1e1e1e
   2373c:	1e1e1e1e 	.word	0x1e1e1e1e
   23740:	1e1e1e1e 	.word	0x1e1e1e1e
   23744:	1e1e1e1e 	.word	0x1e1e1e1e
   23748:	1c1c      	.short	0x1c1c
    case BLE_HCI_OCF_LE_REQ_PEER_SCA:
#endif
        rc = 1;
        break;
    default:
        rc = 0;
   2374a:	2001      	movs	r0, #1
   2374c:	4770      	bx	lr
   2374e:	2000      	movs	r0, #0
        break;
    }
    return rc;
}
   23750:	4770      	bx	lr
	...

00023754 <ble_ll_read_rf_path_compensation>:
static int
ble_ll_read_rf_path_compensation(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_rf_path_compensation_rp *rsp = (void *) rspbuf;

    rsp->rx_path_compensation = htole16(rx_path_pwr_compensation);
   23754:	4b04      	ldr	r3, [pc, #16]	; (23768 <ble_ll_read_rf_path_compensation+0x14>)
   23756:	881b      	ldrh	r3, [r3, #0]
   23758:	8043      	strh	r3, [r0, #2]
    rsp->tx_path_compensation = htole16(tx_path_pwr_compensation);
   2375a:	4b04      	ldr	r3, [pc, #16]	; (2376c <ble_ll_read_rf_path_compensation+0x18>)
   2375c:	881b      	ldrh	r3, [r3, #0]
   2375e:	8003      	strh	r3, [r0, #0]

    *rsplen = sizeof(*rsp);
   23760:	2304      	movs	r3, #4
   23762:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   23764:	2000      	movs	r0, #0
   23766:	4770      	bx	lr
   23768:	10004660 	.word	0x10004660
   2376c:	10004662 	.word	0x10004662

00023770 <ble_ll_hci_cb_set_event_mask>:
static int
ble_ll_hci_cb_set_event_mask(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_cb_set_event_mask_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof (*cmd)) {
   23770:	2908      	cmp	r1, #8
   23772:	d106      	bne.n	23782 <ble_ll_hci_cb_set_event_mask+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_hci_event_mask = le64toh(cmd->event_mask);
   23774:	6801      	ldr	r1, [r0, #0]
   23776:	6842      	ldr	r2, [r0, #4]
   23778:	4b03      	ldr	r3, [pc, #12]	; (23788 <ble_ll_hci_cb_set_event_mask+0x18>)
   2377a:	6019      	str	r1, [r3, #0]
   2377c:	605a      	str	r2, [r3, #4]

    return BLE_ERR_SUCCESS;
   2377e:	2000      	movs	r0, #0
   23780:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   23782:	2012      	movs	r0, #18
}
   23784:	4770      	bx	lr
   23786:	bf00      	nop
   23788:	10004648 	.word	0x10004648

0002378c <ble_ll_hci_cb_set_event_mask2>:
static int
ble_ll_hci_cb_set_event_mask2(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_cb_set_event_mask2_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof (*cmd)) {
   2378c:	2908      	cmp	r1, #8
   2378e:	d106      	bne.n	2379e <ble_ll_hci_cb_set_event_mask2+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_hci_event_mask2 = le64toh(cmd->event_mask2);
   23790:	6801      	ldr	r1, [r0, #0]
   23792:	6842      	ldr	r2, [r0, #4]
   23794:	4b03      	ldr	r3, [pc, #12]	; (237a4 <ble_ll_hci_cb_set_event_mask2+0x18>)
   23796:	6019      	str	r1, [r3, #0]
   23798:	605a      	str	r2, [r3, #4]

    return BLE_ERR_SUCCESS;
   2379a:	2000      	movs	r0, #0
   2379c:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2379e:	2012      	movs	r0, #18
}
   237a0:	4770      	bx	lr
   237a2:	bf00      	nop
   237a4:	10004650 	.word	0x10004650

000237a8 <ble_ll_hci_disconnect>:
    if (len != sizeof (*cmd)) {
   237a8:	2903      	cmp	r1, #3
   237aa:	d001      	beq.n	237b0 <ble_ll_hci_disconnect+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   237ac:	2012      	movs	r0, #18
}
   237ae:	4770      	bx	lr
{
   237b0:	b508      	push	{r3, lr}
    return ble_ll_conn_hci_disconnect_cmd(cmd);
   237b2:	f7fe fc69 	bl	22088 <ble_ll_conn_hci_disconnect_cmd>
}
   237b6:	bd08      	pop	{r3, pc}

000237b8 <ble_ll_hci_link_ctrl_cmd_proc>:
{
   237b8:	b508      	push	{r3, lr}
    switch (ocf) {
   237ba:	2a06      	cmp	r2, #6
   237bc:	d003      	beq.n	237c6 <ble_ll_hci_link_ctrl_cmd_proc+0xe>
   237be:	2a1d      	cmp	r2, #29
   237c0:	d006      	beq.n	237d0 <ble_ll_hci_link_ctrl_cmd_proc+0x18>
   237c2:	2001      	movs	r0, #1
}
   237c4:	bd08      	pop	{r3, pc}
        rc = ble_ll_hci_disconnect(cmdbuf, len);
   237c6:	f7ff ffef 	bl	237a8 <ble_ll_hci_disconnect>
        rc += (BLE_ERR_MAX + 1);
   237ca:	f500 7080 	add.w	r0, r0, #256	; 0x100
        break;
   237ce:	e7f9      	b.n	237c4 <ble_ll_hci_link_ctrl_cmd_proc+0xc>
        rc = ble_ll_conn_hci_rd_rem_ver_cmd(cmdbuf, len);
   237d0:	f7fe fca6 	bl	22120 <ble_ll_conn_hci_rd_rem_ver_cmd>
        rc += (BLE_ERR_MAX + 1);
   237d4:	f500 7080 	add.w	r0, r0, #256	; 0x100
    return rc;
   237d8:	e7f4      	b.n	237c4 <ble_ll_hci_link_ctrl_cmd_proc+0xc>

000237da <ble_ll_hci_ctlr_bb_cmd_proc>:

static int
ble_ll_hci_ctlr_bb_cmd_proc(const uint8_t *cmdbuf, uint8_t len, uint16_t ocf,
                            uint8_t *rspbuf, uint8_t *rsplen)
{
   237da:	b510      	push	{r4, lr}
   237dc:	4614      	mov	r4, r2
    int rc;

    /* Assume error; if all pass rc gets set to 0 */
    rc = BLE_ERR_INV_HCI_CMD_PARMS;

    switch (ocf) {
   237de:	2a63      	cmp	r2, #99	; 0x63
   237e0:	d01a      	beq.n	23818 <ble_ll_hci_ctlr_bb_cmd_proc+0x3e>
   237e2:	461a      	mov	r2, r3
   237e4:	d907      	bls.n	237f6 <ble_ll_hci_ctlr_bb_cmd_proc+0x1c>
   237e6:	2c7b      	cmp	r4, #123	; 0x7b
   237e8:	d019      	beq.n	2381e <ble_ll_hci_ctlr_bb_cmd_proc+0x44>
   237ea:	2c7c      	cmp	r4, #124	; 0x7c
   237ec:	d10c      	bne.n	23808 <ble_ll_hci_ctlr_bb_cmd_proc+0x2e>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_PING)
    case BLE_HCI_OCF_CB_RD_AUTH_PYLD_TMO:
        rc = ble_ll_conn_hci_rd_auth_pyld_tmo(cmdbuf, len, rspbuf, rsplen);
        break;
    case BLE_HCI_OCF_CB_WR_AUTH_PYLD_TMO:
        rc = ble_ll_conn_hci_wr_auth_pyld_tmo(cmdbuf, len, rspbuf, rsplen);
   237ee:	9b02      	ldr	r3, [sp, #8]
   237f0:	f7fe fde8 	bl	223c4 <ble_ll_conn_hci_wr_auth_pyld_tmo>
        break;
   237f4:	e00c      	b.n	23810 <ble_ll_hci_ctlr_bb_cmd_proc+0x36>
    switch (ocf) {
   237f6:	2c01      	cmp	r4, #1
   237f8:	d008      	beq.n	2380c <ble_ll_hci_ctlr_bb_cmd_proc+0x32>
   237fa:	2c03      	cmp	r4, #3
   237fc:	d102      	bne.n	23804 <ble_ll_hci_ctlr_bb_cmd_proc+0x2a>
        if (len == 0) {
   237fe:	b141      	cbz	r1, 23812 <ble_ll_hci_ctlr_bb_cmd_proc+0x38>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   23800:	2012      	movs	r0, #18
    default:
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
        break;
    }

    return rc;
   23802:	e005      	b.n	23810 <ble_ll_hci_ctlr_bb_cmd_proc+0x36>
    switch (ocf) {
   23804:	2001      	movs	r0, #1
   23806:	e003      	b.n	23810 <ble_ll_hci_ctlr_bb_cmd_proc+0x36>
   23808:	2001      	movs	r0, #1
   2380a:	e001      	b.n	23810 <ble_ll_hci_ctlr_bb_cmd_proc+0x36>
        rc = ble_ll_hci_cb_set_event_mask(cmdbuf, len);
   2380c:	f7ff ffb0 	bl	23770 <ble_ll_hci_cb_set_event_mask>
}
   23810:	bd10      	pop	{r4, pc}
            rc = ble_ll_reset();
   23812:	f7fb faff 	bl	1ee14 <ble_ll_reset>
   23816:	e7fb      	b.n	23810 <ble_ll_hci_ctlr_bb_cmd_proc+0x36>
        rc = ble_ll_hci_cb_set_event_mask2(cmdbuf, len);
   23818:	f7ff ffb8 	bl	2378c <ble_ll_hci_cb_set_event_mask2>
        break;
   2381c:	e7f8      	b.n	23810 <ble_ll_hci_ctlr_bb_cmd_proc+0x36>
        rc = ble_ll_conn_hci_rd_auth_pyld_tmo(cmdbuf, len, rspbuf, rsplen);
   2381e:	9b02      	ldr	r3, [sp, #8]
   23820:	f7fe fdb7 	bl	22392 <ble_ll_conn_hci_rd_auth_pyld_tmo>
        break;
   23824:	e7f4      	b.n	23810 <ble_ll_hci_ctlr_bb_cmd_proc+0x36>
	...

00023828 <ble_ll_hci_rd_local_supp_cmd>:
{
   23828:	b4f0      	push	{r4, r5, r6, r7}
    memset(rsp->commands, 0, sizeof(rsp->commands));
   2382a:	2300      	movs	r3, #0
   2382c:	62c3      	str	r3, [r0, #44]	; 0x2c
   2382e:	6303      	str	r3, [r0, #48]	; 0x30
   23830:	6343      	str	r3, [r0, #52]	; 0x34
   23832:	6383      	str	r3, [r0, #56]	; 0x38
   23834:	63c3      	str	r3, [r0, #60]	; 0x3c
    memcpy(rsp->commands, g_ble_ll_supp_cmds, sizeof(g_ble_ll_supp_cmds));
   23836:	4b0e      	ldr	r3, [pc, #56]	; (23870 <ble_ll_hci_rd_local_supp_cmd+0x48>)
   23838:	f103 0220 	add.w	r2, r3, #32
   2383c:	681f      	ldr	r7, [r3, #0]
   2383e:	685e      	ldr	r6, [r3, #4]
   23840:	689d      	ldr	r5, [r3, #8]
   23842:	68dc      	ldr	r4, [r3, #12]
   23844:	6007      	str	r7, [r0, #0]
   23846:	6046      	str	r6, [r0, #4]
   23848:	6085      	str	r5, [r0, #8]
   2384a:	60c4      	str	r4, [r0, #12]
   2384c:	3310      	adds	r3, #16
   2384e:	3010      	adds	r0, #16
   23850:	4293      	cmp	r3, r2
   23852:	d1f3      	bne.n	2383c <ble_ll_hci_rd_local_supp_cmd+0x14>
   23854:	681d      	ldr	r5, [r3, #0]
   23856:	685c      	ldr	r4, [r3, #4]
   23858:	689a      	ldr	r2, [r3, #8]
   2385a:	6005      	str	r5, [r0, #0]
   2385c:	6044      	str	r4, [r0, #4]
   2385e:	6082      	str	r2, [r0, #8]
   23860:	7b1b      	ldrb	r3, [r3, #12]
   23862:	7303      	strb	r3, [r0, #12]
    *rsplen = sizeof(*rsp);
   23864:	2340      	movs	r3, #64	; 0x40
   23866:	700b      	strb	r3, [r1, #0]
}
   23868:	2000      	movs	r0, #0
   2386a:	bcf0      	pop	{r4, r5, r6, r7}
   2386c:	4770      	bx	lr
   2386e:	bf00      	nop
   23870:	00038c20 	.word	0x00038c20

00023874 <ble_ll_hci_info_params_cmd_proc>:

static int
ble_ll_hci_info_params_cmd_proc(const uint8_t *cmdbuf, uint8_t len,
                                uint16_t ocf, uint8_t *rspbuf, uint8_t *rsplen)
{
   23874:	b508      	push	{r3, lr}
    int rc;

    /* Assume error; if all pass rc gets set to 0 */
    rc = BLE_ERR_INV_HCI_CMD_PARMS;

    switch (ocf) {
   23876:	3a01      	subs	r2, #1
   23878:	2a08      	cmp	r2, #8
   2387a:	d826      	bhi.n	238ca <ble_ll_hci_info_params_cmd_proc+0x56>
   2387c:	e8df f002 	tbb	[pc, r2]
   23880:	25150d05 	.word	0x25150d05
   23884:	25252525 	.word	0x25252525
   23888:	1d          	.byte	0x1d
   23889:	00          	.byte	0x00
    case BLE_HCI_OCF_IP_RD_LOCAL_VER:
        if (len == 0) {
   2388a:	b109      	cbz	r1, 23890 <ble_ll_hci_info_params_cmd_proc+0x1c>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   2388c:	2012      	movs	r0, #18
   2388e:	e01d      	b.n	238cc <ble_ll_hci_info_params_cmd_proc+0x58>
            rc = ble_ll_hci_rd_local_version(rspbuf, rsplen);
   23890:	9902      	ldr	r1, [sp, #8]
   23892:	4618      	mov	r0, r3
   23894:	f7ff fed8 	bl	23648 <ble_ll_hci_rd_local_version>
   23898:	e018      	b.n	238cc <ble_ll_hci_info_params_cmd_proc+0x58>
        }
        break;
    case BLE_HCI_OCF_IP_RD_LOC_SUPP_CMD:
        if (len == 0) {
   2389a:	b109      	cbz	r1, 238a0 <ble_ll_hci_info_params_cmd_proc+0x2c>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   2389c:	2012      	movs	r0, #18
   2389e:	e015      	b.n	238cc <ble_ll_hci_info_params_cmd_proc+0x58>
            rc = ble_ll_hci_rd_local_supp_cmd(rspbuf, rsplen);
   238a0:	9902      	ldr	r1, [sp, #8]
   238a2:	4618      	mov	r0, r3
   238a4:	f7ff ffc0 	bl	23828 <ble_ll_hci_rd_local_supp_cmd>
   238a8:	e010      	b.n	238cc <ble_ll_hci_info_params_cmd_proc+0x58>
        }
        break;
    case BLE_HCI_OCF_IP_RD_LOC_SUPP_FEAT:
        if (len == 0) {
   238aa:	b109      	cbz	r1, 238b0 <ble_ll_hci_info_params_cmd_proc+0x3c>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   238ac:	2012      	movs	r0, #18
   238ae:	e00d      	b.n	238cc <ble_ll_hci_info_params_cmd_proc+0x58>
            rc = ble_ll_hci_rd_local_supp_feat(rspbuf, rsplen);
   238b0:	9902      	ldr	r1, [sp, #8]
   238b2:	4618      	mov	r0, r3
   238b4:	f7ff fed8 	bl	23668 <ble_ll_hci_rd_local_supp_feat>
   238b8:	e008      	b.n	238cc <ble_ll_hci_info_params_cmd_proc+0x58>
        }
        break;
    case BLE_HCI_OCF_IP_RD_BD_ADDR:
        if (len == 0) {
   238ba:	b109      	cbz	r1, 238c0 <ble_ll_hci_info_params_cmd_proc+0x4c>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   238bc:	2012      	movs	r0, #18
    default:
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
        break;
    }

    return rc;
   238be:	e005      	b.n	238cc <ble_ll_hci_info_params_cmd_proc+0x58>
            rc = ble_ll_hci_rd_bd_addr(rspbuf, rsplen);
   238c0:	9902      	ldr	r1, [sp, #8]
   238c2:	4618      	mov	r0, r3
   238c4:	f7ff fede 	bl	23684 <ble_ll_hci_rd_bd_addr>
   238c8:	e000      	b.n	238cc <ble_ll_hci_info_params_cmd_proc+0x58>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   238ca:	2001      	movs	r0, #1
}
   238cc:	bd08      	pop	{r3, pc}

000238ce <ble_ll_hci_status_params_cmd_proc>:
                                  uint16_t ocf, uint8_t *rspbuf,
                                  uint8_t *rsplen)
{
    int rc;

    switch (ocf) {
   238ce:	2a05      	cmp	r2, #5
   238d0:	d001      	beq.n	238d6 <ble_ll_hci_status_params_cmd_proc+0x8>
    case BLE_HCI_OCF_RD_RSSI:
        rc = ble_ll_conn_hci_rd_rssi(cmdbuf, len, rspbuf, rsplen);
        break;
#endif
    default:
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   238d2:	2001      	movs	r0, #1
        break;
    }

    return rc;
}
   238d4:	4770      	bx	lr
{
   238d6:	b510      	push	{r4, lr}
   238d8:	461c      	mov	r4, r3
        rc = ble_ll_conn_hci_rd_rssi(cmdbuf, len, rspbuf, rsplen);
   238da:	9b02      	ldr	r3, [sp, #8]
   238dc:	4622      	mov	r2, r4
   238de:	f7fe fc40 	bl	22162 <ble_ll_conn_hci_rd_rssi>
}
   238e2:	bd10      	pop	{r4, pc}

000238e4 <ble_ll_hci_le_read_local_features>:
{
   238e4:	b538      	push	{r3, r4, r5, lr}
   238e6:	4604      	mov	r4, r0
   238e8:	460d      	mov	r5, r1
    rsp->features = htole64(ble_ll_read_supp_features());
   238ea:	f7fb fa8d 	bl	1ee08 <ble_ll_read_supp_features>
   238ee:	6020      	str	r0, [r4, #0]
   238f0:	6061      	str	r1, [r4, #4]
    *rsplen = sizeof(*rsp);
   238f2:	2308      	movs	r3, #8
   238f4:	702b      	strb	r3, [r5, #0]
}
   238f6:	2000      	movs	r0, #0
   238f8:	bd38      	pop	{r3, r4, r5, pc}

000238fa <ble_ll_hci_le_encrypt>:
{
   238fa:	b570      	push	{r4, r5, r6, lr}
   238fc:	b08c      	sub	sp, #48	; 0x30
   238fe:	4604      	mov	r4, r0
   23900:	4616      	mov	r6, r2
   23902:	461d      	mov	r5, r3
    swap_buf(ecb.key, cmd->key, BLE_ENC_BLOCK_SIZE);
   23904:	2210      	movs	r2, #16
   23906:	4601      	mov	r1, r0
   23908:	4668      	mov	r0, sp
   2390a:	f7f5 fad7 	bl	18ebc <swap_buf>
    swap_buf(ecb.plain_text, cmd->data, BLE_ENC_BLOCK_SIZE);
   2390e:	2210      	movs	r2, #16
   23910:	18a1      	adds	r1, r4, r2
   23912:	eb0d 0002 	add.w	r0, sp, r2
   23916:	f7f5 fad1 	bl	18ebc <swap_buf>
    rc = ble_hw_encrypt_block(&ecb);
   2391a:	4668      	mov	r0, sp
   2391c:	f002 fc52 	bl	261c4 <ble_hw_encrypt_block>
    if (!rc) {
   23920:	b118      	cbz	r0, 2392a <ble_ll_hci_le_encrypt+0x30>
        rc = BLE_ERR_CTLR_BUSY;
   23922:	243a      	movs	r4, #58	; 0x3a
}
   23924:	4620      	mov	r0, r4
   23926:	b00c      	add	sp, #48	; 0x30
   23928:	bd70      	pop	{r4, r5, r6, pc}
   2392a:	4604      	mov	r4, r0
        swap_buf(rsp->data, ecb.cipher_text, BLE_ENC_BLOCK_SIZE);
   2392c:	2210      	movs	r2, #16
   2392e:	a908      	add	r1, sp, #32
   23930:	4630      	mov	r0, r6
   23932:	f7f5 fac3 	bl	18ebc <swap_buf>
        *rsplen = sizeof(*rsp);
   23936:	2310      	movs	r3, #16
   23938:	702b      	strb	r3, [r5, #0]
        rc = BLE_ERR_SUCCESS;
   2393a:	e7f3      	b.n	23924 <ble_ll_hci_le_encrypt+0x2a>

0002393c <ble_ll_hci_le_rand>:
{
   2393c:	b510      	push	{r4, lr}
   2393e:	460c      	mov	r4, r1
    ble_ll_rand_data_get((uint8_t *)&rsp->random_number,
   23940:	2108      	movs	r1, #8
   23942:	f000 fd7f 	bl	24444 <ble_ll_rand_data_get>
    *rsplen = sizeof(*rsp);
   23946:	2308      	movs	r3, #8
   23948:	7023      	strb	r3, [r4, #0]
}
   2394a:	2000      	movs	r0, #0
   2394c:	bd10      	pop	{r4, pc}

0002394e <ble_ll_hci_le_read_supp_states>:
{
   2394e:	b538      	push	{r3, r4, r5, lr}
   23950:	4604      	mov	r4, r0
   23952:	460d      	mov	r5, r1
    rsp->states = htole64(ble_ll_read_supp_states());
   23954:	f7fb fa52 	bl	1edfc <ble_ll_read_supp_states>
   23958:	6020      	str	r0, [r4, #0]
   2395a:	6061      	str	r1, [r4, #4]
    *rsplen = sizeof(*rsp);
   2395c:	2308      	movs	r3, #8
   2395e:	702b      	strb	r3, [r5, #0]
}
   23960:	2000      	movs	r0, #0
   23962:	bd38      	pop	{r3, r4, r5, pc}

00023964 <ble_ll_hci_le_wr_sugg_data_len>:
    if (len != sizeof(*cmd)) {
   23964:	2904      	cmp	r1, #4
   23966:	d001      	beq.n	2396c <ble_ll_hci_le_wr_sugg_data_len+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   23968:	2012      	movs	r0, #18
}
   2396a:	4770      	bx	lr
{
   2396c:	b570      	push	{r4, r5, r6, lr}
    tx_oct = le16toh(cmd->max_tx_octets);
   2396e:	8804      	ldrh	r4, [r0, #0]
    tx_time = le16toh(cmd->max_tx_time);
   23970:	8845      	ldrh	r5, [r0, #2]
   23972:	b2ae      	uxth	r6, r5
    if (ble_ll_chk_txrx_octets(tx_oct) && ble_ll_chk_txrx_time(tx_time)) {
   23974:	4620      	mov	r0, r4
   23976:	f7fb f94d 	bl	1ec14 <ble_ll_chk_txrx_octets>
   2397a:	b908      	cbnz	r0, 23980 <ble_ll_hci_le_wr_sugg_data_len+0x1c>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   2397c:	2012      	movs	r0, #18
}
   2397e:	bd70      	pop	{r4, r5, r6, pc}
    if (ble_ll_chk_txrx_octets(tx_oct) && ble_ll_chk_txrx_time(tx_time)) {
   23980:	4630      	mov	r0, r6
   23982:	f7fb f94f 	bl	1ec24 <ble_ll_chk_txrx_time>
   23986:	b1c0      	cbz	r0, 239ba <ble_ll_hci_le_wr_sugg_data_len+0x56>
        g_ble_ll_conn_params.sugg_tx_octets = (uint8_t)tx_oct;
   23988:	b2e1      	uxtb	r1, r4
   2398a:	4b0d      	ldr	r3, [pc, #52]	; (239c0 <ble_ll_hci_le_wr_sugg_data_len+0x5c>)
   2398c:	7259      	strb	r1, [r3, #9]
        g_ble_ll_conn_params.sugg_tx_time = tx_time;
   2398e:	815d      	strh	r5, [r3, #10]
                        min(tx_oct, g_ble_ll_conn_params.supp_max_tx_octets);
   23990:	799a      	ldrb	r2, [r3, #6]
   23992:	b293      	uxth	r3, r2
        g_ble_ll_conn_params.conn_init_max_tx_octets =
   23994:	42a3      	cmp	r3, r4
   23996:	d900      	bls.n	2399a <ble_ll_hci_le_wr_sugg_data_len+0x36>
   23998:	460a      	mov	r2, r1
   2399a:	4b09      	ldr	r3, [pc, #36]	; (239c0 <ble_ll_hci_le_wr_sugg_data_len+0x5c>)
   2399c:	721a      	strb	r2, [r3, #8]
                        min(tx_time, g_ble_ll_conn_params.supp_max_tx_time);
   2399e:	8a58      	ldrh	r0, [r3, #18]
   239a0:	42b0      	cmp	r0, r6
   239a2:	bf28      	it	cs
   239a4:	4630      	movcs	r0, r6
        g_ble_ll_conn_params.conn_init_max_tx_time =
   239a6:	8198      	strh	r0, [r3, #12]
                                min(BLE_LL_CONN_SUPP_TIME_MAX_UNCODED,
   239a8:	f640 0248 	movw	r2, #2120	; 0x848
   239ac:	4282      	cmp	r2, r0
   239ae:	bf28      	it	cs
   239b0:	4602      	movcs	r2, r0
        g_ble_ll_conn_params.conn_init_max_tx_time_uncoded =
   239b2:	81da      	strh	r2, [r3, #14]
        g_ble_ll_conn_params.conn_init_max_tx_time_coded =
   239b4:	8218      	strh	r0, [r3, #16]
        rc = BLE_ERR_SUCCESS;
   239b6:	2000      	movs	r0, #0
   239b8:	e7e1      	b.n	2397e <ble_ll_hci_le_wr_sugg_data_len+0x1a>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   239ba:	2012      	movs	r0, #18
   239bc:	e7df      	b.n	2397e <ble_ll_hci_le_wr_sugg_data_len+0x1a>
   239be:	bf00      	nop
   239c0:	10004474 	.word	0x10004474

000239c4 <ble_ll_read_tx_power>:
{
   239c4:	b538      	push	{r3, r4, r5, lr}
   239c6:	4604      	mov	r4, r0
   239c8:	460d      	mov	r5, r1
    rsp->min_tx_power = ble_phy_txpower_round(-127);
   239ca:	f06f 007e 	mvn.w	r0, #126	; 0x7e
   239ce:	f002 fc5f 	bl	26290 <ble_phy_txpower_round>
   239d2:	7020      	strb	r0, [r4, #0]
    rsp->max_tx_power = ble_phy_txpower_round(126);
   239d4:	207e      	movs	r0, #126	; 0x7e
   239d6:	f002 fc5b 	bl	26290 <ble_phy_txpower_round>
   239da:	7060      	strb	r0, [r4, #1]
    *rsplen = sizeof(*rsp);
   239dc:	2302      	movs	r3, #2
   239de:	702b      	strb	r3, [r5, #0]
}
   239e0:	2000      	movs	r0, #0
   239e2:	bd38      	pop	{r3, r4, r5, pc}

000239e4 <ble_ll_write_rf_path_compensation>:
    if (len != sizeof(*cmd)) {
   239e4:	2904      	cmp	r1, #4
   239e6:	d121      	bne.n	23a2c <ble_ll_write_rf_path_compensation+0x48>
{
   239e8:	b510      	push	{r4, lr}
    tx = le16toh(cmd->tx_path_compensation);
   239ea:	f9b0 3000 	ldrsh.w	r3, [r0]
   239ee:	461c      	mov	r4, r3
    rx = le16toh(cmd->rx_path_compensation);
   239f0:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
   239f4:	b20a      	sxth	r2, r1
    if ((tx < -1280) || (tx > 1280) || (rx < -1280) || (rx > 1280)) {
   239f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
   239fa:	b29b      	uxth	r3, r3
   239fc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
   23a00:	d816      	bhi.n	23a30 <ble_ll_write_rf_path_compensation+0x4c>
   23a02:	f512 6fa0 	cmn.w	r2, #1280	; 0x500
   23a06:	db15      	blt.n	23a34 <ble_ll_write_rf_path_compensation+0x50>
   23a08:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
   23a0c:	dc14      	bgt.n	23a38 <ble_ll_write_rf_path_compensation+0x54>
    tx_path_pwr_compensation = tx;
   23a0e:	4b0b      	ldr	r3, [pc, #44]	; (23a3c <ble_ll_write_rf_path_compensation+0x58>)
   23a10:	801c      	strh	r4, [r3, #0]
    rx_path_pwr_compensation = rx;
   23a12:	4b0b      	ldr	r3, [pc, #44]	; (23a40 <ble_ll_write_rf_path_compensation+0x5c>)
   23a14:	8019      	strh	r1, [r3, #0]
    ble_phy_set_rx_pwr_compensation(rx_path_pwr_compensation / 10);
   23a16:	480b      	ldr	r0, [pc, #44]	; (23a44 <ble_ll_write_rf_path_compensation+0x60>)
   23a18:	fb80 3002 	smull	r3, r0, r0, r2
   23a1c:	17d2      	asrs	r2, r2, #31
   23a1e:	ebc2 00a0 	rsb	r0, r2, r0, asr #2
   23a22:	b240      	sxtb	r0, r0
   23a24:	f002 fc40 	bl	262a8 <ble_phy_set_rx_pwr_compensation>
    return BLE_ERR_SUCCESS;
   23a28:	2000      	movs	r0, #0
}
   23a2a:	bd10      	pop	{r4, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   23a2c:	2012      	movs	r0, #18
}
   23a2e:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   23a30:	2012      	movs	r0, #18
   23a32:	e7fa      	b.n	23a2a <ble_ll_write_rf_path_compensation+0x46>
   23a34:	2012      	movs	r0, #18
   23a36:	e7f8      	b.n	23a2a <ble_ll_write_rf_path_compensation+0x46>
   23a38:	2012      	movs	r0, #18
   23a3a:	e7f6      	b.n	23a2a <ble_ll_write_rf_path_compensation+0x46>
   23a3c:	10004662 	.word	0x10004662
   23a40:	10004660 	.word	0x10004660
   23a44:	66666667 	.word	0x66666667

00023a48 <ble_ll_hci_le_cmd_proc>:
{
   23a48:	b538      	push	{r3, r4, r5, lr}
   23a4a:	4614      	mov	r4, r2
   23a4c:	461a      	mov	r2, r3
    switch (ocf) {
   23a4e:	1e63      	subs	r3, r4, #1
   23a50:	2b4d      	cmp	r3, #77	; 0x4d
   23a52:	f200 814f 	bhi.w	23cf4 <ble_ll_hci_le_cmd_proc+0x2ac>
   23a56:	e8df f013 	tbh	[pc, r3, lsl #1]
   23a5a:	004e      	.short	0x004e
   23a5c:	005b0052 	.word	0x005b0052
   23a60:	0064014d 	.word	0x0064014d
   23a64:	006d0069 	.word	0x006d0069
   23a68:	007a0076 	.word	0x007a0076
   23a6c:	0082007e 	.word	0x0082007e
   23a70:	008a0086 	.word	0x008a0086
   23a74:	0096008e 	.word	0x0096008e
   23a78:	00a6009f 	.word	0x00a6009f
   23a7c:	00ae00aa 	.word	0x00ae00aa
   23a80:	00b600b2 	.word	0x00b600b2
   23a84:	00bf00bb 	.word	0x00bf00bb
   23a88:	00cd00c4 	.word	0x00cd00c4
   23a8c:	00d600d1 	.word	0x00d600d1
   23a90:	014d00db 	.word	0x014d00db
   23a94:	014d014d 	.word	0x014d014d
   23a98:	00e900e4 	.word	0x00e900e4
   23a9c:	00f300ee 	.word	0x00f300ee
   23aa0:	014d00fc 	.word	0x014d00fc
   23aa4:	0100014d 	.word	0x0100014d
   23aa8:	01080104 	.word	0x01080104
   23aac:	0118010f 	.word	0x0118010f
   23ab0:	0122011d 	.word	0x0122011d
   23ab4:	012a0126 	.word	0x012a0126
   23ab8:	014d014d 	.word	0x014d014d
   23abc:	014d014d 	.word	0x014d014d
   23ac0:	014d014d 	.word	0x014d014d
   23ac4:	014d014d 	.word	0x014d014d
   23ac8:	014d014d 	.word	0x014d014d
   23acc:	014d014d 	.word	0x014d014d
   23ad0:	014d014d 	.word	0x014d014d
   23ad4:	014d014d 	.word	0x014d014d
   23ad8:	014d014d 	.word	0x014d014d
   23adc:	014d014d 	.word	0x014d014d
   23ae0:	014d014d 	.word	0x014d014d
   23ae4:	014d014d 	.word	0x014d014d
   23ae8:	014d014d 	.word	0x014d014d
   23aec:	0133014d 	.word	0x0133014d
   23af0:	0145013c 	.word	0x0145013c
   23af4:	0149      	.short	0x0149
        rc = ble_ll_hci_set_le_event_mask(cmdbuf, len);
   23af6:	f7ff fdd1 	bl	2369c <ble_ll_hci_set_le_event_mask>
   23afa:	4605      	mov	r5, r0
        break;
   23afc:	e0fb      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        if (len == 0) {
   23afe:	b109      	cbz	r1, 23b04 <ble_ll_hci_le_cmd_proc+0xbc>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   23b00:	2512      	movs	r5, #18
   23b02:	e0f8      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
            rc = ble_ll_hci_le_read_bufsize(rspbuf, rsplen);
   23b04:	9904      	ldr	r1, [sp, #16]
   23b06:	4610      	mov	r0, r2
   23b08:	f7ff fdd6 	bl	236b8 <ble_ll_hci_le_read_bufsize>
   23b0c:	4605      	mov	r5, r0
   23b0e:	e0f2      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        if (len == 0) {
   23b10:	b109      	cbz	r1, 23b16 <ble_ll_hci_le_cmd_proc+0xce>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   23b12:	2512      	movs	r5, #18
   23b14:	e0ef      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
            rc = ble_ll_hci_le_read_local_features(rspbuf, rsplen);
   23b16:	9904      	ldr	r1, [sp, #16]
   23b18:	4610      	mov	r0, r2
   23b1a:	f7ff fee3 	bl	238e4 <ble_ll_hci_le_read_local_features>
   23b1e:	4605      	mov	r5, r0
   23b20:	e0e9      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_set_random_addr(cmdbuf, len, false);
   23b22:	2200      	movs	r2, #0
   23b24:	f7fb f8f0 	bl	1ed08 <ble_ll_set_random_addr>
   23b28:	4605      	mov	r5, r0
        break;
   23b2a:	e0e4      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_adv_set_adv_params(cmdbuf, len);
   23b2c:	f7fc f86a 	bl	1fc04 <ble_ll_adv_set_adv_params>
   23b30:	4605      	mov	r5, r0
        break;
   23b32:	e0e0      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        if (len == 0) {
   23b34:	b109      	cbz	r1, 23b3a <ble_ll_hci_le_cmd_proc+0xf2>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   23b36:	2512      	movs	r5, #18
   23b38:	e0dd      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
            rc = ble_ll_adv_read_txpwr(rspbuf, rsplen);
   23b3a:	9904      	ldr	r1, [sp, #16]
   23b3c:	4610      	mov	r0, r2
   23b3e:	f7fc f8e5 	bl	1fd0c <ble_ll_adv_read_txpwr>
   23b42:	4605      	mov	r5, r0
   23b44:	e0d7      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_hci_set_adv_data(cmdbuf, len);
   23b46:	f7fc f908 	bl	1fd5a <ble_ll_hci_set_adv_data>
   23b4a:	4605      	mov	r5, r0
        break;
   23b4c:	e0d3      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_hci_set_scan_rsp_data(cmdbuf, len);
   23b4e:	f7fc f8f4 	bl	1fd3a <ble_ll_hci_set_scan_rsp_data>
   23b52:	4605      	mov	r5, r0
        break;
   23b54:	e0cf      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_hci_adv_set_enable(cmdbuf, len);
   23b56:	f7fc f8e3 	bl	1fd20 <ble_ll_hci_adv_set_enable>
   23b5a:	4605      	mov	r5, r0
        break;
   23b5c:	e0cb      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_scan_hci_set_params(cmdbuf, len);
   23b5e:	f001 fd8b 	bl	25678 <ble_ll_scan_hci_set_params>
   23b62:	4605      	mov	r5, r0
        break;
   23b64:	e0c7      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_scan_hci_set_enable(cmdbuf, len);
   23b66:	f001 fdeb 	bl	25740 <ble_ll_scan_hci_set_enable>
   23b6a:	4605      	mov	r5, r0
        break;
   23b6c:	e0c3      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_conn_hci_create(cmdbuf, len);
   23b6e:	f7fe f8a5 	bl	21cbc <ble_ll_conn_hci_create>
   23b72:	4605      	mov	r5, r0
        break;
   23b74:	e0bf      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        if (len == 0) {
   23b76:	b109      	cbz	r1, 23b7c <ble_ll_hci_le_cmd_proc+0x134>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   23b78:	2512      	movs	r5, #18
   23b7a:	e0bc      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
            rc = ble_ll_conn_create_cancel(cb);
   23b7c:	9805      	ldr	r0, [sp, #20]
   23b7e:	f7fe fa5f 	bl	22040 <ble_ll_conn_create_cancel>
   23b82:	4605      	mov	r5, r0
   23b84:	e0b7      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        if (len == 0) {
   23b86:	b109      	cbz	r1, 23b8c <ble_ll_hci_le_cmd_proc+0x144>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   23b88:	2512      	movs	r5, #18
   23b8a:	e0b4      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
            rc = ble_ll_whitelist_read_size(rspbuf, rsplen);
   23b8c:	9904      	ldr	r1, [sp, #16]
   23b8e:	4610      	mov	r0, r2
   23b90:	f002 faca 	bl	26128 <ble_ll_whitelist_read_size>
   23b94:	4605      	mov	r5, r0
   23b96:	e0ae      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        if (len == 0) {
   23b98:	b109      	cbz	r1, 23b9e <ble_ll_hci_le_cmd_proc+0x156>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   23b9a:	2512      	movs	r5, #18
   23b9c:	e0ab      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
            rc = ble_ll_whitelist_clear();
   23b9e:	f002 fab9 	bl	26114 <ble_ll_whitelist_clear>
   23ba2:	4605      	mov	r5, r0
   23ba4:	e0a7      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_whitelist_add(cmdbuf, len);
   23ba6:	f002 fac5 	bl	26134 <ble_ll_whitelist_add>
   23baa:	4605      	mov	r5, r0
        break;
   23bac:	e0a3      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_whitelist_rmv(cmdbuf, len);
   23bae:	f002 fad7 	bl	26160 <ble_ll_whitelist_rmv>
   23bb2:	4605      	mov	r5, r0
        break;
   23bb4:	e09f      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_conn_hci_update(cmdbuf, len);
   23bb6:	f7fe f945 	bl	21e44 <ble_ll_conn_hci_update>
   23bba:	4605      	mov	r5, r0
        break;
   23bbc:	e09b      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_conn_hci_set_chan_class(cmdbuf, len);
   23bbe:	f7fe fb12 	bl	221e6 <ble_ll_conn_hci_set_chan_class>
   23bc2:	4605      	mov	r5, r0
        break;
   23bc4:	e097      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_conn_hci_rd_chan_map(cmdbuf, len, rspbuf, rsplen);
   23bc6:	9b04      	ldr	r3, [sp, #16]
   23bc8:	f7fe fae3 	bl	22192 <ble_ll_conn_hci_rd_chan_map>
   23bcc:	4605      	mov	r5, r0
        break;
   23bce:	e092      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_conn_hci_read_rem_features(cmdbuf, len);
   23bd0:	f7fe f908 	bl	21de4 <ble_ll_conn_hci_read_rem_features>
   23bd4:	4605      	mov	r5, r0
        break;
   23bd6:	e08e      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_hci_le_encrypt(cmdbuf, len, rspbuf, rsplen);
   23bd8:	9b04      	ldr	r3, [sp, #16]
   23bda:	f7ff fe8e 	bl	238fa <ble_ll_hci_le_encrypt>
   23bde:	4605      	mov	r5, r0
        break;
   23be0:	e089      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        if (len == 0) {
   23be2:	b109      	cbz	r1, 23be8 <ble_ll_hci_le_cmd_proc+0x1a0>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   23be4:	2512      	movs	r5, #18
   23be6:	e086      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
            rc = ble_ll_hci_le_rand(rspbuf, rsplen);
   23be8:	9904      	ldr	r1, [sp, #16]
   23bea:	4610      	mov	r0, r2
   23bec:	f7ff fea6 	bl	2393c <ble_ll_hci_le_rand>
   23bf0:	4605      	mov	r5, r0
   23bf2:	e080      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_conn_hci_le_start_encrypt(cmdbuf, len);
   23bf4:	f7fe fb46 	bl	22284 <ble_ll_conn_hci_le_start_encrypt>
   23bf8:	4605      	mov	r5, r0
        break;
   23bfa:	e07c      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_conn_hci_le_ltk_reply(cmdbuf, len, rspbuf, rsplen);
   23bfc:	9b04      	ldr	r3, [sp, #16]
   23bfe:	f7fe fb71 	bl	222e4 <ble_ll_conn_hci_le_ltk_reply>
   23c02:	4605      	mov	r5, r0
        break;
   23c04:	e077      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_conn_hci_le_ltk_neg_reply(cmdbuf, len, rspbuf, rsplen);
   23c06:	9b04      	ldr	r3, [sp, #16]
   23c08:	f7fe fb9d 	bl	22346 <ble_ll_conn_hci_le_ltk_neg_reply>
   23c0c:	4605      	mov	r5, r0
        break;
   23c0e:	e072      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        if (len == 0) {
   23c10:	b109      	cbz	r1, 23c16 <ble_ll_hci_le_cmd_proc+0x1ce>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   23c12:	2512      	movs	r5, #18
   23c14:	e06f      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
            rc = ble_ll_hci_le_read_supp_states(rspbuf, rsplen);
   23c16:	9904      	ldr	r1, [sp, #16]
   23c18:	4610      	mov	r0, r2
   23c1a:	f7ff fe98 	bl	2394e <ble_ll_hci_le_read_supp_states>
   23c1e:	4605      	mov	r5, r0
   23c20:	e069      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_conn_hci_param_rr(cmdbuf, len, rspbuf, rsplen);
   23c22:	9b04      	ldr	r3, [sp, #16]
   23c24:	f7fe f982 	bl	21f2c <ble_ll_conn_hci_param_rr>
   23c28:	4605      	mov	r5, r0
        break;
   23c2a:	e064      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_conn_hci_param_nrr(cmdbuf, len, rspbuf, rsplen);
   23c2c:	9b04      	ldr	r3, [sp, #16]
   23c2e:	f7fe f9d3 	bl	21fd8 <ble_ll_conn_hci_param_nrr>
   23c32:	4605      	mov	r5, r0
        break;
   23c34:	e05f      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_conn_hci_set_data_len(cmdbuf, len, rspbuf, rsplen);
   23c36:	9b04      	ldr	r3, [sp, #16]
   23c38:	f7fe faec 	bl	22214 <ble_ll_conn_hci_set_data_len>
   23c3c:	4605      	mov	r5, r0
        break;
   23c3e:	e05a      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        if (len == 0) {
   23c40:	b109      	cbz	r1, 23c46 <ble_ll_hci_le_cmd_proc+0x1fe>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   23c42:	2512      	movs	r5, #18
   23c44:	e057      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
            rc = ble_ll_hci_le_rd_sugg_data_len(rspbuf, rsplen);
   23c46:	9904      	ldr	r1, [sp, #16]
   23c48:	4610      	mov	r0, r2
   23c4a:	f7ff fd41 	bl	236d0 <ble_ll_hci_le_rd_sugg_data_len>
   23c4e:	4605      	mov	r5, r0
   23c50:	e051      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_hci_le_wr_sugg_data_len(cmdbuf, len);
   23c52:	f7ff fe87 	bl	23964 <ble_ll_hci_le_wr_sugg_data_len>
   23c56:	4605      	mov	r5, r0
        break;
   23c58:	e04d      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_resolv_list_add(cmdbuf, len);
   23c5a:	f000 fd79 	bl	24750 <ble_ll_resolv_list_add>
   23c5e:	4605      	mov	r5, r0
        break;
   23c60:	e049      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_resolv_list_rmv(cmdbuf, len);
   23c62:	f000 fe0b 	bl	2487c <ble_ll_resolv_list_rmv>
   23c66:	4605      	mov	r5, r0
        break;
   23c68:	e045      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        if (len == 0) {
   23c6a:	b109      	cbz	r1, 23c70 <ble_ll_hci_le_cmd_proc+0x228>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   23c6c:	2512      	movs	r5, #18
   23c6e:	e042      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
            rc = ble_ll_resolv_list_clr();
   23c70:	f000 fd30 	bl	246d4 <ble_ll_resolv_list_clr>
   23c74:	4605      	mov	r5, r0
   23c76:	e03e      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        if (len == 0) {
   23c78:	b109      	cbz	r1, 23c7e <ble_ll_hci_le_cmd_proc+0x236>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   23c7a:	2512      	movs	r5, #18
   23c7c:	e03b      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
            rc = ble_ll_resolv_list_read_size(rspbuf, rsplen);
   23c7e:	9904      	ldr	r1, [sp, #16]
   23c80:	4610      	mov	r0, r2
   23c82:	f000 fd3b 	bl	246fc <ble_ll_resolv_list_read_size>
   23c86:	4605      	mov	r5, r0
   23c88:	e035      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_resolv_peer_addr_rd(cmdbuf, len, rspbuf, rsplen);
   23c8a:	9b04      	ldr	r3, [sp, #16]
   23c8c:	f000 fe58 	bl	24940 <ble_ll_resolv_peer_addr_rd>
   23c90:	4605      	mov	r5, r0
        break;
   23c92:	e030      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_resolv_local_addr_rd(cmdbuf, len, rspbuf, rsplen);
   23c94:	9b04      	ldr	r3, [sp, #16]
   23c96:	f000 fe6e 	bl	24976 <ble_ll_resolv_local_addr_rd>
   23c9a:	4605      	mov	r5, r0
        break;
   23c9c:	e02b      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_resolv_enable_cmd(cmdbuf, len);
   23c9e:	f000 fe39 	bl	24914 <ble_ll_resolv_enable_cmd>
   23ca2:	4605      	mov	r5, r0
        break;
   23ca4:	e027      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_resolv_set_rpa_tmo(cmdbuf, len);
   23ca6:	f000 fe81 	bl	249ac <ble_ll_resolv_set_rpa_tmo>
   23caa:	4605      	mov	r5, r0
        break;
   23cac:	e023      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        if (len == 0) {
   23cae:	b109      	cbz	r1, 23cb4 <ble_ll_hci_le_cmd_proc+0x26c>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   23cb0:	2512      	movs	r5, #18
   23cb2:	e020      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
            rc = ble_ll_hci_le_rd_max_data_len(rspbuf, rsplen);
   23cb4:	9904      	ldr	r1, [sp, #16]
   23cb6:	4610      	mov	r0, r2
   23cb8:	f7ff fd16 	bl	236e8 <ble_ll_hci_le_rd_max_data_len>
   23cbc:	4605      	mov	r5, r0
   23cbe:	e01a      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        if (len == 0) {
   23cc0:	b109      	cbz	r1, 23cc6 <ble_ll_hci_le_cmd_proc+0x27e>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   23cc2:	2512      	movs	r5, #18
   23cc4:	e017      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
            rc = ble_ll_read_tx_power(rspbuf, rsplen);
   23cc6:	9904      	ldr	r1, [sp, #16]
   23cc8:	4610      	mov	r0, r2
   23cca:	f7ff fe7b 	bl	239c4 <ble_ll_read_tx_power>
   23cce:	4605      	mov	r5, r0
   23cd0:	e011      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        if (len == 0) {
   23cd2:	b109      	cbz	r1, 23cd8 <ble_ll_hci_le_cmd_proc+0x290>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   23cd4:	2512      	movs	r5, #18
   23cd6:	e00e      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
            rc = ble_ll_read_rf_path_compensation(rspbuf, rsplen);
   23cd8:	9904      	ldr	r1, [sp, #16]
   23cda:	4610      	mov	r0, r2
   23cdc:	f7ff fd3a 	bl	23754 <ble_ll_read_rf_path_compensation>
   23ce0:	4605      	mov	r5, r0
   23ce2:	e008      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_write_rf_path_compensation(cmdbuf, len);
   23ce4:	f7ff fe7e 	bl	239e4 <ble_ll_write_rf_path_compensation>
   23ce8:	4605      	mov	r5, r0
        break;
   23cea:	e004      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
        rc = ble_ll_resolve_set_priv_mode(cmdbuf, len);
   23cec:	f000 fe88 	bl	24a00 <ble_ll_resolve_set_priv_mode>
   23cf0:	4605      	mov	r5, r0
        break;
   23cf2:	e000      	b.n	23cf6 <ble_ll_hci_le_cmd_proc+0x2ae>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   23cf4:	2501      	movs	r5, #1
    if (ble_ll_hci_le_cmd_send_cmd_status(ocf)) {
   23cf6:	4620      	mov	r0, r4
   23cf8:	f7ff fd06 	bl	23708 <ble_ll_hci_le_cmd_send_cmd_status>
   23cfc:	b108      	cbz	r0, 23d02 <ble_ll_hci_le_cmd_proc+0x2ba>
        rc += (BLE_ERR_MAX + 1);
   23cfe:	f505 7580 	add.w	r5, r5, #256	; 0x100
}
   23d02:	4628      	mov	r0, r5
   23d04:	bd38      	pop	{r3, r4, r5, pc}

00023d06 <ble_ll_hci_adv_mode_ext>:
}
   23d06:	2000      	movs	r0, #0
   23d08:	4770      	bx	lr
	...

00023d0c <ble_ll_hci_event_send>:
{
   23d0c:	b508      	push	{r3, lr}
    BLE_LL_ASSERT(sizeof(*hci_ev) + hci_ev->length <= BLE_LL_MAX_EVT_LEN);
   23d0e:	7843      	ldrb	r3, [r0, #1]
   23d10:	3302      	adds	r3, #2
   23d12:	2b46      	cmp	r3, #70	; 0x46
   23d14:	d806      	bhi.n	23d24 <ble_ll_hci_event_send+0x18>
    STATS_INC(ble_ll_stats, hci_events_sent);
   23d16:	4a08      	ldr	r2, [pc, #32]	; (23d38 <ble_ll_hci_event_send+0x2c>)
   23d18:	6953      	ldr	r3, [r2, #20]
   23d1a:	3301      	adds	r3, #1
   23d1c:	6153      	str	r3, [r2, #20]
    rc = ble_hci_trans_ll_evt_tx((uint8_t *)hci_ev);
   23d1e:	f00e fa25 	bl	3216c <ble_hci_trans_ll_evt_tx>
}
   23d22:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(sizeof(*hci_ev) + hci_ev->length <= BLE_LL_MAX_EVT_LEN);
   23d24:	f7f0 fce6 	bl	146f4 <hal_debugger_connected>
   23d28:	b100      	cbz	r0, 23d2c <ble_ll_hci_event_send+0x20>
   23d2a:	be01      	bkpt	0x0001
   23d2c:	2300      	movs	r3, #0
   23d2e:	461a      	mov	r2, r3
   23d30:	4619      	mov	r1, r3
   23d32:	4618      	mov	r0, r3
   23d34:	f7f4 fffc 	bl	18d30 <__assert_func>
   23d38:	10003fdc 	.word	0x10003fdc

00023d3c <ble_ll_hci_cmd_proc>:
 *
 * @param ev Pointer to os event containing a pointer to command buffer
 */
static void
ble_ll_hci_cmd_proc(struct ble_npl_event *ev)
{
   23d3c:	b570      	push	{r4, r5, r6, lr}
   23d3e:	b084      	sub	sp, #16
    uint8_t ogf;
    uint8_t rsplen;
    struct ble_hci_cmd *cmd;
    uint16_t opcode;
    uint16_t ocf;
    ble_ll_hci_post_cmd_complete_cb post_cb = NULL;
   23d40:	2300      	movs	r3, #0
   23d42:	9302      	str	r3, [sp, #8]
    return ev->ev.ev_arg;
   23d44:	6885      	ldr	r5, [r0, #8]

    BLE_LL_DEBUG_GPIO(HCI_CMD, 1);

    /* The command buffer is the event argument */
    cmd = ble_npl_event_get_arg(ev);
    BLE_LL_ASSERT(cmd != NULL);
   23d46:	b1bd      	cbz	r5, 23d78 <ble_ll_hci_cmd_proc+0x3c>

    /* Get the opcode from the command buffer */
    opcode = le16toh(cmd->opcode);
   23d48:	462b      	mov	r3, r5
   23d4a:	f833 6b06 	ldrh.w	r6, [r3], #6
    ocf = BLE_HCI_OCF(opcode);
   23d4e:	f3c6 0209 	ubfx	r2, r6, #0, #10
    ogf = BLE_HCI_OGF(opcode);
   23d52:	f3c6 2185 	ubfx	r1, r6, #10, #6
     */
    hci_ev = (struct ble_hci_ev *) cmd;
    rspbuf = hci_ev->data + sizeof(*cmd_complete);

    /* Assume response length is zero */
    rsplen = 0;
   23d56:	2000      	movs	r0, #0
   23d58:	f88d 000f 	strb.w	r0, [sp, #15]

    switch (ogf) {
   23d5c:	2908      	cmp	r1, #8
   23d5e:	d815      	bhi.n	23d8c <ble_ll_hci_cmd_proc+0x50>
   23d60:	b248      	sxtb	r0, r1
   23d62:	2800      	cmp	r0, #0
   23d64:	d06c      	beq.n	23e40 <ble_ll_hci_cmd_proc+0x104>
   23d66:	3901      	subs	r1, #1
   23d68:	2907      	cmp	r1, #7
   23d6a:	d86b      	bhi.n	23e44 <ble_ll_hci_cmd_proc+0x108>
   23d6c:	e8df f001 	tbb	[pc, r1]
   23d70:	4b426a1d 	.word	0x4b426a1d
   23d74:	5d6a6a54 	.word	0x5d6a6a54
    BLE_LL_ASSERT(cmd != NULL);
   23d78:	f7f0 fcbc 	bl	146f4 <hal_debugger_connected>
   23d7c:	b100      	cbz	r0, 23d80 <ble_ll_hci_cmd_proc+0x44>
   23d7e:	be01      	bkpt	0x0001
   23d80:	2300      	movs	r3, #0
   23d82:	461a      	mov	r2, r3
   23d84:	4619      	mov	r1, r3
   23d86:	4618      	mov	r0, r3
   23d88:	f7f4 ffd2 	bl	18d30 <__assert_func>
    switch (ogf) {
   23d8c:	293f      	cmp	r1, #63	; 0x3f
   23d8e:	d108      	bne.n	23da2 <ble_ll_hci_cmd_proc+0x66>
    case BLE_HCI_OGF_LE:
        rc = ble_ll_hci_le_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen, &post_cb);
        break;
#if MYNEWT_VAL(BLE_LL_HCI_VS)
    case BLE_HCI_OGF_VENDOR:
        rc = ble_ll_hci_vs_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen);
   23d90:	78a9      	ldrb	r1, [r5, #2]
   23d92:	f10d 000f 	add.w	r0, sp, #15
   23d96:	9000      	str	r0, [sp, #0]
   23d98:	1ce8      	adds	r0, r5, #3
   23d9a:	f000 fada 	bl	24352 <ble_ll_hci_vs_cmd_proc>
   23d9e:	4604      	mov	r4, r0
        break;
   23da0:	e008      	b.n	23db4 <ble_ll_hci_cmd_proc+0x78>
    switch (ogf) {
   23da2:	2401      	movs	r4, #1

    /* We always send command status for unknown command
     * ref: Core 5.3, Vol 4, Part E, 4.5
     */
    if (rc == BLE_ERR_UNKNOWN_HCI_CMD) {
        rc += (BLE_ERR_MAX + 1);
   23da4:	f504 7480 	add.w	r4, r4, #256	; 0x100
   23da8:	e006      	b.n	23db8 <ble_ll_hci_cmd_proc+0x7c>
        rc = ble_ll_hci_link_ctrl_cmd_proc(cmd->data, cmd->length, ocf);
   23daa:	78a9      	ldrb	r1, [r5, #2]
   23dac:	1ce8      	adds	r0, r5, #3
   23dae:	f7ff fd03 	bl	237b8 <ble_ll_hci_link_ctrl_cmd_proc>
   23db2:	4604      	mov	r4, r0
    if (rc == BLE_ERR_UNKNOWN_HCI_CMD) {
   23db4:	2c01      	cmp	r4, #1
   23db6:	d0f5      	beq.n	23da4 <ble_ll_hci_cmd_proc+0x68>
    }

    /* If no response is generated, we free the buffers */
    BLE_LL_ASSERT(rc >= 0);
   23db8:	2c00      	cmp	r4, #0
   23dba:	db45      	blt.n	23e48 <ble_ll_hci_cmd_proc+0x10c>
    if (rc <= BLE_ERR_MAX) {
   23dbc:	2cff      	cmp	r4, #255	; 0xff
   23dbe:	dc4d      	bgt.n	23e5c <ble_ll_hci_cmd_proc+0x120>
        /* Create a command complete event with status from command */
        hci_ev->opcode = BLE_HCI_EVCODE_COMMAND_COMPLETE;
   23dc0:	230e      	movs	r3, #14
   23dc2:	702b      	strb	r3, [r5, #0]
        hci_ev->length = sizeof(*cmd_complete) + rsplen;
   23dc4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   23dc8:	3304      	adds	r3, #4
   23dca:	706b      	strb	r3, [r5, #1]

        cmd_complete = (void *) hci_ev->data;
        cmd_complete->num_packets = ble_ll_hci_get_num_cmd_pkts();
   23dcc:	f7ff fc3a 	bl	23644 <ble_ll_hci_get_num_cmd_pkts>
   23dd0:	70a8      	strb	r0, [r5, #2]
        cmd_complete->opcode = htole16(opcode);
   23dd2:	f8a5 6003 	strh.w	r6, [r5, #3]
        cmd_complete->status = (uint8_t) rc;
   23dd6:	716c      	strb	r4, [r5, #5]
        cmd_status->num_packets = ble_ll_hci_get_num_cmd_pkts();
        cmd_status->opcode = htole16(opcode);
    }

    /* Count commands and those in error */
    if (rc) {
   23dd8:	2c00      	cmp	r4, #0
   23dda:	d04b      	beq.n	23e74 <ble_ll_hci_cmd_proc+0x138>
        STATS_INC(ble_ll_stats, hci_cmd_errs);
   23ddc:	4a28      	ldr	r2, [pc, #160]	; (23e80 <ble_ll_hci_cmd_proc+0x144>)
   23dde:	6913      	ldr	r3, [r2, #16]
   23de0:	3301      	adds	r3, #1
   23de2:	6113      	str	r3, [r2, #16]
    } else {
        STATS_INC(ble_ll_stats, hci_cmds);
    }

    /* Send the event (events cannot be masked) */
    ble_ll_hci_event_send(hci_ev);
   23de4:	4628      	mov	r0, r5
   23de6:	f7ff ff91 	bl	23d0c <ble_ll_hci_event_send>

    /* Call post callback if set by command handler */
    if (post_cb) {
   23dea:	9b02      	ldr	r3, [sp, #8]
   23dec:	b103      	cbz	r3, 23df0 <ble_ll_hci_cmd_proc+0xb4>
        post_cb();
   23dee:	4798      	blx	r3
    }

    BLE_LL_DEBUG_GPIO(HCI_CMD, 0);
}
   23df0:	b004      	add	sp, #16
   23df2:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_ll_hci_ctlr_bb_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen);
   23df4:	78a9      	ldrb	r1, [r5, #2]
   23df6:	f10d 000f 	add.w	r0, sp, #15
   23dfa:	9000      	str	r0, [sp, #0]
   23dfc:	1ce8      	adds	r0, r5, #3
   23dfe:	f7ff fcec 	bl	237da <ble_ll_hci_ctlr_bb_cmd_proc>
   23e02:	4604      	mov	r4, r0
        break;
   23e04:	e7d6      	b.n	23db4 <ble_ll_hci_cmd_proc+0x78>
        rc = ble_ll_hci_info_params_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen);
   23e06:	78a9      	ldrb	r1, [r5, #2]
   23e08:	f10d 000f 	add.w	r0, sp, #15
   23e0c:	9000      	str	r0, [sp, #0]
   23e0e:	1ce8      	adds	r0, r5, #3
   23e10:	f7ff fd30 	bl	23874 <ble_ll_hci_info_params_cmd_proc>
   23e14:	4604      	mov	r4, r0
        break;
   23e16:	e7cd      	b.n	23db4 <ble_ll_hci_cmd_proc+0x78>
        rc = ble_ll_hci_status_params_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen);
   23e18:	78a9      	ldrb	r1, [r5, #2]
   23e1a:	f10d 000f 	add.w	r0, sp, #15
   23e1e:	9000      	str	r0, [sp, #0]
   23e20:	1ce8      	adds	r0, r5, #3
   23e22:	f7ff fd54 	bl	238ce <ble_ll_hci_status_params_cmd_proc>
   23e26:	4604      	mov	r4, r0
        break;
   23e28:	e7c4      	b.n	23db4 <ble_ll_hci_cmd_proc+0x78>
        rc = ble_ll_hci_le_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen, &post_cb);
   23e2a:	78a9      	ldrb	r1, [r5, #2]
   23e2c:	a802      	add	r0, sp, #8
   23e2e:	9001      	str	r0, [sp, #4]
   23e30:	f10d 000f 	add.w	r0, sp, #15
   23e34:	9000      	str	r0, [sp, #0]
   23e36:	1ce8      	adds	r0, r5, #3
   23e38:	f7ff fe06 	bl	23a48 <ble_ll_hci_le_cmd_proc>
   23e3c:	4604      	mov	r4, r0
        break;
   23e3e:	e7b9      	b.n	23db4 <ble_ll_hci_cmd_proc+0x78>
    switch (ogf) {
   23e40:	2401      	movs	r4, #1
   23e42:	e7af      	b.n	23da4 <ble_ll_hci_cmd_proc+0x68>
   23e44:	2401      	movs	r4, #1
   23e46:	e7ad      	b.n	23da4 <ble_ll_hci_cmd_proc+0x68>
    BLE_LL_ASSERT(rc >= 0);
   23e48:	f7f0 fc54 	bl	146f4 <hal_debugger_connected>
   23e4c:	b100      	cbz	r0, 23e50 <ble_ll_hci_cmd_proc+0x114>
   23e4e:	be01      	bkpt	0x0001
   23e50:	2300      	movs	r3, #0
   23e52:	461a      	mov	r2, r3
   23e54:	4619      	mov	r1, r3
   23e56:	4618      	mov	r0, r3
   23e58:	f7f4 ff6a 	bl	18d30 <__assert_func>
        rc -= (BLE_ERR_MAX + 1);
   23e5c:	f5a4 7480 	sub.w	r4, r4, #256	; 0x100
        hci_ev->opcode = BLE_HCI_EVCODE_COMMAND_STATUS;
   23e60:	230f      	movs	r3, #15
   23e62:	702b      	strb	r3, [r5, #0]
        hci_ev->length = sizeof(*cmd_status);
   23e64:	2304      	movs	r3, #4
   23e66:	706b      	strb	r3, [r5, #1]
        cmd_status->status = (uint8_t)rc;
   23e68:	70ac      	strb	r4, [r5, #2]
        cmd_status->num_packets = ble_ll_hci_get_num_cmd_pkts();
   23e6a:	f7ff fbeb 	bl	23644 <ble_ll_hci_get_num_cmd_pkts>
   23e6e:	70e8      	strb	r0, [r5, #3]
        cmd_status->opcode = htole16(opcode);
   23e70:	80ae      	strh	r6, [r5, #4]
   23e72:	e7b1      	b.n	23dd8 <ble_ll_hci_cmd_proc+0x9c>
        STATS_INC(ble_ll_stats, hci_cmds);
   23e74:	4a02      	ldr	r2, [pc, #8]	; (23e80 <ble_ll_hci_cmd_proc+0x144>)
   23e76:	68d3      	ldr	r3, [r2, #12]
   23e78:	3301      	adds	r3, #1
   23e7a:	60d3      	str	r3, [r2, #12]
   23e7c:	e7b2      	b.n	23de4 <ble_ll_hci_cmd_proc+0xa8>
   23e7e:	bf00      	nop
   23e80:	10003fdc 	.word	0x10003fdc

00023e84 <ble_ll_hci_send_noop>:
{
   23e84:	b510      	push	{r4, lr}
    hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   23e86:	2002      	movs	r0, #2
   23e88:	f00e f9b2 	bl	321f0 <ble_hci_trans_buf_alloc>
    if (hci_ev) {
   23e8c:	b168      	cbz	r0, 23eaa <ble_ll_hci_send_noop+0x26>
   23e8e:	4604      	mov	r4, r0
        hci_ev->opcode = BLE_HCI_EVCODE_COMMAND_COMPLETE;
   23e90:	230e      	movs	r3, #14
   23e92:	7003      	strb	r3, [r0, #0]
        hci_ev->length = sizeof(*ev);
   23e94:	2303      	movs	r3, #3
   23e96:	7043      	strb	r3, [r0, #1]
        ev->num_packets = ble_ll_hci_get_num_cmd_pkts();
   23e98:	f7ff fbd4 	bl	23644 <ble_ll_hci_get_num_cmd_pkts>
   23e9c:	70a0      	strb	r0, [r4, #2]
        ev->opcode = BLE_HCI_OPCODE_NOP;
   23e9e:	2300      	movs	r3, #0
   23ea0:	70e3      	strb	r3, [r4, #3]
   23ea2:	7123      	strb	r3, [r4, #4]
        ble_ll_hci_event_send(hci_ev);
   23ea4:	4620      	mov	r0, r4
   23ea6:	f7ff ff31 	bl	23d0c <ble_ll_hci_event_send>
}
   23eaa:	bd10      	pop	{r4, pc}

00023eac <ble_ll_hci_is_le_event_enabled>:
    if (g_ble_ll_hci_event_mask & (1ull << (BLE_HCI_EVCODE_LE_META - 1))) {
   23eac:	4b0f      	ldr	r3, [pc, #60]	; (23eec <ble_ll_hci_is_le_event_enabled+0x40>)
   23eae:	6859      	ldr	r1, [r3, #4]
   23eb0:	2200      	movs	r2, #0
   23eb2:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   23eb6:	4313      	orrs	r3, r2
   23eb8:	d101      	bne.n	23ebe <ble_ll_hci_is_le_event_enabled+0x12>
    return false;
   23eba:	2000      	movs	r0, #0
}
   23ebc:	4770      	bx	lr
        return g_ble_ll_hci_le_event_mask & (1ull << (subev - 1));
   23ebe:	1e41      	subs	r1, r0, #1
   23ec0:	2201      	movs	r2, #1
   23ec2:	f1a0 0321 	sub.w	r3, r0, #33	; 0x21
   23ec6:	f1c0 0021 	rsb	r0, r0, #33	; 0x21
   23eca:	fa02 f303 	lsl.w	r3, r2, r3
   23ece:	fa22 f000 	lsr.w	r0, r2, r0
   23ed2:	4318      	orrs	r0, r3
   23ed4:	408a      	lsls	r2, r1
   23ed6:	4b06      	ldr	r3, [pc, #24]	; (23ef0 <ble_ll_hci_is_le_event_enabled+0x44>)
   23ed8:	6819      	ldr	r1, [r3, #0]
   23eda:	685b      	ldr	r3, [r3, #4]
   23edc:	400a      	ands	r2, r1
   23ede:	4018      	ands	r0, r3
   23ee0:	ea52 0300 	orrs.w	r3, r2, r0
   23ee4:	bf14      	ite	ne
   23ee6:	2001      	movne	r0, #1
   23ee8:	2000      	moveq	r0, #0
   23eea:	4770      	bx	lr
   23eec:	10004648 	.word	0x10004648
   23ef0:	10004658 	.word	0x10004658

00023ef4 <ble_ll_hci_is_event_enabled>:
    if (evcode >= 64) {
   23ef4:	283f      	cmp	r0, #63	; 0x3f
   23ef6:	d816      	bhi.n	23f26 <ble_ll_hci_is_event_enabled+0x32>
    return g_ble_ll_hci_event_mask & (1ull << (evcode - 1));
   23ef8:	1e41      	subs	r1, r0, #1
   23efa:	2201      	movs	r2, #1
   23efc:	f1a0 0321 	sub.w	r3, r0, #33	; 0x21
   23f00:	f1c0 0021 	rsb	r0, r0, #33	; 0x21
   23f04:	fa02 f303 	lsl.w	r3, r2, r3
   23f08:	fa22 f000 	lsr.w	r0, r2, r0
   23f0c:	4318      	orrs	r0, r3
   23f0e:	408a      	lsls	r2, r1
   23f10:	4b11      	ldr	r3, [pc, #68]	; (23f58 <ble_ll_hci_is_event_enabled+0x64>)
   23f12:	6819      	ldr	r1, [r3, #0]
   23f14:	685b      	ldr	r3, [r3, #4]
   23f16:	400a      	ands	r2, r1
   23f18:	4018      	ands	r0, r3
   23f1a:	ea52 0300 	orrs.w	r3, r2, r0
   23f1e:	bf14      	ite	ne
   23f20:	2001      	movne	r0, #1
   23f22:	2000      	moveq	r0, #0
}
   23f24:	4770      	bx	lr
        return g_ble_ll_hci_event_mask2 & (1ull << (evcode - 64));
   23f26:	f1a0 0140 	sub.w	r1, r0, #64	; 0x40
   23f2a:	2201      	movs	r2, #1
   23f2c:	f1a0 0360 	sub.w	r3, r0, #96	; 0x60
   23f30:	f1c0 0060 	rsb	r0, r0, #96	; 0x60
   23f34:	fa02 f303 	lsl.w	r3, r2, r3
   23f38:	fa22 f000 	lsr.w	r0, r2, r0
   23f3c:	4318      	orrs	r0, r3
   23f3e:	408a      	lsls	r2, r1
   23f40:	4b06      	ldr	r3, [pc, #24]	; (23f5c <ble_ll_hci_is_event_enabled+0x68>)
   23f42:	6819      	ldr	r1, [r3, #0]
   23f44:	685b      	ldr	r3, [r3, #4]
   23f46:	400a      	ands	r2, r1
   23f48:	4018      	ands	r0, r3
   23f4a:	ea52 0300 	orrs.w	r3, r2, r0
   23f4e:	bf14      	ite	ne
   23f50:	2001      	movne	r0, #1
   23f52:	2000      	moveq	r0, #0
   23f54:	4770      	bx	lr
   23f56:	bf00      	nop
   23f58:	10004648 	.word	0x10004648
   23f5c:	10004650 	.word	0x10004650

00023f60 <ble_ll_hci_cmd_rx>:
 * @return                      0 on success;
 *                              BLE_ERR_MEM_CAPACITY on HCI buffer exhaustion.
 */
int
ble_ll_hci_cmd_rx(uint8_t *cmdbuf, void *arg)
{
   23f60:	b508      	push	{r3, lr}
    return ev->ev.ev_queued;
   23f62:	4b0c      	ldr	r3, [pc, #48]	; (23f94 <ble_ll_hci_cmd_rx+0x34>)
   23f64:	781b      	ldrb	r3, [r3, #0]
    }
#endif

    /* Get an event structure off the queue */
    ev = &g_ble_ll_hci_cmd_ev;
    if (ble_npl_event_is_queued(ev)) {
   23f66:	b99b      	cbnz	r3, 23f90 <ble_ll_hci_cmd_rx+0x30>
    assert(ev->ev.ev_queued == 0);
   23f68:	4b0a      	ldr	r3, [pc, #40]	; (23f94 <ble_ll_hci_cmd_rx+0x34>)
   23f6a:	781b      	ldrb	r3, [r3, #0]
   23f6c:	b933      	cbnz	r3, 23f7c <ble_ll_hci_cmd_rx+0x1c>
    ev->ev.ev_arg = arg;
   23f6e:	4909      	ldr	r1, [pc, #36]	; (23f94 <ble_ll_hci_cmd_rx+0x34>)
   23f70:	6088      	str	r0, [r1, #8]
    os_eventq_put(&evq->evq, &ev->ev);
   23f72:	4809      	ldr	r0, [pc, #36]	; (23f98 <ble_ll_hci_cmd_rx+0x38>)
   23f74:	f7f5 fa2f 	bl	193d6 <os_eventq_put>

    /* Fill out the event and post to Link Layer */
    ble_npl_event_set_arg(ev, cmdbuf);
    ble_npl_eventq_put(&g_ble_ll_data.ll_evq, ev);

    return 0;
   23f78:	2000      	movs	r0, #0
}
   23f7a:	bd08      	pop	{r3, pc}
    assert(ev->ev.ev_queued == 0);
   23f7c:	f7f0 fbba 	bl	146f4 <hal_debugger_connected>
   23f80:	b100      	cbz	r0, 23f84 <ble_ll_hci_cmd_rx+0x24>
   23f82:	be01      	bkpt	0x0001
   23f84:	2300      	movs	r3, #0
   23f86:	461a      	mov	r2, r3
   23f88:	4619      	mov	r1, r3
   23f8a:	4618      	mov	r0, r3
   23f8c:	f7f4 fed0 	bl	18d30 <__assert_func>
        return BLE_ERR_MEM_CAPACITY;
   23f90:	2007      	movs	r0, #7
   23f92:	e7f2      	b.n	23f7a <ble_ll_hci_cmd_rx+0x1a>
   23f94:	10004634 	.word	0x10004634
   23f98:	100040f8 	.word	0x100040f8

00023f9c <ble_ll_hci_acl_rx>:

/* Send ACL data from host to contoller */
int
ble_ll_hci_acl_rx(struct os_mbuf *om, void *arg)
{
   23f9c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL) || MYNEWT_VAL(BLE_LL_ROLE_CENTRAL)
    ble_ll_acl_data_in(om);
   23f9e:	f7fa fee7 	bl	1ed70 <ble_ll_acl_data_in>
#else
    /* host should never send ACL in that case but if it does just ignore it */
    os_mbuf_free_chain(om);
#endif
    return 0;
}
   23fa2:	2000      	movs	r0, #0
   23fa4:	bd08      	pop	{r3, pc}
	...

00023fa8 <ble_ll_hci_init>:
    memset(ev, 0, sizeof(*ev));
   23fa8:	4a0e      	ldr	r2, [pc, #56]	; (23fe4 <ble_ll_hci_init+0x3c>)
   23faa:	2300      	movs	r3, #0
   23fac:	6013      	str	r3, [r2, #0]
   23fae:	6093      	str	r3, [r2, #8]
   23fb0:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   23fb2:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   23fb4:	490c      	ldr	r1, [pc, #48]	; (23fe8 <ble_ll_hci_init+0x40>)
   23fb6:	6051      	str	r1, [r2, #4]

    /* Set event callback for command processing */
    ble_npl_event_init(&g_ble_ll_hci_cmd_ev, ble_ll_hci_cmd_proc, NULL);

    /* Set defaults for LE events: Vol 2 Part E 7.8.1 */
    g_ble_ll_hci_le_event_mask = 0x1f;
   23fb8:	4a0c      	ldr	r2, [pc, #48]	; (23fec <ble_ll_hci_init+0x44>)
   23fba:	201f      	movs	r0, #31
   23fbc:	2100      	movs	r1, #0
   23fbe:	e9c2 0100 	strd	r0, r1, [r2]

    /* Set defaults for controller/baseband events: Vol 2 Part E 7.3.1 */
    g_ble_ll_hci_event_mask = 0x1fffffffffff;
   23fc2:	4a0b      	ldr	r2, [pc, #44]	; (23ff0 <ble_ll_hci_init+0x48>)
   23fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23fc8:	f641 71ff 	movw	r1, #8191	; 0x1fff
   23fcc:	e9c2 0100 	strd	r0, r1, [r2]


    /* Set page 2 to 0 */
    g_ble_ll_hci_event_mask2 = 0;
   23fd0:	4a08      	ldr	r2, [pc, #32]	; (23ff4 <ble_ll_hci_init+0x4c>)
   23fd2:	2000      	movs	r0, #0
   23fd4:	2100      	movs	r1, #0
   23fd6:	e9c2 0100 	strd	r0, r1, [r2]

    /* reset RF path compensation values */
    rx_path_pwr_compensation = 0;
   23fda:	4a07      	ldr	r2, [pc, #28]	; (23ff8 <ble_ll_hci_init+0x50>)
   23fdc:	8013      	strh	r3, [r2, #0]
    tx_path_pwr_compensation = 0;
   23fde:	4a07      	ldr	r2, [pc, #28]	; (23ffc <ble_ll_hci_init+0x54>)
   23fe0:	8013      	strh	r3, [r2, #0]

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_EXT_ADV)
    /* after reset both legacy and extended advertising commands are allowed */
    hci_adv_mode = ADV_MODE_ANY;
#endif
}
   23fe2:	4770      	bx	lr
   23fe4:	10004634 	.word	0x10004634
   23fe8:	00023d3d 	.word	0x00023d3d
   23fec:	10004658 	.word	0x10004658
   23ff0:	10004648 	.word	0x10004648
   23ff4:	10004650 	.word	0x10004650
   23ff8:	10004660 	.word	0x10004660
   23ffc:	10004662 	.word	0x10004662

00024000 <ble_ll_hci_ev_datalen_chg>:
 *
 * @param connsm Pointer to connection state machine
 */
void
ble_ll_hci_ev_datalen_chg(struct ble_ll_conn_sm *connsm)
{
   24000:	b510      	push	{r4, lr}
   24002:	4604      	mov	r4, r0
    struct ble_hci_ev_le_subev_data_len_chg *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_DATA_LEN_CHG)) {
   24004:	2007      	movs	r0, #7
   24006:	f7ff ff51 	bl	23eac <ble_ll_hci_is_le_event_enabled>
   2400a:	b900      	cbnz	r0, 2400e <ble_ll_hci_ev_datalen_chg+0xe>
            ev->max_rx_time = htole16(connsm->eff_max_rx_time);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   2400c:	bd10      	pop	{r4, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   2400e:	2002      	movs	r0, #2
   24010:	f00e f8ee 	bl	321f0 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   24014:	2800      	cmp	r0, #0
   24016:	d0f9      	beq.n	2400c <ble_ll_hci_ev_datalen_chg+0xc>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   24018:	223e      	movs	r2, #62	; 0x3e
   2401a:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   2401c:	220b      	movs	r2, #11
   2401e:	7042      	strb	r2, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_DATA_LEN_CHG;
   24020:	2207      	movs	r2, #7
   24022:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   24024:	88a2      	ldrh	r2, [r4, #4]
   24026:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->max_tx_octets = htole16(connsm->eff_max_tx_octets);
   2402a:	7b62      	ldrb	r2, [r4, #13]
   2402c:	f8a0 2005 	strh.w	r2, [r0, #5]
            ev->max_tx_time = htole16(connsm->eff_max_tx_time);
   24030:	8b22      	ldrh	r2, [r4, #24]
   24032:	f8a0 2007 	strh.w	r2, [r0, #7]
            ev->max_rx_octets = htole16(connsm->eff_max_rx_octets);
   24036:	7ba2      	ldrb	r2, [r4, #14]
   24038:	f8a0 2009 	strh.w	r2, [r0, #9]
            ev->max_rx_time = htole16(connsm->eff_max_rx_time);
   2403c:	8b62      	ldrh	r2, [r4, #26]
   2403e:	f8a0 200b 	strh.w	r2, [r0, #11]
            ble_ll_hci_event_send(hci_ev);
   24042:	f7ff fe63 	bl	23d0c <ble_ll_hci_event_send>
}
   24046:	e7e1      	b.n	2400c <ble_ll_hci_ev_datalen_chg+0xc>

00024048 <ble_ll_hci_ev_rem_conn_parm_req>:
 * @param connsm Pointer to connection state machine
 */
void
ble_ll_hci_ev_rem_conn_parm_req(struct ble_ll_conn_sm *connsm,
                                struct ble_ll_conn_params *cp)
{
   24048:	b538      	push	{r3, r4, r5, lr}
   2404a:	4605      	mov	r5, r0
   2404c:	460c      	mov	r4, r1
    struct ble_hci_ev_le_subev_rem_conn_param_req *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_REM_CONN_PARM_REQ)) {
   2404e:	2006      	movs	r0, #6
   24050:	f7ff ff2c 	bl	23eac <ble_ll_hci_is_le_event_enabled>
   24054:	b900      	cbnz	r0, 24058 <ble_ll_hci_ev_rem_conn_parm_req+0x10>
            ev->timeout = htole16(cp->timeout);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   24056:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   24058:	2002      	movs	r0, #2
   2405a:	f00e f8c9 	bl	321f0 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   2405e:	2800      	cmp	r0, #0
   24060:	d0f9      	beq.n	24056 <ble_ll_hci_ev_rem_conn_parm_req+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   24062:	223e      	movs	r2, #62	; 0x3e
   24064:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   24066:	220b      	movs	r2, #11
   24068:	7042      	strb	r2, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_REM_CONN_PARM_REQ;
   2406a:	2206      	movs	r2, #6
   2406c:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   2406e:	88aa      	ldrh	r2, [r5, #4]
   24070:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->min_interval = htole16(cp->interval_min);
   24074:	8822      	ldrh	r2, [r4, #0]
   24076:	f8a0 2005 	strh.w	r2, [r0, #5]
            ev->max_interval = htole16(cp->interval_max);
   2407a:	8862      	ldrh	r2, [r4, #2]
   2407c:	f8a0 2007 	strh.w	r2, [r0, #7]
            ev->latency = htole16(cp->latency);
   24080:	88a2      	ldrh	r2, [r4, #4]
   24082:	f8a0 2009 	strh.w	r2, [r0, #9]
            ev->timeout = htole16(cp->timeout);
   24086:	88e2      	ldrh	r2, [r4, #6]
   24088:	f8a0 200b 	strh.w	r2, [r0, #11]
            ble_ll_hci_event_send(hci_ev);
   2408c:	f7ff fe3e 	bl	23d0c <ble_ll_hci_event_send>
}
   24090:	e7e1      	b.n	24056 <ble_ll_hci_ev_rem_conn_parm_req+0xe>

00024092 <ble_ll_hci_ev_conn_update>:
 * @param connsm Pointer to connection state machine
 * @param status The error code.
 */
void
ble_ll_hci_ev_conn_update(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   24092:	b538      	push	{r3, r4, r5, lr}
   24094:	4605      	mov	r5, r0
   24096:	460c      	mov	r4, r1
    struct ble_hci_ev_le_subev_conn_upd_complete *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_CONN_UPD_COMPLETE)) {
   24098:	2003      	movs	r0, #3
   2409a:	f7ff ff07 	bl	23eac <ble_ll_hci_is_le_event_enabled>
   2409e:	b900      	cbnz	r0, 240a2 <ble_ll_hci_ev_conn_update+0x10>
            ev->supervision_timeout = htole16(connsm->supervision_tmo);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   240a0:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   240a2:	2002      	movs	r0, #2
   240a4:	f00e f8a4 	bl	321f0 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   240a8:	2800      	cmp	r0, #0
   240aa:	d0f9      	beq.n	240a0 <ble_ll_hci_ev_conn_update+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   240ac:	223e      	movs	r2, #62	; 0x3e
   240ae:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   240b0:	220a      	movs	r2, #10
   240b2:	7042      	strb	r2, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_CONN_UPD_COMPLETE;
   240b4:	2203      	movs	r2, #3
   240b6:	7082      	strb	r2, [r0, #2]
            ev->status = status;
   240b8:	70c4      	strb	r4, [r0, #3]
            ev->conn_handle = htole16(connsm->conn_handle);
   240ba:	88aa      	ldrh	r2, [r5, #4]
   240bc:	8082      	strh	r2, [r0, #4]
            ev->conn_itvl = htole16(connsm->conn_itvl);
   240be:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
   240c2:	80c2      	strh	r2, [r0, #6]
            ev->conn_latency = htole16(connsm->periph_latency);
   240c4:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
   240c8:	8102      	strh	r2, [r0, #8]
            ev->supervision_timeout = htole16(connsm->supervision_tmo);
   240ca:	f8b5 2068 	ldrh.w	r2, [r5, #104]	; 0x68
   240ce:	8142      	strh	r2, [r0, #10]
            ble_ll_hci_event_send(hci_ev);
   240d0:	f7ff fe1c 	bl	23d0c <ble_ll_hci_event_send>
}
   240d4:	e7e4      	b.n	240a0 <ble_ll_hci_ev_conn_update+0xe>

000240d6 <ble_ll_hci_ev_encrypt_chg>:

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
void
ble_ll_hci_ev_encrypt_chg(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   240d6:	b538      	push	{r3, r4, r5, lr}
   240d8:	4604      	mov	r4, r0
   240da:	460d      	mov	r5, r1
    struct ble_hci_ev_enc_key_refresh *ev_key_refresh;
    struct ble_hci_ev_enrypt_chg *ev_enc_chf;
    struct ble_hci_ev *hci_ev;

    if (CONN_F_ENC_CHANGE_SENT(connsm) == 0) {
   240dc:	7883      	ldrb	r3, [r0, #2]
   240de:	f013 0f04 	tst.w	r3, #4
   240e2:	d004      	beq.n	240ee <ble_ll_hci_ev_encrypt_chg+0x18>

        CONN_F_ENC_CHANGE_SENT(connsm) = 1;
        return;
    }

    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_ENC_KEY_REFRESH)) {
   240e4:	2030      	movs	r0, #48	; 0x30
   240e6:	f7ff ff05 	bl	23ef4 <ble_ll_hci_is_event_enabled>
   240ea:	b9e8      	cbnz	r0, 24128 <ble_ll_hci_ev_encrypt_chg+0x52>
            ev_key_refresh->conn_handle = htole16(connsm->conn_handle);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   240ec:	bd38      	pop	{r3, r4, r5, pc}
        if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_ENCRYPT_CHG)) {
   240ee:	2008      	movs	r0, #8
   240f0:	f7ff ff00 	bl	23ef4 <ble_ll_hci_is_event_enabled>
   240f4:	b920      	cbnz	r0, 24100 <ble_ll_hci_ev_encrypt_chg+0x2a>
        CONN_F_ENC_CHANGE_SENT(connsm) = 1;
   240f6:	78a3      	ldrb	r3, [r4, #2]
   240f8:	f043 0304 	orr.w	r3, r3, #4
   240fc:	70a3      	strb	r3, [r4, #2]
        return;
   240fe:	e7f5      	b.n	240ec <ble_ll_hci_ev_encrypt_chg+0x16>
            hci_ev = (void *)ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   24100:	2002      	movs	r0, #2
   24102:	f00e f875 	bl	321f0 <ble_hci_trans_buf_alloc>
            if (hci_ev) {
   24106:	2800      	cmp	r0, #0
   24108:	d0f5      	beq.n	240f6 <ble_ll_hci_ev_encrypt_chg+0x20>
                hci_ev->opcode = BLE_HCI_EVCODE_ENCRYPT_CHG;
   2410a:	2208      	movs	r2, #8
   2410c:	7002      	strb	r2, [r0, #0]
                hci_ev->length = sizeof(*ev_enc_chf);
   2410e:	2204      	movs	r2, #4
   24110:	7042      	strb	r2, [r0, #1]
                ev_enc_chf->status = status;
   24112:	7085      	strb	r5, [r0, #2]
                ev_enc_chf->connection_handle = htole16(connsm->conn_handle);
   24114:	88a2      	ldrh	r2, [r4, #4]
   24116:	f8a0 2003 	strh.w	r2, [r0, #3]
                ev_enc_chf->enabled = (status == BLE_ERR_SUCCESS) ? 0x01 : 0x00;
   2411a:	fab5 f185 	clz	r1, r5
   2411e:	0949      	lsrs	r1, r1, #5
   24120:	7141      	strb	r1, [r0, #5]
                ble_ll_hci_event_send(hci_ev);
   24122:	f7ff fdf3 	bl	23d0c <ble_ll_hci_event_send>
   24126:	e7e6      	b.n	240f6 <ble_ll_hci_ev_encrypt_chg+0x20>
        hci_ev = (void *)ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   24128:	2002      	movs	r0, #2
   2412a:	f00e f861 	bl	321f0 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   2412e:	2800      	cmp	r0, #0
   24130:	d0dc      	beq.n	240ec <ble_ll_hci_ev_encrypt_chg+0x16>
            hci_ev->opcode = BLE_HCI_EVCODE_ENC_KEY_REFRESH;
   24132:	2230      	movs	r2, #48	; 0x30
   24134:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev_key_refresh);
   24136:	2203      	movs	r2, #3
   24138:	7042      	strb	r2, [r0, #1]
            ev_key_refresh->status = status;
   2413a:	7085      	strb	r5, [r0, #2]
            ev_key_refresh->conn_handle = htole16(connsm->conn_handle);
   2413c:	88a2      	ldrh	r2, [r4, #4]
   2413e:	f8a0 2003 	strh.w	r2, [r0, #3]
            ble_ll_hci_event_send(hci_ev);
   24142:	f7ff fde3 	bl	23d0c <ble_ll_hci_event_send>
   24146:	e7d1      	b.n	240ec <ble_ll_hci_ev_encrypt_chg+0x16>

00024148 <ble_ll_hci_ev_ltk_req>:
 *
 * @param connsm Pointer to connection state machine
 */
int
ble_ll_hci_ev_ltk_req(struct ble_ll_conn_sm *connsm)
{
   24148:	b510      	push	{r4, lr}
   2414a:	4604      	mov	r4, r0
    struct ble_hci_ev_le_subev_lt_key_req *ev;
    struct ble_hci_ev *hci_ev;
    int rc;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_LT_KEY_REQ)) {
   2414c:	2005      	movs	r0, #5
   2414e:	f7ff fead 	bl	23eac <ble_ll_hci_is_le_event_enabled>
   24152:	b1e0      	cbz	r0, 2418e <ble_ll_hci_ev_ltk_req+0x46>
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   24154:	2002      	movs	r0, #2
   24156:	f00e f84b 	bl	321f0 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   2415a:	b1d8      	cbz	r0, 24194 <ble_ll_hci_ev_ltk_req+0x4c>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   2415c:	223e      	movs	r2, #62	; 0x3e
   2415e:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   24160:	220d      	movs	r2, #13
   24162:	7042      	strb	r2, [r0, #1]
            ev = (void *) hci_ev->data;

            ev->subev_code = BLE_HCI_LE_SUBEV_LT_KEY_REQ;
   24164:	2205      	movs	r2, #5
   24166:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   24168:	88a2      	ldrh	r2, [r4, #4]
   2416a:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->rand = htole64(connsm->enc_data.host_rand_num);
   2416e:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
   24172:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
   24176:	f8c0 1005 	str.w	r1, [r0, #5]
   2417a:	f8c0 2009 	str.w	r2, [r0, #9]
            ev->div = htole16(connsm->enc_data.enc_div);
   2417e:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
   24182:	f8a0 200d 	strh.w	r2, [r0, #13]

            ble_ll_hci_event_send(hci_ev);
   24186:	f7ff fdc1 	bl	23d0c <ble_ll_hci_event_send>
        }
        rc = 0;
   2418a:	2000      	movs	r0, #0
    if (rc == 0) {
        bletest_ltk_req_reply(connsm->conn_handle);
    }
#endif
    return rc;
}
   2418c:	bd10      	pop	{r4, pc}
        rc = -1;
   2418e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24192:	e7fb      	b.n	2418c <ble_ll_hci_ev_ltk_req+0x44>
        rc = 0;
   24194:	2000      	movs	r0, #0
    return rc;
   24196:	e7f9      	b.n	2418c <ble_ll_hci_ev_ltk_req+0x44>

00024198 <ble_ll_hci_ev_rd_rem_used_feat>:
#endif

void
ble_ll_hci_ev_rd_rem_used_feat(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   24198:	b538      	push	{r3, r4, r5, lr}
   2419a:	4605      	mov	r5, r0
   2419c:	460c      	mov	r4, r1
    struct ble_hci_ev_le_subev_rd_rem_used_feat *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_RD_REM_USED_FEAT)) {
   2419e:	2004      	movs	r0, #4
   241a0:	f7ff fe84 	bl	23eac <ble_ll_hci_is_le_event_enabled>
   241a4:	b900      	cbnz	r0, 241a8 <ble_ll_hci_ev_rd_rem_used_feat+0x10>
            memcpy(ev->features + 1, connsm->remote_features, 7);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   241a6:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   241a8:	2002      	movs	r0, #2
   241aa:	f00e f821 	bl	321f0 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   241ae:	2800      	cmp	r0, #0
   241b0:	d0f9      	beq.n	241a6 <ble_ll_hci_ev_rd_rem_used_feat+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   241b2:	233e      	movs	r3, #62	; 0x3e
   241b4:	7003      	strb	r3, [r0, #0]
            hci_ev->length = sizeof(*ev);
   241b6:	230c      	movs	r3, #12
   241b8:	7043      	strb	r3, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_RD_REM_USED_FEAT;
   241ba:	2304      	movs	r3, #4
   241bc:	7083      	strb	r3, [r0, #2]
            ev->status = status;
   241be:	70c4      	strb	r4, [r0, #3]
            ev->conn_handle = htole16(connsm->conn_handle);
   241c0:	88ab      	ldrh	r3, [r5, #4]
   241c2:	8083      	strh	r3, [r0, #4]
            ev->features[0] = connsm->conn_features;
   241c4:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   241c8:	7183      	strb	r3, [r0, #6]
            memcpy(ev->features + 1, connsm->remote_features, 7);
   241ca:	462b      	mov	r3, r5
   241cc:	f853 1f3c 	ldr.w	r1, [r3, #60]!
   241d0:	f8c0 1007 	str.w	r1, [r0, #7]
   241d4:	8899      	ldrh	r1, [r3, #4]
   241d6:	799b      	ldrb	r3, [r3, #6]
   241d8:	f8a0 100b 	strh.w	r1, [r0, #11]
   241dc:	7343      	strb	r3, [r0, #13]
            ble_ll_hci_event_send(hci_ev);
   241de:	f7ff fd95 	bl	23d0c <ble_ll_hci_event_send>
}
   241e2:	e7e0      	b.n	241a6 <ble_ll_hci_ev_rd_rem_used_feat+0xe>

000241e4 <ble_ll_hci_ev_rd_rem_ver>:

void
ble_ll_hci_ev_rd_rem_ver(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   241e4:	b538      	push	{r3, r4, r5, lr}
   241e6:	4605      	mov	r5, r0
   241e8:	460c      	mov	r4, r1
    struct ble_hci_ev_rd_rem_ver_info_cmp *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_RD_REM_VER_INFO_CMP)) {
   241ea:	200c      	movs	r0, #12
   241ec:	f7ff fe82 	bl	23ef4 <ble_ll_hci_is_event_enabled>
   241f0:	b900      	cbnz	r0, 241f4 <ble_ll_hci_ev_rd_rem_ver+0x10>
            ev->subversion = htole16(connsm->sub_vers_nr);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   241f2:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   241f4:	2002      	movs	r0, #2
   241f6:	f00d fffb 	bl	321f0 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   241fa:	2800      	cmp	r0, #0
   241fc:	d0f9      	beq.n	241f2 <ble_ll_hci_ev_rd_rem_ver+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_RD_REM_VER_INFO_CMP;
   241fe:	220c      	movs	r2, #12
   24200:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   24202:	2208      	movs	r2, #8
   24204:	7042      	strb	r2, [r0, #1]
            ev->status = status;
   24206:	7084      	strb	r4, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   24208:	88aa      	ldrh	r2, [r5, #4]
   2420a:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->version = connsm->vers_nr;
   2420e:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
   24212:	7142      	strb	r2, [r0, #5]
            ev->manufacturer = htole16(connsm->comp_id);
   24214:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
   24218:	80c2      	strh	r2, [r0, #6]
            ev->subversion = htole16(connsm->sub_vers_nr);
   2421a:	f8b5 204c 	ldrh.w	r2, [r5, #76]	; 0x4c
   2421e:	8102      	strh	r2, [r0, #8]
            ble_ll_hci_event_send(hci_ev);
   24220:	f7ff fd74 	bl	23d0c <ble_ll_hci_event_send>
}
   24224:	e7e5      	b.n	241f2 <ble_ll_hci_ev_rd_rem_ver+0xe>

00024226 <ble_ll_hci_ev_hw_err>:
 *
 * @return int 0: event masked or event sent, -1 otherwise
 */
int
ble_ll_hci_ev_hw_err(uint8_t hw_err)
{
   24226:	b510      	push	{r4, lr}
   24228:	4604      	mov	r4, r0
    struct ble_hci_ev_hw_error *ev;
    struct ble_hci_ev *hci_ev;
    int rc;

    rc = 0;
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_HW_ERROR)) {
   2422a:	2010      	movs	r0, #16
   2422c:	f7ff fe62 	bl	23ef4 <ble_ll_hci_is_event_enabled>
   24230:	b908      	cbnz	r0, 24236 <ble_ll_hci_ev_hw_err+0x10>
    rc = 0;
   24232:	2000      	movs	r0, #0
        } else {
            rc = -1;
        }
    }
    return rc;
}
   24234:	bd10      	pop	{r4, pc}
        hci_ev = (void *)ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   24236:	2002      	movs	r0, #2
   24238:	f00d ffda 	bl	321f0 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   2423c:	b140      	cbz	r0, 24250 <ble_ll_hci_ev_hw_err+0x2a>
            hci_ev->opcode = BLE_HCI_EVCODE_HW_ERROR;
   2423e:	2210      	movs	r2, #16
   24240:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   24242:	2201      	movs	r2, #1
   24244:	7042      	strb	r2, [r0, #1]
            ev->hw_code = hw_err;
   24246:	7084      	strb	r4, [r0, #2]
            ble_ll_hci_event_send(hci_ev);
   24248:	f7ff fd60 	bl	23d0c <ble_ll_hci_event_send>
    rc = 0;
   2424c:	2000      	movs	r0, #0
   2424e:	e7f1      	b.n	24234 <ble_ll_hci_ev_hw_err+0xe>
            rc = -1;
   24250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
   24254:	e7ee      	b.n	24234 <ble_ll_hci_ev_hw_err+0xe>

00024256 <ble_ll_hci_ev_databuf_overflow>:

void
ble_ll_hci_ev_databuf_overflow(void)
{
   24256:	b508      	push	{r3, lr}
    struct ble_hci_ev_data_buf_overflow *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_DATA_BUF_OVERFLOW)) {
   24258:	201a      	movs	r0, #26
   2425a:	f7ff fe4b 	bl	23ef4 <ble_ll_hci_is_event_enabled>
   2425e:	b900      	cbnz	r0, 24262 <ble_ll_hci_ev_databuf_overflow+0xc>
            ev->link_type = BLE_HCI_EVENT_ACL_BUF_OVERFLOW;

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   24260:	bd08      	pop	{r3, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   24262:	2002      	movs	r0, #2
   24264:	f00d ffc4 	bl	321f0 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   24268:	2800      	cmp	r0, #0
   2426a:	d0f9      	beq.n	24260 <ble_ll_hci_ev_databuf_overflow+0xa>
            hci_ev->opcode = BLE_HCI_EVCODE_DATA_BUF_OVERFLOW;
   2426c:	221a      	movs	r2, #26
   2426e:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   24270:	2201      	movs	r2, #1
   24272:	7042      	strb	r2, [r0, #1]
            ev->link_type = BLE_HCI_EVENT_ACL_BUF_OVERFLOW;
   24274:	7082      	strb	r2, [r0, #2]
            ble_ll_hci_event_send(hci_ev);
   24276:	f7ff fd49 	bl	23d0c <ble_ll_hci_event_send>
}
   2427a:	e7f1      	b.n	24260 <ble_ll_hci_ev_databuf_overflow+0xa>

0002427c <ble_ll_hci_vs_find_by_ocf>:
            ble_ll_hci_vs_set_tx_power),
};

static struct ble_ll_hci_vs_cmd *
ble_ll_hci_vs_find_by_ocf(uint16_t ocf)
{
   2427c:	4602      	mov	r2, r0
    struct ble_ll_hci_vs_cmd *entry;

    entry = SLIST_FIRST(&g_ble_ll_hci_vs_list);
   2427e:	4b04      	ldr	r3, [pc, #16]	; (24290 <ble_ll_hci_vs_find_by_ocf+0x14>)
   24280:	6818      	ldr	r0, [r3, #0]
    while (entry) {
   24282:	b120      	cbz	r0, 2428e <ble_ll_hci_vs_find_by_ocf+0x12>
        if (entry->ocf == ocf) {
   24284:	8803      	ldrh	r3, [r0, #0]
   24286:	4293      	cmp	r3, r2
   24288:	d001      	beq.n	2428e <ble_ll_hci_vs_find_by_ocf+0x12>
            return entry;
        }

        entry = SLIST_NEXT(entry, link);
   2428a:	6880      	ldr	r0, [r0, #8]
   2428c:	e7f9      	b.n	24282 <ble_ll_hci_vs_find_by_ocf+0x6>
    }

    return NULL;
}
   2428e:	4770      	bx	lr
   24290:	10004664 	.word	0x10004664

00024294 <ble_ll_hci_vs_is_controller_busy>:
{
   24294:	b508      	push	{r3, lr}
    if (ble_ll_adv_enabled()) {
   24296:	f7fb fdf5 	bl	1fe84 <ble_ll_adv_enabled>
   2429a:	b108      	cbz	r0, 242a0 <ble_ll_hci_vs_is_controller_busy+0xc>
        return 1;
   2429c:	2001      	movs	r0, #1
}
   2429e:	bd08      	pop	{r3, pc}
    if (ble_ll_scan_enabled()) {
   242a0:	f001 fab6 	bl	25810 <ble_ll_scan_enabled>
   242a4:	b988      	cbnz	r0, 242ca <ble_ll_hci_vs_is_controller_busy+0x36>
    if (g_ble_ll_conn_create_sm.connsm) {
   242a6:	4b0a      	ldr	r3, [pc, #40]	; (242d0 <ble_ll_hci_vs_is_controller_busy+0x3c>)
   242a8:	681b      	ldr	r3, [r3, #0]
   242aa:	b10b      	cbz	r3, 242b0 <ble_ll_hci_vs_is_controller_busy+0x1c>
        return 1;
   242ac:	2001      	movs	r0, #1
   242ae:	e7f6      	b.n	2429e <ble_ll_hci_vs_is_controller_busy+0xa>
    STAILQ_FOREACH(cur, &g_ble_ll_conn_free_list, free_stqe) {
   242b0:	4b08      	ldr	r3, [pc, #32]	; (242d4 <ble_ll_hci_vs_is_controller_busy+0x40>)
   242b2:	681b      	ldr	r3, [r3, #0]
    int i = 0;
   242b4:	4602      	mov	r2, r0
    STAILQ_FOREACH(cur, &g_ble_ll_conn_free_list, free_stqe) {
   242b6:	e002      	b.n	242be <ble_ll_hci_vs_is_controller_busy+0x2a>
        i++;
   242b8:	3201      	adds	r2, #1
    STAILQ_FOREACH(cur, &g_ble_ll_conn_free_list, free_stqe) {
   242ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   242be:	2b00      	cmp	r3, #0
   242c0:	d1fa      	bne.n	242b8 <ble_ll_hci_vs_is_controller_busy+0x24>
    if (i < MYNEWT_VAL(BLE_MAX_CONNECTIONS)) {
   242c2:	2a00      	cmp	r2, #0
   242c4:	dceb      	bgt.n	2429e <ble_ll_hci_vs_is_controller_busy+0xa>
        return 1;
   242c6:	2001      	movs	r0, #1
   242c8:	e7e9      	b.n	2429e <ble_ll_hci_vs_is_controller_busy+0xa>
        return 1;
   242ca:	2001      	movs	r0, #1
   242cc:	e7e7      	b.n	2429e <ble_ll_hci_vs_is_controller_busy+0xa>
   242ce:	bf00      	nop
   242d0:	10004464 	.word	0x10004464
   242d4:	1000446c 	.word	0x1000446c

000242d8 <ble_ll_hci_vs_set_tx_power>:
{
   242d8:	b570      	push	{r4, r5, r6, lr}
    if (cmdlen != sizeof(*cmd)) {
   242da:	2a01      	cmp	r2, #1
   242dc:	d002      	beq.n	242e4 <ble_ll_hci_vs_set_tx_power+0xc>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   242de:	2612      	movs	r6, #18
}
   242e0:	4630      	mov	r0, r6
   242e2:	bd70      	pop	{r4, r5, r6, pc}
   242e4:	460c      	mov	r4, r1
   242e6:	461d      	mov	r5, r3
    if (ble_ll_hci_vs_is_controller_busy()) {
   242e8:	f7ff ffd4 	bl	24294 <ble_ll_hci_vs_is_controller_busy>
   242ec:	4606      	mov	r6, r0
   242ee:	b998      	cbnz	r0, 24318 <ble_ll_hci_vs_set_tx_power+0x40>
    if (cmd->tx_power == 127) {
   242f0:	f994 0000 	ldrsb.w	r0, [r4]
   242f4:	287f      	cmp	r0, #127	; 0x7f
   242f6:	d10a      	bne.n	2430e <ble_ll_hci_vs_set_tx_power+0x36>
        g_ble_ll_tx_power = MYNEWT_VAL(BLE_LL_TX_PWR_DBM);
   242f8:	4b08      	ldr	r3, [pc, #32]	; (2431c <ble_ll_hci_vs_set_tx_power+0x44>)
   242fa:	2200      	movs	r2, #0
   242fc:	701a      	strb	r2, [r3, #0]
    rsp->tx_power = g_ble_ll_tx_power;
   242fe:	4b07      	ldr	r3, [pc, #28]	; (2431c <ble_ll_hci_vs_set_tx_power+0x44>)
   24300:	f993 3000 	ldrsb.w	r3, [r3]
   24304:	702b      	strb	r3, [r5, #0]
    *rsplen = sizeof(*rsp);
   24306:	9b04      	ldr	r3, [sp, #16]
   24308:	2201      	movs	r2, #1
   2430a:	701a      	strb	r2, [r3, #0]
    return BLE_ERR_SUCCESS;
   2430c:	e7e8      	b.n	242e0 <ble_ll_hci_vs_set_tx_power+0x8>
        g_ble_ll_tx_power = ble_phy_txpower_round(cmd->tx_power);
   2430e:	f001 ffbf 	bl	26290 <ble_phy_txpower_round>
   24312:	4b02      	ldr	r3, [pc, #8]	; (2431c <ble_ll_hci_vs_set_tx_power+0x44>)
   24314:	7018      	strb	r0, [r3, #0]
   24316:	e7f2      	b.n	242fe <ble_ll_hci_vs_set_tx_power+0x26>
        return BLE_ERR_CMD_DISALLOWED;
   24318:	260c      	movs	r6, #12
   2431a:	e7e1      	b.n	242e0 <ble_ll_hci_vs_set_tx_power+0x8>
   2431c:	10004348 	.word	0x10004348

00024320 <ble_ll_hci_vs_rd_static_addr>:
    if (cmdlen != 0) {
   24320:	b99a      	cbnz	r2, 2434a <ble_ll_hci_vs_rd_static_addr+0x2a>
{
   24322:	b510      	push	{r4, lr}
   24324:	b082      	sub	sp, #8
   24326:	461c      	mov	r4, r3
    if (ble_hw_get_static_addr(&addr) < 0) {
   24328:	4668      	mov	r0, sp
   2432a:	f001 ff44 	bl	261b6 <ble_hw_get_static_addr>
   2432e:	2800      	cmp	r0, #0
   24330:	db0d      	blt.n	2434e <ble_ll_hci_vs_rd_static_addr+0x2e>
    memcpy(rsp->addr, addr.val, sizeof(rsp->addr));
   24332:	f8dd 3001 	ldr.w	r3, [sp, #1]
   24336:	6023      	str	r3, [r4, #0]
   24338:	f8bd 3005 	ldrh.w	r3, [sp, #5]
   2433c:	80a3      	strh	r3, [r4, #4]
    *rsplen = sizeof(*rsp);
   2433e:	9b04      	ldr	r3, [sp, #16]
   24340:	2206      	movs	r2, #6
   24342:	701a      	strb	r2, [r3, #0]
    return BLE_ERR_SUCCESS;
   24344:	2000      	movs	r0, #0
}
   24346:	b002      	add	sp, #8
   24348:	bd10      	pop	{r4, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2434a:	2012      	movs	r0, #18
}
   2434c:	4770      	bx	lr
        return BLE_ERR_UNSPECIFIED;
   2434e:	201f      	movs	r0, #31
   24350:	e7f9      	b.n	24346 <ble_ll_hci_vs_rd_static_addr+0x26>

00024352 <ble_ll_hci_vs_cmd_proc>:

int
ble_ll_hci_vs_cmd_proc(const uint8_t *cmdbuf, uint8_t cmdlen, uint16_t ocf,
                       uint8_t *rspbuf, uint8_t *rsplen)
{
   24352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24356:	b082      	sub	sp, #8
   24358:	4607      	mov	r7, r0
   2435a:	460e      	mov	r6, r1
   2435c:	4614      	mov	r4, r2
   2435e:	461d      	mov	r5, r3
    struct ble_ll_hci_vs_cmd *cmd;
    int rc;

    cmd = ble_ll_hci_vs_find_by_ocf(ocf);
   24360:	4610      	mov	r0, r2
   24362:	f7ff ff8b 	bl	2427c <ble_ll_hci_vs_find_by_ocf>
    if (!cmd) {
   24366:	b158      	cbz	r0, 24380 <ble_ll_hci_vs_cmd_proc+0x2e>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
    } else {
        rc = cmd->cb(ocf, cmdbuf, cmdlen, rspbuf, rsplen);
   24368:	f8d0 8004 	ldr.w	r8, [r0, #4]
   2436c:	9b08      	ldr	r3, [sp, #32]
   2436e:	9300      	str	r3, [sp, #0]
   24370:	462b      	mov	r3, r5
   24372:	4632      	mov	r2, r6
   24374:	4639      	mov	r1, r7
   24376:	4620      	mov	r0, r4
   24378:	47c0      	blx	r8
    }

    return rc;
}
   2437a:	b002      	add	sp, #8
   2437c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   24380:	2001      	movs	r0, #1
    return rc;
   24382:	e7fa      	b.n	2437a <ble_ll_hci_vs_cmd_proc+0x28>

00024384 <ble_ll_hci_vs_register>:

void
ble_ll_hci_vs_register(struct ble_ll_hci_vs_cmd *cmds, uint32_t num_cmds)
{
   24384:	b570      	push	{r4, r5, r6, lr}
   24386:	4604      	mov	r4, r0
   24388:	460e      	mov	r6, r1

    /* Assume all cmds are registered early on init, so just assert in case of
     * invalid request since it means something is wrong with the code itself.
     */

    for (i = 0; i < num_cmds; i++, cmds++) {
   2438a:	2500      	movs	r5, #0
   2438c:	42b5      	cmp	r5, r6
   2438e:	d220      	bcs.n	243d2 <ble_ll_hci_vs_register+0x4e>
        BLE_LL_ASSERT(cmds->cb != NULL);
   24390:	6863      	ldr	r3, [r4, #4]
   24392:	b153      	cbz	r3, 243aa <ble_ll_hci_vs_register+0x26>
        BLE_LL_ASSERT(ble_ll_hci_vs_find_by_ocf(cmds->ocf) == NULL);
   24394:	8820      	ldrh	r0, [r4, #0]
   24396:	f7ff ff71 	bl	2427c <ble_ll_hci_vs_find_by_ocf>
   2439a:	b980      	cbnz	r0, 243be <ble_ll_hci_vs_register+0x3a>

        SLIST_INSERT_HEAD(&g_ble_ll_hci_vs_list, cmds, link);
   2439c:	4b0d      	ldr	r3, [pc, #52]	; (243d4 <ble_ll_hci_vs_register+0x50>)
   2439e:	681a      	ldr	r2, [r3, #0]
   243a0:	60a2      	str	r2, [r4, #8]
   243a2:	601c      	str	r4, [r3, #0]
    for (i = 0; i < num_cmds; i++, cmds++) {
   243a4:	3501      	adds	r5, #1
   243a6:	340c      	adds	r4, #12
   243a8:	e7f0      	b.n	2438c <ble_ll_hci_vs_register+0x8>
        BLE_LL_ASSERT(cmds->cb != NULL);
   243aa:	f7f0 f9a3 	bl	146f4 <hal_debugger_connected>
   243ae:	b100      	cbz	r0, 243b2 <ble_ll_hci_vs_register+0x2e>
   243b0:	be01      	bkpt	0x0001
   243b2:	2300      	movs	r3, #0
   243b4:	461a      	mov	r2, r3
   243b6:	4619      	mov	r1, r3
   243b8:	4618      	mov	r0, r3
   243ba:	f7f4 fcb9 	bl	18d30 <__assert_func>
        BLE_LL_ASSERT(ble_ll_hci_vs_find_by_ocf(cmds->ocf) == NULL);
   243be:	f7f0 f999 	bl	146f4 <hal_debugger_connected>
   243c2:	b100      	cbz	r0, 243c6 <ble_ll_hci_vs_register+0x42>
   243c4:	be01      	bkpt	0x0001
   243c6:	2300      	movs	r3, #0
   243c8:	461a      	mov	r2, r3
   243ca:	4619      	mov	r1, r3
   243cc:	4618      	mov	r0, r3
   243ce:	f7f4 fcaf 	bl	18d30 <__assert_func>
    }
}
   243d2:	bd70      	pop	{r4, r5, r6, pc}
   243d4:	10004664 	.word	0x10004664

000243d8 <ble_ll_hci_vs_init>:

void
ble_ll_hci_vs_init(void)
{
   243d8:	b508      	push	{r3, lr}
    SLIST_INIT(&g_ble_ll_hci_vs_list);
   243da:	4b04      	ldr	r3, [pc, #16]	; (243ec <ble_ll_hci_vs_init+0x14>)
   243dc:	2200      	movs	r2, #0
   243de:	601a      	str	r2, [r3, #0]

    ble_ll_hci_vs_register(g_ble_ll_hci_vs_cmds,
   243e0:	2102      	movs	r1, #2
   243e2:	4803      	ldr	r0, [pc, #12]	; (243f0 <ble_ll_hci_vs_init+0x18>)
   243e4:	f7ff ffce 	bl	24384 <ble_ll_hci_vs_register>
                           ARRAY_SIZE(g_ble_ll_hci_vs_cmds));
}
   243e8:	bd08      	pop	{r3, pc}
   243ea:	bf00      	nop
   243ec:	10004664 	.word	0x10004664
   243f0:	100006bc 	.word	0x100006bc

000243f4 <ble_ll_rand_sample>:
#define IS_RNUM_BUF_END(x)  \
    (x == &g_ble_ll_rnum_buf[MYNEWT_VAL(BLE_LL_RNG_BUFSIZE) - 1])

void
ble_ll_rand_sample(uint8_t rnum)
{
   243f4:	b538      	push	{r3, r4, r5, lr}
   243f6:	4605      	mov	r5, r0
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   243f8:	f7f6 fa56 	bl	1a8a8 <os_arch_save_sr>
   243fc:	4604      	mov	r4, r0
    if (g_ble_ll_rnum_data.rnd_size < MYNEWT_VAL(BLE_LL_RNG_BUFSIZE)) {
   243fe:	4b0f      	ldr	r3, [pc, #60]	; (2443c <ble_ll_rand_sample+0x48>)
   24400:	7a1b      	ldrb	r3, [r3, #8]
   24402:	b2db      	uxtb	r3, r3
   24404:	2b1f      	cmp	r3, #31
   24406:	d815      	bhi.n	24434 <ble_ll_rand_sample+0x40>
        ++g_ble_ll_rnum_data.rnd_size;
   24408:	4a0c      	ldr	r2, [pc, #48]	; (2443c <ble_ll_rand_sample+0x48>)
   2440a:	7a13      	ldrb	r3, [r2, #8]
   2440c:	3301      	adds	r3, #1
   2440e:	b2db      	uxtb	r3, r3
   24410:	7213      	strb	r3, [r2, #8]
        g_ble_ll_rnum_data.rnd_in[0] = rnum;
   24412:	6813      	ldr	r3, [r2, #0]
   24414:	701d      	strb	r5, [r3, #0]
        if (IS_RNUM_BUF_END(g_ble_ll_rnum_data.rnd_in)) {
   24416:	6813      	ldr	r3, [r2, #0]
   24418:	4a09      	ldr	r2, [pc, #36]	; (24440 <ble_ll_rand_sample+0x4c>)
   2441a:	4293      	cmp	r3, r2
   2441c:	d006      	beq.n	2442c <ble_ll_rand_sample+0x38>
            g_ble_ll_rnum_data.rnd_in = g_ble_ll_rnum_buf;
        } else {
            ++g_ble_ll_rnum_data.rnd_in;
   2441e:	3301      	adds	r3, #1
   24420:	4a06      	ldr	r2, [pc, #24]	; (2443c <ble_ll_rand_sample+0x48>)
   24422:	6013      	str	r3, [r2, #0]
        }
    } else {
        /* Stop generating random numbers as we are full */
        ble_hw_rng_stop();
    }
    OS_EXIT_CRITICAL(sr);
   24424:	4620      	mov	r0, r4
   24426:	f7f6 fa45 	bl	1a8b4 <os_arch_restore_sr>
}
   2442a:	bd38      	pop	{r3, r4, r5, pc}
            g_ble_ll_rnum_data.rnd_in = g_ble_ll_rnum_buf;
   2442c:	4b03      	ldr	r3, [pc, #12]	; (2443c <ble_ll_rand_sample+0x48>)
   2442e:	3a1f      	subs	r2, #31
   24430:	601a      	str	r2, [r3, #0]
   24432:	e7f7      	b.n	24424 <ble_ll_rand_sample+0x30>
        ble_hw_rng_stop();
   24434:	f001 feec 	bl	26210 <ble_hw_rng_stop>
   24438:	e7f4      	b.n	24424 <ble_ll_rand_sample+0x30>
   2443a:	bf00      	nop
   2443c:	10004688 	.word	0x10004688
   24440:	10004687 	.word	0x10004687

00024444 <ble_ll_rand_data_get>:
#endif

/* Get 'len' bytes of random data */
int
ble_ll_rand_data_get(uint8_t *buf, uint8_t len)
{
   24444:	b570      	push	{r4, r5, r6, lr}
   24446:	4604      	mov	r4, r0
   24448:	460e      	mov	r6, r1
    }
#else
    uint8_t rnums;
    os_sr_t sr;

    while (len != 0) {
   2444a:	e018      	b.n	2447e <ble_ll_rand_data_get+0x3a>
        len -= rnums;
        g_ble_ll_rnum_data.rnd_size -= rnums;
        while (rnums) {
            buf[0] = g_ble_ll_rnum_data.rnd_out[0];
            if (IS_RNUM_BUF_END(g_ble_ll_rnum_data.rnd_out)) {
                g_ble_ll_rnum_data.rnd_out = g_ble_ll_rnum_buf;
   2444c:	4a1b      	ldr	r2, [pc, #108]	; (244bc <ble_ll_rand_data_get+0x78>)
   2444e:	f1a5 011f 	sub.w	r1, r5, #31
   24452:	6051      	str	r1, [r2, #4]
            } else {
                ++g_ble_ll_rnum_data.rnd_out;
            }
            ++buf;
   24454:	3401      	adds	r4, #1
            --rnums;
   24456:	3b01      	subs	r3, #1
   24458:	b2db      	uxtb	r3, r3
        while (rnums) {
   2445a:	b15b      	cbz	r3, 24474 <ble_ll_rand_data_get+0x30>
            buf[0] = g_ble_ll_rnum_data.rnd_out[0];
   2445c:	4a17      	ldr	r2, [pc, #92]	; (244bc <ble_ll_rand_data_get+0x78>)
   2445e:	6851      	ldr	r1, [r2, #4]
   24460:	7809      	ldrb	r1, [r1, #0]
   24462:	7021      	strb	r1, [r4, #0]
            if (IS_RNUM_BUF_END(g_ble_ll_rnum_data.rnd_out)) {
   24464:	6852      	ldr	r2, [r2, #4]
   24466:	4d16      	ldr	r5, [pc, #88]	; (244c0 <ble_ll_rand_data_get+0x7c>)
   24468:	42aa      	cmp	r2, r5
   2446a:	d0ef      	beq.n	2444c <ble_ll_rand_data_get+0x8>
                ++g_ble_ll_rnum_data.rnd_out;
   2446c:	3201      	adds	r2, #1
   2446e:	4913      	ldr	r1, [pc, #76]	; (244bc <ble_ll_rand_data_get+0x78>)
   24470:	604a      	str	r2, [r1, #4]
   24472:	e7ef      	b.n	24454 <ble_ll_rand_data_get+0x10>
        }
        OS_EXIT_CRITICAL(sr);
   24474:	f7f6 fa1e 	bl	1a8b4 <os_arch_restore_sr>

        /* Make sure rng is started! */
        ble_hw_rng_start();
   24478:	f001 feae 	bl	261d8 <ble_hw_rng_start>

        /* Wait till bytes are in buffer. */
        if (len) {
   2447c:	b986      	cbnz	r6, 244a0 <ble_ll_rand_data_get+0x5c>
    while (len != 0) {
   2447e:	b1d6      	cbz	r6, 244b6 <ble_ll_rand_data_get+0x72>
        OS_ENTER_CRITICAL(sr);
   24480:	f7f6 fa12 	bl	1a8a8 <os_arch_save_sr>
        rnums = g_ble_ll_rnum_data.rnd_size;
   24484:	4b0d      	ldr	r3, [pc, #52]	; (244bc <ble_ll_rand_data_get+0x78>)
   24486:	7a1b      	ldrb	r3, [r3, #8]
   24488:	b2db      	uxtb	r3, r3
        if (rnums > len) {
   2448a:	429e      	cmp	r6, r3
   2448c:	d200      	bcs.n	24490 <ble_ll_rand_data_get+0x4c>
            rnums = len;
   2448e:	4633      	mov	r3, r6
        len -= rnums;
   24490:	1af6      	subs	r6, r6, r3
   24492:	b2f6      	uxtb	r6, r6
        g_ble_ll_rnum_data.rnd_size -= rnums;
   24494:	4909      	ldr	r1, [pc, #36]	; (244bc <ble_ll_rand_data_get+0x78>)
   24496:	7a0a      	ldrb	r2, [r1, #8]
   24498:	1ad2      	subs	r2, r2, r3
   2449a:	b2d2      	uxtb	r2, r2
   2449c:	720a      	strb	r2, [r1, #8]
        while (rnums) {
   2449e:	e7dc      	b.n	2445a <ble_ll_rand_data_get+0x16>
            while ((g_ble_ll_rnum_data.rnd_size < len) &&
   244a0:	4b06      	ldr	r3, [pc, #24]	; (244bc <ble_ll_rand_data_get+0x78>)
   244a2:	7a1b      	ldrb	r3, [r3, #8]
   244a4:	b2db      	uxtb	r3, r3
   244a6:	42b3      	cmp	r3, r6
   244a8:	d2e9      	bcs.n	2447e <ble_ll_rand_data_get+0x3a>
                   (g_ble_ll_rnum_data.rnd_size < MYNEWT_VAL(BLE_LL_RNG_BUFSIZE))) {
   244aa:	4b04      	ldr	r3, [pc, #16]	; (244bc <ble_ll_rand_data_get+0x78>)
   244ac:	7a1b      	ldrb	r3, [r3, #8]
   244ae:	b2db      	uxtb	r3, r3
            while ((g_ble_ll_rnum_data.rnd_size < len) &&
   244b0:	2b1f      	cmp	r3, #31
   244b2:	d9f5      	bls.n	244a0 <ble_ll_rand_data_get+0x5c>
   244b4:	e7e3      	b.n	2447e <ble_ll_rand_data_get+0x3a>
            }
        }
    }
#endif
    return BLE_ERR_SUCCESS;
}
   244b6:	2000      	movs	r0, #0
   244b8:	bd70      	pop	{r4, r5, r6, pc}
   244ba:	bf00      	nop
   244bc:	10004688 	.word	0x10004688
   244c0:	10004687 	.word	0x10004687

000244c4 <ble_ll_rand>:

/* Simple wrapper to allow easy replacement of rand() */
uint32_t
ble_ll_rand(void)
{
   244c4:	b508      	push	{r3, lr}
    static unsigned short xsubi[3];
    static bool init = true;

    if (init) {
   244c6:	4b07      	ldr	r3, [pc, #28]	; (244e4 <ble_ll_rand+0x20>)
   244c8:	781b      	ldrb	r3, [r3, #0]
   244ca:	b91b      	cbnz	r3, 244d4 <ble_ll_rand+0x10>
        init = false;
        ble_ll_rand_data_get((uint8_t *)xsubi, sizeof(xsubi));
    }

    return (uint32_t) jrand48(xsubi);
   244cc:	4806      	ldr	r0, [pc, #24]	; (244e8 <ble_ll_rand+0x24>)
   244ce:	f7f6 ffcf 	bl	1b470 <jrand48>
}
   244d2:	bd08      	pop	{r3, pc}
        init = false;
   244d4:	4b03      	ldr	r3, [pc, #12]	; (244e4 <ble_ll_rand+0x20>)
   244d6:	2200      	movs	r2, #0
   244d8:	701a      	strb	r2, [r3, #0]
        ble_ll_rand_data_get((uint8_t *)xsubi, sizeof(xsubi));
   244da:	2106      	movs	r1, #6
   244dc:	4802      	ldr	r0, [pc, #8]	; (244e8 <ble_ll_rand+0x24>)
   244de:	f7ff ffb1 	bl	24444 <ble_ll_rand_data_get>
   244e2:	e7f3      	b.n	244cc <ble_ll_rand+0x8>
   244e4:	100006d4 	.word	0x100006d4
   244e8:	10004694 	.word	0x10004694

000244ec <ble_ll_rand_prand_get>:
 *
 * @param prand
 */
void
ble_ll_rand_prand_get(uint8_t *prand)
{
   244ec:	b510      	push	{r4, lr}
   244ee:	4604      	mov	r4, r0
    uint16_t sum;

    while (1) {
        /* Get 24 bits of random data */
        ble_ll_rand_data_get(prand, 3);
   244f0:	2103      	movs	r1, #3
   244f2:	4620      	mov	r0, r4
   244f4:	f7ff ffa6 	bl	24444 <ble_ll_rand_data_get>

        /* Prand cannot be all zeros or 1's. */
        sum = prand[0] + prand[1] + prand[2];
   244f8:	7823      	ldrb	r3, [r4, #0]
   244fa:	7862      	ldrb	r2, [r4, #1]
   244fc:	4413      	add	r3, r2
   244fe:	78a2      	ldrb	r2, [r4, #2]
        if ((sum != 0) && (sum != (3 * 0xff))) {
   24500:	18d3      	adds	r3, r2, r3
   24502:	d0f5      	beq.n	244f0 <ble_ll_rand_prand_get+0x4>
   24504:	f240 21fd 	movw	r1, #765	; 0x2fd
   24508:	428b      	cmp	r3, r1
   2450a:	d0f1      	beq.n	244f0 <ble_ll_rand_prand_get+0x4>
            break;
        }
    }

    /* Upper two bits must be 01 */
    prand[2] &= ~0xc0;
   2450c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    prand[2] |= 0x40;
   24510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   24514:	70a2      	strb	r2, [r4, #2]
}
   24516:	bd10      	pop	{r4, pc}

00024518 <ble_ll_rand_start>:
 *
 * @return int
 */
int
ble_ll_rand_start(void)
{
   24518:	b508      	push	{r3, lr}
#if MYNEWT_VAL(TRNG)
    /* Nothing to do - this is handled by driver */
#else
    /* Start the generation of numbers if we are not full */
    if (g_ble_ll_rnum_data.rnd_size < MYNEWT_VAL(BLE_LL_RNG_BUFSIZE)) {
   2451a:	4b05      	ldr	r3, [pc, #20]	; (24530 <ble_ll_rand_start+0x18>)
   2451c:	7a1b      	ldrb	r3, [r3, #8]
   2451e:	b2db      	uxtb	r3, r3
   24520:	2b1f      	cmp	r3, #31
   24522:	d901      	bls.n	24528 <ble_ll_rand_start+0x10>
        ble_hw_rng_start();
    }
#endif
    return 0;
}
   24524:	2000      	movs	r0, #0
   24526:	bd08      	pop	{r3, pc}
        ble_hw_rng_start();
   24528:	f001 fe56 	bl	261d8 <ble_hw_rng_start>
   2452c:	e7fa      	b.n	24524 <ble_ll_rand_start+0xc>
   2452e:	bf00      	nop
   24530:	10004688 	.word	0x10004688

00024534 <ble_ll_rand_init>:
 *
 * @return int
 */
int
ble_ll_rand_init(void)
{
   24534:	b508      	push	{r3, lr}
#if MYNEWT_VAL(TRNG)
    g_trng = (struct trng_dev *) os_dev_open("trng", OS_TIMEOUT_NEVER, NULL);
#else
    g_ble_ll_rnum_data.rnd_in = g_ble_ll_rnum_buf;
   24536:	4b05      	ldr	r3, [pc, #20]	; (2454c <ble_ll_rand_init+0x18>)
   24538:	4a05      	ldr	r2, [pc, #20]	; (24550 <ble_ll_rand_init+0x1c>)
   2453a:	601a      	str	r2, [r3, #0]
    g_ble_ll_rnum_data.rnd_out = g_ble_ll_rnum_buf;
   2453c:	605a      	str	r2, [r3, #4]
    ble_hw_rng_init(ble_ll_rand_sample, 1);
   2453e:	2101      	movs	r1, #1
   24540:	4804      	ldr	r0, [pc, #16]	; (24554 <ble_ll_rand_init+0x20>)
   24542:	f001 fe43 	bl	261cc <ble_hw_rng_init>
#endif
    return 0;
}
   24546:	2000      	movs	r0, #0
   24548:	bd08      	pop	{r3, pc}
   2454a:	bf00      	nop
   2454c:	10004688 	.word	0x10004688
   24550:	10004668 	.word	0x10004668
   24554:	000243f5 	.word	0x000243f5

00024558 <ble_ll_resolv_irk_nonzero>:
{
    int i;
    int rc;

    rc = 0;
    for (i = 0; i < 16; ++i) {
   24558:	2300      	movs	r3, #0
   2455a:	2b0f      	cmp	r3, #15
   2455c:	dc04      	bgt.n	24568 <ble_ll_resolv_irk_nonzero+0x10>
        if (*irk != 0) {
   2455e:	7802      	ldrb	r2, [r0, #0]
   24560:	b922      	cbnz	r2, 2456c <ble_ll_resolv_irk_nonzero+0x14>
            rc = 1;
            break;
        }
        ++irk;
   24562:	3001      	adds	r0, #1
    for (i = 0; i < 16; ++i) {
   24564:	3301      	adds	r3, #1
   24566:	e7f8      	b.n	2455a <ble_ll_resolv_irk_nonzero+0x2>
    rc = 0;
   24568:	2000      	movs	r0, #0
   2456a:	4770      	bx	lr
            rc = 1;
   2456c:	2001      	movs	r0, #1
    }

    return rc;
}
   2456e:	4770      	bx	lr

00024570 <ble_ll_is_controller_busy>:
{
   24570:	b508      	push	{r3, lr}
    if (ble_ll_adv_enabled()) {
   24572:	f7fb fc87 	bl	1fe84 <ble_ll_adv_enabled>
   24576:	b108      	cbz	r0, 2457c <ble_ll_is_controller_busy+0xc>
        return 1;
   24578:	2001      	movs	r0, #1
}
   2457a:	bd08      	pop	{r3, pc}
    if (ble_ll_scan_enabled()) {
   2457c:	f001 f948 	bl	25810 <ble_ll_scan_enabled>
   24580:	b928      	cbnz	r0, 2458e <ble_ll_is_controller_busy+0x1e>
    if (g_ble_ll_conn_create_sm.connsm) {
   24582:	4b04      	ldr	r3, [pc, #16]	; (24594 <ble_ll_is_controller_busy+0x24>)
   24584:	681b      	ldr	r3, [r3, #0]
   24586:	2b00      	cmp	r3, #0
   24588:	d0f7      	beq.n	2457a <ble_ll_is_controller_busy+0xa>
        return 1;
   2458a:	2001      	movs	r0, #1
   2458c:	e7f5      	b.n	2457a <ble_ll_is_controller_busy+0xa>
        return 1;
   2458e:	2001      	movs	r0, #1
   24590:	e7f3      	b.n	2457a <ble_ll_is_controller_busy+0xa>
   24592:	bf00      	nop
   24594:	10004464 	.word	0x10004464

00024598 <ble_ll_resolv_list_chg_allowed>:
{
   24598:	b508      	push	{r3, lr}
    if (g_ble_ll_resolv_data.addr_res_enabled &&
   2459a:	4b06      	ldr	r3, [pc, #24]	; (245b4 <ble_ll_resolv_list_chg_allowed+0x1c>)
   2459c:	781b      	ldrb	r3, [r3, #0]
   2459e:	b90b      	cbnz	r3, 245a4 <ble_ll_resolv_list_chg_allowed+0xc>
        rc = 1;
   245a0:	2001      	movs	r0, #1
}
   245a2:	bd08      	pop	{r3, pc}
       ble_ll_is_controller_busy()) {
   245a4:	f7ff ffe4 	bl	24570 <ble_ll_is_controller_busy>
    if (g_ble_ll_resolv_data.addr_res_enabled &&
   245a8:	b108      	cbz	r0, 245ae <ble_ll_resolv_list_chg_allowed+0x16>
        rc = 0;
   245aa:	2000      	movs	r0, #0
   245ac:	e7f9      	b.n	245a2 <ble_ll_resolv_list_chg_allowed+0xa>
        rc = 1;
   245ae:	2001      	movs	r0, #1
    return rc;
   245b0:	e7f7      	b.n	245a2 <ble_ll_resolv_list_chg_allowed+0xa>
   245b2:	bf00      	nop
   245b4:	1000469c 	.word	0x1000469c

000245b8 <ble_ll_is_on_resolv_list>:
 * is the 'position' of the device in the resolving list (the index of the
 * element plus 1).
 */
static int
ble_ll_is_on_resolv_list(const uint8_t *addr, uint8_t addr_type)
{
   245b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   245ba:	4607      	mov	r7, r0
   245bc:	460e      	mov	r6, r1
    int i;
    struct ble_ll_resolv_entry *rl;

    rl = &g_ble_ll_resolv_list[0];
   245be:	4c0c      	ldr	r4, [pc, #48]	; (245f0 <ble_ll_is_on_resolv_list+0x38>)
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   245c0:	2500      	movs	r5, #0
   245c2:	e001      	b.n	245c8 <ble_ll_is_on_resolv_list+0x10>
        if ((rl->rl_addr_type == addr_type) &&
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
            return i + 1;
        }
        ++rl;
   245c4:	3436      	adds	r4, #54	; 0x36
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   245c6:	3501      	adds	r5, #1
   245c8:	4b0a      	ldr	r3, [pc, #40]	; (245f4 <ble_ll_is_on_resolv_list+0x3c>)
   245ca:	78db      	ldrb	r3, [r3, #3]
   245cc:	42ab      	cmp	r3, r5
   245ce:	dd0c      	ble.n	245ea <ble_ll_is_on_resolv_list+0x32>
        if ((rl->rl_addr_type == addr_type) &&
   245d0:	7823      	ldrb	r3, [r4, #0]
   245d2:	42b3      	cmp	r3, r6
   245d4:	d1f6      	bne.n	245c4 <ble_ll_is_on_resolv_list+0xc>
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
   245d6:	2206      	movs	r2, #6
   245d8:	4639      	mov	r1, r7
   245da:	f104 0024 	add.w	r0, r4, #36	; 0x24
   245de:	f7f6 fb13 	bl	1ac08 <memcmp>
        if ((rl->rl_addr_type == addr_type) &&
   245e2:	2800      	cmp	r0, #0
   245e4:	d1ee      	bne.n	245c4 <ble_ll_is_on_resolv_list+0xc>
            return i + 1;
   245e6:	1c68      	adds	r0, r5, #1
   245e8:	e000      	b.n	245ec <ble_ll_is_on_resolv_list+0x34>
    }

    return 0;
   245ea:	2000      	movs	r0, #0
}
   245ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   245ee:	bf00      	nop
   245f0:	100046c4 	.word	0x100046c4
   245f4:	1000469c 	.word	0x1000469c

000245f8 <ble_ll_resolv_gen_priv_addr>:
{
   245f8:	b570      	push	{r4, r5, r6, lr}
   245fa:	b08c      	sub	sp, #48	; 0x30
    BLE_LL_ASSERT(rl != NULL);
   245fc:	b350      	cbz	r0, 24654 <ble_ll_resolv_gen_priv_addr+0x5c>
   245fe:	4605      	mov	r5, r0
    if (local) {
   24600:	b391      	cbz	r1, 24668 <ble_ll_resolv_gen_priv_addr+0x70>
        addr = rl->rl_local_rpa;
   24602:	f100 042a 	add.w	r4, r0, #42	; 0x2a
        irk = rl->rl_local_irk;
   24606:	3504      	adds	r5, #4
    ble_ll_rand_prand_get(prand);
   24608:	1ce0      	adds	r0, r4, #3
   2460a:	f7ff ff6f 	bl	244ec <ble_ll_rand_prand_get>
    memcpy(ecb.key, irk, 16);
   2460e:	466e      	mov	r6, sp
   24610:	6828      	ldr	r0, [r5, #0]
   24612:	6869      	ldr	r1, [r5, #4]
   24614:	68aa      	ldr	r2, [r5, #8]
   24616:	68eb      	ldr	r3, [r5, #12]
   24618:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    memset(ecb.plain_text, 0, 13);
   2461a:	2300      	movs	r3, #0
   2461c:	9304      	str	r3, [sp, #16]
   2461e:	9305      	str	r3, [sp, #20]
   24620:	9306      	str	r3, [sp, #24]
   24622:	f88d 301c 	strb.w	r3, [sp, #28]
    ecb.plain_text[13] = prand[2];
   24626:	7963      	ldrb	r3, [r4, #5]
   24628:	f88d 301d 	strb.w	r3, [sp, #29]
    ecb.plain_text[14] = prand[1];
   2462c:	7923      	ldrb	r3, [r4, #4]
   2462e:	f88d 301e 	strb.w	r3, [sp, #30]
    ecb.plain_text[15] = prand[0];
   24632:	78e3      	ldrb	r3, [r4, #3]
   24634:	f88d 301f 	strb.w	r3, [sp, #31]
    ble_hw_encrypt_block(&ecb);
   24638:	4668      	mov	r0, sp
   2463a:	f001 fdc3 	bl	261c4 <ble_hw_encrypt_block>
    addr[0] = ecb.cipher_text[15];
   2463e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   24642:	7023      	strb	r3, [r4, #0]
    addr[1] = ecb.cipher_text[14];
   24644:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
   24648:	7063      	strb	r3, [r4, #1]
    addr[2] = ecb.cipher_text[13];
   2464a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   2464e:	70a3      	strb	r3, [r4, #2]
}
   24650:	b00c      	add	sp, #48	; 0x30
   24652:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(rl != NULL);
   24654:	f7f0 f84e 	bl	146f4 <hal_debugger_connected>
   24658:	b100      	cbz	r0, 2465c <ble_ll_resolv_gen_priv_addr+0x64>
   2465a:	be01      	bkpt	0x0001
   2465c:	2300      	movs	r3, #0
   2465e:	461a      	mov	r2, r3
   24660:	4619      	mov	r1, r3
   24662:	4618      	mov	r0, r3
   24664:	f7f4 fb64 	bl	18d30 <__assert_func>
        addr = rl->rl_peer_rpa;
   24668:	f100 0430 	add.w	r4, r0, #48	; 0x30
        irk = rl->rl_peer_irk;
   2466c:	3514      	adds	r5, #20
   2466e:	e7cb      	b.n	24608 <ble_ll_resolv_gen_priv_addr+0x10>

00024670 <ble_ll_resolv_rpa_timer_cb>:
{
   24670:	b570      	push	{r4, r5, r6, lr}
    rl = &g_ble_ll_resolv_list[0];
   24672:	4c16      	ldr	r4, [pc, #88]	; (246cc <ble_ll_resolv_rpa_timer_cb+0x5c>)
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   24674:	2500      	movs	r5, #0
   24676:	e016      	b.n	246a6 <ble_ll_resolv_rpa_timer_cb+0x36>
            OS_ENTER_CRITICAL(sr);
   24678:	f7f6 f916 	bl	1a8a8 <os_arch_save_sr>
   2467c:	4606      	mov	r6, r0
            ble_ll_resolv_gen_priv_addr(rl, 1);
   2467e:	2101      	movs	r1, #1
   24680:	4620      	mov	r0, r4
   24682:	f7ff ffb9 	bl	245f8 <ble_ll_resolv_gen_priv_addr>
            OS_EXIT_CRITICAL(sr);
   24686:	4630      	mov	r0, r6
   24688:	f7f6 f914 	bl	1a8b4 <os_arch_restore_sr>
   2468c:	e012      	b.n	246b4 <ble_ll_resolv_rpa_timer_cb+0x44>
            OS_ENTER_CRITICAL(sr);
   2468e:	f7f6 f90b 	bl	1a8a8 <os_arch_save_sr>
   24692:	4606      	mov	r6, r0
            ble_ll_resolv_gen_priv_addr(rl, 0);
   24694:	2100      	movs	r1, #0
   24696:	4620      	mov	r0, r4
   24698:	f7ff ffae 	bl	245f8 <ble_ll_resolv_gen_priv_addr>
            OS_EXIT_CRITICAL(sr);
   2469c:	4630      	mov	r0, r6
   2469e:	f7f6 f909 	bl	1a8b4 <os_arch_restore_sr>
        ++rl;
   246a2:	3436      	adds	r4, #54	; 0x36
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   246a4:	3501      	adds	r5, #1
   246a6:	4b0a      	ldr	r3, [pc, #40]	; (246d0 <ble_ll_resolv_rpa_timer_cb+0x60>)
   246a8:	78db      	ldrb	r3, [r3, #3]
   246aa:	42ab      	cmp	r3, r5
   246ac:	dd06      	ble.n	246bc <ble_ll_resolv_rpa_timer_cb+0x4c>
        if (rl->rl_has_local) {
   246ae:	78a3      	ldrb	r3, [r4, #2]
   246b0:	2b00      	cmp	r3, #0
   246b2:	d1e1      	bne.n	24678 <ble_ll_resolv_rpa_timer_cb+0x8>
        if (rl->rl_has_peer) {
   246b4:	78e3      	ldrb	r3, [r4, #3]
   246b6:	2b00      	cmp	r3, #0
   246b8:	d0f3      	beq.n	246a2 <ble_ll_resolv_rpa_timer_cb+0x32>
   246ba:	e7e8      	b.n	2468e <ble_ll_resolv_rpa_timer_cb+0x1e>
    ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
   246bc:	4804      	ldr	r0, [pc, #16]	; (246d0 <ble_ll_resolv_rpa_timer_cb+0x60>)
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   246be:	6841      	ldr	r1, [r0, #4]
   246c0:	3008      	adds	r0, #8
   246c2:	f7f4 fd7d 	bl	191c0 <os_callout_reset>
    ble_ll_adv_rpa_timeout();
   246c6:	f7fb fa63 	bl	1fb90 <ble_ll_adv_rpa_timeout>
}
   246ca:	bd70      	pop	{r4, r5, r6, pc}
   246cc:	100046c4 	.word	0x100046c4
   246d0:	1000469c 	.word	0x1000469c

000246d4 <ble_ll_resolv_list_clr>:
{
   246d4:	b538      	push	{r3, r4, r5, lr}
    if (!ble_ll_resolv_list_chg_allowed()) {
   246d6:	f7ff ff5f 	bl	24598 <ble_ll_resolv_list_chg_allowed>
   246da:	b158      	cbz	r0, 246f4 <ble_ll_resolv_list_clr+0x20>
    g_ble_ll_resolv_data.rl_cnt_hw = 0;
   246dc:	4d06      	ldr	r5, [pc, #24]	; (246f8 <ble_ll_resolv_list_clr+0x24>)
   246de:	2400      	movs	r4, #0
   246e0:	70ac      	strb	r4, [r5, #2]
    g_ble_ll_resolv_data.rl_cnt = 0;
   246e2:	70ec      	strb	r4, [r5, #3]
    ble_hw_resolv_list_clear();
   246e4:	f001 fd9a 	bl	2621c <ble_hw_resolv_list_clear>
    os_callout_stop(&co->co);
   246e8:	f105 0008 	add.w	r0, r5, #8
   246ec:	f7f4 fd4a 	bl	19184 <os_callout_stop>
    return BLE_ERR_SUCCESS;
   246f0:	4620      	mov	r0, r4
}
   246f2:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ERR_CMD_DISALLOWED;
   246f4:	200c      	movs	r0, #12
   246f6:	e7fc      	b.n	246f2 <ble_ll_resolv_list_clr+0x1e>
   246f8:	1000469c 	.word	0x1000469c

000246fc <ble_ll_resolv_list_read_size>:
    rsp->size = g_ble_ll_resolv_data.rl_size;
   246fc:	4b03      	ldr	r3, [pc, #12]	; (2470c <ble_ll_resolv_list_read_size+0x10>)
   246fe:	785b      	ldrb	r3, [r3, #1]
   24700:	7003      	strb	r3, [r0, #0]
    *rsplen = sizeof(*rsp);
   24702:	2301      	movs	r3, #1
   24704:	700b      	strb	r3, [r1, #0]
}
   24706:	2000      	movs	r0, #0
   24708:	4770      	bx	lr
   2470a:	bf00      	nop
   2470c:	1000469c 	.word	0x1000469c

00024710 <ble_ll_resolv_list_find>:
 *
 * @return Pointer to resolving list entry or NULL if no entry found.
 */
struct ble_ll_resolv_entry *
ble_ll_resolv_list_find(const uint8_t *addr, uint8_t addr_type)
{
   24710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24712:	4607      	mov	r7, r0
   24714:	460e      	mov	r6, r1
    int i;
    struct ble_ll_resolv_entry *rl;

    rl = &g_ble_ll_resolv_list[0];
   24716:	4c0c      	ldr	r4, [pc, #48]	; (24748 <ble_ll_resolv_list_find+0x38>)
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   24718:	2500      	movs	r5, #0
   2471a:	e001      	b.n	24720 <ble_ll_resolv_list_find+0x10>
        if ((rl->rl_addr_type == addr_type) &&
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
            return rl;
        }
        ++rl;
   2471c:	3436      	adds	r4, #54	; 0x36
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   2471e:	3501      	adds	r5, #1
   24720:	4b0a      	ldr	r3, [pc, #40]	; (2474c <ble_ll_resolv_list_find+0x3c>)
   24722:	78db      	ldrb	r3, [r3, #3]
   24724:	42ab      	cmp	r3, r5
   24726:	dd0b      	ble.n	24740 <ble_ll_resolv_list_find+0x30>
        if ((rl->rl_addr_type == addr_type) &&
   24728:	7823      	ldrb	r3, [r4, #0]
   2472a:	42b3      	cmp	r3, r6
   2472c:	d1f6      	bne.n	2471c <ble_ll_resolv_list_find+0xc>
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
   2472e:	2206      	movs	r2, #6
   24730:	4639      	mov	r1, r7
   24732:	f104 0024 	add.w	r0, r4, #36	; 0x24
   24736:	f7f6 fa67 	bl	1ac08 <memcmp>
        if ((rl->rl_addr_type == addr_type) &&
   2473a:	2800      	cmp	r0, #0
   2473c:	d1ee      	bne.n	2471c <ble_ll_resolv_list_find+0xc>
   2473e:	e000      	b.n	24742 <ble_ll_resolv_list_find+0x32>
    }

    return NULL;
   24740:	2400      	movs	r4, #0
}
   24742:	4620      	mov	r0, r4
   24744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24746:	bf00      	nop
   24748:	100046c4 	.word	0x100046c4
   2474c:	1000469c 	.word	0x1000469c

00024750 <ble_ll_resolv_list_add>:
 *
 * @return int
 */
int
ble_ll_resolv_list_add(const uint8_t *cmdbuf, uint8_t len)
{
   24750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    const struct ble_hci_le_add_resolv_list_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_resolv_entry *rl;
    int rc = BLE_ERR_SUCCESS;

    if (len != sizeof(*cmd)) {
   24754:	2927      	cmp	r1, #39	; 0x27
   24756:	d003      	beq.n	24760 <ble_ll_resolv_list_add+0x10>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   24758:	2612      	movs	r6, #18
        ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
                              g_ble_ll_resolv_data.rpa_tmo);
    }

    return rc;
}
   2475a:	4630      	mov	r0, r6
   2475c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24760:	4604      	mov	r4, r0
    if (!ble_ll_resolv_list_chg_allowed()) {
   24762:	f7ff ff19 	bl	24598 <ble_ll_resolv_list_chg_allowed>
   24766:	2800      	cmp	r0, #0
   24768:	d07d      	beq.n	24866 <ble_ll_resolv_list_add+0x116>
    if (g_ble_ll_resolv_data.rl_cnt >= g_ble_ll_resolv_data.rl_size) {
   2476a:	4b42      	ldr	r3, [pc, #264]	; (24874 <ble_ll_resolv_list_add+0x124>)
   2476c:	f893 8003 	ldrb.w	r8, [r3, #3]
   24770:	785b      	ldrb	r3, [r3, #1]
   24772:	4598      	cmp	r8, r3
   24774:	d279      	bcs.n	2486a <ble_ll_resolv_list_add+0x11a>
    if (ble_ll_is_on_resolv_list(cmd->peer_id_addr, cmd->peer_addr_type)) {
   24776:	4627      	mov	r7, r4
   24778:	f817 1b01 	ldrb.w	r1, [r7], #1
   2477c:	4638      	mov	r0, r7
   2477e:	f7ff ff1b 	bl	245b8 <ble_ll_is_on_resolv_list>
   24782:	4606      	mov	r6, r0
   24784:	2800      	cmp	r0, #0
   24786:	d172      	bne.n	2486e <ble_ll_resolv_list_add+0x11e>
    if (ble_ll_resolv_irk_nonzero(cmd->peer_irk)) {
   24788:	f104 0907 	add.w	r9, r4, #7
   2478c:	4648      	mov	r0, r9
   2478e:	f7ff fee3 	bl	24558 <ble_ll_resolv_irk_nonzero>
   24792:	bb50      	cbnz	r0, 247ea <ble_ll_resolv_list_add+0x9a>
        rl = &g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt];
   24794:	4b38      	ldr	r3, [pc, #224]	; (24878 <ble_ll_resolv_list_add+0x128>)
   24796:	2536      	movs	r5, #54	; 0x36
   24798:	fb05 3508 	mla	r5, r5, r8, r3
    memset (rl, 0, sizeof(*rl));
   2479c:	2236      	movs	r2, #54	; 0x36
   2479e:	2100      	movs	r1, #0
   247a0:	4628      	mov	r0, r5
   247a2:	f7f6 fa7a 	bl	1ac9a <memset>
    rl->rl_addr_type = cmd->peer_addr_type;
   247a6:	7822      	ldrb	r2, [r4, #0]
   247a8:	462b      	mov	r3, r5
   247aa:	f803 2b24 	strb.w	r2, [r3], #36
    memcpy(rl->rl_identity_addr, cmd->peer_id_addr, BLE_DEV_ADDR_LEN);
   247ae:	683a      	ldr	r2, [r7, #0]
   247b0:	626a      	str	r2, [r5, #36]	; 0x24
   247b2:	88ba      	ldrh	r2, [r7, #4]
   247b4:	809a      	strh	r2, [r3, #4]
    if (ble_ll_resolv_irk_nonzero(cmd->peer_irk)) {
   247b6:	4648      	mov	r0, r9
   247b8:	f7ff fece 	bl	24558 <ble_ll_resolv_irk_nonzero>
   247bc:	bb30      	cbnz	r0, 2480c <ble_ll_resolv_list_add+0xbc>
    if (ble_ll_resolv_irk_nonzero(cmd->local_irk)) {
   247be:	3417      	adds	r4, #23
   247c0:	4620      	mov	r0, r4
   247c2:	f7ff fec9 	bl	24558 <ble_ll_resolv_irk_nonzero>
   247c6:	bb70      	cbnz	r0, 24826 <ble_ll_resolv_list_add+0xd6>
    rl->rl_priv_mode = BLE_HCI_PRIVACY_NETWORK;
   247c8:	2300      	movs	r3, #0
   247ca:	706b      	strb	r3, [r5, #1]
    if (rl->rl_has_peer) {
   247cc:	78eb      	ldrb	r3, [r5, #3]
   247ce:	bbab      	cbnz	r3, 2483c <ble_ll_resolv_list_add+0xec>
    g_ble_ll_resolv_data.rl_cnt++;
   247d0:	4a28      	ldr	r2, [pc, #160]	; (24874 <ble_ll_resolv_list_add+0x124>)
   247d2:	78d3      	ldrb	r3, [r2, #3]
   247d4:	3301      	adds	r3, #1
   247d6:	b2db      	uxtb	r3, r3
   247d8:	70d3      	strb	r3, [r2, #3]
    if (g_ble_ll_resolv_data.rl_cnt == 1) {
   247da:	2b01      	cmp	r3, #1
   247dc:	d1bd      	bne.n	2475a <ble_ll_resolv_list_add+0xa>
        ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
   247de:	4610      	mov	r0, r2
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   247e0:	6851      	ldr	r1, [r2, #4]
   247e2:	3008      	adds	r0, #8
   247e4:	f7f4 fcec 	bl	191c0 <os_callout_reset>
   247e8:	e7b7      	b.n	2475a <ble_ll_resolv_list_add+0xa>
        memmove(&g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt_hw + 1],
   247ea:	4b22      	ldr	r3, [pc, #136]	; (24874 <ble_ll_resolv_list_add+0x124>)
   247ec:	789b      	ldrb	r3, [r3, #2]
   247ee:	4822      	ldr	r0, [pc, #136]	; (24878 <ble_ll_resolv_list_add+0x128>)
   247f0:	2236      	movs	r2, #54	; 0x36
   247f2:	fb03 2c02 	mla	ip, r3, r2, r2
                &g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt_hw],
   247f6:	fb02 0503 	mla	r5, r2, r3, r0
                (g_ble_ll_resolv_data.rl_cnt - g_ble_ll_resolv_data.rl_cnt_hw) *
   247fa:	eba8 0803 	sub.w	r8, r8, r3
        memmove(&g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt_hw + 1],
   247fe:	fb02 f208 	mul.w	r2, r2, r8
   24802:	4629      	mov	r1, r5
   24804:	4460      	add	r0, ip
   24806:	f7f6 fa30 	bl	1ac6a <memmove>
        rl = &g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt_hw];
   2480a:	e7c7      	b.n	2479c <ble_ll_resolv_list_add+0x4c>
        swap_buf(rl->rl_peer_irk, cmd->peer_irk, 16);
   2480c:	2210      	movs	r2, #16
   2480e:	4649      	mov	r1, r9
   24810:	f105 0014 	add.w	r0, r5, #20
   24814:	f7f4 fb52 	bl	18ebc <swap_buf>
        rl->rl_has_peer = 1;
   24818:	2301      	movs	r3, #1
   2481a:	70eb      	strb	r3, [r5, #3]
        ble_ll_resolv_gen_priv_addr(rl, 0);
   2481c:	2100      	movs	r1, #0
   2481e:	4628      	mov	r0, r5
   24820:	f7ff feea 	bl	245f8 <ble_ll_resolv_gen_priv_addr>
   24824:	e7cb      	b.n	247be <ble_ll_resolv_list_add+0x6e>
        swap_buf(rl->rl_local_irk, cmd->local_irk, 16);
   24826:	2210      	movs	r2, #16
   24828:	4621      	mov	r1, r4
   2482a:	1d28      	adds	r0, r5, #4
   2482c:	f7f4 fb46 	bl	18ebc <swap_buf>
        rl->rl_has_local = 1;
   24830:	2101      	movs	r1, #1
   24832:	70a9      	strb	r1, [r5, #2]
        ble_ll_resolv_gen_priv_addr(rl, 1);
   24834:	4628      	mov	r0, r5
   24836:	f7ff fedf 	bl	245f8 <ble_ll_resolv_gen_priv_addr>
   2483a:	e7c5      	b.n	247c8 <ble_ll_resolv_list_add+0x78>
        rc = ble_hw_resolv_list_add(rl->rl_peer_irk);
   2483c:	f105 0014 	add.w	r0, r5, #20
   24840:	f001 fced 	bl	2621e <ble_hw_resolv_list_add>
        BLE_LL_ASSERT(rc == BLE_ERR_SUCCESS);
   24844:	4606      	mov	r6, r0
   24846:	b920      	cbnz	r0, 24852 <ble_ll_resolv_list_add+0x102>
        g_ble_ll_resolv_data.rl_cnt_hw++;
   24848:	4a0a      	ldr	r2, [pc, #40]	; (24874 <ble_ll_resolv_list_add+0x124>)
   2484a:	7893      	ldrb	r3, [r2, #2]
   2484c:	3301      	adds	r3, #1
   2484e:	7093      	strb	r3, [r2, #2]
   24850:	e7be      	b.n	247d0 <ble_ll_resolv_list_add+0x80>
        BLE_LL_ASSERT(rc == BLE_ERR_SUCCESS);
   24852:	f7ef ff4f 	bl	146f4 <hal_debugger_connected>
   24856:	b100      	cbz	r0, 2485a <ble_ll_resolv_list_add+0x10a>
   24858:	be01      	bkpt	0x0001
   2485a:	2300      	movs	r3, #0
   2485c:	461a      	mov	r2, r3
   2485e:	4619      	mov	r1, r3
   24860:	4618      	mov	r0, r3
   24862:	f7f4 fa65 	bl	18d30 <__assert_func>
        return BLE_ERR_CMD_DISALLOWED;
   24866:	260c      	movs	r6, #12
   24868:	e777      	b.n	2475a <ble_ll_resolv_list_add+0xa>
        return BLE_ERR_MEM_CAPACITY;
   2486a:	2607      	movs	r6, #7
   2486c:	e775      	b.n	2475a <ble_ll_resolv_list_add+0xa>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2486e:	2612      	movs	r6, #18
   24870:	e773      	b.n	2475a <ble_ll_resolv_list_add+0xa>
   24872:	bf00      	nop
   24874:	1000469c 	.word	0x1000469c
   24878:	100046c4 	.word	0x100046c4

0002487c <ble_ll_resolv_list_rmv>:
ble_ll_resolv_list_rmv(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_rmv_resolve_list_cp *cmd = (const void *) cmdbuf;
    int position;

    if (len != sizeof(*cmd)) {
   2487c:	2907      	cmp	r1, #7
   2487e:	d001      	beq.n	24884 <ble_ll_resolv_list_rmv+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   24880:	2012      	movs	r0, #18

        return BLE_ERR_SUCCESS;
    }

    return BLE_ERR_UNK_CONN_ID;
}
   24882:	4770      	bx	lr
{
   24884:	b570      	push	{r4, r5, r6, lr}
   24886:	4604      	mov	r4, r0
    if (!ble_ll_resolv_list_chg_allowed()) {
   24888:	f7ff fe86 	bl	24598 <ble_ll_resolv_list_chg_allowed>
   2488c:	2800      	cmp	r0, #0
   2488e:	d037      	beq.n	24900 <ble_ll_resolv_list_rmv+0x84>
    position = ble_ll_is_on_resolv_list(cmd->peer_id_addr, cmd->peer_addr_type);
   24890:	4620      	mov	r0, r4
   24892:	f810 1b01 	ldrb.w	r1, [r0], #1
   24896:	f7ff fe8f 	bl	245b8 <ble_ll_is_on_resolv_list>
    if (position) {
   2489a:	4604      	mov	r4, r0
   2489c:	b390      	cbz	r0, 24904 <ble_ll_resolv_list_rmv+0x88>
        BLE_LL_ASSERT(position <= g_ble_ll_resolv_data.rl_cnt);
   2489e:	4b1a      	ldr	r3, [pc, #104]	; (24908 <ble_ll_resolv_list_rmv+0x8c>)
   248a0:	78dd      	ldrb	r5, [r3, #3]
   248a2:	4285      	cmp	r5, r0
   248a4:	db16      	blt.n	248d4 <ble_ll_resolv_list_rmv+0x58>
        memmove(&g_ble_ll_resolv_list[position - 1],
   248a6:	1e46      	subs	r6, r0, #1
   248a8:	4818      	ldr	r0, [pc, #96]	; (2490c <ble_ll_resolv_list_rmv+0x90>)
   248aa:	2336      	movs	r3, #54	; 0x36
                (g_ble_ll_resolv_data.rl_cnt - position) *
   248ac:	1b2a      	subs	r2, r5, r4
        memmove(&g_ble_ll_resolv_list[position - 1],
   248ae:	fb03 f202 	mul.w	r2, r3, r2
   248b2:	fb03 0104 	mla	r1, r3, r4, r0
   248b6:	fb03 0006 	mla	r0, r3, r6, r0
   248ba:	f7f6 f9d6 	bl	1ac6a <memmove>
        g_ble_ll_resolv_data.rl_cnt--;
   248be:	4b12      	ldr	r3, [pc, #72]	; (24908 <ble_ll_resolv_list_rmv+0x8c>)
   248c0:	3d01      	subs	r5, #1
   248c2:	70dd      	strb	r5, [r3, #3]
        if (position <= g_ble_ll_resolv_data.rl_cnt_hw) {
   248c4:	789b      	ldrb	r3, [r3, #2]
   248c6:	42a3      	cmp	r3, r4
   248c8:	da0e      	bge.n	248e8 <ble_ll_resolv_list_rmv+0x6c>
        if (g_ble_ll_resolv_data.rl_cnt == 0) {
   248ca:	4b0f      	ldr	r3, [pc, #60]	; (24908 <ble_ll_resolv_list_rmv+0x8c>)
   248cc:	78db      	ldrb	r3, [r3, #3]
   248ce:	b19b      	cbz	r3, 248f8 <ble_ll_resolv_list_rmv+0x7c>
        return BLE_ERR_SUCCESS;
   248d0:	2000      	movs	r0, #0
}
   248d2:	bd70      	pop	{r4, r5, r6, pc}
        BLE_LL_ASSERT(position <= g_ble_ll_resolv_data.rl_cnt);
   248d4:	f7ef ff0e 	bl	146f4 <hal_debugger_connected>
   248d8:	b100      	cbz	r0, 248dc <ble_ll_resolv_list_rmv+0x60>
   248da:	be01      	bkpt	0x0001
   248dc:	2300      	movs	r3, #0
   248de:	461a      	mov	r2, r3
   248e0:	4619      	mov	r1, r3
   248e2:	4618      	mov	r0, r3
   248e4:	f7f4 fa24 	bl	18d30 <__assert_func>
            ble_hw_resolv_list_rmv(position - 1);
   248e8:	4630      	mov	r0, r6
   248ea:	f001 fc9a 	bl	26222 <ble_hw_resolv_list_rmv>
            g_ble_ll_resolv_data.rl_cnt_hw--;
   248ee:	4a06      	ldr	r2, [pc, #24]	; (24908 <ble_ll_resolv_list_rmv+0x8c>)
   248f0:	7893      	ldrb	r3, [r2, #2]
   248f2:	3b01      	subs	r3, #1
   248f4:	7093      	strb	r3, [r2, #2]
   248f6:	e7e8      	b.n	248ca <ble_ll_resolv_list_rmv+0x4e>
    os_callout_stop(&co->co);
   248f8:	4805      	ldr	r0, [pc, #20]	; (24910 <ble_ll_resolv_list_rmv+0x94>)
   248fa:	f7f4 fc43 	bl	19184 <os_callout_stop>
}
   248fe:	e7e7      	b.n	248d0 <ble_ll_resolv_list_rmv+0x54>
        return BLE_ERR_CMD_DISALLOWED;
   24900:	200c      	movs	r0, #12
   24902:	e7e6      	b.n	248d2 <ble_ll_resolv_list_rmv+0x56>
    return BLE_ERR_UNK_CONN_ID;
   24904:	2002      	movs	r0, #2
   24906:	e7e4      	b.n	248d2 <ble_ll_resolv_list_rmv+0x56>
   24908:	1000469c 	.word	0x1000469c
   2490c:	100046c4 	.word	0x100046c4
   24910:	100046a4 	.word	0x100046a4

00024914 <ble_ll_resolv_enable_cmd>:
int
ble_ll_resolv_enable_cmd(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_addr_res_en_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof(*cmd)) {
   24914:	2901      	cmp	r1, #1
   24916:	d001      	beq.n	2491c <ble_ll_resolv_enable_cmd+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   24918:	2012      	movs	r0, #18
    }

    g_ble_ll_resolv_data.addr_res_enabled = cmd->enable;

    return BLE_ERR_SUCCESS;
}
   2491a:	4770      	bx	lr
{
   2491c:	b510      	push	{r4, lr}
   2491e:	4604      	mov	r4, r0
    if (ble_ll_is_controller_busy()) {
   24920:	f7ff fe26 	bl	24570 <ble_ll_is_controller_busy>
   24924:	b928      	cbnz	r0, 24932 <ble_ll_resolv_enable_cmd+0x1e>
    if (cmd->enable > 1) {
   24926:	7823      	ldrb	r3, [r4, #0]
   24928:	2b01      	cmp	r3, #1
   2492a:	d804      	bhi.n	24936 <ble_ll_resolv_enable_cmd+0x22>
    g_ble_ll_resolv_data.addr_res_enabled = cmd->enable;
   2492c:	4a03      	ldr	r2, [pc, #12]	; (2493c <ble_ll_resolv_enable_cmd+0x28>)
   2492e:	7013      	strb	r3, [r2, #0]
}
   24930:	bd10      	pop	{r4, pc}
        return  BLE_ERR_CMD_DISALLOWED;
   24932:	200c      	movs	r0, #12
   24934:	e7fc      	b.n	24930 <ble_ll_resolv_enable_cmd+0x1c>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   24936:	2012      	movs	r0, #18
   24938:	e7fa      	b.n	24930 <ble_ll_resolv_enable_cmd+0x1c>
   2493a:	bf00      	nop
   2493c:	1000469c 	.word	0x1000469c

00024940 <ble_ll_resolv_peer_addr_rd>:
    const struct ble_hci_le_rd_peer_recolv_addr_cp *cmd = (const void *) cmdbuf;
    struct ble_hci_le_rd_peer_recolv_addr_rp *rsp = (void *) rspbuf;
    struct ble_ll_resolv_entry *rl;
    int rc;

    if (len != sizeof(*cmd)) {
   24940:	2907      	cmp	r1, #7
   24942:	d116      	bne.n	24972 <ble_ll_resolv_peer_addr_rd+0x32>
{
   24944:	b538      	push	{r3, r4, r5, lr}
   24946:	4614      	mov	r4, r2
   24948:	461d      	mov	r5, r3
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    rl = ble_ll_resolv_list_find(cmd->peer_id_addr, cmd->peer_addr_type);
   2494a:	f810 1b01 	ldrb.w	r1, [r0], #1
   2494e:	f7ff fedf 	bl	24710 <ble_ll_resolv_list_find>
    if (rl) {
   24952:	4602      	mov	r2, r0
   24954:	b140      	cbz	r0, 24968 <ble_ll_resolv_peer_addr_rd+0x28>
        memcpy(rsp->rpa, rl->rl_peer_rpa, BLE_DEV_ADDR_LEN);
   24956:	f852 3f30 	ldr.w	r3, [r2, #48]!
   2495a:	6023      	str	r3, [r4, #0]
   2495c:	8893      	ldrh	r3, [r2, #4]
   2495e:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_SUCCESS;
   24960:	2000      	movs	r0, #0
    } else {
        memset(rsp->rpa, 0, BLE_DEV_ADDR_LEN);
        rc = BLE_ERR_UNK_CONN_ID;
    }

    *rsplen = sizeof(*rsp);
   24962:	2306      	movs	r3, #6
   24964:	702b      	strb	r3, [r5, #0]
    return rc;
}
   24966:	bd38      	pop	{r3, r4, r5, pc}
        memset(rsp->rpa, 0, BLE_DEV_ADDR_LEN);
   24968:	2300      	movs	r3, #0
   2496a:	6023      	str	r3, [r4, #0]
   2496c:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_UNK_CONN_ID;
   2496e:	2002      	movs	r0, #2
   24970:	e7f7      	b.n	24962 <ble_ll_resolv_peer_addr_rd+0x22>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   24972:	2012      	movs	r0, #18
}
   24974:	4770      	bx	lr

00024976 <ble_ll_resolv_local_addr_rd>:
    const struct ble_hci_le_rd_local_recolv_addr_cp *cmd = (const void *) cmdbuf;
    struct ble_hci_le_rd_local_recolv_addr_rp *rsp = (void *) rspbuf;
    struct ble_ll_resolv_entry *rl;
    int rc;

    if (len != sizeof(*cmd)) {
   24976:	2907      	cmp	r1, #7
   24978:	d116      	bne.n	249a8 <ble_ll_resolv_local_addr_rd+0x32>
{
   2497a:	b538      	push	{r3, r4, r5, lr}
   2497c:	4614      	mov	r4, r2
   2497e:	461d      	mov	r5, r3
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    rl = ble_ll_resolv_list_find(cmd->peer_id_addr, cmd->peer_addr_type);
   24980:	f810 1b01 	ldrb.w	r1, [r0], #1
   24984:	f7ff fec4 	bl	24710 <ble_ll_resolv_list_find>
    if (rl) {
   24988:	4602      	mov	r2, r0
   2498a:	b140      	cbz	r0, 2499e <ble_ll_resolv_local_addr_rd+0x28>
        memcpy(rsp->rpa, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
   2498c:	f852 3f2a 	ldr.w	r3, [r2, #42]!
   24990:	6023      	str	r3, [r4, #0]
   24992:	8893      	ldrh	r3, [r2, #4]
   24994:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_SUCCESS;
   24996:	2000      	movs	r0, #0
    } else {
        memset(rsp->rpa, 0, BLE_DEV_ADDR_LEN);
        rc = BLE_ERR_UNK_CONN_ID;
    }

    *rsplen = sizeof(*rsp);
   24998:	2306      	movs	r3, #6
   2499a:	702b      	strb	r3, [r5, #0]
    return rc;
}
   2499c:	bd38      	pop	{r3, r4, r5, pc}
        memset(rsp->rpa, 0, BLE_DEV_ADDR_LEN);
   2499e:	2300      	movs	r3, #0
   249a0:	6023      	str	r3, [r4, #0]
   249a2:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_UNK_CONN_ID;
   249a4:	2002      	movs	r0, #2
   249a6:	e7f7      	b.n	24998 <ble_ll_resolv_local_addr_rd+0x22>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   249a8:	2012      	movs	r0, #18
}
   249aa:	4770      	bx	lr

000249ac <ble_ll_resolv_set_rpa_tmo>:
ble_ll_resolv_set_rpa_tmo(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_rpa_tmo_cp *cmd = (const void *)cmdbuf;
    uint16_t tmo_secs;

    if (len != sizeof(*cmd)) {
   249ac:	2902      	cmp	r1, #2
   249ae:	d11e      	bne.n	249ee <ble_ll_resolv_set_rpa_tmo+0x42>
{
   249b0:	b508      	push	{r3, lr}
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    tmo_secs = le16toh(cmd->rpa_timeout);
   249b2:	8802      	ldrh	r2, [r0, #0]
    if (!((tmo_secs > 0) && (tmo_secs <= 0xA1B8))) {
   249b4:	1e53      	subs	r3, r2, #1
   249b6:	b29b      	uxth	r3, r3
   249b8:	f24a 11b7 	movw	r1, #41399	; 0xa1b7
   249bc:	428b      	cmp	r3, r1
   249be:	d818      	bhi.n	249f2 <ble_ll_resolv_set_rpa_tmo+0x46>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_resolv_data.rpa_tmo = ble_npl_time_ms_to_ticks32(tmo_secs * 1000);
   249c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   249c4:	fb01 f102 	mul.w	r1, r1, r2
   249c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   249cc:	2300      	movs	r3, #0
   249ce:	01c8      	lsls	r0, r1, #7
   249d0:	0e49      	lsrs	r1, r1, #25
   249d2:	f7ef fc93 	bl	142fc <__aeabi_uldivmod>
   249d6:	4b08      	ldr	r3, [pc, #32]	; (249f8 <ble_ll_resolv_set_rpa_tmo+0x4c>)
   249d8:	6058      	str	r0, [r3, #4]

    /* restart timer if there is something on RL */
    if (g_ble_ll_resolv_data.rl_cnt) {
   249da:	78db      	ldrb	r3, [r3, #3]
   249dc:	b90b      	cbnz	r3, 249e2 <ble_ll_resolv_set_rpa_tmo+0x36>
        ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
                              g_ble_ll_resolv_data.rpa_tmo);
    }

    return BLE_ERR_SUCCESS;
   249de:	2000      	movs	r0, #0
}
   249e0:	bd08      	pop	{r3, pc}
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   249e2:	4601      	mov	r1, r0
   249e4:	4805      	ldr	r0, [pc, #20]	; (249fc <ble_ll_resolv_set_rpa_tmo+0x50>)
   249e6:	f7f4 fbeb 	bl	191c0 <os_callout_reset>
    return BLE_ERR_SUCCESS;
   249ea:	2000      	movs	r0, #0
   249ec:	e7f8      	b.n	249e0 <ble_ll_resolv_set_rpa_tmo+0x34>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   249ee:	2012      	movs	r0, #18
}
   249f0:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   249f2:	2012      	movs	r0, #18
   249f4:	e7f4      	b.n	249e0 <ble_ll_resolv_set_rpa_tmo+0x34>
   249f6:	bf00      	nop
   249f8:	1000469c 	.word	0x1000469c
   249fc:	100046a4 	.word	0x100046a4

00024a00 <ble_ll_resolve_set_priv_mode>:

int
ble_ll_resolve_set_priv_mode(const uint8_t *cmdbuf, uint8_t len)
{
   24a00:	b570      	push	{r4, r5, r6, lr}
   24a02:	4604      	mov	r4, r0
   24a04:	460d      	mov	r5, r1
    const struct ble_hci_le_set_privacy_mode_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_resolv_entry *rl;

    if (ble_ll_is_controller_busy()) {
   24a06:	f7ff fdb3 	bl	24570 <ble_ll_is_controller_busy>
   24a0a:	b970      	cbnz	r0, 24a2a <ble_ll_resolve_set_priv_mode+0x2a>
   24a0c:	4606      	mov	r6, r0
        return BLE_ERR_CMD_DISALLOWED;
    }

    if (len != sizeof(*cmd)) {
   24a0e:	2d08      	cmp	r5, #8
   24a10:	d10d      	bne.n	24a2e <ble_ll_resolve_set_priv_mode+0x2e>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    rl = ble_ll_resolv_list_find(cmd->peer_id_addr, cmd->peer_id_addr_type);
   24a12:	4620      	mov	r0, r4
   24a14:	f810 1b01 	ldrb.w	r1, [r0], #1
   24a18:	f7ff fe7a 	bl	24710 <ble_ll_resolv_list_find>
    if (!rl) {
   24a1c:	b148      	cbz	r0, 24a32 <ble_ll_resolve_set_priv_mode+0x32>
        return BLE_ERR_UNK_CONN_ID;
    }

    if (cmd->mode > BLE_HCI_PRIVACY_DEVICE) {
   24a1e:	79e3      	ldrb	r3, [r4, #7]
   24a20:	2b01      	cmp	r3, #1
   24a22:	d808      	bhi.n	24a36 <ble_ll_resolve_set_priv_mode+0x36>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    rl->rl_priv_mode = cmd->mode;
   24a24:	7043      	strb	r3, [r0, #1]

    return BLE_ERR_SUCCESS;
}
   24a26:	4630      	mov	r0, r6
   24a28:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_ERR_CMD_DISALLOWED;
   24a2a:	260c      	movs	r6, #12
   24a2c:	e7fb      	b.n	24a26 <ble_ll_resolve_set_priv_mode+0x26>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   24a2e:	2612      	movs	r6, #18
   24a30:	e7f9      	b.n	24a26 <ble_ll_resolve_set_priv_mode+0x26>
        return BLE_ERR_UNK_CONN_ID;
   24a32:	2602      	movs	r6, #2
   24a34:	e7f7      	b.n	24a26 <ble_ll_resolve_set_priv_mode+0x26>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   24a36:	2612      	movs	r6, #18
   24a38:	e7f5      	b.n	24a26 <ble_ll_resolve_set_priv_mode+0x26>

00024a3a <ble_ll_resolv_get_priv_addr>:
}

void
ble_ll_resolv_get_priv_addr(struct ble_ll_resolv_entry *rl, int local,
                            uint8_t *addr)
{
   24a3a:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;

    BLE_LL_ASSERT(rl != NULL);
   24a3c:	b180      	cbz	r0, 24a60 <ble_ll_resolv_get_priv_addr+0x26>
   24a3e:	460e      	mov	r6, r1
   24a40:	4615      	mov	r5, r2
   24a42:	4604      	mov	r4, r0
    BLE_LL_ASSERT(addr != NULL);
   24a44:	b1b2      	cbz	r2, 24a74 <ble_ll_resolv_get_priv_addr+0x3a>

    OS_ENTER_CRITICAL(sr);
   24a46:	f7f5 ff2f 	bl	1a8a8 <os_arch_save_sr>
    if (local) {
   24a4a:	b33e      	cbz	r6, 24a9c <ble_ll_resolv_get_priv_addr+0x62>
        BLE_LL_ASSERT(rl->rl_has_local);
   24a4c:	78a3      	ldrb	r3, [r4, #2]
   24a4e:	b1db      	cbz	r3, 24a88 <ble_ll_resolv_get_priv_addr+0x4e>
        memcpy(addr, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
   24a50:	f854 3f2a 	ldr.w	r3, [r4, #42]!
   24a54:	602b      	str	r3, [r5, #0]
   24a56:	88a3      	ldrh	r3, [r4, #4]
   24a58:	80ab      	strh	r3, [r5, #4]
    } else {
        BLE_LL_ASSERT(rl->rl_has_peer);
        memcpy(addr, rl->rl_peer_rpa, BLE_DEV_ADDR_LEN);
    }

    OS_EXIT_CRITICAL(sr);
   24a5a:	f7f5 ff2b 	bl	1a8b4 <os_arch_restore_sr>
}
   24a5e:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(rl != NULL);
   24a60:	f7ef fe48 	bl	146f4 <hal_debugger_connected>
   24a64:	b100      	cbz	r0, 24a68 <ble_ll_resolv_get_priv_addr+0x2e>
   24a66:	be01      	bkpt	0x0001
   24a68:	2300      	movs	r3, #0
   24a6a:	461a      	mov	r2, r3
   24a6c:	4619      	mov	r1, r3
   24a6e:	4618      	mov	r0, r3
   24a70:	f7f4 f95e 	bl	18d30 <__assert_func>
    BLE_LL_ASSERT(addr != NULL);
   24a74:	f7ef fe3e 	bl	146f4 <hal_debugger_connected>
   24a78:	b100      	cbz	r0, 24a7c <ble_ll_resolv_get_priv_addr+0x42>
   24a7a:	be01      	bkpt	0x0001
   24a7c:	2300      	movs	r3, #0
   24a7e:	461a      	mov	r2, r3
   24a80:	4619      	mov	r1, r3
   24a82:	4618      	mov	r0, r3
   24a84:	f7f4 f954 	bl	18d30 <__assert_func>
        BLE_LL_ASSERT(rl->rl_has_local);
   24a88:	f7ef fe34 	bl	146f4 <hal_debugger_connected>
   24a8c:	b100      	cbz	r0, 24a90 <ble_ll_resolv_get_priv_addr+0x56>
   24a8e:	be01      	bkpt	0x0001
   24a90:	2300      	movs	r3, #0
   24a92:	461a      	mov	r2, r3
   24a94:	4619      	mov	r1, r3
   24a96:	4618      	mov	r0, r3
   24a98:	f7f4 f94a 	bl	18d30 <__assert_func>
        BLE_LL_ASSERT(rl->rl_has_peer);
   24a9c:	78e3      	ldrb	r3, [r4, #3]
   24a9e:	b12b      	cbz	r3, 24aac <ble_ll_resolv_get_priv_addr+0x72>
        memcpy(addr, rl->rl_peer_rpa, BLE_DEV_ADDR_LEN);
   24aa0:	f854 3f30 	ldr.w	r3, [r4, #48]!
   24aa4:	602b      	str	r3, [r5, #0]
   24aa6:	88a3      	ldrh	r3, [r4, #4]
   24aa8:	80ab      	strh	r3, [r5, #4]
   24aaa:	e7d6      	b.n	24a5a <ble_ll_resolv_get_priv_addr+0x20>
        BLE_LL_ASSERT(rl->rl_has_peer);
   24aac:	f7ef fe22 	bl	146f4 <hal_debugger_connected>
   24ab0:	b100      	cbz	r0, 24ab4 <ble_ll_resolv_get_priv_addr+0x7a>
   24ab2:	be01      	bkpt	0x0001
   24ab4:	2300      	movs	r3, #0
   24ab6:	461a      	mov	r2, r3
   24ab8:	4619      	mov	r1, r3
   24aba:	4618      	mov	r0, r3
   24abc:	f7f4 f938 	bl	18d30 <__assert_func>

00024ac0 <ble_ll_resolv_set_peer_rpa>:

void
ble_ll_resolv_set_peer_rpa(int index, uint8_t *rpa)
{
   24ac0:	b538      	push	{r3, r4, r5, lr}
   24ac2:	4605      	mov	r5, r0
   24ac4:	460c      	mov	r4, r1
    os_sr_t sr;
    struct ble_ll_resolv_entry *rl;

    OS_ENTER_CRITICAL(sr);
   24ac6:	f7f5 feef 	bl	1a8a8 <os_arch_save_sr>
    rl = &g_ble_ll_resolv_list[index];
    memcpy(rl->rl_peer_rpa, rpa, BLE_DEV_ADDR_LEN);
   24aca:	4a06      	ldr	r2, [pc, #24]	; (24ae4 <ble_ll_resolv_set_peer_rpa+0x24>)
   24acc:	2336      	movs	r3, #54	; 0x36
   24ace:	fb03 f305 	mul.w	r3, r3, r5
   24ad2:	3330      	adds	r3, #48	; 0x30
   24ad4:	18d1      	adds	r1, r2, r3
   24ad6:	6825      	ldr	r5, [r4, #0]
   24ad8:	50d5      	str	r5, [r2, r3]
   24ada:	88a3      	ldrh	r3, [r4, #4]
   24adc:	808b      	strh	r3, [r1, #4]
    OS_EXIT_CRITICAL(sr);
   24ade:	f7f5 fee9 	bl	1a8b4 <os_arch_restore_sr>
}
   24ae2:	bd38      	pop	{r3, r4, r5, pc}
   24ae4:	100046c4 	.word	0x100046c4

00024ae8 <ble_ll_resolv_set_local_rpa>:

void
ble_ll_resolv_set_local_rpa(int index, uint8_t *rpa)
{
   24ae8:	b538      	push	{r3, r4, r5, lr}
   24aea:	4605      	mov	r5, r0
   24aec:	460c      	mov	r4, r1
    os_sr_t sr;
    struct ble_ll_resolv_entry *rl;

    OS_ENTER_CRITICAL(sr);
   24aee:	f7f5 fedb 	bl	1a8a8 <os_arch_save_sr>
    rl = &g_ble_ll_resolv_list[index];
    memcpy(rl->rl_local_rpa, rpa, BLE_DEV_ADDR_LEN);
   24af2:	2336      	movs	r3, #54	; 0x36
   24af4:	fb03 f305 	mul.w	r3, r3, r5
   24af8:	3328      	adds	r3, #40	; 0x28
   24afa:	4a05      	ldr	r2, [pc, #20]	; (24b10 <ble_ll_resolv_set_local_rpa+0x28>)
   24afc:	4413      	add	r3, r2
   24afe:	6822      	ldr	r2, [r4, #0]
   24b00:	f8c3 2002 	str.w	r2, [r3, #2]
   24b04:	88a2      	ldrh	r2, [r4, #4]
   24b06:	80da      	strh	r2, [r3, #6]
    OS_EXIT_CRITICAL(sr);
   24b08:	f7f5 fed4 	bl	1a8b4 <os_arch_restore_sr>
}
   24b0c:	bd38      	pop	{r3, r4, r5, pc}
   24b0e:	bf00      	nop
   24b10:	100046c4 	.word	0x100046c4

00024b14 <ble_ll_resolv_gen_rpa>:
 *
 * @return int
 */
int
ble_ll_resolv_gen_rpa(uint8_t *addr, uint8_t addr_type, uint8_t *rpa, int local)
{
   24b14:	b538      	push	{r3, r4, r5, lr}
   24b16:	4615      	mov	r5, r2
   24b18:	461c      	mov	r4, r3
    struct ble_ll_resolv_entry *rl;

    rl = ble_ll_resolv_list_find(addr, addr_type);
   24b1a:	f7ff fdf9 	bl	24710 <ble_ll_resolv_list_find>
    if (rl) {
   24b1e:	b178      	cbz	r0, 24b40 <ble_ll_resolv_gen_rpa+0x2c>
   24b20:	4603      	mov	r3, r0
        if ((local && rl->rl_has_local) || (!local && rl->rl_has_peer)) {
   24b22:	b10c      	cbz	r4, 24b28 <ble_ll_resolv_gen_rpa+0x14>
   24b24:	7882      	ldrb	r2, [r0, #2]
   24b26:	b922      	cbnz	r2, 24b32 <ble_ll_resolv_gen_rpa+0x1e>
   24b28:	b964      	cbnz	r4, 24b44 <ble_ll_resolv_gen_rpa+0x30>
   24b2a:	78da      	ldrb	r2, [r3, #3]
   24b2c:	b90a      	cbnz	r2, 24b32 <ble_ll_resolv_gen_rpa+0x1e>
            ble_ll_resolv_get_priv_addr(rl, local, rpa);
            return 1;
        }
    }

    return 0;
   24b2e:	4620      	mov	r0, r4
   24b30:	e007      	b.n	24b42 <ble_ll_resolv_gen_rpa+0x2e>
            ble_ll_resolv_get_priv_addr(rl, local, rpa);
   24b32:	462a      	mov	r2, r5
   24b34:	4621      	mov	r1, r4
   24b36:	4618      	mov	r0, r3
   24b38:	f7ff ff7f 	bl	24a3a <ble_ll_resolv_get_priv_addr>
            return 1;
   24b3c:	2001      	movs	r0, #1
   24b3e:	e000      	b.n	24b42 <ble_ll_resolv_gen_rpa+0x2e>
    return 0;
   24b40:	2000      	movs	r0, #0
}
   24b42:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
   24b44:	2000      	movs	r0, #0
   24b46:	e7fc      	b.n	24b42 <ble_ll_resolv_gen_rpa+0x2e>

00024b48 <ble_ll_resolv_enabled>:
 */
uint8_t
ble_ll_resolv_enabled(void)
{
    return g_ble_ll_resolv_data.addr_res_enabled;
}
   24b48:	4b01      	ldr	r3, [pc, #4]	; (24b50 <ble_ll_resolv_enabled+0x8>)
   24b4a:	7818      	ldrb	r0, [r3, #0]
   24b4c:	4770      	bx	lr
   24b4e:	bf00      	nop
   24b50:	1000469c 	.word	0x1000469c

00024b54 <ble_ll_resolv_init>:
    ble_ll_resolv_init();
}

void
ble_ll_resolv_init(void)
{
   24b54:	b510      	push	{r4, lr}
    uint8_t hw_size;

    /* Default is 15 minutes */
    g_ble_ll_resolv_data.rpa_tmo = ble_npl_time_ms_to_ticks32(15 * 60 * 1000);
   24b56:	4b09      	ldr	r3, [pc, #36]	; (24b7c <ble_ll_resolv_init+0x28>)
   24b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
   24b5c:	605a      	str	r2, [r3, #4]

    hw_size = ble_hw_resolv_list_size();
   24b5e:	f001 fb61 	bl	26224 <ble_hw_resolv_list_size>
    if (hw_size > MYNEWT_VAL(BLE_LL_RESOLV_LIST_SIZE)) {
   24b62:	2804      	cmp	r0, #4
   24b64:	d900      	bls.n	24b68 <ble_ll_resolv_init+0x14>
        hw_size = MYNEWT_VAL(BLE_LL_RESOLV_LIST_SIZE);
   24b66:	2004      	movs	r0, #4
    }
    g_ble_ll_resolv_data.rl_size = hw_size;
   24b68:	4c04      	ldr	r4, [pc, #16]	; (24b7c <ble_ll_resolv_init+0x28>)
   24b6a:	7060      	strb	r0, [r4, #1]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   24b6c:	2300      	movs	r3, #0
   24b6e:	4a04      	ldr	r2, [pc, #16]	; (24b80 <ble_ll_resolv_init+0x2c>)
   24b70:	4904      	ldr	r1, [pc, #16]	; (24b84 <ble_ll_resolv_init+0x30>)
   24b72:	f104 0008 	add.w	r0, r4, #8
   24b76:	f7f4 faf7 	bl	19168 <os_callout_init>

    ble_npl_callout_init(&g_ble_ll_resolv_data.rpa_timer,
                         &g_ble_ll_data.ll_evq,
                         ble_ll_resolv_rpa_timer_cb,
                         NULL);
}
   24b7a:	bd10      	pop	{r4, pc}
   24b7c:	1000469c 	.word	0x1000469c
   24b80:	00024671 	.word	0x00024671
   24b84:	100040f8 	.word	0x100040f8

00024b88 <ble_ll_resolv_list_reset>:
{
   24b88:	b508      	push	{r3, lr}
    g_ble_ll_resolv_data.addr_res_enabled = 0;
   24b8a:	4805      	ldr	r0, [pc, #20]	; (24ba0 <ble_ll_resolv_list_reset+0x18>)
   24b8c:	2300      	movs	r3, #0
   24b8e:	f800 3b08 	strb.w	r3, [r0], #8
    os_callout_stop(&co->co);
   24b92:	f7f4 faf7 	bl	19184 <os_callout_stop>
    ble_ll_resolv_list_clr();
   24b96:	f7ff fd9d 	bl	246d4 <ble_ll_resolv_list_clr>
    ble_ll_resolv_init();
   24b9a:	f7ff ffdb 	bl	24b54 <ble_ll_resolv_init>
}
   24b9e:	bd08      	pop	{r3, pc}
   24ba0:	1000469c 	.word	0x1000469c

00024ba4 <ble_ll_rfmgmt_init>:

#else

void
ble_ll_rfmgmt_init(void)
{
   24ba4:	b508      	push	{r3, lr}
    static bool enabled = false;

    if (!enabled) {
   24ba6:	4b05      	ldr	r3, [pc, #20]	; (24bbc <ble_ll_rfmgmt_init+0x18>)
   24ba8:	781b      	ldrb	r3, [r3, #0]
   24baa:	b11b      	cbz	r3, 24bb4 <ble_ll_rfmgmt_init+0x10>
        ble_phy_rfclk_enable();
    }

    enabled = true;
   24bac:	4b03      	ldr	r3, [pc, #12]	; (24bbc <ble_ll_rfmgmt_init+0x18>)
   24bae:	2201      	movs	r2, #1
   24bb0:	701a      	strb	r2, [r3, #0]
}
   24bb2:	bd08      	pop	{r3, pc}
        ble_phy_rfclk_enable();
   24bb4:	f001 fbe7 	bl	26386 <ble_phy_rfclk_enable>
   24bb8:	e7f8      	b.n	24bac <ble_ll_rfmgmt_init+0x8>
   24bba:	bf00      	nop
   24bbc:	1000479c 	.word	0x1000479c

00024bc0 <ble_ll_scan_get_next_adv_prim_chan>:
}

static uint8_t
ble_ll_scan_get_next_adv_prim_chan(uint8_t chan)
{
    ++chan;
   24bc0:	3001      	adds	r0, #1
   24bc2:	b2c0      	uxtb	r0, r0
    if (chan == BLE_PHY_NUM_CHANS) {
   24bc4:	2828      	cmp	r0, #40	; 0x28
   24bc6:	d000      	beq.n	24bca <ble_ll_scan_get_next_adv_prim_chan+0xa>
        chan = BLE_PHY_ADV_CHAN_START;
    }

    return chan;
}
   24bc8:	4770      	bx	lr
        chan = BLE_PHY_ADV_CHAN_START;
   24bca:	2025      	movs	r0, #37	; 0x25
   24bcc:	e7fc      	b.n	24bc8 <ble_ll_scan_get_next_adv_prim_chan+0x8>

00024bce <ble_ll_scan_move_window_to>:

static uint32_t
ble_ll_scan_move_window_to(struct ble_ll_scan_phy *scanp, uint32_t time)
{
   24bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24bd0:	4605      	mov	r5, r0
   24bd2:	460e      	mov	r6, r1
    /*
     * Move window until given tick is before or inside window and move to next
     * channel for each skipped interval.
     */

    end_time = scanp->timing.start_time + scanp->timing.window;
   24bd4:	68c4      	ldr	r4, [r0, #12]
   24bd6:	6887      	ldr	r7, [r0, #8]
   24bd8:	443c      	add	r4, r7
    while (LL_TMR_GEQ(time, end_time)) {
   24bda:	1b34      	subs	r4, r6, r4
   24bdc:	2c00      	cmp	r4, #0
   24bde:	db09      	blt.n	24bf4 <ble_ll_scan_move_window_to+0x26>
        scanp->timing.start_time += scanp->timing.interval;
   24be0:	686c      	ldr	r4, [r5, #4]
   24be2:	68eb      	ldr	r3, [r5, #12]
   24be4:	441c      	add	r4, r3
   24be6:	60ec      	str	r4, [r5, #12]
        scanp->scan_chan = ble_ll_scan_get_next_adv_prim_chan(scanp->scan_chan);
   24be8:	78e8      	ldrb	r0, [r5, #3]
   24bea:	f7ff ffe9 	bl	24bc0 <ble_ll_scan_get_next_adv_prim_chan>
   24bee:	70e8      	strb	r0, [r5, #3]
        end_time = scanp->timing.start_time + scanp->timing.window;
   24bf0:	443c      	add	r4, r7
   24bf2:	e7f2      	b.n	24bda <ble_ll_scan_move_window_to+0xc>
    }

    return scanp->timing.start_time;
}
   24bf4:	68e8      	ldr	r0, [r5, #12]
   24bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024bf8 <ble_ll_scan_is_inside_window>:

static bool
ble_ll_scan_is_inside_window(struct ble_ll_scan_phy *scanp, uint32_t time)
{
   24bf8:	b538      	push	{r3, r4, r5, lr}
   24bfa:	4605      	mov	r5, r0
   24bfc:	460c      	mov	r4, r1
    uint32_t start_time;

    /* Make sure we are checking against closest window */
    start_time = ble_ll_scan_move_window_to(scanp, time);
   24bfe:	f7ff ffe6 	bl	24bce <ble_ll_scan_move_window_to>

    if (scanp->timing.window == scanp->timing.interval) {
   24c02:	68a9      	ldr	r1, [r5, #8]
   24c04:	686b      	ldr	r3, [r5, #4]
   24c06:	4299      	cmp	r1, r3
   24c08:	d00c      	beq.n	24c24 <ble_ll_scan_is_inside_window+0x2c>
        /* always inside window in continuous scan */
        return true;
    }

    return LL_TMR_GEQ(time, start_time) &&
   24c0a:	1a23      	subs	r3, r4, r0
   24c0c:	2b00      	cmp	r3, #0
   24c0e:	db05      	blt.n	24c1c <ble_ll_scan_is_inside_window+0x24>
           LL_TMR_LT(time, start_time + scanp->timing.window);
   24c10:	4408      	add	r0, r1
   24c12:	1a24      	subs	r4, r4, r0
    return LL_TMR_GEQ(time, start_time) &&
   24c14:	2c00      	cmp	r4, #0
   24c16:	db03      	blt.n	24c20 <ble_ll_scan_is_inside_window+0x28>
   24c18:	2000      	movs	r0, #0
   24c1a:	e000      	b.n	24c1e <ble_ll_scan_is_inside_window+0x26>
   24c1c:	2000      	movs	r0, #0
}
   24c1e:	bd38      	pop	{r3, r4, r5, pc}
    return LL_TMR_GEQ(time, start_time) &&
   24c20:	2001      	movs	r0, #1
   24c22:	e7fc      	b.n	24c1e <ble_ll_scan_is_inside_window+0x26>
        return true;
   24c24:	2001      	movs	r0, #1
   24c26:	e7fa      	b.n	24c1e <ble_ll_scan_is_inside_window+0x26>

00024c28 <ble_ll_scan_get_addr_data_from_legacy>:
}

static void
ble_ll_scan_get_addr_data_from_legacy(uint8_t pdu_type, uint8_t *rxbuf,
                                     struct ble_ll_scan_addr_data *addrd)
{
   24c28:	b510      	push	{r4, lr}
    BLE_LL_ASSERT(pdu_type < BLE_ADV_PDU_TYPE_ADV_EXT_IND);
   24c2a:	2806      	cmp	r0, #6
   24c2c:	d813      	bhi.n	24c56 <ble_ll_scan_get_addr_data_from_legacy+0x2e>

    addrd->adva = rxbuf + BLE_LL_PDU_HDR_LEN;
   24c2e:	1c8b      	adds	r3, r1, #2
   24c30:	6013      	str	r3, [r2, #0]
    addrd->adva_type = ble_ll_get_addr_type(rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK);
   24c32:	780b      	ldrb	r3, [r1, #0]
uint32_t ble_ll_rand(void);

static inline int
ble_ll_get_addr_type(uint8_t txrxflag)
{
    if (txrxflag) {
   24c34:	f013 0f40 	tst.w	r3, #64	; 0x40
   24c38:	d117      	bne.n	24c6a <ble_ll_scan_get_addr_data_from_legacy+0x42>
        return BLE_HCI_ADV_OWN_ADDR_RANDOM;
    }
    return BLE_HCI_ADV_OWN_ADDR_PUBLIC;
   24c3a:	2400      	movs	r4, #0
   24c3c:	7b13      	ldrb	r3, [r2, #12]
   24c3e:	f364 0300 	bfi	r3, r4, #0, #1
   24c42:	7313      	strb	r3, [r2, #12]

    if (pdu_type == BLE_ADV_PDU_TYPE_ADV_DIRECT_IND) {
   24c44:	2801      	cmp	r0, #1
   24c46:	d012      	beq.n	24c6e <ble_ll_scan_get_addr_data_from_legacy+0x46>
        addrd->targeta = rxbuf + BLE_LL_PDU_HDR_LEN + BLE_DEV_ADDR_LEN;
        addrd->targeta_type = ble_ll_get_addr_type(rxbuf[0] & BLE_ADV_PDU_HDR_RXADD_MASK);
    } else {
        addrd->targeta = NULL;
   24c48:	2100      	movs	r1, #0
   24c4a:	6051      	str	r1, [r2, #4]
        addrd->targeta_type = 0;
   24c4c:	7b13      	ldrb	r3, [r2, #12]
   24c4e:	f361 0341 	bfi	r3, r1, #1, #1
   24c52:	7313      	strb	r3, [r2, #12]
    }
}
   24c54:	bd10      	pop	{r4, pc}
    BLE_LL_ASSERT(pdu_type < BLE_ADV_PDU_TYPE_ADV_EXT_IND);
   24c56:	f7ef fd4d 	bl	146f4 <hal_debugger_connected>
   24c5a:	b100      	cbz	r0, 24c5e <ble_ll_scan_get_addr_data_from_legacy+0x36>
   24c5c:	be01      	bkpt	0x0001
   24c5e:	2300      	movs	r3, #0
   24c60:	461a      	mov	r2, r3
   24c62:	4619      	mov	r1, r3
   24c64:	4618      	mov	r0, r3
   24c66:	f7f4 f863 	bl	18d30 <__assert_func>
        return BLE_HCI_ADV_OWN_ADDR_RANDOM;
   24c6a:	2401      	movs	r4, #1
   24c6c:	e7e6      	b.n	24c3c <ble_ll_scan_get_addr_data_from_legacy+0x14>
        addrd->targeta = rxbuf + BLE_LL_PDU_HDR_LEN + BLE_DEV_ADDR_LEN;
   24c6e:	f101 0308 	add.w	r3, r1, #8
   24c72:	6053      	str	r3, [r2, #4]
    if (txrxflag) {
   24c74:	f991 3000 	ldrsb.w	r3, [r1]
   24c78:	2b00      	cmp	r3, #0
   24c7a:	db05      	blt.n	24c88 <ble_ll_scan_get_addr_data_from_legacy+0x60>
    return BLE_HCI_ADV_OWN_ADDR_PUBLIC;
   24c7c:	2100      	movs	r1, #0
        addrd->targeta_type = ble_ll_get_addr_type(rxbuf[0] & BLE_ADV_PDU_HDR_RXADD_MASK);
   24c7e:	7b13      	ldrb	r3, [r2, #12]
   24c80:	f361 0341 	bfi	r3, r1, #1, #1
   24c84:	7313      	strb	r3, [r2, #12]
   24c86:	e7e5      	b.n	24c54 <ble_ll_scan_get_addr_data_from_legacy+0x2c>
        return BLE_HCI_ADV_OWN_ADDR_RANDOM;
   24c88:	2101      	movs	r1, #1
   24c8a:	e7f8      	b.n	24c7e <ble_ll_scan_get_addr_data_from_legacy+0x56>

00024c8c <ble_ll_scan_req_backoff>:
{
   24c8c:	b510      	push	{r4, lr}
    BLE_LL_ASSERT(scansm->backoff_count == 0);
   24c8e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   24c90:	b9fb      	cbnz	r3, 24cd2 <ble_ll_scan_req_backoff+0x46>
   24c92:	4604      	mov	r4, r0
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   24c94:	7903      	ldrb	r3, [r0, #4]
   24c96:	bb33      	cbnz	r3, 24ce6 <ble_ll_scan_req_backoff+0x5a>
    if (success) {
   24c98:	2900      	cmp	r1, #0
   24c9a:	d036      	beq.n	24d0a <ble_ll_scan_req_backoff+0x7e>
        scansm->scan_rsp_cons_fails = 0;
   24c9c:	2300      	movs	r3, #0
   24c9e:	7143      	strb	r3, [r0, #5]
        ++scansm->scan_rsp_cons_ok;
   24ca0:	7983      	ldrb	r3, [r0, #6]
   24ca2:	3301      	adds	r3, #1
   24ca4:	b2db      	uxtb	r3, r3
   24ca6:	7183      	strb	r3, [r0, #6]
        if (scansm->scan_rsp_cons_ok == 2) {
   24ca8:	2b02      	cmp	r3, #2
   24caa:	d026      	beq.n	24cfa <ble_ll_scan_req_backoff+0x6e>
        STATS_INC(ble_ll_stats, scan_req_txg);
   24cac:	4a27      	ldr	r2, [pc, #156]	; (24d4c <ble_ll_scan_req_backoff+0xc0>)
   24cae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   24cb2:	3301      	adds	r3, #1
   24cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    scansm->backoff_count = ble_ll_rand() & (scansm->upper_limit - 1);
   24cb8:	f7ff fc04 	bl	244c4 <ble_ll_rand>
   24cbc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   24cbe:	3b01      	subs	r3, #1
   24cc0:	b29b      	uxth	r3, r3
   24cc2:	4003      	ands	r3, r0
    ++scansm->backoff_count;
   24cc4:	3301      	adds	r3, #1
   24cc6:	b29b      	uxth	r3, r3
   24cc8:	8563      	strh	r3, [r4, #42]	; 0x2a
    BLE_LL_ASSERT(scansm->backoff_count <= 256);
   24cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   24cce:	d833      	bhi.n	24d38 <ble_ll_scan_req_backoff+0xac>
}
   24cd0:	bd10      	pop	{r4, pc}
    BLE_LL_ASSERT(scansm->backoff_count == 0);
   24cd2:	f7ef fd0f 	bl	146f4 <hal_debugger_connected>
   24cd6:	b100      	cbz	r0, 24cda <ble_ll_scan_req_backoff+0x4e>
   24cd8:	be01      	bkpt	0x0001
   24cda:	2300      	movs	r3, #0
   24cdc:	461a      	mov	r2, r3
   24cde:	4619      	mov	r1, r3
   24ce0:	4618      	mov	r0, r3
   24ce2:	f7f4 f825 	bl	18d30 <__assert_func>
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   24ce6:	f7ef fd05 	bl	146f4 <hal_debugger_connected>
   24cea:	b100      	cbz	r0, 24cee <ble_ll_scan_req_backoff+0x62>
   24cec:	be01      	bkpt	0x0001
   24cee:	2300      	movs	r3, #0
   24cf0:	461a      	mov	r2, r3
   24cf2:	4619      	mov	r1, r3
   24cf4:	4618      	mov	r0, r3
   24cf6:	f7f4 f81b 	bl	18d30 <__assert_func>
            scansm->scan_rsp_cons_ok = 0;
   24cfa:	2300      	movs	r3, #0
   24cfc:	7183      	strb	r3, [r0, #6]
            if (scansm->upper_limit > 1) {
   24cfe:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   24d00:	2b01      	cmp	r3, #1
   24d02:	d9d3      	bls.n	24cac <ble_ll_scan_req_backoff+0x20>
                scansm->upper_limit >>= 1;
   24d04:	085b      	lsrs	r3, r3, #1
   24d06:	8503      	strh	r3, [r0, #40]	; 0x28
   24d08:	e7d0      	b.n	24cac <ble_ll_scan_req_backoff+0x20>
        scansm->scan_rsp_cons_ok = 0;
   24d0a:	2300      	movs	r3, #0
   24d0c:	7183      	strb	r3, [r0, #6]
        ++scansm->scan_rsp_cons_fails;
   24d0e:	7943      	ldrb	r3, [r0, #5]
   24d10:	3301      	adds	r3, #1
   24d12:	b2db      	uxtb	r3, r3
   24d14:	7143      	strb	r3, [r0, #5]
        if (scansm->scan_rsp_cons_fails == 2) {
   24d16:	2b02      	cmp	r3, #2
   24d18:	d006      	beq.n	24d28 <ble_ll_scan_req_backoff+0x9c>
        STATS_INC(ble_ll_stats, scan_req_txf);
   24d1a:	4a0c      	ldr	r2, [pc, #48]	; (24d4c <ble_ll_scan_req_backoff+0xc0>)
   24d1c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   24d20:	3301      	adds	r3, #1
   24d22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
   24d26:	e7c7      	b.n	24cb8 <ble_ll_scan_req_backoff+0x2c>
            scansm->scan_rsp_cons_fails = 0;
   24d28:	2300      	movs	r3, #0
   24d2a:	7143      	strb	r3, [r0, #5]
            if (scansm->upper_limit < 256) {
   24d2c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   24d2e:	2bff      	cmp	r3, #255	; 0xff
   24d30:	d8f3      	bhi.n	24d1a <ble_ll_scan_req_backoff+0x8e>
                scansm->upper_limit <<= 1;
   24d32:	005b      	lsls	r3, r3, #1
   24d34:	8503      	strh	r3, [r0, #40]	; 0x28
   24d36:	e7f0      	b.n	24d1a <ble_ll_scan_req_backoff+0x8e>
    BLE_LL_ASSERT(scansm->backoff_count <= 256);
   24d38:	f7ef fcdc 	bl	146f4 <hal_debugger_connected>
   24d3c:	b100      	cbz	r0, 24d40 <ble_ll_scan_req_backoff+0xb4>
   24d3e:	be01      	bkpt	0x0001
   24d40:	2300      	movs	r3, #0
   24d42:	461a      	mov	r2, r3
   24d44:	4619      	mov	r1, r3
   24d46:	4618      	mov	r0, r3
   24d48:	f7f3 fff2 	bl	18d30 <__assert_func>
   24d4c:	10003fdc 	.word	0x10003fdc

00024d50 <ble_ll_scan_dup_update_legacy>:
{
   24d50:	b570      	push	{r4, r5, r6, lr}
    e = TAILQ_FIRST(&g_scan_dup_list);
   24d52:	4c16      	ldr	r4, [pc, #88]	; (24dac <ble_ll_scan_dup_update_legacy+0x5c>)
   24d54:	6824      	ldr	r4, [r4, #0]
    BLE_LL_ASSERT(e && e->type == type && !memcmp(e->addr, addr, 6));
   24d56:	b1ac      	cbz	r4, 24d84 <ble_ll_scan_dup_update_legacy+0x34>
   24d58:	4616      	mov	r6, r2
   24d5a:	461d      	mov	r5, r3
   24d5c:	f000 0001 	and.w	r0, r0, #1
   24d60:	7823      	ldrb	r3, [r4, #0]
   24d62:	4283      	cmp	r3, r0
   24d64:	d10e      	bne.n	24d84 <ble_ll_scan_dup_update_legacy+0x34>
   24d66:	2206      	movs	r2, #6
   24d68:	1c60      	adds	r0, r4, #1
   24d6a:	f7f5 ff4d 	bl	1ac08 <memcmp>
   24d6e:	b948      	cbnz	r0, 24d84 <ble_ll_scan_dup_update_legacy+0x34>
    if (subev == BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT) {
   24d70:	2e0b      	cmp	r6, #11
   24d72:	d011      	beq.n	24d98 <ble_ll_scan_dup_update_legacy+0x48>
        if (evtype == BLE_HCI_ADV_RPT_EVTYPE_SCAN_RSP) {
   24d74:	2d04      	cmp	r5, #4
   24d76:	d014      	beq.n	24da2 <ble_ll_scan_dup_update_legacy+0x52>
            e->flags |= BLE_LL_SCAN_DUP_F_ADV_REPORT_SENT;
   24d78:	79e3      	ldrb	r3, [r4, #7]
   24d7a:	f043 0301 	orr.w	r3, r3, #1
   24d7e:	71e3      	strb	r3, [r4, #7]
}
   24d80:	2000      	movs	r0, #0
   24d82:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(e && e->type == type && !memcmp(e->addr, addr, 6));
   24d84:	f7ef fcb6 	bl	146f4 <hal_debugger_connected>
   24d88:	b100      	cbz	r0, 24d8c <ble_ll_scan_dup_update_legacy+0x3c>
   24d8a:	be01      	bkpt	0x0001
   24d8c:	2300      	movs	r3, #0
   24d8e:	461a      	mov	r2, r3
   24d90:	4619      	mov	r1, r3
   24d92:	4618      	mov	r0, r3
   24d94:	f7f3 ffcc 	bl	18d30 <__assert_func>
        e->flags |= BLE_LL_SCAN_DUP_F_DIR_ADV_REPORT_SENT;
   24d98:	79e3      	ldrb	r3, [r4, #7]
   24d9a:	f043 0302 	orr.w	r3, r3, #2
   24d9e:	71e3      	strb	r3, [r4, #7]
   24da0:	e7ee      	b.n	24d80 <ble_ll_scan_dup_update_legacy+0x30>
            e->flags |= BLE_LL_SCAN_DUP_F_SCAN_RSP_SENT;
   24da2:	79e3      	ldrb	r3, [r4, #7]
   24da4:	f043 0304 	orr.w	r3, r3, #4
   24da8:	71e3      	strb	r3, [r4, #7]
   24daa:	e7e9      	b.n	24d80 <ble_ll_scan_dup_update_legacy+0x30>
   24dac:	1000488c 	.word	0x1000488c

00024db0 <ble_ll_scan_timer_cb>:
 *
 * @param arg Pointer to scan state machine.
 */
void
ble_ll_scan_timer_cb(void *arg)
{
   24db0:	b508      	push	{r3, lr}
    struct ble_ll_scan_sm *scansm;

    scansm = (struct ble_ll_scan_sm *)arg;
    ble_ll_event_send(&scansm->scan_sched_ev);
   24db2:	3030      	adds	r0, #48	; 0x30
   24db4:	f7fa f81a 	bl	1edec <ble_ll_event_send>
}
   24db8:	bd08      	pop	{r3, pc}
	...

00024dbc <ble_ll_scan_start>:
{
   24dbc:	b538      	push	{r3, r4, r5, lr}
   24dbe:	4604      	mov	r4, r0
    struct ble_ll_scan_phy *scanp = scansm->scanp;
   24dc0:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   24dc2:	7923      	ldrb	r3, [r4, #4]
   24dc4:	b9f3      	cbnz	r3, 24e04 <ble_ll_scan_start+0x48>
    rc = ble_phy_setchan(chan, BLE_ACCESS_ADDR_ADV, BLE_LL_CRCINIT_ADV);
   24dc6:	4a22      	ldr	r2, [pc, #136]	; (24e50 <ble_ll_scan_start+0x94>)
   24dc8:	4922      	ldr	r1, [pc, #136]	; (24e54 <ble_ll_scan_start+0x98>)
   24dca:	78c0      	ldrb	r0, [r0, #3]
   24dcc:	f001 fa72 	bl	262b4 <ble_phy_setchan>
    BLE_LL_ASSERT(rc == 0);
   24dd0:	4605      	mov	r5, r0
   24dd2:	bb08      	cbnz	r0, 24e18 <ble_ll_scan_start+0x5c>
    ble_phy_set_txend_cb(NULL, NULL);
   24dd4:	2100      	movs	r1, #0
   24dd6:	4608      	mov	r0, r1
   24dd8:	f001 fa34 	bl	26244 <ble_phy_set_txend_cb>
    ble_phy_encrypt_disable();
   24ddc:	f001 fa30 	bl	26240 <ble_phy_encrypt_disable>
    if (ble_ll_resolv_enabled()) {
   24de0:	f7ff feb2 	bl	24b48 <ble_ll_resolv_enabled>
   24de4:	b310      	cbz	r0, 24e2c <ble_ll_scan_start+0x70>
        ble_phy_resolv_list_enable();
   24de6:	f001 fac1 	bl	2636c <ble_phy_resolv_list_enable>
    return os_cputime_get32();
   24dea:	f00f f888 	bl	33efe <os_cputime_get32>
    rc = ble_phy_rx_set_start_time(ble_ll_tmr_get() +
   24dee:	4b1a      	ldr	r3, [pc, #104]	; (24e58 <ble_ll_scan_start+0x9c>)
   24df0:	781b      	ldrb	r3, [r3, #0]
   24df2:	2100      	movs	r1, #0
   24df4:	4418      	add	r0, r3
   24df6:	f001 fa2d 	bl	26254 <ble_phy_rx_set_start_time>
    if (!rc || rc == BLE_PHY_ERR_RX_LATE) {
   24dfa:	b1d0      	cbz	r0, 24e32 <ble_ll_scan_start+0x76>
   24dfc:	2806      	cmp	r0, #6
   24dfe:	d018      	beq.n	24e32 <ble_ll_scan_start+0x76>
    rc = ble_phy_rx_set_start_time(ble_ll_tmr_get() +
   24e00:	4605      	mov	r5, r0
    return rc;
   24e02:	e01f      	b.n	24e44 <ble_ll_scan_start+0x88>
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   24e04:	f7ef fc76 	bl	146f4 <hal_debugger_connected>
   24e08:	b100      	cbz	r0, 24e0c <ble_ll_scan_start+0x50>
   24e0a:	be01      	bkpt	0x0001
   24e0c:	2300      	movs	r3, #0
   24e0e:	461a      	mov	r2, r3
   24e10:	4619      	mov	r1, r3
   24e12:	4618      	mov	r0, r3
   24e14:	f7f3 ff8c 	bl	18d30 <__assert_func>
    BLE_LL_ASSERT(rc == 0);
   24e18:	f7ef fc6c 	bl	146f4 <hal_debugger_connected>
   24e1c:	b100      	cbz	r0, 24e20 <ble_ll_scan_start+0x64>
   24e1e:	be01      	bkpt	0x0001
   24e20:	2300      	movs	r3, #0
   24e22:	461a      	mov	r2, r3
   24e24:	4619      	mov	r1, r3
   24e26:	4618      	mov	r0, r3
   24e28:	f7f3 ff82 	bl	18d30 <__assert_func>
        ble_phy_resolv_list_disable();
   24e2c:	f001 faa4 	bl	26378 <ble_phy_resolv_list_disable>
   24e30:	e7db      	b.n	24dea <ble_ll_scan_start+0x2e>
        if (scansm->scan_filt_policy & 1) {
   24e32:	78a3      	ldrb	r3, [r4, #2]
   24e34:	f013 0f01 	tst.w	r3, #1
   24e38:	d006      	beq.n	24e48 <ble_ll_scan_start+0x8c>
            ble_ll_whitelist_enable();
   24e3a:	f001 f9b1 	bl	261a0 <ble_ll_whitelist_enable>
        ble_ll_state_set(BLE_LL_STATE_SCANNING);
   24e3e:	2002      	movs	r0, #2
   24e40:	f7f9 ffc8 	bl	1edd4 <ble_ll_state_set>
}
   24e44:	4628      	mov	r0, r5
   24e46:	bd38      	pop	{r3, r4, r5, pc}
            ble_ll_whitelist_disable();
   24e48:	f001 f9ae 	bl	261a8 <ble_ll_whitelist_disable>
   24e4c:	e7f7      	b.n	24e3e <ble_ll_scan_start+0x82>
   24e4e:	bf00      	nop
   24e50:	00555555 	.word	0x00555555
   24e54:	8e89bed6 	.word	0x8e89bed6
   24e58:	10004930 	.word	0x10004930

00024e5c <ble_ll_scan_rx_pkt_in_restore_addr_data>:
#endif

static void
ble_ll_scan_rx_pkt_in_restore_addr_data(struct ble_mbuf_hdr *hdr,
                                        struct ble_ll_scan_addr_data *addrd)
{
   24e5c:	b538      	push	{r3, r4, r5, lr}
   24e5e:	460c      	mov	r4, r1
    struct ble_ll_scan_sm *scansm = &g_ble_ll_scan_sm;
    struct ble_mbuf_hdr_rxinfo *rxinfo = &hdr->rxinfo;
    struct ble_ll_resolv_entry *rl;
#endif

    addrd->adv_addr = addrd->adva;
   24e60:	680b      	ldr	r3, [r1, #0]
   24e62:	608b      	str	r3, [r1, #8]
    addrd->adv_addr_type = addrd->adva_type;
   24e64:	7b0a      	ldrb	r2, [r1, #12]
   24e66:	4613      	mov	r3, r2
   24e68:	f362 0382 	bfi	r3, r2, #2, #1
   24e6c:	730b      	strb	r3, [r1, #12]

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    addrd->rpa_index = rxinfo->rpa_index;
   24e6e:	f990 3007 	ldrsb.w	r3, [r0, #7]
   24e72:	734b      	strb	r3, [r1, #13]

    if (hdr->rxinfo.flags & BLE_MBUF_HDR_F_RESOLVED) {
   24e74:	8802      	ldrh	r2, [r0, #0]
   24e76:	f412 6f80 	tst.w	r2, #1024	; 0x400
   24e7a:	d01d      	beq.n	24eb8 <ble_ll_scan_rx_pkt_in_restore_addr_data+0x5c>
        BLE_LL_ASSERT(rxinfo->rpa_index >= 0);
   24e7c:	2b00      	cmp	r3, #0
   24e7e:	db11      	blt.n	24ea4 <ble_ll_scan_rx_pkt_in_restore_addr_data+0x48>
        rl = &g_ble_ll_resolv_list[rxinfo->rpa_index];
        addrd->adv_addr = rl->rl_identity_addr;
   24e80:	2236      	movs	r2, #54	; 0x36
   24e82:	fb02 f303 	mul.w	r3, r2, r3
   24e86:	f103 0220 	add.w	r2, r3, #32
   24e8a:	491a      	ldr	r1, [pc, #104]	; (24ef4 <ble_ll_scan_rx_pkt_in_restore_addr_data+0x98>)
   24e8c:	440a      	add	r2, r1
   24e8e:	3204      	adds	r2, #4
   24e90:	60a2      	str	r2, [r4, #8]
        addrd->adv_addr_type = rl->rl_addr_type;
   24e92:	5cca      	ldrb	r2, [r1, r3]
   24e94:	7b23      	ldrb	r3, [r4, #12]
   24e96:	f362 0382 	bfi	r3, r2, #2, #1
        addrd->adva_resolved = 1;
   24e9a:	b2db      	uxtb	r3, r3
   24e9c:	f043 0308 	orr.w	r3, r3, #8
   24ea0:	7323      	strb	r3, [r4, #12]
   24ea2:	e00d      	b.n	24ec0 <ble_ll_scan_rx_pkt_in_restore_addr_data+0x64>
        BLE_LL_ASSERT(rxinfo->rpa_index >= 0);
   24ea4:	f7ef fc26 	bl	146f4 <hal_debugger_connected>
   24ea8:	b100      	cbz	r0, 24eac <ble_ll_scan_rx_pkt_in_restore_addr_data+0x50>
   24eaa:	be01      	bkpt	0x0001
   24eac:	2300      	movs	r3, #0
   24eae:	461a      	mov	r2, r3
   24eb0:	4619      	mov	r1, r3
   24eb2:	4618      	mov	r0, r3
   24eb4:	f7f3 ff3c 	bl	18d30 <__assert_func>
    } else {
        addrd->adva_resolved = 0;
   24eb8:	7b0b      	ldrb	r3, [r1, #12]
   24eba:	f36f 03c3 	bfc	r3, #3, #1
   24ebe:	730b      	strb	r3, [r1, #12]
    }

    if (hdr->rxinfo.flags & BLE_MBUF_HDR_F_TARGETA_RESOLVED) {
   24ec0:	8803      	ldrh	r3, [r0, #0]
   24ec2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   24ec6:	d104      	bne.n	24ed2 <ble_ll_scan_rx_pkt_in_restore_addr_data+0x76>
        addrd->targeta = ble_ll_get_our_devaddr(scansm->own_addr_type & 1);
        addrd->targeta_type = scansm->own_addr_type & 1;
        addrd->targeta_resolved = 1;
    } else {
        addrd->targeta_resolved = 0;
   24ec8:	7b23      	ldrb	r3, [r4, #12]
   24eca:	f36f 1304 	bfc	r3, #4, #1
   24ece:	7323      	strb	r3, [r4, #12]
    }
#endif
}
   24ed0:	bd38      	pop	{r3, r4, r5, pc}
        addrd->targeta = ble_ll_get_our_devaddr(scansm->own_addr_type & 1);
   24ed2:	4d09      	ldr	r5, [pc, #36]	; (24ef8 <ble_ll_scan_rx_pkt_in_restore_addr_data+0x9c>)
   24ed4:	7868      	ldrb	r0, [r5, #1]
   24ed6:	f000 0001 	and.w	r0, r0, #1
   24eda:	f7f9 ff3f 	bl	1ed5c <ble_ll_get_our_devaddr>
   24ede:	6060      	str	r0, [r4, #4]
        addrd->targeta_type = scansm->own_addr_type & 1;
   24ee0:	786a      	ldrb	r2, [r5, #1]
   24ee2:	7b23      	ldrb	r3, [r4, #12]
   24ee4:	f362 0341 	bfi	r3, r2, #1, #1
        addrd->targeta_resolved = 1;
   24ee8:	b2db      	uxtb	r3, r3
   24eea:	f043 0310 	orr.w	r3, r3, #16
   24eee:	7323      	strb	r3, [r4, #12]
   24ef0:	e7ee      	b.n	24ed0 <ble_ll_scan_rx_pkt_in_restore_addr_data+0x74>
   24ef2:	bf00      	nop
   24ef4:	100046c4 	.word	0x100046c4
   24ef8:	10004804 	.word	0x10004804

00024efc <ble_ll_scan_dup_check_legacy>:
{
   24efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24efe:	460e      	mov	r6, r1
   24f00:	4617      	mov	r7, r2
    type = BLE_LL_SCAN_ENTRY_TYPE_LEGACY(addr_type);
   24f02:	f000 0501 	and.w	r5, r0, #1
    TAILQ_FOREACH(e, &g_scan_dup_list, link) {
   24f06:	4b39      	ldr	r3, [pc, #228]	; (24fec <ble_ll_scan_dup_check_legacy+0xf0>)
   24f08:	681c      	ldr	r4, [r3, #0]
   24f0a:	e000      	b.n	24f0e <ble_ll_scan_dup_check_legacy+0x12>
   24f0c:	68a4      	ldr	r4, [r4, #8]
   24f0e:	b14c      	cbz	r4, 24f24 <ble_ll_scan_dup_check_legacy+0x28>
        if ((e->type == type) && !memcmp(e->addr, addr, 6)) {
   24f10:	7823      	ldrb	r3, [r4, #0]
   24f12:	42ab      	cmp	r3, r5
   24f14:	d1fa      	bne.n	24f0c <ble_ll_scan_dup_check_legacy+0x10>
   24f16:	2206      	movs	r2, #6
   24f18:	4631      	mov	r1, r6
   24f1a:	1c60      	adds	r0, r4, #1
   24f1c:	f7f5 fe74 	bl	1ac08 <memcmp>
   24f20:	2800      	cmp	r0, #0
   24f22:	d1f3      	bne.n	24f0c <ble_ll_scan_dup_check_legacy+0x10>
    if (e) {
   24f24:	2c00      	cmp	r4, #0
   24f26:	d02d      	beq.n	24f84 <ble_ll_scan_dup_check_legacy+0x88>
        if (pdu_type == BLE_ADV_PDU_TYPE_ADV_DIRECT_IND) {
   24f28:	2f01      	cmp	r7, #1
   24f2a:	d01a      	beq.n	24f62 <ble_ll_scan_dup_check_legacy+0x66>
        } else if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_RSP) {
   24f2c:	2f04      	cmp	r7, #4
   24f2e:	d01c      	beq.n	24f6a <ble_ll_scan_dup_check_legacy+0x6e>
            rc = e->flags & BLE_LL_SCAN_DUP_F_ADV_REPORT_SENT;
   24f30:	79e0      	ldrb	r0, [r4, #7]
   24f32:	f000 0001 	and.w	r0, r0, #1
    if (e != TAILQ_FIRST(&g_scan_dup_list)) {
   24f36:	4b2d      	ldr	r3, [pc, #180]	; (24fec <ble_ll_scan_dup_check_legacy+0xf0>)
   24f38:	681b      	ldr	r3, [r3, #0]
   24f3a:	429c      	cmp	r4, r3
   24f3c:	d010      	beq.n	24f60 <ble_ll_scan_dup_check_legacy+0x64>
        TAILQ_REMOVE(&g_scan_dup_list, e, link);
   24f3e:	68a3      	ldr	r3, [r4, #8]
   24f40:	b1bb      	cbz	r3, 24f72 <ble_ll_scan_dup_check_legacy+0x76>
   24f42:	68e2      	ldr	r2, [r4, #12]
   24f44:	60da      	str	r2, [r3, #12]
   24f46:	68e3      	ldr	r3, [r4, #12]
   24f48:	68a2      	ldr	r2, [r4, #8]
   24f4a:	601a      	str	r2, [r3, #0]
        TAILQ_INSERT_HEAD(&g_scan_dup_list, e, link);
   24f4c:	4b27      	ldr	r3, [pc, #156]	; (24fec <ble_ll_scan_dup_check_legacy+0xf0>)
   24f4e:	681b      	ldr	r3, [r3, #0]
   24f50:	60a3      	str	r3, [r4, #8]
   24f52:	b193      	cbz	r3, 24f7a <ble_ll_scan_dup_check_legacy+0x7e>
   24f54:	f104 0208 	add.w	r2, r4, #8
   24f58:	60da      	str	r2, [r3, #12]
   24f5a:	4b24      	ldr	r3, [pc, #144]	; (24fec <ble_ll_scan_dup_check_legacy+0xf0>)
   24f5c:	601c      	str	r4, [r3, #0]
   24f5e:	60e3      	str	r3, [r4, #12]
}
   24f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rc = e->flags & BLE_LL_SCAN_DUP_F_DIR_ADV_REPORT_SENT;
   24f62:	79e0      	ldrb	r0, [r4, #7]
   24f64:	f000 0002 	and.w	r0, r0, #2
   24f68:	e7e5      	b.n	24f36 <ble_ll_scan_dup_check_legacy+0x3a>
            rc = e->flags & BLE_LL_SCAN_DUP_F_SCAN_RSP_SENT;
   24f6a:	79e0      	ldrb	r0, [r4, #7]
   24f6c:	f000 0004 	and.w	r0, r0, #4
   24f70:	e7e1      	b.n	24f36 <ble_ll_scan_dup_check_legacy+0x3a>
        TAILQ_REMOVE(&g_scan_dup_list, e, link);
   24f72:	68e2      	ldr	r2, [r4, #12]
   24f74:	4b1d      	ldr	r3, [pc, #116]	; (24fec <ble_ll_scan_dup_check_legacy+0xf0>)
   24f76:	605a      	str	r2, [r3, #4]
   24f78:	e7e5      	b.n	24f46 <ble_ll_scan_dup_check_legacy+0x4a>
        TAILQ_INSERT_HEAD(&g_scan_dup_list, e, link);
   24f7a:	f104 0308 	add.w	r3, r4, #8
   24f7e:	4a1b      	ldr	r2, [pc, #108]	; (24fec <ble_ll_scan_dup_check_legacy+0xf0>)
   24f80:	6053      	str	r3, [r2, #4]
   24f82:	e7ea      	b.n	24f5a <ble_ll_scan_dup_check_legacy+0x5e>
    e = os_memblock_get(&g_scan_dup_pool);
   24f84:	481a      	ldr	r0, [pc, #104]	; (24ff0 <ble_ll_scan_dup_check_legacy+0xf4>)
   24f86:	f7f4 ff61 	bl	19e4c <os_memblock_get>
    if (!e) {
   24f8a:	4603      	mov	r3, r0
   24f8c:	b1c8      	cbz	r0, 24fc2 <ble_ll_scan_dup_check_legacy+0xc6>
    memset(e, 0, sizeof(*e));
   24f8e:	2200      	movs	r2, #0
   24f90:	601a      	str	r2, [r3, #0]
   24f92:	605a      	str	r2, [r3, #4]
   24f94:	609a      	str	r2, [r3, #8]
   24f96:	60da      	str	r2, [r3, #12]
        e->flags = 0;
   24f98:	71da      	strb	r2, [r3, #7]
        e->type = type;
   24f9a:	461a      	mov	r2, r3
   24f9c:	f802 5b01 	strb.w	r5, [r2], #1
        memcpy(e->addr, addr, 6);
   24fa0:	6831      	ldr	r1, [r6, #0]
   24fa2:	f8c3 1001 	str.w	r1, [r3, #1]
   24fa6:	88b1      	ldrh	r1, [r6, #4]
   24fa8:	8091      	strh	r1, [r2, #4]
        TAILQ_INSERT_HEAD(&g_scan_dup_list, e, link);
   24faa:	4a10      	ldr	r2, [pc, #64]	; (24fec <ble_ll_scan_dup_check_legacy+0xf0>)
   24fac:	6812      	ldr	r2, [r2, #0]
   24fae:	609a      	str	r2, [r3, #8]
   24fb0:	b1ba      	cbz	r2, 24fe2 <ble_ll_scan_dup_check_legacy+0xe6>
   24fb2:	f103 0108 	add.w	r1, r3, #8
   24fb6:	60d1      	str	r1, [r2, #12]
   24fb8:	4a0c      	ldr	r2, [pc, #48]	; (24fec <ble_ll_scan_dup_check_legacy+0xf0>)
   24fba:	6013      	str	r3, [r2, #0]
   24fbc:	60da      	str	r2, [r3, #12]
        rc = 0;
   24fbe:	2000      	movs	r0, #0
    return rc;
   24fc0:	e7ce      	b.n	24f60 <ble_ll_scan_dup_check_legacy+0x64>
        e = TAILQ_LAST(&g_scan_dup_list, ble_ll_scan_dup_list);
   24fc2:	4b0a      	ldr	r3, [pc, #40]	; (24fec <ble_ll_scan_dup_check_legacy+0xf0>)
   24fc4:	685b      	ldr	r3, [r3, #4]
   24fc6:	685b      	ldr	r3, [r3, #4]
   24fc8:	681b      	ldr	r3, [r3, #0]
        TAILQ_REMOVE(&g_scan_dup_list, e, link);
   24fca:	689a      	ldr	r2, [r3, #8]
   24fcc:	b12a      	cbz	r2, 24fda <ble_ll_scan_dup_check_legacy+0xde>
   24fce:	68d9      	ldr	r1, [r3, #12]
   24fd0:	60d1      	str	r1, [r2, #12]
   24fd2:	68da      	ldr	r2, [r3, #12]
   24fd4:	6899      	ldr	r1, [r3, #8]
   24fd6:	6011      	str	r1, [r2, #0]
   24fd8:	e7d9      	b.n	24f8e <ble_ll_scan_dup_check_legacy+0x92>
   24fda:	68d9      	ldr	r1, [r3, #12]
   24fdc:	4a03      	ldr	r2, [pc, #12]	; (24fec <ble_ll_scan_dup_check_legacy+0xf0>)
   24fde:	6051      	str	r1, [r2, #4]
   24fe0:	e7f7      	b.n	24fd2 <ble_ll_scan_dup_check_legacy+0xd6>
        TAILQ_INSERT_HEAD(&g_scan_dup_list, e, link);
   24fe2:	f103 0208 	add.w	r2, r3, #8
   24fe6:	4901      	ldr	r1, [pc, #4]	; (24fec <ble_ll_scan_dup_check_legacy+0xf0>)
   24fe8:	604a      	str	r2, [r1, #4]
   24fea:	e7e5      	b.n	24fb8 <ble_ll_scan_dup_check_legacy+0xbc>
   24fec:	1000488c 	.word	0x1000488c
   24ff0:	10004914 	.word	0x10004914

00024ff4 <ble_ll_hci_send_dir_adv_report>:
{
   24ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24ff8:	4606      	mov	r6, r0
   24ffa:	460f      	mov	r7, r1
   24ffc:	4615      	mov	r5, r2
   24ffe:	4698      	mov	r8, r3
    if (!ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT)) {
   25000:	200b      	movs	r0, #11
   25002:	f7fe ff53 	bl	23eac <ble_ll_hci_is_le_event_enabled>
   25006:	b308      	cbz	r0, 2504c <ble_ll_hci_send_dir_adv_report+0x58>
    hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_LO);
   25008:	2001      	movs	r0, #1
   2500a:	f00d f8f1 	bl	321f0 <ble_hci_trans_buf_alloc>
    if (!hci_ev) {
   2500e:	b300      	cbz	r0, 25052 <ble_ll_hci_send_dir_adv_report+0x5e>
    hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   25010:	233e      	movs	r3, #62	; 0x3e
   25012:	7003      	strb	r3, [r0, #0]
    hci_ev->length = sizeof(*ev) + sizeof(*(ev->reports));
   25014:	2312      	movs	r3, #18
   25016:	7043      	strb	r3, [r0, #1]
    ev->subev_code = BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT;
   25018:	230b      	movs	r3, #11
   2501a:	7083      	strb	r3, [r0, #2]
    ev->num_reports = 1;
   2501c:	2201      	movs	r2, #1
   2501e:	70c2      	strb	r2, [r0, #3]
    ev->reports[0].type = BLE_HCI_ADV_RPT_EVTYPE_DIR_IND;
   25020:	7102      	strb	r2, [r0, #4]
    ev->reports[0].addr_type = addr_type;
   25022:	7147      	strb	r7, [r0, #5]
    memcpy(ev->reports[0].addr, addr, BLE_DEV_ADDR_LEN);
   25024:	6833      	ldr	r3, [r6, #0]
   25026:	f8c0 3006 	str.w	r3, [r0, #6]
   2502a:	88b3      	ldrh	r3, [r6, #4]
   2502c:	8143      	strh	r3, [r0, #10]
    ev->reports[0].dir_addr_type = inita_type;
   2502e:	f880 800c 	strb.w	r8, [r0, #12]
    memcpy(ev->reports[0].dir_addr, inita, BLE_DEV_ADDR_LEN);
   25032:	682b      	ldr	r3, [r5, #0]
   25034:	f8c0 300d 	str.w	r3, [r0, #13]
   25038:	88ab      	ldrh	r3, [r5, #4]
   2503a:	f8a0 3011 	strh.w	r3, [r0, #17]
    ev->reports[0].rssi = rssi;
   2503e:	f99d 3018 	ldrsb.w	r3, [sp, #24]
   25042:	74c3      	strb	r3, [r0, #19]
    return ble_ll_hci_event_send(hci_ev);
   25044:	f7fe fe62 	bl	23d0c <ble_ll_hci_event_send>
}
   25048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
   2504c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25050:	e7fa      	b.n	25048 <ble_ll_hci_send_dir_adv_report+0x54>
        return -1;
   25052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25056:	e7f7      	b.n	25048 <ble_ll_hci_send_dir_adv_report+0x54>

00025058 <ble_ll_hci_send_adv_report>:
{
   25058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2505c:	4681      	mov	r9, r0
   2505e:	460e      	mov	r6, r1
   25060:	4690      	mov	r8, r2
   25062:	461f      	mov	r7, r3
   25064:	f89d 5020 	ldrb.w	r5, [sp, #32]
    if (!ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_ADV_RPT)) {
   25068:	2002      	movs	r0, #2
   2506a:	f7fe ff1f 	bl	23eac <ble_ll_hci_is_le_event_enabled>
   2506e:	b3a8      	cbz	r0, 250dc <ble_ll_hci_send_adv_report+0x84>
    if ((sizeof(*ev) + sizeof(ev->reports[0]) + adv_data_len + 1) > BLE_HCI_MAX_DATA_LEN) {
   25070:	f105 030c 	add.w	r3, r5, #12
   25074:	2b44      	cmp	r3, #68	; 0x44
   25076:	d828      	bhi.n	250ca <ble_ll_hci_send_adv_report+0x72>
    hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_LO);
   25078:	2001      	movs	r0, #1
   2507a:	f00d f8b9 	bl	321f0 <ble_hci_trans_buf_alloc>
    if (!hci_ev) {
   2507e:	4604      	mov	r4, r0
   25080:	b378      	cbz	r0, 250e2 <ble_ll_hci_send_adv_report+0x8a>
    hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   25082:	233e      	movs	r3, #62	; 0x3e
   25084:	7003      	strb	r3, [r0, #0]
    hci_ev->length = sizeof(*ev) + sizeof(ev->reports[0]) + adv_data_len + 1;
   25086:	f105 030c 	add.w	r3, r5, #12
   2508a:	7043      	strb	r3, [r0, #1]
    ev = (void *) hci_ev->data;
   2508c:	f100 0a02 	add.w	sl, r0, #2
    ev->subev_code = BLE_HCI_LE_SUBEV_ADV_RPT;
   25090:	2302      	movs	r3, #2
   25092:	7083      	strb	r3, [r0, #2]
    ev->num_reports = 1;
   25094:	2301      	movs	r3, #1
   25096:	70c3      	strb	r3, [r0, #3]
    ev->reports[0].type = evtype;
   25098:	f880 9004 	strb.w	r9, [r0, #4]
    ev->reports[0].addr_type = addr_type;
   2509c:	f880 8005 	strb.w	r8, [r0, #5]
    memcpy(ev->reports[0].addr, addr, BLE_DEV_ADDR_LEN);
   250a0:	6833      	ldr	r3, [r6, #0]
   250a2:	f8c0 3006 	str.w	r3, [r0, #6]
   250a6:	88b3      	ldrh	r3, [r6, #4]
   250a8:	8143      	strh	r3, [r0, #10]
    ev->reports[0].data_len = adv_data_len;
   250aa:	7305      	strb	r5, [r0, #12]
    os_mbuf_copydata(adv_data, 0, adv_data_len, ev->reports[0].data);
   250ac:	f100 030d 	add.w	r3, r0, #13
   250b0:	462a      	mov	r2, r5
   250b2:	2100      	movs	r1, #0
   250b4:	9809      	ldr	r0, [sp, #36]	; 0x24
   250b6:	f7f4 fb2b 	bl	19710 <os_mbuf_copydata>
    ev_rssi = (int8_t *) (hci_ev->data + sizeof(*ev) + sizeof(ev->reports[0]) + adv_data_len);
   250ba:	350b      	adds	r5, #11
    *ev_rssi = rssi;
   250bc:	f80a 7005 	strb.w	r7, [sl, r5]
    return ble_ll_hci_event_send(hci_ev);
   250c0:	4620      	mov	r0, r4
   250c2:	f7fe fe23 	bl	23d0c <ble_ll_hci_event_send>
}
   250c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        STATS_INC(ble_ll_stats, adv_evt_dropped);
   250ca:	4a07      	ldr	r2, [pc, #28]	; (250e8 <ble_ll_hci_send_adv_report+0x90>)
   250cc:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
   250d0:	3301      	adds	r3, #1
   250d2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
        return -1;
   250d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   250da:	e7f4      	b.n	250c6 <ble_ll_hci_send_adv_report+0x6e>
        return -1;
   250dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   250e0:	e7f1      	b.n	250c6 <ble_ll_hci_send_adv_report+0x6e>
        return -1;
   250e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   250e6:	e7ee      	b.n	250c6 <ble_ll_hci_send_adv_report+0x6e>
   250e8:	10003fdc 	.word	0x10003fdc

000250ec <ble_ll_scan_send_adv_report>:
{
   250ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   250f0:	b085      	sub	sp, #20
   250f2:	4604      	mov	r4, r0
   250f4:	460f      	mov	r7, r1
   250f6:	4615      	mov	r5, r2
   250f8:	9303      	str	r3, [sp, #12]
   250fa:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   250fe:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   25102:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
    if (pdu_type == BLE_ADV_PDU_TYPE_ADV_DIRECT_IND) {
   25106:	2801      	cmp	r0, #1
   25108:	d032      	beq.n	25170 <ble_ll_scan_send_adv_report+0x84>
        if (pdu_type == BLE_ADV_PDU_TYPE_ADV_IND) {
   2510a:	b120      	cbz	r0, 25116 <ble_ll_scan_send_adv_report+0x2a>
        } else if (pdu_type == BLE_ADV_PDU_TYPE_ADV_SCAN_IND) {
   2510c:	2806      	cmp	r0, #6
   2510e:	d03a      	beq.n	25186 <ble_ll_scan_send_adv_report+0x9a>
        } else if (pdu_type == BLE_ADV_PDU_TYPE_ADV_NONCONN_IND) {
   25110:	2802      	cmp	r0, #2
   25112:	d036      	beq.n	25182 <ble_ll_scan_send_adv_report+0x96>
            evtype = BLE_HCI_ADV_RPT_EVTYPE_SCAN_RSP;
   25114:	2404      	movs	r4, #4
        adv_data_len = om->om_data[1] - BLE_DEV_ADDR_LEN;
   25116:	f8d9 3000 	ldr.w	r3, [r9]
   2511a:	785e      	ldrb	r6, [r3, #1]
   2511c:	3e06      	subs	r6, #6
   2511e:	b2f6      	uxtb	r6, r6
        os_mbuf_adj(om, BLE_LL_PDU_HDR_LEN + BLE_DEV_ADDR_LEN);
   25120:	2108      	movs	r1, #8
   25122:	4648      	mov	r0, r9
   25124:	f7f4 fb21 	bl	1976a <os_mbuf_adj>
    uint8_t subev = BLE_HCI_LE_SUBEV_ADV_RPT;
   25128:	f04f 0b02 	mov.w	fp, #2
    if (BLE_MBUF_HDR_RESOLVED(hdr)) {
   2512c:	f8ba 3000 	ldrh.w	r3, [sl]
   25130:	f413 6f80 	tst.w	r3, #1024	; 0x400
   25134:	d001      	beq.n	2513a <ble_ll_scan_send_adv_report+0x4e>
        adva_type += 2;
   25136:	3502      	adds	r5, #2
   25138:	b2ed      	uxtb	r5, r5
    if (BLE_MBUF_HDR_TARGETA_RESOLVED(hdr)) {
   2513a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   2513e:	d003      	beq.n	25148 <ble_ll_scan_send_adv_report+0x5c>
        inita_type += 2;
   25140:	f108 0802 	add.w	r8, r8, #2
   25144:	fa5f f888 	uxtb.w	r8, r8
    if (subev == BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT) {
   25148:	f1bb 0f0b 	cmp.w	fp, #11
   2514c:	d021      	beq.n	25192 <ble_ll_scan_send_adv_report+0xa6>
    rc = ble_ll_hci_send_adv_report(evtype, adva, adva_type, hdr->rxinfo.rssi,
   2514e:	f8cd 9004 	str.w	r9, [sp, #4]
   25152:	9600      	str	r6, [sp, #0]
   25154:	f99a 3004 	ldrsb.w	r3, [sl, #4]
   25158:	462a      	mov	r2, r5
   2515a:	4639      	mov	r1, r7
   2515c:	4620      	mov	r0, r4
   2515e:	f7ff ff7b 	bl	25058 <ble_ll_hci_send_adv_report>
    if (!rc && scansm->scan_filt_dups) {
   25162:	b910      	cbnz	r0, 2516a <ble_ll_scan_send_adv_report+0x7e>
   25164:	9b11      	ldr	r3, [sp, #68]	; 0x44
   25166:	78db      	ldrb	r3, [r3, #3]
   25168:	b9eb      	cbnz	r3, 251a6 <ble_ll_scan_send_adv_report+0xba>
}
   2516a:	b005      	add	sp, #20
   2516c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ble_ll_is_rpa(inita, inita_type)) {
   25170:	4641      	mov	r1, r8
   25172:	4618      	mov	r0, r3
   25174:	f7f9 fd61 	bl	1ec3a <ble_ll_is_rpa>
   25178:	b938      	cbnz	r0, 2518a <ble_ll_scan_send_adv_report+0x9e>
        adv_data_len = 0;
   2517a:	2600      	movs	r6, #0
    uint8_t subev = BLE_HCI_LE_SUBEV_ADV_RPT;
   2517c:	f04f 0b02 	mov.w	fp, #2
   25180:	e7d4      	b.n	2512c <ble_ll_scan_send_adv_report+0x40>
            evtype = BLE_HCI_ADV_RPT_EVTYPE_NONCONN_IND;
   25182:	2403      	movs	r4, #3
   25184:	e7c7      	b.n	25116 <ble_ll_scan_send_adv_report+0x2a>
            evtype = BLE_HCI_ADV_RPT_EVTYPE_SCAN_IND;
   25186:	2402      	movs	r4, #2
   25188:	e7c5      	b.n	25116 <ble_ll_scan_send_adv_report+0x2a>
        adv_data_len = 0;
   2518a:	2600      	movs	r6, #0
            subev = BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT;
   2518c:	f04f 0b0b 	mov.w	fp, #11
   25190:	e7cc      	b.n	2512c <ble_ll_scan_send_adv_report+0x40>
        rc = ble_ll_hci_send_dir_adv_report(adva, adva_type, inita, inita_type,
   25192:	f99a 3004 	ldrsb.w	r3, [sl, #4]
   25196:	9300      	str	r3, [sp, #0]
   25198:	4643      	mov	r3, r8
   2519a:	9a03      	ldr	r2, [sp, #12]
   2519c:	4629      	mov	r1, r5
   2519e:	4638      	mov	r0, r7
   251a0:	f7ff ff28 	bl	24ff4 <ble_ll_hci_send_dir_adv_report>
        goto done;
   251a4:	e7dd      	b.n	25162 <ble_ll_scan_send_adv_report+0x76>
        ble_ll_scan_dup_update_legacy(adva_type, adva, subev, evtype);
   251a6:	4623      	mov	r3, r4
   251a8:	465a      	mov	r2, fp
   251aa:	4639      	mov	r1, r7
   251ac:	4628      	mov	r0, r5
   251ae:	f7ff fdcf 	bl	24d50 <ble_ll_scan_dup_update_legacy>
}
   251b2:	e7da      	b.n	2516a <ble_ll_scan_send_adv_report+0x7e>

000251b4 <ble_ll_scan_rx_pkt_in_on_legacy>:

static void
ble_ll_scan_rx_pkt_in_on_legacy(uint8_t pdu_type, struct os_mbuf *om,
                                struct ble_mbuf_hdr *hdr,
                                struct ble_ll_scan_addr_data *addrd)
{
   251b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   251b8:	b084      	sub	sp, #16
   251ba:	460f      	mov	r7, r1
   251bc:	4614      	mov	r4, r2
    struct ble_ll_scan_sm *scansm = &g_ble_ll_scan_sm;
    uint8_t *rxbuf = om->om_data;
   251be:	6809      	ldr	r1, [r1, #0]
    bool send_hci_report;


    if (!BLE_MBUF_HDR_DEVMATCH(hdr) ||
   251c0:	8812      	ldrh	r2, [r2, #0]
   251c2:	f002 05c0 	and.w	r5, r2, #192	; 0xc0
   251c6:	2dc0      	cmp	r5, #192	; 0xc0
   251c8:	d107      	bne.n	251da <ble_ll_scan_rx_pkt_in_on_legacy+0x26>
   251ca:	4680      	mov	r8, r0
   251cc:	461e      	mov	r6, r3
        !BLE_MBUF_HDR_CRC_OK(hdr) ||
   251ce:	f412 4f00 	tst.w	r2, #32768	; 0x8000
   251d2:	d102      	bne.n	251da <ble_ll_scan_rx_pkt_in_on_legacy+0x26>
        BLE_MBUF_HDR_IGNORED(hdr) ||
        !scansm->scan_enabled) {
   251d4:	4b1b      	ldr	r3, [pc, #108]	; (25244 <ble_ll_scan_rx_pkt_in_on_legacy+0x90>)
   251d6:	781b      	ldrb	r3, [r3, #0]
        BLE_MBUF_HDR_IGNORED(hdr) ||
   251d8:	b913      	cbnz	r3, 251e0 <ble_ll_scan_rx_pkt_in_on_legacy+0x2c>
    }

    if (BLE_MBUF_HDR_SCAN_RSP_RXD(hdr)) {
        ble_ll_scan_req_backoff(scansm, 1);
    }
}
   251da:	b004      	add	sp, #16
   251dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_ll_scan_get_addr_data_from_legacy(pdu_type, rxbuf, addrd);
   251e0:	4632      	mov	r2, r6
   251e2:	f7ff fd21 	bl	24c28 <ble_ll_scan_get_addr_data_from_legacy>
    ble_ll_scan_rx_pkt_in_restore_addr_data(hdr, addrd);
   251e6:	4631      	mov	r1, r6
   251e8:	4620      	mov	r0, r4
   251ea:	f7ff fe37 	bl	24e5c <ble_ll_scan_rx_pkt_in_restore_addr_data>
    send_hci_report = !scansm->scan_filt_dups ||
   251ee:	4b15      	ldr	r3, [pc, #84]	; (25244 <ble_ll_scan_rx_pkt_in_on_legacy+0x90>)
   251f0:	78db      	ldrb	r3, [r3, #3]
   251f2:	b953      	cbnz	r3, 2520a <ble_ll_scan_rx_pkt_in_on_legacy+0x56>
   251f4:	2301      	movs	r3, #1
    if (send_hci_report) {
   251f6:	b9a3      	cbnz	r3, 25222 <ble_ll_scan_rx_pkt_in_on_legacy+0x6e>
    if (BLE_MBUF_HDR_SCAN_RSP_RXD(hdr)) {
   251f8:	8823      	ldrh	r3, [r4, #0]
   251fa:	f013 0f08 	tst.w	r3, #8
   251fe:	d0ec      	beq.n	251da <ble_ll_scan_rx_pkt_in_on_legacy+0x26>
        ble_ll_scan_req_backoff(scansm, 1);
   25200:	2101      	movs	r1, #1
   25202:	4810      	ldr	r0, [pc, #64]	; (25244 <ble_ll_scan_rx_pkt_in_on_legacy+0x90>)
   25204:	f7ff fd42 	bl	24c8c <ble_ll_scan_req_backoff>
   25208:	e7e7      	b.n	251da <ble_ll_scan_rx_pkt_in_on_legacy+0x26>
                      !ble_ll_scan_dup_check_legacy(addrd->adv_addr_type,
   2520a:	7b30      	ldrb	r0, [r6, #12]
   2520c:	4642      	mov	r2, r8
   2520e:	68b1      	ldr	r1, [r6, #8]
   25210:	f3c0 0080 	ubfx	r0, r0, #2, #1
   25214:	f7ff fe72 	bl	24efc <ble_ll_scan_dup_check_legacy>
    send_hci_report = !scansm->scan_filt_dups ||
   25218:	b108      	cbz	r0, 2521e <ble_ll_scan_rx_pkt_in_on_legacy+0x6a>
   2521a:	2300      	movs	r3, #0
   2521c:	e7eb      	b.n	251f6 <ble_ll_scan_rx_pkt_in_on_legacy+0x42>
   2521e:	2301      	movs	r3, #1
   25220:	e7e9      	b.n	251f6 <ble_ll_scan_rx_pkt_in_on_legacy+0x42>
                                    addrd->adv_addr, addrd->adv_addr_type,
   25222:	7b32      	ldrb	r2, [r6, #12]
                                    addrd->targeta, addrd->targeta_type,
   25224:	f3c2 0340 	ubfx	r3, r2, #1, #1
        ble_ll_scan_send_adv_report(pdu_type,
   25228:	4906      	ldr	r1, [pc, #24]	; (25244 <ble_ll_scan_rx_pkt_in_on_legacy+0x90>)
   2522a:	9103      	str	r1, [sp, #12]
   2522c:	9402      	str	r4, [sp, #8]
   2522e:	9701      	str	r7, [sp, #4]
   25230:	9300      	str	r3, [sp, #0]
   25232:	6873      	ldr	r3, [r6, #4]
   25234:	f3c2 0280 	ubfx	r2, r2, #2, #1
   25238:	68b1      	ldr	r1, [r6, #8]
   2523a:	4640      	mov	r0, r8
   2523c:	f7ff ff56 	bl	250ec <ble_ll_scan_send_adv_report>
   25240:	e7da      	b.n	251f8 <ble_ll_scan_rx_pkt_in_on_legacy+0x44>
   25242:	bf00      	nop
   25244:	10004804 	.word	0x10004804

00025248 <ble_ll_scan_sm_start>:
{
   25248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2524a:	4604      	mov	r4, r0
    if (!ble_ll_is_valid_own_addr_type(scansm->own_addr_type, g_random_addr)) {
   2524c:	491d      	ldr	r1, [pc, #116]	; (252c4 <ble_ll_scan_sm_start+0x7c>)
   2524e:	7840      	ldrb	r0, [r0, #1]
   25250:	f7f9 fd46 	bl	1ece0 <ble_ll_is_valid_own_addr_type>
   25254:	2800      	cmp	r0, #0
   25256:	d033      	beq.n	252c0 <ble_ll_scan_sm_start+0x78>
    BLE_LL_ASSERT(scansm->scanp);
   25258:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
   2525a:	b33d      	cbz	r5, 252ac <ble_ll_scan_sm_start+0x64>
    scanp_next = scansm->scanp_next;
   2525c:	6f26      	ldr	r6, [r4, #112]	; 0x70
    STATS_INC(ble_ll_stats, scan_starts);
   2525e:	4a1a      	ldr	r2, [pc, #104]	; (252c8 <ble_ll_scan_sm_start+0x80>)
   25260:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   25264:	3301      	adds	r3, #1
   25266:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    scansm->scan_enabled = 1;
   2526a:	2301      	movs	r3, #1
   2526c:	7023      	strb	r3, [r4, #0]
    scanp->scan_chan = BLE_PHY_ADV_CHAN_START;
   2526e:	2325      	movs	r3, #37	; 0x25
   25270:	70eb      	strb	r3, [r5, #3]
    if (scanp_next) {
   25272:	b106      	cbz	r6, 25276 <ble_ll_scan_sm_start+0x2e>
        scanp_next->scan_chan = BLE_PHY_ADV_CHAN_START;
   25274:	70f3      	strb	r3, [r6, #3]
    scansm->upper_limit = 1;
   25276:	2301      	movs	r3, #1
   25278:	8523      	strh	r3, [r4, #40]	; 0x28
    scansm->backoff_count = 1;
   2527a:	8563      	strh	r3, [r4, #42]	; 0x2a
    scansm->scan_rsp_pending = 0;
   2527c:	2700      	movs	r7, #0
   2527e:	7127      	strb	r7, [r4, #4]
    g_ble_ll_scan_num_rsp_advs = 0;
   25280:	4b12      	ldr	r3, [pc, #72]	; (252cc <ble_ll_scan_sm_start+0x84>)
   25282:	701f      	strb	r7, [r3, #0]
    os_mempool_clear(&g_scan_dup_pool);
   25284:	4812      	ldr	r0, [pc, #72]	; (252d0 <ble_ll_scan_sm_start+0x88>)
   25286:	f7f4 fda7 	bl	19dd8 <os_mempool_clear>
    TAILQ_INIT(&g_scan_dup_list);
   2528a:	4b12      	ldr	r3, [pc, #72]	; (252d4 <ble_ll_scan_sm_start+0x8c>)
   2528c:	601f      	str	r7, [r3, #0]
   2528e:	605b      	str	r3, [r3, #4]
   25290:	f00e fe35 	bl	33efe <os_cputime_get32>
    scanp->timing.start_time = ble_ll_rfmgmt_enable_now();
   25294:	60e8      	str	r0, [r5, #12]
    if (scanp_next) {
   25296:	b116      	cbz	r6, 2529e <ble_ll_scan_sm_start+0x56>
                                        scanp->timing.window;
   25298:	68ab      	ldr	r3, [r5, #8]
        scanp_next->timing.start_time = scanp->timing.start_time +
   2529a:	4418      	add	r0, r3
   2529c:	60f0      	str	r0, [r6, #12]
}

static inline void
ble_ll_tmr_start(struct ble_ll_tmr *tmr, uint32_t tgt)
{
    os_cputime_timer_start(&tmr->t, tgt);
   2529e:	68e9      	ldr	r1, [r5, #12]
   252a0:	f104 0040 	add.w	r0, r4, #64	; 0x40
   252a4:	f00e fe23 	bl	33eee <os_cputime_timer_start>
    return BLE_ERR_SUCCESS;
   252a8:	2000      	movs	r0, #0
}
   252aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BLE_LL_ASSERT(scansm->scanp);
   252ac:	f7ef fa22 	bl	146f4 <hal_debugger_connected>
   252b0:	b100      	cbz	r0, 252b4 <ble_ll_scan_sm_start+0x6c>
   252b2:	be01      	bkpt	0x0001
   252b4:	2300      	movs	r3, #0
   252b6:	461a      	mov	r2, r3
   252b8:	4619      	mov	r1, r3
   252ba:	4618      	mov	r0, r3
   252bc:	f7f3 fd38 	bl	18d30 <__assert_func>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   252c0:	2012      	movs	r0, #18
   252c2:	e7f2      	b.n	252aa <ble_ll_scan_sm_start+0x62>
   252c4:	10004354 	.word	0x10004354
   252c8:	10003fdc 	.word	0x10003fdc
   252cc:	1000479d 	.word	0x1000479d
   252d0:	10004914 	.word	0x10004914
   252d4:	1000488c 	.word	0x1000488c

000252d8 <ble_ll_scan_event_proc>:
{
   252d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return ev->ev.ev_arg;
   252dc:	6884      	ldr	r4, [r0, #8]
    scanp = scansm->scanp;
   252de:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
    OS_ENTER_CRITICAL(sr);
   252e0:	f7f5 fae2 	bl	1a8a8 <os_arch_save_sr>
   252e4:	4606      	mov	r6, r0
    if (!scansm->scan_enabled) {
   252e6:	7823      	ldrb	r3, [r4, #0]
   252e8:	b303      	cbz	r3, 2532c <ble_ll_scan_event_proc+0x54>
    if (scansm->scan_rsp_pending) {
   252ea:	7923      	ldrb	r3, [r4, #4]
   252ec:	bb33      	cbnz	r3, 2533c <ble_ll_scan_event_proc+0x64>
    return os_cputime_get32();
   252ee:	f00e fe06 	bl	33efe <os_cputime_get32>
   252f2:	4601      	mov	r1, r0
    inside_window = ble_ll_scan_is_inside_window(scanp, now);
   252f4:	4628      	mov	r0, r5
   252f6:	f7ff fc7f 	bl	24bf8 <ble_ll_scan_is_inside_window>
    ble_ll_rfmgmt_scan_changed(true, scanp->timing.start_time);
   252fa:	68ef      	ldr	r7, [r5, #12]
    if (inside_window) {
   252fc:	4680      	mov	r8, r0
   252fe:	b108      	cbz	r0, 25304 <ble_ll_scan_event_proc+0x2c>
        next_proc_time = scanp->timing.start_time + scanp->timing.window;
   25300:	68ab      	ldr	r3, [r5, #8]
   25302:	441f      	add	r7, r3
    switch (ble_ll_state_get()) {
   25304:	f7f9 fd6c 	bl	1ede0 <ble_ll_state_get>
   25308:	2802      	cmp	r0, #2
   2530a:	d823      	bhi.n	25354 <ble_ll_scan_event_proc+0x7c>
   2530c:	b243      	sxtb	r3, r0
   2530e:	bb1b      	cbnz	r3, 25358 <ble_ll_scan_event_proc+0x80>
   25310:	bb58      	cbnz	r0, 2536a <ble_ll_scan_event_proc+0x92>
    if (start_scan) {
   25312:	f1b8 0f00 	cmp.w	r8, #0
   25316:	d132      	bne.n	2537e <ble_ll_scan_event_proc+0xa6>
    OS_EXIT_CRITICAL(sr);
   25318:	4630      	mov	r0, r6
   2531a:	f7f5 facb 	bl	1a8b4 <os_arch_restore_sr>
    os_cputime_timer_start(&tmr->t, tgt);
   2531e:	4639      	mov	r1, r7
   25320:	f104 0040 	add.w	r0, r4, #64	; 0x40
   25324:	f00e fde3 	bl	33eee <os_cputime_timer_start>
}
   25328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}

static inline void
ble_ll_tmr_stop(struct ble_ll_tmr *tmr)
{
    os_cputime_timer_stop(&tmr->t);
   2532c:	f104 0040 	add.w	r0, r4, #64	; 0x40
   25330:	f00e fde1 	bl	33ef6 <os_cputime_timer_stop>
        OS_EXIT_CRITICAL(sr);
   25334:	4630      	mov	r0, r6
   25336:	f7f5 fabd 	bl	1a8b4 <os_arch_restore_sr>
        return;
   2533a:	e7f5      	b.n	25328 <ble_ll_scan_event_proc+0x50>
        STATS_INC(ble_ll_stats, scan_timer_stopped);
   2533c:	4a12      	ldr	r2, [pc, #72]	; (25388 <ble_ll_scan_event_proc+0xb0>)
   2533e:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
   25342:	3301      	adds	r3, #1
   25344:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
        scansm->restart_timer_needed = 1;
   25348:	2301      	movs	r3, #1
   2534a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
        OS_EXIT_CRITICAL(sr);
   2534e:	f7f5 fab1 	bl	1a8b4 <os_arch_restore_sr>
        return;
   25352:	e7e9      	b.n	25328 <ble_ll_scan_event_proc+0x50>
    switch (ble_ll_state_get()) {
   25354:	2804      	cmp	r0, #4
   25356:	d108      	bne.n	2536a <ble_ll_scan_event_proc+0x92>
        ble_phy_disable();
   25358:	f000 ffc0 	bl	262dc <ble_phy_disable>
        if (!inside_window) {
   2535c:	f1b8 0f00 	cmp.w	r8, #0
   25360:	d1d7      	bne.n	25312 <ble_ll_scan_event_proc+0x3a>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   25362:	2000      	movs	r0, #0
   25364:	f7f9 fd36 	bl	1edd4 <ble_ll_state_set>
   25368:	e7d3      	b.n	25312 <ble_ll_scan_event_proc+0x3a>
        BLE_LL_ASSERT(0);
   2536a:	f7ef f9c3 	bl	146f4 <hal_debugger_connected>
   2536e:	b100      	cbz	r0, 25372 <ble_ll_scan_event_proc+0x9a>
   25370:	be01      	bkpt	0x0001
   25372:	2300      	movs	r3, #0
   25374:	461a      	mov	r2, r3
   25376:	4619      	mov	r1, r3
   25378:	4618      	mov	r0, r3
   2537a:	f7f3 fcd9 	bl	18d30 <__assert_func>
        ble_ll_scan_start(scansm);
   2537e:	4620      	mov	r0, r4
   25380:	f7ff fd1c 	bl	24dbc <ble_ll_scan_start>
   25384:	e7c8      	b.n	25318 <ble_ll_scan_event_proc+0x40>
   25386:	bf00      	nop
   25388:	10003fdc 	.word	0x10003fdc

0002538c <ble_ll_scan_common_init>:
    return &g_ble_ll_scan_sm.pdu_data;
}

static void
ble_ll_scan_common_init(void)
{
   2538c:	b510      	push	{r4, lr}
    struct ble_ll_scan_phy *scanp;
    int i;

    /* Clear state machine in case re-initialized */
    scansm = &g_ble_ll_scan_sm;
    memset(scansm, 0, sizeof(struct ble_ll_scan_sm));
   2538e:	4c19      	ldr	r4, [pc, #100]	; (253f4 <ble_ll_scan_common_init+0x68>)
   25390:	2288      	movs	r2, #136	; 0x88
   25392:	2100      	movs	r1, #0
   25394:	4620      	mov	r0, r4
   25396:	f7f5 fc80 	bl	1ac9a <memset>

    /* Clear scan parameters in case re-initialized */
    memset(&g_ble_ll_scan_params, 0, sizeof(g_ble_ll_scan_params));
   2539a:	4a17      	ldr	r2, [pc, #92]	; (253f8 <ble_ll_scan_common_init+0x6c>)
   2539c:	2300      	movs	r3, #0
   2539e:	6013      	str	r3, [r2, #0]
   253a0:	6053      	str	r3, [r2, #4]
   253a2:	6093      	str	r3, [r2, #8]
   253a4:	60d3      	str	r3, [r2, #12]
   253a6:	6113      	str	r3, [r2, #16]
    ev->ev.ev_queued = 0;
   253a8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    ev->ev.ev_cb = (os_event_fn *)fn;
   253ac:	4a13      	ldr	r2, [pc, #76]	; (253fc <ble_ll_scan_common_init+0x70>)
   253ae:	6362      	str	r2, [r4, #52]	; 0x34
    ev->ev.ev_arg = arg;
   253b0:	63a4      	str	r4, [r4, #56]	; 0x38

    /* Initialize scanning window end event */
    ble_npl_event_init(&scansm->scan_sched_ev, ble_ll_scan_event_proc, scansm);

    for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   253b2:	2b00      	cmp	r3, #0
   253b4:	dd15      	ble.n	253e2 <ble_ll_scan_common_init+0x56>
                        ble_ll_scan_time_hci_to_ticks(BLE_HCI_SCAN_ITVL_DEF);
        scanp->timing.window =
                        ble_ll_scan_time_hci_to_ticks(BLE_HCI_SCAN_WINDOW_DEF);
    }

    scansm->scan_phys[PHY_UNCODED].phy = BLE_PHY_1M;
   253b6:	4c0f      	ldr	r4, [pc, #60]	; (253f4 <ble_ll_scan_common_init+0x68>)
   253b8:	2301      	movs	r3, #1
   253ba:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    return os_time_get();
   253be:	f7f5 f943 	bl	1a648 <os_time_get>
    scansm->scan_phys[PHY_CODED].phy = BLE_PHY_CODED;
#endif

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    /* Make sure we'll generate new NRPA if necessary */
    scansm->scan_nrpa_timer = ble_npl_time_get();
   253c2:	6120      	str	r0, [r4, #16]
    os_cputime_timer_init(&tmr->t, cb, arg);
   253c4:	4622      	mov	r2, r4
   253c6:	490e      	ldr	r1, [pc, #56]	; (25400 <ble_ll_scan_common_init+0x74>)
   253c8:	f104 0040 	add.w	r0, r4, #64	; 0x40
   253cc:	f00e fd70 	bl	33eb0 <os_cputime_timer_init>
    memset(ev, 0, sizeof(*ev));
   253d0:	2300      	movs	r3, #0
   253d2:	65a3      	str	r3, [r4, #88]	; 0x58
   253d4:	6663      	str	r3, [r4, #100]	; 0x64
    ev->ev.ev_queued = 0;
   253d6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    ev->ev.ev_cb = (os_event_fn *)fn;
   253da:	4a0a      	ldr	r2, [pc, #40]	; (25404 <ble_ll_scan_common_init+0x78>)
   253dc:	65e2      	str	r2, [r4, #92]	; 0x5c
    ev->ev.ev_arg = arg;
   253de:	6623      	str	r3, [r4, #96]	; 0x60
    ble_npl_callout_init(&scansm->period_timer, &g_ble_ll_data.ll_evq,
                                        ble_ll_scan_period_timer_cb, scansm);
#endif

    ble_npl_event_init(&scansm->scan_interrupted_ev, ble_ll_scan_interrupted_event_cb, NULL);
}
   253e0:	bd10      	pop	{r4, pc}
        scanp->timing.interval =
   253e2:	4a05      	ldr	r2, [pc, #20]	; (253f8 <ble_ll_scan_common_init+0x6c>)
   253e4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   253e8:	f240 1147 	movw	r1, #327	; 0x147
   253ec:	6091      	str	r1, [r2, #8]
        scanp->timing.window =
   253ee:	60d1      	str	r1, [r2, #12]
    for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   253f0:	3301      	adds	r3, #1
   253f2:	e7de      	b.n	253b2 <ble_ll_scan_common_init+0x26>
   253f4:	10004804 	.word	0x10004804
   253f8:	100047a0 	.word	0x100047a0
   253fc:	000252d9 	.word	0x000252d9
   25400:	00024db1 	.word	0x00024db1
   25404:	000255f9 	.word	0x000255f9

00025408 <ble_ll_scan_halt>:
{
   25408:	b508      	push	{r3, lr}
    if (scansm->scan_rsp_pending) {
   2540a:	4b05      	ldr	r3, [pc, #20]	; (25420 <ble_ll_scan_halt+0x18>)
   2540c:	791b      	ldrb	r3, [r3, #4]
   2540e:	b903      	cbnz	r3, 25412 <ble_ll_scan_halt+0xa>
}
   25410:	bd08      	pop	{r3, pc}
        scansm->scan_rsp_pending = 0;
   25412:	4803      	ldr	r0, [pc, #12]	; (25420 <ble_ll_scan_halt+0x18>)
   25414:	2100      	movs	r1, #0
   25416:	7101      	strb	r1, [r0, #4]
        ble_ll_scan_req_backoff(scansm, 0);
   25418:	f7ff fc38 	bl	24c8c <ble_ll_scan_req_backoff>
}
   2541c:	e7f8      	b.n	25410 <ble_ll_scan_halt+0x8>
   2541e:	bf00      	nop
   25420:	10004804 	.word	0x10004804

00025424 <ble_ll_scan_sm_stop>:
{
   25424:	b510      	push	{r4, lr}
   25426:	4604      	mov	r4, r0
    os_cputime_timer_stop(&tmr->t);
   25428:	481a      	ldr	r0, [pc, #104]	; (25494 <ble_ll_scan_sm_stop+0x70>)
   2542a:	f00e fd64 	bl	33ef6 <os_cputime_timer_stop>
    if (chk_disable) {
   2542e:	b9cc      	cbnz	r4, 25464 <ble_ll_scan_sm_stop+0x40>
    OS_ENTER_CRITICAL(sr);
   25430:	f7f5 fa3a 	bl	1a8a8 <os_arch_save_sr>
   25434:	4604      	mov	r4, r0
    scansm->connsm = NULL;
   25436:	4b18      	ldr	r3, [pc, #96]	; (25498 <ble_ll_scan_sm_stop+0x74>)
   25438:	2200      	movs	r2, #0
   2543a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    scansm->scan_enabled = 0;
   2543e:	701a      	strb	r2, [r3, #0]
    scansm->restart_timer_needed = 0;
   25440:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    if (scansm->scan_rsp_pending) {
   25444:	791b      	ldrb	r3, [r3, #4]
   25446:	b9f3      	cbnz	r3, 25486 <ble_ll_scan_sm_stop+0x62>
    OS_EXIT_CRITICAL(sr);
   25448:	4620      	mov	r0, r4
   2544a:	f7f5 fa33 	bl	1a8b4 <os_arch_restore_sr>
    STATS_INC(ble_ll_stats, scan_stops);
   2544e:	4a13      	ldr	r2, [pc, #76]	; (2549c <ble_ll_scan_sm_stop+0x78>)
   25450:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   25454:	3301      	adds	r3, #1
   25456:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    OS_ENTER_CRITICAL(sr);
   2545a:	f7f5 fa25 	bl	1a8a8 <os_arch_save_sr>
    OS_EXIT_CRITICAL(sr);
   2545e:	f7f5 fa29 	bl	1a8b4 <os_arch_restore_sr>
}
   25462:	bd10      	pop	{r4, pc}
        OS_ENTER_CRITICAL(sr);
   25464:	f7f5 fa20 	bl	1a8a8 <os_arch_save_sr>
   25468:	4604      	mov	r4, r0
        lls = ble_ll_state_get();
   2546a:	f7f9 fcb9 	bl	1ede0 <ble_ll_state_get>
        if (lls == BLE_LL_STATE_SCANNING) {
   2546e:	2802      	cmp	r0, #2
   25470:	d003      	beq.n	2547a <ble_ll_scan_sm_stop+0x56>
        OS_EXIT_CRITICAL(sr);
   25472:	4620      	mov	r0, r4
   25474:	f7f5 fa1e 	bl	1a8b4 <os_arch_restore_sr>
   25478:	e7da      	b.n	25430 <ble_ll_scan_sm_stop+0xc>
            ble_phy_disable();
   2547a:	f000 ff2f 	bl	262dc <ble_phy_disable>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   2547e:	2000      	movs	r0, #0
   25480:	f7f9 fca8 	bl	1edd4 <ble_ll_state_set>
   25484:	e7f5      	b.n	25472 <ble_ll_scan_sm_stop+0x4e>
        scansm->scan_rsp_pending = 0;
   25486:	4804      	ldr	r0, [pc, #16]	; (25498 <ble_ll_scan_sm_stop+0x74>)
   25488:	4611      	mov	r1, r2
   2548a:	7102      	strb	r2, [r0, #4]
        ble_ll_scan_req_backoff(scansm, 0);
   2548c:	f7ff fbfe 	bl	24c8c <ble_ll_scan_req_backoff>
   25490:	e7da      	b.n	25448 <ble_ll_scan_sm_stop+0x24>
   25492:	bf00      	nop
   25494:	10004844 	.word	0x10004844
   25498:	10004804 	.word	0x10004804
   2549c:	10003fdc 	.word	0x10003fdc

000254a0 <ble_ll_scan_set_enable>:
    if ((filter_dups > 1) || (enable > 1)) {
   254a0:	2901      	cmp	r1, #1
   254a2:	d869      	bhi.n	25578 <ble_ll_scan_set_enable+0xd8>
   254a4:	2801      	cmp	r0, #1
   254a6:	d869      	bhi.n	2557c <ble_ll_scan_set_enable+0xdc>
{
   254a8:	b570      	push	{r4, r5, r6, lr}
    if (!enable) {
   254aa:	b168      	cbz	r0, 254c8 <ble_ll_scan_set_enable+0x28>
    if (scansm->scan_enabled) {
   254ac:	4b35      	ldr	r3, [pc, #212]	; (25584 <ble_ll_scan_set_enable+0xe4>)
   254ae:	781b      	ldrb	r3, [r3, #0]
   254b0:	bb0b      	cbnz	r3, 254f6 <ble_ll_scan_set_enable+0x56>
    scansm->scan_filt_dups = filter_dups;
   254b2:	4a34      	ldr	r2, [pc, #208]	; (25584 <ble_ll_scan_set_enable+0xe4>)
   254b4:	70d1      	strb	r1, [r2, #3]
    scansm->scanp = NULL;
   254b6:	2300      	movs	r3, #0
   254b8:	66d3      	str	r3, [r2, #108]	; 0x6c
    scansm->scanp_next = NULL;
   254ba:	6713      	str	r3, [r2, #112]	; 0x70
    scansm->own_addr_type = g_ble_ll_scan_params.own_addr_type;
   254bc:	4932      	ldr	r1, [pc, #200]	; (25588 <ble_ll_scan_set_enable+0xe8>)
   254be:	7808      	ldrb	r0, [r1, #0]
   254c0:	7050      	strb	r0, [r2, #1]
    scansm->scan_filt_policy = g_ble_ll_scan_params.scan_filt_policy;
   254c2:	7849      	ldrb	r1, [r1, #1]
   254c4:	7091      	strb	r1, [r2, #2]
    for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   254c6:	e03b      	b.n	25540 <ble_ll_scan_set_enable+0xa0>
        if (scansm->scan_enabled) {
   254c8:	4b2e      	ldr	r3, [pc, #184]	; (25584 <ble_ll_scan_set_enable+0xe4>)
   254ca:	781b      	ldrb	r3, [r3, #0]
   254cc:	b90b      	cbnz	r3, 254d2 <ble_ll_scan_set_enable+0x32>
        return BLE_ERR_SUCCESS;
   254ce:	2000      	movs	r0, #0
}
   254d0:	bd70      	pop	{r4, r5, r6, pc}
            ble_ll_scan_sm_stop(1);
   254d2:	2001      	movs	r0, #1
   254d4:	f7ff ffa6 	bl	25424 <ble_ll_scan_sm_stop>
   254d8:	e7f9      	b.n	254ce <ble_ll_scan_set_enable+0x2e>
            if (scanp_phy->configured &&
   254da:	1dda      	adds	r2, r3, #7
   254dc:	4829      	ldr	r0, [pc, #164]	; (25584 <ble_ll_scan_set_enable+0xe4>)
   254de:	eb00 1202 	add.w	r2, r0, r2, lsl #4
   254e2:	7952      	ldrb	r2, [r2, #5]
   254e4:	b12a      	cbz	r2, 254f2 <ble_ll_scan_set_enable+0x52>
                                scanp_phy->scan_type == BLE_SCAN_TYPE_INITIATE) {
   254e6:	1dda      	adds	r2, r3, #7
   254e8:	eb00 1202 	add.w	r2, r0, r2, lsl #4
   254ec:	7992      	ldrb	r2, [r2, #6]
            if (scanp_phy->configured &&
   254ee:	2a02      	cmp	r2, #2
   254f0:	d046      	beq.n	25580 <ble_ll_scan_set_enable+0xe0>
        for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   254f2:	3301      	adds	r3, #1
   254f4:	e000      	b.n	254f8 <ble_ll_scan_set_enable+0x58>
   254f6:	2300      	movs	r3, #0
   254f8:	2b00      	cmp	r3, #0
   254fa:	ddee      	ble.n	254da <ble_ll_scan_set_enable+0x3a>
        scansm->scan_filt_dups = filter_dups;
   254fc:	4b21      	ldr	r3, [pc, #132]	; (25584 <ble_ll_scan_set_enable+0xe4>)
   254fe:	70d9      	strb	r1, [r3, #3]
        return BLE_ERR_SUCCESS;
   25500:	2000      	movs	r0, #0
   25502:	e7e5      	b.n	254d0 <ble_ll_scan_set_enable+0x30>
        scanp_phy = &scansm->scan_phys[i];
   25504:	1dda      	adds	r2, r3, #7
   25506:	491f      	ldr	r1, [pc, #124]	; (25584 <ble_ll_scan_set_enable+0xe4>)
   25508:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   2550c:	1d15      	adds	r5, r2, #4
        if (!scanp->configured) {
   2550e:	4a1e      	ldr	r2, [pc, #120]	; (25588 <ble_ll_scan_set_enable+0xe8>)
   25510:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   25514:	7952      	ldrb	r2, [r2, #5]
   25516:	b192      	cbz	r2, 2553e <ble_ll_scan_set_enable+0x9e>
        scanp_phy->configured = scanp->configured;
   25518:	460e      	mov	r6, r1
   2551a:	1ddc      	adds	r4, r3, #7
   2551c:	eb01 1404 	add.w	r4, r1, r4, lsl #4
   25520:	7162      	strb	r2, [r4, #5]
        scanp_phy->scan_type = scanp->scan_type;
   25522:	4a19      	ldr	r2, [pc, #100]	; (25588 <ble_ll_scan_set_enable+0xe8>)
   25524:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   25528:	7991      	ldrb	r1, [r2, #6]
   2552a:	71a1      	strb	r1, [r4, #6]
        scanp_phy->timing = scanp->timing;
   2552c:	3408      	adds	r4, #8
   2552e:	3208      	adds	r2, #8
   25530:	ca07      	ldmia	r2, {r0, r1, r2}
   25532:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        if (!scansm->scanp) {
   25536:	6ef2      	ldr	r2, [r6, #108]	; 0x6c
   25538:	b15a      	cbz	r2, 25552 <ble_ll_scan_set_enable+0xb2>
            scansm->scanp_next = scanp_phy;
   2553a:	4a12      	ldr	r2, [pc, #72]	; (25584 <ble_ll_scan_set_enable+0xe4>)
   2553c:	6715      	str	r5, [r2, #112]	; 0x70
    for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   2553e:	3301      	adds	r3, #1
   25540:	2b00      	cmp	r3, #0
   25542:	dddf      	ble.n	25504 <ble_ll_scan_set_enable+0x64>
    if (!scansm->scanp) {
   25544:	4b0f      	ldr	r3, [pc, #60]	; (25584 <ble_ll_scan_set_enable+0xe4>)
   25546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   25548:	b12b      	cbz	r3, 25556 <ble_ll_scan_set_enable+0xb6>
    rc = ble_ll_scan_sm_start(scansm);
   2554a:	480e      	ldr	r0, [pc, #56]	; (25584 <ble_ll_scan_set_enable+0xe4>)
   2554c:	f7ff fe7c 	bl	25248 <ble_ll_scan_sm_start>
    return rc;
   25550:	e7be      	b.n	254d0 <ble_ll_scan_set_enable+0x30>
            scansm->scanp = scanp_phy;
   25552:	66f5      	str	r5, [r6, #108]	; 0x6c
   25554:	e7f3      	b.n	2553e <ble_ll_scan_set_enable+0x9e>
        scansm->scanp = &scansm->scan_phys[PHY_UNCODED];
   25556:	4b0b      	ldr	r3, [pc, #44]	; (25584 <ble_ll_scan_set_enable+0xe4>)
   25558:	f103 0274 	add.w	r2, r3, #116	; 0x74
   2555c:	66da      	str	r2, [r3, #108]	; 0x6c
        scansm->own_addr_type = BLE_ADDR_PUBLIC;
   2555e:	2200      	movs	r2, #0
   25560:	705a      	strb	r2, [r3, #1]
        scansm->scan_filt_policy = BLE_HCI_SCAN_FILT_NO_WL;
   25562:	709a      	strb	r2, [r3, #2]
        scanp_phy->configured = 1;
   25564:	2101      	movs	r1, #1
   25566:	f883 1075 	strb.w	r1, [r3, #117]	; 0x75
        scanp_phy->scan_type = BLE_SCAN_TYPE_PASSIVE;
   2556a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
        scanp_phy->timing.interval =
   2556e:	f240 1247 	movw	r2, #327	; 0x147
   25572:	679a      	str	r2, [r3, #120]	; 0x78
        scanp_phy->timing.window =
   25574:	67da      	str	r2, [r3, #124]	; 0x7c
   25576:	e7e8      	b.n	2554a <ble_ll_scan_set_enable+0xaa>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   25578:	2012      	movs	r0, #18
   2557a:	4770      	bx	lr
   2557c:	2012      	movs	r0, #18
}
   2557e:	4770      	bx	lr
                return BLE_ERR_CMD_DISALLOWED;
   25580:	200c      	movs	r0, #12
   25582:	e7a5      	b.n	254d0 <ble_ll_scan_set_enable+0x30>
   25584:	10004804 	.word	0x10004804
   25588:	100047a0 	.word	0x100047a0

0002558c <ble_ll_scan_chk_resume>:
{
   2558c:	b538      	push	{r3, r4, r5, lr}
    if (scansm->scan_enabled) {
   2558e:	4b18      	ldr	r3, [pc, #96]	; (255f0 <ble_ll_scan_chk_resume+0x64>)
   25590:	781b      	ldrb	r3, [r3, #0]
   25592:	b903      	cbnz	r3, 25596 <ble_ll_scan_chk_resume+0xa>
}
   25594:	bd38      	pop	{r3, r4, r5, pc}
        OS_ENTER_CRITICAL(sr);
   25596:	f7f5 f987 	bl	1a8a8 <os_arch_save_sr>
   2559a:	4605      	mov	r5, r0
        if (scansm->restart_timer_needed) {
   2559c:	4b14      	ldr	r3, [pc, #80]	; (255f0 <ble_ll_scan_chk_resume+0x64>)
   2559e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
   255a2:	b94b      	cbnz	r3, 255b8 <ble_ll_scan_chk_resume+0x2c>
    return os_cputime_get32();
   255a4:	f00e fcab 	bl	33efe <os_cputime_get32>
   255a8:	4604      	mov	r4, r0
        if (ble_ll_state_get() == BLE_LL_STATE_STANDBY &&
   255aa:	f7f9 fc19 	bl	1ede0 <ble_ll_state_get>
   255ae:	b1a0      	cbz	r0, 255da <ble_ll_scan_chk_resume+0x4e>
        OS_EXIT_CRITICAL(sr);
   255b0:	4628      	mov	r0, r5
   255b2:	f7f5 f97f 	bl	1a8b4 <os_arch_restore_sr>
   255b6:	e7ed      	b.n	25594 <ble_ll_scan_chk_resume+0x8>
            scansm->restart_timer_needed = 0;
   255b8:	480d      	ldr	r0, [pc, #52]	; (255f0 <ble_ll_scan_chk_resume+0x64>)
   255ba:	2300      	movs	r3, #0
   255bc:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
            ble_ll_event_send(&scansm->scan_sched_ev);
   255c0:	3030      	adds	r0, #48	; 0x30
   255c2:	f7f9 fc13 	bl	1edec <ble_ll_event_send>
            STATS_INC(ble_ll_stats, scan_timer_restarted);
   255c6:	4a0b      	ldr	r2, [pc, #44]	; (255f4 <ble_ll_scan_chk_resume+0x68>)
   255c8:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   255cc:	3301      	adds	r3, #1
   255ce:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
            OS_EXIT_CRITICAL(sr);
   255d2:	4628      	mov	r0, r5
   255d4:	f7f5 f96e 	bl	1a8b4 <os_arch_restore_sr>
            return;
   255d8:	e7dc      	b.n	25594 <ble_ll_scan_chk_resume+0x8>
            ble_ll_scan_is_inside_window(scansm->scanp, now)) {
   255da:	4621      	mov	r1, r4
   255dc:	4b04      	ldr	r3, [pc, #16]	; (255f0 <ble_ll_scan_chk_resume+0x64>)
   255de:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
   255e0:	f7ff fb0a 	bl	24bf8 <ble_ll_scan_is_inside_window>
        if (ble_ll_state_get() == BLE_LL_STATE_STANDBY &&
   255e4:	2800      	cmp	r0, #0
   255e6:	d0e3      	beq.n	255b0 <ble_ll_scan_chk_resume+0x24>
            ble_ll_scan_start(scansm);
   255e8:	4801      	ldr	r0, [pc, #4]	; (255f0 <ble_ll_scan_chk_resume+0x64>)
   255ea:	f7ff fbe7 	bl	24dbc <ble_ll_scan_start>
   255ee:	e7df      	b.n	255b0 <ble_ll_scan_chk_resume+0x24>
   255f0:	10004804 	.word	0x10004804
   255f4:	10003fdc 	.word	0x10003fdc

000255f8 <ble_ll_scan_interrupted_event_cb>:
{
   255f8:	b508      	push	{r3, lr}
    if (!scansm->scan_enabled) {
   255fa:	4b07      	ldr	r3, [pc, #28]	; (25618 <ble_ll_scan_interrupted_event_cb+0x20>)
   255fc:	781b      	ldrb	r3, [r3, #0]
   255fe:	b123      	cbz	r3, 2560a <ble_ll_scan_interrupted_event_cb+0x12>
    if (scansm->scan_rsp_pending) {
   25600:	4b05      	ldr	r3, [pc, #20]	; (25618 <ble_ll_scan_interrupted_event_cb+0x20>)
   25602:	791b      	ldrb	r3, [r3, #4]
   25604:	b913      	cbnz	r3, 2560c <ble_ll_scan_interrupted_event_cb+0x14>
    ble_ll_scan_chk_resume();
   25606:	f7ff ffc1 	bl	2558c <ble_ll_scan_chk_resume>
}
   2560a:	bd08      	pop	{r3, pc}
        scansm->scan_rsp_pending = 0;
   2560c:	4802      	ldr	r0, [pc, #8]	; (25618 <ble_ll_scan_interrupted_event_cb+0x20>)
   2560e:	2100      	movs	r1, #0
   25610:	7101      	strb	r1, [r0, #4]
        ble_ll_scan_req_backoff(scansm, 0);
   25612:	f7ff fb3b 	bl	24c8c <ble_ll_scan_req_backoff>
   25616:	e7f6      	b.n	25606 <ble_ll_scan_interrupted_event_cb+0xe>
   25618:	10004804 	.word	0x10004804

0002561c <ble_ll_scan_rx_pkt_in>:
{
   2561c:	b570      	push	{r4, r5, r6, lr}
   2561e:	b084      	sub	sp, #16
    if (ptype > max_pdu_type) {
   25620:	2806      	cmp	r0, #6
   25622:	d81c      	bhi.n	2565e <ble_ll_scan_rx_pkt_in+0x42>
   25624:	460d      	mov	r5, r1
   25626:	4614      	mov	r4, r2
    switch (scansm->scanp->scan_type) {
   25628:	4b12      	ldr	r3, [pc, #72]	; (25674 <ble_ll_scan_rx_pkt_in+0x58>)
   2562a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2562c:	789b      	ldrb	r3, [r3, #2]
   2562e:	2b02      	cmp	r3, #2
   25630:	d118      	bne.n	25664 <ble_ll_scan_rx_pkt_in+0x48>
        if (rxinfo->flags & BLE_MBUF_HDR_F_CONNECT_IND_TXD) {
   25632:	8813      	ldrh	r3, [r2, #0]
   25634:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   25638:	d017      	beq.n	2566a <ble_ll_scan_rx_pkt_in+0x4e>
            ble_ll_scan_get_addr_data_from_legacy(ptype, om->om_data, &addrd);
   2563a:	466a      	mov	r2, sp
   2563c:	6809      	ldr	r1, [r1, #0]
   2563e:	f7ff faf3 	bl	24c28 <ble_ll_scan_get_addr_data_from_legacy>
            targeta = addrd.targeta;
   25642:	9e01      	ldr	r6, [sp, #4]
            ble_ll_scan_rx_pkt_in_restore_addr_data(hdr, &addrd);
   25644:	4669      	mov	r1, sp
   25646:	4620      	mov	r0, r4
   25648:	f7ff fc08 	bl	24e5c <ble_ll_scan_rx_pkt_in_restore_addr_data>
            ble_ll_scan_sm_stop(0);
   2564c:	2000      	movs	r0, #0
   2564e:	f7ff fee9 	bl	25424 <ble_ll_scan_sm_stop>
            ble_ll_conn_created_on_legacy(om, &addrd, targeta);
   25652:	4632      	mov	r2, r6
   25654:	4669      	mov	r1, sp
   25656:	4628      	mov	r0, r5
   25658:	f7fb fdd0 	bl	211fc <ble_ll_conn_created_on_legacy>
            return;
   2565c:	e007      	b.n	2566e <ble_ll_scan_rx_pkt_in+0x52>
        ble_ll_scan_chk_resume();
   2565e:	f7ff ff95 	bl	2558c <ble_ll_scan_chk_resume>
        return;
   25662:	e004      	b.n	2566e <ble_ll_scan_rx_pkt_in+0x52>
        ble_ll_scan_rx_pkt_in_on_legacy(ptype, om, hdr, &addrd);
   25664:	466b      	mov	r3, sp
   25666:	f7ff fda5 	bl	251b4 <ble_ll_scan_rx_pkt_in_on_legacy>
    ble_ll_scan_chk_resume();
   2566a:	f7ff ff8f 	bl	2558c <ble_ll_scan_chk_resume>
}
   2566e:	b004      	add	sp, #16
   25670:	bd70      	pop	{r4, r5, r6, pc}
   25672:	bf00      	nop
   25674:	10004804 	.word	0x10004804

00025678 <ble_ll_scan_hci_set_params>:
    if (len != sizeof(*cmd)) {
   25678:	2907      	cmp	r1, #7
   2567a:	d149      	bne.n	25710 <ble_ll_scan_hci_set_params+0x98>
{
   2567c:	b538      	push	{r3, r4, r5, lr}
    if (scansm->scan_enabled) {
   2567e:	4b2d      	ldr	r3, [pc, #180]	; (25734 <ble_ll_scan_hci_set_params+0xbc>)
   25680:	781b      	ldrb	r3, [r3, #0]
   25682:	2b00      	cmp	r3, #0
   25684:	d146      	bne.n	25714 <ble_ll_scan_hci_set_params+0x9c>
    scan_itvl = le16toh(cmd->scan_itvl);
   25686:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    scan_window = le16toh(cmd->scan_window);
   2568a:	f8b0 4003 	ldrh.w	r4, [r0, #3]
    if ((cmd->scan_type != BLE_HCI_SCAN_TYPE_PASSIVE) &&
   2568e:	7803      	ldrb	r3, [r0, #0]
   25690:	2b01      	cmp	r3, #1
   25692:	d841      	bhi.n	25718 <ble_ll_scan_hci_set_params+0xa0>
    if ((scan_itvl < BLE_HCI_SCAN_ITVL_MIN) ||
   25694:	1f13      	subs	r3, r2, #4
   25696:	b29b      	uxth	r3, r3
   25698:	f643 71fc 	movw	r1, #16380	; 0x3ffc
   2569c:	428b      	cmp	r3, r1
   2569e:	d83d      	bhi.n	2571c <ble_ll_scan_hci_set_params+0xa4>
        (scan_itvl > BLE_HCI_SCAN_ITVL_MAX) ||
   256a0:	2c03      	cmp	r4, #3
   256a2:	d93d      	bls.n	25720 <ble_ll_scan_hci_set_params+0xa8>
        (scan_window < BLE_HCI_SCAN_WINDOW_MIN) ||
   256a4:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
   256a8:	d83c      	bhi.n	25724 <ble_ll_scan_hci_set_params+0xac>
        (scan_window > BLE_HCI_SCAN_WINDOW_MAX) ||
   256aa:	42a2      	cmp	r2, r4
   256ac:	d33c      	bcc.n	25728 <ble_ll_scan_hci_set_params+0xb0>
    if (cmd->own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) {
   256ae:	7941      	ldrb	r1, [r0, #5]
   256b0:	2903      	cmp	r1, #3
   256b2:	d83b      	bhi.n	2572c <ble_ll_scan_hci_set_params+0xb4>
    if (cmd->filter_policy > BLE_HCI_SCAN_FILT_MAX) {
   256b4:	7985      	ldrb	r5, [r0, #6]
   256b6:	2d03      	cmp	r5, #3
   256b8:	d83a      	bhi.n	25730 <ble_ll_scan_hci_set_params+0xb8>
    g_ble_ll_scan_params.own_addr_type = cmd->own_addr_type;
   256ba:	4b1f      	ldr	r3, [pc, #124]	; (25738 <ble_ll_scan_hci_set_params+0xc0>)
   256bc:	7019      	strb	r1, [r3, #0]
    g_ble_ll_scan_params.scan_filt_policy = cmd->filter_policy;
   256be:	705d      	strb	r5, [r3, #1]
    scanp->configured = 1;
   256c0:	2101      	movs	r1, #1
   256c2:	7159      	strb	r1, [r3, #5]
    scanp->scan_type = cmd->scan_type;
   256c4:	7801      	ldrb	r1, [r0, #0]
   256c6:	7199      	strb	r1, [r3, #6]
    return ble_ll_tmr_u2t(value * BLE_HCI_SCAN_ITVL);
   256c8:	f240 2071 	movw	r0, #625	; 0x271
   256cc:	fb00 f002 	mul.w	r0, r0, r2
    if (usecs <= 31249) {
   256d0:	f647 2311 	movw	r3, #31249	; 0x7a11
   256d4:	4298      	cmp	r0, r3
   256d6:	d815      	bhi.n	25704 <ble_ll_scan_hci_set_params+0x8c>
        return (usecs * 137439) / 4194304;
   256d8:	4a18      	ldr	r2, [pc, #96]	; (2573c <ble_ll_scan_hci_set_params+0xc4>)
   256da:	fb02 f000 	mul.w	r0, r2, r0
   256de:	0d80      	lsrs	r0, r0, #22
    scanp->timing.interval = ble_ll_scan_time_hci_to_ticks(scan_itvl);
   256e0:	4b15      	ldr	r3, [pc, #84]	; (25738 <ble_ll_scan_hci_set_params+0xc0>)
   256e2:	6098      	str	r0, [r3, #8]
    return ble_ll_tmr_u2t(value * BLE_HCI_SCAN_ITVL);
   256e4:	f240 2071 	movw	r0, #625	; 0x271
   256e8:	fb00 f004 	mul.w	r0, r0, r4
    if (usecs <= 31249) {
   256ec:	f647 2311 	movw	r3, #31249	; 0x7a11
   256f0:	4298      	cmp	r0, r3
   256f2:	d80a      	bhi.n	2570a <ble_ll_scan_hci_set_params+0x92>
        return (usecs * 137439) / 4194304;
   256f4:	4c11      	ldr	r4, [pc, #68]	; (2573c <ble_ll_scan_hci_set_params+0xc4>)
   256f6:	fb04 f000 	mul.w	r0, r4, r0
   256fa:	0d80      	lsrs	r0, r0, #22
    scanp->timing.window = ble_ll_scan_time_hci_to_ticks(scan_window);
   256fc:	4b0e      	ldr	r3, [pc, #56]	; (25738 <ble_ll_scan_hci_set_params+0xc0>)
   256fe:	60d8      	str	r0, [r3, #12]
    return 0;
   25700:	2000      	movs	r0, #0
   25702:	e00a      	b.n	2571a <ble_ll_scan_hci_set_params+0xa2>
    return os_cputime_usecs_to_ticks(usecs);
   25704:	f00e fc00 	bl	33f08 <os_cputime_usecs_to_ticks>
   25708:	e7ea      	b.n	256e0 <ble_ll_scan_hci_set_params+0x68>
   2570a:	f00e fbfd 	bl	33f08 <os_cputime_usecs_to_ticks>
   2570e:	e7f5      	b.n	256fc <ble_ll_scan_hci_set_params+0x84>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   25710:	2012      	movs	r0, #18
}
   25712:	4770      	bx	lr
        return BLE_ERR_CMD_DISALLOWED;
   25714:	200c      	movs	r0, #12
   25716:	e000      	b.n	2571a <ble_ll_scan_hci_set_params+0xa2>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   25718:	2012      	movs	r0, #18
}
   2571a:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2571c:	2012      	movs	r0, #18
   2571e:	e7fc      	b.n	2571a <ble_ll_scan_hci_set_params+0xa2>
   25720:	2012      	movs	r0, #18
   25722:	e7fa      	b.n	2571a <ble_ll_scan_hci_set_params+0xa2>
   25724:	2012      	movs	r0, #18
   25726:	e7f8      	b.n	2571a <ble_ll_scan_hci_set_params+0xa2>
   25728:	2012      	movs	r0, #18
   2572a:	e7f6      	b.n	2571a <ble_ll_scan_hci_set_params+0xa2>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2572c:	2012      	movs	r0, #18
   2572e:	e7f4      	b.n	2571a <ble_ll_scan_hci_set_params+0xa2>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   25730:	2012      	movs	r0, #18
   25732:	e7f2      	b.n	2571a <ble_ll_scan_hci_set_params+0xa2>
   25734:	10004804 	.word	0x10004804
   25738:	100047a0 	.word	0x100047a0
   2573c:	000218df 	.word	0x000218df

00025740 <ble_ll_scan_hci_set_enable>:
    if (len != sizeof(*cmd)) {
   25740:	2902      	cmp	r1, #2
   25742:	d001      	beq.n	25748 <ble_ll_scan_hci_set_enable+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   25744:	2012      	movs	r0, #18
}
   25746:	4770      	bx	lr
{
   25748:	b500      	push	{lr}
   2574a:	b083      	sub	sp, #12
    return ble_ll_scan_set_enable(cmd->enable, cmd->filter_duplicates, 0, 0,
   2574c:	2200      	movs	r2, #0
   2574e:	9200      	str	r2, [sp, #0]
   25750:	4613      	mov	r3, r2
   25752:	7841      	ldrb	r1, [r0, #1]
   25754:	7800      	ldrb	r0, [r0, #0]
   25756:	f7ff fea3 	bl	254a0 <ble_ll_scan_set_enable>
}
   2575a:	b003      	add	sp, #12
   2575c:	f85d fb04 	ldr.w	pc, [sp], #4

00025760 <ble_ll_scan_can_chg_whitelist>:
    if (scansm->scan_enabled && (scansm->scan_filt_policy & 1)) {
   25760:	4b06      	ldr	r3, [pc, #24]	; (2577c <ble_ll_scan_can_chg_whitelist+0x1c>)
   25762:	781b      	ldrb	r3, [r3, #0]
   25764:	b133      	cbz	r3, 25774 <ble_ll_scan_can_chg_whitelist+0x14>
   25766:	4b05      	ldr	r3, [pc, #20]	; (2577c <ble_ll_scan_can_chg_whitelist+0x1c>)
   25768:	789b      	ldrb	r3, [r3, #2]
   2576a:	f013 0f01 	tst.w	r3, #1
   2576e:	d103      	bne.n	25778 <ble_ll_scan_can_chg_whitelist+0x18>
        rc = 1;
   25770:	2001      	movs	r0, #1
   25772:	4770      	bx	lr
   25774:	2001      	movs	r0, #1
   25776:	4770      	bx	lr
        rc = 0;
   25778:	2000      	movs	r0, #0
}
   2577a:	4770      	bx	lr
   2577c:	10004804 	.word	0x10004804

00025780 <ble_ll_scan_initiator_start>:
{
   25780:	b538      	push	{r3, r4, r5, lr}
   25782:	4605      	mov	r5, r0
   25784:	4614      	mov	r4, r2
    scansm->own_addr_type = cc_scan->own_addr_type;
   25786:	7852      	ldrb	r2, [r2, #1]
   25788:	4b1e      	ldr	r3, [pc, #120]	; (25804 <ble_ll_scan_initiator_start+0x84>)
   2578a:	705a      	strb	r2, [r3, #1]
    scansm->scan_filt_policy = cc_scan->filter_policy;
   2578c:	7822      	ldrb	r2, [r4, #0]
   2578e:	709a      	strb	r2, [r3, #2]
    scansm->scanp = NULL;
   25790:	2200      	movs	r2, #0
   25792:	66da      	str	r2, [r3, #108]	; 0x6c
    scansm->scanp_next = NULL;
   25794:	671a      	str	r2, [r3, #112]	; 0x70
    scansm->connsm = connsm;
   25796:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
        scanp_uncoded->configured = 1;
   2579a:	2201      	movs	r2, #1
   2579c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        scanp_uncoded->timing.interval = ble_ll_scan_time_hci_to_ticks(
   257a0:	8963      	ldrh	r3, [r4, #10]
    return ble_ll_tmr_u2t(value * BLE_HCI_SCAN_ITVL);
   257a2:	f240 2071 	movw	r0, #625	; 0x271
   257a6:	fb00 f003 	mul.w	r0, r0, r3
    if (usecs <= 31249) {
   257aa:	f647 2311 	movw	r3, #31249	; 0x7a11
   257ae:	4298      	cmp	r0, r3
   257b0:	d820      	bhi.n	257f4 <ble_ll_scan_initiator_start+0x74>
        return (usecs * 137439) / 4194304;
   257b2:	4b15      	ldr	r3, [pc, #84]	; (25808 <ble_ll_scan_initiator_start+0x88>)
   257b4:	fb03 f000 	mul.w	r0, r3, r0
   257b8:	0d80      	lsrs	r0, r0, #22
        scanp_uncoded->timing.interval = ble_ll_scan_time_hci_to_ticks(
   257ba:	4b12      	ldr	r3, [pc, #72]	; (25804 <ble_ll_scan_initiator_start+0x84>)
   257bc:	6798      	str	r0, [r3, #120]	; 0x78
        scanp_uncoded->timing.window = ble_ll_scan_time_hci_to_ticks(
   257be:	89a0      	ldrh	r0, [r4, #12]
    return ble_ll_tmr_u2t(value * BLE_HCI_SCAN_ITVL);
   257c0:	f240 2371 	movw	r3, #625	; 0x271
   257c4:	fb03 f000 	mul.w	r0, r3, r0
    if (usecs <= 31249) {
   257c8:	f647 2311 	movw	r3, #31249	; 0x7a11
   257cc:	4298      	cmp	r0, r3
   257ce:	d814      	bhi.n	257fa <ble_ll_scan_initiator_start+0x7a>
        return (usecs * 137439) / 4194304;
   257d0:	4b0d      	ldr	r3, [pc, #52]	; (25808 <ble_ll_scan_initiator_start+0x88>)
   257d2:	fb03 f300 	mul.w	r3, r3, r0
   257d6:	0d9b      	lsrs	r3, r3, #22
        scanp_uncoded->timing.window = ble_ll_scan_time_hci_to_ticks(
   257d8:	480a      	ldr	r0, [pc, #40]	; (25804 <ble_ll_scan_initiator_start+0x84>)
   257da:	67c3      	str	r3, [r0, #124]	; 0x7c
        scanp_uncoded->scan_type = BLE_SCAN_TYPE_INITIATE;
   257dc:	2302      	movs	r3, #2
   257de:	f880 3076 	strb.w	r3, [r0, #118]	; 0x76
        scansm->scanp = scanp_uncoded;
   257e2:	f100 0374 	add.w	r3, r0, #116	; 0x74
   257e6:	66c3      	str	r3, [r0, #108]	; 0x6c
    rc = ble_ll_scan_sm_start(scansm);
   257e8:	f7ff fd2e 	bl	25248 <ble_ll_scan_sm_start>
    if (rc == 0) {
   257ec:	b908      	cbnz	r0, 257f2 <ble_ll_scan_initiator_start+0x72>
        g_ble_ll_conn_create_sm.connsm = connsm;
   257ee:	4b07      	ldr	r3, [pc, #28]	; (2580c <ble_ll_scan_initiator_start+0x8c>)
   257f0:	601d      	str	r5, [r3, #0]
}
   257f2:	bd38      	pop	{r3, r4, r5, pc}
    return os_cputime_usecs_to_ticks(usecs);
   257f4:	f00e fb88 	bl	33f08 <os_cputime_usecs_to_ticks>
   257f8:	e7df      	b.n	257ba <ble_ll_scan_initiator_start+0x3a>
   257fa:	f00e fb85 	bl	33f08 <os_cputime_usecs_to_ticks>
   257fe:	4603      	mov	r3, r0
   25800:	e7ea      	b.n	257d8 <ble_ll_scan_initiator_start+0x58>
   25802:	bf00      	nop
   25804:	10004804 	.word	0x10004804
   25808:	000218df 	.word	0x000218df
   2580c:	10004464 	.word	0x10004464

00025810 <ble_ll_scan_enabled>:
}
   25810:	4b01      	ldr	r3, [pc, #4]	; (25818 <ble_ll_scan_enabled+0x8>)
   25812:	7818      	ldrb	r0, [r3, #0]
   25814:	4770      	bx	lr
   25816:	bf00      	nop
   25818:	10004804 	.word	0x10004804

0002581c <ble_ll_scan_get_peer_rpa>:
}
   2581c:	4800      	ldr	r0, [pc, #0]	; (25820 <ble_ll_scan_get_peer_rpa+0x4>)
   2581e:	4770      	bx	lr
   25820:	1000480b 	.word	0x1000480b

00025824 <ble_ll_scan_get_local_rpa>:
}
   25824:	4800      	ldr	r0, [pc, #0]	; (25828 <ble_ll_scan_get_local_rpa+0x4>)
   25826:	4770      	bx	lr
   25828:	1000481f 	.word	0x1000481f

0002582c <ble_ll_scan_set_peer_rpa>:
    memcpy(scansm->scan_peer_rpa, rpa, BLE_DEV_ADDR_LEN);
   2582c:	4b03      	ldr	r3, [pc, #12]	; (2583c <ble_ll_scan_set_peer_rpa+0x10>)
   2582e:	6802      	ldr	r2, [r0, #0]
   25830:	f8c3 2007 	str.w	r2, [r3, #7]
   25834:	8882      	ldrh	r2, [r0, #4]
   25836:	f8a3 200b 	strh.w	r2, [r3, #11]
}
   2583a:	4770      	bx	lr
   2583c:	10004804 	.word	0x10004804

00025840 <ble_ll_scan_reset>:
 *
 * @return int
 */
void
ble_ll_scan_reset(void)
{
   25840:	b510      	push	{r4, lr}
    struct ble_ll_scan_sm *scansm;

    scansm = &g_ble_ll_scan_sm;

    /* If enabled, stop it. */
    if (scansm->scan_enabled) {
   25842:	4b0c      	ldr	r3, [pc, #48]	; (25874 <ble_ll_scan_reset+0x34>)
   25844:	781b      	ldrb	r3, [r3, #0]
   25846:	b983      	cbnz	r3, 2586a <ble_ll_scan_reset+0x2a>
    ble_npl_callout_stop(&scansm->duration_timer);
    ble_npl_callout_stop(&scansm->period_timer);
#endif

    /* Reset duplicate advertisers and those from which we rxd a response */
    g_ble_ll_scan_num_rsp_advs = 0;
   25848:	2400      	movs	r4, #0
   2584a:	4b0b      	ldr	r3, [pc, #44]	; (25878 <ble_ll_scan_reset+0x38>)
   2584c:	701c      	strb	r4, [r3, #0]
    memset(&g_ble_ll_scan_rsp_advs[0], 0, sizeof(g_ble_ll_scan_rsp_advs));
   2584e:	2250      	movs	r2, #80	; 0x50
   25850:	4621      	mov	r1, r4
   25852:	480a      	ldr	r0, [pc, #40]	; (2587c <ble_ll_scan_reset+0x3c>)
   25854:	f7f5 fa21 	bl	1ac9a <memset>

    os_mempool_clear(&g_scan_dup_pool);
   25858:	4809      	ldr	r0, [pc, #36]	; (25880 <ble_ll_scan_reset+0x40>)
   2585a:	f7f4 fabd 	bl	19dd8 <os_mempool_clear>
    TAILQ_INIT(&g_scan_dup_list);
   2585e:	4b09      	ldr	r3, [pc, #36]	; (25884 <ble_ll_scan_reset+0x44>)
   25860:	601c      	str	r4, [r3, #0]
   25862:	605b      	str	r3, [r3, #4]

    /* Call the common init function again */
    ble_ll_scan_common_init();
   25864:	f7ff fd92 	bl	2538c <ble_ll_scan_common_init>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_EXT_ADV)
    ble_ll_scan_aux_init();
#endif
}
   25868:	bd10      	pop	{r4, pc}
        ble_ll_scan_sm_stop(0);
   2586a:	2000      	movs	r0, #0
   2586c:	f7ff fdda 	bl	25424 <ble_ll_scan_sm_stop>
   25870:	e7ea      	b.n	25848 <ble_ll_scan_reset+0x8>
   25872:	bf00      	nop
   25874:	10004804 	.word	0x10004804
   25878:	1000479d 	.word	0x1000479d
   2587c:	100047b4 	.word	0x100047b4
   25880:	10004914 	.word	0x10004914
   25884:	1000488c 	.word	0x1000488c

00025888 <ble_ll_scan_init>:
 * Initialize a scanner. Must be called before scanning can be started.
 * Expected to be called with a un-initialized scanning state machine.
 */
void
ble_ll_scan_init(void)
{
   25888:	b500      	push	{lr}
   2588a:	b083      	sub	sp, #12
    os_error_t err;

    err = os_mempool_init(&g_scan_dup_pool,
   2588c:	4b0d      	ldr	r3, [pc, #52]	; (258c4 <ble_ll_scan_init+0x3c>)
   2588e:	9300      	str	r3, [sp, #0]
   25890:	4b0d      	ldr	r3, [pc, #52]	; (258c8 <ble_ll_scan_init+0x40>)
   25892:	2210      	movs	r2, #16
   25894:	2108      	movs	r1, #8
   25896:	480d      	ldr	r0, [pc, #52]	; (258cc <ble_ll_scan_init+0x44>)
   25898:	f7f4 fa94 	bl	19dc4 <os_mempool_init>
                          MYNEWT_VAL(BLE_LL_NUM_SCAN_DUP_ADVS),
                          sizeof(struct ble_ll_scan_dup_entry),
                          g_scan_dup_mem,
                          "ble_ll_scan_dup_pool");
    BLE_LL_ASSERT(err == 0);
   2589c:	b940      	cbnz	r0, 258b0 <ble_ll_scan_init+0x28>

    TAILQ_INIT(&g_scan_dup_list);
   2589e:	4b0c      	ldr	r3, [pc, #48]	; (258d0 <ble_ll_scan_init+0x48>)
   258a0:	2200      	movs	r2, #0
   258a2:	601a      	str	r2, [r3, #0]
   258a4:	605b      	str	r3, [r3, #4]

    ble_ll_scan_common_init();
   258a6:	f7ff fd71 	bl	2538c <ble_ll_scan_common_init>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_EXT_ADV)
    ble_ll_scan_aux_init();
#endif
}
   258aa:	b003      	add	sp, #12
   258ac:	f85d fb04 	ldr.w	pc, [sp], #4
    BLE_LL_ASSERT(err == 0);
   258b0:	f7ee ff20 	bl	146f4 <hal_debugger_connected>
   258b4:	b100      	cbz	r0, 258b8 <ble_ll_scan_init+0x30>
   258b6:	be01      	bkpt	0x0001
   258b8:	2300      	movs	r3, #0
   258ba:	461a      	mov	r2, r3
   258bc:	4619      	mov	r1, r3
   258be:	4618      	mov	r0, r3
   258c0:	f7f3 fa36 	bl	18d30 <__assert_func>
   258c4:	00038c08 	.word	0x00038c08
   258c8:	10004894 	.word	0x10004894
   258cc:	10004914 	.word	0x10004914
   258d0:	1000488c 	.word	0x1000488c

000258d4 <preempt_any>:
static int
preempt_any(struct ble_ll_sched_item *sch,
            struct ble_ll_sched_item *item)
{
    return 1;
}
   258d4:	2001      	movs	r0, #1
   258d6:	4770      	bx	lr

000258d8 <preempt_none>:
static int
preempt_none(struct ble_ll_sched_item *sch,
             struct ble_ll_sched_item *item)
{
    return 0;
}
   258d8:	2000      	movs	r0, #0
   258da:	4770      	bx	lr

000258dc <preempt_any_except_conn>:

static int
preempt_any_except_conn(struct ble_ll_sched_item *sch,
                        struct ble_ll_sched_item *item)
{
   258dc:	b508      	push	{r3, lr}
    BLE_LL_ASSERT(sch->sched_type == BLE_LL_SCHED_TYPE_CONN);
   258de:	7803      	ldrb	r3, [r0, #0]
   258e0:	2b03      	cmp	r3, #3
   258e2:	d104      	bne.n	258ee <preempt_any_except_conn+0x12>

    if (item->sched_type != BLE_LL_SCHED_TYPE_CONN) {
   258e4:	780b      	ldrb	r3, [r1, #0]
   258e6:	2b03      	cmp	r3, #3
   258e8:	d00b      	beq.n	25902 <preempt_any_except_conn+0x26>
        return 1;
   258ea:	2001      	movs	r0, #1
    }

    return ble_ll_conn_is_lru(sch->cb_arg, item->cb_arg);
}
   258ec:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(sch->sched_type == BLE_LL_SCHED_TYPE_CONN);
   258ee:	f7ee ff01 	bl	146f4 <hal_debugger_connected>
   258f2:	b100      	cbz	r0, 258f6 <preempt_any_except_conn+0x1a>
   258f4:	be01      	bkpt	0x0001
   258f6:	2300      	movs	r3, #0
   258f8:	461a      	mov	r2, r3
   258fa:	4619      	mov	r1, r3
   258fc:	4618      	mov	r0, r3
   258fe:	f7f3 fa17 	bl	18d30 <__assert_func>
    return ble_ll_conn_is_lru(sch->cb_arg, item->cb_arg);
   25902:	68c9      	ldr	r1, [r1, #12]
   25904:	68c0      	ldr	r0, [r0, #12]
   25906:	f7fa ff51 	bl	207ac <ble_ll_conn_is_lru>
   2590a:	e7ef      	b.n	258ec <preempt_any_except_conn+0x10>

0002590c <ble_ll_sched_overlaps_current>:
 * Determines if the schedule item overlaps the currently running schedule
 * item. We only care about connection schedule items
 */
static int
ble_ll_sched_overlaps_current(struct ble_ll_sched_item *sch)
{
   2590c:	b510      	push	{r4, lr}
   2590e:	4604      	mov	r4, r0
    int rc = 0;
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL) || MYNEWT_VAL(BLE_LL_ROLE_CENTRAL)
    uint32_t ce_end_time;

    if (ble_ll_state_get() == BLE_LL_STATE_CONNECTION) {
   25910:	f7f9 fa66 	bl	1ede0 <ble_ll_state_get>
   25914:	2804      	cmp	r0, #4
   25916:	d001      	beq.n	2591c <ble_ll_sched_overlaps_current+0x10>
    int rc = 0;
   25918:	2000      	movs	r0, #0
            rc = 1;
        }
    }
#endif
    return rc;
}
   2591a:	bd10      	pop	{r4, pc}
        ce_end_time = ble_ll_conn_get_ce_end_time();
   2591c:	f7fa ff50 	bl	207c0 <ble_ll_conn_get_ce_end_time>
        if (LL_TMR_GT(ce_end_time, sch->start_time)) {
   25920:	6863      	ldr	r3, [r4, #4]
   25922:	1ac0      	subs	r0, r0, r3
   25924:	2800      	cmp	r0, #0
   25926:	dd01      	ble.n	2592c <ble_ll_sched_overlaps_current+0x20>
            rc = 1;
   25928:	2001      	movs	r0, #1
    return rc;
   2592a:	e7f6      	b.n	2591a <ble_ll_sched_overlaps_current+0xe>
    int rc = 0;
   2592c:	2000      	movs	r0, #0
   2592e:	e7f4      	b.n	2591a <ble_ll_sched_overlaps_current+0xe>

00025930 <ble_ll_sched_preempt>:
{
   25930:	b538      	push	{r3, r4, r5, lr}
   25932:	4605      	mov	r5, r0
   25934:	460c      	mov	r4, r1
    entry = first;
   25936:	e008      	b.n	2594a <ble_ll_sched_preempt+0x1a>
        TAILQ_REMOVE(&g_ble_ll_sched_q, entry, link);
   25938:	6999      	ldr	r1, [r3, #24]
   2593a:	4a14      	ldr	r2, [pc, #80]	; (2598c <ble_ll_sched_preempt+0x5c>)
   2593c:	6051      	str	r1, [r2, #4]
   2593e:	e00a      	b.n	25956 <ble_ll_sched_preempt+0x26>
                ble_ll_adv_event_rmvd_from_sched(entry->cb_arg);
   25940:	68d8      	ldr	r0, [r3, #12]
   25942:	f7fa f93d 	bl	1fbc0 <ble_ll_adv_event_rmvd_from_sched>
    } while (entry != sch);
   25946:	42ac      	cmp	r4, r5
   25948:	d01e      	beq.n	25988 <ble_ll_sched_preempt+0x58>
        next = TAILQ_NEXT(entry, link);
   2594a:	4623      	mov	r3, r4
   2594c:	6964      	ldr	r4, [r4, #20]
        TAILQ_REMOVE(&g_ble_ll_sched_q, entry, link);
   2594e:	2c00      	cmp	r4, #0
   25950:	d0f2      	beq.n	25938 <ble_ll_sched_preempt+0x8>
   25952:	699a      	ldr	r2, [r3, #24]
   25954:	61a2      	str	r2, [r4, #24]
   25956:	699a      	ldr	r2, [r3, #24]
   25958:	6959      	ldr	r1, [r3, #20]
   2595a:	6011      	str	r1, [r2, #0]
        entry->enqueued = 0;
   2595c:	2200      	movs	r2, #0
   2595e:	705a      	strb	r2, [r3, #1]
        switch (entry->sched_type) {
   25960:	781a      	ldrb	r2, [r3, #0]
   25962:	2a01      	cmp	r2, #1
   25964:	d0ec      	beq.n	25940 <ble_ll_sched_preempt+0x10>
   25966:	2a03      	cmp	r2, #3
   25968:	d104      	bne.n	25974 <ble_ll_sched_preempt+0x44>
                connsm = (struct ble_ll_conn_sm *)entry->cb_arg;
   2596a:	68d8      	ldr	r0, [r3, #12]
                ble_ll_event_send(&connsm->conn_ev_end);
   2596c:	3098      	adds	r0, #152	; 0x98
   2596e:	f7f9 fa3d 	bl	1edec <ble_ll_event_send>
                break;
   25972:	e7e8      	b.n	25946 <ble_ll_sched_preempt+0x16>
                BLE_LL_ASSERT(0);
   25974:	f7ee febe 	bl	146f4 <hal_debugger_connected>
   25978:	b100      	cbz	r0, 2597c <ble_ll_sched_preempt+0x4c>
   2597a:	be01      	bkpt	0x0001
   2597c:	2300      	movs	r3, #0
   2597e:	461a      	mov	r2, r3
   25980:	4619      	mov	r1, r3
   25982:	4618      	mov	r0, r3
   25984:	f7f3 f9d4 	bl	18d30 <__assert_func>
}
   25988:	bd38      	pop	{r3, r4, r5, pc}
   2598a:	bf00      	nop
   2598c:	10004934 	.word	0x10004934

00025990 <ble_ll_sched_insert>:
{
   25990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25994:	4605      	mov	r5, r0
   25996:	4688      	mov	r8, r1
   25998:	4616      	mov	r6, r2
    OS_ASSERT_CRITICAL();
   2599a:	f7f4 ff8e 	bl	1a8ba <os_arch_in_critical>
   2599e:	b150      	cbz	r0, 259b6 <ble_ll_sched_insert+0x26>
    max_start_time = sch->start_time + max_delay;
   259a0:	686b      	ldr	r3, [r5, #4]
   259a2:	eb03 0a08 	add.w	sl, r3, r8
    duration = sch->end_time - sch->start_time;
   259a6:	68aa      	ldr	r2, [r5, #8]
   259a8:	eba2 0903 	sub.w	r9, r2, r3
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   259ac:	4b43      	ldr	r3, [pc, #268]	; (25abc <ble_ll_sched_insert+0x12c>)
   259ae:	681c      	ldr	r4, [r3, #0]
    if (!first) {
   259b0:	b15c      	cbz	r4, 259ca <ble_ll_sched_insert+0x3a>
    preempt_first = NULL;
   259b2:	2700      	movs	r7, #0
   259b4:	e02b      	b.n	25a0e <ble_ll_sched_insert+0x7e>
    OS_ASSERT_CRITICAL();
   259b6:	f7ee fe9d 	bl	146f4 <hal_debugger_connected>
   259ba:	b100      	cbz	r0, 259be <ble_ll_sched_insert+0x2e>
   259bc:	be01      	bkpt	0x0001
   259be:	2300      	movs	r3, #0
   259c0:	461a      	mov	r2, r3
   259c2:	4619      	mov	r1, r3
   259c4:	4618      	mov	r0, r3
   259c6:	f7f3 f9b3 	bl	18d30 <__assert_func>
        TAILQ_INSERT_HEAD(&g_ble_ll_sched_q, sch, link);
   259ca:	462a      	mov	r2, r5
   259cc:	f842 4f14 	str.w	r4, [r2, #20]!
   259d0:	605a      	str	r2, [r3, #4]
   259d2:	601d      	str	r5, [r3, #0]
   259d4:	61ab      	str	r3, [r5, #24]
        sch->enqueued = 1;
   259d6:	2301      	movs	r3, #1
   259d8:	706b      	strb	r3, [r5, #1]
    if (preempt_first) {
   259da:	e041      	b.n	25a60 <ble_ll_sched_insert+0xd0>
            TAILQ_INSERT_BEFORE(entry, sch, link);
   259dc:	69a3      	ldr	r3, [r4, #24]
   259de:	61ab      	str	r3, [r5, #24]
   259e0:	616c      	str	r4, [r5, #20]
   259e2:	69a3      	ldr	r3, [r4, #24]
   259e4:	601d      	str	r5, [r3, #0]
   259e6:	f105 0314 	add.w	r3, r5, #20
   259ea:	61a3      	str	r3, [r4, #24]
            sch->enqueued = 1;
   259ec:	2301      	movs	r3, #1
   259ee:	706b      	strb	r3, [r5, #1]
            goto done;
   259f0:	e02f      	b.n	25a52 <ble_ll_sched_insert+0xc2>
                sch->start_time = entry->end_time + 1;
   259f2:	68a3      	ldr	r3, [r4, #8]
   259f4:	3301      	adds	r3, #1
   259f6:	606b      	str	r3, [r5, #4]
                if ((max_delay == 0) || LL_TMR_GEQ(sch->start_time,
   259f8:	f1b8 0f00 	cmp.w	r8, #0
   259fc:	d01b      	beq.n	25a36 <ble_ll_sched_insert+0xa6>
   259fe:	eba3 020a 	sub.w	r2, r3, sl
   25a02:	2a00      	cmp	r2, #0
   25a04:	da17      	bge.n	25a36 <ble_ll_sched_insert+0xa6>
                sch->end_time = sch->start_time + duration;
   25a06:	444b      	add	r3, r9
   25a08:	60ab      	str	r3, [r5, #8]
                preempt_first = NULL;
   25a0a:	2700      	movs	r7, #0
    TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   25a0c:	6964      	ldr	r4, [r4, #20]
   25a0e:	b1ac      	cbz	r4, 25a3c <ble_ll_sched_insert+0xac>
        if (LL_TMR_LEQ(sch->end_time, entry->start_time)) {
   25a10:	68ab      	ldr	r3, [r5, #8]
   25a12:	6862      	ldr	r2, [r4, #4]
   25a14:	1a9b      	subs	r3, r3, r2
   25a16:	2b00      	cmp	r3, #0
   25a18:	dde0      	ble.n	259dc <ble_ll_sched_insert+0x4c>
           LL_TMR_GT(sch2->end_time, sch1->start_time);
   25a1a:	68a3      	ldr	r3, [r4, #8]
   25a1c:	686a      	ldr	r2, [r5, #4]
   25a1e:	1a9b      	subs	r3, r3, r2
    return LL_TMR_GT(sch1->end_time, sch2->start_time) &&
   25a20:	2b00      	cmp	r3, #0
   25a22:	ddf3      	ble.n	25a0c <ble_ll_sched_insert+0x7c>
            if (preempt_cb(sch, entry)) {
   25a24:	4621      	mov	r1, r4
   25a26:	4628      	mov	r0, r5
   25a28:	47b0      	blx	r6
   25a2a:	2800      	cmp	r0, #0
   25a2c:	d0e1      	beq.n	259f2 <ble_ll_sched_insert+0x62>
                if (!preempt_first) {
   25a2e:	2f00      	cmp	r7, #0
   25a30:	d1ec      	bne.n	25a0c <ble_ll_sched_insert+0x7c>
                    preempt_first = entry;
   25a32:	4627      	mov	r7, r4
   25a34:	e7ea      	b.n	25a0c <ble_ll_sched_insert+0x7c>
                    sch->enqueued = 0;
   25a36:	2300      	movs	r3, #0
   25a38:	706b      	strb	r3, [r5, #1]
    if (preempt_first) {
   25a3a:	e011      	b.n	25a60 <ble_ll_sched_insert+0xd0>
        TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   25a3c:	2300      	movs	r3, #0
   25a3e:	616b      	str	r3, [r5, #20]
   25a40:	4b1e      	ldr	r3, [pc, #120]	; (25abc <ble_ll_sched_insert+0x12c>)
   25a42:	685a      	ldr	r2, [r3, #4]
   25a44:	61aa      	str	r2, [r5, #24]
   25a46:	6015      	str	r5, [r2, #0]
   25a48:	f105 0214 	add.w	r2, r5, #20
   25a4c:	605a      	str	r2, [r3, #4]
        sch->enqueued = 1;
   25a4e:	2301      	movs	r3, #1
   25a50:	706b      	strb	r3, [r5, #1]
    if (preempt_first) {
   25a52:	b12f      	cbz	r7, 25a60 <ble_ll_sched_insert+0xd0>
        BLE_LL_ASSERT(sch->enqueued);
   25a54:	786b      	ldrb	r3, [r5, #1]
   25a56:	b163      	cbz	r3, 25a72 <ble_ll_sched_insert+0xe2>
        ble_ll_sched_preempt(sch, preempt_first);
   25a58:	4639      	mov	r1, r7
   25a5a:	4628      	mov	r0, r5
   25a5c:	f7ff ff68 	bl	25930 <ble_ll_sched_preempt>
    if (TAILQ_FIRST(&g_ble_ll_sched_q) == sch) {
   25a60:	4b16      	ldr	r3, [pc, #88]	; (25abc <ble_ll_sched_insert+0x12c>)
   25a62:	681b      	ldr	r3, [r3, #0]
   25a64:	42ab      	cmp	r3, r5
   25a66:	d00e      	beq.n	25a86 <ble_ll_sched_insert+0xf6>
    return sch->enqueued ? 0 : -1;
   25a68:	786b      	ldrb	r3, [r5, #1]
   25a6a:	b31b      	cbz	r3, 25ab4 <ble_ll_sched_insert+0x124>
   25a6c:	2000      	movs	r0, #0
}
   25a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        BLE_LL_ASSERT(sch->enqueued);
   25a72:	f7ee fe3f 	bl	146f4 <hal_debugger_connected>
   25a76:	b100      	cbz	r0, 25a7a <ble_ll_sched_insert+0xea>
   25a78:	be01      	bkpt	0x0001
   25a7a:	2300      	movs	r3, #0
   25a7c:	461a      	mov	r2, r3
   25a7e:	4619      	mov	r1, r3
   25a80:	4618      	mov	r0, r3
   25a82:	f7f3 f955 	bl	18d30 <__assert_func>
        BLE_LL_ASSERT(sch->enqueued);
   25a86:	786b      	ldrb	r3, [r5, #1]
   25a88:	b153      	cbz	r3, 25aa0 <ble_ll_sched_insert+0x110>
    if (g_ble_ll_sched_q_head_changed) {
   25a8a:	4b0d      	ldr	r3, [pc, #52]	; (25ac0 <ble_ll_sched_insert+0x130>)
   25a8c:	781b      	ldrb	r3, [r3, #0]
   25a8e:	2b00      	cmp	r3, #0
   25a90:	d1ea      	bne.n	25a68 <ble_ll_sched_insert+0xd8>
    g_ble_ll_sched_q_head_changed = 1;
   25a92:	4b0b      	ldr	r3, [pc, #44]	; (25ac0 <ble_ll_sched_insert+0x130>)
   25a94:	2201      	movs	r2, #1
   25a96:	701a      	strb	r2, [r3, #0]
    os_cputime_timer_stop(&tmr->t);
   25a98:	480a      	ldr	r0, [pc, #40]	; (25ac4 <ble_ll_sched_insert+0x134>)
   25a9a:	f00e fa2c 	bl	33ef6 <os_cputime_timer_stop>
}
   25a9e:	e7e3      	b.n	25a68 <ble_ll_sched_insert+0xd8>
        BLE_LL_ASSERT(sch->enqueued);
   25aa0:	f7ee fe28 	bl	146f4 <hal_debugger_connected>
   25aa4:	b100      	cbz	r0, 25aa8 <ble_ll_sched_insert+0x118>
   25aa6:	be01      	bkpt	0x0001
   25aa8:	2300      	movs	r3, #0
   25aaa:	461a      	mov	r2, r3
   25aac:	4619      	mov	r1, r3
   25aae:	4618      	mov	r0, r3
   25ab0:	f7f3 f93e 	bl	18d30 <__assert_func>
    return sch->enqueued ? 0 : -1;
   25ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25ab8:	e7d9      	b.n	25a6e <ble_ll_sched_insert+0xde>
   25aba:	bf00      	nop
   25abc:	10004934 	.word	0x10004934
   25ac0:	1000493c 	.word	0x1000493c
   25ac4:	10004940 	.word	0x10004940

00025ac8 <ble_ll_sched_execute_item>:
 *
 * @return int 0: schedule item is not over; otherwise schedule item is done.
 */
static int
ble_ll_sched_execute_item(struct ble_ll_sched_item *sch)
{
   25ac8:	b538      	push	{r3, r4, r5, lr}
   25aca:	4605      	mov	r5, r0
    int rc;
    uint8_t lls;

    lls = ble_ll_state_get();
   25acc:	f7f9 f988 	bl	1ede0 <ble_ll_state_get>
   25ad0:	4604      	mov	r4, r0
    return os_cputime_get32();
   25ad2:	f00e fa14 	bl	33efe <os_cputime_get32>

    ble_ll_trace_u32x3(BLE_LL_TRACE_ID_SCHED, lls, ble_ll_tmr_get(),
                       sch->start_time);

    if (lls == BLE_LL_STATE_STANDBY) {
   25ad6:	b924      	cbnz	r4, 25ae2 <ble_ll_sched_execute_item+0x1a>
        BLE_LL_ASSERT(0);
        break;
    }

sched:
    BLE_LL_ASSERT(sch->sched_cb);
   25ad8:	692b      	ldr	r3, [r5, #16]
   25ada:	b353      	cbz	r3, 25b32 <ble_ll_sched_execute_item+0x6a>

    BLE_LL_DEBUG_GPIO(SCHED_ITEM, 1);
    rc = sch->sched_cb(sch);
   25adc:	4628      	mov	r0, r5
   25ade:	4798      	blx	r3
    if (rc != BLE_LL_SCHED_STATE_RUNNING) {
        BLE_LL_DEBUG_GPIO(SCHED_ITEM, 0);
    }

    return rc;
}
   25ae0:	bd38      	pop	{r3, r4, r5, pc}
    ble_phy_disable();
   25ae2:	f000 fbfb 	bl	262dc <ble_phy_disable>
    switch (lls) {
   25ae6:	2c02      	cmp	r4, #2
   25ae8:	d00d      	beq.n	25b06 <ble_ll_sched_execute_item+0x3e>
   25aea:	2c04      	cmp	r4, #4
   25aec:	d01a      	beq.n	25b24 <ble_ll_sched_execute_item+0x5c>
   25aee:	2c01      	cmp	r4, #1
   25af0:	d00f      	beq.n	25b12 <ble_ll_sched_execute_item+0x4a>
        BLE_LL_ASSERT(0);
   25af2:	f7ee fdff 	bl	146f4 <hal_debugger_connected>
   25af6:	b100      	cbz	r0, 25afa <ble_ll_sched_execute_item+0x32>
   25af8:	be01      	bkpt	0x0001
   25afa:	2300      	movs	r3, #0
   25afc:	461a      	mov	r2, r3
   25afe:	4619      	mov	r1, r3
   25b00:	4618      	mov	r0, r3
   25b02:	f7f3 f915 	bl	18d30 <__assert_func>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   25b06:	2000      	movs	r0, #0
   25b08:	f7f9 f964 	bl	1edd4 <ble_ll_state_set>
        ble_ll_scan_halt();
   25b0c:	f7ff fc7c 	bl	25408 <ble_ll_scan_halt>
        break;
   25b10:	e7e2      	b.n	25ad8 <ble_ll_sched_execute_item+0x10>
        STATS_INC(ble_ll_stats, sched_state_adv_errs);
   25b12:	4a0d      	ldr	r2, [pc, #52]	; (25b48 <ble_ll_sched_execute_item+0x80>)
   25b14:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   25b18:	3301      	adds	r3, #1
   25b1a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        ble_ll_adv_halt();
   25b1e:	f7fa f853 	bl	1fbc8 <ble_ll_adv_halt>
        break;
   25b22:	e7d9      	b.n	25ad8 <ble_ll_sched_execute_item+0x10>
        STATS_INC(ble_ll_stats, sched_state_conn_errs);
   25b24:	4a08      	ldr	r2, [pc, #32]	; (25b48 <ble_ll_sched_execute_item+0x80>)
   25b26:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   25b28:	3301      	adds	r3, #1
   25b2a:	67d3      	str	r3, [r2, #124]	; 0x7c
        ble_ll_conn_event_halt();
   25b2c:	f7fb fb50 	bl	211d0 <ble_ll_conn_event_halt>
        break;
   25b30:	e7d2      	b.n	25ad8 <ble_ll_sched_execute_item+0x10>
    BLE_LL_ASSERT(sch->sched_cb);
   25b32:	f7ee fddf 	bl	146f4 <hal_debugger_connected>
   25b36:	b100      	cbz	r0, 25b3a <ble_ll_sched_execute_item+0x72>
   25b38:	be01      	bkpt	0x0001
   25b3a:	2300      	movs	r3, #0
   25b3c:	461a      	mov	r2, r3
   25b3e:	4619      	mov	r1, r3
   25b40:	4618      	mov	r0, r3
   25b42:	f7f3 f8f5 	bl	18d30 <__assert_func>
   25b46:	bf00      	nop
   25b48:	10003fdc 	.word	0x10003fdc

00025b4c <ble_ll_sched_run>:
    struct ble_ll_sched_item *sch;

    BLE_LL_DEBUG_GPIO(SCHED_RUN, 1);

    /* Look through schedule queue */
    sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   25b4c:	4b11      	ldr	r3, [pc, #68]	; (25b94 <ble_ll_sched_run+0x48>)
   25b4e:	6818      	ldr	r0, [r3, #0]
    if (sch) {
   25b50:	b1f0      	cbz	r0, 25b90 <ble_ll_sched_run+0x44>
{
   25b52:	b510      	push	{r4, lr}
            g_ble_ll_sched_max_early = dt;
        }
#endif

        /* Remove schedule item and execute the callback */
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   25b54:	6943      	ldr	r3, [r0, #20]
   25b56:	b1bb      	cbz	r3, 25b88 <ble_ll_sched_run+0x3c>
   25b58:	6982      	ldr	r2, [r0, #24]
   25b5a:	619a      	str	r2, [r3, #24]
   25b5c:	6983      	ldr	r3, [r0, #24]
   25b5e:	6942      	ldr	r2, [r0, #20]
   25b60:	601a      	str	r2, [r3, #0]
        sch->enqueued = 0;
   25b62:	2300      	movs	r3, #0
   25b64:	7043      	strb	r3, [r0, #1]
        g_ble_ll_sched_q_head_changed = 1;
   25b66:	4c0c      	ldr	r4, [pc, #48]	; (25b98 <ble_ll_sched_run+0x4c>)
   25b68:	2301      	movs	r3, #1
   25b6a:	7023      	strb	r3, [r4, #0]

        ble_ll_sched_execute_item(sch);
   25b6c:	f7ff ffac 	bl	25ac8 <ble_ll_sched_execute_item>
    if (!g_ble_ll_sched_q_head_changed) {
   25b70:	7823      	ldrb	r3, [r4, #0]
   25b72:	b143      	cbz	r3, 25b86 <ble_ll_sched_run+0x3a>
    g_ble_ll_sched_q_head_changed = 0;
   25b74:	2200      	movs	r2, #0
   25b76:	7022      	strb	r2, [r4, #0]
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   25b78:	4b06      	ldr	r3, [pc, #24]	; (25b94 <ble_ll_sched_run+0x48>)
   25b7a:	681b      	ldr	r3, [r3, #0]
    if (first) {
   25b7c:	b11b      	cbz	r3, 25b86 <ble_ll_sched_run+0x3a>
    os_cputime_timer_start(&tmr->t, tgt);
   25b7e:	6859      	ldr	r1, [r3, #4]
   25b80:	4806      	ldr	r0, [pc, #24]	; (25b9c <ble_ll_sched_run+0x50>)
   25b82:	f00e f9b4 	bl	33eee <os_cputime_timer_start>

        ble_ll_sched_restart();
    }

    BLE_LL_DEBUG_GPIO(SCHED_RUN, 0);
}
   25b86:	bd10      	pop	{r4, pc}
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   25b88:	6982      	ldr	r2, [r0, #24]
   25b8a:	4b02      	ldr	r3, [pc, #8]	; (25b94 <ble_ll_sched_run+0x48>)
   25b8c:	605a      	str	r2, [r3, #4]
   25b8e:	e7e5      	b.n	25b5c <ble_ll_sched_run+0x10>
   25b90:	4770      	bx	lr
   25b92:	bf00      	nop
   25b94:	10004934 	.word	0x10004934
   25b98:	1000493c 	.word	0x1000493c
   25b9c:	10004940 	.word	0x10004940

00025ba0 <ble_ll_sched_conn_reschedule>:
{
   25ba0:	b570      	push	{r4, r5, r6, lr}
   25ba2:	4604      	mov	r4, r0
    sch = &connsm->conn_sch;
   25ba4:	f100 06d8 	add.w	r6, r0, #216	; 0xd8
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks;
   25ba8:	6f03      	ldr	r3, [r0, #112]	; 0x70
   25baa:	4a30      	ldr	r2, [pc, #192]	; (25c6c <ble_ll_sched_conn_reschedule+0xcc>)
   25bac:	7812      	ldrb	r2, [r2, #0]
   25bae:	1a9b      	subs	r3, r3, r2
   25bb0:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
    switch (connsm->conn_role) {
   25bb4:	79c3      	ldrb	r3, [r0, #7]
   25bb6:	2b01      	cmp	r3, #1
   25bb8:	d015      	beq.n	25be6 <ble_ll_sched_conn_reschedule+0x46>
   25bba:	2b02      	cmp	r3, #2
   25bbc:	d143      	bne.n	25c46 <ble_ll_sched_conn_reschedule+0xa6>
        usecs = connsm->periph_cur_window_widening;
   25bbe:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    if (usecs <= 31249) {
   25bc2:	f647 2311 	movw	r3, #31249	; 0x7a11
   25bc6:	4298      	cmp	r0, r3
   25bc8:	d83a      	bhi.n	25c40 <ble_ll_sched_conn_reschedule+0xa0>
        return (usecs * 137439) / 4194304;
   25bca:	4b29      	ldr	r3, [pc, #164]	; (25c70 <ble_ll_sched_conn_reschedule+0xd0>)
   25bcc:	fb03 f000 	mul.w	r0, r3, r0
   25bd0:	0d80      	lsrs	r0, r0, #22
        sch->start_time -= (ble_ll_tmr_u2t(usecs) + 1);
   25bd2:	3001      	adds	r0, #1
   25bd4:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
   25bd8:	1a18      	subs	r0, r3, r0
   25bda:	f8c4 00dc 	str.w	r0, [r4, #220]	; 0xdc
        sch->remainder = 0;
   25bde:	2300      	movs	r3, #0
   25be0:	f884 30da 	strb.w	r3, [r4, #218]	; 0xda
        break;
   25be4:	e003      	b.n	25bee <ble_ll_sched_conn_reschedule+0x4e>
        sch->remainder = connsm->anchor_point_usecs;
   25be6:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   25bea:	f880 30da 	strb.w	r3, [r0, #218]	; 0xda
    sch->end_time = connsm->ce_end_time;
   25bee:	6da3      	ldr	r3, [r4, #88]	; 0x58
   25bf0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    if (LL_TMR_LT(sch->start_time, ble_ll_tmr_get())) {
   25bf4:	f8d4 40dc 	ldr.w	r4, [r4, #220]	; 0xdc
    return os_cputime_get32();
   25bf8:	f00e f981 	bl	33efe <os_cputime_get32>
   25bfc:	1a24      	subs	r4, r4, r0
   25bfe:	2c00      	cmp	r4, #0
   25c00:	db31      	blt.n	25c66 <ble_ll_sched_conn_reschedule+0xc6>
    OS_ENTER_CRITICAL(sr);
   25c02:	f7f4 fe51 	bl	1a8a8 <os_arch_save_sr>
   25c06:	4605      	mov	r5, r0
    if (ble_ll_sched_overlaps_current(sch)) {
   25c08:	4630      	mov	r0, r6
   25c0a:	f7ff fe7f 	bl	2590c <ble_ll_sched_overlaps_current>
   25c0e:	bb20      	cbnz	r0, 25c5a <ble_ll_sched_conn_reschedule+0xba>
    rc = ble_ll_sched_insert(sch, 0, preempt_any_except_conn);
   25c10:	4a18      	ldr	r2, [pc, #96]	; (25c74 <ble_ll_sched_conn_reschedule+0xd4>)
   25c12:	2100      	movs	r1, #0
   25c14:	4630      	mov	r0, r6
   25c16:	f7ff febb 	bl	25990 <ble_ll_sched_insert>
   25c1a:	4604      	mov	r4, r0
    OS_EXIT_CRITICAL(sr);
   25c1c:	4628      	mov	r0, r5
   25c1e:	f7f4 fe49 	bl	1a8b4 <os_arch_restore_sr>
    if (!g_ble_ll_sched_q_head_changed) {
   25c22:	4b15      	ldr	r3, [pc, #84]	; (25c78 <ble_ll_sched_conn_reschedule+0xd8>)
   25c24:	781b      	ldrb	r3, [r3, #0]
   25c26:	b14b      	cbz	r3, 25c3c <ble_ll_sched_conn_reschedule+0x9c>
    g_ble_ll_sched_q_head_changed = 0;
   25c28:	4b13      	ldr	r3, [pc, #76]	; (25c78 <ble_ll_sched_conn_reschedule+0xd8>)
   25c2a:	2200      	movs	r2, #0
   25c2c:	701a      	strb	r2, [r3, #0]
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   25c2e:	4b13      	ldr	r3, [pc, #76]	; (25c7c <ble_ll_sched_conn_reschedule+0xdc>)
   25c30:	681b      	ldr	r3, [r3, #0]
    if (first) {
   25c32:	b11b      	cbz	r3, 25c3c <ble_ll_sched_conn_reschedule+0x9c>
    os_cputime_timer_start(&tmr->t, tgt);
   25c34:	6859      	ldr	r1, [r3, #4]
   25c36:	4812      	ldr	r0, [pc, #72]	; (25c80 <ble_ll_sched_conn_reschedule+0xe0>)
   25c38:	f00e f959 	bl	33eee <os_cputime_timer_start>
}
   25c3c:	4620      	mov	r0, r4
   25c3e:	bd70      	pop	{r4, r5, r6, pc}
    return os_cputime_usecs_to_ticks(usecs);
   25c40:	f00e f962 	bl	33f08 <os_cputime_usecs_to_ticks>
   25c44:	e7c5      	b.n	25bd2 <ble_ll_sched_conn_reschedule+0x32>
        BLE_LL_ASSERT(0);
   25c46:	f7ee fd55 	bl	146f4 <hal_debugger_connected>
   25c4a:	b100      	cbz	r0, 25c4e <ble_ll_sched_conn_reschedule+0xae>
   25c4c:	be01      	bkpt	0x0001
   25c4e:	2300      	movs	r3, #0
   25c50:	461a      	mov	r2, r3
   25c52:	4619      	mov	r1, r3
   25c54:	4618      	mov	r0, r3
   25c56:	f7f3 f86b 	bl	18d30 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   25c5a:	4628      	mov	r0, r5
   25c5c:	f7f4 fe2a 	bl	1a8b4 <os_arch_restore_sr>
        return -1;
   25c60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   25c64:	e7ea      	b.n	25c3c <ble_ll_sched_conn_reschedule+0x9c>
        return -1;
   25c66:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   25c6a:	e7e7      	b.n	25c3c <ble_ll_sched_conn_reschedule+0x9c>
   25c6c:	10004930 	.word	0x10004930
   25c70:	000218df 	.word	0x000218df
   25c74:	000258dd 	.word	0x000258dd
   25c78:	1000493c 	.word	0x1000493c
   25c7c:	10004934 	.word	0x10004934
   25c80:	10004940 	.word	0x10004940

00025c84 <ble_ll_sched_conn_periph_new>:
{
   25c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25c86:	4604      	mov	r4, r0
    sch = &connsm->conn_sch;
   25c88:	f100 06d8 	add.w	r6, r0, #216	; 0xd8
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks -
   25c8c:	6f05      	ldr	r5, [r0, #112]	; 0x70
   25c8e:	4b1a      	ldr	r3, [pc, #104]	; (25cf8 <ble_ll_sched_conn_periph_new+0x74>)
   25c90:	781b      	ldrb	r3, [r3, #0]
   25c92:	1aed      	subs	r5, r5, r3
                      ble_ll_tmr_u2t(connsm->periph_cur_window_widening) - 1;
   25c94:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    if (usecs <= 31249) {
   25c98:	f647 2311 	movw	r3, #31249	; 0x7a11
   25c9c:	4298      	cmp	r0, r3
   25c9e:	d827      	bhi.n	25cf0 <ble_ll_sched_conn_periph_new+0x6c>
        return (usecs * 137439) / 4194304;
   25ca0:	4b16      	ldr	r3, [pc, #88]	; (25cfc <ble_ll_sched_conn_periph_new+0x78>)
   25ca2:	fb03 f000 	mul.w	r0, r3, r0
   25ca6:	0d80      	lsrs	r0, r0, #22
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks -
   25ca8:	1a2d      	subs	r5, r5, r0
                      ble_ll_tmr_u2t(connsm->periph_cur_window_widening) - 1;
   25caa:	3d01      	subs	r5, #1
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks -
   25cac:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
    sch->end_time = connsm->ce_end_time;
   25cb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
   25cb2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    sch->remainder = 0;
   25cb6:	2700      	movs	r7, #0
   25cb8:	f884 70da 	strb.w	r7, [r4, #218]	; 0xda
    OS_ENTER_CRITICAL(sr);
   25cbc:	f7f4 fdf4 	bl	1a8a8 <os_arch_save_sr>
   25cc0:	4605      	mov	r5, r0
    rc = ble_ll_sched_insert(sch, 0, preempt_any);
   25cc2:	4a0f      	ldr	r2, [pc, #60]	; (25d00 <ble_ll_sched_conn_periph_new+0x7c>)
   25cc4:	4639      	mov	r1, r7
   25cc6:	4630      	mov	r0, r6
   25cc8:	f7ff fe62 	bl	25990 <ble_ll_sched_insert>
   25ccc:	4604      	mov	r4, r0
    OS_EXIT_CRITICAL(sr);
   25cce:	4628      	mov	r0, r5
   25cd0:	f7f4 fdf0 	bl	1a8b4 <os_arch_restore_sr>
    if (!g_ble_ll_sched_q_head_changed) {
   25cd4:	4b0b      	ldr	r3, [pc, #44]	; (25d04 <ble_ll_sched_conn_periph_new+0x80>)
   25cd6:	781b      	ldrb	r3, [r3, #0]
   25cd8:	b143      	cbz	r3, 25cec <ble_ll_sched_conn_periph_new+0x68>
    g_ble_ll_sched_q_head_changed = 0;
   25cda:	4b0a      	ldr	r3, [pc, #40]	; (25d04 <ble_ll_sched_conn_periph_new+0x80>)
   25cdc:	701f      	strb	r7, [r3, #0]
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   25cde:	4b0a      	ldr	r3, [pc, #40]	; (25d08 <ble_ll_sched_conn_periph_new+0x84>)
   25ce0:	681b      	ldr	r3, [r3, #0]
    if (first) {
   25ce2:	b11b      	cbz	r3, 25cec <ble_ll_sched_conn_periph_new+0x68>
    os_cputime_timer_start(&tmr->t, tgt);
   25ce4:	6859      	ldr	r1, [r3, #4]
   25ce6:	4809      	ldr	r0, [pc, #36]	; (25d0c <ble_ll_sched_conn_periph_new+0x88>)
   25ce8:	f00e f901 	bl	33eee <os_cputime_timer_start>
}
   25cec:	4620      	mov	r0, r4
   25cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return os_cputime_usecs_to_ticks(usecs);
   25cf0:	f00e f90a 	bl	33f08 <os_cputime_usecs_to_ticks>
   25cf4:	e7d8      	b.n	25ca8 <ble_ll_sched_conn_periph_new+0x24>
   25cf6:	bf00      	nop
   25cf8:	10004930 	.word	0x10004930
   25cfc:	000218df 	.word	0x000218df
   25d00:	000258d5 	.word	0x000258d5
   25d04:	1000493c 	.word	0x1000493c
   25d08:	10004934 	.word	0x10004934
   25d0c:	10004940 	.word	0x10004940

00025d10 <ble_ll_sched_adv_new>:
{
   25d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25d14:	4604      	mov	r4, r0
   25d16:	460e      	mov	r6, r1
   25d18:	4617      	mov	r7, r2
    OS_ENTER_CRITICAL(sr);
   25d1a:	f7f4 fdc5 	bl	1a8a8 <os_arch_save_sr>
   25d1e:	4605      	mov	r5, r0
    rc = ble_ll_sched_insert(sch, BLE_LL_SCHED_MAX_DELAY_ANY,
   25d20:	4a14      	ldr	r2, [pc, #80]	; (25d74 <ble_ll_sched_adv_new+0x64>)
   25d22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   25d26:	4620      	mov	r0, r4
   25d28:	f7ff fe32 	bl	25990 <ble_ll_sched_insert>
    BLE_LL_ASSERT(rc == 0);
   25d2c:	b9b8      	cbnz	r0, 25d5e <ble_ll_sched_adv_new+0x4e>
   25d2e:	4680      	mov	r8, r0
    cb(sch->cb_arg, sch->start_time, arg);
   25d30:	463a      	mov	r2, r7
   25d32:	6861      	ldr	r1, [r4, #4]
   25d34:	68e0      	ldr	r0, [r4, #12]
   25d36:	47b0      	blx	r6
    OS_EXIT_CRITICAL(sr);
   25d38:	4628      	mov	r0, r5
   25d3a:	f7f4 fdbb 	bl	1a8b4 <os_arch_restore_sr>
    if (!g_ble_ll_sched_q_head_changed) {
   25d3e:	4b0e      	ldr	r3, [pc, #56]	; (25d78 <ble_ll_sched_adv_new+0x68>)
   25d40:	781b      	ldrb	r3, [r3, #0]
   25d42:	b14b      	cbz	r3, 25d58 <ble_ll_sched_adv_new+0x48>
    g_ble_ll_sched_q_head_changed = 0;
   25d44:	4b0c      	ldr	r3, [pc, #48]	; (25d78 <ble_ll_sched_adv_new+0x68>)
   25d46:	2200      	movs	r2, #0
   25d48:	701a      	strb	r2, [r3, #0]
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   25d4a:	4b0c      	ldr	r3, [pc, #48]	; (25d7c <ble_ll_sched_adv_new+0x6c>)
   25d4c:	681b      	ldr	r3, [r3, #0]
    if (first) {
   25d4e:	b11b      	cbz	r3, 25d58 <ble_ll_sched_adv_new+0x48>
    os_cputime_timer_start(&tmr->t, tgt);
   25d50:	6859      	ldr	r1, [r3, #4]
   25d52:	480b      	ldr	r0, [pc, #44]	; (25d80 <ble_ll_sched_adv_new+0x70>)
   25d54:	f00e f8cb 	bl	33eee <os_cputime_timer_start>
}
   25d58:	4640      	mov	r0, r8
   25d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    BLE_LL_ASSERT(rc == 0);
   25d5e:	f7ee fcc9 	bl	146f4 <hal_debugger_connected>
   25d62:	b100      	cbz	r0, 25d66 <ble_ll_sched_adv_new+0x56>
   25d64:	be01      	bkpt	0x0001
   25d66:	2300      	movs	r3, #0
   25d68:	461a      	mov	r2, r3
   25d6a:	4619      	mov	r1, r3
   25d6c:	4618      	mov	r0, r3
   25d6e:	f7f2 ffdf 	bl	18d30 <__assert_func>
   25d72:	bf00      	nop
   25d74:	000258d9 	.word	0x000258d9
   25d78:	1000493c 	.word	0x1000493c
   25d7c:	10004934 	.word	0x10004934
   25d80:	10004940 	.word	0x10004940

00025d84 <ble_ll_sched_adv_reschedule>:
{
   25d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25d88:	4605      	mov	r5, r0
   25d8a:	460c      	mov	r4, r1
    max_end_time = sch->end_time + max_delay_ticks;
   25d8c:	6883      	ldr	r3, [r0, #8]
   25d8e:	eb03 0801 	add.w	r8, r3, r1
    OS_ENTER_CRITICAL(sr);
   25d92:	f7f4 fd89 	bl	1a8a8 <os_arch_save_sr>
   25d96:	4606      	mov	r6, r0
    rc = ble_ll_sched_insert(sch, max_delay_ticks, preempt_none);
   25d98:	4a18      	ldr	r2, [pc, #96]	; (25dfc <ble_ll_sched_adv_reschedule+0x78>)
   25d9a:	4621      	mov	r1, r4
   25d9c:	4628      	mov	r0, r5
   25d9e:	f7ff fdf7 	bl	25990 <ble_ll_sched_insert>
    if (rc == 0) {
   25da2:	4607      	mov	r7, r0
   25da4:	b980      	cbnz	r0, 25dc8 <ble_ll_sched_adv_reschedule+0x44>
        next = TAILQ_NEXT(sch, link);
   25da6:	696b      	ldr	r3, [r5, #20]
        if (next) {
   25da8:	b13b      	cbz	r3, 25dba <ble_ll_sched_adv_reschedule+0x36>
            if (LL_TMR_LT(next->start_time, max_end_time)) {
   25daa:	685c      	ldr	r4, [r3, #4]
   25dac:	eba4 0308 	sub.w	r3, r4, r8
   25db0:	2b00      	cmp	r3, #0
   25db2:	db00      	blt.n	25db6 <ble_ll_sched_adv_reschedule+0x32>
    max_end_time = sch->end_time + max_delay_ticks;
   25db4:	4644      	mov	r4, r8
            rand_ticks = max_end_time - sch->end_time;
   25db6:	68a9      	ldr	r1, [r5, #8]
   25db8:	1a64      	subs	r4, r4, r1
        if (rand_ticks) {
   25dba:	b9c4      	cbnz	r4, 25dee <ble_ll_sched_adv_reschedule+0x6a>
        sch->start_time += rand_ticks;
   25dbc:	686b      	ldr	r3, [r5, #4]
   25dbe:	4423      	add	r3, r4
   25dc0:	606b      	str	r3, [r5, #4]
        sch->end_time += rand_ticks;
   25dc2:	68a9      	ldr	r1, [r5, #8]
   25dc4:	4421      	add	r1, r4
   25dc6:	60a9      	str	r1, [r5, #8]
    OS_EXIT_CRITICAL(sr);
   25dc8:	4630      	mov	r0, r6
   25dca:	f7f4 fd73 	bl	1a8b4 <os_arch_restore_sr>
    if (!g_ble_ll_sched_q_head_changed) {
   25dce:	4b0c      	ldr	r3, [pc, #48]	; (25e00 <ble_ll_sched_adv_reschedule+0x7c>)
   25dd0:	781b      	ldrb	r3, [r3, #0]
   25dd2:	b14b      	cbz	r3, 25de8 <ble_ll_sched_adv_reschedule+0x64>
    g_ble_ll_sched_q_head_changed = 0;
   25dd4:	4b0a      	ldr	r3, [pc, #40]	; (25e00 <ble_ll_sched_adv_reschedule+0x7c>)
   25dd6:	2200      	movs	r2, #0
   25dd8:	701a      	strb	r2, [r3, #0]
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   25dda:	4b0a      	ldr	r3, [pc, #40]	; (25e04 <ble_ll_sched_adv_reschedule+0x80>)
   25ddc:	681b      	ldr	r3, [r3, #0]
    if (first) {
   25dde:	b11b      	cbz	r3, 25de8 <ble_ll_sched_adv_reschedule+0x64>
   25de0:	6859      	ldr	r1, [r3, #4]
   25de2:	4809      	ldr	r0, [pc, #36]	; (25e08 <ble_ll_sched_adv_reschedule+0x84>)
   25de4:	f00e f883 	bl	33eee <os_cputime_timer_start>
}
   25de8:	4638      	mov	r0, r7
   25dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rand_ticks = ble_ll_rand() % rand_ticks;
   25dee:	f7fe fb69 	bl	244c4 <ble_ll_rand>
   25df2:	fbb0 f3f4 	udiv	r3, r0, r4
   25df6:	fb04 0413 	mls	r4, r4, r3, r0
   25dfa:	e7df      	b.n	25dbc <ble_ll_sched_adv_reschedule+0x38>
   25dfc:	000258d9 	.word	0x000258d9
   25e00:	1000493c 	.word	0x1000493c
   25e04:	10004934 	.word	0x10004934
   25e08:	10004940 	.word	0x10004940

00025e0c <ble_ll_sched_adv_resched_pdu>:
{
   25e0c:	b538      	push	{r3, r4, r5, lr}
   25e0e:	4605      	mov	r5, r0
    OS_ENTER_CRITICAL(sr);
   25e10:	f7f4 fd4a 	bl	1a8a8 <os_arch_save_sr>
   25e14:	4604      	mov	r4, r0
    lls = ble_ll_state_get();
   25e16:	f7f8 ffe3 	bl	1ede0 <ble_ll_state_get>
    switch(lls) {
   25e1a:	2801      	cmp	r0, #1
   25e1c:	d018      	beq.n	25e50 <ble_ll_sched_adv_resched_pdu+0x44>
   25e1e:	2804      	cmp	r0, #4
   25e20:	d01d      	beq.n	25e5e <ble_ll_sched_adv_resched_pdu+0x52>
    rc = ble_ll_sched_insert(sch, 0, preempt_none);
   25e22:	4a12      	ldr	r2, [pc, #72]	; (25e6c <ble_ll_sched_adv_resched_pdu+0x60>)
   25e24:	2100      	movs	r1, #0
   25e26:	4628      	mov	r0, r5
   25e28:	f7ff fdb2 	bl	25990 <ble_ll_sched_insert>
   25e2c:	4605      	mov	r5, r0
    OS_EXIT_CRITICAL(sr);
   25e2e:	4620      	mov	r0, r4
   25e30:	f7f4 fd40 	bl	1a8b4 <os_arch_restore_sr>
    if (!g_ble_ll_sched_q_head_changed) {
   25e34:	4b0e      	ldr	r3, [pc, #56]	; (25e70 <ble_ll_sched_adv_resched_pdu+0x64>)
   25e36:	781b      	ldrb	r3, [r3, #0]
   25e38:	b17b      	cbz	r3, 25e5a <ble_ll_sched_adv_resched_pdu+0x4e>
    g_ble_ll_sched_q_head_changed = 0;
   25e3a:	4b0d      	ldr	r3, [pc, #52]	; (25e70 <ble_ll_sched_adv_resched_pdu+0x64>)
   25e3c:	2200      	movs	r2, #0
   25e3e:	701a      	strb	r2, [r3, #0]
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   25e40:	4b0c      	ldr	r3, [pc, #48]	; (25e74 <ble_ll_sched_adv_resched_pdu+0x68>)
   25e42:	681b      	ldr	r3, [r3, #0]
    if (first) {
   25e44:	b14b      	cbz	r3, 25e5a <ble_ll_sched_adv_resched_pdu+0x4e>
   25e46:	6859      	ldr	r1, [r3, #4]
   25e48:	480b      	ldr	r0, [pc, #44]	; (25e78 <ble_ll_sched_adv_resched_pdu+0x6c>)
   25e4a:	f00e f850 	bl	33eee <os_cputime_timer_start>
}
   25e4e:	e004      	b.n	25e5a <ble_ll_sched_adv_resched_pdu+0x4e>
        OS_EXIT_CRITICAL(sr);
   25e50:	4620      	mov	r0, r4
   25e52:	f7f4 fd2f 	bl	1a8b4 <os_arch_restore_sr>
        return -1;
   25e56:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
   25e5a:	4628      	mov	r0, r5
   25e5c:	bd38      	pop	{r3, r4, r5, pc}
        OS_EXIT_CRITICAL(sr);
   25e5e:	4620      	mov	r0, r4
   25e60:	f7f4 fd28 	bl	1a8b4 <os_arch_restore_sr>
        return -1;
   25e64:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   25e68:	e7f7      	b.n	25e5a <ble_ll_sched_adv_resched_pdu+0x4e>
   25e6a:	bf00      	nop
   25e6c:	000258d9 	.word	0x000258d9
   25e70:	1000493c 	.word	0x1000493c
   25e74:	10004934 	.word	0x10004934
   25e78:	10004940 	.word	0x10004940

00025e7c <ble_ll_sched_rmv_elem>:
{
   25e7c:	b538      	push	{r3, r4, r5, lr}
    BLE_LL_ASSERT(sch);
   25e7e:	b1c8      	cbz	r0, 25eb4 <ble_ll_sched_rmv_elem+0x38>
   25e80:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   25e82:	f7f4 fd11 	bl	1a8a8 <os_arch_save_sr>
   25e86:	4605      	mov	r5, r0
    if (sch->enqueued) {
   25e88:	7863      	ldrb	r3, [r4, #1]
   25e8a:	b35b      	cbz	r3, 25ee4 <ble_ll_sched_rmv_elem+0x68>
        if (sch == TAILQ_FIRST(&g_ble_ll_sched_q)) {
   25e8c:	4b20      	ldr	r3, [pc, #128]	; (25f10 <ble_ll_sched_rmv_elem+0x94>)
   25e8e:	681b      	ldr	r3, [r3, #0]
   25e90:	42a3      	cmp	r3, r4
   25e92:	d019      	beq.n	25ec8 <ble_ll_sched_rmv_elem+0x4c>
    first_removed = 0;
   25e94:	2100      	movs	r1, #0
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   25e96:	6963      	ldr	r3, [r4, #20]
   25e98:	b1c3      	cbz	r3, 25ecc <ble_ll_sched_rmv_elem+0x50>
   25e9a:	69a2      	ldr	r2, [r4, #24]
   25e9c:	619a      	str	r2, [r3, #24]
   25e9e:	69a3      	ldr	r3, [r4, #24]
   25ea0:	6962      	ldr	r2, [r4, #20]
   25ea2:	601a      	str	r2, [r3, #0]
        sch->enqueued = 0;
   25ea4:	2300      	movs	r3, #0
   25ea6:	7063      	strb	r3, [r4, #1]
    if (first_removed) {
   25ea8:	b379      	cbz	r1, 25f0a <ble_ll_sched_rmv_elem+0x8e>
    if (g_ble_ll_sched_q_head_changed) {
   25eaa:	4b1a      	ldr	r3, [pc, #104]	; (25f14 <ble_ll_sched_rmv_elem+0x98>)
   25eac:	781b      	ldrb	r3, [r3, #0]
   25eae:	b18b      	cbz	r3, 25ed4 <ble_ll_sched_rmv_elem+0x58>
        rc = 0;
   25eb0:	2400      	movs	r4, #0
   25eb2:	e018      	b.n	25ee6 <ble_ll_sched_rmv_elem+0x6a>
    BLE_LL_ASSERT(sch);
   25eb4:	f7ee fc1e 	bl	146f4 <hal_debugger_connected>
   25eb8:	b100      	cbz	r0, 25ebc <ble_ll_sched_rmv_elem+0x40>
   25eba:	be01      	bkpt	0x0001
   25ebc:	2300      	movs	r3, #0
   25ebe:	461a      	mov	r2, r3
   25ec0:	4619      	mov	r1, r3
   25ec2:	4618      	mov	r0, r3
   25ec4:	f7f2 ff34 	bl	18d30 <__assert_func>
            first_removed = 1;
   25ec8:	2101      	movs	r1, #1
   25eca:	e7e4      	b.n	25e96 <ble_ll_sched_rmv_elem+0x1a>
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   25ecc:	69a2      	ldr	r2, [r4, #24]
   25ece:	4b10      	ldr	r3, [pc, #64]	; (25f10 <ble_ll_sched_rmv_elem+0x94>)
   25ed0:	605a      	str	r2, [r3, #4]
   25ed2:	e7e4      	b.n	25e9e <ble_ll_sched_rmv_elem+0x22>
    g_ble_ll_sched_q_head_changed = 1;
   25ed4:	4b0f      	ldr	r3, [pc, #60]	; (25f14 <ble_ll_sched_rmv_elem+0x98>)
   25ed6:	2201      	movs	r2, #1
   25ed8:	701a      	strb	r2, [r3, #0]
    os_cputime_timer_stop(&tmr->t);
   25eda:	480f      	ldr	r0, [pc, #60]	; (25f18 <ble_ll_sched_rmv_elem+0x9c>)
   25edc:	f00e f80b 	bl	33ef6 <os_cputime_timer_stop>
        rc = 0;
   25ee0:	2400      	movs	r4, #0
}
   25ee2:	e000      	b.n	25ee6 <ble_ll_sched_rmv_elem+0x6a>
        rc = 1;
   25ee4:	2401      	movs	r4, #1
    OS_EXIT_CRITICAL(sr);
   25ee6:	4628      	mov	r0, r5
   25ee8:	f7f4 fce4 	bl	1a8b4 <os_arch_restore_sr>
    if (!g_ble_ll_sched_q_head_changed) {
   25eec:	4b09      	ldr	r3, [pc, #36]	; (25f14 <ble_ll_sched_rmv_elem+0x98>)
   25eee:	781b      	ldrb	r3, [r3, #0]
   25ef0:	b14b      	cbz	r3, 25f06 <ble_ll_sched_rmv_elem+0x8a>
    g_ble_ll_sched_q_head_changed = 0;
   25ef2:	4b08      	ldr	r3, [pc, #32]	; (25f14 <ble_ll_sched_rmv_elem+0x98>)
   25ef4:	2200      	movs	r2, #0
   25ef6:	701a      	strb	r2, [r3, #0]
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   25ef8:	4b05      	ldr	r3, [pc, #20]	; (25f10 <ble_ll_sched_rmv_elem+0x94>)
   25efa:	681b      	ldr	r3, [r3, #0]
    if (first) {
   25efc:	b11b      	cbz	r3, 25f06 <ble_ll_sched_rmv_elem+0x8a>
    os_cputime_timer_start(&tmr->t, tgt);
   25efe:	6859      	ldr	r1, [r3, #4]
   25f00:	4805      	ldr	r0, [pc, #20]	; (25f18 <ble_ll_sched_rmv_elem+0x9c>)
   25f02:	f00d fff4 	bl	33eee <os_cputime_timer_start>
}
   25f06:	4620      	mov	r0, r4
   25f08:	bd38      	pop	{r3, r4, r5, pc}
        rc = 0;
   25f0a:	2400      	movs	r4, #0
   25f0c:	e7eb      	b.n	25ee6 <ble_ll_sched_rmv_elem+0x6a>
   25f0e:	bf00      	nop
   25f10:	10004934 	.word	0x10004934
   25f14:	1000493c 	.word	0x1000493c
   25f18:	10004940 	.word	0x10004940

00025f1c <ble_ll_sched_next_time>:
 *
 * @return int 0: No events are scheduled 1: there is an upcoming event
 */
int
ble_ll_sched_next_time(uint32_t *next_event_time)
{
   25f1c:	b510      	push	{r4, lr}
   25f1e:	4604      	mov	r4, r0
    int rc;
    os_sr_t sr;
    struct ble_ll_sched_item *first;

    rc = 0;
    OS_ENTER_CRITICAL(sr);
   25f20:	f7f4 fcc2 	bl	1a8a8 <os_arch_save_sr>
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   25f24:	4b05      	ldr	r3, [pc, #20]	; (25f3c <ble_ll_sched_next_time+0x20>)
   25f26:	681b      	ldr	r3, [r3, #0]
    if (first) {
   25f28:	b133      	cbz	r3, 25f38 <ble_ll_sched_next_time+0x1c>
        *next_event_time = first->start_time;
   25f2a:	685b      	ldr	r3, [r3, #4]
   25f2c:	6023      	str	r3, [r4, #0]
        rc = 1;
   25f2e:	2401      	movs	r4, #1
    }
    OS_EXIT_CRITICAL(sr);
   25f30:	f7f4 fcc0 	bl	1a8b4 <os_arch_restore_sr>

    return rc;
}
   25f34:	4620      	mov	r0, r4
   25f36:	bd10      	pop	{r4, pc}
    rc = 0;
   25f38:	2400      	movs	r4, #0
   25f3a:	e7f9      	b.n	25f30 <ble_ll_sched_next_time+0x14>
   25f3c:	10004934 	.word	0x10004934

00025f40 <ble_ll_sched_stop>:
 *
 * Context: Link Layer task
 */
void
ble_ll_sched_stop(void)
{
   25f40:	b508      	push	{r3, lr}
    os_cputime_timer_stop(&tmr->t);
   25f42:	4802      	ldr	r0, [pc, #8]	; (25f4c <ble_ll_sched_stop+0xc>)
   25f44:	f00d ffd7 	bl	33ef6 <os_cputime_timer_stop>
    ble_ll_tmr_stop(&g_ble_ll_sched_timer);
}
   25f48:	bd08      	pop	{r3, pc}
   25f4a:	bf00      	nop
   25f4c:	10004940 	.word	0x10004940

00025f50 <ble_ll_sched_init>:
 *
 * @return int
 */
int
ble_ll_sched_init(void)
{
   25f50:	b508      	push	{r3, lr}

    /*
     * This is the offset from the start of the scheduled item until the actual
     * tx/rx should occur, in ticks. We also "round up" to the nearest tick.
     */
    g_ble_ll_sched_offset_ticks = ble_ll_tmr_u2t_up(XCVR_TX_SCHED_DELAY_USECS);
   25f52:	4b06      	ldr	r3, [pc, #24]	; (25f6c <ble_ll_sched_init+0x1c>)
   25f54:	2208      	movs	r2, #8
   25f56:	701a      	strb	r2, [r3, #0]
    os_cputime_timer_init(&tmr->t, cb, arg);
   25f58:	2200      	movs	r2, #0
   25f5a:	4905      	ldr	r1, [pc, #20]	; (25f70 <ble_ll_sched_init+0x20>)
   25f5c:	4805      	ldr	r0, [pc, #20]	; (25f74 <ble_ll_sched_init+0x24>)
   25f5e:	f00d ffa7 	bl	33eb0 <os_cputime_timer_init>
        ble_ll_tmr_u2t(MYNEWT_VAL(BLE_LL_USECS_PER_PERIOD));
    g_ble_ll_sched_data.sch_ticks_per_epoch = BLE_LL_SCHED_PERIODS *
        g_ble_ll_sched_data.sch_ticks_per_period;
#endif

    g_ble_ll_sched_q_head_changed = 0;
   25f62:	2000      	movs	r0, #0
   25f64:	4b04      	ldr	r3, [pc, #16]	; (25f78 <ble_ll_sched_init+0x28>)
   25f66:	7018      	strb	r0, [r3, #0]

    return 0;
}
   25f68:	bd08      	pop	{r3, pc}
   25f6a:	bf00      	nop
   25f6c:	10004930 	.word	0x10004930
   25f70:	00025b4d 	.word	0x00025b4d
   25f74:	10004940 	.word	0x10004940
   25f78:	1000493c 	.word	0x1000493c

00025f7c <ble_ll_utils_calc_access_addr>:
    500, 250, 150, 100, 75, 50, 30, 20
};

uint32_t
ble_ll_utils_calc_access_addr(void)
{
   25f7c:	b570      	push	{r4, r5, r6, lr}

    /* Calculate a random access address */
    aa = 0;
    while (1) {
        /* Get two, 16-bit random numbers */
        aa_low = ble_ll_rand() & 0xFFFF;
   25f7e:	f7fe faa1 	bl	244c4 <ble_ll_rand>
   25f82:	b285      	uxth	r5, r0
        aa_high = ble_ll_rand() & 0xFFFF;
   25f84:	f7fe fa9e 	bl	244c4 <ble_ll_rand>
   25f88:	b283      	uxth	r3, r0

        /* All four bytes cannot be equal */
        if (aa_low == aa_high) {
   25f8a:	429d      	cmp	r5, r3
   25f8c:	d0f7      	beq.n	25f7e <ble_ll_utils_calc_access_addr+0x2>
   25f8e:	4604      	mov	r4, r0
            continue;
        }

        /* Upper 6 bits must have 2 transitions */
        tmp = (int16_t)aa_high >> 10;
   25f90:	f340 2385 	sbfx	r3, r0, #10, #6
        if (__builtin_popcount(tmp ^ (tmp >> 1)) < 2) {
   25f94:	f340 20c4 	sbfx	r0, r0, #11, #5
   25f98:	4058      	eors	r0, r3
   25f9a:	f7ee f9c7 	bl	1432c <__popcountsi2>
   25f9e:	2801      	cmp	r0, #1
   25fa0:	dded      	ble.n	25f7e <ble_ll_utils_calc_access_addr+0x2>
            continue;
        }

        /* Cannot be access address or be 1 bit different */
        aa = aa_high;
        aa = (aa << 16) | aa_low;
   25fa2:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
        bits_diff = 0;
        temp = aa ^ BLE_ACCESS_ADDR_ADV;
   25fa6:	4921      	ldr	r1, [pc, #132]	; (2602c <ble_ll_utils_calc_access_addr+0xb0>)
   25fa8:	4041      	eors	r1, r0
        bits_diff = 0;
   25faa:	2200      	movs	r2, #0
        for (mask = 0x00000001; mask != 0; mask <<= 1) {
   25fac:	2301      	movs	r3, #1
   25fae:	e000      	b.n	25fb2 <ble_ll_utils_calc_access_addr+0x36>
   25fb0:	005b      	lsls	r3, r3, #1
   25fb2:	b12b      	cbz	r3, 25fc0 <ble_ll_utils_calc_access_addr+0x44>
            if (mask & temp) {
   25fb4:	420b      	tst	r3, r1
   25fb6:	d0fb      	beq.n	25fb0 <ble_ll_utils_calc_access_addr+0x34>
                ++bits_diff;
   25fb8:	3201      	adds	r2, #1
   25fba:	b2d2      	uxtb	r2, r2
                if (bits_diff > 1) {
   25fbc:	2a01      	cmp	r2, #1
   25fbe:	d9f7      	bls.n	25fb0 <ble_ll_utils_calc_access_addr+0x34>
                    break;
                }
            }
        }
        if (bits_diff <= 1) {
   25fc0:	2a01      	cmp	r2, #1
   25fc2:	d9dc      	bls.n	25f7e <ble_ll_utils_calc_access_addr+0x2>
        }

        /* Cannot have more than 24 transitions */
        transitions = 0;
        consecutive = 1;
        ones = 0;
   25fc4:	2400      	movs	r4, #0
        transitions = 0;
   25fc6:	4625      	mov	r5, r4
        consecutive = 1;
   25fc8:	2201      	movs	r2, #1
        mask = 0x00000001;
   25fca:	4613      	mov	r3, r2
   25fcc:	e00c      	b.n	25fe8 <ble_ll_utils_calc_access_addr+0x6c>
            if (mask & aa) {
                if (prev_bit == 0) {
                    ++transitions;
                    consecutive = 1;
                } else {
                    ++consecutive;
   25fce:	3201      	adds	r2, #1
   25fd0:	b2d2      	uxtb	r2, r2
                    ++transitions;
                    consecutive = 1;
                }
            }

            if (prev_bit) {
   25fd2:	b109      	cbz	r1, 25fd8 <ble_ll_utils_calc_access_addr+0x5c>
                ones++;
   25fd4:	3401      	adds	r4, #1
   25fd6:	b2e4      	uxtb	r4, r4
            }

            /* 8 lsb should have at least three 1 */
            if (mask == 0x00000100 && ones < 3) {
   25fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   25fdc:	d019      	beq.n	26012 <ble_ll_utils_calc_access_addr+0x96>
                break;
            }

            /* 16 lsb should have no more than 11 transitions */
            if (mask == 0x00010000 && transitions > 11) {
   25fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   25fe2:	d019      	beq.n	26018 <ble_ll_utils_calc_access_addr+0x9c>
                break;
            }

            /* This is invalid! */
            if (consecutive > 6) {
   25fe4:	2a06      	cmp	r2, #6
   25fe6:	d81a      	bhi.n	2601e <ble_ll_utils_calc_access_addr+0xa2>
        while (mask < 0x80000000) {
   25fe8:	2b00      	cmp	r3, #0
   25fea:	db19      	blt.n	26020 <ble_ll_utils_calc_access_addr+0xa4>
            prev_bit = aa & mask;
   25fec:	ea03 0100 	and.w	r1, r3, r0
            mask <<= 1;
   25ff0:	005b      	lsls	r3, r3, #1
            if (mask & aa) {
   25ff2:	4218      	tst	r0, r3
   25ff4:	d005      	beq.n	26002 <ble_ll_utils_calc_access_addr+0x86>
                if (prev_bit == 0) {
   25ff6:	2900      	cmp	r1, #0
   25ff8:	d1e9      	bne.n	25fce <ble_ll_utils_calc_access_addr+0x52>
                    ++transitions;
   25ffa:	3501      	adds	r5, #1
   25ffc:	b2ed      	uxtb	r5, r5
                    consecutive = 1;
   25ffe:	2201      	movs	r2, #1
   26000:	e7e7      	b.n	25fd2 <ble_ll_utils_calc_access_addr+0x56>
                if (prev_bit == 0) {
   26002:	b911      	cbnz	r1, 2600a <ble_ll_utils_calc_access_addr+0x8e>
                    ++consecutive;
   26004:	3201      	adds	r2, #1
   26006:	b2d2      	uxtb	r2, r2
   26008:	e7e3      	b.n	25fd2 <ble_ll_utils_calc_access_addr+0x56>
                    ++transitions;
   2600a:	3501      	adds	r5, #1
   2600c:	b2ed      	uxtb	r5, r5
                    consecutive = 1;
   2600e:	2201      	movs	r2, #1
   26010:	e7df      	b.n	25fd2 <ble_ll_utils_calc_access_addr+0x56>
            if (mask == 0x00000100 && ones < 3) {
   26012:	2c02      	cmp	r4, #2
   26014:	d8e3      	bhi.n	25fde <ble_ll_utils_calc_access_addr+0x62>
   26016:	e003      	b.n	26020 <ble_ll_utils_calc_access_addr+0xa4>
            if (mask == 0x00010000 && transitions > 11) {
   26018:	2d0b      	cmp	r5, #11
   2601a:	d9e3      	bls.n	25fe4 <ble_ll_utils_calc_access_addr+0x68>
   2601c:	e000      	b.n	26020 <ble_ll_utils_calc_access_addr+0xa4>
                /* Make sure we always detect invalid sequence below */
                mask = 0;
   2601e:	2300      	movs	r3, #0
                break;
            }
        }

        /* Invalid sequence found */
        if (mask != 0x80000000) {
   26020:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   26024:	d1ab      	bne.n	25f7e <ble_ll_utils_calc_access_addr+0x2>
            continue;
        }

        /* Cannot be more than 24 transitions */
        if (transitions > 24) {
   26026:	2d18      	cmp	r5, #24
   26028:	d8a9      	bhi.n	25f7e <ble_ll_utils_calc_access_addr+0x2>

        /* We have a valid access address */
        break;
    }
    return aa;
}
   2602a:	bd70      	pop	{r4, r5, r6, pc}
   2602c:	8e89bed6 	.word	0x8e89bed6

00026030 <ble_ll_utils_remapped_channel>:

uint8_t
ble_ll_utils_remapped_channel(uint8_t remap_index, const uint8_t *chanmap)
{
   26030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     * we just calculate
     * Iterate through channel map to find this channel
     */
    chan = 0;
    cntr = 0;
    for (i = 0; i < BLE_LL_CHMAP_LEN; i++) {
   26032:	2400      	movs	r4, #0
    chan = 0;
   26034:	4626      	mov	r6, r4
    cntr = 0;
   26036:	4625      	mov	r5, r4
    for (i = 0; i < BLE_LL_CHMAP_LEN; i++) {
   26038:	e011      	b.n	2605e <ble_ll_utils_remapped_channel+0x2e>
        if (usable_chans != 0) {
            mask = 0x01;
            for (j = 0; j < 8; j++) {
                if (usable_chans & mask) {
                    if (cntr == remap_index) {
                        return (chan + j);
   2603a:	4432      	add	r2, r6
   2603c:	b2d0      	uxtb	r0, r2
    }

    /* we should never reach here */
    BLE_LL_ASSERT(0);
    return 0;
}
   2603e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                mask <<= 1;
   26040:	005b      	lsls	r3, r3, #1
   26042:	b2db      	uxtb	r3, r3
            for (j = 0; j < 8; j++) {
   26044:	3201      	adds	r2, #1
   26046:	2a07      	cmp	r2, #7
   26048:	dc06      	bgt.n	26058 <ble_ll_utils_remapped_channel+0x28>
                if (usable_chans & mask) {
   2604a:	423b      	tst	r3, r7
   2604c:	d0f8      	beq.n	26040 <ble_ll_utils_remapped_channel+0x10>
                    if (cntr == remap_index) {
   2604e:	4285      	cmp	r5, r0
   26050:	d0f3      	beq.n	2603a <ble_ll_utils_remapped_channel+0xa>
                    ++cntr;
   26052:	3501      	adds	r5, #1
   26054:	b2ed      	uxtb	r5, r5
   26056:	e7f3      	b.n	26040 <ble_ll_utils_remapped_channel+0x10>
        chan += 8;
   26058:	3608      	adds	r6, #8
   2605a:	b2f6      	uxtb	r6, r6
    for (i = 0; i < BLE_LL_CHMAP_LEN; i++) {
   2605c:	3401      	adds	r4, #1
   2605e:	2c04      	cmp	r4, #4
   26060:	dc05      	bgt.n	2606e <ble_ll_utils_remapped_channel+0x3e>
        usable_chans = chanmap[i];
   26062:	5d0f      	ldrb	r7, [r1, r4]
        if (usable_chans != 0) {
   26064:	2f00      	cmp	r7, #0
   26066:	d0f7      	beq.n	26058 <ble_ll_utils_remapped_channel+0x28>
            for (j = 0; j < 8; j++) {
   26068:	2200      	movs	r2, #0
            mask = 0x01;
   2606a:	2301      	movs	r3, #1
   2606c:	e7eb      	b.n	26046 <ble_ll_utils_remapped_channel+0x16>
    BLE_LL_ASSERT(0);
   2606e:	f7ee fb41 	bl	146f4 <hal_debugger_connected>
   26072:	b100      	cbz	r0, 26076 <ble_ll_utils_remapped_channel+0x46>
   26074:	be01      	bkpt	0x0001
   26076:	2300      	movs	r3, #0
   26078:	461a      	mov	r2, r3
   2607a:	4619      	mov	r1, r3
   2607c:	4618      	mov	r0, r3
   2607e:	f7f2 fe57 	bl	18d30 <__assert_func>

00026082 <ble_ll_utils_calc_num_used_chans>:

uint8_t
ble_ll_utils_calc_num_used_chans(const uint8_t *chmap)
{
   26082:	b430      	push	{r4, r5}
   26084:	4605      	mov	r5, r0
    int j;
    uint8_t mask;
    uint8_t chanbyte;
    uint8_t used_channels;

    used_channels = 0;
   26086:	2000      	movs	r0, #0
    for (i = 0; i < BLE_LL_CHMAP_LEN; ++i) {
   26088:	4601      	mov	r1, r0
   2608a:	e00d      	b.n	260a8 <ble_ll_utils_calc_num_used_chans+0x26>
                mask = 0x01;
                for (j = 0; j < 8; ++j) {
                    if (chanbyte & mask) {
                        ++used_channels;
                    }
                    mask <<= 1;
   2608c:	005b      	lsls	r3, r3, #1
   2608e:	b2db      	uxtb	r3, r3
                for (j = 0; j < 8; ++j) {
   26090:	3201      	adds	r2, #1
   26092:	2a07      	cmp	r2, #7
   26094:	dc07      	bgt.n	260a6 <ble_ll_utils_calc_num_used_chans+0x24>
                    if (chanbyte & mask) {
   26096:	4223      	tst	r3, r4
   26098:	d0f8      	beq.n	2608c <ble_ll_utils_calc_num_used_chans+0xa>
                        ++used_channels;
   2609a:	3001      	adds	r0, #1
   2609c:	b2c0      	uxtb	r0, r0
   2609e:	e7f5      	b.n	2608c <ble_ll_utils_calc_num_used_chans+0xa>
                mask = 0x01;
   260a0:	2301      	movs	r3, #1
                for (j = 0; j < 8; ++j) {
   260a2:	2200      	movs	r2, #0
   260a4:	e7f5      	b.n	26092 <ble_ll_utils_calc_num_used_chans+0x10>
    for (i = 0; i < BLE_LL_CHMAP_LEN; ++i) {
   260a6:	3101      	adds	r1, #1
   260a8:	2904      	cmp	r1, #4
   260aa:	dc07      	bgt.n	260bc <ble_ll_utils_calc_num_used_chans+0x3a>
        chanbyte = chmap[i];
   260ac:	5c6c      	ldrb	r4, [r5, r1]
        if (chanbyte) {
   260ae:	2c00      	cmp	r4, #0
   260b0:	d0f9      	beq.n	260a6 <ble_ll_utils_calc_num_used_chans+0x24>
            if (chanbyte == 0xff) {
   260b2:	2cff      	cmp	r4, #255	; 0xff
   260b4:	d1f4      	bne.n	260a0 <ble_ll_utils_calc_num_used_chans+0x1e>
                used_channels += 8;
   260b6:	3008      	adds	r0, #8
   260b8:	b2c0      	uxtb	r0, r0
   260ba:	e7f4      	b.n	260a6 <ble_ll_utils_calc_num_used_chans+0x24>
                }
            }
        }
    }
    return used_channels;
}
   260bc:	bc30      	pop	{r4, r5}
   260be:	4770      	bx	lr

000260c0 <ble_ll_utils_calc_window_widening>:
    int32_t time_since_last_anchor;
    uint32_t delta_msec;

    window_widening = 0;

    time_since_last_anchor = (int32_t)(anchor_point - last_anchor_point);
   260c0:	1a40      	subs	r0, r0, r1
    if (time_since_last_anchor > 0) {
   260c2:	2800      	cmp	r0, #0
   260c4:	dc01      	bgt.n	260ca <ble_ll_utils_calc_window_widening+0xa>
    window_widening = 0;
   260c6:	2000      	movs	r0, #0
        total_sca_ppm = g_ble_sca_ppm_tbl[central_sca] + MYNEWT_VAL(BLE_LL_SCA);
        window_widening = (total_sca_ppm * delta_msec) / 1000;
    }

    return window_widening;
}
   260c8:	4770      	bx	lr
{
   260ca:	b510      	push	{r4, lr}
   260cc:	4614      	mov	r4, r2
    return os_cputime_ticks_to_usecs(ticks);
   260ce:	f00d ff23 	bl	33f18 <os_cputime_ticks_to_usecs>
        delta_msec = ble_ll_tmr_t2u(time_since_last_anchor) / 1000;
   260d2:	4a07      	ldr	r2, [pc, #28]	; (260f0 <ble_ll_utils_calc_window_widening+0x30>)
   260d4:	fba2 3000 	umull	r3, r0, r2, r0
   260d8:	0983      	lsrs	r3, r0, #6
        total_sca_ppm = g_ble_sca_ppm_tbl[central_sca] + MYNEWT_VAL(BLE_LL_SCA);
   260da:	4906      	ldr	r1, [pc, #24]	; (260f4 <ble_ll_utils_calc_window_widening+0x34>)
   260dc:	f831 0014 	ldrh.w	r0, [r1, r4, lsl #1]
   260e0:	303c      	adds	r0, #60	; 0x3c
        window_widening = (total_sca_ppm * delta_msec) / 1000;
   260e2:	fb00 f003 	mul.w	r0, r0, r3
   260e6:	fba2 3000 	umull	r3, r0, r2, r0
   260ea:	0980      	lsrs	r0, r0, #6
}
   260ec:	bd10      	pop	{r4, pc}
   260ee:	bf00      	nop
   260f0:	10624dd3 	.word	0x10624dd3
   260f4:	00038c50 	.word	0x00038c50

000260f8 <ble_ll_whitelist_search>:
        }
        ++wl;
    }

    return 0;
}
   260f8:	2000      	movs	r0, #0
   260fa:	4770      	bx	lr

000260fc <ble_ll_whitelist_chg_allowed>:
{
   260fc:	b508      	push	{r3, lr}
    if (ble_ll_adv_can_chg_whitelist()) {
   260fe:	f7f9 fe5f 	bl	1fdc0 <ble_ll_adv_can_chg_whitelist>
   26102:	b108      	cbz	r0, 26108 <ble_ll_whitelist_chg_allowed+0xc>
        return 1;
   26104:	2001      	movs	r0, #1
}
   26106:	bd08      	pop	{r3, pc}
    if (ble_ll_scan_can_chg_whitelist()) {
   26108:	f7ff fb2a 	bl	25760 <ble_ll_scan_can_chg_whitelist>
   2610c:	2800      	cmp	r0, #0
   2610e:	d0fa      	beq.n	26106 <ble_ll_whitelist_chg_allowed+0xa>
        return 1;
   26110:	2001      	movs	r0, #1
   26112:	e7f8      	b.n	26106 <ble_ll_whitelist_chg_allowed+0xa>

00026114 <ble_ll_whitelist_clear>:
{
   26114:	b508      	push	{r3, lr}
    if (!ble_ll_whitelist_chg_allowed()) {
   26116:	f7ff fff1 	bl	260fc <ble_ll_whitelist_chg_allowed>
   2611a:	b118      	cbz	r0, 26124 <ble_ll_whitelist_clear+0x10>
    ble_hw_whitelist_clear();
   2611c:	f000 f84e 	bl	261bc <ble_hw_whitelist_clear>
    return BLE_ERR_SUCCESS;
   26120:	2000      	movs	r0, #0
}
   26122:	bd08      	pop	{r3, pc}
        return BLE_ERR_CMD_DISALLOWED;
   26124:	200c      	movs	r0, #12
   26126:	e7fc      	b.n	26122 <ble_ll_whitelist_clear+0xe>

00026128 <ble_ll_whitelist_read_size>:
{
   26128:	4603      	mov	r3, r0
    rsp->size = BLE_LL_WHITELIST_SIZE;
   2612a:	2000      	movs	r0, #0
   2612c:	7018      	strb	r0, [r3, #0]
    *rsplen = sizeof(*rsp);
   2612e:	2301      	movs	r3, #1
   26130:	700b      	strb	r3, [r1, #0]
}
   26132:	4770      	bx	lr

00026134 <ble_ll_whitelist_add>:
    const struct ble_hci_le_add_whte_list_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_whitelist_entry *wl;
    int rc;
    int i;

    if (len != sizeof(*cmd)) {
   26134:	2907      	cmp	r1, #7
   26136:	d001      	beq.n	2613c <ble_ll_whitelist_add+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   26138:	2012      	movs	r0, #18
#endif
        }
    }

    return rc;
}
   2613a:	4770      	bx	lr
{
   2613c:	b510      	push	{r4, lr}
   2613e:	4604      	mov	r4, r0
    if (!ble_ll_whitelist_chg_allowed()) {
   26140:	f7ff ffdc 	bl	260fc <ble_ll_whitelist_chg_allowed>
   26144:	b138      	cbz	r0, 26156 <ble_ll_whitelist_add+0x22>
    if (!ble_ll_whitelist_search(cmd->addr, cmd->addr_type)) {
   26146:	4620      	mov	r0, r4
   26148:	f810 1b01 	ldrb.w	r1, [r0], #1
   2614c:	f7ff ffd4 	bl	260f8 <ble_ll_whitelist_search>
   26150:	b118      	cbz	r0, 2615a <ble_ll_whitelist_add+0x26>
    rc = BLE_ERR_SUCCESS;
   26152:	2000      	movs	r0, #0
}
   26154:	bd10      	pop	{r4, pc}
        return BLE_ERR_CMD_DISALLOWED;
   26156:	200c      	movs	r0, #12
   26158:	e7fc      	b.n	26154 <ble_ll_whitelist_add+0x20>
            rc = BLE_ERR_MEM_CAPACITY;
   2615a:	2007      	movs	r0, #7
   2615c:	e7fa      	b.n	26154 <ble_ll_whitelist_add+0x20>
	...

00026160 <ble_ll_whitelist_rmv>:
ble_ll_whitelist_rmv(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_rmv_white_list_cp *cmd = (const void *) cmdbuf;
    int position;

    if (len != sizeof(*cmd)) {
   26160:	2907      	cmp	r1, #7
   26162:	d001      	beq.n	26168 <ble_ll_whitelist_rmv+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   26164:	2012      	movs	r0, #18
#if (BLE_USES_HW_WHITELIST == 1)
    ble_hw_whitelist_rmv(cmd->addr, cmd->addr_type);
#endif

    return BLE_ERR_SUCCESS;
}
   26166:	4770      	bx	lr
{
   26168:	b538      	push	{r3, r4, r5, lr}
   2616a:	4604      	mov	r4, r0
    if (!ble_ll_whitelist_chg_allowed()) {
   2616c:	f7ff ffc6 	bl	260fc <ble_ll_whitelist_chg_allowed>
   26170:	b188      	cbz	r0, 26196 <ble_ll_whitelist_rmv+0x36>
    position = ble_ll_whitelist_search(cmd->addr, cmd->addr_type);
   26172:	f814 5b01 	ldrb.w	r5, [r4], #1
   26176:	4629      	mov	r1, r5
   26178:	4620      	mov	r0, r4
   2617a:	f7ff ffbd 	bl	260f8 <ble_ll_whitelist_search>
    if (position) {
   2617e:	b120      	cbz	r0, 2618a <ble_ll_whitelist_rmv+0x2a>
        g_ble_ll_whitelist[position - 1].wl_valid = 0;
   26180:	1e43      	subs	r3, r0, #1
   26182:	4a06      	ldr	r2, [pc, #24]	; (2619c <ble_ll_whitelist_rmv+0x3c>)
   26184:	2100      	movs	r1, #0
   26186:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    ble_hw_whitelist_rmv(cmd->addr, cmd->addr_type);
   2618a:	4629      	mov	r1, r5
   2618c:	4620      	mov	r0, r4
   2618e:	f000 f816 	bl	261be <ble_hw_whitelist_rmv>
    return BLE_ERR_SUCCESS;
   26192:	2000      	movs	r0, #0
}
   26194:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ERR_CMD_DISALLOWED;
   26196:	200c      	movs	r0, #12
   26198:	e7fc      	b.n	26194 <ble_ll_whitelist_rmv+0x34>
   2619a:	bf00      	nop
   2619c:	10004958 	.word	0x10004958

000261a0 <ble_ll_whitelist_enable>:
 *
 * Note: This function has no effect if we are not using HW whitelisting
 */
void
ble_ll_whitelist_enable(void)
{
   261a0:	b508      	push	{r3, lr}
#if (BLE_USES_HW_WHITELIST == 1)
    ble_hw_whitelist_enable();
   261a2:	f000 f80d 	bl	261c0 <ble_hw_whitelist_enable>
#endif
}
   261a6:	bd08      	pop	{r3, pc}

000261a8 <ble_ll_whitelist_disable>:
 *
 * Note: This function has no effect if we are not using HW whitelisting
 */
void
ble_ll_whitelist_disable(void)
{
   261a8:	b508      	push	{r3, lr}
#if (BLE_USES_HW_WHITELIST == 1)
    ble_hw_whitelist_disable();
   261aa:	f000 f80a 	bl	261c2 <ble_hw_whitelist_disable>
#endif
}
   261ae:	bd08      	pop	{r3, pc}

000261b0 <ble_hw_get_public_addr>:
/* Returns public device address or -1 if not present */
int
ble_hw_get_public_addr(ble_addr_t *addr)
{
    return -1;
}
   261b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   261b4:	4770      	bx	lr

000261b6 <ble_hw_get_static_addr>:
/* Returns random static address or -1 if not present */
int
ble_hw_get_static_addr(ble_addr_t *addr)
{
    return -1;
}
   261b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   261ba:	4770      	bx	lr

000261bc <ble_hw_whitelist_clear>:
 */
void
ble_hw_whitelist_clear(void)
{
    g_ble_hw_whitelist_mask = 0;
}
   261bc:	4770      	bx	lr

000261be <ble_hw_whitelist_rmv>:
 */
void
ble_hw_whitelist_rmv(const uint8_t *addr, uint8_t addr_type)
{
    return;
}
   261be:	4770      	bx	lr

000261c0 <ble_hw_whitelist_enable>:
 */
void
ble_hw_whitelist_enable(void)
{
    return;
}
   261c0:	4770      	bx	lr

000261c2 <ble_hw_whitelist_disable>:
 */
void
ble_hw_whitelist_disable(void)
{
    return;
}
   261c2:	4770      	bx	lr

000261c4 <ble_hw_encrypt_block>:
/* Encrypt data */
int
ble_hw_encrypt_block(struct ble_encryption_block *ecb)
{
    return -1;
}
   261c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   261c8:	4770      	bx	lr
	...

000261cc <ble_hw_rng_init>:
 * @return int
 */
int
ble_hw_rng_init(ble_rng_isr_cb_t cb, int bias)
{
    rng_cb = cb;
   261cc:	4b01      	ldr	r3, [pc, #4]	; (261d4 <ble_hw_rng_init+0x8>)
   261ce:	6018      	str	r0, [r3, #0]
    return 0;
}
   261d0:	2000      	movs	r0, #0
   261d2:	4770      	bx	lr
   261d4:	10004958 	.word	0x10004958

000261d8 <ble_hw_rng_start>:
 * @return int
 */
int
ble_hw_rng_start(void)
{
    rng_started = true;
   261d8:	4b0b      	ldr	r3, [pc, #44]	; (26208 <ble_hw_rng_start+0x30>)
   261da:	2201      	movs	r2, #1
   261dc:	701a      	strb	r2, [r3, #0]

    if (rng_cb) {
   261de:	4b0b      	ldr	r3, [pc, #44]	; (2620c <ble_hw_rng_start+0x34>)
   261e0:	681b      	ldr	r3, [r3, #0]
   261e2:	b17b      	cbz	r3, 26204 <ble_hw_rng_start+0x2c>
        while (rng_started) {
   261e4:	4b08      	ldr	r3, [pc, #32]	; (26208 <ble_hw_rng_start+0x30>)
   261e6:	781b      	ldrb	r3, [r3, #0]
   261e8:	b163      	cbz	r3, 26204 <ble_hw_rng_start+0x2c>
{
   261ea:	b510      	push	{r4, lr}
            rng_cb(rand());
   261ec:	4b07      	ldr	r3, [pc, #28]	; (2620c <ble_hw_rng_start+0x34>)
   261ee:	681c      	ldr	r4, [r3, #0]
   261f0:	f7f4 fd02 	bl	1abf8 <lrand48>
   261f4:	b2c0      	uxtb	r0, r0
   261f6:	47a0      	blx	r4
        while (rng_started) {
   261f8:	4b03      	ldr	r3, [pc, #12]	; (26208 <ble_hw_rng_start+0x30>)
   261fa:	781b      	ldrb	r3, [r3, #0]
   261fc:	2b00      	cmp	r3, #0
   261fe:	d1f5      	bne.n	261ec <ble_hw_rng_start+0x14>
        }
    }

    return 0;
}
   26200:	2000      	movs	r0, #0
   26202:	bd10      	pop	{r4, pc}
   26204:	2000      	movs	r0, #0
   26206:	4770      	bx	lr
   26208:	1000495c 	.word	0x1000495c
   2620c:	10004958 	.word	0x10004958

00026210 <ble_hw_rng_stop>:
 * @return int
 */
int
ble_hw_rng_stop(void)
{
    rng_started = false;
   26210:	2000      	movs	r0, #0
   26212:	4b01      	ldr	r3, [pc, #4]	; (26218 <ble_hw_rng_stop+0x8>)
   26214:	7018      	strb	r0, [r3, #0]
    return 0;
}
   26216:	4770      	bx	lr
   26218:	1000495c 	.word	0x1000495c

0002621c <ble_hw_resolv_list_clear>:
 * @return int
 */
void
ble_hw_resolv_list_clear(void)
{
}
   2621c:	4770      	bx	lr

0002621e <ble_hw_resolv_list_add>:
 */
int
ble_hw_resolv_list_add(uint8_t *irk)
{
    return BLE_ERR_MEM_CAPACITY;
}
   2621e:	2007      	movs	r0, #7
   26220:	4770      	bx	lr

00026222 <ble_hw_resolv_list_rmv>:
 * @param index Index of IRK to remove
 */
void
ble_hw_resolv_list_rmv(int index)
{
}
   26222:	4770      	bx	lr

00026224 <ble_hw_resolv_list_size>:
 */
uint8_t
ble_hw_resolv_list_size(void)
{
    return 0;
}
   26224:	2000      	movs	r0, #0
   26226:	4770      	bx	lr

00026228 <ble_phy_init>:
 */
int
ble_phy_init(void)
{
    /* Set phy channel to an invalid channel so first set channel works */
    g_ble_phy_data.phy_state = BLE_PHY_STATE_IDLE;
   26228:	4b03      	ldr	r3, [pc, #12]	; (26238 <ble_phy_init+0x10>)
   2622a:	2000      	movs	r0, #0
   2622c:	7158      	strb	r0, [r3, #5]
    g_ble_phy_data.phy_chan = BLE_PHY_NUM_CHANS;
   2622e:	2228      	movs	r2, #40	; 0x28
   26230:	711a      	strb	r2, [r3, #4]

    g_ble_phy_data.rx_pwr_compensation = 0;
   26232:	8058      	strh	r0, [r3, #2]

    /* XXX: emulate ISR? */

    return 0;
}
   26234:	4770      	bx	lr
   26236:	bf00      	nop
   26238:	10004960 	.word	0x10004960

0002623c <ble_phy_encrypt_enable>:
 */
void
ble_phy_encrypt_enable(uint64_t pkt_counter, uint8_t *iv, uint8_t *key,
                       uint8_t is_master)
{
}
   2623c:	4770      	bx	lr

0002623e <ble_phy_encrypt_set_pkt_cntr>:

void
ble_phy_encrypt_set_pkt_cntr(uint64_t pkt_counter, int dir)
{
}
   2623e:	4770      	bx	lr

00026240 <ble_phy_encrypt_disable>:

void
ble_phy_encrypt_disable(void)
{
}
   26240:	4770      	bx	lr
	...

00026244 <ble_phy_set_txend_cb>:

void
ble_phy_set_txend_cb(ble_phy_tx_end_func txend_cb, void *arg)
{
    /* Set transmit end callback and arg */
    g_ble_phy_data.txend_cb = txend_cb;
   26244:	4b01      	ldr	r3, [pc, #4]	; (2624c <ble_phy_set_txend_cb+0x8>)
   26246:	62d8      	str	r0, [r3, #44]	; 0x2c
    g_ble_phy_data.txend_arg = arg;
   26248:	6259      	str	r1, [r3, #36]	; 0x24
}
   2624a:	4770      	bx	lr
   2624c:	10004960 	.word	0x10004960

00026250 <ble_phy_tx_set_start_time>:
 */
int
ble_phy_tx_set_start_time(uint32_t cputime, uint8_t rem_usecs)
{
    return 0;
}
   26250:	2000      	movs	r0, #0
   26252:	4770      	bx	lr

00026254 <ble_phy_rx_set_start_time>:
 */
int
ble_phy_rx_set_start_time(uint32_t cputime, uint8_t rem_usecs)
{
    return 0;
}
   26254:	2000      	movs	r0, #0
   26256:	4770      	bx	lr

00026258 <ble_phy_txpwr_set>:
 *
 * @return int 0: success; anything else is an error
 */
int
ble_phy_txpwr_set(int dbm)
{
   26258:	b508      	push	{r3, lr}
    /* Check valid range */
    assert(dbm <= BLE_PHY_MAX_PWR_DBM);
   2625a:	280a      	cmp	r0, #10
   2625c:	dc07      	bgt.n	2626e <ble_phy_txpwr_set+0x16>

    /* "Rail" power level if outside supported range */
    if (dbm > BLE_XCVR_TX_PWR_MAX_DBM) {
   2625e:	281e      	cmp	r0, #30
   26260:	dc0f      	bgt.n	26282 <ble_phy_txpwr_set+0x2a>
        dbm = BLE_XCVR_TX_PWR_MAX_DBM;
    } else {
        if (dbm < BLE_XCVR_TX_PWR_MIN_DBM) {
   26262:	f110 0f14 	cmn.w	r0, #20
   26266:	da0d      	bge.n	26284 <ble_phy_txpwr_set+0x2c>
            dbm = BLE_XCVR_TX_PWR_MIN_DBM;
   26268:	f06f 0013 	mvn.w	r0, #19
   2626c:	e00a      	b.n	26284 <ble_phy_txpwr_set+0x2c>
    assert(dbm <= BLE_PHY_MAX_PWR_DBM);
   2626e:	f7ee fa41 	bl	146f4 <hal_debugger_connected>
   26272:	b100      	cbz	r0, 26276 <ble_phy_txpwr_set+0x1e>
   26274:	be01      	bkpt	0x0001
   26276:	2300      	movs	r3, #0
   26278:	461a      	mov	r2, r3
   2627a:	4619      	mov	r1, r3
   2627c:	4618      	mov	r0, r3
   2627e:	f7f2 fd57 	bl	18d30 <__assert_func>
        dbm = BLE_XCVR_TX_PWR_MAX_DBM;
   26282:	201e      	movs	r0, #30
        }
    }

    g_ble_phy_data.phy_txpwr_dbm = dbm;
   26284:	4b01      	ldr	r3, [pc, #4]	; (2628c <ble_phy_txpwr_set+0x34>)
   26286:	7058      	strb	r0, [r3, #1]

    return 0;
}
   26288:	2000      	movs	r0, #0
   2628a:	bd08      	pop	{r3, pc}
   2628c:	10004960 	.word	0x10004960

00026290 <ble_phy_txpower_round>:
 * @return int Rounded power in dBm
 */
int ble_phy_txpower_round(int dbm)
{
    /* "Rail" power level if outside supported range */
    if (dbm > BLE_XCVR_TX_PWR_MAX_DBM) {
   26290:	281e      	cmp	r0, #30
   26292:	dc03      	bgt.n	2629c <ble_phy_txpower_round+0xc>
        dbm = BLE_XCVR_TX_PWR_MAX_DBM;
    } else {
        if (dbm < BLE_XCVR_TX_PWR_MIN_DBM) {
   26294:	f110 0f14 	cmn.w	r0, #20
   26298:	db02      	blt.n	262a0 <ble_phy_txpower_round+0x10>
   2629a:	4770      	bx	lr
        dbm = BLE_XCVR_TX_PWR_MAX_DBM;
   2629c:	201e      	movs	r0, #30
   2629e:	4770      	bx	lr
            dbm = BLE_XCVR_TX_PWR_MIN_DBM;
   262a0:	f06f 0013 	mvn.w	r0, #19
        }
    }

    return dbm;
}
   262a4:	4770      	bx	lr
	...

000262a8 <ble_phy_set_rx_pwr_compensation>:
}

void
ble_phy_set_rx_pwr_compensation(int8_t compensation)
{
    g_ble_phy_data.rx_pwr_compensation = compensation;
   262a8:	4b01      	ldr	r3, [pc, #4]	; (262b0 <ble_phy_set_rx_pwr_compensation+0x8>)
   262aa:	8058      	strh	r0, [r3, #2]
}
   262ac:	4770      	bx	lr
   262ae:	bf00      	nop
   262b0:	10004960 	.word	0x10004960

000262b4 <ble_phy_setchan>:
 *
 * @return int 0: success; PHY error code otherwise
 */
int
ble_phy_setchan(uint8_t chan, uint32_t access_addr, uint32_t crcinit)
{
   262b4:	b508      	push	{r3, lr}
    assert(chan < BLE_PHY_NUM_CHANS);
   262b6:	2827      	cmp	r0, #39	; 0x27
   262b8:	d804      	bhi.n	262c4 <ble_phy_setchan+0x10>
    /* Check for valid channel range */
    if (chan >= BLE_PHY_NUM_CHANS) {
        return BLE_PHY_ERR_INV_PARAM;
    }

    g_ble_phy_data.phy_access_address = access_addr;
   262ba:	4b07      	ldr	r3, [pc, #28]	; (262d8 <ble_phy_setchan+0x24>)
   262bc:	6119      	str	r1, [r3, #16]

    g_ble_phy_data.phy_chan = chan;
   262be:	7118      	strb	r0, [r3, #4]

    return 0;
}
   262c0:	2000      	movs	r0, #0
   262c2:	bd08      	pop	{r3, pc}
    assert(chan < BLE_PHY_NUM_CHANS);
   262c4:	f7ee fa16 	bl	146f4 <hal_debugger_connected>
   262c8:	b100      	cbz	r0, 262cc <ble_phy_setchan+0x18>
   262ca:	be01      	bkpt	0x0001
   262cc:	2300      	movs	r3, #0
   262ce:	461a      	mov	r2, r3
   262d0:	4619      	mov	r1, r3
   262d2:	4618      	mov	r0, r3
   262d4:	f7f2 fd2c 	bl	18d30 <__assert_func>
   262d8:	10004960 	.word	0x10004960

000262dc <ble_phy_disable>:
 *  -> Sets phy state to idle.
 */
void
ble_phy_disable(void)
{
    g_ble_phy_data.phy_state = BLE_PHY_STATE_IDLE;
   262dc:	4b01      	ldr	r3, [pc, #4]	; (262e4 <ble_phy_disable+0x8>)
   262de:	2200      	movs	r2, #0
   262e0:	715a      	strb	r2, [r3, #5]
}
   262e2:	4770      	bx	lr
   262e4:	10004960 	.word	0x10004960

000262e8 <ble_phy_state_get>:
 */
int
ble_phy_state_get(void)
{
    return g_ble_phy_data.phy_state;
}
   262e8:	4b01      	ldr	r3, [pc, #4]	; (262f0 <ble_phy_state_get+0x8>)
   262ea:	7958      	ldrb	r0, [r3, #5]
   262ec:	4770      	bx	lr
   262ee:	bf00      	nop
   262f0:	10004960 	.word	0x10004960

000262f4 <ble_phy_tx>:
{
   262f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   262f6:	b083      	sub	sp, #12
   262f8:	4605      	mov	r5, r0
   262fa:	460e      	mov	r6, r1
   262fc:	4614      	mov	r4, r2
    if (ble_phy_state_get() != BLE_PHY_STATE_IDLE) {
   262fe:	f7ff fff3 	bl	262e8 <ble_phy_state_get>
   26302:	b9c0      	cbnz	r0, 26336 <ble_phy_tx+0x42>
   26304:	4607      	mov	r7, r0
    if (g_ble_phy_data.phy_chan < BLE_PHY_NUM_DATA_CHANS) {
   26306:	4b15      	ldr	r3, [pc, #84]	; (2635c <ble_phy_tx+0x68>)
   26308:	791b      	ldrb	r3, [r3, #4]
   2630a:	2b24      	cmp	r3, #36	; 0x24
   2630c:	d91b      	bls.n	26346 <ble_phy_tx+0x52>
    g_ble_phy_data.phy_transition = end_trans;
   2630e:	4b13      	ldr	r3, [pc, #76]	; (2635c <ble_phy_tx+0x68>)
   26310:	719c      	strb	r4, [r3, #6]
    g_ble_phy_data.phy_state = BLE_PHY_STATE_TX;
   26312:	2202      	movs	r2, #2
   26314:	715a      	strb	r2, [r3, #5]
    ++g_ble_phy_stats.tx_good;
   26316:	4c12      	ldr	r4, [pc, #72]	; (26360 <ble_phy_tx+0x6c>)
   26318:	6823      	ldr	r3, [r4, #0]
   2631a:	3301      	adds	r3, #1
   2631c:	6023      	str	r3, [r4, #0]
    g_ble_phy_stats.tx_bytes += pducb(g_ble_phy_tx_buf, pducb_arg, &hdr_byte) +
   2631e:	f10d 0207 	add.w	r2, sp, #7
   26322:	4631      	mov	r1, r6
   26324:	480f      	ldr	r0, [pc, #60]	; (26364 <ble_phy_tx+0x70>)
   26326:	47a8      	blx	r5
   26328:	3002      	adds	r0, #2
   2632a:	68e3      	ldr	r3, [r4, #12]
   2632c:	4403      	add	r3, r0
   2632e:	60e3      	str	r3, [r4, #12]
}
   26330:	4638      	mov	r0, r7
   26332:	b003      	add	sp, #12
   26334:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ble_phy_disable();
   26336:	f7ff ffd1 	bl	262dc <ble_phy_disable>
        ++g_ble_phy_stats.radio_state_errs;
   2633a:	4a09      	ldr	r2, [pc, #36]	; (26360 <ble_phy_tx+0x6c>)
   2633c:	6a53      	ldr	r3, [r2, #36]	; 0x24
   2633e:	3301      	adds	r3, #1
   26340:	6253      	str	r3, [r2, #36]	; 0x24
        return BLE_PHY_ERR_RADIO_STATE;
   26342:	2701      	movs	r7, #1
   26344:	e7f4      	b.n	26330 <ble_phy_tx+0x3c>
        assert(0);
   26346:	f7ee f9d5 	bl	146f4 <hal_debugger_connected>
   2634a:	b100      	cbz	r0, 2634e <ble_phy_tx+0x5a>
   2634c:	be01      	bkpt	0x0001
   2634e:	2300      	movs	r3, #0
   26350:	461a      	mov	r2, r3
   26352:	4619      	mov	r1, r3
   26354:	4618      	mov	r0, r3
   26356:	f7f2 fceb 	bl	18d30 <__assert_func>
   2635a:	bf00      	nop
   2635c:	10004960 	.word	0x10004960
   26360:	10004990 	.word	0x10004990
   26364:	100049bc 	.word	0x100049bc

00026368 <ble_phy_max_data_pdu_pyld>:
 */
uint8_t
ble_phy_max_data_pdu_pyld(void)
{
    return BLE_LL_DATA_PDU_MAX_PYLD;
}
   26368:	20fb      	movs	r0, #251	; 0xfb
   2636a:	4770      	bx	lr

0002636c <ble_phy_resolv_list_enable>:

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
void
ble_phy_resolv_list_enable(void)
{
    g_ble_phy_data.phy_privacy = 1;
   2636c:	4b01      	ldr	r3, [pc, #4]	; (26374 <ble_phy_resolv_list_enable+0x8>)
   2636e:	2201      	movs	r2, #1
   26370:	725a      	strb	r2, [r3, #9]
}
   26372:	4770      	bx	lr
   26374:	10004960 	.word	0x10004960

00026378 <ble_phy_resolv_list_disable>:

void
ble_phy_resolv_list_disable(void)
{
    g_ble_phy_data.phy_privacy = 0;
   26378:	4b01      	ldr	r3, [pc, #4]	; (26380 <ble_phy_resolv_list_disable+0x8>)
   2637a:	2200      	movs	r2, #0
   2637c:	725a      	strb	r2, [r3, #9]
}
   2637e:	4770      	bx	lr
   26380:	10004960 	.word	0x10004960

00026384 <ble_phy_wfr_enable>:
#endif

void
ble_phy_wfr_enable(int txrx, uint8_t tx_phy_mode, uint32_t wfr_usecs)
{
}
   26384:	4770      	bx	lr

00026386 <ble_phy_rfclk_enable>:

void
ble_phy_rfclk_enable(void)
{
}
   26386:	4770      	bx	lr

00026388 <ble_att_rx_dispatch_entry_find>:
    STATS_NAME(ble_att_stats, write_cmd_tx)
STATS_NAME_END(ble_att_stats)

static const struct ble_att_rx_dispatch_entry *
ble_att_rx_dispatch_entry_find(uint8_t op)
{
   26388:	4601      	mov	r1, r0
    const struct ble_att_rx_dispatch_entry *entry;
    int i;

    for (i = 0; i < BLE_ATT_RX_DISPATCH_SZ; i++) {
   2638a:	2300      	movs	r3, #0
   2638c:	2b1a      	cmp	r3, #26
   2638e:	d809      	bhi.n	263a4 <ble_att_rx_dispatch_entry_find+0x1c>
        entry = ble_att_rx_dispatch + i;
   26390:	4a06      	ldr	r2, [pc, #24]	; (263ac <ble_att_rx_dispatch_entry_find+0x24>)
   26392:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
        if (entry->bde_op == op) {
   26396:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   2639a:	428a      	cmp	r2, r1
   2639c:	d005      	beq.n	263aa <ble_att_rx_dispatch_entry_find+0x22>
            return entry;
        }

        if (entry->bde_op > op) {
   2639e:	d803      	bhi.n	263a8 <ble_att_rx_dispatch_entry_find+0x20>
    for (i = 0; i < BLE_ATT_RX_DISPATCH_SZ; i++) {
   263a0:	3301      	adds	r3, #1
   263a2:	e7f3      	b.n	2638c <ble_att_rx_dispatch_entry_find+0x4>
            break;
        }
    }

    return NULL;
   263a4:	2000      	movs	r0, #0
   263a6:	4770      	bx	lr
   263a8:	2000      	movs	r0, #0
}
   263aa:	4770      	bx	lr
   263ac:	00038c68 	.word	0x00038c68

000263b0 <ble_att_inc_rx_stat>:
}

static void
ble_att_inc_rx_stat(uint8_t att_op)
{
    switch (att_op) {
   263b0:	3801      	subs	r0, #1
   263b2:	2851      	cmp	r0, #81	; 0x51
   263b4:	f200 80f2 	bhi.w	2659c <ble_att_inc_rx_stat+0x1ec>
   263b8:	e8df f010 	tbh	[pc, r0, lsl #1]
   263bc:	00570052 	.word	0x00570052
   263c0:	0061005c 	.word	0x0061005c
   263c4:	006b0066 	.word	0x006b0066
   263c8:	00750070 	.word	0x00750070
   263cc:	007f007a 	.word	0x007f007a
   263d0:	00890084 	.word	0x00890084
   263d4:	0093008e 	.word	0x0093008e
   263d8:	009d0098 	.word	0x009d0098
   263dc:	00ab00a4 	.word	0x00ab00a4
   263e0:	00f000b2 	.word	0x00f000b2
   263e4:	00b900f0 	.word	0x00b900f0
   263e8:	00c700c0 	.word	0x00c700c0
   263ec:	00f000ce 	.word	0x00f000ce
   263f0:	00f000d5 	.word	0x00f000d5
   263f4:	00e300dc 	.word	0x00e300dc
   263f8:	00f000f0 	.word	0x00f000f0
   263fc:	00f000f0 	.word	0x00f000f0
   26400:	00f000f0 	.word	0x00f000f0
   26404:	00f000f0 	.word	0x00f000f0
   26408:	00f000f0 	.word	0x00f000f0
   2640c:	00f000f0 	.word	0x00f000f0
   26410:	00f000f0 	.word	0x00f000f0
   26414:	00f000f0 	.word	0x00f000f0
   26418:	00f000f0 	.word	0x00f000f0
   2641c:	00f000f0 	.word	0x00f000f0
   26420:	00f000f0 	.word	0x00f000f0
   26424:	00f000f0 	.word	0x00f000f0
   26428:	00f000f0 	.word	0x00f000f0
   2642c:	00f000f0 	.word	0x00f000f0
   26430:	00f000f0 	.word	0x00f000f0
   26434:	00f000f0 	.word	0x00f000f0
   26438:	00f000f0 	.word	0x00f000f0
   2643c:	00f000f0 	.word	0x00f000f0
   26440:	00f000f0 	.word	0x00f000f0
   26444:	00f000f0 	.word	0x00f000f0
   26448:	00f000f0 	.word	0x00f000f0
   2644c:	00f000f0 	.word	0x00f000f0
   26450:	00f000f0 	.word	0x00f000f0
   26454:	00f000f0 	.word	0x00f000f0
   26458:	00f000f0 	.word	0x00f000f0
   2645c:	00ea00f0 	.word	0x00ea00f0
    case BLE_ATT_OP_ERROR_RSP:
        STATS_INC(ble_att_stats, error_rsp_rx);
   26460:	4a4f      	ldr	r2, [pc, #316]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   26462:	68d3      	ldr	r3, [r2, #12]
   26464:	3301      	adds	r3, #1
   26466:	60d3      	str	r3, [r2, #12]
        break;
   26468:	4770      	bx	lr

    case BLE_ATT_OP_MTU_REQ:
        STATS_INC(ble_att_stats, mtu_req_rx);
   2646a:	4a4d      	ldr	r2, [pc, #308]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   2646c:	6953      	ldr	r3, [r2, #20]
   2646e:	3301      	adds	r3, #1
   26470:	6153      	str	r3, [r2, #20]
        break;
   26472:	4770      	bx	lr

    case BLE_ATT_OP_MTU_RSP:
        STATS_INC(ble_att_stats, mtu_rsp_rx);
   26474:	4a4a      	ldr	r2, [pc, #296]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   26476:	69d3      	ldr	r3, [r2, #28]
   26478:	3301      	adds	r3, #1
   2647a:	61d3      	str	r3, [r2, #28]
        break;
   2647c:	4770      	bx	lr

    case BLE_ATT_OP_FIND_INFO_REQ:
        STATS_INC(ble_att_stats, find_info_req_rx);
   2647e:	4a48      	ldr	r2, [pc, #288]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   26480:	6a53      	ldr	r3, [r2, #36]	; 0x24
   26482:	3301      	adds	r3, #1
   26484:	6253      	str	r3, [r2, #36]	; 0x24
        break;
   26486:	4770      	bx	lr

    case BLE_ATT_OP_FIND_INFO_RSP:
        STATS_INC(ble_att_stats, find_info_rsp_rx);
   26488:	4a45      	ldr	r2, [pc, #276]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   2648a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2648c:	3301      	adds	r3, #1
   2648e:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
   26490:	4770      	bx	lr

    case BLE_ATT_OP_FIND_TYPE_VALUE_REQ:
        STATS_INC(ble_att_stats, find_type_value_req_rx);
   26492:	4a43      	ldr	r2, [pc, #268]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   26494:	6b53      	ldr	r3, [r2, #52]	; 0x34
   26496:	3301      	adds	r3, #1
   26498:	6353      	str	r3, [r2, #52]	; 0x34
        break;
   2649a:	4770      	bx	lr

    case BLE_ATT_OP_FIND_TYPE_VALUE_RSP:
        STATS_INC(ble_att_stats, find_type_value_rsp_rx);
   2649c:	4a40      	ldr	r2, [pc, #256]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   2649e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   264a0:	3301      	adds	r3, #1
   264a2:	63d3      	str	r3, [r2, #60]	; 0x3c
        break;
   264a4:	4770      	bx	lr

    case BLE_ATT_OP_READ_TYPE_REQ:
        STATS_INC(ble_att_stats, read_type_req_rx);
   264a6:	4a3e      	ldr	r2, [pc, #248]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   264a8:	6c53      	ldr	r3, [r2, #68]	; 0x44
   264aa:	3301      	adds	r3, #1
   264ac:	6453      	str	r3, [r2, #68]	; 0x44
        break;
   264ae:	4770      	bx	lr

    case BLE_ATT_OP_READ_TYPE_RSP:
        STATS_INC(ble_att_stats, read_type_rsp_rx);
   264b0:	4a3b      	ldr	r2, [pc, #236]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   264b2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   264b4:	3301      	adds	r3, #1
   264b6:	64d3      	str	r3, [r2, #76]	; 0x4c
        break;
   264b8:	4770      	bx	lr

    case BLE_ATT_OP_READ_REQ:
        STATS_INC(ble_att_stats, read_req_rx);
   264ba:	4a39      	ldr	r2, [pc, #228]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   264bc:	6d53      	ldr	r3, [r2, #84]	; 0x54
   264be:	3301      	adds	r3, #1
   264c0:	6553      	str	r3, [r2, #84]	; 0x54
        break;
   264c2:	4770      	bx	lr

    case BLE_ATT_OP_READ_RSP:
        STATS_INC(ble_att_stats, read_rsp_rx);
   264c4:	4a36      	ldr	r2, [pc, #216]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   264c6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   264c8:	3301      	adds	r3, #1
   264ca:	65d3      	str	r3, [r2, #92]	; 0x5c
        break;
   264cc:	4770      	bx	lr

    case BLE_ATT_OP_READ_BLOB_REQ:
        STATS_INC(ble_att_stats, read_blob_req_rx);
   264ce:	4a34      	ldr	r2, [pc, #208]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   264d0:	6e53      	ldr	r3, [r2, #100]	; 0x64
   264d2:	3301      	adds	r3, #1
   264d4:	6653      	str	r3, [r2, #100]	; 0x64
        break;
   264d6:	4770      	bx	lr

    case BLE_ATT_OP_READ_BLOB_RSP:
        STATS_INC(ble_att_stats, read_blob_rsp_rx);
   264d8:	4a31      	ldr	r2, [pc, #196]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   264da:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   264dc:	3301      	adds	r3, #1
   264de:	66d3      	str	r3, [r2, #108]	; 0x6c
        break;
   264e0:	4770      	bx	lr

    case BLE_ATT_OP_READ_MULT_REQ:
        STATS_INC(ble_att_stats, read_mult_req_rx);
   264e2:	4a2f      	ldr	r2, [pc, #188]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   264e4:	6f53      	ldr	r3, [r2, #116]	; 0x74
   264e6:	3301      	adds	r3, #1
   264e8:	6753      	str	r3, [r2, #116]	; 0x74
        break;
   264ea:	4770      	bx	lr

    case BLE_ATT_OP_READ_MULT_RSP:
        STATS_INC(ble_att_stats, read_mult_rsp_rx);
   264ec:	4a2c      	ldr	r2, [pc, #176]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   264ee:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   264f0:	3301      	adds	r3, #1
   264f2:	67d3      	str	r3, [r2, #124]	; 0x7c
        break;
   264f4:	4770      	bx	lr

    case BLE_ATT_OP_READ_GROUP_TYPE_REQ:
        STATS_INC(ble_att_stats, read_group_type_req_rx);
   264f6:	4a2a      	ldr	r2, [pc, #168]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   264f8:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   264fc:	3301      	adds	r3, #1
   264fe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        break;
   26502:	4770      	bx	lr

    case BLE_ATT_OP_READ_GROUP_TYPE_RSP:
        STATS_INC(ble_att_stats, read_group_type_rsp_rx);
   26504:	4a26      	ldr	r2, [pc, #152]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   26506:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   2650a:	3301      	adds	r3, #1
   2650c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        break;
   26510:	4770      	bx	lr

    case BLE_ATT_OP_WRITE_REQ:
        STATS_INC(ble_att_stats, write_req_rx);
   26512:	4a23      	ldr	r2, [pc, #140]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   26514:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   26518:	3301      	adds	r3, #1
   2651a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        break;
   2651e:	4770      	bx	lr

    case BLE_ATT_OP_WRITE_RSP:
        STATS_INC(ble_att_stats, write_rsp_rx);
   26520:	4a1f      	ldr	r2, [pc, #124]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   26522:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   26526:	3301      	adds	r3, #1
   26528:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
        break;
   2652c:	4770      	bx	lr

    case BLE_ATT_OP_PREP_WRITE_REQ:
        STATS_INC(ble_att_stats, prep_write_req_rx);
   2652e:	4a1c      	ldr	r2, [pc, #112]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   26530:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
   26534:	3301      	adds	r3, #1
   26536:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
        break;
   2653a:	4770      	bx	lr

    case BLE_ATT_OP_PREP_WRITE_RSP:
        STATS_INC(ble_att_stats, prep_write_rsp_rx);
   2653c:	4a18      	ldr	r2, [pc, #96]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   2653e:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
   26542:	3301      	adds	r3, #1
   26544:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
        break;
   26548:	4770      	bx	lr

    case BLE_ATT_OP_EXEC_WRITE_REQ:
        STATS_INC(ble_att_stats, exec_write_req_rx);
   2654a:	4a15      	ldr	r2, [pc, #84]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   2654c:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
   26550:	3301      	adds	r3, #1
   26552:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
        break;
   26556:	4770      	bx	lr

    case BLE_ATT_OP_EXEC_WRITE_RSP:
        STATS_INC(ble_att_stats, exec_write_rsp_rx);
   26558:	4a11      	ldr	r2, [pc, #68]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   2655a:	f8d2 30bc 	ldr.w	r3, [r2, #188]	; 0xbc
   2655e:	3301      	adds	r3, #1
   26560:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
        break;
   26564:	4770      	bx	lr

    case BLE_ATT_OP_NOTIFY_REQ:
        STATS_INC(ble_att_stats, notify_req_rx);
   26566:	4a0e      	ldr	r2, [pc, #56]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   26568:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
   2656c:	3301      	adds	r3, #1
   2656e:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
        break;
   26572:	4770      	bx	lr

    case BLE_ATT_OP_INDICATE_REQ:
        STATS_INC(ble_att_stats, indicate_req_rx);
   26574:	4a0a      	ldr	r2, [pc, #40]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   26576:	f8d2 30cc 	ldr.w	r3, [r2, #204]	; 0xcc
   2657a:	3301      	adds	r3, #1
   2657c:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
        break;
   26580:	4770      	bx	lr

    case BLE_ATT_OP_INDICATE_RSP:
        STATS_INC(ble_att_stats, indicate_rsp_rx);
   26582:	4a07      	ldr	r2, [pc, #28]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   26584:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
   26588:	3301      	adds	r3, #1
   2658a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
        break;
   2658e:	4770      	bx	lr

    case BLE_ATT_OP_WRITE_CMD:
        STATS_INC(ble_att_stats, write_cmd_rx);
   26590:	4a03      	ldr	r2, [pc, #12]	; (265a0 <ble_att_inc_rx_stat+0x1f0>)
   26592:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   26596:	3301      	adds	r3, #1
   26598:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
        break;

    default:
        break;
    }
}
   2659c:	4770      	bx	lr
   2659e:	bf00      	nop
   265a0:	10004ac0 	.word	0x10004ac0

000265a4 <ble_att_rx_handle_unknown_request>:
static void
ble_att_rx_handle_unknown_request(uint8_t op, uint16_t conn_handle,
                                  struct os_mbuf **om)
{
    /* If this is command (bit6 is set to 1), do nothing */
    if (op & 0x40) {
   265a4:	f010 0f40 	tst.w	r0, #64	; 0x40
   265a8:	d000      	beq.n	265ac <ble_att_rx_handle_unknown_request+0x8>
   265aa:	4770      	bx	lr
{
   265ac:	b570      	push	{r4, r5, r6, lr}
   265ae:	b082      	sub	sp, #8
   265b0:	4604      	mov	r4, r0
   265b2:	460e      	mov	r6, r1
   265b4:	4615      	mov	r5, r2
        return;
    }

    os_mbuf_adj(*om, OS_MBUF_PKTLEN(*om));
   265b6:	6810      	ldr	r0, [r2, #0]
   265b8:	8a01      	ldrh	r1, [r0, #16]
   265ba:	f7f3 f8d6 	bl	1976a <os_mbuf_adj>
    ble_att_svr_tx_error_rsp(conn_handle, *om, op, 0,
   265be:	2306      	movs	r3, #6
   265c0:	9300      	str	r3, [sp, #0]
   265c2:	2300      	movs	r3, #0
   265c4:	4622      	mov	r2, r4
   265c6:	6829      	ldr	r1, [r5, #0]
   265c8:	4630      	mov	r0, r6
   265ca:	f001 fcfa 	bl	27fc2 <ble_att_svr_tx_error_rsp>
                             BLE_ATT_ERR_REQ_NOT_SUPPORTED);

    *om = NULL;
   265ce:	2300      	movs	r3, #0
   265d0:	602b      	str	r3, [r5, #0]
}
   265d2:	b002      	add	sp, #8
   265d4:	bd70      	pop	{r4, r5, r6, pc}

000265d6 <ble_att_rx>:

static int
ble_att_rx(struct ble_l2cap_chan *chan)
{
   265d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   265da:	b082      	sub	sp, #8
   265dc:	4604      	mov	r4, r0
    uint8_t op;
    uint16_t conn_handle;
    struct os_mbuf **om;
    int rc;

    conn_handle = ble_l2cap_get_conn_handle(chan);
   265de:	f00a f920 	bl	30822 <ble_l2cap_get_conn_handle>
    if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   265e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   265e6:	4298      	cmp	r0, r3
   265e8:	d033      	beq.n	26652 <ble_att_rx+0x7c>
   265ea:	4605      	mov	r5, r0
        return BLE_HS_ENOTCONN;
    }

    om = &chan->rx_buf;
   265ec:	f104 0710 	add.w	r7, r4, #16
    BLE_HS_DBG_ASSERT(*om != NULL);

    rc = os_mbuf_copydata(*om, 0, 1, &op);
   265f0:	f10d 0307 	add.w	r3, sp, #7
   265f4:	2201      	movs	r2, #1
   265f6:	2100      	movs	r1, #0
   265f8:	6920      	ldr	r0, [r4, #16]
   265fa:	f7f3 f889 	bl	19710 <os_mbuf_copydata>
    if (rc != 0) {
   265fe:	bb50      	cbnz	r0, 26656 <ble_att_rx+0x80>
        return BLE_HS_EMSGSIZE;
    }

    entry = ble_att_rx_dispatch_entry_find(op);
   26600:	f89d 6007 	ldrb.w	r6, [sp, #7]
   26604:	4630      	mov	r0, r6
   26606:	f7ff febf 	bl	26388 <ble_att_rx_dispatch_entry_find>
    if (entry == NULL) {
   2660a:	4680      	mov	r8, r0
   2660c:	b188      	cbz	r0, 26632 <ble_att_rx+0x5c>
        ble_att_rx_handle_unknown_request(op, conn_handle, om);
        return BLE_HS_ENOTSUP;
    }

    ble_att_inc_rx_stat(op);
   2660e:	4630      	mov	r0, r6
   26610:	f7ff fece 	bl	263b0 <ble_att_inc_rx_stat>

    /* Strip L2CAP ATT header from the front of the mbuf. */
    os_mbuf_adj(*om, 1);
   26614:	2101      	movs	r1, #1
   26616:	6920      	ldr	r0, [r4, #16]
   26618:	f7f3 f8a7 	bl	1976a <os_mbuf_adj>

    rc = entry->bde_fn(conn_handle, om);
   2661c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   26620:	4639      	mov	r1, r7
   26622:	4628      	mov	r0, r5
   26624:	4798      	blx	r3
    if (rc != 0) {
   26626:	4604      	mov	r4, r0
   26628:	b950      	cbnz	r0, 26640 <ble_att_rx+0x6a>
        }
        return rc;
    }

    return 0;
}
   2662a:	4620      	mov	r0, r4
   2662c:	b002      	add	sp, #8
   2662e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ble_att_rx_handle_unknown_request(op, conn_handle, om);
   26632:	463a      	mov	r2, r7
   26634:	4629      	mov	r1, r5
   26636:	4630      	mov	r0, r6
   26638:	f7ff ffb4 	bl	265a4 <ble_att_rx_handle_unknown_request>
        return BLE_HS_ENOTSUP;
   2663c:	2408      	movs	r4, #8
   2663e:	e7f4      	b.n	2662a <ble_att_rx+0x54>
        if (rc == BLE_HS_ENOTSUP) {
   26640:	2808      	cmp	r0, #8
   26642:	d1f2      	bne.n	2662a <ble_att_rx+0x54>
            ble_att_rx_handle_unknown_request(op, conn_handle, om);
   26644:	463a      	mov	r2, r7
   26646:	4629      	mov	r1, r5
   26648:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2664c:	f7ff ffaa 	bl	265a4 <ble_att_rx_handle_unknown_request>
        return rc;
   26650:	e7eb      	b.n	2662a <ble_att_rx+0x54>
        return BLE_HS_ENOTCONN;
   26652:	2407      	movs	r4, #7
   26654:	e7e9      	b.n	2662a <ble_att_rx+0x54>
        return BLE_HS_EMSGSIZE;
   26656:	2404      	movs	r4, #4
   26658:	e7e7      	b.n	2662a <ble_att_rx+0x54>

0002665a <ble_att_conn_chan_find>:
{
   2665a:	b508      	push	{r3, lr}
   2665c:	4613      	mov	r3, r2
    return ble_hs_misc_conn_chan_find(conn_handle, BLE_L2CAP_CID_ATT,
   2665e:	460a      	mov	r2, r1
   26660:	2104      	movs	r1, #4
   26662:	f009 fce7 	bl	30034 <ble_hs_misc_conn_chan_find>
}
   26666:	bd08      	pop	{r3, pc}

00026668 <ble_att_inc_tx_stat>:
    switch (att_op) {
   26668:	3801      	subs	r0, #1
   2666a:	2851      	cmp	r0, #81	; 0x51
   2666c:	f200 80f4 	bhi.w	26858 <ble_att_inc_tx_stat+0x1f0>
   26670:	e8df f010 	tbh	[pc, r0, lsl #1]
   26674:	00570052 	.word	0x00570052
   26678:	0061005c 	.word	0x0061005c
   2667c:	006b0066 	.word	0x006b0066
   26680:	00750070 	.word	0x00750070
   26684:	007f007a 	.word	0x007f007a
   26688:	00890084 	.word	0x00890084
   2668c:	0093008e 	.word	0x0093008e
   26690:	009f0098 	.word	0x009f0098
   26694:	00ad00a6 	.word	0x00ad00a6
   26698:	00f200b4 	.word	0x00f200b4
   2669c:	00bb00f2 	.word	0x00bb00f2
   266a0:	00c900c2 	.word	0x00c900c2
   266a4:	00f200d0 	.word	0x00f200d0
   266a8:	00f200d7 	.word	0x00f200d7
   266ac:	00e500de 	.word	0x00e500de
   266b0:	00f200f2 	.word	0x00f200f2
   266b4:	00f200f2 	.word	0x00f200f2
   266b8:	00f200f2 	.word	0x00f200f2
   266bc:	00f200f2 	.word	0x00f200f2
   266c0:	00f200f2 	.word	0x00f200f2
   266c4:	00f200f2 	.word	0x00f200f2
   266c8:	00f200f2 	.word	0x00f200f2
   266cc:	00f200f2 	.word	0x00f200f2
   266d0:	00f200f2 	.word	0x00f200f2
   266d4:	00f200f2 	.word	0x00f200f2
   266d8:	00f200f2 	.word	0x00f200f2
   266dc:	00f200f2 	.word	0x00f200f2
   266e0:	00f200f2 	.word	0x00f200f2
   266e4:	00f200f2 	.word	0x00f200f2
   266e8:	00f200f2 	.word	0x00f200f2
   266ec:	00f200f2 	.word	0x00f200f2
   266f0:	00f200f2 	.word	0x00f200f2
   266f4:	00f200f2 	.word	0x00f200f2
   266f8:	00f200f2 	.word	0x00f200f2
   266fc:	00f200f2 	.word	0x00f200f2
   26700:	00f200f2 	.word	0x00f200f2
   26704:	00f200f2 	.word	0x00f200f2
   26708:	00f200f2 	.word	0x00f200f2
   2670c:	00f200f2 	.word	0x00f200f2
   26710:	00f200f2 	.word	0x00f200f2
   26714:	00ec00f2 	.word	0x00ec00f2
        STATS_INC(ble_att_stats, error_rsp_tx);
   26718:	4a50      	ldr	r2, [pc, #320]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   2671a:	6913      	ldr	r3, [r2, #16]
   2671c:	3301      	adds	r3, #1
   2671e:	6113      	str	r3, [r2, #16]
        break;
   26720:	4770      	bx	lr
        STATS_INC(ble_att_stats, mtu_req_tx);
   26722:	4a4e      	ldr	r2, [pc, #312]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   26724:	6993      	ldr	r3, [r2, #24]
   26726:	3301      	adds	r3, #1
   26728:	6193      	str	r3, [r2, #24]
        break;
   2672a:	4770      	bx	lr
        STATS_INC(ble_att_stats, mtu_rsp_tx);
   2672c:	4a4b      	ldr	r2, [pc, #300]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   2672e:	6a13      	ldr	r3, [r2, #32]
   26730:	3301      	adds	r3, #1
   26732:	6213      	str	r3, [r2, #32]
        break;
   26734:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_info_req_tx);
   26736:	4a49      	ldr	r2, [pc, #292]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   26738:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2673a:	3301      	adds	r3, #1
   2673c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
   2673e:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_info_rsp_tx);
   26740:	4a46      	ldr	r2, [pc, #280]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   26742:	6b13      	ldr	r3, [r2, #48]	; 0x30
   26744:	3301      	adds	r3, #1
   26746:	6313      	str	r3, [r2, #48]	; 0x30
        break;
   26748:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_type_value_req_tx);
   2674a:	4a44      	ldr	r2, [pc, #272]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   2674c:	6b93      	ldr	r3, [r2, #56]	; 0x38
   2674e:	3301      	adds	r3, #1
   26750:	6393      	str	r3, [r2, #56]	; 0x38
        break;
   26752:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_type_value_rsp_tx);
   26754:	4a41      	ldr	r2, [pc, #260]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   26756:	6c13      	ldr	r3, [r2, #64]	; 0x40
   26758:	3301      	adds	r3, #1
   2675a:	6413      	str	r3, [r2, #64]	; 0x40
        break;
   2675c:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_type_req_tx);
   2675e:	4a3f      	ldr	r2, [pc, #252]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   26760:	6c93      	ldr	r3, [r2, #72]	; 0x48
   26762:	3301      	adds	r3, #1
   26764:	6493      	str	r3, [r2, #72]	; 0x48
        break;
   26766:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_type_rsp_tx);
   26768:	4a3c      	ldr	r2, [pc, #240]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   2676a:	6d13      	ldr	r3, [r2, #80]	; 0x50
   2676c:	3301      	adds	r3, #1
   2676e:	6513      	str	r3, [r2, #80]	; 0x50
        break;
   26770:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_req_tx);
   26772:	4a3a      	ldr	r2, [pc, #232]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   26774:	6d93      	ldr	r3, [r2, #88]	; 0x58
   26776:	3301      	adds	r3, #1
   26778:	6593      	str	r3, [r2, #88]	; 0x58
        break;
   2677a:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_rsp_tx);
   2677c:	4a37      	ldr	r2, [pc, #220]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   2677e:	6e13      	ldr	r3, [r2, #96]	; 0x60
   26780:	3301      	adds	r3, #1
   26782:	6613      	str	r3, [r2, #96]	; 0x60
        break;
   26784:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_blob_req_tx);
   26786:	4a35      	ldr	r2, [pc, #212]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   26788:	6e93      	ldr	r3, [r2, #104]	; 0x68
   2678a:	3301      	adds	r3, #1
   2678c:	6693      	str	r3, [r2, #104]	; 0x68
        break;
   2678e:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_blob_rsp_tx);
   26790:	4a32      	ldr	r2, [pc, #200]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   26792:	6f13      	ldr	r3, [r2, #112]	; 0x70
   26794:	3301      	adds	r3, #1
   26796:	6713      	str	r3, [r2, #112]	; 0x70
        break;
   26798:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_mult_req_tx);
   2679a:	4a30      	ldr	r2, [pc, #192]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   2679c:	6f93      	ldr	r3, [r2, #120]	; 0x78
   2679e:	3301      	adds	r3, #1
   267a0:	6793      	str	r3, [r2, #120]	; 0x78
        break;
   267a2:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_mult_rsp_tx);
   267a4:	4a2d      	ldr	r2, [pc, #180]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   267a6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   267aa:	3301      	adds	r3, #1
   267ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        break;
   267b0:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_group_type_req_tx);
   267b2:	4a2a      	ldr	r2, [pc, #168]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   267b4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   267b8:	3301      	adds	r3, #1
   267ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
   267be:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_group_type_rsp_tx);
   267c0:	4a26      	ldr	r2, [pc, #152]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   267c2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   267c6:	3301      	adds	r3, #1
   267c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        break;
   267cc:	4770      	bx	lr
        STATS_INC(ble_att_stats, write_req_tx);
   267ce:	4a23      	ldr	r2, [pc, #140]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   267d0:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   267d4:	3301      	adds	r3, #1
   267d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
        break;
   267da:	4770      	bx	lr
        STATS_INC(ble_att_stats, write_rsp_tx);
   267dc:	4a1f      	ldr	r2, [pc, #124]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   267de:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
   267e2:	3301      	adds	r3, #1
   267e4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        break;
   267e8:	4770      	bx	lr
        STATS_INC(ble_att_stats, prep_write_req_tx);
   267ea:	4a1c      	ldr	r2, [pc, #112]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   267ec:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
   267f0:	3301      	adds	r3, #1
   267f2:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
        break;
   267f6:	4770      	bx	lr
        STATS_INC(ble_att_stats, prep_write_rsp_tx);
   267f8:	4a18      	ldr	r2, [pc, #96]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   267fa:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
   267fe:	3301      	adds	r3, #1
   26800:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
        break;
   26804:	4770      	bx	lr
        STATS_INC(ble_att_stats, exec_write_req_tx);
   26806:	4a15      	ldr	r2, [pc, #84]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   26808:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   2680c:	3301      	adds	r3, #1
   2680e:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
        break;
   26812:	4770      	bx	lr
        STATS_INC(ble_att_stats, exec_write_rsp_tx);
   26814:	4a11      	ldr	r2, [pc, #68]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   26816:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
   2681a:	3301      	adds	r3, #1
   2681c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
        break;
   26820:	4770      	bx	lr
        STATS_INC(ble_att_stats, notify_req_tx);
   26822:	4a0e      	ldr	r2, [pc, #56]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   26824:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
   26828:	3301      	adds	r3, #1
   2682a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
        break;
   2682e:	4770      	bx	lr
        STATS_INC(ble_att_stats, indicate_req_tx);
   26830:	4a0a      	ldr	r2, [pc, #40]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   26832:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
   26836:	3301      	adds	r3, #1
   26838:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
        break;
   2683c:	4770      	bx	lr
        STATS_INC(ble_att_stats, indicate_rsp_tx);
   2683e:	4a07      	ldr	r2, [pc, #28]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   26840:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
   26844:	3301      	adds	r3, #1
   26846:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
        break;
   2684a:	4770      	bx	lr
        STATS_INC(ble_att_stats, write_cmd_tx);
   2684c:	4a03      	ldr	r2, [pc, #12]	; (2685c <ble_att_inc_tx_stat+0x1f4>)
   2684e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   26852:	3301      	adds	r3, #1
   26854:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   26858:	4770      	bx	lr
   2685a:	bf00      	nop
   2685c:	10004ac0 	.word	0x10004ac0

00026860 <ble_att_set_peer_mtu>:
    if (peer_mtu < BLE_ATT_MTU_DFLT) {
   26860:	2916      	cmp	r1, #22
   26862:	d800      	bhi.n	26866 <ble_att_set_peer_mtu+0x6>
        peer_mtu = BLE_ATT_MTU_DFLT;
   26864:	2117      	movs	r1, #23
    chan->peer_mtu = peer_mtu;
   26866:	8181      	strh	r1, [r0, #12]
}
   26868:	4770      	bx	lr

0002686a <ble_att_chan_mtu>:
{
   2686a:	b510      	push	{r4, lr}
   2686c:	4604      	mov	r4, r0
    if (!(ble_l2cap_is_mtu_req_sent(chan)) ||
   2686e:	f009 ffa7 	bl	307c0 <ble_l2cap_is_mtu_req_sent>
   26872:	b130      	cbz	r0, 26882 <ble_att_chan_mtu+0x18>
        chan->peer_mtu == 0) {
   26874:	89a0      	ldrh	r0, [r4, #12]
    if (!(ble_l2cap_is_mtu_req_sent(chan)) ||
   26876:	b130      	cbz	r0, 26886 <ble_att_chan_mtu+0x1c>
        mtu = min(chan->my_mtu, chan->peer_mtu);
   26878:	8963      	ldrh	r3, [r4, #10]
   2687a:	4298      	cmp	r0, r3
   2687c:	bf28      	it	cs
   2687e:	4618      	movcs	r0, r3
}
   26880:	bd10      	pop	{r4, pc}
        mtu = BLE_ATT_MTU_DFLT;
   26882:	2017      	movs	r0, #23
   26884:	e7fc      	b.n	26880 <ble_att_chan_mtu+0x16>
   26886:	2017      	movs	r0, #23
   26888:	e7fa      	b.n	26880 <ble_att_chan_mtu+0x16>

0002688a <ble_att_truncate_to_mtu>:
{
   2688a:	b510      	push	{r4, lr}
   2688c:	460c      	mov	r4, r1
    mtu = ble_att_chan_mtu(att_chan);
   2688e:	f7ff ffec 	bl	2686a <ble_att_chan_mtu>
    extra_len = OS_MBUF_PKTLEN(txom) - mtu;
   26892:	8a21      	ldrh	r1, [r4, #16]
   26894:	1a0b      	subs	r3, r1, r0
    if (extra_len > 0) {
   26896:	2b00      	cmp	r3, #0
   26898:	dc00      	bgt.n	2689c <ble_att_truncate_to_mtu+0x12>
}
   2689a:	bd10      	pop	{r4, pc}
        os_mbuf_adj(txom, -extra_len);
   2689c:	1a41      	subs	r1, r0, r1
   2689e:	4620      	mov	r0, r4
   268a0:	f7f2 ff63 	bl	1976a <os_mbuf_adj>
}
   268a4:	e7f9      	b.n	2689a <ble_att_truncate_to_mtu+0x10>

000268a6 <ble_att_mtu>:
{
   268a6:	b510      	push	{r4, lr}
   268a8:	b082      	sub	sp, #8
   268aa:	4604      	mov	r4, r0
    ble_hs_lock();
   268ac:	f007 fb70 	bl	2df90 <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   268b0:	aa01      	add	r2, sp, #4
   268b2:	4669      	mov	r1, sp
   268b4:	4620      	mov	r0, r4
   268b6:	f7ff fed0 	bl	2665a <ble_att_conn_chan_find>
    if (rc == 0) {
   268ba:	b128      	cbz	r0, 268c8 <ble_att_mtu+0x22>
        mtu = 0;
   268bc:	2400      	movs	r4, #0
    ble_hs_unlock();
   268be:	f007 fb6b 	bl	2df98 <ble_hs_unlock>
}
   268c2:	4620      	mov	r0, r4
   268c4:	b002      	add	sp, #8
   268c6:	bd10      	pop	{r4, pc}
        mtu = ble_att_chan_mtu(chan);
   268c8:	9801      	ldr	r0, [sp, #4]
   268ca:	f7ff ffce 	bl	2686a <ble_att_chan_mtu>
   268ce:	4604      	mov	r4, r0
   268d0:	e7f5      	b.n	268be <ble_att_mtu+0x18>
	...

000268d4 <ble_att_set_preferred_mtu>:
{
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;
    int i;

    if (mtu < BLE_ATT_MTU_DFLT) {
   268d4:	2816      	cmp	r0, #22
   268d6:	d91e      	bls.n	26916 <ble_att_set_preferred_mtu+0x42>
{
   268d8:	b538      	push	{r3, r4, r5, lr}
   268da:	4605      	mov	r5, r0
        return BLE_HS_EINVAL;
    }
    if (mtu > BLE_ATT_MTU_MAX) {
   268dc:	f5b0 7f04 	cmp.w	r0, #528	; 0x210
   268e0:	d21b      	bcs.n	2691a <ble_att_set_preferred_mtu+0x46>
        return BLE_HS_EINVAL;
    }

    ble_att_preferred_mtu_val = mtu;
   268e2:	4b0f      	ldr	r3, [pc, #60]	; (26920 <ble_att_set_preferred_mtu+0x4c>)
   268e4:	8018      	strh	r0, [r3, #0]

    /* Set my_mtu for established connections that haven't exchanged. */
    ble_hs_lock();
   268e6:	f007 fb53 	bl	2df90 <ble_hs_lock>

    i = 0;
   268ea:	2400      	movs	r4, #0
    while ((conn = ble_hs_conn_find_by_idx(i)) != NULL) {
   268ec:	e000      	b.n	268f0 <ble_att_set_preferred_mtu+0x1c>

        if (!(chan->flags & BLE_L2CAP_CHAN_F_TXED_MTU)) {
            chan->my_mtu = mtu;
        }

        i++;
   268ee:	3401      	adds	r4, #1
    while ((conn = ble_hs_conn_find_by_idx(i)) != NULL) {
   268f0:	4620      	mov	r0, r4
   268f2:	f008 fbed 	bl	2f0d0 <ble_hs_conn_find_by_idx>
   268f6:	4603      	mov	r3, r0
   268f8:	b148      	cbz	r0, 2690e <ble_att_set_preferred_mtu+0x3a>
        chan = ble_hs_conn_chan_find_by_scid(conn, BLE_L2CAP_CID_ATT);
   268fa:	2104      	movs	r1, #4
   268fc:	4618      	mov	r0, r3
   268fe:	f008 fb05 	bl	2ef0c <ble_hs_conn_chan_find_by_scid>
        if (!(chan->flags & BLE_L2CAP_CHAN_F_TXED_MTU)) {
   26902:	7b83      	ldrb	r3, [r0, #14]
   26904:	f013 0f01 	tst.w	r3, #1
   26908:	d1f1      	bne.n	268ee <ble_att_set_preferred_mtu+0x1a>
            chan->my_mtu = mtu;
   2690a:	8145      	strh	r5, [r0, #10]
   2690c:	e7ef      	b.n	268ee <ble_att_set_preferred_mtu+0x1a>
    }

    ble_hs_unlock();
   2690e:	f007 fb43 	bl	2df98 <ble_hs_unlock>

    return 0;
   26912:	2000      	movs	r0, #0
}
   26914:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_EINVAL;
   26916:	2003      	movs	r0, #3
}
   26918:	4770      	bx	lr
        return BLE_HS_EINVAL;
   2691a:	2003      	movs	r0, #3
   2691c:	e7fa      	b.n	26914 <ble_att_set_preferred_mtu+0x40>
   2691e:	bf00      	nop
   26920:	10004abe 	.word	0x10004abe

00026924 <ble_att_create_chan>:

struct ble_l2cap_chan *
ble_att_create_chan(uint16_t conn_handle)
{
   26924:	b508      	push	{r3, lr}
    struct ble_l2cap_chan *chan;

    chan = ble_l2cap_chan_alloc(conn_handle);
   26926:	f009 ff1d 	bl	30764 <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   2692a:	4603      	mov	r3, r0
   2692c:	b138      	cbz	r0, 2693e <ble_att_create_chan+0x1a>
        return NULL;
    }

    chan->scid = BLE_L2CAP_CID_ATT;
   2692e:	2204      	movs	r2, #4
   26930:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_ATT;
   26932:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = ble_att_preferred_mtu_val;
   26934:	4a03      	ldr	r2, [pc, #12]	; (26944 <ble_att_create_chan+0x20>)
   26936:	8812      	ldrh	r2, [r2, #0]
   26938:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_att_rx;
   2693a:	4a03      	ldr	r2, [pc, #12]	; (26948 <ble_att_create_chan+0x24>)
   2693c:	6182      	str	r2, [r0, #24]

    return chan;
}
   2693e:	4618      	mov	r0, r3
   26940:	bd08      	pop	{r3, pc}
   26942:	bf00      	nop
   26944:	10004abe 	.word	0x10004abe
   26948:	000265d7 	.word	0x000265d7

0002694c <ble_att_init>:

int
ble_att_init(void)
{
   2694c:	b500      	push	{lr}
   2694e:	b083      	sub	sp, #12
    int rc;

    ble_att_preferred_mtu_val = MYNEWT_VAL(BLE_ATT_PREFERRED_MTU);
   26950:	4b09      	ldr	r3, [pc, #36]	; (26978 <ble_att_init+0x2c>)
   26952:	f44f 7280 	mov.w	r2, #256	; 0x100
   26956:	801a      	strh	r2, [r3, #0]

    rc = stats_init_and_reg(
   26958:	4b08      	ldr	r3, [pc, #32]	; (2697c <ble_att_init+0x30>)
   2695a:	9301      	str	r3, [sp, #4]
   2695c:	2300      	movs	r3, #0
   2695e:	9300      	str	r3, [sp, #0]
   26960:	2236      	movs	r2, #54	; 0x36
   26962:	2104      	movs	r1, #4
   26964:	4806      	ldr	r0, [pc, #24]	; (26980 <ble_att_init+0x34>)
   26966:	f7f7 fae5 	bl	1df34 <stats_init_and_reg>
        STATS_HDR(ble_att_stats), STATS_SIZE_INIT_PARMS(ble_att_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_att_stats), "ble_att");
    if (rc != 0) {
   2696a:	b910      	cbnz	r0, 26972 <ble_att_init+0x26>
        return BLE_HS_EOS;
    }

    return 0;
}
   2696c:	b003      	add	sp, #12
   2696e:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   26972:	200b      	movs	r0, #11
   26974:	e7fa      	b.n	2696c <ble_att_init+0x20>
   26976:	bf00      	nop
   26978:	10004abe 	.word	0x10004abe
   2697c:	00038c60 	.word	0x00038c60
   26980:	10004ac0 	.word	0x10004ac0

00026984 <ble_att_clt_parse_find_type_value_hinfo>:
}

static int
ble_att_clt_parse_find_type_value_hinfo(
    struct os_mbuf **om, struct ble_att_find_type_value_hinfo *dst)
{
   26984:	b570      	push	{r4, r5, r6, lr}
   26986:	4604      	mov	r4, r0
   26988:	460d      	mov	r5, r1
    struct ble_att_handle_group *group;
    int rc;

    rc = ble_hs_mbuf_pullup_base(om, sizeof(*group));
   2698a:	2104      	movs	r1, #4
   2698c:	f009 fb26 	bl	2ffdc <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   26990:	b960      	cbnz	r0, 269ac <ble_att_clt_parse_find_type_value_hinfo+0x28>
   26992:	4606      	mov	r6, r0
        return BLE_HS_EBADDATA;
    }

    group = (struct ble_att_handle_group *)(*om)->om_data;
   26994:	6823      	ldr	r3, [r4, #0]
   26996:	681b      	ldr	r3, [r3, #0]

    dst->attr_handle = le16toh(group->attr_handle);
   26998:	881a      	ldrh	r2, [r3, #0]
   2699a:	802a      	strh	r2, [r5, #0]
    dst->group_end_handle = le16toh(group->group_end_handle);
   2699c:	885b      	ldrh	r3, [r3, #2]
   2699e:	806b      	strh	r3, [r5, #2]

    os_mbuf_adj((*om), sizeof(*group));
   269a0:	2104      	movs	r1, #4
   269a2:	6820      	ldr	r0, [r4, #0]
   269a4:	f7f2 fee1 	bl	1976a <os_mbuf_adj>

    return 0;
}
   269a8:	4630      	mov	r0, r6
   269aa:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EBADDATA;
   269ac:	260a      	movs	r6, #10
   269ae:	e7fb      	b.n	269a8 <ble_att_clt_parse_find_type_value_hinfo+0x24>

000269b0 <ble_att_clt_parse_read_group_type_adata>:

static int
ble_att_clt_parse_read_group_type_adata(
    struct os_mbuf **om, int data_len,
    struct ble_att_read_group_type_adata *adata)
{
   269b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int rc;

    if (data_len < BLE_ATT_READ_GROUP_TYPE_ADATA_BASE_SZ + 1) {
   269b2:	2904      	cmp	r1, #4
   269b4:	dd18      	ble.n	269e8 <ble_att_clt_parse_read_group_type_adata+0x38>
   269b6:	4605      	mov	r5, r0
   269b8:	460c      	mov	r4, r1
   269ba:	4616      	mov	r6, r2
        return BLE_HS_EMSGSIZE;
    }

    rc = ble_hs_mbuf_pullup_base(om, data_len);
   269bc:	f009 fb0e 	bl	2ffdc <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   269c0:	4607      	mov	r7, r0
   269c2:	b990      	cbnz	r0, 269ea <ble_att_clt_parse_read_group_type_adata+0x3a>
        return rc;
    }

    adata->att_handle = get_le16((*om)->om_data + 0);
   269c4:	682b      	ldr	r3, [r5, #0]
   269c6:	6818      	ldr	r0, [r3, #0]
   269c8:	f7f2 fa41 	bl	18e4e <get_le16>
   269cc:	8030      	strh	r0, [r6, #0]
    adata->end_group_handle = get_le16((*om)->om_data + 2);
   269ce:	682b      	ldr	r3, [r5, #0]
   269d0:	6818      	ldr	r0, [r3, #0]
   269d2:	3002      	adds	r0, #2
   269d4:	f7f2 fa3b 	bl	18e4e <get_le16>
   269d8:	8070      	strh	r0, [r6, #2]
    adata->value_len = data_len - BLE_ATT_READ_GROUP_TYPE_ADATA_BASE_SZ;
   269da:	3c04      	subs	r4, #4
   269dc:	6074      	str	r4, [r6, #4]
    adata->value = (*om)->om_data + BLE_ATT_READ_GROUP_TYPE_ADATA_BASE_SZ;
   269de:	682b      	ldr	r3, [r5, #0]
   269e0:	681b      	ldr	r3, [r3, #0]
   269e2:	3304      	adds	r3, #4
   269e4:	60b3      	str	r3, [r6, #8]

    return 0;
   269e6:	e000      	b.n	269ea <ble_att_clt_parse_read_group_type_adata+0x3a>
        return BLE_HS_EMSGSIZE;
   269e8:	2704      	movs	r7, #4
}
   269ea:	4638      	mov	r0, r7
   269ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000269ee <ble_att_clt_parse_find_info_entry>:
{
   269ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   269f2:	4607      	mov	r7, r0
   269f4:	460c      	mov	r4, r1
   269f6:	4615      	mov	r5, r2
    switch (rsp_format) {
   269f8:	2901      	cmp	r1, #1
   269fa:	d017      	beq.n	26a2c <ble_att_clt_parse_find_info_entry+0x3e>
   269fc:	2902      	cmp	r1, #2
   269fe:	d12c      	bne.n	26a5a <ble_att_clt_parse_find_info_entry+0x6c>
        entry_len = 2 + 16;
   26a00:	f04f 0812 	mov.w	r8, #18
    rc = ble_hs_mbuf_pullup_base(rxom, entry_len);
   26a04:	4641      	mov	r1, r8
   26a06:	4638      	mov	r0, r7
   26a08:	f009 fae8 	bl	2ffdc <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   26a0c:	4606      	mov	r6, r0
   26a0e:	bb28      	cbnz	r0, 26a5c <ble_att_clt_parse_find_info_entry+0x6e>
    idata->attr_handle = get_le16((*rxom)->om_data);
   26a10:	683b      	ldr	r3, [r7, #0]
   26a12:	6818      	ldr	r0, [r3, #0]
   26a14:	f7f2 fa1b 	bl	18e4e <get_le16>
   26a18:	8028      	strh	r0, [r5, #0]
    switch (rsp_format) {
   26a1a:	2c01      	cmp	r4, #1
   26a1c:	d009      	beq.n	26a32 <ble_att_clt_parse_find_info_entry+0x44>
   26a1e:	2c02      	cmp	r4, #2
   26a20:	d011      	beq.n	26a46 <ble_att_clt_parse_find_info_entry+0x58>
    os_mbuf_adj(*rxom, entry_len);
   26a22:	4641      	mov	r1, r8
   26a24:	6838      	ldr	r0, [r7, #0]
   26a26:	f7f2 fea0 	bl	1976a <os_mbuf_adj>
    return 0;
   26a2a:	e017      	b.n	26a5c <ble_att_clt_parse_find_info_entry+0x6e>
    switch (rsp_format) {
   26a2c:	f04f 0804 	mov.w	r8, #4
   26a30:	e7e8      	b.n	26a04 <ble_att_clt_parse_find_info_entry+0x16>
        rc = ble_uuid_init_from_att_mbuf(&idata->uuid, *rxom, 2, 2);
   26a32:	2302      	movs	r3, #2
   26a34:	461a      	mov	r2, r3
   26a36:	6839      	ldr	r1, [r7, #0]
   26a38:	1d28      	adds	r0, r5, #4
   26a3a:	f00a fd45 	bl	314c8 <ble_uuid_init_from_att_mbuf>
        if (rc != 0) {
   26a3e:	2800      	cmp	r0, #0
   26a40:	d0ef      	beq.n	26a22 <ble_att_clt_parse_find_info_entry+0x34>
            return BLE_HS_EBADDATA;
   26a42:	260a      	movs	r6, #10
   26a44:	e00a      	b.n	26a5c <ble_att_clt_parse_find_info_entry+0x6e>
        rc = ble_uuid_init_from_att_mbuf(&idata->uuid, *rxom, 2, 16);
   26a46:	2310      	movs	r3, #16
   26a48:	2202      	movs	r2, #2
   26a4a:	6839      	ldr	r1, [r7, #0]
   26a4c:	1d28      	adds	r0, r5, #4
   26a4e:	f00a fd3b 	bl	314c8 <ble_uuid_init_from_att_mbuf>
        if (rc != 0) {
   26a52:	2800      	cmp	r0, #0
   26a54:	d0e5      	beq.n	26a22 <ble_att_clt_parse_find_info_entry+0x34>
            return BLE_HS_EBADDATA;
   26a56:	260a      	movs	r6, #10
   26a58:	e000      	b.n	26a5c <ble_att_clt_parse_find_info_entry+0x6e>
    switch (rsp_format) {
   26a5a:	260a      	movs	r6, #10
}
   26a5c:	4630      	mov	r0, r6
   26a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026a62 <ble_att_clt_rx_error>:
{
   26a62:	b570      	push	{r4, r5, r6, lr}
   26a64:	4605      	mov	r5, r0
   26a66:	460c      	mov	r4, r1
    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*rsp));
   26a68:	2104      	movs	r1, #4
   26a6a:	4620      	mov	r0, r4
   26a6c:	f009 fab6 	bl	2ffdc <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   26a70:	4606      	mov	r6, r0
   26a72:	b108      	cbz	r0, 26a78 <ble_att_clt_rx_error+0x16>
}
   26a74:	4630      	mov	r0, r6
   26a76:	bd70      	pop	{r4, r5, r6, pc}
    rsp = (struct ble_att_error_rsp *)(*rxom)->om_data;
   26a78:	6823      	ldr	r3, [r4, #0]
   26a7a:	681b      	ldr	r3, [r3, #0]
    ble_gattc_rx_err(conn_handle, le16toh(rsp->baep_handle),
   26a7c:	78da      	ldrb	r2, [r3, #3]
   26a7e:	f8b3 1001 	ldrh.w	r1, [r3, #1]
   26a82:	4628      	mov	r0, r5
   26a84:	f005 fe7f 	bl	2c786 <ble_gattc_rx_err>
    return 0;
   26a88:	e7f4      	b.n	26a74 <ble_att_clt_rx_error+0x12>

00026a8a <ble_att_clt_tx_mtu>:
{
   26a8a:	b530      	push	{r4, r5, lr}
   26a8c:	b085      	sub	sp, #20
    if (mtu < BLE_ATT_MTU_DFLT) {
   26a8e:	2916      	cmp	r1, #22
   26a90:	d936      	bls.n	26b00 <ble_att_clt_tx_mtu+0x76>
   26a92:	4605      	mov	r5, r0
   26a94:	460c      	mov	r4, r1
    ble_hs_lock();
   26a96:	f007 fa7b 	bl	2df90 <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   26a9a:	aa03      	add	r2, sp, #12
   26a9c:	a902      	add	r1, sp, #8
   26a9e:	4628      	mov	r0, r5
   26aa0:	f7ff fddb 	bl	2665a <ble_att_conn_chan_find>
    if (rc != 0) {
   26aa4:	bb20      	cbnz	r0, 26af0 <ble_att_clt_tx_mtu+0x66>
    } else if (chan->flags & BLE_L2CAP_CHAN_F_TXED_MTU) {
   26aa6:	9b03      	ldr	r3, [sp, #12]
   26aa8:	7b9b      	ldrb	r3, [r3, #14]
   26aaa:	f013 0f01 	tst.w	r3, #1
   26aae:	d123      	bne.n	26af8 <ble_att_clt_tx_mtu+0x6e>
    ble_hs_unlock();
   26ab0:	f007 fa72 	bl	2df98 <ble_hs_unlock>
    req = ble_att_cmd_get(BLE_ATT_OP_MTU_REQ, sizeof(*req), &txom);
   26ab4:	aa01      	add	r2, sp, #4
   26ab6:	2102      	movs	r1, #2
   26ab8:	4608      	mov	r0, r1
   26aba:	f000 fb03 	bl	270c4 <ble_att_cmd_get>
    if (req == NULL) {
   26abe:	b318      	cbz	r0, 26b08 <ble_att_clt_tx_mtu+0x7e>
    req->bamc_mtu = htole16(mtu);
   26ac0:	8004      	strh	r4, [r0, #0]
    rc = ble_att_tx(conn_handle, txom);
   26ac2:	9901      	ldr	r1, [sp, #4]
   26ac4:	4628      	mov	r0, r5
   26ac6:	f000 fb0b 	bl	270e0 <ble_att_tx>
    if (rc != 0) {
   26aca:	4604      	mov	r4, r0
   26acc:	b9c8      	cbnz	r0, 26b02 <ble_att_clt_tx_mtu+0x78>
    ble_hs_lock();
   26ace:	f007 fa5f 	bl	2df90 <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   26ad2:	aa03      	add	r2, sp, #12
   26ad4:	a902      	add	r1, sp, #8
   26ad6:	4628      	mov	r0, r5
   26ad8:	f7ff fdbf 	bl	2665a <ble_att_conn_chan_find>
    if (rc == 0) {
   26adc:	4604      	mov	r4, r0
   26ade:	b920      	cbnz	r0, 26aea <ble_att_clt_tx_mtu+0x60>
        chan->flags |= BLE_L2CAP_CHAN_F_TXED_MTU;
   26ae0:	9a03      	ldr	r2, [sp, #12]
   26ae2:	7b93      	ldrb	r3, [r2, #14]
   26ae4:	f043 0301 	orr.w	r3, r3, #1
   26ae8:	7393      	strb	r3, [r2, #14]
    ble_hs_unlock();
   26aea:	f007 fa55 	bl	2df98 <ble_hs_unlock>
    return rc;
   26aee:	e008      	b.n	26b02 <ble_att_clt_tx_mtu+0x78>
    ble_hs_unlock();
   26af0:	f007 fa52 	bl	2df98 <ble_hs_unlock>
        rc = BLE_HS_ENOTCONN;
   26af4:	2407      	movs	r4, #7
   26af6:	e004      	b.n	26b02 <ble_att_clt_tx_mtu+0x78>
    ble_hs_unlock();
   26af8:	f007 fa4e 	bl	2df98 <ble_hs_unlock>
        rc = BLE_HS_EALREADY;
   26afc:	2402      	movs	r4, #2
        return rc;
   26afe:	e000      	b.n	26b02 <ble_att_clt_tx_mtu+0x78>
        return BLE_HS_EINVAL;
   26b00:	2403      	movs	r4, #3
}
   26b02:	4620      	mov	r0, r4
   26b04:	b005      	add	sp, #20
   26b06:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ENOMEM;
   26b08:	2406      	movs	r4, #6
   26b0a:	e7fa      	b.n	26b02 <ble_att_clt_tx_mtu+0x78>

00026b0c <ble_att_clt_rx_mtu>:
{
   26b0c:	b570      	push	{r4, r5, r6, lr}
   26b0e:	b082      	sub	sp, #8
   26b10:	4604      	mov	r4, r0
   26b12:	460d      	mov	r5, r1
    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*cmd));
   26b14:	2102      	movs	r1, #2
   26b16:	4628      	mov	r0, r5
   26b18:	f009 fa60 	bl	2ffdc <ble_hs_mbuf_pullup_base>
    if (rc == 0) {
   26b1c:	b148      	cbz	r0, 26b32 <ble_att_clt_rx_mtu+0x26>
   26b1e:	4606      	mov	r6, r0
    mtu = 0;
   26b20:	2500      	movs	r5, #0
    ble_gattc_rx_mtu(conn_handle, rc, mtu);
   26b22:	462a      	mov	r2, r5
   26b24:	4631      	mov	r1, r6
   26b26:	4620      	mov	r0, r4
   26b28:	f005 fe43 	bl	2c7b2 <ble_gattc_rx_mtu>
}
   26b2c:	4630      	mov	r0, r6
   26b2e:	b002      	add	sp, #8
   26b30:	bd70      	pop	{r4, r5, r6, pc}
        cmd = (struct ble_att_mtu_cmd *)(*rxom)->om_data;
   26b32:	682b      	ldr	r3, [r5, #0]
   26b34:	681d      	ldr	r5, [r3, #0]
        ble_hs_lock();
   26b36:	f007 fa2b 	bl	2df90 <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, NULL, &chan);
   26b3a:	aa01      	add	r2, sp, #4
   26b3c:	2100      	movs	r1, #0
   26b3e:	4620      	mov	r0, r4
   26b40:	f7ff fd8b 	bl	2665a <ble_att_conn_chan_find>
        if (rc == 0) {
   26b44:	4606      	mov	r6, r0
   26b46:	b150      	cbz	r0, 26b5e <ble_att_clt_rx_mtu+0x52>
    mtu = 0;
   26b48:	2500      	movs	r5, #0
        ble_hs_unlock();
   26b4a:	f007 fa25 	bl	2df98 <ble_hs_unlock>
        if (rc == 0) {
   26b4e:	2e00      	cmp	r6, #0
   26b50:	d1e7      	bne.n	26b22 <ble_att_clt_rx_mtu+0x16>
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
   26b52:	462a      	mov	r2, r5
   26b54:	2104      	movs	r1, #4
   26b56:	4620      	mov	r0, r4
   26b58:	f003 fe14 	bl	2a784 <ble_gap_mtu_event>
   26b5c:	e7e1      	b.n	26b22 <ble_att_clt_rx_mtu+0x16>
            ble_att_set_peer_mtu(chan, le16toh(cmd->bamc_mtu));
   26b5e:	8829      	ldrh	r1, [r5, #0]
   26b60:	9801      	ldr	r0, [sp, #4]
   26b62:	f7ff fe7d 	bl	26860 <ble_att_set_peer_mtu>
            mtu = ble_att_chan_mtu(chan);
   26b66:	9801      	ldr	r0, [sp, #4]
   26b68:	f7ff fe7f 	bl	2686a <ble_att_chan_mtu>
   26b6c:	4605      	mov	r5, r0
   26b6e:	e7ec      	b.n	26b4a <ble_att_clt_rx_mtu+0x3e>

00026b70 <ble_att_clt_tx_find_info>:
    if (start_handle == 0 || start_handle > end_handle) {
   26b70:	b1a1      	cbz	r1, 26b9c <ble_att_clt_tx_find_info+0x2c>
{
   26b72:	b570      	push	{r4, r5, r6, lr}
   26b74:	b082      	sub	sp, #8
   26b76:	4605      	mov	r5, r0
   26b78:	4614      	mov	r4, r2
   26b7a:	460e      	mov	r6, r1
    if (start_handle == 0 || start_handle > end_handle) {
   26b7c:	4291      	cmp	r1, r2
   26b7e:	d80f      	bhi.n	26ba0 <ble_att_clt_tx_find_info+0x30>
    req = ble_att_cmd_get(BLE_ATT_OP_FIND_INFO_REQ, sizeof(*req), &txom);
   26b80:	aa01      	add	r2, sp, #4
   26b82:	2104      	movs	r1, #4
   26b84:	4608      	mov	r0, r1
   26b86:	f000 fa9d 	bl	270c4 <ble_att_cmd_get>
    if (req == NULL) {
   26b8a:	b158      	cbz	r0, 26ba4 <ble_att_clt_tx_find_info+0x34>
    req->bafq_start_handle = htole16(start_handle);
   26b8c:	8006      	strh	r6, [r0, #0]
    req->bafq_end_handle = htole16(end_handle);
   26b8e:	8044      	strh	r4, [r0, #2]
    return ble_att_tx(conn_handle, txom);
   26b90:	9901      	ldr	r1, [sp, #4]
   26b92:	4628      	mov	r0, r5
   26b94:	f000 faa4 	bl	270e0 <ble_att_tx>
}
   26b98:	b002      	add	sp, #8
   26b9a:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EINVAL;
   26b9c:	2003      	movs	r0, #3
}
   26b9e:	4770      	bx	lr
        return BLE_HS_EINVAL;
   26ba0:	2003      	movs	r0, #3
   26ba2:	e7f9      	b.n	26b98 <ble_att_clt_tx_find_info+0x28>
        return BLE_HS_ENOMEM;
   26ba4:	2006      	movs	r0, #6
   26ba6:	e7f7      	b.n	26b98 <ble_att_clt_tx_find_info+0x28>

00026ba8 <ble_att_clt_rx_find_info>:
{
   26ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
   26baa:	b087      	sub	sp, #28
   26bac:	4605      	mov	r5, r0
   26bae:	460c      	mov	r4, r1
    rc = ble_hs_mbuf_pullup_base(om, sizeof(*rsp));
   26bb0:	2101      	movs	r1, #1
   26bb2:	4620      	mov	r0, r4
   26bb4:	f009 fa12 	bl	2ffdc <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   26bb8:	4607      	mov	r7, r0
   26bba:	b130      	cbz	r0, 26bca <ble_att_clt_rx_find_info+0x22>
    ble_gattc_rx_find_info_complete(conn_handle, rc);
   26bbc:	4639      	mov	r1, r7
   26bbe:	4628      	mov	r0, r5
   26bc0:	f005 fe18 	bl	2c7f4 <ble_gattc_rx_find_info_complete>
}
   26bc4:	4638      	mov	r0, r7
   26bc6:	b007      	add	sp, #28
   26bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rsp = (struct ble_att_find_info_rsp *)(*om)->om_data;
   26bca:	6820      	ldr	r0, [r4, #0]
   26bcc:	6806      	ldr	r6, [r0, #0]
    os_mbuf_adj((*om), sizeof(*rsp));
   26bce:	2101      	movs	r1, #1
   26bd0:	f7f2 fdcb 	bl	1976a <os_mbuf_adj>
    while (OS_MBUF_PKTLEN(*om) > 0) {
   26bd4:	e003      	b.n	26bde <ble_att_clt_rx_find_info+0x36>
        ble_gattc_rx_find_info_idata(conn_handle, &idata);
   26bd6:	4669      	mov	r1, sp
   26bd8:	4628      	mov	r0, r5
   26bda:	f005 fdfc 	bl	2c7d6 <ble_gattc_rx_find_info_idata>
    while (OS_MBUF_PKTLEN(*om) > 0) {
   26bde:	6823      	ldr	r3, [r4, #0]
   26be0:	8a1b      	ldrh	r3, [r3, #16]
   26be2:	2b00      	cmp	r3, #0
   26be4:	d0ea      	beq.n	26bbc <ble_att_clt_rx_find_info+0x14>
        rc = ble_att_clt_parse_find_info_entry(om, rsp->bafp_format, &idata);
   26be6:	466a      	mov	r2, sp
   26be8:	7831      	ldrb	r1, [r6, #0]
   26bea:	4620      	mov	r0, r4
   26bec:	f7ff feff 	bl	269ee <ble_att_clt_parse_find_info_entry>
        if (rc != 0) {
   26bf0:	2800      	cmp	r0, #0
   26bf2:	d0f0      	beq.n	26bd6 <ble_att_clt_rx_find_info+0x2e>
        rc = ble_att_clt_parse_find_info_entry(om, rsp->bafp_format, &idata);
   26bf4:	4607      	mov	r7, r0
   26bf6:	e7e1      	b.n	26bbc <ble_att_clt_rx_find_info+0x14>

00026bf8 <ble_att_clt_tx_find_type_value>:
    if (start_handle == 0 || start_handle > end_handle) {
   26bf8:	b1e1      	cbz	r1, 26c34 <ble_att_clt_tx_find_type_value+0x3c>
{
   26bfa:	b5f0      	push	{r4, r5, r6, r7, lr}
   26bfc:	b083      	sub	sp, #12
   26bfe:	4607      	mov	r7, r0
   26c00:	4614      	mov	r4, r2
   26c02:	461d      	mov	r5, r3
   26c04:	460e      	mov	r6, r1
    if (start_handle == 0 || start_handle > end_handle) {
   26c06:	4291      	cmp	r1, r2
   26c08:	d816      	bhi.n	26c38 <ble_att_clt_tx_find_type_value+0x40>
    req = ble_att_cmd_get(BLE_ATT_OP_FIND_TYPE_VALUE_REQ, sizeof(*req) + value_len,
   26c0a:	aa01      	add	r2, sp, #4
   26c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26c0e:	1d99      	adds	r1, r3, #6
   26c10:	2006      	movs	r0, #6
   26c12:	f000 fa57 	bl	270c4 <ble_att_cmd_get>
    if (req == NULL) {
   26c16:	b188      	cbz	r0, 26c3c <ble_att_clt_tx_find_type_value+0x44>
    req->bavq_start_handle = htole16(start_handle);
   26c18:	8006      	strh	r6, [r0, #0]
    req->bavq_end_handle = htole16(end_handle);
   26c1a:	8044      	strh	r4, [r0, #2]
    req->bavq_attr_type = htole16(attribute_type);
   26c1c:	8085      	strh	r5, [r0, #4]
    memcpy(req->bavq_value, attribute_value, value_len);
   26c1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   26c20:	9908      	ldr	r1, [sp, #32]
   26c22:	3006      	adds	r0, #6
   26c24:	f7f4 f814 	bl	1ac50 <memcpy>
    return ble_att_tx(conn_handle, txom);
   26c28:	9901      	ldr	r1, [sp, #4]
   26c2a:	4638      	mov	r0, r7
   26c2c:	f000 fa58 	bl	270e0 <ble_att_tx>
}
   26c30:	b003      	add	sp, #12
   26c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EINVAL;
   26c34:	2003      	movs	r0, #3
}
   26c36:	4770      	bx	lr
        return BLE_HS_EINVAL;
   26c38:	2003      	movs	r0, #3
   26c3a:	e7f9      	b.n	26c30 <ble_att_clt_tx_find_type_value+0x38>
        return BLE_HS_ENOMEM;
   26c3c:	2006      	movs	r0, #6
   26c3e:	e7f7      	b.n	26c30 <ble_att_clt_tx_find_type_value+0x38>

00026c40 <ble_att_clt_rx_find_type_value>:
{
   26c40:	b570      	push	{r4, r5, r6, lr}
   26c42:	b082      	sub	sp, #8
   26c44:	4605      	mov	r5, r0
   26c46:	460c      	mov	r4, r1
    rc = 0;
   26c48:	2600      	movs	r6, #0
    while (OS_MBUF_PKTLEN(*rxom) > 0) {
   26c4a:	6823      	ldr	r3, [r4, #0]
   26c4c:	8a1b      	ldrh	r3, [r3, #16]
   26c4e:	b153      	cbz	r3, 26c66 <ble_att_clt_rx_find_type_value+0x26>
        rc = ble_att_clt_parse_find_type_value_hinfo(rxom, &hinfo);
   26c50:	a901      	add	r1, sp, #4
   26c52:	4620      	mov	r0, r4
   26c54:	f7ff fe96 	bl	26984 <ble_att_clt_parse_find_type_value_hinfo>
        if (rc != 0) {
   26c58:	4606      	mov	r6, r0
   26c5a:	b920      	cbnz	r0, 26c66 <ble_att_clt_rx_find_type_value+0x26>
        ble_gattc_rx_find_type_value_hinfo(conn_handle, &hinfo);
   26c5c:	a901      	add	r1, sp, #4
   26c5e:	4628      	mov	r0, r5
   26c60:	f005 fdd7 	bl	2c812 <ble_gattc_rx_find_type_value_hinfo>
   26c64:	e7f1      	b.n	26c4a <ble_att_clt_rx_find_type_value+0xa>
    ble_gattc_rx_find_type_value_complete(conn_handle, rc);
   26c66:	4631      	mov	r1, r6
   26c68:	4628      	mov	r0, r5
   26c6a:	f005 fde1 	bl	2c830 <ble_gattc_rx_find_type_value_complete>
}
   26c6e:	2000      	movs	r0, #0
   26c70:	b002      	add	sp, #8
   26c72:	bd70      	pop	{r4, r5, r6, pc}

00026c74 <ble_att_clt_tx_read_type>:
    if (start_handle == 0 || start_handle > end_handle) {
   26c74:	b1e9      	cbz	r1, 26cb2 <ble_att_clt_tx_read_type+0x3e>
{
   26c76:	b5f0      	push	{r4, r5, r6, r7, lr}
   26c78:	b083      	sub	sp, #12
   26c7a:	4607      	mov	r7, r0
   26c7c:	4614      	mov	r4, r2
   26c7e:	461d      	mov	r5, r3
   26c80:	460e      	mov	r6, r1
    if (start_handle == 0 || start_handle > end_handle) {
   26c82:	4291      	cmp	r1, r2
   26c84:	d817      	bhi.n	26cb6 <ble_att_clt_tx_read_type+0x42>
                          sizeof(*req) + ble_uuid_length(uuid), &txom);
   26c86:	4618      	mov	r0, r3
   26c88:	f00a fc80 	bl	3158c <ble_uuid_length>
    req = ble_att_cmd_get(BLE_ATT_OP_READ_TYPE_REQ,
   26c8c:	aa01      	add	r2, sp, #4
   26c8e:	1d01      	adds	r1, r0, #4
   26c90:	2008      	movs	r0, #8
   26c92:	f000 fa17 	bl	270c4 <ble_att_cmd_get>
    if (req == NULL) {
   26c96:	4601      	mov	r1, r0
   26c98:	b178      	cbz	r0, 26cba <ble_att_clt_tx_read_type+0x46>
    req->batq_start_handle = htole16(start_handle);
   26c9a:	8006      	strh	r6, [r0, #0]
    req->batq_end_handle = htole16(end_handle);
   26c9c:	8044      	strh	r4, [r0, #2]
    ble_uuid_flat(uuid, req->uuid);
   26c9e:	3104      	adds	r1, #4
   26ca0:	4628      	mov	r0, r5
   26ca2:	f00a fc47 	bl	31534 <ble_uuid_flat>
    return ble_att_tx(conn_handle, txom);
   26ca6:	9901      	ldr	r1, [sp, #4]
   26ca8:	4638      	mov	r0, r7
   26caa:	f000 fa19 	bl	270e0 <ble_att_tx>
}
   26cae:	b003      	add	sp, #12
   26cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EINVAL;
   26cb2:	2003      	movs	r0, #3
}
   26cb4:	4770      	bx	lr
        return BLE_HS_EINVAL;
   26cb6:	2003      	movs	r0, #3
   26cb8:	e7f9      	b.n	26cae <ble_att_clt_tx_read_type+0x3a>
        return BLE_HS_ENOMEM;
   26cba:	2006      	movs	r0, #6
   26cbc:	e7f7      	b.n	26cae <ble_att_clt_tx_read_type+0x3a>

00026cbe <ble_att_clt_rx_read_type>:
{
   26cbe:	b5f0      	push	{r4, r5, r6, r7, lr}
   26cc0:	b085      	sub	sp, #20
   26cc2:	4606      	mov	r6, r0
   26cc4:	460c      	mov	r4, r1
    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*rsp));
   26cc6:	2101      	movs	r1, #1
   26cc8:	4620      	mov	r0, r4
   26cca:	f009 f987 	bl	2ffdc <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   26cce:	4607      	mov	r7, r0
   26cd0:	b130      	cbz	r0, 26ce0 <ble_att_clt_rx_read_type+0x22>
    ble_gattc_rx_read_type_complete(conn_handle, rc);
   26cd2:	4639      	mov	r1, r7
   26cd4:	4630      	mov	r0, r6
   26cd6:	f005 fdd1 	bl	2c87c <ble_gattc_rx_read_type_complete>
}
   26cda:	4638      	mov	r0, r7
   26cdc:	b005      	add	sp, #20
   26cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rsp = (struct ble_att_read_type_rsp *)(*rxom)->om_data;
   26ce0:	6820      	ldr	r0, [r4, #0]
   26ce2:	6803      	ldr	r3, [r0, #0]
    data_len = rsp->batp_length;
   26ce4:	781d      	ldrb	r5, [r3, #0]
    os_mbuf_adj(*rxom, sizeof(*rsp));
   26ce6:	2101      	movs	r1, #1
   26ce8:	f7f2 fd3f 	bl	1976a <os_mbuf_adj>
    if (data_len < sizeof(*data)) {
   26cec:	2d01      	cmp	r5, #1
   26cee:	d91c      	bls.n	26d2a <ble_att_clt_rx_read_type+0x6c>
    while (OS_MBUF_PKTLEN(*rxom) > 0) {
   26cf0:	6823      	ldr	r3, [r4, #0]
   26cf2:	8a1b      	ldrh	r3, [r3, #16]
   26cf4:	2b00      	cmp	r3, #0
   26cf6:	d0ec      	beq.n	26cd2 <ble_att_clt_rx_read_type+0x14>
        rc = ble_hs_mbuf_pullup_base(rxom, data_len);
   26cf8:	4629      	mov	r1, r5
   26cfa:	4620      	mov	r0, r4
   26cfc:	f009 f96e 	bl	2ffdc <ble_hs_mbuf_pullup_base>
        if (rc != 0) {
   26d00:	4607      	mov	r7, r0
   26d02:	2800      	cmp	r0, #0
   26d04:	d1e5      	bne.n	26cd2 <ble_att_clt_rx_read_type+0x14>
        data = (struct ble_att_attr_data_list *)(*rxom)->om_data;
   26d06:	6823      	ldr	r3, [r4, #0]
        adata.att_handle = le16toh(data->handle);
   26d08:	681b      	ldr	r3, [r3, #0]
   26d0a:	f833 2b02 	ldrh.w	r2, [r3], #2
   26d0e:	f8ad 2004 	strh.w	r2, [sp, #4]
        adata.value_len = data_len - sizeof(*data);
   26d12:	1eaa      	subs	r2, r5, #2
   26d14:	9202      	str	r2, [sp, #8]
        adata.value = data->value;
   26d16:	9303      	str	r3, [sp, #12]
        ble_gattc_rx_read_type_adata(conn_handle, &adata);
   26d18:	a901      	add	r1, sp, #4
   26d1a:	4630      	mov	r0, r6
   26d1c:	f005 fd98 	bl	2c850 <ble_gattc_rx_read_type_adata>
        os_mbuf_adj(*rxom, data_len);
   26d20:	4629      	mov	r1, r5
   26d22:	6820      	ldr	r0, [r4, #0]
   26d24:	f7f2 fd21 	bl	1976a <os_mbuf_adj>
   26d28:	e7e2      	b.n	26cf0 <ble_att_clt_rx_read_type+0x32>
        rc = BLE_HS_EBADDATA;
   26d2a:	270a      	movs	r7, #10
   26d2c:	e7d1      	b.n	26cd2 <ble_att_clt_rx_read_type+0x14>

00026d2e <ble_att_clt_tx_read>:
    if (handle == 0) {
   26d2e:	b181      	cbz	r1, 26d52 <ble_att_clt_tx_read+0x24>
{
   26d30:	b530      	push	{r4, r5, lr}
   26d32:	b083      	sub	sp, #12
   26d34:	4604      	mov	r4, r0
   26d36:	460d      	mov	r5, r1
    req = ble_att_cmd_get(BLE_ATT_OP_READ_REQ, sizeof(*req), &txom);
   26d38:	aa01      	add	r2, sp, #4
   26d3a:	2102      	movs	r1, #2
   26d3c:	200a      	movs	r0, #10
   26d3e:	f000 f9c1 	bl	270c4 <ble_att_cmd_get>
    if (req == NULL) {
   26d42:	b140      	cbz	r0, 26d56 <ble_att_clt_tx_read+0x28>
    req->barq_handle = htole16(handle);
   26d44:	8005      	strh	r5, [r0, #0]
    rc = ble_att_tx(conn_handle, txom);
   26d46:	9901      	ldr	r1, [sp, #4]
   26d48:	4620      	mov	r0, r4
   26d4a:	f000 f9c9 	bl	270e0 <ble_att_tx>
}
   26d4e:	b003      	add	sp, #12
   26d50:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EINVAL;
   26d52:	2003      	movs	r0, #3
}
   26d54:	4770      	bx	lr
        return BLE_HS_ENOMEM;
   26d56:	2006      	movs	r0, #6
   26d58:	e7f9      	b.n	26d4e <ble_att_clt_tx_read+0x20>

00026d5a <ble_att_clt_rx_read>:
{
   26d5a:	b508      	push	{r3, lr}
   26d5c:	460a      	mov	r2, r1
    ble_gattc_rx_read_rsp(conn_handle, 0, rxom);
   26d5e:	2100      	movs	r1, #0
   26d60:	f005 fdc0 	bl	2c8e4 <ble_gattc_rx_read_rsp>
}
   26d64:	2000      	movs	r0, #0
   26d66:	bd08      	pop	{r3, pc}

00026d68 <ble_att_clt_tx_read_blob>:
    if (handle == 0) {
   26d68:	b191      	cbz	r1, 26d90 <ble_att_clt_tx_read_blob+0x28>
{
   26d6a:	b570      	push	{r4, r5, r6, lr}
   26d6c:	b082      	sub	sp, #8
   26d6e:	4604      	mov	r4, r0
   26d70:	4615      	mov	r5, r2
   26d72:	460e      	mov	r6, r1
    req = ble_att_cmd_get(BLE_ATT_OP_READ_BLOB_REQ, sizeof(*req), &txom);
   26d74:	aa01      	add	r2, sp, #4
   26d76:	2104      	movs	r1, #4
   26d78:	200c      	movs	r0, #12
   26d7a:	f000 f9a3 	bl	270c4 <ble_att_cmd_get>
    if (req == NULL) {
   26d7e:	b148      	cbz	r0, 26d94 <ble_att_clt_tx_read_blob+0x2c>
    req->babq_handle = htole16(handle);
   26d80:	8006      	strh	r6, [r0, #0]
    req->babq_offset = htole16(offset);
   26d82:	8045      	strh	r5, [r0, #2]
    rc = ble_att_tx(conn_handle, txom);
   26d84:	9901      	ldr	r1, [sp, #4]
   26d86:	4620      	mov	r0, r4
   26d88:	f000 f9aa 	bl	270e0 <ble_att_tx>
}
   26d8c:	b002      	add	sp, #8
   26d8e:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EINVAL;
   26d90:	2003      	movs	r0, #3
}
   26d92:	4770      	bx	lr
        return BLE_HS_ENOMEM;
   26d94:	2006      	movs	r0, #6
   26d96:	e7f9      	b.n	26d8c <ble_att_clt_tx_read_blob+0x24>

00026d98 <ble_att_clt_rx_read_blob>:
{
   26d98:	b508      	push	{r3, lr}
   26d9a:	460a      	mov	r2, r1
    ble_gattc_rx_read_blob_rsp(conn_handle, 0, rxom);
   26d9c:	2100      	movs	r1, #0
   26d9e:	f005 fdb9 	bl	2c914 <ble_gattc_rx_read_blob_rsp>
}
   26da2:	2000      	movs	r0, #0
   26da4:	bd08      	pop	{r3, pc}

00026da6 <ble_att_clt_tx_read_mult>:
{
   26da6:	b570      	push	{r4, r5, r6, lr}
   26da8:	b082      	sub	sp, #8
    if (num_handles < 1) {
   26daa:	1e14      	subs	r4, r2, #0
   26dac:	dd17      	ble.n	26dde <ble_att_clt_tx_read_mult+0x38>
   26dae:	4606      	mov	r6, r0
   26db0:	460d      	mov	r5, r1
    req = ble_att_cmd_get(BLE_ATT_OP_READ_MULT_REQ,
   26db2:	aa01      	add	r2, sp, #4
   26db4:	0061      	lsls	r1, r4, #1
   26db6:	200e      	movs	r0, #14
   26db8:	f000 f984 	bl	270c4 <ble_att_cmd_get>
    if (req == NULL) {
   26dbc:	4601      	mov	r1, r0
   26dbe:	b180      	cbz	r0, 26de2 <ble_att_clt_tx_read_mult+0x3c>
    for(i = 0; i < num_handles; i++) {
   26dc0:	2300      	movs	r3, #0
   26dc2:	e004      	b.n	26dce <ble_att_clt_tx_read_mult+0x28>
        req->handles[i] = htole16(handles[i]);
   26dc4:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
   26dc8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(i = 0; i < num_handles; i++) {
   26dcc:	3301      	adds	r3, #1
   26dce:	42a3      	cmp	r3, r4
   26dd0:	dbf8      	blt.n	26dc4 <ble_att_clt_tx_read_mult+0x1e>
    return ble_att_tx(conn_handle, txom);
   26dd2:	9901      	ldr	r1, [sp, #4]
   26dd4:	4630      	mov	r0, r6
   26dd6:	f000 f983 	bl	270e0 <ble_att_tx>
}
   26dda:	b002      	add	sp, #8
   26ddc:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EINVAL;
   26dde:	2003      	movs	r0, #3
   26de0:	e7fb      	b.n	26dda <ble_att_clt_tx_read_mult+0x34>
        return BLE_HS_ENOMEM;
   26de2:	2006      	movs	r0, #6
   26de4:	e7f9      	b.n	26dda <ble_att_clt_tx_read_mult+0x34>

00026de6 <ble_att_clt_rx_read_mult>:
{
   26de6:	b508      	push	{r3, lr}
   26de8:	460a      	mov	r2, r1
    ble_gattc_rx_read_mult_rsp(conn_handle, 0, rxom);
   26dea:	2100      	movs	r1, #0
   26dec:	f005 fda3 	bl	2c936 <ble_gattc_rx_read_mult_rsp>
}
   26df0:	2000      	movs	r0, #0
   26df2:	bd08      	pop	{r3, pc}

00026df4 <ble_att_clt_tx_read_group_type>:
    if (start_handle == 0 || start_handle > end_handle) {
   26df4:	b1e9      	cbz	r1, 26e32 <ble_att_clt_tx_read_group_type+0x3e>
{
   26df6:	b5f0      	push	{r4, r5, r6, r7, lr}
   26df8:	b083      	sub	sp, #12
   26dfa:	4607      	mov	r7, r0
   26dfc:	4614      	mov	r4, r2
   26dfe:	461d      	mov	r5, r3
   26e00:	460e      	mov	r6, r1
    if (start_handle == 0 || start_handle > end_handle) {
   26e02:	4291      	cmp	r1, r2
   26e04:	d817      	bhi.n	26e36 <ble_att_clt_tx_read_group_type+0x42>
                          sizeof(*req) + ble_uuid_length(uuid), &txom);
   26e06:	4618      	mov	r0, r3
   26e08:	f00a fbc0 	bl	3158c <ble_uuid_length>
    req = ble_att_cmd_get(BLE_ATT_OP_READ_GROUP_TYPE_REQ,
   26e0c:	aa01      	add	r2, sp, #4
   26e0e:	1d01      	adds	r1, r0, #4
   26e10:	2010      	movs	r0, #16
   26e12:	f000 f957 	bl	270c4 <ble_att_cmd_get>
    if (req == NULL) {
   26e16:	4601      	mov	r1, r0
   26e18:	b178      	cbz	r0, 26e3a <ble_att_clt_tx_read_group_type+0x46>
    req->bagq_start_handle = htole16(start_handle);
   26e1a:	8006      	strh	r6, [r0, #0]
    req->bagq_end_handle = htole16(end_handle);
   26e1c:	8044      	strh	r4, [r0, #2]
    ble_uuid_flat(uuid, req->uuid);
   26e1e:	3104      	adds	r1, #4
   26e20:	4628      	mov	r0, r5
   26e22:	f00a fb87 	bl	31534 <ble_uuid_flat>
    return ble_att_tx(conn_handle, txom);
   26e26:	9901      	ldr	r1, [sp, #4]
   26e28:	4638      	mov	r0, r7
   26e2a:	f000 f959 	bl	270e0 <ble_att_tx>
}
   26e2e:	b003      	add	sp, #12
   26e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EINVAL;
   26e32:	2003      	movs	r0, #3
}
   26e34:	4770      	bx	lr
        return BLE_HS_EINVAL;
   26e36:	2003      	movs	r0, #3
   26e38:	e7f9      	b.n	26e2e <ble_att_clt_tx_read_group_type+0x3a>
        return BLE_HS_ENOMEM;
   26e3a:	2006      	movs	r0, #6
   26e3c:	e7f7      	b.n	26e2e <ble_att_clt_tx_read_group_type+0x3a>

00026e3e <ble_att_clt_rx_read_group_type>:

int
ble_att_clt_rx_read_group_type(uint16_t conn_handle, struct os_mbuf **rxom)
{
   26e3e:	b5f0      	push	{r4, r5, r6, r7, lr}
   26e40:	b085      	sub	sp, #20
   26e42:	4606      	mov	r6, r0
   26e44:	460c      	mov	r4, r1
    struct ble_att_read_group_type_adata adata;
    struct ble_att_read_group_type_rsp *rsp;
    uint8_t len;
    int rc;

    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*rsp));
   26e46:	2101      	movs	r1, #1
   26e48:	4620      	mov	r0, r4
   26e4a:	f009 f8c7 	bl	2ffdc <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   26e4e:	4607      	mov	r7, r0
   26e50:	b130      	cbz	r0, 26e60 <ble_att_clt_rx_read_group_type+0x22>
        os_mbuf_adj(*rxom, len);
    }

done:
    /* Notify GATT that the response is done being parsed. */
    ble_gattc_rx_read_group_type_complete(conn_handle, rc);
   26e52:	4639      	mov	r1, r7
   26e54:	4630      	mov	r0, r6
   26e56:	f005 fd36 	bl	2c8c6 <ble_gattc_rx_read_group_type_complete>
    return rc;
}
   26e5a:	4638      	mov	r0, r7
   26e5c:	b005      	add	sp, #20
   26e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rsp = (struct ble_att_read_group_type_rsp *)(*rxom)->om_data;
   26e60:	6820      	ldr	r0, [r4, #0]
   26e62:	6803      	ldr	r3, [r0, #0]
    len = rsp->bagp_length;
   26e64:	781d      	ldrb	r5, [r3, #0]
    os_mbuf_adj(*rxom, sizeof(*rsp));
   26e66:	2101      	movs	r1, #1
   26e68:	f7f2 fc7f 	bl	1976a <os_mbuf_adj>
    while (OS_MBUF_PKTLEN(*rxom) > 0) {
   26e6c:	e007      	b.n	26e7e <ble_att_clt_rx_read_group_type+0x40>
        ble_gattc_rx_read_group_type_adata(conn_handle, &adata);
   26e6e:	a901      	add	r1, sp, #4
   26e70:	4630      	mov	r0, r6
   26e72:	f005 fd19 	bl	2c8a8 <ble_gattc_rx_read_group_type_adata>
        os_mbuf_adj(*rxom, len);
   26e76:	4629      	mov	r1, r5
   26e78:	6820      	ldr	r0, [r4, #0]
   26e7a:	f7f2 fc76 	bl	1976a <os_mbuf_adj>
    while (OS_MBUF_PKTLEN(*rxom) > 0) {
   26e7e:	6823      	ldr	r3, [r4, #0]
   26e80:	8a1b      	ldrh	r3, [r3, #16]
   26e82:	2b00      	cmp	r3, #0
   26e84:	d0e5      	beq.n	26e52 <ble_att_clt_rx_read_group_type+0x14>
        rc = ble_att_clt_parse_read_group_type_adata(rxom, len, &adata);
   26e86:	aa01      	add	r2, sp, #4
   26e88:	4629      	mov	r1, r5
   26e8a:	4620      	mov	r0, r4
   26e8c:	f7ff fd90 	bl	269b0 <ble_att_clt_parse_read_group_type_adata>
        if (rc != 0) {
   26e90:	4607      	mov	r7, r0
   26e92:	2800      	cmp	r0, #0
   26e94:	d0eb      	beq.n	26e6e <ble_att_clt_rx_read_group_type+0x30>
   26e96:	e7dc      	b.n	26e52 <ble_att_clt_rx_read_group_type+0x14>

00026e98 <ble_att_clt_tx_write_req>:
 *****************************************************************************/

int
ble_att_clt_tx_write_req(uint16_t conn_handle, uint16_t handle,
                         struct os_mbuf *txom)
{
   26e98:	b570      	push	{r4, r5, r6, lr}
   26e9a:	b082      	sub	sp, #8
   26e9c:	4605      	mov	r5, r0
   26e9e:	460e      	mov	r6, r1
   26ea0:	4614      	mov	r4, r2
#endif

    struct ble_att_write_req *req;
    struct os_mbuf *txom2;

    req = ble_att_cmd_get(BLE_ATT_OP_WRITE_REQ, sizeof(*req), &txom2);
   26ea2:	aa01      	add	r2, sp, #4
   26ea4:	2102      	movs	r1, #2
   26ea6:	2012      	movs	r0, #18
   26ea8:	f000 f90c 	bl	270c4 <ble_att_cmd_get>
    if (req == NULL) {
   26eac:	b150      	cbz	r0, 26ec4 <ble_att_clt_tx_write_req+0x2c>
        os_mbuf_free_chain(txom);
        return BLE_HS_ENOMEM;
    }

    req->bawq_handle = htole16(handle);
   26eae:	8006      	strh	r6, [r0, #0]
    os_mbuf_concat(txom2, txom);
   26eb0:	4621      	mov	r1, r4
   26eb2:	9801      	ldr	r0, [sp, #4]
   26eb4:	f7f2 fdec 	bl	19a90 <os_mbuf_concat>

    return ble_att_tx(conn_handle, txom2);
   26eb8:	9901      	ldr	r1, [sp, #4]
   26eba:	4628      	mov	r0, r5
   26ebc:	f000 f910 	bl	270e0 <ble_att_tx>
}
   26ec0:	b002      	add	sp, #8
   26ec2:	bd70      	pop	{r4, r5, r6, pc}
        os_mbuf_free_chain(txom);
   26ec4:	4620      	mov	r0, r4
   26ec6:	f7f2 fb82 	bl	195ce <os_mbuf_free_chain>
        return BLE_HS_ENOMEM;
   26eca:	2006      	movs	r0, #6
   26ecc:	e7f8      	b.n	26ec0 <ble_att_clt_tx_write_req+0x28>

00026ece <ble_att_clt_tx_write_cmd>:

int
ble_att_clt_tx_write_cmd(uint16_t conn_handle, uint16_t handle,
                         struct os_mbuf *txom)
{
   26ece:	b5f0      	push	{r4, r5, r6, r7, lr}
   26ed0:	b083      	sub	sp, #12
   26ed2:	4606      	mov	r6, r0
   26ed4:	460f      	mov	r7, r1
   26ed6:	4615      	mov	r5, r2
    uint8_t b;
    int rc;
    int i;

    BLE_HS_LOG(DEBUG, "ble_att_clt_tx_write_cmd(): ");
    for (i = 0; i < OS_MBUF_PKTLEN(txom); i++) {
   26ed8:	2400      	movs	r4, #0
   26eda:	8a2b      	ldrh	r3, [r5, #16]
   26edc:	42a3      	cmp	r3, r4
   26ede:	dd13      	ble.n	26f08 <ble_att_clt_tx_write_cmd+0x3a>
        if (i != 0) {
            BLE_HS_LOG(DEBUG, ":");
        }
        rc = os_mbuf_copydata(txom, i, 1, &b);
   26ee0:	f10d 0303 	add.w	r3, sp, #3
   26ee4:	2201      	movs	r2, #1
   26ee6:	4621      	mov	r1, r4
   26ee8:	4628      	mov	r0, r5
   26eea:	f7f2 fc11 	bl	19710 <os_mbuf_copydata>
        assert(rc == 0);
   26eee:	b908      	cbnz	r0, 26ef4 <ble_att_clt_tx_write_cmd+0x26>
    for (i = 0; i < OS_MBUF_PKTLEN(txom); i++) {
   26ef0:	3401      	adds	r4, #1
   26ef2:	e7f2      	b.n	26eda <ble_att_clt_tx_write_cmd+0xc>
        assert(rc == 0);
   26ef4:	f7ed fbfe 	bl	146f4 <hal_debugger_connected>
   26ef8:	b100      	cbz	r0, 26efc <ble_att_clt_tx_write_cmd+0x2e>
   26efa:	be01      	bkpt	0x0001
   26efc:	2300      	movs	r3, #0
   26efe:	461a      	mov	r2, r3
   26f00:	4619      	mov	r1, r3
   26f02:	4618      	mov	r0, r3
   26f04:	f7f1 ff14 	bl	18d30 <__assert_func>
        BLE_HS_LOG(DEBUG, "0x%02x", b);
    }


    cmd = ble_att_cmd_get(BLE_ATT_OP_WRITE_CMD, sizeof(*cmd), &txom2);
   26f08:	aa01      	add	r2, sp, #4
   26f0a:	2102      	movs	r1, #2
   26f0c:	2052      	movs	r0, #82	; 0x52
   26f0e:	f000 f8d9 	bl	270c4 <ble_att_cmd_get>
    if (cmd == NULL) {
   26f12:	b150      	cbz	r0, 26f2a <ble_att_clt_tx_write_cmd+0x5c>
        os_mbuf_free_chain(txom);
        return BLE_HS_ENOMEM;
    }

    cmd->handle = htole16(handle);
   26f14:	8007      	strh	r7, [r0, #0]
    os_mbuf_concat(txom2, txom);
   26f16:	4629      	mov	r1, r5
   26f18:	9801      	ldr	r0, [sp, #4]
   26f1a:	f7f2 fdb9 	bl	19a90 <os_mbuf_concat>

    return ble_att_tx(conn_handle, txom2);
   26f1e:	9901      	ldr	r1, [sp, #4]
   26f20:	4630      	mov	r0, r6
   26f22:	f000 f8dd 	bl	270e0 <ble_att_tx>
}
   26f26:	b003      	add	sp, #12
   26f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
        os_mbuf_free_chain(txom);
   26f2a:	4628      	mov	r0, r5
   26f2c:	f7f2 fb4f 	bl	195ce <os_mbuf_free_chain>
        return BLE_HS_ENOMEM;
   26f30:	2006      	movs	r0, #6
   26f32:	e7f8      	b.n	26f26 <ble_att_clt_tx_write_cmd+0x58>

00026f34 <ble_att_clt_rx_write>:

int
ble_att_clt_rx_write(uint16_t conn_handle, struct os_mbuf **rxom)
{
   26f34:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_ATT_CLT_WRITE
    return BLE_HS_ENOTSUP;
#endif

    /* No payload. */
    ble_gattc_rx_write_rsp(conn_handle);
   26f36:	f005 fd10 	bl	2c95a <ble_gattc_rx_write_rsp>
    return 0;
}
   26f3a:	2000      	movs	r0, #0
   26f3c:	bd08      	pop	{r3, pc}

00026f3e <ble_att_clt_tx_prep_write>:
 *****************************************************************************/

int
ble_att_clt_tx_prep_write(uint16_t conn_handle, uint16_t handle,
                          uint16_t offset, struct os_mbuf *txom)
{
   26f3e:	b5f0      	push	{r4, r5, r6, r7, lr}
   26f40:	b083      	sub	sp, #12
   26f42:	461c      	mov	r4, r3

    struct ble_att_prep_write_cmd *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   26f44:	b319      	cbz	r1, 26f8e <ble_att_clt_tx_prep_write+0x50>
   26f46:	4606      	mov	r6, r0
   26f48:	4615      	mov	r5, r2
   26f4a:	460f      	mov	r7, r1
        rc = BLE_HS_EINVAL;
        goto err;
    }

    if (offset + OS_MBUF_PKTLEN(txom) > BLE_ATT_ATTR_MAX_LEN) {
   26f4c:	8a1b      	ldrh	r3, [r3, #16]
   26f4e:	4413      	add	r3, r2
   26f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   26f54:	dd01      	ble.n	26f5a <ble_att_clt_tx_prep_write+0x1c>
        rc = BLE_HS_EINVAL;
   26f56:	2503      	movs	r5, #3
   26f58:	e01a      	b.n	26f90 <ble_att_clt_tx_prep_write+0x52>
        goto err;
    }

    if (OS_MBUF_PKTLEN(txom) >
        ble_att_mtu(conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ) {
   26f5a:	f7ff fca4 	bl	268a6 <ble_att_mtu>
    if (OS_MBUF_PKTLEN(txom) >
   26f5e:	3804      	subs	r0, #4
   26f60:	8a23      	ldrh	r3, [r4, #16]
   26f62:	4298      	cmp	r0, r3
   26f64:	dc01      	bgt.n	26f6a <ble_att_clt_tx_prep_write+0x2c>
        rc = BLE_HS_EINVAL;
   26f66:	2503      	movs	r5, #3
   26f68:	e012      	b.n	26f90 <ble_att_clt_tx_prep_write+0x52>
        goto err;
    }

    req = ble_att_cmd_get(BLE_ATT_OP_PREP_WRITE_REQ, sizeof(*req), &txom2);
   26f6a:	aa01      	add	r2, sp, #4
   26f6c:	2104      	movs	r1, #4
   26f6e:	2016      	movs	r0, #22
   26f70:	f000 f8a8 	bl	270c4 <ble_att_cmd_get>
    if (req == NULL) {
   26f74:	b190      	cbz	r0, 26f9c <ble_att_clt_tx_prep_write+0x5e>
        rc = BLE_HS_ENOMEM;
        goto err;
    }

    req->bapc_handle = htole16(handle);
   26f76:	8007      	strh	r7, [r0, #0]
    req->bapc_offset = htole16(offset);
   26f78:	8045      	strh	r5, [r0, #2]
    os_mbuf_concat(txom2, txom);
   26f7a:	4621      	mov	r1, r4
   26f7c:	9801      	ldr	r0, [sp, #4]
   26f7e:	f7f2 fd87 	bl	19a90 <os_mbuf_concat>

    return ble_att_tx(conn_handle, txom2);
   26f82:	9901      	ldr	r1, [sp, #4]
   26f84:	4630      	mov	r0, r6
   26f86:	f000 f8ab 	bl	270e0 <ble_att_tx>
   26f8a:	4605      	mov	r5, r0
   26f8c:	e003      	b.n	26f96 <ble_att_clt_tx_prep_write+0x58>
        rc = BLE_HS_EINVAL;
   26f8e:	2503      	movs	r5, #3

err:
    os_mbuf_free_chain(txom);
   26f90:	4620      	mov	r0, r4
   26f92:	f7f2 fb1c 	bl	195ce <os_mbuf_free_chain>
    return rc;
}
   26f96:	4628      	mov	r0, r5
   26f98:	b003      	add	sp, #12
   26f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = BLE_HS_ENOMEM;
   26f9c:	2506      	movs	r5, #6
   26f9e:	e7f7      	b.n	26f90 <ble_att_clt_tx_prep_write+0x52>

00026fa0 <ble_att_clt_rx_prep_write>:

int
ble_att_clt_rx_prep_write(uint16_t conn_handle, struct os_mbuf **rxom)
{
   26fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26fa4:	b082      	sub	sp, #8
   26fa6:	4605      	mov	r5, r0
   26fa8:	460c      	mov	r4, r1

    /* Initialize some values in case of early error. */
    handle = 0;
    offset = 0;

    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*rsp));
   26faa:	2104      	movs	r1, #4
   26fac:	4620      	mov	r0, r4
   26fae:	f009 f815 	bl	2ffdc <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   26fb2:	4606      	mov	r6, r0
   26fb4:	b160      	cbz	r0, 26fd0 <ble_att_clt_rx_prep_write+0x30>
    offset = 0;
   26fb6:	2700      	movs	r7, #0
    handle = 0;
   26fb8:	46b8      	mov	r8, r7
    /* Strip the base from the front of the response. */
    os_mbuf_adj(*rxom, sizeof(*rsp));

done:
    /* Notify GATT client that the full response has been parsed. */
    ble_gattc_rx_prep_write_rsp(conn_handle, rc, handle, offset, rxom);
   26fba:	9400      	str	r4, [sp, #0]
   26fbc:	463b      	mov	r3, r7
   26fbe:	4642      	mov	r2, r8
   26fc0:	4631      	mov	r1, r6
   26fc2:	4628      	mov	r0, r5
   26fc4:	f005 fcd8 	bl	2c978 <ble_gattc_rx_prep_write_rsp>
    return rc;
}
   26fc8:	4630      	mov	r0, r6
   26fca:	b002      	add	sp, #8
   26fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rsp = (struct ble_att_prep_write_cmd *)(*rxom)->om_data;
   26fd0:	6820      	ldr	r0, [r4, #0]
   26fd2:	6803      	ldr	r3, [r0, #0]
    handle = le16toh(rsp->bapc_handle);
   26fd4:	f8b3 8000 	ldrh.w	r8, [r3]
    offset = le16toh(rsp->bapc_offset);
   26fd8:	885f      	ldrh	r7, [r3, #2]
    os_mbuf_adj(*rxom, sizeof(*rsp));
   26fda:	2104      	movs	r1, #4
   26fdc:	f7f2 fbc5 	bl	1976a <os_mbuf_adj>
   26fe0:	e7eb      	b.n	26fba <ble_att_clt_rx_prep_write+0x1a>

00026fe2 <ble_att_clt_tx_exec_write>:
 * $execute write request                                                    *
 *****************************************************************************/

int
ble_att_clt_tx_exec_write(uint16_t conn_handle, uint8_t flags)
{
   26fe2:	b530      	push	{r4, r5, lr}
   26fe4:	b083      	sub	sp, #12
   26fe6:	4604      	mov	r4, r0
   26fe8:	460d      	mov	r5, r1

    struct ble_att_exec_write_req *req;
    struct os_mbuf *txom;
    int rc;

    req = ble_att_cmd_get(BLE_ATT_OP_EXEC_WRITE_REQ, sizeof(*req), &txom);
   26fea:	aa01      	add	r2, sp, #4
   26fec:	2101      	movs	r1, #1
   26fee:	2018      	movs	r0, #24
   26ff0:	f000 f868 	bl	270c4 <ble_att_cmd_get>
    if (req == NULL) {
   26ff4:	b130      	cbz	r0, 27004 <ble_att_clt_tx_exec_write+0x22>
        return BLE_HS_ENOMEM;
    }

    req->baeq_flags = flags;
   26ff6:	7005      	strb	r5, [r0, #0]

    rc = ble_att_tx(conn_handle, txom);
   26ff8:	9901      	ldr	r1, [sp, #4]
   26ffa:	4620      	mov	r0, r4
   26ffc:	f000 f870 	bl	270e0 <ble_att_tx>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   27000:	b003      	add	sp, #12
   27002:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ENOMEM;
   27004:	2006      	movs	r0, #6
   27006:	e7fb      	b.n	27000 <ble_att_clt_tx_exec_write+0x1e>

00027008 <ble_att_clt_rx_exec_write>:

int
ble_att_clt_rx_exec_write(uint16_t conn_handle, struct os_mbuf **rxom)
{
   27008:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_ATT_CLT_EXEC_WRITE
    return BLE_HS_ENOTSUP;
#endif

    ble_gattc_rx_exec_write_rsp(conn_handle, 0);
   2700a:	2100      	movs	r1, #0
   2700c:	f005 fcd4 	bl	2c9b8 <ble_gattc_rx_exec_write_rsp>
    return 0;
}
   27010:	2000      	movs	r0, #0
   27012:	bd08      	pop	{r3, pc}

00027014 <ble_att_clt_tx_notify>:
 *****************************************************************************/

int
ble_att_clt_tx_notify(uint16_t conn_handle, uint16_t handle,
                      struct os_mbuf *txom)
{
   27014:	b570      	push	{r4, r5, r6, lr}
   27016:	b082      	sub	sp, #8
   27018:	4614      	mov	r4, r2

    struct ble_att_notify_req *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   2701a:	b931      	cbnz	r1, 2702a <ble_att_clt_tx_notify+0x16>
        rc = BLE_HS_EINVAL;
   2701c:	2503      	movs	r5, #3
    os_mbuf_concat(txom2, txom);

    return ble_att_tx(conn_handle, txom2);

err:
    os_mbuf_free_chain(txom);
   2701e:	4620      	mov	r0, r4
   27020:	f7f2 fad5 	bl	195ce <os_mbuf_free_chain>
    return rc;
}
   27024:	4628      	mov	r0, r5
   27026:	b002      	add	sp, #8
   27028:	bd70      	pop	{r4, r5, r6, pc}
   2702a:	4605      	mov	r5, r0
   2702c:	460e      	mov	r6, r1
    req = ble_att_cmd_get(BLE_ATT_OP_NOTIFY_REQ, sizeof(*req), &txom2);
   2702e:	aa01      	add	r2, sp, #4
   27030:	2102      	movs	r1, #2
   27032:	201b      	movs	r0, #27
   27034:	f000 f846 	bl	270c4 <ble_att_cmd_get>
    if (req == NULL) {
   27038:	b150      	cbz	r0, 27050 <ble_att_clt_tx_notify+0x3c>
    req->banq_handle = htole16(handle);
   2703a:	8006      	strh	r6, [r0, #0]
    os_mbuf_concat(txom2, txom);
   2703c:	4621      	mov	r1, r4
   2703e:	9801      	ldr	r0, [sp, #4]
   27040:	f7f2 fd26 	bl	19a90 <os_mbuf_concat>
    return ble_att_tx(conn_handle, txom2);
   27044:	9901      	ldr	r1, [sp, #4]
   27046:	4628      	mov	r0, r5
   27048:	f000 f84a 	bl	270e0 <ble_att_tx>
   2704c:	4605      	mov	r5, r0
   2704e:	e7e9      	b.n	27024 <ble_att_clt_tx_notify+0x10>
        rc = BLE_HS_ENOMEM;
   27050:	2506      	movs	r5, #6
   27052:	e7e4      	b.n	2701e <ble_att_clt_tx_notify+0xa>

00027054 <ble_att_clt_tx_indicate>:
 *****************************************************************************/

int
ble_att_clt_tx_indicate(uint16_t conn_handle, uint16_t handle,
                        struct os_mbuf *txom)
{
   27054:	b570      	push	{r4, r5, r6, lr}
   27056:	b082      	sub	sp, #8
   27058:	4614      	mov	r4, r2

    struct ble_att_indicate_req *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   2705a:	b931      	cbnz	r1, 2706a <ble_att_clt_tx_indicate+0x16>
        rc = BLE_HS_EINVAL;
   2705c:	2503      	movs	r5, #3
    os_mbuf_concat(txom2, txom);

    return ble_att_tx(conn_handle, txom2);

err:
    os_mbuf_free_chain(txom);
   2705e:	4620      	mov	r0, r4
   27060:	f7f2 fab5 	bl	195ce <os_mbuf_free_chain>
    return rc;
}
   27064:	4628      	mov	r0, r5
   27066:	b002      	add	sp, #8
   27068:	bd70      	pop	{r4, r5, r6, pc}
   2706a:	4605      	mov	r5, r0
   2706c:	460e      	mov	r6, r1
    req = ble_att_cmd_get(BLE_ATT_OP_INDICATE_REQ, sizeof(*req), &txom2);
   2706e:	aa01      	add	r2, sp, #4
   27070:	2102      	movs	r1, #2
   27072:	201d      	movs	r0, #29
   27074:	f000 f826 	bl	270c4 <ble_att_cmd_get>
    if (req == NULL) {
   27078:	b150      	cbz	r0, 27090 <ble_att_clt_tx_indicate+0x3c>
    req->baiq_handle = htole16(handle);
   2707a:	8006      	strh	r6, [r0, #0]
    os_mbuf_concat(txom2, txom);
   2707c:	4621      	mov	r1, r4
   2707e:	9801      	ldr	r0, [sp, #4]
   27080:	f7f2 fd06 	bl	19a90 <os_mbuf_concat>
    return ble_att_tx(conn_handle, txom2);
   27084:	9901      	ldr	r1, [sp, #4]
   27086:	4628      	mov	r0, r5
   27088:	f000 f82a 	bl	270e0 <ble_att_tx>
   2708c:	4605      	mov	r5, r0
   2708e:	e7e9      	b.n	27064 <ble_att_clt_tx_indicate+0x10>
        rc = BLE_HS_ENOMEM;
   27090:	2506      	movs	r5, #6
   27092:	e7e4      	b.n	2705e <ble_att_clt_tx_indicate+0xa>

00027094 <ble_att_clt_rx_indicate>:

int
ble_att_clt_rx_indicate(uint16_t conn_handle, struct os_mbuf **rxom)
{
   27094:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_ATT_CLT_INDICATE
    return BLE_HS_ENOTSUP;
#endif

    /* No payload. */
    ble_gattc_rx_indicate_rsp(conn_handle);
   27096:	f005 fca5 	bl	2c9e4 <ble_gattc_rx_indicate_rsp>
    return 0;
}
   2709a:	2000      	movs	r0, #0
   2709c:	bd08      	pop	{r3, pc}

0002709e <ble_att_cmd_prepare>:
#include "ble_hs_priv.h"

#if NIMBLE_BLE_CONNECT
void *
ble_att_cmd_prepare(uint8_t opcode, size_t len, struct os_mbuf *txom)
{
   2709e:	b570      	push	{r4, r5, r6, lr}
   270a0:	4606      	mov	r6, r0
   270a2:	4614      	mov	r4, r2
    struct ble_att_hdr *hdr;

    if (os_mbuf_extend(txom, sizeof(*hdr) + len) == NULL) {
   270a4:	3101      	adds	r1, #1
   270a6:	b289      	uxth	r1, r1
   270a8:	4610      	mov	r0, r2
   270aa:	f7f2 fd13 	bl	19ad4 <os_mbuf_extend>
   270ae:	b120      	cbz	r0, 270ba <ble_att_cmd_prepare+0x1c>
        return NULL;
    }

    hdr = (struct ble_att_hdr *)(txom)->om_data;

    hdr->opcode = opcode;
   270b0:	6825      	ldr	r5, [r4, #0]
   270b2:	f805 6b01 	strb.w	r6, [r5], #1

    return hdr->data;
}
   270b6:	4628      	mov	r0, r5
   270b8:	bd70      	pop	{r4, r5, r6, pc}
   270ba:	4605      	mov	r5, r0
        os_mbuf_free_chain(txom);
   270bc:	4620      	mov	r0, r4
   270be:	f7f2 fa86 	bl	195ce <os_mbuf_free_chain>
        return NULL;
   270c2:	e7f8      	b.n	270b6 <ble_att_cmd_prepare+0x18>

000270c4 <ble_att_cmd_get>:

void *
ble_att_cmd_get(uint8_t opcode, size_t len, struct os_mbuf **txom)
{
   270c4:	b570      	push	{r4, r5, r6, lr}
   270c6:	4605      	mov	r5, r0
   270c8:	460e      	mov	r6, r1
   270ca:	4614      	mov	r4, r2
    *txom = ble_hs_mbuf_l2cap_pkt();
   270cc:	f008 ff53 	bl	2ff76 <ble_hs_mbuf_l2cap_pkt>
   270d0:	6020      	str	r0, [r4, #0]
    if (*txom == NULL) {
   270d2:	b120      	cbz	r0, 270de <ble_att_cmd_get+0x1a>
        return NULL;
    }

    return ble_att_cmd_prepare(opcode, len, *txom);
   270d4:	4602      	mov	r2, r0
   270d6:	4631      	mov	r1, r6
   270d8:	4628      	mov	r0, r5
   270da:	f7ff ffe0 	bl	2709e <ble_att_cmd_prepare>
}
   270de:	bd70      	pop	{r4, r5, r6, pc}

000270e0 <ble_att_tx>:

int
ble_att_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   270e0:	b530      	push	{r4, r5, lr}
   270e2:	b083      	sub	sp, #12
   270e4:	4605      	mov	r5, r0
   270e6:	460c      	mov	r4, r1
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;
    int rc;

    BLE_HS_DBG_ASSERT_EVAL(txom->om_len >= 1);
    ble_att_inc_tx_stat(txom->om_data[0]);
   270e8:	680b      	ldr	r3, [r1, #0]
   270ea:	7818      	ldrb	r0, [r3, #0]
   270ec:	f7ff fabc 	bl	26668 <ble_att_inc_tx_stat>

    ble_hs_lock();
   270f0:	f006 ff4e 	bl	2df90 <ble_hs_lock>

    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_ATT, &conn,
   270f4:	ab01      	add	r3, sp, #4
   270f6:	466a      	mov	r2, sp
   270f8:	2104      	movs	r1, #4
   270fa:	4628      	mov	r0, r5
   270fc:	f008 ffb2 	bl	30064 <ble_hs_misc_conn_chan_find_reqd>
                                         &chan);
    if (rc != 0) {
   27100:	b140      	cbz	r0, 27114 <ble_att_tx+0x34>
   27102:	4605      	mov	r5, r0
        os_mbuf_free_chain(txom);
   27104:	4620      	mov	r0, r4
   27106:	f7f2 fa62 	bl	195ce <os_mbuf_free_chain>
    } else {
        ble_att_truncate_to_mtu(chan, txom);
        rc = ble_l2cap_tx(conn, chan, txom);
    }

    ble_hs_unlock();
   2710a:	f006 ff45 	bl	2df98 <ble_hs_unlock>

    return rc;
}
   2710e:	4628      	mov	r0, r5
   27110:	b003      	add	sp, #12
   27112:	bd30      	pop	{r4, r5, pc}
        ble_att_truncate_to_mtu(chan, txom);
   27114:	4621      	mov	r1, r4
   27116:	9801      	ldr	r0, [sp, #4]
   27118:	f7ff fbb7 	bl	2688a <ble_att_truncate_to_mtu>
        rc = ble_l2cap_tx(conn, chan, txom);
   2711c:	4622      	mov	r2, r4
   2711e:	9901      	ldr	r1, [sp, #4]
   27120:	9800      	ldr	r0, [sp, #0]
   27122:	f009 fc19 	bl	30958 <ble_l2cap_tx>
   27126:	4605      	mov	r5, r0
   27128:	e7ef      	b.n	2710a <ble_att_tx+0x2a>
	...

0002712c <ble_att_svr_next_id>:
static uint16_t
ble_att_svr_next_id(void)
{
    /* Rollover is fatal. */
    BLE_HS_DBG_ASSERT(ble_att_svr_id != UINT16_MAX);
    return ++ble_att_svr_id;
   2712c:	4b02      	ldr	r3, [pc, #8]	; (27138 <ble_att_svr_next_id+0xc>)
   2712e:	8818      	ldrh	r0, [r3, #0]
   27130:	3001      	adds	r0, #1
   27132:	b280      	uxth	r0, r0
   27134:	8018      	strh	r0, [r3, #0]
}
   27136:	4770      	bx	lr
   27138:	10004bcc 	.word	0x10004bcc

0002713c <ble_att_svr_prep_find_prev>:
{
    struct ble_att_prep_entry *entry;
    struct ble_att_prep_entry *prev;

    prev = NULL;
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   2713c:	6803      	ldr	r3, [r0, #0]
    prev = NULL;
   2713e:	2000      	movs	r0, #0
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   27140:	b16b      	cbz	r3, 2715e <ble_att_svr_prep_find_prev+0x22>
{
   27142:	b410      	push	{r4}
   27144:	e002      	b.n	2714c <ble_att_svr_prep_find_prev+0x10>

        if (entry->bape_handle == handle && entry->bape_offset > offset) {
            break;
        }

        prev = entry;
   27146:	4618      	mov	r0, r3
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   27148:	681b      	ldr	r3, [r3, #0]
   2714a:	b133      	cbz	r3, 2715a <ble_att_svr_prep_find_prev+0x1e>
        if (entry->bape_handle > handle) {
   2714c:	889c      	ldrh	r4, [r3, #4]
   2714e:	428c      	cmp	r4, r1
   27150:	d803      	bhi.n	2715a <ble_att_svr_prep_find_prev+0x1e>
        if (entry->bape_handle == handle && entry->bape_offset > offset) {
   27152:	d1f8      	bne.n	27146 <ble_att_svr_prep_find_prev+0xa>
   27154:	88dc      	ldrh	r4, [r3, #6]
   27156:	4294      	cmp	r4, r2
   27158:	d9f5      	bls.n	27146 <ble_att_svr_prep_find_prev+0xa>
    }

    return prev;
}
   2715a:	bc10      	pop	{r4}
   2715c:	4770      	bx	lr
   2715e:	4770      	bx	lr

00027160 <ble_att_svr_prep_validate>:
    struct ble_att_prep_entry *entry;
    struct ble_att_prep_entry *prev;
    int cur_len;

    prev = NULL;
    SLIST_FOREACH(entry, prep_list, bape_next) {
   27160:	6803      	ldr	r3, [r0, #0]
    prev = NULL;
   27162:	2200      	movs	r2, #0
    SLIST_FOREACH(entry, prep_list, bape_next) {
   27164:	b343      	cbz	r3, 271b8 <ble_att_svr_prep_validate+0x58>
{
   27166:	b410      	push	{r4}
   27168:	e00b      	b.n	27182 <ble_att_svr_prep_validate+0x22>
        if (prev == NULL || prev->bape_handle != entry->bape_handle) {
            /* Ensure attribute write starts at offset 0. */
            if (entry->bape_offset != 0) {
   2716a:	88da      	ldrh	r2, [r3, #6]
   2716c:	b9ca      	cbnz	r2, 271a2 <ble_att_svr_prep_validate+0x42>
                *err_handle = entry->bape_handle;
                return BLE_ATT_ERR_INVALID_OFFSET;
            }
        }

        cur_len = entry->bape_offset + OS_MBUF_PKTLEN(entry->bape_value);
   2716e:	88da      	ldrh	r2, [r3, #6]
   27170:	6898      	ldr	r0, [r3, #8]
   27172:	8a00      	ldrh	r0, [r0, #16]
   27174:	4402      	add	r2, r0
        if (cur_len > BLE_ATT_ATTR_MAX_LEN) {
   27176:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   2717a:	dc16      	bgt.n	271aa <ble_att_svr_prep_validate+0x4a>
            *err_handle = entry->bape_handle;
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
        }

        prev = entry;
   2717c:	461a      	mov	r2, r3
    SLIST_FOREACH(entry, prep_list, bape_next) {
   2717e:	681b      	ldr	r3, [r3, #0]
   27180:	b1bb      	cbz	r3, 271b2 <ble_att_svr_prep_validate+0x52>
        if (prev == NULL || prev->bape_handle != entry->bape_handle) {
   27182:	2a00      	cmp	r2, #0
   27184:	d0f1      	beq.n	2716a <ble_att_svr_prep_validate+0xa>
   27186:	8894      	ldrh	r4, [r2, #4]
   27188:	8898      	ldrh	r0, [r3, #4]
   2718a:	4284      	cmp	r4, r0
   2718c:	d1ed      	bne.n	2716a <ble_att_svr_prep_validate+0xa>
            if (prev->bape_offset + OS_MBUF_PKTLEN(prev->bape_value) !=
   2718e:	88d4      	ldrh	r4, [r2, #6]
   27190:	6892      	ldr	r2, [r2, #8]
   27192:	8a12      	ldrh	r2, [r2, #16]
   27194:	4422      	add	r2, r4
                entry->bape_offset) {
   27196:	88dc      	ldrh	r4, [r3, #6]
            if (prev->bape_offset + OS_MBUF_PKTLEN(prev->bape_value) !=
   27198:	42a2      	cmp	r2, r4
   2719a:	d0e8      	beq.n	2716e <ble_att_svr_prep_validate+0xe>
                *err_handle = entry->bape_handle;
   2719c:	8008      	strh	r0, [r1, #0]
                return BLE_ATT_ERR_INVALID_OFFSET;
   2719e:	2007      	movs	r0, #7
   271a0:	e008      	b.n	271b4 <ble_att_svr_prep_validate+0x54>
                *err_handle = entry->bape_handle;
   271a2:	889b      	ldrh	r3, [r3, #4]
   271a4:	800b      	strh	r3, [r1, #0]
                return BLE_ATT_ERR_INVALID_OFFSET;
   271a6:	2007      	movs	r0, #7
   271a8:	e004      	b.n	271b4 <ble_att_svr_prep_validate+0x54>
            *err_handle = entry->bape_handle;
   271aa:	889b      	ldrh	r3, [r3, #4]
   271ac:	800b      	strh	r3, [r1, #0]
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   271ae:	200d      	movs	r0, #13
   271b0:	e000      	b.n	271b4 <ble_att_svr_prep_validate+0x54>
    }

    return 0;
   271b2:	2000      	movs	r0, #0
}
   271b4:	bc10      	pop	{r4}
   271b6:	4770      	bx	lr
    return 0;
   271b8:	2000      	movs	r0, #0
}
   271ba:	4770      	bx	lr

000271bc <ble_att_svr_move_entries>:

static void
ble_att_svr_move_entries(struct ble_att_svr_entry_list *src,
                         struct ble_att_svr_entry_list *dst,
                         uint16_t start_handle, uint16_t end_handle)
{
   271bc:	b4f0      	push	{r4, r5, r6, r7}
    struct ble_att_svr_entry *remove;
    struct ble_att_svr_entry *insert;

    /* Find first matching element to move */
    remove = NULL;
    entry = STAILQ_FIRST(src);
   271be:	6804      	ldr	r4, [r0, #0]
    remove = NULL;
   271c0:	2500      	movs	r5, #0
    while (entry && entry->ha_handle_id < start_handle) {
   271c2:	b12c      	cbz	r4, 271d0 <ble_att_svr_move_entries+0x14>
   271c4:	8966      	ldrh	r6, [r4, #10]
   271c6:	4296      	cmp	r6, r2
   271c8:	d202      	bcs.n	271d0 <ble_att_svr_move_entries+0x14>
        remove = entry;
   271ca:	4625      	mov	r5, r4
        entry = STAILQ_NEXT(entry, ha_next);
   271cc:	6824      	ldr	r4, [r4, #0]
   271ce:	e7f8      	b.n	271c2 <ble_att_svr_move_entries+0x6>
    }

    /* Nothing to remove? */
    if (!entry) {
   271d0:	2c00      	cmp	r4, #0
   271d2:	d032      	beq.n	2723a <ble_att_svr_move_entries+0x7e>
        return;
    }

    /* Find element after which we'll put moved elements */
    prev = NULL;
    insert = STAILQ_FIRST(dst);
   271d4:	680e      	ldr	r6, [r1, #0]
    prev = NULL;
   271d6:	2700      	movs	r7, #0
    while (insert && insert->ha_handle_id < start_handle) {
   271d8:	b1de      	cbz	r6, 27212 <ble_att_svr_move_entries+0x56>
   271da:	f8b6 c00a 	ldrh.w	ip, [r6, #10]
   271de:	4594      	cmp	ip, r2
   271e0:	d217      	bcs.n	27212 <ble_att_svr_move_entries+0x56>
        prev = insert;
   271e2:	4637      	mov	r7, r6
        insert = STAILQ_NEXT(insert, ha_next);
   271e4:	6836      	ldr	r6, [r6, #0]
   271e6:	e7f7      	b.n	271d8 <ble_att_svr_move_entries+0x1c>

    /* Move elements */
    while (entry && entry->ha_handle_id <= end_handle) {
        /* Remove either from head or after prev (which is current one) */
        if (remove == NULL) {
            STAILQ_REMOVE_HEAD(src, ha_next);
   271e8:	6802      	ldr	r2, [r0, #0]
   271ea:	6812      	ldr	r2, [r2, #0]
   271ec:	6002      	str	r2, [r0, #0]
   271ee:	b9da      	cbnz	r2, 27228 <ble_att_svr_move_entries+0x6c>
   271f0:	6040      	str	r0, [r0, #4]
   271f2:	e019      	b.n	27228 <ble_att_svr_move_entries+0x6c>
        } else {
            STAILQ_REMOVE_AFTER(src, remove, ha_next);
   271f4:	6045      	str	r5, [r0, #4]
   271f6:	e017      	b.n	27228 <ble_att_svr_move_entries+0x6c>
        }

        /* Insert current element */
        if (insert == NULL) {
            STAILQ_INSERT_HEAD(dst, entry, ha_next);
   271f8:	680a      	ldr	r2, [r1, #0]
   271fa:	6022      	str	r2, [r4, #0]
   271fc:	b10a      	cbz	r2, 27202 <ble_att_svr_move_entries+0x46>
   271fe:	600c      	str	r4, [r1, #0]
            insert = STAILQ_FIRST(dst);
   27200:	e003      	b.n	2720a <ble_att_svr_move_entries+0x4e>
            STAILQ_INSERT_HEAD(dst, entry, ha_next);
   27202:	604c      	str	r4, [r1, #4]
   27204:	e7fb      	b.n	271fe <ble_att_svr_move_entries+0x42>
        } else {
            STAILQ_INSERT_AFTER(dst, insert, entry, ha_next);
   27206:	604c      	str	r4, [r1, #4]
   27208:	603c      	str	r4, [r7, #0]
            insert = entry;
        }

        /* Calculate next candidate to remove */
        if (remove == NULL) {
   2720a:	b1a5      	cbz	r5, 27236 <ble_att_svr_move_entries+0x7a>
            entry = STAILQ_FIRST(src);
        } else {
            entry = STAILQ_NEXT(remove, ha_next);
   2720c:	682a      	ldr	r2, [r5, #0]
        insert = STAILQ_NEXT(insert, ha_next);
   2720e:	4627      	mov	r7, r4
   27210:	4614      	mov	r4, r2
    while (entry && entry->ha_handle_id <= end_handle) {
   27212:	b194      	cbz	r4, 2723a <ble_att_svr_move_entries+0x7e>
   27214:	8962      	ldrh	r2, [r4, #10]
   27216:	429a      	cmp	r2, r3
   27218:	d80f      	bhi.n	2723a <ble_att_svr_move_entries+0x7e>
        if (remove == NULL) {
   2721a:	2d00      	cmp	r5, #0
   2721c:	d0e4      	beq.n	271e8 <ble_att_svr_move_entries+0x2c>
            STAILQ_REMOVE_AFTER(src, remove, ha_next);
   2721e:	682a      	ldr	r2, [r5, #0]
   27220:	6812      	ldr	r2, [r2, #0]
   27222:	602a      	str	r2, [r5, #0]
   27224:	2a00      	cmp	r2, #0
   27226:	d0e5      	beq.n	271f4 <ble_att_svr_move_entries+0x38>
        if (insert == NULL) {
   27228:	2f00      	cmp	r7, #0
   2722a:	d0e5      	beq.n	271f8 <ble_att_svr_move_entries+0x3c>
            STAILQ_INSERT_AFTER(dst, insert, entry, ha_next);
   2722c:	683a      	ldr	r2, [r7, #0]
   2722e:	6022      	str	r2, [r4, #0]
   27230:	2a00      	cmp	r2, #0
   27232:	d1e9      	bne.n	27208 <ble_att_svr_move_entries+0x4c>
   27234:	e7e7      	b.n	27206 <ble_att_svr_move_entries+0x4a>
            entry = STAILQ_FIRST(src);
   27236:	6802      	ldr	r2, [r0, #0]
   27238:	e7e9      	b.n	2720e <ble_att_svr_move_entries+0x52>
        }
    }
}
   2723a:	bcf0      	pop	{r4, r5, r6, r7}
   2723c:	4770      	bx	lr
	...

00027240 <ble_att_svr_entry_alloc>:
{
   27240:	b508      	push	{r3, lr}
    entry = os_memblock_get(&ble_att_svr_entry_pool);
   27242:	4806      	ldr	r0, [pc, #24]	; (2725c <ble_att_svr_entry_alloc+0x1c>)
   27244:	f7f2 fe02 	bl	19e4c <os_memblock_get>
    if (entry != NULL) {
   27248:	4603      	mov	r3, r0
   2724a:	b128      	cbz	r0, 27258 <ble_att_svr_entry_alloc+0x18>
        memset(entry, 0, sizeof *entry);
   2724c:	2200      	movs	r2, #0
   2724e:	6002      	str	r2, [r0, #0]
   27250:	6042      	str	r2, [r0, #4]
   27252:	6082      	str	r2, [r0, #8]
   27254:	60c2      	str	r2, [r0, #12]
   27256:	6102      	str	r2, [r0, #16]
}
   27258:	4618      	mov	r0, r3
   2725a:	bd08      	pop	{r3, pc}
   2725c:	10004ba8 	.word	0x10004ba8

00027260 <ble_att_svr_get_sec_state>:
{
   27260:	b538      	push	{r3, r4, r5, lr}
   27262:	4605      	mov	r5, r0
   27264:	460c      	mov	r4, r1
    ble_hs_lock();
   27266:	f006 fe93 	bl	2df90 <ble_hs_lock>
    conn = ble_hs_conn_find_assert(conn_handle);
   2726a:	4628      	mov	r0, r5
   2726c:	f007 ff2c 	bl	2f0c8 <ble_hs_conn_find_assert>
    *out_sec_state = conn->bhc_sec_state;
   27270:	6d83      	ldr	r3, [r0, #88]	; 0x58
   27272:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   27274:	f006 fe90 	bl	2df98 <ble_hs_unlock>
}
   27278:	bd38      	pop	{r3, r4, r5, pc}

0002727a <ble_att_svr_check_perms>:
{
   2727a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2727e:	b0a6      	sub	sp, #152	; 0x98
   27280:	4605      	mov	r5, r0
   27282:	4614      	mov	r4, r2
   27284:	461e      	mov	r6, r3
    if (is_read) {
   27286:	b389      	cbz	r1, 272ec <ble_att_svr_check_perms+0x72>
        if (!(entry->ha_flags & BLE_ATT_F_READ)) {
   27288:	7a11      	ldrb	r1, [r2, #8]
   2728a:	f011 0f01 	tst.w	r1, #1
   2728e:	d029      	beq.n	272e4 <ble_att_svr_check_perms+0x6a>
        enc = entry->ha_flags & BLE_ATT_F_READ_ENC;
   27290:	f001 0704 	and.w	r7, r1, #4
        authen = entry->ha_flags & BLE_ATT_F_READ_AUTHEN;
   27294:	f001 0808 	and.w	r8, r1, #8
        author = entry->ha_flags & BLE_ATT_F_READ_AUTHOR;
   27298:	f001 0010 	and.w	r0, r1, #16
    if (!enc && !authen && !author) {
   2729c:	b91f      	cbnz	r7, 272a6 <ble_att_svr_check_perms+0x2c>
   2729e:	f1b8 0f00 	cmp.w	r8, #0
   272a2:	d100      	bne.n	272a6 <ble_att_svr_check_perms+0x2c>
   272a4:	b1d8      	cbz	r0, 272de <ble_att_svr_check_perms+0x64>
    ble_att_svr_get_sec_state(conn_handle, &sec_state);
   272a6:	a925      	add	r1, sp, #148	; 0x94
   272a8:	4628      	mov	r0, r5
   272aa:	f7ff ffd9 	bl	27260 <ble_att_svr_get_sec_state>
    if ((enc || authen) && !sec_state.encrypted) {
   272ae:	b917      	cbnz	r7, 272b6 <ble_att_svr_check_perms+0x3c>
   272b0:	f1b8 0f00 	cmp.w	r8, #0
   272b4:	d004      	beq.n	272c0 <ble_att_svr_check_perms+0x46>
   272b6:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   272ba:	f013 0f01 	tst.w	r3, #1
   272be:	d024      	beq.n	2730a <ble_att_svr_check_perms+0x90>
    if (authen && !sec_state.authenticated) {
   272c0:	f1b8 0f00 	cmp.w	r8, #0
   272c4:	d004      	beq.n	272d0 <ble_att_svr_check_perms+0x56>
   272c6:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   272ca:	f013 0f02 	tst.w	r3, #2
   272ce:	d050      	beq.n	27372 <ble_att_svr_check_perms+0xf8>
    if (entry->ha_min_key_size > sec_state.key_size) {
   272d0:	7a63      	ldrb	r3, [r4, #9]
   272d2:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
   272d6:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
   272da:	d84f      	bhi.n	2737c <ble_att_svr_check_perms+0x102>
    return 0;
   272dc:	2000      	movs	r0, #0
}
   272de:	b026      	add	sp, #152	; 0x98
   272e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            *out_att_err = BLE_ATT_ERR_READ_NOT_PERMITTED;
   272e4:	2302      	movs	r3, #2
   272e6:	7033      	strb	r3, [r6, #0]
            return BLE_HS_EREJECT;
   272e8:	2010      	movs	r0, #16
   272ea:	e7f8      	b.n	272de <ble_att_svr_check_perms+0x64>
        if (!(entry->ha_flags & BLE_ATT_F_WRITE)) {
   272ec:	7a11      	ldrb	r1, [r2, #8]
   272ee:	f011 0f02 	tst.w	r1, #2
   272f2:	d006      	beq.n	27302 <ble_att_svr_check_perms+0x88>
        enc = entry->ha_flags & BLE_ATT_F_WRITE_ENC;
   272f4:	f001 0720 	and.w	r7, r1, #32
        authen = entry->ha_flags & BLE_ATT_F_WRITE_AUTHEN;
   272f8:	f001 0840 	and.w	r8, r1, #64	; 0x40
        author = entry->ha_flags & BLE_ATT_F_WRITE_AUTHOR;
   272fc:	f001 0080 	and.w	r0, r1, #128	; 0x80
   27300:	e7cc      	b.n	2729c <ble_att_svr_check_perms+0x22>
            *out_att_err = BLE_ATT_ERR_WRITE_NOT_PERMITTED;
   27302:	2303      	movs	r3, #3
   27304:	7033      	strb	r3, [r6, #0]
            return BLE_HS_EREJECT;
   27306:	2010      	movs	r0, #16
   27308:	e7e9      	b.n	272de <ble_att_svr_check_perms+0x64>
        ble_hs_lock();
   2730a:	f006 fe41 	bl	2df90 <ble_hs_lock>
        conn = ble_hs_conn_find(conn_handle);
   2730e:	4628      	mov	r0, r5
   27310:	f007 fec2 	bl	2f098 <ble_hs_conn_find>
        if (conn != NULL) {
   27314:	b1a8      	cbz	r0, 27342 <ble_att_svr_check_perms+0xc8>
            ble_hs_conn_addrs(conn, &addrs);
   27316:	a901      	add	r1, sp, #4
   27318:	f007 feee 	bl	2f0f8 <ble_hs_conn_addrs>
            memset(&key_sec, 0, sizeof key_sec);
   2731c:	2300      	movs	r3, #0
   2731e:	9309      	str	r3, [sp, #36]	; 0x24
   27320:	930a      	str	r3, [sp, #40]	; 0x28
   27322:	930b      	str	r3, [sp, #44]	; 0x2c
   27324:	930c      	str	r3, [sp, #48]	; 0x30
   27326:	930d      	str	r3, [sp, #52]	; 0x34
   27328:	930e      	str	r3, [sp, #56]	; 0x38
   2732a:	930f      	str	r3, [sp, #60]	; 0x3c
            key_sec.peer_addr = addrs.peer_id_addr;
   2732c:	f8dd 000b 	ldr.w	r0, [sp, #11]
   27330:	9008      	str	r0, [sp, #32]
   27332:	f8bd 200f 	ldrh.w	r2, [sp, #15]
   27336:	f89d 3011 	ldrb.w	r3, [sp, #17]
   2733a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   2733e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        ble_hs_unlock();
   27342:	f006 fe29 	bl	2df98 <ble_hs_unlock>
        rc = ble_store_read_peer_sec(&key_sec, &value_sec);
   27346:	a910      	add	r1, sp, #64	; 0x40
   27348:	a808      	add	r0, sp, #32
   2734a:	f009 fefd 	bl	31148 <ble_store_read_peer_sec>
        if (rc == 0 && value_sec.ltk_present) {
   2734e:	b938      	cbnz	r0, 27360 <ble_att_svr_check_perms+0xe6>
   27350:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   27354:	f013 0f01 	tst.w	r3, #1
   27358:	d002      	beq.n	27360 <ble_att_svr_check_perms+0xe6>
            *out_att_err = BLE_ATT_ERR_INSUFFICIENT_ENC;
   2735a:	230f      	movs	r3, #15
   2735c:	7033      	strb	r3, [r6, #0]
   2735e:	e001      	b.n	27364 <ble_att_svr_check_perms+0xea>
            *out_att_err = BLE_ATT_ERR_INSUFFICIENT_AUTHEN;
   27360:	2305      	movs	r3, #5
   27362:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ATT_ERR(*out_att_err);
   27364:	7830      	ldrb	r0, [r6, #0]
   27366:	b110      	cbz	r0, 2736e <ble_att_svr_check_perms+0xf4>
   27368:	f500 7080 	add.w	r0, r0, #256	; 0x100
   2736c:	e7b7      	b.n	272de <ble_att_svr_check_perms+0x64>
   2736e:	2000      	movs	r0, #0
   27370:	e7b5      	b.n	272de <ble_att_svr_check_perms+0x64>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_AUTHEN;
   27372:	2305      	movs	r3, #5
   27374:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ATT_ERR(*out_att_err);
   27376:	f240 1005 	movw	r0, #261	; 0x105
   2737a:	e7b0      	b.n	272de <ble_att_svr_check_perms+0x64>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_KEY_SZ;
   2737c:	230c      	movs	r3, #12
   2737e:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ATT_ERR(*out_att_err);
   27380:	f44f 7086 	mov.w	r0, #268	; 0x10c
   27384:	e7ab      	b.n	272de <ble_att_svr_check_perms+0x64>

00027386 <ble_att_svr_read>:
{
   27386:	b5f0      	push	{r4, r5, r6, r7, lr}
   27388:	b087      	sub	sp, #28
   2738a:	4606      	mov	r6, r0
   2738c:	460c      	mov	r4, r1
   2738e:	4615      	mov	r5, r2
   27390:	9303      	str	r3, [sp, #12]
    att_err = 0;    /* Silence gcc warning. */
   27392:	2300      	movs	r3, #0
   27394:	f88d 3017 	strb.w	r3, [sp, #23]
    if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   27398:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2739c:	4298      	cmp	r0, r3
   2739e:	d10e      	bne.n	273be <ble_att_svr_read+0x38>
    rc = entry->ha_cb(conn_handle, entry->ha_handle_id,
   273a0:	68e7      	ldr	r7, [r4, #12]
   273a2:	6923      	ldr	r3, [r4, #16]
   273a4:	9301      	str	r3, [sp, #4]
   273a6:	ab03      	add	r3, sp, #12
   273a8:	9300      	str	r3, [sp, #0]
   273aa:	462b      	mov	r3, r5
   273ac:	2201      	movs	r2, #1
   273ae:	8961      	ldrh	r1, [r4, #10]
   273b0:	4630      	mov	r0, r6
   273b2:	47b8      	blx	r7
    if (rc != 0) {
   273b4:	4603      	mov	r3, r0
   273b6:	b960      	cbnz	r0, 273d2 <ble_att_svr_read+0x4c>
}
   273b8:	4618      	mov	r0, r3
   273ba:	b007      	add	sp, #28
   273bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = ble_att_svr_check_perms(conn_handle, 1, entry, &att_err);
   273be:	f10d 0317 	add.w	r3, sp, #23
   273c2:	460a      	mov	r2, r1
   273c4:	2101      	movs	r1, #1
   273c6:	f7ff ff58 	bl	2727a <ble_att_svr_check_perms>
        if (rc != 0) {
   273ca:	4603      	mov	r3, r0
   273cc:	2800      	cmp	r0, #0
   273ce:	d0e7      	beq.n	273a0 <ble_att_svr_read+0x1a>
   273d0:	e002      	b.n	273d8 <ble_att_svr_read+0x52>
        att_err = rc;
   273d2:	f88d 0017 	strb.w	r0, [sp, #23]
        rc = BLE_HS_EAPP;
   273d6:	2309      	movs	r3, #9
    if (out_att_err != NULL) {
   273d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   273da:	2a00      	cmp	r2, #0
   273dc:	d0ec      	beq.n	273b8 <ble_att_svr_read+0x32>
        *out_att_err = att_err;
   273de:	f89d 2017 	ldrb.w	r2, [sp, #23]
   273e2:	990c      	ldr	r1, [sp, #48]	; 0x30
   273e4:	700a      	strb	r2, [r1, #0]
   273e6:	e7e7      	b.n	273b8 <ble_att_svr_read+0x32>

000273e8 <ble_att_svr_write>:
{
   273e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   273ec:	b085      	sub	sp, #20
   273ee:	4605      	mov	r5, r0
   273f0:	460c      	mov	r4, r1
   273f2:	4616      	mov	r6, r2
   273f4:	4698      	mov	r8, r3
   273f6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    uint8_t att_err = 0;
   273f8:	2200      	movs	r2, #0
   273fa:	f88d 200f 	strb.w	r2, [sp, #15]
    if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   273fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   27402:	4290      	cmp	r0, r2
   27404:	d114      	bne.n	27430 <ble_att_svr_write+0x48>
    rc = entry->ha_cb(conn_handle, entry->ha_handle_id,
   27406:	f8d4 900c 	ldr.w	r9, [r4, #12]
   2740a:	6923      	ldr	r3, [r4, #16]
   2740c:	9301      	str	r3, [sp, #4]
   2740e:	f8cd 8000 	str.w	r8, [sp]
   27412:	4633      	mov	r3, r6
   27414:	2202      	movs	r2, #2
   27416:	8961      	ldrh	r1, [r4, #10]
   27418:	4628      	mov	r0, r5
   2741a:	47c8      	blx	r9
    if (rc != 0) {
   2741c:	4602      	mov	r2, r0
   2741e:	b988      	cbnz	r0, 27444 <ble_att_svr_write+0x5c>
    if (out_att_err != NULL) {
   27420:	b117      	cbz	r7, 27428 <ble_att_svr_write+0x40>
        *out_att_err = att_err;
   27422:	f89d 300f 	ldrb.w	r3, [sp, #15]
   27426:	703b      	strb	r3, [r7, #0]
}
   27428:	4610      	mov	r0, r2
   2742a:	b005      	add	sp, #20
   2742c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rc = ble_att_svr_check_perms(conn_handle, 0, entry, &att_err);
   27430:	f10d 030f 	add.w	r3, sp, #15
   27434:	460a      	mov	r2, r1
   27436:	2100      	movs	r1, #0
   27438:	f7ff ff1f 	bl	2727a <ble_att_svr_check_perms>
        if (rc != 0) {
   2743c:	4602      	mov	r2, r0
   2743e:	2800      	cmp	r0, #0
   27440:	d0e1      	beq.n	27406 <ble_att_svr_write+0x1e>
   27442:	e7ed      	b.n	27420 <ble_att_svr_write+0x38>
        att_err = rc;
   27444:	f88d 000f 	strb.w	r0, [sp, #15]
        rc = BLE_HS_EAPP;
   27448:	2209      	movs	r2, #9
        goto done;
   2744a:	e7e9      	b.n	27420 <ble_att_svr_write+0x38>

0002744c <ble_att_svr_pullup_req_base>:
{
   2744c:	b510      	push	{r4, lr}
   2744e:	4614      	mov	r4, r2
    rc = ble_hs_mbuf_pullup_base(om, base_len);
   27450:	f008 fdc4 	bl	2ffdc <ble_hs_mbuf_pullup_base>
    if (rc == BLE_HS_ENOMEM) {
   27454:	2806      	cmp	r0, #6
   27456:	d003      	beq.n	27460 <ble_att_svr_pullup_req_base+0x14>
        att_err = 0;
   27458:	2300      	movs	r3, #0
    if (out_att_err != NULL) {
   2745a:	b104      	cbz	r4, 2745e <ble_att_svr_pullup_req_base+0x12>
        *out_att_err = att_err;
   2745c:	7023      	strb	r3, [r4, #0]
}
   2745e:	bd10      	pop	{r4, pc}
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   27460:	2311      	movs	r3, #17
   27462:	e7fa      	b.n	2745a <ble_att_svr_pullup_req_base+0xe>

00027464 <ble_att_svr_build_mtu_rsp>:
{
   27464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27468:	b083      	sub	sp, #12
   2746a:	4606      	mov	r6, r0
   2746c:	460f      	mov	r7, r1
   2746e:	4615      	mov	r5, r2
   27470:	461c      	mov	r4, r3
   27472:	f04f 0800 	mov.w	r8, #0
    *att_err = 0; /* Silence unnecessary warning. */
   27476:	f883 8000 	strb.w	r8, [r3]
    ble_hs_lock();
   2747a:	f006 fd89 	bl	2df90 <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, NULL, &chan);
   2747e:	aa01      	add	r2, sp, #4
   27480:	4641      	mov	r1, r8
   27482:	4630      	mov	r0, r6
   27484:	f7ff f8e9 	bl	2665a <ble_att_conn_chan_find>
    if (rc == 0) {
   27488:	4681      	mov	r9, r0
   2748a:	b910      	cbnz	r0, 27492 <ble_att_svr_build_mtu_rsp+0x2e>
        mtu = chan->my_mtu;
   2748c:	9b01      	ldr	r3, [sp, #4]
   2748e:	f8b3 800a 	ldrh.w	r8, [r3, #10]
    ble_hs_unlock();
   27492:	f006 fd81 	bl	2df98 <ble_hs_unlock>
    if (rc != 0) {
   27496:	f1b9 0f00 	cmp.w	r9, #0
   2749a:	d005      	beq.n	274a8 <ble_att_svr_build_mtu_rsp+0x44>
    txom = NULL;
   2749c:	2600      	movs	r6, #0
    *out_txom = txom;
   2749e:	602e      	str	r6, [r5, #0]
}
   274a0:	4648      	mov	r0, r9
   274a2:	b003      	add	sp, #12
   274a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    txom = *rxom;
   274a8:	683e      	ldr	r6, [r7, #0]
    *rxom = NULL;
   274aa:	2300      	movs	r3, #0
   274ac:	603b      	str	r3, [r7, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   274ae:	8a31      	ldrh	r1, [r6, #16]
   274b0:	4630      	mov	r0, r6
   274b2:	f7f2 f95a 	bl	1976a <os_mbuf_adj>
    cmd = ble_att_cmd_prepare(BLE_ATT_OP_MTU_RSP, sizeof(*cmd), txom);
   274b6:	4632      	mov	r2, r6
   274b8:	2102      	movs	r1, #2
   274ba:	2003      	movs	r0, #3
   274bc:	f7ff fdef 	bl	2709e <ble_att_cmd_prepare>
    if (cmd == NULL) {
   274c0:	b110      	cbz	r0, 274c8 <ble_att_svr_build_mtu_rsp+0x64>
    cmd->bamc_mtu = htole16(mtu);
   274c2:	f8a0 8000 	strh.w	r8, [r0]
    rc = 0;
   274c6:	e7ea      	b.n	2749e <ble_att_svr_build_mtu_rsp+0x3a>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   274c8:	2311      	movs	r3, #17
   274ca:	7023      	strb	r3, [r4, #0]
        rc = BLE_HS_ENOMEM;
   274cc:	f04f 0906 	mov.w	r9, #6
        goto done;
   274d0:	e7e5      	b.n	2749e <ble_att_svr_build_mtu_rsp+0x3a>

000274d2 <ble_att_svr_pkt>:
{
   274d2:	b570      	push	{r4, r5, r6, lr}
   274d4:	4606      	mov	r6, r0
   274d6:	460c      	mov	r4, r1
   274d8:	4615      	mov	r5, r2
    *out_txom = ble_hs_mbuf_l2cap_pkt();
   274da:	f008 fd4c 	bl	2ff76 <ble_hs_mbuf_l2cap_pkt>
   274de:	6020      	str	r0, [r4, #0]
    if (*out_txom != NULL) {
   274e0:	b108      	cbz	r0, 274e6 <ble_att_svr_pkt+0x14>
        return 0;
   274e2:	2000      	movs	r0, #0
}
   274e4:	bd70      	pop	{r4, r5, r6, pc}
    *out_txom = *rxom;
   274e6:	6833      	ldr	r3, [r6, #0]
   274e8:	6023      	str	r3, [r4, #0]
    *rxom = NULL;
   274ea:	2300      	movs	r3, #0
   274ec:	6033      	str	r3, [r6, #0]
    *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   274ee:	2311      	movs	r3, #17
   274f0:	702b      	strb	r3, [r5, #0]
    return BLE_HS_ENOMEM;
   274f2:	2006      	movs	r0, #6
   274f4:	e7f6      	b.n	274e4 <ble_att_svr_pkt+0x12>

000274f6 <ble_att_svr_build_write_rsp>:
{
   274f6:	b570      	push	{r4, r5, r6, lr}
   274f8:	b082      	sub	sp, #8
   274fa:	460c      	mov	r4, r1
   274fc:	4615      	mov	r5, r2
    rc = ble_att_svr_pkt(rxom, &txom, att_err);
   274fe:	a901      	add	r1, sp, #4
   27500:	f7ff ffe7 	bl	274d2 <ble_att_svr_pkt>
    if (rc != 0) {
   27504:	4606      	mov	r6, r0
   27506:	b120      	cbz	r0, 27512 <ble_att_svr_build_write_rsp+0x1c>
    *out_txom = txom;
   27508:	9b01      	ldr	r3, [sp, #4]
   2750a:	6023      	str	r3, [r4, #0]
}
   2750c:	4630      	mov	r0, r6
   2750e:	b002      	add	sp, #8
   27510:	bd70      	pop	{r4, r5, r6, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_WRITE_RSP, 0, txom) == NULL) {
   27512:	9a01      	ldr	r2, [sp, #4]
   27514:	2100      	movs	r1, #0
   27516:	2013      	movs	r0, #19
   27518:	f7ff fdc1 	bl	2709e <ble_att_cmd_prepare>
   2751c:	2800      	cmp	r0, #0
   2751e:	d1f3      	bne.n	27508 <ble_att_svr_build_write_rsp+0x12>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   27520:	2311      	movs	r3, #17
   27522:	702b      	strb	r3, [r5, #0]
        rc = BLE_HS_ENOMEM;
   27524:	2606      	movs	r6, #6
        goto done;
   27526:	e7ef      	b.n	27508 <ble_att_svr_build_write_rsp+0x12>

00027528 <ble_att_svr_build_indicate_rsp>:
{
   27528:	b570      	push	{r4, r5, r6, lr}
   2752a:	b082      	sub	sp, #8
   2752c:	460c      	mov	r4, r1
   2752e:	4615      	mov	r5, r2
    rc = ble_att_svr_pkt(rxom, &txom, out_att_err);
   27530:	a901      	add	r1, sp, #4
   27532:	f7ff ffce 	bl	274d2 <ble_att_svr_pkt>
    if (rc != 0) {
   27536:	4606      	mov	r6, r0
   27538:	b120      	cbz	r0, 27544 <ble_att_svr_build_indicate_rsp+0x1c>
    *out_txom = txom;
   2753a:	9b01      	ldr	r3, [sp, #4]
   2753c:	6023      	str	r3, [r4, #0]
}
   2753e:	4630      	mov	r0, r6
   27540:	b002      	add	sp, #8
   27542:	bd70      	pop	{r4, r5, r6, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_INDICATE_RSP, 0, txom) == NULL) {
   27544:	9a01      	ldr	r2, [sp, #4]
   27546:	2100      	movs	r1, #0
   27548:	201e      	movs	r0, #30
   2754a:	f7ff fda8 	bl	2709e <ble_att_cmd_prepare>
   2754e:	2800      	cmp	r0, #0
   27550:	d1f3      	bne.n	2753a <ble_att_svr_build_indicate_rsp+0x12>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   27552:	2311      	movs	r3, #17
   27554:	702b      	strb	r3, [r5, #0]
        rc = BLE_HS_ENOMEM;
   27556:	2606      	movs	r6, #6
        goto done;
   27558:	e7ef      	b.n	2753a <ble_att_svr_build_indicate_rsp+0x12>
	...

0002755c <ble_att_svr_fill_info>:
{
   2755c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27560:	4680      	mov	r8, r0
   27562:	460f      	mov	r7, r1
   27564:	4691      	mov	r9, r2
   27566:	469b      	mov	fp, r3
   27568:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    *format = 0;
   2756c:	2600      	movs	r6, #0
   2756e:	f88a 6000 	strb.w	r6, [sl]
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   27572:	4b20      	ldr	r3, [pc, #128]	; (275f4 <ble_att_svr_fill_info+0x98>)
   27574:	681c      	ldr	r4, [r3, #0]
   27576:	e021      	b.n	275bc <ble_att_svr_fill_info+0x60>
                if (*format == 0) {
   27578:	f89a 3000 	ldrb.w	r3, [sl]
   2757c:	b923      	cbnz	r3, 27588 <ble_att_svr_fill_info+0x2c>
                    *format = BLE_ATT_FIND_INFO_RSP_FORMAT_16BIT;
   2757e:	2301      	movs	r3, #1
   27580:	f88a 3000 	strb.w	r3, [sl]
                entry_sz = 4;
   27584:	2104      	movs	r1, #4
   27586:	e006      	b.n	27596 <ble_att_svr_fill_info+0x3a>
                } else if (*format != BLE_ATT_FIND_INFO_RSP_FORMAT_16BIT) {
   27588:	2b01      	cmp	r3, #1
   2758a:	d12a      	bne.n	275e2 <ble_att_svr_fill_info+0x86>
                entry_sz = 4;
   2758c:	2104      	movs	r1, #4
   2758e:	e002      	b.n	27596 <ble_att_svr_fill_info+0x3a>
                } else if (*format != BLE_ATT_FIND_INFO_RSP_FORMAT_128BIT) {
   27590:	2b02      	cmp	r3, #2
   27592:	d126      	bne.n	275e2 <ble_att_svr_fill_info+0x86>
                entry_sz = 18;
   27594:	2112      	movs	r1, #18
            if (OS_MBUF_PKTLEN(om) + entry_sz > mtu) {
   27596:	f8b9 3010 	ldrh.w	r3, [r9, #16]
   2759a:	440b      	add	r3, r1
   2759c:	455b      	cmp	r3, fp
   2759e:	dc20      	bgt.n	275e2 <ble_att_svr_fill_info+0x86>
            buf = os_mbuf_extend(om, entry_sz);
   275a0:	4648      	mov	r0, r9
   275a2:	f7f2 fa97 	bl	19ad4 <os_mbuf_extend>
            if (buf == NULL) {
   275a6:	4605      	mov	r5, r0
   275a8:	b1f8      	cbz	r0, 275ea <ble_att_svr_fill_info+0x8e>
            put_le16(buf + 0, ha->ha_handle_id);
   275aa:	8961      	ldrh	r1, [r4, #10]
   275ac:	f7f1 fc2e 	bl	18e0c <put_le16>
            ble_uuid_flat(ha->ha_uuid, buf + 2);
   275b0:	1ca9      	adds	r1, r5, #2
   275b2:	6860      	ldr	r0, [r4, #4]
   275b4:	f009 ffbe 	bl	31534 <ble_uuid_flat>
            num_entries++;
   275b8:	3601      	adds	r6, #1
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   275ba:	6824      	ldr	r4, [r4, #0]
   275bc:	b18c      	cbz	r4, 275e2 <ble_att_svr_fill_info+0x86>
        if (ha->ha_handle_id > end_handle) {
   275be:	8965      	ldrh	r5, [r4, #10]
   275c0:	42bd      	cmp	r5, r7
   275c2:	d80e      	bhi.n	275e2 <ble_att_svr_fill_info+0x86>
        if (ha->ha_handle_id >= start_handle) {
   275c4:	4545      	cmp	r5, r8
   275c6:	d3f8      	bcc.n	275ba <ble_att_svr_fill_info+0x5e>
            if (ha->ha_uuid->type == BLE_UUID_TYPE_16) {
   275c8:	6863      	ldr	r3, [r4, #4]
   275ca:	781b      	ldrb	r3, [r3, #0]
   275cc:	2b10      	cmp	r3, #16
   275ce:	d0d3      	beq.n	27578 <ble_att_svr_fill_info+0x1c>
                if (*format == 0) {
   275d0:	f89a 3000 	ldrb.w	r3, [sl]
   275d4:	2b00      	cmp	r3, #0
   275d6:	d1db      	bne.n	27590 <ble_att_svr_fill_info+0x34>
                    *format = BLE_ATT_FIND_INFO_RSP_FORMAT_128BIT;
   275d8:	2302      	movs	r3, #2
   275da:	f88a 3000 	strb.w	r3, [sl]
                entry_sz = 18;
   275de:	2112      	movs	r1, #18
   275e0:	e7d9      	b.n	27596 <ble_att_svr_fill_info+0x3a>
    if (rc == 0 && num_entries == 0) {
   275e2:	b126      	cbz	r6, 275ee <ble_att_svr_fill_info+0x92>
   275e4:	2000      	movs	r0, #0
}
   275e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                rc = BLE_HS_ENOMEM;
   275ea:	2006      	movs	r0, #6
        return rc;
   275ec:	e7fb      	b.n	275e6 <ble_att_svr_fill_info+0x8a>
        return BLE_HS_ENOENT;
   275ee:	2005      	movs	r0, #5
   275f0:	e7f9      	b.n	275e6 <ble_att_svr_fill_info+0x8a>
   275f2:	bf00      	nop
   275f4:	10004bd0 	.word	0x10004bd0

000275f8 <ble_att_svr_build_find_info_rsp>:
{
   275f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   275fc:	b082      	sub	sp, #8
   275fe:	4606      	mov	r6, r0
   27600:	460d      	mov	r5, r1
   27602:	4617      	mov	r7, r2
    txom = *rxom;
   27604:	681c      	ldr	r4, [r3, #0]
    *rxom = NULL;
   27606:	2100      	movs	r1, #0
   27608:	6019      	str	r1, [r3, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   2760a:	8a21      	ldrh	r1, [r4, #16]
   2760c:	4620      	mov	r0, r4
   2760e:	f7f2 f8ac 	bl	1976a <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_FIND_INFO_RSP, sizeof(*rsp), txom);
   27612:	4622      	mov	r2, r4
   27614:	2101      	movs	r1, #1
   27616:	2005      	movs	r0, #5
   27618:	f7ff fd41 	bl	2709e <ble_att_cmd_prepare>
    if (rsp == NULL) {
   2761c:	b188      	cbz	r0, 27642 <ble_att_svr_build_find_info_rsp+0x4a>
   2761e:	4680      	mov	r8, r0
    mtu = ble_att_mtu(conn_handle);
   27620:	4630      	mov	r0, r6
   27622:	f7ff f940 	bl	268a6 <ble_att_mtu>
   27626:	4603      	mov	r3, r0
    rc = ble_att_svr_fill_info(start_handle, end_handle, txom, mtu,
   27628:	f8cd 8000 	str.w	r8, [sp]
   2762c:	4622      	mov	r2, r4
   2762e:	4639      	mov	r1, r7
   27630:	4628      	mov	r0, r5
   27632:	f7ff ff93 	bl	2755c <ble_att_svr_fill_info>
    if (rc != 0) {
   27636:	b948      	cbnz	r0, 2764c <ble_att_svr_build_find_info_rsp+0x54>
    *out_txom = txom;
   27638:	9b08      	ldr	r3, [sp, #32]
   2763a:	601c      	str	r4, [r3, #0]
}
   2763c:	b002      	add	sp, #8
   2763e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   27642:	2311      	movs	r3, #17
   27644:	9a09      	ldr	r2, [sp, #36]	; 0x24
   27646:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   27648:	2006      	movs	r0, #6
        goto done;
   2764a:	e7f5      	b.n	27638 <ble_att_svr_build_find_info_rsp+0x40>
        *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   2764c:	230a      	movs	r3, #10
   2764e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   27650:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOENT;
   27652:	2005      	movs	r0, #5
        goto done;
   27654:	e7f0      	b.n	27638 <ble_att_svr_build_find_info_rsp+0x40>

00027656 <ble_att_svr_read_group_type_entry_write>:
{
   27656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2765a:	460c      	mov	r4, r1
   2765c:	4617      	mov	r7, r2
   2765e:	461e      	mov	r6, r3
   27660:	f8dd 8018 	ldr.w	r8, [sp, #24]
    if (service_uuid->type == BLE_UUID_TYPE_16) {
   27664:	f898 3000 	ldrb.w	r3, [r8]
   27668:	2b10      	cmp	r3, #16
   2766a:	d016      	beq.n	2769a <ble_att_svr_read_group_type_entry_write+0x44>
        len = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_128;
   2766c:	2114      	movs	r1, #20
    if (OS_MBUF_PKTLEN(om) + len > mtu) {
   2766e:	8a05      	ldrh	r5, [r0, #16]
   27670:	440d      	add	r5, r1
   27672:	42a5      	cmp	r5, r4
   27674:	dc13      	bgt.n	2769e <ble_att_svr_read_group_type_entry_write+0x48>
    buf = os_mbuf_extend(om, len);
   27676:	f7f2 fa2d 	bl	19ad4 <os_mbuf_extend>
    if (buf == NULL) {
   2767a:	4604      	mov	r4, r0
   2767c:	b188      	cbz	r0, 276a2 <ble_att_svr_read_group_type_entry_write+0x4c>
    put_le16(buf + 0, start_group_handle);
   2767e:	4639      	mov	r1, r7
   27680:	f7f1 fbc4 	bl	18e0c <put_le16>
    put_le16(buf + 2, end_group_handle);
   27684:	4631      	mov	r1, r6
   27686:	1ca0      	adds	r0, r4, #2
   27688:	f7f1 fbc0 	bl	18e0c <put_le16>
    ble_uuid_flat(service_uuid, buf + 4);
   2768c:	1d21      	adds	r1, r4, #4
   2768e:	4640      	mov	r0, r8
   27690:	f009 ff50 	bl	31534 <ble_uuid_flat>
    return 0;
   27694:	2000      	movs	r0, #0
}
   27696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        len = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_16;
   2769a:	2106      	movs	r1, #6
   2769c:	e7e7      	b.n	2766e <ble_att_svr_read_group_type_entry_write+0x18>
        return BLE_HS_EMSGSIZE;
   2769e:	2004      	movs	r0, #4
   276a0:	e7f9      	b.n	27696 <ble_att_svr_read_group_type_entry_write+0x40>
        return BLE_HS_ENOMEM;
   276a2:	2006      	movs	r0, #6
   276a4:	e7f7      	b.n	27696 <ble_att_svr_read_group_type_entry_write+0x40>

000276a6 <ble_att_svr_is_valid_find_group_type>:
{
   276a6:	b508      	push	{r3, lr}
    uuid16 = ble_uuid_u16(uuid);
   276a8:	f009 fee8 	bl	3147c <ble_uuid_u16>
    return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   276ac:	f5a0 5320 	sub.w	r3, r0, #10240	; 0x2800
   276b0:	b29b      	uxth	r3, r3
           uuid16 == BLE_ATT_UUID_SECONDARY_SERVICE ||
   276b2:	2b01      	cmp	r3, #1
   276b4:	d907      	bls.n	276c6 <ble_att_svr_is_valid_find_group_type+0x20>
   276b6:	f642 0303 	movw	r3, #10243	; 0x2803
   276ba:	4298      	cmp	r0, r3
   276bc:	d001      	beq.n	276c2 <ble_att_svr_is_valid_find_group_type+0x1c>
   276be:	2000      	movs	r0, #0
   276c0:	e002      	b.n	276c8 <ble_att_svr_is_valid_find_group_type+0x22>
   276c2:	2001      	movs	r0, #1
   276c4:	e000      	b.n	276c8 <ble_att_svr_is_valid_find_group_type+0x22>
   276c6:	2001      	movs	r0, #1
}
   276c8:	bd08      	pop	{r3, pc}

000276ca <ble_att_svr_is_valid_group_end>:
    if (uuid_group->type != BLE_UUID_TYPE_16) {
   276ca:	7803      	ldrb	r3, [r0, #0]
   276cc:	2b10      	cmp	r3, #16
   276ce:	d126      	bne.n	2771e <ble_att_svr_is_valid_group_end+0x54>
{
   276d0:	b510      	push	{r4, lr}
   276d2:	460c      	mov	r4, r1
    if (uuid->type != BLE_UUID_TYPE_16) {
   276d4:	780b      	ldrb	r3, [r1, #0]
   276d6:	2b10      	cmp	r3, #16
   276d8:	d001      	beq.n	276de <ble_att_svr_is_valid_group_end+0x14>
        return 0;
   276da:	2000      	movs	r0, #0
}
   276dc:	bd10      	pop	{r4, pc}
    switch (ble_uuid_u16(uuid_group)) {
   276de:	f009 fecd 	bl	3147c <ble_uuid_u16>
   276e2:	f642 0301 	movw	r3, #10241	; 0x2801
   276e6:	4298      	cmp	r0, r3
   276e8:	d907      	bls.n	276fa <ble_att_svr_is_valid_group_end+0x30>
   276ea:	f642 0303 	movw	r3, #10243	; 0x2803
   276ee:	4298      	cmp	r0, r3
   276f0:	d108      	bne.n	27704 <ble_att_svr_is_valid_group_end+0x3a>
        return ble_att_svr_is_valid_find_group_type(uuid);
   276f2:	4620      	mov	r0, r4
   276f4:	f7ff ffd7 	bl	276a6 <ble_att_svr_is_valid_find_group_type>
   276f8:	e7f0      	b.n	276dc <ble_att_svr_is_valid_group_end+0x12>
    switch (ble_uuid_u16(uuid_group)) {
   276fa:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
   276fe:	d203      	bcs.n	27708 <ble_att_svr_is_valid_group_end+0x3e>
   27700:	2001      	movs	r0, #1
   27702:	e7eb      	b.n	276dc <ble_att_svr_is_valid_group_end+0x12>
   27704:	2001      	movs	r0, #1
   27706:	e7e9      	b.n	276dc <ble_att_svr_is_valid_group_end+0x12>
        uuid16 = ble_uuid_u16(uuid);
   27708:	4620      	mov	r0, r4
   2770a:	f009 feb7 	bl	3147c <ble_uuid_u16>
        return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   2770e:	f5a0 5020 	sub.w	r0, r0, #10240	; 0x2800
   27712:	b280      	uxth	r0, r0
   27714:	2801      	cmp	r0, #1
   27716:	bf8c      	ite	hi
   27718:	2000      	movhi	r0, #0
   2771a:	2001      	movls	r0, #1
   2771c:	e7de      	b.n	276dc <ble_att_svr_is_valid_group_end+0x12>
        return 1;
   2771e:	2001      	movs	r0, #1
}
   27720:	4770      	bx	lr

00027722 <ble_att_svr_is_valid_read_group_type>:
{
   27722:	b508      	push	{r3, lr}
    uuid16 = ble_uuid_u16(uuid);
   27724:	f009 feaa 	bl	3147c <ble_uuid_u16>
    return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   27728:	f5a0 5020 	sub.w	r0, r0, #10240	; 0x2800
   2772c:	b280      	uxth	r0, r0
}
   2772e:	2801      	cmp	r0, #1
   27730:	bf8c      	ite	hi
   27732:	2000      	movhi	r0, #0
   27734:	2001      	movls	r0, #1
   27736:	bd08      	pop	{r3, pc}

00027738 <ble_att_svr_read_flat>:
{
   27738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2773c:	b082      	sub	sp, #8
   2773e:	4604      	mov	r4, r0
   27740:	460d      	mov	r5, r1
   27742:	4616      	mov	r6, r2
   27744:	4698      	mov	r8, r3
    om = ble_hs_mbuf_l2cap_pkt();
   27746:	f008 fc16 	bl	2ff76 <ble_hs_mbuf_l2cap_pkt>
    if (om == NULL) {
   2774a:	4607      	mov	r7, r0
   2774c:	b300      	cbz	r0, 27790 <ble_att_svr_read_flat+0x58>
    rc = ble_att_svr_read(conn_handle, entry, offset, om, out_att_err);
   2774e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27750:	9300      	str	r3, [sp, #0]
   27752:	4603      	mov	r3, r0
   27754:	4632      	mov	r2, r6
   27756:	4629      	mov	r1, r5
   27758:	4620      	mov	r0, r4
   2775a:	f7ff fe14 	bl	27386 <ble_att_svr_read>
    if (rc != 0) {
   2775e:	4604      	mov	r4, r0
   27760:	b950      	cbnz	r0, 27778 <ble_att_svr_read_flat+0x40>
    len = OS_MBUF_PKTLEN(om);
   27762:	8a3d      	ldrh	r5, [r7, #16]
    if (len > max_len) {
   27764:	4545      	cmp	r5, r8
   27766:	d80e      	bhi.n	27786 <ble_att_svr_read_flat+0x4e>
    rc = os_mbuf_copydata(om, 0, len, dst);
   27768:	9b08      	ldr	r3, [sp, #32]
   2776a:	462a      	mov	r2, r5
   2776c:	2100      	movs	r1, #0
   2776e:	4638      	mov	r0, r7
   27770:	f7f1 ffce 	bl	19710 <os_mbuf_copydata>
    *out_len = len;
   27774:	9b09      	ldr	r3, [sp, #36]	; 0x24
   27776:	801d      	strh	r5, [r3, #0]
    os_mbuf_free_chain(om);
   27778:	4638      	mov	r0, r7
   2777a:	f7f1 ff28 	bl	195ce <os_mbuf_free_chain>
}
   2777e:	4620      	mov	r0, r4
   27780:	b002      	add	sp, #8
   27782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *out_att_err = BLE_ATT_ERR_UNLIKELY;
   27786:	230e      	movs	r3, #14
   27788:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2778a:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_EMSGSIZE;
   2778c:	2404      	movs	r4, #4
        goto done;
   2778e:	e7f3      	b.n	27778 <ble_att_svr_read_flat+0x40>
        rc = BLE_HS_ENOMEM;
   27790:	2406      	movs	r4, #6
   27792:	e7f1      	b.n	27778 <ble_att_svr_read_flat+0x40>

00027794 <ble_att_svr_fill_type_value_entry>:
{
   27794:	b530      	push	{r4, r5, lr}
   27796:	b083      	sub	sp, #12
   27798:	4604      	mov	r4, r0
    rsp_sz = OS_MBUF_PKTHDR(om)->omp_len + 4;
   2779a:	8a00      	ldrh	r0, [r0, #16]
   2779c:	3004      	adds	r0, #4
    if (rsp_sz > mtu) {
   2779e:	4298      	cmp	r0, r3
   277a0:	dd02      	ble.n	277a8 <ble_att_svr_fill_type_value_entry+0x14>
        return 0;
   277a2:	2000      	movs	r0, #0
}
   277a4:	b003      	add	sp, #12
   277a6:	bd30      	pop	{r4, r5, pc}
   277a8:	4615      	mov	r5, r2
    put_le16(&u16, first);
   277aa:	f10d 0006 	add.w	r0, sp, #6
   277ae:	f7f1 fb2d 	bl	18e0c <put_le16>
    rc = os_mbuf_append(om, &u16, 2);
   277b2:	2202      	movs	r2, #2
   277b4:	f10d 0106 	add.w	r1, sp, #6
   277b8:	4620      	mov	r0, r4
   277ba:	f7f1 ff18 	bl	195ee <os_mbuf_append>
    if (rc != 0) {
   277be:	b968      	cbnz	r0, 277dc <ble_att_svr_fill_type_value_entry+0x48>
    put_le16(&u16, last);
   277c0:	4629      	mov	r1, r5
   277c2:	f10d 0006 	add.w	r0, sp, #6
   277c6:	f7f1 fb21 	bl	18e0c <put_le16>
    rc = os_mbuf_append(om, &u16, 2);
   277ca:	2202      	movs	r2, #2
   277cc:	f10d 0106 	add.w	r1, sp, #6
   277d0:	4620      	mov	r0, r4
   277d2:	f7f1 ff0c 	bl	195ee <os_mbuf_append>
    if (rc != 0) {
   277d6:	b930      	cbnz	r0, 277e6 <ble_att_svr_fill_type_value_entry+0x52>
    return BLE_HS_EAGAIN;
   277d8:	2001      	movs	r0, #1
   277da:	e7e3      	b.n	277a4 <ble_att_svr_fill_type_value_entry+0x10>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   277dc:	2311      	movs	r3, #17
   277de:	9a06      	ldr	r2, [sp, #24]
   277e0:	7013      	strb	r3, [r2, #0]
        return BLE_HS_ENOMEM;
   277e2:	2006      	movs	r0, #6
   277e4:	e7de      	b.n	277a4 <ble_att_svr_fill_type_value_entry+0x10>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   277e6:	2311      	movs	r3, #17
   277e8:	9a06      	ldr	r2, [sp, #24]
   277ea:	7013      	strb	r3, [r2, #0]
        return BLE_HS_ENOMEM;
   277ec:	2006      	movs	r0, #6
   277ee:	e7d9      	b.n	277a4 <ble_att_svr_fill_type_value_entry+0x10>

000277f0 <ble_att_svr_fill_type_value>:
{
   277f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   277f4:	b08d      	sub	sp, #52	; 0x34
   277f6:	4682      	mov	sl, r0
   277f8:	460e      	mov	r6, r1
   277fa:	4690      	mov	r8, r2
   277fc:	9305      	str	r3, [sp, #20]
   277fe:	f8bd b060 	ldrh.w	fp, [sp, #96]	; 0x60
   27802:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   27806:	4b33      	ldr	r3, [pc, #204]	; (278d4 <ble_att_svr_fill_type_value+0xe4>)
   27808:	681c      	ldr	r4, [r3, #0]
    prev = 0;
   2780a:	2700      	movs	r7, #0
    first = 0;
   2780c:	463d      	mov	r5, r7
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   2780e:	e015      	b.n	2783c <ble_att_svr_fill_type_value+0x4c>
            rc = ble_att_svr_fill_type_value_entry(txom, first, prev, mtu,
   27810:	f8cd 9000 	str.w	r9, [sp]
   27814:	465b      	mov	r3, fp
   27816:	463a      	mov	r2, r7
   27818:	4629      	mov	r1, r5
   2781a:	9817      	ldr	r0, [sp, #92]	; 0x5c
   2781c:	f7ff ffba 	bl	27794 <ble_att_svr_fill_type_value_entry>
   27820:	4603      	mov	r3, r0
            if (rc != BLE_HS_EAGAIN) {
   27822:	2801      	cmp	r0, #1
   27824:	d13a      	bne.n	2789c <ble_att_svr_fill_type_value+0xac>
            if (ha->ha_handle_id > end_handle) {
   27826:	8963      	ldrh	r3, [r4, #10]
   27828:	4543      	cmp	r3, r8
   2782a:	d833      	bhi.n	27894 <ble_att_svr_fill_type_value+0xa4>
            prev = 0;
   2782c:	2700      	movs	r7, #0
            first = 0;
   2782e:	463d      	mov	r5, r7
        if (ble_uuid_cmp(ha->ha_uuid, &attr_type.u) == 0) {
   27830:	a905      	add	r1, sp, #20
   27832:	6860      	ldr	r0, [r4, #4]
   27834:	f009 fdaf 	bl	31396 <ble_uuid_cmp>
   27838:	b188      	cbz	r0, 2785e <ble_att_svr_fill_type_value+0x6e>
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   2783a:	6824      	ldr	r4, [r4, #0]
   2783c:	b364      	cbz	r4, 27898 <ble_att_svr_fill_type_value+0xa8>
        if (ha->ha_handle_id < start_handle) {
   2783e:	8963      	ldrh	r3, [r4, #10]
   27840:	42b3      	cmp	r3, r6
   27842:	d3fa      	bcc.n	2783a <ble_att_svr_fill_type_value+0x4a>
        if (!first && ha->ha_handle_id > end_handle) {
   27844:	b90d      	cbnz	r5, 2784a <ble_att_svr_fill_type_value+0x5a>
   27846:	4543      	cmp	r3, r8
   27848:	d826      	bhi.n	27898 <ble_att_svr_fill_type_value+0xa8>
        if (first) {
   2784a:	2d00      	cmp	r5, #0
   2784c:	d0f0      	beq.n	27830 <ble_att_svr_fill_type_value+0x40>
            if (!ble_att_svr_is_valid_group_end(&attr_type.u, ha->ha_uuid)) {
   2784e:	6861      	ldr	r1, [r4, #4]
   27850:	a805      	add	r0, sp, #20
   27852:	f7ff ff3a 	bl	276ca <ble_att_svr_is_valid_group_end>
   27856:	2800      	cmp	r0, #0
   27858:	d1da      	bne.n	27810 <ble_att_svr_fill_type_value+0x20>
                prev = ha->ha_handle_id;
   2785a:	8967      	ldrh	r7, [r4, #10]
                continue;
   2785c:	e7ed      	b.n	2783a <ble_att_svr_fill_type_value+0x4a>
            rc = ble_att_svr_read_flat(conn_handle, ha, 0, sizeof buf, buf,
   2785e:	f8cd 9008 	str.w	r9, [sp, #8]
   27862:	f10d 031e 	add.w	r3, sp, #30
   27866:	9301      	str	r3, [sp, #4]
   27868:	ab08      	add	r3, sp, #32
   2786a:	9300      	str	r3, [sp, #0]
   2786c:	2310      	movs	r3, #16
   2786e:	2200      	movs	r2, #0
   27870:	4621      	mov	r1, r4
   27872:	4650      	mov	r0, sl
   27874:	f7ff ff60 	bl	27738 <ble_att_svr_read_flat>
            if (rc != 0) {
   27878:	4603      	mov	r3, r0
   2787a:	b978      	cbnz	r0, 2789c <ble_att_svr_fill_type_value+0xac>
            rc = os_mbuf_cmpf(rxom, sizeof(struct ble_att_find_type_value_req),
   2787c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   27880:	aa08      	add	r2, sp, #32
   27882:	2106      	movs	r1, #6
   27884:	9816      	ldr	r0, [sp, #88]	; 0x58
   27886:	f7f1 ffc1 	bl	1980c <os_mbuf_cmpf>
            if (rc == 0) {
   2788a:	2800      	cmp	r0, #0
   2788c:	d1d5      	bne.n	2783a <ble_att_svr_fill_type_value+0x4a>
                first = ha->ha_handle_id;
   2788e:	8965      	ldrh	r5, [r4, #10]
                prev = ha->ha_handle_id;
   27890:	462f      	mov	r7, r5
   27892:	e7d2      	b.n	2783a <ble_att_svr_fill_type_value+0x4a>
            prev = 0;
   27894:	2700      	movs	r7, #0
            first = 0;
   27896:	463d      	mov	r5, r7
    if (first) {
   27898:	b94d      	cbnz	r5, 278ae <ble_att_svr_fill_type_value+0xbe>
        rc = 0;
   2789a:	2300      	movs	r3, #0
    any_entries = OS_MBUF_PKTHDR(txom)->omp_len >
   2789c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   2789e:	8a12      	ldrh	r2, [r2, #16]
    if (rc == 0 && !any_entries) {
   278a0:	b90b      	cbnz	r3, 278a6 <ble_att_svr_fill_type_value+0xb6>
   278a2:	2a01      	cmp	r2, #1
   278a4:	d910      	bls.n	278c8 <ble_att_svr_fill_type_value+0xd8>
}
   278a6:	4618      	mov	r0, r3
   278a8:	b00d      	add	sp, #52	; 0x34
   278aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = ble_att_svr_fill_type_value_entry(txom, first, prev, mtu,
   278ae:	f8cd 9000 	str.w	r9, [sp]
   278b2:	465b      	mov	r3, fp
   278b4:	463a      	mov	r2, r7
   278b6:	4629      	mov	r1, r5
   278b8:	9817      	ldr	r0, [sp, #92]	; 0x5c
   278ba:	f7ff ff6b 	bl	27794 <ble_att_svr_fill_type_value_entry>
   278be:	4603      	mov	r3, r0
        if (rc == BLE_HS_EAGAIN) {
   278c0:	2801      	cmp	r0, #1
   278c2:	d1eb      	bne.n	2789c <ble_att_svr_fill_type_value+0xac>
            rc = 0;
   278c4:	2300      	movs	r3, #0
   278c6:	e7e9      	b.n	2789c <ble_att_svr_fill_type_value+0xac>
        *out_att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   278c8:	230a      	movs	r3, #10
   278ca:	f889 3000 	strb.w	r3, [r9]
        return BLE_HS_ENOENT;
   278ce:	2305      	movs	r3, #5
   278d0:	e7e9      	b.n	278a6 <ble_att_svr_fill_type_value+0xb6>
   278d2:	bf00      	nop
   278d4:	10004bd0 	.word	0x10004bd0

000278d8 <ble_att_svr_build_find_type_value_rsp>:
{
   278d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   278dc:	b088      	sub	sp, #32
   278de:	4604      	mov	r4, r0
   278e0:	4688      	mov	r8, r1
   278e2:	4617      	mov	r7, r2
   278e4:	9305      	str	r3, [sp, #20]
   278e6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   278e8:	9d10      	ldr	r5, [sp, #64]	; 0x40
    rc = ble_att_svr_pkt(rxom, &txom, out_att_err);
   278ea:	462a      	mov	r2, r5
   278ec:	a907      	add	r1, sp, #28
   278ee:	4630      	mov	r0, r6
   278f0:	f7ff fdef 	bl	274d2 <ble_att_svr_pkt>
    if (rc != 0) {
   278f4:	b128      	cbz	r0, 27902 <ble_att_svr_build_find_type_value_rsp+0x2a>
    *out_txom = txom;
   278f6:	9a07      	ldr	r2, [sp, #28]
   278f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   278fa:	601a      	str	r2, [r3, #0]
}
   278fc:	b008      	add	sp, #32
   278fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    buf = ble_att_cmd_prepare(BLE_ATT_OP_FIND_TYPE_VALUE_RSP, 0, txom);
   27902:	9a07      	ldr	r2, [sp, #28]
   27904:	2100      	movs	r1, #0
   27906:	2007      	movs	r0, #7
   27908:	f7ff fbc9 	bl	2709e <ble_att_cmd_prepare>
    if (buf == NULL) {
   2790c:	b178      	cbz	r0, 2792e <ble_att_svr_build_find_type_value_rsp+0x56>
    mtu = ble_att_mtu(conn_handle);
   2790e:	4620      	mov	r0, r4
   27910:	f7fe ffc9 	bl	268a6 <ble_att_mtu>
    rc = ble_att_svr_fill_type_value(conn_handle, start_handle, end_handle,
   27914:	9503      	str	r5, [sp, #12]
   27916:	9002      	str	r0, [sp, #8]
   27918:	9b07      	ldr	r3, [sp, #28]
   2791a:	9301      	str	r3, [sp, #4]
   2791c:	6833      	ldr	r3, [r6, #0]
   2791e:	9300      	str	r3, [sp, #0]
   27920:	9b05      	ldr	r3, [sp, #20]
   27922:	463a      	mov	r2, r7
   27924:	4641      	mov	r1, r8
   27926:	4620      	mov	r0, r4
   27928:	f7ff ff62 	bl	277f0 <ble_att_svr_fill_type_value>
    if (rc != 0) {
   2792c:	e7e3      	b.n	278f6 <ble_att_svr_build_find_type_value_rsp+0x1e>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   2792e:	2311      	movs	r3, #17
   27930:	702b      	strb	r3, [r5, #0]
        rc = BLE_HS_ENOMEM;
   27932:	2006      	movs	r0, #6
        goto done;
   27934:	e7df      	b.n	278f6 <ble_att_svr_build_find_type_value_rsp+0x1e>

00027936 <ble_att_svr_service_uuid>:
{
   27936:	b510      	push	{r4, lr}
   27938:	b08a      	sub	sp, #40	; 0x28
   2793a:	460c      	mov	r4, r1
    rc = ble_att_svr_read_flat(BLE_HS_CONN_HANDLE_NONE, entry, 0, sizeof(val), val,
   2793c:	9202      	str	r2, [sp, #8]
   2793e:	f10d 0316 	add.w	r3, sp, #22
   27942:	9301      	str	r3, [sp, #4]
   27944:	ab06      	add	r3, sp, #24
   27946:	9300      	str	r3, [sp, #0]
   27948:	2310      	movs	r3, #16
   2794a:	2200      	movs	r2, #0
   2794c:	4601      	mov	r1, r0
   2794e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   27952:	f7ff fef1 	bl	27738 <ble_att_svr_read_flat>
    if (rc != 0) {
   27956:	b108      	cbz	r0, 2795c <ble_att_svr_service_uuid+0x26>
}
   27958:	b00a      	add	sp, #40	; 0x28
   2795a:	bd10      	pop	{r4, pc}
    rc = ble_uuid_init_from_buf(uuid, val, attr_len);
   2795c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   27960:	a906      	add	r1, sp, #24
   27962:	4620      	mov	r0, r4
   27964:	f009 fcef 	bl	31346 <ble_uuid_init_from_buf>
    return rc;
   27968:	e7f6      	b.n	27958 <ble_att_svr_service_uuid+0x22>
	...

0002796c <ble_att_svr_build_read_group_type_rsp>:
{
   2796c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27970:	b08b      	sub	sp, #44	; 0x2c
   27972:	460e      	mov	r6, r1
   27974:	4617      	mov	r7, r2
   27976:	4698      	mov	r8, r3
   27978:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
   2797c:	2500      	movs	r5, #0
    *att_err = 0;
   2797e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   27980:	701d      	strb	r5, [r3, #0]
    *err_handle = start_handle;
   27982:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   27984:	8019      	strh	r1, [r3, #0]
    mtu = ble_att_mtu(conn_handle);
   27986:	f7fe ff8e 	bl	268a6 <ble_att_mtu>
   2798a:	9003      	str	r0, [sp, #12]
    txom = *rxom;
   2798c:	f8d9 a000 	ldr.w	sl, [r9]
    *rxom = NULL;
   27990:	f8c9 5000 	str.w	r5, [r9]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   27994:	f8ba 1010 	ldrh.w	r1, [sl, #16]
   27998:	4650      	mov	r0, sl
   2799a:	f7f1 fee6 	bl	1976a <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_READ_GROUP_TYPE_RSP, sizeof(*rsp),
   2799e:	4652      	mov	r2, sl
   279a0:	2101      	movs	r1, #1
   279a2:	2011      	movs	r0, #17
   279a4:	f7ff fb7b 	bl	2709e <ble_att_cmd_prepare>
    if (rsp == NULL) {
   279a8:	b130      	cbz	r0, 279b8 <ble_att_svr_build_read_group_type_rsp+0x4c>
   279aa:	4683      	mov	fp, r0
    rsp->bagp_length = 0;
   279ac:	2500      	movs	r5, #0
   279ae:	7005      	strb	r5, [r0, #0]
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   279b0:	4b4b      	ldr	r3, [pc, #300]	; (27ae0 <ble_att_svr_build_read_group_type_rsp+0x174>)
   279b2:	681c      	ldr	r4, [r3, #0]
    end_group_handle = 0;
   279b4:	46a9      	mov	r9, r5
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   279b6:	e03e      	b.n	27a36 <ble_att_svr_build_read_group_type_rsp+0xca>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   279b8:	2311      	movs	r3, #17
   279ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
   279bc:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   279be:	2306      	movs	r3, #6
    end_group_handle = 0;
   279c0:	46a9      	mov	r9, r5
        goto done;
   279c2:	e059      	b.n	27a78 <ble_att_svr_build_read_group_type_rsp+0x10c>
            if (!ble_att_svr_is_valid_read_group_type(entry->ha_uuid)) {
   279c4:	6860      	ldr	r0, [r4, #4]
   279c6:	f7ff feac 	bl	27722 <ble_att_svr_is_valid_read_group_type>
   279ca:	b910      	cbnz	r0, 279d2 <ble_att_svr_build_read_group_type_rsp+0x66>
                end_group_handle = entry->ha_handle_id;
   279cc:	f8b4 900a 	ldrh.w	r9, [r4, #10]
   279d0:	e03a      	b.n	27a48 <ble_att_svr_build_read_group_type_rsp+0xdc>
                rc = ble_att_svr_read_group_type_entry_write(
   279d2:	ab05      	add	r3, sp, #20
   279d4:	9300      	str	r3, [sp, #0]
   279d6:	464b      	mov	r3, r9
   279d8:	462a      	mov	r2, r5
   279da:	9903      	ldr	r1, [sp, #12]
   279dc:	4650      	mov	r0, sl
   279de:	f7ff fe3a 	bl	27656 <ble_att_svr_read_group_type_entry_write>
                if (rc != 0) {
   279e2:	4603      	mov	r3, r0
   279e4:	b918      	cbnz	r0, 279ee <ble_att_svr_build_read_group_type_rsp+0x82>
                end_group_handle = 0;
   279e6:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   279ea:	464d      	mov	r5, r9
   279ec:	e02e      	b.n	27a4c <ble_att_svr_build_read_group_type_rsp+0xe0>
                    *err_handle = entry->ha_handle_id;
   279ee:	8962      	ldrh	r2, [r4, #10]
   279f0:	9917      	ldr	r1, [sp, #92]	; 0x5c
   279f2:	800a      	strh	r2, [r1, #0]
                    if (rc == BLE_HS_ENOMEM) {
   279f4:	2806      	cmp	r0, #6
   279f6:	d003      	beq.n	27a00 <ble_att_svr_build_read_group_type_rsp+0x94>
                end_group_handle = 0;
   279f8:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   279fc:	464d      	mov	r5, r9
                    goto done;
   279fe:	e03b      	b.n	27a78 <ble_att_svr_build_read_group_type_rsp+0x10c>
                        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   27a00:	2211      	movs	r2, #17
   27a02:	9916      	ldr	r1, [sp, #88]	; 0x58
   27a04:	700a      	strb	r2, [r1, #0]
   27a06:	e7f7      	b.n	279f8 <ble_att_svr_build_read_group_type_rsp+0x8c>
                    *err_handle = entry->ha_handle_id;
   27a08:	8962      	ldrh	r2, [r4, #10]
   27a0a:	9917      	ldr	r1, [sp, #92]	; 0x5c
   27a0c:	800a      	strh	r2, [r1, #0]
                    goto done;
   27a0e:	e033      	b.n	27a78 <ble_att_svr_build_read_group_type_rsp+0x10c>
                    if (service_uuid.u.type == BLE_UUID_TYPE_16) {
   27a10:	f89d 3014 	ldrb.w	r3, [sp, #20]
   27a14:	2b10      	cmp	r3, #16
   27a16:	d003      	beq.n	27a20 <ble_att_svr_build_read_group_type_rsp+0xb4>
                        rsp->bagp_length = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_128;
   27a18:	2314      	movs	r3, #20
   27a1a:	f88b 3000 	strb.w	r3, [fp]
   27a1e:	e007      	b.n	27a30 <ble_att_svr_build_read_group_type_rsp+0xc4>
                        rsp->bagp_length = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_16;
   27a20:	2306      	movs	r3, #6
   27a22:	f88b 3000 	strb.w	r3, [fp]
   27a26:	e003      	b.n	27a30 <ble_att_svr_build_read_group_type_rsp+0xc4>
                    if (service_uuid.u.type != BLE_UUID_TYPE_16) {
   27a28:	f89d 2014 	ldrb.w	r2, [sp, #20]
   27a2c:	2a10      	cmp	r2, #16
   27a2e:	d123      	bne.n	27a78 <ble_att_svr_build_read_group_type_rsp+0x10c>
                start_group_handle = entry->ha_handle_id;
   27a30:	8965      	ldrh	r5, [r4, #10]
                end_group_handle = entry->ha_handle_id;
   27a32:	46a9      	mov	r9, r5
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   27a34:	6824      	ldr	r4, [r4, #0]
   27a36:	2c00      	cmp	r4, #0
   27a38:	d03a      	beq.n	27ab0 <ble_att_svr_build_read_group_type_rsp+0x144>
        if (entry->ha_handle_id < start_handle) {
   27a3a:	8963      	ldrh	r3, [r4, #10]
   27a3c:	42b3      	cmp	r3, r6
   27a3e:	d3f9      	bcc.n	27a34 <ble_att_svr_build_read_group_type_rsp+0xc8>
        if (entry->ha_handle_id > end_handle) {
   27a40:	42bb      	cmp	r3, r7
   27a42:	d837      	bhi.n	27ab4 <ble_att_svr_build_read_group_type_rsp+0x148>
        if (start_group_handle != 0) {
   27a44:	2d00      	cmp	r5, #0
   27a46:	d1bd      	bne.n	279c4 <ble_att_svr_build_read_group_type_rsp+0x58>
        if (start_group_handle == 0) {
   27a48:	2d00      	cmp	r5, #0
   27a4a:	d1f3      	bne.n	27a34 <ble_att_svr_build_read_group_type_rsp+0xc8>
            if (ble_uuid_cmp(entry->ha_uuid, group_uuid) == 0) {
   27a4c:	4641      	mov	r1, r8
   27a4e:	6860      	ldr	r0, [r4, #4]
   27a50:	f009 fca1 	bl	31396 <ble_uuid_cmp>
   27a54:	2800      	cmp	r0, #0
   27a56:	d1ed      	bne.n	27a34 <ble_att_svr_build_read_group_type_rsp+0xc8>
                rc = ble_att_svr_service_uuid(entry, &service_uuid, att_err);
   27a58:	9a16      	ldr	r2, [sp, #88]	; 0x58
   27a5a:	a905      	add	r1, sp, #20
   27a5c:	4620      	mov	r0, r4
   27a5e:	f7ff ff6a 	bl	27936 <ble_att_svr_service_uuid>
                if (rc != 0) {
   27a62:	4603      	mov	r3, r0
   27a64:	2800      	cmp	r0, #0
   27a66:	d1cf      	bne.n	27a08 <ble_att_svr_build_read_group_type_rsp+0x9c>
                switch (rsp->bagp_length) {
   27a68:	f89b 2000 	ldrb.w	r2, [fp]
   27a6c:	2a06      	cmp	r2, #6
   27a6e:	d0db      	beq.n	27a28 <ble_att_svr_build_read_group_type_rsp+0xbc>
   27a70:	2a14      	cmp	r2, #20
   27a72:	d018      	beq.n	27aa6 <ble_att_svr_build_read_group_type_rsp+0x13a>
   27a74:	2a00      	cmp	r2, #0
   27a76:	d0cb      	beq.n	27a10 <ble_att_svr_build_read_group_type_rsp+0xa4>
    if (rc == 0) {
   27a78:	bb2b      	cbnz	r3, 27ac6 <ble_att_svr_build_read_group_type_rsp+0x15a>
        if (start_group_handle != 0) {
   27a7a:	b15d      	cbz	r5, 27a94 <ble_att_svr_build_read_group_type_rsp+0x128>
            if (entry == NULL) {
   27a7c:	b1e4      	cbz	r4, 27ab8 <ble_att_svr_build_read_group_type_rsp+0x14c>
            rc = ble_att_svr_read_group_type_entry_write(txom, mtu,
   27a7e:	ab05      	add	r3, sp, #20
   27a80:	9300      	str	r3, [sp, #0]
   27a82:	464b      	mov	r3, r9
   27a84:	462a      	mov	r2, r5
   27a86:	9903      	ldr	r1, [sp, #12]
   27a88:	4650      	mov	r0, sl
   27a8a:	f7ff fde4 	bl	27656 <ble_att_svr_read_group_type_entry_write>
   27a8e:	4603      	mov	r3, r0
            if (rc == BLE_HS_ENOMEM) {
   27a90:	2806      	cmp	r0, #6
   27a92:	d014      	beq.n	27abe <ble_att_svr_build_read_group_type_rsp+0x152>
        if (OS_MBUF_PKTLEN(txom) <= BLE_ATT_READ_GROUP_TYPE_RSP_BASE_SZ) {
   27a94:	f8ba 2010 	ldrh.w	r2, [sl, #16]
   27a98:	2a02      	cmp	r2, #2
   27a9a:	d814      	bhi.n	27ac6 <ble_att_svr_build_read_group_type_rsp+0x15a>
            *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   27a9c:	230a      	movs	r3, #10
   27a9e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   27aa0:	7013      	strb	r3, [r2, #0]
            rc = BLE_HS_ENOENT;
   27aa2:	2305      	movs	r3, #5
   27aa4:	e010      	b.n	27ac8 <ble_att_svr_build_read_group_type_rsp+0x15c>
                    if (service_uuid.u.type == BLE_UUID_TYPE_16) {
   27aa6:	f89d 2014 	ldrb.w	r2, [sp, #20]
   27aaa:	2a10      	cmp	r2, #16
   27aac:	d1c0      	bne.n	27a30 <ble_att_svr_build_read_group_type_rsp+0xc4>
   27aae:	e7e3      	b.n	27a78 <ble_att_svr_build_read_group_type_rsp+0x10c>
    rc = 0;
   27ab0:	2300      	movs	r3, #0
   27ab2:	e7e1      	b.n	27a78 <ble_att_svr_build_read_group_type_rsp+0x10c>
            rc = 0;
   27ab4:	2300      	movs	r3, #0
   27ab6:	e7df      	b.n	27a78 <ble_att_svr_build_read_group_type_rsp+0x10c>
                end_group_handle = 0xffff;
   27ab8:	f64f 79ff 	movw	r9, #65535	; 0xffff
   27abc:	e7df      	b.n	27a7e <ble_att_svr_build_read_group_type_rsp+0x112>
                *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   27abe:	2211      	movs	r2, #17
   27ac0:	9916      	ldr	r1, [sp, #88]	; 0x58
   27ac2:	700a      	strb	r2, [r1, #0]
   27ac4:	e7e6      	b.n	27a94 <ble_att_svr_build_read_group_type_rsp+0x128>
    if (rc == 0 || rc == BLE_HS_EMSGSIZE) {
   27ac6:	b10b      	cbz	r3, 27acc <ble_att_svr_build_read_group_type_rsp+0x160>
   27ac8:	2b04      	cmp	r3, #4
   27aca:	d006      	beq.n	27ada <ble_att_svr_build_read_group_type_rsp+0x16e>
    *out_txom = txom;
   27acc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   27ace:	f8c2 a000 	str.w	sl, [r2]
}
   27ad2:	4618      	mov	r0, r3
   27ad4:	b00b      	add	sp, #44	; 0x2c
   27ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = 0;
   27ada:	2300      	movs	r3, #0
   27adc:	e7f6      	b.n	27acc <ble_att_svr_build_read_group_type_rsp+0x160>
   27ade:	bf00      	nop
   27ae0:	10004bd0 	.word	0x10004bd0

00027ae4 <ble_att_svr_prep_free>:
    if (entry != NULL) {
   27ae4:	b148      	cbz	r0, 27afa <ble_att_svr_prep_free+0x16>
{
   27ae6:	b510      	push	{r4, lr}
   27ae8:	4604      	mov	r4, r0
        os_mbuf_free_chain(entry->bape_value);
   27aea:	6880      	ldr	r0, [r0, #8]
   27aec:	f7f1 fd6f 	bl	195ce <os_mbuf_free_chain>
        os_memblock_put(&ble_att_svr_prep_entry_pool, entry);
   27af0:	4621      	mov	r1, r4
   27af2:	4802      	ldr	r0, [pc, #8]	; (27afc <ble_att_svr_prep_free+0x18>)
   27af4:	f7f2 f9d2 	bl	19e9c <os_memblock_put>
}
   27af8:	bd10      	pop	{r4, pc}
   27afa:	4770      	bx	lr
   27afc:	10004ed8 	.word	0x10004ed8

00027b00 <ble_att_svr_prep_alloc>:
{
   27b00:	b570      	push	{r4, r5, r6, lr}
   27b02:	4606      	mov	r6, r0
    entry = os_memblock_get(&ble_att_svr_prep_entry_pool);
   27b04:	480c      	ldr	r0, [pc, #48]	; (27b38 <ble_att_svr_prep_alloc+0x38>)
   27b06:	f7f2 f9a1 	bl	19e4c <os_memblock_get>
    if (entry == NULL) {
   27b0a:	4604      	mov	r4, r0
   27b0c:	b150      	cbz	r0, 27b24 <ble_att_svr_prep_alloc+0x24>
    memset(entry, 0, sizeof *entry);
   27b0e:	2300      	movs	r3, #0
   27b10:	6003      	str	r3, [r0, #0]
   27b12:	6043      	str	r3, [r0, #4]
   27b14:	6083      	str	r3, [r0, #8]
    entry->bape_value = ble_hs_mbuf_l2cap_pkt();
   27b16:	f008 fa2e 	bl	2ff76 <ble_hs_mbuf_l2cap_pkt>
   27b1a:	4605      	mov	r5, r0
   27b1c:	60a0      	str	r0, [r4, #8]
    if (entry->bape_value == NULL) {
   27b1e:	b120      	cbz	r0, 27b2a <ble_att_svr_prep_alloc+0x2a>
}
   27b20:	4620      	mov	r0, r4
   27b22:	bd70      	pop	{r4, r5, r6, pc}
        *att_err = BLE_ATT_ERR_PREPARE_QUEUE_FULL;
   27b24:	2309      	movs	r3, #9
   27b26:	7033      	strb	r3, [r6, #0]
        return NULL;
   27b28:	e7fa      	b.n	27b20 <ble_att_svr_prep_alloc+0x20>
        ble_att_svr_prep_free(entry);
   27b2a:	4620      	mov	r0, r4
   27b2c:	f7ff ffda 	bl	27ae4 <ble_att_svr_prep_free>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   27b30:	2311      	movs	r3, #17
   27b32:	7033      	strb	r3, [r6, #0]
        return NULL;
   27b34:	462c      	mov	r4, r5
   27b36:	e7f3      	b.n	27b20 <ble_att_svr_prep_alloc+0x20>
   27b38:	10004ed8 	.word	0x10004ed8

00027b3c <ble_att_svr_entry_free>:
{
   27b3c:	b508      	push	{r3, lr}
   27b3e:	4601      	mov	r1, r0
    os_memblock_put(&ble_att_svr_entry_pool, entry);
   27b40:	4801      	ldr	r0, [pc, #4]	; (27b48 <ble_att_svr_entry_free+0xc>)
   27b42:	f7f2 f9ab 	bl	19e9c <os_memblock_put>
}
   27b46:	bd08      	pop	{r3, pc}
   27b48:	10004ba8 	.word	0x10004ba8

00027b4c <ble_att_svr_insert_prep_entry>:
{
   27b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27b50:	4688      	mov	r8, r1
   27b52:	4691      	mov	r9, r2
   27b54:	461d      	mov	r5, r3
   27b56:	9f08      	ldr	r7, [sp, #32]
    conn = ble_hs_conn_find_assert(conn_handle);
   27b58:	f007 fab6 	bl	2f0c8 <ble_hs_conn_find_assert>
   27b5c:	4606      	mov	r6, r0
    prep_entry = ble_att_svr_prep_alloc(out_att_err);
   27b5e:	4638      	mov	r0, r7
   27b60:	f7ff ffce 	bl	27b00 <ble_att_svr_prep_alloc>
    if (prep_entry == NULL) {
   27b64:	b368      	cbz	r0, 27bc2 <ble_att_svr_insert_prep_entry+0x76>
   27b66:	4604      	mov	r4, r0
    prep_entry->bape_handle = handle;
   27b68:	f8a0 8004 	strh.w	r8, [r0, #4]
    prep_entry->bape_offset = offset;
   27b6c:	f8a0 9006 	strh.w	r9, [r0, #6]
        OS_MBUF_PKTLEN(rxom) - sizeof(struct ble_att_prep_write_cmd));
   27b70:	8a2b      	ldrh	r3, [r5, #16]
    rc = os_mbuf_appendfrom(
   27b72:	3b04      	subs	r3, #4
   27b74:	b29b      	uxth	r3, r3
   27b76:	2204      	movs	r2, #4
   27b78:	4629      	mov	r1, r5
   27b7a:	6880      	ldr	r0, [r0, #8]
   27b7c:	f7f1 fd9c 	bl	196b8 <os_mbuf_appendfrom>
    if (rc != 0) {
   27b80:	4605      	mov	r5, r0
   27b82:	b9a0      	cbnz	r0, 27bae <ble_att_svr_insert_prep_entry+0x62>
    prep_prev = ble_att_svr_prep_find_prev(&conn->bhc_att_svr,
   27b84:	464a      	mov	r2, r9
   27b86:	4641      	mov	r1, r8
   27b88:	f106 0044 	add.w	r0, r6, #68	; 0x44
   27b8c:	f7ff fad6 	bl	2713c <ble_att_svr_prep_find_prev>
    if (prep_prev == NULL) {
   27b90:	b198      	cbz	r0, 27bba <ble_att_svr_insert_prep_entry+0x6e>
        SLIST_INSERT_AFTER(prep_prev, prep_entry, bape_next);
   27b92:	6802      	ldr	r2, [r0, #0]
   27b94:	6022      	str	r2, [r4, #0]
   27b96:	6004      	str	r4, [r0, #0]
    return os_time_get();
   27b98:	f7f2 fd56 	bl	1a648 <os_time_get>
        ble_npl_time_get() + BLE_HS_ATT_SVR_QUEUED_WRITE_TMO;
   27b9c:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
   27ba0:	3030      	adds	r0, #48	; 0x30
    conn->bhc_att_svr.basc_prep_timeout_at =
   27ba2:	64b0      	str	r0, [r6, #72]	; 0x48
    ble_hs_timer_resched();
   27ba4:	f006 fae6 	bl	2e174 <ble_hs_timer_resched>
}
   27ba8:	4628      	mov	r0, r5
   27baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ble_att_svr_prep_free(prep_entry);
   27bae:	4620      	mov	r0, r4
   27bb0:	f7ff ff98 	bl	27ae4 <ble_att_svr_prep_free>
        *out_att_err = BLE_ATT_ERR_PREPARE_QUEUE_FULL;
   27bb4:	2309      	movs	r3, #9
   27bb6:	703b      	strb	r3, [r7, #0]
        return rc;
   27bb8:	e7f6      	b.n	27ba8 <ble_att_svr_insert_prep_entry+0x5c>
        SLIST_INSERT_HEAD(&conn->bhc_att_svr.basc_prep_list, prep_entry,
   27bba:	6c73      	ldr	r3, [r6, #68]	; 0x44
   27bbc:	6023      	str	r3, [r4, #0]
   27bbe:	6474      	str	r4, [r6, #68]	; 0x44
   27bc0:	e7ea      	b.n	27b98 <ble_att_svr_insert_prep_entry+0x4c>
        return BLE_HS_ENOMEM;
   27bc2:	2506      	movs	r5, #6
   27bc4:	e7f0      	b.n	27ba8 <ble_att_svr_insert_prep_entry+0x5c>

00027bc6 <ble_att_svr_prep_extract>:
{
   27bc6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27bca:	4605      	mov	r5, r0
   27bcc:	4689      	mov	r9, r1
   27bce:	4690      	mov	r8, r2
    first = SLIST_FIRST(prep_list);
   27bd0:	6803      	ldr	r3, [r0, #0]
    attr_handle = first->bape_handle;
   27bd2:	889f      	ldrh	r7, [r3, #4]
    om = NULL;
   27bd4:	2600      	movs	r6, #0
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   27bd6:	e00b      	b.n	27bf0 <ble_att_svr_prep_extract+0x2a>
            os_mbuf_concat(om, entry->bape_value);
   27bd8:	68a1      	ldr	r1, [r4, #8]
   27bda:	4630      	mov	r0, r6
   27bdc:	f7f1 ff58 	bl	19a90 <os_mbuf_concat>
        entry->bape_value = NULL;
   27be0:	2300      	movs	r3, #0
   27be2:	60a3      	str	r3, [r4, #8]
        SLIST_REMOVE_HEAD(prep_list, bape_next);
   27be4:	682b      	ldr	r3, [r5, #0]
   27be6:	681b      	ldr	r3, [r3, #0]
   27be8:	602b      	str	r3, [r5, #0]
        ble_att_svr_prep_free(entry);
   27bea:	4620      	mov	r0, r4
   27bec:	f7ff ff7a 	bl	27ae4 <ble_att_svr_prep_free>
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   27bf0:	682c      	ldr	r4, [r5, #0]
   27bf2:	b134      	cbz	r4, 27c02 <ble_att_svr_prep_extract+0x3c>
        if (entry->bape_handle != attr_handle) {
   27bf4:	88a3      	ldrh	r3, [r4, #4]
   27bf6:	42bb      	cmp	r3, r7
   27bf8:	d103      	bne.n	27c02 <ble_att_svr_prep_extract+0x3c>
        if (om == NULL) {
   27bfa:	2e00      	cmp	r6, #0
   27bfc:	d1ec      	bne.n	27bd8 <ble_att_svr_prep_extract+0x12>
            om = entry->bape_value;
   27bfe:	68a6      	ldr	r6, [r4, #8]
   27c00:	e7ee      	b.n	27be0 <ble_att_svr_prep_extract+0x1a>
    *out_attr_handle = attr_handle;
   27c02:	f8a9 7000 	strh.w	r7, [r9]
    *out_om = om;
   27c06:	f8c8 6000 	str.w	r6, [r8]
}
   27c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

00027c10 <ble_att_svr_free_start_mem>:
     */
}

static void
ble_att_svr_free_start_mem(void)
{
   27c10:	b510      	push	{r4, lr}
    free(ble_att_svr_entry_mem);
   27c12:	4c03      	ldr	r4, [pc, #12]	; (27c20 <ble_att_svr_free_start_mem+0x10>)
   27c14:	6820      	ldr	r0, [r4, #0]
   27c16:	f00c fad7 	bl	341c8 <free>
    ble_att_svr_entry_mem = NULL;
   27c1a:	2300      	movs	r3, #0
   27c1c:	6023      	str	r3, [r4, #0]
}
   27c1e:	bd10      	pop	{r4, pc}
   27c20:	10004ba4 	.word	0x10004ba4

00027c24 <ble_att_svr_register>:
{
   27c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27c28:	4680      	mov	r8, r0
   27c2a:	460f      	mov	r7, r1
   27c2c:	4616      	mov	r6, r2
   27c2e:	461d      	mov	r5, r3
    entry = ble_att_svr_entry_alloc();
   27c30:	f7ff fb06 	bl	27240 <ble_att_svr_entry_alloc>
    if (entry == NULL) {
   27c34:	b1b8      	cbz	r0, 27c66 <ble_att_svr_register+0x42>
   27c36:	4604      	mov	r4, r0
    entry->ha_uuid = uuid;
   27c38:	f8c0 8004 	str.w	r8, [r0, #4]
    entry->ha_flags = flags;
   27c3c:	7207      	strb	r7, [r0, #8]
    entry->ha_min_key_size = min_key_size;
   27c3e:	7246      	strb	r6, [r0, #9]
    entry->ha_handle_id = ble_att_svr_next_id();
   27c40:	f7ff fa74 	bl	2712c <ble_att_svr_next_id>
   27c44:	8160      	strh	r0, [r4, #10]
    entry->ha_cb = cb;
   27c46:	9b06      	ldr	r3, [sp, #24]
   27c48:	60e3      	str	r3, [r4, #12]
    entry->ha_cb_arg = cb_arg;
   27c4a:	9b07      	ldr	r3, [sp, #28]
   27c4c:	6123      	str	r3, [r4, #16]
    STAILQ_INSERT_TAIL(&ble_att_svr_list, entry, ha_next);
   27c4e:	2300      	movs	r3, #0
   27c50:	6023      	str	r3, [r4, #0]
   27c52:	4b07      	ldr	r3, [pc, #28]	; (27c70 <ble_att_svr_register+0x4c>)
   27c54:	685a      	ldr	r2, [r3, #4]
   27c56:	6014      	str	r4, [r2, #0]
   27c58:	605c      	str	r4, [r3, #4]
    if (handle_id != NULL) {
   27c5a:	b135      	cbz	r5, 27c6a <ble_att_svr_register+0x46>
        *handle_id = entry->ha_handle_id;
   27c5c:	8963      	ldrh	r3, [r4, #10]
   27c5e:	802b      	strh	r3, [r5, #0]
    return 0;
   27c60:	2000      	movs	r0, #0
}
   27c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_ENOMEM;
   27c66:	2006      	movs	r0, #6
   27c68:	e7fb      	b.n	27c62 <ble_att_svr_register+0x3e>
    return 0;
   27c6a:	2000      	movs	r0, #0
   27c6c:	e7f9      	b.n	27c62 <ble_att_svr_register+0x3e>
   27c6e:	bf00      	nop
   27c70:	10004bd0 	.word	0x10004bd0

00027c74 <ble_att_svr_prev_handle>:
}
   27c74:	4b01      	ldr	r3, [pc, #4]	; (27c7c <ble_att_svr_prev_handle+0x8>)
   27c76:	8818      	ldrh	r0, [r3, #0]
   27c78:	4770      	bx	lr
   27c7a:	bf00      	nop
   27c7c:	10004bcc 	.word	0x10004bcc

00027c80 <ble_att_svr_find_by_handle>:
{
   27c80:	4602      	mov	r2, r0
    for (entry = STAILQ_FIRST(&ble_att_svr_list);
   27c82:	4b04      	ldr	r3, [pc, #16]	; (27c94 <ble_att_svr_find_by_handle+0x14>)
   27c84:	6818      	ldr	r0, [r3, #0]
   27c86:	b120      	cbz	r0, 27c92 <ble_att_svr_find_by_handle+0x12>
        if (entry->ha_handle_id == handle_id) {
   27c88:	8943      	ldrh	r3, [r0, #10]
   27c8a:	4293      	cmp	r3, r2
   27c8c:	d001      	beq.n	27c92 <ble_att_svr_find_by_handle+0x12>
         entry = STAILQ_NEXT(entry, ha_next)) {
   27c8e:	6800      	ldr	r0, [r0, #0]
   27c90:	e7f9      	b.n	27c86 <ble_att_svr_find_by_handle+0x6>
}
   27c92:	4770      	bx	lr
   27c94:	10004bd0 	.word	0x10004bd0

00027c98 <ble_att_svr_write_handle>:
{
   27c98:	b5f0      	push	{r4, r5, r6, r7, lr}
   27c9a:	b083      	sub	sp, #12
   27c9c:	4607      	mov	r7, r0
   27c9e:	4614      	mov	r4, r2
   27ca0:	461d      	mov	r5, r3
   27ca2:	9e08      	ldr	r6, [sp, #32]
    entry = ble_att_svr_find_by_handle(attr_handle);
   27ca4:	4608      	mov	r0, r1
   27ca6:	f7ff ffeb 	bl	27c80 <ble_att_svr_find_by_handle>
    if (entry == NULL) {
   27caa:	b140      	cbz	r0, 27cbe <ble_att_svr_write_handle+0x26>
   27cac:	4601      	mov	r1, r0
    rc = ble_att_svr_write(conn_handle, entry, offset, om, out_att_err);
   27cae:	9600      	str	r6, [sp, #0]
   27cb0:	462b      	mov	r3, r5
   27cb2:	4622      	mov	r2, r4
   27cb4:	4638      	mov	r0, r7
   27cb6:	f7ff fb97 	bl	273e8 <ble_att_svr_write>
}
   27cba:	b003      	add	sp, #12
   27cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (out_att_err != NULL) {
   27cbe:	b10e      	cbz	r6, 27cc4 <ble_att_svr_write_handle+0x2c>
            *out_att_err = BLE_ATT_ERR_INVALID_HANDLE;
   27cc0:	2301      	movs	r3, #1
   27cc2:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ENOENT;
   27cc4:	2005      	movs	r0, #5
   27cc6:	e7f8      	b.n	27cba <ble_att_svr_write_handle+0x22>

00027cc8 <ble_att_svr_prep_write>:
{
   27cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27ccc:	b084      	sub	sp, #16
   27cce:	4606      	mov	r6, r0
   27cd0:	460d      	mov	r5, r1
   27cd2:	4617      	mov	r7, r2
    *err_handle = 0; /* Silence unnecessary warning. */
   27cd4:	2300      	movs	r3, #0
   27cd6:	8013      	strh	r3, [r2, #0]
    rc = ble_att_svr_prep_validate(prep_list, err_handle);
   27cd8:	4611      	mov	r1, r2
   27cda:	4628      	mov	r0, r5
   27cdc:	f7ff fa40 	bl	27160 <ble_att_svr_prep_validate>
    if (rc != 0) {
   27ce0:	4680      	mov	r8, r0
   27ce2:	b9f8      	cbnz	r0, 27d24 <ble_att_svr_prep_write+0x5c>
    while (!SLIST_EMPTY(prep_list)) {
   27ce4:	682b      	ldr	r3, [r5, #0]
   27ce6:	b1eb      	cbz	r3, 27d24 <ble_att_svr_prep_write+0x5c>
        ble_att_svr_prep_extract(prep_list, &attr_handle, &om);
   27ce8:	aa03      	add	r2, sp, #12
   27cea:	f10d 010a 	add.w	r1, sp, #10
   27cee:	4628      	mov	r0, r5
   27cf0:	f7ff ff69 	bl	27bc6 <ble_att_svr_prep_extract>
        attr = ble_att_svr_find_by_handle(attr_handle);
   27cf4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   27cf8:	f7ff ffc2 	bl	27c80 <ble_att_svr_find_by_handle>
   27cfc:	4601      	mov	r1, r0
        rc = ble_att_svr_write(conn_handle, attr, 0, &om, &att_err);
   27cfe:	f10d 0309 	add.w	r3, sp, #9
   27d02:	9300      	str	r3, [sp, #0]
   27d04:	ab03      	add	r3, sp, #12
   27d06:	2200      	movs	r2, #0
   27d08:	4630      	mov	r0, r6
   27d0a:	f7ff fb6d 	bl	273e8 <ble_att_svr_write>
   27d0e:	4604      	mov	r4, r0
        os_mbuf_free_chain(om);
   27d10:	9803      	ldr	r0, [sp, #12]
   27d12:	f7f1 fc5c 	bl	195ce <os_mbuf_free_chain>
        if (rc != 0) {
   27d16:	2c00      	cmp	r4, #0
   27d18:	d0e4      	beq.n	27ce4 <ble_att_svr_prep_write+0x1c>
            *err_handle = attr_handle;
   27d1a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   27d1e:	803b      	strh	r3, [r7, #0]
            return att_err;
   27d20:	f89d 8009 	ldrb.w	r8, [sp, #9]
}
   27d24:	4640      	mov	r0, r8
   27d26:	b004      	add	sp, #16
   27d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027d2c <ble_att_svr_find_by_uuid>:
{
   27d2c:	b570      	push	{r4, r5, r6, lr}
   27d2e:	460d      	mov	r5, r1
   27d30:	4616      	mov	r6, r2
    if (prev == NULL) {
   27d32:	b108      	cbz	r0, 27d38 <ble_att_svr_find_by_uuid+0xc>
        entry = STAILQ_NEXT(prev, ha_next);
   27d34:	6804      	ldr	r4, [r0, #0]
   27d36:	e003      	b.n	27d40 <ble_att_svr_find_by_uuid+0x14>
        entry = STAILQ_FIRST(&ble_att_svr_list);
   27d38:	4b09      	ldr	r3, [pc, #36]	; (27d60 <ble_att_svr_find_by_uuid+0x34>)
   27d3a:	681c      	ldr	r4, [r3, #0]
   27d3c:	e000      	b.n	27d40 <ble_att_svr_find_by_uuid+0x14>
         entry = STAILQ_NEXT(entry, ha_next)) {
   27d3e:	6824      	ldr	r4, [r4, #0]
    for (;
   27d40:	b15c      	cbz	r4, 27d5a <ble_att_svr_find_by_uuid+0x2e>
         entry != NULL && entry->ha_handle_id <= end_handle;
   27d42:	8963      	ldrh	r3, [r4, #10]
   27d44:	42b3      	cmp	r3, r6
   27d46:	d807      	bhi.n	27d58 <ble_att_svr_find_by_uuid+0x2c>
        if (uuid == NULL || ble_uuid_cmp(entry->ha_uuid, uuid) == 0) {
   27d48:	b13d      	cbz	r5, 27d5a <ble_att_svr_find_by_uuid+0x2e>
   27d4a:	4629      	mov	r1, r5
   27d4c:	6860      	ldr	r0, [r4, #4]
   27d4e:	f009 fb22 	bl	31396 <ble_uuid_cmp>
   27d52:	2800      	cmp	r0, #0
   27d54:	d1f3      	bne.n	27d3e <ble_att_svr_find_by_uuid+0x12>
   27d56:	e000      	b.n	27d5a <ble_att_svr_find_by_uuid+0x2e>
    return NULL;
   27d58:	2400      	movs	r4, #0
}
   27d5a:	4620      	mov	r0, r4
   27d5c:	bd70      	pop	{r4, r5, r6, pc}
   27d5e:	bf00      	nop
   27d60:	10004bd0 	.word	0x10004bd0

00027d64 <ble_att_svr_build_read_type_rsp>:
{
   27d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27d68:	b08f      	sub	sp, #60	; 0x3c
   27d6a:	9005      	str	r0, [sp, #20]
   27d6c:	460d      	mov	r5, r1
   27d6e:	4616      	mov	r6, r2
   27d70:	461f      	mov	r7, r3
   27d72:	9b18      	ldr	r3, [sp, #96]	; 0x60
   27d74:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
    *att_err = 0;    /* Silence unnecessary warning. */
   27d78:	2200      	movs	r2, #0
   27d7a:	f88b 2000 	strb.w	r2, [fp]
    *err_handle = start_handle;
   27d7e:	991b      	ldr	r1, [sp, #108]	; 0x6c
   27d80:	800d      	strh	r5, [r1, #0]
    txom = *rxom;
   27d82:	f8d3 8000 	ldr.w	r8, [r3]
    *rxom = NULL;
   27d86:	601a      	str	r2, [r3, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   27d88:	f8b8 1010 	ldrh.w	r1, [r8, #16]
   27d8c:	4640      	mov	r0, r8
   27d8e:	f7f1 fcec 	bl	1976a <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_READ_TYPE_RSP, sizeof(*rsp), txom);
   27d92:	4642      	mov	r2, r8
   27d94:	2101      	movs	r1, #1
   27d96:	2009      	movs	r0, #9
   27d98:	f7ff f981 	bl	2709e <ble_att_cmd_prepare>
    if (rsp == NULL) {
   27d9c:	9007      	str	r0, [sp, #28]
   27d9e:	b148      	cbz	r0, 27db4 <ble_att_svr_build_read_type_rsp+0x50>
    mtu = ble_att_mtu(conn_handle);
   27da0:	9805      	ldr	r0, [sp, #20]
   27da2:	f7fe fd80 	bl	268a6 <ble_att_mtu>
   27da6:	4681      	mov	r9, r0
    prev_attr_len = 0;
   27da8:	f04f 0a00 	mov.w	sl, #0
    entry_written = 0;
   27dac:	f8cd a018 	str.w	sl, [sp, #24]
    entry = NULL;
   27db0:	4654      	mov	r4, sl
   27db2:	e029      	b.n	27e08 <ble_att_svr_build_read_type_rsp+0xa4>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   27db4:	2311      	movs	r3, #17
   27db6:	f88b 3000 	strb.w	r3, [fp]
        *err_handle = 0;
   27dba:	2300      	movs	r3, #0
   27dbc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   27dbe:	8013      	strh	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   27dc0:	2206      	movs	r2, #6
    prev_attr_len = 0;
   27dc2:	469a      	mov	sl, r3
    entry_written = 0;
   27dc4:	9306      	str	r3, [sp, #24]
        goto done;
   27dc6:	e052      	b.n	27e6e <ble_att_svr_build_read_type_rsp+0x10a>
                *err_handle = entry->ha_handle_id;
   27dc8:	8963      	ldrh	r3, [r4, #10]
   27dca:	991b      	ldr	r1, [sp, #108]	; 0x6c
   27dcc:	800b      	strh	r3, [r1, #0]
                goto done;
   27dce:	e04e      	b.n	27e6e <ble_att_svr_build_read_type_rsp+0x10a>
            } else if (prev_attr_len != attr_len) {
   27dd0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   27dd4:	4553      	cmp	r3, sl
   27dd6:	d14a      	bne.n	27e6e <ble_att_svr_build_read_type_rsp+0x10a>
            txomlen = OS_MBUF_PKTHDR(txom)->omp_len + 2 + attr_len;
   27dd8:	f8b8 3010 	ldrh.w	r3, [r8, #16]
   27ddc:	3302      	adds	r3, #2
   27dde:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   27de2:	440b      	add	r3, r1
            if (txomlen > mtu) {
   27de4:	4599      	cmp	r9, r3
   27de6:	db42      	blt.n	27e6e <ble_att_svr_build_read_type_rsp+0x10a>
            data = os_mbuf_extend(txom, 2 + attr_len);
   27de8:	3102      	adds	r1, #2
   27dea:	b289      	uxth	r1, r1
   27dec:	4640      	mov	r0, r8
   27dee:	f7f1 fe71 	bl	19ad4 <os_mbuf_extend>
            if (data == NULL) {
   27df2:	b398      	cbz	r0, 27e5c <ble_att_svr_build_read_type_rsp+0xf8>
            data->handle = htole16(entry->ha_handle_id);
   27df4:	8962      	ldrh	r2, [r4, #10]
   27df6:	f820 2b02 	strh.w	r2, [r0], #2
            memcpy(data->value, buf, attr_len);
   27dfa:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   27dfe:	a908      	add	r1, sp, #32
   27e00:	f7f2 ff26 	bl	1ac50 <memcpy>
            entry_written = 1;
   27e04:	2301      	movs	r3, #1
   27e06:	9306      	str	r3, [sp, #24]
        entry = ble_att_svr_find_by_uuid(entry, uuid, end_handle);
   27e08:	4632      	mov	r2, r6
   27e0a:	4639      	mov	r1, r7
   27e0c:	4620      	mov	r0, r4
   27e0e:	f7ff ff8d 	bl	27d2c <ble_att_svr_find_by_uuid>
        if (entry == NULL) {
   27e12:	4604      	mov	r4, r0
   27e14:	b350      	cbz	r0, 27e6c <ble_att_svr_build_read_type_rsp+0x108>
        if (entry->ha_handle_id >= start_handle) {
   27e16:	8943      	ldrh	r3, [r0, #10]
   27e18:	42ab      	cmp	r3, r5
   27e1a:	d3f5      	bcc.n	27e08 <ble_att_svr_build_read_type_rsp+0xa4>
            rc = ble_att_svr_read_flat(conn_handle, entry, 0, sizeof buf, buf,
   27e1c:	f8cd b008 	str.w	fp, [sp, #8]
   27e20:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   27e24:	9301      	str	r3, [sp, #4]
   27e26:	ab08      	add	r3, sp, #32
   27e28:	9300      	str	r3, [sp, #0]
   27e2a:	2313      	movs	r3, #19
   27e2c:	2200      	movs	r2, #0
   27e2e:	4601      	mov	r1, r0
   27e30:	9805      	ldr	r0, [sp, #20]
   27e32:	f7ff fc81 	bl	27738 <ble_att_svr_read_flat>
            if (rc != 0) {
   27e36:	4602      	mov	r2, r0
   27e38:	2800      	cmp	r0, #0
   27e3a:	d1c5      	bne.n	27dc8 <ble_att_svr_build_read_type_rsp+0x64>
            if (attr_len > mtu - 4) {
   27e3c:	f1a9 0303 	sub.w	r3, r9, #3
   27e40:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   27e44:	428b      	cmp	r3, r1
   27e46:	dc03      	bgt.n	27e50 <ble_att_svr_build_read_type_rsp+0xec>
                attr_len = mtu - 4;
   27e48:	f1a9 0304 	sub.w	r3, r9, #4
   27e4c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            if (prev_attr_len == 0) {
   27e50:	f1ba 0f00 	cmp.w	sl, #0
   27e54:	d1bc      	bne.n	27dd0 <ble_att_svr_build_read_type_rsp+0x6c>
                prev_attr_len = attr_len;
   27e56:	f8bd a036 	ldrh.w	sl, [sp, #54]	; 0x36
   27e5a:	e7bd      	b.n	27dd8 <ble_att_svr_build_read_type_rsp+0x74>
                *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   27e5c:	2311      	movs	r3, #17
   27e5e:	f88b 3000 	strb.w	r3, [fp]
                *err_handle = entry->ha_handle_id;
   27e62:	8963      	ldrh	r3, [r4, #10]
   27e64:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   27e66:	8013      	strh	r3, [r2, #0]
                rc = BLE_HS_ENOMEM;
   27e68:	2206      	movs	r2, #6
                goto done;
   27e6a:	e000      	b.n	27e6e <ble_att_svr_build_read_type_rsp+0x10a>
            rc = BLE_HS_ENOENT;
   27e6c:	2205      	movs	r2, #5
    if (!entry_written) {
   27e6e:	9b06      	ldr	r3, [sp, #24]
   27e70:	b943      	cbnz	r3, 27e84 <ble_att_svr_build_read_type_rsp+0x120>
        if (*att_err == 0) {
   27e72:	f89b 3000 	ldrb.w	r3, [fp]
   27e76:	b913      	cbnz	r3, 27e7e <ble_att_svr_build_read_type_rsp+0x11a>
            *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   27e78:	230a      	movs	r3, #10
   27e7a:	f88b 3000 	strb.w	r3, [fp]
        if (rc == 0) {
   27e7e:	b94a      	cbnz	r2, 27e94 <ble_att_svr_build_read_type_rsp+0x130>
            rc = BLE_HS_ENOENT;
   27e80:	2205      	movs	r2, #5
   27e82:	e007      	b.n	27e94 <ble_att_svr_build_read_type_rsp+0x130>
        *att_err = 0;
   27e84:	2200      	movs	r2, #0
   27e86:	f88b 2000 	strb.w	r2, [fp]
        rsp->batp_length = sizeof(*data) + prev_attr_len;
   27e8a:	f10a 0a02 	add.w	sl, sl, #2
   27e8e:	9b07      	ldr	r3, [sp, #28]
   27e90:	f883 a000 	strb.w	sl, [r3]
    *out_txom = txom;
   27e94:	9b19      	ldr	r3, [sp, #100]	; 0x64
   27e96:	f8c3 8000 	str.w	r8, [r3]
}
   27e9a:	4610      	mov	r0, r2
   27e9c:	b00f      	add	sp, #60	; 0x3c
   27e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00027ea2 <ble_att_svr_ticks_until_tmo>:
    if (SLIST_EMPTY(&svr->basc_prep_list)) {
   27ea2:	6802      	ldr	r2, [r0, #0]
   27ea4:	b11a      	cbz	r2, 27eae <ble_att_svr_ticks_until_tmo+0xc>
    time_diff = svr->basc_prep_timeout_at - now;
   27ea6:	6840      	ldr	r0, [r0, #4]
    if (time_diff < 0) {
   27ea8:	1a40      	subs	r0, r0, r1
   27eaa:	d403      	bmi.n	27eb4 <ble_att_svr_ticks_until_tmo+0x12>
}
   27eac:	4770      	bx	lr
        return BLE_HS_FOREVER;
   27eae:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   27eb2:	4770      	bx	lr
        return 0;
   27eb4:	2000      	movs	r0, #0
   27eb6:	e7f9      	b.n	27eac <ble_att_svr_ticks_until_tmo+0xa>

00027eb8 <ble_att_svr_read_handle>:
{
   27eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   27eba:	b083      	sub	sp, #12
   27ebc:	4607      	mov	r7, r0
   27ebe:	4614      	mov	r4, r2
   27ec0:	461d      	mov	r5, r3
   27ec2:	9e08      	ldr	r6, [sp, #32]
    entry = ble_att_svr_find_by_handle(attr_handle);
   27ec4:	4608      	mov	r0, r1
   27ec6:	f7ff fedb 	bl	27c80 <ble_att_svr_find_by_handle>
    if (entry == NULL) {
   27eca:	b140      	cbz	r0, 27ede <ble_att_svr_read_handle+0x26>
   27ecc:	4601      	mov	r1, r0
    rc = ble_att_svr_read(conn_handle, entry, offset, om, out_att_err);
   27ece:	9600      	str	r6, [sp, #0]
   27ed0:	462b      	mov	r3, r5
   27ed2:	4622      	mov	r2, r4
   27ed4:	4638      	mov	r0, r7
   27ed6:	f7ff fa56 	bl	27386 <ble_att_svr_read>
}
   27eda:	b003      	add	sp, #12
   27edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (out_att_err != NULL) {
   27ede:	b10e      	cbz	r6, 27ee4 <ble_att_svr_read_handle+0x2c>
            *out_att_err = BLE_ATT_ERR_INVALID_HANDLE;
   27ee0:	2301      	movs	r3, #1
   27ee2:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ENOENT;
   27ee4:	2005      	movs	r0, #5
   27ee6:	e7f8      	b.n	27eda <ble_att_svr_read_handle+0x22>

00027ee8 <ble_att_svr_build_read_mult_rsp>:
{
   27ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27eec:	b084      	sub	sp, #16
   27eee:	4680      	mov	r8, r0
   27ef0:	460c      	mov	r4, r1
   27ef2:	4691      	mov	r9, r2
   27ef4:	461e      	mov	r6, r3
    mtu = ble_att_mtu(conn_handle);
   27ef6:	f7fe fcd6 	bl	268a6 <ble_att_mtu>
   27efa:	4607      	mov	r7, r0
    rc = ble_att_svr_pkt(rxom, &txom, att_err);
   27efc:	4632      	mov	r2, r6
   27efe:	a903      	add	r1, sp, #12
   27f00:	4620      	mov	r0, r4
   27f02:	f7ff fae6 	bl	274d2 <ble_att_svr_pkt>
    if (rc != 0) {
   27f06:	4682      	mov	sl, r0
   27f08:	b148      	cbz	r0, 27f1e <ble_att_svr_build_read_mult_rsp+0x36>
        *err_handle = 0;
   27f0a:	2300      	movs	r3, #0
   27f0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   27f0e:	8013      	strh	r3, [r2, #0]
    *out_txom = txom;
   27f10:	9b03      	ldr	r3, [sp, #12]
   27f12:	f8c9 3000 	str.w	r3, [r9]
}
   27f16:	4650      	mov	r0, sl
   27f18:	b004      	add	sp, #16
   27f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_MULT_RSP, 0, txom) == NULL) {
   27f1e:	9a03      	ldr	r2, [sp, #12]
   27f20:	2100      	movs	r1, #0
   27f22:	200f      	movs	r0, #15
   27f24:	f7ff f8bb 	bl	2709e <ble_att_cmd_prepare>
   27f28:	b318      	cbz	r0, 27f72 <ble_att_svr_build_read_mult_rsp+0x8a>
    while (OS_MBUF_PKTLEN(*rxom) >= 2 && OS_MBUF_PKTLEN(txom) < mtu) {
   27f2a:	6823      	ldr	r3, [r4, #0]
   27f2c:	8a1b      	ldrh	r3, [r3, #16]
   27f2e:	2b01      	cmp	r3, #1
   27f30:	d9ee      	bls.n	27f10 <ble_att_svr_build_read_mult_rsp+0x28>
   27f32:	9b03      	ldr	r3, [sp, #12]
   27f34:	8a1b      	ldrh	r3, [r3, #16]
   27f36:	42bb      	cmp	r3, r7
   27f38:	d2ea      	bcs.n	27f10 <ble_att_svr_build_read_mult_rsp+0x28>
        rc = ble_att_svr_pullup_req_base(rxom, 2, att_err);
   27f3a:	4632      	mov	r2, r6
   27f3c:	2102      	movs	r1, #2
   27f3e:	4620      	mov	r0, r4
   27f40:	f7ff fa84 	bl	2744c <ble_att_svr_pullup_req_base>
        if (rc != 0) {
   27f44:	b9e8      	cbnz	r0, 27f82 <ble_att_svr_build_read_mult_rsp+0x9a>
        handle = get_le16((*rxom)->om_data);
   27f46:	6823      	ldr	r3, [r4, #0]
   27f48:	6818      	ldr	r0, [r3, #0]
   27f4a:	f7f0 ff80 	bl	18e4e <get_le16>
   27f4e:	4605      	mov	r5, r0
        os_mbuf_adj(*rxom, 2);
   27f50:	2102      	movs	r1, #2
   27f52:	6820      	ldr	r0, [r4, #0]
   27f54:	f7f1 fc09 	bl	1976a <os_mbuf_adj>
        rc = ble_att_svr_read_handle(conn_handle, handle, 0, txom, att_err);
   27f58:	9600      	str	r6, [sp, #0]
   27f5a:	9b03      	ldr	r3, [sp, #12]
   27f5c:	2200      	movs	r2, #0
   27f5e:	4629      	mov	r1, r5
   27f60:	4640      	mov	r0, r8
   27f62:	f7ff ffa9 	bl	27eb8 <ble_att_svr_read_handle>
        if (rc != 0) {
   27f66:	2800      	cmp	r0, #0
   27f68:	d0df      	beq.n	27f2a <ble_att_svr_build_read_mult_rsp+0x42>
            *err_handle = handle;
   27f6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   27f6c:	8015      	strh	r5, [r2, #0]
        rc = ble_att_svr_read_handle(conn_handle, handle, 0, txom, att_err);
   27f6e:	4682      	mov	sl, r0
            goto done;
   27f70:	e7ce      	b.n	27f10 <ble_att_svr_build_read_mult_rsp+0x28>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   27f72:	2311      	movs	r3, #17
   27f74:	7033      	strb	r3, [r6, #0]
        *err_handle = 0;
   27f76:	2300      	movs	r3, #0
   27f78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   27f7a:	8013      	strh	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   27f7c:	f04f 0a06 	mov.w	sl, #6
        goto done;
   27f80:	e7c6      	b.n	27f10 <ble_att_svr_build_read_mult_rsp+0x28>
            *err_handle = 0;
   27f82:	2200      	movs	r2, #0
   27f84:	990c      	ldr	r1, [sp, #48]	; 0x30
   27f86:	800a      	strh	r2, [r1, #0]
        rc = ble_att_svr_pullup_req_base(rxom, 2, att_err);
   27f88:	4682      	mov	sl, r0
            goto done;
   27f8a:	e7c1      	b.n	27f10 <ble_att_svr_build_read_mult_rsp+0x28>

00027f8c <ble_att_svr_read_local>:
{
   27f8c:	b570      	push	{r4, r5, r6, lr}
   27f8e:	b082      	sub	sp, #8
   27f90:	4604      	mov	r4, r0
   27f92:	460d      	mov	r5, r1
    om = ble_hs_mbuf_bare_pkt();
   27f94:	f007 ffe5 	bl	2ff62 <ble_hs_mbuf_bare_pkt>
    if (om == NULL) {
   27f98:	4606      	mov	r6, r0
   27f9a:	b158      	cbz	r0, 27fb4 <ble_att_svr_read_local+0x28>
    rc = ble_att_svr_read_handle(BLE_HS_CONN_HANDLE_NONE, attr_handle, 0, om,
   27f9c:	2200      	movs	r2, #0
   27f9e:	9200      	str	r2, [sp, #0]
   27fa0:	4603      	mov	r3, r0
   27fa2:	4621      	mov	r1, r4
   27fa4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   27fa8:	f7ff ff86 	bl	27eb8 <ble_att_svr_read_handle>
    if (rc != 0) {
   27fac:	4604      	mov	r4, r0
   27fae:	b910      	cbnz	r0, 27fb6 <ble_att_svr_read_local+0x2a>
    *out_om = om;
   27fb0:	602e      	str	r6, [r5, #0]
    return 0;
   27fb2:	e003      	b.n	27fbc <ble_att_svr_read_local+0x30>
        rc = BLE_HS_ENOMEM;
   27fb4:	2406      	movs	r4, #6
    os_mbuf_free_chain(om);
   27fb6:	4630      	mov	r0, r6
   27fb8:	f7f1 fb09 	bl	195ce <os_mbuf_free_chain>
}
   27fbc:	4620      	mov	r0, r4
   27fbe:	b002      	add	sp, #8
   27fc0:	bd70      	pop	{r4, r5, r6, pc}

00027fc2 <ble_att_svr_tx_error_rsp>:
{
   27fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27fc4:	4605      	mov	r5, r0
   27fc6:	460c      	mov	r4, r1
   27fc8:	4617      	mov	r7, r2
   27fca:	461e      	mov	r6, r3
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_ERROR_RSP, sizeof(*rsp), txom);
   27fcc:	460a      	mov	r2, r1
   27fce:	2104      	movs	r1, #4
   27fd0:	2001      	movs	r0, #1
   27fd2:	f7ff f864 	bl	2709e <ble_att_cmd_prepare>
    if (rsp == NULL) {
   27fd6:	b150      	cbz	r0, 27fee <ble_att_svr_tx_error_rsp+0x2c>
    rsp->baep_req_op = req_op;
   27fd8:	7007      	strb	r7, [r0, #0]
    rsp->baep_handle = htole16(handle);
   27fda:	f8a0 6001 	strh.w	r6, [r0, #1]
    rsp->baep_error_code = error_code;
   27fde:	f89d 2018 	ldrb.w	r2, [sp, #24]
   27fe2:	70c2      	strb	r2, [r0, #3]
    return ble_att_tx(conn_handle, txom);
   27fe4:	4621      	mov	r1, r4
   27fe6:	4628      	mov	r0, r5
   27fe8:	f7ff f87a 	bl	270e0 <ble_att_tx>
}
   27fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   27fee:	2006      	movs	r0, #6
   27ff0:	e7fc      	b.n	27fec <ble_att_svr_tx_error_rsp+0x2a>
	...

00027ff4 <ble_att_svr_tx_rsp>:
{
   27ff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27ff8:	b085      	sub	sp, #20
   27ffa:	4607      	mov	r7, r0
   27ffc:	4614      	mov	r4, r2
   27ffe:	461e      	mov	r6, r3
   28000:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
    if (hs_status != 0 && err_status == 0) {
   28004:	4689      	mov	r9, r1
   28006:	b111      	cbz	r1, 2800e <ble_att_svr_tx_rsp+0x1a>
   28008:	f1b8 0f00 	cmp.w	r8, #0
   2800c:	d03d      	beq.n	2808a <ble_att_svr_tx_rsp+0x96>
        ble_hs_lock();
   2800e:	f005 ffbf 	bl	2df90 <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   28012:	aa03      	add	r2, sp, #12
   28014:	a902      	add	r1, sp, #8
   28016:	4638      	mov	r0, r7
   28018:	f7fe fb1f 	bl	2665a <ble_att_conn_chan_find>
        if (rc != 0) {
   2801c:	4605      	mov	r5, r0
   2801e:	b918      	cbnz	r0, 28028 <ble_att_svr_tx_rsp+0x34>
            if (hs_status == 0) {
   28020:	f1b9 0f00 	cmp.w	r9, #0
   28024:	d018      	beq.n	28058 <ble_att_svr_tx_rsp+0x64>
   28026:	464d      	mov	r5, r9
        ble_hs_unlock();
   28028:	f005 ffb6 	bl	2df98 <ble_hs_unlock>
        if (hs_status != 0) {
   2802c:	b375      	cbz	r5, 2808c <ble_att_svr_tx_rsp+0x98>
            STATS_INC(ble_att_stats, error_rsp_tx);
   2802e:	4a1b      	ldr	r2, [pc, #108]	; (2809c <ble_att_svr_tx_rsp+0xa8>)
   28030:	6913      	ldr	r3, [r2, #16]
   28032:	3301      	adds	r3, #1
   28034:	6113      	str	r3, [r2, #16]
            if (om == NULL) {
   28036:	b324      	cbz	r4, 28082 <ble_att_svr_tx_rsp+0x8e>
                os_mbuf_adj(om, OS_MBUF_PKTLEN(om));
   28038:	8a21      	ldrh	r1, [r4, #16]
   2803a:	4620      	mov	r0, r4
   2803c:	f7f1 fb95 	bl	1976a <os_mbuf_adj>
            if (om != NULL) {
   28040:	b324      	cbz	r4, 2808c <ble_att_svr_tx_rsp+0x98>
                ble_att_svr_tx_error_rsp(conn_handle, om, att_op,
   28042:	f8cd 8000 	str.w	r8, [sp]
   28046:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   2804a:	4632      	mov	r2, r6
   2804c:	4621      	mov	r1, r4
   2804e:	4638      	mov	r0, r7
   28050:	f7ff ffb7 	bl	27fc2 <ble_att_svr_tx_error_rsp>
                om = NULL;
   28054:	2400      	movs	r4, #0
   28056:	e019      	b.n	2808c <ble_att_svr_tx_rsp+0x98>
                ble_att_inc_tx_stat(om->om_data[0]);
   28058:	6823      	ldr	r3, [r4, #0]
   2805a:	7818      	ldrb	r0, [r3, #0]
   2805c:	f7fe fb04 	bl	26668 <ble_att_inc_tx_stat>
                ble_att_truncate_to_mtu(chan, om);
   28060:	4621      	mov	r1, r4
   28062:	9803      	ldr	r0, [sp, #12]
   28064:	f7fe fc11 	bl	2688a <ble_att_truncate_to_mtu>
                hs_status = ble_l2cap_tx(conn, chan, om);
   28068:	4622      	mov	r2, r4
   2806a:	9903      	ldr	r1, [sp, #12]
   2806c:	9802      	ldr	r0, [sp, #8]
   2806e:	f008 fc73 	bl	30958 <ble_l2cap_tx>
                if (hs_status != 0) {
   28072:	4605      	mov	r5, r0
   28074:	b908      	cbnz	r0, 2807a <ble_att_svr_tx_rsp+0x86>
                om = NULL;
   28076:	2400      	movs	r4, #0
   28078:	e7d6      	b.n	28028 <ble_att_svr_tx_rsp+0x34>
                    err_status = BLE_ATT_ERR_UNLIKELY;
   2807a:	f04f 080e 	mov.w	r8, #14
                om = NULL;
   2807e:	2400      	movs	r4, #0
   28080:	e7d2      	b.n	28028 <ble_att_svr_tx_rsp+0x34>
                om = ble_hs_mbuf_l2cap_pkt();
   28082:	f007 ff78 	bl	2ff76 <ble_hs_mbuf_l2cap_pkt>
   28086:	4604      	mov	r4, r0
   28088:	e7da      	b.n	28040 <ble_att_svr_tx_rsp+0x4c>
   2808a:	460d      	mov	r5, r1
    os_mbuf_free_chain(om);
   2808c:	4620      	mov	r0, r4
   2808e:	f7f1 fa9e 	bl	195ce <os_mbuf_free_chain>
}
   28092:	4628      	mov	r0, r5
   28094:	b005      	add	sp, #20
   28096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2809a:	bf00      	nop
   2809c:	10004ac0 	.word	0x10004ac0

000280a0 <ble_att_svr_rx_mtu>:
{
   280a0:	b570      	push	{r4, r5, r6, lr}
   280a2:	b086      	sub	sp, #24
   280a4:	4605      	mov	r5, r0
   280a6:	460c      	mov	r4, r1
    txom = NULL;
   280a8:	2300      	movs	r3, #0
   280aa:	9303      	str	r3, [sp, #12]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*cmd), &att_err);
   280ac:	f10d 020b 	add.w	r2, sp, #11
   280b0:	2102      	movs	r1, #2
   280b2:	4620      	mov	r0, r4
   280b4:	f7ff f9ca 	bl	2744c <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   280b8:	b180      	cbz	r0, 280dc <ble_att_svr_rx_mtu+0x3c>
   280ba:	4601      	mov	r1, r0
    mtu = 0;
   280bc:	2600      	movs	r6, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_MTU_REQ,
   280be:	2300      	movs	r3, #0
   280c0:	9301      	str	r3, [sp, #4]
   280c2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   280c6:	9300      	str	r3, [sp, #0]
   280c8:	2302      	movs	r3, #2
   280ca:	9a03      	ldr	r2, [sp, #12]
   280cc:	4628      	mov	r0, r5
   280ce:	f7ff ff91 	bl	27ff4 <ble_att_svr_tx_rsp>
    if (rc == 0) {
   280d2:	4604      	mov	r4, r0
   280d4:	b170      	cbz	r0, 280f4 <ble_att_svr_rx_mtu+0x54>
}
   280d6:	4620      	mov	r0, r4
   280d8:	b006      	add	sp, #24
   280da:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_att_mtu_cmd *)(*rxom)->om_data;
   280dc:	6823      	ldr	r3, [r4, #0]
   280de:	681b      	ldr	r3, [r3, #0]
    mtu = le16toh(cmd->bamc_mtu);
   280e0:	881e      	ldrh	r6, [r3, #0]
    rc = ble_att_svr_build_mtu_rsp(conn_handle, rxom, &txom, &att_err);
   280e2:	f10d 030b 	add.w	r3, sp, #11
   280e6:	aa03      	add	r2, sp, #12
   280e8:	4621      	mov	r1, r4
   280ea:	4628      	mov	r0, r5
   280ec:	f7ff f9ba 	bl	27464 <ble_att_svr_build_mtu_rsp>
   280f0:	4601      	mov	r1, r0
    if (rc != 0) {
   280f2:	e7e4      	b.n	280be <ble_att_svr_rx_mtu+0x1e>
        ble_hs_lock();
   280f4:	f005 ff4c 	bl	2df90 <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   280f8:	aa05      	add	r2, sp, #20
   280fa:	a904      	add	r1, sp, #16
   280fc:	4628      	mov	r0, r5
   280fe:	f7fe faac 	bl	2665a <ble_att_conn_chan_find>
        if (rc == 0) {
   28102:	4604      	mov	r4, r0
   28104:	b148      	cbz	r0, 2811a <ble_att_svr_rx_mtu+0x7a>
        ble_hs_unlock();
   28106:	f005 ff47 	bl	2df98 <ble_hs_unlock>
        if (rc == 0) {
   2810a:	2c00      	cmp	r4, #0
   2810c:	d1e3      	bne.n	280d6 <ble_att_svr_rx_mtu+0x36>
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
   2810e:	4632      	mov	r2, r6
   28110:	2104      	movs	r1, #4
   28112:	4628      	mov	r0, r5
   28114:	f002 fb36 	bl	2a784 <ble_gap_mtu_event>
    return rc;
   28118:	e7dd      	b.n	280d6 <ble_att_svr_rx_mtu+0x36>
            ble_att_set_peer_mtu(chan, mtu);
   2811a:	4631      	mov	r1, r6
   2811c:	9805      	ldr	r0, [sp, #20]
   2811e:	f7fe fb9f 	bl	26860 <ble_att_set_peer_mtu>
            chan->flags |= BLE_L2CAP_CHAN_F_TXED_MTU;
   28122:	9805      	ldr	r0, [sp, #20]
   28124:	7b83      	ldrb	r3, [r0, #14]
   28126:	f043 0301 	orr.w	r3, r3, #1
   2812a:	7383      	strb	r3, [r0, #14]
            mtu = ble_att_chan_mtu(chan);
   2812c:	f7fe fb9d 	bl	2686a <ble_att_chan_mtu>
   28130:	4606      	mov	r6, r0
   28132:	e7e8      	b.n	28106 <ble_att_svr_rx_mtu+0x66>

00028134 <ble_att_svr_rx_find_info>:
{
   28134:	b570      	push	{r4, r5, r6, lr}
   28136:	b084      	sub	sp, #16
   28138:	4606      	mov	r6, r0
   2813a:	460c      	mov	r4, r1
    txom = NULL;
   2813c:	2300      	movs	r3, #0
   2813e:	9303      	str	r3, [sp, #12]
    att_err = 0;
   28140:	f88d 300b 	strb.w	r3, [sp, #11]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   28144:	f10d 020b 	add.w	r2, sp, #11
   28148:	2104      	movs	r1, #4
   2814a:	4620      	mov	r0, r4
   2814c:	f7ff f97e 	bl	2744c <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   28150:	bb20      	cbnz	r0, 2819c <ble_att_svr_rx_find_info+0x68>
    req = (struct ble_att_find_info_req *)(*rxom)->om_data;
   28152:	6823      	ldr	r3, [r4, #0]
   28154:	681b      	ldr	r3, [r3, #0]
    start_handle = le16toh(req->bafq_start_handle);
   28156:	881d      	ldrh	r5, [r3, #0]
    end_handle = le16toh(req->bafq_end_handle);
   28158:	885a      	ldrh	r2, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   2815a:	4295      	cmp	r5, r2
   2815c:	d800      	bhi.n	28160 <ble_att_svr_rx_find_info+0x2c>
   2815e:	b975      	cbnz	r5, 2817e <ble_att_svr_rx_find_info+0x4a>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   28160:	2301      	movs	r3, #1
   28162:	f88d 300b 	strb.w	r3, [sp, #11]
        rc = BLE_HS_EBADDATA;
   28166:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_FIND_INFO_REQ,
   28168:	9501      	str	r5, [sp, #4]
   2816a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2816e:	9300      	str	r3, [sp, #0]
   28170:	2304      	movs	r3, #4
   28172:	9a03      	ldr	r2, [sp, #12]
   28174:	4630      	mov	r0, r6
   28176:	f7ff ff3d 	bl	27ff4 <ble_att_svr_tx_rsp>
}
   2817a:	b004      	add	sp, #16
   2817c:	bd70      	pop	{r4, r5, r6, pc}
    rc = ble_att_svr_build_find_info_rsp(conn_handle,
   2817e:	f10d 030b 	add.w	r3, sp, #11
   28182:	9301      	str	r3, [sp, #4]
   28184:	ab03      	add	r3, sp, #12
   28186:	9300      	str	r3, [sp, #0]
   28188:	4623      	mov	r3, r4
   2818a:	4629      	mov	r1, r5
   2818c:	4630      	mov	r0, r6
   2818e:	f7ff fa33 	bl	275f8 <ble_att_svr_build_find_info_rsp>
    if (rc != 0) {
   28192:	4601      	mov	r1, r0
   28194:	2800      	cmp	r0, #0
   28196:	d1e7      	bne.n	28168 <ble_att_svr_rx_find_info+0x34>
    err_handle = 0;
   28198:	2500      	movs	r5, #0
   2819a:	e7e5      	b.n	28168 <ble_att_svr_rx_find_info+0x34>
   2819c:	4601      	mov	r1, r0
        err_handle = 0;
   2819e:	2500      	movs	r5, #0
   281a0:	e7e2      	b.n	28168 <ble_att_svr_rx_find_info+0x34>

000281a2 <ble_att_svr_rx_find_type_value>:
{
   281a2:	b570      	push	{r4, r5, r6, lr}
   281a4:	b088      	sub	sp, #32
   281a6:	4605      	mov	r5, r0
   281a8:	460c      	mov	r4, r1
    txom = NULL;
   281aa:	2300      	movs	r3, #0
   281ac:	9306      	str	r3, [sp, #24]
    att_err = 0;
   281ae:	f88d 3017 	strb.w	r3, [sp, #23]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   281b2:	f10d 0217 	add.w	r2, sp, #23
   281b6:	2106      	movs	r1, #6
   281b8:	4620      	mov	r0, r4
   281ba:	f7ff f947 	bl	2744c <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   281be:	bb58      	cbnz	r0, 28218 <ble_att_svr_rx_find_type_value+0x76>
    req = (struct ble_att_find_type_value_req *)(*rxom)->om_data;
   281c0:	6823      	ldr	r3, [r4, #0]
   281c2:	681b      	ldr	r3, [r3, #0]
    start_handle = le16toh(req->bavq_start_handle);
   281c4:	881e      	ldrh	r6, [r3, #0]
    end_handle = le16toh(req->bavq_end_handle);
   281c6:	885a      	ldrh	r2, [r3, #2]
    attr_type = (ble_uuid16_t) BLE_UUID16_INIT(le16toh(req->bavq_attr_type));
   281c8:	889b      	ldrh	r3, [r3, #4]
   281ca:	2110      	movs	r1, #16
   281cc:	f88d 101c 	strb.w	r1, [sp, #28]
   281d0:	f8ad 301e 	strh.w	r3, [sp, #30]
    if (start_handle > end_handle || start_handle == 0) {
   281d4:	4296      	cmp	r6, r2
   281d6:	d800      	bhi.n	281da <ble_att_svr_rx_find_type_value+0x38>
   281d8:	b976      	cbnz	r6, 281f8 <ble_att_svr_rx_find_type_value+0x56>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   281da:	2301      	movs	r3, #1
   281dc:	f88d 3017 	strb.w	r3, [sp, #23]
        rc = BLE_HS_EBADDATA;
   281e0:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom,
   281e2:	9601      	str	r6, [sp, #4]
   281e4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   281e8:	9300      	str	r3, [sp, #0]
   281ea:	2306      	movs	r3, #6
   281ec:	9a06      	ldr	r2, [sp, #24]
   281ee:	4628      	mov	r0, r5
   281f0:	f7ff ff00 	bl	27ff4 <ble_att_svr_tx_rsp>
}
   281f4:	b008      	add	sp, #32
   281f6:	bd70      	pop	{r4, r5, r6, pc}
    rc = ble_att_svr_build_find_type_value_rsp(conn_handle, start_handle,
   281f8:	f10d 0317 	add.w	r3, sp, #23
   281fc:	9302      	str	r3, [sp, #8]
   281fe:	ab06      	add	r3, sp, #24
   28200:	9301      	str	r3, [sp, #4]
   28202:	9400      	str	r4, [sp, #0]
   28204:	9b07      	ldr	r3, [sp, #28]
   28206:	4631      	mov	r1, r6
   28208:	4628      	mov	r0, r5
   2820a:	f7ff fb65 	bl	278d8 <ble_att_svr_build_find_type_value_rsp>
    if (rc != 0) {
   2820e:	4601      	mov	r1, r0
   28210:	2800      	cmp	r0, #0
   28212:	d1e6      	bne.n	281e2 <ble_att_svr_rx_find_type_value+0x40>
    err_handle = 0;
   28214:	2600      	movs	r6, #0
   28216:	e7e4      	b.n	281e2 <ble_att_svr_rx_find_type_value+0x40>
   28218:	4601      	mov	r1, r0
   2821a:	2600      	movs	r6, #0
   2821c:	e7e1      	b.n	281e2 <ble_att_svr_rx_find_type_value+0x40>

0002821e <ble_att_svr_rx_read_type>:
{
   2821e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28222:	b08c      	sub	sp, #48	; 0x30
   28224:	4605      	mov	r5, r0
   28226:	460c      	mov	r4, r1
    txom = NULL;
   28228:	2300      	movs	r3, #0
   2822a:	930b      	str	r3, [sp, #44]	; 0x2c
    err_handle = 0;
   2822c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    att_err = 0;
   28230:	f88d 3013 	strb.w	r3, [sp, #19]
    pktlen = OS_MBUF_PKTLEN(*rxom);
   28234:	680b      	ldr	r3, [r1, #0]
   28236:	8a1e      	ldrh	r6, [r3, #16]
    if (pktlen != sizeof(*req) + 2 && pktlen != sizeof(*req) + 16) {
   28238:	2e06      	cmp	r6, #6
   2823a:	d001      	beq.n	28240 <ble_att_svr_rx_read_type+0x22>
   2823c:	2e14      	cmp	r6, #20
   2823e:	d132      	bne.n	282a6 <ble_att_svr_rx_read_type+0x88>
    rc = ble_att_svr_pullup_req_base(rxom, pktlen, &att_err);
   28240:	f10d 0213 	add.w	r2, sp, #19
   28244:	4631      	mov	r1, r6
   28246:	4620      	mov	r0, r4
   28248:	f7ff f900 	bl	2744c <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   2824c:	4601      	mov	r1, r0
   2824e:	bb58      	cbnz	r0, 282a8 <ble_att_svr_rx_read_type+0x8a>
    req = (struct ble_att_read_type_req *)(*rxom)->om_data;
   28250:	6821      	ldr	r1, [r4, #0]
   28252:	680b      	ldr	r3, [r1, #0]
    start_handle = le16toh(req->batq_start_handle);
   28254:	881a      	ldrh	r2, [r3, #0]
   28256:	b297      	uxth	r7, r2
    end_handle = le16toh(req->batq_end_handle);
   28258:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   2825c:	4547      	cmp	r7, r8
   2825e:	d800      	bhi.n	28262 <ble_att_svr_rx_read_type+0x44>
   28260:	b937      	cbnz	r7, 28270 <ble_att_svr_rx_read_type+0x52>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   28262:	2301      	movs	r3, #1
   28264:	f88d 3013 	strb.w	r3, [sp, #19]
        err_handle = start_handle;
   28268:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
        rc = BLE_HS_EBADDATA;
   2826c:	210a      	movs	r1, #10
        goto done;
   2826e:	e01b      	b.n	282a8 <ble_att_svr_rx_read_type+0x8a>
    rc = ble_uuid_init_from_att_mbuf(&uuid, *rxom, sizeof(*req),
   28270:	1f33      	subs	r3, r6, #4
   28272:	2204      	movs	r2, #4
   28274:	a805      	add	r0, sp, #20
   28276:	f009 f927 	bl	314c8 <ble_uuid_init_from_att_mbuf>
    if (rc != 0) {
   2827a:	b118      	cbz	r0, 28284 <ble_att_svr_rx_read_type+0x66>
        att_err = BLE_ATT_ERR_INVALID_PDU;
   2827c:	2104      	movs	r1, #4
   2827e:	f88d 1013 	strb.w	r1, [sp, #19]
        goto done;
   28282:	e011      	b.n	282a8 <ble_att_svr_rx_read_type+0x8a>
    rc = ble_att_svr_build_read_type_rsp(conn_handle, start_handle, end_handle,
   28284:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   28288:	9303      	str	r3, [sp, #12]
   2828a:	f10d 0313 	add.w	r3, sp, #19
   2828e:	9302      	str	r3, [sp, #8]
   28290:	ab0b      	add	r3, sp, #44	; 0x2c
   28292:	9301      	str	r3, [sp, #4]
   28294:	9400      	str	r4, [sp, #0]
   28296:	ab05      	add	r3, sp, #20
   28298:	4642      	mov	r2, r8
   2829a:	4639      	mov	r1, r7
   2829c:	4628      	mov	r0, r5
   2829e:	f7ff fd61 	bl	27d64 <ble_att_svr_build_read_type_rsp>
   282a2:	4601      	mov	r1, r0
    if (rc != 0) {
   282a4:	e000      	b.n	282a8 <ble_att_svr_rx_read_type+0x8a>
        rc = BLE_HS_EBADDATA;
   282a6:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_TYPE_REQ,
   282a8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   282ac:	9301      	str	r3, [sp, #4]
   282ae:	f89d 3013 	ldrb.w	r3, [sp, #19]
   282b2:	9300      	str	r3, [sp, #0]
   282b4:	2308      	movs	r3, #8
   282b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   282b8:	4628      	mov	r0, r5
   282ba:	f7ff fe9b 	bl	27ff4 <ble_att_svr_tx_rsp>
}
   282be:	b00c      	add	sp, #48	; 0x30
   282c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000282c4 <ble_att_svr_rx_read>:
{
   282c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   282c8:	b084      	sub	sp, #16
   282ca:	4605      	mov	r5, r0
   282cc:	460c      	mov	r4, r1
    att_err = 0;
   282ce:	2300      	movs	r3, #0
   282d0:	f88d 300f 	strb.w	r3, [sp, #15]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   282d4:	f10d 020f 	add.w	r2, sp, #15
   282d8:	2102      	movs	r1, #2
   282da:	4620      	mov	r0, r4
   282dc:	f7ff f8b6 	bl	2744c <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   282e0:	b170      	cbz	r0, 28300 <ble_att_svr_rx_read+0x3c>
   282e2:	4601      	mov	r1, r0
    err_handle = 0;
   282e4:	2600      	movs	r6, #0
    txom = NULL;
   282e6:	4637      	mov	r7, r6
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_REQ,
   282e8:	9601      	str	r6, [sp, #4]
   282ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
   282ee:	9300      	str	r3, [sp, #0]
   282f0:	230a      	movs	r3, #10
   282f2:	463a      	mov	r2, r7
   282f4:	4628      	mov	r0, r5
   282f6:	f7ff fe7d 	bl	27ff4 <ble_att_svr_tx_rsp>
}
   282fa:	b004      	add	sp, #16
   282fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    req = (struct ble_att_read_req *)(*rxom)->om_data;
   28300:	6827      	ldr	r7, [r4, #0]
   28302:	683b      	ldr	r3, [r7, #0]
    err_handle = le16toh(req->barq_handle);
   28304:	881e      	ldrh	r6, [r3, #0]
    *rxom = NULL;
   28306:	f04f 0800 	mov.w	r8, #0
   2830a:	f8c4 8000 	str.w	r8, [r4]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   2830e:	8a39      	ldrh	r1, [r7, #16]
   28310:	4638      	mov	r0, r7
   28312:	f7f1 fa2a 	bl	1976a <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_RSP, 0, txom) == NULL) {
   28316:	463a      	mov	r2, r7
   28318:	4641      	mov	r1, r8
   2831a:	200b      	movs	r0, #11
   2831c:	f7fe febf 	bl	2709e <ble_att_cmd_prepare>
   28320:	b150      	cbz	r0, 28338 <ble_att_svr_rx_read+0x74>
    rc = ble_att_svr_read_handle(conn_handle, err_handle, 0, txom, &att_err);
   28322:	f10d 030f 	add.w	r3, sp, #15
   28326:	9300      	str	r3, [sp, #0]
   28328:	463b      	mov	r3, r7
   2832a:	2200      	movs	r2, #0
   2832c:	4631      	mov	r1, r6
   2832e:	4628      	mov	r0, r5
   28330:	f7ff fdc2 	bl	27eb8 <ble_att_svr_read_handle>
   28334:	4601      	mov	r1, r0
done:
   28336:	e7d7      	b.n	282e8 <ble_att_svr_rx_read+0x24>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   28338:	2311      	movs	r3, #17
   2833a:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOMEM;
   2833e:	2106      	movs	r1, #6
        goto done;
   28340:	e7d2      	b.n	282e8 <ble_att_svr_rx_read+0x24>

00028342 <ble_att_svr_rx_read_blob>:
{
   28342:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28346:	b085      	sub	sp, #20
   28348:	4605      	mov	r5, r0
   2834a:	460c      	mov	r4, r1
    att_err = 0;
   2834c:	2300      	movs	r3, #0
   2834e:	f88d 300f 	strb.w	r3, [sp, #15]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   28352:	f10d 020f 	add.w	r2, sp, #15
   28356:	2104      	movs	r1, #4
   28358:	4620      	mov	r0, r4
   2835a:	f7ff f877 	bl	2744c <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   2835e:	b170      	cbz	r0, 2837e <ble_att_svr_rx_read_blob+0x3c>
   28360:	4601      	mov	r1, r0
    err_handle = 0;
   28362:	2700      	movs	r7, #0
    txom = NULL;
   28364:	463e      	mov	r6, r7
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_BLOB_REQ,
   28366:	9701      	str	r7, [sp, #4]
   28368:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2836c:	9300      	str	r3, [sp, #0]
   2836e:	230c      	movs	r3, #12
   28370:	4632      	mov	r2, r6
   28372:	4628      	mov	r0, r5
   28374:	f7ff fe3e 	bl	27ff4 <ble_att_svr_tx_rsp>
}
   28378:	b005      	add	sp, #20
   2837a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_read_blob_req *)(*rxom)->om_data;
   2837e:	6826      	ldr	r6, [r4, #0]
   28380:	6833      	ldr	r3, [r6, #0]
    err_handle = le16toh(req->babq_handle);
   28382:	881f      	ldrh	r7, [r3, #0]
    offset = le16toh(req->babq_offset);
   28384:	f8b3 9002 	ldrh.w	r9, [r3, #2]
    *rxom = NULL;
   28388:	f04f 0800 	mov.w	r8, #0
   2838c:	f8c4 8000 	str.w	r8, [r4]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   28390:	8a31      	ldrh	r1, [r6, #16]
   28392:	4630      	mov	r0, r6
   28394:	f7f1 f9e9 	bl	1976a <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_BLOB_RSP, 0, txom) == NULL) {
   28398:	4632      	mov	r2, r6
   2839a:	4641      	mov	r1, r8
   2839c:	200d      	movs	r0, #13
   2839e:	f7fe fe7e 	bl	2709e <ble_att_cmd_prepare>
   283a2:	b150      	cbz	r0, 283ba <ble_att_svr_rx_read_blob+0x78>
    rc = ble_att_svr_read_handle(conn_handle, err_handle, offset,
   283a4:	f10d 030f 	add.w	r3, sp, #15
   283a8:	9300      	str	r3, [sp, #0]
   283aa:	4633      	mov	r3, r6
   283ac:	464a      	mov	r2, r9
   283ae:	4639      	mov	r1, r7
   283b0:	4628      	mov	r0, r5
   283b2:	f7ff fd81 	bl	27eb8 <ble_att_svr_read_handle>
   283b6:	4601      	mov	r1, r0
    if (rc != 0) {
   283b8:	e7d5      	b.n	28366 <ble_att_svr_rx_read_blob+0x24>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   283ba:	2311      	movs	r3, #17
   283bc:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOMEM;
   283c0:	2106      	movs	r1, #6
        goto done;
   283c2:	e7d0      	b.n	28366 <ble_att_svr_rx_read_blob+0x24>

000283c4 <ble_att_svr_rx_read_mult>:
{
   283c4:	b510      	push	{r4, lr}
   283c6:	b084      	sub	sp, #16
   283c8:	4604      	mov	r4, r0
    txom = NULL;
   283ca:	2300      	movs	r3, #0
   283cc:	9303      	str	r3, [sp, #12]
    err_handle = 0;
   283ce:	f8ad 300a 	strh.w	r3, [sp, #10]
    att_err = 0;
   283d2:	f88d 3009 	strb.w	r3, [sp, #9]
    rc = ble_att_svr_build_read_mult_rsp(conn_handle, rxom, &txom, &att_err,
   283d6:	f10d 030a 	add.w	r3, sp, #10
   283da:	9300      	str	r3, [sp, #0]
   283dc:	f10d 0309 	add.w	r3, sp, #9
   283e0:	aa03      	add	r2, sp, #12
   283e2:	f7ff fd81 	bl	27ee8 <ble_att_svr_build_read_mult_rsp>
   283e6:	4601      	mov	r1, r0
    return ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_MULT_REQ,
   283e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   283ec:	9301      	str	r3, [sp, #4]
   283ee:	f89d 3009 	ldrb.w	r3, [sp, #9]
   283f2:	9300      	str	r3, [sp, #0]
   283f4:	230e      	movs	r3, #14
   283f6:	9a03      	ldr	r2, [sp, #12]
   283f8:	4620      	mov	r0, r4
   283fa:	f7ff fdfb 	bl	27ff4 <ble_att_svr_tx_rsp>
}
   283fe:	b004      	add	sp, #16
   28400:	bd10      	pop	{r4, pc}

00028402 <ble_att_svr_rx_read_group_type>:
{
   28402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28406:	b08c      	sub	sp, #48	; 0x30
   28408:	4605      	mov	r5, r0
   2840a:	460c      	mov	r4, r1
    txom = NULL;
   2840c:	2300      	movs	r3, #0
   2840e:	930b      	str	r3, [sp, #44]	; 0x2c
    err_handle = 0;
   28410:	f8ad 3016 	strh.w	r3, [sp, #22]
    att_err = 0;
   28414:	f88d 3015 	strb.w	r3, [sp, #21]
    pktlen = OS_MBUF_PKTLEN(*rxom);
   28418:	680b      	ldr	r3, [r1, #0]
   2841a:	8a19      	ldrh	r1, [r3, #16]
    if (pktlen != sizeof(*req) + 2 && pktlen != sizeof(*req) + 16) {
   2841c:	2906      	cmp	r1, #6
   2841e:	d001      	beq.n	28424 <ble_att_svr_rx_read_group_type+0x22>
   28420:	2914      	cmp	r1, #20
   28422:	d140      	bne.n	284a6 <ble_att_svr_rx_read_group_type+0xa4>
    rc = ble_att_svr_pullup_req_base(rxom, pktlen, &att_err);
   28424:	f10d 0215 	add.w	r2, sp, #21
   28428:	4620      	mov	r0, r4
   2842a:	f7ff f80f 	bl	2744c <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   2842e:	4601      	mov	r1, r0
   28430:	2800      	cmp	r0, #0
   28432:	d139      	bne.n	284a8 <ble_att_svr_rx_read_group_type+0xa6>
    req = (struct ble_att_read_group_type_req *)(*rxom)->om_data;
   28434:	6821      	ldr	r1, [r4, #0]
   28436:	680b      	ldr	r3, [r1, #0]
    start_handle = le16toh(req->bagq_start_handle);
   28438:	881e      	ldrh	r6, [r3, #0]
   2843a:	b2b7      	uxth	r7, r6
    end_handle = le16toh(req->bagq_end_handle);
   2843c:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   28440:	4547      	cmp	r7, r8
   28442:	d800      	bhi.n	28446 <ble_att_svr_rx_read_group_type+0x44>
   28444:	b937      	cbnz	r7, 28454 <ble_att_svr_rx_read_group_type+0x52>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   28446:	2301      	movs	r3, #1
   28448:	f88d 3015 	strb.w	r3, [sp, #21]
        err_handle = start_handle;
   2844c:	f8ad 6016 	strh.w	r6, [sp, #22]
        rc = BLE_HS_EBADDATA;
   28450:	210a      	movs	r1, #10
        goto done;
   28452:	e029      	b.n	284a8 <ble_att_svr_rx_read_group_type+0xa6>
    om_uuid_len = OS_MBUF_PKTHDR(*rxom)->omp_len - sizeof(*req);
   28454:	8a0b      	ldrh	r3, [r1, #16]
    rc = ble_uuid_init_from_att_mbuf(&uuid, *rxom, sizeof(*req), om_uuid_len);
   28456:	3b04      	subs	r3, #4
   28458:	2204      	movs	r2, #4
   2845a:	a806      	add	r0, sp, #24
   2845c:	f009 f834 	bl	314c8 <ble_uuid_init_from_att_mbuf>
    if (rc != 0) {
   28460:	b130      	cbz	r0, 28470 <ble_att_svr_rx_read_group_type+0x6e>
        att_err = BLE_ATT_ERR_INVALID_PDU;
   28462:	2304      	movs	r3, #4
   28464:	f88d 3015 	strb.w	r3, [sp, #21]
        err_handle = start_handle;
   28468:	f8ad 6016 	strh.w	r6, [sp, #22]
        rc = BLE_HS_EBADDATA;
   2846c:	210a      	movs	r1, #10
        goto done;
   2846e:	e01b      	b.n	284a8 <ble_att_svr_rx_read_group_type+0xa6>
    if (!ble_att_svr_is_valid_read_group_type(&uuid.u)) {
   28470:	a806      	add	r0, sp, #24
   28472:	f7ff f956 	bl	27722 <ble_att_svr_is_valid_read_group_type>
   28476:	b928      	cbnz	r0, 28484 <ble_att_svr_rx_read_group_type+0x82>
        att_err = BLE_ATT_ERR_UNSUPPORTED_GROUP;
   28478:	2110      	movs	r1, #16
   2847a:	f88d 1015 	strb.w	r1, [sp, #21]
        err_handle = start_handle;
   2847e:	f8ad 6016 	strh.w	r6, [sp, #22]
        goto done;
   28482:	e011      	b.n	284a8 <ble_att_svr_rx_read_group_type+0xa6>
    rc = ble_att_svr_build_read_group_type_rsp(conn_handle, start_handle,
   28484:	f10d 0316 	add.w	r3, sp, #22
   28488:	9303      	str	r3, [sp, #12]
   2848a:	f10d 0315 	add.w	r3, sp, #21
   2848e:	9302      	str	r3, [sp, #8]
   28490:	ab0b      	add	r3, sp, #44	; 0x2c
   28492:	9301      	str	r3, [sp, #4]
   28494:	9400      	str	r4, [sp, #0]
   28496:	ab06      	add	r3, sp, #24
   28498:	4642      	mov	r2, r8
   2849a:	4639      	mov	r1, r7
   2849c:	4628      	mov	r0, r5
   2849e:	f7ff fa65 	bl	2796c <ble_att_svr_build_read_group_type_rsp>
   284a2:	4601      	mov	r1, r0
    if (rc != 0) {
   284a4:	e000      	b.n	284a8 <ble_att_svr_rx_read_group_type+0xa6>
        rc = BLE_HS_EBADDATA;
   284a6:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom,
   284a8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   284ac:	9301      	str	r3, [sp, #4]
   284ae:	f89d 3015 	ldrb.w	r3, [sp, #21]
   284b2:	9300      	str	r3, [sp, #0]
   284b4:	2310      	movs	r3, #16
   284b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   284b8:	4628      	mov	r0, r5
   284ba:	f7ff fd9b 	bl	27ff4 <ble_att_svr_tx_rsp>
}
   284be:	b00c      	add	sp, #48	; 0x30
   284c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000284c4 <ble_att_svr_rx_write>:
{
   284c4:	b570      	push	{r4, r5, r6, lr}
   284c6:	b084      	sub	sp, #16
   284c8:	4605      	mov	r5, r0
   284ca:	460c      	mov	r4, r1
    txom = NULL;
   284cc:	2300      	movs	r3, #0
   284ce:	9303      	str	r3, [sp, #12]
    att_err = 0;
   284d0:	f88d 300b 	strb.w	r3, [sp, #11]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   284d4:	f10d 020b 	add.w	r2, sp, #11
   284d8:	2102      	movs	r1, #2
   284da:	4620      	mov	r0, r4
   284dc:	f7fe ffb6 	bl	2744c <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   284e0:	b160      	cbz	r0, 284fc <ble_att_svr_rx_write+0x38>
   284e2:	4601      	mov	r1, r0
    handle = 0;
   284e4:	2600      	movs	r6, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_WRITE_REQ,
   284e6:	9601      	str	r6, [sp, #4]
   284e8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   284ec:	9300      	str	r3, [sp, #0]
   284ee:	2312      	movs	r3, #18
   284f0:	9a03      	ldr	r2, [sp, #12]
   284f2:	4628      	mov	r0, r5
   284f4:	f7ff fd7e 	bl	27ff4 <ble_att_svr_tx_rsp>
}
   284f8:	b004      	add	sp, #16
   284fa:	bd70      	pop	{r4, r5, r6, pc}
    req = (struct ble_att_write_req *)(*rxom)->om_data;
   284fc:	6823      	ldr	r3, [r4, #0]
   284fe:	681b      	ldr	r3, [r3, #0]
    handle = le16toh(req->bawq_handle);
   28500:	881e      	ldrh	r6, [r3, #0]
    rc = ble_att_svr_build_write_rsp(rxom, &txom, &att_err);
   28502:	f10d 020b 	add.w	r2, sp, #11
   28506:	a903      	add	r1, sp, #12
   28508:	4620      	mov	r0, r4
   2850a:	f7fe fff4 	bl	274f6 <ble_att_svr_build_write_rsp>
    if (rc != 0) {
   2850e:	4601      	mov	r1, r0
   28510:	2800      	cmp	r0, #0
   28512:	d1e8      	bne.n	284e6 <ble_att_svr_rx_write+0x22>
    os_mbuf_adj(*rxom, sizeof(*req));
   28514:	2102      	movs	r1, #2
   28516:	6820      	ldr	r0, [r4, #0]
   28518:	f7f1 f927 	bl	1976a <os_mbuf_adj>
    rc = ble_att_svr_write_handle(conn_handle, handle, 0, rxom, &att_err);
   2851c:	f10d 030b 	add.w	r3, sp, #11
   28520:	9300      	str	r3, [sp, #0]
   28522:	4623      	mov	r3, r4
   28524:	2200      	movs	r2, #0
   28526:	4631      	mov	r1, r6
   28528:	4628      	mov	r0, r5
   2852a:	f7ff fbb5 	bl	27c98 <ble_att_svr_write_handle>
   2852e:	4601      	mov	r1, r0
    if (rc != 0) {
   28530:	e7d9      	b.n	284e6 <ble_att_svr_rx_write+0x22>

00028532 <ble_att_svr_rx_write_no_rsp>:
{
   28532:	b570      	push	{r4, r5, r6, lr}
   28534:	b084      	sub	sp, #16
   28536:	4605      	mov	r5, r0
   28538:	460c      	mov	r4, r1
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   2853a:	f10d 020f 	add.w	r2, sp, #15
   2853e:	2102      	movs	r1, #2
   28540:	4620      	mov	r0, r4
   28542:	f7fe ff83 	bl	2744c <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   28546:	4603      	mov	r3, r0
   28548:	b110      	cbz	r0, 28550 <ble_att_svr_rx_write_no_rsp+0x1e>
}
   2854a:	4618      	mov	r0, r3
   2854c:	b004      	add	sp, #16
   2854e:	bd70      	pop	{r4, r5, r6, pc}
    req = (struct ble_att_write_req *)(*rxom)->om_data;
   28550:	6820      	ldr	r0, [r4, #0]
   28552:	6803      	ldr	r3, [r0, #0]
    handle = le16toh(req->bawq_handle);
   28554:	881e      	ldrh	r6, [r3, #0]
    os_mbuf_adj(*rxom, sizeof(*req));
   28556:	2102      	movs	r1, #2
   28558:	f7f1 f907 	bl	1976a <os_mbuf_adj>
    return ble_att_svr_write_handle(conn_handle, handle, 0, rxom, &att_err);
   2855c:	f10d 030f 	add.w	r3, sp, #15
   28560:	9300      	str	r3, [sp, #0]
   28562:	4623      	mov	r3, r4
   28564:	2200      	movs	r2, #0
   28566:	4631      	mov	r1, r6
   28568:	4628      	mov	r0, r5
   2856a:	f7ff fb95 	bl	27c98 <ble_att_svr_write_handle>
   2856e:	4603      	mov	r3, r0
   28570:	e7eb      	b.n	2854a <ble_att_svr_rx_write_no_rsp+0x18>

00028572 <ble_att_svr_write_local>:
{
   28572:	b510      	push	{r4, lr}
   28574:	b084      	sub	sp, #16
   28576:	9103      	str	r1, [sp, #12]
    rc = ble_att_svr_write_handle(BLE_HS_CONN_HANDLE_NONE, attr_handle, 0,
   28578:	2200      	movs	r2, #0
   2857a:	9200      	str	r2, [sp, #0]
   2857c:	ab03      	add	r3, sp, #12
   2857e:	4601      	mov	r1, r0
   28580:	f64f 70ff 	movw	r0, #65535	; 0xffff
   28584:	f7ff fb88 	bl	27c98 <ble_att_svr_write_handle>
   28588:	4604      	mov	r4, r0
    os_mbuf_free_chain(om);
   2858a:	9803      	ldr	r0, [sp, #12]
   2858c:	f7f1 f81f 	bl	195ce <os_mbuf_free_chain>
}
   28590:	4620      	mov	r0, r4
   28592:	b004      	add	sp, #16
   28594:	bd10      	pop	{r4, pc}

00028596 <ble_att_svr_prep_clear>:
{
   28596:	b510      	push	{r4, lr}
   28598:	4604      	mov	r4, r0
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   2859a:	6820      	ldr	r0, [r4, #0]
   2859c:	b120      	cbz	r0, 285a8 <ble_att_svr_prep_clear+0x12>
        SLIST_REMOVE_HEAD(prep_list, bape_next);
   2859e:	6803      	ldr	r3, [r0, #0]
   285a0:	6023      	str	r3, [r4, #0]
        ble_att_svr_prep_free(entry);
   285a2:	f7ff fa9f 	bl	27ae4 <ble_att_svr_prep_free>
   285a6:	e7f8      	b.n	2859a <ble_att_svr_prep_clear+0x4>
}
   285a8:	bd10      	pop	{r4, pc}

000285aa <ble_att_svr_rx_prep_write>:
{
   285aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   285ae:	b085      	sub	sp, #20
   285b0:	4605      	mov	r5, r0
   285b2:	460c      	mov	r4, r1
    att_err = 0;
   285b4:	2300      	movs	r3, #0
   285b6:	f88d 300f 	strb.w	r3, [sp, #15]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   285ba:	f10d 020f 	add.w	r2, sp, #15
   285be:	2104      	movs	r1, #4
   285c0:	4620      	mov	r0, r4
   285c2:	f7fe ff43 	bl	2744c <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   285c6:	b178      	cbz	r0, 285e8 <ble_att_svr_rx_prep_write+0x3e>
   285c8:	4606      	mov	r6, r0
    err_handle = 0;
   285ca:	2700      	movs	r7, #0
    txom = NULL;
   285cc:	46b8      	mov	r8, r7
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_PREP_WRITE_REQ,
   285ce:	9701      	str	r7, [sp, #4]
   285d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   285d4:	9300      	str	r3, [sp, #0]
   285d6:	2316      	movs	r3, #22
   285d8:	4642      	mov	r2, r8
   285da:	4631      	mov	r1, r6
   285dc:	4628      	mov	r0, r5
   285de:	f7ff fd09 	bl	27ff4 <ble_att_svr_tx_rsp>
}
   285e2:	b005      	add	sp, #20
   285e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_prep_write_cmd *)(*rxom)->om_data;
   285e8:	6823      	ldr	r3, [r4, #0]
   285ea:	f8d3 9000 	ldr.w	r9, [r3]
    err_handle = le16toh(req->bapc_handle);
   285ee:	f8b9 7000 	ldrh.w	r7, [r9]
    attr_entry = ble_att_svr_find_by_handle(le16toh(req->bapc_handle));
   285f2:	4638      	mov	r0, r7
   285f4:	f7ff fb44 	bl	27c80 <ble_att_svr_find_by_handle>
    if (attr_entry == NULL) {
   285f8:	4680      	mov	r8, r0
   285fa:	b158      	cbz	r0, 28614 <ble_att_svr_rx_prep_write+0x6a>
    rc = ble_att_svr_check_perms(conn_handle, 0, attr_entry, &att_err);
   285fc:	f10d 030f 	add.w	r3, sp, #15
   28600:	4602      	mov	r2, r0
   28602:	2100      	movs	r1, #0
   28604:	4628      	mov	r0, r5
   28606:	f7fe fe38 	bl	2727a <ble_att_svr_check_perms>
    if (rc != 0) {
   2860a:	4606      	mov	r6, r0
   2860c:	b138      	cbz	r0, 2861e <ble_att_svr_rx_prep_write+0x74>
    txom = NULL;
   2860e:	f04f 0800 	mov.w	r8, #0
   28612:	e7dc      	b.n	285ce <ble_att_svr_rx_prep_write+0x24>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   28614:	2301      	movs	r3, #1
   28616:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOENT;
   2861a:	2605      	movs	r6, #5
        goto done;
   2861c:	e7d7      	b.n	285ce <ble_att_svr_rx_prep_write+0x24>
    ble_hs_lock();
   2861e:	f005 fcb7 	bl	2df90 <ble_hs_lock>
    rc = ble_att_svr_insert_prep_entry(conn_handle, le16toh(req->bapc_handle),
   28622:	f8b9 1000 	ldrh.w	r1, [r9]
                                       le16toh(req->bapc_offset), *rxom,
   28626:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    rc = ble_att_svr_insert_prep_entry(conn_handle, le16toh(req->bapc_handle),
   2862a:	f10d 030f 	add.w	r3, sp, #15
   2862e:	9300      	str	r3, [sp, #0]
   28630:	6823      	ldr	r3, [r4, #0]
   28632:	4628      	mov	r0, r5
   28634:	f7ff fa8a 	bl	27b4c <ble_att_svr_insert_prep_entry>
   28638:	4606      	mov	r6, r0
    ble_hs_unlock();
   2863a:	f005 fcad 	bl	2df98 <ble_hs_unlock>
    txom = *rxom;
   2863e:	f8d4 8000 	ldr.w	r8, [r4]
    *rxom = NULL;
   28642:	2300      	movs	r3, #0
   28644:	6023      	str	r3, [r4, #0]
    if (rc != 0) {
   28646:	2e00      	cmp	r6, #0
   28648:	d1c1      	bne.n	285ce <ble_att_svr_rx_prep_write+0x24>
    os_mbuf_prepend(txom, 1);
   2864a:	2101      	movs	r1, #1
   2864c:	4640      	mov	r0, r8
   2864e:	f7f1 f979 	bl	19944 <os_mbuf_prepend>
    txom->om_data[0] = BLE_ATT_OP_PREP_WRITE_RSP;
   28652:	f8d8 3000 	ldr.w	r3, [r8]
   28656:	2217      	movs	r2, #23
   28658:	701a      	strb	r2, [r3, #0]
    rc = 0;
   2865a:	e7b8      	b.n	285ce <ble_att_svr_rx_prep_write+0x24>

0002865c <ble_att_svr_rx_exec_write>:
{
   2865c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28660:	b085      	sub	sp, #20
   28662:	4605      	mov	r5, r0
   28664:	460c      	mov	r4, r1
    err_handle = 0;
   28666:	2300      	movs	r3, #0
   28668:	f8ad 300a 	strh.w	r3, [sp, #10]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   2866c:	f10d 0209 	add.w	r2, sp, #9
   28670:	2101      	movs	r1, #1
   28672:	4620      	mov	r0, r4
   28674:	f7fe feea 	bl	2744c <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   28678:	4607      	mov	r7, r0
   2867a:	b190      	cbz	r0, 286a2 <ble_att_svr_rx_exec_write+0x46>
        flags = 0;
   2867c:	f04f 0800 	mov.w	r8, #0
    txom = NULL;
   28680:	4646      	mov	r6, r8
    if (rc == 0) {
   28682:	b337      	cbz	r7, 286d2 <ble_att_svr_rx_exec_write+0x76>
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_EXEC_WRITE_REQ,
   28684:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   28688:	9301      	str	r3, [sp, #4]
   2868a:	f89d 3009 	ldrb.w	r3, [sp, #9]
   2868e:	9300      	str	r3, [sp, #0]
   28690:	2318      	movs	r3, #24
   28692:	4632      	mov	r2, r6
   28694:	4639      	mov	r1, r7
   28696:	4628      	mov	r0, r5
   28698:	f7ff fcac 	bl	27ff4 <ble_att_svr_tx_rsp>
}
   2869c:	b005      	add	sp, #20
   2869e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_exec_write_req *)(*rxom)->om_data;
   286a2:	6826      	ldr	r6, [r4, #0]
   286a4:	6833      	ldr	r3, [r6, #0]
    flags = req->baeq_flags;
   286a6:	f893 8000 	ldrb.w	r8, [r3]
    *rxom = NULL;
   286aa:	f04f 0900 	mov.w	r9, #0
   286ae:	f8c4 9000 	str.w	r9, [r4]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   286b2:	8a31      	ldrh	r1, [r6, #16]
   286b4:	4630      	mov	r0, r6
   286b6:	f7f1 f858 	bl	1976a <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_EXEC_WRITE_RSP, 0, txom) == NULL) {
   286ba:	4632      	mov	r2, r6
   286bc:	4649      	mov	r1, r9
   286be:	2019      	movs	r0, #25
   286c0:	f7fe fced 	bl	2709e <ble_att_cmd_prepare>
   286c4:	2800      	cmp	r0, #0
   286c6:	d1dc      	bne.n	28682 <ble_att_svr_rx_exec_write+0x26>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   286c8:	2311      	movs	r3, #17
   286ca:	f88d 3009 	strb.w	r3, [sp, #9]
        rc = BLE_HS_ENOMEM;
   286ce:	2706      	movs	r7, #6
        goto done;
   286d0:	e7d7      	b.n	28682 <ble_att_svr_rx_exec_write+0x26>
        ble_hs_lock();
   286d2:	f005 fc5d 	bl	2df90 <ble_hs_lock>
        conn = ble_hs_conn_find_assert(conn_handle);
   286d6:	4628      	mov	r0, r5
   286d8:	f006 fcf6 	bl	2f0c8 <ble_hs_conn_find_assert>
        prep_list = conn->bhc_att_svr.basc_prep_list;
   286dc:	6c43      	ldr	r3, [r0, #68]	; 0x44
   286de:	9303      	str	r3, [sp, #12]
        SLIST_INIT(&conn->bhc_att_svr.basc_prep_list);
   286e0:	2300      	movs	r3, #0
   286e2:	6443      	str	r3, [r0, #68]	; 0x44
        ble_hs_unlock();
   286e4:	f005 fc58 	bl	2df98 <ble_hs_unlock>
        if (flags) {
   286e8:	f1b8 0f00 	cmp.w	r8, #0
   286ec:	d103      	bne.n	286f6 <ble_att_svr_rx_exec_write+0x9a>
        ble_att_svr_prep_clear(&prep_list);
   286ee:	a803      	add	r0, sp, #12
   286f0:	f7ff ff51 	bl	28596 <ble_att_svr_prep_clear>
   286f4:	e7c6      	b.n	28684 <ble_att_svr_rx_exec_write+0x28>
            att_err = ble_att_svr_prep_write(conn_handle, &prep_list,
   286f6:	f10d 020a 	add.w	r2, sp, #10
   286fa:	a903      	add	r1, sp, #12
   286fc:	4628      	mov	r0, r5
   286fe:	f7ff fae3 	bl	27cc8 <ble_att_svr_prep_write>
   28702:	b2c0      	uxtb	r0, r0
   28704:	f88d 0009 	strb.w	r0, [sp, #9]
            if (att_err != 0) {
   28708:	2800      	cmp	r0, #0
   2870a:	d0f0      	beq.n	286ee <ble_att_svr_rx_exec_write+0x92>
                rc = BLE_HS_EAPP;
   2870c:	2709      	movs	r7, #9
   2870e:	e7ee      	b.n	286ee <ble_att_svr_rx_exec_write+0x92>

00028710 <ble_att_svr_rx_notify>:
{
   28710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28712:	4605      	mov	r5, r0
   28714:	460c      	mov	r4, r1
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), NULL);
   28716:	2200      	movs	r2, #0
   28718:	2102      	movs	r1, #2
   2871a:	4620      	mov	r0, r4
   2871c:	f7fe fe96 	bl	2744c <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   28720:	b988      	cbnz	r0, 28746 <ble_att_svr_rx_notify+0x36>
   28722:	4606      	mov	r6, r0
    req = (struct ble_att_notify_req *)(*rxom)->om_data;
   28724:	6820      	ldr	r0, [r4, #0]
   28726:	6803      	ldr	r3, [r0, #0]
    handle = le16toh(req->banq_handle);
   28728:	881f      	ldrh	r7, [r3, #0]
    if (handle == 0) {
   2872a:	b177      	cbz	r7, 2874a <ble_att_svr_rx_notify+0x3a>
    os_mbuf_adj(*rxom, sizeof(*req));
   2872c:	2102      	movs	r1, #2
   2872e:	f7f1 f81c 	bl	1976a <os_mbuf_adj>
    ble_gap_notify_rx_event(conn_handle, handle, *rxom, 0);
   28732:	2300      	movs	r3, #0
   28734:	6822      	ldr	r2, [r4, #0]
   28736:	4639      	mov	r1, r7
   28738:	4628      	mov	r0, r5
   2873a:	f001 ffa5 	bl	2a688 <ble_gap_notify_rx_event>
    *rxom = NULL;
   2873e:	2300      	movs	r3, #0
   28740:	6023      	str	r3, [r4, #0]
}
   28742:	4630      	mov	r0, r6
   28744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   28746:	2606      	movs	r6, #6
   28748:	e7fb      	b.n	28742 <ble_att_svr_rx_notify+0x32>
        return BLE_HS_EBADDATA;
   2874a:	260a      	movs	r6, #10
   2874c:	e7f9      	b.n	28742 <ble_att_svr_rx_notify+0x32>

0002874e <ble_att_svr_rx_indicate>:
{
   2874e:	b5f0      	push	{r4, r5, r6, r7, lr}
   28750:	b085      	sub	sp, #20
   28752:	4607      	mov	r7, r0
   28754:	460c      	mov	r4, r1
    txom = NULL;
   28756:	2200      	movs	r2, #0
   28758:	9203      	str	r2, [sp, #12]
    att_err = 0;
   2875a:	f88d 200b 	strb.w	r2, [sp, #11]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), NULL);
   2875e:	2102      	movs	r1, #2
   28760:	4620      	mov	r0, r4
   28762:	f7fe fe73 	bl	2744c <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   28766:	b9d0      	cbnz	r0, 2879e <ble_att_svr_rx_indicate+0x50>
    req = (struct ble_att_indicate_req *)(*rxom)->om_data;
   28768:	6823      	ldr	r3, [r4, #0]
   2876a:	681b      	ldr	r3, [r3, #0]
    handle = le16toh(req->baiq_handle);
   2876c:	881d      	ldrh	r5, [r3, #0]
    if (handle == 0) {
   2876e:	b90d      	cbnz	r5, 28774 <ble_att_svr_rx_indicate+0x26>
        rc = BLE_HS_EBADDATA;
   28770:	260a      	movs	r6, #10
   28772:	e016      	b.n	287a2 <ble_att_svr_rx_indicate+0x54>
    rc = ble_att_svr_build_indicate_rsp(rxom, &txom, &att_err);
   28774:	f10d 020b 	add.w	r2, sp, #11
   28778:	a903      	add	r1, sp, #12
   2877a:	4620      	mov	r0, r4
   2877c:	f7fe fed4 	bl	27528 <ble_att_svr_build_indicate_rsp>
    if (rc != 0) {
   28780:	4606      	mov	r6, r0
   28782:	b970      	cbnz	r0, 287a2 <ble_att_svr_rx_indicate+0x54>
    os_mbuf_adj(*rxom, sizeof(*req));
   28784:	2102      	movs	r1, #2
   28786:	6820      	ldr	r0, [r4, #0]
   28788:	f7f0 ffef 	bl	1976a <os_mbuf_adj>
    ble_gap_notify_rx_event(conn_handle, handle, *rxom, 1);
   2878c:	2301      	movs	r3, #1
   2878e:	6822      	ldr	r2, [r4, #0]
   28790:	4629      	mov	r1, r5
   28792:	4638      	mov	r0, r7
   28794:	f001 ff78 	bl	2a688 <ble_gap_notify_rx_event>
    *rxom = NULL;
   28798:	2300      	movs	r3, #0
   2879a:	6023      	str	r3, [r4, #0]
    rc = 0;
   2879c:	e001      	b.n	287a2 <ble_att_svr_rx_indicate+0x54>
   2879e:	4606      	mov	r6, r0
    handle = 0;
   287a0:	2500      	movs	r5, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_INDICATE_REQ,
   287a2:	9501      	str	r5, [sp, #4]
   287a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   287a8:	9300      	str	r3, [sp, #0]
   287aa:	231d      	movs	r3, #29
   287ac:	9a03      	ldr	r2, [sp, #12]
   287ae:	4631      	mov	r1, r6
   287b0:	4638      	mov	r0, r7
   287b2:	f7ff fc1f 	bl	27ff4 <ble_att_svr_tx_rsp>
}
   287b6:	b005      	add	sp, #20
   287b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000287bc <ble_att_svr_hide_range>:
{
   287bc:	b508      	push	{r3, lr}
   287be:	4602      	mov	r2, r0
   287c0:	460b      	mov	r3, r1
    ble_att_svr_move_entries(&ble_att_svr_list, &ble_att_svr_hidden_list,
   287c2:	4902      	ldr	r1, [pc, #8]	; (287cc <ble_att_svr_hide_range+0x10>)
   287c4:	4802      	ldr	r0, [pc, #8]	; (287d0 <ble_att_svr_hide_range+0x14>)
   287c6:	f7fe fcf9 	bl	271bc <ble_att_svr_move_entries>
}
   287ca:	bd08      	pop	{r3, pc}
   287cc:	10004bc4 	.word	0x10004bc4
   287d0:	10004bd0 	.word	0x10004bd0

000287d4 <ble_att_svr_restore_range>:
{
   287d4:	b508      	push	{r3, lr}
   287d6:	4602      	mov	r2, r0
   287d8:	460b      	mov	r3, r1
    ble_att_svr_move_entries(&ble_att_svr_hidden_list, &ble_att_svr_list,
   287da:	4902      	ldr	r1, [pc, #8]	; (287e4 <ble_att_svr_restore_range+0x10>)
   287dc:	4802      	ldr	r0, [pc, #8]	; (287e8 <ble_att_svr_restore_range+0x14>)
   287de:	f7fe fced 	bl	271bc <ble_att_svr_move_entries>
}
   287e2:	bd08      	pop	{r3, pc}
   287e4:	10004bd0 	.word	0x10004bd0
   287e8:	10004bc4 	.word	0x10004bc4

000287ec <ble_att_svr_reset>:
{
   287ec:	b508      	push	{r3, lr}
    while ((entry = STAILQ_FIRST(&ble_att_svr_list)) != NULL) {
   287ee:	e002      	b.n	287f6 <ble_att_svr_reset+0xa>
        STAILQ_REMOVE_HEAD(&ble_att_svr_list, ha_next);
   287f0:	6052      	str	r2, [r2, #4]
        ble_att_svr_entry_free(entry);
   287f2:	f7ff f9a3 	bl	27b3c <ble_att_svr_entry_free>
    while ((entry = STAILQ_FIRST(&ble_att_svr_list)) != NULL) {
   287f6:	4b0c      	ldr	r3, [pc, #48]	; (28828 <ble_att_svr_reset+0x3c>)
   287f8:	6818      	ldr	r0, [r3, #0]
   287fa:	b140      	cbz	r0, 2880e <ble_att_svr_reset+0x22>
        STAILQ_REMOVE_HEAD(&ble_att_svr_list, ha_next);
   287fc:	6803      	ldr	r3, [r0, #0]
   287fe:	4a0a      	ldr	r2, [pc, #40]	; (28828 <ble_att_svr_reset+0x3c>)
   28800:	6013      	str	r3, [r2, #0]
   28802:	2b00      	cmp	r3, #0
   28804:	d1f5      	bne.n	287f2 <ble_att_svr_reset+0x6>
   28806:	e7f3      	b.n	287f0 <ble_att_svr_reset+0x4>
        STAILQ_REMOVE_HEAD(&ble_att_svr_hidden_list, ha_next);
   28808:	6052      	str	r2, [r2, #4]
        ble_att_svr_entry_free(entry);
   2880a:	f7ff f997 	bl	27b3c <ble_att_svr_entry_free>
    while ((entry = STAILQ_FIRST(&ble_att_svr_hidden_list)) != NULL) {
   2880e:	4b07      	ldr	r3, [pc, #28]	; (2882c <ble_att_svr_reset+0x40>)
   28810:	6818      	ldr	r0, [r3, #0]
   28812:	b128      	cbz	r0, 28820 <ble_att_svr_reset+0x34>
        STAILQ_REMOVE_HEAD(&ble_att_svr_hidden_list, ha_next);
   28814:	6803      	ldr	r3, [r0, #0]
   28816:	4a05      	ldr	r2, [pc, #20]	; (2882c <ble_att_svr_reset+0x40>)
   28818:	6013      	str	r3, [r2, #0]
   2881a:	2b00      	cmp	r3, #0
   2881c:	d1f5      	bne.n	2880a <ble_att_svr_reset+0x1e>
   2881e:	e7f3      	b.n	28808 <ble_att_svr_reset+0x1c>
    ble_att_svr_id = 0;
   28820:	4b03      	ldr	r3, [pc, #12]	; (28830 <ble_att_svr_reset+0x44>)
   28822:	2200      	movs	r2, #0
   28824:	801a      	strh	r2, [r3, #0]
}
   28826:	bd08      	pop	{r3, pc}
   28828:	10004bd0 	.word	0x10004bd0
   2882c:	10004bc4 	.word	0x10004bc4
   28830:	10004bcc 	.word	0x10004bcc

00028834 <ble_att_svr_start>:

int
ble_att_svr_start(void)
{
   28834:	b510      	push	{r4, lr}
   28836:	b082      	sub	sp, #8
    int rc;

    ble_att_svr_free_start_mem();
   28838:	f7ff f9ea 	bl	27c10 <ble_att_svr_free_start_mem>

    if (ble_hs_max_attrs > 0) {
   2883c:	4b0f      	ldr	r3, [pc, #60]	; (2887c <ble_att_svr_start+0x48>)
   2883e:	881c      	ldrh	r4, [r3, #0]
   28840:	b91c      	cbnz	r4, 2884a <ble_att_svr_start+0x16>
            rc = BLE_HS_EOS;
            goto err;
        }
    }

    return 0;
   28842:	2400      	movs	r4, #0

err:
    ble_att_svr_free_start_mem();
    return rc;
}
   28844:	4620      	mov	r0, r4
   28846:	b002      	add	sp, #8
   28848:	bd10      	pop	{r4, pc}
        ble_att_svr_entry_mem = malloc(
   2884a:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   2884e:	0080      	lsls	r0, r0, #2
   28850:	f00b fc84 	bl	3415c <malloc>
   28854:	4603      	mov	r3, r0
   28856:	4a0a      	ldr	r2, [pc, #40]	; (28880 <ble_att_svr_start+0x4c>)
   28858:	6010      	str	r0, [r2, #0]
        if (ble_att_svr_entry_mem == NULL) {
   2885a:	b168      	cbz	r0, 28878 <ble_att_svr_start+0x44>
        rc = os_mempool_init(&ble_att_svr_entry_pool, ble_hs_max_attrs,
   2885c:	4a09      	ldr	r2, [pc, #36]	; (28884 <ble_att_svr_start+0x50>)
   2885e:	9200      	str	r2, [sp, #0]
   28860:	2214      	movs	r2, #20
   28862:	4621      	mov	r1, r4
   28864:	4808      	ldr	r0, [pc, #32]	; (28888 <ble_att_svr_start+0x54>)
   28866:	f7f1 faad 	bl	19dc4 <os_mempool_init>
        if (rc != 0) {
   2886a:	b908      	cbnz	r0, 28870 <ble_att_svr_start+0x3c>
    return 0;
   2886c:	2400      	movs	r4, #0
   2886e:	e7e9      	b.n	28844 <ble_att_svr_start+0x10>
            rc = BLE_HS_EOS;
   28870:	240b      	movs	r4, #11
    ble_att_svr_free_start_mem();
   28872:	f7ff f9cd 	bl	27c10 <ble_att_svr_free_start_mem>
    return rc;
   28876:	e7e5      	b.n	28844 <ble_att_svr_start+0x10>
            rc = BLE_HS_ENOMEM;
   28878:	2406      	movs	r4, #6
   2887a:	e7fa      	b.n	28872 <ble_att_svr_start+0x3e>
   2887c:	1000532c 	.word	0x1000532c
   28880:	10004ba4 	.word	0x10004ba4
   28884:	00038d40 	.word	0x00038d40
   28888:	10004ba8 	.word	0x10004ba8

0002888c <ble_att_svr_init>:

int
ble_att_svr_init(void)
{
   2888c:	b500      	push	{lr}
   2888e:	b083      	sub	sp, #12
    int rc;

    if (MYNEWT_VAL(BLE_ATT_SVR_MAX_PREP_ENTRIES) > 0) {
        rc = os_mempool_init(&ble_att_svr_prep_entry_pool,
   28890:	4b0a      	ldr	r3, [pc, #40]	; (288bc <ble_att_svr_init+0x30>)
   28892:	9300      	str	r3, [sp, #0]
   28894:	4b0a      	ldr	r3, [pc, #40]	; (288c0 <ble_att_svr_init+0x34>)
   28896:	220c      	movs	r2, #12
   28898:	2140      	movs	r1, #64	; 0x40
   2889a:	480a      	ldr	r0, [pc, #40]	; (288c4 <ble_att_svr_init+0x38>)
   2889c:	f7f1 fa92 	bl	19dc4 <os_mempool_init>
                             MYNEWT_VAL(BLE_ATT_SVR_MAX_PREP_ENTRIES),
                             sizeof (struct ble_att_prep_entry),
                             ble_att_svr_prep_entry_mem,
                             "ble_att_svr_prep_entry_pool");
        if (rc != 0) {
   288a0:	b950      	cbnz	r0, 288b8 <ble_att_svr_init+0x2c>
            return BLE_HS_EOS;
        }
    }

    STAILQ_INIT(&ble_att_svr_list);
   288a2:	4b09      	ldr	r3, [pc, #36]	; (288c8 <ble_att_svr_init+0x3c>)
   288a4:	6018      	str	r0, [r3, #0]
   288a6:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&ble_att_svr_hidden_list);
   288a8:	4b08      	ldr	r3, [pc, #32]	; (288cc <ble_att_svr_init+0x40>)
   288aa:	6018      	str	r0, [r3, #0]
   288ac:	605b      	str	r3, [r3, #4]

    ble_att_svr_id = 0;
   288ae:	4b08      	ldr	r3, [pc, #32]	; (288d0 <ble_att_svr_init+0x44>)
   288b0:	8018      	strh	r0, [r3, #0]

    return 0;
}
   288b2:	b003      	add	sp, #12
   288b4:	f85d fb04 	ldr.w	pc, [sp], #4
            return BLE_HS_EOS;
   288b8:	200b      	movs	r0, #11
   288ba:	e7fa      	b.n	288b2 <ble_att_svr_init+0x26>
   288bc:	00038d58 	.word	0x00038d58
   288c0:	10004bd8 	.word	0x10004bd8
   288c4:	10004ed8 	.word	0x10004ed8
   288c8:	10004bd0 	.word	0x10004bd0
   288cc:	10004bc4 	.word	0x10004bc4
   288d0:	10004bcc 	.word	0x10004bcc

000288d4 <ble_eddystone_set_svc_data_base>:
 * @return                          A pointer to where the service data payload
 *                                      should be written.
 */
static void *
ble_eddystone_set_svc_data_base(uint8_t frame_type)
{
   288d4:	b538      	push	{r3, r4, r5, lr}
   288d6:	4605      	mov	r5, r0
    put_le16(ble_eddystone_svc_data, BLE_EDDYSTONE_SERVICE_UUID);
   288d8:	4c04      	ldr	r4, [pc, #16]	; (288ec <ble_eddystone_set_svc_data_base+0x18>)
   288da:	f64f 61aa 	movw	r1, #65194	; 0xfeaa
   288de:	4620      	mov	r0, r4
   288e0:	f7f0 fa94 	bl	18e0c <put_le16>
    ble_eddystone_svc_data[2] = frame_type;
   288e4:	70a5      	strb	r5, [r4, #2]

    return ble_eddystone_svc_data + BLE_EDDYSTONE_SVC_DATA_BASE_SZ;
}
   288e6:	1ce0      	adds	r0, r4, #3
   288e8:	bd38      	pop	{r3, r4, r5, pc}
   288ea:	bf00      	nop
   288ec:	10004ef4 	.word	0x10004ef4

000288f0 <ble_eddystone_set_adv_data_gen>:
ble_eddystone_set_adv_data_gen(struct ble_hs_adv_fields *adv_fields,
                               uint8_t svc_data_len)
{
    int rc;

    if (adv_fields->num_uuids16 > BLE_EDDYSTONE_MAX_UUIDS16) {
   288f0:	7a02      	ldrb	r2, [r0, #8]
   288f2:	2a03      	cmp	r2, #3
   288f4:	d827      	bhi.n	28946 <ble_eddystone_set_adv_data_gen+0x56>
{
   288f6:	b570      	push	{r4, r5, r6, lr}
   288f8:	4604      	mov	r4, r0
   288fa:	460d      	mov	r5, r1
        return BLE_HS_EINVAL;
    }
    if (svc_data_len > (BLE_EDDYSTONE_MAX_SVC_DATA_LEN - BLE_EDDYSTONE_SVC_DATA_BASE_SZ)) {
   288fc:	2913      	cmp	r1, #19
   288fe:	d824      	bhi.n	2894a <ble_eddystone_set_adv_data_gen+0x5a>
        return BLE_HS_EINVAL;
    }
    if (adv_fields->num_uuids16 > 0 && !adv_fields->uuids16_is_complete) {
   28900:	b11a      	cbz	r2, 2890a <ble_eddystone_set_adv_data_gen+0x1a>
   28902:	7a43      	ldrb	r3, [r0, #9]
   28904:	f013 0f01 	tst.w	r3, #1
   28908:	d021      	beq.n	2894e <ble_eddystone_set_adv_data_gen+0x5e>
        return BLE_HS_EINVAL;
    }
    if (adv_fields->svc_data_uuid16_len != 0) {
   2890a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   2890e:	bb03      	cbnz	r3, 28952 <ble_eddystone_set_adv_data_gen+0x62>
        return BLE_HS_EINVAL;
    }

    ble_eddystone_uuids16[0] =
   28910:	4e11      	ldr	r6, [pc, #68]	; (28958 <ble_eddystone_set_adv_data_gen+0x68>)
   28912:	4b12      	ldr	r3, [pc, #72]	; (2895c <ble_eddystone_set_adv_data_gen+0x6c>)
   28914:	681b      	ldr	r3, [r3, #0]
   28916:	4630      	mov	r0, r6
   28918:	f840 3b04 	str.w	r3, [r0], #4
        (ble_uuid16_t) BLE_UUID16_INIT(BLE_EDDYSTONE_SERVICE_UUID);
    memcpy(ble_eddystone_uuids16 + 1, adv_fields->uuids16,
   2891c:	0092      	lsls	r2, r2, #2
   2891e:	6861      	ldr	r1, [r4, #4]
   28920:	f7f2 f996 	bl	1ac50 <memcpy>
           adv_fields->num_uuids16 * sizeof(ble_uuid16_t));
    adv_fields->uuids16 = ble_eddystone_uuids16;
   28924:	6066      	str	r6, [r4, #4]
    adv_fields->num_uuids16++;
   28926:	7a23      	ldrb	r3, [r4, #8]
   28928:	3301      	adds	r3, #1
   2892a:	7223      	strb	r3, [r4, #8]
    adv_fields->uuids16_is_complete = 1;
   2892c:	7a63      	ldrb	r3, [r4, #9]
   2892e:	f043 0301 	orr.w	r3, r3, #1
   28932:	7263      	strb	r3, [r4, #9]

    adv_fields->svc_data_uuid16 = ble_eddystone_svc_data;
   28934:	4b0a      	ldr	r3, [pc, #40]	; (28960 <ble_eddystone_set_adv_data_gen+0x70>)
   28936:	62a3      	str	r3, [r4, #40]	; 0x28
    adv_fields->svc_data_uuid16_len = svc_data_len +
   28938:	3503      	adds	r5, #3
   2893a:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
                                      BLE_EDDYSTONE_SVC_DATA_BASE_SZ;

    rc = ble_gap_adv_set_fields(adv_fields);
   2893e:	4620      	mov	r0, r4
   28940:	f001 f91e 	bl	29b80 <ble_gap_adv_set_fields>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   28944:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EINVAL;
   28946:	2003      	movs	r0, #3
}
   28948:	4770      	bx	lr
        return BLE_HS_EINVAL;
   2894a:	2003      	movs	r0, #3
   2894c:	e7fa      	b.n	28944 <ble_eddystone_set_adv_data_gen+0x54>
        return BLE_HS_EINVAL;
   2894e:	2003      	movs	r0, #3
   28950:	e7f8      	b.n	28944 <ble_eddystone_set_adv_data_gen+0x54>
        return BLE_HS_EINVAL;
   28952:	2003      	movs	r0, #3
   28954:	e7f6      	b.n	28944 <ble_eddystone_set_adv_data_gen+0x54>
   28956:	bf00      	nop
   28958:	10004f0c 	.word	0x10004f0c
   2895c:	0003438c 	.word	0x0003438c
   28960:	10004ef4 	.word	0x10004ef4

00028964 <ble_eddystone_set_adv_data_url>:
int
ble_eddystone_set_adv_data_url(struct ble_hs_adv_fields *adv_fields,
                               uint8_t url_scheme, char *url_body,
                               uint8_t url_body_len, uint8_t url_suffix,
                               int8_t measured_power)
{
   28964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28968:	4606      	mov	r6, r0
   2896a:	4688      	mov	r8, r1
   2896c:	4617      	mov	r7, r2
   2896e:	461c      	mov	r4, r3
   28970:	f89d a020 	ldrb.w	sl, [sp, #32]
    uint8_t *svc_data;
    int url_len;
    int rc;

    url_len = url_body_len;
    if (url_suffix != BLE_EDDYSTONE_URL_SUFFIX_NONE) {
   28974:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   28978:	d025      	beq.n	289c6 <ble_eddystone_set_adv_data_url+0x62>
        url_len++;
   2897a:	f103 0901 	add.w	r9, r3, #1
    }
    if (url_len > BLE_EDDYSTONE_URL_MAX_LEN) {
   2897e:	f1b9 0f11 	cmp.w	r9, #17
   28982:	dc22      	bgt.n	289ca <ble_eddystone_set_adv_data_url+0x66>
        return BLE_HS_EINVAL;
    }

    svc_data = ble_eddystone_set_svc_data_base(BLE_EDDYSTONE_FRAME_TYPE_URL);
   28984:	2010      	movs	r0, #16
   28986:	f7ff ffa5 	bl	288d4 <ble_eddystone_set_svc_data_base>
   2898a:	4605      	mov	r5, r0

    /* Measured Power ranging data (Calibrated tx power at 0 meters). */
    if (measured_power < -100 || measured_power > 20) {
   2898c:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   28990:	f102 0364 	add.w	r3, r2, #100	; 0x64
   28994:	b2db      	uxtb	r3, r3
   28996:	2b78      	cmp	r3, #120	; 0x78
   28998:	d819      	bhi.n	289ce <ble_eddystone_set_adv_data_url+0x6a>
        return BLE_HS_EINVAL;
    }
    svc_data[0] = measured_power;
   2899a:	7002      	strb	r2, [r0, #0]

    svc_data[1] = url_scheme;
   2899c:	f880 8001 	strb.w	r8, [r0, #1]
    memcpy(svc_data + 2, url_body, url_body_len);
   289a0:	4622      	mov	r2, r4
   289a2:	4639      	mov	r1, r7
   289a4:	3002      	adds	r0, #2
   289a6:	f7f2 f953 	bl	1ac50 <memcpy>
    if (url_suffix != BLE_EDDYSTONE_URL_SUFFIX_NONE) {
   289aa:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   289ae:	d002      	beq.n	289b6 <ble_eddystone_set_adv_data_url+0x52>
        svc_data[2 + url_body_len] = url_suffix;
   289b0:	3402      	adds	r4, #2
   289b2:	f805 a004 	strb.w	sl, [r5, r4]
    }

    rc = ble_eddystone_set_adv_data_gen(adv_fields, url_len + 2);
   289b6:	f109 0102 	add.w	r1, r9, #2
   289ba:	b2c9      	uxtb	r1, r1
   289bc:	4630      	mov	r0, r6
   289be:	f7ff ff97 	bl	288f0 <ble_eddystone_set_adv_data_gen>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   289c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    url_len = url_body_len;
   289c6:	4699      	mov	r9, r3
   289c8:	e7d9      	b.n	2897e <ble_eddystone_set_adv_data_url+0x1a>
        return BLE_HS_EINVAL;
   289ca:	2003      	movs	r0, #3
   289cc:	e7f9      	b.n	289c2 <ble_eddystone_set_adv_data_url+0x5e>
        return BLE_HS_EINVAL;
   289ce:	2003      	movs	r0, #3
   289d0:	e7f7      	b.n	289c2 <ble_eddystone_set_adv_data_url+0x5e>

000289d2 <ble_gap_call_event_cb>:
ble_gap_event_listener_call(struct ble_gap_event *event);

static int
ble_gap_call_event_cb(struct ble_gap_event *event,
                      ble_gap_event_fn *cb, void *cb_arg)
{
   289d2:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (cb != NULL) {
   289d4:	b119      	cbz	r1, 289de <ble_gap_call_event_cb+0xc>
   289d6:	460b      	mov	r3, r1
        rc = cb(event, cb_arg);
   289d8:	4611      	mov	r1, r2
   289da:	4798      	blx	r3
        }
        rc = 0;
    }

    return rc;
}
   289dc:	bd08      	pop	{r3, pc}
        if (event->type == BLE_GAP_EVENT_CONN_UPDATE_REQ) {
   289de:	7803      	ldrb	r3, [r0, #0]
   289e0:	2b04      	cmp	r3, #4
   289e2:	d001      	beq.n	289e8 <ble_gap_call_event_cb+0x16>
        rc = 0;
   289e4:	2000      	movs	r0, #0
    return rc;
   289e6:	e7f9      	b.n	289dc <ble_gap_call_event_cb+0xa>
                *event->conn_update_req.peer_params;
   289e8:	6842      	ldr	r2, [r0, #4]
            *event->conn_update_req.self_params =
   289ea:	6883      	ldr	r3, [r0, #8]
   289ec:	6810      	ldr	r0, [r2, #0]
   289ee:	6851      	ldr	r1, [r2, #4]
   289f0:	6892      	ldr	r2, [r2, #8]
   289f2:	6018      	str	r0, [r3, #0]
   289f4:	6059      	str	r1, [r3, #4]
   289f6:	609a      	str	r2, [r3, #8]
        rc = 0;
   289f8:	2000      	movs	r0, #0
   289fa:	e7ef      	b.n	289dc <ble_gap_call_event_cb+0xa>

000289fc <ble_gap_is_preempted>:
    int i;
#endif
    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

#if MYNEWT_VAL(BLE_ROLE_CENTRAL) || MYNEWT_VAL(BLE_ROLE_OBSERVER)
    if (ble_gap_master.preempted_op != BLE_GAP_OP_NULL) {
   289fc:	4b09      	ldr	r3, [pc, #36]	; (28a24 <ble_gap_is_preempted+0x28>)
   289fe:	7c1b      	ldrb	r3, [r3, #16]
   28a00:	b15b      	cbz	r3, 28a1a <ble_gap_is_preempted+0x1e>
        return true;
   28a02:	2001      	movs	r0, #1
            return true;
        }
    }
#endif
    return false;
}
   28a04:	4770      	bx	lr
        if (ble_gap_slave[i].preempted) {
   28a06:	4a07      	ldr	r2, [pc, #28]	; (28a24 <ble_gap_is_preempted+0x28>)
   28a08:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   28a0c:	7d52      	ldrb	r2, [r2, #21]
   28a0e:	f3c2 0080 	ubfx	r0, r2, #2, #1
   28a12:	f012 0f04 	tst.w	r2, #4
   28a16:	d1f5      	bne.n	28a04 <ble_gap_is_preempted+0x8>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   28a18:	3301      	adds	r3, #1
   28a1a:	2b00      	cmp	r3, #0
   28a1c:	ddf3      	ble.n	28a06 <ble_gap_is_preempted+0xa>
    return false;
   28a1e:	2000      	movs	r0, #0
   28a20:	4770      	bx	lr
   28a22:	bf00      	nop
   28a24:	10004fe0 	.word	0x10004fe0

00028a28 <ble_gap_has_client>:

#if MYNEWT_VAL(BLE_ROLE_CENTRAL) || MYNEWT_VAL(BLE_ROLE_PERIPHERAL) || MYNEWT_VAL(BLE_ROLE_OBSERVER)
static bool
ble_gap_has_client(struct ble_gap_master_state *out_state)
{
    if (!out_state) {
   28a28:	b120      	cbz	r0, 28a34 <ble_gap_has_client+0xc>
        return 0;
    }

    return out_state->cb != NULL;
   28a2a:	6880      	ldr	r0, [r0, #8]
   28a2c:	3800      	subs	r0, #0
   28a2e:	bf18      	it	ne
   28a30:	2001      	movne	r0, #1
   28a32:	4770      	bx	lr
        return 0;
   28a34:	2000      	movs	r0, #0
}
   28a36:	4770      	bx	lr

00028a38 <ble_gap_update_to_l2cap>:
#if NIMBLE_BLE_CONNECT
static void
ble_gap_update_to_l2cap(const struct ble_gap_upd_params *params,
                        struct ble_l2cap_sig_update_params *l2cap_params)
{
    l2cap_params->itvl_min = params->itvl_min;
   28a38:	8803      	ldrh	r3, [r0, #0]
   28a3a:	800b      	strh	r3, [r1, #0]
    l2cap_params->itvl_max = params->itvl_max;
   28a3c:	8843      	ldrh	r3, [r0, #2]
   28a3e:	804b      	strh	r3, [r1, #2]
    l2cap_params->slave_latency = params->latency;
   28a40:	8883      	ldrh	r3, [r0, #4]
   28a42:	808b      	strh	r3, [r1, #4]
    l2cap_params->timeout_multiplier = params->supervision_timeout;
   28a44:	88c3      	ldrh	r3, [r0, #6]
   28a46:	80cb      	strh	r3, [r1, #6]
}
   28a48:	4770      	bx	lr
	...

00028a4c <ble_gap_adv_active_instance>:
#if NIMBLE_BLE_ADVERTISE || NIMBLE_BLE_CONNECT
static int
ble_gap_adv_active_instance(uint8_t instance)
{
    /* Assume read is atomic; mutex not necessary. */
    return ble_gap_slave[instance].op == BLE_GAP_OP_S_ADV;
   28a4c:	4b04      	ldr	r3, [pc, #16]	; (28a60 <ble_gap_adv_active_instance+0x14>)
   28a4e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
   28a52:	7d18      	ldrb	r0, [r3, #20]
}
   28a54:	2801      	cmp	r0, #1
   28a56:	bf14      	ite	ne
   28a58:	2000      	movne	r0, #0
   28a5a:	2001      	moveq	r0, #1
   28a5c:	4770      	bx	lr
   28a5e:	bf00      	nop
   28a60:	10004fe0 	.word	0x10004fe0

00028a64 <ble_gap_accept_master_conn>:
static int
ble_gap_accept_master_conn(void)
{
    int rc;

    switch (ble_gap_master.op) {
   28a64:	4b05      	ldr	r3, [pc, #20]	; (28a7c <ble_gap_accept_master_conn+0x18>)
   28a66:	781b      	ldrb	r3, [r3, #0]
   28a68:	2b02      	cmp	r3, #2
   28a6a:	d001      	beq.n	28a70 <ble_gap_accept_master_conn+0xc>
    case BLE_GAP_OP_NULL:
    case BLE_GAP_OP_M_DISC:
        rc = BLE_HS_ENOENT;
   28a6c:	2005      	movs	r0, #5
    if (rc == 0) {
        STATS_INC(ble_gap_stats, connect_mst);
    }

    return rc;
}
   28a6e:	4770      	bx	lr
        STATS_INC(ble_gap_stats, connect_mst);
   28a70:	4a03      	ldr	r2, [pc, #12]	; (28a80 <ble_gap_accept_master_conn+0x1c>)
   28a72:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   28a74:	3301      	adds	r3, #1
   28a76:	65d3      	str	r3, [r2, #92]	; 0x5c
        rc = 0;
   28a78:	2000      	movs	r0, #0
   28a7a:	4770      	bx	lr
   28a7c:	10004fe0 	.word	0x10004fe0
   28a80:	10004f20 	.word	0x10004f20

00028a84 <ble_gap_accept_slave_conn>:
static int
ble_gap_accept_slave_conn(uint8_t instance)
{
    int rc;

    if (instance >= BLE_ADV_INSTANCES) {
   28a84:	b988      	cbnz	r0, 28aaa <ble_gap_accept_slave_conn+0x26>
{
   28a86:	b510      	push	{r4, lr}
   28a88:	4604      	mov	r4, r0
       rc = BLE_HS_ENOENT;
    } else if (!ble_gap_adv_active_instance(instance)) {
   28a8a:	f7ff ffdf 	bl	28a4c <ble_gap_adv_active_instance>
   28a8e:	b170      	cbz	r0, 28aae <ble_gap_accept_slave_conn+0x2a>
        rc = BLE_HS_ENOENT;
    } else {
        if (ble_gap_slave[instance].connectable) {
   28a90:	4b09      	ldr	r3, [pc, #36]	; (28ab8 <ble_gap_accept_slave_conn+0x34>)
   28a92:	eb03 1404 	add.w	r4, r3, r4, lsl #4
   28a96:	7d63      	ldrb	r3, [r4, #21]
   28a98:	f013 0f08 	tst.w	r3, #8
   28a9c:	d009      	beq.n	28ab2 <ble_gap_accept_slave_conn+0x2e>
            rc = BLE_HS_ENOENT;
        }
    }

    if (rc == 0) {
        STATS_INC(ble_gap_stats, connect_slv);
   28a9e:	4a07      	ldr	r2, [pc, #28]	; (28abc <ble_gap_accept_slave_conn+0x38>)
   28aa0:	6e13      	ldr	r3, [r2, #96]	; 0x60
   28aa2:	3301      	adds	r3, #1
   28aa4:	6613      	str	r3, [r2, #96]	; 0x60
            rc = 0;
   28aa6:	2000      	movs	r0, #0
    }

    return rc;
}
   28aa8:	bd10      	pop	{r4, pc}
       rc = BLE_HS_ENOENT;
   28aaa:	2005      	movs	r0, #5
}
   28aac:	4770      	bx	lr
        rc = BLE_HS_ENOENT;
   28aae:	2005      	movs	r0, #5
   28ab0:	e7fa      	b.n	28aa8 <ble_gap_accept_slave_conn+0x24>
            rc = BLE_HS_ENOENT;
   28ab2:	2005      	movs	r0, #5
    return rc;
   28ab4:	e7f8      	b.n	28aa8 <ble_gap_accept_slave_conn+0x24>
   28ab6:	bf00      	nop
   28ab8:	10004fe0 	.word	0x10004fe0
   28abc:	10004f20 	.word	0x10004f20

00028ac0 <ble_gap_wl_busy>:
ble_gap_wl_busy(void)
{
    /* Check if an auto or selective connection establishment procedure is in
     * progress.
     */
    return ble_gap_master.op == BLE_GAP_OP_M_CONN &&
   28ac0:	4b07      	ldr	r3, [pc, #28]	; (28ae0 <ble_gap_wl_busy+0x20>)
   28ac2:	781b      	ldrb	r3, [r3, #0]
   28ac4:	2b02      	cmp	r3, #2
   28ac6:	d001      	beq.n	28acc <ble_gap_wl_busy+0xc>
   28ac8:	2000      	movs	r0, #0
   28aca:	4770      	bx	lr
   28acc:	4b04      	ldr	r3, [pc, #16]	; (28ae0 <ble_gap_wl_busy+0x20>)
   28ace:	7c5b      	ldrb	r3, [r3, #17]
   28ad0:	f013 0f01 	tst.w	r3, #1
   28ad4:	d101      	bne.n	28ada <ble_gap_wl_busy+0x1a>
   28ad6:	2000      	movs	r0, #0
   28ad8:	4770      	bx	lr
   28ada:	2001      	movs	r0, #1
           ble_gap_master.conn.using_wl;
}
   28adc:	4770      	bx	lr
   28ade:	bf00      	nop
   28ae0:	10004fe0 	.word	0x10004fe0

00028ae4 <ble_gap_adv_type>:
 *****************************************************************************/
#if NIMBLE_BLE_ADVERTISE && !MYNEWT_VAL(BLE_EXT_ADV)
static int
ble_gap_adv_type(const struct ble_gap_adv_params *adv_params)
{
    switch (adv_params->conn_mode) {
   28ae4:	7803      	ldrb	r3, [r0, #0]
   28ae6:	b11b      	cbz	r3, 28af0 <ble_gap_adv_type+0xc>
   28ae8:	2b01      	cmp	r3, #1
   28aea:	d005      	beq.n	28af8 <ble_gap_adv_type+0x14>
   28aec:	2000      	movs	r0, #0
   28aee:	4770      	bx	lr
    case BLE_GAP_CONN_MODE_NON:
        if (adv_params->disc_mode == BLE_GAP_DISC_MODE_NON) {
   28af0:	7843      	ldrb	r3, [r0, #1]
   28af2:	b93b      	cbnz	r3, 28b04 <ble_gap_adv_type+0x20>
            return BLE_HCI_ADV_TYPE_ADV_NONCONN_IND;
   28af4:	2003      	movs	r0, #3
   28af6:	4770      	bx	lr

    case BLE_GAP_CONN_MODE_UND:
        return BLE_HCI_ADV_TYPE_ADV_IND;

    case BLE_GAP_CONN_MODE_DIR:
        if (adv_params->high_duty_cycle) {
   28af8:	7a03      	ldrb	r3, [r0, #8]
   28afa:	f013 0f01 	tst.w	r3, #1
   28afe:	d003      	beq.n	28b08 <ble_gap_adv_type+0x24>
            return BLE_HCI_ADV_TYPE_ADV_DIRECT_IND_HD;
   28b00:	2001      	movs	r0, #1
   28b02:	4770      	bx	lr
            return BLE_HCI_ADV_TYPE_ADV_SCAN_IND;
   28b04:	2002      	movs	r0, #2
   28b06:	4770      	bx	lr
        } else {
            return BLE_HCI_ADV_TYPE_ADV_DIRECT_IND_LD;
   28b08:	2004      	movs	r0, #4

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_HCI_ADV_TYPE_ADV_IND;
    }
}
   28b0a:	4770      	bx	lr

00028b0c <ble_gap_adv_dflt_itvls>:

static void
ble_gap_adv_dflt_itvls(uint8_t conn_mode,
                       uint16_t *out_itvl_min, uint16_t *out_itvl_max)
{
    switch (conn_mode) {
   28b0c:	2801      	cmp	r0, #1
   28b0e:	d011      	beq.n	28b34 <ble_gap_adv_dflt_itvls+0x28>
   28b10:	2802      	cmp	r0, #2
   28b12:	d00a      	beq.n	28b2a <ble_gap_adv_dflt_itvls+0x1e>
   28b14:	b120      	cbz	r0, 28b20 <ble_gap_adv_dflt_itvls+0x14>
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
        break;

    default:
        BLE_HS_DBG_ASSERT(0);
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
   28b16:	2330      	movs	r3, #48	; 0x30
   28b18:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
   28b1a:	2360      	movs	r3, #96	; 0x60
   28b1c:	8013      	strh	r3, [r2, #0]
        break;
    }
}
   28b1e:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL2_MIN;
   28b20:	23a0      	movs	r3, #160	; 0xa0
   28b22:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL2_MAX;
   28b24:	23f0      	movs	r3, #240	; 0xf0
   28b26:	8013      	strh	r3, [r2, #0]
        break;
   28b28:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
   28b2a:	2330      	movs	r3, #48	; 0x30
   28b2c:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
   28b2e:	2360      	movs	r3, #96	; 0x60
   28b30:	8013      	strh	r3, [r2, #0]
        break;
   28b32:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
   28b34:	2330      	movs	r3, #48	; 0x30
   28b36:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
   28b38:	2360      	movs	r3, #96	; 0x60
   28b3a:	8013      	strh	r3, [r2, #0]
        break;
   28b3c:	4770      	bx	lr

00028b3e <ble_gap_disc_fill_dflts>:

#if NIMBLE_BLE_SCAN && !MYNEWT_VAL(BLE_EXT_ADV)
static void
ble_gap_disc_fill_dflts(struct ble_gap_disc_params *disc_params)
{
   if (disc_params->itvl == 0) {
   28b3e:	8803      	ldrh	r3, [r0, #0]
   28b40:	b92b      	cbnz	r3, 28b4e <ble_gap_disc_fill_dflts+0x10>
        if (disc_params->limited) {
   28b42:	7943      	ldrb	r3, [r0, #5]
   28b44:	f013 0f01 	tst.w	r3, #1
   28b48:	d00a      	beq.n	28b60 <ble_gap_disc_fill_dflts+0x22>
            disc_params->itvl = BLE_GAP_LIM_DISC_SCAN_INT;
   28b4a:	2312      	movs	r3, #18
   28b4c:	8003      	strh	r3, [r0, #0]
        } else {
            disc_params->itvl = BLE_GAP_SCAN_FAST_INTERVAL_MIN;
        }
    }

    if (disc_params->window == 0) {
   28b4e:	8843      	ldrh	r3, [r0, #2]
   28b50:	b95b      	cbnz	r3, 28b6a <ble_gap_disc_fill_dflts+0x2c>
        if (disc_params->limited) {
   28b52:	7943      	ldrb	r3, [r0, #5]
   28b54:	f013 0f01 	tst.w	r3, #1
   28b58:	d005      	beq.n	28b66 <ble_gap_disc_fill_dflts+0x28>
            disc_params->window = BLE_GAP_LIM_DISC_SCAN_WINDOW;
   28b5a:	2312      	movs	r3, #18
   28b5c:	8043      	strh	r3, [r0, #2]
   28b5e:	4770      	bx	lr
            disc_params->itvl = BLE_GAP_SCAN_FAST_INTERVAL_MIN;
   28b60:	2330      	movs	r3, #48	; 0x30
   28b62:	8003      	strh	r3, [r0, #0]
   28b64:	e7f3      	b.n	28b4e <ble_gap_disc_fill_dflts+0x10>
        } else {
            disc_params->window = BLE_GAP_SCAN_FAST_WINDOW;
   28b66:	2330      	movs	r3, #48	; 0x30
   28b68:	8043      	strh	r3, [r0, #2]
        }
    }
}
   28b6a:	4770      	bx	lr

00028b6c <ble_gap_update_entry_find>:
}

static struct ble_gap_update_entry *
ble_gap_update_entry_find(uint16_t conn_handle,
                          struct ble_gap_update_entry **out_prev)
{
   28b6c:	b410      	push	{r4}
   28b6e:	4602      	mov	r2, r0
    struct ble_gap_update_entry *prev;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    prev = NULL;
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   28b70:	4b06      	ldr	r3, [pc, #24]	; (28b8c <ble_gap_update_entry_find+0x20>)
   28b72:	6818      	ldr	r0, [r3, #0]
    prev = NULL;
   28b74:	2400      	movs	r4, #0
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   28b76:	b128      	cbz	r0, 28b84 <ble_gap_update_entry_find+0x18>
        if (entry->conn_handle == conn_handle) {
   28b78:	8a83      	ldrh	r3, [r0, #20]
   28b7a:	4293      	cmp	r3, r2
   28b7c:	d002      	beq.n	28b84 <ble_gap_update_entry_find+0x18>
            break;
        }

        prev = entry;
   28b7e:	4604      	mov	r4, r0
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   28b80:	6800      	ldr	r0, [r0, #0]
   28b82:	e7f8      	b.n	28b76 <ble_gap_update_entry_find+0xa>
    }

    if (out_prev != NULL) {
   28b84:	b101      	cbz	r1, 28b88 <ble_gap_update_entry_find+0x1c>
        *out_prev = prev;
   28b86:	600c      	str	r4, [r1, #0]
    }

    return entry;
}
   28b88:	bc10      	pop	{r4}
   28b8a:	4770      	bx	lr
   28b8c:	10004fa8 	.word	0x10004fa8

00028b90 <ble_gap_validate_conn_params>:
static bool
ble_gap_validate_conn_params(const struct ble_gap_upd_params *params)
{

    /* Requirements from Bluetooth spec. v4.2 [Vol 2, Part E], 7.8.18 */
    if (params->itvl_min > params->itvl_max) {
   28b90:	8802      	ldrh	r2, [r0, #0]
   28b92:	8843      	ldrh	r3, [r0, #2]
   28b94:	429a      	cmp	r2, r3
   28b96:	d814      	bhi.n	28bc2 <ble_gap_validate_conn_params+0x32>
        return false;
    }

    if (params->itvl_min < 0x0006 || params->itvl_max > 0x0C80) {
   28b98:	2a05      	cmp	r2, #5
   28b9a:	d914      	bls.n	28bc6 <ble_gap_validate_conn_params+0x36>
   28b9c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   28ba0:	d813      	bhi.n	28bca <ble_gap_validate_conn_params+0x3a>
        return false;
    }

    if (params->latency > 0x01F3) {
   28ba2:	8882      	ldrh	r2, [r0, #4]
   28ba4:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   28ba8:	d211      	bcs.n	28bce <ble_gap_validate_conn_params+0x3e>
    /* According to specification mentioned above we should make sure that:
     * supervision_timeout_ms > (1 + latency) * 2 * max_interval_ms
     *    =>
     * supervision_timeout * 10 ms > (1 + latency) * 2 * itvl_max * 1.25ms
     */
    if (params->supervision_timeout <=
   28baa:	88c1      	ldrh	r1, [r0, #6]
                   (((1 + params->latency) * params->itvl_max) / 4)) {
   28bac:	fb02 3303 	mla	r3, r2, r3, r3
   28bb0:	2b00      	cmp	r3, #0
   28bb2:	db04      	blt.n	28bbe <ble_gap_validate_conn_params+0x2e>
    if (params->supervision_timeout <=
   28bb4:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
   28bb8:	dd0b      	ble.n	28bd2 <ble_gap_validate_conn_params+0x42>
        return false;
    }

    return true;
   28bba:	2001      	movs	r0, #1
   28bbc:	4770      	bx	lr
                   (((1 + params->latency) * params->itvl_max) / 4)) {
   28bbe:	3303      	adds	r3, #3
   28bc0:	e7f8      	b.n	28bb4 <ble_gap_validate_conn_params+0x24>
        return false;
   28bc2:	2000      	movs	r0, #0
   28bc4:	4770      	bx	lr
        return false;
   28bc6:	2000      	movs	r0, #0
   28bc8:	4770      	bx	lr
   28bca:	2000      	movs	r0, #0
   28bcc:	4770      	bx	lr
        return false;
   28bce:	2000      	movs	r0, #0
   28bd0:	4770      	bx	lr
        return false;
   28bd2:	2000      	movs	r0, #0
}
   28bd4:	4770      	bx	lr
	...

00028bd8 <ble_gap_event_listener_call>:
    return rc;
}

static int
ble_gap_event_listener_call(struct ble_gap_event *event)
{
   28bd8:	b538      	push	{r3, r4, r5, lr}
   28bda:	4605      	mov	r5, r0
    struct ble_gap_event_listener *evl = NULL;

    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   28bdc:	4b05      	ldr	r3, [pc, #20]	; (28bf4 <ble_gap_event_listener_call+0x1c>)
   28bde:	681c      	ldr	r4, [r3, #0]
   28be0:	b12c      	cbz	r4, 28bee <ble_gap_event_listener_call+0x16>
        evl->fn(event, evl->arg);
   28be2:	6823      	ldr	r3, [r4, #0]
   28be4:	6861      	ldr	r1, [r4, #4]
   28be6:	4628      	mov	r0, r5
   28be8:	4798      	blx	r3
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   28bea:	68a4      	ldr	r4, [r4, #8]
   28bec:	e7f8      	b.n	28be0 <ble_gap_event_listener_call+0x8>
    }

    return 0;
}
   28bee:	2000      	movs	r0, #0
   28bf0:	bd38      	pop	{r3, r4, r5, pc}
   28bf2:	bf00      	nop
   28bf4:	10004f1c 	.word	0x10004f1c

00028bf8 <ble_gap_extract_conn_cb>:
{
   28bf8:	b570      	push	{r4, r5, r6, lr}
   28bfa:	4606      	mov	r6, r0
   28bfc:	460d      	mov	r5, r1
   28bfe:	4614      	mov	r4, r2
    ble_hs_lock();
   28c00:	f005 f9c6 	bl	2df90 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   28c04:	4630      	mov	r0, r6
   28c06:	f006 fa47 	bl	2f098 <ble_hs_conn_find>
    if (conn != NULL) {
   28c0a:	4606      	mov	r6, r0
   28c0c:	b140      	cbz	r0, 28c20 <ble_gap_extract_conn_cb+0x28>
        *out_cb = conn->bhc_cb;
   28c0e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   28c10:	602b      	str	r3, [r5, #0]
        *out_cb_arg = conn->bhc_cb_arg;
   28c12:	6e03      	ldr	r3, [r0, #96]	; 0x60
   28c14:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   28c16:	f005 f9bf 	bl	2df98 <ble_hs_unlock>
    if (conn == NULL) {
   28c1a:	b12e      	cbz	r6, 28c28 <ble_gap_extract_conn_cb+0x30>
        return 0;
   28c1c:	2000      	movs	r0, #0
}
   28c1e:	bd70      	pop	{r4, r5, r6, pc}
        *out_cb = NULL;
   28c20:	2300      	movs	r3, #0
   28c22:	602b      	str	r3, [r5, #0]
        *out_cb_arg = NULL;
   28c24:	6023      	str	r3, [r4, #0]
   28c26:	e7f6      	b.n	28c16 <ble_gap_extract_conn_cb+0x1e>
        return BLE_HS_ENOTCONN;
   28c28:	2007      	movs	r0, #7
   28c2a:	e7f8      	b.n	28c1e <ble_gap_extract_conn_cb+0x26>

00028c2c <ble_gap_call_conn_event_cb>:
{
   28c2c:	b510      	push	{r4, lr}
   28c2e:	b082      	sub	sp, #8
   28c30:	4604      	mov	r4, r0
   28c32:	4608      	mov	r0, r1
    rc = ble_gap_extract_conn_cb(conn_handle, &cb, &cb_arg);
   28c34:	466a      	mov	r2, sp
   28c36:	a901      	add	r1, sp, #4
   28c38:	f7ff ffde 	bl	28bf8 <ble_gap_extract_conn_cb>
    if (rc != 0) {
   28c3c:	b108      	cbz	r0, 28c42 <ble_gap_call_conn_event_cb+0x16>
}
   28c3e:	b002      	add	sp, #8
   28c40:	bd10      	pop	{r4, pc}
    rc = ble_gap_call_event_cb(event, cb, cb_arg);
   28c42:	9a00      	ldr	r2, [sp, #0]
   28c44:	9901      	ldr	r1, [sp, #4]
   28c46:	4620      	mov	r0, r4
   28c48:	f7ff fec3 	bl	289d2 <ble_gap_call_event_cb>
    if (rc != 0) {
   28c4c:	e7f7      	b.n	28c3e <ble_gap_call_conn_event_cb+0x12>

00028c4e <ble_gap_fill_conn_desc>:
{
   28c4e:	b570      	push	{r4, r5, r6, lr}
   28c50:	b088      	sub	sp, #32
   28c52:	4605      	mov	r5, r0
   28c54:	460c      	mov	r4, r1
    ble_hs_conn_addrs(conn, &addrs);
   28c56:	ae01      	add	r6, sp, #4
   28c58:	4631      	mov	r1, r6
   28c5a:	f006 fa4d 	bl	2f0f8 <ble_hs_conn_addrs>
    desc->our_id_addr = addrs.our_id_addr;
   28c5e:	e896 0003 	ldmia.w	r6, {r0, r1}
   28c62:	6060      	str	r0, [r4, #4]
   28c64:	f104 0308 	add.w	r3, r4, #8
   28c68:	f823 1b02 	strh.w	r1, [r3], #2
   28c6c:	0c09      	lsrs	r1, r1, #16
   28c6e:	7019      	strb	r1, [r3, #0]
    desc->peer_id_addr = addrs.peer_id_addr;
   28c70:	f8dd 300b 	ldr.w	r3, [sp, #11]
   28c74:	f8c4 300b 	str.w	r3, [r4, #11]
   28c78:	f8bd 200f 	ldrh.w	r2, [sp, #15]
   28c7c:	f89d 3011 	ldrb.w	r3, [sp, #17]
   28c80:	f8a4 200f 	strh.w	r2, [r4, #15]
   28c84:	7463      	strb	r3, [r4, #17]
    desc->our_ota_addr = addrs.our_ota_addr;
   28c86:	f8dd 3012 	ldr.w	r3, [sp, #18]
   28c8a:	f8c4 3012 	str.w	r3, [r4, #18]
   28c8e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   28c92:	f89d 3018 	ldrb.w	r3, [sp, #24]
   28c96:	82e2      	strh	r2, [r4, #22]
   28c98:	7623      	strb	r3, [r4, #24]
    desc->peer_ota_addr = addrs.peer_ota_addr;
   28c9a:	f8dd 3019 	ldr.w	r3, [sp, #25]
   28c9e:	f8c4 3019 	str.w	r3, [r4, #25]
   28ca2:	f8bd 201d 	ldrh.w	r2, [sp, #29]
   28ca6:	f89d 301f 	ldrb.w	r3, [sp, #31]
   28caa:	f8a4 201d 	strh.w	r2, [r4, #29]
   28cae:	77e3      	strb	r3, [r4, #31]
    desc->conn_handle = conn->bhc_handle;
   28cb0:	88ab      	ldrh	r3, [r5, #4]
   28cb2:	8423      	strh	r3, [r4, #32]
    desc->conn_itvl = conn->bhc_itvl;
   28cb4:	8bab      	ldrh	r3, [r5, #28]
   28cb6:	8463      	strh	r3, [r4, #34]	; 0x22
    desc->conn_latency = conn->bhc_latency;
   28cb8:	8beb      	ldrh	r3, [r5, #30]
   28cba:	84a3      	strh	r3, [r4, #36]	; 0x24
    desc->supervision_timeout = conn->bhc_supervision_timeout;
   28cbc:	8c2b      	ldrh	r3, [r5, #32]
   28cbe:	84e3      	strh	r3, [r4, #38]	; 0x26
    desc->master_clock_accuracy = conn->bhc_master_clock_accuracy;
   28cc0:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   28cc4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    desc->sec_state = conn->bhc_sec_state;
   28cc8:	6dab      	ldr	r3, [r5, #88]	; 0x58
   28cca:	6023      	str	r3, [r4, #0]
    if (conn->bhc_flags & BLE_HS_CONN_F_MASTER) {
   28ccc:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   28cd0:	f013 0f01 	tst.w	r3, #1
   28cd4:	d004      	beq.n	28ce0 <ble_gap_fill_conn_desc+0x92>
        desc->role = BLE_GAP_ROLE_MASTER;
   28cd6:	2300      	movs	r3, #0
   28cd8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   28cdc:	b008      	add	sp, #32
   28cde:	bd70      	pop	{r4, r5, r6, pc}
        desc->role = BLE_GAP_ROLE_SLAVE;
   28ce0:	2301      	movs	r3, #1
   28ce2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   28ce6:	e7f9      	b.n	28cdc <ble_gap_fill_conn_desc+0x8e>

00028ce8 <ble_gap_conn_to_snapshot>:
{
   28ce8:	b538      	push	{r3, r4, r5, lr}
   28cea:	4605      	mov	r5, r0
   28cec:	460c      	mov	r4, r1
    ble_gap_fill_conn_desc(conn, snap->desc);
   28cee:	6809      	ldr	r1, [r1, #0]
   28cf0:	f7ff ffad 	bl	28c4e <ble_gap_fill_conn_desc>
    snap->cb = conn->bhc_cb;
   28cf4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   28cf6:	6063      	str	r3, [r4, #4]
    snap->cb_arg = conn->bhc_cb_arg;
   28cf8:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   28cfa:	60a3      	str	r3, [r4, #8]
}
   28cfc:	bd38      	pop	{r3, r4, r5, pc}

00028cfe <ble_gap_find_snapshot>:
{
   28cfe:	b538      	push	{r3, r4, r5, lr}
   28d00:	4604      	mov	r4, r0
   28d02:	460d      	mov	r5, r1
    ble_hs_lock();
   28d04:	f005 f944 	bl	2df90 <ble_hs_lock>
    conn = ble_hs_conn_find(handle);
   28d08:	4620      	mov	r0, r4
   28d0a:	f006 f9c5 	bl	2f098 <ble_hs_conn_find>
    if (conn != NULL) {
   28d0e:	4604      	mov	r4, r0
   28d10:	b110      	cbz	r0, 28d18 <ble_gap_find_snapshot+0x1a>
        ble_gap_conn_to_snapshot(conn, snap);
   28d12:	4629      	mov	r1, r5
   28d14:	f7ff ffe8 	bl	28ce8 <ble_gap_conn_to_snapshot>
    ble_hs_unlock();
   28d18:	f005 f93e 	bl	2df98 <ble_hs_unlock>
    if (conn == NULL) {
   28d1c:	b10c      	cbz	r4, 28d22 <ble_gap_find_snapshot+0x24>
        return 0;
   28d1e:	2000      	movs	r0, #0
}
   28d20:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOTCONN;
   28d22:	2007      	movs	r0, #7
   28d24:	e7fc      	b.n	28d20 <ble_gap_find_snapshot+0x22>

00028d26 <ble_gap_rd_rem_sup_feat_tx>:
{
   28d26:	b500      	push	{lr}
   28d28:	b085      	sub	sp, #20
    cmd.conn_handle = htole16(handle);
   28d2a:	f8ad 000c 	strh.w	r0, [sp, #12]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   28d2e:	2300      	movs	r3, #0
   28d30:	9300      	str	r3, [sp, #0]
   28d32:	2202      	movs	r2, #2
   28d34:	a903      	add	r1, sp, #12
   28d36:	f242 0016 	movw	r0, #8214	; 0x2016
   28d3a:	f006 fbfd 	bl	2f538 <ble_hs_hci_cmd_tx>
}
   28d3e:	b005      	add	sp, #20
   28d40:	f85d fb04 	ldr.w	pc, [sp], #4

00028d44 <ble_gap_conn_cancel_tx>:
{
   28d44:	b500      	push	{lr}
   28d46:	b083      	sub	sp, #12
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   28d48:	2100      	movs	r1, #0
   28d4a:	9100      	str	r1, [sp, #0]
   28d4c:	460b      	mov	r3, r1
   28d4e:	460a      	mov	r2, r1
   28d50:	f242 000e 	movw	r0, #8206	; 0x200e
   28d54:	f006 fbf0 	bl	2f538 <ble_hs_hci_cmd_tx>
}
   28d58:	b003      	add	sp, #12
   28d5a:	f85d fb04 	ldr.w	pc, [sp], #4

00028d5e <ble_gap_disc_enable_tx>:
{
   28d5e:	b500      	push	{lr}
   28d60:	b085      	sub	sp, #20
    cmd.enable = !!enable;
   28d62:	3800      	subs	r0, #0
   28d64:	bf18      	it	ne
   28d66:	2001      	movne	r0, #1
   28d68:	f88d 000c 	strb.w	r0, [sp, #12]
    cmd.filter_duplicates = !!filter_duplicates;
   28d6c:	3900      	subs	r1, #0
   28d6e:	bf18      	it	ne
   28d70:	2101      	movne	r1, #1
   28d72:	f88d 100d 	strb.w	r1, [sp, #13]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   28d76:	2300      	movs	r3, #0
   28d78:	9300      	str	r3, [sp, #0]
   28d7a:	2202      	movs	r2, #2
   28d7c:	a903      	add	r1, sp, #12
   28d7e:	f242 000c 	movw	r0, #8204	; 0x200c
   28d82:	f006 fbd9 	bl	2f538 <ble_hs_hci_cmd_tx>
}
   28d86:	b005      	add	sp, #20
   28d88:	f85d fb04 	ldr.w	pc, [sp], #4

00028d8c <ble_gap_disc_disable_tx>:
{
   28d8c:	b508      	push	{r3, lr}
    return ble_gap_disc_enable_tx(0, 0);
   28d8e:	2100      	movs	r1, #0
   28d90:	4608      	mov	r0, r1
   28d92:	f7ff ffe4 	bl	28d5e <ble_gap_disc_enable_tx>
}
   28d96:	bd08      	pop	{r3, pc}

00028d98 <ble_gap_adv_enable_tx>:
{
   28d98:	b500      	push	{lr}
   28d9a:	b085      	sub	sp, #20
    cmd.enable = !!enable;
   28d9c:	3800      	subs	r0, #0
   28d9e:	bf18      	it	ne
   28da0:	2001      	movne	r0, #1
   28da2:	f88d 000c 	strb.w	r0, [sp, #12]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   28da6:	2300      	movs	r3, #0
   28da8:	9300      	str	r3, [sp, #0]
   28daa:	2201      	movs	r2, #1
   28dac:	a903      	add	r1, sp, #12
   28dae:	f242 000a 	movw	r0, #8202	; 0x200a
   28db2:	f006 fbc1 	bl	2f538 <ble_hs_hci_cmd_tx>
}
   28db6:	b005      	add	sp, #20
   28db8:	f85d fb04 	ldr.w	pc, [sp], #4

00028dbc <ble_gap_wl_tx_clear>:
{
   28dbc:	b500      	push	{lr}
   28dbe:	b083      	sub	sp, #12
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   28dc0:	2100      	movs	r1, #0
   28dc2:	9100      	str	r1, [sp, #0]
   28dc4:	460b      	mov	r3, r1
   28dc6:	460a      	mov	r2, r1
   28dc8:	f242 0010 	movw	r0, #8208	; 0x2010
   28dcc:	f006 fbb4 	bl	2f538 <ble_hs_hci_cmd_tx>
}
   28dd0:	b003      	add	sp, #12
   28dd2:	f85d fb04 	ldr.w	pc, [sp], #4

00028dd6 <ble_gap_wl_tx_add>:
    if (addr->type > BLE_ADDR_RANDOM) {
   28dd6:	7803      	ldrb	r3, [r0, #0]
   28dd8:	2b01      	cmp	r3, #1
   28dda:	d817      	bhi.n	28e0c <ble_gap_wl_tx_add+0x36>
{
   28ddc:	b500      	push	{lr}
   28dde:	b085      	sub	sp, #20
    memcpy(cmd.addr, addr->val, BLE_DEV_ADDR_LEN);
   28de0:	4603      	mov	r3, r0
   28de2:	f853 2f01 	ldr.w	r2, [r3, #1]!
   28de6:	f8cd 2009 	str.w	r2, [sp, #9]
   28dea:	889b      	ldrh	r3, [r3, #4]
   28dec:	f8ad 300d 	strh.w	r3, [sp, #13]
    cmd.addr_type = addr->type;
   28df0:	7803      	ldrb	r3, [r0, #0]
   28df2:	f88d 3008 	strb.w	r3, [sp, #8]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   28df6:	2300      	movs	r3, #0
   28df8:	9300      	str	r3, [sp, #0]
   28dfa:	2207      	movs	r2, #7
   28dfc:	a902      	add	r1, sp, #8
   28dfe:	f242 0011 	movw	r0, #8209	; 0x2011
   28e02:	f006 fb99 	bl	2f538 <ble_hs_hci_cmd_tx>
}
   28e06:	b005      	add	sp, #20
   28e08:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EINVAL;
   28e0c:	2003      	movs	r0, #3
}
   28e0e:	4770      	bx	lr

00028e10 <ble_gap_adv_params_tx>:
{
   28e10:	b570      	push	{r4, r5, r6, lr}
   28e12:	b08a      	sub	sp, #40	; 0x28
   28e14:	4606      	mov	r6, r0
   28e16:	460c      	mov	r4, r1
   28e18:	4615      	mov	r5, r2
    const ble_addr_t *peer_any = BLE_ADDR_ANY;
   28e1a:	2300      	movs	r3, #0
   28e1c:	9308      	str	r3, [sp, #32]
   28e1e:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    if ((adv_params->itvl_min == 0) && (adv_params->itvl_max == 0)) {
   28e22:	8853      	ldrh	r3, [r2, #2]
   28e24:	b90b      	cbnz	r3, 28e2a <ble_gap_adv_params_tx+0x1a>
   28e26:	8892      	ldrh	r2, [r2, #4]
   28e28:	b342      	cbz	r2, 28e7c <ble_gap_adv_params_tx+0x6c>
        cmd.min_interval = htole16(adv_params->itvl_min);
   28e2a:	f8ad 3010 	strh.w	r3, [sp, #16]
        cmd.max_interval = htole16(adv_params->itvl_max);
   28e2e:	88ab      	ldrh	r3, [r5, #4]
   28e30:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.type = ble_gap_adv_type(adv_params);
   28e34:	4628      	mov	r0, r5
   28e36:	f7ff fe55 	bl	28ae4 <ble_gap_adv_type>
   28e3a:	f88d 0014 	strb.w	r0, [sp, #20]
    cmd.own_addr_type = own_addr_type;
   28e3e:	f88d 6015 	strb.w	r6, [sp, #21]
    if (peer_addr == NULL) {
   28e42:	b354      	cbz	r4, 28e9a <ble_gap_adv_params_tx+0x8a>
    cmd.peer_addr_type = peer_addr->type;
   28e44:	7823      	ldrb	r3, [r4, #0]
   28e46:	f88d 3016 	strb.w	r3, [sp, #22]
    memcpy(&cmd.peer_addr, peer_addr->val, sizeof(cmd.peer_addr));
   28e4a:	f854 3f01 	ldr.w	r3, [r4, #1]!
   28e4e:	f8cd 3017 	str.w	r3, [sp, #23]
   28e52:	88a3      	ldrh	r3, [r4, #4]
   28e54:	f8ad 301b 	strh.w	r3, [sp, #27]
    if (adv_params->channel_map == 0) {
   28e58:	79ab      	ldrb	r3, [r5, #6]
   28e5a:	bb03      	cbnz	r3, 28e9e <ble_gap_adv_params_tx+0x8e>
        cmd.chan_map = BLE_GAP_ADV_DFLT_CHANNEL_MAP;
   28e5c:	2307      	movs	r3, #7
   28e5e:	f88d 301d 	strb.w	r3, [sp, #29]
    cmd.filter_policy = adv_params->filter_policy;
   28e62:	79eb      	ldrb	r3, [r5, #7]
   28e64:	f88d 301e 	strb.w	r3, [sp, #30]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   28e68:	2300      	movs	r3, #0
   28e6a:	9300      	str	r3, [sp, #0]
   28e6c:	220f      	movs	r2, #15
   28e6e:	a904      	add	r1, sp, #16
   28e70:	f242 0006 	movw	r0, #8198	; 0x2006
   28e74:	f006 fb60 	bl	2f538 <ble_hs_hci_cmd_tx>
}
   28e78:	b00a      	add	sp, #40	; 0x28
   28e7a:	bd70      	pop	{r4, r5, r6, pc}
        ble_gap_adv_dflt_itvls(adv_params->conn_mode, &min, &max);
   28e7c:	aa03      	add	r2, sp, #12
   28e7e:	f10d 010e 	add.w	r1, sp, #14
   28e82:	7828      	ldrb	r0, [r5, #0]
   28e84:	f7ff fe42 	bl	28b0c <ble_gap_adv_dflt_itvls>
        cmd.min_interval = htole16(min);
   28e88:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   28e8c:	f8ad 3010 	strh.w	r3, [sp, #16]
        cmd.max_interval = htole16(max);
   28e90:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   28e94:	f8ad 3012 	strh.w	r3, [sp, #18]
   28e98:	e7cc      	b.n	28e34 <ble_gap_adv_params_tx+0x24>
        peer_addr = peer_any;
   28e9a:	ac08      	add	r4, sp, #32
   28e9c:	e7d2      	b.n	28e44 <ble_gap_adv_params_tx+0x34>
        cmd.chan_map = adv_params->channel_map;
   28e9e:	f88d 301d 	strb.w	r3, [sp, #29]
   28ea2:	e7de      	b.n	28e62 <ble_gap_adv_params_tx+0x52>

00028ea4 <ble_gap_disc_tx_params>:
{
   28ea4:	b500      	push	{lr}
   28ea6:	b085      	sub	sp, #20
    if (disc_params->passive) {
   28ea8:	794b      	ldrb	r3, [r1, #5]
   28eaa:	f013 0f02 	tst.w	r3, #2
   28eae:	d018      	beq.n	28ee2 <ble_gap_disc_tx_params+0x3e>
        cmd.scan_type = BLE_HCI_SCAN_TYPE_PASSIVE;
   28eb0:	2300      	movs	r3, #0
   28eb2:	f88d 3008 	strb.w	r3, [sp, #8]
    cmd.scan_itvl = htole16(disc_params->itvl);
   28eb6:	880b      	ldrh	r3, [r1, #0]
   28eb8:	f8ad 3009 	strh.w	r3, [sp, #9]
    cmd.scan_window = htole16(disc_params->window);
   28ebc:	884b      	ldrh	r3, [r1, #2]
   28ebe:	f8ad 300b 	strh.w	r3, [sp, #11]
    cmd.own_addr_type = own_addr_type;
   28ec2:	f88d 000d 	strb.w	r0, [sp, #13]
    cmd.filter_policy = disc_params->filter_policy;
   28ec6:	790b      	ldrb	r3, [r1, #4]
   28ec8:	f88d 300e 	strb.w	r3, [sp, #14]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   28ecc:	2300      	movs	r3, #0
   28ece:	9300      	str	r3, [sp, #0]
   28ed0:	2207      	movs	r2, #7
   28ed2:	a902      	add	r1, sp, #8
   28ed4:	f242 000b 	movw	r0, #8203	; 0x200b
   28ed8:	f006 fb2e 	bl	2f538 <ble_hs_hci_cmd_tx>
}
   28edc:	b005      	add	sp, #20
   28ede:	f85d fb04 	ldr.w	pc, [sp], #4
        cmd.scan_type = BLE_HCI_SCAN_TYPE_ACTIVE;
   28ee2:	2301      	movs	r3, #1
   28ee4:	f88d 3008 	strb.w	r3, [sp, #8]
   28ee8:	e7e5      	b.n	28eb6 <ble_gap_disc_tx_params+0x12>

00028eea <ble_gap_tx_param_pos_reply>:
{
   28eea:	b500      	push	{lr}
   28eec:	b087      	sub	sp, #28
    cmd.conn_handle = htole16(conn_handle);
   28eee:	f8ad 0008 	strh.w	r0, [sp, #8]
    cmd.conn_itvl_min = htole16(params->itvl_min);
   28ef2:	880b      	ldrh	r3, [r1, #0]
   28ef4:	f8ad 300a 	strh.w	r3, [sp, #10]
    cmd.conn_itvl_max = htole16(params->itvl_max);
   28ef8:	884b      	ldrh	r3, [r1, #2]
   28efa:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.conn_latency = htole16(params->latency);
   28efe:	888b      	ldrh	r3, [r1, #4]
   28f00:	f8ad 300e 	strh.w	r3, [sp, #14]
    cmd.supervision_timeout = htole16(params->supervision_timeout);
   28f04:	88cb      	ldrh	r3, [r1, #6]
   28f06:	f8ad 3010 	strh.w	r3, [sp, #16]
    cmd.min_ce = htole16(params->min_ce_len);
   28f0a:	890b      	ldrh	r3, [r1, #8]
   28f0c:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.max_ce = htole16(params->max_ce_len);
   28f10:	894b      	ldrh	r3, [r1, #10]
   28f12:	f8ad 3014 	strh.w	r3, [sp, #20]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   28f16:	2300      	movs	r3, #0
   28f18:	9300      	str	r3, [sp, #0]
   28f1a:	220e      	movs	r2, #14
   28f1c:	a902      	add	r1, sp, #8
   28f1e:	f242 0020 	movw	r0, #8224	; 0x2020
   28f22:	f006 fb09 	bl	2f538 <ble_hs_hci_cmd_tx>
}
   28f26:	b007      	add	sp, #28
   28f28:	f85d fb04 	ldr.w	pc, [sp], #4

00028f2c <ble_gap_tx_param_neg_reply>:
{
   28f2c:	b500      	push	{lr}
   28f2e:	b085      	sub	sp, #20
    cmd.conn_handle = htole16(conn_handle);
   28f30:	f8ad 000c 	strh.w	r0, [sp, #12]
    cmd.reason = reject_reason;
   28f34:	f88d 100e 	strb.w	r1, [sp, #14]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   28f38:	2300      	movs	r3, #0
   28f3a:	9300      	str	r3, [sp, #0]
   28f3c:	2203      	movs	r2, #3
   28f3e:	a903      	add	r1, sp, #12
   28f40:	f242 0021 	movw	r0, #8225	; 0x2021
   28f44:	f006 faf8 	bl	2f538 <ble_hs_hci_cmd_tx>
}
   28f48:	b005      	add	sp, #20
   28f4a:	f85d fb04 	ldr.w	pc, [sp], #4

00028f4e <ble_gap_update_tx>:
{
   28f4e:	b500      	push	{lr}
   28f50:	b087      	sub	sp, #28
    cmd.conn_handle = htole16(conn_handle);
   28f52:	f8ad 0008 	strh.w	r0, [sp, #8]
    cmd.conn_itvl_min = htole16(params->itvl_min);
   28f56:	880b      	ldrh	r3, [r1, #0]
   28f58:	f8ad 300a 	strh.w	r3, [sp, #10]
    cmd.conn_itvl_max = htole16(params->itvl_max);
   28f5c:	884b      	ldrh	r3, [r1, #2]
   28f5e:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.conn_latency = htole16(params->latency);
   28f62:	888b      	ldrh	r3, [r1, #4]
   28f64:	f8ad 300e 	strh.w	r3, [sp, #14]
    cmd.supervision_timeout = htole16(params->supervision_timeout);
   28f68:	88cb      	ldrh	r3, [r1, #6]
   28f6a:	f8ad 3010 	strh.w	r3, [sp, #16]
    cmd.min_ce_len = htole16(params->min_ce_len);
   28f6e:	890b      	ldrh	r3, [r1, #8]
   28f70:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.max_ce_len = htole16(params->max_ce_len);
   28f74:	894b      	ldrh	r3, [r1, #10]
   28f76:	f8ad 3014 	strh.w	r3, [sp, #20]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   28f7a:	2300      	movs	r3, #0
   28f7c:	9300      	str	r3, [sp, #0]
   28f7e:	220e      	movs	r2, #14
   28f80:	a902      	add	r1, sp, #8
   28f82:	f242 0013 	movw	r0, #8211	; 0x2013
   28f86:	f006 fad7 	bl	2f538 <ble_hs_hci_cmd_tx>
}
   28f8a:	b007      	add	sp, #28
   28f8c:	f85d fb04 	ldr.w	pc, [sp], #4

00028f90 <ble_gap_conn_create_tx>:
{
   28f90:	b500      	push	{lr}
   28f92:	b08b      	sub	sp, #44	; 0x2c
    cmd.scan_itvl = htole16(params->scan_itvl);
   28f94:	8813      	ldrh	r3, [r2, #0]
   28f96:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.scan_window = htole16(params->scan_window);
   28f9a:	8853      	ldrh	r3, [r2, #2]
   28f9c:	f8ad 300e 	strh.w	r3, [sp, #14]
    if (peer_addr == NULL) {
   28fa0:	b361      	cbz	r1, 28ffc <ble_gap_conn_create_tx+0x6c>
   28fa2:	460b      	mov	r3, r1
        cmd.filter_policy = BLE_HCI_CONN_FILT_NO_WL;
   28fa4:	2100      	movs	r1, #0
   28fa6:	f88d 1010 	strb.w	r1, [sp, #16]
        cmd.peer_addr_type = peer_addr->type;
   28faa:	7819      	ldrb	r1, [r3, #0]
   28fac:	f88d 1011 	strb.w	r1, [sp, #17]
        memcpy(cmd.peer_addr, peer_addr->val, sizeof(cmd.peer_addr));
   28fb0:	f853 1f01 	ldr.w	r1, [r3, #1]!
   28fb4:	f8cd 1012 	str.w	r1, [sp, #18]
   28fb8:	889b      	ldrh	r3, [r3, #4]
   28fba:	f8ad 3016 	strh.w	r3, [sp, #22]
    cmd.own_addr_type = own_addr_type;
   28fbe:	f88d 0018 	strb.w	r0, [sp, #24]
    cmd.min_conn_itvl = htole16(params->itvl_min);
   28fc2:	8893      	ldrh	r3, [r2, #4]
   28fc4:	f8ad 3019 	strh.w	r3, [sp, #25]
    cmd.max_conn_itvl = htole16(params->itvl_max);
   28fc8:	88d3      	ldrh	r3, [r2, #6]
   28fca:	f8ad 301b 	strh.w	r3, [sp, #27]
    cmd.conn_latency = htole16(params->latency);
   28fce:	8913      	ldrh	r3, [r2, #8]
   28fd0:	f8ad 301d 	strh.w	r3, [sp, #29]
    cmd.tmo = htole16(params->supervision_timeout);
   28fd4:	8953      	ldrh	r3, [r2, #10]
   28fd6:	f8ad 301f 	strh.w	r3, [sp, #31]
    cmd.min_ce = htole16(params->min_ce_len);
   28fda:	8993      	ldrh	r3, [r2, #12]
   28fdc:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
    cmd.max_ce = htole16(params->max_ce_len);
   28fe0:	89d3      	ldrh	r3, [r2, #14]
   28fe2:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   28fe6:	2300      	movs	r3, #0
   28fe8:	9300      	str	r3, [sp, #0]
   28fea:	2219      	movs	r2, #25
   28fec:	a903      	add	r1, sp, #12
   28fee:	f242 000d 	movw	r0, #8205	; 0x200d
   28ff2:	f006 faa1 	bl	2f538 <ble_hs_hci_cmd_tx>
}
   28ff6:	b00b      	add	sp, #44	; 0x2c
   28ff8:	f85d fb04 	ldr.w	pc, [sp], #4
        cmd.filter_policy = BLE_HCI_CONN_FILT_USE_WL;
   28ffc:	2301      	movs	r3, #1
   28ffe:	f88d 3010 	strb.w	r3, [sp, #16]
        cmd.peer_addr_type = 0;
   29002:	2300      	movs	r3, #0
   29004:	f88d 3011 	strb.w	r3, [sp, #17]
        memset(cmd.peer_addr, 0, sizeof(cmd.peer_addr));
   29008:	f8cd 3012 	str.w	r3, [sp, #18]
   2900c:	f8ad 3016 	strh.w	r3, [sp, #22]
   29010:	e7d5      	b.n	28fbe <ble_gap_conn_create_tx+0x2e>
	...

00029014 <ble_gap_update_entry_remove>:
{
   29014:	b510      	push	{r4, lr}
   29016:	b082      	sub	sp, #8
    entry = ble_gap_update_entry_find(conn_handle, &prev);
   29018:	a901      	add	r1, sp, #4
   2901a:	f7ff fda7 	bl	28b6c <ble_gap_update_entry_find>
    if (entry != NULL) {
   2901e:	4604      	mov	r4, r0
   29020:	b128      	cbz	r0, 2902e <ble_gap_update_entry_remove+0x1a>
        if (prev == NULL) {
   29022:	9b01      	ldr	r3, [sp, #4]
   29024:	b133      	cbz	r3, 29034 <ble_gap_update_entry_remove+0x20>
            SLIST_NEXT(prev, next) = SLIST_NEXT(entry, next);
   29026:	6802      	ldr	r2, [r0, #0]
   29028:	601a      	str	r2, [r3, #0]
        ble_hs_timer_resched();
   2902a:	f005 f8a3 	bl	2e174 <ble_hs_timer_resched>
}
   2902e:	4620      	mov	r0, r4
   29030:	b002      	add	sp, #8
   29032:	bd10      	pop	{r4, pc}
            SLIST_REMOVE_HEAD(&ble_gap_update_entries, next);
   29034:	4b02      	ldr	r3, [pc, #8]	; (29040 <ble_gap_update_entry_remove+0x2c>)
   29036:	681a      	ldr	r2, [r3, #0]
   29038:	6812      	ldr	r2, [r2, #0]
   2903a:	601a      	str	r2, [r3, #0]
   2903c:	e7f5      	b.n	2902a <ble_gap_update_entry_remove+0x16>
   2903e:	bf00      	nop
   29040:	10004fa8 	.word	0x10004fa8

00029044 <ble_gap_slave_reset_state>:
{
   29044:	b508      	push	{r3, lr}
    ble_gap_slave[instance].op = BLE_GAP_OP_NULL;
   29046:	4b06      	ldr	r3, [pc, #24]	; (29060 <ble_gap_slave_reset_state+0x1c>)
   29048:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   2904c:	2200      	movs	r2, #0
   2904e:	7502      	strb	r2, [r0, #20]
    ble_gap_slave[instance].exp_set = 0;
   29050:	7d43      	ldrb	r3, [r0, #21]
   29052:	f362 1304 	bfi	r3, r2, #4, #1
   29056:	7543      	strb	r3, [r0, #21]
    ble_hs_timer_resched();
   29058:	f005 f88c 	bl	2e174 <ble_hs_timer_resched>
}
   2905c:	bd08      	pop	{r3, pc}
   2905e:	bf00      	nop
   29060:	10004fe0 	.word	0x10004fe0

00029064 <ble_gap_slave_extract_cb>:
{
   29064:	b570      	push	{r4, r5, r6, lr}
   29066:	4604      	mov	r4, r0
   29068:	460e      	mov	r6, r1
   2906a:	4615      	mov	r5, r2
    ble_hs_lock();
   2906c:	f004 ff90 	bl	2df90 <ble_hs_lock>
    *out_cb = ble_gap_slave[instance].cb;
   29070:	4b06      	ldr	r3, [pc, #24]	; (2908c <ble_gap_slave_extract_cb+0x28>)
   29072:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   29076:	69da      	ldr	r2, [r3, #28]
   29078:	6032      	str	r2, [r6, #0]
    *out_cb_arg = ble_gap_slave[instance].cb_arg;
   2907a:	6a1b      	ldr	r3, [r3, #32]
   2907c:	602b      	str	r3, [r5, #0]
    ble_gap_slave_reset_state(instance);
   2907e:	4620      	mov	r0, r4
   29080:	f7ff ffe0 	bl	29044 <ble_gap_slave_reset_state>
    ble_hs_unlock();
   29084:	f004 ff88 	bl	2df98 <ble_hs_unlock>
}
   29088:	bd70      	pop	{r4, r5, r6, pc}
   2908a:	bf00      	nop
   2908c:	10004fe0 	.word	0x10004fe0

00029090 <ble_gap_adv_finished>:
{
   29090:	b530      	push	{r4, r5, lr}
   29092:	b091      	sub	sp, #68	; 0x44
   29094:	4604      	mov	r4, r0
   29096:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   29098:	2234      	movs	r2, #52	; 0x34
   2909a:	2100      	movs	r1, #0
   2909c:	a803      	add	r0, sp, #12
   2909e:	f7f1 fdfc 	bl	1ac9a <memset>
    event.type = BLE_GAP_EVENT_ADV_COMPLETE;
   290a2:	2309      	movs	r3, #9
   290a4:	f88d 300c 	strb.w	r3, [sp, #12]
    event.adv_complete.reason = reason;
   290a8:	9504      	str	r5, [sp, #16]
    ble_gap_event_listener_call(&event);
   290aa:	a803      	add	r0, sp, #12
   290ac:	f7ff fd94 	bl	28bd8 <ble_gap_event_listener_call>
    ble_gap_slave_extract_cb(instance, &cb, &cb_arg);
   290b0:	aa01      	add	r2, sp, #4
   290b2:	a902      	add	r1, sp, #8
   290b4:	4620      	mov	r0, r4
   290b6:	f7ff ffd5 	bl	29064 <ble_gap_slave_extract_cb>
    if (cb != NULL) {
   290ba:	9b02      	ldr	r3, [sp, #8]
   290bc:	b113      	cbz	r3, 290c4 <ble_gap_adv_finished+0x34>
        cb(&event, cb_arg);
   290be:	9901      	ldr	r1, [sp, #4]
   290c0:	a803      	add	r0, sp, #12
   290c2:	4798      	blx	r3
}
   290c4:	b011      	add	sp, #68	; 0x44
   290c6:	bd30      	pop	{r4, r5, pc}

000290c8 <ble_gap_master_reset_state>:
{
   290c8:	b508      	push	{r3, lr}
    ble_gap_master.op = BLE_GAP_OP_NULL;
   290ca:	4b07      	ldr	r3, [pc, #28]	; (290e8 <ble_gap_master_reset_state+0x20>)
   290cc:	2200      	movs	r2, #0
   290ce:	701a      	strb	r2, [r3, #0]
    ble_gap_master.exp_set = 0;
   290d0:	7859      	ldrb	r1, [r3, #1]
   290d2:	f362 0100 	bfi	r1, r2, #0, #1
   290d6:	7059      	strb	r1, [r3, #1]
    ble_gap_master.conn.cancel = 0;
   290d8:	7c59      	ldrb	r1, [r3, #17]
   290da:	f362 01c3 	bfi	r1, r2, #3, #1
   290de:	7459      	strb	r1, [r3, #17]
    ble_hs_timer_resched();
   290e0:	f005 f848 	bl	2e174 <ble_hs_timer_resched>
}
   290e4:	bd08      	pop	{r3, pc}
   290e6:	bf00      	nop
   290e8:	10004fe0 	.word	0x10004fe0

000290ec <ble_gap_master_extract_state>:
{
   290ec:	b570      	push	{r4, r5, r6, lr}
   290ee:	4604      	mov	r4, r0
   290f0:	460e      	mov	r6, r1
    ble_hs_lock();
   290f2:	f004 ff4d 	bl	2df90 <ble_hs_lock>
    *out_state = ble_gap_master;
   290f6:	4d08      	ldr	r5, [pc, #32]	; (29118 <ble_gap_master_extract_state+0x2c>)
   290f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   290fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   290fc:	682b      	ldr	r3, [r5, #0]
   290fe:	6023      	str	r3, [r4, #0]
    if (reset_state) {
   29100:	b916      	cbnz	r6, 29108 <ble_gap_master_extract_state+0x1c>
    ble_hs_unlock();
   29102:	f004 ff49 	bl	2df98 <ble_hs_unlock>
}
   29106:	bd70      	pop	{r4, r5, r6, pc}
        ble_gap_master_reset_state();
   29108:	f7ff ffde 	bl	290c8 <ble_gap_master_reset_state>
        ble_gap_master.preempted_op = BLE_GAP_OP_NULL;
   2910c:	f1a5 0310 	sub.w	r3, r5, #16
   29110:	2200      	movs	r2, #0
   29112:	741a      	strb	r2, [r3, #16]
   29114:	e7f5      	b.n	29102 <ble_gap_master_extract_state+0x16>
   29116:	bf00      	nop
   29118:	10004fe0 	.word	0x10004fe0

0002911c <ble_gap_master_connect_failure>:
{
   2911c:	b510      	push	{r4, lr}
   2911e:	b092      	sub	sp, #72	; 0x48
   29120:	4604      	mov	r4, r0
    ble_gap_master_extract_state(&state, 1);
   29122:	2101      	movs	r1, #1
   29124:	a80d      	add	r0, sp, #52	; 0x34
   29126:	f7ff ffe1 	bl	290ec <ble_gap_master_extract_state>
    if (ble_gap_has_client(&state)) {
   2912a:	a80d      	add	r0, sp, #52	; 0x34
   2912c:	f7ff fc7c 	bl	28a28 <ble_gap_has_client>
   29130:	b910      	cbnz	r0, 29138 <ble_gap_master_connect_failure+0x1c>
        rc = 0;
   29132:	2000      	movs	r0, #0
}
   29134:	b012      	add	sp, #72	; 0x48
   29136:	bd10      	pop	{r4, pc}
        memset(&event, 0, sizeof event);
   29138:	2234      	movs	r2, #52	; 0x34
   2913a:	2100      	movs	r1, #0
   2913c:	4668      	mov	r0, sp
   2913e:	f7f1 fdac 	bl	1ac9a <memset>
        event.type = BLE_GAP_EVENT_CONNECT;
   29142:	2300      	movs	r3, #0
   29144:	f88d 3000 	strb.w	r3, [sp]
        event.connect.status = status;
   29148:	9401      	str	r4, [sp, #4]
        rc = state.cb(&event, state.cb_arg);
   2914a:	9910      	ldr	r1, [sp, #64]	; 0x40
   2914c:	4668      	mov	r0, sp
   2914e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   29150:	4798      	blx	r3
   29152:	e7ef      	b.n	29134 <ble_gap_master_connect_failure+0x18>

00029154 <ble_gap_disc_complete>:
{
   29154:	b500      	push	{lr}
   29156:	b093      	sub	sp, #76	; 0x4c
    memset(&event, 0, sizeof event);
   29158:	2234      	movs	r2, #52	; 0x34
   2915a:	2100      	movs	r1, #0
   2915c:	4668      	mov	r0, sp
   2915e:	f7f1 fd9c 	bl	1ac9a <memset>
    event.type = BLE_GAP_EVENT_DISC_COMPLETE;
   29162:	2308      	movs	r3, #8
   29164:	f88d 3000 	strb.w	r3, [sp]
    ble_gap_master_extract_state(&state, 1);
   29168:	2101      	movs	r1, #1
   2916a:	a80d      	add	r0, sp, #52	; 0x34
   2916c:	f7ff ffbe 	bl	290ec <ble_gap_master_extract_state>
    if (ble_gap_has_client(&state)) {
   29170:	a80d      	add	r0, sp, #52	; 0x34
   29172:	f7ff fc59 	bl	28a28 <ble_gap_has_client>
   29176:	b928      	cbnz	r0, 29184 <ble_gap_disc_complete+0x30>
    ble_gap_event_listener_call(&event);
   29178:	4668      	mov	r0, sp
   2917a:	f7ff fd2d 	bl	28bd8 <ble_gap_event_listener_call>
}
   2917e:	b013      	add	sp, #76	; 0x4c
   29180:	f85d fb04 	ldr.w	pc, [sp], #4
        ble_gap_call_event_cb(&event, state.cb, state.cb_arg);
   29184:	9a10      	ldr	r2, [sp, #64]	; 0x40
   29186:	990f      	ldr	r1, [sp, #60]	; 0x3c
   29188:	4668      	mov	r0, sp
   2918a:	f7ff fc22 	bl	289d2 <ble_gap_call_event_cb>
   2918e:	e7f3      	b.n	29178 <ble_gap_disc_complete+0x24>

00029190 <ble_gap_disc_report>:
{
   29190:	b530      	push	{r4, r5, lr}
   29192:	b093      	sub	sp, #76	; 0x4c
   29194:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   29196:	2234      	movs	r2, #52	; 0x34
   29198:	2100      	movs	r1, #0
   2919a:	4668      	mov	r0, sp
   2919c:	f7f1 fd7d 	bl	1ac9a <memset>
    event.type = BLE_GAP_EVENT_DISC;
   291a0:	2307      	movs	r3, #7
   291a2:	f88d 3000 	strb.w	r3, [sp]
    event.disc = *((struct ble_gap_disc_desc *)desc);
   291a6:	ad01      	add	r5, sp, #4
   291a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   291aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   291ac:	e894 0003 	ldmia.w	r4, {r0, r1}
   291b0:	e885 0003 	stmia.w	r5, {r0, r1}
    ble_gap_master_extract_state(&state, 0);
   291b4:	2100      	movs	r1, #0
   291b6:	a80d      	add	r0, sp, #52	; 0x34
   291b8:	f7ff ff98 	bl	290ec <ble_gap_master_extract_state>
    if (ble_gap_has_client(&state)) {
   291bc:	a80d      	add	r0, sp, #52	; 0x34
   291be:	f7ff fc33 	bl	28a28 <ble_gap_has_client>
   291c2:	b118      	cbz	r0, 291cc <ble_gap_disc_report+0x3c>
        state.cb(&event, state.cb_arg);
   291c4:	9910      	ldr	r1, [sp, #64]	; 0x40
   291c6:	4668      	mov	r0, sp
   291c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   291ca:	4798      	blx	r3
    ble_gap_event_listener_call(&event);
   291cc:	4668      	mov	r0, sp
   291ce:	f7ff fd03 	bl	28bd8 <ble_gap_event_listener_call>
}
   291d2:	b013      	add	sp, #76	; 0x4c
   291d4:	bd30      	pop	{r4, r5, pc}

000291d6 <ble_gap_master_connect_cancelled>:
{
   291d6:	b510      	push	{r4, lr}
   291d8:	b092      	sub	sp, #72	; 0x48
    ble_gap_master_extract_state(&state, 1);
   291da:	2101      	movs	r1, #1
   291dc:	a80d      	add	r0, sp, #52	; 0x34
   291de:	f7ff ff85 	bl	290ec <ble_gap_master_extract_state>
    if (state.cb != NULL) {
   291e2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   291e4:	b1ac      	cbz	r4, 29212 <ble_gap_master_connect_cancelled+0x3c>
        memset(&event, 0, sizeof event);
   291e6:	2234      	movs	r2, #52	; 0x34
   291e8:	2100      	movs	r1, #0
   291ea:	4668      	mov	r0, sp
   291ec:	f7f1 fd55 	bl	1ac9a <memset>
        event.type = BLE_GAP_EVENT_CONNECT;
   291f0:	2300      	movs	r3, #0
   291f2:	f88d 3000 	strb.w	r3, [sp]
        event.connect.conn_handle = BLE_HS_CONN_HANDLE_NONE;
   291f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   291fa:	f8ad 3008 	strh.w	r3, [sp, #8]
        if (state.conn.cancel) {
   291fe:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
   29202:	f013 0f08 	tst.w	r3, #8
   29206:	d006      	beq.n	29216 <ble_gap_master_connect_cancelled+0x40>
            event.connect.status = BLE_HS_EAPP;
   29208:	2309      	movs	r3, #9
   2920a:	9301      	str	r3, [sp, #4]
        state.cb(&event, state.cb_arg);
   2920c:	9910      	ldr	r1, [sp, #64]	; 0x40
   2920e:	4668      	mov	r0, sp
   29210:	47a0      	blx	r4
}
   29212:	b012      	add	sp, #72	; 0x48
   29214:	bd10      	pop	{r4, pc}
            event.connect.status = BLE_HS_ETIMEOUT;
   29216:	230d      	movs	r3, #13
   29218:	9301      	str	r3, [sp, #4]
   2921a:	e7f7      	b.n	2920c <ble_gap_master_connect_cancelled+0x36>

0002921c <ble_gap_master_failed>:
{
   2921c:	b508      	push	{r3, lr}
    switch (ble_gap_master.op) {
   2921e:	4b0b      	ldr	r3, [pc, #44]	; (2924c <ble_gap_master_failed+0x30>)
   29220:	781b      	ldrb	r3, [r3, #0]
   29222:	2b01      	cmp	r3, #1
   29224:	d008      	beq.n	29238 <ble_gap_master_failed+0x1c>
   29226:	2b02      	cmp	r3, #2
   29228:	d105      	bne.n	29236 <ble_gap_master_failed+0x1a>
        STATS_INC(ble_gap_stats, initiate_fail);
   2922a:	4a09      	ldr	r2, [pc, #36]	; (29250 <ble_gap_master_failed+0x34>)
   2922c:	6c13      	ldr	r3, [r2, #64]	; 0x40
   2922e:	3301      	adds	r3, #1
   29230:	6413      	str	r3, [r2, #64]	; 0x40
        ble_gap_master_connect_failure(status);
   29232:	f7ff ff73 	bl	2911c <ble_gap_master_connect_failure>
}
   29236:	bd08      	pop	{r3, pc}
        STATS_INC(ble_gap_stats, initiate_fail);
   29238:	4a05      	ldr	r2, [pc, #20]	; (29250 <ble_gap_master_failed+0x34>)
   2923a:	6c13      	ldr	r3, [r2, #64]	; 0x40
   2923c:	3301      	adds	r3, #1
   2923e:	6413      	str	r3, [r2, #64]	; 0x40
        ble_gap_disc_complete();
   29240:	f7ff ff88 	bl	29154 <ble_gap_disc_complete>
        ble_gap_master_reset_state();
   29244:	f7ff ff40 	bl	290c8 <ble_gap_master_reset_state>
}
   29248:	e7f5      	b.n	29236 <ble_gap_master_failed+0x1a>
   2924a:	bf00      	nop
   2924c:	10004fe0 	.word	0x10004fe0
   29250:	10004f20 	.word	0x10004f20

00029254 <ble_gap_update_entry_free>:
    if (entry != NULL) {
   29254:	b128      	cbz	r0, 29262 <ble_gap_update_entry_free+0xe>
{
   29256:	b508      	push	{r3, lr}
   29258:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_gap_update_entry_pool, entry);
   2925a:	4802      	ldr	r0, [pc, #8]	; (29264 <ble_gap_update_entry_free+0x10>)
   2925c:	f7f0 fe1e 	bl	19e9c <os_memblock_put>
}
   29260:	bd08      	pop	{r3, pc}
   29262:	4770      	bx	lr
   29264:	10004fc4 	.word	0x10004fc4

00029268 <ble_gap_master_ticks_until_exp>:
    if (ble_gap_master.op == BLE_GAP_OP_NULL || !ble_gap_master.exp_set) {
   29268:	4b0b      	ldr	r3, [pc, #44]	; (29298 <ble_gap_master_ticks_until_exp+0x30>)
   2926a:	781b      	ldrb	r3, [r3, #0]
   2926c:	b173      	cbz	r3, 2928c <ble_gap_master_ticks_until_exp+0x24>
   2926e:	4b0a      	ldr	r3, [pc, #40]	; (29298 <ble_gap_master_ticks_until_exp+0x30>)
   29270:	785b      	ldrb	r3, [r3, #1]
   29272:	f013 0f01 	tst.w	r3, #1
   29276:	d00c      	beq.n	29292 <ble_gap_master_ticks_until_exp+0x2a>
{
   29278:	b510      	push	{r4, lr}
    ticks = ble_gap_master.exp_os_ticks - ble_npl_time_get();
   2927a:	4b07      	ldr	r3, [pc, #28]	; (29298 <ble_gap_master_ticks_until_exp+0x30>)
   2927c:	685c      	ldr	r4, [r3, #4]
   2927e:	f7f1 f9e3 	bl	1a648 <os_time_get>
   29282:	1a20      	subs	r0, r4, r0
    if (ticks > 0) {
   29284:	2800      	cmp	r0, #0
   29286:	dc00      	bgt.n	2928a <ble_gap_master_ticks_until_exp+0x22>
    return 0;
   29288:	2000      	movs	r0, #0
}
   2928a:	bd10      	pop	{r4, pc}
        return BLE_HS_FOREVER;
   2928c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   29290:	4770      	bx	lr
   29292:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   29296:	4770      	bx	lr
   29298:	10004fe0 	.word	0x10004fe0

0002929c <ble_gap_master_timer>:
{
   2929c:	b508      	push	{r3, lr}
    ticks_until_exp = ble_gap_master_ticks_until_exp();
   2929e:	f7ff ffe3 	bl	29268 <ble_gap_master_ticks_until_exp>
    if (ticks_until_exp != 0) {
   292a2:	b9f0      	cbnz	r0, 292e2 <ble_gap_master_timer+0x46>
    switch (ble_gap_master.op) {
   292a4:	4b10      	ldr	r3, [pc, #64]	; (292e8 <ble_gap_master_timer+0x4c>)
   292a6:	781b      	ldrb	r3, [r3, #0]
   292a8:	2b01      	cmp	r3, #1
   292aa:	d00c      	beq.n	292c6 <ble_gap_master_timer+0x2a>
   292ac:	2b02      	cmp	r3, #2
   292ae:	d116      	bne.n	292de <ble_gap_master_timer+0x42>
        rc = ble_gap_conn_cancel_tx();
   292b0:	f7ff fd48 	bl	28d44 <ble_gap_conn_cancel_tx>
        if (rc != 0) {
   292b4:	b9b0      	cbnz	r0, 292e4 <ble_gap_master_timer+0x48>
            ble_gap_master.exp_set = 0;
   292b6:	4b0c      	ldr	r3, [pc, #48]	; (292e8 <ble_gap_master_timer+0x4c>)
   292b8:	785a      	ldrb	r2, [r3, #1]
   292ba:	f36f 0200 	bfc	r2, #0, #1
   292be:	705a      	strb	r2, [r3, #1]
    return BLE_HS_FOREVER;
   292c0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
        break;
   292c4:	e00d      	b.n	292e2 <ble_gap_master_timer+0x46>
        rc = ble_gap_disc_enable_tx(0, 0);
   292c6:	2100      	movs	r1, #0
   292c8:	4608      	mov	r0, r1
   292ca:	f7ff fd48 	bl	28d5e <ble_gap_disc_enable_tx>
        if (rc != 0) {
   292ce:	b108      	cbz	r0, 292d4 <ble_gap_master_timer+0x38>
            return ble_npl_time_ms_to_ticks32(BLE_GAP_CANCEL_RETRY_TIMEOUT_MS);
   292d0:	200c      	movs	r0, #12
   292d2:	e006      	b.n	292e2 <ble_gap_master_timer+0x46>
        ble_gap_disc_complete();
   292d4:	f7ff ff3e 	bl	29154 <ble_gap_disc_complete>
    return BLE_HS_FOREVER;
   292d8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
        break;
   292dc:	e001      	b.n	292e2 <ble_gap_master_timer+0x46>
    switch (ble_gap_master.op) {
   292de:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   292e2:	bd08      	pop	{r3, pc}
            return ble_npl_time_ms_to_ticks32(BLE_GAP_CANCEL_RETRY_TIMEOUT_MS);
   292e4:	200c      	movs	r0, #12
   292e6:	e7fc      	b.n	292e2 <ble_gap_master_timer+0x46>
   292e8:	10004fe0 	.word	0x10004fe0

000292ec <ble_gap_update_next_exp>:
{
   292ec:	b538      	push	{r3, r4, r5, lr}
   292ee:	4605      	mov	r5, r0
   292f0:	f7f1 f9aa 	bl	1a648 <os_time_get>
   292f4:	4604      	mov	r4, r0
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   292f6:	4b0b      	ldr	r3, [pc, #44]	; (29324 <ble_gap_update_next_exp+0x38>)
   292f8:	681a      	ldr	r2, [r3, #0]
    best_ticks = BLE_HS_FOREVER;
   292fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    conn_handle = BLE_HS_CONN_HANDLE_NONE;
   292fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   29302:	e002      	b.n	2930a <ble_gap_update_next_exp+0x1e>
            ticks = 0;
   29304:	2300      	movs	r3, #0
   29306:	e005      	b.n	29314 <ble_gap_update_next_exp+0x28>
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   29308:	6812      	ldr	r2, [r2, #0]
   2930a:	b142      	cbz	r2, 2931e <ble_gap_update_next_exp+0x32>
        ticks = entry->exp_os_ticks - now;
   2930c:	6913      	ldr	r3, [r2, #16]
   2930e:	1b1b      	subs	r3, r3, r4
        if (ticks <= 0) {
   29310:	2b00      	cmp	r3, #0
   29312:	ddf7      	ble.n	29304 <ble_gap_update_next_exp+0x18>
        if (ticks < best_ticks) {
   29314:	4299      	cmp	r1, r3
   29316:	ddf7      	ble.n	29308 <ble_gap_update_next_exp+0x1c>
            conn_handle = entry->conn_handle;
   29318:	8a90      	ldrh	r0, [r2, #20]
            best_ticks = ticks;
   2931a:	4619      	mov	r1, r3
   2931c:	e7f4      	b.n	29308 <ble_gap_update_next_exp+0x1c>
    if (out_ticks_from_now != NULL) {
   2931e:	b105      	cbz	r5, 29322 <ble_gap_update_next_exp+0x36>
        *out_ticks_from_now = best_ticks;
   29320:	6029      	str	r1, [r5, #0]
}
   29322:	bd38      	pop	{r3, r4, r5, pc}
   29324:	10004fa8 	.word	0x10004fa8

00029328 <ble_gap_update_timer>:
{
   29328:	b510      	push	{r4, lr}
   2932a:	b082      	sub	sp, #8
   2932c:	e007      	b.n	2933e <ble_gap_update_timer+0x16>
        ble_hs_unlock();
   2932e:	f004 fe33 	bl	2df98 <ble_hs_unlock>
            entry = NULL;
   29332:	2400      	movs	r4, #0
   29334:	e002      	b.n	2933c <ble_gap_update_timer+0x14>
            ble_gap_update_entry_free(entry);
   29336:	4620      	mov	r0, r4
   29338:	f7ff ff8c 	bl	29254 <ble_gap_update_entry_free>
    } while (entry != NULL);
   2933c:	b17c      	cbz	r4, 2935e <ble_gap_update_timer+0x36>
        ble_hs_lock();
   2933e:	f004 fe27 	bl	2df90 <ble_hs_lock>
        conn_handle = ble_gap_update_next_exp(&ticks_until_exp);
   29342:	a801      	add	r0, sp, #4
   29344:	f7ff ffd2 	bl	292ec <ble_gap_update_next_exp>
        if (ticks_until_exp == 0) {
   29348:	9b01      	ldr	r3, [sp, #4]
   2934a:	2b00      	cmp	r3, #0
   2934c:	d1ef      	bne.n	2932e <ble_gap_update_timer+0x6>
            entry = ble_gap_update_entry_remove(conn_handle);
   2934e:	f7ff fe61 	bl	29014 <ble_gap_update_entry_remove>
   29352:	4604      	mov	r4, r0
        ble_hs_unlock();
   29354:	f004 fe20 	bl	2df98 <ble_hs_unlock>
        if (entry != NULL) {
   29358:	2c00      	cmp	r4, #0
   2935a:	d1ec      	bne.n	29336 <ble_gap_update_timer+0xe>
   2935c:	e7ee      	b.n	2933c <ble_gap_update_timer+0x14>
}
   2935e:	9801      	ldr	r0, [sp, #4]
   29360:	b002      	add	sp, #8
   29362:	bd10      	pop	{r4, pc}

00029364 <ble_gap_slave_ticks_until_exp>:
    if (ble_gap_slave[0].op == BLE_GAP_OP_NULL || !ble_gap_slave[0].exp_set) {
   29364:	4b0b      	ldr	r3, [pc, #44]	; (29394 <ble_gap_slave_ticks_until_exp+0x30>)
   29366:	7d1b      	ldrb	r3, [r3, #20]
   29368:	b173      	cbz	r3, 29388 <ble_gap_slave_ticks_until_exp+0x24>
   2936a:	4b0a      	ldr	r3, [pc, #40]	; (29394 <ble_gap_slave_ticks_until_exp+0x30>)
   2936c:	7d5b      	ldrb	r3, [r3, #21]
   2936e:	f013 0f10 	tst.w	r3, #16
   29372:	d00c      	beq.n	2938e <ble_gap_slave_ticks_until_exp+0x2a>
{
   29374:	b510      	push	{r4, lr}
    ticks = ble_gap_slave[0].exp_os_ticks - ble_npl_time_get();
   29376:	4b07      	ldr	r3, [pc, #28]	; (29394 <ble_gap_slave_ticks_until_exp+0x30>)
   29378:	699c      	ldr	r4, [r3, #24]
   2937a:	f7f1 f965 	bl	1a648 <os_time_get>
   2937e:	1a20      	subs	r0, r4, r0
    if (ticks > 0) {
   29380:	2800      	cmp	r0, #0
   29382:	dc00      	bgt.n	29386 <ble_gap_slave_ticks_until_exp+0x22>
    return 0;
   29384:	2000      	movs	r0, #0
}
   29386:	bd10      	pop	{r4, pc}
        return BLE_HS_FOREVER;
   29388:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2938c:	4770      	bx	lr
   2938e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   29392:	4770      	bx	lr
   29394:	10004fe0 	.word	0x10004fe0

00029398 <ble_gap_slave_timer>:
{
   29398:	b508      	push	{r3, lr}
    ticks_until_exp = ble_gap_slave_ticks_until_exp();
   2939a:	f7ff ffe3 	bl	29364 <ble_gap_slave_ticks_until_exp>
    if (ticks_until_exp != 0) {
   2939e:	b100      	cbz	r0, 293a2 <ble_gap_slave_timer+0xa>
}
   293a0:	bd08      	pop	{r3, pc}
    rc = ble_gap_adv_enable_tx(0);
   293a2:	2000      	movs	r0, #0
   293a4:	f7ff fcf8 	bl	28d98 <ble_gap_adv_enable_tx>
    if (rc != 0) {
   293a8:	b108      	cbz	r0, 293ae <ble_gap_slave_timer+0x16>
        return 100;
   293aa:	2064      	movs	r0, #100	; 0x64
   293ac:	e7f8      	b.n	293a0 <ble_gap_slave_timer+0x8>
    ble_gap_slave_reset_state(0);
   293ae:	f7ff fe49 	bl	29044 <ble_gap_slave_reset_state>
    ble_gap_adv_finished(0, BLE_HS_ETIMEOUT, 0, 0);
   293b2:	2300      	movs	r3, #0
   293b4:	461a      	mov	r2, r3
   293b6:	210d      	movs	r1, #13
   293b8:	4618      	mov	r0, r3
   293ba:	f7ff fe69 	bl	29090 <ble_gap_adv_finished>
    return BLE_HS_FOREVER;
   293be:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   293c2:	e7ed      	b.n	293a0 <ble_gap_slave_timer+0x8>

000293c4 <ble_gap_slave_set_timer>:
{
   293c4:	b510      	push	{r4, lr}
   293c6:	4604      	mov	r4, r0
   293c8:	f7f1 f93e 	bl	1a648 <os_time_get>
    ble_gap_slave[0].exp_os_ticks = ble_npl_time_get() + ticks_from_now;
   293cc:	4404      	add	r4, r0
   293ce:	4b04      	ldr	r3, [pc, #16]	; (293e0 <ble_gap_slave_set_timer+0x1c>)
   293d0:	619c      	str	r4, [r3, #24]
    ble_gap_slave[0].exp_set = 1;
   293d2:	7d5a      	ldrb	r2, [r3, #21]
   293d4:	f042 0210 	orr.w	r2, r2, #16
   293d8:	755a      	strb	r2, [r3, #21]
    ble_hs_timer_resched();
   293da:	f004 fecb 	bl	2e174 <ble_hs_timer_resched>
}
   293de:	bd10      	pop	{r4, pc}
   293e0:	10004fe0 	.word	0x10004fe0

000293e4 <ble_gap_master_set_timer>:
{
   293e4:	b510      	push	{r4, lr}
   293e6:	4604      	mov	r4, r0
   293e8:	f7f1 f92e 	bl	1a648 <os_time_get>
    ble_gap_master.exp_os_ticks = ble_npl_time_get() + ticks_from_now;
   293ec:	4404      	add	r4, r0
   293ee:	4b04      	ldr	r3, [pc, #16]	; (29400 <ble_gap_master_set_timer+0x1c>)
   293f0:	605c      	str	r4, [r3, #4]
    ble_gap_master.exp_set = 1;
   293f2:	785a      	ldrb	r2, [r3, #1]
   293f4:	f042 0201 	orr.w	r2, r2, #1
   293f8:	705a      	strb	r2, [r3, #1]
    ble_hs_timer_resched();
   293fa:	f004 febb 	bl	2e174 <ble_hs_timer_resched>
}
   293fe:	bd10      	pop	{r4, pc}
   29400:	10004fe0 	.word	0x10004fe0

00029404 <ble_gap_rx_adv_report_sanity_check>:
    STATS_INC(ble_gap_stats, rx_adv_report);
   29404:	4a14      	ldr	r2, [pc, #80]	; (29458 <ble_gap_rx_adv_report_sanity_check+0x54>)
   29406:	6f13      	ldr	r3, [r2, #112]	; 0x70
   29408:	3301      	adds	r3, #1
   2940a:	6713      	str	r3, [r2, #112]	; 0x70
    if (ble_gap_master.op != BLE_GAP_OP_M_DISC) {
   2940c:	4b13      	ldr	r3, [pc, #76]	; (2945c <ble_gap_rx_adv_report_sanity_check+0x58>)
   2940e:	781b      	ldrb	r3, [r3, #0]
   29410:	2b01      	cmp	r3, #1
   29412:	d11a      	bne.n	2944a <ble_gap_rx_adv_report_sanity_check+0x46>
    if (ble_gap_master.disc.limited) {
   29414:	4b11      	ldr	r3, [pc, #68]	; (2945c <ble_gap_rx_adv_report_sanity_check+0x58>)
   29416:	7c5b      	ldrb	r3, [r3, #17]
   29418:	f013 0f01 	tst.w	r3, #1
   2941c:	d101      	bne.n	29422 <ble_gap_rx_adv_report_sanity_check+0x1e>
    return 0;
   2941e:	2000      	movs	r0, #0
}
   29420:	4770      	bx	lr
{
   29422:	b500      	push	{lr}
   29424:	b083      	sub	sp, #12
        rc = ble_hs_adv_find_field(BLE_HS_ADV_TYPE_FLAGS, adv_data,
   29426:	ab01      	add	r3, sp, #4
   29428:	460a      	mov	r2, r1
   2942a:	4601      	mov	r1, r0
   2942c:	2001      	movs	r0, #1
   2942e:	f005 fd05 	bl	2ee3c <ble_hs_adv_find_field>
        if ((rc == 0) && (flags->length == 2) &&
   29432:	b968      	cbnz	r0, 29450 <ble_gap_rx_adv_report_sanity_check+0x4c>
   29434:	9b01      	ldr	r3, [sp, #4]
   29436:	781a      	ldrb	r2, [r3, #0]
   29438:	2a02      	cmp	r2, #2
   2943a:	d10a      	bne.n	29452 <ble_gap_rx_adv_report_sanity_check+0x4e>
            !(flags->value[0] & BLE_HS_ADV_F_DISC_LTD)) {
   2943c:	789b      	ldrb	r3, [r3, #2]
        if ((rc == 0) && (flags->length == 2) &&
   2943e:	f013 0f01 	tst.w	r3, #1
   29442:	d106      	bne.n	29452 <ble_gap_rx_adv_report_sanity_check+0x4e>
            return -1;
   29444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29448:	e003      	b.n	29452 <ble_gap_rx_adv_report_sanity_check+0x4e>
        return -1;
   2944a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2944e:	4770      	bx	lr
    return 0;
   29450:	2000      	movs	r0, #0
}
   29452:	b003      	add	sp, #12
   29454:	f85d fb04 	ldr.w	pc, [sp], #4
   29458:	10004f20 	.word	0x10004f20
   2945c:	10004fe0 	.word	0x10004fe0

00029460 <ble_gap_log_wl>:
{
   29460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29464:	b086      	sub	sp, #24
   29466:	4604      	mov	r4, r0
   29468:	4688      	mov	r8, r1
    BLE_HS_LOG(INFO, "count=%d ", white_list_count);
   2946a:	460b      	mov	r3, r1
   2946c:	4a15      	ldr	r2, [pc, #84]	; (294c4 <ble_gap_log_wl+0x64>)
   2946e:	2101      	movs	r1, #1
   29470:	2004      	movs	r0, #4
   29472:	f7f3 fc5b 	bl	1cd2c <modlog_printf>
    for (i = 0; i < white_list_count; i++, addr++) {
   29476:	2500      	movs	r5, #0
   29478:	45a8      	cmp	r8, r5
   2947a:	dd1f      	ble.n	294bc <ble_gap_log_wl+0x5c>
        BLE_HS_LOG(INFO, "entry-%d={addr_type=%d addr=", i, addr->type);
   2947c:	7823      	ldrb	r3, [r4, #0]
   2947e:	9300      	str	r3, [sp, #0]
   29480:	462b      	mov	r3, r5
   29482:	4a11      	ldr	r2, [pc, #68]	; (294c8 <ble_gap_log_wl+0x68>)
   29484:	2101      	movs	r1, #1
   29486:	2004      	movs	r0, #4
   29488:	f7f3 fc50 	bl	1cd2c <modlog_printf>
        BLE_HS_LOG_ADDR(INFO, addr->val);
   2948c:	7963      	ldrb	r3, [r4, #5]
   2948e:	7922      	ldrb	r2, [r4, #4]
   29490:	78e0      	ldrb	r0, [r4, #3]
   29492:	78a6      	ldrb	r6, [r4, #2]
   29494:	7867      	ldrb	r7, [r4, #1]
   29496:	9704      	str	r7, [sp, #16]
   29498:	9603      	str	r6, [sp, #12]
   2949a:	9002      	str	r0, [sp, #8]
   2949c:	9201      	str	r2, [sp, #4]
   2949e:	9300      	str	r3, [sp, #0]
   294a0:	79a3      	ldrb	r3, [r4, #6]
   294a2:	4a0a      	ldr	r2, [pc, #40]	; (294cc <ble_gap_log_wl+0x6c>)
   294a4:	2101      	movs	r1, #1
   294a6:	2004      	movs	r0, #4
   294a8:	f7f3 fc40 	bl	1cd2c <modlog_printf>
        BLE_HS_LOG(INFO, "} ");
   294ac:	4a08      	ldr	r2, [pc, #32]	; (294d0 <ble_gap_log_wl+0x70>)
   294ae:	2101      	movs	r1, #1
   294b0:	2004      	movs	r0, #4
   294b2:	f7f3 fc3b 	bl	1cd2c <modlog_printf>
    for (i = 0; i < white_list_count; i++, addr++) {
   294b6:	3501      	adds	r5, #1
   294b8:	3407      	adds	r4, #7
   294ba:	e7dd      	b.n	29478 <ble_gap_log_wl+0x18>
}
   294bc:	b006      	add	sp, #24
   294be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   294c2:	bf00      	nop
   294c4:	00038d74 	.word	0x00038d74
   294c8:	00038d80 	.word	0x00038d80
   294cc:	00034c20 	.word	0x00034c20
   294d0:	00038da0 	.word	0x00038da0

000294d4 <ble_gap_log_adv>:
{
   294d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   294d6:	b087      	sub	sp, #28
   294d8:	4606      	mov	r6, r0
   294da:	460d      	mov	r5, r1
   294dc:	4614      	mov	r4, r2
    BLE_HS_LOG(INFO, "disc_mode=%d", adv_params->disc_mode);
   294de:	7853      	ldrb	r3, [r2, #1]
   294e0:	4a15      	ldr	r2, [pc, #84]	; (29538 <ble_gap_log_adv+0x64>)
   294e2:	2101      	movs	r1, #1
   294e4:	2004      	movs	r0, #4
   294e6:	f7f3 fc21 	bl	1cd2c <modlog_printf>
    if (direct_addr) {
   294ea:	b1ad      	cbz	r5, 29518 <ble_gap_log_adv+0x44>
        BLE_HS_LOG(INFO, " direct_addr_type=%d direct_addr=",
   294ec:	782b      	ldrb	r3, [r5, #0]
   294ee:	4a13      	ldr	r2, [pc, #76]	; (2953c <ble_gap_log_adv+0x68>)
   294f0:	2101      	movs	r1, #1
   294f2:	2004      	movs	r0, #4
   294f4:	f7f3 fc1a 	bl	1cd2c <modlog_printf>
        BLE_HS_LOG_ADDR(INFO, direct_addr->val);
   294f8:	796b      	ldrb	r3, [r5, #5]
   294fa:	792a      	ldrb	r2, [r5, #4]
   294fc:	78e9      	ldrb	r1, [r5, #3]
   294fe:	78a8      	ldrb	r0, [r5, #2]
   29500:	786f      	ldrb	r7, [r5, #1]
   29502:	9704      	str	r7, [sp, #16]
   29504:	9003      	str	r0, [sp, #12]
   29506:	9102      	str	r1, [sp, #8]
   29508:	9201      	str	r2, [sp, #4]
   2950a:	9300      	str	r3, [sp, #0]
   2950c:	79ab      	ldrb	r3, [r5, #6]
   2950e:	4a0c      	ldr	r2, [pc, #48]	; (29540 <ble_gap_log_adv+0x6c>)
   29510:	2101      	movs	r1, #1
   29512:	2004      	movs	r0, #4
   29514:	f7f3 fc0a 	bl	1cd2c <modlog_printf>
    BLE_HS_LOG(INFO, " adv_channel_map=%d own_addr_type=%d "
   29518:	79e3      	ldrb	r3, [r4, #7]
   2951a:	8862      	ldrh	r2, [r4, #2]
   2951c:	88a1      	ldrh	r1, [r4, #4]
   2951e:	9103      	str	r1, [sp, #12]
   29520:	9202      	str	r2, [sp, #8]
   29522:	9301      	str	r3, [sp, #4]
   29524:	9600      	str	r6, [sp, #0]
   29526:	79a3      	ldrb	r3, [r4, #6]
   29528:	4a06      	ldr	r2, [pc, #24]	; (29544 <ble_gap_log_adv+0x70>)
   2952a:	2101      	movs	r1, #1
   2952c:	2004      	movs	r0, #4
   2952e:	f7f3 fbfd 	bl	1cd2c <modlog_printf>
}
   29532:	b007      	add	sp, #28
   29534:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29536:	bf00      	nop
   29538:	00038da4 	.word	0x00038da4
   2953c:	00038db4 	.word	0x00038db4
   29540:	00034c20 	.word	0x00034c20
   29544:	00038dd8 	.word	0x00038dd8

00029548 <ble_gap_log_duration>:
{
   29548:	b508      	push	{r3, lr}
    if (duration_ms == BLE_HS_FOREVER) {
   2954a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   2954e:	4290      	cmp	r0, r2
   29550:	d006      	beq.n	29560 <ble_gap_log_duration+0x18>
   29552:	4603      	mov	r3, r0
        BLE_HS_LOG(INFO, "duration=%dms", duration_ms);
   29554:	4a05      	ldr	r2, [pc, #20]	; (2956c <ble_gap_log_duration+0x24>)
   29556:	2101      	movs	r1, #1
   29558:	2004      	movs	r0, #4
   2955a:	f7f3 fbe7 	bl	1cd2c <modlog_printf>
}
   2955e:	bd08      	pop	{r3, pc}
        BLE_HS_LOG(INFO, "duration=forever");
   29560:	4a03      	ldr	r2, [pc, #12]	; (29570 <ble_gap_log_duration+0x28>)
   29562:	2101      	movs	r1, #1
   29564:	2004      	movs	r0, #4
   29566:	f7f3 fbe1 	bl	1cd2c <modlog_printf>
   2956a:	e7f8      	b.n	2955e <ble_gap_log_duration+0x16>
   2956c:	00038e48 	.word	0x00038e48
   29570:	00038e34 	.word	0x00038e34

00029574 <ble_gap_log_disc>:
{
   29574:	b530      	push	{r4, r5, lr}
   29576:	b085      	sub	sp, #20
   29578:	4603      	mov	r3, r0
   2957a:	460c      	mov	r4, r1
    BLE_HS_LOG(INFO, "own_addr_type=%d filter_policy=%d passive=%d limited=%d "
   2957c:	7911      	ldrb	r1, [r2, #4]
   2957e:	7952      	ldrb	r2, [r2, #5]
   29580:	f3c2 0040 	ubfx	r0, r2, #1, #1
   29584:	f002 0501 	and.w	r5, r2, #1
   29588:	f3c2 0280 	ubfx	r2, r2, #2, #1
   2958c:	9203      	str	r2, [sp, #12]
   2958e:	9502      	str	r5, [sp, #8]
   29590:	9001      	str	r0, [sp, #4]
   29592:	9100      	str	r1, [sp, #0]
   29594:	4a04      	ldr	r2, [pc, #16]	; (295a8 <ble_gap_log_disc+0x34>)
   29596:	2101      	movs	r1, #1
   29598:	2004      	movs	r0, #4
   2959a:	f7f3 fbc7 	bl	1cd2c <modlog_printf>
    ble_gap_log_duration(duration_ms);
   2959e:	4620      	mov	r0, r4
   295a0:	f7ff ffd2 	bl	29548 <ble_gap_log_duration>
}
   295a4:	b005      	add	sp, #20
   295a6:	bd30      	pop	{r4, r5, pc}
   295a8:	00038e58 	.word	0x00038e58

000295ac <ble_gap_log_conn>:
{
   295ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   295ae:	b089      	sub	sp, #36	; 0x24
   295b0:	4606      	mov	r6, r0
   295b2:	4614      	mov	r4, r2
    if (peer_addr != NULL) {
   295b4:	b1b1      	cbz	r1, 295e4 <ble_gap_log_conn+0x38>
   295b6:	460d      	mov	r5, r1
        BLE_HS_LOG(INFO, "peer_addr_type=%d peer_addr=", peer_addr->type);
   295b8:	780b      	ldrb	r3, [r1, #0]
   295ba:	4a17      	ldr	r2, [pc, #92]	; (29618 <ble_gap_log_conn+0x6c>)
   295bc:	2101      	movs	r1, #1
   295be:	2004      	movs	r0, #4
   295c0:	f7f3 fbb4 	bl	1cd2c <modlog_printf>
        BLE_HS_LOG_ADDR(INFO, peer_addr->val);
   295c4:	796b      	ldrb	r3, [r5, #5]
   295c6:	792a      	ldrb	r2, [r5, #4]
   295c8:	78e9      	ldrb	r1, [r5, #3]
   295ca:	78a8      	ldrb	r0, [r5, #2]
   295cc:	786f      	ldrb	r7, [r5, #1]
   295ce:	9704      	str	r7, [sp, #16]
   295d0:	9003      	str	r0, [sp, #12]
   295d2:	9102      	str	r1, [sp, #8]
   295d4:	9201      	str	r2, [sp, #4]
   295d6:	9300      	str	r3, [sp, #0]
   295d8:	79ab      	ldrb	r3, [r5, #6]
   295da:	4a10      	ldr	r2, [pc, #64]	; (2961c <ble_gap_log_conn+0x70>)
   295dc:	2101      	movs	r1, #1
   295de:	2004      	movs	r0, #4
   295e0:	f7f3 fba4 	bl	1cd2c <modlog_printf>
    BLE_HS_LOG(INFO, " scan_itvl=%d scan_window=%d itvl_min=%d itvl_max=%d "
   295e4:	8863      	ldrh	r3, [r4, #2]
   295e6:	88a2      	ldrh	r2, [r4, #4]
   295e8:	88e1      	ldrh	r1, [r4, #6]
   295ea:	8920      	ldrh	r0, [r4, #8]
   295ec:	8965      	ldrh	r5, [r4, #10]
   295ee:	89a7      	ldrh	r7, [r4, #12]
   295f0:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
   295f4:	9607      	str	r6, [sp, #28]
   295f6:	f8cd c018 	str.w	ip, [sp, #24]
   295fa:	9705      	str	r7, [sp, #20]
   295fc:	9504      	str	r5, [sp, #16]
   295fe:	9003      	str	r0, [sp, #12]
   29600:	9102      	str	r1, [sp, #8]
   29602:	9201      	str	r2, [sp, #4]
   29604:	9300      	str	r3, [sp, #0]
   29606:	8823      	ldrh	r3, [r4, #0]
   29608:	4a05      	ldr	r2, [pc, #20]	; (29620 <ble_gap_log_conn+0x74>)
   2960a:	2101      	movs	r1, #1
   2960c:	2004      	movs	r0, #4
   2960e:	f7f3 fb8d 	bl	1cd2c <modlog_printf>
}
   29612:	b009      	add	sp, #36	; 0x24
   29614:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29616:	bf00      	nop
   29618:	00038ea8 	.word	0x00038ea8
   2961c:	00034c20 	.word	0x00034c20
   29620:	00038ec8 	.word	0x00038ec8

00029624 <ble_gap_log_update>:
{
   29624:	b570      	push	{r4, r5, r6, lr}
   29626:	b086      	sub	sp, #24
   29628:	4603      	mov	r3, r0
    BLE_HS_LOG(INFO, "connection parameter update; "
   2962a:	880a      	ldrh	r2, [r1, #0]
   2962c:	8848      	ldrh	r0, [r1, #2]
   2962e:	888c      	ldrh	r4, [r1, #4]
   29630:	88cd      	ldrh	r5, [r1, #6]
   29632:	890e      	ldrh	r6, [r1, #8]
   29634:	8949      	ldrh	r1, [r1, #10]
   29636:	9105      	str	r1, [sp, #20]
   29638:	9604      	str	r6, [sp, #16]
   2963a:	9503      	str	r5, [sp, #12]
   2963c:	9402      	str	r4, [sp, #8]
   2963e:	9001      	str	r0, [sp, #4]
   29640:	9200      	str	r2, [sp, #0]
   29642:	4a03      	ldr	r2, [pc, #12]	; (29650 <ble_gap_log_update+0x2c>)
   29644:	2101      	movs	r1, #1
   29646:	2004      	movs	r0, #4
   29648:	f7f3 fb70 	bl	1cd2c <modlog_printf>
}
   2964c:	b006      	add	sp, #24
   2964e:	bd70      	pop	{r4, r5, r6, pc}
   29650:	00038f4c 	.word	0x00038f4c

00029654 <ble_gap_adv_validate>:
    if (adv_params == NULL) {
   29654:	b34a      	cbz	r2, 296aa <ble_gap_adv_validate+0x56>
{
   29656:	b508      	push	{r3, lr}
   29658:	4613      	mov	r3, r2
    if (own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) {
   2965a:	2803      	cmp	r0, #3
   2965c:	d827      	bhi.n	296ae <ble_gap_adv_validate+0x5a>
    if (adv_params->disc_mode >= BLE_GAP_DISC_MODE_MAX) {
   2965e:	7852      	ldrb	r2, [r2, #1]
   29660:	2a02      	cmp	r2, #2
   29662:	d826      	bhi.n	296b2 <ble_gap_adv_validate+0x5e>
    if (ble_gap_slave[0].op != BLE_GAP_OP_NULL) {
   29664:	4a1b      	ldr	r2, [pc, #108]	; (296d4 <ble_gap_adv_validate+0x80>)
   29666:	7d12      	ldrb	r2, [r2, #20]
   29668:	bb2a      	cbnz	r2, 296b6 <ble_gap_adv_validate+0x62>
    switch (adv_params->conn_mode) {
   2966a:	781a      	ldrb	r2, [r3, #0]
   2966c:	2a01      	cmp	r2, #1
   2966e:	d013      	beq.n	29698 <ble_gap_adv_validate+0x44>
   29670:	2a02      	cmp	r2, #2
   29672:	d008      	beq.n	29686 <ble_gap_adv_validate+0x32>
   29674:	b10a      	cbz	r2, 2967a <ble_gap_adv_validate+0x26>
   29676:	2003      	movs	r0, #3
}
   29678:	bd08      	pop	{r3, pc}
        if (adv_params->high_duty_cycle) {
   2967a:	7a1b      	ldrb	r3, [r3, #8]
   2967c:	f013 0f01 	tst.w	r3, #1
   29680:	d11b      	bne.n	296ba <ble_gap_adv_validate+0x66>
    return 0;
   29682:	2000      	movs	r0, #0
   29684:	e7f8      	b.n	29678 <ble_gap_adv_validate+0x24>
        if (adv_params->high_duty_cycle) {
   29686:	7a1b      	ldrb	r3, [r3, #8]
   29688:	f013 0f01 	tst.w	r3, #1
   2968c:	d117      	bne.n	296be <ble_gap_adv_validate+0x6a>
        if (!ble_hs_conn_can_alloc()) {
   2968e:	f005 fc27 	bl	2eee0 <ble_hs_conn_can_alloc>
   29692:	b1b0      	cbz	r0, 296c2 <ble_gap_adv_validate+0x6e>
    return 0;
   29694:	2000      	movs	r0, #0
   29696:	e7ef      	b.n	29678 <ble_gap_adv_validate+0x24>
        if (peer_addr == NULL) {
   29698:	b1a9      	cbz	r1, 296c6 <ble_gap_adv_validate+0x72>
        if (peer_addr->type != BLE_ADDR_PUBLIC &&
   2969a:	780b      	ldrb	r3, [r1, #0]
   2969c:	2b03      	cmp	r3, #3
   2969e:	d814      	bhi.n	296ca <ble_gap_adv_validate+0x76>
        if (!ble_hs_conn_can_alloc()) {
   296a0:	f005 fc1e 	bl	2eee0 <ble_hs_conn_can_alloc>
   296a4:	b198      	cbz	r0, 296ce <ble_gap_adv_validate+0x7a>
    return 0;
   296a6:	2000      	movs	r0, #0
   296a8:	e7e6      	b.n	29678 <ble_gap_adv_validate+0x24>
        return BLE_HS_EINVAL;
   296aa:	2003      	movs	r0, #3
}
   296ac:	4770      	bx	lr
        return BLE_HS_EINVAL;
   296ae:	2003      	movs	r0, #3
   296b0:	e7e2      	b.n	29678 <ble_gap_adv_validate+0x24>
        return BLE_HS_EINVAL;
   296b2:	2003      	movs	r0, #3
   296b4:	e7e0      	b.n	29678 <ble_gap_adv_validate+0x24>
        return BLE_HS_EALREADY;
   296b6:	2002      	movs	r0, #2
   296b8:	e7de      	b.n	29678 <ble_gap_adv_validate+0x24>
            return BLE_HS_EINVAL;
   296ba:	2003      	movs	r0, #3
   296bc:	e7dc      	b.n	29678 <ble_gap_adv_validate+0x24>
            return BLE_HS_EINVAL;
   296be:	2003      	movs	r0, #3
   296c0:	e7da      	b.n	29678 <ble_gap_adv_validate+0x24>
            return BLE_HS_ENOMEM;
   296c2:	2006      	movs	r0, #6
   296c4:	e7d8      	b.n	29678 <ble_gap_adv_validate+0x24>
            return BLE_HS_EINVAL;
   296c6:	2003      	movs	r0, #3
   296c8:	e7d6      	b.n	29678 <ble_gap_adv_validate+0x24>
            return BLE_HS_EINVAL;
   296ca:	2003      	movs	r0, #3
   296cc:	e7d4      	b.n	29678 <ble_gap_adv_validate+0x24>
            return BLE_HS_ENOMEM;
   296ce:	2006      	movs	r0, #6
   296d0:	e7d2      	b.n	29678 <ble_gap_adv_validate+0x24>
   296d2:	bf00      	nop
   296d4:	10004fe0 	.word	0x10004fe0

000296d8 <ble_gap_update_entry_alloc>:
{
   296d8:	b508      	push	{r3, lr}
    entry = os_memblock_get(&ble_gap_update_entry_pool);
   296da:	4807      	ldr	r0, [pc, #28]	; (296f8 <ble_gap_update_entry_alloc+0x20>)
   296dc:	f7f0 fbb6 	bl	19e4c <os_memblock_get>
    if (entry != NULL) {
   296e0:	4603      	mov	r3, r0
   296e2:	b130      	cbz	r0, 296f2 <ble_gap_update_entry_alloc+0x1a>
        memset(entry, 0, sizeof *entry);
   296e4:	2200      	movs	r2, #0
   296e6:	6002      	str	r2, [r0, #0]
   296e8:	6042      	str	r2, [r0, #4]
   296ea:	6082      	str	r2, [r0, #8]
   296ec:	60c2      	str	r2, [r0, #12]
   296ee:	6102      	str	r2, [r0, #16]
   296f0:	6142      	str	r2, [r0, #20]
}
   296f2:	4618      	mov	r0, r3
   296f4:	bd08      	pop	{r3, pc}
   296f6:	bf00      	nop
   296f8:	10004fc4 	.word	0x10004fc4

000296fc <ble_gap_conn_find>:
{
   296fc:	b538      	push	{r3, r4, r5, lr}
   296fe:	4605      	mov	r5, r0
   29700:	460c      	mov	r4, r1
    ble_hs_lock();
   29702:	f004 fc45 	bl	2df90 <ble_hs_lock>
    conn = ble_hs_conn_find(handle);
   29706:	4628      	mov	r0, r5
   29708:	f005 fcc6 	bl	2f098 <ble_hs_conn_find>
    if (conn != NULL && out_desc != NULL) {
   2970c:	4605      	mov	r5, r0
   2970e:	b118      	cbz	r0, 29718 <ble_gap_conn_find+0x1c>
   29710:	b114      	cbz	r4, 29718 <ble_gap_conn_find+0x1c>
        ble_gap_fill_conn_desc(conn, out_desc);
   29712:	4621      	mov	r1, r4
   29714:	f7ff fa9b 	bl	28c4e <ble_gap_fill_conn_desc>
    ble_hs_unlock();
   29718:	f004 fc3e 	bl	2df98 <ble_hs_unlock>
    if (conn == NULL) {
   2971c:	b10d      	cbz	r5, 29722 <ble_gap_conn_find+0x26>
        return 0;
   2971e:	2000      	movs	r0, #0
}
   29720:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOTCONN;
   29722:	2007      	movs	r0, #7
   29724:	e7fc      	b.n	29720 <ble_gap_conn_find+0x24>

00029726 <ble_gap_set_priv_mode>:
{
   29726:	b508      	push	{r3, lr}
    return ble_hs_pvcy_set_mode(peer_addr, priv_mode);
   29728:	f006 fd48 	bl	301bc <ble_hs_pvcy_set_mode>
}
   2972c:	bd08      	pop	{r3, pc}

0002972e <ble_gap_read_le_phy>:
{
   2972e:	b5f0      	push	{r4, r5, r6, r7, lr}
   29730:	b085      	sub	sp, #20
   29732:	4604      	mov	r4, r0
   29734:	460f      	mov	r7, r1
   29736:	4616      	mov	r6, r2
    ble_hs_lock();
   29738:	f004 fc2a 	bl	2df90 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   2973c:	4620      	mov	r0, r4
   2973e:	f005 fcab 	bl	2f098 <ble_hs_conn_find>
   29742:	4605      	mov	r5, r0
    ble_hs_unlock();
   29744:	f004 fc28 	bl	2df98 <ble_hs_unlock>
    if (conn == NULL) {
   29748:	b1bd      	cbz	r5, 2977a <ble_gap_read_le_phy+0x4c>
    cmd.conn_handle = htole16(conn_handle);
   2974a:	f8ad 400c 	strh.w	r4, [sp, #12]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE, BLE_HCI_OCF_LE_RD_PHY),
   2974e:	2304      	movs	r3, #4
   29750:	9300      	str	r3, [sp, #0]
   29752:	ab02      	add	r3, sp, #8
   29754:	2202      	movs	r2, #2
   29756:	a903      	add	r1, sp, #12
   29758:	f242 0030 	movw	r0, #8240	; 0x2030
   2975c:	f005 feec 	bl	2f538 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   29760:	b948      	cbnz	r0, 29776 <ble_gap_read_le_phy+0x48>
    if (le16toh(rsp.conn_handle) != conn_handle) {
   29762:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   29766:	42a3      	cmp	r3, r4
   29768:	d109      	bne.n	2977e <ble_gap_read_le_phy+0x50>
    *tx_phy = rsp.tx_phy;
   2976a:	f89d 300a 	ldrb.w	r3, [sp, #10]
   2976e:	703b      	strb	r3, [r7, #0]
    *rx_phy = rsp.rx_phy;
   29770:	f89d 300b 	ldrb.w	r3, [sp, #11]
   29774:	7033      	strb	r3, [r6, #0]
}
   29776:	b005      	add	sp, #20
   29778:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_ENOTCONN;
   2977a:	2007      	movs	r0, #7
   2977c:	e7fb      	b.n	29776 <ble_gap_read_le_phy+0x48>
        return BLE_HS_ECONTROLLER;
   2977e:	200c      	movs	r0, #12
   29780:	e7f9      	b.n	29776 <ble_gap_read_le_phy+0x48>

00029782 <ble_gap_set_prefered_default_le_phy>:
    if (tx_phys_mask > (BLE_HCI_LE_PHY_1M_PREF_MASK |
   29782:	2807      	cmp	r0, #7
   29784:	d824      	bhi.n	297d0 <ble_gap_set_prefered_default_le_phy+0x4e>
    if (rx_phys_mask > (BLE_HCI_LE_PHY_1M_PREF_MASK |
   29786:	2907      	cmp	r1, #7
   29788:	d824      	bhi.n	297d4 <ble_gap_set_prefered_default_le_phy+0x52>
{
   2978a:	b500      	push	{lr}
   2978c:	b085      	sub	sp, #20
    memset(&cmd, 0, sizeof(cmd));
   2978e:	2300      	movs	r3, #0
   29790:	f8ad 300c 	strh.w	r3, [sp, #12]
   29794:	f88d 300e 	strb.w	r3, [sp, #14]
    if (tx_phys_mask == 0) {
   29798:	b9a0      	cbnz	r0, 297c4 <ble_gap_set_prefered_default_le_phy+0x42>
        cmd.all_phys |= BLE_HCI_LE_PHY_NO_TX_PREF_MASK;
   2979a:	2301      	movs	r3, #1
   2979c:	f88d 300c 	strb.w	r3, [sp, #12]
    if (rx_phys_mask == 0) {
   297a0:	b999      	cbnz	r1, 297ca <ble_gap_set_prefered_default_le_phy+0x48>
        cmd.all_phys |= BLE_HCI_LE_PHY_NO_RX_PREF_MASK;
   297a2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   297a6:	f043 0302 	orr.w	r3, r3, #2
   297aa:	f88d 300c 	strb.w	r3, [sp, #12]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   297ae:	2300      	movs	r3, #0
   297b0:	9300      	str	r3, [sp, #0]
   297b2:	2203      	movs	r2, #3
   297b4:	a903      	add	r1, sp, #12
   297b6:	f242 0031 	movw	r0, #8241	; 0x2031
   297ba:	f005 febd 	bl	2f538 <ble_hs_hci_cmd_tx>
}
   297be:	b005      	add	sp, #20
   297c0:	f85d fb04 	ldr.w	pc, [sp], #4
        cmd.tx_phys = tx_phys_mask;
   297c4:	f88d 000d 	strb.w	r0, [sp, #13]
   297c8:	e7ea      	b.n	297a0 <ble_gap_set_prefered_default_le_phy+0x1e>
        cmd.rx_phys = rx_phys_mask;
   297ca:	f88d 100e 	strb.w	r1, [sp, #14]
   297ce:	e7ee      	b.n	297ae <ble_gap_set_prefered_default_le_phy+0x2c>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   297d0:	2012      	movs	r0, #18
   297d2:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   297d4:	2012      	movs	r0, #18
}
   297d6:	4770      	bx	lr

000297d8 <ble_gap_set_prefered_le_phy>:
{
   297d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   297dc:	b084      	sub	sp, #16
   297de:	4605      	mov	r5, r0
   297e0:	460c      	mov	r4, r1
   297e2:	4616      	mov	r6, r2
   297e4:	4698      	mov	r8, r3
    ble_hs_lock();
   297e6:	f004 fbd3 	bl	2df90 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   297ea:	4628      	mov	r0, r5
   297ec:	f005 fc54 	bl	2f098 <ble_hs_conn_find>
   297f0:	4607      	mov	r7, r0
    ble_hs_unlock();
   297f2:	f004 fbd1 	bl	2df98 <ble_hs_unlock>
    if (conn == NULL) {
   297f6:	b34f      	cbz	r7, 2984c <ble_gap_set_prefered_le_phy+0x74>
    if (tx_phys_mask > (BLE_HCI_LE_PHY_1M_PREF_MASK |
   297f8:	2c07      	cmp	r4, #7
   297fa:	d829      	bhi.n	29850 <ble_gap_set_prefered_le_phy+0x78>
    if (rx_phys_mask > (BLE_HCI_LE_PHY_1M_PREF_MASK |
   297fc:	2e07      	cmp	r6, #7
   297fe:	d829      	bhi.n	29854 <ble_gap_set_prefered_le_phy+0x7c>
    if (phy_opts > BLE_HCI_LE_PHY_CODED_S8_PREF) {
   29800:	f1b8 0f02 	cmp.w	r8, #2
   29804:	d828      	bhi.n	29858 <ble_gap_set_prefered_le_phy+0x80>
    memset(&cmd, 0, sizeof(cmd));
   29806:	2300      	movs	r3, #0
   29808:	f8cd 300a 	str.w	r3, [sp, #10]
    cmd.conn_handle = htole16(conn_handle);
   2980c:	f8ad 5008 	strh.w	r5, [sp, #8]
    if (tx_phys_mask == 0) {
   29810:	b9b4      	cbnz	r4, 29840 <ble_gap_set_prefered_le_phy+0x68>
        cmd.all_phys |= BLE_HCI_LE_PHY_NO_TX_PREF_MASK;
   29812:	2301      	movs	r3, #1
   29814:	f88d 300a 	strb.w	r3, [sp, #10]
    if (rx_phys_mask == 0) {
   29818:	b9ae      	cbnz	r6, 29846 <ble_gap_set_prefered_le_phy+0x6e>
        cmd.all_phys |= BLE_HCI_LE_PHY_NO_RX_PREF_MASK;
   2981a:	f89d 300a 	ldrb.w	r3, [sp, #10]
   2981e:	f043 0302 	orr.w	r3, r3, #2
   29822:	f88d 300a 	strb.w	r3, [sp, #10]
    cmd.phy_options = htole16(phy_opts);
   29826:	f8ad 800d 	strh.w	r8, [sp, #13]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE, BLE_HCI_OCF_LE_SET_PHY),
   2982a:	2300      	movs	r3, #0
   2982c:	9300      	str	r3, [sp, #0]
   2982e:	2207      	movs	r2, #7
   29830:	a902      	add	r1, sp, #8
   29832:	f242 0032 	movw	r0, #8242	; 0x2032
   29836:	f005 fe7f 	bl	2f538 <ble_hs_hci_cmd_tx>
}
   2983a:	b004      	add	sp, #16
   2983c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        cmd.tx_phys = tx_phys_mask;
   29840:	f88d 400b 	strb.w	r4, [sp, #11]
   29844:	e7e8      	b.n	29818 <ble_gap_set_prefered_le_phy+0x40>
        cmd.rx_phys = rx_phys_mask;
   29846:	f88d 600c 	strb.w	r6, [sp, #12]
   2984a:	e7ec      	b.n	29826 <ble_gap_set_prefered_le_phy+0x4e>
        return BLE_HS_ENOTCONN;
   2984c:	2007      	movs	r0, #7
   2984e:	e7f4      	b.n	2983a <ble_gap_set_prefered_le_phy+0x62>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   29850:	2012      	movs	r0, #18
   29852:	e7f2      	b.n	2983a <ble_gap_set_prefered_le_phy+0x62>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   29854:	2012      	movs	r0, #18
   29856:	e7f0      	b.n	2983a <ble_gap_set_prefered_le_phy+0x62>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   29858:	2012      	movs	r0, #18
   2985a:	e7ee      	b.n	2983a <ble_gap_set_prefered_le_phy+0x62>

0002985c <ble_gap_master_in_progress>:
    return ble_gap_master.op != BLE_GAP_OP_NULL;
   2985c:	4b02      	ldr	r3, [pc, #8]	; (29868 <ble_gap_master_in_progress+0xc>)
   2985e:	7818      	ldrb	r0, [r3, #0]
}
   29860:	3800      	subs	r0, #0
   29862:	bf18      	it	ne
   29864:	2001      	movne	r0, #1
   29866:	4770      	bx	lr
   29868:	10004fe0 	.word	0x10004fe0

0002986c <ble_gap_rx_adv_report>:
{
   2986c:	b510      	push	{r4, lr}
   2986e:	4604      	mov	r4, r0
    if (ble_gap_rx_adv_report_sanity_check(desc->data, desc->length_data)) {
   29870:	7841      	ldrb	r1, [r0, #1]
   29872:	68c0      	ldr	r0, [r0, #12]
   29874:	f7ff fdc6 	bl	29404 <ble_gap_rx_adv_report_sanity_check>
   29878:	b100      	cbz	r0, 2987c <ble_gap_rx_adv_report+0x10>
}
   2987a:	bd10      	pop	{r4, pc}
    ble_gap_disc_report(desc);
   2987c:	4620      	mov	r0, r4
   2987e:	f7ff fc87 	bl	29190 <ble_gap_disc_report>
   29882:	e7fa      	b.n	2987a <ble_gap_rx_adv_report+0xe>

00029884 <ble_gap_rx_rd_rem_sup_feat_complete>:
{
   29884:	b538      	push	{r3, r4, r5, lr}
   29886:	4604      	mov	r4, r0
    ble_hs_lock();
   29888:	f004 fb82 	bl	2df90 <ble_hs_lock>
    conn = ble_hs_conn_find(le16toh(ev->conn_handle));
   2988c:	8860      	ldrh	r0, [r4, #2]
   2988e:	f005 fc03 	bl	2f098 <ble_hs_conn_find>
    if ((conn != NULL) && (ev->status == 0)) {
   29892:	b110      	cbz	r0, 2989a <ble_gap_rx_rd_rem_sup_feat_complete+0x16>
   29894:	4605      	mov	r5, r0
   29896:	7863      	ldrb	r3, [r4, #1]
   29898:	b113      	cbz	r3, 298a0 <ble_gap_rx_rd_rem_sup_feat_complete+0x1c>
    ble_hs_unlock();
   2989a:	f004 fb7d 	bl	2df98 <ble_hs_unlock>
}
   2989e:	bd38      	pop	{r3, r4, r5, pc}
        conn->supported_feat = get_le32(ev->features);
   298a0:	1d20      	adds	r0, r4, #4
   298a2:	f7ef fad9 	bl	18e58 <get_le32>
   298a6:	6268      	str	r0, [r5, #36]	; 0x24
   298a8:	e7f7      	b.n	2989a <ble_gap_rx_rd_rem_sup_feat_complete+0x16>

000298aa <ble_gap_rx_l2cap_update_req>:
{
   298aa:	b530      	push	{r4, r5, lr}
   298ac:	b08f      	sub	sp, #60	; 0x3c
   298ae:	4604      	mov	r4, r0
   298b0:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   298b2:	2234      	movs	r2, #52	; 0x34
   298b4:	2100      	movs	r1, #0
   298b6:	a801      	add	r0, sp, #4
   298b8:	f7f1 f9ef 	bl	1ac9a <memset>
    event.type = BLE_GAP_EVENT_L2CAP_UPDATE_REQ;
   298bc:	2305      	movs	r3, #5
   298be:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update_req.conn_handle = conn_handle;
   298c2:	f8ad 4010 	strh.w	r4, [sp, #16]
    event.conn_update_req.peer_params = params;
   298c6:	9502      	str	r5, [sp, #8]
    rc = ble_gap_call_conn_event_cb(&event, conn_handle);
   298c8:	4621      	mov	r1, r4
   298ca:	a801      	add	r0, sp, #4
   298cc:	f7ff f9ae 	bl	28c2c <ble_gap_call_conn_event_cb>
}
   298d0:	b00f      	add	sp, #60	; 0x3c
   298d2:	bd30      	pop	{r4, r5, pc}

000298d4 <ble_gap_rx_phy_update_complete>:
{
   298d4:	b570      	push	{r4, r5, r6, lr}
   298d6:	b08e      	sub	sp, #56	; 0x38
   298d8:	4604      	mov	r4, r0
    uint16_t conn_handle = le16toh(ev->conn_handle);
   298da:	8845      	ldrh	r5, [r0, #2]
   298dc:	b2ae      	uxth	r6, r5
    memset(&event, 0, sizeof event);
   298de:	2234      	movs	r2, #52	; 0x34
   298e0:	2100      	movs	r1, #0
   298e2:	a801      	add	r0, sp, #4
   298e4:	f7f1 f9d9 	bl	1ac9a <memset>
    event.type = BLE_GAP_EVENT_PHY_UPDATE_COMPLETE;
   298e8:	2312      	movs	r3, #18
   298ea:	f88d 3004 	strb.w	r3, [sp, #4]
    event.phy_updated.status = ev->status;
   298ee:	7863      	ldrb	r3, [r4, #1]
   298f0:	9302      	str	r3, [sp, #8]
    event.phy_updated.conn_handle = conn_handle;
   298f2:	f8ad 500c 	strh.w	r5, [sp, #12]
    event.phy_updated.tx_phy = ev->tx_phy;
   298f6:	7923      	ldrb	r3, [r4, #4]
   298f8:	f88d 300e 	strb.w	r3, [sp, #14]
    event.phy_updated.rx_phy = ev->rx_phy;
   298fc:	7963      	ldrb	r3, [r4, #5]
   298fe:	f88d 300f 	strb.w	r3, [sp, #15]
    ble_gap_event_listener_call(&event);
   29902:	a801      	add	r0, sp, #4
   29904:	f7ff f968 	bl	28bd8 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   29908:	4631      	mov	r1, r6
   2990a:	a801      	add	r0, sp, #4
   2990c:	f7ff f98e 	bl	28c2c <ble_gap_call_conn_event_cb>
}
   29910:	b00e      	add	sp, #56	; 0x38
   29912:	bd70      	pop	{r4, r5, r6, pc}

00029914 <ble_gap_timer>:
{
   29914:	b510      	push	{r4, lr}
    master_ticks = ble_gap_master_timer();
   29916:	f7ff fcc1 	bl	2929c <ble_gap_master_timer>
   2991a:	4604      	mov	r4, r0
    update_ticks = ble_gap_update_timer();
   2991c:	f7ff fd04 	bl	29328 <ble_gap_update_timer>
    min_ticks = min(master_ticks, update_ticks);
   29920:	4284      	cmp	r4, r0
   29922:	bfa8      	it	ge
   29924:	4604      	movge	r4, r0
    min_ticks = min(min_ticks, ble_gap_slave_timer());
   29926:	f7ff fd37 	bl	29398 <ble_gap_slave_timer>
   2992a:	42a0      	cmp	r0, r4
   2992c:	dd01      	ble.n	29932 <ble_gap_timer+0x1e>
}
   2992e:	4620      	mov	r0, r4
   29930:	bd10      	pop	{r4, pc}
    min_ticks = min(min_ticks, ble_gap_slave_timer());
   29932:	f7ff fd31 	bl	29398 <ble_gap_slave_timer>
   29936:	4604      	mov	r4, r0
    return min_ticks;
   29938:	e7f9      	b.n	2992e <ble_gap_timer+0x1a>
	...

0002993c <ble_gap_wl_set>:
{
   2993c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2993e:	4605      	mov	r5, r0
   29940:	460c      	mov	r4, r1
    STATS_INC(ble_gap_stats, wl_set);
   29942:	4a22      	ldr	r2, [pc, #136]	; (299cc <ble_gap_wl_set+0x90>)
   29944:	68d3      	ldr	r3, [r2, #12]
   29946:	3301      	adds	r3, #1
   29948:	60d3      	str	r3, [r2, #12]
    ble_hs_lock();
   2994a:	f004 fb21 	bl	2df90 <ble_hs_lock>
    for (i = 0; i < white_list_count; i++) {
   2994e:	2300      	movs	r3, #0
   29950:	4626      	mov	r6, r4
   29952:	429c      	cmp	r4, r3
   29954:	dd0f      	ble.n	29976 <ble_gap_wl_set+0x3a>
        if (addrs[i].type != BLE_ADDR_PUBLIC &&
   29956:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
   2995a:	5caa      	ldrb	r2, [r5, r2]
   2995c:	2a01      	cmp	r2, #1
   2995e:	d801      	bhi.n	29964 <ble_gap_wl_set+0x28>
    for (i = 0; i < white_list_count; i++) {
   29960:	3301      	adds	r3, #1
   29962:	e7f5      	b.n	29950 <ble_gap_wl_set+0x14>
    ble_hs_unlock();
   29964:	f004 fb18 	bl	2df98 <ble_hs_unlock>
            rc = BLE_HS_EINVAL;
   29968:	2703      	movs	r7, #3
        STATS_INC(ble_gap_stats, wl_set_fail);
   2996a:	4a18      	ldr	r2, [pc, #96]	; (299cc <ble_gap_wl_set+0x90>)
   2996c:	6913      	ldr	r3, [r2, #16]
   2996e:	3301      	adds	r3, #1
   29970:	6113      	str	r3, [r2, #16]
}
   29972:	4638      	mov	r0, r7
   29974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ble_gap_wl_busy()) {
   29976:	f7ff f8a3 	bl	28ac0 <ble_gap_wl_busy>
   2997a:	b9e0      	cbnz	r0, 299b6 <ble_gap_wl_set+0x7a>
    BLE_HS_LOG(INFO, "GAP procedure initiated: set whitelist; ");
   2997c:	4a14      	ldr	r2, [pc, #80]	; (299d0 <ble_gap_wl_set+0x94>)
   2997e:	2101      	movs	r1, #1
   29980:	2004      	movs	r0, #4
   29982:	f7f3 f9d3 	bl	1cd2c <modlog_printf>
    ble_gap_log_wl(addrs, white_list_count);
   29986:	4621      	mov	r1, r4
   29988:	4628      	mov	r0, r5
   2998a:	f7ff fd69 	bl	29460 <ble_gap_log_wl>
    BLE_HS_LOG(INFO, "\n");
   2998e:	4a11      	ldr	r2, [pc, #68]	; (299d4 <ble_gap_wl_set+0x98>)
   29990:	2101      	movs	r1, #1
   29992:	2004      	movs	r0, #4
   29994:	f7f3 f9ca 	bl	1cd2c <modlog_printf>
    rc = ble_gap_wl_tx_clear();
   29998:	f7ff fa10 	bl	28dbc <ble_gap_wl_tx_clear>
    if (rc != 0) {
   2999c:	4607      	mov	r7, r0
   2999e:	b978      	cbnz	r0, 299c0 <ble_gap_wl_set+0x84>
    for (i = 0; i < white_list_count; i++) {
   299a0:	4604      	mov	r4, r0
   299a2:	42a6      	cmp	r6, r4
   299a4:	dd0c      	ble.n	299c0 <ble_gap_wl_set+0x84>
        rc = ble_gap_wl_tx_add(addrs + i);
   299a6:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   299aa:	4428      	add	r0, r5
   299ac:	f7ff fa13 	bl	28dd6 <ble_gap_wl_tx_add>
        if (rc != 0) {
   299b0:	b928      	cbnz	r0, 299be <ble_gap_wl_set+0x82>
    for (i = 0; i < white_list_count; i++) {
   299b2:	3401      	adds	r4, #1
   299b4:	e7f5      	b.n	299a2 <ble_gap_wl_set+0x66>
    ble_hs_unlock();
   299b6:	f004 faef 	bl	2df98 <ble_hs_unlock>
        rc = BLE_HS_EBUSY;
   299ba:	270f      	movs	r7, #15
   299bc:	e7d5      	b.n	2996a <ble_gap_wl_set+0x2e>
        rc = ble_gap_wl_tx_add(addrs + i);
   299be:	4607      	mov	r7, r0
    ble_hs_unlock();
   299c0:	f004 faea 	bl	2df98 <ble_hs_unlock>
    if (rc != 0) {
   299c4:	2f00      	cmp	r7, #0
   299c6:	d0d4      	beq.n	29972 <ble_gap_wl_set+0x36>
   299c8:	e7cf      	b.n	2996a <ble_gap_wl_set+0x2e>
   299ca:	bf00      	nop
   299cc:	10004f20 	.word	0x10004f20
   299d0:	00038fd0 	.word	0x00038fd0
   299d4:	00034744 	.word	0x00034744

000299d8 <ble_gap_adv_start>:
{
   299d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   299dc:	b082      	sub	sp, #8
   299de:	4604      	mov	r4, r0
   299e0:	460e      	mov	r6, r1
   299e2:	4617      	mov	r7, r2
   299e4:	461d      	mov	r5, r3
    STATS_INC(ble_gap_stats, adv_start);
   299e6:	4a41      	ldr	r2, [pc, #260]	; (29aec <ble_gap_adv_start+0x114>)
   299e8:	69d3      	ldr	r3, [r2, #28]
   299ea:	3301      	adds	r3, #1
   299ec:	61d3      	str	r3, [r2, #28]
    ble_hs_lock();
   299ee:	f004 facf 	bl	2df90 <ble_hs_lock>
    rc = ble_gap_adv_validate(own_addr_type, direct_addr, adv_params);
   299f2:	462a      	mov	r2, r5
   299f4:	4631      	mov	r1, r6
   299f6:	4620      	mov	r0, r4
   299f8:	f7ff fe2c 	bl	29654 <ble_gap_adv_validate>
    if (rc != 0) {
   299fc:	4680      	mov	r8, r0
   299fe:	b9a8      	cbnz	r0, 29a2c <ble_gap_adv_start+0x54>
    if (duration_ms != BLE_HS_FOREVER) {
   29a00:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   29a04:	429f      	cmp	r7, r3
   29a06:	d006      	beq.n	29a16 <ble_gap_adv_start+0x3e>
}

static inline ble_npl_error_t
ble_npl_time_ms_to_ticks(uint32_t ms, ble_npl_time_t *out_ticks)
{
    return (ble_npl_error_t)os_time_ms_to_ticks(ms, out_ticks);
   29a08:	a901      	add	r1, sp, #4
   29a0a:	4638      	mov	r0, r7
   29a0c:	f7f0 ff27 	bl	1a85e <os_time_ms_to_ticks>
        if (rc != 0) {
   29a10:	f010 0fff 	tst.w	r0, #255	; 0xff
   29a14:	d117      	bne.n	29a46 <ble_gap_adv_start+0x6e>
    if (!ble_hs_is_enabled()) {
   29a16:	f004 faf3 	bl	2e000 <ble_hs_is_enabled>
   29a1a:	b1c8      	cbz	r0, 29a50 <ble_gap_adv_start+0x78>
    if (ble_gap_is_preempted()) {
   29a1c:	f7fe ffee 	bl	289fc <ble_gap_is_preempted>
   29a20:	b9d8      	cbnz	r0, 29a5a <ble_gap_adv_start+0x82>
    rc = ble_hs_id_use_addr(own_addr_type);
   29a22:	4620      	mov	r0, r4
   29a24:	f006 fa57 	bl	2fed6 <ble_hs_id_use_addr>
    if (rc != 0) {
   29a28:	4680      	mov	r8, r0
   29a2a:	b1d8      	cbz	r0, 29a64 <ble_gap_adv_start+0x8c>
    ble_hs_unlock();
   29a2c:	f004 fab4 	bl	2df98 <ble_hs_unlock>
    if (rc != 0) {
   29a30:	f1b8 0f00 	cmp.w	r8, #0
   29a34:	d003      	beq.n	29a3e <ble_gap_adv_start+0x66>
        STATS_INC(ble_gap_stats, adv_start_fail);
   29a36:	4a2d      	ldr	r2, [pc, #180]	; (29aec <ble_gap_adv_start+0x114>)
   29a38:	6a13      	ldr	r3, [r2, #32]
   29a3a:	3301      	adds	r3, #1
   29a3c:	6213      	str	r3, [r2, #32]
}
   29a3e:	4640      	mov	r0, r8
   29a40:	b002      	add	sp, #8
   29a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_unlock();
   29a46:	f004 faa7 	bl	2df98 <ble_hs_unlock>
            rc = BLE_HS_EINVAL;
   29a4a:	f04f 0803 	mov.w	r8, #3
   29a4e:	e7f2      	b.n	29a36 <ble_gap_adv_start+0x5e>
    ble_hs_unlock();
   29a50:	f004 faa2 	bl	2df98 <ble_hs_unlock>
        rc = BLE_HS_EDISABLED;
   29a54:	f04f 081e 	mov.w	r8, #30
   29a58:	e7ed      	b.n	29a36 <ble_gap_adv_start+0x5e>
    ble_hs_unlock();
   29a5a:	f004 fa9d 	bl	2df98 <ble_hs_unlock>
        rc = BLE_HS_EPREEMPTED;
   29a5e:	f04f 081d 	mov.w	r8, #29
   29a62:	e7e8      	b.n	29a36 <ble_gap_adv_start+0x5e>
    BLE_HS_LOG(INFO, "GAP procedure initiated: advertise; ");
   29a64:	4a22      	ldr	r2, [pc, #136]	; (29af0 <ble_gap_adv_start+0x118>)
   29a66:	2101      	movs	r1, #1
   29a68:	2004      	movs	r0, #4
   29a6a:	f7f3 f95f 	bl	1cd2c <modlog_printf>
    ble_gap_log_adv(own_addr_type, direct_addr, adv_params);
   29a6e:	462a      	mov	r2, r5
   29a70:	4631      	mov	r1, r6
   29a72:	4620      	mov	r0, r4
   29a74:	f7ff fd2e 	bl	294d4 <ble_gap_log_adv>
    BLE_HS_LOG(INFO, "\n");
   29a78:	4a1e      	ldr	r2, [pc, #120]	; (29af4 <ble_gap_adv_start+0x11c>)
   29a7a:	2101      	movs	r1, #1
   29a7c:	2004      	movs	r0, #4
   29a7e:	f7f3 f955 	bl	1cd2c <modlog_printf>
    ble_gap_slave[0].cb = cb;
   29a82:	4b1d      	ldr	r3, [pc, #116]	; (29af8 <ble_gap_adv_start+0x120>)
   29a84:	9a08      	ldr	r2, [sp, #32]
   29a86:	61da      	str	r2, [r3, #28]
    ble_gap_slave[0].cb_arg = cb_arg;
   29a88:	9a09      	ldr	r2, [sp, #36]	; 0x24
   29a8a:	621a      	str	r2, [r3, #32]
    ble_gap_slave[0].our_addr_type = own_addr_type;
   29a8c:	7d5a      	ldrb	r2, [r3, #21]
   29a8e:	f364 0201 	bfi	r2, r4, #0, #2
   29a92:	755a      	strb	r2, [r3, #21]
    if (adv_params->conn_mode != BLE_GAP_CONN_MODE_NON) {
   29a94:	782b      	ldrb	r3, [r5, #0]
   29a96:	b1d3      	cbz	r3, 29ace <ble_gap_adv_start+0xf6>
        ble_gap_slave[0].connectable = 1;
   29a98:	4a17      	ldr	r2, [pc, #92]	; (29af8 <ble_gap_adv_start+0x120>)
   29a9a:	7d53      	ldrb	r3, [r2, #21]
   29a9c:	f043 0308 	orr.w	r3, r3, #8
   29aa0:	7553      	strb	r3, [r2, #21]
    rc = ble_gap_adv_params_tx(own_addr_type, direct_addr, adv_params);
   29aa2:	462a      	mov	r2, r5
   29aa4:	4631      	mov	r1, r6
   29aa6:	4620      	mov	r0, r4
   29aa8:	f7ff f9b2 	bl	28e10 <ble_gap_adv_params_tx>
    if (rc != 0) {
   29aac:	4680      	mov	r8, r0
   29aae:	2800      	cmp	r0, #0
   29ab0:	d1bc      	bne.n	29a2c <ble_gap_adv_start+0x54>
    ble_gap_slave[0].op = BLE_GAP_OP_S_ADV;
   29ab2:	2001      	movs	r0, #1
   29ab4:	4b10      	ldr	r3, [pc, #64]	; (29af8 <ble_gap_adv_start+0x120>)
   29ab6:	7518      	strb	r0, [r3, #20]
    rc = ble_gap_adv_enable_tx(1);
   29ab8:	f7ff f96e 	bl	28d98 <ble_gap_adv_enable_tx>
    if (rc != 0) {
   29abc:	4680      	mov	r8, r0
   29abe:	b960      	cbnz	r0, 29ada <ble_gap_adv_start+0x102>
    if (duration_ms != BLE_HS_FOREVER) {
   29ac0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   29ac4:	429f      	cmp	r7, r3
   29ac6:	d10c      	bne.n	29ae2 <ble_gap_adv_start+0x10a>
    ble_hs_unlock();
   29ac8:	f004 fa66 	bl	2df98 <ble_hs_unlock>
    if (rc != 0) {
   29acc:	e7b7      	b.n	29a3e <ble_gap_adv_start+0x66>
        ble_gap_slave[0].connectable = 0;
   29ace:	4b0a      	ldr	r3, [pc, #40]	; (29af8 <ble_gap_adv_start+0x120>)
   29ad0:	7d5a      	ldrb	r2, [r3, #21]
   29ad2:	f36f 02c3 	bfc	r2, #3, #1
   29ad6:	755a      	strb	r2, [r3, #21]
   29ad8:	e7e3      	b.n	29aa2 <ble_gap_adv_start+0xca>
        ble_gap_slave_reset_state(0);
   29ada:	2000      	movs	r0, #0
   29adc:	f7ff fab2 	bl	29044 <ble_gap_slave_reset_state>
        goto done;
   29ae0:	e7a4      	b.n	29a2c <ble_gap_adv_start+0x54>
        ble_gap_slave_set_timer(duration_ticks);
   29ae2:	9801      	ldr	r0, [sp, #4]
   29ae4:	f7ff fc6e 	bl	293c4 <ble_gap_slave_set_timer>
   29ae8:	e7ee      	b.n	29ac8 <ble_gap_adv_start+0xf0>
   29aea:	bf00      	nop
   29aec:	10004f20 	.word	0x10004f20
   29af0:	00038ffc 	.word	0x00038ffc
   29af4:	00034744 	.word	0x00034744
   29af8:	10004fe0 	.word	0x10004fe0

00029afc <ble_gap_adv_set_data>:
{
   29afc:	b510      	push	{r4, lr}
   29afe:	b08a      	sub	sp, #40	; 0x28
   29b00:	460c      	mov	r4, r1
    STATS_INC(ble_gap_stats, adv_set_data);
   29b02:	4a0f      	ldr	r2, [pc, #60]	; (29b40 <ble_gap_adv_set_data+0x44>)
   29b04:	6a53      	ldr	r3, [r2, #36]	; 0x24
   29b06:	3301      	adds	r3, #1
   29b08:	6253      	str	r3, [r2, #36]	; 0x24
    if (((data == NULL) && (data_len != 0)) ||
   29b0a:	4601      	mov	r1, r0
   29b0c:	b190      	cbz	r0, 29b34 <ble_gap_adv_set_data+0x38>
   29b0e:	2c1f      	cmp	r4, #31
   29b10:	dc14      	bgt.n	29b3c <ble_gap_adv_set_data+0x40>
    memcpy(cmd.adv_data, data, data_len);
   29b12:	4622      	mov	r2, r4
   29b14:	f10d 0009 	add.w	r0, sp, #9
   29b18:	f7f1 f89a 	bl	1ac50 <memcpy>
    cmd.adv_data_len = data_len;
   29b1c:	f88d 4008 	strb.w	r4, [sp, #8]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   29b20:	2300      	movs	r3, #0
   29b22:	9300      	str	r3, [sp, #0]
   29b24:	2220      	movs	r2, #32
   29b26:	a902      	add	r1, sp, #8
   29b28:	f242 0008 	movw	r0, #8200	; 0x2008
   29b2c:	f005 fd04 	bl	2f538 <ble_hs_hci_cmd_tx>
}
   29b30:	b00a      	add	sp, #40	; 0x28
   29b32:	bd10      	pop	{r4, pc}
    if (((data == NULL) && (data_len != 0)) ||
   29b34:	2c00      	cmp	r4, #0
   29b36:	d0ea      	beq.n	29b0e <ble_gap_adv_set_data+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   29b38:	2012      	movs	r0, #18
   29b3a:	e7f9      	b.n	29b30 <ble_gap_adv_set_data+0x34>
   29b3c:	2012      	movs	r0, #18
   29b3e:	e7f7      	b.n	29b30 <ble_gap_adv_set_data+0x34>
   29b40:	10004f20 	.word	0x10004f20

00029b44 <ble_gap_adv_rsp_set_data>:
{
   29b44:	b510      	push	{r4, lr}
   29b46:	b08a      	sub	sp, #40	; 0x28
   29b48:	460c      	mov	r4, r1
    if (((data == NULL) && (data_len != 0)) ||
   29b4a:	4601      	mov	r1, r0
   29b4c:	b190      	cbz	r0, 29b74 <ble_gap_adv_rsp_set_data+0x30>
   29b4e:	2c1f      	cmp	r4, #31
   29b50:	dc14      	bgt.n	29b7c <ble_gap_adv_rsp_set_data+0x38>
    memcpy(cmd.scan_rsp, data, data_len);
   29b52:	4622      	mov	r2, r4
   29b54:	f10d 0009 	add.w	r0, sp, #9
   29b58:	f7f1 f87a 	bl	1ac50 <memcpy>
    cmd.scan_rsp_len = data_len;
   29b5c:	f88d 4008 	strb.w	r4, [sp, #8]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   29b60:	2300      	movs	r3, #0
   29b62:	9300      	str	r3, [sp, #0]
   29b64:	2220      	movs	r2, #32
   29b66:	a902      	add	r1, sp, #8
   29b68:	f242 0009 	movw	r0, #8201	; 0x2009
   29b6c:	f005 fce4 	bl	2f538 <ble_hs_hci_cmd_tx>
}
   29b70:	b00a      	add	sp, #40	; 0x28
   29b72:	bd10      	pop	{r4, pc}
    if (((data == NULL) && (data_len != 0)) ||
   29b74:	2c00      	cmp	r4, #0
   29b76:	d0ea      	beq.n	29b4e <ble_gap_adv_rsp_set_data+0xa>
        return BLE_HS_EINVAL;
   29b78:	2003      	movs	r0, #3
   29b7a:	e7f9      	b.n	29b70 <ble_gap_adv_rsp_set_data+0x2c>
   29b7c:	2003      	movs	r0, #3
   29b7e:	e7f7      	b.n	29b70 <ble_gap_adv_rsp_set_data+0x2c>

00029b80 <ble_gap_adv_set_fields>:
{
   29b80:	b500      	push	{lr}
   29b82:	b08b      	sub	sp, #44	; 0x2c
    rc = ble_hs_adv_set_fields(adv_fields, buf, &buf_sz, sizeof buf);
   29b84:	231f      	movs	r3, #31
   29b86:	f10d 0207 	add.w	r2, sp, #7
   29b8a:	a902      	add	r1, sp, #8
   29b8c:	f005 f912 	bl	2edb4 <ble_hs_adv_set_fields>
    if (rc != 0) {
   29b90:	b110      	cbz	r0, 29b98 <ble_gap_adv_set_fields+0x18>
}
   29b92:	b00b      	add	sp, #44	; 0x2c
   29b94:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = ble_gap_adv_set_data(buf, buf_sz);
   29b98:	f89d 1007 	ldrb.w	r1, [sp, #7]
   29b9c:	a802      	add	r0, sp, #8
   29b9e:	f7ff ffad 	bl	29afc <ble_gap_adv_set_data>
    if (rc != 0) {
   29ba2:	e7f6      	b.n	29b92 <ble_gap_adv_set_fields+0x12>

00029ba4 <ble_gap_adv_rsp_set_fields>:
{
   29ba4:	b500      	push	{lr}
   29ba6:	b08b      	sub	sp, #44	; 0x2c
    rc = ble_hs_adv_set_fields(rsp_fields, buf, &buf_sz, sizeof buf);
   29ba8:	231f      	movs	r3, #31
   29baa:	f10d 0207 	add.w	r2, sp, #7
   29bae:	a902      	add	r1, sp, #8
   29bb0:	f005 f900 	bl	2edb4 <ble_hs_adv_set_fields>
    if (rc != 0) {
   29bb4:	b110      	cbz	r0, 29bbc <ble_gap_adv_rsp_set_fields+0x18>
}
   29bb6:	b00b      	add	sp, #44	; 0x2c
   29bb8:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = ble_gap_adv_rsp_set_data(buf, buf_sz);
   29bbc:	f89d 1007 	ldrb.w	r1, [sp, #7]
   29bc0:	a802      	add	r0, sp, #8
   29bc2:	f7ff ffbf 	bl	29b44 <ble_gap_adv_rsp_set_data>
    if (rc != 0) {
   29bc6:	e7f6      	b.n	29bb6 <ble_gap_adv_rsp_set_fields+0x12>

00029bc8 <ble_gap_adv_active>:
{
   29bc8:	b508      	push	{r3, lr}
    return ble_gap_adv_active_instance(0);
   29bca:	2000      	movs	r0, #0
   29bcc:	f7fe ff3e 	bl	28a4c <ble_gap_adv_active_instance>
}
   29bd0:	bd08      	pop	{r3, pc}
	...

00029bd4 <ble_gap_rx_conn_complete>:
{
   29bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   29bd6:	b091      	sub	sp, #68	; 0x44
    STATS_INC(ble_gap_stats, rx_conn_complete);
   29bd8:	4a6a      	ldr	r2, [pc, #424]	; (29d84 <ble_gap_rx_conn_complete+0x1b0>)
   29bda:	6f53      	ldr	r3, [r2, #116]	; 0x74
   29bdc:	3301      	adds	r3, #1
   29bde:	6753      	str	r3, [r2, #116]	; 0x74
    if (evt->status != BLE_ERR_SUCCESS) {
   29be0:	7803      	ldrb	r3, [r0, #0]
   29be2:	b373      	cbz	r3, 29c42 <ble_gap_rx_conn_complete+0x6e>
        switch (evt->status) {
   29be4:	2b02      	cmp	r3, #2
   29be6:	d00e      	beq.n	29c06 <ble_gap_rx_conn_complete+0x32>
   29be8:	2b3c      	cmp	r3, #60	; 0x3c
   29bea:	d11b      	bne.n	29c24 <ble_gap_rx_conn_complete+0x50>
            if (ble_gap_adv_active()) {
   29bec:	f7ff ffec 	bl	29bc8 <ble_gap_adv_active>
   29bf0:	b910      	cbnz	r0, 29bf8 <ble_gap_rx_conn_complete+0x24>
        return 0;
   29bf2:	2000      	movs	r0, #0
}
   29bf4:	b011      	add	sp, #68	; 0x44
   29bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                ble_gap_adv_finished(0, 0, 0, 0);
   29bf8:	2300      	movs	r3, #0
   29bfa:	461a      	mov	r2, r3
   29bfc:	4619      	mov	r1, r3
   29bfe:	4618      	mov	r0, r3
   29c00:	f7ff fa46 	bl	29090 <ble_gap_adv_finished>
   29c04:	e7f5      	b.n	29bf2 <ble_gap_rx_conn_complete+0x1e>
            if (ble_gap_master_in_progress()) {
   29c06:	f7ff fe29 	bl	2985c <ble_gap_master_in_progress>
   29c0a:	2800      	cmp	r0, #0
   29c0c:	d0f1      	beq.n	29bf2 <ble_gap_rx_conn_complete+0x1e>
                if (ble_gap_master.preempted_op == BLE_GAP_OP_M_CONN) {
   29c0e:	4b5e      	ldr	r3, [pc, #376]	; (29d88 <ble_gap_rx_conn_complete+0x1b4>)
   29c10:	7c1b      	ldrb	r3, [r3, #16]
   29c12:	2b02      	cmp	r3, #2
   29c14:	d002      	beq.n	29c1c <ble_gap_rx_conn_complete+0x48>
                    ble_gap_master_connect_cancelled();
   29c16:	f7ff fade 	bl	291d6 <ble_gap_master_connect_cancelled>
   29c1a:	e7ea      	b.n	29bf2 <ble_gap_rx_conn_complete+0x1e>
                    ble_gap_master_failed(BLE_HS_EPREEMPTED);
   29c1c:	201d      	movs	r0, #29
   29c1e:	f7ff fafd 	bl	2921c <ble_gap_master_failed>
   29c22:	e7e6      	b.n	29bf2 <ble_gap_rx_conn_complete+0x1e>
            BLE_HS_LOG(INFO, "controller reported invalid error code in conn"
   29c24:	4a59      	ldr	r2, [pc, #356]	; (29d8c <ble_gap_rx_conn_complete+0x1b8>)
   29c26:	2101      	movs	r1, #1
   29c28:	2004      	movs	r0, #4
   29c2a:	f7f3 f87f 	bl	1cd2c <modlog_printf>
            assert(0);
   29c2e:	f7ea fd61 	bl	146f4 <hal_debugger_connected>
   29c32:	b100      	cbz	r0, 29c36 <ble_gap_rx_conn_complete+0x62>
   29c34:	be01      	bkpt	0x0001
   29c36:	2300      	movs	r3, #0
   29c38:	461a      	mov	r2, r3
   29c3a:	4619      	mov	r1, r3
   29c3c:	4618      	mov	r0, r3
   29c3e:	f7ef f877 	bl	18d30 <__assert_func>
   29c42:	4604      	mov	r4, r0
   29c44:	460e      	mov	r6, r1
    if (ble_hs_atomic_conn_flags(evt->connection_handle, NULL) == 0) {
   29c46:	2100      	movs	r1, #0
   29c48:	8840      	ldrh	r0, [r0, #2]
   29c4a:	f005 f924 	bl	2ee96 <ble_hs_atomic_conn_flags>
   29c4e:	2800      	cmp	r0, #0
   29c50:	d0d0      	beq.n	29bf4 <ble_gap_rx_conn_complete+0x20>
    switch (evt->role) {
   29c52:	7923      	ldrb	r3, [r4, #4]
   29c54:	2b00      	cmp	r3, #0
   29c56:	d063      	beq.n	29d20 <ble_gap_rx_conn_complete+0x14c>
   29c58:	2b01      	cmp	r3, #1
   29c5a:	d066      	beq.n	29d2a <ble_gap_rx_conn_complete+0x156>
    conn = ble_hs_conn_alloc(evt->connection_handle);
   29c5c:	8860      	ldrh	r0, [r4, #2]
   29c5e:	f005 f9c9 	bl	2eff4 <ble_hs_conn_alloc>
   29c62:	4605      	mov	r5, r0
    conn->bhc_itvl = evt->conn_itvl;
   29c64:	89a3      	ldrh	r3, [r4, #12]
   29c66:	8383      	strh	r3, [r0, #28]
    conn->bhc_latency = evt->conn_latency;
   29c68:	89e3      	ldrh	r3, [r4, #14]
   29c6a:	83c3      	strh	r3, [r0, #30]
    conn->bhc_supervision_timeout = evt->supervision_timeout;
   29c6c:	8a23      	ldrh	r3, [r4, #16]
   29c6e:	8403      	strh	r3, [r0, #32]
    conn->bhc_master_clock_accuracy = evt->master_clk_acc;
   29c70:	7ca3      	ldrb	r3, [r4, #18]
   29c72:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    if (evt->role == BLE_HCI_LE_CONN_COMPLETE_ROLE_MASTER) {
   29c76:	7923      	ldrb	r3, [r4, #4]
   29c78:	2b00      	cmp	r3, #0
   29c7a:	d15c      	bne.n	29d36 <ble_gap_rx_conn_complete+0x162>
        conn->bhc_cb = ble_gap_master.cb;
   29c7c:	4b42      	ldr	r3, [pc, #264]	; (29d88 <ble_gap_rx_conn_complete+0x1b4>)
   29c7e:	689a      	ldr	r2, [r3, #8]
   29c80:	65c2      	str	r2, [r0, #92]	; 0x5c
        conn->bhc_cb_arg = ble_gap_master.cb_arg;
   29c82:	68da      	ldr	r2, [r3, #12]
   29c84:	6602      	str	r2, [r0, #96]	; 0x60
        conn->bhc_flags |= BLE_HS_CONN_F_MASTER;
   29c86:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
   29c8a:	f042 0201 	orr.w	r2, r2, #1
   29c8e:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        conn->bhc_our_addr_type = ble_gap_master.conn.our_addr_type;
   29c92:	7c5b      	ldrb	r3, [r3, #17]
   29c94:	f3c3 0341 	ubfx	r3, r3, #1, #2
   29c98:	7183      	strb	r3, [r0, #6]
        ble_gap_master_reset_state();
   29c9a:	f7ff fa15 	bl	290c8 <ble_gap_master_reset_state>
    conn->bhc_peer_addr.type = evt->peer_addr_type;
   29c9e:	7966      	ldrb	r6, [r4, #5]
   29ca0:	71ee      	strb	r6, [r5, #7]
    memcpy(conn->bhc_peer_addr.val, evt->peer_addr, 6);
   29ca2:	4623      	mov	r3, r4
   29ca4:	f853 2f06 	ldr.w	r2, [r3, #6]!
   29ca8:	60aa      	str	r2, [r5, #8]
   29caa:	889b      	ldrh	r3, [r3, #4]
   29cac:	81ab      	strh	r3, [r5, #12]
    conn->bhc_our_rpa_addr.type = BLE_ADDR_RANDOM;
   29cae:	2301      	movs	r3, #1
   29cb0:	73ab      	strb	r3, [r5, #14]
    memcpy(conn->bhc_our_rpa_addr.val, evt->local_rpa, 6);
   29cb2:	4623      	mov	r3, r4
   29cb4:	f853 2f13 	ldr.w	r2, [r3, #19]!
   29cb8:	f8c5 200f 	str.w	r2, [r5, #15]
   29cbc:	889b      	ldrh	r3, [r3, #4]
   29cbe:	f8a5 3013 	strh.w	r3, [r5, #19]
    if (memcmp(BLE_ADDR_ANY->val, evt->peer_rpa, 6) == 0) {
   29cc2:	2300      	movs	r3, #0
   29cc4:	930e      	str	r3, [sp, #56]	; 0x38
   29cc6:	f8cd 303b 	str.w	r3, [sp, #59]	; 0x3b
   29cca:	f104 0719 	add.w	r7, r4, #25
   29cce:	2206      	movs	r2, #6
   29cd0:	4639      	mov	r1, r7
   29cd2:	f10d 0039 	add.w	r0, sp, #57	; 0x39
   29cd6:	f7f0 ff97 	bl	1ac08 <memcmp>
   29cda:	2800      	cmp	r0, #0
   29cdc:	d14a      	bne.n	29d74 <ble_gap_rx_conn_complete+0x1a0>
        if (BLE_ADDR_IS_RPA(&conn->bhc_peer_addr)) {
   29cde:	2e01      	cmp	r6, #1
   29ce0:	d038      	beq.n	29d54 <ble_gap_rx_conn_complete+0x180>
    ble_hs_lock();
   29ce2:	f004 f955 	bl	2df90 <ble_hs_lock>
    memset(&event, 0, sizeof event);
   29ce6:	2234      	movs	r2, #52	; 0x34
   29ce8:	2100      	movs	r1, #0
   29cea:	a801      	add	r0, sp, #4
   29cec:	f7f0 ffd5 	bl	1ac9a <memset>
    ble_hs_conn_insert(conn);
   29cf0:	4628      	mov	r0, r5
   29cf2:	f005 f9dd 	bl	2f0b0 <ble_hs_conn_insert>
    ble_hs_unlock();
   29cf6:	f004 f94f 	bl	2df98 <ble_hs_unlock>
    event.type = BLE_GAP_EVENT_CONNECT;
   29cfa:	2500      	movs	r5, #0
   29cfc:	f88d 5004 	strb.w	r5, [sp, #4]
    event.connect.conn_handle = evt->connection_handle;
   29d00:	8863      	ldrh	r3, [r4, #2]
   29d02:	f8ad 300c 	strh.w	r3, [sp, #12]
    event.connect.status = 0;
   29d06:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
   29d08:	a801      	add	r0, sp, #4
   29d0a:	f7fe ff65 	bl	28bd8 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, evt->connection_handle);
   29d0e:	8861      	ldrh	r1, [r4, #2]
   29d10:	a801      	add	r0, sp, #4
   29d12:	f7fe ff8b 	bl	28c2c <ble_gap_call_conn_event_cb>
    ble_gap_rd_rem_sup_feat_tx(evt->connection_handle);
   29d16:	8860      	ldrh	r0, [r4, #2]
   29d18:	f7ff f805 	bl	28d26 <ble_gap_rd_rem_sup_feat_tx>
    return 0;
   29d1c:	4628      	mov	r0, r5
   29d1e:	e769      	b.n	29bf4 <ble_gap_rx_conn_complete+0x20>
        rc = ble_gap_accept_master_conn();
   29d20:	f7fe fea0 	bl	28a64 <ble_gap_accept_master_conn>
        if (rc != 0) {
   29d24:	2800      	cmp	r0, #0
   29d26:	d099      	beq.n	29c5c <ble_gap_rx_conn_complete+0x88>
   29d28:	e764      	b.n	29bf4 <ble_gap_rx_conn_complete+0x20>
        rc = ble_gap_accept_slave_conn(instance);
   29d2a:	4630      	mov	r0, r6
   29d2c:	f7fe feaa 	bl	28a84 <ble_gap_accept_slave_conn>
        if (rc != 0) {
   29d30:	2800      	cmp	r0, #0
   29d32:	d093      	beq.n	29c5c <ble_gap_rx_conn_complete+0x88>
   29d34:	e75e      	b.n	29bf4 <ble_gap_rx_conn_complete+0x20>
        conn->bhc_cb = ble_gap_slave[instance].cb;
   29d36:	4b14      	ldr	r3, [pc, #80]	; (29d88 <ble_gap_rx_conn_complete+0x1b4>)
   29d38:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   29d3c:	69da      	ldr	r2, [r3, #28]
   29d3e:	65c2      	str	r2, [r0, #92]	; 0x5c
        conn->bhc_cb_arg = ble_gap_slave[instance].cb_arg;
   29d40:	6a1a      	ldr	r2, [r3, #32]
   29d42:	6602      	str	r2, [r0, #96]	; 0x60
        conn->bhc_our_addr_type = ble_gap_slave[instance].our_addr_type;
   29d44:	7d5b      	ldrb	r3, [r3, #21]
   29d46:	f3c3 0301 	ubfx	r3, r3, #0, #2
   29d4a:	7183      	strb	r3, [r0, #6]
        ble_gap_slave_reset_state(instance);
   29d4c:	4630      	mov	r0, r6
   29d4e:	f7ff f979 	bl	29044 <ble_gap_slave_reset_state>
   29d52:	e7a4      	b.n	29c9e <ble_gap_rx_conn_complete+0xca>
        if (BLE_ADDR_IS_RPA(&conn->bhc_peer_addr)) {
   29d54:	7b6b      	ldrb	r3, [r5, #13]
   29d56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   29d5a:	2b40      	cmp	r3, #64	; 0x40
   29d5c:	d1c1      	bne.n	29ce2 <ble_gap_rx_conn_complete+0x10e>
            conn->bhc_peer_rpa_addr = conn->bhc_peer_addr;
   29d5e:	462b      	mov	r3, r5
   29d60:	f853 2f07 	ldr.w	r2, [r3, #7]!
   29d64:	f8c5 2015 	str.w	r2, [r5, #21]
   29d68:	889a      	ldrh	r2, [r3, #4]
   29d6a:	799b      	ldrb	r3, [r3, #6]
   29d6c:	f8a5 2019 	strh.w	r2, [r5, #25]
   29d70:	76eb      	strb	r3, [r5, #27]
   29d72:	e7b6      	b.n	29ce2 <ble_gap_rx_conn_complete+0x10e>
        conn->bhc_peer_rpa_addr.type = BLE_ADDR_RANDOM;
   29d74:	2301      	movs	r3, #1
   29d76:	756b      	strb	r3, [r5, #21]
        memcpy(conn->bhc_peer_rpa_addr.val, evt->peer_rpa, 6);
   29d78:	683b      	ldr	r3, [r7, #0]
   29d7a:	f8c5 3016 	str.w	r3, [r5, #22]
   29d7e:	88bb      	ldrh	r3, [r7, #4]
   29d80:	836b      	strh	r3, [r5, #26]
   29d82:	e7ae      	b.n	29ce2 <ble_gap_rx_conn_complete+0x10e>
   29d84:	10004f20 	.word	0x10004f20
   29d88:	10004fe0 	.word	0x10004fe0
   29d8c:	00039024 	.word	0x00039024

00029d90 <ble_gap_adv_stop_no_lock>:
{
   29d90:	b538      	push	{r3, r4, r5, lr}
    STATS_INC(ble_gap_stats, adv_stop);
   29d92:	4a0e      	ldr	r2, [pc, #56]	; (29dcc <ble_gap_adv_stop_no_lock+0x3c>)
   29d94:	6953      	ldr	r3, [r2, #20]
   29d96:	3301      	adds	r3, #1
   29d98:	6153      	str	r3, [r2, #20]
    active = ble_gap_adv_active();
   29d9a:	f7ff ff15 	bl	29bc8 <ble_gap_adv_active>
   29d9e:	4604      	mov	r4, r0
    BLE_HS_LOG(INFO, "GAP procedure initiated: stop advertising.\n");
   29da0:	4a0b      	ldr	r2, [pc, #44]	; (29dd0 <ble_gap_adv_stop_no_lock+0x40>)
   29da2:	2101      	movs	r1, #1
   29da4:	2004      	movs	r0, #4
   29da6:	f7f2 ffc1 	bl	1cd2c <modlog_printf>
    rc = ble_gap_adv_enable_tx(0);
   29daa:	2000      	movs	r0, #0
   29dac:	f7fe fff4 	bl	28d98 <ble_gap_adv_enable_tx>
    if (rc != 0) {
   29db0:	4605      	mov	r5, r0
   29db2:	b128      	cbz	r0, 29dc0 <ble_gap_adv_stop_no_lock+0x30>
        STATS_INC(ble_gap_stats, adv_stop_fail);
   29db4:	4a05      	ldr	r2, [pc, #20]	; (29dcc <ble_gap_adv_stop_no_lock+0x3c>)
   29db6:	6993      	ldr	r3, [r2, #24]
   29db8:	3301      	adds	r3, #1
   29dba:	6193      	str	r3, [r2, #24]
}
   29dbc:	4628      	mov	r0, r5
   29dbe:	bd38      	pop	{r3, r4, r5, pc}
    ble_gap_slave_reset_state(0);
   29dc0:	f7ff f940 	bl	29044 <ble_gap_slave_reset_state>
    if (!active) {
   29dc4:	2c00      	cmp	r4, #0
   29dc6:	d1f9      	bne.n	29dbc <ble_gap_adv_stop_no_lock+0x2c>
        rc = BLE_HS_EALREADY;
   29dc8:	2502      	movs	r5, #2
   29dca:	e7f3      	b.n	29db4 <ble_gap_adv_stop_no_lock+0x24>
   29dcc:	10004f20 	.word	0x10004f20
   29dd0:	00039068 	.word	0x00039068

00029dd4 <ble_gap_adv_stop>:
{
   29dd4:	b510      	push	{r4, lr}
    ble_hs_lock();
   29dd6:	f004 f8db 	bl	2df90 <ble_hs_lock>
    rc = ble_gap_adv_stop_no_lock();
   29dda:	f7ff ffd9 	bl	29d90 <ble_gap_adv_stop_no_lock>
   29dde:	4604      	mov	r4, r0
    ble_hs_unlock();
   29de0:	f004 f8da 	bl	2df98 <ble_hs_unlock>
}
   29de4:	4620      	mov	r0, r4
   29de6:	bd10      	pop	{r4, pc}

00029de8 <ble_gap_disc_active>:
    return ble_gap_master.op == BLE_GAP_OP_M_DISC;
   29de8:	4b03      	ldr	r3, [pc, #12]	; (29df8 <ble_gap_disc_active+0x10>)
   29dea:	7818      	ldrb	r0, [r3, #0]
}
   29dec:	2801      	cmp	r0, #1
   29dee:	bf14      	ite	ne
   29df0:	2000      	movne	r0, #0
   29df2:	2001      	moveq	r0, #1
   29df4:	4770      	bx	lr
   29df6:	bf00      	nop
   29df8:	10004fe0 	.word	0x10004fe0

00029dfc <ble_gap_disc_cancel_no_lock>:
{
   29dfc:	b510      	push	{r4, lr}
    STATS_INC(ble_gap_stats, discover_cancel);
   29dfe:	4a0c      	ldr	r2, [pc, #48]	; (29e30 <ble_gap_disc_cancel_no_lock+0x34>)
   29e00:	6f93      	ldr	r3, [r2, #120]	; 0x78
   29e02:	3301      	adds	r3, #1
   29e04:	6793      	str	r3, [r2, #120]	; 0x78
    if (!ble_gap_disc_active()) {
   29e06:	f7ff ffef 	bl	29de8 <ble_gap_disc_active>
   29e0a:	b930      	cbnz	r0, 29e1a <ble_gap_disc_cancel_no_lock+0x1e>
        rc = BLE_HS_EALREADY;
   29e0c:	2402      	movs	r4, #2
        STATS_INC(ble_gap_stats, discover_cancel_fail);
   29e0e:	4a08      	ldr	r2, [pc, #32]	; (29e30 <ble_gap_disc_cancel_no_lock+0x34>)
   29e10:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   29e12:	3301      	adds	r3, #1
   29e14:	67d3      	str	r3, [r2, #124]	; 0x7c
}
   29e16:	4620      	mov	r0, r4
   29e18:	bd10      	pop	{r4, pc}
    rc = ble_gap_disc_disable_tx();
   29e1a:	f7fe ffb7 	bl	28d8c <ble_gap_disc_disable_tx>
    if (rc != 0) {
   29e1e:	4604      	mov	r4, r0
   29e20:	b110      	cbz	r0, 29e28 <ble_gap_disc_cancel_no_lock+0x2c>
    if (rc != 0) {
   29e22:	2c00      	cmp	r4, #0
   29e24:	d0f7      	beq.n	29e16 <ble_gap_disc_cancel_no_lock+0x1a>
   29e26:	e7f2      	b.n	29e0e <ble_gap_disc_cancel_no_lock+0x12>
    ble_gap_master_reset_state();
   29e28:	f7ff f94e 	bl	290c8 <ble_gap_master_reset_state>
   29e2c:	e7f9      	b.n	29e22 <ble_gap_disc_cancel_no_lock+0x26>
   29e2e:	bf00      	nop
   29e30:	10004f20 	.word	0x10004f20

00029e34 <ble_gap_disc_cancel>:
{
   29e34:	b510      	push	{r4, lr}
    ble_hs_lock();
   29e36:	f004 f8ab 	bl	2df90 <ble_hs_lock>
    rc = ble_gap_disc_cancel_no_lock();
   29e3a:	f7ff ffdf 	bl	29dfc <ble_gap_disc_cancel_no_lock>
   29e3e:	4604      	mov	r4, r0
    ble_hs_unlock();
   29e40:	f004 f8aa 	bl	2df98 <ble_hs_unlock>
}
   29e44:	4620      	mov	r0, r4
   29e46:	bd10      	pop	{r4, pc}

00029e48 <ble_gap_conn_active>:
    return ble_gap_master.op == BLE_GAP_OP_M_CONN;
   29e48:	4b03      	ldr	r3, [pc, #12]	; (29e58 <ble_gap_conn_active+0x10>)
   29e4a:	7818      	ldrb	r0, [r3, #0]
}
   29e4c:	2802      	cmp	r0, #2
   29e4e:	bf14      	ite	ne
   29e50:	2000      	movne	r0, #0
   29e52:	2001      	moveq	r0, #1
   29e54:	4770      	bx	lr
   29e56:	bf00      	nop
   29e58:	10004fe0 	.word	0x10004fe0

00029e5c <ble_gap_disc_ext_validate>:
{
   29e5c:	b510      	push	{r4, lr}
    if (own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) {
   29e5e:	2803      	cmp	r0, #3
   29e60:	d80e      	bhi.n	29e80 <ble_gap_disc_ext_validate+0x24>
    if (ble_gap_conn_active()) {
   29e62:	f7ff fff1 	bl	29e48 <ble_gap_conn_active>
   29e66:	b968      	cbnz	r0, 29e84 <ble_gap_disc_ext_validate+0x28>
    if (ble_gap_disc_active()) {
   29e68:	f7ff ffbe 	bl	29de8 <ble_gap_disc_active>
   29e6c:	4604      	mov	r4, r0
   29e6e:	b958      	cbnz	r0, 29e88 <ble_gap_disc_ext_validate+0x2c>
    if (!ble_hs_is_enabled()) {
   29e70:	f004 f8c6 	bl	2e000 <ble_hs_is_enabled>
   29e74:	b150      	cbz	r0, 29e8c <ble_gap_disc_ext_validate+0x30>
    if (ble_gap_is_preempted()) {
   29e76:	f7fe fdc1 	bl	289fc <ble_gap_is_preempted>
   29e7a:	b948      	cbnz	r0, 29e90 <ble_gap_disc_ext_validate+0x34>
}
   29e7c:	4620      	mov	r0, r4
   29e7e:	bd10      	pop	{r4, pc}
        return BLE_HS_EINVAL;
   29e80:	2403      	movs	r4, #3
   29e82:	e7fb      	b.n	29e7c <ble_gap_disc_ext_validate+0x20>
        return BLE_HS_EBUSY;
   29e84:	240f      	movs	r4, #15
   29e86:	e7f9      	b.n	29e7c <ble_gap_disc_ext_validate+0x20>
        return BLE_HS_EALREADY;
   29e88:	2402      	movs	r4, #2
   29e8a:	e7f7      	b.n	29e7c <ble_gap_disc_ext_validate+0x20>
        return BLE_HS_EDISABLED;
   29e8c:	241e      	movs	r4, #30
   29e8e:	e7f5      	b.n	29e7c <ble_gap_disc_ext_validate+0x20>
        return BLE_HS_EPREEMPTED;
   29e90:	241d      	movs	r4, #29
   29e92:	e7f3      	b.n	29e7c <ble_gap_disc_ext_validate+0x20>

00029e94 <ble_gap_disc_validate>:
    if (disc_params == NULL) {
   29e94:	b1b1      	cbz	r1, 29ec4 <ble_gap_disc_validate+0x30>
{
   29e96:	b510      	push	{r4, lr}
   29e98:	460a      	mov	r2, r1
    if ((disc_params->itvl < BLE_HCI_SCAN_ITVL_MIN) ||
   29e9a:	8809      	ldrh	r1, [r1, #0]
   29e9c:	1f0b      	subs	r3, r1, #4
   29e9e:	b29b      	uxth	r3, r3
   29ea0:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   29ea4:	42a3      	cmp	r3, r4
   29ea6:	d80f      	bhi.n	29ec8 <ble_gap_disc_validate+0x34>
        (disc_params->window < BLE_HCI_SCAN_WINDOW_MIN) ||
   29ea8:	8853      	ldrh	r3, [r2, #2]
        (disc_params->itvl > BLE_HCI_SCAN_ITVL_MAX) ||
   29eaa:	2b03      	cmp	r3, #3
   29eac:	d90e      	bls.n	29ecc <ble_gap_disc_validate+0x38>
        (disc_params->window < BLE_HCI_SCAN_WINDOW_MIN) ||
   29eae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   29eb2:	d80d      	bhi.n	29ed0 <ble_gap_disc_validate+0x3c>
        (disc_params->window > BLE_HCI_SCAN_WINDOW_MAX) ||
   29eb4:	4299      	cmp	r1, r3
   29eb6:	d30d      	bcc.n	29ed4 <ble_gap_disc_validate+0x40>
    if (disc_params->filter_policy > BLE_HCI_SCAN_FILT_MAX) {
   29eb8:	7913      	ldrb	r3, [r2, #4]
   29eba:	2b03      	cmp	r3, #3
   29ebc:	d80c      	bhi.n	29ed8 <ble_gap_disc_validate+0x44>
    return ble_gap_disc_ext_validate(own_addr_type);
   29ebe:	f7ff ffcd 	bl	29e5c <ble_gap_disc_ext_validate>
}
   29ec2:	bd10      	pop	{r4, pc}
        return BLE_HS_EINVAL;
   29ec4:	2003      	movs	r0, #3
}
   29ec6:	4770      	bx	lr
        return BLE_HS_EINVAL;
   29ec8:	2003      	movs	r0, #3
   29eca:	e7fa      	b.n	29ec2 <ble_gap_disc_validate+0x2e>
   29ecc:	2003      	movs	r0, #3
   29ece:	e7f8      	b.n	29ec2 <ble_gap_disc_validate+0x2e>
   29ed0:	2003      	movs	r0, #3
   29ed2:	e7f6      	b.n	29ec2 <ble_gap_disc_validate+0x2e>
   29ed4:	2003      	movs	r0, #3
   29ed6:	e7f4      	b.n	29ec2 <ble_gap_disc_validate+0x2e>
        return BLE_HS_EINVAL;
   29ed8:	2003      	movs	r0, #3
   29eda:	e7f2      	b.n	29ec2 <ble_gap_disc_validate+0x2e>

00029edc <ble_gap_disc>:
{
   29edc:	b5f0      	push	{r4, r5, r6, r7, lr}
   29ede:	b085      	sub	sp, #20
   29ee0:	4605      	mov	r5, r0
   29ee2:	460c      	mov	r4, r1
   29ee4:	4616      	mov	r6, r2
   29ee6:	461f      	mov	r7, r3
    uint32_t duration_ticks = 0;
   29ee8:	2300      	movs	r3, #0
   29eea:	9301      	str	r3, [sp, #4]
    STATS_INC(ble_gap_stats, discover);
   29eec:	4b3a      	ldr	r3, [pc, #232]	; (29fd8 <ble_gap_disc+0xfc>)
   29eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   29ef0:	3201      	adds	r2, #1
   29ef2:	635a      	str	r2, [r3, #52]	; 0x34
    ble_hs_lock();
   29ef4:	f004 f84c 	bl	2df90 <ble_hs_lock>
    params = *disc_params;
   29ef8:	6830      	ldr	r0, [r6, #0]
   29efa:	9002      	str	r0, [sp, #8]
   29efc:	88b3      	ldrh	r3, [r6, #4]
   29efe:	f8ad 300c 	strh.w	r3, [sp, #12]
    ble_gap_disc_fill_dflts(&params);
   29f02:	a802      	add	r0, sp, #8
   29f04:	f7fe fe1b 	bl	28b3e <ble_gap_disc_fill_dflts>
    rc = ble_gap_disc_validate(own_addr_type, &params);
   29f08:	a902      	add	r1, sp, #8
   29f0a:	4628      	mov	r0, r5
   29f0c:	f7ff ffc2 	bl	29e94 <ble_gap_disc_validate>
    if (rc != 0) {
   29f10:	4606      	mov	r6, r0
   29f12:	2800      	cmp	r0, #0
   29f14:	d135      	bne.n	29f82 <ble_gap_disc+0xa6>
    if (duration_ms == 0) {
   29f16:	2c00      	cmp	r4, #0
   29f18:	d03d      	beq.n	29f96 <ble_gap_disc+0xba>
    if (duration_ms != BLE_HS_FOREVER) {
   29f1a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   29f1e:	429c      	cmp	r4, r3
   29f20:	d006      	beq.n	29f30 <ble_gap_disc+0x54>
   29f22:	a901      	add	r1, sp, #4
   29f24:	4620      	mov	r0, r4
   29f26:	f7f0 fc9a 	bl	1a85e <os_time_ms_to_ticks>
        if (rc != 0) {
   29f2a:	f010 0fff 	tst.w	r0, #255	; 0xff
   29f2e:	d135      	bne.n	29f9c <ble_gap_disc+0xc0>
    if (!params.passive) {
   29f30:	f89d 300d 	ldrb.w	r3, [sp, #13]
   29f34:	f013 0f02 	tst.w	r3, #2
   29f38:	d104      	bne.n	29f44 <ble_gap_disc+0x68>
        rc = ble_hs_id_use_addr(own_addr_type);
   29f3a:	4628      	mov	r0, r5
   29f3c:	f005 ffcb 	bl	2fed6 <ble_hs_id_use_addr>
        if (rc != 0) {
   29f40:	4606      	mov	r6, r0
   29f42:	b9f0      	cbnz	r0, 29f82 <ble_gap_disc+0xa6>
    ble_gap_master.disc.limited = params.limited;
   29f44:	f89d 100d 	ldrb.w	r1, [sp, #13]
   29f48:	4b24      	ldr	r3, [pc, #144]	; (29fdc <ble_gap_disc+0x100>)
   29f4a:	7c5a      	ldrb	r2, [r3, #17]
   29f4c:	f361 0200 	bfi	r2, r1, #0, #1
   29f50:	745a      	strb	r2, [r3, #17]
    ble_gap_master.cb = cb;
   29f52:	609f      	str	r7, [r3, #8]
    ble_gap_master.cb_arg = cb_arg;
   29f54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   29f56:	60da      	str	r2, [r3, #12]
    BLE_HS_LOG(INFO, "GAP procedure initiated: discovery; ");
   29f58:	4a21      	ldr	r2, [pc, #132]	; (29fe0 <ble_gap_disc+0x104>)
   29f5a:	2101      	movs	r1, #1
   29f5c:	2004      	movs	r0, #4
   29f5e:	f7f2 fee5 	bl	1cd2c <modlog_printf>
    ble_gap_log_disc(own_addr_type, duration_ms, &params);
   29f62:	aa02      	add	r2, sp, #8
   29f64:	4621      	mov	r1, r4
   29f66:	4628      	mov	r0, r5
   29f68:	f7ff fb04 	bl	29574 <ble_gap_log_disc>
    BLE_HS_LOG(INFO, "\n");
   29f6c:	4a1d      	ldr	r2, [pc, #116]	; (29fe4 <ble_gap_disc+0x108>)
   29f6e:	2101      	movs	r1, #1
   29f70:	2004      	movs	r0, #4
   29f72:	f7f2 fedb 	bl	1cd2c <modlog_printf>
    rc = ble_gap_disc_tx_params(own_addr_type, &params);
   29f76:	a902      	add	r1, sp, #8
   29f78:	4628      	mov	r0, r5
   29f7a:	f7fe ff93 	bl	28ea4 <ble_gap_disc_tx_params>
    if (rc != 0) {
   29f7e:	4606      	mov	r6, r0
   29f80:	b180      	cbz	r0, 29fa4 <ble_gap_disc+0xc8>
    ble_hs_unlock();
   29f82:	f004 f809 	bl	2df98 <ble_hs_unlock>
    if (rc != 0) {
   29f86:	b11e      	cbz	r6, 29f90 <ble_gap_disc+0xb4>
        STATS_INC(ble_gap_stats, discover_fail);
   29f88:	4a13      	ldr	r2, [pc, #76]	; (29fd8 <ble_gap_disc+0xfc>)
   29f8a:	6b93      	ldr	r3, [r2, #56]	; 0x38
   29f8c:	3301      	adds	r3, #1
   29f8e:	6393      	str	r3, [r2, #56]	; 0x38
}
   29f90:	4630      	mov	r0, r6
   29f92:	b005      	add	sp, #20
   29f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
        duration_ms = BLE_GAP_DISC_DUR_DFLT;
   29f96:	f44f 5420 	mov.w	r4, #10240	; 0x2800
   29f9a:	e7c2      	b.n	29f22 <ble_gap_disc+0x46>
    ble_hs_unlock();
   29f9c:	f003 fffc 	bl	2df98 <ble_hs_unlock>
            rc = BLE_HS_EINVAL;
   29fa0:	2603      	movs	r6, #3
   29fa2:	e7f1      	b.n	29f88 <ble_gap_disc+0xac>
    ble_gap_master.op = BLE_GAP_OP_M_DISC;
   29fa4:	2001      	movs	r0, #1
   29fa6:	4b0d      	ldr	r3, [pc, #52]	; (29fdc <ble_gap_disc+0x100>)
   29fa8:	7018      	strb	r0, [r3, #0]
    rc = ble_gap_disc_enable_tx(1, params.filter_duplicates);
   29faa:	f89d 100d 	ldrb.w	r1, [sp, #13]
   29fae:	f3c1 0180 	ubfx	r1, r1, #2, #1
   29fb2:	f7fe fed4 	bl	28d5e <ble_gap_disc_enable_tx>
    if (rc != 0) {
   29fb6:	4606      	mov	r6, r0
   29fb8:	b930      	cbnz	r0, 29fc8 <ble_gap_disc+0xec>
    if (duration_ms != BLE_HS_FOREVER) {
   29fba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   29fbe:	429c      	cmp	r4, r3
   29fc0:	d105      	bne.n	29fce <ble_gap_disc+0xf2>
    ble_hs_unlock();
   29fc2:	f003 ffe9 	bl	2df98 <ble_hs_unlock>
    if (rc != 0) {
   29fc6:	e7e3      	b.n	29f90 <ble_gap_disc+0xb4>
        ble_gap_master_reset_state();
   29fc8:	f7ff f87e 	bl	290c8 <ble_gap_master_reset_state>
        goto done;
   29fcc:	e7d9      	b.n	29f82 <ble_gap_disc+0xa6>
        ble_gap_master_set_timer(duration_ticks);
   29fce:	9801      	ldr	r0, [sp, #4]
   29fd0:	f7ff fa08 	bl	293e4 <ble_gap_master_set_timer>
   29fd4:	e7f5      	b.n	29fc2 <ble_gap_disc+0xe6>
   29fd6:	bf00      	nop
   29fd8:	10004f20 	.word	0x10004f20
   29fdc:	10004fe0 	.word	0x10004fe0
   29fe0:	00039094 	.word	0x00039094
   29fe4:	00034744 	.word	0x00034744

00029fe8 <ble_gap_connect>:
{
   29fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29fec:	b082      	sub	sp, #8
   29fee:	4680      	mov	r8, r0
   29ff0:	460d      	mov	r5, r1
   29ff2:	4616      	mov	r6, r2
   29ff4:	461f      	mov	r7, r3
    STATS_INC(ble_gap_stats, initiate);
   29ff6:	4b4c      	ldr	r3, [pc, #304]	; (2a128 <ble_gap_connect+0x140>)
   29ff8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   29ffa:	3401      	adds	r4, #1
   29ffc:	63dc      	str	r4, [r3, #60]	; 0x3c
    ble_hs_lock();
   29ffe:	f003 ffc7 	bl	2df90 <ble_hs_lock>
    if (ble_gap_conn_active()) {
   2a002:	f7ff ff21 	bl	29e48 <ble_gap_conn_active>
   2a006:	bb48      	cbnz	r0, 2a05c <ble_gap_connect+0x74>
    if (ble_gap_disc_active()) {
   2a008:	f7ff feee 	bl	29de8 <ble_gap_disc_active>
   2a00c:	bb50      	cbnz	r0, 2a064 <ble_gap_connect+0x7c>
    if (!ble_hs_is_enabled()) {
   2a00e:	f003 fff7 	bl	2e000 <ble_hs_is_enabled>
   2a012:	b390      	cbz	r0, 2a07a <ble_gap_connect+0x92>
    if (ble_gap_is_preempted()) {
   2a014:	f7fe fcf2 	bl	289fc <ble_gap_is_preempted>
   2a018:	bb98      	cbnz	r0, 2a082 <ble_gap_connect+0x9a>
    if (!ble_hs_conn_can_alloc()) {
   2a01a:	f004 ff61 	bl	2eee0 <ble_hs_conn_can_alloc>
   2a01e:	b3a0      	cbz	r0, 2a08a <ble_gap_connect+0xa2>
    if (peer_addr &&
   2a020:	b13d      	cbz	r5, 2a032 <ble_gap_connect+0x4a>
        peer_addr->type != BLE_ADDR_PUBLIC &&
   2a022:	782b      	ldrb	r3, [r5, #0]
    if (peer_addr &&
   2a024:	b12b      	cbz	r3, 2a032 <ble_gap_connect+0x4a>
        peer_addr->type != BLE_ADDR_PUBLIC &&
   2a026:	2b01      	cmp	r3, #1
   2a028:	d003      	beq.n	2a032 <ble_gap_connect+0x4a>
        peer_addr->type != BLE_ADDR_RANDOM &&
   2a02a:	2b02      	cmp	r3, #2
   2a02c:	d001      	beq.n	2a032 <ble_gap_connect+0x4a>
        peer_addr->type != BLE_ADDR_PUBLIC_ID &&
   2a02e:	2b03      	cmp	r3, #3
   2a030:	d12f      	bne.n	2a092 <ble_gap_connect+0xaa>
    if (conn_params == NULL) {
   2a032:	b397      	cbz	r7, 2a09a <ble_gap_connect+0xb2>
    if (duration_ms == 0) {
   2a034:	b39e      	cbz	r6, 2a09e <ble_gap_connect+0xb6>
    if (duration_ms != BLE_HS_FOREVER) {
   2a036:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   2a03a:	429e      	cmp	r6, r3
   2a03c:	d006      	beq.n	2a04c <ble_gap_connect+0x64>
   2a03e:	a901      	add	r1, sp, #4
   2a040:	4630      	mov	r0, r6
   2a042:	f7f0 fc0c 	bl	1a85e <os_time_ms_to_ticks>
        if (rc != 0) {
   2a046:	f010 0fff 	tst.w	r0, #255	; 0xff
   2a04a:	d12b      	bne.n	2a0a4 <ble_gap_connect+0xbc>
    if (ble_hs_conn_find_by_addr(peer_addr) != NULL) {
   2a04c:	4628      	mov	r0, r5
   2a04e:	f005 f8bf 	bl	2f1d0 <ble_hs_conn_find_by_addr>
   2a052:	b358      	cbz	r0, 2a0ac <ble_gap_connect+0xc4>
    ble_hs_unlock();
   2a054:	f003 ffa0 	bl	2df98 <ble_hs_unlock>
        rc = BLE_HS_EDONE;
   2a058:	240e      	movs	r4, #14
   2a05a:	e006      	b.n	2a06a <ble_gap_connect+0x82>
    ble_hs_unlock();
   2a05c:	f003 ff9c 	bl	2df98 <ble_hs_unlock>
        rc = BLE_HS_EALREADY;
   2a060:	2402      	movs	r4, #2
   2a062:	e002      	b.n	2a06a <ble_gap_connect+0x82>
    ble_hs_unlock();
   2a064:	f003 ff98 	bl	2df98 <ble_hs_unlock>
        rc = BLE_HS_EBUSY;
   2a068:	240f      	movs	r4, #15
        STATS_INC(ble_gap_stats, initiate_fail);
   2a06a:	4a2f      	ldr	r2, [pc, #188]	; (2a128 <ble_gap_connect+0x140>)
   2a06c:	6c13      	ldr	r3, [r2, #64]	; 0x40
   2a06e:	3301      	adds	r3, #1
   2a070:	6413      	str	r3, [r2, #64]	; 0x40
}
   2a072:	4620      	mov	r0, r4
   2a074:	b002      	add	sp, #8
   2a076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_unlock();
   2a07a:	f003 ff8d 	bl	2df98 <ble_hs_unlock>
        rc = BLE_HS_EDISABLED;
   2a07e:	241e      	movs	r4, #30
   2a080:	e7f3      	b.n	2a06a <ble_gap_connect+0x82>
    ble_hs_unlock();
   2a082:	f003 ff89 	bl	2df98 <ble_hs_unlock>
        rc = BLE_HS_EPREEMPTED;
   2a086:	241d      	movs	r4, #29
   2a088:	e7ef      	b.n	2a06a <ble_gap_connect+0x82>
    ble_hs_unlock();
   2a08a:	f003 ff85 	bl	2df98 <ble_hs_unlock>
        rc = BLE_HS_ENOMEM;
   2a08e:	2406      	movs	r4, #6
   2a090:	e7eb      	b.n	2a06a <ble_gap_connect+0x82>
    ble_hs_unlock();
   2a092:	f003 ff81 	bl	2df98 <ble_hs_unlock>
        rc = BLE_HS_EINVAL;
   2a096:	2403      	movs	r4, #3
   2a098:	e7e7      	b.n	2a06a <ble_gap_connect+0x82>
        conn_params = &ble_gap_conn_params_dflt;
   2a09a:	4f24      	ldr	r7, [pc, #144]	; (2a12c <ble_gap_connect+0x144>)
   2a09c:	e7ca      	b.n	2a034 <ble_gap_connect+0x4c>
        duration_ms = BLE_GAP_CONN_DUR_DFLT;
   2a09e:	f247 5630 	movw	r6, #30000	; 0x7530
   2a0a2:	e7cc      	b.n	2a03e <ble_gap_connect+0x56>
    ble_hs_unlock();
   2a0a4:	f003 ff78 	bl	2df98 <ble_hs_unlock>
            rc = BLE_HS_EINVAL;
   2a0a8:	2403      	movs	r4, #3
   2a0aa:	e7de      	b.n	2a06a <ble_gap_connect+0x82>
    rc = ble_hs_id_use_addr(own_addr_type);
   2a0ac:	4640      	mov	r0, r8
   2a0ae:	f005 ff12 	bl	2fed6 <ble_hs_id_use_addr>
    if (rc != 0) {
   2a0b2:	4604      	mov	r4, r0
   2a0b4:	b120      	cbz	r0, 2a0c0 <ble_gap_connect+0xd8>
    ble_hs_unlock();
   2a0b6:	f003 ff6f 	bl	2df98 <ble_hs_unlock>
    if (rc != 0) {
   2a0ba:	2c00      	cmp	r4, #0
   2a0bc:	d0d9      	beq.n	2a072 <ble_gap_connect+0x8a>
   2a0be:	e7d4      	b.n	2a06a <ble_gap_connect+0x82>
    BLE_HS_LOG(INFO, "GAP procedure initiated: connect; ");
   2a0c0:	4a1b      	ldr	r2, [pc, #108]	; (2a130 <ble_gap_connect+0x148>)
   2a0c2:	2101      	movs	r1, #1
   2a0c4:	2004      	movs	r0, #4
   2a0c6:	f7f2 fe31 	bl	1cd2c <modlog_printf>
    ble_gap_log_conn(own_addr_type, peer_addr, conn_params);
   2a0ca:	463a      	mov	r2, r7
   2a0cc:	4629      	mov	r1, r5
   2a0ce:	4640      	mov	r0, r8
   2a0d0:	f7ff fa6c 	bl	295ac <ble_gap_log_conn>
    BLE_HS_LOG(INFO, "\n");
   2a0d4:	4a17      	ldr	r2, [pc, #92]	; (2a134 <ble_gap_connect+0x14c>)
   2a0d6:	2101      	movs	r1, #1
   2a0d8:	2004      	movs	r0, #4
   2a0da:	f7f2 fe27 	bl	1cd2c <modlog_printf>
    ble_gap_master.cb = cb;
   2a0de:	4b16      	ldr	r3, [pc, #88]	; (2a138 <ble_gap_connect+0x150>)
   2a0e0:	9a08      	ldr	r2, [sp, #32]
   2a0e2:	609a      	str	r2, [r3, #8]
    ble_gap_master.cb_arg = cb_arg;
   2a0e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2a0e6:	60da      	str	r2, [r3, #12]
    ble_gap_master.conn.using_wl = peer_addr == NULL;
   2a0e8:	fab5 f185 	clz	r1, r5
   2a0ec:	0949      	lsrs	r1, r1, #5
   2a0ee:	7c5a      	ldrb	r2, [r3, #17]
   2a0f0:	f361 0200 	bfi	r2, r1, #0, #1
    ble_gap_master.conn.our_addr_type = own_addr_type;
   2a0f4:	f368 0242 	bfi	r2, r8, #1, #2
   2a0f8:	745a      	strb	r2, [r3, #17]
    ble_gap_master.op = BLE_GAP_OP_M_CONN;
   2a0fa:	2202      	movs	r2, #2
   2a0fc:	701a      	strb	r2, [r3, #0]
    rc = ble_gap_conn_create_tx(own_addr_type, peer_addr,
   2a0fe:	463a      	mov	r2, r7
   2a100:	4629      	mov	r1, r5
   2a102:	4640      	mov	r0, r8
   2a104:	f7fe ff44 	bl	28f90 <ble_gap_conn_create_tx>
    if (rc != 0) {
   2a108:	4604      	mov	r4, r0
   2a10a:	b930      	cbnz	r0, 2a11a <ble_gap_connect+0x132>
    if (duration_ms != BLE_HS_FOREVER) {
   2a10c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   2a110:	429e      	cmp	r6, r3
   2a112:	d105      	bne.n	2a120 <ble_gap_connect+0x138>
    ble_hs_unlock();
   2a114:	f003 ff40 	bl	2df98 <ble_hs_unlock>
    if (rc != 0) {
   2a118:	e7ab      	b.n	2a072 <ble_gap_connect+0x8a>
        ble_gap_master_reset_state();
   2a11a:	f7fe ffd5 	bl	290c8 <ble_gap_master_reset_state>
        goto done;
   2a11e:	e7ca      	b.n	2a0b6 <ble_gap_connect+0xce>
        ble_gap_master_set_timer(duration_ticks);
   2a120:	9801      	ldr	r0, [sp, #4]
   2a122:	f7ff f95f 	bl	293e4 <ble_gap_master_set_timer>
   2a126:	e7f5      	b.n	2a114 <ble_gap_connect+0x12c>
   2a128:	10004f20 	.word	0x10004f20
   2a12c:	00039190 	.word	0x00039190
   2a130:	000390bc 	.word	0x000390bc
   2a134:	00034744 	.word	0x00034744
   2a138:	10004fe0 	.word	0x10004fe0

0002a13c <ble_gap_conn_cancel_no_lock>:
{
   2a13c:	b508      	push	{r3, lr}
    STATS_INC(ble_gap_stats, cancel);
   2a13e:	4a0e      	ldr	r2, [pc, #56]	; (2a178 <ble_gap_conn_cancel_no_lock+0x3c>)
   2a140:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   2a142:	3301      	adds	r3, #1
   2a144:	64d3      	str	r3, [r2, #76]	; 0x4c
    if (!ble_gap_conn_active()) {
   2a146:	f7ff fe7f 	bl	29e48 <ble_gap_conn_active>
   2a14a:	b928      	cbnz	r0, 2a158 <ble_gap_conn_cancel_no_lock+0x1c>
        rc = BLE_HS_EALREADY;
   2a14c:	2002      	movs	r0, #2
        STATS_INC(ble_gap_stats, cancel_fail);
   2a14e:	4a0a      	ldr	r2, [pc, #40]	; (2a178 <ble_gap_conn_cancel_no_lock+0x3c>)
   2a150:	6d13      	ldr	r3, [r2, #80]	; 0x50
   2a152:	3301      	adds	r3, #1
   2a154:	6513      	str	r3, [r2, #80]	; 0x50
}
   2a156:	bd08      	pop	{r3, pc}
    BLE_HS_LOG(INFO, "GAP procedure initiated: cancel connection\n");
   2a158:	4a08      	ldr	r2, [pc, #32]	; (2a17c <ble_gap_conn_cancel_no_lock+0x40>)
   2a15a:	2101      	movs	r1, #1
   2a15c:	2004      	movs	r0, #4
   2a15e:	f7f2 fde5 	bl	1cd2c <modlog_printf>
    rc = ble_gap_conn_cancel_tx();
   2a162:	f7fe fdef 	bl	28d44 <ble_gap_conn_cancel_tx>
    if (rc != 0) {
   2a166:	2800      	cmp	r0, #0
   2a168:	d1f1      	bne.n	2a14e <ble_gap_conn_cancel_no_lock+0x12>
    ble_gap_master.conn.cancel = 1;
   2a16a:	4a05      	ldr	r2, [pc, #20]	; (2a180 <ble_gap_conn_cancel_no_lock+0x44>)
   2a16c:	7c53      	ldrb	r3, [r2, #17]
   2a16e:	f043 0308 	orr.w	r3, r3, #8
   2a172:	7453      	strb	r3, [r2, #17]
    if (rc != 0) {
   2a174:	e7ef      	b.n	2a156 <ble_gap_conn_cancel_no_lock+0x1a>
   2a176:	bf00      	nop
   2a178:	10004f20 	.word	0x10004f20
   2a17c:	000390e0 	.word	0x000390e0
   2a180:	10004fe0 	.word	0x10004fe0

0002a184 <ble_gap_terminate_with_conn>:
    if (conn->bhc_flags & BLE_HS_CONN_F_TERMINATING) {
   2a184:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   2a188:	f013 0f02 	tst.w	r3, #2
   2a18c:	d120      	bne.n	2a1d0 <ble_gap_terminate_with_conn+0x4c>
{
   2a18e:	b530      	push	{r4, r5, lr}
   2a190:	b085      	sub	sp, #20
   2a192:	4604      	mov	r4, r0
   2a194:	460d      	mov	r5, r1
    BLE_HS_LOG(INFO, "GAP procedure initiated: terminate connection; "
   2a196:	9100      	str	r1, [sp, #0]
   2a198:	8883      	ldrh	r3, [r0, #4]
   2a19a:	4a0e      	ldr	r2, [pc, #56]	; (2a1d4 <ble_gap_terminate_with_conn+0x50>)
   2a19c:	2101      	movs	r1, #1
   2a19e:	2004      	movs	r0, #4
   2a1a0:	f7f2 fdc4 	bl	1cd2c <modlog_printf>
    cmd.conn_handle = htole16(conn->bhc_handle);
   2a1a4:	88a3      	ldrh	r3, [r4, #4]
   2a1a6:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.reason = hci_reason;
   2a1aa:	f88d 500e 	strb.w	r5, [sp, #14]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LINK_CTRL,
   2a1ae:	2300      	movs	r3, #0
   2a1b0:	9300      	str	r3, [sp, #0]
   2a1b2:	2203      	movs	r2, #3
   2a1b4:	a903      	add	r1, sp, #12
   2a1b6:	f240 4006 	movw	r0, #1030	; 0x406
   2a1ba:	f005 f9bd 	bl	2f538 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   2a1be:	b928      	cbnz	r0, 2a1cc <ble_gap_terminate_with_conn+0x48>
    conn->bhc_flags |= BLE_HS_CONN_F_TERMINATING;
   2a1c0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   2a1c4:	f043 0302 	orr.w	r3, r3, #2
   2a1c8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   2a1cc:	b005      	add	sp, #20
   2a1ce:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EALREADY;
   2a1d0:	2002      	movs	r0, #2
}
   2a1d2:	4770      	bx	lr
   2a1d4:	0003910c 	.word	0x0003910c

0002a1d8 <ble_gap_terminate>:
{
   2a1d8:	b538      	push	{r3, r4, r5, lr}
   2a1da:	4604      	mov	r4, r0
   2a1dc:	460d      	mov	r5, r1
    STATS_INC(ble_gap_stats, terminate);
   2a1de:	4a0d      	ldr	r2, [pc, #52]	; (2a214 <ble_gap_terminate+0x3c>)
   2a1e0:	6c53      	ldr	r3, [r2, #68]	; 0x44
   2a1e2:	3301      	adds	r3, #1
   2a1e4:	6453      	str	r3, [r2, #68]	; 0x44
    ble_hs_lock();
   2a1e6:	f003 fed3 	bl	2df90 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   2a1ea:	4620      	mov	r0, r4
   2a1ec:	f004 ff54 	bl	2f098 <ble_hs_conn_find>
    if (conn == NULL) {
   2a1f0:	b160      	cbz	r0, 2a20c <ble_gap_terminate+0x34>
    rc = ble_gap_terminate_with_conn(conn, hci_reason);
   2a1f2:	4629      	mov	r1, r5
   2a1f4:	f7ff ffc6 	bl	2a184 <ble_gap_terminate_with_conn>
   2a1f8:	4604      	mov	r4, r0
    ble_hs_unlock();
   2a1fa:	f003 fecd 	bl	2df98 <ble_hs_unlock>
    if (rc != 0) {
   2a1fe:	b11c      	cbz	r4, 2a208 <ble_gap_terminate+0x30>
        STATS_INC(ble_gap_stats, terminate_fail);
   2a200:	4a04      	ldr	r2, [pc, #16]	; (2a214 <ble_gap_terminate+0x3c>)
   2a202:	6c93      	ldr	r3, [r2, #72]	; 0x48
   2a204:	3301      	adds	r3, #1
   2a206:	6493      	str	r3, [r2, #72]	; 0x48
}
   2a208:	4620      	mov	r0, r4
   2a20a:	bd38      	pop	{r3, r4, r5, pc}
    ble_hs_unlock();
   2a20c:	f003 fec4 	bl	2df98 <ble_hs_unlock>
        rc = BLE_HS_ENOTCONN;
   2a210:	2407      	movs	r4, #7
   2a212:	e7f5      	b.n	2a200 <ble_gap_terminate+0x28>
   2a214:	10004f20 	.word	0x10004f20

0002a218 <ble_gap_update_notify>:
{
   2a218:	b530      	push	{r4, r5, lr}
   2a21a:	b08f      	sub	sp, #60	; 0x3c
   2a21c:	4604      	mov	r4, r0
   2a21e:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   2a220:	2234      	movs	r2, #52	; 0x34
   2a222:	2100      	movs	r1, #0
   2a224:	a801      	add	r0, sp, #4
   2a226:	f7f0 fd38 	bl	1ac9a <memset>
    event.type = BLE_GAP_EVENT_CONN_UPDATE;
   2a22a:	2303      	movs	r3, #3
   2a22c:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update.conn_handle = conn_handle;
   2a230:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.conn_update.status = status;
   2a234:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
   2a236:	a801      	add	r0, sp, #4
   2a238:	f7fe fcce 	bl	28bd8 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   2a23c:	4621      	mov	r1, r4
   2a23e:	a801      	add	r0, sp, #4
   2a240:	f7fe fcf4 	bl	28c2c <ble_gap_call_conn_event_cb>
    if (status == BLE_HS_ETIMEOUT) {
   2a244:	2d0d      	cmp	r5, #13
   2a246:	d001      	beq.n	2a24c <ble_gap_update_notify+0x34>
}
   2a248:	b00f      	add	sp, #60	; 0x3c
   2a24a:	bd30      	pop	{r4, r5, pc}
        ble_gap_terminate(conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   2a24c:	2113      	movs	r1, #19
   2a24e:	4620      	mov	r0, r4
   2a250:	f7ff ffc2 	bl	2a1d8 <ble_gap_terminate>
}
   2a254:	e7f8      	b.n	2a248 <ble_gap_update_notify+0x30>
	...

0002a258 <ble_gap_conn_broken>:
{
   2a258:	b570      	push	{r4, r5, r6, lr}
   2a25a:	b090      	sub	sp, #64	; 0x40
   2a25c:	4604      	mov	r4, r0
   2a25e:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   2a260:	2234      	movs	r2, #52	; 0x34
   2a262:	2100      	movs	r1, #0
   2a264:	4668      	mov	r0, sp
   2a266:	f7f0 fd18 	bl	1ac9a <memset>
    snap.desc = &event.disconnect.conn;
   2a26a:	ab02      	add	r3, sp, #8
   2a26c:	930d      	str	r3, [sp, #52]	; 0x34
    rc = ble_gap_find_snapshot(conn_handle, &snap);
   2a26e:	a90d      	add	r1, sp, #52	; 0x34
   2a270:	4620      	mov	r0, r4
   2a272:	f7fe fd44 	bl	28cfe <ble_gap_find_snapshot>
    if (rc != 0) {
   2a276:	b108      	cbz	r0, 2a27c <ble_gap_conn_broken+0x24>
}
   2a278:	b010      	add	sp, #64	; 0x40
   2a27a:	bd70      	pop	{r4, r5, r6, pc}
    ble_hs_lock();
   2a27c:	f003 fe88 	bl	2df90 <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   2a280:	4620      	mov	r0, r4
   2a282:	f7fe fec7 	bl	29014 <ble_gap_update_entry_remove>
   2a286:	4606      	mov	r6, r0
    ble_hs_unlock();
   2a288:	f003 fe86 	bl	2df98 <ble_hs_unlock>
    if (entry != NULL) {
   2a28c:	b136      	cbz	r6, 2a29c <ble_gap_conn_broken+0x44>
        ble_gap_update_notify(conn_handle, reason);
   2a28e:	4629      	mov	r1, r5
   2a290:	4620      	mov	r0, r4
   2a292:	f7ff ffc1 	bl	2a218 <ble_gap_update_notify>
        ble_gap_update_entry_free(entry);
   2a296:	4630      	mov	r0, r6
   2a298:	f7fe ffdc 	bl	29254 <ble_gap_update_entry_free>
    ble_l2cap_sig_conn_broken(conn_handle, reason);
   2a29c:	4629      	mov	r1, r5
   2a29e:	4620      	mov	r0, r4
   2a2a0:	f006 fdb0 	bl	30e04 <ble_l2cap_sig_conn_broken>
    ble_gatts_connection_broken(conn_handle);
   2a2a4:	4620      	mov	r0, r4
   2a2a6:	f003 f98d 	bl	2d5c4 <ble_gatts_connection_broken>
    ble_gattc_connection_broken(conn_handle);
   2a2aa:	4620      	mov	r0, r4
   2a2ac:	f002 fba7 	bl	2c9fe <ble_gattc_connection_broken>
    ble_hs_flow_connection_broken(conn_handle);;
   2a2b0:	4620      	mov	r0, r4
   2a2b2:	f005 f825 	bl	2f300 <ble_hs_flow_connection_broken>
    ble_hs_atomic_conn_delete(conn_handle);
   2a2b6:	4620      	mov	r0, r4
   2a2b8:	f004 fdd8 	bl	2ee6c <ble_hs_atomic_conn_delete>
    event.type = BLE_GAP_EVENT_DISCONNECT;
   2a2bc:	2301      	movs	r3, #1
   2a2be:	f88d 3000 	strb.w	r3, [sp]
    event.disconnect.reason = reason;
   2a2c2:	9501      	str	r5, [sp, #4]
    ble_gap_event_listener_call(&event);
   2a2c4:	4668      	mov	r0, sp
   2a2c6:	f7fe fc87 	bl	28bd8 <ble_gap_event_listener_call>
    ble_gap_call_event_cb(&event, snap.cb, snap.cb_arg);
   2a2ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2a2cc:	990e      	ldr	r1, [sp, #56]	; 0x38
   2a2ce:	4668      	mov	r0, sp
   2a2d0:	f7fe fb7f 	bl	289d2 <ble_gap_call_event_cb>
    STATS_INC(ble_gap_stats, disconnect);
   2a2d4:	4a02      	ldr	r2, [pc, #8]	; (2a2e0 <ble_gap_conn_broken+0x88>)
   2a2d6:	6e53      	ldr	r3, [r2, #100]	; 0x64
   2a2d8:	3301      	adds	r3, #1
   2a2da:	6653      	str	r3, [r2, #100]	; 0x64
   2a2dc:	e7cc      	b.n	2a278 <ble_gap_conn_broken+0x20>
   2a2de:	bf00      	nop
   2a2e0:	10004f20 	.word	0x10004f20

0002a2e4 <ble_gap_rx_disconn_complete>:
{
   2a2e4:	b570      	push	{r4, r5, r6, lr}
   2a2e6:	b08e      	sub	sp, #56	; 0x38
   2a2e8:	4604      	mov	r4, r0
    uint16_t handle = le16toh(ev->conn_handle);
   2a2ea:	f8b0 5001 	ldrh.w	r5, [r0, #1]
   2a2ee:	b2ae      	uxth	r6, r5
    STATS_INC(ble_gap_stats, rx_disconnect);
   2a2f0:	4a14      	ldr	r2, [pc, #80]	; (2a344 <ble_gap_rx_disconn_complete+0x60>)
   2a2f2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   2a2f4:	3301      	adds	r3, #1
   2a2f6:	6693      	str	r3, [r2, #104]	; 0x68
    if (ev->status == 0) {
   2a2f8:	7803      	ldrb	r3, [r0, #0]
   2a2fa:	b953      	cbnz	r3, 2a312 <ble_gap_rx_disconn_complete+0x2e>
        ble_gap_conn_broken(handle, BLE_HS_HCI_ERR(ev->reason));
   2a2fc:	78c1      	ldrb	r1, [r0, #3]
   2a2fe:	b111      	cbz	r1, 2a306 <ble_gap_rx_disconn_complete+0x22>
   2a300:	f501 7100 	add.w	r1, r1, #512	; 0x200
   2a304:	e000      	b.n	2a308 <ble_gap_rx_disconn_complete+0x24>
   2a306:	2100      	movs	r1, #0
   2a308:	4630      	mov	r0, r6
   2a30a:	f7ff ffa5 	bl	2a258 <ble_gap_conn_broken>
}
   2a30e:	b00e      	add	sp, #56	; 0x38
   2a310:	bd70      	pop	{r4, r5, r6, pc}
        memset(&event, 0, sizeof event);
   2a312:	2234      	movs	r2, #52	; 0x34
   2a314:	2100      	movs	r1, #0
   2a316:	a801      	add	r0, sp, #4
   2a318:	f7f0 fcbf 	bl	1ac9a <memset>
        event.type = BLE_GAP_EVENT_TERM_FAILURE;
   2a31c:	2306      	movs	r3, #6
   2a31e:	f88d 3004 	strb.w	r3, [sp, #4]
        event.term_failure.conn_handle = handle;
   2a322:	f8ad 500c 	strh.w	r5, [sp, #12]
        event.term_failure.status = BLE_HS_HCI_ERR(ev->status);
   2a326:	7823      	ldrb	r3, [r4, #0]
   2a328:	b153      	cbz	r3, 2a340 <ble_gap_rx_disconn_complete+0x5c>
   2a32a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   2a32e:	9302      	str	r3, [sp, #8]
        ble_gap_event_listener_call(&event);
   2a330:	a801      	add	r0, sp, #4
   2a332:	f7fe fc51 	bl	28bd8 <ble_gap_event_listener_call>
        ble_gap_call_conn_event_cb(&event, handle);
   2a336:	4631      	mov	r1, r6
   2a338:	a801      	add	r0, sp, #4
   2a33a:	f7fe fc77 	bl	28c2c <ble_gap_call_conn_event_cb>
}
   2a33e:	e7e6      	b.n	2a30e <ble_gap_rx_disconn_complete+0x2a>
        event.term_failure.status = BLE_HS_HCI_ERR(ev->status);
   2a340:	2300      	movs	r3, #0
   2a342:	e7f4      	b.n	2a32e <ble_gap_rx_disconn_complete+0x4a>
   2a344:	10004f20 	.word	0x10004f20

0002a348 <ble_gap_reset_state>:
{
   2a348:	b510      	push	{r4, lr}
   2a34a:	4604      	mov	r4, r0
        conn_handle = ble_hs_atomic_first_conn_handle();
   2a34c:	f004 fdb9 	bl	2eec2 <ble_hs_atomic_first_conn_handle>
        if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   2a350:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2a354:	4298      	cmp	r0, r3
   2a356:	d003      	beq.n	2a360 <ble_gap_reset_state+0x18>
        ble_gap_conn_broken(conn_handle, reason);
   2a358:	4621      	mov	r1, r4
   2a35a:	f7ff ff7d 	bl	2a258 <ble_gap_conn_broken>
        conn_handle = ble_hs_atomic_first_conn_handle();
   2a35e:	e7f5      	b.n	2a34c <ble_gap_reset_state+0x4>
    if (ble_gap_adv_active_instance(0)) {
   2a360:	2000      	movs	r0, #0
   2a362:	f7fe fb73 	bl	28a4c <ble_gap_adv_active_instance>
   2a366:	b918      	cbnz	r0, 2a370 <ble_gap_reset_state+0x28>
    ble_gap_master_failed(reason);
   2a368:	4620      	mov	r0, r4
   2a36a:	f7fe ff57 	bl	2921c <ble_gap_master_failed>
}
   2a36e:	bd10      	pop	{r4, pc}
        ble_gap_adv_finished(0, reason, 0, 0);
   2a370:	2300      	movs	r3, #0
   2a372:	461a      	mov	r2, r3
   2a374:	4621      	mov	r1, r4
   2a376:	4618      	mov	r0, r3
   2a378:	f7fe fe8a 	bl	29090 <ble_gap_adv_finished>
   2a37c:	e7f4      	b.n	2a368 <ble_gap_reset_state+0x20>
	...

0002a380 <ble_gap_rx_update_complete>:
{
   2a380:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a382:	b091      	sub	sp, #68	; 0x44
   2a384:	4604      	mov	r4, r0
    STATS_INC(ble_gap_stats, rx_update_complete);
   2a386:	4a2c      	ldr	r2, [pc, #176]	; (2a438 <ble_gap_rx_update_complete+0xb8>)
   2a388:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   2a38a:	3301      	adds	r3, #1
   2a38c:	66d3      	str	r3, [r2, #108]	; 0x6c
    memset(&event, 0, sizeof event);
   2a38e:	2234      	movs	r2, #52	; 0x34
   2a390:	2100      	movs	r1, #0
   2a392:	a801      	add	r0, sp, #4
   2a394:	f7f0 fc81 	bl	1ac9a <memset>
    memset(&l2cap_params, 0, sizeof l2cap_params);
   2a398:	2300      	movs	r3, #0
   2a39a:	930e      	str	r3, [sp, #56]	; 0x38
   2a39c:	930f      	str	r3, [sp, #60]	; 0x3c
    ble_hs_lock();
   2a39e:	f003 fdf7 	bl	2df90 <ble_hs_lock>
    conn_handle = le16toh(ev->conn_handle);
   2a3a2:	8865      	ldrh	r5, [r4, #2]
    conn = ble_hs_conn_find(conn_handle);
   2a3a4:	4628      	mov	r0, r5
   2a3a6:	f004 fe77 	bl	2f098 <ble_hs_conn_find>
    if (conn != NULL) {
   2a3aa:	b120      	cbz	r0, 2a3b6 <ble_gap_rx_update_complete+0x36>
   2a3ac:	4606      	mov	r6, r0
        switch (ev->status) {
   2a3ae:	7863      	ldrb	r3, [r4, #1]
   2a3b0:	b193      	cbz	r3, 2a3d8 <ble_gap_rx_update_complete+0x58>
   2a3b2:	2b1a      	cmp	r3, #26
   2a3b4:	d017      	beq.n	2a3e6 <ble_gap_rx_update_complete+0x66>
    if (l2cap_params.itvl_min == 0) {
   2a3b6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   2a3ba:	b353      	cbz	r3, 2a412 <ble_gap_rx_update_complete+0x92>
    ble_hs_unlock();
   2a3bc:	f003 fdec 	bl	2df98 <ble_hs_unlock>
    if (l2cap_params.itvl_min != 0) {
   2a3c0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   2a3c4:	bb5b      	cbnz	r3, 2a41e <ble_gap_rx_update_complete+0x9e>
        cb_status = BLE_HS_HCI_ERR(ev->status);
   2a3c6:	7861      	ldrb	r1, [r4, #1]
   2a3c8:	b399      	cbz	r1, 2a432 <ble_gap_rx_update_complete+0xb2>
   2a3ca:	f501 7100 	add.w	r1, r1, #512	; 0x200
        ble_gap_update_notify(conn_handle, cb_status);
   2a3ce:	4628      	mov	r0, r5
   2a3d0:	f7ff ff22 	bl	2a218 <ble_gap_update_notify>
}
   2a3d4:	b011      	add	sp, #68	; 0x44
   2a3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            conn->bhc_itvl = le16toh(ev->conn_itvl);
   2a3d8:	88a3      	ldrh	r3, [r4, #4]
   2a3da:	8383      	strh	r3, [r0, #28]
            conn->bhc_latency = le16toh(ev->conn_latency);
   2a3dc:	88e3      	ldrh	r3, [r4, #6]
   2a3de:	83c3      	strh	r3, [r0, #30]
            conn->bhc_supervision_timeout = le16toh(ev->supervision_timeout);
   2a3e0:	8923      	ldrh	r3, [r4, #8]
   2a3e2:	8403      	strh	r3, [r0, #32]
            break;
   2a3e4:	e7e7      	b.n	2a3b6 <ble_gap_rx_update_complete+0x36>
            entry = ble_gap_update_entry_find(conn_handle, NULL);
   2a3e6:	2100      	movs	r1, #0
   2a3e8:	4628      	mov	r0, r5
   2a3ea:	f7fe fbbf 	bl	28b6c <ble_gap_update_entry_find>
            if (entry != NULL && !(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
   2a3ee:	4607      	mov	r7, r0
   2a3f0:	2800      	cmp	r0, #0
   2a3f2:	d0e0      	beq.n	2a3b6 <ble_gap_rx_update_complete+0x36>
   2a3f4:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
   2a3f8:	f013 0f01 	tst.w	r3, #1
   2a3fc:	d1db      	bne.n	2a3b6 <ble_gap_rx_update_complete+0x36>
                ble_gap_update_to_l2cap(&entry->params, &l2cap_params);
   2a3fe:	a90e      	add	r1, sp, #56	; 0x38
   2a400:	3004      	adds	r0, #4
   2a402:	f7fe fb19 	bl	28a38 <ble_gap_update_to_l2cap>
    return os_time_get();
   2a406:	f7f0 f91f 	bl	1a648 <os_time_get>
                entry->exp_os_ticks = ble_npl_time_get() +
   2a40a:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
   2a40e:	6138      	str	r0, [r7, #16]
   2a410:	e7d1      	b.n	2a3b6 <ble_gap_rx_update_complete+0x36>
        entry = ble_gap_update_entry_remove(conn_handle);
   2a412:	4628      	mov	r0, r5
   2a414:	f7fe fdfe 	bl	29014 <ble_gap_update_entry_remove>
        ble_gap_update_entry_free(entry);
   2a418:	f7fe ff1c 	bl	29254 <ble_gap_update_entry_free>
   2a41c:	e7ce      	b.n	2a3bc <ble_gap_rx_update_complete+0x3c>
        rc = ble_l2cap_sig_update(conn_handle, &l2cap_params,
   2a41e:	2300      	movs	r3, #0
   2a420:	4a06      	ldr	r2, [pc, #24]	; (2a43c <ble_gap_rx_update_complete+0xbc>)
   2a422:	a90e      	add	r1, sp, #56	; 0x38
   2a424:	4628      	mov	r0, r5
   2a426:	f006 fc81 	bl	30d2c <ble_l2cap_sig_update>
        if (rc == 0) {
   2a42a:	4601      	mov	r1, r0
   2a42c:	2800      	cmp	r0, #0
   2a42e:	d0d1      	beq.n	2a3d4 <ble_gap_rx_update_complete+0x54>
   2a430:	e7cd      	b.n	2a3ce <ble_gap_rx_update_complete+0x4e>
        cb_status = BLE_HS_HCI_ERR(ev->status);
   2a432:	2100      	movs	r1, #0
   2a434:	e7cb      	b.n	2a3ce <ble_gap_rx_update_complete+0x4e>
   2a436:	bf00      	nop
   2a438:	10004f20 	.word	0x10004f20
   2a43c:	0002a441 	.word	0x0002a441

0002a440 <ble_gap_update_l2cap_cb>:
{
   2a440:	b570      	push	{r4, r5, r6, lr}
   2a442:	4605      	mov	r5, r0
   2a444:	460e      	mov	r6, r1
    ble_hs_lock();
   2a446:	f003 fda3 	bl	2df90 <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   2a44a:	4628      	mov	r0, r5
   2a44c:	f7fe fde2 	bl	29014 <ble_gap_update_entry_remove>
   2a450:	4604      	mov	r4, r0
    ble_hs_unlock();
   2a452:	f003 fda1 	bl	2df98 <ble_hs_unlock>
    if (entry != NULL) {
   2a456:	b11c      	cbz	r4, 2a460 <ble_gap_update_l2cap_cb+0x20>
        ble_gap_update_entry_free(entry);
   2a458:	4620      	mov	r0, r4
   2a45a:	f7fe fefb 	bl	29254 <ble_gap_update_entry_free>
        if (status != 0) {
   2a45e:	b906      	cbnz	r6, 2a462 <ble_gap_update_l2cap_cb+0x22>
}
   2a460:	bd70      	pop	{r4, r5, r6, pc}
            ble_gap_update_notify(conn_handle, status);
   2a462:	4631      	mov	r1, r6
   2a464:	4628      	mov	r0, r5
   2a466:	f7ff fed7 	bl	2a218 <ble_gap_update_notify>
}
   2a46a:	e7f9      	b.n	2a460 <ble_gap_update_l2cap_cb+0x20>

0002a46c <ble_gap_update_failed>:
{
   2a46c:	b570      	push	{r4, r5, r6, lr}
   2a46e:	4604      	mov	r4, r0
   2a470:	460d      	mov	r5, r1
    STATS_INC(ble_gap_stats, update_fail);
   2a472:	4a0a      	ldr	r2, [pc, #40]	; (2a49c <ble_gap_update_failed+0x30>)
   2a474:	6d93      	ldr	r3, [r2, #88]	; 0x58
   2a476:	3301      	adds	r3, #1
   2a478:	6593      	str	r3, [r2, #88]	; 0x58
    ble_hs_lock();
   2a47a:	f003 fd89 	bl	2df90 <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   2a47e:	4620      	mov	r0, r4
   2a480:	f7fe fdc8 	bl	29014 <ble_gap_update_entry_remove>
   2a484:	4606      	mov	r6, r0
    ble_hs_unlock();
   2a486:	f003 fd87 	bl	2df98 <ble_hs_unlock>
    ble_gap_update_entry_free(entry);
   2a48a:	4630      	mov	r0, r6
   2a48c:	f7fe fee2 	bl	29254 <ble_gap_update_entry_free>
    ble_gap_update_notify(conn_handle, status);
   2a490:	4629      	mov	r1, r5
   2a492:	4620      	mov	r0, r4
   2a494:	f7ff fec0 	bl	2a218 <ble_gap_update_notify>
}
   2a498:	bd70      	pop	{r4, r5, r6, pc}
   2a49a:	bf00      	nop
   2a49c:	10004f20 	.word	0x10004f20

0002a4a0 <ble_gap_conn_cancel>:
{
   2a4a0:	b510      	push	{r4, lr}
    ble_hs_lock();
   2a4a2:	f003 fd75 	bl	2df90 <ble_hs_lock>
    rc = ble_gap_conn_cancel_no_lock();
   2a4a6:	f7ff fe49 	bl	2a13c <ble_gap_conn_cancel_no_lock>
   2a4aa:	4604      	mov	r4, r0
    ble_hs_unlock();
   2a4ac:	f003 fd74 	bl	2df98 <ble_hs_unlock>
}
   2a4b0:	4620      	mov	r0, r4
   2a4b2:	bd10      	pop	{r4, pc}

0002a4b4 <ble_gap_rx_param_req>:
{
   2a4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a4b8:	b094      	sub	sp, #80	; 0x50
   2a4ba:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   2a4bc:	f04f 0834 	mov.w	r8, #52	; 0x34
   2a4c0:	4642      	mov	r2, r8
   2a4c2:	2100      	movs	r1, #0
   2a4c4:	a801      	add	r0, sp, #4
   2a4c6:	f7f0 fbe8 	bl	1ac9a <memset>
    peer_params.itvl_min = le16toh(ev->min_interval);
   2a4ca:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   2a4ce:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    peer_params.itvl_max = le16toh(ev->max_interval);
   2a4d2:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   2a4d6:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    peer_params.latency = le16toh(ev->latency);
   2a4da:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   2a4de:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
    peer_params.supervision_timeout = le16toh(ev->timeout);
   2a4e2:	f8b4 3009 	ldrh.w	r3, [r4, #9]
   2a4e6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    peer_params.min_ce_len = 0;
   2a4ea:	2300      	movs	r3, #0
   2a4ec:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    peer_params.max_ce_len = 0;
   2a4f0:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    self_params = peer_params;
   2a4f4:	ae0e      	add	r6, sp, #56	; 0x38
   2a4f6:	ad11      	add	r5, sp, #68	; 0x44
   2a4f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   2a4fc:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    conn_handle = le16toh(ev->conn_handle);
   2a500:	f8b4 7001 	ldrh.w	r7, [r4, #1]
   2a504:	b2bc      	uxth	r4, r7
    memset(&event, 0, sizeof event);
   2a506:	4642      	mov	r2, r8
   2a508:	4619      	mov	r1, r3
   2a50a:	a801      	add	r0, sp, #4
   2a50c:	f7f0 fbc5 	bl	1ac9a <memset>
    event.type = BLE_GAP_EVENT_CONN_UPDATE_REQ;
   2a510:	2304      	movs	r3, #4
   2a512:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update_req.conn_handle = conn_handle;
   2a516:	f8ad 7010 	strh.w	r7, [sp, #16]
    event.conn_update_req.self_params = &self_params;
   2a51a:	9603      	str	r6, [sp, #12]
    event.conn_update_req.peer_params = &peer_params;
   2a51c:	9502      	str	r5, [sp, #8]
    rc = ble_gap_call_conn_event_cb(&event, conn_handle);
   2a51e:	4621      	mov	r1, r4
   2a520:	eb0d 0003 	add.w	r0, sp, r3
   2a524:	f7fe fb82 	bl	28c2c <ble_gap_call_conn_event_cb>
    if (rc == 0) {
   2a528:	b948      	cbnz	r0, 2a53e <ble_gap_rx_param_req+0x8a>
        rc = ble_gap_tx_param_pos_reply(conn_handle, &self_params);
   2a52a:	a90e      	add	r1, sp, #56	; 0x38
   2a52c:	4620      	mov	r0, r4
   2a52e:	f7fe fcdc 	bl	28eea <ble_gap_tx_param_pos_reply>
        if (rc != 0) {
   2a532:	4601      	mov	r1, r0
   2a534:	b138      	cbz	r0, 2a546 <ble_gap_rx_param_req+0x92>
            ble_gap_update_failed(conn_handle, rc);
   2a536:	4620      	mov	r0, r4
   2a538:	f7ff ff98 	bl	2a46c <ble_gap_update_failed>
   2a53c:	e003      	b.n	2a546 <ble_gap_rx_param_req+0x92>
        ble_gap_tx_param_neg_reply(conn_handle, rc);
   2a53e:	b2c1      	uxtb	r1, r0
   2a540:	4620      	mov	r0, r4
   2a542:	f7fe fcf3 	bl	28f2c <ble_gap_tx_param_neg_reply>
}
   2a546:	b014      	add	sp, #80	; 0x50
   2a548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a54c <ble_gap_update_params>:
{
   2a54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a550:	b082      	sub	sp, #8
   2a552:	4607      	mov	r7, r0
   2a554:	460c      	mov	r4, r1
    if (!ble_gap_validate_conn_params(params)) {
   2a556:	4608      	mov	r0, r1
   2a558:	f7fe fb1a 	bl	28b90 <ble_gap_validate_conn_params>
   2a55c:	2800      	cmp	r0, #0
   2a55e:	d07e      	beq.n	2a65e <ble_gap_update_params+0x112>
    STATS_INC(ble_gap_stats, update);
   2a560:	4a40      	ldr	r2, [pc, #256]	; (2a664 <ble_gap_update_params+0x118>)
   2a562:	6d53      	ldr	r3, [r2, #84]	; 0x54
   2a564:	3301      	adds	r3, #1
   2a566:	6553      	str	r3, [r2, #84]	; 0x54
    memset(&l2cap_params, 0, sizeof l2cap_params);
   2a568:	2300      	movs	r3, #0
   2a56a:	9300      	str	r3, [sp, #0]
   2a56c:	9301      	str	r3, [sp, #4]
    ble_hs_lock();
   2a56e:	f003 fd0f 	bl	2df90 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   2a572:	4638      	mov	r0, r7
   2a574:	f004 fd90 	bl	2f098 <ble_hs_conn_find>
    if (conn == NULL) {
   2a578:	4606      	mov	r6, r0
   2a57a:	2800      	cmp	r0, #0
   2a57c:	d04d      	beq.n	2a61a <ble_gap_update_params+0xce>
    dup = ble_gap_update_entry_find(conn_handle, NULL);
   2a57e:	2100      	movs	r1, #0
   2a580:	4638      	mov	r0, r7
   2a582:	f7fe faf3 	bl	28b6c <ble_gap_update_entry_find>
    if (dup != NULL) {
   2a586:	b1c0      	cbz	r0, 2a5ba <ble_gap_update_params+0x6e>
        rc = BLE_HS_EALREADY;
   2a588:	2502      	movs	r5, #2
    l2cap_update = 0;
   2a58a:	f04f 0800 	mov.w	r8, #0
    entry = NULL;
   2a58e:	4646      	mov	r6, r8
    ble_hs_unlock();
   2a590:	f003 fd02 	bl	2df98 <ble_hs_unlock>
    if (!l2cap_update) {
   2a594:	f1b8 0f00 	cmp.w	r8, #0
   2a598:	d14d      	bne.n	2a636 <ble_gap_update_params+0xea>
        ble_hs_timer_resched();
   2a59a:	f003 fdeb 	bl	2e174 <ble_hs_timer_resched>
    ble_hs_lock();
   2a59e:	f003 fcf7 	bl	2df90 <ble_hs_lock>
    if (rc == 0) {
   2a5a2:	2d00      	cmp	r5, #0
   2a5a4:	d153      	bne.n	2a64e <ble_gap_update_params+0x102>
        SLIST_INSERT_HEAD(&ble_gap_update_entries, entry, next);
   2a5a6:	4b30      	ldr	r3, [pc, #192]	; (2a668 <ble_gap_update_params+0x11c>)
   2a5a8:	681a      	ldr	r2, [r3, #0]
   2a5aa:	6032      	str	r2, [r6, #0]
   2a5ac:	601e      	str	r6, [r3, #0]
    ble_hs_unlock();
   2a5ae:	f003 fcf3 	bl	2df98 <ble_hs_unlock>
}
   2a5b2:	4628      	mov	r0, r5
   2a5b4:	b002      	add	sp, #8
   2a5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    entry = ble_gap_update_entry_alloc();
   2a5ba:	f7ff f88d 	bl	296d8 <ble_gap_update_entry_alloc>
    if (entry == NULL) {
   2a5be:	4680      	mov	r8, r0
   2a5c0:	b378      	cbz	r0, 2a622 <ble_gap_update_params+0xd6>
    entry->conn_handle = conn_handle;
   2a5c2:	8287      	strh	r7, [r0, #20]
    entry->params = *params;
   2a5c4:	1d03      	adds	r3, r0, #4
   2a5c6:	6820      	ldr	r0, [r4, #0]
   2a5c8:	6861      	ldr	r1, [r4, #4]
   2a5ca:	68a2      	ldr	r2, [r4, #8]
   2a5cc:	c307      	stmia	r3!, {r0, r1, r2}
   2a5ce:	f7f0 f83b 	bl	1a648 <os_time_get>
    entry->exp_os_ticks = ble_npl_time_get() +
   2a5d2:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
   2a5d6:	f8c8 0010 	str.w	r0, [r8, #16]
    BLE_HS_LOG(INFO, "GAP procedure initiated: ");
   2a5da:	4a24      	ldr	r2, [pc, #144]	; (2a66c <ble_gap_update_params+0x120>)
   2a5dc:	2101      	movs	r1, #1
   2a5de:	2004      	movs	r0, #4
   2a5e0:	f7f2 fba4 	bl	1cd2c <modlog_printf>
    ble_gap_log_update(conn_handle, params);
   2a5e4:	4621      	mov	r1, r4
   2a5e6:	4638      	mov	r0, r7
   2a5e8:	f7ff f81c 	bl	29624 <ble_gap_log_update>
    BLE_HS_LOG(INFO, "\n");
   2a5ec:	4a20      	ldr	r2, [pc, #128]	; (2a670 <ble_gap_update_params+0x124>)
   2a5ee:	2101      	movs	r1, #1
   2a5f0:	2004      	movs	r0, #4
   2a5f2:	f7f2 fb9b 	bl	1cd2c <modlog_printf>
    if ((conn->supported_feat & BLE_HS_HCI_LE_FEAT_CONN_PARAM_REQUEST) == 0 &&
   2a5f6:	6a73      	ldr	r3, [r6, #36]	; 0x24
   2a5f8:	f013 0f02 	tst.w	r3, #2
   2a5fc:	d104      	bne.n	2a608 <ble_gap_update_params+0xbc>
            !(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
   2a5fe:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    if ((conn->supported_feat & BLE_HS_HCI_LE_FEAT_CONN_PARAM_REQUEST) == 0 &&
   2a602:	f013 0f01 	tst.w	r3, #1
   2a606:	d011      	beq.n	2a62c <ble_gap_update_params+0xe0>
        rc = ble_gap_update_tx(conn_handle, params);
   2a608:	4621      	mov	r1, r4
   2a60a:	4638      	mov	r0, r7
   2a60c:	f7fe fc9f 	bl	28f4e <ble_gap_update_tx>
   2a610:	4605      	mov	r5, r0
    entry = ble_gap_update_entry_alloc();
   2a612:	4646      	mov	r6, r8
    l2cap_update = 0;
   2a614:	f04f 0800 	mov.w	r8, #0
   2a618:	e7ba      	b.n	2a590 <ble_gap_update_params+0x44>
        rc = BLE_HS_ENOTCONN;
   2a61a:	2507      	movs	r5, #7
    l2cap_update = 0;
   2a61c:	f04f 0800 	mov.w	r8, #0
   2a620:	e7b6      	b.n	2a590 <ble_gap_update_params+0x44>
    entry = ble_gap_update_entry_alloc();
   2a622:	4606      	mov	r6, r0
        rc = BLE_HS_ENOMEM;
   2a624:	2506      	movs	r5, #6
    l2cap_update = 0;
   2a626:	f04f 0800 	mov.w	r8, #0
   2a62a:	e7b1      	b.n	2a590 <ble_gap_update_params+0x44>
    entry = ble_gap_update_entry_alloc();
   2a62c:	4646      	mov	r6, r8
        rc = 0;
   2a62e:	2500      	movs	r5, #0
        l2cap_update = 1;
   2a630:	f04f 0801 	mov.w	r8, #1
   2a634:	e7ac      	b.n	2a590 <ble_gap_update_params+0x44>
        ble_gap_update_to_l2cap(params, &l2cap_params);
   2a636:	4669      	mov	r1, sp
   2a638:	4620      	mov	r0, r4
   2a63a:	f7fe f9fd 	bl	28a38 <ble_gap_update_to_l2cap>
        rc = ble_l2cap_sig_update(conn_handle, &l2cap_params,
   2a63e:	2300      	movs	r3, #0
   2a640:	4a0c      	ldr	r2, [pc, #48]	; (2a674 <ble_gap_update_params+0x128>)
   2a642:	4669      	mov	r1, sp
   2a644:	4638      	mov	r0, r7
   2a646:	f006 fb71 	bl	30d2c <ble_l2cap_sig_update>
   2a64a:	4605      	mov	r5, r0
   2a64c:	e7a7      	b.n	2a59e <ble_gap_update_params+0x52>
        ble_gap_update_entry_free(entry);
   2a64e:	4630      	mov	r0, r6
   2a650:	f7fe fe00 	bl	29254 <ble_gap_update_entry_free>
        STATS_INC(ble_gap_stats, update_fail);
   2a654:	4a03      	ldr	r2, [pc, #12]	; (2a664 <ble_gap_update_params+0x118>)
   2a656:	6d93      	ldr	r3, [r2, #88]	; 0x58
   2a658:	3301      	adds	r3, #1
   2a65a:	6593      	str	r3, [r2, #88]	; 0x58
   2a65c:	e7a7      	b.n	2a5ae <ble_gap_update_params+0x62>
        return BLE_HS_EINVAL;
   2a65e:	2503      	movs	r5, #3
   2a660:	e7a7      	b.n	2a5b2 <ble_gap_update_params+0x66>
   2a662:	bf00      	nop
   2a664:	10004f20 	.word	0x10004f20
   2a668:	10004fa8 	.word	0x10004fa8
   2a66c:	0003915c 	.word	0x0003915c
   2a670:	00034744 	.word	0x00034744
   2a674:	0002a441 	.word	0x0002a441

0002a678 <ble_gap_unpair_oldest_peer>:
}
   2a678:	2008      	movs	r0, #8
   2a67a:	4770      	bx	lr

0002a67c <ble_gap_unpair_oldest_except>:
}
   2a67c:	2008      	movs	r0, #8
   2a67e:	4770      	bx	lr

0002a680 <ble_gap_conn_rssi>:
{
   2a680:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_read_rssi(conn_handle, out_rssi);
   2a682:	f005 fb0d 	bl	2fca0 <ble_hs_hci_util_read_rssi>
}
   2a686:	bd08      	pop	{r3, pc}

0002a688 <ble_gap_notify_rx_event>:
{
   2a688:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a68a:	b08f      	sub	sp, #60	; 0x3c
   2a68c:	4604      	mov	r4, r0
   2a68e:	460f      	mov	r7, r1
   2a690:	4616      	mov	r6, r2
   2a692:	461d      	mov	r5, r3
    memset(&event, 0, sizeof event);
   2a694:	2234      	movs	r2, #52	; 0x34
   2a696:	2100      	movs	r1, #0
   2a698:	a801      	add	r0, sp, #4
   2a69a:	f7f0 fafe 	bl	1ac9a <memset>
    event.type = BLE_GAP_EVENT_NOTIFY_RX;
   2a69e:	230c      	movs	r3, #12
   2a6a0:	f88d 3004 	strb.w	r3, [sp, #4]
    event.notify_rx.conn_handle = conn_handle;
   2a6a4:	f8ad 400e 	strh.w	r4, [sp, #14]
    event.notify_rx.attr_handle = attr_handle;
   2a6a8:	f8ad 700c 	strh.w	r7, [sp, #12]
    event.notify_rx.om = om;
   2a6ac:	9602      	str	r6, [sp, #8]
    event.notify_rx.indication = is_indication;
   2a6ae:	f04f 0300 	mov.w	r3, #0
   2a6b2:	f365 0300 	bfi	r3, r5, #0, #1
   2a6b6:	f88d 3010 	strb.w	r3, [sp, #16]
    ble_gap_event_listener_call(&event);
   2a6ba:	a801      	add	r0, sp, #4
   2a6bc:	f7fe fa8c 	bl	28bd8 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   2a6c0:	4621      	mov	r1, r4
   2a6c2:	a801      	add	r0, sp, #4
   2a6c4:	f7fe fab2 	bl	28c2c <ble_gap_call_conn_event_cb>
    os_mbuf_free_chain(event.notify_rx.om);
   2a6c8:	9802      	ldr	r0, [sp, #8]
   2a6ca:	f7ee ff80 	bl	195ce <os_mbuf_free_chain>
}
   2a6ce:	b00f      	add	sp, #60	; 0x3c
   2a6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a6d2 <ble_gap_notify_tx_event>:
{
   2a6d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a6d4:	b08f      	sub	sp, #60	; 0x3c
   2a6d6:	4607      	mov	r7, r0
   2a6d8:	460c      	mov	r4, r1
   2a6da:	4616      	mov	r6, r2
   2a6dc:	461d      	mov	r5, r3
    memset(&event, 0, sizeof event);
   2a6de:	2234      	movs	r2, #52	; 0x34
   2a6e0:	2100      	movs	r1, #0
   2a6e2:	a801      	add	r0, sp, #4
   2a6e4:	f7f0 fad9 	bl	1ac9a <memset>
    event.type = BLE_GAP_EVENT_NOTIFY_TX;
   2a6e8:	230d      	movs	r3, #13
   2a6ea:	f88d 3004 	strb.w	r3, [sp, #4]
    event.notify_tx.conn_handle = conn_handle;
   2a6ee:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.notify_tx.status = status;
   2a6f2:	9702      	str	r7, [sp, #8]
    event.notify_tx.attr_handle = attr_handle;
   2a6f4:	f8ad 600e 	strh.w	r6, [sp, #14]
    event.notify_tx.indication = is_indication;
   2a6f8:	f04f 0300 	mov.w	r3, #0
   2a6fc:	f365 0300 	bfi	r3, r5, #0, #1
   2a700:	f88d 3010 	strb.w	r3, [sp, #16]
    ble_gap_event_listener_call(&event);
   2a704:	a801      	add	r0, sp, #4
   2a706:	f7fe fa67 	bl	28bd8 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   2a70a:	4621      	mov	r1, r4
   2a70c:	a801      	add	r0, sp, #4
   2a70e:	f7fe fa8d 	bl	28c2c <ble_gap_call_conn_event_cb>
}
   2a712:	b00f      	add	sp, #60	; 0x3c
   2a714:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a716 <ble_gap_subscribe_event>:
{
   2a716:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a718:	b08f      	sub	sp, #60	; 0x3c
   2a71a:	4605      	mov	r5, r0
   2a71c:	460f      	mov	r7, r1
   2a71e:	4616      	mov	r6, r2
   2a720:	461c      	mov	r4, r3
    memset(&event, 0, sizeof event);
   2a722:	2234      	movs	r2, #52	; 0x34
   2a724:	2100      	movs	r1, #0
   2a726:	a801      	add	r0, sp, #4
   2a728:	f7f0 fab7 	bl	1ac9a <memset>
    event.type = BLE_GAP_EVENT_SUBSCRIBE;
   2a72c:	230e      	movs	r3, #14
   2a72e:	f88d 3004 	strb.w	r3, [sp, #4]
    event.subscribe.conn_handle = conn_handle;
   2a732:	f8ad 5008 	strh.w	r5, [sp, #8]
    event.subscribe.attr_handle = attr_handle;
   2a736:	f8ad 700a 	strh.w	r7, [sp, #10]
    event.subscribe.reason = reason;
   2a73a:	f88d 600c 	strb.w	r6, [sp, #12]
    event.subscribe.cur_notify = !!cur_notify;
   2a73e:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
   2a742:	3a00      	subs	r2, #0
   2a744:	bf18      	it	ne
   2a746:	2201      	movne	r2, #1
   2a748:	1e23      	subs	r3, r4, #0
   2a74a:	bf18      	it	ne
   2a74c:	2301      	movne	r3, #1
   2a74e:	f362 0341 	bfi	r3, r2, #1, #1
    event.subscribe.prev_indicate = !!prev_indicate;
   2a752:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
   2a756:	3a00      	subs	r2, #0
   2a758:	bf18      	it	ne
   2a75a:	2201      	movne	r2, #1
   2a75c:	f362 0382 	bfi	r3, r2, #2, #1
    event.subscribe.cur_indicate = !!cur_indicate;
   2a760:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   2a764:	3a00      	subs	r2, #0
   2a766:	bf18      	it	ne
   2a768:	2201      	movne	r2, #1
   2a76a:	f362 03c3 	bfi	r3, r2, #3, #1
   2a76e:	f88d 300d 	strb.w	r3, [sp, #13]
    ble_gap_event_listener_call(&event);
   2a772:	a801      	add	r0, sp, #4
   2a774:	f7fe fa30 	bl	28bd8 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   2a778:	4629      	mov	r1, r5
   2a77a:	a801      	add	r0, sp, #4
   2a77c:	f7fe fa56 	bl	28c2c <ble_gap_call_conn_event_cb>
}
   2a780:	b00f      	add	sp, #60	; 0x3c
   2a782:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a784 <ble_gap_mtu_event>:
{
   2a784:	b570      	push	{r4, r5, r6, lr}
   2a786:	b08e      	sub	sp, #56	; 0x38
   2a788:	4604      	mov	r4, r0
   2a78a:	460e      	mov	r6, r1
   2a78c:	4615      	mov	r5, r2
    memset(&event, 0, sizeof event);
   2a78e:	2234      	movs	r2, #52	; 0x34
   2a790:	2100      	movs	r1, #0
   2a792:	a801      	add	r0, sp, #4
   2a794:	f7f0 fa81 	bl	1ac9a <memset>
    event.type = BLE_GAP_EVENT_MTU;
   2a798:	230f      	movs	r3, #15
   2a79a:	f88d 3004 	strb.w	r3, [sp, #4]
    event.mtu.conn_handle = conn_handle;
   2a79e:	f8ad 4008 	strh.w	r4, [sp, #8]
    event.mtu.channel_id = cid;
   2a7a2:	f8ad 600a 	strh.w	r6, [sp, #10]
    event.mtu.value = mtu;
   2a7a6:	f8ad 500c 	strh.w	r5, [sp, #12]
    ble_gap_event_listener_call(&event);
   2a7aa:	a801      	add	r0, sp, #4
   2a7ac:	f7fe fa14 	bl	28bd8 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   2a7b0:	4621      	mov	r1, r4
   2a7b2:	a801      	add	r0, sp, #4
   2a7b4:	f7fe fa3a 	bl	28c2c <ble_gap_call_conn_event_cb>
}
   2a7b8:	b00e      	add	sp, #56	; 0x38
   2a7ba:	bd70      	pop	{r4, r5, r6, pc}

0002a7bc <ble_gap_preempt_no_lock>:
{
   2a7bc:	b508      	push	{r3, lr}
    rc = ble_gap_adv_stop_no_lock();
   2a7be:	f7ff fae7 	bl	29d90 <ble_gap_adv_stop_no_lock>
    if (rc == 0) {
   2a7c2:	b920      	cbnz	r0, 2a7ce <ble_gap_preempt_no_lock+0x12>
        ble_gap_slave[0].preempted = 1;
   2a7c4:	4a08      	ldr	r2, [pc, #32]	; (2a7e8 <ble_gap_preempt_no_lock+0x2c>)
   2a7c6:	7d53      	ldrb	r3, [r2, #21]
   2a7c8:	f043 0304 	orr.w	r3, r3, #4
   2a7cc:	7553      	strb	r3, [r2, #21]
    rc = ble_gap_conn_cancel_no_lock();
   2a7ce:	f7ff fcb5 	bl	2a13c <ble_gap_conn_cancel_no_lock>
    if (rc == 0) {
   2a7d2:	b910      	cbnz	r0, 2a7da <ble_gap_preempt_no_lock+0x1e>
        ble_gap_master.preempted_op = BLE_GAP_OP_M_CONN;
   2a7d4:	4b04      	ldr	r3, [pc, #16]	; (2a7e8 <ble_gap_preempt_no_lock+0x2c>)
   2a7d6:	2202      	movs	r2, #2
   2a7d8:	741a      	strb	r2, [r3, #16]
    rc = ble_gap_disc_cancel_no_lock();
   2a7da:	f7ff fb0f 	bl	29dfc <ble_gap_disc_cancel_no_lock>
    if (rc == 0) {
   2a7de:	b910      	cbnz	r0, 2a7e6 <ble_gap_preempt_no_lock+0x2a>
        ble_gap_master.preempted_op = BLE_GAP_OP_M_DISC;
   2a7e0:	4b01      	ldr	r3, [pc, #4]	; (2a7e8 <ble_gap_preempt_no_lock+0x2c>)
   2a7e2:	2201      	movs	r2, #1
   2a7e4:	741a      	strb	r2, [r3, #16]
}
   2a7e6:	bd08      	pop	{r3, pc}
   2a7e8:	10004fe0 	.word	0x10004fe0

0002a7ec <ble_gap_preempt>:
{
   2a7ec:	b508      	push	{r3, lr}
    ble_hs_lock();
   2a7ee:	f003 fbcf 	bl	2df90 <ble_hs_lock>
    if (!ble_gap_is_preempted()) {
   2a7f2:	f7fe f903 	bl	289fc <ble_gap_is_preempted>
   2a7f6:	b110      	cbz	r0, 2a7fe <ble_gap_preempt+0x12>
    ble_hs_unlock();
   2a7f8:	f003 fbce 	bl	2df98 <ble_hs_unlock>
}
   2a7fc:	bd08      	pop	{r3, pc}
        ble_gap_preempt_no_lock();
   2a7fe:	f7ff ffdd 	bl	2a7bc <ble_gap_preempt_no_lock>
   2a802:	e7f9      	b.n	2a7f8 <ble_gap_preempt+0xc>

0002a804 <ble_gap_preempt_done>:
{
   2a804:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a806:	b08f      	sub	sp, #60	; 0x3c
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   2a808:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2a80c:	482b      	ldr	r0, [pc, #172]	; (2a8bc <ble_gap_preempt_done+0xb8>)
   2a80e:	f7f0 f983 	bl	1ab18 <os_mutex_pend>
    memset(slaves, 0, sizeof(slaves));
   2a812:	4b2b      	ldr	r3, [pc, #172]	; (2a8c0 <ble_gap_preempt_done+0xbc>)
   2a814:	2400      	movs	r4, #0
   2a816:	601c      	str	r4, [r3, #0]
   2a818:	605c      	str	r4, [r3, #4]
    ble_hs_lock();
   2a81a:	f003 fbb9 	bl	2df90 <ble_hs_lock>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   2a81e:	4623      	mov	r3, r4
   2a820:	2b00      	cmp	r3, #0
   2a822:	dd14      	ble.n	2a84e <ble_gap_preempt_done+0x4a>
    if (ble_gap_master.preempted_op == BLE_GAP_OP_M_DISC) {
   2a824:	4b27      	ldr	r3, [pc, #156]	; (2a8c4 <ble_gap_preempt_done+0xc0>)
   2a826:	7c1b      	ldrb	r3, [r3, #16]
   2a828:	2b01      	cmp	r3, #1
   2a82a:	d028      	beq.n	2a87e <ble_gap_preempt_done+0x7a>
    disc_preempted = 0;
   2a82c:	2700      	movs	r7, #0
    ble_hs_unlock();
   2a82e:	f003 fbb3 	bl	2df98 <ble_hs_unlock>
    event.type = BLE_GAP_EVENT_ADV_COMPLETE;
   2a832:	2309      	movs	r3, #9
   2a834:	f88d 3004 	strb.w	r3, [sp, #4]
    event.adv_complete.reason = BLE_HS_EPREEMPTED;
   2a838:	231d      	movs	r3, #29
   2a83a:	9302      	str	r3, [sp, #8]
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   2a83c:	2400      	movs	r4, #0
   2a83e:	2c00      	cmp	r4, #0
   2a840:	dd24      	ble.n	2a88c <ble_gap_preempt_done+0x88>
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   2a842:	481e      	ldr	r0, [pc, #120]	; (2a8bc <ble_gap_preempt_done+0xb8>)
   2a844:	f7f0 f908 	bl	1aa58 <os_mutex_release>
    if (disc_preempted) {
   2a848:	bb67      	cbnz	r7, 2a8a4 <ble_gap_preempt_done+0xa0>
}
   2a84a:	b00f      	add	sp, #60	; 0x3c
   2a84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (ble_gap_slave[i].preempted) {
   2a84e:	4a1d      	ldr	r2, [pc, #116]	; (2a8c4 <ble_gap_preempt_done+0xc0>)
   2a850:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   2a854:	7d52      	ldrb	r2, [r2, #21]
   2a856:	f012 0f04 	tst.w	r2, #4
   2a85a:	d00e      	beq.n	2a87a <ble_gap_preempt_done+0x76>
            ble_gap_slave[i].preempted = 0;
   2a85c:	4a19      	ldr	r2, [pc, #100]	; (2a8c4 <ble_gap_preempt_done+0xc0>)
   2a85e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   2a862:	7d51      	ldrb	r1, [r2, #21]
   2a864:	f36f 0182 	bfc	r1, #2, #1
   2a868:	7551      	strb	r1, [r2, #21]
            slaves[i].cb = ble_gap_slave[i].cb;
   2a86a:	69d0      	ldr	r0, [r2, #28]
   2a86c:	4914      	ldr	r1, [pc, #80]	; (2a8c0 <ble_gap_preempt_done+0xbc>)
   2a86e:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
            slaves[i].arg = ble_gap_slave[i].cb_arg;
   2a872:	6a12      	ldr	r2, [r2, #32]
   2a874:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   2a878:	604a      	str	r2, [r1, #4]
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   2a87a:	3301      	adds	r3, #1
   2a87c:	e7d0      	b.n	2a820 <ble_gap_preempt_done+0x1c>
        ble_gap_master.preempted_op = BLE_GAP_OP_NULL;
   2a87e:	4b11      	ldr	r3, [pc, #68]	; (2a8c4 <ble_gap_preempt_done+0xc0>)
   2a880:	2200      	movs	r2, #0
   2a882:	741a      	strb	r2, [r3, #16]
        master_cb = ble_gap_master.cb;
   2a884:	689d      	ldr	r5, [r3, #8]
        master_arg = ble_gap_master.cb_arg;
   2a886:	68de      	ldr	r6, [r3, #12]
        disc_preempted = 1;
   2a888:	2701      	movs	r7, #1
   2a88a:	e7d0      	b.n	2a82e <ble_gap_preempt_done+0x2a>
        if (slaves[i].cb) {
   2a88c:	4b0c      	ldr	r3, [pc, #48]	; (2a8c0 <ble_gap_preempt_done+0xbc>)
   2a88e:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   2a892:	b129      	cbz	r1, 2a8a0 <ble_gap_preempt_done+0x9c>
            ble_gap_call_event_cb(&event, slaves[i].cb, slaves[i].arg);
   2a894:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   2a898:	685a      	ldr	r2, [r3, #4]
   2a89a:	a801      	add	r0, sp, #4
   2a89c:	f7fe f899 	bl	289d2 <ble_gap_call_event_cb>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   2a8a0:	3401      	adds	r4, #1
   2a8a2:	e7cc      	b.n	2a83e <ble_gap_preempt_done+0x3a>
        event.type = BLE_GAP_EVENT_DISC_COMPLETE;
   2a8a4:	2308      	movs	r3, #8
   2a8a6:	f88d 3004 	strb.w	r3, [sp, #4]
        event.disc_complete.reason = BLE_HS_EPREEMPTED;
   2a8aa:	231d      	movs	r3, #29
   2a8ac:	9302      	str	r3, [sp, #8]
        ble_gap_call_event_cb(&event, master_cb, master_arg);
   2a8ae:	4632      	mov	r2, r6
   2a8b0:	4629      	mov	r1, r5
   2a8b2:	a801      	add	r0, sp, #4
   2a8b4:	f7fe f88d 	bl	289d2 <ble_gap_call_event_cb>
}
   2a8b8:	e7c7      	b.n	2a84a <ble_gap_preempt_done+0x46>
   2a8ba:	bf00      	nop
   2a8bc:	10005004 	.word	0x10005004
   2a8c0:	10005010 	.word	0x10005010
   2a8c4:	10004fe0 	.word	0x10004fe0

0002a8c8 <ble_gap_event_listener_register>:
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   2a8c8:	4b0a      	ldr	r3, [pc, #40]	; (2a8f4 <ble_gap_event_listener_register+0x2c>)
   2a8ca:	681b      	ldr	r3, [r3, #0]
   2a8cc:	b11b      	cbz	r3, 2a8d6 <ble_gap_event_listener_register+0xe>
        if (evl == listener) {
   2a8ce:	4283      	cmp	r3, r0
   2a8d0:	d001      	beq.n	2a8d6 <ble_gap_event_listener_register+0xe>
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   2a8d2:	689b      	ldr	r3, [r3, #8]
   2a8d4:	e7fa      	b.n	2a8cc <ble_gap_event_listener_register+0x4>
    if (!evl) {
   2a8d6:	b10b      	cbz	r3, 2a8dc <ble_gap_event_listener_register+0x14>
        rc = BLE_HS_EALREADY;
   2a8d8:	2002      	movs	r0, #2
   2a8da:	4770      	bx	lr
        if (fn) {
   2a8dc:	b139      	cbz	r1, 2a8ee <ble_gap_event_listener_register+0x26>
            listener->fn = fn;
   2a8de:	6001      	str	r1, [r0, #0]
            listener->arg = arg;
   2a8e0:	6042      	str	r2, [r0, #4]
            SLIST_INSERT_HEAD(&ble_gap_event_listener_list, listener, link);
   2a8e2:	4b04      	ldr	r3, [pc, #16]	; (2a8f4 <ble_gap_event_listener_register+0x2c>)
   2a8e4:	681a      	ldr	r2, [r3, #0]
   2a8e6:	6082      	str	r2, [r0, #8]
   2a8e8:	6018      	str	r0, [r3, #0]
            rc = 0;
   2a8ea:	2000      	movs	r0, #0
   2a8ec:	4770      	bx	lr
            rc = BLE_HS_EINVAL;
   2a8ee:	2003      	movs	r0, #3
}
   2a8f0:	4770      	bx	lr
   2a8f2:	bf00      	nop
   2a8f4:	10004f1c 	.word	0x10004f1c

0002a8f8 <ble_gap_event_listener_unregister>:
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   2a8f8:	4b0c      	ldr	r3, [pc, #48]	; (2a92c <ble_gap_event_listener_unregister+0x34>)
   2a8fa:	681a      	ldr	r2, [r3, #0]
   2a8fc:	4613      	mov	r3, r2
   2a8fe:	b11b      	cbz	r3, 2a908 <ble_gap_event_listener_unregister+0x10>
        if (evl == listener) {
   2a900:	4283      	cmp	r3, r0
   2a902:	d001      	beq.n	2a908 <ble_gap_event_listener_unregister+0x10>
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   2a904:	689b      	ldr	r3, [r3, #8]
   2a906:	e7fa      	b.n	2a8fe <ble_gap_event_listener_unregister+0x6>
    if (!evl) {
   2a908:	b173      	cbz	r3, 2a928 <ble_gap_event_listener_unregister+0x30>
        SLIST_REMOVE(&ble_gap_event_listener_list, listener,
   2a90a:	4282      	cmp	r2, r0
   2a90c:	d007      	beq.n	2a91e <ble_gap_event_listener_unregister+0x26>
   2a90e:	4613      	mov	r3, r2
   2a910:	6892      	ldr	r2, [r2, #8]
   2a912:	4282      	cmp	r2, r0
   2a914:	d1fb      	bne.n	2a90e <ble_gap_event_listener_unregister+0x16>
   2a916:	6892      	ldr	r2, [r2, #8]
   2a918:	609a      	str	r2, [r3, #8]
        rc = 0;
   2a91a:	2000      	movs	r0, #0
   2a91c:	4770      	bx	lr
        SLIST_REMOVE(&ble_gap_event_listener_list, listener,
   2a91e:	6892      	ldr	r2, [r2, #8]
   2a920:	4b02      	ldr	r3, [pc, #8]	; (2a92c <ble_gap_event_listener_unregister+0x34>)
   2a922:	601a      	str	r2, [r3, #0]
        rc = 0;
   2a924:	2000      	movs	r0, #0
   2a926:	4770      	bx	lr
        rc = BLE_HS_ENOENT;
   2a928:	2005      	movs	r0, #5
}
   2a92a:	4770      	bx	lr
   2a92c:	10004f1c 	.word	0x10004f1c

0002a930 <ble_gap_init>:
 * $init                                                                     *
 *****************************************************************************/

int
ble_gap_init(void)
{
   2a930:	b510      	push	{r4, lr}
   2a932:	b082      	sub	sp, #8
    int rc;

    memset(&ble_gap_master, 0, sizeof(ble_gap_master));
   2a934:	4b15      	ldr	r3, [pc, #84]	; (2a98c <ble_gap_init+0x5c>)
   2a936:	2400      	movs	r4, #0
   2a938:	601c      	str	r4, [r3, #0]
   2a93a:	605c      	str	r4, [r3, #4]
   2a93c:	609c      	str	r4, [r3, #8]
   2a93e:	60dc      	str	r4, [r3, #12]
   2a940:	611c      	str	r4, [r3, #16]
    memset(ble_gap_slave, 0, sizeof(ble_gap_slave));
   2a942:	615c      	str	r4, [r3, #20]
   2a944:	619c      	str	r4, [r3, #24]
   2a946:	61dc      	str	r4, [r3, #28]
   2a948:	621c      	str	r4, [r3, #32]
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   2a94a:	4811      	ldr	r0, [pc, #68]	; (2a990 <ble_gap_init+0x60>)
   2a94c:	f7f0 f87a 	bl	1aa44 <os_mutex_init>
    memset(&ble_gap_sync, 0, sizeof(ble_gap_sync));
#endif

    ble_npl_mutex_init(&preempt_done_mutex);

    SLIST_INIT(&ble_gap_update_entries);
   2a950:	4b10      	ldr	r3, [pc, #64]	; (2a994 <ble_gap_init+0x64>)
   2a952:	601c      	str	r4, [r3, #0]
    SLIST_INIT(&ble_gap_event_listener_list);
   2a954:	4b10      	ldr	r3, [pc, #64]	; (2a998 <ble_gap_init+0x68>)
   2a956:	601c      	str	r4, [r3, #0]

    rc = os_mempool_init(&ble_gap_update_entry_pool,
   2a958:	4b10      	ldr	r3, [pc, #64]	; (2a99c <ble_gap_init+0x6c>)
   2a95a:	9300      	str	r3, [sp, #0]
   2a95c:	4b10      	ldr	r3, [pc, #64]	; (2a9a0 <ble_gap_init+0x70>)
   2a95e:	2218      	movs	r2, #24
   2a960:	2101      	movs	r1, #1
   2a962:	4810      	ldr	r0, [pc, #64]	; (2a9a4 <ble_gap_init+0x74>)
   2a964:	f7ef fa2e 	bl	19dc4 <os_mempool_init>
                         MYNEWT_VAL(BLE_GAP_MAX_PENDING_CONN_PARAM_UPDATE),
                         sizeof (struct ble_gap_update_entry),
                         ble_gap_update_entry_mem,
                         "ble_gap_update");
    switch (rc) {
   2a968:	b120      	cbz	r0, 2a974 <ble_gap_init+0x44>
   2a96a:	2801      	cmp	r0, #1
   2a96c:	d10c      	bne.n	2a988 <ble_gap_init+0x58>
   2a96e:	2006      	movs	r0, #6

    return 0;

err:
    return rc;
}
   2a970:	b002      	add	sp, #8
   2a972:	bd10      	pop	{r4, pc}
    rc = stats_init_and_reg(
   2a974:	4b0c      	ldr	r3, [pc, #48]	; (2a9a8 <ble_gap_init+0x78>)
   2a976:	9301      	str	r3, [sp, #4]
   2a978:	2300      	movs	r3, #0
   2a97a:	9300      	str	r3, [sp, #0]
   2a97c:	221f      	movs	r2, #31
   2a97e:	2104      	movs	r1, #4
   2a980:	480a      	ldr	r0, [pc, #40]	; (2a9ac <ble_gap_init+0x7c>)
   2a982:	f7f3 fad7 	bl	1df34 <stats_init_and_reg>
    if (rc != 0) {
   2a986:	e7f3      	b.n	2a970 <ble_gap_init+0x40>
        rc = BLE_HS_EOS;
   2a988:	200b      	movs	r0, #11
   2a98a:	e7f1      	b.n	2a970 <ble_gap_init+0x40>
   2a98c:	10004fe0 	.word	0x10004fe0
   2a990:	10005004 	.word	0x10005004
   2a994:	10004fa8 	.word	0x10004fa8
   2a998:	10004f1c 	.word	0x10004f1c
   2a99c:	00039178 	.word	0x00039178
   2a9a0:	10004fac 	.word	0x10004fac
   2a9a4:	10004fc4 	.word	0x10004fc4
   2a9a8:	00039188 	.word	0x00039188
   2a9ac:	10004f20 	.word	0x10004f20

0002a9b0 <ble_gattc_rx_entry_find>:
 * $rx entry                                                                 *
 *****************************************************************************/

static const void *
ble_gattc_rx_entry_find(uint8_t op, const void *rx_entries, int num_entries)
{
   2a9b0:	b430      	push	{r4, r5}
   2a9b2:	4605      	mov	r5, r0

    const struct gen_entry *entries;
    int i;

    entries = rx_entries;
    for (i = 0; i < num_entries; i++) {
   2a9b4:	2300      	movs	r3, #0
   2a9b6:	4293      	cmp	r3, r2
   2a9b8:	da07      	bge.n	2a9ca <ble_gattc_rx_entry_find+0x1a>
        if (entries[i].op == op) {
   2a9ba:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   2a9be:	f811 4033 	ldrb.w	r4, [r1, r3, lsl #3]
   2a9c2:	42ac      	cmp	r4, r5
   2a9c4:	d002      	beq.n	2a9cc <ble_gattc_rx_entry_find+0x1c>
    for (i = 0; i < num_entries; i++) {
   2a9c6:	3301      	adds	r3, #1
   2a9c8:	e7f5      	b.n	2a9b6 <ble_gattc_rx_entry_find+0x6>
            return entries + i;
        }
    }

    return NULL;
   2a9ca:	2000      	movs	r0, #0
}
   2a9cc:	bc30      	pop	{r4, r5}
   2a9ce:	4770      	bx	lr

0002a9d0 <ble_gattc_err_dispatch_get>:
static ble_gattc_err_fn *
ble_gattc_err_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_err_dispatch[op];
}
   2a9d0:	4b01      	ldr	r3, [pc, #4]	; (2a9d8 <ble_gattc_err_dispatch_get+0x8>)
   2a9d2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2a9d6:	4770      	bx	lr
   2a9d8:	000393d8 	.word	0x000393d8

0002a9dc <ble_gattc_resume_dispatch_get>:
static ble_gattc_resume_fn *
ble_gattc_resume_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_resume_dispatch[op];
}
   2a9dc:	4b01      	ldr	r3, [pc, #4]	; (2a9e4 <ble_gattc_resume_dispatch_get+0x8>)
   2a9de:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2a9e2:	4770      	bx	lr
   2a9e4:	00039414 	.word	0x00039414

0002a9e8 <ble_gattc_tmo_dispatch_get>:
static ble_gattc_tmo_fn *
ble_gattc_tmo_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_tmo_dispatch[op];
}
   2a9e8:	4b01      	ldr	r3, [pc, #4]	; (2a9f0 <ble_gattc_tmo_dispatch_get+0x8>)
   2a9ea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2a9ee:	4770      	bx	lr
   2a9f0:	000394c8 	.word	0x000394c8

0002a9f4 <ble_gattc_proc_matches_conn_op>:
{
    const struct ble_gattc_criteria_conn_op *criteria;

    criteria = arg;

    if (criteria->conn_handle != proc->conn_handle) {
   2a9f4:	880a      	ldrh	r2, [r1, #0]
   2a9f6:	8903      	ldrh	r3, [r0, #8]
   2a9f8:	429a      	cmp	r2, r3
   2a9fa:	d107      	bne.n	2aa0c <ble_gattc_proc_matches_conn_op+0x18>
        return 0;
    }

    if (criteria->op != proc->op && criteria->op != BLE_GATT_OP_NONE) {
   2a9fc:	788b      	ldrb	r3, [r1, #2]
   2a9fe:	7a82      	ldrb	r2, [r0, #10]
   2aa00:	4293      	cmp	r3, r2
   2aa02:	d005      	beq.n	2aa10 <ble_gattc_proc_matches_conn_op+0x1c>
   2aa04:	2bff      	cmp	r3, #255	; 0xff
   2aa06:	d105      	bne.n	2aa14 <ble_gattc_proc_matches_conn_op+0x20>
        return 0;
    }

    return 1;
   2aa08:	2001      	movs	r0, #1
   2aa0a:	4770      	bx	lr
        return 0;
   2aa0c:	2000      	movs	r0, #0
   2aa0e:	4770      	bx	lr
    return 1;
   2aa10:	2001      	movs	r0, #1
   2aa12:	4770      	bx	lr
        return 0;
   2aa14:	2000      	movs	r0, #0
}
   2aa16:	4770      	bx	lr

0002aa18 <ble_gattc_proc_matches_expired>:
    struct ble_gattc_criteria_exp *criteria;
    int32_t time_diff;

    criteria = arg;

    time_diff = proc->exp_os_ticks - criteria->now;
   2aa18:	6843      	ldr	r3, [r0, #4]
   2aa1a:	680a      	ldr	r2, [r1, #0]
   2aa1c:	1a9b      	subs	r3, r3, r2

    if (time_diff <= 0) {
   2aa1e:	2b00      	cmp	r3, #0
   2aa20:	dd05      	ble.n	2aa2e <ble_gattc_proc_matches_expired+0x16>
        /* Procedure is expired. */
        return 1;
    }

    /* Procedure isn't expired; determine if it is the next to expire. */
    if (time_diff < criteria->next_exp_in) {
   2aa22:	684a      	ldr	r2, [r1, #4]
   2aa24:	429a      	cmp	r2, r3
   2aa26:	dd04      	ble.n	2aa32 <ble_gattc_proc_matches_expired+0x1a>
        criteria->next_exp_in = time_diff;
   2aa28:	604b      	str	r3, [r1, #4]
    }
    return 0;
   2aa2a:	2000      	movs	r0, #0
   2aa2c:	4770      	bx	lr
        return 1;
   2aa2e:	2001      	movs	r0, #1
   2aa30:	4770      	bx	lr
    return 0;
   2aa32:	2000      	movs	r0, #0
}
   2aa34:	4770      	bx	lr

0002aa36 <ble_gattc_proc_matches_conn_rx_entry>:
    const void *matching_rx_entry;
};

static int
ble_gattc_proc_matches_conn_rx_entry(struct ble_gattc_proc *proc, void *arg)
{
   2aa36:	b510      	push	{r4, lr}
   2aa38:	460c      	mov	r4, r1
    struct ble_gattc_criteria_conn_rx_entry *criteria;

    criteria = arg;

    if (criteria->conn_handle != BLE_HS_CONN_HANDLE_NONE &&
   2aa3a:	880b      	ldrh	r3, [r1, #0]
   2aa3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2aa40:	4293      	cmp	r3, r2
   2aa42:	d002      	beq.n	2aa4a <ble_gattc_proc_matches_conn_rx_entry+0x14>
        criteria->conn_handle != proc->conn_handle) {
   2aa44:	8902      	ldrh	r2, [r0, #8]
    if (criteria->conn_handle != BLE_HS_CONN_HANDLE_NONE &&
   2aa46:	4293      	cmp	r3, r2
   2aa48:	d109      	bne.n	2aa5e <ble_gattc_proc_matches_conn_rx_entry+0x28>

        return 0;
    }

    /* Entry matches; indicate corresponding rx entry. */
    criteria->matching_rx_entry = ble_gattc_rx_entry_find(
   2aa4a:	68a2      	ldr	r2, [r4, #8]
   2aa4c:	6861      	ldr	r1, [r4, #4]
   2aa4e:	7a80      	ldrb	r0, [r0, #10]
   2aa50:	f7ff ffae 	bl	2a9b0 <ble_gattc_rx_entry_find>
   2aa54:	60e0      	str	r0, [r4, #12]
        proc->op, criteria->rx_entries, criteria->num_rx_entries);

    return (criteria->matching_rx_entry != NULL);
   2aa56:	3800      	subs	r0, #0
   2aa58:	bf18      	it	ne
   2aa5a:	2001      	movne	r0, #1
}
   2aa5c:	bd10      	pop	{r4, pc}
        return 0;
   2aa5e:	2000      	movs	r0, #0
   2aa60:	e7fc      	b.n	2aa5c <ble_gattc_proc_matches_conn_rx_entry+0x26>

0002aa62 <ble_gattc_proc_matches_stalled>:
}

static int
ble_gattc_proc_matches_stalled(struct ble_gattc_proc *proc, void *unused)
{
    return proc->flags & BLE_GATTC_PROC_F_STALLED;
   2aa62:	7ac0      	ldrb	r0, [r0, #11]
}
   2aa64:	f000 0001 	and.w	r0, r0, #1
   2aa68:	4770      	bx	lr

0002aa6a <ble_gattc_proc_timeout>:
    return diff;
}

static void
ble_gattc_proc_timeout(struct ble_gattc_proc *proc)
{
   2aa6a:	b510      	push	{r4, lr}
   2aa6c:	4604      	mov	r4, r0
    ble_gattc_tmo_fn *cb;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    cb = ble_gattc_tmo_dispatch_get(proc->op);
   2aa6e:	7a80      	ldrb	r0, [r0, #10]
   2aa70:	f7ff ffba 	bl	2a9e8 <ble_gattc_tmo_dispatch_get>
    if (cb != NULL) {
   2aa74:	b110      	cbz	r0, 2aa7c <ble_gattc_proc_timeout+0x12>
   2aa76:	4603      	mov	r3, r0
        cb(proc);
   2aa78:	4620      	mov	r0, r4
   2aa7a:	4798      	blx	r3
    }
}
   2aa7c:	bd10      	pop	{r4, pc}
	...

0002aa80 <ble_gattc_error>:
ble_gattc_error(int status, uint16_t att_handle)
{
    static struct ble_gatt_error error;

    /* For consistency, always indicate a handle of 0 on success. */
    if (status == 0 || status == BLE_HS_EDONE) {
   2aa80:	4603      	mov	r3, r0
   2aa82:	b118      	cbz	r0, 2aa8c <ble_gattc_error+0xc>
   2aa84:	280e      	cmp	r0, #14
   2aa86:	d102      	bne.n	2aa8e <ble_gattc_error+0xe>
        att_handle = 0;
   2aa88:	2100      	movs	r1, #0
   2aa8a:	e000      	b.n	2aa8e <ble_gattc_error+0xe>
   2aa8c:	2100      	movs	r1, #0
    }

    error.status = status;
   2aa8e:	4802      	ldr	r0, [pc, #8]	; (2aa98 <ble_gattc_error+0x18>)
   2aa90:	8003      	strh	r3, [r0, #0]
    error.att_handle = att_handle;
   2aa92:	8041      	strh	r1, [r0, #2]
    return &error;
}
   2aa94:	4770      	bx	lr
   2aa96:	bf00      	nop
   2aa98:	100051b8 	.word	0x100051b8

0002aa9c <ble_gattc_mtu_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_mtu_cb(struct ble_gattc_proc *proc, int status, uint16_t att_handle,
                 uint16_t mtu)
{
   2aa9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2aa9e:	4604      	mov	r4, r0
   2aaa0:	461e      	mov	r6, r3
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   2aaa2:	4608      	mov	r0, r1
   2aaa4:	b129      	cbz	r1, 2aab2 <ble_gattc_mtu_cb+0x16>
   2aaa6:	290e      	cmp	r1, #14
   2aaa8:	d003      	beq.n	2aab2 <ble_gattc_mtu_cb+0x16>
        STATS_INC(ble_gattc_stats, mtu_fail);
   2aaaa:	4909      	ldr	r1, [pc, #36]	; (2aad0 <ble_gattc_mtu_cb+0x34>)
   2aaac:	690b      	ldr	r3, [r1, #16]
   2aaae:	3301      	adds	r3, #1
   2aab0:	610b      	str	r3, [r1, #16]
    }

    if (proc->mtu.cb == NULL) {
   2aab2:	68e5      	ldr	r5, [r4, #12]
   2aab4:	b14d      	cbz	r5, 2aaca <ble_gattc_mtu_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->mtu.cb(proc->conn_handle,
   2aab6:	8927      	ldrh	r7, [r4, #8]
                          ble_gattc_error(status, att_handle),
   2aab8:	4611      	mov	r1, r2
   2aaba:	f7ff ffe1 	bl	2aa80 <ble_gattc_error>
   2aabe:	4601      	mov	r1, r0
        rc = proc->mtu.cb(proc->conn_handle,
   2aac0:	6923      	ldr	r3, [r4, #16]
   2aac2:	4632      	mov	r2, r6
   2aac4:	4638      	mov	r0, r7
   2aac6:	47a8      	blx	r5
                          mtu, proc->mtu.cb_arg);
    }

    return rc;
}
   2aac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   2aaca:	2000      	movs	r0, #0
    return rc;
   2aacc:	e7fc      	b.n	2aac8 <ble_gattc_mtu_cb+0x2c>
   2aace:	bf00      	nop
   2aad0:	10005120 	.word	0x10005120

0002aad4 <ble_gattc_mtu_tmo>:

static void
ble_gattc_mtu_tmo(struct ble_gattc_proc *proc)
{
   2aad4:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_mtu_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   2aad6:	2300      	movs	r3, #0
   2aad8:	461a      	mov	r2, r3
   2aada:	210d      	movs	r1, #13
   2aadc:	f7ff ffde 	bl	2aa9c <ble_gattc_mtu_cb>
}
   2aae0:	bd08      	pop	{r3, pc}

0002aae2 <ble_gattc_mtu_err>:
/**
 * Handles an incoming ATT error response for the specified mtu-exchange proc.
 */
static void
ble_gattc_mtu_err(struct ble_gattc_proc *proc, int status, uint16_t att_handle)
{
   2aae2:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_mtu_cb(proc, status, att_handle, 0);
   2aae4:	2300      	movs	r3, #0
   2aae6:	f7ff ffd9 	bl	2aa9c <ble_gattc_mtu_cb>
}
   2aaea:	bd08      	pop	{r3, pc}

0002aaec <ble_gattc_disc_all_svcs_cb>:
 */
static int
ble_gattc_disc_all_svcs_cb(struct ble_gattc_proc *proc,
                           uint16_t status, uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   2aaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2aaee:	4604      	mov	r4, r0
   2aaf0:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(service != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   2aaf2:	4608      	mov	r0, r1
   2aaf4:	b129      	cbz	r1, 2ab02 <ble_gattc_disc_all_svcs_cb+0x16>
   2aaf6:	290e      	cmp	r1, #14
   2aaf8:	d003      	beq.n	2ab02 <ble_gattc_disc_all_svcs_cb+0x16>
        STATS_INC(ble_gattc_stats, disc_all_svcs_fail);
   2aafa:	4909      	ldr	r1, [pc, #36]	; (2ab20 <ble_gattc_disc_all_svcs_cb+0x34>)
   2aafc:	698b      	ldr	r3, [r1, #24]
   2aafe:	3301      	adds	r3, #1
   2ab00:	618b      	str	r3, [r1, #24]
    }

    if (proc->disc_all_svcs.cb == NULL) {
   2ab02:	6925      	ldr	r5, [r4, #16]
   2ab04:	b14d      	cbz	r5, 2ab1a <ble_gattc_disc_all_svcs_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->disc_all_svcs.cb(proc->conn_handle,
   2ab06:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle),
   2ab08:	4611      	mov	r1, r2
   2ab0a:	f7ff ffb9 	bl	2aa80 <ble_gattc_error>
   2ab0e:	4601      	mov	r1, r0
        rc = proc->disc_all_svcs.cb(proc->conn_handle,
   2ab10:	6963      	ldr	r3, [r4, #20]
   2ab12:	4632      	mov	r2, r6
   2ab14:	4638      	mov	r0, r7
   2ab16:	47a8      	blx	r5
                                    service, proc->disc_all_svcs.cb_arg);
    }

    return rc;
}
   2ab18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   2ab1a:	2000      	movs	r0, #0
    return rc;
   2ab1c:	e7fc      	b.n	2ab18 <ble_gattc_disc_all_svcs_cb+0x2c>
   2ab1e:	bf00      	nop
   2ab20:	10005120 	.word	0x10005120

0002ab24 <ble_gattc_disc_all_svcs_tmo>:

static void
ble_gattc_disc_all_svcs_tmo(struct ble_gattc_proc *proc)
{
   2ab24:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_svcs_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   2ab26:	2300      	movs	r3, #0
   2ab28:	461a      	mov	r2, r3
   2ab2a:	210d      	movs	r1, #13
   2ab2c:	f7ff ffde 	bl	2aaec <ble_gattc_disc_all_svcs_cb>
}
   2ab30:	bd08      	pop	{r3, pc}

0002ab32 <ble_gattc_disc_all_svcs_err>:
 * discover-all-services proc.
 */
static void
ble_gattc_disc_all_svcs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   2ab32:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   2ab34:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   2ab38:	d004      	beq.n	2ab44 <ble_gattc_disc_all_svcs_err+0x12>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_svcs_cb(proc, status, att_handle, NULL);
   2ab3a:	2300      	movs	r3, #0
   2ab3c:	b289      	uxth	r1, r1
   2ab3e:	f7ff ffd5 	bl	2aaec <ble_gattc_disc_all_svcs_cb>
}
   2ab42:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   2ab44:	210e      	movs	r1, #14
   2ab46:	e7f8      	b.n	2ab3a <ble_gattc_disc_all_svcs_err+0x8>

0002ab48 <ble_gattc_disc_svc_uuid_cb>:
 */
static int
ble_gattc_disc_svc_uuid_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   2ab48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ab4a:	4604      	mov	r4, r0
   2ab4c:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(service != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   2ab4e:	4608      	mov	r0, r1
   2ab50:	b129      	cbz	r1, 2ab5e <ble_gattc_disc_svc_uuid_cb+0x16>
   2ab52:	290e      	cmp	r1, #14
   2ab54:	d003      	beq.n	2ab5e <ble_gattc_disc_svc_uuid_cb+0x16>
        STATS_INC(ble_gattc_stats, disc_svc_uuid_fail);
   2ab56:	4909      	ldr	r1, [pc, #36]	; (2ab7c <ble_gattc_disc_svc_uuid_cb+0x34>)
   2ab58:	6a0b      	ldr	r3, [r1, #32]
   2ab5a:	3301      	adds	r3, #1
   2ab5c:	620b      	str	r3, [r1, #32]
    }

    if (proc->disc_svc_uuid.cb == NULL) {
   2ab5e:	6a65      	ldr	r5, [r4, #36]	; 0x24
   2ab60:	b14d      	cbz	r5, 2ab76 <ble_gattc_disc_svc_uuid_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->disc_svc_uuid.cb(proc->conn_handle,
   2ab62:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle),
   2ab64:	4611      	mov	r1, r2
   2ab66:	f7ff ff8b 	bl	2aa80 <ble_gattc_error>
   2ab6a:	4601      	mov	r1, r0
        rc = proc->disc_svc_uuid.cb(proc->conn_handle,
   2ab6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2ab6e:	4632      	mov	r2, r6
   2ab70:	4638      	mov	r0, r7
   2ab72:	47a8      	blx	r5
                                    service, proc->disc_svc_uuid.cb_arg);
    }

    return rc;
}
   2ab74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   2ab76:	2000      	movs	r0, #0
    return rc;
   2ab78:	e7fc      	b.n	2ab74 <ble_gattc_disc_svc_uuid_cb+0x2c>
   2ab7a:	bf00      	nop
   2ab7c:	10005120 	.word	0x10005120

0002ab80 <ble_gattc_disc_svc_uuid_tmo>:

static void
ble_gattc_disc_svc_uuid_tmo(struct ble_gattc_proc *proc)
{
   2ab80:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_svc_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   2ab82:	2300      	movs	r3, #0
   2ab84:	461a      	mov	r2, r3
   2ab86:	210d      	movs	r1, #13
   2ab88:	f7ff ffde 	bl	2ab48 <ble_gattc_disc_svc_uuid_cb>
}
   2ab8c:	bd08      	pop	{r3, pc}

0002ab8e <ble_gattc_disc_svc_uuid_err>:
 * discover-service-by-uuid proc.
 */
static void
ble_gattc_disc_svc_uuid_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   2ab8e:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   2ab90:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   2ab94:	d003      	beq.n	2ab9e <ble_gattc_disc_svc_uuid_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_svc_uuid_cb(proc, status, att_handle, NULL);
   2ab96:	2300      	movs	r3, #0
   2ab98:	f7ff ffd6 	bl	2ab48 <ble_gattc_disc_svc_uuid_cb>
}
   2ab9c:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   2ab9e:	210e      	movs	r1, #14
   2aba0:	e7f9      	b.n	2ab96 <ble_gattc_disc_svc_uuid_err+0x8>

0002aba2 <ble_gattc_disc_svc_uuid_rx_hinfo>:
 * the specified discover-service-by-uuid proc.
 */
static int
ble_gattc_disc_svc_uuid_rx_hinfo(struct ble_gattc_proc *proc,
                                 struct ble_att_find_type_value_hinfo *hinfo)
{
   2aba2:	b570      	push	{r4, r5, r6, lr}
   2aba4:	b086      	sub	sp, #24
   2aba6:	4604      	mov	r4, r0
    int cbrc;
    int rc;

    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (hinfo->group_end_handle <= proc->disc_svc_uuid.prev_handle) {
   2aba8:	884b      	ldrh	r3, [r1, #2]
   2abaa:	8c02      	ldrh	r2, [r0, #32]
   2abac:	4293      	cmp	r3, r2
   2abae:	d917      	bls.n	2abe0 <ble_gattc_disc_svc_uuid_rx_hinfo+0x3e>
        /* Peer sent services out of order; terminate procedure. */
        rc = BLE_HS_EBADDATA;
        goto done;
    }

    proc->disc_svc_uuid.prev_handle = hinfo->group_end_handle;
   2abb0:	8403      	strh	r3, [r0, #32]

    service.start_handle = hinfo->attr_handle;
   2abb2:	880a      	ldrh	r2, [r1, #0]
   2abb4:	f8ad 2000 	strh.w	r2, [sp]
    service.end_handle = hinfo->group_end_handle;
   2abb8:	f8ad 3002 	strh.w	r3, [sp, #2]
    service.uuid = proc->disc_svc_uuid.service_uuid;
   2abbc:	ad01      	add	r5, sp, #4
   2abbe:	f100 060c 	add.w	r6, r0, #12
   2abc2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2abc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2abc6:	6833      	ldr	r3, [r6, #0]
   2abc8:	602b      	str	r3, [r5, #0]

    rc = 0;
   2abca:	2500      	movs	r5, #0

done:
    cbrc = ble_gattc_disc_svc_uuid_cb(proc, rc, 0, &service);
   2abcc:	466b      	mov	r3, sp
   2abce:	2200      	movs	r2, #0
   2abd0:	4629      	mov	r1, r5
   2abd2:	4620      	mov	r0, r4
   2abd4:	f7ff ffb8 	bl	2ab48 <ble_gattc_disc_svc_uuid_cb>
    if (rc != 0 || cbrc != 0) {
   2abd8:	b935      	cbnz	r5, 2abe8 <ble_gattc_disc_svc_uuid_rx_hinfo+0x46>
   2abda:	b918      	cbnz	r0, 2abe4 <ble_gattc_disc_svc_uuid_rx_hinfo+0x42>
        return BLE_HS_EDONE;
    } else {
        return 0;
    }
}
   2abdc:	b006      	add	sp, #24
   2abde:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_EBADDATA;
   2abe0:	250a      	movs	r5, #10
   2abe2:	e7f3      	b.n	2abcc <ble_gattc_disc_svc_uuid_rx_hinfo+0x2a>
        return BLE_HS_EDONE;
   2abe4:	200e      	movs	r0, #14
   2abe6:	e7f9      	b.n	2abdc <ble_gattc_disc_svc_uuid_rx_hinfo+0x3a>
   2abe8:	200e      	movs	r0, #14
   2abea:	e7f7      	b.n	2abdc <ble_gattc_disc_svc_uuid_rx_hinfo+0x3a>

0002abec <ble_gattc_find_inc_svcs_cb>:
 */
static int
ble_gattc_find_inc_svcs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   2abec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2abee:	4604      	mov	r4, r0
   2abf0:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(service != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   2abf2:	4608      	mov	r0, r1
   2abf4:	b129      	cbz	r1, 2ac02 <ble_gattc_find_inc_svcs_cb+0x16>
   2abf6:	290e      	cmp	r1, #14
   2abf8:	d003      	beq.n	2ac02 <ble_gattc_find_inc_svcs_cb+0x16>
        STATS_INC(ble_gattc_stats, find_inc_svcs_fail);
   2abfa:	4909      	ldr	r1, [pc, #36]	; (2ac20 <ble_gattc_find_inc_svcs_cb+0x34>)
   2abfc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   2abfe:	3301      	adds	r3, #1
   2ac00:	628b      	str	r3, [r1, #40]	; 0x28
    }

    if (proc->find_inc_svcs.cb == NULL) {
   2ac02:	6965      	ldr	r5, [r4, #20]
   2ac04:	b14d      	cbz	r5, 2ac1a <ble_gattc_find_inc_svcs_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->find_inc_svcs.cb(proc->conn_handle,
   2ac06:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle),
   2ac08:	4611      	mov	r1, r2
   2ac0a:	f7ff ff39 	bl	2aa80 <ble_gattc_error>
   2ac0e:	4601      	mov	r1, r0
        rc = proc->find_inc_svcs.cb(proc->conn_handle,
   2ac10:	69a3      	ldr	r3, [r4, #24]
   2ac12:	4632      	mov	r2, r6
   2ac14:	4638      	mov	r0, r7
   2ac16:	47a8      	blx	r5
                                    service, proc->find_inc_svcs.cb_arg);
    }

    return rc;
}
   2ac18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   2ac1a:	2000      	movs	r0, #0
    return rc;
   2ac1c:	e7fc      	b.n	2ac18 <ble_gattc_find_inc_svcs_cb+0x2c>
   2ac1e:	bf00      	nop
   2ac20:	10005120 	.word	0x10005120

0002ac24 <ble_gattc_find_inc_svcs_tmo>:

static void
ble_gattc_find_inc_svcs_tmo(struct ble_gattc_proc *proc)
{
   2ac24:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_find_inc_svcs_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   2ac26:	2300      	movs	r3, #0
   2ac28:	461a      	mov	r2, r3
   2ac2a:	210d      	movs	r1, #13
   2ac2c:	f7ff ffde 	bl	2abec <ble_gattc_find_inc_svcs_cb>
}
   2ac30:	bd08      	pop	{r3, pc}

0002ac32 <ble_gattc_find_inc_svcs_err>:
 * find-included-services proc.
 */
static void
ble_gattc_find_inc_svcs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   2ac32:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (proc->find_inc_svcs.cur_start == 0 &&
   2ac34:	8a03      	ldrh	r3, [r0, #16]
   2ac36:	b913      	cbnz	r3, 2ac3e <ble_gattc_find_inc_svcs_err+0xc>
   2ac38:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   2ac3c:	d003      	beq.n	2ac46 <ble_gattc_find_inc_svcs_err+0x14>

        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_find_inc_svcs_cb(proc, status, att_handle, NULL);
   2ac3e:	2300      	movs	r3, #0
   2ac40:	f7ff ffd4 	bl	2abec <ble_gattc_find_inc_svcs_cb>
}
   2ac44:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   2ac46:	210e      	movs	r1, #14
   2ac48:	e7f9      	b.n	2ac3e <ble_gattc_find_inc_svcs_err+0xc>
	...

0002ac4c <ble_gattc_disc_all_chrs_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_all_chrs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_chr *chr)
{
   2ac4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ac4e:	4604      	mov	r4, r0
   2ac50:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(chr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   2ac52:	4608      	mov	r0, r1
   2ac54:	b129      	cbz	r1, 2ac62 <ble_gattc_disc_all_chrs_cb+0x16>
   2ac56:	290e      	cmp	r1, #14
   2ac58:	d003      	beq.n	2ac62 <ble_gattc_disc_all_chrs_cb+0x16>
        STATS_INC(ble_gattc_stats, disc_all_chrs_fail);
   2ac5a:	4909      	ldr	r1, [pc, #36]	; (2ac80 <ble_gattc_disc_all_chrs_cb+0x34>)
   2ac5c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   2ac5e:	3301      	adds	r3, #1
   2ac60:	630b      	str	r3, [r1, #48]	; 0x30
    }

    if (proc->disc_all_chrs.cb == NULL) {
   2ac62:	6925      	ldr	r5, [r4, #16]
   2ac64:	b14d      	cbz	r5, 2ac7a <ble_gattc_disc_all_chrs_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->disc_all_chrs.cb(proc->conn_handle,
   2ac66:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle), chr,
   2ac68:	4611      	mov	r1, r2
   2ac6a:	f7ff ff09 	bl	2aa80 <ble_gattc_error>
   2ac6e:	4601      	mov	r1, r0
        rc = proc->disc_all_chrs.cb(proc->conn_handle,
   2ac70:	6963      	ldr	r3, [r4, #20]
   2ac72:	4632      	mov	r2, r6
   2ac74:	4638      	mov	r0, r7
   2ac76:	47a8      	blx	r5
                                    proc->disc_all_chrs.cb_arg);
    }

    return rc;
}
   2ac78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   2ac7a:	2000      	movs	r0, #0
    return rc;
   2ac7c:	e7fc      	b.n	2ac78 <ble_gattc_disc_all_chrs_cb+0x2c>
   2ac7e:	bf00      	nop
   2ac80:	10005120 	.word	0x10005120

0002ac84 <ble_gattc_disc_all_chrs_tmo>:

static void
ble_gattc_disc_all_chrs_tmo(struct ble_gattc_proc *proc)
{
   2ac84:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_chrs_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   2ac86:	2300      	movs	r3, #0
   2ac88:	461a      	mov	r2, r3
   2ac8a:	210d      	movs	r1, #13
   2ac8c:	f7ff ffde 	bl	2ac4c <ble_gattc_disc_all_chrs_cb>
}
   2ac90:	bd08      	pop	{r3, pc}

0002ac92 <ble_gattc_disc_all_chrs_err>:
 * discover-all-characteristics proc.
 */
static void
ble_gattc_disc_all_chrs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   2ac92:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   2ac94:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   2ac98:	d003      	beq.n	2aca2 <ble_gattc_disc_all_chrs_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_chrs_cb(proc, status, att_handle, NULL);
   2ac9a:	2300      	movs	r3, #0
   2ac9c:	f7ff ffd6 	bl	2ac4c <ble_gattc_disc_all_chrs_cb>
}
   2aca0:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   2aca2:	210e      	movs	r1, #14
   2aca4:	e7f9      	b.n	2ac9a <ble_gattc_disc_all_chrs_err+0x8>
	...

0002aca8 <ble_gattc_disc_chr_uuid_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_chr_uuid_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_chr *chr)
{
   2aca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2acaa:	4604      	mov	r4, r0
   2acac:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(chr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   2acae:	4608      	mov	r0, r1
   2acb0:	b129      	cbz	r1, 2acbe <ble_gattc_disc_chr_uuid_cb+0x16>
   2acb2:	290e      	cmp	r1, #14
   2acb4:	d003      	beq.n	2acbe <ble_gattc_disc_chr_uuid_cb+0x16>
        STATS_INC(ble_gattc_stats, disc_chrs_uuid_fail);
   2acb6:	4909      	ldr	r1, [pc, #36]	; (2acdc <ble_gattc_disc_chr_uuid_cb+0x34>)
   2acb8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   2acba:	3301      	adds	r3, #1
   2acbc:	638b      	str	r3, [r1, #56]	; 0x38
    }

    if (proc->disc_chr_uuid.cb == NULL) {
   2acbe:	6a65      	ldr	r5, [r4, #36]	; 0x24
   2acc0:	b14d      	cbz	r5, 2acd6 <ble_gattc_disc_chr_uuid_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->disc_chr_uuid.cb(proc->conn_handle,
   2acc2:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle), chr,
   2acc4:	4611      	mov	r1, r2
   2acc6:	f7ff fedb 	bl	2aa80 <ble_gattc_error>
   2acca:	4601      	mov	r1, r0
        rc = proc->disc_chr_uuid.cb(proc->conn_handle,
   2accc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2acce:	4632      	mov	r2, r6
   2acd0:	4638      	mov	r0, r7
   2acd2:	47a8      	blx	r5
                                    proc->disc_chr_uuid.cb_arg);
    }

    return rc;
}
   2acd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   2acd6:	2000      	movs	r0, #0
    return rc;
   2acd8:	e7fc      	b.n	2acd4 <ble_gattc_disc_chr_uuid_cb+0x2c>
   2acda:	bf00      	nop
   2acdc:	10005120 	.word	0x10005120

0002ace0 <ble_gattc_disc_chr_uuid_tmo>:

static void
ble_gattc_disc_chr_uuid_tmo(struct ble_gattc_proc *proc)
{
   2ace0:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_chr_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   2ace2:	2300      	movs	r3, #0
   2ace4:	461a      	mov	r2, r3
   2ace6:	210d      	movs	r1, #13
   2ace8:	f7ff ffde 	bl	2aca8 <ble_gattc_disc_chr_uuid_cb>
}
   2acec:	bd08      	pop	{r3, pc}

0002acee <ble_gattc_disc_chr_uuid_err>:
 * discover-characteristic-by-uuid proc.
 */
static void
ble_gattc_disc_chr_uuid_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   2acee:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   2acf0:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   2acf4:	d003      	beq.n	2acfe <ble_gattc_disc_chr_uuid_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_chr_uuid_cb(proc, status, att_handle, NULL);
   2acf6:	2300      	movs	r3, #0
   2acf8:	f7ff ffd6 	bl	2aca8 <ble_gattc_disc_chr_uuid_cb>
}
   2acfc:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   2acfe:	210e      	movs	r1, #14
   2ad00:	e7f9      	b.n	2acf6 <ble_gattc_disc_chr_uuid_err+0x8>
	...

0002ad04 <ble_gattc_disc_all_dscs_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_all_dscs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_dsc *dsc)
{
   2ad04:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ad06:	b083      	sub	sp, #12
   2ad08:	4604      	mov	r4, r0
   2ad0a:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(dsc != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   2ad0c:	4608      	mov	r0, r1
   2ad0e:	b129      	cbz	r1, 2ad1c <ble_gattc_disc_all_dscs_cb+0x18>
   2ad10:	290e      	cmp	r1, #14
   2ad12:	d003      	beq.n	2ad1c <ble_gattc_disc_all_dscs_cb+0x18>
        STATS_INC(ble_gattc_stats, disc_all_dscs_fail);
   2ad14:	490a      	ldr	r1, [pc, #40]	; (2ad40 <ble_gattc_disc_all_dscs_cb+0x3c>)
   2ad16:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   2ad18:	3301      	adds	r3, #1
   2ad1a:	640b      	str	r3, [r1, #64]	; 0x40
    }

    if (proc->disc_all_dscs.cb == NULL) {
   2ad1c:	6965      	ldr	r5, [r4, #20]
   2ad1e:	b165      	cbz	r5, 2ad3a <ble_gattc_disc_all_dscs_cb+0x36>
        rc = 0;
    } else {
        rc = proc->disc_all_dscs.cb(proc->conn_handle,
   2ad20:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle),
   2ad22:	4611      	mov	r1, r2
   2ad24:	f7ff feac 	bl	2aa80 <ble_gattc_error>
   2ad28:	4601      	mov	r1, r0
        rc = proc->disc_all_dscs.cb(proc->conn_handle,
   2ad2a:	69a3      	ldr	r3, [r4, #24]
   2ad2c:	9300      	str	r3, [sp, #0]
   2ad2e:	4633      	mov	r3, r6
   2ad30:	89a2      	ldrh	r2, [r4, #12]
   2ad32:	4638      	mov	r0, r7
   2ad34:	47a8      	blx	r5
                                    proc->disc_all_dscs.chr_val_handle,
                                    dsc, proc->disc_all_dscs.cb_arg);
    }

    return rc;
}
   2ad36:	b003      	add	sp, #12
   2ad38:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = 0;
   2ad3a:	2000      	movs	r0, #0
    return rc;
   2ad3c:	e7fb      	b.n	2ad36 <ble_gattc_disc_all_dscs_cb+0x32>
   2ad3e:	bf00      	nop
   2ad40:	10005120 	.word	0x10005120

0002ad44 <ble_gattc_disc_all_dscs_tmo>:

static void
ble_gattc_disc_all_dscs_tmo(struct ble_gattc_proc *proc)
{
   2ad44:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_dscs_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   2ad46:	2300      	movs	r3, #0
   2ad48:	461a      	mov	r2, r3
   2ad4a:	210d      	movs	r1, #13
   2ad4c:	f7ff ffda 	bl	2ad04 <ble_gattc_disc_all_dscs_cb>
}
   2ad50:	bd08      	pop	{r3, pc}

0002ad52 <ble_gattc_disc_all_dscs_err>:
 * discover-all-descriptors proc.
 */
static void
ble_gattc_disc_all_dscs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   2ad52:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   2ad54:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   2ad58:	d003      	beq.n	2ad62 <ble_gattc_disc_all_dscs_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_dscs_cb(proc, status, att_handle, NULL);
   2ad5a:	2300      	movs	r3, #0
   2ad5c:	f7ff ffd2 	bl	2ad04 <ble_gattc_disc_all_dscs_cb>
}
   2ad60:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   2ad62:	210e      	movs	r1, #14
   2ad64:	e7f9      	b.n	2ad5a <ble_gattc_disc_all_dscs_err+0x8>

0002ad66 <ble_gattc_disc_all_dscs_rx_idata>:
 * response for the specified discover-all-descriptors proc.
 */
static int
ble_gattc_disc_all_dscs_rx_idata(struct ble_gattc_proc *proc,
                                 struct ble_att_find_info_idata *idata)
{
   2ad66:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ad68:	b087      	sub	sp, #28
   2ad6a:	4606      	mov	r6, r0
   2ad6c:	460c      	mov	r4, r1
    int cbrc;
    int rc;

    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (idata->attr_handle <= proc->disc_all_dscs.prev_handle) {
   2ad6e:	880b      	ldrh	r3, [r1, #0]
   2ad70:	89c2      	ldrh	r2, [r0, #14]
   2ad72:	4293      	cmp	r3, r2
   2ad74:	d914      	bls.n	2ada0 <ble_gattc_disc_all_dscs_rx_idata+0x3a>
        /* Peer sent descriptors out of order; terminate procedure. */
        rc = BLE_HS_EBADDATA;
        goto done;
    }
    proc->disc_all_dscs.prev_handle = idata->attr_handle;
   2ad76:	81c3      	strh	r3, [r0, #14]

    rc = 0;
   2ad78:	2700      	movs	r7, #0

done:
    dsc.handle = idata->attr_handle;
   2ad7a:	f834 3b04 	ldrh.w	r3, [r4], #4
   2ad7e:	f8ad 3000 	strh.w	r3, [sp]
    dsc.uuid = idata->uuid;
   2ad82:	ad01      	add	r5, sp, #4
   2ad84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2ad86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2ad88:	6823      	ldr	r3, [r4, #0]
   2ad8a:	602b      	str	r3, [r5, #0]

    cbrc = ble_gattc_disc_all_dscs_cb(proc, rc, 0, &dsc);
   2ad8c:	466b      	mov	r3, sp
   2ad8e:	2200      	movs	r2, #0
   2ad90:	4639      	mov	r1, r7
   2ad92:	4630      	mov	r0, r6
   2ad94:	f7ff ffb6 	bl	2ad04 <ble_gattc_disc_all_dscs_cb>
    if (rc != 0 || cbrc != 0) {
   2ad98:	b937      	cbnz	r7, 2ada8 <ble_gattc_disc_all_dscs_rx_idata+0x42>
   2ad9a:	b918      	cbnz	r0, 2ada4 <ble_gattc_disc_all_dscs_rx_idata+0x3e>
        return BLE_HS_EDONE;
    } else {
        return 0;
    }
}
   2ad9c:	b007      	add	sp, #28
   2ad9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = BLE_HS_EBADDATA;
   2ada0:	270a      	movs	r7, #10
   2ada2:	e7ea      	b.n	2ad7a <ble_gattc_disc_all_dscs_rx_idata+0x14>
        return BLE_HS_EDONE;
   2ada4:	200e      	movs	r0, #14
   2ada6:	e7f9      	b.n	2ad9c <ble_gattc_disc_all_dscs_rx_idata+0x36>
   2ada8:	200e      	movs	r0, #14
   2adaa:	e7f7      	b.n	2ad9c <ble_gattc_disc_all_dscs_rx_idata+0x36>

0002adac <ble_gattc_read_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_cb(struct ble_gattc_proc *proc, int status,
                  uint16_t att_handle, struct ble_gatt_attr *attr)
{
   2adac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2adae:	4604      	mov	r4, r0
   2adb0:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(attr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   2adb2:	4608      	mov	r0, r1
   2adb4:	b129      	cbz	r1, 2adc2 <ble_gattc_read_cb+0x16>
   2adb6:	290e      	cmp	r1, #14
   2adb8:	d003      	beq.n	2adc2 <ble_gattc_read_cb+0x16>
        STATS_INC(ble_gattc_stats, read_fail);
   2adba:	4909      	ldr	r1, [pc, #36]	; (2ade0 <ble_gattc_read_cb+0x34>)
   2adbc:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   2adbe:	3301      	adds	r3, #1
   2adc0:	648b      	str	r3, [r1, #72]	; 0x48
    }

    if (proc->read.cb == NULL) {
   2adc2:	6925      	ldr	r5, [r4, #16]
   2adc4:	b14d      	cbz	r5, 2adda <ble_gattc_read_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->read.cb(proc->conn_handle,
   2adc6:	8927      	ldrh	r7, [r4, #8]
                           ble_gattc_error(status, att_handle), attr,
   2adc8:	4611      	mov	r1, r2
   2adca:	f7ff fe59 	bl	2aa80 <ble_gattc_error>
   2adce:	4601      	mov	r1, r0
        rc = proc->read.cb(proc->conn_handle,
   2add0:	6963      	ldr	r3, [r4, #20]
   2add2:	4632      	mov	r2, r6
   2add4:	4638      	mov	r0, r7
   2add6:	47a8      	blx	r5
                           proc->read.cb_arg);
    }

    return rc;
}
   2add8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   2adda:	2000      	movs	r0, #0
    return rc;
   2addc:	e7fc      	b.n	2add8 <ble_gattc_read_cb+0x2c>
   2adde:	bf00      	nop
   2ade0:	10005120 	.word	0x10005120

0002ade4 <ble_gattc_read_tmo>:

static void
ble_gattc_read_tmo(struct ble_gattc_proc *proc)
{
   2ade4:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   2ade6:	2300      	movs	r3, #0
   2ade8:	461a      	mov	r2, r3
   2adea:	210d      	movs	r1, #13
   2adec:	f7ff ffde 	bl	2adac <ble_gattc_read_cb>
}
   2adf0:	bd08      	pop	{r3, pc}

0002adf2 <ble_gattc_read_err>:
 * read-characteristic-value proc.
 */
static void
ble_gattc_read_err(struct ble_gattc_proc *proc, int status,
                   uint16_t att_handle)
{
   2adf2:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_cb(proc, status, att_handle, NULL);
   2adf4:	2300      	movs	r3, #0
   2adf6:	f7ff ffd9 	bl	2adac <ble_gattc_read_cb>
}
   2adfa:	bd08      	pop	{r3, pc}

0002adfc <ble_gattc_read_rx_read_rsp>:
 * read-characteristic-value proc.
 */
static int
ble_gattc_read_rx_read_rsp(struct ble_gattc_proc *proc, int status,
                           struct os_mbuf **om)
{
   2adfc:	b510      	push	{r4, lr}
   2adfe:	b082      	sub	sp, #8
   2ae00:	4614      	mov	r4, r2
    struct ble_gatt_attr attr;

    ble_gattc_dbg_assert_proc_not_inserted(proc);

    attr.handle = proc->read.handle;
   2ae02:	8983      	ldrh	r3, [r0, #12]
   2ae04:	f8ad 3000 	strh.w	r3, [sp]
    attr.offset = 0;
   2ae08:	2200      	movs	r2, #0
   2ae0a:	f8ad 2002 	strh.w	r2, [sp, #2]
    attr.om = *om;
   2ae0e:	6823      	ldr	r3, [r4, #0]
   2ae10:	9301      	str	r3, [sp, #4]

    ble_gattc_read_cb(proc, status, 0, &attr);
   2ae12:	466b      	mov	r3, sp
   2ae14:	f7ff ffca 	bl	2adac <ble_gattc_read_cb>

    /* Indicate to the caller whether the application consumed the mbuf. */
    *om = attr.om;
   2ae18:	9b01      	ldr	r3, [sp, #4]
   2ae1a:	6023      	str	r3, [r4, #0]

    /* The read operation only has a single request / response exchange. */
    return BLE_HS_EDONE;
}
   2ae1c:	200e      	movs	r0, #14
   2ae1e:	b002      	add	sp, #8
   2ae20:	bd10      	pop	{r4, pc}
	...

0002ae24 <ble_gattc_read_uuid_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_uuid_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct ble_gatt_attr *attr)
{
   2ae24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ae26:	4604      	mov	r4, r0
   2ae28:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(attr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   2ae2a:	4608      	mov	r0, r1
   2ae2c:	b129      	cbz	r1, 2ae3a <ble_gattc_read_uuid_cb+0x16>
   2ae2e:	290e      	cmp	r1, #14
   2ae30:	d003      	beq.n	2ae3a <ble_gattc_read_uuid_cb+0x16>
        STATS_INC(ble_gattc_stats, read_uuid_fail);
   2ae32:	4909      	ldr	r1, [pc, #36]	; (2ae58 <ble_gattc_read_uuid_cb+0x34>)
   2ae34:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   2ae36:	3301      	adds	r3, #1
   2ae38:	650b      	str	r3, [r1, #80]	; 0x50
    }

    if (proc->read_uuid.cb == NULL) {
   2ae3a:	6a65      	ldr	r5, [r4, #36]	; 0x24
   2ae3c:	b14d      	cbz	r5, 2ae52 <ble_gattc_read_uuid_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->read_uuid.cb(proc->conn_handle,
   2ae3e:	8927      	ldrh	r7, [r4, #8]
                                ble_gattc_error(status, att_handle), attr,
   2ae40:	4611      	mov	r1, r2
   2ae42:	f7ff fe1d 	bl	2aa80 <ble_gattc_error>
   2ae46:	4601      	mov	r1, r0
        rc = proc->read_uuid.cb(proc->conn_handle,
   2ae48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2ae4a:	4632      	mov	r2, r6
   2ae4c:	4638      	mov	r0, r7
   2ae4e:	47a8      	blx	r5
                                proc->read_uuid.cb_arg);
    }

    return rc;
}
   2ae50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   2ae52:	2000      	movs	r0, #0
    return rc;
   2ae54:	e7fc      	b.n	2ae50 <ble_gattc_read_uuid_cb+0x2c>
   2ae56:	bf00      	nop
   2ae58:	10005120 	.word	0x10005120

0002ae5c <ble_gattc_read_uuid_tmo>:

static void
ble_gattc_read_uuid_tmo(struct ble_gattc_proc *proc)
{
   2ae5c:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   2ae5e:	2300      	movs	r3, #0
   2ae60:	461a      	mov	r2, r3
   2ae62:	210d      	movs	r1, #13
   2ae64:	f7ff ffde 	bl	2ae24 <ble_gattc_read_uuid_cb>
}
   2ae68:	bd08      	pop	{r3, pc}

0002ae6a <ble_gattc_read_uuid_err>:
 * read-using-characteristic-uuid proc.
 */
static void
ble_gattc_read_uuid_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   2ae6a:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_uuid_cb(proc, status, att_handle, NULL);
   2ae6c:	2300      	movs	r3, #0
   2ae6e:	f7ff ffd9 	bl	2ae24 <ble_gattc_read_uuid_cb>
}
   2ae72:	bd08      	pop	{r3, pc}

0002ae74 <ble_gattc_read_uuid_rx_complete>:
 * Handles a notification that a read-by-type response has been fully
 * processed for the specified read-using-characteristic-uuid proc.
 */
static int
ble_gattc_read_uuid_rx_complete(struct ble_gattc_proc *proc, int status)
{
   2ae74:	b510      	push	{r4, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0) {
   2ae76:	b931      	cbnz	r1, 2ae86 <ble_gattc_read_uuid_rx_complete+0x12>
    }

    /* XXX: We may need to send a follow-up request to address the possibility
     * of multiple characteristics with identical UUIDs.
     */
    ble_gattc_read_uuid_cb(proc, BLE_HS_EDONE, 0, NULL);
   2ae78:	2300      	movs	r3, #0
   2ae7a:	461a      	mov	r2, r3
   2ae7c:	210e      	movs	r1, #14
   2ae7e:	f7ff ffd1 	bl	2ae24 <ble_gattc_read_uuid_cb>
    return BLE_HS_EDONE;
}
   2ae82:	200e      	movs	r0, #14
   2ae84:	bd10      	pop	{r4, pc}
        ble_gattc_read_uuid_cb(proc, status, 0, NULL);
   2ae86:	2300      	movs	r3, #0
   2ae88:	461a      	mov	r2, r3
   2ae8a:	f7ff ffcb 	bl	2ae24 <ble_gattc_read_uuid_cb>
        return BLE_HS_EDONE;
   2ae8e:	e7f8      	b.n	2ae82 <ble_gattc_read_uuid_rx_complete+0xe>

0002ae90 <ble_gattc_read_long_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_long_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct ble_gatt_attr *attr)
{
   2ae90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ae92:	4604      	mov	r4, r0
   2ae94:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(attr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   2ae96:	4608      	mov	r0, r1
   2ae98:	b129      	cbz	r1, 2aea6 <ble_gattc_read_long_cb+0x16>
   2ae9a:	290e      	cmp	r1, #14
   2ae9c:	d003      	beq.n	2aea6 <ble_gattc_read_long_cb+0x16>
        STATS_INC(ble_gattc_stats, read_long_fail);
   2ae9e:	4909      	ldr	r1, [pc, #36]	; (2aec4 <ble_gattc_read_long_cb+0x34>)
   2aea0:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   2aea2:	3301      	adds	r3, #1
   2aea4:	658b      	str	r3, [r1, #88]	; 0x58
    }

    if (proc->read_long.cb == NULL) {
   2aea6:	6925      	ldr	r5, [r4, #16]
   2aea8:	b14d      	cbz	r5, 2aebe <ble_gattc_read_long_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->read_long.cb(proc->conn_handle,
   2aeaa:	8927      	ldrh	r7, [r4, #8]
                                ble_gattc_error(status, att_handle), attr,
   2aeac:	4611      	mov	r1, r2
   2aeae:	f7ff fde7 	bl	2aa80 <ble_gattc_error>
   2aeb2:	4601      	mov	r1, r0
        rc = proc->read_long.cb(proc->conn_handle,
   2aeb4:	6963      	ldr	r3, [r4, #20]
   2aeb6:	4632      	mov	r2, r6
   2aeb8:	4638      	mov	r0, r7
   2aeba:	47a8      	blx	r5
                                proc->read_long.cb_arg);
    }

    return rc;
}
   2aebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   2aebe:	2000      	movs	r0, #0
    return rc;
   2aec0:	e7fc      	b.n	2aebc <ble_gattc_read_long_cb+0x2c>
   2aec2:	bf00      	nop
   2aec4:	10005120 	.word	0x10005120

0002aec8 <ble_gattc_read_long_tmo>:

static void
ble_gattc_read_long_tmo(struct ble_gattc_proc *proc)
{
   2aec8:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_long_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   2aeca:	2300      	movs	r3, #0
   2aecc:	461a      	mov	r2, r3
   2aece:	210d      	movs	r1, #13
   2aed0:	f7ff ffde 	bl	2ae90 <ble_gattc_read_long_cb>
}
   2aed4:	bd08      	pop	{r3, pc}

0002aed6 <ble_gattc_read_long_err>:
 * read-long-characteristic proc.
 */
static void
ble_gattc_read_long_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   2aed6:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_long_cb(proc, status, att_handle, NULL);
   2aed8:	2300      	movs	r3, #0
   2aeda:	f7ff ffd9 	bl	2ae90 <ble_gattc_read_long_cb>
}
   2aede:	bd08      	pop	{r3, pc}

0002aee0 <ble_gattc_read_mult_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_mult_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct os_mbuf **om)
{
   2aee0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2aee2:	b083      	sub	sp, #12
   2aee4:	4606      	mov	r6, r0
   2aee6:	461c      	mov	r4, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(om != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   2aee8:	4608      	mov	r0, r1
   2aeea:	b129      	cbz	r1, 2aef8 <ble_gattc_read_mult_cb+0x18>
   2aeec:	290e      	cmp	r1, #14
   2aeee:	d003      	beq.n	2aef8 <ble_gattc_read_mult_cb+0x18>
        STATS_INC(ble_gattc_stats, read_mult_fail);
   2aef0:	490f      	ldr	r1, [pc, #60]	; (2af30 <ble_gattc_read_mult_cb+0x50>)
   2aef2:	6e0b      	ldr	r3, [r1, #96]	; 0x60
   2aef4:	3301      	adds	r3, #1
   2aef6:	660b      	str	r3, [r1, #96]	; 0x60
    }

    attr.handle = 0;
   2aef8:	2300      	movs	r3, #0
   2aefa:	f8ad 3000 	strh.w	r3, [sp]
    attr.offset = 0;
   2aefe:	f8ad 3002 	strh.w	r3, [sp, #2]
    if (om == NULL) {
   2af02:	b18c      	cbz	r4, 2af28 <ble_gattc_read_mult_cb+0x48>
        attr.om = NULL;
    } else {
        attr.om = *om;
   2af04:	6823      	ldr	r3, [r4, #0]
   2af06:	9301      	str	r3, [sp, #4]
    }

    if (proc->read_mult.cb == NULL) {
   2af08:	6a35      	ldr	r5, [r6, #32]
   2af0a:	b17d      	cbz	r5, 2af2c <ble_gattc_read_mult_cb+0x4c>
        rc = 0;
    } else {
        rc = proc->read_mult.cb(proc->conn_handle,
   2af0c:	8937      	ldrh	r7, [r6, #8]
                                ble_gattc_error(status, att_handle), &attr,
   2af0e:	4611      	mov	r1, r2
   2af10:	f7ff fdb6 	bl	2aa80 <ble_gattc_error>
   2af14:	4601      	mov	r1, r0
        rc = proc->read_mult.cb(proc->conn_handle,
   2af16:	6a73      	ldr	r3, [r6, #36]	; 0x24
   2af18:	466a      	mov	r2, sp
   2af1a:	4638      	mov	r0, r7
   2af1c:	47a8      	blx	r5
                                proc->read_mult.cb_arg);
    }

    /* Indicate to the caller whether the application consumed the mbuf. */
    if (om != NULL) {
   2af1e:	b10c      	cbz	r4, 2af24 <ble_gattc_read_mult_cb+0x44>
        *om = attr.om;
   2af20:	9b01      	ldr	r3, [sp, #4]
   2af22:	6023      	str	r3, [r4, #0]
    }

    return rc;
}
   2af24:	b003      	add	sp, #12
   2af26:	bdf0      	pop	{r4, r5, r6, r7, pc}
        attr.om = NULL;
   2af28:	9301      	str	r3, [sp, #4]
   2af2a:	e7ed      	b.n	2af08 <ble_gattc_read_mult_cb+0x28>
        rc = 0;
   2af2c:	2000      	movs	r0, #0
   2af2e:	e7f6      	b.n	2af1e <ble_gattc_read_mult_cb+0x3e>
   2af30:	10005120 	.word	0x10005120

0002af34 <ble_gattc_read_mult_tmo>:

static void
ble_gattc_read_mult_tmo(struct ble_gattc_proc *proc)
{
   2af34:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_mult_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   2af36:	2300      	movs	r3, #0
   2af38:	461a      	mov	r2, r3
   2af3a:	210d      	movs	r1, #13
   2af3c:	f7ff ffd0 	bl	2aee0 <ble_gattc_read_mult_cb>
}
   2af40:	bd08      	pop	{r3, pc}

0002af42 <ble_gattc_read_mult_err>:
 * read-multiple-characteristics proc.
 */
static void
ble_gattc_read_mult_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   2af42:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_mult_cb(proc, status, att_handle, NULL);
   2af44:	2300      	movs	r3, #0
   2af46:	f7ff ffcb 	bl	2aee0 <ble_gattc_read_mult_cb>
}
   2af4a:	bd08      	pop	{r3, pc}

0002af4c <ble_gattc_write_long_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_write_long_cb(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   2af4c:	b570      	push	{r4, r5, r6, lr}
   2af4e:	4604      	mov	r4, r0
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   2af50:	4608      	mov	r0, r1
   2af52:	b129      	cbz	r1, 2af60 <ble_gattc_write_long_cb+0x14>
   2af54:	290e      	cmp	r1, #14
   2af56:	d003      	beq.n	2af60 <ble_gattc_write_long_cb+0x14>
        STATS_INC(ble_gattc_stats, write_long_fail);
   2af58:	4909      	ldr	r1, [pc, #36]	; (2af80 <ble_gattc_write_long_cb+0x34>)
   2af5a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
   2af5c:	3301      	adds	r3, #1
   2af5e:	678b      	str	r3, [r1, #120]	; 0x78
    }

    if (proc->write_long.cb == NULL) {
   2af60:	69a5      	ldr	r5, [r4, #24]
   2af62:	b155      	cbz	r5, 2af7a <ble_gattc_write_long_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->write_long.cb(proc->conn_handle,
   2af64:	8926      	ldrh	r6, [r4, #8]
                                 ble_gattc_error(status, att_handle),
   2af66:	4611      	mov	r1, r2
   2af68:	f7ff fd8a 	bl	2aa80 <ble_gattc_error>
   2af6c:	4601      	mov	r1, r0
        rc = proc->write_long.cb(proc->conn_handle,
   2af6e:	69e3      	ldr	r3, [r4, #28]
   2af70:	f104 020c 	add.w	r2, r4, #12
   2af74:	4630      	mov	r0, r6
   2af76:	47a8      	blx	r5
                                 &proc->write_long.attr,
                                 proc->write_long.cb_arg);
    }

    return rc;
}
   2af78:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   2af7a:	2000      	movs	r0, #0
    return rc;
   2af7c:	e7fc      	b.n	2af78 <ble_gattc_write_long_cb+0x2c>
   2af7e:	bf00      	nop
   2af80:	10005120 	.word	0x10005120

0002af84 <ble_gattc_write_long_tmo>:

static void
ble_gattc_write_long_tmo(struct ble_gattc_proc *proc)
{
   2af84:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_write_long_cb(proc, BLE_HS_ETIMEOUT, 0);
   2af86:	2200      	movs	r2, #0
   2af88:	210d      	movs	r1, #13
   2af8a:	f7ff ffdf 	bl	2af4c <ble_gattc_write_long_cb>
}
   2af8e:	bd08      	pop	{r3, pc}

0002af90 <ble_gattc_write_long_rx_exec>:
 * Handles an incoming execute-write-response for the specified
 * write-long-characteristic-values proc.
 */
static int
ble_gattc_write_long_rx_exec(struct ble_gattc_proc *proc, int status)
{
   2af90:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (proc->write_long.attr.offset <
   2af92:	89c2      	ldrh	r2, [r0, #14]
        OS_MBUF_PKTLEN(proc->write_long.attr.om)) {
   2af94:	6903      	ldr	r3, [r0, #16]
   2af96:	8a1b      	ldrh	r3, [r3, #16]
    if (proc->write_long.attr.offset <
   2af98:	429a      	cmp	r2, r3
   2af9a:	d201      	bcs.n	2afa0 <ble_gattc_write_long_rx_exec+0x10>

        /* Expecting an execute write response, not a prepare write
         * response.
         */
        return BLE_HS_EBADDATA;
   2af9c:	200a      	movs	r0, #10
    }

    ble_gattc_write_long_cb(proc, status, 0);
    return BLE_HS_EDONE;
}
   2af9e:	bd08      	pop	{r3, pc}
    ble_gattc_write_long_cb(proc, status, 0);
   2afa0:	2200      	movs	r2, #0
   2afa2:	f7ff ffd3 	bl	2af4c <ble_gattc_write_long_cb>
    return BLE_HS_EDONE;
   2afa6:	200e      	movs	r0, #14
   2afa8:	e7f9      	b.n	2af9e <ble_gattc_write_long_rx_exec+0xe>
	...

0002afac <ble_gattc_write_reliable_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_write_reliable_cb(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   2afac:	b570      	push	{r4, r5, r6, lr}
   2afae:	b082      	sub	sp, #8
   2afb0:	4604      	mov	r4, r0
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   2afb2:	4608      	mov	r0, r1
   2afb4:	b139      	cbz	r1, 2afc6 <ble_gattc_write_reliable_cb+0x1a>
   2afb6:	290e      	cmp	r1, #14
   2afb8:	d005      	beq.n	2afc6 <ble_gattc_write_reliable_cb+0x1a>
        STATS_INC(ble_gattc_stats, write_reliable_fail);
   2afba:	490c      	ldr	r1, [pc, #48]	; (2afec <ble_gattc_write_reliable_cb+0x40>)
   2afbc:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   2afc0:	3301      	adds	r3, #1
   2afc2:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }

    if (proc->write_reliable.cb == NULL) {
   2afc6:	6b25      	ldr	r5, [r4, #48]	; 0x30
   2afc8:	b175      	cbz	r5, 2afe8 <ble_gattc_write_reliable_cb+0x3c>
        rc = 0;
    } else {
        rc = proc->write_reliable.cb(proc->conn_handle,
   2afca:	8926      	ldrh	r6, [r4, #8]
                                     ble_gattc_error(status, att_handle),
   2afcc:	4611      	mov	r1, r2
   2afce:	f7ff fd57 	bl	2aa80 <ble_gattc_error>
   2afd2:	4601      	mov	r1, r0
        rc = proc->write_reliable.cb(proc->conn_handle,
   2afd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2afd6:	9300      	str	r3, [sp, #0]
   2afd8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   2afdc:	f104 020c 	add.w	r2, r4, #12
   2afe0:	4630      	mov	r0, r6
   2afe2:	47a8      	blx	r5
                                     proc->write_reliable.num_attrs,
                                     proc->write_reliable.cb_arg);
    }

    return rc;
}
   2afe4:	b002      	add	sp, #8
   2afe6:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   2afe8:	2000      	movs	r0, #0
    return rc;
   2afea:	e7fb      	b.n	2afe4 <ble_gattc_write_reliable_cb+0x38>
   2afec:	10005120 	.word	0x10005120

0002aff0 <ble_gattc_write_reliable_tmo>:

static void
ble_gattc_write_reliable_tmo(struct ble_gattc_proc *proc)
{
   2aff0:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_write_reliable_cb(proc, BLE_HS_ETIMEOUT, 0);
   2aff2:	2200      	movs	r2, #0
   2aff4:	210d      	movs	r1, #13
   2aff6:	f7ff ffd9 	bl	2afac <ble_gattc_write_reliable_cb>
}
   2affa:	bd08      	pop	{r3, pc}

0002affc <ble_gattc_write_reliable_rx_exec>:
 * Handles an incoming execute-write-response for the specified
 * write-reliable-characteristic-values proc.
 */
static int
ble_gattc_write_reliable_rx_exec(struct ble_gattc_proc *proc, int status)
{
   2affc:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_write_reliable_cb(proc, status, 0);
   2affe:	2200      	movs	r2, #0
   2b000:	f7ff ffd4 	bl	2afac <ble_gattc_write_reliable_cb>
    return BLE_HS_EDONE;
}
   2b004:	200e      	movs	r0, #14
   2b006:	bd08      	pop	{r3, pc}

0002b008 <ble_gattc_proc_set_resume_timer>:
{
   2b008:	b508      	push	{r3, lr}
    proc->flags |= BLE_GATTC_PROC_F_STALLED;
   2b00a:	7ac3      	ldrb	r3, [r0, #11]
   2b00c:	f043 0301 	orr.w	r3, r3, #1
   2b010:	72c3      	strb	r3, [r0, #11]
    if (ble_gattc_resume_at == 0) {
   2b012:	4b07      	ldr	r3, [pc, #28]	; (2b030 <ble_gattc_proc_set_resume_timer+0x28>)
   2b014:	681b      	ldr	r3, [r3, #0]
   2b016:	b103      	cbz	r3, 2b01a <ble_gattc_proc_set_resume_timer+0x12>
}
   2b018:	bd08      	pop	{r3, pc}
    return os_time_get();
   2b01a:	f7ef fb15 	bl	1a648 <os_time_get>
        ble_gattc_resume_at = ble_npl_time_get() +
   2b01e:	3080      	adds	r0, #128	; 0x80
   2b020:	4b03      	ldr	r3, [pc, #12]	; (2b030 <ble_gattc_proc_set_resume_timer+0x28>)
   2b022:	6018      	str	r0, [r3, #0]
        if (ble_gattc_resume_at == 0) {
   2b024:	2800      	cmp	r0, #0
   2b026:	d1f7      	bne.n	2b018 <ble_gattc_proc_set_resume_timer+0x10>
            ble_gattc_resume_at++;
   2b028:	3001      	adds	r0, #1
   2b02a:	6018      	str	r0, [r3, #0]
}
   2b02c:	e7f4      	b.n	2b018 <ble_gattc_proc_set_resume_timer+0x10>
   2b02e:	bf00      	nop
   2b030:	1000511c 	.word	0x1000511c

0002b034 <ble_gattc_process_resume_status>:
{
   2b034:	b508      	push	{r3, lr}
    switch (status) {
   2b036:	460b      	mov	r3, r1
   2b038:	b121      	cbz	r1, 2b044 <ble_gattc_process_resume_status+0x10>
   2b03a:	2906      	cmp	r1, #6
   2b03c:	d102      	bne.n	2b044 <ble_gattc_process_resume_status+0x10>
        ble_gattc_proc_set_resume_timer(proc);
   2b03e:	f7ff ffe3 	bl	2b008 <ble_gattc_proc_set_resume_timer>
        return 0;
   2b042:	2300      	movs	r3, #0
}
   2b044:	4618      	mov	r0, r3
   2b046:	bd08      	pop	{r3, pc}

0002b048 <ble_gattc_proc_set_exp_timer>:
{
   2b048:	b510      	push	{r4, lr}
   2b04a:	4604      	mov	r4, r0
   2b04c:	f7ef fafc 	bl	1a648 <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   2b050:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   2b054:	6060      	str	r0, [r4, #4]
}
   2b056:	bd10      	pop	{r4, pc}

0002b058 <ble_gattc_ticks_until_resume>:
{
   2b058:	b508      	push	{r3, lr}
    if (ble_gattc_resume_at == 0) {
   2b05a:	4b08      	ldr	r3, [pc, #32]	; (2b07c <ble_gattc_ticks_until_resume+0x24>)
   2b05c:	681b      	ldr	r3, [r3, #0]
   2b05e:	b13b      	cbz	r3, 2b070 <ble_gattc_ticks_until_resume+0x18>
   2b060:	f7ef faf2 	bl	1a648 <os_time_get>
    diff = ble_gattc_resume_at - now;
   2b064:	4b05      	ldr	r3, [pc, #20]	; (2b07c <ble_gattc_ticks_until_resume+0x24>)
   2b066:	681b      	ldr	r3, [r3, #0]
   2b068:	1a18      	subs	r0, r3, r0
    if (diff <= 0) {
   2b06a:	2800      	cmp	r0, #0
   2b06c:	dd03      	ble.n	2b076 <ble_gattc_ticks_until_resume+0x1e>
}
   2b06e:	bd08      	pop	{r3, pc}
        return BLE_HS_FOREVER;
   2b070:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2b074:	e7fb      	b.n	2b06e <ble_gattc_ticks_until_resume+0x16>
        return 0;
   2b076:	2000      	movs	r0, #0
   2b078:	e7f9      	b.n	2b06e <ble_gattc_ticks_until_resume+0x16>
   2b07a:	bf00      	nop
   2b07c:	1000511c 	.word	0x1000511c

0002b080 <ble_gattc_extract>:
{
   2b080:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b084:	4681      	mov	r9, r0
   2b086:	4688      	mov	r8, r1
   2b088:	4692      	mov	sl, r2
   2b08a:	461f      	mov	r7, r3
    STAILQ_INIT(dst_list);
   2b08c:	2500      	movs	r5, #0
   2b08e:	601d      	str	r5, [r3, #0]
   2b090:	605b      	str	r3, [r3, #4]
    ble_hs_lock();
   2b092:	f002 ff7d 	bl	2df90 <ble_hs_lock>
    proc = STAILQ_FIRST(&ble_gattc_procs);
   2b096:	4b17      	ldr	r3, [pc, #92]	; (2b0f4 <ble_gattc_extract+0x74>)
   2b098:	681c      	ldr	r4, [r3, #0]
    num_extracted = 0;
   2b09a:	46ab      	mov	fp, r5
    while (proc != NULL) {
   2b09c:	e00b      	b.n	2b0b6 <ble_gattc_extract+0x36>
                STAILQ_REMOVE_HEAD(&ble_gattc_procs, next);
   2b09e:	4a15      	ldr	r2, [pc, #84]	; (2b0f4 <ble_gattc_extract+0x74>)
   2b0a0:	6813      	ldr	r3, [r2, #0]
   2b0a2:	681b      	ldr	r3, [r3, #0]
   2b0a4:	6013      	str	r3, [r2, #0]
   2b0a6:	b9a3      	cbnz	r3, 2b0d2 <ble_gattc_extract+0x52>
   2b0a8:	6052      	str	r2, [r2, #4]
   2b0aa:	e012      	b.n	2b0d2 <ble_gattc_extract+0x52>
                STAILQ_REMOVE_AFTER(&ble_gattc_procs, prev, next);
   2b0ac:	4b11      	ldr	r3, [pc, #68]	; (2b0f4 <ble_gattc_extract+0x74>)
   2b0ae:	605d      	str	r5, [r3, #4]
   2b0b0:	e00f      	b.n	2b0d2 <ble_gattc_extract+0x52>
            prev = proc;
   2b0b2:	4625      	mov	r5, r4
   2b0b4:	4634      	mov	r4, r6
    while (proc != NULL) {
   2b0b6:	b1c4      	cbz	r4, 2b0ea <ble_gattc_extract+0x6a>
        next = STAILQ_NEXT(proc, next);
   2b0b8:	6826      	ldr	r6, [r4, #0]
        if (cb(proc, arg)) {
   2b0ba:	4641      	mov	r1, r8
   2b0bc:	4620      	mov	r0, r4
   2b0be:	47c8      	blx	r9
   2b0c0:	2800      	cmp	r0, #0
   2b0c2:	d0f6      	beq.n	2b0b2 <ble_gattc_extract+0x32>
            if (prev == NULL) {
   2b0c4:	2d00      	cmp	r5, #0
   2b0c6:	d0ea      	beq.n	2b09e <ble_gattc_extract+0x1e>
                STAILQ_REMOVE_AFTER(&ble_gattc_procs, prev, next);
   2b0c8:	682b      	ldr	r3, [r5, #0]
   2b0ca:	681b      	ldr	r3, [r3, #0]
   2b0cc:	602b      	str	r3, [r5, #0]
   2b0ce:	2b00      	cmp	r3, #0
   2b0d0:	d0ec      	beq.n	2b0ac <ble_gattc_extract+0x2c>
            STAILQ_INSERT_TAIL(dst_list, proc, next);
   2b0d2:	2300      	movs	r3, #0
   2b0d4:	6023      	str	r3, [r4, #0]
   2b0d6:	687b      	ldr	r3, [r7, #4]
   2b0d8:	601c      	str	r4, [r3, #0]
   2b0da:	607c      	str	r4, [r7, #4]
            if (max_procs > 0) {
   2b0dc:	f1ba 0f00 	cmp.w	sl, #0
   2b0e0:	dde8      	ble.n	2b0b4 <ble_gattc_extract+0x34>
                num_extracted++;
   2b0e2:	f10b 0b01 	add.w	fp, fp, #1
                if (num_extracted >= max_procs) {
   2b0e6:	45da      	cmp	sl, fp
   2b0e8:	dce4      	bgt.n	2b0b4 <ble_gattc_extract+0x34>
    ble_hs_unlock();
   2b0ea:	f002 ff55 	bl	2df98 <ble_hs_unlock>
}
   2b0ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b0f2:	bf00      	nop
   2b0f4:	10005114 	.word	0x10005114

0002b0f8 <ble_gattc_extract_expired>:
{
   2b0f8:	b510      	push	{r4, lr}
   2b0fa:	b082      	sub	sp, #8
   2b0fc:	4604      	mov	r4, r0
   2b0fe:	f7ef faa3 	bl	1a648 <os_time_get>
    criteria.now = ble_npl_time_get();
   2b102:	9000      	str	r0, [sp, #0]
    criteria.next_exp_in = BLE_HS_FOREVER;
   2b104:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   2b108:	9301      	str	r3, [sp, #4]
    STAILQ_INIT(dst_list);
   2b10a:	2200      	movs	r2, #0
   2b10c:	6022      	str	r2, [r4, #0]
   2b10e:	6064      	str	r4, [r4, #4]
    ble_gattc_extract(ble_gattc_proc_matches_expired, &criteria, 0, dst_list);
   2b110:	4623      	mov	r3, r4
   2b112:	4669      	mov	r1, sp
   2b114:	4802      	ldr	r0, [pc, #8]	; (2b120 <ble_gattc_extract_expired+0x28>)
   2b116:	f7ff ffb3 	bl	2b080 <ble_gattc_extract>
}
   2b11a:	9801      	ldr	r0, [sp, #4]
   2b11c:	b002      	add	sp, #8
   2b11e:	bd10      	pop	{r4, pc}
   2b120:	0002aa19 	.word	0x0002aa19

0002b124 <ble_gattc_extract_stalled>:
{
   2b124:	b508      	push	{r3, lr}
   2b126:	4603      	mov	r3, r0
    ble_gattc_extract(ble_gattc_proc_matches_stalled, NULL, 0, dst_list);
   2b128:	2200      	movs	r2, #0
   2b12a:	4611      	mov	r1, r2
   2b12c:	4801      	ldr	r0, [pc, #4]	; (2b134 <ble_gattc_extract_stalled+0x10>)
   2b12e:	f7ff ffa7 	bl	2b080 <ble_gattc_extract>
}
   2b132:	bd08      	pop	{r3, pc}
   2b134:	0002aa63 	.word	0x0002aa63

0002b138 <ble_gattc_extract_by_conn_op>:
{
   2b138:	b500      	push	{lr}
   2b13a:	b083      	sub	sp, #12
    criteria.conn_handle = conn_handle;
   2b13c:	f8ad 0004 	strh.w	r0, [sp, #4]
    criteria.op = op;
   2b140:	f88d 1006 	strb.w	r1, [sp, #6]
    ble_gattc_extract(ble_gattc_proc_matches_conn_op, &criteria, max_procs, dst_list);
   2b144:	a901      	add	r1, sp, #4
   2b146:	4803      	ldr	r0, [pc, #12]	; (2b154 <ble_gattc_extract_by_conn_op+0x1c>)
   2b148:	f7ff ff9a 	bl	2b080 <ble_gattc_extract>
}
   2b14c:	b003      	add	sp, #12
   2b14e:	f85d fb04 	ldr.w	pc, [sp], #4
   2b152:	bf00      	nop
   2b154:	0002a9f5 	.word	0x0002a9f5

0002b158 <ble_gattc_extract_first_by_conn_op>:
{
   2b158:	b500      	push	{lr}
   2b15a:	b083      	sub	sp, #12
    ble_gattc_extract_by_conn_op(conn_handle, op, 1, &dst_list);
   2b15c:	466b      	mov	r3, sp
   2b15e:	2201      	movs	r2, #1
   2b160:	f7ff ffea 	bl	2b138 <ble_gattc_extract_by_conn_op>
}
   2b164:	9800      	ldr	r0, [sp, #0]
   2b166:	b003      	add	sp, #12
   2b168:	f85d fb04 	ldr.w	pc, [sp], #4

0002b16c <ble_gattc_extract_one>:
{
   2b16c:	b500      	push	{lr}
   2b16e:	b083      	sub	sp, #12
    ble_gattc_extract(cb, arg, 1, &dst_list);
   2b170:	466b      	mov	r3, sp
   2b172:	2201      	movs	r2, #1
   2b174:	f7ff ff84 	bl	2b080 <ble_gattc_extract>
}
   2b178:	9800      	ldr	r0, [sp, #0]
   2b17a:	b003      	add	sp, #12
   2b17c:	f85d fb04 	ldr.w	pc, [sp], #4

0002b180 <ble_gattc_extract_with_rx_entry>:
{
   2b180:	b510      	push	{r4, lr}
   2b182:	b084      	sub	sp, #16
   2b184:	461c      	mov	r4, r3
    criteria.conn_handle = conn_handle;
   2b186:	f8ad 0000 	strh.w	r0, [sp]
    criteria.rx_entries = rx_entries;
   2b18a:	9101      	str	r1, [sp, #4]
    criteria.num_rx_entries = num_rx_entries;
   2b18c:	9202      	str	r2, [sp, #8]
    criteria.matching_rx_entry = NULL;
   2b18e:	2300      	movs	r3, #0
   2b190:	9303      	str	r3, [sp, #12]
    proc = ble_gattc_extract_one(ble_gattc_proc_matches_conn_rx_entry,
   2b192:	4669      	mov	r1, sp
   2b194:	4803      	ldr	r0, [pc, #12]	; (2b1a4 <ble_gattc_extract_with_rx_entry+0x24>)
   2b196:	f7ff ffe9 	bl	2b16c <ble_gattc_extract_one>
    *out_rx_entry = criteria.matching_rx_entry;
   2b19a:	9b03      	ldr	r3, [sp, #12]
   2b19c:	6023      	str	r3, [r4, #0]
}
   2b19e:	b004      	add	sp, #16
   2b1a0:	bd10      	pop	{r4, pc}
   2b1a2:	bf00      	nop
   2b1a4:	0002aa37 	.word	0x0002aa37

0002b1a8 <ble_gattc_proc_insert>:
{
   2b1a8:	b510      	push	{r4, lr}
   2b1aa:	4604      	mov	r4, r0
    ble_hs_lock();
   2b1ac:	f002 fef0 	bl	2df90 <ble_hs_lock>
    STAILQ_INSERT_TAIL(&ble_gattc_procs, proc, next);
   2b1b0:	2300      	movs	r3, #0
   2b1b2:	6023      	str	r3, [r4, #0]
   2b1b4:	4b03      	ldr	r3, [pc, #12]	; (2b1c4 <ble_gattc_proc_insert+0x1c>)
   2b1b6:	685a      	ldr	r2, [r3, #4]
   2b1b8:	6014      	str	r4, [r2, #0]
   2b1ba:	605c      	str	r4, [r3, #4]
    ble_hs_unlock();
   2b1bc:	f002 feec 	bl	2df98 <ble_hs_unlock>
}
   2b1c0:	bd10      	pop	{r4, pc}
   2b1c2:	bf00      	nop
   2b1c4:	10005114 	.word	0x10005114

0002b1c8 <ble_gattc_indicate_tmo>:
    ble_gatts_send_next_indicate(proc->conn_handle);
}

static void
ble_gattc_indicate_tmo(struct ble_gattc_proc *proc)
{
   2b1c8:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gap_notify_tx_event(BLE_HS_ETIMEOUT, proc->conn_handle,
   2b1ca:	2301      	movs	r3, #1
   2b1cc:	8982      	ldrh	r2, [r0, #12]
   2b1ce:	8901      	ldrh	r1, [r0, #8]
   2b1d0:	200d      	movs	r0, #13
   2b1d2:	f7ff fa7e 	bl	2a6d2 <ble_gap_notify_tx_event>
                            proc->indicate.chr_val_handle, 1);
}
   2b1d6:	bd08      	pop	{r3, pc}

0002b1d8 <ble_gattc_write_cb>:
{
   2b1d8:	b570      	push	{r4, r5, r6, lr}
   2b1da:	b082      	sub	sp, #8
   2b1dc:	4604      	mov	r4, r0
    if (status != 0 && status != BLE_HS_EDONE) {
   2b1de:	4608      	mov	r0, r1
   2b1e0:	b129      	cbz	r1, 2b1ee <ble_gattc_write_cb+0x16>
   2b1e2:	290e      	cmp	r1, #14
   2b1e4:	d003      	beq.n	2b1ee <ble_gattc_write_cb+0x16>
        STATS_INC(ble_gattc_stats, write_fail);
   2b1e6:	490c      	ldr	r1, [pc, #48]	; (2b218 <ble_gattc_write_cb+0x40>)
   2b1e8:	6f0b      	ldr	r3, [r1, #112]	; 0x70
   2b1ea:	3301      	adds	r3, #1
   2b1ec:	670b      	str	r3, [r1, #112]	; 0x70
    if (proc->write.cb == NULL) {
   2b1ee:	6925      	ldr	r5, [r4, #16]
   2b1f0:	b185      	cbz	r5, 2b214 <ble_gattc_write_cb+0x3c>
        memset(&attr, 0, sizeof attr);
   2b1f2:	2300      	movs	r3, #0
   2b1f4:	9300      	str	r3, [sp, #0]
   2b1f6:	9301      	str	r3, [sp, #4]
        attr.handle = proc->write.att_handle;
   2b1f8:	89a3      	ldrh	r3, [r4, #12]
   2b1fa:	f8ad 3000 	strh.w	r3, [sp]
        rc = proc->write.cb(proc->conn_handle,
   2b1fe:	8926      	ldrh	r6, [r4, #8]
                            ble_gattc_error(status, att_handle),
   2b200:	4611      	mov	r1, r2
   2b202:	f7ff fc3d 	bl	2aa80 <ble_gattc_error>
   2b206:	4601      	mov	r1, r0
        rc = proc->write.cb(proc->conn_handle,
   2b208:	6963      	ldr	r3, [r4, #20]
   2b20a:	466a      	mov	r2, sp
   2b20c:	4630      	mov	r0, r6
   2b20e:	47a8      	blx	r5
}
   2b210:	b002      	add	sp, #8
   2b212:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   2b214:	2000      	movs	r0, #0
    return rc;
   2b216:	e7fb      	b.n	2b210 <ble_gattc_write_cb+0x38>
   2b218:	10005120 	.word	0x10005120

0002b21c <ble_gattc_write_tmo>:
{
   2b21c:	b508      	push	{r3, lr}
    ble_gattc_write_cb(proc, BLE_HS_ETIMEOUT, 0);
   2b21e:	2200      	movs	r2, #0
   2b220:	210d      	movs	r1, #13
   2b222:	f7ff ffd9 	bl	2b1d8 <ble_gattc_write_cb>
}
   2b226:	bd08      	pop	{r3, pc}

0002b228 <ble_gattc_write_err>:
{
   2b228:	b508      	push	{r3, lr}
    ble_gattc_write_cb(proc, status, att_handle);
   2b22a:	f7ff ffd5 	bl	2b1d8 <ble_gattc_write_cb>
}
   2b22e:	bd08      	pop	{r3, pc}

0002b230 <ble_gattc_proc_free>:
    if (proc != NULL) {
   2b230:	b1e8      	cbz	r0, 2b26e <ble_gattc_proc_free+0x3e>
{
   2b232:	b538      	push	{r3, r4, r5, lr}
   2b234:	4605      	mov	r5, r0
        switch (proc->op) {
   2b236:	7a83      	ldrb	r3, [r0, #10]
   2b238:	2b0c      	cmp	r3, #12
   2b23a:	d006      	beq.n	2b24a <ble_gattc_proc_free+0x1a>
   2b23c:	2b0d      	cmp	r3, #13
   2b23e:	d014      	beq.n	2b26a <ble_gattc_proc_free+0x3a>
        rc = os_memblock_put(&ble_gattc_proc_pool, proc);
   2b240:	4629      	mov	r1, r5
   2b242:	480b      	ldr	r0, [pc, #44]	; (2b270 <ble_gattc_proc_free+0x40>)
   2b244:	f7ee fe2a 	bl	19e9c <os_memblock_put>
}
   2b248:	bd38      	pop	{r3, r4, r5, pc}
                os_mbuf_free_chain(proc->write_long.attr.om);
   2b24a:	6900      	ldr	r0, [r0, #16]
   2b24c:	f7ee f9bf 	bl	195ce <os_mbuf_free_chain>
            break;
   2b250:	e7f6      	b.n	2b240 <ble_gattc_proc_free+0x10>
                    os_mbuf_free_chain(proc->write_reliable.attrs[i].om);
   2b252:	1c5c      	adds	r4, r3, #1
   2b254:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
   2b258:	6898      	ldr	r0, [r3, #8]
   2b25a:	f7ee f9b8 	bl	195ce <os_mbuf_free_chain>
                for (i = 0; i < proc->write_reliable.num_attrs; i++) {
   2b25e:	4623      	mov	r3, r4
   2b260:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
   2b264:	429a      	cmp	r2, r3
   2b266:	dcf4      	bgt.n	2b252 <ble_gattc_proc_free+0x22>
   2b268:	e7ea      	b.n	2b240 <ble_gattc_proc_free+0x10>
        switch (proc->op) {
   2b26a:	2300      	movs	r3, #0
   2b26c:	e7f8      	b.n	2b260 <ble_gattc_proc_free+0x30>
   2b26e:	4770      	bx	lr
   2b270:	100050f8 	.word	0x100050f8

0002b274 <ble_gattc_fail_procs>:
{
   2b274:	b530      	push	{r4, r5, lr}
   2b276:	b083      	sub	sp, #12
   2b278:	4615      	mov	r5, r2
    ble_gattc_extract_by_conn_op(conn_handle, op, 0, &temp_list);
   2b27a:	466b      	mov	r3, sp
   2b27c:	2200      	movs	r2, #0
   2b27e:	f7ff ff5b 	bl	2b138 <ble_gattc_extract_by_conn_op>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   2b282:	e004      	b.n	2b28e <ble_gattc_fail_procs+0x1a>
        STAILQ_REMOVE_HEAD(&temp_list, next);
   2b284:	f8cd d004 	str.w	sp, [sp, #4]
        ble_gattc_proc_free(proc);
   2b288:	4620      	mov	r0, r4
   2b28a:	f7ff ffd1 	bl	2b230 <ble_gattc_proc_free>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   2b28e:	9c00      	ldr	r4, [sp, #0]
   2b290:	b16c      	cbz	r4, 2b2ae <ble_gattc_fail_procs+0x3a>
        err_cb = ble_gattc_err_dispatch_get(proc->op);
   2b292:	7aa0      	ldrb	r0, [r4, #10]
   2b294:	f7ff fb9c 	bl	2a9d0 <ble_gattc_err_dispatch_get>
   2b298:	4603      	mov	r3, r0
        err_cb(proc, status, 0);
   2b29a:	2200      	movs	r2, #0
   2b29c:	4629      	mov	r1, r5
   2b29e:	4620      	mov	r0, r4
   2b2a0:	4798      	blx	r3
        STAILQ_REMOVE_HEAD(&temp_list, next);
   2b2a2:	9b00      	ldr	r3, [sp, #0]
   2b2a4:	681b      	ldr	r3, [r3, #0]
   2b2a6:	9300      	str	r3, [sp, #0]
   2b2a8:	2b00      	cmp	r3, #0
   2b2aa:	d1ed      	bne.n	2b288 <ble_gattc_fail_procs+0x14>
   2b2ac:	e7ea      	b.n	2b284 <ble_gattc_fail_procs+0x10>
}
   2b2ae:	b003      	add	sp, #12
   2b2b0:	bd30      	pop	{r4, r5, pc}

0002b2b2 <ble_gattc_write_reliable_err>:
{
   2b2b2:	b510      	push	{r4, lr}
   2b2b4:	4604      	mov	r4, r0
    ble_gattc_write_reliable_cb(proc, status, att_handle);
   2b2b6:	f7ff fe79 	bl	2afac <ble_gattc_write_reliable_cb>
    if (proc->write_reliable.cur_attr < proc->write_reliable.num_attrs) {
   2b2ba:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   2b2be:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   2b2c2:	429a      	cmp	r2, r3
   2b2c4:	d300      	bcc.n	2b2c8 <ble_gattc_write_reliable_err+0x16>
}
   2b2c6:	bd10      	pop	{r4, pc}
        ble_att_clt_tx_exec_write(proc->conn_handle,
   2b2c8:	2100      	movs	r1, #0
   2b2ca:	8920      	ldrh	r0, [r4, #8]
   2b2cc:	f7fb fe89 	bl	26fe2 <ble_att_clt_tx_exec_write>
}
   2b2d0:	e7f9      	b.n	2b2c6 <ble_gattc_write_reliable_err+0x14>

0002b2d2 <ble_gattc_write_long_err>:
{
   2b2d2:	b570      	push	{r4, r5, r6, lr}
   2b2d4:	4604      	mov	r4, r0
   2b2d6:	460d      	mov	r5, r1
   2b2d8:	4616      	mov	r6, r2
    if (proc->write_long.attr.offset > 0 &&
   2b2da:	89c3      	ldrh	r3, [r0, #14]
   2b2dc:	b11b      	cbz	r3, 2b2e6 <ble_gattc_write_long_err+0x14>
            OS_MBUF_PKTLEN(proc->write_long.attr.om)) {
   2b2de:	6902      	ldr	r2, [r0, #16]
   2b2e0:	8a12      	ldrh	r2, [r2, #16]
    if (proc->write_long.attr.offset > 0 &&
   2b2e2:	4293      	cmp	r3, r2
   2b2e4:	d305      	bcc.n	2b2f2 <ble_gattc_write_long_err+0x20>
    ble_gattc_write_long_cb(proc, status, att_handle);
   2b2e6:	4632      	mov	r2, r6
   2b2e8:	4629      	mov	r1, r5
   2b2ea:	4620      	mov	r0, r4
   2b2ec:	f7ff fe2e 	bl	2af4c <ble_gattc_write_long_cb>
}
   2b2f0:	bd70      	pop	{r4, r5, r6, pc}
        ble_att_clt_tx_exec_write(proc->conn_handle,
   2b2f2:	2100      	movs	r1, #0
   2b2f4:	8900      	ldrh	r0, [r0, #8]
   2b2f6:	f7fb fe74 	bl	26fe2 <ble_att_clt_tx_exec_write>
   2b2fa:	e7f4      	b.n	2b2e6 <ble_gattc_write_long_err+0x14>

0002b2fc <ble_gattc_write_reliable_tx>:
{
   2b2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b300:	4604      	mov	r4, r0
    attr_idx = proc->write_reliable.cur_attr;
   2b302:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
    if (attr_idx >= proc->write_reliable.num_attrs) {
   2b306:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   2b30a:	429d      	cmp	r5, r3
   2b30c:	d226      	bcs.n	2b35c <ble_gattc_write_reliable_tx+0x60>
    attr = proc->write_reliable.attrs + attr_idx;
   2b30e:	f100 070c 	add.w	r7, r0, #12
   2b312:	eb07 06c5 	add.w	r6, r7, r5, lsl #3
    max_sz = ble_att_mtu(proc->conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ;
   2b316:	8900      	ldrh	r0, [r0, #8]
   2b318:	f7fb fac5 	bl	268a6 <ble_att_mtu>
   2b31c:	3805      	subs	r0, #5
   2b31e:	b280      	uxth	r0, r0
    if (max_sz <= 0) {
   2b320:	b348      	cbz	r0, 2b376 <ble_gattc_write_reliable_tx+0x7a>
        min(max_sz, OS_MBUF_PKTLEN(attr->om) - attr->offset);
   2b322:	6873      	ldr	r3, [r6, #4]
   2b324:	8a1b      	ldrh	r3, [r3, #16]
   2b326:	8872      	ldrh	r2, [r6, #2]
   2b328:	1a9b      	subs	r3, r3, r2
   2b32a:	4298      	cmp	r0, r3
   2b32c:	bfa8      	it	ge
   2b32e:	4618      	movge	r0, r3
    proc->write_reliable.length =
   2b330:	85e0      	strh	r0, [r4, #46]	; 0x2e
    om = ble_hs_mbuf_att_pkt();
   2b332:	f004 fe25 	bl	2ff80 <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
   2b336:	4680      	mov	r8, r0
   2b338:	b308      	cbz	r0, 2b37e <ble_gattc_write_reliable_tx+0x82>
    rc = os_mbuf_appendfrom(om, attr->om, attr->offset,
   2b33a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   2b33c:	8872      	ldrh	r2, [r6, #2]
   2b33e:	6871      	ldr	r1, [r6, #4]
   2b340:	f7ee f9ba 	bl	196b8 <os_mbuf_appendfrom>
    if (rc != 0) {
   2b344:	b9e8      	cbnz	r0, 2b382 <ble_gattc_write_reliable_tx+0x86>
    rc = ble_att_clt_tx_prep_write(proc->conn_handle, attr->handle,
   2b346:	4643      	mov	r3, r8
   2b348:	8872      	ldrh	r2, [r6, #2]
   2b34a:	f837 1035 	ldrh.w	r1, [r7, r5, lsl #3]
   2b34e:	8920      	ldrh	r0, [r4, #8]
   2b350:	f7fb fdf5 	bl	26f3e <ble_att_clt_tx_prep_write>
   2b354:	4604      	mov	r4, r0
    om = NULL;
   2b356:	f04f 0800 	mov.w	r8, #0
done:
   2b35a:	e006      	b.n	2b36a <ble_gattc_write_reliable_tx+0x6e>
        rc = ble_att_clt_tx_exec_write(proc->conn_handle,
   2b35c:	2101      	movs	r1, #1
   2b35e:	8900      	ldrh	r0, [r0, #8]
   2b360:	f7fb fe3f 	bl	26fe2 <ble_att_clt_tx_exec_write>
   2b364:	4604      	mov	r4, r0
    om = NULL;
   2b366:	f04f 0800 	mov.w	r8, #0
    os_mbuf_free_chain(om);
   2b36a:	4640      	mov	r0, r8
   2b36c:	f7ee f92f 	bl	195ce <os_mbuf_free_chain>
}
   2b370:	4620      	mov	r0, r4
   2b372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOTCONN;
   2b376:	2407      	movs	r4, #7
    om = NULL;
   2b378:	f04f 0800 	mov.w	r8, #0
   2b37c:	e7f5      	b.n	2b36a <ble_gattc_write_reliable_tx+0x6e>
        rc = BLE_HS_ENOMEM;
   2b37e:	2406      	movs	r4, #6
   2b380:	e7f3      	b.n	2b36a <ble_gattc_write_reliable_tx+0x6e>
        rc = BLE_HS_ENOMEM;
   2b382:	2406      	movs	r4, #6
   2b384:	e7f1      	b.n	2b36a <ble_gattc_write_reliable_tx+0x6e>

0002b386 <ble_gattc_write_reliable_resume>:
{
   2b386:	b538      	push	{r3, r4, r5, lr}
   2b388:	4604      	mov	r4, r0
    status = ble_gattc_write_reliable_tx(proc);
   2b38a:	f7ff ffb7 	bl	2b2fc <ble_gattc_write_reliable_tx>
   2b38e:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   2b390:	4620      	mov	r0, r4
   2b392:	f7ff fe4f 	bl	2b034 <ble_gattc_process_resume_status>
    if (rc != 0) {
   2b396:	4605      	mov	r5, r0
   2b398:	b908      	cbnz	r0, 2b39e <ble_gattc_write_reliable_resume+0x18>
}
   2b39a:	4628      	mov	r0, r5
   2b39c:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_write_reliable_cb(proc, rc, 0);
   2b39e:	2200      	movs	r2, #0
   2b3a0:	4601      	mov	r1, r0
   2b3a2:	4620      	mov	r0, r4
   2b3a4:	f7ff fe02 	bl	2afac <ble_gattc_write_reliable_cb>
        return rc;
   2b3a8:	e7f7      	b.n	2b39a <ble_gattc_write_reliable_resume+0x14>

0002b3aa <ble_gattc_write_long_tx>:
{
   2b3aa:	b538      	push	{r3, r4, r5, lr}
   2b3ac:	4604      	mov	r4, r0
    max_sz = ble_att_mtu(proc->conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ;
   2b3ae:	8900      	ldrh	r0, [r0, #8]
   2b3b0:	f7fb fa79 	bl	268a6 <ble_att_mtu>
   2b3b4:	1f42      	subs	r2, r0, #5
    if (max_sz <= 0) {
   2b3b6:	2a00      	cmp	r2, #0
   2b3b8:	dd27      	ble.n	2b40a <ble_gattc_write_long_tx+0x60>
    write_len = min(max_sz,
   2b3ba:	6923      	ldr	r3, [r4, #16]
   2b3bc:	8a1b      	ldrh	r3, [r3, #16]
   2b3be:	89e0      	ldrh	r0, [r4, #14]
   2b3c0:	1a18      	subs	r0, r3, r0
   2b3c2:	4290      	cmp	r0, r2
   2b3c4:	bfa8      	it	ge
   2b3c6:	4610      	movge	r0, r2
    if (write_len <= 0) {
   2b3c8:	2800      	cmp	r0, #0
   2b3ca:	dd17      	ble.n	2b3fc <ble_gattc_write_long_tx+0x52>
    proc->write_long.length = write_len;
   2b3cc:	82a0      	strh	r0, [r4, #20]
    om = ble_hs_mbuf_att_pkt();
   2b3ce:	f004 fdd7 	bl	2ff80 <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
   2b3d2:	4605      	mov	r5, r0
   2b3d4:	b1e0      	cbz	r0, 2b410 <ble_gattc_write_long_tx+0x66>
    rc = os_mbuf_appendfrom(om, proc->write_long.attr.om,
   2b3d6:	8aa3      	ldrh	r3, [r4, #20]
   2b3d8:	89e2      	ldrh	r2, [r4, #14]
   2b3da:	6921      	ldr	r1, [r4, #16]
   2b3dc:	f7ee f96c 	bl	196b8 <os_mbuf_appendfrom>
    if (rc != 0) {
   2b3e0:	b9c0      	cbnz	r0, 2b414 <ble_gattc_write_long_tx+0x6a>
    rc = ble_att_clt_tx_prep_write(proc->conn_handle,
   2b3e2:	462b      	mov	r3, r5
   2b3e4:	89e2      	ldrh	r2, [r4, #14]
   2b3e6:	89a1      	ldrh	r1, [r4, #12]
   2b3e8:	8920      	ldrh	r0, [r4, #8]
   2b3ea:	f7fb fda8 	bl	26f3e <ble_att_clt_tx_prep_write>
   2b3ee:	4604      	mov	r4, r0
    om = NULL;
   2b3f0:	2500      	movs	r5, #0
    os_mbuf_free_chain(om);
   2b3f2:	4628      	mov	r0, r5
   2b3f4:	f7ee f8eb 	bl	195ce <os_mbuf_free_chain>
}
   2b3f8:	4620      	mov	r0, r4
   2b3fa:	bd38      	pop	{r3, r4, r5, pc}
        rc = ble_att_clt_tx_exec_write(proc->conn_handle,
   2b3fc:	2101      	movs	r1, #1
   2b3fe:	8920      	ldrh	r0, [r4, #8]
   2b400:	f7fb fdef 	bl	26fe2 <ble_att_clt_tx_exec_write>
   2b404:	4604      	mov	r4, r0
    om = NULL;
   2b406:	2500      	movs	r5, #0
        goto done;
   2b408:	e7f3      	b.n	2b3f2 <ble_gattc_write_long_tx+0x48>
        rc = BLE_HS_ENOTCONN;
   2b40a:	2407      	movs	r4, #7
    om = NULL;
   2b40c:	2500      	movs	r5, #0
   2b40e:	e7f0      	b.n	2b3f2 <ble_gattc_write_long_tx+0x48>
        rc = BLE_HS_ENOMEM;
   2b410:	2406      	movs	r4, #6
   2b412:	e7ee      	b.n	2b3f2 <ble_gattc_write_long_tx+0x48>
        rc = BLE_HS_ENOMEM;
   2b414:	2406      	movs	r4, #6
   2b416:	e7ec      	b.n	2b3f2 <ble_gattc_write_long_tx+0x48>

0002b418 <ble_gattc_write_long_resume>:
{
   2b418:	b538      	push	{r3, r4, r5, lr}
   2b41a:	4604      	mov	r4, r0
    status = ble_gattc_write_long_tx(proc);
   2b41c:	f7ff ffc5 	bl	2b3aa <ble_gattc_write_long_tx>
   2b420:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   2b422:	4620      	mov	r0, r4
   2b424:	f7ff fe06 	bl	2b034 <ble_gattc_process_resume_status>
    if (rc != 0) {
   2b428:	4605      	mov	r5, r0
   2b42a:	b908      	cbnz	r0, 2b430 <ble_gattc_write_long_resume+0x18>
}
   2b42c:	4628      	mov	r0, r5
   2b42e:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_write_long_cb(proc, rc, 0);
   2b430:	2200      	movs	r2, #0
   2b432:	4601      	mov	r1, r0
   2b434:	4620      	mov	r0, r4
   2b436:	f7ff fd89 	bl	2af4c <ble_gattc_write_long_cb>
        return rc;
   2b43a:	e7f7      	b.n	2b42c <ble_gattc_write_long_resume+0x14>

0002b43c <ble_gattc_read_tx>:
{
   2b43c:	b508      	push	{r3, lr}
    rc = ble_att_clt_tx_read(proc->conn_handle, proc->read.handle);
   2b43e:	8981      	ldrh	r1, [r0, #12]
   2b440:	8900      	ldrh	r0, [r0, #8]
   2b442:	f7fb fc74 	bl	26d2e <ble_att_clt_tx_read>
}
   2b446:	bd08      	pop	{r3, pc}

0002b448 <ble_gattc_read_long_tx>:
{
   2b448:	b508      	push	{r3, lr}
    if (proc->read_long.offset == 0) {
   2b44a:	89c2      	ldrh	r2, [r0, #14]
   2b44c:	b922      	cbnz	r2, 2b458 <ble_gattc_read_long_tx+0x10>
        rc = ble_att_clt_tx_read(proc->conn_handle, proc->read_long.handle);
   2b44e:	8981      	ldrh	r1, [r0, #12]
   2b450:	8900      	ldrh	r0, [r0, #8]
   2b452:	f7fb fc6c 	bl	26d2e <ble_att_clt_tx_read>
}
   2b456:	bd08      	pop	{r3, pc}
        rc = ble_att_clt_tx_read_blob(proc->conn_handle,
   2b458:	8981      	ldrh	r1, [r0, #12]
   2b45a:	8900      	ldrh	r0, [r0, #8]
   2b45c:	f7fb fc84 	bl	26d68 <ble_att_clt_tx_read_blob>
        if (rc != 0) {
   2b460:	e7f9      	b.n	2b456 <ble_gattc_read_long_tx+0xe>

0002b462 <ble_gattc_read_long_resume>:
{
   2b462:	b538      	push	{r3, r4, r5, lr}
   2b464:	4604      	mov	r4, r0
    status = ble_gattc_read_long_tx(proc);
   2b466:	f7ff ffef 	bl	2b448 <ble_gattc_read_long_tx>
   2b46a:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   2b46c:	4620      	mov	r0, r4
   2b46e:	f7ff fde1 	bl	2b034 <ble_gattc_process_resume_status>
    if (rc != 0) {
   2b472:	4605      	mov	r5, r0
   2b474:	b908      	cbnz	r0, 2b47a <ble_gattc_read_long_resume+0x18>
}
   2b476:	4628      	mov	r0, r5
   2b478:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_read_long_cb(proc, rc, 0, NULL);
   2b47a:	2300      	movs	r3, #0
   2b47c:	461a      	mov	r2, r3
   2b47e:	4601      	mov	r1, r0
   2b480:	4620      	mov	r0, r4
   2b482:	f7ff fd05 	bl	2ae90 <ble_gattc_read_long_cb>
        return rc;
   2b486:	e7f6      	b.n	2b476 <ble_gattc_read_long_resume+0x14>

0002b488 <ble_gattc_read_long_rx_read_rsp>:
{
   2b488:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b48a:	b083      	sub	sp, #12
   2b48c:	4604      	mov	r4, r0
   2b48e:	460e      	mov	r6, r1
   2b490:	4615      	mov	r5, r2
    data_len = OS_MBUF_PKTLEN(*om);
   2b492:	6813      	ldr	r3, [r2, #0]
   2b494:	8a1f      	ldrh	r7, [r3, #16]
    attr.handle = proc->read_long.handle;
   2b496:	8982      	ldrh	r2, [r0, #12]
   2b498:	f8ad 2000 	strh.w	r2, [sp]
    attr.offset = proc->read_long.offset;
   2b49c:	89c2      	ldrh	r2, [r0, #14]
   2b49e:	f8ad 2002 	strh.w	r2, [sp, #2]
    attr.om = *om;
   2b4a2:	9301      	str	r3, [sp, #4]
    rc = ble_gattc_read_long_cb(proc, status, 0, &attr);
   2b4a4:	466b      	mov	r3, sp
   2b4a6:	2200      	movs	r2, #0
   2b4a8:	f7ff fcf2 	bl	2ae90 <ble_gattc_read_long_cb>
    *om = attr.om;
   2b4ac:	9b01      	ldr	r3, [sp, #4]
   2b4ae:	602b      	str	r3, [r5, #0]
    if (rc != 0 || status != 0) {
   2b4b0:	b9c0      	cbnz	r0, 2b4e4 <ble_gattc_read_long_rx_read_rsp+0x5c>
   2b4b2:	b9ce      	cbnz	r6, 2b4e8 <ble_gattc_read_long_rx_read_rsp+0x60>
    mtu = ble_att_mtu(proc->conn_handle);
   2b4b4:	8920      	ldrh	r0, [r4, #8]
   2b4b6:	f7fb f9f6 	bl	268a6 <ble_att_mtu>
    if (mtu == 0) {
   2b4ba:	b1c0      	cbz	r0, 2b4ee <ble_gattc_read_long_rx_read_rsp+0x66>
    if (data_len < mtu - 1) {
   2b4bc:	1e43      	subs	r3, r0, #1
   2b4be:	429f      	cmp	r7, r3
   2b4c0:	db08      	blt.n	2b4d4 <ble_gattc_read_long_rx_read_rsp+0x4c>
    proc->read_long.offset += data_len;
   2b4c2:	89e3      	ldrh	r3, [r4, #14]
   2b4c4:	441f      	add	r7, r3
   2b4c6:	81e7      	strh	r7, [r4, #14]
    rc = ble_gattc_read_long_resume(proc);
   2b4c8:	4620      	mov	r0, r4
   2b4ca:	f7ff ffca 	bl	2b462 <ble_gattc_read_long_resume>
    if (rc != 0) {
   2b4ce:	b160      	cbz	r0, 2b4ea <ble_gattc_read_long_rx_read_rsp+0x62>
        return BLE_HS_EDONE;
   2b4d0:	200e      	movs	r0, #14
   2b4d2:	e00a      	b.n	2b4ea <ble_gattc_read_long_rx_read_rsp+0x62>
        ble_gattc_read_long_cb(proc, BLE_HS_EDONE, 0, NULL);
   2b4d4:	2300      	movs	r3, #0
   2b4d6:	461a      	mov	r2, r3
   2b4d8:	210e      	movs	r1, #14
   2b4da:	4620      	mov	r0, r4
   2b4dc:	f7ff fcd8 	bl	2ae90 <ble_gattc_read_long_cb>
        return BLE_HS_EDONE;
   2b4e0:	200e      	movs	r0, #14
   2b4e2:	e002      	b.n	2b4ea <ble_gattc_read_long_rx_read_rsp+0x62>
        return BLE_HS_EDONE;
   2b4e4:	200e      	movs	r0, #14
   2b4e6:	e000      	b.n	2b4ea <ble_gattc_read_long_rx_read_rsp+0x62>
   2b4e8:	200e      	movs	r0, #14
}
   2b4ea:	b003      	add	sp, #12
   2b4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EDONE;
   2b4ee:	200e      	movs	r0, #14
   2b4f0:	e7fb      	b.n	2b4ea <ble_gattc_read_long_rx_read_rsp+0x62>

0002b4f2 <ble_gattc_disc_all_dscs_tx>:
{
   2b4f2:	b508      	push	{r3, lr}
                                  proc->disc_all_dscs.prev_handle + 1,
   2b4f4:	89c1      	ldrh	r1, [r0, #14]
    rc = ble_att_clt_tx_find_info(proc->conn_handle,
   2b4f6:	3101      	adds	r1, #1
   2b4f8:	8a02      	ldrh	r2, [r0, #16]
   2b4fa:	b289      	uxth	r1, r1
   2b4fc:	8900      	ldrh	r0, [r0, #8]
   2b4fe:	f7fb fb37 	bl	26b70 <ble_att_clt_tx_find_info>
}
   2b502:	bd08      	pop	{r3, pc}

0002b504 <ble_gattc_disc_all_dscs_resume>:
{
   2b504:	b538      	push	{r3, r4, r5, lr}
   2b506:	4604      	mov	r4, r0
    status = ble_gattc_disc_all_dscs_tx(proc);
   2b508:	f7ff fff3 	bl	2b4f2 <ble_gattc_disc_all_dscs_tx>
   2b50c:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   2b50e:	4620      	mov	r0, r4
   2b510:	f7ff fd90 	bl	2b034 <ble_gattc_process_resume_status>
    if (rc != 0) {
   2b514:	4605      	mov	r5, r0
   2b516:	b908      	cbnz	r0, 2b51c <ble_gattc_disc_all_dscs_resume+0x18>
}
   2b518:	4628      	mov	r0, r5
   2b51a:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_dscs_cb(proc, rc, 0, NULL);
   2b51c:	2300      	movs	r3, #0
   2b51e:	461a      	mov	r2, r3
   2b520:	4601      	mov	r1, r0
   2b522:	4620      	mov	r0, r4
   2b524:	f7ff fbee 	bl	2ad04 <ble_gattc_disc_all_dscs_cb>
        return rc;
   2b528:	e7f6      	b.n	2b518 <ble_gattc_disc_all_dscs_resume+0x14>

0002b52a <ble_gattc_disc_all_dscs_rx_complete>:
{
   2b52a:	b510      	push	{r4, lr}
    if (status != 0) {
   2b52c:	b939      	cbnz	r1, 2b53e <ble_gattc_disc_all_dscs_rx_complete+0x14>
    if (proc->disc_all_dscs.prev_handle == proc->disc_all_dscs.end_handle) {
   2b52e:	89c2      	ldrh	r2, [r0, #14]
   2b530:	8a03      	ldrh	r3, [r0, #16]
   2b532:	429a      	cmp	r2, r3
   2b534:	d009      	beq.n	2b54a <ble_gattc_disc_all_dscs_rx_complete+0x20>
    rc = ble_gattc_disc_all_dscs_resume(proc);
   2b536:	f7ff ffe5 	bl	2b504 <ble_gattc_disc_all_dscs_resume>
    if (rc != 0) {
   2b53a:	b968      	cbnz	r0, 2b558 <ble_gattc_disc_all_dscs_rx_complete+0x2e>
}
   2b53c:	bd10      	pop	{r4, pc}
        ble_gattc_disc_all_dscs_cb(proc, status, 0, NULL);
   2b53e:	2300      	movs	r3, #0
   2b540:	461a      	mov	r2, r3
   2b542:	f7ff fbdf 	bl	2ad04 <ble_gattc_disc_all_dscs_cb>
        return BLE_HS_EDONE;
   2b546:	200e      	movs	r0, #14
   2b548:	e7f8      	b.n	2b53c <ble_gattc_disc_all_dscs_rx_complete+0x12>
        ble_gattc_disc_all_dscs_cb(proc, BLE_HS_EDONE, 0, NULL);
   2b54a:	2300      	movs	r3, #0
   2b54c:	461a      	mov	r2, r3
   2b54e:	210e      	movs	r1, #14
   2b550:	f7ff fbd8 	bl	2ad04 <ble_gattc_disc_all_dscs_cb>
        return BLE_HS_EDONE;
   2b554:	200e      	movs	r0, #14
   2b556:	e7f1      	b.n	2b53c <ble_gattc_disc_all_dscs_rx_complete+0x12>
        return BLE_HS_EDONE;
   2b558:	200e      	movs	r0, #14
   2b55a:	e7ef      	b.n	2b53c <ble_gattc_disc_all_dscs_rx_complete+0x12>

0002b55c <ble_gattc_disc_chr_uuid_tx>:
{
   2b55c:	b500      	push	{lr}
   2b55e:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   2b560:	4b06      	ldr	r3, [pc, #24]	; (2b57c <ble_gattc_disc_chr_uuid_tx+0x20>)
   2b562:	681b      	ldr	r3, [r3, #0]
   2b564:	9301      	str	r3, [sp, #4]
                                  proc->disc_chr_uuid.prev_handle + 1,
   2b566:	8c01      	ldrh	r1, [r0, #32]
    rc = ble_att_clt_tx_read_type(proc->conn_handle,
   2b568:	3101      	adds	r1, #1
   2b56a:	ab01      	add	r3, sp, #4
   2b56c:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   2b56e:	b289      	uxth	r1, r1
   2b570:	8900      	ldrh	r0, [r0, #8]
   2b572:	f7fb fb7f 	bl	26c74 <ble_att_clt_tx_read_type>
}
   2b576:	b003      	add	sp, #12
   2b578:	f85d fb04 	ldr.w	pc, [sp], #4
   2b57c:	00034390 	.word	0x00034390

0002b580 <ble_gattc_disc_chr_uuid_resume>:
{
   2b580:	b538      	push	{r3, r4, r5, lr}
   2b582:	4604      	mov	r4, r0
    status = ble_gattc_disc_chr_uuid_tx(proc);
   2b584:	f7ff ffea 	bl	2b55c <ble_gattc_disc_chr_uuid_tx>
   2b588:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   2b58a:	4620      	mov	r0, r4
   2b58c:	f7ff fd52 	bl	2b034 <ble_gattc_process_resume_status>
    if (rc != 0) {
   2b590:	4605      	mov	r5, r0
   2b592:	b908      	cbnz	r0, 2b598 <ble_gattc_disc_chr_uuid_resume+0x18>
}
   2b594:	4628      	mov	r0, r5
   2b596:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_chr_uuid_cb(proc, rc, 0, NULL);
   2b598:	2300      	movs	r3, #0
   2b59a:	461a      	mov	r2, r3
   2b59c:	4601      	mov	r1, r0
   2b59e:	4620      	mov	r0, r4
   2b5a0:	f7ff fb82 	bl	2aca8 <ble_gattc_disc_chr_uuid_cb>
        return rc;
   2b5a4:	e7f6      	b.n	2b594 <ble_gattc_disc_chr_uuid_resume+0x14>

0002b5a6 <ble_gattc_disc_chr_uuid_rx_complete>:
{
   2b5a6:	b510      	push	{r4, lr}
    if (status != 0) {
   2b5a8:	b939      	cbnz	r1, 2b5ba <ble_gattc_disc_chr_uuid_rx_complete+0x14>
    if (proc->disc_chr_uuid.prev_handle == proc->disc_chr_uuid.end_handle) {
   2b5aa:	8c02      	ldrh	r2, [r0, #32]
   2b5ac:	8c43      	ldrh	r3, [r0, #34]	; 0x22
   2b5ae:	429a      	cmp	r2, r3
   2b5b0:	d009      	beq.n	2b5c6 <ble_gattc_disc_chr_uuid_rx_complete+0x20>
    rc = ble_gattc_disc_chr_uuid_resume(proc);
   2b5b2:	f7ff ffe5 	bl	2b580 <ble_gattc_disc_chr_uuid_resume>
    if (rc != 0) {
   2b5b6:	b968      	cbnz	r0, 2b5d4 <ble_gattc_disc_chr_uuid_rx_complete+0x2e>
}
   2b5b8:	bd10      	pop	{r4, pc}
        ble_gattc_disc_chr_uuid_cb(proc, status, 0, NULL);
   2b5ba:	2300      	movs	r3, #0
   2b5bc:	461a      	mov	r2, r3
   2b5be:	f7ff fb73 	bl	2aca8 <ble_gattc_disc_chr_uuid_cb>
        return BLE_HS_EDONE;
   2b5c2:	200e      	movs	r0, #14
   2b5c4:	e7f8      	b.n	2b5b8 <ble_gattc_disc_chr_uuid_rx_complete+0x12>
        ble_gattc_disc_chr_uuid_cb(proc, BLE_HS_EDONE, 0, NULL);
   2b5c6:	2300      	movs	r3, #0
   2b5c8:	461a      	mov	r2, r3
   2b5ca:	210e      	movs	r1, #14
   2b5cc:	f7ff fb6c 	bl	2aca8 <ble_gattc_disc_chr_uuid_cb>
        return BLE_HS_EDONE;
   2b5d0:	200e      	movs	r0, #14
   2b5d2:	e7f1      	b.n	2b5b8 <ble_gattc_disc_chr_uuid_rx_complete+0x12>
        return BLE_HS_EDONE;
   2b5d4:	200e      	movs	r0, #14
   2b5d6:	e7ef      	b.n	2b5b8 <ble_gattc_disc_chr_uuid_rx_complete+0x12>

0002b5d8 <ble_gattc_disc_all_chrs_tx>:
{
   2b5d8:	b500      	push	{lr}
   2b5da:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   2b5dc:	4b06      	ldr	r3, [pc, #24]	; (2b5f8 <ble_gattc_disc_all_chrs_tx+0x20>)
   2b5de:	681b      	ldr	r3, [r3, #0]
   2b5e0:	9301      	str	r3, [sp, #4]
                                  proc->disc_all_chrs.prev_handle + 1,
   2b5e2:	8981      	ldrh	r1, [r0, #12]
    rc = ble_att_clt_tx_read_type(proc->conn_handle,
   2b5e4:	3101      	adds	r1, #1
   2b5e6:	ab01      	add	r3, sp, #4
   2b5e8:	89c2      	ldrh	r2, [r0, #14]
   2b5ea:	b289      	uxth	r1, r1
   2b5ec:	8900      	ldrh	r0, [r0, #8]
   2b5ee:	f7fb fb41 	bl	26c74 <ble_att_clt_tx_read_type>
}
   2b5f2:	b003      	add	sp, #12
   2b5f4:	f85d fb04 	ldr.w	pc, [sp], #4
   2b5f8:	00034390 	.word	0x00034390

0002b5fc <ble_gattc_disc_all_chrs_resume>:
{
   2b5fc:	b538      	push	{r3, r4, r5, lr}
   2b5fe:	4604      	mov	r4, r0
    status = ble_gattc_disc_all_chrs_tx(proc);
   2b600:	f7ff ffea 	bl	2b5d8 <ble_gattc_disc_all_chrs_tx>
   2b604:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   2b606:	4620      	mov	r0, r4
   2b608:	f7ff fd14 	bl	2b034 <ble_gattc_process_resume_status>
    if (rc != 0) {
   2b60c:	4605      	mov	r5, r0
   2b60e:	b908      	cbnz	r0, 2b614 <ble_gattc_disc_all_chrs_resume+0x18>
}
   2b610:	4628      	mov	r0, r5
   2b612:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_chrs_cb(proc, rc, 0, NULL);
   2b614:	2300      	movs	r3, #0
   2b616:	461a      	mov	r2, r3
   2b618:	4601      	mov	r1, r0
   2b61a:	4620      	mov	r0, r4
   2b61c:	f7ff fb16 	bl	2ac4c <ble_gattc_disc_all_chrs_cb>
        return rc;
   2b620:	e7f6      	b.n	2b610 <ble_gattc_disc_all_chrs_resume+0x14>

0002b622 <ble_gattc_disc_all_chrs_rx_complete>:
{
   2b622:	b510      	push	{r4, lr}
    if (status != 0) {
   2b624:	b939      	cbnz	r1, 2b636 <ble_gattc_disc_all_chrs_rx_complete+0x14>
    if (proc->disc_all_chrs.prev_handle == proc->disc_all_chrs.end_handle) {
   2b626:	8982      	ldrh	r2, [r0, #12]
   2b628:	89c3      	ldrh	r3, [r0, #14]
   2b62a:	429a      	cmp	r2, r3
   2b62c:	d009      	beq.n	2b642 <ble_gattc_disc_all_chrs_rx_complete+0x20>
    rc = ble_gattc_disc_all_chrs_resume(proc);
   2b62e:	f7ff ffe5 	bl	2b5fc <ble_gattc_disc_all_chrs_resume>
    if (rc != 0) {
   2b632:	b968      	cbnz	r0, 2b650 <ble_gattc_disc_all_chrs_rx_complete+0x2e>
}
   2b634:	bd10      	pop	{r4, pc}
        ble_gattc_disc_all_chrs_cb(proc, status, 0, NULL);
   2b636:	2300      	movs	r3, #0
   2b638:	461a      	mov	r2, r3
   2b63a:	f7ff fb07 	bl	2ac4c <ble_gattc_disc_all_chrs_cb>
        return BLE_HS_EDONE;
   2b63e:	200e      	movs	r0, #14
   2b640:	e7f8      	b.n	2b634 <ble_gattc_disc_all_chrs_rx_complete+0x12>
        ble_gattc_disc_all_chrs_cb(proc, BLE_HS_EDONE, 0, NULL);
   2b642:	2300      	movs	r3, #0
   2b644:	461a      	mov	r2, r3
   2b646:	210e      	movs	r1, #14
   2b648:	f7ff fb00 	bl	2ac4c <ble_gattc_disc_all_chrs_cb>
        return BLE_HS_EDONE;
   2b64c:	200e      	movs	r0, #14
   2b64e:	e7f1      	b.n	2b634 <ble_gattc_disc_all_chrs_rx_complete+0x12>
        return BLE_HS_EDONE;
   2b650:	200e      	movs	r0, #14
   2b652:	e7ef      	b.n	2b634 <ble_gattc_disc_all_chrs_rx_complete+0x12>

0002b654 <ble_gattc_find_inc_svcs_tx>:
{
   2b654:	b500      	push	{lr}
   2b656:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_INCLUDE);
   2b658:	4b09      	ldr	r3, [pc, #36]	; (2b680 <ble_gattc_find_inc_svcs_tx+0x2c>)
   2b65a:	685b      	ldr	r3, [r3, #4]
   2b65c:	9301      	str	r3, [sp, #4]
    if (proc->find_inc_svcs.cur_start == 0) {
   2b65e:	8a01      	ldrh	r1, [r0, #16]
   2b660:	b951      	cbnz	r1, 2b678 <ble_gattc_find_inc_svcs_tx+0x24>
                                      proc->find_inc_svcs.prev_handle + 1,
   2b662:	8981      	ldrh	r1, [r0, #12]
        rc = ble_att_clt_tx_read_type(proc->conn_handle,
   2b664:	3101      	adds	r1, #1
   2b666:	ab01      	add	r3, sp, #4
   2b668:	89c2      	ldrh	r2, [r0, #14]
   2b66a:	b289      	uxth	r1, r1
   2b66c:	8900      	ldrh	r0, [r0, #8]
   2b66e:	f7fb fb01 	bl	26c74 <ble_att_clt_tx_read_type>
}
   2b672:	b003      	add	sp, #12
   2b674:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = ble_att_clt_tx_read(proc->conn_handle,
   2b678:	8900      	ldrh	r0, [r0, #8]
   2b67a:	f7fb fb58 	bl	26d2e <ble_att_clt_tx_read>
        if (rc != 0) {
   2b67e:	e7f8      	b.n	2b672 <ble_gattc_find_inc_svcs_tx+0x1e>
   2b680:	00034390 	.word	0x00034390

0002b684 <ble_gattc_find_inc_svcs_resume>:
{
   2b684:	b538      	push	{r3, r4, r5, lr}
   2b686:	4604      	mov	r4, r0
    status = ble_gattc_find_inc_svcs_tx(proc);
   2b688:	f7ff ffe4 	bl	2b654 <ble_gattc_find_inc_svcs_tx>
   2b68c:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   2b68e:	4620      	mov	r0, r4
   2b690:	f7ff fcd0 	bl	2b034 <ble_gattc_process_resume_status>
    if (rc != 0) {
   2b694:	4605      	mov	r5, r0
   2b696:	b908      	cbnz	r0, 2b69c <ble_gattc_find_inc_svcs_resume+0x18>
}
   2b698:	4628      	mov	r0, r5
   2b69a:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_find_inc_svcs_cb(proc, rc, 0, NULL);
   2b69c:	2300      	movs	r3, #0
   2b69e:	461a      	mov	r2, r3
   2b6a0:	4601      	mov	r1, r0
   2b6a2:	4620      	mov	r0, r4
   2b6a4:	f7ff faa2 	bl	2abec <ble_gattc_find_inc_svcs_cb>
        return rc;
   2b6a8:	e7f6      	b.n	2b698 <ble_gattc_find_inc_svcs_resume+0x14>

0002b6aa <ble_gattc_find_inc_svcs_rx_complete>:
{
   2b6aa:	b510      	push	{r4, lr}
    if (status != 0) {
   2b6ac:	b941      	cbnz	r1, 2b6c0 <ble_gattc_find_inc_svcs_rx_complete+0x16>
    if (proc->find_inc_svcs.prev_handle == 0xffff) {
   2b6ae:	8982      	ldrh	r2, [r0, #12]
   2b6b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2b6b4:	429a      	cmp	r2, r3
   2b6b6:	d009      	beq.n	2b6cc <ble_gattc_find_inc_svcs_rx_complete+0x22>
    rc = ble_gattc_find_inc_svcs_resume(proc);
   2b6b8:	f7ff ffe4 	bl	2b684 <ble_gattc_find_inc_svcs_resume>
    if (rc != 0) {
   2b6bc:	b968      	cbnz	r0, 2b6da <ble_gattc_find_inc_svcs_rx_complete+0x30>
}
   2b6be:	bd10      	pop	{r4, pc}
        ble_gattc_find_inc_svcs_cb(proc, status, 0, NULL);
   2b6c0:	2300      	movs	r3, #0
   2b6c2:	461a      	mov	r2, r3
   2b6c4:	f7ff fa92 	bl	2abec <ble_gattc_find_inc_svcs_cb>
        return BLE_HS_EDONE;
   2b6c8:	200e      	movs	r0, #14
   2b6ca:	e7f8      	b.n	2b6be <ble_gattc_find_inc_svcs_rx_complete+0x14>
        ble_gattc_find_inc_svcs_cb(proc, BLE_HS_EDONE, 0, NULL);
   2b6cc:	2300      	movs	r3, #0
   2b6ce:	461a      	mov	r2, r3
   2b6d0:	210e      	movs	r1, #14
   2b6d2:	f7ff fa8b 	bl	2abec <ble_gattc_find_inc_svcs_cb>
        return BLE_HS_EDONE;
   2b6d6:	200e      	movs	r0, #14
   2b6d8:	e7f1      	b.n	2b6be <ble_gattc_find_inc_svcs_rx_complete+0x14>
        return BLE_HS_EDONE;
   2b6da:	200e      	movs	r0, #14
   2b6dc:	e7ef      	b.n	2b6be <ble_gattc_find_inc_svcs_rx_complete+0x14>

0002b6de <ble_gattc_read_uuid_tx>:
{
   2b6de:	b508      	push	{r3, lr}
    return ble_att_clt_tx_read_type(proc->conn_handle,
   2b6e0:	f100 030c 	add.w	r3, r0, #12
   2b6e4:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   2b6e6:	8c01      	ldrh	r1, [r0, #32]
   2b6e8:	8900      	ldrh	r0, [r0, #8]
   2b6ea:	f7fb fac3 	bl	26c74 <ble_att_clt_tx_read_type>
}
   2b6ee:	bd08      	pop	{r3, pc}

0002b6f0 <ble_gattc_disc_svc_uuid_tx>:
{
   2b6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b6f2:	b087      	sub	sp, #28
   2b6f4:	4604      	mov	r4, r0
    ble_uuid_flat(&proc->disc_svc_uuid.service_uuid.u, val);
   2b6f6:	f100 060c 	add.w	r6, r0, #12
   2b6fa:	ad02      	add	r5, sp, #8
   2b6fc:	4629      	mov	r1, r5
   2b6fe:	4630      	mov	r0, r6
   2b700:	f005 ff18 	bl	31534 <ble_uuid_flat>
    rc = ble_att_clt_tx_find_type_value(proc->conn_handle,
   2b704:	8927      	ldrh	r7, [r4, #8]
                                        proc->disc_svc_uuid.prev_handle + 1,
   2b706:	8c24      	ldrh	r4, [r4, #32]
    rc = ble_att_clt_tx_find_type_value(proc->conn_handle,
   2b708:	4630      	mov	r0, r6
   2b70a:	f005 ff3f 	bl	3158c <ble_uuid_length>
   2b70e:	1c61      	adds	r1, r4, #1
   2b710:	9001      	str	r0, [sp, #4]
   2b712:	9500      	str	r5, [sp, #0]
   2b714:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2b718:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2b71c:	b289      	uxth	r1, r1
   2b71e:	4638      	mov	r0, r7
   2b720:	f7fb fa6a 	bl	26bf8 <ble_att_clt_tx_find_type_value>
}
   2b724:	b007      	add	sp, #28
   2b726:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002b728 <ble_gattc_disc_svc_uuid_resume>:
{
   2b728:	b538      	push	{r3, r4, r5, lr}
   2b72a:	4604      	mov	r4, r0
    status = ble_gattc_disc_svc_uuid_tx(proc);
   2b72c:	f7ff ffe0 	bl	2b6f0 <ble_gattc_disc_svc_uuid_tx>
   2b730:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   2b732:	4620      	mov	r0, r4
   2b734:	f7ff fc7e 	bl	2b034 <ble_gattc_process_resume_status>
    if (rc != 0) {
   2b738:	4605      	mov	r5, r0
   2b73a:	b908      	cbnz	r0, 2b740 <ble_gattc_disc_svc_uuid_resume+0x18>
}
   2b73c:	4628      	mov	r0, r5
   2b73e:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_svc_uuid_cb(proc, rc, 0, NULL);
   2b740:	2300      	movs	r3, #0
   2b742:	461a      	mov	r2, r3
   2b744:	4601      	mov	r1, r0
   2b746:	4620      	mov	r0, r4
   2b748:	f7ff f9fe 	bl	2ab48 <ble_gattc_disc_svc_uuid_cb>
        return rc;
   2b74c:	e7f6      	b.n	2b73c <ble_gattc_disc_svc_uuid_resume+0x14>

0002b74e <ble_gattc_disc_svc_uuid_rx_complete>:
{
   2b74e:	b510      	push	{r4, lr}
    if (status != 0) {
   2b750:	b941      	cbnz	r1, 2b764 <ble_gattc_disc_svc_uuid_rx_complete+0x16>
    if (proc->disc_svc_uuid.prev_handle == 0xffff) {
   2b752:	8c02      	ldrh	r2, [r0, #32]
   2b754:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2b758:	429a      	cmp	r2, r3
   2b75a:	d009      	beq.n	2b770 <ble_gattc_disc_svc_uuid_rx_complete+0x22>
    rc = ble_gattc_disc_svc_uuid_resume(proc);
   2b75c:	f7ff ffe4 	bl	2b728 <ble_gattc_disc_svc_uuid_resume>
    if (rc != 0) {
   2b760:	b968      	cbnz	r0, 2b77e <ble_gattc_disc_svc_uuid_rx_complete+0x30>
}
   2b762:	bd10      	pop	{r4, pc}
        ble_gattc_disc_svc_uuid_cb(proc, status, 0, NULL);
   2b764:	2300      	movs	r3, #0
   2b766:	461a      	mov	r2, r3
   2b768:	f7ff f9ee 	bl	2ab48 <ble_gattc_disc_svc_uuid_cb>
        return BLE_HS_EDONE;
   2b76c:	200e      	movs	r0, #14
   2b76e:	e7f8      	b.n	2b762 <ble_gattc_disc_svc_uuid_rx_complete+0x14>
        ble_gattc_disc_svc_uuid_cb(proc, BLE_HS_EDONE, 0, NULL);
   2b770:	2300      	movs	r3, #0
   2b772:	461a      	mov	r2, r3
   2b774:	210e      	movs	r1, #14
   2b776:	f7ff f9e7 	bl	2ab48 <ble_gattc_disc_svc_uuid_cb>
        return BLE_HS_EDONE;
   2b77a:	200e      	movs	r0, #14
   2b77c:	e7f1      	b.n	2b762 <ble_gattc_disc_svc_uuid_rx_complete+0x14>
        return BLE_HS_EDONE;
   2b77e:	200e      	movs	r0, #14
   2b780:	e7ef      	b.n	2b762 <ble_gattc_disc_svc_uuid_rx_complete+0x14>
	...

0002b784 <ble_gattc_disc_all_svcs_tx>:
{
   2b784:	b500      	push	{lr}
   2b786:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_PRIMARY_SERVICE);
   2b788:	4b07      	ldr	r3, [pc, #28]	; (2b7a8 <ble_gattc_disc_all_svcs_tx+0x24>)
   2b78a:	689b      	ldr	r3, [r3, #8]
   2b78c:	9301      	str	r3, [sp, #4]
                                        proc->disc_all_svcs.prev_handle + 1,
   2b78e:	8981      	ldrh	r1, [r0, #12]
    rc = ble_att_clt_tx_read_group_type(proc->conn_handle,
   2b790:	3101      	adds	r1, #1
   2b792:	ab01      	add	r3, sp, #4
   2b794:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2b798:	b289      	uxth	r1, r1
   2b79a:	8900      	ldrh	r0, [r0, #8]
   2b79c:	f7fb fb2a 	bl	26df4 <ble_att_clt_tx_read_group_type>
}
   2b7a0:	b003      	add	sp, #12
   2b7a2:	f85d fb04 	ldr.w	pc, [sp], #4
   2b7a6:	bf00      	nop
   2b7a8:	00034390 	.word	0x00034390

0002b7ac <ble_gattc_disc_all_svcs_resume>:
{
   2b7ac:	b538      	push	{r3, r4, r5, lr}
   2b7ae:	4604      	mov	r4, r0
    status = ble_gattc_disc_all_svcs_tx(proc);
   2b7b0:	f7ff ffe8 	bl	2b784 <ble_gattc_disc_all_svcs_tx>
   2b7b4:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   2b7b6:	4620      	mov	r0, r4
   2b7b8:	f7ff fc3c 	bl	2b034 <ble_gattc_process_resume_status>
    if (rc != 0) {
   2b7bc:	4605      	mov	r5, r0
   2b7be:	b908      	cbnz	r0, 2b7c4 <ble_gattc_disc_all_svcs_resume+0x18>
}
   2b7c0:	4628      	mov	r0, r5
   2b7c2:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_svcs_cb(proc, rc, 0, NULL);
   2b7c4:	2300      	movs	r3, #0
   2b7c6:	461a      	mov	r2, r3
   2b7c8:	b281      	uxth	r1, r0
   2b7ca:	4620      	mov	r0, r4
   2b7cc:	f7ff f98e 	bl	2aaec <ble_gattc_disc_all_svcs_cb>
        return rc;
   2b7d0:	e7f6      	b.n	2b7c0 <ble_gattc_disc_all_svcs_resume+0x14>

0002b7d2 <ble_gattc_disc_all_svcs_rx_complete>:
{
   2b7d2:	b510      	push	{r4, lr}
    if (status != 0) {
   2b7d4:	b941      	cbnz	r1, 2b7e8 <ble_gattc_disc_all_svcs_rx_complete+0x16>
    if (proc->disc_all_svcs.prev_handle == 0xffff) {
   2b7d6:	8982      	ldrh	r2, [r0, #12]
   2b7d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2b7dc:	429a      	cmp	r2, r3
   2b7de:	d00a      	beq.n	2b7f6 <ble_gattc_disc_all_svcs_rx_complete+0x24>
    rc = ble_gattc_disc_all_svcs_resume(proc);
   2b7e0:	f7ff ffe4 	bl	2b7ac <ble_gattc_disc_all_svcs_resume>
    if (rc != 0) {
   2b7e4:	b970      	cbnz	r0, 2b804 <ble_gattc_disc_all_svcs_rx_complete+0x32>
}
   2b7e6:	bd10      	pop	{r4, pc}
        ble_gattc_disc_all_svcs_cb(proc, status, 0, NULL);
   2b7e8:	2300      	movs	r3, #0
   2b7ea:	461a      	mov	r2, r3
   2b7ec:	b289      	uxth	r1, r1
   2b7ee:	f7ff f97d 	bl	2aaec <ble_gattc_disc_all_svcs_cb>
        return BLE_HS_EDONE;
   2b7f2:	200e      	movs	r0, #14
   2b7f4:	e7f7      	b.n	2b7e6 <ble_gattc_disc_all_svcs_rx_complete+0x14>
        ble_gattc_disc_all_svcs_cb(proc, BLE_HS_EDONE, 0, NULL);
   2b7f6:	2300      	movs	r3, #0
   2b7f8:	461a      	mov	r2, r3
   2b7fa:	210e      	movs	r1, #14
   2b7fc:	f7ff f976 	bl	2aaec <ble_gattc_disc_all_svcs_cb>
        return BLE_HS_EDONE;
   2b800:	200e      	movs	r0, #14
   2b802:	e7f0      	b.n	2b7e6 <ble_gattc_disc_all_svcs_rx_complete+0x14>
        return BLE_HS_EDONE;
   2b804:	200e      	movs	r0, #14
   2b806:	e7ee      	b.n	2b7e6 <ble_gattc_disc_all_svcs_rx_complete+0x14>

0002b808 <ble_gattc_process_status>:
{
   2b808:	b510      	push	{r4, lr}
   2b80a:	4604      	mov	r4, r0
    switch (status) {
   2b80c:	b961      	cbnz	r1, 2b828 <ble_gattc_process_status+0x20>
        if (!(proc->flags & BLE_GATTC_PROC_F_STALLED)) {
   2b80e:	7ac3      	ldrb	r3, [r0, #11]
   2b810:	f013 0f01 	tst.w	r3, #1
   2b814:	d005      	beq.n	2b822 <ble_gattc_process_status+0x1a>
        ble_gattc_proc_insert(proc);
   2b816:	4620      	mov	r0, r4
   2b818:	f7ff fcc6 	bl	2b1a8 <ble_gattc_proc_insert>
        ble_hs_timer_resched();
   2b81c:	f002 fcaa 	bl	2e174 <ble_hs_timer_resched>
}
   2b820:	bd10      	pop	{r4, pc}
            ble_gattc_proc_set_exp_timer(proc);
   2b822:	f7ff fc11 	bl	2b048 <ble_gattc_proc_set_exp_timer>
   2b826:	e7f6      	b.n	2b816 <ble_gattc_process_status+0xe>
        ble_gattc_proc_free(proc);
   2b828:	f7ff fd02 	bl	2b230 <ble_gattc_proc_free>
}
   2b82c:	e7f8      	b.n	2b820 <ble_gattc_process_status+0x18>
	...

0002b830 <ble_gattc_resume_procs>:
{
   2b830:	b510      	push	{r4, lr}
   2b832:	b082      	sub	sp, #8
    ble_gattc_resume_at = 0;
   2b834:	4b0c      	ldr	r3, [pc, #48]	; (2b868 <ble_gattc_resume_procs+0x38>)
   2b836:	2200      	movs	r2, #0
   2b838:	601a      	str	r2, [r3, #0]
    ble_gattc_extract_stalled(&stall_list);
   2b83a:	4668      	mov	r0, sp
   2b83c:	f7ff fc72 	bl	2b124 <ble_gattc_extract_stalled>
    STAILQ_FOREACH(proc, &stall_list, next) {
   2b840:	9c00      	ldr	r4, [sp, #0]
   2b842:	b17c      	cbz	r4, 2b864 <ble_gattc_resume_procs+0x34>
        resume_cb = ble_gattc_resume_dispatch_get(proc->op);
   2b844:	7aa0      	ldrb	r0, [r4, #10]
   2b846:	f7ff f8c9 	bl	2a9dc <ble_gattc_resume_dispatch_get>
   2b84a:	4602      	mov	r2, r0
        proc->flags &= ~BLE_GATTC_PROC_F_STALLED;
   2b84c:	7ae3      	ldrb	r3, [r4, #11]
   2b84e:	f023 0301 	bic.w	r3, r3, #1
   2b852:	72e3      	strb	r3, [r4, #11]
        rc = resume_cb(proc);
   2b854:	4620      	mov	r0, r4
   2b856:	4790      	blx	r2
   2b858:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   2b85a:	4620      	mov	r0, r4
   2b85c:	f7ff ffd4 	bl	2b808 <ble_gattc_process_status>
    STAILQ_FOREACH(proc, &stall_list, next) {
   2b860:	6824      	ldr	r4, [r4, #0]
   2b862:	e7ee      	b.n	2b842 <ble_gattc_resume_procs+0x12>
}
   2b864:	b002      	add	sp, #8
   2b866:	bd10      	pop	{r4, pc}
   2b868:	1000511c 	.word	0x1000511c

0002b86c <ble_gattc_proc_alloc>:
{
   2b86c:	b510      	push	{r4, lr}
    proc = os_memblock_get(&ble_gattc_proc_pool);
   2b86e:	4805      	ldr	r0, [pc, #20]	; (2b884 <ble_gattc_proc_alloc+0x18>)
   2b870:	f7ee faec 	bl	19e4c <os_memblock_get>
    if (proc != NULL) {
   2b874:	4604      	mov	r4, r0
   2b876:	b118      	cbz	r0, 2b880 <ble_gattc_proc_alloc+0x14>
        memset(proc, 0, sizeof *proc);
   2b878:	2238      	movs	r2, #56	; 0x38
   2b87a:	2100      	movs	r1, #0
   2b87c:	f7ef fa0d 	bl	1ac9a <memset>
}
   2b880:	4620      	mov	r0, r4
   2b882:	bd10      	pop	{r4, pc}
   2b884:	100050f8 	.word	0x100050f8

0002b888 <ble_gattc_log_proc_init>:
{
   2b888:	b508      	push	{r3, lr}
   2b88a:	4603      	mov	r3, r0
    BLE_HS_LOG(INFO, "GATT procedure initiated: %s", name);
   2b88c:	4a02      	ldr	r2, [pc, #8]	; (2b898 <ble_gattc_log_proc_init+0x10>)
   2b88e:	2101      	movs	r1, #1
   2b890:	2004      	movs	r0, #4
   2b892:	f7f1 fa4b 	bl	1cd2c <modlog_printf>
}
   2b896:	bd08      	pop	{r3, pc}
   2b898:	000391a0 	.word	0x000391a0

0002b89c <ble_gattc_log_find_inc_svcs>:
{
   2b89c:	b510      	push	{r4, lr}
   2b89e:	b082      	sub	sp, #8
   2b8a0:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("find included services; ");
   2b8a2:	4807      	ldr	r0, [pc, #28]	; (2b8c0 <ble_gattc_log_find_inc_svcs+0x24>)
   2b8a4:	f7ff fff0 	bl	2b888 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "start_handle=%d end_handle=%d\n",
   2b8a8:	89a3      	ldrh	r3, [r4, #12]
   2b8aa:	89e2      	ldrh	r2, [r4, #14]
   2b8ac:	9200      	str	r2, [sp, #0]
   2b8ae:	3301      	adds	r3, #1
   2b8b0:	4a04      	ldr	r2, [pc, #16]	; (2b8c4 <ble_gattc_log_find_inc_svcs+0x28>)
   2b8b2:	2101      	movs	r1, #1
   2b8b4:	2004      	movs	r0, #4
   2b8b6:	f7f1 fa39 	bl	1cd2c <modlog_printf>
}
   2b8ba:	b002      	add	sp, #8
   2b8bc:	bd10      	pop	{r4, pc}
   2b8be:	bf00      	nop
   2b8c0:	000391c0 	.word	0x000391c0
   2b8c4:	000391dc 	.word	0x000391dc

0002b8c8 <ble_gattc_log_disc_all_chrs>:
{
   2b8c8:	b510      	push	{r4, lr}
   2b8ca:	b082      	sub	sp, #8
   2b8cc:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("discover all characteristics; ");
   2b8ce:	4807      	ldr	r0, [pc, #28]	; (2b8ec <ble_gattc_log_disc_all_chrs+0x24>)
   2b8d0:	f7ff ffda 	bl	2b888 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "start_handle=%d end_handle=%d\n",
   2b8d4:	89a3      	ldrh	r3, [r4, #12]
   2b8d6:	89e2      	ldrh	r2, [r4, #14]
   2b8d8:	9200      	str	r2, [sp, #0]
   2b8da:	3301      	adds	r3, #1
   2b8dc:	4a04      	ldr	r2, [pc, #16]	; (2b8f0 <ble_gattc_log_disc_all_chrs+0x28>)
   2b8de:	2101      	movs	r1, #1
   2b8e0:	2004      	movs	r0, #4
   2b8e2:	f7f1 fa23 	bl	1cd2c <modlog_printf>
}
   2b8e6:	b002      	add	sp, #8
   2b8e8:	bd10      	pop	{r4, pc}
   2b8ea:	bf00      	nop
   2b8ec:	000391fc 	.word	0x000391fc
   2b8f0:	000391dc 	.word	0x000391dc

0002b8f4 <ble_gattc_log_disc_all_dscs>:
{
   2b8f4:	b510      	push	{r4, lr}
   2b8f6:	b082      	sub	sp, #8
   2b8f8:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("discover all descriptors; ");
   2b8fa:	4806      	ldr	r0, [pc, #24]	; (2b914 <ble_gattc_log_disc_all_dscs+0x20>)
   2b8fc:	f7ff ffc4 	bl	2b888 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "chr_val_handle=%d end_handle=%d\n",
   2b900:	8a23      	ldrh	r3, [r4, #16]
   2b902:	9300      	str	r3, [sp, #0]
   2b904:	89a3      	ldrh	r3, [r4, #12]
   2b906:	4a04      	ldr	r2, [pc, #16]	; (2b918 <ble_gattc_log_disc_all_dscs+0x24>)
   2b908:	2101      	movs	r1, #1
   2b90a:	2004      	movs	r0, #4
   2b90c:	f7f1 fa0e 	bl	1cd2c <modlog_printf>
}
   2b910:	b002      	add	sp, #8
   2b912:	bd10      	pop	{r4, pc}
   2b914:	0003921c 	.word	0x0003921c
   2b918:	00039238 	.word	0x00039238

0002b91c <ble_gattc_log_read>:
{
   2b91c:	b510      	push	{r4, lr}
   2b91e:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("read; ");
   2b920:	4804      	ldr	r0, [pc, #16]	; (2b934 <ble_gattc_log_read+0x18>)
   2b922:	f7ff ffb1 	bl	2b888 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d\n", att_handle);
   2b926:	4623      	mov	r3, r4
   2b928:	4a03      	ldr	r2, [pc, #12]	; (2b938 <ble_gattc_log_read+0x1c>)
   2b92a:	2101      	movs	r1, #1
   2b92c:	2004      	movs	r0, #4
   2b92e:	f7f1 f9fd 	bl	1cd2c <modlog_printf>
}
   2b932:	bd10      	pop	{r4, pc}
   2b934:	0003925c 	.word	0x0003925c
   2b938:	00039264 	.word	0x00039264

0002b93c <ble_gattc_log_read_long>:
{
   2b93c:	b510      	push	{r4, lr}
   2b93e:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("read long; ");
   2b940:	4804      	ldr	r0, [pc, #16]	; (2b954 <ble_gattc_log_read_long+0x18>)
   2b942:	f7ff ffa1 	bl	2b888 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d\n", proc->read_long.handle);
   2b946:	89a3      	ldrh	r3, [r4, #12]
   2b948:	4a03      	ldr	r2, [pc, #12]	; (2b958 <ble_gattc_log_read_long+0x1c>)
   2b94a:	2101      	movs	r1, #1
   2b94c:	2004      	movs	r0, #4
   2b94e:	f7f1 f9ed 	bl	1cd2c <modlog_printf>
}
   2b952:	bd10      	pop	{r4, pc}
   2b954:	00039274 	.word	0x00039274
   2b958:	00039264 	.word	0x00039264

0002b95c <ble_gattc_log_read_mult>:
{
   2b95c:	b570      	push	{r4, r5, r6, lr}
   2b95e:	b082      	sub	sp, #8
   2b960:	4606      	mov	r6, r0
   2b962:	460d      	mov	r5, r1
    ble_gattc_log_proc_init("read multiple; ");
   2b964:	4810      	ldr	r0, [pc, #64]	; (2b9a8 <ble_gattc_log_read_mult+0x4c>)
   2b966:	f7ff ff8f 	bl	2b888 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handles=");
   2b96a:	4a10      	ldr	r2, [pc, #64]	; (2b9ac <ble_gattc_log_read_mult+0x50>)
   2b96c:	2101      	movs	r1, #1
   2b96e:	2004      	movs	r0, #4
   2b970:	f7f1 f9dc 	bl	1cd2c <modlog_printf>
    for (i = 0; i < num_handles; i++) {
   2b974:	2400      	movs	r4, #0
   2b976:	e009      	b.n	2b98c <ble_gattc_log_read_mult+0x30>
        BLE_HS_LOG(INFO, "%s%d", i != 0 ? "," : "", handles[i]);
   2b978:	4b0d      	ldr	r3, [pc, #52]	; (2b9b0 <ble_gattc_log_read_mult+0x54>)
   2b97a:	f836 2014 	ldrh.w	r2, [r6, r4, lsl #1]
   2b97e:	9200      	str	r2, [sp, #0]
   2b980:	4a0c      	ldr	r2, [pc, #48]	; (2b9b4 <ble_gattc_log_read_mult+0x58>)
   2b982:	2101      	movs	r1, #1
   2b984:	2004      	movs	r0, #4
   2b986:	f7f1 f9d1 	bl	1cd2c <modlog_printf>
    for (i = 0; i < num_handles; i++) {
   2b98a:	3401      	adds	r4, #1
   2b98c:	42a5      	cmp	r5, r4
   2b98e:	dd03      	ble.n	2b998 <ble_gattc_log_read_mult+0x3c>
        BLE_HS_LOG(INFO, "%s%d", i != 0 ? "," : "", handles[i]);
   2b990:	2c00      	cmp	r4, #0
   2b992:	d0f1      	beq.n	2b978 <ble_gattc_log_read_mult+0x1c>
   2b994:	4b08      	ldr	r3, [pc, #32]	; (2b9b8 <ble_gattc_log_read_mult+0x5c>)
   2b996:	e7f0      	b.n	2b97a <ble_gattc_log_read_mult+0x1e>
    BLE_HS_LOG(INFO, "\n");
   2b998:	4a08      	ldr	r2, [pc, #32]	; (2b9bc <ble_gattc_log_read_mult+0x60>)
   2b99a:	2101      	movs	r1, #1
   2b99c:	2004      	movs	r0, #4
   2b99e:	f7f1 f9c5 	bl	1cd2c <modlog_printf>
}
   2b9a2:	b002      	add	sp, #8
   2b9a4:	bd70      	pop	{r4, r5, r6, pc}
   2b9a6:	bf00      	nop
   2b9a8:	00039284 	.word	0x00039284
   2b9ac:	00039294 	.word	0x00039294
   2b9b0:	00038930 	.word	0x00038930
   2b9b4:	000392a4 	.word	0x000392a4
   2b9b8:	00039280 	.word	0x00039280
   2b9bc:	00034744 	.word	0x00034744

0002b9c0 <ble_gattc_log_write>:
{
   2b9c0:	b530      	push	{r4, r5, lr}
   2b9c2:	b083      	sub	sp, #12
   2b9c4:	4604      	mov	r4, r0
   2b9c6:	460d      	mov	r5, r1
    if (expecting_rsp) {
   2b9c8:	b15a      	cbz	r2, 2b9e2 <ble_gattc_log_write+0x22>
        name = "write; ";
   2b9ca:	4807      	ldr	r0, [pc, #28]	; (2b9e8 <ble_gattc_log_write+0x28>)
    ble_gattc_log_proc_init(name);
   2b9cc:	f7ff ff5c 	bl	2b888 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d len=%d\n", att_handle, len);
   2b9d0:	9500      	str	r5, [sp, #0]
   2b9d2:	4623      	mov	r3, r4
   2b9d4:	4a05      	ldr	r2, [pc, #20]	; (2b9ec <ble_gattc_log_write+0x2c>)
   2b9d6:	2101      	movs	r1, #1
   2b9d8:	2004      	movs	r0, #4
   2b9da:	f7f1 f9a7 	bl	1cd2c <modlog_printf>
}
   2b9de:	b003      	add	sp, #12
   2b9e0:	bd30      	pop	{r4, r5, pc}
        name = "write no rsp; ";
   2b9e2:	4803      	ldr	r0, [pc, #12]	; (2b9f0 <ble_gattc_log_write+0x30>)
   2b9e4:	e7f2      	b.n	2b9cc <ble_gattc_log_write+0xc>
   2b9e6:	bf00      	nop
   2b9e8:	000392bc 	.word	0x000392bc
   2b9ec:	000392c4 	.word	0x000392c4
   2b9f0:	000392ac 	.word	0x000392ac

0002b9f4 <ble_gattc_log_write_long>:
{
   2b9f4:	b510      	push	{r4, lr}
   2b9f6:	b082      	sub	sp, #8
   2b9f8:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("write long; ");
   2b9fa:	4807      	ldr	r0, [pc, #28]	; (2ba18 <ble_gattc_log_write_long+0x24>)
   2b9fc:	f7ff ff44 	bl	2b888 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d len=%d\n",
   2ba00:	6923      	ldr	r3, [r4, #16]
   2ba02:	8a1b      	ldrh	r3, [r3, #16]
   2ba04:	9300      	str	r3, [sp, #0]
   2ba06:	89a3      	ldrh	r3, [r4, #12]
   2ba08:	4a04      	ldr	r2, [pc, #16]	; (2ba1c <ble_gattc_log_write_long+0x28>)
   2ba0a:	2101      	movs	r1, #1
   2ba0c:	2004      	movs	r0, #4
   2ba0e:	f7f1 f98d 	bl	1cd2c <modlog_printf>
}
   2ba12:	b002      	add	sp, #8
   2ba14:	bd10      	pop	{r4, pc}
   2ba16:	bf00      	nop
   2ba18:	000392dc 	.word	0x000392dc
   2ba1c:	000392c4 	.word	0x000392c4

0002ba20 <ble_gattc_log_write_reliable>:
{
   2ba20:	b530      	push	{r4, r5, lr}
   2ba22:	b083      	sub	sp, #12
   2ba24:	4605      	mov	r5, r0
    ble_gattc_log_proc_init("write reliable; ");
   2ba26:	4812      	ldr	r0, [pc, #72]	; (2ba70 <ble_gattc_log_write_reliable+0x50>)
   2ba28:	f7ff ff2e 	bl	2b888 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handles=");
   2ba2c:	4a11      	ldr	r2, [pc, #68]	; (2ba74 <ble_gattc_log_write_reliable+0x54>)
   2ba2e:	2101      	movs	r1, #1
   2ba30:	2004      	movs	r0, #4
   2ba32:	f7f1 f97b 	bl	1cd2c <modlog_printf>
    for (i = 0; i < proc->write_reliable.num_attrs; i++) {
   2ba36:	2400      	movs	r4, #0
   2ba38:	e00a      	b.n	2ba50 <ble_gattc_log_write_reliable+0x30>
        BLE_HS_LOG(INFO, "%s%d", i != 0 ? "," : "",
   2ba3a:	4b0f      	ldr	r3, [pc, #60]	; (2ba78 <ble_gattc_log_write_reliable+0x58>)
   2ba3c:	3401      	adds	r4, #1
   2ba3e:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   2ba42:	8892      	ldrh	r2, [r2, #4]
   2ba44:	9200      	str	r2, [sp, #0]
   2ba46:	4a0d      	ldr	r2, [pc, #52]	; (2ba7c <ble_gattc_log_write_reliable+0x5c>)
   2ba48:	2101      	movs	r1, #1
   2ba4a:	2004      	movs	r0, #4
   2ba4c:	f7f1 f96e 	bl	1cd2c <modlog_printf>
    for (i = 0; i < proc->write_reliable.num_attrs; i++) {
   2ba50:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   2ba54:	42a3      	cmp	r3, r4
   2ba56:	dd03      	ble.n	2ba60 <ble_gattc_log_write_reliable+0x40>
        BLE_HS_LOG(INFO, "%s%d", i != 0 ? "," : "",
   2ba58:	2c00      	cmp	r4, #0
   2ba5a:	d0ee      	beq.n	2ba3a <ble_gattc_log_write_reliable+0x1a>
   2ba5c:	4b08      	ldr	r3, [pc, #32]	; (2ba80 <ble_gattc_log_write_reliable+0x60>)
   2ba5e:	e7ed      	b.n	2ba3c <ble_gattc_log_write_reliable+0x1c>
    BLE_HS_LOG(INFO, "\n");
   2ba60:	4a08      	ldr	r2, [pc, #32]	; (2ba84 <ble_gattc_log_write_reliable+0x64>)
   2ba62:	2101      	movs	r1, #1
   2ba64:	2004      	movs	r0, #4
   2ba66:	f7f1 f961 	bl	1cd2c <modlog_printf>
}
   2ba6a:	b003      	add	sp, #12
   2ba6c:	bd30      	pop	{r4, r5, pc}
   2ba6e:	bf00      	nop
   2ba70:	000392ec 	.word	0x000392ec
   2ba74:	00039294 	.word	0x00039294
   2ba78:	00038930 	.word	0x00038930
   2ba7c:	000392a4 	.word	0x000392a4
   2ba80:	00039280 	.word	0x00039280
   2ba84:	00034744 	.word	0x00034744

0002ba88 <ble_gattc_log_notify>:
{
   2ba88:	b510      	push	{r4, lr}
   2ba8a:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("notify; ");
   2ba8c:	4804      	ldr	r0, [pc, #16]	; (2baa0 <ble_gattc_log_notify+0x18>)
   2ba8e:	f7ff fefb 	bl	2b888 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d\n", att_handle);
   2ba92:	4623      	mov	r3, r4
   2ba94:	4a03      	ldr	r2, [pc, #12]	; (2baa4 <ble_gattc_log_notify+0x1c>)
   2ba96:	2101      	movs	r1, #1
   2ba98:	2004      	movs	r0, #4
   2ba9a:	f7f1 f947 	bl	1cd2c <modlog_printf>
}
   2ba9e:	bd10      	pop	{r4, pc}
   2baa0:	00039300 	.word	0x00039300
   2baa4:	00039264 	.word	0x00039264

0002baa8 <ble_gattc_log_indicate>:
{
   2baa8:	b510      	push	{r4, lr}
   2baaa:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("indicate; ");
   2baac:	4804      	ldr	r0, [pc, #16]	; (2bac0 <ble_gattc_log_indicate+0x18>)
   2baae:	f7ff feeb 	bl	2b888 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d\n", att_handle);
   2bab2:	4623      	mov	r3, r4
   2bab4:	4a03      	ldr	r2, [pc, #12]	; (2bac4 <ble_gattc_log_indicate+0x1c>)
   2bab6:	2101      	movs	r1, #1
   2bab8:	2004      	movs	r0, #4
   2baba:	f7f1 f937 	bl	1cd2c <modlog_printf>
}
   2babe:	bd10      	pop	{r4, pc}
   2bac0:	0003930c 	.word	0x0003930c
   2bac4:	00039264 	.word	0x00039264

0002bac8 <ble_gattc_mtu_tx>:
{
   2bac8:	b570      	push	{r4, r5, r6, lr}
   2baca:	b082      	sub	sp, #8
   2bacc:	4604      	mov	r4, r0
   2bace:	2600      	movs	r6, #0
    ble_hs_lock();
   2bad0:	f002 fa5e 	bl	2df90 <ble_hs_lock>
    rc = ble_att_conn_chan_find(proc->conn_handle, &conn, &chan);
   2bad4:	aa01      	add	r2, sp, #4
   2bad6:	4669      	mov	r1, sp
   2bad8:	8920      	ldrh	r0, [r4, #8]
   2bada:	f7fa fdbe 	bl	2665a <ble_att_conn_chan_find>
    if (rc == 0) {
   2bade:	4605      	mov	r5, r0
   2bae0:	b908      	cbnz	r0, 2bae6 <ble_gattc_mtu_tx+0x1e>
        mtu = chan->my_mtu;
   2bae2:	9b01      	ldr	r3, [sp, #4]
   2bae4:	895e      	ldrh	r6, [r3, #10]
    ble_hs_unlock();
   2bae6:	f002 fa57 	bl	2df98 <ble_hs_unlock>
    if (rc == 0) {
   2baea:	b115      	cbz	r5, 2baf2 <ble_gattc_mtu_tx+0x2a>
}
   2baec:	4628      	mov	r0, r5
   2baee:	b002      	add	sp, #8
   2baf0:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_att_clt_tx_mtu(proc->conn_handle, mtu);
   2baf2:	4631      	mov	r1, r6
   2baf4:	8920      	ldrh	r0, [r4, #8]
   2baf6:	f7fa ffc8 	bl	26a8a <ble_att_clt_tx_mtu>
   2bafa:	4605      	mov	r5, r0
    return rc;
   2bafc:	e7f6      	b.n	2baec <ble_gattc_mtu_tx+0x24>
	...

0002bb00 <ble_gattc_log_uuid>:
{
   2bb00:	b500      	push	{lr}
   2bb02:	b08b      	sub	sp, #44	; 0x2c
    ble_uuid_to_str(uuid, buf);
   2bb04:	4669      	mov	r1, sp
   2bb06:	f005 fc65 	bl	313d4 <ble_uuid_to_str>
    BLE_HS_LOG(INFO, "%s", buf);
   2bb0a:	466b      	mov	r3, sp
   2bb0c:	4a03      	ldr	r2, [pc, #12]	; (2bb1c <ble_gattc_log_uuid+0x1c>)
   2bb0e:	2101      	movs	r1, #1
   2bb10:	2004      	movs	r0, #4
   2bb12:	f7f1 f90b 	bl	1cd2c <modlog_printf>
}
   2bb16:	b00b      	add	sp, #44	; 0x2c
   2bb18:	f85d fb04 	ldr.w	pc, [sp], #4
   2bb1c:	00034c40 	.word	0x00034c40

0002bb20 <ble_gattc_log_disc_svc_uuid>:
{
   2bb20:	b510      	push	{r4, lr}
   2bb22:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("discover service by uuid; uuid=");
   2bb24:	4806      	ldr	r0, [pc, #24]	; (2bb40 <ble_gattc_log_disc_svc_uuid+0x20>)
   2bb26:	f7ff feaf 	bl	2b888 <ble_gattc_log_proc_init>
    ble_gattc_log_uuid(&proc->disc_svc_uuid.service_uuid.u);
   2bb2a:	f104 000c 	add.w	r0, r4, #12
   2bb2e:	f7ff ffe7 	bl	2bb00 <ble_gattc_log_uuid>
    BLE_HS_LOG(INFO, "\n");
   2bb32:	4a04      	ldr	r2, [pc, #16]	; (2bb44 <ble_gattc_log_disc_svc_uuid+0x24>)
   2bb34:	2101      	movs	r1, #1
   2bb36:	2004      	movs	r0, #4
   2bb38:	f7f1 f8f8 	bl	1cd2c <modlog_printf>
}
   2bb3c:	bd10      	pop	{r4, pc}
   2bb3e:	bf00      	nop
   2bb40:	00039318 	.word	0x00039318
   2bb44:	00034744 	.word	0x00034744

0002bb48 <ble_gattc_log_disc_chr_uuid>:
{
   2bb48:	b510      	push	{r4, lr}
   2bb4a:	b082      	sub	sp, #8
   2bb4c:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("discover characteristics by uuid; ");
   2bb4e:	480b      	ldr	r0, [pc, #44]	; (2bb7c <ble_gattc_log_disc_chr_uuid+0x34>)
   2bb50:	f7ff fe9a 	bl	2b888 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "start_handle=%d end_handle=%d uuid=",
   2bb54:	8c23      	ldrh	r3, [r4, #32]
   2bb56:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   2bb58:	9200      	str	r2, [sp, #0]
   2bb5a:	3301      	adds	r3, #1
   2bb5c:	4a08      	ldr	r2, [pc, #32]	; (2bb80 <ble_gattc_log_disc_chr_uuid+0x38>)
   2bb5e:	2101      	movs	r1, #1
   2bb60:	2004      	movs	r0, #4
   2bb62:	f7f1 f8e3 	bl	1cd2c <modlog_printf>
    ble_gattc_log_uuid(&proc->disc_chr_uuid.chr_uuid.u);
   2bb66:	f104 000c 	add.w	r0, r4, #12
   2bb6a:	f7ff ffc9 	bl	2bb00 <ble_gattc_log_uuid>
    BLE_HS_LOG(INFO, "\n");
   2bb6e:	4a05      	ldr	r2, [pc, #20]	; (2bb84 <ble_gattc_log_disc_chr_uuid+0x3c>)
   2bb70:	2101      	movs	r1, #1
   2bb72:	2004      	movs	r0, #4
   2bb74:	f7f1 f8da 	bl	1cd2c <modlog_printf>
}
   2bb78:	b002      	add	sp, #8
   2bb7a:	bd10      	pop	{r4, pc}
   2bb7c:	00039338 	.word	0x00039338
   2bb80:	0003935c 	.word	0x0003935c
   2bb84:	00034744 	.word	0x00034744

0002bb88 <ble_gattc_log_read_uuid>:
{
   2bb88:	b570      	push	{r4, r5, r6, lr}
   2bb8a:	b082      	sub	sp, #8
   2bb8c:	4605      	mov	r5, r0
   2bb8e:	460e      	mov	r6, r1
   2bb90:	4614      	mov	r4, r2
    ble_gattc_log_proc_init("read by uuid; ");
   2bb92:	480a      	ldr	r0, [pc, #40]	; (2bbbc <ble_gattc_log_read_uuid+0x34>)
   2bb94:	f7ff fe78 	bl	2b888 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "start_handle=%d end_handle=%d uuid=",
   2bb98:	9600      	str	r6, [sp, #0]
   2bb9a:	462b      	mov	r3, r5
   2bb9c:	4a08      	ldr	r2, [pc, #32]	; (2bbc0 <ble_gattc_log_read_uuid+0x38>)
   2bb9e:	2101      	movs	r1, #1
   2bba0:	2004      	movs	r0, #4
   2bba2:	f7f1 f8c3 	bl	1cd2c <modlog_printf>
    ble_gattc_log_uuid(uuid);
   2bba6:	4620      	mov	r0, r4
   2bba8:	f7ff ffaa 	bl	2bb00 <ble_gattc_log_uuid>
    BLE_HS_LOG(INFO, "\n");
   2bbac:	4a05      	ldr	r2, [pc, #20]	; (2bbc4 <ble_gattc_log_read_uuid+0x3c>)
   2bbae:	2101      	movs	r1, #1
   2bbb0:	2004      	movs	r0, #4
   2bbb2:	f7f1 f8bb 	bl	1cd2c <modlog_printf>
}
   2bbb6:	b002      	add	sp, #8
   2bbb8:	bd70      	pop	{r4, r5, r6, pc}
   2bbba:	bf00      	nop
   2bbbc:	00039380 	.word	0x00039380
   2bbc0:	0003935c 	.word	0x0003935c
   2bbc4:	00034744 	.word	0x00034744

0002bbc8 <ble_gattc_read_mult_tx>:
{
   2bbc8:	b508      	push	{r3, lr}
    rc = ble_att_clt_tx_read_mult(proc->conn_handle, proc->read_mult.handles,
   2bbca:	7f02      	ldrb	r2, [r0, #28]
   2bbcc:	f100 010c 	add.w	r1, r0, #12
   2bbd0:	8900      	ldrh	r0, [r0, #8]
   2bbd2:	f7fb f8e8 	bl	26da6 <ble_att_clt_tx_read_mult>
}
   2bbd6:	bd08      	pop	{r3, pc}

0002bbd8 <ble_gattc_read_uuid_rx_adata>:
{
   2bbd8:	b510      	push	{r4, lr}
   2bbda:	b082      	sub	sp, #8
   2bbdc:	4604      	mov	r4, r0
   2bbde:	460b      	mov	r3, r1
    attr.handle = adata->att_handle;
   2bbe0:	880a      	ldrh	r2, [r1, #0]
   2bbe2:	f8ad 2000 	strh.w	r2, [sp]
    attr.offset = 0;
   2bbe6:	2200      	movs	r2, #0
   2bbe8:	f8ad 2002 	strh.w	r2, [sp, #2]
    attr.om = ble_hs_mbuf_from_flat(adata->value, adata->value_len);
   2bbec:	8889      	ldrh	r1, [r1, #4]
   2bbee:	6898      	ldr	r0, [r3, #8]
   2bbf0:	f004 f9cb 	bl	2ff8a <ble_hs_mbuf_from_flat>
   2bbf4:	9001      	str	r0, [sp, #4]
    if (attr.om == NULL) {
   2bbf6:	b168      	cbz	r0, 2bc14 <ble_gattc_read_uuid_rx_adata+0x3c>
        rc = 0;
   2bbf8:	2100      	movs	r1, #0
    rc = ble_gattc_read_uuid_cb(proc, rc, 0, &attr);
   2bbfa:	466b      	mov	r3, sp
   2bbfc:	2200      	movs	r2, #0
   2bbfe:	4620      	mov	r0, r4
   2bc00:	f7ff f910 	bl	2ae24 <ble_gattc_read_uuid_cb>
   2bc04:	4604      	mov	r4, r0
    os_mbuf_free_chain(attr.om);
   2bc06:	9801      	ldr	r0, [sp, #4]
   2bc08:	f7ed fce1 	bl	195ce <os_mbuf_free_chain>
    if (rc != 0) {
   2bc0c:	b924      	cbnz	r4, 2bc18 <ble_gattc_read_uuid_rx_adata+0x40>
}
   2bc0e:	4620      	mov	r0, r4
   2bc10:	b002      	add	sp, #8
   2bc12:	bd10      	pop	{r4, pc}
        rc = BLE_HS_ENOMEM;
   2bc14:	2106      	movs	r1, #6
   2bc16:	e7f0      	b.n	2bbfa <ble_gattc_read_uuid_rx_adata+0x22>
        return BLE_HS_EDONE;
   2bc18:	240e      	movs	r4, #14
   2bc1a:	e7f8      	b.n	2bc0e <ble_gattc_read_uuid_rx_adata+0x36>

0002bc1c <ble_gattc_indicate_err>:
{
   2bc1c:	b538      	push	{r3, r4, r5, lr}
   2bc1e:	4604      	mov	r4, r0
   2bc20:	460d      	mov	r5, r1
    if (status != BLE_HS_ENOTCONN) {
   2bc22:	2907      	cmp	r1, #7
   2bc24:	d004      	beq.n	2bc30 <ble_gattc_indicate_err+0x14>
        rc = ble_gatts_rx_indicate_ack(proc->conn_handle,
   2bc26:	8981      	ldrh	r1, [r0, #12]
   2bc28:	8900      	ldrh	r0, [r0, #8]
   2bc2a:	f001 fdff 	bl	2d82c <ble_gatts_rx_indicate_ack>
        if (rc != 0) {
   2bc2e:	b940      	cbnz	r0, 2bc42 <ble_gattc_indicate_err+0x26>
    ble_gap_notify_tx_event(status, proc->conn_handle,
   2bc30:	2301      	movs	r3, #1
   2bc32:	89a2      	ldrh	r2, [r4, #12]
   2bc34:	8921      	ldrh	r1, [r4, #8]
   2bc36:	4628      	mov	r0, r5
   2bc38:	f7fe fd4b 	bl	2a6d2 <ble_gap_notify_tx_event>
    ble_gatts_send_next_indicate(proc->conn_handle);
   2bc3c:	8920      	ldrh	r0, [r4, #8]
   2bc3e:	f001 fdc9 	bl	2d7d4 <ble_gatts_send_next_indicate>
}
   2bc42:	bd38      	pop	{r3, r4, r5, pc}

0002bc44 <ble_gattc_indicate_rx_rsp>:
 * Handles an incoming handle-value-confirmation for the specified indication
 * proc.
 */
static void
ble_gattc_indicate_rx_rsp(struct ble_gattc_proc *proc)
{
   2bc44:	b510      	push	{r4, lr}
   2bc46:	4604      	mov	r4, r0
    int rc;

    ble_gattc_dbg_assert_proc_not_inserted(proc);

    rc = ble_gatts_rx_indicate_ack(proc->conn_handle,
   2bc48:	8981      	ldrh	r1, [r0, #12]
   2bc4a:	8900      	ldrh	r0, [r0, #8]
   2bc4c:	f001 fdee 	bl	2d82c <ble_gatts_rx_indicate_ack>
                                   proc->indicate.chr_val_handle);
    if (rc != 0) {
   2bc50:	b100      	cbz	r0, 2bc54 <ble_gattc_indicate_rx_rsp+0x10>
    ble_gap_notify_tx_event(BLE_HS_EDONE, proc->conn_handle,
                            proc->indicate.chr_val_handle, 1);

    /* Send the next indication if one is pending. */
    ble_gatts_send_next_indicate(proc->conn_handle);
}
   2bc52:	bd10      	pop	{r4, pc}
    ble_gap_notify_tx_event(BLE_HS_EDONE, proc->conn_handle,
   2bc54:	2301      	movs	r3, #1
   2bc56:	89a2      	ldrh	r2, [r4, #12]
   2bc58:	8921      	ldrh	r1, [r4, #8]
   2bc5a:	200e      	movs	r0, #14
   2bc5c:	f7fe fd39 	bl	2a6d2 <ble_gap_notify_tx_event>
    ble_gatts_send_next_indicate(proc->conn_handle);
   2bc60:	8920      	ldrh	r0, [r4, #8]
   2bc62:	f001 fdb7 	bl	2d7d4 <ble_gatts_send_next_indicate>
   2bc66:	e7f4      	b.n	2bc52 <ble_gattc_indicate_rx_rsp+0xe>

0002bc68 <ble_gattc_disc_all_svcs_rx_adata>:
{
   2bc68:	b570      	push	{r4, r5, r6, lr}
   2bc6a:	b086      	sub	sp, #24
   2bc6c:	4605      	mov	r5, r0
   2bc6e:	460c      	mov	r4, r1
    switch (adata->value_len) {
   2bc70:	684a      	ldr	r2, [r1, #4]
   2bc72:	2a02      	cmp	r2, #2
   2bc74:	d00c      	beq.n	2bc90 <ble_gattc_disc_all_svcs_rx_adata+0x28>
   2bc76:	2a10      	cmp	r2, #16
   2bc78:	d00a      	beq.n	2bc90 <ble_gattc_disc_all_svcs_rx_adata+0x28>
   2bc7a:	260a      	movs	r6, #10
    cbrc = ble_gattc_disc_all_svcs_cb(proc, rc, 0, &service);
   2bc7c:	466b      	mov	r3, sp
   2bc7e:	2200      	movs	r2, #0
   2bc80:	b2b1      	uxth	r1, r6
   2bc82:	4628      	mov	r0, r5
   2bc84:	f7fe ff32 	bl	2aaec <ble_gattc_disc_all_svcs_cb>
    if (rc != 0 || cbrc != 0) {
   2bc88:	b9ce      	cbnz	r6, 2bcbe <ble_gattc_disc_all_svcs_rx_adata+0x56>
   2bc8a:	b9b0      	cbnz	r0, 2bcba <ble_gattc_disc_all_svcs_rx_adata+0x52>
}
   2bc8c:	b006      	add	sp, #24
   2bc8e:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_uuid_init_from_att_buf(&service.uuid, adata->value,
   2bc90:	68a1      	ldr	r1, [r4, #8]
   2bc92:	a801      	add	r0, sp, #4
   2bc94:	f005 fbf9 	bl	3148a <ble_uuid_init_from_att_buf>
        if (rc != 0) {
   2bc98:	4606      	mov	r6, r0
   2bc9a:	b950      	cbnz	r0, 2bcb2 <ble_gattc_disc_all_svcs_rx_adata+0x4a>
    if (adata->end_group_handle <= proc->disc_all_svcs.prev_handle) {
   2bc9c:	8863      	ldrh	r3, [r4, #2]
   2bc9e:	89aa      	ldrh	r2, [r5, #12]
   2bca0:	4293      	cmp	r3, r2
   2bca2:	d908      	bls.n	2bcb6 <ble_gattc_disc_all_svcs_rx_adata+0x4e>
    proc->disc_all_svcs.prev_handle = adata->end_group_handle;
   2bca4:	81ab      	strh	r3, [r5, #12]
    service.start_handle = adata->att_handle;
   2bca6:	8822      	ldrh	r2, [r4, #0]
   2bca8:	f8ad 2000 	strh.w	r2, [sp]
    service.end_handle = adata->end_group_handle;
   2bcac:	f8ad 3002 	strh.w	r3, [sp, #2]
    rc = 0;
   2bcb0:	e7e4      	b.n	2bc7c <ble_gattc_disc_all_svcs_rx_adata+0x14>
            rc = BLE_HS_EBADDATA;
   2bcb2:	260a      	movs	r6, #10
   2bcb4:	e7e2      	b.n	2bc7c <ble_gattc_disc_all_svcs_rx_adata+0x14>
        rc = BLE_HS_EBADDATA;
   2bcb6:	260a      	movs	r6, #10
   2bcb8:	e7e0      	b.n	2bc7c <ble_gattc_disc_all_svcs_rx_adata+0x14>
        return BLE_HS_EDONE;
   2bcba:	200e      	movs	r0, #14
   2bcbc:	e7e6      	b.n	2bc8c <ble_gattc_disc_all_svcs_rx_adata+0x24>
   2bcbe:	200e      	movs	r0, #14
   2bcc0:	e7e4      	b.n	2bc8c <ble_gattc_disc_all_svcs_rx_adata+0x24>

0002bcc2 <ble_gattc_disc_all_chrs_rx_adata>:
{
   2bcc2:	b570      	push	{r4, r5, r6, lr}
   2bcc4:	b088      	sub	sp, #32
   2bcc6:	4606      	mov	r6, r0
   2bcc8:	460c      	mov	r4, r1
    memset(&chr, 0, sizeof chr);
   2bcca:	2300      	movs	r3, #0
   2bccc:	9301      	str	r3, [sp, #4]
   2bcce:	9302      	str	r3, [sp, #8]
   2bcd0:	9303      	str	r3, [sp, #12]
   2bcd2:	9304      	str	r3, [sp, #16]
   2bcd4:	9305      	str	r3, [sp, #20]
   2bcd6:	9306      	str	r3, [sp, #24]
   2bcd8:	9307      	str	r3, [sp, #28]
    chr.def_handle = adata->att_handle;
   2bcda:	880b      	ldrh	r3, [r1, #0]
   2bcdc:	f8ad 3004 	strh.w	r3, [sp, #4]
    switch (adata->value_len) {
   2bce0:	684a      	ldr	r2, [r1, #4]
   2bce2:	2a05      	cmp	r2, #5
   2bce4:	d00c      	beq.n	2bd00 <ble_gattc_disc_all_chrs_rx_adata+0x3e>
   2bce6:	2a13      	cmp	r2, #19
   2bce8:	d00a      	beq.n	2bd00 <ble_gattc_disc_all_chrs_rx_adata+0x3e>
   2bcea:	250a      	movs	r5, #10
    cbrc = ble_gattc_disc_all_chrs_cb(proc, rc, 0, &chr);
   2bcec:	ab01      	add	r3, sp, #4
   2bcee:	2200      	movs	r2, #0
   2bcf0:	4629      	mov	r1, r5
   2bcf2:	4630      	mov	r0, r6
   2bcf4:	f7fe ffaa 	bl	2ac4c <ble_gattc_disc_all_chrs_cb>
    if (rc != 0 || cbrc != 0) {
   2bcf8:	b9fd      	cbnz	r5, 2bd3a <ble_gattc_disc_all_chrs_rx_adata+0x78>
   2bcfa:	b9e0      	cbnz	r0, 2bd36 <ble_gattc_disc_all_chrs_rx_adata+0x74>
}
   2bcfc:	b008      	add	sp, #32
   2bcfe:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_uuid_init_from_att_buf(&chr.uuid, adata->value + 3,
   2bd00:	68a1      	ldr	r1, [r4, #8]
   2bd02:	3a03      	subs	r2, #3
   2bd04:	3103      	adds	r1, #3
   2bd06:	a803      	add	r0, sp, #12
   2bd08:	f005 fbbf 	bl	3148a <ble_uuid_init_from_att_buf>
        if (rc != 0) {
   2bd0c:	4605      	mov	r5, r0
   2bd0e:	b108      	cbz	r0, 2bd14 <ble_gattc_disc_all_chrs_rx_adata+0x52>
            rc = BLE_HS_EBADDATA;
   2bd10:	250a      	movs	r5, #10
   2bd12:	e7eb      	b.n	2bcec <ble_gattc_disc_all_chrs_rx_adata+0x2a>
    chr.properties = adata->value[0];
   2bd14:	68a0      	ldr	r0, [r4, #8]
   2bd16:	f810 3b01 	ldrb.w	r3, [r0], #1
   2bd1a:	f88d 3008 	strb.w	r3, [sp, #8]
    chr.val_handle = get_le16(adata->value + 1);
   2bd1e:	f7ed f896 	bl	18e4e <get_le16>
   2bd22:	f8ad 0006 	strh.w	r0, [sp, #6]
    if (adata->att_handle <= proc->disc_all_chrs.prev_handle) {
   2bd26:	8823      	ldrh	r3, [r4, #0]
   2bd28:	89b2      	ldrh	r2, [r6, #12]
   2bd2a:	4293      	cmp	r3, r2
   2bd2c:	d901      	bls.n	2bd32 <ble_gattc_disc_all_chrs_rx_adata+0x70>
    proc->disc_all_chrs.prev_handle = adata->att_handle;
   2bd2e:	81b3      	strh	r3, [r6, #12]
    rc = 0;
   2bd30:	e7dc      	b.n	2bcec <ble_gattc_disc_all_chrs_rx_adata+0x2a>
        rc = BLE_HS_EBADDATA;
   2bd32:	250a      	movs	r5, #10
   2bd34:	e7da      	b.n	2bcec <ble_gattc_disc_all_chrs_rx_adata+0x2a>
        return BLE_HS_EDONE;
   2bd36:	200e      	movs	r0, #14
   2bd38:	e7e0      	b.n	2bcfc <ble_gattc_disc_all_chrs_rx_adata+0x3a>
   2bd3a:	200e      	movs	r0, #14
   2bd3c:	e7de      	b.n	2bcfc <ble_gattc_disc_all_chrs_rx_adata+0x3a>

0002bd3e <ble_gattc_find_inc_svcs_rx_adata>:
    if (proc->find_inc_svcs.cur_start != 0) {
   2bd3e:	8a03      	ldrh	r3, [r0, #16]
   2bd40:	2b00      	cmp	r3, #0
   2bd42:	d13f      	bne.n	2bdc4 <ble_gattc_find_inc_svcs_rx_adata+0x86>
{
   2bd44:	b530      	push	{r4, r5, lr}
   2bd46:	b087      	sub	sp, #28
   2bd48:	4604      	mov	r4, r0
   2bd4a:	460d      	mov	r5, r1
    if (adata->att_handle <= proc->find_inc_svcs.prev_handle) {
   2bd4c:	880b      	ldrh	r3, [r1, #0]
   2bd4e:	8982      	ldrh	r2, [r0, #12]
   2bd50:	4293      	cmp	r3, r2
   2bd52:	d928      	bls.n	2bda6 <ble_gattc_find_inc_svcs_rx_adata+0x68>
    proc->find_inc_svcs.prev_handle = adata->att_handle;
   2bd54:	8183      	strh	r3, [r0, #12]
    switch (adata->value_len) {
   2bd56:	684b      	ldr	r3, [r1, #4]
   2bd58:	2b04      	cmp	r3, #4
   2bd5a:	d003      	beq.n	2bd64 <ble_gattc_find_inc_svcs_rx_adata+0x26>
   2bd5c:	2b06      	cmp	r3, #6
   2bd5e:	d00d      	beq.n	2bd7c <ble_gattc_find_inc_svcs_rx_adata+0x3e>
   2bd60:	250a      	movs	r5, #10
   2bd62:	e021      	b.n	2bda8 <ble_gattc_find_inc_svcs_rx_adata+0x6a>
        proc->find_inc_svcs.cur_start = get_le16(adata->value + 0);
   2bd64:	6888      	ldr	r0, [r1, #8]
   2bd66:	f7ed f872 	bl	18e4e <get_le16>
   2bd6a:	8220      	strh	r0, [r4, #16]
        proc->find_inc_svcs.cur_end = get_le16(adata->value + 2);
   2bd6c:	68a8      	ldr	r0, [r5, #8]
   2bd6e:	3002      	adds	r0, #2
   2bd70:	f7ed f86d 	bl	18e4e <get_le16>
   2bd74:	8260      	strh	r0, [r4, #18]
    rc = 0;
   2bd76:	2500      	movs	r5, #0
        cbrc = 0;
   2bd78:	4628      	mov	r0, r5
   2bd7a:	e01d      	b.n	2bdb8 <ble_gattc_find_inc_svcs_rx_adata+0x7a>
        service.start_handle = get_le16(adata->value + 0);
   2bd7c:	6888      	ldr	r0, [r1, #8]
   2bd7e:	f7ed f866 	bl	18e4e <get_le16>
   2bd82:	f8ad 0000 	strh.w	r0, [sp]
        service.end_handle = get_le16(adata->value + 2);
   2bd86:	68a8      	ldr	r0, [r5, #8]
   2bd88:	3002      	adds	r0, #2
   2bd8a:	f7ed f860 	bl	18e4e <get_le16>
   2bd8e:	f8ad 0002 	strh.w	r0, [sp, #2]
        rc = ble_uuid_init_from_att_buf(&service.uuid, adata->value + 4, 2);
   2bd92:	68a9      	ldr	r1, [r5, #8]
   2bd94:	2202      	movs	r2, #2
   2bd96:	3104      	adds	r1, #4
   2bd98:	a801      	add	r0, sp, #4
   2bd9a:	f005 fb76 	bl	3148a <ble_uuid_init_from_att_buf>
        if (rc != 0) {
   2bd9e:	4605      	mov	r5, r0
   2bda0:	b110      	cbz	r0, 2bda8 <ble_gattc_find_inc_svcs_rx_adata+0x6a>
            rc = BLE_HS_EBADDATA;
   2bda2:	250a      	movs	r5, #10
   2bda4:	e000      	b.n	2bda8 <ble_gattc_find_inc_svcs_rx_adata+0x6a>
        rc = BLE_HS_EBADDATA;
   2bda6:	250a      	movs	r5, #10
        cbrc = ble_gattc_find_inc_svcs_cb(proc, 0, 0, &service);
   2bda8:	466b      	mov	r3, sp
   2bdaa:	2200      	movs	r2, #0
   2bdac:	4611      	mov	r1, r2
   2bdae:	4620      	mov	r0, r4
   2bdb0:	f7fe ff1c 	bl	2abec <ble_gattc_find_inc_svcs_cb>
        if (rc != 0) {
   2bdb4:	b105      	cbz	r5, 2bdb8 <ble_gattc_find_inc_svcs_rx_adata+0x7a>
            rc = cbrc;
   2bdb6:	4605      	mov	r5, r0
    if (rc != 0 || cbrc != 0) {
   2bdb8:	b935      	cbnz	r5, 2bdc8 <ble_gattc_find_inc_svcs_rx_adata+0x8a>
   2bdba:	b908      	cbnz	r0, 2bdc0 <ble_gattc_find_inc_svcs_rx_adata+0x82>
}
   2bdbc:	b007      	add	sp, #28
   2bdbe:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EDONE;
   2bdc0:	200e      	movs	r0, #14
   2bdc2:	e7fb      	b.n	2bdbc <ble_gattc_find_inc_svcs_rx_adata+0x7e>
        return 0;
   2bdc4:	2000      	movs	r0, #0
}
   2bdc6:	4770      	bx	lr
        return BLE_HS_EDONE;
   2bdc8:	200e      	movs	r0, #14
   2bdca:	e7f7      	b.n	2bdbc <ble_gattc_find_inc_svcs_rx_adata+0x7e>

0002bdcc <ble_gattc_disc_chr_uuid_rx_adata>:
{
   2bdcc:	b570      	push	{r4, r5, r6, lr}
   2bdce:	b088      	sub	sp, #32
   2bdd0:	4606      	mov	r6, r0
   2bdd2:	460c      	mov	r4, r1
    memset(&chr, 0, sizeof chr);
   2bdd4:	2300      	movs	r3, #0
   2bdd6:	9301      	str	r3, [sp, #4]
   2bdd8:	9302      	str	r3, [sp, #8]
   2bdda:	9303      	str	r3, [sp, #12]
   2bddc:	9304      	str	r3, [sp, #16]
   2bdde:	9305      	str	r3, [sp, #20]
   2bde0:	9306      	str	r3, [sp, #24]
   2bde2:	9307      	str	r3, [sp, #28]
    chr.def_handle = adata->att_handle;
   2bde4:	880b      	ldrh	r3, [r1, #0]
   2bde6:	f8ad 3004 	strh.w	r3, [sp, #4]
    switch (adata->value_len) {
   2bdea:	684a      	ldr	r2, [r1, #4]
   2bdec:	2a05      	cmp	r2, #5
   2bdee:	d00e      	beq.n	2be0e <ble_gattc_disc_chr_uuid_rx_adata+0x42>
   2bdf0:	2a13      	cmp	r2, #19
   2bdf2:	d00c      	beq.n	2be0e <ble_gattc_disc_chr_uuid_rx_adata+0x42>
        cbrc = ble_gattc_disc_chr_uuid_cb(proc, rc, 0, NULL);
   2bdf4:	2300      	movs	r3, #0
   2bdf6:	461a      	mov	r2, r3
   2bdf8:	210a      	movs	r1, #10
   2bdfa:	4630      	mov	r0, r6
   2bdfc:	f7fe ff54 	bl	2aca8 <ble_gattc_disc_chr_uuid_cb>
   2be00:	4605      	mov	r5, r0
   2be02:	240a      	movs	r4, #10
    if (rc != 0 || cbrc != 0) {
   2be04:	bb6c      	cbnz	r4, 2be62 <ble_gattc_disc_chr_uuid_rx_adata+0x96>
   2be06:	bb55      	cbnz	r5, 2be5e <ble_gattc_disc_chr_uuid_rx_adata+0x92>
}
   2be08:	4628      	mov	r0, r5
   2be0a:	b008      	add	sp, #32
   2be0c:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_uuid_init_from_att_buf(&chr.uuid, adata->value + 3,
   2be0e:	68a1      	ldr	r1, [r4, #8]
   2be10:	3a03      	subs	r2, #3
   2be12:	3103      	adds	r1, #3
   2be14:	a803      	add	r0, sp, #12
   2be16:	f005 fb38 	bl	3148a <ble_uuid_init_from_att_buf>
        if (rc != 0) {
   2be1a:	4605      	mov	r5, r0
   2be1c:	2800      	cmp	r0, #0
   2be1e:	d1e9      	bne.n	2bdf4 <ble_gattc_disc_chr_uuid_rx_adata+0x28>
    chr.properties = adata->value[0];
   2be20:	68a0      	ldr	r0, [r4, #8]
   2be22:	f810 3b01 	ldrb.w	r3, [r0], #1
   2be26:	f88d 3008 	strb.w	r3, [sp, #8]
    chr.val_handle = get_le16(adata->value + 1);
   2be2a:	f7ed f810 	bl	18e4e <get_le16>
   2be2e:	f8ad 0006 	strh.w	r0, [sp, #6]
    if (adata->att_handle <= proc->disc_chr_uuid.prev_handle) {
   2be32:	8823      	ldrh	r3, [r4, #0]
   2be34:	8c32      	ldrh	r2, [r6, #32]
   2be36:	4293      	cmp	r3, r2
   2be38:	d9dc      	bls.n	2bdf4 <ble_gattc_disc_chr_uuid_rx_adata+0x28>
    proc->disc_chr_uuid.prev_handle = adata->att_handle;
   2be3a:	8433      	strh	r3, [r6, #32]
    } else if (ble_uuid_cmp(&chr.uuid.u, &proc->disc_chr_uuid.chr_uuid.u) == 0) {
   2be3c:	f106 010c 	add.w	r1, r6, #12
   2be40:	a803      	add	r0, sp, #12
   2be42:	f005 faa8 	bl	31396 <ble_uuid_cmp>
   2be46:	4604      	mov	r4, r0
   2be48:	b108      	cbz	r0, 2be4e <ble_gattc_disc_chr_uuid_rx_adata+0x82>
    rc = 0;
   2be4a:	462c      	mov	r4, r5
   2be4c:	e7da      	b.n	2be04 <ble_gattc_disc_chr_uuid_rx_adata+0x38>
        cbrc = ble_gattc_disc_chr_uuid_cb(proc, 0, 0, &chr);
   2be4e:	ab01      	add	r3, sp, #4
   2be50:	2200      	movs	r2, #0
   2be52:	4611      	mov	r1, r2
   2be54:	4630      	mov	r0, r6
   2be56:	f7fe ff27 	bl	2aca8 <ble_gattc_disc_chr_uuid_cb>
   2be5a:	4605      	mov	r5, r0
   2be5c:	e7d2      	b.n	2be04 <ble_gattc_disc_chr_uuid_rx_adata+0x38>
        return BLE_HS_EDONE;
   2be5e:	250e      	movs	r5, #14
   2be60:	e7d2      	b.n	2be08 <ble_gattc_disc_chr_uuid_rx_adata+0x3c>
   2be62:	250e      	movs	r5, #14
   2be64:	e7d0      	b.n	2be08 <ble_gattc_disc_chr_uuid_rx_adata+0x3c>

0002be66 <ble_gattc_find_inc_svcs_rx_read_rsp>:
{
   2be66:	b5f0      	push	{r4, r5, r6, r7, lr}
   2be68:	b087      	sub	sp, #28
   2be6a:	4606      	mov	r6, r0
   2be6c:	460c      	mov	r4, r1
   2be6e:	4615      	mov	r5, r2
    rc = ble_uuid_init_from_att_mbuf(&service.uuid, *om, 0, 16);
   2be70:	2310      	movs	r3, #16
   2be72:	2200      	movs	r2, #0
   2be74:	6829      	ldr	r1, [r5, #0]
   2be76:	a801      	add	r0, sp, #4
   2be78:	f005 fb26 	bl	314c8 <ble_uuid_init_from_att_mbuf>
   2be7c:	4607      	mov	r7, r0
    os_mbuf_free_chain(*om);
   2be7e:	6828      	ldr	r0, [r5, #0]
   2be80:	f7ed fba5 	bl	195ce <os_mbuf_free_chain>
    *om = NULL;
   2be84:	2300      	movs	r3, #0
   2be86:	602b      	str	r3, [r5, #0]
    if (rc != 0) {
   2be88:	b9bf      	cbnz	r7, 2beba <ble_gattc_find_inc_svcs_rx_read_rsp+0x54>
    if (proc->find_inc_svcs.cur_start == 0) {
   2be8a:	8a33      	ldrh	r3, [r6, #16]
   2be8c:	b1fb      	cbz	r3, 2bece <ble_gattc_find_inc_svcs_rx_read_rsp+0x68>
    if (status != 0) {
   2be8e:	b9ac      	cbnz	r4, 2bebc <ble_gattc_find_inc_svcs_rx_read_rsp+0x56>
    service.start_handle = proc->find_inc_svcs.cur_start;
   2be90:	f8ad 3000 	strh.w	r3, [sp]
    service.end_handle = proc->find_inc_svcs.cur_end;
   2be94:	8a73      	ldrh	r3, [r6, #18]
   2be96:	f8ad 3002 	strh.w	r3, [sp, #2]
    rc = ble_gattc_find_inc_svcs_cb(proc, 0, 0, &service);
   2be9a:	466b      	mov	r3, sp
   2be9c:	2200      	movs	r2, #0
   2be9e:	4611      	mov	r1, r2
   2bea0:	4630      	mov	r0, r6
   2bea2:	f7fe fea3 	bl	2abec <ble_gattc_find_inc_svcs_cb>
    if (rc != 0) {
   2bea6:	b9a0      	cbnz	r0, 2bed2 <ble_gattc_find_inc_svcs_rx_read_rsp+0x6c>
    proc->find_inc_svcs.cur_start = 0;
   2bea8:	2300      	movs	r3, #0
   2beaa:	8233      	strh	r3, [r6, #16]
    proc->find_inc_svcs.cur_end = 0;
   2beac:	8273      	strh	r3, [r6, #18]
    rc = ble_gattc_find_inc_svcs_resume(proc);
   2beae:	4630      	mov	r0, r6
   2beb0:	f7ff fbe8 	bl	2b684 <ble_gattc_find_inc_svcs_resume>
    if (rc != 0) {
   2beb4:	b148      	cbz	r0, 2beca <ble_gattc_find_inc_svcs_rx_read_rsp+0x64>
    rc = ble_gattc_find_inc_svcs_resume(proc);
   2beb6:	4604      	mov	r4, r0
   2beb8:	e000      	b.n	2bebc <ble_gattc_find_inc_svcs_rx_read_rsp+0x56>
        rc = BLE_HS_EBADDATA;
   2beba:	240a      	movs	r4, #10
    ble_gattc_find_inc_svcs_cb(proc, rc, 0, NULL);
   2bebc:	2300      	movs	r3, #0
   2bebe:	461a      	mov	r2, r3
   2bec0:	4621      	mov	r1, r4
   2bec2:	4630      	mov	r0, r6
   2bec4:	f7fe fe92 	bl	2abec <ble_gattc_find_inc_svcs_cb>
    return BLE_HS_EDONE;
   2bec8:	200e      	movs	r0, #14
}
   2beca:	b007      	add	sp, #28
   2becc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = BLE_HS_EBADDATA;
   2bece:	240a      	movs	r4, #10
   2bed0:	e7f4      	b.n	2bebc <ble_gattc_find_inc_svcs_rx_read_rsp+0x56>
        return BLE_HS_EDONE;
   2bed2:	200e      	movs	r0, #14
   2bed4:	e7f9      	b.n	2beca <ble_gattc_find_inc_svcs_rx_read_rsp+0x64>

0002bed6 <ble_gattc_write_reliable_rx_prep>:
{
   2bed6:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bed8:	b083      	sub	sp, #12
   2beda:	4604      	mov	r4, r0
    om = *rxom;
   2bedc:	9808      	ldr	r0, [sp, #32]
   2bede:	6807      	ldr	r7, [r0, #0]
    if (status != 0) {
   2bee0:	4608      	mov	r0, r1
   2bee2:	bba1      	cbnz	r1, 2bf4e <ble_gattc_write_reliable_rx_prep+0x78>
   2bee4:	461d      	mov	r5, r3
    if (proc->write_reliable.cur_attr >= proc->write_reliable.num_attrs) {
   2bee6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   2beea:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   2beee:	4298      	cmp	r0, r3
   2bef0:	d22a      	bcs.n	2bf48 <ble_gattc_write_reliable_rx_prep+0x72>
    attr = proc->write_reliable.attrs + proc->write_reliable.cur_attr;
   2bef2:	f104 030c 	add.w	r3, r4, #12
   2bef6:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
    if (handle != attr->handle) {
   2befa:	f833 3030 	ldrh.w	r3, [r3, r0, lsl #3]
   2befe:	4293      	cmp	r3, r2
   2bf00:	d124      	bne.n	2bf4c <ble_gattc_write_reliable_rx_prep+0x76>
    if (offset != attr->offset) {
   2bf02:	8873      	ldrh	r3, [r6, #2]
   2bf04:	42ab      	cmp	r3, r5
   2bf06:	d001      	beq.n	2bf0c <ble_gattc_write_reliable_rx_prep+0x36>
        rc = BLE_HS_EBADDATA;
   2bf08:	200a      	movs	r0, #10
   2bf0a:	e020      	b.n	2bf4e <ble_gattc_write_reliable_rx_prep+0x78>
    if (os_mbuf_cmpm(attr->om, offset, om, 0,
   2bf0c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   2bf0e:	9300      	str	r3, [sp, #0]
   2bf10:	2300      	movs	r3, #0
   2bf12:	463a      	mov	r2, r7
   2bf14:	4629      	mov	r1, r5
   2bf16:	6870      	ldr	r0, [r6, #4]
   2bf18:	f7ed fcb5 	bl	19886 <os_mbuf_cmpm>
   2bf1c:	b9f8      	cbnz	r0, 2bf5e <ble_gattc_write_reliable_rx_prep+0x88>
    attr->offset += proc->write_reliable.length;
   2bf1e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   2bf20:	8872      	ldrh	r2, [r6, #2]
   2bf22:	4413      	add	r3, r2
   2bf24:	b29b      	uxth	r3, r3
   2bf26:	8073      	strh	r3, [r6, #2]
    if (attr->offset >= OS_MBUF_PKTLEN(attr->om)) {
   2bf28:	6872      	ldr	r2, [r6, #4]
   2bf2a:	8a12      	ldrh	r2, [r2, #16]
   2bf2c:	4293      	cmp	r3, r2
   2bf2e:	d306      	bcc.n	2bf3e <ble_gattc_write_reliable_rx_prep+0x68>
        attr->offset = 0;
   2bf30:	2300      	movs	r3, #0
   2bf32:	8073      	strh	r3, [r6, #2]
        proc->write_reliable.cur_attr++;
   2bf34:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   2bf38:	3301      	adds	r3, #1
   2bf3a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    rc = ble_gattc_write_reliable_resume(proc);
   2bf3e:	4620      	mov	r0, r4
   2bf40:	f7ff fa21 	bl	2b386 <ble_gattc_write_reliable_resume>
    if (rc != 0) {
   2bf44:	b148      	cbz	r0, 2bf5a <ble_gattc_write_reliable_rx_prep+0x84>
   2bf46:	e002      	b.n	2bf4e <ble_gattc_write_reliable_rx_prep+0x78>
        rc = BLE_HS_EBADDATA;
   2bf48:	200a      	movs	r0, #10
   2bf4a:	e000      	b.n	2bf4e <ble_gattc_write_reliable_rx_prep+0x78>
        rc = BLE_HS_EBADDATA;
   2bf4c:	200a      	movs	r0, #10
    ble_gattc_write_reliable_err(proc, rc, 0);
   2bf4e:	2200      	movs	r2, #0
   2bf50:	4601      	mov	r1, r0
   2bf52:	4620      	mov	r0, r4
   2bf54:	f7ff f9ad 	bl	2b2b2 <ble_gattc_write_reliable_err>
    return BLE_HS_EDONE;
   2bf58:	200e      	movs	r0, #14
}
   2bf5a:	b003      	add	sp, #12
   2bf5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = BLE_HS_EBADDATA;
   2bf5e:	200a      	movs	r0, #10
   2bf60:	e7f5      	b.n	2bf4e <ble_gattc_write_reliable_rx_prep+0x78>

0002bf62 <ble_gattc_write_long_rx_prep>:
{
   2bf62:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bf64:	b083      	sub	sp, #12
   2bf66:	4604      	mov	r4, r0
    om = *rxom;
   2bf68:	9808      	ldr	r0, [sp, #32]
   2bf6a:	6805      	ldr	r5, [r0, #0]
    if (status != 0) {
   2bf6c:	4608      	mov	r0, r1
   2bf6e:	bb59      	cbnz	r1, 2bfc8 <ble_gattc_write_long_rx_prep+0x66>
    if (proc->write_long.attr.offset >=
   2bf70:	89e1      	ldrh	r1, [r4, #14]
        OS_MBUF_PKTLEN(proc->write_long.attr.om)) {
   2bf72:	6926      	ldr	r6, [r4, #16]
   2bf74:	8a30      	ldrh	r0, [r6, #16]
    if (proc->write_long.attr.offset >=
   2bf76:	4281      	cmp	r1, r0
   2bf78:	d223      	bcs.n	2bfc2 <ble_gattc_write_long_rx_prep+0x60>
    if (handle != proc->write_long.attr.handle) {
   2bf7a:	89a7      	ldrh	r7, [r4, #12]
   2bf7c:	4297      	cmp	r7, r2
   2bf7e:	d122      	bne.n	2bfc6 <ble_gattc_write_long_rx_prep+0x64>
    if (offset != proc->write_long.attr.offset) {
   2bf80:	4299      	cmp	r1, r3
   2bf82:	d129      	bne.n	2bfd8 <ble_gattc_write_long_rx_prep+0x76>
    if (offset + OS_MBUF_PKTLEN(om) >
   2bf84:	8a2a      	ldrh	r2, [r5, #16]
   2bf86:	1899      	adds	r1, r3, r2
   2bf88:	4281      	cmp	r1, r0
   2bf8a:	dc27      	bgt.n	2bfdc <ble_gattc_write_long_rx_prep+0x7a>
    if (OS_MBUF_PKTLEN(om) != proc->write_long.length) {
   2bf8c:	8aa1      	ldrh	r1, [r4, #20]
   2bf8e:	428a      	cmp	r2, r1
   2bf90:	d001      	beq.n	2bf96 <ble_gattc_write_long_rx_prep+0x34>
        rc = BLE_HS_EBADDATA;
   2bf92:	200a      	movs	r0, #10
   2bf94:	e018      	b.n	2bfc8 <ble_gattc_write_long_rx_prep+0x66>
    if (os_mbuf_cmpm(om, 0,
   2bf96:	9100      	str	r1, [sp, #0]
   2bf98:	4632      	mov	r2, r6
   2bf9a:	2100      	movs	r1, #0
   2bf9c:	4628      	mov	r0, r5
   2bf9e:	f7ed fc72 	bl	19886 <os_mbuf_cmpm>
   2bfa2:	b940      	cbnz	r0, 2bfb6 <ble_gattc_write_long_rx_prep+0x54>
        proc->write_long.attr.offset += OS_MBUF_PKTLEN(om);
   2bfa4:	8a2b      	ldrh	r3, [r5, #16]
   2bfa6:	89e2      	ldrh	r2, [r4, #14]
   2bfa8:	4413      	add	r3, r2
   2bfaa:	81e3      	strh	r3, [r4, #14]
        rc = ble_gattc_write_long_resume(proc);
   2bfac:	4620      	mov	r0, r4
   2bfae:	f7ff fa33 	bl	2b418 <ble_gattc_write_long_resume>
        if (rc != 0) {
   2bfb2:	b178      	cbz	r0, 2bfd4 <ble_gattc_write_long_rx_prep+0x72>
   2bfb4:	e008      	b.n	2bfc8 <ble_gattc_write_long_rx_prep+0x66>
        ble_att_clt_tx_exec_write(proc->conn_handle, BLE_ATT_EXEC_WRITE_F_CANCEL);
   2bfb6:	2100      	movs	r1, #0
   2bfb8:	8920      	ldrh	r0, [r4, #8]
   2bfba:	f7fb f812 	bl	26fe2 <ble_att_clt_tx_exec_write>
        rc = BLE_HS_EBADDATA;
   2bfbe:	200a      	movs	r0, #10
        goto err;
   2bfc0:	e002      	b.n	2bfc8 <ble_gattc_write_long_rx_prep+0x66>
        rc = BLE_HS_EBADDATA;
   2bfc2:	200a      	movs	r0, #10
   2bfc4:	e000      	b.n	2bfc8 <ble_gattc_write_long_rx_prep+0x66>
        rc = BLE_HS_EBADDATA;
   2bfc6:	200a      	movs	r0, #10
    ble_gattc_write_long_cb(proc, rc, 0);
   2bfc8:	2200      	movs	r2, #0
   2bfca:	4601      	mov	r1, r0
   2bfcc:	4620      	mov	r0, r4
   2bfce:	f7fe ffbd 	bl	2af4c <ble_gattc_write_long_cb>
    return BLE_HS_EDONE;
   2bfd2:	200e      	movs	r0, #14
}
   2bfd4:	b003      	add	sp, #12
   2bfd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = BLE_HS_EBADDATA;
   2bfd8:	200a      	movs	r0, #10
   2bfda:	e7f5      	b.n	2bfc8 <ble_gattc_write_long_rx_prep+0x66>
        rc = BLE_HS_EBADDATA;
   2bfdc:	200a      	movs	r0, #10
   2bfde:	e7f3      	b.n	2bfc8 <ble_gattc_write_long_rx_prep+0x66>

0002bfe0 <ble_gattc_timer>:
{
   2bfe0:	b530      	push	{r4, r5, lr}
   2bfe2:	b083      	sub	sp, #12
    ticks_until_exp = ble_gattc_extract_expired(&exp_list);
   2bfe4:	4668      	mov	r0, sp
   2bfe6:	f7ff f887 	bl	2b0f8 <ble_gattc_extract_expired>
   2bfea:	4605      	mov	r5, r0
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   2bfec:	e004      	b.n	2bff8 <ble_gattc_timer+0x18>
        STAILQ_REMOVE_HEAD(&exp_list, next);
   2bfee:	f8cd d004 	str.w	sp, [sp, #4]
        ble_gattc_proc_free(proc);
   2bff2:	4620      	mov	r0, r4
   2bff4:	f7ff f91c 	bl	2b230 <ble_gattc_proc_free>
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   2bff8:	9c00      	ldr	r4, [sp, #0]
   2bffa:	b194      	cbz	r4, 2c022 <ble_gattc_timer+0x42>
        STATS_INC(ble_gattc_stats, proc_timeout);
   2bffc:	4a11      	ldr	r2, [pc, #68]	; (2c044 <ble_gattc_timer+0x64>)
   2bffe:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   2c002:	3301      	adds	r3, #1
   2c004:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        ble_gattc_proc_timeout(proc);
   2c008:	4620      	mov	r0, r4
   2c00a:	f7fe fd2e 	bl	2aa6a <ble_gattc_proc_timeout>
        ble_gap_terminate(proc->conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   2c00e:	2113      	movs	r1, #19
   2c010:	8920      	ldrh	r0, [r4, #8]
   2c012:	f7fe f8e1 	bl	2a1d8 <ble_gap_terminate>
        STAILQ_REMOVE_HEAD(&exp_list, next);
   2c016:	9b00      	ldr	r3, [sp, #0]
   2c018:	681b      	ldr	r3, [r3, #0]
   2c01a:	9300      	str	r3, [sp, #0]
   2c01c:	2b00      	cmp	r3, #0
   2c01e:	d1e8      	bne.n	2bff2 <ble_gattc_timer+0x12>
   2c020:	e7e5      	b.n	2bfee <ble_gattc_timer+0xe>
    ticks_until_resume = ble_gattc_ticks_until_resume();
   2c022:	f7ff f819 	bl	2b058 <ble_gattc_ticks_until_resume>
    if (ticks_until_resume == 0) {
   2c026:	4603      	mov	r3, r0
   2c028:	b128      	cbz	r0, 2c036 <ble_gattc_timer+0x56>
}
   2c02a:	42ab      	cmp	r3, r5
   2c02c:	bfa8      	it	ge
   2c02e:	462b      	movge	r3, r5
   2c030:	4618      	mov	r0, r3
   2c032:	b003      	add	sp, #12
   2c034:	bd30      	pop	{r4, r5, pc}
        ble_gattc_resume_procs();
   2c036:	f7ff fbfb 	bl	2b830 <ble_gattc_resume_procs>
        ticks_until_resume = ble_gattc_ticks_until_resume();
   2c03a:	f7ff f80d 	bl	2b058 <ble_gattc_ticks_until_resume>
   2c03e:	4603      	mov	r3, r0
   2c040:	e7f3      	b.n	2c02a <ble_gattc_timer+0x4a>
   2c042:	bf00      	nop
   2c044:	10005120 	.word	0x10005120

0002c048 <ble_gattc_exchange_mtu>:
{
   2c048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c04a:	4606      	mov	r6, r0
   2c04c:	460d      	mov	r5, r1
   2c04e:	4617      	mov	r7, r2
    STATS_INC(ble_gattc_stats, mtu);
   2c050:	4c10      	ldr	r4, [pc, #64]	; (2c094 <ble_gattc_exchange_mtu+0x4c>)
   2c052:	68e3      	ldr	r3, [r4, #12]
   2c054:	3301      	adds	r3, #1
   2c056:	60e3      	str	r3, [r4, #12]
    proc = ble_gattc_proc_alloc();
   2c058:	f7ff fc08 	bl	2b86c <ble_gattc_proc_alloc>
    if (proc == NULL) {
   2c05c:	4604      	mov	r4, r0
   2c05e:	b1b0      	cbz	r0, 2c08e <ble_gattc_exchange_mtu+0x46>
    proc->op = BLE_GATT_OP_MTU;
   2c060:	2300      	movs	r3, #0
   2c062:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   2c064:	8106      	strh	r6, [r0, #8]
    proc->mtu.cb = cb;
   2c066:	60c5      	str	r5, [r0, #12]
    proc->mtu.cb_arg = cb_arg;
   2c068:	6107      	str	r7, [r0, #16]
    ble_gattc_log_proc_init("exchange mtu\n");
   2c06a:	480b      	ldr	r0, [pc, #44]	; (2c098 <ble_gattc_exchange_mtu+0x50>)
   2c06c:	f7ff fc0c 	bl	2b888 <ble_gattc_log_proc_init>
    rc = ble_gattc_mtu_tx(proc);
   2c070:	4620      	mov	r0, r4
   2c072:	f7ff fd29 	bl	2bac8 <ble_gattc_mtu_tx>
    if (rc != 0) {
   2c076:	4605      	mov	r5, r0
   2c078:	b118      	cbz	r0, 2c082 <ble_gattc_exchange_mtu+0x3a>
        STATS_INC(ble_gattc_stats, mtu_fail);
   2c07a:	4a06      	ldr	r2, [pc, #24]	; (2c094 <ble_gattc_exchange_mtu+0x4c>)
   2c07c:	6913      	ldr	r3, [r2, #16]
   2c07e:	3301      	adds	r3, #1
   2c080:	6113      	str	r3, [r2, #16]
    ble_gattc_process_status(proc, rc);
   2c082:	4629      	mov	r1, r5
   2c084:	4620      	mov	r0, r4
   2c086:	f7ff fbbf 	bl	2b808 <ble_gattc_process_status>
}
   2c08a:	4628      	mov	r0, r5
   2c08c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = BLE_HS_ENOMEM;
   2c08e:	2506      	movs	r5, #6
   2c090:	e7f3      	b.n	2c07a <ble_gattc_exchange_mtu+0x32>
   2c092:	bf00      	nop
   2c094:	10005120 	.word	0x10005120
   2c098:	00039390 	.word	0x00039390

0002c09c <ble_gattc_disc_all_svcs>:
{
   2c09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c09e:	4606      	mov	r6, r0
   2c0a0:	460d      	mov	r5, r1
   2c0a2:	4617      	mov	r7, r2
    STATS_INC(ble_gattc_stats, disc_all_svcs);
   2c0a4:	4c11      	ldr	r4, [pc, #68]	; (2c0ec <ble_gattc_disc_all_svcs+0x50>)
   2c0a6:	6963      	ldr	r3, [r4, #20]
   2c0a8:	3301      	adds	r3, #1
   2c0aa:	6163      	str	r3, [r4, #20]
    proc = ble_gattc_proc_alloc();
   2c0ac:	f7ff fbde 	bl	2b86c <ble_gattc_proc_alloc>
    if (proc == NULL) {
   2c0b0:	4604      	mov	r4, r0
   2c0b2:	b1c0      	cbz	r0, 2c0e6 <ble_gattc_disc_all_svcs+0x4a>
    proc->op = BLE_GATT_OP_DISC_ALL_SVCS;
   2c0b4:	2301      	movs	r3, #1
   2c0b6:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   2c0b8:	8106      	strh	r6, [r0, #8]
    proc->disc_all_svcs.prev_handle = 0x0000;
   2c0ba:	2300      	movs	r3, #0
   2c0bc:	8183      	strh	r3, [r0, #12]
    proc->disc_all_svcs.cb = cb;
   2c0be:	6105      	str	r5, [r0, #16]
    proc->disc_all_svcs.cb_arg = cb_arg;
   2c0c0:	6147      	str	r7, [r0, #20]
    ble_gattc_log_proc_init("discover all services\n");
   2c0c2:	480b      	ldr	r0, [pc, #44]	; (2c0f0 <ble_gattc_disc_all_svcs+0x54>)
   2c0c4:	f7ff fbe0 	bl	2b888 <ble_gattc_log_proc_init>
    rc = ble_gattc_disc_all_svcs_tx(proc);
   2c0c8:	4620      	mov	r0, r4
   2c0ca:	f7ff fb5b 	bl	2b784 <ble_gattc_disc_all_svcs_tx>
    if (rc != 0) {
   2c0ce:	4605      	mov	r5, r0
   2c0d0:	b118      	cbz	r0, 2c0da <ble_gattc_disc_all_svcs+0x3e>
        STATS_INC(ble_gattc_stats, disc_all_svcs_fail);
   2c0d2:	4a06      	ldr	r2, [pc, #24]	; (2c0ec <ble_gattc_disc_all_svcs+0x50>)
   2c0d4:	6993      	ldr	r3, [r2, #24]
   2c0d6:	3301      	adds	r3, #1
   2c0d8:	6193      	str	r3, [r2, #24]
    ble_gattc_process_status(proc, rc);
   2c0da:	4629      	mov	r1, r5
   2c0dc:	4620      	mov	r0, r4
   2c0de:	f7ff fb93 	bl	2b808 <ble_gattc_process_status>
}
   2c0e2:	4628      	mov	r0, r5
   2c0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = BLE_HS_ENOMEM;
   2c0e6:	2506      	movs	r5, #6
   2c0e8:	e7f3      	b.n	2c0d2 <ble_gattc_disc_all_svcs+0x36>
   2c0ea:	bf00      	nop
   2c0ec:	10005120 	.word	0x10005120
   2c0f0:	000393a0 	.word	0x000393a0

0002c0f4 <ble_gattc_disc_svc_by_uuid>:
{
   2c0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c0f8:	4680      	mov	r8, r0
   2c0fa:	460f      	mov	r7, r1
   2c0fc:	4616      	mov	r6, r2
   2c0fe:	461d      	mov	r5, r3
    STATS_INC(ble_gattc_stats, disc_svc_uuid);
   2c100:	4b14      	ldr	r3, [pc, #80]	; (2c154 <ble_gattc_disc_svc_by_uuid+0x60>)
   2c102:	69dc      	ldr	r4, [r3, #28]
   2c104:	3401      	adds	r4, #1
   2c106:	61dc      	str	r4, [r3, #28]
    proc = ble_gattc_proc_alloc();
   2c108:	f7ff fbb0 	bl	2b86c <ble_gattc_proc_alloc>
    if (proc == NULL) {
   2c10c:	4604      	mov	r4, r0
   2c10e:	b1f8      	cbz	r0, 2c150 <ble_gattc_disc_svc_by_uuid+0x5c>
    proc->op = BLE_GATT_OP_DISC_SVC_UUID;
   2c110:	2302      	movs	r3, #2
   2c112:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   2c114:	f8a0 8008 	strh.w	r8, [r0, #8]
    ble_uuid_to_any(uuid, &proc->disc_svc_uuid.service_uuid);
   2c118:	f100 010c 	add.w	r1, r0, #12
   2c11c:	4638      	mov	r0, r7
   2c11e:	f005 f9e6 	bl	314ee <ble_uuid_to_any>
    proc->disc_svc_uuid.prev_handle = 0x0000;
   2c122:	2300      	movs	r3, #0
   2c124:	8423      	strh	r3, [r4, #32]
    proc->disc_svc_uuid.cb = cb;
   2c126:	6266      	str	r6, [r4, #36]	; 0x24
    proc->disc_svc_uuid.cb_arg = cb_arg;
   2c128:	62a5      	str	r5, [r4, #40]	; 0x28
    ble_gattc_log_disc_svc_uuid(proc);
   2c12a:	4620      	mov	r0, r4
   2c12c:	f7ff fcf8 	bl	2bb20 <ble_gattc_log_disc_svc_uuid>
    rc = ble_gattc_disc_svc_uuid_tx(proc);
   2c130:	4620      	mov	r0, r4
   2c132:	f7ff fadd 	bl	2b6f0 <ble_gattc_disc_svc_uuid_tx>
    if (rc != 0) {
   2c136:	4605      	mov	r5, r0
   2c138:	b118      	cbz	r0, 2c142 <ble_gattc_disc_svc_by_uuid+0x4e>
        STATS_INC(ble_gattc_stats, disc_svc_uuid_fail);
   2c13a:	4a06      	ldr	r2, [pc, #24]	; (2c154 <ble_gattc_disc_svc_by_uuid+0x60>)
   2c13c:	6a13      	ldr	r3, [r2, #32]
   2c13e:	3301      	adds	r3, #1
   2c140:	6213      	str	r3, [r2, #32]
    ble_gattc_process_status(proc, rc);
   2c142:	4629      	mov	r1, r5
   2c144:	4620      	mov	r0, r4
   2c146:	f7ff fb5f 	bl	2b808 <ble_gattc_process_status>
}
   2c14a:	4628      	mov	r0, r5
   2c14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   2c150:	2506      	movs	r5, #6
   2c152:	e7f2      	b.n	2c13a <ble_gattc_disc_svc_by_uuid+0x46>
   2c154:	10005120 	.word	0x10005120

0002c158 <ble_gattc_find_inc_svcs>:
{
   2c158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c15c:	4680      	mov	r8, r0
   2c15e:	460d      	mov	r5, r1
   2c160:	4617      	mov	r7, r2
   2c162:	461e      	mov	r6, r3
    STATS_INC(ble_gattc_stats, find_inc_svcs);
   2c164:	4b12      	ldr	r3, [pc, #72]	; (2c1b0 <ble_gattc_find_inc_svcs+0x58>)
   2c166:	6a59      	ldr	r1, [r3, #36]	; 0x24
   2c168:	3101      	adds	r1, #1
   2c16a:	6259      	str	r1, [r3, #36]	; 0x24
    proc = ble_gattc_proc_alloc();
   2c16c:	f7ff fb7e 	bl	2b86c <ble_gattc_proc_alloc>
    if (proc == NULL) {
   2c170:	4604      	mov	r4, r0
   2c172:	b1d8      	cbz	r0, 2c1ac <ble_gattc_find_inc_svcs+0x54>
    proc->op = BLE_GATT_OP_FIND_INC_SVCS;
   2c174:	2303      	movs	r3, #3
   2c176:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   2c178:	f8a0 8008 	strh.w	r8, [r0, #8]
    proc->find_inc_svcs.prev_handle = start_handle - 1;
   2c17c:	3d01      	subs	r5, #1
   2c17e:	8185      	strh	r5, [r0, #12]
    proc->find_inc_svcs.end_handle = end_handle;
   2c180:	81c7      	strh	r7, [r0, #14]
    proc->find_inc_svcs.cb = cb;
   2c182:	6146      	str	r6, [r0, #20]
    proc->find_inc_svcs.cb_arg = cb_arg;
   2c184:	9b06      	ldr	r3, [sp, #24]
   2c186:	6183      	str	r3, [r0, #24]
    ble_gattc_log_find_inc_svcs(proc);
   2c188:	f7ff fb88 	bl	2b89c <ble_gattc_log_find_inc_svcs>
    rc = ble_gattc_find_inc_svcs_tx(proc);
   2c18c:	4620      	mov	r0, r4
   2c18e:	f7ff fa61 	bl	2b654 <ble_gattc_find_inc_svcs_tx>
    if (rc != 0) {
   2c192:	4605      	mov	r5, r0
   2c194:	b118      	cbz	r0, 2c19e <ble_gattc_find_inc_svcs+0x46>
        STATS_INC(ble_gattc_stats, find_inc_svcs_fail);
   2c196:	4a06      	ldr	r2, [pc, #24]	; (2c1b0 <ble_gattc_find_inc_svcs+0x58>)
   2c198:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2c19a:	3301      	adds	r3, #1
   2c19c:	6293      	str	r3, [r2, #40]	; 0x28
    ble_gattc_process_status(proc, rc);
   2c19e:	4629      	mov	r1, r5
   2c1a0:	4620      	mov	r0, r4
   2c1a2:	f7ff fb31 	bl	2b808 <ble_gattc_process_status>
}
   2c1a6:	4628      	mov	r0, r5
   2c1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   2c1ac:	2506      	movs	r5, #6
   2c1ae:	e7f2      	b.n	2c196 <ble_gattc_find_inc_svcs+0x3e>
   2c1b0:	10005120 	.word	0x10005120

0002c1b4 <ble_gattc_disc_all_chrs>:
{
   2c1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c1b8:	4680      	mov	r8, r0
   2c1ba:	460d      	mov	r5, r1
   2c1bc:	4617      	mov	r7, r2
   2c1be:	461e      	mov	r6, r3
    STATS_INC(ble_gattc_stats, disc_all_chrs);
   2c1c0:	4b12      	ldr	r3, [pc, #72]	; (2c20c <ble_gattc_disc_all_chrs+0x58>)
   2c1c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   2c1c4:	3101      	adds	r1, #1
   2c1c6:	62d9      	str	r1, [r3, #44]	; 0x2c
    proc = ble_gattc_proc_alloc();
   2c1c8:	f7ff fb50 	bl	2b86c <ble_gattc_proc_alloc>
    if (proc == NULL) {
   2c1cc:	4604      	mov	r4, r0
   2c1ce:	b1d8      	cbz	r0, 2c208 <ble_gattc_disc_all_chrs+0x54>
    proc->op = BLE_GATT_OP_DISC_ALL_CHRS;
   2c1d0:	2304      	movs	r3, #4
   2c1d2:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   2c1d4:	f8a0 8008 	strh.w	r8, [r0, #8]
    proc->disc_all_chrs.prev_handle = start_handle - 1;
   2c1d8:	3d01      	subs	r5, #1
   2c1da:	8185      	strh	r5, [r0, #12]
    proc->disc_all_chrs.end_handle = end_handle;
   2c1dc:	81c7      	strh	r7, [r0, #14]
    proc->disc_all_chrs.cb = cb;
   2c1de:	6106      	str	r6, [r0, #16]
    proc->disc_all_chrs.cb_arg = cb_arg;
   2c1e0:	9b06      	ldr	r3, [sp, #24]
   2c1e2:	6143      	str	r3, [r0, #20]
    ble_gattc_log_disc_all_chrs(proc);
   2c1e4:	f7ff fb70 	bl	2b8c8 <ble_gattc_log_disc_all_chrs>
    rc = ble_gattc_disc_all_chrs_tx(proc);
   2c1e8:	4620      	mov	r0, r4
   2c1ea:	f7ff f9f5 	bl	2b5d8 <ble_gattc_disc_all_chrs_tx>
    if (rc != 0) {
   2c1ee:	4605      	mov	r5, r0
   2c1f0:	b118      	cbz	r0, 2c1fa <ble_gattc_disc_all_chrs+0x46>
        STATS_INC(ble_gattc_stats, disc_all_chrs_fail);
   2c1f2:	4a06      	ldr	r2, [pc, #24]	; (2c20c <ble_gattc_disc_all_chrs+0x58>)
   2c1f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
   2c1f6:	3301      	adds	r3, #1
   2c1f8:	6313      	str	r3, [r2, #48]	; 0x30
    ble_gattc_process_status(proc, rc);
   2c1fa:	4629      	mov	r1, r5
   2c1fc:	4620      	mov	r0, r4
   2c1fe:	f7ff fb03 	bl	2b808 <ble_gattc_process_status>
}
   2c202:	4628      	mov	r0, r5
   2c204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   2c208:	2506      	movs	r5, #6
   2c20a:	e7f2      	b.n	2c1f2 <ble_gattc_disc_all_chrs+0x3e>
   2c20c:	10005120 	.word	0x10005120

0002c210 <ble_gattc_disc_chrs_by_uuid>:
{
   2c210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c214:	4680      	mov	r8, r0
   2c216:	460d      	mov	r5, r1
   2c218:	4617      	mov	r7, r2
   2c21a:	461e      	mov	r6, r3
    STATS_INC(ble_gattc_stats, disc_chrs_uuid);
   2c21c:	4b16      	ldr	r3, [pc, #88]	; (2c278 <ble_gattc_disc_chrs_by_uuid+0x68>)
   2c21e:	6b59      	ldr	r1, [r3, #52]	; 0x34
   2c220:	3101      	adds	r1, #1
   2c222:	6359      	str	r1, [r3, #52]	; 0x34
    proc = ble_gattc_proc_alloc();
   2c224:	f7ff fb22 	bl	2b86c <ble_gattc_proc_alloc>
    if (proc == NULL) {
   2c228:	4604      	mov	r4, r0
   2c22a:	b310      	cbz	r0, 2c272 <ble_gattc_disc_chrs_by_uuid+0x62>
    proc->op = BLE_GATT_OP_DISC_CHR_UUID;
   2c22c:	2305      	movs	r3, #5
   2c22e:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   2c230:	f8a0 8008 	strh.w	r8, [r0, #8]
    ble_uuid_to_any(uuid, &proc->disc_chr_uuid.chr_uuid);
   2c234:	f100 010c 	add.w	r1, r0, #12
   2c238:	4630      	mov	r0, r6
   2c23a:	f005 f958 	bl	314ee <ble_uuid_to_any>
    proc->disc_chr_uuid.prev_handle = start_handle - 1;
   2c23e:	3d01      	subs	r5, #1
   2c240:	8425      	strh	r5, [r4, #32]
    proc->disc_chr_uuid.end_handle = end_handle;
   2c242:	8467      	strh	r7, [r4, #34]	; 0x22
    proc->disc_chr_uuid.cb = cb;
   2c244:	9b06      	ldr	r3, [sp, #24]
   2c246:	6263      	str	r3, [r4, #36]	; 0x24
    proc->disc_chr_uuid.cb_arg = cb_arg;
   2c248:	9b07      	ldr	r3, [sp, #28]
   2c24a:	62a3      	str	r3, [r4, #40]	; 0x28
    ble_gattc_log_disc_chr_uuid(proc);
   2c24c:	4620      	mov	r0, r4
   2c24e:	f7ff fc7b 	bl	2bb48 <ble_gattc_log_disc_chr_uuid>
    rc = ble_gattc_disc_chr_uuid_tx(proc);
   2c252:	4620      	mov	r0, r4
   2c254:	f7ff f982 	bl	2b55c <ble_gattc_disc_chr_uuid_tx>
    if (rc != 0) {
   2c258:	4605      	mov	r5, r0
   2c25a:	b118      	cbz	r0, 2c264 <ble_gattc_disc_chrs_by_uuid+0x54>
        STATS_INC(ble_gattc_stats, disc_chrs_uuid_fail);
   2c25c:	4a06      	ldr	r2, [pc, #24]	; (2c278 <ble_gattc_disc_chrs_by_uuid+0x68>)
   2c25e:	6b93      	ldr	r3, [r2, #56]	; 0x38
   2c260:	3301      	adds	r3, #1
   2c262:	6393      	str	r3, [r2, #56]	; 0x38
    ble_gattc_process_status(proc, rc);
   2c264:	4629      	mov	r1, r5
   2c266:	4620      	mov	r0, r4
   2c268:	f7ff face 	bl	2b808 <ble_gattc_process_status>
}
   2c26c:	4628      	mov	r0, r5
   2c26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   2c272:	2506      	movs	r5, #6
   2c274:	e7f2      	b.n	2c25c <ble_gattc_disc_chrs_by_uuid+0x4c>
   2c276:	bf00      	nop
   2c278:	10005120 	.word	0x10005120

0002c27c <ble_gattc_disc_all_dscs>:
{
   2c27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c280:	4680      	mov	r8, r0
   2c282:	460d      	mov	r5, r1
   2c284:	4617      	mov	r7, r2
   2c286:	461e      	mov	r6, r3
    STATS_INC(ble_gattc_stats, disc_all_dscs);
   2c288:	4b12      	ldr	r3, [pc, #72]	; (2c2d4 <ble_gattc_disc_all_dscs+0x58>)
   2c28a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   2c28c:	3101      	adds	r1, #1
   2c28e:	63d9      	str	r1, [r3, #60]	; 0x3c
    proc = ble_gattc_proc_alloc();
   2c290:	f7ff faec 	bl	2b86c <ble_gattc_proc_alloc>
    if (proc == NULL) {
   2c294:	4604      	mov	r4, r0
   2c296:	b1d8      	cbz	r0, 2c2d0 <ble_gattc_disc_all_dscs+0x54>
    proc->op = BLE_GATT_OP_DISC_ALL_DSCS;
   2c298:	2306      	movs	r3, #6
   2c29a:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   2c29c:	f8a0 8008 	strh.w	r8, [r0, #8]
    proc->disc_all_dscs.chr_val_handle = start_handle;
   2c2a0:	8185      	strh	r5, [r0, #12]
    proc->disc_all_dscs.prev_handle = start_handle;
   2c2a2:	81c5      	strh	r5, [r0, #14]
    proc->disc_all_dscs.end_handle = end_handle;
   2c2a4:	8207      	strh	r7, [r0, #16]
    proc->disc_all_dscs.cb = cb;
   2c2a6:	6146      	str	r6, [r0, #20]
    proc->disc_all_dscs.cb_arg = cb_arg;
   2c2a8:	9b06      	ldr	r3, [sp, #24]
   2c2aa:	6183      	str	r3, [r0, #24]
    ble_gattc_log_disc_all_dscs(proc);
   2c2ac:	f7ff fb22 	bl	2b8f4 <ble_gattc_log_disc_all_dscs>
    rc = ble_gattc_disc_all_dscs_tx(proc);
   2c2b0:	4620      	mov	r0, r4
   2c2b2:	f7ff f91e 	bl	2b4f2 <ble_gattc_disc_all_dscs_tx>
    if (rc != 0) {
   2c2b6:	4605      	mov	r5, r0
   2c2b8:	b118      	cbz	r0, 2c2c2 <ble_gattc_disc_all_dscs+0x46>
        STATS_INC(ble_gattc_stats, disc_all_dscs_fail);
   2c2ba:	4a06      	ldr	r2, [pc, #24]	; (2c2d4 <ble_gattc_disc_all_dscs+0x58>)
   2c2bc:	6c13      	ldr	r3, [r2, #64]	; 0x40
   2c2be:	3301      	adds	r3, #1
   2c2c0:	6413      	str	r3, [r2, #64]	; 0x40
    ble_gattc_process_status(proc, rc);
   2c2c2:	4629      	mov	r1, r5
   2c2c4:	4620      	mov	r0, r4
   2c2c6:	f7ff fa9f 	bl	2b808 <ble_gattc_process_status>
}
   2c2ca:	4628      	mov	r0, r5
   2c2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   2c2d0:	2506      	movs	r5, #6
   2c2d2:	e7f2      	b.n	2c2ba <ble_gattc_disc_all_dscs+0x3e>
   2c2d4:	10005120 	.word	0x10005120

0002c2d8 <ble_gattc_read>:
{
   2c2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c2dc:	4680      	mov	r8, r0
   2c2de:	460d      	mov	r5, r1
   2c2e0:	4617      	mov	r7, r2
   2c2e2:	461e      	mov	r6, r3
    STATS_INC(ble_gattc_stats, read);
   2c2e4:	4b11      	ldr	r3, [pc, #68]	; (2c32c <ble_gattc_read+0x54>)
   2c2e6:	6c59      	ldr	r1, [r3, #68]	; 0x44
   2c2e8:	3101      	adds	r1, #1
   2c2ea:	6459      	str	r1, [r3, #68]	; 0x44
    proc = ble_gattc_proc_alloc();
   2c2ec:	f7ff fabe 	bl	2b86c <ble_gattc_proc_alloc>
    if (proc == NULL) {
   2c2f0:	4604      	mov	r4, r0
   2c2f2:	b1c8      	cbz	r0, 2c328 <ble_gattc_read+0x50>
    proc->op = BLE_GATT_OP_READ;
   2c2f4:	2307      	movs	r3, #7
   2c2f6:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   2c2f8:	f8a0 8008 	strh.w	r8, [r0, #8]
    proc->read.handle = attr_handle;
   2c2fc:	8185      	strh	r5, [r0, #12]
    proc->read.cb = cb;
   2c2fe:	6107      	str	r7, [r0, #16]
    proc->read.cb_arg = cb_arg;
   2c300:	6146      	str	r6, [r0, #20]
    ble_gattc_log_read(attr_handle);
   2c302:	4628      	mov	r0, r5
   2c304:	f7ff fb0a 	bl	2b91c <ble_gattc_log_read>
    rc = ble_gattc_read_tx(proc);
   2c308:	4620      	mov	r0, r4
   2c30a:	f7ff f897 	bl	2b43c <ble_gattc_read_tx>
    if (rc != 0) {
   2c30e:	4605      	mov	r5, r0
   2c310:	b118      	cbz	r0, 2c31a <ble_gattc_read+0x42>
        STATS_INC(ble_gattc_stats, read_fail);
   2c312:	4a06      	ldr	r2, [pc, #24]	; (2c32c <ble_gattc_read+0x54>)
   2c314:	6c93      	ldr	r3, [r2, #72]	; 0x48
   2c316:	3301      	adds	r3, #1
   2c318:	6493      	str	r3, [r2, #72]	; 0x48
    ble_gattc_process_status(proc, rc);
   2c31a:	4629      	mov	r1, r5
   2c31c:	4620      	mov	r0, r4
   2c31e:	f7ff fa73 	bl	2b808 <ble_gattc_process_status>
}
   2c322:	4628      	mov	r0, r5
   2c324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   2c328:	2506      	movs	r5, #6
   2c32a:	e7f2      	b.n	2c312 <ble_gattc_read+0x3a>
   2c32c:	10005120 	.word	0x10005120

0002c330 <ble_gattc_read_by_uuid>:
{
   2c330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c334:	4680      	mov	r8, r0
   2c336:	460d      	mov	r5, r1
   2c338:	4616      	mov	r6, r2
   2c33a:	461f      	mov	r7, r3
    STATS_INC(ble_gattc_stats, read_uuid);
   2c33c:	4a16      	ldr	r2, [pc, #88]	; (2c398 <ble_gattc_read_by_uuid+0x68>)
   2c33e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   2c340:	3301      	adds	r3, #1
   2c342:	64d3      	str	r3, [r2, #76]	; 0x4c
    proc = ble_gattc_proc_alloc();
   2c344:	f7ff fa92 	bl	2b86c <ble_gattc_proc_alloc>
    if (proc == NULL) {
   2c348:	4604      	mov	r4, r0
   2c34a:	b318      	cbz	r0, 2c394 <ble_gattc_read_by_uuid+0x64>
    proc->op = BLE_GATT_OP_READ_UUID;
   2c34c:	2308      	movs	r3, #8
   2c34e:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   2c350:	f8a0 8008 	strh.w	r8, [r0, #8]
    ble_uuid_to_any(uuid, &proc->read_uuid.chr_uuid);
   2c354:	f100 010c 	add.w	r1, r0, #12
   2c358:	4638      	mov	r0, r7
   2c35a:	f005 f8c8 	bl	314ee <ble_uuid_to_any>
    proc->read_uuid.start_handle = start_handle;
   2c35e:	8425      	strh	r5, [r4, #32]
    proc->read_uuid.end_handle = end_handle;
   2c360:	8466      	strh	r6, [r4, #34]	; 0x22
    proc->read_uuid.cb = cb;
   2c362:	9b06      	ldr	r3, [sp, #24]
   2c364:	6263      	str	r3, [r4, #36]	; 0x24
    proc->read_uuid.cb_arg = cb_arg;
   2c366:	9b07      	ldr	r3, [sp, #28]
   2c368:	62a3      	str	r3, [r4, #40]	; 0x28
    ble_gattc_log_read_uuid(start_handle, end_handle, uuid);
   2c36a:	463a      	mov	r2, r7
   2c36c:	4631      	mov	r1, r6
   2c36e:	4628      	mov	r0, r5
   2c370:	f7ff fc0a 	bl	2bb88 <ble_gattc_log_read_uuid>
    rc = ble_gattc_read_uuid_tx(proc);
   2c374:	4620      	mov	r0, r4
   2c376:	f7ff f9b2 	bl	2b6de <ble_gattc_read_uuid_tx>
    if (rc != 0) {
   2c37a:	4605      	mov	r5, r0
   2c37c:	b118      	cbz	r0, 2c386 <ble_gattc_read_by_uuid+0x56>
        STATS_INC(ble_gattc_stats, read_uuid_fail);
   2c37e:	4a06      	ldr	r2, [pc, #24]	; (2c398 <ble_gattc_read_by_uuid+0x68>)
   2c380:	6d13      	ldr	r3, [r2, #80]	; 0x50
   2c382:	3301      	adds	r3, #1
   2c384:	6513      	str	r3, [r2, #80]	; 0x50
    ble_gattc_process_status(proc, rc);
   2c386:	4629      	mov	r1, r5
   2c388:	4620      	mov	r0, r4
   2c38a:	f7ff fa3d 	bl	2b808 <ble_gattc_process_status>
}
   2c38e:	4628      	mov	r0, r5
   2c390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   2c394:	2506      	movs	r5, #6
   2c396:	e7f2      	b.n	2c37e <ble_gattc_read_by_uuid+0x4e>
   2c398:	10005120 	.word	0x10005120

0002c39c <ble_gattc_read_long>:
{
   2c39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c3a0:	4680      	mov	r8, r0
   2c3a2:	460f      	mov	r7, r1
   2c3a4:	4616      	mov	r6, r2
   2c3a6:	461d      	mov	r5, r3
    STATS_INC(ble_gattc_stats, read_long);
   2c3a8:	4b12      	ldr	r3, [pc, #72]	; (2c3f4 <ble_gattc_read_long+0x58>)
   2c3aa:	6d5c      	ldr	r4, [r3, #84]	; 0x54
   2c3ac:	3401      	adds	r4, #1
   2c3ae:	655c      	str	r4, [r3, #84]	; 0x54
    proc = ble_gattc_proc_alloc();
   2c3b0:	f7ff fa5c 	bl	2b86c <ble_gattc_proc_alloc>
    if (proc == NULL) {
   2c3b4:	4604      	mov	r4, r0
   2c3b6:	b1d0      	cbz	r0, 2c3ee <ble_gattc_read_long+0x52>
    proc->op = BLE_GATT_OP_READ_LONG;
   2c3b8:	2309      	movs	r3, #9
   2c3ba:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   2c3bc:	f8a0 8008 	strh.w	r8, [r0, #8]
    proc->read_long.handle = handle;
   2c3c0:	8187      	strh	r7, [r0, #12]
    proc->read_long.offset = offset;
   2c3c2:	81c6      	strh	r6, [r0, #14]
    proc->read_long.cb = cb;
   2c3c4:	6105      	str	r5, [r0, #16]
    proc->read_long.cb_arg = cb_arg;
   2c3c6:	9b06      	ldr	r3, [sp, #24]
   2c3c8:	6143      	str	r3, [r0, #20]
    ble_gattc_log_read_long(proc);
   2c3ca:	f7ff fab7 	bl	2b93c <ble_gattc_log_read_long>
    rc = ble_gattc_read_long_tx(proc);
   2c3ce:	4620      	mov	r0, r4
   2c3d0:	f7ff f83a 	bl	2b448 <ble_gattc_read_long_tx>
    if (rc != 0) {
   2c3d4:	4605      	mov	r5, r0
   2c3d6:	b118      	cbz	r0, 2c3e0 <ble_gattc_read_long+0x44>
        STATS_INC(ble_gattc_stats, read_long_fail);
   2c3d8:	4a06      	ldr	r2, [pc, #24]	; (2c3f4 <ble_gattc_read_long+0x58>)
   2c3da:	6d93      	ldr	r3, [r2, #88]	; 0x58
   2c3dc:	3301      	adds	r3, #1
   2c3de:	6593      	str	r3, [r2, #88]	; 0x58
    ble_gattc_process_status(proc, rc);
   2c3e0:	4629      	mov	r1, r5
   2c3e2:	4620      	mov	r0, r4
   2c3e4:	f7ff fa10 	bl	2b808 <ble_gattc_process_status>
}
   2c3e8:	4628      	mov	r0, r5
   2c3ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   2c3ee:	2506      	movs	r5, #6
   2c3f0:	e7f2      	b.n	2c3d8 <ble_gattc_read_long+0x3c>
   2c3f2:	bf00      	nop
   2c3f4:	10005120 	.word	0x10005120

0002c3f8 <ble_gattc_read_mult>:
{
   2c3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c3fc:	460e      	mov	r6, r1
   2c3fe:	4614      	mov	r4, r2
    STATS_INC(ble_gattc_stats, read_mult);
   2c400:	4919      	ldr	r1, [pc, #100]	; (2c468 <ble_gattc_read_mult+0x70>)
   2c402:	6dca      	ldr	r2, [r1, #92]	; 0x5c
   2c404:	3201      	adds	r2, #1
   2c406:	65ca      	str	r2, [r1, #92]	; 0x5c
    if (num_handles > MYNEWT_VAL(BLE_GATT_READ_MAX_ATTRS)) {
   2c408:	2c08      	cmp	r4, #8
   2c40a:	d90c      	bls.n	2c426 <ble_gattc_read_mult+0x2e>
        rc = BLE_HS_EINVAL;
   2c40c:	2403      	movs	r4, #3
    proc = NULL;
   2c40e:	2500      	movs	r5, #0
        STATS_INC(ble_gattc_stats, read_mult_fail);
   2c410:	4a15      	ldr	r2, [pc, #84]	; (2c468 <ble_gattc_read_mult+0x70>)
   2c412:	6e13      	ldr	r3, [r2, #96]	; 0x60
   2c414:	3301      	adds	r3, #1
   2c416:	6613      	str	r3, [r2, #96]	; 0x60
    ble_gattc_process_status(proc, rc);
   2c418:	4621      	mov	r1, r4
   2c41a:	4628      	mov	r0, r5
   2c41c:	f7ff f9f4 	bl	2b808 <ble_gattc_process_status>
}
   2c420:	4620      	mov	r0, r4
   2c422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c426:	4607      	mov	r7, r0
   2c428:	4698      	mov	r8, r3
    proc = ble_gattc_proc_alloc();
   2c42a:	f7ff fa1f 	bl	2b86c <ble_gattc_proc_alloc>
    if (proc == NULL) {
   2c42e:	4605      	mov	r5, r0
   2c430:	b1b8      	cbz	r0, 2c462 <ble_gattc_read_mult+0x6a>
    proc->op = BLE_GATT_OP_READ_MULT;
   2c432:	230a      	movs	r3, #10
   2c434:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   2c436:	8107      	strh	r7, [r0, #8]
    memcpy(proc->read_mult.handles, handles, num_handles * sizeof *handles);
   2c438:	0062      	lsls	r2, r4, #1
   2c43a:	4631      	mov	r1, r6
   2c43c:	300c      	adds	r0, #12
   2c43e:	f7ee fc07 	bl	1ac50 <memcpy>
    proc->read_mult.num_handles = num_handles;
   2c442:	772c      	strb	r4, [r5, #28]
    proc->read_mult.cb = cb;
   2c444:	f8c5 8020 	str.w	r8, [r5, #32]
    proc->read_mult.cb_arg = cb_arg;
   2c448:	9b06      	ldr	r3, [sp, #24]
   2c44a:	626b      	str	r3, [r5, #36]	; 0x24
    ble_gattc_log_read_mult(handles, num_handles);
   2c44c:	4621      	mov	r1, r4
   2c44e:	4630      	mov	r0, r6
   2c450:	f7ff fa84 	bl	2b95c <ble_gattc_log_read_mult>
    rc = ble_gattc_read_mult_tx(proc);
   2c454:	4628      	mov	r0, r5
   2c456:	f7ff fbb7 	bl	2bbc8 <ble_gattc_read_mult_tx>
    if (rc != 0) {
   2c45a:	4604      	mov	r4, r0
   2c45c:	2800      	cmp	r0, #0
   2c45e:	d0db      	beq.n	2c418 <ble_gattc_read_mult+0x20>
   2c460:	e7d6      	b.n	2c410 <ble_gattc_read_mult+0x18>
        rc = BLE_HS_ENOMEM;
   2c462:	2406      	movs	r4, #6
   2c464:	e7d4      	b.n	2c410 <ble_gattc_read_mult+0x18>
   2c466:	bf00      	nop
   2c468:	10005120 	.word	0x10005120

0002c46c <ble_gattc_write_no_rsp>:
{
   2c46c:	b570      	push	{r4, r5, r6, lr}
   2c46e:	4606      	mov	r6, r0
   2c470:	460c      	mov	r4, r1
   2c472:	4615      	mov	r5, r2
    STATS_INC(ble_gattc_stats, write_no_rsp);
   2c474:	4a09      	ldr	r2, [pc, #36]	; (2c49c <ble_gattc_write_no_rsp+0x30>)
   2c476:	6e53      	ldr	r3, [r2, #100]	; 0x64
   2c478:	3301      	adds	r3, #1
   2c47a:	6653      	str	r3, [r2, #100]	; 0x64
    ble_gattc_log_write(attr_handle, OS_MBUF_PKTLEN(txom), 0);
   2c47c:	2200      	movs	r2, #0
   2c47e:	8a29      	ldrh	r1, [r5, #16]
   2c480:	4620      	mov	r0, r4
   2c482:	f7ff fa9d 	bl	2b9c0 <ble_gattc_log_write>
    rc = ble_att_clt_tx_write_cmd(conn_handle, attr_handle, txom);
   2c486:	462a      	mov	r2, r5
   2c488:	4621      	mov	r1, r4
   2c48a:	4630      	mov	r0, r6
   2c48c:	f7fa fd1f 	bl	26ece <ble_att_clt_tx_write_cmd>
    if (rc != 0) {
   2c490:	b118      	cbz	r0, 2c49a <ble_gattc_write_no_rsp+0x2e>
        STATS_INC(ble_gattc_stats, write);
   2c492:	4a02      	ldr	r2, [pc, #8]	; (2c49c <ble_gattc_write_no_rsp+0x30>)
   2c494:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   2c496:	3301      	adds	r3, #1
   2c498:	66d3      	str	r3, [r2, #108]	; 0x6c
}
   2c49a:	bd70      	pop	{r4, r5, r6, pc}
   2c49c:	10005120 	.word	0x10005120

0002c4a0 <ble_gattc_write>:
{
   2c4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c4a4:	4607      	mov	r7, r0
   2c4a6:	460e      	mov	r6, r1
   2c4a8:	4614      	mov	r4, r2
   2c4aa:	4698      	mov	r8, r3
    STATS_INC(ble_gattc_stats, write);
   2c4ac:	4b17      	ldr	r3, [pc, #92]	; (2c50c <ble_gattc_write+0x6c>)
   2c4ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   2c4b0:	3201      	adds	r2, #1
   2c4b2:	66da      	str	r2, [r3, #108]	; 0x6c
    proc = ble_gattc_proc_alloc();
   2c4b4:	f7ff f9da 	bl	2b86c <ble_gattc_proc_alloc>
    if (proc == NULL) {
   2c4b8:	4605      	mov	r5, r0
   2c4ba:	b310      	cbz	r0, 2c502 <ble_gattc_write+0x62>
    proc->op = BLE_GATT_OP_WRITE;
   2c4bc:	230b      	movs	r3, #11
   2c4be:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   2c4c0:	8107      	strh	r7, [r0, #8]
    proc->write.att_handle = attr_handle;
   2c4c2:	8186      	strh	r6, [r0, #12]
    proc->write.cb = cb;
   2c4c4:	f8c0 8010 	str.w	r8, [r0, #16]
    proc->write.cb_arg = cb_arg;
   2c4c8:	9b06      	ldr	r3, [sp, #24]
   2c4ca:	6143      	str	r3, [r0, #20]
    ble_gattc_log_write(attr_handle, OS_MBUF_PKTLEN(txom), 1);
   2c4cc:	2201      	movs	r2, #1
   2c4ce:	8a21      	ldrh	r1, [r4, #16]
   2c4d0:	4630      	mov	r0, r6
   2c4d2:	f7ff fa75 	bl	2b9c0 <ble_gattc_log_write>
    rc = ble_att_clt_tx_write_req(conn_handle, attr_handle, txom);
   2c4d6:	4622      	mov	r2, r4
   2c4d8:	4631      	mov	r1, r6
   2c4da:	4638      	mov	r0, r7
   2c4dc:	f7fa fcdc 	bl	26e98 <ble_att_clt_tx_write_req>
    if (rc != 0) {
   2c4e0:	4606      	mov	r6, r0
   2c4e2:	b180      	cbz	r0, 2c506 <ble_gattc_write+0x66>
   2c4e4:	2400      	movs	r4, #0
        STATS_INC(ble_gattc_stats, write_fail);
   2c4e6:	4a09      	ldr	r2, [pc, #36]	; (2c50c <ble_gattc_write+0x6c>)
   2c4e8:	6f13      	ldr	r3, [r2, #112]	; 0x70
   2c4ea:	3301      	adds	r3, #1
   2c4ec:	6713      	str	r3, [r2, #112]	; 0x70
    os_mbuf_free_chain(txom);
   2c4ee:	4620      	mov	r0, r4
   2c4f0:	f7ed f86d 	bl	195ce <os_mbuf_free_chain>
    ble_gattc_process_status(proc, rc);
   2c4f4:	4631      	mov	r1, r6
   2c4f6:	4628      	mov	r0, r5
   2c4f8:	f7ff f986 	bl	2b808 <ble_gattc_process_status>
}
   2c4fc:	4630      	mov	r0, r6
   2c4fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   2c502:	2606      	movs	r6, #6
   2c504:	e7ef      	b.n	2c4e6 <ble_gattc_write+0x46>
   2c506:	2400      	movs	r4, #0
   2c508:	e7f1      	b.n	2c4ee <ble_gattc_write+0x4e>
   2c50a:	bf00      	nop
   2c50c:	10005120 	.word	0x10005120

0002c510 <ble_gattc_write_long>:
{
   2c510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c514:	4680      	mov	r8, r0
   2c516:	460f      	mov	r7, r1
   2c518:	4616      	mov	r6, r2
   2c51a:	461d      	mov	r5, r3
    STATS_INC(ble_gattc_stats, write_long);
   2c51c:	4a16      	ldr	r2, [pc, #88]	; (2c578 <ble_gattc_write_long+0x68>)
   2c51e:	6f53      	ldr	r3, [r2, #116]	; 0x74
   2c520:	3301      	adds	r3, #1
   2c522:	6753      	str	r3, [r2, #116]	; 0x74
    proc = ble_gattc_proc_alloc();
   2c524:	f7ff f9a2 	bl	2b86c <ble_gattc_proc_alloc>
    if (proc == NULL) {
   2c528:	4604      	mov	r4, r0
   2c52a:	b300      	cbz	r0, 2c56e <ble_gattc_write_long+0x5e>
    proc->op = BLE_GATT_OP_WRITE_LONG;
   2c52c:	230c      	movs	r3, #12
   2c52e:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   2c530:	f8a0 8008 	strh.w	r8, [r0, #8]
    proc->write_long.attr.handle = attr_handle;
   2c534:	8187      	strh	r7, [r0, #12]
    proc->write_long.attr.offset = offset;
   2c536:	81c6      	strh	r6, [r0, #14]
    proc->write_long.attr.om = txom;
   2c538:	6105      	str	r5, [r0, #16]
    proc->write_long.cb = cb;
   2c53a:	9b06      	ldr	r3, [sp, #24]
   2c53c:	6183      	str	r3, [r0, #24]
    proc->write_long.cb_arg = cb_arg;
   2c53e:	9b07      	ldr	r3, [sp, #28]
   2c540:	61c3      	str	r3, [r0, #28]
    ble_gattc_log_write_long(proc);
   2c542:	f7ff fa57 	bl	2b9f4 <ble_gattc_log_write_long>
    rc = ble_gattc_write_long_tx(proc);
   2c546:	4620      	mov	r0, r4
   2c548:	f7fe ff2f 	bl	2b3aa <ble_gattc_write_long_tx>
    if (rc != 0) {
   2c54c:	4606      	mov	r6, r0
   2c54e:	b180      	cbz	r0, 2c572 <ble_gattc_write_long+0x62>
   2c550:	2500      	movs	r5, #0
        STATS_INC(ble_gattc_stats, write_long_fail);
   2c552:	4a09      	ldr	r2, [pc, #36]	; (2c578 <ble_gattc_write_long+0x68>)
   2c554:	6f93      	ldr	r3, [r2, #120]	; 0x78
   2c556:	3301      	adds	r3, #1
   2c558:	6793      	str	r3, [r2, #120]	; 0x78
    os_mbuf_free_chain(txom);
   2c55a:	4628      	mov	r0, r5
   2c55c:	f7ed f837 	bl	195ce <os_mbuf_free_chain>
    ble_gattc_process_status(proc, rc);
   2c560:	4631      	mov	r1, r6
   2c562:	4620      	mov	r0, r4
   2c564:	f7ff f950 	bl	2b808 <ble_gattc_process_status>
}
   2c568:	4630      	mov	r0, r6
   2c56a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   2c56e:	2606      	movs	r6, #6
   2c570:	e7ef      	b.n	2c552 <ble_gattc_write_long+0x42>
   2c572:	2500      	movs	r5, #0
   2c574:	e7f1      	b.n	2c55a <ble_gattc_write_long+0x4a>
   2c576:	bf00      	nop
   2c578:	10005120 	.word	0x10005120

0002c57c <ble_gattc_write_reliable>:
{
   2c57c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c580:	460f      	mov	r7, r1
   2c582:	4616      	mov	r6, r2
   2c584:	461c      	mov	r4, r3
    STATS_INC(ble_gattc_stats, write_reliable);
   2c586:	4b28      	ldr	r3, [pc, #160]	; (2c628 <ble_gattc_write_reliable+0xac>)
   2c588:	6fda      	ldr	r2, [r3, #124]	; 0x7c
   2c58a:	3201      	adds	r2, #1
   2c58c:	67da      	str	r2, [r3, #124]	; 0x7c
    if (num_attrs > MYNEWT_VAL(BLE_GATT_WRITE_MAX_ATTRS)) {
   2c58e:	2e04      	cmp	r6, #4
   2c590:	dd15      	ble.n	2c5be <ble_gattc_write_reliable+0x42>
        rc = BLE_HS_EINVAL;
   2c592:	f04f 0903 	mov.w	r9, #3
    proc = NULL;
   2c596:	f04f 0800 	mov.w	r8, #0
        STATS_INC(ble_gattc_stats, write_reliable_fail);
   2c59a:	4a23      	ldr	r2, [pc, #140]	; (2c628 <ble_gattc_write_reliable+0xac>)
   2c59c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   2c5a0:	3301      	adds	r3, #1
   2c5a2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    for (i = 0; i < num_attrs; i++) {
   2c5a6:	2400      	movs	r4, #0
   2c5a8:	42b4      	cmp	r4, r6
   2c5aa:	da35      	bge.n	2c618 <ble_gattc_write_reliable+0x9c>
        os_mbuf_free_chain(attrs[i].om);
   2c5ac:	eb07 05c4 	add.w	r5, r7, r4, lsl #3
   2c5b0:	6868      	ldr	r0, [r5, #4]
   2c5b2:	f7ed f80c 	bl	195ce <os_mbuf_free_chain>
        attrs[i].om = NULL;
   2c5b6:	2300      	movs	r3, #0
   2c5b8:	606b      	str	r3, [r5, #4]
    for (i = 0; i < num_attrs; i++) {
   2c5ba:	3401      	adds	r4, #1
   2c5bc:	e7f4      	b.n	2c5a8 <ble_gattc_write_reliable+0x2c>
   2c5be:	4605      	mov	r5, r0
    proc = ble_gattc_proc_alloc();
   2c5c0:	f7ff f954 	bl	2b86c <ble_gattc_proc_alloc>
    if (proc == NULL) {
   2c5c4:	4680      	mov	r8, r0
   2c5c6:	b320      	cbz	r0, 2c612 <ble_gattc_write_reliable+0x96>
    proc->op = BLE_GATT_OP_WRITE_RELIABLE;
   2c5c8:	230d      	movs	r3, #13
   2c5ca:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   2c5cc:	8105      	strh	r5, [r0, #8]
    proc->write_reliable.num_attrs = num_attrs;
   2c5ce:	f880 602c 	strb.w	r6, [r0, #44]	; 0x2c
    proc->write_reliable.cur_attr = 0;
   2c5d2:	2300      	movs	r3, #0
   2c5d4:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    proc->write_reliable.cb = cb;
   2c5d8:	6304      	str	r4, [r0, #48]	; 0x30
    proc->write_reliable.cb_arg = cb_arg;
   2c5da:	9a08      	ldr	r2, [sp, #32]
   2c5dc:	6342      	str	r2, [r0, #52]	; 0x34
    for (i = 0; i < num_attrs; i++) {
   2c5de:	e00c      	b.n	2c5fa <ble_gattc_write_reliable+0x7e>
        proc->write_reliable.attrs[i] = attrs[i];
   2c5e0:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   2c5e4:	3301      	adds	r3, #1
   2c5e6:	eb08 04c3 	add.w	r4, r8, r3, lsl #3
   2c5ea:	1d25      	adds	r5, r4, #4
   2c5ec:	e892 0003 	ldmia.w	r2, {r0, r1}
   2c5f0:	e885 0003 	stmia.w	r5, {r0, r1}
        proc->write_reliable.attrs[i].offset = 0;
   2c5f4:	2100      	movs	r1, #0
   2c5f6:	80e1      	strh	r1, [r4, #6]
        attrs[i].om = NULL;
   2c5f8:	6051      	str	r1, [r2, #4]
    for (i = 0; i < num_attrs; i++) {
   2c5fa:	42b3      	cmp	r3, r6
   2c5fc:	dbf0      	blt.n	2c5e0 <ble_gattc_write_reliable+0x64>
    ble_gattc_log_write_reliable(proc);
   2c5fe:	4640      	mov	r0, r8
   2c600:	f7ff fa0e 	bl	2ba20 <ble_gattc_log_write_reliable>
    rc = ble_gattc_write_reliable_tx(proc);
   2c604:	4640      	mov	r0, r8
   2c606:	f7fe fe79 	bl	2b2fc <ble_gattc_write_reliable_tx>
    if (rc != 0) {
   2c60a:	4681      	mov	r9, r0
   2c60c:	2800      	cmp	r0, #0
   2c60e:	d0ca      	beq.n	2c5a6 <ble_gattc_write_reliable+0x2a>
   2c610:	e7c3      	b.n	2c59a <ble_gattc_write_reliable+0x1e>
        rc = BLE_HS_ENOMEM;
   2c612:	f04f 0906 	mov.w	r9, #6
   2c616:	e7c0      	b.n	2c59a <ble_gattc_write_reliable+0x1e>
    ble_gattc_process_status(proc, rc);
   2c618:	4649      	mov	r1, r9
   2c61a:	4640      	mov	r0, r8
   2c61c:	f7ff f8f4 	bl	2b808 <ble_gattc_process_status>
}
   2c620:	4648      	mov	r0, r9
   2c622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2c626:	bf00      	nop
   2c628:	10005120 	.word	0x10005120

0002c62c <ble_gattc_notify_custom>:
{
   2c62c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c62e:	b083      	sub	sp, #12
   2c630:	4606      	mov	r6, r0
   2c632:	460d      	mov	r5, r1
   2c634:	4614      	mov	r4, r2
    STATS_INC(ble_gattc_stats, notify);
   2c636:	4a1c      	ldr	r2, [pc, #112]	; (2c6a8 <ble_gattc_notify_custom+0x7c>)
   2c638:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   2c63c:	3301      	adds	r3, #1
   2c63e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    ble_gattc_log_notify(chr_val_handle);
   2c642:	4608      	mov	r0, r1
   2c644:	f7ff fa20 	bl	2ba88 <ble_gattc_log_notify>
    if (txom == NULL) {
   2c648:	b1cc      	cbz	r4, 2c67e <ble_gattc_notify_custom+0x52>
    rc = ble_att_clt_tx_notify(conn_handle, chr_val_handle, txom);
   2c64a:	4622      	mov	r2, r4
   2c64c:	4629      	mov	r1, r5
   2c64e:	4630      	mov	r0, r6
   2c650:	f7fa fce0 	bl	27014 <ble_att_clt_tx_notify>
    if (rc != 0) {
   2c654:	4607      	mov	r7, r0
   2c656:	b320      	cbz	r0, 2c6a2 <ble_gattc_notify_custom+0x76>
   2c658:	2400      	movs	r4, #0
        STATS_INC(ble_gattc_stats, notify_fail);
   2c65a:	4a13      	ldr	r2, [pc, #76]	; (2c6a8 <ble_gattc_notify_custom+0x7c>)
   2c65c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   2c660:	3301      	adds	r3, #1
   2c662:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    ble_gap_notify_tx_event(rc, conn_handle, chr_val_handle, 0);
   2c666:	2300      	movs	r3, #0
   2c668:	462a      	mov	r2, r5
   2c66a:	4631      	mov	r1, r6
   2c66c:	4638      	mov	r0, r7
   2c66e:	f7fe f830 	bl	2a6d2 <ble_gap_notify_tx_event>
    os_mbuf_free_chain(txom);
   2c672:	4620      	mov	r0, r4
   2c674:	f7ec ffab 	bl	195ce <os_mbuf_free_chain>
}
   2c678:	4638      	mov	r0, r7
   2c67a:	b003      	add	sp, #12
   2c67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txom = ble_hs_mbuf_att_pkt();
   2c67e:	f003 fc7f 	bl	2ff80 <ble_hs_mbuf_att_pkt>
        if (txom == NULL) {
   2c682:	4604      	mov	r4, r0
   2c684:	b158      	cbz	r0, 2c69e <ble_gattc_notify_custom+0x72>
        rc = ble_att_svr_read_handle(BLE_HS_CONN_HANDLE_NONE,
   2c686:	2200      	movs	r2, #0
   2c688:	9200      	str	r2, [sp, #0]
   2c68a:	4603      	mov	r3, r0
   2c68c:	4629      	mov	r1, r5
   2c68e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   2c692:	f7fb fc11 	bl	27eb8 <ble_att_svr_read_handle>
        if (rc != 0) {
   2c696:	2800      	cmp	r0, #0
   2c698:	d0d7      	beq.n	2c64a <ble_gattc_notify_custom+0x1e>
            rc = BLE_HS_EAPP;
   2c69a:	2709      	movs	r7, #9
   2c69c:	e7dd      	b.n	2c65a <ble_gattc_notify_custom+0x2e>
            rc = BLE_HS_ENOMEM;
   2c69e:	2706      	movs	r7, #6
   2c6a0:	e7db      	b.n	2c65a <ble_gattc_notify_custom+0x2e>
   2c6a2:	2400      	movs	r4, #0
   2c6a4:	e7df      	b.n	2c666 <ble_gattc_notify_custom+0x3a>
   2c6a6:	bf00      	nop
   2c6a8:	10005120 	.word	0x10005120

0002c6ac <ble_gattc_notify>:
{
   2c6ac:	b508      	push	{r3, lr}
    rc = ble_gattc_notify_custom(conn_handle, chr_val_handle, NULL);
   2c6ae:	2200      	movs	r2, #0
   2c6b0:	f7ff ffbc 	bl	2c62c <ble_gattc_notify_custom>
}
   2c6b4:	bd08      	pop	{r3, pc}

0002c6b6 <ble_gatts_indicate_fail_notconn>:
 * Causes the indication in progress for the specified connection (if any) to
 * fail with a status code of BLE_HS_ENOTCONN;
 */
void
ble_gatts_indicate_fail_notconn(uint16_t conn_handle)
{
   2c6b6:	b508      	push	{r3, lr}
    ble_gattc_fail_procs(conn_handle, BLE_GATT_OP_INDICATE, BLE_HS_ENOTCONN);
   2c6b8:	2207      	movs	r2, #7
   2c6ba:	210e      	movs	r1, #14
   2c6bc:	f7fe fdda 	bl	2b274 <ble_gattc_fail_procs>
}
   2c6c0:	bd08      	pop	{r3, pc}
	...

0002c6c4 <ble_gattc_indicate_custom>:

int
ble_gattc_indicate_custom(uint16_t conn_handle, uint16_t chr_val_handle,
                          struct os_mbuf *txom)
{
   2c6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c6c8:	b082      	sub	sp, #8
   2c6ca:	4606      	mov	r6, r0
   2c6cc:	460c      	mov	r4, r1
   2c6ce:	4615      	mov	r5, r2

    struct ble_gattc_proc *proc;
    struct ble_hs_conn *conn;
    int rc;

    STATS_INC(ble_gattc_stats, indicate);
   2c6d0:	4a29      	ldr	r2, [pc, #164]	; (2c778 <ble_gattc_indicate_custom+0xb4>)
   2c6d2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   2c6d6:	3301      	adds	r3, #1
   2c6d8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    proc = ble_gattc_proc_alloc();
   2c6dc:	f7ff f8c6 	bl	2b86c <ble_gattc_proc_alloc>
    if (proc == NULL) {
   2c6e0:	4680      	mov	r8, r0
   2c6e2:	b360      	cbz	r0, 2c73e <ble_gattc_indicate_custom+0x7a>
        rc = BLE_HS_ENOMEM;
        goto done;
    }

    proc->op = BLE_GATT_OP_INDICATE;
   2c6e4:	230e      	movs	r3, #14
   2c6e6:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   2c6e8:	8106      	strh	r6, [r0, #8]
    proc->indicate.chr_val_handle = chr_val_handle;
   2c6ea:	8184      	strh	r4, [r0, #12]

    ble_gattc_log_indicate(chr_val_handle);
   2c6ec:	4620      	mov	r0, r4
   2c6ee:	f7ff f9db 	bl	2baa8 <ble_gattc_log_indicate>

    if (txom == NULL) {
   2c6f2:	b14d      	cbz	r5, 2c708 <ble_gattc_indicate_custom+0x44>
            rc = BLE_HS_EAPP;
            goto done;
        }
    }

    rc = ble_att_clt_tx_indicate(conn_handle, chr_val_handle, txom);
   2c6f4:	462a      	mov	r2, r5
   2c6f6:	4621      	mov	r1, r4
   2c6f8:	4630      	mov	r0, r6
   2c6fa:	f7fa fcab 	bl	27054 <ble_att_clt_tx_indicate>
    txom = NULL;
    if (rc != 0) {
   2c6fe:	4607      	mov	r7, r0
   2c700:	b190      	cbz	r0, 2c728 <ble_gattc_indicate_custom+0x64>
        conn->bhc_gatt_svr.indicate_val_handle = chr_val_handle;
    }
    ble_hs_unlock();

done:
    if (rc != 0) {
   2c702:	b3b7      	cbz	r7, 2c772 <ble_gattc_indicate_custom+0xae>
   2c704:	2500      	movs	r5, #0
   2c706:	e01b      	b.n	2c740 <ble_gattc_indicate_custom+0x7c>
        txom = ble_hs_mbuf_att_pkt();
   2c708:	f003 fc3a 	bl	2ff80 <ble_hs_mbuf_att_pkt>
        if (txom == NULL) {
   2c70c:	4605      	mov	r5, r0
   2c70e:	b370      	cbz	r0, 2c76e <ble_gattc_indicate_custom+0xaa>
        rc = ble_att_svr_read_handle(BLE_HS_CONN_HANDLE_NONE, chr_val_handle,
   2c710:	2200      	movs	r2, #0
   2c712:	9200      	str	r2, [sp, #0]
   2c714:	4603      	mov	r3, r0
   2c716:	4621      	mov	r1, r4
   2c718:	f64f 70ff 	movw	r0, #65535	; 0xffff
   2c71c:	f7fb fbcc 	bl	27eb8 <ble_att_svr_read_handle>
        if (rc != 0) {
   2c720:	2800      	cmp	r0, #0
   2c722:	d0e7      	beq.n	2c6f4 <ble_gattc_indicate_custom+0x30>
            rc = BLE_HS_EAPP;
   2c724:	2709      	movs	r7, #9
   2c726:	e00b      	b.n	2c740 <ble_gattc_indicate_custom+0x7c>
    ble_hs_lock();
   2c728:	f001 fc32 	bl	2df90 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   2c72c:	4630      	mov	r0, r6
   2c72e:	f002 fcb3 	bl	2f098 <ble_hs_conn_find>
    if (conn != NULL) {
   2c732:	b108      	cbz	r0, 2c738 <ble_gattc_indicate_custom+0x74>
        conn->bhc_gatt_svr.indicate_val_handle = chr_val_handle;
   2c734:	f8a0 4054 	strh.w	r4, [r0, #84]	; 0x54
    ble_hs_unlock();
   2c738:	f001 fc2e 	bl	2df98 <ble_hs_unlock>
   2c73c:	e7e1      	b.n	2c702 <ble_gattc_indicate_custom+0x3e>
        rc = BLE_HS_ENOMEM;
   2c73e:	2706      	movs	r7, #6
        STATS_INC(ble_gattc_stats, indicate_fail);
   2c740:	4a0d      	ldr	r2, [pc, #52]	; (2c778 <ble_gattc_indicate_custom+0xb4>)
   2c742:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   2c746:	3301      	adds	r3, #1
   2c748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Tell the application that an indication transmission was attempted. */
    ble_gap_notify_tx_event(rc, conn_handle, chr_val_handle, 1);
   2c74c:	2301      	movs	r3, #1
   2c74e:	4622      	mov	r2, r4
   2c750:	4631      	mov	r1, r6
   2c752:	4638      	mov	r0, r7
   2c754:	f7fd ffbd 	bl	2a6d2 <ble_gap_notify_tx_event>

    ble_gattc_process_status(proc, rc);
   2c758:	4639      	mov	r1, r7
   2c75a:	4640      	mov	r0, r8
   2c75c:	f7ff f854 	bl	2b808 <ble_gattc_process_status>
    os_mbuf_free_chain(txom);
   2c760:	4628      	mov	r0, r5
   2c762:	f7ec ff34 	bl	195ce <os_mbuf_free_chain>
    return rc;
}
   2c766:	4638      	mov	r0, r7
   2c768:	b002      	add	sp, #8
   2c76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_ENOMEM;
   2c76e:	2706      	movs	r7, #6
   2c770:	e7e6      	b.n	2c740 <ble_gattc_indicate_custom+0x7c>
   2c772:	2500      	movs	r5, #0
   2c774:	e7ea      	b.n	2c74c <ble_gattc_indicate_custom+0x88>
   2c776:	bf00      	nop
   2c778:	10005120 	.word	0x10005120

0002c77c <ble_gattc_indicate>:

int
ble_gattc_indicate(uint16_t conn_handle, uint16_t chr_val_handle)
{
   2c77c:	b508      	push	{r3, lr}
    return ble_gattc_indicate_custom(conn_handle, chr_val_handle, NULL);
   2c77e:	2200      	movs	r2, #0
   2c780:	f7ff ffa0 	bl	2c6c4 <ble_gattc_indicate_custom>
}
   2c784:	bd08      	pop	{r3, pc}

0002c786 <ble_gattc_rx_err>:
 * Dispatches an incoming ATT error-response to the appropriate active GATT
 * procedure.
 */
void
ble_gattc_rx_err(uint16_t conn_handle, uint16_t handle, uint16_t status)
{
   2c786:	b570      	push	{r4, r5, r6, lr}
   2c788:	460d      	mov	r5, r1
   2c78a:	4614      	mov	r4, r2
    struct ble_gattc_proc *proc;
    ble_gattc_err_fn *err_cb;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle, BLE_GATT_OP_NONE);
   2c78c:	21ff      	movs	r1, #255	; 0xff
   2c78e:	f7fe fce3 	bl	2b158 <ble_gattc_extract_first_by_conn_op>
    if (proc != NULL) {
   2c792:	b168      	cbz	r0, 2c7b0 <ble_gattc_rx_err+0x2a>
   2c794:	4606      	mov	r6, r0
        err_cb = ble_gattc_err_dispatch_get(proc->op);
   2c796:	7a80      	ldrb	r0, [r0, #10]
   2c798:	f7fe f91a 	bl	2a9d0 <ble_gattc_err_dispatch_get>
        if (err_cb != NULL) {
   2c79c:	4603      	mov	r3, r0
   2c79e:	b120      	cbz	r0, 2c7aa <ble_gattc_rx_err+0x24>
            err_cb(proc, BLE_HS_ERR_ATT_BASE + status, handle);
   2c7a0:	462a      	mov	r2, r5
   2c7a2:	f504 7180 	add.w	r1, r4, #256	; 0x100
   2c7a6:	4630      	mov	r0, r6
   2c7a8:	4798      	blx	r3
        }
        ble_gattc_proc_free(proc);
   2c7aa:	4630      	mov	r0, r6
   2c7ac:	f7fe fd40 	bl	2b230 <ble_gattc_proc_free>
    }
}
   2c7b0:	bd70      	pop	{r4, r5, r6, pc}

0002c7b2 <ble_gattc_rx_mtu>:
 * Dispatches an incoming ATT exchange-mtu-response to the appropriate active
 * GATT procedure.
 */
void
ble_gattc_rx_mtu(uint16_t conn_handle, int status, uint16_t chan_mtu)
{
   2c7b2:	b570      	push	{r4, r5, r6, lr}
   2c7b4:	460c      	mov	r4, r1
   2c7b6:	4615      	mov	r5, r2
    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle, BLE_GATT_OP_MTU);
   2c7b8:	2100      	movs	r1, #0
   2c7ba:	f7fe fccd 	bl	2b158 <ble_gattc_extract_first_by_conn_op>
    if (proc != NULL) {
   2c7be:	b148      	cbz	r0, 2c7d4 <ble_gattc_rx_mtu+0x22>
   2c7c0:	4606      	mov	r6, r0
        ble_gattc_mtu_cb(proc, status, 0, chan_mtu);
   2c7c2:	462b      	mov	r3, r5
   2c7c4:	2200      	movs	r2, #0
   2c7c6:	4621      	mov	r1, r4
   2c7c8:	f7fe f968 	bl	2aa9c <ble_gattc_mtu_cb>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   2c7cc:	210e      	movs	r1, #14
   2c7ce:	4630      	mov	r0, r6
   2c7d0:	f7ff f81a 	bl	2b808 <ble_gattc_process_status>
    }
}
   2c7d4:	bd70      	pop	{r4, r5, r6, pc}

0002c7d6 <ble_gattc_rx_find_info_idata>:
 * find-information-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_find_info_idata(uint16_t conn_handle,
                             struct ble_att_find_info_idata *idata)
{
   2c7d6:	b538      	push	{r3, r4, r5, lr}
   2c7d8:	460c      	mov	r4, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   2c7da:	2106      	movs	r1, #6
   2c7dc:	f7fe fcbc 	bl	2b158 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_ALL_DSCS);
    if (proc != NULL) {
   2c7e0:	b138      	cbz	r0, 2c7f2 <ble_gattc_rx_find_info_idata+0x1c>
   2c7e2:	4605      	mov	r5, r0
        rc = ble_gattc_disc_all_dscs_rx_idata(proc, idata);
   2c7e4:	4621      	mov	r1, r4
   2c7e6:	f7fe fabe 	bl	2ad66 <ble_gattc_disc_all_dscs_rx_idata>
   2c7ea:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   2c7ec:	4628      	mov	r0, r5
   2c7ee:	f7ff f80b 	bl	2b808 <ble_gattc_process_status>
    }
}
   2c7f2:	bd38      	pop	{r3, r4, r5, pc}

0002c7f4 <ble_gattc_rx_find_info_complete>:
 * Dispatches an incoming notification of the end of a
 * find-information-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_find_info_complete(uint16_t conn_handle, int status)
{
   2c7f4:	b538      	push	{r3, r4, r5, lr}
   2c7f6:	460c      	mov	r4, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   2c7f8:	2106      	movs	r1, #6
   2c7fa:	f7fe fcad 	bl	2b158 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_ALL_DSCS);
    if (proc != NULL) {
   2c7fe:	b138      	cbz	r0, 2c810 <ble_gattc_rx_find_info_complete+0x1c>
   2c800:	4605      	mov	r5, r0
        rc = ble_gattc_disc_all_dscs_rx_complete(proc, status);
   2c802:	4621      	mov	r1, r4
   2c804:	f7fe fe91 	bl	2b52a <ble_gattc_disc_all_dscs_rx_complete>
   2c808:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   2c80a:	4628      	mov	r0, r5
   2c80c:	f7fe fffc 	bl	2b808 <ble_gattc_process_status>
    }
}
   2c810:	bd38      	pop	{r3, r4, r5, pc}

0002c812 <ble_gattc_rx_find_type_value_hinfo>:
 * find-by-type-value-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_find_type_value_hinfo(uint16_t conn_handle,
                                   struct ble_att_find_type_value_hinfo *hinfo)
{
   2c812:	b538      	push	{r3, r4, r5, lr}
   2c814:	460c      	mov	r4, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   2c816:	2102      	movs	r1, #2
   2c818:	f7fe fc9e 	bl	2b158 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_SVC_UUID);
    if (proc != NULL) {
   2c81c:	b138      	cbz	r0, 2c82e <ble_gattc_rx_find_type_value_hinfo+0x1c>
   2c81e:	4605      	mov	r5, r0
        rc = ble_gattc_disc_svc_uuid_rx_hinfo(proc, hinfo);
   2c820:	4621      	mov	r1, r4
   2c822:	f7fe f9be 	bl	2aba2 <ble_gattc_disc_svc_uuid_rx_hinfo>
   2c826:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   2c828:	4628      	mov	r0, r5
   2c82a:	f7fe ffed 	bl	2b808 <ble_gattc_process_status>
    }
}
   2c82e:	bd38      	pop	{r3, r4, r5, pc}

0002c830 <ble_gattc_rx_find_type_value_complete>:
 * Dispatches an incoming notification of the end of a
 * find-by-type-value-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_find_type_value_complete(uint16_t conn_handle, int status)
{
   2c830:	b538      	push	{r3, r4, r5, lr}
   2c832:	460c      	mov	r4, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   2c834:	2102      	movs	r1, #2
   2c836:	f7fe fc8f 	bl	2b158 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_SVC_UUID);
    if (proc != NULL) {
   2c83a:	b138      	cbz	r0, 2c84c <ble_gattc_rx_find_type_value_complete+0x1c>
   2c83c:	4605      	mov	r5, r0
        rc = ble_gattc_disc_svc_uuid_rx_complete(proc, status);
   2c83e:	4621      	mov	r1, r4
   2c840:	f7fe ff85 	bl	2b74e <ble_gattc_disc_svc_uuid_rx_complete>
   2c844:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   2c846:	4628      	mov	r0, r5
   2c848:	f7fe ffde 	bl	2b808 <ble_gattc_process_status>
    }
}
   2c84c:	bd38      	pop	{r3, r4, r5, pc}
	...

0002c850 <ble_gattc_rx_read_type_adata>:
 * to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_read_type_adata(uint16_t conn_handle,
                             struct ble_att_read_type_adata *adata)
{
   2c850:	b530      	push	{r4, r5, lr}
   2c852:	b083      	sub	sp, #12
   2c854:	460c      	mov	r4, r1

    const struct ble_gattc_rx_adata_entry *rx_entry;
    struct ble_gattc_proc *proc;
    int rc;

    proc = BLE_GATTC_RX_EXTRACT_RX_ENTRY(conn_handle,
   2c856:	ab01      	add	r3, sp, #4
   2c858:	2204      	movs	r2, #4
   2c85a:	4907      	ldr	r1, [pc, #28]	; (2c878 <ble_gattc_rx_read_type_adata+0x28>)
   2c85c:	f7fe fc90 	bl	2b180 <ble_gattc_extract_with_rx_entry>
                                         ble_gattc_rx_read_type_elem_entries,
                                         &rx_entry);
    if (proc != NULL) {
   2c860:	b140      	cbz	r0, 2c874 <ble_gattc_rx_read_type_adata+0x24>
   2c862:	4605      	mov	r5, r0
        rc = rx_entry->cb(proc, adata);
   2c864:	9b01      	ldr	r3, [sp, #4]
   2c866:	685b      	ldr	r3, [r3, #4]
   2c868:	4621      	mov	r1, r4
   2c86a:	4798      	blx	r3
   2c86c:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   2c86e:	4628      	mov	r0, r5
   2c870:	f7fe ffca 	bl	2b808 <ble_gattc_process_status>
    }
}
   2c874:	b003      	add	sp, #12
   2c876:	bd30      	pop	{r4, r5, pc}
   2c878:	000394a8 	.word	0x000394a8

0002c87c <ble_gattc_rx_read_type_complete>:
 * Dispatches an incoming notification of the end of a read-by-type-response to
 * the appropriate active GATT procedure.
 */
void
ble_gattc_rx_read_type_complete(uint16_t conn_handle, int status)
{
   2c87c:	b530      	push	{r4, r5, lr}
   2c87e:	b083      	sub	sp, #12
   2c880:	460c      	mov	r4, r1

    const struct ble_gattc_rx_complete_entry *rx_entry;
    struct ble_gattc_proc *proc;
    int rc;

    proc = BLE_GATTC_RX_EXTRACT_RX_ENTRY(
   2c882:	ab01      	add	r3, sp, #4
   2c884:	2204      	movs	r2, #4
   2c886:	4907      	ldr	r1, [pc, #28]	; (2c8a4 <ble_gattc_rx_read_type_complete+0x28>)
   2c888:	f7fe fc7a 	bl	2b180 <ble_gattc_extract_with_rx_entry>
        conn_handle, ble_gattc_rx_read_type_complete_entries,
        &rx_entry);
    if (proc != NULL) {
   2c88c:	b140      	cbz	r0, 2c8a0 <ble_gattc_rx_read_type_complete+0x24>
   2c88e:	4605      	mov	r5, r0
        rc = rx_entry->cb(proc, status);
   2c890:	9b01      	ldr	r3, [sp, #4]
   2c892:	685b      	ldr	r3, [r3, #4]
   2c894:	4621      	mov	r1, r4
   2c896:	4798      	blx	r3
   2c898:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   2c89a:	4628      	mov	r0, r5
   2c89c:	f7fe ffb4 	bl	2b808 <ble_gattc_process_status>
    }
}
   2c8a0:	b003      	add	sp, #12
   2c8a2:	bd30      	pop	{r4, r5, pc}
   2c8a4:	00039488 	.word	0x00039488

0002c8a8 <ble_gattc_rx_read_group_type_adata>:
 * read-by-group-type-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_read_group_type_adata(uint16_t conn_handle,
                                   struct ble_att_read_group_type_adata *adata)
{
   2c8a8:	b538      	push	{r3, r4, r5, lr}
   2c8aa:	460c      	mov	r4, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   2c8ac:	2101      	movs	r1, #1
   2c8ae:	f7fe fc53 	bl	2b158 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_ALL_SVCS);
    if (proc != NULL) {
   2c8b2:	b138      	cbz	r0, 2c8c4 <ble_gattc_rx_read_group_type_adata+0x1c>
   2c8b4:	4605      	mov	r5, r0
        rc = ble_gattc_disc_all_svcs_rx_adata(proc, adata);
   2c8b6:	4621      	mov	r1, r4
   2c8b8:	f7ff f9d6 	bl	2bc68 <ble_gattc_disc_all_svcs_rx_adata>
   2c8bc:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   2c8be:	4628      	mov	r0, r5
   2c8c0:	f7fe ffa2 	bl	2b808 <ble_gattc_process_status>
    }
}
   2c8c4:	bd38      	pop	{r3, r4, r5, pc}

0002c8c6 <ble_gattc_rx_read_group_type_complete>:
 * Dispatches an incoming notification of the end of a
 * read-by-group-type-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_read_group_type_complete(uint16_t conn_handle, int status)
{
   2c8c6:	b538      	push	{r3, r4, r5, lr}
   2c8c8:	460c      	mov	r4, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   2c8ca:	2101      	movs	r1, #1
   2c8cc:	f7fe fc44 	bl	2b158 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_ALL_SVCS);
    if (proc != NULL) {
   2c8d0:	b138      	cbz	r0, 2c8e2 <ble_gattc_rx_read_group_type_complete+0x1c>
   2c8d2:	4605      	mov	r5, r0
        rc = ble_gattc_disc_all_svcs_rx_complete(proc, status);
   2c8d4:	4621      	mov	r1, r4
   2c8d6:	f7fe ff7c 	bl	2b7d2 <ble_gattc_disc_all_svcs_rx_complete>
   2c8da:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   2c8dc:	4628      	mov	r0, r5
   2c8de:	f7fe ff93 	bl	2b808 <ble_gattc_process_status>
    }
}
   2c8e2:	bd38      	pop	{r3, r4, r5, pc}

0002c8e4 <ble_gattc_rx_read_rsp>:
 * Dispatches an incoming ATT read-response to the appropriate active GATT
 * procedure.
 */
void
ble_gattc_rx_read_rsp(uint16_t conn_handle, int status, struct os_mbuf **om)
{
   2c8e4:	b570      	push	{r4, r5, r6, lr}
   2c8e6:	b082      	sub	sp, #8
   2c8e8:	460c      	mov	r4, r1
   2c8ea:	4615      	mov	r5, r2

    const struct ble_gattc_rx_attr_entry *rx_entry;
    struct ble_gattc_proc *proc;
    int rc;

    proc = BLE_GATTC_RX_EXTRACT_RX_ENTRY(conn_handle,
   2c8ec:	ab01      	add	r3, sp, #4
   2c8ee:	2203      	movs	r2, #3
   2c8f0:	4907      	ldr	r1, [pc, #28]	; (2c910 <ble_gattc_rx_read_rsp+0x2c>)
   2c8f2:	f7fe fc45 	bl	2b180 <ble_gattc_extract_with_rx_entry>
                                         ble_gattc_rx_read_rsp_entries,
                                         &rx_entry);
    if (proc != NULL) {
   2c8f6:	b148      	cbz	r0, 2c90c <ble_gattc_rx_read_rsp+0x28>
   2c8f8:	4606      	mov	r6, r0
        rc = rx_entry->cb(proc, status, om);
   2c8fa:	9b01      	ldr	r3, [sp, #4]
   2c8fc:	685b      	ldr	r3, [r3, #4]
   2c8fe:	462a      	mov	r2, r5
   2c900:	4621      	mov	r1, r4
   2c902:	4798      	blx	r3
   2c904:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   2c906:	4630      	mov	r0, r6
   2c908:	f7fe ff7e 	bl	2b808 <ble_gattc_process_status>
    }
}
   2c90c:	b002      	add	sp, #8
   2c90e:	bd70      	pop	{r4, r5, r6, pc}
   2c910:	00039470 	.word	0x00039470

0002c914 <ble_gattc_rx_read_blob_rsp>:
 * procedure.
 */
void
ble_gattc_rx_read_blob_rsp(uint16_t conn_handle, int status,
                           struct os_mbuf **om)
{
   2c914:	b570      	push	{r4, r5, r6, lr}
   2c916:	460c      	mov	r4, r1
   2c918:	4615      	mov	r5, r2
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   2c91a:	2109      	movs	r1, #9
   2c91c:	f7fe fc1c 	bl	2b158 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_READ_LONG);
    if (proc != NULL) {
   2c920:	b140      	cbz	r0, 2c934 <ble_gattc_rx_read_blob_rsp+0x20>
   2c922:	4606      	mov	r6, r0
        rc = ble_gattc_read_long_rx_read_rsp(proc, status, om);
   2c924:	462a      	mov	r2, r5
   2c926:	4621      	mov	r1, r4
   2c928:	f7fe fdae 	bl	2b488 <ble_gattc_read_long_rx_read_rsp>
   2c92c:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   2c92e:	4630      	mov	r0, r6
   2c930:	f7fe ff6a 	bl	2b808 <ble_gattc_process_status>
    }
}
   2c934:	bd70      	pop	{r4, r5, r6, pc}

0002c936 <ble_gattc_rx_read_mult_rsp>:
 * GATT procedure.
 */
void
ble_gattc_rx_read_mult_rsp(uint16_t conn_handle, int status,
                           struct os_mbuf **om)
{
   2c936:	b570      	push	{r4, r5, r6, lr}
   2c938:	460c      	mov	r4, r1
   2c93a:	4615      	mov	r5, r2
    return;
#endif

    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   2c93c:	210a      	movs	r1, #10
   2c93e:	f7fe fc0b 	bl	2b158 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_READ_MULT);
    if (proc != NULL) {
   2c942:	b148      	cbz	r0, 2c958 <ble_gattc_rx_read_mult_rsp+0x22>
   2c944:	4606      	mov	r6, r0
        ble_gattc_read_mult_cb(proc, status, 0, om);
   2c946:	462b      	mov	r3, r5
   2c948:	2200      	movs	r2, #0
   2c94a:	4621      	mov	r1, r4
   2c94c:	f7fe fac8 	bl	2aee0 <ble_gattc_read_mult_cb>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   2c950:	210e      	movs	r1, #14
   2c952:	4630      	mov	r0, r6
   2c954:	f7fe ff58 	bl	2b808 <ble_gattc_process_status>
    }
}
   2c958:	bd70      	pop	{r4, r5, r6, pc}

0002c95a <ble_gattc_rx_write_rsp>:
 * Dispatches an incoming ATT write-response to the appropriate active GATT
 * procedure.
 */
void
ble_gattc_rx_write_rsp(uint16_t conn_handle)
{
   2c95a:	b510      	push	{r4, lr}
    return;
#endif

    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   2c95c:	210b      	movs	r1, #11
   2c95e:	f7fe fbfb 	bl	2b158 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_WRITE);
    if (proc != NULL) {
   2c962:	b140      	cbz	r0, 2c976 <ble_gattc_rx_write_rsp+0x1c>
   2c964:	4604      	mov	r4, r0
        ble_gattc_write_cb(proc, 0, 0);
   2c966:	2200      	movs	r2, #0
   2c968:	4611      	mov	r1, r2
   2c96a:	f7fe fc35 	bl	2b1d8 <ble_gattc_write_cb>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   2c96e:	210e      	movs	r1, #14
   2c970:	4620      	mov	r0, r4
   2c972:	f7fe ff49 	bl	2b808 <ble_gattc_process_status>
    }
}
   2c976:	bd10      	pop	{r4, pc}

0002c978 <ble_gattc_rx_prep_write_rsp>:
 */
void
ble_gattc_rx_prep_write_rsp(uint16_t conn_handle, int status,
                            uint16_t handle, uint16_t offset,
                            struct os_mbuf **om)
{
   2c978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c97c:	b084      	sub	sp, #16
   2c97e:	460f      	mov	r7, r1
   2c980:	4616      	mov	r6, r2
   2c982:	461c      	mov	r4, r3

    const struct ble_gattc_rx_prep_entry *rx_entry;
    struct ble_gattc_proc *proc;
    int rc;

    proc = BLE_GATTC_RX_EXTRACT_RX_ENTRY(conn_handle,
   2c984:	ab03      	add	r3, sp, #12
   2c986:	2202      	movs	r2, #2
   2c988:	490a      	ldr	r1, [pc, #40]	; (2c9b4 <ble_gattc_rx_prep_write_rsp+0x3c>)
   2c98a:	f7fe fbf9 	bl	2b180 <ble_gattc_extract_with_rx_entry>
                                         ble_gattc_rx_prep_entries,
                                         &rx_entry);
    if (proc != NULL) {
   2c98e:	b168      	cbz	r0, 2c9ac <ble_gattc_rx_prep_write_rsp+0x34>
   2c990:	4605      	mov	r5, r0
        rc = rx_entry->cb(proc, status, handle, offset, om);
   2c992:	9b03      	ldr	r3, [sp, #12]
   2c994:	f8d3 8004 	ldr.w	r8, [r3, #4]
   2c998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c99a:	9300      	str	r3, [sp, #0]
   2c99c:	4623      	mov	r3, r4
   2c99e:	4632      	mov	r2, r6
   2c9a0:	4639      	mov	r1, r7
   2c9a2:	47c0      	blx	r8
   2c9a4:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   2c9a6:	4628      	mov	r0, r5
   2c9a8:	f7fe ff2e 	bl	2b808 <ble_gattc_process_status>
    }
}
   2c9ac:	b004      	add	sp, #16
   2c9ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c9b2:	bf00      	nop
   2c9b4:	00039460 	.word	0x00039460

0002c9b8 <ble_gattc_rx_exec_write_rsp>:
 * Dispatches an incoming ATT execute-write-response to the appropriate active
 * GATT procedure.
 */
void
ble_gattc_rx_exec_write_rsp(uint16_t conn_handle, int status)
{
   2c9b8:	b530      	push	{r4, r5, lr}
   2c9ba:	b083      	sub	sp, #12
   2c9bc:	460c      	mov	r4, r1

    const struct ble_gattc_rx_exec_entry *rx_entry;
    struct ble_gattc_proc *proc;
    int rc;

    proc = BLE_GATTC_RX_EXTRACT_RX_ENTRY(conn_handle,
   2c9be:	ab01      	add	r3, sp, #4
   2c9c0:	2202      	movs	r2, #2
   2c9c2:	4907      	ldr	r1, [pc, #28]	; (2c9e0 <ble_gattc_rx_exec_write_rsp+0x28>)
   2c9c4:	f7fe fbdc 	bl	2b180 <ble_gattc_extract_with_rx_entry>
                                         ble_gattc_rx_exec_entries, &rx_entry);
    if (proc != NULL) {
   2c9c8:	b140      	cbz	r0, 2c9dc <ble_gattc_rx_exec_write_rsp+0x24>
   2c9ca:	4605      	mov	r5, r0
        rc = rx_entry->cb(proc, status);
   2c9cc:	9b01      	ldr	r3, [sp, #4]
   2c9ce:	685b      	ldr	r3, [r3, #4]
   2c9d0:	4621      	mov	r1, r4
   2c9d2:	4798      	blx	r3
   2c9d4:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   2c9d6:	4628      	mov	r0, r5
   2c9d8:	f7fe ff16 	bl	2b808 <ble_gattc_process_status>
    }
}
   2c9dc:	b003      	add	sp, #12
   2c9de:	bd30      	pop	{r4, r5, pc}
   2c9e0:	00039450 	.word	0x00039450

0002c9e4 <ble_gattc_rx_indicate_rsp>:
 * Dispatches an incoming ATT handle-value-confirmation to the appropriate
 * active GATT procedure.
 */
void
ble_gattc_rx_indicate_rsp(uint16_t conn_handle)
{
   2c9e4:	b510      	push	{r4, lr}
    return;
#endif

    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   2c9e6:	210e      	movs	r1, #14
   2c9e8:	f7fe fbb6 	bl	2b158 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_INDICATE);
    if (proc != NULL) {
   2c9ec:	b130      	cbz	r0, 2c9fc <ble_gattc_rx_indicate_rsp+0x18>
   2c9ee:	4604      	mov	r4, r0
        ble_gattc_indicate_rx_rsp(proc);
   2c9f0:	f7ff f928 	bl	2bc44 <ble_gattc_indicate_rx_rsp>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   2c9f4:	210e      	movs	r1, #14
   2c9f6:	4620      	mov	r0, r4
   2c9f8:	f7fe ff06 	bl	2b808 <ble_gattc_process_status>
    }
}
   2c9fc:	bd10      	pop	{r4, pc}

0002c9fe <ble_gattc_connection_broken>:
 * @param conn_handle           The handle of the connection that was
 *                                  terminated.
 */
void
ble_gattc_connection_broken(uint16_t conn_handle)
{
   2c9fe:	b508      	push	{r3, lr}
    ble_gattc_fail_procs(conn_handle, BLE_GATT_OP_NONE, BLE_HS_ENOTCONN);
   2ca00:	2207      	movs	r2, #7
   2ca02:	21ff      	movs	r1, #255	; 0xff
   2ca04:	f7fe fc36 	bl	2b274 <ble_gattc_fail_procs>
}
   2ca08:	bd08      	pop	{r3, pc}
	...

0002ca0c <ble_gattc_init>:
    return !STAILQ_EMPTY(&ble_gattc_procs);
}

int
ble_gattc_init(void)
{
   2ca0c:	b500      	push	{lr}
   2ca0e:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_gattc_procs);
   2ca10:	4b0e      	ldr	r3, [pc, #56]	; (2ca4c <ble_gattc_init+0x40>)
   2ca12:	2200      	movs	r2, #0
   2ca14:	601a      	str	r2, [r3, #0]
   2ca16:	605b      	str	r3, [r3, #4]

    if (MYNEWT_VAL(BLE_GATT_MAX_PROCS) > 0) {
        rc = os_mempool_init(&ble_gattc_proc_pool,
   2ca18:	4b0d      	ldr	r3, [pc, #52]	; (2ca50 <ble_gattc_init+0x44>)
   2ca1a:	9300      	str	r3, [sp, #0]
   2ca1c:	4b0d      	ldr	r3, [pc, #52]	; (2ca54 <ble_gattc_init+0x48>)
   2ca1e:	2238      	movs	r2, #56	; 0x38
   2ca20:	2104      	movs	r1, #4
   2ca22:	480d      	ldr	r0, [pc, #52]	; (2ca58 <ble_gattc_init+0x4c>)
   2ca24:	f7ed f9ce 	bl	19dc4 <os_mempool_init>
                             MYNEWT_VAL(BLE_GATT_MAX_PROCS),
                             sizeof (struct ble_gattc_proc),
                             ble_gattc_proc_mem,
                             "ble_gattc_proc_pool");
        if (rc != 0) {
   2ca28:	b110      	cbz	r0, 2ca30 <ble_gattc_init+0x24>
    if (rc != 0) {
        return BLE_HS_EOS;
    }

    return 0;
}
   2ca2a:	b003      	add	sp, #12
   2ca2c:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = stats_init_and_reg(
   2ca30:	4b0a      	ldr	r3, [pc, #40]	; (2ca5c <ble_gattc_init+0x50>)
   2ca32:	9301      	str	r3, [sp, #4]
   2ca34:	2300      	movs	r3, #0
   2ca36:	9300      	str	r3, [sp, #0]
   2ca38:	2223      	movs	r2, #35	; 0x23
   2ca3a:	2104      	movs	r1, #4
   2ca3c:	4808      	ldr	r0, [pc, #32]	; (2ca60 <ble_gattc_init+0x54>)
   2ca3e:	f7f1 fa79 	bl	1df34 <stats_init_and_reg>
    if (rc != 0) {
   2ca42:	2800      	cmp	r0, #0
   2ca44:	d0f1      	beq.n	2ca2a <ble_gattc_init+0x1e>
        return BLE_HS_EOS;
   2ca46:	200b      	movs	r0, #11
   2ca48:	e7ef      	b.n	2ca2a <ble_gattc_init+0x1e>
   2ca4a:	bf00      	nop
   2ca4c:	10005114 	.word	0x10005114
   2ca50:	000393b8 	.word	0x000393b8
   2ca54:	10005018 	.word	0x10005018
   2ca58:	100050f8 	.word	0x100050f8
   2ca5c:	000393cc 	.word	0x000393cc
   2ca60:	10005120 	.word	0x10005120

0002ca64 <ble_gatts_chr_clt_cfg_allowed>:
ble_gatts_chr_clt_cfg_allowed(const struct ble_gatt_chr_def *chr)
{
    uint16_t flags;

    flags = 0;
    if (chr->flags & BLE_GATT_CHR_F_NOTIFY) {
   2ca64:	8a03      	ldrh	r3, [r0, #16]
   2ca66:	f013 0010 	ands.w	r0, r3, #16
   2ca6a:	d000      	beq.n	2ca6e <ble_gatts_chr_clt_cfg_allowed+0xa>
        flags |= BLE_GATTS_CLT_CFG_F_NOTIFY;
   2ca6c:	2001      	movs	r0, #1
    }
    if (chr->flags & BLE_GATT_CHR_F_INDICATE) {
   2ca6e:	f013 0f20 	tst.w	r3, #32
   2ca72:	d001      	beq.n	2ca78 <ble_gatts_chr_clt_cfg_allowed+0x14>
        flags |= BLE_GATTS_CLT_CFG_F_INDICATE;
   2ca74:	f040 0002 	orr.w	r0, r0, #2
    }

    return flags;
}
   2ca78:	4770      	bx	lr

0002ca7a <ble_gatts_att_flags_from_chr_flags>:

static uint8_t
ble_gatts_att_flags_from_chr_flags(ble_gatt_chr_flags chr_flags)
{
   2ca7a:	4603      	mov	r3, r0
    uint8_t att_flags;

    att_flags = 0;
    if (chr_flags & BLE_GATT_CHR_F_READ) {
   2ca7c:	f010 0f02 	tst.w	r0, #2
   2ca80:	d124      	bne.n	2cacc <ble_gatts_att_flags_from_chr_flags+0x52>
    att_flags = 0;
   2ca82:	2000      	movs	r0, #0
        att_flags |= BLE_ATT_F_READ;
    }
    if (chr_flags & (BLE_GATT_CHR_F_WRITE_NO_RSP | BLE_GATT_CHR_F_WRITE)) {
   2ca84:	f013 0f0c 	tst.w	r3, #12
   2ca88:	d001      	beq.n	2ca8e <ble_gatts_att_flags_from_chr_flags+0x14>
        att_flags |= BLE_ATT_F_WRITE;
   2ca8a:	f040 0002 	orr.w	r0, r0, #2
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_ENC) {
   2ca8e:	f413 7f00 	tst.w	r3, #512	; 0x200
   2ca92:	d001      	beq.n	2ca98 <ble_gatts_att_flags_from_chr_flags+0x1e>
        att_flags |= BLE_ATT_F_READ_ENC;
   2ca94:	f040 0004 	orr.w	r0, r0, #4
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_AUTHEN) {
   2ca98:	f413 6f80 	tst.w	r3, #1024	; 0x400
   2ca9c:	d001      	beq.n	2caa2 <ble_gatts_att_flags_from_chr_flags+0x28>
        att_flags |= BLE_ATT_F_READ_AUTHEN;
   2ca9e:	f040 0008 	orr.w	r0, r0, #8
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_AUTHOR) {
   2caa2:	f413 6f00 	tst.w	r3, #2048	; 0x800
   2caa6:	d001      	beq.n	2caac <ble_gatts_att_flags_from_chr_flags+0x32>
        att_flags |= BLE_ATT_F_READ_AUTHOR;
   2caa8:	f040 0010 	orr.w	r0, r0, #16
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_ENC) {
   2caac:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   2cab0:	d001      	beq.n	2cab6 <ble_gatts_att_flags_from_chr_flags+0x3c>
        att_flags |= BLE_ATT_F_WRITE_ENC;
   2cab2:	f040 0020 	orr.w	r0, r0, #32
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_AUTHEN) {
   2cab6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   2caba:	d001      	beq.n	2cac0 <ble_gatts_att_flags_from_chr_flags+0x46>
        att_flags |= BLE_ATT_F_WRITE_AUTHEN;
   2cabc:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_AUTHOR) {
   2cac0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   2cac4:	d001      	beq.n	2caca <ble_gatts_att_flags_from_chr_flags+0x50>
        att_flags |= BLE_ATT_F_WRITE_AUTHOR;
   2cac6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    }

    return att_flags;
}
   2caca:	4770      	bx	lr
        att_flags |= BLE_ATT_F_READ;
   2cacc:	2001      	movs	r0, #1
   2cace:	e7d9      	b.n	2ca84 <ble_gatts_att_flags_from_chr_flags+0xa>

0002cad0 <ble_gatts_chr_properties>:
{
    uint8_t properties;

    properties = 0;

    if (chr->flags & BLE_GATT_CHR_F_BROADCAST) {
   2cad0:	8a03      	ldrh	r3, [r0, #16]
   2cad2:	f013 0f01 	tst.w	r3, #1
   2cad6:	d124      	bne.n	2cb22 <ble_gatts_chr_properties+0x52>
    properties = 0;
   2cad8:	2000      	movs	r0, #0
        properties |= BLE_GATT_CHR_PROP_BROADCAST;
    }
    if (chr->flags & BLE_GATT_CHR_F_READ) {
   2cada:	f013 0f02 	tst.w	r3, #2
   2cade:	d001      	beq.n	2cae4 <ble_gatts_chr_properties+0x14>
        properties |= BLE_GATT_CHR_PROP_READ;
   2cae0:	f040 0002 	orr.w	r0, r0, #2
    }
    if (chr->flags & BLE_GATT_CHR_F_WRITE_NO_RSP) {
   2cae4:	f013 0f04 	tst.w	r3, #4
   2cae8:	d001      	beq.n	2caee <ble_gatts_chr_properties+0x1e>
        properties |= BLE_GATT_CHR_PROP_WRITE_NO_RSP;
   2caea:	f040 0004 	orr.w	r0, r0, #4
    }
    if (chr->flags & BLE_GATT_CHR_F_WRITE) {
   2caee:	f013 0f08 	tst.w	r3, #8
   2caf2:	d001      	beq.n	2caf8 <ble_gatts_chr_properties+0x28>
        properties |= BLE_GATT_CHR_PROP_WRITE;
   2caf4:	f040 0008 	orr.w	r0, r0, #8
    }
    if (chr->flags & BLE_GATT_CHR_F_NOTIFY) {
   2caf8:	f013 0f10 	tst.w	r3, #16
   2cafc:	d001      	beq.n	2cb02 <ble_gatts_chr_properties+0x32>
        properties |= BLE_GATT_CHR_PROP_NOTIFY;
   2cafe:	f040 0010 	orr.w	r0, r0, #16
    }
    if (chr->flags & BLE_GATT_CHR_F_INDICATE) {
   2cb02:	f013 0f20 	tst.w	r3, #32
   2cb06:	d001      	beq.n	2cb0c <ble_gatts_chr_properties+0x3c>
        properties |= BLE_GATT_CHR_PROP_INDICATE;
   2cb08:	f040 0020 	orr.w	r0, r0, #32
    }
    if (chr->flags & BLE_GATT_CHR_F_AUTH_SIGN_WRITE) {
   2cb0c:	f013 0f40 	tst.w	r3, #64	; 0x40
   2cb10:	d001      	beq.n	2cb16 <ble_gatts_chr_properties+0x46>
        properties |= BLE_GATT_CHR_PROP_AUTH_SIGN_WRITE;
   2cb12:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    }
    if (chr->flags &
   2cb16:	f413 7fc0 	tst.w	r3, #384	; 0x180
   2cb1a:	d001      	beq.n	2cb20 <ble_gatts_chr_properties+0x50>
        (BLE_GATT_CHR_F_RELIABLE_WRITE | BLE_GATT_CHR_F_AUX_WRITE)) {

        properties |= BLE_GATT_CHR_PROP_EXTENDED;
   2cb1c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    }

    return properties;
}
   2cb20:	4770      	bx	lr
        properties |= BLE_GATT_CHR_PROP_BROADCAST;
   2cb22:	2001      	movs	r0, #1
   2cb24:	e7d9      	b.n	2cada <ble_gatts_chr_properties+0xa>

0002cb26 <ble_gatts_chr_is_sane>:
}

static int
ble_gatts_chr_is_sane(const struct ble_gatt_chr_def *chr)
{
    if (chr->uuid == NULL) {
   2cb26:	6803      	ldr	r3, [r0, #0]
   2cb28:	b11b      	cbz	r3, 2cb32 <ble_gatts_chr_is_sane+0xc>
        return 0;
    }

    if (chr->access_cb == NULL) {
   2cb2a:	6843      	ldr	r3, [r0, #4]
   2cb2c:	b11b      	cbz	r3, 2cb36 <ble_gatts_chr_is_sane+0x10>
        return 0;
    }

    /* XXX: Check properties. */

    return 1;
   2cb2e:	2001      	movs	r0, #1
   2cb30:	4770      	bx	lr
        return 0;
   2cb32:	2000      	movs	r0, #0
   2cb34:	4770      	bx	lr
        return 0;
   2cb36:	2000      	movs	r0, #0
}
   2cb38:	4770      	bx	lr

0002cb3a <ble_gatts_chr_op>:

static uint8_t
ble_gatts_chr_op(uint8_t att_op)
{
    switch (att_op) {
   2cb3a:	2802      	cmp	r0, #2
   2cb3c:	d001      	beq.n	2cb42 <ble_gatts_chr_op+0x8>
    case BLE_ATT_ACCESS_OP_READ:
        return BLE_GATT_ACCESS_OP_READ_CHR;
   2cb3e:	2000      	movs	r0, #0
   2cb40:	4770      	bx	lr

    case BLE_ATT_ACCESS_OP_WRITE:
        return BLE_GATT_ACCESS_OP_WRITE_CHR;
   2cb42:	2001      	movs	r0, #1

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_GATT_ACCESS_OP_READ_CHR;
    }
}
   2cb44:	4770      	bx	lr
	...

0002cb48 <ble_gatts_chr_inc_val_stat>:

static void
ble_gatts_chr_inc_val_stat(uint8_t gatt_op)
{
    switch (gatt_op) {
   2cb48:	b110      	cbz	r0, 2cb50 <ble_gatts_chr_inc_val_stat+0x8>
   2cb4a:	2801      	cmp	r0, #1
   2cb4c:	d005      	beq.n	2cb5a <ble_gatts_chr_inc_val_stat+0x12>
   2cb4e:	4770      	bx	lr
    case BLE_GATT_ACCESS_OP_READ_CHR:
        STATS_INC(ble_gatts_stats, chr_val_reads);
   2cb50:	4a04      	ldr	r2, [pc, #16]	; (2cb64 <ble_gatts_chr_inc_val_stat+0x1c>)
   2cb52:	6a53      	ldr	r3, [r2, #36]	; 0x24
   2cb54:	3301      	adds	r3, #1
   2cb56:	6253      	str	r3, [r2, #36]	; 0x24
        break;
   2cb58:	4770      	bx	lr

    case BLE_GATT_ACCESS_OP_WRITE_CHR:
        STATS_INC(ble_gatts_stats, chr_val_writes);
   2cb5a:	4a02      	ldr	r2, [pc, #8]	; (2cb64 <ble_gatts_chr_inc_val_stat+0x1c>)
   2cb5c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2cb5e:	3301      	adds	r3, #1
   2cb60:	6293      	str	r3, [r2, #40]	; 0x28
        break;

    default:
        break;
    }
}
   2cb62:	4770      	bx	lr
   2cb64:	100051ec 	.word	0x100051ec

0002cb68 <ble_gatts_find_svc_entry_idx>:
    return rc;
}

static int
ble_gatts_find_svc_entry_idx(const struct ble_gatt_svc_def *svc)
{
   2cb68:	4602      	mov	r2, r0
    int i;

    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   2cb6a:	2000      	movs	r0, #0
   2cb6c:	4b07      	ldr	r3, [pc, #28]	; (2cb8c <ble_gatts_find_svc_entry_idx+0x24>)
   2cb6e:	881b      	ldrh	r3, [r3, #0]
   2cb70:	4283      	cmp	r3, r0
   2cb72:	dd07      	ble.n	2cb84 <ble_gatts_find_svc_entry_idx+0x1c>
        if (ble_gatts_svc_entries[i].svc == svc) {
   2cb74:	4b06      	ldr	r3, [pc, #24]	; (2cb90 <ble_gatts_find_svc_entry_idx+0x28>)
   2cb76:	681b      	ldr	r3, [r3, #0]
   2cb78:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   2cb7c:	4293      	cmp	r3, r2
   2cb7e:	d003      	beq.n	2cb88 <ble_gatts_find_svc_entry_idx+0x20>
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   2cb80:	3001      	adds	r0, #1
   2cb82:	e7f3      	b.n	2cb6c <ble_gatts_find_svc_entry_idx+0x4>
            return i;
        }
    }

    return -1;
   2cb84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2cb88:	4770      	bx	lr
   2cb8a:	bf00      	nop
   2cb8c:	100051e8 	.word	0x100051e8
   2cb90:	10005224 	.word	0x10005224

0002cb94 <ble_gatts_svc_incs_satisfied>:

static int
ble_gatts_svc_incs_satisfied(const struct ble_gatt_svc_def *svc)
{
   2cb94:	b538      	push	{r3, r4, r5, lr}
    int idx;
    int i;

    if (svc->includes == NULL) {
   2cb96:	6885      	ldr	r5, [r0, #8]
   2cb98:	b1ad      	cbz	r5, 2cbc6 <ble_gatts_svc_incs_satisfied+0x32>
        /* No included services. */
        return 1;
    }

    for (i = 0; svc->includes[i] != NULL; i++) {
   2cb9a:	2400      	movs	r4, #0
   2cb9c:	e000      	b.n	2cba0 <ble_gatts_svc_incs_satisfied+0xc>
   2cb9e:	3401      	adds	r4, #1
   2cba0:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   2cba4:	b168      	cbz	r0, 2cbc2 <ble_gatts_svc_incs_satisfied+0x2e>
        idx = ble_gatts_find_svc_entry_idx(svc->includes[i]);
   2cba6:	f7ff ffdf 	bl	2cb68 <ble_gatts_find_svc_entry_idx>
        if (idx == -1 || ble_gatts_svc_entries[idx].handle == 0) {
   2cbaa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2cbae:	d00c      	beq.n	2cbca <ble_gatts_svc_incs_satisfied+0x36>
   2cbb0:	4b07      	ldr	r3, [pc, #28]	; (2cbd0 <ble_gatts_svc_incs_satisfied+0x3c>)
   2cbb2:	681b      	ldr	r3, [r3, #0]
   2cbb4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2cbb8:	8883      	ldrh	r3, [r0, #4]
   2cbba:	2b00      	cmp	r3, #0
   2cbbc:	d1ef      	bne.n	2cb9e <ble_gatts_svc_incs_satisfied+0xa>
            return 0;
   2cbbe:	2000      	movs	r0, #0
   2cbc0:	e000      	b.n	2cbc4 <ble_gatts_svc_incs_satisfied+0x30>
        }
    }

    return 1;
   2cbc2:	2001      	movs	r0, #1
}
   2cbc4:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
   2cbc6:	2001      	movs	r0, #1
   2cbc8:	e7fc      	b.n	2cbc4 <ble_gatts_svc_incs_satisfied+0x30>
            return 0;
   2cbca:	2000      	movs	r0, #0
   2cbcc:	e7fa      	b.n	2cbc4 <ble_gatts_svc_incs_satisfied+0x30>
   2cbce:	bf00      	nop
   2cbd0:	10005224 	.word	0x10005224

0002cbd4 <ble_gatts_dsc_op>:
}

static uint8_t
ble_gatts_dsc_op(uint8_t att_op)
{
    switch (att_op) {
   2cbd4:	2802      	cmp	r0, #2
   2cbd6:	d001      	beq.n	2cbdc <ble_gatts_dsc_op+0x8>
    case BLE_ATT_ACCESS_OP_READ:
        return BLE_GATT_ACCESS_OP_READ_DSC;
   2cbd8:	2002      	movs	r0, #2
   2cbda:	4770      	bx	lr

    case BLE_ATT_ACCESS_OP_WRITE:
        return BLE_GATT_ACCESS_OP_WRITE_DSC;
   2cbdc:	2003      	movs	r0, #3

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_GATT_ACCESS_OP_READ_DSC;
    }
}
   2cbde:	4770      	bx	lr

0002cbe0 <ble_gatts_dsc_inc_stat>:

static void
ble_gatts_dsc_inc_stat(uint8_t gatt_op)
{
    switch (gatt_op) {
   2cbe0:	2802      	cmp	r0, #2
   2cbe2:	d002      	beq.n	2cbea <ble_gatts_dsc_inc_stat+0xa>
   2cbe4:	2803      	cmp	r0, #3
   2cbe6:	d005      	beq.n	2cbf4 <ble_gatts_dsc_inc_stat+0x14>
   2cbe8:	4770      	bx	lr
    case BLE_GATT_ACCESS_OP_READ_DSC:
        STATS_INC(ble_gatts_stats, dsc_reads);
   2cbea:	4a05      	ldr	r2, [pc, #20]	; (2cc00 <ble_gatts_dsc_inc_stat+0x20>)
   2cbec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2cbee:	3301      	adds	r3, #1
   2cbf0:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
   2cbf2:	4770      	bx	lr

    case BLE_GATT_ACCESS_OP_WRITE_DSC:
        STATS_INC(ble_gatts_stats, dsc_writes);
   2cbf4:	4a02      	ldr	r2, [pc, #8]	; (2cc00 <ble_gatts_dsc_inc_stat+0x20>)
   2cbf6:	6b13      	ldr	r3, [r2, #48]	; 0x30
   2cbf8:	3301      	adds	r3, #1
   2cbfa:	6313      	str	r3, [r2, #48]	; 0x30
        break;

    default:
        break;
    }
}
   2cbfc:	4770      	bx	lr
   2cbfe:	bf00      	nop
   2cc00:	100051ec 	.word	0x100051ec

0002cc04 <ble_gatts_dsc_is_sane>:
}

static int
ble_gatts_dsc_is_sane(const struct ble_gatt_dsc_def *dsc)
{
    if (dsc->uuid == NULL) {
   2cc04:	6803      	ldr	r3, [r0, #0]
   2cc06:	b11b      	cbz	r3, 2cc10 <ble_gatts_dsc_is_sane+0xc>
        return 0;
    }

    if (dsc->access_cb == NULL) {
   2cc08:	6883      	ldr	r3, [r0, #8]
   2cc0a:	b11b      	cbz	r3, 2cc14 <ble_gatts_dsc_is_sane+0x10>
        return 0;
    }

    return 1;
   2cc0c:	2001      	movs	r0, #1
   2cc0e:	4770      	bx	lr
        return 0;
   2cc10:	2000      	movs	r0, #0
   2cc12:	4770      	bx	lr
        return 0;
   2cc14:	2000      	movs	r0, #0
}
   2cc16:	4770      	bx	lr

0002cc18 <ble_gatts_clt_cfg_find_idx>:
}

static int
ble_gatts_clt_cfg_find_idx(struct ble_gatts_clt_cfg *cfgs,
                           uint16_t chr_val_handle)
{
   2cc18:	4602      	mov	r2, r0
    struct ble_gatts_clt_cfg *cfg;
    int i;

    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   2cc1a:	2000      	movs	r0, #0
   2cc1c:	4b06      	ldr	r3, [pc, #24]	; (2cc38 <ble_gatts_clt_cfg_find_idx+0x20>)
   2cc1e:	681b      	ldr	r3, [r3, #0]
   2cc20:	4283      	cmp	r3, r0
   2cc22:	dd05      	ble.n	2cc30 <ble_gatts_clt_cfg_find_idx+0x18>
        cfg = cfgs + i;
        if (cfg->chr_val_handle == chr_val_handle) {
   2cc24:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
   2cc28:	428b      	cmp	r3, r1
   2cc2a:	d003      	beq.n	2cc34 <ble_gatts_clt_cfg_find_idx+0x1c>
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   2cc2c:	3001      	adds	r0, #1
   2cc2e:	e7f5      	b.n	2cc1c <ble_gatts_clt_cfg_find_idx+0x4>
            return i;
        }
    }

    return -1;
   2cc30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2cc34:	4770      	bx	lr
   2cc36:	bf00      	nop
   2cc38:	100051e0 	.word	0x100051e0

0002cc3c <ble_gatts_clt_cfg_find>:

static struct ble_gatts_clt_cfg *
ble_gatts_clt_cfg_find(struct ble_gatts_clt_cfg *cfgs,
                       uint16_t chr_val_handle)
{
   2cc3c:	b510      	push	{r4, lr}
   2cc3e:	4604      	mov	r4, r0
    int idx;

    idx = ble_gatts_clt_cfg_find_idx(cfgs, chr_val_handle);
   2cc40:	f7ff ffea 	bl	2cc18 <ble_gatts_clt_cfg_find_idx>
    if (idx == -1) {
   2cc44:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2cc48:	d002      	beq.n	2cc50 <ble_gatts_clt_cfg_find+0x14>
        return NULL;
    } else {
        return cfgs + idx;
   2cc4a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    }
}
   2cc4e:	bd10      	pop	{r4, pc}
        return NULL;
   2cc50:	2000      	movs	r0, #0
   2cc52:	e7fc      	b.n	2cc4e <ble_gatts_clt_cfg_find+0x12>

0002cc54 <ble_gatts_svc_type_to_uuid>:
}

static int
ble_gatts_svc_type_to_uuid(uint8_t svc_type, const ble_uuid_t **uuid)
{
    switch (svc_type) {
   2cc54:	2801      	cmp	r0, #1
   2cc56:	d003      	beq.n	2cc60 <ble_gatts_svc_type_to_uuid+0xc>
   2cc58:	2802      	cmp	r0, #2
   2cc5a:	d005      	beq.n	2cc68 <ble_gatts_svc_type_to_uuid+0x14>
   2cc5c:	2003      	movs	r0, #3
   2cc5e:	4770      	bx	lr
    case BLE_GATT_SVC_TYPE_PRIMARY:
        *uuid = uuid_pri;
   2cc60:	4b03      	ldr	r3, [pc, #12]	; (2cc70 <ble_gatts_svc_type_to_uuid+0x1c>)
   2cc62:	600b      	str	r3, [r1, #0]
        return 0;
   2cc64:	2000      	movs	r0, #0
   2cc66:	4770      	bx	lr

    case BLE_GATT_SVC_TYPE_SECONDARY:
        *uuid = uuid_sec;
   2cc68:	4b02      	ldr	r3, [pc, #8]	; (2cc74 <ble_gatts_svc_type_to_uuid+0x20>)
   2cc6a:	600b      	str	r3, [r1, #0]
        return 0;
   2cc6c:	2000      	movs	r0, #0

    default:
        return BLE_HS_EINVAL;
    }
}
   2cc6e:	4770      	bx	lr
   2cc70:	100006d8 	.word	0x100006d8
   2cc74:	100006dc 	.word	0x100006dc

0002cc78 <ble_gatts_svc_is_sane>:

static int
ble_gatts_svc_is_sane(const struct ble_gatt_svc_def *svc)
{
    if (svc->type != BLE_GATT_SVC_TYPE_PRIMARY &&
   2cc78:	7803      	ldrb	r3, [r0, #0]
   2cc7a:	3b01      	subs	r3, #1
   2cc7c:	b2db      	uxtb	r3, r3
   2cc7e:	2b01      	cmp	r3, #1
   2cc80:	d803      	bhi.n	2cc8a <ble_gatts_svc_is_sane+0x12>
        svc->type != BLE_GATT_SVC_TYPE_SECONDARY) {

        return 0;
    }

    if (svc->uuid == NULL) {
   2cc82:	6843      	ldr	r3, [r0, #4]
   2cc84:	b11b      	cbz	r3, 2cc8e <ble_gatts_svc_is_sane+0x16>
        return 0;
    }

    return 1;
   2cc86:	2001      	movs	r0, #1
   2cc88:	4770      	bx	lr
        return 0;
   2cc8a:	2000      	movs	r0, #0
   2cc8c:	4770      	bx	lr
        return 0;
   2cc8e:	2000      	movs	r0, #0
}
   2cc90:	4770      	bx	lr
	...

0002cc94 <ble_gatts_clt_cfg_size>:
}

static int
ble_gatts_clt_cfg_size(void)
{
    return ble_gatts_num_cfgable_chrs * sizeof (struct ble_gatts_clt_cfg);
   2cc94:	4b01      	ldr	r3, [pc, #4]	; (2cc9c <ble_gatts_clt_cfg_size+0x8>)
   2cc96:	6818      	ldr	r0, [r3, #0]
}
   2cc98:	0080      	lsls	r0, r0, #2
   2cc9a:	4770      	bx	lr
   2cc9c:	100051e0 	.word	0x100051e0

0002cca0 <ble_gatts_schedule_update>:
 *                                  if any.  0 if nothing should get sent.
 */
static uint8_t
ble_gatts_schedule_update(struct ble_hs_conn *conn,
                          struct ble_gatts_clt_cfg *clt_cfg)
{
   2cca0:	4603      	mov	r3, r0
    uint8_t att_op;

    if (!(clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED)) {
   2cca2:	788a      	ldrb	r2, [r1, #2]
   2cca4:	f991 0002 	ldrsb.w	r0, [r1, #2]
   2cca8:	2800      	cmp	r0, #0
   2ccaa:	db01      	blt.n	2ccb0 <ble_gatts_schedule_update+0x10>
        /* Characteristic not modified.  Nothing to send. */
        att_op = 0;
   2ccac:	2000      	movs	r0, #0
    if (att_op != 0) {
        clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
    }

    return att_op;
}
   2ccae:	4770      	bx	lr
{
   2ccb0:	b410      	push	{r4}
    } else if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_NOTIFY) {
   2ccb2:	f012 0401 	ands.w	r4, r2, #1
   2ccb6:	d107      	bne.n	2ccc8 <ble_gatts_schedule_update+0x28>
    } else if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_INDICATE) {
   2ccb8:	f012 0002 	ands.w	r0, r2, #2
   2ccbc:	d008      	beq.n	2ccd0 <ble_gatts_schedule_update+0x30>
        if (conn->bhc_gatt_svr.indicate_val_handle != 0) {
   2ccbe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
   2ccc2:	b93b      	cbnz	r3, 2ccd4 <ble_gatts_schedule_update+0x34>
            att_op = BLE_ATT_OP_INDICATE_REQ;
   2ccc4:	201d      	movs	r0, #29
   2ccc6:	e000      	b.n	2ccca <ble_gatts_schedule_update+0x2a>
        att_op = BLE_ATT_OP_NOTIFY_REQ;
   2ccc8:	201b      	movs	r0, #27
        clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
   2ccca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   2ccce:	708a      	strb	r2, [r1, #2]
}
   2ccd0:	bc10      	pop	{r4}
   2ccd2:	4770      	bx	lr
            att_op = 0;
   2ccd4:	4620      	mov	r0, r4
   2ccd6:	e7fb      	b.n	2ccd0 <ble_gatts_schedule_update+0x30>

0002ccd8 <ble_gatts_count_resources>:
 *                                  invalid resource definition.
 */
static int
ble_gatts_count_resources(const struct ble_gatt_svc_def *svcs,
                          struct ble_gatt_resources *res)
{
   2ccd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ccdc:	4682      	mov	sl, r0
   2ccde:	460c      	mov	r4, r1
    int s;
    int i;
    int c;
    int d;

    for (s = 0; svcs[s].type != BLE_GATT_SVC_TYPE_END; s++) {
   2cce0:	f04f 0900 	mov.w	r9, #0
   2cce4:	e049      	b.n	2cd7a <ble_gatts_count_resources+0xa2>
            for (i = 0; svc->includes[i] != NULL; i++) {
                /* Each include requires:
                 *     o 1 include
                 *     o 1 attribute
                 */
                res->incs++;
   2cce6:	8863      	ldrh	r3, [r4, #2]
   2cce8:	3301      	adds	r3, #1
   2ccea:	8063      	strh	r3, [r4, #2]
                res->attrs++;
   2ccec:	8963      	ldrh	r3, [r4, #10]
   2ccee:	3301      	adds	r3, #1
   2ccf0:	8163      	strh	r3, [r4, #10]
            for (i = 0; svc->includes[i] != NULL; i++) {
   2ccf2:	3201      	adds	r2, #1
   2ccf4:	68bb      	ldr	r3, [r7, #8]
   2ccf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   2ccfa:	2b00      	cmp	r3, #0
   2ccfc:	d1f3      	bne.n	2cce6 <ble_gatts_count_resources+0xe>
   2ccfe:	e050      	b.n	2cda2 <ble_gatts_count_resources+0xca>
   2cd00:	2200      	movs	r2, #0
   2cd02:	e7f7      	b.n	2ccf4 <ble_gatts_count_resources+0x1c>
                    res->dscs++;
                    res->cccds++;
                    res->attrs++;
                }

                if (chr->descriptors != NULL) {
   2cd04:	68f3      	ldr	r3, [r6, #12]
   2cd06:	bb1b      	cbnz	r3, 2cd50 <ble_gatts_count_resources+0x78>
            for (c = 0; svc->characteristics[c].uuid != NULL; c++) {
   2cd08:	f108 0801 	add.w	r8, r8, #1
   2cd0c:	68fb      	ldr	r3, [r7, #12]
   2cd0e:	eb08 0248 	add.w	r2, r8, r8, lsl #1
   2cd12:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
   2cd16:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   2cd1a:	2b00      	cmp	r3, #0
   2cd1c:	d02b      	beq.n	2cd76 <ble_gatts_count_resources+0x9e>
                if (!ble_gatts_chr_is_sane(chr)) {
   2cd1e:	4630      	mov	r0, r6
   2cd20:	f7ff ff01 	bl	2cb26 <ble_gatts_chr_is_sane>
   2cd24:	2800      	cmp	r0, #0
   2cd26:	d046      	beq.n	2cdb6 <ble_gatts_count_resources+0xde>
                res->chrs++;
   2cd28:	88a3      	ldrh	r3, [r4, #4]
   2cd2a:	3301      	adds	r3, #1
   2cd2c:	80a3      	strh	r3, [r4, #4]
                res->attrs += 2;
   2cd2e:	8963      	ldrh	r3, [r4, #10]
   2cd30:	3302      	adds	r3, #2
   2cd32:	b29b      	uxth	r3, r3
   2cd34:	8163      	strh	r3, [r4, #10]
                if (chr->flags & BLE_GATT_CHR_F_NOTIFY ||
   2cd36:	8a32      	ldrh	r2, [r6, #16]
   2cd38:	f012 0f30 	tst.w	r2, #48	; 0x30
   2cd3c:	d0e2      	beq.n	2cd04 <ble_gatts_count_resources+0x2c>
                    res->dscs++;
   2cd3e:	88e2      	ldrh	r2, [r4, #6]
   2cd40:	3201      	adds	r2, #1
   2cd42:	80e2      	strh	r2, [r4, #6]
                    res->cccds++;
   2cd44:	8922      	ldrh	r2, [r4, #8]
   2cd46:	3201      	adds	r2, #1
   2cd48:	8122      	strh	r2, [r4, #8]
                    res->attrs++;
   2cd4a:	3301      	adds	r3, #1
   2cd4c:	8163      	strh	r3, [r4, #10]
   2cd4e:	e7d9      	b.n	2cd04 <ble_gatts_count_resources+0x2c>
                    for (d = 0; chr->descriptors[d].uuid != NULL; d++) {
   2cd50:	2500      	movs	r5, #0
   2cd52:	68f2      	ldr	r2, [r6, #12]
   2cd54:	012b      	lsls	r3, r5, #4
   2cd56:	eb02 1005 	add.w	r0, r2, r5, lsl #4
   2cd5a:	58d3      	ldr	r3, [r2, r3]
   2cd5c:	2b00      	cmp	r3, #0
   2cd5e:	d0d3      	beq.n	2cd08 <ble_gatts_count_resources+0x30>
                        if (!ble_gatts_dsc_is_sane(chr->descriptors + d)) {
   2cd60:	f7ff ff50 	bl	2cc04 <ble_gatts_dsc_is_sane>
   2cd64:	b348      	cbz	r0, 2cdba <ble_gatts_count_resources+0xe2>

                        /* Each descriptor requires:
                         *     o 1 descriptor
                         *     o 1 attribute
                         */
                        res->dscs++;
   2cd66:	88e3      	ldrh	r3, [r4, #6]
   2cd68:	3301      	adds	r3, #1
   2cd6a:	80e3      	strh	r3, [r4, #6]
                        res->attrs++;
   2cd6c:	8963      	ldrh	r3, [r4, #10]
   2cd6e:	3301      	adds	r3, #1
   2cd70:	8163      	strh	r3, [r4, #10]
                    for (d = 0; chr->descriptors[d].uuid != NULL; d++) {
   2cd72:	3501      	adds	r5, #1
   2cd74:	e7ed      	b.n	2cd52 <ble_gatts_count_resources+0x7a>
    for (s = 0; svcs[s].type != BLE_GATT_SVC_TYPE_END; s++) {
   2cd76:	f109 0901 	add.w	r9, r9, #1
   2cd7a:	ea4f 1309 	mov.w	r3, r9, lsl #4
   2cd7e:	eb0a 1709 	add.w	r7, sl, r9, lsl #4
   2cd82:	f81a 3003 	ldrb.w	r3, [sl, r3]
   2cd86:	b193      	cbz	r3, 2cdae <ble_gatts_count_resources+0xd6>
        if (!ble_gatts_svc_is_sane(svc)) {
   2cd88:	4638      	mov	r0, r7
   2cd8a:	f7ff ff75 	bl	2cc78 <ble_gatts_svc_is_sane>
   2cd8e:	b180      	cbz	r0, 2cdb2 <ble_gatts_count_resources+0xda>
        res->svcs++;
   2cd90:	8823      	ldrh	r3, [r4, #0]
   2cd92:	3301      	adds	r3, #1
   2cd94:	8023      	strh	r3, [r4, #0]
        res->attrs++;
   2cd96:	8963      	ldrh	r3, [r4, #10]
   2cd98:	3301      	adds	r3, #1
   2cd9a:	8163      	strh	r3, [r4, #10]
        if (svc->includes != NULL) {
   2cd9c:	68bb      	ldr	r3, [r7, #8]
   2cd9e:	2b00      	cmp	r3, #0
   2cda0:	d1ae      	bne.n	2cd00 <ble_gatts_count_resources+0x28>
        if (svc->characteristics != NULL) {
   2cda2:	68fb      	ldr	r3, [r7, #12]
   2cda4:	2b00      	cmp	r3, #0
   2cda6:	d0e6      	beq.n	2cd76 <ble_gatts_count_resources+0x9e>
            for (c = 0; svc->characteristics[c].uuid != NULL; c++) {
   2cda8:	f04f 0800 	mov.w	r8, #0
   2cdac:	e7ae      	b.n	2cd0c <ble_gatts_count_resources+0x34>
                }
            }
        }
    }

    return 0;
   2cdae:	2000      	movs	r0, #0
   2cdb0:	e004      	b.n	2cdbc <ble_gatts_count_resources+0xe4>
            return BLE_HS_EINVAL;
   2cdb2:	2003      	movs	r0, #3
   2cdb4:	e002      	b.n	2cdbc <ble_gatts_count_resources+0xe4>
                    return BLE_HS_EINVAL;
   2cdb6:	2003      	movs	r0, #3
   2cdb8:	e000      	b.n	2cdbc <ble_gatts_count_resources+0xe4>
                            return BLE_HS_EINVAL;
   2cdba:	2003      	movs	r0, #3
}
   2cdbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002cdc0 <ble_gatts_clt_cfg_access_locked>:
{
   2cdc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cdc4:	9e07      	ldr	r6, [sp, #28]
    out_cccd->chr_val_handle = 0;
   2cdc6:	2300      	movs	r3, #0
   2cdc8:	8133      	strh	r3, [r6, #8]
    chr_val_handle = attr_handle - 1;
   2cdca:	1e4c      	subs	r4, r1, #1
   2cdcc:	b2a4      	uxth	r4, r4
    if (chr_val_handle > attr_handle) {
   2cdce:	42a1      	cmp	r1, r4
   2cdd0:	d366      	bcc.n	2cea0 <ble_gatts_clt_cfg_access_locked+0xe0>
   2cdd2:	4605      	mov	r5, r0
   2cdd4:	4617      	mov	r7, r2
    clt_cfg = ble_gatts_clt_cfg_find(conn->bhc_gatt_svr.clt_cfgs,
   2cdd6:	4621      	mov	r1, r4
   2cdd8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   2cdda:	f7ff ff2f 	bl	2cc3c <ble_gatts_clt_cfg_find>
    if (clt_cfg == NULL) {
   2cdde:	4680      	mov	r8, r0
   2cde0:	2800      	cmp	r0, #0
   2cde2:	d05f      	beq.n	2cea4 <ble_gatts_clt_cfg_access_locked+0xe4>
    *out_prev_clt_cfg_flags = clt_cfg->flags;
   2cde4:	7883      	ldrb	r3, [r0, #2]
   2cde6:	9a08      	ldr	r2, [sp, #32]
   2cde8:	7013      	strb	r3, [r2, #0]
    *out_cur_clt_cfg_flags = clt_cfg->flags;
   2cdea:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2cdec:	7013      	strb	r3, [r2, #0]
    gatt_op = ble_gatts_dsc_op(att_op);
   2cdee:	4638      	mov	r0, r7
   2cdf0:	f7ff fef0 	bl	2cbd4 <ble_gatts_dsc_op>
   2cdf4:	4607      	mov	r7, r0
    ble_gatts_dsc_inc_stat(gatt_op);
   2cdf6:	f7ff fef3 	bl	2cbe0 <ble_gatts_dsc_inc_stat>
    switch (gatt_op) {
   2cdfa:	2f02      	cmp	r7, #2
   2cdfc:	d005      	beq.n	2ce0a <ble_gatts_clt_cfg_access_locked+0x4a>
   2cdfe:	2f03      	cmp	r7, #3
   2ce00:	d015      	beq.n	2ce2e <ble_gatts_clt_cfg_access_locked+0x6e>
   2ce02:	270e      	movs	r7, #14
}
   2ce04:	4638      	mov	r0, r7
   2ce06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        STATS_INC(ble_gatts_stats, dsc_reads);
   2ce0a:	4a29      	ldr	r2, [pc, #164]	; (2ceb0 <ble_gatts_clt_cfg_access_locked+0xf0>)
   2ce0c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2ce0e:	3301      	adds	r3, #1
   2ce10:	62d3      	str	r3, [r2, #44]	; 0x2c
        buf = os_mbuf_extend(om, 2);
   2ce12:	2102      	movs	r1, #2
   2ce14:	9806      	ldr	r0, [sp, #24]
   2ce16:	f7ec fe5d 	bl	19ad4 <os_mbuf_extend>
        if (buf == NULL) {
   2ce1a:	2800      	cmp	r0, #0
   2ce1c:	d044      	beq.n	2cea8 <ble_gatts_clt_cfg_access_locked+0xe8>
        put_le16(buf, clt_cfg->flags & ~BLE_GATTS_CLT_CFG_F_RESERVED);
   2ce1e:	f898 1002 	ldrb.w	r1, [r8, #2]
   2ce22:	f001 0103 	and.w	r1, r1, #3
   2ce26:	f7eb fff1 	bl	18e0c <put_le16>
    return 0;
   2ce2a:	2700      	movs	r7, #0
        break;
   2ce2c:	e7ea      	b.n	2ce04 <ble_gatts_clt_cfg_access_locked+0x44>
        STATS_INC(ble_gatts_stats, dsc_writes);
   2ce2e:	4a20      	ldr	r2, [pc, #128]	; (2ceb0 <ble_gatts_clt_cfg_access_locked+0xf0>)
   2ce30:	6b13      	ldr	r3, [r2, #48]	; 0x30
   2ce32:	3301      	adds	r3, #1
   2ce34:	6313      	str	r3, [r2, #48]	; 0x30
        if (OS_MBUF_PKTLEN(om) != 2) {
   2ce36:	9b06      	ldr	r3, [sp, #24]
   2ce38:	8a1b      	ldrh	r3, [r3, #16]
   2ce3a:	2b02      	cmp	r3, #2
   2ce3c:	d001      	beq.n	2ce42 <ble_gatts_clt_cfg_access_locked+0x82>
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   2ce3e:	270d      	movs	r7, #13
   2ce40:	e7e0      	b.n	2ce04 <ble_gatts_clt_cfg_access_locked+0x44>
        om = os_mbuf_pullup(om, 2);
   2ce42:	2102      	movs	r1, #2
   2ce44:	9806      	ldr	r0, [sp, #24]
   2ce46:	f7ec fe73 	bl	19b30 <os_mbuf_pullup>
        flags = get_le16(om->om_data);
   2ce4a:	6800      	ldr	r0, [r0, #0]
   2ce4c:	f7eb ffff 	bl	18e4e <get_le16>
        if ((flags & ~clt_cfg->allowed) != 0) {
   2ce50:	f898 7003 	ldrb.w	r7, [r8, #3]
   2ce54:	ea30 0707 	bics.w	r7, r0, r7
   2ce58:	d128      	bne.n	2ceac <ble_gatts_clt_cfg_access_locked+0xec>
        if (clt_cfg->flags != flags) {
   2ce5a:	f898 3002 	ldrb.w	r3, [r8, #2]
   2ce5e:	4283      	cmp	r3, r0
   2ce60:	d0d0      	beq.n	2ce04 <ble_gatts_clt_cfg_access_locked+0x44>
            clt_cfg->flags = flags;
   2ce62:	b2c0      	uxtb	r0, r0
   2ce64:	f888 0002 	strb.w	r0, [r8, #2]
            *out_cur_clt_cfg_flags = flags;
   2ce68:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ce6a:	7018      	strb	r0, [r3, #0]
            if (conn->bhc_sec_state.bonded) {
   2ce6c:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
   2ce70:	f013 0f04 	tst.w	r3, #4
   2ce74:	d0c6      	beq.n	2ce04 <ble_gatts_clt_cfg_access_locked+0x44>
                out_cccd->peer_addr = conn->bhc_peer_addr;
   2ce76:	462b      	mov	r3, r5
   2ce78:	f853 0f07 	ldr.w	r0, [r3, #7]!
   2ce7c:	6030      	str	r0, [r6, #0]
   2ce7e:	889a      	ldrh	r2, [r3, #4]
   2ce80:	799b      	ldrb	r3, [r3, #6]
   2ce82:	80b2      	strh	r2, [r6, #4]
   2ce84:	71b3      	strb	r3, [r6, #6]
                    ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   2ce86:	79e8      	ldrb	r0, [r5, #7]
   2ce88:	f003 f905 	bl	30096 <ble_hs_misc_peer_addr_type_to_id>
                out_cccd->peer_addr.type =
   2ce8c:	7030      	strb	r0, [r6, #0]
                out_cccd->chr_val_handle = chr_val_handle;
   2ce8e:	8134      	strh	r4, [r6, #8]
                out_cccd->flags = clt_cfg->flags;
   2ce90:	f898 3002 	ldrb.w	r3, [r8, #2]
   2ce94:	8173      	strh	r3, [r6, #10]
                out_cccd->value_changed = 0;
   2ce96:	7b33      	ldrb	r3, [r6, #12]
   2ce98:	f36f 0300 	bfc	r3, #0, #1
   2ce9c:	7333      	strb	r3, [r6, #12]
   2ce9e:	e7b1      	b.n	2ce04 <ble_gatts_clt_cfg_access_locked+0x44>
        return BLE_ATT_ERR_UNLIKELY;
   2cea0:	270e      	movs	r7, #14
   2cea2:	e7af      	b.n	2ce04 <ble_gatts_clt_cfg_access_locked+0x44>
        return BLE_ATT_ERR_UNLIKELY;
   2cea4:	270e      	movs	r7, #14
   2cea6:	e7ad      	b.n	2ce04 <ble_gatts_clt_cfg_access_locked+0x44>
            return BLE_ATT_ERR_INSUFFICIENT_RES;
   2cea8:	2711      	movs	r7, #17
   2ceaa:	e7ab      	b.n	2ce04 <ble_gatts_clt_cfg_access_locked+0x44>
            return BLE_ATT_ERR_REQ_NOT_SUPPORTED;
   2ceac:	2706      	movs	r7, #6
   2ceae:	e7a9      	b.n	2ce04 <ble_gatts_clt_cfg_access_locked+0x44>
   2ceb0:	100051ec 	.word	0x100051ec

0002ceb4 <ble_gatts_subscribe_event>:
{
   2ceb4:	b530      	push	{r4, r5, lr}
   2ceb6:	b085      	sub	sp, #20
   2ceb8:	f89d 4020 	ldrb.w	r4, [sp, #32]
    if ((prev_flags ^ cur_flags) & ~BLE_GATTS_CLT_CFG_F_RESERVED) {
   2cebc:	ea83 0504 	eor.w	r5, r3, r4
   2cec0:	f035 05fc 	bics.w	r5, r5, #252	; 0xfc
   2cec4:	d101      	bne.n	2ceca <ble_gatts_subscribe_event+0x16>
}
   2cec6:	b005      	add	sp, #20
   2cec8:	bd30      	pop	{r4, r5, pc}
        ble_gap_subscribe_event(conn_handle,
   2ceca:	f004 0502 	and.w	r5, r4, #2
   2cece:	9502      	str	r5, [sp, #8]
   2ced0:	f003 0502 	and.w	r5, r3, #2
   2ced4:	9501      	str	r5, [sp, #4]
   2ced6:	f004 0401 	and.w	r4, r4, #1
   2ceda:	9400      	str	r4, [sp, #0]
   2cedc:	f003 0301 	and.w	r3, r3, #1
   2cee0:	f7fd fc19 	bl	2a716 <ble_gap_subscribe_event>
}
   2cee4:	e7ef      	b.n	2cec6 <ble_gatts_subscribe_event+0x12>

0002cee6 <ble_gatts_clt_cfg_access>:
{
   2cee6:	b5f0      	push	{r4, r5, r6, r7, lr}
   2cee8:	b08d      	sub	sp, #52	; 0x34
   2ceea:	4606      	mov	r6, r0
   2ceec:	460d      	mov	r5, r1
   2ceee:	4617      	mov	r7, r2
   2cef0:	461c      	mov	r4, r3
    ble_hs_lock();
   2cef2:	f001 f84d 	bl	2df90 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   2cef6:	4630      	mov	r0, r6
   2cef8:	f002 f8ce 	bl	2f098 <ble_hs_conn_find>
    if (conn == NULL) {
   2cefc:	b1b0      	cbz	r0, 2cf2c <ble_gatts_clt_cfg_access+0x46>
        rc = ble_gatts_clt_cfg_access_locked(conn, attr_handle, op, offset,
   2cefe:	f10d 0312 	add.w	r3, sp, #18
   2cf02:	9303      	str	r3, [sp, #12]
   2cf04:	f10d 0313 	add.w	r3, sp, #19
   2cf08:	9302      	str	r3, [sp, #8]
   2cf0a:	ab08      	add	r3, sp, #32
   2cf0c:	9301      	str	r3, [sp, #4]
   2cf0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2cf10:	681b      	ldr	r3, [r3, #0]
   2cf12:	9300      	str	r3, [sp, #0]
   2cf14:	4623      	mov	r3, r4
   2cf16:	463a      	mov	r2, r7
   2cf18:	4629      	mov	r1, r5
   2cf1a:	f7ff ff51 	bl	2cdc0 <ble_gatts_clt_cfg_access_locked>
   2cf1e:	4604      	mov	r4, r0
    ble_hs_unlock();
   2cf20:	f001 f83a 	bl	2df98 <ble_hs_unlock>
    if (rc != 0) {
   2cf24:	b134      	cbz	r4, 2cf34 <ble_gatts_clt_cfg_access+0x4e>
}
   2cf26:	4620      	mov	r0, r4
   2cf28:	b00d      	add	sp, #52	; 0x34
   2cf2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ble_hs_unlock();
   2cf2c:	f001 f834 	bl	2df98 <ble_hs_unlock>
        rc = BLE_ATT_ERR_UNLIKELY;
   2cf30:	240e      	movs	r4, #14
   2cf32:	e7f8      	b.n	2cf26 <ble_gatts_clt_cfg_access+0x40>
    chr_val_handle = attr_handle - 1;
   2cf34:	1e69      	subs	r1, r5, #1
    ble_gatts_subscribe_event(conn_handle, chr_val_handle,
   2cf36:	f89d 3012 	ldrb.w	r3, [sp, #18]
   2cf3a:	9300      	str	r3, [sp, #0]
   2cf3c:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2cf40:	2201      	movs	r2, #1
   2cf42:	b289      	uxth	r1, r1
   2cf44:	4630      	mov	r0, r6
   2cf46:	f7ff ffb5 	bl	2ceb4 <ble_gatts_subscribe_event>
    if (cccd_value.chr_val_handle != 0) {
   2cf4a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2cf4e:	2b00      	cmp	r3, #0
   2cf50:	d0e9      	beq.n	2cf26 <ble_gatts_clt_cfg_access+0x40>
        if (cccd_value.flags == 0) {
   2cf52:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   2cf56:	b943      	cbnz	r3, 2cf6a <ble_gatts_clt_cfg_access+0x84>
            ble_store_key_from_value_cccd(&cccd_key, &cccd_value);
   2cf58:	a908      	add	r1, sp, #32
   2cf5a:	a805      	add	r0, sp, #20
   2cf5c:	f004 f937 	bl	311ce <ble_store_key_from_value_cccd>
            rc = ble_store_delete_cccd(&cccd_key);
   2cf60:	a805      	add	r0, sp, #20
   2cf62:	f004 f92e 	bl	311c2 <ble_store_delete_cccd>
   2cf66:	4604      	mov	r4, r0
   2cf68:	e7dd      	b.n	2cf26 <ble_gatts_clt_cfg_access+0x40>
            rc = ble_store_write_cccd(&cccd_value);
   2cf6a:	a808      	add	r0, sp, #32
   2cf6c:	f004 f923 	bl	311b6 <ble_store_write_cccd>
   2cf70:	4604      	mov	r4, r0
   2cf72:	e7d8      	b.n	2cf26 <ble_gatts_clt_cfg_access+0x40>

0002cf74 <ble_gatts_register_inc>:
{
   2cf74:	b500      	push	{lr}
   2cf76:	b085      	sub	sp, #20
    rc = ble_att_svr_register(uuid_inc, BLE_ATT_F_READ, 0, &handle,
   2cf78:	9001      	str	r0, [sp, #4]
   2cf7a:	4b06      	ldr	r3, [pc, #24]	; (2cf94 <ble_gatts_register_inc+0x20>)
   2cf7c:	9300      	str	r3, [sp, #0]
   2cf7e:	f10d 030e 	add.w	r3, sp, #14
   2cf82:	2200      	movs	r2, #0
   2cf84:	2101      	movs	r1, #1
   2cf86:	4804      	ldr	r0, [pc, #16]	; (2cf98 <ble_gatts_register_inc+0x24>)
   2cf88:	f7fa fe4c 	bl	27c24 <ble_att_svr_register>
}
   2cf8c:	b005      	add	sp, #20
   2cf8e:	f85d fb04 	ldr.w	pc, [sp], #4
   2cf92:	bf00      	nop
   2cf94:	0002d30d 	.word	0x0002d30d
   2cf98:	100006e0 	.word	0x100006e0

0002cf9c <ble_gatts_register_clt_cfg_dsc>:
{
   2cf9c:	b500      	push	{lr}
   2cf9e:	b083      	sub	sp, #12
   2cfa0:	4603      	mov	r3, r0
    rc = ble_att_svr_register(uuid_ccc, BLE_ATT_F_READ | BLE_ATT_F_WRITE, 0,
   2cfa2:	2200      	movs	r2, #0
   2cfa4:	9201      	str	r2, [sp, #4]
   2cfa6:	4907      	ldr	r1, [pc, #28]	; (2cfc4 <ble_gatts_register_clt_cfg_dsc+0x28>)
   2cfa8:	9100      	str	r1, [sp, #0]
   2cfaa:	2103      	movs	r1, #3
   2cfac:	4806      	ldr	r0, [pc, #24]	; (2cfc8 <ble_gatts_register_clt_cfg_dsc+0x2c>)
   2cfae:	f7fa fe39 	bl	27c24 <ble_att_svr_register>
    if (rc != 0) {
   2cfb2:	b918      	cbnz	r0, 2cfbc <ble_gatts_register_clt_cfg_dsc+0x20>
    STATS_INC(ble_gatts_stats, dscs);
   2cfb4:	4a05      	ldr	r2, [pc, #20]	; (2cfcc <ble_gatts_register_clt_cfg_dsc+0x30>)
   2cfb6:	6953      	ldr	r3, [r2, #20]
   2cfb8:	3301      	adds	r3, #1
   2cfba:	6153      	str	r3, [r2, #20]
}
   2cfbc:	b003      	add	sp, #12
   2cfbe:	f85d fb04 	ldr.w	pc, [sp], #4
   2cfc2:	bf00      	nop
   2cfc4:	0002cee7 	.word	0x0002cee7
   2cfc8:	100006e8 	.word	0x100006e8
   2cfcc:	100051ec 	.word	0x100051ec

0002cfd0 <ble_gatts_register_dsc>:
{
   2cfd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2cfd2:	b089      	sub	sp, #36	; 0x24
   2cfd4:	4606      	mov	r6, r0
   2cfd6:	460d      	mov	r5, r1
   2cfd8:	4614      	mov	r4, r2
    if (!ble_gatts_dsc_is_sane(dsc)) {
   2cfda:	4610      	mov	r0, r2
   2cfdc:	f7ff fe12 	bl	2cc04 <ble_gatts_dsc_is_sane>
   2cfe0:	b310      	cbz	r0, 2d028 <ble_gatts_register_dsc+0x58>
    rc = ble_att_svr_register(dsc->uuid, dsc->att_flags, dsc->min_key_size,
   2cfe2:	9401      	str	r4, [sp, #4]
   2cfe4:	4b11      	ldr	r3, [pc, #68]	; (2d02c <ble_gatts_register_dsc+0x5c>)
   2cfe6:	9300      	str	r3, [sp, #0]
   2cfe8:	f10d 030a 	add.w	r3, sp, #10
   2cfec:	7962      	ldrb	r2, [r4, #5]
   2cfee:	7921      	ldrb	r1, [r4, #4]
   2cff0:	6820      	ldr	r0, [r4, #0]
   2cff2:	f7fa fe17 	bl	27c24 <ble_att_svr_register>
    if (rc != 0) {
   2cff6:	4607      	mov	r7, r0
   2cff8:	b998      	cbnz	r0, 2d022 <ble_gatts_register_dsc+0x52>
    if (register_cb != NULL) {
   2cffa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2cffc:	b16b      	cbz	r3, 2d01a <ble_gatts_register_dsc+0x4a>
        register_ctxt.op = BLE_GATT_REGISTER_OP_DSC;
   2cffe:	2303      	movs	r3, #3
   2d000:	f88d 300c 	strb.w	r3, [sp, #12]
        register_ctxt.dsc.handle = dsc_handle;
   2d004:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   2d008:	f8ad 3010 	strh.w	r3, [sp, #16]
        register_ctxt.dsc.svc_def = svc;
   2d00c:	9607      	str	r6, [sp, #28]
        register_ctxt.dsc.chr_def = chr;
   2d00e:	9506      	str	r5, [sp, #24]
        register_ctxt.dsc.dsc_def = dsc;
   2d010:	9405      	str	r4, [sp, #20]
        register_cb(&register_ctxt, cb_arg);
   2d012:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2d014:	a803      	add	r0, sp, #12
   2d016:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d018:	4798      	blx	r3
    STATS_INC(ble_gatts_stats, dscs);
   2d01a:	4a05      	ldr	r2, [pc, #20]	; (2d030 <ble_gatts_register_dsc+0x60>)
   2d01c:	6953      	ldr	r3, [r2, #20]
   2d01e:	3301      	adds	r3, #1
   2d020:	6153      	str	r3, [r2, #20]
}
   2d022:	4638      	mov	r0, r7
   2d024:	b009      	add	sp, #36	; 0x24
   2d026:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EINVAL;
   2d028:	2703      	movs	r7, #3
   2d02a:	e7fa      	b.n	2d022 <ble_gatts_register_dsc+0x52>
   2d02c:	0002d43f 	.word	0x0002d43f
   2d030:	100051ec 	.word	0x100051ec

0002d034 <ble_gatts_register_chr>:
{
   2d034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2d038:	b08b      	sub	sp, #44	; 0x2c
   2d03a:	4607      	mov	r7, r0
   2d03c:	460c      	mov	r4, r1
   2d03e:	4616      	mov	r6, r2
   2d040:	4698      	mov	r8, r3
    if (!ble_gatts_chr_is_sane(chr)) {
   2d042:	4608      	mov	r0, r1
   2d044:	f7ff fd6f 	bl	2cb26 <ble_gatts_chr_is_sane>
   2d048:	2800      	cmp	r0, #0
   2d04a:	d063      	beq.n	2d114 <ble_gatts_register_chr+0xe0>
    if (ble_gatts_chr_clt_cfg_allowed(chr) != 0) {
   2d04c:	4620      	mov	r0, r4
   2d04e:	f7ff fd09 	bl	2ca64 <ble_gatts_chr_clt_cfg_allowed>
   2d052:	b140      	cbz	r0, 2d066 <ble_gatts_register_chr+0x32>
        if (ble_gatts_num_cfgable_chrs > ble_hs_max_client_configs) {
   2d054:	4b33      	ldr	r3, [pc, #204]	; (2d124 <ble_gatts_register_chr+0xf0>)
   2d056:	881a      	ldrh	r2, [r3, #0]
   2d058:	4b33      	ldr	r3, [pc, #204]	; (2d128 <ble_gatts_register_chr+0xf4>)
   2d05a:	681b      	ldr	r3, [r3, #0]
   2d05c:	429a      	cmp	r2, r3
   2d05e:	db5c      	blt.n	2d11a <ble_gatts_register_chr+0xe6>
        ble_gatts_num_cfgable_chrs++;
   2d060:	3301      	adds	r3, #1
   2d062:	4a31      	ldr	r2, [pc, #196]	; (2d128 <ble_gatts_register_chr+0xf4>)
   2d064:	6013      	str	r3, [r2, #0]
    rc = ble_att_svr_register(uuid_chr, BLE_ATT_F_READ, 0, &def_handle,
   2d066:	9401      	str	r4, [sp, #4]
   2d068:	4b30      	ldr	r3, [pc, #192]	; (2d12c <ble_gatts_register_chr+0xf8>)
   2d06a:	9300      	str	r3, [sp, #0]
   2d06c:	f10d 0312 	add.w	r3, sp, #18
   2d070:	2200      	movs	r2, #0
   2d072:	2101      	movs	r1, #1
   2d074:	482e      	ldr	r0, [pc, #184]	; (2d130 <ble_gatts_register_chr+0xfc>)
   2d076:	f7fa fdd5 	bl	27c24 <ble_att_svr_register>
    if (rc != 0) {
   2d07a:	4681      	mov	r9, r0
   2d07c:	b118      	cbz	r0, 2d086 <ble_gatts_register_chr+0x52>
}
   2d07e:	4648      	mov	r0, r9
   2d080:	b00b      	add	sp, #44	; 0x2c
   2d082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    att_flags = ble_gatts_att_flags_from_chr_flags(chr->flags);
   2d086:	8a20      	ldrh	r0, [r4, #16]
   2d088:	f7ff fcf7 	bl	2ca7a <ble_gatts_att_flags_from_chr_flags>
   2d08c:	4601      	mov	r1, r0
    rc = ble_att_svr_register(chr->uuid, att_flags, chr->min_key_size,
   2d08e:	9401      	str	r4, [sp, #4]
   2d090:	4b28      	ldr	r3, [pc, #160]	; (2d134 <ble_gatts_register_chr+0x100>)
   2d092:	9300      	str	r3, [sp, #0]
   2d094:	ab04      	add	r3, sp, #16
   2d096:	7ca2      	ldrb	r2, [r4, #18]
   2d098:	6820      	ldr	r0, [r4, #0]
   2d09a:	f7fa fdc3 	bl	27c24 <ble_att_svr_register>
    if (rc != 0) {
   2d09e:	4681      	mov	r9, r0
   2d0a0:	2800      	cmp	r0, #0
   2d0a2:	d1ec      	bne.n	2d07e <ble_gatts_register_chr+0x4a>
    if (chr->val_handle != NULL) {
   2d0a4:	6963      	ldr	r3, [r4, #20]
   2d0a6:	b113      	cbz	r3, 2d0ae <ble_gatts_register_chr+0x7a>
        *chr->val_handle = val_handle;
   2d0a8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   2d0ac:	801a      	strh	r2, [r3, #0]
    if (register_cb != NULL) {
   2d0ae:	b17e      	cbz	r6, 2d0d0 <ble_gatts_register_chr+0x9c>
        register_ctxt.op = BLE_GATT_REGISTER_OP_CHR;
   2d0b0:	2302      	movs	r3, #2
   2d0b2:	f88d 3014 	strb.w	r3, [sp, #20]
        register_ctxt.chr.def_handle = def_handle;
   2d0b6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   2d0ba:	f8ad 3018 	strh.w	r3, [sp, #24]
        register_ctxt.chr.val_handle = val_handle;
   2d0be:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2d0c2:	f8ad 301a 	strh.w	r3, [sp, #26]
        register_ctxt.chr.svc_def = svc;
   2d0c6:	9708      	str	r7, [sp, #32]
        register_ctxt.chr.chr_def = chr;
   2d0c8:	9407      	str	r4, [sp, #28]
        register_cb(&register_ctxt, cb_arg);
   2d0ca:	4641      	mov	r1, r8
   2d0cc:	a805      	add	r0, sp, #20
   2d0ce:	47b0      	blx	r6
    if (ble_gatts_chr_clt_cfg_allowed(chr) != 0) {
   2d0d0:	4620      	mov	r0, r4
   2d0d2:	f7ff fcc7 	bl	2ca64 <ble_gatts_chr_clt_cfg_allowed>
   2d0d6:	b980      	cbnz	r0, 2d0fa <ble_gatts_register_chr+0xc6>
    if (chr->descriptors != NULL) {
   2d0d8:	68e5      	ldr	r5, [r4, #12]
   2d0da:	b1b5      	cbz	r5, 2d10a <ble_gatts_register_chr+0xd6>
        for (dsc = chr->descriptors; dsc->uuid != NULL; dsc++) {
   2d0dc:	682b      	ldr	r3, [r5, #0]
   2d0de:	b1a3      	cbz	r3, 2d10a <ble_gatts_register_chr+0xd6>
            rc = ble_gatts_register_dsc(svc, chr, dsc, def_handle, register_cb,
   2d0e0:	f8cd 8004 	str.w	r8, [sp, #4]
   2d0e4:	9600      	str	r6, [sp, #0]
   2d0e6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   2d0ea:	462a      	mov	r2, r5
   2d0ec:	4621      	mov	r1, r4
   2d0ee:	4638      	mov	r0, r7
   2d0f0:	f7ff ff6e 	bl	2cfd0 <ble_gatts_register_dsc>
            if (rc != 0) {
   2d0f4:	b9a0      	cbnz	r0, 2d120 <ble_gatts_register_chr+0xec>
        for (dsc = chr->descriptors; dsc->uuid != NULL; dsc++) {
   2d0f6:	3510      	adds	r5, #16
   2d0f8:	e7f0      	b.n	2d0dc <ble_gatts_register_chr+0xa8>
        rc = ble_gatts_register_clt_cfg_dsc(&dsc_handle);
   2d0fa:	f10d 000e 	add.w	r0, sp, #14
   2d0fe:	f7ff ff4d 	bl	2cf9c <ble_gatts_register_clt_cfg_dsc>
        if (rc != 0) {
   2d102:	2800      	cmp	r0, #0
   2d104:	d0e8      	beq.n	2d0d8 <ble_gatts_register_chr+0xa4>
            return rc;
   2d106:	4681      	mov	r9, r0
   2d108:	e7b9      	b.n	2d07e <ble_gatts_register_chr+0x4a>
    STATS_INC(ble_gatts_stats, chrs);
   2d10a:	4a0b      	ldr	r2, [pc, #44]	; (2d138 <ble_gatts_register_chr+0x104>)
   2d10c:	6913      	ldr	r3, [r2, #16]
   2d10e:	3301      	adds	r3, #1
   2d110:	6113      	str	r3, [r2, #16]
    return 0;
   2d112:	e7b4      	b.n	2d07e <ble_gatts_register_chr+0x4a>
        return BLE_HS_EINVAL;
   2d114:	f04f 0903 	mov.w	r9, #3
   2d118:	e7b1      	b.n	2d07e <ble_gatts_register_chr+0x4a>
            return BLE_HS_ENOMEM;
   2d11a:	f04f 0906 	mov.w	r9, #6
   2d11e:	e7ae      	b.n	2d07e <ble_gatts_register_chr+0x4a>
                return rc;
   2d120:	4681      	mov	r9, r0
   2d122:	e7ac      	b.n	2d07e <ble_gatts_register_chr+0x4a>
   2d124:	1000532e 	.word	0x1000532e
   2d128:	100051e0 	.word	0x100051e0
   2d12c:	0002d2b1 	.word	0x0002d2b1
   2d130:	100006e4 	.word	0x100006e4
   2d134:	0002d407 	.word	0x0002d407
   2d138:	100051ec 	.word	0x100051ec

0002d13c <ble_gatts_register_svc>:
{
   2d13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d140:	b088      	sub	sp, #32
   2d142:	4604      	mov	r4, r0
   2d144:	460d      	mov	r5, r1
   2d146:	4616      	mov	r6, r2
   2d148:	461f      	mov	r7, r3
    if (!ble_gatts_svc_incs_satisfied(svc)) {
   2d14a:	f7ff fd23 	bl	2cb94 <ble_gatts_svc_incs_satisfied>
   2d14e:	2800      	cmp	r0, #0
   2d150:	d046      	beq.n	2d1e0 <ble_gatts_register_svc+0xa4>
    if (!ble_gatts_svc_is_sane(svc)) {
   2d152:	4620      	mov	r0, r4
   2d154:	f7ff fd90 	bl	2cc78 <ble_gatts_svc_is_sane>
   2d158:	2800      	cmp	r0, #0
   2d15a:	d047      	beq.n	2d1ec <ble_gatts_register_svc+0xb0>
    uuid = NULL;
   2d15c:	f04f 0800 	mov.w	r8, #0
   2d160:	f8cd 8008 	str.w	r8, [sp, #8]
    rc = ble_gatts_svc_type_to_uuid(svc->type, &uuid);
   2d164:	a902      	add	r1, sp, #8
   2d166:	7820      	ldrb	r0, [r4, #0]
   2d168:	f7ff fd74 	bl	2cc54 <ble_gatts_svc_type_to_uuid>
    rc = ble_att_svr_register(uuid, BLE_ATT_F_READ, 0, out_handle,
   2d16c:	9401      	str	r4, [sp, #4]
   2d16e:	4b23      	ldr	r3, [pc, #140]	; (2d1fc <ble_gatts_register_svc+0xc0>)
   2d170:	9300      	str	r3, [sp, #0]
   2d172:	462b      	mov	r3, r5
   2d174:	4642      	mov	r2, r8
   2d176:	2101      	movs	r1, #1
   2d178:	9802      	ldr	r0, [sp, #8]
   2d17a:	f7fa fd53 	bl	27c24 <ble_att_svr_register>
    if (rc != 0) {
   2d17e:	4680      	mov	r8, r0
   2d180:	bb80      	cbnz	r0, 2d1e4 <ble_gatts_register_svc+0xa8>
    if (register_cb != NULL) {
   2d182:	b14e      	cbz	r6, 2d198 <ble_gatts_register_svc+0x5c>
        register_ctxt.op = BLE_GATT_REGISTER_OP_SVC;
   2d184:	2301      	movs	r3, #1
   2d186:	f88d 300c 	strb.w	r3, [sp, #12]
        register_ctxt.svc.handle = *out_handle;
   2d18a:	882b      	ldrh	r3, [r5, #0]
   2d18c:	f8ad 3010 	strh.w	r3, [sp, #16]
        register_ctxt.svc.svc_def = svc;
   2d190:	9405      	str	r4, [sp, #20]
        register_cb(&register_ctxt, cb_arg);
   2d192:	4639      	mov	r1, r7
   2d194:	a803      	add	r0, sp, #12
   2d196:	47b0      	blx	r6
    if (svc->includes != NULL) {
   2d198:	68a3      	ldr	r3, [r4, #8]
   2d19a:	b17b      	cbz	r3, 2d1bc <ble_gatts_register_svc+0x80>
        for (i = 0; svc->includes[i] != NULL; i++) {
   2d19c:	4645      	mov	r5, r8
   2d19e:	68a3      	ldr	r3, [r4, #8]
   2d1a0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   2d1a4:	b150      	cbz	r0, 2d1bc <ble_gatts_register_svc+0x80>
            idx = ble_gatts_find_svc_entry_idx(svc->includes[i]);
   2d1a6:	f7ff fcdf 	bl	2cb68 <ble_gatts_find_svc_entry_idx>
            rc = ble_gatts_register_inc(ble_gatts_svc_entries + idx);
   2d1aa:	4b15      	ldr	r3, [pc, #84]	; (2d200 <ble_gatts_register_svc+0xc4>)
   2d1ac:	681b      	ldr	r3, [r3, #0]
   2d1ae:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2d1b2:	f7ff fedf 	bl	2cf74 <ble_gatts_register_inc>
            if (rc != 0) {
   2d1b6:	b9e0      	cbnz	r0, 2d1f2 <ble_gatts_register_svc+0xb6>
        for (i = 0; svc->includes[i] != NULL; i++) {
   2d1b8:	3501      	adds	r5, #1
   2d1ba:	e7f0      	b.n	2d19e <ble_gatts_register_svc+0x62>
    if (svc->characteristics != NULL) {
   2d1bc:	68e5      	ldr	r5, [r4, #12]
   2d1be:	b155      	cbz	r5, 2d1d6 <ble_gatts_register_svc+0x9a>
        for (chr = svc->characteristics; chr->uuid != NULL; chr++) {
   2d1c0:	682b      	ldr	r3, [r5, #0]
   2d1c2:	b143      	cbz	r3, 2d1d6 <ble_gatts_register_svc+0x9a>
            rc = ble_gatts_register_chr(svc, chr, register_cb, cb_arg);
   2d1c4:	463b      	mov	r3, r7
   2d1c6:	4632      	mov	r2, r6
   2d1c8:	4629      	mov	r1, r5
   2d1ca:	4620      	mov	r0, r4
   2d1cc:	f7ff ff32 	bl	2d034 <ble_gatts_register_chr>
            if (rc != 0) {
   2d1d0:	b988      	cbnz	r0, 2d1f6 <ble_gatts_register_svc+0xba>
        for (chr = svc->characteristics; chr->uuid != NULL; chr++) {
   2d1d2:	3518      	adds	r5, #24
   2d1d4:	e7f4      	b.n	2d1c0 <ble_gatts_register_svc+0x84>
    STATS_INC(ble_gatts_stats, svcs);
   2d1d6:	4a0b      	ldr	r2, [pc, #44]	; (2d204 <ble_gatts_register_svc+0xc8>)
   2d1d8:	68d3      	ldr	r3, [r2, #12]
   2d1da:	3301      	adds	r3, #1
   2d1dc:	60d3      	str	r3, [r2, #12]
    return 0;
   2d1de:	e001      	b.n	2d1e4 <ble_gatts_register_svc+0xa8>
        return BLE_HS_EAGAIN;
   2d1e0:	f04f 0801 	mov.w	r8, #1
}
   2d1e4:	4640      	mov	r0, r8
   2d1e6:	b008      	add	sp, #32
   2d1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_EINVAL;
   2d1ec:	f04f 0803 	mov.w	r8, #3
   2d1f0:	e7f8      	b.n	2d1e4 <ble_gatts_register_svc+0xa8>
                return rc;
   2d1f2:	4680      	mov	r8, r0
   2d1f4:	e7f6      	b.n	2d1e4 <ble_gatts_register_svc+0xa8>
                return rc;
   2d1f6:	4680      	mov	r8, r0
   2d1f8:	e7f4      	b.n	2d1e4 <ble_gatts_register_svc+0xa8>
   2d1fa:	bf00      	nop
   2d1fc:	0002d27d 	.word	0x0002d27d
   2d200:	10005224 	.word	0x10005224
   2d204:	100051ec 	.word	0x100051ec

0002d208 <ble_gatts_register_round>:
{
   2d208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2d20c:	b083      	sub	sp, #12
   2d20e:	4607      	mov	r7, r0
   2d210:	4689      	mov	r9, r1
   2d212:	4690      	mov	r8, r2
    *out_num_registered = 0;
   2d214:	2400      	movs	r4, #0
   2d216:	6004      	str	r4, [r0, #0]
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   2d218:	e009      	b.n	2d22e <ble_gatts_register_round+0x26>
                entry->handle = handle;
   2d21a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2d21e:	80b3      	strh	r3, [r6, #4]
                entry->end_group_handle = ble_att_svr_prev_handle();
   2d220:	f7fa fd28 	bl	27c74 <ble_att_svr_prev_handle>
   2d224:	80f0      	strh	r0, [r6, #6]
                (*out_num_registered)++;
   2d226:	683b      	ldr	r3, [r7, #0]
   2d228:	3301      	adds	r3, #1
   2d22a:	603b      	str	r3, [r7, #0]
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   2d22c:	3401      	adds	r4, #1
   2d22e:	4b11      	ldr	r3, [pc, #68]	; (2d274 <ble_gatts_register_round+0x6c>)
   2d230:	881b      	ldrh	r3, [r3, #0]
   2d232:	42a3      	cmp	r3, r4
   2d234:	dd17      	ble.n	2d266 <ble_gatts_register_round+0x5e>
        entry = ble_gatts_svc_entries + i;
   2d236:	4b10      	ldr	r3, [pc, #64]	; (2d278 <ble_gatts_register_round+0x70>)
   2d238:	681d      	ldr	r5, [r3, #0]
   2d23a:	eb05 06c4 	add.w	r6, r5, r4, lsl #3
        if (entry->handle == 0) {
   2d23e:	88b3      	ldrh	r3, [r6, #4]
   2d240:	2b00      	cmp	r3, #0
   2d242:	d1f3      	bne.n	2d22c <ble_gatts_register_round+0x24>
            rc = ble_gatts_register_svc(entry->svc, &handle, cb, cb_arg);
   2d244:	4643      	mov	r3, r8
   2d246:	464a      	mov	r2, r9
   2d248:	f10d 0106 	add.w	r1, sp, #6
   2d24c:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   2d250:	f7ff ff74 	bl	2d13c <ble_gatts_register_svc>
            switch (rc) {
   2d254:	4603      	mov	r3, r0
   2d256:	2800      	cmp	r0, #0
   2d258:	d0df      	beq.n	2d21a <ble_gatts_register_round+0x12>
   2d25a:	2801      	cmp	r0, #1
   2d25c:	d0e6      	beq.n	2d22c <ble_gatts_register_round+0x24>
}
   2d25e:	4618      	mov	r0, r3
   2d260:	b003      	add	sp, #12
   2d262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (*out_num_registered == 0) {
   2d266:	683b      	ldr	r3, [r7, #0]
   2d268:	b10b      	cbz	r3, 2d26e <ble_gatts_register_round+0x66>
    return 0;
   2d26a:	2300      	movs	r3, #0
   2d26c:	e7f7      	b.n	2d25e <ble_gatts_register_round+0x56>
        return BLE_HS_EINVAL;
   2d26e:	2303      	movs	r3, #3
   2d270:	e7f5      	b.n	2d25e <ble_gatts_register_round+0x56>
   2d272:	bf00      	nop
   2d274:	100051e8 	.word	0x100051e8
   2d278:	10005224 	.word	0x10005224

0002d27c <ble_gatts_svc_access>:
{
   2d27c:	b538      	push	{r3, r4, r5, lr}
   2d27e:	9c05      	ldr	r4, [sp, #20]
    STATS_INC(ble_gatts_stats, svc_def_reads);
   2d280:	4a0a      	ldr	r2, [pc, #40]	; (2d2ac <ble_gatts_svc_access+0x30>)
   2d282:	6993      	ldr	r3, [r2, #24]
   2d284:	3301      	adds	r3, #1
   2d286:	6193      	str	r3, [r2, #24]
    buf = os_mbuf_extend(*om, ble_uuid_length(svc->uuid));
   2d288:	9b04      	ldr	r3, [sp, #16]
   2d28a:	681d      	ldr	r5, [r3, #0]
   2d28c:	6860      	ldr	r0, [r4, #4]
   2d28e:	f004 f97d 	bl	3158c <ble_uuid_length>
   2d292:	b281      	uxth	r1, r0
   2d294:	4628      	mov	r0, r5
   2d296:	f7ec fc1d 	bl	19ad4 <os_mbuf_extend>
    if (buf == NULL) {
   2d29a:	b128      	cbz	r0, 2d2a8 <ble_gatts_svc_access+0x2c>
   2d29c:	4601      	mov	r1, r0
    ble_uuid_flat(svc->uuid, buf);
   2d29e:	6860      	ldr	r0, [r4, #4]
   2d2a0:	f004 f948 	bl	31534 <ble_uuid_flat>
    return 0;
   2d2a4:	2000      	movs	r0, #0
}
   2d2a6:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   2d2a8:	2011      	movs	r0, #17
   2d2aa:	e7fc      	b.n	2d2a6 <ble_gatts_svc_access+0x2a>
   2d2ac:	100051ec 	.word	0x100051ec

0002d2b0 <ble_gatts_chr_def_access>:
{
   2d2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d2b2:	460c      	mov	r4, r1
   2d2b4:	9f06      	ldr	r7, [sp, #24]
   2d2b6:	9e07      	ldr	r6, [sp, #28]
    STATS_INC(ble_gatts_stats, chr_def_reads);
   2d2b8:	4a13      	ldr	r2, [pc, #76]	; (2d308 <ble_gatts_chr_def_access+0x58>)
   2d2ba:	6a13      	ldr	r3, [r2, #32]
   2d2bc:	3301      	adds	r3, #1
   2d2be:	6213      	str	r3, [r2, #32]
    buf = os_mbuf_extend(*om, 3);
   2d2c0:	2103      	movs	r1, #3
   2d2c2:	6838      	ldr	r0, [r7, #0]
   2d2c4:	f7ec fc06 	bl	19ad4 <os_mbuf_extend>
    if (buf == NULL) {
   2d2c8:	b1d0      	cbz	r0, 2d300 <ble_gatts_chr_def_access+0x50>
   2d2ca:	4605      	mov	r5, r0
    buf[0] = ble_gatts_chr_properties(chr);
   2d2cc:	4630      	mov	r0, r6
   2d2ce:	f7ff fbff 	bl	2cad0 <ble_gatts_chr_properties>
   2d2d2:	4603      	mov	r3, r0
   2d2d4:	4628      	mov	r0, r5
   2d2d6:	f800 3b01 	strb.w	r3, [r0], #1
    put_le16(buf + 1, attr_handle + 1);
   2d2da:	1c61      	adds	r1, r4, #1
   2d2dc:	b289      	uxth	r1, r1
   2d2de:	f7eb fd95 	bl	18e0c <put_le16>
    buf = os_mbuf_extend(*om, ble_uuid_length(chr->uuid));
   2d2e2:	683c      	ldr	r4, [r7, #0]
   2d2e4:	6830      	ldr	r0, [r6, #0]
   2d2e6:	f004 f951 	bl	3158c <ble_uuid_length>
   2d2ea:	b281      	uxth	r1, r0
   2d2ec:	4620      	mov	r0, r4
   2d2ee:	f7ec fbf1 	bl	19ad4 <os_mbuf_extend>
    if (buf == NULL) {
   2d2f2:	4601      	mov	r1, r0
   2d2f4:	b130      	cbz	r0, 2d304 <ble_gatts_chr_def_access+0x54>
    ble_uuid_flat(chr->uuid, buf);
   2d2f6:	6830      	ldr	r0, [r6, #0]
   2d2f8:	f004 f91c 	bl	31534 <ble_uuid_flat>
    return 0;
   2d2fc:	2000      	movs	r0, #0
}
   2d2fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   2d300:	2011      	movs	r0, #17
   2d302:	e7fc      	b.n	2d2fe <ble_gatts_chr_def_access+0x4e>
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   2d304:	2011      	movs	r0, #17
   2d306:	e7fa      	b.n	2d2fe <ble_gatts_chr_def_access+0x4e>
   2d308:	100051ec 	.word	0x100051ec

0002d30c <ble_gatts_inc_access>:
{
   2d30c:	b570      	push	{r4, r5, r6, lr}
   2d30e:	9e04      	ldr	r6, [sp, #16]
   2d310:	9c05      	ldr	r4, [sp, #20]
    STATS_INC(ble_gatts_stats, svc_inc_reads);
   2d312:	4a13      	ldr	r2, [pc, #76]	; (2d360 <ble_gatts_inc_access+0x54>)
   2d314:	69d3      	ldr	r3, [r2, #28]
   2d316:	3301      	adds	r3, #1
   2d318:	61d3      	str	r3, [r2, #28]
    buf = os_mbuf_extend(*om, 4);
   2d31a:	2104      	movs	r1, #4
   2d31c:	6830      	ldr	r0, [r6, #0]
   2d31e:	f7ec fbd9 	bl	19ad4 <os_mbuf_extend>
    if (buf == NULL) {
   2d322:	b1c8      	cbz	r0, 2d358 <ble_gatts_inc_access+0x4c>
   2d324:	4605      	mov	r5, r0
    put_le16(buf + 0, entry->handle);
   2d326:	88a1      	ldrh	r1, [r4, #4]
   2d328:	f7eb fd70 	bl	18e0c <put_le16>
    put_le16(buf + 2, entry->end_group_handle);
   2d32c:	88e1      	ldrh	r1, [r4, #6]
   2d32e:	1ca8      	adds	r0, r5, #2
   2d330:	f7eb fd6c 	bl	18e0c <put_le16>
    uuid16 = ble_uuid_u16(entry->svc->uuid);
   2d334:	6823      	ldr	r3, [r4, #0]
   2d336:	6858      	ldr	r0, [r3, #4]
   2d338:	f004 f8a0 	bl	3147c <ble_uuid_u16>
    if (uuid16 != 0) {
   2d33c:	4604      	mov	r4, r0
   2d33e:	b908      	cbnz	r0, 2d344 <ble_gatts_inc_access+0x38>
    return 0;
   2d340:	2000      	movs	r0, #0
}
   2d342:	bd70      	pop	{r4, r5, r6, pc}
        buf = os_mbuf_extend(*om, 2);
   2d344:	2102      	movs	r1, #2
   2d346:	6830      	ldr	r0, [r6, #0]
   2d348:	f7ec fbc4 	bl	19ad4 <os_mbuf_extend>
        if (buf == NULL) {
   2d34c:	b130      	cbz	r0, 2d35c <ble_gatts_inc_access+0x50>
        put_le16(buf, uuid16);
   2d34e:	4621      	mov	r1, r4
   2d350:	f7eb fd5c 	bl	18e0c <put_le16>
    return 0;
   2d354:	2000      	movs	r0, #0
   2d356:	e7f4      	b.n	2d342 <ble_gatts_inc_access+0x36>
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   2d358:	2011      	movs	r0, #17
   2d35a:	e7f2      	b.n	2d342 <ble_gatts_inc_access+0x36>
            return BLE_ATT_ERR_INSUFFICIENT_RES;
   2d35c:	2011      	movs	r0, #17
   2d35e:	e7f0      	b.n	2d342 <ble_gatts_inc_access+0x36>
   2d360:	100051ec 	.word	0x100051ec

0002d364 <ble_gatts_val_access>:
{
   2d364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d368:	4607      	mov	r7, r0
   2d36a:	460d      	mov	r5, r1
   2d36c:	4616      	mov	r6, r2
   2d36e:	461c      	mov	r4, r3
   2d370:	f8dd 8020 	ldr.w	r8, [sp, #32]
    switch (gatt_ctxt->op) {
   2d374:	781b      	ldrb	r3, [r3, #0]
   2d376:	2b03      	cmp	r3, #3
   2d378:	d841      	bhi.n	2d3fe <ble_gatts_val_access+0x9a>
   2d37a:	e8df f003 	tbb	[pc, r3]
   2d37e:	3202      	.short	0x3202
   2d380:	3202      	.short	0x3202
        if (offset == 0) {
   2d382:	b9fe      	cbnz	r6, 2d3c4 <ble_gatts_val_access+0x60>
            gatt_ctxt->om = *om;
   2d384:	f8d8 3000 	ldr.w	r3, [r8]
   2d388:	6063      	str	r3, [r4, #4]
            new_om = 0;
   2d38a:	f04f 0900 	mov.w	r9, #0
        initial_len = OS_MBUF_PKTLEN(gatt_ctxt->om);
   2d38e:	6863      	ldr	r3, [r4, #4]
   2d390:	f8b3 a010 	ldrh.w	sl, [r3, #16]
        rc = access_cb(conn_handle, attr_handle, gatt_ctxt, cb_arg);
   2d394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d396:	4622      	mov	r2, r4
   2d398:	4629      	mov	r1, r5
   2d39a:	4638      	mov	r0, r7
   2d39c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   2d39e:	47a8      	blx	r5
        if (rc == 0) {
   2d3a0:	4605      	mov	r5, r0
   2d3a2:	b9b8      	cbnz	r0, 2d3d4 <ble_gatts_val_access+0x70>
            attr_len = OS_MBUF_PKTLEN(gatt_ctxt->om) - initial_len - offset;
   2d3a4:	6861      	ldr	r1, [r4, #4]
   2d3a6:	8a0b      	ldrh	r3, [r1, #16]
   2d3a8:	eba3 030a 	sub.w	r3, r3, sl
            if (attr_len >= 0) {
   2d3ac:	1b9b      	subs	r3, r3, r6
   2d3ae:	d410      	bmi.n	2d3d2 <ble_gatts_val_access+0x6e>
                if (new_om) {
   2d3b0:	f1b9 0f00 	cmp.w	r9, #0
   2d3b4:	d00e      	beq.n	2d3d4 <ble_gatts_val_access+0x70>
                    os_mbuf_appendfrom(*om, gatt_ctxt->om, offset, attr_len);
   2d3b6:	b29b      	uxth	r3, r3
   2d3b8:	4632      	mov	r2, r6
   2d3ba:	f8d8 0000 	ldr.w	r0, [r8]
   2d3be:	f7ec f97b 	bl	196b8 <os_mbuf_appendfrom>
   2d3c2:	e007      	b.n	2d3d4 <ble_gatts_val_access+0x70>
            gatt_ctxt->om = ble_hs_mbuf_att_pkt();
   2d3c4:	f002 fddc 	bl	2ff80 <ble_hs_mbuf_att_pkt>
   2d3c8:	6060      	str	r0, [r4, #4]
            if (gatt_ctxt->om == NULL) {
   2d3ca:	b1d0      	cbz	r0, 2d402 <ble_gatts_val_access+0x9e>
            new_om = 1;
   2d3cc:	f04f 0901 	mov.w	r9, #1
   2d3d0:	e7dd      	b.n	2d38e <ble_gatts_val_access+0x2a>
                rc = BLE_ATT_ERR_INVALID_OFFSET;
   2d3d2:	2507      	movs	r5, #7
        if (new_om) {
   2d3d4:	f1b9 0f00 	cmp.w	r9, #0
   2d3d8:	d00e      	beq.n	2d3f8 <ble_gatts_val_access+0x94>
            os_mbuf_free_chain(gatt_ctxt->om);
   2d3da:	6860      	ldr	r0, [r4, #4]
   2d3dc:	f7ec f8f7 	bl	195ce <os_mbuf_free_chain>
   2d3e0:	e00a      	b.n	2d3f8 <ble_gatts_val_access+0x94>
        gatt_ctxt->om = *om;
   2d3e2:	f8d8 3000 	ldr.w	r3, [r8]
   2d3e6:	6063      	str	r3, [r4, #4]
        rc = access_cb(conn_handle, attr_handle, gatt_ctxt, cb_arg);
   2d3e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d3ea:	4622      	mov	r2, r4
   2d3ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
   2d3ee:	47a8      	blx	r5
   2d3f0:	4605      	mov	r5, r0
        *om = gatt_ctxt->om;
   2d3f2:	6863      	ldr	r3, [r4, #4]
   2d3f4:	f8c8 3000 	str.w	r3, [r8]
}
   2d3f8:	4628      	mov	r0, r5
   2d3fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (gatt_ctxt->op) {
   2d3fe:	250e      	movs	r5, #14
   2d400:	e7fa      	b.n	2d3f8 <ble_gatts_val_access+0x94>
                return BLE_ATT_ERR_INSUFFICIENT_RES;
   2d402:	2511      	movs	r5, #17
   2d404:	e7f8      	b.n	2d3f8 <ble_gatts_val_access+0x94>

0002d406 <ble_gatts_chr_val_access>:
{
   2d406:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d408:	b089      	sub	sp, #36	; 0x24
   2d40a:	4604      	mov	r4, r0
   2d40c:	460d      	mov	r5, r1
   2d40e:	461e      	mov	r6, r3
   2d410:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    gatt_ctxt.op = ble_gatts_chr_op(att_op);
   2d412:	4610      	mov	r0, r2
   2d414:	f7ff fb91 	bl	2cb3a <ble_gatts_chr_op>
   2d418:	f88d 0014 	strb.w	r0, [sp, #20]
    gatt_ctxt.chr = chr_def;
   2d41c:	9707      	str	r7, [sp, #28]
    ble_gatts_chr_inc_val_stat(gatt_ctxt.op);
   2d41e:	f7ff fb93 	bl	2cb48 <ble_gatts_chr_inc_val_stat>
    rc = ble_gatts_val_access(conn_handle, attr_handle, offset, &gatt_ctxt, om,
   2d422:	68bb      	ldr	r3, [r7, #8]
   2d424:	9302      	str	r3, [sp, #8]
   2d426:	687b      	ldr	r3, [r7, #4]
   2d428:	9301      	str	r3, [sp, #4]
   2d42a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d42c:	9300      	str	r3, [sp, #0]
   2d42e:	ab05      	add	r3, sp, #20
   2d430:	4632      	mov	r2, r6
   2d432:	4629      	mov	r1, r5
   2d434:	4620      	mov	r0, r4
   2d436:	f7ff ff95 	bl	2d364 <ble_gatts_val_access>
}
   2d43a:	b009      	add	sp, #36	; 0x24
   2d43c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002d43e <ble_gatts_dsc_access>:
{
   2d43e:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d440:	b089      	sub	sp, #36	; 0x24
   2d442:	4604      	mov	r4, r0
   2d444:	460d      	mov	r5, r1
   2d446:	461e      	mov	r6, r3
   2d448:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    gatt_ctxt.op = ble_gatts_dsc_op(att_op);
   2d44a:	4610      	mov	r0, r2
   2d44c:	f7ff fbc2 	bl	2cbd4 <ble_gatts_dsc_op>
   2d450:	f88d 0014 	strb.w	r0, [sp, #20]
    gatt_ctxt.dsc = dsc_def;
   2d454:	9707      	str	r7, [sp, #28]
    ble_gatts_dsc_inc_stat(gatt_ctxt.op);
   2d456:	f7ff fbc3 	bl	2cbe0 <ble_gatts_dsc_inc_stat>
    rc = ble_gatts_val_access(conn_handle, attr_handle, offset, &gatt_ctxt, om,
   2d45a:	68fb      	ldr	r3, [r7, #12]
   2d45c:	9302      	str	r3, [sp, #8]
   2d45e:	68bb      	ldr	r3, [r7, #8]
   2d460:	9301      	str	r3, [sp, #4]
   2d462:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d464:	9300      	str	r3, [sp, #0]
   2d466:	ab05      	add	r3, sp, #20
   2d468:	4632      	mov	r2, r6
   2d46a:	4629      	mov	r1, r5
   2d46c:	4620      	mov	r0, r4
   2d46e:	f7ff ff79 	bl	2d364 <ble_gatts_val_access>
}
   2d472:	b009      	add	sp, #36	; 0x24
   2d474:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002d476 <ble_gatts_mutable>:
{
   2d476:	b508      	push	{r3, lr}
    if (ble_gap_adv_active() ||
   2d478:	f7fc fba6 	bl	29bc8 <ble_gap_adv_active>
   2d47c:	b108      	cbz	r0, 2d482 <ble_gatts_mutable+0xc>
        return false;
   2d47e:	2000      	movs	r0, #0
}
   2d480:	bd08      	pop	{r3, pc}
        ble_gap_disc_active() ||
   2d482:	f7fc fcb1 	bl	29de8 <ble_gap_disc_active>
    if (ble_gap_adv_active() ||
   2d486:	2800      	cmp	r0, #0
   2d488:	d1f9      	bne.n	2d47e <ble_gatts_mutable+0x8>
        ble_gap_conn_active()) {
   2d48a:	f7fc fcdd 	bl	29e48 <ble_gap_conn_active>
        ble_gap_disc_active() ||
   2d48e:	2800      	cmp	r0, #0
   2d490:	d1f5      	bne.n	2d47e <ble_gatts_mutable+0x8>
    if (ble_hs_conn_first() != NULL) {
   2d492:	f001 fe2b 	bl	2f0ec <ble_hs_conn_first>
   2d496:	b108      	cbz	r0, 2d49c <ble_gatts_mutable+0x26>
        return false;
   2d498:	2000      	movs	r0, #0
   2d49a:	e7f1      	b.n	2d480 <ble_gatts_mutable+0xa>
    return true;
   2d49c:	2001      	movs	r0, #1
   2d49e:	e7ef      	b.n	2d480 <ble_gatts_mutable+0xa>

0002d4a0 <ble_gatts_free_mem>:
{
   2d4a0:	b538      	push	{r3, r4, r5, lr}
    free(ble_gatts_clt_cfg_mem);
   2d4a2:	4c06      	ldr	r4, [pc, #24]	; (2d4bc <ble_gatts_free_mem+0x1c>)
   2d4a4:	6820      	ldr	r0, [r4, #0]
   2d4a6:	f006 fe8f 	bl	341c8 <free>
    ble_gatts_clt_cfg_mem = NULL;
   2d4aa:	2500      	movs	r5, #0
   2d4ac:	6025      	str	r5, [r4, #0]
    free(ble_gatts_svc_entries);
   2d4ae:	4c04      	ldr	r4, [pc, #16]	; (2d4c0 <ble_gatts_free_mem+0x20>)
   2d4b0:	6820      	ldr	r0, [r4, #0]
   2d4b2:	f006 fe89 	bl	341c8 <free>
    ble_gatts_svc_entries = NULL;
   2d4b6:	6025      	str	r5, [r4, #0]
}
   2d4b8:	bd38      	pop	{r3, r4, r5, pc}
   2d4ba:	bf00      	nop
   2d4bc:	100051bc 	.word	0x100051bc
   2d4c0:	10005224 	.word	0x10005224

0002d4c4 <ble_gatts_free_svc_defs>:
{
   2d4c4:	b510      	push	{r4, lr}
    free(ble_gatts_svc_defs);
   2d4c6:	4c04      	ldr	r4, [pc, #16]	; (2d4d8 <ble_gatts_free_svc_defs+0x14>)
   2d4c8:	6820      	ldr	r0, [r4, #0]
   2d4ca:	f006 fe7d 	bl	341c8 <free>
    ble_gatts_svc_defs = NULL;
   2d4ce:	2300      	movs	r3, #0
   2d4d0:	6023      	str	r3, [r4, #0]
    ble_gatts_num_svc_defs = 0;
   2d4d2:	4a02      	ldr	r2, [pc, #8]	; (2d4dc <ble_gatts_free_svc_defs+0x18>)
   2d4d4:	6013      	str	r3, [r2, #0]
}
   2d4d6:	bd10      	pop	{r4, pc}
   2d4d8:	10005220 	.word	0x10005220
   2d4dc:	100051e4 	.word	0x100051e4

0002d4e0 <ble_gatts_tx_notifications_one_chr>:
{
   2d4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d4e4:	4680      	mov	r8, r0
    clt_cfg_idx = ble_gatts_clt_cfg_find_idx(ble_gatts_clt_cfgs,
   2d4e6:	4601      	mov	r1, r0
   2d4e8:	4b17      	ldr	r3, [pc, #92]	; (2d548 <ble_gatts_tx_notifications_one_chr+0x68>)
   2d4ea:	6818      	ldr	r0, [r3, #0]
   2d4ec:	f7ff fb94 	bl	2cc18 <ble_gatts_clt_cfg_find_idx>
    if (clt_cfg_idx == -1) {
   2d4f0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2d4f4:	d026      	beq.n	2d544 <ble_gatts_tx_notifications_one_chr+0x64>
   2d4f6:	4681      	mov	r9, r0
    for (i = 0; ; i++) {
   2d4f8:	2600      	movs	r6, #0
   2d4fa:	e008      	b.n	2d50e <ble_gatts_tx_notifications_one_chr+0x2e>
            att_op = 0;
   2d4fc:	2400      	movs	r4, #0
            conn_handle = BLE_HS_CONN_HANDLE_NONE;
   2d4fe:	f64f 77ff 	movw	r7, #65535	; 0xffff
   2d502:	e013      	b.n	2d52c <ble_gatts_tx_notifications_one_chr+0x4c>
            ble_gattc_notify(conn_handle, chr_val_handle);
   2d504:	4641      	mov	r1, r8
   2d506:	4638      	mov	r0, r7
   2d508:	f7ff f8d0 	bl	2c6ac <ble_gattc_notify>
    for (i = 0; ; i++) {
   2d50c:	3601      	adds	r6, #1
        ble_hs_lock();
   2d50e:	f000 fd3f 	bl	2df90 <ble_hs_lock>
        conn = ble_hs_conn_find_by_idx(i);
   2d512:	4630      	mov	r0, r6
   2d514:	f001 fddc 	bl	2f0d0 <ble_hs_conn_find_by_idx>
        if (conn != NULL) {
   2d518:	4605      	mov	r5, r0
   2d51a:	2800      	cmp	r0, #0
   2d51c:	d0ee      	beq.n	2d4fc <ble_gatts_tx_notifications_one_chr+0x1c>
            clt_cfg = conn->bhc_gatt_svr.clt_cfgs + clt_cfg_idx;
   2d51e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
            att_op = ble_gatts_schedule_update(conn, clt_cfg);
   2d520:	eb01 0189 	add.w	r1, r1, r9, lsl #2
   2d524:	f7ff fbbc 	bl	2cca0 <ble_gatts_schedule_update>
   2d528:	4604      	mov	r4, r0
            conn_handle = conn->bhc_handle;
   2d52a:	88af      	ldrh	r7, [r5, #4]
        ble_hs_unlock();
   2d52c:	f000 fd34 	bl	2df98 <ble_hs_unlock>
        if (conn == NULL) {
   2d530:	b145      	cbz	r5, 2d544 <ble_gatts_tx_notifications_one_chr+0x64>
        switch (att_op) {
   2d532:	2c1b      	cmp	r4, #27
   2d534:	d0e6      	beq.n	2d504 <ble_gatts_tx_notifications_one_chr+0x24>
   2d536:	2c1d      	cmp	r4, #29
   2d538:	d1e8      	bne.n	2d50c <ble_gatts_tx_notifications_one_chr+0x2c>
            ble_gattc_indicate(conn_handle, chr_val_handle);
   2d53a:	4641      	mov	r1, r8
   2d53c:	4638      	mov	r0, r7
   2d53e:	f7ff f91d 	bl	2c77c <ble_gattc_indicate>
            break;
   2d542:	e7e3      	b.n	2d50c <ble_gatts_tx_notifications_one_chr+0x2c>
}
   2d544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2d548:	100051dc 	.word	0x100051dc

0002d54c <ble_gatts_register_svcs>:
{
   2d54c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d54e:	b083      	sub	sp, #12
   2d550:	460e      	mov	r6, r1
   2d552:	4617      	mov	r7, r2
    for (i = 0; svcs[i].type != BLE_GATT_SVC_TYPE_END; i++) {
   2d554:	2400      	movs	r4, #0
   2d556:	0123      	lsls	r3, r4, #4
   2d558:	eb00 1104 	add.w	r1, r0, r4, lsl #4
   2d55c:	5cc3      	ldrb	r3, [r0, r3]
   2d55e:	b19b      	cbz	r3, 2d588 <ble_gatts_register_svcs+0x3c>
        idx = ble_gatts_num_svc_entries + i;
   2d560:	4b15      	ldr	r3, [pc, #84]	; (2d5b8 <ble_gatts_register_svcs+0x6c>)
   2d562:	881b      	ldrh	r3, [r3, #0]
   2d564:	4423      	add	r3, r4
        if (idx >= ble_hs_max_services) {
   2d566:	4a15      	ldr	r2, [pc, #84]	; (2d5bc <ble_gatts_register_svcs+0x70>)
   2d568:	8812      	ldrh	r2, [r2, #0]
   2d56a:	429a      	cmp	r2, r3
   2d56c:	dd1f      	ble.n	2d5ae <ble_gatts_register_svcs+0x62>
        ble_gatts_svc_entries[idx].svc = svcs + i;
   2d56e:	4a14      	ldr	r2, [pc, #80]	; (2d5c0 <ble_gatts_register_svcs+0x74>)
   2d570:	6812      	ldr	r2, [r2, #0]
   2d572:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   2d576:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        ble_gatts_svc_entries[idx].handle = 0;
   2d57a:	2300      	movs	r3, #0
   2d57c:	80ab      	strh	r3, [r5, #4]
        ble_gatts_svc_entries[idx].end_group_handle = 0xffff;
   2d57e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2d582:	80eb      	strh	r3, [r5, #6]
    for (i = 0; svcs[i].type != BLE_GATT_SVC_TYPE_END; i++) {
   2d584:	3401      	adds	r4, #1
   2d586:	e7e6      	b.n	2d556 <ble_gatts_register_svcs+0xa>
    ble_gatts_num_svc_entries += num_svcs;
   2d588:	4a0b      	ldr	r2, [pc, #44]	; (2d5b8 <ble_gatts_register_svcs+0x6c>)
   2d58a:	8813      	ldrh	r3, [r2, #0]
   2d58c:	4423      	add	r3, r4
   2d58e:	8013      	strh	r3, [r2, #0]
    total_registered = 0;
   2d590:	2500      	movs	r5, #0
    while (total_registered < num_svcs) {
   2d592:	42a5      	cmp	r5, r4
   2d594:	da09      	bge.n	2d5aa <ble_gatts_register_svcs+0x5e>
        rc = ble_gatts_register_round(&cur_registered, cb, cb_arg);
   2d596:	463a      	mov	r2, r7
   2d598:	4631      	mov	r1, r6
   2d59a:	a801      	add	r0, sp, #4
   2d59c:	f7ff fe34 	bl	2d208 <ble_gatts_register_round>
        if (rc != 0) {
   2d5a0:	4603      	mov	r3, r0
   2d5a2:	b928      	cbnz	r0, 2d5b0 <ble_gatts_register_svcs+0x64>
        total_registered += cur_registered;
   2d5a4:	9b01      	ldr	r3, [sp, #4]
   2d5a6:	441d      	add	r5, r3
   2d5a8:	e7f3      	b.n	2d592 <ble_gatts_register_svcs+0x46>
    return 0;
   2d5aa:	2300      	movs	r3, #0
   2d5ac:	e000      	b.n	2d5b0 <ble_gatts_register_svcs+0x64>
            return BLE_HS_ENOMEM;
   2d5ae:	2306      	movs	r3, #6
}
   2d5b0:	4618      	mov	r0, r3
   2d5b2:	b003      	add	sp, #12
   2d5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d5b6:	bf00      	nop
   2d5b8:	100051e8 	.word	0x100051e8
   2d5bc:	10005330 	.word	0x10005330
   2d5c0:	10005224 	.word	0x10005224

0002d5c4 <ble_gatts_connection_broken>:
{
   2d5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d5c6:	b083      	sub	sp, #12
   2d5c8:	4606      	mov	r6, r0
    ble_hs_lock();
   2d5ca:	f000 fce1 	bl	2df90 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   2d5ce:	4630      	mov	r0, r6
   2d5d0:	f001 fd62 	bl	2f098 <ble_hs_conn_find>
    if (conn != NULL) {
   2d5d4:	4604      	mov	r4, r0
   2d5d6:	b120      	cbz	r0, 2d5e2 <ble_gatts_connection_broken+0x1e>
        clt_cfgs = conn->bhc_gatt_svr.clt_cfgs;
   2d5d8:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
        num_clt_cfgs = conn->bhc_gatt_svr.num_clt_cfgs;
   2d5da:	6d07      	ldr	r7, [r0, #80]	; 0x50
        conn->bhc_gatt_svr.clt_cfgs = NULL;
   2d5dc:	2300      	movs	r3, #0
   2d5de:	64c3      	str	r3, [r0, #76]	; 0x4c
        conn->bhc_gatt_svr.num_clt_cfgs = 0;
   2d5e0:	6503      	str	r3, [r0, #80]	; 0x50
    ble_hs_unlock();
   2d5e2:	f000 fcd9 	bl	2df98 <ble_hs_unlock>
    if (conn == NULL) {
   2d5e6:	b1bc      	cbz	r4, 2d618 <ble_gatts_connection_broken+0x54>
    ble_gatts_indicate_fail_notconn(conn_handle);
   2d5e8:	4630      	mov	r0, r6
   2d5ea:	f7ff f864 	bl	2c6b6 <ble_gatts_indicate_fail_notconn>
    if (clt_cfgs != NULL) {
   2d5ee:	b19d      	cbz	r5, 2d618 <ble_gatts_connection_broken+0x54>
        for (i = 0; i < num_clt_cfgs; i++) {
   2d5f0:	2400      	movs	r4, #0
   2d5f2:	e00b      	b.n	2d60c <ble_gatts_connection_broken+0x48>
            ble_gatts_subscribe_event(conn_handle, clt_cfgs[i].chr_val_handle,
   2d5f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2d5f8:	789b      	ldrb	r3, [r3, #2]
   2d5fa:	f835 1024 	ldrh.w	r1, [r5, r4, lsl #2]
   2d5fe:	2200      	movs	r2, #0
   2d600:	9200      	str	r2, [sp, #0]
   2d602:	2202      	movs	r2, #2
   2d604:	4630      	mov	r0, r6
   2d606:	f7ff fc55 	bl	2ceb4 <ble_gatts_subscribe_event>
        for (i = 0; i < num_clt_cfgs; i++) {
   2d60a:	3401      	adds	r4, #1
   2d60c:	42a7      	cmp	r7, r4
   2d60e:	dcf1      	bgt.n	2d5f4 <ble_gatts_connection_broken+0x30>
        rc = os_memblock_put(&ble_gatts_clt_cfg_pool, clt_cfgs);
   2d610:	4629      	mov	r1, r5
   2d612:	4802      	ldr	r0, [pc, #8]	; (2d61c <ble_gatts_connection_broken+0x58>)
   2d614:	f7ec fc42 	bl	19e9c <os_memblock_put>
}
   2d618:	b003      	add	sp, #12
   2d61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d61c:	100051c0 	.word	0x100051c0

0002d620 <ble_gatts_start>:
{
   2d620:	b570      	push	{r4, r5, r6, lr}
   2d622:	b084      	sub	sp, #16
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   2d624:	4b43      	ldr	r3, [pc, #268]	; (2d734 <ble_gatts_start+0x114>)
   2d626:	681b      	ldr	r3, [r3, #0]
   2d628:	9303      	str	r3, [sp, #12]
    ble_hs_lock();
   2d62a:	f000 fcb1 	bl	2df90 <ble_hs_lock>
    if (!ble_gatts_mutable()) {
   2d62e:	f7ff ff22 	bl	2d476 <ble_gatts_mutable>
   2d632:	b948      	cbnz	r0, 2d648 <ble_gatts_start+0x28>
        rc = BLE_HS_EBUSY;
   2d634:	240f      	movs	r4, #15
        ble_gatts_free_mem();
   2d636:	f7ff ff33 	bl	2d4a0 <ble_gatts_free_mem>
        ble_gatts_free_svc_defs();
   2d63a:	f7ff ff43 	bl	2d4c4 <ble_gatts_free_svc_defs>
    ble_hs_unlock();
   2d63e:	f000 fcab 	bl	2df98 <ble_hs_unlock>
}
   2d642:	4620      	mov	r0, r4
   2d644:	b004      	add	sp, #16
   2d646:	bd70      	pop	{r4, r5, r6, pc}
    ble_gatts_free_mem();
   2d648:	f7ff ff2a 	bl	2d4a0 <ble_gatts_free_mem>
    rc = ble_att_svr_start();
   2d64c:	f7fb f8f2 	bl	28834 <ble_att_svr_start>
    if (rc != 0) {
   2d650:	4604      	mov	r4, r0
   2d652:	2800      	cmp	r0, #0
   2d654:	d168      	bne.n	2d728 <ble_gatts_start+0x108>
    if (ble_hs_max_client_configs > 0) {
   2d656:	4b38      	ldr	r3, [pc, #224]	; (2d738 <ble_gatts_start+0x118>)
   2d658:	8818      	ldrh	r0, [r3, #0]
   2d65a:	b9b0      	cbnz	r0, 2d68a <ble_gatts_start+0x6a>
    if (ble_hs_max_services > 0) {
   2d65c:	4b37      	ldr	r3, [pc, #220]	; (2d73c <ble_gatts_start+0x11c>)
   2d65e:	8818      	ldrh	r0, [r3, #0]
   2d660:	b9e0      	cbnz	r0, 2d69c <ble_gatts_start+0x7c>
    ble_gatts_num_svc_entries = 0;
   2d662:	4b37      	ldr	r3, [pc, #220]	; (2d740 <ble_gatts_start+0x120>)
   2d664:	2200      	movs	r2, #0
   2d666:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < ble_gatts_num_svc_defs; i++) {
   2d668:	4b36      	ldr	r3, [pc, #216]	; (2d744 <ble_gatts_start+0x124>)
   2d66a:	681b      	ldr	r3, [r3, #0]
   2d66c:	42a3      	cmp	r3, r4
   2d66e:	dd1e      	ble.n	2d6ae <ble_gatts_start+0x8e>
        rc = ble_gatts_register_svcs(ble_gatts_svc_defs[i],
   2d670:	4b35      	ldr	r3, [pc, #212]	; (2d748 <ble_gatts_start+0x128>)
   2d672:	6818      	ldr	r0, [r3, #0]
   2d674:	4b35      	ldr	r3, [pc, #212]	; (2d74c <ble_gatts_start+0x12c>)
   2d676:	685a      	ldr	r2, [r3, #4]
   2d678:	6819      	ldr	r1, [r3, #0]
   2d67a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   2d67e:	f7ff ff65 	bl	2d54c <ble_gatts_register_svcs>
        if (rc != 0) {
   2d682:	2800      	cmp	r0, #0
   2d684:	d14f      	bne.n	2d726 <ble_gatts_start+0x106>
    for (i = 0; i < ble_gatts_num_svc_defs; i++) {
   2d686:	3401      	adds	r4, #1
   2d688:	e7ee      	b.n	2d668 <ble_gatts_start+0x48>
        ble_gatts_clt_cfg_mem = malloc(
   2d68a:	0080      	lsls	r0, r0, #2
   2d68c:	f006 fd66 	bl	3415c <malloc>
   2d690:	4b2f      	ldr	r3, [pc, #188]	; (2d750 <ble_gatts_start+0x130>)
   2d692:	6018      	str	r0, [r3, #0]
        if (ble_gatts_clt_cfg_mem == NULL) {
   2d694:	2800      	cmp	r0, #0
   2d696:	d1e1      	bne.n	2d65c <ble_gatts_start+0x3c>
            rc = BLE_HS_ENOMEM;
   2d698:	2406      	movs	r4, #6
   2d69a:	e7cc      	b.n	2d636 <ble_gatts_start+0x16>
            malloc(ble_hs_max_services * sizeof *ble_gatts_svc_entries);
   2d69c:	00c0      	lsls	r0, r0, #3
   2d69e:	f006 fd5d 	bl	3415c <malloc>
        ble_gatts_svc_entries =
   2d6a2:	4b2c      	ldr	r3, [pc, #176]	; (2d754 <ble_gatts_start+0x134>)
   2d6a4:	6018      	str	r0, [r3, #0]
        if (ble_gatts_svc_entries == NULL) {
   2d6a6:	2800      	cmp	r0, #0
   2d6a8:	d1db      	bne.n	2d662 <ble_gatts_start+0x42>
            rc = BLE_HS_ENOMEM;
   2d6aa:	2406      	movs	r4, #6
   2d6ac:	e7c3      	b.n	2d636 <ble_gatts_start+0x16>
    ble_gatts_free_svc_defs();
   2d6ae:	f7ff ff09 	bl	2d4c4 <ble_gatts_free_svc_defs>
    if (ble_gatts_num_cfgable_chrs == 0) {
   2d6b2:	4b29      	ldr	r3, [pc, #164]	; (2d758 <ble_gatts_start+0x138>)
   2d6b4:	681c      	ldr	r4, [r3, #0]
   2d6b6:	2c00      	cmp	r4, #0
   2d6b8:	d0c1      	beq.n	2d63e <ble_gatts_start+0x1e>
    num_elems = ble_hs_max_client_configs / ble_gatts_num_cfgable_chrs;
   2d6ba:	4b1f      	ldr	r3, [pc, #124]	; (2d738 <ble_gatts_start+0x118>)
   2d6bc:	881b      	ldrh	r3, [r3, #0]
   2d6be:	fb93 f4f4 	sdiv	r4, r3, r4
                         ble_gatts_clt_cfg_size(), ble_gatts_clt_cfg_mem,
   2d6c2:	f7ff fae7 	bl	2cc94 <ble_gatts_clt_cfg_size>
   2d6c6:	4602      	mov	r2, r0
    rc = os_mempool_init(&ble_gatts_clt_cfg_pool, num_elems,
   2d6c8:	4b24      	ldr	r3, [pc, #144]	; (2d75c <ble_gatts_start+0x13c>)
   2d6ca:	9300      	str	r3, [sp, #0]
   2d6cc:	4b20      	ldr	r3, [pc, #128]	; (2d750 <ble_gatts_start+0x130>)
   2d6ce:	681b      	ldr	r3, [r3, #0]
   2d6d0:	b2a1      	uxth	r1, r4
   2d6d2:	4823      	ldr	r0, [pc, #140]	; (2d760 <ble_gatts_start+0x140>)
   2d6d4:	f7ec fb76 	bl	19dc4 <os_mempool_init>
   2d6d8:	4606      	mov	r6, r0
   2d6da:	4604      	mov	r4, r0
    if (rc != 0) {
   2d6dc:	b108      	cbz	r0, 2d6e2 <ble_gatts_start+0xc2>
        rc = BLE_HS_EOS;
   2d6de:	240b      	movs	r4, #11
   2d6e0:	e7a9      	b.n	2d636 <ble_gatts_start+0x16>
    ble_gatts_clt_cfgs = os_memblock_get(&ble_gatts_clt_cfg_pool);
   2d6e2:	481f      	ldr	r0, [pc, #124]	; (2d760 <ble_gatts_start+0x140>)
   2d6e4:	f7ec fbb2 	bl	19e4c <os_memblock_get>
   2d6e8:	4b1e      	ldr	r3, [pc, #120]	; (2d764 <ble_gatts_start+0x144>)
   2d6ea:	6018      	str	r0, [r3, #0]
    if (ble_gatts_clt_cfgs == NULL) {
   2d6ec:	b1f8      	cbz	r0, 2d72e <ble_gatts_start+0x10e>
    ha = NULL;
   2d6ee:	2500      	movs	r5, #0
    while ((ha = ble_att_svr_find_by_uuid(ha, &uuid.u, 0xffff)) != NULL) {
   2d6f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2d6f4:	a903      	add	r1, sp, #12
   2d6f6:	4628      	mov	r0, r5
   2d6f8:	f7fa fb18 	bl	27d2c <ble_att_svr_find_by_uuid>
   2d6fc:	4605      	mov	r5, r0
   2d6fe:	b198      	cbz	r0, 2d728 <ble_gatts_start+0x108>
        allowed_flags = ble_gatts_chr_clt_cfg_allowed(chr);
   2d700:	6928      	ldr	r0, [r5, #16]
   2d702:	f7ff f9af 	bl	2ca64 <ble_gatts_chr_clt_cfg_allowed>
        if (allowed_flags != 0) {
   2d706:	4602      	mov	r2, r0
   2d708:	2800      	cmp	r0, #0
   2d70a:	d0f1      	beq.n	2d6f0 <ble_gatts_start+0xd0>
            ble_gatts_clt_cfgs[idx].chr_val_handle = ha->ha_handle_id + 1;
   2d70c:	896b      	ldrh	r3, [r5, #10]
   2d70e:	4915      	ldr	r1, [pc, #84]	; (2d764 <ble_gatts_start+0x144>)
   2d710:	6808      	ldr	r0, [r1, #0]
   2d712:	eb00 0186 	add.w	r1, r0, r6, lsl #2
   2d716:	3301      	adds	r3, #1
   2d718:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
            ble_gatts_clt_cfgs[idx].allowed = allowed_flags;
   2d71c:	70ca      	strb	r2, [r1, #3]
            ble_gatts_clt_cfgs[idx].flags = 0;
   2d71e:	2300      	movs	r3, #0
   2d720:	708b      	strb	r3, [r1, #2]
            idx++;
   2d722:	3601      	adds	r6, #1
   2d724:	e7e4      	b.n	2d6f0 <ble_gatts_start+0xd0>
        rc = ble_gatts_register_svcs(ble_gatts_svc_defs[i],
   2d726:	4604      	mov	r4, r0
    if (rc != 0) {
   2d728:	2c00      	cmp	r4, #0
   2d72a:	d088      	beq.n	2d63e <ble_gatts_start+0x1e>
   2d72c:	e783      	b.n	2d636 <ble_gatts_start+0x16>
        rc = BLE_HS_ENOMEM;
   2d72e:	2406      	movs	r4, #6
   2d730:	e781      	b.n	2d636 <ble_gatts_start+0x16>
   2d732:	bf00      	nop
   2d734:	0003439c 	.word	0x0003439c
   2d738:	1000532e 	.word	0x1000532e
   2d73c:	10005330 	.word	0x10005330
   2d740:	100051e8 	.word	0x100051e8
   2d744:	100051e4 	.word	0x100051e4
   2d748:	10005220 	.word	0x10005220
   2d74c:	100006f0 	.word	0x100006f0
   2d750:	100051bc 	.word	0x100051bc
   2d754:	10005224 	.word	0x10005224
   2d758:	100051e0 	.word	0x100051e0
   2d75c:	00039504 	.word	0x00039504
   2d760:	100051c0 	.word	0x100051c0
   2d764:	100051dc 	.word	0x100051dc

0002d768 <ble_gatts_conn_can_alloc>:
    return ble_gatts_num_cfgable_chrs == 0 ||
   2d768:	4b05      	ldr	r3, [pc, #20]	; (2d780 <ble_gatts_conn_can_alloc+0x18>)
   2d76a:	681b      	ldr	r3, [r3, #0]
   2d76c:	b123      	cbz	r3, 2d778 <ble_gatts_conn_can_alloc+0x10>
           ble_gatts_clt_cfg_pool.mp_num_free > 0;
   2d76e:	4b05      	ldr	r3, [pc, #20]	; (2d784 <ble_gatts_conn_can_alloc+0x1c>)
   2d770:	88db      	ldrh	r3, [r3, #6]
    return ble_gatts_num_cfgable_chrs == 0 ||
   2d772:	b11b      	cbz	r3, 2d77c <ble_gatts_conn_can_alloc+0x14>
   2d774:	2001      	movs	r0, #1
   2d776:	4770      	bx	lr
   2d778:	2001      	movs	r0, #1
   2d77a:	4770      	bx	lr
   2d77c:	2000      	movs	r0, #0
}
   2d77e:	4770      	bx	lr
   2d780:	100051e0 	.word	0x100051e0
   2d784:	100051c0 	.word	0x100051c0

0002d788 <ble_gatts_conn_init>:
{
   2d788:	b570      	push	{r4, r5, r6, lr}
   2d78a:	4604      	mov	r4, r0
    if (ble_gatts_num_cfgable_chrs > 0) {
   2d78c:	4b0e      	ldr	r3, [pc, #56]	; (2d7c8 <ble_gatts_conn_init+0x40>)
   2d78e:	681b      	ldr	r3, [r3, #0]
   2d790:	2b00      	cmp	r3, #0
   2d792:	dc03      	bgt.n	2d79c <ble_gatts_conn_init+0x14>
        gatts_conn->clt_cfgs = NULL;
   2d794:	2000      	movs	r0, #0
   2d796:	6020      	str	r0, [r4, #0]
        gatts_conn->num_clt_cfgs = 0;
   2d798:	6060      	str	r0, [r4, #4]
}
   2d79a:	bd70      	pop	{r4, r5, r6, pc}
        gatts_conn->clt_cfgs = os_memblock_get(&ble_gatts_clt_cfg_pool);
   2d79c:	480b      	ldr	r0, [pc, #44]	; (2d7cc <ble_gatts_conn_init+0x44>)
   2d79e:	f7ec fb55 	bl	19e4c <os_memblock_get>
   2d7a2:	4605      	mov	r5, r0
   2d7a4:	6020      	str	r0, [r4, #0]
        if (gatts_conn->clt_cfgs == NULL) {
   2d7a6:	b168      	cbz	r0, 2d7c4 <ble_gatts_conn_init+0x3c>
        memcpy(gatts_conn->clt_cfgs, ble_gatts_clt_cfgs,
   2d7a8:	4b09      	ldr	r3, [pc, #36]	; (2d7d0 <ble_gatts_conn_init+0x48>)
   2d7aa:	681e      	ldr	r6, [r3, #0]
               ble_gatts_clt_cfg_size());
   2d7ac:	f7ff fa72 	bl	2cc94 <ble_gatts_clt_cfg_size>
   2d7b0:	4602      	mov	r2, r0
        memcpy(gatts_conn->clt_cfgs, ble_gatts_clt_cfgs,
   2d7b2:	4631      	mov	r1, r6
   2d7b4:	4628      	mov	r0, r5
   2d7b6:	f7ed fa4b 	bl	1ac50 <memcpy>
        gatts_conn->num_clt_cfgs = ble_gatts_num_cfgable_chrs;
   2d7ba:	4b03      	ldr	r3, [pc, #12]	; (2d7c8 <ble_gatts_conn_init+0x40>)
   2d7bc:	681b      	ldr	r3, [r3, #0]
   2d7be:	6063      	str	r3, [r4, #4]
    return 0;
   2d7c0:	2000      	movs	r0, #0
   2d7c2:	e7ea      	b.n	2d79a <ble_gatts_conn_init+0x12>
            return BLE_HS_ENOMEM;
   2d7c4:	2006      	movs	r0, #6
   2d7c6:	e7e8      	b.n	2d79a <ble_gatts_conn_init+0x12>
   2d7c8:	100051e0 	.word	0x100051e0
   2d7cc:	100051c0 	.word	0x100051c0
   2d7d0:	100051dc 	.word	0x100051dc

0002d7d4 <ble_gatts_send_next_indicate>:
{
   2d7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d7d6:	4606      	mov	r6, r0
    ble_hs_lock();
   2d7d8:	f000 fbda 	bl	2df90 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   2d7dc:	4630      	mov	r0, r6
   2d7de:	f001 fc5b 	bl	2f098 <ble_hs_conn_find>
    if (conn != NULL) {
   2d7e2:	4604      	mov	r4, r0
   2d7e4:	b108      	cbz	r0, 2d7ea <ble_gatts_send_next_indicate+0x16>
        for (i = 0; i < conn->bhc_gatt_svr.num_clt_cfgs; i++) {
   2d7e6:	2200      	movs	r2, #0
   2d7e8:	e002      	b.n	2d7f0 <ble_gatts_send_next_indicate+0x1c>
    chr_val_handle = 0;
   2d7ea:	2700      	movs	r7, #0
   2d7ec:	e011      	b.n	2d812 <ble_gatts_send_next_indicate+0x3e>
        for (i = 0; i < conn->bhc_gatt_svr.num_clt_cfgs; i++) {
   2d7ee:	3201      	adds	r2, #1
   2d7f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   2d7f2:	4293      	cmp	r3, r2
   2d7f4:	dd0c      	ble.n	2d810 <ble_gatts_send_next_indicate+0x3c>
            clt_cfg = conn->bhc_gatt_svr.clt_cfgs + i;
   2d7f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   2d7f8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
            if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED) {
   2d7fc:	789d      	ldrb	r5, [r3, #2]
   2d7fe:	f993 1002 	ldrsb.w	r1, [r3, #2]
   2d802:	2900      	cmp	r1, #0
   2d804:	daf3      	bge.n	2d7ee <ble_gatts_send_next_indicate+0x1a>
                chr_val_handle = clt_cfg->chr_val_handle;
   2d806:	881f      	ldrh	r7, [r3, #0]
                clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
   2d808:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   2d80c:	709d      	strb	r5, [r3, #2]
                break;
   2d80e:	e000      	b.n	2d812 <ble_gatts_send_next_indicate+0x3e>
    chr_val_handle = 0;
   2d810:	2700      	movs	r7, #0
    ble_hs_unlock();
   2d812:	f000 fbc1 	bl	2df98 <ble_hs_unlock>
    if (conn == NULL) {
   2d816:	b12c      	cbz	r4, 2d824 <ble_gatts_send_next_indicate+0x50>
    if (chr_val_handle == 0) {
   2d818:	b137      	cbz	r7, 2d828 <ble_gatts_send_next_indicate+0x54>
    rc = ble_gattc_indicate(conn_handle, chr_val_handle);
   2d81a:	4639      	mov	r1, r7
   2d81c:	4630      	mov	r0, r6
   2d81e:	f7fe ffad 	bl	2c77c <ble_gattc_indicate>
}
   2d822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOTCONN;
   2d824:	2007      	movs	r0, #7
   2d826:	e7fc      	b.n	2d822 <ble_gatts_send_next_indicate+0x4e>
        return BLE_HS_ENOENT;
   2d828:	2005      	movs	r0, #5
   2d82a:	e7fa      	b.n	2d822 <ble_gatts_send_next_indicate+0x4e>

0002d82c <ble_gatts_rx_indicate_ack>:
{
   2d82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d830:	b084      	sub	sp, #16
   2d832:	4606      	mov	r6, r0
   2d834:	460d      	mov	r5, r1
    clt_cfg_idx = ble_gatts_clt_cfg_find_idx(ble_gatts_clt_cfgs,
   2d836:	4b2f      	ldr	r3, [pc, #188]	; (2d8f4 <ble_gatts_rx_indicate_ack+0xc8>)
   2d838:	681c      	ldr	r4, [r3, #0]
   2d83a:	4620      	mov	r0, r4
   2d83c:	f7ff f9ec 	bl	2cc18 <ble_gatts_clt_cfg_find_idx>
    if (clt_cfg_idx == -1) {
   2d840:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2d844:	d04e      	beq.n	2d8e4 <ble_gatts_rx_indicate_ack+0xb8>
    clt_cfg = ble_gatts_clt_cfgs + clt_cfg_idx;
   2d846:	ea4f 0880 	mov.w	r8, r0, lsl #2
   2d84a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    if (!(clt_cfg->allowed & BLE_GATTS_CLT_CFG_F_INDICATE)) {
   2d84e:	78e3      	ldrb	r3, [r4, #3]
   2d850:	f013 0f02 	tst.w	r3, #2
   2d854:	d048      	beq.n	2d8e8 <ble_gatts_rx_indicate_ack+0xbc>
    ble_hs_lock();
   2d856:	f000 fb9b 	bl	2df90 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   2d85a:	4630      	mov	r0, r6
   2d85c:	f001 fc1c 	bl	2f098 <ble_hs_conn_find>
   2d860:	4603      	mov	r3, r0
    if (conn->bhc_gatt_svr.indicate_val_handle == chr_val_handle) {
   2d862:	f8b0 2054 	ldrh.w	r2, [r0, #84]	; 0x54
   2d866:	42aa      	cmp	r2, r5
   2d868:	d006      	beq.n	2d878 <ble_gatts_rx_indicate_ack+0x4c>
        rc = BLE_HS_ENOENT;
   2d86a:	2405      	movs	r4, #5
    ble_hs_unlock();
   2d86c:	f000 fb94 	bl	2df98 <ble_hs_unlock>
    if (rc != 0) {
   2d870:	bbdc      	cbnz	r4, 2d8ea <ble_gatts_rx_indicate_ack+0xbe>
    if (persist) {
   2d872:	bb9f      	cbnz	r7, 2d8dc <ble_gatts_rx_indicate_ack+0xb0>
    return 0;
   2d874:	463c      	mov	r4, r7
   2d876:	e038      	b.n	2d8ea <ble_gatts_rx_indicate_ack+0xbe>
        conn->bhc_gatt_svr.indicate_val_handle = 0;
   2d878:	2200      	movs	r2, #0
   2d87a:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
        clt_cfg = conn->bhc_gatt_svr.clt_cfgs + clt_cfg_idx;
   2d87e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   2d880:	4490      	add	r8, r2
        persist = conn->bhc_sec_state.bonded &&
   2d882:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
   2d886:	f012 0f04 	tst.w	r2, #4
   2d88a:	d024      	beq.n	2d8d6 <ble_gatts_rx_indicate_ack+0xaa>
                  !(clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED);
   2d88c:	f998 2002 	ldrsb.w	r2, [r8, #2]
        persist = conn->bhc_sec_state.bonded &&
   2d890:	2a00      	cmp	r2, #0
   2d892:	da02      	bge.n	2d89a <ble_gatts_rx_indicate_ack+0x6e>
        rc = 0;
   2d894:	2400      	movs	r4, #0
        persist = conn->bhc_sec_state.bonded &&
   2d896:	4627      	mov	r7, r4
   2d898:	e7e8      	b.n	2d86c <ble_gatts_rx_indicate_ack+0x40>
            cccd_value.peer_addr = conn->bhc_peer_addr;
   2d89a:	4602      	mov	r2, r0
   2d89c:	f852 0f07 	ldr.w	r0, [r2, #7]!
   2d8a0:	9000      	str	r0, [sp, #0]
   2d8a2:	8891      	ldrh	r1, [r2, #4]
   2d8a4:	7992      	ldrb	r2, [r2, #6]
   2d8a6:	f8ad 1004 	strh.w	r1, [sp, #4]
   2d8aa:	f88d 2006 	strb.w	r2, [sp, #6]
                ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   2d8ae:	79d8      	ldrb	r0, [r3, #7]
   2d8b0:	f002 fbf1 	bl	30096 <ble_hs_misc_peer_addr_type_to_id>
            cccd_value.peer_addr.type =
   2d8b4:	f88d 0000 	strb.w	r0, [sp]
            cccd_value.chr_val_handle = chr_val_handle;
   2d8b8:	f8ad 5008 	strh.w	r5, [sp, #8]
            cccd_value.flags = clt_cfg->flags;
   2d8bc:	f898 3002 	ldrb.w	r3, [r8, #2]
   2d8c0:	f8ad 300a 	strh.w	r3, [sp, #10]
            cccd_value.value_changed = 0;
   2d8c4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2d8c8:	f36f 0300 	bfc	r3, #0, #1
   2d8cc:	f88d 300c 	strb.w	r3, [sp, #12]
        rc = 0;
   2d8d0:	2400      	movs	r4, #0
        persist = conn->bhc_sec_state.bonded &&
   2d8d2:	2701      	movs	r7, #1
   2d8d4:	e7ca      	b.n	2d86c <ble_gatts_rx_indicate_ack+0x40>
        rc = 0;
   2d8d6:	2400      	movs	r4, #0
        persist = conn->bhc_sec_state.bonded &&
   2d8d8:	4627      	mov	r7, r4
   2d8da:	e7c7      	b.n	2d86c <ble_gatts_rx_indicate_ack+0x40>
        rc = ble_store_write_cccd(&cccd_value);
   2d8dc:	4668      	mov	r0, sp
   2d8de:	f003 fc6a 	bl	311b6 <ble_store_write_cccd>
        if (rc != 0) {
   2d8e2:	e002      	b.n	2d8ea <ble_gatts_rx_indicate_ack+0xbe>
        return BLE_HS_ENOENT;
   2d8e4:	2405      	movs	r4, #5
   2d8e6:	e000      	b.n	2d8ea <ble_gatts_rx_indicate_ack+0xbe>
        return BLE_HS_ENOENT;
   2d8e8:	2405      	movs	r4, #5
}
   2d8ea:	4620      	mov	r0, r4
   2d8ec:	b004      	add	sp, #16
   2d8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d8f2:	bf00      	nop
   2d8f4:	100051dc 	.word	0x100051dc

0002d8f8 <ble_gatts_chr_updated>:
{
   2d8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d8fa:	b089      	sub	sp, #36	; 0x24
   2d8fc:	4606      	mov	r6, r0
    clt_cfg_idx = ble_gatts_clt_cfg_find_idx(ble_gatts_clt_cfgs,
   2d8fe:	4601      	mov	r1, r0
   2d900:	4b2a      	ldr	r3, [pc, #168]	; (2d9ac <ble_gatts_chr_updated+0xb4>)
   2d902:	6818      	ldr	r0, [r3, #0]
   2d904:	f7ff f988 	bl	2cc18 <ble_gatts_clt_cfg_find_idx>
    if (clt_cfg_idx == -1) {
   2d908:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2d90c:	d04c      	beq.n	2d9a8 <ble_gatts_chr_updated+0xb0>
   2d90e:	4605      	mov	r5, r0
    ble_hs_lock();
   2d910:	f000 fb3e 	bl	2df90 <ble_hs_lock>
    for (i = 0; ; i++) {
   2d914:	2400      	movs	r4, #0
    int new_notifications = 0;
   2d916:	4627      	mov	r7, r4
        conn = ble_hs_conn_find_by_idx(i);
   2d918:	4620      	mov	r0, r4
   2d91a:	f001 fbd9 	bl	2f0d0 <ble_hs_conn_find_by_idx>
        if (conn == NULL) {
   2d91e:	b148      	cbz	r0, 2d934 <ble_gatts_chr_updated+0x3c>
        clt_cfg = conn->bhc_gatt_svr.clt_cfgs + clt_cfg_idx;
   2d920:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2d922:	eb03 0385 	add.w	r3, r3, r5, lsl #2
        clt_cfg->flags |= BLE_GATTS_CLT_CFG_F_MODIFIED;
   2d926:	789a      	ldrb	r2, [r3, #2]
   2d928:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2d92c:	709a      	strb	r2, [r3, #2]
    for (i = 0; ; i++) {
   2d92e:	3401      	adds	r4, #1
        new_notifications = 1;
   2d930:	2701      	movs	r7, #1
        conn = ble_hs_conn_find_by_idx(i);
   2d932:	e7f1      	b.n	2d918 <ble_gatts_chr_updated+0x20>
    ble_hs_unlock();
   2d934:	f000 fb30 	bl	2df98 <ble_hs_unlock>
    if (new_notifications) {
   2d938:	b947      	cbnz	r7, 2d94c <ble_gatts_chr_updated+0x54>
    cccd_key.peer_addr = *BLE_ADDR_ANY;
   2d93a:	2300      	movs	r3, #0
   2d93c:	9301      	str	r3, [sp, #4]
   2d93e:	f8cd 3007 	str.w	r3, [sp, #7]
    cccd_key.chr_val_handle = chr_val_handle;
   2d942:	f8ad 600c 	strh.w	r6, [sp, #12]
    cccd_key.idx = 0;
   2d946:	f88d 300e 	strb.w	r3, [sp, #14]
   2d94a:	e011      	b.n	2d970 <ble_gatts_chr_updated+0x78>
        ble_hs_notifications_sched();
   2d94c:	f000 fc40 	bl	2e1d0 <ble_hs_notifications_sched>
   2d950:	e7f3      	b.n	2d93a <ble_gatts_chr_updated+0x42>
        ble_hs_unlock();
   2d952:	f000 fb21 	bl	2df98 <ble_hs_unlock>
        if (persist && !cccd_value.value_changed) {
   2d956:	e001      	b.n	2d95c <ble_gatts_chr_updated+0x64>
        ble_hs_unlock();
   2d958:	f000 fb1e 	bl	2df98 <ble_hs_unlock>
        if (persist && !cccd_value.value_changed) {
   2d95c:	f89d 301c 	ldrb.w	r3, [sp, #28]
   2d960:	f013 0f01 	tst.w	r3, #1
   2d964:	d018      	beq.n	2d998 <ble_gatts_chr_updated+0xa0>
        cccd_key.idx++;
   2d966:	f89d 300e 	ldrb.w	r3, [sp, #14]
   2d96a:	3301      	adds	r3, #1
   2d96c:	f88d 300e 	strb.w	r3, [sp, #14]
        rc = ble_store_read_cccd(&cccd_key, &cccd_value);
   2d970:	a904      	add	r1, sp, #16
   2d972:	a801      	add	r0, sp, #4
   2d974:	f003 fc18 	bl	311a8 <ble_store_read_cccd>
        if (rc != 0) {
   2d978:	b9b0      	cbnz	r0, 2d9a8 <ble_gatts_chr_updated+0xb0>
        ble_hs_lock();
   2d97a:	f000 fb09 	bl	2df90 <ble_hs_lock>
        conn = ble_hs_conn_find_by_addr(&cccd_key.peer_addr);
   2d97e:	a801      	add	r0, sp, #4
   2d980:	f001 fc26 	bl	2f1d0 <ble_hs_conn_find_by_addr>
        if (conn == NULL) {
   2d984:	2800      	cmp	r0, #0
   2d986:	d0e4      	beq.n	2d952 <ble_gatts_chr_updated+0x5a>
        } else if (cccd_value.flags & BLE_GATTS_CLT_CFG_F_INDICATE) {
   2d988:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   2d98c:	f013 0f02 	tst.w	r3, #2
   2d990:	d1e2      	bne.n	2d958 <ble_gatts_chr_updated+0x60>
        ble_hs_unlock();
   2d992:	f000 fb01 	bl	2df98 <ble_hs_unlock>
        if (persist && !cccd_value.value_changed) {
   2d996:	e7e6      	b.n	2d966 <ble_gatts_chr_updated+0x6e>
            cccd_value.value_changed = 1;
   2d998:	f043 0301 	orr.w	r3, r3, #1
   2d99c:	f88d 301c 	strb.w	r3, [sp, #28]
            ble_store_write_cccd(&cccd_value);
   2d9a0:	a804      	add	r0, sp, #16
   2d9a2:	f003 fc08 	bl	311b6 <ble_store_write_cccd>
   2d9a6:	e7de      	b.n	2d966 <ble_gatts_chr_updated+0x6e>
}
   2d9a8:	b009      	add	sp, #36	; 0x24
   2d9aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d9ac:	100051dc 	.word	0x100051dc

0002d9b0 <ble_gatts_tx_notifications>:
{
   2d9b0:	b510      	push	{r4, lr}
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   2d9b2:	2400      	movs	r4, #0
   2d9b4:	4b06      	ldr	r3, [pc, #24]	; (2d9d0 <ble_gatts_tx_notifications+0x20>)
   2d9b6:	681b      	ldr	r3, [r3, #0]
   2d9b8:	42a3      	cmp	r3, r4
   2d9ba:	dd07      	ble.n	2d9cc <ble_gatts_tx_notifications+0x1c>
        chr_val_handle = ble_gatts_clt_cfgs[i].chr_val_handle;
   2d9bc:	4b05      	ldr	r3, [pc, #20]	; (2d9d4 <ble_gatts_tx_notifications+0x24>)
   2d9be:	681b      	ldr	r3, [r3, #0]
        ble_gatts_tx_notifications_one_chr(chr_val_handle);
   2d9c0:	f833 0024 	ldrh.w	r0, [r3, r4, lsl #2]
   2d9c4:	f7ff fd8c 	bl	2d4e0 <ble_gatts_tx_notifications_one_chr>
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   2d9c8:	3401      	adds	r4, #1
   2d9ca:	e7f3      	b.n	2d9b4 <ble_gatts_tx_notifications+0x4>
}
   2d9cc:	bd10      	pop	{r4, pc}
   2d9ce:	bf00      	nop
   2d9d0:	100051e0 	.word	0x100051e0
   2d9d4:	100051dc 	.word	0x100051dc

0002d9d8 <ble_gatts_add_svcs>:
{
   2d9d8:	b570      	push	{r4, r5, r6, lr}
   2d9da:	4604      	mov	r4, r0
    ble_hs_lock();
   2d9dc:	f000 fad8 	bl	2df90 <ble_hs_lock>
    if (!ble_gatts_mutable()) {
   2d9e0:	f7ff fd49 	bl	2d476 <ble_gatts_mutable>
   2d9e4:	b198      	cbz	r0, 2da0e <ble_gatts_add_svcs+0x36>
                (ble_gatts_num_svc_defs + 1) * sizeof *ble_gatts_svc_defs);
   2d9e6:	4b0c      	ldr	r3, [pc, #48]	; (2da18 <ble_gatts_add_svcs+0x40>)
   2d9e8:	681e      	ldr	r6, [r3, #0]
   2d9ea:	1c75      	adds	r5, r6, #1
    p = realloc(ble_gatts_svc_defs,
   2d9ec:	00a9      	lsls	r1, r5, #2
   2d9ee:	4b0b      	ldr	r3, [pc, #44]	; (2da1c <ble_gatts_add_svcs+0x44>)
   2d9f0:	6818      	ldr	r0, [r3, #0]
   2d9f2:	f006 fbff 	bl	341f4 <realloc>
    if (p == NULL) {
   2d9f6:	b160      	cbz	r0, 2da12 <ble_gatts_add_svcs+0x3a>
    ble_gatts_svc_defs = p;
   2d9f8:	4a08      	ldr	r2, [pc, #32]	; (2da1c <ble_gatts_add_svcs+0x44>)
   2d9fa:	6010      	str	r0, [r2, #0]
    ble_gatts_svc_defs[ble_gatts_num_svc_defs] = svcs;
   2d9fc:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    ble_gatts_num_svc_defs++;
   2da00:	4b05      	ldr	r3, [pc, #20]	; (2da18 <ble_gatts_add_svcs+0x40>)
   2da02:	601d      	str	r5, [r3, #0]
    rc = 0;
   2da04:	2400      	movs	r4, #0
    ble_hs_unlock();
   2da06:	f000 fac7 	bl	2df98 <ble_hs_unlock>
}
   2da0a:	4620      	mov	r0, r4
   2da0c:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_EBUSY;
   2da0e:	240f      	movs	r4, #15
   2da10:	e7f9      	b.n	2da06 <ble_gatts_add_svcs+0x2e>
        rc = BLE_HS_ENOMEM;
   2da12:	2406      	movs	r4, #6
   2da14:	e7f7      	b.n	2da06 <ble_gatts_add_svcs+0x2e>
   2da16:	bf00      	nop
   2da18:	100051e4 	.word	0x100051e4
   2da1c:	10005220 	.word	0x10005220

0002da20 <ble_gatts_svc_set_visibility>:
{
   2da20:	b510      	push	{r4, lr}
   2da22:	4604      	mov	r4, r0
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   2da24:	2300      	movs	r3, #0
   2da26:	4a0c      	ldr	r2, [pc, #48]	; (2da58 <ble_gatts_svc_set_visibility+0x38>)
   2da28:	8812      	ldrh	r2, [r2, #0]
   2da2a:	429a      	cmp	r2, r3
   2da2c:	dd12      	ble.n	2da54 <ble_gatts_svc_set_visibility+0x34>
        struct ble_gatts_svc_entry *entry = &ble_gatts_svc_entries[i];
   2da2e:	4a0b      	ldr	r2, [pc, #44]	; (2da5c <ble_gatts_svc_set_visibility+0x3c>)
   2da30:	6812      	ldr	r2, [r2, #0]
   2da32:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
        if (entry->handle == handle) {
   2da36:	8890      	ldrh	r0, [r2, #4]
   2da38:	42a0      	cmp	r0, r4
   2da3a:	d001      	beq.n	2da40 <ble_gatts_svc_set_visibility+0x20>
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   2da3c:	3301      	adds	r3, #1
   2da3e:	e7f2      	b.n	2da26 <ble_gatts_svc_set_visibility+0x6>
            if (visible) {
   2da40:	b121      	cbz	r1, 2da4c <ble_gatts_svc_set_visibility+0x2c>
                ble_att_svr_restore_range(entry->handle, entry->end_group_handle);
   2da42:	88d1      	ldrh	r1, [r2, #6]
   2da44:	f7fa fec6 	bl	287d4 <ble_att_svr_restore_range>
            return 0;
   2da48:	2000      	movs	r0, #0
   2da4a:	e004      	b.n	2da56 <ble_gatts_svc_set_visibility+0x36>
                ble_att_svr_hide_range(entry->handle, entry->end_group_handle);
   2da4c:	88d1      	ldrh	r1, [r2, #6]
   2da4e:	f7fa feb5 	bl	287bc <ble_att_svr_hide_range>
   2da52:	e7f9      	b.n	2da48 <ble_gatts_svc_set_visibility+0x28>
    return BLE_HS_ENOENT;
   2da54:	2005      	movs	r0, #5
}
   2da56:	bd10      	pop	{r4, pc}
   2da58:	100051e8 	.word	0x100051e8
   2da5c:	10005224 	.word	0x10005224

0002da60 <ble_gatts_count_cfg>:
int
ble_gatts_count_cfg(const struct ble_gatt_svc_def *defs)
{
   2da60:	b500      	push	{lr}
   2da62:	b085      	sub	sp, #20
    struct ble_gatt_resources res = { 0 };
   2da64:	2300      	movs	r3, #0
   2da66:	9301      	str	r3, [sp, #4]
   2da68:	9302      	str	r3, [sp, #8]
   2da6a:	9303      	str	r3, [sp, #12]
    int rc;

    rc = ble_gatts_count_resources(defs, &res);
   2da6c:	a901      	add	r1, sp, #4
   2da6e:	f7ff f933 	bl	2ccd8 <ble_gatts_count_resources>
    if (rc != 0) {
   2da72:	b990      	cbnz	r0, 2da9a <ble_gatts_count_cfg+0x3a>
        return rc;
    }

    ble_hs_max_services += res.svcs;
   2da74:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   2da78:	4a09      	ldr	r2, [pc, #36]	; (2daa0 <ble_gatts_count_cfg+0x40>)
   2da7a:	8811      	ldrh	r1, [r2, #0]
   2da7c:	440b      	add	r3, r1
   2da7e:	8013      	strh	r3, [r2, #0]
    ble_hs_max_attrs += res.attrs;
   2da80:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2da84:	4a07      	ldr	r2, [pc, #28]	; (2daa4 <ble_gatts_count_cfg+0x44>)
   2da86:	8811      	ldrh	r1, [r2, #0]
   2da88:	440b      	add	r3, r1
   2da8a:	8013      	strh	r3, [r2, #0]

    /* Reserve an extra CCCD for the cache. */
    ble_hs_max_client_configs +=
        res.cccds * (MYNEWT_VAL(BLE_MAX_CONNECTIONS) + 1);
   2da8c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    ble_hs_max_client_configs +=
   2da90:	4a05      	ldr	r2, [pc, #20]	; (2daa8 <ble_gatts_count_cfg+0x48>)
   2da92:	8813      	ldrh	r3, [r2, #0]
   2da94:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   2da98:	8013      	strh	r3, [r2, #0]

    return 0;
}
   2da9a:	b005      	add	sp, #20
   2da9c:	f85d fb04 	ldr.w	pc, [sp], #4
   2daa0:	10005330 	.word	0x10005330
   2daa4:	1000532c 	.word	0x1000532c
   2daa8:	1000532e 	.word	0x1000532e

0002daac <ble_gatts_lcl_svc_foreach>:

void
ble_gatts_lcl_svc_foreach(ble_gatt_svc_foreach_fn cb, void *arg)
{
   2daac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dab0:	4680      	mov	r8, r0
   2dab2:	460f      	mov	r7, r1
    int i;

    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   2dab4:	2400      	movs	r4, #0
   2dab6:	4b09      	ldr	r3, [pc, #36]	; (2dadc <ble_gatts_lcl_svc_foreach+0x30>)
   2dab8:	881b      	ldrh	r3, [r3, #0]
   2daba:	42a3      	cmp	r3, r4
   2dabc:	dd0b      	ble.n	2dad6 <ble_gatts_lcl_svc_foreach+0x2a>
        cb(ble_gatts_svc_entries[i].svc,
   2dabe:	4b08      	ldr	r3, [pc, #32]	; (2dae0 <ble_gatts_lcl_svc_foreach+0x34>)
   2dac0:	681d      	ldr	r5, [r3, #0]
   2dac2:	eb05 06c4 	add.w	r6, r5, r4, lsl #3
   2dac6:	463b      	mov	r3, r7
   2dac8:	88f2      	ldrh	r2, [r6, #6]
   2daca:	88b1      	ldrh	r1, [r6, #4]
   2dacc:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   2dad0:	47c0      	blx	r8
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   2dad2:	3401      	adds	r4, #1
   2dad4:	e7ef      	b.n	2dab6 <ble_gatts_lcl_svc_foreach+0xa>
           ble_gatts_svc_entries[i].handle,
           ble_gatts_svc_entries[i].end_group_handle, arg);
    }
}
   2dad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2dada:	bf00      	nop
   2dadc:	100051e8 	.word	0x100051e8
   2dae0:	10005224 	.word	0x10005224

0002dae4 <ble_gatts_reset>:

int
ble_gatts_reset(void)
{
   2dae4:	b510      	push	{r4, lr}
    int rc;

    ble_hs_lock();
   2dae6:	f000 fa53 	bl	2df90 <ble_hs_lock>

    if (!ble_gatts_mutable()) {
   2daea:	f7ff fcc4 	bl	2d476 <ble_gatts_mutable>
   2daee:	b920      	cbnz	r0, 2dafa <ble_gatts_reset+0x16>
        rc = BLE_HS_EBUSY;
   2daf0:	240f      	movs	r4, #15
        rc = 0;

        /* Note: gatts memory gets freed on next call to ble_gatts_start(). */
    }

    ble_hs_unlock();
   2daf2:	f000 fa51 	bl	2df98 <ble_hs_unlock>

    return rc;
}
   2daf6:	4620      	mov	r0, r4
   2daf8:	bd10      	pop	{r4, pc}
        ble_att_svr_reset();
   2dafa:	f7fa fe77 	bl	287ec <ble_att_svr_reset>
        ble_gatts_num_cfgable_chrs = 0;
   2dafe:	2400      	movs	r4, #0
   2db00:	4b01      	ldr	r3, [pc, #4]	; (2db08 <ble_gatts_reset+0x24>)
   2db02:	601c      	str	r4, [r3, #0]
        rc = 0;
   2db04:	e7f5      	b.n	2daf2 <ble_gatts_reset+0xe>
   2db06:	bf00      	nop
   2db08:	100051e0 	.word	0x100051e0

0002db0c <ble_gatts_init>:

int
ble_gatts_init(void)
{
   2db0c:	b500      	push	{lr}
   2db0e:	b083      	sub	sp, #12
    int rc;

    ble_gatts_num_cfgable_chrs = 0;
   2db10:	2300      	movs	r3, #0
   2db12:	4a09      	ldr	r2, [pc, #36]	; (2db38 <ble_gatts_init+0x2c>)
   2db14:	6013      	str	r3, [r2, #0]
    ble_gatts_clt_cfgs = NULL;
   2db16:	4a09      	ldr	r2, [pc, #36]	; (2db3c <ble_gatts_init+0x30>)
   2db18:	6013      	str	r3, [r2, #0]

    rc = stats_init_and_reg(
   2db1a:	4a09      	ldr	r2, [pc, #36]	; (2db40 <ble_gatts_init+0x34>)
   2db1c:	9201      	str	r2, [sp, #4]
   2db1e:	9300      	str	r3, [sp, #0]
   2db20:	220a      	movs	r2, #10
   2db22:	2104      	movs	r1, #4
   2db24:	4807      	ldr	r0, [pc, #28]	; (2db44 <ble_gatts_init+0x38>)
   2db26:	f7f0 fa05 	bl	1df34 <stats_init_and_reg>
        STATS_HDR(ble_gatts_stats), STATS_SIZE_INIT_PARMS(ble_gatts_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_gatts_stats), "ble_gatts");
    if (rc != 0) {
   2db2a:	b910      	cbnz	r0, 2db32 <ble_gatts_init+0x26>
        return BLE_HS_EOS;
    }

    return 0;

}
   2db2c:	b003      	add	sp, #12
   2db2e:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   2db32:	200b      	movs	r0, #11
   2db34:	e7fa      	b.n	2db2c <ble_gatts_init+0x20>
   2db36:	bf00      	nop
   2db38:	100051e0 	.word	0x100051e0
   2db3c:	100051dc 	.word	0x100051dc
   2db40:	0003951c 	.word	0x0003951c
   2db44:	100051ec 	.word	0x100051ec

0002db48 <ble_gatt_show_local_inc_svc>:
}

static int
ble_gatt_show_local_inc_svc(const struct ble_gatt_svc_def *svc,
                            uint16_t handle, char *uuid_buf)
{
   2db48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2db4c:	4688      	mov	r8, r1
   2db4e:	4617      	mov	r7, r2
    const struct ble_gatt_svc_def **includes;
    int num = 0;

    for (includes = &svc->includes[0]; *includes != NULL; ++includes) {
   2db50:	6884      	ldr	r4, [r0, #8]
    int num = 0;
   2db52:	2600      	movs	r6, #0
    for (includes = &svc->includes[0]; *includes != NULL; ++includes) {
   2db54:	6823      	ldr	r3, [r4, #0]
   2db56:	b1bb      	cbz	r3, 2db88 <ble_gatt_show_local_inc_svc+0x40>
        console_printf("included service\n");
   2db58:	480d      	ldr	r0, [pc, #52]	; (2db90 <ble_gatt_show_local_inc_svc+0x48>)
   2db5a:	f7ee faed 	bl	1c138 <console_printf>
        console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
                       "%s\n", " ", "uuid",
                       ble_uuid_to_str((*includes)->uuid, uuid_buf));
   2db5e:	f854 3b04 	ldr.w	r3, [r4], #4
        console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   2db62:	4639      	mov	r1, r7
   2db64:	6858      	ldr	r0, [r3, #4]
   2db66:	f003 fc35 	bl	313d4 <ble_uuid_to_str>
   2db6a:	4603      	mov	r3, r0
   2db6c:	4d09      	ldr	r5, [pc, #36]	; (2db94 <ble_gatt_show_local_inc_svc+0x4c>)
   2db6e:	4a0a      	ldr	r2, [pc, #40]	; (2db98 <ble_gatt_show_local_inc_svc+0x50>)
   2db70:	4629      	mov	r1, r5
   2db72:	480a      	ldr	r0, [pc, #40]	; (2db9c <ble_gatt_show_local_inc_svc+0x54>)
   2db74:	f7ee fae0 	bl	1c138 <console_printf>
        console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   2db78:	4643      	mov	r3, r8
   2db7a:	4a09      	ldr	r2, [pc, #36]	; (2dba0 <ble_gatt_show_local_inc_svc+0x58>)
   2db7c:	4629      	mov	r1, r5
   2db7e:	4809      	ldr	r0, [pc, #36]	; (2dba4 <ble_gatt_show_local_inc_svc+0x5c>)
   2db80:	f7ee fada 	bl	1c138 <console_printf>
                       "%d\n", " ", "attr handle", handle);
        ++num;
   2db84:	3601      	adds	r6, #1
    for (includes = &svc->includes[0]; *includes != NULL; ++includes) {
   2db86:	e7e5      	b.n	2db54 <ble_gatt_show_local_inc_svc+0xc>
    }

    return num;
}
   2db88:	4630      	mov	r0, r6
   2db8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2db8e:	bf00      	nop
   2db90:	00039528 	.word	0x00039528
   2db94:	00035008 	.word	0x00035008
   2db98:	00036518 	.word	0x00036518
   2db9c:	0003953c 	.word	0x0003953c
   2dba0:	0003954c 	.word	0x0003954c
   2dba4:	00039558 	.word	0x00039558

0002dba8 <ble_gatts_flags_to_str>:
{
   2dba8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dbac:	4681      	mov	r9, r0
   2dbae:	4688      	mov	r8, r1
   2dbb0:	4615      	mov	r5, r2
    strcpy(buf, "[");
   2dbb2:	4b1b      	ldr	r3, [pc, #108]	; (2dc20 <ble_gatts_flags_to_str+0x78>)
   2dbb4:	881b      	ldrh	r3, [r3, #0]
   2dbb6:	800b      	strh	r3, [r1, #0]
    length += 1;
   2dbb8:	2601      	movs	r6, #1
    bool non_empty = false;
   2dbba:	f04f 0a00 	mov.w	sl, #0
    for (bit = 0; names[bit]; ++bit) {
   2dbbe:	4654      	mov	r4, sl
   2dbc0:	e006      	b.n	2dbd0 <ble_gatts_flags_to_str+0x28>
            strcat(buf, names[bit]);
   2dbc2:	59e9      	ldr	r1, [r5, r7]
   2dbc4:	4640      	mov	r0, r8
   2dbc6:	f006 fb55 	bl	34274 <strcat>
            non_empty = true;
   2dbca:	f04f 0a01 	mov.w	sl, #1
    for (bit = 0; names[bit]; ++bit) {
   2dbce:	3401      	adds	r4, #1
   2dbd0:	00a7      	lsls	r7, r4, #2
   2dbd2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   2dbd6:	b1c0      	cbz	r0, 2dc0a <ble_gatts_flags_to_str+0x62>
        if (flags & (1 << bit)) {
   2dbd8:	fa49 f304 	asr.w	r3, r9, r4
   2dbdc:	f013 0f01 	tst.w	r3, #1
   2dbe0:	d0f5      	beq.n	2dbce <ble_gatts_flags_to_str+0x26>
            length += strlen(names[bit]);
   2dbe2:	f7ed f89c 	bl	1ad1e <strlen>
   2dbe6:	4406      	add	r6, r0
            if (length + 1 >= BLE_CHR_FLAGS_STR_LEN) {
   2dbe8:	f106 0b01 	add.w	fp, r6, #1
   2dbec:	f1bb 0fb3 	cmp.w	fp, #179	; 0xb3
   2dbf0:	d812      	bhi.n	2dc18 <ble_gatts_flags_to_str+0x70>
            if (non_empty) {
   2dbf2:	f1ba 0f00 	cmp.w	sl, #0
   2dbf6:	d0e4      	beq.n	2dbc2 <ble_gatts_flags_to_str+0x1a>
                strcat(buf, "|");
   2dbf8:	4640      	mov	r0, r8
   2dbfa:	f7ed f890 	bl	1ad1e <strlen>
   2dbfe:	4b09      	ldr	r3, [pc, #36]	; (2dc24 <ble_gatts_flags_to_str+0x7c>)
   2dc00:	881b      	ldrh	r3, [r3, #0]
   2dc02:	f828 3000 	strh.w	r3, [r8, r0]
                length += 1;
   2dc06:	465e      	mov	r6, fp
   2dc08:	e7db      	b.n	2dbc2 <ble_gatts_flags_to_str+0x1a>
    strcat(buf, "]");
   2dc0a:	4640      	mov	r0, r8
   2dc0c:	f7ed f887 	bl	1ad1e <strlen>
   2dc10:	4b05      	ldr	r3, [pc, #20]	; (2dc28 <ble_gatts_flags_to_str+0x80>)
   2dc12:	881b      	ldrh	r3, [r3, #0]
   2dc14:	f828 3000 	strh.w	r3, [r8, r0]
}
   2dc18:	4640      	mov	r0, r8
   2dc1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dc1e:	bf00      	nop
   2dc20:	00039568 	.word	0x00039568
   2dc24:	0003956c 	.word	0x0003956c
   2dc28:	00036df0 	.word	0x00036df0

0002dc2c <ble_gatt_show_local_chr>:
{
   2dc2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dc30:	460e      	mov	r6, r1
   2dc32:	4692      	mov	sl, r2
   2dc34:	4699      	mov	r9, r3
    for (chr = svc->characteristics; chr && chr->uuid; ++chr) {
   2dc36:	f8d0 b00c 	ldr.w	fp, [r0, #12]
   2dc3a:	e02b      	b.n	2dc94 <ble_gatt_show_local_chr+0x68>
            console_printf("ccc descriptor\n");
   2dc3c:	484f      	ldr	r0, [pc, #316]	; (2dd7c <ble_gatt_show_local_chr+0x150>)
   2dc3e:	f7ee fa7b 	bl	1c138 <console_printf>
            console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   2dc42:	4651      	mov	r1, sl
   2dc44:	484e      	ldr	r0, [pc, #312]	; (2dd80 <ble_gatt_show_local_chr+0x154>)
   2dc46:	f003 fbc5 	bl	313d4 <ble_uuid_to_str>
   2dc4a:	4603      	mov	r3, r0
   2dc4c:	4a4d      	ldr	r2, [pc, #308]	; (2dd84 <ble_gatt_show_local_chr+0x158>)
   2dc4e:	4621      	mov	r1, r4
   2dc50:	4638      	mov	r0, r7
   2dc52:	f7ee fa71 	bl	1c138 <console_printf>
            console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   2dc56:	f8df 814c 	ldr.w	r8, [pc, #332]	; 2dda4 <ble_gatt_show_local_chr+0x178>
   2dc5a:	462b      	mov	r3, r5
   2dc5c:	4a4a      	ldr	r2, [pc, #296]	; (2dd88 <ble_gatt_show_local_chr+0x15c>)
   2dc5e:	4621      	mov	r1, r4
   2dc60:	4640      	mov	r0, r8
   2dc62:	f7ee fa69 	bl	1c138 <console_printf>
            console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   2dc66:	2300      	movs	r3, #0
   2dc68:	4a48      	ldr	r2, [pc, #288]	; (2dd8c <ble_gatt_show_local_chr+0x160>)
   2dc6a:	4621      	mov	r1, r4
   2dc6c:	4640      	mov	r0, r8
   2dc6e:	f7ee fa63 	bl	1c138 <console_printf>
            console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   2dc72:	4a47      	ldr	r2, [pc, #284]	; (2dd90 <ble_gatt_show_local_chr+0x164>)
   2dc74:	4649      	mov	r1, r9
   2dc76:	2003      	movs	r0, #3
   2dc78:	f7ff ff96 	bl	2dba8 <ble_gatts_flags_to_str>
   2dc7c:	4603      	mov	r3, r0
   2dc7e:	4a45      	ldr	r2, [pc, #276]	; (2dd94 <ble_gatt_show_local_chr+0x168>)
   2dc80:	4621      	mov	r1, r4
   2dc82:	4638      	mov	r0, r7
   2dc84:	f7ee fa58 	bl	1c138 <console_printf>
            handle++;
   2dc88:	1cf5      	adds	r5, r6, #3
   2dc8a:	b2ad      	uxth	r5, r5
   2dc8c:	e040      	b.n	2dd10 <ble_gatt_show_local_chr+0xe4>
    for (chr = svc->characteristics; chr && chr->uuid; ++chr) {
   2dc8e:	f10b 0b18 	add.w	fp, fp, #24
   2dc92:	462e      	mov	r6, r5
   2dc94:	f1bb 0f00 	cmp.w	fp, #0
   2dc98:	d06d      	beq.n	2dd76 <ble_gatt_show_local_chr+0x14a>
   2dc9a:	f8db 3000 	ldr.w	r3, [fp]
   2dc9e:	2b00      	cmp	r3, #0
   2dca0:	d069      	beq.n	2dd76 <ble_gatt_show_local_chr+0x14a>
        console_printf("characteristic\n");
   2dca2:	483d      	ldr	r0, [pc, #244]	; (2dd98 <ble_gatt_show_local_chr+0x16c>)
   2dca4:	f7ee fa48 	bl	1c138 <console_printf>
        console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   2dca8:	4651      	mov	r1, sl
   2dcaa:	f8db 0000 	ldr.w	r0, [fp]
   2dcae:	f003 fb91 	bl	313d4 <ble_uuid_to_str>
   2dcb2:	4603      	mov	r3, r0
   2dcb4:	4c39      	ldr	r4, [pc, #228]	; (2dd9c <ble_gatt_show_local_chr+0x170>)
   2dcb6:	4f3a      	ldr	r7, [pc, #232]	; (2dda0 <ble_gatt_show_local_chr+0x174>)
   2dcb8:	4a32      	ldr	r2, [pc, #200]	; (2dd84 <ble_gatt_show_local_chr+0x158>)
   2dcba:	4621      	mov	r1, r4
   2dcbc:	4638      	mov	r0, r7
   2dcbe:	f7ee fa3b 	bl	1c138 <console_printf>
        console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   2dcc2:	4d38      	ldr	r5, [pc, #224]	; (2dda4 <ble_gatt_show_local_chr+0x178>)
   2dcc4:	4633      	mov	r3, r6
   2dcc6:	4a38      	ldr	r2, [pc, #224]	; (2dda8 <ble_gatt_show_local_chr+0x17c>)
   2dcc8:	4621      	mov	r1, r4
   2dcca:	4628      	mov	r0, r5
   2dccc:	f7ee fa34 	bl	1c138 <console_printf>
        console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   2dcd0:	1c73      	adds	r3, r6, #1
   2dcd2:	4a36      	ldr	r2, [pc, #216]	; (2ddac <ble_gatt_show_local_chr+0x180>)
   2dcd4:	4621      	mov	r1, r4
   2dcd6:	4628      	mov	r0, r5
   2dcd8:	f7ee fa2e 	bl	1c138 <console_printf>
        console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   2dcdc:	f89b 3012 	ldrb.w	r3, [fp, #18]
   2dce0:	4a2a      	ldr	r2, [pc, #168]	; (2dd8c <ble_gatt_show_local_chr+0x160>)
   2dce2:	4621      	mov	r1, r4
   2dce4:	4628      	mov	r0, r5
   2dce6:	f7ee fa27 	bl	1c138 <console_printf>
        console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   2dcea:	4a31      	ldr	r2, [pc, #196]	; (2ddb0 <ble_gatt_show_local_chr+0x184>)
   2dcec:	4649      	mov	r1, r9
   2dcee:	f8bb 0010 	ldrh.w	r0, [fp, #16]
   2dcf2:	f7ff ff59 	bl	2dba8 <ble_gatts_flags_to_str>
   2dcf6:	4603      	mov	r3, r0
   2dcf8:	4a26      	ldr	r2, [pc, #152]	; (2dd94 <ble_gatt_show_local_chr+0x168>)
   2dcfa:	4621      	mov	r1, r4
   2dcfc:	4638      	mov	r0, r7
   2dcfe:	f7ee fa1b 	bl	1c138 <console_printf>
        handle += 2;
   2dd02:	1cb5      	adds	r5, r6, #2
   2dd04:	b2ad      	uxth	r5, r5
        if ((chr->flags & BLE_GATT_CHR_F_NOTIFY) ||
   2dd06:	f8bb 3010 	ldrh.w	r3, [fp, #16]
   2dd0a:	f013 0f30 	tst.w	r3, #48	; 0x30
   2dd0e:	d195      	bne.n	2dc3c <ble_gatt_show_local_chr+0x10>
        for (dsc = chr->descriptors; dsc && dsc->uuid; ++dsc) {
   2dd10:	f8db 400c 	ldr.w	r4, [fp, #12]
   2dd14:	2c00      	cmp	r4, #0
   2dd16:	d0ba      	beq.n	2dc8e <ble_gatt_show_local_chr+0x62>
   2dd18:	6823      	ldr	r3, [r4, #0]
   2dd1a:	2b00      	cmp	r3, #0
   2dd1c:	d0b7      	beq.n	2dc8e <ble_gatt_show_local_chr+0x62>
            console_printf("descriptor\n");
   2dd1e:	4825      	ldr	r0, [pc, #148]	; (2ddb4 <ble_gatt_show_local_chr+0x188>)
   2dd20:	f7ee fa0a 	bl	1c138 <console_printf>
            console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   2dd24:	4651      	mov	r1, sl
   2dd26:	6820      	ldr	r0, [r4, #0]
   2dd28:	f003 fb54 	bl	313d4 <ble_uuid_to_str>
   2dd2c:	4603      	mov	r3, r0
   2dd2e:	4e1b      	ldr	r6, [pc, #108]	; (2dd9c <ble_gatt_show_local_chr+0x170>)
   2dd30:	4f1b      	ldr	r7, [pc, #108]	; (2dda0 <ble_gatt_show_local_chr+0x174>)
   2dd32:	4a14      	ldr	r2, [pc, #80]	; (2dd84 <ble_gatt_show_local_chr+0x158>)
   2dd34:	4631      	mov	r1, r6
   2dd36:	4638      	mov	r0, r7
   2dd38:	f7ee f9fe 	bl	1c138 <console_printf>
            console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   2dd3c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 2dda4 <ble_gatt_show_local_chr+0x178>
   2dd40:	462b      	mov	r3, r5
   2dd42:	4a11      	ldr	r2, [pc, #68]	; (2dd88 <ble_gatt_show_local_chr+0x15c>)
   2dd44:	4631      	mov	r1, r6
   2dd46:	4640      	mov	r0, r8
   2dd48:	f7ee f9f6 	bl	1c138 <console_printf>
            console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   2dd4c:	7963      	ldrb	r3, [r4, #5]
   2dd4e:	4a0f      	ldr	r2, [pc, #60]	; (2dd8c <ble_gatt_show_local_chr+0x160>)
   2dd50:	4631      	mov	r1, r6
   2dd52:	4640      	mov	r0, r8
   2dd54:	f7ee f9f0 	bl	1c138 <console_printf>
            console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   2dd58:	4a0d      	ldr	r2, [pc, #52]	; (2dd90 <ble_gatt_show_local_chr+0x164>)
   2dd5a:	4649      	mov	r1, r9
   2dd5c:	7920      	ldrb	r0, [r4, #4]
   2dd5e:	f7ff ff23 	bl	2dba8 <ble_gatts_flags_to_str>
   2dd62:	4603      	mov	r3, r0
   2dd64:	4a0b      	ldr	r2, [pc, #44]	; (2dd94 <ble_gatt_show_local_chr+0x168>)
   2dd66:	4631      	mov	r1, r6
   2dd68:	4638      	mov	r0, r7
   2dd6a:	f7ee f9e5 	bl	1c138 <console_printf>
            handle++;
   2dd6e:	3501      	adds	r5, #1
   2dd70:	b2ad      	uxth	r5, r5
        for (dsc = chr->descriptors; dsc && dsc->uuid; ++dsc) {
   2dd72:	3410      	adds	r4, #16
   2dd74:	e7ce      	b.n	2dd14 <ble_gatt_show_local_chr+0xe8>
}
   2dd76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dd7a:	bf00      	nop
   2dd7c:	000395a8 	.word	0x000395a8
   2dd80:	100006ec 	.word	0x100006ec
   2dd84:	00036518 	.word	0x00036518
   2dd88:	000395dc 	.word	0x000395dc
   2dd8c:	00039598 	.word	0x00039598
   2dd90:	000396d8 	.word	0x000396d8
   2dd94:	000353fc 	.word	0x000353fc
   2dd98:	00039570 	.word	0x00039570
   2dd9c:	00035008 	.word	0x00035008
   2dda0:	0003953c 	.word	0x0003953c
   2dda4:	00039558 	.word	0x00039558
   2dda8:	00039580 	.word	0x00039580
   2ddac:	0003958c 	.word	0x0003958c
   2ddb0:	00039698 	.word	0x00039698
   2ddb4:	000395ac 	.word	0x000395ac

0002ddb8 <ble_gatt_show_local_svc>:

static void
ble_gatt_show_local_svc(const struct ble_gatt_svc_def *svc,
                        uint16_t handle, uint16_t end_group_handle,
                        void *arg)
{
   2ddb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ddbc:	b0b8      	sub	sp, #224	; 0xe0
   2ddbe:	4605      	mov	r5, r0
   2ddc0:	460c      	mov	r4, r1
   2ddc2:	4617      	mov	r7, r2
    char uuid_buf[BLE_UUID_STR_LEN];
    char flags_buf[BLE_CHR_FLAGS_STR_LEN];

    console_printf("%s service\n",
                   svc->type == BLE_GATT_SVC_TYPE_PRIMARY ?
   2ddc4:	7803      	ldrb	r3, [r0, #0]
    console_printf("%s service\n",
   2ddc6:	2b01      	cmp	r3, #1
   2ddc8:	d030      	beq.n	2de2c <ble_gatt_show_local_svc+0x74>
   2ddca:	4919      	ldr	r1, [pc, #100]	; (2de30 <ble_gatt_show_local_svc+0x78>)
   2ddcc:	4819      	ldr	r0, [pc, #100]	; (2de34 <ble_gatt_show_local_svc+0x7c>)
   2ddce:	f7ee f9b3 	bl	1c138 <console_printf>
                           "primary" : "secondary");
    console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   2ddd2:	a92e      	add	r1, sp, #184	; 0xb8
   2ddd4:	6868      	ldr	r0, [r5, #4]
   2ddd6:	f003 fafd 	bl	313d4 <ble_uuid_to_str>
   2ddda:	4603      	mov	r3, r0
   2dddc:	4e16      	ldr	r6, [pc, #88]	; (2de38 <ble_gatt_show_local_svc+0x80>)
   2ddde:	4a17      	ldr	r2, [pc, #92]	; (2de3c <ble_gatt_show_local_svc+0x84>)
   2dde0:	4631      	mov	r1, r6
   2dde2:	4817      	ldr	r0, [pc, #92]	; (2de40 <ble_gatt_show_local_svc+0x88>)
   2dde4:	f7ee f9a8 	bl	1c138 <console_printf>
                   "%s\n", " ", "uuid",
                   ble_uuid_to_str(svc->uuid, uuid_buf));
    console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   2dde8:	f8df 8064 	ldr.w	r8, [pc, #100]	; 2de50 <ble_gatt_show_local_svc+0x98>
   2ddec:	4623      	mov	r3, r4
   2ddee:	4a15      	ldr	r2, [pc, #84]	; (2de44 <ble_gatt_show_local_svc+0x8c>)
   2ddf0:	4631      	mov	r1, r6
   2ddf2:	4640      	mov	r0, r8
   2ddf4:	f7ee f9a0 	bl	1c138 <console_printf>
                   "%d\n", " ", "handle",
                   handle);
    console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   2ddf8:	463b      	mov	r3, r7
   2ddfa:	4a13      	ldr	r2, [pc, #76]	; (2de48 <ble_gatt_show_local_svc+0x90>)
   2ddfc:	4631      	mov	r1, r6
   2ddfe:	4640      	mov	r0, r8
   2de00:	f7ee f99a 	bl	1c138 <console_printf>
                   "%d\n", " ", "end_handle",
                   end_group_handle);
    handle++;
   2de04:	3401      	adds	r4, #1
   2de06:	b2a4      	uxth	r4, r4

    if (svc->includes) {
   2de08:	68ab      	ldr	r3, [r5, #8]
   2de0a:	b133      	cbz	r3, 2de1a <ble_gatt_show_local_svc+0x62>
        handle += ble_gatt_show_local_inc_svc(svc, handle, uuid_buf);
   2de0c:	aa2e      	add	r2, sp, #184	; 0xb8
   2de0e:	4621      	mov	r1, r4
   2de10:	4628      	mov	r0, r5
   2de12:	f7ff fe99 	bl	2db48 <ble_gatt_show_local_inc_svc>
   2de16:	4404      	add	r4, r0
   2de18:	b2a4      	uxth	r4, r4
    }

    ble_gatt_show_local_chr(svc, handle,
   2de1a:	ab01      	add	r3, sp, #4
   2de1c:	aa2e      	add	r2, sp, #184	; 0xb8
   2de1e:	4621      	mov	r1, r4
   2de20:	4628      	mov	r0, r5
   2de22:	f7ff ff03 	bl	2dc2c <ble_gatt_show_local_chr>
                            uuid_buf, flags_buf);
}
   2de26:	b038      	add	sp, #224	; 0xe0
   2de28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    console_printf("%s service\n",
   2de2c:	4907      	ldr	r1, [pc, #28]	; (2de4c <ble_gatt_show_local_svc+0x94>)
   2de2e:	e7cd      	b.n	2ddcc <ble_gatt_show_local_svc+0x14>
   2de30:	000395b8 	.word	0x000395b8
   2de34:	000395cc 	.word	0x000395cc
   2de38:	00035008 	.word	0x00035008
   2de3c:	00036518 	.word	0x00036518
   2de40:	0003953c 	.word	0x0003953c
   2de44:	000395dc 	.word	0x000395dc
   2de48:	000395d8 	.word	0x000395d8
   2de4c:	000395c4 	.word	0x000395c4
   2de50:	00039558 	.word	0x00039558

0002de54 <ble_gatts_show_local>:

void
ble_gatts_show_local(void)
{
   2de54:	b508      	push	{r3, lr}
    ble_gatts_lcl_svc_foreach(ble_gatt_show_local_svc, NULL);
   2de56:	2100      	movs	r1, #0
   2de58:	4801      	ldr	r0, [pc, #4]	; (2de60 <ble_gatts_show_local+0xc>)
   2de5a:	f7ff fe27 	bl	2daac <ble_gatts_lcl_svc_foreach>
}
   2de5e:	bd08      	pop	{r3, pc}
   2de60:	0002ddb9 	.word	0x0002ddb9

0002de64 <ble_hs_wakeup_tx_conn>:
    }
}

static int
ble_hs_wakeup_tx_conn(struct ble_hs_conn *conn)
{
   2de64:	b510      	push	{r4, lr}
   2de66:	b082      	sub	sp, #8
   2de68:	4604      	mov	r4, r0
    struct os_mbuf_pkthdr *omp;
    struct os_mbuf *om;
    int rc;

    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   2de6a:	e00a      	b.n	2de82 <ble_hs_wakeup_tx_conn+0x1e>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   2de6c:	f104 023c 	add.w	r2, r4, #60	; 0x3c
   2de70:	6422      	str	r2, [r4, #64]	; 0x40

        om = OS_MBUF_PKTHDR_TO_MBUF(omp);
   2de72:	3b10      	subs	r3, #16
   2de74:	9301      	str	r3, [sp, #4]
        rc = ble_hs_hci_acl_tx_now(conn, &om);
   2de76:	a901      	add	r1, sp, #4
   2de78:	4620      	mov	r0, r4
   2de7a:	f001 fbb5 	bl	2f5e8 <ble_hs_hci_acl_tx_now>
        if (rc == BLE_HS_EAGAIN) {
   2de7e:	2801      	cmp	r0, #1
   2de80:	d006      	beq.n	2de90 <ble_hs_wakeup_tx_conn+0x2c>
    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   2de82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2de84:	b17b      	cbz	r3, 2dea6 <ble_hs_wakeup_tx_conn+0x42>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   2de86:	685a      	ldr	r2, [r3, #4]
   2de88:	63e2      	str	r2, [r4, #60]	; 0x3c
   2de8a:	2a00      	cmp	r2, #0
   2de8c:	d1f1      	bne.n	2de72 <ble_hs_wakeup_tx_conn+0xe>
   2de8e:	e7ed      	b.n	2de6c <ble_hs_wakeup_tx_conn+0x8>
            /* Controller is at capacity.  This packet will be the first to
             * get transmitted next time around.
             */
            STAILQ_INSERT_HEAD(&conn->bhc_tx_q, OS_MBUF_PKTHDR(om), omp_next);
   2de90:	9b01      	ldr	r3, [sp, #4]
   2de92:	f103 0110 	add.w	r1, r3, #16
   2de96:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   2de98:	615a      	str	r2, [r3, #20]
   2de9a:	b10a      	cbz	r2, 2dea0 <ble_hs_wakeup_tx_conn+0x3c>
   2de9c:	63e1      	str	r1, [r4, #60]	; 0x3c
            return BLE_HS_EAGAIN;
   2de9e:	e003      	b.n	2dea8 <ble_hs_wakeup_tx_conn+0x44>
            STAILQ_INSERT_HEAD(&conn->bhc_tx_q, OS_MBUF_PKTHDR(om), omp_next);
   2dea0:	3314      	adds	r3, #20
   2dea2:	6423      	str	r3, [r4, #64]	; 0x40
   2dea4:	e7fa      	b.n	2de9c <ble_hs_wakeup_tx_conn+0x38>
        }
    }

    return 0;
   2dea6:	2000      	movs	r0, #0
}
   2dea8:	b002      	add	sp, #8
   2deaa:	bd10      	pop	{r4, pc}

0002deac <ble_hs_event_rx_hci_ev>:
#endif
}

static void
ble_hs_event_rx_hci_ev(struct ble_npl_event *ev)
{
   2deac:	b510      	push	{r4, lr}
   2deae:	4601      	mov	r1, r0
    return ev->ev.ev_arg;
   2deb0:	6884      	ldr	r4, [r0, #8]
    const struct ble_hci_ev *hci_ev;
    int rc;

    hci_ev = ble_npl_event_get_arg(ev);

    rc = os_memblock_put(&ble_hs_hci_ev_pool, ev);
   2deb2:	4803      	ldr	r0, [pc, #12]	; (2dec0 <ble_hs_event_rx_hci_ev+0x14>)
   2deb4:	f7eb fff2 	bl	19e9c <os_memblock_put>
#if BLE_MONITOR
    ble_monitor_send(BLE_MONITOR_OPCODE_EVENT_PKT, hci_ev,
                     hci_ev->length + sizeof(*hci_ev));
#endif

    ble_hs_hci_evt_process(hci_ev);
   2deb8:	4620      	mov	r0, r4
   2deba:	f001 fe5b 	bl	2fb74 <ble_hs_hci_evt_process>
}
   2debe:	bd10      	pop	{r4, pc}
   2dec0:	10005270 	.word	0x10005270

0002dec4 <ble_hs_clear_rx_queue>:
{
   2dec4:	b508      	push	{r3, lr}
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
   2dec6:	4805      	ldr	r0, [pc, #20]	; (2dedc <ble_hs_clear_rx_queue+0x18>)
   2dec8:	f002 f902 	bl	300d0 <ble_mqueue_get>
   2decc:	4603      	mov	r3, r0
   2dece:	b118      	cbz	r0, 2ded8 <ble_hs_clear_rx_queue+0x14>
        os_mbuf_free_chain(om);
   2ded0:	4618      	mov	r0, r3
   2ded2:	f7eb fb7c 	bl	195ce <os_mbuf_free_chain>
   2ded6:	e7f6      	b.n	2dec6 <ble_hs_clear_rx_queue+0x2>
}
   2ded8:	bd08      	pop	{r3, pc}
   2deda:	bf00      	nop
   2dedc:	10005348 	.word	0x10005348

0002dee0 <ble_hs_rx_data>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
ble_hs_rx_data(struct os_mbuf *om, void *arg)
{
   2dee0:	b510      	push	{r4, lr}
   2dee2:	4604      	mov	r4, r0
    int rc;

    /* If flow control is enabled, mark this packet with its corresponding
     * connection handle.
     */
    ble_hs_flow_track_data_mbuf(om);
   2dee4:	f001 fa0d 	bl	2f302 <ble_hs_flow_track_data_mbuf>

    rc = ble_mqueue_put(&ble_hs_rx_q, ble_hs_evq, om);
   2dee8:	4622      	mov	r2, r4
   2deea:	4b06      	ldr	r3, [pc, #24]	; (2df04 <ble_hs_rx_data+0x24>)
   2deec:	6819      	ldr	r1, [r3, #0]
   2deee:	4806      	ldr	r0, [pc, #24]	; (2df08 <ble_hs_rx_data+0x28>)
   2def0:	f002 f8ff 	bl	300f2 <ble_mqueue_put>
    if (rc != 0) {
   2def4:	b900      	cbnz	r0, 2def8 <ble_hs_rx_data+0x18>
        os_mbuf_free_chain(om);
        return BLE_HS_EOS;
    }

    return 0;
}
   2def6:	bd10      	pop	{r4, pc}
        os_mbuf_free_chain(om);
   2def8:	4620      	mov	r0, r4
   2defa:	f7eb fb68 	bl	195ce <os_mbuf_free_chain>
        return BLE_HS_EOS;
   2defe:	200b      	movs	r0, #11
   2df00:	e7f9      	b.n	2def6 <ble_hs_rx_data+0x16>
   2df02:	bf00      	nop
   2df04:	1000526c 	.word	0x1000526c
   2df08:	10005348 	.word	0x10005348

0002df0c <ble_hs_event_tx_notify>:
{
   2df0c:	b508      	push	{r3, lr}
    ble_gatts_tx_notifications();
   2df0e:	f7ff fd4f 	bl	2d9b0 <ble_gatts_tx_notifications>
}
   2df12:	bd08      	pop	{r3, pc}

0002df14 <ble_hs_evq_get>:
}
   2df14:	4b01      	ldr	r3, [pc, #4]	; (2df1c <ble_hs_evq_get+0x8>)
   2df16:	6818      	ldr	r0, [r3, #0]
   2df18:	4770      	bx	lr
   2df1a:	bf00      	nop
   2df1c:	1000526c 	.word	0x1000526c

0002df20 <ble_hs_sched_start_stage2>:
{
   2df20:	b508      	push	{r3, lr}
    ble_npl_eventq_put((struct ble_npl_eventq *)ble_hs_evq_get(),
   2df22:	f7ff fff7 	bl	2df14 <ble_hs_evq_get>
    os_eventq_put(&evq->evq, &ev->ev);
   2df26:	4902      	ldr	r1, [pc, #8]	; (2df30 <ble_hs_sched_start_stage2+0x10>)
   2df28:	f7eb fa55 	bl	193d6 <os_eventq_put>
}
   2df2c:	bd08      	pop	{r3, pc}
   2df2e:	bf00      	nop
   2df30:	1000524c 	.word	0x1000524c

0002df34 <ble_hs_event_start_stage1>:
{
   2df34:	b508      	push	{r3, lr}
    ble_hs_sched_start_stage2();
   2df36:	f7ff fff3 	bl	2df20 <ble_hs_sched_start_stage2>
}
   2df3a:	bd08      	pop	{r3, pc}

0002df3c <ble_hs_evq_set>:
    ble_hs_evq = evq;
   2df3c:	4b01      	ldr	r3, [pc, #4]	; (2df44 <ble_hs_evq_set+0x8>)
   2df3e:	6018      	str	r0, [r3, #0]
}
   2df40:	4770      	bx	lr
   2df42:	bf00      	nop
   2df44:	1000526c 	.word	0x1000526c

0002df48 <ble_hs_is_parent_task>:
{
   2df48:	b508      	push	{r3, lr}
    return os_started();
   2df4a:	f7eb f817 	bl	18f7c <os_started>
    return !ble_npl_os_started() ||
   2df4e:	b908      	cbnz	r0, 2df54 <ble_hs_is_parent_task+0xc>
   2df50:	2001      	movs	r0, #1
}
   2df52:	bd08      	pop	{r3, pc}
    return os_sched_get_current_task();
   2df54:	f7ec f94e 	bl	1a1f4 <os_sched_get_current_task>
           ble_npl_get_current_task_id() == ble_hs_parent_task;
   2df58:	4b03      	ldr	r3, [pc, #12]	; (2df68 <ble_hs_is_parent_task+0x20>)
   2df5a:	681b      	ldr	r3, [r3, #0]
    return !ble_npl_os_started() ||
   2df5c:	4283      	cmp	r3, r0
   2df5e:	d001      	beq.n	2df64 <ble_hs_is_parent_task+0x1c>
   2df60:	2000      	movs	r0, #0
   2df62:	e7f6      	b.n	2df52 <ble_hs_is_parent_task+0xa>
   2df64:	2001      	movs	r0, #1
   2df66:	e7f4      	b.n	2df52 <ble_hs_is_parent_task+0xa>
   2df68:	10005340 	.word	0x10005340

0002df6c <ble_hs_lock_nested>:
{
   2df6c:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   2df6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2df72:	4802      	ldr	r0, [pc, #8]	; (2df7c <ble_hs_lock_nested+0x10>)
   2df74:	f7ec fdd0 	bl	1ab18 <os_mutex_pend>
}
   2df78:	bd08      	pop	{r3, pc}
   2df7a:	bf00      	nop
   2df7c:	10005334 	.word	0x10005334

0002df80 <ble_hs_unlock_nested>:
{
   2df80:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   2df82:	4802      	ldr	r0, [pc, #8]	; (2df8c <ble_hs_unlock_nested+0xc>)
   2df84:	f7ec fd68 	bl	1aa58 <os_mutex_release>
}
   2df88:	bd08      	pop	{r3, pc}
   2df8a:	bf00      	nop
   2df8c:	10005334 	.word	0x10005334

0002df90 <ble_hs_lock>:
{
   2df90:	b508      	push	{r3, lr}
    ble_hs_lock_nested();
   2df92:	f7ff ffeb 	bl	2df6c <ble_hs_lock_nested>
}
   2df96:	bd08      	pop	{r3, pc}

0002df98 <ble_hs_unlock>:
{
   2df98:	b508      	push	{r3, lr}
    ble_hs_unlock_nested();
   2df9a:	f7ff fff1 	bl	2df80 <ble_hs_unlock_nested>
}
   2df9e:	bd08      	pop	{r3, pc}

0002dfa0 <ble_hs_process_rx_data_queue>:
{
   2dfa0:	b508      	push	{r3, lr}
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
   2dfa2:	4805      	ldr	r0, [pc, #20]	; (2dfb8 <ble_hs_process_rx_data_queue+0x18>)
   2dfa4:	f002 f894 	bl	300d0 <ble_mqueue_get>
   2dfa8:	4603      	mov	r3, r0
   2dfaa:	b118      	cbz	r0, 2dfb4 <ble_hs_process_rx_data_queue+0x14>
        ble_hs_hci_evt_acl_process(om);
   2dfac:	4618      	mov	r0, r3
   2dfae:	f001 fdff 	bl	2fbb0 <ble_hs_hci_evt_acl_process>
   2dfb2:	e7f6      	b.n	2dfa2 <ble_hs_process_rx_data_queue+0x2>
}
   2dfb4:	bd08      	pop	{r3, pc}
   2dfb6:	bf00      	nop
   2dfb8:	10005348 	.word	0x10005348

0002dfbc <ble_hs_event_rx_data>:
{
   2dfbc:	b508      	push	{r3, lr}
    ble_hs_process_rx_data_queue();
   2dfbe:	f7ff ffef 	bl	2dfa0 <ble_hs_process_rx_data_queue>
}
   2dfc2:	bd08      	pop	{r3, pc}

0002dfc4 <ble_hs_wakeup_tx>:
{
   2dfc4:	b510      	push	{r4, lr}
    ble_hs_lock();
   2dfc6:	f7ff ffe3 	bl	2df90 <ble_hs_lock>
    for (conn = ble_hs_conn_first();
   2dfca:	f001 f88f 	bl	2f0ec <ble_hs_conn_first>
   2dfce:	b148      	cbz	r0, 2dfe4 <ble_hs_wakeup_tx+0x20>
        if (conn->bhc_flags & BLE_HS_CONN_F_TX_FRAG) {
   2dfd0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   2dfd4:	f013 0f04 	tst.w	r3, #4
   2dfd8:	d101      	bne.n	2dfde <ble_hs_wakeup_tx+0x1a>
         conn = SLIST_NEXT(conn, bhc_next)) {
   2dfda:	6800      	ldr	r0, [r0, #0]
   2dfdc:	e7f7      	b.n	2dfce <ble_hs_wakeup_tx+0xa>
            rc = ble_hs_wakeup_tx_conn(conn);
   2dfde:	f7ff ff41 	bl	2de64 <ble_hs_wakeup_tx_conn>
            if (rc != 0) {
   2dfe2:	b948      	cbnz	r0, 2dff8 <ble_hs_wakeup_tx+0x34>
    for (conn = ble_hs_conn_first();
   2dfe4:	f001 f882 	bl	2f0ec <ble_hs_conn_first>
   2dfe8:	4604      	mov	r4, r0
   2dfea:	b12c      	cbz	r4, 2dff8 <ble_hs_wakeup_tx+0x34>
        rc = ble_hs_wakeup_tx_conn(conn);
   2dfec:	4620      	mov	r0, r4
   2dfee:	f7ff ff39 	bl	2de64 <ble_hs_wakeup_tx_conn>
        if (rc != 0) {
   2dff2:	b908      	cbnz	r0, 2dff8 <ble_hs_wakeup_tx+0x34>
         conn = SLIST_NEXT(conn, bhc_next)) {
   2dff4:	6824      	ldr	r4, [r4, #0]
   2dff6:	e7f8      	b.n	2dfea <ble_hs_wakeup_tx+0x26>
    ble_hs_unlock();
   2dff8:	f7ff ffce 	bl	2df98 <ble_hs_unlock>
}
   2dffc:	bd10      	pop	{r4, pc}
	...

0002e000 <ble_hs_is_enabled>:
    return ble_hs_enabled_state == BLE_HS_ENABLED_STATE_ON;
   2e000:	4b03      	ldr	r3, [pc, #12]	; (2e010 <ble_hs_is_enabled+0x10>)
   2e002:	7818      	ldrb	r0, [r3, #0]
}
   2e004:	2802      	cmp	r0, #2
   2e006:	bf14      	ite	ne
   2e008:	2000      	movne	r0, #0
   2e00a:	2001      	moveq	r0, #1
   2e00c:	4770      	bx	lr
   2e00e:	bf00      	nop
   2e010:	10005228 	.word	0x10005228

0002e014 <ble_hs_timer_reset>:
{
   2e014:	b510      	push	{r4, lr}
   2e016:	4604      	mov	r4, r0
    if (!ble_hs_is_enabled()) {
   2e018:	f7ff fff2 	bl	2e000 <ble_hs_is_enabled>
   2e01c:	b918      	cbnz	r0, 2e026 <ble_hs_timer_reset+0x12>
    os_callout_stop(&co->co);
   2e01e:	4804      	ldr	r0, [pc, #16]	; (2e030 <ble_hs_timer_reset+0x1c>)
   2e020:	f7eb f8b0 	bl	19184 <os_callout_stop>
}
   2e024:	bd10      	pop	{r4, pc}
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   2e026:	4621      	mov	r1, r4
   2e028:	4801      	ldr	r0, [pc, #4]	; (2e030 <ble_hs_timer_reset+0x1c>)
   2e02a:	f7eb f8c9 	bl	191c0 <os_callout_reset>
   2e02e:	e7f9      	b.n	2e024 <ble_hs_timer_reset+0x10>
   2e030:	1000539c 	.word	0x1000539c

0002e034 <ble_hs_timer_sched>:
    if (ticks_from_now == BLE_HS_FOREVER) {
   2e034:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   2e038:	4298      	cmp	r0, r3
   2e03a:	d010      	beq.n	2e05e <ble_hs_timer_sched+0x2a>
{
   2e03c:	b510      	push	{r4, lr}
   2e03e:	4604      	mov	r4, r0
    return os_time_get();
   2e040:	f7ec fb02 	bl	1a648 <os_time_get>
    abs_time = ble_npl_time_get() + ticks_from_now;
   2e044:	4420      	add	r0, r4
   2e046:	4b06      	ldr	r3, [pc, #24]	; (2e060 <ble_hs_timer_sched+0x2c>)
   2e048:	69db      	ldr	r3, [r3, #28]
    if (!ble_npl_callout_is_active(&ble_hs_timer) ||
   2e04a:	b123      	cbz	r3, 2e056 <ble_hs_timer_sched+0x22>
    return co->co.c_ticks;
   2e04c:	4b04      	ldr	r3, [pc, #16]	; (2e060 <ble_hs_timer_sched+0x2c>)
   2e04e:	695b      	ldr	r3, [r3, #20]
            ((ble_npl_stime_t)(abs_time -
   2e050:	1ac0      	subs	r0, r0, r3
    if (!ble_npl_callout_is_active(&ble_hs_timer) ||
   2e052:	2800      	cmp	r0, #0
   2e054:	da02      	bge.n	2e05c <ble_hs_timer_sched+0x28>
        ble_hs_timer_reset(ticks_from_now);
   2e056:	4620      	mov	r0, r4
   2e058:	f7ff ffdc 	bl	2e014 <ble_hs_timer_reset>
}
   2e05c:	bd10      	pop	{r4, pc}
   2e05e:	4770      	bx	lr
   2e060:	1000539c 	.word	0x1000539c

0002e064 <ble_hs_sync>:
{
   2e064:	b510      	push	{r4, lr}
    ble_hs_sync_state = BLE_HS_SYNC_STATE_BRINGUP;
   2e066:	4b14      	ldr	r3, [pc, #80]	; (2e0b8 <ble_hs_sync+0x54>)
   2e068:	2201      	movs	r2, #1
   2e06a:	701a      	strb	r2, [r3, #0]
    rc = ble_hs_startup_go();
   2e06c:	f002 fa57 	bl	3051e <ble_hs_startup_go>
    if (rc == 0) {
   2e070:	4604      	mov	r4, r0
   2e072:	b940      	cbnz	r0, 2e086 <ble_hs_sync+0x22>
        ble_hs_sync_state = BLE_HS_SYNC_STATE_GOOD;
   2e074:	4b10      	ldr	r3, [pc, #64]	; (2e0b8 <ble_hs_sync+0x54>)
   2e076:	2202      	movs	r2, #2
   2e078:	701a      	strb	r2, [r3, #0]
    ble_hs_timer_sched(retry_tmo_ticks);
   2e07a:	200c      	movs	r0, #12
   2e07c:	f7ff ffda 	bl	2e034 <ble_hs_timer_sched>
    if (rc == 0) {
   2e080:	b12c      	cbz	r4, 2e08e <ble_hs_sync+0x2a>
}
   2e082:	4620      	mov	r0, r4
   2e084:	bd10      	pop	{r4, pc}
        ble_hs_sync_state = BLE_HS_SYNC_STATE_BAD;
   2e086:	4b0c      	ldr	r3, [pc, #48]	; (2e0b8 <ble_hs_sync+0x54>)
   2e088:	2200      	movs	r2, #0
   2e08a:	701a      	strb	r2, [r3, #0]
   2e08c:	e7f5      	b.n	2e07a <ble_hs_sync+0x16>
        rc = ble_hs_misc_restore_irks();
   2e08e:	f002 f80b 	bl	300a8 <ble_hs_misc_restore_irks>
        if (rc != 0) {
   2e092:	4604      	mov	r4, r0
   2e094:	b940      	cbnz	r0, 2e0a8 <ble_hs_sync+0x44>
        if (ble_hs_cfg.sync_cb != NULL) {
   2e096:	4b09      	ldr	r3, [pc, #36]	; (2e0bc <ble_hs_sync+0x58>)
   2e098:	691b      	ldr	r3, [r3, #16]
   2e09a:	b103      	cbz	r3, 2e09e <ble_hs_sync+0x3a>
            ble_hs_cfg.sync_cb();
   2e09c:	4798      	blx	r3
        STATS_INC(ble_hs_stats, sync);
   2e09e:	4a08      	ldr	r2, [pc, #32]	; (2e0c0 <ble_hs_sync+0x5c>)
   2e0a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2e0a2:	3301      	adds	r3, #1
   2e0a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    return rc;
   2e0a6:	e7ec      	b.n	2e082 <ble_hs_sync+0x1e>
            BLE_HS_LOG(INFO, "Failed to restore IRKs from store; status=%d\n",
   2e0a8:	4603      	mov	r3, r0
   2e0aa:	4a06      	ldr	r2, [pc, #24]	; (2e0c4 <ble_hs_sync+0x60>)
   2e0ac:	2101      	movs	r1, #1
   2e0ae:	2004      	movs	r0, #4
   2e0b0:	f7ee fe3c 	bl	1cd2c <modlog_printf>
   2e0b4:	e7ef      	b.n	2e096 <ble_hs_sync+0x32>
   2e0b6:	bf00      	nop
   2e0b8:	10005398 	.word	0x10005398
   2e0bc:	100006f0 	.word	0x100006f0
   2e0c0:	10005360 	.word	0x10005360
   2e0c4:	000396fc 	.word	0x000396fc

0002e0c8 <ble_hs_reset>:
{
   2e0c8:	b508      	push	{r3, lr}
    STATS_INC(ble_hs_stats, reset);
   2e0ca:	4a0f      	ldr	r2, [pc, #60]	; (2e108 <ble_hs_reset+0x40>)
   2e0cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2e0ce:	3301      	adds	r3, #1
   2e0d0:	6293      	str	r3, [r2, #40]	; 0x28
    ble_hs_sync_state = 0;
   2e0d2:	4b0e      	ldr	r3, [pc, #56]	; (2e10c <ble_hs_reset+0x44>)
   2e0d4:	2200      	movs	r2, #0
   2e0d6:	701a      	strb	r2, [r3, #0]
    (void)ble_hci_trans_reset();
   2e0d8:	f004 f904 	bl	322e4 <ble_hci_trans_reset>
    ble_hs_clear_rx_queue();
   2e0dc:	f7ff fef2 	bl	2dec4 <ble_hs_clear_rx_queue>
    ble_gap_reset_state(ble_hs_reset_reason);
   2e0e0:	4b0b      	ldr	r3, [pc, #44]	; (2e110 <ble_hs_reset+0x48>)
   2e0e2:	6818      	ldr	r0, [r3, #0]
   2e0e4:	f7fc f930 	bl	2a348 <ble_gap_reset_state>
    ble_hs_id_reset();
   2e0e8:	f001 ff02 	bl	2fef0 <ble_hs_id_reset>
    if (ble_hs_cfg.reset_cb != NULL && ble_hs_reset_reason != 0) {
   2e0ec:	4b09      	ldr	r3, [pc, #36]	; (2e114 <ble_hs_reset+0x4c>)
   2e0ee:	68db      	ldr	r3, [r3, #12]
   2e0f0:	b11b      	cbz	r3, 2e0fa <ble_hs_reset+0x32>
   2e0f2:	4a07      	ldr	r2, [pc, #28]	; (2e110 <ble_hs_reset+0x48>)
   2e0f4:	6810      	ldr	r0, [r2, #0]
   2e0f6:	b100      	cbz	r0, 2e0fa <ble_hs_reset+0x32>
        ble_hs_cfg.reset_cb(ble_hs_reset_reason);
   2e0f8:	4798      	blx	r3
    ble_hs_reset_reason = 0;
   2e0fa:	4b05      	ldr	r3, [pc, #20]	; (2e110 <ble_hs_reset+0x48>)
   2e0fc:	2200      	movs	r2, #0
   2e0fe:	601a      	str	r2, [r3, #0]
    rc = ble_hs_sync();
   2e100:	f7ff ffb0 	bl	2e064 <ble_hs_sync>
}
   2e104:	bd08      	pop	{r3, pc}
   2e106:	bf00      	nop
   2e108:	10005360 	.word	0x10005360
   2e10c:	10005398 	.word	0x10005398
   2e110:	10005344 	.word	0x10005344
   2e114:	100006f0 	.word	0x100006f0

0002e118 <ble_hs_event_reset>:
{
   2e118:	b508      	push	{r3, lr}
    ble_hs_reset();
   2e11a:	f7ff ffd5 	bl	2e0c8 <ble_hs_reset>
}
   2e11e:	bd08      	pop	{r3, pc}

0002e120 <ble_hs_timer_exp>:
{
   2e120:	b508      	push	{r3, lr}
    switch (ble_hs_sync_state) {
   2e122:	4b13      	ldr	r3, [pc, #76]	; (2e170 <ble_hs_timer_exp+0x50>)
   2e124:	781b      	ldrb	r3, [r3, #0]
   2e126:	b1b3      	cbz	r3, 2e156 <ble_hs_timer_exp+0x36>
   2e128:	2b02      	cmp	r3, #2
   2e12a:	d117      	bne.n	2e15c <ble_hs_timer_exp+0x3c>
        ticks_until_next = ble_gattc_timer();
   2e12c:	f7fd ff58 	bl	2bfe0 <ble_gattc_timer>
        ble_hs_timer_sched(ticks_until_next);
   2e130:	f7ff ff80 	bl	2e034 <ble_hs_timer_sched>
        ticks_until_next = ble_l2cap_sig_timer();
   2e134:	f002 fe82 	bl	30e3c <ble_l2cap_sig_timer>
        ble_hs_timer_sched(ticks_until_next);
   2e138:	f7ff ff7c 	bl	2e034 <ble_hs_timer_sched>
        ble_hs_timer_sched(ticks_until_next);
   2e13c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2e140:	f7ff ff78 	bl	2e034 <ble_hs_timer_sched>
        ticks_until_next = ble_hs_conn_timer();
   2e144:	f001 f884 	bl	2f250 <ble_hs_conn_timer>
        ble_hs_timer_sched(ticks_until_next);
   2e148:	f7ff ff74 	bl	2e034 <ble_hs_timer_sched>
        ticks_until_next = ble_gap_timer();
   2e14c:	f7fb fbe2 	bl	29914 <ble_gap_timer>
        ble_hs_timer_sched(ticks_until_next);
   2e150:	f7ff ff70 	bl	2e034 <ble_hs_timer_sched>
}
   2e154:	bd08      	pop	{r3, pc}
        ble_hs_reset();
   2e156:	f7ff ffb7 	bl	2e0c8 <ble_hs_reset>
        break;
   2e15a:	e7fb      	b.n	2e154 <ble_hs_timer_exp+0x34>
        assert(0);
   2e15c:	f7e6 faca 	bl	146f4 <hal_debugger_connected>
   2e160:	b100      	cbz	r0, 2e164 <ble_hs_timer_exp+0x44>
   2e162:	be01      	bkpt	0x0001
   2e164:	2300      	movs	r3, #0
   2e166:	461a      	mov	r2, r3
   2e168:	4619      	mov	r1, r3
   2e16a:	4618      	mov	r0, r3
   2e16c:	f7ea fde0 	bl	18d30 <__assert_func>
   2e170:	10005398 	.word	0x10005398

0002e174 <ble_hs_timer_resched>:
{
   2e174:	b508      	push	{r3, lr}
    ble_hs_timer_reset(0);
   2e176:	2000      	movs	r0, #0
   2e178:	f7ff ff4c 	bl	2e014 <ble_hs_timer_reset>
}
   2e17c:	bd08      	pop	{r3, pc}
	...

0002e180 <ble_hs_sched_start>:
{
   2e180:	b508      	push	{r3, lr}
    ble_npl_eventq_put((struct ble_npl_eventq *)os_eventq_dflt_get(),
   2e182:	f7eb f9e1 	bl	19548 <os_eventq_dflt_get>
    os_eventq_put(&evq->evq, &ev->ev);
   2e186:	4902      	ldr	r1, [pc, #8]	; (2e190 <ble_hs_sched_start+0x10>)
   2e188:	f7eb f925 	bl	193d6 <os_eventq_put>
}
   2e18c:	bd08      	pop	{r3, pc}
   2e18e:	bf00      	nop
   2e190:	1000523c 	.word	0x1000523c

0002e194 <ble_hs_enqueue_hci_event>:
{
   2e194:	b510      	push	{r4, lr}
   2e196:	4604      	mov	r4, r0
    ev = os_memblock_get(&ble_hs_hci_ev_pool);
   2e198:	480a      	ldr	r0, [pc, #40]	; (2e1c4 <ble_hs_enqueue_hci_event+0x30>)
   2e19a:	f7eb fe57 	bl	19e4c <os_memblock_get>
    if (ev == NULL) {
   2e19e:	b160      	cbz	r0, 2e1ba <ble_hs_enqueue_hci_event+0x26>
   2e1a0:	4601      	mov	r1, r0
    memset(ev, 0, sizeof(*ev));
   2e1a2:	2300      	movs	r3, #0
   2e1a4:	6003      	str	r3, [r0, #0]
   2e1a6:	60c3      	str	r3, [r0, #12]
    ev->ev.ev_queued = 0;
   2e1a8:	7003      	strb	r3, [r0, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   2e1aa:	4b07      	ldr	r3, [pc, #28]	; (2e1c8 <ble_hs_enqueue_hci_event+0x34>)
   2e1ac:	6043      	str	r3, [r0, #4]
    ev->ev.ev_arg = arg;
   2e1ae:	6084      	str	r4, [r0, #8]
    os_eventq_put(&evq->evq, &ev->ev);
   2e1b0:	4b06      	ldr	r3, [pc, #24]	; (2e1cc <ble_hs_enqueue_hci_event+0x38>)
   2e1b2:	6818      	ldr	r0, [r3, #0]
   2e1b4:	f7eb f90f 	bl	193d6 <os_eventq_put>
}
   2e1b8:	bd10      	pop	{r4, pc}
        ble_hci_trans_buf_free(hci_evt);
   2e1ba:	4620      	mov	r0, r4
   2e1bc:	f004 f840 	bl	32240 <ble_hci_trans_buf_free>
   2e1c0:	e7fa      	b.n	2e1b8 <ble_hs_enqueue_hci_event+0x24>
   2e1c2:	bf00      	nop
   2e1c4:	10005270 	.word	0x10005270
   2e1c8:	0002dead 	.word	0x0002dead
   2e1cc:	1000526c 	.word	0x1000526c

0002e1d0 <ble_hs_notifications_sched>:
{
   2e1d0:	b508      	push	{r3, lr}
   2e1d2:	4903      	ldr	r1, [pc, #12]	; (2e1e0 <ble_hs_notifications_sched+0x10>)
   2e1d4:	4b03      	ldr	r3, [pc, #12]	; (2e1e4 <ble_hs_notifications_sched+0x14>)
   2e1d6:	6818      	ldr	r0, [r3, #0]
   2e1d8:	f7eb f8fd 	bl	193d6 <os_eventq_put>
}
   2e1dc:	bd08      	pop	{r3, pc}
   2e1de:	bf00      	nop
   2e1e0:	1000525c 	.word	0x1000525c
   2e1e4:	1000526c 	.word	0x1000526c

0002e1e8 <ble_hs_sched_reset>:
{
   2e1e8:	b508      	push	{r3, lr}
    ble_hs_reset_reason = reason;
   2e1ea:	4b04      	ldr	r3, [pc, #16]	; (2e1fc <ble_hs_sched_reset+0x14>)
   2e1ec:	6018      	str	r0, [r3, #0]
   2e1ee:	4904      	ldr	r1, [pc, #16]	; (2e200 <ble_hs_sched_reset+0x18>)
   2e1f0:	4b04      	ldr	r3, [pc, #16]	; (2e204 <ble_hs_sched_reset+0x1c>)
   2e1f2:	6818      	ldr	r0, [r3, #0]
   2e1f4:	f7eb f8ef 	bl	193d6 <os_eventq_put>
}
   2e1f8:	bd08      	pop	{r3, pc}
   2e1fa:	bf00      	nop
   2e1fc:	10005344 	.word	0x10005344
   2e200:	1000522c 	.word	0x1000522c
   2e204:	1000526c 	.word	0x1000526c

0002e208 <ble_hs_hw_error>:
{
   2e208:	b508      	push	{r3, lr}
    ble_hs_sched_reset(BLE_HS_HW_ERR(hw_code));
   2e20a:	f500 60c0 	add.w	r0, r0, #1536	; 0x600
   2e20e:	f7ff ffeb 	bl	2e1e8 <ble_hs_sched_reset>
}
   2e212:	bd08      	pop	{r3, pc}

0002e214 <ble_hs_start>:
{
   2e214:	b510      	push	{r4, lr}
    ble_hs_lock();
   2e216:	f7ff febb 	bl	2df90 <ble_hs_lock>
    switch (ble_hs_enabled_state) {
   2e21a:	4b18      	ldr	r3, [pc, #96]	; (2e27c <ble_hs_start+0x68>)
   2e21c:	781b      	ldrb	r3, [r3, #0]
   2e21e:	2b01      	cmp	r3, #1
   2e220:	d028      	beq.n	2e274 <ble_hs_start+0x60>
   2e222:	2b02      	cmp	r3, #2
   2e224:	d021      	beq.n	2e26a <ble_hs_start+0x56>
   2e226:	b14b      	cbz	r3, 2e23c <ble_hs_start+0x28>
        assert(0);
   2e228:	f7e6 fa64 	bl	146f4 <hal_debugger_connected>
   2e22c:	b100      	cbz	r0, 2e230 <ble_hs_start+0x1c>
   2e22e:	be01      	bkpt	0x0001
   2e230:	2300      	movs	r3, #0
   2e232:	461a      	mov	r2, r3
   2e234:	4619      	mov	r1, r3
   2e236:	4618      	mov	r0, r3
   2e238:	f7ea fd7a 	bl	18d30 <__assert_func>
        ble_hs_enabled_state = BLE_HS_ENABLED_STATE_ON;
   2e23c:	4b0f      	ldr	r3, [pc, #60]	; (2e27c <ble_hs_start+0x68>)
   2e23e:	2202      	movs	r2, #2
   2e240:	701a      	strb	r2, [r3, #0]
    ble_hs_unlock();
   2e242:	f7ff fea9 	bl	2df98 <ble_hs_unlock>
    return os_sched_get_current_task();
   2e246:	f7eb ffd5 	bl	1a1f4 <os_sched_get_current_task>
    ble_hs_parent_task = ble_npl_get_current_task_id();
   2e24a:	4b0d      	ldr	r3, [pc, #52]	; (2e280 <ble_hs_start+0x6c>)
   2e24c:	6018      	str	r0, [r3, #0]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   2e24e:	2300      	movs	r3, #0
   2e250:	4a0c      	ldr	r2, [pc, #48]	; (2e284 <ble_hs_start+0x70>)
   2e252:	490d      	ldr	r1, [pc, #52]	; (2e288 <ble_hs_start+0x74>)
   2e254:	6809      	ldr	r1, [r1, #0]
   2e256:	480d      	ldr	r0, [pc, #52]	; (2e28c <ble_hs_start+0x78>)
   2e258:	f7ea ff86 	bl	19168 <os_callout_init>
    rc = ble_gatts_start();
   2e25c:	f7ff f9e0 	bl	2d620 <ble_gatts_start>
    if (rc != 0) {
   2e260:	4604      	mov	r4, r0
   2e262:	b928      	cbnz	r0, 2e270 <ble_hs_start+0x5c>
    ble_hs_sync();
   2e264:	f7ff fefe 	bl	2e064 <ble_hs_sync>
    return 0;
   2e268:	e002      	b.n	2e270 <ble_hs_start+0x5c>
    ble_hs_unlock();
   2e26a:	f7ff fe95 	bl	2df98 <ble_hs_unlock>
        rc = BLE_HS_EALREADY;
   2e26e:	2402      	movs	r4, #2
}
   2e270:	4620      	mov	r0, r4
   2e272:	bd10      	pop	{r4, pc}
    ble_hs_unlock();
   2e274:	f7ff fe90 	bl	2df98 <ble_hs_unlock>
        rc = BLE_HS_EBUSY;
   2e278:	240f      	movs	r4, #15
        return rc;
   2e27a:	e7f9      	b.n	2e270 <ble_hs_start+0x5c>
   2e27c:	10005228 	.word	0x10005228
   2e280:	10005340 	.word	0x10005340
   2e284:	0002e121 	.word	0x0002e121
   2e288:	1000526c 	.word	0x1000526c
   2e28c:	1000539c 	.word	0x1000539c

0002e290 <ble_hs_event_start_stage2>:
{
   2e290:	b508      	push	{r3, lr}
    rc = ble_hs_start();
   2e292:	f7ff ffbf 	bl	2e214 <ble_hs_start>
    assert(rc == 0);
   2e296:	b900      	cbnz	r0, 2e29a <ble_hs_event_start_stage2+0xa>
}
   2e298:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   2e29a:	f7e6 fa2b 	bl	146f4 <hal_debugger_connected>
   2e29e:	b100      	cbz	r0, 2e2a2 <ble_hs_event_start_stage2+0x12>
   2e2a0:	be01      	bkpt	0x0001
   2e2a2:	2300      	movs	r3, #0
   2e2a4:	461a      	mov	r2, r3
   2e2a6:	4619      	mov	r1, r3
   2e2a8:	4618      	mov	r0, r3
   2e2aa:	f7ea fd41 	bl	18d30 <__assert_func>

0002e2ae <ble_hs_tx_data>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_tx_data(struct os_mbuf *om)
{
   2e2ae:	b508      	push	{r3, lr}
#if BLE_MONITOR
    ble_monitor_send_om(BLE_MONITOR_OPCODE_ACL_TX_PKT, om);
#endif

    return ble_hci_trans_hs_acl_tx(om);
   2e2b0:	f003 ff72 	bl	32198 <ble_hci_trans_hs_acl_tx>
}
   2e2b4:	bd08      	pop	{r3, pc}
	...

0002e2b8 <ble_hs_init>:

void
ble_hs_init(void)
{
   2e2b8:	b510      	push	{r4, lr}
   2e2ba:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   2e2bc:	4b82      	ldr	r3, [pc, #520]	; (2e4c8 <ble_hs_init+0x210>)
   2e2be:	781b      	ldrb	r3, [r3, #0]
   2e2c0:	2b00      	cmp	r3, #0
   2e2c2:	d074      	beq.n	2e3ae <ble_hs_init+0xf6>

    /* Create memory pool of OS events */
    rc = os_mempool_init(&ble_hs_hci_ev_pool, BLE_HS_HCI_EVT_COUNT,
   2e2c4:	4b81      	ldr	r3, [pc, #516]	; (2e4cc <ble_hs_init+0x214>)
   2e2c6:	9300      	str	r3, [sp, #0]
   2e2c8:	4b81      	ldr	r3, [pc, #516]	; (2e4d0 <ble_hs_init+0x218>)
   2e2ca:	2210      	movs	r2, #16
   2e2cc:	210a      	movs	r1, #10
   2e2ce:	4881      	ldr	r0, [pc, #516]	; (2e4d4 <ble_hs_init+0x21c>)
   2e2d0:	f7eb fd78 	bl	19dc4 <os_mempool_init>
                         sizeof (struct ble_npl_event), ble_hs_hci_os_event_buf,
                         "ble_hs_hci_ev_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   2e2d4:	2800      	cmp	r0, #0
   2e2d6:	d174      	bne.n	2e3c2 <ble_hs_init+0x10a>

    /* These get initialized here to allow unit tests to run without a zeroed
     * bss.
     */
    ble_hs_reset_reason = 0;
   2e2d8:	2300      	movs	r3, #0
   2e2da:	4a7f      	ldr	r2, [pc, #508]	; (2e4d8 <ble_hs_init+0x220>)
   2e2dc:	6013      	str	r3, [r2, #0]
    ble_hs_enabled_state = BLE_HS_ENABLED_STATE_OFF;
   2e2de:	4a7f      	ldr	r2, [pc, #508]	; (2e4dc <ble_hs_init+0x224>)
   2e2e0:	7013      	strb	r3, [r2, #0]
    memset(ev, 0, sizeof(*ev));
   2e2e2:	4a7f      	ldr	r2, [pc, #508]	; (2e4e0 <ble_hs_init+0x228>)
   2e2e4:	6013      	str	r3, [r2, #0]
   2e2e6:	6093      	str	r3, [r2, #8]
   2e2e8:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   2e2ea:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   2e2ec:	497d      	ldr	r1, [pc, #500]	; (2e4e4 <ble_hs_init+0x22c>)
   2e2ee:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   2e2f0:	4a7d      	ldr	r2, [pc, #500]	; (2e4e8 <ble_hs_init+0x230>)
   2e2f2:	6013      	str	r3, [r2, #0]
   2e2f4:	6093      	str	r3, [r2, #8]
   2e2f6:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   2e2f8:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   2e2fa:	497c      	ldr	r1, [pc, #496]	; (2e4ec <ble_hs_init+0x234>)
   2e2fc:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   2e2fe:	4a7c      	ldr	r2, [pc, #496]	; (2e4f0 <ble_hs_init+0x238>)
   2e300:	6013      	str	r3, [r2, #0]
   2e302:	6093      	str	r3, [r2, #8]
   2e304:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   2e306:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   2e308:	497a      	ldr	r1, [pc, #488]	; (2e4f4 <ble_hs_init+0x23c>)
   2e30a:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   2e30c:	4a7a      	ldr	r2, [pc, #488]	; (2e4f8 <ble_hs_init+0x240>)
   2e30e:	6013      	str	r3, [r2, #0]
   2e310:	6093      	str	r3, [r2, #8]
   2e312:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   2e314:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   2e316:	4b79      	ldr	r3, [pc, #484]	; (2e4fc <ble_hs_init+0x244>)
   2e318:	6053      	str	r3, [r2, #4]
    ble_npl_event_init(&ble_hs_ev_start_stage1, ble_hs_event_start_stage1,
                       NULL);
    ble_npl_event_init(&ble_hs_ev_start_stage2, ble_hs_event_start_stage2,
                       NULL);

    ble_hs_hci_init();
   2e31a:	f001 f9d9 	bl	2f6d0 <ble_hs_hci_init>

    rc = ble_hs_conn_init();
   2e31e:	f000 ffd5 	bl	2f2cc <ble_hs_conn_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2e322:	2800      	cmp	r0, #0
   2e324:	d15a      	bne.n	2e3dc <ble_hs_init+0x124>
    rc = ble_hs_periodic_sync_init();
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif

#if NIMBLE_BLE_CONNECT
    rc = ble_l2cap_init();
   2e326:	f002 fb37 	bl	30998 <ble_l2cap_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2e32a:	2800      	cmp	r0, #0
   2e32c:	d163      	bne.n	2e3f6 <ble_hs_init+0x13e>

    rc = ble_att_init();
   2e32e:	f7f8 fb0d 	bl	2694c <ble_att_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2e332:	2800      	cmp	r0, #0
   2e334:	d16c      	bne.n	2e410 <ble_hs_init+0x158>

    rc = ble_att_svr_init();
   2e336:	f7fa faa9 	bl	2888c <ble_att_svr_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2e33a:	2800      	cmp	r0, #0
   2e33c:	d175      	bne.n	2e42a <ble_hs_init+0x172>

    rc = ble_gattc_init();
   2e33e:	f7fe fb65 	bl	2ca0c <ble_gattc_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2e342:	2800      	cmp	r0, #0
   2e344:	d17e      	bne.n	2e444 <ble_hs_init+0x18c>

    rc = ble_gatts_init();
   2e346:	f7ff fbe1 	bl	2db0c <ble_gatts_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2e34a:	2800      	cmp	r0, #0
   2e34c:	f040 8087 	bne.w	2e45e <ble_hs_init+0x1a6>
#endif
    rc = ble_gap_init();
   2e350:	f7fc faee 	bl	2a930 <ble_gap_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2e354:	2800      	cmp	r0, #0
   2e356:	f040 808f 	bne.w	2e478 <ble_hs_init+0x1c0>

    ble_hs_stop_init();
   2e35a:	f002 f9db 	bl	30714 <ble_hs_stop_init>

    ble_mqueue_init(&ble_hs_rx_q, ble_hs_event_rx_data, NULL);
   2e35e:	2200      	movs	r2, #0
   2e360:	4967      	ldr	r1, [pc, #412]	; (2e500 <ble_hs_init+0x248>)
   2e362:	4868      	ldr	r0, [pc, #416]	; (2e504 <ble_hs_init+0x24c>)
   2e364:	f001 feaa 	bl	300bc <ble_mqueue_init>

    rc = stats_init_and_reg(
   2e368:	4b67      	ldr	r3, [pc, #412]	; (2e508 <ble_hs_init+0x250>)
   2e36a:	9301      	str	r3, [sp, #4]
   2e36c:	2300      	movs	r3, #0
   2e36e:	9300      	str	r3, [sp, #0]
   2e370:	220b      	movs	r2, #11
   2e372:	2104      	movs	r1, #4
   2e374:	4865      	ldr	r0, [pc, #404]	; (2e50c <ble_hs_init+0x254>)
   2e376:	f7ef fddd 	bl	1df34 <stats_init_and_reg>
        STATS_HDR(ble_hs_stats), STATS_SIZE_INIT_PARMS(ble_hs_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_hs_stats), "ble_hs");
    SYSINIT_PANIC_ASSERT(rc == 0);
   2e37a:	2800      	cmp	r0, #0
   2e37c:	f040 8089 	bne.w	2e492 <ble_hs_init+0x1da>
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   2e380:	4863      	ldr	r0, [pc, #396]	; (2e510 <ble_hs_init+0x258>)
   2e382:	f7ec fb5f 	bl	1aa44 <os_mutex_init>

    rc = ble_npl_mutex_init(&ble_hs_mutex);
    SYSINIT_PANIC_ASSERT(rc == 0);
   2e386:	2800      	cmp	r0, #0
   2e388:	f040 8090 	bne.w	2e4ac <ble_hs_init+0x1f4>
#if MYNEWT_VAL(BLE_HS_DEBUG)
    ble_hs_dbg_mutex_locked = 0;
#endif

#ifdef MYNEWT
    ble_hs_evq_set((struct ble_npl_eventq *)os_eventq_dflt_get());
   2e38c:	f7eb f8dc 	bl	19548 <os_eventq_dflt_get>
   2e390:	f7ff fdd4 	bl	2df3c <ble_hs_evq_set>
#else
    ble_hs_evq_set(nimble_port_get_dflt_eventq());
#endif

    /* Configure the HCI transport to communicate with a host. */
    ble_hci_trans_cfg_hs(ble_hs_hci_rx_evt, NULL, ble_hs_rx_data, NULL);
   2e394:	2300      	movs	r3, #0
   2e396:	4a5f      	ldr	r2, [pc, #380]	; (2e514 <ble_hs_init+0x25c>)
   2e398:	4619      	mov	r1, r3
   2e39a:	485f      	ldr	r0, [pc, #380]	; (2e518 <ble_hs_init+0x260>)
   2e39c:	f003 fea8 	bl	320f0 <ble_hci_trans_cfg_hs>
     * queue ensures the event won't run until the end of main().  This allows
     * the application to configure this package in the meantime.
     */
#if MYNEWT_VAL(BLE_HS_AUTO_START)
#ifdef MYNEWT
    ble_npl_eventq_put((struct ble_npl_eventq *)os_eventq_dflt_get(),
   2e3a0:	f7eb f8d2 	bl	19548 <os_eventq_dflt_get>
    os_eventq_put(&evq->evq, &ev->ev);
   2e3a4:	4952      	ldr	r1, [pc, #328]	; (2e4f0 <ble_hs_init+0x238>)
   2e3a6:	f7eb f816 	bl	193d6 <os_eventq_put>
#endif

#if BLE_MONITOR
    ble_monitor_new_index(0, (uint8_t[6]){ }, "nimble0");
#endif
}
   2e3aa:	b002      	add	sp, #8
   2e3ac:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   2e3ae:	f7e6 f9a1 	bl	146f4 <hal_debugger_connected>
   2e3b2:	b100      	cbz	r0, 2e3b6 <ble_hs_init+0xfe>
   2e3b4:	be01      	bkpt	0x0001
   2e3b6:	2300      	movs	r3, #0
   2e3b8:	461a      	mov	r2, r3
   2e3ba:	4619      	mov	r1, r3
   2e3bc:	4618      	mov	r0, r3
   2e3be:	f7ea fcb7 	bl	18d30 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2e3c2:	f7e6 f997 	bl	146f4 <hal_debugger_connected>
   2e3c6:	b100      	cbz	r0, 2e3ca <ble_hs_init+0x112>
   2e3c8:	be01      	bkpt	0x0001
   2e3ca:	2000      	movs	r0, #0
   2e3cc:	9000      	str	r0, [sp, #0]
   2e3ce:	4b53      	ldr	r3, [pc, #332]	; (2e51c <ble_hs_init+0x264>)
   2e3d0:	681c      	ldr	r4, [r3, #0]
   2e3d2:	4603      	mov	r3, r0
   2e3d4:	4602      	mov	r2, r0
   2e3d6:	4601      	mov	r1, r0
   2e3d8:	47a0      	blx	r4
   2e3da:	e77d      	b.n	2e2d8 <ble_hs_init+0x20>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2e3dc:	f7e6 f98a 	bl	146f4 <hal_debugger_connected>
   2e3e0:	b100      	cbz	r0, 2e3e4 <ble_hs_init+0x12c>
   2e3e2:	be01      	bkpt	0x0001
   2e3e4:	2000      	movs	r0, #0
   2e3e6:	9000      	str	r0, [sp, #0]
   2e3e8:	4b4c      	ldr	r3, [pc, #304]	; (2e51c <ble_hs_init+0x264>)
   2e3ea:	681c      	ldr	r4, [r3, #0]
   2e3ec:	4603      	mov	r3, r0
   2e3ee:	4602      	mov	r2, r0
   2e3f0:	4601      	mov	r1, r0
   2e3f2:	47a0      	blx	r4
   2e3f4:	e797      	b.n	2e326 <ble_hs_init+0x6e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2e3f6:	f7e6 f97d 	bl	146f4 <hal_debugger_connected>
   2e3fa:	b100      	cbz	r0, 2e3fe <ble_hs_init+0x146>
   2e3fc:	be01      	bkpt	0x0001
   2e3fe:	2000      	movs	r0, #0
   2e400:	9000      	str	r0, [sp, #0]
   2e402:	4b46      	ldr	r3, [pc, #280]	; (2e51c <ble_hs_init+0x264>)
   2e404:	681c      	ldr	r4, [r3, #0]
   2e406:	4603      	mov	r3, r0
   2e408:	4602      	mov	r2, r0
   2e40a:	4601      	mov	r1, r0
   2e40c:	47a0      	blx	r4
   2e40e:	e78e      	b.n	2e32e <ble_hs_init+0x76>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2e410:	f7e6 f970 	bl	146f4 <hal_debugger_connected>
   2e414:	b100      	cbz	r0, 2e418 <ble_hs_init+0x160>
   2e416:	be01      	bkpt	0x0001
   2e418:	2000      	movs	r0, #0
   2e41a:	9000      	str	r0, [sp, #0]
   2e41c:	4b3f      	ldr	r3, [pc, #252]	; (2e51c <ble_hs_init+0x264>)
   2e41e:	681c      	ldr	r4, [r3, #0]
   2e420:	4603      	mov	r3, r0
   2e422:	4602      	mov	r2, r0
   2e424:	4601      	mov	r1, r0
   2e426:	47a0      	blx	r4
   2e428:	e785      	b.n	2e336 <ble_hs_init+0x7e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2e42a:	f7e6 f963 	bl	146f4 <hal_debugger_connected>
   2e42e:	b100      	cbz	r0, 2e432 <ble_hs_init+0x17a>
   2e430:	be01      	bkpt	0x0001
   2e432:	2000      	movs	r0, #0
   2e434:	9000      	str	r0, [sp, #0]
   2e436:	4b39      	ldr	r3, [pc, #228]	; (2e51c <ble_hs_init+0x264>)
   2e438:	681c      	ldr	r4, [r3, #0]
   2e43a:	4603      	mov	r3, r0
   2e43c:	4602      	mov	r2, r0
   2e43e:	4601      	mov	r1, r0
   2e440:	47a0      	blx	r4
   2e442:	e77c      	b.n	2e33e <ble_hs_init+0x86>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2e444:	f7e6 f956 	bl	146f4 <hal_debugger_connected>
   2e448:	b100      	cbz	r0, 2e44c <ble_hs_init+0x194>
   2e44a:	be01      	bkpt	0x0001
   2e44c:	2000      	movs	r0, #0
   2e44e:	9000      	str	r0, [sp, #0]
   2e450:	4b32      	ldr	r3, [pc, #200]	; (2e51c <ble_hs_init+0x264>)
   2e452:	681c      	ldr	r4, [r3, #0]
   2e454:	4603      	mov	r3, r0
   2e456:	4602      	mov	r2, r0
   2e458:	4601      	mov	r1, r0
   2e45a:	47a0      	blx	r4
   2e45c:	e773      	b.n	2e346 <ble_hs_init+0x8e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2e45e:	f7e6 f949 	bl	146f4 <hal_debugger_connected>
   2e462:	b100      	cbz	r0, 2e466 <ble_hs_init+0x1ae>
   2e464:	be01      	bkpt	0x0001
   2e466:	2000      	movs	r0, #0
   2e468:	9000      	str	r0, [sp, #0]
   2e46a:	4b2c      	ldr	r3, [pc, #176]	; (2e51c <ble_hs_init+0x264>)
   2e46c:	681c      	ldr	r4, [r3, #0]
   2e46e:	4603      	mov	r3, r0
   2e470:	4602      	mov	r2, r0
   2e472:	4601      	mov	r1, r0
   2e474:	47a0      	blx	r4
   2e476:	e76b      	b.n	2e350 <ble_hs_init+0x98>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2e478:	f7e6 f93c 	bl	146f4 <hal_debugger_connected>
   2e47c:	b100      	cbz	r0, 2e480 <ble_hs_init+0x1c8>
   2e47e:	be01      	bkpt	0x0001
   2e480:	2000      	movs	r0, #0
   2e482:	9000      	str	r0, [sp, #0]
   2e484:	4b25      	ldr	r3, [pc, #148]	; (2e51c <ble_hs_init+0x264>)
   2e486:	681c      	ldr	r4, [r3, #0]
   2e488:	4603      	mov	r3, r0
   2e48a:	4602      	mov	r2, r0
   2e48c:	4601      	mov	r1, r0
   2e48e:	47a0      	blx	r4
   2e490:	e763      	b.n	2e35a <ble_hs_init+0xa2>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2e492:	f7e6 f92f 	bl	146f4 <hal_debugger_connected>
   2e496:	b100      	cbz	r0, 2e49a <ble_hs_init+0x1e2>
   2e498:	be01      	bkpt	0x0001
   2e49a:	2000      	movs	r0, #0
   2e49c:	9000      	str	r0, [sp, #0]
   2e49e:	4b1f      	ldr	r3, [pc, #124]	; (2e51c <ble_hs_init+0x264>)
   2e4a0:	681c      	ldr	r4, [r3, #0]
   2e4a2:	4603      	mov	r3, r0
   2e4a4:	4602      	mov	r2, r0
   2e4a6:	4601      	mov	r1, r0
   2e4a8:	47a0      	blx	r4
   2e4aa:	e769      	b.n	2e380 <ble_hs_init+0xc8>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2e4ac:	f7e6 f922 	bl	146f4 <hal_debugger_connected>
   2e4b0:	b100      	cbz	r0, 2e4b4 <ble_hs_init+0x1fc>
   2e4b2:	be01      	bkpt	0x0001
   2e4b4:	2000      	movs	r0, #0
   2e4b6:	9000      	str	r0, [sp, #0]
   2e4b8:	4b18      	ldr	r3, [pc, #96]	; (2e51c <ble_hs_init+0x264>)
   2e4ba:	681c      	ldr	r4, [r3, #0]
   2e4bc:	4603      	mov	r3, r0
   2e4be:	4602      	mov	r2, r0
   2e4c0:	4601      	mov	r1, r0
   2e4c2:	47a0      	blx	r4
   2e4c4:	e762      	b.n	2e38c <ble_hs_init+0xd4>
   2e4c6:	bf00      	nop
   2e4c8:	10003fd8 	.word	0x10003fd8
   2e4cc:	0003972c 	.word	0x0003972c
   2e4d0:	1000528c 	.word	0x1000528c
   2e4d4:	10005270 	.word	0x10005270
   2e4d8:	10005344 	.word	0x10005344
   2e4dc:	10005228 	.word	0x10005228
   2e4e0:	1000525c 	.word	0x1000525c
   2e4e4:	0002df0d 	.word	0x0002df0d
   2e4e8:	1000522c 	.word	0x1000522c
   2e4ec:	0002e119 	.word	0x0002e119
   2e4f0:	1000523c 	.word	0x1000523c
   2e4f4:	0002df35 	.word	0x0002df35
   2e4f8:	1000524c 	.word	0x1000524c
   2e4fc:	0002e291 	.word	0x0002e291
   2e500:	0002dfbd 	.word	0x0002dfbd
   2e504:	10005348 	.word	0x10005348
   2e508:	00039740 	.word	0x00039740
   2e50c:	10005360 	.word	0x10005360
   2e510:	10005334 	.word	0x10005334
   2e514:	0002dee1 	.word	0x0002dee1
   2e518:	0002f5b5 	.word	0x0002f5b5
   2e51c:	100006b4 	.word	0x100006b4

0002e520 <find_field_func>:
static int
find_field_func(const struct ble_hs_adv_field *field, void *user_data)
{
    struct find_field_data *ffd = user_data;

    if (field->type != ffd->type) {
   2e520:	7842      	ldrb	r2, [r0, #1]
   2e522:	780b      	ldrb	r3, [r1, #0]
   2e524:	429a      	cmp	r2, r3
   2e526:	d102      	bne.n	2e52e <find_field_func+0xe>
        return BLE_HS_EAGAIN;
    }

    ffd->field = field;
   2e528:	6048      	str	r0, [r1, #4]

    return 0;
   2e52a:	2000      	movs	r0, #0
   2e52c:	4770      	bx	lr
        return BLE_HS_EAGAIN;
   2e52e:	2001      	movs	r0, #1
}
   2e530:	4770      	bx	lr

0002e532 <ble_hs_adv_set_hdr>:
{
   2e532:	b530      	push	{r4, r5, lr}
   2e534:	b083      	sub	sp, #12
   2e536:	9d06      	ldr	r5, [sp, #24]
   2e538:	9c07      	ldr	r4, [sp, #28]
   2e53a:	f88d 0007 	strb.w	r0, [sp, #7]
   2e53e:	f88d 1006 	strb.w	r1, [sp, #6]
    if (om ) {
   2e542:	b18c      	cbz	r4, 2e568 <ble_hs_adv_set_hdr+0x36>
        data_len++;
   2e544:	b2cb      	uxtb	r3, r1
   2e546:	3301      	adds	r3, #1
   2e548:	f88d 3006 	strb.w	r3, [sp, #6]
        rc = os_mbuf_append(om, &data_len, sizeof(data_len));
   2e54c:	2201      	movs	r2, #1
   2e54e:	f10d 0106 	add.w	r1, sp, #6
   2e552:	4620      	mov	r0, r4
   2e554:	f7eb f84b 	bl	195ee <os_mbuf_append>
        if (rc) {
   2e558:	b9c0      	cbnz	r0, 2e58c <ble_hs_adv_set_hdr+0x5a>
        return os_mbuf_append(om, &type, sizeof(type));
   2e55a:	2201      	movs	r2, #1
   2e55c:	f10d 0107 	add.w	r1, sp, #7
   2e560:	4620      	mov	r0, r4
   2e562:	f7eb f844 	bl	195ee <os_mbuf_append>
   2e566:	e011      	b.n	2e58c <ble_hs_adv_set_hdr+0x5a>
    if (*dst_len + 2 + data_len > max_len) {
   2e568:	782c      	ldrb	r4, [r5, #0]
   2e56a:	1ca0      	adds	r0, r4, #2
   2e56c:	f89d 1006 	ldrb.w	r1, [sp, #6]
   2e570:	4408      	add	r0, r1
   2e572:	4290      	cmp	r0, r2
   2e574:	dc0c      	bgt.n	2e590 <ble_hs_adv_set_hdr+0x5e>
    dst[*dst_len] = data_len + 1;
   2e576:	3101      	adds	r1, #1
   2e578:	5519      	strb	r1, [r3, r4]
    dst[*dst_len + 1] = type;
   2e57a:	782a      	ldrb	r2, [r5, #0]
   2e57c:	3201      	adds	r2, #1
   2e57e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   2e582:	5499      	strb	r1, [r3, r2]
    *dst_len += 2;
   2e584:	782b      	ldrb	r3, [r5, #0]
   2e586:	3302      	adds	r3, #2
   2e588:	702b      	strb	r3, [r5, #0]
    return 0;
   2e58a:	2000      	movs	r0, #0
}
   2e58c:	b003      	add	sp, #12
   2e58e:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EMSGSIZE;
   2e590:	2004      	movs	r0, #4
   2e592:	e7fb      	b.n	2e58c <ble_hs_adv_set_hdr+0x5a>

0002e594 <ble_hs_adv_set_flat_mbuf>:
{
   2e594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e598:	b082      	sub	sp, #8
   2e59a:	460c      	mov	r4, r1
   2e59c:	4615      	mov	r5, r2
   2e59e:	4699      	mov	r9, r3
   2e5a0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   2e5a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    rc = ble_hs_adv_set_hdr(type, data_len, max_len, dst, dst_len, om);
   2e5a4:	fa5f fa81 	uxtb.w	sl, r1
   2e5a8:	9601      	str	r6, [sp, #4]
   2e5aa:	9700      	str	r7, [sp, #0]
   2e5ac:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   2e5b0:	4651      	mov	r1, sl
   2e5b2:	f7ff ffbe 	bl	2e532 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   2e5b6:	4680      	mov	r8, r0
   2e5b8:	b930      	cbnz	r0, 2e5c8 <ble_hs_adv_set_flat_mbuf+0x34>
    if (om) {
   2e5ba:	b14e      	cbz	r6, 2e5d0 <ble_hs_adv_set_flat_mbuf+0x3c>
        return os_mbuf_append(om, data, data_len);
   2e5bc:	b2a2      	uxth	r2, r4
   2e5be:	4629      	mov	r1, r5
   2e5c0:	4630      	mov	r0, r6
   2e5c2:	f7eb f814 	bl	195ee <os_mbuf_append>
   2e5c6:	4680      	mov	r8, r0
}
   2e5c8:	4640      	mov	r0, r8
   2e5ca:	b002      	add	sp, #8
   2e5cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    memcpy(dst + *dst_len, data, data_len);
   2e5d0:	7838      	ldrb	r0, [r7, #0]
   2e5d2:	4622      	mov	r2, r4
   2e5d4:	4629      	mov	r1, r5
   2e5d6:	4448      	add	r0, r9
   2e5d8:	f7ec fb3a 	bl	1ac50 <memcpy>
    *dst_len += data_len;
   2e5dc:	7839      	ldrb	r1, [r7, #0]
   2e5de:	4451      	add	r1, sl
   2e5e0:	7039      	strb	r1, [r7, #0]
    return 0;
   2e5e2:	e7f1      	b.n	2e5c8 <ble_hs_adv_set_flat_mbuf+0x34>

0002e5e4 <ble_hs_adv_set_array_uuid16>:
{
   2e5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e5e8:	b082      	sub	sp, #8
   2e5ea:	460e      	mov	r6, r1
   2e5ec:	4617      	mov	r7, r2
   2e5ee:	4699      	mov	r9, r3
   2e5f0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   2e5f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    rc = ble_hs_adv_set_hdr(type, num_elems * 2, max_len, dst,
   2e5f6:	0049      	lsls	r1, r1, #1
   2e5f8:	9501      	str	r5, [sp, #4]
   2e5fa:	f8cd 8000 	str.w	r8, [sp]
   2e5fe:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   2e602:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   2e606:	f7ff ff94 	bl	2e532 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   2e60a:	4682      	mov	sl, r0
   2e60c:	b9d0      	cbnz	r0, 2e644 <ble_hs_adv_set_array_uuid16+0x60>
    for (i = 0; i < num_elems; i++) {
   2e60e:	4604      	mov	r4, r0
   2e610:	e00c      	b.n	2e62c <ble_hs_adv_set_array_uuid16+0x48>
            ble_uuid_flat(&elems[i].u, dst + *dst_len);
   2e612:	f898 1000 	ldrb.w	r1, [r8]
   2e616:	4449      	add	r1, r9
   2e618:	eb07 0084 	add.w	r0, r7, r4, lsl #2
   2e61c:	f002 ff8a 	bl	31534 <ble_uuid_flat>
            *dst_len += 2;
   2e620:	f898 3000 	ldrb.w	r3, [r8]
   2e624:	3302      	adds	r3, #2
   2e626:	f888 3000 	strb.w	r3, [r8]
    for (i = 0; i < num_elems; i++) {
   2e62a:	3401      	adds	r4, #1
   2e62c:	42a6      	cmp	r6, r4
   2e62e:	dd09      	ble.n	2e644 <ble_hs_adv_set_array_uuid16+0x60>
        if (om) {
   2e630:	2d00      	cmp	r5, #0
   2e632:	d0ee      	beq.n	2e612 <ble_hs_adv_set_array_uuid16+0x2e>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
   2e634:	4629      	mov	r1, r5
   2e636:	eb07 0084 	add.w	r0, r7, r4, lsl #2
   2e63a:	f002 ffaa 	bl	31592 <ble_uuid_to_mbuf>
            if (rc) {
   2e63e:	2800      	cmp	r0, #0
   2e640:	d0f3      	beq.n	2e62a <ble_hs_adv_set_array_uuid16+0x46>
                return rc;
   2e642:	4682      	mov	sl, r0
}
   2e644:	4650      	mov	r0, sl
   2e646:	b002      	add	sp, #8
   2e648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002e64c <ble_hs_adv_set_array_uuid128>:
{
   2e64c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e650:	b082      	sub	sp, #8
   2e652:	460e      	mov	r6, r1
   2e654:	4617      	mov	r7, r2
   2e656:	4699      	mov	r9, r3
   2e658:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   2e65c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    rc = ble_hs_adv_set_hdr(type, num_elems * 16, max_len, dst,
   2e65e:	0109      	lsls	r1, r1, #4
   2e660:	9501      	str	r5, [sp, #4]
   2e662:	f8cd 8000 	str.w	r8, [sp]
   2e666:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   2e66a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
   2e66e:	f7ff ff60 	bl	2e532 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   2e672:	4682      	mov	sl, r0
   2e674:	b9e0      	cbnz	r0, 2e6b0 <ble_hs_adv_set_array_uuid128+0x64>
    for (i = 0; i < num_elems; i++) {
   2e676:	4604      	mov	r4, r0
   2e678:	e00d      	b.n	2e696 <ble_hs_adv_set_array_uuid128+0x4a>
            ble_uuid_flat(&elems[i].u, dst + *dst_len);
   2e67a:	eb04 1004 	add.w	r0, r4, r4, lsl #4
   2e67e:	f898 1000 	ldrb.w	r1, [r8]
   2e682:	4449      	add	r1, r9
   2e684:	4438      	add	r0, r7
   2e686:	f002 ff55 	bl	31534 <ble_uuid_flat>
            *dst_len += 16;
   2e68a:	f898 3000 	ldrb.w	r3, [r8]
   2e68e:	3310      	adds	r3, #16
   2e690:	f888 3000 	strb.w	r3, [r8]
    for (i = 0; i < num_elems; i++) {
   2e694:	3401      	adds	r4, #1
   2e696:	42a6      	cmp	r6, r4
   2e698:	dd0a      	ble.n	2e6b0 <ble_hs_adv_set_array_uuid128+0x64>
        if (om) {
   2e69a:	2d00      	cmp	r5, #0
   2e69c:	d0ed      	beq.n	2e67a <ble_hs_adv_set_array_uuid128+0x2e>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
   2e69e:	eb04 1004 	add.w	r0, r4, r4, lsl #4
   2e6a2:	4629      	mov	r1, r5
   2e6a4:	4438      	add	r0, r7
   2e6a6:	f002 ff74 	bl	31592 <ble_uuid_to_mbuf>
            if (rc) {
   2e6aa:	2800      	cmp	r0, #0
   2e6ac:	d0f2      	beq.n	2e694 <ble_hs_adv_set_array_uuid128+0x48>
                return rc;
   2e6ae:	4682      	mov	sl, r0
}
   2e6b0:	4650      	mov	r0, sl
   2e6b2:	b002      	add	sp, #8
   2e6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002e6b8 <ble_hs_adv_set_array_uuid32>:
{
   2e6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e6bc:	b084      	sub	sp, #16
   2e6be:	460e      	mov	r6, r1
   2e6c0:	4617      	mov	r7, r2
   2e6c2:	4699      	mov	r9, r3
   2e6c4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   2e6c8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    rc = ble_hs_adv_set_hdr(type, num_elems * 4, max_len, dst,
   2e6ca:	0089      	lsls	r1, r1, #2
   2e6cc:	9501      	str	r5, [sp, #4]
   2e6ce:	f8cd 8000 	str.w	r8, [sp]
   2e6d2:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   2e6d6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   2e6da:	f7ff ff2a 	bl	2e532 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   2e6de:	4682      	mov	sl, r0
   2e6e0:	b9f8      	cbnz	r0, 2e722 <ble_hs_adv_set_array_uuid32+0x6a>
    for (i = 0; i < num_elems; i++) {
   2e6e2:	4604      	mov	r4, r0
   2e6e4:	e00d      	b.n	2e702 <ble_hs_adv_set_array_uuid32+0x4a>
            put_le32(dst + *dst_len, elems[i].value);
   2e6e6:	f898 0000 	ldrb.w	r0, [r8]
   2e6ea:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   2e6ee:	6859      	ldr	r1, [r3, #4]
   2e6f0:	4448      	add	r0, r9
   2e6f2:	f7ea fb8f 	bl	18e14 <put_le32>
            *dst_len += 4;
   2e6f6:	f898 3000 	ldrb.w	r3, [r8]
   2e6fa:	3304      	adds	r3, #4
   2e6fc:	f888 3000 	strb.w	r3, [r8]
    for (i = 0; i < num_elems; i++) {
   2e700:	3401      	adds	r4, #1
   2e702:	42a6      	cmp	r6, r4
   2e704:	dd0d      	ble.n	2e722 <ble_hs_adv_set_array_uuid32+0x6a>
        if (om) {
   2e706:	2d00      	cmp	r5, #0
   2e708:	d0ed      	beq.n	2e6e6 <ble_hs_adv_set_array_uuid32+0x2e>
            uuid_le = htole32(elems[i].value);
   2e70a:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   2e70e:	685b      	ldr	r3, [r3, #4]
   2e710:	9303      	str	r3, [sp, #12]
            rc = os_mbuf_append(om, &uuid_le, sizeof(uuid_le));
   2e712:	2204      	movs	r2, #4
   2e714:	a903      	add	r1, sp, #12
   2e716:	4628      	mov	r0, r5
   2e718:	f7ea ff69 	bl	195ee <os_mbuf_append>
            if (rc) {
   2e71c:	2800      	cmp	r0, #0
   2e71e:	d0ef      	beq.n	2e700 <ble_hs_adv_set_array_uuid32+0x48>
                return rc;
   2e720:	4682      	mov	sl, r0
}
   2e722:	4650      	mov	r0, sl
   2e724:	b004      	add	sp, #16
   2e726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002e72a <ble_hs_adv_set_array16>:
{
   2e72a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e72e:	b084      	sub	sp, #16
   2e730:	460e      	mov	r6, r1
   2e732:	4617      	mov	r7, r2
   2e734:	4699      	mov	r9, r3
   2e736:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   2e73a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    rc = ble_hs_adv_set_hdr(type, num_elems * sizeof *elems, max_len, dst,
   2e73c:	0049      	lsls	r1, r1, #1
   2e73e:	9501      	str	r5, [sp, #4]
   2e740:	f8cd 8000 	str.w	r8, [sp]
   2e744:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   2e748:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   2e74c:	f7ff fef1 	bl	2e532 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   2e750:	4682      	mov	sl, r0
   2e752:	b9f8      	cbnz	r0, 2e794 <ble_hs_adv_set_array16+0x6a>
    for (i = 0; i < num_elems; i++) {
   2e754:	4604      	mov	r4, r0
   2e756:	e00c      	b.n	2e772 <ble_hs_adv_set_array16+0x48>
            put_le16(dst + *dst_len, elems[i]);
   2e758:	f898 0000 	ldrb.w	r0, [r8]
   2e75c:	f837 1014 	ldrh.w	r1, [r7, r4, lsl #1]
   2e760:	4448      	add	r0, r9
   2e762:	f7ea fb53 	bl	18e0c <put_le16>
            *dst_len += sizeof elems[i];
   2e766:	f898 3000 	ldrb.w	r3, [r8]
   2e76a:	3302      	adds	r3, #2
   2e76c:	f888 3000 	strb.w	r3, [r8]
    for (i = 0; i < num_elems; i++) {
   2e770:	3401      	adds	r4, #1
   2e772:	42a6      	cmp	r6, r4
   2e774:	dd0e      	ble.n	2e794 <ble_hs_adv_set_array16+0x6a>
        if (om) {
   2e776:	2d00      	cmp	r5, #0
   2e778:	d0ee      	beq.n	2e758 <ble_hs_adv_set_array16+0x2e>
            tmp = htole16(elems[i]);
   2e77a:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
   2e77e:	f8ad 300e 	strh.w	r3, [sp, #14]
            rc = os_mbuf_append(om, &tmp, sizeof(tmp));
   2e782:	2202      	movs	r2, #2
   2e784:	f10d 010e 	add.w	r1, sp, #14
   2e788:	4628      	mov	r0, r5
   2e78a:	f7ea ff30 	bl	195ee <os_mbuf_append>
            if (rc) {
   2e78e:	2800      	cmp	r0, #0
   2e790:	d0ee      	beq.n	2e770 <ble_hs_adv_set_array16+0x46>
                return rc;
   2e792:	4682      	mov	sl, r0
}
   2e794:	4650      	mov	r0, sl
   2e796:	b004      	add	sp, #16
   2e798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002e79c <adv_set_fields>:
{
   2e79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e7a0:	b086      	sub	sp, #24
   2e7a2:	4604      	mov	r4, r0
   2e7a4:	460d      	mov	r5, r1
   2e7a6:	4690      	mov	r8, r2
   2e7a8:	461e      	mov	r6, r3
   2e7aa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    dst_len_local = 0;
   2e7ac:	2300      	movs	r3, #0
   2e7ae:	f88d 3016 	strb.w	r3, [sp, #22]
    if (adv_fields->flags != 0) {
   2e7b2:	7803      	ldrb	r3, [r0, #0]
   2e7b4:	2b00      	cmp	r3, #0
   2e7b6:	f040 80c0 	bne.w	2e93a <adv_set_fields+0x19e>
    if (adv_fields->uuids16 != NULL && adv_fields->num_uuids16) {
   2e7ba:	6862      	ldr	r2, [r4, #4]
   2e7bc:	b19a      	cbz	r2, 2e7e6 <adv_set_fields+0x4a>
   2e7be:	7a21      	ldrb	r1, [r4, #8]
   2e7c0:	b189      	cbz	r1, 2e7e6 <adv_set_fields+0x4a>
        if (adv_fields->uuids16_is_complete) {
   2e7c2:	7a63      	ldrb	r3, [r4, #9]
   2e7c4:	f013 0f01 	tst.w	r3, #1
   2e7c8:	f000 80c7 	beq.w	2e95a <adv_set_fields+0x1be>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS16;
   2e7cc:	2003      	movs	r0, #3
        rc = ble_hs_adv_set_array_uuid16(type, adv_fields->num_uuids16,
   2e7ce:	9702      	str	r7, [sp, #8]
   2e7d0:	9601      	str	r6, [sp, #4]
   2e7d2:	f10d 0316 	add.w	r3, sp, #22
   2e7d6:	9300      	str	r3, [sp, #0]
   2e7d8:	462b      	mov	r3, r5
   2e7da:	f7ff ff03 	bl	2e5e4 <ble_hs_adv_set_array_uuid16>
        if (rc != 0) {
   2e7de:	4603      	mov	r3, r0
   2e7e0:	2800      	cmp	r0, #0
   2e7e2:	f040 80a6 	bne.w	2e932 <adv_set_fields+0x196>
    if (adv_fields->uuids32 != NULL && adv_fields->num_uuids32) {
   2e7e6:	68e2      	ldr	r2, [r4, #12]
   2e7e8:	b19a      	cbz	r2, 2e812 <adv_set_fields+0x76>
   2e7ea:	7c21      	ldrb	r1, [r4, #16]
   2e7ec:	b189      	cbz	r1, 2e812 <adv_set_fields+0x76>
        if (adv_fields->uuids32_is_complete) {
   2e7ee:	7c63      	ldrb	r3, [r4, #17]
   2e7f0:	f013 0f01 	tst.w	r3, #1
   2e7f4:	f000 80b3 	beq.w	2e95e <adv_set_fields+0x1c2>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS32;
   2e7f8:	2005      	movs	r0, #5
        rc = ble_hs_adv_set_array_uuid32(type, adv_fields->num_uuids32,
   2e7fa:	9702      	str	r7, [sp, #8]
   2e7fc:	9601      	str	r6, [sp, #4]
   2e7fe:	f10d 0316 	add.w	r3, sp, #22
   2e802:	9300      	str	r3, [sp, #0]
   2e804:	462b      	mov	r3, r5
   2e806:	f7ff ff57 	bl	2e6b8 <ble_hs_adv_set_array_uuid32>
        if (rc != 0) {
   2e80a:	4603      	mov	r3, r0
   2e80c:	2800      	cmp	r0, #0
   2e80e:	f040 8090 	bne.w	2e932 <adv_set_fields+0x196>
    if (adv_fields->uuids128 != NULL && adv_fields->num_uuids128 > 0) {
   2e812:	6962      	ldr	r2, [r4, #20]
   2e814:	b192      	cbz	r2, 2e83c <adv_set_fields+0xa0>
   2e816:	7e21      	ldrb	r1, [r4, #24]
   2e818:	b181      	cbz	r1, 2e83c <adv_set_fields+0xa0>
        if (adv_fields->uuids128_is_complete) {
   2e81a:	7e63      	ldrb	r3, [r4, #25]
   2e81c:	f013 0f01 	tst.w	r3, #1
   2e820:	f000 809f 	beq.w	2e962 <adv_set_fields+0x1c6>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS128;
   2e824:	2007      	movs	r0, #7
        rc = ble_hs_adv_set_array_uuid128(type, adv_fields->num_uuids128,
   2e826:	9702      	str	r7, [sp, #8]
   2e828:	9601      	str	r6, [sp, #4]
   2e82a:	f10d 0316 	add.w	r3, sp, #22
   2e82e:	9300      	str	r3, [sp, #0]
   2e830:	462b      	mov	r3, r5
   2e832:	f7ff ff0b 	bl	2e64c <ble_hs_adv_set_array_uuid128>
        if (rc != 0) {
   2e836:	4603      	mov	r3, r0
   2e838:	2800      	cmp	r0, #0
   2e83a:	d17a      	bne.n	2e932 <adv_set_fields+0x196>
    if (adv_fields->name != NULL && adv_fields->name_len > 0) {
   2e83c:	69e2      	ldr	r2, [r4, #28]
   2e83e:	b1a2      	cbz	r2, 2e86a <adv_set_fields+0xce>
   2e840:	f894 1020 	ldrb.w	r1, [r4, #32]
   2e844:	b189      	cbz	r1, 2e86a <adv_set_fields+0xce>
        if (adv_fields->name_is_complete) {
   2e846:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   2e84a:	f013 0f01 	tst.w	r3, #1
   2e84e:	f000 808a 	beq.w	2e966 <adv_set_fields+0x1ca>
            type = BLE_HS_ADV_TYPE_COMP_NAME;
   2e852:	2009      	movs	r0, #9
        rc = ble_hs_adv_set_flat_mbuf(type, adv_fields->name_len,
   2e854:	9702      	str	r7, [sp, #8]
   2e856:	9601      	str	r6, [sp, #4]
   2e858:	f10d 0316 	add.w	r3, sp, #22
   2e85c:	9300      	str	r3, [sp, #0]
   2e85e:	462b      	mov	r3, r5
   2e860:	f7ff fe98 	bl	2e594 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   2e864:	4603      	mov	r3, r0
   2e866:	2800      	cmp	r0, #0
   2e868:	d163      	bne.n	2e932 <adv_set_fields+0x196>
    if (adv_fields->tx_pwr_lvl_is_present) {
   2e86a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   2e86e:	f013 0f01 	tst.w	r3, #1
   2e872:	d015      	beq.n	2e8a0 <adv_set_fields+0x104>
        if (adv_fields->tx_pwr_lvl == BLE_HS_ADV_TX_PWR_LVL_AUTO) {
   2e874:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
   2e878:	f113 0f80 	cmn.w	r3, #128	; 0x80
   2e87c:	d075      	beq.n	2e96a <adv_set_fields+0x1ce>
            tx_pwr_lvl = adv_fields->tx_pwr_lvl;
   2e87e:	f88d 3017 	strb.w	r3, [sp, #23]
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_TX_PWR_LVL, 1,
   2e882:	9702      	str	r7, [sp, #8]
   2e884:	9601      	str	r6, [sp, #4]
   2e886:	f10d 0316 	add.w	r3, sp, #22
   2e88a:	9300      	str	r3, [sp, #0]
   2e88c:	462b      	mov	r3, r5
   2e88e:	f10d 0217 	add.w	r2, sp, #23
   2e892:	2101      	movs	r1, #1
   2e894:	200a      	movs	r0, #10
   2e896:	f7ff fe7d 	bl	2e594 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   2e89a:	4603      	mov	r3, r0
   2e89c:	2800      	cmp	r0, #0
   2e89e:	d148      	bne.n	2e932 <adv_set_fields+0x196>
    if (adv_fields->slave_itvl_range != NULL) {
   2e8a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   2e8a2:	b162      	cbz	r2, 2e8be <adv_set_fields+0x122>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SLAVE_ITVL_RANGE,
   2e8a4:	9702      	str	r7, [sp, #8]
   2e8a6:	9601      	str	r6, [sp, #4]
   2e8a8:	f10d 0316 	add.w	r3, sp, #22
   2e8ac:	9300      	str	r3, [sp, #0]
   2e8ae:	462b      	mov	r3, r5
   2e8b0:	2104      	movs	r1, #4
   2e8b2:	2012      	movs	r0, #18
   2e8b4:	f7ff fe6e 	bl	2e594 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   2e8b8:	4603      	mov	r3, r0
   2e8ba:	2800      	cmp	r0, #0
   2e8bc:	d139      	bne.n	2e932 <adv_set_fields+0x196>
    if (adv_fields->svc_data_uuid16 != NULL && adv_fields->svc_data_uuid16_len) {
   2e8be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   2e8c0:	b11a      	cbz	r2, 2e8ca <adv_set_fields+0x12e>
   2e8c2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   2e8c6:	2900      	cmp	r1, #0
   2e8c8:	d157      	bne.n	2e97a <adv_set_fields+0x1de>
    if (adv_fields->public_tgt_addr != NULL &&
   2e8ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
   2e8cc:	b11a      	cbz	r2, 2e8d6 <adv_set_fields+0x13a>
        adv_fields->num_public_tgt_addrs != 0) {
   2e8ce:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    if (adv_fields->public_tgt_addr != NULL &&
   2e8d2:	2900      	cmp	r1, #0
   2e8d4:	d15e      	bne.n	2e994 <adv_set_fields+0x1f8>
    if (adv_fields->appearance_is_present) {
   2e8d6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2e8da:	f013 0f01 	tst.w	r3, #1
   2e8de:	d169      	bne.n	2e9b4 <adv_set_fields+0x218>
    if (adv_fields->adv_itvl_is_present) {
   2e8e0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   2e8e4:	f013 0f01 	tst.w	r3, #1
   2e8e8:	d174      	bne.n	2e9d4 <adv_set_fields+0x238>
    if (adv_fields->svc_data_uuid32 != NULL && adv_fields->svc_data_uuid32_len) {
   2e8ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
   2e8ec:	b11a      	cbz	r2, 2e8f6 <adv_set_fields+0x15a>
   2e8ee:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
   2e8f2:	2900      	cmp	r1, #0
   2e8f4:	d17f      	bne.n	2e9f6 <adv_set_fields+0x25a>
    if (adv_fields->svc_data_uuid128 != NULL && adv_fields->svc_data_uuid128_len) {
   2e8f6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2e8f8:	b122      	cbz	r2, 2e904 <adv_set_fields+0x168>
   2e8fa:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
   2e8fe:	2900      	cmp	r1, #0
   2e900:	f040 8087 	bne.w	2ea12 <adv_set_fields+0x276>
    if (adv_fields->uri != NULL && adv_fields->uri_len) {
   2e904:	6d22      	ldr	r2, [r4, #80]	; 0x50
   2e906:	b122      	cbz	r2, 2e912 <adv_set_fields+0x176>
   2e908:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
   2e90c:	2900      	cmp	r1, #0
   2e90e:	f040 808e 	bne.w	2ea2e <adv_set_fields+0x292>
    if ((adv_fields->mfg_data != NULL) && (adv_fields->mfg_data_len >= 2)) {
   2e912:	6da2      	ldr	r2, [r4, #88]	; 0x58
   2e914:	b122      	cbz	r2, 2e920 <adv_set_fields+0x184>
   2e916:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
   2e91a:	2901      	cmp	r1, #1
   2e91c:	f200 8095 	bhi.w	2ea4a <adv_set_fields+0x2ae>
    if (dst_len) {
   2e920:	f1b8 0f00 	cmp.w	r8, #0
   2e924:	f000 809f 	beq.w	2ea66 <adv_set_fields+0x2ca>
        *dst_len = dst_len_local;
   2e928:	f89d 3016 	ldrb.w	r3, [sp, #22]
   2e92c:	f888 3000 	strb.w	r3, [r8]
    return 0;
   2e930:	2300      	movs	r3, #0
}
   2e932:	4618      	mov	r0, r3
   2e934:	b006      	add	sp, #24
   2e936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_FLAGS, 1,
   2e93a:	9702      	str	r7, [sp, #8]
   2e93c:	9601      	str	r6, [sp, #4]
   2e93e:	f10d 0316 	add.w	r3, sp, #22
   2e942:	9300      	str	r3, [sp, #0]
   2e944:	460b      	mov	r3, r1
   2e946:	4602      	mov	r2, r0
   2e948:	2101      	movs	r1, #1
   2e94a:	4608      	mov	r0, r1
   2e94c:	f7ff fe22 	bl	2e594 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   2e950:	4603      	mov	r3, r0
   2e952:	2800      	cmp	r0, #0
   2e954:	f43f af31 	beq.w	2e7ba <adv_set_fields+0x1e>
   2e958:	e7eb      	b.n	2e932 <adv_set_fields+0x196>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS16;
   2e95a:	2002      	movs	r0, #2
   2e95c:	e737      	b.n	2e7ce <adv_set_fields+0x32>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS32;
   2e95e:	2004      	movs	r0, #4
   2e960:	e74b      	b.n	2e7fa <adv_set_fields+0x5e>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS128;
   2e962:	2006      	movs	r0, #6
   2e964:	e75f      	b.n	2e826 <adv_set_fields+0x8a>
            type = BLE_HS_ADV_TYPE_INCOMP_NAME;
   2e966:	2008      	movs	r0, #8
   2e968:	e774      	b.n	2e854 <adv_set_fields+0xb8>
            rc = ble_hs_hci_util_read_adv_tx_pwr(&tx_pwr_lvl);
   2e96a:	f10d 0017 	add.w	r0, sp, #23
   2e96e:	f001 f977 	bl	2fc60 <ble_hs_hci_util_read_adv_tx_pwr>
            if (rc != 0) {
   2e972:	4603      	mov	r3, r0
   2e974:	2800      	cmp	r0, #0
   2e976:	d084      	beq.n	2e882 <adv_set_fields+0xe6>
   2e978:	e7db      	b.n	2e932 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID16,
   2e97a:	9702      	str	r7, [sp, #8]
   2e97c:	9601      	str	r6, [sp, #4]
   2e97e:	f10d 0316 	add.w	r3, sp, #22
   2e982:	9300      	str	r3, [sp, #0]
   2e984:	462b      	mov	r3, r5
   2e986:	2016      	movs	r0, #22
   2e988:	f7ff fe04 	bl	2e594 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   2e98c:	4603      	mov	r3, r0
   2e98e:	2800      	cmp	r0, #0
   2e990:	d09b      	beq.n	2e8ca <adv_set_fields+0x12e>
   2e992:	e7ce      	b.n	2e932 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_PUBLIC_TGT_ADDR,
   2e994:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   2e998:	9702      	str	r7, [sp, #8]
   2e99a:	9601      	str	r6, [sp, #4]
   2e99c:	f10d 0316 	add.w	r3, sp, #22
   2e9a0:	9300      	str	r3, [sp, #0]
   2e9a2:	462b      	mov	r3, r5
   2e9a4:	0049      	lsls	r1, r1, #1
   2e9a6:	2017      	movs	r0, #23
   2e9a8:	f7ff fdf4 	bl	2e594 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   2e9ac:	4603      	mov	r3, r0
   2e9ae:	2800      	cmp	r0, #0
   2e9b0:	d091      	beq.n	2e8d6 <adv_set_fields+0x13a>
   2e9b2:	e7be      	b.n	2e932 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_APPEARANCE,
   2e9b4:	9702      	str	r7, [sp, #8]
   2e9b6:	9601      	str	r6, [sp, #4]
   2e9b8:	f10d 0316 	add.w	r3, sp, #22
   2e9bc:	9300      	str	r3, [sp, #0]
   2e9be:	462b      	mov	r3, r5
   2e9c0:	f104 0236 	add.w	r2, r4, #54	; 0x36
   2e9c4:	2102      	movs	r1, #2
   2e9c6:	2019      	movs	r0, #25
   2e9c8:	f7ff fde4 	bl	2e594 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   2e9cc:	4603      	mov	r3, r0
   2e9ce:	2800      	cmp	r0, #0
   2e9d0:	d086      	beq.n	2e8e0 <adv_set_fields+0x144>
   2e9d2:	e7ae      	b.n	2e932 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_array16(BLE_HS_ADV_TYPE_ADV_ITVL, 1,
   2e9d4:	9702      	str	r7, [sp, #8]
   2e9d6:	9601      	str	r6, [sp, #4]
   2e9d8:	f10d 0316 	add.w	r3, sp, #22
   2e9dc:	9300      	str	r3, [sp, #0]
   2e9de:	462b      	mov	r3, r5
   2e9e0:	f104 023a 	add.w	r2, r4, #58	; 0x3a
   2e9e4:	2101      	movs	r1, #1
   2e9e6:	201a      	movs	r0, #26
   2e9e8:	f7ff fe9f 	bl	2e72a <ble_hs_adv_set_array16>
        if (rc != 0) {
   2e9ec:	4603      	mov	r3, r0
   2e9ee:	2800      	cmp	r0, #0
   2e9f0:	f43f af7b 	beq.w	2e8ea <adv_set_fields+0x14e>
   2e9f4:	e79d      	b.n	2e932 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID32,
   2e9f6:	9702      	str	r7, [sp, #8]
   2e9f8:	9601      	str	r6, [sp, #4]
   2e9fa:	f10d 0316 	add.w	r3, sp, #22
   2e9fe:	9300      	str	r3, [sp, #0]
   2ea00:	462b      	mov	r3, r5
   2ea02:	2020      	movs	r0, #32
   2ea04:	f7ff fdc6 	bl	2e594 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   2ea08:	4603      	mov	r3, r0
   2ea0a:	2800      	cmp	r0, #0
   2ea0c:	f43f af73 	beq.w	2e8f6 <adv_set_fields+0x15a>
   2ea10:	e78f      	b.n	2e932 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID128,
   2ea12:	9702      	str	r7, [sp, #8]
   2ea14:	9601      	str	r6, [sp, #4]
   2ea16:	f10d 0316 	add.w	r3, sp, #22
   2ea1a:	9300      	str	r3, [sp, #0]
   2ea1c:	462b      	mov	r3, r5
   2ea1e:	2021      	movs	r0, #33	; 0x21
   2ea20:	f7ff fdb8 	bl	2e594 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   2ea24:	4603      	mov	r3, r0
   2ea26:	2800      	cmp	r0, #0
   2ea28:	f43f af6c 	beq.w	2e904 <adv_set_fields+0x168>
   2ea2c:	e781      	b.n	2e932 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_URI, adv_fields->uri_len,
   2ea2e:	9702      	str	r7, [sp, #8]
   2ea30:	9601      	str	r6, [sp, #4]
   2ea32:	f10d 0316 	add.w	r3, sp, #22
   2ea36:	9300      	str	r3, [sp, #0]
   2ea38:	462b      	mov	r3, r5
   2ea3a:	2024      	movs	r0, #36	; 0x24
   2ea3c:	f7ff fdaa 	bl	2e594 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   2ea40:	4603      	mov	r3, r0
   2ea42:	2800      	cmp	r0, #0
   2ea44:	f43f af65 	beq.w	2e912 <adv_set_fields+0x176>
   2ea48:	e773      	b.n	2e932 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_MFG_DATA,
   2ea4a:	9702      	str	r7, [sp, #8]
   2ea4c:	9601      	str	r6, [sp, #4]
   2ea4e:	f10d 0316 	add.w	r3, sp, #22
   2ea52:	9300      	str	r3, [sp, #0]
   2ea54:	462b      	mov	r3, r5
   2ea56:	20ff      	movs	r0, #255	; 0xff
   2ea58:	f7ff fd9c 	bl	2e594 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   2ea5c:	4603      	mov	r3, r0
   2ea5e:	2800      	cmp	r0, #0
   2ea60:	f43f af5e 	beq.w	2e920 <adv_set_fields+0x184>
   2ea64:	e765      	b.n	2e932 <adv_set_fields+0x196>
    return 0;
   2ea66:	2300      	movs	r3, #0
   2ea68:	e763      	b.n	2e932 <adv_set_fields+0x196>
	...

0002ea6c <ble_hs_adv_parse_uuids16>:
    if (data_len % 2 != 0) {
   2ea6c:	f012 0f01 	tst.w	r2, #1
   2ea70:	d11a      	bne.n	2eaa8 <ble_hs_adv_parse_uuids16+0x3c>
{
   2ea72:	b570      	push	{r4, r5, r6, lr}
   2ea74:	b086      	sub	sp, #24
   2ea76:	4605      	mov	r5, r0
   2ea78:	460e      	mov	r6, r1
    adv_fields->uuids16 = ble_hs_adv_uuids16;
   2ea7a:	4b0c      	ldr	r3, [pc, #48]	; (2eaac <ble_hs_adv_parse_uuids16+0x40>)
   2ea7c:	6043      	str	r3, [r0, #4]
    adv_fields->num_uuids16 = data_len / 2;
   2ea7e:	0852      	lsrs	r2, r2, #1
   2ea80:	7202      	strb	r2, [r0, #8]
    for (i = 0; i < adv_fields->num_uuids16; i++) {
   2ea82:	2400      	movs	r4, #0
   2ea84:	e00a      	b.n	2ea9c <ble_hs_adv_parse_uuids16+0x30>
        ble_uuid_init_from_buf(&uuid, data + i * 2, 2);
   2ea86:	2202      	movs	r2, #2
   2ea88:	eb06 0144 	add.w	r1, r6, r4, lsl #1
   2ea8c:	a801      	add	r0, sp, #4
   2ea8e:	f002 fc5a 	bl	31346 <ble_uuid_init_from_buf>
        ble_hs_adv_uuids16[i] = uuid.u16;
   2ea92:	4b06      	ldr	r3, [pc, #24]	; (2eaac <ble_hs_adv_parse_uuids16+0x40>)
   2ea94:	9a01      	ldr	r2, [sp, #4]
   2ea96:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    for (i = 0; i < adv_fields->num_uuids16; i++) {
   2ea9a:	3401      	adds	r4, #1
   2ea9c:	7a2b      	ldrb	r3, [r5, #8]
   2ea9e:	42a3      	cmp	r3, r4
   2eaa0:	dcf1      	bgt.n	2ea86 <ble_hs_adv_parse_uuids16+0x1a>
    return 0;
   2eaa2:	2000      	movs	r0, #0
}
   2eaa4:	b006      	add	sp, #24
   2eaa6:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EBADDATA;
   2eaa8:	200a      	movs	r0, #10
}
   2eaaa:	4770      	bx	lr
   2eaac:	100053d0 	.word	0x100053d0

0002eab0 <ble_hs_adv_parse_uuids32>:
    if (data_len % 4 != 0) {
   2eab0:	f012 0f03 	tst.w	r2, #3
   2eab4:	d11e      	bne.n	2eaf4 <ble_hs_adv_parse_uuids32+0x44>
{
   2eab6:	b5f0      	push	{r4, r5, r6, r7, lr}
   2eab8:	b087      	sub	sp, #28
   2eaba:	4606      	mov	r6, r0
   2eabc:	460f      	mov	r7, r1
    adv_fields->uuids32 = ble_hs_adv_uuids32;
   2eabe:	4b0e      	ldr	r3, [pc, #56]	; (2eaf8 <ble_hs_adv_parse_uuids32+0x48>)
   2eac0:	60c3      	str	r3, [r0, #12]
    adv_fields->num_uuids32 = data_len / 4;
   2eac2:	0892      	lsrs	r2, r2, #2
   2eac4:	7402      	strb	r2, [r0, #16]
    for (i = 0; i < adv_fields->num_uuids32; i++) {
   2eac6:	2400      	movs	r4, #0
   2eac8:	e00e      	b.n	2eae8 <ble_hs_adv_parse_uuids32+0x38>
        ble_uuid_init_from_buf(&uuid, data + i * 4, 4);
   2eaca:	ad01      	add	r5, sp, #4
   2eacc:	2204      	movs	r2, #4
   2eace:	eb07 0184 	add.w	r1, r7, r4, lsl #2
   2ead2:	4628      	mov	r0, r5
   2ead4:	f002 fc37 	bl	31346 <ble_uuid_init_from_buf>
        ble_hs_adv_uuids32[i] = uuid.u32;
   2ead8:	4b07      	ldr	r3, [pc, #28]	; (2eaf8 <ble_hs_adv_parse_uuids32+0x48>)
   2eada:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   2eade:	e895 0003 	ldmia.w	r5, {r0, r1}
   2eae2:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = 0; i < adv_fields->num_uuids32; i++) {
   2eae6:	3401      	adds	r4, #1
   2eae8:	7c33      	ldrb	r3, [r6, #16]
   2eaea:	42a3      	cmp	r3, r4
   2eaec:	dced      	bgt.n	2eaca <ble_hs_adv_parse_uuids32+0x1a>
    return 0;
   2eaee:	2000      	movs	r0, #0
}
   2eaf0:	b007      	add	sp, #28
   2eaf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EBADDATA;
   2eaf4:	200a      	movs	r0, #10
}
   2eaf6:	4770      	bx	lr
   2eaf8:	10005408 	.word	0x10005408

0002eafc <ble_hs_adv_parse_uuids128>:
    if (data_len % 16 != 0) {
   2eafc:	f012 0f0f 	tst.w	r2, #15
   2eb00:	d128      	bne.n	2eb54 <ble_hs_adv_parse_uuids128+0x58>
{
   2eb02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2eb06:	b086      	sub	sp, #24
   2eb08:	4606      	mov	r6, r0
   2eb0a:	4688      	mov	r8, r1
    adv_fields->uuids128 = ble_hs_adv_uuids128;
   2eb0c:	4b12      	ldr	r3, [pc, #72]	; (2eb58 <ble_hs_adv_parse_uuids128+0x5c>)
   2eb0e:	6143      	str	r3, [r0, #20]
    adv_fields->num_uuids128 = data_len / 16;
   2eb10:	0912      	lsrs	r2, r2, #4
   2eb12:	7602      	strb	r2, [r0, #24]
    for (i = 0; i < adv_fields->num_uuids128; i++) {
   2eb14:	2500      	movs	r5, #0
   2eb16:	7e33      	ldrb	r3, [r6, #24]
   2eb18:	42ab      	cmp	r3, r5
   2eb1a:	dc03      	bgt.n	2eb24 <ble_hs_adv_parse_uuids128+0x28>
    return 0;
   2eb1c:	2000      	movs	r0, #0
}
   2eb1e:	b006      	add	sp, #24
   2eb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ble_uuid_init_from_buf(&uuid, data + i * 16, 16);
   2eb24:	012c      	lsls	r4, r5, #4
   2eb26:	2210      	movs	r2, #16
   2eb28:	eb08 1105 	add.w	r1, r8, r5, lsl #4
   2eb2c:	a801      	add	r0, sp, #4
   2eb2e:	f002 fc0a 	bl	31346 <ble_uuid_init_from_buf>
        ble_hs_adv_uuids128[i] = uuid.u128;
   2eb32:	f8df e024 	ldr.w	lr, [pc, #36]	; 2eb58 <ble_hs_adv_parse_uuids128+0x5c>
   2eb36:	eb04 0c05 	add.w	ip, r4, r5
   2eb3a:	eb0e 070c 	add.w	r7, lr, ip
   2eb3e:	ac01      	add	r4, sp, #4
   2eb40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2eb42:	f84e 000c 	str.w	r0, [lr, ip]
   2eb46:	6079      	str	r1, [r7, #4]
   2eb48:	60ba      	str	r2, [r7, #8]
   2eb4a:	60fb      	str	r3, [r7, #12]
   2eb4c:	7823      	ldrb	r3, [r4, #0]
   2eb4e:	743b      	strb	r3, [r7, #16]
    for (i = 0; i < adv_fields->num_uuids128; i++) {
   2eb50:	3501      	adds	r5, #1
   2eb52:	e7e0      	b.n	2eb16 <ble_hs_adv_parse_uuids128+0x1a>
        return BLE_HS_EBADDATA;
   2eb54:	200a      	movs	r0, #10
}
   2eb56:	4770      	bx	lr
   2eb58:	100053bc 	.word	0x100053bc

0002eb5c <ble_hs_adv_parse_one_field>:
    if (src_len < 1) {
   2eb5c:	2b00      	cmp	r3, #0
   2eb5e:	f000 810f 	beq.w	2ed80 <ble_hs_adv_parse_one_field+0x224>
{
   2eb62:	b538      	push	{r3, r4, r5, lr}
   2eb64:	4604      	mov	r4, r0
   2eb66:	4618      	mov	r0, r3
    *total_len = src[0] + 1;
   2eb68:	7813      	ldrb	r3, [r2, #0]
   2eb6a:	3301      	adds	r3, #1
   2eb6c:	b2db      	uxtb	r3, r3
   2eb6e:	700b      	strb	r3, [r1, #0]
    if (src_len < *total_len) {
   2eb70:	4283      	cmp	r3, r0
   2eb72:	f200 8107 	bhi.w	2ed84 <ble_hs_adv_parse_one_field+0x228>
    type = src[1];
   2eb76:	7855      	ldrb	r5, [r2, #1]
    data = src + 2;
   2eb78:	1c91      	adds	r1, r2, #2
    data_len = *total_len - 2;
   2eb7a:	3b02      	subs	r3, #2
   2eb7c:	b2db      	uxtb	r3, r3
    if (data_len > BLE_HS_ADV_MAX_FIELD_SZ) {
   2eb7e:	2b1d      	cmp	r3, #29
   2eb80:	f200 8102 	bhi.w	2ed88 <ble_hs_adv_parse_one_field+0x22c>
    switch (type) {
   2eb84:	2d24      	cmp	r5, #36	; 0x24
   2eb86:	d82d      	bhi.n	2ebe4 <ble_hs_adv_parse_one_field+0x88>
   2eb88:	b268      	sxtb	r0, r5
   2eb8a:	2800      	cmp	r0, #0
   2eb8c:	f000 80fe 	beq.w	2ed8c <ble_hs_adv_parse_one_field+0x230>
   2eb90:	3d01      	subs	r5, #1
   2eb92:	2d23      	cmp	r5, #35	; 0x23
   2eb94:	f200 80fc 	bhi.w	2ed90 <ble_hs_adv_parse_one_field+0x234>
   2eb98:	e8df f015 	tbh	[pc, r5, lsl #1]
   2eb9c:	0034002d 	.word	0x0034002d
   2eba0:	004c0040 	.word	0x004c0040
   2eba4:	00640058 	.word	0x00640058
   2eba8:	007b0070 	.word	0x007b0070
   2ebac:	00910086 	.word	0x00910086
   2ebb0:	00fa00fa 	.word	0x00fa00fa
   2ebb4:	00fa00fa 	.word	0x00fa00fa
   2ebb8:	00fa00fa 	.word	0x00fa00fa
   2ebbc:	009f00fa 	.word	0x009f00fa
   2ebc0:	00fa00fa 	.word	0x00fa00fa
   2ebc4:	00a400fa 	.word	0x00a400fa
   2ebc8:	00fa00ab 	.word	0x00fa00ab
   2ebcc:	00cf00bf 	.word	0x00cf00bf
   2ebd0:	00fa00fa 	.word	0x00fa00fa
   2ebd4:	00fa00fa 	.word	0x00fa00fa
   2ebd8:	00df00fa 	.word	0x00df00fa
   2ebdc:	00fa00e6 	.word	0x00fa00e6
   2ebe0:	00ed00fa 	.word	0x00ed00fa
   2ebe4:	2dff      	cmp	r5, #255	; 0xff
   2ebe6:	d104      	bne.n	2ebf2 <ble_hs_adv_parse_one_field+0x96>
        adv_fields->mfg_data = data;
   2ebe8:	65a1      	str	r1, [r4, #88]	; 0x58
        adv_fields->mfg_data_len = data_len;
   2ebea:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    return 0;
   2ebee:	2000      	movs	r0, #0
        break;
   2ebf0:	e0c9      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
    switch (type) {
   2ebf2:	2000      	movs	r0, #0
   2ebf4:	e0c7      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        if (data_len != BLE_HS_ADV_FLAGS_LEN) {
   2ebf6:	2b01      	cmp	r3, #1
   2ebf8:	f040 80cc 	bne.w	2ed94 <ble_hs_adv_parse_one_field+0x238>
        adv_fields->flags = *data;
   2ebfc:	7893      	ldrb	r3, [r2, #2]
   2ebfe:	7023      	strb	r3, [r4, #0]
    return 0;
   2ec00:	2000      	movs	r0, #0
        break;
   2ec02:	e0c0      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        rc = ble_hs_adv_parse_uuids16(adv_fields, data, data_len);
   2ec04:	461a      	mov	r2, r3
   2ec06:	4620      	mov	r0, r4
   2ec08:	f7ff ff30 	bl	2ea6c <ble_hs_adv_parse_uuids16>
        if (rc != 0) {
   2ec0c:	2800      	cmp	r0, #0
   2ec0e:	f040 80ba 	bne.w	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->uuids16_is_complete = 0;
   2ec12:	7a63      	ldrb	r3, [r4, #9]
   2ec14:	f36f 0300 	bfc	r3, #0, #1
   2ec18:	7263      	strb	r3, [r4, #9]
        break;
   2ec1a:	e0b4      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        rc = ble_hs_adv_parse_uuids16(adv_fields, data, data_len);
   2ec1c:	461a      	mov	r2, r3
   2ec1e:	4620      	mov	r0, r4
   2ec20:	f7ff ff24 	bl	2ea6c <ble_hs_adv_parse_uuids16>
        if (rc != 0) {
   2ec24:	2800      	cmp	r0, #0
   2ec26:	f040 80ae 	bne.w	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->uuids16_is_complete = 1;
   2ec2a:	7a63      	ldrb	r3, [r4, #9]
   2ec2c:	f043 0301 	orr.w	r3, r3, #1
   2ec30:	7263      	strb	r3, [r4, #9]
        break;
   2ec32:	e0a8      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        rc = ble_hs_adv_parse_uuids32(adv_fields, data, data_len);
   2ec34:	461a      	mov	r2, r3
   2ec36:	4620      	mov	r0, r4
   2ec38:	f7ff ff3a 	bl	2eab0 <ble_hs_adv_parse_uuids32>
        if (rc != 0) {
   2ec3c:	2800      	cmp	r0, #0
   2ec3e:	f040 80a2 	bne.w	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->uuids32_is_complete = 0;
   2ec42:	7c63      	ldrb	r3, [r4, #17]
   2ec44:	f36f 0300 	bfc	r3, #0, #1
   2ec48:	7463      	strb	r3, [r4, #17]
        break;
   2ec4a:	e09c      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        rc = ble_hs_adv_parse_uuids32(adv_fields, data, data_len);
   2ec4c:	461a      	mov	r2, r3
   2ec4e:	4620      	mov	r0, r4
   2ec50:	f7ff ff2e 	bl	2eab0 <ble_hs_adv_parse_uuids32>
        if (rc != 0) {
   2ec54:	2800      	cmp	r0, #0
   2ec56:	f040 8096 	bne.w	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->uuids32_is_complete = 1;
   2ec5a:	7c63      	ldrb	r3, [r4, #17]
   2ec5c:	f043 0301 	orr.w	r3, r3, #1
   2ec60:	7463      	strb	r3, [r4, #17]
        break;
   2ec62:	e090      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        rc = ble_hs_adv_parse_uuids128(adv_fields, data, data_len);
   2ec64:	461a      	mov	r2, r3
   2ec66:	4620      	mov	r0, r4
   2ec68:	f7ff ff48 	bl	2eafc <ble_hs_adv_parse_uuids128>
        if (rc != 0) {
   2ec6c:	2800      	cmp	r0, #0
   2ec6e:	f040 808a 	bne.w	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->uuids128_is_complete = 0;
   2ec72:	7e63      	ldrb	r3, [r4, #25]
   2ec74:	f36f 0300 	bfc	r3, #0, #1
   2ec78:	7663      	strb	r3, [r4, #25]
        break;
   2ec7a:	e084      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        rc = ble_hs_adv_parse_uuids128(adv_fields, data, data_len);
   2ec7c:	461a      	mov	r2, r3
   2ec7e:	4620      	mov	r0, r4
   2ec80:	f7ff ff3c 	bl	2eafc <ble_hs_adv_parse_uuids128>
        if (rc != 0) {
   2ec84:	2800      	cmp	r0, #0
   2ec86:	d17e      	bne.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->uuids128_is_complete = 1;
   2ec88:	7e63      	ldrb	r3, [r4, #25]
   2ec8a:	f043 0301 	orr.w	r3, r3, #1
   2ec8e:	7663      	strb	r3, [r4, #25]
        break;
   2ec90:	e079      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->name = data;
   2ec92:	61e1      	str	r1, [r4, #28]
        adv_fields->name_len = data_len;
   2ec94:	f884 3020 	strb.w	r3, [r4, #32]
        adv_fields->name_is_complete = 0;
   2ec98:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   2ec9c:	f36f 0300 	bfc	r3, #0, #1
   2eca0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return 0;
   2eca4:	2000      	movs	r0, #0
        break;
   2eca6:	e06e      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->name = data;
   2eca8:	61e1      	str	r1, [r4, #28]
        adv_fields->name_len = data_len;
   2ecaa:	f884 3020 	strb.w	r3, [r4, #32]
        adv_fields->name_is_complete = 1;
   2ecae:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   2ecb2:	f043 0301 	orr.w	r3, r3, #1
   2ecb6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return 0;
   2ecba:	2000      	movs	r0, #0
        break;
   2ecbc:	e063      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        if (data_len != BLE_HS_ADV_TX_PWR_LVL_LEN) {
   2ecbe:	2b01      	cmp	r3, #1
   2ecc0:	d16a      	bne.n	2ed98 <ble_hs_adv_parse_one_field+0x23c>
        adv_fields->tx_pwr_lvl = *data;
   2ecc2:	f992 3002 	ldrsb.w	r3, [r2, #2]
   2ecc6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        adv_fields->tx_pwr_lvl_is_present = 1;
   2ecca:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   2ecce:	f043 0301 	orr.w	r3, r3, #1
   2ecd2:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    return 0;
   2ecd6:	2000      	movs	r0, #0
        break;
   2ecd8:	e055      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        if (data_len != BLE_HS_ADV_SLAVE_ITVL_RANGE_LEN) {
   2ecda:	2b04      	cmp	r3, #4
   2ecdc:	d15e      	bne.n	2ed9c <ble_hs_adv_parse_one_field+0x240>
        adv_fields->slave_itvl_range = data;
   2ecde:	6261      	str	r1, [r4, #36]	; 0x24
    return 0;
   2ece0:	2000      	movs	r0, #0
        break;
   2ece2:	e050      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        if (data_len < BLE_HS_ADV_SVC_DATA_UUID16_MIN_LEN) {
   2ece4:	2b01      	cmp	r3, #1
   2ece6:	d95b      	bls.n	2eda0 <ble_hs_adv_parse_one_field+0x244>
        adv_fields->svc_data_uuid16 = data;
   2ece8:	62a1      	str	r1, [r4, #40]	; 0x28
        adv_fields->svc_data_uuid16_len = data_len;
   2ecea:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    return 0;
   2ecee:	2000      	movs	r0, #0
        break;
   2ecf0:	e049      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        if (data_len % BLE_HS_ADV_PUBLIC_TGT_ADDR_ENTRY_LEN != 0) {
   2ecf2:	4a2f      	ldr	r2, [pc, #188]	; (2edb0 <ble_hs_adv_parse_one_field+0x254>)
   2ecf4:	fba2 0203 	umull	r0, r2, r2, r3
   2ecf8:	0892      	lsrs	r2, r2, #2
   2ecfa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   2ecfe:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   2ed02:	f012 0fff 	tst.w	r2, #255	; 0xff
   2ed06:	d14d      	bne.n	2eda4 <ble_hs_adv_parse_one_field+0x248>
        adv_fields->public_tgt_addr = data;
   2ed08:	6321      	str	r1, [r4, #48]	; 0x30
        adv_fields->num_public_tgt_addrs =
   2ed0a:	4a29      	ldr	r2, [pc, #164]	; (2edb0 <ble_hs_adv_parse_one_field+0x254>)
   2ed0c:	fba2 2303 	umull	r2, r3, r2, r3
   2ed10:	089b      	lsrs	r3, r3, #2
   2ed12:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return 0;
   2ed16:	2000      	movs	r0, #0
        break;
   2ed18:	e035      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        if (data_len != BLE_HS_ADV_APPEARANCE_LEN) {
   2ed1a:	2b02      	cmp	r3, #2
   2ed1c:	d001      	beq.n	2ed22 <ble_hs_adv_parse_one_field+0x1c6>
            return BLE_HS_EBADDATA;
   2ed1e:	200a      	movs	r0, #10
   2ed20:	e031      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->appearance = get_le16(data);
   2ed22:	4608      	mov	r0, r1
   2ed24:	f7ea f893 	bl	18e4e <get_le16>
   2ed28:	86e0      	strh	r0, [r4, #54]	; 0x36
        adv_fields->appearance_is_present = 1;
   2ed2a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2ed2e:	f043 0301 	orr.w	r3, r3, #1
   2ed32:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return 0;
   2ed36:	2000      	movs	r0, #0
        break;
   2ed38:	e025      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        if (data_len != BLE_HS_ADV_ADV_ITVL_LEN) {
   2ed3a:	2b02      	cmp	r3, #2
   2ed3c:	d001      	beq.n	2ed42 <ble_hs_adv_parse_one_field+0x1e6>
            return BLE_HS_EBADDATA;
   2ed3e:	200a      	movs	r0, #10
   2ed40:	e021      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->adv_itvl = get_le16(data);
   2ed42:	4608      	mov	r0, r1
   2ed44:	f7ea f883 	bl	18e4e <get_le16>
   2ed48:	8760      	strh	r0, [r4, #58]	; 0x3a
        adv_fields->adv_itvl_is_present = 1;
   2ed4a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   2ed4e:	f043 0301 	orr.w	r3, r3, #1
   2ed52:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return 0;
   2ed56:	2000      	movs	r0, #0
        break;
   2ed58:	e015      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        if (data_len < BLE_HS_ADV_SVC_DATA_UUID32_MIN_LEN) {
   2ed5a:	2b03      	cmp	r3, #3
   2ed5c:	d924      	bls.n	2eda8 <ble_hs_adv_parse_one_field+0x24c>
        adv_fields->svc_data_uuid32 = data;
   2ed5e:	6421      	str	r1, [r4, #64]	; 0x40
        adv_fields->svc_data_uuid32_len = data_len;
   2ed60:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    return 0;
   2ed64:	2000      	movs	r0, #0
        break;
   2ed66:	e00e      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        if (data_len < BLE_HS_ADV_SVC_DATA_UUID128_MIN_LEN) {
   2ed68:	2b0f      	cmp	r3, #15
   2ed6a:	d91f      	bls.n	2edac <ble_hs_adv_parse_one_field+0x250>
        adv_fields->svc_data_uuid128 = data;
   2ed6c:	64a1      	str	r1, [r4, #72]	; 0x48
        adv_fields->svc_data_uuid128_len = data_len;
   2ed6e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    return 0;
   2ed72:	2000      	movs	r0, #0
        break;
   2ed74:	e007      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->uri = data;
   2ed76:	6521      	str	r1, [r4, #80]	; 0x50
        adv_fields->uri_len = data_len;
   2ed78:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    return 0;
   2ed7c:	2000      	movs	r0, #0
        break;
   2ed7e:	e002      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
        return BLE_HS_EMSGSIZE;
   2ed80:	2004      	movs	r0, #4
}
   2ed82:	4770      	bx	lr
        return BLE_HS_EMSGSIZE;
   2ed84:	2004      	movs	r0, #4
}
   2ed86:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_EBADDATA;
   2ed88:	200a      	movs	r0, #10
   2ed8a:	e7fc      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
    switch (type) {
   2ed8c:	2000      	movs	r0, #0
   2ed8e:	e7fa      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
   2ed90:	2000      	movs	r0, #0
   2ed92:	e7f8      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
            return BLE_HS_EBADDATA;
   2ed94:	200a      	movs	r0, #10
   2ed96:	e7f6      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
            return BLE_HS_EBADDATA;
   2ed98:	200a      	movs	r0, #10
   2ed9a:	e7f4      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
            return BLE_HS_EBADDATA;
   2ed9c:	200a      	movs	r0, #10
   2ed9e:	e7f2      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
            return BLE_HS_EBADDATA;
   2eda0:	200a      	movs	r0, #10
   2eda2:	e7f0      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
            return BLE_HS_EBADDATA;
   2eda4:	200a      	movs	r0, #10
   2eda6:	e7ee      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
            return BLE_HS_EBADDATA;
   2eda8:	200a      	movs	r0, #10
   2edaa:	e7ec      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
            return BLE_HS_EBADDATA;
   2edac:	200a      	movs	r0, #10
   2edae:	e7ea      	b.n	2ed86 <ble_hs_adv_parse_one_field+0x22a>
   2edb0:	aaaaaaab 	.word	0xaaaaaaab

0002edb4 <ble_hs_adv_set_fields>:
{
   2edb4:	b510      	push	{r4, lr}
   2edb6:	b082      	sub	sp, #8
    return adv_set_fields(adv_fields, dst, dst_len, max_len, NULL);
   2edb8:	2400      	movs	r4, #0
   2edba:	9400      	str	r4, [sp, #0]
   2edbc:	f7ff fcee 	bl	2e79c <adv_set_fields>
}
   2edc0:	b002      	add	sp, #8
   2edc2:	bd10      	pop	{r4, pc}

0002edc4 <ble_hs_adv_parse_fields>:
{
   2edc4:	b570      	push	{r4, r5, r6, lr}
   2edc6:	b082      	sub	sp, #8
   2edc8:	4606      	mov	r6, r0
   2edca:	460d      	mov	r5, r1
   2edcc:	4614      	mov	r4, r2
    memset(adv_fields, 0, sizeof *adv_fields);
   2edce:	2260      	movs	r2, #96	; 0x60
   2edd0:	2100      	movs	r1, #0
   2edd2:	f7eb ff62 	bl	1ac9a <memset>
    while (src_len > 0) {
   2edd6:	b174      	cbz	r4, 2edf6 <ble_hs_adv_parse_fields+0x32>
        rc = ble_hs_adv_parse_one_field(adv_fields, &field_len, src, src_len);
   2edd8:	4623      	mov	r3, r4
   2edda:	462a      	mov	r2, r5
   2eddc:	f10d 0107 	add.w	r1, sp, #7
   2ede0:	4630      	mov	r0, r6
   2ede2:	f7ff febb 	bl	2eb5c <ble_hs_adv_parse_one_field>
        if (rc != 0) {
   2ede6:	4603      	mov	r3, r0
   2ede8:	b930      	cbnz	r0, 2edf8 <ble_hs_adv_parse_fields+0x34>
        src += field_len;
   2edea:	f89d 2007 	ldrb.w	r2, [sp, #7]
   2edee:	4415      	add	r5, r2
        src_len -= field_len;
   2edf0:	1aa4      	subs	r4, r4, r2
   2edf2:	b2e4      	uxtb	r4, r4
   2edf4:	e7ef      	b.n	2edd6 <ble_hs_adv_parse_fields+0x12>
    return 0;
   2edf6:	2300      	movs	r3, #0
}
   2edf8:	4618      	mov	r0, r3
   2edfa:	b002      	add	sp, #8
   2edfc:	bd70      	pop	{r4, r5, r6, pc}

0002edfe <ble_hs_adv_parse>:
{
   2edfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ee00:	4605      	mov	r5, r0
   2ee02:	460c      	mov	r4, r1
   2ee04:	4617      	mov	r7, r2
   2ee06:	461e      	mov	r6, r3
    while (length > 1) {
   2ee08:	e006      	b.n	2ee18 <ble_hs_adv_parse+0x1a>
        length -= 1 + field->length;
   2ee0a:	7829      	ldrb	r1, [r5, #0]
   2ee0c:	1a64      	subs	r4, r4, r1
   2ee0e:	b2e4      	uxtb	r4, r4
   2ee10:	3c01      	subs	r4, #1
   2ee12:	b2e4      	uxtb	r4, r4
        data += 1 + field->length;
   2ee14:	3101      	adds	r1, #1
   2ee16:	440d      	add	r5, r1
    while (length > 1) {
   2ee18:	2c01      	cmp	r4, #1
   2ee1a:	d909      	bls.n	2ee30 <ble_hs_adv_parse+0x32>
        if (field->length >= length) {
   2ee1c:	782b      	ldrb	r3, [r5, #0]
   2ee1e:	42a3      	cmp	r3, r4
   2ee20:	d209      	bcs.n	2ee36 <ble_hs_adv_parse+0x38>
        if (func(field, user_data) == 0) {
   2ee22:	4631      	mov	r1, r6
   2ee24:	4628      	mov	r0, r5
   2ee26:	47b8      	blx	r7
   2ee28:	4603      	mov	r3, r0
   2ee2a:	2800      	cmp	r0, #0
   2ee2c:	d1ed      	bne.n	2ee0a <ble_hs_adv_parse+0xc>
   2ee2e:	e000      	b.n	2ee32 <ble_hs_adv_parse+0x34>
    return 0;
   2ee30:	2300      	movs	r3, #0
}
   2ee32:	4618      	mov	r0, r3
   2ee34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return BLE_HS_EBADDATA;
   2ee36:	230a      	movs	r3, #10
   2ee38:	e7fb      	b.n	2ee32 <ble_hs_adv_parse+0x34>
	...

0002ee3c <ble_hs_adv_find_field>:

int
ble_hs_adv_find_field(uint8_t type, const uint8_t *data, uint8_t length,
                      const struct ble_hs_adv_field **out)
{
   2ee3c:	b530      	push	{r4, r5, lr}
   2ee3e:	b083      	sub	sp, #12
   2ee40:	4605      	mov	r5, r0
   2ee42:	4608      	mov	r0, r1
   2ee44:	4611      	mov	r1, r2
   2ee46:	461c      	mov	r4, r3
    int rc;
    struct find_field_data ffd = {
   2ee48:	f88d 5000 	strb.w	r5, [sp]
   2ee4c:	2300      	movs	r3, #0
   2ee4e:	9301      	str	r3, [sp, #4]
            .type = type,
            .field = NULL,
    };

    rc = ble_hs_adv_parse(data, length, find_field_func, &ffd);
   2ee50:	466b      	mov	r3, sp
   2ee52:	4a05      	ldr	r2, [pc, #20]	; (2ee68 <ble_hs_adv_find_field+0x2c>)
   2ee54:	f7ff ffd3 	bl	2edfe <ble_hs_adv_parse>
    if (rc != 0) {
   2ee58:	b910      	cbnz	r0, 2ee60 <ble_hs_adv_find_field+0x24>
        return rc;
    }

    if (!ffd.field) {
   2ee5a:	9b01      	ldr	r3, [sp, #4]
   2ee5c:	b113      	cbz	r3, 2ee64 <ble_hs_adv_find_field+0x28>
        return BLE_HS_ENOENT;
    }

    *out = ffd.field;
   2ee5e:	6023      	str	r3, [r4, #0]

    return 0;
}
   2ee60:	b003      	add	sp, #12
   2ee62:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ENOENT;
   2ee64:	2005      	movs	r0, #5
   2ee66:	e7fb      	b.n	2ee60 <ble_hs_adv_find_field+0x24>
   2ee68:	0002e521 	.word	0x0002e521

0002ee6c <ble_hs_atomic_conn_delete>:

#include "ble_hs_priv.h"

int
ble_hs_atomic_conn_delete(uint16_t conn_handle)
{
   2ee6c:	b510      	push	{r4, lr}
   2ee6e:	4604      	mov	r4, r0
    struct ble_hs_conn *conn;

    ble_hs_lock();
   2ee70:	f7ff f88e 	bl	2df90 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   2ee74:	4620      	mov	r0, r4
   2ee76:	f000 f90f 	bl	2f098 <ble_hs_conn_find>
    if (conn != NULL) {
   2ee7a:	4604      	mov	r4, r0
   2ee7c:	b120      	cbz	r0, 2ee88 <ble_hs_atomic_conn_delete+0x1c>
        ble_hs_conn_remove(conn);
   2ee7e:	f000 f8f9 	bl	2f074 <ble_hs_conn_remove>
#if MYNEWT_VAL(BLE_PERIODIC_ADV_SYNC_TRANSFER)
        if (conn->psync) {
            ble_hs_periodic_sync_free(conn->psync);
        }
#endif
        ble_hs_conn_free(conn);
   2ee82:	4620      	mov	r0, r4
   2ee84:	f000 f88e 	bl	2efa4 <ble_hs_conn_free>

    }
    ble_hs_unlock();
   2ee88:	f7ff f886 	bl	2df98 <ble_hs_unlock>

    return conn != NULL ? 0 : BLE_HS_ENOTCONN;
   2ee8c:	b10c      	cbz	r4, 2ee92 <ble_hs_atomic_conn_delete+0x26>
   2ee8e:	2000      	movs	r0, #0
}
   2ee90:	bd10      	pop	{r4, pc}
    return conn != NULL ? 0 : BLE_HS_ENOTCONN;
   2ee92:	2007      	movs	r0, #7
   2ee94:	e7fc      	b.n	2ee90 <ble_hs_atomic_conn_delete+0x24>

0002ee96 <ble_hs_atomic_conn_flags>:
    ble_hs_unlock();
}

int
ble_hs_atomic_conn_flags(uint16_t conn_handle, ble_hs_conn_flags_t *out_flags)
{
   2ee96:	b538      	push	{r3, r4, r5, lr}
   2ee98:	4605      	mov	r5, r0
   2ee9a:	460c      	mov	r4, r1
    struct ble_hs_conn *conn;
    int rc;

    ble_hs_lock();
   2ee9c:	f7ff f878 	bl	2df90 <ble_hs_lock>

    conn = ble_hs_conn_find(conn_handle);
   2eea0:	4628      	mov	r0, r5
   2eea2:	f000 f8f9 	bl	2f098 <ble_hs_conn_find>
    if (conn == NULL) {
   2eea6:	b140      	cbz	r0, 2eeba <ble_hs_atomic_conn_flags+0x24>
        rc = BLE_HS_ENOTCONN;
    } else {
        rc = 0;
        if (out_flags != NULL) {
   2eea8:	b14c      	cbz	r4, 2eebe <ble_hs_atomic_conn_flags+0x28>
            *out_flags = conn->bhc_flags;
   2eeaa:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   2eeae:	7023      	strb	r3, [r4, #0]
        rc = 0;
   2eeb0:	2400      	movs	r4, #0
        }
    }

    ble_hs_unlock();
   2eeb2:	f7ff f871 	bl	2df98 <ble_hs_unlock>

    return rc;
}
   2eeb6:	4620      	mov	r0, r4
   2eeb8:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTCONN;
   2eeba:	2407      	movs	r4, #7
   2eebc:	e7f9      	b.n	2eeb2 <ble_hs_atomic_conn_flags+0x1c>
        rc = 0;
   2eebe:	2400      	movs	r4, #0
   2eec0:	e7f7      	b.n	2eeb2 <ble_hs_atomic_conn_flags+0x1c>

0002eec2 <ble_hs_atomic_first_conn_handle>:
    return rc;
}

uint16_t
ble_hs_atomic_first_conn_handle(void)
{
   2eec2:	b510      	push	{r4, lr}
    const struct ble_hs_conn *conn;
    uint16_t conn_handle;

    ble_hs_lock();
   2eec4:	f7ff f864 	bl	2df90 <ble_hs_lock>

    conn = ble_hs_conn_first();
   2eec8:	f000 f910 	bl	2f0ec <ble_hs_conn_first>
    if (conn != NULL) {
   2eecc:	b120      	cbz	r0, 2eed8 <ble_hs_atomic_first_conn_handle+0x16>
        conn_handle = conn->bhc_handle;
   2eece:	8884      	ldrh	r4, [r0, #4]
    } else {
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
    }

    ble_hs_unlock();
   2eed0:	f7ff f862 	bl	2df98 <ble_hs_unlock>

    return conn_handle;
}
   2eed4:	4620      	mov	r0, r4
   2eed6:	bd10      	pop	{r4, pc}
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   2eed8:	f64f 74ff 	movw	r4, #65535	; 0xffff
   2eedc:	e7f8      	b.n	2eed0 <ble_hs_atomic_first_conn_handle+0xe>
	...

0002eee0 <ble_hs_conn_can_alloc>:

static const uint8_t ble_hs_conn_null_addr[6];

int
ble_hs_conn_can_alloc(void)
{
   2eee0:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_CONNECT
    return 0;
#endif

    return ble_hs_conn_pool.mp_num_free >= 1 &&
   2eee2:	4b08      	ldr	r3, [pc, #32]	; (2ef04 <ble_hs_conn_can_alloc+0x24>)
   2eee4:	88db      	ldrh	r3, [r3, #6]
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   2eee6:	b153      	cbz	r3, 2eefe <ble_hs_conn_can_alloc+0x1e>
   2eee8:	4b07      	ldr	r3, [pc, #28]	; (2ef08 <ble_hs_conn_can_alloc+0x28>)
   2eeea:	88db      	ldrh	r3, [r3, #6]
    return ble_hs_conn_pool.mp_num_free >= 1 &&
   2eeec:	2b02      	cmp	r3, #2
   2eeee:	d801      	bhi.n	2eef4 <ble_hs_conn_can_alloc+0x14>
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   2eef0:	2000      	movs	r0, #0
   2eef2:	e005      	b.n	2ef00 <ble_hs_conn_can_alloc+0x20>
           ble_gatts_conn_can_alloc();
   2eef4:	f7fe fc38 	bl	2d768 <ble_gatts_conn_can_alloc>
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   2eef8:	b110      	cbz	r0, 2ef00 <ble_hs_conn_can_alloc+0x20>
   2eefa:	2001      	movs	r0, #1
   2eefc:	e000      	b.n	2ef00 <ble_hs_conn_can_alloc+0x20>
   2eefe:	2000      	movs	r0, #0
}
   2ef00:	bd08      	pop	{r3, pc}
   2ef02:	bf00      	nop
   2ef04:	100054a4 	.word	0x100054a4
   2ef08:	100056e4 	.word	0x100056e4

0002ef0c <ble_hs_conn_chan_find_by_scid>:
    return NULL;
#endif

    struct ble_l2cap_chan *chan;

    SLIST_FOREACH(chan, &conn->bhc_channels, next) {
   2ef0c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2ef0e:	e000      	b.n	2ef12 <ble_hs_conn_chan_find_by_scid+0x6>
   2ef10:	6800      	ldr	r0, [r0, #0]
   2ef12:	b128      	cbz	r0, 2ef20 <ble_hs_conn_chan_find_by_scid+0x14>
        if (chan->scid == cid) {
   2ef14:	8903      	ldrh	r3, [r0, #8]
   2ef16:	428b      	cmp	r3, r1
   2ef18:	d001      	beq.n	2ef1e <ble_hs_conn_chan_find_by_scid+0x12>
            return chan;
        }
        if (chan->scid > cid) {
   2ef1a:	d9f9      	bls.n	2ef10 <ble_hs_conn_chan_find_by_scid+0x4>
            return NULL;
   2ef1c:	2000      	movs	r0, #0
        }
    }

    return NULL;
}
   2ef1e:	4770      	bx	lr
   2ef20:	4770      	bx	lr

0002ef22 <ble_hs_conn_chan_insert>:
    return false;
}

int
ble_hs_conn_chan_insert(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan)
{
   2ef22:	b470      	push	{r4, r5, r6}

    struct ble_l2cap_chan *prev;
    struct ble_l2cap_chan *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   2ef24:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   2ef26:	4633      	mov	r3, r6
    prev = NULL;
   2ef28:	2500      	movs	r5, #0
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   2ef2a:	e001      	b.n	2ef30 <ble_hs_conn_chan_insert+0xe>
        }
        if (cur->scid > chan->scid) {
            break;
        }

        prev = cur;
   2ef2c:	461d      	mov	r5, r3
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   2ef2e:	681b      	ldr	r3, [r3, #0]
   2ef30:	b123      	cbz	r3, 2ef3c <ble_hs_conn_chan_insert+0x1a>
        if (cur->scid == chan->scid) {
   2ef32:	891c      	ldrh	r4, [r3, #8]
   2ef34:	890a      	ldrh	r2, [r1, #8]
   2ef36:	4294      	cmp	r4, r2
   2ef38:	d00b      	beq.n	2ef52 <ble_hs_conn_chan_insert+0x30>
        if (cur->scid > chan->scid) {
   2ef3a:	d9f7      	bls.n	2ef2c <ble_hs_conn_chan_insert+0xa>
    }

    if (prev == NULL) {
   2ef3c:	b12d      	cbz	r5, 2ef4a <ble_hs_conn_chan_insert+0x28>
        SLIST_INSERT_HEAD(&conn->bhc_channels, chan, next);
    } else {
        SLIST_INSERT_AFTER(prev, chan, next);
   2ef3e:	682b      	ldr	r3, [r5, #0]
   2ef40:	600b      	str	r3, [r1, #0]
   2ef42:	6029      	str	r1, [r5, #0]
    }

    return 0;
   2ef44:	2000      	movs	r0, #0
}
   2ef46:	bc70      	pop	{r4, r5, r6}
   2ef48:	4770      	bx	lr
        SLIST_INSERT_HEAD(&conn->bhc_channels, chan, next);
   2ef4a:	600e      	str	r6, [r1, #0]
   2ef4c:	62c1      	str	r1, [r0, #44]	; 0x2c
    return 0;
   2ef4e:	2000      	movs	r0, #0
   2ef50:	e7f9      	b.n	2ef46 <ble_hs_conn_chan_insert+0x24>
            return BLE_HS_EALREADY;
   2ef52:	2002      	movs	r0, #2
   2ef54:	e7f7      	b.n	2ef46 <ble_hs_conn_chan_insert+0x24>

0002ef56 <ble_hs_conn_delete_chan>:
    return NULL;
}

void
ble_hs_conn_delete_chan(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan)
{
   2ef56:	b508      	push	{r3, lr}
    if (conn->bhc_rx_chan == chan) {
   2ef58:	6b03      	ldr	r3, [r0, #48]	; 0x30
   2ef5a:	428b      	cmp	r3, r1
   2ef5c:	d00b      	beq.n	2ef76 <ble_hs_conn_delete_chan+0x20>
        conn->bhc_rx_chan = NULL;
    }

    SLIST_REMOVE(&conn->bhc_channels, chan, ble_l2cap_chan, next);
   2ef5e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2ef60:	428b      	cmp	r3, r1
   2ef62:	d00b      	beq.n	2ef7c <ble_hs_conn_delete_chan+0x26>
   2ef64:	461a      	mov	r2, r3
   2ef66:	681b      	ldr	r3, [r3, #0]
   2ef68:	428b      	cmp	r3, r1
   2ef6a:	d1fb      	bne.n	2ef64 <ble_hs_conn_delete_chan+0xe>
   2ef6c:	681b      	ldr	r3, [r3, #0]
   2ef6e:	6013      	str	r3, [r2, #0]
    ble_l2cap_chan_free(conn, chan);
   2ef70:	f001 fc12 	bl	30798 <ble_l2cap_chan_free>
}
   2ef74:	bd08      	pop	{r3, pc}
        conn->bhc_rx_chan = NULL;
   2ef76:	2300      	movs	r3, #0
   2ef78:	6303      	str	r3, [r0, #48]	; 0x30
   2ef7a:	e7f0      	b.n	2ef5e <ble_hs_conn_delete_chan+0x8>
    SLIST_REMOVE(&conn->bhc_channels, chan, ble_l2cap_chan, next);
   2ef7c:	681b      	ldr	r3, [r3, #0]
   2ef7e:	62c3      	str	r3, [r0, #44]	; 0x2c
   2ef80:	e7f6      	b.n	2ef70 <ble_hs_conn_delete_chan+0x1a>
	...

0002ef84 <ble_hs_conn_foreach>:

void
ble_hs_conn_foreach(ble_hs_conn_foreach_fn *cb, void *arg)
{
   2ef84:	b570      	push	{r4, r5, r6, lr}
   2ef86:	4606      	mov	r6, r0
   2ef88:	460d      	mov	r5, r1
    struct ble_hs_conn *conn;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   2ef8a:	4b05      	ldr	r3, [pc, #20]	; (2efa0 <ble_hs_conn_foreach+0x1c>)
   2ef8c:	681c      	ldr	r4, [r3, #0]
   2ef8e:	b12c      	cbz	r4, 2ef9c <ble_hs_conn_foreach+0x18>
        if (cb(conn, arg) != 0) {
   2ef90:	4629      	mov	r1, r5
   2ef92:	4620      	mov	r0, r4
   2ef94:	47b0      	blx	r6
   2ef96:	b908      	cbnz	r0, 2ef9c <ble_hs_conn_foreach+0x18>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   2ef98:	6824      	ldr	r4, [r4, #0]
   2ef9a:	e7f8      	b.n	2ef8e <ble_hs_conn_foreach+0xa>
            return;
        }
    }
}
   2ef9c:	bd70      	pop	{r4, r5, r6, pc}
   2ef9e:	bf00      	nop
   2efa0:	100054c0 	.word	0x100054c0

0002efa4 <ble_hs_conn_free>:

    struct ble_l2cap_chan *chan;
    struct os_mbuf_pkthdr *omp;
    int rc;

    if (conn == NULL) {
   2efa4:	b300      	cbz	r0, 2efe8 <ble_hs_conn_free+0x44>
{
   2efa6:	b510      	push	{r4, lr}
   2efa8:	4604      	mov	r4, r0
        return;
    }

    ble_att_svr_prep_clear(&conn->bhc_att_svr.basc_prep_list);
   2efaa:	3044      	adds	r0, #68	; 0x44
   2efac:	f7f9 faf3 	bl	28596 <ble_att_svr_prep_clear>

    while ((chan = SLIST_FIRST(&conn->bhc_channels)) != NULL) {
   2efb0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   2efb2:	b149      	cbz	r1, 2efc8 <ble_hs_conn_free+0x24>
        ble_hs_conn_delete_chan(conn, chan);
   2efb4:	4620      	mov	r0, r4
   2efb6:	f7ff ffce 	bl	2ef56 <ble_hs_conn_delete_chan>
   2efba:	e7f9      	b.n	2efb0 <ble_hs_conn_free+0xc>
    }

    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   2efbc:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   2efc0:	6423      	str	r3, [r4, #64]	; 0x40
        os_mbuf_free_chain(OS_MBUF_PKTHDR_TO_MBUF(omp));
   2efc2:	3810      	subs	r0, #16
   2efc4:	f7ea fb03 	bl	195ce <os_mbuf_free_chain>
    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   2efc8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   2efca:	b120      	cbz	r0, 2efd6 <ble_hs_conn_free+0x32>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   2efcc:	6843      	ldr	r3, [r0, #4]
   2efce:	63e3      	str	r3, [r4, #60]	; 0x3c
   2efd0:	2b00      	cmp	r3, #0
   2efd2:	d1f6      	bne.n	2efc2 <ble_hs_conn_free+0x1e>
   2efd4:	e7f2      	b.n	2efbc <ble_hs_conn_free+0x18>
    }

#if MYNEWT_VAL(BLE_HS_DEBUG)
    memset(conn, 0xff, sizeof *conn);
#endif
    rc = os_memblock_put(&ble_hs_conn_pool, conn);
   2efd6:	4621      	mov	r1, r4
   2efd8:	4804      	ldr	r0, [pc, #16]	; (2efec <ble_hs_conn_free+0x48>)
   2efda:	f7ea ff5f 	bl	19e9c <os_memblock_put>
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    STATS_INC(ble_hs_stats, conn_delete);
   2efde:	4a04      	ldr	r2, [pc, #16]	; (2eff0 <ble_hs_conn_free+0x4c>)
   2efe0:	6913      	ldr	r3, [r2, #16]
   2efe2:	3301      	adds	r3, #1
   2efe4:	6113      	str	r3, [r2, #16]
}
   2efe6:	bd10      	pop	{r4, pc}
   2efe8:	4770      	bx	lr
   2efea:	bf00      	nop
   2efec:	100054a4 	.word	0x100054a4
   2eff0:	10005360 	.word	0x10005360

0002eff4 <ble_hs_conn_alloc>:
{
   2eff4:	b538      	push	{r3, r4, r5, lr}
   2eff6:	4605      	mov	r5, r0
    conn = os_memblock_get(&ble_hs_conn_pool);
   2eff8:	481c      	ldr	r0, [pc, #112]	; (2f06c <ble_hs_conn_alloc+0x78>)
   2effa:	f7ea ff27 	bl	19e4c <os_memblock_get>
    if (conn == NULL) {
   2effe:	4604      	mov	r4, r0
   2f000:	b370      	cbz	r0, 2f060 <ble_hs_conn_alloc+0x6c>
    memset(conn, 0, sizeof *conn);
   2f002:	2264      	movs	r2, #100	; 0x64
   2f004:	2100      	movs	r1, #0
   2f006:	f7eb fe48 	bl	1ac9a <memset>
    conn->bhc_handle = conn_handle;
   2f00a:	80a5      	strh	r5, [r4, #4]
    chan = ble_att_create_chan(conn_handle);
   2f00c:	4628      	mov	r0, r5
   2f00e:	f7f7 fc89 	bl	26924 <ble_att_create_chan>
    if (chan == NULL) {
   2f012:	4601      	mov	r1, r0
   2f014:	b320      	cbz	r0, 2f060 <ble_hs_conn_alloc+0x6c>
    rc = ble_hs_conn_chan_insert(conn, chan);
   2f016:	4620      	mov	r0, r4
   2f018:	f7ff ff83 	bl	2ef22 <ble_hs_conn_chan_insert>
    if (rc != 0) {
   2f01c:	bb00      	cbnz	r0, 2f060 <ble_hs_conn_alloc+0x6c>
    chan = ble_l2cap_sig_create_chan(conn_handle);
   2f01e:	4628      	mov	r0, r5
   2f020:	f001 fee0 	bl	30de4 <ble_l2cap_sig_create_chan>
    if (chan == NULL) {
   2f024:	4601      	mov	r1, r0
   2f026:	b1d8      	cbz	r0, 2f060 <ble_hs_conn_alloc+0x6c>
    rc = ble_hs_conn_chan_insert(conn, chan);
   2f028:	4620      	mov	r0, r4
   2f02a:	f7ff ff7a 	bl	2ef22 <ble_hs_conn_chan_insert>
    if (rc != 0) {
   2f02e:	b9b8      	cbnz	r0, 2f060 <ble_hs_conn_alloc+0x6c>
    chan = ble_sm_create_chan(conn_handle);
   2f030:	4628      	mov	r0, r5
   2f032:	f001 ffd5 	bl	30fe0 <ble_sm_create_chan>
    if (chan == NULL) {
   2f036:	4601      	mov	r1, r0
   2f038:	b190      	cbz	r0, 2f060 <ble_hs_conn_alloc+0x6c>
    rc = ble_hs_conn_chan_insert(conn, chan);
   2f03a:	4620      	mov	r0, r4
   2f03c:	f7ff ff71 	bl	2ef22 <ble_hs_conn_chan_insert>
    if (rc != 0) {
   2f040:	b970      	cbnz	r0, 2f060 <ble_hs_conn_alloc+0x6c>
    rc = ble_gatts_conn_init(&conn->bhc_gatt_svr);
   2f042:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   2f046:	f7fe fb9f 	bl	2d788 <ble_gatts_conn_init>
    if (rc != 0) {
   2f04a:	b948      	cbnz	r0, 2f060 <ble_hs_conn_alloc+0x6c>
    STAILQ_INIT(&conn->bhc_tx_q);
   2f04c:	4623      	mov	r3, r4
   2f04e:	2200      	movs	r2, #0
   2f050:	f843 2f3c 	str.w	r2, [r3, #60]!
   2f054:	6423      	str	r3, [r4, #64]	; 0x40
    STATS_INC(ble_hs_stats, conn_create);
   2f056:	4a06      	ldr	r2, [pc, #24]	; (2f070 <ble_hs_conn_alloc+0x7c>)
   2f058:	68d3      	ldr	r3, [r2, #12]
   2f05a:	3301      	adds	r3, #1
   2f05c:	60d3      	str	r3, [r2, #12]
    return conn;
   2f05e:	e003      	b.n	2f068 <ble_hs_conn_alloc+0x74>
    ble_hs_conn_free(conn);
   2f060:	4620      	mov	r0, r4
   2f062:	f7ff ff9f 	bl	2efa4 <ble_hs_conn_free>
    return NULL;
   2f066:	2400      	movs	r4, #0
}
   2f068:	4620      	mov	r0, r4
   2f06a:	bd38      	pop	{r3, r4, r5, pc}
   2f06c:	100054a4 	.word	0x100054a4
   2f070:	10005360 	.word	0x10005360

0002f074 <ble_hs_conn_remove>:
    return;
#endif

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    SLIST_REMOVE(&ble_hs_conns, conn, ble_hs_conn, bhc_next);
   2f074:	4b07      	ldr	r3, [pc, #28]	; (2f094 <ble_hs_conn_remove+0x20>)
   2f076:	681b      	ldr	r3, [r3, #0]
   2f078:	4283      	cmp	r3, r0
   2f07a:	d006      	beq.n	2f08a <ble_hs_conn_remove+0x16>
   2f07c:	461a      	mov	r2, r3
   2f07e:	681b      	ldr	r3, [r3, #0]
   2f080:	4283      	cmp	r3, r0
   2f082:	d1fb      	bne.n	2f07c <ble_hs_conn_remove+0x8>
   2f084:	681b      	ldr	r3, [r3, #0]
   2f086:	6013      	str	r3, [r2, #0]
}
   2f088:	4770      	bx	lr
    SLIST_REMOVE(&ble_hs_conns, conn, ble_hs_conn, bhc_next);
   2f08a:	681a      	ldr	r2, [r3, #0]
   2f08c:	4b01      	ldr	r3, [pc, #4]	; (2f094 <ble_hs_conn_remove+0x20>)
   2f08e:	601a      	str	r2, [r3, #0]
   2f090:	4770      	bx	lr
   2f092:	bf00      	nop
   2f094:	100054c0 	.word	0x100054c0

0002f098 <ble_hs_conn_find>:

struct ble_hs_conn *
ble_hs_conn_find(uint16_t conn_handle)
{
   2f098:	4602      	mov	r2, r0

    struct ble_hs_conn *conn;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   2f09a:	4b04      	ldr	r3, [pc, #16]	; (2f0ac <ble_hs_conn_find+0x14>)
   2f09c:	6818      	ldr	r0, [r3, #0]
   2f09e:	b120      	cbz	r0, 2f0aa <ble_hs_conn_find+0x12>
        if (conn->bhc_handle == conn_handle) {
   2f0a0:	8883      	ldrh	r3, [r0, #4]
   2f0a2:	4293      	cmp	r3, r2
   2f0a4:	d001      	beq.n	2f0aa <ble_hs_conn_find+0x12>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   2f0a6:	6800      	ldr	r0, [r0, #0]
   2f0a8:	e7f9      	b.n	2f09e <ble_hs_conn_find+0x6>
            return conn;
        }
    }

    return NULL;
}
   2f0aa:	4770      	bx	lr
   2f0ac:	100054c0 	.word	0x100054c0

0002f0b0 <ble_hs_conn_insert>:
{
   2f0b0:	b510      	push	{r4, lr}
   2f0b2:	4604      	mov	r4, r0
    BLE_HS_DBG_ASSERT_EVAL(ble_hs_conn_find(conn->bhc_handle) == NULL);
   2f0b4:	8880      	ldrh	r0, [r0, #4]
   2f0b6:	f7ff ffef 	bl	2f098 <ble_hs_conn_find>
    SLIST_INSERT_HEAD(&ble_hs_conns, conn, bhc_next);
   2f0ba:	4b02      	ldr	r3, [pc, #8]	; (2f0c4 <ble_hs_conn_insert+0x14>)
   2f0bc:	681a      	ldr	r2, [r3, #0]
   2f0be:	6022      	str	r2, [r4, #0]
   2f0c0:	601c      	str	r4, [r3, #0]
}
   2f0c2:	bd10      	pop	{r4, pc}
   2f0c4:	100054c0 	.word	0x100054c0

0002f0c8 <ble_hs_conn_find_assert>:

struct ble_hs_conn *
ble_hs_conn_find_assert(uint16_t conn_handle)
{
   2f0c8:	b508      	push	{r3, lr}
    struct ble_hs_conn *conn;

    conn = ble_hs_conn_find(conn_handle);
   2f0ca:	f7ff ffe5 	bl	2f098 <ble_hs_conn_find>
    BLE_HS_DBG_ASSERT(conn != NULL);

    return conn;
}
   2f0ce:	bd08      	pop	{r3, pc}

0002f0d0 <ble_hs_conn_find_by_idx>:
    return NULL;
}

struct ble_hs_conn *
ble_hs_conn_find_by_idx(int idx)
{
   2f0d0:	4602      	mov	r2, r0
    int i;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    i = 0;
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   2f0d2:	4b05      	ldr	r3, [pc, #20]	; (2f0e8 <ble_hs_conn_find_by_idx+0x18>)
   2f0d4:	6818      	ldr	r0, [r3, #0]
    i = 0;
   2f0d6:	2300      	movs	r3, #0
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   2f0d8:	b120      	cbz	r0, 2f0e4 <ble_hs_conn_find_by_idx+0x14>
        if (i == idx) {
   2f0da:	4293      	cmp	r3, r2
   2f0dc:	d002      	beq.n	2f0e4 <ble_hs_conn_find_by_idx+0x14>
            return conn;
        }

        i++;
   2f0de:	3301      	adds	r3, #1
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   2f0e0:	6800      	ldr	r0, [r0, #0]
   2f0e2:	e7f9      	b.n	2f0d8 <ble_hs_conn_find_by_idx+0x8>
    }

    return NULL;
}
   2f0e4:	4770      	bx	lr
   2f0e6:	bf00      	nop
   2f0e8:	100054c0 	.word	0x100054c0

0002f0ec <ble_hs_conn_first>:
    return NULL;
#endif

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());
    return SLIST_FIRST(&ble_hs_conns);
}
   2f0ec:	4b01      	ldr	r3, [pc, #4]	; (2f0f4 <ble_hs_conn_first+0x8>)
   2f0ee:	6818      	ldr	r0, [r3, #0]
   2f0f0:	4770      	bx	lr
   2f0f2:	bf00      	nop
   2f0f4:	100054c0 	.word	0x100054c0

0002f0f8 <ble_hs_conn_addrs>:

void
ble_hs_conn_addrs(const struct ble_hs_conn *conn,
                  struct ble_hs_conn_addrs *addrs)
{
   2f0f8:	b530      	push	{r4, r5, lr}
   2f0fa:	b083      	sub	sp, #12
   2f0fc:	4605      	mov	r5, r0
   2f0fe:	460c      	mov	r4, r1
    const uint8_t *our_id_addr_val;
    int rc;

    /* Determine our address information. */
    addrs->our_id_addr.type =
        ble_hs_misc_own_addr_type_to_id(conn->bhc_our_addr_type);
   2f100:	7980      	ldrb	r0, [r0, #6]
   2f102:	f000 ffc0 	bl	30086 <ble_hs_misc_own_addr_type_to_id>
    addrs->our_id_addr.type =
   2f106:	7020      	strb	r0, [r4, #0]
    } else {
        rc = ble_hs_id_addr(addrs->our_id_addr.type, &our_id_addr_val, NULL);
        assert(rc == 0);
    }
#else
    rc = ble_hs_id_addr(addrs->our_id_addr.type, &our_id_addr_val, NULL);
   2f108:	2200      	movs	r2, #0
   2f10a:	a901      	add	r1, sp, #4
   2f10c:	f000 fe86 	bl	2fe1c <ble_hs_id_addr>
    assert(rc == 0);
   2f110:	bb78      	cbnz	r0, 2f172 <ble_hs_conn_addrs+0x7a>
#endif

    memcpy(addrs->our_id_addr.val, our_id_addr_val, 6);
   2f112:	9b01      	ldr	r3, [sp, #4]
   2f114:	681a      	ldr	r2, [r3, #0]
   2f116:	f8c4 2001 	str.w	r2, [r4, #1]
   2f11a:	889b      	ldrh	r3, [r3, #4]
   2f11c:	f8a4 3005 	strh.w	r3, [r4, #5]

    if (memcmp(conn->bhc_our_rpa_addr.val, ble_hs_conn_null_addr, 6) == 0) {
   2f120:	2206      	movs	r2, #6
   2f122:	492a      	ldr	r1, [pc, #168]	; (2f1cc <ble_hs_conn_addrs+0xd4>)
   2f124:	f105 000f 	add.w	r0, r5, #15
   2f128:	f7eb fd6e 	bl	1ac08 <memcmp>
   2f12c:	bb58      	cbnz	r0, 2f186 <ble_hs_conn_addrs+0x8e>
        addrs->our_ota_addr = addrs->our_id_addr;
   2f12e:	4623      	mov	r3, r4
   2f130:	f853 2b0e 	ldr.w	r2, [r3], #14
   2f134:	f8c4 200e 	str.w	r2, [r4, #14]
   2f138:	88a1      	ldrh	r1, [r4, #4]
   2f13a:	79a2      	ldrb	r2, [r4, #6]
   2f13c:	8099      	strh	r1, [r3, #4]
   2f13e:	719a      	strb	r2, [r3, #6]
    } else {
        addrs->our_ota_addr = conn->bhc_our_rpa_addr;
    }

    /* Determine peer address information. */
    addrs->peer_id_addr = conn->bhc_peer_addr;
   2f140:	462b      	mov	r3, r5
   2f142:	f853 2f07 	ldr.w	r2, [r3, #7]!
   2f146:	f8c4 2007 	str.w	r2, [r4, #7]
   2f14a:	8899      	ldrh	r1, [r3, #4]
   2f14c:	799a      	ldrb	r2, [r3, #6]
   2f14e:	f8a4 100b 	strh.w	r1, [r4, #11]
   2f152:	7362      	strb	r2, [r4, #13]
    addrs->peer_ota_addr = conn->bhc_peer_addr;
   2f154:	681a      	ldr	r2, [r3, #0]
   2f156:	f8c4 2015 	str.w	r2, [r4, #21]
   2f15a:	889a      	ldrh	r2, [r3, #4]
   2f15c:	799b      	ldrb	r3, [r3, #6]
   2f15e:	f8a4 2019 	strh.w	r2, [r4, #25]
   2f162:	76e3      	strb	r3, [r4, #27]
    switch (conn->bhc_peer_addr.type) {
   2f164:	79eb      	ldrb	r3, [r5, #7]
   2f166:	2b02      	cmp	r3, #2
   2f168:	d017      	beq.n	2f19a <ble_hs_conn_addrs+0xa2>
   2f16a:	2b03      	cmp	r3, #3
   2f16c:	d021      	beq.n	2f1b2 <ble_hs_conn_addrs+0xba>

    default:
        BLE_HS_DBG_ASSERT(0);
        break;
    }
}
   2f16e:	b003      	add	sp, #12
   2f170:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
   2f172:	f7e5 fabf 	bl	146f4 <hal_debugger_connected>
   2f176:	b100      	cbz	r0, 2f17a <ble_hs_conn_addrs+0x82>
   2f178:	be01      	bkpt	0x0001
   2f17a:	2300      	movs	r3, #0
   2f17c:	461a      	mov	r2, r3
   2f17e:	4619      	mov	r1, r3
   2f180:	4618      	mov	r0, r3
   2f182:	f7e9 fdd5 	bl	18d30 <__assert_func>
        addrs->our_ota_addr = conn->bhc_our_rpa_addr;
   2f186:	462b      	mov	r3, r5
   2f188:	f853 2f0e 	ldr.w	r2, [r3, #14]!
   2f18c:	f8c4 200e 	str.w	r2, [r4, #14]
   2f190:	889a      	ldrh	r2, [r3, #4]
   2f192:	799b      	ldrb	r3, [r3, #6]
   2f194:	8262      	strh	r2, [r4, #18]
   2f196:	7523      	strb	r3, [r4, #20]
   2f198:	e7d2      	b.n	2f140 <ble_hs_conn_addrs+0x48>
        addrs->peer_id_addr.type = BLE_ADDR_PUBLIC;
   2f19a:	2300      	movs	r3, #0
   2f19c:	71e3      	strb	r3, [r4, #7]
        addrs->peer_ota_addr = conn->bhc_peer_rpa_addr;
   2f19e:	f855 3f15 	ldr.w	r3, [r5, #21]!
   2f1a2:	f8c4 3015 	str.w	r3, [r4, #21]
   2f1a6:	88aa      	ldrh	r2, [r5, #4]
   2f1a8:	79ab      	ldrb	r3, [r5, #6]
   2f1aa:	f8a4 2019 	strh.w	r2, [r4, #25]
   2f1ae:	76e3      	strb	r3, [r4, #27]
        break;
   2f1b0:	e7dd      	b.n	2f16e <ble_hs_conn_addrs+0x76>
        addrs->peer_id_addr.type = BLE_ADDR_RANDOM;
   2f1b2:	2301      	movs	r3, #1
   2f1b4:	71e3      	strb	r3, [r4, #7]
        addrs->peer_ota_addr = conn->bhc_peer_rpa_addr;
   2f1b6:	f855 3f15 	ldr.w	r3, [r5, #21]!
   2f1ba:	f8c4 3015 	str.w	r3, [r4, #21]
   2f1be:	88aa      	ldrh	r2, [r5, #4]
   2f1c0:	79ab      	ldrb	r3, [r5, #6]
   2f1c2:	f8a4 2019 	strh.w	r2, [r4, #25]
   2f1c6:	76e3      	strb	r3, [r4, #27]
}
   2f1c8:	e7d1      	b.n	2f16e <ble_hs_conn_addrs+0x76>
   2f1ca:	bf00      	nop
   2f1cc:	0003975c 	.word	0x0003975c

0002f1d0 <ble_hs_conn_find_by_addr>:
{
   2f1d0:	b570      	push	{r4, r5, r6, lr}
   2f1d2:	b088      	sub	sp, #32
    if (!addr) {
   2f1d4:	4605      	mov	r5, r0
   2f1d6:	2800      	cmp	r0, #0
   2f1d8:	d033      	beq.n	2f242 <ble_hs_conn_find_by_addr+0x72>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   2f1da:	4b1c      	ldr	r3, [pc, #112]	; (2f24c <ble_hs_conn_find_by_addr+0x7c>)
   2f1dc:	681c      	ldr	r4, [r3, #0]
   2f1de:	e016      	b.n	2f20e <ble_hs_conn_find_by_addr+0x3e>
        if (BLE_ADDR_IS_RPA(addr)) {
   2f1e0:	79ab      	ldrb	r3, [r5, #6]
   2f1e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2f1e6:	2b40      	cmp	r3, #64	; 0x40
   2f1e8:	d115      	bne.n	2f216 <ble_hs_conn_find_by_addr+0x46>
    type_diff = a->type - b->type;
   2f1ea:	7d63      	ldrb	r3, [r4, #21]
    if (type_diff != 0) {
   2f1ec:	1a18      	subs	r0, r3, r0
   2f1ee:	d105      	bne.n	2f1fc <ble_hs_conn_find_by_addr+0x2c>
    return memcmp(a->val, b->val, sizeof(a->val));
   2f1f0:	2206      	movs	r2, #6
   2f1f2:	1c69      	adds	r1, r5, #1
   2f1f4:	f104 0016 	add.w	r0, r4, #22
   2f1f8:	f7eb fd06 	bl	1ac08 <memcmp>
            if (ble_addr_cmp(&conn->bhc_peer_rpa_addr, addr) == 0) {
   2f1fc:	b930      	cbnz	r0, 2f20c <ble_hs_conn_find_by_addr+0x3c>
   2f1fe:	e021      	b.n	2f244 <ble_hs_conn_find_by_addr+0x74>
   2f200:	2206      	movs	r2, #6
   2f202:	1c69      	adds	r1, r5, #1
   2f204:	a803      	add	r0, sp, #12
   2f206:	f7eb fcff 	bl	1ac08 <memcmp>
            if (ble_addr_cmp(&addrs.peer_id_addr, addr) == 0) {
   2f20a:	b1d8      	cbz	r0, 2f244 <ble_hs_conn_find_by_addr+0x74>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   2f20c:	6824      	ldr	r4, [r4, #0]
   2f20e:	b1cc      	cbz	r4, 2f244 <ble_hs_conn_find_by_addr+0x74>
        if (BLE_ADDR_IS_RPA(addr)) {
   2f210:	7828      	ldrb	r0, [r5, #0]
   2f212:	2801      	cmp	r0, #1
   2f214:	d0e4      	beq.n	2f1e0 <ble_hs_conn_find_by_addr+0x10>
    type_diff = a->type - b->type;
   2f216:	79e6      	ldrb	r6, [r4, #7]
    if (type_diff != 0) {
   2f218:	1a30      	subs	r0, r6, r0
   2f21a:	d105      	bne.n	2f228 <ble_hs_conn_find_by_addr+0x58>
    return memcmp(a->val, b->val, sizeof(a->val));
   2f21c:	2206      	movs	r2, #6
   2f21e:	1c69      	adds	r1, r5, #1
   2f220:	f104 0008 	add.w	r0, r4, #8
   2f224:	f7eb fcf0 	bl	1ac08 <memcmp>
            if (ble_addr_cmp(&conn->bhc_peer_addr, addr) == 0) {
   2f228:	b160      	cbz	r0, 2f244 <ble_hs_conn_find_by_addr+0x74>
            if (conn->bhc_peer_addr.type < BLE_OWN_ADDR_RPA_PUBLIC_DEFAULT) {
   2f22a:	2e01      	cmp	r6, #1
   2f22c:	d9ee      	bls.n	2f20c <ble_hs_conn_find_by_addr+0x3c>
            ble_hs_conn_addrs(conn, &addrs);
   2f22e:	a901      	add	r1, sp, #4
   2f230:	4620      	mov	r0, r4
   2f232:	f7ff ff61 	bl	2f0f8 <ble_hs_conn_addrs>
    type_diff = a->type - b->type;
   2f236:	f89d 000b 	ldrb.w	r0, [sp, #11]
   2f23a:	782b      	ldrb	r3, [r5, #0]
    if (type_diff != 0) {
   2f23c:	1ac0      	subs	r0, r0, r3
   2f23e:	d0df      	beq.n	2f200 <ble_hs_conn_find_by_addr+0x30>
   2f240:	e7e3      	b.n	2f20a <ble_hs_conn_find_by_addr+0x3a>
        return NULL;
   2f242:	4604      	mov	r4, r0
}
   2f244:	4620      	mov	r0, r4
   2f246:	b008      	add	sp, #32
   2f248:	bd70      	pop	{r4, r5, r6, pc}
   2f24a:	bf00      	nop
   2f24c:	100054c0 	.word	0x100054c0

0002f250 <ble_hs_conn_timer>:

int32_t
ble_hs_conn_timer(void)
{
   2f250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return os_time_get();
   2f252:	f7eb f9f9 	bl	1a648 <os_time_get>
   2f256:	4607      	mov	r7, r0
    for (;;) {
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
        next_exp_in = BLE_HS_FOREVER;
        now = ble_npl_time_get();

        ble_hs_lock();
   2f258:	f7fe fe9a 	bl	2df90 <ble_hs_lock>
         * 1. Determine if any connections need to be terminated due to timeout.
         *    If so, break out of the loop and terminate the connection.  This
         *    function will need to be executed again.
         * 2. Otherwise, determine when the next timeout will occur.
         */
        SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   2f25c:	4b1a      	ldr	r3, [pc, #104]	; (2f2c8 <ble_hs_conn_timer+0x78>)
   2f25e:	681c      	ldr	r4, [r3, #0]
        next_exp_in = BLE_HS_FOREVER;
   2f260:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
        SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   2f264:	e00d      	b.n	2f282 <ble_hs_conn_timer+0x32>
                    if (time_diff <= 0) {
                        /* ACL reassembly has timed out.  Remember the connection
                         * handle so it can be terminated after the mutex is
                         * unlocked.
                         */
                        conn_handle = conn->bhc_handle;
   2f266:	88a4      	ldrh	r4, [r4, #4]
                        break;
   2f268:	e021      	b.n	2f2ae <ble_hs_conn_timer+0x5e>
   2f26a:	462e      	mov	r6, r5
#if BLE_HS_ATT_SVR_QUEUED_WRITE_TMO
                /* Check each connection's rx queued write timer.  If too much
                 * time passes after a prep write is received, the queue is
                 * cleared.
                 */
                time_diff = ble_att_svr_ticks_until_tmo(&conn->bhc_att_svr, now);
   2f26c:	4639      	mov	r1, r7
   2f26e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   2f272:	f7f8 fe16 	bl	27ea2 <ble_att_svr_ticks_until_tmo>
                if (time_diff <= 0) {
   2f276:	1e05      	subs	r5, r0, #0
   2f278:	dd14      	ble.n	2f2a4 <ble_hs_conn_timer+0x54>
                    conn_handle = conn->bhc_handle;
                    break;
                }

                /* Determine if this connection is the soonest to time out. */
                if (time_diff < next_exp_in) {
   2f27a:	42ae      	cmp	r6, r5
   2f27c:	dc00      	bgt.n	2f280 <ble_hs_conn_timer+0x30>
   2f27e:	4635      	mov	r5, r6
        SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   2f280:	6824      	ldr	r4, [r4, #0]
   2f282:	b194      	cbz	r4, 2f2aa <ble_hs_conn_timer+0x5a>
            if (!(conn->bhc_flags & BLE_HS_CONN_F_TERMINATING)) {
   2f284:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   2f288:	f013 0f02 	tst.w	r3, #2
   2f28c:	d1f8      	bne.n	2f280 <ble_hs_conn_timer+0x30>
                if (conn->bhc_rx_chan != NULL) {
   2f28e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2f290:	2b00      	cmp	r3, #0
   2f292:	d0ea      	beq.n	2f26a <ble_hs_conn_timer+0x1a>
                    time_diff = conn->bhc_rx_timeout - now;
   2f294:	6b66      	ldr	r6, [r4, #52]	; 0x34
   2f296:	1bf6      	subs	r6, r6, r7
                    if (time_diff <= 0) {
   2f298:	2e00      	cmp	r6, #0
   2f29a:	dde4      	ble.n	2f266 <ble_hs_conn_timer+0x16>
                    if (time_diff < next_exp_in) {
   2f29c:	42b5      	cmp	r5, r6
   2f29e:	dce5      	bgt.n	2f26c <ble_hs_conn_timer+0x1c>
   2f2a0:	462e      	mov	r6, r5
   2f2a2:	e7e3      	b.n	2f26c <ble_hs_conn_timer+0x1c>
                    conn_handle = conn->bhc_handle;
   2f2a4:	88a4      	ldrh	r4, [r4, #4]
                    break;
   2f2a6:	4635      	mov	r5, r6
   2f2a8:	e001      	b.n	2f2ae <ble_hs_conn_timer+0x5e>
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   2f2aa:	f64f 74ff 	movw	r4, #65535	; 0xffff
                }
#endif
            }
        }

        ble_hs_unlock();
   2f2ae:	f7fe fe73 	bl	2df98 <ble_hs_unlock>

        /* If a connection has timed out, terminate it.  We need to repeatedly
         * call this function again to determine when the next timeout is.
         */
        if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   2f2b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2f2b6:	429c      	cmp	r4, r3
   2f2b8:	d101      	bne.n	2f2be <ble_hs_conn_timer+0x6e>
            continue;
        }

        return next_exp_in;
    }
}
   2f2ba:	4628      	mov	r0, r5
   2f2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ble_gap_terminate(conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   2f2be:	2113      	movs	r1, #19
   2f2c0:	4620      	mov	r0, r4
   2f2c2:	f7fa ff89 	bl	2a1d8 <ble_gap_terminate>
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   2f2c6:	e7c4      	b.n	2f252 <ble_hs_conn_timer+0x2>
   2f2c8:	100054c0 	.word	0x100054c0

0002f2cc <ble_hs_conn_init>:

int
ble_hs_conn_init(void)
{
   2f2cc:	b500      	push	{lr}
   2f2ce:	b083      	sub	sp, #12
    int rc;

    rc = os_mempool_init(&ble_hs_conn_pool, MYNEWT_VAL(BLE_MAX_CONNECTIONS),
   2f2d0:	4b07      	ldr	r3, [pc, #28]	; (2f2f0 <ble_hs_conn_init+0x24>)
   2f2d2:	9300      	str	r3, [sp, #0]
   2f2d4:	4b07      	ldr	r3, [pc, #28]	; (2f2f4 <ble_hs_conn_init+0x28>)
   2f2d6:	2264      	movs	r2, #100	; 0x64
   2f2d8:	2101      	movs	r1, #1
   2f2da:	4807      	ldr	r0, [pc, #28]	; (2f2f8 <ble_hs_conn_init+0x2c>)
   2f2dc:	f7ea fd72 	bl	19dc4 <os_mempool_init>
                         sizeof (struct ble_hs_conn),
                         ble_hs_conn_elem_mem, "ble_hs_conn_pool");
    if (rc != 0) {
   2f2e0:	b920      	cbnz	r0, 2f2ec <ble_hs_conn_init+0x20>
        return BLE_HS_EOS;
    }

    SLIST_INIT(&ble_hs_conns);
   2f2e2:	4b06      	ldr	r3, [pc, #24]	; (2f2fc <ble_hs_conn_init+0x30>)
   2f2e4:	6018      	str	r0, [r3, #0]

    return 0;
}
   2f2e6:	b003      	add	sp, #12
   2f2e8:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   2f2ec:	200b      	movs	r0, #11
   2f2ee:	e7fa      	b.n	2f2e6 <ble_hs_conn_init+0x1a>
   2f2f0:	00039748 	.word	0x00039748
   2f2f4:	10005440 	.word	0x10005440
   2f2f8:	100054a4 	.word	0x100054a4
   2f2fc:	100054c0 	.word	0x100054c0

0002f300 <ble_hs_flow_connection_broken>:
    MYNEWT_VAL(BLE_HS_FLOW_CTRL_TX_ON_DISCONNECT)
    ble_hs_lock();
    ble_hs_flow_tx_num_comp_pkts();
    ble_hs_unlock();
#endif
}
   2f300:	4770      	bx	lr

0002f302 <ble_hs_flow_track_data_mbuf>:
    int idx = ble_hs_flow_mbuf_index(om);

    hdr = (void *)om->om_data;
    ble_hs_flow_mbuf_conn_handle[idx] = BLE_HCI_DATA_HANDLE(hdr->hdh_handle_pb_bc);
#endif
}
   2f302:	4770      	bx	lr

0002f304 <ble_hs_flow_startup>:
    ble_npl_callout_init(&ble_hs_flow_timer, ble_hs_evq_get(),
                         ble_hs_flow_event_cb, NULL);
#endif

    return 0;
}
   2f304:	2000      	movs	r0, #0
   2f306:	4770      	bx	lr

0002f308 <ble_hs_hci_rx_cmd_complete>:
}

static int
ble_hs_hci_rx_cmd_complete(const void *data, int len,
                           struct ble_hs_hci_ack *out_ack)
{
   2f308:	4603      	mov	r3, r0
    const struct ble_hci_ev_command_complete *ev = data;
    const struct ble_hci_ev_command_complete_nop *nop = data;
    uint16_t opcode;

    if (len < sizeof(*ev)) {
   2f30a:	2903      	cmp	r1, #3
   2f30c:	d809      	bhi.n	2f322 <ble_hs_hci_rx_cmd_complete+0x1a>
        if (len < sizeof(*nop)) {
   2f30e:	2902      	cmp	r1, #2
   2f310:	d91b      	bls.n	2f34a <ble_hs_hci_rx_cmd_complete+0x42>
            return BLE_HS_ECONTROLLER;
        }

        /* nop is special as it doesn't have status and response */

        opcode = le16toh(nop->opcode);
   2f312:	f8b0 3001 	ldrh.w	r3, [r0, #1]
        if (opcode != BLE_HCI_OPCODE_NOP) {
   2f316:	b9d3      	cbnz	r3, 2f34e <ble_hs_hci_rx_cmd_complete+0x46>
            return BLE_HS_ECONTROLLER;
        }

        /* TODO Process num_pkts field. */

        out_ack->bha_status = 0;
   2f318:	2000      	movs	r0, #0
   2f31a:	6010      	str	r0, [r2, #0]
        out_ack->bha_params = NULL;
   2f31c:	6050      	str	r0, [r2, #4]
        out_ack->bha_params_len = 0;
   2f31e:	6090      	str	r0, [r2, #8]
        return 0;
   2f320:	4770      	bx	lr
    }

    opcode = le16toh(ev->opcode);
   2f322:	f8b0 0001 	ldrh.w	r0, [r0, #1]

    /* TODO Process num_pkts field. */

    out_ack->bha_opcode = opcode;
   2f326:	8190      	strh	r0, [r2, #12]

    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   2f328:	78d8      	ldrb	r0, [r3, #3]
   2f32a:	b110      	cbz	r0, 2f332 <ble_hs_hci_rx_cmd_complete+0x2a>
   2f32c:	f500 7000 	add.w	r0, r0, #512	; 0x200
   2f330:	e000      	b.n	2f334 <ble_hs_hci_rx_cmd_complete+0x2c>
   2f332:	2000      	movs	r0, #0
   2f334:	6010      	str	r0, [r2, #0]
    out_ack->bha_params_len = len - sizeof(*ev);
   2f336:	1f08      	subs	r0, r1, #4
   2f338:	6090      	str	r0, [r2, #8]
    if (out_ack->bha_params_len) {
   2f33a:	b118      	cbz	r0, 2f344 <ble_hs_hci_rx_cmd_complete+0x3c>
        out_ack->bha_params = ev->return_params;
   2f33c:	3304      	adds	r3, #4
   2f33e:	6053      	str	r3, [r2, #4]
    } else {
        out_ack->bha_params = NULL;
    }

    return 0;
   2f340:	2000      	movs	r0, #0
   2f342:	4770      	bx	lr
        out_ack->bha_params = NULL;
   2f344:	2300      	movs	r3, #0
   2f346:	6053      	str	r3, [r2, #4]
   2f348:	4770      	bx	lr
            return BLE_HS_ECONTROLLER;
   2f34a:	200c      	movs	r0, #12
   2f34c:	4770      	bx	lr
            return BLE_HS_ECONTROLLER;
   2f34e:	200c      	movs	r0, #12
}
   2f350:	4770      	bx	lr

0002f352 <ble_hs_hci_rx_cmd_status>:
ble_hs_hci_rx_cmd_status(const void *data, int len,
                         struct ble_hs_hci_ack *out_ack)
{
    const struct ble_hci_ev_command_status *ev = data;

    if (len != sizeof(*ev)) {
   2f352:	2904      	cmp	r1, #4
   2f354:	d10d      	bne.n	2f372 <ble_hs_hci_rx_cmd_status+0x20>
        return BLE_HS_ECONTROLLER;
    }

    /* XXX: Process num_pkts field. */

    out_ack->bha_opcode = le16toh(ev->opcode);
   2f356:	8843      	ldrh	r3, [r0, #2]
   2f358:	8193      	strh	r3, [r2, #12]
    out_ack->bha_params = NULL;
   2f35a:	2300      	movs	r3, #0
   2f35c:	6053      	str	r3, [r2, #4]
    out_ack->bha_params_len = 0;
   2f35e:	6093      	str	r3, [r2, #8]
    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   2f360:	7803      	ldrb	r3, [r0, #0]
   2f362:	b123      	cbz	r3, 2f36e <ble_hs_hci_rx_cmd_status+0x1c>
   2f364:	f503 7300 	add.w	r3, r3, #512	; 0x200
   2f368:	6013      	str	r3, [r2, #0]

    return 0;
   2f36a:	2000      	movs	r0, #0
   2f36c:	4770      	bx	lr
    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   2f36e:	2300      	movs	r3, #0
   2f370:	e7fa      	b.n	2f368 <ble_hs_hci_rx_cmd_status+0x16>
        return BLE_HS_ECONTROLLER;
   2f372:	200c      	movs	r0, #12
}
   2f374:	4770      	bx	lr
	...

0002f378 <ble_hs_hci_max_acl_payload_sz>:
     * The LE_Read_Buffer_Size command is used to read the maximum size of the
     * data portion of HCI LE ACL Data Packets sent from the Host to the
     * Controller.
     */
    return ble_hs_hci_buf_sz;
}
   2f378:	4b01      	ldr	r3, [pc, #4]	; (2f380 <ble_hs_hci_max_acl_payload_sz+0x8>)
   2f37a:	8818      	ldrh	r0, [r3, #0]
   2f37c:	4770      	bx	lr
   2f37e:	bf00      	nop
   2f380:	100054ca 	.word	0x100054ca

0002f384 <ble_hs_hci_lock>:
{
   2f384:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   2f386:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2f38a:	4802      	ldr	r0, [pc, #8]	; (2f394 <ble_hs_hci_lock+0x10>)
   2f38c:	f7eb fbc4 	bl	1ab18 <os_mutex_pend>
}
   2f390:	bd08      	pop	{r3, pc}
   2f392:	bf00      	nop
   2f394:	10005620 	.word	0x10005620

0002f398 <ble_hs_hci_unlock>:
{
   2f398:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   2f39a:	4802      	ldr	r0, [pc, #8]	; (2f3a4 <ble_hs_hci_unlock+0xc>)
   2f39c:	f7eb fb5c 	bl	1aa58 <os_mutex_release>
}
   2f3a0:	bd08      	pop	{r3, pc}
   2f3a2:	bf00      	nop
   2f3a4:	10005620 	.word	0x10005620

0002f3a8 <ble_hs_hci_wait_for_ack>:
{
   2f3a8:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_sem_pend(&sem->sem, timeout);
   2f3aa:	f44f 7180 	mov.w	r1, #256	; 0x100
   2f3ae:	4807      	ldr	r0, [pc, #28]	; (2f3cc <ble_hs_hci_wait_for_ack+0x24>)
   2f3b0:	f004 fdf8 	bl	33fa4 <os_sem_pend>
    switch (rc) {
   2f3b4:	b140      	cbz	r0, 2f3c8 <ble_hs_hci_wait_for_ack+0x20>
   2f3b6:	2806      	cmp	r0, #6
   2f3b8:	d105      	bne.n	2f3c6 <ble_hs_hci_wait_for_ack+0x1e>
        STATS_INC(ble_hs_stats, hci_timeout);
   2f3ba:	4a05      	ldr	r2, [pc, #20]	; (2f3d0 <ble_hs_hci_wait_for_ack+0x28>)
   2f3bc:	6a53      	ldr	r3, [r2, #36]	; 0x24
   2f3be:	3301      	adds	r3, #1
   2f3c0:	6253      	str	r3, [r2, #36]	; 0x24
        rc = BLE_HS_ETIMEOUT_HCI;
   2f3c2:	2013      	movs	r0, #19
        break;
   2f3c4:	e000      	b.n	2f3c8 <ble_hs_hci_wait_for_ack+0x20>
        rc = BLE_HS_EOS;
   2f3c6:	200b      	movs	r0, #11
}
   2f3c8:	bd08      	pop	{r3, pc}
   2f3ca:	bf00      	nop
   2f3cc:	1000562c 	.word	0x1000562c
   2f3d0:	10005360 	.word	0x10005360

0002f3d4 <ble_hs_hci_process_ack>:
{
   2f3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f3d8:	4607      	mov	r7, r0
   2f3da:	460e      	mov	r6, r1
   2f3dc:	4690      	mov	r8, r2
   2f3de:	461c      	mov	r4, r3
    STATS_INC(ble_hs_stats, hci_event);
   2f3e0:	4a1e      	ldr	r2, [pc, #120]	; (2f45c <ble_hs_hci_process_ack+0x88>)
   2f3e2:	6993      	ldr	r3, [r2, #24]
   2f3e4:	3301      	adds	r3, #1
   2f3e6:	6193      	str	r3, [r2, #24]
    memset(out_ack, 0, sizeof *out_ack);
   2f3e8:	2300      	movs	r3, #0
   2f3ea:	6023      	str	r3, [r4, #0]
   2f3ec:	6063      	str	r3, [r4, #4]
   2f3ee:	60a3      	str	r3, [r4, #8]
   2f3f0:	60e3      	str	r3, [r4, #12]
    switch (ble_hs_hci_ack->opcode) {
   2f3f2:	4b1b      	ldr	r3, [pc, #108]	; (2f460 <ble_hs_hci_process_ack+0x8c>)
   2f3f4:	6818      	ldr	r0, [r3, #0]
   2f3f6:	7803      	ldrb	r3, [r0, #0]
   2f3f8:	2b0e      	cmp	r3, #14
   2f3fa:	d00a      	beq.n	2f412 <ble_hs_hci_process_ack+0x3e>
   2f3fc:	2b0f      	cmp	r3, #15
   2f3fe:	d01e      	beq.n	2f43e <ble_hs_hci_process_ack+0x6a>
   2f400:	2511      	movs	r5, #17
    if (rc != 0) {
   2f402:	b11d      	cbz	r5, 2f40c <ble_hs_hci_process_ack+0x38>
        STATS_INC(ble_hs_stats, hci_invalid_ack);
   2f404:	4a15      	ldr	r2, [pc, #84]	; (2f45c <ble_hs_hci_process_ack+0x88>)
   2f406:	69d3      	ldr	r3, [r2, #28]
   2f408:	3301      	adds	r3, #1
   2f40a:	61d3      	str	r3, [r2, #28]
}
   2f40c:	4628      	mov	r0, r5
   2f40e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = ble_hs_hci_rx_cmd_complete(ble_hs_hci_ack->data,
   2f412:	4622      	mov	r2, r4
   2f414:	7841      	ldrb	r1, [r0, #1]
   2f416:	3002      	adds	r0, #2
   2f418:	f7ff ff76 	bl	2f308 <ble_hs_hci_rx_cmd_complete>
   2f41c:	4605      	mov	r5, r0
    if (rc == 0) {
   2f41e:	2d00      	cmp	r5, #0
   2f420:	d1ef      	bne.n	2f402 <ble_hs_hci_process_ack+0x2e>
        if (params_buf == NULL || out_ack->bha_params == NULL) {
   2f422:	b19e      	cbz	r6, 2f44c <ble_hs_hci_process_ack+0x78>
   2f424:	6861      	ldr	r1, [r4, #4]
   2f426:	b189      	cbz	r1, 2f44c <ble_hs_hci_process_ack+0x78>
            if (out_ack->bha_params_len > params_buf_len) {
   2f428:	68a3      	ldr	r3, [r4, #8]
   2f42a:	4543      	cmp	r3, r8
   2f42c:	dd02      	ble.n	2f434 <ble_hs_hci_process_ack+0x60>
                out_ack->bha_params_len = params_buf_len;
   2f42e:	f8c4 8008 	str.w	r8, [r4, #8]
                rc = BLE_HS_ECONTROLLER;
   2f432:	250c      	movs	r5, #12
            memcpy(params_buf, out_ack->bha_params, out_ack->bha_params_len);
   2f434:	68a2      	ldr	r2, [r4, #8]
   2f436:	4630      	mov	r0, r6
   2f438:	f7eb fc0a 	bl	1ac50 <memcpy>
   2f43c:	e008      	b.n	2f450 <ble_hs_hci_process_ack+0x7c>
        rc = ble_hs_hci_rx_cmd_status(ble_hs_hci_ack->data,
   2f43e:	4622      	mov	r2, r4
   2f440:	7841      	ldrb	r1, [r0, #1]
   2f442:	3002      	adds	r0, #2
   2f444:	f7ff ff85 	bl	2f352 <ble_hs_hci_rx_cmd_status>
   2f448:	4605      	mov	r5, r0
        break;
   2f44a:	e7e8      	b.n	2f41e <ble_hs_hci_process_ack+0x4a>
            out_ack->bha_params_len = 0;
   2f44c:	2300      	movs	r3, #0
   2f44e:	60a3      	str	r3, [r4, #8]
        out_ack->bha_params = params_buf;
   2f450:	6066      	str	r6, [r4, #4]
        if (out_ack->bha_opcode != expected_opcode) {
   2f452:	89a3      	ldrh	r3, [r4, #12]
   2f454:	42bb      	cmp	r3, r7
   2f456:	d0d4      	beq.n	2f402 <ble_hs_hci_process_ack+0x2e>
            rc = BLE_HS_ECONTROLLER;
   2f458:	250c      	movs	r5, #12
   2f45a:	e7d3      	b.n	2f404 <ble_hs_hci_process_ack+0x30>
   2f45c:	10005360 	.word	0x10005360
   2f460:	100054c4 	.word	0x100054c4

0002f464 <ble_hs_hci_rx_ack>:
{
   2f464:	b508      	push	{r3, lr}
/**
 * Get current semaphore's count
 */
static inline uint16_t os_sem_get_count(struct os_sem *sem)
{
    return sem->sem_tokens;
   2f466:	4b06      	ldr	r3, [pc, #24]	; (2f480 <ble_hs_hci_rx_ack+0x1c>)
   2f468:	88db      	ldrh	r3, [r3, #6]
    if (ble_npl_sem_get_count(&ble_hs_hci_sem) > 0) {
   2f46a:	b92b      	cbnz	r3, 2f478 <ble_hs_hci_rx_ack+0x14>
    ble_hs_hci_ack = (struct ble_hci_ev *) ack_ev;
   2f46c:	4b05      	ldr	r3, [pc, #20]	; (2f484 <ble_hs_hci_rx_ack+0x20>)
   2f46e:	6018      	str	r0, [r3, #0]
    return (ble_npl_error_t)os_sem_release(&sem->sem);
   2f470:	4803      	ldr	r0, [pc, #12]	; (2f480 <ble_hs_hci_rx_ack+0x1c>)
   2f472:	f004 fd65 	bl	33f40 <os_sem_release>
}
   2f476:	bd08      	pop	{r3, pc}
        ble_hci_trans_buf_free(ack_ev);
   2f478:	f002 fee2 	bl	32240 <ble_hci_trans_buf_free>
        return;
   2f47c:	e7fb      	b.n	2f476 <ble_hs_hci_rx_ack+0x12>
   2f47e:	bf00      	nop
   2f480:	1000562c 	.word	0x1000562c
   2f484:	100054c4 	.word	0x100054c4

0002f488 <ble_hs_hci_frag_alloc>:
/**
 * Allocates an mbuf to contain an outgoing ACL data fragment.
 */
static struct os_mbuf *
ble_hs_hci_frag_alloc(uint16_t frag_size, void *arg)
{
   2f488:	b508      	push	{r3, lr}
    struct os_mbuf *om;

    /* Prefer the dedicated one-element fragment pool. */
#if MYNEWT_VAL(BLE_CONTROLLER)
    om = os_mbuf_get_pkthdr(&ble_hs_hci_frag_mbuf_pool, sizeof(struct ble_mbuf_hdr));
   2f48a:	2110      	movs	r1, #16
   2f48c:	4805      	ldr	r0, [pc, #20]	; (2f4a4 <ble_hs_hci_frag_alloc+0x1c>)
   2f48e:	f7ea f87b 	bl	19588 <os_mbuf_get_pkthdr>
#else
    om = os_mbuf_get_pkthdr(&ble_hs_hci_frag_mbuf_pool, 0);
#endif
    if (om != NULL) {
   2f492:	b118      	cbz	r0, 2f49c <ble_hs_hci_frag_alloc+0x14>
        om->om_data += BLE_HCI_DATA_HDR_SZ;
   2f494:	6803      	ldr	r3, [r0, #0]
   2f496:	3304      	adds	r3, #4
   2f498:	6003      	str	r3, [r0, #0]
    if (om != NULL) {
        return om;
    }

    return NULL;
}
   2f49a:	bd08      	pop	{r3, pc}
    om = ble_hs_mbuf_acl_pkt();
   2f49c:	f000 fd66 	bl	2ff6c <ble_hs_mbuf_acl_pkt>
    if (om != NULL) {
   2f4a0:	e7fb      	b.n	2f49a <ble_hs_hci_frag_alloc+0x12>
   2f4a2:	bf00      	nop
   2f4a4:	100055f8 	.word	0x100055f8

0002f4a8 <ble_hs_hci_acl_hdr_prepend>:
}

static struct os_mbuf *
ble_hs_hci_acl_hdr_prepend(struct os_mbuf *om, uint16_t handle,
                           uint8_t pb_flag)
{
   2f4a8:	b510      	push	{r4, lr}
   2f4aa:	b082      	sub	sp, #8
   2f4ac:	4604      	mov	r4, r0
   2f4ae:	4608      	mov	r0, r1
   2f4b0:	4611      	mov	r1, r2
    struct hci_data_hdr hci_hdr;
    struct os_mbuf *om2;

    put_le16(&hci_hdr.hdh_handle_pb_bc,
   2f4b2:	2200      	movs	r2, #0
   2f4b4:	f000 fbcc 	bl	2fc50 <ble_hs_hci_util_handle_pb_bc_join>
   2f4b8:	4601      	mov	r1, r0
   2f4ba:	a801      	add	r0, sp, #4
   2f4bc:	f7e9 fca6 	bl	18e0c <put_le16>
             ble_hs_hci_util_handle_pb_bc_join(handle, pb_flag, 0));
    put_le16(&hci_hdr.hdh_len, OS_MBUF_PKTHDR(om)->omp_len);
   2f4c0:	8a21      	ldrh	r1, [r4, #16]
   2f4c2:	f10d 0006 	add.w	r0, sp, #6
   2f4c6:	f7e9 fca1 	bl	18e0c <put_le16>

    om2 = os_mbuf_prepend(om, sizeof hci_hdr);
   2f4ca:	2104      	movs	r1, #4
   2f4cc:	4620      	mov	r0, r4
   2f4ce:	f7ea fa39 	bl	19944 <os_mbuf_prepend>
    if (om2 == NULL) {
   2f4d2:	4604      	mov	r4, r0
   2f4d4:	b158      	cbz	r0, 2f4ee <ble_hs_hci_acl_hdr_prepend+0x46>
        return NULL;
    }

    om = om2;
    om = os_mbuf_pullup(om, sizeof hci_hdr);
   2f4d6:	2104      	movs	r1, #4
   2f4d8:	f7ea fb2a 	bl	19b30 <os_mbuf_pullup>
    if (om == NULL) {
   2f4dc:	4604      	mov	r4, r0
   2f4de:	b130      	cbz	r0, 2f4ee <ble_hs_hci_acl_hdr_prepend+0x46>
        return NULL;
    }

    memcpy(om->om_data, &hci_hdr, sizeof hci_hdr);
   2f4e0:	6803      	ldr	r3, [r0, #0]
   2f4e2:	9a01      	ldr	r2, [sp, #4]
   2f4e4:	601a      	str	r2, [r3, #0]

#if !BLE_MONITOR
    BLE_HS_LOG(DEBUG, "host tx hci data; handle=%d length=%d\n", handle,
   2f4e6:	f10d 0006 	add.w	r0, sp, #6
   2f4ea:	f7e9 fcb0 	bl	18e4e <get_le16>
               get_le16(&hci_hdr.hdh_len));
#endif

    return om;
}
   2f4ee:	4620      	mov	r0, r4
   2f4f0:	b002      	add	sp, #8
   2f4f2:	bd10      	pop	{r4, pc}

0002f4f4 <ble_hs_hci_set_buf_sz>:
    if (pktlen == 0 || max_pkts == 0) {
   2f4f4:	b130      	cbz	r0, 2f504 <ble_hs_hci_set_buf_sz+0x10>
   2f4f6:	b139      	cbz	r1, 2f508 <ble_hs_hci_set_buf_sz+0x14>
    ble_hs_hci_buf_sz = pktlen;
   2f4f8:	4a04      	ldr	r2, [pc, #16]	; (2f50c <ble_hs_hci_set_buf_sz+0x18>)
   2f4fa:	8010      	strh	r0, [r2, #0]
    ble_hs_hci_avail_pkts = max_pkts;
   2f4fc:	4b04      	ldr	r3, [pc, #16]	; (2f510 <ble_hs_hci_set_buf_sz+0x1c>)
   2f4fe:	8019      	strh	r1, [r3, #0]
    return 0;
   2f500:	2000      	movs	r0, #0
   2f502:	4770      	bx	lr
        return BLE_HS_EINVAL;
   2f504:	2003      	movs	r0, #3
   2f506:	4770      	bx	lr
   2f508:	2003      	movs	r0, #3
}
   2f50a:	4770      	bx	lr
   2f50c:	100054ca 	.word	0x100054ca
   2f510:	100054c8 	.word	0x100054c8

0002f514 <ble_hs_hci_add_avail_pkts>:
{
   2f514:	b508      	push	{r3, lr}
    if (ble_hs_hci_avail_pkts + delta > UINT16_MAX) {
   2f516:	4b07      	ldr	r3, [pc, #28]	; (2f534 <ble_hs_hci_add_avail_pkts+0x20>)
   2f518:	881b      	ldrh	r3, [r3, #0]
   2f51a:	181a      	adds	r2, r3, r0
   2f51c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   2f520:	da03      	bge.n	2f52a <ble_hs_hci_add_avail_pkts+0x16>
        ble_hs_hci_avail_pkts += delta;
   2f522:	4418      	add	r0, r3
   2f524:	4b03      	ldr	r3, [pc, #12]	; (2f534 <ble_hs_hci_add_avail_pkts+0x20>)
   2f526:	8018      	strh	r0, [r3, #0]
}
   2f528:	bd08      	pop	{r3, pc}
        ble_hs_sched_reset(BLE_HS_ECONTROLLER);
   2f52a:	200c      	movs	r0, #12
   2f52c:	f7fe fe5c 	bl	2e1e8 <ble_hs_sched_reset>
   2f530:	e7fa      	b.n	2f528 <ble_hs_hci_add_avail_pkts+0x14>
   2f532:	bf00      	nop
   2f534:	100054c8 	.word	0x100054c8

0002f538 <ble_hs_hci_cmd_tx>:
{
   2f538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f53c:	b084      	sub	sp, #16
   2f53e:	4604      	mov	r4, r0
   2f540:	460d      	mov	r5, r1
   2f542:	4616      	mov	r6, r2
   2f544:	461f      	mov	r7, r3
   2f546:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    ble_hs_hci_lock();
   2f54a:	f7ff ff1b 	bl	2f384 <ble_hs_hci_lock>
    rc = ble_hs_hci_cmd_send_buf(opcode, cmd, cmd_len);
   2f54e:	4632      	mov	r2, r6
   2f550:	4629      	mov	r1, r5
   2f552:	4620      	mov	r0, r4
   2f554:	f000 f908 	bl	2f768 <ble_hs_hci_cmd_send_buf>
    if (rc != 0) {
   2f558:	4605      	mov	r5, r0
   2f55a:	b168      	cbz	r0, 2f578 <ble_hs_hci_cmd_tx+0x40>
    if (ble_hs_hci_ack != NULL) {
   2f55c:	4b14      	ldr	r3, [pc, #80]	; (2f5b0 <ble_hs_hci_cmd_tx+0x78>)
   2f55e:	6818      	ldr	r0, [r3, #0]
   2f560:	b120      	cbz	r0, 2f56c <ble_hs_hci_cmd_tx+0x34>
        ble_hci_trans_buf_free((uint8_t *) ble_hs_hci_ack);
   2f562:	f002 fe6d 	bl	32240 <ble_hci_trans_buf_free>
        ble_hs_hci_ack = NULL;
   2f566:	4b12      	ldr	r3, [pc, #72]	; (2f5b0 <ble_hs_hci_cmd_tx+0x78>)
   2f568:	2200      	movs	r2, #0
   2f56a:	601a      	str	r2, [r3, #0]
    ble_hs_hci_unlock();
   2f56c:	f7ff ff14 	bl	2f398 <ble_hs_hci_unlock>
}
   2f570:	4628      	mov	r0, r5
   2f572:	b004      	add	sp, #16
   2f574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = ble_hs_hci_wait_for_ack();
   2f578:	f7ff ff16 	bl	2f3a8 <ble_hs_hci_wait_for_ack>
    if (rc != 0) {
   2f57c:	4605      	mov	r5, r0
   2f57e:	b988      	cbnz	r0, 2f5a4 <ble_hs_hci_cmd_tx+0x6c>
    rc = ble_hs_hci_process_ack(opcode, rsp, rsp_len, &ack);
   2f580:	466b      	mov	r3, sp
   2f582:	4642      	mov	r2, r8
   2f584:	4639      	mov	r1, r7
   2f586:	4620      	mov	r0, r4
   2f588:	f7ff ff24 	bl	2f3d4 <ble_hs_hci_process_ack>
    if (rc != 0) {
   2f58c:	4605      	mov	r5, r0
   2f58e:	b960      	cbnz	r0, 2f5aa <ble_hs_hci_cmd_tx+0x72>
    rc = ack.bha_status;
   2f590:	9d00      	ldr	r5, [sp, #0]
    if (!rc && (ack.bha_params_len != rsp_len)) {
   2f592:	2d00      	cmp	r5, #0
   2f594:	d1e2      	bne.n	2f55c <ble_hs_hci_cmd_tx+0x24>
   2f596:	9b02      	ldr	r3, [sp, #8]
   2f598:	4543      	cmp	r3, r8
   2f59a:	d0df      	beq.n	2f55c <ble_hs_hci_cmd_tx+0x24>
        ble_hs_sched_reset(rc);
   2f59c:	4628      	mov	r0, r5
   2f59e:	f7fe fe23 	bl	2e1e8 <ble_hs_sched_reset>
        goto done;
   2f5a2:	e7db      	b.n	2f55c <ble_hs_hci_cmd_tx+0x24>
        ble_hs_sched_reset(rc);
   2f5a4:	f7fe fe20 	bl	2e1e8 <ble_hs_sched_reset>
        goto done;
   2f5a8:	e7d8      	b.n	2f55c <ble_hs_hci_cmd_tx+0x24>
        ble_hs_sched_reset(rc);
   2f5aa:	f7fe fe1d 	bl	2e1e8 <ble_hs_sched_reset>
        goto done;
   2f5ae:	e7d5      	b.n	2f55c <ble_hs_hci_cmd_tx+0x24>
   2f5b0:	100054c4 	.word	0x100054c4

0002f5b4 <ble_hs_hci_rx_evt>:
{
   2f5b4:	b508      	push	{r3, lr}
    switch (ev->opcode) {
   2f5b6:	7803      	ldrb	r3, [r0, #0]
   2f5b8:	2b0e      	cmp	r3, #14
   2f5ba:	d005      	beq.n	2f5c8 <ble_hs_hci_rx_evt+0x14>
   2f5bc:	2b0f      	cmp	r3, #15
   2f5be:	d00d      	beq.n	2f5dc <ble_hs_hci_rx_evt+0x28>
        ble_hs_enqueue_hci_event(hci_ev);
   2f5c0:	f7fe fde8 	bl	2e194 <ble_hs_enqueue_hci_event>
}
   2f5c4:	2000      	movs	r0, #0
   2f5c6:	bd08      	pop	{r3, pc}
        enqueue = (cmd_complete->opcode == BLE_HCI_OPCODE_NOP);
   2f5c8:	f8b0 3003 	ldrh.w	r3, [r0, #3]
   2f5cc:	fab3 f383 	clz	r3, r3
   2f5d0:	095b      	lsrs	r3, r3, #5
    if (enqueue) {
   2f5d2:	2b00      	cmp	r3, #0
   2f5d4:	d1f4      	bne.n	2f5c0 <ble_hs_hci_rx_evt+0xc>
        ble_hs_hci_rx_ack(hci_ev);
   2f5d6:	f7ff ff45 	bl	2f464 <ble_hs_hci_rx_ack>
   2f5da:	e7f3      	b.n	2f5c4 <ble_hs_hci_rx_evt+0x10>
        enqueue = (cmd_status->opcode == BLE_HCI_OPCODE_NOP);
   2f5dc:	8883      	ldrh	r3, [r0, #4]
   2f5de:	fab3 f383 	clz	r3, r3
   2f5e2:	095b      	lsrs	r3, r3, #5
        break;
   2f5e4:	e7f5      	b.n	2f5d2 <ble_hs_hci_rx_evt+0x1e>
	...

0002f5e8 <ble_hs_hci_acl_tx_now>:

int
ble_hs_hci_acl_tx_now(struct ble_hs_conn *conn, struct os_mbuf **om)
{
   2f5e8:	b570      	push	{r4, r5, r6, lr}
   2f5ea:	b082      	sub	sp, #8
   2f5ec:	4604      	mov	r4, r0
   2f5ee:	460d      	mov	r5, r1
    uint8_t pb;
    int rc;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    txom = *om;
   2f5f0:	680b      	ldr	r3, [r1, #0]
   2f5f2:	9301      	str	r3, [sp, #4]
    *om = NULL;
   2f5f4:	2300      	movs	r3, #0
   2f5f6:	600b      	str	r3, [r1, #0]

    if (!(conn->bhc_flags & BLE_HS_CONN_F_TX_FRAG)) {
   2f5f8:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
   2f5fc:	f016 0604 	ands.w	r6, r6, #4
   2f600:	d000      	beq.n	2f604 <ble_hs_hci_acl_tx_now+0x1c>
         * After sending the first fragment, pb gets set appropriately for all
         * subsequent fragments in this packet.
         */
        pb = BLE_HCI_PB_FIRST_NON_FLUSH;
    } else {
        pb = BLE_HCI_PB_MIDDLE;
   2f602:	2601      	movs	r6, #1
    }

    /* Send fragments until the entire packet has been sent. */
    while (txom != NULL && ble_hs_hci_avail_pkts > 0) {
   2f604:	9b01      	ldr	r3, [sp, #4]
   2f606:	b35b      	cbz	r3, 2f660 <ble_hs_hci_acl_tx_now+0x78>
   2f608:	4a22      	ldr	r2, [pc, #136]	; (2f694 <ble_hs_hci_acl_tx_now+0xac>)
   2f60a:	8812      	ldrh	r2, [r2, #0]
   2f60c:	b342      	cbz	r2, 2f660 <ble_hs_hci_acl_tx_now+0x78>
        frag = mem_split_frag(&txom, ble_hs_hci_max_acl_payload_sz(),
   2f60e:	f7ff feb3 	bl	2f378 <ble_hs_hci_max_acl_payload_sz>
   2f612:	4601      	mov	r1, r0
   2f614:	2300      	movs	r3, #0
   2f616:	4a20      	ldr	r2, [pc, #128]	; (2f698 <ble_hs_hci_acl_tx_now+0xb0>)
   2f618:	a801      	add	r0, sp, #4
   2f61a:	f7ef f87d 	bl	1e718 <mem_split_frag>
                              ble_hs_hci_frag_alloc, NULL);
        if (frag == NULL) {
   2f61e:	b1d8      	cbz	r0, 2f658 <ble_hs_hci_acl_tx_now+0x70>
            *om = txom;
            return BLE_HS_EAGAIN;
        }

        frag = ble_hs_hci_acl_hdr_prepend(frag, conn->bhc_handle, pb);
   2f620:	4632      	mov	r2, r6
   2f622:	88a1      	ldrh	r1, [r4, #4]
   2f624:	f7ff ff40 	bl	2f4a8 <ble_hs_hci_acl_hdr_prepend>
        if (frag == NULL) {
   2f628:	4606      	mov	r6, r0
   2f62a:	b328      	cbz	r0, 2f678 <ble_hs_hci_acl_tx_now+0x90>
            goto err;
        }

#if !BLE_MONITOR
        BLE_HS_LOG(DEBUG, "ble_hs_hci_acl_tx(): ");
        ble_hs_log_mbuf(frag);
   2f62c:	f000 fc6c 	bl	2ff08 <ble_hs_log_mbuf>
        BLE_HS_LOG(DEBUG, "\n");
#endif

        rc = ble_hs_tx_data(frag);
   2f630:	4630      	mov	r0, r6
   2f632:	f7fe fe3c 	bl	2e2ae <ble_hs_tx_data>
        if (rc != 0) {
   2f636:	4606      	mov	r6, r0
   2f638:	b9f8      	cbnz	r0, 2f67a <ble_hs_hci_acl_tx_now+0x92>
        }

        /* If any fragments remain, they should be marked as 'middle'
         * fragments.
         */
        conn->bhc_flags |= BLE_HS_CONN_F_TX_FRAG;
   2f63a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   2f63e:	f043 0304 	orr.w	r3, r3, #4
   2f642:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        pb = BLE_HCI_PB_MIDDLE;

        /* Account for the controller buf that will hold the txed fragment. */
        conn->bhc_outstanding_pkts++;
   2f646:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2f648:	3301      	adds	r3, #1
   2f64a:	8723      	strh	r3, [r4, #56]	; 0x38
        ble_hs_hci_avail_pkts--;
   2f64c:	4a11      	ldr	r2, [pc, #68]	; (2f694 <ble_hs_hci_acl_tx_now+0xac>)
   2f64e:	8813      	ldrh	r3, [r2, #0]
   2f650:	3b01      	subs	r3, #1
   2f652:	8013      	strh	r3, [r2, #0]
        pb = BLE_HCI_PB_MIDDLE;
   2f654:	2601      	movs	r6, #1
   2f656:	e7d5      	b.n	2f604 <ble_hs_hci_acl_tx_now+0x1c>
            *om = txom;
   2f658:	9b01      	ldr	r3, [sp, #4]
   2f65a:	602b      	str	r3, [r5, #0]
            return BLE_HS_EAGAIN;
   2f65c:	2601      	movs	r6, #1
   2f65e:	e015      	b.n	2f68c <ble_hs_hci_acl_tx_now+0xa4>
    }

    if (txom != NULL) {
   2f660:	b113      	cbz	r3, 2f668 <ble_hs_hci_acl_tx_now+0x80>
        /* The controller couldn't accommodate some or all of the packet. */
        *om = txom;
   2f662:	602b      	str	r3, [r5, #0]
        return BLE_HS_EAGAIN;
   2f664:	2601      	movs	r6, #1
   2f666:	e011      	b.n	2f68c <ble_hs_hci_acl_tx_now+0xa4>
    }

    /* The entire packet was transmitted. */
    conn->bhc_flags &= ~BLE_HS_CONN_F_TX_FRAG;
   2f668:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   2f66c:	f023 0304 	bic.w	r3, r3, #4
   2f670:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

    return 0;
   2f674:	2600      	movs	r6, #0
   2f676:	e009      	b.n	2f68c <ble_hs_hci_acl_tx_now+0xa4>
            rc = BLE_HS_ENOMEM;
   2f678:	2606      	movs	r6, #6

err:
    BLE_HS_DBG_ASSERT(rc != 0);

    conn->bhc_flags &= ~BLE_HS_CONN_F_TX_FRAG;
   2f67a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   2f67e:	f023 0304 	bic.w	r3, r3, #4
   2f682:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    os_mbuf_free_chain(txom);
   2f686:	9801      	ldr	r0, [sp, #4]
   2f688:	f7e9 ffa1 	bl	195ce <os_mbuf_free_chain>
    return rc;
}
   2f68c:	4630      	mov	r0, r6
   2f68e:	b002      	add	sp, #8
   2f690:	bd70      	pop	{r4, r5, r6, pc}
   2f692:	bf00      	nop
   2f694:	100054c8 	.word	0x100054c8
   2f698:	0002f489 	.word	0x0002f489

0002f69c <ble_hs_hci_acl_tx>:
 *                                  error.
 *
 */
int
ble_hs_hci_acl_tx(struct ble_hs_conn *conn, struct os_mbuf **om)
{
   2f69c:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    /* If this conn is already backed up, don't even try to send. */
    if (STAILQ_FIRST(&conn->bhc_tx_q) != NULL) {
   2f69e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   2f6a0:	b10b      	cbz	r3, 2f6a6 <ble_hs_hci_acl_tx+0xa>
        return BLE_HS_EAGAIN;
   2f6a2:	2001      	movs	r0, #1
    }

    return ble_hs_hci_acl_tx_now(conn, om);
}
   2f6a4:	bd08      	pop	{r3, pc}
    return ble_hs_hci_acl_tx_now(conn, om);
   2f6a6:	f7ff ff9f 	bl	2f5e8 <ble_hs_hci_acl_tx_now>
   2f6aa:	e7fb      	b.n	2f6a4 <ble_hs_hci_acl_tx+0x8>

0002f6ac <ble_hs_hci_set_le_supported_feat>:

void
ble_hs_hci_set_le_supported_feat(uint32_t feat)
{
    ble_hs_hci_sup_feat = feat;
   2f6ac:	4b01      	ldr	r3, [pc, #4]	; (2f6b4 <ble_hs_hci_set_le_supported_feat+0x8>)
   2f6ae:	6018      	str	r0, [r3, #0]
}
   2f6b0:	4770      	bx	lr
   2f6b2:	bf00      	nop
   2f6b4:	10005634 	.word	0x10005634

0002f6b8 <ble_hs_hci_set_hci_version>:
}

void
ble_hs_hci_set_hci_version(uint8_t hci_version)
{
    ble_hs_hci_version = hci_version;
   2f6b8:	4b01      	ldr	r3, [pc, #4]	; (2f6c0 <ble_hs_hci_set_hci_version+0x8>)
   2f6ba:	7018      	strb	r0, [r3, #0]
}
   2f6bc:	4770      	bx	lr
   2f6be:	bf00      	nop
   2f6c0:	10005638 	.word	0x10005638

0002f6c4 <ble_hs_hci_get_hci_version>:

uint8_t
ble_hs_hci_get_hci_version(void)
{
    return ble_hs_hci_version;
}
   2f6c4:	4b01      	ldr	r3, [pc, #4]	; (2f6cc <ble_hs_hci_get_hci_version+0x8>)
   2f6c6:	7818      	ldrb	r0, [r3, #0]
   2f6c8:	4770      	bx	lr
   2f6ca:	bf00      	nop
   2f6cc:	10005638 	.word	0x10005638

0002f6d0 <ble_hs_hci_init>:

void
ble_hs_hci_init(void)
{
   2f6d0:	b500      	push	{lr}
   2f6d2:	b083      	sub	sp, #12
    return (ble_npl_error_t)os_sem_init(&sem->sem, tokens);
   2f6d4:	2100      	movs	r1, #0
   2f6d6:	480a      	ldr	r0, [pc, #40]	; (2f700 <ble_hs_hci_init+0x30>)
   2f6d8:	f004 fc29 	bl	33f2e <os_sem_init>
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   2f6dc:	4809      	ldr	r0, [pc, #36]	; (2f704 <ble_hs_hci_init+0x34>)
   2f6de:	f7eb f9b1 	bl	1aa44 <os_mutex_init>
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    rc = ble_npl_mutex_init(&ble_hs_hci_mutex);
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    rc = mem_init_mbuf_pool(ble_hs_hci_frag_data,
   2f6e2:	4b09      	ldr	r3, [pc, #36]	; (2f708 <ble_hs_hci_init+0x38>)
   2f6e4:	9301      	str	r3, [sp, #4]
   2f6e6:	f44f 7396 	mov.w	r3, #300	; 0x12c
   2f6ea:	9300      	str	r3, [sp, #0]
   2f6ec:	2301      	movs	r3, #1
   2f6ee:	4a07      	ldr	r2, [pc, #28]	; (2f70c <ble_hs_hci_init+0x3c>)
   2f6f0:	4907      	ldr	r1, [pc, #28]	; (2f710 <ble_hs_hci_init+0x40>)
   2f6f2:	4808      	ldr	r0, [pc, #32]	; (2f714 <ble_hs_hci_init+0x44>)
   2f6f4:	f7ee fff8 	bl	1e6e8 <mem_init_mbuf_pool>
                            &ble_hs_hci_frag_mbuf_pool,
                            1,
                            BLE_HS_HCI_FRAG_MEMBLOCK_SIZE,
                            "ble_hs_hci_frag");
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);
}
   2f6f8:	b003      	add	sp, #12
   2f6fa:	f85d fb04 	ldr.w	pc, [sp], #4
   2f6fe:	bf00      	nop
   2f700:	1000562c 	.word	0x1000562c
   2f704:	10005620 	.word	0x10005620
   2f708:	00039764 	.word	0x00039764
   2f70c:	100055f8 	.word	0x100055f8
   2f710:	10005604 	.word	0x10005604
   2f714:	100054cc 	.word	0x100054cc

0002f718 <ble_hs_hci_cmd_transport>:
#include "ble_hs_priv.h"
#include "ble_monitor_priv.h"

static int
ble_hs_hci_cmd_transport(struct ble_hci_cmd *cmd)
{
   2f718:	b508      	push	{r3, lr}
#if BLE_MONITOR
    ble_monitor_send(BLE_MONITOR_OPCODE_COMMAND_PKT, cmd,
                     cmd->length + sizeof(*cmd));
#endif

    rc = ble_hci_trans_hs_cmd_tx((uint8_t *) cmd);
   2f71a:	f002 fd11 	bl	32140 <ble_hci_trans_hs_cmd_tx>
    switch (rc) {
   2f71e:	4603      	mov	r3, r0
   2f720:	b110      	cbz	r0, 2f728 <ble_hs_hci_cmd_transport+0x10>
   2f722:	2807      	cmp	r0, #7
   2f724:	d102      	bne.n	2f72c <ble_hs_hci_cmd_transport+0x14>
    case 0:
        return 0;

    case BLE_ERR_MEM_CAPACITY:
        return BLE_HS_ENOMEM_EVT;
   2f726:	2314      	movs	r3, #20

    default:
        return BLE_HS_EUNKNOWN;
    }
}
   2f728:	4618      	mov	r0, r3
   2f72a:	bd08      	pop	{r3, pc}
        return BLE_HS_EUNKNOWN;
   2f72c:	2311      	movs	r3, #17
   2f72e:	e7fb      	b.n	2f728 <ble_hs_hci_cmd_transport+0x10>

0002f730 <ble_hs_hci_cmd_send>:

static int
ble_hs_hci_cmd_send(uint16_t opcode, uint8_t len, const void *cmddata)
{
   2f730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f732:	4606      	mov	r6, r0
   2f734:	460d      	mov	r5, r1
   2f736:	4617      	mov	r7, r2
    struct ble_hci_cmd *cmd;
    int rc;

    cmd = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_CMD);
   2f738:	2003      	movs	r0, #3
   2f73a:	f002 fd59 	bl	321f0 <ble_hci_trans_buf_alloc>
   2f73e:	4604      	mov	r4, r0
    BLE_HS_DBG_ASSERT(cmd != NULL);

    cmd->opcode = htole16(opcode);
   2f740:	8006      	strh	r6, [r0, #0]
    cmd->length = len;
   2f742:	7085      	strb	r5, [r0, #2]
    if (len != 0) {
   2f744:	b945      	cbnz	r5, 2f758 <ble_hs_hci_cmd_send+0x28>
        memcpy(cmd->data, cmddata, len);
    }

    rc = ble_hs_hci_cmd_transport(cmd);
   2f746:	4620      	mov	r0, r4
   2f748:	f7ff ffe6 	bl	2f718 <ble_hs_hci_cmd_transport>

    if (rc == 0) {
   2f74c:	b918      	cbnz	r0, 2f756 <ble_hs_hci_cmd_send+0x26>
        STATS_INC(ble_hs_stats, hci_cmd);
   2f74e:	4a05      	ldr	r2, [pc, #20]	; (2f764 <ble_hs_hci_cmd_send+0x34>)
   2f750:	6953      	ldr	r3, [r2, #20]
   2f752:	3301      	adds	r3, #1
   2f754:	6153      	str	r3, [r2, #20]
    } else {
        BLE_HS_LOG(DEBUG, "ble_hs_hci_cmd_send failure; rc=%d\n", rc);
    }

    return rc;
}
   2f756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memcpy(cmd->data, cmddata, len);
   2f758:	462a      	mov	r2, r5
   2f75a:	4639      	mov	r1, r7
   2f75c:	3003      	adds	r0, #3
   2f75e:	f7eb fa77 	bl	1ac50 <memcpy>
   2f762:	e7f0      	b.n	2f746 <ble_hs_hci_cmd_send+0x16>
   2f764:	10005360 	.word	0x10005360

0002f768 <ble_hs_hci_cmd_send_buf>:

int
ble_hs_hci_cmd_send_buf(uint16_t opcode, const void *buf, uint8_t buf_len)
{
   2f768:	b570      	push	{r4, r5, r6, lr}
   2f76a:	4604      	mov	r4, r0
   2f76c:	460e      	mov	r6, r1
   2f76e:	4615      	mov	r5, r2
    switch (ble_hs_sync_state) {
   2f770:	4b0a      	ldr	r3, [pc, #40]	; (2f79c <ble_hs_hci_cmd_send_buf+0x34>)
   2f772:	781b      	ldrb	r3, [r3, #0]
   2f774:	2b01      	cmp	r3, #1
   2f776:	d006      	beq.n	2f786 <ble_hs_hci_cmd_send_buf+0x1e>
   2f778:	2b02      	cmp	r3, #2
   2f77a:	d007      	beq.n	2f78c <ble_hs_hci_cmd_send_buf+0x24>
   2f77c:	b10b      	cbz	r3, 2f782 <ble_hs_hci_cmd_send_buf+0x1a>
    case BLE_HS_SYNC_STATE_GOOD:
        break;

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_HS_EUNKNOWN;
   2f77e:	2011      	movs	r0, #17
    }

    return ble_hs_hci_cmd_send(opcode, buf_len, buf);
}
   2f780:	bd70      	pop	{r4, r5, r6, pc}
    switch (ble_hs_sync_state) {
   2f782:	2016      	movs	r0, #22
   2f784:	e7fc      	b.n	2f780 <ble_hs_hci_cmd_send_buf+0x18>
        if (!ble_hs_is_parent_task()) {
   2f786:	f7fe fbdf 	bl	2df48 <ble_hs_is_parent_task>
   2f78a:	b128      	cbz	r0, 2f798 <ble_hs_hci_cmd_send_buf+0x30>
    return ble_hs_hci_cmd_send(opcode, buf_len, buf);
   2f78c:	4632      	mov	r2, r6
   2f78e:	4629      	mov	r1, r5
   2f790:	4620      	mov	r0, r4
   2f792:	f7ff ffcd 	bl	2f730 <ble_hs_hci_cmd_send>
   2f796:	e7f3      	b.n	2f780 <ble_hs_hci_cmd_send_buf+0x18>
            return BLE_HS_ENOTSYNCED;
   2f798:	2016      	movs	r0, #22
   2f79a:	e7f1      	b.n	2f780 <ble_hs_hci_cmd_send_buf+0x18>
   2f79c:	10005398 	.word	0x10005398

0002f7a0 <ble_hs_hci_evt_dispatch_find>:
#define BLE_HS_HCI_EVT_LE_DISPATCH_SZ \
    (sizeof ble_hs_hci_evt_le_dispatch / sizeof ble_hs_hci_evt_le_dispatch[0])

static const struct ble_hs_hci_evt_dispatch_entry *
ble_hs_hci_evt_dispatch_find(uint8_t event_code)
{
   2f7a0:	4601      	mov	r1, r0
    const struct ble_hs_hci_evt_dispatch_entry *entry;
    int i;

    for (i = 0; i < BLE_HS_HCI_EVT_DISPATCH_SZ; i++) {
   2f7a2:	2300      	movs	r3, #0
   2f7a4:	2b05      	cmp	r3, #5
   2f7a6:	d808      	bhi.n	2f7ba <ble_hs_hci_evt_dispatch_find+0x1a>
        entry = ble_hs_hci_evt_dispatch + i;
   2f7a8:	4a05      	ldr	r2, [pc, #20]	; (2f7c0 <ble_hs_hci_evt_dispatch_find+0x20>)
   2f7aa:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
        if (entry->event_code == event_code) {
   2f7ae:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   2f7b2:	428a      	cmp	r2, r1
   2f7b4:	d002      	beq.n	2f7bc <ble_hs_hci_evt_dispatch_find+0x1c>
    for (i = 0; i < BLE_HS_HCI_EVT_DISPATCH_SZ; i++) {
   2f7b6:	3301      	adds	r3, #1
   2f7b8:	e7f4      	b.n	2f7a4 <ble_hs_hci_evt_dispatch_find+0x4>
            return entry;
        }
    }

    return NULL;
   2f7ba:	2000      	movs	r0, #0
}
   2f7bc:	4770      	bx	lr
   2f7be:	bf00      	nop
   2f7c0:	00039774 	.word	0x00039774

0002f7c4 <ble_hs_hci_evt_le_dispatch_find>:

static ble_hs_hci_evt_le_fn *
ble_hs_hci_evt_le_dispatch_find(uint8_t event_code)
{
    if (event_code >= BLE_HS_HCI_EVT_LE_DISPATCH_SZ) {
   2f7c4:	2818      	cmp	r0, #24
   2f7c6:	d803      	bhi.n	2f7d0 <ble_hs_hci_evt_le_dispatch_find+0xc>
        return NULL;
    }

    return ble_hs_hci_evt_le_dispatch[event_code];
   2f7c8:	4b02      	ldr	r3, [pc, #8]	; (2f7d4 <ble_hs_hci_evt_le_dispatch_find+0x10>)
   2f7ca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2f7ce:	4770      	bx	lr
        return NULL;
   2f7d0:	2000      	movs	r0, #0
}
   2f7d2:	4770      	bx	lr
   2f7d4:	000397a4 	.word	0x000397a4

0002f7d8 <ble_hs_hci_evt_encrypt_change>:
ble_hs_hci_evt_encrypt_change(uint8_t event_code, const void *data,
                              unsigned int len)
{
    const struct ble_hci_ev_enrypt_chg *ev = data;

    if (len != sizeof (*ev)) {
   2f7d8:	2a04      	cmp	r2, #4
   2f7da:	d101      	bne.n	2f7e0 <ble_hs_hci_evt_encrypt_change+0x8>
        return BLE_HS_ECONTROLLER;
    }

    ble_sm_enc_change_rx(ev);

    return 0;
   2f7dc:	2000      	movs	r0, #0
   2f7de:	4770      	bx	lr
        return BLE_HS_ECONTROLLER;
   2f7e0:	200c      	movs	r0, #12
}
   2f7e2:	4770      	bx	lr

0002f7e4 <ble_hs_hci_evt_enc_key_refresh>:
ble_hs_hci_evt_enc_key_refresh(uint8_t event_code, const void *data,
                               unsigned int len)
{
    const struct ble_hci_ev_enc_key_refresh *ev = data;

    if (len != sizeof(*ev)) {
   2f7e4:	2a03      	cmp	r2, #3
   2f7e6:	d101      	bne.n	2f7ec <ble_hs_hci_evt_enc_key_refresh+0x8>
        return BLE_HS_ECONTROLLER;
    }

    ble_sm_enc_key_refresh_rx(ev);

    return 0;
   2f7e8:	2000      	movs	r0, #0
   2f7ea:	4770      	bx	lr
        return BLE_HS_ECONTROLLER;
   2f7ec:	200c      	movs	r0, #12
}
   2f7ee:	4770      	bx	lr

0002f7f0 <ble_hs_hci_evt_le_meta>:
ble_hs_hci_evt_le_meta(uint8_t event_code, const void *data, unsigned int len)
{
    const struct ble_hci_ev_le_meta *ev = data;
    ble_hs_hci_evt_le_fn *fn;

    if (len < sizeof(*ev)) {
   2f7f0:	b16a      	cbz	r2, 2f80e <ble_hs_hci_evt_le_meta+0x1e>
{
   2f7f2:	b570      	push	{r4, r5, r6, lr}
   2f7f4:	460c      	mov	r4, r1
   2f7f6:	4616      	mov	r6, r2
        return BLE_HS_ECONTROLLER;
    }

    fn = ble_hs_hci_evt_le_dispatch_find(ev->subevent);
   2f7f8:	780d      	ldrb	r5, [r1, #0]
   2f7fa:	4628      	mov	r0, r5
   2f7fc:	f7ff ffe2 	bl	2f7c4 <ble_hs_hci_evt_le_dispatch_find>
    if (fn) {
   2f800:	4603      	mov	r3, r0
   2f802:	b130      	cbz	r0, 2f812 <ble_hs_hci_evt_le_meta+0x22>
        return fn(ev->subevent, data, len);
   2f804:	4632      	mov	r2, r6
   2f806:	4621      	mov	r1, r4
   2f808:	4628      	mov	r0, r5
   2f80a:	4798      	blx	r3
    }

    return 0;
}
   2f80c:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   2f80e:	200c      	movs	r0, #12
}
   2f810:	4770      	bx	lr
    return 0;
   2f812:	2000      	movs	r0, #0
   2f814:	e7fa      	b.n	2f80c <ble_hs_hci_evt_le_meta+0x1c>

0002f816 <ble_hs_hci_evt_le_adv_rpt_first_pass>:
{
    const struct ble_hci_ev_le_subev_adv_rpt *ev = data;
    const struct adv_report *rpt;
    int i;

    if (len < sizeof(*ev)) {
   2f816:	2901      	cmp	r1, #1
   2f818:	d91a      	bls.n	2f850 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x3a>
{
   2f81a:	b410      	push	{r4}
        return BLE_HS_ECONTROLLER;
    }

    len -= sizeof(*ev);
   2f81c:	3902      	subs	r1, #2
    data += sizeof(*ev);
   2f81e:	1c84      	adds	r4, r0, #2

    if (ev->num_reports < BLE_HCI_LE_ADV_RPT_NUM_RPTS_MIN ||
   2f820:	7840      	ldrb	r0, [r0, #1]
   2f822:	1e43      	subs	r3, r0, #1
   2f824:	b2db      	uxtb	r3, r3
   2f826:	2b18      	cmp	r3, #24
   2f828:	d814      	bhi.n	2f854 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x3e>
        ev->num_reports > BLE_HCI_LE_ADV_RPT_NUM_RPTS_MAX) {
        return BLE_HS_EBADDATA;
    }

    for (i = 0; i < ev->num_reports; i++) {
   2f82a:	2200      	movs	r2, #0
   2f82c:	e003      	b.n	2f836 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x20>

        if (rpt->data_len > len) {
            return BLE_HS_ECONTROLLER;
        }

        len -= rpt->data_len;
   2f82e:	1ac9      	subs	r1, r1, r3
        data += rpt->data_len;
   2f830:	3305      	adds	r3, #5
   2f832:	441c      	add	r4, r3
    for (i = 0; i < ev->num_reports; i++) {
   2f834:	3201      	adds	r2, #1
   2f836:	4290      	cmp	r0, r2
   2f838:	dd07      	ble.n	2f84a <ble_hs_hci_evt_le_adv_rpt_first_pass+0x34>
        if (len < sizeof(*rpt) + 1) {
   2f83a:	2909      	cmp	r1, #9
   2f83c:	d90c      	bls.n	2f858 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x42>
        len -= sizeof(*rpt) + 1;
   2f83e:	390a      	subs	r1, #10
        if (rpt->data_len > len) {
   2f840:	7a23      	ldrb	r3, [r4, #8]
   2f842:	428b      	cmp	r3, r1
   2f844:	d9f3      	bls.n	2f82e <ble_hs_hci_evt_le_adv_rpt_first_pass+0x18>
            return BLE_HS_ECONTROLLER;
   2f846:	200c      	movs	r0, #12
   2f848:	e007      	b.n	2f85a <ble_hs_hci_evt_le_adv_rpt_first_pass+0x44>
    }

    /* Make sure length was correct */
    if (len) {
   2f84a:	b941      	cbnz	r1, 2f85e <ble_hs_hci_evt_le_adv_rpt_first_pass+0x48>
        return BLE_HS_ECONTROLLER;
    }

    return 0;
   2f84c:	2000      	movs	r0, #0
   2f84e:	e004      	b.n	2f85a <ble_hs_hci_evt_le_adv_rpt_first_pass+0x44>
        return BLE_HS_ECONTROLLER;
   2f850:	200c      	movs	r0, #12
}
   2f852:	4770      	bx	lr
        return BLE_HS_EBADDATA;
   2f854:	200a      	movs	r0, #10
   2f856:	e000      	b.n	2f85a <ble_hs_hci_evt_le_adv_rpt_first_pass+0x44>
            return BLE_HS_ECONTROLLER;
   2f858:	200c      	movs	r0, #12
}
   2f85a:	bc10      	pop	{r4}
   2f85c:	4770      	bx	lr
        return BLE_HS_ECONTROLLER;
   2f85e:	200c      	movs	r0, #12
   2f860:	e7fb      	b.n	2f85a <ble_hs_hci_evt_le_adv_rpt_first_pass+0x44>

0002f862 <ble_hs_hci_evt_le_ext_adv_rpt>:

        report = (const void *) &report->data[report->data_len];
    }
#endif
    return 0;
}
   2f862:	2000      	movs	r0, #0
   2f864:	4770      	bx	lr

0002f866 <ble_hs_hci_evt_le_periodic_adv_sync_estab>:

    ble_gap_rx_peroidic_adv_sync_estab(ev);
#endif

    return 0;
}
   2f866:	2000      	movs	r0, #0
   2f868:	4770      	bx	lr

0002f86a <ble_hs_hci_evt_le_periodic_adv_rpt>:

    ble_gap_rx_periodic_adv_rpt(ev);
#endif

return 0;
}
   2f86a:	2000      	movs	r0, #0
   2f86c:	4770      	bx	lr

0002f86e <ble_hs_hci_evt_le_periodic_adv_sync_lost>:

    ble_gap_rx_periodic_adv_sync_lost(ev);

#endif
    return 0;
}
   2f86e:	2000      	movs	r0, #0
   2f870:	4770      	bx	lr

0002f872 <ble_hs_hci_evt_le_periodic_adv_sync_transfer>:

    ble_gap_rx_periodic_adv_sync_transfer(ev);

#endif
    return 0;
}
   2f872:	2000      	movs	r0, #0
   2f874:	4770      	bx	lr

0002f876 <ble_hs_hci_evt_le_scan_timeout>:
    }

    ble_gap_rx_le_scan_timeout();
#endif
    return 0;
}
   2f876:	2000      	movs	r0, #0
   2f878:	4770      	bx	lr

0002f87a <ble_hs_hci_evt_le_adv_set_terminated>:
    }
    ble_gap_rx_adv_set_terminated(ev);
#endif

    return 0;
}
   2f87a:	2000      	movs	r0, #0
   2f87c:	4770      	bx	lr

0002f87e <ble_hs_hci_evt_le_scan_req_rcvd>:

    ble_gap_rx_scan_req_rcvd(ev);
#endif

    return 0;
}
   2f87e:	2000      	movs	r0, #0
   2f880:	4770      	bx	lr

0002f882 <ble_hs_hci_evt_le_lt_key_req>:
static int
ble_hs_hci_evt_le_lt_key_req(uint8_t subevent, const void *data, unsigned int len)
{
    const struct ble_hci_ev_le_subev_lt_key_req *ev = data;

    if (len != sizeof(*ev)) {
   2f882:	2a0d      	cmp	r2, #13
   2f884:	d101      	bne.n	2f88a <ble_hs_hci_evt_le_lt_key_req+0x8>
        return BLE_HS_ECONTROLLER;
    }

    ble_sm_ltk_req_rx(ev);

    return 0;
   2f886:	2000      	movs	r0, #0
   2f888:	4770      	bx	lr
        return BLE_HS_ECONTROLLER;
   2f88a:	200c      	movs	r0, #12
}
   2f88c:	4770      	bx	lr

0002f88e <ble_hs_hci_evt_hw_error>:
    if (len != sizeof(*ev)) {
   2f88e:	2a01      	cmp	r2, #1
   2f890:	d001      	beq.n	2f896 <ble_hs_hci_evt_hw_error+0x8>
        return BLE_HS_ECONTROLLER;
   2f892:	200c      	movs	r0, #12
}
   2f894:	4770      	bx	lr
{
   2f896:	b508      	push	{r3, lr}
    ble_hs_hw_error(ev->hw_code);
   2f898:	7808      	ldrb	r0, [r1, #0]
   2f89a:	f7fe fcb5 	bl	2e208 <ble_hs_hw_error>
    return 0;
   2f89e:	2000      	movs	r0, #0
}
   2f8a0:	bd08      	pop	{r3, pc}

0002f8a2 <ble_hs_hci_evt_disconn_complete>:
    if (len != sizeof(*ev)) {
   2f8a2:	2a04      	cmp	r2, #4
   2f8a4:	d001      	beq.n	2f8aa <ble_hs_hci_evt_disconn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   2f8a6:	200c      	movs	r0, #12
}
   2f8a8:	4770      	bx	lr
{
   2f8aa:	b510      	push	{r4, lr}
   2f8ac:	460c      	mov	r4, r1
    ble_hs_lock();
   2f8ae:	f7fe fb6f 	bl	2df90 <ble_hs_lock>
    conn = ble_hs_conn_find(le16toh(ev->conn_handle));
   2f8b2:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   2f8b6:	f7ff fbef 	bl	2f098 <ble_hs_conn_find>
    if (conn != NULL) {
   2f8ba:	b110      	cbz	r0, 2f8c2 <ble_hs_hci_evt_disconn_complete+0x20>
        ble_hs_hci_add_avail_pkts(conn->bhc_outstanding_pkts);
   2f8bc:	8f00      	ldrh	r0, [r0, #56]	; 0x38
   2f8be:	f7ff fe29 	bl	2f514 <ble_hs_hci_add_avail_pkts>
    ble_hs_unlock();
   2f8c2:	f7fe fb69 	bl	2df98 <ble_hs_unlock>
    ble_gap_rx_disconn_complete(ev);
   2f8c6:	4620      	mov	r0, r4
   2f8c8:	f7fa fd0c 	bl	2a2e4 <ble_gap_rx_disconn_complete>
    ble_hs_wakeup_tx();
   2f8cc:	f7fe fb7a 	bl	2dfc4 <ble_hs_wakeup_tx>
    return 0;
   2f8d0:	2000      	movs	r0, #0
}
   2f8d2:	bd10      	pop	{r4, pc}

0002f8d4 <ble_hs_hci_evt_num_completed_pkts>:
    if (len != sizeof(*ev) + (ev->count * sizeof(ev->completed[0]))) {
   2f8d4:	780b      	ldrb	r3, [r1, #0]
   2f8d6:	009b      	lsls	r3, r3, #2
   2f8d8:	3301      	adds	r3, #1
   2f8da:	4293      	cmp	r3, r2
   2f8dc:	d129      	bne.n	2f932 <ble_hs_hci_evt_num_completed_pkts+0x5e>
{
   2f8de:	b570      	push	{r4, r5, r6, lr}
   2f8e0:	460d      	mov	r5, r1
    for (i = 0; i < ev->count; i++) {
   2f8e2:	2400      	movs	r4, #0
   2f8e4:	e008      	b.n	2f8f8 <ble_hs_hci_evt_num_completed_pkts+0x24>
                    ble_hs_sched_reset(BLE_HS_ECONTROLLER);
   2f8e6:	200c      	movs	r0, #12
   2f8e8:	f7fe fc7e 	bl	2e1e8 <ble_hs_sched_reset>
                ble_hs_hci_add_avail_pkts(num_pkts);
   2f8ec:	4630      	mov	r0, r6
   2f8ee:	f7ff fe11 	bl	2f514 <ble_hs_hci_add_avail_pkts>
            ble_hs_unlock();
   2f8f2:	f7fe fb51 	bl	2df98 <ble_hs_unlock>
    for (i = 0; i < ev->count; i++) {
   2f8f6:	3401      	adds	r4, #1
   2f8f8:	782b      	ldrb	r3, [r5, #0]
   2f8fa:	42a3      	cmp	r3, r4
   2f8fc:	dd15      	ble.n	2f92a <ble_hs_hci_evt_num_completed_pkts+0x56>
        num_pkts = le16toh(ev->completed[i].packets);
   2f8fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2f902:	f8b3 6003 	ldrh.w	r6, [r3, #3]
        if (num_pkts > 0) {
   2f906:	2e00      	cmp	r6, #0
   2f908:	d0f5      	beq.n	2f8f6 <ble_hs_hci_evt_num_completed_pkts+0x22>
            ble_hs_lock();
   2f90a:	f7fe fb41 	bl	2df90 <ble_hs_lock>
            conn = ble_hs_conn_find(le16toh(ev->completed[i].handle));
   2f90e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2f912:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   2f916:	f7ff fbbf 	bl	2f098 <ble_hs_conn_find>
            if (conn != NULL) {
   2f91a:	2800      	cmp	r0, #0
   2f91c:	d0e9      	beq.n	2f8f2 <ble_hs_hci_evt_num_completed_pkts+0x1e>
                if (conn->bhc_outstanding_pkts < num_pkts) {
   2f91e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   2f920:	42b3      	cmp	r3, r6
   2f922:	d3e0      	bcc.n	2f8e6 <ble_hs_hci_evt_num_completed_pkts+0x12>
                    conn->bhc_outstanding_pkts -= num_pkts;
   2f924:	1b9b      	subs	r3, r3, r6
   2f926:	8703      	strh	r3, [r0, #56]	; 0x38
   2f928:	e7e0      	b.n	2f8ec <ble_hs_hci_evt_num_completed_pkts+0x18>
    ble_hs_wakeup_tx();
   2f92a:	f7fe fb4b 	bl	2dfc4 <ble_hs_wakeup_tx>
    return 0;
   2f92e:	2000      	movs	r0, #0
}
   2f930:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   2f932:	200c      	movs	r0, #12
}
   2f934:	4770      	bx	lr

0002f936 <ble_hs_hci_evt_le_phy_update_complete>:
ble_hs_hci_evt_le_phy_update_complete(uint8_t subevent, const void *data,
                                      unsigned int len)
{
    const struct ble_hci_ev_le_subev_phy_update_complete *ev = data;

    if (len != sizeof(*ev)) {
   2f936:	2a06      	cmp	r2, #6
   2f938:	d001      	beq.n	2f93e <ble_hs_hci_evt_le_phy_update_complete+0x8>
        return BLE_HS_ECONTROLLER;
   2f93a:	200c      	movs	r0, #12
    }

    ble_gap_rx_phy_update_complete(ev);

    return 0;
}
   2f93c:	4770      	bx	lr
{
   2f93e:	b508      	push	{r3, lr}
    ble_gap_rx_phy_update_complete(ev);
   2f940:	4608      	mov	r0, r1
   2f942:	f7f9 ffc7 	bl	298d4 <ble_gap_rx_phy_update_complete>
    return 0;
   2f946:	2000      	movs	r0, #0
}
   2f948:	bd08      	pop	{r3, pc}

0002f94a <ble_hs_hci_evt_le_dir_adv_rpt>:
{
   2f94a:	b530      	push	{r4, r5, lr}
   2f94c:	b087      	sub	sp, #28
    struct ble_gap_disc_desc desc = {0};
   2f94e:	2300      	movs	r3, #0
   2f950:	9300      	str	r3, [sp, #0]
   2f952:	9301      	str	r3, [sp, #4]
   2f954:	9302      	str	r3, [sp, #8]
   2f956:	9304      	str	r3, [sp, #16]
   2f958:	9305      	str	r3, [sp, #20]
    if (len < sizeof(*ev) || len != ev->num_reports * sizeof(ev->reports[0])) {
   2f95a:	2a01      	cmp	r2, #1
   2f95c:	d932      	bls.n	2f9c4 <ble_hs_hci_evt_le_dir_adv_rpt+0x7a>
   2f95e:	460d      	mov	r5, r1
   2f960:	784b      	ldrb	r3, [r1, #1]
   2f962:	ebb2 1f03 	cmp.w	r2, r3, lsl #4
   2f966:	d12f      	bne.n	2f9c8 <ble_hs_hci_evt_le_dir_adv_rpt+0x7e>
    desc.data = NULL;
   2f968:	2400      	movs	r4, #0
   2f96a:	9403      	str	r4, [sp, #12]
    desc.length_data = 0;
   2f96c:	f88d 4001 	strb.w	r4, [sp, #1]
    for (i = 0; i < ev->num_reports; i++) {
   2f970:	786b      	ldrb	r3, [r5, #1]
   2f972:	42a3      	cmp	r3, r4
   2f974:	dd23      	ble.n	2f9be <ble_hs_hci_evt_le_dir_adv_rpt+0x74>
        desc.event_type = ev->reports[i].type;
   2f976:	eb05 1304 	add.w	r3, r5, r4, lsl #4
   2f97a:	789a      	ldrb	r2, [r3, #2]
   2f97c:	f88d 2000 	strb.w	r2, [sp]
        desc.addr.type = ev->reports[i].addr_type;
   2f980:	78da      	ldrb	r2, [r3, #3]
   2f982:	f88d 2002 	strb.w	r2, [sp, #2]
        memcpy(desc.addr.val, ev->reports[i].addr, BLE_DEV_ADDR_LEN);
   2f986:	461a      	mov	r2, r3
   2f988:	f852 1f04 	ldr.w	r1, [r2, #4]!
   2f98c:	f8cd 1003 	str.w	r1, [sp, #3]
   2f990:	8892      	ldrh	r2, [r2, #4]
   2f992:	f8ad 2007 	strh.w	r2, [sp, #7]
        desc.direct_addr.type = ev->reports[i].dir_addr_type;
   2f996:	7a9a      	ldrb	r2, [r3, #10]
   2f998:	f88d 2010 	strb.w	r2, [sp, #16]
        memcpy(desc.direct_addr.val, ev->reports[i].dir_addr, BLE_DEV_ADDR_LEN);
   2f99c:	461a      	mov	r2, r3
   2f99e:	f852 1f0b 	ldr.w	r1, [r2, #11]!
   2f9a2:	f8cd 1011 	str.w	r1, [sp, #17]
   2f9a6:	8892      	ldrh	r2, [r2, #4]
   2f9a8:	f8ad 2015 	strh.w	r2, [sp, #21]
        desc.rssi = ev->reports[i].rssi;
   2f9ac:	f993 3011 	ldrsb.w	r3, [r3, #17]
   2f9b0:	f88d 3009 	strb.w	r3, [sp, #9]
        ble_gap_rx_adv_report(&desc);
   2f9b4:	4668      	mov	r0, sp
   2f9b6:	f7f9 ff59 	bl	2986c <ble_gap_rx_adv_report>
    for (i = 0; i < ev->num_reports; i++) {
   2f9ba:	3401      	adds	r4, #1
   2f9bc:	e7d8      	b.n	2f970 <ble_hs_hci_evt_le_dir_adv_rpt+0x26>
    return 0;
   2f9be:	2000      	movs	r0, #0
}
   2f9c0:	b007      	add	sp, #28
   2f9c2:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ECONTROLLER;
   2f9c4:	200c      	movs	r0, #12
   2f9c6:	e7fb      	b.n	2f9c0 <ble_hs_hci_evt_le_dir_adv_rpt+0x76>
   2f9c8:	200c      	movs	r0, #12
   2f9ca:	e7f9      	b.n	2f9c0 <ble_hs_hci_evt_le_dir_adv_rpt+0x76>

0002f9cc <ble_hs_hci_evt_le_adv_rpt>:
{
   2f9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f9ce:	b087      	sub	sp, #28
   2f9d0:	460e      	mov	r6, r1
    struct ble_gap_disc_desc desc = {0};
   2f9d2:	2300      	movs	r3, #0
   2f9d4:	9300      	str	r3, [sp, #0]
   2f9d6:	9301      	str	r3, [sp, #4]
   2f9d8:	9302      	str	r3, [sp, #8]
   2f9da:	9303      	str	r3, [sp, #12]
   2f9dc:	9304      	str	r3, [sp, #16]
   2f9de:	9305      	str	r3, [sp, #20]
    rc = ble_hs_hci_evt_le_adv_rpt_first_pass(data, len);
   2f9e0:	4611      	mov	r1, r2
   2f9e2:	4630      	mov	r0, r6
   2f9e4:	f7ff ff17 	bl	2f816 <ble_hs_hci_evt_le_adv_rpt_first_pass>
    if (rc != 0) {
   2f9e8:	4607      	mov	r7, r0
   2f9ea:	bb58      	cbnz	r0, 2fa44 <ble_hs_hci_evt_le_adv_rpt+0x78>
    data += sizeof(*ev);
   2f9ec:	1cb3      	adds	r3, r6, #2
    desc.direct_addr = *BLE_ADDR_ANY;
   2f9ee:	2200      	movs	r2, #0
   2f9f0:	9204      	str	r2, [sp, #16]
   2f9f2:	f8cd 2013 	str.w	r2, [sp, #19]
    for (i = 0; i < ev->num_reports; i++) {
   2f9f6:	4605      	mov	r5, r0
   2f9f8:	7872      	ldrb	r2, [r6, #1]
   2f9fa:	42aa      	cmp	r2, r5
   2f9fc:	dd22      	ble.n	2fa44 <ble_hs_hci_evt_le_adv_rpt+0x78>
        data += sizeof(rpt) + rpt->data_len + 1;
   2f9fe:	7a1c      	ldrb	r4, [r3, #8]
   2fa00:	3405      	adds	r4, #5
   2fa02:	441c      	add	r4, r3
        desc.event_type = rpt->type;
   2fa04:	781a      	ldrb	r2, [r3, #0]
   2fa06:	f88d 2000 	strb.w	r2, [sp]
        desc.addr.type = rpt->addr_type;
   2fa0a:	785a      	ldrb	r2, [r3, #1]
   2fa0c:	f88d 2002 	strb.w	r2, [sp, #2]
        memcpy(desc.addr.val, rpt->addr, BLE_DEV_ADDR_LEN);
   2fa10:	461a      	mov	r2, r3
   2fa12:	f852 1f02 	ldr.w	r1, [r2, #2]!
   2fa16:	f8cd 1003 	str.w	r1, [sp, #3]
   2fa1a:	8892      	ldrh	r2, [r2, #4]
   2fa1c:	f8ad 2007 	strh.w	r2, [sp, #7]
        desc.length_data = rpt->data_len;
   2fa20:	7a1a      	ldrb	r2, [r3, #8]
   2fa22:	f88d 2001 	strb.w	r2, [sp, #1]
        desc.data = rpt->data;
   2fa26:	f103 0209 	add.w	r2, r3, #9
   2fa2a:	9203      	str	r2, [sp, #12]
        desc.rssi = rpt->data[rpt->data_len];
   2fa2c:	7a1a      	ldrb	r2, [r3, #8]
   2fa2e:	4413      	add	r3, r2
   2fa30:	f993 3009 	ldrsb.w	r3, [r3, #9]
   2fa34:	f88d 3009 	strb.w	r3, [sp, #9]
        ble_gap_rx_adv_report(&desc);
   2fa38:	4668      	mov	r0, sp
   2fa3a:	f7f9 ff17 	bl	2986c <ble_gap_rx_adv_report>
    for (i = 0; i < ev->num_reports; i++) {
   2fa3e:	3501      	adds	r5, #1
        data += sizeof(rpt) + rpt->data_len + 1;
   2fa40:	4623      	mov	r3, r4
   2fa42:	e7d9      	b.n	2f9f8 <ble_hs_hci_evt_le_adv_rpt+0x2c>
}
   2fa44:	4638      	mov	r0, r7
   2fa46:	b007      	add	sp, #28
   2fa48:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002fa4a <ble_hs_hci_evt_le_enh_conn_complete>:
    if (len != sizeof(*ev)) {
   2fa4a:	2a1f      	cmp	r2, #31
   2fa4c:	d001      	beq.n	2fa52 <ble_hs_hci_evt_le_enh_conn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   2fa4e:	200c      	movs	r0, #12
}
   2fa50:	4770      	bx	lr
{
   2fa52:	b510      	push	{r4, lr}
   2fa54:	b088      	sub	sp, #32
   2fa56:	460c      	mov	r4, r1
    memset(&evt, 0, sizeof(evt));
   2fa58:	2220      	movs	r2, #32
   2fa5a:	2100      	movs	r1, #0
   2fa5c:	4668      	mov	r0, sp
   2fa5e:	f7eb f91c 	bl	1ac9a <memset>
    evt.status = ev->status;
   2fa62:	7863      	ldrb	r3, [r4, #1]
   2fa64:	f88d 3000 	strb.w	r3, [sp]
    if (evt.status == BLE_ERR_SUCCESS) {
   2fa68:	bb63      	cbnz	r3, 2fac4 <ble_hs_hci_evt_le_enh_conn_complete+0x7a>
        evt.connection_handle = le16toh(ev->conn_handle);
   2fa6a:	8863      	ldrh	r3, [r4, #2]
   2fa6c:	f8ad 3002 	strh.w	r3, [sp, #2]
        evt.role = ev->role;
   2fa70:	7923      	ldrb	r3, [r4, #4]
   2fa72:	f88d 3004 	strb.w	r3, [sp, #4]
        evt.peer_addr_type = ev->peer_addr_type;
   2fa76:	7963      	ldrb	r3, [r4, #5]
   2fa78:	f88d 3005 	strb.w	r3, [sp, #5]
        memcpy(evt.peer_addr, ev->peer_addr, BLE_DEV_ADDR_LEN);
   2fa7c:	4623      	mov	r3, r4
   2fa7e:	f853 2f06 	ldr.w	r2, [r3, #6]!
   2fa82:	f8cd 2006 	str.w	r2, [sp, #6]
   2fa86:	889b      	ldrh	r3, [r3, #4]
   2fa88:	f8ad 300a 	strh.w	r3, [sp, #10]
        memcpy(evt.local_rpa, ev->local_rpa, BLE_DEV_ADDR_LEN);
   2fa8c:	4623      	mov	r3, r4
   2fa8e:	f853 2f0c 	ldr.w	r2, [r3, #12]!
   2fa92:	f8cd 2013 	str.w	r2, [sp, #19]
   2fa96:	889b      	ldrh	r3, [r3, #4]
   2fa98:	f8ad 3017 	strh.w	r3, [sp, #23]
        memcpy(evt.peer_rpa,ev->peer_rpa, BLE_DEV_ADDR_LEN);
   2fa9c:	4623      	mov	r3, r4
   2fa9e:	f853 2f12 	ldr.w	r2, [r3, #18]!
   2faa2:	f8cd 2019 	str.w	r2, [sp, #25]
   2faa6:	889b      	ldrh	r3, [r3, #4]
   2faa8:	f8ad 301d 	strh.w	r3, [sp, #29]
        evt.conn_itvl = le16toh(ev->conn_itvl);
   2faac:	8b23      	ldrh	r3, [r4, #24]
   2faae:	f8ad 300c 	strh.w	r3, [sp, #12]
        evt.conn_latency = le16toh(ev->conn_latency);
   2fab2:	8b63      	ldrh	r3, [r4, #26]
   2fab4:	f8ad 300e 	strh.w	r3, [sp, #14]
        evt.supervision_timeout = le16toh(ev->supervision_timeout);
   2fab8:	8ba3      	ldrh	r3, [r4, #28]
   2faba:	f8ad 3010 	strh.w	r3, [sp, #16]
        evt.master_clk_acc = ev->mca;
   2fabe:	7fa3      	ldrb	r3, [r4, #30]
   2fac0:	f88d 3012 	strb.w	r3, [sp, #18]
    return ble_gap_rx_conn_complete(&evt, 0);
   2fac4:	2100      	movs	r1, #0
   2fac6:	4668      	mov	r0, sp
   2fac8:	f7fa f884 	bl	29bd4 <ble_gap_rx_conn_complete>
}
   2facc:	b008      	add	sp, #32
   2face:	bd10      	pop	{r4, pc}

0002fad0 <ble_hs_hci_evt_le_conn_complete>:
    if (len != sizeof(*ev)) {
   2fad0:	2a13      	cmp	r2, #19
   2fad2:	d001      	beq.n	2fad8 <ble_hs_hci_evt_le_conn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   2fad4:	200c      	movs	r0, #12
}
   2fad6:	4770      	bx	lr
{
   2fad8:	b510      	push	{r4, lr}
   2fada:	b088      	sub	sp, #32
   2fadc:	460c      	mov	r4, r1
    memset(&evt, 0, sizeof(evt));
   2fade:	2220      	movs	r2, #32
   2fae0:	2100      	movs	r1, #0
   2fae2:	4668      	mov	r0, sp
   2fae4:	f7eb f8d9 	bl	1ac9a <memset>
    evt.status = ev->status;
   2fae8:	7863      	ldrb	r3, [r4, #1]
   2faea:	f88d 3000 	strb.w	r3, [sp]
    if (evt.status == BLE_ERR_SUCCESS) {
   2faee:	b9e3      	cbnz	r3, 2fb2a <ble_hs_hci_evt_le_conn_complete+0x5a>
        evt.connection_handle = le16toh(ev->conn_handle);
   2faf0:	8863      	ldrh	r3, [r4, #2]
   2faf2:	f8ad 3002 	strh.w	r3, [sp, #2]
        evt.role = ev->role;
   2faf6:	7923      	ldrb	r3, [r4, #4]
   2faf8:	f88d 3004 	strb.w	r3, [sp, #4]
        evt.peer_addr_type = ev->peer_addr_type;
   2fafc:	7963      	ldrb	r3, [r4, #5]
   2fafe:	f88d 3005 	strb.w	r3, [sp, #5]
        memcpy(evt.peer_addr, ev->peer_addr, BLE_DEV_ADDR_LEN);
   2fb02:	4623      	mov	r3, r4
   2fb04:	f853 2f06 	ldr.w	r2, [r3, #6]!
   2fb08:	f8cd 2006 	str.w	r2, [sp, #6]
   2fb0c:	889b      	ldrh	r3, [r3, #4]
   2fb0e:	f8ad 300a 	strh.w	r3, [sp, #10]
        evt.conn_itvl = le16toh(ev->conn_itvl);
   2fb12:	89a3      	ldrh	r3, [r4, #12]
   2fb14:	f8ad 300c 	strh.w	r3, [sp, #12]
        evt.conn_latency = le16toh(ev->conn_latency);
   2fb18:	89e3      	ldrh	r3, [r4, #14]
   2fb1a:	f8ad 300e 	strh.w	r3, [sp, #14]
        evt.supervision_timeout = le16toh(ev->supervision_timeout);
   2fb1e:	8a23      	ldrh	r3, [r4, #16]
   2fb20:	f8ad 3010 	strh.w	r3, [sp, #16]
        evt.master_clk_acc = ev->mca;
   2fb24:	7ca3      	ldrb	r3, [r4, #18]
   2fb26:	f88d 3012 	strb.w	r3, [sp, #18]
    return ble_gap_rx_conn_complete(&evt, 0);
   2fb2a:	2100      	movs	r1, #0
   2fb2c:	4668      	mov	r0, sp
   2fb2e:	f7fa f851 	bl	29bd4 <ble_gap_rx_conn_complete>
}
   2fb32:	b008      	add	sp, #32
   2fb34:	bd10      	pop	{r4, pc}

0002fb36 <ble_hs_hci_evt_le_conn_parm_req>:
    if (len != sizeof(*ev)) {
   2fb36:	2a0b      	cmp	r2, #11
   2fb38:	d001      	beq.n	2fb3e <ble_hs_hci_evt_le_conn_parm_req+0x8>
        return BLE_HS_ECONTROLLER;
   2fb3a:	200c      	movs	r0, #12
}
   2fb3c:	4770      	bx	lr
{
   2fb3e:	b508      	push	{r3, lr}
    ble_gap_rx_param_req(ev);
   2fb40:	4608      	mov	r0, r1
   2fb42:	f7fa fcb7 	bl	2a4b4 <ble_gap_rx_param_req>
    return 0;
   2fb46:	2000      	movs	r0, #0
}
   2fb48:	bd08      	pop	{r3, pc}

0002fb4a <ble_hs_hci_evt_le_rd_rem_used_feat_complete>:
    if (len != sizeof(*ev)) {
   2fb4a:	2a0c      	cmp	r2, #12
   2fb4c:	d001      	beq.n	2fb52 <ble_hs_hci_evt_le_rd_rem_used_feat_complete+0x8>
        return BLE_HS_ECONTROLLER;
   2fb4e:	200c      	movs	r0, #12
}
   2fb50:	4770      	bx	lr
{
   2fb52:	b508      	push	{r3, lr}
    ble_gap_rx_rd_rem_sup_feat_complete(ev);
   2fb54:	4608      	mov	r0, r1
   2fb56:	f7f9 fe95 	bl	29884 <ble_gap_rx_rd_rem_sup_feat_complete>
    return 0;
   2fb5a:	2000      	movs	r0, #0
}
   2fb5c:	bd08      	pop	{r3, pc}

0002fb5e <ble_hs_hci_evt_le_conn_upd_complete>:
    if (len != sizeof(*ev)) {
   2fb5e:	2a0a      	cmp	r2, #10
   2fb60:	d001      	beq.n	2fb66 <ble_hs_hci_evt_le_conn_upd_complete+0x8>
        return BLE_HS_ECONTROLLER;
   2fb62:	200c      	movs	r0, #12
}
   2fb64:	4770      	bx	lr
{
   2fb66:	b508      	push	{r3, lr}
    ble_gap_rx_update_complete(ev);
   2fb68:	4608      	mov	r0, r1
   2fb6a:	f7fa fc09 	bl	2a380 <ble_gap_rx_update_complete>
    return 0;
   2fb6e:	2000      	movs	r0, #0
}
   2fb70:	bd08      	pop	{r3, pc}
	...

0002fb74 <ble_hs_hci_evt_process>:
#endif

int
ble_hs_hci_evt_process(const struct ble_hci_ev *ev)
{
   2fb74:	b538      	push	{r3, r4, r5, lr}
   2fb76:	4604      	mov	r4, r0
    const struct ble_hs_hci_evt_dispatch_entry *entry;
    int rc;

    /* Count events received */
    STATS_INC(ble_hs_stats, hci_event);
   2fb78:	4a0c      	ldr	r2, [pc, #48]	; (2fbac <ble_hs_hci_evt_process+0x38>)
   2fb7a:	6993      	ldr	r3, [r2, #24]
   2fb7c:	3301      	adds	r3, #1
   2fb7e:	6193      	str	r3, [r2, #24]


    entry = ble_hs_hci_evt_dispatch_find(ev->opcode);
   2fb80:	7805      	ldrb	r5, [r0, #0]
   2fb82:	4628      	mov	r0, r5
   2fb84:	f7ff fe0c 	bl	2f7a0 <ble_hs_hci_evt_dispatch_find>
    if (entry == NULL) {
   2fb88:	b150      	cbz	r0, 2fba0 <ble_hs_hci_evt_process+0x2c>
        STATS_INC(ble_hs_stats, hci_unknown_event);
        rc = BLE_HS_ENOTSUP;
    } else {
        rc = entry->cb(ev->opcode, ev->data, ev->length);
   2fb8a:	6843      	ldr	r3, [r0, #4]
   2fb8c:	7862      	ldrb	r2, [r4, #1]
   2fb8e:	1ca1      	adds	r1, r4, #2
   2fb90:	4628      	mov	r0, r5
   2fb92:	4798      	blx	r3
   2fb94:	4605      	mov	r5, r0
    }

    ble_hci_trans_buf_free((uint8_t *) ev);
   2fb96:	4620      	mov	r0, r4
   2fb98:	f002 fb52 	bl	32240 <ble_hci_trans_buf_free>

    return rc;
}
   2fb9c:	4628      	mov	r0, r5
   2fb9e:	bd38      	pop	{r3, r4, r5, pc}
        STATS_INC(ble_hs_stats, hci_unknown_event);
   2fba0:	4a02      	ldr	r2, [pc, #8]	; (2fbac <ble_hs_hci_evt_process+0x38>)
   2fba2:	6a13      	ldr	r3, [r2, #32]
   2fba4:	3301      	adds	r3, #1
   2fba6:	6213      	str	r3, [r2, #32]
        rc = BLE_HS_ENOTSUP;
   2fba8:	2508      	movs	r5, #8
   2fbaa:	e7f4      	b.n	2fb96 <ble_hs_hci_evt_process+0x22>
   2fbac:	10005360 	.word	0x10005360

0002fbb0 <ble_hs_hci_evt_acl_process>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_hci_evt_acl_process(struct os_mbuf *om)
{
   2fbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fbb4:	b086      	sub	sp, #24
   2fbb6:	4604      	mov	r4, r0
    ble_l2cap_rx_fn *rx_cb;
    uint16_t conn_handle;
    int reject_cid;
    int rc;

    rc = ble_hs_hci_util_data_hdr_strip(om, &hci_hdr);
   2fbb8:	a905      	add	r1, sp, #20
   2fbba:	f000 f8c9 	bl	2fd50 <ble_hs_hci_util_data_hdr_strip>
    if (rc != 0) {
   2fbbe:	4605      	mov	r5, r0
   2fbc0:	b130      	cbz	r0, 2fbd0 <ble_hs_hci_evt_acl_process+0x20>
    }

    return 0;

err:
    os_mbuf_free_chain(om);
   2fbc2:	4620      	mov	r0, r4
   2fbc4:	f7e9 fd03 	bl	195ce <os_mbuf_free_chain>
    return rc;
#else
    return BLE_HS_ENOTSUP;
#endif
}
   2fbc8:	4628      	mov	r0, r5
   2fbca:	b006      	add	sp, #24
   2fbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_log_mbuf(om);
   2fbd0:	4620      	mov	r0, r4
   2fbd2:	f000 f999 	bl	2ff08 <ble_hs_log_mbuf>
    if (hci_hdr.hdh_len != OS_MBUF_PKTHDR(om)->omp_len) {
   2fbd6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2fbda:	8a23      	ldrh	r3, [r4, #16]
   2fbdc:	429a      	cmp	r2, r3
   2fbde:	d001      	beq.n	2fbe4 <ble_hs_hci_evt_acl_process+0x34>
        rc = BLE_HS_EBADDATA;
   2fbe0:	250a      	movs	r5, #10
   2fbe2:	e7ee      	b.n	2fbc2 <ble_hs_hci_evt_acl_process+0x12>
    conn_handle = BLE_HCI_DATA_HANDLE(hci_hdr.hdh_handle_pb_bc);
   2fbe4:	f8bd 7014 	ldrh.w	r7, [sp, #20]
   2fbe8:	f3c7 070b 	ubfx	r7, r7, #0, #12
    ble_hs_lock();
   2fbec:	f7fe f9d0 	bl	2df90 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   2fbf0:	4638      	mov	r0, r7
   2fbf2:	f7ff fa51 	bl	2f098 <ble_hs_conn_find>
    if (conn == NULL) {
   2fbf6:	4680      	mov	r8, r0
   2fbf8:	b198      	cbz	r0, 2fc22 <ble_hs_hci_evt_acl_process+0x72>
        rc = ble_l2cap_rx(conn, &hci_hdr, om, &rx_cb, &reject_cid);
   2fbfa:	ab03      	add	r3, sp, #12
   2fbfc:	9300      	str	r3, [sp, #0]
   2fbfe:	ab04      	add	r3, sp, #16
   2fc00:	4622      	mov	r2, r4
   2fc02:	a905      	add	r1, sp, #20
   2fc04:	f000 fe43 	bl	3088e <ble_l2cap_rx>
   2fc08:	4606      	mov	r6, r0
        om = NULL;
   2fc0a:	2400      	movs	r4, #0
    ble_hs_unlock();
   2fc0c:	f7fe f9c4 	bl	2df98 <ble_hs_unlock>
    switch (rc) {
   2fc10:	b166      	cbz	r6, 2fc2c <ble_hs_hci_evt_acl_process+0x7c>
   2fc12:	2e01      	cmp	r6, #1
   2fc14:	d0d8      	beq.n	2fbc8 <ble_hs_hci_evt_acl_process+0x18>
        if (reject_cid != -1) {
   2fc16:	9b03      	ldr	r3, [sp, #12]
   2fc18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2fc1c:	d111      	bne.n	2fc42 <ble_hs_hci_evt_acl_process+0x92>
        goto err;
   2fc1e:	4635      	mov	r5, r6
   2fc20:	e7cf      	b.n	2fbc2 <ble_hs_hci_evt_acl_process+0x12>
        reject_cid = -1;
   2fc22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2fc26:	9303      	str	r3, [sp, #12]
        rc = BLE_HS_ENOTCONN;
   2fc28:	2607      	movs	r6, #7
   2fc2a:	e7ef      	b.n	2fc0c <ble_hs_hci_evt_acl_process+0x5c>
        rc = rx_cb(conn->bhc_rx_chan);
   2fc2c:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
   2fc30:	9b04      	ldr	r3, [sp, #16]
   2fc32:	4798      	blx	r3
        ble_l2cap_remove_rx(conn, conn->bhc_rx_chan);
   2fc34:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
   2fc38:	4640      	mov	r0, r8
   2fc3a:	f000 fdf8 	bl	3082e <ble_l2cap_remove_rx>
    return 0;
   2fc3e:	4635      	mov	r5, r6
        break;
   2fc40:	e7c2      	b.n	2fbc8 <ble_hs_hci_evt_acl_process+0x18>
            ble_l2cap_sig_reject_invalid_cid_tx(conn_handle, 0, 0, reject_cid);
   2fc42:	b29b      	uxth	r3, r3
   2fc44:	2200      	movs	r2, #0
   2fc46:	4611      	mov	r1, r2
   2fc48:	4638      	mov	r0, r7
   2fc4a:	f001 f99b 	bl	30f84 <ble_l2cap_sig_reject_invalid_cid_tx>
   2fc4e:	e7e6      	b.n	2fc1e <ble_hs_hci_evt_acl_process+0x6e>

0002fc50 <ble_hs_hci_util_handle_pb_bc_join>:
{
    BLE_HS_DBG_ASSERT(handle <= 0x0fff);
    BLE_HS_DBG_ASSERT(pb <= 0x03);
    BLE_HS_DBG_ASSERT(bc <= 0x03);

    return (handle  << 0)   |
   2fc50:	ea40 3001 	orr.w	r0, r0, r1, lsl #12
   2fc54:	b200      	sxth	r0, r0
           (pb      << 12)  |
   2fc56:	ea40 3082 	orr.w	r0, r0, r2, lsl #14
           (bc      << 14);
}
   2fc5a:	b280      	uxth	r0, r0
   2fc5c:	4770      	bx	lr
	...

0002fc60 <ble_hs_hci_util_read_adv_tx_pwr>:

int
ble_hs_hci_util_read_adv_tx_pwr(int8_t *out_tx_pwr)
{
   2fc60:	b530      	push	{r4, r5, lr}
   2fc62:	b085      	sub	sp, #20
   2fc64:	4604      	mov	r4, r0
    struct ble_hci_le_rd_adv_chan_txpwr_rp rsp;
    int rc;

    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2fc66:	2301      	movs	r3, #1
   2fc68:	9300      	str	r3, [sp, #0]
   2fc6a:	ab03      	add	r3, sp, #12
   2fc6c:	2200      	movs	r2, #0
   2fc6e:	4611      	mov	r1, r2
   2fc70:	f242 0007 	movw	r0, #8199	; 0x2007
   2fc74:	f7ff fc60 	bl	2f538 <ble_hs_hci_cmd_tx>
                                      BLE_HCI_OCF_LE_RD_ADV_CHAN_TXPWR),
                           NULL, 0, &rsp, sizeof(rsp));
    if (rc != 0) {
   2fc78:	4605      	mov	r5, r0
   2fc7a:	b930      	cbnz	r0, 2fc8a <ble_hs_hci_util_read_adv_tx_pwr+0x2a>
        return rc;
    }

    *out_tx_pwr = rsp.power_level;
   2fc7c:	f99d 300c 	ldrsb.w	r3, [sp, #12]
   2fc80:	7023      	strb	r3, [r4, #0]

    if (*out_tx_pwr < BLE_HCI_ADV_CHAN_TXPWR_MIN ||
   2fc82:	3314      	adds	r3, #20
   2fc84:	b2db      	uxtb	r3, r3
   2fc86:	2b1e      	cmp	r3, #30
   2fc88:	d802      	bhi.n	2fc90 <ble_hs_hci_util_read_adv_tx_pwr+0x30>
        *out_tx_pwr > BLE_HCI_ADV_CHAN_TXPWR_MAX) {
        BLE_HS_LOG(WARN, "advertiser txpwr out of range\n");
    }

    return 0;
}
   2fc8a:	4628      	mov	r0, r5
   2fc8c:	b005      	add	sp, #20
   2fc8e:	bd30      	pop	{r4, r5, pc}
        BLE_HS_LOG(WARN, "advertiser txpwr out of range\n");
   2fc90:	4a02      	ldr	r2, [pc, #8]	; (2fc9c <ble_hs_hci_util_read_adv_tx_pwr+0x3c>)
   2fc92:	2102      	movs	r1, #2
   2fc94:	2004      	movs	r0, #4
   2fc96:	f7ed f849 	bl	1cd2c <modlog_printf>
   2fc9a:	e7f6      	b.n	2fc8a <ble_hs_hci_util_read_adv_tx_pwr+0x2a>
   2fc9c:	00039808 	.word	0x00039808

0002fca0 <ble_hs_hci_util_read_rssi>:
    return 0;
}

int
ble_hs_hci_util_read_rssi(uint16_t conn_handle, int8_t *out_rssi)
{
   2fca0:	b530      	push	{r4, r5, lr}
   2fca2:	b085      	sub	sp, #20
   2fca4:	4604      	mov	r4, r0
   2fca6:	460d      	mov	r5, r1
    struct ble_hci_rd_rssi_cp cmd;
    struct ble_hci_rd_rssi_rp rsp;

    int rc;

    cmd.handle = htole16(conn_handle);
   2fca8:	f8ad 000c 	strh.w	r0, [sp, #12]

    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_STATUS_PARAMS,
   2fcac:	2303      	movs	r3, #3
   2fcae:	9300      	str	r3, [sp, #0]
   2fcb0:	ab02      	add	r3, sp, #8
   2fcb2:	2202      	movs	r2, #2
   2fcb4:	a903      	add	r1, sp, #12
   2fcb6:	f241 4005 	movw	r0, #5125	; 0x1405
   2fcba:	f7ff fc3d 	bl	2f538 <ble_hs_hci_cmd_tx>
                                      BLE_HCI_OCF_RD_RSSI), &cmd, sizeof(cmd),
                           &rsp, sizeof(rsp));
    if (rc != 0) {
   2fcbe:	b930      	cbnz	r0, 2fcce <ble_hs_hci_util_read_rssi+0x2e>
        return rc;
    }

    if (le16toh(rsp.handle) != conn_handle) {
   2fcc0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   2fcc4:	42a3      	cmp	r3, r4
   2fcc6:	d104      	bne.n	2fcd2 <ble_hs_hci_util_read_rssi+0x32>
        return BLE_HS_ECONTROLLER;
    }

    *out_rssi = rsp.rssi;
   2fcc8:	f99d 300a 	ldrsb.w	r3, [sp, #10]
   2fccc:	702b      	strb	r3, [r5, #0]

    return 0;
}
   2fcce:	b005      	add	sp, #20
   2fcd0:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ECONTROLLER;
   2fcd2:	200c      	movs	r0, #12
   2fcd4:	e7fb      	b.n	2fcce <ble_hs_hci_util_read_rssi+0x2e>

0002fcd6 <ble_hs_hci_util_set_random_addr>:

int
ble_hs_hci_util_set_random_addr(const uint8_t *addr)
{
   2fcd6:	b500      	push	{lr}
   2fcd8:	b085      	sub	sp, #20
   2fcda:	4603      	mov	r3, r0
    struct ble_hci_le_set_rand_addr_cp cmd;

    memcpy(cmd.addr, addr, BLE_DEV_ADDR_LEN);
   2fcdc:	6800      	ldr	r0, [r0, #0]
   2fcde:	9002      	str	r0, [sp, #8]
   2fce0:	889b      	ldrh	r3, [r3, #4]
   2fce2:	f8ad 300c 	strh.w	r3, [sp, #12]

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2fce6:	2300      	movs	r3, #0
   2fce8:	9300      	str	r3, [sp, #0]
   2fcea:	2206      	movs	r2, #6
   2fcec:	a902      	add	r1, sp, #8
   2fcee:	f242 0005 	movw	r0, #8197	; 0x2005
   2fcf2:	f7ff fc21 	bl	2f538 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_SET_RAND_ADDR),
                             &cmd, sizeof(cmd), NULL, 0);
}
   2fcf6:	b005      	add	sp, #20
   2fcf8:	f85d fb04 	ldr.w	pc, [sp], #4

0002fcfc <ble_hs_hci_util_set_data_len>:
{
    struct ble_hci_le_set_data_len_cp cmd;
    struct ble_hci_le_set_data_len_rp rsp;
    int rc;

    if (tx_octets < BLE_HCI_SET_DATALEN_TX_OCTETS_MIN ||
   2fcfc:	f1a1 031b 	sub.w	r3, r1, #27
   2fd00:	b29b      	uxth	r3, r3
   2fd02:	2be0      	cmp	r3, #224	; 0xe0
   2fd04:	d81f      	bhi.n	2fd46 <ble_hs_hci_util_set_data_len+0x4a>
{
   2fd06:	b510      	push	{r4, lr}
   2fd08:	b086      	sub	sp, #24
   2fd0a:	4604      	mov	r4, r0
        tx_octets > BLE_HCI_SET_DATALEN_TX_OCTETS_MAX) {
        return BLE_HS_EINVAL;
    }

    if (tx_time < BLE_HCI_SET_DATALEN_TX_TIME_MIN ||
   2fd0c:	f5a2 73a4 	sub.w	r3, r2, #328	; 0x148
   2fd10:	b29b      	uxth	r3, r3
   2fd12:	f244 1048 	movw	r0, #16712	; 0x4148
   2fd16:	4283      	cmp	r3, r0
   2fd18:	d817      	bhi.n	2fd4a <ble_hs_hci_util_set_data_len+0x4e>
        tx_time > BLE_HCI_SET_DATALEN_TX_TIME_MAX) {
        return BLE_HS_EINVAL;
    }

    cmd.conn_handle = htole16(conn_handle);
   2fd1a:	f8ad 4010 	strh.w	r4, [sp, #16]
    cmd.tx_octets = htole16(tx_octets);
   2fd1e:	f8ad 1012 	strh.w	r1, [sp, #18]
    cmd.tx_time = htole16(tx_time);
   2fd22:	f8ad 2014 	strh.w	r2, [sp, #20]

    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2fd26:	2302      	movs	r3, #2
   2fd28:	9300      	str	r3, [sp, #0]
   2fd2a:	ab03      	add	r3, sp, #12
   2fd2c:	2206      	movs	r2, #6
   2fd2e:	a904      	add	r1, sp, #16
   2fd30:	f242 0022 	movw	r0, #8226	; 0x2022
   2fd34:	f7ff fc00 	bl	2f538 <ble_hs_hci_cmd_tx>
                                      BLE_HCI_OCF_LE_SET_DATA_LEN),
                           &cmd, sizeof(cmd), &rsp, sizeof(rsp));
    if (rc != 0) {
   2fd38:	b940      	cbnz	r0, 2fd4c <ble_hs_hci_util_set_data_len+0x50>
        return rc;
    }

    if (le16toh(rsp.conn_handle) != conn_handle) {
   2fd3a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2fd3e:	42a3      	cmp	r3, r4
   2fd40:	d004      	beq.n	2fd4c <ble_hs_hci_util_set_data_len+0x50>
        return BLE_HS_ECONTROLLER;
   2fd42:	200c      	movs	r0, #12
   2fd44:	e002      	b.n	2fd4c <ble_hs_hci_util_set_data_len+0x50>
        return BLE_HS_EINVAL;
   2fd46:	2003      	movs	r0, #3
    }

    return 0;
}
   2fd48:	4770      	bx	lr
        return BLE_HS_EINVAL;
   2fd4a:	2003      	movs	r0, #3
}
   2fd4c:	b006      	add	sp, #24
   2fd4e:	bd10      	pop	{r4, pc}

0002fd50 <ble_hs_hci_util_data_hdr_strip>:

int
ble_hs_hci_util_data_hdr_strip(struct os_mbuf *om,
                               struct hci_data_hdr *out_hdr)
{
   2fd50:	b570      	push	{r4, r5, r6, lr}
   2fd52:	4605      	mov	r5, r0
   2fd54:	460c      	mov	r4, r1
    int rc;

    rc = os_mbuf_copydata(om, 0, BLE_HCI_DATA_HDR_SZ, out_hdr);
   2fd56:	460b      	mov	r3, r1
   2fd58:	2204      	movs	r2, #4
   2fd5a:	2100      	movs	r1, #0
   2fd5c:	f7e9 fcd8 	bl	19710 <os_mbuf_copydata>
    if (rc != 0) {
   2fd60:	b980      	cbnz	r0, 2fd84 <ble_hs_hci_util_data_hdr_strip+0x34>
   2fd62:	4606      	mov	r6, r0
        return BLE_HS_ECONTROLLER;
    }

    /* Strip HCI ACL data header from the front of the packet. */
    os_mbuf_adj(om, BLE_HCI_DATA_HDR_SZ);
   2fd64:	2104      	movs	r1, #4
   2fd66:	4628      	mov	r0, r5
   2fd68:	f7e9 fcff 	bl	1976a <os_mbuf_adj>

    out_hdr->hdh_handle_pb_bc = get_le16(&out_hdr->hdh_handle_pb_bc);
   2fd6c:	4620      	mov	r0, r4
   2fd6e:	f7e9 f86e 	bl	18e4e <get_le16>
   2fd72:	4623      	mov	r3, r4
   2fd74:	f823 0b02 	strh.w	r0, [r3], #2
    out_hdr->hdh_len = get_le16(&out_hdr->hdh_len);
   2fd78:	4618      	mov	r0, r3
   2fd7a:	f7e9 f868 	bl	18e4e <get_le16>
   2fd7e:	8060      	strh	r0, [r4, #2]

    return 0;
}
   2fd80:	4630      	mov	r0, r6
   2fd82:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   2fd84:	260c      	movs	r6, #12
   2fd86:	e7fb      	b.n	2fd80 <ble_hs_hci_util_data_hdr_strip+0x30>

0002fd88 <ble_hs_id_set_pub>:
static uint8_t ble_hs_id_pub[6];
static uint8_t ble_hs_id_rnd[6];

void
ble_hs_id_set_pub(const uint8_t *pub_addr)
{
   2fd88:	b510      	push	{r4, lr}
   2fd8a:	4604      	mov	r4, r0
    ble_hs_lock();
   2fd8c:	f7fe f900 	bl	2df90 <ble_hs_lock>
    memcpy(ble_hs_id_pub, pub_addr, 6);
   2fd90:	4b03      	ldr	r3, [pc, #12]	; (2fda0 <ble_hs_id_set_pub+0x18>)
   2fd92:	6820      	ldr	r0, [r4, #0]
   2fd94:	6018      	str	r0, [r3, #0]
   2fd96:	88a2      	ldrh	r2, [r4, #4]
   2fd98:	809a      	strh	r2, [r3, #4]
    ble_hs_unlock();
   2fd9a:	f7fe f8fd 	bl	2df98 <ble_hs_unlock>
}
   2fd9e:	bd10      	pop	{r4, pc}
   2fda0:	1000563c 	.word	0x1000563c

0002fda4 <ble_hs_id_set_rnd>:
    return 0;
}

int
ble_hs_id_set_rnd(const uint8_t *rnd_addr)
{
   2fda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fda6:	4604      	mov	r4, r0
    uint8_t addr_type_byte;
    int rc;
    int ones;

    ble_hs_lock();
   2fda8:	f7fe f8f2 	bl	2df90 <ble_hs_lock>

    /* Make sure random part of rnd_addr is not all ones or zeros. Reference:
     * Core v5.0, Vol 6, Part B, section 1.3.2.1 */
    addr_type_byte = rnd_addr[5] & 0xc0;
   2fdac:	7967      	ldrb	r7, [r4, #5]
   2fdae:	f007 06c0 	and.w	r6, r7, #192	; 0xc0

    /* count bits set to 1 in random part of address */
    ones = __builtin_popcount(rnd_addr[0]);
   2fdb2:	7820      	ldrb	r0, [r4, #0]
   2fdb4:	f7e4 faba 	bl	1432c <__popcountsi2>
   2fdb8:	4605      	mov	r5, r0
    ones += __builtin_popcount(rnd_addr[1]);
   2fdba:	7860      	ldrb	r0, [r4, #1]
   2fdbc:	f7e4 fab6 	bl	1432c <__popcountsi2>
   2fdc0:	4405      	add	r5, r0
    ones += __builtin_popcount(rnd_addr[2]);
   2fdc2:	78a0      	ldrb	r0, [r4, #2]
   2fdc4:	f7e4 fab2 	bl	1432c <__popcountsi2>
   2fdc8:	4405      	add	r5, r0
    ones += __builtin_popcount(rnd_addr[3]);
   2fdca:	78e0      	ldrb	r0, [r4, #3]
   2fdcc:	f7e4 faae 	bl	1432c <__popcountsi2>
   2fdd0:	4405      	add	r5, r0
    ones += __builtin_popcount(rnd_addr[4]);
   2fdd2:	7920      	ldrb	r0, [r4, #4]
   2fdd4:	f7e4 faaa 	bl	1432c <__popcountsi2>
   2fdd8:	4405      	add	r5, r0
    ones += __builtin_popcount(rnd_addr[5] & 0x3f);
   2fdda:	f007 003f 	and.w	r0, r7, #63	; 0x3f
   2fdde:	f7e4 faa5 	bl	1432c <__popcountsi2>
   2fde2:	4428      	add	r0, r5

    if ((addr_type_byte != 0x00 && addr_type_byte != 0xc0) ||
   2fde4:	b10e      	cbz	r6, 2fdea <ble_hs_id_set_rnd+0x46>
   2fde6:	2ec0      	cmp	r6, #192	; 0xc0
   2fde8:	d110      	bne.n	2fe0c <ble_hs_id_set_rnd+0x68>
   2fdea:	b188      	cbz	r0, 2fe10 <ble_hs_id_set_rnd+0x6c>
            (ones == 0 || ones == 46)) {
   2fdec:	282e      	cmp	r0, #46	; 0x2e
   2fdee:	d011      	beq.n	2fe14 <ble_hs_id_set_rnd+0x70>
        rc = BLE_HS_EINVAL;
        goto done;
    }

    rc = ble_hs_hci_util_set_random_addr(rnd_addr);
   2fdf0:	4620      	mov	r0, r4
   2fdf2:	f7ff ff70 	bl	2fcd6 <ble_hs_hci_util_set_random_addr>
    if (rc != 0) {
   2fdf6:	4605      	mov	r5, r0
   2fdf8:	b920      	cbnz	r0, 2fe04 <ble_hs_id_set_rnd+0x60>
        goto done;
    }

    memcpy(ble_hs_id_rnd, rnd_addr, 6);
   2fdfa:	4b07      	ldr	r3, [pc, #28]	; (2fe18 <ble_hs_id_set_rnd+0x74>)
   2fdfc:	6820      	ldr	r0, [r4, #0]
   2fdfe:	6018      	str	r0, [r3, #0]
   2fe00:	88a2      	ldrh	r2, [r4, #4]
   2fe02:	809a      	strh	r2, [r3, #4]

done:
    ble_hs_unlock();
   2fe04:	f7fe f8c8 	bl	2df98 <ble_hs_unlock>
    return rc;
}
   2fe08:	4628      	mov	r0, r5
   2fe0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = BLE_HS_EINVAL;
   2fe0c:	2503      	movs	r5, #3
   2fe0e:	e7f9      	b.n	2fe04 <ble_hs_id_set_rnd+0x60>
   2fe10:	2503      	movs	r5, #3
   2fe12:	e7f7      	b.n	2fe04 <ble_hs_id_set_rnd+0x60>
   2fe14:	2503      	movs	r5, #3
   2fe16:	e7f5      	b.n	2fe04 <ble_hs_id_set_rnd+0x60>
   2fe18:	10005644 	.word	0x10005644

0002fe1c <ble_hs_id_addr>:
 *                              Other BLE host core code on error.
 */
int
ble_hs_id_addr(uint8_t id_addr_type, const uint8_t **out_id_addr,
               int *out_is_nrpa)
{
   2fe1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fe1e:	460e      	mov	r6, r1
   2fe20:	4615      	mov	r5, r2
    const uint8_t *id_addr;
    int nrpa;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    switch (id_addr_type) {
   2fe22:	b148      	cbz	r0, 2fe38 <ble_hs_id_addr+0x1c>
   2fe24:	2801      	cmp	r0, #1
   2fe26:	d115      	bne.n	2fe54 <ble_hs_id_addr+0x38>
        nrpa = 0;
        break;

    case BLE_ADDR_RANDOM:
        id_addr = ble_hs_id_rnd;
        nrpa = (ble_hs_id_rnd[5] & 0xc0) == 0;
   2fe28:	4c0d      	ldr	r4, [pc, #52]	; (2fe60 <ble_hs_id_addr+0x44>)
   2fe2a:	7963      	ldrb	r3, [r4, #5]
   2fe2c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   2fe30:	bf0c      	ite	eq
   2fe32:	2701      	moveq	r7, #1
   2fe34:	2700      	movne	r7, #0
        break;
   2fe36:	e001      	b.n	2fe3c <ble_hs_id_addr+0x20>
    switch (id_addr_type) {
   2fe38:	2700      	movs	r7, #0
   2fe3a:	4c0a      	ldr	r4, [pc, #40]	; (2fe64 <ble_hs_id_addr+0x48>)

    default:
        return BLE_HS_EINVAL;
    }

    if (memcmp(id_addr, ble_hs_misc_null_addr, 6) == 0) {
   2fe3c:	2206      	movs	r2, #6
   2fe3e:	490a      	ldr	r1, [pc, #40]	; (2fe68 <ble_hs_id_addr+0x4c>)
   2fe40:	4620      	mov	r0, r4
   2fe42:	f7ea fee1 	bl	1ac08 <memcmp>
   2fe46:	b138      	cbz	r0, 2fe58 <ble_hs_id_addr+0x3c>
        return BLE_HS_ENOADDR;
    }

    if (out_id_addr != NULL) {
   2fe48:	b106      	cbz	r6, 2fe4c <ble_hs_id_addr+0x30>
        *out_id_addr = id_addr;
   2fe4a:	6034      	str	r4, [r6, #0]
    }
    if (out_is_nrpa != NULL) {
   2fe4c:	b135      	cbz	r5, 2fe5c <ble_hs_id_addr+0x40>
        *out_is_nrpa = nrpa;
   2fe4e:	602f      	str	r7, [r5, #0]
    }

    return 0;
   2fe50:	2000      	movs	r0, #0
   2fe52:	e000      	b.n	2fe56 <ble_hs_id_addr+0x3a>
    switch (id_addr_type) {
   2fe54:	2003      	movs	r0, #3
}
   2fe56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOADDR;
   2fe58:	2015      	movs	r0, #21
   2fe5a:	e7fc      	b.n	2fe56 <ble_hs_id_addr+0x3a>
    return 0;
   2fe5c:	2000      	movs	r0, #0
   2fe5e:	e7fa      	b.n	2fe56 <ble_hs_id_addr+0x3a>
   2fe60:	10005644 	.word	0x10005644
   2fe64:	1000563c 	.word	0x1000563c
   2fe68:	0003984c 	.word	0x0003984c

0002fe6c <ble_hs_id_addr_type_usable>:
    return rc;
}

static int
ble_hs_id_addr_type_usable(uint8_t own_addr_type)
{
   2fe6c:	b500      	push	{lr}
   2fe6e:	b083      	sub	sp, #12
    uint8_t id_addr_type;
    int nrpa;
    int rc;

    switch (own_addr_type) {
   2fe70:	2801      	cmp	r0, #1
   2fe72:	d90e      	bls.n	2fe92 <ble_hs_id_addr_type_usable+0x26>
   2fe74:	1e83      	subs	r3, r0, #2
   2fe76:	b2db      	uxtb	r3, r3
   2fe78:	2b01      	cmp	r3, #1
   2fe7a:	d80f      	bhi.n	2fe9c <ble_hs_id_addr_type_usable+0x30>
        }
        break;

    case BLE_OWN_ADDR_RPA_PUBLIC_DEFAULT:
    case BLE_OWN_ADDR_RPA_RANDOM_DEFAULT:
        id_addr_type = ble_hs_misc_own_addr_type_to_id(own_addr_type);
   2fe7c:	f000 f903 	bl	30086 <ble_hs_misc_own_addr_type_to_id>
        rc = ble_hs_id_addr(id_addr_type, NULL, &nrpa);
   2fe80:	aa01      	add	r2, sp, #4
   2fe82:	2100      	movs	r1, #0
   2fe84:	f7ff ffca 	bl	2fe1c <ble_hs_id_addr>
        if (rc != 0) {
   2fe88:	b948      	cbnz	r0, 2fe9e <ble_hs_id_addr_type_usable+0x32>
            return rc;
        }
        if (nrpa) {
   2fe8a:	9801      	ldr	r0, [sp, #4]
   2fe8c:	b138      	cbz	r0, 2fe9e <ble_hs_id_addr_type_usable+0x32>
            return BLE_HS_ENOADDR;
   2fe8e:	2015      	movs	r0, #21
   2fe90:	e005      	b.n	2fe9e <ble_hs_id_addr_type_usable+0x32>
        rc = ble_hs_id_addr(own_addr_type, NULL, NULL);
   2fe92:	2200      	movs	r2, #0
   2fe94:	4611      	mov	r1, r2
   2fe96:	f7ff ffc1 	bl	2fe1c <ble_hs_id_addr>
        if (rc != 0) {
   2fe9a:	e000      	b.n	2fe9e <ble_hs_id_addr_type_usable+0x32>
    switch (own_addr_type) {
   2fe9c:	2003      	movs	r0, #3
    default:
        return BLE_HS_EINVAL;
    }

    return 0;
}
   2fe9e:	b003      	add	sp, #12
   2fea0:	f85d fb04 	ldr.w	pc, [sp], #4

0002fea4 <ble_hs_id_copy_addr>:
{
   2fea4:	b570      	push	{r4, r5, r6, lr}
   2fea6:	b082      	sub	sp, #8
   2fea8:	4605      	mov	r5, r0
   2feaa:	460c      	mov	r4, r1
   2feac:	4616      	mov	r6, r2
    ble_hs_lock();
   2feae:	f7fe f86f 	bl	2df90 <ble_hs_lock>
    rc = ble_hs_id_addr(id_addr_type, &addr, out_is_nrpa);
   2feb2:	4632      	mov	r2, r6
   2feb4:	a901      	add	r1, sp, #4
   2feb6:	4628      	mov	r0, r5
   2feb8:	f7ff ffb0 	bl	2fe1c <ble_hs_id_addr>
    if (rc == 0 && out_id_addr != NULL) {
   2febc:	4605      	mov	r5, r0
   2febe:	b928      	cbnz	r0, 2fecc <ble_hs_id_copy_addr+0x28>
   2fec0:	b124      	cbz	r4, 2fecc <ble_hs_id_copy_addr+0x28>
        memcpy(out_id_addr, addr, 6);
   2fec2:	9b01      	ldr	r3, [sp, #4]
   2fec4:	681a      	ldr	r2, [r3, #0]
   2fec6:	6022      	str	r2, [r4, #0]
   2fec8:	889b      	ldrh	r3, [r3, #4]
   2feca:	80a3      	strh	r3, [r4, #4]
    ble_hs_unlock();
   2fecc:	f7fe f864 	bl	2df98 <ble_hs_unlock>
}
   2fed0:	4628      	mov	r0, r5
   2fed2:	b002      	add	sp, #8
   2fed4:	bd70      	pop	{r4, r5, r6, pc}

0002fed6 <ble_hs_id_use_addr>:

int
ble_hs_id_use_addr(uint8_t own_addr_type)
{
   2fed6:	b510      	push	{r4, lr}
   2fed8:	4604      	mov	r4, r0
    int rc;

    rc = ble_hs_id_addr_type_usable(own_addr_type);
   2feda:	f7ff ffc7 	bl	2fe6c <ble_hs_id_addr_type_usable>
    if (rc != 0) {
   2fede:	b918      	cbnz	r0, 2fee8 <ble_hs_id_use_addr+0x12>
        return rc;
    }

    /* If privacy is being used, make sure RPA rotation is in effect. */
    if (own_addr_type == BLE_OWN_ADDR_RPA_PUBLIC_DEFAULT ||
   2fee0:	3c02      	subs	r4, #2
   2fee2:	b2e4      	uxtb	r4, r4
   2fee4:	2c01      	cmp	r4, #1
   2fee6:	d900      	bls.n	2feea <ble_hs_id_use_addr+0x14>
            return rc;
        }
    }

    return 0;
}
   2fee8:	bd10      	pop	{r4, pc}
        rc = ble_hs_pvcy_ensure_started();
   2feea:	f000 f955 	bl	30198 <ble_hs_pvcy_ensure_started>
        if (rc != 0) {
   2feee:	e7fb      	b.n	2fee8 <ble_hs_id_use_addr+0x12>

0002fef0 <ble_hs_id_reset>:
 * when the controller loses its random address (e.g., on a stack reset).
 */
void
ble_hs_id_reset(void)
{
    memset(ble_hs_id_pub, 0, sizeof ble_hs_id_pub);
   2fef0:	4a03      	ldr	r2, [pc, #12]	; (2ff00 <ble_hs_id_reset+0x10>)
   2fef2:	2300      	movs	r3, #0
   2fef4:	6013      	str	r3, [r2, #0]
   2fef6:	8093      	strh	r3, [r2, #4]
    memset(ble_hs_id_rnd, 0, sizeof ble_hs_id_pub);
   2fef8:	4a02      	ldr	r2, [pc, #8]	; (2ff04 <ble_hs_id_reset+0x14>)
   2fefa:	6013      	str	r3, [r2, #0]
   2fefc:	8093      	strh	r3, [r2, #4]
}
   2fefe:	4770      	bx	lr
   2ff00:	1000563c 	.word	0x1000563c
   2ff04:	10005644 	.word	0x10005644

0002ff08 <ble_hs_log_mbuf>:

struct log ble_hs_log;

void
ble_hs_log_mbuf(const struct os_mbuf *om)
{
   2ff08:	b530      	push	{r4, r5, lr}
   2ff0a:	b083      	sub	sp, #12
   2ff0c:	4605      	mov	r5, r0
    uint8_t u8;
    int i;

    for (i = 0; i < OS_MBUF_PKTLEN(om); i++) {
   2ff0e:	2400      	movs	r4, #0
   2ff10:	8a2b      	ldrh	r3, [r5, #16]
   2ff12:	42a3      	cmp	r3, r4
   2ff14:	dd08      	ble.n	2ff28 <ble_hs_log_mbuf+0x20>
        os_mbuf_copydata(om, i, 1, &u8);
   2ff16:	f10d 0307 	add.w	r3, sp, #7
   2ff1a:	2201      	movs	r2, #1
   2ff1c:	4621      	mov	r1, r4
   2ff1e:	4628      	mov	r0, r5
   2ff20:	f7e9 fbf6 	bl	19710 <os_mbuf_copydata>
    for (i = 0; i < OS_MBUF_PKTLEN(om); i++) {
   2ff24:	3401      	adds	r4, #1
   2ff26:	e7f3      	b.n	2ff10 <ble_hs_log_mbuf+0x8>
        BLE_HS_LOG(DEBUG, "0x%02x ", u8);
    }
}
   2ff28:	b003      	add	sp, #12
   2ff2a:	bd30      	pop	{r4, r5, pc}

0002ff2c <ble_hs_log_flat_buf>:
{
    const uint8_t *u8ptr;
    int i;

    u8ptr = data;
    for (i = 0; i < len; i++) {
   2ff2c:	2300      	movs	r3, #0
   2ff2e:	428b      	cmp	r3, r1
   2ff30:	da01      	bge.n	2ff36 <ble_hs_log_flat_buf+0xa>
   2ff32:	3301      	adds	r3, #1
   2ff34:	e7fb      	b.n	2ff2e <ble_hs_log_flat_buf+0x2>
        BLE_HS_LOG(DEBUG, "0x%02x ", u8ptr[i]);
    }
}
   2ff36:	4770      	bx	lr

0002ff38 <ble_hs_mbuf_gen_pkt>:
/**
 * Allocates an mbuf for use by the nimble host.
 */
static struct os_mbuf *
ble_hs_mbuf_gen_pkt(uint16_t leading_space)
{
   2ff38:	b510      	push	{r4, lr}
   2ff3a:	4604      	mov	r4, r0
    struct os_mbuf *om;
    int rc;

#if MYNEWT_VAL(BLE_CONTROLLER)
    om = os_msys_get_pkthdr(0, sizeof(struct ble_mbuf_hdr));
   2ff3c:	2110      	movs	r1, #16
   2ff3e:	2000      	movs	r0, #0
   2ff40:	f7ea f85e 	bl	1a000 <os_msys_get_pkthdr>
#else
    om = os_msys_get_pkthdr(0, 0);
#endif
    if (om == NULL) {
   2ff44:	4603      	mov	r3, r0
   2ff46:	b130      	cbz	r0, 2ff56 <ble_hs_mbuf_gen_pkt+0x1e>
        return NULL;
    }

    if (om->om_omp->omp_databuf_len < leading_space) {
   2ff48:	6882      	ldr	r2, [r0, #8]
   2ff4a:	8812      	ldrh	r2, [r2, #0]
   2ff4c:	42a2      	cmp	r2, r4
   2ff4e:	d304      	bcc.n	2ff5a <ble_hs_mbuf_gen_pkt+0x22>
        rc = os_mbuf_free_chain(om);
        BLE_HS_DBG_ASSERT_EVAL(rc == 0);
        return NULL;
    }

    om->om_data += leading_space;
   2ff50:	6800      	ldr	r0, [r0, #0]
   2ff52:	4420      	add	r0, r4
   2ff54:	6018      	str	r0, [r3, #0]

    return om;
}
   2ff56:	4618      	mov	r0, r3
   2ff58:	bd10      	pop	{r4, pc}
        rc = os_mbuf_free_chain(om);
   2ff5a:	f7e9 fb38 	bl	195ce <os_mbuf_free_chain>
        return NULL;
   2ff5e:	2300      	movs	r3, #0
   2ff60:	e7f9      	b.n	2ff56 <ble_hs_mbuf_gen_pkt+0x1e>

0002ff62 <ble_hs_mbuf_bare_pkt>:
 * @return                  An empty mbuf on success; null on memory
 *                              exhaustion.
 */
struct os_mbuf *
ble_hs_mbuf_bare_pkt(void)
{
   2ff62:	b508      	push	{r3, lr}
    return ble_hs_mbuf_gen_pkt(0);
   2ff64:	2000      	movs	r0, #0
   2ff66:	f7ff ffe7 	bl	2ff38 <ble_hs_mbuf_gen_pkt>
}
   2ff6a:	bd08      	pop	{r3, pc}

0002ff6c <ble_hs_mbuf_acl_pkt>:
 * @return                  An empty mbuf on success; null on memory
 *                              exhaustion.
 */
struct os_mbuf *
ble_hs_mbuf_acl_pkt(void)
{
   2ff6c:	b508      	push	{r3, lr}
    return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ);
   2ff6e:	2004      	movs	r0, #4
   2ff70:	f7ff ffe2 	bl	2ff38 <ble_hs_mbuf_gen_pkt>
}
   2ff74:	bd08      	pop	{r3, pc}

0002ff76 <ble_hs_mbuf_l2cap_pkt>:
 * @return                  An empty mbuf on success; null on memory
 *                              exhaustion.
 */
struct os_mbuf *
ble_hs_mbuf_l2cap_pkt(void)
{
   2ff76:	b508      	push	{r3, lr}
    return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ + BLE_L2CAP_HDR_SZ);
   2ff78:	2008      	movs	r0, #8
   2ff7a:	f7ff ffdd 	bl	2ff38 <ble_hs_mbuf_gen_pkt>
}
   2ff7e:	bd08      	pop	{r3, pc}

0002ff80 <ble_hs_mbuf_att_pkt>:

struct os_mbuf *
ble_hs_mbuf_att_pkt(void)
{
   2ff80:	b508      	push	{r3, lr}
    /* Prepare write request and response are the larget ATT commands which
     * contain attribute data.
     */
     return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ +
   2ff82:	200d      	movs	r0, #13
   2ff84:	f7ff ffd8 	bl	2ff38 <ble_hs_mbuf_gen_pkt>
                                BLE_L2CAP_HDR_SZ +
                                BLE_ATT_PREP_WRITE_CMD_BASE_SZ);
}
   2ff88:	bd08      	pop	{r3, pc}

0002ff8a <ble_hs_mbuf_from_flat>:

struct os_mbuf *
ble_hs_mbuf_from_flat(const void *buf, uint16_t len)
{
   2ff8a:	b570      	push	{r4, r5, r6, lr}
   2ff8c:	4604      	mov	r4, r0
   2ff8e:	460d      	mov	r5, r1
    struct os_mbuf *om;
    int rc;

    om = ble_hs_mbuf_att_pkt();
   2ff90:	f7ff fff6 	bl	2ff80 <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
   2ff94:	4606      	mov	r6, r0
   2ff96:	b128      	cbz	r0, 2ffa4 <ble_hs_mbuf_from_flat+0x1a>
        return NULL;
    }

    rc = os_mbuf_copyinto(om, 0, buf, len);
   2ff98:	462b      	mov	r3, r5
   2ff9a:	4622      	mov	r2, r4
   2ff9c:	2100      	movs	r1, #0
   2ff9e:	f7e9 fd33 	bl	19a08 <os_mbuf_copyinto>
    if (rc != 0) {
   2ffa2:	b908      	cbnz	r0, 2ffa8 <ble_hs_mbuf_from_flat+0x1e>
        os_mbuf_free_chain(om);
        return NULL;
    }

    return om;
}
   2ffa4:	4630      	mov	r0, r6
   2ffa6:	bd70      	pop	{r4, r5, r6, pc}
        os_mbuf_free_chain(om);
   2ffa8:	4630      	mov	r0, r6
   2ffaa:	f7e9 fb10 	bl	195ce <os_mbuf_free_chain>
        return NULL;
   2ffae:	2600      	movs	r6, #0
   2ffb0:	e7f8      	b.n	2ffa4 <ble_hs_mbuf_from_flat+0x1a>

0002ffb2 <ble_hs_mbuf_to_flat>:

int
ble_hs_mbuf_to_flat(const struct os_mbuf *om, void *flat, uint16_t max_len,
                    uint16_t *out_copy_len)
{
   2ffb2:	b570      	push	{r4, r5, r6, lr}
   2ffb4:	4614      	mov	r4, r2
   2ffb6:	461e      	mov	r6, r3
    uint16_t copy_len;
    int rc;

    if (OS_MBUF_PKTLEN(om) <= max_len) {
   2ffb8:	8a05      	ldrh	r5, [r0, #16]
   2ffba:	4295      	cmp	r5, r2
   2ffbc:	d900      	bls.n	2ffc0 <ble_hs_mbuf_to_flat+0xe>
        copy_len = OS_MBUF_PKTLEN(om);
    } else {
        copy_len = max_len;
   2ffbe:	4615      	mov	r5, r2
    }

    rc = os_mbuf_copydata(om, 0, copy_len, flat);
   2ffc0:	460b      	mov	r3, r1
   2ffc2:	462a      	mov	r2, r5
   2ffc4:	2100      	movs	r1, #0
   2ffc6:	f7e9 fba3 	bl	19710 <os_mbuf_copydata>
    if (rc != 0) {
   2ffca:	b928      	cbnz	r0, 2ffd8 <ble_hs_mbuf_to_flat+0x26>
        return BLE_HS_EUNKNOWN;
    }

    if (copy_len > max_len) {
   2ffcc:	42a5      	cmp	r5, r4
   2ffce:	d900      	bls.n	2ffd2 <ble_hs_mbuf_to_flat+0x20>
        rc = BLE_HS_EMSGSIZE;
   2ffd0:	2004      	movs	r0, #4
    } else {
        rc = 0;
    }

    if (out_copy_len != NULL) {
   2ffd2:	b106      	cbz	r6, 2ffd6 <ble_hs_mbuf_to_flat+0x24>
        *out_copy_len = copy_len;
   2ffd4:	8035      	strh	r5, [r6, #0]
    }
    return rc;
}
   2ffd6:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EUNKNOWN;
   2ffd8:	2011      	movs	r0, #17
   2ffda:	e7fc      	b.n	2ffd6 <ble_hs_mbuf_to_flat+0x24>

0002ffdc <ble_hs_mbuf_pullup_base>:

int
ble_hs_mbuf_pullup_base(struct os_mbuf **om, int base_len)
{
   2ffdc:	b510      	push	{r4, lr}
   2ffde:	4604      	mov	r4, r0
    if (OS_MBUF_PKTLEN(*om) < base_len) {
   2ffe0:	6800      	ldr	r0, [r0, #0]
   2ffe2:	8a03      	ldrh	r3, [r0, #16]
   2ffe4:	428b      	cmp	r3, r1
   2ffe6:	db06      	blt.n	2fff6 <ble_hs_mbuf_pullup_base+0x1a>
        return BLE_HS_EBADDATA;
    }

    *om = os_mbuf_pullup(*om, base_len);
   2ffe8:	b289      	uxth	r1, r1
   2ffea:	f7e9 fda1 	bl	19b30 <os_mbuf_pullup>
   2ffee:	6020      	str	r0, [r4, #0]
    if (*om == NULL) {
   2fff0:	b118      	cbz	r0, 2fffa <ble_hs_mbuf_pullup_base+0x1e>
        return BLE_HS_ENOMEM;
    }

    return 0;
   2fff2:	2000      	movs	r0, #0
}
   2fff4:	bd10      	pop	{r4, pc}
        return BLE_HS_EBADDATA;
   2fff6:	200a      	movs	r0, #10
   2fff8:	e7fc      	b.n	2fff4 <ble_hs_mbuf_pullup_base+0x18>
        return BLE_HS_ENOMEM;
   2fffa:	2006      	movs	r0, #6
   2fffc:	e7fa      	b.n	2fff4 <ble_hs_mbuf_pullup_base+0x18>
	...

00030000 <ble_hs_misc_restore_one_irk>:
}

static int
ble_hs_misc_restore_one_irk(int obj_type, union ble_store_value *val,
                            void *cookie)
{
   30000:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(obj_type == BLE_STORE_OBJ_TYPE_PEER_SEC);

    sec = &val->sec;
    if (sec->irk_present) {
   30002:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
   30006:	f013 0f01 	tst.w	r3, #1
   3000a:	d101      	bne.n	30010 <ble_hs_misc_restore_one_irk+0x10>
            BLE_HS_LOG(ERROR, "failed to configure restored IRK\n");
        }
    }

    return 0;
}
   3000c:	2000      	movs	r0, #0
   3000e:	bd08      	pop	{r3, pc}
   30010:	4608      	mov	r0, r1
                                   sec->irk);
   30012:	460a      	mov	r2, r1
        rc = ble_hs_pvcy_add_entry(sec->peer_addr.val, sec->peer_addr.type,
   30014:	f812 1b29 	ldrb.w	r1, [r2], #41
   30018:	3001      	adds	r0, #1
   3001a:	f000 f931 	bl	30280 <ble_hs_pvcy_add_entry>
        if (rc != 0) {
   3001e:	2800      	cmp	r0, #0
   30020:	d0f4      	beq.n	3000c <ble_hs_misc_restore_one_irk+0xc>
            BLE_HS_LOG(ERROR, "failed to configure restored IRK\n");
   30022:	4a03      	ldr	r2, [pc, #12]	; (30030 <ble_hs_misc_restore_one_irk+0x30>)
   30024:	2103      	movs	r1, #3
   30026:	2004      	movs	r0, #4
   30028:	f7ec fe80 	bl	1cd2c <modlog_printf>
   3002c:	e7ee      	b.n	3000c <ble_hs_misc_restore_one_irk+0xc>
   3002e:	bf00      	nop
   30030:	00039828 	.word	0x00039828

00030034 <ble_hs_misc_conn_chan_find>:
{
   30034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30036:	460e      	mov	r6, r1
   30038:	4615      	mov	r5, r2
   3003a:	461c      	mov	r4, r3
    conn = ble_hs_conn_find(conn_handle);
   3003c:	f7ff f82c 	bl	2f098 <ble_hs_conn_find>
    if (conn == NULL) {
   30040:	4607      	mov	r7, r0
   30042:	b160      	cbz	r0, 3005e <ble_hs_misc_conn_chan_find+0x2a>
        chan = ble_hs_conn_chan_find_by_scid(conn, cid);
   30044:	4631      	mov	r1, r6
   30046:	f7fe ff61 	bl	2ef0c <ble_hs_conn_chan_find_by_scid>
        if (chan == NULL) {
   3004a:	4603      	mov	r3, r0
   3004c:	b128      	cbz	r0, 3005a <ble_hs_misc_conn_chan_find+0x26>
            rc = 0;
   3004e:	2000      	movs	r0, #0
    if (out_conn != NULL) {
   30050:	b105      	cbz	r5, 30054 <ble_hs_misc_conn_chan_find+0x20>
        *out_conn = conn;
   30052:	602f      	str	r7, [r5, #0]
    if (out_chan != NULL) {
   30054:	b104      	cbz	r4, 30058 <ble_hs_misc_conn_chan_find+0x24>
        *out_chan = chan;
   30056:	6023      	str	r3, [r4, #0]
}
   30058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rc = BLE_HS_ENOTCONN;
   3005a:	2007      	movs	r0, #7
   3005c:	e7f8      	b.n	30050 <ble_hs_misc_conn_chan_find+0x1c>
        chan = NULL;
   3005e:	4603      	mov	r3, r0
        rc = BLE_HS_ENOTCONN;
   30060:	2007      	movs	r0, #7
   30062:	e7f5      	b.n	30050 <ble_hs_misc_conn_chan_find+0x1c>

00030064 <ble_hs_misc_conn_chan_find_reqd>:
{
   30064:	b530      	push	{r4, r5, lr}
   30066:	b083      	sub	sp, #12
   30068:	4615      	mov	r5, r2
   3006a:	461c      	mov	r4, r3
    rc = ble_hs_misc_conn_chan_find(conn_handle, cid, &conn, &chan);
   3006c:	ab01      	add	r3, sp, #4
   3006e:	466a      	mov	r2, sp
   30070:	f7ff ffe0 	bl	30034 <ble_hs_misc_conn_chan_find>
    if (rc != 0) {
   30074:	b928      	cbnz	r0, 30082 <ble_hs_misc_conn_chan_find_reqd+0x1e>
    if (out_conn != NULL) {
   30076:	b10d      	cbz	r5, 3007c <ble_hs_misc_conn_chan_find_reqd+0x18>
        *out_conn = conn;
   30078:	9b00      	ldr	r3, [sp, #0]
   3007a:	602b      	str	r3, [r5, #0]
    if (out_chan != NULL) {
   3007c:	b10c      	cbz	r4, 30082 <ble_hs_misc_conn_chan_find_reqd+0x1e>
        *out_chan = chan;
   3007e:	9b01      	ldr	r3, [sp, #4]
   30080:	6023      	str	r3, [r4, #0]
}
   30082:	b003      	add	sp, #12
   30084:	bd30      	pop	{r4, r5, pc}

00030086 <ble_hs_misc_own_addr_type_to_id>:
    switch (own_addr_type) {
   30086:	2801      	cmp	r0, #1
   30088:	d002      	beq.n	30090 <ble_hs_misc_own_addr_type_to_id+0xa>
   3008a:	2803      	cmp	r0, #3
   3008c:	d001      	beq.n	30092 <ble_hs_misc_own_addr_type_to_id+0xc>
   3008e:	2000      	movs	r0, #0
}
   30090:	4770      	bx	lr
         return BLE_ADDR_RANDOM;
   30092:	2001      	movs	r0, #1
   30094:	4770      	bx	lr

00030096 <ble_hs_misc_peer_addr_type_to_id>:
    switch (peer_addr_type) {
   30096:	2801      	cmp	r0, #1
   30098:	d002      	beq.n	300a0 <ble_hs_misc_peer_addr_type_to_id+0xa>
   3009a:	2803      	cmp	r0, #3
   3009c:	d001      	beq.n	300a2 <ble_hs_misc_peer_addr_type_to_id+0xc>
   3009e:	2000      	movs	r0, #0
}
   300a0:	4770      	bx	lr
            return BLE_ADDR_RANDOM;
   300a2:	2001      	movs	r0, #1
   300a4:	4770      	bx	lr
	...

000300a8 <ble_hs_misc_restore_irks>:

int
ble_hs_misc_restore_irks(void)
{
   300a8:	b508      	push	{r3, lr}
    int rc;

    rc = ble_store_iterate(BLE_STORE_OBJ_TYPE_PEER_SEC,
   300aa:	2200      	movs	r2, #0
   300ac:	4902      	ldr	r1, [pc, #8]	; (300b8 <ble_hs_misc_restore_irks+0x10>)
   300ae:	2002      	movs	r0, #2
   300b0:	f001 f8ae 	bl	31210 <ble_store_iterate>
                           ble_hs_misc_restore_one_irk,
                           NULL);
    return rc;
}
   300b4:	bd08      	pop	{r3, pc}
   300b6:	bf00      	nop
   300b8:	00030001 	.word	0x00030001

000300bc <ble_mqueue_init>:

#include "ble_hs_priv.h"

int
ble_mqueue_init(struct ble_mqueue *mq, ble_npl_event_fn *ev_fn, void *ev_arg)
{
   300bc:	4603      	mov	r3, r0
    STAILQ_INIT(&mq->head);
   300be:	2000      	movs	r0, #0
   300c0:	6018      	str	r0, [r3, #0]
   300c2:	605b      	str	r3, [r3, #4]
    memset(ev, 0, sizeof(*ev));
   300c4:	6098      	str	r0, [r3, #8]
   300c6:	6158      	str	r0, [r3, #20]
    ev->ev.ev_queued = 0;
   300c8:	7218      	strb	r0, [r3, #8]
    ev->ev.ev_cb = (os_event_fn *)fn;
   300ca:	60d9      	str	r1, [r3, #12]
    ev->ev.ev_arg = arg;
   300cc:	611a      	str	r2, [r3, #16]

    ble_npl_event_init(&mq->ev, ev_fn, ev_arg);

    return (0);
}
   300ce:	4770      	bx	lr

000300d0 <ble_mqueue_get>:

struct os_mbuf *
ble_mqueue_get(struct ble_mqueue *mq)
{
   300d0:	b538      	push	{r3, r4, r5, lr}
   300d2:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *om;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   300d4:	f7ea fbe8 	bl	1a8a8 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->head);
   300d8:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   300da:	b114      	cbz	r4, 300e2 <ble_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->head, omp_next);
   300dc:	6863      	ldr	r3, [r4, #4]
   300de:	602b      	str	r3, [r5, #0]
   300e0:	b12b      	cbz	r3, 300ee <ble_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   300e2:	f7ea fbe7 	bl	1a8b4 <os_arch_restore_sr>

    if (mp) {
   300e6:	b104      	cbz	r4, 300ea <ble_mqueue_get+0x1a>
        om = OS_MBUF_PKTHDR_TO_MBUF(mp);
   300e8:	3c10      	subs	r4, #16
    } else {
        om = NULL;
    }

    return (om);
}
   300ea:	4620      	mov	r0, r4
   300ec:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->head, omp_next);
   300ee:	606d      	str	r5, [r5, #4]
   300f0:	e7f7      	b.n	300e2 <ble_mqueue_get+0x12>

000300f2 <ble_mqueue_put>:

int
ble_mqueue_put(struct ble_mqueue *mq, struct ble_npl_eventq *evq, struct os_mbuf *om)
{
   300f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(om)) {
   300f4:	7953      	ldrb	r3, [r2, #5]
   300f6:	2b07      	cmp	r3, #7
   300f8:	d916      	bls.n	30128 <ble_mqueue_put+0x36>
   300fa:	4605      	mov	r5, r0
   300fc:	460e      	mov	r6, r1
   300fe:	4614      	mov	r4, r2
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(om);
   30100:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   30104:	f7ea fbd0 	bl	1a8a8 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->head, mp, omp_next);
   30108:	2300      	movs	r3, #0
   3010a:	f844 3f14 	str.w	r3, [r4, #20]!
   3010e:	686b      	ldr	r3, [r5, #4]
   30110:	601f      	str	r7, [r3, #0]
   30112:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   30114:	f7ea fbce 	bl	1a8b4 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   30118:	b146      	cbz	r6, 3012c <ble_mqueue_put+0x3a>
    os_eventq_put(&evq->evq, &ev->ev);
   3011a:	f105 0108 	add.w	r1, r5, #8
   3011e:	4630      	mov	r0, r6
   30120:	f7e9 f959 	bl	193d6 <os_eventq_put>
        ble_npl_eventq_put(evq, &mq->ev);
    }

    return (0);
   30124:	2000      	movs	r0, #0
}
   30126:	e000      	b.n	3012a <ble_mqueue_put+0x38>
err:
    return (rc);
   30128:	2002      	movs	r0, #2
}
   3012a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   3012c:	2000      	movs	r0, #0
   3012e:	e7fc      	b.n	3012a <ble_mqueue_put+0x38>

00030130 <ble_hs_pvcy_set_addr_timeout>:
static int
ble_hs_pvcy_set_addr_timeout(uint16_t timeout)
{
    struct ble_hci_le_set_rpa_tmo_cp cmd;

    if (timeout == 0 || timeout > 0xA1B8) {
   30130:	1e43      	subs	r3, r0, #1
   30132:	b29b      	uxth	r3, r3
   30134:	f24a 12b7 	movw	r2, #41399	; 0xa1b7
   30138:	4293      	cmp	r3, r2
   3013a:	d80e      	bhi.n	3015a <ble_hs_pvcy_set_addr_timeout+0x2a>
{
   3013c:	b500      	push	{lr}
   3013e:	b085      	sub	sp, #20
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    cmd.rpa_timeout = htole16(timeout);
   30140:	f8ad 000c 	strh.w	r0, [sp, #12]

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   30144:	2300      	movs	r3, #0
   30146:	9300      	str	r3, [sp, #0]
   30148:	2202      	movs	r2, #2
   3014a:	a903      	add	r1, sp, #12
   3014c:	f242 002e 	movw	r0, #8238	; 0x202e
   30150:	f7ff f9f2 	bl	2f538 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_SET_RPA_TMO),
                             &cmd, sizeof(cmd), NULL, 0);
}
   30154:	b005      	add	sp, #20
   30156:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_ERR_INV_HCI_CMD_PARMS;
   3015a:	2012      	movs	r0, #18
}
   3015c:	4770      	bx	lr

0003015e <ble_hs_pvcy_clear_entries>:
                             &cmd, sizeof(cmd), NULL, 0);
}

static int
ble_hs_pvcy_clear_entries(void)
{
   3015e:	b500      	push	{lr}
   30160:	b083      	sub	sp, #12
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   30162:	2100      	movs	r1, #0
   30164:	9100      	str	r1, [sp, #0]
   30166:	460b      	mov	r3, r1
   30168:	460a      	mov	r2, r1
   3016a:	f242 0029 	movw	r0, #8233	; 0x2029
   3016e:	f7ff f9e3 	bl	2f538 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_CLR_RESOLV_LIST),
                             NULL, 0, NULL, 0);
}
   30172:	b003      	add	sp, #12
   30174:	f85d fb04 	ldr.w	pc, [sp], #4

00030178 <ble_hs_pvcy_set_resolve_enabled>:
{
   30178:	b500      	push	{lr}
   3017a:	b085      	sub	sp, #20
    cmd.enable = enable;
   3017c:	f88d 000c 	strb.w	r0, [sp, #12]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   30180:	2300      	movs	r3, #0
   30182:	9300      	str	r3, [sp, #0]
   30184:	2201      	movs	r2, #1
   30186:	a903      	add	r1, sp, #12
   30188:	f242 002d 	movw	r0, #8237	; 0x202d
   3018c:	f7ff f9d4 	bl	2f538 <ble_hs_hci_cmd_tx>
}
   30190:	b005      	add	sp, #20
   30192:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00030198 <ble_hs_pvcy_ensure_started>:
    return rc;
}

int
ble_hs_pvcy_ensure_started(void)
{
   30198:	b508      	push	{r3, lr}
    int rc;

    if (ble_hs_pvcy_started) {
   3019a:	4b07      	ldr	r3, [pc, #28]	; (301b8 <ble_hs_pvcy_ensure_started+0x20>)
   3019c:	781b      	ldrb	r3, [r3, #0]
   3019e:	b10b      	cbz	r3, 301a4 <ble_hs_pvcy_ensure_started+0xc>
        return 0;
   301a0:	2000      	movs	r0, #0
    }

    ble_hs_pvcy_started = 1;

    return 0;
}
   301a2:	bd08      	pop	{r3, pc}
    rc = ble_hs_pvcy_set_addr_timeout(MYNEWT_VAL(BLE_RPA_TIMEOUT));
   301a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
   301a8:	f7ff ffc2 	bl	30130 <ble_hs_pvcy_set_addr_timeout>
    if (rc != 0) {
   301ac:	2800      	cmp	r0, #0
   301ae:	d1f8      	bne.n	301a2 <ble_hs_pvcy_ensure_started+0xa>
    ble_hs_pvcy_started = 1;
   301b0:	4b01      	ldr	r3, [pc, #4]	; (301b8 <ble_hs_pvcy_ensure_started+0x20>)
   301b2:	2201      	movs	r2, #1
   301b4:	701a      	strb	r2, [r3, #0]
    return 0;
   301b6:	e7f4      	b.n	301a2 <ble_hs_pvcy_ensure_started+0xa>
   301b8:	1000565c 	.word	0x1000565c

000301bc <ble_hs_pvcy_set_mode>:
int
ble_hs_pvcy_set_mode(const ble_addr_t *addr, uint8_t priv_mode)
{
    struct ble_hci_le_set_privacy_mode_cp cmd;

    if (addr->type > BLE_ADDR_RANDOM) {
   301bc:	7803      	ldrb	r3, [r0, #0]
   301be:	2b01      	cmp	r3, #1
   301c0:	d819      	bhi.n	301f6 <ble_hs_pvcy_set_mode+0x3a>
{
   301c2:	b500      	push	{lr}
   301c4:	b085      	sub	sp, #20
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    cmd.mode = priv_mode;
   301c6:	f88d 100f 	strb.w	r1, [sp, #15]
    cmd.peer_id_addr_type = addr->type;
   301ca:	7803      	ldrb	r3, [r0, #0]
   301cc:	f88d 3008 	strb.w	r3, [sp, #8]
    memcpy(cmd.peer_id_addr, addr->val, BLE_DEV_ADDR_LEN);
   301d0:	f850 3f01 	ldr.w	r3, [r0, #1]!
   301d4:	f8cd 3009 	str.w	r3, [sp, #9]
   301d8:	8883      	ldrh	r3, [r0, #4]
   301da:	f8ad 300d 	strh.w	r3, [sp, #13]

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   301de:	2300      	movs	r3, #0
   301e0:	9300      	str	r3, [sp, #0]
   301e2:	2208      	movs	r2, #8
   301e4:	eb0d 0102 	add.w	r1, sp, r2
   301e8:	f242 004e 	movw	r0, #8270	; 0x204e
   301ec:	f7ff f9a4 	bl	2f538 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_SET_PRIVACY_MODE),
                             &cmd, sizeof(cmd), NULL, 0);
}
   301f0:	b005      	add	sp, #20
   301f2:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_ERR_INV_HCI_CMD_PARMS;
   301f6:	2012      	movs	r0, #18
}
   301f8:	4770      	bx	lr
	...

000301fc <ble_hs_pvcy_add_entry_hci>:
    if (addr_type > BLE_ADDR_RANDOM) {
   301fc:	2901      	cmp	r1, #1
   301fe:	d83a      	bhi.n	30276 <ble_hs_pvcy_add_entry_hci+0x7a>
{
   30200:	b5f0      	push	{r4, r5, r6, r7, lr}
   30202:	b08f      	sub	sp, #60	; 0x3c
   30204:	4607      	mov	r7, r0
   30206:	460d      	mov	r5, r1
   30208:	4614      	mov	r4, r2
    cmd.peer_addr_type = addr_type;
   3020a:	f88d 1010 	strb.w	r1, [sp, #16]
    memcpy(cmd.peer_id_addr, addr, 6);
   3020e:	6803      	ldr	r3, [r0, #0]
   30210:	f8cd 3011 	str.w	r3, [sp, #17]
   30214:	8883      	ldrh	r3, [r0, #4]
   30216:	f8ad 3015 	strh.w	r3, [sp, #21]
    memcpy(cmd.local_irk, ble_hs_pvcy_irk, 16);
   3021a:	4e18      	ldr	r6, [pc, #96]	; (3027c <ble_hs_pvcy_add_entry_hci+0x80>)
   3021c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   3021e:	f8cd 0027 	str.w	r0, [sp, #39]	; 0x27
   30222:	f8cd 102b 	str.w	r1, [sp, #43]	; 0x2b
   30226:	f8cd 202f 	str.w	r2, [sp, #47]	; 0x2f
   3022a:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    memcpy(cmd.peer_irk, irk, 16);
   3022e:	6820      	ldr	r0, [r4, #0]
   30230:	6861      	ldr	r1, [r4, #4]
   30232:	68a2      	ldr	r2, [r4, #8]
   30234:	68e3      	ldr	r3, [r4, #12]
   30236:	f8cd 0017 	str.w	r0, [sp, #23]
   3023a:	f8cd 101b 	str.w	r1, [sp, #27]
   3023e:	f8cd 201f 	str.w	r2, [sp, #31]
   30242:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   30246:	2300      	movs	r3, #0
   30248:	9300      	str	r3, [sp, #0]
   3024a:	2227      	movs	r2, #39	; 0x27
   3024c:	a904      	add	r1, sp, #16
   3024e:	f242 0027 	movw	r0, #8231	; 0x2027
   30252:	f7ff f971 	bl	2f538 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   30256:	b108      	cbz	r0, 3025c <ble_hs_pvcy_add_entry_hci+0x60>
}
   30258:	b00f      	add	sp, #60	; 0x3c
   3025a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    peer_addr.type = addr_type;
   3025c:	f88d 5008 	strb.w	r5, [sp, #8]
    memcpy(peer_addr.val, addr, sizeof peer_addr.val);
   30260:	683b      	ldr	r3, [r7, #0]
   30262:	f8cd 3009 	str.w	r3, [sp, #9]
   30266:	88bb      	ldrh	r3, [r7, #4]
   30268:	f8ad 300d 	strh.w	r3, [sp, #13]
    rc = ble_hs_pvcy_set_mode(&peer_addr, BLE_GAP_PRIVATE_MODE_DEVICE);
   3026c:	2101      	movs	r1, #1
   3026e:	a802      	add	r0, sp, #8
   30270:	f7ff ffa4 	bl	301bc <ble_hs_pvcy_set_mode>
    if (rc != 0) {
   30274:	e7f0      	b.n	30258 <ble_hs_pvcy_add_entry_hci+0x5c>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   30276:	2012      	movs	r0, #18
}
   30278:	4770      	bx	lr
   3027a:	bf00      	nop
   3027c:	1000564c 	.word	0x1000564c

00030280 <ble_hs_pvcy_add_entry>:
{
   30280:	b570      	push	{r4, r5, r6, lr}
   30282:	4604      	mov	r4, r0
   30284:	460d      	mov	r5, r1
   30286:	4616      	mov	r6, r2
    STATS_INC(ble_hs_stats, pvcy_add_entry);
   30288:	4a0a      	ldr	r2, [pc, #40]	; (302b4 <ble_hs_pvcy_add_entry+0x34>)
   3028a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   3028c:	3301      	adds	r3, #1
   3028e:	6313      	str	r3, [r2, #48]	; 0x30
    ble_gap_preempt();
   30290:	f7fa faac 	bl	2a7ec <ble_gap_preempt>
    rc = ble_hs_pvcy_add_entry_hci(addr, addr_type, irk);
   30294:	4632      	mov	r2, r6
   30296:	4629      	mov	r1, r5
   30298:	4620      	mov	r0, r4
   3029a:	f7ff ffaf 	bl	301fc <ble_hs_pvcy_add_entry_hci>
   3029e:	4604      	mov	r4, r0
    ble_gap_preempt_done();
   302a0:	f7fa fab0 	bl	2a804 <ble_gap_preempt_done>
    if (rc != 0) {
   302a4:	b11c      	cbz	r4, 302ae <ble_hs_pvcy_add_entry+0x2e>
        STATS_INC(ble_hs_stats, pvcy_add_entry_fail);
   302a6:	4a03      	ldr	r2, [pc, #12]	; (302b4 <ble_hs_pvcy_add_entry+0x34>)
   302a8:	6b53      	ldr	r3, [r2, #52]	; 0x34
   302aa:	3301      	adds	r3, #1
   302ac:	6353      	str	r3, [r2, #52]	; 0x34
}
   302ae:	4620      	mov	r0, r4
   302b0:	bd70      	pop	{r4, r5, r6, pc}
   302b2:	bf00      	nop
   302b4:	10005360 	.word	0x10005360

000302b8 <ble_hs_pvcy_set_our_irk>:
{
   302b8:	b510      	push	{r4, lr}
   302ba:	b086      	sub	sp, #24
    if (irk != NULL) {
   302bc:	b170      	cbz	r0, 302dc <ble_hs_pvcy_set_our_irk+0x24>
   302be:	4603      	mov	r3, r0
        memcpy(new_irk, irk, 16);
   302c0:	466c      	mov	r4, sp
   302c2:	6800      	ldr	r0, [r0, #0]
   302c4:	6859      	ldr	r1, [r3, #4]
   302c6:	689a      	ldr	r2, [r3, #8]
   302c8:	68db      	ldr	r3, [r3, #12]
   302ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    if (memcmp(ble_hs_pvcy_irk, new_irk, 16) != 0) {
   302cc:	2210      	movs	r2, #16
   302ce:	4669      	mov	r1, sp
   302d0:	4815      	ldr	r0, [pc, #84]	; (30328 <ble_hs_pvcy_set_our_irk+0x70>)
   302d2:	f7ea fc99 	bl	1ac08 <memcmp>
   302d6:	b938      	cbnz	r0, 302e8 <ble_hs_pvcy_set_our_irk+0x30>
}
   302d8:	b006      	add	sp, #24
   302da:	bd10      	pop	{r4, pc}
        memcpy(new_irk, ble_hs_pvcy_default_irk, 16);
   302dc:	4b13      	ldr	r3, [pc, #76]	; (3032c <ble_hs_pvcy_set_our_irk+0x74>)
   302de:	466c      	mov	r4, sp
   302e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   302e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   302e6:	e7f1      	b.n	302cc <ble_hs_pvcy_set_our_irk+0x14>
        memcpy(ble_hs_pvcy_irk, new_irk, 16);
   302e8:	4c0f      	ldr	r4, [pc, #60]	; (30328 <ble_hs_pvcy_set_our_irk+0x70>)
   302ea:	466b      	mov	r3, sp
   302ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   302ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        rc = ble_hs_pvcy_set_resolve_enabled(0);
   302f2:	2000      	movs	r0, #0
   302f4:	f7ff ff40 	bl	30178 <ble_hs_pvcy_set_resolve_enabled>
        if (rc != 0) {
   302f8:	2800      	cmp	r0, #0
   302fa:	d1ed      	bne.n	302d8 <ble_hs_pvcy_set_our_irk+0x20>
        rc = ble_hs_pvcy_clear_entries();
   302fc:	f7ff ff2f 	bl	3015e <ble_hs_pvcy_clear_entries>
        if (rc != 0) {
   30300:	2800      	cmp	r0, #0
   30302:	d1e9      	bne.n	302d8 <ble_hs_pvcy_set_our_irk+0x20>
        rc = ble_hs_pvcy_set_resolve_enabled(1);
   30304:	2001      	movs	r0, #1
   30306:	f7ff ff37 	bl	30178 <ble_hs_pvcy_set_resolve_enabled>
        if (rc != 0) {
   3030a:	2800      	cmp	r0, #0
   3030c:	d1e4      	bne.n	302d8 <ble_hs_pvcy_set_our_irk+0x20>
        memset(tmp_addr, 0, 6);
   3030e:	2100      	movs	r1, #0
   30310:	9104      	str	r1, [sp, #16]
   30312:	f8ad 1014 	strh.w	r1, [sp, #20]
        memset(new_irk, 0, 16);
   30316:	9100      	str	r1, [sp, #0]
   30318:	9101      	str	r1, [sp, #4]
   3031a:	9102      	str	r1, [sp, #8]
   3031c:	9103      	str	r1, [sp, #12]
        rc = ble_hs_pvcy_add_entry(tmp_addr, 0, new_irk);
   3031e:	466a      	mov	r2, sp
   30320:	a804      	add	r0, sp, #16
   30322:	f7ff ffad 	bl	30280 <ble_hs_pvcy_add_entry>
        if (rc != 0) {
   30326:	e7d7      	b.n	302d8 <ble_hs_pvcy_set_our_irk+0x20>
   30328:	1000564c 	.word	0x1000564c
   3032c:	00039854 	.word	0x00039854

00030330 <ble_hs_startup_reset_tx>:
    return 0;
}

static int
ble_hs_startup_reset_tx(void)
{
   30330:	b500      	push	{lr}
   30332:	b083      	sub	sp, #12
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   30334:	2100      	movs	r1, #0
   30336:	9100      	str	r1, [sp, #0]
   30338:	460b      	mov	r3, r1
   3033a:	460a      	mov	r2, r1
   3033c:	f640 4003 	movw	r0, #3075	; 0xc03
   30340:	f7ff f8fa 	bl	2f538 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_CB_RESET),
                             NULL, 0, NULL, 0);
}
   30344:	b003      	add	sp, #12
   30346:	f85d fb04 	ldr.w	pc, [sp], #4

0003034a <ble_hs_startup_le_read_buf_sz_tx>:
{
   3034a:	b530      	push	{r4, r5, lr}
   3034c:	b085      	sub	sp, #20
   3034e:	4605      	mov	r5, r0
   30350:	460c      	mov	r4, r1
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   30352:	2303      	movs	r3, #3
   30354:	9300      	str	r3, [sp, #0]
   30356:	ab03      	add	r3, sp, #12
   30358:	2200      	movs	r2, #0
   3035a:	4611      	mov	r1, r2
   3035c:	f242 0002 	movw	r0, #8194	; 0x2002
   30360:	f7ff f8ea 	bl	2f538 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   30364:	b928      	cbnz	r0, 30372 <ble_hs_startup_le_read_buf_sz_tx+0x28>
    *out_pktlen = le16toh(rsp.data_len);
   30366:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   3036a:	802b      	strh	r3, [r5, #0]
    *out_max_pkts = rsp.data_packets;
   3036c:	f89d 300e 	ldrb.w	r3, [sp, #14]
   30370:	7023      	strb	r3, [r4, #0]
}
   30372:	b005      	add	sp, #20
   30374:	bd30      	pop	{r4, r5, pc}

00030376 <ble_hs_startup_read_buf_sz_tx>:
{
   30376:	b530      	push	{r4, r5, lr}
   30378:	b085      	sub	sp, #20
   3037a:	4605      	mov	r5, r0
   3037c:	460c      	mov	r4, r1
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   3037e:	2307      	movs	r3, #7
   30380:	9300      	str	r3, [sp, #0]
   30382:	ab02      	add	r3, sp, #8
   30384:	2200      	movs	r2, #0
   30386:	4611      	mov	r1, r2
   30388:	f241 0005 	movw	r0, #4101	; 0x1005
   3038c:	f7ff f8d4 	bl	2f538 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   30390:	b928      	cbnz	r0, 3039e <ble_hs_startup_read_buf_sz_tx+0x28>
    *out_pktlen = le16toh(rsp.acl_data_len);
   30392:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   30396:	802b      	strh	r3, [r5, #0]
    *out_max_pkts = le16toh(rsp.acl_num);
   30398:	f8bd 300b 	ldrh.w	r3, [sp, #11]
   3039c:	8023      	strh	r3, [r4, #0]
}
   3039e:	b005      	add	sp, #20
   303a0:	bd30      	pop	{r4, r5, pc}

000303a2 <ble_hs_startup_read_local_ver_tx>:
{
   303a2:	b510      	push	{r4, lr}
   303a4:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   303a6:	2308      	movs	r3, #8
   303a8:	9300      	str	r3, [sp, #0]
   303aa:	446b      	add	r3, sp
   303ac:	2200      	movs	r2, #0
   303ae:	4611      	mov	r1, r2
   303b0:	f241 0001 	movw	r0, #4097	; 0x1001
   303b4:	f7ff f8c0 	bl	2f538 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   303b8:	4604      	mov	r4, r0
   303ba:	b110      	cbz	r0, 303c2 <ble_hs_startup_read_local_ver_tx+0x20>
}
   303bc:	4620      	mov	r0, r4
   303be:	b004      	add	sp, #16
   303c0:	bd10      	pop	{r4, pc}
    ble_hs_hci_set_hci_version(rsp.hci_ver);
   303c2:	f89d 0008 	ldrb.w	r0, [sp, #8]
   303c6:	f7ff f977 	bl	2f6b8 <ble_hs_hci_set_hci_version>
    return 0;
   303ca:	e7f7      	b.n	303bc <ble_hs_startup_read_local_ver_tx+0x1a>
   303cc:	0000      	movs	r0, r0
	...

000303d0 <ble_hs_startup_set_evmask_tx>:
{
   303d0:	b510      	push	{r4, lr}
   303d2:	b086      	sub	sp, #24
    version = ble_hs_hci_get_hci_version();
   303d4:	f7ff f976 	bl	2f6c4 <ble_hs_hci_get_hci_version>
   303d8:	4604      	mov	r4, r0
    cmd.event_mask = htole64(0x2000800002008090);
   303da:	a311      	add	r3, pc, #68	; (adr r3, 30420 <ble_hs_startup_set_evmask_tx+0x50>)
   303dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   303e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   303e4:	2300      	movs	r3, #0
   303e6:	9300      	str	r3, [sp, #0]
   303e8:	2208      	movs	r2, #8
   303ea:	a904      	add	r1, sp, #16
   303ec:	f640 4001 	movw	r0, #3073	; 0xc01
   303f0:	f7ff f8a2 	bl	2f538 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   303f4:	b908      	cbnz	r0, 303fa <ble_hs_startup_set_evmask_tx+0x2a>
    if (version >= BLE_HCI_VER_BCS_4_1) {
   303f6:	2c06      	cmp	r4, #6
   303f8:	d801      	bhi.n	303fe <ble_hs_startup_set_evmask_tx+0x2e>
}
   303fa:	b006      	add	sp, #24
   303fc:	bd10      	pop	{r4, pc}
        cmd2.event_mask2 = htole64(0x0000000000800000);
   303fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   30402:	2300      	movs	r3, #0
   30404:	e9cd 2302 	strd	r2, r3, [sp, #8]
        rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   30408:	2300      	movs	r3, #0
   3040a:	9300      	str	r3, [sp, #0]
   3040c:	2208      	movs	r2, #8
   3040e:	eb0d 0102 	add.w	r1, sp, r2
   30412:	f640 4063 	movw	r0, #3171	; 0xc63
   30416:	f7ff f88f 	bl	2f538 <ble_hs_hci_cmd_tx>
        if (rc != 0) {
   3041a:	e7ee      	b.n	303fa <ble_hs_startup_set_evmask_tx+0x2a>
   3041c:	f3af 8000 	nop.w
   30420:	02008090 	.word	0x02008090
   30424:	20008000 	.word	0x20008000

00030428 <ble_hs_startup_le_set_evmask_tx>:
{
   30428:	b500      	push	{lr}
   3042a:	b085      	sub	sp, #20
    version = ble_hs_hci_get_hci_version();
   3042c:	f7ff f94a 	bl	2f6c4 <ble_hs_hci_get_hci_version>
    if (version >= BLE_HCI_VER_BCS_4_1) {
   30430:	2806      	cmp	r0, #6
   30432:	d819      	bhi.n	30468 <ble_hs_startup_le_set_evmask_tx+0x40>
    mask = 0x000000000000001f;
   30434:	231f      	movs	r3, #31
   30436:	2200      	movs	r2, #0
    if (version >= BLE_HCI_VER_BCS_4_2) {
   30438:	2807      	cmp	r0, #7
   3043a:	d901      	bls.n	30440 <ble_hs_startup_le_set_evmask_tx+0x18>
        mask |= 0x0000000000000640;
   3043c:	f443 63c8 	orr.w	r3, r3, #1600	; 0x640
    if (version >= BLE_HCI_VER_BCS_5_0) {
   30440:	2808      	cmp	r0, #8
   30442:	d903      	bls.n	3044c <ble_hs_startup_le_set_evmask_tx+0x24>
        mask |= 0x00000000000ff800;
   30444:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
   30448:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    cmd.event_mask = htole64(mask);
   3044c:	9302      	str	r3, [sp, #8]
   3044e:	9203      	str	r2, [sp, #12]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   30450:	2300      	movs	r3, #0
   30452:	9300      	str	r3, [sp, #0]
   30454:	2208      	movs	r2, #8
   30456:	eb0d 0102 	add.w	r1, sp, r2
   3045a:	f242 0001 	movw	r0, #8193	; 0x2001
   3045e:	f7ff f86b 	bl	2f538 <ble_hs_hci_cmd_tx>
}
   30462:	b005      	add	sp, #20
   30464:	f85d fb04 	ldr.w	pc, [sp], #4
        mask |= 0x0000000000000020;
   30468:	233f      	movs	r3, #63	; 0x3f
   3046a:	2200      	movs	r2, #0
   3046c:	e7e4      	b.n	30438 <ble_hs_startup_le_set_evmask_tx+0x10>

0003046e <ble_hs_startup_read_buf_sz>:
{
   3046e:	b500      	push	{lr}
   30470:	b083      	sub	sp, #12
    uint16_t le_pktlen = 0;
   30472:	2300      	movs	r3, #0
   30474:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t max_pkts = 0;
   30478:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint16_t pktlen = 0;
   3047c:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint8_t le_max_pkts = 0;
   30480:	f88d 3001 	strb.w	r3, [sp, #1]
    rc = ble_hs_startup_le_read_buf_sz_tx(&le_pktlen, &le_max_pkts);
   30484:	f10d 0101 	add.w	r1, sp, #1
   30488:	f10d 0006 	add.w	r0, sp, #6
   3048c:	f7ff ff5d 	bl	3034a <ble_hs_startup_le_read_buf_sz_tx>
    if (rc != 0) {
   30490:	4603      	mov	r3, r0
   30492:	b978      	cbnz	r0, 304b4 <ble_hs_startup_read_buf_sz+0x46>
    if (le_pktlen != 0) {
   30494:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   30498:	b183      	cbz	r3, 304bc <ble_hs_startup_read_buf_sz+0x4e>
        pktlen = le_pktlen;
   3049a:	f8ad 3002 	strh.w	r3, [sp, #2]
        max_pkts = le_max_pkts;
   3049e:	f89d 3001 	ldrb.w	r3, [sp, #1]
   304a2:	f8ad 3004 	strh.w	r3, [sp, #4]
    rc = ble_hs_hci_set_buf_sz(pktlen, max_pkts);
   304a6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   304aa:	f8bd 0002 	ldrh.w	r0, [sp, #2]
   304ae:	f7ff f821 	bl	2f4f4 <ble_hs_hci_set_buf_sz>
   304b2:	4603      	mov	r3, r0
}
   304b4:	4618      	mov	r0, r3
   304b6:	b003      	add	sp, #12
   304b8:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = ble_hs_startup_read_buf_sz_tx(&pktlen, &max_pkts);
   304bc:	a901      	add	r1, sp, #4
   304be:	f10d 0002 	add.w	r0, sp, #2
   304c2:	f7ff ff58 	bl	30376 <ble_hs_startup_read_buf_sz_tx>
        if (rc != 0) {
   304c6:	4603      	mov	r3, r0
   304c8:	2800      	cmp	r0, #0
   304ca:	d0ec      	beq.n	304a6 <ble_hs_startup_read_buf_sz+0x38>
   304cc:	e7f2      	b.n	304b4 <ble_hs_startup_read_buf_sz+0x46>

000304ce <ble_hs_startup_le_read_sup_f_tx>:
{
   304ce:	b510      	push	{r4, lr}
   304d0:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   304d2:	2308      	movs	r3, #8
   304d4:	9300      	str	r3, [sp, #0]
   304d6:	446b      	add	r3, sp
   304d8:	2200      	movs	r2, #0
   304da:	4611      	mov	r1, r2
   304dc:	f242 0003 	movw	r0, #8195	; 0x2003
   304e0:	f7ff f82a 	bl	2f538 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   304e4:	4604      	mov	r4, r0
   304e6:	b110      	cbz	r0, 304ee <ble_hs_startup_le_read_sup_f_tx+0x20>
}
   304e8:	4620      	mov	r0, r4
   304ea:	b004      	add	sp, #16
   304ec:	bd10      	pop	{r4, pc}
    ble_hs_hci_set_le_supported_feat(le64toh(rsp.features));
   304ee:	9802      	ldr	r0, [sp, #8]
   304f0:	f7ff f8dc 	bl	2f6ac <ble_hs_hci_set_le_supported_feat>
    return 0;
   304f4:	e7f8      	b.n	304e8 <ble_hs_startup_le_read_sup_f_tx+0x1a>

000304f6 <ble_hs_startup_read_bd_addr>:
{
   304f6:	b510      	push	{r4, lr}
   304f8:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   304fa:	2306      	movs	r3, #6
   304fc:	9300      	str	r3, [sp, #0]
   304fe:	ab02      	add	r3, sp, #8
   30500:	2200      	movs	r2, #0
   30502:	4611      	mov	r1, r2
   30504:	f241 0009 	movw	r0, #4105	; 0x1009
   30508:	f7ff f816 	bl	2f538 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   3050c:	4604      	mov	r4, r0
   3050e:	b110      	cbz	r0, 30516 <ble_hs_startup_read_bd_addr+0x20>
}
   30510:	4620      	mov	r0, r4
   30512:	b004      	add	sp, #16
   30514:	bd10      	pop	{r4, pc}
    ble_hs_id_set_pub(rsp.addr);
   30516:	a802      	add	r0, sp, #8
   30518:	f7ff fc36 	bl	2fd88 <ble_hs_id_set_pub>
    return 0;
   3051c:	e7f8      	b.n	30510 <ble_hs_startup_read_bd_addr+0x1a>

0003051e <ble_hs_startup_go>:

int
ble_hs_startup_go(void)
{
   3051e:	b510      	push	{r4, lr}
    int rc;

    rc = ble_hs_startup_reset_tx();
   30520:	f7ff ff06 	bl	30330 <ble_hs_startup_reset_tx>
    if (rc != 0) {
   30524:	4604      	mov	r4, r0
   30526:	b108      	cbz	r0, 3052c <ble_hs_startup_go+0xe>

    /* If flow control is enabled, configure the controller to use it. */
    ble_hs_flow_startup();

    return 0;
}
   30528:	4620      	mov	r0, r4
   3052a:	bd10      	pop	{r4, pc}
    rc = ble_hs_startup_read_local_ver_tx();
   3052c:	f7ff ff39 	bl	303a2 <ble_hs_startup_read_local_ver_tx>
    if (rc != 0) {
   30530:	4604      	mov	r4, r0
   30532:	2800      	cmp	r0, #0
   30534:	d1f8      	bne.n	30528 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_set_evmask_tx();
   30536:	f7ff ff4b 	bl	303d0 <ble_hs_startup_set_evmask_tx>
    if (rc != 0) {
   3053a:	4604      	mov	r4, r0
   3053c:	2800      	cmp	r0, #0
   3053e:	d1f3      	bne.n	30528 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_le_set_evmask_tx();
   30540:	f7ff ff72 	bl	30428 <ble_hs_startup_le_set_evmask_tx>
    if (rc != 0) {
   30544:	4604      	mov	r4, r0
   30546:	2800      	cmp	r0, #0
   30548:	d1ee      	bne.n	30528 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_read_buf_sz();
   3054a:	f7ff ff90 	bl	3046e <ble_hs_startup_read_buf_sz>
    if (rc != 0) {
   3054e:	4604      	mov	r4, r0
   30550:	2800      	cmp	r0, #0
   30552:	d1e9      	bne.n	30528 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_le_read_sup_f_tx();
   30554:	f7ff ffbb 	bl	304ce <ble_hs_startup_le_read_sup_f_tx>
    if (rc != 0) {
   30558:	4604      	mov	r4, r0
   3055a:	2800      	cmp	r0, #0
   3055c:	d1e4      	bne.n	30528 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_read_bd_addr();
   3055e:	f7ff ffca 	bl	304f6 <ble_hs_startup_read_bd_addr>
    if (rc != 0) {
   30562:	4604      	mov	r4, r0
   30564:	2800      	cmp	r0, #0
   30566:	d1df      	bne.n	30528 <ble_hs_startup_go+0xa>
    ble_hs_pvcy_set_our_irk(NULL);
   30568:	f7ff fea6 	bl	302b8 <ble_hs_pvcy_set_our_irk>
    ble_hs_flow_startup();
   3056c:	f7fe feca 	bl	2f304 <ble_hs_flow_startup>
    return 0;
   30570:	e7da      	b.n	30528 <ble_hs_startup_go+0xa>
	...

00030574 <ble_hs_stop_register_listener>:
ble_hs_stop_register_listener(struct ble_hs_stop_listener *listener,
                              ble_hs_stop_fn *fn, void *arg)
{
    BLE_HS_DBG_ASSERT(fn != NULL);

    listener->fn = fn;
   30574:	6001      	str	r1, [r0, #0]
    listener->arg = arg;
   30576:	6042      	str	r2, [r0, #4]
    SLIST_INSERT_HEAD(&ble_hs_stop_listeners, listener, link);
   30578:	4b02      	ldr	r3, [pc, #8]	; (30584 <ble_hs_stop_register_listener+0x10>)
   3057a:	681a      	ldr	r2, [r3, #0]
   3057c:	6082      	str	r2, [r0, #8]
   3057e:	6018      	str	r0, [r3, #0]
}
   30580:	4770      	bx	lr
   30582:	bf00      	nop
   30584:	1000566c 	.word	0x1000566c

00030588 <ble_hs_stop_terminate_conn>:
{
   30588:	b508      	push	{r3, lr}
    rc = ble_gap_terminate_with_conn(conn, BLE_ERR_REM_USER_CONN_TERM);
   3058a:	2113      	movs	r1, #19
   3058c:	f7f9 fdfa 	bl	2a184 <ble_gap_terminate_with_conn>
    if (rc == 0) {
   30590:	b928      	cbnz	r0, 3059e <ble_hs_stop_terminate_conn+0x16>
        ble_hs_stop_conn_cnt++;
   30592:	4a06      	ldr	r2, [pc, #24]	; (305ac <ble_hs_stop_terminate_conn+0x24>)
   30594:	7813      	ldrb	r3, [r2, #0]
   30596:	3301      	adds	r3, #1
   30598:	7013      	strb	r3, [r2, #0]
}
   3059a:	2000      	movs	r0, #0
   3059c:	bd08      	pop	{r3, pc}
   3059e:	4603      	mov	r3, r0
        BLE_HS_LOG(ERROR, "ble_hs_stop: failed to terminate connection; rc=%d\n", rc);
   305a0:	4a03      	ldr	r2, [pc, #12]	; (305b0 <ble_hs_stop_terminate_conn+0x28>)
   305a2:	2103      	movs	r1, #3
   305a4:	2004      	movs	r0, #4
   305a6:	f7ec fbc1 	bl	1cd2c <modlog_printf>
   305aa:	e7f6      	b.n	3059a <ble_hs_stop_terminate_conn+0x12>
   305ac:	1000565d 	.word	0x1000565d
   305b0:	00039868 	.word	0x00039868

000305b4 <ble_hs_stop_begin>:

static int
ble_hs_stop_begin(struct ble_hs_stop_listener *listener,
                   ble_hs_stop_fn *fn, void *arg)
{
   305b4:	b510      	push	{r4, lr}
    switch (ble_hs_enabled_state) {
   305b6:	4b12      	ldr	r3, [pc, #72]	; (30600 <ble_hs_stop_begin+0x4c>)
   305b8:	781b      	ldrb	r3, [r3, #0]
   305ba:	2b01      	cmp	r3, #1
   305bc:	d016      	beq.n	305ec <ble_hs_stop_begin+0x38>
   305be:	2b02      	cmp	r3, #2
   305c0:	d00a      	beq.n	305d8 <ble_hs_stop_begin+0x24>
   305c2:	b1c3      	cbz	r3, 305f6 <ble_hs_stop_begin+0x42>
    case BLE_HS_ENABLED_STATE_OFF:
        /* Host already stopped. */
        return BLE_HS_EALREADY;

    default:
        assert(0);
   305c4:	f7e4 f896 	bl	146f4 <hal_debugger_connected>
   305c8:	b100      	cbz	r0, 305cc <ble_hs_stop_begin+0x18>
   305ca:	be01      	bkpt	0x0001
   305cc:	2300      	movs	r3, #0
   305ce:	461a      	mov	r2, r3
   305d0:	4619      	mov	r1, r3
   305d2:	4618      	mov	r0, r3
   305d4:	f7e8 fbac 	bl	18d30 <__assert_func>
        ble_hs_enabled_state = BLE_HS_ENABLED_STATE_STOPPING;
   305d8:	4b09      	ldr	r3, [pc, #36]	; (30600 <ble_hs_stop_begin+0x4c>)
   305da:	2401      	movs	r4, #1
   305dc:	701c      	strb	r4, [r3, #0]
        if (listener != NULL) {
   305de:	b108      	cbz	r0, 305e4 <ble_hs_stop_begin+0x30>
            ble_hs_stop_register_listener(listener, fn, arg);
   305e0:	f7ff ffc8 	bl	30574 <ble_hs_stop_register_listener>
        ble_hs_timer_resched();
   305e4:	f7fd fdc6 	bl	2e174 <ble_hs_timer_resched>
        return 0;
   305e8:	2000      	movs	r0, #0
   305ea:	e005      	b.n	305f8 <ble_hs_stop_begin+0x44>
        if (listener != NULL) {
   305ec:	b128      	cbz	r0, 305fa <ble_hs_stop_begin+0x46>
            ble_hs_stop_register_listener(listener, fn, arg);
   305ee:	f7ff ffc1 	bl	30574 <ble_hs_stop_register_listener>
        return BLE_HS_EBUSY;
   305f2:	200f      	movs	r0, #15
   305f4:	e000      	b.n	305f8 <ble_hs_stop_begin+0x44>
    switch (ble_hs_enabled_state) {
   305f6:	2002      	movs	r0, #2
        return BLE_HS_EUNKNOWN;
    }
}
   305f8:	bd10      	pop	{r4, pc}
        return BLE_HS_EBUSY;
   305fa:	200f      	movs	r0, #15
   305fc:	e7fc      	b.n	305f8 <ble_hs_stop_begin+0x44>
   305fe:	bf00      	nop
   30600:	10005228 	.word	0x10005228

00030604 <ble_hs_stop_done>:
{
   30604:	b538      	push	{r3, r4, r5, lr}
   30606:	4605      	mov	r5, r0
    os_callout_stop(&co->co);
   30608:	480b      	ldr	r0, [pc, #44]	; (30638 <ble_hs_stop_done+0x34>)
   3060a:	f7e8 fdbb 	bl	19184 <os_callout_stop>
    ble_hs_lock();
   3060e:	f7fd fcbf 	bl	2df90 <ble_hs_lock>
    ble_gap_event_listener_unregister(&ble_hs_stop_gap_listener);
   30612:	480a      	ldr	r0, [pc, #40]	; (3063c <ble_hs_stop_done+0x38>)
   30614:	f7fa f970 	bl	2a8f8 <ble_gap_event_listener_unregister>
    slist = ble_hs_stop_listeners;
   30618:	4a09      	ldr	r2, [pc, #36]	; (30640 <ble_hs_stop_done+0x3c>)
   3061a:	6814      	ldr	r4, [r2, #0]
    SLIST_INIT(&ble_hs_stop_listeners);
   3061c:	2300      	movs	r3, #0
   3061e:	6013      	str	r3, [r2, #0]
    ble_hs_enabled_state = BLE_HS_ENABLED_STATE_OFF;
   30620:	4a08      	ldr	r2, [pc, #32]	; (30644 <ble_hs_stop_done+0x40>)
   30622:	7013      	strb	r3, [r2, #0]
    ble_hs_unlock();
   30624:	f7fd fcb8 	bl	2df98 <ble_hs_unlock>
    SLIST_FOREACH(listener, &slist, link) {
   30628:	b12c      	cbz	r4, 30636 <ble_hs_stop_done+0x32>
        listener->fn(status, listener->arg);
   3062a:	6823      	ldr	r3, [r4, #0]
   3062c:	6861      	ldr	r1, [r4, #4]
   3062e:	4628      	mov	r0, r5
   30630:	4798      	blx	r3
    SLIST_FOREACH(listener, &slist, link) {
   30632:	68a4      	ldr	r4, [r4, #8]
   30634:	e7f8      	b.n	30628 <ble_hs_stop_done+0x24>
}
   30636:	bd38      	pop	{r3, r4, r5, pc}
   30638:	10005670 	.word	0x10005670
   3063c:	10005660 	.word	0x10005660
   30640:	1000566c 	.word	0x1000566c
   30644:	10005228 	.word	0x10005228

00030648 <ble_hs_stop_gap_event>:
{
   30648:	b508      	push	{r3, lr}
    if (event->type == BLE_GAP_EVENT_DISCONNECT ||
   3064a:	7803      	ldrb	r3, [r0, #0]
   3064c:	2b01      	cmp	r3, #1
   3064e:	d003      	beq.n	30658 <ble_hs_stop_gap_event+0x10>
   30650:	2b06      	cmp	r3, #6
   30652:	d001      	beq.n	30658 <ble_hs_stop_gap_event+0x10>
}
   30654:	2000      	movs	r0, #0
   30656:	bd08      	pop	{r3, pc}
        ble_hs_stop_conn_cnt--;
   30658:	4a05      	ldr	r2, [pc, #20]	; (30670 <ble_hs_stop_gap_event+0x28>)
   3065a:	7813      	ldrb	r3, [r2, #0]
   3065c:	3b01      	subs	r3, #1
   3065e:	b2db      	uxtb	r3, r3
   30660:	7013      	strb	r3, [r2, #0]
        if (ble_hs_stop_conn_cnt == 0) {
   30662:	2b00      	cmp	r3, #0
   30664:	d1f6      	bne.n	30654 <ble_hs_stop_gap_event+0xc>
            ble_hs_stop_done(0);
   30666:	2000      	movs	r0, #0
   30668:	f7ff ffcc 	bl	30604 <ble_hs_stop_done>
   3066c:	e7f2      	b.n	30654 <ble_hs_stop_gap_event+0xc>
   3066e:	bf00      	nop
   30670:	1000565d 	.word	0x1000565d

00030674 <ble_hs_stop_terminate_timeout_cb>:
{
   30674:	b508      	push	{r3, lr}
    BLE_HS_LOG(ERROR, "ble_hs_stop_terminate_timeout_cb,"
   30676:	4b05      	ldr	r3, [pc, #20]	; (3068c <ble_hs_stop_terminate_timeout_cb+0x18>)
   30678:	781b      	ldrb	r3, [r3, #0]
   3067a:	4a05      	ldr	r2, [pc, #20]	; (30690 <ble_hs_stop_terminate_timeout_cb+0x1c>)
   3067c:	2103      	movs	r1, #3
   3067e:	2004      	movs	r0, #4
   30680:	f7ec fb54 	bl	1cd2c <modlog_printf>
    ble_hs_stop_done(0);
   30684:	2000      	movs	r0, #0
   30686:	f7ff ffbd 	bl	30604 <ble_hs_stop_done>
}
   3068a:	bd08      	pop	{r3, pc}
   3068c:	1000565d 	.word	0x1000565d
   30690:	0003989c 	.word	0x0003989c

00030694 <ble_hs_stop>:

int
ble_hs_stop(struct ble_hs_stop_listener *listener, 
            ble_hs_stop_fn *fn, void *arg)
{
   30694:	b570      	push	{r4, r5, r6, lr}
   30696:	4604      	mov	r4, r0
   30698:	460d      	mov	r5, r1
   3069a:	4616      	mov	r6, r2
    int rc;

    ble_hs_lock();
   3069c:	f7fd fc78 	bl	2df90 <ble_hs_lock>
    rc = ble_hs_stop_begin(listener, fn, arg);
   306a0:	4632      	mov	r2, r6
   306a2:	4629      	mov	r1, r5
   306a4:	4620      	mov	r0, r4
   306a6:	f7ff ff85 	bl	305b4 <ble_hs_stop_begin>
   306aa:	4604      	mov	r4, r0
    ble_hs_unlock();
   306ac:	f7fd fc74 	bl	2df98 <ble_hs_unlock>

    switch (rc) {
   306b0:	b124      	cbz	r4, 306bc <ble_hs_stop+0x28>
   306b2:	2c0f      	cmp	r4, #15
   306b4:	d100      	bne.n	306b8 <ble_hs_stop+0x24>
   306b6:	2400      	movs	r4, #0
        /* No connections, stop is completed */
        ble_hs_stop_done(0);
    }

    return 0;
}
   306b8:	4620      	mov	r0, r4
   306ba:	bd70      	pop	{r4, r5, r6, pc}
    ble_gap_preempt();
   306bc:	f7fa f896 	bl	2a7ec <ble_gap_preempt>
    ble_gap_preempt_done();
   306c0:	f7fa f8a0 	bl	2a804 <ble_gap_preempt_done>
    rc = ble_gap_event_listener_register(&ble_hs_stop_gap_listener,
   306c4:	2200      	movs	r2, #0
   306c6:	490e      	ldr	r1, [pc, #56]	; (30700 <ble_hs_stop+0x6c>)
   306c8:	480e      	ldr	r0, [pc, #56]	; (30704 <ble_hs_stop+0x70>)
   306ca:	f7fa f8fd 	bl	2a8c8 <ble_gap_event_listener_register>
    if (rc != 0) {
   306ce:	4604      	mov	r4, r0
   306d0:	2800      	cmp	r0, #0
   306d2:	d1f1      	bne.n	306b8 <ble_hs_stop+0x24>
    ble_hs_lock();
   306d4:	f7fd fc5c 	bl	2df90 <ble_hs_lock>
    ble_hs_conn_foreach(ble_hs_stop_terminate_conn, NULL);
   306d8:	2100      	movs	r1, #0
   306da:	480b      	ldr	r0, [pc, #44]	; (30708 <ble_hs_stop+0x74>)
   306dc:	f7fe fc52 	bl	2ef84 <ble_hs_conn_foreach>
    ble_hs_unlock();
   306e0:	f7fd fc5a 	bl	2df98 <ble_hs_unlock>
    if (ble_hs_stop_conn_cnt > 0) {
   306e4:	4b09      	ldr	r3, [pc, #36]	; (3070c <ble_hs_stop+0x78>)
   306e6:	781b      	ldrb	r3, [r3, #0]
   306e8:	b12b      	cbz	r3, 306f6 <ble_hs_stop+0x62>
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   306ea:	f44f 7180 	mov.w	r1, #256	; 0x100
   306ee:	4808      	ldr	r0, [pc, #32]	; (30710 <ble_hs_stop+0x7c>)
   306f0:	f7e8 fd66 	bl	191c0 <os_callout_reset>
   306f4:	e7e0      	b.n	306b8 <ble_hs_stop+0x24>
        ble_hs_stop_done(0);
   306f6:	2000      	movs	r0, #0
   306f8:	f7ff ff84 	bl	30604 <ble_hs_stop_done>
   306fc:	e7dc      	b.n	306b8 <ble_hs_stop+0x24>
   306fe:	bf00      	nop
   30700:	00030649 	.word	0x00030649
   30704:	10005660 	.word	0x10005660
   30708:	00030589 	.word	0x00030589
   3070c:	1000565d 	.word	0x1000565d
   30710:	10005670 	.word	0x10005670

00030714 <ble_hs_stop_init>:

void
ble_hs_stop_init(void)
{
   30714:	b508      	push	{r3, lr}
    return (struct ble_npl_eventq *) os_eventq_dflt_get();
   30716:	f7e8 ff17 	bl	19548 <os_eventq_dflt_get>
   3071a:	4601      	mov	r1, r0
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   3071c:	2300      	movs	r3, #0
   3071e:	4a02      	ldr	r2, [pc, #8]	; (30728 <ble_hs_stop_init+0x14>)
   30720:	4802      	ldr	r0, [pc, #8]	; (3072c <ble_hs_stop_init+0x18>)
   30722:	f7e8 fd21 	bl	19168 <os_callout_init>
                         ble_hs_stop_terminate_timeout_cb, NULL);
#else
    ble_npl_callout_init(&ble_hs_stop_terminate_tmo, nimble_port_get_dflt_eventq(),
                         ble_hs_stop_terminate_timeout_cb, NULL);
#endif
}
   30726:	bd08      	pop	{r3, pc}
   30728:	00030675 	.word	0x00030675
   3072c:	10005670 	.word	0x10005670

00030730 <ble_l2cap_get_mtu>:
    return rc;
}

static uint16_t
ble_l2cap_get_mtu(struct ble_l2cap_chan *chan)
{
   30730:	b508      	push	{r3, lr}
    if (chan->scid == BLE_L2CAP_CID_ATT) {
   30732:	8903      	ldrh	r3, [r0, #8]
   30734:	2b04      	cmp	r3, #4
   30736:	d001      	beq.n	3073c <ble_l2cap_get_mtu+0xc>
         * done
         */
        return ble_att_chan_mtu(chan);
    }

    return chan->my_mtu;
   30738:	8940      	ldrh	r0, [r0, #10]
}
   3073a:	bd08      	pop	{r3, pc}
        return ble_att_chan_mtu(chan);
   3073c:	f7f6 f895 	bl	2686a <ble_att_chan_mtu>
   30740:	e7fb      	b.n	3073a <ble_l2cap_get_mtu+0xa>

00030742 <ble_l2cap_append_rx>:
{
   30742:	b508      	push	{r3, lr}
    m = os_mbuf_pack_chains(chan->rx_buf, frag);
   30744:	6900      	ldr	r0, [r0, #16]
   30746:	f7e9 faaa 	bl	19c9e <os_mbuf_pack_chains>
    assert(m);
   3074a:	b100      	cbz	r0, 3074e <ble_l2cap_append_rx+0xc>
}
   3074c:	bd08      	pop	{r3, pc}
    assert(m);
   3074e:	f7e3 ffd1 	bl	146f4 <hal_debugger_connected>
   30752:	b100      	cbz	r0, 30756 <ble_l2cap_append_rx+0x14>
   30754:	be01      	bkpt	0x0001
   30756:	2300      	movs	r3, #0
   30758:	461a      	mov	r2, r3
   3075a:	4619      	mov	r1, r3
   3075c:	4618      	mov	r0, r3
   3075e:	f7e8 fae7 	bl	18d30 <__assert_func>
	...

00030764 <ble_l2cap_chan_alloc>:
{
   30764:	b510      	push	{r4, lr}
   30766:	4604      	mov	r4, r0
    chan = os_memblock_get(&ble_l2cap_chan_pool);
   30768:	4809      	ldr	r0, [pc, #36]	; (30790 <ble_l2cap_chan_alloc+0x2c>)
   3076a:	f7e9 fb6f 	bl	19e4c <os_memblock_get>
    if (chan == NULL) {
   3076e:	4603      	mov	r3, r0
   30770:	b160      	cbz	r0, 3078c <ble_l2cap_chan_alloc+0x28>
    memset(chan, 0, sizeof *chan);
   30772:	2200      	movs	r2, #0
   30774:	6002      	str	r2, [r0, #0]
   30776:	6042      	str	r2, [r0, #4]
   30778:	6082      	str	r2, [r0, #8]
   3077a:	60c2      	str	r2, [r0, #12]
   3077c:	6102      	str	r2, [r0, #16]
   3077e:	6142      	str	r2, [r0, #20]
   30780:	6182      	str	r2, [r0, #24]
    chan->conn_handle = conn_handle;
   30782:	8084      	strh	r4, [r0, #4]
    STATS_INC(ble_l2cap_stats, chan_create);
   30784:	4903      	ldr	r1, [pc, #12]	; (30794 <ble_l2cap_chan_alloc+0x30>)
   30786:	68ca      	ldr	r2, [r1, #12]
   30788:	3201      	adds	r2, #1
   3078a:	60ca      	str	r2, [r1, #12]
}
   3078c:	4618      	mov	r0, r3
   3078e:	bd10      	pop	{r4, pc}
   30790:	100056e4 	.word	0x100056e4
   30794:	10005700 	.word	0x10005700

00030798 <ble_l2cap_chan_free>:
    if (chan == NULL) {
   30798:	b169      	cbz	r1, 307b6 <ble_l2cap_chan_free+0x1e>
{
   3079a:	b510      	push	{r4, lr}
   3079c:	460c      	mov	r4, r1
    os_mbuf_free_chain(chan->rx_buf);
   3079e:	6908      	ldr	r0, [r1, #16]
   307a0:	f7e8 ff15 	bl	195ce <os_mbuf_free_chain>
    rc = os_memblock_put(&ble_l2cap_chan_pool, chan);
   307a4:	4621      	mov	r1, r4
   307a6:	4804      	ldr	r0, [pc, #16]	; (307b8 <ble_l2cap_chan_free+0x20>)
   307a8:	f7e9 fb78 	bl	19e9c <os_memblock_put>
    STATS_INC(ble_l2cap_stats, chan_delete);
   307ac:	4a03      	ldr	r2, [pc, #12]	; (307bc <ble_l2cap_chan_free+0x24>)
   307ae:	6913      	ldr	r3, [r2, #16]
   307b0:	3301      	adds	r3, #1
   307b2:	6113      	str	r3, [r2, #16]
}
   307b4:	bd10      	pop	{r4, pc}
   307b6:	4770      	bx	lr
   307b8:	100056e4 	.word	0x100056e4
   307bc:	10005700 	.word	0x10005700

000307c0 <ble_l2cap_is_mtu_req_sent>:
    return (chan->flags & BLE_L2CAP_CHAN_F_TXED_MTU);
   307c0:	7b80      	ldrb	r0, [r0, #14]
}
   307c2:	f000 0001 	and.w	r0, r0, #1
   307c6:	4770      	bx	lr

000307c8 <ble_l2cap_parse_hdr>:
{
   307c8:	b538      	push	{r3, r4, r5, lr}
   307ca:	4614      	mov	r4, r2
    rc = os_mbuf_copydata(om, off, sizeof *l2cap_hdr, l2cap_hdr);
   307cc:	4613      	mov	r3, r2
   307ce:	2204      	movs	r2, #4
   307d0:	f7e8 ff9e 	bl	19710 <os_mbuf_copydata>
    if (rc != 0) {
   307d4:	b960      	cbnz	r0, 307f0 <ble_l2cap_parse_hdr+0x28>
   307d6:	4605      	mov	r5, r0
    l2cap_hdr->len = get_le16(&l2cap_hdr->len);
   307d8:	4620      	mov	r0, r4
   307da:	f7e8 fb38 	bl	18e4e <get_le16>
   307de:	4623      	mov	r3, r4
   307e0:	f823 0b02 	strh.w	r0, [r3], #2
    l2cap_hdr->cid = get_le16(&l2cap_hdr->cid);
   307e4:	4618      	mov	r0, r3
   307e6:	f7e8 fb32 	bl	18e4e <get_le16>
   307ea:	8060      	strh	r0, [r4, #2]
}
   307ec:	4628      	mov	r0, r5
   307ee:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_EMSGSIZE;
   307f0:	2504      	movs	r5, #4
   307f2:	e7fb      	b.n	307ec <ble_l2cap_parse_hdr+0x24>

000307f4 <ble_l2cap_prepend_hdr>:
{
   307f4:	b530      	push	{r4, r5, lr}
   307f6:	b083      	sub	sp, #12
   307f8:	4604      	mov	r4, r0
   307fa:	460d      	mov	r5, r1
    put_le16(&hdr.len, len);
   307fc:	4611      	mov	r1, r2
   307fe:	a801      	add	r0, sp, #4
   30800:	f7e8 fb04 	bl	18e0c <put_le16>
    put_le16(&hdr.cid, cid);
   30804:	4629      	mov	r1, r5
   30806:	f10d 0006 	add.w	r0, sp, #6
   3080a:	f7e8 faff 	bl	18e0c <put_le16>
    om = os_mbuf_prepend_pullup(om, sizeof hdr);
   3080e:	2104      	movs	r1, #4
   30810:	4620      	mov	r0, r4
   30812:	f7e9 fa11 	bl	19c38 <os_mbuf_prepend_pullup>
    if (om == NULL) {
   30816:	b110      	cbz	r0, 3081e <ble_l2cap_prepend_hdr+0x2a>
    memcpy(om->om_data, &hdr, sizeof hdr);
   30818:	6803      	ldr	r3, [r0, #0]
   3081a:	9a01      	ldr	r2, [sp, #4]
   3081c:	601a      	str	r2, [r3, #0]
}
   3081e:	b003      	add	sp, #12
   30820:	bd30      	pop	{r4, r5, pc}

00030822 <ble_l2cap_get_conn_handle>:
    if (!chan) {
   30822:	b108      	cbz	r0, 30828 <ble_l2cap_get_conn_handle+0x6>
    return chan->conn_handle;
   30824:	8880      	ldrh	r0, [r0, #4]
   30826:	4770      	bx	lr
        return BLE_HS_CONN_HANDLE_NONE;
   30828:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   3082c:	4770      	bx	lr

0003082e <ble_l2cap_remove_rx>:
{
   3082e:	b538      	push	{r3, r4, r5, lr}
   30830:	460c      	mov	r4, r1
    conn->bhc_rx_chan = NULL;
   30832:	2500      	movs	r5, #0
   30834:	6305      	str	r5, [r0, #48]	; 0x30
    os_mbuf_free_chain(chan->rx_buf);
   30836:	6908      	ldr	r0, [r1, #16]
   30838:	f7e8 fec9 	bl	195ce <os_mbuf_free_chain>
    chan->rx_buf = NULL;
   3083c:	6125      	str	r5, [r4, #16]
    chan->rx_len = 0;
   3083e:	82a5      	strh	r5, [r4, #20]
}
   30840:	bd38      	pop	{r3, r4, r5, pc}

00030842 <ble_l2cap_rx_payload>:
{
   30842:	b570      	push	{r4, r5, r6, lr}
   30844:	4605      	mov	r5, r0
   30846:	460c      	mov	r4, r1
   30848:	4611      	mov	r1, r2
   3084a:	461e      	mov	r6, r3
    if (chan->rx_buf == NULL) {
   3084c:	6923      	ldr	r3, [r4, #16]
   3084e:	b163      	cbz	r3, 3086a <ble_l2cap_rx_payload+0x28>
        ble_l2cap_append_rx(chan, om);
   30850:	4620      	mov	r0, r4
   30852:	f7ff ff76 	bl	30742 <ble_l2cap_append_rx>
    len_diff = OS_MBUF_PKTLEN(chan->rx_buf) - chan->rx_len;
   30856:	6923      	ldr	r3, [r4, #16]
   30858:	8a1a      	ldrh	r2, [r3, #16]
   3085a:	8aa0      	ldrh	r0, [r4, #20]
   3085c:	1a10      	subs	r0, r2, r0
    if (len_diff > 0) {
   3085e:	2800      	cmp	r0, #0
   30860:	dc05      	bgt.n	3086e <ble_l2cap_rx_payload+0x2c>
    } else if (len_diff == 0) {
   30862:	b950      	cbnz	r0, 3087a <ble_l2cap_rx_payload+0x38>
        *out_rx_cb = chan->rx_fn;
   30864:	69a3      	ldr	r3, [r4, #24]
   30866:	6033      	str	r3, [r6, #0]
}
   30868:	bd70      	pop	{r4, r5, r6, pc}
        chan->rx_buf = om;
   3086a:	6122      	str	r2, [r4, #16]
   3086c:	e7f3      	b.n	30856 <ble_l2cap_rx_payload+0x14>
        ble_l2cap_remove_rx(conn, chan);
   3086e:	4621      	mov	r1, r4
   30870:	4628      	mov	r0, r5
   30872:	f7ff ffdc 	bl	3082e <ble_l2cap_remove_rx>
        rc = BLE_HS_EBADDATA;
   30876:	200a      	movs	r0, #10
   30878:	e7f6      	b.n	30868 <ble_l2cap_rx_payload+0x26>
    return os_time_get();
   3087a:	f7e9 fee5 	bl	1a648 <os_time_get>
            ble_npl_time_get() + MYNEWT_VAL(BLE_L2CAP_RX_FRAG_TIMEOUT);
   3087e:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
   30882:	3030      	adds	r0, #48	; 0x30
        conn->bhc_rx_timeout =
   30884:	6368      	str	r0, [r5, #52]	; 0x34
        ble_hs_timer_resched();
   30886:	f7fd fc75 	bl	2e174 <ble_hs_timer_resched>
        rc = BLE_HS_EAGAIN;
   3088a:	2001      	movs	r0, #1
    return rc;
   3088c:	e7ec      	b.n	30868 <ble_l2cap_rx_payload+0x26>

0003088e <ble_l2cap_rx>:
ble_l2cap_rx(struct ble_hs_conn *conn,
             struct hci_data_hdr *hci_hdr,
             struct os_mbuf *om,
             ble_l2cap_rx_fn **out_rx_cb,
             int *out_reject_cid)
{
   3088e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30892:	b082      	sub	sp, #8
   30894:	4606      	mov	r6, r0
   30896:	4614      	mov	r4, r2
   30898:	461f      	mov	r7, r3
   3089a:	9d08      	ldr	r5, [sp, #32]
    struct ble_l2cap_chan *chan;
    struct ble_l2cap_hdr l2cap_hdr;
    uint8_t pb;
    int rc;

    *out_reject_cid = -1;
   3089c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   308a0:	602b      	str	r3, [r5, #0]

    pb = BLE_HCI_DATA_PB(hci_hdr->hdh_handle_pb_bc);
   308a2:	8809      	ldrh	r1, [r1, #0]
   308a4:	f3c1 3101 	ubfx	r1, r1, #12, #2
    switch (pb) {
   308a8:	2901      	cmp	r1, #1
   308aa:	d031      	beq.n	30910 <ble_l2cap_rx+0x82>
   308ac:	2902      	cmp	r1, #2
   308ae:	d141      	bne.n	30934 <ble_l2cap_rx+0xa6>
    case BLE_HCI_PB_FIRST_FLUSH:
        /* First fragment. */
        rc = ble_l2cap_parse_hdr(om, 0, &l2cap_hdr);
   308b0:	aa01      	add	r2, sp, #4
   308b2:	2100      	movs	r1, #0
   308b4:	4620      	mov	r0, r4
   308b6:	f7ff ff87 	bl	307c8 <ble_l2cap_parse_hdr>
        if (rc != 0) {
   308ba:	4680      	mov	r8, r0
   308bc:	bbe0      	cbnz	r0, 30938 <ble_l2cap_rx+0xaa>
            goto err;
        }

        /* Strip L2CAP header from the front of the mbuf. */
        os_mbuf_adj(om, BLE_L2CAP_HDR_SZ);
   308be:	2104      	movs	r1, #4
   308c0:	4620      	mov	r0, r4
   308c2:	f7e8 ff52 	bl	1976a <os_mbuf_adj>

        chan = ble_hs_conn_chan_find_by_scid(conn, l2cap_hdr.cid);
   308c6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   308ca:	4630      	mov	r0, r6
   308cc:	f7fe fb1e 	bl	2ef0c <ble_hs_conn_chan_find_by_scid>
        if (chan == NULL) {
   308d0:	4680      	mov	r8, r0
   308d2:	b198      	cbz	r0, 308fc <ble_l2cap_rx+0x6e>
                *out_reject_cid = l2cap_hdr.cid;
            }
            goto err;
        }

        if (chan->rx_buf != NULL) {
   308d4:	6903      	ldr	r3, [r0, #16]
   308d6:	b11b      	cbz	r3, 308e0 <ble_l2cap_rx+0x52>
            /* Previous data packet never completed.  Discard old packet. */
            ble_l2cap_remove_rx(conn, chan);
   308d8:	4601      	mov	r1, r0
   308da:	4630      	mov	r0, r6
   308dc:	f7ff ffa7 	bl	3082e <ble_l2cap_remove_rx>
        }

        if (l2cap_hdr.len > ble_l2cap_get_mtu(chan)) {
   308e0:	f8bd 5004 	ldrh.w	r5, [sp, #4]
   308e4:	4640      	mov	r0, r8
   308e6:	f7ff ff23 	bl	30730 <ble_l2cap_get_mtu>
   308ea:	4285      	cmp	r5, r0
   308ec:	d82b      	bhi.n	30946 <ble_l2cap_rx+0xb8>
            ble_l2cap_disconnect(chan);
            goto err;
        }

        /* Remember channel and length of L2CAP data for reassembly. */
        conn->bhc_rx_chan = chan;
   308ee:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
        chan->rx_len = l2cap_hdr.len;
   308f2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   308f6:	f8a8 3014 	strh.w	r3, [r8, #20]
        break;
   308fa:	e011      	b.n	30920 <ble_l2cap_rx+0x92>
            if (l2cap_hdr.cid != BLE_L2CAP_CID_BLACK_HOLE) {
   308fc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   30900:	f64f 72ff 	movw	r2, #65535	; 0xffff
   30904:	4293      	cmp	r3, r2
   30906:	d000      	beq.n	3090a <ble_l2cap_rx+0x7c>
                *out_reject_cid = l2cap_hdr.cid;
   30908:	602b      	str	r3, [r5, #0]
            rc = BLE_HS_ENOENT;
   3090a:	f04f 0805 	mov.w	r8, #5
            goto err;
   3090e:	e013      	b.n	30938 <ble_l2cap_rx+0xaa>

    case BLE_HCI_PB_MIDDLE:
        chan = conn->bhc_rx_chan;
   30910:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
        if (chan == NULL || chan->rx_buf == NULL) {
   30914:	f1b8 0f00 	cmp.w	r8, #0
   30918:	d018      	beq.n	3094c <ble_l2cap_rx+0xbe>
   3091a:	f8d8 3010 	ldr.w	r3, [r8, #16]
   3091e:	b1c3      	cbz	r3, 30952 <ble_l2cap_rx+0xc4>
    default:
        rc = BLE_HS_EBADDATA;
        goto err;
    }

    rc = ble_l2cap_rx_payload(conn, chan, om, out_rx_cb);
   30920:	463b      	mov	r3, r7
   30922:	4622      	mov	r2, r4
   30924:	4641      	mov	r1, r8
   30926:	4630      	mov	r0, r6
   30928:	f7ff ff8b 	bl	30842 <ble_l2cap_rx_payload>
    om = NULL;
    if (rc != 0) {
   3092c:	4680      	mov	r8, r0
   3092e:	b130      	cbz	r0, 3093e <ble_l2cap_rx+0xb0>
    om = NULL;
   30930:	2400      	movs	r4, #0
   30932:	e001      	b.n	30938 <ble_l2cap_rx+0xaa>
    switch (pb) {
   30934:	f04f 080a 	mov.w	r8, #10
    }

    return 0;

err:
    os_mbuf_free_chain(om);
   30938:	4620      	mov	r0, r4
   3093a:	f7e8 fe48 	bl	195ce <os_mbuf_free_chain>
    return rc;
}
   3093e:	4640      	mov	r0, r8
   30940:	b002      	add	sp, #8
   30942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_EBADDATA;
   30946:	f04f 080a 	mov.w	r8, #10
   3094a:	e7f5      	b.n	30938 <ble_l2cap_rx+0xaa>
            rc = BLE_HS_EBADDATA;
   3094c:	f04f 080a 	mov.w	r8, #10
   30950:	e7f2      	b.n	30938 <ble_l2cap_rx+0xaa>
   30952:	f04f 080a 	mov.w	r8, #10
   30956:	e7ef      	b.n	30938 <ble_l2cap_rx+0xaa>

00030958 <ble_l2cap_tx>:
 * @return                      0 on success; nonzero on error.
 */
int
ble_l2cap_tx(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan,
             struct os_mbuf *txom)
{
   30958:	b510      	push	{r4, lr}
   3095a:	b082      	sub	sp, #8
   3095c:	4604      	mov	r4, r0
   3095e:	9201      	str	r2, [sp, #4]
    int rc;

    txom = ble_l2cap_prepend_hdr(txom, chan->dcid, OS_MBUF_PKTLEN(txom));
   30960:	4610      	mov	r0, r2
   30962:	8a12      	ldrh	r2, [r2, #16]
   30964:	88c9      	ldrh	r1, [r1, #6]
   30966:	f7ff ff45 	bl	307f4 <ble_l2cap_prepend_hdr>
   3096a:	9001      	str	r0, [sp, #4]
    if (txom == NULL) {
   3096c:	b188      	cbz	r0, 30992 <ble_l2cap_tx+0x3a>
        return BLE_HS_ENOMEM;
    }

    rc = ble_hs_hci_acl_tx(conn, &txom);
   3096e:	a901      	add	r1, sp, #4
   30970:	4620      	mov	r0, r4
   30972:	f7fe fe93 	bl	2f69c <ble_hs_hci_acl_tx>
    switch (rc) {
   30976:	b150      	cbz	r0, 3098e <ble_l2cap_tx+0x36>
   30978:	2801      	cmp	r0, #1
   3097a:	d108      	bne.n	3098e <ble_l2cap_tx+0x36>
        /* Success. */
        return 0;

    case BLE_HS_EAGAIN:
        /* Controller could not accommodate full packet.  Enqueue remainder. */
        STAILQ_INSERT_TAIL(&conn->bhc_tx_q, OS_MBUF_PKTHDR(txom), omp_next);
   3097c:	9b01      	ldr	r3, [sp, #4]
   3097e:	2000      	movs	r0, #0
   30980:	6158      	str	r0, [r3, #20]
   30982:	6c22      	ldr	r2, [r4, #64]	; 0x40
   30984:	3310      	adds	r3, #16
   30986:	6013      	str	r3, [r2, #0]
   30988:	9b01      	ldr	r3, [sp, #4]
   3098a:	3314      	adds	r3, #20
   3098c:	6423      	str	r3, [r4, #64]	; 0x40

    default:
        /* Error. */
        return rc;
    }
}
   3098e:	b002      	add	sp, #8
   30990:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOMEM;
   30992:	2006      	movs	r0, #6
   30994:	e7fb      	b.n	3098e <ble_l2cap_tx+0x36>
	...

00030998 <ble_l2cap_init>:

int
ble_l2cap_init(void)
{
   30998:	b500      	push	{lr}
   3099a:	b083      	sub	sp, #12
    int rc;

    rc = os_mempool_init(&ble_l2cap_chan_pool,
   3099c:	4b0d      	ldr	r3, [pc, #52]	; (309d4 <ble_l2cap_init+0x3c>)
   3099e:	9300      	str	r3, [sp, #0]
   309a0:	4b0d      	ldr	r3, [pc, #52]	; (309d8 <ble_l2cap_init+0x40>)
   309a2:	221c      	movs	r2, #28
   309a4:	2103      	movs	r1, #3
   309a6:	480d      	ldr	r0, [pc, #52]	; (309dc <ble_l2cap_init+0x44>)
   309a8:	f7e9 fa0c 	bl	19dc4 <os_mempool_init>
                         MYNEWT_VAL(BLE_L2CAP_MAX_CHANS) +
                         MYNEWT_VAL(BLE_L2CAP_COC_MAX_NUM),
                         sizeof (struct ble_l2cap_chan),
                         ble_l2cap_chan_mem, "ble_l2cap_chan_pool");
    if (rc != 0) {
   309ac:	b970      	cbnz	r0, 309cc <ble_l2cap_init+0x34>
        return BLE_HS_EOS;
    }

    rc = ble_l2cap_sig_init();
   309ae:	f000 fa69 	bl	30e84 <ble_l2cap_sig_init>
    if (rc != 0) {
   309b2:	b960      	cbnz	r0, 309ce <ble_l2cap_init+0x36>
    rc = ble_sm_init();
    if (rc != 0) {
        return rc;
    }

    rc = stats_init_and_reg(
   309b4:	4b0a      	ldr	r3, [pc, #40]	; (309e0 <ble_l2cap_init+0x48>)
   309b6:	9301      	str	r3, [sp, #4]
   309b8:	2300      	movs	r3, #0
   309ba:	9300      	str	r3, [sp, #0]
   309bc:	220a      	movs	r2, #10
   309be:	2104      	movs	r1, #4
   309c0:	4808      	ldr	r0, [pc, #32]	; (309e4 <ble_l2cap_init+0x4c>)
   309c2:	f7ed fab7 	bl	1df34 <stats_init_and_reg>
        STATS_HDR(ble_l2cap_stats), STATS_SIZE_INIT_PARMS(ble_l2cap_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_l2cap_stats), "ble_l2cap");
    if (rc != 0) {
   309c6:	b110      	cbz	r0, 309ce <ble_l2cap_init+0x36>
        return BLE_HS_EOS;
   309c8:	200b      	movs	r0, #11
   309ca:	e000      	b.n	309ce <ble_l2cap_init+0x36>
        return BLE_HS_EOS;
   309cc:	200b      	movs	r0, #11
    }

    return 0;
}
   309ce:	b003      	add	sp, #12
   309d0:	f85d fb04 	ldr.w	pc, [sp], #4
   309d4:	000398dc 	.word	0x000398dc
   309d8:	10005690 	.word	0x10005690
   309dc:	100056e4 	.word	0x100056e4
   309e0:	000398f0 	.word	0x000398f0
   309e4:	10005700 	.word	0x10005700

000309e8 <ble_l2cap_sig_next_id>:
 *****************************************************************************/

static uint8_t
ble_l2cap_sig_next_id(void)
{
    ble_l2cap_sig_cur_id++;
   309e8:	4a05      	ldr	r2, [pc, #20]	; (30a00 <ble_l2cap_sig_next_id+0x18>)
   309ea:	7813      	ldrb	r3, [r2, #0]
   309ec:	3301      	adds	r3, #1
   309ee:	b2db      	uxtb	r3, r3
   309f0:	7013      	strb	r3, [r2, #0]
    if (ble_l2cap_sig_cur_id == 0) {
   309f2:	b913      	cbnz	r3, 309fa <ble_l2cap_sig_next_id+0x12>
        /* An ID of 0 is illegal. */
        ble_l2cap_sig_cur_id = 1;
   309f4:	4613      	mov	r3, r2
   309f6:	2201      	movs	r2, #1
   309f8:	701a      	strb	r2, [r3, #0]
    }

    return ble_l2cap_sig_cur_id;
}
   309fa:	4b01      	ldr	r3, [pc, #4]	; (30a00 <ble_l2cap_sig_next_id+0x18>)
   309fc:	7818      	ldrb	r0, [r3, #0]
   309fe:	4770      	bx	lr
   30a00:	10005734 	.word	0x10005734

00030a04 <ble_l2cap_sig_dispatch_get>:

static ble_l2cap_sig_rx_fn *
ble_l2cap_sig_dispatch_get(uint8_t op)
{
    if (op >= BLE_L2CAP_SIG_OP_MAX) {
   30a04:	281a      	cmp	r0, #26
   30a06:	d803      	bhi.n	30a10 <ble_l2cap_sig_dispatch_get+0xc>
        return NULL;
    }

    return ble_l2cap_sig_dispatch[op];
   30a08:	4b02      	ldr	r3, [pc, #8]	; (30a14 <ble_l2cap_sig_dispatch_get+0x10>)
   30a0a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   30a0e:	4770      	bx	lr
        return NULL;
   30a10:	2000      	movs	r0, #0
}
   30a12:	4770      	bx	lr
   30a14:	00039914 	.word	0x00039914

00030a18 <ble_l2cap_sig_proc_matches>:
 * @return                      1 if the proc matches; 0 otherwise.
 */
static int
ble_l2cap_sig_proc_matches(struct ble_l2cap_sig_proc *proc,
                           uint16_t conn_handle, uint8_t op, uint8_t id)
{
   30a18:	b410      	push	{r4}
    if (conn_handle != proc->conn_handle) {
   30a1a:	8904      	ldrh	r4, [r0, #8]
   30a1c:	428c      	cmp	r4, r1
   30a1e:	d108      	bne.n	30a32 <ble_l2cap_sig_proc_matches+0x1a>
        return 0;
    }

    if (op != proc->op) {
   30a20:	7a81      	ldrb	r1, [r0, #10]
   30a22:	4291      	cmp	r1, r2
   30a24:	d108      	bne.n	30a38 <ble_l2cap_sig_proc_matches+0x20>
        return 0;
    }

    if (id != 0 && id != proc->id) {
   30a26:	b14b      	cbz	r3, 30a3c <ble_l2cap_sig_proc_matches+0x24>
   30a28:	7ac2      	ldrb	r2, [r0, #11]
   30a2a:	429a      	cmp	r2, r3
   30a2c:	d108      	bne.n	30a40 <ble_l2cap_sig_proc_matches+0x28>
        return 0;
    }

    return 1;
   30a2e:	2001      	movs	r0, #1
   30a30:	e000      	b.n	30a34 <ble_l2cap_sig_proc_matches+0x1c>
        return 0;
   30a32:	2000      	movs	r0, #0
}
   30a34:	bc10      	pop	{r4}
   30a36:	4770      	bx	lr
        return 0;
   30a38:	2000      	movs	r0, #0
   30a3a:	e7fb      	b.n	30a34 <ble_l2cap_sig_proc_matches+0x1c>
    return 1;
   30a3c:	2001      	movs	r0, #1
   30a3e:	e7f9      	b.n	30a34 <ble_l2cap_sig_proc_matches+0x1c>
        return 0;
   30a40:	2000      	movs	r0, #0
   30a42:	e7f7      	b.n	30a34 <ble_l2cap_sig_proc_matches+0x1c>

00030a44 <ble_l2cap_sig_rx_noop>:
ble_l2cap_sig_rx_noop(uint16_t conn_handle,
                      struct ble_l2cap_sig_hdr *hdr,
                      struct os_mbuf **om)
{
    return BLE_HS_ENOTSUP;
}
   30a44:	2008      	movs	r0, #8
   30a46:	4770      	bx	lr

00030a48 <ble_l2cap_sig_update_call_cb>:
 * $update                                                                   *
 *****************************************************************************/

static void
ble_l2cap_sig_update_call_cb(struct ble_l2cap_sig_proc *proc, int status)
{
   30a48:	b510      	push	{r4, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (status != 0) {
   30a4a:	460c      	mov	r4, r1
   30a4c:	b119      	cbz	r1, 30a56 <ble_l2cap_sig_update_call_cb+0xe>
        STATS_INC(ble_l2cap_stats, update_fail);
   30a4e:	4a05      	ldr	r2, [pc, #20]	; (30a64 <ble_l2cap_sig_update_call_cb+0x1c>)
   30a50:	69d3      	ldr	r3, [r2, #28]
   30a52:	3301      	adds	r3, #1
   30a54:	61d3      	str	r3, [r2, #28]
    }

    if (proc->update.cb != NULL) {
   30a56:	68c3      	ldr	r3, [r0, #12]
   30a58:	b11b      	cbz	r3, 30a62 <ble_l2cap_sig_update_call_cb+0x1a>
        proc->update.cb(proc->conn_handle, status, proc->update.cb_arg);
   30a5a:	6902      	ldr	r2, [r0, #16]
   30a5c:	4621      	mov	r1, r4
   30a5e:	8900      	ldrh	r0, [r0, #8]
   30a60:	4798      	blx	r3
    }
}
   30a62:	bd10      	pop	{r4, pc}
   30a64:	10005700 	.word	0x10005700

00030a68 <ble_l2cap_sig_proc_insert>:
{
   30a68:	b510      	push	{r4, lr}
   30a6a:	4604      	mov	r4, r0
    ble_hs_lock();
   30a6c:	f7fd fa90 	bl	2df90 <ble_hs_lock>
    STAILQ_INSERT_HEAD(&ble_l2cap_sig_procs, proc, next);
   30a70:	4b05      	ldr	r3, [pc, #20]	; (30a88 <ble_l2cap_sig_proc_insert+0x20>)
   30a72:	681b      	ldr	r3, [r3, #0]
   30a74:	6023      	str	r3, [r4, #0]
   30a76:	b123      	cbz	r3, 30a82 <ble_l2cap_sig_proc_insert+0x1a>
   30a78:	4b03      	ldr	r3, [pc, #12]	; (30a88 <ble_l2cap_sig_proc_insert+0x20>)
   30a7a:	601c      	str	r4, [r3, #0]
    ble_hs_unlock();
   30a7c:	f7fd fa8c 	bl	2df98 <ble_hs_unlock>
}
   30a80:	bd10      	pop	{r4, pc}
    STAILQ_INSERT_HEAD(&ble_l2cap_sig_procs, proc, next);
   30a82:	4b01      	ldr	r3, [pc, #4]	; (30a88 <ble_l2cap_sig_proc_insert+0x20>)
   30a84:	605c      	str	r4, [r3, #4]
   30a86:	e7f7      	b.n	30a78 <ble_l2cap_sig_proc_insert+0x10>
   30a88:	10005768 	.word	0x10005768

00030a8c <ble_l2cap_sig_proc_extract>:
{
   30a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   30a90:	4607      	mov	r7, r0
   30a92:	460e      	mov	r6, r1
   30a94:	4615      	mov	r5, r2
    ble_hs_lock();
   30a96:	f7fd fa7b 	bl	2df90 <ble_hs_lock>
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   30a9a:	4b15      	ldr	r3, [pc, #84]	; (30af0 <ble_l2cap_sig_proc_extract+0x64>)
   30a9c:	f8d3 9000 	ldr.w	r9, [r3]
   30aa0:	464c      	mov	r4, r9
    prev = NULL;
   30aa2:	f04f 0800 	mov.w	r8, #0
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   30aa6:	b194      	cbz	r4, 30ace <ble_l2cap_sig_proc_extract+0x42>
        if (ble_l2cap_sig_proc_matches(proc, conn_handle, op, identifier)) {
   30aa8:	462b      	mov	r3, r5
   30aaa:	4632      	mov	r2, r6
   30aac:	4639      	mov	r1, r7
   30aae:	4620      	mov	r0, r4
   30ab0:	f7ff ffb2 	bl	30a18 <ble_l2cap_sig_proc_matches>
   30ab4:	b910      	cbnz	r0, 30abc <ble_l2cap_sig_proc_extract+0x30>
        prev = proc;
   30ab6:	46a0      	mov	r8, r4
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   30ab8:	6824      	ldr	r4, [r4, #0]
   30aba:	e7f4      	b.n	30aa6 <ble_l2cap_sig_proc_extract+0x1a>
            if (prev == NULL) {
   30abc:	f1b8 0f00 	cmp.w	r8, #0
   30ac0:	d00a      	beq.n	30ad8 <ble_l2cap_sig_proc_extract+0x4c>
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
   30ac2:	f8d8 3000 	ldr.w	r3, [r8]
   30ac6:	681b      	ldr	r3, [r3, #0]
   30ac8:	f8c8 3000 	str.w	r3, [r8]
   30acc:	b163      	cbz	r3, 30ae8 <ble_l2cap_sig_proc_extract+0x5c>
    ble_hs_unlock();
   30ace:	f7fd fa63 	bl	2df98 <ble_hs_unlock>
}
   30ad2:	4620      	mov	r0, r4
   30ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   30ad8:	f8d9 3000 	ldr.w	r3, [r9]
   30adc:	4a04      	ldr	r2, [pc, #16]	; (30af0 <ble_l2cap_sig_proc_extract+0x64>)
   30ade:	6013      	str	r3, [r2, #0]
   30ae0:	2b00      	cmp	r3, #0
   30ae2:	d1f4      	bne.n	30ace <ble_l2cap_sig_proc_extract+0x42>
   30ae4:	6052      	str	r2, [r2, #4]
   30ae6:	e7f2      	b.n	30ace <ble_l2cap_sig_proc_extract+0x42>
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
   30ae8:	4b01      	ldr	r3, [pc, #4]	; (30af0 <ble_l2cap_sig_proc_extract+0x64>)
   30aea:	f8c3 8004 	str.w	r8, [r3, #4]
   30aee:	e7ee      	b.n	30ace <ble_l2cap_sig_proc_extract+0x42>
   30af0:	10005768 	.word	0x10005768

00030af4 <ble_l2cap_sig_proc_alloc>:
{
   30af4:	b508      	push	{r3, lr}
    proc = os_memblock_get(&ble_l2cap_sig_proc_pool);
   30af6:	4806      	ldr	r0, [pc, #24]	; (30b10 <ble_l2cap_sig_proc_alloc+0x1c>)
   30af8:	f7e9 f9a8 	bl	19e4c <os_memblock_get>
    if (proc != NULL) {
   30afc:	4603      	mov	r3, r0
   30afe:	b128      	cbz	r0, 30b0c <ble_l2cap_sig_proc_alloc+0x18>
        memset(proc, 0, sizeof *proc);
   30b00:	2200      	movs	r2, #0
   30b02:	6002      	str	r2, [r0, #0]
   30b04:	6042      	str	r2, [r0, #4]
   30b06:	6082      	str	r2, [r0, #8]
   30b08:	60c2      	str	r2, [r0, #12]
   30b0a:	6102      	str	r2, [r0, #16]
}
   30b0c:	4618      	mov	r0, r3
   30b0e:	bd08      	pop	{r3, pc}
   30b10:	1000574c 	.word	0x1000574c

00030b14 <ble_l2cap_sig_proc_set_timer>:
{
   30b14:	b510      	push	{r4, lr}
   30b16:	4604      	mov	r4, r0
   30b18:	f7e9 fd96 	bl	1a648 <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   30b1c:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   30b20:	6060      	str	r0, [r4, #4]
    ble_hs_timer_resched();
   30b22:	f7fd fb27 	bl	2e174 <ble_hs_timer_resched>
}
   30b26:	bd10      	pop	{r4, pc}

00030b28 <ble_l2cap_sig_extract_expired>:
 * @return                      The number of ticks until the next expiration
 *                                  occurs.
 */
static int32_t
ble_l2cap_sig_extract_expired(struct ble_l2cap_sig_proc_list *dst_list)
{
   30b28:	b570      	push	{r4, r5, r6, lr}
   30b2a:	4604      	mov	r4, r0
   30b2c:	f7e9 fd8c 	bl	1a648 <os_time_get>
   30b30:	4605      	mov	r5, r0
    ble_npl_time_t now;
    ble_npl_stime_t next_exp_in;
    ble_npl_stime_t time_diff;

    now = ble_npl_time_get();
    STAILQ_INIT(dst_list);
   30b32:	2300      	movs	r3, #0
   30b34:	6023      	str	r3, [r4, #0]
   30b36:	6064      	str	r4, [r4, #4]

    /* Assume each event is either expired or has infinite duration. */
    next_exp_in = BLE_HS_FOREVER;

    ble_hs_lock();
   30b38:	f7fd fa2a 	bl	2df90 <ble_hs_lock>

    prev = NULL;
    proc = STAILQ_FIRST(&ble_l2cap_sig_procs);
   30b3c:	4b0f      	ldr	r3, [pc, #60]	; (30b7c <ble_l2cap_sig_extract_expired+0x54>)
   30b3e:	681b      	ldr	r3, [r3, #0]
    next_exp_in = BLE_HS_FOREVER;
   30b40:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    while (proc != NULL) {
   30b44:	e00a      	b.n	30b5c <ble_l2cap_sig_extract_expired+0x34>

        time_diff = proc->exp_os_ticks - now;
        if (time_diff <= 0) {
            /* Procedure has expired; move it to the destination list. */
            if (prev == NULL) {
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   30b46:	480d      	ldr	r0, [pc, #52]	; (30b7c <ble_l2cap_sig_extract_expired+0x54>)
   30b48:	6802      	ldr	r2, [r0, #0]
   30b4a:	6812      	ldr	r2, [r2, #0]
   30b4c:	6002      	str	r2, [r0, #0]
   30b4e:	b17a      	cbz	r2, 30b70 <ble_l2cap_sig_extract_expired+0x48>
            } else {
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
            }
            STAILQ_INSERT_TAIL(dst_list, proc, next);
   30b50:	2200      	movs	r2, #0
   30b52:	601a      	str	r2, [r3, #0]
   30b54:	6862      	ldr	r2, [r4, #4]
   30b56:	6013      	str	r3, [r2, #0]
   30b58:	6063      	str	r3, [r4, #4]
        } else {
            if (time_diff < next_exp_in) {
                next_exp_in = time_diff;
   30b5a:	460b      	mov	r3, r1
    while (proc != NULL) {
   30b5c:	b153      	cbz	r3, 30b74 <ble_l2cap_sig_extract_expired+0x4c>
        next = STAILQ_NEXT(proc, next);
   30b5e:	6819      	ldr	r1, [r3, #0]
        time_diff = proc->exp_os_ticks - now;
   30b60:	685a      	ldr	r2, [r3, #4]
   30b62:	1b52      	subs	r2, r2, r5
        if (time_diff <= 0) {
   30b64:	2a00      	cmp	r2, #0
   30b66:	ddee      	ble.n	30b46 <ble_l2cap_sig_extract_expired+0x1e>
            if (time_diff < next_exp_in) {
   30b68:	4296      	cmp	r6, r2
   30b6a:	ddf6      	ble.n	30b5a <ble_l2cap_sig_extract_expired+0x32>
                next_exp_in = time_diff;
   30b6c:	4616      	mov	r6, r2
   30b6e:	e7f4      	b.n	30b5a <ble_l2cap_sig_extract_expired+0x32>
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   30b70:	6040      	str	r0, [r0, #4]
   30b72:	e7ed      	b.n	30b50 <ble_l2cap_sig_extract_expired+0x28>
        }

        proc = next;
    }

    ble_hs_unlock();
   30b74:	f7fd fa10 	bl	2df98 <ble_hs_unlock>

    return next_exp_in;
}
   30b78:	4630      	mov	r0, r6
   30b7a:	bd70      	pop	{r4, r5, r6, pc}
   30b7c:	10005768 	.word	0x10005768

00030b80 <ble_l2cap_sig_proc_free>:
    if (proc != NULL) {
   30b80:	b128      	cbz	r0, 30b8e <ble_l2cap_sig_proc_free+0xe>
{
   30b82:	b508      	push	{r3, lr}
   30b84:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_l2cap_sig_proc_pool, proc);
   30b86:	4802      	ldr	r0, [pc, #8]	; (30b90 <ble_l2cap_sig_proc_free+0x10>)
   30b88:	f7e9 f988 	bl	19e9c <os_memblock_put>
}
   30b8c:	bd08      	pop	{r3, pc}
   30b8e:	4770      	bx	lr
   30b90:	1000574c 	.word	0x1000574c

00030b94 <ble_l2cap_sig_process_status>:
{
   30b94:	b510      	push	{r4, lr}
   30b96:	4604      	mov	r4, r0
    if (status == 0) {
   30b98:	b929      	cbnz	r1, 30ba6 <ble_l2cap_sig_process_status+0x12>
        ble_l2cap_sig_proc_set_timer(proc);
   30b9a:	f7ff ffbb 	bl	30b14 <ble_l2cap_sig_proc_set_timer>
        ble_l2cap_sig_proc_insert(proc);
   30b9e:	4620      	mov	r0, r4
   30ba0:	f7ff ff62 	bl	30a68 <ble_l2cap_sig_proc_insert>
}
   30ba4:	bd10      	pop	{r4, pc}
        ble_l2cap_sig_proc_free(proc);
   30ba6:	f7ff ffeb 	bl	30b80 <ble_l2cap_sig_proc_free>
}
   30baa:	e7fb      	b.n	30ba4 <ble_l2cap_sig_process_status+0x10>

00030bac <ble_l2cap_sig_rx_reject>:
{
   30bac:	b508      	push	{r3, lr}
    proc = ble_l2cap_sig_proc_extract(conn_handle,
   30bae:	784a      	ldrb	r2, [r1, #1]
   30bb0:	2101      	movs	r1, #1
   30bb2:	f7ff ff6b 	bl	30a8c <ble_l2cap_sig_proc_extract>
   if (!proc) {
   30bb6:	b108      	cbz	r0, 30bbc <ble_l2cap_sig_rx_reject+0x10>
   ble_l2cap_sig_proc_free(proc);
   30bb8:	f7ff ffe2 	bl	30b80 <ble_l2cap_sig_proc_free>
}
   30bbc:	2000      	movs	r0, #0
   30bbe:	bd08      	pop	{r3, pc}

00030bc0 <ble_l2cap_sig_update_rsp_rx>:
{
   30bc0:	b570      	push	{r4, r5, r6, lr}
   30bc2:	4614      	mov	r4, r2
    proc = ble_l2cap_sig_proc_extract(conn_handle,
   30bc4:	784a      	ldrb	r2, [r1, #1]
   30bc6:	2100      	movs	r1, #0
   30bc8:	f7ff ff60 	bl	30a8c <ble_l2cap_sig_proc_extract>
    if (proc == NULL) {
   30bcc:	b1d8      	cbz	r0, 30c06 <ble_l2cap_sig_update_rsp_rx+0x46>
   30bce:	4606      	mov	r6, r0
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_UPDATE_RSP_SZ);
   30bd0:	2102      	movs	r1, #2
   30bd2:	4620      	mov	r0, r4
   30bd4:	f7ff fa02 	bl	2ffdc <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   30bd8:	4605      	mov	r5, r0
   30bda:	b938      	cbnz	r0, 30bec <ble_l2cap_sig_update_rsp_rx+0x2c>
    rsp = (struct ble_l2cap_sig_update_rsp *)(*om)->om_data;
   30bdc:	6823      	ldr	r3, [r4, #0]
   30bde:	681b      	ldr	r3, [r3, #0]
    switch (le16toh(rsp->result)) {
   30be0:	881b      	ldrh	r3, [r3, #0]
   30be2:	b163      	cbz	r3, 30bfe <ble_l2cap_sig_update_rsp_rx+0x3e>
   30be4:	2b01      	cmp	r3, #1
   30be6:	d10c      	bne.n	30c02 <ble_l2cap_sig_update_rsp_rx+0x42>
        cb_status = BLE_HS_EREJECT;
   30be8:	2110      	movs	r1, #16
   30bea:	e000      	b.n	30bee <ble_l2cap_sig_update_rsp_rx+0x2e>
        cb_status = rc;
   30bec:	4601      	mov	r1, r0
    ble_l2cap_sig_update_call_cb(proc, cb_status);
   30bee:	4630      	mov	r0, r6
   30bf0:	f7ff ff2a 	bl	30a48 <ble_l2cap_sig_update_call_cb>
    ble_l2cap_sig_proc_free(proc);
   30bf4:	4630      	mov	r0, r6
   30bf6:	f7ff ffc3 	bl	30b80 <ble_l2cap_sig_proc_free>
}
   30bfa:	4628      	mov	r0, r5
   30bfc:	bd70      	pop	{r4, r5, r6, pc}
    switch (le16toh(rsp->result)) {
   30bfe:	4601      	mov	r1, r0
   30c00:	e7f5      	b.n	30bee <ble_l2cap_sig_update_rsp_rx+0x2e>
        cb_status = BLE_HS_EBADDATA;
   30c02:	210a      	movs	r1, #10
   30c04:	e7f3      	b.n	30bee <ble_l2cap_sig_update_rsp_rx+0x2e>
        return 0;
   30c06:	2500      	movs	r5, #0
   30c08:	e7f7      	b.n	30bfa <ble_l2cap_sig_update_rsp_rx+0x3a>
	...

00030c0c <ble_l2cap_sig_rx>:
{
   30c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   30c0e:	b085      	sub	sp, #20
   30c10:	4604      	mov	r4, r0
    conn_handle = chan->conn_handle;
   30c12:	8887      	ldrh	r7, [r0, #4]
    om = &chan->rx_buf;
   30c14:	f100 0610 	add.w	r6, r0, #16
    STATS_INC(ble_l2cap_stats, sig_rx);
   30c18:	4a1c      	ldr	r2, [pc, #112]	; (30c8c <ble_l2cap_sig_rx+0x80>)
   30c1a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   30c1c:	3301      	adds	r3, #1
   30c1e:	6293      	str	r3, [r2, #40]	; 0x28
    ble_hs_log_mbuf(*om);
   30c20:	6900      	ldr	r0, [r0, #16]
   30c22:	f7ff f971 	bl	2ff08 <ble_hs_log_mbuf>
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_HDR_SZ);
   30c26:	2104      	movs	r1, #4
   30c28:	4630      	mov	r0, r6
   30c2a:	f7ff f9d7 	bl	2ffdc <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   30c2e:	4605      	mov	r5, r0
   30c30:	b110      	cbz	r0, 30c38 <ble_l2cap_sig_rx+0x2c>
}
   30c32:	4628      	mov	r0, r5
   30c34:	b005      	add	sp, #20
   30c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ble_l2cap_sig_hdr_parse((*om)->om_data, (*om)->om_len, &hdr);
   30c38:	6923      	ldr	r3, [r4, #16]
   30c3a:	aa03      	add	r2, sp, #12
   30c3c:	88d9      	ldrh	r1, [r3, #6]
   30c3e:	6818      	ldr	r0, [r3, #0]
   30c40:	f000 f957 	bl	30ef2 <ble_l2cap_sig_hdr_parse>
    os_mbuf_adj(*om, BLE_L2CAP_SIG_HDR_SZ);
   30c44:	2104      	movs	r1, #4
   30c46:	6920      	ldr	r0, [r4, #16]
   30c48:	f7e8 fd8f 	bl	1976a <os_mbuf_adj>
    if (OS_MBUF_PKTLEN(*om) != hdr.length) {
   30c4c:	6923      	ldr	r3, [r4, #16]
   30c4e:	8a1a      	ldrh	r2, [r3, #16]
   30c50:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   30c54:	429a      	cmp	r2, r3
   30c56:	d117      	bne.n	30c88 <ble_l2cap_sig_rx+0x7c>
    rx_cb = ble_l2cap_sig_dispatch_get(hdr.op);
   30c58:	f89d 000c 	ldrb.w	r0, [sp, #12]
   30c5c:	f7ff fed2 	bl	30a04 <ble_l2cap_sig_dispatch_get>
    if (rx_cb == NULL) {
   30c60:	4603      	mov	r3, r0
   30c62:	b178      	cbz	r0, 30c84 <ble_l2cap_sig_rx+0x78>
        rc = rx_cb(conn_handle, &hdr, om);
   30c64:	4632      	mov	r2, r6
   30c66:	a903      	add	r1, sp, #12
   30c68:	4638      	mov	r0, r7
   30c6a:	4798      	blx	r3
    if (rc) {
   30c6c:	4605      	mov	r5, r0
   30c6e:	2800      	cmp	r0, #0
   30c70:	d0df      	beq.n	30c32 <ble_l2cap_sig_rx+0x26>
        ble_l2cap_sig_reject_tx(conn_handle, hdr.identifier,
   30c72:	2200      	movs	r2, #0
   30c74:	9200      	str	r2, [sp, #0]
   30c76:	4613      	mov	r3, r2
   30c78:	f89d 100d 	ldrb.w	r1, [sp, #13]
   30c7c:	4638      	mov	r0, r7
   30c7e:	f000 f95f 	bl	30f40 <ble_l2cap_sig_reject_tx>
   30c82:	e7d6      	b.n	30c32 <ble_l2cap_sig_rx+0x26>
        rc = BLE_HS_EREJECT;
   30c84:	2510      	movs	r5, #16
   30c86:	e7f4      	b.n	30c72 <ble_l2cap_sig_rx+0x66>
        return BLE_HS_EBADDATA;
   30c88:	250a      	movs	r5, #10
   30c8a:	e7d2      	b.n	30c32 <ble_l2cap_sig_rx+0x26>
   30c8c:	10005700 	.word	0x10005700

00030c90 <ble_l2cap_sig_update_req_rx>:
{
   30c90:	b5f0      	push	{r4, r5, r6, r7, lr}
   30c92:	b087      	sub	sp, #28
   30c94:	4607      	mov	r7, r0
   30c96:	460e      	mov	r6, r1
   30c98:	4614      	mov	r4, r2
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_UPDATE_REQ_SZ);
   30c9a:	2108      	movs	r1, #8
   30c9c:	4610      	mov	r0, r2
   30c9e:	f7ff f99d 	bl	2ffdc <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   30ca2:	4605      	mov	r5, r0
   30ca4:	b110      	cbz	r0, 30cac <ble_l2cap_sig_update_req_rx+0x1c>
}
   30ca6:	4628      	mov	r0, r5
   30ca8:	b007      	add	sp, #28
   30caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = ble_hs_atomic_conn_flags(conn_handle, &conn_flags);
   30cac:	f10d 0107 	add.w	r1, sp, #7
   30cb0:	4638      	mov	r0, r7
   30cb2:	f7fe f8f0 	bl	2ee96 <ble_hs_atomic_conn_flags>
    if (rc != 0) {
   30cb6:	4605      	mov	r5, r0
   30cb8:	2800      	cmp	r0, #0
   30cba:	d1f4      	bne.n	30ca6 <ble_l2cap_sig_update_req_rx+0x16>
    sig_err = !(conn_flags & BLE_HS_CONN_F_MASTER);
   30cbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (sig_err) {
   30cc0:	f013 0f01 	tst.w	r3, #1
   30cc4:	d030      	beq.n	30d28 <ble_l2cap_sig_update_req_rx+0x98>
    req = (struct ble_l2cap_sig_update_req *)(*om)->om_data;
   30cc6:	6823      	ldr	r3, [r4, #0]
   30cc8:	681b      	ldr	r3, [r3, #0]
    params.itvl_min = le16toh(req->itvl_min);
   30cca:	881a      	ldrh	r2, [r3, #0]
   30ccc:	f8ad 2008 	strh.w	r2, [sp, #8]
    params.itvl_max = le16toh(req->itvl_max);
   30cd0:	885a      	ldrh	r2, [r3, #2]
   30cd2:	f8ad 200a 	strh.w	r2, [sp, #10]
    params.latency = le16toh(req->slave_latency);
   30cd6:	889a      	ldrh	r2, [r3, #4]
   30cd8:	f8ad 200c 	strh.w	r2, [sp, #12]
    params.supervision_timeout = le16toh(req->timeout_multiplier);
   30cdc:	88db      	ldrh	r3, [r3, #6]
   30cde:	f8ad 300e 	strh.w	r3, [sp, #14]
    params.min_ce_len = BLE_GAP_INITIAL_CONN_MIN_CE_LEN;
   30ce2:	2300      	movs	r3, #0
   30ce4:	f8ad 3010 	strh.w	r3, [sp, #16]
    params.max_ce_len = BLE_GAP_INITIAL_CONN_MAX_CE_LEN;
   30ce8:	f8ad 3012 	strh.w	r3, [sp, #18]
    rc = ble_gap_rx_l2cap_update_req(conn_handle, &params);
   30cec:	a902      	add	r1, sp, #8
   30cee:	4638      	mov	r0, r7
   30cf0:	f7f8 fddb 	bl	298aa <ble_gap_rx_l2cap_update_req>
    if (rc == 0) {
   30cf4:	4603      	mov	r3, r0
   30cf6:	b178      	cbz	r0, 30d18 <ble_l2cap_sig_update_req_rx+0x88>
    if (rc == 0) {
   30cf8:	b9a3      	cbnz	r3, 30d24 <ble_l2cap_sig_update_req_rx+0x94>
        l2cap_result = BLE_L2CAP_SIG_UPDATE_RSP_RESULT_ACCEPT;
   30cfa:	2400      	movs	r4, #0
    rsp = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_UPDATE_RSP, hdr->identifier,
   30cfc:	ab05      	add	r3, sp, #20
   30cfe:	2202      	movs	r2, #2
   30d00:	7871      	ldrb	r1, [r6, #1]
   30d02:	2013      	movs	r0, #19
   30d04:	f000 f8fc 	bl	30f00 <ble_l2cap_sig_cmd_get>
    if (!rsp) {
   30d08:	2800      	cmp	r0, #0
   30d0a:	d0cc      	beq.n	30ca6 <ble_l2cap_sig_update_req_rx+0x16>
    rsp->result = htole16(l2cap_result);
   30d0c:	8004      	strh	r4, [r0, #0]
    ble_l2cap_sig_tx(conn_handle, txom);
   30d0e:	9905      	ldr	r1, [sp, #20]
   30d10:	4638      	mov	r0, r7
   30d12:	f000 f8d1 	bl	30eb8 <ble_l2cap_sig_tx>
    return 0;
   30d16:	e7c6      	b.n	30ca6 <ble_l2cap_sig_update_req_rx+0x16>
        rc = ble_gap_update_params(conn_handle, &params);
   30d18:	a902      	add	r1, sp, #8
   30d1a:	4638      	mov	r0, r7
   30d1c:	f7f9 fc16 	bl	2a54c <ble_gap_update_params>
   30d20:	4603      	mov	r3, r0
   30d22:	e7e9      	b.n	30cf8 <ble_l2cap_sig_update_req_rx+0x68>
        l2cap_result = BLE_L2CAP_SIG_UPDATE_RSP_RESULT_REJECT;
   30d24:	2401      	movs	r4, #1
   30d26:	e7e9      	b.n	30cfc <ble_l2cap_sig_update_req_rx+0x6c>
        return BLE_HS_EREJECT;
   30d28:	2510      	movs	r5, #16
   30d2a:	e7bc      	b.n	30ca6 <ble_l2cap_sig_update_req_rx+0x16>

00030d2c <ble_l2cap_sig_update>:
{
   30d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   30d30:	b085      	sub	sp, #20
   30d32:	4604      	mov	r4, r0
   30d34:	460e      	mov	r6, r1
   30d36:	4691      	mov	r9, r2
   30d38:	4698      	mov	r8, r3
    STATS_INC(ble_l2cap_stats, update_init);
   30d3a:	4b29      	ldr	r3, [pc, #164]	; (30de0 <ble_l2cap_sig_update+0xb4>)
   30d3c:	6959      	ldr	r1, [r3, #20]
   30d3e:	3101      	adds	r1, #1
   30d40:	6159      	str	r1, [r3, #20]
    ble_hs_lock();
   30d42:	f7fd f925 	bl	2df90 <ble_hs_lock>
    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SIG,
   30d46:	ab02      	add	r3, sp, #8
   30d48:	aa01      	add	r2, sp, #4
   30d4a:	2105      	movs	r1, #5
   30d4c:	4620      	mov	r0, r4
   30d4e:	f7ff f989 	bl	30064 <ble_hs_misc_conn_chan_find_reqd>
    if (rc != 0) {
   30d52:	bb50      	cbnz	r0, 30daa <ble_l2cap_sig_update+0x7e>
    master = conn->bhc_flags & BLE_HS_CONN_F_MASTER;
   30d54:	9b01      	ldr	r3, [sp, #4]
   30d56:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
    ble_hs_unlock();
   30d5a:	f7fd f91d 	bl	2df98 <ble_hs_unlock>
    if (master) {
   30d5e:	f015 0f01 	tst.w	r5, #1
   30d62:	d13a      	bne.n	30dda <ble_l2cap_sig_update+0xae>
    proc = ble_l2cap_sig_proc_alloc();
   30d64:	f7ff fec6 	bl	30af4 <ble_l2cap_sig_proc_alloc>
    if (proc == NULL) {
   30d68:	4607      	mov	r7, r0
   30d6a:	b350      	cbz	r0, 30dc2 <ble_l2cap_sig_update+0x96>
    proc->op = BLE_L2CAP_SIG_PROC_OP_UPDATE;
   30d6c:	2300      	movs	r3, #0
   30d6e:	7283      	strb	r3, [r0, #10]
    proc->id = ble_l2cap_sig_next_id();
   30d70:	f7ff fe3a 	bl	309e8 <ble_l2cap_sig_next_id>
   30d74:	4601      	mov	r1, r0
   30d76:	72f8      	strb	r0, [r7, #11]
    proc->conn_handle = conn_handle;
   30d78:	813c      	strh	r4, [r7, #8]
    proc->update.cb = cb;
   30d7a:	f8c7 900c 	str.w	r9, [r7, #12]
    proc->update.cb_arg = cb_arg;
   30d7e:	f8c7 8010 	str.w	r8, [r7, #16]
    req = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_UPDATE_REQ, proc->id,
   30d82:	ab03      	add	r3, sp, #12
   30d84:	2208      	movs	r2, #8
   30d86:	2012      	movs	r0, #18
   30d88:	f000 f8ba 	bl	30f00 <ble_l2cap_sig_cmd_get>
    if (!req) {
   30d8c:	b1f8      	cbz	r0, 30dce <ble_l2cap_sig_update+0xa2>
    req->itvl_min = htole16(params->itvl_min);
   30d8e:	8832      	ldrh	r2, [r6, #0]
   30d90:	8002      	strh	r2, [r0, #0]
    req->itvl_max = htole16(params->itvl_max);
   30d92:	8872      	ldrh	r2, [r6, #2]
   30d94:	8042      	strh	r2, [r0, #2]
    req->slave_latency = htole16(params->slave_latency);
   30d96:	88b2      	ldrh	r2, [r6, #4]
   30d98:	8082      	strh	r2, [r0, #4]
    req->timeout_multiplier = htole16(params->timeout_multiplier);
   30d9a:	88f2      	ldrh	r2, [r6, #6]
   30d9c:	80c2      	strh	r2, [r0, #6]
    rc = ble_l2cap_sig_tx(conn_handle, txom);
   30d9e:	9903      	ldr	r1, [sp, #12]
   30da0:	4620      	mov	r0, r4
   30da2:	f000 f889 	bl	30eb8 <ble_l2cap_sig_tx>
   30da6:	4605      	mov	r5, r0
   30da8:	e003      	b.n	30db2 <ble_l2cap_sig_update+0x86>
   30daa:	4605      	mov	r5, r0
        ble_hs_unlock();
   30dac:	f7fd f8f4 	bl	2df98 <ble_hs_unlock>
    proc = NULL;
   30db0:	2700      	movs	r7, #0
    ble_l2cap_sig_process_status(proc, rc);
   30db2:	4629      	mov	r1, r5
   30db4:	4638      	mov	r0, r7
   30db6:	f7ff feed 	bl	30b94 <ble_l2cap_sig_process_status>
}
   30dba:	4628      	mov	r0, r5
   30dbc:	b005      	add	sp, #20
   30dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        STATS_INC(ble_l2cap_stats, update_fail);
   30dc2:	4a07      	ldr	r2, [pc, #28]	; (30de0 <ble_l2cap_sig_update+0xb4>)
   30dc4:	69d3      	ldr	r3, [r2, #28]
   30dc6:	3301      	adds	r3, #1
   30dc8:	61d3      	str	r3, [r2, #28]
        rc = BLE_HS_ENOMEM;
   30dca:	2506      	movs	r5, #6
        goto done;
   30dcc:	e7f1      	b.n	30db2 <ble_l2cap_sig_update+0x86>
        STATS_INC(ble_l2cap_stats, update_fail);
   30dce:	4a04      	ldr	r2, [pc, #16]	; (30de0 <ble_l2cap_sig_update+0xb4>)
   30dd0:	69d3      	ldr	r3, [r2, #28]
   30dd2:	3301      	adds	r3, #1
   30dd4:	61d3      	str	r3, [r2, #28]
        rc = BLE_HS_ENOMEM;
   30dd6:	2506      	movs	r5, #6
        goto done;
   30dd8:	e7eb      	b.n	30db2 <ble_l2cap_sig_update+0x86>
        rc = BLE_HS_EINVAL;
   30dda:	2503      	movs	r5, #3
    proc = NULL;
   30ddc:	2700      	movs	r7, #0
   30dde:	e7e8      	b.n	30db2 <ble_l2cap_sig_update+0x86>
   30de0:	10005700 	.word	0x10005700

00030de4 <ble_l2cap_sig_create_chan>:
{
   30de4:	b508      	push	{r3, lr}
    chan = ble_l2cap_chan_alloc(conn_handle);
   30de6:	f7ff fcbd 	bl	30764 <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   30dea:	4603      	mov	r3, r0
   30dec:	b130      	cbz	r0, 30dfc <ble_l2cap_sig_create_chan+0x18>
    chan->scid = BLE_L2CAP_CID_SIG;
   30dee:	2205      	movs	r2, #5
   30df0:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_SIG;
   30df2:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = BLE_L2CAP_SIG_MTU;
   30df4:	2264      	movs	r2, #100	; 0x64
   30df6:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_l2cap_sig_rx;
   30df8:	4a01      	ldr	r2, [pc, #4]	; (30e00 <ble_l2cap_sig_create_chan+0x1c>)
   30dfa:	6182      	str	r2, [r0, #24]
}
   30dfc:	4618      	mov	r0, r3
   30dfe:	bd08      	pop	{r3, pc}
   30e00:	00030c0d 	.word	0x00030c0d

00030e04 <ble_l2cap_sig_conn_broken>:

void
ble_l2cap_sig_conn_broken(uint16_t conn_handle, int reason)
{
   30e04:	b538      	push	{r3, r4, r5, lr}
   30e06:	460d      	mov	r5, r1
    struct ble_l2cap_sig_proc *proc;

    /* Report a failure for each timed out procedure. */
    while ((proc = STAILQ_FIRST(&ble_l2cap_sig_procs)) != NULL) {
   30e08:	e00b      	b.n	30e22 <ble_l2cap_sig_conn_broken+0x1e>
        switch(proc->op) {
            case BLE_L2CAP_SIG_PROC_OP_UPDATE:
                ble_l2cap_sig_update_call_cb(proc, reason);
   30e0a:	4629      	mov	r1, r5
   30e0c:	4620      	mov	r0, r4
   30e0e:	f7ff fe1b 	bl	30a48 <ble_l2cap_sig_update_call_cb>
            break;
#endif
#endif
            }

            STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   30e12:	4a09      	ldr	r2, [pc, #36]	; (30e38 <ble_l2cap_sig_conn_broken+0x34>)
   30e14:	6813      	ldr	r3, [r2, #0]
   30e16:	681b      	ldr	r3, [r3, #0]
   30e18:	6013      	str	r3, [r2, #0]
   30e1a:	b14b      	cbz	r3, 30e30 <ble_l2cap_sig_conn_broken+0x2c>
            ble_l2cap_sig_proc_free(proc);
   30e1c:	4620      	mov	r0, r4
   30e1e:	f7ff feaf 	bl	30b80 <ble_l2cap_sig_proc_free>
    while ((proc = STAILQ_FIRST(&ble_l2cap_sig_procs)) != NULL) {
   30e22:	4b05      	ldr	r3, [pc, #20]	; (30e38 <ble_l2cap_sig_conn_broken+0x34>)
   30e24:	681c      	ldr	r4, [r3, #0]
   30e26:	b12c      	cbz	r4, 30e34 <ble_l2cap_sig_conn_broken+0x30>
        switch(proc->op) {
   30e28:	7aa3      	ldrb	r3, [r4, #10]
   30e2a:	2b00      	cmp	r3, #0
   30e2c:	d1f1      	bne.n	30e12 <ble_l2cap_sig_conn_broken+0xe>
   30e2e:	e7ec      	b.n	30e0a <ble_l2cap_sig_conn_broken+0x6>
            STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   30e30:	6052      	str	r2, [r2, #4]
   30e32:	e7f3      	b.n	30e1c <ble_l2cap_sig_conn_broken+0x18>
    }

}
   30e34:	bd38      	pop	{r3, r4, r5, pc}
   30e36:	bf00      	nop
   30e38:	10005768 	.word	0x10005768

00030e3c <ble_l2cap_sig_timer>:
 * @return                      The number of ticks until this function should
 *                                  be called again.
 */
int32_t
ble_l2cap_sig_timer(void)
{
   30e3c:	b530      	push	{r4, r5, lr}
   30e3e:	b083      	sub	sp, #12

    /* Remove timed-out procedures from the main list and insert them into a
     * temporary list.  This function also calculates the number of ticks until
     * the next expiration will occur.
     */
    ticks_until_exp = ble_l2cap_sig_extract_expired(&temp_list);
   30e40:	4668      	mov	r0, sp
   30e42:	f7ff fe71 	bl	30b28 <ble_l2cap_sig_extract_expired>
   30e46:	4605      	mov	r5, r0

    /* Report a failure for each timed out procedure. */
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   30e48:	e00a      	b.n	30e60 <ble_l2cap_sig_timer+0x24>
        STATS_INC(ble_l2cap_stats, proc_timeout);
        switch(proc->op) {
            case BLE_L2CAP_SIG_PROC_OP_UPDATE:
                ble_l2cap_sig_update_call_cb(proc, BLE_HS_ETIMEOUT);
   30e4a:	210d      	movs	r1, #13
   30e4c:	4620      	mov	r0, r4
   30e4e:	f7ff fdfb 	bl	30a48 <ble_l2cap_sig_update_call_cb>
                ble_l2cap_sig_coc_disconnect_cb(proc, BLE_HS_ETIMEOUT);
            break;
#endif
        }

        STAILQ_REMOVE_HEAD(&temp_list, next);
   30e52:	9b00      	ldr	r3, [sp, #0]
   30e54:	681b      	ldr	r3, [r3, #0]
   30e56:	9300      	str	r3, [sp, #0]
   30e58:	b163      	cbz	r3, 30e74 <ble_l2cap_sig_timer+0x38>
        ble_l2cap_sig_proc_free(proc);
   30e5a:	4620      	mov	r0, r4
   30e5c:	f7ff fe90 	bl	30b80 <ble_l2cap_sig_proc_free>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   30e60:	9c00      	ldr	r4, [sp, #0]
   30e62:	b154      	cbz	r4, 30e7a <ble_l2cap_sig_timer+0x3e>
        STATS_INC(ble_l2cap_stats, proc_timeout);
   30e64:	4a06      	ldr	r2, [pc, #24]	; (30e80 <ble_l2cap_sig_timer+0x44>)
   30e66:	6a13      	ldr	r3, [r2, #32]
   30e68:	3301      	adds	r3, #1
   30e6a:	6213      	str	r3, [r2, #32]
        switch(proc->op) {
   30e6c:	7aa3      	ldrb	r3, [r4, #10]
   30e6e:	2b00      	cmp	r3, #0
   30e70:	d1ef      	bne.n	30e52 <ble_l2cap_sig_timer+0x16>
   30e72:	e7ea      	b.n	30e4a <ble_l2cap_sig_timer+0xe>
        STAILQ_REMOVE_HEAD(&temp_list, next);
   30e74:	f8cd d004 	str.w	sp, [sp, #4]
   30e78:	e7ef      	b.n	30e5a <ble_l2cap_sig_timer+0x1e>
    }

    return ticks_until_exp;
}
   30e7a:	4628      	mov	r0, r5
   30e7c:	b003      	add	sp, #12
   30e7e:	bd30      	pop	{r4, r5, pc}
   30e80:	10005700 	.word	0x10005700

00030e84 <ble_l2cap_sig_init>:

int
ble_l2cap_sig_init(void)
{
   30e84:	b500      	push	{lr}
   30e86:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_l2cap_sig_procs);
   30e88:	4b07      	ldr	r3, [pc, #28]	; (30ea8 <ble_l2cap_sig_init+0x24>)
   30e8a:	2200      	movs	r2, #0
   30e8c:	601a      	str	r2, [r3, #0]
   30e8e:	605b      	str	r3, [r3, #4]

    rc = os_mempool_init(&ble_l2cap_sig_proc_pool,
   30e90:	4b06      	ldr	r3, [pc, #24]	; (30eac <ble_l2cap_sig_init+0x28>)
   30e92:	9300      	str	r3, [sp, #0]
   30e94:	4b06      	ldr	r3, [pc, #24]	; (30eb0 <ble_l2cap_sig_init+0x2c>)
   30e96:	2214      	movs	r2, #20
   30e98:	2101      	movs	r1, #1
   30e9a:	4806      	ldr	r0, [pc, #24]	; (30eb4 <ble_l2cap_sig_init+0x30>)
   30e9c:	f7e8 ff92 	bl	19dc4 <os_mempool_init>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   30ea0:	b003      	add	sp, #12
   30ea2:	f85d fb04 	ldr.w	pc, [sp], #4
   30ea6:	bf00      	nop
   30ea8:	10005768 	.word	0x10005768
   30eac:	000398fc 	.word	0x000398fc
   30eb0:	10005738 	.word	0x10005738
   30eb4:	1000574c 	.word	0x1000574c

00030eb8 <ble_l2cap_sig_tx>:

#if NIMBLE_BLE_CONNECT
/* this function consumes tx os_mbuf */
int
ble_l2cap_sig_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   30eb8:	b530      	push	{r4, r5, lr}
   30eba:	b083      	sub	sp, #12
   30ebc:	4605      	mov	r5, r0
   30ebe:	460c      	mov	r4, r1
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;
    int rc;

    ble_hs_lock();
   30ec0:	f7fd f866 	bl	2df90 <ble_hs_lock>
    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SIG,
   30ec4:	ab01      	add	r3, sp, #4
   30ec6:	466a      	mov	r2, sp
   30ec8:	2105      	movs	r1, #5
   30eca:	4628      	mov	r0, r5
   30ecc:	f7ff f8ca 	bl	30064 <ble_hs_misc_conn_chan_find_reqd>
                                         &conn, &chan);
    if (rc == 0) {
   30ed0:	b950      	cbnz	r0, 30ee8 <ble_l2cap_sig_tx+0x30>
        rc = ble_l2cap_tx(conn, chan, txom);
   30ed2:	4622      	mov	r2, r4
   30ed4:	9901      	ldr	r1, [sp, #4]
   30ed6:	9800      	ldr	r0, [sp, #0]
   30ed8:	f7ff fd3e 	bl	30958 <ble_l2cap_tx>
   30edc:	4605      	mov	r5, r0
    } else {
        os_mbuf_free_chain(txom);
    }
    ble_hs_unlock();
   30ede:	f7fd f85b 	bl	2df98 <ble_hs_unlock>

    return rc;
}
   30ee2:	4628      	mov	r0, r5
   30ee4:	b003      	add	sp, #12
   30ee6:	bd30      	pop	{r4, r5, pc}
   30ee8:	4605      	mov	r5, r0
        os_mbuf_free_chain(txom);
   30eea:	4620      	mov	r0, r4
   30eec:	f7e8 fb6f 	bl	195ce <os_mbuf_free_chain>
   30ef0:	e7f5      	b.n	30ede <ble_l2cap_sig_tx+0x26>

00030ef2 <ble_l2cap_sig_hdr_parse>:
{
    struct ble_l2cap_sig_hdr *src = payload;

    BLE_HS_DBG_ASSERT(len >= BLE_L2CAP_SIG_HDR_SZ);

    dst->op = src->op;
   30ef2:	7803      	ldrb	r3, [r0, #0]
   30ef4:	7013      	strb	r3, [r2, #0]
    dst->identifier = src->identifier;
   30ef6:	7843      	ldrb	r3, [r0, #1]
   30ef8:	7053      	strb	r3, [r2, #1]
    dst->length = le16toh(src->length);
   30efa:	8843      	ldrh	r3, [r0, #2]
   30efc:	8053      	strh	r3, [r2, #2]
}
   30efe:	4770      	bx	lr

00030f00 <ble_l2cap_sig_cmd_get>:
}

void *
ble_l2cap_sig_cmd_get(uint8_t opcode, uint8_t id, uint16_t len,
                      struct os_mbuf **txom)
{
   30f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30f04:	4680      	mov	r8, r0
   30f06:	460f      	mov	r7, r1
   30f08:	4616      	mov	r6, r2
   30f0a:	461d      	mov	r5, r3
    struct ble_l2cap_sig_hdr *hdr;

    *txom = ble_hs_mbuf_l2cap_pkt();
   30f0c:	f7ff f833 	bl	2ff76 <ble_hs_mbuf_l2cap_pkt>
   30f10:	4604      	mov	r4, r0
   30f12:	6028      	str	r0, [r5, #0]
    if (*txom == NULL) {
   30f14:	b160      	cbz	r0, 30f30 <ble_l2cap_sig_cmd_get+0x30>
        return NULL;
    }

    if (os_mbuf_extend(*txom, sizeof(*hdr) + len) == NULL) {
   30f16:	1d31      	adds	r1, r6, #4
   30f18:	b289      	uxth	r1, r1
   30f1a:	f7e8 fddb 	bl	19ad4 <os_mbuf_extend>
   30f1e:	4604      	mov	r4, r0
   30f20:	b148      	cbz	r0, 30f36 <ble_l2cap_sig_cmd_get+0x36>
        os_mbuf_free_chain(*txom);
        return NULL;
    }

    hdr = (struct ble_l2cap_sig_hdr *)(*txom)->om_data;
   30f22:	682b      	ldr	r3, [r5, #0]
   30f24:	681c      	ldr	r4, [r3, #0]

    hdr->op = opcode;
   30f26:	f884 8000 	strb.w	r8, [r4]
    hdr->identifier = id;
   30f2a:	7067      	strb	r7, [r4, #1]
    hdr->length = htole16(len);
   30f2c:	8066      	strh	r6, [r4, #2]

    return hdr->data;
   30f2e:	3404      	adds	r4, #4
}
   30f30:	4620      	mov	r0, r4
   30f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        os_mbuf_free_chain(*txom);
   30f36:	6828      	ldr	r0, [r5, #0]
   30f38:	f7e8 fb49 	bl	195ce <os_mbuf_free_chain>
        return NULL;
   30f3c:	e7f8      	b.n	30f30 <ble_l2cap_sig_cmd_get+0x30>
	...

00030f40 <ble_l2cap_sig_reject_tx>:
{
   30f40:	b5f0      	push	{r4, r5, r6, r7, lr}
   30f42:	b083      	sub	sp, #12
   30f44:	4604      	mov	r4, r0
   30f46:	4616      	mov	r6, r2
   30f48:	461d      	mov	r5, r3
   30f4a:	9f08      	ldr	r7, [sp, #32]
    cmd = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_REJECT, id,
   30f4c:	1cba      	adds	r2, r7, #2
   30f4e:	ab01      	add	r3, sp, #4
   30f50:	b292      	uxth	r2, r2
   30f52:	2001      	movs	r0, #1
   30f54:	f7ff ffd4 	bl	30f00 <ble_l2cap_sig_cmd_get>
    if (!cmd) {
   30f58:	b178      	cbz	r0, 30f7a <ble_l2cap_sig_reject_tx+0x3a>
    cmd->reason = htole16(reason);
   30f5a:	f820 6b02 	strh.w	r6, [r0], #2
    memcpy(cmd->data, data, data_len);
   30f5e:	463a      	mov	r2, r7
   30f60:	4629      	mov	r1, r5
   30f62:	f7e9 fe75 	bl	1ac50 <memcpy>
    STATS_INC(ble_l2cap_stats, sig_rx);
   30f66:	4a06      	ldr	r2, [pc, #24]	; (30f80 <ble_l2cap_sig_reject_tx+0x40>)
   30f68:	6a93      	ldr	r3, [r2, #40]	; 0x28
   30f6a:	3301      	adds	r3, #1
   30f6c:	6293      	str	r3, [r2, #40]	; 0x28
    return ble_l2cap_sig_tx(conn_handle, txom);
   30f6e:	9901      	ldr	r1, [sp, #4]
   30f70:	4620      	mov	r0, r4
   30f72:	f7ff ffa1 	bl	30eb8 <ble_l2cap_sig_tx>
}
   30f76:	b003      	add	sp, #12
   30f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   30f7a:	2006      	movs	r0, #6
   30f7c:	e7fb      	b.n	30f76 <ble_l2cap_sig_reject_tx+0x36>
   30f7e:	bf00      	nop
   30f80:	10005700 	.word	0x10005700

00030f84 <ble_l2cap_sig_reject_invalid_cid_tx>:
{
   30f84:	b500      	push	{lr}
   30f86:	b085      	sub	sp, #20
    } data = {
   30f88:	f8ad 300c 	strh.w	r3, [sp, #12]
   30f8c:	f8ad 200e 	strh.w	r2, [sp, #14]
    return ble_l2cap_sig_reject_tx(conn_handle, id,
   30f90:	2304      	movs	r3, #4
   30f92:	9300      	str	r3, [sp, #0]
   30f94:	ab03      	add	r3, sp, #12
   30f96:	2202      	movs	r2, #2
   30f98:	f7ff ffd2 	bl	30f40 <ble_l2cap_sig_reject_tx>
}
   30f9c:	b005      	add	sp, #20
   30f9e:	f85d fb04 	ldr.w	pc, [sp], #4

00030fa2 <ble_sm_rx>:
 * Failed with 'Pairing not Supported' reason so this function can be very
 * simple
 */
static int
ble_sm_rx(struct ble_l2cap_chan *chan)
{
   30fa2:	b510      	push	{r4, lr}
   30fa4:	b082      	sub	sp, #8
    struct ble_sm_pair_fail *cmd;
    struct os_mbuf *txom;
    uint16_t handle;
    int rc;

    handle = ble_l2cap_get_conn_handle(chan);
   30fa6:	f7ff fc3c 	bl	30822 <ble_l2cap_get_conn_handle>
    if (!handle) {
   30faa:	b1a0      	cbz	r0, 30fd6 <ble_sm_rx+0x34>
   30fac:	4604      	mov	r4, r0
        return BLE_HS_ENOTCONN;
    }

    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_FAIL, sizeof(*cmd), &txom);
   30fae:	aa01      	add	r2, sp, #4
   30fb0:	2101      	movs	r1, #1
   30fb2:	2005      	movs	r0, #5
   30fb4:	f000 f824 	bl	31000 <ble_sm_cmd_get>
    if (cmd == NULL) {
   30fb8:	b178      	cbz	r0, 30fda <ble_sm_rx+0x38>
        return BLE_HS_ENOMEM;
    }

    cmd->reason = BLE_SM_ERR_PAIR_NOT_SUPP;
   30fba:	2205      	movs	r2, #5
   30fbc:	7002      	strb	r2, [r0, #0]

    ble_hs_lock();
   30fbe:	f7fc ffe7 	bl	2df90 <ble_hs_lock>
    rc = ble_sm_tx(handle, txom);
   30fc2:	9901      	ldr	r1, [sp, #4]
   30fc4:	4620      	mov	r0, r4
   30fc6:	f000 f835 	bl	31034 <ble_sm_tx>
   30fca:	4604      	mov	r4, r0
    ble_hs_unlock();
   30fcc:	f7fc ffe4 	bl	2df98 <ble_hs_unlock>

    return rc;
}
   30fd0:	4620      	mov	r0, r4
   30fd2:	b002      	add	sp, #8
   30fd4:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOTCONN;
   30fd6:	2407      	movs	r4, #7
   30fd8:	e7fa      	b.n	30fd0 <ble_sm_rx+0x2e>
        return BLE_HS_ENOMEM;
   30fda:	2406      	movs	r4, #6
   30fdc:	e7f8      	b.n	30fd0 <ble_sm_rx+0x2e>
	...

00030fe0 <ble_sm_create_chan>:
#endif

struct ble_l2cap_chan *
ble_sm_create_chan(uint16_t conn_handle)
{
   30fe0:	b508      	push	{r3, lr}
    struct ble_l2cap_chan *chan;

    chan = ble_l2cap_chan_alloc(conn_handle);
   30fe2:	f7ff fbbf 	bl	30764 <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   30fe6:	4603      	mov	r3, r0
   30fe8:	b130      	cbz	r0, 30ff8 <ble_sm_create_chan+0x18>
        return NULL;
    }

    chan->scid = BLE_L2CAP_CID_SM;
   30fea:	2206      	movs	r2, #6
   30fec:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_SM;
   30fee:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = BLE_SM_MTU;
   30ff0:	2241      	movs	r2, #65	; 0x41
   30ff2:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_sm_rx;
   30ff4:	4a01      	ldr	r2, [pc, #4]	; (30ffc <ble_sm_create_chan+0x1c>)
   30ff6:	6182      	str	r2, [r0, #24]

    return chan;
}
   30ff8:	4618      	mov	r0, r3
   30ffa:	bd08      	pop	{r3, pc}
   30ffc:	00030fa3 	.word	0x00030fa3

00031000 <ble_sm_cmd_get>:
#include "ble_hs_priv.h"

#if NIMBLE_BLE_CONNECT
void *
ble_sm_cmd_get(uint8_t opcode, size_t len, struct os_mbuf **txom)
{
   31000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31002:	4607      	mov	r7, r0
   31004:	460d      	mov	r5, r1
   31006:	4616      	mov	r6, r2
    struct ble_sm_hdr *hdr;

    *txom = ble_hs_mbuf_l2cap_pkt();
   31008:	f7fe ffb5 	bl	2ff76 <ble_hs_mbuf_l2cap_pkt>
   3100c:	4604      	mov	r4, r0
   3100e:	6030      	str	r0, [r6, #0]
    if (*txom == NULL) {
   31010:	b148      	cbz	r0, 31026 <ble_sm_cmd_get+0x26>
        return NULL;
    }

    if (os_mbuf_extend(*txom, sizeof(*hdr) + len) == NULL) {
   31012:	1c69      	adds	r1, r5, #1
   31014:	b289      	uxth	r1, r1
   31016:	f7e8 fd5d 	bl	19ad4 <os_mbuf_extend>
   3101a:	4604      	mov	r4, r0
   3101c:	b128      	cbz	r0, 3102a <ble_sm_cmd_get+0x2a>
        os_mbuf_free_chain(*txom);
        return NULL;
    }

    hdr = (struct ble_sm_hdr *)(*txom)->om_data;
   3101e:	6833      	ldr	r3, [r6, #0]

    hdr->opcode = opcode;
   31020:	681c      	ldr	r4, [r3, #0]
   31022:	f804 7b01 	strb.w	r7, [r4], #1

    return hdr->data;
}
   31026:	4620      	mov	r0, r4
   31028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        os_mbuf_free_chain(*txom);
   3102a:	6830      	ldr	r0, [r6, #0]
   3102c:	f7e8 facf 	bl	195ce <os_mbuf_free_chain>
        return NULL;
   31030:	e7f9      	b.n	31026 <ble_sm_cmd_get+0x26>
	...

00031034 <ble_sm_tx>:

/* this function consumes tx os_mbuf */
int
ble_sm_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   31034:	b530      	push	{r4, r5, lr}
   31036:	b083      	sub	sp, #12
   31038:	460c      	mov	r4, r1
    struct ble_hs_conn *conn;
    int rc;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    STATS_INC(ble_l2cap_stats, sm_tx);
   3103a:	4a0c      	ldr	r2, [pc, #48]	; (3106c <ble_sm_tx+0x38>)
   3103c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   3103e:	3301      	adds	r3, #1
   31040:	62d3      	str	r3, [r2, #44]	; 0x2c

    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SM,
   31042:	ab01      	add	r3, sp, #4
   31044:	466a      	mov	r2, sp
   31046:	2106      	movs	r1, #6
   31048:	f7ff f80c 	bl	30064 <ble_hs_misc_conn_chan_find_reqd>
                                         &conn, &chan);
    if (rc == 0) {
   3104c:	b940      	cbnz	r0, 31060 <ble_sm_tx+0x2c>
        rc = ble_l2cap_tx(conn, chan, txom);
   3104e:	4622      	mov	r2, r4
   31050:	9901      	ldr	r1, [sp, #4]
   31052:	9800      	ldr	r0, [sp, #0]
   31054:	f7ff fc80 	bl	30958 <ble_l2cap_tx>
   31058:	4605      	mov	r5, r0
    } else {
        os_mbuf_free_chain(txom);
    }

    return rc;
}
   3105a:	4628      	mov	r0, r5
   3105c:	b003      	add	sp, #12
   3105e:	bd30      	pop	{r4, r5, pc}
   31060:	4605      	mov	r5, r0
        os_mbuf_free_chain(txom);
   31062:	4620      	mov	r0, r4
   31064:	f7e8 fab3 	bl	195ce <os_mbuf_free_chain>
    return rc;
   31068:	e7f7      	b.n	3105a <ble_sm_tx+0x26>
   3106a:	bf00      	nop
   3106c:	10005700 	.word	0x10005700

00031070 <ble_store_status>:
    return rc;
}

static int
ble_store_status(struct ble_store_status_event *event)
{
   31070:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (ble_hs_cfg.store_status_cb == NULL) {
   31072:	4b04      	ldr	r3, [pc, #16]	; (31084 <ble_store_status+0x14>)
   31074:	6a1b      	ldr	r3, [r3, #32]
   31076:	b11b      	cbz	r3, 31080 <ble_store_status+0x10>
        rc = BLE_HS_ENOTSUP;
    } else {
        rc = ble_hs_cfg.store_status_cb(event, ble_hs_cfg.store_status_arg);
   31078:	4a02      	ldr	r2, [pc, #8]	; (31084 <ble_store_status+0x14>)
   3107a:	6a51      	ldr	r1, [r2, #36]	; 0x24
   3107c:	4798      	blx	r3
    }

    return rc;
}
   3107e:	bd08      	pop	{r3, pc}
        rc = BLE_HS_ENOTSUP;
   31080:	2008      	movs	r0, #8
    return rc;
   31082:	e7fc      	b.n	3107e <ble_store_status+0xe>
   31084:	100006f0 	.word	0x100006f0

00031088 <ble_store_read>:
{
   31088:	b570      	push	{r4, r5, r6, lr}
   3108a:	4604      	mov	r4, r0
   3108c:	460d      	mov	r5, r1
   3108e:	4616      	mov	r6, r2
    ble_hs_lock();
   31090:	f7fc ff7e 	bl	2df90 <ble_hs_lock>
    if (ble_hs_cfg.store_read_cb == NULL) {
   31094:	4b06      	ldr	r3, [pc, #24]	; (310b0 <ble_store_read+0x28>)
   31096:	695b      	ldr	r3, [r3, #20]
   31098:	b143      	cbz	r3, 310ac <ble_store_read+0x24>
        rc = ble_hs_cfg.store_read_cb(obj_type, key, val);
   3109a:	4632      	mov	r2, r6
   3109c:	4629      	mov	r1, r5
   3109e:	4620      	mov	r0, r4
   310a0:	4798      	blx	r3
   310a2:	4604      	mov	r4, r0
    ble_hs_unlock();
   310a4:	f7fc ff78 	bl	2df98 <ble_hs_unlock>
}
   310a8:	4620      	mov	r0, r4
   310aa:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_ENOTSUP;
   310ac:	2408      	movs	r4, #8
   310ae:	e7f9      	b.n	310a4 <ble_store_read+0x1c>
   310b0:	100006f0 	.word	0x100006f0

000310b4 <ble_store_delete>:
{
   310b4:	b538      	push	{r3, r4, r5, lr}
   310b6:	4604      	mov	r4, r0
   310b8:	460d      	mov	r5, r1
    ble_hs_lock();
   310ba:	f7fc ff69 	bl	2df90 <ble_hs_lock>
    if (ble_hs_cfg.store_delete_cb == NULL) {
   310be:	4b06      	ldr	r3, [pc, #24]	; (310d8 <ble_store_delete+0x24>)
   310c0:	69db      	ldr	r3, [r3, #28]
   310c2:	b13b      	cbz	r3, 310d4 <ble_store_delete+0x20>
        rc = ble_hs_cfg.store_delete_cb(obj_type, key);
   310c4:	4629      	mov	r1, r5
   310c6:	4620      	mov	r0, r4
   310c8:	4798      	blx	r3
   310ca:	4604      	mov	r4, r0
    ble_hs_unlock();
   310cc:	f7fc ff64 	bl	2df98 <ble_hs_unlock>
}
   310d0:	4620      	mov	r0, r4
   310d2:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTSUP;
   310d4:	2408      	movs	r4, #8
   310d6:	e7f9      	b.n	310cc <ble_store_delete+0x18>
   310d8:	100006f0 	.word	0x100006f0

000310dc <ble_store_overflow_event>:

int
ble_store_overflow_event(int obj_type, const union ble_store_value *value)
{
   310dc:	b500      	push	{lr}
   310de:	b085      	sub	sp, #20
    struct ble_store_status_event event;

    event.event_code = BLE_STORE_EVENT_OVERFLOW;
   310e0:	2301      	movs	r3, #1
   310e2:	9301      	str	r3, [sp, #4]
    event.overflow.obj_type = obj_type;
   310e4:	9002      	str	r0, [sp, #8]
    event.overflow.value = value;
   310e6:	9103      	str	r1, [sp, #12]

    return ble_store_status(&event);
   310e8:	a801      	add	r0, sp, #4
   310ea:	f7ff ffc1 	bl	31070 <ble_store_status>
}
   310ee:	b005      	add	sp, #20
   310f0:	f85d fb04 	ldr.w	pc, [sp], #4

000310f4 <ble_store_write>:
{
   310f4:	b570      	push	{r4, r5, r6, lr}
   310f6:	4606      	mov	r6, r0
   310f8:	460d      	mov	r5, r1
    if (ble_hs_cfg.store_write_cb == NULL) {
   310fa:	4b0d      	ldr	r3, [pc, #52]	; (31130 <ble_store_write+0x3c>)
   310fc:	699b      	ldr	r3, [r3, #24]
   310fe:	b1a3      	cbz	r3, 3112a <ble_store_write+0x36>
        ble_hs_lock();
   31100:	f7fc ff46 	bl	2df90 <ble_hs_lock>
        rc = ble_hs_cfg.store_write_cb(obj_type, val);
   31104:	4b0a      	ldr	r3, [pc, #40]	; (31130 <ble_store_write+0x3c>)
   31106:	699b      	ldr	r3, [r3, #24]
   31108:	4629      	mov	r1, r5
   3110a:	4630      	mov	r0, r6
   3110c:	4798      	blx	r3
   3110e:	4604      	mov	r4, r0
        ble_hs_unlock();
   31110:	f7fc ff42 	bl	2df98 <ble_hs_unlock>
        switch (rc) {
   31114:	b154      	cbz	r4, 3112c <ble_store_write+0x38>
   31116:	2c1b      	cmp	r4, #27
   31118:	d108      	bne.n	3112c <ble_store_write+0x38>
            rc = ble_store_overflow_event(obj_type, val);
   3111a:	4629      	mov	r1, r5
   3111c:	4630      	mov	r0, r6
   3111e:	f7ff ffdd 	bl	310dc <ble_store_overflow_event>
            if (rc != 0) {
   31122:	4604      	mov	r4, r0
   31124:	2800      	cmp	r0, #0
   31126:	d0eb      	beq.n	31100 <ble_store_write+0xc>
   31128:	e000      	b.n	3112c <ble_store_write+0x38>
        return BLE_HS_ENOTSUP;
   3112a:	2408      	movs	r4, #8
}
   3112c:	4620      	mov	r0, r4
   3112e:	bd70      	pop	{r4, r5, r6, pc}
   31130:	100006f0 	.word	0x100006f0

00031134 <ble_store_persist_sec>:
}

static int
ble_store_persist_sec(int obj_type,
                      const struct ble_store_value_sec *value_sec)
{
   31134:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(value_sec->ltk_present ||
                      value_sec->irk_present ||
                      value_sec->csrk_present);

    store_value = (void *)value_sec;
    rc = ble_store_write(obj_type, store_value);
   31136:	f7ff ffdd 	bl	310f4 <ble_store_write>
    return rc;
}
   3113a:	bd08      	pop	{r3, pc}

0003113c <ble_store_write_our_sec>:

int
ble_store_write_our_sec(const struct ble_store_value_sec *value_sec)
{
   3113c:	b508      	push	{r3, lr}
   3113e:	4601      	mov	r1, r0
    int rc;

    rc = ble_store_persist_sec(BLE_STORE_OBJ_TYPE_OUR_SEC, value_sec);
   31140:	2001      	movs	r0, #1
   31142:	f7ff fff7 	bl	31134 <ble_store_persist_sec>
    return rc;
}
   31146:	bd08      	pop	{r3, pc}

00031148 <ble_store_read_peer_sec>:
}

int
ble_store_read_peer_sec(const struct ble_store_key_sec *key_sec,
                        struct ble_store_value_sec *value_sec)
{
   31148:	b508      	push	{r3, lr}
   3114a:	460a      	mov	r2, r1
    BLE_HS_DBG_ASSERT(key_sec->peer_addr.type == BLE_ADDR_PUBLIC ||
                      key_sec->peer_addr.type == BLE_ADDR_RANDOM);

    store_key = (void *)key_sec;
    store_value = (void *)value_sec;
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_PEER_SEC, store_key, store_value);
   3114c:	4601      	mov	r1, r0
   3114e:	2002      	movs	r0, #2
   31150:	f7ff ff9a 	bl	31088 <ble_store_read>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   31154:	bd08      	pop	{r3, pc}

00031156 <ble_store_write_peer_sec>:

int
ble_store_write_peer_sec(const struct ble_store_value_sec *value_sec)
{
   31156:	b570      	push	{r4, r5, r6, lr}
   31158:	b082      	sub	sp, #8
   3115a:	4604      	mov	r4, r0
    int rc;

    rc = ble_store_persist_sec(BLE_STORE_OBJ_TYPE_PEER_SEC, value_sec);
   3115c:	4601      	mov	r1, r0
   3115e:	2002      	movs	r0, #2
   31160:	f7ff ffe8 	bl	31134 <ble_store_persist_sec>
    if (rc != 0) {
   31164:	4606      	mov	r6, r0
   31166:	b990      	cbnz	r0, 3118e <ble_store_write_peer_sec+0x38>
        return rc;
    }

    if (ble_addr_cmp(&value_sec->peer_addr, BLE_ADDR_ANY) &&
   31168:	2300      	movs	r3, #0
   3116a:	9300      	str	r3, [sp, #0]
   3116c:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   31170:	7825      	ldrb	r5, [r4, #0]
   31172:	4628      	mov	r0, r5
    if (type_diff != 0) {
   31174:	b92d      	cbnz	r5, 31182 <ble_store_write_peer_sec+0x2c>
    return memcmp(a->val, b->val, sizeof(a->val));
   31176:	2206      	movs	r2, #6
   31178:	f10d 0101 	add.w	r1, sp, #1
   3117c:	1c60      	adds	r0, r4, #1
   3117e:	f7e9 fd43 	bl	1ac08 <memcmp>
   31182:	b120      	cbz	r0, 3118e <ble_store_write_peer_sec+0x38>
   31184:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   31188:	f013 0f01 	tst.w	r3, #1
   3118c:	d102      	bne.n	31194 <ble_store_write_peer_sec+0x3e>
            return rc;
        }
    }

    return 0;
}
   3118e:	4630      	mov	r0, r6
   31190:	b002      	add	sp, #8
   31192:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_hs_pvcy_add_entry(value_sec->peer_addr.val,
   31194:	f104 0229 	add.w	r2, r4, #41	; 0x29
   31198:	4629      	mov	r1, r5
   3119a:	1c60      	adds	r0, r4, #1
   3119c:	f7ff f870 	bl	30280 <ble_hs_pvcy_add_entry>
        if (rc != 0) {
   311a0:	2800      	cmp	r0, #0
   311a2:	d0f4      	beq.n	3118e <ble_store_write_peer_sec+0x38>
            return rc;
   311a4:	4606      	mov	r6, r0
   311a6:	e7f2      	b.n	3118e <ble_store_write_peer_sec+0x38>

000311a8 <ble_store_read_cccd>:

int
ble_store_read_cccd(const struct ble_store_key_cccd *key,
                    struct ble_store_value_cccd *out_value)
{
   311a8:	b508      	push	{r3, lr}
   311aa:	460a      	mov	r2, r1
    union ble_store_key *store_key;
    int rc;

    store_key = (void *)key;
    store_value = (void *)out_value;
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_CCCD, store_key, store_value);
   311ac:	4601      	mov	r1, r0
   311ae:	2003      	movs	r0, #3
   311b0:	f7ff ff6a 	bl	31088 <ble_store_read>
    return rc;
}
   311b4:	bd08      	pop	{r3, pc}

000311b6 <ble_store_write_cccd>:

int
ble_store_write_cccd(const struct ble_store_value_cccd *value)
{
   311b6:	b508      	push	{r3, lr}
   311b8:	4601      	mov	r1, r0
    union ble_store_value *store_value;
    int rc;

    store_value = (void *)value;
    rc = ble_store_write(BLE_STORE_OBJ_TYPE_CCCD, store_value);
   311ba:	2003      	movs	r0, #3
   311bc:	f7ff ff9a 	bl	310f4 <ble_store_write>
    return rc;
}
   311c0:	bd08      	pop	{r3, pc}

000311c2 <ble_store_delete_cccd>:

int
ble_store_delete_cccd(const struct ble_store_key_cccd *key)
{
   311c2:	b508      	push	{r3, lr}
   311c4:	4601      	mov	r1, r0
    union ble_store_key *store_key;
    int rc;

    store_key = (void *)key;
    rc = ble_store_delete(BLE_STORE_OBJ_TYPE_CCCD, store_key);
   311c6:	2003      	movs	r0, #3
   311c8:	f7ff ff74 	bl	310b4 <ble_store_delete>
    return rc;
}
   311cc:	bd08      	pop	{r3, pc}

000311ce <ble_store_key_from_value_cccd>:

void
ble_store_key_from_value_cccd(struct ble_store_key_cccd *out_key,
                              const struct ble_store_value_cccd *value)
{
   311ce:	4603      	mov	r3, r0
    out_key->peer_addr = value->peer_addr;
   311d0:	6808      	ldr	r0, [r1, #0]
   311d2:	6018      	str	r0, [r3, #0]
   311d4:	8888      	ldrh	r0, [r1, #4]
   311d6:	798a      	ldrb	r2, [r1, #6]
   311d8:	8098      	strh	r0, [r3, #4]
   311da:	719a      	strb	r2, [r3, #6]
    out_key->chr_val_handle = value->chr_val_handle;
   311dc:	890a      	ldrh	r2, [r1, #8]
   311de:	811a      	strh	r2, [r3, #8]
    out_key->idx = 0;
   311e0:	2200      	movs	r2, #0
   311e2:	729a      	strb	r2, [r3, #10]
}
   311e4:	4770      	bx	lr

000311e6 <ble_store_key_from_value_sec>:

void
ble_store_key_from_value_sec(struct ble_store_key_sec *out_key,
                             const struct ble_store_value_sec *value)
{
   311e6:	4603      	mov	r3, r0
   311e8:	460a      	mov	r2, r1
    out_key->peer_addr = value->peer_addr;
   311ea:	e9d1 0100 	ldrd	r0, r1, [r1]
   311ee:	6018      	str	r0, [r3, #0]
   311f0:	8099      	strh	r1, [r3, #4]
   311f2:	0c09      	lsrs	r1, r1, #16
   311f4:	7199      	strb	r1, [r3, #6]

    out_key->ediv = value->ediv;
   311f6:	8911      	ldrh	r1, [r2, #8]
   311f8:	8119      	strh	r1, [r3, #8]
    out_key->rand_num = value->rand_num;
   311fa:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
   311fe:	e9c3 0104 	strd	r0, r1, [r3, #16]
    out_key->ediv_rand_present = 1;
   31202:	7e1a      	ldrb	r2, [r3, #24]
   31204:	f042 0201 	orr.w	r2, r2, #1
   31208:	761a      	strb	r2, [r3, #24]
    out_key->idx = 0;
   3120a:	2200      	movs	r2, #0
   3120c:	765a      	strb	r2, [r3, #25]
}
   3120e:	4770      	bx	lr

00031210 <ble_store_iterate>:

int
ble_store_iterate(int obj_type,
                  ble_store_iterator_fn *callback,
                  void *cookie)
{
   31210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   31214:	b09d      	sub	sp, #116	; 0x74
   31216:	4604      	mov	r4, r0
   31218:	4688      	mov	r8, r1
   3121a:	4617      	mov	r7, r2
    int idx = 0;
    uint8_t *pidx;
    int rc;

    /* a magic value to retrieve anything */
    memset(&key, 0, sizeof(key));
   3121c:	2220      	movs	r2, #32
   3121e:	2100      	movs	r1, #0
   31220:	a814      	add	r0, sp, #80	; 0x50
   31222:	f7e9 fd3a 	bl	1ac9a <memset>
    switch(obj_type) {
   31226:	2c02      	cmp	r4, #2
   31228:	dd08      	ble.n	3123c <ble_store_iterate+0x2c>
   3122a:	2c03      	cmp	r4, #3
   3122c:	d108      	bne.n	31240 <ble_store_iterate+0x30>
        case BLE_STORE_OBJ_TYPE_OUR_SEC:
            key.sec.peer_addr = *BLE_ADDR_ANY;
            pidx = &key.sec.idx;
            break;
        case BLE_STORE_OBJ_TYPE_CCCD:
            key.cccd.peer_addr = *BLE_ADDR_ANY;
   3122e:	2300      	movs	r3, #0
   31230:	9314      	str	r3, [sp, #80]	; 0x50
   31232:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
            pidx = &key.cccd.idx;
   31236:	f10d 095a 	add.w	r9, sp, #90	; 0x5a
            break;
   3123a:	e009      	b.n	31250 <ble_store_iterate+0x40>
    switch(obj_type) {
   3123c:	2c00      	cmp	r4, #0
   3123e:	dc01      	bgt.n	31244 <ble_store_iterate+0x34>
        default:
            BLE_HS_DBG_ASSERT(0);
            return BLE_HS_EINVAL;
   31240:	2503      	movs	r5, #3
   31242:	e011      	b.n	31268 <ble_store_iterate+0x58>
            key.sec.peer_addr = *BLE_ADDR_ANY;
   31244:	2300      	movs	r3, #0
   31246:	9314      	str	r3, [sp, #80]	; 0x50
   31248:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
            pidx = &key.sec.idx;
   3124c:	f10d 0969 	add.w	r9, sp, #105	; 0x69
    int idx = 0;
   31250:	2600      	movs	r6, #0
    }

    while (1) {
        *pidx = idx;
   31252:	f889 6000 	strb.w	r6, [r9]
        rc = ble_store_read(obj_type, &key, &value);
   31256:	466a      	mov	r2, sp
   31258:	a914      	add	r1, sp, #80	; 0x50
   3125a:	4620      	mov	r0, r4
   3125c:	f7ff ff14 	bl	31088 <ble_store_read>
        switch (rc) {
   31260:	4605      	mov	r5, r0
   31262:	b128      	cbz	r0, 31270 <ble_store_iterate+0x60>
   31264:	2805      	cmp	r0, #5
   31266:	d00e      	beq.n	31286 <ble_store_iterate+0x76>
            return rc;
        }

        idx++;
    }
}
   31268:	4628      	mov	r0, r5
   3126a:	b01d      	add	sp, #116	; 0x74
   3126c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if (callback != NULL) {
   31270:	f1b8 0f00 	cmp.w	r8, #0
   31274:	d005      	beq.n	31282 <ble_store_iterate+0x72>
                rc = callback(obj_type, &value, cookie);
   31276:	463a      	mov	r2, r7
   31278:	4669      	mov	r1, sp
   3127a:	4620      	mov	r0, r4
   3127c:	47c0      	blx	r8
                if (rc != 0) {
   3127e:	2800      	cmp	r0, #0
   31280:	d1f2      	bne.n	31268 <ble_store_iterate+0x58>
        idx++;
   31282:	3601      	adds	r6, #1
        *pidx = idx;
   31284:	e7e5      	b.n	31252 <ble_store_iterate+0x42>
        switch (rc) {
   31286:	2500      	movs	r5, #0
   31288:	e7ee      	b.n	31268 <ble_store_iterate+0x58>

0003128a <ble_store_util_delete_all>:
 * @return                      0 on success;
 *                              Other nonzero on error.
 */
int
ble_store_util_delete_all(int type, const union ble_store_key *key)
{
   3128a:	b538      	push	{r3, r4, r5, lr}
   3128c:	4605      	mov	r5, r0
   3128e:	460c      	mov	r4, r1
    int rc;

    do {
        rc = ble_store_delete(type, key);
   31290:	4621      	mov	r1, r4
   31292:	4628      	mov	r0, r5
   31294:	f7ff ff0e 	bl	310b4 <ble_store_delete>
    } while (rc == 0);
   31298:	4603      	mov	r3, r0
   3129a:	2800      	cmp	r0, #0
   3129c:	d0f8      	beq.n	31290 <ble_store_util_delete_all+0x6>

    if (rc != BLE_HS_ENOENT) {
   3129e:	2805      	cmp	r0, #5
   312a0:	d100      	bne.n	312a4 <ble_store_util_delete_all+0x1a>
        return rc;
    }

    return 0;
   312a2:	2300      	movs	r3, #0
}
   312a4:	4618      	mov	r0, r3
   312a6:	bd38      	pop	{r3, r4, r5, pc}

000312a8 <ble_store_util_delete_peer>:
{
   312a8:	b510      	push	{r4, lr}
   312aa:	b088      	sub	sp, #32
   312ac:	4604      	mov	r4, r0
    memset(&key, 0, sizeof key);
   312ae:	2220      	movs	r2, #32
   312b0:	2100      	movs	r1, #0
   312b2:	4668      	mov	r0, sp
   312b4:	f7e9 fcf1 	bl	1ac9a <memset>
    key.sec.peer_addr = *peer_id_addr;
   312b8:	6820      	ldr	r0, [r4, #0]
   312ba:	9000      	str	r0, [sp, #0]
   312bc:	88a2      	ldrh	r2, [r4, #4]
   312be:	79a3      	ldrb	r3, [r4, #6]
   312c0:	f8ad 2004 	strh.w	r2, [sp, #4]
   312c4:	f88d 3006 	strb.w	r3, [sp, #6]
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_OUR_SEC, &key);
   312c8:	4669      	mov	r1, sp
   312ca:	2001      	movs	r0, #1
   312cc:	f7ff ffdd 	bl	3128a <ble_store_util_delete_all>
    if (rc != 0) {
   312d0:	4603      	mov	r3, r0
   312d2:	b110      	cbz	r0, 312da <ble_store_util_delete_peer+0x32>
}
   312d4:	4618      	mov	r0, r3
   312d6:	b008      	add	sp, #32
   312d8:	bd10      	pop	{r4, pc}
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_PEER_SEC, &key);
   312da:	4669      	mov	r1, sp
   312dc:	2002      	movs	r0, #2
   312de:	f7ff ffd4 	bl	3128a <ble_store_util_delete_all>
    if (rc != 0) {
   312e2:	4603      	mov	r3, r0
   312e4:	2800      	cmp	r0, #0
   312e6:	d1f5      	bne.n	312d4 <ble_store_util_delete_peer+0x2c>
    memset(&key, 0, sizeof key);
   312e8:	2220      	movs	r2, #32
   312ea:	2100      	movs	r1, #0
   312ec:	4668      	mov	r0, sp
   312ee:	f7e9 fcd4 	bl	1ac9a <memset>
    key.cccd.peer_addr = *peer_id_addr;
   312f2:	6820      	ldr	r0, [r4, #0]
   312f4:	9000      	str	r0, [sp, #0]
   312f6:	88a2      	ldrh	r2, [r4, #4]
   312f8:	79a3      	ldrb	r3, [r4, #6]
   312fa:	f8ad 2004 	strh.w	r2, [sp, #4]
   312fe:	f88d 3006 	strb.w	r3, [sp, #6]
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_CCCD, &key);
   31302:	4669      	mov	r1, sp
   31304:	2003      	movs	r0, #3
   31306:	f7ff ffc0 	bl	3128a <ble_store_util_delete_all>
   3130a:	4603      	mov	r3, r0
    if (rc != 0) {
   3130c:	e7e2      	b.n	312d4 <ble_store_util_delete_peer+0x2c>

0003130e <ble_store_util_status_rr>:
 * uninteresting peers could cause important bonds to be deleted.  This is
 * useful for demonstrations and sample apps.
 */
int
ble_store_util_status_rr(struct ble_store_status_event *event, void *arg)
{
   3130e:	b508      	push	{r3, lr}
    switch (event->event_code) {
   31310:	6803      	ldr	r3, [r0, #0]
   31312:	2b01      	cmp	r3, #1
   31314:	d003      	beq.n	3131e <ble_store_util_status_rr+0x10>
   31316:	2b02      	cmp	r3, #2
   31318:	d113      	bne.n	31342 <ble_store_util_status_rr+0x34>
   3131a:	2000      	movs	r0, #0
        return 0;

    default:
        return BLE_HS_EUNKNOWN;
    }
}
   3131c:	bd08      	pop	{r3, pc}
        switch (event->overflow.obj_type) {
   3131e:	6843      	ldr	r3, [r0, #4]
   31320:	2b02      	cmp	r3, #2
   31322:	dd05      	ble.n	31330 <ble_store_util_status_rr+0x22>
   31324:	2b03      	cmp	r3, #3
   31326:	d107      	bne.n	31338 <ble_store_util_status_rr+0x2a>
            return ble_gap_unpair_oldest_except(&event->overflow.value->cccd.peer_addr);
   31328:	6880      	ldr	r0, [r0, #8]
   3132a:	f7f9 f9a7 	bl	2a67c <ble_gap_unpair_oldest_except>
   3132e:	e7f5      	b.n	3131c <ble_store_util_status_rr+0xe>
        switch (event->overflow.obj_type) {
   31330:	2b00      	cmp	r3, #0
   31332:	dc03      	bgt.n	3133c <ble_store_util_status_rr+0x2e>
   31334:	2011      	movs	r0, #17
   31336:	e7f1      	b.n	3131c <ble_store_util_status_rr+0xe>
   31338:	2011      	movs	r0, #17
   3133a:	e7ef      	b.n	3131c <ble_store_util_status_rr+0xe>
            return ble_gap_unpair_oldest_peer();
   3133c:	f7f9 f99c 	bl	2a678 <ble_gap_unpair_oldest_peer>
   31340:	e7ec      	b.n	3131c <ble_store_util_status_rr+0xe>
        return BLE_HS_EUNKNOWN;
   31342:	2011      	movs	r0, #17
   31344:	e7ea      	b.n	3131c <ble_store_util_status_rr+0xe>

00031346 <ble_uuid_init_from_buf>:
#define VERIFY_UUID(uuid)
#endif

int
ble_uuid_init_from_buf(ble_uuid_any_t *uuid, const void *buf, size_t len)
{
   31346:	b570      	push	{r4, r5, r6, lr}
   31348:	4604      	mov	r4, r0
   3134a:	4608      	mov	r0, r1
    switch (len) {
   3134c:	2a04      	cmp	r2, #4
   3134e:	d00c      	beq.n	3136a <ble_uuid_init_from_buf+0x24>
   31350:	2a10      	cmp	r2, #16
   31352:	d011      	beq.n	31378 <ble_uuid_init_from_buf+0x32>
   31354:	2a02      	cmp	r2, #2
   31356:	d001      	beq.n	3135c <ble_uuid_init_from_buf+0x16>
   31358:	2003      	movs	r0, #3
        memcpy(uuid->u128.value, buf, 16);
        return 0;
    }

    return BLE_HS_EINVAL;
}
   3135a:	bd70      	pop	{r4, r5, r6, pc}
        uuid->u.type = BLE_UUID_TYPE_16;
   3135c:	2310      	movs	r3, #16
   3135e:	7023      	strb	r3, [r4, #0]
        uuid->u16.value = get_le16(buf);
   31360:	f7e7 fd75 	bl	18e4e <get_le16>
   31364:	8060      	strh	r0, [r4, #2]
        return 0;
   31366:	2000      	movs	r0, #0
   31368:	e7f7      	b.n	3135a <ble_uuid_init_from_buf+0x14>
        uuid->u.type = BLE_UUID_TYPE_32;
   3136a:	2320      	movs	r3, #32
   3136c:	7023      	strb	r3, [r4, #0]
        uuid->u32.value = get_le32(buf);
   3136e:	f7e7 fd73 	bl	18e58 <get_le32>
   31372:	6060      	str	r0, [r4, #4]
        return 0;
   31374:	2000      	movs	r0, #0
   31376:	e7f0      	b.n	3135a <ble_uuid_init_from_buf+0x14>
        uuid->u.type = BLE_UUID_TYPE_128;
   31378:	4623      	mov	r3, r4
   3137a:	2280      	movs	r2, #128	; 0x80
   3137c:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(uuid->u128.value, buf, 16);
   31380:	680e      	ldr	r6, [r1, #0]
   31382:	684d      	ldr	r5, [r1, #4]
   31384:	6889      	ldr	r1, [r1, #8]
   31386:	68c2      	ldr	r2, [r0, #12]
   31388:	f8c4 6001 	str.w	r6, [r4, #1]
   3138c:	605d      	str	r5, [r3, #4]
   3138e:	6099      	str	r1, [r3, #8]
   31390:	60da      	str	r2, [r3, #12]
        return 0;
   31392:	2000      	movs	r0, #0
   31394:	e7e1      	b.n	3135a <ble_uuid_init_from_buf+0x14>

00031396 <ble_uuid_cmp>:

int
ble_uuid_cmp(const ble_uuid_t *uuid1, const ble_uuid_t *uuid2)
{
   31396:	b508      	push	{r3, lr}
    VERIFY_UUID(uuid1);
    VERIFY_UUID(uuid2);

    if (uuid1->type != uuid2->type) {
   31398:	7803      	ldrb	r3, [r0, #0]
   3139a:	780a      	ldrb	r2, [r1, #0]
   3139c:	4293      	cmp	r3, r2
   3139e:	d001      	beq.n	313a4 <ble_uuid_cmp+0xe>
      return uuid1->type - uuid2->type;
   313a0:	1a98      	subs	r0, r3, r2
    }

    BLE_HS_DBG_ASSERT(0);

    return -1;
}
   313a2:	bd08      	pop	{r3, pc}
    switch (uuid1->type) {
   313a4:	2b20      	cmp	r3, #32
   313a6:	d00a      	beq.n	313be <ble_uuid_cmp+0x28>
   313a8:	2b80      	cmp	r3, #128	; 0x80
   313aa:	d00c      	beq.n	313c6 <ble_uuid_cmp+0x30>
   313ac:	2b10      	cmp	r3, #16
   313ae:	d002      	beq.n	313b6 <ble_uuid_cmp+0x20>
   313b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   313b4:	e7f5      	b.n	313a2 <ble_uuid_cmp+0xc>
        return (int) BLE_UUID16(uuid1)->value - (int) BLE_UUID16(uuid2)->value;
   313b6:	8840      	ldrh	r0, [r0, #2]
   313b8:	884b      	ldrh	r3, [r1, #2]
   313ba:	1ac0      	subs	r0, r0, r3
   313bc:	e7f1      	b.n	313a2 <ble_uuid_cmp+0xc>
        return (int) BLE_UUID32(uuid1)->value - (int) BLE_UUID32(uuid2)->value;
   313be:	6840      	ldr	r0, [r0, #4]
   313c0:	684b      	ldr	r3, [r1, #4]
   313c2:	1ac0      	subs	r0, r0, r3
   313c4:	e7ed      	b.n	313a2 <ble_uuid_cmp+0xc>
        return memcmp(BLE_UUID128(uuid1)->value, BLE_UUID128(uuid2)->value, 16);
   313c6:	2210      	movs	r2, #16
   313c8:	3101      	adds	r1, #1
   313ca:	3001      	adds	r0, #1
   313cc:	f7e9 fc1c 	bl	1ac08 <memcmp>
   313d0:	e7e7      	b.n	313a2 <ble_uuid_cmp+0xc>
	...

000313d4 <ble_uuid_to_str>:
    }
}

char *
ble_uuid_to_str(const ble_uuid_t *uuid, char *dst)
{
   313d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   313d8:	b091      	sub	sp, #68	; 0x44
   313da:	4688      	mov	r8, r1
    const uint8_t *u8p;

    switch (uuid->type) {
   313dc:	7803      	ldrb	r3, [r0, #0]
   313de:	2b20      	cmp	r3, #32
   313e0:	d00f      	beq.n	31402 <ble_uuid_to_str+0x2e>
   313e2:	2b80      	cmp	r3, #128	; 0x80
   313e4:	d013      	beq.n	3140e <ble_uuid_to_str+0x3a>
   313e6:	2b10      	cmp	r3, #16
   313e8:	d002      	beq.n	313f0 <ble_uuid_to_str+0x1c>
                u8p[11], u8p[10],  u8p[9],  u8p[8],
                 u8p[7],  u8p[6],  u8p[5],  u8p[4],
                 u8p[3],  u8p[2],  u8p[1],  u8p[0]);
        break;
    default:
        dst[0] = '\0';
   313ea:	2300      	movs	r3, #0
   313ec:	700b      	strb	r3, [r1, #0]
        break;
   313ee:	e004      	b.n	313fa <ble_uuid_to_str+0x26>
        sprintf(dst, "0x%04" PRIx16, BLE_UUID16(uuid)->value);
   313f0:	8842      	ldrh	r2, [r0, #2]
   313f2:	491f      	ldr	r1, [pc, #124]	; (31470 <ble_uuid_to_str+0x9c>)
   313f4:	4640      	mov	r0, r8
   313f6:	f002 ff2d 	bl	34254 <sprintf>
    }

    return dst;
}
   313fa:	4640      	mov	r0, r8
   313fc:	b011      	add	sp, #68	; 0x44
   313fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        sprintf(dst, "0x%08" PRIx32, BLE_UUID32(uuid)->value);
   31402:	6842      	ldr	r2, [r0, #4]
   31404:	491b      	ldr	r1, [pc, #108]	; (31474 <ble_uuid_to_str+0xa0>)
   31406:	4640      	mov	r0, r8
   31408:	f002 ff24 	bl	34254 <sprintf>
        break;
   3140c:	e7f5      	b.n	313fa <ble_uuid_to_str+0x26>
                u8p[15], u8p[14], u8p[13], u8p[12],
   3140e:	7b83      	ldrb	r3, [r0, #14]
   31410:	930e      	str	r3, [sp, #56]	; 0x38
   31412:	7b42      	ldrb	r2, [r0, #13]
                u8p[11], u8p[10],  u8p[9],  u8p[8],
   31414:	7b01      	ldrb	r1, [r0, #12]
   31416:	7ac4      	ldrb	r4, [r0, #11]
   31418:	940f      	str	r4, [sp, #60]	; 0x3c
   3141a:	7a84      	ldrb	r4, [r0, #10]
   3141c:	7a45      	ldrb	r5, [r0, #9]
                 u8p[7],  u8p[6],  u8p[5],  u8p[4],
   3141e:	7a06      	ldrb	r6, [r0, #8]
   31420:	79c7      	ldrb	r7, [r0, #7]
   31422:	f890 c006 	ldrb.w	ip, [r0, #6]
   31426:	f890 e005 	ldrb.w	lr, [r0, #5]
                 u8p[3],  u8p[2],  u8p[1],  u8p[0]);
   3142a:	7903      	ldrb	r3, [r0, #4]
   3142c:	f890 9003 	ldrb.w	r9, [r0, #3]
   31430:	f890 a002 	ldrb.w	sl, [r0, #2]
   31434:	f890 b001 	ldrb.w	fp, [r0, #1]
        sprintf(dst, "%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-"
   31438:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   3143c:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
   31440:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   31444:	930a      	str	r3, [sp, #40]	; 0x28
   31446:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
   3144a:	f8cd c020 	str.w	ip, [sp, #32]
   3144e:	9707      	str	r7, [sp, #28]
   31450:	9606      	str	r6, [sp, #24]
   31452:	9505      	str	r5, [sp, #20]
   31454:	9404      	str	r4, [sp, #16]
   31456:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   31458:	9403      	str	r4, [sp, #12]
   3145a:	9102      	str	r1, [sp, #8]
   3145c:	9201      	str	r2, [sp, #4]
   3145e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   31460:	9300      	str	r3, [sp, #0]
   31462:	7bc3      	ldrb	r3, [r0, #15]
   31464:	7c02      	ldrb	r2, [r0, #16]
   31466:	4904      	ldr	r1, [pc, #16]	; (31478 <ble_uuid_to_str+0xa4>)
   31468:	4640      	mov	r0, r8
   3146a:	f002 fef3 	bl	34254 <sprintf>
        break;
   3146e:	e7c4      	b.n	313fa <ble_uuid_to_str+0x26>
   31470:	00039980 	.word	0x00039980
   31474:	00039988 	.word	0x00039988
   31478:	00039990 	.word	0x00039990

0003147c <ble_uuid_u16>:
uint16_t
ble_uuid_u16(const ble_uuid_t *uuid)
{
    VERIFY_UUID(uuid);

    return uuid->type == BLE_UUID_TYPE_16 ? BLE_UUID16(uuid)->value : 0;
   3147c:	7803      	ldrb	r3, [r0, #0]
   3147e:	2b10      	cmp	r3, #16
   31480:	d001      	beq.n	31486 <ble_uuid_u16+0xa>
   31482:	2000      	movs	r0, #0
}
   31484:	4770      	bx	lr
    return uuid->type == BLE_UUID_TYPE_16 ? BLE_UUID16(uuid)->value : 0;
   31486:	8840      	ldrh	r0, [r0, #2]
   31488:	4770      	bx	lr

0003148a <ble_uuid_init_from_att_buf>:
    return rc;
}

int
ble_uuid_init_from_att_buf(ble_uuid_any_t *uuid, const void *buf, size_t len)
{
   3148a:	b570      	push	{r4, r5, r6, lr}
   3148c:	4604      	mov	r4, r0
    int rc = 0;

    if (len == 2) {
   3148e:	2a02      	cmp	r2, #2
   31490:	d003      	beq.n	3149a <ble_uuid_init_from_att_buf+0x10>
        uuid->u.type = BLE_UUID_TYPE_16;
        uuid->u16.value = get_le16(buf);
    } else if (len == 16) {
   31492:	2a10      	cmp	r2, #16
   31494:	d009      	beq.n	314aa <ble_uuid_init_from_att_buf+0x20>
        uuid->u.type = BLE_UUID_TYPE_128;
        memcpy(uuid->u128.value, buf, 16);
    } else {
        rc = BLE_HS_EINVAL;
   31496:	2003      	movs	r0, #3
    }

    return rc;
}
   31498:	bd70      	pop	{r4, r5, r6, pc}
        uuid->u.type = BLE_UUID_TYPE_16;
   3149a:	2310      	movs	r3, #16
   3149c:	7003      	strb	r3, [r0, #0]
        uuid->u16.value = get_le16(buf);
   3149e:	4608      	mov	r0, r1
   314a0:	f7e7 fcd5 	bl	18e4e <get_le16>
   314a4:	8060      	strh	r0, [r4, #2]
    int rc = 0;
   314a6:	2000      	movs	r0, #0
   314a8:	e7f6      	b.n	31498 <ble_uuid_init_from_att_buf+0xe>
        uuid->u.type = BLE_UUID_TYPE_128;
   314aa:	4603      	mov	r3, r0
   314ac:	2280      	movs	r2, #128	; 0x80
   314ae:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(uuid->u128.value, buf, 16);
   314b2:	680e      	ldr	r6, [r1, #0]
   314b4:	684d      	ldr	r5, [r1, #4]
   314b6:	6888      	ldr	r0, [r1, #8]
   314b8:	68ca      	ldr	r2, [r1, #12]
   314ba:	f8c4 6001 	str.w	r6, [r4, #1]
   314be:	605d      	str	r5, [r3, #4]
   314c0:	6098      	str	r0, [r3, #8]
   314c2:	60da      	str	r2, [r3, #12]
    int rc = 0;
   314c4:	2000      	movs	r0, #0
   314c6:	e7e7      	b.n	31498 <ble_uuid_init_from_att_buf+0xe>

000314c8 <ble_uuid_init_from_att_mbuf>:
{
   314c8:	b530      	push	{r4, r5, lr}
   314ca:	b085      	sub	sp, #20
   314cc:	4605      	mov	r5, r0
   314ce:	4608      	mov	r0, r1
   314d0:	4611      	mov	r1, r2
   314d2:	461c      	mov	r4, r3
    rc = os_mbuf_copydata(om, off, len, val);
   314d4:	466b      	mov	r3, sp
   314d6:	4622      	mov	r2, r4
   314d8:	f7e8 f91a 	bl	19710 <os_mbuf_copydata>
    if (rc != 0) {
   314dc:	b108      	cbz	r0, 314e2 <ble_uuid_init_from_att_mbuf+0x1a>
}
   314de:	b005      	add	sp, #20
   314e0:	bd30      	pop	{r4, r5, pc}
    rc = ble_uuid_init_from_att_buf(uuid, val, len);
   314e2:	4622      	mov	r2, r4
   314e4:	4669      	mov	r1, sp
   314e6:	4628      	mov	r0, r5
   314e8:	f7ff ffcf 	bl	3148a <ble_uuid_init_from_att_buf>
    return rc;
   314ec:	e7f7      	b.n	314de <ble_uuid_init_from_att_mbuf+0x16>

000314ee <ble_uuid_to_any>:
int
ble_uuid_to_any(const ble_uuid_t *uuid, ble_uuid_any_t *uuid_any)
{
    VERIFY_UUID(uuid);

    uuid_any->u.type = uuid->type;
   314ee:	7803      	ldrb	r3, [r0, #0]
   314f0:	700b      	strb	r3, [r1, #0]

    switch (uuid->type) {
   314f2:	2b20      	cmp	r3, #32
   314f4:	d009      	beq.n	3150a <ble_uuid_to_any+0x1c>
   314f6:	2b80      	cmp	r3, #128	; 0x80
   314f8:	d00b      	beq.n	31512 <ble_uuid_to_any+0x24>
   314fa:	2b10      	cmp	r3, #16
   314fc:	d001      	beq.n	31502 <ble_uuid_to_any+0x14>
   314fe:	2003      	movs	r0, #3
    default:
        return BLE_HS_EINVAL;
    }

    return 0;
}
   31500:	4770      	bx	lr
        uuid_any->u16.value = BLE_UUID16(uuid)->value;
   31502:	8843      	ldrh	r3, [r0, #2]
   31504:	804b      	strh	r3, [r1, #2]
    return 0;
   31506:	2000      	movs	r0, #0
        break;
   31508:	4770      	bx	lr
        uuid_any->u32.value = BLE_UUID32(uuid)->value;
   3150a:	6843      	ldr	r3, [r0, #4]
   3150c:	604b      	str	r3, [r1, #4]
    return 0;
   3150e:	2000      	movs	r0, #0
        break;
   31510:	4770      	bx	lr
{
   31512:	b430      	push	{r4, r5}
        memcpy(uuid_any->u128.value, BLE_UUID128(uuid)->value, 16);
   31514:	f850 5f01 	ldr.w	r5, [r0, #1]!
   31518:	6844      	ldr	r4, [r0, #4]
   3151a:	6882      	ldr	r2, [r0, #8]
   3151c:	68c3      	ldr	r3, [r0, #12]
   3151e:	f8c1 5001 	str.w	r5, [r1, #1]
   31522:	f8c1 4005 	str.w	r4, [r1, #5]
   31526:	f8c1 2009 	str.w	r2, [r1, #9]
   3152a:	f8c1 300d 	str.w	r3, [r1, #13]
    return 0;
   3152e:	2000      	movs	r0, #0
}
   31530:	bc30      	pop	{r4, r5}
   31532:	4770      	bx	lr

00031534 <ble_uuid_flat>:
    return 0;
}

int
ble_uuid_flat(const ble_uuid_t *uuid, void *dst)
{
   31534:	b570      	push	{r4, r5, r6, lr}
   31536:	4605      	mov	r5, r0
   31538:	460c      	mov	r4, r1
    VERIFY_UUID(uuid);

    switch (uuid->type) {
   3153a:	7803      	ldrb	r3, [r0, #0]
   3153c:	2b20      	cmp	r3, #32
   3153e:	d00b      	beq.n	31558 <ble_uuid_flat+0x24>
   31540:	2b80      	cmp	r3, #128	; 0x80
   31542:	d016      	beq.n	31572 <ble_uuid_flat+0x3e>
   31544:	2b10      	cmp	r3, #16
   31546:	d001      	beq.n	3154c <ble_uuid_flat+0x18>
   31548:	2003      	movs	r0, #3
    default:
        return BLE_HS_EINVAL;
    }

    return 0;
}
   3154a:	bd70      	pop	{r4, r5, r6, pc}
        put_le16(dst, BLE_UUID16(uuid)->value);
   3154c:	8841      	ldrh	r1, [r0, #2]
   3154e:	4620      	mov	r0, r4
   31550:	f7e7 fc5c 	bl	18e0c <put_le16>
    return 0;
   31554:	2000      	movs	r0, #0
        break;
   31556:	e7f8      	b.n	3154a <ble_uuid_flat+0x16>
        memcpy(dst, ble_uuid_base, 16);
   31558:	4e0b      	ldr	r6, [pc, #44]	; (31588 <ble_uuid_flat+0x54>)
   3155a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   3155c:	6020      	str	r0, [r4, #0]
   3155e:	6061      	str	r1, [r4, #4]
   31560:	60a2      	str	r2, [r4, #8]
   31562:	4620      	mov	r0, r4
   31564:	f840 3f0c 	str.w	r3, [r0, #12]!
        put_le32(dst + 12, BLE_UUID32(uuid)->value);
   31568:	6869      	ldr	r1, [r5, #4]
   3156a:	f7e7 fc53 	bl	18e14 <put_le32>
    return 0;
   3156e:	2000      	movs	r0, #0
        break;
   31570:	e7eb      	b.n	3154a <ble_uuid_flat+0x16>
        memcpy(dst, BLE_UUID128(uuid)->value, 16);
   31572:	f855 0f01 	ldr.w	r0, [r5, #1]!
   31576:	6869      	ldr	r1, [r5, #4]
   31578:	68aa      	ldr	r2, [r5, #8]
   3157a:	68eb      	ldr	r3, [r5, #12]
   3157c:	6020      	str	r0, [r4, #0]
   3157e:	6061      	str	r1, [r4, #4]
   31580:	60a2      	str	r2, [r4, #8]
   31582:	60e3      	str	r3, [r4, #12]
    return 0;
   31584:	2000      	movs	r0, #0
        break;
   31586:	e7e0      	b.n	3154a <ble_uuid_flat+0x16>
   31588:	000399d8 	.word	0x000399d8

0003158c <ble_uuid_length>:
int
ble_uuid_length(const ble_uuid_t *uuid)
{
    VERIFY_UUID(uuid);

    return uuid->type >> 3;
   3158c:	7800      	ldrb	r0, [r0, #0]
}
   3158e:	08c0      	lsrs	r0, r0, #3
   31590:	4770      	bx	lr

00031592 <ble_uuid_to_mbuf>:
{
   31592:	b538      	push	{r3, r4, r5, lr}
   31594:	4605      	mov	r5, r0
   31596:	460c      	mov	r4, r1
    len = ble_uuid_length(uuid);
   31598:	f7ff fff8 	bl	3158c <ble_uuid_length>
    buf = os_mbuf_extend(om, len);
   3159c:	b281      	uxth	r1, r0
   3159e:	4620      	mov	r0, r4
   315a0:	f7e8 fa98 	bl	19ad4 <os_mbuf_extend>
    if (buf == NULL) {
   315a4:	b128      	cbz	r0, 315b2 <ble_uuid_to_mbuf+0x20>
   315a6:	4601      	mov	r1, r0
    ble_uuid_flat(uuid, buf);
   315a8:	4628      	mov	r0, r5
   315aa:	f7ff ffc3 	bl	31534 <ble_uuid_flat>
    return 0;
   315ae:	2000      	movs	r0, #0
}
   315b0:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOMEM;
   315b2:	2006      	movs	r0, #6
   315b4:	e7fc      	b.n	315b0 <ble_uuid_to_mbuf+0x1e>
	...

000315b8 <ble_svc_ans_new_alert_notify>:
 *
 * @return 0 on success, non-zero error code otherwise.
 */
static int
ble_svc_ans_new_alert_notify(uint8_t cat_id, const char * info_str)
{
   315b8:	b538      	push	{r3, r4, r5, lr}
    int info_str_len;

    /* Clear notification to remove old infomation that may persist */
    memset(&ble_svc_ans_new_alert_val, '\0',
   315ba:	4b17      	ldr	r3, [pc, #92]	; (31618 <ble_svc_ans_new_alert_notify+0x60>)
   315bc:	2200      	movs	r2, #0
   315be:	601a      	str	r2, [r3, #0]
   315c0:	605a      	str	r2, [r3, #4]
   315c2:	609a      	str	r2, [r3, #8]
   315c4:	60da      	str	r2, [r3, #12]
   315c6:	611a      	str	r2, [r3, #16]
           BLE_SVC_ANS_NEW_ALERT_MAX_LEN);

    /* Set ID and count values */
    ble_svc_ans_new_alert_val[0] = cat_id;
   315c8:	7018      	strb	r0, [r3, #0]
    ble_svc_ans_new_alert_val[1] = ble_svc_ans_new_alert_cnt[cat_id];
   315ca:	4a14      	ldr	r2, [pc, #80]	; (3161c <ble_svc_ans_new_alert_notify+0x64>)
   315cc:	5c12      	ldrb	r2, [r2, r0]
   315ce:	705a      	strb	r2, [r3, #1]

    if (info_str) {
   315d0:	b1a9      	cbz	r1, 315fe <ble_svc_ans_new_alert_notify+0x46>
   315d2:	460c      	mov	r4, r1
        info_str_len = strlen(info_str);
   315d4:	4608      	mov	r0, r1
   315d6:	f7e9 fba2 	bl	1ad1e <strlen>
   315da:	4602      	mov	r2, r0
        if (info_str_len > BLE_SVC_ANS_INFO_STR_MAX_LEN) {
   315dc:	2812      	cmp	r0, #18
   315de:	dd15      	ble.n	3160c <ble_svc_ans_new_alert_notify+0x54>
            /* If info_str is longer than the max string length only
             * write up to the maximum length */
            memcpy(&ble_svc_ans_new_alert_val[2], info_str,
   315e0:	4b0d      	ldr	r3, [pc, #52]	; (31618 <ble_svc_ans_new_alert_notify+0x60>)
   315e2:	6825      	ldr	r5, [r4, #0]
   315e4:	6860      	ldr	r0, [r4, #4]
   315e6:	68a1      	ldr	r1, [r4, #8]
   315e8:	68e2      	ldr	r2, [r4, #12]
   315ea:	f8c3 5002 	str.w	r5, [r3, #2]
   315ee:	f8c3 0006 	str.w	r0, [r3, #6]
   315f2:	f8c3 100a 	str.w	r1, [r3, #10]
   315f6:	f8c3 200e 	str.w	r2, [r3, #14]
   315fa:	8a22      	ldrh	r2, [r4, #16]
   315fc:	825a      	strh	r2, [r3, #18]
                   BLE_SVC_ANS_INFO_STR_MAX_LEN);
        } else {
            memcpy(&ble_svc_ans_new_alert_val[2], info_str, info_str_len);
        }
    }
    return ble_gattc_notify(ble_svc_ans_conn_handle,
   315fe:	4b08      	ldr	r3, [pc, #32]	; (31620 <ble_svc_ans_new_alert_notify+0x68>)
   31600:	8819      	ldrh	r1, [r3, #0]
   31602:	4b08      	ldr	r3, [pc, #32]	; (31624 <ble_svc_ans_new_alert_notify+0x6c>)
   31604:	8818      	ldrh	r0, [r3, #0]
   31606:	f7fb f851 	bl	2c6ac <ble_gattc_notify>
                            ble_svc_ans_new_alert_val_handle);
}
   3160a:	bd38      	pop	{r3, r4, r5, pc}
            memcpy(&ble_svc_ans_new_alert_val[2], info_str, info_str_len);
   3160c:	4621      	mov	r1, r4
   3160e:	4806      	ldr	r0, [pc, #24]	; (31628 <ble_svc_ans_new_alert_notify+0x70>)
   31610:	f7e9 fb1e 	bl	1ac50 <memcpy>
   31614:	e7f3      	b.n	315fe <ble_svc_ans_new_alert_notify+0x46>
   31616:	bf00      	nop
   31618:	10005780 	.word	0x10005780
   3161c:	10005778 	.word	0x10005778
   31620:	10005794 	.word	0x10005794
   31624:	10005772 	.word	0x10005772
   31628:	10005782 	.word	0x10005782

0003162c <ble_svc_ans_unr_alert_notify>:
 *
 * @return 0 on success, non-zer0 error code otherwise.
 */
static int
ble_svc_ans_unr_alert_notify(uint8_t cat_id)
{
   3162c:	b508      	push	{r3, lr}
    ble_svc_ans_unr_alert_stat[0] = cat_id;
   3162e:	4b06      	ldr	r3, [pc, #24]	; (31648 <ble_svc_ans_unr_alert_notify+0x1c>)
   31630:	7018      	strb	r0, [r3, #0]
    ble_svc_ans_unr_alert_stat[1] = ble_svc_ans_unr_alert_cnt[cat_id];
   31632:	4a06      	ldr	r2, [pc, #24]	; (3164c <ble_svc_ans_unr_alert_notify+0x20>)
   31634:	5c12      	ldrb	r2, [r2, r0]
   31636:	705a      	strb	r2, [r3, #1]
    return ble_gattc_notify(ble_svc_ans_conn_handle,
   31638:	4b05      	ldr	r3, [pc, #20]	; (31650 <ble_svc_ans_unr_alert_notify+0x24>)
   3163a:	8819      	ldrh	r1, [r3, #0]
   3163c:	4b05      	ldr	r3, [pc, #20]	; (31654 <ble_svc_ans_unr_alert_notify+0x28>)
   3163e:	8818      	ldrh	r0, [r3, #0]
   31640:	f7fb f834 	bl	2c6ac <ble_gattc_notify>
                            ble_svc_ans_unr_alert_val_handle);
}
   31644:	bd08      	pop	{r3, pc}
   31646:	bf00      	nop
   31648:	100057a4 	.word	0x100057a4
   3164c:	1000579c 	.word	0x1000579c
   31650:	100057a6 	.word	0x100057a6
   31654:	10005772 	.word	0x10005772

00031658 <ble_svc_ans_chr_write>:
 */
static int
ble_svc_ans_chr_write(struct os_mbuf *om, uint16_t min_len,
                      uint16_t max_len, void *dst,
                      uint16_t *len)
{
   31658:	b510      	push	{r4, lr}
   3165a:	461c      	mov	r4, r3
    uint16_t om_len;
    int rc;

    om_len = OS_MBUF_PKTLEN(om);
   3165c:	8a03      	ldrh	r3, [r0, #16]
    if (om_len < min_len || om_len > max_len) {
   3165e:	428b      	cmp	r3, r1
   31660:	d307      	bcc.n	31672 <ble_svc_ans_chr_write+0x1a>
   31662:	4293      	cmp	r3, r2
   31664:	d807      	bhi.n	31676 <ble_svc_ans_chr_write+0x1e>
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
    }

    rc = ble_hs_mbuf_to_flat(om, dst, max_len, len);
   31666:	9b02      	ldr	r3, [sp, #8]
   31668:	4621      	mov	r1, r4
   3166a:	f7fe fca2 	bl	2ffb2 <ble_hs_mbuf_to_flat>
    if (rc != 0) {
   3166e:	b920      	cbnz	r0, 3167a <ble_svc_ans_chr_write+0x22>
        return BLE_ATT_ERR_UNLIKELY;
    }

    return 0;
}
   31670:	bd10      	pop	{r4, pc}
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   31672:	200d      	movs	r0, #13
   31674:	e7fc      	b.n	31670 <ble_svc_ans_chr_write+0x18>
   31676:	200d      	movs	r0, #13
   31678:	e7fa      	b.n	31670 <ble_svc_ans_chr_write+0x18>
        return BLE_ATT_ERR_UNLIKELY;
   3167a:	200e      	movs	r0, #14
   3167c:	e7f8      	b.n	31670 <ble_svc_ans_chr_write+0x18>
	...

00031680 <ble_svc_ans_access>:
{
   31680:	b530      	push	{r4, r5, lr}
   31682:	b083      	sub	sp, #12
   31684:	4614      	mov	r4, r2
    uuid16 = ble_uuid_u16(ctxt->chr->uuid);
   31686:	6893      	ldr	r3, [r2, #8]
   31688:	6818      	ldr	r0, [r3, #0]
   3168a:	f7ff fef7 	bl	3147c <ble_uuid_u16>
    assert(uuid16 != 0);
   3168e:	b150      	cbz	r0, 316a6 <ble_svc_ans_access+0x26>
    switch (uuid16) {
   31690:	f5a0 5329 	sub.w	r3, r0, #10816	; 0x2a40
   31694:	3b04      	subs	r3, #4
   31696:	2b04      	cmp	r3, #4
   31698:	f200 80d7 	bhi.w	3184a <ble_svc_ans_access+0x1ca>
   3169c:	e8df f003 	tbb	[pc, r3]
   316a0:	0d235a70 	.word	0x0d235a70
   316a4:	45          	.byte	0x45
   316a5:	00          	.byte	0x00
    assert(uuid16 != 0);
   316a6:	f7e3 f825 	bl	146f4 <hal_debugger_connected>
   316aa:	b100      	cbz	r0, 316ae <ble_svc_ans_access+0x2e>
   316ac:	be01      	bkpt	0x0001
   316ae:	2300      	movs	r3, #0
   316b0:	461a      	mov	r2, r3
   316b2:	4619      	mov	r1, r3
   316b4:	4618      	mov	r0, r3
   316b6:	f7e7 fb3b 	bl	18d30 <__assert_func>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   316ba:	7823      	ldrb	r3, [r4, #0]
   316bc:	b94b      	cbnz	r3, 316d2 <ble_svc_ans_access+0x52>
        rc = os_mbuf_append(ctxt->om, &ble_svc_ans_new_alert_cat,
   316be:	2201      	movs	r2, #1
   316c0:	4969      	ldr	r1, [pc, #420]	; (31868 <ble_svc_ans_access+0x1e8>)
   316c2:	6860      	ldr	r0, [r4, #4]
   316c4:	f7e7 ff93 	bl	195ee <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   316c8:	4604      	mov	r4, r0
   316ca:	2800      	cmp	r0, #0
   316cc:	d05c      	beq.n	31788 <ble_svc_ans_access+0x108>
   316ce:	2411      	movs	r4, #17
   316d0:	e05a      	b.n	31788 <ble_svc_ans_access+0x108>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   316d2:	f7e3 f80f 	bl	146f4 <hal_debugger_connected>
   316d6:	b100      	cbz	r0, 316da <ble_svc_ans_access+0x5a>
   316d8:	be01      	bkpt	0x0001
   316da:	2300      	movs	r3, #0
   316dc:	461a      	mov	r2, r3
   316de:	4619      	mov	r1, r3
   316e0:	4618      	mov	r0, r3
   316e2:	f7e7 fb25 	bl	18d30 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   316e6:	7823      	ldrb	r3, [r4, #0]
   316e8:	2b01      	cmp	r3, #1
   316ea:	d00a      	beq.n	31702 <ble_svc_ans_access+0x82>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   316ec:	b99b      	cbnz	r3, 31716 <ble_svc_ans_access+0x96>
            rc = os_mbuf_append(ctxt->om, &ble_svc_ans_new_alert_val,
   316ee:	2214      	movs	r2, #20
   316f0:	495e      	ldr	r1, [pc, #376]	; (3186c <ble_svc_ans_access+0x1ec>)
   316f2:	6860      	ldr	r0, [r4, #4]
   316f4:	f7e7 ff7b 	bl	195ee <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   316f8:	4604      	mov	r4, r0
   316fa:	2800      	cmp	r0, #0
   316fc:	d044      	beq.n	31788 <ble_svc_ans_access+0x108>
   316fe:	2411      	movs	r4, #17
   31700:	e042      	b.n	31788 <ble_svc_ans_access+0x108>
            rc = ble_svc_ans_chr_write(ctxt->om, 0,
   31702:	4b5b      	ldr	r3, [pc, #364]	; (31870 <ble_svc_ans_access+0x1f0>)
   31704:	9300      	str	r3, [sp, #0]
   31706:	4b59      	ldr	r3, [pc, #356]	; (3186c <ble_svc_ans_access+0x1ec>)
   31708:	2214      	movs	r2, #20
   3170a:	2100      	movs	r1, #0
   3170c:	6860      	ldr	r0, [r4, #4]
   3170e:	f7ff ffa3 	bl	31658 <ble_svc_ans_chr_write>
   31712:	4604      	mov	r4, r0
            return rc;
   31714:	e038      	b.n	31788 <ble_svc_ans_access+0x108>
        assert(0);
   31716:	f7e2 ffed 	bl	146f4 <hal_debugger_connected>
   3171a:	b100      	cbz	r0, 3171e <ble_svc_ans_access+0x9e>
   3171c:	be01      	bkpt	0x0001
   3171e:	2300      	movs	r3, #0
   31720:	461a      	mov	r2, r3
   31722:	4619      	mov	r1, r3
   31724:	4618      	mov	r0, r3
   31726:	f7e7 fb03 	bl	18d30 <__assert_func>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   3172a:	7823      	ldrb	r3, [r4, #0]
   3172c:	b943      	cbnz	r3, 31740 <ble_svc_ans_access+0xc0>
        rc = os_mbuf_append(ctxt->om, &ble_svc_ans_unr_alert_cat,
   3172e:	2201      	movs	r2, #1
   31730:	4950      	ldr	r1, [pc, #320]	; (31874 <ble_svc_ans_access+0x1f4>)
   31732:	6860      	ldr	r0, [r4, #4]
   31734:	f7e7 ff5b 	bl	195ee <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   31738:	4604      	mov	r4, r0
   3173a:	b328      	cbz	r0, 31788 <ble_svc_ans_access+0x108>
   3173c:	2411      	movs	r4, #17
   3173e:	e023      	b.n	31788 <ble_svc_ans_access+0x108>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   31740:	f7e2 ffd8 	bl	146f4 <hal_debugger_connected>
   31744:	b100      	cbz	r0, 31748 <ble_svc_ans_access+0xc8>
   31746:	be01      	bkpt	0x0001
   31748:	2300      	movs	r3, #0
   3174a:	461a      	mov	r2, r3
   3174c:	4619      	mov	r1, r3
   3174e:	4618      	mov	r0, r3
   31750:	f7e7 faee 	bl	18d30 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   31754:	7823      	ldrb	r3, [r4, #0]
   31756:	2b01      	cmp	r3, #1
   31758:	d008      	beq.n	3176c <ble_svc_ans_access+0xec>
            rc = os_mbuf_append(ctxt->om, &ble_svc_ans_unr_alert_stat,
   3175a:	2202      	movs	r2, #2
   3175c:	4946      	ldr	r1, [pc, #280]	; (31878 <ble_svc_ans_access+0x1f8>)
   3175e:	6860      	ldr	r0, [r4, #4]
   31760:	f7e7 ff45 	bl	195ee <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   31764:	4604      	mov	r4, r0
   31766:	b178      	cbz	r0, 31788 <ble_svc_ans_access+0x108>
   31768:	2411      	movs	r4, #17
   3176a:	e00d      	b.n	31788 <ble_svc_ans_access+0x108>
            rc = ble_svc_ans_chr_write(ctxt->om,
   3176c:	2300      	movs	r3, #0
   3176e:	9300      	str	r3, [sp, #0]
   31770:	4b41      	ldr	r3, [pc, #260]	; (31878 <ble_svc_ans_access+0x1f8>)
   31772:	2202      	movs	r2, #2
   31774:	4611      	mov	r1, r2
   31776:	6860      	ldr	r0, [r4, #4]
   31778:	f7ff ff6e 	bl	31658 <ble_svc_ans_chr_write>
   3177c:	4604      	mov	r4, r0
            return rc;
   3177e:	e003      	b.n	31788 <ble_svc_ans_access+0x108>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   31780:	7823      	ldrb	r3, [r4, #0]
   31782:	2b01      	cmp	r3, #1
   31784:	d003      	beq.n	3178e <ble_svc_ans_access+0x10e>
        return rc;
   31786:	240e      	movs	r4, #14
}
   31788:	4620      	mov	r0, r4
   3178a:	b003      	add	sp, #12
   3178c:	bd30      	pop	{r4, r5, pc}
            rc = ble_svc_ans_chr_write(ctxt->om,
   3178e:	2300      	movs	r3, #0
   31790:	9300      	str	r3, [sp, #0]
   31792:	4b3a      	ldr	r3, [pc, #232]	; (3187c <ble_svc_ans_access+0x1fc>)
   31794:	2202      	movs	r2, #2
   31796:	4611      	mov	r1, r2
   31798:	6860      	ldr	r0, [r4, #4]
   3179a:	f7ff ff5d 	bl	31658 <ble_svc_ans_chr_write>
            if (rc != 0) {
   3179e:	4604      	mov	r4, r0
   317a0:	2800      	cmp	r0, #0
   317a2:	d1f1      	bne.n	31788 <ble_svc_ans_access+0x108>
            cmd_id = ble_svc_ans_alert_not_ctrl_pt[0];
   317a4:	4b35      	ldr	r3, [pc, #212]	; (3187c <ble_svc_ans_access+0x1fc>)
   317a6:	781a      	ldrb	r2, [r3, #0]
            cat_id = ble_svc_ans_alert_not_ctrl_pt[1];
   317a8:	7858      	ldrb	r0, [r3, #1]
            if (cat_id < BLE_SVC_ANS_CAT_NUM) {
   317aa:	2807      	cmp	r0, #7
   317ac:	d809      	bhi.n	317c2 <ble_svc_ans_access+0x142>
                cat_bit_mask = (1 << cat_id);
   317ae:	2301      	movs	r3, #1
   317b0:	4083      	lsls	r3, r0
   317b2:	b2db      	uxtb	r3, r3
            switch (cmd_id) {
   317b4:	2a05      	cmp	r2, #5
   317b6:	d854      	bhi.n	31862 <ble_svc_ans_access+0x1e2>
   317b8:	e8df f002 	tbb	[pc, r2]
   317bc:	17110c07 	.word	0x17110c07
   317c0:	331d      	.short	0x331d
            } else if (cat_id == 0xff) {
   317c2:	28ff      	cmp	r0, #255	; 0xff
   317c4:	d14b      	bne.n	3185e <ble_svc_ans_access+0x1de>
                cat_bit_mask = cat_id;
   317c6:	4603      	mov	r3, r0
   317c8:	e7f4      	b.n	317b4 <ble_svc_ans_access+0x134>
                ble_svc_ans_new_alert_cat |= cat_bit_mask;
   317ca:	4a27      	ldr	r2, [pc, #156]	; (31868 <ble_svc_ans_access+0x1e8>)
   317cc:	7811      	ldrb	r1, [r2, #0]
   317ce:	430b      	orrs	r3, r1
   317d0:	7013      	strb	r3, [r2, #0]
                break;
   317d2:	e7d9      	b.n	31788 <ble_svc_ans_access+0x108>
                ble_svc_ans_unr_alert_cat |= cat_bit_mask;
   317d4:	4a27      	ldr	r2, [pc, #156]	; (31874 <ble_svc_ans_access+0x1f4>)
   317d6:	7811      	ldrb	r1, [r2, #0]
   317d8:	430b      	orrs	r3, r1
   317da:	7013      	strb	r3, [r2, #0]
                break;
   317dc:	e7d4      	b.n	31788 <ble_svc_ans_access+0x108>
                ble_svc_ans_new_alert_cat &= ~cat_bit_mask;
   317de:	4922      	ldr	r1, [pc, #136]	; (31868 <ble_svc_ans_access+0x1e8>)
   317e0:	780a      	ldrb	r2, [r1, #0]
   317e2:	ea22 0303 	bic.w	r3, r2, r3
   317e6:	700b      	strb	r3, [r1, #0]
                break;
   317e8:	e7ce      	b.n	31788 <ble_svc_ans_access+0x108>
                ble_svc_ans_unr_alert_cat &= ~cat_bit_mask;
   317ea:	4922      	ldr	r1, [pc, #136]	; (31874 <ble_svc_ans_access+0x1f4>)
   317ec:	780a      	ldrb	r2, [r1, #0]
   317ee:	ea22 0303 	bic.w	r3, r2, r3
   317f2:	700b      	strb	r3, [r1, #0]
                break;
   317f4:	e7c8      	b.n	31788 <ble_svc_ans_access+0x108>
                if (cat_id == 0xff) {
   317f6:	28ff      	cmp	r0, #255	; 0xff
   317f8:	d10f      	bne.n	3181a <ble_svc_ans_access+0x19a>
                    for (i = BLE_SVC_ANS_CAT_NUM - 1; i > 0; --i) {
   317fa:	2507      	movs	r5, #7
   317fc:	e000      	b.n	31800 <ble_svc_ans_access+0x180>
   317fe:	3d01      	subs	r5, #1
   31800:	2d00      	cmp	r5, #0
   31802:	ddc1      	ble.n	31788 <ble_svc_ans_access+0x108>
                        if ((ble_svc_ans_new_alert_cat >> i) & 0x01) {
   31804:	4b18      	ldr	r3, [pc, #96]	; (31868 <ble_svc_ans_access+0x1e8>)
   31806:	781b      	ldrb	r3, [r3, #0]
   31808:	412b      	asrs	r3, r5
   3180a:	f013 0f01 	tst.w	r3, #1
   3180e:	d0f6      	beq.n	317fe <ble_svc_ans_access+0x17e>
                            ble_svc_ans_new_alert_notify(i, NULL);
   31810:	2100      	movs	r1, #0
   31812:	b2e8      	uxtb	r0, r5
   31814:	f7ff fed0 	bl	315b8 <ble_svc_ans_new_alert_notify>
   31818:	e7f1      	b.n	317fe <ble_svc_ans_access+0x17e>
                    ble_svc_ans_new_alert_notify(cat_id, NULL);
   3181a:	2100      	movs	r1, #0
   3181c:	f7ff fecc 	bl	315b8 <ble_svc_ans_new_alert_notify>
   31820:	e7b2      	b.n	31788 <ble_svc_ans_access+0x108>
                if (cat_id == 0xff) {
   31822:	28ff      	cmp	r0, #255	; 0xff
   31824:	d10e      	bne.n	31844 <ble_svc_ans_access+0x1c4>
                    for (i = BLE_SVC_ANS_CAT_NUM - 1; i > 0; --i) {
   31826:	2507      	movs	r5, #7
   31828:	e000      	b.n	3182c <ble_svc_ans_access+0x1ac>
   3182a:	3d01      	subs	r5, #1
   3182c:	2d00      	cmp	r5, #0
   3182e:	ddab      	ble.n	31788 <ble_svc_ans_access+0x108>
                        if ((ble_svc_ans_unr_alert_cat >> i) & 0x01) {
   31830:	4b10      	ldr	r3, [pc, #64]	; (31874 <ble_svc_ans_access+0x1f4>)
   31832:	781b      	ldrb	r3, [r3, #0]
   31834:	412b      	asrs	r3, r5
   31836:	f013 0f01 	tst.w	r3, #1
   3183a:	d0f6      	beq.n	3182a <ble_svc_ans_access+0x1aa>
                            ble_svc_ans_unr_alert_notify(i);
   3183c:	b2e8      	uxtb	r0, r5
   3183e:	f7ff fef5 	bl	3162c <ble_svc_ans_unr_alert_notify>
   31842:	e7f2      	b.n	3182a <ble_svc_ans_access+0x1aa>
                    ble_svc_ans_unr_alert_notify(cat_id);
   31844:	f7ff fef2 	bl	3162c <ble_svc_ans_unr_alert_notify>
            return 0;
   31848:	e79e      	b.n	31788 <ble_svc_ans_access+0x108>
        assert(0);
   3184a:	f7e2 ff53 	bl	146f4 <hal_debugger_connected>
   3184e:	b100      	cbz	r0, 31852 <ble_svc_ans_access+0x1d2>
   31850:	be01      	bkpt	0x0001
   31852:	2300      	movs	r3, #0
   31854:	461a      	mov	r2, r3
   31856:	4619      	mov	r1, r3
   31858:	4618      	mov	r0, r3
   3185a:	f7e7 fa69 	bl	18d30 <__assert_func>
                return BLE_ATT_ERR_UNLIKELY;
   3185e:	240e      	movs	r4, #14
   31860:	e792      	b.n	31788 <ble_svc_ans_access+0x108>
   31862:	24a0      	movs	r4, #160	; 0xa0
   31864:	e790      	b.n	31788 <ble_svc_ans_access+0x108>
   31866:	bf00      	nop
   31868:	10005774 	.word	0x10005774
   3186c:	10005780 	.word	0x10005780
   31870:	10005796 	.word	0x10005796
   31874:	10005798 	.word	0x10005798
   31878:	100057a4 	.word	0x100057a4
   3187c:	10005770 	.word	0x10005770

00031880 <ble_svc_ans_init>:
 * XXX: We should technically be able to change the new alert and
 *      unread alert catagories when we have no active connections.
 */
void
ble_svc_ans_init(void)
{
   31880:	b510      	push	{r4, lr}
   31882:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   31884:	4b1a      	ldr	r3, [pc, #104]	; (318f0 <ble_svc_ans_init+0x70>)
   31886:	781b      	ldrb	r3, [r3, #0]
   31888:	b173      	cbz	r3, 318a8 <ble_svc_ans_init+0x28>

    rc = ble_gatts_count_cfg(ble_svc_ans_defs);
   3188a:	481a      	ldr	r0, [pc, #104]	; (318f4 <ble_svc_ans_init+0x74>)
   3188c:	f7fc f8e8 	bl	2da60 <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   31890:	b9a0      	cbnz	r0, 318bc <ble_svc_ans_init+0x3c>

    rc = ble_gatts_add_svcs(ble_svc_ans_defs);
   31892:	4818      	ldr	r0, [pc, #96]	; (318f4 <ble_svc_ans_init+0x74>)
   31894:	f7fc f8a0 	bl	2d9d8 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   31898:	b9e8      	cbnz	r0, 318d6 <ble_svc_ans_init+0x56>

    ble_svc_ans_new_alert_cat = MYNEWT_VAL(BLE_SVC_ANS_NEW_ALERT_CAT);
   3189a:	2300      	movs	r3, #0
   3189c:	4a16      	ldr	r2, [pc, #88]	; (318f8 <ble_svc_ans_init+0x78>)
   3189e:	7013      	strb	r3, [r2, #0]
    ble_svc_ans_unr_alert_cat = MYNEWT_VAL(BLE_SVC_ANS_UNR_ALERT_CAT);
   318a0:	4a16      	ldr	r2, [pc, #88]	; (318fc <ble_svc_ans_init+0x7c>)
   318a2:	7013      	strb	r3, [r2, #0]
}
   318a4:	b002      	add	sp, #8
   318a6:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   318a8:	f7e2 ff24 	bl	146f4 <hal_debugger_connected>
   318ac:	b100      	cbz	r0, 318b0 <ble_svc_ans_init+0x30>
   318ae:	be01      	bkpt	0x0001
   318b0:	2300      	movs	r3, #0
   318b2:	461a      	mov	r2, r3
   318b4:	4619      	mov	r1, r3
   318b6:	4618      	mov	r0, r3
   318b8:	f7e7 fa3a 	bl	18d30 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   318bc:	f7e2 ff1a 	bl	146f4 <hal_debugger_connected>
   318c0:	b100      	cbz	r0, 318c4 <ble_svc_ans_init+0x44>
   318c2:	be01      	bkpt	0x0001
   318c4:	2000      	movs	r0, #0
   318c6:	9000      	str	r0, [sp, #0]
   318c8:	4b0d      	ldr	r3, [pc, #52]	; (31900 <ble_svc_ans_init+0x80>)
   318ca:	681c      	ldr	r4, [r3, #0]
   318cc:	4603      	mov	r3, r0
   318ce:	4602      	mov	r2, r0
   318d0:	4601      	mov	r1, r0
   318d2:	47a0      	blx	r4
   318d4:	e7dd      	b.n	31892 <ble_svc_ans_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   318d6:	f7e2 ff0d 	bl	146f4 <hal_debugger_connected>
   318da:	b100      	cbz	r0, 318de <ble_svc_ans_init+0x5e>
   318dc:	be01      	bkpt	0x0001
   318de:	2000      	movs	r0, #0
   318e0:	9000      	str	r0, [sp, #0]
   318e2:	4b07      	ldr	r3, [pc, #28]	; (31900 <ble_svc_ans_init+0x80>)
   318e4:	681c      	ldr	r4, [r3, #0]
   318e6:	4603      	mov	r3, r0
   318e8:	4602      	mov	r2, r0
   318ea:	4601      	mov	r1, r0
   318ec:	47a0      	blx	r4
   318ee:	e7d4      	b.n	3189a <ble_svc_ans_init+0x1a>
   318f0:	10003fd8 	.word	0x10003fd8
   318f4:	000399e8 	.word	0x000399e8
   318f8:	10005774 	.word	0x10005774
   318fc:	10005798 	.word	0x10005798
   31900:	100006b4 	.word	0x100006b4

00031904 <ble_svc_gap_device_name_write_access>:
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
}

static int
ble_svc_gap_device_name_write_access(struct ble_gatt_access_ctxt *ctxt)
{
   31904:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BLE_SVC_GAP_DEVICE_NAME_WRITE_PERM) < 0
    assert(0);
   31906:	f7e2 fef5 	bl	146f4 <hal_debugger_connected>
   3190a:	b100      	cbz	r0, 3190e <ble_svc_gap_device_name_write_access+0xa>
   3190c:	be01      	bkpt	0x0001
   3190e:	2300      	movs	r3, #0
   31910:	461a      	mov	r2, r3
   31912:	4619      	mov	r1, r3
   31914:	4618      	mov	r0, r3
   31916:	f7e7 fa0b 	bl	18d30 <__assert_func>

0003191a <ble_svc_gap_appearance_write_access>:
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
}

static int
ble_svc_gap_appearance_write_access(struct ble_gatt_access_ctxt *ctxt)
{
   3191a:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BLE_SVC_GAP_APPEARANCE_WRITE_PERM) < 0
    assert(0);
   3191c:	f7e2 feea 	bl	146f4 <hal_debugger_connected>
   31920:	b100      	cbz	r0, 31924 <ble_svc_gap_appearance_write_access+0xa>
   31922:	be01      	bkpt	0x0001
   31924:	2300      	movs	r3, #0
   31926:	461a      	mov	r2, r3
   31928:	4619      	mov	r1, r3
   3192a:	4618      	mov	r0, r3
   3192c:	f7e7 fa00 	bl	18d30 <__assert_func>

00031930 <ble_svc_gap_device_name_read_access>:
{
   31930:	b538      	push	{r3, r4, r5, lr}
   31932:	4604      	mov	r4, r0
    rc = os_mbuf_append(ctxt->om, ble_svc_gap_name, strlen(ble_svc_gap_name));
   31934:	4d06      	ldr	r5, [pc, #24]	; (31950 <ble_svc_gap_device_name_read_access+0x20>)
   31936:	4628      	mov	r0, r5
   31938:	f7e9 f9f1 	bl	1ad1e <strlen>
   3193c:	b282      	uxth	r2, r0
   3193e:	4629      	mov	r1, r5
   31940:	6860      	ldr	r0, [r4, #4]
   31942:	f7e7 fe54 	bl	195ee <os_mbuf_append>
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   31946:	b900      	cbnz	r0, 3194a <ble_svc_gap_device_name_read_access+0x1a>
}
   31948:	bd38      	pop	{r3, r4, r5, pc}
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   3194a:	2011      	movs	r0, #17
   3194c:	e7fc      	b.n	31948 <ble_svc_gap_device_name_read_access+0x18>
   3194e:	bf00      	nop
   31950:	10000814 	.word	0x10000814

00031954 <ble_svc_gap_appearance_read_access>:
{
   31954:	b500      	push	{lr}
   31956:	b083      	sub	sp, #12
    uint16_t appearance = htole16(ble_svc_gap_appearance);
   31958:	4b07      	ldr	r3, [pc, #28]	; (31978 <ble_svc_gap_appearance_read_access+0x24>)
   3195a:	881b      	ldrh	r3, [r3, #0]
   3195c:	f8ad 3006 	strh.w	r3, [sp, #6]
    rc = os_mbuf_append(ctxt->om, &appearance, sizeof(appearance));
   31960:	2202      	movs	r2, #2
   31962:	f10d 0106 	add.w	r1, sp, #6
   31966:	6840      	ldr	r0, [r0, #4]
   31968:	f7e7 fe41 	bl	195ee <os_mbuf_append>
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   3196c:	b910      	cbnz	r0, 31974 <ble_svc_gap_appearance_read_access+0x20>
}
   3196e:	b003      	add	sp, #12
   31970:	f85d fb04 	ldr.w	pc, [sp], #4
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   31974:	2011      	movs	r0, #17
   31976:	e7fa      	b.n	3196e <ble_svc_gap_appearance_read_access+0x1a>
   31978:	100057a8 	.word	0x100057a8

0003197c <ble_svc_gap_access>:
}

static int
ble_svc_gap_access(uint16_t conn_handle, uint16_t attr_handle,
                   struct ble_gatt_access_ctxt *ctxt, void *arg)
{
   3197c:	b510      	push	{r4, lr}
   3197e:	4614      	mov	r4, r2
        htole16(MYNEWT_VAL(BLE_SVC_GAP_PPCP_SUPERVISION_TMO))
    };
#endif
    int rc;

    uuid16 = ble_uuid_u16(ctxt->chr->uuid);
   31980:	6893      	ldr	r3, [r2, #8]
   31982:	6818      	ldr	r0, [r3, #0]
   31984:	f7ff fd7a 	bl	3147c <ble_uuid_u16>
    assert(uuid16 != 0);
   31988:	b1a0      	cbz	r0, 319b4 <ble_svc_gap_access+0x38>

    switch (uuid16) {
   3198a:	f5b0 5f28 	cmp.w	r0, #10752	; 0x2a00
   3198e:	d01b      	beq.n	319c8 <ble_svc_gap_access+0x4c>
   31990:	f642 2201 	movw	r2, #10753	; 0x2a01
   31994:	4290      	cmp	r0, r2
   31996:	d133      	bne.n	31a00 <ble_svc_gap_access+0x84>
            rc = BLE_ATT_ERR_UNLIKELY;
        }
        return rc;

    case BLE_SVC_GAP_CHR_UUID16_APPEARANCE:
        if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   31998:	7823      	ldrb	r3, [r4, #0]
   3199a:	b353      	cbz	r3, 319f2 <ble_svc_gap_access+0x76>
            rc = ble_svc_gap_appearance_read_access(ctxt);
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   3199c:	2b01      	cmp	r3, #1
   3199e:	d02c      	beq.n	319fa <ble_svc_gap_access+0x7e>
            rc = ble_svc_gap_appearance_write_access(ctxt);
        } else {
            assert(0);
   319a0:	f7e2 fea8 	bl	146f4 <hal_debugger_connected>
   319a4:	b100      	cbz	r0, 319a8 <ble_svc_gap_access+0x2c>
   319a6:	be01      	bkpt	0x0001
   319a8:	2300      	movs	r3, #0
   319aa:	461a      	mov	r2, r3
   319ac:	4619      	mov	r1, r3
   319ae:	4618      	mov	r0, r3
   319b0:	f7e7 f9be 	bl	18d30 <__assert_func>
    assert(uuid16 != 0);
   319b4:	f7e2 fe9e 	bl	146f4 <hal_debugger_connected>
   319b8:	b100      	cbz	r0, 319bc <ble_svc_gap_access+0x40>
   319ba:	be01      	bkpt	0x0001
   319bc:	2300      	movs	r3, #0
   319be:	461a      	mov	r2, r3
   319c0:	4619      	mov	r1, r3
   319c2:	4618      	mov	r0, r3
   319c4:	f7e7 f9b4 	bl	18d30 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   319c8:	7823      	ldrb	r3, [r4, #0]
   319ca:	b15b      	cbz	r3, 319e4 <ble_svc_gap_access+0x68>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   319cc:	2b01      	cmp	r3, #1
   319ce:	d00d      	beq.n	319ec <ble_svc_gap_access+0x70>
            assert(0);
   319d0:	f7e2 fe90 	bl	146f4 <hal_debugger_connected>
   319d4:	b100      	cbz	r0, 319d8 <ble_svc_gap_access+0x5c>
   319d6:	be01      	bkpt	0x0001
   319d8:	2300      	movs	r3, #0
   319da:	461a      	mov	r2, r3
   319dc:	4619      	mov	r1, r3
   319de:	4618      	mov	r0, r3
   319e0:	f7e7 f9a6 	bl	18d30 <__assert_func>
            rc = ble_svc_gap_device_name_read_access(ctxt);
   319e4:	4620      	mov	r0, r4
   319e6:	f7ff ffa3 	bl	31930 <ble_svc_gap_device_name_read_access>

    default:
        assert(0);
        return BLE_ATT_ERR_UNLIKELY;
    }
}
   319ea:	bd10      	pop	{r4, pc}
            rc = ble_svc_gap_device_name_write_access(ctxt);
   319ec:	4620      	mov	r0, r4
   319ee:	f7ff ff89 	bl	31904 <ble_svc_gap_device_name_write_access>
            rc = ble_svc_gap_appearance_read_access(ctxt);
   319f2:	4620      	mov	r0, r4
   319f4:	f7ff ffae 	bl	31954 <ble_svc_gap_appearance_read_access>
        return rc;
   319f8:	e7f7      	b.n	319ea <ble_svc_gap_access+0x6e>
            rc = ble_svc_gap_appearance_write_access(ctxt);
   319fa:	4620      	mov	r0, r4
   319fc:	f7ff ff8d 	bl	3191a <ble_svc_gap_appearance_write_access>
        assert(0);
   31a00:	f7e2 fe78 	bl	146f4 <hal_debugger_connected>
   31a04:	b100      	cbz	r0, 31a08 <ble_svc_gap_access+0x8c>
   31a06:	be01      	bkpt	0x0001
   31a08:	2300      	movs	r3, #0
   31a0a:	461a      	mov	r2, r3
   31a0c:	4619      	mov	r1, r3
   31a0e:	4618      	mov	r0, r3
   31a10:	f7e7 f98e 	bl	18d30 <__assert_func>

00031a14 <ble_svc_gap_device_name_set>:
    return ble_svc_gap_name;
}

int
ble_svc_gap_device_name_set(const char *name)
{
   31a14:	b570      	push	{r4, r5, r6, lr}
   31a16:	4605      	mov	r5, r0
    int len;

    len = strlen(name);
   31a18:	f7e9 f981 	bl	1ad1e <strlen>
    if (len > BLE_SVC_GAP_NAME_MAX_LEN) {
   31a1c:	281f      	cmp	r0, #31
   31a1e:	dc09      	bgt.n	31a34 <ble_svc_gap_device_name_set+0x20>
   31a20:	4604      	mov	r4, r0
        return BLE_HS_EINVAL;
    }

    memcpy(ble_svc_gap_name, name, len);
   31a22:	4e05      	ldr	r6, [pc, #20]	; (31a38 <ble_svc_gap_device_name_set+0x24>)
   31a24:	4602      	mov	r2, r0
   31a26:	4629      	mov	r1, r5
   31a28:	4630      	mov	r0, r6
   31a2a:	f7e9 f911 	bl	1ac50 <memcpy>
    ble_svc_gap_name[len] = '\0';
   31a2e:	2000      	movs	r0, #0
   31a30:	5530      	strb	r0, [r6, r4]

    return 0;
}
   31a32:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EINVAL;
   31a34:	2003      	movs	r0, #3
   31a36:	e7fc      	b.n	31a32 <ble_svc_gap_device_name_set+0x1e>
   31a38:	10000814 	.word	0x10000814

00031a3c <ble_svc_gap_init>:
    ble_svc_gap_chr_changed_cb_fn = cb;
}

void
ble_svc_gap_init(void)
{
   31a3c:	b510      	push	{r4, lr}
   31a3e:	b082      	sub	sp, #8
#if NIMBLE_BLE_CONNECT
    int rc;
#endif

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   31a40:	4b18      	ldr	r3, [pc, #96]	; (31aa4 <ble_svc_gap_init+0x68>)
   31a42:	781b      	ldrb	r3, [r3, #0]
   31a44:	b14b      	cbz	r3, 31a5a <ble_svc_gap_init+0x1e>

#if NIMBLE_BLE_CONNECT
    rc = ble_gatts_count_cfg(ble_svc_gap_defs);
   31a46:	4818      	ldr	r0, [pc, #96]	; (31aa8 <ble_svc_gap_init+0x6c>)
   31a48:	f7fc f80a 	bl	2da60 <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   31a4c:	b978      	cbnz	r0, 31a6e <ble_svc_gap_init+0x32>

    rc = ble_gatts_add_svcs(ble_svc_gap_defs);
   31a4e:	4816      	ldr	r0, [pc, #88]	; (31aa8 <ble_svc_gap_init+0x6c>)
   31a50:	f7fb ffc2 	bl	2d9d8 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   31a54:	b9c0      	cbnz	r0, 31a88 <ble_svc_gap_init+0x4c>
#endif
}
   31a56:	b002      	add	sp, #8
   31a58:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   31a5a:	f7e2 fe4b 	bl	146f4 <hal_debugger_connected>
   31a5e:	b100      	cbz	r0, 31a62 <ble_svc_gap_init+0x26>
   31a60:	be01      	bkpt	0x0001
   31a62:	2300      	movs	r3, #0
   31a64:	461a      	mov	r2, r3
   31a66:	4619      	mov	r1, r3
   31a68:	4618      	mov	r0, r3
   31a6a:	f7e7 f961 	bl	18d30 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   31a6e:	f7e2 fe41 	bl	146f4 <hal_debugger_connected>
   31a72:	b100      	cbz	r0, 31a76 <ble_svc_gap_init+0x3a>
   31a74:	be01      	bkpt	0x0001
   31a76:	2000      	movs	r0, #0
   31a78:	9000      	str	r0, [sp, #0]
   31a7a:	4b0c      	ldr	r3, [pc, #48]	; (31aac <ble_svc_gap_init+0x70>)
   31a7c:	681c      	ldr	r4, [r3, #0]
   31a7e:	4603      	mov	r3, r0
   31a80:	4602      	mov	r2, r0
   31a82:	4601      	mov	r1, r0
   31a84:	47a0      	blx	r4
   31a86:	e7e2      	b.n	31a4e <ble_svc_gap_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   31a88:	f7e2 fe34 	bl	146f4 <hal_debugger_connected>
   31a8c:	b100      	cbz	r0, 31a90 <ble_svc_gap_init+0x54>
   31a8e:	be01      	bkpt	0x0001
   31a90:	2000      	movs	r0, #0
   31a92:	9000      	str	r0, [sp, #0]
   31a94:	4b05      	ldr	r3, [pc, #20]	; (31aac <ble_svc_gap_init+0x70>)
   31a96:	681c      	ldr	r4, [r3, #0]
   31a98:	4603      	mov	r3, r0
   31a9a:	4602      	mov	r2, r0
   31a9c:	4601      	mov	r1, r0
   31a9e:	47a0      	blx	r4
}
   31aa0:	e7d9      	b.n	31a56 <ble_svc_gap_init+0x1a>
   31aa2:	bf00      	nop
   31aa4:	10003fd8 	.word	0x10003fd8
   31aa8:	00039a08 	.word	0x00039a08
   31aac:	100006b4 	.word	0x100006b4

00031ab0 <ble_svc_gatt_access>:
};

static int
ble_svc_gatt_access(uint16_t conn_handle, uint16_t attr_handle,
                    struct ble_gatt_access_ctxt *ctxt, void *arg)
{
   31ab0:	b510      	push	{r4, lr}
     * access callback gets called by the stack when it needs to read the
     * characteristic value to populate the outgoing indication command.
     * Therefore, this callback should only get called during an attempt to
     * read the characteristic.
     */
    assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   31ab2:	7813      	ldrb	r3, [r2, #0]
   31ab4:	b9a3      	cbnz	r3, 31ae0 <ble_svc_gatt_access+0x30>
    assert(ctxt->chr == &ble_svc_gatt_defs[0].characteristics[0]);
   31ab6:	6891      	ldr	r1, [r2, #8]
   31ab8:	4b14      	ldr	r3, [pc, #80]	; (31b0c <ble_svc_gatt_access+0x5c>)
   31aba:	4299      	cmp	r1, r3
   31abc:	d11a      	bne.n	31af4 <ble_svc_gatt_access+0x44>

    u8p = os_mbuf_extend(ctxt->om, 4);
   31abe:	2104      	movs	r1, #4
   31ac0:	6850      	ldr	r0, [r2, #4]
   31ac2:	f7e8 f807 	bl	19ad4 <os_mbuf_extend>
    if (u8p == NULL) {
   31ac6:	4604      	mov	r4, r0
   31ac8:	b1f0      	cbz	r0, 31b08 <ble_svc_gatt_access+0x58>
        return BLE_HS_ENOMEM;
    }

    put_le16(u8p + 0, ble_svc_gatt_start_handle);
   31aca:	4b11      	ldr	r3, [pc, #68]	; (31b10 <ble_svc_gatt_access+0x60>)
   31acc:	8819      	ldrh	r1, [r3, #0]
   31ace:	f7e7 f99d 	bl	18e0c <put_le16>
    put_le16(u8p + 2, ble_svc_gatt_end_handle);
   31ad2:	4b10      	ldr	r3, [pc, #64]	; (31b14 <ble_svc_gatt_access+0x64>)
   31ad4:	8819      	ldrh	r1, [r3, #0]
   31ad6:	1ca0      	adds	r0, r4, #2
   31ad8:	f7e7 f998 	bl	18e0c <put_le16>

    return 0;
   31adc:	2000      	movs	r0, #0
}
   31ade:	bd10      	pop	{r4, pc}
    assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   31ae0:	f7e2 fe08 	bl	146f4 <hal_debugger_connected>
   31ae4:	b100      	cbz	r0, 31ae8 <ble_svc_gatt_access+0x38>
   31ae6:	be01      	bkpt	0x0001
   31ae8:	2300      	movs	r3, #0
   31aea:	461a      	mov	r2, r3
   31aec:	4619      	mov	r1, r3
   31aee:	4618      	mov	r0, r3
   31af0:	f7e7 f91e 	bl	18d30 <__assert_func>
    assert(ctxt->chr == &ble_svc_gatt_defs[0].characteristics[0]);
   31af4:	f7e2 fdfe 	bl	146f4 <hal_debugger_connected>
   31af8:	b100      	cbz	r0, 31afc <ble_svc_gatt_access+0x4c>
   31afa:	be01      	bkpt	0x0001
   31afc:	2300      	movs	r3, #0
   31afe:	461a      	mov	r2, r3
   31b00:	4619      	mov	r1, r3
   31b02:	4618      	mov	r0, r3
   31b04:	f7e7 f914 	bl	18d30 <__assert_func>
        return BLE_HS_ENOMEM;
   31b08:	2006      	movs	r0, #6
   31b0a:	e7e8      	b.n	31ade <ble_svc_gatt_access+0x2e>
   31b0c:	1000083c 	.word	0x1000083c
   31b10:	100057ae 	.word	0x100057ae
   31b14:	100057ac 	.word	0x100057ac

00031b18 <ble_svc_gatt_changed>:
 * @param start_handle          The start of the affected handle range.
 * @param end_handle            The end of the affected handle range.
 */
void
ble_svc_gatt_changed(uint16_t start_handle, uint16_t end_handle)
{
   31b18:	b508      	push	{r3, lr}
    ble_svc_gatt_start_handle = start_handle;
   31b1a:	4b04      	ldr	r3, [pc, #16]	; (31b2c <ble_svc_gatt_changed+0x14>)
   31b1c:	8018      	strh	r0, [r3, #0]
    ble_svc_gatt_end_handle = end_handle;
   31b1e:	4b04      	ldr	r3, [pc, #16]	; (31b30 <ble_svc_gatt_changed+0x18>)
   31b20:	8019      	strh	r1, [r3, #0]
    ble_gatts_chr_updated(ble_svc_gatt_changed_val_handle);
   31b22:	4b04      	ldr	r3, [pc, #16]	; (31b34 <ble_svc_gatt_changed+0x1c>)
   31b24:	8818      	ldrh	r0, [r3, #0]
   31b26:	f7fb fee7 	bl	2d8f8 <ble_gatts_chr_updated>
}
   31b2a:	bd08      	pop	{r3, pc}
   31b2c:	100057ae 	.word	0x100057ae
   31b30:	100057ac 	.word	0x100057ac
   31b34:	100057aa 	.word	0x100057aa

00031b38 <ble_svc_gatt_init>:

void
ble_svc_gatt_init(void)
{
   31b38:	b510      	push	{r4, lr}
   31b3a:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   31b3c:	4b18      	ldr	r3, [pc, #96]	; (31ba0 <ble_svc_gatt_init+0x68>)
   31b3e:	781b      	ldrb	r3, [r3, #0]
   31b40:	b14b      	cbz	r3, 31b56 <ble_svc_gatt_init+0x1e>

    rc = ble_gatts_count_cfg(ble_svc_gatt_defs);
   31b42:	4818      	ldr	r0, [pc, #96]	; (31ba4 <ble_svc_gatt_init+0x6c>)
   31b44:	f7fb ff8c 	bl	2da60 <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   31b48:	b978      	cbnz	r0, 31b6a <ble_svc_gatt_init+0x32>

    rc = ble_gatts_add_svcs(ble_svc_gatt_defs);
   31b4a:	4816      	ldr	r0, [pc, #88]	; (31ba4 <ble_svc_gatt_init+0x6c>)
   31b4c:	f7fb ff44 	bl	2d9d8 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   31b50:	b9c0      	cbnz	r0, 31b84 <ble_svc_gatt_init+0x4c>
}
   31b52:	b002      	add	sp, #8
   31b54:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   31b56:	f7e2 fdcd 	bl	146f4 <hal_debugger_connected>
   31b5a:	b100      	cbz	r0, 31b5e <ble_svc_gatt_init+0x26>
   31b5c:	be01      	bkpt	0x0001
   31b5e:	2300      	movs	r3, #0
   31b60:	461a      	mov	r2, r3
   31b62:	4619      	mov	r1, r3
   31b64:	4618      	mov	r0, r3
   31b66:	f7e7 f8e3 	bl	18d30 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   31b6a:	f7e2 fdc3 	bl	146f4 <hal_debugger_connected>
   31b6e:	b100      	cbz	r0, 31b72 <ble_svc_gatt_init+0x3a>
   31b70:	be01      	bkpt	0x0001
   31b72:	2000      	movs	r0, #0
   31b74:	9000      	str	r0, [sp, #0]
   31b76:	4b0c      	ldr	r3, [pc, #48]	; (31ba8 <ble_svc_gatt_init+0x70>)
   31b78:	681c      	ldr	r4, [r3, #0]
   31b7a:	4603      	mov	r3, r0
   31b7c:	4602      	mov	r2, r0
   31b7e:	4601      	mov	r1, r0
   31b80:	47a0      	blx	r4
   31b82:	e7e2      	b.n	31b4a <ble_svc_gatt_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   31b84:	f7e2 fdb6 	bl	146f4 <hal_debugger_connected>
   31b88:	b100      	cbz	r0, 31b8c <ble_svc_gatt_init+0x54>
   31b8a:	be01      	bkpt	0x0001
   31b8c:	2000      	movs	r0, #0
   31b8e:	9000      	str	r0, [sp, #0]
   31b90:	4b05      	ldr	r3, [pc, #20]	; (31ba8 <ble_svc_gatt_init+0x70>)
   31b92:	681c      	ldr	r4, [r3, #0]
   31b94:	4603      	mov	r3, r0
   31b96:	4602      	mov	r2, r0
   31b98:	4601      	mov	r1, r0
   31b9a:	47a0      	blx	r4
}
   31b9c:	e7d9      	b.n	31b52 <ble_svc_gatt_init+0x1a>
   31b9e:	bf00      	nop
   31ba0:	10003fd8 	.word	0x10003fd8
   31ba4:	00039a28 	.word	0x00039a28
   31ba8:	100006b4 	.word	0x100006b4

00031bac <ble_store_config_find_sec>:

static int
ble_store_config_find_sec(const struct ble_store_key_sec *key_sec,
                          const struct ble_store_value_sec *value_secs,
                          int num_value_secs)
{
   31bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31bb0:	b083      	sub	sp, #12
   31bb2:	4605      	mov	r5, r0
   31bb4:	460f      	mov	r7, r1
   31bb6:	4690      	mov	r8, r2
    int skipped;
    int i;

    skipped = 0;

    for (i = 0; i < num_value_secs; i++) {
   31bb8:	2400      	movs	r4, #0
    skipped = 0;
   31bba:	46a1      	mov	r9, r4
    for (i = 0; i < num_value_secs; i++) {
   31bbc:	e004      	b.n	31bc8 <ble_store_config_find_sec+0x1c>
        return type_diff;
   31bbe:	4650      	mov	r0, sl
   31bc0:	e019      	b.n	31bf6 <ble_store_config_find_sec+0x4a>
                continue;
            }
        }

        if (key_sec->idx > skipped) {
            skipped++;
   31bc2:	f109 0901 	add.w	r9, r9, #1
    for (i = 0; i < num_value_secs; i++) {
   31bc6:	3401      	adds	r4, #1
   31bc8:	4544      	cmp	r4, r8
   31bca:	da38      	bge.n	31c3e <ble_store_config_find_sec+0x92>
        cur = value_secs + i;
   31bcc:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   31bd0:	ea4f 1b06 	mov.w	fp, r6, lsl #4
   31bd4:	eb07 1606 	add.w	r6, r7, r6, lsl #4
        if (ble_addr_cmp(&key_sec->peer_addr, BLE_ADDR_ANY)) {
   31bd8:	2300      	movs	r3, #0
   31bda:	9300      	str	r3, [sp, #0]
   31bdc:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   31be0:	f895 a000 	ldrb.w	sl, [r5]
    if (type_diff != 0) {
   31be4:	f1ba 0f00 	cmp.w	sl, #0
   31be8:	d1e9      	bne.n	31bbe <ble_store_config_find_sec+0x12>
    return memcmp(a->val, b->val, sizeof(a->val));
   31bea:	2206      	movs	r2, #6
   31bec:	f10d 0101 	add.w	r1, sp, #1
   31bf0:	1c68      	adds	r0, r5, #1
   31bf2:	f7e9 f809 	bl	1ac08 <memcmp>
   31bf6:	b158      	cbz	r0, 31c10 <ble_store_config_find_sec+0x64>
    type_diff = a->type - b->type;
   31bf8:	f817 000b 	ldrb.w	r0, [r7, fp]
    if (type_diff != 0) {
   31bfc:	ebb0 000a 	subs.w	r0, r0, sl
   31c00:	d104      	bne.n	31c0c <ble_store_config_find_sec+0x60>
    return memcmp(a->val, b->val, sizeof(a->val));
   31c02:	2206      	movs	r2, #6
   31c04:	1c69      	adds	r1, r5, #1
   31c06:	1c70      	adds	r0, r6, #1
   31c08:	f7e8 fffe 	bl	1ac08 <memcmp>
            if (ble_addr_cmp(&cur->peer_addr, &key_sec->peer_addr)) {
   31c0c:	2800      	cmp	r0, #0
   31c0e:	d1da      	bne.n	31bc6 <ble_store_config_find_sec+0x1a>
        if (key_sec->ediv_rand_present) {
   31c10:	7e2b      	ldrb	r3, [r5, #24]
   31c12:	f013 0f01 	tst.w	r3, #1
   31c16:	d00b      	beq.n	31c30 <ble_store_config_find_sec+0x84>
            if (cur->ediv != key_sec->ediv) {
   31c18:	8932      	ldrh	r2, [r6, #8]
   31c1a:	892b      	ldrh	r3, [r5, #8]
   31c1c:	429a      	cmp	r2, r3
   31c1e:	d1d2      	bne.n	31bc6 <ble_store_config_find_sec+0x1a>
            if (cur->rand_num != key_sec->rand_num) {
   31c20:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
   31c24:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   31c28:	4299      	cmp	r1, r3
   31c2a:	bf08      	it	eq
   31c2c:	4290      	cmpeq	r0, r2
   31c2e:	d1ca      	bne.n	31bc6 <ble_store_config_find_sec+0x1a>
        if (key_sec->idx > skipped) {
   31c30:	7e6b      	ldrb	r3, [r5, #25]
   31c32:	454b      	cmp	r3, r9
   31c34:	dcc5      	bgt.n	31bc2 <ble_store_config_find_sec+0x16>

        return i;
    }

    return -1;
}
   31c36:	4620      	mov	r0, r4
   31c38:	b003      	add	sp, #12
   31c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
   31c3e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   31c42:	e7f8      	b.n	31c36 <ble_store_config_find_sec+0x8a>

00031c44 <ble_store_config_read_peer_sec>:
}

static int
ble_store_config_read_peer_sec(const struct ble_store_key_sec *key_sec,
                               struct ble_store_value_sec *value_sec)
{
   31c44:	b510      	push	{r4, lr}
   31c46:	460c      	mov	r4, r1
    int idx;

    idx = ble_store_config_find_sec(key_sec, ble_store_config_peer_secs,
   31c48:	4b0a      	ldr	r3, [pc, #40]	; (31c74 <ble_store_config_read_peer_sec+0x30>)
   31c4a:	681a      	ldr	r2, [r3, #0]
   31c4c:	490a      	ldr	r1, [pc, #40]	; (31c78 <ble_store_config_read_peer_sec+0x34>)
   31c4e:	f7ff ffad 	bl	31bac <ble_store_config_find_sec>
                             ble_store_config_num_peer_secs);
    if (idx == -1) {
   31c52:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   31c56:	d00a      	beq.n	31c6e <ble_store_config_read_peer_sec+0x2a>
        return BLE_HS_ENOENT;
    }

    *value_sec = ble_store_config_peer_secs[idx];
   31c58:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   31c5c:	2250      	movs	r2, #80	; 0x50
   31c5e:	4906      	ldr	r1, [pc, #24]	; (31c78 <ble_store_config_read_peer_sec+0x34>)
   31c60:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   31c64:	4620      	mov	r0, r4
   31c66:	f7e8 fff3 	bl	1ac50 <memcpy>
    return 0;
   31c6a:	2000      	movs	r0, #0
}
   31c6c:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   31c6e:	2005      	movs	r0, #5
   31c70:	e7fc      	b.n	31c6c <ble_store_config_read_peer_sec+0x28>
   31c72:	bf00      	nop
   31c74:	10005838 	.word	0x10005838
   31c78:	10005930 	.word	0x10005930

00031c7c <ble_store_config_read_our_sec>:
{
   31c7c:	b510      	push	{r4, lr}
   31c7e:	460c      	mov	r4, r1
    idx = ble_store_config_find_sec(key_sec, ble_store_config_our_secs,
   31c80:	4b0a      	ldr	r3, [pc, #40]	; (31cac <ble_store_config_read_our_sec+0x30>)
   31c82:	681a      	ldr	r2, [r3, #0]
   31c84:	490a      	ldr	r1, [pc, #40]	; (31cb0 <ble_store_config_read_our_sec+0x34>)
   31c86:	f7ff ff91 	bl	31bac <ble_store_config_find_sec>
    if (idx == -1) {
   31c8a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   31c8e:	d00a      	beq.n	31ca6 <ble_store_config_read_our_sec+0x2a>
    *value_sec = ble_store_config_our_secs[idx];
   31c90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   31c94:	2250      	movs	r2, #80	; 0x50
   31c96:	4906      	ldr	r1, [pc, #24]	; (31cb0 <ble_store_config_read_our_sec+0x34>)
   31c98:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   31c9c:	4620      	mov	r0, r4
   31c9e:	f7e8 ffd7 	bl	1ac50 <memcpy>
    return 0;
   31ca2:	2000      	movs	r0, #0
}
   31ca4:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   31ca6:	2005      	movs	r0, #5
   31ca8:	e7fc      	b.n	31ca4 <ble_store_config_read_our_sec+0x28>
   31caa:	bf00      	nop
   31cac:	10005834 	.word	0x10005834
   31cb0:	10005840 	.word	0x10005840

00031cb4 <ble_store_config_find_cccd>:
 * $cccd                                                                     *
 *****************************************************************************/

static int
ble_store_config_find_cccd(const struct ble_store_key_cccd *key)
{
   31cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   31cb8:	b082      	sub	sp, #8
   31cba:	4605      	mov	r5, r0
    struct ble_store_value_cccd *cccd;
    int skipped;
    int i;

    skipped = 0;
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   31cbc:	2400      	movs	r4, #0
    skipped = 0;
   31cbe:	46a0      	mov	r8, r4
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   31cc0:	e004      	b.n	31ccc <ble_store_config_find_cccd+0x18>
        return type_diff;
   31cc2:	4630      	mov	r0, r6
   31cc4:	e019      	b.n	31cfa <ble_store_config_find_cccd+0x46>
                continue;
            }
        }

        if (key->idx > skipped) {
            skipped++;
   31cc6:	f108 0801 	add.w	r8, r8, #1
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   31cca:	3401      	adds	r4, #1
   31ccc:	4b18      	ldr	r3, [pc, #96]	; (31d30 <ble_store_config_find_cccd+0x7c>)
   31cce:	681b      	ldr	r3, [r3, #0]
   31cd0:	42a3      	cmp	r3, r4
   31cd2:	dd2a      	ble.n	31d2a <ble_store_config_find_cccd+0x76>
        cccd = ble_store_config_cccds + i;
   31cd4:	ea4f 1a04 	mov.w	sl, r4, lsl #4
   31cd8:	f8df 9058 	ldr.w	r9, [pc, #88]	; 31d34 <ble_store_config_find_cccd+0x80>
   31cdc:	eb09 1704 	add.w	r7, r9, r4, lsl #4
        if (ble_addr_cmp(&key->peer_addr, BLE_ADDR_ANY)) {
   31ce0:	2300      	movs	r3, #0
   31ce2:	9300      	str	r3, [sp, #0]
   31ce4:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   31ce8:	782e      	ldrb	r6, [r5, #0]
    if (type_diff != 0) {
   31cea:	2e00      	cmp	r6, #0
   31cec:	d1e9      	bne.n	31cc2 <ble_store_config_find_cccd+0xe>
    return memcmp(a->val, b->val, sizeof(a->val));
   31cee:	2206      	movs	r2, #6
   31cf0:	f10d 0101 	add.w	r1, sp, #1
   31cf4:	1c68      	adds	r0, r5, #1
   31cf6:	f7e8 ff87 	bl	1ac08 <memcmp>
   31cfa:	b150      	cbz	r0, 31d12 <ble_store_config_find_cccd+0x5e>
    type_diff = a->type - b->type;
   31cfc:	f819 000a 	ldrb.w	r0, [r9, sl]
    if (type_diff != 0) {
   31d00:	1b80      	subs	r0, r0, r6
   31d02:	d104      	bne.n	31d0e <ble_store_config_find_cccd+0x5a>
    return memcmp(a->val, b->val, sizeof(a->val));
   31d04:	2206      	movs	r2, #6
   31d06:	1c69      	adds	r1, r5, #1
   31d08:	1c78      	adds	r0, r7, #1
   31d0a:	f7e8 ff7d 	bl	1ac08 <memcmp>
            if (ble_addr_cmp(&cccd->peer_addr, &key->peer_addr)) {
   31d0e:	2800      	cmp	r0, #0
   31d10:	d1db      	bne.n	31cca <ble_store_config_find_cccd+0x16>
        if (key->chr_val_handle != 0) {
   31d12:	892b      	ldrh	r3, [r5, #8]
   31d14:	b113      	cbz	r3, 31d1c <ble_store_config_find_cccd+0x68>
            if (cccd->chr_val_handle != key->chr_val_handle) {
   31d16:	893a      	ldrh	r2, [r7, #8]
   31d18:	4293      	cmp	r3, r2
   31d1a:	d1d6      	bne.n	31cca <ble_store_config_find_cccd+0x16>
        if (key->idx > skipped) {
   31d1c:	7aab      	ldrb	r3, [r5, #10]
   31d1e:	4543      	cmp	r3, r8
   31d20:	dcd1      	bgt.n	31cc6 <ble_store_config_find_cccd+0x12>

        return i;
    }

    return -1;
}
   31d22:	4620      	mov	r0, r4
   31d24:	b002      	add	sp, #8
   31d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return -1;
   31d2a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   31d2e:	e7f8      	b.n	31d22 <ble_store_config_find_cccd+0x6e>
   31d30:	10005830 	.word	0x10005830
   31d34:	100057b0 	.word	0x100057b0

00031d38 <ble_store_config_read_cccd>:
}

static int
ble_store_config_read_cccd(const struct ble_store_key_cccd *key_cccd,
                           struct ble_store_value_cccd *value_cccd)
{
   31d38:	b510      	push	{r4, lr}
   31d3a:	460c      	mov	r4, r1
    int idx;

    idx = ble_store_config_find_cccd(key_cccd);
   31d3c:	f7ff ffba 	bl	31cb4 <ble_store_config_find_cccd>
    if (idx == -1) {
   31d40:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   31d44:	d007      	beq.n	31d56 <ble_store_config_read_cccd+0x1e>
        return BLE_HS_ENOENT;
    }

    *value_cccd = ble_store_config_cccds[idx];
   31d46:	4b05      	ldr	r3, [pc, #20]	; (31d5c <ble_store_config_read_cccd+0x24>)
   31d48:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   31d4c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   31d4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return 0;
   31d52:	2000      	movs	r0, #0
}
   31d54:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   31d56:	2005      	movs	r0, #5
   31d58:	e7fc      	b.n	31d54 <ble_store_config_read_cccd+0x1c>
   31d5a:	bf00      	nop
   31d5c:	100057b0 	.word	0x100057b0

00031d60 <ble_store_config_print_key_sec>:
{
   31d60:	b510      	push	{r4, lr}
   31d62:	b082      	sub	sp, #8
   31d64:	4604      	mov	r4, r0
    if (ble_addr_cmp(&key_sec->peer_addr, BLE_ADDR_ANY)) {
   31d66:	2300      	movs	r3, #0
   31d68:	9300      	str	r3, [sp, #0]
   31d6a:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   31d6e:	7800      	ldrb	r0, [r0, #0]
    if (type_diff != 0) {
   31d70:	b928      	cbnz	r0, 31d7e <ble_store_config_print_key_sec+0x1e>
    return memcmp(a->val, b->val, sizeof(a->val));
   31d72:	2206      	movs	r2, #6
   31d74:	f10d 0101 	add.w	r1, sp, #1
   31d78:	1c60      	adds	r0, r4, #1
   31d7a:	f7e8 ff45 	bl	1ac08 <memcmp>
   31d7e:	b908      	cbnz	r0, 31d84 <ble_store_config_print_key_sec+0x24>
}
   31d80:	b002      	add	sp, #8
   31d82:	bd10      	pop	{r4, pc}
        ble_hs_log_flat_buf(key_sec->peer_addr.val, 6);
   31d84:	2106      	movs	r1, #6
   31d86:	1c60      	adds	r0, r4, #1
   31d88:	f7fe f8d0 	bl	2ff2c <ble_hs_log_flat_buf>
}
   31d8c:	e7f8      	b.n	31d80 <ble_store_config_print_key_sec+0x20>

00031d8e <ble_store_config_read>:
 * @return                      0 if a key was found; else BLE_HS_ENOENT.
 */
int
ble_store_config_read(int obj_type, const union ble_store_key *key,
                      union ble_store_value *value)
{
   31d8e:	b538      	push	{r3, r4, r5, lr}
   31d90:	460c      	mov	r4, r1
   31d92:	4615      	mov	r5, r2
    int rc;

    switch (obj_type) {
   31d94:	2802      	cmp	r0, #2
   31d96:	d005      	beq.n	31da4 <ble_store_config_read+0x16>
   31d98:	2803      	cmp	r0, #3
   31d9a:	d013      	beq.n	31dc4 <ble_store_config_read+0x36>
   31d9c:	2801      	cmp	r0, #1
   31d9e:	d009      	beq.n	31db4 <ble_store_config_read+0x26>
   31da0:	2008      	movs	r0, #8
        return rc;

    default:
        return BLE_HS_ENOTSUP;
    }
}
   31da2:	bd38      	pop	{r3, r4, r5, pc}
        ble_store_config_print_key_sec(&key->sec);
   31da4:	4608      	mov	r0, r1
   31da6:	f7ff ffdb 	bl	31d60 <ble_store_config_print_key_sec>
        rc = ble_store_config_read_peer_sec(&key->sec, &value->sec);
   31daa:	4629      	mov	r1, r5
   31dac:	4620      	mov	r0, r4
   31dae:	f7ff ff49 	bl	31c44 <ble_store_config_read_peer_sec>
        return rc;
   31db2:	e7f6      	b.n	31da2 <ble_store_config_read+0x14>
        ble_store_config_print_key_sec(&key->sec);
   31db4:	4608      	mov	r0, r1
   31db6:	f7ff ffd3 	bl	31d60 <ble_store_config_print_key_sec>
        rc = ble_store_config_read_our_sec(&key->sec, &value->sec);
   31dba:	4629      	mov	r1, r5
   31dbc:	4620      	mov	r0, r4
   31dbe:	f7ff ff5d 	bl	31c7c <ble_store_config_read_our_sec>
        return rc;
   31dc2:	e7ee      	b.n	31da2 <ble_store_config_read+0x14>
        rc = ble_store_config_read_cccd(&key->cccd, &value->cccd);
   31dc4:	4611      	mov	r1, r2
   31dc6:	4620      	mov	r0, r4
   31dc8:	f7ff ffb6 	bl	31d38 <ble_store_config_read_cccd>
        return rc;
   31dcc:	e7e9      	b.n	31da2 <ble_store_config_read+0x14>

00031dce <ble_store_config_print_value_sec>:
{
   31dce:	b510      	push	{r4, lr}
   31dd0:	4604      	mov	r4, r0
    if (sec->ltk_present) {
   31dd2:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   31dd6:	f013 0f01 	tst.w	r3, #1
   31dda:	d10a      	bne.n	31df2 <ble_store_config_print_value_sec+0x24>
    if (sec->irk_present) {
   31ddc:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   31de0:	f013 0f01 	tst.w	r3, #1
   31de4:	d10a      	bne.n	31dfc <ble_store_config_print_value_sec+0x2e>
    if (sec->csrk_present) {
   31de6:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   31dea:	f013 0f01 	tst.w	r3, #1
   31dee:	d10b      	bne.n	31e08 <ble_store_config_print_value_sec+0x3a>
}
   31df0:	bd10      	pop	{r4, pc}
        ble_hs_log_flat_buf(sec->ltk, 16);
   31df2:	2110      	movs	r1, #16
   31df4:	3018      	adds	r0, #24
   31df6:	f7fe f899 	bl	2ff2c <ble_hs_log_flat_buf>
   31dfa:	e7ef      	b.n	31ddc <ble_store_config_print_value_sec+0xe>
        ble_hs_log_flat_buf(sec->irk, 16);
   31dfc:	2110      	movs	r1, #16
   31dfe:	f104 0029 	add.w	r0, r4, #41	; 0x29
   31e02:	f7fe f893 	bl	2ff2c <ble_hs_log_flat_buf>
   31e06:	e7ee      	b.n	31de6 <ble_store_config_print_value_sec+0x18>
        ble_hs_log_flat_buf(sec->csrk, 16);
   31e08:	2110      	movs	r1, #16
   31e0a:	f104 003a 	add.w	r0, r4, #58	; 0x3a
   31e0e:	f7fe f88d 	bl	2ff2c <ble_hs_log_flat_buf>
}
   31e12:	e7ed      	b.n	31df0 <ble_store_config_print_value_sec+0x22>

00031e14 <ble_store_config_write_peer_sec>:
{
   31e14:	b530      	push	{r4, r5, lr}
   31e16:	b089      	sub	sp, #36	; 0x24
   31e18:	4604      	mov	r4, r0
    ble_store_config_print_value_sec(value_sec);
   31e1a:	f7ff ffd8 	bl	31dce <ble_store_config_print_value_sec>
    ble_store_key_from_value_sec(&key_sec, value_sec);
   31e1e:	4621      	mov	r1, r4
   31e20:	4668      	mov	r0, sp
   31e22:	f7ff f9e0 	bl	311e6 <ble_store_key_from_value_sec>
    idx = ble_store_config_find_sec(&key_sec, ble_store_config_peer_secs,
   31e26:	4b0f      	ldr	r3, [pc, #60]	; (31e64 <ble_store_config_write_peer_sec+0x50>)
   31e28:	681d      	ldr	r5, [r3, #0]
   31e2a:	462a      	mov	r2, r5
   31e2c:	490e      	ldr	r1, [pc, #56]	; (31e68 <ble_store_config_write_peer_sec+0x54>)
   31e2e:	4668      	mov	r0, sp
   31e30:	f7ff febc 	bl	31bac <ble_store_config_find_sec>
    if (idx == -1) {
   31e34:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   31e38:	d00b      	beq.n	31e52 <ble_store_config_write_peer_sec+0x3e>
    ble_store_config_peer_secs[idx] = *value_sec;
   31e3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   31e3e:	2250      	movs	r2, #80	; 0x50
   31e40:	4621      	mov	r1, r4
   31e42:	4b09      	ldr	r3, [pc, #36]	; (31e68 <ble_store_config_write_peer_sec+0x54>)
   31e44:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   31e48:	f7e8 ff02 	bl	1ac50 <memcpy>
    return 0;
   31e4c:	2000      	movs	r0, #0
}
   31e4e:	b009      	add	sp, #36	; 0x24
   31e50:	bd30      	pop	{r4, r5, pc}
        if (ble_store_config_num_peer_secs >= MYNEWT_VAL(BLE_STORE_MAX_BONDS)) {
   31e52:	2d02      	cmp	r5, #2
   31e54:	dc04      	bgt.n	31e60 <ble_store_config_write_peer_sec+0x4c>
        ble_store_config_num_peer_secs++;
   31e56:	1c6a      	adds	r2, r5, #1
   31e58:	4b02      	ldr	r3, [pc, #8]	; (31e64 <ble_store_config_write_peer_sec+0x50>)
   31e5a:	601a      	str	r2, [r3, #0]
        idx = ble_store_config_num_peer_secs;
   31e5c:	4628      	mov	r0, r5
   31e5e:	e7ec      	b.n	31e3a <ble_store_config_write_peer_sec+0x26>
            return BLE_HS_ESTORE_CAP;
   31e60:	201b      	movs	r0, #27
   31e62:	e7f4      	b.n	31e4e <ble_store_config_write_peer_sec+0x3a>
   31e64:	10005838 	.word	0x10005838
   31e68:	10005930 	.word	0x10005930

00031e6c <ble_store_config_write_our_sec>:
{
   31e6c:	b530      	push	{r4, r5, lr}
   31e6e:	b089      	sub	sp, #36	; 0x24
   31e70:	4604      	mov	r4, r0
    ble_store_config_print_value_sec(value_sec);
   31e72:	f7ff ffac 	bl	31dce <ble_store_config_print_value_sec>
    ble_store_key_from_value_sec(&key_sec, value_sec);
   31e76:	4621      	mov	r1, r4
   31e78:	4668      	mov	r0, sp
   31e7a:	f7ff f9b4 	bl	311e6 <ble_store_key_from_value_sec>
    idx = ble_store_config_find_sec(&key_sec, ble_store_config_our_secs,
   31e7e:	4b0f      	ldr	r3, [pc, #60]	; (31ebc <ble_store_config_write_our_sec+0x50>)
   31e80:	681d      	ldr	r5, [r3, #0]
   31e82:	462a      	mov	r2, r5
   31e84:	490e      	ldr	r1, [pc, #56]	; (31ec0 <ble_store_config_write_our_sec+0x54>)
   31e86:	4668      	mov	r0, sp
   31e88:	f7ff fe90 	bl	31bac <ble_store_config_find_sec>
    if (idx == -1) {
   31e8c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   31e90:	d00b      	beq.n	31eaa <ble_store_config_write_our_sec+0x3e>
    ble_store_config_our_secs[idx] = *value_sec;
   31e92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   31e96:	2250      	movs	r2, #80	; 0x50
   31e98:	4621      	mov	r1, r4
   31e9a:	4b09      	ldr	r3, [pc, #36]	; (31ec0 <ble_store_config_write_our_sec+0x54>)
   31e9c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   31ea0:	f7e8 fed6 	bl	1ac50 <memcpy>
    return 0;
   31ea4:	2000      	movs	r0, #0
}
   31ea6:	b009      	add	sp, #36	; 0x24
   31ea8:	bd30      	pop	{r4, r5, pc}
        if (ble_store_config_num_our_secs >= MYNEWT_VAL(BLE_STORE_MAX_BONDS)) {
   31eaa:	2d02      	cmp	r5, #2
   31eac:	dc04      	bgt.n	31eb8 <ble_store_config_write_our_sec+0x4c>
        ble_store_config_num_our_secs++;
   31eae:	1c6a      	adds	r2, r5, #1
   31eb0:	4b02      	ldr	r3, [pc, #8]	; (31ebc <ble_store_config_write_our_sec+0x50>)
   31eb2:	601a      	str	r2, [r3, #0]
        idx = ble_store_config_num_our_secs;
   31eb4:	4628      	mov	r0, r5
   31eb6:	e7ec      	b.n	31e92 <ble_store_config_write_our_sec+0x26>
            return BLE_HS_ESTORE_CAP;
   31eb8:	201b      	movs	r0, #27
   31eba:	e7f4      	b.n	31ea6 <ble_store_config_write_our_sec+0x3a>
   31ebc:	10005834 	.word	0x10005834
   31ec0:	10005840 	.word	0x10005840

00031ec4 <ble_store_config_write_cccd>:
{
   31ec4:	b530      	push	{r4, r5, lr}
   31ec6:	b085      	sub	sp, #20
   31ec8:	4604      	mov	r4, r0
    ble_store_key_from_value_cccd(&key_cccd, value_cccd);
   31eca:	4601      	mov	r1, r0
   31ecc:	a801      	add	r0, sp, #4
   31ece:	f7ff f97e 	bl	311ce <ble_store_key_from_value_cccd>
    idx = ble_store_config_find_cccd(&key_cccd);
   31ed2:	a801      	add	r0, sp, #4
   31ed4:	f7ff feee 	bl	31cb4 <ble_store_config_find_cccd>
    if (idx == -1) {
   31ed8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   31edc:	d009      	beq.n	31ef2 <ble_store_config_write_cccd+0x2e>
    ble_store_config_cccds[idx] = *value_cccd;
   31ede:	4d0a      	ldr	r5, [pc, #40]	; (31f08 <ble_store_config_write_cccd+0x44>)
   31ee0:	eb05 1500 	add.w	r5, r5, r0, lsl #4
   31ee4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   31ee8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    return 0;
   31eec:	2000      	movs	r0, #0
}
   31eee:	b005      	add	sp, #20
   31ef0:	bd30      	pop	{r4, r5, pc}
        if (ble_store_config_num_cccds >= MYNEWT_VAL(BLE_STORE_MAX_CCCDS)) {
   31ef2:	4b06      	ldr	r3, [pc, #24]	; (31f0c <ble_store_config_write_cccd+0x48>)
   31ef4:	6818      	ldr	r0, [r3, #0]
   31ef6:	2807      	cmp	r0, #7
   31ef8:	dc03      	bgt.n	31f02 <ble_store_config_write_cccd+0x3e>
        ble_store_config_num_cccds++;
   31efa:	1c43      	adds	r3, r0, #1
   31efc:	4a03      	ldr	r2, [pc, #12]	; (31f0c <ble_store_config_write_cccd+0x48>)
   31efe:	6013      	str	r3, [r2, #0]
   31f00:	e7ed      	b.n	31ede <ble_store_config_write_cccd+0x1a>
            return BLE_HS_ESTORE_CAP;
   31f02:	201b      	movs	r0, #27
   31f04:	e7f3      	b.n	31eee <ble_store_config_write_cccd+0x2a>
   31f06:	bf00      	nop
   31f08:	100057b0 	.word	0x100057b0
   31f0c:	10005830 	.word	0x10005830

00031f10 <ble_store_config_write>:
 * @return                      0 on success;
 *                              BLE_HS_ESTORE_CAP if the database is full.
 */
int
ble_store_config_write(int obj_type, const union ble_store_value *val)
{
   31f10:	b508      	push	{r3, lr}
   31f12:	4603      	mov	r3, r0
   31f14:	4608      	mov	r0, r1
    int rc;

    switch (obj_type) {
   31f16:	2b02      	cmp	r3, #2
   31f18:	d005      	beq.n	31f26 <ble_store_config_write+0x16>
   31f1a:	2b03      	cmp	r3, #3
   31f1c:	d009      	beq.n	31f32 <ble_store_config_write+0x22>
   31f1e:	2b01      	cmp	r3, #1
   31f20:	d004      	beq.n	31f2c <ble_store_config_write+0x1c>
   31f22:	2008      	movs	r0, #8
        return rc;

    default:
        return BLE_HS_ENOTSUP;
    }
}
   31f24:	bd08      	pop	{r3, pc}
        rc = ble_store_config_write_peer_sec(&val->sec);
   31f26:	f7ff ff75 	bl	31e14 <ble_store_config_write_peer_sec>
        return rc;
   31f2a:	e7fb      	b.n	31f24 <ble_store_config_write+0x14>
        rc = ble_store_config_write_our_sec(&val->sec);
   31f2c:	f7ff ff9e 	bl	31e6c <ble_store_config_write_our_sec>
        return rc;
   31f30:	e7f8      	b.n	31f24 <ble_store_config_write+0x14>
        rc = ble_store_config_write_cccd(&val->cccd);
   31f32:	f7ff ffc7 	bl	31ec4 <ble_store_config_write_cccd>
        return rc;
   31f36:	e7f5      	b.n	31f24 <ble_store_config_write+0x14>

00031f38 <ble_store_config_delete_obj>:
{
   31f38:	b510      	push	{r4, lr}
    (*num_values)--;
   31f3a:	681c      	ldr	r4, [r3, #0]
   31f3c:	3c01      	subs	r4, #1
   31f3e:	601c      	str	r4, [r3, #0]
    if (idx < *num_values) {
   31f40:	4294      	cmp	r4, r2
   31f42:	dc01      	bgt.n	31f48 <ble_store_config_delete_obj+0x10>
}
   31f44:	2000      	movs	r0, #0
   31f46:	bd10      	pop	{r4, pc}
        dst += idx * value_size;
   31f48:	fb01 0002 	mla	r0, r1, r2, r0
        move_count = *num_values - idx;
   31f4c:	1aa2      	subs	r2, r4, r2
        memmove(dst, src, move_count * value_size);
   31f4e:	fb02 f201 	mul.w	r2, r2, r1
   31f52:	4401      	add	r1, r0
   31f54:	f7e8 fe89 	bl	1ac6a <memmove>
   31f58:	e7f4      	b.n	31f44 <ble_store_config_delete_obj+0xc>

00031f5a <ble_store_config_delete_sec>:
{
   31f5a:	b538      	push	{r3, r4, r5, lr}
   31f5c:	460d      	mov	r5, r1
   31f5e:	4614      	mov	r4, r2
    idx = ble_store_config_find_sec(key_sec, value_secs, *num_value_secs);
   31f60:	6812      	ldr	r2, [r2, #0]
   31f62:	f7ff fe23 	bl	31bac <ble_store_config_find_sec>
    if (idx == -1) {
   31f66:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   31f6a:	d006      	beq.n	31f7a <ble_store_config_delete_sec+0x20>
   31f6c:	4602      	mov	r2, r0
    rc = ble_store_config_delete_obj(value_secs, sizeof *value_secs, idx,
   31f6e:	4623      	mov	r3, r4
   31f70:	2150      	movs	r1, #80	; 0x50
   31f72:	4628      	mov	r0, r5
   31f74:	f7ff ffe0 	bl	31f38 <ble_store_config_delete_obj>
}
   31f78:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOENT;
   31f7a:	2005      	movs	r0, #5
   31f7c:	e7fc      	b.n	31f78 <ble_store_config_delete_sec+0x1e>
	...

00031f80 <ble_store_config_delete_peer_sec>:
{
   31f80:	b508      	push	{r3, lr}
    rc = ble_store_config_delete_sec(key_sec, ble_store_config_peer_secs,
   31f82:	4a02      	ldr	r2, [pc, #8]	; (31f8c <ble_store_config_delete_peer_sec+0xc>)
   31f84:	4902      	ldr	r1, [pc, #8]	; (31f90 <ble_store_config_delete_peer_sec+0x10>)
   31f86:	f7ff ffe8 	bl	31f5a <ble_store_config_delete_sec>
}
   31f8a:	bd08      	pop	{r3, pc}
   31f8c:	10005838 	.word	0x10005838
   31f90:	10005930 	.word	0x10005930

00031f94 <ble_store_config_delete_our_sec>:
{
   31f94:	b508      	push	{r3, lr}
    rc = ble_store_config_delete_sec(key_sec, ble_store_config_our_secs,
   31f96:	4a02      	ldr	r2, [pc, #8]	; (31fa0 <ble_store_config_delete_our_sec+0xc>)
   31f98:	4902      	ldr	r1, [pc, #8]	; (31fa4 <ble_store_config_delete_our_sec+0x10>)
   31f9a:	f7ff ffde 	bl	31f5a <ble_store_config_delete_sec>
}
   31f9e:	bd08      	pop	{r3, pc}
   31fa0:	10005834 	.word	0x10005834
   31fa4:	10005840 	.word	0x10005840

00031fa8 <ble_store_config_delete_cccd>:
{
   31fa8:	b508      	push	{r3, lr}
    idx = ble_store_config_find_cccd(key_cccd);
   31faa:	f7ff fe83 	bl	31cb4 <ble_store_config_find_cccd>
    if (idx == -1) {
   31fae:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   31fb2:	d006      	beq.n	31fc2 <ble_store_config_delete_cccd+0x1a>
   31fb4:	4602      	mov	r2, r0
    rc = ble_store_config_delete_obj(ble_store_config_cccds,
   31fb6:	4b04      	ldr	r3, [pc, #16]	; (31fc8 <ble_store_config_delete_cccd+0x20>)
   31fb8:	2110      	movs	r1, #16
   31fba:	4804      	ldr	r0, [pc, #16]	; (31fcc <ble_store_config_delete_cccd+0x24>)
   31fbc:	f7ff ffbc 	bl	31f38 <ble_store_config_delete_obj>
}
   31fc0:	bd08      	pop	{r3, pc}
        return BLE_HS_ENOENT;
   31fc2:	2005      	movs	r0, #5
   31fc4:	e7fc      	b.n	31fc0 <ble_store_config_delete_cccd+0x18>
   31fc6:	bf00      	nop
   31fc8:	10005830 	.word	0x10005830
   31fcc:	100057b0 	.word	0x100057b0

00031fd0 <ble_store_config_delete>:

int
ble_store_config_delete(int obj_type, const union ble_store_key *key)
{
   31fd0:	b508      	push	{r3, lr}
   31fd2:	4603      	mov	r3, r0
   31fd4:	4608      	mov	r0, r1
    int rc;

    switch (obj_type) {
   31fd6:	2b02      	cmp	r3, #2
   31fd8:	d005      	beq.n	31fe6 <ble_store_config_delete+0x16>
   31fda:	2b03      	cmp	r3, #3
   31fdc:	d009      	beq.n	31ff2 <ble_store_config_delete+0x22>
   31fde:	2b01      	cmp	r3, #1
   31fe0:	d004      	beq.n	31fec <ble_store_config_delete+0x1c>
   31fe2:	2008      	movs	r0, #8
        return rc;

    default:
        return BLE_HS_ENOTSUP;
    }
}
   31fe4:	bd08      	pop	{r3, pc}
        rc = ble_store_config_delete_peer_sec(&key->sec);
   31fe6:	f7ff ffcb 	bl	31f80 <ble_store_config_delete_peer_sec>
        return rc;
   31fea:	e7fb      	b.n	31fe4 <ble_store_config_delete+0x14>
        rc = ble_store_config_delete_our_sec(&key->sec);
   31fec:	f7ff ffd2 	bl	31f94 <ble_store_config_delete_our_sec>
        return rc;
   31ff0:	e7f8      	b.n	31fe4 <ble_store_config_delete+0x14>
        rc = ble_store_config_delete_cccd(&key->cccd);
   31ff2:	f7ff ffd9 	bl	31fa8 <ble_store_config_delete_cccd>
        return rc;
   31ff6:	e7f5      	b.n	31fe4 <ble_store_config_delete+0x14>

00031ff8 <ble_store_config_init>:

void
ble_store_config_init(void)
{
   31ff8:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   31ffa:	4b0e      	ldr	r3, [pc, #56]	; (32034 <ble_store_config_init+0x3c>)
   31ffc:	781b      	ldrb	r3, [r3, #0]
   31ffe:	b173      	cbz	r3, 3201e <ble_store_config_init+0x26>

    ble_hs_cfg.store_read_cb = ble_store_config_read;
   32000:	4b0d      	ldr	r3, [pc, #52]	; (32038 <ble_store_config_init+0x40>)
   32002:	4a0e      	ldr	r2, [pc, #56]	; (3203c <ble_store_config_init+0x44>)
   32004:	615a      	str	r2, [r3, #20]
    ble_hs_cfg.store_write_cb = ble_store_config_write;
   32006:	4a0e      	ldr	r2, [pc, #56]	; (32040 <ble_store_config_init+0x48>)
   32008:	619a      	str	r2, [r3, #24]
    ble_hs_cfg.store_delete_cb = ble_store_config_delete;
   3200a:	4a0e      	ldr	r2, [pc, #56]	; (32044 <ble_store_config_init+0x4c>)
   3200c:	61da      	str	r2, [r3, #28]

    /* Re-initialize BSS values in case of unit tests. */
    ble_store_config_num_our_secs = 0;
   3200e:	2300      	movs	r3, #0
   32010:	4a0d      	ldr	r2, [pc, #52]	; (32048 <ble_store_config_init+0x50>)
   32012:	6013      	str	r3, [r2, #0]
    ble_store_config_num_peer_secs = 0;
   32014:	4a0d      	ldr	r2, [pc, #52]	; (3204c <ble_store_config_init+0x54>)
   32016:	6013      	str	r3, [r2, #0]
    ble_store_config_num_cccds = 0;
   32018:	4a0d      	ldr	r2, [pc, #52]	; (32050 <ble_store_config_init+0x58>)
   3201a:	6013      	str	r3, [r2, #0]

    ble_store_config_conf_init();
}
   3201c:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   3201e:	f7e2 fb69 	bl	146f4 <hal_debugger_connected>
   32022:	b100      	cbz	r0, 32026 <ble_store_config_init+0x2e>
   32024:	be01      	bkpt	0x0001
   32026:	2300      	movs	r3, #0
   32028:	461a      	mov	r2, r3
   3202a:	4619      	mov	r1, r3
   3202c:	4618      	mov	r0, r3
   3202e:	f7e6 fe7f 	bl	18d30 <__assert_func>
   32032:	bf00      	nop
   32034:	10003fd8 	.word	0x10003fd8
   32038:	100006f0 	.word	0x100006f0
   3203c:	00031d8f 	.word	0x00031d8f
   32040:	00031f11 	.word	0x00031f11
   32044:	00031fd1 	.word	0x00031fd1
   32048:	10005834 	.word	0x10005834
   3204c:	10005838 	.word	0x10005838
   32050:	10005830 	.word	0x10005830

00032054 <ble_hs_util_load_rand_addr>:
#include "host/util/util.h"
#include "../src/ble_hs_hci_priv.h"

static int
ble_hs_util_load_rand_addr(ble_addr_t *addr)
{
   32054:	b510      	push	{r4, lr}
   32056:	b084      	sub	sp, #16
   32058:	4604      	mov	r4, r0
#if MYNEWT_VAL(BLE_HCI_VS)
    struct ble_hci_vs_rd_static_addr_rp rsp;
    int rc;

    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_VENDOR,
   3205a:	2306      	movs	r3, #6
   3205c:	9300      	str	r3, [sp, #0]
   3205e:	ab02      	add	r3, sp, #8
   32060:	2200      	movs	r2, #0
   32062:	4611      	mov	r1, r2
   32064:	f64f 4001 	movw	r0, #64513	; 0xfc01
   32068:	f7fd fa66 	bl	2f538 <ble_hs_hci_cmd_tx>
                                      BLE_HCI_OCF_VS_RD_STATIC_ADDR),
                           NULL, 0, &rsp, sizeof(rsp));
    if (rc == 0) {
   3206c:	b118      	cbz	r0, 32076 <ble_hs_util_load_rand_addr+0x22>
        memcpy(addr->val, rsp.addr, sizeof(addr->val));
        return 0;
    }
#endif

    return BLE_HS_ENOADDR;
   3206e:	2315      	movs	r3, #21
}
   32070:	4618      	mov	r0, r3
   32072:	b004      	add	sp, #16
   32074:	bd10      	pop	{r4, pc}
   32076:	4603      	mov	r3, r0
        addr->type = BLE_ADDR_RANDOM;
   32078:	4622      	mov	r2, r4
   3207a:	2101      	movs	r1, #1
   3207c:	f802 1b01 	strb.w	r1, [r2], #1
        memcpy(addr->val, rsp.addr, sizeof(addr->val));
   32080:	9802      	ldr	r0, [sp, #8]
   32082:	f8c4 0001 	str.w	r0, [r4, #1]
   32086:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   3208a:	8091      	strh	r1, [r2, #4]
        return 0;
   3208c:	e7f0      	b.n	32070 <ble_hs_util_load_rand_addr+0x1c>

0003208e <ble_hs_util_ensure_rand_addr>:

static int
ble_hs_util_ensure_rand_addr(void)
{
   3208e:	b500      	push	{lr}
   32090:	b083      	sub	sp, #12
    ble_addr_t addr;
    int rc;

    /* If we already have a random address, then we are done. */
    rc = ble_hs_id_copy_addr(BLE_ADDR_RANDOM, NULL, NULL);
   32092:	2200      	movs	r2, #0
   32094:	4611      	mov	r1, r2
   32096:	2001      	movs	r0, #1
   32098:	f7fd ff04 	bl	2fea4 <ble_hs_id_copy_addr>
    if (rc == 0) {
   3209c:	4603      	mov	r3, r0
   3209e:	b918      	cbnz	r0, 320a8 <ble_hs_util_ensure_rand_addr+0x1a>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   320a0:	4618      	mov	r0, r3
   320a2:	b003      	add	sp, #12
   320a4:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = ble_hs_util_load_rand_addr(&addr);
   320a8:	4668      	mov	r0, sp
   320aa:	f7ff ffd3 	bl	32054 <ble_hs_util_load_rand_addr>
    if (rc != 0) {
   320ae:	4603      	mov	r3, r0
   320b0:	2800      	cmp	r0, #0
   320b2:	d1f5      	bne.n	320a0 <ble_hs_util_ensure_rand_addr+0x12>
    rc = ble_hs_id_set_rnd(addr.val);
   320b4:	f10d 0001 	add.w	r0, sp, #1
   320b8:	f7fd fe74 	bl	2fda4 <ble_hs_id_set_rnd>
   320bc:	4603      	mov	r3, r0
    if (rc != 0) {
   320be:	e7ef      	b.n	320a0 <ble_hs_util_ensure_rand_addr+0x12>

000320c0 <ble_hs_util_ensure_addr>:

int
ble_hs_util_ensure_addr(int prefer_random)
{
   320c0:	b508      	push	{r3, lr}
    int rc;

    if (prefer_random) {
   320c2:	b150      	cbz	r0, 320da <ble_hs_util_ensure_addr+0x1a>
        /* Try to load a random address. */
        rc = ble_hs_util_ensure_rand_addr();
   320c4:	f7ff ffe3 	bl	3208e <ble_hs_util_ensure_rand_addr>
        if (rc == BLE_HS_ENOADDR) {
   320c8:	2815      	cmp	r0, #21
   320ca:	d000      	beq.n	320ce <ble_hs_util_ensure_addr+0xe>
            rc = ble_hs_util_ensure_rand_addr();
        }
    }

    return rc;
}
   320cc:	bd08      	pop	{r3, pc}
            rc = ble_hs_id_copy_addr(BLE_ADDR_PUBLIC, NULL, NULL);
   320ce:	2200      	movs	r2, #0
   320d0:	4611      	mov	r1, r2
   320d2:	4610      	mov	r0, r2
   320d4:	f7fd fee6 	bl	2fea4 <ble_hs_id_copy_addr>
   320d8:	e7f8      	b.n	320cc <ble_hs_util_ensure_addr+0xc>
        rc = ble_hs_id_copy_addr(BLE_ADDR_PUBLIC, NULL, NULL);
   320da:	2200      	movs	r2, #0
   320dc:	4611      	mov	r1, r2
   320de:	4610      	mov	r0, r2
   320e0:	f7fd fee0 	bl	2fea4 <ble_hs_id_copy_addr>
        if (rc == BLE_HS_ENOADDR) {
   320e4:	2815      	cmp	r0, #21
   320e6:	d1f1      	bne.n	320cc <ble_hs_util_ensure_addr+0xc>
            rc = ble_hs_util_ensure_rand_addr();
   320e8:	f7ff ffd1 	bl	3208e <ble_hs_util_ensure_rand_addr>
    return rc;
   320ec:	e7ee      	b.n	320cc <ble_hs_util_ensure_addr+0xc>
	...

000320f0 <ble_hci_trans_cfg_hs>:
void
ble_hci_trans_cfg_hs(ble_hci_trans_rx_cmd_fn *cmd_cb,
                     void *cmd_arg,
                     ble_hci_trans_rx_acl_fn *acl_cb,
                     void *acl_arg)
{
   320f0:	b410      	push	{r4}
    ble_hci_ram_rx_cmd_hs_cb = cmd_cb;
   320f2:	4c05      	ldr	r4, [pc, #20]	; (32108 <ble_hci_trans_cfg_hs+0x18>)
   320f4:	6020      	str	r0, [r4, #0]
    ble_hci_ram_rx_cmd_hs_arg = cmd_arg;
   320f6:	4805      	ldr	r0, [pc, #20]	; (3210c <ble_hci_trans_cfg_hs+0x1c>)
   320f8:	6001      	str	r1, [r0, #0]
    ble_hci_ram_rx_acl_hs_cb = acl_cb;
   320fa:	4905      	ldr	r1, [pc, #20]	; (32110 <ble_hci_trans_cfg_hs+0x20>)
   320fc:	600a      	str	r2, [r1, #0]
    ble_hci_ram_rx_acl_hs_arg = acl_arg;
   320fe:	4a05      	ldr	r2, [pc, #20]	; (32114 <ble_hci_trans_cfg_hs+0x24>)
   32100:	6013      	str	r3, [r2, #0]
}
   32102:	bc10      	pop	{r4}
   32104:	4770      	bx	lr
   32106:	bf00      	nop
   32108:	10005e5c 	.word	0x10005e5c
   3210c:	10005e58 	.word	0x10005e58
   32110:	10005e4c 	.word	0x10005e4c
   32114:	10005e48 	.word	0x10005e48

00032118 <ble_hci_trans_cfg_ll>:
void
ble_hci_trans_cfg_ll(ble_hci_trans_rx_cmd_fn *cmd_cb,
                     void *cmd_arg,
                     ble_hci_trans_rx_acl_fn *acl_cb,
                     void *acl_arg)
{
   32118:	b410      	push	{r4}
    ble_hci_ram_rx_cmd_ll_cb = cmd_cb;
   3211a:	4c05      	ldr	r4, [pc, #20]	; (32130 <ble_hci_trans_cfg_ll+0x18>)
   3211c:	6020      	str	r0, [r4, #0]
    ble_hci_ram_rx_cmd_ll_arg = cmd_arg;
   3211e:	4805      	ldr	r0, [pc, #20]	; (32134 <ble_hci_trans_cfg_ll+0x1c>)
   32120:	6001      	str	r1, [r0, #0]
    ble_hci_ram_rx_acl_ll_cb = acl_cb;
   32122:	4905      	ldr	r1, [pc, #20]	; (32138 <ble_hci_trans_cfg_ll+0x20>)
   32124:	600a      	str	r2, [r1, #0]
    ble_hci_ram_rx_acl_ll_arg = acl_arg;
   32126:	4a05      	ldr	r2, [pc, #20]	; (3213c <ble_hci_trans_cfg_ll+0x24>)
   32128:	6013      	str	r3, [r2, #0]
}
   3212a:	bc10      	pop	{r4}
   3212c:	4770      	bx	lr
   3212e:	bf00      	nop
   32130:	10005e64 	.word	0x10005e64
   32134:	10005e60 	.word	0x10005e60
   32138:	10005e54 	.word	0x10005e54
   3213c:	10005e50 	.word	0x10005e50

00032140 <ble_hci_trans_hs_cmd_tx>:

int
ble_hci_trans_hs_cmd_tx(uint8_t *cmd)
{
   32140:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_cmd_ll_cb != NULL);
   32142:	4b08      	ldr	r3, [pc, #32]	; (32164 <ble_hci_trans_hs_cmd_tx+0x24>)
   32144:	681b      	ldr	r3, [r3, #0]
   32146:	b11b      	cbz	r3, 32150 <ble_hci_trans_hs_cmd_tx+0x10>

    rc = ble_hci_ram_rx_cmd_ll_cb(cmd, ble_hci_ram_rx_cmd_ll_arg);
   32148:	4a07      	ldr	r2, [pc, #28]	; (32168 <ble_hci_trans_hs_cmd_tx+0x28>)
   3214a:	6811      	ldr	r1, [r2, #0]
   3214c:	4798      	blx	r3
    return rc;
}
   3214e:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_cmd_ll_cb != NULL);
   32150:	f7e2 fad0 	bl	146f4 <hal_debugger_connected>
   32154:	b100      	cbz	r0, 32158 <ble_hci_trans_hs_cmd_tx+0x18>
   32156:	be01      	bkpt	0x0001
   32158:	2300      	movs	r3, #0
   3215a:	461a      	mov	r2, r3
   3215c:	4619      	mov	r1, r3
   3215e:	4618      	mov	r0, r3
   32160:	f7e6 fde6 	bl	18d30 <__assert_func>
   32164:	10005e64 	.word	0x10005e64
   32168:	10005e60 	.word	0x10005e60

0003216c <ble_hci_trans_ll_evt_tx>:

int
ble_hci_trans_ll_evt_tx(uint8_t *hci_ev)
{
   3216c:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_cmd_hs_cb != NULL);
   3216e:	4b08      	ldr	r3, [pc, #32]	; (32190 <ble_hci_trans_ll_evt_tx+0x24>)
   32170:	681b      	ldr	r3, [r3, #0]
   32172:	b11b      	cbz	r3, 3217c <ble_hci_trans_ll_evt_tx+0x10>

    rc = ble_hci_ram_rx_cmd_hs_cb(hci_ev, ble_hci_ram_rx_cmd_hs_arg);
   32174:	4a07      	ldr	r2, [pc, #28]	; (32194 <ble_hci_trans_ll_evt_tx+0x28>)
   32176:	6811      	ldr	r1, [r2, #0]
   32178:	4798      	blx	r3
    return rc;
}
   3217a:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_cmd_hs_cb != NULL);
   3217c:	f7e2 faba 	bl	146f4 <hal_debugger_connected>
   32180:	b100      	cbz	r0, 32184 <ble_hci_trans_ll_evt_tx+0x18>
   32182:	be01      	bkpt	0x0001
   32184:	2300      	movs	r3, #0
   32186:	461a      	mov	r2, r3
   32188:	4619      	mov	r1, r3
   3218a:	4618      	mov	r0, r3
   3218c:	f7e6 fdd0 	bl	18d30 <__assert_func>
   32190:	10005e5c 	.word	0x10005e5c
   32194:	10005e58 	.word	0x10005e58

00032198 <ble_hci_trans_hs_acl_tx>:

int
ble_hci_trans_hs_acl_tx(struct os_mbuf *om)
{
   32198:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_acl_ll_cb != NULL);
   3219a:	4b08      	ldr	r3, [pc, #32]	; (321bc <ble_hci_trans_hs_acl_tx+0x24>)
   3219c:	681b      	ldr	r3, [r3, #0]
   3219e:	b11b      	cbz	r3, 321a8 <ble_hci_trans_hs_acl_tx+0x10>

    rc = ble_hci_ram_rx_acl_ll_cb(om, ble_hci_ram_rx_acl_ll_arg);
   321a0:	4a07      	ldr	r2, [pc, #28]	; (321c0 <ble_hci_trans_hs_acl_tx+0x28>)
   321a2:	6811      	ldr	r1, [r2, #0]
   321a4:	4798      	blx	r3
    return rc;
}
   321a6:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_acl_ll_cb != NULL);
   321a8:	f7e2 faa4 	bl	146f4 <hal_debugger_connected>
   321ac:	b100      	cbz	r0, 321b0 <ble_hci_trans_hs_acl_tx+0x18>
   321ae:	be01      	bkpt	0x0001
   321b0:	2300      	movs	r3, #0
   321b2:	461a      	mov	r2, r3
   321b4:	4619      	mov	r1, r3
   321b6:	4618      	mov	r0, r3
   321b8:	f7e6 fdba 	bl	18d30 <__assert_func>
   321bc:	10005e54 	.word	0x10005e54
   321c0:	10005e50 	.word	0x10005e50

000321c4 <ble_hci_trans_ll_acl_tx>:

int
ble_hci_trans_ll_acl_tx(struct os_mbuf *om)
{
   321c4:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_acl_hs_cb != NULL);
   321c6:	4b08      	ldr	r3, [pc, #32]	; (321e8 <ble_hci_trans_ll_acl_tx+0x24>)
   321c8:	681b      	ldr	r3, [r3, #0]
   321ca:	b11b      	cbz	r3, 321d4 <ble_hci_trans_ll_acl_tx+0x10>

    rc = ble_hci_ram_rx_acl_hs_cb(om, ble_hci_ram_rx_acl_hs_arg);
   321cc:	4a07      	ldr	r2, [pc, #28]	; (321ec <ble_hci_trans_ll_acl_tx+0x28>)
   321ce:	6811      	ldr	r1, [r2, #0]
   321d0:	4798      	blx	r3
    return rc;
}
   321d2:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_acl_hs_cb != NULL);
   321d4:	f7e2 fa8e 	bl	146f4 <hal_debugger_connected>
   321d8:	b100      	cbz	r0, 321dc <ble_hci_trans_ll_acl_tx+0x18>
   321da:	be01      	bkpt	0x0001
   321dc:	2300      	movs	r3, #0
   321de:	461a      	mov	r2, r3
   321e0:	4619      	mov	r1, r3
   321e2:	4618      	mov	r0, r3
   321e4:	f7e6 fda4 	bl	18d30 <__assert_func>
   321e8:	10005e4c 	.word	0x10005e4c
   321ec:	10005e48 	.word	0x10005e48

000321f0 <ble_hci_trans_buf_alloc>:

uint8_t *
ble_hci_trans_buf_alloc(int type)
{
   321f0:	b508      	push	{r3, lr}
    uint8_t *buf;

    switch (type) {
   321f2:	2802      	cmp	r0, #2
   321f4:	d011      	beq.n	3221a <ble_hci_trans_buf_alloc+0x2a>
   321f6:	2803      	cmp	r0, #3
   321f8:	d00b      	beq.n	32212 <ble_hci_trans_buf_alloc+0x22>
   321fa:	2801      	cmp	r0, #1
   321fc:	d016      	beq.n	3222c <ble_hci_trans_buf_alloc+0x3c>
    case BLE_HCI_TRANS_BUF_EVT_LO:
        buf = os_memblock_get(&ble_hci_ram_evt_lo_pool);
        break;

    default:
        assert(0);
   321fe:	f7e2 fa79 	bl	146f4 <hal_debugger_connected>
   32202:	b100      	cbz	r0, 32206 <ble_hci_trans_buf_alloc+0x16>
   32204:	be01      	bkpt	0x0001
   32206:	2300      	movs	r3, #0
   32208:	461a      	mov	r2, r3
   3220a:	4619      	mov	r1, r3
   3220c:	4618      	mov	r0, r3
   3220e:	f7e6 fd8f 	bl	18d30 <__assert_func>
        buf = os_memblock_get(&ble_hci_ram_cmd_pool);
   32212:	4808      	ldr	r0, [pc, #32]	; (32234 <ble_hci_trans_buf_alloc+0x44>)
   32214:	f7e7 fe1a 	bl	19e4c <os_memblock_get>
        buf = NULL;
    }

    return buf;
}
   32218:	bd08      	pop	{r3, pc}
        buf = os_memblock_get(&ble_hci_ram_evt_hi_pool);
   3221a:	4807      	ldr	r0, [pc, #28]	; (32238 <ble_hci_trans_buf_alloc+0x48>)
   3221c:	f7e7 fe16 	bl	19e4c <os_memblock_get>
        if (buf == NULL) {
   32220:	2800      	cmp	r0, #0
   32222:	d1f9      	bne.n	32218 <ble_hci_trans_buf_alloc+0x28>
            buf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_LO);
   32224:	2001      	movs	r0, #1
   32226:	f7ff ffe3 	bl	321f0 <ble_hci_trans_buf_alloc>
   3222a:	e7f5      	b.n	32218 <ble_hci_trans_buf_alloc+0x28>
        buf = os_memblock_get(&ble_hci_ram_evt_lo_pool);
   3222c:	4803      	ldr	r0, [pc, #12]	; (3223c <ble_hci_trans_buf_alloc+0x4c>)
   3222e:	f7e7 fe0d 	bl	19e4c <os_memblock_get>
        break;
   32232:	e7f1      	b.n	32218 <ble_hci_trans_buf_alloc+0x28>
   32234:	10005b24 	.word	0x10005b24
   32238:	10005bd0 	.word	0x10005bd0
   3223c:	10005e2c 	.word	0x10005e2c

00032240 <ble_hci_trans_buf_free>:

void
ble_hci_trans_buf_free(uint8_t *buf)
{
   32240:	b510      	push	{r4, lr}
   32242:	4604      	mov	r4, r0
    * response to the command. This was done to insure that the controller
    * could always send back one of these events when a command was received.
    * Thus, we check to see which pool the buffer came from so we can free
    * it to the appropriate pool
    */
    if (os_memblock_from(&ble_hci_ram_evt_hi_pool, buf)) {
   32244:	4601      	mov	r1, r0
   32246:	4824      	ldr	r0, [pc, #144]	; (322d8 <ble_hci_trans_buf_free+0x98>)
   32248:	f7e7 fde1 	bl	19e0e <os_memblock_from>
   3224c:	b178      	cbz	r0, 3226e <ble_hci_trans_buf_free+0x2e>
        rc = os_memblock_put(&ble_hci_ram_evt_hi_pool, buf);
   3224e:	4621      	mov	r1, r4
   32250:	4821      	ldr	r0, [pc, #132]	; (322d8 <ble_hci_trans_buf_free+0x98>)
   32252:	f7e7 fe23 	bl	19e9c <os_memblock_put>
        assert(rc == 0);
   32256:	b900      	cbnz	r0, 3225a <ble_hci_trans_buf_free+0x1a>
    } else {
        assert(os_memblock_from(&ble_hci_ram_cmd_pool, buf));
        rc = os_memblock_put(&ble_hci_ram_cmd_pool, buf);
        assert(rc == 0);
    }
}
   32258:	bd10      	pop	{r4, pc}
        assert(rc == 0);
   3225a:	f7e2 fa4b 	bl	146f4 <hal_debugger_connected>
   3225e:	b100      	cbz	r0, 32262 <ble_hci_trans_buf_free+0x22>
   32260:	be01      	bkpt	0x0001
   32262:	2300      	movs	r3, #0
   32264:	461a      	mov	r2, r3
   32266:	4619      	mov	r1, r3
   32268:	4618      	mov	r0, r3
   3226a:	f7e6 fd61 	bl	18d30 <__assert_func>
    } else if (os_memblock_from(&ble_hci_ram_evt_lo_pool, buf)) {
   3226e:	4621      	mov	r1, r4
   32270:	481a      	ldr	r0, [pc, #104]	; (322dc <ble_hci_trans_buf_free+0x9c>)
   32272:	f7e7 fdcc 	bl	19e0e <os_memblock_from>
   32276:	b178      	cbz	r0, 32298 <ble_hci_trans_buf_free+0x58>
        rc = os_memblock_put(&ble_hci_ram_evt_lo_pool, buf);
   32278:	4621      	mov	r1, r4
   3227a:	4818      	ldr	r0, [pc, #96]	; (322dc <ble_hci_trans_buf_free+0x9c>)
   3227c:	f7e7 fe0e 	bl	19e9c <os_memblock_put>
        assert(rc == 0);
   32280:	2800      	cmp	r0, #0
   32282:	d0e9      	beq.n	32258 <ble_hci_trans_buf_free+0x18>
   32284:	f7e2 fa36 	bl	146f4 <hal_debugger_connected>
   32288:	b100      	cbz	r0, 3228c <ble_hci_trans_buf_free+0x4c>
   3228a:	be01      	bkpt	0x0001
   3228c:	2300      	movs	r3, #0
   3228e:	461a      	mov	r2, r3
   32290:	4619      	mov	r1, r3
   32292:	4618      	mov	r0, r3
   32294:	f7e6 fd4c 	bl	18d30 <__assert_func>
        assert(os_memblock_from(&ble_hci_ram_cmd_pool, buf));
   32298:	4621      	mov	r1, r4
   3229a:	4811      	ldr	r0, [pc, #68]	; (322e0 <ble_hci_trans_buf_free+0xa0>)
   3229c:	f7e7 fdb7 	bl	19e0e <os_memblock_from>
   322a0:	b178      	cbz	r0, 322c2 <ble_hci_trans_buf_free+0x82>
        rc = os_memblock_put(&ble_hci_ram_cmd_pool, buf);
   322a2:	4621      	mov	r1, r4
   322a4:	480e      	ldr	r0, [pc, #56]	; (322e0 <ble_hci_trans_buf_free+0xa0>)
   322a6:	f7e7 fdf9 	bl	19e9c <os_memblock_put>
        assert(rc == 0);
   322aa:	2800      	cmp	r0, #0
   322ac:	d0d4      	beq.n	32258 <ble_hci_trans_buf_free+0x18>
   322ae:	f7e2 fa21 	bl	146f4 <hal_debugger_connected>
   322b2:	b100      	cbz	r0, 322b6 <ble_hci_trans_buf_free+0x76>
   322b4:	be01      	bkpt	0x0001
   322b6:	2300      	movs	r3, #0
   322b8:	461a      	mov	r2, r3
   322ba:	4619      	mov	r1, r3
   322bc:	4618      	mov	r0, r3
   322be:	f7e6 fd37 	bl	18d30 <__assert_func>
        assert(os_memblock_from(&ble_hci_ram_cmd_pool, buf));
   322c2:	f7e2 fa17 	bl	146f4 <hal_debugger_connected>
   322c6:	b100      	cbz	r0, 322ca <ble_hci_trans_buf_free+0x8a>
   322c8:	be01      	bkpt	0x0001
   322ca:	2300      	movs	r3, #0
   322cc:	461a      	mov	r2, r3
   322ce:	4619      	mov	r1, r3
   322d0:	4618      	mov	r0, r3
   322d2:	f7e6 fd2d 	bl	18d30 <__assert_func>
   322d6:	bf00      	nop
   322d8:	10005bd0 	.word	0x10005bd0
   322dc:	10005e2c 	.word	0x10005e2c
   322e0:	10005b24 	.word	0x10005b24

000322e4 <ble_hci_trans_reset>:
{
    /* No work to do.  All allocated buffers are owned by the host or
     * controller, and they will get freed by their owners.
     */
    return 0;
}
   322e4:	2000      	movs	r0, #0
   322e6:	4770      	bx	lr

000322e8 <ble_hci_ram_init>:

void
ble_hci_ram_init(void)
{
   322e8:	b510      	push	{r4, lr}
   322ea:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   322ec:	4b28      	ldr	r3, [pc, #160]	; (32390 <ble_hci_ram_init+0xa8>)
   322ee:	781b      	ldrb	r3, [r3, #0]
   322f0:	b1eb      	cbz	r3, 3232e <ble_hci_ram_init+0x46>
     * Create memory pool of HCI command buffers. NOTE: we currently dont
     * allow this to be configured. The controller will only allow one
     * outstanding command. We decided to keep this a pool in case we allow
     * allow the controller to handle more than one outstanding command.
     */
    rc = os_mempool_init(&ble_hci_ram_cmd_pool,
   322f2:	4b28      	ldr	r3, [pc, #160]	; (32394 <ble_hci_ram_init+0xac>)
   322f4:	9300      	str	r3, [sp, #0]
   322f6:	4b28      	ldr	r3, [pc, #160]	; (32398 <ble_hci_ram_init+0xb0>)
   322f8:	f44f 7282 	mov.w	r2, #260	; 0x104
   322fc:	2101      	movs	r1, #1
   322fe:	4827      	ldr	r0, [pc, #156]	; (3239c <ble_hci_ram_init+0xb4>)
   32300:	f7e7 fd60 	bl	19dc4 <os_mempool_init>
                         1,
                         BLE_HCI_TRANS_CMD_SZ,
                         ble_hci_ram_cmd_buf,
                         "ble_hci_ram_cmd_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   32304:	b9e8      	cbnz	r0, 32342 <ble_hci_ram_init+0x5a>

    rc = os_mempool_init(&ble_hci_ram_evt_hi_pool,
   32306:	4b26      	ldr	r3, [pc, #152]	; (323a0 <ble_hci_ram_init+0xb8>)
   32308:	9300      	str	r3, [sp, #0]
   3230a:	4b26      	ldr	r3, [pc, #152]	; (323a4 <ble_hci_ram_init+0xbc>)
   3230c:	2246      	movs	r2, #70	; 0x46
   3230e:	2102      	movs	r1, #2
   32310:	4825      	ldr	r0, [pc, #148]	; (323a8 <ble_hci_ram_init+0xc0>)
   32312:	f7e7 fd57 	bl	19dc4 <os_mempool_init>
                         MYNEWT_VAL(BLE_HCI_EVT_HI_BUF_COUNT),
                         MYNEWT_VAL(BLE_HCI_EVT_BUF_SIZE),
                         ble_hci_ram_evt_hi_buf,
                         "ble_hci_ram_evt_hi_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   32316:	bb08      	cbnz	r0, 3235c <ble_hci_ram_init+0x74>

    rc = os_mempool_init(&ble_hci_ram_evt_lo_pool,
   32318:	4b24      	ldr	r3, [pc, #144]	; (323ac <ble_hci_ram_init+0xc4>)
   3231a:	9300      	str	r3, [sp, #0]
   3231c:	4b24      	ldr	r3, [pc, #144]	; (323b0 <ble_hci_ram_init+0xc8>)
   3231e:	2246      	movs	r2, #70	; 0x46
   32320:	2108      	movs	r1, #8
   32322:	4824      	ldr	r0, [pc, #144]	; (323b4 <ble_hci_ram_init+0xcc>)
   32324:	f7e7 fd4e 	bl	19dc4 <os_mempool_init>
                         MYNEWT_VAL(BLE_HCI_EVT_LO_BUF_COUNT),
                         MYNEWT_VAL(BLE_HCI_EVT_BUF_SIZE),
                         ble_hci_ram_evt_lo_buf,
                         "ble_hci_ram_evt_lo_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   32328:	bb28      	cbnz	r0, 32376 <ble_hci_ram_init+0x8e>
}
   3232a:	b002      	add	sp, #8
   3232c:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   3232e:	f7e2 f9e1 	bl	146f4 <hal_debugger_connected>
   32332:	b100      	cbz	r0, 32336 <ble_hci_ram_init+0x4e>
   32334:	be01      	bkpt	0x0001
   32336:	2300      	movs	r3, #0
   32338:	461a      	mov	r2, r3
   3233a:	4619      	mov	r1, r3
   3233c:	4618      	mov	r0, r3
   3233e:	f7e6 fcf7 	bl	18d30 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   32342:	f7e2 f9d7 	bl	146f4 <hal_debugger_connected>
   32346:	b100      	cbz	r0, 3234a <ble_hci_ram_init+0x62>
   32348:	be01      	bkpt	0x0001
   3234a:	2000      	movs	r0, #0
   3234c:	9000      	str	r0, [sp, #0]
   3234e:	4b1a      	ldr	r3, [pc, #104]	; (323b8 <ble_hci_ram_init+0xd0>)
   32350:	681c      	ldr	r4, [r3, #0]
   32352:	4603      	mov	r3, r0
   32354:	4602      	mov	r2, r0
   32356:	4601      	mov	r1, r0
   32358:	47a0      	blx	r4
   3235a:	e7d4      	b.n	32306 <ble_hci_ram_init+0x1e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   3235c:	f7e2 f9ca 	bl	146f4 <hal_debugger_connected>
   32360:	b100      	cbz	r0, 32364 <ble_hci_ram_init+0x7c>
   32362:	be01      	bkpt	0x0001
   32364:	2000      	movs	r0, #0
   32366:	9000      	str	r0, [sp, #0]
   32368:	4b13      	ldr	r3, [pc, #76]	; (323b8 <ble_hci_ram_init+0xd0>)
   3236a:	681c      	ldr	r4, [r3, #0]
   3236c:	4603      	mov	r3, r0
   3236e:	4602      	mov	r2, r0
   32370:	4601      	mov	r1, r0
   32372:	47a0      	blx	r4
   32374:	e7d0      	b.n	32318 <ble_hci_ram_init+0x30>
    SYSINIT_PANIC_ASSERT(rc == 0);
   32376:	f7e2 f9bd 	bl	146f4 <hal_debugger_connected>
   3237a:	b100      	cbz	r0, 3237e <ble_hci_ram_init+0x96>
   3237c:	be01      	bkpt	0x0001
   3237e:	2000      	movs	r0, #0
   32380:	9000      	str	r0, [sp, #0]
   32382:	4b0d      	ldr	r3, [pc, #52]	; (323b8 <ble_hci_ram_init+0xd0>)
   32384:	681c      	ldr	r4, [r3, #0]
   32386:	4603      	mov	r3, r0
   32388:	4602      	mov	r2, r0
   3238a:	4601      	mov	r1, r0
   3238c:	47a0      	blx	r4
}
   3238e:	e7cc      	b.n	3232a <ble_hci_ram_init+0x42>
   32390:	10003fd8 	.word	0x10003fd8
   32394:	00039a48 	.word	0x00039a48
   32398:	10005a20 	.word	0x10005a20
   3239c:	10005b24 	.word	0x10005b24
   323a0:	00039a60 	.word	0x00039a60
   323a4:	10005b40 	.word	0x10005b40
   323a8:	10005bd0 	.word	0x10005bd0
   323ac:	00039a78 	.word	0x00039a78
   323b0:	10005bec 	.word	0x10005bec
   323b4:	10005e2c 	.word	0x10005e2c
   323b8:	100006b4 	.word	0x100006b4

000323bc <cbuf_buf_reader_get8>:

static uint8_t
cbuf_buf_reader_get8(struct cbor_decoder_reader *d, int offset)
{
    struct cbor_buf_reader *cb = (struct cbor_buf_reader *) d;
    return cb->buffer[offset];
   323bc:	69c3      	ldr	r3, [r0, #28]
}
   323be:	5c58      	ldrb	r0, [r3, r1]
   323c0:	4770      	bx	lr

000323c2 <cbor_buf_reader_cpy>:
}

static uintptr_t
cbor_buf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int src_offset,
                    size_t len)
{
   323c2:	b510      	push	{r4, lr}
   323c4:	4604      	mov	r4, r0
   323c6:	4608      	mov	r0, r1
   323c8:	4611      	mov	r1, r2
    struct cbor_buf_reader *cb = (struct cbor_buf_reader *) d;
    return (uintptr_t) memcpy(dst, cb->buffer + src_offset, len);
   323ca:	69e4      	ldr	r4, [r4, #28]
   323cc:	461a      	mov	r2, r3
   323ce:	4421      	add	r1, r4
   323d0:	f7e8 fc3e 	bl	1ac50 <memcpy>
}
   323d4:	bd10      	pop	{r4, pc}

000323d6 <cbor_buf_reader_cmp>:
{
   323d6:	b510      	push	{r4, lr}
   323d8:	4604      	mov	r4, r0
   323da:	4608      	mov	r0, r1
   323dc:	4611      	mov	r1, r2
    return memcmp(dst, cb->buffer + src_offset, len) == 0;
   323de:	69e4      	ldr	r4, [r4, #28]
   323e0:	461a      	mov	r2, r3
   323e2:	4421      	add	r1, r4
   323e4:	f7e8 fc10 	bl	1ac08 <memcmp>
}
   323e8:	fab0 f080 	clz	r0, r0
   323ec:	0940      	lsrs	r0, r0, #5
   323ee:	bd10      	pop	{r4, pc}

000323f0 <cbuf_buf_reader_get64>:
{
   323f0:	b410      	push	{r4}
   323f2:	b083      	sub	sp, #12
    return get64(cb->buffer + offset);
   323f4:	69c2      	ldr	r2, [r0, #28]
   323f6:	1854      	adds	r4, r2, r1
}

static inline uint64_t get64(const uint8_t *ptr)
{
    uint64_t result;
    memcpy(&result, ptr, sizeof(result));
   323f8:	466b      	mov	r3, sp
   323fa:	5850      	ldr	r0, [r2, r1]
   323fc:	6861      	ldr	r1, [r4, #4]
   323fe:	c303      	stmia	r3!, {r0, r1}
}
   32400:	ba08      	rev	r0, r1
   32402:	9900      	ldr	r1, [sp, #0]
   32404:	ba09      	rev	r1, r1
   32406:	b003      	add	sp, #12
   32408:	bc10      	pop	{r4}
   3240a:	4770      	bx	lr

0003240c <cbuf_buf_reader_get32>:
    val = get32(cb->buffer + offset);
   3240c:	69c3      	ldr	r3, [r0, #28]
    return cbor_ntohl(result);
   3240e:	5858      	ldr	r0, [r3, r1]
}
   32410:	ba00      	rev	r0, r0
   32412:	4770      	bx	lr

00032414 <cbuf_buf_reader_get16>:
    return get16(cb->buffer + offset);
   32414:	69c3      	ldr	r3, [r0, #28]
    return cbor_ntohs(result);
   32416:	5a58      	ldrh	r0, [r3, r1]
   32418:	ba40      	rev16	r0, r0
}
   3241a:	b280      	uxth	r0, r0
   3241c:	4770      	bx	lr
	...

00032420 <cbor_buf_reader_init>:

void
cbor_buf_reader_init(struct cbor_buf_reader *cb, const uint8_t *buffer,
                     size_t data)
{
    cb->buffer = buffer;
   32420:	61c1      	str	r1, [r0, #28]
    cb->r.get8 = &cbuf_buf_reader_get8;
   32422:	4b07      	ldr	r3, [pc, #28]	; (32440 <cbor_buf_reader_init+0x20>)
   32424:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbuf_buf_reader_get16;
   32426:	4b07      	ldr	r3, [pc, #28]	; (32444 <cbor_buf_reader_init+0x24>)
   32428:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbuf_buf_reader_get32;
   3242a:	4b07      	ldr	r3, [pc, #28]	; (32448 <cbor_buf_reader_init+0x28>)
   3242c:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbuf_buf_reader_get64;
   3242e:	4b07      	ldr	r3, [pc, #28]	; (3244c <cbor_buf_reader_init+0x2c>)
   32430:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_buf_reader_cmp;
   32432:	4b07      	ldr	r3, [pc, #28]	; (32450 <cbor_buf_reader_init+0x30>)
   32434:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_buf_reader_cpy;
   32436:	4b07      	ldr	r3, [pc, #28]	; (32454 <cbor_buf_reader_init+0x34>)
   32438:	6143      	str	r3, [r0, #20]
    cb->r.message_size = data;
   3243a:	6182      	str	r2, [r0, #24]
}
   3243c:	4770      	bx	lr
   3243e:	bf00      	nop
   32440:	000323bd 	.word	0x000323bd
   32444:	00032415 	.word	0x00032415
   32448:	0003240d 	.word	0x0003240d
   3244c:	000323f1 	.word	0x000323f1
   32450:	000323d7 	.word	0x000323d7
   32454:	000323c3 	.word	0x000323c3

00032458 <is_fixed_type>:
    return CborNoError;
}

static bool is_fixed_type(uint8_t type)
{
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   32458:	2860      	cmp	r0, #96	; 0x60
   3245a:	d009      	beq.n	32470 <is_fixed_type+0x18>
   3245c:	2840      	cmp	r0, #64	; 0x40
   3245e:	d009      	beq.n	32474 <is_fixed_type+0x1c>
   32460:	2880      	cmp	r0, #128	; 0x80
   32462:	d009      	beq.n	32478 <is_fixed_type+0x20>
   32464:	28a0      	cmp	r0, #160	; 0xa0
   32466:	d001      	beq.n	3246c <is_fixed_type+0x14>
   32468:	2001      	movs	r0, #1
           type != CborMapType;
}
   3246a:	4770      	bx	lr
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   3246c:	2000      	movs	r0, #0
   3246e:	4770      	bx	lr
   32470:	2000      	movs	r0, #0
   32472:	4770      	bx	lr
   32474:	2000      	movs	r0, #0
   32476:	4770      	bx	lr
   32478:	2000      	movs	r0, #0
   3247a:	4770      	bx	lr

0003247c <iterate_noop>:
    (void)d;
    (void)dst;
    (void)src_offset;
    (void)len;
    return true;
}
   3247c:	2001      	movs	r0, #1
   3247e:	4770      	bx	lr

00032480 <preparse_value>:
{
   32480:	b570      	push	{r4, r5, r6, lr}
    const CborParser *parser = it->parser;
   32482:	6805      	ldr	r5, [r0, #0]
    it->type = CborInvalidType;
   32484:	23ff      	movs	r3, #255	; 0xff
   32486:	7383      	strb	r3, [r0, #14]
    if (it->offset == parser->end)
   32488:	6841      	ldr	r1, [r0, #4]
   3248a:	686b      	ldr	r3, [r5, #4]
   3248c:	4299      	cmp	r1, r3
   3248e:	f000 808d 	beq.w	325ac <preparse_value+0x12c>
   32492:	4604      	mov	r4, r0
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
   32494:	6828      	ldr	r0, [r5, #0]
   32496:	6803      	ldr	r3, [r0, #0]
   32498:	4798      	blx	r3
    uint8_t type = descriptor & MajorTypeMask;
   3249a:	f000 06e0 	and.w	r6, r0, #224	; 0xe0
    it->type = type;
   3249e:	73a6      	strb	r6, [r4, #14]
    it->flags = 0;
   324a0:	2300      	movs	r3, #0
   324a2:	73e3      	strb	r3, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
   324a4:	f000 031f 	and.w	r3, r0, #31
   324a8:	81a3      	strh	r3, [r4, #12]
    if (descriptor > Value64Bit) {
   324aa:	2b1b      	cmp	r3, #27
   324ac:	d91d      	bls.n	324ea <preparse_value+0x6a>
        if (unlikely(descriptor != IndefiniteLength))
   324ae:	2b1f      	cmp	r3, #31
   324b0:	d10b      	bne.n	324ca <preparse_value+0x4a>
        if (likely(!is_fixed_type(type))) {
   324b2:	4630      	mov	r0, r6
   324b4:	f7ff ffd0 	bl	32458 <is_fixed_type>
   324b8:	f080 0001 	eor.w	r0, r0, #1
   324bc:	f010 0fff 	tst.w	r0, #255	; 0xff
   324c0:	d00b      	beq.n	324da <preparse_value+0x5a>
            it->flags |= CborIteratorFlag_UnknownLength;
   324c2:	2304      	movs	r3, #4
   324c4:	73e3      	strb	r3, [r4, #15]
            return CborNoError;
   324c6:	2000      	movs	r0, #0
}
   324c8:	bd70      	pop	{r4, r5, r6, pc}
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
   324ca:	2ee0      	cmp	r6, #224	; 0xe0
   324cc:	d002      	beq.n	324d4 <preparse_value+0x54>
   324ce:	f240 1005 	movw	r0, #261	; 0x105
   324d2:	e7f9      	b.n	324c8 <preparse_value+0x48>
   324d4:	f240 1003 	movw	r0, #259	; 0x103
   324d8:	e7f6      	b.n	324c8 <preparse_value+0x48>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
   324da:	2ee0      	cmp	r6, #224	; 0xe0
   324dc:	d002      	beq.n	324e4 <preparse_value+0x64>
   324de:	f240 1005 	movw	r0, #261	; 0x105
   324e2:	e7f1      	b.n	324c8 <preparse_value+0x48>
   324e4:	f44f 7081 	mov.w	r0, #258	; 0x102
   324e8:	e7ee      	b.n	324c8 <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   324ea:	2b17      	cmp	r3, #23
   324ec:	d91a      	bls.n	32524 <preparse_value+0xa4>
   324ee:	f1a3 0118 	sub.w	r1, r3, #24
   324f2:	2201      	movs	r2, #1
   324f4:	408a      	lsls	r2, r1
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
   324f6:	3201      	adds	r2, #1
   324f8:	6868      	ldr	r0, [r5, #4]
   324fa:	6861      	ldr	r1, [r4, #4]
   324fc:	1a40      	subs	r0, r0, r1
   324fe:	4282      	cmp	r2, r0
   32500:	d857      	bhi.n	325b2 <preparse_value+0x132>
    uint8_t majortype = type >> MajorTypeShift;
   32502:	0972      	lsrs	r2, r6, #5
    if (majortype == NegativeIntegerType) {
   32504:	2e20      	cmp	r6, #32
   32506:	d00f      	beq.n	32528 <preparse_value+0xa8>
    } else if (majortype == SimpleTypesType) {
   32508:	2a07      	cmp	r2, #7
   3250a:	d012      	beq.n	32532 <preparse_value+0xb2>
    if (descriptor < Value8Bit)
   3250c:	2b17      	cmp	r3, #23
   3250e:	d953      	bls.n	325b8 <preparse_value+0x138>
    if (descriptor == Value8Bit)
   32510:	2b18      	cmp	r3, #24
   32512:	d03d      	beq.n	32590 <preparse_value+0x110>
    else if (descriptor == Value16Bit)
   32514:	2b19      	cmp	r3, #25
   32516:	d042      	beq.n	3259e <preparse_value+0x11e>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   32518:	7be3      	ldrb	r3, [r4, #15]
   3251a:	f043 0301 	orr.w	r3, r3, #1
   3251e:	73e3      	strb	r3, [r4, #15]
    return CborNoError;
   32520:	2000      	movs	r0, #0
   32522:	e7d1      	b.n	324c8 <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   32524:	2200      	movs	r2, #0
   32526:	e7e6      	b.n	324f6 <preparse_value+0x76>
        it->flags |= CborIteratorFlag_NegativeInteger;
   32528:	2202      	movs	r2, #2
   3252a:	73e2      	strb	r2, [r4, #15]
        it->type = CborIntegerType;
   3252c:	2200      	movs	r2, #0
   3252e:	73a2      	strb	r2, [r4, #14]
   32530:	e7ec      	b.n	3250c <preparse_value+0x8c>
        switch (descriptor) {
   32532:	3b14      	subs	r3, #20
   32534:	2b0b      	cmp	r3, #11
   32536:	d812      	bhi.n	3255e <preparse_value+0xde>
   32538:	e8df f003 	tbb	[pc, r3]
   3253c:	0d0d0d06 	.word	0x0d0d0d06
   32540:	0b0b0d13 	.word	0x0b0b0d13
   32544:	20202020 	.word	0x20202020
            it->extra = false;
   32548:	2300      	movs	r3, #0
   3254a:	81a3      	strh	r3, [r4, #12]
            it->type = CborBooleanType;
   3254c:	23f5      	movs	r3, #245	; 0xf5
   3254e:	73a3      	strb	r3, [r4, #14]
            break;
   32550:	e005      	b.n	3255e <preparse_value+0xde>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
   32552:	2301      	movs	r3, #1
   32554:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
   32556:	6828      	ldr	r0, [r5, #0]
   32558:	6803      	ldr	r3, [r0, #0]
   3255a:	4798      	blx	r3
   3255c:	73a0      	strb	r0, [r4, #14]
        return CborNoError;
   3255e:	2000      	movs	r0, #0
   32560:	e7b2      	b.n	324c8 <preparse_value+0x48>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   32562:	6828      	ldr	r0, [r5, #0]
   32564:	6803      	ldr	r3, [r0, #0]
   32566:	3101      	adds	r1, #1
   32568:	4798      	blx	r3
   3256a:	b283      	uxth	r3, r0
   3256c:	81a3      	strh	r3, [r4, #12]
            if (unlikely(it->extra < 32)) {
   3256e:	2b1f      	cmp	r3, #31
   32570:	d8f5      	bhi.n	3255e <preparse_value+0xde>
                it->type = CborInvalidType;
   32572:	23ff      	movs	r3, #255	; 0xff
   32574:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
   32576:	f44f 7083 	mov.w	r0, #262	; 0x106
   3257a:	e7a5      	b.n	324c8 <preparse_value+0x48>
            assert(false);  /* these conditions can't be reached */
   3257c:	f7e2 f8ba 	bl	146f4 <hal_debugger_connected>
   32580:	b100      	cbz	r0, 32584 <preparse_value+0x104>
   32582:	be01      	bkpt	0x0001
   32584:	2300      	movs	r3, #0
   32586:	461a      	mov	r2, r3
   32588:	4619      	mov	r1, r3
   3258a:	4618      	mov	r0, r3
   3258c:	f7e6 fbd0 	bl	18d30 <__assert_func>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
   32590:	6828      	ldr	r0, [r5, #0]
   32592:	6803      	ldr	r3, [r0, #0]
   32594:	3101      	adds	r1, #1
   32596:	4798      	blx	r3
   32598:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   3259a:	2000      	movs	r0, #0
   3259c:	e794      	b.n	324c8 <preparse_value+0x48>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   3259e:	6828      	ldr	r0, [r5, #0]
   325a0:	6843      	ldr	r3, [r0, #4]
   325a2:	3101      	adds	r1, #1
   325a4:	4798      	blx	r3
   325a6:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   325a8:	2000      	movs	r0, #0
   325aa:	e78d      	b.n	324c8 <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   325ac:	f240 1001 	movw	r0, #257	; 0x101
   325b0:	e78a      	b.n	324c8 <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   325b2:	f240 1001 	movw	r0, #257	; 0x101
   325b6:	e787      	b.n	324c8 <preparse_value+0x48>
        return CborNoError;
   325b8:	2000      	movs	r0, #0
   325ba:	e785      	b.n	324c8 <preparse_value+0x48>

000325bc <preparse_next_value>:
{
   325bc:	b510      	push	{r4, lr}
   325be:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
   325c0:	6880      	ldr	r0, [r0, #8]
   325c2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   325c6:	d00c      	beq.n	325e2 <preparse_next_value+0x26>
        if (it->type != CborTagType && !--it->remaining) {
   325c8:	7ba2      	ldrb	r2, [r4, #14]
   325ca:	2ac0      	cmp	r2, #192	; 0xc0
   325cc:	d002      	beq.n	325d4 <preparse_next_value+0x18>
   325ce:	3801      	subs	r0, #1
   325d0:	60a0      	str	r0, [r4, #8]
   325d2:	b118      	cbz	r0, 325dc <preparse_next_value+0x20>
    return preparse_value(it);
   325d4:	4620      	mov	r0, r4
   325d6:	f7ff ff53 	bl	32480 <preparse_value>
}
   325da:	bd10      	pop	{r4, pc}
            it->type = CborInvalidType;
   325dc:	23ff      	movs	r3, #255	; 0xff
   325de:	73a3      	strb	r3, [r4, #14]
            return CborNoError;
   325e0:	e7fb      	b.n	325da <preparse_next_value+0x1e>
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   325e2:	6861      	ldr	r1, [r4, #4]
   325e4:	6823      	ldr	r3, [r4, #0]
   325e6:	685a      	ldr	r2, [r3, #4]
   325e8:	4291      	cmp	r1, r2
   325ea:	d0f3      	beq.n	325d4 <preparse_next_value+0x18>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
   325ec:	6818      	ldr	r0, [r3, #0]
   325ee:	6803      	ldr	r3, [r0, #0]
   325f0:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   325f2:	28ff      	cmp	r0, #255	; 0xff
   325f4:	d1ee      	bne.n	325d4 <preparse_next_value+0x18>
        ++it->offset;
   325f6:	6863      	ldr	r3, [r4, #4]
   325f8:	3301      	adds	r3, #1
   325fa:	6063      	str	r3, [r4, #4]
        it->type = CborInvalidType;
   325fc:	23ff      	movs	r3, #255	; 0xff
   325fe:	73a3      	strb	r3, [r4, #14]
        it->remaining = 0;
   32600:	2000      	movs	r0, #0
   32602:	60a0      	str	r0, [r4, #8]
        return CborNoError;
   32604:	e7e9      	b.n	325da <preparse_next_value+0x1e>

00032606 <extract_length>:
{
   32606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3260a:	4605      	mov	r5, r0
   3260c:	460e      	mov	r6, r1
   3260e:	4617      	mov	r7, r2
    return cbor_ntohll(result);
}

static inline CborError extract_number(const CborParser *p, int *offset, uint64_t *len)
{
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   32610:	6800      	ldr	r0, [r0, #0]
   32612:	6803      	ldr	r3, [r0, #0]
   32614:	6809      	ldr	r1, [r1, #0]
   32616:	4798      	blx	r3
   32618:	f000 041f 	and.w	r4, r0, #31
    ++*offset;
   3261c:	6833      	ldr	r3, [r6, #0]
   3261e:	3301      	adds	r3, #1
   32620:	6033      	str	r3, [r6, #0]
    *len = 1;
    if (additional_information < Value8Bit) {
   32622:	2c17      	cmp	r4, #23
   32624:	d91a      	bls.n	3265c <extract_length+0x56>
        *len = additional_information;
        return CborNoError;
    }
    if (unlikely(additional_information > Value64Bit))
   32626:	2c1b      	cmp	r4, #27
   32628:	d83a      	bhi.n	326a0 <extract_length+0x9a>
        return CborErrorIllegalNumber;

    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   3262a:	3c18      	subs	r4, #24
   3262c:	f04f 0801 	mov.w	r8, #1
   32630:	fa08 f804 	lsl.w	r8, r8, r4
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   32634:	686b      	ldr	r3, [r5, #4]
   32636:	6831      	ldr	r1, [r6, #0]
   32638:	1a5b      	subs	r3, r3, r1
   3263a:	4598      	cmp	r8, r3
   3263c:	d835      	bhi.n	326aa <extract_length+0xa4>
        return CborErrorUnexpectedEOF;
    } else if (bytesNeeded == 1) {
   3263e:	f1b8 0f01 	cmp.w	r8, #1
   32642:	d00f      	beq.n	32664 <extract_length+0x5e>
        *len = p->d->get8(p->d, *offset);
    } else if (bytesNeeded == 2) {
   32644:	f1b8 0f02 	cmp.w	r8, #2
   32648:	d01e      	beq.n	32688 <extract_length+0x82>
        *len =  p->d->get16(p->d, *offset);
    } else if (bytesNeeded == 4) {
   3264a:	f1b8 0f04 	cmp.w	r8, #4
   3264e:	d021      	beq.n	32694 <extract_length+0x8e>
        *len =  p->d->get32(p->d, *offset);
    } else {
        *len =  p->d->get64(p->d, *offset);
   32650:	6828      	ldr	r0, [r5, #0]
   32652:	68c3      	ldr	r3, [r0, #12]
   32654:	4798      	blx	r3
   32656:	4604      	mov	r4, r0
   32658:	460d      	mov	r5, r1
   3265a:	e008      	b.n	3266e <extract_length+0x68>
        *len = additional_information;
   3265c:	b2e4      	uxtb	r4, r4
   3265e:	2500      	movs	r5, #0
        return CborNoError;
   32660:	2000      	movs	r0, #0
   32662:	e008      	b.n	32676 <extract_length+0x70>
        *len = p->d->get8(p->d, *offset);
   32664:	6828      	ldr	r0, [r5, #0]
   32666:	6803      	ldr	r3, [r0, #0]
   32668:	4798      	blx	r3
   3266a:	4604      	mov	r4, r0
   3266c:	2500      	movs	r5, #0
    }
    *offset += bytesNeeded;
   3266e:	6833      	ldr	r3, [r6, #0]
   32670:	4443      	add	r3, r8
   32672:	6033      	str	r3, [r6, #0]
    return CborNoError;
   32674:	2000      	movs	r0, #0
    if (err) {
   32676:	b9e8      	cbnz	r0, 326b4 <extract_length+0xae>
    *len = v;
   32678:	603c      	str	r4, [r7, #0]
    if (v != *len)
   3267a:	2300      	movs	r3, #0
   3267c:	42ab      	cmp	r3, r5
   3267e:	bf08      	it	eq
   32680:	42a4      	cmpeq	r4, r4
   32682:	d11a      	bne.n	326ba <extract_length+0xb4>
}
   32684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *len =  p->d->get16(p->d, *offset);
   32688:	6828      	ldr	r0, [r5, #0]
   3268a:	6843      	ldr	r3, [r0, #4]
   3268c:	4798      	blx	r3
   3268e:	4604      	mov	r4, r0
   32690:	2500      	movs	r5, #0
   32692:	e7ec      	b.n	3266e <extract_length+0x68>
        *len =  p->d->get32(p->d, *offset);
   32694:	6828      	ldr	r0, [r5, #0]
   32696:	6883      	ldr	r3, [r0, #8]
   32698:	4798      	blx	r3
   3269a:	4604      	mov	r4, r0
   3269c:	2500      	movs	r5, #0
   3269e:	e7e6      	b.n	3266e <extract_length+0x68>
    *len = 1;
   326a0:	2401      	movs	r4, #1
   326a2:	2500      	movs	r5, #0
        return CborErrorIllegalNumber;
   326a4:	f240 1005 	movw	r0, #261	; 0x105
   326a8:	e7e5      	b.n	32676 <extract_length+0x70>
    *len = 1;
   326aa:	2401      	movs	r4, #1
   326ac:	2500      	movs	r5, #0
        return CborErrorUnexpectedEOF;
   326ae:	f240 1001 	movw	r0, #257	; 0x101
   326b2:	e7e0      	b.n	32676 <extract_length+0x70>
        *len = 0;
   326b4:	2300      	movs	r3, #0
   326b6:	603b      	str	r3, [r7, #0]
        return err;
   326b8:	e7e4      	b.n	32684 <extract_length+0x7e>
        return CborErrorDataTooLarge;
   326ba:	f44f 6080 	mov.w	r0, #1024	; 0x400
   326be:	e7e1      	b.n	32684 <extract_length+0x7e>

000326c0 <iterate_string_chunks>:

static CborError iterate_string_chunks(const CborValue *value, char *buffer, size_t *buflen,
                                       bool *result, CborValue *next, IterateFunction func)
{
   326c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   326c4:	b085      	sub	sp, #20
   326c6:	4604      	mov	r4, r0
   326c8:	4689      	mov	r9, r1
   326ca:	4616      	mov	r6, r2
   326cc:	461d      	mov	r5, r3
{ return value->type == CborByteStringType; }
   326ce:	7b83      	ldrb	r3, [r0, #14]
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   326d0:	2b40      	cmp	r3, #64	; 0x40
   326d2:	d001      	beq.n	326d8 <iterate_string_chunks+0x18>
   326d4:	2b60      	cmp	r3, #96	; 0x60
   326d6:	d10c      	bne.n	326f2 <iterate_string_chunks+0x32>

    size_t total;
    CborError err;
    int offset = value->offset;
   326d8:	6863      	ldr	r3, [r4, #4]
   326da:	9302      	str	r3, [sp, #8]
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   326dc:	7be2      	ldrb	r2, [r4, #15]
    if (cbor_value_is_length_known(value)) {
   326de:	f012 0f04 	tst.w	r2, #4
   326e2:	d010      	beq.n	32706 <iterate_string_chunks+0x46>
        else
            *result = false;
        offset += total;
    } else {
        /* chunked */
        ++offset;
   326e4:	3301      	adds	r3, #1
   326e6:	9302      	str	r3, [sp, #8]
        total = 0;
   326e8:	2300      	movs	r3, #0
   326ea:	9303      	str	r3, [sp, #12]
        *result = true;
   326ec:	2301      	movs	r3, #1
   326ee:	702b      	strb	r3, [r5, #0]
   326f0:	e04c      	b.n	3278c <iterate_string_chunks+0xcc>
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   326f2:	f7e1 ffff 	bl	146f4 <hal_debugger_connected>
   326f6:	b100      	cbz	r0, 326fa <iterate_string_chunks+0x3a>
   326f8:	be01      	bkpt	0x0001
   326fa:	2300      	movs	r3, #0
   326fc:	461a      	mov	r2, r3
   326fe:	4619      	mov	r1, r3
   32700:	4618      	mov	r0, r3
   32702:	f7e6 fb15 	bl	18d30 <__assert_func>
        err = extract_length(value->parser, &offset, &total);
   32706:	aa03      	add	r2, sp, #12
   32708:	a902      	add	r1, sp, #8
   3270a:	6820      	ldr	r0, [r4, #0]
   3270c:	f7ff ff7b 	bl	32606 <extract_length>
        if (err)
   32710:	4603      	mov	r3, r0
   32712:	2800      	cmp	r0, #0
   32714:	d177      	bne.n	32806 <iterate_string_chunks+0x146>
        if (total > (size_t)(value->parser->end - offset))
   32716:	6820      	ldr	r0, [r4, #0]
   32718:	6843      	ldr	r3, [r0, #4]
   3271a:	9a02      	ldr	r2, [sp, #8]
   3271c:	1a99      	subs	r1, r3, r2
   3271e:	9b03      	ldr	r3, [sp, #12]
   32720:	4299      	cmp	r1, r3
   32722:	f0c0 8083 	bcc.w	3282c <iterate_string_chunks+0x16c>
        if (total <= *buflen)
   32726:	6831      	ldr	r1, [r6, #0]
   32728:	428b      	cmp	r3, r1
   3272a:	d81e      	bhi.n	3276a <iterate_string_chunks+0xaa>
            *result = !!func(value->parser->d, buffer, offset, total);
   3272c:	4649      	mov	r1, r9
   3272e:	6800      	ldr	r0, [r0, #0]
   32730:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   32732:	47b8      	blx	r7
   32734:	3800      	subs	r0, #0
   32736:	bf18      	it	ne
   32738:	2001      	movne	r0, #1
   3273a:	7028      	strb	r0, [r5, #0]
        offset += total;
   3273c:	9b02      	ldr	r3, [sp, #8]
   3273e:	9a03      	ldr	r2, [sp, #12]
   32740:	4413      	add	r3, r2
   32742:	9302      	str	r3, [sp, #8]
            total = newTotal;
        }
    }

    /* is there enough room for the ending NUL byte? */
    if (*result && *buflen > total) {
   32744:	782b      	ldrb	r3, [r5, #0]
   32746:	b14b      	cbz	r3, 3275c <iterate_string_chunks+0x9c>
   32748:	6832      	ldr	r2, [r6, #0]
   3274a:	9b03      	ldr	r3, [sp, #12]
   3274c:	429a      	cmp	r2, r3
   3274e:	d905      	bls.n	3275c <iterate_string_chunks+0x9c>
        /* we are just trying to write a NULL byte here,, but this is hard
         * because this is called by function pointer with an abstract
         * reader.  Since this is the output buffer, we can assume that if
         * we have a valid buffer its ok to write a NULL here  */
        if(buffer) {
   32750:	f1b9 0f00 	cmp.w	r9, #0
   32754:	d002      	beq.n	3275c <iterate_string_chunks+0x9c>
            *(buffer + total) = '\0';
   32756:	2200      	movs	r2, #0
   32758:	f809 2003 	strb.w	r2, [r9, r3]
        }
    }
    *buflen = total;
   3275c:	9b03      	ldr	r3, [sp, #12]
   3275e:	6033      	str	r3, [r6, #0]

    if (next) {
   32760:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   32762:	2b00      	cmp	r3, #0
   32764:	d156      	bne.n	32814 <iterate_string_chunks+0x154>
        *next = *value;
        next->offset = offset;
        return preparse_next_value(next);
    }
    return CborNoError;
   32766:	2300      	movs	r3, #0
   32768:	e04d      	b.n	32806 <iterate_string_chunks+0x146>
            *result = false;
   3276a:	2300      	movs	r3, #0
   3276c:	702b      	strb	r3, [r5, #0]
   3276e:	e7e5      	b.n	3273c <iterate_string_chunks+0x7c>
                ++offset;
   32770:	9b02      	ldr	r3, [sp, #8]
   32772:	3301      	adds	r3, #1
   32774:	9302      	str	r3, [sp, #8]
                break;
   32776:	e7e5      	b.n	32744 <iterate_string_chunks+0x84>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
   32778:	2201      	movs	r2, #1
   3277a:	e023      	b.n	327c4 <iterate_string_chunks+0x104>
                *result = false;
   3277c:	2300      	movs	r3, #0
   3277e:	702b      	strb	r3, [r5, #0]
            offset += chunkLen;
   32780:	9b02      	ldr	r3, [sp, #8]
   32782:	9a01      	ldr	r2, [sp, #4]
   32784:	4413      	add	r3, r2
   32786:	9302      	str	r3, [sp, #8]
            total = newTotal;
   32788:	f8cd 800c 	str.w	r8, [sp, #12]
            if (offset == value->parser->end)
   3278c:	6823      	ldr	r3, [r4, #0]
   3278e:	685a      	ldr	r2, [r3, #4]
   32790:	9902      	ldr	r1, [sp, #8]
   32792:	428a      	cmp	r2, r1
   32794:	d02f      	beq.n	327f6 <iterate_string_chunks+0x136>
            val = value->parser->d->get8(value->parser->d, offset);
   32796:	6818      	ldr	r0, [r3, #0]
   32798:	6803      	ldr	r3, [r0, #0]
   3279a:	4798      	blx	r3
            if (val == (uint8_t)BreakByte) {
   3279c:	28ff      	cmp	r0, #255	; 0xff
   3279e:	d0e7      	beq.n	32770 <iterate_string_chunks+0xb0>
            if ((val & MajorTypeMask) != value->type)
   327a0:	f020 001f 	bic.w	r0, r0, #31
   327a4:	7ba3      	ldrb	r3, [r4, #14]
   327a6:	4298      	cmp	r0, r3
   327a8:	d128      	bne.n	327fc <iterate_string_chunks+0x13c>
            err = extract_length(value->parser, &offset, &chunkLen);
   327aa:	aa01      	add	r2, sp, #4
   327ac:	a902      	add	r1, sp, #8
   327ae:	6820      	ldr	r0, [r4, #0]
   327b0:	f7ff ff29 	bl	32606 <extract_length>
            if (err)
   327b4:	4603      	mov	r3, r0
   327b6:	bb30      	cbnz	r0, 32806 <iterate_string_chunks+0x146>
            if (unlikely(add_check_overflow(total, chunkLen, &newTotal)))
   327b8:	9903      	ldr	r1, [sp, #12]
   327ba:	9b01      	ldr	r3, [sp, #4]
   327bc:	2200      	movs	r2, #0
   327be:	eb11 0803 	adds.w	r8, r1, r3
   327c2:	d2d9      	bcs.n	32778 <iterate_string_chunks+0xb8>
   327c4:	b9ea      	cbnz	r2, 32802 <iterate_string_chunks+0x142>
            if (chunkLen > (size_t)(value->parser->end - offset))
   327c6:	f8d4 c000 	ldr.w	ip, [r4]
   327ca:	f8dc 0004 	ldr.w	r0, [ip, #4]
   327ce:	9a02      	ldr	r2, [sp, #8]
   327d0:	1a80      	subs	r0, r0, r2
   327d2:	4283      	cmp	r3, r0
   327d4:	d81b      	bhi.n	3280e <iterate_string_chunks+0x14e>
            if (*result && *buflen >= newTotal)
   327d6:	7828      	ldrb	r0, [r5, #0]
   327d8:	2800      	cmp	r0, #0
   327da:	d0cf      	beq.n	3277c <iterate_string_chunks+0xbc>
   327dc:	6830      	ldr	r0, [r6, #0]
   327de:	4540      	cmp	r0, r8
   327e0:	d3cc      	bcc.n	3277c <iterate_string_chunks+0xbc>
                *result = !!func(value->parser->d, buffer + total, offset, chunkLen);
   327e2:	4449      	add	r1, r9
   327e4:	f8dc 0000 	ldr.w	r0, [ip]
   327e8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   327ea:	47b8      	blx	r7
   327ec:	3800      	subs	r0, #0
   327ee:	bf18      	it	ne
   327f0:	2001      	movne	r0, #1
   327f2:	7028      	strb	r0, [r5, #0]
   327f4:	e7c4      	b.n	32780 <iterate_string_chunks+0xc0>
                return CborErrorUnexpectedEOF;
   327f6:	f240 1301 	movw	r3, #257	; 0x101
   327fa:	e004      	b.n	32806 <iterate_string_chunks+0x146>
                return CborErrorIllegalType;
   327fc:	f44f 7382 	mov.w	r3, #260	; 0x104
   32800:	e001      	b.n	32806 <iterate_string_chunks+0x146>
                return CborErrorDataTooLarge;
   32802:	f44f 6380 	mov.w	r3, #1024	; 0x400
}
   32806:	4618      	mov	r0, r3
   32808:	b005      	add	sp, #20
   3280a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return CborErrorUnexpectedEOF;
   3280e:	f240 1301 	movw	r3, #257	; 0x101
   32812:	e7f8      	b.n	32806 <iterate_string_chunks+0x146>
        *next = *value;
   32814:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   32818:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   3281a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        next->offset = offset;
   3281e:	9b02      	ldr	r3, [sp, #8]
   32820:	6063      	str	r3, [r4, #4]
        return preparse_next_value(next);
   32822:	4620      	mov	r0, r4
   32824:	f7ff feca 	bl	325bc <preparse_next_value>
   32828:	4603      	mov	r3, r0
   3282a:	e7ec      	b.n	32806 <iterate_string_chunks+0x146>
            return CborErrorUnexpectedEOF;
   3282c:	f240 1301 	movw	r3, #257	; 0x101
   32830:	e7e9      	b.n	32806 <iterate_string_chunks+0x146>

00032832 <advance_internal>:
{
   32832:	b570      	push	{r4, r5, r6, lr}
   32834:	4604      	mov	r4, r0
    CborError err = extract_number(it->parser, &it->offset,  &length);
   32836:	6806      	ldr	r6, [r0, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   32838:	6830      	ldr	r0, [r6, #0]
   3283a:	6803      	ldr	r3, [r0, #0]
   3283c:	6861      	ldr	r1, [r4, #4]
   3283e:	4798      	blx	r3
   32840:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   32844:	6863      	ldr	r3, [r4, #4]
   32846:	3301      	adds	r3, #1
   32848:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   3284a:	2817      	cmp	r0, #23
   3284c:	d915      	bls.n	3287a <advance_internal+0x48>
    if (unlikely(additional_information > Value64Bit))
   3284e:	281b      	cmp	r0, #27
   32850:	d842      	bhi.n	328d8 <advance_internal+0xa6>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   32852:	3818      	subs	r0, #24
   32854:	2501      	movs	r5, #1
   32856:	4085      	lsls	r5, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   32858:	6873      	ldr	r3, [r6, #4]
   3285a:	6861      	ldr	r1, [r4, #4]
   3285c:	1a5b      	subs	r3, r3, r1
   3285e:	429d      	cmp	r5, r3
   32860:	d83f      	bhi.n	328e2 <advance_internal+0xb0>
    } else if (bytesNeeded == 1) {
   32862:	2d01      	cmp	r5, #1
   32864:	d00d      	beq.n	32882 <advance_internal+0x50>
    } else if (bytesNeeded == 2) {
   32866:	2d02      	cmp	r5, #2
   32868:	d02a      	beq.n	328c0 <advance_internal+0x8e>
    } else if (bytesNeeded == 4) {
   3286a:	2d04      	cmp	r5, #4
   3286c:	d02e      	beq.n	328cc <advance_internal+0x9a>
        *len =  p->d->get64(p->d, *offset);
   3286e:	6830      	ldr	r0, [r6, #0]
   32870:	68c3      	ldr	r3, [r0, #12]
   32872:	4798      	blx	r3
   32874:	4602      	mov	r2, r0
   32876:	460b      	mov	r3, r1
   32878:	e008      	b.n	3288c <advance_internal+0x5a>
        *len = additional_information;
   3287a:	b2c2      	uxtb	r2, r0
   3287c:	2300      	movs	r3, #0
        return CborNoError;
   3287e:	2100      	movs	r1, #0
   32880:	e008      	b.n	32894 <advance_internal+0x62>
        *len = p->d->get8(p->d, *offset);
   32882:	6830      	ldr	r0, [r6, #0]
   32884:	6803      	ldr	r3, [r0, #0]
   32886:	4798      	blx	r3
   32888:	4602      	mov	r2, r0
   3288a:	2300      	movs	r3, #0
    *offset += bytesNeeded;
   3288c:	6860      	ldr	r0, [r4, #4]
   3288e:	4428      	add	r0, r5
   32890:	6060      	str	r0, [r4, #4]
    return CborNoError;
   32892:	2100      	movs	r1, #0
    assert(err == CborNoError);
   32894:	bb51      	cbnz	r1, 328ec <advance_internal+0xba>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
   32896:	7ba1      	ldrb	r1, [r4, #14]
   32898:	2940      	cmp	r1, #64	; 0x40
   3289a:	d001      	beq.n	328a0 <advance_internal+0x6e>
   3289c:	2960      	cmp	r1, #96	; 0x60
   3289e:	d10b      	bne.n	328b8 <advance_internal+0x86>
        assert(length == (size_t)length);
   328a0:	2100      	movs	r1, #0
   328a2:	4299      	cmp	r1, r3
   328a4:	bf08      	it	eq
   328a6:	4292      	cmpeq	r2, r2
   328a8:	d12a      	bne.n	32900 <advance_internal+0xce>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   328aa:	7be3      	ldrb	r3, [r4, #15]
   328ac:	f013 0f04 	tst.w	r3, #4
   328b0:	d130      	bne.n	32914 <advance_internal+0xe2>
        it->offset += length;
   328b2:	6863      	ldr	r3, [r4, #4]
   328b4:	4413      	add	r3, r2
   328b6:	6063      	str	r3, [r4, #4]
    return preparse_next_value(it);
   328b8:	4620      	mov	r0, r4
   328ba:	f7ff fe7f 	bl	325bc <preparse_next_value>
}
   328be:	bd70      	pop	{r4, r5, r6, pc}
        *len =  p->d->get16(p->d, *offset);
   328c0:	6830      	ldr	r0, [r6, #0]
   328c2:	6843      	ldr	r3, [r0, #4]
   328c4:	4798      	blx	r3
   328c6:	4602      	mov	r2, r0
   328c8:	2300      	movs	r3, #0
   328ca:	e7df      	b.n	3288c <advance_internal+0x5a>
        *len =  p->d->get32(p->d, *offset);
   328cc:	6830      	ldr	r0, [r6, #0]
   328ce:	6883      	ldr	r3, [r0, #8]
   328d0:	4798      	blx	r3
   328d2:	4602      	mov	r2, r0
   328d4:	2300      	movs	r3, #0
   328d6:	e7d9      	b.n	3288c <advance_internal+0x5a>
    *len = 1;
   328d8:	2201      	movs	r2, #1
   328da:	2300      	movs	r3, #0
        return CborErrorIllegalNumber;
   328dc:	f240 1105 	movw	r1, #261	; 0x105
   328e0:	e7d8      	b.n	32894 <advance_internal+0x62>
    *len = 1;
   328e2:	2201      	movs	r2, #1
   328e4:	2300      	movs	r3, #0
        return CborErrorUnexpectedEOF;
   328e6:	f240 1101 	movw	r1, #257	; 0x101
   328ea:	e7d3      	b.n	32894 <advance_internal+0x62>
    assert(err == CborNoError);
   328ec:	f7e1 ff02 	bl	146f4 <hal_debugger_connected>
   328f0:	b100      	cbz	r0, 328f4 <advance_internal+0xc2>
   328f2:	be01      	bkpt	0x0001
   328f4:	2300      	movs	r3, #0
   328f6:	461a      	mov	r2, r3
   328f8:	4619      	mov	r1, r3
   328fa:	4618      	mov	r0, r3
   328fc:	f7e6 fa18 	bl	18d30 <__assert_func>
        assert(length == (size_t)length);
   32900:	f7e1 fef8 	bl	146f4 <hal_debugger_connected>
   32904:	b100      	cbz	r0, 32908 <advance_internal+0xd6>
   32906:	be01      	bkpt	0x0001
   32908:	2300      	movs	r3, #0
   3290a:	461a      	mov	r2, r3
   3290c:	4619      	mov	r1, r3
   3290e:	4618      	mov	r0, r3
   32910:	f7e6 fa0e 	bl	18d30 <__assert_func>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   32914:	f7e1 feee 	bl	146f4 <hal_debugger_connected>
   32918:	b100      	cbz	r0, 3291c <advance_internal+0xea>
   3291a:	be01      	bkpt	0x0001
   3291c:	2300      	movs	r3, #0
   3291e:	461a      	mov	r2, r3
   32920:	4619      	mov	r1, r3
   32922:	4618      	mov	r0, r3
   32924:	f7e6 fa04 	bl	18d30 <__assert_func>

00032928 <_cbor_value_decode_int64_internal>:
{
   32928:	b510      	push	{r4, lr}
   3292a:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   3292c:	6803      	ldr	r3, [r0, #0]
   3292e:	6818      	ldr	r0, [r3, #0]
   32930:	6803      	ldr	r3, [r0, #0]
   32932:	6861      	ldr	r1, [r4, #4]
   32934:	4798      	blx	r3
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   32936:	7be3      	ldrb	r3, [r4, #15]
   32938:	f013 0f01 	tst.w	r3, #1
   3293c:	d104      	bne.n	32948 <_cbor_value_decode_int64_internal+0x20>
   3293e:	7ba3      	ldrb	r3, [r4, #14]
   32940:	2bfa      	cmp	r3, #250	; 0xfa
   32942:	d001      	beq.n	32948 <_cbor_value_decode_int64_internal+0x20>
   32944:	2bfb      	cmp	r3, #251	; 0xfb
   32946:	d111      	bne.n	3296c <_cbor_value_decode_int64_internal+0x44>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   32948:	f000 031e 	and.w	r3, r0, #30
   3294c:	2b1a      	cmp	r3, #26
   3294e:	d117      	bne.n	32980 <_cbor_value_decode_int64_internal+0x58>
    if ((val & 1) == (Value32Bit & 1))
   32950:	f010 0f01 	tst.w	r0, #1
   32954:	d01e      	beq.n	32994 <_cbor_value_decode_int64_internal+0x6c>
    assert((val & SmallValueMask) == Value64Bit);
   32956:	f000 001f 	and.w	r0, r0, #31
   3295a:	281b      	cmp	r0, #27
   3295c:	d122      	bne.n	329a4 <_cbor_value_decode_int64_internal+0x7c>
        return value->parser->d->get64(value->parser->d, value->offset + 1);
   3295e:	6823      	ldr	r3, [r4, #0]
   32960:	6818      	ldr	r0, [r3, #0]
   32962:	68c3      	ldr	r3, [r0, #12]
   32964:	6861      	ldr	r1, [r4, #4]
   32966:	3101      	adds	r1, #1
   32968:	4798      	blx	r3
}
   3296a:	bd10      	pop	{r4, pc}
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   3296c:	f7e1 fec2 	bl	146f4 <hal_debugger_connected>
   32970:	b100      	cbz	r0, 32974 <_cbor_value_decode_int64_internal+0x4c>
   32972:	be01      	bkpt	0x0001
   32974:	2300      	movs	r3, #0
   32976:	461a      	mov	r2, r3
   32978:	4619      	mov	r1, r3
   3297a:	4618      	mov	r0, r3
   3297c:	f7e6 f9d8 	bl	18d30 <__assert_func>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   32980:	f7e1 feb8 	bl	146f4 <hal_debugger_connected>
   32984:	b100      	cbz	r0, 32988 <_cbor_value_decode_int64_internal+0x60>
   32986:	be01      	bkpt	0x0001
   32988:	2300      	movs	r3, #0
   3298a:	461a      	mov	r2, r3
   3298c:	4619      	mov	r1, r3
   3298e:	4618      	mov	r0, r3
   32990:	f7e6 f9ce 	bl	18d30 <__assert_func>
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   32994:	6823      	ldr	r3, [r4, #0]
   32996:	6818      	ldr	r0, [r3, #0]
   32998:	6883      	ldr	r3, [r0, #8]
   3299a:	6861      	ldr	r1, [r4, #4]
   3299c:	3101      	adds	r1, #1
   3299e:	4798      	blx	r3
   329a0:	2100      	movs	r1, #0
   329a2:	e7e2      	b.n	3296a <_cbor_value_decode_int64_internal+0x42>
    assert((val & SmallValueMask) == Value64Bit);
   329a4:	f7e1 fea6 	bl	146f4 <hal_debugger_connected>
   329a8:	b100      	cbz	r0, 329ac <_cbor_value_decode_int64_internal+0x84>
   329aa:	be01      	bkpt	0x0001
   329ac:	2300      	movs	r3, #0
   329ae:	461a      	mov	r2, r3
   329b0:	4619      	mov	r1, r3
   329b2:	4618      	mov	r0, r3
   329b4:	f7e6 f9bc 	bl	18d30 <__assert_func>

000329b8 <cbor_parser_init>:
{
   329b8:	b510      	push	{r4, lr}
   329ba:	4604      	mov	r4, r0
   329bc:	4618      	mov	r0, r3
    memset(parser, 0, sizeof(*parser));
   329be:	2300      	movs	r3, #0
   329c0:	6053      	str	r3, [r2, #4]
   329c2:	6093      	str	r3, [r2, #8]
    parser->d = d;
   329c4:	6014      	str	r4, [r2, #0]
    parser->end = d->message_size;
   329c6:	69a4      	ldr	r4, [r4, #24]
   329c8:	6054      	str	r4, [r2, #4]
    parser->flags = flags;
   329ca:	6091      	str	r1, [r2, #8]
    it->parser = parser;
   329cc:	6002      	str	r2, [r0, #0]
    it->offset = 0;
   329ce:	6043      	str	r3, [r0, #4]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   329d0:	2301      	movs	r3, #1
   329d2:	6083      	str	r3, [r0, #8]
    return preparse_value(it);
   329d4:	f7ff fd54 	bl	32480 <preparse_value>
}
   329d8:	bd10      	pop	{r4, pc}

000329da <cbor_value_advance_fixed>:
{
   329da:	b510      	push	{r4, lr}
   329dc:	4604      	mov	r4, r0
    assert(it->type != CborInvalidType);
   329de:	7b80      	ldrb	r0, [r0, #14]
   329e0:	28ff      	cmp	r0, #255	; 0xff
   329e2:	d008      	beq.n	329f6 <cbor_value_advance_fixed+0x1c>
    assert(is_fixed_type(it->type));
   329e4:	f7ff fd38 	bl	32458 <is_fixed_type>
   329e8:	b178      	cbz	r0, 32a0a <cbor_value_advance_fixed+0x30>
    if (!it->remaining)
   329ea:	68a3      	ldr	r3, [r4, #8]
   329ec:	b1bb      	cbz	r3, 32a1e <cbor_value_advance_fixed+0x44>
    return advance_internal(it);
   329ee:	4620      	mov	r0, r4
   329f0:	f7ff ff1f 	bl	32832 <advance_internal>
}
   329f4:	bd10      	pop	{r4, pc}
    assert(it->type != CborInvalidType);
   329f6:	f7e1 fe7d 	bl	146f4 <hal_debugger_connected>
   329fa:	b100      	cbz	r0, 329fe <cbor_value_advance_fixed+0x24>
   329fc:	be01      	bkpt	0x0001
   329fe:	2300      	movs	r3, #0
   32a00:	461a      	mov	r2, r3
   32a02:	4619      	mov	r1, r3
   32a04:	4618      	mov	r0, r3
   32a06:	f7e6 f993 	bl	18d30 <__assert_func>
    assert(is_fixed_type(it->type));
   32a0a:	f7e1 fe73 	bl	146f4 <hal_debugger_connected>
   32a0e:	b100      	cbz	r0, 32a12 <cbor_value_advance_fixed+0x38>
   32a10:	be01      	bkpt	0x0001
   32a12:	2300      	movs	r3, #0
   32a14:	461a      	mov	r2, r3
   32a16:	4619      	mov	r1, r3
   32a18:	4618      	mov	r0, r3
   32a1a:	f7e6 f989 	bl	18d30 <__assert_func>
        return CborErrorAdvancePastEOF;
   32a1e:	2003      	movs	r0, #3
   32a20:	e7e8      	b.n	329f4 <cbor_value_advance_fixed+0x1a>

00032a22 <cbor_value_enter_container>:
{
   32a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32a24:	4605      	mov	r5, r0
   32a26:	460c      	mov	r4, r1
{ return it->type == CborArrayType || it->type == CborMapType; }
   32a28:	7b83      	ldrb	r3, [r0, #14]
   32a2a:	2b80      	cmp	r3, #128	; 0x80
   32a2c:	d021      	beq.n	32a72 <cbor_value_enter_container+0x50>
   32a2e:	2ba0      	cmp	r3, #160	; 0xa0
   32a30:	d01d      	beq.n	32a6e <cbor_value_enter_container+0x4c>
   32a32:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   32a34:	b1fb      	cbz	r3, 32a76 <cbor_value_enter_container+0x54>
    *recursed = *it;
   32a36:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   32a3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (it->flags & CborIteratorFlag_UnknownLength) {
   32a3e:	7beb      	ldrb	r3, [r5, #15]
   32a40:	f013 0f04 	tst.w	r3, #4
   32a44:	d021      	beq.n	32a8a <cbor_value_enter_container+0x68>
        recursed->remaining = UINT32_MAX;
   32a46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   32a4a:	60a3      	str	r3, [r4, #8]
        ++recursed->offset;
   32a4c:	460b      	mov	r3, r1
   32a4e:	3301      	adds	r3, #1
   32a50:	6063      	str	r3, [r4, #4]
        err = preparse_value(recursed);
   32a52:	4620      	mov	r0, r4
   32a54:	f7ff fd14 	bl	32480 <preparse_value>
        if (err != CborErrorUnexpectedBreak)
   32a58:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   32a5c:	d106      	bne.n	32a6c <cbor_value_enter_container+0x4a>
        ++recursed->offset;
   32a5e:	6863      	ldr	r3, [r4, #4]
   32a60:	3301      	adds	r3, #1
   32a62:	6063      	str	r3, [r4, #4]
    recursed->type = CborInvalidType;
   32a64:	23ff      	movs	r3, #255	; 0xff
   32a66:	73a3      	strb	r3, [r4, #14]
    recursed->remaining = 0;
   32a68:	2000      	movs	r0, #0
   32a6a:	60a0      	str	r0, [r4, #8]
}
   32a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32a6e:	2301      	movs	r3, #1
   32a70:	e7e0      	b.n	32a34 <cbor_value_enter_container+0x12>
   32a72:	2301      	movs	r3, #1
   32a74:	e7de      	b.n	32a34 <cbor_value_enter_container+0x12>
    assert(cbor_value_is_container(it));
   32a76:	f7e1 fe3d 	bl	146f4 <hal_debugger_connected>
   32a7a:	b100      	cbz	r0, 32a7e <cbor_value_enter_container+0x5c>
   32a7c:	be01      	bkpt	0x0001
   32a7e:	2300      	movs	r3, #0
   32a80:	461a      	mov	r2, r3
   32a82:	4619      	mov	r1, r3
   32a84:	4618      	mov	r0, r3
   32a86:	f7e6 f953 	bl	18d30 <__assert_func>
        err = extract_number(recursed->parser, &recursed->offset, &len);
   32a8a:	6827      	ldr	r7, [r4, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   32a8c:	6838      	ldr	r0, [r7, #0]
   32a8e:	6803      	ldr	r3, [r0, #0]
   32a90:	6861      	ldr	r1, [r4, #4]
   32a92:	4798      	blx	r3
   32a94:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   32a98:	6863      	ldr	r3, [r4, #4]
   32a9a:	3301      	adds	r3, #1
   32a9c:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   32a9e:	2817      	cmp	r0, #23
   32aa0:	d915      	bls.n	32ace <cbor_value_enter_container+0xac>
    if (unlikely(additional_information > Value64Bit))
   32aa2:	281b      	cmp	r0, #27
   32aa4:	d841      	bhi.n	32b2a <cbor_value_enter_container+0x108>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   32aa6:	3818      	subs	r0, #24
   32aa8:	2601      	movs	r6, #1
   32aaa:	4086      	lsls	r6, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   32aac:	687b      	ldr	r3, [r7, #4]
   32aae:	6861      	ldr	r1, [r4, #4]
   32ab0:	1a5b      	subs	r3, r3, r1
   32ab2:	429e      	cmp	r6, r3
   32ab4:	d83e      	bhi.n	32b34 <cbor_value_enter_container+0x112>
    } else if (bytesNeeded == 1) {
   32ab6:	2e01      	cmp	r6, #1
   32ab8:	d00d      	beq.n	32ad6 <cbor_value_enter_container+0xb4>
    } else if (bytesNeeded == 2) {
   32aba:	2e02      	cmp	r6, #2
   32abc:	d029      	beq.n	32b12 <cbor_value_enter_container+0xf0>
    } else if (bytesNeeded == 4) {
   32abe:	2e04      	cmp	r6, #4
   32ac0:	d02d      	beq.n	32b1e <cbor_value_enter_container+0xfc>
        *len =  p->d->get64(p->d, *offset);
   32ac2:	6838      	ldr	r0, [r7, #0]
   32ac4:	68c3      	ldr	r3, [r0, #12]
   32ac6:	4798      	blx	r3
   32ac8:	4602      	mov	r2, r0
   32aca:	460b      	mov	r3, r1
   32acc:	e008      	b.n	32ae0 <cbor_value_enter_container+0xbe>
        *len = additional_information;
   32ace:	b2c2      	uxtb	r2, r0
   32ad0:	2300      	movs	r3, #0
        return CborNoError;
   32ad2:	2100      	movs	r1, #0
   32ad4:	e008      	b.n	32ae8 <cbor_value_enter_container+0xc6>
        *len = p->d->get8(p->d, *offset);
   32ad6:	6838      	ldr	r0, [r7, #0]
   32ad8:	6803      	ldr	r3, [r0, #0]
   32ada:	4798      	blx	r3
   32adc:	4602      	mov	r2, r0
   32ade:	2300      	movs	r3, #0
    *offset += bytesNeeded;
   32ae0:	6860      	ldr	r0, [r4, #4]
   32ae2:	4430      	add	r0, r6
   32ae4:	6060      	str	r0, [r4, #4]
    return CborNoError;
   32ae6:	2100      	movs	r1, #0
        assert(err == CborNoError);
   32ae8:	bb49      	cbnz	r1, 32b3e <cbor_value_enter_container+0x11c>
        recursed->remaining = (uint32_t)len;
   32aea:	60a2      	str	r2, [r4, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
   32aec:	2100      	movs	r1, #0
   32aee:	4299      	cmp	r1, r3
   32af0:	bf08      	it	eq
   32af2:	4292      	cmpeq	r2, r2
   32af4:	d12d      	bne.n	32b52 <cbor_value_enter_container+0x130>
   32af6:	2b00      	cmp	r3, #0
   32af8:	bf08      	it	eq
   32afa:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   32afe:	d028      	beq.n	32b52 <cbor_value_enter_container+0x130>
        if (recursed->type == CborMapType) {
   32b00:	7ba1      	ldrb	r1, [r4, #14]
   32b02:	29a0      	cmp	r1, #160	; 0xa0
   32b04:	d02a      	beq.n	32b5c <cbor_value_enter_container+0x13a>
        if (len != 0)
   32b06:	4313      	orrs	r3, r2
   32b08:	d0ac      	beq.n	32a64 <cbor_value_enter_container+0x42>
            return preparse_value(recursed);
   32b0a:	4620      	mov	r0, r4
   32b0c:	f7ff fcb8 	bl	32480 <preparse_value>
   32b10:	e7ac      	b.n	32a6c <cbor_value_enter_container+0x4a>
        *len =  p->d->get16(p->d, *offset);
   32b12:	6838      	ldr	r0, [r7, #0]
   32b14:	6843      	ldr	r3, [r0, #4]
   32b16:	4798      	blx	r3
   32b18:	4602      	mov	r2, r0
   32b1a:	2300      	movs	r3, #0
   32b1c:	e7e0      	b.n	32ae0 <cbor_value_enter_container+0xbe>
        *len =  p->d->get32(p->d, *offset);
   32b1e:	6838      	ldr	r0, [r7, #0]
   32b20:	6883      	ldr	r3, [r0, #8]
   32b22:	4798      	blx	r3
   32b24:	4602      	mov	r2, r0
   32b26:	2300      	movs	r3, #0
   32b28:	e7da      	b.n	32ae0 <cbor_value_enter_container+0xbe>
    *len = 1;
   32b2a:	2201      	movs	r2, #1
   32b2c:	2300      	movs	r3, #0
        return CborErrorIllegalNumber;
   32b2e:	f240 1105 	movw	r1, #261	; 0x105
   32b32:	e7d9      	b.n	32ae8 <cbor_value_enter_container+0xc6>
    *len = 1;
   32b34:	2201      	movs	r2, #1
   32b36:	2300      	movs	r3, #0
        return CborErrorUnexpectedEOF;
   32b38:	f240 1101 	movw	r1, #257	; 0x101
   32b3c:	e7d4      	b.n	32ae8 <cbor_value_enter_container+0xc6>
        assert(err == CborNoError);
   32b3e:	f7e1 fdd9 	bl	146f4 <hal_debugger_connected>
   32b42:	b100      	cbz	r0, 32b46 <cbor_value_enter_container+0x124>
   32b44:	be01      	bkpt	0x0001
   32b46:	2300      	movs	r3, #0
   32b48:	461a      	mov	r2, r3
   32b4a:	4619      	mov	r1, r3
   32b4c:	4618      	mov	r0, r3
   32b4e:	f7e6 f8ef 	bl	18d30 <__assert_func>
            recursed->offset = it->offset;
   32b52:	686b      	ldr	r3, [r5, #4]
   32b54:	6063      	str	r3, [r4, #4]
            return CborErrorDataTooLarge;
   32b56:	f44f 6080 	mov.w	r0, #1024	; 0x400
   32b5a:	e787      	b.n	32a6c <cbor_value_enter_container+0x4a>
            if (recursed->remaining > UINT32_MAX / 2) {
   32b5c:	2a00      	cmp	r2, #0
   32b5e:	db02      	blt.n	32b66 <cbor_value_enter_container+0x144>
            recursed->remaining *= 2;
   32b60:	0056      	lsls	r6, r2, #1
   32b62:	60a6      	str	r6, [r4, #8]
   32b64:	e7cf      	b.n	32b06 <cbor_value_enter_container+0xe4>
                recursed->offset = it->offset;
   32b66:	686b      	ldr	r3, [r5, #4]
   32b68:	6063      	str	r3, [r4, #4]
                return CborErrorDataTooLarge;
   32b6a:	f44f 6080 	mov.w	r0, #1024	; 0x400
   32b6e:	e77d      	b.n	32a6c <cbor_value_enter_container+0x4a>

00032b70 <cbor_value_leave_container>:
{
   32b70:	b508      	push	{r3, lr}
   32b72:	7b83      	ldrb	r3, [r0, #14]
   32b74:	2b80      	cmp	r3, #128	; 0x80
   32b76:	d00d      	beq.n	32b94 <cbor_value_leave_container+0x24>
   32b78:	2ba0      	cmp	r3, #160	; 0xa0
   32b7a:	d009      	beq.n	32b90 <cbor_value_leave_container+0x20>
   32b7c:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   32b7e:	b15b      	cbz	r3, 32b98 <cbor_value_leave_container+0x28>
    assert(recursed->type == CborInvalidType);
   32b80:	7b8b      	ldrb	r3, [r1, #14]
   32b82:	2bff      	cmp	r3, #255	; 0xff
   32b84:	d112      	bne.n	32bac <cbor_value_leave_container+0x3c>
    it->offset = recursed->offset;
   32b86:	684b      	ldr	r3, [r1, #4]
   32b88:	6043      	str	r3, [r0, #4]
    return preparse_next_value(it);
   32b8a:	f7ff fd17 	bl	325bc <preparse_next_value>
}
   32b8e:	bd08      	pop	{r3, pc}
   32b90:	2301      	movs	r3, #1
   32b92:	e7f4      	b.n	32b7e <cbor_value_leave_container+0xe>
   32b94:	2301      	movs	r3, #1
   32b96:	e7f2      	b.n	32b7e <cbor_value_leave_container+0xe>
    assert(cbor_value_is_container(it));
   32b98:	f7e1 fdac 	bl	146f4 <hal_debugger_connected>
   32b9c:	b100      	cbz	r0, 32ba0 <cbor_value_leave_container+0x30>
   32b9e:	be01      	bkpt	0x0001
   32ba0:	2300      	movs	r3, #0
   32ba2:	461a      	mov	r2, r3
   32ba4:	4619      	mov	r1, r3
   32ba6:	4618      	mov	r0, r3
   32ba8:	f7e6 f8c2 	bl	18d30 <__assert_func>
    assert(recursed->type == CborInvalidType);
   32bac:	f7e1 fda2 	bl	146f4 <hal_debugger_connected>
   32bb0:	b100      	cbz	r0, 32bb4 <cbor_value_leave_container+0x44>
   32bb2:	be01      	bkpt	0x0001
   32bb4:	2300      	movs	r3, #0
   32bb6:	461a      	mov	r2, r3
   32bb8:	4619      	mov	r1, r3
   32bba:	4618      	mov	r0, r3
   32bbc:	f7e6 f8b8 	bl	18d30 <__assert_func>

00032bc0 <_cbor_value_copy_string>:
 * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
   32bc0:	b510      	push	{r4, lr}
   32bc2:	b084      	sub	sp, #16
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   32bc4:	460c      	mov	r4, r1
   32bc6:	b179      	cbz	r1, 32be8 <_cbor_value_copy_string+0x28>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
   32bc8:	6801      	ldr	r1, [r0, #0]
   32bca:	6809      	ldr	r1, [r1, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   32bcc:	6949      	ldr	r1, [r1, #20]
   32bce:	9101      	str	r1, [sp, #4]
   32bd0:	9300      	str	r3, [sp, #0]
   32bd2:	f10d 030f 	add.w	r3, sp, #15
   32bd6:	4621      	mov	r1, r4
   32bd8:	f7ff fd72 	bl	326c0 <iterate_string_chunks>
    return err ? err :
   32bdc:	b910      	cbnz	r0, 32be4 <_cbor_value_copy_string+0x24>
                 copied_all ? CborNoError : CborErrorOutOfMemory;
   32bde:	f89d 300f 	ldrb.w	r3, [sp, #15]
    return err ? err :
   32be2:	b11b      	cbz	r3, 32bec <_cbor_value_copy_string+0x2c>
}
   32be4:	b004      	add	sp, #16
   32be6:	bd10      	pop	{r4, pc}
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   32be8:	4902      	ldr	r1, [pc, #8]	; (32bf4 <_cbor_value_copy_string+0x34>)
   32bea:	e7f0      	b.n	32bce <_cbor_value_copy_string+0xe>
    return err ? err :
   32bec:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   32bf0:	e7f8      	b.n	32be4 <_cbor_value_copy_string+0x24>
   32bf2:	bf00      	nop
   32bf4:	0003247d 	.word	0x0003247d

00032bf8 <hexDump>:
 *      by a colon (":"), enclosed in curly braces ("{" and "}").
 *      If the map length is indeterminate, an underscore ("_") appears immediately after the opening brace.
 */

static int hexDump(FILE *out, const uint8_t *buffer, size_t n)
{
   32bf8:	b570      	push	{r4, r5, r6, lr}
   32bfa:	4606      	mov	r6, r0
   32bfc:	460c      	mov	r4, r1
   32bfe:	4615      	mov	r5, r2
    while (n--) {
   32c00:	462b      	mov	r3, r5
   32c02:	3d01      	subs	r5, #1
   32c04:	b143      	cbz	r3, 32c18 <hexDump+0x20>
        int r = fprintf(out, "%02" PRIx8, *buffer++);
   32c06:	f814 2b01 	ldrb.w	r2, [r4], #1
   32c0a:	4904      	ldr	r1, [pc, #16]	; (32c1c <hexDump+0x24>)
   32c0c:	4630      	mov	r0, r6
   32c0e:	f7e8 fbe3 	bl	1b3d8 <fprintf>
        if (r < 0)
   32c12:	2800      	cmp	r0, #0
   32c14:	daf4      	bge.n	32c00 <hexDump+0x8>
   32c16:	e000      	b.n	32c1a <hexDump+0x22>
            return r;
    }
    return 0;   /* should be n * 2, but we don't have the original n anymore */
   32c18:	2000      	movs	r0, #0
}
   32c1a:	bd70      	pop	{r4, r5, r6, pc}
   32c1c:	00039ae0 	.word	0x00039ae0

00032c20 <utf8EscapedDump>:

/* This function decodes buffer as UTF-8 and prints as escaped UTF-16.
 * On UTF-8 decoding error, it returns CborErrorInvalidUtf8TextString */
static int utf8EscapedDump(FILE *out, const char *buffer, size_t n)
{
   32c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32c22:	4606      	mov	r6, r0
    uint32_t uc;
    while (n--) {
   32c24:	e07e      	b.n	32d24 <utf8EscapedDump+0x104>
        uc = (uint8_t)*buffer++;
        if (uc < 0x80) {
            /* single-byte UTF-8 */
            if (uc < 0x7f && uc >= 0x20 && uc != '\\' && uc != '"') {
                if (fprintf(out, "%c", (char)uc) < 0)
   32c26:	4985      	ldr	r1, [pc, #532]	; (32e3c <utf8EscapedDump+0x21c>)
   32c28:	4630      	mov	r0, r6
   32c2a:	f7e8 fbd5 	bl	1b3d8 <fprintf>
   32c2e:	2800      	cmp	r0, #0
   32c30:	f2c0 80e0 	blt.w	32df4 <utf8EscapedDump+0x1d4>
        uc = (uint8_t)*buffer++;
   32c34:	4629      	mov	r1, r5
   32c36:	e074      	b.n	32d22 <utf8EscapedDump+0x102>
                continue;
            }

            /* print as an escape sequence */
            char escaped = (char)uc;
            switch (uc) {
   32c38:	2a5c      	cmp	r2, #92	; 0x5c
   32c3a:	d169      	bne.n	32d10 <utf8EscapedDump+0xf0>
                escaped = 't';
                break;
            default:
                goto print_utf16;
            }
            if (fprintf(out, "\\%c", escaped) < 0)
   32c3c:	4980      	ldr	r1, [pc, #512]	; (32e40 <utf8EscapedDump+0x220>)
   32c3e:	4630      	mov	r0, r6
   32c40:	f7e8 fbca 	bl	1b3d8 <fprintf>
   32c44:	2800      	cmp	r0, #0
   32c46:	f2c0 80d7 	blt.w	32df8 <utf8EscapedDump+0x1d8>
        uc = (uint8_t)*buffer++;
   32c4a:	4629      	mov	r1, r5
   32c4c:	e069      	b.n	32d22 <utf8EscapedDump+0x102>
                escaped = 'f';
   32c4e:	2266      	movs	r2, #102	; 0x66
                break;
   32c50:	e7f4      	b.n	32c3c <utf8EscapedDump+0x1c>
                escaped = 'n';
   32c52:	226e      	movs	r2, #110	; 0x6e
                break;
   32c54:	e7f2      	b.n	32c3c <utf8EscapedDump+0x1c>
                escaped = 'r';
   32c56:	2272      	movs	r2, #114	; 0x72
                break;
   32c58:	e7f0      	b.n	32c3c <utf8EscapedDump+0x1c>
                escaped = 't';
   32c5a:	2274      	movs	r2, #116	; 0x74
                break;
   32c5c:	e7ee      	b.n	32c3c <utf8EscapedDump+0x1c>
                escaped = 'b';
   32c5e:	2262      	movs	r2, #98	; 0x62
   32c60:	e7ec      	b.n	32c3c <utf8EscapedDump+0x1c>
        }

        /* multi-byte UTF-8, decode it */
        unsigned charsNeeded;
        uint32_t min_uc;
        if (unlikely(uc <= 0xC1))
   32c62:	2ac1      	cmp	r2, #193	; 0xc1
   32c64:	f240 80ca 	bls.w	32dfc <utf8EscapedDump+0x1dc>
            return CborErrorInvalidUtf8TextString;
        if (uc < 0xE0) {
   32c68:	2adf      	cmp	r2, #223	; 0xdf
   32c6a:	d830      	bhi.n	32cce <utf8EscapedDump+0xae>
            /* two-byte UTF-8 */
            charsNeeded = 2;
            min_uc = 0x80;
            uc &= 0x1f;
   32c6c:	f002 021f 	and.w	r2, r2, #31
            min_uc = 0x80;
   32c70:	f04f 0c80 	mov.w	ip, #128	; 0x80
            charsNeeded = 2;
   32c74:	2302      	movs	r3, #2
            uc &= 0x07;
        } else {
            return CborErrorInvalidUtf8TextString;
        }

        if (n < charsNeeded - 1)
   32c76:	1e58      	subs	r0, r3, #1
   32c78:	42b8      	cmp	r0, r7
   32c7a:	f200 80c5 	bhi.w	32e08 <utf8EscapedDump+0x1e8>
            return CborErrorInvalidUtf8TextString;

        /* first continuation character */
        uint8_t b = (uint8_t)*buffer++;
   32c7e:	3102      	adds	r1, #2
   32c80:	782c      	ldrb	r4, [r5, #0]
        if ((b & 0xc0) != 0x80)
   32c82:	f004 00c0 	and.w	r0, r4, #192	; 0xc0
   32c86:	2880      	cmp	r0, #128	; 0x80
   32c88:	f040 80c1 	bne.w	32e0e <utf8EscapedDump+0x1ee>
            return CborErrorInvalidUtf8TextString;
        uc <<= 6;
        uc |= b & 0x3f;
   32c8c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   32c90:	ea44 1482 	orr.w	r4, r4, r2, lsl #6

        if (charsNeeded > 2) {
   32c94:	2b02      	cmp	r3, #2
   32c96:	d92b      	bls.n	32cf0 <utf8EscapedDump+0xd0>
            /* second continuation character */
            b = (uint8_t)*buffer++;
   32c98:	1ca8      	adds	r0, r5, #2
   32c9a:	786a      	ldrb	r2, [r5, #1]
            if ((b & 0xc0) != 0x80)
   32c9c:	f002 01c0 	and.w	r1, r2, #192	; 0xc0
   32ca0:	2980      	cmp	r1, #128	; 0x80
   32ca2:	f040 80b7 	bne.w	32e14 <utf8EscapedDump+0x1f4>
                return CborErrorInvalidUtf8TextString;
            uc <<= 6;
            uc |= b & 0x3f;
   32ca6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   32caa:	ea42 1484 	orr.w	r4, r2, r4, lsl #6

            if (charsNeeded > 3) {
   32cae:	2b03      	cmp	r3, #3
   32cb0:	f240 808c 	bls.w	32dcc <utf8EscapedDump+0x1ac>
                /* third continuation character */
                b = (uint8_t)*buffer++;
   32cb4:	1ce8      	adds	r0, r5, #3
   32cb6:	78aa      	ldrb	r2, [r5, #2]
                if ((b & 0xc0) != 0x80)
   32cb8:	f002 01c0 	and.w	r1, r2, #192	; 0xc0
   32cbc:	2980      	cmp	r1, #128	; 0x80
   32cbe:	f040 80ac 	bne.w	32e1a <utf8EscapedDump+0x1fa>
                    return CborErrorInvalidUtf8TextString;
                uc <<= 6;
                uc |= b & 0x3f;
   32cc2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   32cc6:	ea42 1484 	orr.w	r4, r2, r4, lsl #6
                b = (uint8_t)*buffer++;
   32cca:	4605      	mov	r5, r0
   32ccc:	e011      	b.n	32cf2 <utf8EscapedDump+0xd2>
        } else if (uc < 0xF0) {
   32cce:	2aef      	cmp	r2, #239	; 0xef
   32cd0:	d805      	bhi.n	32cde <utf8EscapedDump+0xbe>
            uc &= 0x0f;
   32cd2:	f002 020f 	and.w	r2, r2, #15
            min_uc = 0x800;
   32cd6:	f44f 6c00 	mov.w	ip, #2048	; 0x800
            charsNeeded = 3;
   32cda:	2303      	movs	r3, #3
   32cdc:	e7cb      	b.n	32c76 <utf8EscapedDump+0x56>
        } else if (uc < 0xF5) {
   32cde:	2af4      	cmp	r2, #244	; 0xf4
   32ce0:	f200 808f 	bhi.w	32e02 <utf8EscapedDump+0x1e2>
            uc &= 0x07;
   32ce4:	f002 0207 	and.w	r2, r2, #7
            min_uc = 0x10000;
   32ce8:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
            charsNeeded = 4;
   32cec:	2304      	movs	r3, #4
   32cee:	e7c2      	b.n	32c76 <utf8EscapedDump+0x56>
        uint8_t b = (uint8_t)*buffer++;
   32cf0:	460d      	mov	r5, r1
            }
        }

        /* overlong sequence? surrogate pair? out or range? */
        if (uc < min_uc || uc - 0xd800U < 2048U || uc > 0x10ffff)
   32cf2:	4564      	cmp	r4, ip
   32cf4:	f0c0 8094 	bcc.w	32e20 <utf8EscapedDump+0x200>
   32cf8:	f5a4 4258 	sub.w	r2, r4, #55296	; 0xd800
   32cfc:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   32d00:	f0c0 8091 	bcc.w	32e26 <utf8EscapedDump+0x206>
   32d04:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
   32d08:	f080 8090 	bcs.w	32e2c <utf8EscapedDump+0x20c>
            return CborErrorInvalidUtf8TextString;

        /* now print the sequence */
        if (charsNeeded > 3) {
   32d0c:	2b03      	cmp	r3, #3
   32d0e:	d85f      	bhi.n	32dd0 <utf8EscapedDump+0x1b0>
                        (uc % 0x0400) + 0xdc00) < 0)
                return CborErrorIO;
        } else {
print_utf16:
            /* no surrogate pair needed */
            if (fprintf(out, "\\u%04" PRIX32, uc) < 0)
   32d10:	4622      	mov	r2, r4
   32d12:	494c      	ldr	r1, [pc, #304]	; (32e44 <utf8EscapedDump+0x224>)
   32d14:	4630      	mov	r0, r6
   32d16:	f7e8 fb5f 	bl	1b3d8 <fprintf>
   32d1a:	2800      	cmp	r0, #0
   32d1c:	f2c0 808b 	blt.w	32e36 <utf8EscapedDump+0x216>
   32d20:	4629      	mov	r1, r5
   32d22:	463a      	mov	r2, r7
    while (n--) {
   32d24:	1e57      	subs	r7, r2, #1
   32d26:	2a00      	cmp	r2, #0
   32d28:	d062      	beq.n	32df0 <utf8EscapedDump+0x1d0>
        uc = (uint8_t)*buffer++;
   32d2a:	460d      	mov	r5, r1
   32d2c:	f815 2b01 	ldrb.w	r2, [r5], #1
   32d30:	4614      	mov	r4, r2
        if (uc < 0x80) {
   32d32:	2a7f      	cmp	r2, #127	; 0x7f
   32d34:	d895      	bhi.n	32c62 <utf8EscapedDump+0x42>
            if (uc < 0x7f && uc >= 0x20 && uc != '\\' && uc != '"') {
   32d36:	f1a2 0320 	sub.w	r3, r2, #32
   32d3a:	2b5e      	cmp	r3, #94	; 0x5e
   32d3c:	d804      	bhi.n	32d48 <utf8EscapedDump+0x128>
   32d3e:	2a5c      	cmp	r2, #92	; 0x5c
   32d40:	d002      	beq.n	32d48 <utf8EscapedDump+0x128>
   32d42:	2a22      	cmp	r2, #34	; 0x22
   32d44:	f47f af6f 	bne.w	32c26 <utf8EscapedDump+0x6>
            switch (uc) {
   32d48:	2a22      	cmp	r2, #34	; 0x22
   32d4a:	f63f af75 	bhi.w	32c38 <utf8EscapedDump+0x18>
   32d4e:	2a08      	cmp	r2, #8
   32d50:	d3de      	bcc.n	32d10 <utf8EscapedDump+0xf0>
   32d52:	f1a2 0308 	sub.w	r3, r2, #8
   32d56:	2b1a      	cmp	r3, #26
   32d58:	d8da      	bhi.n	32d10 <utf8EscapedDump+0xf0>
   32d5a:	a101      	add	r1, pc, #4	; (adr r1, 32d60 <utf8EscapedDump+0x140>)
   32d5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   32d60:	00032c5f 	.word	0x00032c5f
   32d64:	00032c5b 	.word	0x00032c5b
   32d68:	00032c53 	.word	0x00032c53
   32d6c:	00032d11 	.word	0x00032d11
   32d70:	00032c4f 	.word	0x00032c4f
   32d74:	00032c57 	.word	0x00032c57
   32d78:	00032d11 	.word	0x00032d11
   32d7c:	00032d11 	.word	0x00032d11
   32d80:	00032d11 	.word	0x00032d11
   32d84:	00032d11 	.word	0x00032d11
   32d88:	00032d11 	.word	0x00032d11
   32d8c:	00032d11 	.word	0x00032d11
   32d90:	00032d11 	.word	0x00032d11
   32d94:	00032d11 	.word	0x00032d11
   32d98:	00032d11 	.word	0x00032d11
   32d9c:	00032d11 	.word	0x00032d11
   32da0:	00032d11 	.word	0x00032d11
   32da4:	00032d11 	.word	0x00032d11
   32da8:	00032d11 	.word	0x00032d11
   32dac:	00032d11 	.word	0x00032d11
   32db0:	00032d11 	.word	0x00032d11
   32db4:	00032d11 	.word	0x00032d11
   32db8:	00032d11 	.word	0x00032d11
   32dbc:	00032d11 	.word	0x00032d11
   32dc0:	00032d11 	.word	0x00032d11
   32dc4:	00032d11 	.word	0x00032d11
   32dc8:	00032c3d 	.word	0x00032c3d
            b = (uint8_t)*buffer++;
   32dcc:	4605      	mov	r5, r0
   32dce:	e790      	b.n	32cf2 <utf8EscapedDump+0xd2>
                        (uc % 0x0400) + 0xdc00) < 0)
   32dd0:	f3c4 0309 	ubfx	r3, r4, #0, #10
            if (fprintf(out, "\\u%04" PRIX32 "\\u%04" PRIX32,
   32dd4:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
   32dd8:	f24d 72c0 	movw	r2, #55232	; 0xd7c0
   32ddc:	eb02 2294 	add.w	r2, r2, r4, lsr #10
   32de0:	4919      	ldr	r1, [pc, #100]	; (32e48 <utf8EscapedDump+0x228>)
   32de2:	4630      	mov	r0, r6
   32de4:	f7e8 faf8 	bl	1b3d8 <fprintf>
   32de8:	2800      	cmp	r0, #0
   32dea:	db22      	blt.n	32e32 <utf8EscapedDump+0x212>
   32dec:	4629      	mov	r1, r5
   32dee:	e798      	b.n	32d22 <utf8EscapedDump+0x102>
                return CborErrorIO;
        }
    }
    return CborNoError;
   32df0:	2000      	movs	r0, #0
   32df2:	e002      	b.n	32dfa <utf8EscapedDump+0x1da>
                    return CborErrorIO;
   32df4:	2004      	movs	r0, #4
   32df6:	e000      	b.n	32dfa <utf8EscapedDump+0x1da>
                return CborErrorIO;
   32df8:	2004      	movs	r0, #4
}
   32dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return CborErrorInvalidUtf8TextString;
   32dfc:	f44f 7001 	mov.w	r0, #516	; 0x204
   32e00:	e7fb      	b.n	32dfa <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   32e02:	f44f 7001 	mov.w	r0, #516	; 0x204
   32e06:	e7f8      	b.n	32dfa <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   32e08:	f44f 7001 	mov.w	r0, #516	; 0x204
   32e0c:	e7f5      	b.n	32dfa <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   32e0e:	f44f 7001 	mov.w	r0, #516	; 0x204
   32e12:	e7f2      	b.n	32dfa <utf8EscapedDump+0x1da>
                return CborErrorInvalidUtf8TextString;
   32e14:	f44f 7001 	mov.w	r0, #516	; 0x204
   32e18:	e7ef      	b.n	32dfa <utf8EscapedDump+0x1da>
                    return CborErrorInvalidUtf8TextString;
   32e1a:	f44f 7001 	mov.w	r0, #516	; 0x204
   32e1e:	e7ec      	b.n	32dfa <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   32e20:	f44f 7001 	mov.w	r0, #516	; 0x204
   32e24:	e7e9      	b.n	32dfa <utf8EscapedDump+0x1da>
   32e26:	f44f 7001 	mov.w	r0, #516	; 0x204
   32e2a:	e7e6      	b.n	32dfa <utf8EscapedDump+0x1da>
   32e2c:	f44f 7001 	mov.w	r0, #516	; 0x204
   32e30:	e7e3      	b.n	32dfa <utf8EscapedDump+0x1da>
                return CborErrorIO;
   32e32:	2004      	movs	r0, #4
   32e34:	e7e1      	b.n	32dfa <utf8EscapedDump+0x1da>
                return CborErrorIO;
   32e36:	2004      	movs	r0, #4
   32e38:	e7df      	b.n	32dfa <utf8EscapedDump+0x1da>
   32e3a:	bf00      	nop
   32e3c:	00039ae8 	.word	0x00039ae8
   32e40:	00039aec 	.word	0x00039aec
   32e44:	00039b00 	.word	0x00039b00
   32e48:	00039af0 	.word	0x00039af0

00032e4c <value_to_pretty>:
    }
    return CborNoError;
}

static CborError value_to_pretty(FILE *out, CborValue *it)
{
   32e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   32e4e:	b087      	sub	sp, #28
   32e50:	4607      	mov	r7, r0
   32e52:	460d      	mov	r5, r1
{ return (CborType)value->type; }
   32e54:	7b8c      	ldrb	r4, [r1, #14]
    CborError err;
    CborType type = cbor_value_get_type(it);
    switch (type) {
   32e56:	2cc0      	cmp	r4, #192	; 0xc0
   32e58:	f000 8138 	beq.w	330cc <value_to_pretty+0x280>
   32e5c:	d849      	bhi.n	32ef2 <value_to_pretty+0xa6>
   32e5e:	2c60      	cmp	r4, #96	; 0x60
   32e60:	f000 80f5 	beq.w	3304e <value_to_pretty+0x202>
   32e64:	d920      	bls.n	32ea8 <value_to_pretty+0x5c>
   32e66:	2c80      	cmp	r4, #128	; 0x80
   32e68:	d002      	beq.n	32e70 <value_to_pretty+0x24>
   32e6a:	2ca0      	cmp	r4, #160	; 0xa0
   32e6c:	f040 81c2 	bne.w	331f4 <value_to_pretty+0x3a8>
    case CborArrayType:
    case CborMapType: {
        /* recursive type */
        CborValue recursed;

        if (fprintf(out, type == CborArrayType ? "[" : "{") < 0)
   32e70:	2c80      	cmp	r4, #128	; 0x80
   32e72:	d062      	beq.n	32f3a <value_to_pretty+0xee>
   32e74:	49ac      	ldr	r1, [pc, #688]	; (33128 <value_to_pretty+0x2dc>)
   32e76:	4638      	mov	r0, r7
   32e78:	f7e8 faae 	bl	1b3d8 <fprintf>
   32e7c:	2800      	cmp	r0, #0
   32e7e:	db7d      	blt.n	32f7c <value_to_pretty+0x130>
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   32e80:	7beb      	ldrb	r3, [r5, #15]
            return CborErrorIO;
        if (!cbor_value_is_length_known(it)) {
   32e82:	f013 0f04 	tst.w	r3, #4
   32e86:	d005      	beq.n	32e94 <value_to_pretty+0x48>
            if (fprintf(out, "_ ") < 0)
   32e88:	49a8      	ldr	r1, [pc, #672]	; (3312c <value_to_pretty+0x2e0>)
   32e8a:	4638      	mov	r0, r7
   32e8c:	f7e8 faa4 	bl	1b3d8 <fprintf>
   32e90:	2800      	cmp	r0, #0
   32e92:	db75      	blt.n	32f80 <value_to_pretty+0x134>
                return CborErrorIO;
        }

        err = cbor_value_enter_container(it, &recursed);
   32e94:	a902      	add	r1, sp, #8
   32e96:	4628      	mov	r0, r5
   32e98:	f7ff fdc3 	bl	32a22 <cbor_value_enter_container>
        if (err) {
   32e9c:	4606      	mov	r6, r0
   32e9e:	2800      	cmp	r0, #0
   32ea0:	d04d      	beq.n	32f3e <value_to_pretty+0xf2>
            it->offset = recursed.offset;
   32ea2:	9b03      	ldr	r3, [sp, #12]
   32ea4:	606b      	str	r3, [r5, #4]
            return err;       /* parse error */
   32ea6:	e181      	b.n	331ac <value_to_pretty+0x360>
    switch (type) {
   32ea8:	2c00      	cmp	r4, #0
   32eaa:	d06b      	beq.n	32f84 <value_to_pretty+0x138>
   32eac:	2c40      	cmp	r4, #64	; 0x40
   32eae:	f040 81a1 	bne.w	331f4 <value_to_pretty+0x3a8>
        }
        break;
    }

    case CborByteStringType:{
        size_t n = 0;
   32eb2:	2300      	movs	r3, #0
   32eb4:	9301      	str	r3, [sp, #4]
{ return value->type == CborByteStringType; }
   32eb6:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_byte_string(value));
   32eb8:	2b40      	cmp	r3, #64	; 0x40
   32eba:	f040 80ab 	bne.w	33014 <value_to_pretty+0x1c8>
    return _cbor_value_dup_string(value, (void **)buffer, buflen, next);
   32ebe:	460b      	mov	r3, r1
   32ec0:	aa01      	add	r2, sp, #4
   32ec2:	a902      	add	r1, sp, #8
   32ec4:	4628      	mov	r0, r5
   32ec6:	f000 f9e5 	bl	33294 <_cbor_value_dup_string>
        uint8_t *buffer;
        err = cbor_value_dup_byte_string(it, &buffer, &n, it);
        if (err)
   32eca:	4606      	mov	r6, r0
   32ecc:	2800      	cmp	r0, #0
   32ece:	f040 816d 	bne.w	331ac <value_to_pretty+0x360>
            return err;

        bool failed = fprintf(out, "h'") < 0 || hexDump(out, buffer, n) < 0 || fprintf(out, "'") < 0;
   32ed2:	4997      	ldr	r1, [pc, #604]	; (33130 <value_to_pretty+0x2e4>)
   32ed4:	4638      	mov	r0, r7
   32ed6:	f7e8 fa7f 	bl	1b3d8 <fprintf>
   32eda:	2800      	cmp	r0, #0
   32edc:	f280 80a4 	bge.w	33028 <value_to_pretty+0x1dc>
   32ee0:	2401      	movs	r4, #1
        free(buffer);
   32ee2:	9802      	ldr	r0, [sp, #8]
   32ee4:	f001 f970 	bl	341c8 <free>
        return failed ? CborErrorIO : CborNoError;
   32ee8:	2c00      	cmp	r4, #0
   32eea:	f000 815f 	beq.w	331ac <value_to_pretty+0x360>
   32eee:	2604      	movs	r6, #4
   32ef0:	e15c      	b.n	331ac <value_to_pretty+0x360>
    switch (type) {
   32ef2:	2cf7      	cmp	r4, #247	; 0xf7
   32ef4:	f200 817e 	bhi.w	331f4 <value_to_pretty+0x3a8>
   32ef8:	2ce0      	cmp	r4, #224	; 0xe0
   32efa:	f0c0 817b 	bcc.w	331f4 <value_to_pretty+0x3a8>
   32efe:	3ce0      	subs	r4, #224	; 0xe0
   32f00:	2c17      	cmp	r4, #23
   32f02:	f200 8177 	bhi.w	331f4 <value_to_pretty+0x3a8>
   32f06:	e8df f014 	tbh	[pc, r4, lsl #1]
   32f0a:	0131      	.short	0x0131
   32f0c:	01750175 	.word	0x01750175
   32f10:	01750175 	.word	0x01750175
   32f14:	01750175 	.word	0x01750175
   32f18:	01750175 	.word	0x01750175
   32f1c:	01750175 	.word	0x01750175
   32f20:	01750175 	.word	0x01750175
   32f24:	01750175 	.word	0x01750175
   32f28:	01750175 	.word	0x01750175
   32f2c:	01750175 	.word	0x01750175
   32f30:	01750175 	.word	0x01750175
   32f34:	0147015c 	.word	0x0147015c
   32f38:	0154      	.short	0x0154
        if (fprintf(out, type == CborArrayType ? "[" : "{") < 0)
   32f3a:	497e      	ldr	r1, [pc, #504]	; (33134 <value_to_pretty+0x2e8>)
   32f3c:	e79b      	b.n	32e76 <value_to_pretty+0x2a>
        err = container_to_pretty(out, &recursed, type);
   32f3e:	4622      	mov	r2, r4
   32f40:	a902      	add	r1, sp, #8
   32f42:	4638      	mov	r0, r7
   32f44:	f000 f970 	bl	33228 <container_to_pretty>
        if (err) {
   32f48:	4606      	mov	r6, r0
   32f4a:	b110      	cbz	r0, 32f52 <value_to_pretty+0x106>
            it->offset = recursed.offset;
   32f4c:	9b03      	ldr	r3, [sp, #12]
   32f4e:	606b      	str	r3, [r5, #4]
            return err;       /* parse error */
   32f50:	e12c      	b.n	331ac <value_to_pretty+0x360>
        err = cbor_value_leave_container(it, &recursed);
   32f52:	a902      	add	r1, sp, #8
   32f54:	4628      	mov	r0, r5
   32f56:	f7ff fe0b 	bl	32b70 <cbor_value_leave_container>
        if (err)
   32f5a:	4606      	mov	r6, r0
   32f5c:	2800      	cmp	r0, #0
   32f5e:	f040 8125 	bne.w	331ac <value_to_pretty+0x360>
        if (fprintf(out, type == CborArrayType ? "]" : "}") < 0)
   32f62:	2c80      	cmp	r4, #128	; 0x80
   32f64:	d008      	beq.n	32f78 <value_to_pretty+0x12c>
   32f66:	4974      	ldr	r1, [pc, #464]	; (33138 <value_to_pretty+0x2ec>)
   32f68:	4638      	mov	r0, r7
   32f6a:	f7e8 fa35 	bl	1b3d8 <fprintf>
   32f6e:	2800      	cmp	r0, #0
   32f70:	f280 811c 	bge.w	331ac <value_to_pretty+0x360>
            return CborErrorIO;
   32f74:	2604      	movs	r6, #4
   32f76:	e119      	b.n	331ac <value_to_pretty+0x360>
        if (fprintf(out, type == CborArrayType ? "]" : "}") < 0)
   32f78:	4970      	ldr	r1, [pc, #448]	; (3313c <value_to_pretty+0x2f0>)
   32f7a:	e7f5      	b.n	32f68 <value_to_pretty+0x11c>
            return CborErrorIO;
   32f7c:	2604      	movs	r6, #4
   32f7e:	e115      	b.n	331ac <value_to_pretty+0x360>
                return CborErrorIO;
   32f80:	2604      	movs	r6, #4
   32f82:	e113      	b.n	331ac <value_to_pretty+0x360>
{ return value->type == CborIntegerType; }
   32f84:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_integer(value));
   32f86:	b96b      	cbnz	r3, 32fa4 <value_to_pretty+0x158>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   32f88:	7bcb      	ldrb	r3, [r1, #15]
                _cbor_value_decode_int64_internal(value) : value->extra;
   32f8a:	f013 0f01 	tst.w	r3, #1
   32f8e:	d113      	bne.n	32fb8 <value_to_pretty+0x16c>
   32f90:	898a      	ldrh	r2, [r1, #12]
   32f92:	2300      	movs	r3, #0
{ return value->type == CborIntegerType; }
   32f94:	7ba9      	ldrb	r1, [r5, #14]
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   32f96:	b9a9      	cbnz	r1, 32fc4 <value_to_pretty+0x178>
   32f98:	7be9      	ldrb	r1, [r5, #15]
   32f9a:	f011 0f02 	tst.w	r1, #2
   32f9e:	d027      	beq.n	32ff0 <value_to_pretty+0x1a4>
   32fa0:	2100      	movs	r1, #0
   32fa2:	e010      	b.n	32fc6 <value_to_pretty+0x17a>
    assert(cbor_value_is_integer(value));
   32fa4:	f7e1 fba6 	bl	146f4 <hal_debugger_connected>
   32fa8:	b100      	cbz	r0, 32fac <value_to_pretty+0x160>
   32faa:	be01      	bkpt	0x0001
   32fac:	2300      	movs	r3, #0
   32fae:	461a      	mov	r2, r3
   32fb0:	4619      	mov	r1, r3
   32fb2:	4618      	mov	r0, r3
   32fb4:	f7e5 febc 	bl	18d30 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   32fb8:	4608      	mov	r0, r1
   32fba:	f7ff fcb5 	bl	32928 <_cbor_value_decode_int64_internal>
   32fbe:	4602      	mov	r2, r0
   32fc0:	460b      	mov	r3, r1
   32fc2:	e7e7      	b.n	32f94 <value_to_pretty+0x148>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   32fc4:	2100      	movs	r1, #0
        if (cbor_value_is_unsigned_integer(it)) {
   32fc6:	b9a9      	cbnz	r1, 32ff4 <value_to_pretty+0x1a8>
            if (++val) {                /* unsigned overflow may happen */
   32fc8:	1c50      	adds	r0, r2, #1
   32fca:	f143 0100 	adc.w	r1, r3, #0
   32fce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   32fd2:	bf08      	it	eq
   32fd4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   32fd8:	d014      	beq.n	33004 <value_to_pretty+0x1b8>
                if (fprintf(out, "-%" PRIu64, val) < 0)
   32fda:	4602      	mov	r2, r0
   32fdc:	460b      	mov	r3, r1
   32fde:	4958      	ldr	r1, [pc, #352]	; (33140 <value_to_pretty+0x2f4>)
   32fe0:	4638      	mov	r0, r7
   32fe2:	f7e8 f9f9 	bl	1b3d8 <fprintf>
   32fe6:	2800      	cmp	r0, #0
   32fe8:	f280 80dc 	bge.w	331a4 <value_to_pretty+0x358>
        break;

    case CborBooleanType: {
        bool val;
        cbor_value_get_boolean(it, &val);       /* can't fail */
        if (fprintf(out, val ? "true" : "false") < 0)
   32fec:	2604      	movs	r6, #4
   32fee:	e0dd      	b.n	331ac <value_to_pretty+0x360>
   32ff0:	2101      	movs	r1, #1
   32ff2:	e7e8      	b.n	32fc6 <value_to_pretty+0x17a>
            if (fprintf(out, "%" PRIu64, val) < 0)
   32ff4:	4953      	ldr	r1, [pc, #332]	; (33144 <value_to_pretty+0x2f8>)
   32ff6:	4638      	mov	r0, r7
   32ff8:	f7e8 f9ee 	bl	1b3d8 <fprintf>
   32ffc:	2800      	cmp	r0, #0
   32ffe:	f280 80d1 	bge.w	331a4 <value_to_pretty+0x358>
   33002:	e7f3      	b.n	32fec <value_to_pretty+0x1a0>
                if (fprintf(out, "-18446744073709551616") < 0)
   33004:	4950      	ldr	r1, [pc, #320]	; (33148 <value_to_pretty+0x2fc>)
   33006:	4638      	mov	r0, r7
   33008:	f7e8 f9e6 	bl	1b3d8 <fprintf>
   3300c:	2800      	cmp	r0, #0
   3300e:	f280 80c9 	bge.w	331a4 <value_to_pretty+0x358>
   33012:	e7eb      	b.n	32fec <value_to_pretty+0x1a0>
    assert(cbor_value_is_byte_string(value));
   33014:	f7e1 fb6e 	bl	146f4 <hal_debugger_connected>
   33018:	b100      	cbz	r0, 3301c <value_to_pretty+0x1d0>
   3301a:	be01      	bkpt	0x0001
   3301c:	2300      	movs	r3, #0
   3301e:	461a      	mov	r2, r3
   33020:	4619      	mov	r1, r3
   33022:	4618      	mov	r0, r3
   33024:	f7e5 fe84 	bl	18d30 <__assert_func>
        bool failed = fprintf(out, "h'") < 0 || hexDump(out, buffer, n) < 0 || fprintf(out, "'") < 0;
   33028:	9a01      	ldr	r2, [sp, #4]
   3302a:	9902      	ldr	r1, [sp, #8]
   3302c:	4638      	mov	r0, r7
   3302e:	f7ff fde3 	bl	32bf8 <hexDump>
   33032:	2800      	cmp	r0, #0
   33034:	da01      	bge.n	3303a <value_to_pretty+0x1ee>
   33036:	2401      	movs	r4, #1
   33038:	e753      	b.n	32ee2 <value_to_pretty+0x96>
   3303a:	4944      	ldr	r1, [pc, #272]	; (3314c <value_to_pretty+0x300>)
   3303c:	4638      	mov	r0, r7
   3303e:	f7e8 f9cb 	bl	1b3d8 <fprintf>
   33042:	2800      	cmp	r0, #0
   33044:	db01      	blt.n	3304a <value_to_pretty+0x1fe>
   33046:	2400      	movs	r4, #0
   33048:	e74b      	b.n	32ee2 <value_to_pretty+0x96>
   3304a:	2401      	movs	r4, #1
   3304c:	e749      	b.n	32ee2 <value_to_pretty+0x96>
        size_t n = 0;
   3304e:	2300      	movs	r3, #0
   33050:	9301      	str	r3, [sp, #4]
{ return value->type == CborTextStringType; }
   33052:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_text_string(value));
   33054:	2b60      	cmp	r3, #96	; 0x60
   33056:	d11c      	bne.n	33092 <value_to_pretty+0x246>
    return _cbor_value_dup_string(value, (void **)buffer, buflen, next);
   33058:	460b      	mov	r3, r1
   3305a:	aa01      	add	r2, sp, #4
   3305c:	a902      	add	r1, sp, #8
   3305e:	4628      	mov	r0, r5
   33060:	f000 f918 	bl	33294 <_cbor_value_dup_string>
        if (err)
   33064:	4606      	mov	r6, r0
   33066:	2800      	cmp	r0, #0
   33068:	f040 80a0 	bne.w	331ac <value_to_pretty+0x360>
        bool failed = fprintf(out, "\"") < 0
   3306c:	4938      	ldr	r1, [pc, #224]	; (33150 <value_to_pretty+0x304>)
   3306e:	4638      	mov	r0, r7
   33070:	f7e8 f9b2 	bl	1b3d8 <fprintf>
                      || fprintf(out, "\"") < 0;
   33074:	2800      	cmp	r0, #0
   33076:	da16      	bge.n	330a6 <value_to_pretty+0x25a>
   33078:	2301      	movs	r3, #1
        bool failed = fprintf(out, "\"") < 0
   3307a:	461c      	mov	r4, r3
        free(buffer);
   3307c:	9802      	ldr	r0, [sp, #8]
   3307e:	f001 f8a3 	bl	341c8 <free>
        return err != CborNoError ? err :
   33082:	2e00      	cmp	r6, #0
   33084:	f040 8092 	bne.w	331ac <value_to_pretty+0x360>
   33088:	2c00      	cmp	r4, #0
   3308a:	f000 808f 	beq.w	331ac <value_to_pretty+0x360>
   3308e:	2604      	movs	r6, #4
   33090:	e08c      	b.n	331ac <value_to_pretty+0x360>
    assert(cbor_value_is_text_string(value));
   33092:	f7e1 fb2f 	bl	146f4 <hal_debugger_connected>
   33096:	b100      	cbz	r0, 3309a <value_to_pretty+0x24e>
   33098:	be01      	bkpt	0x0001
   3309a:	2300      	movs	r3, #0
   3309c:	461a      	mov	r2, r3
   3309e:	4619      	mov	r1, r3
   330a0:	4618      	mov	r0, r3
   330a2:	f7e5 fe45 	bl	18d30 <__assert_func>
                      || (err = utf8EscapedDump(out, buffer, n)) != CborNoError
   330a6:	9a01      	ldr	r2, [sp, #4]
   330a8:	9902      	ldr	r1, [sp, #8]
   330aa:	4638      	mov	r0, r7
   330ac:	f7ff fdb8 	bl	32c20 <utf8EscapedDump>
   330b0:	4606      	mov	r6, r0
   330b2:	b108      	cbz	r0, 330b8 <value_to_pretty+0x26c>
                      || fprintf(out, "\"") < 0;
   330b4:	2301      	movs	r3, #1
   330b6:	e7e0      	b.n	3307a <value_to_pretty+0x22e>
   330b8:	4925      	ldr	r1, [pc, #148]	; (33150 <value_to_pretty+0x304>)
   330ba:	4638      	mov	r0, r7
   330bc:	f7e8 f98c 	bl	1b3d8 <fprintf>
   330c0:	2800      	cmp	r0, #0
   330c2:	db01      	blt.n	330c8 <value_to_pretty+0x27c>
   330c4:	2300      	movs	r3, #0
   330c6:	e7d8      	b.n	3307a <value_to_pretty+0x22e>
   330c8:	2301      	movs	r3, #1
   330ca:	e7d6      	b.n	3307a <value_to_pretty+0x22e>
{ return value->type == CborTagType; }
   330cc:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_tag(value));
   330ce:	2bc0      	cmp	r3, #192	; 0xc0
   330d0:	d120      	bne.n	33114 <value_to_pretty+0x2c8>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   330d2:	7bcb      	ldrb	r3, [r1, #15]
                _cbor_value_decode_int64_internal(value) : value->extra;
   330d4:	f013 0f01 	tst.w	r3, #1
   330d8:	d140      	bne.n	3315c <value_to_pretty+0x310>
   330da:	898a      	ldrh	r2, [r1, #12]
   330dc:	2300      	movs	r3, #0
        if (fprintf(out, "%" PRIu64 "(", tag) < 0)
   330de:	491d      	ldr	r1, [pc, #116]	; (33154 <value_to_pretty+0x308>)
   330e0:	4638      	mov	r0, r7
   330e2:	f7e8 f979 	bl	1b3d8 <fprintf>
   330e6:	2800      	cmp	r0, #0
   330e8:	db3e      	blt.n	33168 <value_to_pretty+0x31c>
        err = cbor_value_advance_fixed(it);
   330ea:	4628      	mov	r0, r5
   330ec:	f7ff fc75 	bl	329da <cbor_value_advance_fixed>
        if (err)
   330f0:	4606      	mov	r6, r0
   330f2:	2800      	cmp	r0, #0
   330f4:	d15a      	bne.n	331ac <value_to_pretty+0x360>
        err = value_to_pretty(out, it);
   330f6:	4629      	mov	r1, r5
   330f8:	4638      	mov	r0, r7
   330fa:	f7ff fea7 	bl	32e4c <value_to_pretty>
        if (err)
   330fe:	4606      	mov	r6, r0
   33100:	2800      	cmp	r0, #0
   33102:	d153      	bne.n	331ac <value_to_pretty+0x360>
        if (fprintf(out, ")") < 0)
   33104:	4914      	ldr	r1, [pc, #80]	; (33158 <value_to_pretty+0x30c>)
   33106:	4638      	mov	r0, r7
   33108:	f7e8 f966 	bl	1b3d8 <fprintf>
   3310c:	2800      	cmp	r0, #0
   3310e:	da4d      	bge.n	331ac <value_to_pretty+0x360>
            return CborErrorIO;
   33110:	2604      	movs	r6, #4
   33112:	e04b      	b.n	331ac <value_to_pretty+0x360>
    assert(cbor_value_is_tag(value));
   33114:	f7e1 faee 	bl	146f4 <hal_debugger_connected>
   33118:	b100      	cbz	r0, 3311c <value_to_pretty+0x2d0>
   3311a:	be01      	bkpt	0x0001
   3311c:	2300      	movs	r3, #0
   3311e:	461a      	mov	r2, r3
   33120:	4619      	mov	r1, r3
   33122:	4618      	mov	r0, r3
   33124:	f7e5 fe04 	bl	18d30 <__assert_func>
   33128:	00039b08 	.word	0x00039b08
   3312c:	00039b20 	.word	0x00039b20
   33130:	00039b4c 	.word	0x00039b4c
   33134:	00039568 	.word	0x00039568
   33138:	00039b0c 	.word	0x00039b0c
   3313c:	00036df0 	.word	0x00036df0
   33140:	00039b2c 	.word	0x00039b2c
   33144:	00039b24 	.word	0x00039b24
   33148:	00039b34 	.word	0x00039b34
   3314c:	00039b50 	.word	0x00039b50
   33150:	00039b54 	.word	0x00039b54
   33154:	00039b58 	.word	0x00039b58
   33158:	00039b60 	.word	0x00039b60
                _cbor_value_decode_int64_internal(value) : value->extra;
   3315c:	4608      	mov	r0, r1
   3315e:	f7ff fbe3 	bl	32928 <_cbor_value_decode_int64_internal>
   33162:	4602      	mov	r2, r0
   33164:	460b      	mov	r3, r1
   33166:	e7ba      	b.n	330de <value_to_pretty+0x292>
            return CborErrorIO;
   33168:	2604      	movs	r6, #4
   3316a:	e01f      	b.n	331ac <value_to_pretty+0x360>
{ return value->type == CborSimpleType; }
   3316c:	7bab      	ldrb	r3, [r5, #14]
    assert(cbor_value_is_simple_type(value));
   3316e:	2be0      	cmp	r3, #224	; 0xe0
   33170:	d108      	bne.n	33184 <value_to_pretty+0x338>
        if (fprintf(out, "simple(%" PRIu8 ")", simple_type) < 0)
   33172:	7b2a      	ldrb	r2, [r5, #12]
   33174:	4926      	ldr	r1, [pc, #152]	; (33210 <value_to_pretty+0x3c4>)
   33176:	4638      	mov	r0, r7
   33178:	f7e8 f92e 	bl	1b3d8 <fprintf>
   3317c:	2800      	cmp	r0, #0
   3317e:	da11      	bge.n	331a4 <value_to_pretty+0x358>
            return CborErrorIO;
   33180:	2604      	movs	r6, #4
   33182:	e013      	b.n	331ac <value_to_pretty+0x360>
   33184:	f7e1 fab6 	bl	146f4 <hal_debugger_connected>
   33188:	b100      	cbz	r0, 3318c <value_to_pretty+0x340>
   3318a:	be01      	bkpt	0x0001
   3318c:	2300      	movs	r3, #0
   3318e:	461a      	mov	r2, r3
   33190:	4619      	mov	r1, r3
   33192:	4618      	mov	r0, r3
   33194:	f7e5 fdcc 	bl	18d30 <__assert_func>
        if (fprintf(out, "null") < 0)
   33198:	491e      	ldr	r1, [pc, #120]	; (33214 <value_to_pretty+0x3c8>)
   3319a:	4638      	mov	r0, r7
   3319c:	f7e8 f91c 	bl	1b3d8 <fprintf>
   331a0:	2800      	cmp	r0, #0
   331a2:	db30      	blt.n	33206 <value_to_pretty+0x3ba>
        if (fprintf(out, "invalid") < 0)
            return CborErrorIO;
        return CborErrorUnknownType;
    }

    err = cbor_value_advance_fixed(it);
   331a4:	4628      	mov	r0, r5
   331a6:	f7ff fc18 	bl	329da <cbor_value_advance_fixed>
   331aa:	4606      	mov	r6, r0
    return err;
}
   331ac:	4630      	mov	r0, r6
   331ae:	b007      	add	sp, #28
   331b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (fprintf(out, "undefined") < 0)
   331b2:	4919      	ldr	r1, [pc, #100]	; (33218 <value_to_pretty+0x3cc>)
   331b4:	4638      	mov	r0, r7
   331b6:	f7e8 f90f 	bl	1b3d8 <fprintf>
   331ba:	2800      	cmp	r0, #0
   331bc:	daf2      	bge.n	331a4 <value_to_pretty+0x358>
            return CborErrorIO;
   331be:	2604      	movs	r6, #4
   331c0:	e7f4      	b.n	331ac <value_to_pretty+0x360>
{ return value->type == CborBooleanType; }
   331c2:	7bab      	ldrb	r3, [r5, #14]
    assert(cbor_value_is_boolean(value));
   331c4:	2bf5      	cmp	r3, #245	; 0xf5
   331c6:	d109      	bne.n	331dc <value_to_pretty+0x390>
    *result = !!value->extra;
   331c8:	89ab      	ldrh	r3, [r5, #12]
        if (fprintf(out, val ? "true" : "false") < 0)
   331ca:	b18b      	cbz	r3, 331f0 <value_to_pretty+0x3a4>
   331cc:	4913      	ldr	r1, [pc, #76]	; (3321c <value_to_pretty+0x3d0>)
   331ce:	4638      	mov	r0, r7
   331d0:	f7e8 f902 	bl	1b3d8 <fprintf>
   331d4:	2800      	cmp	r0, #0
   331d6:	dae5      	bge.n	331a4 <value_to_pretty+0x358>
            return CborErrorIO;
   331d8:	2604      	movs	r6, #4
   331da:	e7e7      	b.n	331ac <value_to_pretty+0x360>
    assert(cbor_value_is_boolean(value));
   331dc:	f7e1 fa8a 	bl	146f4 <hal_debugger_connected>
   331e0:	b100      	cbz	r0, 331e4 <value_to_pretty+0x398>
   331e2:	be01      	bkpt	0x0001
   331e4:	2300      	movs	r3, #0
   331e6:	461a      	mov	r2, r3
   331e8:	4619      	mov	r1, r3
   331ea:	4618      	mov	r0, r3
   331ec:	f7e5 fda0 	bl	18d30 <__assert_func>
        if (fprintf(out, val ? "true" : "false") < 0)
   331f0:	490b      	ldr	r1, [pc, #44]	; (33220 <value_to_pretty+0x3d4>)
   331f2:	e7ec      	b.n	331ce <value_to_pretty+0x382>
        if (fprintf(out, "invalid") < 0)
   331f4:	490b      	ldr	r1, [pc, #44]	; (33224 <value_to_pretty+0x3d8>)
   331f6:	4638      	mov	r0, r7
   331f8:	f7e8 f8ee 	bl	1b3d8 <fprintf>
   331fc:	2800      	cmp	r0, #0
   331fe:	db04      	blt.n	3320a <value_to_pretty+0x3be>
        return CborErrorUnknownType;
   33200:	f240 1603 	movw	r6, #259	; 0x103
   33204:	e7d2      	b.n	331ac <value_to_pretty+0x360>
            return CborErrorIO;
   33206:	2604      	movs	r6, #4
   33208:	e7d0      	b.n	331ac <value_to_pretty+0x360>
            return CborErrorIO;
   3320a:	2604      	movs	r6, #4
   3320c:	e7ce      	b.n	331ac <value_to_pretty+0x360>
   3320e:	bf00      	nop
   33210:	00039b64 	.word	0x00039b64
   33214:	00039b74 	.word	0x00039b74
   33218:	00039b7c 	.word	0x00039b7c
   3321c:	00039b18 	.word	0x00039b18
   33220:	00039b10 	.word	0x00039b10
   33224:	00039b88 	.word	0x00039b88

00033228 <container_to_pretty>:
{
   33228:	b570      	push	{r4, r5, r6, lr}
   3322a:	4604      	mov	r4, r0
   3322c:	460d      	mov	r5, r1
   3322e:	4616      	mov	r6, r2
    const char *comma = "";
   33230:	4a12      	ldr	r2, [pc, #72]	; (3327c <container_to_pretty+0x54>)
    while (!cbor_value_at_end(it)) {
   33232:	e000      	b.n	33236 <container_to_pretty+0xe>
{
   33234:	4a12      	ldr	r2, [pc, #72]	; (33280 <container_to_pretty+0x58>)
{ return it->remaining == 0; }
   33236:	68ab      	ldr	r3, [r5, #8]
    while (!cbor_value_at_end(it)) {
   33238:	b1e3      	cbz	r3, 33274 <container_to_pretty+0x4c>
        if (fprintf(out, "%s", comma) < 0)
   3323a:	4912      	ldr	r1, [pc, #72]	; (33284 <container_to_pretty+0x5c>)
   3323c:	4620      	mov	r0, r4
   3323e:	f7e8 f8cb 	bl	1b3d8 <fprintf>
   33242:	2800      	cmp	r0, #0
   33244:	db15      	blt.n	33272 <container_to_pretty+0x4a>
        CborError err = value_to_pretty(out, it);
   33246:	4629      	mov	r1, r5
   33248:	4620      	mov	r0, r4
   3324a:	f7ff fdff 	bl	32e4c <value_to_pretty>
        if (err)
   3324e:	4603      	mov	r3, r0
   33250:	b980      	cbnz	r0, 33274 <container_to_pretty+0x4c>
        if (containerType == CborArrayType)
   33252:	2e80      	cmp	r6, #128	; 0x80
   33254:	d0ee      	beq.n	33234 <container_to_pretty+0xc>
        if (fprintf(out, ": ") < 0)
   33256:	490c      	ldr	r1, [pc, #48]	; (33288 <container_to_pretty+0x60>)
   33258:	4620      	mov	r0, r4
   3325a:	f7e8 f8bd 	bl	1b3d8 <fprintf>
   3325e:	2800      	cmp	r0, #0
   33260:	db0a      	blt.n	33278 <container_to_pretty+0x50>
        err = value_to_pretty(out, it);
   33262:	4629      	mov	r1, r5
   33264:	4620      	mov	r0, r4
   33266:	f7ff fdf1 	bl	32e4c <value_to_pretty>
        if (err)
   3326a:	4603      	mov	r3, r0
   3326c:	2800      	cmp	r0, #0
   3326e:	d0e1      	beq.n	33234 <container_to_pretty+0xc>
   33270:	e000      	b.n	33274 <container_to_pretty+0x4c>
            return CborErrorIO;
   33272:	2304      	movs	r3, #4
}
   33274:	4618      	mov	r0, r3
   33276:	bd70      	pop	{r4, r5, r6, pc}
            return CborErrorIO;
   33278:	2304      	movs	r3, #4
   3327a:	e7fb      	b.n	33274 <container_to_pretty+0x4c>
   3327c:	00038930 	.word	0x00038930
   33280:	00039b90 	.word	0x00039b90
   33284:	00034c40 	.word	0x00034c40
   33288:	00035014 	.word	0x00035014

0003328c <cbor_value_to_pretty_advance>:
 * done by appending a comma to the output stream.
 *
 * \sa cbor_value_to_pretty(), cbor_value_to_json_advance()
 */
CborError cbor_value_to_pretty_advance(FILE *out, CborValue *value)
{
   3328c:	b508      	push	{r3, lr}
    return value_to_pretty(out, value);
   3328e:	f7ff fddd 	bl	32e4c <value_to_pretty>
}
   33292:	bd08      	pop	{r3, pc}

00033294 <_cbor_value_dup_string>:
 * malloc'ed block.
 *
 * \sa cbor_value_copy_byte_string(), cbor_value_dup_text_string()
 */
CborError _cbor_value_dup_string(const CborValue *value, void **buffer, size_t *buflen, CborValue *next)
{
   33294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert(buffer);
   33298:	b181      	cbz	r1, 332bc <_cbor_value_dup_string+0x28>
   3329a:	4605      	mov	r5, r0
   3329c:	4614      	mov	r4, r2
   3329e:	461e      	mov	r6, r3
   332a0:	460f      	mov	r7, r1
    assert(buflen);
   332a2:	b1aa      	cbz	r2, 332d0 <_cbor_value_dup_string+0x3c>
    *buflen = SIZE_MAX;
   332a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   332a8:	6013      	str	r3, [r2, #0]
    CborError err = _cbor_value_copy_string(value, NULL, buflen, NULL);
   332aa:	2300      	movs	r3, #0
   332ac:	4619      	mov	r1, r3
   332ae:	f7ff fc87 	bl	32bc0 <_cbor_value_copy_string>
    if (err)
   332b2:	4680      	mov	r8, r0
   332b4:	b1b0      	cbz	r0, 332e4 <_cbor_value_dup_string+0x50>
    if (err) {
        free(*buffer);
        return err;
    }
    return CborNoError;
}
   332b6:	4640      	mov	r0, r8
   332b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(buffer);
   332bc:	f7e1 fa1a 	bl	146f4 <hal_debugger_connected>
   332c0:	b100      	cbz	r0, 332c4 <_cbor_value_dup_string+0x30>
   332c2:	be01      	bkpt	0x0001
   332c4:	2300      	movs	r3, #0
   332c6:	461a      	mov	r2, r3
   332c8:	4619      	mov	r1, r3
   332ca:	4618      	mov	r0, r3
   332cc:	f7e5 fd30 	bl	18d30 <__assert_func>
    assert(buflen);
   332d0:	f7e1 fa10 	bl	146f4 <hal_debugger_connected>
   332d4:	b100      	cbz	r0, 332d8 <_cbor_value_dup_string+0x44>
   332d6:	be01      	bkpt	0x0001
   332d8:	2300      	movs	r3, #0
   332da:	461a      	mov	r2, r3
   332dc:	4619      	mov	r1, r3
   332de:	4618      	mov	r0, r3
   332e0:	f7e5 fd26 	bl	18d30 <__assert_func>
    ++*buflen;
   332e4:	6820      	ldr	r0, [r4, #0]
   332e6:	3001      	adds	r0, #1
   332e8:	6020      	str	r0, [r4, #0]
    *buffer = malloc(*buflen);
   332ea:	f000 ff37 	bl	3415c <malloc>
   332ee:	4601      	mov	r1, r0
   332f0:	6038      	str	r0, [r7, #0]
    if (!*buffer) {
   332f2:	b158      	cbz	r0, 3330c <_cbor_value_dup_string+0x78>
    err = _cbor_value_copy_string(value, *buffer, buflen, next);
   332f4:	4633      	mov	r3, r6
   332f6:	4622      	mov	r2, r4
   332f8:	4628      	mov	r0, r5
   332fa:	f7ff fc61 	bl	32bc0 <_cbor_value_copy_string>
    if (err) {
   332fe:	4680      	mov	r8, r0
   33300:	2800      	cmp	r0, #0
   33302:	d0d8      	beq.n	332b6 <_cbor_value_dup_string+0x22>
        free(*buffer);
   33304:	6838      	ldr	r0, [r7, #0]
   33306:	f000 ff5f 	bl	341c8 <free>
        return err;
   3330a:	e7d4      	b.n	332b6 <_cbor_value_dup_string+0x22>
        return CborErrorOutOfMemory;
   3330c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
   33310:	e7d1      	b.n	332b6 <_cbor_value_dup_string+0x22>
	...

00033314 <hal_bsp_flash_dev>:
#endif

const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    if (id != 0) {
   33314:	b908      	cbnz	r0, 3331a <hal_bsp_flash_dev+0x6>
        return (NULL);
    }
    return &apollo3_flash_dev;
   33316:	4802      	ldr	r0, [pc, #8]	; (33320 <hal_bsp_flash_dev+0xc>)
   33318:	4770      	bx	lr
        return (NULL);
   3331a:	2000      	movs	r0, #0
}
   3331c:	4770      	bx	lr
   3331e:	bf00      	nop
   33320:	00039b94 	.word	0x00039b94

00033324 <hal_bsp_init>:
    return dump_cfg;
}

void
hal_bsp_init(void)
{
   33324:	b500      	push	{lr}
   33326:	b083      	sub	sp, #12

    (void) timer_cfg;
    (void) rc;

#if MYNEWT_VAL(TIMER_0_SOURCE)
    timer_cfg.source = MYNEWT_VAL(TIMER_0_SOURCE);
   33328:	2301      	movs	r3, #1
   3332a:	f88d 3004 	strb.w	r3, [sp, #4]
    rc = hal_timer_init(0, &timer_cfg);
   3332e:	a901      	add	r1, sp, #4
   33330:	2000      	movs	r0, #0
   33332:	f000 fa7d 	bl	33830 <hal_timer_init>
    assert(rc == 0);
   33336:	b938      	cbnz	r0, 33348 <hal_bsp_init+0x24>
    rc = hal_timer_init(1, &timer_cfg);
    assert(rc == 0);
#endif

#if (MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0)
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   33338:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   3333c:	f000 fdb2 	bl	33ea4 <os_cputime_init>
    assert(rc == 0);
   33340:	b960      	cbnz	r0, 3335c <hal_bsp_init+0x38>
    rc = os_dev_create(&os_bsp_adc0.ad_dev, "adc0",
                       OS_DEV_INIT_KERNEL, OS_DEV_INIT_PRIO_DEFAULT,
                       apollo3_adc_dev_init, &os_bsp_adc0_config);
    assert(rc == 0);
#endif
}
   33342:	b003      	add	sp, #12
   33344:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   33348:	f7e1 f9d4 	bl	146f4 <hal_debugger_connected>
   3334c:	b100      	cbz	r0, 33350 <hal_bsp_init+0x2c>
   3334e:	be01      	bkpt	0x0001
   33350:	2300      	movs	r3, #0
   33352:	461a      	mov	r2, r3
   33354:	4619      	mov	r1, r3
   33356:	4618      	mov	r0, r3
   33358:	f7e5 fcea 	bl	18d30 <__assert_func>
    assert(rc == 0);
   3335c:	f7e1 f9ca 	bl	146f4 <hal_debugger_connected>
   33360:	b100      	cbz	r0, 33364 <hal_bsp_init+0x40>
   33362:	be01      	bkpt	0x0001
   33364:	2300      	movs	r3, #0
   33366:	461a      	mov	r2, r3
   33368:	4619      	mov	r1, r3
   3336a:	4618      	mov	r0, r3
   3336c:	f7e5 fce0 	bl	18d30 <__assert_func>

00033370 <hal_flash_init>:

static uint8_t protected_flash[1];

int
hal_flash_init(void)
{
   33370:	b538      	push	{r3, r4, r5, lr}
    const struct hal_flash *hf;
    uint8_t i;
    int rc = 0;
   33372:	2500      	movs	r5, #0
    const uint8_t max_id = MYNEWT_VAL(HAL_FLASH_MAX_DEVICE_COUNT) ? MYNEWT_VAL(HAL_FLASH_MAX_DEVICE_COUNT) : 0xFF;

    for (i = 0; i < max_id; i++) {
   33374:	462c      	mov	r4, r5
   33376:	e001      	b.n	3337c <hal_flash_init+0xc>
   33378:	3401      	adds	r4, #1
   3337a:	b2e4      	uxtb	r4, r4
   3337c:	2cff      	cmp	r4, #255	; 0xff
   3337e:	d00b      	beq.n	33398 <hal_flash_init+0x28>
        hf = hal_bsp_flash_dev(i);
   33380:	4620      	mov	r0, r4
   33382:	f7ff ffc7 	bl	33314 <hal_bsp_flash_dev>
        if (!hf) {
   33386:	b138      	cbz	r0, 33398 <hal_flash_init+0x28>
                break;
            } else {
                continue;
            }
        }
        if (hf->hf_itf->hff_init(hf)) {
   33388:	6802      	ldr	r2, [r0, #0]
   3338a:	6952      	ldr	r2, [r2, #20]
   3338c:	4790      	blx	r2
   3338e:	2800      	cmp	r0, #0
   33390:	d0f2      	beq.n	33378 <hal_flash_init+0x8>
            rc = SYS_EIO;
   33392:	f06f 0504 	mvn.w	r5, #4
   33396:	e7ef      	b.n	33378 <hal_flash_init+0x8>
        }
    }
    return rc;
}
   33398:	4628      	mov	r0, r5
   3339a:	bd38      	pop	{r3, r4, r5, pc}

0003339c <apollo3_flash_sector_info>:

static int
apollo3_flash_sector_info(const struct hal_flash *dev, int idx, uint32_t *addr,
    uint32_t *sz)
{
    *addr = idx * AM_HAL_FLASH_PAGE_SIZE;
   3339c:	0349      	lsls	r1, r1, #13
   3339e:	6011      	str	r1, [r2, #0]
    *sz = AM_HAL_FLASH_PAGE_SIZE;
   333a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   333a4:	601a      	str	r2, [r3, #0]

    return (0);
}
   333a6:	2000      	movs	r0, #0
   333a8:	4770      	bx	lr

000333aa <apollo3_flash_init>:

static int
apollo3_flash_init(const struct hal_flash *dev)
{
    return (0);
}
   333aa:	2000      	movs	r0, #0
   333ac:	4770      	bx	lr
	...

000333b0 <apollo3_flash_erase_sector>:
{
   333b0:	b508      	push	{r3, lr}
    rc = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, inst, page);
   333b2:	f3c1 3245 	ubfx	r2, r1, #13, #6
   333b6:	f3c1 41c0 	ubfx	r1, r1, #19, #1
   333ba:	4802      	ldr	r0, [pc, #8]	; (333c4 <apollo3_flash_erase_sector+0x14>)
   333bc:	f000 fcb4 	bl	33d28 <am_hal_flash_page_erase>
}
   333c0:	bd08      	pop	{r3, pc}
   333c2:	bf00      	nop
   333c4:	12344321 	.word	0x12344321

000333c8 <apollo3_flash_write_odd>:
{
   333c8:	b510      	push	{r4, lr}
   333ca:	b082      	sub	sp, #8
   333cc:	460c      	mov	r4, r1
   333ce:	4611      	mov	r1, r2
   333d0:	461a      	mov	r2, r3
    offset = address % 4;
   333d2:	f004 0003 	and.w	r0, r4, #3
    assert(offset + num_bytes <= 4);
   333d6:	18c3      	adds	r3, r0, r3
   333d8:	2b04      	cmp	r3, #4
   333da:	d80e      	bhi.n	333fa <apollo3_flash_write_odd+0x32>
    base = (uint32_t *)(address - offset);
   333dc:	1a24      	subs	r4, r4, r0
    word = *base;
   333de:	6823      	ldr	r3, [r4, #0]
   333e0:	9301      	str	r3, [sp, #4]
    memcpy(u8p, src, num_bytes);
   333e2:	ab01      	add	r3, sp, #4
   333e4:	4418      	add	r0, r3
   333e6:	f7e7 fc33 	bl	1ac50 <memcpy>
    rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, &word,
   333ea:	2301      	movs	r3, #1
   333ec:	4622      	mov	r2, r4
   333ee:	a901      	add	r1, sp, #4
   333f0:	4807      	ldr	r0, [pc, #28]	; (33410 <apollo3_flash_write_odd+0x48>)
   333f2:	f000 fc9f 	bl	33d34 <am_hal_flash_program_main>
}
   333f6:	b002      	add	sp, #8
   333f8:	bd10      	pop	{r4, pc}
    assert(offset + num_bytes <= 4);
   333fa:	f7e1 f97b 	bl	146f4 <hal_debugger_connected>
   333fe:	b100      	cbz	r0, 33402 <apollo3_flash_write_odd+0x3a>
   33400:	be01      	bkpt	0x0001
   33402:	2300      	movs	r3, #0
   33404:	461a      	mov	r2, r3
   33406:	4619      	mov	r1, r3
   33408:	4618      	mov	r0, r3
   3340a:	f7e5 fc91 	bl	18d30 <__assert_func>
   3340e:	bf00      	nop
   33410:	12344321 	.word	0x12344321

00033414 <apollo3_flash_write>:
{
   33414:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33418:	4607      	mov	r7, r0
   3341a:	460d      	mov	r5, r1
   3341c:	4616      	mov	r6, r2
   3341e:	4698      	mov	r8, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   33420:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   33424:	b672      	cpsid	i
    if (lead_off != 0) {
   33426:	f011 0403 	ands.w	r4, r1, #3
   3342a:	d010      	beq.n	3344e <apollo3_flash_write+0x3a>
        lead_size = 4 - lead_off;
   3342c:	f1c4 0404 	rsb	r4, r4, #4
        if (lead_size > num_bytes) {
   33430:	429c      	cmp	r4, r3
   33432:	d900      	bls.n	33436 <apollo3_flash_write+0x22>
            lead_size = num_bytes;
   33434:	461c      	mov	r4, r3
        rc = apollo3_flash_write_odd(dev, address, u8p, lead_size);
   33436:	4623      	mov	r3, r4
   33438:	4632      	mov	r2, r6
   3343a:	4629      	mov	r1, r5
   3343c:	4638      	mov	r0, r7
   3343e:	f7ff ffc3 	bl	333c8 <apollo3_flash_write_odd>
        if (rc != 0) {
   33442:	4603      	mov	r3, r0
   33444:	bb98      	cbnz	r0, 334ae <apollo3_flash_write+0x9a>
        u8p += lead_size;
   33446:	4426      	add	r6, r4
        num_bytes -= lead_size;
   33448:	eba8 0804 	sub.w	r8, r8, r4
        address += lead_size;
   3344c:	4425      	add	r5, r4
    if (num_bytes == 0) {
   3344e:	f1b8 0f00 	cmp.w	r8, #0
   33452:	d02b      	beq.n	334ac <apollo3_flash_write+0x98>
    words = num_bytes / 4;
   33454:	ea4f 0b98 	mov.w	fp, r8, lsr #2
   33458:	46d9      	mov	r9, fp
    if ((uint32_t)u8p % 4 == 0) {
   3345a:	f016 0f03 	tst.w	r6, #3
   3345e:	d00e      	beq.n	3347e <apollo3_flash_write+0x6a>
        for (i = 0; i < words; i++) {
   33460:	2400      	movs	r4, #0
   33462:	454c      	cmp	r4, r9
   33464:	da13      	bge.n	3348e <apollo3_flash_write+0x7a>
            rc = apollo3_flash_write_odd(dev, address + i * 4, u8p + i * 4, 4);
   33466:	2304      	movs	r3, #4
   33468:	eb06 0284 	add.w	r2, r6, r4, lsl #2
   3346c:	eb05 0184 	add.w	r1, r5, r4, lsl #2
   33470:	4638      	mov	r0, r7
   33472:	f7ff ffa9 	bl	333c8 <apollo3_flash_write_odd>
            if (rc != 0) {
   33476:	4603      	mov	r3, r0
   33478:	b9c8      	cbnz	r0, 334ae <apollo3_flash_write+0x9a>
        for (i = 0; i < words; i++) {
   3347a:	3401      	adds	r4, #1
   3347c:	e7f1      	b.n	33462 <apollo3_flash_write+0x4e>
        rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY,
   3347e:	465b      	mov	r3, fp
   33480:	462a      	mov	r2, r5
   33482:	4631      	mov	r1, r6
   33484:	480d      	ldr	r0, [pc, #52]	; (334bc <apollo3_flash_write+0xa8>)
   33486:	f000 fc55 	bl	33d34 <am_hal_flash_program_main>
        if (rc != 0) {
   3348a:	4603      	mov	r3, r0
   3348c:	b978      	cbnz	r0, 334ae <apollo3_flash_write+0x9a>
    remainder = num_bytes - (words * 4);
   3348e:	ea4f 018b 	mov.w	r1, fp, lsl #2
   33492:	eba8 038b 	sub.w	r3, r8, fp, lsl #2
    if (remainder > 0) {
   33496:	2b00      	cmp	r3, #0
   33498:	dc01      	bgt.n	3349e <apollo3_flash_write+0x8a>
    rc = 0;
   3349a:	2300      	movs	r3, #0
   3349c:	e007      	b.n	334ae <apollo3_flash_write+0x9a>
        rc = apollo3_flash_write_odd(dev,
   3349e:	1872      	adds	r2, r6, r1
   334a0:	4429      	add	r1, r5
   334a2:	4638      	mov	r0, r7
   334a4:	f7ff ff90 	bl	333c8 <apollo3_flash_write_odd>
   334a8:	4603      	mov	r3, r0
        if (rc != 0) {
   334aa:	e000      	b.n	334ae <apollo3_flash_write+0x9a>
        rc = 0;
   334ac:	2300      	movs	r3, #0
    __HAL_ENABLE_INTERRUPTS(sr);
   334ae:	f1ba 0f00 	cmp.w	sl, #0
   334b2:	d100      	bne.n	334b6 <apollo3_flash_write+0xa2>
  __ASM volatile ("cpsie i" : : : "memory");
   334b4:	b662      	cpsie	i
}
   334b6:	4618      	mov	r0, r3
   334b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   334bc:	12344321 	.word	0x12344321

000334c0 <apollo3_flash_read>:
{
   334c0:	b508      	push	{r3, lr}
   334c2:	4610      	mov	r0, r2
    memcpy(dst, (void *) address, num_bytes);
   334c4:	461a      	mov	r2, r3
   334c6:	f7e7 fbc3 	bl	1ac50 <memcpy>
}
   334ca:	2000      	movs	r0, #0
   334cc:	bd08      	pop	{r3, pc}
	...

000334d0 <apollo2_os_tick_set_timer>:
/*** Number of system ticks per single OS tick. */
static uint32_t apollo2_os_tick_dur;

static void
apollo2_os_tick_set_timer(int os_ticks)
{
   334d0:	b538      	push	{r3, r4, r5, lr}
   334d2:	4604      	mov	r4, r0
    uint32_t sys_ticks;
    uint32_t cfg;

    OS_ASSERT_CRITICAL();
   334d4:	f7e7 f9f1 	bl	1a8ba <os_arch_in_critical>
   334d8:	b180      	cbz	r0, 334fc <apollo2_os_tick_set_timer+0x2c>

    sys_ticks = os_ticks * apollo2_os_tick_dur;
   334da:	4b0d      	ldr	r3, [pc, #52]	; (33510 <apollo2_os_tick_set_timer+0x40>)
   334dc:	6818      	ldr	r0, [r3, #0]
   334de:	fb00 f404 	mul.w	r4, r0, r4

    /* Freeze time, set timer expiry, then unfreeze time. */
    cfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
   334e2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   334e6:	f000 fc67 	bl	33db8 <am_hal_stimer_config>
   334ea:	4605      	mov	r5, r0
    am_hal_stimer_compare_delta_set(0, sys_ticks);
   334ec:	4621      	mov	r1, r4
   334ee:	2000      	movs	r0, #0
   334f0:	f000 fc8c 	bl	33e0c <am_hal_stimer_compare_delta_set>
    am_hal_stimer_config(cfg);
   334f4:	4628      	mov	r0, r5
   334f6:	f000 fc5f 	bl	33db8 <am_hal_stimer_config>
}
   334fa:	bd38      	pop	{r3, r4, r5, pc}
    OS_ASSERT_CRITICAL();
   334fc:	f7e1 f8fa 	bl	146f4 <hal_debugger_connected>
   33500:	b100      	cbz	r0, 33504 <apollo2_os_tick_set_timer+0x34>
   33502:	be01      	bkpt	0x0001
   33504:	2300      	movs	r3, #0
   33506:	461a      	mov	r2, r3
   33508:	4619      	mov	r1, r3
   3350a:	4618      	mov	r0, r3
   3350c:	f7e5 fc10 	bl	18d30 <__assert_func>
   33510:	10005e68 	.word	0x10005e68

00033514 <apollo2_os_tick_handler>:

static void
apollo2_os_tick_handler(void)
{
   33514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t cur;
    int os_ticks;
    int delta;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   33516:	f7e7 f9c7 	bl	1a8a8 <os_arch_save_sr>
   3351a:	4605      	mov	r5, r0

    /* Calculate elapsed ticks and advance OS time. */
    cur = am_hal_stimer_counter_get();
   3351c:	f000 fc56 	bl	33dcc <am_hal_stimer_counter_get>
    delta = cur - apollo2_os_tick_prev;
   33520:	4e0c      	ldr	r6, [pc, #48]	; (33554 <apollo2_os_tick_handler+0x40>)
   33522:	6834      	ldr	r4, [r6, #0]
   33524:	1b04      	subs	r4, r0, r4
    os_ticks = delta / apollo2_os_tick_dur;
   33526:	4f0c      	ldr	r7, [pc, #48]	; (33558 <apollo2_os_tick_handler+0x44>)
   33528:	6838      	ldr	r0, [r7, #0]
   3352a:	fbb4 f4f0 	udiv	r4, r4, r0
    os_time_advance(os_ticks);
   3352e:	4620      	mov	r0, r4
   33530:	f7e7 f890 	bl	1a654 <os_time_advance>

    /* Clear timer interrupt. */
    am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   33534:	2001      	movs	r0, #1
   33536:	f000 fcaf 	bl	33e98 <am_hal_stimer_int_clear>

    /* Update the time associated with the most recent tick. */
    apollo2_os_tick_prev += os_ticks * apollo2_os_tick_dur;
   3353a:	683b      	ldr	r3, [r7, #0]
   3353c:	6830      	ldr	r0, [r6, #0]
   3353e:	fb03 0404 	mla	r4, r3, r4, r0
   33542:	6034      	str	r4, [r6, #0]

    /* Schedule timer to interrupt at the next tick. */
    apollo2_os_tick_set_timer(1);
   33544:	2001      	movs	r0, #1
   33546:	f7ff ffc3 	bl	334d0 <apollo2_os_tick_set_timer>

    OS_EXIT_CRITICAL(sr);
   3354a:	4628      	mov	r0, r5
   3354c:	f7e7 f9b2 	bl	1a8b4 <os_arch_restore_sr>
}
   33550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33552:	bf00      	nop
   33554:	10005e6c 	.word	0x10005e6c
   33558:	10005e68 	.word	0x10005e68

0003355c <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   3355c:	b510      	push	{r4, lr}
   3355e:	4604      	mov	r4, r0
    OS_ASSERT_CRITICAL();
   33560:	f7e7 f9ab 	bl	1a8ba <os_arch_in_critical>
   33564:	b128      	cbz	r0, 33572 <os_tick_idle+0x16>
     */

    /* Only set the timer for nonzero tick values.  For values of 0, just let
     * the timer expire on the next tick, as scheduled earlier.
     */
    if (ticks > 0) {
   33566:	b974      	cbnz	r4, 33586 <os_tick_idle+0x2a>
  __ASM volatile ("dsb 0xF":::"memory");
   33568:	f3bf 8f4f 	dsb	sy
        apollo2_os_tick_set_timer(ticks);
    }

    __DSB();
    __WFI();
   3356c:	bf30      	wfi

    if (ticks > 0) {
   3356e:	b974      	cbnz	r4, 3358e <os_tick_idle+0x32>
        apollo2_os_tick_handler();
    }
}
   33570:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   33572:	f7e1 f8bf 	bl	146f4 <hal_debugger_connected>
   33576:	b100      	cbz	r0, 3357a <os_tick_idle+0x1e>
   33578:	be01      	bkpt	0x0001
   3357a:	2300      	movs	r3, #0
   3357c:	461a      	mov	r2, r3
   3357e:	4619      	mov	r1, r3
   33580:	4618      	mov	r0, r3
   33582:	f7e5 fbd5 	bl	18d30 <__assert_func>
        apollo2_os_tick_set_timer(ticks);
   33586:	4620      	mov	r0, r4
   33588:	f7ff ffa2 	bl	334d0 <apollo2_os_tick_set_timer>
   3358c:	e7ec      	b.n	33568 <os_tick_idle+0xc>
        apollo2_os_tick_handler();
   3358e:	f7ff ffc1 	bl	33514 <apollo2_os_tick_handler>
}
   33592:	e7ed      	b.n	33570 <os_tick_idle+0x14>

00033594 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   33594:	b538      	push	{r3, r4, r5, lr}
   33596:	4605      	mov	r5, r0
   33598:	460c      	mov	r4, r1
    os_sr_t sr;

    /* Reset the timer to 0. */
    am_hal_stimer_counter_clear();
   3359a:	f000 fc27 	bl	33dec <am_hal_stimer_counter_clear>

    /* The OS tick timer uses:
     * o The 1024 Hz low-frequency RC oscillator (LFRC)
     * o The first comparator (COMPAREA)
     */
    am_hal_stimer_config(AM_HAL_STIMER_LFRC_1KHZ |
   3359e:	f44f 7083 	mov.w	r0, #262	; 0x106
   335a2:	f000 fc09 	bl	33db8 <am_hal_stimer_config>
                         AM_HAL_STIMER_CFG_COMPARE_A_ENABLE);
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA);
   335a6:	2001      	movs	r0, #1
   335a8:	f000 fc6c 	bl	33e84 <am_hal_stimer_int_enable>

    apollo2_os_tick_dur = APOLLO2_OS_TICK_FREQ / os_ticks_per_sec;
   335ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
   335b0:	fbb3 f5f5 	udiv	r5, r3, r5
   335b4:	4b0c      	ldr	r3, [pc, #48]	; (335e8 <os_tick_init+0x54>)
   335b6:	601d      	str	r5, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   335b8:	0164      	lsls	r4, r4, #5
   335ba:	b2e4      	uxtb	r4, r4
   335bc:	4b0b      	ldr	r3, [pc, #44]	; (335ec <os_tick_init+0x58>)
   335be:	f883 4317 	strb.w	r4, [r3, #791]	; 0x317
  uint32_t vectors = (uint32_t )SCB->VTOR;
   335c2:	4a0b      	ldr	r2, [pc, #44]	; (335f0 <os_tick_init+0x5c>)
   335c4:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   335c6:	490b      	ldr	r1, [pc, #44]	; (335f4 <os_tick_init+0x60>)
   335c8:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   335cc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   335d0:	601a      	str	r2, [r3, #0]
    NVIC_SetPriority(APOLLO2_OS_TICK_IRQ, prio);
    NVIC_SetVector(APOLLO2_OS_TICK_IRQ, (uint32_t)apollo2_os_tick_handler);
    NVIC_EnableIRQ(APOLLO2_OS_TICK_IRQ);

    /* Schedule timer to interrupt at the next tick. */
    OS_ENTER_CRITICAL(sr);
   335d2:	f7e7 f969 	bl	1a8a8 <os_arch_save_sr>
   335d6:	4604      	mov	r4, r0
    apollo2_os_tick_set_timer(1);
   335d8:	2001      	movs	r0, #1
   335da:	f7ff ff79 	bl	334d0 <apollo2_os_tick_set_timer>
    OS_EXIT_CRITICAL(sr);
   335de:	4620      	mov	r0, r4
   335e0:	f7e7 f968 	bl	1a8b4 <os_arch_restore_sr>
}
   335e4:	bd38      	pop	{r3, r4, r5, pc}
   335e6:	bf00      	nop
   335e8:	10005e68 	.word	0x10005e68
   335ec:	e000e100 	.word	0xe000e100
   335f0:	e000ed00 	.word	0xe000ed00
   335f4:	00033515 	.word	0x00033515

000335f8 <apollo3_timer_resolve>:
#endif

static struct apollo3_timer *
apollo3_timer_resolve(int timer_num)
{
    switch (timer_num) {
   335f8:	b908      	cbnz	r0, 335fe <apollo3_timer_resolve+0x6>
#if MYNEWT_VAL(TIMER_0_SOURCE)
        case 0:     return &apollo3_timer_0;
   335fa:	4802      	ldr	r0, [pc, #8]	; (33604 <apollo3_timer_resolve+0xc>)
   335fc:	4770      	bx	lr
#endif
#if MYNEWT_VAL(TIMER_1_SOURCE)
        case 1:     return &apollo3_timer_1;
#endif
        default:    return NULL;
   335fe:	2000      	movs	r0, #0
    }
}
   33600:	4770      	bx	lr
   33602:	bf00      	nop
   33604:	1000086c 	.word	0x1000086c

00033608 <apollo3_timer_tbl_find>:
 * matches the one specified.
 */
static const struct apollo3_timer_freq_entry *
apollo3_timer_tbl_find(const struct apollo3_timer_freq_entry *table,
                       uint32_t freq)
{
   33608:	b430      	push	{r4, r5}
   3360a:	4604      	mov	r4, r0
    int i;

    /* If the requested value is less than all entries in the table, return the
     * smallest one.
     */
    if (table[0].freq >= freq) {
   3360c:	6803      	ldr	r3, [r0, #0]
   3360e:	428b      	cmp	r3, r1
   33610:	d218      	bcs.n	33644 <apollo3_timer_tbl_find+0x3c>

    /* Find the first entry with a frequency value that is greater than the one
     * being requested.  Then determine which of it or its predecessor is
     * closer to the specified value.
     */
    for (i = 1; table[i].freq != 0; i++) {
   33612:	2301      	movs	r3, #1
   33614:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
   33618:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
   3361c:	b16a      	cbz	r2, 3363a <apollo3_timer_tbl_find+0x32>
        cur = &table[i];
        if (cur->freq >= freq) {
   3361e:	428a      	cmp	r2, r1
   33620:	d201      	bcs.n	33626 <apollo3_timer_tbl_find+0x1e>
    for (i = 1; table[i].freq != 0; i++) {
   33622:	3301      	adds	r3, #1
   33624:	e7f6      	b.n	33614 <apollo3_timer_tbl_find+0xc>
            prev = cur - 1;
   33626:	f1a0 0408 	sub.w	r4, r0, #8
            delta1 = freq - prev->freq;
   3362a:	f850 3c08 	ldr.w	r3, [r0, #-8]
   3362e:	1acb      	subs	r3, r1, r3
            delta2 = cur->freq - freq;
   33630:	1a52      	subs	r2, r2, r1

            if (delta1 <= delta2) {
   33632:	4293      	cmp	r3, r2
   33634:	d806      	bhi.n	33644 <apollo3_timer_tbl_find+0x3c>
                return prev;
   33636:	4620      	mov	r0, r4
   33638:	e004      	b.n	33644 <apollo3_timer_tbl_find+0x3c>
    }

    /* Requested value is greater than all entries in the table; return the
     * largest.
     */
    return table + i - 1;
   3363a:	f103 5000 	add.w	r0, r3, #536870912	; 0x20000000
   3363e:	3801      	subs	r0, #1
   33640:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
}
   33644:	bc30      	pop	{r4, r5}
   33646:	4770      	bx	lr

00033648 <apollo3_timer_sdk_cfg>:
 * ORed in, depending on the MCU timer being configured.
 */
static int
apollo3_timer_sdk_cfg(const struct apollo3_timer_cfg *cfg, uint32_t freq_hz,
                      uint32_t *out_actual_hz, uint32_t *out_cfg)
{
   33648:	b538      	push	{r3, r4, r5, lr}
   3364a:	4615      	mov	r5, r2
   3364c:	461c      	mov	r4, r3
    const struct apollo3_timer_freq_entry *entry;

    switch (cfg->source) {
   3364e:	7800      	ldrb	r0, [r0, #0]
   33650:	3801      	subs	r0, #1
   33652:	2804      	cmp	r0, #4
   33654:	d82b      	bhi.n	336ae <apollo3_timer_sdk_cfg+0x66>
   33656:	e8df f000 	tbb	[pc, r0]
   3365a:	0c03      	.short	0x0c03
   3365c:	1e15      	.short	0x1e15
   3365e:	24          	.byte	0x24
   3365f:	00          	.byte	0x00
    case APOLLO3_TIMER_SOURCE_HFRC:
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_hfrc, freq_hz);
   33660:	4814      	ldr	r0, [pc, #80]	; (336b4 <apollo3_timer_sdk_cfg+0x6c>)
   33662:	f7ff ffd1 	bl	33608 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   33666:	6803      	ldr	r3, [r0, #0]
   33668:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   3366a:	6843      	ldr	r3, [r0, #4]
   3366c:	6023      	str	r3, [r4, #0]
        return 0;
   3366e:	2000      	movs	r0, #0
        return 0;

    default:
        return SYS_EINVAL;
    }
}
   33670:	bd38      	pop	{r3, r4, r5, pc}
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_xt, freq_hz);
   33672:	4811      	ldr	r0, [pc, #68]	; (336b8 <apollo3_timer_sdk_cfg+0x70>)
   33674:	f7ff ffc8 	bl	33608 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   33678:	6803      	ldr	r3, [r0, #0]
   3367a:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   3367c:	6843      	ldr	r3, [r0, #4]
   3367e:	6023      	str	r3, [r4, #0]
        return 0;
   33680:	2000      	movs	r0, #0
   33682:	e7f5      	b.n	33670 <apollo3_timer_sdk_cfg+0x28>
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_lfrc, freq_hz);
   33684:	480d      	ldr	r0, [pc, #52]	; (336bc <apollo3_timer_sdk_cfg+0x74>)
   33686:	f7ff ffbf 	bl	33608 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   3368a:	6803      	ldr	r3, [r0, #0]
   3368c:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   3368e:	6843      	ldr	r3, [r0, #4]
   33690:	6023      	str	r3, [r4, #0]
        return 0;
   33692:	2000      	movs	r0, #0
   33694:	e7ec      	b.n	33670 <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 100;
   33696:	2364      	movs	r3, #100	; 0x64
   33698:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_RTC_100HZ;
   3369a:	231c      	movs	r3, #28
   3369c:	6023      	str	r3, [r4, #0]
        return 0;
   3369e:	2000      	movs	r0, #0
   336a0:	e7e6      	b.n	33670 <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 48000000;
   336a2:	4b07      	ldr	r3, [pc, #28]	; (336c0 <apollo3_timer_sdk_cfg+0x78>)
   336a4:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_HCLK_DIV4;
   336a6:	231e      	movs	r3, #30
   336a8:	6023      	str	r3, [r4, #0]
        return 0;
   336aa:	2000      	movs	r0, #0
   336ac:	e7e0      	b.n	33670 <apollo3_timer_sdk_cfg+0x28>
    switch (cfg->source) {
   336ae:	f06f 0001 	mvn.w	r0, #1
   336b2:	e7dd      	b.n	33670 <apollo3_timer_sdk_cfg+0x28>
   336b4:	00039bc8 	.word	0x00039bc8
   336b8:	00039c20 	.word	0x00039c20
   336bc:	00039bf8 	.word	0x00039bf8
   336c0:	02dc6c00 	.word	0x02dc6c00

000336c4 <apollo3_timer_isr_cfg>:
 */ 
static int
apollo3_timer_isr_cfg(const struct apollo3_timer *bsp_timer,
                      uint32_t *out_isr_cfg)
{
    switch (bsp_timer->once_timer_idx) {
   336c4:	7c43      	ldrb	r3, [r0, #17]
   336c6:	2b01      	cmp	r3, #1
   336c8:	d103      	bne.n	336d2 <apollo3_timer_isr_cfg+0xe>
#if MYNEWT_VAL(TIMER_0_SOURCE)
    case 1:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA1C0;
   336ca:	2304      	movs	r3, #4
   336cc:	600b      	str	r3, [r1, #0]
        return 0;
   336ce:	2000      	movs	r0, #0
   336d0:	4770      	bx	lr
    case 3:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA3C0;
        return 0;
#endif
    default:
        return SYS_EINVAL;
   336d2:	f06f 0001 	mvn.w	r0, #1
    }
}
   336d6:	4770      	bx	lr

000336d8 <apollo3_timer_cur_ticks>:
/**
 * Retrieves the current time from the specified timer.
 */
static uint32_t
apollo3_timer_cur_ticks(const struct apollo3_timer *bsp_timer)
{
   336d8:	b508      	push	{r3, lr}
    return am_hal_ctimer_read(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   336da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   336de:	7c00      	ldrb	r0, [r0, #16]
   336e0:	f000 fa2e 	bl	33b40 <am_hal_ctimer_read>
}
   336e4:	bd08      	pop	{r3, pc}

000336e6 <apollo3_timer_set_ocmp>:
 * time.
 */
static void
apollo3_timer_set_ocmp(const struct apollo3_timer *bsp_timer,
                       uint32_t ticks_from_now)
{
   336e6:	b530      	push	{r4, r5, lr}
   336e8:	b083      	sub	sp, #12
   336ea:	4604      	mov	r4, r0
   336ec:	460d      	mov	r5, r1
    uint32_t isr_cfg;
    int rc;

    /* Calculate the ISR flags for the "once" timer. */
    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   336ee:	a901      	add	r1, sp, #4
   336f0:	f7ff ffe8 	bl	336c4 <apollo3_timer_isr_cfg>
    assert(rc == 0);
   336f4:	b9e8      	cbnz	r0, 33732 <apollo3_timer_set_ocmp+0x4c>

    /* Clear any pending interrupt for this timer. */
    am_hal_ctimer_int_clear(isr_cfg);
   336f6:	9801      	ldr	r0, [sp, #4]
   336f8:	f000 fadc 	bl	33cb4 <am_hal_ctimer_int_clear>

    /* Stop and clear the "once" timer. */
    am_hal_ctimer_stop(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   336fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   33700:	7c60      	ldrb	r0, [r4, #17]
   33702:	f000 f9f3 	bl	33aec <am_hal_ctimer_stop>
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   33706:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3370a:	7c60      	ldrb	r0, [r4, #17]
   3370c:	f000 fa04 	bl	33b18 <am_hal_ctimer_clear>

    /* Schedule an interrupt at the requested relative time. */
    am_hal_ctimer_period_set(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
   33710:	2300      	movs	r3, #0
   33712:	462a      	mov	r2, r5
   33714:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   33718:	7c60      	ldrb	r0, [r4, #17]
   3371a:	f000 fa59 	bl	33bd0 <am_hal_ctimer_period_set>
                             ticks_from_now, 0);

    /* Enable interrupts for this timer, in case they haven't been enabled
     * yet.
     */
    am_hal_ctimer_int_enable(isr_cfg);
   3371e:	9801      	ldr	r0, [sp, #4]
   33720:	f000 faa0 	bl	33c64 <am_hal_ctimer_int_enable>

    /* Restart the timer. */
    am_hal_ctimer_start(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   33724:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   33728:	7c60      	ldrb	r0, [r4, #17]
   3372a:	f000 f9b5 	bl	33a98 <am_hal_ctimer_start>
}
   3372e:	b003      	add	sp, #12
   33730:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
   33732:	f7e0 ffdf 	bl	146f4 <hal_debugger_connected>
   33736:	b100      	cbz	r0, 3373a <apollo3_timer_set_ocmp+0x54>
   33738:	be01      	bkpt	0x0001
   3373a:	2300      	movs	r3, #0
   3373c:	461a      	mov	r2, r3
   3373e:	4619      	mov	r1, r3
   33740:	4618      	mov	r0, r3
   33742:	f7e5 faf5 	bl	18d30 <__assert_func>

00033746 <apollo3_timer_set_ocmp_at>:
 * Configures a BSP timer to generate an interrupt at the specified absolute
 * time.
 */
static void
apollo3_timer_set_ocmp_at(const struct apollo3_timer *bsp_timer, uint32_t at)
{
   33746:	b530      	push	{r4, r5, lr}
   33748:	b083      	sub	sp, #12
   3374a:	4605      	mov	r5, r0
   3374c:	460c      	mov	r4, r1
    uint32_t isr_cfg;
    uint32_t now;
    int32_t ticks_from_now;
    int rc;

    now = apollo3_timer_cur_ticks(bsp_timer);
   3374e:	f7ff ffc3 	bl	336d8 <apollo3_timer_cur_ticks>
    ticks_from_now = at - now;
   33752:	1a21      	subs	r1, r4, r0
    if (ticks_from_now <= 0) {
   33754:	2900      	cmp	r1, #0
   33756:	dd04      	ble.n	33762 <apollo3_timer_set_ocmp_at+0x1c>
        /* Event already occurred. */
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
        assert(rc == 0);
        am_hal_ctimer_int_set(isr_cfg);
    } else {
        apollo3_timer_set_ocmp(bsp_timer, ticks_from_now);
   33758:	4628      	mov	r0, r5
   3375a:	f7ff ffc4 	bl	336e6 <apollo3_timer_set_ocmp>
    }
}
   3375e:	b003      	add	sp, #12
   33760:	bd30      	pop	{r4, r5, pc}
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   33762:	a901      	add	r1, sp, #4
   33764:	4628      	mov	r0, r5
   33766:	f7ff ffad 	bl	336c4 <apollo3_timer_isr_cfg>
        assert(rc == 0);
   3376a:	b918      	cbnz	r0, 33774 <apollo3_timer_set_ocmp_at+0x2e>
        am_hal_ctimer_int_set(isr_cfg);
   3376c:	9801      	ldr	r0, [sp, #4]
   3376e:	f000 fab1 	bl	33cd4 <am_hal_ctimer_int_set>
   33772:	e7f4      	b.n	3375e <apollo3_timer_set_ocmp_at+0x18>
        assert(rc == 0);
   33774:	f7e0 ffbe 	bl	146f4 <hal_debugger_connected>
   33778:	b100      	cbz	r0, 3377c <apollo3_timer_set_ocmp_at+0x36>
   3377a:	be01      	bkpt	0x0001
   3377c:	2300      	movs	r3, #0
   3377e:	461a      	mov	r2, r3
   33780:	4619      	mov	r1, r3
   33782:	4618      	mov	r0, r3
   33784:	f7e5 fad4 	bl	18d30 <__assert_func>

00033788 <apollo3_timer_clear_ocmp>:
/**
 * Unsets a scheduled interrupt for the specified BSP timer.
 */
static void
apollo3_timer_clear_ocmp(const struct apollo3_timer *bsp_timer)
{
   33788:	b500      	push	{lr}
   3378a:	b083      	sub	sp, #12
    uint32_t isr_cfg;
    int rc;

    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   3378c:	a901      	add	r1, sp, #4
   3378e:	f7ff ff99 	bl	336c4 <apollo3_timer_isr_cfg>
    assert(rc == 0);
   33792:	b928      	cbnz	r0, 337a0 <apollo3_timer_clear_ocmp+0x18>

    am_hal_ctimer_int_disable(isr_cfg);
   33794:	9801      	ldr	r0, [sp, #4]
   33796:	f000 fa79 	bl	33c8c <am_hal_ctimer_int_disable>
}
   3379a:	b003      	add	sp, #12
   3379c:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   337a0:	f7e0 ffa8 	bl	146f4 <hal_debugger_connected>
   337a4:	b100      	cbz	r0, 337a8 <apollo3_timer_clear_ocmp+0x20>
   337a6:	be01      	bkpt	0x0001
   337a8:	2300      	movs	r3, #0
   337aa:	461a      	mov	r2, r3
   337ac:	4619      	mov	r1, r3
   337ae:	4618      	mov	r0, r3
   337b0:	f7e5 fabe 	bl	18d30 <__assert_func>

000337b4 <apollo3_timer_chk_queue>:
 * Executes callbacks for all expired timers in a BSP timer's queue.  This
 * function is called when a timer interrupt is handled.
 */
static void
apollo3_timer_chk_queue(struct apollo3_timer *bsp_timer)
{
   337b4:	b570      	push	{r4, r5, r6, lr}
   337b6:	4605      	mov	r5, r0
    struct hal_timer *timer;
    uint32_t ticks;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   337b8:	f7e7 f876 	bl	1a8a8 <os_arch_save_sr>
   337bc:	4606      	mov	r6, r0

    /* Remove and process each expired timer in the sorted queue. */
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
   337be:	e009      	b.n	337d4 <apollo3_timer_chk_queue+0x20>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
        if ((int32_t)(ticks - timer->expiry) >= 0) {
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   337c0:	6963      	ldr	r3, [r4, #20]
   337c2:	606b      	str	r3, [r5, #4]
   337c4:	6963      	ldr	r3, [r4, #20]
   337c6:	6922      	ldr	r2, [r4, #16]
   337c8:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   337ca:	2300      	movs	r3, #0
   337cc:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   337ce:	6863      	ldr	r3, [r4, #4]
   337d0:	68a0      	ldr	r0, [r4, #8]
   337d2:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
   337d4:	682c      	ldr	r4, [r5, #0]
   337d6:	b164      	cbz	r4, 337f2 <apollo3_timer_chk_queue+0x3e>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
   337d8:	4628      	mov	r0, r5
   337da:	f7ff ff7d 	bl	336d8 <apollo3_timer_cur_ticks>
        if ((int32_t)(ticks - timer->expiry) >= 0) {
   337de:	68e3      	ldr	r3, [r4, #12]
   337e0:	1ac0      	subs	r0, r0, r3
   337e2:	2800      	cmp	r0, #0
   337e4:	db05      	blt.n	337f2 <apollo3_timer_chk_queue+0x3e>
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   337e6:	6923      	ldr	r3, [r4, #16]
   337e8:	2b00      	cmp	r3, #0
   337ea:	d0e9      	beq.n	337c0 <apollo3_timer_chk_queue+0xc>
   337ec:	6962      	ldr	r2, [r4, #20]
   337ee:	615a      	str	r2, [r3, #20]
   337f0:	e7e8      	b.n	337c4 <apollo3_timer_chk_queue+0x10>
    }

    /* If any timers remain, schedule an interrupt for the timer that expires
     * next.
     */
    if (timer != NULL) {
   337f2:	b13c      	cbz	r4, 33804 <apollo3_timer_chk_queue+0x50>
        apollo3_timer_set_ocmp_at(bsp_timer, timer->expiry);
   337f4:	68e1      	ldr	r1, [r4, #12]
   337f6:	4628      	mov	r0, r5
   337f8:	f7ff ffa5 	bl	33746 <apollo3_timer_set_ocmp_at>
    } else {
        apollo3_timer_clear_ocmp(bsp_timer);
    }

    OS_EXIT_CRITICAL(sr);
   337fc:	4630      	mov	r0, r6
   337fe:	f7e7 f859 	bl	1a8b4 <os_arch_restore_sr>
}
   33802:	bd70      	pop	{r4, r5, r6, pc}
        apollo3_timer_clear_ocmp(bsp_timer);
   33804:	4628      	mov	r0, r5
   33806:	f7ff ffbf 	bl	33788 <apollo3_timer_clear_ocmp>
   3380a:	e7f7      	b.n	337fc <apollo3_timer_chk_queue+0x48>

0003380c <apollo3_timer_isr>:
/**
 * Handles a ctimer interrupt.
 */
static void
apollo3_timer_isr(void)
{
   3380c:	b510      	push	{r4, lr}
    uint32_t status;

    /* Read the ctimer status to determine which timers generated the
     * interrupt.
     */
    status = am_hal_ctimer_int_status_get(true);
   3380e:	2001      	movs	r0, #1
   33810:	f000 fa70 	bl	33cf4 <am_hal_ctimer_int_status_get>
   33814:	4604      	mov	r4, r0
    am_hal_ctimer_int_clear(status);
   33816:	f000 fa4d 	bl	33cb4 <am_hal_ctimer_int_clear>

    /* Service the appropriate timers. */
#if MYNEWT_VAL(TIMER_0_SOURCE)
    if (status & (AM_HAL_CTIMER_INT_TIMERA1C0 | AM_HAL_CTIMER_INT_TIMERA1C1)) {
   3381a:	f014 1f04 	tst.w	r4, #262148	; 0x40004
   3381e:	d100      	bne.n	33822 <apollo3_timer_isr+0x16>
#if MYNEWT_VAL(TIMER_1_SOURCE)
    if (status & (AM_HAL_CTIMER_INT_TIMERA3C0 | AM_HAL_CTIMER_INT_TIMERA3C1)) {
        apollo3_timer_chk_queue(&apollo3_timer_1);
    }
#endif
}
   33820:	bd10      	pop	{r4, pc}
        apollo3_timer_chk_queue(&apollo3_timer_0);
   33822:	4802      	ldr	r0, [pc, #8]	; (3382c <apollo3_timer_isr+0x20>)
   33824:	f7ff ffc6 	bl	337b4 <apollo3_timer_chk_queue>
}
   33828:	e7fa      	b.n	33820 <apollo3_timer_isr+0x14>
   3382a:	bf00      	nop
   3382c:	1000086c 	.word	0x1000086c

00033830 <hal_timer_init>:
 *
 * @return int          0: success; error code otherwise
 */
int
hal_timer_init(int timer_num, void *vcfg)
{
   33830:	b510      	push	{r4, lr}
   33832:	460c      	mov	r4, r1
    static int nvic_configured;

    const struct apollo3_timer_cfg *bsp_cfg;
    struct apollo3_timer *bsp_timer;

    bsp_timer = apollo3_timer_resolve(timer_num);
   33834:	f7ff fee0 	bl	335f8 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
   33838:	b1b8      	cbz	r0, 3386a <hal_timer_init+0x3a>
   3383a:	4603      	mov	r3, r0
        return SYS_EINVAL;
    }

    if (!nvic_configured) {
   3383c:	4a0c      	ldr	r2, [pc, #48]	; (33870 <hal_timer_init+0x40>)
   3383e:	6812      	ldr	r2, [r2, #0]
   33840:	b97a      	cbnz	r2, 33862 <hal_timer_init+0x32>
        nvic_configured = 1;
   33842:	4a0b      	ldr	r2, [pc, #44]	; (33870 <hal_timer_init+0x40>)
   33844:	2101      	movs	r1, #1
   33846:	6011      	str	r1, [r2, #0]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   33848:	4a0a      	ldr	r2, [pc, #40]	; (33874 <hal_timer_init+0x44>)
   3384a:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   3384c:	490a      	ldr	r1, [pc, #40]	; (33878 <hal_timer_init+0x48>)
   3384e:	6791      	str	r1, [r2, #120]	; 0x78
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   33850:	4a0a      	ldr	r2, [pc, #40]	; (3387c <hal_timer_init+0x4c>)
   33852:	21e0      	movs	r1, #224	; 0xe0
   33854:	f882 130e 	strb.w	r1, [r2, #782]	; 0x30e
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   33858:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   3385c:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   33860:	6011      	str	r1, [r2, #0]
        NVIC_ClearPendingIRQ(CTIMER_IRQn);
        NVIC_EnableIRQ(CTIMER_IRQn);
    }

    bsp_cfg = vcfg;
    bsp_timer->cfg = *bsp_cfg;
   33862:	7822      	ldrb	r2, [r4, #0]
   33864:	721a      	strb	r2, [r3, #8]

    return 0;
   33866:	2000      	movs	r0, #0
}
   33868:	bd10      	pop	{r4, pc}
        return SYS_EINVAL;
   3386a:	f06f 0001 	mvn.w	r0, #1
   3386e:	e7fb      	b.n	33868 <hal_timer_init+0x38>
   33870:	10005e70 	.word	0x10005e70
   33874:	e000ed00 	.word	0xe000ed00
   33878:	0003380d 	.word	0x0003380d
   3387c:	e000e100 	.word	0xe000e100

00033880 <hal_timer_config>:
 *
 * @return int
 */
int
hal_timer_config(int timer_num, uint32_t freq_hz)
{
   33880:	b570      	push	{r4, r5, r6, lr}
   33882:	b082      	sub	sp, #8
   33884:	460d      	mov	r5, r1
    uint32_t cont_cfg;
    uint32_t once_cfg;
    uint32_t sdk_cfg;
    int rc;

    bsp_timer = apollo3_timer_resolve(timer_num);
   33886:	f7ff feb7 	bl	335f8 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
   3388a:	b370      	cbz	r0, 338ea <hal_timer_config+0x6a>
   3388c:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    rc = apollo3_timer_sdk_cfg(&bsp_timer->cfg, freq_hz, &bsp_timer->freq_hz,
   3388e:	ab01      	add	r3, sp, #4
   33890:	f100 020c 	add.w	r2, r0, #12
   33894:	4629      	mov	r1, r5
   33896:	3008      	adds	r0, #8
   33898:	f7ff fed6 	bl	33648 <apollo3_timer_sdk_cfg>
                               &sdk_cfg);
    if (rc != 0) {
   3389c:	4605      	mov	r5, r0
   3389e:	b110      	cbz	r0, 338a6 <hal_timer_config+0x26>

    /* Start the continuous timer. */
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);

    return 0;
}
   338a0:	4628      	mov	r0, r5
   338a2:	b002      	add	sp, #8
   338a4:	bd70      	pop	{r4, r5, r6, pc}
    cont_cfg = sdk_cfg | AM_HAL_CTIMER_FN_CONTINUOUS;
   338a6:	9e01      	ldr	r6, [sp, #4]
   338a8:	f446 76c0 	orr.w	r6, r6, #384	; 0x180
    am_hal_ctimer_clear(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   338ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   338b0:	7c20      	ldrb	r0, [r4, #16]
   338b2:	f000 f931 	bl	33b18 <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH,
   338b6:	4632      	mov	r2, r6
   338b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   338bc:	7c20      	ldrb	r0, [r4, #16]
   338be:	f000 f8ab 	bl	33a18 <am_hal_ctimer_config_single>
    once_cfg = sdk_cfg | AM_HAL_CTIMER_FN_ONCE | AM_HAL_CTIMER_INT_ENABLE;
   338c2:	9e01      	ldr	r6, [sp, #4]
   338c4:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   338c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   338cc:	7c60      	ldrb	r0, [r4, #17]
   338ce:	f000 f923 	bl	33b18 <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
   338d2:	4632      	mov	r2, r6
   338d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   338d8:	7c60      	ldrb	r0, [r4, #17]
   338da:	f000 f89d 	bl	33a18 <am_hal_ctimer_config_single>
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   338de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   338e2:	7c20      	ldrb	r0, [r4, #16]
   338e4:	f000 f8d8 	bl	33a98 <am_hal_ctimer_start>
    return 0;
   338e8:	e7da      	b.n	338a0 <hal_timer_config+0x20>
        return SYS_EINVAL;
   338ea:	f06f 0501 	mvn.w	r5, #1
   338ee:	e7d7      	b.n	338a0 <hal_timer_config+0x20>

000338f0 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   338f0:	b508      	push	{r3, lr}
    return SYS_EINVAL;
#endif

    const struct apollo3_timer *bsp_timer;

    bsp_timer = apollo3_timer_resolve(timer_num);
   338f2:	f7ff fe81 	bl	335f8 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
   338f6:	b138      	cbz	r0, 33908 <hal_timer_read+0x18>
   338f8:	4603      	mov	r3, r0
        return 0;
    }

    if (bsp_timer->freq_hz == 0) {
   338fa:	68c0      	ldr	r0, [r0, #12]
   338fc:	b900      	cbnz	r0, 33900 <hal_timer_read+0x10>
        /* Timer not enabled. */
        return 0;
    }

    return apollo3_timer_cur_ticks(bsp_timer);
}
   338fe:	bd08      	pop	{r3, pc}
    return apollo3_timer_cur_ticks(bsp_timer);
   33900:	4618      	mov	r0, r3
   33902:	f7ff fee9 	bl	336d8 <apollo3_timer_cur_ticks>
   33906:	e7fa      	b.n	338fe <hal_timer_read+0xe>
        return 0;
   33908:	2000      	movs	r0, #0
   3390a:	e7f8      	b.n	338fe <hal_timer_read+0xe>

0003390c <hal_timer_set_cb>:
 * @return int
 */
int
hal_timer_set_cb(int timer_num, struct hal_timer *timer, hal_timer_cb cb_func,
                 void *arg)
{
   3390c:	b570      	push	{r4, r5, r6, lr}
   3390e:	460c      	mov	r4, r1
   33910:	4616      	mov	r6, r2
   33912:	461d      	mov	r5, r3
    return SYS_EINVAL;
#endif

    struct apollo3_timer *bsp_timer;

    bsp_timer = apollo3_timer_resolve(timer_num);
   33914:	f7ff fe70 	bl	335f8 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
   33918:	b128      	cbz	r0, 33926 <hal_timer_set_cb+0x1a>
        return SYS_EINVAL;
    }

    timer->cb_func = cb_func;
   3391a:	6066      	str	r6, [r4, #4]
    timer->cb_arg = arg;
   3391c:	60a5      	str	r5, [r4, #8]
    timer->bsp_timer = bsp_timer;
   3391e:	6020      	str	r0, [r4, #0]
    timer->link.tqe_prev = NULL;
   33920:	2000      	movs	r0, #0
   33922:	6160      	str	r0, [r4, #20]

    return 0;
}
   33924:	bd70      	pop	{r4, r5, r6, pc}
        return SYS_EINVAL;
   33926:	f06f 0001 	mvn.w	r0, #1
   3392a:	e7fb      	b.n	33924 <hal_timer_set_cb+0x18>

0003392c <hal_timer_start_at>:
 *
 * @return int
 */
int
hal_timer_start_at(struct hal_timer *timer, uint32_t tick)
{
   3392c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33930:	4604      	mov	r4, r0
   33932:	460f      	mov	r7, r1

    struct apollo3_timer *bsp_timer;
    struct hal_timer *cur;
    os_sr_t sr;

    bsp_timer = timer->bsp_timer;
   33934:	6806      	ldr	r6, [r0, #0]
    timer->expiry = tick;
   33936:	60c1      	str	r1, [r0, #12]

    OS_ENTER_CRITICAL(sr);
   33938:	f7e6 ffb6 	bl	1a8a8 <os_arch_save_sr>
   3393c:	4680      	mov	r8, r0

    if (TAILQ_EMPTY(&bsp_timer->hal_timer_q)) {
   3393e:	6833      	ldr	r3, [r6, #0]
   33940:	b93b      	cbnz	r3, 33952 <hal_timer_start_at+0x26>
        TAILQ_INSERT_HEAD(&bsp_timer->hal_timer_q, timer, link);
   33942:	4622      	mov	r2, r4
   33944:	f842 3f10 	str.w	r3, [r2, #16]!
   33948:	6072      	str	r2, [r6, #4]
   3394a:	6034      	str	r4, [r6, #0]
   3394c:	6166      	str	r6, [r4, #20]
   3394e:	e00f      	b.n	33970 <hal_timer_start_at+0x44>
    } else {
        TAILQ_FOREACH(cur, &bsp_timer->hal_timer_q, link) {
   33950:	691b      	ldr	r3, [r3, #16]
   33952:	b163      	cbz	r3, 3396e <hal_timer_start_at+0x42>
            if ((int32_t)(timer->expiry - cur->expiry) < 0) {
   33954:	68e2      	ldr	r2, [r4, #12]
   33956:	68dd      	ldr	r5, [r3, #12]
   33958:	1b52      	subs	r2, r2, r5
   3395a:	2a00      	cmp	r2, #0
   3395c:	daf8      	bge.n	33950 <hal_timer_start_at+0x24>
                TAILQ_INSERT_BEFORE(cur, timer, link);
   3395e:	695a      	ldr	r2, [r3, #20]
   33960:	6162      	str	r2, [r4, #20]
   33962:	6123      	str	r3, [r4, #16]
   33964:	695a      	ldr	r2, [r3, #20]
   33966:	6014      	str	r4, [r2, #0]
   33968:	f104 0210 	add.w	r2, r4, #16
   3396c:	615a      	str	r2, [r3, #20]
                break;
            }
        }
        if (cur == NULL) {
   3396e:	b143      	cbz	r3, 33982 <hal_timer_start_at+0x56>
            TAILQ_INSERT_TAIL(&bsp_timer->hal_timer_q, timer, link);
        }
    }

    if (timer == TAILQ_FIRST(&bsp_timer->hal_timer_q)) {
   33970:	6833      	ldr	r3, [r6, #0]
   33972:	42a3      	cmp	r3, r4
   33974:	d00d      	beq.n	33992 <hal_timer_start_at+0x66>
        apollo3_timer_set_ocmp_at(bsp_timer, tick);
    }

    OS_EXIT_CRITICAL(sr);
   33976:	4640      	mov	r0, r8
   33978:	f7e6 ff9c 	bl	1a8b4 <os_arch_restore_sr>

    return 0;
}
   3397c:	2000      	movs	r0, #0
   3397e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            TAILQ_INSERT_TAIL(&bsp_timer->hal_timer_q, timer, link);
   33982:	6123      	str	r3, [r4, #16]
   33984:	6873      	ldr	r3, [r6, #4]
   33986:	6163      	str	r3, [r4, #20]
   33988:	601c      	str	r4, [r3, #0]
   3398a:	f104 0310 	add.w	r3, r4, #16
   3398e:	6073      	str	r3, [r6, #4]
   33990:	e7ee      	b.n	33970 <hal_timer_start_at+0x44>
        apollo3_timer_set_ocmp_at(bsp_timer, tick);
   33992:	4639      	mov	r1, r7
   33994:	4630      	mov	r0, r6
   33996:	f7ff fed6 	bl	33746 <apollo3_timer_set_ocmp_at>
   3399a:	e7ec      	b.n	33976 <hal_timer_start_at+0x4a>

0003399c <hal_timer_stop>:
    struct apollo3_timer *bsp_timer;
    int reset_ocmp;
    os_sr_t sr;

    /* If timer's prev pointer is null, the timer hasn't been started. */
    if (timer->link.tqe_prev == NULL) {
   3399c:	6943      	ldr	r3, [r0, #20]
   3399e:	b303      	cbz	r3, 339e2 <hal_timer_stop+0x46>
{
   339a0:	b570      	push	{r4, r5, r6, lr}
   339a2:	4604      	mov	r4, r0
        return 0;
    }

    bsp_timer = timer->bsp_timer;
   339a4:	6806      	ldr	r6, [r0, #0]

    OS_ENTER_CRITICAL(sr);
   339a6:	f7e6 ff7f 	bl	1a8a8 <os_arch_save_sr>
   339aa:	4605      	mov	r5, r0
    if (timer == TAILQ_FIRST(&bsp_timer->hal_timer_q)) {
        /* If first on queue, we will need to reset OCMP */
        reset_ocmp = 1;
    }

    TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   339ac:	6923      	ldr	r3, [r4, #16]
   339ae:	b18b      	cbz	r3, 339d4 <hal_timer_stop+0x38>
   339b0:	6962      	ldr	r2, [r4, #20]
   339b2:	615a      	str	r2, [r3, #20]
   339b4:	6963      	ldr	r3, [r4, #20]
   339b6:	6922      	ldr	r2, [r4, #16]
   339b8:	601a      	str	r2, [r3, #0]
    timer->link.tqe_prev = NULL;
   339ba:	2300      	movs	r3, #0
   339bc:	6163      	str	r3, [r4, #20]

    if (reset_ocmp) {
        timer = TAILQ_FIRST(&bsp_timer->hal_timer_q);
   339be:	6833      	ldr	r3, [r6, #0]
        if (timer != NULL) {
   339c0:	b15b      	cbz	r3, 339da <hal_timer_stop+0x3e>
            apollo3_timer_set_ocmp_at(bsp_timer, timer->expiry);
   339c2:	68d9      	ldr	r1, [r3, #12]
   339c4:	4630      	mov	r0, r6
   339c6:	f7ff febe 	bl	33746 <apollo3_timer_set_ocmp_at>
        } else {
            apollo3_timer_clear_ocmp(bsp_timer);
        }
    }

    OS_EXIT_CRITICAL(sr);
   339ca:	4628      	mov	r0, r5
   339cc:	f7e6 ff72 	bl	1a8b4 <os_arch_restore_sr>

    return 0;
}
   339d0:	2000      	movs	r0, #0
   339d2:	bd70      	pop	{r4, r5, r6, pc}
    TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   339d4:	6963      	ldr	r3, [r4, #20]
   339d6:	6073      	str	r3, [r6, #4]
   339d8:	e7ec      	b.n	339b4 <hal_timer_stop+0x18>
            apollo3_timer_clear_ocmp(bsp_timer);
   339da:	4630      	mov	r0, r6
   339dc:	f7ff fed4 	bl	33788 <apollo3_timer_clear_ocmp>
   339e0:	e7f3      	b.n	339ca <hal_timer_stop+0x2e>
}
   339e2:	2000      	movs	r0, #0
   339e4:	4770      	bx	lr

000339e6 <hal_watchdog_init>:
int
hal_watchdog_init(uint32_t expire_msecs)
{
    /* XXX: Unimplemented. */
    return 0;
}
   339e6:	2000      	movs	r0, #0
   339e8:	4770      	bx	lr

000339ea <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    /* XXX: Unimplemented. */
}
   339ea:	4770      	bx	lr

000339ec <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    /* XXX: Unimplemented. */
}
   339ec:	4770      	bx	lr
	...

000339f0 <ctimer_clr>:
// the CLR bit at that time.
//
//*****************************************************************************
static void
ctimer_clr(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   339f0:	b570      	push	{r4, r5, r6, lr}
   339f2:	b082      	sub	sp, #8
   339f4:	460c      	mov	r4, r1
    //
    // Find the address of the correct control register and set the CLR bit
    // for the timer segment in that control register.
    //
    volatile uint32_t *pui32ConfigReg =
        (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   339f6:	0145      	lsls	r5, r0, #5
   339f8:	4e06      	ldr	r6, [pc, #24]	; (33a14 <ctimer_clr+0x24>)

    AM_CRITICAL_BEGIN
   339fa:	f000 f9d5 	bl	33da8 <am_hal_interrupt_master_disable>
   339fe:	9001      	str	r0, [sp, #4]
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
   33a00:	59a9      	ldr	r1, [r5, r6]
   33a02:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
   33a06:	430c      	orrs	r4, r1
   33a08:	51ac      	str	r4, [r5, r6]
                                  (CTIMER_CTRL0_TMRA0CLR_Msk |
                                   CTIMER_CTRL0_TMRB0CLR_Msk));
    AM_CRITICAL_END
   33a0a:	9801      	ldr	r0, [sp, #4]
   33a0c:	f000 f9d0 	bl	33db0 <am_hal_interrupt_master_set>

} // ctimer_clr()
   33a10:	b002      	add	sp, #8
   33a12:	bd70      	pop	{r4, r5, r6, pc}
   33a14:	4000800c 	.word	0x4000800c

00033a18 <am_hal_ctimer_config_single>:
//*****************************************************************************
void
am_hal_ctimer_config_single(uint32_t ui32TimerNumber,
                            uint32_t ui32TimerSegment,
                            uint32_t ui32ConfigVal)
{
   33a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33a1c:	b082      	sub	sp, #8
   33a1e:	4606      	mov	r6, r0
   33a20:	460c      	mov	r4, r1
   33a22:	4615      	mov	r5, r2

    //
    // Make sure the timer is completely initialized on configuration by
    // setting the CLR bit.
    //
    ctimer_clr(ui32TimerNumber, ui32TimerSegment);
   33a24:	f7ff ffe4 	bl	339f0 <ctimer_clr>

    //
    // Find the correct register to write based on the timer number.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   33a28:	ea4f 1846 	mov.w	r8, r6, lsl #5
   33a2c:	4f18      	ldr	r7, [pc, #96]	; (33a90 <am_hal_ctimer_config_single+0x78>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
   33a2e:	f000 f9bb 	bl	33da8 <am_hal_interrupt_master_disable>
   33a32:	9001      	str	r0, [sp, #4]
    uint32_t ui32WriteVal;

    //
    // Save the value that's already in the register.
    //
    ui32WriteVal = AM_REGVAL(pui32ConfigReg);
   33a34:	f858 3007 	ldr.w	r3, [r8, r7]

    //
    // If we're working with TIMERB, we need to shift our configuration value
    // up by 16 bits.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   33a38:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   33a3c:	d017      	beq.n	33a6e <am_hal_ctimer_config_single+0x56>

    //
    // Replace part of the saved register value with the configuration value
    // from the caller.
    //
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
   33a3e:	ea23 0304 	bic.w	r3, r3, r4
   33a42:	432b      	orrs	r3, r5

    //
    // If we're configuring both timers, we need to set the "link" bit.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_BOTH )
   33a44:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   33a48:	d013      	beq.n	33a72 <am_hal_ctimer_config_single+0x5a>
    }

    //
    // Write our completed configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
   33a4a:	f848 3007 	str.w	r3, [r8, r7]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   33a4e:	9801      	ldr	r0, [sp, #4]
   33a50:	f000 f9ae 	bl	33db0 <am_hal_interrupt_master_set>

    //
    // Save the clock source for this timer.
    //
    switch ( ui32TimerSegment )
   33a54:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   33a58:	d010      	beq.n	33a7c <am_hal_ctimer_config_single+0x64>
   33a5a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   33a5e:	d015      	beq.n	33a8c <am_hal_ctimer_config_single+0x74>
   33a60:	f64f 73ff 	movw	r3, #65535	; 0xffff
   33a64:	429c      	cmp	r4, r3
   33a66:	d007      	beq.n	33a78 <am_hal_ctimer_config_single+0x60>
    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;

} // am_hal_ctimer_config_single()
   33a68:	b002      	add	sp, #8
   33a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ui32ConfigVal = ((ui32ConfigVal & 0xFFFF) << 16);
   33a6e:	042d      	lsls	r5, r5, #16
   33a70:	e7e5      	b.n	33a3e <am_hal_ctimer_config_single+0x26>
        ui32WriteVal |= AM_HAL_CTIMER_LINK;
   33a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   33a76:	e7e8      	b.n	33a4a <am_hal_ctimer_config_single+0x32>
    switch ( ui32TimerSegment )
   33a78:	2300      	movs	r3, #0
   33a7a:	e000      	b.n	33a7e <am_hal_ctimer_config_single+0x66>
            ui32Seg = 1;
   33a7c:	2301      	movs	r3, #1
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;
   33a7e:	f3c5 0544 	ubfx	r5, r5, #1, #5
   33a82:	4804      	ldr	r0, [pc, #16]	; (33a94 <am_hal_ctimer_config_single+0x7c>)
   33a84:	eb00 0646 	add.w	r6, r0, r6, lsl #1
   33a88:	54f5      	strb	r5, [r6, r3]
   33a8a:	e7ed      	b.n	33a68 <am_hal_ctimer_config_single+0x50>
    switch ( ui32TimerSegment )
   33a8c:	2300      	movs	r3, #0
   33a8e:	e7f6      	b.n	33a7e <am_hal_ctimer_config_single+0x66>
   33a90:	4000800c 	.word	0x4000800c
   33a94:	10000880 	.word	0x10000880

00033a98 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   33a98:	b5f0      	push	{r4, r5, r6, r7, lr}
   33a9a:	b083      	sub	sp, #12
   33a9c:	4605      	mov	r5, r0
   33a9e:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   33aa0:	0147      	lsls	r7, r0, #5
   33aa2:	4e10      	ldr	r6, [pc, #64]	; (33ae4 <am_hal_ctimer_start+0x4c>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
   33aa4:	f000 f980 	bl	33da8 <am_hal_interrupt_master_disable>
   33aa8:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    uint32_t ui32ConfigVal = *pui32ConfigReg;
   33aaa:	59bb      	ldr	r3, [r7, r6]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (CTIMER_CTRL0_TMRA0CLR_Msk |
   33aac:	f004 2208 	and.w	r2, r4, #134219776	; 0x8000800
   33ab0:	ea23 0202 	bic.w	r2, r3, r2
                                           CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (CTIMER_CTRL0_TMRA0EN_Msk |
   33ab4:	f004 1301 	and.w	r3, r4, #65537	; 0x10001
   33ab8:	4313      	orrs	r3, r2
                                          CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // While we already have the CTRL reg, get and save the CLKSRC.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   33aba:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   33abe:	d00c      	beq.n	33ada <am_hal_ctimer_start+0x42>
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
    }
    else
    {
        ui32Seg = 0;
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32ConfigVal);
   33ac0:	f3c3 0144 	ubfx	r1, r3, #1, #5
        ui32Seg = 0;
   33ac4:	2200      	movs	r2, #0
    }

    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui32ClkSrc;
   33ac6:	4808      	ldr	r0, [pc, #32]	; (33ae8 <am_hal_ctimer_start+0x50>)
   33ac8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
   33acc:	54a9      	strb	r1, [r5, r2]

    //
    // Write the configuration to start the timer.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
   33ace:	51bb      	str	r3, [r7, r6]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   33ad0:	9801      	ldr	r0, [sp, #4]
   33ad2:	f000 f96d 	bl	33db0 <am_hal_interrupt_master_set>

} // am_hal_ctimer_start()
   33ad6:	b003      	add	sp, #12
   33ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
   33ada:	f3c3 4144 	ubfx	r1, r3, #17, #5
        ui32Seg = 1;
   33ade:	2201      	movs	r2, #1
   33ae0:	e7f1      	b.n	33ac6 <am_hal_ctimer_start+0x2e>
   33ae2:	bf00      	nop
   33ae4:	4000800c 	.word	0x4000800c
   33ae8:	10000880 	.word	0x10000880

00033aec <am_hal_ctimer_stop>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_stop(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   33aec:	b570      	push	{r4, r5, r6, lr}
   33aee:	b082      	sub	sp, #8
   33af0:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   33af2:	0145      	lsls	r5, r0, #5
   33af4:	4e07      	ldr	r6, [pc, #28]	; (33b14 <am_hal_ctimer_stop+0x28>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   33af6:	f000 f957 	bl	33da8 <am_hal_interrupt_master_disable>
   33afa:	9001      	str	r0, [sp, #4]

    //
    // Clear the "enable" bit
    //
    AM_REGVAL(pui32ConfigReg) &= ~(ui32TimerSegment &
   33afc:	59a9      	ldr	r1, [r5, r6]
   33afe:	f004 1401 	and.w	r4, r4, #65537	; 0x10001
   33b02:	ea21 0404 	bic.w	r4, r1, r4
   33b06:	51ac      	str	r4, [r5, r6]
                                    CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   33b08:	9801      	ldr	r0, [sp, #4]
   33b0a:	f000 f951 	bl	33db0 <am_hal_interrupt_master_set>

} // am_hal_ctimer_stop()
   33b0e:	b002      	add	sp, #8
   33b10:	bd70      	pop	{r4, r5, r6, pc}
   33b12:	bf00      	nop
   33b14:	4000800c 	.word	0x4000800c

00033b18 <am_hal_ctimer_clear>:
//!
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   33b18:	b570      	push	{r4, r5, r6, lr}
   33b1a:	b082      	sub	sp, #8
   33b1c:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   33b1e:	0145      	lsls	r5, r0, #5
   33b20:	4e06      	ldr	r6, [pc, #24]	; (33b3c <am_hal_ctimer_clear+0x24>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   33b22:	f000 f941 	bl	33da8 <am_hal_interrupt_master_disable>
   33b26:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
   33b28:	59a9      	ldr	r1, [r5, r6]
   33b2a:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
   33b2e:	430c      	orrs	r4, r1
   33b30:	51ac      	str	r4, [r5, r6]
                                   CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   33b32:	9801      	ldr	r0, [sp, #4]
   33b34:	f000 f93c 	bl	33db0 <am_hal_interrupt_master_set>

} // am_hal_ctimer_clear()
   33b38:	b002      	add	sp, #8
   33b3a:	bd70      	pop	{r4, r5, r6, pc}
   33b3c:	4000800c 	.word	0x4000800c

00033b40 <am_hal_ctimer_read>:
//! @return Current timer value.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_read(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   33b40:	b530      	push	{r4, r5, lr}
   33b42:	b085      	sub	sp, #20
   33b44:	4602      	mov	r2, r0
   33b46:	460c      	mov	r4, r1
    uint32_t ui32Values[3];

    //
    // Determine the timer segment.
    //
    ui32Seg = ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB ) ? 1 : 0;
   33b48:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
   33b4c:	bf14      	ite	ne
   33b4e:	2100      	movne	r1, #0
   33b50:	2101      	moveq	r1, #1

    //
    // Get the address of the register for this timer.
    //
    ui32TmrAddr = g_ui32TMRAddrTbl[ui32TimerNumber];
   33b52:	4b1c      	ldr	r3, [pc, #112]	; (33bc4 <am_hal_ctimer_read+0x84>)
   33b54:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

    //
    // Get the clock source for this timer.
    //
    ui8ClkSrc = g_ui8ClkSrc[ui32TimerNumber][ui32Seg];
   33b58:	4b1b      	ldr	r3, [pc, #108]	; (33bc8 <am_hal_ctimer_read+0x88>)
   33b5a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   33b5e:	5c5b      	ldrb	r3, [r3, r1]

    if ( ui8ClkSrc == 0xFF )
   33b60:	2bff      	cmp	r3, #255	; 0xff
   33b62:	d018      	beq.n	33b96 <am_hal_ctimer_read+0x56>
    }

    //
    // Based on the source clock, mask off bits not needed for the comparison.
    //
    ui32ClkMsk = g_ui8TmrClkSrcMask[ui8ClkSrc & _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, 0xFFFFFFFF)];
   33b64:	f003 031f 	and.w	r3, r3, #31
   33b68:	4a18      	ldr	r2, [pc, #96]	; (33bcc <am_hal_ctimer_read+0x8c>)
   33b6a:	5cd3      	ldrb	r3, [r2, r3]

    if ( ui32ClkMsk != 0 )
   33b6c:	b30b      	cbz	r3, 33bb2 <am_hal_ctimer_read+0x72>
    {
        if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
   33b6e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   33b72:	6b52      	ldr	r2, [r2, #52]	; 0x34
   33b74:	f012 0f04 	tst.w	r2, #4
   33b78:	d002      	beq.n	33b80 <am_hal_ctimer_read+0x40>
        {
            //
            // In burst mode, extend the mask by 1 bit.
            //
            ui32ClkMsk <<= 1;
   33b7a:	005b      	lsls	r3, r3, #1
            ui32ClkMsk |= 0x1;
   33b7c:	f043 0301 	orr.w	r3, r3, #1
        }

        //
        // Invert the mask so that the unneeded bits can be masked off.
        //
        ui32ClkMsk = ~ui32ClkMsk;
   33b80:	43dd      	mvns	r5, r3

        //
        // Read the register into ui32Values[].
        //
        am_hal_triple_read(ui32TmrAddr, ui32Values);
   33b82:	a901      	add	r1, sp, #4
   33b84:	f000 f902 	bl	33d8c <am_hal_triple_read>
        //
        // Now determine which of the three values is the correct value.
        // If the first 2 match, then the values are both correct and we're done.
        // Otherwise, the third value is taken to be the correct value.
        //
        if ( (ui32Values[0] & ui32ClkMsk)  == (ui32Values[1] & ui32ClkMsk) )
   33b88:	9802      	ldr	r0, [sp, #8]
   33b8a:	9b01      	ldr	r3, [sp, #4]
   33b8c:	4043      	eors	r3, r0
   33b8e:	422b      	tst	r3, r5
   33b90:	d010      	beq.n	33bb4 <am_hal_ctimer_read+0x74>
            //
            ui32RetVal = ui32Values[1];
        }
        else
        {
            ui32RetVal = ui32Values[2];
   33b92:	9803      	ldr	r0, [sp, #12]
   33b94:	e00e      	b.n	33bb4 <am_hal_ctimer_read+0x74>
        ui32Ctrl = AM_REGVAL(ui32TmrAddr + 0xC);
   33b96:	68c3      	ldr	r3, [r0, #12]
        if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   33b98:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   33b9c:	d006      	beq.n	33bac <am_hal_ctimer_read+0x6c>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32Ctrl);
   33b9e:	f3c3 0344 	ubfx	r3, r3, #1, #5
        g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui8ClkSrc;
   33ba2:	4d09      	ldr	r5, [pc, #36]	; (33bc8 <am_hal_ctimer_read+0x88>)
   33ba4:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   33ba8:	5453      	strb	r3, [r2, r1]
   33baa:	e7db      	b.n	33b64 <am_hal_ctimer_read+0x24>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32Ctrl);
   33bac:	f3c3 4344 	ubfx	r3, r3, #17, #5
   33bb0:	e7f7      	b.n	33ba2 <am_hal_ctimer_read+0x62>
    else
    {
        //
        // No need for the workaround.  Just read and return the register.
        //
        ui32RetVal = AM_REGVAL(ui32TmrAddr);
   33bb2:	6800      	ldr	r0, [r0, #0]
    }

    //
    // Get the correct return value
    //
    ui32RetVal &= ui32TimerSegment;
   33bb4:	4020      	ands	r0, r4

    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   33bb6:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   33bba:	d001      	beq.n	33bc0 <am_hal_ctimer_read+0x80>
        ui32RetVal >>= 16;
    }

    return ui32RetVal;

} // am_hal_ctimer_read()
   33bbc:	b005      	add	sp, #20
   33bbe:	bd30      	pop	{r4, r5, pc}
        ui32RetVal >>= 16;
   33bc0:	0c00      	lsrs	r0, r0, #16
    return ui32RetVal;
   33bc2:	e7fb      	b.n	33bbc <am_hal_ctimer_read+0x7c>
   33bc4:	00039c48 	.word	0x00039c48
   33bc8:	10000880 	.word	0x10000880
   33bcc:	00039c68 	.word	0x00039c68

00033bd0 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
   33bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   33bd4:	b083      	sub	sp, #12
   33bd6:	460d      	mov	r5, r1
   33bd8:	4614      	mov	r4, r2
   33bda:	461f      	mov	r7, r3

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   33bdc:	0146      	lsls	r6, r0, #5

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRA0);
   33bde:	f8df 807c 	ldr.w	r8, [pc, #124]	; 33c5c <am_hal_ctimer_period_set+0x8c>

    pui32CompareRegB = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRB0);
   33be2:	f8df 907c 	ldr.w	r9, [pc, #124]	; 33c60 <am_hal_ctimer_period_set+0x90>

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   33be6:	f000 f8df 	bl	33da8 <am_hal_interrupt_master_disable>
   33bea:	9001      	str	r0, [sp, #4]

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
   33bec:	4b1a      	ldr	r3, [pc, #104]	; (33c58 <am_hal_ctimer_period_set+0x88>)
   33bee:	58f2      	ldr	r2, [r6, r3]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   33bf0:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
   33bf4:	d007      	beq.n	33c06 <am_hal_ctimer_period_set+0x36>
    }

    //
    // Mask to get to the bits we're interested in.
    //
    ui32Mode = ui32Mode & CTIMER_CTRL0_TMRA0FN_Msk;
   33bf6:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
   33bfa:	2a80      	cmp	r2, #128	; 0x80
   33bfc:	d005      	beq.n	33c0a <am_hal_ctimer_period_set+0x3a>
   33bfe:	2ac0      	cmp	r2, #192	; 0xc0
   33c00:	d003      	beq.n	33c0a <am_hal_ctimer_period_set+0x3a>
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
   33c02:	2300      	movs	r3, #0
   33c04:	e003      	b.n	33c0e <am_hal_ctimer_period_set+0x3e>
        ui32Mode = ui32Mode >> 16;
   33c06:	0c12      	lsrs	r2, r2, #16
   33c08:	e7f5      	b.n	33bf6 <am_hal_ctimer_period_set+0x26>
        ui32Comp1 = ui32Period;
   33c0a:	4623      	mov	r3, r4
        ui32Comp0 = ui32Period - ui32OnTime;
   33c0c:	1be4      	subs	r4, r4, r7

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
   33c0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   33c12:	4295      	cmp	r5, r2
   33c14:	d013      	beq.n	33c3e <am_hal_ctimer_period_set+0x6e>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   33c16:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
   33c1a:	d016      	beq.n	33c4a <am_hal_ctimer_period_set+0x7a>
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   33c1c:	b2a2      	uxth	r2, r4
   33c1e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   33c22:	f846 2008 	str.w	r2, [r6, r8]
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));

        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1 >> 16));
   33c26:	0c1b      	lsrs	r3, r3, #16
   33c28:	041b      	lsls	r3, r3, #16
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
   33c2a:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
   33c2e:	f846 3009 	str.w	r3, [r6, r9]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   33c32:	9801      	ldr	r0, [sp, #4]
   33c34:	f000 f8bc 	bl	33db0 <am_hal_interrupt_master_set>

} // am_hal_ctimer_period_set()
   33c38:	b003      	add	sp, #12
   33c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   33c3e:	b2a4      	uxth	r4, r4
   33c40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   33c44:	f846 3008 	str.w	r3, [r6, r8]
   33c48:	e7f3      	b.n	33c32 <am_hal_ctimer_period_set+0x62>
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   33c4a:	b2a4      	uxth	r4, r4
   33c4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   33c50:	f846 3009 	str.w	r3, [r6, r9]
   33c54:	e7ed      	b.n	33c32 <am_hal_ctimer_period_set+0x62>
   33c56:	bf00      	nop
   33c58:	4000800c 	.word	0x4000800c
   33c5c:	40008004 	.word	0x40008004
   33c60:	40008008 	.word	0x40008008

00033c64 <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
   33c64:	b510      	push	{r4, lr}
   33c66:	b082      	sub	sp, #8
   33c68:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   33c6a:	f000 f89d 	bl	33da8 <am_hal_interrupt_master_disable>
   33c6e:	9001      	str	r0, [sp, #4]

    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN |= ui32Interrupt;
   33c70:	4a05      	ldr	r2, [pc, #20]	; (33c88 <am_hal_ctimer_int_enable+0x24>)
   33c72:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   33c76:	4323      	orrs	r3, r4
   33c78:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   33c7c:	9801      	ldr	r0, [sp, #4]
   33c7e:	f000 f897 	bl	33db0 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_enable()
   33c82:	b002      	add	sp, #8
   33c84:	bd10      	pop	{r4, pc}
   33c86:	bf00      	nop
   33c88:	40008000 	.word	0x40008000

00033c8c <am_hal_ctimer_int_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_disable(uint32_t ui32Interrupt)
{
   33c8c:	b510      	push	{r4, lr}
   33c8e:	b082      	sub	sp, #8
   33c90:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   33c92:	f000 f889 	bl	33da8 <am_hal_interrupt_master_disable>
   33c96:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN &= ~ui32Interrupt;
   33c98:	4a05      	ldr	r2, [pc, #20]	; (33cb0 <am_hal_ctimer_int_disable+0x24>)
   33c9a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   33c9e:	ea23 0304 	bic.w	r3, r3, r4
   33ca2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   33ca6:	9801      	ldr	r0, [sp, #4]
   33ca8:	f000 f882 	bl	33db0 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_disable()
   33cac:	b002      	add	sp, #8
   33cae:	bd10      	pop	{r4, pc}
   33cb0:	40008000 	.word	0x40008000

00033cb4 <am_hal_ctimer_int_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
   33cb4:	b510      	push	{r4, lr}
   33cb6:	b082      	sub	sp, #8
   33cb8:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   33cba:	f000 f875 	bl	33da8 <am_hal_interrupt_master_disable>
   33cbe:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTCLR = ui32Interrupt;
   33cc0:	4b03      	ldr	r3, [pc, #12]	; (33cd0 <am_hal_ctimer_int_clear+0x1c>)
   33cc2:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   33cc6:	9801      	ldr	r0, [sp, #4]
   33cc8:	f000 f872 	bl	33db0 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_clear()
   33ccc:	b002      	add	sp, #8
   33cce:	bd10      	pop	{r4, pc}
   33cd0:	40008000 	.word	0x40008000

00033cd4 <am_hal_ctimer_int_set>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_set(uint32_t ui32Interrupt)
{
   33cd4:	b510      	push	{r4, lr}
   33cd6:	b082      	sub	sp, #8
   33cd8:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   33cda:	f000 f865 	bl	33da8 <am_hal_interrupt_master_disable>
   33cde:	9001      	str	r0, [sp, #4]

    //
    // Set the interrupts.
    //
    CTIMERn(0)->INTSET = ui32Interrupt;
   33ce0:	4b03      	ldr	r3, [pc, #12]	; (33cf0 <am_hal_ctimer_int_set+0x1c>)
   33ce2:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   33ce6:	9801      	ldr	r0, [sp, #4]
   33ce8:	f000 f862 	bl	33db0 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_set()
   33cec:	b002      	add	sp, #8
   33cee:	bd10      	pop	{r4, pc}
   33cf0:	40008000 	.word	0x40008000

00033cf4 <am_hal_ctimer_int_status_get>:
//! @return ui32RetVal either the timer interrupt status, or interrupt enabled.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_int_status_get(bool bEnabledOnly)
{
   33cf4:	b510      	push	{r4, lr}
   33cf6:	b082      	sub	sp, #8
   33cf8:	4604      	mov	r4, r0
    uint32_t ui32RetVal = 0;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   33cfa:	f000 f855 	bl	33da8 <am_hal_interrupt_master_disable>
   33cfe:	9001      	str	r0, [sp, #4]

    //
    // Return the desired status.
    //

    if ( bEnabledOnly )
   33d00:	b15c      	cbz	r4, 33d1a <am_hal_ctimer_int_status_get+0x26>
    {
        ui32RetVal  = CTIMERn(0)->INTSTAT;
   33d02:	4b08      	ldr	r3, [pc, #32]	; (33d24 <am_hal_ctimer_int_status_get+0x30>)
   33d04:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
        ui32RetVal &= CTIMERn(0)->INTEN;
   33d08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   33d0c:	401c      	ands	r4, r3
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   33d0e:	9801      	ldr	r0, [sp, #4]
   33d10:	f000 f84e 	bl	33db0 <am_hal_interrupt_master_set>

    return ui32RetVal;

} // am_hal_ctimer_int_status_get()
   33d14:	4620      	mov	r0, r4
   33d16:	b002      	add	sp, #8
   33d18:	bd10      	pop	{r4, pc}
        ui32RetVal = CTIMERn(0)->INTSTAT;
   33d1a:	4b02      	ldr	r3, [pc, #8]	; (33d24 <am_hal_ctimer_int_status_get+0x30>)
   33d1c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   33d20:	e7f5      	b.n	33d0e <am_hal_ctimer_int_status_get+0x1a>
   33d22:	bf00      	nop
   33d24:	40008000 	.word	0x40008000

00033d28 <am_hal_flash_page_erase>:
//
//*****************************************************************************
int
am_hal_flash_page_erase(uint32_t ui32ProgramKey, uint32_t ui32FlashInst,
                        uint32_t ui32PageNum)
{
   33d28:	b508      	push	{r3, lr}
    return g_am_hal_flash.flash_page_erase(ui32ProgramKey,
   33d2a:	4b01      	ldr	r3, [pc, #4]	; (33d30 <am_hal_flash_page_erase+0x8>)
   33d2c:	4798      	blx	r3
                                           ui32FlashInst,
                                           ui32PageNum);
} // am_hal_flash_page_erase()
   33d2e:	bd08      	pop	{r3, pc}
   33d30:	08000051 	.word	0x08000051

00033d34 <am_hal_flash_program_main>:
//
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32ProgramKey, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
   33d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33d38:	b082      	sub	sp, #8
   33d3a:	4605      	mov	r5, r0
   33d3c:	4616      	mov	r6, r2
   33d3e:	461c      	mov	r4, r3
    uint32_t ui32MaxSrcAddr = (uint32_t)pui32Src + (ui32NumWords << 2);
   33d40:	eb01 0783 	add.w	r7, r1, r3, lsl #2

    //
    // Workaround, the last word of SRAM cannot be the source
    // of programming by BootRom, check to see if it is the last
    //
    if ( ui32MaxSrcAddr == ui32SramMaxAddr )
   33d44:	4b0f      	ldr	r3, [pc, #60]	; (33d84 <am_hal_flash_program_main+0x50>)
   33d46:	429f      	cmp	r7, r3
   33d48:	d005      	beq.n	33d56 <am_hal_flash_program_main+0x22>
                        &ui32Temp,
                        pui32Dst + ui32NumWords - 1,
                        1);
    }

    return g_am_hal_flash.flash_program_main(ui32ProgramKey, pui32Src,
   33d4a:	4623      	mov	r3, r4
   33d4c:	4c0e      	ldr	r4, [pc, #56]	; (33d88 <am_hal_flash_program_main+0x54>)
   33d4e:	47a0      	blx	r4
                                             pui32Dst, ui32NumWords);
} // am_hal_flash_program_main()
   33d50:	b002      	add	sp, #8
   33d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ( ui32NumWords > 1 )
   33d56:	2c01      	cmp	r4, #1
   33d58:	d905      	bls.n	33d66 <am_hal_flash_program_main+0x32>
            iRetVal = g_am_hal_flash.flash_program_main(
   33d5a:	1e63      	subs	r3, r4, #1
   33d5c:	f8df 8028 	ldr.w	r8, [pc, #40]	; 33d88 <am_hal_flash_program_main+0x54>
   33d60:	47c0      	blx	r8
            if ( iRetVal != 0 )
   33d62:	2800      	cmp	r0, #0
   33d64:	d1f4      	bne.n	33d50 <am_hal_flash_program_main+0x1c>
        ui32Temp = *(uint32_t *)(ui32MaxSrcAddr - 4);
   33d66:	f857 3c04 	ldr.w	r3, [r7, #-4]
   33d6a:	9301      	str	r3, [sp, #4]
                        pui32Dst + ui32NumWords - 1,
   33d6c:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   33d70:	3a01      	subs	r2, #1
        return g_am_hal_flash.flash_program_main(
   33d72:	2301      	movs	r3, #1
   33d74:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   33d78:	a901      	add	r1, sp, #4
   33d7a:	4628      	mov	r0, r5
   33d7c:	4c02      	ldr	r4, [pc, #8]	; (33d88 <am_hal_flash_program_main+0x54>)
   33d7e:	47a0      	blx	r4
   33d80:	e7e6      	b.n	33d50 <am_hal_flash_program_main+0x1c>
   33d82:	bf00      	nop
   33d84:	10060000 	.word	0x10060000
   33d88:	08000055 	.word	0x08000055

00033d8c <am_hal_triple_read>:
#elif defined(__GNUC_STDC_INLINE__)
__attribute__((naked))
void
am_hal_triple_read(uint32_t ui32TimerAddr, uint32_t ui32Data[])
{
    __asm
   33d8c:	b412      	push	{r1, r4}
   33d8e:	f3ef 8410 	mrs	r4, PRIMASK
   33d92:	b672      	cpsid	i
   33d94:	6801      	ldr	r1, [r0, #0]
   33d96:	6802      	ldr	r2, [r0, #0]
   33d98:	6803      	ldr	r3, [r0, #0]
   33d9a:	f384 8810 	msr	PRIMASK, r4
   33d9e:	bc11      	pop	{r0, r4}
   33da0:	6001      	str	r1, [r0, #0]
   33da2:	6042      	str	r2, [r0, #4]
   33da4:	6083      	str	r3, [r0, #8]
   33da6:	4770      	bx	lr

00033da8 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
   33da8:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
   33dac:	b672      	cpsid	i
    __asm("    bx lr");
   33dae:	4770      	bx	lr

00033db0 <am_hal_interrupt_master_set>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
   33db0:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
   33db4:	4770      	bx	lr
	...

00033db8 <am_hal_stimer_config>:
//! @return The 32-bit current config of the STimer Config register
//
//*****************************************************************************
uint32_t
am_hal_stimer_config(uint32_t ui32STimerConfig)
{
   33db8:	4603      	mov	r3, r0
    uint32_t ui32CurrVal;

    //
    // Read the current config
    //
    ui32CurrVal = CTIMER->STCFG;
   33dba:	4a03      	ldr	r2, [pc, #12]	; (33dc8 <am_hal_stimer_config+0x10>)
   33dbc:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140

    //
    // Write our configuration value.
    //
    CTIMER->STCFG = ui32STimerConfig;
   33dc0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        PWRCTRL->MISC_b.FORCEMEMVRLPTIMERS = 1;
    }
#endif

    return ui32CurrVal;
}
   33dc4:	4770      	bx	lr
   33dc6:	bf00      	nop
   33dc8:	40008000 	.word	0x40008000

00033dcc <am_hal_stimer_counter_get>:
//! @return The 32-bit value from the STimer counter register.
//
//*****************************************************************************
uint32_t
am_hal_stimer_counter_get(void)
{
   33dcc:	b500      	push	{lr}
   33dce:	b085      	sub	sp, #20
    uint32_t ui32RetVal;

    //
    // Read the register into ui32Values[].
    //
    am_hal_triple_read(ui32TmrAddr, ui32Values);
   33dd0:	a901      	add	r1, sp, #4
   33dd2:	4805      	ldr	r0, [pc, #20]	; (33de8 <am_hal_stimer_counter_get+0x1c>)
   33dd4:	f7ff ffda 	bl	33d8c <am_hal_triple_read>
    //
    // Now determine which of the three values is the correct value.
    // If the first 2 match, then the values are both correct and we're done.
    // Otherwise, the third value is taken to be the correct value.
    //
    if ( ui32Values[0] == ui32Values[1] )
   33dd8:	9802      	ldr	r0, [sp, #8]
   33dda:	9b01      	ldr	r3, [sp, #4]
   33ddc:	4283      	cmp	r3, r0
   33dde:	d000      	beq.n	33de2 <am_hal_stimer_counter_get+0x16>
        //
        ui32RetVal = ui32Values[1];
    }
    else
    {
        ui32RetVal = ui32Values[2];
   33de0:	9803      	ldr	r0, [sp, #12]
    }
    return ui32RetVal;
}
   33de2:	b005      	add	sp, #20
   33de4:	f85d fb04 	ldr.w	pc, [sp], #4
   33de8:	40008144 	.word	0x40008144

00033dec <am_hal_stimer_counter_clear>:
am_hal_stimer_counter_clear(void)
{
    //
    // Set the clear bit
    //
    CTIMER->STCFG |= CTIMER_STCFG_CLEAR_Msk;
   33dec:	4b06      	ldr	r3, [pc, #24]	; (33e08 <am_hal_stimer_counter_clear+0x1c>)
   33dee:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   33df2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
   33df6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

    //
    // Reset the clear bit
    //
    CTIMER->STCFG &= ~CTIMER_STCFG_CLEAR_Msk;
   33dfa:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   33dfe:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
   33e02:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
   33e06:	4770      	bx	lr
   33e08:	40008000 	.word	0x40008000

00033e0c <am_hal_stimer_compare_delta_set>:
am_hal_stimer_compare_delta_set(uint32_t ui32CmprInstance, uint32_t ui32Delta)
{
    uint32_t cfgVal;
    uint32_t numTries = 0;

    if ( ui32CmprInstance > 7 )
   33e0c:	2807      	cmp	r0, #7
   33e0e:	d900      	bls.n	33e12 <am_hal_stimer_compare_delta_set+0x6>
   33e10:	4770      	bx	lr
{
   33e12:	b5f0      	push	{r4, r5, r6, r7, lr}
   33e14:	b083      	sub	sp, #12
   33e16:	4605      	mov	r5, r0
   33e18:	460c      	mov	r4, r1
    // that delta value is at least > 1

    //
    // Start a critical section.
    //
    AM_CRITICAL_BEGIN
   33e1a:	f7ff ffc5 	bl	33da8 <am_hal_interrupt_master_disable>
   33e1e:	9001      	str	r0, [sp, #4]

    //
    // Get current CFG value
    //
    cfgVal = CTIMER->STCFG;
   33e20:	4b16      	ldr	r3, [pc, #88]	; (33e7c <am_hal_stimer_compare_delta_set+0x70>)
   33e22:	f8d3 6140 	ldr.w	r6, [r3, #320]	; 0x140

    //
    // Disable the compare if already enabled, when setting the new value
    //
    CTIMER->STCFG &= ~((AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance));
   33e26:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   33e2a:	f44f 7080 	mov.w	r0, #256	; 0x100
   33e2e:	40a8      	lsls	r0, r5
   33e30:	ea22 0200 	bic.w	r2, r2, r0
   33e34:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    uint32_t numTries = 0;
   33e38:	2100      	movs	r1, #0

    // In rare case the delta might not be effective
    // We retry if that is the case.
    // Allow for some variability in the value owing to execution latency
    while (numTries++ < 4)
   33e3a:	2903      	cmp	r1, #3
   33e3c:	f101 0101 	add.w	r1, r1, #1
   33e40:	d810      	bhi.n	33e64 <am_hal_stimer_compare_delta_set+0x58>
        uint32_t expVal;
        uint32_t expMax;
        uint32_t cmpVal;

        // Expected value
        expVal = CTIMER->STTMR + ui32Delta;
   33e42:	4b0e      	ldr	r3, [pc, #56]	; (33e7c <am_hal_stimer_compare_delta_set+0x70>)
   33e44:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   33e48:	4423      	add	r3, r4

        // Max allowed - taking care of latency
        expMax = expVal + 10;
   33e4a:	f103 070a 	add.w	r7, r3, #10

        //
        // Set the delta
        //
        AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance)) = ui32Delta;
   33e4e:	4a0c      	ldr	r2, [pc, #48]	; (33e80 <am_hal_stimer_compare_delta_set+0x74>)
   33e50:	442a      	add	r2, r5
   33e52:	0092      	lsls	r2, r2, #2
   33e54:	6014      	str	r4, [r2, #0]

        // Read back the compare value
        cmpVal = AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance));
   33e56:	6812      	ldr	r2, [r2, #0]

        // Make sure the value is in expected range
        if (!AM_HAL_U32_SMALLER(cmpVal, expVal) && !AM_HAL_U32_GREATER(cmpVal, expMax))
   33e58:	1ad3      	subs	r3, r2, r3
   33e5a:	2b00      	cmp	r3, #0
   33e5c:	dbed      	blt.n	33e3a <am_hal_stimer_compare_delta_set+0x2e>
   33e5e:	1bd2      	subs	r2, r2, r7
   33e60:	2a00      	cmp	r2, #0
   33e62:	dcea      	bgt.n	33e3a <am_hal_stimer_compare_delta_set+0x2e>


    //
    // Restore Compare Enable bit
    //
    CTIMER->STCFG |= cfgVal & (AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance);
   33e64:	4a05      	ldr	r2, [pc, #20]	; (33e7c <am_hal_stimer_compare_delta_set+0x70>)
   33e66:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
   33e6a:	4030      	ands	r0, r6
   33e6c:	4318      	orrs	r0, r3
   33e6e:	f8c2 0140 	str.w	r0, [r2, #320]	; 0x140

    //
    // End the critical section.
    //
    AM_CRITICAL_END
   33e72:	9801      	ldr	r0, [sp, #4]
   33e74:	f7ff ff9c 	bl	33db0 <am_hal_interrupt_master_set>
}
   33e78:	b003      	add	sp, #12
   33e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33e7c:	40008000 	.word	0x40008000
   33e80:	10002054 	.word	0x10002054

00033e84 <am_hal_stimer_int_enable>:
am_hal_stimer_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTEN |= ui32Interrupt;
   33e84:	4a03      	ldr	r2, [pc, #12]	; (33e94 <am_hal_stimer_int_enable+0x10>)
   33e86:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
   33e8a:	4303      	orrs	r3, r0
   33e8c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
   33e90:	4770      	bx	lr
   33e92:	bf00      	nop
   33e94:	40008000 	.word	0x40008000

00033e98 <am_hal_stimer_int_clear>:
am_hal_stimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTCLR = ui32Interrupt;
   33e98:	4b01      	ldr	r3, [pc, #4]	; (33ea0 <am_hal_stimer_int_clear+0x8>)
   33e9a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
}
   33e9e:	4770      	bx	lr
   33ea0:	40008000 	.word	0x40008000

00033ea4 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   33ea4:	b508      	push	{r3, lr}
   33ea6:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   33ea8:	2000      	movs	r0, #0
   33eaa:	f7ff fce9 	bl	33880 <hal_timer_config>
    return rc;
}
   33eae:	bd08      	pop	{r3, pc}

00033eb0 <os_cputime_timer_init>:
    os_cputime_delay_ticks(ticks);
}

void
os_cputime_timer_init(struct hal_timer *timer, hal_timer_cb fp, void *arg)
{
   33eb0:	b510      	push	{r4, lr}
    assert(timer != NULL);
   33eb2:	b140      	cbz	r0, 33ec6 <os_cputime_timer_init+0x16>
   33eb4:	460c      	mov	r4, r1
   33eb6:	4613      	mov	r3, r2
   33eb8:	4601      	mov	r1, r0
    assert(fp != NULL);
   33eba:	b174      	cbz	r4, 33eda <os_cputime_timer_init+0x2a>

    hal_timer_set_cb(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), timer, fp, arg);
   33ebc:	4622      	mov	r2, r4
   33ebe:	2000      	movs	r0, #0
   33ec0:	f7ff fd24 	bl	3390c <hal_timer_set_cb>
}
   33ec4:	bd10      	pop	{r4, pc}
    assert(timer != NULL);
   33ec6:	f7e0 fc15 	bl	146f4 <hal_debugger_connected>
   33eca:	b100      	cbz	r0, 33ece <os_cputime_timer_init+0x1e>
   33ecc:	be01      	bkpt	0x0001
   33ece:	2300      	movs	r3, #0
   33ed0:	461a      	mov	r2, r3
   33ed2:	4619      	mov	r1, r3
   33ed4:	4618      	mov	r0, r3
   33ed6:	f7e4 ff2b 	bl	18d30 <__assert_func>
    assert(fp != NULL);
   33eda:	f7e0 fc0b 	bl	146f4 <hal_debugger_connected>
   33ede:	b100      	cbz	r0, 33ee2 <os_cputime_timer_init+0x32>
   33ee0:	be01      	bkpt	0x0001
   33ee2:	2300      	movs	r3, #0
   33ee4:	461a      	mov	r2, r3
   33ee6:	4619      	mov	r1, r3
   33ee8:	4618      	mov	r0, r3
   33eea:	f7e4 ff21 	bl	18d30 <__assert_func>

00033eee <os_cputime_timer_start>:

int
os_cputime_timer_start(struct hal_timer *timer, uint32_t cputime)
{
   33eee:	b508      	push	{r3, lr}
    int rc;

    rc = hal_timer_start_at(timer, cputime);
   33ef0:	f7ff fd1c 	bl	3392c <hal_timer_start_at>
    return rc;
}
   33ef4:	bd08      	pop	{r3, pc}

00033ef6 <os_cputime_timer_stop>:
    return rc;
}

void
os_cputime_timer_stop(struct hal_timer *timer)
{
   33ef6:	b508      	push	{r3, lr}
    hal_timer_stop(timer);
   33ef8:	f7ff fd50 	bl	3399c <hal_timer_stop>
}
   33efc:	bd08      	pop	{r3, pc}

00033efe <os_cputime_get32>:

uint32_t
os_cputime_get32(void)
{
   33efe:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   33f00:	2000      	movs	r0, #0
   33f02:	f7ff fcf5 	bl	338f0 <hal_timer_read>
    return cpu_time;
}
   33f06:	bd08      	pop	{r3, pc}

00033f08 <os_cputime_usecs_to_ticks>:
    /*
     * Faster calculation but could be off 1 full tick since we do not
     * add residual back. Adding back the residual is commented out below, but
     * shown.
     */
    ticks = (1ULL << 32) * MYNEWT_VAL(OS_CPUTIME_FREQ) / 1000000 * usecs;
   33f08:	4b02      	ldr	r3, [pc, #8]	; (33f14 <os_cputime_usecs_to_ticks+0xc>)
   33f0a:	fba0 0103 	umull	r0, r1, r0, r3

    /* Residual for 32768 Hz. */
    //ticks += ((uint64_t)usecs * (1526122139+1)) >> 32;

    return ticks >> 32;
}
   33f0e:	4608      	mov	r0, r1
   33f10:	4770      	bx	lr
   33f12:	bf00      	nop
   33f14:	08637bd0 	.word	0x08637bd0

00033f18 <os_cputime_ticks_to_usecs>:
    uint32_t usecs;
    uint32_t shift;

    shift = __builtin_popcount(MYNEWT_VAL(OS_CPUTIME_FREQ) - 1) - 6;

    usecs = ((ticks >> shift) * 15625) +
   33f18:	0a41      	lsrs	r1, r0, #9
   33f1a:	f643 5209 	movw	r2, #15625	; 0x3d09
            (((ticks & ~(~0U << shift)) * 15625) >> shift);
   33f1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
   33f22:	fb02 f303 	mul.w	r3, r2, r3
   33f26:	0a5b      	lsrs	r3, r3, #9
    return usecs;
}
   33f28:	fb02 3001 	mla	r0, r2, r1, r3
   33f2c:	4770      	bx	lr

00033f2e <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   33f2e:	4603      	mov	r3, r0
   33f30:	b118      	cbz	r0, 33f3a <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   33f32:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   33f34:	2000      	movs	r0, #0
   33f36:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
   33f38:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   33f3a:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   33f3c:	4770      	bx	lr
	...

00033f40 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   33f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   33f42:	4b17      	ldr	r3, [pc, #92]	; (33fa0 <os_sem_release+0x60>)
   33f44:	681b      	ldr	r3, [r3, #0]
   33f46:	b33b      	cbz	r3, 33f98 <os_sem_release+0x58>
   33f48:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   33f4a:	b338      	cbz	r0, 33f9c <os_sem_release+0x5c>
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   33f4c:	f7e6 f952 	bl	1a1f4 <os_sched_get_current_task>
   33f50:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   33f52:	f7e6 fca9 	bl	1a8a8 <os_arch_save_sr>
   33f56:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   33f58:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   33f5a:	b165      	cbz	r5, 33f76 <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   33f5c:	7b6b      	ldrb	r3, [r5, #13]
   33f5e:	f023 0302 	bic.w	r3, r3, #2
   33f62:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   33f64:	4628      	mov	r0, r5
   33f66:	f7e6 f999 	bl	1a29c <os_sched_wakeup>
         * switch may already started, in that case start next
         * context switch. In worst case scenario second task
         * switch interrupt will check that there is no need
         * for switching.
         */
        if (current->t_prio >= rdy->t_prio) {
   33f6a:	7afa      	ldrb	r2, [r7, #11]
   33f6c:	7aeb      	ldrb	r3, [r5, #11]
   33f6e:	429a      	cmp	r2, r3
   33f70:	d20b      	bcs.n	33f8a <os_sem_release+0x4a>
    resched = 0;
   33f72:	2400      	movs	r4, #0
   33f74:	e003      	b.n	33f7e <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   33f76:	88e3      	ldrh	r3, [r4, #6]
   33f78:	3301      	adds	r3, #1
   33f7a:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   33f7c:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   33f7e:	4630      	mov	r0, r6
   33f80:	f7e6 fc98 	bl	1a8b4 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   33f84:	b91c      	cbnz	r4, 33f8e <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   33f86:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   33f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   33f8a:	2401      	movs	r4, #1
   33f8c:	e7f7      	b.n	33f7e <os_sem_release+0x3e>
        os_sched(rdy);
   33f8e:	4628      	mov	r0, r5
   33f90:	f7e6 fa10 	bl	1a3b4 <os_sched>
    ret = OS_OK;
   33f94:	2000      	movs	r0, #0
   33f96:	e7f7      	b.n	33f88 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   33f98:	2009      	movs	r0, #9
   33f9a:	e7f5      	b.n	33f88 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   33f9c:	2003      	movs	r0, #3
   33f9e:	e7f3      	b.n	33f88 <os_sem_release+0x48>
   33fa0:	10002b08 	.word	0x10002b08

00033fa4 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   33fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   33fa6:	4b2b      	ldr	r3, [pc, #172]	; (34054 <os_sem_pend+0xb0>)
   33fa8:	681b      	ldr	r3, [r3, #0]
   33faa:	2b00      	cmp	r3, #0
   33fac:	d04d      	beq.n	3404a <os_sem_pend+0xa6>
   33fae:	4604      	mov	r4, r0
   33fb0:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   33fb2:	2800      	cmp	r0, #0
   33fb4:	d04b      	beq.n	3404e <os_sem_pend+0xaa>
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   33fb6:	f7e6 f91d 	bl	1a1f4 <os_sched_get_current_task>
   33fba:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   33fbc:	f7e6 fc74 	bl	1a8a8 <os_arch_save_sr>
   33fc0:	4606      	mov	r6, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   33fc2:	88e3      	ldrh	r3, [r4, #6]
   33fc4:	b14b      	cbz	r3, 33fda <os_sem_pend+0x36>
        sem->sem_tokens--;
   33fc6:	3b01      	subs	r3, #1
   33fc8:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   33fca:	2400      	movs	r4, #0
    sched = 0;
   33fcc:	4627      	mov	r7, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   33fce:	4630      	mov	r0, r6
   33fd0:	f7e6 fc70 	bl	1a8b4 <os_arch_restore_sr>

    if (sched) {
   33fd4:	bb47      	cbnz	r7, 34028 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   33fd6:	4620      	mov	r0, r4
   33fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   33fda:	b317      	cbz	r7, 34022 <os_sem_pend+0x7e>
        current->t_obj = sem;
   33fdc:	61ec      	str	r4, [r5, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   33fde:	7b6b      	ldrb	r3, [r5, #13]
   33fe0:	f043 0302 	orr.w	r3, r3, #2
   33fe4:	736b      	strb	r3, [r5, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   33fe6:	f8d4 c000 	ldr.w	ip, [r4]
   33fea:	f1bc 0f00 	cmp.w	ip, #0
   33fee:	d00e      	beq.n	3400e <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   33ff0:	4663      	mov	r3, ip
        last = NULL;
   33ff2:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   33ff4:	b133      	cbz	r3, 34004 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   33ff6:	7ae9      	ldrb	r1, [r5, #11]
   33ff8:	7ada      	ldrb	r2, [r3, #11]
   33ffa:	4291      	cmp	r1, r2
   33ffc:	d302      	bcc.n	34004 <os_sem_pend+0x60>
                last = entry;
   33ffe:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   34000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34002:	e7f7      	b.n	33ff4 <os_sem_pend+0x50>
        if (last) {
   34004:	b118      	cbz	r0, 3400e <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   34006:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   34008:	64eb      	str	r3, [r5, #76]	; 0x4c
   3400a:	64c5      	str	r5, [r0, #76]	; 0x4c
   3400c:	e002      	b.n	34014 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   3400e:	f8c5 c04c 	str.w	ip, [r5, #76]	; 0x4c
   34012:	6025      	str	r5, [r4, #0]
        os_sched_sleep(current, timeout);
   34014:	4639      	mov	r1, r7
   34016:	4628      	mov	r0, r5
   34018:	f7e6 f8f8 	bl	1a20c <os_sched_sleep>
        ret = OS_OK;
   3401c:	2400      	movs	r4, #0
        sched = 1;
   3401e:	2701      	movs	r7, #1
   34020:	e7d5      	b.n	33fce <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   34022:	2406      	movs	r4, #6
    sched = 0;
   34024:	2700      	movs	r7, #0
   34026:	e7d2      	b.n	33fce <os_sem_pend+0x2a>
        os_sched(NULL);
   34028:	2000      	movs	r0, #0
   3402a:	f7e6 f9c3 	bl	1a3b4 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   3402e:	7b6c      	ldrb	r4, [r5, #13]
   34030:	f014 0402 	ands.w	r4, r4, #2
   34034:	d0cf      	beq.n	33fd6 <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   34036:	f7e6 fc37 	bl	1a8a8 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   3403a:	7b6b      	ldrb	r3, [r5, #13]
   3403c:	f023 0302 	bic.w	r3, r3, #2
   34040:	736b      	strb	r3, [r5, #13]
            OS_EXIT_CRITICAL(sr);
   34042:	f7e6 fc37 	bl	1a8b4 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   34046:	2406      	movs	r4, #6
   34048:	e7c5      	b.n	33fd6 <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   3404a:	2409      	movs	r4, #9
   3404c:	e7c3      	b.n	33fd6 <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   3404e:	2403      	movs	r4, #3
   34050:	e7c1      	b.n	33fd6 <os_sem_pend+0x32>
   34052:	bf00      	nop
   34054:	10002b08 	.word	0x10002b08

00034058 <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
   34058:	2001      	movs	r0, #1
   3405a:	4770      	bx	lr

0003405c <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
   3405c:	4770      	bx	lr

0003405e <__malloc_from_block>:
static void *__malloc_from_block(struct free_arena_header *fp, size_t size)
{
    size_t fsize;
    struct free_arena_header *nfp, *na, *fpn, *fpp;

    fsize = fp->a.size;
   3405e:	6842      	ldr	r2, [r0, #4]

    /* We need the 2* to account for the larger requirements of a
       free block */
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
   34060:	f101 0320 	add.w	r3, r1, #32
   34064:	4293      	cmp	r3, r2
   34066:	d816      	bhi.n	34096 <__malloc_from_block+0x38>
{
   34068:	b430      	push	{r4, r5}
        /* Bigger block than required -- split block */
        nfp = (struct free_arena_header *)((char *)fp + size);
   3406a:	1843      	adds	r3, r0, r1
        na = fp->a.next;
   3406c:	6884      	ldr	r4, [r0, #8]

        nfp->a.type = ARENA_TYPE_FREE;
   3406e:	2501      	movs	r5, #1
   34070:	5045      	str	r5, [r0, r1]
        nfp->a.size = fsize - size;
   34072:	1a52      	subs	r2, r2, r1
   34074:	605a      	str	r2, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
   34076:	2200      	movs	r2, #0
   34078:	6002      	str	r2, [r0, #0]
        fp->a.size = size;
   3407a:	6041      	str	r1, [r0, #4]

        /* Insert into all-block chain */
        nfp->a.prev = fp;
   3407c:	60d8      	str	r0, [r3, #12]
        nfp->a.next = na;
   3407e:	609c      	str	r4, [r3, #8]
        na->a.prev = nfp;
   34080:	60e3      	str	r3, [r4, #12]
        fp->a.next = nfp;
   34082:	6083      	str	r3, [r0, #8]

        /* Replace current block on free chain */
        nfp->next_free = fpn = fp->next_free;
   34084:	6901      	ldr	r1, [r0, #16]
   34086:	6119      	str	r1, [r3, #16]
        nfp->prev_free = fpp = fp->prev_free;
   34088:	6942      	ldr	r2, [r0, #20]
   3408a:	615a      	str	r2, [r3, #20]
        fpn->prev_free = nfp;
   3408c:	614b      	str	r3, [r1, #20]
        fpp->next_free = nfp;
   3408e:	6113      	str	r3, [r2, #16]
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
        remove_from_free_chain(fp);
    }

    return (void *)(&fp->a + 1);
}
   34090:	3010      	adds	r0, #16
   34092:	bc30      	pop	{r4, r5}
   34094:	4770      	bx	lr
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
   34096:	2300      	movs	r3, #0
   34098:	6003      	str	r3, [r0, #0]
    ap = ah->prev_free;
   3409a:	6942      	ldr	r2, [r0, #20]
    an = ah->next_free;
   3409c:	6903      	ldr	r3, [r0, #16]
    ap->next_free = an;
   3409e:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   340a0:	615a      	str	r2, [r3, #20]
}
   340a2:	3010      	adds	r0, #16
   340a4:	4770      	bx	lr
	...

000340a8 <__free_block>:

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
   340a8:	b410      	push	{r4}
   340aa:	4603      	mov	r3, r0
    struct free_arena_header *pah, *nah;

    pah = ah->a.prev;
   340ac:	68c0      	ldr	r0, [r0, #12]
    nah = ah->a.next;
   340ae:	6899      	ldr	r1, [r3, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
   340b0:	6802      	ldr	r2, [r0, #0]
   340b2:	2a01      	cmp	r2, #1
   340b4:	d00e      	beq.n	340d4 <__free_block+0x2c>

        ah = pah;
        pah = ah->a.prev;
    } else {
        /* Need to add this block to the free chain */
        ah->a.type = ARENA_TYPE_FREE;
   340b6:	2201      	movs	r2, #1
   340b8:	601a      	str	r2, [r3, #0]

        ah->next_free = __malloc_head.next_free;
   340ba:	4a13      	ldr	r2, [pc, #76]	; (34108 <__free_block+0x60>)
   340bc:	6910      	ldr	r0, [r2, #16]
   340be:	6118      	str	r0, [r3, #16]
        ah->prev_free = &__malloc_head;
   340c0:	615a      	str	r2, [r3, #20]
        __malloc_head.next_free = ah;
   340c2:	6113      	str	r3, [r2, #16]
        ah->next_free->prev_free = ah;
   340c4:	691a      	ldr	r2, [r3, #16]
   340c6:	6153      	str	r3, [r2, #20]
   340c8:	4618      	mov	r0, r3
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
   340ca:	680b      	ldr	r3, [r1, #0]
   340cc:	2b01      	cmp	r3, #1
   340ce:	d00b      	beq.n	340e8 <__free_block+0x40>
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
   340d0:	bc10      	pop	{r4}
   340d2:	4770      	bx	lr
        (char *)pah + pah->a.size == (char *)ah) {
   340d4:	6842      	ldr	r2, [r0, #4]
   340d6:	1884      	adds	r4, r0, r2
    if (pah->a.type == ARENA_TYPE_FREE &&
   340d8:	429c      	cmp	r4, r3
   340da:	d1ec      	bne.n	340b6 <__free_block+0xe>
        pah->a.size += ah->a.size;
   340dc:	685b      	ldr	r3, [r3, #4]
   340de:	441a      	add	r2, r3
   340e0:	6042      	str	r2, [r0, #4]
        pah->a.next = nah;
   340e2:	6081      	str	r1, [r0, #8]
        nah->a.prev = pah;
   340e4:	60c8      	str	r0, [r1, #12]
        pah = ah->a.prev;
   340e6:	e7f0      	b.n	340ca <__free_block+0x22>
        (char *)ah + ah->a.size == (char *)nah) {
   340e8:	6843      	ldr	r3, [r0, #4]
   340ea:	18c2      	adds	r2, r0, r3
    if (nah->a.type == ARENA_TYPE_FREE &&
   340ec:	428a      	cmp	r2, r1
   340ee:	d1ef      	bne.n	340d0 <__free_block+0x28>
        ah->a.size += nah->a.size;
   340f0:	684a      	ldr	r2, [r1, #4]
   340f2:	4413      	add	r3, r2
   340f4:	6043      	str	r3, [r0, #4]
    ap = ah->prev_free;
   340f6:	694a      	ldr	r2, [r1, #20]
    an = ah->next_free;
   340f8:	690b      	ldr	r3, [r1, #16]
    ap->next_free = an;
   340fa:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   340fc:	615a      	str	r2, [r3, #20]
    ap = ah->a.prev;
   340fe:	68ca      	ldr	r2, [r1, #12]
    an = ah->a.next;
   34100:	688b      	ldr	r3, [r1, #8]
    ap->a.next = an;
   34102:	6093      	str	r3, [r2, #8]
    an->a.prev = ap;
   34104:	60da      	str	r2, [r3, #12]
    return ah;
   34106:	e7e3      	b.n	340d0 <__free_block+0x28>
   34108:	10000890 	.word	0x10000890

0003410c <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
   3410c:	2917      	cmp	r1, #23
   3410e:	d91e      	bls.n	3414e <add_malloc_block+0x42>
{
   34110:	b510      	push	{r4, lr}
   34112:	4604      	mov	r4, r0
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
   34114:	2301      	movs	r3, #1
   34116:	6003      	str	r3, [r0, #0]
    fp->a.size = size;
   34118:	6041      	str	r1, [r0, #4]

    if (!malloc_lock())
   3411a:	4b0d      	ldr	r3, [pc, #52]	; (34150 <add_malloc_block+0x44>)
   3411c:	681b      	ldr	r3, [r3, #0]
   3411e:	4798      	blx	r3
   34120:	b1a0      	cbz	r0, 3414c <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
   34122:	4b0c      	ldr	r3, [pc, #48]	; (34154 <add_malloc_block+0x48>)
   34124:	68db      	ldr	r3, [r3, #12]
   34126:	681a      	ldr	r2, [r3, #0]
   34128:	2a02      	cmp	r2, #2
   3412a:	d003      	beq.n	34134 <add_malloc_block+0x28>
         pah = pah->a.prev) {
        if (pah < fp)
   3412c:	42a3      	cmp	r3, r4
   3412e:	d301      	bcc.n	34134 <add_malloc_block+0x28>
         pah = pah->a.prev) {
   34130:	68db      	ldr	r3, [r3, #12]
   34132:	e7f8      	b.n	34126 <add_malloc_block+0x1a>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
   34134:	689a      	ldr	r2, [r3, #8]
   34136:	60a2      	str	r2, [r4, #8]
    fp->a.prev = pah;
   34138:	60e3      	str	r3, [r4, #12]
    pah->a.next = fp;
   3413a:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
   3413c:	68a3      	ldr	r3, [r4, #8]
   3413e:	60dc      	str	r4, [r3, #12]

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
   34140:	4620      	mov	r0, r4
   34142:	f7ff ffb1 	bl	340a8 <__free_block>

    malloc_unlock();
   34146:	4b04      	ldr	r3, [pc, #16]	; (34158 <add_malloc_block+0x4c>)
   34148:	681b      	ldr	r3, [r3, #0]
   3414a:	4798      	blx	r3
}
   3414c:	bd10      	pop	{r4, pc}
   3414e:	4770      	bx	lr
   34150:	100008a8 	.word	0x100008a8
   34154:	10000890 	.word	0x10000890
   34158:	100008ac 	.word	0x100008ac

0003415c <malloc>:
{
   3415c:	b538      	push	{r3, r4, r5, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   3415e:	1e43      	subs	r3, r0, #1
   34160:	f113 0f12 	cmn.w	r3, #18
   34164:	d825      	bhi.n	341b2 <malloc+0x56>
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   34166:	301f      	adds	r0, #31
   34168:	f020 040f 	bic.w	r4, r0, #15
    if (!malloc_lock())
   3416c:	4b13      	ldr	r3, [pc, #76]	; (341bc <malloc+0x60>)
   3416e:	681b      	ldr	r3, [r3, #0]
   34170:	4798      	blx	r3
   34172:	b300      	cbz	r0, 341b6 <malloc+0x5a>
    void *result = NULL;
   34174:	2500      	movs	r5, #0
   34176:	e00d      	b.n	34194 <malloc+0x38>
            result = __malloc_from_block(fp, size);
   34178:	4621      	mov	r1, r4
   3417a:	f7ff ff70 	bl	3405e <__malloc_from_block>
   3417e:	4605      	mov	r5, r0
    if (result == NULL) {
   34180:	b995      	cbnz	r5, 341a8 <malloc+0x4c>
        more_mem = _sbrk(size);
   34182:	4620      	mov	r0, r4
   34184:	f7e0 fa98 	bl	146b8 <_sbrk>
        if (more_mem != (void *)-1) {
   34188:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   3418c:	d00c      	beq.n	341a8 <malloc+0x4c>
            add_malloc_block(more_mem, size);
   3418e:	4621      	mov	r1, r4
   34190:	f7ff ffbc 	bl	3410c <add_malloc_block>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
   34194:	4b0a      	ldr	r3, [pc, #40]	; (341c0 <malloc+0x64>)
   34196:	6918      	ldr	r0, [r3, #16]
   34198:	6803      	ldr	r3, [r0, #0]
   3419a:	2b02      	cmp	r3, #2
   3419c:	d0f0      	beq.n	34180 <malloc+0x24>
        if (fp->a.size >= size) {
   3419e:	6843      	ldr	r3, [r0, #4]
   341a0:	42a3      	cmp	r3, r4
   341a2:	d2e9      	bcs.n	34178 <malloc+0x1c>
         fp = fp->next_free) {
   341a4:	6900      	ldr	r0, [r0, #16]
   341a6:	e7f7      	b.n	34198 <malloc+0x3c>
    malloc_unlock();
   341a8:	4b06      	ldr	r3, [pc, #24]	; (341c4 <malloc+0x68>)
   341aa:	681b      	ldr	r3, [r3, #0]
   341ac:	4798      	blx	r3
}
   341ae:	4628      	mov	r0, r5
   341b0:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
   341b2:	2500      	movs	r5, #0
   341b4:	e7fb      	b.n	341ae <malloc+0x52>
        return NULL;
   341b6:	2500      	movs	r5, #0
   341b8:	e7f9      	b.n	341ae <malloc+0x52>
   341ba:	bf00      	nop
   341bc:	100008a8 	.word	0x100008a8
   341c0:	10000890 	.word	0x10000890
   341c4:	100008ac 	.word	0x100008ac

000341c8 <free>:

void free(void *ptr)
{
    struct free_arena_header *ah;

    if (!ptr)
   341c8:	b170      	cbz	r0, 341e8 <free+0x20>
{
   341ca:	b510      	push	{r4, lr}
        return;

    ah = (struct free_arena_header *)
   341cc:	f1a0 0410 	sub.w	r4, r0, #16

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
   341d0:	4b06      	ldr	r3, [pc, #24]	; (341ec <free+0x24>)
   341d2:	681b      	ldr	r3, [r3, #0]
   341d4:	4798      	blx	r3
   341d6:	b900      	cbnz	r0, 341da <free+0x12>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
    malloc_unlock();
}
   341d8:	bd10      	pop	{r4, pc}
    ah = __free_block(ah);
   341da:	4620      	mov	r0, r4
   341dc:	f7ff ff64 	bl	340a8 <__free_block>
    malloc_unlock();
   341e0:	4b03      	ldr	r3, [pc, #12]	; (341f0 <free+0x28>)
   341e2:	681b      	ldr	r3, [r3, #0]
   341e4:	4798      	blx	r3
   341e6:	e7f7      	b.n	341d8 <free+0x10>
   341e8:	4770      	bx	lr
   341ea:	bf00      	nop
   341ec:	100008a8 	.word	0x100008a8
   341f0:	100008ac 	.word	0x100008ac

000341f4 <realloc>:
#include "malloc.h"

/* FIXME: This is cheesy, it should be fixed later */

void *realloc(void *ptr, size_t size)
{
   341f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct free_arena_header *ah;
	void *newptr;
	size_t oldsize;

	if (!ptr)
   341f6:	b300      	cbz	r0, 3423a <realloc+0x46>
   341f8:	4606      	mov	r6, r0
		return malloc(size);

	if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   341fa:	1e4b      	subs	r3, r1, #1
   341fc:	f113 0f12 	cmn.w	r3, #18
   34200:	d820      	bhi.n	34244 <realloc+0x50>
		free(ptr);
		return NULL;
	}

	/* Add the obligatory arena header, and round up */
	size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   34202:	311f      	adds	r1, #31
   34204:	f021 040f 	bic.w	r4, r1, #15

	ah = (struct free_arena_header *)
	    ((struct arena_header *)ptr - 1);

	if (ah->a.size >= size && size >= (ah->a.size >> 2)) {
   34208:	f850 5c0c 	ldr.w	r5, [r0, #-12]
   3420c:	42a5      	cmp	r5, r4
   3420e:	d302      	bcc.n	34216 <realloc+0x22>
   34210:	ebb4 0f95 	cmp.w	r4, r5, lsr #2
   34214:	d21c      	bcs.n	34250 <realloc+0x5c>
	} else {
		/* Make me a new block.  This is kind of bogus; we should
		   be checking the following block to see if we can do an
		   in-place adjustment... fix that later. */

		oldsize = ah->a.size - sizeof(struct arena_header);
   34216:	3d10      	subs	r5, #16

		newptr = malloc(size);
   34218:	4620      	mov	r0, r4
   3421a:	f7ff ff9f 	bl	3415c <malloc>
                if (newptr) {
   3421e:	4607      	mov	r7, r0
   34220:	b1a0      	cbz	r0, 3424c <realloc+0x58>
                    memcpy(newptr, ptr, (size < oldsize) ? size : oldsize);
   34222:	4622      	mov	r2, r4
   34224:	42ac      	cmp	r4, r5
   34226:	bf28      	it	cs
   34228:	462a      	movcs	r2, r5
   3422a:	4631      	mov	r1, r6
   3422c:	f7e6 fd10 	bl	1ac50 <memcpy>
                    free(ptr);
   34230:	4630      	mov	r0, r6
   34232:	f7ff ffc9 	bl	341c8 <free>
                } else {
                    newptr = ptr;
                }
		return newptr;
	}
}
   34236:	4638      	mov	r0, r7
   34238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return malloc(size);
   3423a:	4608      	mov	r0, r1
   3423c:	f7ff ff8e 	bl	3415c <malloc>
   34240:	4607      	mov	r7, r0
   34242:	e7f8      	b.n	34236 <realloc+0x42>
		free(ptr);
   34244:	f7ff ffc0 	bl	341c8 <free>
		return NULL;
   34248:	2700      	movs	r7, #0
   3424a:	e7f4      	b.n	34236 <realloc+0x42>
                    newptr = ptr;
   3424c:	4637      	mov	r7, r6
		return newptr;
   3424e:	e7f2      	b.n	34236 <realloc+0x42>
		return ptr;
   34250:	4607      	mov	r7, r0
   34252:	e7f0      	b.n	34236 <realloc+0x42>

00034254 <sprintf>:

#include <stdio.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   34254:	b40e      	push	{r1, r2, r3}
   34256:	b500      	push	{lr}
   34258:	b082      	sub	sp, #8
   3425a:	ab03      	add	r3, sp, #12
   3425c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   34260:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   34262:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   34266:	f7e7 f8d7 	bl	1b418 <vsnprintf>
	va_end(ap);

	return rv;
}
   3426a:	b002      	add	sp, #8
   3426c:	f85d eb04 	ldr.w	lr, [sp], #4
   34270:	b003      	add	sp, #12
   34272:	4770      	bx	lr

00034274 <strcat>:
 */

#include <string.h>

char *strcat(char *dst, const char *src)
{
   34274:	b538      	push	{r3, r4, r5, lr}
   34276:	4604      	mov	r4, r0
   34278:	460d      	mov	r5, r1
	strcpy(strchr(dst, '\0'), src);
   3427a:	f7e6 fd50 	bl	1ad1e <strlen>
   3427e:	4629      	mov	r1, r5
   34280:	4420      	add	r0, r4
   34282:	f000 f80c 	bl	3429e <strcpy>
	return dst;
}
   34286:	4620      	mov	r0, r4
   34288:	bd38      	pop	{r3, r4, r5, pc}

0003428a <strchr>:

#include <string.h>

char *strchr(const char *s, int c)
{
	while (*s != (char)c) {
   3428a:	7803      	ldrb	r3, [r0, #0]
   3428c:	b2ca      	uxtb	r2, r1
   3428e:	4293      	cmp	r3, r2
   34290:	d002      	beq.n	34298 <strchr+0xe>
		if (!*s)
   34292:	b113      	cbz	r3, 3429a <strchr+0x10>
			return NULL;
		s++;
   34294:	3001      	adds	r0, #1
   34296:	e7f8      	b.n	3428a <strchr>
   34298:	4770      	bx	lr
			return NULL;
   3429a:	2000      	movs	r0, #0
	}

	return (char *)s;
}
   3429c:	4770      	bx	lr

0003429e <strcpy>:
 */

#include <string.h>

char *strcpy(char *dst, const char *src)
{
   3429e:	b410      	push	{r4}
	char *q = dst;
   342a0:	4602      	mov	r2, r0
	const char *p = src;
	char ch;

	do {
		*q++ = ch = *p++;
   342a2:	780c      	ldrb	r4, [r1, #0]
   342a4:	3101      	adds	r1, #1
   342a6:	7014      	strb	r4, [r2, #0]
   342a8:	3201      	adds	r2, #1
	} while (ch);
   342aa:	2c00      	cmp	r4, #0
   342ac:	d1f9      	bne.n	342a2 <strcpy+0x4>

	return dst;
}
   342ae:	bc10      	pop	{r4}
   342b0:	4770      	bx	lr

000342b2 <strncmp>:
 */

#include <string.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
   342b2:	b410      	push	{r4}
   342b4:	4603      	mov	r3, r0
	const unsigned char *c1 = (const unsigned char *)s1;
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;
   342b6:	2000      	movs	r0, #0

	while (n--) {
   342b8:	4614      	mov	r4, r2
   342ba:	3a01      	subs	r2, #1
   342bc:	b13c      	cbz	r4, 342ce <strncmp+0x1c>
		d = (int)(ch = *c1++) - (int)*c2++;
   342be:	f813 4b01 	ldrb.w	r4, [r3], #1
   342c2:	f811 0b01 	ldrb.w	r0, [r1], #1
		if (d || !ch)
   342c6:	1a20      	subs	r0, r4, r0
   342c8:	d101      	bne.n	342ce <strncmp+0x1c>
   342ca:	2c00      	cmp	r4, #0
   342cc:	d1f4      	bne.n	342b8 <strncmp+0x6>
			break;
	}

	return d;
}
   342ce:	bc10      	pop	{r4}
   342d0:	4770      	bx	lr

000342d2 <strrchr>:
 */

#include <string.h>

char *strrchr(const char *s, int c)
{
   342d2:	4603      	mov	r3, r0
	const char *found = NULL;
   342d4:	2000      	movs	r0, #0

	while (*s) {
   342d6:	781a      	ldrb	r2, [r3, #0]
   342d8:	b15a      	cbz	r2, 342f2 <strrchr+0x20>
{
   342da:	b410      	push	{r4}
   342dc:	e002      	b.n	342e4 <strrchr+0x12>
		if (*s == (char)c)
			found = s;
		s++;
   342de:	3301      	adds	r3, #1
	while (*s) {
   342e0:	781a      	ldrb	r2, [r3, #0]
   342e2:	b122      	cbz	r2, 342ee <strrchr+0x1c>
		if (*s == (char)c)
   342e4:	b2cc      	uxtb	r4, r1
   342e6:	4294      	cmp	r4, r2
   342e8:	d1f9      	bne.n	342de <strrchr+0xc>
			found = s;
   342ea:	4618      	mov	r0, r3
   342ec:	e7f7      	b.n	342de <strrchr+0xc>
	}

	return (char *)found;
}
   342ee:	bc10      	pop	{r4}
   342f0:	4770      	bx	lr
   342f2:	4770      	bx	lr

000342f4 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   342f4:	b508      	push	{r3, lr}
   342f6:	460a      	mov	r2, r1
	return vfprintf(stdout, format, ap);
   342f8:	4601      	mov	r1, r0
   342fa:	4b02      	ldr	r3, [pc, #8]	; (34304 <vprintf+0x10>)
   342fc:	6818      	ldr	r0, [r3, #0]
   342fe:	f7e7 f867 	bl	1b3d0 <vfprintf>
}
   34302:	bd08      	pop	{r3, pc}
   34304:	000385d8 	.word	0x000385d8

00034308 <ble_hs_shutdown_stop_cb>:
/**
 * Called when the host stop procedure has completed.
 */
static void
ble_hs_shutdown_stop_cb(int status, void *arg)
{
   34308:	b508      	push	{r3, lr}
    SYSDOWN_ASSERT_ACTIVE();
   3430a:	4b08      	ldr	r3, [pc, #32]	; (3432c <ble_hs_shutdown_stop_cb+0x24>)
   3430c:	781b      	ldrb	r3, [r3, #0]
   3430e:	b113      	cbz	r3, 34316 <ble_hs_shutdown_stop_cb+0xe>

    /* Indicate to sysdown that the host is fully shut down. */
    sysdown_release();
   34310:	f7e9 fe36 	bl	1df80 <sysdown_release>
}
   34314:	bd08      	pop	{r3, pc}
    SYSDOWN_ASSERT_ACTIVE();
   34316:	f7e0 f9ed 	bl	146f4 <hal_debugger_connected>
   3431a:	b100      	cbz	r0, 3431e <ble_hs_shutdown_stop_cb+0x16>
   3431c:	be01      	bkpt	0x0001
   3431e:	2300      	movs	r3, #0
   34320:	461a      	mov	r2, r3
   34322:	4619      	mov	r1, r3
   34324:	4618      	mov	r0, r3
   34326:	f7e4 fd03 	bl	18d30 <__assert_func>
   3432a:	bf00      	nop
   3432c:	10003fb0 	.word	0x10003fb0

00034330 <ble_hs_shutdown>:

int
ble_hs_shutdown(int reason)
{
   34330:	b508      	push	{r3, lr}
    int rc;

    /* Ensure this function only gets called by sysdown. */
    SYSDOWN_ASSERT_ACTIVE();
   34332:	4b12      	ldr	r3, [pc, #72]	; (3437c <ble_hs_shutdown+0x4c>)
   34334:	781b      	ldrb	r3, [r3, #0]
   34336:	b18b      	cbz	r3, 3435c <ble_hs_shutdown+0x2c>

    /* Initiate a host stop procedure. */
    rc = ble_hs_stop(&ble_hs_shutdown_stop_listener, ble_hs_shutdown_stop_cb,
   34338:	2200      	movs	r2, #0
   3433a:	4911      	ldr	r1, [pc, #68]	; (34380 <ble_hs_shutdown+0x50>)
   3433c:	4811      	ldr	r0, [pc, #68]	; (34384 <ble_hs_shutdown+0x54>)
   3433e:	f7fc f9a9 	bl	30694 <ble_hs_stop>
                     NULL);
    switch (rc) {
   34342:	2802      	cmp	r0, #2
   34344:	d014      	beq.n	34370 <ble_hs_shutdown+0x40>
   34346:	280f      	cmp	r0, #15
   34348:	d014      	beq.n	34374 <ble_hs_shutdown+0x44>
   3434a:	b1a8      	cbz	r0, 34378 <ble_hs_shutdown+0x48>
    case BLE_HS_EALREADY:
        /* Already stopped.  Shutdown complete. */
        return SYSDOWN_COMPLETE;

    default:
        BLE_HS_LOG(ERROR, "ble_hs_shutdown: failed to stop host; rc=%d\n", rc);
   3434c:	4603      	mov	r3, r0
   3434e:	4a0e      	ldr	r2, [pc, #56]	; (34388 <ble_hs_shutdown+0x58>)
   34350:	2103      	movs	r1, #3
   34352:	2004      	movs	r0, #4
   34354:	f7e8 fcea 	bl	1cd2c <modlog_printf>
        return SYSDOWN_COMPLETE;
   34358:	2000      	movs	r0, #0
   3435a:	e00a      	b.n	34372 <ble_hs_shutdown+0x42>
    SYSDOWN_ASSERT_ACTIVE();
   3435c:	f7e0 f9ca 	bl	146f4 <hal_debugger_connected>
   34360:	b100      	cbz	r0, 34364 <ble_hs_shutdown+0x34>
   34362:	be01      	bkpt	0x0001
   34364:	2300      	movs	r3, #0
   34366:	461a      	mov	r2, r3
   34368:	4619      	mov	r1, r3
   3436a:	4618      	mov	r0, r3
   3436c:	f7e4 fce0 	bl	18d30 <__assert_func>
        return SYSDOWN_COMPLETE;
   34370:	2000      	movs	r0, #0
    }
}
   34372:	bd08      	pop	{r3, pc}
    switch (rc) {
   34374:	2001      	movs	r0, #1
   34376:	e7fc      	b.n	34372 <ble_hs_shutdown+0x42>
   34378:	2001      	movs	r0, #1
   3437a:	e7fa      	b.n	34372 <ble_hs_shutdown+0x42>
   3437c:	10003fb0 	.word	0x10003fb0
   34380:	00034309 	.word	0x00034309
   34384:	10005e74 	.word	0x10005e74
   34388:	00039c88 	.word	0x00039c88
   3438c:	feaa0010 	.word	0xfeaa0010
   34390:	28030010 	.word	0x28030010
   34394:	28020010 	.word	0x28020010
   34398:	28000010 	.word	0x28000010
   3439c:	28030010 	.word	0x28030010
   343a0:	4f525245 	.word	0x4f525245
   343a4:	00000052 	.word	0x00000052
   343a8:	203a7325 	.word	0x203a7325
   343ac:	6e6e6f63 	.word	0x6e6e6f63
   343b0:	6e61685f 	.word	0x6e61685f
   343b4:	3d656c64 	.word	0x3d656c64
   343b8:	73206425 	.word	0x73206425
   343bc:	75746174 	.word	0x75746174
   343c0:	64253d73 	.word	0x64253d73
   343c4:	74746120 	.word	0x74746120
   343c8:	6e61685f 	.word	0x6e61685f
   343cc:	3d656c64 	.word	0x3d656c64
   343d0:	000a6425 	.word	0x000a6425
   343d4:	2075746d 	.word	0x2075746d
   343d8:	68637865 	.word	0x68637865
   343dc:	65676e61 	.word	0x65676e61
   343e0:	6d6f6320 	.word	0x6d6f6320
   343e4:	74656c70 	.word	0x74656c70
   343e8:	63203a65 	.word	0x63203a65
   343ec:	5f6e6e6f 	.word	0x5f6e6e6f
   343f0:	646e6168 	.word	0x646e6168
   343f4:	253d656c 	.word	0x253d656c
   343f8:	746d2064 	.word	0x746d2064
   343fc:	64253d75 	.word	0x64253d75
   34400:	0000000a 	.word	0x0000000a
   34404:	6c6c7566 	.word	0x6c6c7566
   34408:	73696420 	.word	0x73696420
   3440c:	65766f63 	.word	0x65766f63
   34410:	63207972 	.word	0x63207972
   34414:	6c706d6f 	.word	0x6c706d6f
   34418:	3b657465 	.word	0x3b657465
   3441c:	3d637220 	.word	0x3d637220
   34420:	000a6425 	.word	0x000a6425
   34424:	72616863 	.word	0x72616863
   34428:	65746361 	.word	0x65746361
   3442c:	74736972 	.word	0x74736972
   34430:	77206369 	.word	0x77206369
   34434:	65746972 	.word	0x65746972
   34438:	6d6f6320 	.word	0x6d6f6320
   3443c:	74656c70 	.word	0x74656c70
   34440:	63203b65 	.word	0x63203b65
   34444:	5f6e6e6f 	.word	0x5f6e6e6f
   34448:	646e6168 	.word	0x646e6168
   3444c:	253d656c 	.word	0x253d656c
   34450:	74612064 	.word	0x74612064
   34454:	685f7274 	.word	0x685f7274
   34458:	6c646e61 	.word	0x6c646e61
   3445c:	64253d65 	.word	0x64253d65
   34460:	0000000a 	.word	0x0000000a
   34464:	6f727245 	.word	0x6f727245
   34468:	52203a72 	.word	0x52203a72
   3446c:	74657365 	.word	0x74657365
   34470:	676e6974 	.word	0x676e6974
   34474:	61747320 	.word	0x61747320
   34478:	203b6574 	.word	0x203b6574
   3447c:	73616572 	.word	0x73616572
   34480:	253d6e6f 	.word	0x253d6e6f
   34484:	00000a64 	.word	0x00000a64
   34488:	72616863 	.word	0x72616863
   3448c:	65746361 	.word	0x65746361
   34490:	74736972 	.word	0x74736972
   34494:	72206369 	.word	0x72206369
   34498:	3b646165 	.word	0x3b646165
   3449c:	6e6f6320 	.word	0x6e6f6320
   344a0:	61685f6e 	.word	0x61685f6e
   344a4:	656c646e 	.word	0x656c646e
   344a8:	2064253d 	.word	0x2064253d
   344ac:	72747461 	.word	0x72747461
   344b0:	6e61685f 	.word	0x6e61685f
   344b4:	3d656c64 	.word	0x3d656c64
   344b8:	6c206425 	.word	0x6c206425
   344bc:	253d6e65 	.word	0x253d6e65
   344c0:	61762064 	.word	0x61762064
   344c4:	3d65756c 	.word	0x3d65756c
   344c8:	00000000 	.word	0x00000000
   344cc:	72616863 	.word	0x72616863
   344d0:	65746361 	.word	0x65746361
   344d4:	74736972 	.word	0x74736972
   344d8:	72206369 	.word	0x72206369
   344dc:	20646165 	.word	0x20646165
   344e0:	706d6f63 	.word	0x706d6f63
   344e4:	6574656c 	.word	0x6574656c
   344e8:	0000000a 	.word	0x0000000a
   344ec:	72616863 	.word	0x72616863
   344f0:	65746361 	.word	0x65746361
   344f4:	74736972 	.word	0x74736972
   344f8:	77206369 	.word	0x77206369
   344fc:	65746972 	.word	0x65746972
   34500:	6c657220 	.word	0x6c657220
   34504:	6c626169 	.word	0x6c626169
   34508:	6f632065 	.word	0x6f632065
   3450c:	656c706d 	.word	0x656c706d
   34510:	203b6574 	.word	0x203b6574
   34514:	6e6e6f63 	.word	0x6e6e6f63
   34518:	6e61685f 	.word	0x6e61685f
   3451c:	3d656c64 	.word	0x3d656c64
   34520:	00006425 	.word	0x00006425
   34524:	74746120 	.word	0x74746120
   34528:	61685f72 	.word	0x61685f72
   3452c:	656c646e 	.word	0x656c646e
   34530:	2064253d 	.word	0x2064253d
   34534:	3d6e656c 	.word	0x3d6e656c
   34538:	76206425 	.word	0x76206425
   3453c:	65756c61 	.word	0x65756c61
   34540:	0000003d 	.word	0x0000003d
   34544:	20202020 	.word	0x20202020
   34548:	67616c66 	.word	0x67616c66
   3454c:	78303d73 	.word	0x78303d73
   34550:	78323025 	.word	0x78323025
   34554:	00000a3a 	.word	0x00000a3a
   34558:	20202020 	.word	0x20202020
   3455c:	20202020 	.word	0x20202020
   34560:	2d6e6f4e 	.word	0x2d6e6f4e
   34564:	63736964 	.word	0x63736964
   34568:	7265766f 	.word	0x7265766f
   3456c:	656c6261 	.word	0x656c6261
   34570:	646f6d20 	.word	0x646f6d20
   34574:	00000a65 	.word	0x00000a65
   34578:	20202020 	.word	0x20202020
   3457c:	20202020 	.word	0x20202020
   34580:	696d694c 	.word	0x696d694c
   34584:	20646574 	.word	0x20646574
   34588:	63736964 	.word	0x63736964
   3458c:	7265766f 	.word	0x7265766f
   34590:	656c6261 	.word	0x656c6261
   34594:	646f6d20 	.word	0x646f6d20
   34598:	00000a65 	.word	0x00000a65
   3459c:	20202020 	.word	0x20202020
   345a0:	20202020 	.word	0x20202020
   345a4:	656e6547 	.word	0x656e6547
   345a8:	206c6172 	.word	0x206c6172
   345ac:	63736964 	.word	0x63736964
   345b0:	7265766f 	.word	0x7265766f
   345b4:	656c6261 	.word	0x656c6261
   345b8:	646f6d20 	.word	0x646f6d20
   345bc:	00000a65 	.word	0x00000a65
   345c0:	20202020 	.word	0x20202020
   345c4:	20202020 	.word	0x20202020
   345c8:	452f5242 	.word	0x452f5242
   345cc:	6e205244 	.word	0x6e205244
   345d0:	7320746f 	.word	0x7320746f
   345d4:	6f707075 	.word	0x6f707075
   345d8:	64657472 	.word	0x64657472
   345dc:	0000000a 	.word	0x0000000a
   345e0:	20202020 	.word	0x20202020
   345e4:	64697575 	.word	0x64697575
   345e8:	28363173 	.word	0x28363173
   345ec:	6f637325 	.word	0x6f637325
   345f0:	656c706d 	.word	0x656c706d
   345f4:	3d296574 	.word	0x3d296574
   345f8:	00000000 	.word	0x00000000
   345fc:	20202020 	.word	0x20202020
   34600:	64697575 	.word	0x64697575
   34604:	28323373 	.word	0x28323373
   34608:	6f637325 	.word	0x6f637325
   3460c:	656c706d 	.word	0x656c706d
   34610:	3d296574 	.word	0x3d296574
   34614:	00000000 	.word	0x00000000
   34618:	20202020 	.word	0x20202020
   3461c:	64697575 	.word	0x64697575
   34620:	38323173 	.word	0x38323173
   34624:	63732528 	.word	0x63732528
   34628:	6c706d6f 	.word	0x6c706d6f
   3462c:	29657465 	.word	0x29657465
   34630:	0000003d 	.word	0x0000003d
   34634:	20202020 	.word	0x20202020
   34638:	656d616e 	.word	0x656d616e
   3463c:	63732528 	.word	0x63732528
   34640:	6c706d6f 	.word	0x6c706d6f
   34644:	29657465 	.word	0x29657465
   34648:	0000003d 	.word	0x0000003d
   3464c:	20202020 	.word	0x20202020
   34650:	705f7874 	.word	0x705f7874
   34654:	6c5f7277 	.word	0x6c5f7277
   34658:	253d6c76 	.word	0x253d6c76
   3465c:	00000a64 	.word	0x00000a64
   34660:	20202020 	.word	0x20202020
   34664:	76616c73 	.word	0x76616c73
   34668:	74695f65 	.word	0x74695f65
   3466c:	725f6c76 	.word	0x725f6c76
   34670:	65676e61 	.word	0x65676e61
   34674:	0000003d 	.word	0x0000003d
   34678:	20202020 	.word	0x20202020
   3467c:	5f637673 	.word	0x5f637673
   34680:	61746164 	.word	0x61746164
   34684:	6975755f 	.word	0x6975755f
   34688:	3d363164 	.word	0x3d363164
   3468c:	00000000 	.word	0x00000000
   34690:	20202020 	.word	0x20202020
   34694:	6c627570 	.word	0x6c627570
   34698:	745f6369 	.word	0x745f6369
   3469c:	615f7467 	.word	0x615f7467
   346a0:	3d726464 	.word	0x3d726464
   346a4:	00000000 	.word	0x00000000
   346a8:	20202020 	.word	0x20202020
   346ac:	65707061 	.word	0x65707061
   346b0:	6e617261 	.word	0x6e617261
   346b4:	303d6563 	.word	0x303d6563
   346b8:	34302578 	.word	0x34302578
   346bc:	00000a78 	.word	0x00000a78
   346c0:	20202020 	.word	0x20202020
   346c4:	5f766461 	.word	0x5f766461
   346c8:	6c767469 	.word	0x6c767469
   346cc:	2578303d 	.word	0x2578303d
   346d0:	0a783430 	.word	0x0a783430
   346d4:	00000000 	.word	0x00000000
   346d8:	20202020 	.word	0x20202020
   346dc:	5f637673 	.word	0x5f637673
   346e0:	61746164 	.word	0x61746164
   346e4:	6975755f 	.word	0x6975755f
   346e8:	3d323364 	.word	0x3d323364
   346ec:	00000000 	.word	0x00000000
   346f0:	20202020 	.word	0x20202020
   346f4:	5f637673 	.word	0x5f637673
   346f8:	61746164 	.word	0x61746164
   346fc:	6975755f 	.word	0x6975755f
   34700:	38323164 	.word	0x38323164
   34704:	0000003d 	.word	0x0000003d
   34708:	20202020 	.word	0x20202020
   3470c:	3d697275 	.word	0x3d697275
   34710:	00000000 	.word	0x00000000
   34714:	20202020 	.word	0x20202020
   34718:	5f67666d 	.word	0x5f67666d
   3471c:	61746164 	.word	0x61746164
   34720:	0000003d 	.word	0x0000003d
   34724:	74616420 	.word	0x74616420
   34728:	656c5f61 	.word	0x656c5f61
   3472c:	6874676e 	.word	0x6874676e
   34730:	2064253d 	.word	0x2064253d
   34734:	61746164 	.word	0x61746164
   34738:	0000003d 	.word	0x0000003d
   3473c:	65696620 	.word	0x65696620
   34740:	3a73646c 	.word	0x3a73646c
   34744:	0000000a 	.word	0x0000000a
   34748:	6c696166 	.word	0x6c696166
   3474c:	00006465 	.word	0x00006465
   34750:	61747365 	.word	0x61747365
   34754:	73696c62 	.word	0x73696c62
   34758:	00646568 	.word	0x00646568
   3475c:	6e6e6f63 	.word	0x6e6e6f63
   34760:	69746365 	.word	0x69746365
   34764:	25206e6f 	.word	0x25206e6f
   34768:	73203b73 	.word	0x73203b73
   3476c:	75746174 	.word	0x75746174
   34770:	64253d73 	.word	0x64253d73
   34774:	00000020 	.word	0x00000020
   34778:	63736964 	.word	0x63736964
   3477c:	656e6e6f 	.word	0x656e6e6f
   34780:	203b7463 	.word	0x203b7463
   34784:	73616572 	.word	0x73616572
   34788:	253d6e6f 	.word	0x253d6e6f
   3478c:	00002064 	.word	0x00002064
   34790:	65636572 	.word	0x65636572
   34794:	64657669 	.word	0x64657669
   34798:	76646120 	.word	0x76646120
   3479c:	69747265 	.word	0x69747265
   347a0:	656d6573 	.word	0x656d6573
   347a4:	203b746e 	.word	0x203b746e
   347a8:	6e657665 	.word	0x6e657665
   347ac:	79745f74 	.word	0x79745f74
   347b0:	253d6570 	.word	0x253d6570
   347b4:	73722064 	.word	0x73722064
   347b8:	253d6973 	.word	0x253d6973
   347bc:	64612064 	.word	0x64612064
   347c0:	745f7264 	.word	0x745f7264
   347c4:	3d657079 	.word	0x3d657079
   347c8:	61206425 	.word	0x61206425
   347cc:	3d726464 	.word	0x3d726464
   347d0:	00000000 	.word	0x00000000
   347d4:	6e6f430a 	.word	0x6e6f430a
   347d8:	7463656e 	.word	0x7463656e
   347dc:	656c6261 	.word	0x656c6261
   347e0:	72696420 	.word	0x72696420
   347e4:	65746365 	.word	0x65746365
   347e8:	64612064 	.word	0x64612064
   347ec:	74726576 	.word	0x74726576
   347f0:	6e697369 	.word	0x6e697369
   347f4:	76652067 	.word	0x76652067
   347f8:	0a746e65 	.word	0x0a746e65
   347fc:	00000000 	.word	0x00000000
   34800:	6e6e6f63 	.word	0x6e6e6f63
   34804:	69746365 	.word	0x69746365
   34808:	75206e6f 	.word	0x75206e6f
   3480c:	74616470 	.word	0x74616470
   34810:	203b6465 	.word	0x203b6465
   34814:	74617473 	.word	0x74617473
   34818:	253d7375 	.word	0x253d7375
   3481c:	00002064 	.word	0x00002064
   34820:	6e6e6f63 	.word	0x6e6e6f63
   34824:	69746365 	.word	0x69746365
   34828:	75206e6f 	.word	0x75206e6f
   3482c:	74616470 	.word	0x74616470
   34830:	65722065 	.word	0x65722065
   34834:	73657571 	.word	0x73657571
   34838:	00000a74 	.word	0x00000a74
   3483c:	73736170 	.word	0x73736170
   34840:	2079656b 	.word	0x2079656b
   34844:	69746361 	.word	0x69746361
   34848:	65206e6f 	.word	0x65206e6f
   3484c:	746e6576 	.word	0x746e6576
   34850:	6361203b 	.word	0x6361203b
   34854:	6e6f6974 	.word	0x6e6f6974
   34858:	0064253d 	.word	0x0064253d
   3485c:	6d756e20 	.word	0x6d756e20
   34860:	3d706d63 	.word	0x3d706d63
   34864:	00756c25 	.word	0x00756c25
   34868:	63736964 	.word	0x63736964
   3486c:	7265766f 	.word	0x7265766f
   34870:	6f632079 	.word	0x6f632079
   34874:	656c706d 	.word	0x656c706d
   34878:	203b6574 	.word	0x203b6574
   3487c:	73616572 	.word	0x73616572
   34880:	253d6e6f 	.word	0x253d6e6f
   34884:	00000a64 	.word	0x00000a64
   34888:	65766461 	.word	0x65766461
   3488c:	73697472 	.word	0x73697472
   34890:	6f632065 	.word	0x6f632065
   34894:	656c706d 	.word	0x656c706d
   34898:	203b6574 	.word	0x203b6574
   3489c:	73616572 	.word	0x73616572
   348a0:	253d6e6f 	.word	0x253d6e6f
   348a4:	00000a64 	.word	0x00000a64
   348a8:	72636e65 	.word	0x72636e65
   348ac:	69747079 	.word	0x69747079
   348b0:	63206e6f 	.word	0x63206e6f
   348b4:	676e6168 	.word	0x676e6168
   348b8:	76652065 	.word	0x76652065
   348bc:	3b746e65 	.word	0x3b746e65
   348c0:	61747320 	.word	0x61747320
   348c4:	3d737574 	.word	0x3d737574
   348c8:	00206425 	.word	0x00206425
   348cc:	69746f6e 	.word	0x69746f6e
   348d0:	61636966 	.word	0x61636966
   348d4:	6e6f6974 	.word	0x6e6f6974
   348d8:	20787220 	.word	0x20787220
   348dc:	6e657665 	.word	0x6e657665
   348e0:	61203b74 	.word	0x61203b74
   348e4:	5f727474 	.word	0x5f727474
   348e8:	646e6168 	.word	0x646e6168
   348ec:	253d656c 	.word	0x253d656c
   348f0:	6e692064 	.word	0x6e692064
   348f4:	61636964 	.word	0x61636964
   348f8:	6e6f6974 	.word	0x6e6f6974
   348fc:	2064253d 	.word	0x2064253d
   34900:	3d6e656c 	.word	0x3d6e656c
   34904:	64206425 	.word	0x64206425
   34908:	3d617461 	.word	0x3d617461
   3490c:	00000000 	.word	0x00000000
   34910:	69746f6e 	.word	0x69746f6e
   34914:	61636966 	.word	0x61636966
   34918:	6e6f6974 	.word	0x6e6f6974
   3491c:	20787420 	.word	0x20787420
   34920:	6e657665 	.word	0x6e657665
   34924:	73203b74 	.word	0x73203b74
   34928:	75746174 	.word	0x75746174
   3492c:	64253d73 	.word	0x64253d73
   34930:	74746120 	.word	0x74746120
   34934:	61685f72 	.word	0x61685f72
   34938:	656c646e 	.word	0x656c646e
   3493c:	2064253d 	.word	0x2064253d
   34940:	69646e69 	.word	0x69646e69
   34944:	69746163 	.word	0x69746163
   34948:	253d6e6f 	.word	0x253d6e6f
   3494c:	00000a64 	.word	0x00000a64
   34950:	73627573 	.word	0x73627573
   34954:	62697263 	.word	0x62697263
   34958:	76652065 	.word	0x76652065
   3495c:	3b746e65 	.word	0x3b746e65
   34960:	6e6f6320 	.word	0x6e6f6320
   34964:	61685f6e 	.word	0x61685f6e
   34968:	656c646e 	.word	0x656c646e
   3496c:	2064253d 	.word	0x2064253d
   34970:	72747461 	.word	0x72747461
   34974:	6e61685f 	.word	0x6e61685f
   34978:	3d656c64 	.word	0x3d656c64
   3497c:	72206425 	.word	0x72206425
   34980:	6f736165 	.word	0x6f736165
   34984:	64253d6e 	.word	0x64253d6e
   34988:	65727020 	.word	0x65727020
   3498c:	253d6e76 	.word	0x253d6e76
   34990:	75632064 	.word	0x75632064
   34994:	253d6e72 	.word	0x253d6e72
   34998:	72702064 	.word	0x72702064
   3499c:	3d697665 	.word	0x3d697665
   349a0:	63206425 	.word	0x63206425
   349a4:	3d697275 	.word	0x3d697275
   349a8:	000a6425 	.word	0x000a6425
   349ac:	2075746d 	.word	0x2075746d
   349b0:	61647075 	.word	0x61647075
   349b4:	65206574 	.word	0x65206574
   349b8:	746e6576 	.word	0x746e6576
   349bc:	6f63203b 	.word	0x6f63203b
   349c0:	685f6e6e 	.word	0x685f6e6e
   349c4:	6c646e61 	.word	0x6c646e61
   349c8:	64253d65 	.word	0x64253d65
   349cc:	64696320 	.word	0x64696320
   349d0:	2064253d 	.word	0x2064253d
   349d4:	3d75746d 	.word	0x3d75746d
   349d8:	000a6425 	.word	0x000a6425
   349dc:	6e656469 	.word	0x6e656469
   349e0:	79746974 	.word	0x79746974
   349e4:	73657220 	.word	0x73657220
   349e8:	65766c6f 	.word	0x65766c6f
   349ec:	00002064 	.word	0x00002064
   349f0:	20594850 	.word	0x20594850
   349f4:	61647075 	.word	0x61647075
   349f8:	63206574 	.word	0x63206574
   349fc:	6c706d6f 	.word	0x6c706d6f
   34a00:	3b657465 	.word	0x3b657465
   34a04:	61747320 	.word	0x61747320
   34a08:	3d737574 	.word	0x3d737574
   34a0c:	202c6425 	.word	0x202c6425
   34a10:	6e6e6f63 	.word	0x6e6e6f63
   34a14:	6e61685f 	.word	0x6e61685f
   34a18:	3d656c64 	.word	0x3d656c64
   34a1c:	20206425 	.word	0x20206425
   34a20:	705f7874 	.word	0x705f7874
   34a24:	253d7968 	.word	0x253d7968
   34a28:	72202c64 	.word	0x72202c64
   34a2c:	68705f78 	.word	0x68705f78
   34a30:	64253d79 	.word	0x64253d79
   34a34:	0000000a 	.word	0x0000000a
   34a38:	204d4f4f 	.word	0x204d4f4f
   34a3c:	4c494857 	.word	0x4c494857
   34a40:	49442045 	.word	0x49442045
   34a44:	564f4353 	.word	0x564f4353
   34a48:	4e495245 	.word	0x4e495245
   34a4c:	45442047 	.word	0x45442047
   34a50:	49524353 	.word	0x49524353
   34a54:	524f5450 	.word	0x524f5450
   34a58:	0000000a 	.word	0x0000000a
   34a5c:	646e6553 	.word	0x646e6553
   34a60:	20676e69 	.word	0x20676e69
   34a64:	252f6425 	.word	0x252f6425
   34a68:	656c2064 	.word	0x656c2064
   34a6c:	25203a6e 	.word	0x25203a6e
   34a70:	00000a64 	.word	0x00000a64
   34a74:	6c696146 	.word	0x6c696146
   34a78:	74206465 	.word	0x74206465
   34a7c:	6573206f 	.word	0x6573206f
   34a80:	64692074 	.word	0x64692074
   34a84:	69746e65 	.word	0x69746e65
   34a88:	61207974 	.word	0x61207974
   34a8c:	65726464 	.word	0x65726464
   34a90:	000a7373 	.word	0x000a7373
   34a94:	74736f48 	.word	0x74736f48
   34a98:	646e6120 	.word	0x646e6120
   34a9c:	6e6f6320 	.word	0x6e6f6320
   34aa0:	6c6f7274 	.word	0x6c6f7274
   34aa4:	2072656c 	.word	0x2072656c
   34aa8:	636e7973 	.word	0x636e7973
   34aac:	000a6465 	.word	0x000a6465
   34ab0:	72616863 	.word	0x72616863
   34ab4:	65746361 	.word	0x65746361
   34ab8:	74736972 	.word	0x74736972
   34abc:	64206369 	.word	0x64206369
   34ac0:	6f637369 	.word	0x6f637369
   34ac4:	79726576 	.word	0x79726576
   34ac8:	63757320 	.word	0x63757320
   34acc:	73736563 	.word	0x73736563
   34ad0:	0a6c7566 	.word	0x0a6c7566
   34ad4:	00000000 	.word	0x00000000
   34ad8:	76726573 	.word	0x76726573
   34adc:	20656369 	.word	0x20656369
   34ae0:	63736964 	.word	0x63736964
   34ae4:	7265766f 	.word	0x7265766f
   34ae8:	75732079 	.word	0x75732079
   34aec:	73656363 	.word	0x73656363
   34af0:	6c756673 	.word	0x6c756673
   34af4:	0000000a 	.word	0x0000000a
   34af8:	63736564 	.word	0x63736564
   34afc:	74706972 	.word	0x74706972
   34b00:	6420726f 	.word	0x6420726f
   34b04:	6f637369 	.word	0x6f637369
   34b08:	79726576 	.word	0x79726576
   34b0c:	63757320 	.word	0x63757320
   34b10:	73736563 	.word	0x73736563
   34b14:	0a6c7566 	.word	0x0a6c7566
   34b18:	00000000 	.word	0x00000000
   34b1c:	64616572 	.word	0x64616572
   34b20:	636f6c20 	.word	0x636f6c20
   34b24:	203b6c61 	.word	0x203b6c61
   34b28:	72747461 	.word	0x72747461
   34b2c:	6e61685f 	.word	0x6e61685f
   34b30:	3d656c64 	.word	0x3d656c64
   34b34:	6c206425 	.word	0x6c206425
   34b38:	253d6e65 	.word	0x253d6e65
   34b3c:	61762064 	.word	0x61762064
   34b40:	3d65756c 	.word	0x3d65756c
   34b44:	00000000 	.word	0x00000000
   34b48:	20454c42 	.word	0x20454c42
   34b4c:	65747865 	.word	0x65747865
   34b50:	6465646e 	.word	0x6465646e
   34b54:	76646120 	.word	0x76646120
   34b58:	69747265 	.word	0x69747265
   34b5c:	676e6973 	.word	0x676e6973
   34b60:	746f6e20 	.word	0x746f6e20
   34b64:	70757320 	.word	0x70757320
   34b68:	74726f70 	.word	0x74726f70
   34b6c:	002e6465 	.word	0x002e6465
   34b70:	6e6f4320 	.word	0x6e6f4320
   34b74:	75676966 	.word	0x75676966
   34b78:	6e206572 	.word	0x6e206572
   34b7c:	6c626d69 	.word	0x6c626d69
   34b80:	6f682065 	.word	0x6f682065
   34b84:	74207473 	.word	0x74207473
   34b88:	6e65206f 	.word	0x6e65206f
   34b8c:	656c6261 	.word	0x656c6261
   34b90:	0a746920 	.word	0x0a746920
   34b94:	00000000 	.word	0x00000000
   34b98:	6c756f43 	.word	0x6c756f43
   34b9c:	6f6e2064 	.word	0x6f6e2064
   34ba0:	69662074 	.word	0x69662074
   34ba4:	6220646e 	.word	0x6220646e
   34ba8:	685f656c 	.word	0x685f656c
   34bac:	6f635f73 	.word	0x6f635f73
   34bb0:	66206e6e 	.word	0x66206e6e
   34bb4:	6820726f 	.word	0x6820726f
   34bb8:	6c646e61 	.word	0x6c646e61
   34bbc:	25203a65 	.word	0x25203a65
   34bc0:	00000a64 	.word	0x00000a64
   34bc4:	68737462 	.word	0x68737462
   34bc8:	5f6c6c65 	.word	0x5f6c6c65
   34bcc:	5f637673 	.word	0x5f637673
   34bd0:	6c6f6f70 	.word	0x6c6f6f70
   34bd4:	00000000 	.word	0x00000000
   34bd8:	68737462 	.word	0x68737462
   34bdc:	5f6c6c65 	.word	0x5f6c6c65
   34be0:	5f726863 	.word	0x5f726863
   34be4:	6c6f6f70 	.word	0x6c6f6f70
   34be8:	00000000 	.word	0x00000000
   34bec:	68737462 	.word	0x68737462
   34bf0:	5f6c6c65 	.word	0x5f6c6c65
   34bf4:	5f637364 	.word	0x5f637364
   34bf8:	6c6f6f70 	.word	0x6c6f6f70
   34bfc:	00000000 	.word	0x00000000
   34c00:	626d696e 	.word	0x626d696e
   34c04:	622d656c 	.word	0x622d656c
   34c08:	65687374 	.word	0x65687374
   34c0c:	00006c6c 	.word	0x00006c6c
   34c10:	0000003a 	.word	0x0000003a
   34c14:	78307325 	.word	0x78307325
   34c18:	78323025 	.word	0x78323025
   34c1c:	00000000 	.word	0x00000000
   34c20:	78323025 	.word	0x78323025
   34c24:	3230253a 	.word	0x3230253a
   34c28:	30253a78 	.word	0x30253a78
   34c2c:	253a7832 	.word	0x253a7832
   34c30:	3a783230 	.word	0x3a783230
   34c34:	78323025 	.word	0x78323025
   34c38:	3230253a 	.word	0x3230253a
   34c3c:	00000078 	.word	0x00000078
   34c40:	00007325 	.word	0x00007325
   34c44:	20202020 	.word	0x20202020
   34c48:	20202020 	.word	0x20202020
   34c4c:	20202020 	.word	0x20202020
   34c50:	5f637364 	.word	0x5f637364
   34c54:	646e6168 	.word	0x646e6168
   34c58:	253d656c 	.word	0x253d656c
   34c5c:	75752064 	.word	0x75752064
   34c60:	003d6469 	.word	0x003d6469
   34c64:	20202020 	.word	0x20202020
   34c68:	20202020 	.word	0x20202020
   34c6c:	5f666564 	.word	0x5f666564
   34c70:	646e6168 	.word	0x646e6168
   34c74:	253d656c 	.word	0x253d656c
   34c78:	61762064 	.word	0x61762064
   34c7c:	61685f6c 	.word	0x61685f6c
   34c80:	656c646e 	.word	0x656c646e
   34c84:	2064253d 	.word	0x2064253d
   34c88:	706f7270 	.word	0x706f7270
   34c8c:	69747265 	.word	0x69747265
   34c90:	303d7365 	.word	0x303d7365
   34c94:	32302578 	.word	0x32302578
   34c98:	75752078 	.word	0x75752078
   34c9c:	003d6469 	.word	0x003d6469
   34ca0:	646e6168 	.word	0x646e6168
   34ca4:	253d656c 	.word	0x253d656c
   34ca8:	756f2064 	.word	0x756f2064
   34cac:	746f5f72 	.word	0x746f5f72
   34cb0:	64615f61 	.word	0x64615f61
   34cb4:	745f7264 	.word	0x745f7264
   34cb8:	3d657079 	.word	0x3d657079
   34cbc:	6f206425 	.word	0x6f206425
   34cc0:	6f5f7275 	.word	0x6f5f7275
   34cc4:	615f6174 	.word	0x615f6174
   34cc8:	3d726464 	.word	0x3d726464
   34ccc:	00000000 	.word	0x00000000
   34cd0:	72756f20 	.word	0x72756f20
   34cd4:	5f64695f 	.word	0x5f64695f
   34cd8:	72646461 	.word	0x72646461
   34cdc:	7079745f 	.word	0x7079745f
   34ce0:	64253d65 	.word	0x64253d65
   34ce4:	72756f20 	.word	0x72756f20
   34ce8:	5f64695f 	.word	0x5f64695f
   34cec:	72646461 	.word	0x72646461
   34cf0:	0000003d 	.word	0x0000003d
   34cf4:	65657020 	.word	0x65657020
   34cf8:	746f5f72 	.word	0x746f5f72
   34cfc:	64615f61 	.word	0x64615f61
   34d00:	745f7264 	.word	0x745f7264
   34d04:	3d657079 	.word	0x3d657079
   34d08:	70206425 	.word	0x70206425
   34d0c:	5f726565 	.word	0x5f726565
   34d10:	5f61746f 	.word	0x5f61746f
   34d14:	72646461 	.word	0x72646461
   34d18:	0000003d 	.word	0x0000003d
   34d1c:	65657020 	.word	0x65657020
   34d20:	64695f72 	.word	0x64695f72
   34d24:	6464615f 	.word	0x6464615f
   34d28:	79745f72 	.word	0x79745f72
   34d2c:	253d6570 	.word	0x253d6570
   34d30:	65702064 	.word	0x65702064
   34d34:	695f7265 	.word	0x695f7265
   34d38:	64615f64 	.word	0x64615f64
   34d3c:	003d7264 	.word	0x003d7264
   34d40:	6e6f6320 	.word	0x6e6f6320
   34d44:	74695f6e 	.word	0x74695f6e
   34d48:	253d6c76 	.word	0x253d6c76
   34d4c:	6f632064 	.word	0x6f632064
   34d50:	6c5f6e6e 	.word	0x6c5f6e6e
   34d54:	6e657461 	.word	0x6e657461
   34d58:	253d7963 	.word	0x253d7963
   34d5c:	75732064 	.word	0x75732064
   34d60:	76726570 	.word	0x76726570
   34d64:	6f697369 	.word	0x6f697369
   34d68:	69745f6e 	.word	0x69745f6e
   34d6c:	756f656d 	.word	0x756f656d
   34d70:	64253d74 	.word	0x64253d74
   34d74:	79656b20 	.word	0x79656b20
   34d78:	7a69735f 	.word	0x7a69735f
   34d7c:	64253d65 	.word	0x64253d65
   34d80:	636e6520 	.word	0x636e6520
   34d84:	74707972 	.word	0x74707972
   34d88:	253d6465 	.word	0x253d6465
   34d8c:	75612064 	.word	0x75612064
   34d90:	6e656874 	.word	0x6e656874
   34d94:	61636974 	.word	0x61636974
   34d98:	3d646574 	.word	0x3d646574
   34d9c:	62206425 	.word	0x62206425
   34da0:	65646e6f 	.word	0x65646e6f
   34da4:	64253d64 	.word	0x64253d64
   34da8:	0000000a 	.word	0x0000000a
   34dac:	20202020 	.word	0x20202020
   34db0:	72617473 	.word	0x72617473
   34db4:	64253d74 	.word	0x64253d74
   34db8:	646e6520 	.word	0x646e6520
   34dbc:	2064253d 	.word	0x2064253d
   34dc0:	64697575 	.word	0x64697575
   34dc4:	0000003d 	.word	0x0000003d
   34dc8:	74736f68 	.word	0x74736f68
   34dcc:	6f747320 	.word	0x6f747320
   34dd0:	64657070 	.word	0x64657070
   34dd4:	0000000a 	.word	0x0000000a
   34dd8:	74736f68 	.word	0x74736f68
   34ddc:	69616620 	.word	0x69616620
   34de0:	2064656c 	.word	0x2064656c
   34de4:	73206f74 	.word	0x73206f74
   34de8:	3b706f74 	.word	0x3b706f74
   34dec:	3d637220 	.word	0x3d637220
   34df0:	000a6425 	.word	0x000a6425
   34df4:	6e6e6f63 	.word	0x6e6e6f63
   34df8:	00000000 	.word	0x00000000
   34dfc:	61766e69 	.word	0x61766e69
   34e00:	2064696c 	.word	0x2064696c
   34e04:	6e6f6327 	.word	0x6e6f6327
   34e08:	7020276e 	.word	0x7020276e
   34e0c:	6d617261 	.word	0x6d617261
   34e10:	72657465 	.word	0x72657465
   34e14:	0000000a 	.word	0x0000000a
   34e18:	6c756f43 	.word	0x6c756f43
   34e1c:	6f6e2064 	.word	0x6f6e2064
   34e20:	65722074 	.word	0x65722074
   34e24:	50206461 	.word	0x50206461
   34e28:	65205948 	.word	0x65205948
   34e2c:	726f7272 	.word	0x726f7272
   34e30:	6425203a 	.word	0x6425203a
   34e34:	0000000a 	.word	0x0000000a
   34e38:	505f5854 	.word	0x505f5854
   34e3c:	203a5948 	.word	0x203a5948
   34e40:	000a6425 	.word	0x000a6425
   34e44:	505f5852 	.word	0x505f5852
   34e48:	203a5948 	.word	0x203a5948
   34e4c:	000a6425 	.word	0x000a6425
   34e50:	705f7874 	.word	0x705f7874
   34e54:	5f737968 	.word	0x5f737968
   34e58:	6b73616d 	.word	0x6b73616d
   34e5c:	00000000 	.word	0x00000000
   34e60:	61766e69 	.word	0x61766e69
   34e64:	2064696c 	.word	0x2064696c
   34e68:	5f787427 	.word	0x5f787427
   34e6c:	73796870 	.word	0x73796870
   34e70:	73616d5f 	.word	0x73616d5f
   34e74:	7020276b 	.word	0x7020276b
   34e78:	6d617261 	.word	0x6d617261
   34e7c:	72657465 	.word	0x72657465
   34e80:	0000000a 	.word	0x0000000a
   34e84:	705f7872 	.word	0x705f7872
   34e88:	5f737968 	.word	0x5f737968
   34e8c:	6b73616d 	.word	0x6b73616d
   34e90:	00000000 	.word	0x00000000
   34e94:	61766e69 	.word	0x61766e69
   34e98:	2064696c 	.word	0x2064696c
   34e9c:	5f787227 	.word	0x5f787227
   34ea0:	73796870 	.word	0x73796870
   34ea4:	73616d5f 	.word	0x73616d5f
   34ea8:	7020276b 	.word	0x7020276b
   34eac:	6d617261 	.word	0x6d617261
   34eb0:	72657465 	.word	0x72657465
   34eb4:	0000000a 	.word	0x0000000a
   34eb8:	5f796870 	.word	0x5f796870
   34ebc:	7374706f 	.word	0x7374706f
   34ec0:	00000000 	.word	0x00000000
   34ec4:	61766e69 	.word	0x61766e69
   34ec8:	2064696c 	.word	0x2064696c
   34ecc:	79687027 	.word	0x79687027
   34ed0:	74706f5f 	.word	0x74706f5f
   34ed4:	70202773 	.word	0x70202773
   34ed8:	6d617261 	.word	0x6d617261
   34edc:	72657465 	.word	0x72657465
   34ee0:	0000000a 	.word	0x0000000a
   34ee4:	706f7473 	.word	0x706f7473
   34ee8:	00000000 	.word	0x00000000
   34eec:	61766e69 	.word	0x61766e69
   34ef0:	2064696c 	.word	0x2064696c
   34ef4:	6f747327 	.word	0x6f747327
   34ef8:	70202770 	.word	0x70202770
   34efc:	6d617261 	.word	0x6d617261
   34f00:	72657465 	.word	0x72657465
   34f04:	0000000a 	.word	0x0000000a
   34f08:	676e656c 	.word	0x676e656c
   34f0c:	00006874 	.word	0x00006874
   34f10:	61766e69 	.word	0x61766e69
   34f14:	2064696c 	.word	0x2064696c
   34f18:	6e656c27 	.word	0x6e656c27
   34f1c:	27687467 	.word	0x27687467
   34f20:	72617020 	.word	0x72617020
   34f24:	74656d61 	.word	0x74656d61
   34f28:	000a7265 	.word	0x000a7265
   34f2c:	6f727265 	.word	0x6f727265
   34f30:	6c203a72 	.word	0x6c203a72
   34f34:	6d206e65 	.word	0x6d206e65
   34f38:	20747375 	.word	0x20747375
   34f3c:	62206562 	.word	0x62206562
   34f40:	65777465 	.word	0x65777465
   34f44:	34206e65 	.word	0x34206e65
   34f48:	646e6120 	.word	0x646e6120
   34f4c:	31353220 	.word	0x31353220
   34f50:	6e69202c 	.word	0x6e69202c
   34f54:	73756c63 	.word	0x73756c63
   34f58:	00657669 	.word	0x00657669
   34f5c:	65746172 	.word	0x65746172
   34f60:	00000000 	.word	0x00000000
   34f64:	61766e69 	.word	0x61766e69
   34f68:	2064696c 	.word	0x2064696c
   34f6c:	74617227 	.word	0x74617227
   34f70:	70202765 	.word	0x70202765
   34f74:	6d617261 	.word	0x6d617261
   34f78:	72657465 	.word	0x72657465
   34f7c:	0000000a 	.word	0x0000000a
   34f80:	006d756e 	.word	0x006d756e
   34f84:	61766e69 	.word	0x61766e69
   34f88:	2064696c 	.word	0x2064696c
   34f8c:	6d756e27 	.word	0x6d756e27
   34f90:	61702027 	.word	0x61702027
   34f94:	656d6172 	.word	0x656d6172
   34f98:	0a726574 	.word	0x0a726574
   34f9c:	00000000 	.word	0x00000000
   34fa0:	65707974 	.word	0x65707974
   34fa4:	00000000 	.word	0x00000000
   34fa8:	61766e69 	.word	0x61766e69
   34fac:	2064696c 	.word	0x2064696c
   34fb0:	70797427 	.word	0x70797427
   34fb4:	70202765 	.word	0x70202765
   34fb8:	6d617261 	.word	0x6d617261
   34fbc:	72657465 	.word	0x72657465
   34fc0:	0000000a 	.word	0x0000000a
   34fc4:	3a79654b 	.word	0x3a79654b
   34fc8:	00000020 	.word	0x00000020
   34fcc:	76696465 	.word	0x76696465
   34fd0:	2075253d 	.word	0x2075253d
   34fd4:	00000000 	.word	0x00000000
   34fd8:	76696465 	.word	0x76696465
   34fdc:	6c6c253d 	.word	0x6c6c253d
   34fe0:	00002075 	.word	0x00002075
   34fe4:	72646461 	.word	0x72646461
   34fe8:	7079745f 	.word	0x7079745f
   34fec:	75253d65 	.word	0x75253d65
   34ff0:	00000020 	.word	0x00000020
   34ff4:	20202020 	.word	0x20202020
   34ff8:	3a4b544c 	.word	0x3a4b544c
   34ffc:	00000020 	.word	0x00000020
   35000:	20202020 	.word	0x20202020
   35004:	3a4b5249 	.word	0x3a4b5249
   35008:	00000020 	.word	0x00000020
   3500c:	20202020 	.word	0x20202020
   35010:	4b525343 	.word	0x4b525343
   35014:	0000203a 	.word	0x0000203a
   35018:	20202020 	.word	0x20202020
   3501c:	72616863 	.word	0x72616863
   35020:	6c61765f 	.word	0x6c61765f
   35024:	6e61685f 	.word	0x6e61685f
   35028:	3a656c64 	.word	0x3a656c64
   3502c:	0a642520 	.word	0x0a642520
   35030:	00000000 	.word	0x00000000
   35034:	20202020 	.word	0x20202020
   35038:	67616c66 	.word	0x67616c66
   3503c:	20203a73 	.word	0x20203a73
   35040:	20202020 	.word	0x20202020
   35044:	20202020 	.word	0x20202020
   35048:	25783020 	.word	0x25783020
   3504c:	0a783230 	.word	0x0a783230
   35050:	00000000 	.word	0x00000000
   35054:	20202020 	.word	0x20202020
   35058:	6e616863 	.word	0x6e616863
   3505c:	3a646567 	.word	0x3a646567
   35060:	20202020 	.word	0x20202020
   35064:	20202020 	.word	0x20202020
   35068:	0a642520 	.word	0x0a642520
   3506c:	00000000 	.word	0x00000000
   35070:	72646461 	.word	0x72646461
   35074:	00000000 	.word	0x00000000
   35078:	61766e69 	.word	0x61766e69
   3507c:	2064696c 	.word	0x2064696c
   35080:	64646127 	.word	0x64646127
   35084:	70202772 	.word	0x70202772
   35088:	6d617261 	.word	0x6d617261
   3508c:	72657465 	.word	0x72657465
   35090:	0000000a 	.word	0x0000000a
   35094:	76696465 	.word	0x76696465
   35098:	00000000 	.word	0x00000000
   3509c:	61766e69 	.word	0x61766e69
   350a0:	2064696c 	.word	0x2064696c
   350a4:	69646527 	.word	0x69646527
   350a8:	70202776 	.word	0x70202776
   350ac:	6d617261 	.word	0x6d617261
   350b0:	72657465 	.word	0x72657465
   350b4:	0000000a 	.word	0x0000000a
   350b8:	646e6172 	.word	0x646e6172
   350bc:	00000000 	.word	0x00000000
   350c0:	61766e69 	.word	0x61766e69
   350c4:	2064696c 	.word	0x2064696c
   350c8:	6e617227 	.word	0x6e617227
   350cc:	70202764 	.word	0x70202764
   350d0:	6d617261 	.word	0x6d617261
   350d4:	72657465 	.word	0x72657465
   350d8:	0000000a 	.word	0x0000000a
   350dc:	006b746c 	.word	0x006b746c
   350e0:	61766e69 	.word	0x61766e69
   350e4:	2064696c 	.word	0x2064696c
   350e8:	6b746c27 	.word	0x6b746c27
   350ec:	61702027 	.word	0x61702027
   350f0:	656d6172 	.word	0x656d6172
   350f4:	0a726574 	.word	0x0a726574
   350f8:	00000000 	.word	0x00000000
   350fc:	006b7269 	.word	0x006b7269
   35100:	61766e69 	.word	0x61766e69
   35104:	2064696c 	.word	0x2064696c
   35108:	6b726927 	.word	0x6b726927
   3510c:	61702027 	.word	0x61702027
   35110:	656d6172 	.word	0x656d6172
   35114:	0a726574 	.word	0x0a726574
   35118:	00000000 	.word	0x00000000
   3511c:	6b727363 	.word	0x6b727363
   35120:	00000000 	.word	0x00000000
   35124:	61766e69 	.word	0x61766e69
   35128:	2064696c 	.word	0x2064696c
   3512c:	72736327 	.word	0x72736327
   35130:	7020276b 	.word	0x7020276b
   35134:	6d617261 	.word	0x6d617261
   35138:	72657465 	.word	0x72657465
   3513c:	0000000a 	.word	0x0000000a
   35140:	61766e69 	.word	0x61766e69
   35144:	2064696c 	.word	0x2064696c
   35148:	74636f27 	.word	0x74636f27
   3514c:	27737465 	.word	0x27737465
   35150:	72617020 	.word	0x72617020
   35154:	74656d61 	.word	0x74656d61
   35158:	000a7265 	.word	0x000a7265
   3515c:	656d6974 	.word	0x656d6974
   35160:	00000000 	.word	0x00000000
   35164:	61766e69 	.word	0x61766e69
   35168:	2064696c 	.word	0x2064696c
   3516c:	6d697427 	.word	0x6d697427
   35170:	70202765 	.word	0x70202765
   35174:	6d617261 	.word	0x6d617261
   35178:	72657465 	.word	0x72657465
   3517c:	0000000a 	.word	0x0000000a
   35180:	6f727265 	.word	0x6f727265
   35184:	65732072 	.word	0x65732072
   35188:	6e697474 	.word	0x6e697474
   3518c:	61642067 	.word	0x61642067
   35190:	6c206174 	.word	0x6c206174
   35194:	74676e65 	.word	0x74676e65
   35198:	72203b68 	.word	0x72203b68
   3519c:	64253d63 	.word	0x64253d63
   351a0:	0000000a 	.word	0x0000000a
   351a4:	65746e69 	.word	0x65746e69
   351a8:	6c617672 	.word	0x6c617672
   351ac:	6e696d5f 	.word	0x6e696d5f
   351b0:	00000000 	.word	0x00000000
   351b4:	61766e69 	.word	0x61766e69
   351b8:	2064696c 	.word	0x2064696c
   351bc:	746e6927 	.word	0x746e6927
   351c0:	61767265 	.word	0x61767265
   351c4:	696d5f6c 	.word	0x696d5f6c
   351c8:	7020276e 	.word	0x7020276e
   351cc:	6d617261 	.word	0x6d617261
   351d0:	72657465 	.word	0x72657465
   351d4:	0000000a 	.word	0x0000000a
   351d8:	65746e69 	.word	0x65746e69
   351dc:	6c617672 	.word	0x6c617672
   351e0:	78616d5f 	.word	0x78616d5f
   351e4:	00000000 	.word	0x00000000
   351e8:	61766e69 	.word	0x61766e69
   351ec:	2064696c 	.word	0x2064696c
   351f0:	746e6927 	.word	0x746e6927
   351f4:	61767265 	.word	0x61767265
   351f8:	616d5f6c 	.word	0x616d5f6c
   351fc:	70202778 	.word	0x70202778
   35200:	6d617261 	.word	0x6d617261
   35204:	72657465 	.word	0x72657465
   35208:	0000000a 	.word	0x0000000a
   3520c:	6574616c 	.word	0x6574616c
   35210:	0079636e 	.word	0x0079636e
   35214:	61766e69 	.word	0x61766e69
   35218:	2064696c 	.word	0x2064696c
   3521c:	74616c27 	.word	0x74616c27
   35220:	79636e65 	.word	0x79636e65
   35224:	61702027 	.word	0x61702027
   35228:	656d6172 	.word	0x656d6172
   3522c:	0a726574 	.word	0x0a726574
   35230:	00000000 	.word	0x00000000
   35234:	656d6974 	.word	0x656d6974
   35238:	0074756f 	.word	0x0074756f
   3523c:	61766e69 	.word	0x61766e69
   35240:	2064696c 	.word	0x2064696c
   35244:	6d697427 	.word	0x6d697427
   35248:	74756f65 	.word	0x74756f65
   3524c:	61702027 	.word	0x61702027
   35250:	656d6172 	.word	0x656d6172
   35254:	0a726574 	.word	0x0a726574
   35258:	00000000 	.word	0x00000000
   3525c:	5f6e696d 	.word	0x5f6e696d
   35260:	6e6e6f63 	.word	0x6e6e6f63
   35264:	6576655f 	.word	0x6576655f
   35268:	6c5f746e 	.word	0x6c5f746e
   3526c:	00006e65 	.word	0x00006e65
   35270:	61766e69 	.word	0x61766e69
   35274:	2064696c 	.word	0x2064696c
   35278:	6e696d27 	.word	0x6e696d27
   3527c:	6e6f635f 	.word	0x6e6f635f
   35280:	76655f6e 	.word	0x76655f6e
   35284:	5f746e65 	.word	0x5f746e65
   35288:	276e656c 	.word	0x276e656c
   3528c:	72617020 	.word	0x72617020
   35290:	74656d61 	.word	0x74656d61
   35294:	000a7265 	.word	0x000a7265
   35298:	5f78616d 	.word	0x5f78616d
   3529c:	6e6e6f63 	.word	0x6e6e6f63
   352a0:	6576655f 	.word	0x6576655f
   352a4:	6c5f746e 	.word	0x6c5f746e
   352a8:	00006e65 	.word	0x00006e65
   352ac:	61766e69 	.word	0x61766e69
   352b0:	2064696c 	.word	0x2064696c
   352b4:	78616d27 	.word	0x78616d27
   352b8:	6e6f635f 	.word	0x6e6f635f
   352bc:	76655f6e 	.word	0x76655f6e
   352c0:	5f746e65 	.word	0x5f746e65
   352c4:	276e656c 	.word	0x276e656c
   352c8:	72617020 	.word	0x72617020
   352cc:	74656d61 	.word	0x74656d61
   352d0:	000a7265 	.word	0x000a7265
   352d4:	6f727265 	.word	0x6f727265
   352d8:	70752072 	.word	0x70752072
   352dc:	69746164 	.word	0x69746164
   352e0:	6320676e 	.word	0x6320676e
   352e4:	656e6e6f 	.word	0x656e6e6f
   352e8:	6f697463 	.word	0x6f697463
   352ec:	72203b6e 	.word	0x72203b6e
   352f0:	64253d63 	.word	0x64253d63
   352f4:	0000000a 	.word	0x0000000a
   352f8:	6f727265 	.word	0x6f727265
   352fc:	65722072 	.word	0x65722072
   35300:	6e696461 	.word	0x6e696461
   35304:	73722067 	.word	0x73722067
   35308:	203b6973 	.word	0x203b6973
   3530c:	253d6372 	.word	0x253d6372
   35310:	00000a64 	.word	0x00000a64
   35314:	6e6e6f63 	.word	0x6e6e6f63
   35318:	2064253d 	.word	0x2064253d
   3531c:	69737372 	.word	0x69737372
   35320:	0a64253d 	.word	0x0a64253d
   35324:	00000000 	.word	0x00000000
   35328:	61766e69 	.word	0x61766e69
   3532c:	2064696c 	.word	0x2064696c
   35330:	64646127 	.word	0x64646127
   35334:	70202772 	.word	0x70202772
   35338:	6d617261 	.word	0x6d617261
   3533c:	72657465 	.word	0x72657465
   35340:	64252320 	.word	0x64252320
   35344:	0000000a 	.word	0x0000000a
   35348:	65646f6d 	.word	0x65646f6d
   3534c:	00000000 	.word	0x00000000
   35350:	7373696d 	.word	0x7373696d
   35354:	20676e69 	.word	0x20676e69
   35358:	65646f6d 	.word	0x65646f6d
   3535c:	0000000a 	.word	0x0000000a
   35360:	6f636564 	.word	0x6f636564
   35364:	6c5f6564 	.word	0x6c5f6564
   35368:	74696d69 	.word	0x74696d69
   3536c:	00000000 	.word	0x00000000
   35370:	61766e69 	.word	0x61766e69
   35374:	2064696c 	.word	0x2064696c
   35378:	63656427 	.word	0x63656427
   3537c:	5f65646f 	.word	0x5f65646f
   35380:	696d696c 	.word	0x696d696c
   35384:	70202774 	.word	0x70202774
   35388:	6d617261 	.word	0x6d617261
   3538c:	72657465 	.word	0x72657465
   35390:	0000000a 	.word	0x0000000a
   35394:	6f6e6769 	.word	0x6f6e6769
   35398:	6c5f6572 	.word	0x6c5f6572
   3539c:	63616765 	.word	0x63616765
   353a0:	00000079 	.word	0x00000079
   353a4:	61766e69 	.word	0x61766e69
   353a8:	2064696c 	.word	0x2064696c
   353ac:	6e676927 	.word	0x6e676927
   353b0:	5f65726f 	.word	0x5f65726f
   353b4:	6167656c 	.word	0x6167656c
   353b8:	20277963 	.word	0x20277963
   353bc:	61726170 	.word	0x61726170
   353c0:	6574656d 	.word	0x6574656d
   353c4:	00000a72 	.word	0x00000a72
   353c8:	69726570 	.word	0x69726570
   353cc:	6369646f 	.word	0x6369646f
   353d0:	6c6e6f5f 	.word	0x6c6e6f5f
   353d4:	00000079 	.word	0x00000079
   353d8:	61766e69 	.word	0x61766e69
   353dc:	2064696c 	.word	0x2064696c
   353e0:	72657027 	.word	0x72657027
   353e4:	69646f69 	.word	0x69646f69
   353e8:	6e6f5f63 	.word	0x6e6f5f63
   353ec:	2027796c 	.word	0x2027796c
   353f0:	61726170 	.word	0x61726170
   353f4:	6574656d 	.word	0x6574656d
   353f8:	00000a72 	.word	0x00000a72
   353fc:	67616c66 	.word	0x67616c66
   35400:	00000073 	.word	0x00000073
   35404:	61766e69 	.word	0x61766e69
   35408:	2064696c 	.word	0x2064696c
   3540c:	616c6627 	.word	0x616c6627
   35410:	20277367 	.word	0x20277367
   35414:	61726170 	.word	0x61726170
   35418:	6574656d 	.word	0x6574656d
   3541c:	00000a72 	.word	0x00000a72
   35420:	64697575 	.word	0x64697575
   35424:	00003631 	.word	0x00003631
   35428:	61766e69 	.word	0x61766e69
   3542c:	2064696c 	.word	0x2064696c
   35430:	69757527 	.word	0x69757527
   35434:	27363164 	.word	0x27363164
   35438:	72617020 	.word	0x72617020
   3543c:	74656d61 	.word	0x74656d61
   35440:	000a7265 	.word	0x000a7265
   35444:	64697575 	.word	0x64697575
   35448:	5f363173 	.word	0x5f363173
   3544c:	635f7369 	.word	0x635f7369
   35450:	6c706d6f 	.word	0x6c706d6f
   35454:	00657465 	.word	0x00657465
   35458:	61766e69 	.word	0x61766e69
   3545c:	2064696c 	.word	0x2064696c
   35460:	69757527 	.word	0x69757527
   35464:	36317364 	.word	0x36317364
   35468:	5f73695f 	.word	0x5f73695f
   3546c:	706d6f63 	.word	0x706d6f63
   35470:	6574656c 	.word	0x6574656c
   35474:	61702027 	.word	0x61702027
   35478:	656d6172 	.word	0x656d6172
   3547c:	0a726574 	.word	0x0a726574
   35480:	00000000 	.word	0x00000000
   35484:	64697575 	.word	0x64697575
   35488:	00003233 	.word	0x00003233
   3548c:	61766e69 	.word	0x61766e69
   35490:	2064696c 	.word	0x2064696c
   35494:	69757527 	.word	0x69757527
   35498:	27323364 	.word	0x27323364
   3549c:	72617020 	.word	0x72617020
   354a0:	74656d61 	.word	0x74656d61
   354a4:	000a7265 	.word	0x000a7265
   354a8:	64697575 	.word	0x64697575
   354ac:	5f323373 	.word	0x5f323373
   354b0:	635f7369 	.word	0x635f7369
   354b4:	6c706d6f 	.word	0x6c706d6f
   354b8:	00657465 	.word	0x00657465
   354bc:	61766e69 	.word	0x61766e69
   354c0:	2064696c 	.word	0x2064696c
   354c4:	69757527 	.word	0x69757527
   354c8:	32337364 	.word	0x32337364
   354cc:	5f73695f 	.word	0x5f73695f
   354d0:	706d6f63 	.word	0x706d6f63
   354d4:	6574656c 	.word	0x6574656c
   354d8:	61702027 	.word	0x61702027
   354dc:	656d6172 	.word	0x656d6172
   354e0:	0a726574 	.word	0x0a726574
   354e4:	00000000 	.word	0x00000000
   354e8:	64697575 	.word	0x64697575
   354ec:	00383231 	.word	0x00383231
   354f0:	61766e69 	.word	0x61766e69
   354f4:	2064696c 	.word	0x2064696c
   354f8:	69757527 	.word	0x69757527
   354fc:	38323164 	.word	0x38323164
   35500:	61702027 	.word	0x61702027
   35504:	656d6172 	.word	0x656d6172
   35508:	0a726574 	.word	0x0a726574
   3550c:	00000000 	.word	0x00000000
   35510:	64697575 	.word	0x64697575
   35514:	38323173 	.word	0x38323173
   35518:	5f73695f 	.word	0x5f73695f
   3551c:	706d6f63 	.word	0x706d6f63
   35520:	6574656c 	.word	0x6574656c
   35524:	00000000 	.word	0x00000000
   35528:	61766e69 	.word	0x61766e69
   3552c:	2064696c 	.word	0x2064696c
   35530:	69757527 	.word	0x69757527
   35534:	32317364 	.word	0x32317364
   35538:	73695f38 	.word	0x73695f38
   3553c:	6d6f635f 	.word	0x6d6f635f
   35540:	74656c70 	.word	0x74656c70
   35544:	70202765 	.word	0x70202765
   35548:	6d617261 	.word	0x6d617261
   3554c:	72657465 	.word	0x72657465
   35550:	0000000a 	.word	0x0000000a
   35554:	656d616e 	.word	0x656d616e
   35558:	00000000 	.word	0x00000000
   3555c:	705f7874 	.word	0x705f7874
   35560:	7265776f 	.word	0x7265776f
   35564:	76656c5f 	.word	0x76656c5f
   35568:	00006c65 	.word	0x00006c65
   3556c:	61766e69 	.word	0x61766e69
   35570:	2064696c 	.word	0x2064696c
   35574:	5f787427 	.word	0x5f787427
   35578:	65776f70 	.word	0x65776f70
   3557c:	656c5f72 	.word	0x656c5f72
   35580:	276c6576 	.word	0x276c6576
   35584:	72617020 	.word	0x72617020
   35588:	74656d61 	.word	0x74656d61
   3558c:	000a7265 	.word	0x000a7265
   35590:	76616c73 	.word	0x76616c73
   35594:	6e695f65 	.word	0x6e695f65
   35598:	76726574 	.word	0x76726574
   3559c:	725f6c61 	.word	0x725f6c61
   355a0:	65676e61 	.word	0x65676e61
   355a4:	00000000 	.word	0x00000000
   355a8:	61766e69 	.word	0x61766e69
   355ac:	2064696c 	.word	0x2064696c
   355b0:	616c7327 	.word	0x616c7327
   355b4:	695f6576 	.word	0x695f6576
   355b8:	7265746e 	.word	0x7265746e
   355bc:	5f6c6176 	.word	0x5f6c6176
   355c0:	676e6172 	.word	0x676e6172
   355c4:	70202765 	.word	0x70202765
   355c8:	6d617261 	.word	0x6d617261
   355cc:	72657465 	.word	0x72657465
   355d0:	0000000a 	.word	0x0000000a
   355d4:	76726573 	.word	0x76726573
   355d8:	5f656369 	.word	0x5f656369
   355dc:	61746164 	.word	0x61746164
   355e0:	6975755f 	.word	0x6975755f
   355e4:	00363164 	.word	0x00363164
   355e8:	61766e69 	.word	0x61766e69
   355ec:	2064696c 	.word	0x2064696c
   355f0:	72657327 	.word	0x72657327
   355f4:	65636976 	.word	0x65636976
   355f8:	7461645f 	.word	0x7461645f
   355fc:	75755f61 	.word	0x75755f61
   35600:	36316469 	.word	0x36316469
   35604:	61702027 	.word	0x61702027
   35608:	656d6172 	.word	0x656d6172
   3560c:	0a726574 	.word	0x0a726574
   35610:	00000000 	.word	0x00000000
   35614:	6c627570 	.word	0x6c627570
   35618:	745f6369 	.word	0x745f6369
   3561c:	65677261 	.word	0x65677261
   35620:	64615f74 	.word	0x64615f74
   35624:	73657264 	.word	0x73657264
   35628:	00000073 	.word	0x00000073
   3562c:	61766e69 	.word	0x61766e69
   35630:	2064696c 	.word	0x2064696c
   35634:	62757027 	.word	0x62757027
   35638:	5f63696c 	.word	0x5f63696c
   3563c:	67726174 	.word	0x67726174
   35640:	615f7465 	.word	0x615f7465
   35644:	65726464 	.word	0x65726464
   35648:	20277373 	.word	0x20277373
   3564c:	61726170 	.word	0x61726170
   35650:	6574656d 	.word	0x6574656d
   35654:	00000a72 	.word	0x00000a72
   35658:	65707061 	.word	0x65707061
   3565c:	6e617261 	.word	0x6e617261
   35660:	00006563 	.word	0x00006563
   35664:	61766e69 	.word	0x61766e69
   35668:	2064696c 	.word	0x2064696c
   3566c:	70706127 	.word	0x70706127
   35670:	61726165 	.word	0x61726165
   35674:	2765636e 	.word	0x2765636e
   35678:	72617020 	.word	0x72617020
   3567c:	74656d61 	.word	0x74656d61
   35680:	000a7265 	.word	0x000a7265
   35684:	65766461 	.word	0x65766461
   35688:	73697472 	.word	0x73697472
   3568c:	5f676e69 	.word	0x5f676e69
   35690:	65746e69 	.word	0x65746e69
   35694:	6c617672 	.word	0x6c617672
   35698:	00000000 	.word	0x00000000
   3569c:	61766e69 	.word	0x61766e69
   356a0:	2064696c 	.word	0x2064696c
   356a4:	76646127 	.word	0x76646127
   356a8:	69747265 	.word	0x69747265
   356ac:	676e6973 	.word	0x676e6973
   356b0:	746e695f 	.word	0x746e695f
   356b4:	61767265 	.word	0x61767265
   356b8:	7020276c 	.word	0x7020276c
   356bc:	6d617261 	.word	0x6d617261
   356c0:	72657465 	.word	0x72657465
   356c4:	0000000a 	.word	0x0000000a
   356c8:	76726573 	.word	0x76726573
   356cc:	5f656369 	.word	0x5f656369
   356d0:	61746164 	.word	0x61746164
   356d4:	6975755f 	.word	0x6975755f
   356d8:	00323364 	.word	0x00323364
   356dc:	61766e69 	.word	0x61766e69
   356e0:	2064696c 	.word	0x2064696c
   356e4:	72657327 	.word	0x72657327
   356e8:	65636976 	.word	0x65636976
   356ec:	7461645f 	.word	0x7461645f
   356f0:	75755f61 	.word	0x75755f61
   356f4:	32336469 	.word	0x32336469
   356f8:	61702027 	.word	0x61702027
   356fc:	656d6172 	.word	0x656d6172
   35700:	0a726574 	.word	0x0a726574
   35704:	00000000 	.word	0x00000000
   35708:	76726573 	.word	0x76726573
   3570c:	5f656369 	.word	0x5f656369
   35710:	61746164 	.word	0x61746164
   35714:	6975755f 	.word	0x6975755f
   35718:	38323164 	.word	0x38323164
   3571c:	00000000 	.word	0x00000000
   35720:	61766e69 	.word	0x61766e69
   35724:	2064696c 	.word	0x2064696c
   35728:	72657327 	.word	0x72657327
   3572c:	65636976 	.word	0x65636976
   35730:	7461645f 	.word	0x7461645f
   35734:	75755f61 	.word	0x75755f61
   35738:	32316469 	.word	0x32316469
   3573c:	70202738 	.word	0x70202738
   35740:	6d617261 	.word	0x6d617261
   35744:	72657465 	.word	0x72657465
   35748:	0000000a 	.word	0x0000000a
   3574c:	00697275 	.word	0x00697275
   35750:	61766e69 	.word	0x61766e69
   35754:	2064696c 	.word	0x2064696c
   35758:	69727527 	.word	0x69727527
   3575c:	61702027 	.word	0x61702027
   35760:	656d6172 	.word	0x656d6172
   35764:	0a726574 	.word	0x0a726574
   35768:	00000000 	.word	0x00000000
   3576c:	5f67666d 	.word	0x5f67666d
   35770:	61746164 	.word	0x61746164
   35774:	00000000 	.word	0x00000000
   35778:	61766e69 	.word	0x61766e69
   3577c:	2064696c 	.word	0x2064696c
   35780:	67666d27 	.word	0x67666d27
   35784:	7461645f 	.word	0x7461645f
   35788:	70202761 	.word	0x70202761
   3578c:	6d617261 	.word	0x6d617261
   35790:	72657465 	.word	0x72657465
   35794:	0000000a 	.word	0x0000000a
   35798:	79646465 	.word	0x79646465
   3579c:	6e6f7473 	.word	0x6e6f7473
   357a0:	656d5f65 	.word	0x656d5f65
   357a4:	72757361 	.word	0x72757361
   357a8:	705f6465 	.word	0x705f6465
   357ac:	7265776f 	.word	0x7265776f
   357b0:	00000000 	.word	0x00000000
   357b4:	61766e69 	.word	0x61766e69
   357b8:	2064696c 	.word	0x2064696c
   357bc:	64646527 	.word	0x64646527
   357c0:	6f747379 	.word	0x6f747379
   357c4:	6d5f656e 	.word	0x6d5f656e
   357c8:	75736165 	.word	0x75736165
   357cc:	5f646572 	.word	0x5f646572
   357d0:	65776f70 	.word	0x65776f70
   357d4:	70202772 	.word	0x70202772
   357d8:	6d617261 	.word	0x6d617261
   357dc:	72657465 	.word	0x72657465
   357e0:	0000000a 	.word	0x0000000a
   357e4:	79646465 	.word	0x79646465
   357e8:	6e6f7473 	.word	0x6e6f7473
   357ec:	72755f65 	.word	0x72755f65
   357f0:	0000006c 	.word	0x0000006c
   357f4:	6f727265 	.word	0x6f727265
   357f8:	65732072 	.word	0x65732072
   357fc:	6e697474 	.word	0x6e697474
   35800:	64612067 	.word	0x64612067
   35804:	74726576 	.word	0x74726576
   35808:	6d657369 	.word	0x6d657369
   3580c:	20746e65 	.word	0x20746e65
   35810:	61746164 	.word	0x61746164
   35814:	6372203b 	.word	0x6372203b
   35818:	0a64253d 	.word	0x0a64253d
   3581c:	00000000 	.word	0x00000000
   35820:	0075746d 	.word	0x0075746d
   35824:	61766e69 	.word	0x61766e69
   35828:	2064696c 	.word	0x2064696c
   3582c:	75746d27 	.word	0x75746d27
   35830:	61702027 	.word	0x61702027
   35834:	656d6172 	.word	0x656d6172
   35838:	0a726574 	.word	0x0a726574
   3583c:	00000000 	.word	0x00000000
   35840:	6f727245 	.word	0x6f727245
   35844:	6e203a72 	.word	0x6e203a72
   35848:	6176206f 	.word	0x6176206f
   3584c:	2064696c 	.word	0x2064696c
   35850:	74746573 	.word	0x74746573
   35854:	73676e69 	.word	0x73676e69
   35858:	65707320 	.word	0x65707320
   3585c:	69666963 	.word	0x69666963
   35860:	000a6465 	.word	0x000a6465
   35864:	636e6163 	.word	0x636e6163
   35868:	00006c65 	.word	0x00006c65
   3586c:	6e616373 	.word	0x6e616373
   35870:	6e616320 	.word	0x6e616320
   35874:	206c6563 	.word	0x206c6563
   35878:	6c696166 	.word	0x6c696166
   3587c:	6425203a 	.word	0x6425203a
   35880:	0000000a 	.word	0x0000000a
   35884:	65747865 	.word	0x65747865
   35888:	6465646e 	.word	0x6465646e
   3588c:	00000000 	.word	0x00000000
   35890:	61766e69 	.word	0x61766e69
   35894:	2064696c 	.word	0x2064696c
   35898:	74786527 	.word	0x74786527
   3589c:	65646e65 	.word	0x65646e65
   358a0:	70202764 	.word	0x70202764
   358a4:	6d617261 	.word	0x6d617261
   358a8:	72657465 	.word	0x72657465
   358ac:	0000000a 	.word	0x0000000a
   358b0:	61727564 	.word	0x61727564
   358b4:	6e6f6974 	.word	0x6e6f6974
   358b8:	00000000 	.word	0x00000000
   358bc:	61766e69 	.word	0x61766e69
   358c0:	2064696c 	.word	0x2064696c
   358c4:	72756427 	.word	0x72756427
   358c8:	6f697461 	.word	0x6f697461
   358cc:	7020276e 	.word	0x7020276e
   358d0:	6d617261 	.word	0x6d617261
   358d4:	72657465 	.word	0x72657465
   358d8:	0000000a 	.word	0x0000000a
   358dc:	696d696c 	.word	0x696d696c
   358e0:	00646574 	.word	0x00646574
   358e4:	61766e69 	.word	0x61766e69
   358e8:	2064696c 	.word	0x2064696c
   358ec:	6d696c27 	.word	0x6d696c27
   358f0:	64657469 	.word	0x64657469
   358f4:	61702027 	.word	0x61702027
   358f8:	656d6172 	.word	0x656d6172
   358fc:	0a726574 	.word	0x0a726574
   35900:	00000000 	.word	0x00000000
   35904:	73736170 	.word	0x73736170
   35908:	00657669 	.word	0x00657669
   3590c:	61766e69 	.word	0x61766e69
   35910:	2064696c 	.word	0x2064696c
   35914:	73617027 	.word	0x73617027
   35918:	65766973 	.word	0x65766973
   3591c:	61702027 	.word	0x61702027
   35920:	656d6172 	.word	0x656d6172
   35924:	0a726574 	.word	0x0a726574
   35928:	00000000 	.word	0x00000000
   3592c:	61766e69 	.word	0x61766e69
   35930:	2064696c 	.word	0x2064696c
   35934:	746e6927 	.word	0x746e6927
   35938:	61767265 	.word	0x61767265
   3593c:	7020276c 	.word	0x7020276c
   35940:	6d617261 	.word	0x6d617261
   35944:	72657465 	.word	0x72657465
   35948:	0000000a 	.word	0x0000000a
   3594c:	646e6977 	.word	0x646e6977
   35950:	0000776f 	.word	0x0000776f
   35954:	61766e69 	.word	0x61766e69
   35958:	2064696c 	.word	0x2064696c
   3595c:	6e697727 	.word	0x6e697727
   35960:	27776f64 	.word	0x27776f64
   35964:	72617020 	.word	0x72617020
   35968:	74656d61 	.word	0x74656d61
   3596c:	000a7265 	.word	0x000a7265
   35970:	746c6966 	.word	0x746c6966
   35974:	00007265 	.word	0x00007265
   35978:	61766e69 	.word	0x61766e69
   3597c:	2064696c 	.word	0x2064696c
   35980:	6c696627 	.word	0x6c696627
   35984:	27726574 	.word	0x27726574
   35988:	72617020 	.word	0x72617020
   3598c:	74656d61 	.word	0x74656d61
   35990:	000a7265 	.word	0x000a7265
   35994:	75646f6e 	.word	0x75646f6e
   35998:	00007370 	.word	0x00007370
   3599c:	61766e69 	.word	0x61766e69
   359a0:	2064696c 	.word	0x2064696c
   359a4:	646f6e27 	.word	0x646f6e27
   359a8:	27737075 	.word	0x27737075
   359ac:	72617020 	.word	0x72617020
   359b0:	74656d61 	.word	0x74656d61
   359b4:	000a7265 	.word	0x000a7265
   359b8:	5f6e776f 	.word	0x5f6e776f
   359bc:	72646461 	.word	0x72646461
   359c0:	7079745f 	.word	0x7079745f
   359c4:	00000065 	.word	0x00000065
   359c8:	61766e69 	.word	0x61766e69
   359cc:	2064696c 	.word	0x2064696c
   359d0:	6e776f27 	.word	0x6e776f27
   359d4:	6464615f 	.word	0x6464615f
   359d8:	79745f72 	.word	0x79745f72
   359dc:	20276570 	.word	0x20276570
   359e0:	61726170 	.word	0x61726170
   359e4:	6574656d 	.word	0x6574656d
   359e8:	00000a72 	.word	0x00000a72
   359ec:	6f727265 	.word	0x6f727265
   359f0:	63732072 	.word	0x63732072
   359f4:	696e6e61 	.word	0x696e6e61
   359f8:	203b676e 	.word	0x203b676e
   359fc:	253d6372 	.word	0x253d6372
   35a00:	00000a64 	.word	0x00000a64
   35a04:	65747865 	.word	0x65747865
   35a08:	6465646e 	.word	0x6465646e
   35a0c:	7275645f 	.word	0x7275645f
   35a10:	6f697461 	.word	0x6f697461
   35a14:	0000006e 	.word	0x0000006e
   35a18:	61766e69 	.word	0x61766e69
   35a1c:	2064696c 	.word	0x2064696c
   35a20:	74786527 	.word	0x74786527
   35a24:	65646e65 	.word	0x65646e65
   35a28:	75645f64 	.word	0x75645f64
   35a2c:	69746172 	.word	0x69746172
   35a30:	20276e6f 	.word	0x20276e6f
   35a34:	61726170 	.word	0x61726170
   35a38:	6574656d 	.word	0x6574656d
   35a3c:	00000a72 	.word	0x00000a72
   35a40:	65747865 	.word	0x65747865
   35a44:	6465646e 	.word	0x6465646e
   35a48:	7265705f 	.word	0x7265705f
   35a4c:	00646f69 	.word	0x00646f69
   35a50:	61766e69 	.word	0x61766e69
   35a54:	2064696c 	.word	0x2064696c
   35a58:	74786527 	.word	0x74786527
   35a5c:	65646e65 	.word	0x65646e65
   35a60:	65705f64 	.word	0x65705f64
   35a64:	646f6972 	.word	0x646f6972
   35a68:	61702027 	.word	0x61702027
   35a6c:	656d6172 	.word	0x656d6172
   35a70:	0a726574 	.word	0x0a726574
   35a74:	00000000 	.word	0x00000000
   35a78:	676e6f6c 	.word	0x676e6f6c
   35a7c:	676e6172 	.word	0x676e6172
   35a80:	6e695f65 	.word	0x6e695f65
   35a84:	76726574 	.word	0x76726574
   35a88:	00006c61 	.word	0x00006c61
   35a8c:	61766e69 	.word	0x61766e69
   35a90:	2064696c 	.word	0x2064696c
   35a94:	6e6f6c27 	.word	0x6e6f6c27
   35a98:	6e617267 	.word	0x6e617267
   35a9c:	695f6567 	.word	0x695f6567
   35aa0:	7265746e 	.word	0x7265746e
   35aa4:	276c6176 	.word	0x276c6176
   35aa8:	72617020 	.word	0x72617020
   35aac:	74656d61 	.word	0x74656d61
   35ab0:	000a7265 	.word	0x000a7265
   35ab4:	676e6f6c 	.word	0x676e6f6c
   35ab8:	676e6172 	.word	0x676e6172
   35abc:	69775f65 	.word	0x69775f65
   35ac0:	776f646e 	.word	0x776f646e
   35ac4:	00000000 	.word	0x00000000
   35ac8:	61766e69 	.word	0x61766e69
   35acc:	2064696c 	.word	0x2064696c
   35ad0:	6e6f6c27 	.word	0x6e6f6c27
   35ad4:	6e617267 	.word	0x6e617267
   35ad8:	775f6567 	.word	0x775f6567
   35adc:	6f646e69 	.word	0x6f646e69
   35ae0:	70202777 	.word	0x70202777
   35ae4:	6d617261 	.word	0x6d617261
   35ae8:	72657465 	.word	0x72657465
   35aec:	0000000a 	.word	0x0000000a
   35af0:	676e6f6c 	.word	0x676e6f6c
   35af4:	676e6172 	.word	0x676e6172
   35af8:	61705f65 	.word	0x61705f65
   35afc:	76697373 	.word	0x76697373
   35b00:	00000065 	.word	0x00000065
   35b04:	61766e69 	.word	0x61766e69
   35b08:	2064696c 	.word	0x2064696c
   35b0c:	6e6f6c27 	.word	0x6e6f6c27
   35b10:	6e617267 	.word	0x6e617267
   35b14:	705f6567 	.word	0x705f6567
   35b18:	69737361 	.word	0x69737361
   35b1c:	20276576 	.word	0x20276576
   35b20:	61726170 	.word	0x61726170
   35b24:	6574656d 	.word	0x6574656d
   35b28:	00000a72 	.word	0x00000a72
   35b2c:	6c627570 	.word	0x6c627570
   35b30:	695f6369 	.word	0x695f6369
   35b34:	64615f64 	.word	0x64615f64
   35b38:	003d7264 	.word	0x003d7264
   35b3c:	6e617220 	.word	0x6e617220
   35b40:	5f6d6f64 	.word	0x5f6d6f64
   35b44:	615f6469 	.word	0x615f6469
   35b48:	3d726464 	.word	0x3d726464
   35b4c:	00000000 	.word	0x00000000
   35b50:	73616572 	.word	0x73616572
   35b54:	00006e6f 	.word	0x00006e6f
   35b58:	61766e69 	.word	0x61766e69
   35b5c:	2064696c 	.word	0x2064696c
   35b60:	61657227 	.word	0x61657227
   35b64:	276e6f73 	.word	0x276e6f73
   35b68:	72617020 	.word	0x72617020
   35b6c:	74656d61 	.word	0x74656d61
   35b70:	000a7265 	.word	0x000a7265
   35b74:	6f727265 	.word	0x6f727265
   35b78:	65742072 	.word	0x65742072
   35b7c:	6e696d72 	.word	0x6e696d72
   35b80:	6e697461 	.word	0x6e697461
   35b84:	6f632067 	.word	0x6f632067
   35b88:	63656e6e 	.word	0x63656e6e
   35b8c:	6e6f6974 	.word	0x6e6f6974
   35b90:	6372203b 	.word	0x6372203b
   35b94:	0a64253d 	.word	0x0a64253d
   35b98:	00000000 	.word	0x00000000
   35b9c:	6e6e6f63 	.word	0x6e6e6f63
   35ba0:	69746365 	.word	0x69746365
   35ba4:	63206e6f 	.word	0x63206e6f
   35ba8:	65636e61 	.word	0x65636e61
   35bac:	6166206c 	.word	0x6166206c
   35bb0:	203a6c69 	.word	0x203a6c69
   35bb4:	000a6425 	.word	0x000a6425
   35bb8:	72656570 	.word	0x72656570
   35bbc:	0000005f 	.word	0x0000005f
   35bc0:	61766e69 	.word	0x61766e69
   35bc4:	2064696c 	.word	0x2064696c
   35bc8:	65657027 	.word	0x65657027
   35bcc:	64615f72 	.word	0x64615f72
   35bd0:	20277264 	.word	0x20277264
   35bd4:	61726170 	.word	0x61726170
   35bd8:	6574656d 	.word	0x6574656d
   35bdc:	00000a72 	.word	0x00000a72
   35be0:	6e616373 	.word	0x6e616373
   35be4:	746e695f 	.word	0x746e695f
   35be8:	61767265 	.word	0x61767265
   35bec:	0000006c 	.word	0x0000006c
   35bf0:	61766e69 	.word	0x61766e69
   35bf4:	2064696c 	.word	0x2064696c
   35bf8:	61637327 	.word	0x61637327
   35bfc:	6e695f6e 	.word	0x6e695f6e
   35c00:	76726574 	.word	0x76726574
   35c04:	20276c61 	.word	0x20276c61
   35c08:	61726170 	.word	0x61726170
   35c0c:	6574656d 	.word	0x6574656d
   35c10:	00000a72 	.word	0x00000a72
   35c14:	6e616373 	.word	0x6e616373
   35c18:	6e69775f 	.word	0x6e69775f
   35c1c:	00776f64 	.word	0x00776f64
   35c20:	61766e69 	.word	0x61766e69
   35c24:	2064696c 	.word	0x2064696c
   35c28:	61637327 	.word	0x61637327
   35c2c:	69775f6e 	.word	0x69775f6e
   35c30:	776f646e 	.word	0x776f646e
   35c34:	61702027 	.word	0x61702027
   35c38:	656d6172 	.word	0x656d6172
   35c3c:	0a726574 	.word	0x0a726574
   35c40:	00000000 	.word	0x00000000
   35c44:	6f727265 	.word	0x6f727265
   35c48:	6f632072 	.word	0x6f632072
   35c4c:	63656e6e 	.word	0x63656e6e
   35c50:	676e6974 	.word	0x676e6974
   35c54:	6372203b 	.word	0x6372203b
   35c58:	0a64253d 	.word	0x0a64253d
   35c5c:	00000000 	.word	0x00000000
   35c60:	65646f63 	.word	0x65646f63
   35c64:	63735f64 	.word	0x63735f64
   35c68:	695f6e61 	.word	0x695f6e61
   35c6c:	7265746e 	.word	0x7265746e
   35c70:	006c6176 	.word	0x006c6176
   35c74:	61766e69 	.word	0x61766e69
   35c78:	2064696c 	.word	0x2064696c
   35c7c:	646f6327 	.word	0x646f6327
   35c80:	735f6465 	.word	0x735f6465
   35c84:	5f6e6163 	.word	0x5f6e6163
   35c88:	65746e69 	.word	0x65746e69
   35c8c:	6c617672 	.word	0x6c617672
   35c90:	61702027 	.word	0x61702027
   35c94:	656d6172 	.word	0x656d6172
   35c98:	0a726574 	.word	0x0a726574
   35c9c:	00000000 	.word	0x00000000
   35ca0:	65646f63 	.word	0x65646f63
   35ca4:	63735f64 	.word	0x63735f64
   35ca8:	775f6e61 	.word	0x775f6e61
   35cac:	6f646e69 	.word	0x6f646e69
   35cb0:	00000077 	.word	0x00000077
   35cb4:	61766e69 	.word	0x61766e69
   35cb8:	2064696c 	.word	0x2064696c
   35cbc:	646f6327 	.word	0x646f6327
   35cc0:	735f6465 	.word	0x735f6465
   35cc4:	5f6e6163 	.word	0x5f6e6163
   35cc8:	646e6977 	.word	0x646e6977
   35ccc:	2027776f 	.word	0x2027776f
   35cd0:	61726170 	.word	0x61726170
   35cd4:	6574656d 	.word	0x6574656d
   35cd8:	00000a72 	.word	0x00000a72
   35cdc:	65646f63 	.word	0x65646f63
   35ce0:	6e695f64 	.word	0x6e695f64
   35ce4:	76726574 	.word	0x76726574
   35ce8:	6d5f6c61 	.word	0x6d5f6c61
   35cec:	00006e69 	.word	0x00006e69
   35cf0:	61766e69 	.word	0x61766e69
   35cf4:	2064696c 	.word	0x2064696c
   35cf8:	646f6327 	.word	0x646f6327
   35cfc:	695f6465 	.word	0x695f6465
   35d00:	7265746e 	.word	0x7265746e
   35d04:	5f6c6176 	.word	0x5f6c6176
   35d08:	276e696d 	.word	0x276e696d
   35d0c:	72617020 	.word	0x72617020
   35d10:	74656d61 	.word	0x74656d61
   35d14:	000a7265 	.word	0x000a7265
   35d18:	65646f63 	.word	0x65646f63
   35d1c:	6e695f64 	.word	0x6e695f64
   35d20:	76726574 	.word	0x76726574
   35d24:	6d5f6c61 	.word	0x6d5f6c61
   35d28:	00007861 	.word	0x00007861
   35d2c:	61766e69 	.word	0x61766e69
   35d30:	2064696c 	.word	0x2064696c
   35d34:	646f6327 	.word	0x646f6327
   35d38:	695f6465 	.word	0x695f6465
   35d3c:	7265746e 	.word	0x7265746e
   35d40:	5f6c6176 	.word	0x5f6c6176
   35d44:	2778616d 	.word	0x2778616d
   35d48:	72617020 	.word	0x72617020
   35d4c:	74656d61 	.word	0x74656d61
   35d50:	000a7265 	.word	0x000a7265
   35d54:	65646f63 	.word	0x65646f63
   35d58:	616c5f64 	.word	0x616c5f64
   35d5c:	636e6574 	.word	0x636e6574
   35d60:	00000079 	.word	0x00000079
   35d64:	61766e69 	.word	0x61766e69
   35d68:	2064696c 	.word	0x2064696c
   35d6c:	646f6327 	.word	0x646f6327
   35d70:	6c5f6465 	.word	0x6c5f6465
   35d74:	6e657461 	.word	0x6e657461
   35d78:	20277963 	.word	0x20277963
   35d7c:	61726170 	.word	0x61726170
   35d80:	6574656d 	.word	0x6574656d
   35d84:	00000a72 	.word	0x00000a72
   35d88:	65646f63 	.word	0x65646f63
   35d8c:	69745f64 	.word	0x69745f64
   35d90:	756f656d 	.word	0x756f656d
   35d94:	00000074 	.word	0x00000074
   35d98:	61766e69 	.word	0x61766e69
   35d9c:	2064696c 	.word	0x2064696c
   35da0:	646f6327 	.word	0x646f6327
   35da4:	745f6465 	.word	0x745f6465
   35da8:	6f656d69 	.word	0x6f656d69
   35dac:	20277475 	.word	0x20277475
   35db0:	61726170 	.word	0x61726170
   35db4:	6574656d 	.word	0x6574656d
   35db8:	00000a72 	.word	0x00000a72
   35dbc:	65646f63 	.word	0x65646f63
   35dc0:	696d5f64 	.word	0x696d5f64
   35dc4:	6f635f6e 	.word	0x6f635f6e
   35dc8:	655f6e6e 	.word	0x655f6e6e
   35dcc:	746e6576 	.word	0x746e6576
   35dd0:	00000000 	.word	0x00000000
   35dd4:	61766e69 	.word	0x61766e69
   35dd8:	2064696c 	.word	0x2064696c
   35ddc:	646f6327 	.word	0x646f6327
   35de0:	6d5f6465 	.word	0x6d5f6465
   35de4:	635f6e69 	.word	0x635f6e69
   35de8:	5f6e6e6f 	.word	0x5f6e6e6f
   35dec:	6e657665 	.word	0x6e657665
   35df0:	70202774 	.word	0x70202774
   35df4:	6d617261 	.word	0x6d617261
   35df8:	72657465 	.word	0x72657465
   35dfc:	0000000a 	.word	0x0000000a
   35e00:	65646f63 	.word	0x65646f63
   35e04:	616d5f64 	.word	0x616d5f64
   35e08:	6f635f78 	.word	0x6f635f78
   35e0c:	655f6e6e 	.word	0x655f6e6e
   35e10:	746e6576 	.word	0x746e6576
   35e14:	00000000 	.word	0x00000000
   35e18:	61766e69 	.word	0x61766e69
   35e1c:	2064696c 	.word	0x2064696c
   35e20:	646f6327 	.word	0x646f6327
   35e24:	6d5f6465 	.word	0x6d5f6465
   35e28:	635f7861 	.word	0x635f7861
   35e2c:	5f6e6e6f 	.word	0x5f6e6e6f
   35e30:	6e657665 	.word	0x6e657665
   35e34:	70202774 	.word	0x70202774
   35e38:	6d617261 	.word	0x6d617261
   35e3c:	72657465 	.word	0x72657465
   35e40:	0000000a 	.word	0x0000000a
   35e44:	695f4d32 	.word	0x695f4d32
   35e48:	7265746e 	.word	0x7265746e
   35e4c:	5f6c6176 	.word	0x5f6c6176
   35e50:	006e696d 	.word	0x006e696d
   35e54:	61766e69 	.word	0x61766e69
   35e58:	2064696c 	.word	0x2064696c
   35e5c:	5f4d3227 	.word	0x5f4d3227
   35e60:	65746e69 	.word	0x65746e69
   35e64:	6c617672 	.word	0x6c617672
   35e68:	6e696d5f 	.word	0x6e696d5f
   35e6c:	61702027 	.word	0x61702027
   35e70:	656d6172 	.word	0x656d6172
   35e74:	0a726574 	.word	0x0a726574
   35e78:	00000000 	.word	0x00000000
   35e7c:	695f4d32 	.word	0x695f4d32
   35e80:	7265746e 	.word	0x7265746e
   35e84:	5f6c6176 	.word	0x5f6c6176
   35e88:	0078616d 	.word	0x0078616d
   35e8c:	61766e69 	.word	0x61766e69
   35e90:	2064696c 	.word	0x2064696c
   35e94:	5f4d3227 	.word	0x5f4d3227
   35e98:	65746e69 	.word	0x65746e69
   35e9c:	6c617672 	.word	0x6c617672
   35ea0:	78616d5f 	.word	0x78616d5f
   35ea4:	61702027 	.word	0x61702027
   35ea8:	656d6172 	.word	0x656d6172
   35eac:	0a726574 	.word	0x0a726574
   35eb0:	00000000 	.word	0x00000000
   35eb4:	6c5f4d32 	.word	0x6c5f4d32
   35eb8:	6e657461 	.word	0x6e657461
   35ebc:	00007963 	.word	0x00007963
   35ec0:	61766e69 	.word	0x61766e69
   35ec4:	2064696c 	.word	0x2064696c
   35ec8:	5f4d3227 	.word	0x5f4d3227
   35ecc:	6574616c 	.word	0x6574616c
   35ed0:	2779636e 	.word	0x2779636e
   35ed4:	72617020 	.word	0x72617020
   35ed8:	74656d61 	.word	0x74656d61
   35edc:	000a7265 	.word	0x000a7265
   35ee0:	745f4d32 	.word	0x745f4d32
   35ee4:	6f656d69 	.word	0x6f656d69
   35ee8:	00007475 	.word	0x00007475
   35eec:	61766e69 	.word	0x61766e69
   35ef0:	2064696c 	.word	0x2064696c
   35ef4:	5f4d3227 	.word	0x5f4d3227
   35ef8:	656d6974 	.word	0x656d6974
   35efc:	2774756f 	.word	0x2774756f
   35f00:	72617020 	.word	0x72617020
   35f04:	74656d61 	.word	0x74656d61
   35f08:	000a7265 	.word	0x000a7265
   35f0c:	6d5f4d32 	.word	0x6d5f4d32
   35f10:	635f6e69 	.word	0x635f6e69
   35f14:	5f6e6e6f 	.word	0x5f6e6e6f
   35f18:	6e657665 	.word	0x6e657665
   35f1c:	00000074 	.word	0x00000074
   35f20:	61766e69 	.word	0x61766e69
   35f24:	2064696c 	.word	0x2064696c
   35f28:	5f4d3227 	.word	0x5f4d3227
   35f2c:	5f6e696d 	.word	0x5f6e696d
   35f30:	6e6e6f63 	.word	0x6e6e6f63
   35f34:	6576655f 	.word	0x6576655f
   35f38:	2027746e 	.word	0x2027746e
   35f3c:	61726170 	.word	0x61726170
   35f40:	6574656d 	.word	0x6574656d
   35f44:	00000a72 	.word	0x00000a72
   35f48:	6d5f4d32 	.word	0x6d5f4d32
   35f4c:	635f7861 	.word	0x635f7861
   35f50:	5f6e6e6f 	.word	0x5f6e6e6f
   35f54:	6e657665 	.word	0x6e657665
   35f58:	00000074 	.word	0x00000074
   35f5c:	61766e69 	.word	0x61766e69
   35f60:	2064696c 	.word	0x2064696c
   35f64:	5f4d3227 	.word	0x5f4d3227
   35f68:	5f78616d 	.word	0x5f78616d
   35f6c:	6e6e6f63 	.word	0x6e6e6f63
   35f70:	6576655f 	.word	0x6576655f
   35f74:	2027746e 	.word	0x2027746e
   35f78:	61726170 	.word	0x61726170
   35f7c:	6574656d 	.word	0x6574656d
   35f80:	00000a72 	.word	0x00000a72
   35f84:	65766461 	.word	0x65766461
   35f88:	73697472 	.word	0x73697472
   35f8c:	74732065 	.word	0x74732065
   35f90:	6620706f 	.word	0x6620706f
   35f94:	3a6c6961 	.word	0x3a6c6961
   35f98:	0a642520 	.word	0x0a642520
   35f9c:	00000000 	.word	0x00000000
   35fa0:	63736964 	.word	0x63736964
   35fa4:	0000766f 	.word	0x0000766f
   35fa8:	61766e69 	.word	0x61766e69
   35fac:	2064696c 	.word	0x2064696c
   35fb0:	73696427 	.word	0x73696427
   35fb4:	27766f63 	.word	0x27766f63
   35fb8:	72617020 	.word	0x72617020
   35fbc:	74656d61 	.word	0x74656d61
   35fc0:	000a7265 	.word	0x000a7265
   35fc4:	74736572 	.word	0x74736572
   35fc8:	00747261 	.word	0x00747261
   35fcc:	61766e69 	.word	0x61766e69
   35fd0:	2064696c 	.word	0x2064696c
   35fd4:	73657227 	.word	0x73657227
   35fd8:	74726174 	.word	0x74726174
   35fdc:	61702027 	.word	0x61702027
   35fe0:	656d6172 	.word	0x656d6172
   35fe4:	0a726574 	.word	0x0a726574
   35fe8:	00000000 	.word	0x00000000
   35fec:	6e616863 	.word	0x6e616863
   35ff0:	5f6c656e 	.word	0x5f6c656e
   35ff4:	0070616d 	.word	0x0070616d
   35ff8:	61766e69 	.word	0x61766e69
   35ffc:	2064696c 	.word	0x2064696c
   36000:	61686327 	.word	0x61686327
   36004:	6c656e6e 	.word	0x6c656e6e
   36008:	70616d5f 	.word	0x70616d5f
   3600c:	61702027 	.word	0x61702027
   36010:	656d6172 	.word	0x656d6172
   36014:	0a726574 	.word	0x0a726574
   36018:	00000000 	.word	0x00000000
   3601c:	68676968 	.word	0x68676968
   36020:	7475645f 	.word	0x7475645f
   36024:	00000079 	.word	0x00000079
   36028:	61766e69 	.word	0x61766e69
   3602c:	2064696c 	.word	0x2064696c
   36030:	67696827 	.word	0x67696827
   36034:	75645f68 	.word	0x75645f68
   36038:	20277974 	.word	0x20277974
   3603c:	61726170 	.word	0x61726170
   36040:	6574656d 	.word	0x6574656d
   36044:	00000a72 	.word	0x00000a72
   36048:	65766461 	.word	0x65766461
   3604c:	73697472 	.word	0x73697472
   36050:	61662065 	.word	0x61662065
   36054:	203a6c69 	.word	0x203a6c69
   36058:	000a6425 	.word	0x000a6425
   3605c:	72617473 	.word	0x72617473
   36060:	00000074 	.word	0x00000074
   36064:	00646e65 	.word	0x00646e65
   36068:	68737462 	.word	0x68737462
   3606c:	006c6c65 	.word	0x006c6c65
   36070:	65766461 	.word	0x65766461
   36074:	73697472 	.word	0x73697472
   36078:	00000065 	.word	0x00000065
   3607c:	6e6e6f63 	.word	0x6e6e6f63
   36080:	00746365 	.word	0x00746365
   36084:	63736964 	.word	0x63736964
   36088:	656e6e6f 	.word	0x656e6e6f
   3608c:	00007463 	.word	0x00007463
   36090:	776f6873 	.word	0x776f6873
   36094:	6464612d 	.word	0x6464612d
   36098:	00000072 	.word	0x00000072
   3609c:	776f6873 	.word	0x776f6873
   360a0:	6e6f632d 	.word	0x6e6f632d
   360a4:	0000006e 	.word	0x0000006e
   360a8:	2d746573 	.word	0x2d746573
   360ac:	6e616373 	.word	0x6e616373
   360b0:	74706f2d 	.word	0x74706f2d
   360b4:	00000073 	.word	0x00000073
   360b8:	6e616373 	.word	0x6e616373
   360bc:	00000000 	.word	0x00000000
   360c0:	2d746573 	.word	0x2d746573
   360c4:	2d766461 	.word	0x2d766461
   360c8:	61746164 	.word	0x61746164
   360cc:	00000000 	.word	0x00000000
   360d0:	2d746573 	.word	0x2d746573
   360d4:	6e616373 	.word	0x6e616373
   360d8:	7073722d 	.word	0x7073722d
   360dc:	00000000 	.word	0x00000000
   360e0:	2d746573 	.word	0x2d746573
   360e4:	76697270 	.word	0x76697270
   360e8:	646f6d2d 	.word	0x646f6d2d
   360ec:	00000065 	.word	0x00000065
   360f0:	74696877 	.word	0x74696877
   360f4:	696c2d65 	.word	0x696c2d65
   360f8:	00007473 	.word	0x00007473
   360fc:	6e6e6f63 	.word	0x6e6e6f63
   36100:	7373722d 	.word	0x7373722d
   36104:	00000069 	.word	0x00000069
   36108:	6e6e6f63 	.word	0x6e6e6f63
   3610c:	6470752d 	.word	0x6470752d
   36110:	2d657461 	.word	0x2d657461
   36114:	61726170 	.word	0x61726170
   36118:	0000736d 	.word	0x0000736d
   3611c:	6e6e6f63 	.word	0x6e6e6f63
   36120:	7461642d 	.word	0x7461642d
   36124:	6e656c61 	.word	0x6e656c61
   36128:	00000000 	.word	0x00000000
   3612c:	74746167 	.word	0x74746167
   36130:	7369642d 	.word	0x7369642d
   36134:	65766f63 	.word	0x65766f63
   36138:	68632d72 	.word	0x68632d72
   3613c:	63617261 	.word	0x63617261
   36140:	69726574 	.word	0x69726574
   36144:	63697473 	.word	0x63697473
   36148:	00000000 	.word	0x00000000
   3614c:	74746167 	.word	0x74746167
   36150:	7369642d 	.word	0x7369642d
   36154:	65766f63 	.word	0x65766f63
   36158:	65642d72 	.word	0x65642d72
   3615c:	69726373 	.word	0x69726373
   36160:	726f7470 	.word	0x726f7470
   36164:	00000000 	.word	0x00000000
   36168:	74746167 	.word	0x74746167
   3616c:	7369642d 	.word	0x7369642d
   36170:	65766f63 	.word	0x65766f63
   36174:	65732d72 	.word	0x65732d72
   36178:	63697672 	.word	0x63697672
   3617c:	00000065 	.word	0x00000065
   36180:	74746167 	.word	0x74746167
   36184:	7369642d 	.word	0x7369642d
   36188:	65766f63 	.word	0x65766f63
   3618c:	75662d72 	.word	0x75662d72
   36190:	00006c6c 	.word	0x00006c6c
   36194:	74746167 	.word	0x74746167
   36198:	6e69662d 	.word	0x6e69662d
   3619c:	6e692d64 	.word	0x6e692d64
   361a0:	64756c63 	.word	0x64756c63
   361a4:	732d6465 	.word	0x732d6465
   361a8:	69767265 	.word	0x69767265
   361ac:	00736563 	.word	0x00736563
   361b0:	74746167 	.word	0x74746167
   361b4:	6378652d 	.word	0x6378652d
   361b8:	676e6168 	.word	0x676e6168
   361bc:	746d2d65 	.word	0x746d2d65
   361c0:	00000075 	.word	0x00000075
   361c4:	74746167 	.word	0x74746167
   361c8:	6165722d 	.word	0x6165722d
   361cc:	00000064 	.word	0x00000064
   361d0:	74746167 	.word	0x74746167
   361d4:	746f6e2d 	.word	0x746f6e2d
   361d8:	00796669 	.word	0x00796669
   361dc:	74746167 	.word	0x74746167
   361e0:	7265732d 	.word	0x7265732d
   361e4:	65636976 	.word	0x65636976
   361e8:	6168632d 	.word	0x6168632d
   361ec:	6465676e 	.word	0x6465676e
   361f0:	00000000 	.word	0x00000000
   361f4:	74746167 	.word	0x74746167
   361f8:	7265732d 	.word	0x7265732d
   361fc:	65636976 	.word	0x65636976
   36200:	7369762d 	.word	0x7369762d
   36204:	6c696269 	.word	0x6c696269
   36208:	00797469 	.word	0x00797469
   3620c:	74746167 	.word	0x74746167
   36210:	6f68732d 	.word	0x6f68732d
   36214:	00000077 	.word	0x00000077
   36218:	74746167 	.word	0x74746167
   3621c:	6f68732d 	.word	0x6f68732d
   36220:	6f6c2d77 	.word	0x6f6c2d77
   36224:	006c6163 	.word	0x006c6163
   36228:	74746167 	.word	0x74746167
   3622c:	6972772d 	.word	0x6972772d
   36230:	00006574 	.word	0x00006574
   36234:	7379656b 	.word	0x7379656b
   36238:	65726f74 	.word	0x65726f74
   3623c:	6464612d 	.word	0x6464612d
   36240:	00000000 	.word	0x00000000
   36244:	7379656b 	.word	0x7379656b
   36248:	65726f74 	.word	0x65726f74
   3624c:	6c65642d 	.word	0x6c65642d
   36250:	00000000 	.word	0x00000000
   36254:	7379656b 	.word	0x7379656b
   36258:	65726f74 	.word	0x65726f74
   3625c:	6f68732d 	.word	0x6f68732d
   36260:	00000077 	.word	0x00000077
   36264:	74736574 	.word	0x74736574
   36268:	0078742d 	.word	0x0078742d
   3626c:	2d796870 	.word	0x2d796870
   36270:	00746573 	.word	0x00746573
   36274:	2d796870 	.word	0x2d796870
   36278:	2d746573 	.word	0x2d746573
   3627c:	61666564 	.word	0x61666564
   36280:	00746c75 	.word	0x00746c75
   36284:	2d796870 	.word	0x2d796870
   36288:	64616572 	.word	0x64616572
   3628c:	00000000 	.word	0x00000000
   36290:	74736f68 	.word	0x74736f68
   36294:	616e652d 	.word	0x616e652d
   36298:	00656c62 	.word	0x00656c62
   3629c:	74736f68 	.word	0x74736f68
   362a0:	7369642d 	.word	0x7369642d
   362a4:	656c6261 	.word	0x656c6261
   362a8:	00000000 	.word	0x00000000
   362ac:	66726570 	.word	0x66726570
   362b0:	206d726f 	.word	0x206d726f
   362b4:	74746167 	.word	0x74746167
   362b8:	69727720 	.word	0x69727720
   362bc:	70206574 	.word	0x70206574
   362c0:	65636f72 	.word	0x65636f72
   362c4:	65727564 	.word	0x65727564
   362c8:	00000000 	.word	0x00000000
   362cc:	6e6e6f63 	.word	0x6e6e6f63
   362d0:	69746365 	.word	0x69746365
   362d4:	68206e6f 	.word	0x68206e6f
   362d8:	6c646e61 	.word	0x6c646e61
   362dc:	75202c65 	.word	0x75202c65
   362e0:	65676173 	.word	0x65676173
   362e4:	3c3d203a 	.word	0x3c3d203a
   362e8:	544e4955 	.word	0x544e4955
   362ec:	003e3631 	.word	0x003e3631
   362f0:	725f6f6e 	.word	0x725f6f6e
   362f4:	00007073 	.word	0x00007073
   362f8:	74697277 	.word	0x74697277
   362fc:	69772065 	.word	0x69772065
   36300:	756f6874 	.word	0x756f6874
   36304:	65722074 	.word	0x65722074
   36308:	6e6f7073 	.word	0x6e6f7073
   3630c:	202c6573 	.word	0x202c6573
   36310:	67617375 	.word	0x67617375
   36314:	3d203a65 	.word	0x3d203a65
   36318:	312d305b 	.word	0x312d305b
   3631c:	64202c5d 	.word	0x64202c5d
   36320:	75616665 	.word	0x75616665
   36324:	303d746c 	.word	0x303d746c
   36328:	00000000 	.word	0x00000000
   3632c:	676e6f6c 	.word	0x676e6f6c
   36330:	00000000 	.word	0x00000000
   36334:	77207369 	.word	0x77207369
   36338:	65746972 	.word	0x65746972
   3633c:	6e6f6c20 	.word	0x6e6f6c20
   36340:	75202c67 	.word	0x75202c67
   36344:	65676173 	.word	0x65676173
   36348:	5b3d203a 	.word	0x5b3d203a
   3634c:	5d312d30 	.word	0x5d312d30
   36350:	6564202c 	.word	0x6564202c
   36354:	6c756166 	.word	0x6c756166
   36358:	00303d74 	.word	0x00303d74
   3635c:	72747461 	.word	0x72747461
   36360:	00000000 	.word	0x00000000
   36364:	72747461 	.word	0x72747461
   36368:	74756269 	.word	0x74756269
   3636c:	61682065 	.word	0x61682065
   36370:	656c646e 	.word	0x656c646e
   36374:	7375202c 	.word	0x7375202c
   36378:	3a656761 	.word	0x3a656761
   3637c:	553c3d20 	.word	0x553c3d20
   36380:	31544e49 	.word	0x31544e49
   36384:	00003e36 	.word	0x00003e36
   36388:	7366666f 	.word	0x7366666f
   3638c:	00007465 	.word	0x00007465
   36390:	756c6176 	.word	0x756c6176
   36394:	00000065 	.word	0x00000065
   36398:	67617375 	.word	0x67617375
   3639c:	3d203a65 	.word	0x3d203a65
   363a0:	74636f3c 	.word	0x74636f3c
   363a4:	3e737465 	.word	0x3e737465
   363a8:	00000000 	.word	0x00000000
   363ac:	776f6873 	.word	0x776f6873
   363b0:	6e6f6320 	.word	0x6e6f6320
   363b4:	7463656e 	.word	0x7463656e
   363b8:	736e6f69 	.word	0x736e6f69
   363bc:	666e6920 	.word	0x666e6920
   363c0:	616d726f 	.word	0x616d726f
   363c4:	6e6f6974 	.word	0x6e6f6974
   363c8:	00000000 	.word	0x00000000
   363cc:	776f6873 	.word	0x776f6873
   363d0:	76656420 	.word	0x76656420
   363d4:	20656369 	.word	0x20656369
   363d8:	72646461 	.word	0x72646461
   363dc:	00737365 	.word	0x00737365
   363e0:	776f6873 	.word	0x776f6873
   363e4:	636f6c20 	.word	0x636f6c20
   363e8:	67206c61 	.word	0x67206c61
   363ec:	20747461 	.word	0x20747461
   363f0:	61746164 	.word	0x61746164
   363f4:	65736162 	.word	0x65736162
   363f8:	00000000 	.word	0x00000000
   363fc:	776f6873 	.word	0x776f6873
   36400:	73696420 	.word	0x73696420
   36404:	65766f63 	.word	0x65766f63
   36408:	20646572 	.word	0x20646572
   3640c:	74746167 	.word	0x74746167
   36410:	74616420 	.word	0x74616420
   36414:	73616261 	.word	0x73616261
   36418:	00000065 	.word	0x00000065
   3641c:	6e616863 	.word	0x6e616863
   36420:	73206567 	.word	0x73206567
   36424:	69767265 	.word	0x69767265
   36428:	76206563 	.word	0x76206563
   3642c:	62697369 	.word	0x62697369
   36430:	74696c69 	.word	0x74696c69
   36434:	00000079 	.word	0x00000079
   36438:	69736976 	.word	0x69736976
   3643c:	696c6962 	.word	0x696c6962
   36440:	00007974 	.word	0x00007974
   36444:	67617375 	.word	0x67617375
   36448:	3d203a65 	.word	0x3d203a65
   3644c:	312d303c 	.word	0x312d303c
   36450:	0000003e 	.word	0x0000003e
   36454:	646e6573 	.word	0x646e6573
   36458:	72657320 	.word	0x72657320
   3645c:	65636976 	.word	0x65636976
   36460:	61686320 	.word	0x61686320
   36464:	6465676e 	.word	0x6465676e
   36468:	646e6920 	.word	0x646e6920
   3646c:	74616369 	.word	0x74616369
   36470:	006e6f69 	.word	0x006e6f69
   36474:	72617473 	.word	0x72617473
   36478:	61682074 	.word	0x61682074
   3647c:	656c646e 	.word	0x656c646e
   36480:	7375202c 	.word	0x7375202c
   36484:	3a656761 	.word	0x3a656761
   36488:	553c3d20 	.word	0x553c3d20
   3648c:	31544e49 	.word	0x31544e49
   36490:	00003e36 	.word	0x00003e36
   36494:	20646e65 	.word	0x20646e65
   36498:	646e6168 	.word	0x646e6168
   3649c:	202c656c 	.word	0x202c656c
   364a0:	67617375 	.word	0x67617375
   364a4:	3d203a65 	.word	0x3d203a65
   364a8:	4e49553c 	.word	0x4e49553c
   364ac:	3e363154 	.word	0x3e363154
   364b0:	00000000 	.word	0x00000000
   364b4:	66726570 	.word	0x66726570
   364b8:	206d726f 	.word	0x206d726f
   364bc:	74746167 	.word	0x74746167
   364c0:	61657220 	.word	0x61657220
   364c4:	72702064 	.word	0x72702064
   364c8:	6465636f 	.word	0x6465636f
   364cc:	00657275 	.word	0x00657275
   364d0:	72207369 	.word	0x72207369
   364d4:	20646165 	.word	0x20646165
   364d8:	676e6f6c 	.word	0x676e6f6c
   364dc:	7375202c 	.word	0x7375202c
   364e0:	3a656761 	.word	0x3a656761
   364e4:	305b3d20 	.word	0x305b3d20
   364e8:	2c5d312d 	.word	0x2c5d312d
   364ec:	66656420 	.word	0x66656420
   364f0:	746c7561 	.word	0x746c7561
   364f4:	0000303d 	.word	0x0000303d
   364f8:	7366666f 	.word	0x7366666f
   364fc:	76207465 	.word	0x76207465
   36500:	65756c61 	.word	0x65756c61
   36504:	7375202c 	.word	0x7375202c
   36508:	3a656761 	.word	0x3a656761
   3650c:	553c3d20 	.word	0x553c3d20
   36510:	31544e49 	.word	0x31544e49
   36514:	00003e36 	.word	0x00003e36
   36518:	64697575 	.word	0x64697575
   3651c:	00000000 	.word	0x00000000
   36520:	64616572 	.word	0x64616572
   36524:	20796220 	.word	0x20796220
   36528:	64697575 	.word	0x64697575
   3652c:	7375202c 	.word	0x7375202c
   36530:	3a656761 	.word	0x3a656761
   36534:	555b3d20 	.word	0x555b3d20
   36538:	5d444955 	.word	0x5d444955
   3653c:	00000000 	.word	0x00000000
   36540:	69746f6e 	.word	0x69746f6e
   36544:	61207966 	.word	0x61207966
   36548:	74756f62 	.word	0x74756f62
   3654c:	74746120 	.word	0x74746120
   36550:	75626972 	.word	0x75626972
   36554:	76206574 	.word	0x76206574
   36558:	65756c61 	.word	0x65756c61
   3655c:	61686320 	.word	0x61686320
   36560:	6465676e 	.word	0x6465676e
   36564:	00000000 	.word	0x00000000
   36568:	66726570 	.word	0x66726570
   3656c:	206d726f 	.word	0x206d726f
   36570:	646e6966 	.word	0x646e6966
   36574:	636e6920 	.word	0x636e6920
   36578:	6564756c 	.word	0x6564756c
   3657c:	65732064 	.word	0x65732064
   36580:	63697672 	.word	0x63697672
   36584:	70207365 	.word	0x70207365
   36588:	65636f72 	.word	0x65636f72
   3658c:	65727564 	.word	0x65727564
   36590:	00000000 	.word	0x00000000
   36594:	66726570 	.word	0x66726570
   36598:	206d726f 	.word	0x206d726f
   3659c:	2075746d 	.word	0x2075746d
   365a0:	68637865 	.word	0x68637865
   365a4:	65676e61 	.word	0x65676e61
   365a8:	6f727020 	.word	0x6f727020
   365ac:	75646563 	.word	0x75646563
   365b0:	00006572 	.word	0x00006572
   365b4:	66726570 	.word	0x66726570
   365b8:	206d726f 	.word	0x206d726f
   365bc:	6c6c7566 	.word	0x6c6c7566
   365c0:	73696420 	.word	0x73696420
   365c4:	65766f63 	.word	0x65766f63
   365c8:	70207972 	.word	0x70207972
   365cc:	65636f72 	.word	0x65636f72
   365d0:	65727564 	.word	0x65727564
   365d4:	00000000 	.word	0x00000000
   365d8:	66726570 	.word	0x66726570
   365dc:	206d726f 	.word	0x206d726f
   365e0:	76726573 	.word	0x76726573
   365e4:	20656369 	.word	0x20656369
   365e8:	63736964 	.word	0x63736964
   365ec:	7265766f 	.word	0x7265766f
   365f0:	72702079 	.word	0x72702079
   365f4:	6465636f 	.word	0x6465636f
   365f8:	00657275 	.word	0x00657275
   365fc:	63736964 	.word	0x63736964
   36600:	7265766f 	.word	0x7265766f
   36604:	20796220 	.word	0x20796220
   36608:	64697575 	.word	0x64697575
   3660c:	7375202c 	.word	0x7375202c
   36610:	3a656761 	.word	0x3a656761
   36614:	555b3d20 	.word	0x555b3d20
   36618:	5d444955 	.word	0x5d444955
   3661c:	00000000 	.word	0x00000000
   36620:	66726570 	.word	0x66726570
   36624:	206d726f 	.word	0x206d726f
   36628:	63736564 	.word	0x63736564
   3662c:	74706972 	.word	0x74706972
   36630:	6420726f 	.word	0x6420726f
   36634:	6f637369 	.word	0x6f637369
   36638:	79726576 	.word	0x79726576
   3663c:	6f727020 	.word	0x6f727020
   36640:	75646563 	.word	0x75646563
   36644:	00006572 	.word	0x00006572
   36648:	66726570 	.word	0x66726570
   3664c:	206d726f 	.word	0x206d726f
   36650:	72616863 	.word	0x72616863
   36654:	65746361 	.word	0x65746361
   36658:	74736972 	.word	0x74736972
   3665c:	64206369 	.word	0x64206369
   36660:	6f637369 	.word	0x6f637369
   36664:	79726576 	.word	0x79726576
   36668:	6f727020 	.word	0x6f727020
   3666c:	75646563 	.word	0x75646563
   36670:	00006572 	.word	0x00006572
   36674:	706f7473 	.word	0x706f7473
   36678:	65687420 	.word	0x65687420
   3667c:	6d694e20 	.word	0x6d694e20
   36680:	20454c42 	.word	0x20454c42
   36684:	74736f68 	.word	0x74736f68
   36688:	00000000 	.word	0x00000000
   3668c:	72617473 	.word	0x72617473
   36690:	68742074 	.word	0x68742074
   36694:	694e2065 	.word	0x694e2065
   36698:	454c426d 	.word	0x454c426d
   3669c:	736f6820 	.word	0x736f6820
   366a0:	00000074 	.word	0x00000074
   366a4:	64616572 	.word	0x64616572
   366a8:	59485020 	.word	0x59485020
   366ac:	00000073 	.word	0x00000073
   366b0:	20746573 	.word	0x20746573
   366b4:	66657270 	.word	0x66657270
   366b8:	65727265 	.word	0x65727265
   366bc:	65642064 	.word	0x65642064
   366c0:	6c756166 	.word	0x6c756166
   366c4:	48502074 	.word	0x48502074
   366c8:	00007359 	.word	0x00007359
   366cc:	67617375 	.word	0x67617375
   366d0:	3d203a65 	.word	0x3d203a65
   366d4:	4e49553c 	.word	0x4e49553c
   366d8:	003e3854 	.word	0x003e3854
   366dc:	20746573 	.word	0x20746573
   366e0:	66657270 	.word	0x66657270
   366e4:	65727265 	.word	0x65727265
   366e8:	48502064 	.word	0x48502064
   366ec:	00007359 	.word	0x00007359
   366f0:	74736574 	.word	0x74736574
   366f4:	63617020 	.word	0x63617020
   366f8:	2074656b 	.word	0x2074656b
   366fc:	6e617274 	.word	0x6e617274
   36700:	73696d73 	.word	0x73696d73
   36704:	6e6f6973 	.word	0x6e6f6973
   36708:	00000000 	.word	0x00000000
   3670c:	646e6168 	.word	0x646e6168
   36710:	7420656c 	.word	0x7420656c
   36714:	7874206f 	.word	0x7874206f
   36718:	2c6f7420 	.word	0x2c6f7420
   3671c:	61737520 	.word	0x61737520
   36720:	203a6567 	.word	0x203a6567
   36724:	49553c3d 	.word	0x49553c3d
   36728:	3631544e 	.word	0x3631544e
   3672c:	0000003e 	.word	0x0000003e
   36730:	657a6973 	.word	0x657a6973
   36734:	20666f20 	.word	0x20666f20
   36738:	6b636170 	.word	0x6b636170
   3673c:	202c7465 	.word	0x202c7465
   36740:	67617375 	.word	0x67617375
   36744:	3d203a65 	.word	0x3d203a65
   36748:	4e49553c 	.word	0x4e49553c
   3674c:	3e363154 	.word	0x3e363154
   36750:	00000000 	.word	0x00000000
   36754:	65746172 	.word	0x65746172
   36758:	20666f20 	.word	0x20666f20
   3675c:	202c7874 	.word	0x202c7874
   36760:	67617375 	.word	0x67617375
   36764:	3d203a65 	.word	0x3d203a65
   36768:	4e49553c 	.word	0x4e49553c
   3676c:	3e363154 	.word	0x3e363154
   36770:	6564202c 	.word	0x6564202c
   36774:	6c756166 	.word	0x6c756166
   36778:	00313d74 	.word	0x00313d74
   3677c:	626d756e 	.word	0x626d756e
   36780:	6f207265 	.word	0x6f207265
   36784:	61702066 	.word	0x61702066
   36788:	74656b63 	.word	0x74656b63
   3678c:	75202c73 	.word	0x75202c73
   36790:	65676173 	.word	0x65676173
   36794:	3c3d203a 	.word	0x3c3d203a
   36798:	544e4955 	.word	0x544e4955
   3679c:	2c3e3631 	.word	0x2c3e3631
   367a0:	66656420 	.word	0x66656420
   367a4:	746c7561 	.word	0x746c7561
   367a8:	0000313d 	.word	0x0000313d
   367ac:	706f7473 	.word	0x706f7473
   367b0:	6e657320 	.word	0x6e657320
   367b4:	676e6964 	.word	0x676e6964
   367b8:	7375202c 	.word	0x7375202c
   367bc:	3a656761 	.word	0x3a656761
   367c0:	74203120 	.word	0x74203120
   367c4:	7473206f 	.word	0x7473206f
   367c8:	202c706f 	.word	0x202c706f
   367cc:	61666564 	.word	0x61666564
   367d0:	20746c75 	.word	0x20746c75
   367d4:	00000030 	.word	0x00000030
   367d8:	776f6873 	.word	0x776f6873
   367dc:	74616420 	.word	0x74616420
   367e0:	6e692061 	.word	0x6e692061
   367e4:	79656b20 	.word	0x79656b20
   367e8:	726f7473 	.word	0x726f7473
   367ec:	00000065 	.word	0x00000065
   367f0:	72746e65 	.word	0x72746e65
   367f4:	79742079 	.word	0x79742079
   367f8:	202c6570 	.word	0x202c6570
   367fc:	67617375 	.word	0x67617375
   36800:	3d203a65 	.word	0x3d203a65
   36804:	65736d3c 	.word	0x65736d3c
   36808:	73737c63 	.word	0x73737c63
   3680c:	637c6365 	.word	0x637c6365
   36810:	3e646363 	.word	0x3e646363
   36814:	00000000 	.word	0x00000000
   36818:	6f6d6572 	.word	0x6f6d6572
   3681c:	64206576 	.word	0x64206576
   36820:	20617461 	.word	0x20617461
   36824:	6d6f7266 	.word	0x6d6f7266
   36828:	79656b20 	.word	0x79656b20
   3682c:	726f7473 	.word	0x726f7473
   36830:	00000065 	.word	0x00000065
   36834:	67617375 	.word	0x67617375
   36838:	3d203a65 	.word	0x3d203a65
   3683c:	6275703c 	.word	0x6275703c
   36840:	7c63696c 	.word	0x7c63696c
   36844:	646e6172 	.word	0x646e6172
   36848:	003e6d6f 	.word	0x003e6d6f
   3684c:	67617375 	.word	0x67617375
   36850:	3d203a65 	.word	0x3d203a65
   36854:	3a58583c 	.word	0x3a58583c
   36858:	583a5858 	.word	0x583a5858
   3685c:	58583a58 	.word	0x58583a58
   36860:	3a58583a 	.word	0x3a58583a
   36864:	003e5858 	.word	0x003e5858
   36868:	67617375 	.word	0x67617375
   3686c:	3d203a65 	.word	0x3d203a65
   36870:	4e49553c 	.word	0x4e49553c
   36874:	3e343654 	.word	0x3e343654
   36878:	00000000 	.word	0x00000000
   3687c:	20646461 	.word	0x20646461
   36880:	61746164 	.word	0x61746164
   36884:	206f7420 	.word	0x206f7420
   36888:	7379656b 	.word	0x7379656b
   3688c:	65726f74 	.word	0x65726f74
   36890:	00000000 	.word	0x00000000
   36894:	67617375 	.word	0x67617375
   36898:	3d203a65 	.word	0x3d203a65
   3689c:	3a58583c 	.word	0x3a58583c
   368a0:	2e3a5858 	.word	0x2e3a5858
   368a4:	2c3e2e2e 	.word	0x2c3e2e2e
   368a8:	6e656c20 	.word	0x6e656c20
   368ac:	2036313d 	.word	0x2036313d
   368b0:	6574636f 	.word	0x6574636f
   368b4:	00007374 	.word	0x00007374
   368b8:	6365736d 	.word	0x6365736d
   368bc:	00000000 	.word	0x00000000
   368c0:	63657373 	.word	0x63657373
   368c4:	00000000 	.word	0x00000000
   368c8:	64636363 	.word	0x64636363
   368cc:	00000000 	.word	0x00000000
   368d0:	20746573 	.word	0x20746573
   368d4:	61746164 	.word	0x61746164
   368d8:	6e656c20 	.word	0x6e656c20
   368dc:	20687467 	.word	0x20687467
   368e0:	61726170 	.word	0x61726170
   368e4:	6574656d 	.word	0x6574656d
   368e8:	66207372 	.word	0x66207372
   368ec:	6320726f 	.word	0x6320726f
   368f0:	656e6e6f 	.word	0x656e6e6f
   368f4:	6f697463 	.word	0x6f697463
   368f8:	0000006e 	.word	0x0000006e
   368fc:	6e6e6f43 	.word	0x6e6e6f43
   36900:	69746365 	.word	0x69746365
   36904:	68206e6f 	.word	0x68206e6f
   36908:	6c646e61 	.word	0x6c646e61
   3690c:	75202c65 	.word	0x75202c65
   36910:	65676173 	.word	0x65676173
   36914:	3c3d203a 	.word	0x3c3d203a
   36918:	544e4955 	.word	0x544e4955
   3691c:	003e3631 	.word	0x003e3631
   36920:	2078614d 	.word	0x2078614d
   36924:	6c796170 	.word	0x6c796170
   36928:	2064616f 	.word	0x2064616f
   3692c:	657a6973 	.word	0x657a6973
   36930:	206f7420 	.word	0x206f7420
   36934:	6c636e69 	.word	0x6c636e69
   36938:	20656475 	.word	0x20656475
   3693c:	4c206e69 	.word	0x4c206e69
   36940:	6144204c 	.word	0x6144204c
   36944:	50206174 	.word	0x50206174
   36948:	202c5544 	.word	0x202c5544
   3694c:	676e6172 	.word	0x676e6172
   36950:	323c3d65 	.word	0x323c3d65
   36954:	35322d37 	.word	0x35322d37
   36958:	202c3e31 	.word	0x202c3e31
   3695c:	67617375 	.word	0x67617375
   36960:	3d203a65 	.word	0x3d203a65
   36964:	4e49553c 	.word	0x4e49553c
   36968:	3e363154 	.word	0x3e363154
   3696c:	00000000 	.word	0x00000000
   36970:	2078614d 	.word	0x2078614d
   36974:	626d756e 	.word	0x626d756e
   36978:	6f207265 	.word	0x6f207265
   3697c:	696d2066 	.word	0x696d2066
   36980:	736f7263 	.word	0x736f7263
   36984:	6e6f6365 	.word	0x6e6f6365
   36988:	74207364 	.word	0x74207364
   3698c:	63206568 	.word	0x63206568
   36990:	72746e6f 	.word	0x72746e6f
   36994:	656c6c6f 	.word	0x656c6c6f
   36998:	68732072 	.word	0x68732072
   3699c:	646c756f 	.word	0x646c756f
   369a0:	65737520 	.word	0x65737520
   369a4:	206f7420 	.word	0x206f7420
   369a8:	73207874 	.word	0x73207874
   369ac:	6c676e69 	.word	0x6c676e69
   369b0:	4c4c2065 	.word	0x4c4c2065
   369b4:	63617020 	.word	0x63617020
   369b8:	2c74656b 	.word	0x2c74656b
   369bc:	6e617220 	.word	0x6e617220
   369c0:	3c3d6567 	.word	0x3c3d6567
   369c4:	2d383233 	.word	0x2d383233
   369c8:	34303731 	.word	0x34303731
   369cc:	202c3e30 	.word	0x202c3e30
   369d0:	67617375 	.word	0x67617375
   369d4:	3d203a65 	.word	0x3d203a65
   369d8:	4e49553c 	.word	0x4e49553c
   369dc:	3e363154 	.word	0x3e363154
   369e0:	00000000 	.word	0x00000000
   369e4:	61647075 	.word	0x61647075
   369e8:	63206574 	.word	0x63206574
   369ec:	656e6e6f 	.word	0x656e6e6f
   369f0:	6f697463 	.word	0x6f697463
   369f4:	6170206e 	.word	0x6170206e
   369f8:	656d6172 	.word	0x656d6172
   369fc:	73726574 	.word	0x73726574
   36a00:	00000000 	.word	0x00000000
   36a04:	6e6e6f63 	.word	0x6e6e6f63
   36a08:	6470755f 	.word	0x6470755f
   36a0c:	5f657461 	.word	0x5f657461
   36a10:	61726170 	.word	0x61726170
   36a14:	7520736d 	.word	0x7520736d
   36a18:	65676173 	.word	0x65676173
   36a1c:	00000000 	.word	0x00000000
   36a20:	6e6e6f63 	.word	0x6e6e6f63
   36a24:	6470755f 	.word	0x6470755f
   36a28:	5f657461 	.word	0x5f657461
   36a2c:	61726170 	.word	0x61726170
   36a30:	6f69736d 	.word	0x6f69736d
   36a34:	6168206e 	.word	0x6168206e
   36a38:	656c646e 	.word	0x656c646e
   36a3c:	7375202c 	.word	0x7375202c
   36a40:	3a656761 	.word	0x3a656761
   36a44:	553c3d20 	.word	0x553c3d20
   36a48:	31544e49 	.word	0x31544e49
   36a4c:	00003e36 	.word	0x00003e36
   36a50:	67617375 	.word	0x67617375
   36a54:	3d203a65 	.word	0x3d203a65
   36a58:	552d305b 	.word	0x552d305b
   36a5c:	31544e49 	.word	0x31544e49
   36a60:	414d5f36 	.word	0x414d5f36
   36a64:	202c5d58 	.word	0x202c5d58
   36a68:	61666564 	.word	0x61666564
   36a6c:	3a746c75 	.word	0x3a746c75
   36a70:	00303320 	.word	0x00303320
   36a74:	67617375 	.word	0x67617375
   36a78:	3d203a65 	.word	0x3d203a65
   36a7c:	552d305b 	.word	0x552d305b
   36a80:	31544e49 	.word	0x31544e49
   36a84:	414d5f36 	.word	0x414d5f36
   36a88:	202c5d58 	.word	0x202c5d58
   36a8c:	61666564 	.word	0x61666564
   36a90:	3a746c75 	.word	0x3a746c75
   36a94:	00303520 	.word	0x00303520
   36a98:	67617375 	.word	0x67617375
   36a9c:	3d203a65 	.word	0x3d203a65
   36aa0:	4e49555b 	.word	0x4e49555b
   36aa4:	5d363154 	.word	0x5d363154
   36aa8:	6564202c 	.word	0x6564202c
   36aac:	6c756166 	.word	0x6c756166
   36ab0:	30203a74 	.word	0x30203a74
   36ab4:	00000000 	.word	0x00000000
   36ab8:	67617375 	.word	0x67617375
   36abc:	3d203a65 	.word	0x3d203a65
   36ac0:	4e49555b 	.word	0x4e49555b
   36ac4:	5d363154 	.word	0x5d363154
   36ac8:	6564202c 	.word	0x6564202c
   36acc:	6c756166 	.word	0x6c756166
   36ad0:	30203a74 	.word	0x30203a74
   36ad4:	30313078 	.word	0x30313078
   36ad8:	00000030 	.word	0x00000030
   36adc:	67617375 	.word	0x67617375
   36ae0:	3d203a65 	.word	0x3d203a65
   36ae4:	4e49555b 	.word	0x4e49555b
   36ae8:	5d363154 	.word	0x5d363154
   36aec:	6564202c 	.word	0x6564202c
   36af0:	6c756166 	.word	0x6c756166
   36af4:	30203a74 	.word	0x30203a74
   36af8:	31303078 	.word	0x31303078
   36afc:	00000030 	.word	0x00000030
   36b00:	67617375 	.word	0x67617375
   36b04:	3d203a65 	.word	0x3d203a65
   36b08:	4e49555b 	.word	0x4e49555b
   36b0c:	5d363154 	.word	0x5d363154
   36b10:	6564202c 	.word	0x6564202c
   36b14:	6c756166 	.word	0x6c756166
   36b18:	30203a74 	.word	0x30203a74
   36b1c:	30333078 	.word	0x30333078
   36b20:	00000030 	.word	0x00000030
   36b24:	63656863 	.word	0x63656863
   36b28:	6f63206b 	.word	0x6f63206b
   36b2c:	63656e6e 	.word	0x63656e6e
   36b30:	6e6f6974 	.word	0x6e6f6974
   36b34:	73737220 	.word	0x73737220
   36b38:	00000069 	.word	0x00000069
   36b3c:	6e6e6f63 	.word	0x6e6e6f63
   36b40:	69746365 	.word	0x69746365
   36b44:	68206e6f 	.word	0x68206e6f
   36b48:	6c646e61 	.word	0x6c646e61
   36b4c:	61702065 	.word	0x61702065
   36b50:	656d6172 	.word	0x656d6172
   36b54:	2c726574 	.word	0x2c726574
   36b58:	61737520 	.word	0x61737520
   36b5c:	203a6567 	.word	0x203a6567
   36b60:	49553c3d 	.word	0x49553c3d
   36b64:	3631544e 	.word	0x3631544e
   36b68:	0000003e 	.word	0x0000003e
   36b6c:	20746573 	.word	0x20746573
   36b70:	74696877 	.word	0x74696877
   36b74:	696c2d65 	.word	0x696c2d65
   36b78:	61207473 	.word	0x61207473
   36b7c:	65726464 	.word	0x65726464
   36b80:	73657373 	.word	0x73657373
   36b84:	00000000 	.word	0x00000000
   36b88:	74696877 	.word	0x74696877
   36b8c:	696c2d65 	.word	0x696c2d65
   36b90:	64207473 	.word	0x64207473
   36b94:	63697665 	.word	0x63697665
   36b98:	64612065 	.word	0x64612065
   36b9c:	73657264 	.word	0x73657264
   36ba0:	2c736573 	.word	0x2c736573
   36ba4:	61737520 	.word	0x61737520
   36ba8:	203a6567 	.word	0x203a6567
   36bac:	58585b3d 	.word	0x58585b3d
   36bb0:	3a58583a 	.word	0x3a58583a
   36bb4:	583a5858 	.word	0x583a5858
   36bb8:	58583a58 	.word	0x58583a58
   36bbc:	5d58583a 	.word	0x5d58583a
   36bc0:	00000000 	.word	0x00000000
   36bc4:	74696877 	.word	0x74696877
   36bc8:	696c2d65 	.word	0x696c2d65
   36bcc:	61207473 	.word	0x61207473
   36bd0:	65726464 	.word	0x65726464
   36bd4:	74207373 	.word	0x74207373
   36bd8:	73657079 	.word	0x73657079
   36bdc:	7375202c 	.word	0x7375202c
   36be0:	3a656761 	.word	0x3a656761
   36be4:	705b3d20 	.word	0x705b3d20
   36be8:	696c6275 	.word	0x696c6275
   36bec:	61727c63 	.word	0x61727c63
   36bf0:	6d6f646e 	.word	0x6d6f646e
   36bf4:	0000005d 	.word	0x0000005d
   36bf8:	20746573 	.word	0x20746573
   36bfc:	76697270 	.word	0x76697270
   36c00:	646f6d20 	.word	0x646f6d20
   36c04:	00000065 	.word	0x00000065
   36c08:	20746573 	.word	0x20746573
   36c0c:	76697270 	.word	0x76697270
   36c10:	646f6d20 	.word	0x646f6d20
   36c14:	6f662065 	.word	0x6f662065
   36c18:	65642072 	.word	0x65642072
   36c1c:	65636976 	.word	0x65636976
   36c20:	64646120 	.word	0x64646120
   36c24:	73736572 	.word	0x73736572
   36c28:	7375202c 	.word	0x7375202c
   36c2c:	3a656761 	.word	0x3a656761
   36c30:	585b3d20 	.word	0x585b3d20
   36c34:	58583a58 	.word	0x58583a58
   36c38:	3a58583a 	.word	0x3a58583a
   36c3c:	583a5858 	.word	0x583a5858
   36c40:	58583a58 	.word	0x58583a58
   36c44:	0000005d 	.word	0x0000005d
   36c48:	20746573 	.word	0x20746573
   36c4c:	76697270 	.word	0x76697270
   36c50:	646f6d20 	.word	0x646f6d20
   36c54:	6f662065 	.word	0x6f662065
   36c58:	65642072 	.word	0x65642072
   36c5c:	65636976 	.word	0x65636976
   36c60:	64646120 	.word	0x64646120
   36c64:	73736572 	.word	0x73736572
   36c68:	70797420 	.word	0x70797420
   36c6c:	75202c65 	.word	0x75202c65
   36c70:	65676173 	.word	0x65676173
   36c74:	5b3d203a 	.word	0x5b3d203a
   36c78:	6c627570 	.word	0x6c627570
   36c7c:	727c6369 	.word	0x727c6369
   36c80:	6f646e61 	.word	0x6f646e61
   36c84:	202c5d6d 	.word	0x202c5d6d
   36c88:	61666564 	.word	0x61666564
   36c8c:	3a746c75 	.word	0x3a746c75
   36c90:	62757020 	.word	0x62757020
   36c94:	0063696c 	.word	0x0063696c
   36c98:	20746573 	.word	0x20746573
   36c9c:	76697270 	.word	0x76697270
   36ca0:	646f6d20 	.word	0x646f6d20
   36ca4:	75202c65 	.word	0x75202c65
   36ca8:	65676173 	.word	0x65676173
   36cac:	5b3d203a 	.word	0x5b3d203a
   36cb0:	49552d30 	.word	0x49552d30
   36cb4:	5f38544e 	.word	0x5f38544e
   36cb8:	5d58414d 	.word	0x5d58414d
   36cbc:	00000000 	.word	0x00000000
   36cc0:	20746573 	.word	0x20746573
   36cc4:	6e616373 	.word	0x6e616373
   36cc8:	73657220 	.word	0x73657220
   36ccc:	736e6f70 	.word	0x736e6f70
   36cd0:	00000065 	.word	0x00000065
   36cd4:	20746573 	.word	0x20746573
   36cd8:	65766461 	.word	0x65766461
   36cdc:	73697472 	.word	0x73697472
   36ce0:	20676e69 	.word	0x20676e69
   36ce4:	61746164 	.word	0x61746164
   36ce8:	00000000 	.word	0x00000000
   36cec:	74736e69 	.word	0x74736e69
   36cf0:	65636e61 	.word	0x65636e61
   36cf4:	00000000 	.word	0x00000000
   36cf8:	67617375 	.word	0x67617375
   36cfc:	3d203a65 	.word	0x3d203a65
   36d00:	552d305b 	.word	0x552d305b
   36d04:	38544e49 	.word	0x38544e49
   36d08:	58414d5f 	.word	0x58414d5f
   36d0c:	0000005d 	.word	0x0000005d
   36d10:	67617375 	.word	0x67617375
   36d14:	3d203a65 	.word	0x3d203a65
   36d18:	4e49555b 	.word	0x4e49555b
   36d1c:	5d363154 	.word	0x5d363154
   36d20:	00000000 	.word	0x00000000
   36d24:	64697575 	.word	0x64697575
   36d28:	695f3631 	.word	0x695f3631
   36d2c:	6f635f73 	.word	0x6f635f73
   36d30:	656c706d 	.word	0x656c706d
   36d34:	00006574 	.word	0x00006574
   36d38:	67617375 	.word	0x67617375
   36d3c:	3d203a65 	.word	0x3d203a65
   36d40:	4e49555b 	.word	0x4e49555b
   36d44:	5d323354 	.word	0x5d323354
   36d48:	00000000 	.word	0x00000000
   36d4c:	64697575 	.word	0x64697575
   36d50:	695f3233 	.word	0x695f3233
   36d54:	6f635f73 	.word	0x6f635f73
   36d58:	656c706d 	.word	0x656c706d
   36d5c:	00006574 	.word	0x00006574
   36d60:	64697575 	.word	0x64697575
   36d64:	5f383231 	.word	0x5f383231
   36d68:	635f7369 	.word	0x635f7369
   36d6c:	6c706d6f 	.word	0x6c706d6f
   36d70:	00657465 	.word	0x00657465
   36d74:	67617375 	.word	0x67617375
   36d78:	3d203a65 	.word	0x3d203a65
   36d7c:	544e495b 	.word	0x544e495b
   36d80:	494d5f38 	.word	0x494d5f38
   36d84:	4e492d4e 	.word	0x4e492d4e
   36d88:	4d5f3854 	.word	0x4d5f3854
   36d8c:	005d5841 	.word	0x005d5841
   36d90:	67617375 	.word	0x67617375
   36d94:	3d203a65 	.word	0x3d203a65
   36d98:	3a58585b 	.word	0x3a58585b
   36d9c:	583a5858 	.word	0x583a5858
   36da0:	58583a58 	.word	0x58583a58
   36da4:	0000005d 	.word	0x0000005d
   36da8:	67617375 	.word	0x67617375
   36dac:	3d203a65 	.word	0x3d203a65
   36db0:	7274735b 	.word	0x7274735b
   36db4:	5d676e69 	.word	0x5d676e69
   36db8:	00000000 	.word	0x00000000
   36dbc:	67617375 	.word	0x67617375
   36dc0:	3d203a65 	.word	0x3d203a65
   36dc4:	3a58585b 	.word	0x3a58585b
   36dc8:	2e2e5858 	.word	0x2e2e5858
   36dcc:	00005d2e 	.word	0x00005d2e
   36dd0:	7361656d 	.word	0x7361656d
   36dd4:	64657275 	.word	0x64657275
   36dd8:	776f705f 	.word	0x776f705f
   36ddc:	00007265 	.word	0x00007265
   36de0:	67617375 	.word	0x67617375
   36de4:	3d203a65 	.word	0x3d203a65
   36de8:	30312d5b 	.word	0x30312d5b
   36dec:	30322d30 	.word	0x30322d30
   36df0:	0000005d 	.word	0x0000005d
   36df4:	20746573 	.word	0x20746573
   36df8:	69766564 	.word	0x69766564
   36dfc:	70206563 	.word	0x70206563
   36e00:	6d617261 	.word	0x6d617261
   36e04:	72657465 	.word	0x72657465
   36e08:	00000073 	.word	0x00000073
   36e0c:	20746573 	.word	0x20746573
   36e10:	69766564 	.word	0x69766564
   36e14:	61206563 	.word	0x61206563
   36e18:	65726464 	.word	0x65726464
   36e1c:	202c7373 	.word	0x202c7373
   36e20:	67617375 	.word	0x67617375
   36e24:	3d203a65 	.word	0x3d203a65
   36e28:	3a58585b 	.word	0x3a58585b
   36e2c:	583a5858 	.word	0x583a5858
   36e30:	58583a58 	.word	0x58583a58
   36e34:	3a58583a 	.word	0x3a58583a
   36e38:	005d5858 	.word	0x005d5858
   36e3c:	20746573 	.word	0x20746573
   36e40:	69766564 	.word	0x69766564
   36e44:	61206563 	.word	0x61206563
   36e48:	65726464 	.word	0x65726464
   36e4c:	74207373 	.word	0x74207373
   36e50:	2c657079 	.word	0x2c657079
   36e54:	61737520 	.word	0x61737520
   36e58:	203a6567 	.word	0x203a6567
   36e5c:	75705b3d 	.word	0x75705b3d
   36e60:	63696c62 	.word	0x63696c62
   36e64:	6e61727c 	.word	0x6e61727c
   36e68:	5d6d6f64 	.word	0x5d6d6f64
   36e6c:	6564202c 	.word	0x6564202c
   36e70:	6c756166 	.word	0x6c756166
   36e74:	70203a74 	.word	0x70203a74
   36e78:	696c6275 	.word	0x696c6275
   36e7c:	00000063 	.word	0x00000063
   36e80:	6978614d 	.word	0x6978614d
   36e84:	206d756d 	.word	0x206d756d
   36e88:	6e617254 	.word	0x6e617254
   36e8c:	736d6973 	.word	0x736d6973
   36e90:	6e6f6973 	.word	0x6e6f6973
   36e94:	696e5520 	.word	0x696e5520
   36e98:	75202c74 	.word	0x75202c74
   36e9c:	65676173 	.word	0x65676173
   36ea0:	5b3d203a 	.word	0x5b3d203a
   36ea4:	49552d30 	.word	0x49552d30
   36ea8:	3631544e 	.word	0x3631544e
   36eac:	58414d5f 	.word	0x58414d5f
   36eb0:	0000005d 	.word	0x0000005d
   36eb4:	6e656449 	.word	0x6e656449
   36eb8:	79746974 	.word	0x79746974
   36ebc:	73655220 	.word	0x73655220
   36ec0:	69766c6f 	.word	0x69766c6f
   36ec4:	4b20676e 	.word	0x4b20676e
   36ec8:	202c7965 	.word	0x202c7965
   36ecc:	67617375 	.word	0x67617375
   36ed0:	3d203a65 	.word	0x3d203a65
   36ed4:	3a58585b 	.word	0x3a58585b
   36ed8:	2e2e5858 	.word	0x2e2e5858
   36edc:	202c5d2e 	.word	0x202c5d2e
   36ee0:	3d6e656c 	.word	0x3d6e656c
   36ee4:	6f203631 	.word	0x6f203631
   36ee8:	74657463 	.word	0x74657463
   36eec:	00000073 	.word	0x00000073
   36ef0:	72617473 	.word	0x72617473
   36ef4:	74732f74 	.word	0x74732f74
   36ef8:	7320706f 	.word	0x7320706f
   36efc:	206e6163 	.word	0x206e6163
   36f00:	636f7270 	.word	0x636f7270
   36f04:	72756465 	.word	0x72756465
   36f08:	69772065 	.word	0x69772065
   36f0c:	73206874 	.word	0x73206874
   36f10:	69636570 	.word	0x69636570
   36f14:	20636966 	.word	0x20636966
   36f18:	61726170 	.word	0x61726170
   36f1c:	6574656d 	.word	0x6574656d
   36f20:	00007372 	.word	0x00007372
   36f24:	636e6163 	.word	0x636e6163
   36f28:	73206c65 	.word	0x73206c65
   36f2c:	206e6163 	.word	0x206e6163
   36f30:	636f7270 	.word	0x636f7270
   36f34:	72756465 	.word	0x72756465
   36f38:	00000065 	.word	0x00000065
   36f3c:	67617375 	.word	0x67617375
   36f40:	3d203a65 	.word	0x3d203a65
   36f44:	6e6f6e5b 	.word	0x6e6f6e5b
   36f48:	4d317c65 	.word	0x4d317c65
   36f4c:	646f637c 	.word	0x646f637c
   36f50:	627c6465 	.word	0x627c6465
   36f54:	5d68746f 	.word	0x5d68746f
   36f58:	6564202c 	.word	0x6564202c
   36f5c:	6c756166 	.word	0x6c756166
   36f60:	6e203a74 	.word	0x6e203a74
   36f64:	00656e6f 	.word	0x00656e6f
   36f68:	67617375 	.word	0x67617375
   36f6c:	3d203a65 	.word	0x3d203a65
   36f70:	492d315b 	.word	0x492d315b
   36f74:	3233544e 	.word	0x3233544e
   36f78:	58414d5f 	.word	0x58414d5f
   36f7c:	64202c5d 	.word	0x64202c5d
   36f80:	75616665 	.word	0x75616665
   36f84:	203a746c 	.word	0x203a746c
   36f88:	33544e49 	.word	0x33544e49
   36f8c:	414d5f32 	.word	0x414d5f32
   36f90:	00000058 	.word	0x00000058
   36f94:	67617375 	.word	0x67617375
   36f98:	3d203a65 	.word	0x3d203a65
   36f9c:	312d305b 	.word	0x312d305b
   36fa0:	64202c5d 	.word	0x64202c5d
   36fa4:	75616665 	.word	0x75616665
   36fa8:	203a746c 	.word	0x203a746c
   36fac:	00000030 	.word	0x00000030
   36fb0:	67617375 	.word	0x67617375
   36fb4:	3d203a65 	.word	0x3d203a65
   36fb8:	552d305b 	.word	0x552d305b
   36fbc:	31544e49 	.word	0x31544e49
   36fc0:	414d5f36 	.word	0x414d5f36
   36fc4:	202c5d58 	.word	0x202c5d58
   36fc8:	61666564 	.word	0x61666564
   36fcc:	3a746c75 	.word	0x3a746c75
   36fd0:	00003020 	.word	0x00003020
   36fd4:	67617375 	.word	0x67617375
   36fd8:	3d203a65 	.word	0x3d203a65
   36fdc:	5f6f6e5b 	.word	0x5f6f6e5b
   36fe0:	757c6c77 	.word	0x757c6c77
   36fe4:	775f6573 	.word	0x775f6573
   36fe8:	6f6e7c6c 	.word	0x6f6e7c6c
   36fec:	5f6c775f 	.word	0x5f6c775f
   36ff0:	74696e69 	.word	0x74696e69
   36ff4:	73757c61 	.word	0x73757c61
   36ff8:	6c775f65 	.word	0x6c775f65
   36ffc:	696e695f 	.word	0x696e695f
   37000:	2c5d6174 	.word	0x2c5d6174
   37004:	66656420 	.word	0x66656420
   37008:	746c7561 	.word	0x746c7561
   3700c:	6f6e203a 	.word	0x6f6e203a
   37010:	006c775f 	.word	0x006c775f
   37014:	67617375 	.word	0x67617375
   37018:	3d203a65 	.word	0x3d203a65
   3701c:	6275705b 	.word	0x6275705b
   37020:	7c63696c 	.word	0x7c63696c
   37024:	646e6172 	.word	0x646e6172
   37028:	727c6d6f 	.word	0x727c6d6f
   3702c:	705f6170 	.word	0x705f6170
   37030:	727c6275 	.word	0x727c6275
   37034:	725f6170 	.word	0x725f6170
   37038:	2c5d646e 	.word	0x2c5d646e
   3703c:	66656420 	.word	0x66656420
   37040:	746c7561 	.word	0x746c7561
   37044:	7570203a 	.word	0x7570203a
   37048:	63696c62 	.word	0x63696c62
   3704c:	00000000 	.word	0x00000000
   37050:	00004d31 	.word	0x00004d31
   37054:	65646f63 	.word	0x65646f63
   37058:	00000064 	.word	0x00000064
   3705c:	68746f62 	.word	0x68746f62
   37060:	00000000 	.word	0x00000000
   37064:	775f6f6e 	.word	0x775f6f6e
   37068:	0000006c 	.word	0x0000006c
   3706c:	5f657375 	.word	0x5f657375
   37070:	00006c77 	.word	0x00006c77
   37074:	775f6f6e 	.word	0x775f6f6e
   37078:	6e695f6c 	.word	0x6e695f6c
   3707c:	00617469 	.word	0x00617469
   37080:	5f657375 	.word	0x5f657375
   37084:	695f6c77 	.word	0x695f6c77
   37088:	6174696e 	.word	0x6174696e
   3708c:	00000000 	.word	0x00000000
   37090:	20746573 	.word	0x20746573
   37094:	6e616373 	.word	0x6e616373
   37098:	74706f20 	.word	0x74706f20
   3709c:	736e6f69 	.word	0x736e6f69
   370a0:	00000000 	.word	0x00000000
   370a4:	67617375 	.word	0x67617375
   370a8:	3d203a65 	.word	0x3d203a65
   370ac:	552d305b 	.word	0x552d305b
   370b0:	31544e49 	.word	0x31544e49
   370b4:	414d5f36 	.word	0x414d5f36
   370b8:	202c5d58 	.word	0x202c5d58
   370bc:	61666564 	.word	0x61666564
   370c0:	3a746c75 	.word	0x3a746c75
   370c4:	4e495520 	.word	0x4e495520
   370c8:	5f363154 	.word	0x5f363154
   370cc:	0058414d 	.word	0x0058414d
   370d0:	63736964 	.word	0x63736964
   370d4:	656e6e6f 	.word	0x656e6e6f
   370d8:	63207463 	.word	0x63207463
   370dc:	616d6d6f 	.word	0x616d6d6f
   370e0:	0000646e 	.word	0x0000646e
   370e4:	63736964 	.word	0x63736964
   370e8:	656e6e6f 	.word	0x656e6e6f
   370ec:	6f697463 	.word	0x6f697463
   370f0:	6572206e 	.word	0x6572206e
   370f4:	6e6f7361 	.word	0x6e6f7361
   370f8:	7375202c 	.word	0x7375202c
   370fc:	3a656761 	.word	0x3a656761
   37100:	555b3d20 	.word	0x555b3d20
   37104:	38544e49 	.word	0x38544e49
   37108:	64202c5d 	.word	0x64202c5d
   3710c:	75616665 	.word	0x75616665
   37110:	203a746c 	.word	0x203a746c
   37114:	28203931 	.word	0x28203931
   37118:	6f6d6572 	.word	0x6f6d6572
   3711c:	75206574 	.word	0x75206574
   37120:	20726573 	.word	0x20726573
   37124:	6d726574 	.word	0x6d726574
   37128:	74616e69 	.word	0x74616e69
   3712c:	63206465 	.word	0x63206465
   37130:	656e6e6f 	.word	0x656e6e6f
   37134:	6f697463 	.word	0x6f697463
   37138:	0000296e 	.word	0x0000296e
   3713c:	72617473 	.word	0x72617473
   37140:	74732f74 	.word	0x74732f74
   37144:	6320706f 	.word	0x6320706f
   37148:	656e6e6f 	.word	0x656e6e6f
   3714c:	6f697463 	.word	0x6f697463
   37150:	7270206e 	.word	0x7270206e
   37154:	6465636f 	.word	0x6465636f
   37158:	20657275 	.word	0x20657275
   3715c:	68746977 	.word	0x68746977
   37160:	65707320 	.word	0x65707320
   37164:	69666963 	.word	0x69666963
   37168:	61702063 	.word	0x61702063
   3716c:	656d6172 	.word	0x656d6172
   37170:	73726574 	.word	0x73726574
   37174:	00000000 	.word	0x00000000
   37178:	636e6163 	.word	0x636e6163
   3717c:	63206c65 	.word	0x63206c65
   37180:	656e6e6f 	.word	0x656e6e6f
   37184:	6f697463 	.word	0x6f697463
   37188:	7270206e 	.word	0x7270206e
   3718c:	6465636f 	.word	0x6465636f
   37190:	00657275 	.word	0x00657275
   37194:	67617375 	.word	0x67617375
   37198:	3d203a65 	.word	0x3d203a65
   3719c:	6e6f6e5b 	.word	0x6e6f6e5b
   371a0:	4d317c65 	.word	0x4d317c65
   371a4:	646f637c 	.word	0x646f637c
   371a8:	627c6465 	.word	0x627c6465
   371ac:	7c68746f 	.word	0x7c68746f
   371b0:	5d6c6c61 	.word	0x5d6c6c61
   371b4:	6564202c 	.word	0x6564202c
   371b8:	6c756166 	.word	0x6c756166
   371bc:	6e203a74 	.word	0x6e203a74
   371c0:	00656e6f 	.word	0x00656e6f
   371c4:	72656570 	.word	0x72656570
   371c8:	6464615f 	.word	0x6464615f
   371cc:	79745f72 	.word	0x79745f72
   371d0:	00006570 	.word	0x00006570
   371d4:	67617375 	.word	0x67617375
   371d8:	3d203a65 	.word	0x3d203a65
   371dc:	6275705b 	.word	0x6275705b
   371e0:	7c63696c 	.word	0x7c63696c
   371e4:	646e6172 	.word	0x646e6172
   371e8:	707c6d6f 	.word	0x707c6d6f
   371ec:	696c6275 	.word	0x696c6275
   371f0:	64695f63 	.word	0x64695f63
   371f4:	6e61727c 	.word	0x6e61727c
   371f8:	5f6d6f64 	.word	0x5f6d6f64
   371fc:	2c5d6469 	.word	0x2c5d6469
   37200:	66656420 	.word	0x66656420
   37204:	746c7561 	.word	0x746c7561
   37208:	7570203a 	.word	0x7570203a
   3720c:	63696c62 	.word	0x63696c62
   37210:	00000000 	.word	0x00000000
   37214:	72656570 	.word	0x72656570
   37218:	6464615f 	.word	0x6464615f
   3721c:	00000072 	.word	0x00000072
   37220:	67617375 	.word	0x67617375
   37224:	3d203a65 	.word	0x3d203a65
   37228:	492d315b 	.word	0x492d315b
   3722c:	3233544e 	.word	0x3233544e
   37230:	58414d5f 	.word	0x58414d5f
   37234:	64202c5d 	.word	0x64202c5d
   37238:	75616665 	.word	0x75616665
   3723c:	203a746c 	.word	0x203a746c
   37240:	00000030 	.word	0x00000030
   37244:	67617375 	.word	0x67617375
   37248:	3d203a65 	.word	0x3d203a65
   3724c:	552d305b 	.word	0x552d305b
   37250:	31544e49 	.word	0x31544e49
   37254:	414d5f36 	.word	0x414d5f36
   37258:	202c5d58 	.word	0x202c5d58
   3725c:	61666564 	.word	0x61666564
   37260:	3a746c75 	.word	0x3a746c75
   37264:	30783020 	.word	0x30783020
   37268:	00303130 	.word	0x00303130
   3726c:	65646f63 	.word	0x65646f63
   37270:	696d5f64 	.word	0x696d5f64
   37274:	6f635f6e 	.word	0x6f635f6e
   37278:	655f6e6e 	.word	0x655f6e6e
   3727c:	746e6576 	.word	0x746e6576
   37280:	6e656c5f 	.word	0x6e656c5f
   37284:	00000000 	.word	0x00000000
   37288:	65646f63 	.word	0x65646f63
   3728c:	616d5f64 	.word	0x616d5f64
   37290:	6f635f78 	.word	0x6f635f78
   37294:	655f6e6e 	.word	0x655f6e6e
   37298:	746e6576 	.word	0x746e6576
   3729c:	6e656c5f 	.word	0x6e656c5f
   372a0:	00000000 	.word	0x00000000
   372a4:	6d5f4d32 	.word	0x6d5f4d32
   372a8:	635f6e69 	.word	0x635f6e69
   372ac:	5f6e6e6f 	.word	0x5f6e6e6f
   372b0:	6e657665 	.word	0x6e657665
   372b4:	656c5f74 	.word	0x656c5f74
   372b8:	0000006e 	.word	0x0000006e
   372bc:	6d5f4d32 	.word	0x6d5f4d32
   372c0:	635f7861 	.word	0x635f7861
   372c4:	5f6e6e6f 	.word	0x5f6e6e6f
   372c8:	6e657665 	.word	0x6e657665
   372cc:	656c5f74 	.word	0x656c5f74
   372d0:	0000006e 	.word	0x0000006e
   372d4:	006c6c61 	.word	0x006c6c61
   372d8:	72617473 	.word	0x72617473
   372dc:	74732f74 	.word	0x74732f74
   372e0:	6120706f 	.word	0x6120706f
   372e4:	72657664 	.word	0x72657664
   372e8:	69736974 	.word	0x69736974
   372ec:	7720676e 	.word	0x7720676e
   372f0:	20687469 	.word	0x20687469
   372f4:	63657073 	.word	0x63657073
   372f8:	63696669 	.word	0x63696669
   372fc:	72617020 	.word	0x72617020
   37300:	74656d61 	.word	0x74656d61
   37304:	00737265 	.word	0x00737265
   37308:	706f7473 	.word	0x706f7473
   3730c:	76646120 	.word	0x76646120
   37310:	69747265 	.word	0x69747265
   37314:	676e6973 	.word	0x676e6973
   37318:	6f727020 	.word	0x6f727020
   3731c:	75646563 	.word	0x75646563
   37320:	00006572 	.word	0x00006572
   37324:	6e6e6f63 	.word	0x6e6e6f63
   37328:	61746365 	.word	0x61746365
   3732c:	20656c62 	.word	0x20656c62
   37330:	65646f6d 	.word	0x65646f6d
   37334:	7375202c 	.word	0x7375202c
   37338:	3a656761 	.word	0x3a656761
   3733c:	6e5b3d20 	.word	0x6e5b3d20
   37340:	757c6e6f 	.word	0x757c6e6f
   37344:	647c646e 	.word	0x647c646e
   37348:	2c5d7269 	.word	0x2c5d7269
   3734c:	66656420 	.word	0x66656420
   37350:	746c7561 	.word	0x746c7561
   37354:	6e75203a 	.word	0x6e75203a
   37358:	00000064 	.word	0x00000064
   3735c:	63736964 	.word	0x63736964
   37360:	7265766f 	.word	0x7265766f
   37364:	656c6261 	.word	0x656c6261
   37368:	646f6d20 	.word	0x646f6d20
   3736c:	75202c65 	.word	0x75202c65
   37370:	65676173 	.word	0x65676173
   37374:	5b3d203a 	.word	0x5b3d203a
   37378:	7c6e6f6e 	.word	0x7c6e6f6e
   3737c:	7c64746c 	.word	0x7c64746c
   37380:	5d6e6567 	.word	0x5d6e6567
   37384:	6564202c 	.word	0x6564202c
   37388:	6c756166 	.word	0x6c756166
   3738c:	67203a74 	.word	0x67203a74
   37390:	00006e65 	.word	0x00006e65
   37394:	67617375 	.word	0x67617375
   37398:	3d203a65 	.word	0x3d203a65
   3739c:	3078305b 	.word	0x3078305b
   373a0:	78302d30 	.word	0x78302d30
   373a4:	2c5d6666 	.word	0x2c5d6666
   373a8:	66656420 	.word	0x66656420
   373ac:	746c7561 	.word	0x746c7561
   373b0:	0030203a 	.word	0x0030203a
   373b4:	67617375 	.word	0x67617375
   373b8:	3d203a65 	.word	0x3d203a65
   373bc:	6e6f6e5b 	.word	0x6e6f6e5b
   373c0:	63737c65 	.word	0x63737c65
   373c4:	637c6e61 	.word	0x637c6e61
   373c8:	7c6e6e6f 	.word	0x7c6e6e6f
   373cc:	68746f62 	.word	0x68746f62
   373d0:	64202c5d 	.word	0x64202c5d
   373d4:	75616665 	.word	0x75616665
   373d8:	203a746c 	.word	0x203a746c
   373dc:	656e6f6e 	.word	0x656e6f6e
   373e0:	00000000 	.word	0x00000000
   373e4:	74736572 	.word	0x74736572
   373e8:	20747261 	.word	0x20747261
   373ec:	65766461 	.word	0x65766461
   373f0:	73697472 	.word	0x73697472
   373f4:	20676e69 	.word	0x20676e69
   373f8:	65746661 	.word	0x65746661
   373fc:	69642072 	.word	0x69642072
   37400:	6e6f6373 	.word	0x6e6f6373
   37404:	7463656e 	.word	0x7463656e
   37408:	7375202c 	.word	0x7375202c
   3740c:	3a656761 	.word	0x3a656761
   37410:	305b3d20 	.word	0x305b3d20
   37414:	2c5d312d 	.word	0x2c5d312d
   37418:	66656420 	.word	0x66656420
   3741c:	746c7561 	.word	0x746c7561
   37420:	0030203a 	.word	0x0030203a
   37424:	006e6f6e 	.word	0x006e6f6e
   37428:	0064746c 	.word	0x0064746c
   3742c:	006e6567 	.word	0x006e6567
   37430:	00646e75 	.word	0x00646e75
   37434:	00726964 	.word	0x00726964
   37438:	6c627570 	.word	0x6c627570
   3743c:	00006369 	.word	0x00006369
   37440:	646e6172 	.word	0x646e6172
   37444:	00006d6f 	.word	0x00006d6f
   37448:	6c627570 	.word	0x6c627570
   3744c:	695f6369 	.word	0x695f6369
   37450:	00000064 	.word	0x00000064
   37454:	646e6172 	.word	0x646e6172
   37458:	695f6d6f 	.word	0x695f6d6f
   3745c:	00000064 	.word	0x00000064
   37460:	5f617072 	.word	0x5f617072
   37464:	00627570 	.word	0x00627570
   37468:	5f617072 	.word	0x5f617072
   3746c:	00646e72 	.word	0x00646e72

00037470 <advertise_help>:
   37470:	000372d8 00000000 0003747c              .r......|t..

0003747c <advertise_params>:
   3747c:	00034ee4 00037308 00034df4 00037324     .N...s...M..$s..
   3748c:	00035fa0 0003735c 000371c4 000371d4     ._..\s...q...q..
   3749c:	00037214 00036e20 000359b8 00037014     .r.. n...Y...p..
   374ac:	00035fec 00037394 00035970 000373b4     ._...s..pY...s..
   374bc:	000351a4 00036fb0 000351d8 00036fb0     .Q...o...Q...o..
   374cc:	0003601c 00036f94 000358b0 00036f68     .`...o...X..ho..
   374dc:	00035fc4 000373e4 00000000 00000000     ._...s..........

000374ec <btshell_commands>:
   374ec:	00000000 00017671 00036070 00037470     ....qv..p`..pt..
   374fc:	00000000 000170e9 0003607c 000378f8     .....p..|`...x..
   3750c:	00000000 00017075 00036084 000379ec     ....up...`...y..
   3751c:	00000000 00017011 00036090 00037ba8     .....p...`...{..
   3752c:	00000000 00016fd5 0003609c 00037bb4     .....o...`...{..
   3753c:	00000000 00016585 000360a8 00037f04     .....e...`......
   3754c:	00000000 00016c0d 000360b8 00037d5c     .....l...`..\}..
   3755c:	00000000 00016b59 00038a3c 00037ea4     ....Yk..<....~..
   3756c:	00000000 00016af5 000360c0 00037de8     .....j...`...}..
   3757c:	00000000 00016ae9 000360d0 00037f30     .....j...`..0...
   3758c:	00000000 00016529 000360e0 00037ed8     ....)e...`...~..
   3759c:	00000000 000164c9 000360f0 00037f78     .....d...`..x...
   375ac:	00000000 00016461 000360fc 00037890     ....ad...`...x..
   375bc:	00000000 00016311 00036108 000378ac     .....c...a...x..
   375cc:	00000000 0001627d 0003611c 00037864     ....}b...a..dx..
   375dc:	00000000 00017921 0003612c 00037a10     ....!y..,a...z..
   375ec:	00000000 000179b1 0003614c 00037a44     .....y..La..Dz..
   375fc:	00000000 00017a09 00036168 00037a8c     .....z..ha...z..
   3760c:	00000000 00017a89 00036180 00037a70     .....z...a..pz..
   3761c:	00000000 00017dd9 00036194 00037acc     .....}...a...z..
   3762c:	00000000 00017ad9 000361b0 00037ab0     .....z...a...z..
   3763c:	00000000 00017b65 000361c4 00037b14     ....e{...a...{..
   3764c:	00000000 00017b29 000361d0 00037af8     ....){...a...z..
   3765c:	00000000 00017d15 000361dc 00037b60     .....}...a..`{..
   3766c:	00000000 00017d75 000361f4 00037b84     ....u}...a...{..
   3767c:	00000000 00017e31 0003620c 00037bc0     ....1~...b...{..
   3768c:	00000000 00017e75 00036218 00037bcc     ....u~...b...{..
   3769c:	00000000 00017e81 00036228 00037be0     .....~..(b...{..
   376ac:	00000000 00016205 00036234 00037c3c     .....b..4b..<|..
   376bc:	00000000 000160c9 00036244 00037c90     .....`..Db...|..
   376cc:	00000000 00015df9 00036254 00037ccc     .....]..Tb...|..
   376dc:	00000000 00015d11 00036264 00037f3c     .....]..db..<...
   376ec:	00000000 00015c71 0003626c 00037d28     ....q\..lb..(}..
   376fc:	00000000 00015c15 00036274 00037d04     .....\..tb...}..
   3770c:	00000000 00015b9d 00036284 00037ce8     .....[...b...|..
   3771c:	00000000 00015b79 00036290 00037c30     ....y[...b..0|..
   3772c:	00000000 00015b35 0003629c 00037c24     ....5[...b..$|..
	...

0003774c <cmd_addr_type>:
   3774c:	00037438 00000000 00037440 00000001     8t......@t......
	...

00037764 <cmd_adv_conn_modes>:
   37764:	00037424 00000000 00037430 00000002     $t......0t......
   37774:	00037434 00000001 00000000 00000000     4t..............

00037784 <cmd_adv_disc_modes>:
   37784:	00037424 00000000 00037428 00000001     $t......(t......
   37794:	0003742c 00000002 00000000 00000000     ,t..............

000377a4 <cmd_adv_filt_types>:
   377a4:	000373dc 00000000 000360b8 00000001     .s.......`......
   377b4:	00034df4 00000002 0003705c 00000003     .M......\p......
	...

000377cc <cmd_keystore_entry_type>:
   377cc:	000368b8 00000002 000368c0 00000001     .h.......h......
   377dc:	000368c8 00000003 00000000 00000000     .h..............

000377ec <cmd_own_addr_types>:
   377ec:	00037438 00000000 00037440 00000001     8t......@t......
   377fc:	00037460 00000002 00037468 00000003     `t......ht......
	...

00037814 <cmd_peer_addr_types>:
   37814:	00037438 00000000 00037440 00000001     8t......@t......
   37824:	00037448 00000002 00037454 00000003     Ht......Tt......
	...

0003783c <cmd_scan_filt_policies>:
   3783c:	00037064 00000000 0003706c 00000001     dp......lp......
   3784c:	00037074 00000002 00037080 00000003     tp.......p......
	...

00037864 <conn_datalen_help>:
   37864:	000368d0 00000000 00037870              .h......px..

00037870 <conn_datalen_params>:
   37870:	00034df4 000368fc 000368b0 00036920     .M...h...h.. i..
   37880:	0003515c 00036970 00000000 00000000     \Q..pi..........

00037890 <conn_rssi_help>:
   37890:	00036b24 00000000 0003789c              $k.......x..

0003789c <conn_rssi_params>:
   3789c:	00034df4 00036b3c 00000000 00000000     .M..<k..........

000378ac <conn_update_params_help>:
   378ac:	000369e4 00036a04 000378b8              .i...j...x..

000378b8 <conn_update_params_params>:
   378b8:	00034df4 00036a20 000351a4 00036a50     .M.. j...Q..Pj..
   378c8:	000351d8 00036a74 0003520c 00036a98     .Q..tj...R...j..
   378d8:	00035234 00036ab8 0003525c 00036adc     4R...j..\R...j..
   378e8:	00035298 00036b00 00000000 00000000     .R...k..........

000378f8 <connect_help>:
   378f8:	0003713c 00000000 00037904              <q.......y..

00037904 <connect_params>:
   37904:	00035864 00037178 00035884 00037194     dX..xq...X...q..
   37914:	000371c4 000371d4 00037214 00036e20     .q...q...r.. n..
   37924:	000359b8 00037014 000358b0 00037220     .Y...p...X.. r..
   37934:	00035be0 00037244 00035c14 00037244     .[..Dr...\..Dr..
   37944:	000351a4 00036a50 000351d8 00036a74     .Q..Pj...Q..tj..
   37954:	0003520c 00036a98 00035234 00036ab8     .R...j..4R...j..
   37964:	0003525c 00036adc 00035298 00036b00     \R...j...R...k..
   37974:	00035c60 00037244 00035ca0 00037244     `\..Dr...\..Dr..
   37984:	00035cdc 00036a50 00035d18 00036a74     .\..Pj...]..tj..
   37994:	00035d54 00036a98 00035d88 00036ab8     T]...j...]...j..
   379a4:	0003726c 00036adc 00037288 00036b00     lr...j...r...k..
   379b4:	00035e44 00036a50 00035e7c 00036a74     D^..Pj..|^..tj..
   379c4:	00035eb4 00036a98 00035ee0 00036ab8     .^...j...^...j..
   379d4:	000372a4 00036adc 000372bc 00036b00     .r...j...r...k..
	...

000379ec <disconnect_help>:
   379ec:	000370d0 00000000 000379f8              .p.......y..

000379f8 <disconnect_params>:
   379f8:	00034df4 00036b3c 00035b50 000370e4     .M..<k..P[...p..
	...

00037a10 <gatt_discover_characteristic_help>:
   37a10:	00036648 00000000 00037a1c              Hf.......z..

00037a1c <gatt_discover_characteristic_params>:
   37a1c:	00034df4 000362cc 00036518 000365fc     .M...b...e...e..
   37a2c:	0003605c 00036474 00036064 00036494     \`..td..d`...d..
	...

00037a44 <gatt_discover_descriptor_help>:
   37a44:	00036620 00000000 00037a50               f......Pz..

00037a50 <gatt_discover_descriptor_params>:
   37a50:	00034df4 000362cc 0003605c 00036474     .M...b..\`..td..
   37a60:	00036064 00036494 00000000 00000000     d`...d..........

00037a70 <gatt_discover_full_help>:
   37a70:	000365b4 00000000 00037a7c              .e......|z..

00037a7c <gatt_discover_full_params>:
   37a7c:	00034df4 000362cc 00000000 00000000     .M...b..........

00037a8c <gatt_discover_service_help>:
   37a8c:	000365d8 00000000 00037a98              .e.......z..

00037a98 <gatt_discover_service_params>:
   37a98:	00034df4 000362cc 00036518 000365fc     .M...b...e...e..
	...

00037ab0 <gatt_exchange_mtu_help>:
   37ab0:	00036594 00000000 00037abc              .e.......z..

00037abc <gatt_exchange_mtu_params>:
   37abc:	00034df4 000362cc 00000000 00000000     .M...b..........

00037acc <gatt_find_included_services_help>:
   37acc:	00036568 00000000 00037ad8              he.......z..

00037ad8 <gatt_find_included_services_params>:
   37ad8:	00034df4 000362cc 0003605c 00036474     .M...b..\`..td..
   37ae8:	00036064 00036494 00000000 00000000     d`...d..........

00037af8 <gatt_notify_help>:
   37af8:	00036540 00000000 00037b04              @e.......{..

00037b04 <gatt_notify_params>:
   37b04:	0003635c 00036364 00000000 00000000     \c..dc..........

00037b14 <gatt_read_help>:
   37b14:	000364b4 00000000 00037b20              .d...... {..

00037b20 <gatt_read_params>:
   37b20:	00034df4 000362cc 0003632c 000364d0     .M...b..,c...d..
   37b30:	0003635c 00036364 00036388 000364f8     \c..dc...c...d..
   37b40:	00036518 00036520 0003605c 00036474     .e.. e..\`..td..
   37b50:	00036064 00036494 00000000 00000000     d`...d..........

00037b60 <gatt_service_changed_help>:
   37b60:	00036454 00000000 00037b6c              Td......l{..

00037b6c <gatt_service_changed_params>:
   37b6c:	0003605c 00036474 00036064 00036494     \`..td..d`...d..
	...

00037b84 <gatt_service_visibility_help>:
   37b84:	0003641c 00000000 00037b90              .d.......{..

00037b90 <gatt_service_visibility_params>:
   37b90:	000395dc 000369d0 00036438 00036444     .....i..8d..Dd..
	...

00037ba8 <gatt_show_addr_help>:
   37ba8:	000363cc 00000000 00037bd8              .c.......{..

00037bb4 <gatt_show_conn_help>:
   37bb4:	000363ac 00000000 00037bd8              .c.......{..

00037bc0 <gatt_show_help>:
   37bc0:	000363fc 00000000 00037bd8              .c.......{..

00037bcc <gatt_show_local_help>:
   37bcc:	000363e0 00000000 00037bd8              .c.......{..

00037bd8 <gatt_show_params>:
	...

00037be0 <gatt_write_help>:
   37be0:	000362ac 00000000 00037bec              .b.......{..

00037bec <gatt_write_params>:
   37bec:	00034df4 000362cc 000362f0 000362f8     .M...b...b...b..
   37bfc:	0003632c 00036334 0003635c 00036364     ,c..4c..\c..dc..
   37c0c:	00036388 00036364 00036390 00036398     .c..dc...c...c..
	...

00037c24 <host_disable_help>:
   37c24:	00036674 00000000 00000000              tf..........

00037c30 <host_enable_help>:
   37c30:	0003668c 00000000 00000000              .f..........

00037c3c <keystore_add_help>:
   37c3c:	0003687c 00000000 00037c48              |h......H|..

00037c48 <keystore_add_params>:
   37c48:	00034fa0 000367f0 000359bc 00036834     .O...g...Y..4h..
   37c58:	00035070 0003684c 00035094 000369d0     pP..Lh...P...i..
   37c68:	000350b8 00036868 000350dc 00036894     .P..hh...P...h..
   37c78:	000350fc 00036894 0003511c 00036894     .P...h...Q...h..
	...

00037c90 <keystore_del_help>:
   37c90:	00036818 00000000 00037c9c              .h.......|..

00037c9c <keystore_del_params>:
   37c9c:	00034fa0 000367f0 000359bc 00036834     .O...g...Y..4h..
   37cac:	00035070 0003684c 00035094 000369d0     pP..Lh...P...i..
   37cbc:	000350b8 00036868 00000000 00000000     .P..hh..........

00037ccc <keystore_show_help>:
   37ccc:	000367d8 00000000 00037cd8              .g.......|..

00037cd8 <keystore_show_params>:
   37cd8:	00034fa0 000367f0 00000000 00000000     .O...g..........

00037ce8 <phy_read_help>:
   37ce8:	000366a4 00000000 00037cf4              .f.......|..

00037cf4 <phy_read_params>:
   37cf4:	00034df4 000362cc 00000000 00000000     .M...b..........

00037d04 <phy_set_default_help>:
   37d04:	000366b0 00000000 00037d10              .f.......}..

00037d10 <phy_set_default_params>:
   37d10:	00034e50 000366cc 00034e84 000366cc     PN...f...N...f..
	...

00037d28 <phy_set_help>:
   37d28:	000366dc 00000000 00037d34              .f......4}..

00037d34 <phy_set_params>:
   37d34:	00034df4 000362cc 00034e50 000366cc     .M...b..PN...f..
   37d44:	00034e84 000366cc 00034eb8 000369d0     .N...f...N...i..
	...

00037d5c <scan_help>:
   37d5c:	00036ef0 00000000 00037d68              .n......h}..

00037d68 <scan_params>:
   37d68:	00035864 00036f24 00035884 00036f3c     dX..$o...X..<o..
   37d78:	000358b0 00036f68 000358dc 00036f94     .X..ho...X...o..
   37d88:	00035904 00036f94 00035690 00036fb0     .Y...o...V...o..
   37d98:	0003594c 00036fb0 00035970 00036fd4     LY...o..pY...o..
   37da8:	00035994 00036f94 000359b8 00037014     .Y...o...Y...p..
   37db8:	00035a04 00036fb0 00035a40 00036fb0     .Z...o..@Z...o..
   37dc8:	00035a78 00036fb0 00035ab4 00036fb0     xZ...o...Z...o..
   37dd8:	00035af0 00036f94 00000000 00000000     .Z...o..........

00037de8 <set_adv_data_help>:
   37de8:	00036cd4 00000000 00037df4              .l.......}..

00037df4 <set_adv_data_params>:
   37df4:	00036cec 00036fc8 000353fc 00036cf8     .l...o...S...l..
   37e04:	00035420 00036d10 00036d24 00036310      T...m..$m...c..
   37e14:	00035484 00036d38 00036d4c 00036310     .T..8m..Lm...c..
   37e24:	000354e8 00036ecc 00036d60 00036310     .T...n..`m...c..
   37e34:	0003555c 00036d74 00035590 00036d90     \U..tm...U...m..
   37e44:	00035614 00036e20 00035658 00036d10     .V.. n..XV...m..
   37e54:	00035554 00036da8 00035684 00036d10     TU...m...V...m..
   37e64:	000355d4 00036dbc 000356c8 00036dbc     .U...m...V...m..
   37e74:	00035708 00036dbc 0003574c 00036dbc     .W...m..LW...m..
   37e84:	0003576c 00036dbc 00036dd0 00036de0     lW...m...m...m..
   37e94:	000357e4 00036da8 00000000 00000000     .W...m..........

00037ea4 <set_help>:
   37ea4:	00036df4 00000000 00037eb0              .m.......~..

00037eb0 <set_params>:
   37eb0:	00035070 00036e0c 000359bc 00036e3c     pP...n...Y..<n..
   37ec0:	00035820 00036e80 000350fc 00036eb4      X...n...P...n..
	...

00037ed8 <set_priv_mode_help>:
   37ed8:	00036bf8 00000000 00037ee4              .k.......~..

00037ee4 <set_priv_mode_params>:
   37ee4:	00035070 00036c08 000359bc 00036c48     pP...l...Y..Hl..
   37ef4:	00035348 00036c98 00000000 00000000     HS...l..........

00037f04 <set_scan_opts_help>:
   37f04:	00037090 00000000 00037f10              .p..........

00037f10 <set_scan_opts_params>:
   37f10:	00035360 000370a4 00035394 00036f94     `S...p...S...o..
   37f20:	000353c8 00036f94 00000000 00000000     .S...o..........

00037f30 <set_scan_rsp_help>:
   37f30:	00036cc0 00000000 00037df4              .l.......}..

00037f3c <test_tx_help>:
   37f3c:	000366f0 00000000 00037f48              .f......H...

00037f48 <test_tx_params>:
   37f48:	00034df4 0003670c 00034f08 00036730     .M...g...O..0g..
   37f58:	00034f5c 00036754 00034f80 0003677c     \O..Tg...O..|g..
   37f68:	00034ee4 000367ac 00000000 00000000     .N...g..........

00037f78 <white_list_help>:
   37f78:	00036b6c 00000000 00037f84              lk..........

00037f84 <white_list_params>:
   37f84:	00035070 00036b88 000359bc 00036bc4     pP...k...Y...k..
	...
   37f9c:	61766e69 2064696c 6e6f6327 7473206e     invalid 'conn st
   37fac:	20747261 27646e65 72617020 74656d61     art end' paramet
   37fbc:	000a7265 61766e69 2064696c 69757527     er..invalid 'uui
   37fcc:	70202764 6d617261 72657465 0000000a     d' parameter....
   37fdc:	6f727265 69642072 766f6373 6e697265     error discoverin
   37fec:	68632067 63617261 69726574 63697473     g characteristic
   37ffc:	72203b73 64253d63 0000000a 6f727265     s; rc=%d....erro
   3800c:	69642072 766f6373 6e697265 65642067     r discovering de
   3801c:	69726373 726f7470 72203b73 64253d63     scriptors; rc=%d
   3802c:	0000000a 6f727265 69642072 766f6373     ....error discov
   3803c:	6e697265 65732067 63697672 203b7365     ering services; 
   3804c:	253d6372 00000a64 6f727265 69642072     rc=%d...error di
   3805c:	766f6373 6e697265 6c612067 72203b6c     scovering all; r
   3806c:	64253d63 0000000a 6f727265 78652072     c=%d....error ex
   3807c:	6e616863 676e6967 75746d20 6372203b     changing mtu; rc
   3808c:	0a64253d 00000000 61766e69 2064696c     =%d.....invalid 
   3809c:	74746127 70202772 6d617261 72657465     'attr' parameter
   380ac:	0000000a 61766e69 2064696c 6e6f6c27     ....invalid 'lon
   380bc:	70202767 6d617261 72657465 0000000a     g' parameter....
   380cc:	61766e69 2064696c 61747327 20277472     invalid 'start' 
   380dc:	61726170 6574656d 00000a72 61766e69     parameter...inva
   380ec:	2064696c 646e6527 61702027 656d6172     lid 'end' parame
   380fc:	0a726574 00000000 61766e69 2064696c     ter.....invalid 
   3810c:	66666f27 27746573 72617020 74656d61     'offset' paramet
   3811c:	000a7265 6f727265 65722072 6e696461     er..error readin
   3812c:	68632067 63617261 69726574 63697473     g characteristic
   3813c:	6372203b 0a64253d 00000000 61766e69     ; rc=%d.....inva
   3814c:	2064696c 6e616827 27656c64 72617020     lid 'handle' par
   3815c:	74656d61 000a7265 61766e69 2064696c     ameter..invalid 
   3816c:	73697627 6c696269 27797469 72617020     'visibility' par
   3817c:	74656d61 000a7265 6f727265 69662072     ameter..error fi
   3818c:	6e69646e 6e692067 64756c63 73206465     nding included s
   3819c:	69767265 3b736563 3d637220 000a6425     ervices; rc=%d..
   381ac:	4e4e4f43 49544345 203a4e4f 646e6168     CONNECTION: hand
   381bc:	253d656c 00000a64 61766e69 2064696c     le=%d...invalid 
   381cc:	5f6f6e27 27707372 72617020 74656d61     'no_rsp' paramet
   381dc:	000a7265 61766e69 2064696c 6c617627     er..invalid 'val
   381ec:	20276575 61726170 6574656d 00000a72     ue' parameter...
   381fc:	6f727265 72772072 6e697469 68632067     error writing ch
   3820c:	63617261 69726574 63697473 6372203b     aracteristic; rc
   3821c:	0a64253d 00000000                       =%d.....

00038224 <gatt_svr_chr_sec_test_rand_uuid>:
   38224:	c96df680 16007107 7e45e1b0 3a659e89     ..m..q....E~..e:
   38234:	0000005c                                \...

00038238 <gatt_svr_chr_sec_test_static_auth_uuid>:
   38238:	c96df880 16007107 7e45e1b0 3a659e89     ..m..q....E~..e:
   38248:	0000005c                                \...

0003824c <gatt_svr_chr_sec_test_static_uuid>:
   3824c:	c96df780 16007107 7e45e1b0 3a659e89     ..m..q....E~..e:
   3825c:	0000005c                                \...

00038260 <gatt_svr_inc_svcs>:
   38260:	00000001 10000590 10000660 100005b8     ........`.......
	...

00038280 <gatt_svr_svc_sec_test_uuid>:
   38280:	a2712d80 c858b459 43999912 462f1295     .-q.Y.X....C../F
   38290:	00000059                                Y...

00038294 <gatt_svr_svcs>:
   38294:	00000001 10000160 00000000 10000224     ....`.......$...
   382a4:	00000001 100002e4 00000000 1000045c     ............\...
   382b4:	00000001 00038280 00000000 10000530     ............0...
	...
   382d4:	00007375 00002d3a 6f727245 69203a72     us..:-..Error: i
   382e4:	6c61766e 61206469 6d756772 3a746e65     nvalid argument:
   382f4:	0a732520 00000000 6f727245 74203a72      %s.....Error: t
   38304:	6d206f6f 20796e61 75677261 746e656d     oo many argument
   38314:	00000073 6d6f632e 0000002f 67726f2e     s....com/....org
   38324:	0000002f 7564652e 0000002f 74656e2e     /....edu/....net
   38334:	0000002f 666e692e 00002f6f 7a69622e     /....info/...biz
   38344:	0000002f 766f672e 0000002f 6d6f632e     /....gov/....com
   38354:	00000000 67726f2e 00000000 7564652e     .....org.....edu
   38364:	00000000 74656e2e 00000000 666e692e     .....net.....inf
   38374:	0000006f 7a69622e 00000000 766f672e     o....biz.....gov
   38384:	00000000 70747468 772f2f3a 002e7777     ....http://www..
   38394:	70747468 2f2f3a73 2e777777 00000000     https://www.....
   383a4:	70747468 002f2f3a 70747468 2f2f3a73     http://.https://
   383b4:	00000000                                ....

000383b8 <schemes.22325>:
   383b8:	00038388 00000000 00038394 00000001     ................
   383c8:	000383a4 00000002 000383ac 00000003     ................

000383d8 <suffixes.22329>:
   383d8:	00038318 00000000 00038320 00000001     ........ .......
   383e8:	00038328 00000002 00038330 00000003     (.......0.......
   383f8:	00038338 00000004 00038340 00000005     8.......@.......
   38408:	00038348 00000006 00038350 00000007     H.......P.......
   38418:	00038358 00000008 00038360 00000009     X.......`.......
   38428:	00038368 0000000a 00038370 0000000b     h.......p.......
   38438:	00038378 0000000c 00038380 0000000d     x...............
   38448:	65737341 40207472 25783020 00000a78     Assert @ 0x%x...
   38458:	65737341 40207472 25783020 202d2078     Assert @ 0x%x - 
   38468:	253a7325 00000a64 61686e55 656c646e     %s:%d...Unhandle
   38478:	6e692064 72726574 20747075 646c2528     d interrupt (%ld
   38488:	65202c29 70656378 6e6f6974 20707320     ), exception sp 
   38498:	30257830 0a786c38 00000000 3a307220     0x%08lx..... r0:
   384a8:	30257830 20786c38 3a317220 30257830     0x%08lx  r1:0x%0
   384b8:	20786c38 3a327220 30257830 20786c38     8lx  r2:0x%08lx 
   384c8:	3a337220 30257830 0a786c38 00000000      r3:0x%08lx.....
   384d8:	3a347220 30257830 20786c38 3a357220      r4:0x%08lx  r5:
   384e8:	30257830 20786c38 3a367220 30257830     0x%08lx  r6:0x%0
   384f8:	20786c38 3a377220 30257830 0a786c38     8lx  r7:0x%08lx.
   38508:	00000000 3a387220 30257830 20786c38     .... r8:0x%08lx 
   38518:	3a397220 30257830 20786c38 3a303172      r9:0x%08lx r10:
   38528:	30257830 20786c38 3a313172 30257830     0x%08lx r11:0x%0
   38538:	0a786c38 00000000 3a323172 30257830     8lx.....r12:0x%0
   38548:	20786c38 3a726c20 30257830 20786c38     8lx  lr:0x%08lx 
   38558:	3a637020 30257830 20786c38 3a727370      pc:0x%08lx psr:
   38568:	30257830 0a786c38 00000000 52534349     0x%08lx.....ICSR
   38578:	2578303a 786c3830 53464820 78303a52     :0x%08lx HFSR:0x
   38588:	6c383025 46432078 303a5253 38302578     %08lx CFSR:0x%08
   38598:	000a786c 52414642 2578303a 786c3830     lx..BFAR:0x%08lx
   385a8:	464d4d20 303a5241 38302578 000a786c      MMFAR:0x%08lx..
   385b8:	656c6469 00000000 6e69616d 00000000     idle....main....
   385c8:	7379736d 0000315f                       msys_1..

000385d0 <MemFile_methods>:
   385d0:	0001b4c1 00000000                       ........

000385d8 <stdout>:
   385d8:	10000688 6c363025 00002075 74726175     ....%06lu ..uart
   385e8:	00000030 3d73745b 756c6c25 202c7375     0...[ts=%lluus, 
   385f8:	3d646f6d 6c207525 6c657665 2075253d     mod=%u level=%u 
   38608:	00000000 303d6869 25782578 25782578     ....ih=0x%x%x%x%
   38618:	00000078 736e6f63 00656c6f              x...console.

00038624 <log_console_handler>:
   38624:	00000000 0001c96d 00000000 0001ca49     ....m.......I...
   38634:	0001ca09 00000000 00000000 0001c971     ............q...
   38644:	00000000 0001c975 00000000 6c646f6d     ....u.......modl
   38654:	6d5f676f 69707061 705f676e 006c6f6f     og_mapping_pool.
   38664:	706c6568 0000000a 30332d25 00000073     help....%-30s...
   38674:	30332d25 0a732573 00000000 65726e55     %-30s%s.....Unre
   38684:	6e676f63 64657a69 6d6f6320 646e616d     cognized command
   38694:	0000000a 65726e55 6e676f63 64657a69     ....Unrecognized
   386a4:	6d6f6320 646e616d 7325203a 0000000a      command: %s....
   386b4:	656c6c49 206c6167 75646f6d 2520656c     Illegal module %
   386c4:	00000a73 656c6c49 206c6167 61726170     s...Illegal para
   386d4:	6574656d 00000a72 706c6568 00000000     meter...help....
   386e4:	656c6573 00007463 7373694d 20676e69     select..Missing 
   386f4:	61726170 6574656d 00000a72 206f6e28     parameter...(no 
   38704:	706c6568 61766120 62616c69 0a29656c     help available).
   38714:	00000000 6d6d7553 3a797261 0000000a     ....Summary:....
   38724:	67617355 000a3a65 61726150 6574656d     Usage:..Paramete
   38734:	0a3a7372 00000000 69617641 6c62616c     rs:.....Availabl
   38744:	6f6d2065 656c7564 000a3a73 73206f54     e modules:..To s
   38754:	63656c65 20612074 75646f6d 202c656c     elect a module, 
   38764:	65746e65 73272072 63656c65 6d3c2074     enter 'select <m
   38774:	6c75646f 616e2065 273e656d 00000a2e     odule name>'....
   38784:	0000203e 206f6f54 796e616d 72617020     > ..Too many par
   38794:	74656d61 20737265 78616d28 757a2520     ameters (max %zu
   387a4:	00000a29 65707954 65682720 2027706c     )...Type 'help' 
   387b4:	20726f66 7473696c 20666f20 69617661     for list of avai
   387c4:	6c62616c 6f632065 6e616d6d 000a7364     lable commands..
   387d4:	2078614d 626d756e 6f207265 6f6d2066     Max number of mo
   387e4:	656c7564 65722073 65686361 00000a64     dules reached...
   387f4:	2078614d 626d756e 6f207265 6f632066     Max number of co
   38804:	7461706d 6d6f6320 646e616d 65722073     mpat commands re
   38814:	65686361 00000a64 706d6f63 00007461     ached...compat..
   38824:	656c6c49 206c6167 75646f6d 2520656c     Illegal module %
   38834:	64202c73 75616665 6920746c 6f6e2073     s, default is no
   38844:	68632074 65676e61 00000a64 6c656873     t changed...shel
   38854:	0000006c                                l...

00038858 <shell_cmd_help>:
   38858:	00000001 0001d201 000386dc 00000000     ................

00038868 <shell_cmd_select_module>:
   38868:	00000001 0001cfb1 000386e4 00000000     ................
   38878:	20643425 20783325 000a7325 706d654d     %4d %3x %s..Memp
   38888:	736c6f6f 000a203a 736b6c62 0000007a     ools: ..blksz...
   38898:	73323325 73352520 73342520 73342520     %32s %5s %4s %4s
   388a8:	73342520 0000000a 65657266 00000000      %4s....free....
   388b8:	00746e63 73323325 64352520 64342520     cnt.%32s %5d %4d
   388c8:	64342520 64342520 0000000a 6c756f43      %4d %4d....Coul
   388d8:	74276e64 6e696620 20612064 6f6d656d     dn't find a memo
   388e8:	70207972 206c6f6f 68746977 6d616e20     ry pool with nam
   388f8:	73252065 0000000a 61766e49 2064696c     e %s....Invalid 
   38908:	65746164 656d6974 0000000a 00676c66     datetime....flg.
   38918:	00666572 20733425 20733325 000a7325     ref.%4s %3s %s..
   38928:	6b736154 0a203a73 00000000 00697270     Tasks: .....pri.
   38938:	6b736174 00000000 20733825 20733325     task....%8s %3s 
   38948:	20733325 20733825 20733825 20733825     %3s %8s %8s %8s 
   38958:	20733825 20733825 20733825 0a733325     %8s %8s %8s %3s.
   38968:	00000000 6568636e 00006b63 6568636c     ....ncheck..lche
   38978:	00006b63 756b7473 00006573 736b7473     ck..stkuse..stks
   38988:	0000007a 00777363 746e7572 00656d69     z...csw.runtime.
   38998:	00646974 20733825 20753325 20753325     tid.%8s %3u %3u 
   389a8:	756c3825 6c382520 38252075 38252075     %8lu %8lu %8u %8
   389b8:	38252075 2520756c 0a756c38 00000000     u %8lu %8lu.....
   389c8:	6c756f43 74276e64 6e696620 61742064     Couldn't find ta
   389d8:	77206b73 20687469 656d616e 0a732520     sk with name %s.
   389e8:	00000000 65736572 00000074 6564736c     ....reset...lsde
   389f8:	00000076 7473696c 20534f20 69766564     v...list OS devi
   38a08:	00736563 65736572 79732074 6d657473     ces.reset system
   38a18:	00000000 776f6873 73797320 206d6574     ....show system 
   38a28:	65746164 00000000 65746164 656d6974     date....datetime
   38a38:	206f7420 00746573 776f6873 73797320      to set.show sys
   38a48:	206d6574 6f6f706d 0000006c 6f6f706d     tem mpool...mpoo
   38a58:	616e206c 0000656d 776f6873 20736f20     l name..show os 
   38a68:	6b736174 00000073 6b736174 6d616e20     tasks...task nam
   38a78:	00000065                                e...

00038a7c <date_help>:
   38a7c:	00038a1c 00000000 00038a88              ............

00038a88 <date_params>:
   38a88:	00038930 00038a30 00000000 00000000     0...0...........

00038a98 <ls_dev_help>:
   38a98:	000389fc 00000000 00000000              ............

00038aa4 <mpool_help>:
   38aa4:	00038a40 00000000 00038ab0              @...........

00038ab0 <mpool_params>:
   38ab0:	00038930 00038a54 00000000 00000000     0...T...........

00038ac0 <os_commands>:
   38ac0:	00000001 0001dccd 00038a68 00038b34     ........h...4...
   38ad0:	00000001 0001db3d 00038a4c 00038aa4     ....=...L.......
   38ae0:	00000001 0001dbed 00038a28 00038a7c     ........(...|...
   38af0:	00000001 0001dc81 000389ec 00038b20     ............ ...
   38b00:	00000001 0001dc95 000389f4 00038a98     ................
	...

00038b20 <reset_help>:
   38b20:	00038a0c 00000000 00038b2c              ........,...

00038b2c <reset_params>:
	...

00038b34 <tasks_help>:
   38b34:	00038a60 00000000 00038b40              `.......@...

00038b40 <tasks_params>:
   38b40:	00038930 00038a70 00000000 00000000     0...p...........
   38b50:	74617473 00000000 64343025 3230252d     stat....%04d-%02
   38b60:	30252d64 25546432 3a643230 64323025     d-%02dT%02d:%02d
   38b70:	3230253a 30252e64 00006436 30256325     :%02d.%06d..%c%0
   38b80:	253a6432 00643230                       2d:%02d.

00038b88 <month_days>:
   38b88:	0000001f 0000001c 0000001f 0000001e     ................
   38b98:	0000001f 0000001e 0000001f 0000001f     ................
   38ba8:	0000001e 0000001f 0000001e 0000001f     ................

00038bb8 <streamer_cfg_console>:
   38bb8:	0001e92b 0001e91f 5f656c62 00006c6c     +.......ble_ll..

00038bc8 <g_ble_ll_pdu_header_tx_time>:
   38bc8:	005001ce 02d0002c 5f656c62 635f6c6c     ..P.,...ble_ll_c
   38bd8:	006e6e6f                                onn.

00038bdc <g_ble_ll_ctrl_pkt_lengths>:
   38bdc:	1601070b 0100000c 00000808 17080105     ................
   38bec:	00000217 02020808 00010204 2a010122     ............"..*
   38bfc:	03030f08 0a0a0404 00000a03 5f656c62     ............ble_
   38c0c:	735f6c6c 5f6e6163 5f707564 6c6f6f70     ll_scan_dup_pool
   38c1c:	00000000                                ....

00038c20 <g_ble_ll_supp_cmds>:
   38c20:	00000020 00004000 00000000 22280000      ....@........("
	...
   38c38:	fffff700 0000000f 0ff9f000 07800000     ................
	...

00038c50 <g_ble_sca_ppm_tbl>:
   38c50:	00fa01f4 00640096 0032004b 0014001e     ......d.K.2.....
   38c60:	5f656c62 00747461                       ble_att.

00038c68 <ble_att_rx_dispatch>:
   38c68:	00000001 00026a63 00000002 000280a1     ....cj..........
   38c78:	00000003 00026b0d 00000004 00028135     .....k......5...
   38c88:	00000005 00026ba9 00000006 000281a3     .....k..........
   38c98:	00000007 00026c41 00000008 0002821f     ....Al..........
   38ca8:	00000009 00026cbf 0000000a 000282c5     .....l..........
   38cb8:	0000000b 00026d5b 0000000c 00028343     ....[m......C...
   38cc8:	0000000d 00026d99 0000000e 000283c5     .....m..........
   38cd8:	0000000f 00026de7 00000010 00028403     .....m..........
   38ce8:	00000011 00026e3f 00000012 000284c5     ....?n..........
   38cf8:	00000013 00026f35 00000016 000285ab     ....5o..........
   38d08:	00000017 00026fa1 00000018 0002865d     .....o......]...
   38d18:	00000019 00027009 0000001b 00028711     .....p..........
   38d28:	0000001d 0002874f 0000001e 00027095     ....O........p..
   38d38:	00000052 00028533 5f656c62 5f747461     R...3...ble_att_
   38d48:	5f727673 72746e65 6f705f79 00006c6f     svr_entry_pool..
   38d58:	5f656c62 5f747461 5f727673 70657270     ble_att_svr_prep
   38d68:	746e655f 705f7972 006c6f6f 6e756f63     _entry_pool.coun
   38d78:	64253d74 00000020 72746e65 64252d79     t=%d ...entry-%d
   38d88:	64617b3d 745f7264 3d657079 61206425     ={addr_type=%d a
   38d98:	3d726464 00000000 0000207d 63736964     ddr=....} ..disc
   38da8:	646f6d5f 64253d65 00000000 72696420     _mode=%d.... dir
   38db8:	5f746365 72646461 7079745f 64253d65     ect_addr_type=%d
   38dc8:	72696420 5f746365 72646461 0000003d      direct_addr=...
   38dd8:	76646120 6168635f 6c656e6e 70616d5f      adv_channel_map
   38de8:	2064253d 5f6e776f 72646461 7079745f     =%d own_addr_typ
   38df8:	64253d65 76646120 6c69665f 5f726574     e=%d adv_filter_
   38e08:	696c6f70 253d7963 64612064 74695f76     policy=%d adv_it
   38e18:	6d5f6c76 253d6e69 64612064 74695f76     vl_min=%d adv_it
   38e28:	6d5f6c76 253d7861 00000064 61727564     vl_max=%d...dura
   38e38:	6e6f6974 726f663d 72657665 00000000     tion=forever....
   38e48:	61727564 6e6f6974 6d64253d 00000073     duration=%dms...
   38e58:	5f6e776f 72646461 7079745f 64253d65     own_addr_type=%d
   38e68:	6c696620 5f726574 696c6f70 253d7963      filter_policy=%
   38e78:	61702064 76697373 64253d65 6d696c20     d passive=%d lim
   38e88:	64657469 2064253d 746c6966 645f7265     ited=%d filter_d
   38e98:	696c7075 65746163 64253d73 00000020     uplicates=%d ...
   38ea8:	72656570 6464615f 79745f72 253d6570     peer_addr_type=%
   38eb8:	65702064 615f7265 3d726464 00000000     d peer_addr=....
   38ec8:	61637320 74695f6e 253d6c76 63732064      scan_itvl=%d sc
   38ed8:	775f6e61 6f646e69 64253d77 76746920     an_window=%d itv
   38ee8:	696d5f6c 64253d6e 76746920 616d5f6c     l_min=%d itvl_ma
   38ef8:	64253d78 74616c20 79636e65 2064253d     x=%d latency=%d 
   38f08:	65707573 73697672 5f6e6f69 656d6974     supervision_time
   38f18:	3d74756f 6d206425 635f6e69 656c5f65     out=%d min_ce_le
   38f28:	64253d6e 78616d20 5f65635f 3d6e656c     n=%d max_ce_len=
   38f38:	6f206425 615f6e77 5f726464 65707974     %d own_addr_type
   38f48:	0064253d 6e6e6f63 69746365 70206e6f     =%d.connection p
   38f58:	6d617261 72657465 64707520 3b657461     arameter update;
   38f68:	6e6f6320 61685f6e 656c646e 2064253d      conn_handle=%d 
   38f78:	6c767469 6e696d5f 2064253d 6c767469     itvl_min=%d itvl
   38f88:	78616d5f 2064253d 6574616c 3d79636e     _max=%d latency=
   38f98:	73206425 72657075 69736976 745f6e6f     %d supervision_t
   38fa8:	6f656d69 253d7475 696d2064 65635f6e     imeout=%d min_ce
   38fb8:	6e656c5f 2064253d 5f78616d 6c5f6563     _len=%d max_ce_l
   38fc8:	253d6e65 00000064 20504147 636f7270     en=%d...GAP proc
   38fd8:	72756465 6e692065 61697469 3a646574     edure initiated:
   38fe8:	74657320 69687720 696c6574 203b7473      set whitelist; 
   38ff8:	00000000 20504147 636f7270 72756465     ....GAP procedur
   39008:	6e692065 61697469 3a646574 76646120     e initiated: adv
   39018:	69747265 203b6573 00000000 746e6f63     ertise; ....cont
   39028:	6c6c6f72 72207265 726f7065 20646574     roller reported 
   39038:	61766e69 2064696c 6f727265 6f632072     invalid error co
   39048:	69206564 6f63206e 6f636e6e 656c706d     de in conncomple
   39058:	65206574 746e6576 7525203a 00000000     te event: %u....
   39068:	20504147 636f7270 72756465 6e692065     GAP procedure in
   39078:	61697469 3a646574 6f747320 64612070     itiated: stop ad
   39088:	74726576 6e697369 000a2e67 20504147     vertising...GAP 
   39098:	636f7270 72756465 6e692065 61697469     procedure initia
   390a8:	3a646574 73696420 65766f63 203b7972     ted: discovery; 
   390b8:	00000000 20504147 636f7270 72756465     ....GAP procedur
   390c8:	6e692065 61697469 3a646574 6e6f6320     e initiated: con
   390d8:	7463656e 0000203b 20504147 636f7270     nect; ..GAP proc
   390e8:	72756465 6e692065 61697469 3a646574     edure initiated:
   390f8:	6e616320 206c6563 6e6e6f63 69746365      cancel connecti
   39108:	000a6e6f 20504147 636f7270 72756465     on..GAP procedur
   39118:	6e692065 61697469 3a646574 72657420     e initiated: ter
   39128:	616e696d 63206574 656e6e6f 6f697463     minate connectio
   39138:	63203b6e 5f6e6e6f 646e6168 253d656c     n; conn_handle=%
   39148:	63682064 65725f69 6e6f7361 0a64253d     d hci_reason=%d.
   39158:	00000000 20504147 636f7270 72756465     ....GAP procedur
   39168:	6e692065 61697469 3a646574 00000020     e initiated: ...
   39178:	5f656c62 5f706167 61647075 00006574     ble_gap_update..
   39188:	5f656c62 00706167                       ble_gap.

00039190 <ble_gap_conn_params_dflt>:
   39190:	00100010 00280018 01000000 00000000     ......(.........
   391a0:	54544147 6f727020 75646563 69206572     GATT procedure i
   391b0:	6974696e 64657461 7325203a 00000000     nitiated: %s....
   391c0:	646e6966 636e6920 6564756c 65732064     find included se
   391d0:	63697672 203b7365 00000000 72617473     rvices; ....star
   391e0:	61685f74 656c646e 2064253d 5f646e65     t_handle=%d end_
   391f0:	646e6168 253d656c 00000a64 63736964     handle=%d...disc
   39200:	7265766f 6c6c6120 61686320 74636172     over all charact
   39210:	73697265 73636974 0000203b 63736964     eristics; ..disc
   39220:	7265766f 6c6c6120 73656420 70697263     over all descrip
   39230:	73726f74 0000203b 5f726863 5f6c6176     tors; ..chr_val_
   39240:	646e6168 253d656c 6e652064 61685f64     handle=%d end_ha
   39250:	656c646e 0a64253d 00000000 64616572     ndle=%d.....read
   39260:	0000203b 5f747461 646e6168 253d656c     ; ..att_handle=%
   39270:	00000a64 64616572 6e6f6c20 00203b67     d...read long; .
   39280:	0000002c 64616572 6c756d20 6c706974     ,...read multipl
   39290:	00203b65 5f747461 646e6168 3d73656c     e; .att_handles=
   392a0:	00000000 64257325 00000000 74697277     ....%s%d....writ
   392b0:	6f6e2065 70737220 0000203b 74697277     e no rsp; ..writ
   392c0:	00203b65 5f747461 646e6168 253d656c     e; .att_handle=%
   392d0:	656c2064 64253d6e 0000000a 74697277     d len=%d....writ
   392e0:	6f6c2065 203b676e 00000000 74697277     e long; ....writ
   392f0:	65722065 6261696c 203b656c 00000000     e reliable; ....
   39300:	69746f6e 203b7966 00000000 69646e69     notify; ....indi
   39310:	65746163 0000203b 63736964 7265766f     cate; ..discover
   39320:	72657320 65636976 20796220 64697575      service by uuid
   39330:	7575203b 003d6469 63736964 7265766f     ; uuid=.discover
   39340:	61686320 74636172 73697265 73636974      characteristics
   39350:	20796220 64697575 0000203b 72617473      by uuid; ..star
   39360:	61685f74 656c646e 2064253d 5f646e65     t_handle=%d end_
   39370:	646e6168 253d656c 75752064 003d6469     handle=%d uuid=.
   39380:	64616572 20796220 64697575 0000203b     read by uuid; ..
   39390:	68637865 65676e61 75746d20 0000000a     exchange mtu....
   393a0:	63736964 7265766f 6c6c6120 72657320     discover all ser
   393b0:	65636976 00000a73 5f656c62 74746167     vices...ble_gatt
   393c0:	72705f63 705f636f 006c6f6f 5f656c62     c_proc_pool.ble_
   393d0:	74746167 00000063                       gattc...

000393d8 <ble_gattc_err_dispatch>:
   393d8:	0002aae3 0002ab33 0002ab8f 0002ac33     ....3.......3...
   393e8:	0002ac93 0002acef 0002ad53 0002adf3     ........S.......
   393f8:	0002ae6b 0002aed7 0002af43 0002b229     k.......C...)...
   39408:	0002b2d3 0002b2b3 0002bc1d              ............

00039414 <ble_gattc_resume_dispatch>:
   39414:	00000000 0002b7ad 0002b729 0002b685     ........).......
   39424:	0002b5fd 0002b581 0002b505 00000000     ................
   39434:	00000000 0002b463 00000000 00000000     ....c...........
   39444:	0002b419 0002b387 00000000              ............

00039450 <ble_gattc_rx_exec_entries>:
   39450:	0000000c 0002af91 0000000d 0002affd     ................

00039460 <ble_gattc_rx_prep_entries>:
   39460:	0000000c 0002bf63 0000000d 0002bed7     ....c...........

00039470 <ble_gattc_rx_read_rsp_entries>:
   39470:	00000007 0002adfd 00000009 0002b489     ................
   39480:	00000003 0002be67                       ....g...

00039488 <ble_gattc_rx_read_type_complete_entries>:
   39488:	00000003 0002b6ab 00000004 0002b623     ............#...
   39498:	00000005 0002b5a7 00000008 0002ae75     ............u...

000394a8 <ble_gattc_rx_read_type_elem_entries>:
   394a8:	00000003 0002bd3f 00000004 0002bcc3     ....?...........
   394b8:	00000005 0002bdcd 00000008 0002bbd9     ................

000394c8 <ble_gattc_tmo_dispatch>:
   394c8:	0002aad5 0002ab25 0002ab81 0002ac25     ....%.......%...
   394d8:	0002ac85 0002ace1 0002ad45 0002ade5     ........E.......
   394e8:	0002ae5d 0002aec9 0002af35 0002b21d     ].......5.......
   394f8:	0002af85 0002aff1 0002b1c9 5f656c62     ............ble_
   39508:	74746167 6c635f73 66635f74 6f705f67     gatts_clt_cfg_po
   39518:	00006c6f 5f656c62 74746167 00000073     ol..ble_gatts...
   39528:	6c636e69 64656475 72657320 65636976     included service
   39538:	0000000a 20733225 73323125 0a732520     ....%2s %12s %s.
   39548:	00000000 72747461 6e616820 00656c64     ....attr handle.
   39558:	20733225 73323125 0a642520 00000000     %2s %12s %d.....
   39568:	0000005b 0000007c 72616863 65746361     [...|...characte
   39578:	74736972 000a6369 5f666564 646e6168     ristic..def_hand
   39588:	0000656c 5f6c6176 646e6168 0000656c     le..val_handle..
   39598:	5f6e696d 5f79656b 657a6973 00000000     min_key_size....
   395a8:	20636363 63736564 74706972 000a726f     ccc descriptor..
   395b8:	6f636573 7261646e 00000079 6d697270     secondary...prim
   395c8:	00797261 73207325 69767265 000a6563     ary.%s service..
   395d8:	5f646e65 646e6168 0000656c 44414552     end_handle..READ
   395e8:	00000000 44414552 434e455f 00000000     ....READ_ENC....
   395f8:	44414552 5455415f 004e4548 44414552     READ_AUTHEN.READ
   39608:	5455415f 00524f48 54495257 4e455f45     _AUTHOR.WRITE_EN
   39618:	00000043 54495257 55415f45 4e454854     C...WRITE_AUTHEN
   39628:	00000000 54495257 55415f45 524f4854     ....WRITE_AUTHOR
   39638:	00000000 414f5242 53414344 00000054     ....BROADCAST...
   39648:	54495257 4f4e5f45 5053525f 00000000     WRITE_NO_RSP....
   39658:	49544f4e 00005946 49444e49 45544143     NOTIFY..INDICATE
   39668:	00000000 48545541 4749535f 52575f4e     ....AUTH_SIGN_WR
   39678:	00455449 494c4552 454c4241 4952575f     ITE.RELIABLE_WRI
   39688:	00004554 5f585541 54495257 00000045     TE..AUX_WRITE...

00039698 <ble_gatt_chr_f_names>:
   39698:	0003963c 000395e4 00039648 00039690     <.......H.......
   396a8:	00039658 00039660 0003966c 0003967c     X...`...l...|...
   396b8:	0003968c 000395ec 000395f8 00039604     ................
   396c8:	00039610 0003961c 0003962c 00000000     ........,.......

000396d8 <ble_gatt_dsc_f_names>:
   396d8:	000395e4 00039690 000395ec 000395f8     ................
   396e8:	00039604 00039610 0003961c 0003962c     ............,...
   396f8:	00000000 6c696146 74206465 6572206f     ....Failed to re
   39708:	726f7473 52492065 6620734b 206d6f72     store IRKs from 
   39718:	726f7473 73203b65 75746174 64253d73     store; status=%d
   39728:	0000000a 5f656c62 685f7368 655f6963     ....ble_hs_hci_e
   39738:	6f705f76 00006c6f 5f656c62 00007368     v_pool..ble_hs..
   39748:	5f656c62 635f7368 5f6e6e6f 6c6f6f70     ble_hs_conn_pool
   39758:	00000000                                ....

0003975c <ble_hs_conn_null_addr>:
	...
   39764:	5f656c62 685f7368 665f6963 00676172     ble_hs_hci_frag.

00039774 <ble_hs_hci_evt_dispatch>:
   39774:	0000003e 0002f7f1 00000013 0002f8d5     >...............
   39784:	00000005 0002f8a3 00000008 0002f7d9     ................
   39794:	00000030 0002f7e5 00000010 0002f88f     0...............

000397a4 <ble_hs_hci_evt_le_dispatch>:
   397a4:	00000000 0002fad1 0002f9cd 0002fb5f     ............_...
   397b4:	0002fb4b 0002f883 0002fb37 00000000     K.......7.......
	...
   397cc:	0002fa4b 0002f94b 0002f937 0002f863     K...K...7...c...
   397dc:	0002f867 0002f86b 0002f86f 0002f877     g...k...o...w...
   397ec:	0002f87b 0002f87f 00000000 00000000     {...............
	...
   39804:	0002f873 65766461 73697472 74207265     s...advertiser t
   39814:	72777078 74756f20 20666f20 676e6172     xpwr out of rang
   39824:	00000a65 6c696166 74206465 6f63206f     e...failed to co
   39834:	6769666e 20657275 74736572 6465726f     nfigure restored
   39844:	4b524920 0000000a                        IRK....

0003984c <ble_hs_misc_null_addr>:
	...
   39854:	16e28def 0d43ec4f 34dd5bbf b81e53c0     ....O.C..[.4.S..
   39864:	00000000 5f656c62 735f7368 3a706f74     ....ble_hs_stop:
   39874:	69616620 2064656c 74206f74 696d7265      failed to termi
   39884:	6574616e 6e6f6320 7463656e 3b6e6f69     nate connection;
   39894:	3d637220 000a6425 5f656c62 735f7368      rc=%d..ble_hs_s
   398a4:	5f706f74 6d726574 74616e69 69745f65     top_terminate_ti
   398b4:	756f656d 62635f74 2064252c 6e6e6f63     meout_cb,%d conn
   398c4:	69746365 73286e6f 74732029 206c6c69     ection(s) still 
   398d4:	0a207075 00000000 5f656c62 6163326c     up .....ble_l2ca
   398e4:	68635f70 705f6e61 006c6f6f 5f656c62     p_chan_pool.ble_
   398f4:	6163326c 00000070 5f656c62 6163326c     l2cap...ble_l2ca
   39904:	69735f70 72705f67 705f636f 006c6f6f     p_sig_proc_pool.

00039914 <ble_l2cap_sig_dispatch>:
   39914:	00000000 00030bad 00000000 00030a45     ............E...
   39924:	00000000 00030a45 00030a45 00030a45     ....E...E...E...
   39934:	00000000 00030a45 00000000 00030a45     ....E.......E...
   39944:	00000000 00030a45 00000000 00030a45     ....E.......E...
   39954:	00000000 00030a45 00030c91 00030bc1     ....E...........
   39964:	00030a45 00030a45 00030a45 00030a45     E...E...E...E...
   39974:	00030a45 00030a45 00030a45 30257830     E...E...E...0x%0
   39984:	00786834 30257830 00786c38 78323025     4hx.0x%08lx.%02x
   39994:	78323025 78323025 78323025 3230252d     %02x%02x%02x-%02
   399a4:	32302578 30252d78 30257832 252d7832     x%02x-%02x%02x-%
   399b4:	25783230 2d783230 78323025 78323025     02x%02x-%02x%02x
   399c4:	78323025 78323025 78323025 78323025     %02x%02x%02x%02x
   399d4:	00000000                                ....

000399d8 <ble_uuid_base>:
   399d8:	5f9b34fb 80000080 00001000 00000000     .4._............

000399e8 <ble_svc_ans_defs>:
   399e8:	00000001 10000718 00000000 10000730     ............0...
	...

00039a08 <ble_svc_gap_defs>:
   39a08:	00000001 100007c0 00000000 100007cc     ................
	...

00039a28 <ble_svc_gatt_defs>:
   39a28:	00000001 10000834 00000000 1000083c     ....4.......<...
	...
   39a48:	5f656c62 5f696368 5f6d6172 5f646d63     ble_hci_ram_cmd_
   39a58:	6c6f6f70 00000000 5f656c62 5f696368     pool....ble_hci_
   39a68:	5f6d6172 5f747665 705f6968 006c6f6f     ram_evt_hi_pool.
   39a78:	5f656c62 5f696368 5f6d6172 5f747665     ble_hci_ram_evt_
   39a88:	705f6f6c 006c6f6f                       lo_pool.

00039a90 <sysdown_cbs>:
   39a90:	00034331 00000000                       1C......

00039a98 <sysflash_map_dflt>:
   39a98:	00000000 000c0000 00008000 00000001     ................
   39aa8:	00014000 00038000 00000002 0004c000     .@..............
   39ab8:	00038000 00000003 00084000 00002000     .........@... ..
   39ac8:	00000010 00086000 00004000 00000011     .....`...@......
   39ad8:	0008a000 00004000 68323025 00007868     .....@..%02hhx..
   39ae8:	00006325 0063255c 3025755c 5c586c34     %c..\%c.\u%04lX\
   39af8:	34302575 0000586c 3025755c 00586c34     u%04lX..\u%04lX.
   39b08:	0000007b 0000007d 736c6166 00000065     {...}...false...
   39b18:	65757274 00000000 0000205f 756c6c25     true...._ ..%llu
   39b28:	00000000 6c6c252d 00000075 3438312d     ....-%llu...-184
   39b38:	34373634 33373034 35393037 31363135     4674407370955161
   39b48:	00000036 00002768 00000027 00000022     6...h'..'..."...
   39b58:	756c6c25 00000028 00000029 706d6973     %llu(...)...simp
   39b68:	2528656c 29756868 00000000 6c6c756e     le(%hhu)....null
   39b78:	00000000 65646e75 656e6966 00000064     ....undefined...
   39b88:	61766e69 0064696c 0000202c              invalid., ..

00039b94 <apollo3_flash_dev>:
   39b94:	00039bac 00000000 00100000 00000080     ................
   39ba4:	00000001 000000ff                       ........

00039bac <apollo3_flash_funcs>:
   39bac:	000334c1 00033415 000333b1 0003339d     .4...4...3...3..
   39bbc:	00000000 000333ab 00000000              .....3......

00039bc8 <apollo3_timer_tbl_hfrc>:
   39bc8:	00002ee0 0000000a 0000b798 00000008     ................
   39bd8:	0002dc6c 00000006 002dc6c0 00000004     l.........-.....
   39be8:	00b71b00 00000002 00000000 00000000     ................

00039bf8 <apollo3_timer_tbl_lfrc>:
   39bf8:	00000001 00000018 00000020 00000016     ........ .......
   39c08:	00000200 00000014 00000400 0000001a     ................
	...

00039c20 <apollo3_timer_tbl_xt>:
   39c20:	00000100 00000012 00000800 00000010     ................
   39c30:	00004000 0000000e 00008000 0000000c     .@..............
	...

00039c48 <g_ui32TMRAddrTbl>:
   39c48:	40008000 40008020 40008040 40008060     ...@ ..@@..@`..@
   39c58:	40008080 400080a0 400080c0 400080e0     ...@...@...@...@

00039c68 <g_ui8TmrClkSrcMask>:
   39c68:	01030f0f 00000101 00000000 00000000     ................
   39c78:	00000000 0f0f0f0f 0f0f0f0f 0000000f     ................
   39c88:	5f656c62 735f7368 64747568 3a6e776f     ble_hs_shutdown:
   39c98:	69616620 2064656c 73206f74 20706f74      failed to stop 
   39ca8:	74736f68 6372203b 0a64253d 00000000     host; rc=%d.....

/Users/tianzeng/Documents/workspace/playground/bin/targets/ble_test_target/app/apps/btshell/btshell.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 154800	   1968	  22256	 179024	  2bb50	/Users/tianzeng/Documents/workspace/playground/bin/targets/ble_test_target/app/apps/btshell/btshell.elf
