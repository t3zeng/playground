
/Users/tianzeng/Documents/workspace/playground/bin/targets/ble_test_target/app/apps/bleprph/bleprph.elf:     file format elf32-littlearm
/Users/tianzeng/Documents/workspace/playground/bin/targets/ble_test_target/app/apps/bleprph/bleprph.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00014121

Program Header:
0x70000001 off    0x00023c04 vaddr 0x00033c04 paddr 0x00033c04 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00010000 paddr 0x00010000 align 2**16
         filesz 0x00023c1c memsz 0x00023c1c flags rwx
    LOAD off    0x00030100 vaddr 0x10000100 paddr 0x00033c1c align 2**16
         filesz 0x00001a34 memsz 0x00001a34 flags rw-
    LOAD off    0x00031b38 vaddr 0x10001b38 paddr 0x00035650 align 2**16
         filesz 0x00000000 memsz 0x000037d8 flags rw-
    LOAD off    0x00040000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x00000000 memsz 0x00000100 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00014000  00014000  00004000  2**0  ALLOC
  1 .text              0001fbe4  00014020  00014020  00004020  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  00033c04  00033c04  00031b34  2**0  CONTENTS
  3 .ARM.exidx         00000018  00033c04  00033c04  00023c04  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 00000100  10000000  10000000  00040000  2**0  ALLOC
  5 .data              00001a34  10000100  00033c1c  00030100  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bss               000037d8  10001b38  00035650  00031b38  2**3  ALLOC
  7 .stack_dummy       000001b0  10005310  10005310  00031b38  2**3  CONTENTS, READONLY
  8 .ARM.attributes    0000002a  00000000  00000000  00031ce8  2**0  CONTENTS, READONLY
  9 .comment           00000079  00000000  00000000  00031d12  2**0  CONTENTS, READONLY
 10 .svc_table         00000004  00000000  00000000  00031d8b  2**0  CONTENTS, READONLY
 11 .debug_line        00068256  00000000  00000000  00031d8f  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_info        001402e3  00000000  00000000  00099fe5  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev      00020a51  00000000  00000000  001da2c8  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges     00005148  00000000  00000000  001fad20  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_str         000212bc  00000000  00000000  001ffe68  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges      00005400  00000000  00000000  00221124  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame       0000e7e4  00000000  00000000  00226524  2**2  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00050267  00000000  00000000  00234d08  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00014000 l    d  .imghdr	00000000 .imghdr
00014020 l    d  .text	00000000 .text
00033c04 l    d  .ARM.extab	00000000 .ARM.extab
00033c04 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .vector_relocation	00000000 .vector_relocation
10000100 l    d  .data	00000000 .data
10001b38 l    d  .bss	00000000 .bss
10005310 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 gcc_startup_apollo3.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
000140e0 l       .text	00000000 __ble_patch
00014128 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 HAL_CM4.o
000141e0 l       .text	00000000 SVC_User
000141fe l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 system_apollo3.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 sbrk.c
10001b38 l     O .bss	00000004 brk
10001b3c l     O .bss	00000004 sbrk_base
10001b40 l     O .bss	00000004 sbrk_limit
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
00014708 l     F .text	00000014 bleprph_on_reset
0001471c l     F .text	000000dc bleprph_advertise
000148b4 l     F .text	000001d8 bleprph_gap_event
000147f8 l     F .text	00000024 bleprph_on_sync
0001481c l     F .text	00000098 bleprph_print_conn_desc
10001b44 l     O .bss	00000019 ver_str.22246
00000000 l    df *ABS*	00000000 misc.c
00000000 l    df *ABS*	00000000 gatt_svr.c
00014b30 l     F .text	00000026 gatt_svr_chr_write
00014b58 l     F .text	000000b0 gatt_svr_chr_access_sec_test
10001b5d l     O .bss	00000001 gatt_svr_sec_test_static_val
10000104 l     O .data	00000048 __compound_literal.0
00030474 l     O .text	00000011 gatt_svr_chr_sec_test_rand_uuid
00030488 l     O .text	00000011 gatt_svr_chr_sec_test_static_uuid
0003049c l     O .text	00000011 gatt_svr_svc_sec_test_uuid
000304b0 l     O .text	00000020 gatt_svr_svcs
00000000 l    df *ABS*	00000000 ble_test_target-sysinit-app.c
00000000 l    df *ABS*	00000000 split.c
10001b5e l     O .bss	00000001 split_app_active
10001b5f l     O .bss	00000001 split_mode_cur
1000014c l     O .data	00000024 split_scfg
000304e0 l     O .text	00000020 __compound_literal.0
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
00014f04 l     F .text	0000001e os_main
10001bb0 l     O .bss	00000100 g_idle_task_stack
10001cb8 l     O .bss	00000800 g_os_main_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_dev.c
00015270 l     F .text	00000060 os_dev_add
000152d0 l     F .text	00000022 os_dev_initialize
000152f2 l     F .text	00000024 os_dev_init
10002514 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
1000251c l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
00015d48 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
00015eb8 l     F .text	00000010 os_msys_find_biggest_pool
00015ec8 l     F .text	0000002c os_msys_find_pool
00015f40 l     F .text	00000058 os_msys_init_once
10002534 l     O .bss	000009a0 os_msys_1_data
10002ed4 l     O .bss	0000000c os_msys_1_mbuf_pool
10002ee0 l     O .bss	0000001c os_msys_1_mempool
10000170 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_sanity.c
00016000 l     F .text	00000020 os_sanity_check_list_lock
00016020 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_task.c
00016394 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
000164f8 l     F .text	00000044 os_deltatime
0001653c l     F .text	00000064 os_time_tick
10002f20 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
0001670c l     F .text	00000002 os_arch_task_return_handler
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 lrand48.c
00000000 l    df *ABS*	00000000 memcmp.c
00016aa4 l       .text	00000000 test1
00016a98 l       .text	00000000 loop1
00016aaa l       .text	00000000 res1
00016ac6 l       .text	00000000 test2
00016ace l       .text	00000000 done
00016aba l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
00016ada l       .text	00000000 test1
00016ad6 l       .text	00000000 loop1
00016ae8 l       .text	00000000 test2
00016ae4 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncat.c
00000000 l    df *ABS*	00000000 jrand48.c
00000000 l    df *ABS*	00000000 imgmgr.c
00016c58 l     F .text	0000005c imgr_erase_state
10000188 l     O .data	0000000c imgr_mgmt_group
0003068c l     O .text	00000038 imgr_mgmt_handlers
00000000 l    df *ABS*	00000000 imgmgr_util.c
00000000 l    df *ABS*	00000000 smp.c
00016d1c l     F .text	0000000c smp_free_buf
00016d28 l     F .text	00000010 smp_init_writer
00016d38 l     F .text	00000012 smp_init_reader
00016d4a l     F .text	00000028 smp_write_at
00016d72 l     F .text	00000010 smp_reset_buf
00016d82 l     F .text	00000008 smp_trim_front
00016d8a l     F .text	0000002c smp_alloc_rsp
00016db6 l     F .text	00000024 smp_rsp_frag_alloc
00016e20 l     F .text	0000004c smp_process_packet
00016e6c l     F .text	0000000a smp_event_data_in
00000000 l    df *ABS*	00000000 smp_ble.c
00016f04 l     F .text	00000028 smp_ble_out
00016f2c l     F .text	00000040 smp_ble_event_data_in
00016f6c l     F .text	00000090 gatt_svr_chr_access_smp
10000194 l     O .data	00000030 __compound_literal.0
000306fc l     O .text	00000011 gatt_svr_chr_smp
00030710 l     O .text	00000011 gatt_svr_svc_smp
00030724 l     O .text	00000020 gatt_svr_svcs
00000000 l    df *ABS*	00000000 config_init.c
00017094 l     F .text	000000e4 config_init_fcb
10002fb4 l     O .bss	0000006c conf_fcb_area
100001c4 l     O .data	00000038 config_init_conf_fcb
00000000 l    df *ABS*	00000000 config_store.c
000171a6 l     F .text	0000003c conf_dup_check_cb
000171e2 l     F .text	0000001c conf_load_cb
00017308 l     F .text	00000008 conf_store_one
10003024 l     O .bss	00000001 conf_loaded
10003025 l     O .bss	00000001 conf_loading
00000000 l    df *ABS*	00000000 config.c
0001737c l     F .text	00000032 conf_get_cb
000173ae l     F .text	00000028 conf_set_cb
000173d6 l     F .text	00000020 conf_commit_cb
000173f6 l     F .text	00000008 conf_ev_fn_load
10003030 l     O .bss	0000000c conf_mtx
100001fc l     O .data	00000010 conf_ev_load
00000000 l    df *ABS*	00000000 config_fcb.c
00017834 l     F .text	00000024 conf_fcb_load
00017858 l     F .text	00000044 conf_fcb_load_cb
0001789c l     F .text	0000002c conf_fcb_var_read
000178c8 l     F .text	000000d6 conf_fcb_compress_internal
0001799e l     F .text	00000066 conf_fcb_append
00017aa2 l     F .text	0000000a conf_fcb_save
1000020c l     O .data	00000010 conf_fcb_itf
00000000 l    df *ABS*	00000000 config_line.c
00000000 l    df *ABS*	00000000 config_mgmt.c
00017ba0 l     F .text	000000b8 conf_mgmt_write
00017c58 l     F .text	0000007c conf_mgmt_read
1000021c l     O .data	0000000c conf_mgmt_group
00030764 l     O .text	00000008 conf_mgmt_handlers
00000000 l    df *ABS*	00000000 console.c
00017ce4 l     F .text	0000004c add_ascii_num_with_char
00017d30 l     F .text	0000003c console_handle_line
00017d6c l     F .text	0000003c console_filter_out
00017da8 l     F .text	0000001e console_filter_write
00017dc8 l     F .text	00000044 console_append_char
00017e0c l     F .text	0000001e console_write_nolock
00017e2c l     F .text	00000050 handle_end
00017e7c l     F .text	00000050 handle_home
00017ecc l     F .text	00000068 del_char
00017f34 l     F .text	00000020 handle_delete
00017f54 l     F .text	00000190 handle_ansi
000180e4 l     F .text	00000058 handle_backspace
0001813c l     F .text	0000005c console_clear_line
00018198 l     F .text	000000a8 insert_char
0001824c l     F .text	0000000a console_nlip_enable_echo
00018256 l     F .text	0000000a console_nlip_disable_echo
00018260 l     F .text	00000104 handle_nlip
1000303c l     O .bss	00000004 ansi_val
10003040 l     O .bss	00000004 ansi_val_2
10003044 l     O .bss	00000010 avail_queue
10003054 l     O .bss	00000004 completion
10003058 l     O .bss	00000004 console_compat_rx_cb
10003060 l     O .bss	0000000c console_write_lock
1000306c l     O .bss	00000002 cur
10003070 l     O .bss	00000004 current_line_ev
10003074 l     O .bss	00000004 esc_state
1000307c l     O .bss	00000004 lines_queue
10003080 l     O .bss	00000004 nlip_state
10003084 l     O .bss	00000001 prev_endl.19772
10003085 l     O .bss	00000001 rx_stalled
10003086 l     O .bss	00000002 trailing_chars
10000228 l     O .data	00000004 echo
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
1000022c l     O .data	00000001 do_ticks
00000000 l    df *ABS*	00000000 uart_console.c
000186a8 l     F .text	00000008 uart_blocking_tx
000186b0 l     F .text	00000014 uart_console_ring_add_char
000186c4 l     F .text	00000014 uart_console_ring_pull_char
000186d8 l     F .text	00000016 uart_console_ring_is_full
000186ee l     F .text	0000000e uart_console_ring_is_empty
000186fc l     F .text	00000030 uart_console_tx_flush
0001872c l     F .text	0000001c uart_console_tx_char
00018748 l     F .text	00000058 uart_console_queue_char
000187a0 l     F .text	00000044 uart_console_rx_char
000187e4 l     F .text	00000074 uart_console_rx_char_event
10003088 l     O .bss	00000008 cr_rx
10003090 l     O .bss	00000020 cr_rx_buf
100030b0 l     O .bss	00000008 cr_tx
100030b8 l     O .bss	00000020 cr_tx_buf
100030e8 l     O .bss	00000001 uart_console_rx_stalled
100030ec l     O .bss	00000004 uart_dev
100030f0 l     O .bss	00000004 write_char_cb
10000230 l     O .data	00000004 b.19620
00000000 l    df *ABS*	00000000 flash_map.c
0001896c l     F .text	00000038 flash_area_find_idx
000189a4 l     F .text	00000058 flash_map_area_overlaps
000189fc l     F .text	00000080 flash_map_add_new_dflt_areas
00000000 l    df *ABS*	00000000 id.c
00018c74 l     F .text	00000074 id_conf_export
00018ce8 l     F .text	000000a0 id_conf_get
00018d88 l     F .text	00000034 id_conf_set
00018dbc l     F .text	00000060 id_read_mfghash
00000000 l    df *ABS*	00000000 log.c
00018e70 l     F .text	00000028 log_module_find_idx
00018e98 l     F .text	0000001c log_registered
00018eb4 l     F .text	0000000c log_chk_type
00018ec0 l     F .text	00000014 log_chk_max_entry_len
00018ed4 l     F .text	00000016 log_call_append_cb
00018ef0 l     F .text	00000138 log_append_prepare
00019134 l     F .text	0000003c log_read_last_hdr
0001935a l     F .text	00000040 log_read_hdr_walk
000192c6 l     F .text	0000004a log_walk_body_fn
100031a0 l     O .bss	00000004 g_log_module_count
100031a4 l     O .bss	00000008 g_log_module_list
100031ac l     O .bss	00000001 log_written
1000025c l     O .data	00000008 g_log_list
00000000 l    df *ABS*	00000000 log_console.c
0001939a l     F .text	00000004 log_console_read
0001939e l     F .text	00000004 log_console_walk
000193a2 l     F .text	00000004 log_console_flush
000193a8 l     F .text	00000048 log_console_print_hdr
000193f0 l     F .text	00000048 log_console_dump_cbor_entry
00019438 l     F .text	00000040 log_console_append_body
00019478 l     F .text	0000001c log_console_append
100031b0 l     O .bss	0000001c log_console
00000000 l    df *ABS*	00000000 log_level.c
100031cc l     O .bss	00000080 log_level_map
00000000 l    df *ABS*	00000000 modlog.c
00019518 l     F .text	00000028 modlog_find_by_module
00019540 l     F .text	0000003c modlog_insert
0001957c l     F .text	0000001c modlog_alloc
00019598 l     F .text	00000058 modlog_infer_handle
000195f0 l     F .text	00000046 modlog_register_no_lock
00019636 l     F .text	0000002a modlog_append_one
00019660 l     F .text	00000084 modlog_append_no_lock
1000324c l     O .bss	00000004 modlog_first_dflt
10003250 l     O .bss	000000c0 modlog_mapping_buf
1000332c l     O .bss	00000004 modlog_mappings
10003330 l     O .bss	00000024 modlog_rwl
00000000 l    df *ABS*	00000000 mfg.c
0001985c l     F .text	00000090 mfg_seek_next_aux
000198ec l     F .text	0000006c mfg_read_mmr
00019958 l     F .text	00000050 mfg_read_next_mmr
000199a8 l     F .text	00000040 mfg_open_flash_area
000199e8 l     F .text	0000003e mfg_read_tlv_body
00019ab8 l     F .text	00000042 mfg_read_mmr_refs
10003354 l     O .bss	00000001 mfg_initialized
10003358 l     O .bss	00000018 mfg_mmrs
10003370 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 log_reboot.c
00019afc l     F .text	00000048 reboot_conf_export
00019b44 l     F .text	00000054 reboot_conf_get
00019b98 l     F .text	00000054 reboot_conf_set
00019bec l     F .text	0000009c log_reboot_init_fcb
00019c88 l     F .text	00000014 log_reboot_init_console
00019d28 l     F .text	00000284 log_reboot_write
10003374 l     O .bss	00000001 log_reboot_written
10003378 l     O .bss	0000001c reboot_log
10003394 l     O .bss	00000034 reboot_log_fcb
100033c8 l     O .bss	0000000c reboot_sector
100033d4 l     O .bss	00000020 str_reason.20394
00000000 l    df *ABS*	00000000 stats.c
0001a080 l     F .text	00000010 stats_offset
0001a090 l     F .text	0000004c stats_register_internal
0001a174 l     F .text	00000038 stats_module_init_internal
00000000 l    df *ABS*	00000000 sysinit.c
0001a26c l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 rwlock.c
0001a304 l     F .text	0000000c rwlock_complete_handoff
0001a310 l     F .text	0000001a rwlock_read_must_block
0001a32a l     F .text	00000016 rwlock_write_must_block
0001a340 l     F .text	0000003a rwlock_unblock
00000000 l    df *ABS*	00000000 scfg.c
0001a49c l     F .text	00000016 scfg_find_setting_by_val
0001a4b2 l     F .text	0000005e scfg_setting_id
0001a510 l     F .text	00000040 scfg_handler_export
0001a550 l     F .text	0000001a scfg_find_setting_by_name
0001a56a l     F .text	00000026 scfg_handler_get
0001a590 l     F .text	00000036 scfg_handler_set
00000000 l    df *ABS*	00000000 cborattr.c
0001a68c l     F .text	0000006c valid_attr_type
0001a6f8 l     F .text	0000004c cbor_target_address
0001a93c l     F .text	000002ea cbor_internal_read_object
00000000 l    df *ABS*	00000000 img_mgmt.c
0001ac32 l     F .text	0000003a img_mgmt_find_tlvs
0001ac6c l     F .text	0000004c img_mgmt_upload_good_rsp
0001adf4 l     F .text	00000036 img_mgmt_upload_log
0001ae7c l     F .text	00000058 img_mgmt_erase
0001aefc l     F .text	00000220 img_mgmt_upload
1000343c l     O .bss	00000004 img_mgmt_upload_arg
10003440 l     O .bss	00000004 img_mgmt_upload_cb
10000290 l     O .data	0000000c img_mgmt_group
000309cc l     O .text	00000030 img_mgmt_handlers
00000000 l    df *ABS*	00000000 img_mgmt_state.c
00000000 l    df *ABS*	00000000 img_mgmt_util.c
00000000 l    df *ABS*	00000000 mynewt_img_mgmt.c
0001b52e l     F .text	00000040 img_mgmt_vercmp
0001b56e l     F .text	00000048 img_mgmt_find_best_area_id
00000000 l    df *ABS*	00000000 mynewt_img_mgmt_log.c
0001b95c l     F .text	00000004 img_mgmt_log_gen
00000000 l    df *ABS*	00000000 mynewt_log_mgmt.c
0001b9b0 l     F .text	00000020 mynewt_log_mgmt_find_log
0001b9d0 l     F .text	000000da mynewt_log_mgmt_walk_cb
00000000 l    df *ABS*	00000000 os_mgmt.c
0001bbf8 l     F .text	0000000a os_mgmt_reset
0001bc04 l     F .text	00000144 os_mgmt_taskstat_encode_one
0001bd48 l     F .text	00000070 os_mgmt_taskstat_read
0001bdb8 l     F .text	00000074 os_mgmt_echo
1000029c l     O .data	0000000c os_mgmt_group
00030ae8 l     O .text	00000030 os_mgmt_group_handlers
00000000 l    df *ABS*	00000000 mynewt_os_mgmt.c
0001be44 l     F .text	0000001c mynewt_os_mgmt_task_at
0001be60 l     F .text	00000014 mynewt_os_mgmt_stack_usage
0001be74 l     F .text	0000000a mynewt_os_mgmt_reset_tmo
10003444 l     O .bss	00000020 mynewt_os_mgmt_reset_callout
00000000 l    df *ABS*	00000000 mynewt_stat_mgmt.c
0001bf28 l     F .text	00000042 mynewt_stat_mgmt_walk_cb
00000000 l    df *ABS*	00000000 mgmt.c
0001bfe0 l     F .text	00000050 mgmt_find_group
10003464 l     O .bss	00000004 evt_cb
10003468 l     O .bss	00000004 mgmt_group_list
1000346c l     O .bss	00000004 mgmt_group_list_end
00000000 l    df *ABS*	00000000 smp.c
0001c17c l     F .text	0000001a smp_align4
0001c196 l     F .text	0000000a smp_rsp_op
0001c1a0 l     F .text	0000002a smp_init_rsp_hdr
0001c1ca l     F .text	0000001a smp_read_hdr
0001c1e4 l     F .text	00000076 smp_handle_single_payload
0001c25a l     F .text	00000012 smp_write_hdr
0001c26c l     F .text	0000005e smp_handle_single_req
0001c2ca l     F .text	0000006e smp_build_err_rsp
0001c338 l     F .text	0000004c smp_on_err
00000000 l    df *ABS*	00000000 mcumgr_util.c
00000000 l    df *ABS*	00000000 ble_att.c
0001c500 l     F .text	00000028 ble_att_rx_dispatch_entry_find
0001c528 l     F .text	000001f4 ble_att_inc_rx_stat
0001c71c l     F .text	00000032 ble_att_rx_handle_unknown_request
0001c74e l     F .text	00000084 ble_att_rx
10003470 l     O .bss	00000002 ble_att_preferred_mtu_val
00030b20 l     O .text	000000d8 ble_att_rx_dispatch
00000000 l    df *ABS*	00000000 ble_att_clt.c
00000000 l    df *ABS*	00000000 ble_att_cmd.c
00000000 l    df *ABS*	00000000 ble_att_svr.c
0001cc98 l     F .text	00000010 ble_att_svr_next_id
0001cca8 l     F .text	00000024 ble_att_svr_prep_find_prev
0001cccc l     F .text	0000005c ble_att_svr_prep_validate
0001cd28 l     F .text	00000020 ble_att_svr_entry_alloc
0001cd48 l     F .text	0000001a ble_att_svr_get_sec_state
0001cd62 l     F .text	0000010c ble_att_svr_check_perms
0001ce6e l     F .text	00000062 ble_att_svr_read
0001ced0 l     F .text	00000064 ble_att_svr_write
0001cf34 l     F .text	00000018 ble_att_svr_pullup_req_base
0001cf4c l     F .text	0000006e ble_att_svr_build_mtu_rsp
0001cfba l     F .text	00000024 ble_att_svr_pkt
0001cfde l     F .text	00000032 ble_att_svr_build_write_rsp
0001d010 l     F .text	00000032 ble_att_svr_build_indicate_rsp
0001d044 l     F .text	0000009c ble_att_svr_fill_info
0001d0e0 l     F .text	0000005e ble_att_svr_build_find_info_rsp
0001d13e l     F .text	00000050 ble_att_svr_read_group_type_entry_write
0001d18e l     F .text	00000024 ble_att_svr_is_valid_find_group_type
0001d1b2 l     F .text	00000058 ble_att_svr_is_valid_group_end
0001d20a l     F .text	00000016 ble_att_svr_is_valid_read_group_type
0001d220 l     F .text	0000005c ble_att_svr_read_flat
0001d27c l     F .text	0000005c ble_att_svr_fill_type_value_entry
0001d2d8 l     F .text	000000e8 ble_att_svr_fill_type_value
0001d3c0 l     F .text	0000005e ble_att_svr_build_find_type_value_rsp
0001d41e l     F .text	00000034 ble_att_svr_service_uuid
0001d454 l     F .text	00000178 ble_att_svr_build_read_group_type_rsp
0001d5cc l     F .text	0000001c ble_att_svr_prep_free
0001d5e8 l     F .text	0000003c ble_att_svr_prep_alloc
0001d624 l     F .text	0000007a ble_att_svr_insert_prep_entry
0001d69e l     F .text	00000048 ble_att_svr_prep_extract
0001d6e8 l     F .text	00000014 ble_att_svr_free_start_mem
0001d770 l     F .text	00000030 ble_att_svr_write_handle
0001d7a0 l     F .text	00000064 ble_att_svr_prep_write
0001d83c l     F .text	0000013e ble_att_svr_build_read_type_rsp
0001d9c0 l     F .text	000000a4 ble_att_svr_build_read_mult_rsp
0001da94 l     F .text	000000ac ble_att_svr_tx_rsp
10003558 l     O .bss	00000004 ble_att_svr_entry_mem
1000355c l     O .bss	0000001c ble_att_svr_entry_pool
10003578 l     O .bss	00000008 ble_att_svr_hidden_list
10003580 l     O .bss	00000002 ble_att_svr_id
10003584 l     O .bss	00000008 ble_att_svr_list
1000358c l     O .bss	00000300 ble_att_svr_prep_entry_mem
1000388c l     O .bss	0000001c ble_att_svr_prep_entry_pool
00000000 l    df *ABS*	00000000 ble_gap.c
0001e2d8 l     F .text	0000002a ble_gap_call_event_cb
0001e304 l     F .text	00000024 ble_gap_is_preempted
0001e328 l     F .text	00000010 ble_gap_has_client
0001e338 l     F .text	00000012 ble_gap_update_to_l2cap
0001e34c l     F .text	00000014 ble_gap_adv_active_instance
0001e360 l     F .text	00000020 ble_gap_accept_master_conn
0001e380 l     F .text	0000003c ble_gap_accept_slave_conn
0001e3bc l     F .text	00000028 ble_gap_adv_type
0001e3e4 l     F .text	00000032 ble_gap_adv_dflt_itvls
0001e418 l     F .text	00000024 ble_gap_update_entry_find
0001e43c l     F .text	00000046 ble_gap_validate_conn_params
0001e484 l     F .text	00000020 ble_gap_event_listener_call
0001e4a4 l     F .text	00000034 ble_gap_extract_conn_cb
0001e4d8 l     F .text	00000022 ble_gap_call_conn_event_cb
0001e4fa l     F .text	0000009a ble_gap_fill_conn_desc
0001e594 l     F .text	00000016 ble_gap_conn_to_snapshot
0001e5aa l     F .text	00000028 ble_gap_find_snapshot
0001e5d2 l     F .text	0000001e ble_gap_rd_rem_sup_feat_tx
0001e5f0 l     F .text	0000001a ble_gap_conn_cancel_tx
0001e60a l     F .text	00000024 ble_gap_adv_enable_tx
0001e62e l     F .text	00000094 ble_gap_adv_params_tx
0001e6c2 l     F .text	00000042 ble_gap_tx_param_pos_reply
0001e704 l     F .text	00000022 ble_gap_tx_param_neg_reply
0001e726 l     F .text	00000042 ble_gap_update_tx
0001e768 l     F .text	00000030 ble_gap_update_entry_remove
0001e798 l     F .text	00000020 ble_gap_slave_reset_state
0001e7b8 l     F .text	0000002c ble_gap_slave_extract_cb
0001e7e4 l     F .text	00000038 ble_gap_adv_finished
0001e81c l     F .text	00000028 ble_gap_master_reset_state
0001e844 l     F .text	00000030 ble_gap_master_extract_state
0001e874 l     F .text	00000038 ble_gap_master_connect_failure
0001e8ac l     F .text	00000024 ble_gap_master_failed
0001e8d0 l     F .text	00000046 ble_gap_master_connect_cancelled
0001e918 l     F .text	00000014 ble_gap_update_entry_free
0001e92c l     F .text	00000034 ble_gap_master_ticks_until_exp
0001e960 l     F .text	0000003c ble_gap_update_next_exp
0001e99c l     F .text	0000003c ble_gap_update_timer
0001e9d8 l     F .text	00000034 ble_gap_slave_ticks_until_exp
0001ea0c l     F .text	0000002c ble_gap_slave_timer
0001ea38 l     F .text	00000020 ble_gap_slave_set_timer
0001ea58 l     F .text	00000074 ble_gap_log_adv
0001eacc l     F .text	00000030 ble_gap_log_update
0001eafc l     F .text	0000004c ble_gap_master_timer
0001eb48 l     F .text	00000084 ble_gap_adv_validate
0001ebcc l     F .text	00000024 ble_gap_update_entry_alloc
0001f034 l     F .text	00000044 ble_gap_adv_stop_no_lock
0001f080 l     F .text	0000004c ble_gap_conn_cancel_no_lock
0001f160 l     F .text	0000003e ble_gap_update_notify
0001f38c l     F .text	0000002c ble_gap_update_l2cap_cb
0001f3b8 l     F .text	00000034 ble_gap_update_failed
100038a8 l     O .bss	00000004 ble_gap_event_listener_list
10003934 l     O .bss	00000004 ble_gap_update_entries
10003938 l     O .bss	00000018 ble_gap_update_entry_mem
10003950 l     O .bss	0000001c ble_gap_update_entry_pool
1000396c l     O .bss	00000010 ble_gap_slave
1000397c l     O .bss	00000014 ble_gap_master
10003990 l     O .bss	0000000c preempt_done_mutex
1000399c l     O .bss	00000008 slaves.24107
00000000 l    df *ABS*	00000000 ble_gattc.c
0001fa4c l     F .text	0000000c ble_gattc_err_dispatch_get
0001fa58 l     F .text	0000000c ble_gattc_resume_dispatch_get
0001fa64 l     F .text	0000000c ble_gattc_tmo_dispatch_get
0001fa70 l     F .text	00000024 ble_gattc_proc_matches_conn_op
0001fa94 l     F .text	0000001e ble_gattc_proc_matches_expired
0001fab2 l     F .text	00000008 ble_gattc_proc_matches_stalled
0001faba l     F .text	00000014 ble_gattc_proc_timeout
0001fad0 l     F .text	0000001c ble_gattc_error
0001faec l     F .text	00000038 ble_gattc_mtu_cb
0001fb24 l     F .text	0000000e ble_gattc_mtu_tmo
0001fb32 l     F .text	0000000a ble_gattc_mtu_err
0001fb3c l     F .text	00000038 ble_gattc_disc_all_svcs_cb
0001fb74 l     F .text	0000000e ble_gattc_disc_all_svcs_tmo
0001fb82 l     F .text	00000016 ble_gattc_disc_all_svcs_err
0001fb98 l     F .text	00000038 ble_gattc_disc_svc_uuid_cb
0001fbd0 l     F .text	0000000e ble_gattc_disc_svc_uuid_tmo
0001fbde l     F .text	00000014 ble_gattc_disc_svc_uuid_err
0001fbf4 l     F .text	00000038 ble_gattc_find_inc_svcs_cb
0001fc2c l     F .text	0000000e ble_gattc_find_inc_svcs_tmo
0001fc3a l     F .text	00000018 ble_gattc_find_inc_svcs_err
0001fc54 l     F .text	00000038 ble_gattc_disc_all_chrs_cb
0001fc8c l     F .text	0000000e ble_gattc_disc_all_chrs_tmo
0001fc9a l     F .text	00000014 ble_gattc_disc_all_chrs_err
0001fcb0 l     F .text	00000038 ble_gattc_disc_chr_uuid_cb
0001fce8 l     F .text	0000000e ble_gattc_disc_chr_uuid_tmo
0001fcf6 l     F .text	00000014 ble_gattc_disc_chr_uuid_err
0001fd0c l     F .text	00000040 ble_gattc_disc_all_dscs_cb
0001fd4c l     F .text	0000000e ble_gattc_disc_all_dscs_tmo
0001fd5a l     F .text	00000014 ble_gattc_disc_all_dscs_err
0001fd70 l     F .text	00000038 ble_gattc_read_cb
0001fda8 l     F .text	0000000e ble_gattc_read_tmo
0001fdb6 l     F .text	0000000a ble_gattc_read_err
0001fdc0 l     F .text	00000038 ble_gattc_read_uuid_cb
0001fdf8 l     F .text	0000000e ble_gattc_read_uuid_tmo
0001fe06 l     F .text	0000000a ble_gattc_read_uuid_err
0001fe10 l     F .text	00000038 ble_gattc_read_long_cb
0001fe48 l     F .text	0000000e ble_gattc_read_long_tmo
0001fe56 l     F .text	0000000a ble_gattc_read_long_err
0001fe60 l     F .text	00000054 ble_gattc_read_mult_cb
0001feb4 l     F .text	0000000e ble_gattc_read_mult_tmo
0001fec2 l     F .text	0000000a ble_gattc_read_mult_err
0001fecc l     F .text	00000038 ble_gattc_write_long_cb
0001ff04 l     F .text	0000000c ble_gattc_write_long_tmo
0001ff10 l     F .text	00000044 ble_gattc_write_reliable_cb
0001ff54 l     F .text	0000000c ble_gattc_write_reliable_tmo
0001ff60 l     F .text	0000002c ble_gattc_proc_set_resume_timer
0001ff8c l     F .text	00000014 ble_gattc_process_resume_status
0001ffa0 l     F .text	00000010 ble_gattc_proc_set_exp_timer
0001ffb0 l     F .text	00000028 ble_gattc_ticks_until_resume
0001ffd8 l     F .text	00000078 ble_gattc_extract
00020050 l     F .text	0000002c ble_gattc_extract_expired
0002007c l     F .text	00000014 ble_gattc_extract_stalled
00020090 l     F .text	00000020 ble_gattc_extract_by_conn_op
000200b0 l     F .text	00000014 ble_gattc_extract_first_by_conn_op
000200c4 l     F .text	00000020 ble_gattc_proc_insert
000200e4 l     F .text	00000010 ble_gattc_indicate_tmo
000200f4 l     F .text	00000044 ble_gattc_write_cb
00020138 l     F .text	0000000c ble_gattc_write_tmo
00020144 l     F .text	00000008 ble_gattc_write_err
0002014c l     F .text	00000014 ble_gattc_proc_free
00020160 l     F .text	0000003e ble_gattc_fail_procs
0002019e l     F .text	00000020 ble_gattc_write_reliable_err
000201be l     F .text	0000002a ble_gattc_write_long_err
000201e8 l     F .text	0000008a ble_gattc_write_reliable_tx
00020272 l     F .text	00000024 ble_gattc_write_reliable_resume
00020296 l     F .text	0000006e ble_gattc_write_long_tx
00020304 l     F .text	00000024 ble_gattc_write_long_resume
00020328 l     F .text	0000001a ble_gattc_read_long_tx
00020342 l     F .text	00000026 ble_gattc_read_long_resume
00020368 l     F .text	00000012 ble_gattc_disc_all_dscs_tx
0002037a l     F .text	00000026 ble_gattc_disc_all_dscs_resume
000203a0 l     F .text	00000024 ble_gattc_disc_chr_uuid_tx
000203c4 l     F .text	00000026 ble_gattc_disc_chr_uuid_resume
000203ec l     F .text	00000024 ble_gattc_disc_all_chrs_tx
00020410 l     F .text	00000026 ble_gattc_disc_all_chrs_resume
00020438 l     F .text	00000030 ble_gattc_find_inc_svcs_tx
00020468 l     F .text	00000026 ble_gattc_find_inc_svcs_resume
0002048e l     F .text	00000038 ble_gattc_disc_svc_uuid_tx
000204c6 l     F .text	00000026 ble_gattc_disc_svc_uuid_resume
000204ec l     F .text	00000028 ble_gattc_disc_all_svcs_tx
00020514 l     F .text	00000026 ble_gattc_disc_all_svcs_resume
0002053a l     F .text	00000026 ble_gattc_process_status
00020560 l     F .text	0000003c ble_gattc_resume_procs
0002059c l     F .text	0000001c ble_gattc_proc_alloc
000205b8 l     F .text	00000014 ble_gattc_log_proc_init
000205cc l     F .text	00000020 ble_gattc_log_notify
000205ec l     F .text	00000020 ble_gattc_log_indicate
0002060c l     F .text	00000028 ble_gattc_indicate_err
00020634 l     F .text	00000024 ble_gattc_indicate_rx_rsp
100039a4 l     O .bss	000000e0 ble_gattc_proc_mem
10003a84 l     O .bss	0000001c ble_gattc_proc_pool
10003aa0 l     O .bss	00000008 ble_gattc_procs
10003aa8 l     O .bss	00000004 ble_gattc_resume_at
10003b44 l     O .bss	00000004 error.23836
00030f4c l     O .text	0000003c ble_gattc_err_dispatch
00030f88 l     O .text	0000003c ble_gattc_resume_dispatch
00030fc4 l     O .text	0000003c ble_gattc_tmo_dispatch
00000000 l    df *ABS*	00000000 ble_gatts.c
000208e8 l     F .text	00000016 ble_gatts_chr_clt_cfg_allowed
000208fe l     F .text	00000056 ble_gatts_att_flags_from_chr_flags
00020954 l     F .text	00000056 ble_gatts_chr_properties
000209aa l     F .text	00000014 ble_gatts_chr_is_sane
000209be l     F .text	0000000c ble_gatts_chr_op
000209cc l     F .text	00000020 ble_gatts_chr_inc_val_stat
000209ec l     F .text	0000002c ble_gatts_find_svc_entry_idx
00020a18 l     F .text	00000040 ble_gatts_svc_incs_satisfied
00020a58 l     F .text	0000000c ble_gatts_dsc_op
00020a64 l     F .text	00000024 ble_gatts_dsc_inc_stat
00020a88 l     F .text	00000014 ble_gatts_dsc_is_sane
00020a9c l     F .text	00000024 ble_gatts_clt_cfg_find_idx
00020ac0 l     F .text	00000018 ble_gatts_clt_cfg_find
00020ad8 l     F .text	00000024 ble_gatts_svc_type_to_uuid
00020afc l     F .text	0000001a ble_gatts_svc_is_sane
00020b18 l     F .text	0000000c ble_gatts_clt_cfg_size
00020b24 l     F .text	00000038 ble_gatts_schedule_update
00020b5c l     F .text	000000e8 ble_gatts_count_resources
00020c44 l     F .text	000000f4 ble_gatts_clt_cfg_access_locked
00020d38 l     F .text	00000032 ble_gatts_subscribe_event
00020df8 l     F .text	00000028 ble_gatts_register_inc
00021190 l     F .text	00000058 ble_gatts_inc_access
00020e20 l     F .text	00000034 ble_gatts_register_clt_cfg_dsc
00020e54 l     F .text	00000064 ble_gatts_register_dsc
000212c2 l     F .text	00000038 ble_gatts_dsc_access
00020eb8 l     F .text	00000108 ble_gatts_register_chr
00021134 l     F .text	0000005c ble_gatts_chr_def_access
0002128a l     F .text	00000038 ble_gatts_chr_val_access
00020fc0 l     F .text	000000cc ble_gatts_register_svc
00021100 l     F .text	00000034 ble_gatts_svc_access
0002108c l     F .text	00000074 ble_gatts_register_round
000211e8 l     F .text	000000a2 ble_gatts_val_access
000212fa l     F .text	0000002a ble_gatts_mutable
00021324 l     F .text	00000024 ble_gatts_free_mem
00021348 l     F .text	0000001c ble_gatts_free_svc_defs
00021364 l     F .text	0000006c ble_gatts_tx_notifications_one_chr
10003b48 l     O .bss	00000004 ble_gatts_clt_cfg_mem
10003b4c l     O .bss	0000001c ble_gatts_clt_cfg_pool
10003b68 l     O .bss	00000004 ble_gatts_clt_cfgs
10003b6c l     O .bss	00000004 ble_gatts_num_cfgable_chrs
10003b70 l     O .bss	00000004 ble_gatts_num_svc_defs
10003b74 l     O .bss	00000002 ble_gatts_num_svc_entries
10003bac l     O .bss	00000004 ble_gatts_svc_defs
10003bb0 l     O .bss	00000004 ble_gatts_svc_entries
100002a8 l     O .data	00000004 __compound_literal.0
100002ac l     O .data	00000004 __compound_literal.1
100002b0 l     O .data	00000004 __compound_literal.2
100002b4 l     O .data	00000004 __compound_literal.3
100002b8 l     O .data	00000004 __compound_literal.4
00000000 l    df *ABS*	00000000 ble_hs.c
000219d8 l     F .text	00000048 ble_hs_wakeup_tx_conn
00021a20 l     F .text	00000018 ble_hs_event_rx_hci_ev
00021a38 l     F .text	0000001c ble_hs_clear_rx_queue
00021a54 l     F .text	0000002c ble_hs_rx_data
00021a80 l     F .text	00000008 ble_hs_event_tx_notify
00021a94 l     F .text	00000014 ble_hs_sched_start_stage2
00021aa8 l     F .text	00000008 ble_hs_event_start_stage1
00021b30 l     F .text	00000008 ble_hs_event_rx_data
00021b88 l     F .text	00000020 ble_hs_timer_reset
00021ba8 l     F .text	00000030 ble_hs_timer_sched
00021bd8 l     F .text	00000064 ble_hs_sync
00021c3c l     F .text	00000050 ble_hs_reset
00021c8c l     F .text	00000008 ble_hs_event_reset
00021c94 l     F .text	00000054 ble_hs_timer_exp
00021dd8 l     F .text	0000001e ble_hs_event_start_stage2
10003bb8 l     O .bss	00000010 ble_hs_ev_reset
10003bc8 l     O .bss	00000010 ble_hs_ev_start_stage1
10003bd8 l     O .bss	00000010 ble_hs_ev_start_stage2
10003be8 l     O .bss	00000010 ble_hs_ev_tx_notifications
10003bf8 l     O .bss	00000004 ble_hs_evq
10003c18 l     O .bss	000000a0 ble_hs_hci_os_event_buf
10003cc0 l     O .bss	0000000c ble_hs_mutex
10003ccc l     O .bss	00000004 ble_hs_parent_task
10003cd0 l     O .bss	00000004 ble_hs_reset_reason
10003cd4 l     O .bss	00000018 ble_hs_rx_q
10003d28 l     O .bss	00000020 ble_hs_timer
00000000 l    df *ABS*	00000000 ble_hs_adv.c
00022068 l     F .text	00000062 ble_hs_adv_set_hdr
000220ca l     F .text	00000050 ble_hs_adv_set_flat_mbuf
0002211a l     F .text	00000068 ble_hs_adv_set_array_uuid16
00022182 l     F .text	0000006c ble_hs_adv_set_array_uuid128
000221ee l     F .text	00000072 ble_hs_adv_set_array_uuid32
00022260 l     F .text	00000072 ble_hs_adv_set_array16
000222d2 l     F .text	000002ce adv_set_fields
00000000 l    df *ABS*	00000000 ble_hs_atomic.c
00000000 l    df *ABS*	00000000 ble_hs_conn.c
10003d48 l     O .bss	00000064 ble_hs_conn_elem_mem
10003dac l     O .bss	0000001c ble_hs_conn_pool
10003dc8 l     O .bss	00000004 ble_hs_conns
00031084 l     O .text	00000006 ble_hs_conn_null_addr
00000000 l    df *ABS*	00000000 ble_hs_flow.c
00022a34 l     F .text	00000058 ble_hs_flow_inc_completed_pkts
00022a8c l     F .text	0000003c ble_hs_flow_acl_free
00022ac8 l     F .text	00000046 ble_hs_flow_tx_num_comp_pkts
00022b10 l     F .text	0000002c ble_hs_flow_event_cb
10003dcc l     O .bss	00000010 ble_hs_flow_ev
10003ddc l     O .bss	00000008 ble_hs_flow_mbuf_conn_handle
10003de4 l     O .bss	00000002 ble_hs_flow_num_completed_pkts
10003de8 l     O .bss	00000020 ble_hs_flow_timer
00000000 l    df *ABS*	00000000 ble_hs_hci.c
00022c14 l     F .text	0000004a ble_hs_hci_rx_cmd_complete
00022c5e l     F .text	00000024 ble_hs_hci_rx_cmd_status
00022c84 l     F .text	0000000c ble_hs_hci_max_acl_payload_sz
00022c90 l     F .text	00000014 ble_hs_hci_lock
00022ca4 l     F .text	00000010 ble_hs_hci_unlock
00022cb4 l     F .text	0000002c ble_hs_hci_wait_for_ack
00022ce0 l     F .text	00000090 ble_hs_hci_process_ack
00022d70 l     F .text	00000024 ble_hs_hci_rx_ack
00022d94 l     F .text	00000020 ble_hs_hci_frag_alloc
00022db4 l     F .text	0000004c ble_hs_hci_acl_hdr_prepend
10003e08 l     O .bss	00000004 ble_hs_hci_ack
10003e0e l     O .bss	00000002 ble_hs_hci_buf_sz
10003e10 l     O .bss	0000011c ble_hs_hci_frag_data
10003f2c l     O .bss	0000000c ble_hs_hci_frag_mbuf_pool
10003f38 l     O .bss	0000001c ble_hs_hci_frag_mempool
10003f54 l     O .bss	0000000c ble_hs_hci_mutex
10003f60 l     O .bss	00000008 ble_hs_hci_sem
10003f68 l     O .bss	00000004 ble_hs_hci_sup_feat
10003f6c l     O .bss	00000001 ble_hs_hci_version
00000000 l    df *ABS*	00000000 ble_hs_hci_cmd.c
00023058 l     F .text	00000018 ble_hs_hci_cmd_transport
00023070 l     F .text	00000038 ble_hs_hci_cmd_send
00000000 l    df *ABS*	00000000 ble_hs_hci_evt.c
000230e0 l     F .text	00000024 ble_hs_hci_evt_dispatch_find
00023104 l     F .text	00000014 ble_hs_hci_evt_le_dispatch_find
00023118 l     F .text	00000026 ble_hs_hci_evt_le_meta
0002313e l     F .text	0000004c ble_hs_hci_evt_le_adv_rpt_first_pass
0002318a l     F .text	00000004 ble_hs_hci_evt_le_ext_adv_rpt
0002318e l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_estab
00023192 l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_rpt
00023196 l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_lost
0002319a l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_transfer
0002319e l     F .text	00000004 ble_hs_hci_evt_le_scan_timeout
000231a2 l     F .text	00000004 ble_hs_hci_evt_le_adv_set_terminated
000231a6 l     F .text	00000004 ble_hs_hci_evt_le_scan_req_rcvd
000231aa l     F .text	00000014 ble_hs_hci_evt_hw_error
000231be l     F .text	00000014 ble_hs_hci_evt_enc_key_refresh
000231d2 l     F .text	00000014 ble_hs_hci_evt_encrypt_change
000231e6 l     F .text	00000032 ble_hs_hci_evt_disconn_complete
00023218 l     F .text	00000062 ble_hs_hci_evt_num_completed_pkts
0002327a l     F .text	00000014 ble_hs_hci_evt_le_phy_update_complete
0002328e l     F .text	00000082 ble_hs_hci_evt_le_dir_adv_rpt
00023310 l     F .text	0000007e ble_hs_hci_evt_le_adv_rpt
0002338e l     F .text	00000086 ble_hs_hci_evt_le_enh_conn_complete
00023414 l     F .text	00000066 ble_hs_hci_evt_le_conn_complete
0002347a l     F .text	00000014 ble_hs_hci_evt_le_conn_parm_req
0002348e l     F .text	00000014 ble_hs_hci_evt_le_lt_key_req
000234a2 l     F .text	00000014 ble_hs_hci_evt_le_rd_rem_used_feat_complete
000234b6 l     F .text	00000014 ble_hs_hci_evt_le_conn_upd_complete
000310c8 l     O .text	00000030 ble_hs_hci_evt_dispatch
000310f8 l     O .text	00000064 ble_hs_hci_evt_le_dispatch
00000000 l    df *ABS*	00000000 ble_hs_hci_util.c
00000000 l    df *ABS*	00000000 ble_hs_id.c
0002377c l     F .text	00000038 ble_hs_id_addr_type_usable
10003f70 l     O .bss	00000006 ble_hs_id_pub
10003f78 l     O .bss	00000006 ble_hs_id_rnd
0003117c l     O .text	00000002 priv_addr_types.23228
00031180 l     O .text	00000002 pub_addr_types.23227
00000000 l    df *ABS*	00000000 ble_hs_log.c
00000000 l    df *ABS*	00000000 ble_hs_mbuf.c
00023898 l     F .text	0000002a ble_hs_mbuf_gen_pkt
00000000 l    df *ABS*	00000000 ble_hs_misc.c
0002392c l     F .text	00000034 ble_hs_misc_restore_one_irk
00000000 l    df *ABS*	00000000 ble_hs_mqueue.c
00000000 l    df *ABS*	00000000 ble_hs_pvcy.c
00023a5c l     F .text	0000002e ble_hs_pvcy_set_addr_timeout
00023a8a l     F .text	0000001a ble_hs_pvcy_clear_entries
00023aa4 l     F .text	0000001e ble_hs_pvcy_set_resolve_enabled
00023b64 l     F .text	00000084 ble_hs_pvcy_add_entry_hci
10003f80 l     O .bss	00000010 ble_hs_pvcy_irk
10003f90 l     O .bss	00000001 ble_hs_pvcy_started
00000000 l    df *ABS*	00000000 ble_hs_startup.c
00023c98 l     F .text	0000001a ble_hs_startup_reset_tx
00023cb4 l     F .text	0000003c ble_hs_startup_read_sup_f_tx
00023cf0 l     F .text	00000058 ble_hs_startup_set_evmask_tx
00023d48 l     F .text	00000046 ble_hs_startup_le_set_evmask_tx
00023d8e l     F .text	0000002c ble_hs_startup_le_read_buf_sz_tx
00023dba l     F .text	0000002c ble_hs_startup_read_buf_sz_tx
00023de6 l     F .text	0000002a ble_hs_startup_read_local_ver_tx
00023e10 l     F .text	00000060 ble_hs_startup_read_buf_sz
00023e70 l     F .text	00000028 ble_hs_startup_le_read_sup_f_tx
00023e98 l     F .text	00000028 ble_hs_startup_read_bd_addr
00000000 l    df *ABS*	00000000 ble_hs_stop.c
00023f38 l     F .text	00000044 ble_hs_stop_done
00023f7c l     F .text	00000020 ble_hs_stop_terminate_timeout_cb
10003f91 l     O .bss	00000001 ble_hs_stop_conn_cnt
10003f94 l     O .bss	0000000c ble_hs_stop_gap_listener
10003fa0 l     O .bss	00000004 ble_hs_stop_listeners
10003fa4 l     O .bss	00000020 ble_hs_stop_terminate_tmo
00000000 l    df *ABS*	00000000 ble_l2cap.c
00023fb8 l     F .text	00000012 ble_l2cap_get_mtu
00023fca l     F .text	00000020 ble_l2cap_append_rx
000240ca l     F .text	0000004c ble_l2cap_rx_payload
10003fc4 l     O .bss	00000054 ble_l2cap_chan_mem
00000000 l    df *ABS*	00000000 ble_l2cap_sig.c
00024280 l     F .text	0000001c ble_l2cap_sig_next_id
0002429c l     F .text	00000014 ble_l2cap_sig_dispatch_get
000242b0 l     F .text	0000002c ble_l2cap_sig_proc_matches
000242dc l     F .text	00000004 ble_l2cap_sig_rx_noop
000242e0 l     F .text	00000020 ble_l2cap_sig_update_call_cb
00024300 l     F .text	00000024 ble_l2cap_sig_proc_insert
00024324 l     F .text	00000068 ble_l2cap_sig_proc_extract
0002438c l     F .text	00000020 ble_l2cap_sig_proc_alloc
000243ac l     F .text	00000014 ble_l2cap_sig_proc_set_timer
000243c0 l     F .text	00000058 ble_l2cap_sig_extract_expired
00024418 l     F .text	00000014 ble_l2cap_sig_proc_free
0002442c l     F .text	00000018 ble_l2cap_sig_process_status
00024444 l     F .text	00000014 ble_l2cap_sig_rx_reject
00024458 l     F .text	0000004a ble_l2cap_sig_update_rsp_rx
000244a4 l     F .text	00000084 ble_l2cap_sig_rx
00024528 l     F .text	0000009c ble_l2cap_sig_update_req_rx
10004068 l     O .bss	00000001 ble_l2cap_sig_cur_id
1000406c l     O .bss	00000014 ble_l2cap_sig_proc_mem
10004080 l     O .bss	0000001c ble_l2cap_sig_proc_pool
1000409c l     O .bss	00000008 ble_l2cap_sig_procs
00031284 l     O .text	0000006c ble_l2cap_sig_dispatch
00000000 l    df *ABS*	00000000 ble_l2cap_sig_cmd.c
00000000 l    df *ABS*	00000000 ble_sm.c
0002483c l     F .text	00000014 ble_sm_dispatch_get
00024850 l     F .text	00000028 ble_sm_proc_remove
00024878 l     F .text	00000038 ble_sm_proc_matches
000248b0 l     F .text	00000018 ble_sm_insert
000248c8 l     F .text	0000000c ble_sm_rx_noop
000248d4 l     F .text	00000028 ble_sm_build_authreq
000248fc l     F .text	00000022 ble_sm_key_dist
0002491e l     F .text	00000004 ble_sm_chk_store_overflow_by_type
00024922 l     F .text	00000018 ble_sm_chk_store_overflow
0002493a l     F .text	00000010 ble_sm_state_after_pair
0002494c l     F .text	00000024 ble_sm_pair_base_fill
00024970 l     F .text	00000020 ble_sm_pair_req_fill
00024990 l     F .text	00000028 ble_sm_pair_rsp_fill
000249b8 l     F .text	00000004 ble_sm_verify_auth_requirements
000249bc l     F .text	0000000a ble_sm_gen_ediv
000249c6 l     F .text	0000000c ble_sm_gen_master_id_rand
000249d2 l     F .text	0000000c ble_sm_gen_csrk
000249de l     F .text	00000014 ble_sm_io_action
000249f2 l     F .text	000000b2 ble_sm_pair_cfg
00024aa4 l     F .text	00000026 ble_sm_gen_ltk
00024acc l     F .text	0000003c ble_sm_exec
00024b08 l     F .text	00000034 ble_sm_sec_req_exec
00024b3c l     F .text	000000e6 ble_sm_fill_store_value
00024c22 l     F .text	0000004a ble_sm_update_sec_state
00024c6c l     F .text	00000032 ble_sm_key_exch_success
00024c9e l     F .text	0000027c ble_sm_key_exch_exec
00024f1a l     F .text	0000001e ble_sm_key_rxed
00024f38 l     F .text	00000040 ble_sm_start_encrypt_tx
00024f78 l     F .text	0000000e ble_sm_enc_restore_exec
00024f86 l     F .text	00000044 ble_sm_enc_start_exec
00024fca l     F .text	00000046 ble_sm_ltk_req_reply_tx
00025010 l     F .text	00000024 ble_sm_ltk_start_exec
00025034 l     F .text	0000002c ble_sm_ltk_req_neg_reply_tx
00025060 l     F .text	0000004e ble_sm_ltk_restore_exec
000250ae l     F .text	00000012 ble_sm_random_exec
000250c0 l     F .text	00000012 ble_sm_confirm_exec
000250d2 l     F .text	00000014 ble_sm_proc_set_timer
000250e8 l     F .text	00000070 ble_sm_extract_expired
00025158 l     F .text	00000038 ble_sm_pair_fail_tx
00025190 l     F .text	000000e8 ble_sm_persist_keys
00025278 l     F .text	00000014 ble_sm_proc_free
0002528c l     F .text	00000020 ble_sm_proc_alloc
000252ac l     F .text	00000044 ble_sm_retrieve_ltk
000252f0 l     F .text	0000002a ble_sm_fail_rx
0002531a l     F .text	00000040 ble_sm_read_bond
0002535a l     F .text	0000007e ble_sm_chk_repeat_pairing
000254a0 l     F .text	00000080 ble_sm_sign_info_rx
00025520 l     F .text	0000007a ble_sm_id_addr_info_rx
0002559a l     F .text	00000080 ble_sm_id_info_rx
0002561a l     F .text	0000007a ble_sm_master_id_rx
00025694 l     F .text	00000086 ble_sm_enc_info_rx
0002571a l     F .text	0000013a ble_sm_pair_req_rx
000258ae l     F .text	000000ae ble_sm_confirm_rx
0002595c l     F .text	000000d6 ble_sm_pair_rsp_rx
00025b16 l     F .text	00000108 ble_sm_enc_event_rx
00025c20 l     F .text	00000078 ble_sm_rx
00025db8 l     F .text	000000a4 ble_sm_pair_exec
00025e6c l     F .text	0000006c ble_sm_random_rx
00026038 l     F .text	000000dc ble_sm_sec_req_rx
100040a4 l     O .bss	00000100 ble_sm_proc_mem
100041a4 l     O .bss	0000001c ble_sm_proc_pool
100041c0 l     O .bss	00000008 ble_sm_procs
0003132c l     O .text	0000003c ble_sm_dispatch
00031368 l     O .text	0000002c ble_sm_state_dispatch
00000000 l    df *ABS*	00000000 ble_sm_cmd.c
00000000 l    df *ABS*	00000000 ble_sm_lgcy.c
00026200 l     F .text	0000003e ble_sm_gen_stk
00031394 l     O .text	00000019 ble_sm_lgcy_init_ioa
000313b0 l     O .text	00000019 ble_sm_lgcy_resp_ioa
00000000 l    df *ABS*	00000000 ble_store.c
000264a4 l     F .text	00000018 ble_store_status
00026568 l     F .text	00000008 ble_store_persist_sec
00000000 l    df *ABS*	00000000 ble_store_util.c
000266cc l     F .text	0000005c ble_store_util_iter_unique_peer
00000000 l    df *ABS*	00000000 ble_uuid.c
00031424 l     O .text	00000010 ble_uuid_base
00000000 l    df *ABS*	00000000 ble_sm_alg.c
00026a3e l     F .text	0000001c ble_sm_alg_xor_128
00026a5a l     F .text	00000048 ble_sm_alg_encrypt
00000000 l    df *ABS*	00000000 ble_svc_ans.c
00026be8 l     F .text	00000074 ble_svc_ans_new_alert_notify
00026c5c l     F .text	0000002c ble_svc_ans_unr_alert_notify
00026c88 l     F .text	00000026 ble_svc_ans_chr_write
00026cb0 l     F .text	00000200 ble_svc_ans_access
100041c8 l     O .bss	00000002 ble_svc_ans_alert_not_ctrl_pt
100041ca l     O .bss	00000002 ble_svc_ans_conn_handle
100041cc l     O .bss	00000001 ble_svc_ans_new_alert_cat
100041d0 l     O .bss	00000008 ble_svc_ans_new_alert_cnt
100041d8 l     O .bss	00000014 ble_svc_ans_new_alert_val
100041ec l     O .bss	00000002 ble_svc_ans_new_alert_val_handle
100041ee l     O .bss	00000002 ble_svc_ans_new_alert_val_len
100041f0 l     O .bss	00000001 ble_svc_ans_unr_alert_cat
100041f4 l     O .bss	00000008 ble_svc_ans_unr_alert_cnt
100041fc l     O .bss	00000002 ble_svc_ans_unr_alert_stat
100041fe l     O .bss	00000002 ble_svc_ans_unr_alert_val_handle
100002e4 l     O .data	00000004 __compound_literal.0
100002e8 l     O .data	00000004 __compound_literal.1
100002ec l     O .data	00000004 __compound_literal.2
100002f0 l     O .data	00000004 __compound_literal.3
100002f4 l     O .data	00000004 __compound_literal.4
100002f8 l     O .data	00000004 __compound_literal.5
100002fc l     O .data	00000090 __compound_literal.6
00031434 l     O .text	00000020 ble_svc_ans_defs
00000000 l    df *ABS*	00000000 ble_svc_dis.c
00026f34 l     F .text	00000060 ble_svc_dis_access
1000038c l     O .data	00000004 __compound_literal.0
10000390 l     O .data	00000004 __compound_literal.1
10000394 l     O .data	00000004 __compound_literal.2
10000398 l     O .data	00000048 __compound_literal.3
0003146c l     O .text	00000020 ble_svc_dis_defs
00000000 l    df *ABS*	00000000 ble_svc_gap.c
00027014 l     F .text	00000016 ble_svc_gap_device_name_write_access
0002702a l     F .text	00000016 ble_svc_gap_appearance_write_access
00027040 l     F .text	00000024 ble_svc_gap_device_name_read_access
00027064 l     F .text	00000028 ble_svc_gap_appearance_read_access
0002708c l     F .text	00000098 ble_svc_gap_access
10004200 l     O .bss	00000002 ble_svc_gap_appearance
100003fc l     O .data	00000004 __compound_literal.0
10000400 l     O .data	00000004 __compound_literal.1
10000404 l     O .data	00000004 __compound_literal.2
10000408 l     O .data	00000048 __compound_literal.3
10000450 l     O .data	00000020 ble_svc_gap_name
0003148c l     O .text	00000020 ble_svc_gap_defs
00000000 l    df *ABS*	00000000 ble_svc_gatt.c
000271a0 l     F .text	00000068 ble_svc_gatt_access
10004202 l     O .bss	00000002 ble_svc_gatt_changed_val_handle
10004204 l     O .bss	00000002 ble_svc_gatt_end_handle
10004206 l     O .bss	00000002 ble_svc_gatt_start_handle
10000470 l     O .data	00000004 __compound_literal.0
10000474 l     O .data	00000004 __compound_literal.1
10000478 l     O .data	00000030 __compound_literal.2
000314ac l     O .text	00000020 ble_svc_gatt_defs
00000000 l    df *ABS*	00000000 ble_store_config.c
0002727c l     F .text	00000098 ble_store_config_find_sec
00027314 l     F .text	00000038 ble_store_config_read_peer_sec
0002734c l     F .text	00000038 ble_store_config_read_our_sec
00027384 l     F .text	00000084 ble_store_config_find_cccd
00027408 l     F .text	00000028 ble_store_config_read_cccd
00027430 l     F .text	0000002e ble_store_config_print_key_sec
0002749e l     F .text	00000046 ble_store_config_print_value_sec
000274e4 l     F .text	00000058 ble_store_config_write_peer_sec
0002753c l     F .text	00000058 ble_store_config_write_our_sec
00027594 l     F .text	0000004c ble_store_config_write_cccd
00027608 l     F .text	00000022 ble_store_config_delete_obj
0002762a l     F .text	00000024 ble_store_config_delete_sec
00027650 l     F .text	00000014 ble_store_config_delete_peer_sec
00027664 l     F .text	00000014 ble_store_config_delete_our_sec
00027678 l     F .text	00000028 ble_store_config_delete_cccd
00000000 l    df *ABS*	00000000 addr.c
00027724 l     F .text	00000004 ble_hs_util_load_rand_addr
00027728 l     F .text	00000030 ble_hs_util_ensure_rand_addr
00000000 l    df *ABS*	00000000 apollo3_ble_hci.c
00027788 l     F .text	00000058 apollo3_update_wake
00027984 l     F .text	00000020 ble_hci_trans_acl_tx
00027abc l     F .text	000001c4 apollo3_ble_hci_trans_rx_process
1000447c l     O .bss	00000010 apollo3_ble_hci_api
1000448c l     O .bss	00000024 apollo3_ble_hci_pool_acl
100044b0 l     O .bss	000004b0 apollo3_ble_hci_pool_acl_buf
10004960 l     O .bss	0000000c apollo3_ble_hci_pool_acl_mbuf
1000496c l     O .bss	0000001c apollo3_ble_hci_pool_cmd_mempool
10004988 l     O .bss	00000208 apollo3_ble_hci_pool_cmd_mempool_buf
10004b90 l     O .bss	0000001c apollo3_ble_hci_pool_evt_hi
10004bac l     O .bss	00000090 apollo3_ble_hci_pool_evt_hi_buf
10004c3c l     O .bss	0000001c apollo3_ble_hci_pool_evt_lo
10004c58 l     O .bss	00000240 apollo3_ble_hci_pool_evt_lo_buf
10004e98 l     O .bss	00000010 apollo3_ble_hci_rx_data
00000000 l    df *ABS*	00000000 bootutil_public.c
00027e58 l     F .text	0000000a boot_flag_decode
00027e64 l     F .text	00000018 boot_magic_decode
00027ed0 l     F .text	00000038 boot_read_flag
00031564 l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 aes_encrypt.c
000315c0 l     O .text	00000100 sbox
00000000 l    df *ABS*	00000000 utils.c
00000000 l    df *ABS*	00000000 base64.c
000316c0 l     O .text	00000041 base64_chars
00000000 l    df *ABS*	00000000 cbor_buf_reader.c
00028b18 l     F .text	00000006 cbuf_buf_reader_get8
00028b1e l     F .text	00000014 cbor_buf_reader_cpy
00028b32 l     F .text	0000001a cbor_buf_reader_cmp
00028b4c l     F .text	0000001c cbuf_buf_reader_get64
00028b68 l     F .text	00000008 cbuf_buf_reader_get32
00028b70 l     F .text	0000000a cbuf_buf_reader_get16
00000000 l    df *ABS*	00000000 cbor_buf_writer.c
00000000 l    df *ABS*	00000000 cbor_mbuf_reader.c
00028bfa l     F .text	0000001c cbor_mbuf_reader_cpy
00028c16 l     F .text	0000001c cbor_mbuf_reader_get8
00028c32 l     F .text	00000018 cbor_mbuf_reader_cmp
00028c4a l     F .text	0000001e cbor_mbuf_reader_get64
00028c68 l     F .text	0000001a cbor_mbuf_reader_get32
00028c82 l     F .text	00000020 cbor_mbuf_reader_get16
00000000 l    df *ABS*	00000000 cbor_mbuf_writer.c
00000000 l    df *ABS*	00000000 cborencoder.c
00028d2c l     F .text	00000094 create_container
00028dc0 l     F .text	00000074 encode_string
00000000 l    df *ABS*	00000000 cborparser.c
00029006 l     F .text	00000024 is_fixed_type
0002902a l     F .text	00000004 iterate_noop
0002902e l     F .text	0000013c preparse_value
0002916a l     F .text	0000004a preparse_next_value
000291b4 l     F .text	000000ba extract_length
0002926e l     F .text	00000172 iterate_string_chunks
000293e0 l     F .text	000000f6 advance_internal
000297a8 l     F .text	00000082 advance_recursive
00000000 l    df *ABS*	00000000 cborpretty.c
0002986c l     F .text	00000028 hexDump
00029894 l     F .text	0000022c utf8EscapedDump
00029ac0 l     F .text	000003dc value_to_pretty
00029e9c l     F .text	00000064 container_to_pretty
00000000 l    df *ABS*	00000000 cborparser_dup_string.c
00000000 l    df *ABS*	00000000 fcb.c
00000000 l    df *ABS*	00000000 fcb_append.c
0002a228 l     F .text	00000032 fcb_new_area
00000000 l    df *ABS*	00000000 fcb_elem_info.c
00000000 l    df *ABS*	00000000 fcb_getnext.c
00000000 l    df *ABS*	00000000 fcb_rotate.c
00000000 l    df *ABS*	00000000 fcb_walk.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
0002a704 l     F .text	0000001e hal_flash_check_addr
10004fb4 l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 apollo3_periph.c
0002a9d6 l     F .text	0000004c apollo3_periph_create_timers
0002aa24 l     F .text	0000007c apollo3_periph_create_uart
10004fb8 l     O .bss	0000003c os_bsp_uart0
10004ff4 l     O .bss	0000003c os_bsp_uart1
000317c4 l     O .text	00000004 os_bsp_uart0_cfg
000317c8 l     O .text	00000004 os_bsp_uart1_cfg
00000000 l    df *ABS*	00000000 am_hal_ble.c
0002aaac l     F .text	00000024 buffer_compare
0002aad0 l     F .text	0000002c am_hal_ble_crc_nz
0002aafc l     F .text	00000020 am_hal_ble_check_status
0002ab1c l     F .text	00000008 am_hal_ble_bus_release
0002ab24 l     F .text	00000088 am_hal_ble_cmd_write
0002abac l     F .text	0000002c am_hal_ble_fifo_read
0002abd8 l     F .text	00000060 am_hal_ble_fifo_drain
0002ac38 l     F .text	0000002c am_hal_ble_read_trimdata_from_info1
0002ac64 l     F .text	00000038 am_hal_ble_bus_lock
0002bd6c l     F .text	0000001a am_hal_ble_load_modex_trim_set
000317cc l     O .text	00000200 ccitt_table
00000000 l    df *ABS*	00000000 am_hal_flash.c
00000000 l    df *ABS*	00000000 am_hal_interrupt.c
00000000 l    df *ABS*	00000000 am_hal_mcuctrl.c
0002c14c l     F .text	000000bc device_info_get
0002c208 l     F .text	00000038 mcuctrl_fault_status
00000000 l    df *ABS*	00000000 am_hal_pwrctrl.c
0002c29c l     F .text	0000007c pwrctrl_periph_disable_msk_check
0002c318 l     F .text	000000b4 simobuck_updates
00000000 l    df *ABS*	00000000 hal_flash.c
0002c5f8 l     F .text	0000000e apollo3_flash_sector_info
0002c606 l     F .text	00000004 apollo3_flash_init
0002c60c l     F .text	00000018 apollo3_flash_erase_sector
0002c624 l     F .text	0000004c apollo3_flash_write_odd
0002c670 l     F .text	000000ac apollo3_flash_write
0002c71c l     F .text	0000000e apollo3_flash_read
0003388c l     O .text	0000001c apollo3_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0002c72c l     F .text	00000044 apollo2_os_tick_set_timer
0002c770 l     F .text	00000048 apollo2_os_tick_handler
10005100 l     O .bss	00000004 apollo2_os_tick_dur
10005104 l     O .bss	00000004 apollo2_os_tick_prev
00000000 l    df *ABS*	00000000 hal_timer.c
0002c854 l     F .text	00000010 apollo3_timer_resolve
0002c864 l     F .text	00000040 apollo3_timer_tbl_find
0002c8a4 l     F .text	0000007c apollo3_timer_sdk_cfg
0002c920 l     F .text	00000014 apollo3_timer_isr_cfg
0002c934 l     F .text	0000000e apollo3_timer_cur_ticks
0002c942 l     F .text	00000060 apollo3_timer_set_ocmp
0002c9a2 l     F .text	00000042 apollo3_timer_set_ocmp_at
0002c9e4 l     F .text	0000002c apollo3_timer_clear_ocmp
0002ca10 l     F .text	00000058 apollo3_timer_chk_queue
0002ca68 l     F .text	00000024 apollo3_timer_isr
10005108 l     O .bss	00000004 nvic_configured.22017
10001a8c l     O .data	00000014 apollo3_timer_0
000338a8 l     O .text	00000030 apollo3_timer_tbl_hfrc
000338d8 l     O .text	00000028 apollo3_timer_tbl_lfrc
00033900 l     O .text	00000028 apollo3_timer_tbl_xt
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000000 l    df *ABS*	00000000 am_hal_cachectrl.c
0002cb60 l     F .text	00000044 set_LPMMODE
0002cba4 l     F .text	00000044 set_SEDELAY
0002cbe8 l     F .text	00000044 set_RDWAIT
00000000 l    df *ABS*	00000000 am_hal_ctimer.c
0002cde4 l     F .text	00000028 ctimer_clr
10001aa0 l     O .data	00000010 g_ui8ClkSrc
00033928 l     O .text	00000020 g_ui32TMRAddrTbl
00033948 l     O .text	00000020 g_ui8TmrClkSrcMask
00000000 l    df *ABS*	00000000 am_hal_global.c
00000000 l    df *ABS*	00000000 am_hal_gpio.c
0002d138 l     F .text	0000000e pincfg_equ
0003396c l     O .text	00000032 g_ui8Bit76Capabilities
000339a0 l     O .text	00000032 g_ui8Inpen
000339d4 l     O .text	000000c8 g_ui8NCEtable
00033a9c l     O .text	00000032 g_ui8nCEpins
00000000 l    df *ABS*	00000000 am_hal_stimer.c
00000000 l    df *ABS*	00000000 endian.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_error.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 malloc.c
0002d688 l     F .text	00000004 malloc_lock_nop
0002d68c l     F .text	00000002 malloc_unlock_nop
0002d68e l     F .text	00000048 __malloc_from_block
0002d6d8 l     F .text	00000064 __free_block
10001ab0 l     O .data	00000018 __malloc_head
10001ac8 l     O .data	00000004 malloc_lock
10001acc l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 mynewt.c
0002d824 l     F .text	00000004 stdin_read
0002d828 l     F .text	00000010 stdout_write
10001ad0 l     O .data	00000004 _stdin
10001ad4 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strsep.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoll.c
00000000 l    df *ABS*	00000000 strtoull.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0002d940 l     F .text	000000fc ui2a
0002da3c l     F .text	00000028 i2a
0002da64 l     F .text	00000030 a2d
0002da94 l     F .text	00000036 a2i
0002daca l     F .text	00000024 putf
0002daf0 l     F .text	00000124 putchw
0002dc14 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 strntoumax.c
00000000 l    df *ABS*	00000000 strpbrk.c
00000000 l    df *ABS*	00000000 log_fcb.c
0002e1c2 l     F .text	00000004 log_fcb_registered
0002e1c6 l     F .text	0000000a log_fcb_flush
0002e1d0 l     F .text	0000001e fcb_get_fa_hdr
0002e1ee l     F .text	0000008a fcb_walk_back_find_start
0002e278 l     F .text	000000b6 log_fcb_find_gte
0002e32e l     F .text	00000068 log_fcb_walk_impl
0002e396 l     F .text	0000000a log_fcb_walk_area
0002e3a0 l     F .text	0000000a log_fcb_walk
0002e3aa l     F .text	0000002c log_fcb_write_mbuf
0002e3d6 l     F .text	0000002a log_fcb_hdr_body_bytes
0002e400 l     F .text	0000002c log_fcb_read
0002e42c l     F .text	00000058 log_fcb_copy_entry
0002e77e l     F .text	0000001c log_fcb_append
0002e484 l     F .text	00000040 log_fcb_copy
0002e4c4 l     F .text	000000a0 log_fcb_rtr_erase
0002e564 l     F .text	00000060 log_fcb_start_append
0002e5c4 l     F .text	00000094 log_fcb_append_mbuf_body
0002e658 l     F .text	0000006a log_fcb_append_mbuf
0002e6c2 l     F .text	000000bc log_fcb_append_body
0002e79a l     F .text	00000062 log_fcb_read_mbuf
00000000 l    df *ABS*	00000000 crc8.c
00033b08 l     O .text	00000010 crc8_small_table
00000000 l    df *ABS*	00000000 log_mgmt.c
0002e830 l     F .text	0000000a cbor_cnt_writer
0002e83c l     F .text	00000098 log_mgmt_logs_list
0002e8d4 l     F .text	000000a0 log_mgmt_level_list
0002e974 l     F .text	000000a0 log_mgmt_module_list
0002ea14 l     F .text	00000098 log_mgmt_clear
0002eaac l     F .text	000000cc log_encode_entries
0002ef54 l     F .text	00000084 log_mgmt_cb_encode
0002eb78 l     F .text	00000098 log_encode
0002ec10 l     F .text	00000158 log_mgmt_show
0002ed68 l     F .text	000001ec log_mgmt_encode_entry
10001adc l     O .data	0000000c log_mgmt_group
10001ae8 l     O .data	00000030 log_mgmt_handlers
00000000 l    df *ABS*	00000000 stat_mgmt.c
0002efe8 l     F .text	0000008c stat_mgmt_list
0002f074 l     F .text	000000bc stat_mgmt_show
0002f130 l     F .text	00000032 stat_mgmt_cb_encode
10001b18 l     O .data	0000000c stat_mgmt_group
10001b24 l     O .data	00000010 stat_mgmt_handlers
00000000 l    df *ABS*	00000000 uart_hal.c
0002f174 l     F .text	00000022 uart_hal_blocking_tx
0002f196 l     F .text	00000022 uart_hal_start_rx
0002f1b8 l     F .text	00000022 uart_hal_start_tx
0002f1da l     F .text	0000002c uart_hal_resume
0002f206 l     F .text	0000002c uart_hal_suspend
0002f232 l     F .text	00000012 uart_hal_close
0002f244 l     F .text	00000086 uart_hal_open
00000000 l    df *ABS*	00000000 hal_uart.c
0002f334 l     F .text	000000cc apollo3_uart_irqh_x
0002f400 l     F .text	0000000a apollo3_uart_irqh_0
0002f40a l     F .text	0000000a apollo3_uart_irqh_1
0002f414 l     F .text	00000030 apollo3_uart_irq_info
0002f444 l     F .text	0000003c apollo3_uart_set_nvic
10005210 l     O .bss	00000030 uarts
00000000 l    df *ABS*	00000000 am_hal_uart.c
0002fc4c l     F .text	000000b0 config_baudrate
0002fdb4 l     F .text	00000084 buffer_configure
10005240 l     O .bss	000000d0 g_am_hal_uart_states
00000000 l    df *ABS*	00000000 am_hal_queue.c
00000000 l    df *ABS*	00000000 ble_test_target-sysflash.c
00000000 l    df *ABS*	00000000 am_hal_ble_patch.c
00000000 l    df *ABS*	00000000 am_hal_ble_patch_b0.c
00000000 l    df *ABS*	00000000 ble_hs_cfg.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00000000 l    df *ABS*	00000000 srand48.c
00000000 l    df *ABS*	00000000 bootutil_misc.c
00000000 l    df *ABS*	00000000 am_hal_reset.c
00000000 l    df *ABS*	00000000 
10001b34 l       .data	00000000 __init_array_end
10001b34 l       .data	00000000 __preinit_array_end
10001b34 l       .data	00000000 __init_array_start
10001b34 l       .data	00000000 __preinit_array_start
000294d6 g     F .text	00000090 _cbor_value_decode_int64_internal
00015c44 g     F .text	00000054 os_mbuf_trim_front
10004388 g     O .bss	000000f0 ble_store_config_peer_secs
000141a0  w    F .text	00000002 GPIO_IRQHandler
0001cb64 g     F .text	00000004 ble_att_clt_tx_read_group_type
000227f4 g     F .text	0000001c ble_hs_conn_find_by_idx
0001a620 g     F .text	0000006c scfg_register
0001b934 g     F .text	00000028 img_mgmt_module_init
00023508 g     F .text	000000a0 ble_hs_hci_evt_acl_process
000188cc g     F .text	000000a0 uart_console_init
00028d1c g     F .text	00000010 cbor_mbuf_writer_init
0001b5b8 g     F .text	00000190 img_mgmt_impl_upload_inspect
00023800 g     F .text	00000050 ble_hs_id_infer_auto
0001cb68 g     F .text	00000004 ble_att_clt_rx_read_group_type
00016834 g     F .text	00000030 os_arch_start
00018be6 g     F .text	00000024 flash_area_id_from_image_slot
10003cec g     O .bss	00000038 ble_hs_stats
00017a5c g     F .text	00000014 conf_fcb_dst
10005310 g       .bss	00000000 __HeapBase
10002f14 g     O .bss	00000008 g_os_task_list
00014e80 g     F .text	00000084 os_idle_task
0001cb58 g     F .text	00000004 ble_att_clt_tx_read_blob
0002d8b8 g     F .text	00000014 strcpy
0002d48c g     F .text	0000000c am_hal_stimer_int_clear
0002b0e0 g     F .text	00000028 am_hal_ble_vs_command_build
10003474 g     O .bss	000000e4 ble_att_stats
10002f58 g     O .bss	00000006 __rand48_seed
00000000 g       .svc_table	00000000 SVC_Count
0002e05c g     F .text	00000018 fmemopen_w
0001b424 g     F .text	000000a4 img_mgmt_state_write
000141a0  w    F .text	00000002 IOMASTER5_IRQHandler
0001a2bc g     F .text	00000048 mem_split_frag
0002587a g     F .text	00000034 ble_sm_proc_can_advance
0001419a  w    F .text	00000002 DebugMon_Handler
00014b04 g     F .text	0000002c print_addr
000157c8 g     F .text	0000005a os_mbuf_copydata
1000252c g     O .bss	00000008 g_os_mempool_list
00015100 g     F .text	0000001a os_callout_init
0001511c g     F .text	0000003c os_callout_stop
0001f756 g     F .text	0000004a ble_gap_notify_rx_event
0001bfb8 g     F .text	00000028 stat_mgmt_module_init
00022e44 g     F .text	00000020 ble_hs_hci_cmd_tx_no_rsp
00027fb6 g     F .text	0000009a boot_read_swap_state
00027208 g     F .text	00000074 ble_svc_gatt_init
0002d73c g     F .text	00000050 add_malloc_block
0002081a g     F .text	0000002c ble_gattc_rx_err
00022b3c g     F .text	00000002 ble_hs_flow_connection_broken
0001c0d8 g     F .text	00000024 mgmt_write_rsp_status
0001540a g     F .text	00000070 os_eventq_put
0002d0e8 g     F .text	00000034 am_hal_ctimer_int_status_get
00023698 g     F .text	0000001c ble_hs_id_set_pub
0001bb5c g     F .text	0000005c log_mgmt_impl_foreach_entry
10000100 g       .data	00000000 __data_start__
0002bf40 g     F .text	00000074 am_hal_ble_boot
00026610 g     F .text	00000018 ble_store_key_from_value_cccd
00015ace g     F .text	0000005c os_mbuf_extend
10000578 g     O .data	00000010 am_ble_nvds_patch
0002d908 g     F .text	00000020 strtok_r
00033780 g     O .text	00000040 g_am_hal_mcuctrl_sram_size
000246d4 g     F .text	00000048 ble_l2cap_sig_timer
00030058 g     F .text	00000024 am_hal_uart_control
0002a386 g     F .text	00000040 fcb_append_finish
10003bfc g     O .bss	0000001c ble_hs_hci_ev_pool
000141a0  w    F .text	00000002 IOSLAVE_IOS_IRQHandler
00028be0 g     F .text	00000014 cbor_buf_writer_init
0002df9c g     F .text	00000024 printf
00033ad0 g     O .text	00000004 stdout
0002fcfc g     F .text	00000058 am_hal_uart_initialize
00033adc g     O .text	0000002c log_fcb_handler
00026652 g     F .text	0000007a ble_store_iterate
00029f86 g     F .text	00000024 fcb_free_sector_cnt
00019344 g     F .text	0000000a log_flush
10004018 g     O .bss	0000001c ble_l2cap_chan_pool
000167a4 g     F .text	0000008c os_arch_os_init
00019fac g     F .text	00000044 log_reboot
0001418e  w    F .text	00000002 HardFault_Handler
0001dcbe g     F .text	000000a6 ble_att_svr_rx_read_type
0002ca8c g     F .text	00000050 hal_timer_init
000217a4 g     F .text	00000080 ble_gatts_bonding_established
00019a38 g     F .text	0000001a mfg_seek_next_with_type
0001dea2 g     F .text	000000c2 ble_att_svr_rx_read_group_type
00020890 g     F .text	00000058 ble_gattc_init
00028eae g     F .text	0000007e cbor_encode_int
00028070 g     F .text	00000054 boot_write_swap_info
00016864 g     F .text	00000060 os_arch_os_start
100038ac g     O .bss	00000088 ble_gap_stats
10003b78 g     O .bss	00000034 ble_gatts_stats
0002bacc g     F .text	00000028 am_hal_ble_int_clear
10003078 g     O .bss	00000001 g_console_ignore_non_nlip
1000023c g     O .data	00000020 id_conf
0001ec1a g     F .text	00000004 ble_gap_master_in_progress
00027ccc g     F .text	0000001a ble_hci_trans_hs_cmd_tx
000225b0 g     F .text	0000002a ble_hs_atomic_conn_delete
1000307a g     O .bss	00000001 g_console_silence_non_nlip
00014c08 g     F .text	00000090 gatt_svr_register_cb
000141a0  w    F .text	00000002 STIMER_CMPR4_IRQHandler
00029588 g     F .text	00000048 cbor_value_advance_fixed
0001e290 g     F .text	00000048 ble_att_svr_init
000141a0  w    F .text	00000002 STIMER_CMPR6_IRQHandler
0002a74e g     F .text	00000010 hal_flash_align
00019268 g     F .text	00000014 log_read
0001bbd0 g     F .text	00000028 log_mgmt_module_init
0002199c g     F .text	0000003c ble_gatts_init
00025854 g     F .text	00000026 ble_sm_ioact_state
00027e82 g     F .text	0000001e boot_magic_compatible_check
0001b130 g     F .text	00000018 img_mgmt_my_version
00027928 g     F .text	0000005c apollo3_hci_write
000265ea g     F .text	0000000e ble_store_read_cccd
00020846 g     F .text	00000024 ble_gattc_rx_mtu
0001422e g     F .text	0000000c SysTick_Handler
00024750 g     F .text	0000003a ble_l2cap_sig_tx
0001dbd4 g     F .text	0000006e ble_att_svr_rx_find_info
00026528 g     F .text	00000040 ble_store_write
0001de64 g     F .text	0000003e ble_att_svr_rx_read_mult
0002467c g     F .text	00000020 ble_l2cap_sig_create_chan
0002c3cc g     F .text	00000090 am_hal_pwrctrl_periph_enable
0001ac26 g     F .text	0000000c cbor_read_object
100006ac g     O .data	00000004 am_hal_ble_default_copy_patch_array
00028cfc g     F .text	0000001e cbor_mbuf_writer
00015e7e g     F .text	0000002a os_memblock_put
10000568 g     O .data	00000010 am_ble_buffer_patch
00017228 g     F .text	0000000c conf_dst_register
00015fa8 g     F .text	00000024 os_msys_get_pkthdr
0002c13c g     F .text	00000008 am_hal_interrupt_master_disable
100030f4 g     O .bss	00000004 flash_map
00016aee g     F .text	00000030 memmove
0001cb54 g     F .text	00000004 ble_att_clt_rx_read
0002a910 g     F .text	00000032 hal_flash_is_erased
00021b04 g     F .text	00000008 ble_hs_lock
00026510 g     F .text	00000018 ble_store_overflow_event
00014204 g     F .text	0000002a PendSV_Handler
0002dffa g     F .text	0000001c snprintf
000240b6 g     F .text	00000014 ble_l2cap_remove_rx
0001418c  w    F .text	00000002 NMI_Handler
00021448 g     F .text	0000005c ble_gatts_connection_broken
000141a0  w    F .text	00000002 IOMASTER1_IRQHandler
00033c1c g       .ARM.exidx	00000000 __exidx_end
00014c98 g     F .text	00000018 gatt_svr_init
00014020 g       .text	00000000 __isr_vector_start
00019028 g     F .text	00000048 log_init
0002e02c g     F .text	0000002e memfile_write
00016718 g     F .text	00000014 os_arch_ctx_sw
00028f2c g     F .text	0000005e cbor_encode_simple_value
0001a24c g     F .text	00000020 stats_init_and_reg
0002f2cc g     F .text	00000068 uart_hal_init
00014674 g     F .text	0000002c hal_system_reset
0002d51c g     F .text	00000042 os_error_to_sys
000141a0  w    F .text	00000002 STIMER_IRQHandler
00014f30 g     F .text	00000088 os_init_idle_task
00028b7c g     F .text	00000038 cbor_buf_reader_init
000141a0  w    F .text	00000002 UART1_IRQHandler
00025ed8 g     F .text	0000003a ble_sm_timer
10000100 g       .data	00000000 __aeabi_unwind_cpp_pr0
00016190 g     F .text	0000000c os_sched_set_current_task
00024050 g     F .text	0000002c ble_l2cap_parse_hdr
00033c1c g       .ARM.exidx	00000000 __etext
100050b4 g     O .bss	00000048 g_sBLEState
0001ec46 g     F .text	0000002a ble_gap_rx_l2cap_update_req
00023b24 g     F .text	0000003e ble_hs_pvcy_set_mode
00020810 g     F .text	0000000a ble_gattc_indicate
00016694 g     F .text	0000004e os_get_uptime_usec
00018644 g     F .text	0000003c console_vprintf
00021e00 g     F .text	00000268 ble_hs_init
0001f484 g     F .text	0000012c ble_gap_update_params
0002d3e0 g     F .text	00000020 am_hal_stimer_counter_clear
000141a0  w    F .text	00000002 STIMER_CMPR1_IRQHandler
000226c8 g     F .text	00000050 ble_hs_conn_free
00018b52 g     F .text	00000026 flash_area_write
10001a80 g     O .data	0000000c SRAM_write_ui32
00015b2a g     F .text	00000108 os_mbuf_pullup
00020658 g     F .text	00000068 ble_gattc_timer
100030d8 g     O .bss	00000010 rx_ev
0001bad4 g     F .text	00000016 log_mgmt_impl_get_module
000168dc g     F .text	000000c0 os_mutex_release
0001a0dc g     F .text	0000000a stats_size
0001c084 g     F .text	0000000e mgmt_streamer_init_writer
0001a224 g     F .text	00000028 stats_register
0002390a g     F .text	00000022 ble_hs_mbuf_pullup_base
0002086a g     F .text	0000001a ble_gattc_rx_indicate_rsp
0001604c g     F .text	00000020 os_sanity_check_register
10003020 g     O .bss	00000004 conf_load_srcs
00029fea g     F .text	00000020 fcb_get_len
000165f8 g     F .text	00000026 os_time_delay
0001f7a0 g     F .text	00000044 ble_gap_notify_tx_event
00028160 g     F .text	0000000a boot_swap_type
000279a4 g     F .text	00000010 ble_hci_trans_reset
000141a0  w    F .text	00000002 IOMASTER2_IRQHandler
00015a02 g     F .text	00000088 os_mbuf_copyinto
00022810 g     F .text	0000000e ble_hs_conn_exists
000141a0  w    F .text	00000002 PDM_IRQHandler
0001ee44 g     F .text	00000024 ble_gap_adv_set_fields
0002ad8c g     F .text	0000005c am_hal_ble_deinitialize
0001869c g     F .text	0000000c console_get_ticks
00025da8 g     F .text	00000010 ble_sm_our_pair_rand
100050fc g     O .bss	00000004 gAmHalResetStatus
0002b798 g     F .text	000000ec am_hal_ble_patch_copy_end_apply
10002f80 g     O .bss	00000034 g_smp_ble_transport
00029566 g     F .text	00000022 cbor_parser_init
00022ff8 g     F .text	0000000c ble_hs_hci_set_hci_version
0001593e g     F .text	000000c4 os_mbuf_prepend
00032704 g     O .text	00000914 am_ble_performance_copy_patch_data
100002bc g     O .data	00000028 ble_hs_cfg
0001e012 g     F .text	00000014 ble_att_svr_prep_clear
000267dc g     F .text	00000038 ble_store_util_status_rr
00025cbc g     F .text	000000ec ble_sm_ltk_req_rx
00015ea8 g     F .text	00000010 os_mempool_module_init
00016e78 g     F .text	0000000c mgmt_evq_set
0001673e g     F .text	0000000a os_arch_in_critical
00026948 g     F .text	0000000e ble_uuid_u16
0002ff44 g     F .text	0000002c am_hal_uart_interrupt_clear
00022904 g     F .text	00000080 ble_hs_conn_find_by_addr
0001c16c g     F .text	00000010 mgmt_evt
000141a0  w    F .text	00000002 UART0_IRQHandler
0001670e g     F .text	0000000a timer_handler
0001bf6c g     F .text	00000024 stat_mgmt_impl_get_group
0001537c g     F .text	00000020 os_dev_lookup
0001619c g     F .text	00000090 os_sched_sleep
00022b40 g     F .text	00000024 ble_hs_flow_track_data_mbuf
0001c052 g     F .text	00000010 mgmt_streamer_reset_buf
00016ad4 g     F .text	0000001a memcpy
00021a88 g     F .text	0000000c ble_hs_evq_get
0001c0fc g     F .text	00000012 mgmt_err_from_cbor
000227ec g     F .text	00000008 ble_hs_conn_find_assert
000174b4 g     F .text	00000034 conf_parse_name
0002cb56 g     F .text	00000004 hal_watchdog_init
0001b208 g     F .text	00000056 img_mgmt_state_set_pending
00028250 g     F .text	000000bc tc_aes128_set_encrypt_key
00017234 g     F .text	00000054 conf_load
100005a8 g     O .data	00000104 am_ble_performance_patch_data
0001b892 g     F .text	0000002a img_mgmt_impl_erase_image_data
000213d0 g     F .text	00000078 ble_gatts_register_svcs
0002d510 g     F .text	0000000c os_cputime_init
1000302c g     O .bss	00000004 conf_handlers
00033874 g     O .text	00000018 apollo3_flash_dev
10005030 g     O .bss	00000084 g_psPatchBuffer
0001e0d8 g     F .text	000000b4 ble_att_svr_rx_exec_write
0001f0cc g     F .text	00000054 ble_gap_terminate_with_conn
000236b4 g     F .text	00000078 ble_hs_id_set_rnd
0001426c g     F .text	00000000 .hidden __aeabi_uldivmod
0001cbc0 g     F .text	00000040 ble_att_clt_tx_indicate
0002a942 g     F .text	00000062 hal_flash_isempty
00014d1c g     F .text	00000048 split_app_init
000141a0  w    F .text	00000002 WATCHDOG_IRQHandler
00000020 g       *ABS*	00000000 _imghdr_size
00016154 g     F .text	00000030 os_sched_ctx_sw_hook
0002a48e g     F .text	00000052 fcb_elem_info
1000305c g     O .bss	00000004 console_is_midline
00015660 g     F .text	00000014 os_mbuf_free
0001f852 g     F .text	00000038 ble_gap_mtu_event
0001cc0a g     F .text	00000026 ble_att_cmd_prepare
10000100 g     O .data	00000004 SystemCoreClock
00014660 g     F .text	00000002 hal_system_init
000261c4 g     F .text	0000003c ble_sm_tx
00024020 g     F .text	00000028 ble_l2cap_chan_free
00028f8a g     F .text	0000000e cbor_encode_byte_string
0003373c g     O .text	00000004 am_hal_ble_num_default_patches_b0
0001f704 g     F .text	00000026 ble_gap_identity_event
00016748 g     F .text	00000044 os_arch_task_stack_init
00026956 g     F .text	0000003e ble_uuid_init_from_att_buf
0002d78c g     F .text	0000006c malloc
0001d990 g     F .text	00000030 ble_att_svr_read_handle
00018b2c g     F .text	00000026 flash_area_read
0001b960 g     F .text	00000014 img_mgmt_impl_log_upload_start
00017724 g     F .text	0000002c conf_str_from_bytes
00014da4 g     F .text	00000044 __assert_func
000216b0 g     F .text	000000cc ble_gatts_rx_indicate_ack
00016bf8 g     F .text	00000018 imgr_my_version
0002d11c g     F .text	0000001c am_hal_triple_read
0001c7e0 g     F .text	000001f8 ble_att_inc_tx_stat
0001b832 g     F .text	00000032 img_mgmt_impl_read
000162f0 g     F .text	00000048 os_sched_wakeup_ticks
000185e4 g     F .text	00000060 console_pkg_init
00016cb4 g     F .text	0000002c imgmgr_module_init
00014194  w    F .text	00000002 UsageFault_Handler
0002cfc4 g     F .text	00000094 am_hal_ctimer_period_set
0002dfc0 g     F .text	0000003a vsnprintf
0002d928 g     F .text	0000000c strtoll
1000250c g     O .bss	00000008 g_callout_list
00023be8 g     F .text	00000038 ble_hs_pvcy_add_entry
0002d058 g     F .text	00000028 am_hal_ctimer_int_enable
00026994 g     F .text	00000026 ble_uuid_init_from_att_mbuf
00022fec g     F .text	0000000c ble_hs_hci_set_le_supported_feat
0002177c g     F .text	00000028 ble_gatts_tx_notifications
0002c060 g     F .text	00000058 am_hal_flash_program_main
0001be3c g     F .text	00000008 os_mgmt_module_init
0002dc78 g     F .text	00000300 tfp_format
0001b284 g     F .text	000001a0 img_mgmt_state_read
1005fe48 g       *ABS*	00000000 __HeapLimit
10001b38 g       .bss	00000000 __bss_start__
00021b0c g     F .text	00000008 ble_hs_unlock
100004a8 g     O .data	000000c0 am_ble_buffer_nvds_data
00014664 g     F .text	00000010 hal_debugger_connected
00026a14 g     F .text	00000006 ble_uuid_length
0001cb78 g     F .text	00000004 ble_att_clt_tx_exec_write
0001cb3c g     F .text	00000004 ble_att_clt_rx_find_info
0002a7c0 g     F .text	00000070 hal_flash_write
00020758 g     F .text	000000b8 ble_gattc_indicate_custom
0002ac9c g     F .text	00000048 am_hal_ble_wakeup_set
0001f7e4 g     F .text	0000006e ble_gap_subscribe_event
000142c4 g     F .text	000002be .hidden __udivmoddi4
00026240 g     F .text	000000a8 ble_sm_lgcy_io_action
100006c4 g     O .data	000000c8 am_ble_buffer_nvds_data_b0
00028206 g     F .text	00000040 boot_set_confirmed_multi
00029770 g     F .text	00000038 _cbor_value_copy_string
000235a8 g     F .text	0000000e ble_hs_hci_util_handle_pb_bc_join
0002282c g     F .text	000000d8 ble_hs_conn_addrs
10002f0c g     O .bss	00000004 g_current_task
0001606c g     F .text	00000084 os_sanity_run
00028fda g     F .text	0000002c cbor_encoder_close_container
0001672c g     F .text	0000000c os_arch_save_sr
000239c2 g     F .text	00000010 ble_hs_misc_peer_addr_type_to_id
00021824 g     F .text	000000e4 ble_gatts_bonding_restored
0002fbc8 g     F .text	00000084 hal_uart_close
00027f08 g     F .text	0000001c boot_write_magic
00015dc0 g     F .text	00000014 os_mempool_init
00017178 g     F .text	0000002c config_pkg_init
0001b1c4 g     F .text	00000026 img_mgmt_state_any_pending
00016620 g     F .text	00000038 os_gettimeofday
10002f1c g     O .bss	00000001 g_task_id
000174e8 g     F .text	00000016 conf_parse_and_lookup
00027cf8 g     F .text	00000160 apollo3_ble_hci_init
10003d24 g     O .bss	00000001 ble_hs_sync_state
0001acb8 g     F .text	0000013c img_mgmt_read_info
10000284 g     O .data	00000008 g_stats_registry
0001ecd8 g     F .text	00000124 ble_gap_adv_start
0001cb80 g     F .text	00000040 ble_att_clt_tx_notify
00017494 g     F .text	00000020 conf_handler_lookup
0001c062 g     F .text	00000014 mgmt_streamer_write_at
1000078c g     O .data	00000010 am_ble_buffer_patch_b0
00022fdc g     F .text	00000010 ble_hs_hci_acl_tx
0001be2c g     F .text	00000010 os_mgmt_register_group
0001dd64 g     F .text	0000007e ble_att_svr_rx_read
0002ff70 g     F .text	000000e8 am_hal_uart_power_control
0002d4be g     F .text	00000016 get_le32
0002f5cc g     F .text	0000002c hal_uart_blocking_tx
00033c04 g       .text	00000000 __exidx_start
0002e074 g     F .text	0000011c strntoumax
0001f078 g     F .text	00000004 ble_gap_disc_active
000160f0 g     F .text	00000010 os_sanity_init
0002b05c g     F .text	00000084 am_hal_ble_default_trim_set_ramcode
000306e0 g     O .text	0000001c g_smp_cbor_cfg
000156a6 g     F .text	000000a8 os_mbuf_append
00019a52 g     F .text	0000000a mfg_read_tlv_mmr_ref
0001cb50 g     F .text	00000004 ble_att_clt_tx_read
000141a4 g     F .text	00000014 os_set_env
0001cb74 g     F .text	00000004 ble_att_clt_rx_prep_write
0002baf4 g     F .text	000000b0 am_hal_ble_plf_reg_read
0002a6e8 g     F .text	00000010 hal_bsp_flash_dev
0002ce8c g     F .text	00000054 am_hal_ctimer_start
000146a4 g     F .text	0000004c __libc_init_array
00023b18 g     F .text	0000000c ble_hs_pvcy_our_irk
00033ad4 g     O .text	00000008 MemFile_methods
10002f00 g     O .bss	0000000c g_os_sanity_check_mu
000141a0  w    F .text	00000002 CLKGEN_IRQHandler
00021b14 g     F .text	0000001c ble_hs_process_rx_data_queue
00026aa2 g     F .text	00000050 ble_sm_alg_s1
000311a8 g     O .text	00000006 ble_hs_misc_null_addr
00018b9e g     F .text	0000000a flash_area_align
0001649c g     F .text	0000005c os_task_info_get
0002cc2c g     F .text	000001b8 am_hal_cachectrl_control
00014628 g     F .text	00000038 _sbrk
00026604 g     F .text	0000000c ble_store_delete_cccd
00029856 g     F .text	00000014 cbor_value_calculate_string_length
0002c7b8 g     F .text	00000038 os_tick_idle
00018680 g     F .text	0000001c console_printf
00023ac2 g     F .text	00000032 ble_hs_pvcy_remove_entry
0001844c g     F .text	00000008 console_blocking_mode
00017288 g     F .text	00000018 conf_ensure_loaded
000295d0 g     F .text	0000014e cbor_value_enter_container
0001ee68 g     F .text	0000000a ble_gap_adv_active
0002c054 g     F .text	0000000c am_hal_flash_page_erase
000146a0  w    F .text	00000002 _init
0002d0a8 g     F .text	00000020 am_hal_ctimer_int_clear
0001cc4c g     F .text	0000004a ble_att_tx
00021950 g     F .text	0000004c ble_gatts_count_cfg
0002a830 g     F .text	000000e0 hal_flash_erase
00027e7c g     F .text	00000006 boot_swap_info_off
000237b4 g     F .text	00000032 ble_hs_id_copy_addr
0002a4e0 g     F .text	00000048 fcb_getnext_in_area
00020740 g     F .text	0000000a ble_gattc_notify
0001a604 g     F .text	0000001a scfg_save_val
0001f994 g     F .text	00000038 ble_gap_event_listener_unregister
00024116 g     F .text	000000ca ble_l2cap_rx
00016e84 g     F .text	00000026 smp_rx_req
0002c7f0 g     F .text	00000064 os_tick_init
0001f72a g     F .text	0000002c ble_gap_repeat_pairing_event
0002a20a g     F .text	0000001e fcb_clear
0002745e g     F .text	00000040 ble_store_config_read
000238c2 g     F .text	0000000a ble_hs_mbuf_acl_pkt
000141a0  w    F .text	00000002 RTC_IRQHandler
0002a3c6 g     F .text	000000c8 fcb_elem_crc8
0002aaa0 g     F .text	0000000c apollo3_periph_create
00027f24 g     F .text	00000062 boot_write_trailer
0001cb7c g     F .text	00000004 ble_att_clt_rx_exec_write
0001aee8 g     F .text	00000014 img_mgmt_dfu_pending
00019494 g     F .text	00000008 log_console_get
000279d0 g     F .text	00000048 ble_hci_trans_buf_alloc
000253d8 g     F .text	0000000a ble_sm_gen_pair_rand
00014fb8 g     F .text	000000d8 os_init
000280c4 g     F .text	0000009c boot_swap_type_multi
0002bba4 g     F .text	0000004c am_hal_ble_check_32k_clock
000214a4 g     F .text	00000148 ble_gatts_start
00014120 g     F .text	0000006c Reset_Handler
00022e00 g     F .text	00000020 ble_hs_hci_set_buf_sz
00029fc4 g     F .text	00000026 fcb_put_len
00019718 g     F .text	00000040 modlog_append
00017048 g     F .text	0000004c smp_ble_pkg_init
10003e0c g     O .bss	00000002 ble_hs_hci_avail_pkts
00018240 g     F .text	0000000c console_echo
00028a58 g     F .text	0000001a _copy
00025f92 g     F .text	000000a6 ble_sm_enc_initiate
0002ba6c g     F .text	00000044 am_hal_ble_int_enable
10003404 g     O .bss	00000001 sysinit_active
10003079 g     O .bss	00000001 g_console_silence
00021658 g     F .text	00000058 ble_gatts_send_next_indicate
00033968 g     O .text	00000004 g_AM_HAL_GPIO_DISABLE
00014d64 g     F .text	0000000c split_app_active_get
0002d498 g     F .text	00000008 put_le16
0001f5fe g     F .text	00000024 ble_gap_unpair_oldest_peer
10003cbc g     O .bss	00000002 ble_hs_max_services
000155f6 g     F .text	0000000a os_mbuf_pool_init
0001d804 g     F .text	00000038 ble_att_svr_find_by_uuid
00028fa6 g     F .text	0000000a cbor_encoder_create_array
0001423a g     F .text	0000001e os_default_irq_asm
00016338 g     F .text	0000000c os_sched_next_task
0001f1a0 g     F .text	00000090 ble_gap_conn_broken
00016100 g     F .text	00000054 os_sched_insert
00015158 g     F .text	00000080 os_callout_reset
00019a68 g     F .text	00000040 mfg_init
0001ca1e g     F .text	0000002c ble_att_mtu
000153e0 g     F .text	00000010 os_dev_reset
0001caac g     F .text	00000028 ble_att_clt_rx_error
0002469c g     F .text	00000038 ble_l2cap_sig_conn_broken
00022984 g     F .text	0000007c ble_hs_conn_timer
0002df80 g     F .text	0000001c fprintf
000239b2 g     F .text	00000010 ble_hs_misc_own_addr_type_to_id
00021d50 g     F .text	0000000c ble_hs_hw_error
000234cc g     F .text	0000003c ble_hs_hci_evt_process
000168c8 g     F .text	00000014 os_mutex_init
0001b748 g     F .text	00000040 img_mgmt_impl_erase_slot
0001460c g     F .text	0000001c _sbrkInit
0002160c g     F .text	0000004c ble_gatts_conn_init
0001c030 g     F .text	00000010 mgmt_streamer_alloc_rsp
0001547a g     F .text	0000001a os_eventq_get_no_wait
0001cc30 g     F .text	0000001c ble_att_cmd_get
00018c0c g     F .text	00000068 flash_map_init
00026f94 g     F .text	0000000c ble_svc_dis_firmware_revision_set
0002e018 g     F .text	00000014 vprintf
000263f2 g     F .text	000000b2 ble_sm_lgcy_random_rx
0001429c g     F .text	00000028 .hidden __popcountsi2
00014f24 g     F .text	0000000c os_started
10000000 g       .bss	00000000 _ram_start
00026864 g     F .text	0000003c ble_uuid_cmp
10000264 g     O .data	00000020 reboot_conf_handler
10002f60 g     O .bss	00000004 g_smp_evq
00017468 g     F .text	00000010 conf_unlock
00025cac g     F .text	00000010 ble_sm_enc_key_refresh_rx
00023010 g     F .text	00000048 ble_hs_hci_init
000162b4 g     F .text	0000003c os_sched_os_timer_exp
10000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00021abc g     F .text	00000024 ble_hs_is_parent_task
0001b148 g     F .text	00000010 img_mgmt_register_group
0001a204 g     F .text	00000020 stats_group_find
0003083c g     O .text	0000002c log_console_handler
0001a44e g     F .text	0000001e rwlock_release_write
0002fd54 g     F .text	00000030 am_hal_uart_interrupt_enable
0001a5c6 g     F .text	0000003e scfg_save_setting
0001ae2a g     F .text	0000003c img_mgmt_find_by_hash
0002982a g     F .text	0000002c cbor_value_advance
00015770 g     F .text	00000058 os_mbuf_appendfrom
00028fcc g     F .text	0000000e cbor_encoder_create_indef_byte_string
00019070 g     F .text	00000010 log_list_get_next
000141a0  w    F .text	00000002 IOMASTER0_IRQHandler
00021d30 g     F .text	00000020 ble_hs_sched_reset
00016ce0 g     F .text	0000003c imgr_ver_str
00019a5c g     F .text	0000000a mfg_read_tlv_hash
00033740 g     O .text	00000040 g_am_hal_mcuctrl_flash_size
0001dc42 g     F .text	0000007c ble_att_svr_rx_find_type_value
10001b34 g       .data	00000000 __data_end__
00028bb4 g     F .text	0000002c cbor_buf_writer
00019170 g     F .text	000000d4 log_register
00023660 g     F .text	00000038 ble_hs_hci_util_data_hdr_strip
0002a528 g     F .text	00000018 fcb_getnext_area
00017750 g     F .text	00000026 conf_export_cb
0001a3d4 g     F .text	00000026 rwlock_release_read
000206c0 g     F .text	00000080 ble_gattc_notify_custom
0002816a g     F .text	00000090 boot_set_pending_multi
000269bc g     F .text	00000058 ble_uuid_flat
00016ef0 g     F .text	00000014 smp_ble_get_mtu
0002aee8 g     F .text	00000174 am_hal_ble_power_control
10004290 g     O .bss	00000004 ble_store_config_num_peer_secs
00026170 g     F .text	00000020 ble_sm_create_chan
0002613c g     F .text	00000034 ble_sm_init
0002fe38 g     F .text	0000010c am_hal_uart_configure
0001db40 g     F .text	00000094 ble_att_svr_rx_mtu
0001d74c g     F .text	0000000c ble_att_svr_prev_handle
000264bc g     F .text	0000002c ble_store_read
10002f50 g     O .bss	00000004 g_os_time
0002c144 g     F .text	00000006 am_hal_interrupt_master_set
00014196  w    F .text	00000002 SecureFault_Handler
0001c9d8 g     F .text	0000000a ble_att_set_peer_mtu
0002f480 g     F .text	00000040 hal_uart_init_cbs
0001ca4c g     F .text	00000028 ble_att_create_chan
0002cb5c g     F .text	00000002 hal_watchdog_tickle
0001c040 g     F .text	00000012 mgmt_streamer_trim_front
10005310 g       .bss	00000000 __bss_end__
00015600 g     F .text	0000002e os_mbuf_get
000239d4 g     F .text	00000014 ble_hs_misc_restore_irks
00026776 g     F .text	00000066 ble_store_util_delete_peer
10000234 g     O .data	00000004 id_app_str
00019c9c g     F .text	0000008c log_reboot_reason_str
0001ec20 g     F .text	00000026 ble_gap_rx_rd_rem_sup_feat_complete
0002a00a g     F .text	00000034 fcb_sector_hdr_init
0001ca02 g     F .text	0000001c ble_att_truncate_to_mtu
00025e5c g     F .text	00000010 ble_sm_peer_pair_rand
00029faa g     F .text	0000001a fcb_is_empty
00022666 g     F .text	00000034 ble_hs_conn_chan_insert
000190c0 g     F .text	00000010 log_hdr_len
10003cb8 g     O .bss	00000002 ble_hs_max_attrs
10004208 g     O .bss	00000080 ble_store_config_cccds
00015f98 g     F .text	00000010 os_msys_reset
000141a0 g     F .text	00000002 Default_Handler
000146f0 g     F .text	00000018 _start
0002efd8 g     F .text	00000010 log_mgmt_register_group
0003301c g     O .text	00000720 am_ble_buffer_patch_data_b0
0001e238 g     F .text	00000058 ble_att_svr_start
0001934e g     F .text	0000000c log_fill_current_img_hash
0001be7e g     F .text	0000004c os_mgmt_impl_task_info
10000238 g     O .data	00000004 id_bsp_str
10004ea8 g     O .bss	00000006 g_ble_mac_address
00026eb0 g     F .text	00000084 ble_svc_ans_init
100033f4 g     O .bss	00000010 g_stats_stats
0001b25e g     F .text	00000024 img_mgmt_state_confirm
00028a8c g     F .text	0000008c base64_encode
000141b8 g     F .text	00000006 os_arch_init_task_stack
1000428c g     O .bss	00000004 ble_store_config_num_our_secs
00015516 g     F .text	00000022 os_eventq_run
0001bf90 g     F .text	00000028 stat_mgmt_impl_foreach_entry
0002d4d4 g     F .text	00000020 swap_in_place
00017454 g     F .text	00000014 conf_lock
00015df0 g     F .text	0000003e os_memblock_from
00031554 g     O .text	00000010 boot_img_magic
00014d88 g     F .text	0000001c split_write_split
0001c13e g     F .text	00000016 mgmt_ntoh_hdr
00018364 g     F .text	00000034 console_lock
00027c80 g     F .text	0000004c apollo3_hci_int
0001a0e8 g     F .text	00000068 stats_walk
000141a0  w    F .text	00000002 ADC_IRQHandler
10003028 g     O .bss	00000004 conf_save_dst
00025f12 g     F .text	00000080 ble_sm_pair_initiate
00024798 g     F .text	0000003e ble_l2cap_sig_cmd_get
00026728 g     F .text	00000030 ble_store_util_bonded_peers
100030fc g     O .bss	0000005a id_mfghash
0001b11c g     F .text	00000014 img_mgmt_dfu_confirmed
10001b60 g     O .bss	00000050 g_idle_task
0002d0c8 g     F .text	00000020 am_hal_ctimer_int_set
1000028c g     O .data	00000004 sysinit_panic_cb
000141a0  w    F .text	00000002 IOMASTER4_IRQHandler
000239e8 g     F .text	00000014 ble_mqueue_init
1000510c g     O .bss	00000002 g_pui8RxBuffer
0001c076 g     F .text	0000000e mgmt_streamer_init_reader
10002efc g     O .bss	00000004 g_os_sanity_check_list
0002bd88 g     F .text	000001b8 am_hal_ble_patch_complete
000227bc g     F .text	00000018 ble_hs_conn_find
0002372c g     F .text	00000050 ble_hs_id_addr
0002b884 g     F .text	0000002c am_hal_ble_default_copy_patch_apply
0002d8cc g     F .text	0000001e strncpy
0002f4c0 g     F .text	000000a4 hal_uart_start_tx
000264e8 g     F .text	00000028 ble_store_delete
000141a0  w    F .text	00000002 CTIMER_IRQHandler
00015e2e g     F .text	00000032 os_memblock_get
0002c12c g     F .text	00000010 am_hal_flash_store_ui32
0001622c g     F .text	00000088 os_sched_wakeup
000276c8 g     F .text	0000005c ble_store_config_init
00015596 g     F .text	00000022 os_mqueue_get
0002d55e g     F .text	00000010 os_sem_init
00021ab0 g     F .text	0000000c ble_hs_evq_set
0001f88c g     F .text	00000028 ble_gap_preempt_no_lock
0002d838 g     F .text	00000060 realloc
0001a28c g     F .text	00000030 mem_init_mbuf_pool
00022820 g     F .text	0000000c ble_hs_conn_first
0002c520 g     F .text	000000d8 am_hal_pwrctrl_low_power_init
00014de8 g     F .text	00000098 os_default_irq
00016ec4 g     F .text	0000002c smp_pkg_init
0002c4d0 g     F .text	00000050 am_hal_pwrctrl_blebuck_trim
00018ba8 g     F .text	0000000a flash_area_erased_val
0002cf0c g     F .text	00000028 am_hal_ctimer_clear
100007bc g     O .data	000012b4 am_ble_performance_patch_data_b0
10003bb4 g     O .bss	00000001 ble_hs_enabled_state
0001ecb0 g     F .text	00000026 ble_gap_timer
00022f28 g     F .text	000000b4 ble_hs_hci_acl_tx_now
000141a0  w    F .text	00000002 IOSLAVE_ACC_IRQHandler
00015dd4 g     F .text	0000001c os_mempool_ext_init
00026114 g     F .text	00000026 ble_sm_connection_broken
10002f10 g     O .bss	00000004 g_os_last_ctx_sw_time
0002d570 g     F .text	00000064 os_sem_release
000141a0  w    F .text	00000002 SOFTWARE0_IRQHandler
0001b1ea g     F .text	0000001e img_mgmt_slot_in_use
0002b47c g     F .text	000002a8 am_hal_ble_patch_apply
00016a8c g     F .text	00000048 memcmp
0001678c g     F .text	00000018 os_arch_init
000141a0  w    F .text	00000002 STIMER_CMPR3_IRQHandler
10004eb0 g     O .bss	00000100 g_read_buf
00027ea0 g     F .text	00000030 bootutil_buffer_is_erased
10004478 g     O .bss	00000004 BLE
0001c0a4 g     F .text	0000001c mgmt_register_group
0002a03e g     F .text	0000004e fcb_sector_hdr_read
00017aac g     F .text	00000096 conf_line_parse
00014584  w    F .text	00000002 .hidden __aeabi_ldiv0
0002e800 g     F .text	00000030 crc8_calc
000177e0 g     F .text	00000054 conf_commit
0001a274 g     F .text	0000000c sysinit_start
0002cadc g     F .text	0000007a hal_timer_config
0001539c g     F .text	00000044 os_dev_open
000275e0 g     F .text	00000028 ble_store_config_write
00016b7c g     F .text	0000002a strncat
0001f6ba g     F .text	0000004a ble_gap_enc_event
00014d70 g     F .text	00000018 split_mode_set
0002a08c g     F .text	0000012c fcb_init
00015c98 g     F .text	000000ae os_mbuf_pack_chains
00016ffc g     F .text	0000004c smp_ble_gatt_svr_init
100006b4 g     O .data	0000000c am_hal_ble_default_patch_array
000185dc g     F .text	00000008 console_is_init
00022e64 g     F .text	00000090 ble_hs_hci_cmd_tx
00017310 g     F .text	00000058 conf_save
0002d5d4 g     F .text	000000b4 os_sem_pend
0002ade8 g     F .text	00000100 am_hal_ble_config
0002cb5a g     F .text	00000002 hal_watchdog_enable
0001b974 g     F .text	00000014 img_mgmt_impl_log_upload_done
0001a46c g     F .text	00000030 rwlock_init
00023ec0 g     F .text	00000078 ble_hs_startup_go
0001a37a g     F .text	0000005a rwlock_acquire_read
00021d5c g     F .text	0000007c ble_hs_start
000155b8 g     F .text	0000003e os_mqueue_put
00021ce8 g     F .text	0000000a ble_hs_timer_resched
00015ef4 g     F .text	0000004c os_msys_register
10001cb0 g     O .bss	00000004 g_os_idle_ctr
00018a7c g     F .text	00000034 flash_area_open
0002d934 g     F .text	0000000c strtoull
000158c4 g     F .text	0000007a os_mbuf_cmpf
00019244 g     F .text	00000024 log_walk_body
00018e1c g     F .text	00000054 id_init
00028050 g     F .text	00000020 boot_read_swap_state_by_id
000268a0 g     F .text	000000a8 ble_uuid_to_str
00020d6a g     F .text	0000008e ble_gatts_clt_cfg_access
0001aed4 g     F .text	00000014 img_mgmt_dfu_started
00016b1e g     F .text	00000038 memset
10000588 g     O .data	00000010 am_ble_performance_copy_patch
00014020 g       .text	00000100 __isr_vector
0001df64 g     F .text	0000006e ble_att_svr_rx_write
10003408 g     O .bss	00000030 g_img_mgmt_state
00014a8c g     F .text	00000078 main
000278d8 g     F .text	00000050 apollo3_hci_radio_shutdown
000141a0  w    F .text	00000002 STIMER_CMPR2_IRQHandler
00019310 g     F .text	00000034 log_read_body
0001e1ca g     F .text	0000006c ble_att_svr_rx_indicate
0002a5c8 g     F .text	00000034 fcb_getnext
100006b0 g     O .data	00000004 am_hal_ble_default_copy_patches
00026758 g     F .text	0000001e ble_store_util_delete_all
10002f68 g     O .bss	00000018 g_smp_ble_mq
00018884 g     F .text	00000038 console_out_nolock
00028e3e g     F .text	00000070 cbor_encode_uint
000240aa g     F .text	0000000c ble_l2cap_get_conn_handle
000196e4 g     F .text	00000034 modlog_register
00027faa g     F .text	0000000c boot_read_image_ok
0002a5fc g     F .text	00000078 fcb_rotate
0001a280 g     F .text	0000000c sysinit_end
0001f120 g     F .text	00000040 ble_gap_terminate
00019794 g     F .text	000000c8 modlog_init
000141be g     F .text	00000046 SVC_Handler
0001f9cc g     F .text	00000080 ble_gap_init
0001b90c g     F .text	00000028 img_mgmt_impl_erased_val
0002638a g     F .text	00000068 ble_sm_lgcy_random_exec
00027ce8 g     F .text	00000010 ble_hci_trans_set_acl_free_cb
0001f07c g     F .text	00000004 ble_gap_conn_active
00015400 g     F .text	0000000a os_eventq_inited
0001becc g     F .text	0000005c os_mgmt_impl_reset
0001c10e g     F .text	00000030 mgmt_ctxt_init
0002a76e g     F .text	00000052 hal_flash_read
00023850 g     F .text	00000018 ble_hs_id_reset
00018398 g     F .text	0000003c console_unlock
0002bfb4 g     F .text	000000a0 am_hal_ble_tx_power_set
0001557c g     F .text	00000008 os_eventq_dflt_get
00015494 g     F .text	00000082 os_eventq_get
10000598 g     O .data	00000010 am_ble_performance_patch
00018b78 g     F .text	00000026 flash_area_erase
0001bb4c g     F .text	00000010 log_mgmt_impl_get_next_idx
00015694 g     F .text	00000012 os_mbuf_len
000166e2 g     F .text	0000002a os_time_ms_to_ticks
00019128 g     F .text	0000000a log_walk
00015234 g     F .text	0000003c os_callout_wakeup_ticks
0001ec1e g     F .text	00000002 ble_gap_rx_adv_report
0002407c g     F .text	0000002e ble_l2cap_prepend_hdr
000238d6 g     F .text	0000000a ble_hs_mbuf_att_pkt
100030f8 g     O .bss	00000004 flash_map_entries
00015822 g     F .text	000000a2 os_mbuf_adj
000141a0  w    F .text	00000002 SCARD_IRQHandler
0001f294 g     F .text	00000036 ble_gap_reset_state
0001c154 g     F .text	00000016 mgmt_hton_hdr
10003376 g     O .bss	00000002 reboot_cnt
00017478 g     F .text	0000001c conf_register
00014020 g       .imghdr	00000000 __text
0002e7fc g     F .text	00000004 crc8_init
10003438 g     O .bss	00000004 img_mgmt_dfu_callbacks_fn
00017a70 g     F .text	00000032 conf_fcb_kv_save
00019a26 g     F .text	00000012 mfg_seek_next
0002f164 g     F .text	00000010 stat_mgmt_register_group
10004034 g     O .bss	00000034 ble_l2cap_stats
00021df6 g     F .text	00000008 ble_hs_tx_data
00016b56 g     F .text	00000018 strcmp
00018bd8 g     F .text	0000000e flash_area_read_is_empty
00018858 g     F .text	0000002c uart_console_blocking_mode
00025c98 g     F .text	00000014 ble_sm_enc_change_rx
00016184 g     F .text	0000000c os_sched_get_current_task
00028fb0 g     F .text	0000001c cbor_encoder_create_map
000183d4 g     F .text	00000078 console_write
0001f688 g     F .text	00000032 ble_gap_passkey_event
00024048 g     F .text	00000008 ble_l2cap_is_mtu_req_sent
00016a7c g     F .text	00000010 lrand48
0002a700 g     F .text	00000004 hal_bsp_hw_id
0002bbf0 g     F .text	000000a8 am_hal_ble_plf_reg_write
0001cb48 g     F .text	00000004 ble_att_clt_tx_read_type
000145a8 g     F .text	00000030 SystemInit
00017a04 g     F .text	00000058 conf_fcb_src
00026814 g     F .text	00000050 ble_uuid_init_from_buf
0002bab0 g     F .text	0000001c am_hal_ble_int_status
00025a32 g     F .text	000000e4 ble_sm_process_result
00023868 g     F .text	00000024 ble_hs_log_mbuf
0001927c g     F .text	0000004a log_read_hdr
00015538 g     F .text	00000042 os_eventq_remove
000227d4 g     F .text	00000018 ble_hs_conn_insert
000172a0 g     F .text	00000068 conf_save_one
000245c4 g     F .text	000000b8 ble_l2cap_sig_update
000174fe g     F .text	00000176 conf_value_from_str
00019080 g     F .text	00000040 log_module_get_name
0002712c g     F .text	00000074 ble_svc_gap_init
0002d3c0 g     F .text	00000020 am_hal_stimer_counter_get
0002d4a0 g     F .text	00000014 put_le32
0001cb6c g     F .text	00000004 ble_att_clt_rx_write
0002d3ac g     F .text	00000014 am_hal_stimer_config
0001ae68 g     F .text	00000014 img_mgmt_dfu_stopped
00021908 g     F .text	00000048 ble_gatts_add_svcs
000319cc g     O .text	00000d38 am_ble_buffer_patch_data
0001b8bc g     F .text	00000050 img_mgmt_impl_swap_type
0002d898 g     F .text	00000020 sprintf
0002fd84 g     F .text	00000030 am_hal_uart_interrupt_disable
000230a8 g     F .text	00000038 ble_hs_hci_cmd_send_buf
0001cc00 g     F .text	0000000a ble_att_clt_rx_indicate
0001cb40 g     F .text	00000004 ble_att_clt_tx_find_type_value
0001cb5c g     F .text	00000004 ble_att_clt_rx_read_blob
00016344 g     F .text	00000022 os_sched
0001cb44 g     F .text	00000004 ble_att_clt_rx_find_type_value
00022650 g     F .text	00000016 ble_hs_conn_chan_find_by_scid
100003e0 g     O .data	0000001c ble_svc_dis_data
0002f564 g     F .text	00000068 hal_uart_start_rx
0002a75e g     F .text	00000010 hal_flash_erased_val
0001cb4c g     F .text	00000004 ble_att_clt_rx_read_type
0001b988 g     F .text	00000014 img_mgmt_impl_log_pending
000238e0 g     F .text	0000002a ble_hs_mbuf_to_flat
10004288 g     O .bss	00000004 ble_store_config_num_cccds
0001699c g     F .text	000000e0 os_mutex_pend
00000000 g       .svc_table	00000000 SVC_Table
000238cc g     F .text	0000000a ble_hs_mbuf_l2cap_pkt
00025460 g     F .text	00000040 ble_sm_proc_find
00033c1c g       *ABS*	00000000 _init_data
0002b108 g     F .text	00000314 am_hal_ble_blocking_transfer
1005fff8 g       .bss	00000000 __StackTop
10001a70 g     O .data	0000000c am_hal_ble_default_patch_array_b0
0001c9e2 g     F .text	00000020 ble_att_chan_mtu
00028f98 g     F .text	0000000e cbor_encode_text_string
000235b8 g     F .text	00000040 ble_hs_hci_util_read_adv_tx_pwr
0001a744 g     F .text	000001f6 cbor_read_array
1000079c g     O .data	00000010 am_ble_nvds_patch_b0
00015584 g     F .text	00000012 os_mqueue_init
000171a4 g     F .text	00000002 config_pkg_init_stage2
00028a7a g     F .text	00000012 _double_byte
0002657e g     F .text	0000000c ble_store_write_our_sec
0002c45c g     F .text	00000074 am_hal_pwrctrl_periph_disable
00023990 g     F .text	00000022 ble_hs_misc_conn_chan_find_reqd
0002ce0c g     F .text	00000080 am_hal_ctimer_config_single
0002d8ea g     F .text	0000001e strsep
0001b158 g     F .text	0000006c img_mgmt_state_flags
00017b44 g     F .text	0000005a conf_line_make
0001e18c g     F .text	0000003e ble_att_svr_rx_notify
0001ca74 g     F .text	00000038 ble_att_init
0001d97a g     F .text	00000016 ble_att_svr_ticks_until_tmo
000141a0  w    F .text	00000002 VCOMP_IRQHandler
000237e6 g     F .text	0000001a ble_hs_id_use_addr
00022624 g     F .text	0000002c ble_hs_conn_can_alloc
000225da g     F .text	0000002c ble_hs_atomic_conn_flags
00027124 g     F .text	00000008 ble_svc_gap_device_name
0001baaa g     F .text	0000002a log_mgmt_impl_get_log
00023a1e g     F .text	0000003e ble_mqueue_put
0002363a g     F .text	00000026 ble_hs_hci_util_set_random_addr
0002b960 g     F .text	0000010c am_hal_ble_int_service
0002d400 g     F .text	00000078 am_hal_stimer_compare_delta_set
00018ab0 g     F .text	0000007c flash_area_to_sectors
0002ace4 g     F .text	000000a8 am_hal_ble_initialize
0001edfc g     F .text	00000048 ble_gap_adv_set_data
00022b64 g     F .text	000000b0 ble_hs_flow_startup
0002471c g     F .text	00000034 ble_l2cap_sig_init
0002cf34 g     F .text	00000090 am_hal_ctimer_read
000151d8 g     F .text	0000005c os_callout_tick
00022a00 g     F .text	00000034 ble_hs_conn_init
00031578 g     O .text	00000048 sysflash_map_dflt
0001f8b4 g     F .text	00000018 ble_gap_preempt
000188bc g     F .text	00000010 uart_console_is_init
00014120 g       .text	00000000 __isr_vector_end
00015090 g     F .text	00000022 os_start
0002481c g     F .text	0000001e ble_l2cap_sig_reject_invalid_cid_tx
0002d4f4 g     F .text	0000001c swap_buf
0001f3ec g     F .text	00000098 ble_gap_rx_param_req
0002658a g     F .text	0000000e ble_store_read_peer_sec
00028a72 g     F .text	00000008 _set
000281fa g     F .text	0000000c boot_set_pending
000163ac g     F .text	0000000a os_task_stacktop_get
10003aac g     O .bss	00000098 ble_gattc_stats
000141a0  w    F .text	00000002 MSPI_IRQHandler
000235f8 g     F .text	00000042 ble_hs_hci_util_rand
0002fa94 g     F .text	00000134 hal_uart_config
0002d478 g     F .text	00000014 am_hal_stimer_int_enable
0002478a g     F .text	0000000e ble_l2cap_sig_hdr_parse
0001da64 g     F .text	00000030 ble_att_svr_tx_error_rsp
0001c092 g     F .text	00000010 mgmt_streamer_free_buf
0001bbb8 g     F .text	00000018 log_mgmt_impl_clear
0002d080 g     F .text	00000028 am_hal_ctimer_int_disable
00017368 g     F .text	00000014 conf_store_init
0001b788 g     F .text	0000007c img_mgmt_impl_write_pending
00023c20 g     F .text	00000078 ble_hs_pvcy_set_our_irk
0001f2cc g     F .text	000000c0 ble_gap_rx_update_complete
00015a8a g     F .text	00000044 os_mbuf_concat
0002b41c g     F .text	00000060 am_hal_ble_blocking_hci_write
00026598 g     F .text	00000052 ble_store_write_peer_sec
00018454 g     F .text	00000188 console_handle_char
0002cee0 g     F .text	0000002c am_hal_ctimer_stop
00016eac g     F .text	00000018 smp_transport_init
00029f08 g     F .text	0000007e _cbor_value_dup_string
0002b724 g     F .text	00000074 am_hal_ble_default_patch_apply
10001a7c g     O .data	00000004 am_hal_ble_default_patches_b0
000262e8 g     F .text	000000a2 ble_sm_lgcy_confirm_exec
00019aa8 g     F .text	00000010 mfg_open
10000178 g     O .data	00000008 g_os_run_list
0001c384 g     F .text	00000100 smp_process_request_packet
000145d8 g     F .text	00000034 NVIC_Relocate
00021af4 g     F .text	00000010 ble_hs_unlock_nested
00017200 g     F .text	00000028 conf_src_register
000337c0 g     O .text	000000b4 am_hal_pwrctrl_peripheral_control
00028e34 g     F .text	0000000a cbor_encoder_init
000141a0  w    F .text	00000002 IOMASTER3_IRQHandler
00014cb0 g     F .text	0000006c sysinit_app
00023fec g     F .text	00000034 ble_l2cap_chan_alloc
100006c0 g     O .data	00000004 am_hal_ble_default_patches
0001cb38 g     F .text	00000004 ble_att_clt_tx_find_info
10002f54 g     O .bss	00000004 os_flags
00028bf4 g     F .text	00000006 cbor_buf_writer_buffer_size
0001b804 g     F .text	0000002e img_mgmt_impl_write_confirmed
00016738 g     F .text	00000006 os_arch_restore_sr
000141a0  w    F .text	00000002 BLE_IRQHandler
00024220 g     F .text	00000060 ble_l2cap_init
00033bdc g     O .text	00000028 g_sUartConfig
00016ddc g     F .text	00000044 smp_tx_rsp
00019ff0 g     F .text	00000090 log_reboot_pkg_init
0002a1b8 g     F .text	00000052 fcb_offset_last_n
00027758 g     F .text	0000002e ble_hs_util_ensure_addr
1005fe48 g       *ABS*	000001b0 __StackLimit
00018bb2 g     F .text	00000026 flash_area_is_empty
10002508 g     O .bss	00000004 g_os_started
000141a0  w    F .text	00000002 STIMER_CMPR7_IRQHandler
0001ee74 g     F .text	000001c0 ble_gap_rx_conn_complete
00027a18 g     F .text	000000a4 ble_hci_trans_buf_free
000241e0 g     F .text	0000003e ble_l2cap_tx
0002c0e0 g     F .text	00000040 am_hal_flash_delay_status_check
000279b4 g     F .text	00000014 ble_hci_trans_cfg_hs
0002971e g     F .text	00000050 cbor_value_leave_container
0001f622 g     F .text	00000066 ble_gap_unpair_oldest_except
000265f8 g     F .text	0000000c ble_store_write_cccd
0002a25a g     F .text	00000032 fcb_append_to_scratch
0001b864 g     F .text	0000002e img_mgmt_impl_write_image_data
00014588 g     F .text	00000020 SystemCoreClockUpdate
0002830c g     F .text	0000074c tc_aes_encrypt
00015674 g     F .text	00000020 os_mbuf_free_chain
000276a0 g     F .text	00000028 ble_store_config_delete
0001b4c8 g     F .text	00000066 img_mgmt_ver_str
00021b38 g     F .text	0000003a ble_hs_wakeup_tx
00016658 g     F .text	0000003c os_get_uptime
00015fcc g     F .text	00000034 os_msys_init
00022798 g     F .text	00000024 ble_hs_conn_remove
0001d758 g     F .text	00000018 ble_att_svr_find_by_handle
0002a540 g     F .text	00000088 fcb_getnext_nolock
0001574e g     F .text	00000022 os_mbuf_off
1000307b g     O .bss	00000001 g_is_output_nlip
00022e20 g     F .text	00000024 ble_hs_hci_add_avail_pkts
000165a0 g     F .text	0000000c os_time_get
10003310 g     O .bss	0000001c modlog_mapping_pool
0002c0b8 g     F .text	00000028 am_hal_flash_delay
00026570 g     F .text	0000000e ble_store_read_our_sec
0001e026 g     F .text	000000b2 ble_att_svr_rx_prep_write
000177aa g     F .text	00000036 conf_get_value
000190d0 g     F .text	00000058 log_append_body
100007ac g     O .data	00000010 am_ble_performance_patch_b0
0001cb70 g     F .text	00000004 ble_att_clt_tx_prep_write
0001562e g     F .text	00000032 os_mbuf_get_pkthdr
10004298 g     O .bss	000000f0 ble_store_config_our_secs
10003198 g     O .bss	00000008 g_log_info
00017674 g     F .text	000000b0 conf_str_from_value
00014584  w    F .text	00000002 .hidden __aeabi_idiv0
00028ca4 g     F .text	00000058 cbor_mbuf_reader_init
10003cba g     O .bss	00000002 ble_hs_max_client_configs
0001dde2 g     F .text	00000082 ble_att_svr_rx_read_blob
000215ec g     F .text	00000020 ble_gatts_conn_can_alloc
0001baec g     F .text	00000060 log_mgmt_impl_get_level
0002a28c g     F .text	000000fa fcb_append
0001c484 g     F .text	0000007c ull_to_s
00026fa0 g     F .text	00000074 ble_svc_dis_init
00017776 g     F .text	00000034 conf_set_value
00021ae0 g     F .text	00000014 ble_hs_lock_nested
000225a0 g     F .text	00000010 ble_hs_adv_set_fields
000141a0  w    F .text	00000002 STIMER_CMPR0_IRQHandler
000163b8 g     F .text	000000e4 os_task_init
000141a0  w    F .text	00000002 BROWNOUT_IRQHandler
0002b8b0 g     F .text	000000b0 am_hal_ble_blocking_hci_read
00026628 g     F .text	0000002a ble_store_key_from_value_sec
00014192  w    F .text	00000002 BusFault_Handler
00023f9c g     F .text	0000001c ble_hs_stop_init
0001949c g     F .text	00000060 log_console_init
000253e2 g     F .text	0000007e ble_sm_ia_ra
00021cf4 g     F .text	0000003c ble_hs_enqueue_hci_event
00016b6e g     F .text	0000000e strlen
00015318 g     F .text	00000038 os_dev_create
0002269a g     F .text	0000002c ble_hs_conn_delete_chan
00015e60 g     F .text	0000001e os_memblock_put_from_cb
0001a3fa g     F .text	00000054 rwlock_acquire_write
000153f0 g     F .text	00000010 os_eventq_init
0001cb60 g     F .text	00000004 ble_att_clt_rx_read_mult
000165ac g     F .text	0000004c os_time_advance
0002c240 g     F .text	0000005c am_hal_mcuctrl_info_get
00016368 g     F .text	0000002c os_sched_resort
10004fb0 g     O .bss	00000004 boot_current_slot
00033018 g     O .text	00000004 am_hal_ble_num_default_patches
00026a1a g     F .text	00000024 ble_uuid_to_mbuf
0001ebf0 g     F .text	0000002a ble_gap_conn_find
10005110 g     O .bss	00000100 g_pui8TxBuffer
00015c32 g     F .text	00000012 os_mbuf_prepend_pullup
0001c7d2 g     F .text	0000000e ble_att_conn_chan_find
0002a722 g     F .text	0000002c hal_flash_init
0002d4b4 g     F .text	0000000a get_le16
000277e0 g     F .text	000000f8 apollo3_hci_radio_boot
0001a1ac g     F .text	00000058 stats_module_init
0001ec70 g     F .text	00000040 ble_gap_rx_phy_update_complete
0001c0c0 g     F .text	00000016 mgmt_find_handler
00026af2 g     F .text	000000f4 ble_sm_alg_c1
00014190  w    F .text	00000002 MemoryManagement_Handler
0003007c g     F .text	00000014 am_hal_queue_init
0001f8cc g     F .text	000000c8 ble_gap_preempt_done
00026190 g     F .text	00000032 ble_sm_cmd_get
00023004 g     F .text	0000000c ble_hs_hci_get_hci_version
0001cad4 g     F .text	00000064 ble_att_clt_rx_mtu
000279c8 g     F .text	00000008 ble_hci_trans_hs_acl_tx
10003158 g     O .bss	00000040 id_serial
00021b74 g     F .text	00000014 ble_hs_is_enabled
000194fc g     F .text	0000001c log_level_get
0002388c g     F .text	0000000c ble_hs_log_flat_buf
00028246 g     F .text	0000000a boot_set_confirmed
000247d8 g     F .text	00000044 ble_l2cap_sig_reject_tx
0001dfd2 g     F .text	00000040 ble_att_svr_rx_write_no_rsp
0002a9a4 g     F .text	00000032 hal_flash_isempty_no_buf
0001d6fc g     F .text	00000050 ble_att_svr_register
00015350 g     F .text	0000002c os_dev_initialize_all
000239fc g     F .text	00000022 ble_mqueue_get
0002d148 g     F .text	00000264 am_hal_gpio_pinconfig
00019758 g     F .text	0000003a modlog_printf
0001f5b0 g     F .text	0000004e ble_gap_unpair
00017cd4 g     F .text	00000010 conf_mgmt_register
00023960 g     F .text	00000030 ble_hs_misc_conn_chan_find
00027f86 g     F .text	00000016 boot_write_trailer_flag
0002074a g     F .text	0000000c ble_gatts_indicate_fail_notconn
00022606 g     F .text	0000001c ble_hs_atomic_first_conn_handle
00016c10 g     F .text	00000048 imgmgr_find_best_area_id
10000180 g     O .data	00000008 g_os_sleep_list
00016ba8 g     F .text	00000050 jrand48
00023af4 g     F .text	00000024 ble_hs_pvcy_ensure_started
0002a6f8 g     F .text	00000008 hal_bsp_init
000141a0  w    F .text	00000002 STIMER_CMPR5_IRQHandler
00020884 g     F .text	0000000c ble_gattc_connection_broken
000150b4 g     F .text	0000004c os_pkg_init
0001b99c g     F .text	00000014 img_mgmt_impl_log_confirm
0002bc98 g     F .text	000000d4 am_hal_ble_transmitter_modex_set
0001f230 g     F .text	00000064 ble_gap_rx_disconn_complete
00017400 g     F .text	00000054 conf_init
0001603c g     F .text	00000010 os_sanity_check_init
0002a674 g     F .text	00000074 fcb_walk
00022718 g     F .text	00000080 ble_hs_conn_alloc
00022ef4 g     F .text	00000032 ble_hs_hci_rx_evt
0002f5f8 g     F .text	0000049a hal_uart_init
00029f00 g     F .text	00000008 cbor_value_to_pretty_advance
0001a150 g     F .text	00000022 stats_init
0002df78 g     F .text	00000008 vfprintf
10002f64 g     O .bss	00000002 g_ble_smp_attr_handle
0002e190 g     F .text	00000032 strpbrk
0002c120 g     F .text	0000000c am_hal_flash_load_ui32
100024b8 g     O .bss	00000050 g_os_main_task
0002d7f8 g     F .text	0000002c free
00027f9c g     F .text	0000000e boot_write_image_ok



Disassembly of section .text:

00014020 <__isr_vector>:
   14020:	1005fff8 	.word	0x1005fff8
   14024:	00014121 	.word	0x00014121
   14028:	0001418d 	.word	0x0001418d
   1402c:	0001418f 	.word	0x0001418f
   14030:	00014191 	.word	0x00014191
   14034:	00014193 	.word	0x00014193
   14038:	00014195 	.word	0x00014195
   1403c:	00014197 	.word	0x00014197
	...
   1404c:	000141bf 	.word	0x000141bf
   14050:	0001419b 	.word	0x0001419b
   14054:	00000000 	.word	0x00000000
   14058:	00014205 	.word	0x00014205
   1405c:	0001422f 	.word	0x0001422f
   14060:	000141a1 	.word	0x000141a1
   14064:	000141a1 	.word	0x000141a1
   14068:	000141a1 	.word	0x000141a1
   1406c:	000141a1 	.word	0x000141a1
   14070:	000141a1 	.word	0x000141a1
   14074:	000141a1 	.word	0x000141a1
   14078:	000141a1 	.word	0x000141a1
   1407c:	000141a1 	.word	0x000141a1
   14080:	000141a1 	.word	0x000141a1
   14084:	000141a1 	.word	0x000141a1
   14088:	000141a1 	.word	0x000141a1
   1408c:	000141a1 	.word	0x000141a1
   14090:	000141a1 	.word	0x000141a1
   14094:	000141a1 	.word	0x000141a1
   14098:	000141a1 	.word	0x000141a1
   1409c:	000141a1 	.word	0x000141a1
   140a0:	000141a1 	.word	0x000141a1
   140a4:	000141a1 	.word	0x000141a1
   140a8:	000141a1 	.word	0x000141a1
   140ac:	000141a1 	.word	0x000141a1
   140b0:	000141a1 	.word	0x000141a1
   140b4:	000141a1 	.word	0x000141a1
   140b8:	000141a1 	.word	0x000141a1
   140bc:	000141a1 	.word	0x000141a1
   140c0:	000141a1 	.word	0x000141a1
   140c4:	000141a1 	.word	0x000141a1
   140c8:	000141a1 	.word	0x000141a1
   140cc:	000141a1 	.word	0x000141a1
   140d0:	000141a1 	.word	0x000141a1
   140d4:	000141a1 	.word	0x000141a1
   140d8:	000141a1 	.word	0x000141a1
   140dc:	000141a1 	.word	0x000141a1

000140e0 <__ble_patch>:
	...

00014120 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
   14120:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
   14124:	4a0f      	ldr	r2, [pc, #60]	; (14164 <.bss_zero_loop+0x3c>)
    ldr     r3, =__bss_end__
   14126:	4b10      	ldr	r3, [pc, #64]	; (14168 <.bss_zero_loop+0x40>)

00014128 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
   14128:	429a      	cmp	r2, r3
    itt     lt
   1412a:	bfbc      	itt	lt
    strlt   r0, [r2], #4
   1412c:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
   14130:	e7fa      	blt.n	14128 <.bss_zero_loop>
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
   14132:	490e      	ldr	r1, [pc, #56]	; (1416c <.bss_zero_loop+0x44>)
    ldr    r2, =__data_start__
   14134:	4a0e      	ldr	r2, [pc, #56]	; (14170 <.bss_zero_loop+0x48>)
    ldr    r3, =__data_end__
   14136:	4b0f      	ldr	r3, [pc, #60]	; (14174 <.bss_zero_loop+0x4c>)

    subs    r3, r2
   14138:	1a9b      	subs	r3, r3, r2
    ble     .LC0
   1413a:	dd03      	ble.n	14144 <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
   1413c:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
   1413e:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
   14140:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
   14142:	dcfb      	bgt.n	1413c <.bss_zero_loop+0x14>

.LC0:

	ldr		r0, =__StackTop
   14144:	480c      	ldr	r0, [pc, #48]	; (14178 <.bss_zero_loop+0x50>)
	msr		psp, r0
   14146:	f380 8809 	msr	PSP, r0
	msr		msp, r0
   1414a:	f380 8808 	msr	MSP, r0

    LDR     R0, =__HeapBase
   1414e:	480b      	ldr	r0, [pc, #44]	; (1417c <.bss_zero_loop+0x54>)
    LDR     R1, =__HeapLimit
   14150:	490b      	ldr	r1, [pc, #44]	; (14180 <.bss_zero_loop+0x58>)
    BL      _sbrkInit
   14152:	f000 fa5b 	bl	1460c <_sbrkInit>

    LDR     R0, =SystemInit
   14156:	480b      	ldr	r0, [pc, #44]	; (14184 <.bss_zero_loop+0x5c>)
    BLX     R0
   14158:	4780      	blx	r0

    BL      hal_system_init
   1415a:	f000 fa81 	bl	14660 <hal_system_init>

    LDR     R0, =_start
   1415e:	480a      	ldr	r0, [pc, #40]	; (14188 <.bss_zero_loop+0x60>)
    BX      R0
   14160:	4700      	bx	r0
   14162:	0000      	.short	0x0000
    ldr     r2, =__bss_start__
   14164:	10001b38 	.word	0x10001b38
    ldr     r3, =__bss_end__
   14168:	10005310 	.word	0x10005310
    ldr    r1, =__etext
   1416c:	00033c1c 	.word	0x00033c1c
    ldr    r2, =__data_start__
   14170:	10000100 	.word	0x10000100
    ldr    r3, =__data_end__
   14174:	10001b34 	.word	0x10001b34
	ldr		r0, =__StackTop
   14178:	1005fff8 	.word	0x1005fff8
    LDR     R0, =__HeapBase
   1417c:	10005310 	.word	0x10005310
    LDR     R1, =__HeapLimit
   14180:	1005fe48 	.word	0x1005fe48
    LDR     R0, =SystemInit
   14184:	000145a9 	.word	0x000145a9
    LDR     R0, =_start
   14188:	000146f1 	.word	0x000146f1

0001418c <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
   1418c:	e7fe      	b.n	1418c <NMI_Handler>

0001418e <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
   1418e:	e7fe      	b.n	1418e <HardFault_Handler>

00014190 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
   14190:	e7fe      	b.n	14190 <MemoryManagement_Handler>

00014192 <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
   14192:	e7fe      	b.n	14192 <BusFault_Handler>

00014194 <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
   14194:	e7fe      	b.n	14194 <UsageFault_Handler>

00014196 <SecureFault_Handler>:


    .weak   SecureFault_Handler
    .type   SecureFault_Handler, %function
SecureFault_Handler:
    B       .
   14196:	e7fe      	b.n	14196 <SecureFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
   14198:	e7fe      	b.n	14198 <SecureFault_Handler+0x2>

0001419a <DebugMon_Handler>:


    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    B       .
   1419a:	e7fe      	b.n	1419a <DebugMon_Handler>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
   1419c:	e7fe      	b.n	1419c <DebugMon_Handler+0x2>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
   1419e:	e7fe      	b.n	1419e <DebugMon_Handler+0x4>

000141a0 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
   141a0:	e7fe      	b.n	141a0 <Default_Handler>
   141a2:	bf00      	nop

000141a4 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   141a4:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   141a8:	482b      	ldr	r0, [pc, #172]	; (14258 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   141aa:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   141ac:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   141ae:	f380 8814 	msr	CONTROL, r0
        ISB
   141b2:	f3bf 8f6f 	isb	sy
        BX      LR
   141b6:	4770      	bx	lr

000141b8 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   141b8:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   141bc:	4770      	bx	lr

000141be <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   141be:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   141c2:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   141c4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   141c8:	b951      	cbnz	r1, 141e0 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   141ca:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   141ce:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   141d0:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   141d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   141d6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   141da:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   141de:	4770      	bx	lr

000141e0 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   141e0:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   141e2:	4a1e      	ldr	r2, [pc, #120]	; (1425c <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   141e4:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   141e6:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   141e8:	d809      	bhi.n	141fe <SVC_Done>

        LDR     R4,=SVC_Table-4
   141ea:	4c1d      	ldr	r4, [pc, #116]	; (14260 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   141ec:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   141f0:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   141f4:	47a0      	blx	r4

        MRS     R12,PSP
   141f6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   141fa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

000141fe <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   141fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   14202:	4770      	bx	lr

00014204 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   14204:	4b17      	ldr	r3, [pc, #92]	; (14264 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   14206:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   14208:	4b17      	ldr	r3, [pc, #92]	; (14268 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   1420a:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   1420c:	4291      	cmp	r1, r2
        IT      EQ
   1420e:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   14210:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   14212:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
   14216:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   1421a:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1421e:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   14220:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
   14224:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
   14228:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1422c:	4770      	bx	lr

0001422e <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1422e:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   14230:	f002 fa6d 	bl	1670e <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   14234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   14238:	4770      	bx	lr

0001423a <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1423a:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1423e:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   14240:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   14244:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   14248:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   1424c:	4668      	mov	r0, sp
        BL      os_default_irq
   1424e:	f000 fdcb 	bl	14de8 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   14252:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   14256:	4770      	bx	lr
        LDR     R0,=os_flags
   14258:	10002f54 	.word	0x10002f54
        LDR     R2,=SVC_Count
   1425c:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   14260:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   14264:	10000178 	.word	0x10000178
        LDR     R3,=g_current_task      /* Get current task */
   14268:	10002f0c 	.word	0x10002f0c

0001426c <__aeabi_uldivmod>:
   1426c:	b953      	cbnz	r3, 14284 <__aeabi_uldivmod+0x18>
   1426e:	b94a      	cbnz	r2, 14284 <__aeabi_uldivmod+0x18>
   14270:	2900      	cmp	r1, #0
   14272:	bf08      	it	eq
   14274:	2800      	cmpeq	r0, #0
   14276:	bf1c      	itt	ne
   14278:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1427c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   14280:	f000 b980 	b.w	14584 <__aeabi_idiv0>
   14284:	f1ad 0c08 	sub.w	ip, sp, #8
   14288:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1428c:	f000 f81a 	bl	142c4 <__udivmoddi4>
   14290:	f8dd e004 	ldr.w	lr, [sp, #4]
   14294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   14298:	b004      	add	sp, #16
   1429a:	4770      	bx	lr

0001429c <__popcountsi2>:
   1429c:	0843      	lsrs	r3, r0, #1
   1429e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
   142a2:	1ac0      	subs	r0, r0, r3
   142a4:	0883      	lsrs	r3, r0, #2
   142a6:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
   142aa:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
   142ae:	4418      	add	r0, r3
   142b0:	eb00 1010 	add.w	r0, r0, r0, lsr #4
   142b4:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
   142b8:	eb00 2000 	add.w	r0, r0, r0, lsl #8
   142bc:	eb00 4000 	add.w	r0, r0, r0, lsl #16
   142c0:	0e00      	lsrs	r0, r0, #24
   142c2:	4770      	bx	lr

000142c4 <__udivmoddi4>:
   142c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   142c8:	9e08      	ldr	r6, [sp, #32]
   142ca:	460d      	mov	r5, r1
   142cc:	4604      	mov	r4, r0
   142ce:	468e      	mov	lr, r1
   142d0:	2b00      	cmp	r3, #0
   142d2:	f040 8082 	bne.w	143da <__udivmoddi4+0x116>
   142d6:	428a      	cmp	r2, r1
   142d8:	4617      	mov	r7, r2
   142da:	d946      	bls.n	1436a <__udivmoddi4+0xa6>
   142dc:	fab2 f282 	clz	r2, r2
   142e0:	b14a      	cbz	r2, 142f6 <__udivmoddi4+0x32>
   142e2:	f1c2 0120 	rsb	r1, r2, #32
   142e6:	fa05 f302 	lsl.w	r3, r5, r2
   142ea:	fa20 f101 	lsr.w	r1, r0, r1
   142ee:	4097      	lsls	r7, r2
   142f0:	ea41 0e03 	orr.w	lr, r1, r3
   142f4:	4094      	lsls	r4, r2
   142f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
   142fa:	0c23      	lsrs	r3, r4, #16
   142fc:	fbbe fcf8 	udiv	ip, lr, r8
   14300:	b2b9      	uxth	r1, r7
   14302:	fb08 ee1c 	mls	lr, r8, ip, lr
   14306:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
   1430a:	fb0c f001 	mul.w	r0, ip, r1
   1430e:	4298      	cmp	r0, r3
   14310:	d90a      	bls.n	14328 <__udivmoddi4+0x64>
   14312:	18fb      	adds	r3, r7, r3
   14314:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
   14318:	f080 8116 	bcs.w	14548 <__udivmoddi4+0x284>
   1431c:	4298      	cmp	r0, r3
   1431e:	f240 8113 	bls.w	14548 <__udivmoddi4+0x284>
   14322:	f1ac 0c02 	sub.w	ip, ip, #2
   14326:	443b      	add	r3, r7
   14328:	1a1b      	subs	r3, r3, r0
   1432a:	b2a4      	uxth	r4, r4
   1432c:	fbb3 f0f8 	udiv	r0, r3, r8
   14330:	fb08 3310 	mls	r3, r8, r0, r3
   14334:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   14338:	fb00 f101 	mul.w	r1, r0, r1
   1433c:	42a1      	cmp	r1, r4
   1433e:	d909      	bls.n	14354 <__udivmoddi4+0x90>
   14340:	193c      	adds	r4, r7, r4
   14342:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   14346:	f080 8101 	bcs.w	1454c <__udivmoddi4+0x288>
   1434a:	42a1      	cmp	r1, r4
   1434c:	f240 80fe 	bls.w	1454c <__udivmoddi4+0x288>
   14350:	3802      	subs	r0, #2
   14352:	443c      	add	r4, r7
   14354:	1a64      	subs	r4, r4, r1
   14356:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1435a:	2100      	movs	r1, #0
   1435c:	b11e      	cbz	r6, 14366 <__udivmoddi4+0xa2>
   1435e:	40d4      	lsrs	r4, r2
   14360:	2300      	movs	r3, #0
   14362:	e9c6 4300 	strd	r4, r3, [r6]
   14366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1436a:	b902      	cbnz	r2, 1436e <__udivmoddi4+0xaa>
   1436c:	deff      	udf	#255	; 0xff
   1436e:	fab2 f282 	clz	r2, r2
   14372:	2a00      	cmp	r2, #0
   14374:	d14f      	bne.n	14416 <__udivmoddi4+0x152>
   14376:	1bcb      	subs	r3, r1, r7
   14378:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   1437c:	fa1f f887 	uxth.w	r8, r7
   14380:	2101      	movs	r1, #1
   14382:	fbb3 fcfe 	udiv	ip, r3, lr
   14386:	0c25      	lsrs	r5, r4, #16
   14388:	fb0e 331c 	mls	r3, lr, ip, r3
   1438c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   14390:	fb08 f30c 	mul.w	r3, r8, ip
   14394:	42ab      	cmp	r3, r5
   14396:	d907      	bls.n	143a8 <__udivmoddi4+0xe4>
   14398:	197d      	adds	r5, r7, r5
   1439a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1439e:	d202      	bcs.n	143a6 <__udivmoddi4+0xe2>
   143a0:	42ab      	cmp	r3, r5
   143a2:	f200 80e7 	bhi.w	14574 <__udivmoddi4+0x2b0>
   143a6:	4684      	mov	ip, r0
   143a8:	1aed      	subs	r5, r5, r3
   143aa:	b2a3      	uxth	r3, r4
   143ac:	fbb5 f0fe 	udiv	r0, r5, lr
   143b0:	fb0e 5510 	mls	r5, lr, r0, r5
   143b4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   143b8:	fb08 f800 	mul.w	r8, r8, r0
   143bc:	45a0      	cmp	r8, r4
   143be:	d907      	bls.n	143d0 <__udivmoddi4+0x10c>
   143c0:	193c      	adds	r4, r7, r4
   143c2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   143c6:	d202      	bcs.n	143ce <__udivmoddi4+0x10a>
   143c8:	45a0      	cmp	r8, r4
   143ca:	f200 80d7 	bhi.w	1457c <__udivmoddi4+0x2b8>
   143ce:	4618      	mov	r0, r3
   143d0:	eba4 0408 	sub.w	r4, r4, r8
   143d4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   143d8:	e7c0      	b.n	1435c <__udivmoddi4+0x98>
   143da:	428b      	cmp	r3, r1
   143dc:	d908      	bls.n	143f0 <__udivmoddi4+0x12c>
   143de:	2e00      	cmp	r6, #0
   143e0:	f000 80af 	beq.w	14542 <__udivmoddi4+0x27e>
   143e4:	2100      	movs	r1, #0
   143e6:	e9c6 0500 	strd	r0, r5, [r6]
   143ea:	4608      	mov	r0, r1
   143ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   143f0:	fab3 f183 	clz	r1, r3
   143f4:	2900      	cmp	r1, #0
   143f6:	d14b      	bne.n	14490 <__udivmoddi4+0x1cc>
   143f8:	42ab      	cmp	r3, r5
   143fa:	d302      	bcc.n	14402 <__udivmoddi4+0x13e>
   143fc:	4282      	cmp	r2, r0
   143fe:	f200 80b7 	bhi.w	14570 <__udivmoddi4+0x2ac>
   14402:	1a84      	subs	r4, r0, r2
   14404:	eb65 0303 	sbc.w	r3, r5, r3
   14408:	2001      	movs	r0, #1
   1440a:	469e      	mov	lr, r3
   1440c:	2e00      	cmp	r6, #0
   1440e:	d0aa      	beq.n	14366 <__udivmoddi4+0xa2>
   14410:	e9c6 4e00 	strd	r4, lr, [r6]
   14414:	e7a7      	b.n	14366 <__udivmoddi4+0xa2>
   14416:	f1c2 0c20 	rsb	ip, r2, #32
   1441a:	fa01 f302 	lsl.w	r3, r1, r2
   1441e:	4097      	lsls	r7, r2
   14420:	fa20 f00c 	lsr.w	r0, r0, ip
   14424:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   14428:	fa21 fc0c 	lsr.w	ip, r1, ip
   1442c:	4318      	orrs	r0, r3
   1442e:	fbbc f1fe 	udiv	r1, ip, lr
   14432:	0c05      	lsrs	r5, r0, #16
   14434:	fb0e cc11 	mls	ip, lr, r1, ip
   14438:	fa1f f887 	uxth.w	r8, r7
   1443c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   14440:	fb01 f308 	mul.w	r3, r1, r8
   14444:	42ab      	cmp	r3, r5
   14446:	fa04 f402 	lsl.w	r4, r4, r2
   1444a:	d909      	bls.n	14460 <__udivmoddi4+0x19c>
   1444c:	197d      	adds	r5, r7, r5
   1444e:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   14452:	f080 808b 	bcs.w	1456c <__udivmoddi4+0x2a8>
   14456:	42ab      	cmp	r3, r5
   14458:	f240 8088 	bls.w	1456c <__udivmoddi4+0x2a8>
   1445c:	3902      	subs	r1, #2
   1445e:	443d      	add	r5, r7
   14460:	1aeb      	subs	r3, r5, r3
   14462:	b285      	uxth	r5, r0
   14464:	fbb3 f0fe 	udiv	r0, r3, lr
   14468:	fb0e 3310 	mls	r3, lr, r0, r3
   1446c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   14470:	fb00 f308 	mul.w	r3, r0, r8
   14474:	42ab      	cmp	r3, r5
   14476:	d907      	bls.n	14488 <__udivmoddi4+0x1c4>
   14478:	197d      	adds	r5, r7, r5
   1447a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   1447e:	d271      	bcs.n	14564 <__udivmoddi4+0x2a0>
   14480:	42ab      	cmp	r3, r5
   14482:	d96f      	bls.n	14564 <__udivmoddi4+0x2a0>
   14484:	3802      	subs	r0, #2
   14486:	443d      	add	r5, r7
   14488:	1aeb      	subs	r3, r5, r3
   1448a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1448e:	e778      	b.n	14382 <__udivmoddi4+0xbe>
   14490:	f1c1 0c20 	rsb	ip, r1, #32
   14494:	408b      	lsls	r3, r1
   14496:	fa22 f70c 	lsr.w	r7, r2, ip
   1449a:	431f      	orrs	r7, r3
   1449c:	fa20 f40c 	lsr.w	r4, r0, ip
   144a0:	fa05 f301 	lsl.w	r3, r5, r1
   144a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   144a8:	fa25 f50c 	lsr.w	r5, r5, ip
   144ac:	431c      	orrs	r4, r3
   144ae:	0c23      	lsrs	r3, r4, #16
   144b0:	fbb5 f9fe 	udiv	r9, r5, lr
   144b4:	fa1f f887 	uxth.w	r8, r7
   144b8:	fb0e 5519 	mls	r5, lr, r9, r5
   144bc:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
   144c0:	fb09 fa08 	mul.w	sl, r9, r8
   144c4:	45aa      	cmp	sl, r5
   144c6:	fa02 f201 	lsl.w	r2, r2, r1
   144ca:	fa00 f301 	lsl.w	r3, r0, r1
   144ce:	d908      	bls.n	144e2 <__udivmoddi4+0x21e>
   144d0:	197d      	adds	r5, r7, r5
   144d2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   144d6:	d247      	bcs.n	14568 <__udivmoddi4+0x2a4>
   144d8:	45aa      	cmp	sl, r5
   144da:	d945      	bls.n	14568 <__udivmoddi4+0x2a4>
   144dc:	f1a9 0902 	sub.w	r9, r9, #2
   144e0:	443d      	add	r5, r7
   144e2:	eba5 050a 	sub.w	r5, r5, sl
   144e6:	b2a4      	uxth	r4, r4
   144e8:	fbb5 f0fe 	udiv	r0, r5, lr
   144ec:	fb0e 5510 	mls	r5, lr, r0, r5
   144f0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   144f4:	fb00 f808 	mul.w	r8, r0, r8
   144f8:	45a0      	cmp	r8, r4
   144fa:	d907      	bls.n	1450c <__udivmoddi4+0x248>
   144fc:	193c      	adds	r4, r7, r4
   144fe:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
   14502:	d22d      	bcs.n	14560 <__udivmoddi4+0x29c>
   14504:	45a0      	cmp	r8, r4
   14506:	d92b      	bls.n	14560 <__udivmoddi4+0x29c>
   14508:	3802      	subs	r0, #2
   1450a:	443c      	add	r4, r7
   1450c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   14510:	eba4 0408 	sub.w	r4, r4, r8
   14514:	fba0 8902 	umull	r8, r9, r0, r2
   14518:	454c      	cmp	r4, r9
   1451a:	46c6      	mov	lr, r8
   1451c:	464d      	mov	r5, r9
   1451e:	d319      	bcc.n	14554 <__udivmoddi4+0x290>
   14520:	d016      	beq.n	14550 <__udivmoddi4+0x28c>
   14522:	b15e      	cbz	r6, 1453c <__udivmoddi4+0x278>
   14524:	ebb3 020e 	subs.w	r2, r3, lr
   14528:	eb64 0405 	sbc.w	r4, r4, r5
   1452c:	fa04 fc0c 	lsl.w	ip, r4, ip
   14530:	40ca      	lsrs	r2, r1
   14532:	ea4c 0202 	orr.w	r2, ip, r2
   14536:	40cc      	lsrs	r4, r1
   14538:	e9c6 2400 	strd	r2, r4, [r6]
   1453c:	2100      	movs	r1, #0
   1453e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14542:	4631      	mov	r1, r6
   14544:	4630      	mov	r0, r6
   14546:	e70e      	b.n	14366 <__udivmoddi4+0xa2>
   14548:	46ac      	mov	ip, r5
   1454a:	e6ed      	b.n	14328 <__udivmoddi4+0x64>
   1454c:	4618      	mov	r0, r3
   1454e:	e701      	b.n	14354 <__udivmoddi4+0x90>
   14550:	4543      	cmp	r3, r8
   14552:	d2e6      	bcs.n	14522 <__udivmoddi4+0x25e>
   14554:	ebb8 0e02 	subs.w	lr, r8, r2
   14558:	eb69 0507 	sbc.w	r5, r9, r7
   1455c:	3801      	subs	r0, #1
   1455e:	e7e0      	b.n	14522 <__udivmoddi4+0x25e>
   14560:	4628      	mov	r0, r5
   14562:	e7d3      	b.n	1450c <__udivmoddi4+0x248>
   14564:	4660      	mov	r0, ip
   14566:	e78f      	b.n	14488 <__udivmoddi4+0x1c4>
   14568:	4681      	mov	r9, r0
   1456a:	e7ba      	b.n	144e2 <__udivmoddi4+0x21e>
   1456c:	4661      	mov	r1, ip
   1456e:	e777      	b.n	14460 <__udivmoddi4+0x19c>
   14570:	4608      	mov	r0, r1
   14572:	e74b      	b.n	1440c <__udivmoddi4+0x148>
   14574:	f1ac 0c02 	sub.w	ip, ip, #2
   14578:	443d      	add	r5, r7
   1457a:	e715      	b.n	143a8 <__udivmoddi4+0xe4>
   1457c:	3802      	subs	r0, #2
   1457e:	443c      	add	r4, r7
   14580:	e726      	b.n	143d0 <__udivmoddi4+0x10c>
   14582:	bf00      	nop

00014584 <__aeabi_idiv0>:
   14584:	4770      	bx	lr
   14586:	bf00      	nop

00014588 <SystemCoreClockUpdate>:
    //
    // Calculate the system frequency based upon the current register settings.
    // This function can be used to retrieve the system core clock frequeny
    // after user changed register sittings.
    //
    SystemCoreClock = __SYS_OSC_CLK / (CLKGEN->CCTRL_b.CORESEL + 1);
   14588:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1458c:	699b      	ldr	r3, [r3, #24]
   1458e:	f003 0301 	and.w	r3, r3, #1
   14592:	3301      	adds	r3, #1
   14594:	4a02      	ldr	r2, [pc, #8]	; (145a0 <SystemCoreClockUpdate+0x18>)
   14596:	fb92 f3f3 	sdiv	r3, r2, r3
   1459a:	4a02      	ldr	r2, [pc, #8]	; (145a4 <SystemCoreClockUpdate+0x1c>)
   1459c:	6013      	str	r3, [r2, #0]
}
   1459e:	4770      	bx	lr
   145a0:	02dc6c00 	.word	0x02dc6c00
   145a4:	10000100 	.word	0x10000100

000145a8 <SystemInit>:
//! @return None.
//
//*****************************************************************************
void
SystemInit(void)
{
   145a8:	b508      	push	{r3, lr}
    //
    // Initialize the system
    // Do not use global variables because this function is called before
    // reaching pre-main. RW section maybe overwritten afterwards.
    //
    SystemCoreClock = __SYSTEM_CLOCK;
   145aa:	4b09      	ldr	r3, [pc, #36]	; (145d0 <SystemInit+0x28>)
   145ac:	4a09      	ldr	r2, [pc, #36]	; (145d4 <SystemInit+0x2c>)
   145ae:	601a      	str	r2, [r3, #0]

    CLKGEN->CLKKEY = 0x47;              // Enable write to CCTRL
   145b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   145b4:	2247      	movs	r2, #71	; 0x47
   145b6:	615a      	str	r2, [r3, #20]
    CLKGEN->CCTRL_b.CORESEL = 0;        // Div by 1 for 48MHz
   145b8:	699a      	ldr	r2, [r3, #24]
   145ba:	f36f 0200 	bfc	r2, #0, #1
   145be:	619a      	str	r2, [r3, #24]
    CLKGEN->CLKKEY = 0;                 // Disable write to CCTRL
   145c0:	2200      	movs	r2, #0
   145c2:	615a      	str	r2, [r3, #20]

    SystemCoreClockUpdate();
   145c4:	f7ff ffe0 	bl	14588 <SystemCoreClockUpdate>

    NVIC_Relocate();
   145c8:	f000 f806 	bl	145d8 <NVIC_Relocate>
}
   145cc:	bd08      	pop	{r3, pc}
   145ce:	bf00      	nop
   145d0:	10000100 	.word	0x10000100
   145d4:	02dc6c00 	.word	0x02dc6c00

000145d8 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   145d8:	4a09      	ldr	r2, [pc, #36]	; (14600 <NVIC_Relocate+0x28>)
   145da:	4b0a      	ldr	r3, [pc, #40]	; (14604 <NVIC_Relocate+0x2c>)
   145dc:	429a      	cmp	r2, r3
   145de:	d00a      	beq.n	145f6 <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   145e0:	2300      	movs	r3, #0
   145e2:	2b29      	cmp	r3, #41	; 0x29
   145e4:	dc07      	bgt.n	145f6 <NVIC_Relocate+0x1e>
            new_location[i] = current_location[i];
   145e6:	4a07      	ldr	r2, [pc, #28]	; (14604 <NVIC_Relocate+0x2c>)
   145e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   145ec:	4a04      	ldr	r2, [pc, #16]	; (14600 <NVIC_Relocate+0x28>)
   145ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   145f2:	3301      	adds	r3, #1
   145f4:	e7f5      	b.n	145e2 <NVIC_Relocate+0xa>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   145f6:	4a02      	ldr	r2, [pc, #8]	; (14600 <NVIC_Relocate+0x28>)
   145f8:	4b03      	ldr	r3, [pc, #12]	; (14608 <NVIC_Relocate+0x30>)
   145fa:	609a      	str	r2, [r3, #8]
#endif
}
   145fc:	4770      	bx	lr
   145fe:	bf00      	nop
   14600:	10000000 	.word	0x10000000
   14604:	00014020 	.word	0x00014020
   14608:	e000ed00 	.word	0xe000ed00

0001460c <_sbrkInit>:
static char *brk;

void
_sbrkInit(char *base, char *limit)
{
    sbrk_base = base;
   1460c:	4b03      	ldr	r3, [pc, #12]	; (1461c <_sbrkInit+0x10>)
   1460e:	6018      	str	r0, [r3, #0]
    sbrk_limit = limit;
   14610:	4b03      	ldr	r3, [pc, #12]	; (14620 <_sbrkInit+0x14>)
   14612:	6019      	str	r1, [r3, #0]
    brk = base;
   14614:	4b03      	ldr	r3, [pc, #12]	; (14624 <_sbrkInit+0x18>)
   14616:	6018      	str	r0, [r3, #0]
}
   14618:	4770      	bx	lr
   1461a:	bf00      	nop
   1461c:	10001b3c 	.word	0x10001b3c
   14620:	10001b40 	.word	0x10001b40
   14624:	10001b38 	.word	0x10001b38

00014628 <_sbrk>:

void *
_sbrk(int incr)
{
   14628:	4603      	mov	r3, r0
    char *prev_brk;
    char *new_brk = brk + incr;
   1462a:	4a0a      	ldr	r2, [pc, #40]	; (14654 <_sbrk+0x2c>)
   1462c:	6810      	ldr	r0, [r2, #0]
   1462e:	4403      	add	r3, r0

    if (new_brk < sbrk_base || new_brk > sbrk_limit) {
   14630:	4a09      	ldr	r2, [pc, #36]	; (14658 <_sbrk+0x30>)
   14632:	6812      	ldr	r2, [r2, #0]
   14634:	429a      	cmp	r2, r3
   14636:	d806      	bhi.n	14646 <_sbrk+0x1e>
   14638:	4a08      	ldr	r2, [pc, #32]	; (1465c <_sbrk+0x34>)
   1463a:	6812      	ldr	r2, [r2, #0]
   1463c:	429a      	cmp	r2, r3
   1463e:	d305      	bcc.n	1464c <_sbrk+0x24>
        prev_brk = (char *)-1;
    } else {
        prev_brk = brk;
        brk = new_brk;
   14640:	4a04      	ldr	r2, [pc, #16]	; (14654 <_sbrk+0x2c>)
   14642:	6013      	str	r3, [r2, #0]
   14644:	4770      	bx	lr
        prev_brk = (char *)-1;
   14646:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1464a:	4770      	bx	lr
   1464c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return prev_brk;
}
   14650:	4770      	bx	lr
   14652:	bf00      	nop
   14654:	10001b38 	.word	0x10001b38
   14658:	10001b3c 	.word	0x10001b3c
   1465c:	10001b40 	.word	0x10001b40

00014660 <hal_system_init>:
am_hal_mcuctrl_device_t adevinfo;

void
hal_system_init(void)
{
}
   14660:	4770      	bx	lr
	...

00014664 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   14664:	4b02      	ldr	r3, [pc, #8]	; (14670 <hal_debugger_connected+0xc>)
   14666:	6818      	ldr	r0, [r3, #0]
}
   14668:	f000 0001 	and.w	r0, r0, #1
   1466c:	4770      	bx	lr
   1466e:	bf00      	nop
   14670:	e000edf0 	.word	0xe000edf0

00014674 <hal_system_reset>:
{
   14674:	b508      	push	{r3, lr}
        HAL_DEBUG_BREAK();
   14676:	f7ff fff5 	bl	14664 <hal_debugger_connected>
   1467a:	b100      	cbz	r0, 1467e <hal_system_reset+0xa>
#endif

static inline void
hal_debug_break(void)
{
    __BKPT(1);
   1467c:	be01      	bkpt	0x0001
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1467e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14682:	4905      	ldr	r1, [pc, #20]	; (14698 <hal_system_reset+0x24>)
   14684:	68ca      	ldr	r2, [r1, #12]
   14686:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1468a:	4b04      	ldr	r3, [pc, #16]	; (1469c <hal_system_reset+0x28>)
   1468c:	4313      	orrs	r3, r2
   1468e:	60cb      	str	r3, [r1, #12]
   14690:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14694:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14696:	e7fd      	b.n	14694 <hal_system_reset+0x20>
   14698:	e000ed00 	.word	0xe000ed00
   1469c:	05fa0004 	.word	0x05fa0004

000146a0 <_init>:
}

__attribute__((weak)) void
_init(void)
{
}
   146a0:	4770      	bx	lr
	...

000146a4 <__libc_init_array>:
extern void (*__init_array_start[])(void);
extern void (*__init_array_end[])(void);

void
__libc_init_array(void)
{
   146a4:	b538      	push	{r3, r4, r5, lr}
    size_t count;
    size_t i;

    count = __preinit_array_end - __preinit_array_start;
   146a6:	4d0e      	ldr	r5, [pc, #56]	; (146e0 <__libc_init_array+0x3c>)
   146a8:	4b0e      	ldr	r3, [pc, #56]	; (146e4 <__libc_init_array+0x40>)
   146aa:	1aed      	subs	r5, r5, r3
   146ac:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
   146ae:	2400      	movs	r4, #0
   146b0:	42ac      	cmp	r4, r5
   146b2:	d205      	bcs.n	146c0 <__libc_init_array+0x1c>
        __preinit_array_start[i]();
   146b4:	4b0b      	ldr	r3, [pc, #44]	; (146e4 <__libc_init_array+0x40>)
   146b6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   146ba:	4798      	blx	r3
    for (i = 0; i < count; i++)
   146bc:	3401      	adds	r4, #1
   146be:	e7f7      	b.n	146b0 <__libc_init_array+0xc>

    _init();
   146c0:	f7ff ffee 	bl	146a0 <_init>

    count = __init_array_end - __init_array_start;
   146c4:	4d08      	ldr	r5, [pc, #32]	; (146e8 <__libc_init_array+0x44>)
   146c6:	4b09      	ldr	r3, [pc, #36]	; (146ec <__libc_init_array+0x48>)
   146c8:	1aed      	subs	r5, r5, r3
   146ca:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
   146cc:	2400      	movs	r4, #0
   146ce:	e004      	b.n	146da <__libc_init_array+0x36>
        __init_array_start[i]();
   146d0:	4b06      	ldr	r3, [pc, #24]	; (146ec <__libc_init_array+0x48>)
   146d2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   146d6:	4798      	blx	r3
    for (i = 0; i < count; i++)
   146d8:	3401      	adds	r4, #1
   146da:	42ac      	cmp	r4, r5
   146dc:	d3f8      	bcc.n	146d0 <__libc_init_array+0x2c>
}
   146de:	bd38      	pop	{r3, r4, r5, pc}
   146e0:	10001b34 	.word	0x10001b34
   146e4:	10001b34 	.word	0x10001b34
   146e8:	10001b34 	.word	0x10001b34
   146ec:	10001b34 	.word	0x10001b34

000146f0 <_start>:
{
   146f0:	b508      	push	{r3, lr}
        __libc_init_array();
   146f2:	f7ff ffd7 	bl	146a4 <__libc_init_array>
    os_init(main);
   146f6:	4803      	ldr	r0, [pc, #12]	; (14704 <_start+0x14>)
   146f8:	f000 fc5e 	bl	14fb8 <os_init>
    os_start();
   146fc:	f000 fcc8 	bl	15090 <os_start>
}
   14700:	bd08      	pop	{r3, pc}
   14702:	bf00      	nop
   14704:	00014a8d 	.word	0x00014a8d

00014708 <bleprph_on_reset>:
    return 0;
}

static void
bleprph_on_reset(int reason)
{
   14708:	b508      	push	{r3, lr}
   1470a:	4603      	mov	r3, r0
    MODLOG_DFLT(ERROR, "Resetting state; reason=%d\n", reason);
   1470c:	4a02      	ldr	r2, [pc, #8]	; (14718 <bleprph_on_reset+0x10>)
   1470e:	2103      	movs	r1, #3
   14710:	2000      	movs	r0, #0
   14712:	f005 f821 	bl	19758 <modlog_printf>
}
   14716:	bd08      	pop	{r3, pc}
   14718:	000300f0 	.word	0x000300f0

0001471c <bleprph_advertise>:
{
   1471c:	b500      	push	{lr}
   1471e:	b09f      	sub	sp, #124	; 0x7c
    rc = ble_hs_id_infer_auto(0, &own_addr_type);
   14720:	f10d 0173 	add.w	r1, sp, #115	; 0x73
   14724:	2000      	movs	r0, #0
   14726:	f00f f86b 	bl	23800 <ble_hs_id_infer_auto>
    if (rc != 0) {
   1472a:	2800      	cmp	r0, #0
   1472c:	d146      	bne.n	147bc <bleprph_advertise+0xa0>
    memset(&fields, 0, sizeof fields);
   1472e:	2260      	movs	r2, #96	; 0x60
   14730:	2100      	movs	r1, #0
   14732:	a802      	add	r0, sp, #8
   14734:	f002 f9f3 	bl	16b1e <memset>
    fields.flags = BLE_HS_ADV_F_DISC_GEN |
   14738:	2306      	movs	r3, #6
   1473a:	f88d 3008 	strb.w	r3, [sp, #8]
    fields.tx_pwr_lvl_is_present = 1;
   1473e:	2301      	movs	r3, #1
   14740:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    fields.tx_pwr_lvl = BLE_HS_ADV_TX_PWR_LVL_AUTO;
   14744:	2380      	movs	r3, #128	; 0x80
   14746:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    name = ble_svc_gap_device_name();
   1474a:	f012 fceb 	bl	27124 <ble_svc_gap_device_name>
    fields.name = (uint8_t *)name;
   1474e:	9009      	str	r0, [sp, #36]	; 0x24
    fields.name_len = strlen(name);
   14750:	f002 fa0d 	bl	16b6e <strlen>
   14754:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
    fields.name_is_complete = 1;
   14758:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   1475c:	f043 0301 	orr.w	r3, r3, #1
   14760:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    fields.uuids16 = (ble_uuid16_t[]){
   14764:	4b1f      	ldr	r3, [pc, #124]	; (147e4 <bleprph_advertise+0xc8>)
   14766:	681b      	ldr	r3, [r3, #0]
   14768:	931d      	str	r3, [sp, #116]	; 0x74
   1476a:	ab1d      	add	r3, sp, #116	; 0x74
   1476c:	9303      	str	r3, [sp, #12]
    fields.num_uuids16 = 1;
   1476e:	2301      	movs	r3, #1
   14770:	f88d 3010 	strb.w	r3, [sp, #16]
    fields.uuids16_is_complete = 1;
   14774:	f89d 3011 	ldrb.w	r3, [sp, #17]
   14778:	f043 0301 	orr.w	r3, r3, #1
   1477c:	f88d 3011 	strb.w	r3, [sp, #17]
    rc = ble_gap_adv_set_fields(&fields);
   14780:	a802      	add	r0, sp, #8
   14782:	f00a fb5f 	bl	1ee44 <ble_gap_adv_set_fields>
    if (rc != 0) {
   14786:	4603      	mov	r3, r0
   14788:	b9f8      	cbnz	r0, 147ca <bleprph_advertise+0xae>
    memset(&adv_params, 0, sizeof adv_params);
   1478a:	2100      	movs	r1, #0
   1478c:	911a      	str	r1, [sp, #104]	; 0x68
   1478e:	911b      	str	r1, [sp, #108]	; 0x6c
   14790:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
    adv_params.conn_mode = BLE_GAP_CONN_MODE_UND;
   14794:	2302      	movs	r3, #2
   14796:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    adv_params.disc_mode = BLE_GAP_DISC_MODE_GEN;
   1479a:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    rc = ble_gap_adv_start(own_addr_type, NULL, BLE_HS_FOREVER,
   1479e:	9101      	str	r1, [sp, #4]
   147a0:	4b11      	ldr	r3, [pc, #68]	; (147e8 <bleprph_advertise+0xcc>)
   147a2:	9300      	str	r3, [sp, #0]
   147a4:	ab1a      	add	r3, sp, #104	; 0x68
   147a6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   147aa:	f89d 0073 	ldrb.w	r0, [sp, #115]	; 0x73
   147ae:	f00a fa93 	bl	1ecd8 <ble_gap_adv_start>
    if (rc != 0) {
   147b2:	4603      	mov	r3, r0
   147b4:	b978      	cbnz	r0, 147d6 <bleprph_advertise+0xba>
}
   147b6:	b01f      	add	sp, #124	; 0x7c
   147b8:	f85d fb04 	ldr.w	pc, [sp], #4
   147bc:	4603      	mov	r3, r0
        MODLOG_DFLT(ERROR, "error determining address type; rc=%d\n", rc);
   147be:	4a0b      	ldr	r2, [pc, #44]	; (147ec <bleprph_advertise+0xd0>)
   147c0:	2103      	movs	r1, #3
   147c2:	2000      	movs	r0, #0
   147c4:	f004 ffc8 	bl	19758 <modlog_printf>
        return;
   147c8:	e7f5      	b.n	147b6 <bleprph_advertise+0x9a>
        MODLOG_DFLT(ERROR, "error setting advertisement data; rc=%d\n", rc);
   147ca:	4a09      	ldr	r2, [pc, #36]	; (147f0 <bleprph_advertise+0xd4>)
   147cc:	2103      	movs	r1, #3
   147ce:	2000      	movs	r0, #0
   147d0:	f004 ffc2 	bl	19758 <modlog_printf>
        return;
   147d4:	e7ef      	b.n	147b6 <bleprph_advertise+0x9a>
        MODLOG_DFLT(ERROR, "error enabling advertisement; rc=%d\n", rc);
   147d6:	4a07      	ldr	r2, [pc, #28]	; (147f4 <bleprph_advertise+0xd8>)
   147d8:	2103      	movs	r1, #3
   147da:	2000      	movs	r0, #0
   147dc:	f004 ffbc 	bl	19758 <modlog_printf>
        return;
   147e0:	e7e9      	b.n	147b6 <bleprph_advertise+0x9a>
   147e2:	bf00      	nop
   147e4:	00030090 	.word	0x00030090
   147e8:	000148b5 	.word	0x000148b5
   147ec:	0003010c 	.word	0x0003010c
   147f0:	00030134 	.word	0x00030134
   147f4:	00030160 	.word	0x00030160

000147f8 <bleprph_on_sync>:

static void
bleprph_on_sync(void)
{
   147f8:	b508      	push	{r3, lr}
    int rc;

    /* Make sure we have proper identity address set (public preferred) */
    rc = ble_hs_util_ensure_addr(0);
   147fa:	2000      	movs	r0, #0
   147fc:	f012 ffac 	bl	27758 <ble_hs_util_ensure_addr>
    assert(rc == 0);
   14800:	b910      	cbnz	r0, 14808 <bleprph_on_sync+0x10>

    /* Begin advertising. */
    bleprph_advertise();
   14802:	f7ff ff8b 	bl	1471c <bleprph_advertise>
}
   14806:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   14808:	f7ff ff2c 	bl	14664 <hal_debugger_connected>
   1480c:	b100      	cbz	r0, 14810 <bleprph_on_sync+0x18>
   1480e:	be01      	bkpt	0x0001
   14810:	2300      	movs	r3, #0
   14812:	461a      	mov	r2, r3
   14814:	4619      	mov	r1, r3
   14816:	4618      	mov	r0, r3
   14818:	f000 fac4 	bl	14da4 <__assert_func>

0001481c <bleprph_print_conn_desc>:
{
   1481c:	b530      	push	{r4, r5, lr}
   1481e:	b087      	sub	sp, #28
   14820:	4604      	mov	r4, r0
    MODLOG_DFLT(INFO, "handle=%d our_ota_addr_type=%d our_ota_addr=",
   14822:	7c83      	ldrb	r3, [r0, #18]
   14824:	9300      	str	r3, [sp, #0]
   14826:	8c03      	ldrh	r3, [r0, #32]
   14828:	4a1d      	ldr	r2, [pc, #116]	; (148a0 <bleprph_print_conn_desc+0x84>)
   1482a:	2101      	movs	r1, #1
   1482c:	2000      	movs	r0, #0
   1482e:	f004 ff93 	bl	19758 <modlog_printf>
    print_addr(desc->our_ota_addr.val);
   14832:	f104 0013 	add.w	r0, r4, #19
   14836:	f000 f965 	bl	14b04 <print_addr>
    MODLOG_DFLT(INFO, " our_id_addr_type=%d our_id_addr=",
   1483a:	7923      	ldrb	r3, [r4, #4]
   1483c:	4a19      	ldr	r2, [pc, #100]	; (148a4 <bleprph_print_conn_desc+0x88>)
   1483e:	2101      	movs	r1, #1
   14840:	2000      	movs	r0, #0
   14842:	f004 ff89 	bl	19758 <modlog_printf>
    print_addr(desc->our_id_addr.val);
   14846:	1d60      	adds	r0, r4, #5
   14848:	f000 f95c 	bl	14b04 <print_addr>
    MODLOG_DFLT(INFO, " peer_ota_addr_type=%d peer_ota_addr=",
   1484c:	7e63      	ldrb	r3, [r4, #25]
   1484e:	4a16      	ldr	r2, [pc, #88]	; (148a8 <bleprph_print_conn_desc+0x8c>)
   14850:	2101      	movs	r1, #1
   14852:	2000      	movs	r0, #0
   14854:	f004 ff80 	bl	19758 <modlog_printf>
    print_addr(desc->peer_ota_addr.val);
   14858:	f104 001a 	add.w	r0, r4, #26
   1485c:	f000 f952 	bl	14b04 <print_addr>
    MODLOG_DFLT(INFO, " peer_id_addr_type=%d peer_id_addr=",
   14860:	7ae3      	ldrb	r3, [r4, #11]
   14862:	4a12      	ldr	r2, [pc, #72]	; (148ac <bleprph_print_conn_desc+0x90>)
   14864:	2101      	movs	r1, #1
   14866:	2000      	movs	r0, #0
   14868:	f004 ff76 	bl	19758 <modlog_printf>
    print_addr(desc->peer_id_addr.val);
   1486c:	f104 000c 	add.w	r0, r4, #12
   14870:	f000 f948 	bl	14b04 <print_addr>
    MODLOG_DFLT(INFO, " conn_itvl=%d conn_latency=%d supervision_timeout=%d "
   14874:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   14876:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   14878:	7823      	ldrb	r3, [r4, #0]
   1487a:	f003 0001 	and.w	r0, r3, #1
   1487e:	f3c3 0540 	ubfx	r5, r3, #1, #1
   14882:	f3c3 0380 	ubfx	r3, r3, #2, #1
   14886:	9304      	str	r3, [sp, #16]
   14888:	9503      	str	r5, [sp, #12]
   1488a:	9002      	str	r0, [sp, #8]
   1488c:	9101      	str	r1, [sp, #4]
   1488e:	9200      	str	r2, [sp, #0]
   14890:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   14892:	4a07      	ldr	r2, [pc, #28]	; (148b0 <bleprph_print_conn_desc+0x94>)
   14894:	2101      	movs	r1, #1
   14896:	2000      	movs	r0, #0
   14898:	f004 ff5e 	bl	19758 <modlog_printf>
}
   1489c:	b007      	add	sp, #28
   1489e:	bd30      	pop	{r4, r5, pc}
   148a0:	00030188 	.word	0x00030188
   148a4:	000301b8 	.word	0x000301b8
   148a8:	000301dc 	.word	0x000301dc
   148ac:	00030204 	.word	0x00030204
   148b0:	00030228 	.word	0x00030228

000148b4 <bleprph_gap_event>:
{
   148b4:	b570      	push	{r4, r5, r6, lr}
   148b6:	b092      	sub	sp, #72	; 0x48
   148b8:	4604      	mov	r4, r0
    switch (event->type) {
   148ba:	7803      	ldrb	r3, [r0, #0]
   148bc:	2b11      	cmp	r3, #17
   148be:	f200 80cc 	bhi.w	14a5a <bleprph_gap_event+0x1a6>
   148c2:	e8df f003 	tbb	[pc, r3]
   148c6:	3509      	.short	0x3509
   148c8:	caca48ca 	.word	0xcaca48ca
   148cc:	67cacaca 	.word	0x67cacaca
   148d0:	cacaca71 	.word	0xcacaca71
   148d4:	b5caa990 	.word	0xb5caa990
        MODLOG_DFLT(INFO, "connection %s; status=%d ",
   148d8:	6842      	ldr	r2, [r0, #4]
   148da:	b9ea      	cbnz	r2, 14918 <bleprph_gap_event+0x64>
   148dc:	4b61      	ldr	r3, [pc, #388]	; (14a64 <bleprph_gap_event+0x1b0>)
   148de:	9200      	str	r2, [sp, #0]
   148e0:	4a61      	ldr	r2, [pc, #388]	; (14a68 <bleprph_gap_event+0x1b4>)
   148e2:	2101      	movs	r1, #1
   148e4:	2000      	movs	r0, #0
   148e6:	f004 ff37 	bl	19758 <modlog_printf>
        if (event->connect.status == 0) {
   148ea:	6863      	ldr	r3, [r4, #4]
   148ec:	b93b      	cbnz	r3, 148fe <bleprph_gap_event+0x4a>
            rc = ble_gap_conn_find(event->connect.conn_handle, &desc);
   148ee:	a907      	add	r1, sp, #28
   148f0:	8920      	ldrh	r0, [r4, #8]
   148f2:	f00a f97d 	bl	1ebf0 <ble_gap_conn_find>
            assert(rc == 0);
   148f6:	b988      	cbnz	r0, 1491c <bleprph_gap_event+0x68>
            bleprph_print_conn_desc(&desc);
   148f8:	a807      	add	r0, sp, #28
   148fa:	f7ff ff8f 	bl	1481c <bleprph_print_conn_desc>
        MODLOG_DFLT(INFO, "\n");
   148fe:	4a5b      	ldr	r2, [pc, #364]	; (14a6c <bleprph_gap_event+0x1b8>)
   14900:	2101      	movs	r1, #1
   14902:	2000      	movs	r0, #0
   14904:	f004 ff28 	bl	19758 <modlog_printf>
        if (event->connect.status != 0) {
   14908:	6864      	ldr	r4, [r4, #4]
   1490a:	2c00      	cmp	r4, #0
   1490c:	f000 80a6 	beq.w	14a5c <bleprph_gap_event+0x1a8>
            bleprph_advertise();
   14910:	f7ff ff04 	bl	1471c <bleprph_advertise>
        return 0;
   14914:	2400      	movs	r4, #0
   14916:	e0a1      	b.n	14a5c <bleprph_gap_event+0x1a8>
        MODLOG_DFLT(INFO, "connection %s; status=%d ",
   14918:	4b55      	ldr	r3, [pc, #340]	; (14a70 <bleprph_gap_event+0x1bc>)
   1491a:	e7e0      	b.n	148de <bleprph_gap_event+0x2a>
            assert(rc == 0);
   1491c:	f7ff fea2 	bl	14664 <hal_debugger_connected>
   14920:	b100      	cbz	r0, 14924 <bleprph_gap_event+0x70>
   14922:	be01      	bkpt	0x0001
   14924:	2300      	movs	r3, #0
   14926:	461a      	mov	r2, r3
   14928:	4619      	mov	r1, r3
   1492a:	4618      	mov	r0, r3
   1492c:	f000 fa3a 	bl	14da4 <__assert_func>
        MODLOG_DFLT(INFO, "disconnect; reason=%d ", event->disconnect.reason);
   14930:	6843      	ldr	r3, [r0, #4]
   14932:	4a50      	ldr	r2, [pc, #320]	; (14a74 <bleprph_gap_event+0x1c0>)
   14934:	2101      	movs	r1, #1
   14936:	2000      	movs	r0, #0
   14938:	f004 ff0e 	bl	19758 <modlog_printf>
        bleprph_print_conn_desc(&event->disconnect.conn);
   1493c:	f104 0008 	add.w	r0, r4, #8
   14940:	f7ff ff6c 	bl	1481c <bleprph_print_conn_desc>
        MODLOG_DFLT(INFO, "\n");
   14944:	4a49      	ldr	r2, [pc, #292]	; (14a6c <bleprph_gap_event+0x1b8>)
   14946:	2101      	movs	r1, #1
   14948:	2000      	movs	r0, #0
   1494a:	f004 ff05 	bl	19758 <modlog_printf>
        bleprph_advertise();
   1494e:	f7ff fee5 	bl	1471c <bleprph_advertise>
        return 0;
   14952:	2400      	movs	r4, #0
   14954:	e082      	b.n	14a5c <bleprph_gap_event+0x1a8>
        MODLOG_DFLT(INFO, "connection updated; status=%d ",
   14956:	6843      	ldr	r3, [r0, #4]
   14958:	4a47      	ldr	r2, [pc, #284]	; (14a78 <bleprph_gap_event+0x1c4>)
   1495a:	2101      	movs	r1, #1
   1495c:	2000      	movs	r0, #0
   1495e:	f004 fefb 	bl	19758 <modlog_printf>
        rc = ble_gap_conn_find(event->conn_update.conn_handle, &desc);
   14962:	a907      	add	r1, sp, #28
   14964:	8920      	ldrh	r0, [r4, #8]
   14966:	f00a f943 	bl	1ebf0 <ble_gap_conn_find>
        assert(rc == 0);
   1496a:	4604      	mov	r4, r0
   1496c:	b940      	cbnz	r0, 14980 <bleprph_gap_event+0xcc>
        bleprph_print_conn_desc(&desc);
   1496e:	a807      	add	r0, sp, #28
   14970:	f7ff ff54 	bl	1481c <bleprph_print_conn_desc>
        MODLOG_DFLT(INFO, "\n");
   14974:	4a3d      	ldr	r2, [pc, #244]	; (14a6c <bleprph_gap_event+0x1b8>)
   14976:	2101      	movs	r1, #1
   14978:	2000      	movs	r0, #0
   1497a:	f004 feed 	bl	19758 <modlog_printf>
        return 0;
   1497e:	e06d      	b.n	14a5c <bleprph_gap_event+0x1a8>
        assert(rc == 0);
   14980:	f7ff fe70 	bl	14664 <hal_debugger_connected>
   14984:	b100      	cbz	r0, 14988 <bleprph_gap_event+0xd4>
   14986:	be01      	bkpt	0x0001
   14988:	2300      	movs	r3, #0
   1498a:	461a      	mov	r2, r3
   1498c:	4619      	mov	r1, r3
   1498e:	4618      	mov	r0, r3
   14990:	f000 fa08 	bl	14da4 <__assert_func>
        MODLOG_DFLT(INFO, "advertise complete; reason=%d",
   14994:	6843      	ldr	r3, [r0, #4]
   14996:	4a39      	ldr	r2, [pc, #228]	; (14a7c <bleprph_gap_event+0x1c8>)
   14998:	2101      	movs	r1, #1
   1499a:	2000      	movs	r0, #0
   1499c:	f004 fedc 	bl	19758 <modlog_printf>
        bleprph_advertise();
   149a0:	f7ff febc 	bl	1471c <bleprph_advertise>
        return 0;
   149a4:	2400      	movs	r4, #0
   149a6:	e059      	b.n	14a5c <bleprph_gap_event+0x1a8>
        MODLOG_DFLT(INFO, "encryption change event; status=%d ",
   149a8:	6843      	ldr	r3, [r0, #4]
   149aa:	4a35      	ldr	r2, [pc, #212]	; (14a80 <bleprph_gap_event+0x1cc>)
   149ac:	2101      	movs	r1, #1
   149ae:	2000      	movs	r0, #0
   149b0:	f004 fed2 	bl	19758 <modlog_printf>
        rc = ble_gap_conn_find(event->connect.conn_handle, &desc);
   149b4:	a907      	add	r1, sp, #28
   149b6:	8920      	ldrh	r0, [r4, #8]
   149b8:	f00a f91a 	bl	1ebf0 <ble_gap_conn_find>
        assert(rc == 0);
   149bc:	4604      	mov	r4, r0
   149be:	b940      	cbnz	r0, 149d2 <bleprph_gap_event+0x11e>
        bleprph_print_conn_desc(&desc);
   149c0:	a807      	add	r0, sp, #28
   149c2:	f7ff ff2b 	bl	1481c <bleprph_print_conn_desc>
        MODLOG_DFLT(INFO, "\n");
   149c6:	4a29      	ldr	r2, [pc, #164]	; (14a6c <bleprph_gap_event+0x1b8>)
   149c8:	2101      	movs	r1, #1
   149ca:	2000      	movs	r0, #0
   149cc:	f004 fec4 	bl	19758 <modlog_printf>
        return 0;
   149d0:	e044      	b.n	14a5c <bleprph_gap_event+0x1a8>
        assert(rc == 0);
   149d2:	f7ff fe47 	bl	14664 <hal_debugger_connected>
   149d6:	b100      	cbz	r0, 149da <bleprph_gap_event+0x126>
   149d8:	be01      	bkpt	0x0001
   149da:	2300      	movs	r3, #0
   149dc:	461a      	mov	r2, r3
   149de:	4619      	mov	r1, r3
   149e0:	4618      	mov	r0, r3
   149e2:	f000 f9df 	bl	14da4 <__assert_func>
        MODLOG_DFLT(INFO, "subscribe event; conn_handle=%d attr_handle=%d "
   149e6:	88c2      	ldrh	r2, [r0, #6]
   149e8:	7a01      	ldrb	r1, [r0, #8]
   149ea:	7a43      	ldrb	r3, [r0, #9]
   149ec:	f003 0001 	and.w	r0, r3, #1
   149f0:	f3c3 0540 	ubfx	r5, r3, #1, #1
   149f4:	f3c3 0680 	ubfx	r6, r3, #2, #1
   149f8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   149fc:	9305      	str	r3, [sp, #20]
   149fe:	9604      	str	r6, [sp, #16]
   14a00:	9503      	str	r5, [sp, #12]
   14a02:	9002      	str	r0, [sp, #8]
   14a04:	9101      	str	r1, [sp, #4]
   14a06:	9200      	str	r2, [sp, #0]
   14a08:	88a3      	ldrh	r3, [r4, #4]
   14a0a:	4a1e      	ldr	r2, [pc, #120]	; (14a84 <bleprph_gap_event+0x1d0>)
   14a0c:	2101      	movs	r1, #1
   14a0e:	2000      	movs	r0, #0
   14a10:	f004 fea2 	bl	19758 <modlog_printf>
        return 0;
   14a14:	2400      	movs	r4, #0
   14a16:	e021      	b.n	14a5c <bleprph_gap_event+0x1a8>
        MODLOG_DFLT(INFO, "mtu update event; conn_handle=%d cid=%d mtu=%d\n",
   14a18:	88c3      	ldrh	r3, [r0, #6]
   14a1a:	8902      	ldrh	r2, [r0, #8]
   14a1c:	9201      	str	r2, [sp, #4]
   14a1e:	9300      	str	r3, [sp, #0]
   14a20:	8883      	ldrh	r3, [r0, #4]
   14a22:	4a19      	ldr	r2, [pc, #100]	; (14a88 <bleprph_gap_event+0x1d4>)
   14a24:	2101      	movs	r1, #1
   14a26:	2000      	movs	r0, #0
   14a28:	f004 fe96 	bl	19758 <modlog_printf>
        return 0;
   14a2c:	2400      	movs	r4, #0
   14a2e:	e015      	b.n	14a5c <bleprph_gap_event+0x1a8>
        rc = ble_gap_conn_find(event->repeat_pairing.conn_handle, &desc);
   14a30:	a907      	add	r1, sp, #28
   14a32:	8880      	ldrh	r0, [r0, #4]
   14a34:	f00a f8dc 	bl	1ebf0 <ble_gap_conn_find>
        assert(rc == 0);
   14a38:	b928      	cbnz	r0, 14a46 <bleprph_gap_event+0x192>
        ble_store_util_delete_peer(&desc.peer_id_addr);
   14a3a:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   14a3e:	f011 fe9a 	bl	26776 <ble_store_util_delete_peer>
        return BLE_GAP_REPEAT_PAIRING_RETRY;
   14a42:	2401      	movs	r4, #1
   14a44:	e00a      	b.n	14a5c <bleprph_gap_event+0x1a8>
        assert(rc == 0);
   14a46:	f7ff fe0d 	bl	14664 <hal_debugger_connected>
   14a4a:	b100      	cbz	r0, 14a4e <bleprph_gap_event+0x19a>
   14a4c:	be01      	bkpt	0x0001
   14a4e:	2300      	movs	r3, #0
   14a50:	461a      	mov	r2, r3
   14a52:	4619      	mov	r1, r3
   14a54:	4618      	mov	r0, r3
   14a56:	f000 f9a5 	bl	14da4 <__assert_func>
    switch (event->type) {
   14a5a:	2400      	movs	r4, #0
}
   14a5c:	4620      	mov	r0, r4
   14a5e:	b012      	add	sp, #72	; 0x48
   14a60:	bd70      	pop	{r4, r5, r6, pc}
   14a62:	bf00      	nop
   14a64:	00030290 	.word	0x00030290
   14a68:	0003029c 	.word	0x0003029c
   14a6c:	000311a4 	.word	0x000311a4
   14a70:	00030288 	.word	0x00030288
   14a74:	000302b8 	.word	0x000302b8
   14a78:	000302d0 	.word	0x000302d0
   14a7c:	000302f0 	.word	0x000302f0
   14a80:	00030310 	.word	0x00030310
   14a84:	00030334 	.word	0x00030334
   14a88:	00030390 	.word	0x00030390

00014a8c <main>:
 *
 * @return int NOTE: this function should never return!
 */
int
main(void)
{
   14a8c:	b510      	push	{r4, lr}
   14a8e:	b082      	sub	sp, #8
    static char ver_str[IMGMGR_NMGR_MAX_VER];
#endif
    int rc;

    /* Initialize OS */
    sysinit();
   14a90:	f005 fbf0 	bl	1a274 <sysinit_start>
   14a94:	f000 f90c 	bl	14cb0 <sysinit_app>
   14a98:	f005 fbf2 	bl	1a280 <sysinit_end>

    /* Initialize the NimBLE host configuration. */
    ble_hs_cfg.reset_cb = bleprph_on_reset;
   14a9c:	4b13      	ldr	r3, [pc, #76]	; (14aec <main+0x60>)
   14a9e:	4a14      	ldr	r2, [pc, #80]	; (14af0 <main+0x64>)
   14aa0:	60da      	str	r2, [r3, #12]
    ble_hs_cfg.sync_cb = bleprph_on_sync;
   14aa2:	4a14      	ldr	r2, [pc, #80]	; (14af4 <main+0x68>)
   14aa4:	611a      	str	r2, [r3, #16]
    ble_hs_cfg.gatts_register_cb = gatt_svr_register_cb;
   14aa6:	4a14      	ldr	r2, [pc, #80]	; (14af8 <main+0x6c>)
   14aa8:	601a      	str	r2, [r3, #0]
    ble_hs_cfg.store_status_cb = ble_store_util_status_rr;
   14aaa:	4a14      	ldr	r2, [pc, #80]	; (14afc <main+0x70>)
   14aac:	621a      	str	r2, [r3, #32]

    rc = gatt_svr_init();
   14aae:	f000 f8f3 	bl	14c98 <gatt_svr_init>
    assert(rc == 0);
   14ab2:	b148      	cbz	r0, 14ac8 <main+0x3c>
   14ab4:	f7ff fdd6 	bl	14664 <hal_debugger_connected>
   14ab8:	b100      	cbz	r0, 14abc <main+0x30>
   14aba:	be01      	bkpt	0x0001
   14abc:	2300      	movs	r3, #0
   14abe:	461a      	mov	r2, r3
   14ac0:	4619      	mov	r1, r3
   14ac2:	4618      	mov	r0, r3
   14ac4:	f000 f96e 	bl	14da4 <__assert_func>

#if MYNEWT_VAL(BLE_SVC_DIS_FIRMWARE_REVISION_READ_PERM) >= 0
    /* Set firmware version in DIS */
    imgr_my_version(&ver);
   14ac8:	4668      	mov	r0, sp
   14aca:	f002 f895 	bl	16bf8 <imgr_my_version>
    imgr_ver_str(&ver, ver_str);
   14ace:	4c0c      	ldr	r4, [pc, #48]	; (14b00 <main+0x74>)
   14ad0:	4621      	mov	r1, r4
   14ad2:	4668      	mov	r0, sp
   14ad4:	f002 f904 	bl	16ce0 <imgr_ver_str>
    ble_svc_dis_firmware_revision_set(ver_str);
   14ad8:	4620      	mov	r0, r4
   14ada:	f012 fa5b 	bl	26f94 <ble_svc_dis_firmware_revision_set>

#if MYNEWT_VAL(BLEPRPH_LE_PHY_SUPPORT)
    phy_init();
#endif

    conf_load();
   14ade:	f002 fba9 	bl	17234 <conf_load>

    /*
     * As the last thing, process events from default event queue.
     */
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
   14ae2:	f000 fd4b 	bl	1557c <os_eventq_dflt_get>
   14ae6:	f000 fd16 	bl	15516 <os_eventq_run>
    while (1) {
   14aea:	e7fa      	b.n	14ae2 <main+0x56>
   14aec:	100002bc 	.word	0x100002bc
   14af0:	00014709 	.word	0x00014709
   14af4:	000147f9 	.word	0x000147f9
   14af8:	00014c09 	.word	0x00014c09
   14afc:	000267dd 	.word	0x000267dd
   14b00:	10001b44 	.word	0x10001b44

00014b04 <print_addr>:
    }
}

void
print_addr(const void *addr)
{
   14b04:	b530      	push	{r4, r5, lr}
   14b06:	b087      	sub	sp, #28
    const uint8_t *u8p;

    u8p = addr;
    MODLOG_DFLT(INFO, "%02x:%02x:%02x:%02x:%02x:%02x",
   14b08:	7903      	ldrb	r3, [r0, #4]
   14b0a:	78c2      	ldrb	r2, [r0, #3]
   14b0c:	7881      	ldrb	r1, [r0, #2]
   14b0e:	7844      	ldrb	r4, [r0, #1]
   14b10:	7805      	ldrb	r5, [r0, #0]
   14b12:	9504      	str	r5, [sp, #16]
   14b14:	9403      	str	r4, [sp, #12]
   14b16:	9102      	str	r1, [sp, #8]
   14b18:	9201      	str	r2, [sp, #4]
   14b1a:	9300      	str	r3, [sp, #0]
   14b1c:	7943      	ldrb	r3, [r0, #5]
   14b1e:	4a03      	ldr	r2, [pc, #12]	; (14b2c <print_addr+0x28>)
   14b20:	2101      	movs	r1, #1
   14b22:	2000      	movs	r0, #0
   14b24:	f004 fe18 	bl	19758 <modlog_printf>
                u8p[5], u8p[4], u8p[3], u8p[2], u8p[1], u8p[0]);
}
   14b28:	b007      	add	sp, #28
   14b2a:	bd30      	pop	{r4, r5, pc}
   14b2c:	000303c0 	.word	0x000303c0

00014b30 <gatt_svr_chr_write>:
};

static int
gatt_svr_chr_write(struct os_mbuf *om, uint16_t min_len, uint16_t max_len,
                   void *dst, uint16_t *len)
{
   14b30:	b510      	push	{r4, lr}
   14b32:	461c      	mov	r4, r3
    uint16_t om_len;
    int rc;

    om_len = OS_MBUF_PKTLEN(om);
   14b34:	8a03      	ldrh	r3, [r0, #16]
    if (om_len < min_len || om_len > max_len) {
   14b36:	428b      	cmp	r3, r1
   14b38:	d307      	bcc.n	14b4a <gatt_svr_chr_write+0x1a>
   14b3a:	4293      	cmp	r3, r2
   14b3c:	d807      	bhi.n	14b4e <gatt_svr_chr_write+0x1e>
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
    }

    rc = ble_hs_mbuf_to_flat(om, dst, max_len, len);
   14b3e:	9b02      	ldr	r3, [sp, #8]
   14b40:	4621      	mov	r1, r4
   14b42:	f00e fecd 	bl	238e0 <ble_hs_mbuf_to_flat>
    if (rc != 0) {
   14b46:	b920      	cbnz	r0, 14b52 <gatt_svr_chr_write+0x22>
        return BLE_ATT_ERR_UNLIKELY;
    }

    return 0;
}
   14b48:	bd10      	pop	{r4, pc}
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   14b4a:	200d      	movs	r0, #13
   14b4c:	e7fc      	b.n	14b48 <gatt_svr_chr_write+0x18>
   14b4e:	200d      	movs	r0, #13
   14b50:	e7fa      	b.n	14b48 <gatt_svr_chr_write+0x18>
        return BLE_ATT_ERR_UNLIKELY;
   14b52:	200e      	movs	r0, #14
   14b54:	e7f8      	b.n	14b48 <gatt_svr_chr_write+0x18>
	...

00014b58 <gatt_svr_chr_access_sec_test>:

static int
gatt_svr_chr_access_sec_test(uint16_t conn_handle, uint16_t attr_handle,
                             struct ble_gatt_access_ctxt *ctxt,
                             void *arg)
{
   14b58:	b530      	push	{r4, r5, lr}
   14b5a:	b085      	sub	sp, #20
   14b5c:	4614      	mov	r4, r2
    const ble_uuid_t *uuid;
    int rand_num;
    int rc;

    uuid = ctxt->chr->uuid;
   14b5e:	6893      	ldr	r3, [r2, #8]
   14b60:	681d      	ldr	r5, [r3, #0]

    /* Determine which characteristic is being accessed by examining its
     * 128-bit UUID.
     */

    if (ble_uuid_cmp(uuid, &gatt_svr_chr_sec_test_rand_uuid.u) == 0) {
   14b62:	4926      	ldr	r1, [pc, #152]	; (14bfc <gatt_svr_chr_access_sec_test+0xa4>)
   14b64:	4628      	mov	r0, r5
   14b66:	f011 fe7d 	bl	26864 <ble_uuid_cmp>
   14b6a:	b9b8      	cbnz	r0, 14b9c <gatt_svr_chr_access_sec_test+0x44>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   14b6c:	7823      	ldrb	r3, [r4, #0]
   14b6e:	b95b      	cbnz	r3, 14b88 <gatt_svr_chr_access_sec_test+0x30>
}

#define RAND_MAX 0x7fffffff
__extern_inline int rand(void)
{
	return (int)lrand48();
   14b70:	f001 ff84 	bl	16a7c <lrand48>

        /* Respond with a 32-bit random number. */
        rand_num = rand();
   14b74:	9003      	str	r0, [sp, #12]
        rc = os_mbuf_append(ctxt->om, &rand_num, sizeof rand_num);
   14b76:	2204      	movs	r2, #4
   14b78:	a903      	add	r1, sp, #12
   14b7a:	6860      	ldr	r0, [r4, #4]
   14b7c:	f000 fd93 	bl	156a6 <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   14b80:	b100      	cbz	r0, 14b84 <gatt_svr_chr_access_sec_test+0x2c>
   14b82:	2011      	movs	r0, #17
    /* Unknown characteristic; the nimble stack should not have called this
     * function.
     */
    assert(0);
    return BLE_ATT_ERR_UNLIKELY;
}
   14b84:	b005      	add	sp, #20
   14b86:	bd30      	pop	{r4, r5, pc}
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   14b88:	f7ff fd6c 	bl	14664 <hal_debugger_connected>
   14b8c:	b100      	cbz	r0, 14b90 <gatt_svr_chr_access_sec_test+0x38>
   14b8e:	be01      	bkpt	0x0001
   14b90:	2300      	movs	r3, #0
   14b92:	461a      	mov	r2, r3
   14b94:	4619      	mov	r1, r3
   14b96:	4618      	mov	r0, r3
   14b98:	f000 f904 	bl	14da4 <__assert_func>
    if (ble_uuid_cmp(uuid, &gatt_svr_chr_sec_test_static_uuid.u) == 0) {
   14b9c:	4918      	ldr	r1, [pc, #96]	; (14c00 <gatt_svr_chr_access_sec_test+0xa8>)
   14b9e:	4628      	mov	r0, r5
   14ba0:	f011 fe60 	bl	26864 <ble_uuid_cmp>
   14ba4:	b9f8      	cbnz	r0, 14be6 <gatt_svr_chr_access_sec_test+0x8e>
        switch (ctxt->op) {
   14ba6:	7823      	ldrb	r3, [r4, #0]
   14ba8:	b153      	cbz	r3, 14bc0 <gatt_svr_chr_access_sec_test+0x68>
   14baa:	2b01      	cmp	r3, #1
   14bac:	d111      	bne.n	14bd2 <gatt_svr_chr_access_sec_test+0x7a>
            rc = gatt_svr_chr_write(ctxt->om,
   14bae:	2300      	movs	r3, #0
   14bb0:	9300      	str	r3, [sp, #0]
   14bb2:	4b14      	ldr	r3, [pc, #80]	; (14c04 <gatt_svr_chr_access_sec_test+0xac>)
   14bb4:	2201      	movs	r2, #1
   14bb6:	4611      	mov	r1, r2
   14bb8:	6860      	ldr	r0, [r4, #4]
   14bba:	f7ff ffb9 	bl	14b30 <gatt_svr_chr_write>
            return rc;
   14bbe:	e7e1      	b.n	14b84 <gatt_svr_chr_access_sec_test+0x2c>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_sec_test_static_val,
   14bc0:	2201      	movs	r2, #1
   14bc2:	4910      	ldr	r1, [pc, #64]	; (14c04 <gatt_svr_chr_access_sec_test+0xac>)
   14bc4:	6860      	ldr	r0, [r4, #4]
   14bc6:	f000 fd6e 	bl	156a6 <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   14bca:	2800      	cmp	r0, #0
   14bcc:	d0da      	beq.n	14b84 <gatt_svr_chr_access_sec_test+0x2c>
   14bce:	2011      	movs	r0, #17
   14bd0:	e7d8      	b.n	14b84 <gatt_svr_chr_access_sec_test+0x2c>
            assert(0);
   14bd2:	f7ff fd47 	bl	14664 <hal_debugger_connected>
   14bd6:	b100      	cbz	r0, 14bda <gatt_svr_chr_access_sec_test+0x82>
   14bd8:	be01      	bkpt	0x0001
   14bda:	2300      	movs	r3, #0
   14bdc:	461a      	mov	r2, r3
   14bde:	4619      	mov	r1, r3
   14be0:	4618      	mov	r0, r3
   14be2:	f000 f8df 	bl	14da4 <__assert_func>
    assert(0);
   14be6:	f7ff fd3d 	bl	14664 <hal_debugger_connected>
   14bea:	b100      	cbz	r0, 14bee <gatt_svr_chr_access_sec_test+0x96>
   14bec:	be01      	bkpt	0x0001
   14bee:	2300      	movs	r3, #0
   14bf0:	461a      	mov	r2, r3
   14bf2:	4619      	mov	r1, r3
   14bf4:	4618      	mov	r0, r3
   14bf6:	f000 f8d5 	bl	14da4 <__assert_func>
   14bfa:	bf00      	nop
   14bfc:	00030474 	.word	0x00030474
   14c00:	00030488 	.word	0x00030488
   14c04:	10001b5d 	.word	0x10001b5d

00014c08 <gatt_svr_register_cb>:

void
gatt_svr_register_cb(struct ble_gatt_register_ctxt *ctxt, void *arg)
{
   14c08:	b510      	push	{r4, lr}
   14c0a:	b08c      	sub	sp, #48	; 0x30
   14c0c:	4604      	mov	r4, r0
    char buf[BLE_UUID_STR_LEN];

    switch (ctxt->op) {
   14c0e:	7803      	ldrb	r3, [r0, #0]
   14c10:	2b02      	cmp	r3, #2
   14c12:	d01c      	beq.n	14c4e <gatt_svr_register_cb+0x46>
   14c14:	2b03      	cmp	r3, #3
   14c16:	d02a      	beq.n	14c6e <gatt_svr_register_cb+0x66>
   14c18:	2b01      	cmp	r3, #1
   14c1a:	d009      	beq.n	14c30 <gatt_svr_register_cb+0x28>
                    ble_uuid_to_str(ctxt->dsc.dsc_def->uuid, buf),
                    ctxt->dsc.handle);
        break;

    default:
        assert(0);
   14c1c:	f7ff fd22 	bl	14664 <hal_debugger_connected>
   14c20:	b100      	cbz	r0, 14c24 <gatt_svr_register_cb+0x1c>
   14c22:	be01      	bkpt	0x0001
   14c24:	2300      	movs	r3, #0
   14c26:	461a      	mov	r2, r3
   14c28:	4619      	mov	r1, r3
   14c2a:	4618      	mov	r0, r3
   14c2c:	f000 f8ba 	bl	14da4 <__assert_func>
        MODLOG_DFLT(DEBUG, "registered service %s with handle=%d\n",
   14c30:	6883      	ldr	r3, [r0, #8]
   14c32:	a902      	add	r1, sp, #8
   14c34:	6858      	ldr	r0, [r3, #4]
   14c36:	f011 fe33 	bl	268a0 <ble_uuid_to_str>
   14c3a:	4603      	mov	r3, r0
   14c3c:	88a2      	ldrh	r2, [r4, #4]
   14c3e:	9200      	str	r2, [sp, #0]
   14c40:	4a12      	ldr	r2, [pc, #72]	; (14c8c <gatt_svr_register_cb+0x84>)
   14c42:	2100      	movs	r1, #0
   14c44:	4608      	mov	r0, r1
   14c46:	f004 fd87 	bl	19758 <modlog_printf>
        break;
    }
}
   14c4a:	b00c      	add	sp, #48	; 0x30
   14c4c:	bd10      	pop	{r4, pc}
        MODLOG_DFLT(DEBUG, "registering characteristic %s with "
   14c4e:	6883      	ldr	r3, [r0, #8]
   14c50:	a902      	add	r1, sp, #8
   14c52:	6818      	ldr	r0, [r3, #0]
   14c54:	f011 fe24 	bl	268a0 <ble_uuid_to_str>
   14c58:	4603      	mov	r3, r0
   14c5a:	88a2      	ldrh	r2, [r4, #4]
   14c5c:	88e1      	ldrh	r1, [r4, #6]
   14c5e:	9101      	str	r1, [sp, #4]
   14c60:	9200      	str	r2, [sp, #0]
   14c62:	4a0b      	ldr	r2, [pc, #44]	; (14c90 <gatt_svr_register_cb+0x88>)
   14c64:	2100      	movs	r1, #0
   14c66:	4608      	mov	r0, r1
   14c68:	f004 fd76 	bl	19758 <modlog_printf>
        break;
   14c6c:	e7ed      	b.n	14c4a <gatt_svr_register_cb+0x42>
        MODLOG_DFLT(DEBUG, "registering descriptor %s with handle=%d\n",
   14c6e:	6883      	ldr	r3, [r0, #8]
   14c70:	a902      	add	r1, sp, #8
   14c72:	6818      	ldr	r0, [r3, #0]
   14c74:	f011 fe14 	bl	268a0 <ble_uuid_to_str>
   14c78:	4603      	mov	r3, r0
   14c7a:	88a2      	ldrh	r2, [r4, #4]
   14c7c:	9200      	str	r2, [sp, #0]
   14c7e:	4a05      	ldr	r2, [pc, #20]	; (14c94 <gatt_svr_register_cb+0x8c>)
   14c80:	2100      	movs	r1, #0
   14c82:	4608      	mov	r0, r1
   14c84:	f004 fd68 	bl	19758 <modlog_printf>
        break;
   14c88:	e7df      	b.n	14c4a <gatt_svr_register_cb+0x42>
   14c8a:	bf00      	nop
   14c8c:	000303e0 	.word	0x000303e0
   14c90:	00030408 	.word	0x00030408
   14c94:	00030448 	.word	0x00030448

00014c98 <gatt_svr_init>:

int
gatt_svr_init(void)
{
   14c98:	b508      	push	{r3, lr}
    int rc;

    rc = ble_gatts_count_cfg(gatt_svr_svcs);
   14c9a:	4804      	ldr	r0, [pc, #16]	; (14cac <gatt_svr_init+0x14>)
   14c9c:	f00c fe58 	bl	21950 <ble_gatts_count_cfg>
    if (rc != 0) {
   14ca0:	b100      	cbz	r0, 14ca4 <gatt_svr_init+0xc>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   14ca2:	bd08      	pop	{r3, pc}
    rc = ble_gatts_add_svcs(gatt_svr_svcs);
   14ca4:	4801      	ldr	r0, [pc, #4]	; (14cac <gatt_svr_init+0x14>)
   14ca6:	f00c fe2f 	bl	21908 <ble_gatts_add_svcs>
    if (rc != 0) {
   14caa:	e7fa      	b.n	14ca2 <gatt_svr_init+0xa>
   14cac:	000304b0 	.word	0x000304b0

00014cb0 <sysinit_app>:
void smp_ble_pkg_init(void);
void stat_mgmt_module_init(void);

void
sysinit_app(void)
{
   14cb0:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   14cb2:	f000 f9ff 	bl	150b4 <os_pkg_init>

    /*** Stage 9 */
    /* 9.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   14cb6:	f003 ffa9 	bl	18c0c <flash_map_init>

    /*** Stage 10 */
    /* 10.0: stats_module_init (sys/stats/full) */
    stats_module_init();
   14cba:	f005 fa77 	bl	1a1ac <stats_module_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (sys/console/full) */
    console_pkg_init();
   14cbe:	f003 fc91 	bl	185e4 <console_pkg_init>

    /*** Stage 50 */
    /* 50.0: config_pkg_init (sys/config) */
    config_pkg_init();
   14cc2:	f002 fa59 	bl	17178 <config_pkg_init>

    /*** Stage 100 */
    /* 100.0: apollo3_ble_hci_init (nimble/transport/apollo3) */
    apollo3_ble_hci_init();
   14cc6:	f013 f817 	bl	27cf8 <apollo3_ble_hci_init>
    /* 100.1: log_init (sys/log/full) */
    log_init();
   14cca:	f004 f9ad 	bl	19028 <log_init>
    /* 100.2: mfg_init (sys/mfg) */
    mfg_init();
   14cce:	f004 fecb 	bl	19a68 <mfg_init>
    /* 100.3: modlog_init (sys/log/modlog) */
    modlog_init();
   14cd2:	f004 fd5f 	bl	19794 <modlog_init>

    /*** Stage 200 */
    /* 200.0: ble_hs_init (nimble/host) */
    ble_hs_init();
   14cd6:	f00d f893 	bl	21e00 <ble_hs_init>
    /* 200.1: log_reboot_pkg_init (sys/reboot) */
    log_reboot_pkg_init();
   14cda:	f005 f989 	bl	19ff0 <log_reboot_pkg_init>

    /*** Stage 220 */
    /* 220.0: config_pkg_init_stage2 (sys/config) */
    config_pkg_init_stage2();
   14cde:	f002 fa61 	bl	171a4 <config_pkg_init_stage2>

    /*** Stage 301 */
    /* 301.0: ble_svc_gap_init (nimble/host/services/gap) */
    ble_svc_gap_init();
   14ce2:	f012 fa23 	bl	2712c <ble_svc_gap_init>

    /*** Stage 302 */
    /* 302.0: ble_svc_gatt_init (nimble/host/services/gatt) */
    ble_svc_gatt_init();
   14ce6:	f012 fa8f 	bl	27208 <ble_svc_gatt_init>

    /*** Stage 303 */
    /* 303.0: ble_svc_ans_init (nimble/host/services/ans) */
    ble_svc_ans_init();
   14cea:	f012 f8e1 	bl	26eb0 <ble_svc_ans_init>
    /* 303.1: ble_svc_dis_init (nimble/host/services/dis) */
    ble_svc_dis_init();
   14cee:	f012 f957 	bl	26fa0 <ble_svc_dis_init>

    /*** Stage 500 */
    /* 500.0: ble_store_config_init (nimble/host/store/config) */
    ble_store_config_init();
   14cf2:	f012 fce9 	bl	276c8 <ble_store_config_init>
    /* 500.1: id_init (sys/id) */
    id_init();
   14cf6:	f004 f891 	bl	18e1c <id_init>
    /* 500.2: imgmgr_module_init (mgmt/imgmgr) */
    imgmgr_module_init();
   14cfa:	f001 ffdb 	bl	16cb4 <imgmgr_module_init>
    /* 500.3: smp_pkg_init (mgmt/smp) */
    smp_pkg_init();
   14cfe:	f002 f8e1 	bl	16ec4 <smp_pkg_init>
    /* 500.4: split_app_init (boot/split) */
    split_app_init();
   14d02:	f000 f80b 	bl	14d1c <split_app_init>

    /*** Stage 501 */
    /* 501.0: img_mgmt_module_init (cmd/img_mgmt/port/mynewt) */
    img_mgmt_module_init();
   14d06:	f006 fe15 	bl	1b934 <img_mgmt_module_init>
    /* 501.1: log_mgmt_module_init (cmd/log_mgmt/port/mynewt) */
    log_mgmt_module_init();
   14d0a:	f006 ff61 	bl	1bbd0 <log_mgmt_module_init>
    /* 501.2: os_mgmt_module_init (cmd/os_mgmt) */
    os_mgmt_module_init();
   14d0e:	f007 f895 	bl	1be3c <os_mgmt_module_init>
    /* 501.3: smp_ble_pkg_init (mgmt/smp/transport/ble) */
    smp_ble_pkg_init();
   14d12:	f002 f999 	bl	17048 <smp_ble_pkg_init>
    /* 501.4: stat_mgmt_module_init (cmd/stat_mgmt/port/mynewt) */
    stat_mgmt_module_init();
   14d16:	f007 f94f 	bl	1bfb8 <stat_mgmt_module_init>
}
   14d1a:	bd08      	pop	{r3, pc}

00014d1c <split_app_init>:
    },
};

void
split_app_init(void)
{
   14d1c:	b508      	push	{r3, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   14d1e:	4b0e      	ldr	r3, [pc, #56]	; (14d58 <split_app_init+0x3c>)
   14d20:	781b      	ldrb	r3, [r3, #0]
   14d22:	b12b      	cbz	r3, 14d30 <split_app_init+0x14>

    rc = scfg_register(&split_scfg, "split");
   14d24:	490d      	ldr	r1, [pc, #52]	; (14d5c <split_app_init+0x40>)
   14d26:	480e      	ldr	r0, [pc, #56]	; (14d60 <split_app_init+0x44>)
   14d28:	f005 fc7a 	bl	1a620 <scfg_register>
    assert(rc == 0);
   14d2c:	b950      	cbnz	r0, 14d44 <split_app_init+0x28>
}
   14d2e:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   14d30:	f7ff fc98 	bl	14664 <hal_debugger_connected>
   14d34:	b100      	cbz	r0, 14d38 <split_app_init+0x1c>
   14d36:	be01      	bkpt	0x0001
   14d38:	2300      	movs	r3, #0
   14d3a:	461a      	mov	r2, r3
   14d3c:	4619      	mov	r1, r3
   14d3e:	4618      	mov	r0, r3
   14d40:	f000 f830 	bl	14da4 <__assert_func>
    assert(rc == 0);
   14d44:	f7ff fc8e 	bl	14664 <hal_debugger_connected>
   14d48:	b100      	cbz	r0, 14d4c <split_app_init+0x30>
   14d4a:	be01      	bkpt	0x0001
   14d4c:	2300      	movs	r3, #0
   14d4e:	461a      	mov	r2, r3
   14d50:	4619      	mov	r1, r3
   14d52:	4618      	mov	r0, r3
   14d54:	f000 f826 	bl	14da4 <__assert_func>
   14d58:	10003404 	.word	0x10003404
   14d5c:	000304d0 	.word	0x000304d0
   14d60:	1000014c 	.word	0x1000014c

00014d64 <split_app_active_get>:

int
split_app_active_get(void)
{
    return split_app_active;
}
   14d64:	4b01      	ldr	r3, [pc, #4]	; (14d6c <split_app_active_get+0x8>)
   14d66:	f993 0000 	ldrsb.w	r0, [r3]
   14d6a:	4770      	bx	lr
   14d6c:	10001b5e 	.word	0x10001b5e

00014d70 <split_mode_set>:
    /* XXX: For now, cast this as an integer.  This value should either be
     * treated as an enumeration generally (i.e. not read directly and assigned
     * from values in flash), or switched to a native type of integer.  However,
     * this is not a high priority change, so just cast it for now.
     */
    if ((int) split_mode < 0 || (int) split_mode >= SPLIT_MODE_CNT) {
   14d70:	2803      	cmp	r0, #3
   14d72:	d803      	bhi.n	14d7c <split_mode_set+0xc>
        return SYS_EINVAL;
    }

    split_mode_cur = split_mode;
   14d74:	4b03      	ldr	r3, [pc, #12]	; (14d84 <split_mode_set+0x14>)
   14d76:	7018      	strb	r0, [r3, #0]
    return 0;
   14d78:	2000      	movs	r0, #0
   14d7a:	4770      	bx	lr
        return SYS_EINVAL;
   14d7c:	f06f 0001 	mvn.w	r0, #1
}
   14d80:	4770      	bx	lr
   14d82:	bf00      	nop
   14d84:	10001b5f 	.word	0x10001b5f

00014d88 <split_write_split>:

int
split_write_split(split_mode_t split_mode)
{
   14d88:	b508      	push	{r3, lr}
    int rc;

    rc = split_mode_set(split_mode);
   14d8a:	f7ff fff1 	bl	14d70 <split_mode_set>
    if (rc != 0) {
   14d8e:	b100      	cbz	r0, 14d92 <split_write_split+0xa>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   14d90:	bd08      	pop	{r3, pc}
    rc = scfg_save_val(&split_scfg, &split_mode_cur);
   14d92:	4902      	ldr	r1, [pc, #8]	; (14d9c <split_write_split+0x14>)
   14d94:	4802      	ldr	r0, [pc, #8]	; (14da0 <split_write_split+0x18>)
   14d96:	f005 fc35 	bl	1a604 <scfg_save_val>
    if (rc != 0) {
   14d9a:	e7f9      	b.n	14d90 <split_write_split+0x8>
   14d9c:	10001b5f 	.word	0x10001b5f
   14da0:	1000014c 	.word	0x1000014c

00014da4 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   14da4:	b508      	push	{r3, lr}
   14da6:	4675      	mov	r5, lr
   14da8:	4604      	mov	r4, r0
   14daa:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   14dac:	f001 fcbe 	bl	1672c <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   14db0:	f003 fb4c 	bl	1844c <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   14db4:	b16c      	cbz	r4, 14dd2 <__assert_func+0x2e>
   14db6:	4633      	mov	r3, r6
   14db8:	4622      	mov	r2, r4
   14dba:	4629      	mov	r1, r5
   14dbc:	4807      	ldr	r0, [pc, #28]	; (14ddc <__assert_func+0x38>)
   14dbe:	f003 fc5f 	bl	18680 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   14dc2:	4b07      	ldr	r3, [pc, #28]	; (14de0 <__assert_func+0x3c>)
   14dc4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   14dc8:	605a      	str	r2, [r3, #4]
    asm("isb");
   14dca:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   14dce:	f7ff fc51 	bl	14674 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   14dd2:	4629      	mov	r1, r5
   14dd4:	4803      	ldr	r0, [pc, #12]	; (14de4 <__assert_func+0x40>)
   14dd6:	f003 fc53 	bl	18680 <console_printf>
   14dda:	e7f2      	b.n	14dc2 <__assert_func+0x1e>
   14ddc:	00030510 	.word	0x00030510
   14de0:	e000ed00 	.word	0xe000ed00
   14de4:	00030500 	.word	0x00030500

00014de8 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   14de8:	b500      	push	{lr}
   14dea:	b083      	sub	sp, #12
   14dec:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   14dee:	f003 fb2d 	bl	1844c <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   14df2:	4d1b      	ldr	r5, [pc, #108]	; (14e60 <os_default_irq+0x78>)
   14df4:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   14df6:	6822      	ldr	r2, [r4, #0]
   14df8:	f3c1 0108 	ubfx	r1, r1, #0, #9
   14dfc:	4819      	ldr	r0, [pc, #100]	; (14e64 <os_default_irq+0x7c>)
   14dfe:	f003 fc3f 	bl	18680 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   14e02:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   14e04:	6883      	ldr	r3, [r0, #8]
   14e06:	6842      	ldr	r2, [r0, #4]
   14e08:	6801      	ldr	r1, [r0, #0]
   14e0a:	68c0      	ldr	r0, [r0, #12]
   14e0c:	9000      	str	r0, [sp, #0]
   14e0e:	4816      	ldr	r0, [pc, #88]	; (14e68 <os_default_irq+0x80>)
   14e10:	f003 fc36 	bl	18680 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   14e14:	6923      	ldr	r3, [r4, #16]
   14e16:	9300      	str	r3, [sp, #0]
   14e18:	68e3      	ldr	r3, [r4, #12]
   14e1a:	68a2      	ldr	r2, [r4, #8]
   14e1c:	6861      	ldr	r1, [r4, #4]
   14e1e:	4813      	ldr	r0, [pc, #76]	; (14e6c <os_default_irq+0x84>)
   14e20:	f003 fc2e 	bl	18680 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   14e24:	6a23      	ldr	r3, [r4, #32]
   14e26:	9300      	str	r3, [sp, #0]
   14e28:	69e3      	ldr	r3, [r4, #28]
   14e2a:	69a2      	ldr	r2, [r4, #24]
   14e2c:	6961      	ldr	r1, [r4, #20]
   14e2e:	4810      	ldr	r0, [pc, #64]	; (14e70 <os_default_irq+0x88>)
   14e30:	f003 fc26 	bl	18680 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   14e34:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   14e36:	6983      	ldr	r3, [r0, #24]
   14e38:	6942      	ldr	r2, [r0, #20]
   14e3a:	6901      	ldr	r1, [r0, #16]
   14e3c:	69c0      	ldr	r0, [r0, #28]
   14e3e:	9000      	str	r0, [sp, #0]
   14e40:	480c      	ldr	r0, [pc, #48]	; (14e74 <os_default_irq+0x8c>)
   14e42:	f003 fc1d 	bl	18680 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   14e46:	6869      	ldr	r1, [r5, #4]
   14e48:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   14e4a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14e4c:	480a      	ldr	r0, [pc, #40]	; (14e78 <os_default_irq+0x90>)
   14e4e:	f003 fc17 	bl	18680 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   14e52:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   14e54:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   14e56:	4809      	ldr	r0, [pc, #36]	; (14e7c <os_default_irq+0x94>)
   14e58:	f003 fc12 	bl	18680 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   14e5c:	f7ff fc0a 	bl	14674 <hal_system_reset>
   14e60:	e000ed00 	.word	0xe000ed00
   14e64:	00030528 	.word	0x00030528
   14e68:	0003055c 	.word	0x0003055c
   14e6c:	00030590 	.word	0x00030590
   14e70:	000305c4 	.word	0x000305c4
   14e74:	000305f8 	.word	0x000305f8
   14e78:	0003062c 	.word	0x0003062c
   14e7c:	00030654 	.word	0x00030654

00014e80 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   14e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    hal_watchdog_tickle();
   14e82:	f017 fe6b 	bl	2cb5c <hal_watchdog_tickle>
    sanity_last = 0;
   14e86:	2600      	movs	r6, #0
   14e88:	e00e      	b.n	14ea8 <os_idle_task+0x28>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   14e8a:	f001 f8ef 	bl	1606c <os_sanity_run>
#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   14e8e:	f017 fe65 	bl	2cb5c <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
            sanity_last = now;
   14e92:	4626      	mov	r6, r4
   14e94:	e014      	b.n	14ec0 <os_idle_task+0x40>
         * happens on next interval in case it was already performed on current
         * tick.
         */
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
        if ((int)sanity_to_next <= 0) {
            sanity_to_next += sanity_itvl_ticks;
   14e96:	f500 60f0 	add.w	r0, r0, #1920	; 0x780
   14e9a:	e025      	b.n	14ee8 <os_idle_task+0x68>
        }
        iticks = min(iticks, sanity_to_next);

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   14e9c:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   14e9e:	f017 fc8b 	bl	2c7b8 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   14ea2:	4628      	mov	r0, r5
   14ea4:	f001 fc48 	bl	16738 <os_arch_restore_sr>
        ++g_os_idle_ctr;
   14ea8:	4a15      	ldr	r2, [pc, #84]	; (14f00 <os_idle_task+0x80>)
   14eaa:	6813      	ldr	r3, [r2, #0]
   14eac:	3301      	adds	r3, #1
   14eae:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   14eb0:	f001 fb76 	bl	165a0 <os_time_get>
   14eb4:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
   14eb6:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
   14eba:	1ac3      	subs	r3, r0, r3
   14ebc:	2b00      	cmp	r3, #0
   14ebe:	dae4      	bge.n	14e8a <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   14ec0:	f001 fc34 	bl	1672c <os_arch_save_sr>
   14ec4:	4605      	mov	r5, r0
        now = os_time_get();
   14ec6:	f001 fb6b 	bl	165a0 <os_time_get>
   14eca:	4607      	mov	r7, r0
        sticks = os_sched_wakeup_ticks(now);
   14ecc:	f001 fa10 	bl	162f0 <os_sched_wakeup_ticks>
   14ed0:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   14ed2:	4638      	mov	r0, r7
   14ed4:	f000 f9ae 	bl	15234 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   14ed8:	4284      	cmp	r4, r0
   14eda:	bf28      	it	cs
   14edc:	4604      	movcs	r4, r0
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
   14ede:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
   14ee2:	1bd8      	subs	r0, r3, r7
        if ((int)sanity_to_next <= 0) {
   14ee4:	2800      	cmp	r0, #0
   14ee6:	ddd6      	ble.n	14e96 <os_idle_task+0x16>
        iticks = min(iticks, sanity_to_next);
   14ee8:	42a0      	cmp	r0, r4
   14eea:	bf28      	it	cs
   14eec:	4620      	movcs	r0, r4
        if (iticks < MIN_IDLE_TICKS) {
   14eee:	280b      	cmp	r0, #11
   14ef0:	d9d4      	bls.n	14e9c <os_idle_task+0x1c>
        } else if (iticks > MAX_IDLE_TICKS) {
   14ef2:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   14ef6:	d9d2      	bls.n	14e9e <os_idle_task+0x1e>
            iticks = MAX_IDLE_TICKS;
   14ef8:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   14efc:	e7cf      	b.n	14e9e <os_idle_task+0x1e>
   14efe:	bf00      	nop
   14f00:	10001cb0 	.word	0x10001cb0

00014f04 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   14f04:	b508      	push	{r3, lr}
   14f06:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   14f08:	2100      	movs	r1, #0
   14f0a:	4608      	mov	r0, r1
   14f0c:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   14f0e:	f7ff fba9 	bl	14664 <hal_debugger_connected>
   14f12:	b100      	cbz	r0, 14f16 <os_main+0x12>
   14f14:	be01      	bkpt	0x0001
   14f16:	2300      	movs	r3, #0
   14f18:	461a      	mov	r2, r3
   14f1a:	4619      	mov	r1, r3
   14f1c:	4618      	mov	r0, r3
   14f1e:	f7ff ff41 	bl	14da4 <__assert_func>
	...

00014f24 <os_started>:
}
   14f24:	4b01      	ldr	r3, [pc, #4]	; (14f2c <os_started+0x8>)
   14f26:	6818      	ldr	r0, [r3, #0]
   14f28:	4770      	bx	lr
   14f2a:	bf00      	nop
   14f2c:	10002508 	.word	0x10002508

00014f30 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   14f30:	b500      	push	{lr}
   14f32:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   14f34:	2340      	movs	r3, #64	; 0x40
   14f36:	9303      	str	r3, [sp, #12]
   14f38:	4b1b      	ldr	r3, [pc, #108]	; (14fa8 <os_init_idle_task+0x78>)
   14f3a:	9302      	str	r3, [sp, #8]
   14f3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14f40:	9301      	str	r3, [sp, #4]
   14f42:	23ff      	movs	r3, #255	; 0xff
   14f44:	9300      	str	r3, [sp, #0]
   14f46:	2300      	movs	r3, #0
   14f48:	4a18      	ldr	r2, [pc, #96]	; (14fac <os_init_idle_task+0x7c>)
   14f4a:	4919      	ldr	r1, [pc, #100]	; (14fb0 <os_init_idle_task+0x80>)
   14f4c:	4819      	ldr	r0, [pc, #100]	; (14fb4 <os_init_idle_task+0x84>)
   14f4e:	f001 fa33 	bl	163b8 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   14f52:	b950      	cbnz	r0, 14f6a <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   14f54:	f001 f8cc 	bl	160f0 <os_sanity_init>
    assert(rc == 0);
   14f58:	b988      	cbnz	r0, 14f7e <os_init_idle_task+0x4e>

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   14f5a:	f247 5030 	movw	r0, #30000	; 0x7530
   14f5e:	f017 fdfa 	bl	2cb56 <hal_watchdog_init>
    assert(rc == 0);
   14f62:	b9b0      	cbnz	r0, 14f92 <os_init_idle_task+0x62>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
}
   14f64:	b005      	add	sp, #20
   14f66:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   14f6a:	f7ff fb7b 	bl	14664 <hal_debugger_connected>
   14f6e:	b100      	cbz	r0, 14f72 <os_init_idle_task+0x42>
   14f70:	be01      	bkpt	0x0001
   14f72:	2300      	movs	r3, #0
   14f74:	461a      	mov	r2, r3
   14f76:	4619      	mov	r1, r3
   14f78:	4618      	mov	r0, r3
   14f7a:	f7ff ff13 	bl	14da4 <__assert_func>
    assert(rc == 0);
   14f7e:	f7ff fb71 	bl	14664 <hal_debugger_connected>
   14f82:	b100      	cbz	r0, 14f86 <os_init_idle_task+0x56>
   14f84:	be01      	bkpt	0x0001
   14f86:	2300      	movs	r3, #0
   14f88:	461a      	mov	r2, r3
   14f8a:	4619      	mov	r1, r3
   14f8c:	4618      	mov	r0, r3
   14f8e:	f7ff ff09 	bl	14da4 <__assert_func>
    assert(rc == 0);
   14f92:	f7ff fb67 	bl	14664 <hal_debugger_connected>
   14f96:	b100      	cbz	r0, 14f9a <os_init_idle_task+0x6a>
   14f98:	be01      	bkpt	0x0001
   14f9a:	2300      	movs	r3, #0
   14f9c:	461a      	mov	r2, r3
   14f9e:	4619      	mov	r1, r3
   14fa0:	4618      	mov	r0, r3
   14fa2:	f7ff feff 	bl	14da4 <__assert_func>
   14fa6:	bf00      	nop
   14fa8:	10001bb0 	.word	0x10001bb0
   14fac:	00014e81 	.word	0x00014e81
   14fb0:	00030670 	.word	0x00030670
   14fb4:	10001b60 	.word	0x10001b60

00014fb8 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   14fb8:	b510      	push	{r4, lr}
   14fba:	b084      	sub	sp, #16
   14fbc:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   14fbe:	4b2e      	ldr	r3, [pc, #184]	; (15078 <os_init+0xc0>)
   14fc0:	2200      	movs	r2, #0
   14fc2:	601a      	str	r2, [r3, #0]
   14fc4:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   14fc6:	4b2d      	ldr	r3, [pc, #180]	; (1507c <os_init+0xc4>)
   14fc8:	601a      	str	r2, [r3, #0]
   14fca:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   14fcc:	f000 fad6 	bl	1557c <os_eventq_dflt_get>
   14fd0:	f000 fa0e 	bl	153f0 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   14fd4:	f000 fa04 	bl	153e0 <os_dev_reset>

    err = os_arch_os_init();
   14fd8:	f001 fbe4 	bl	167a4 <os_arch_os_init>
    assert(err == OS_OK);
   14fdc:	bb18      	cbnz	r0, 15026 <os_init+0x6e>

    if (main_fn) {
   14fde:	b194      	cbz	r4, 15006 <os_init+0x4e>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   14fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
   14fe4:	9303      	str	r3, [sp, #12]
   14fe6:	4b26      	ldr	r3, [pc, #152]	; (15080 <os_init+0xc8>)
   14fe8:	9302      	str	r3, [sp, #8]
   14fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14fee:	9301      	str	r3, [sp, #4]
   14ff0:	237f      	movs	r3, #127	; 0x7f
   14ff2:	9300      	str	r3, [sp, #0]
   14ff4:	4623      	mov	r3, r4
   14ff6:	4a23      	ldr	r2, [pc, #140]	; (15084 <os_init+0xcc>)
   14ff8:	4923      	ldr	r1, [pc, #140]	; (15088 <os_init+0xd0>)
   14ffa:	4824      	ldr	r0, [pc, #144]	; (1508c <os_init+0xd4>)
   14ffc:	f001 f9dc 	bl	163b8 <os_task_init>
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   15000:	f010 0fff 	tst.w	r0, #255	; 0xff
   15004:	d119      	bne.n	1503a <os_init+0x82>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   15006:	f015 fb77 	bl	2a6f8 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   1500a:	2001      	movs	r0, #1
   1500c:	f000 f9a0 	bl	15350 <os_dev_initialize_all>
    assert(err == OS_OK);
   15010:	f010 0fff 	tst.w	r0, #255	; 0xff
   15014:	d11b      	bne.n	1504e <os_init+0x96>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   15016:	2002      	movs	r0, #2
   15018:	f000 f99a 	bl	15350 <os_dev_initialize_all>
    assert(err == OS_OK);
   1501c:	f010 0fff 	tst.w	r0, #255	; 0xff
   15020:	d11f      	bne.n	15062 <os_init+0xaa>
}
   15022:	b004      	add	sp, #16
   15024:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   15026:	f7ff fb1d 	bl	14664 <hal_debugger_connected>
   1502a:	b100      	cbz	r0, 1502e <os_init+0x76>
   1502c:	be01      	bkpt	0x0001
   1502e:	2300      	movs	r3, #0
   15030:	461a      	mov	r2, r3
   15032:	4619      	mov	r1, r3
   15034:	4618      	mov	r0, r3
   15036:	f7ff feb5 	bl	14da4 <__assert_func>
        assert(err == 0);
   1503a:	f7ff fb13 	bl	14664 <hal_debugger_connected>
   1503e:	b100      	cbz	r0, 15042 <os_init+0x8a>
   15040:	be01      	bkpt	0x0001
   15042:	2300      	movs	r3, #0
   15044:	461a      	mov	r2, r3
   15046:	4619      	mov	r1, r3
   15048:	4618      	mov	r0, r3
   1504a:	f7ff feab 	bl	14da4 <__assert_func>
    assert(err == OS_OK);
   1504e:	f7ff fb09 	bl	14664 <hal_debugger_connected>
   15052:	b100      	cbz	r0, 15056 <os_init+0x9e>
   15054:	be01      	bkpt	0x0001
   15056:	2300      	movs	r3, #0
   15058:	461a      	mov	r2, r3
   1505a:	4619      	mov	r1, r3
   1505c:	4618      	mov	r0, r3
   1505e:	f7ff fea1 	bl	14da4 <__assert_func>
    assert(err == OS_OK);
   15062:	f7ff faff 	bl	14664 <hal_debugger_connected>
   15066:	b100      	cbz	r0, 1506a <os_init+0xb2>
   15068:	be01      	bkpt	0x0001
   1506a:	2300      	movs	r3, #0
   1506c:	461a      	mov	r2, r3
   1506e:	4619      	mov	r1, r3
   15070:	4618      	mov	r0, r3
   15072:	f7ff fe97 	bl	14da4 <__assert_func>
   15076:	bf00      	nop
   15078:	1000250c 	.word	0x1000250c
   1507c:	10002f14 	.word	0x10002f14
   15080:	10001cb8 	.word	0x10001cb8
   15084:	00014f05 	.word	0x00014f05
   15088:	00030678 	.word	0x00030678
   1508c:	100024b8 	.word	0x100024b8

00015090 <os_start>:

void
os_start(void)
{
   15090:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   15092:	f017 fd62 	bl	2cb5a <hal_watchdog_enable>
#endif

    err = os_arch_os_start();
   15096:	f001 fbe5 	bl	16864 <os_arch_os_start>
    assert(err == OS_OK);
   1509a:	b900      	cbnz	r0, 1509e <os_start+0xe>
#else
    assert(0);
#endif
}
   1509c:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   1509e:	f7ff fae1 	bl	14664 <hal_debugger_connected>
   150a2:	b100      	cbz	r0, 150a6 <os_start+0x16>
   150a4:	be01      	bkpt	0x0001
   150a6:	2300      	movs	r3, #0
   150a8:	461a      	mov	r2, r3
   150aa:	4619      	mov	r1, r3
   150ac:	4618      	mov	r0, r3
   150ae:	f7ff fe79 	bl	14da4 <__assert_func>
	...

000150b4 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   150b4:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   150b6:	4b11      	ldr	r3, [pc, #68]	; (150fc <os_pkg_init+0x48>)
   150b8:	781b      	ldrb	r3, [r3, #0]
   150ba:	b153      	cbz	r3, 150d2 <os_pkg_init+0x1e>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   150bc:	2003      	movs	r0, #3
   150be:	f000 f947 	bl	15350 <os_dev_initialize_all>
    assert(err == OS_OK);
   150c2:	f010 0fff 	tst.w	r0, #255	; 0xff
   150c6:	d10e      	bne.n	150e6 <os_pkg_init+0x32>

    os_mempool_module_init();
   150c8:	f000 feee 	bl	15ea8 <os_mempool_module_init>
    os_msys_init();
   150cc:	f000 ff7e 	bl	15fcc <os_msys_init>
}
   150d0:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   150d2:	f7ff fac7 	bl	14664 <hal_debugger_connected>
   150d6:	b100      	cbz	r0, 150da <os_pkg_init+0x26>
   150d8:	be01      	bkpt	0x0001
   150da:	2300      	movs	r3, #0
   150dc:	461a      	mov	r2, r3
   150de:	4619      	mov	r1, r3
   150e0:	4618      	mov	r0, r3
   150e2:	f7ff fe5f 	bl	14da4 <__assert_func>
    assert(err == OS_OK);
   150e6:	f7ff fabd 	bl	14664 <hal_debugger_connected>
   150ea:	b100      	cbz	r0, 150ee <os_pkg_init+0x3a>
   150ec:	be01      	bkpt	0x0001
   150ee:	2300      	movs	r3, #0
   150f0:	461a      	mov	r2, r3
   150f2:	4619      	mov	r1, r3
   150f4:	4618      	mov	r0, r3
   150f6:	f7ff fe55 	bl	14da4 <__assert_func>
   150fa:	bf00      	nop
   150fc:	10003404 	.word	0x10003404

00015100 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
   15100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15102:	4604      	mov	r4, r0
   15104:	460d      	mov	r5, r1
   15106:	4617      	mov	r7, r2
   15108:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
   1510a:	2220      	movs	r2, #32
   1510c:	2100      	movs	r1, #0
   1510e:	f001 fd06 	bl	16b1e <memset>
    c->c_ev.ev_cb = ev_cb;
   15112:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
   15114:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
   15116:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
   15118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001511c <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
   1511c:	b538      	push	{r3, r4, r5, lr}
   1511e:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
   15120:	f001 fb04 	bl	1672c <os_arch_save_sr>
   15124:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
   15126:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
   15128:	b13b      	cbz	r3, 1513a <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   1512a:	69a2      	ldr	r2, [r4, #24]
   1512c:	b172      	cbz	r2, 1514c <os_callout_stop+0x30>
   1512e:	61d3      	str	r3, [r2, #28]
   15130:	69e3      	ldr	r3, [r4, #28]
   15132:	69a2      	ldr	r2, [r4, #24]
   15134:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
   15136:	2300      	movs	r3, #0
   15138:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
   1513a:	6920      	ldr	r0, [r4, #16]
   1513c:	b110      	cbz	r0, 15144 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
   1513e:	4621      	mov	r1, r4
   15140:	f000 f9fa 	bl	15538 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
   15144:	4628      	mov	r0, r5
   15146:	f001 faf7 	bl	16738 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
   1514a:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   1514c:	4a01      	ldr	r2, [pc, #4]	; (15154 <os_callout_stop+0x38>)
   1514e:	6053      	str	r3, [r2, #4]
   15150:	e7ee      	b.n	15130 <os_callout_stop+0x14>
   15152:	bf00      	nop
   15154:	1000250c 	.word	0x1000250c

00015158 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
   15158:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
   1515a:	6903      	ldr	r3, [r0, #16]
   1515c:	b1c3      	cbz	r3, 15190 <os_callout_reset+0x38>
   1515e:	4604      	mov	r4, r0
   15160:	460e      	mov	r6, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
   15162:	2900      	cmp	r1, #0
   15164:	db34      	blt.n	151d0 <os_callout_reset+0x78>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
   15166:	f001 fae1 	bl	1672c <os_arch_save_sr>
   1516a:	4605      	mov	r5, r0

    os_callout_stop(c);
   1516c:	4620      	mov	r0, r4
   1516e:	f7ff ffd5 	bl	1511c <os_callout_stop>

    if (ticks == 0) {
   15172:	b906      	cbnz	r6, 15176 <os_callout_reset+0x1e>
        ticks = 1;
   15174:	2601      	movs	r6, #1
    }

    c->c_ticks = os_time_get() + ticks;
   15176:	f001 fa13 	bl	165a0 <os_time_get>
   1517a:	4430      	add	r0, r6
   1517c:	6160      	str	r0, [r4, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   1517e:	4b15      	ldr	r3, [pc, #84]	; (151d4 <os_callout_reset+0x7c>)
   15180:	681b      	ldr	r3, [r3, #0]
   15182:	b17b      	cbz	r3, 151a4 <os_callout_reset+0x4c>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
   15184:	695a      	ldr	r2, [r3, #20]
   15186:	1a82      	subs	r2, r0, r2
   15188:	2a00      	cmp	r2, #0
   1518a:	db0b      	blt.n	151a4 <os_callout_reset+0x4c>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   1518c:	699b      	ldr	r3, [r3, #24]
   1518e:	e7f8      	b.n	15182 <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
   15190:	f7ff fa68 	bl	14664 <hal_debugger_connected>
   15194:	b100      	cbz	r0, 15198 <os_callout_reset+0x40>
   15196:	be01      	bkpt	0x0001
   15198:	2300      	movs	r3, #0
   1519a:	461a      	mov	r2, r3
   1519c:	4619      	mov	r1, r3
   1519e:	4618      	mov	r0, r3
   151a0:	f7ff fe00 	bl	14da4 <__assert_func>
            break;
        }
    }

    if (entry) {
   151a4:	b15b      	cbz	r3, 151be <os_callout_reset+0x66>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
   151a6:	69da      	ldr	r2, [r3, #28]
   151a8:	61e2      	str	r2, [r4, #28]
   151aa:	61a3      	str	r3, [r4, #24]
   151ac:	69da      	ldr	r2, [r3, #28]
   151ae:	6014      	str	r4, [r2, #0]
   151b0:	3418      	adds	r4, #24
   151b2:	61dc      	str	r4, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
   151b4:	4628      	mov	r0, r5
   151b6:	f001 fabf 	bl	16738 <os_arch_restore_sr>

    ret = OS_OK;
   151ba:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
   151bc:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
   151be:	2300      	movs	r3, #0
   151c0:	61a3      	str	r3, [r4, #24]
   151c2:	4b04      	ldr	r3, [pc, #16]	; (151d4 <os_callout_reset+0x7c>)
   151c4:	685a      	ldr	r2, [r3, #4]
   151c6:	61e2      	str	r2, [r4, #28]
   151c8:	6014      	str	r4, [r2, #0]
   151ca:	3418      	adds	r4, #24
   151cc:	605c      	str	r4, [r3, #4]
   151ce:	e7f1      	b.n	151b4 <os_callout_reset+0x5c>
        ret = OS_EINVAL;
   151d0:	2002      	movs	r0, #2
    return ret;
   151d2:	e7f3      	b.n	151bc <os_callout_reset+0x64>
   151d4:	1000250c 	.word	0x1000250c

000151d8 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   151d8:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   151da:	f001 f9e1 	bl	165a0 <os_time_get>
   151de:	4605      	mov	r5, r0
   151e0:	e00f      	b.n	15202 <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   151e2:	69e2      	ldr	r2, [r4, #28]
   151e4:	4b12      	ldr	r3, [pc, #72]	; (15230 <os_callout_tick+0x58>)
   151e6:	605a      	str	r2, [r3, #4]
   151e8:	69e3      	ldr	r3, [r4, #28]
   151ea:	69a2      	ldr	r2, [r4, #24]
   151ec:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   151ee:	2300      	movs	r3, #0
   151f0:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   151f2:	f001 faa1 	bl	16738 <os_arch_restore_sr>

        if (c) {
   151f6:	b1d4      	cbz	r4, 1522e <os_callout_tick+0x56>
            if (c->c_evq) {
   151f8:	6920      	ldr	r0, [r4, #16]
   151fa:	b1a0      	cbz	r0, 15226 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
   151fc:	4621      	mov	r1, r4
   151fe:	f000 f904 	bl	1540a <os_eventq_put>
        OS_ENTER_CRITICAL(sr);
   15202:	f001 fa93 	bl	1672c <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   15206:	4b0a      	ldr	r3, [pc, #40]	; (15230 <os_callout_tick+0x58>)
   15208:	681c      	ldr	r4, [r3, #0]
        if (c) {
   1520a:	2c00      	cmp	r4, #0
   1520c:	d0f1      	beq.n	151f2 <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   1520e:	6963      	ldr	r3, [r4, #20]
   15210:	1aeb      	subs	r3, r5, r3
   15212:	2b00      	cmp	r3, #0
   15214:	db05      	blt.n	15222 <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   15216:	69a3      	ldr	r3, [r4, #24]
   15218:	2b00      	cmp	r3, #0
   1521a:	d0e2      	beq.n	151e2 <os_callout_tick+0xa>
   1521c:	69e2      	ldr	r2, [r4, #28]
   1521e:	61da      	str	r2, [r3, #28]
   15220:	e7e2      	b.n	151e8 <os_callout_tick+0x10>
                c = NULL;
   15222:	2400      	movs	r4, #0
   15224:	e7e5      	b.n	151f2 <os_callout_tick+0x1a>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   15226:	6863      	ldr	r3, [r4, #4]
   15228:	4620      	mov	r0, r4
   1522a:	4798      	blx	r3
   1522c:	e7e9      	b.n	15202 <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   1522e:	bd38      	pop	{r3, r4, r5, pc}
   15230:	1000250c 	.word	0x1000250c

00015234 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   15234:	b510      	push	{r4, lr}
   15236:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   15238:	f001 fa81 	bl	1673e <os_arch_in_critical>
   1523c:	b130      	cbz	r0, 1524c <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   1523e:	4b0b      	ldr	r3, [pc, #44]	; (1526c <os_callout_wakeup_ticks+0x38>)
   15240:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   15242:	b17b      	cbz	r3, 15264 <os_callout_wakeup_ticks+0x30>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   15244:	6958      	ldr	r0, [r3, #20]
   15246:	1b00      	subs	r0, r0, r4
   15248:	d40a      	bmi.n	15260 <os_callout_wakeup_ticks+0x2c>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   1524a:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   1524c:	f7ff fa0a 	bl	14664 <hal_debugger_connected>
   15250:	b100      	cbz	r0, 15254 <os_callout_wakeup_ticks+0x20>
   15252:	be01      	bkpt	0x0001
   15254:	2300      	movs	r3, #0
   15256:	461a      	mov	r2, r3
   15258:	4619      	mov	r1, r3
   1525a:	4618      	mov	r0, r3
   1525c:	f7ff fda2 	bl	14da4 <__assert_func>
            rt = 0;     /* callout time is in the past */
   15260:	2000      	movs	r0, #0
   15262:	e7f2      	b.n	1524a <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   15264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   15268:	e7ef      	b.n	1524a <os_callout_wakeup_ticks+0x16>
   1526a:	bf00      	nop
   1526c:	1000250c 	.word	0x1000250c

00015270 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   15270:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   15272:	4b16      	ldr	r3, [pc, #88]	; (152cc <os_dev_add+0x5c>)
   15274:	681d      	ldr	r5, [r3, #0]
   15276:	b115      	cbz	r5, 1527e <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   15278:	462b      	mov	r3, r5
    prev_dev = NULL;
   1527a:	2400      	movs	r4, #0
   1527c:	e008      	b.n	15290 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   1527e:	4603      	mov	r3, r0
   15280:	f843 5f20 	str.w	r5, [r3, #32]!
   15284:	4a11      	ldr	r2, [pc, #68]	; (152cc <os_dev_add+0x5c>)
   15286:	6053      	str	r3, [r2, #4]
   15288:	6010      	str	r0, [r2, #0]
        return (0);
   1528a:	e012      	b.n	152b2 <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
                   ((dev->od_stage == cur_dev->od_stage) &&
                    (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   1528c:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   1528e:	6a1b      	ldr	r3, [r3, #32]
   15290:	b153      	cbz	r3, 152a8 <os_dev_add+0x38>
        if (dev == cur_dev) {
   15292:	4283      	cmp	r3, r0
   15294:	d00d      	beq.n	152b2 <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
   15296:	7e01      	ldrb	r1, [r0, #24]
   15298:	7e1a      	ldrb	r2, [r3, #24]
   1529a:	4291      	cmp	r1, r2
   1529c:	d304      	bcc.n	152a8 <os_dev_add+0x38>
   1529e:	d1f5      	bne.n	1528c <os_dev_add+0x1c>
                    (dev->od_priority < cur_dev->od_priority))) {
   152a0:	7e41      	ldrb	r1, [r0, #25]
   152a2:	7e5a      	ldrb	r2, [r3, #25]
                   ((dev->od_stage == cur_dev->od_stage) &&
   152a4:	4291      	cmp	r1, r2
   152a6:	d2f1      	bcs.n	1528c <os_dev_add+0x1c>
    }

    if (prev_dev) {
   152a8:	b15c      	cbz	r4, 152c2 <os_dev_add+0x52>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   152aa:	6a23      	ldr	r3, [r4, #32]
   152ac:	6203      	str	r3, [r0, #32]
   152ae:	b11b      	cbz	r3, 152b8 <os_dev_add+0x48>
   152b0:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   152b2:	2000      	movs	r0, #0
   152b4:	bc30      	pop	{r4, r5}
   152b6:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   152b8:	f100 0320 	add.w	r3, r0, #32
   152bc:	4a03      	ldr	r2, [pc, #12]	; (152cc <os_dev_add+0x5c>)
   152be:	6053      	str	r3, [r2, #4]
   152c0:	e7f6      	b.n	152b0 <os_dev_add+0x40>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   152c2:	6205      	str	r5, [r0, #32]
   152c4:	4b01      	ldr	r3, [pc, #4]	; (152cc <os_dev_add+0x5c>)
   152c6:	6018      	str	r0, [r3, #0]
   152c8:	e7f3      	b.n	152b2 <os_dev_add+0x42>
   152ca:	bf00      	nop
   152cc:	10002514 	.word	0x10002514

000152d0 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   152d0:	b510      	push	{r4, lr}
   152d2:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   152d4:	6903      	ldr	r3, [r0, #16]
   152d6:	6941      	ldr	r1, [r0, #20]
   152d8:	4798      	blx	r3
    if (rc != 0) {
   152da:	b128      	cbz	r0, 152e8 <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   152dc:	7ee3      	ldrb	r3, [r4, #27]
   152de:	f013 0f08 	tst.w	r3, #8
   152e2:	d105      	bne.n	152f0 <os_dev_initialize+0x20>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   152e4:	2000      	movs	r0, #0
   152e6:	e003      	b.n	152f0 <os_dev_initialize+0x20>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   152e8:	7ee3      	ldrb	r3, [r4, #27]
   152ea:	f043 0301 	orr.w	r3, r3, #1
   152ee:	76e3      	strb	r3, [r4, #27]
err:
    return rc;
}
   152f0:	bd10      	pop	{r4, pc}

000152f2 <os_dev_init>:
{
   152f2:	b410      	push	{r4}
   152f4:	4604      	mov	r4, r0
    dev->od_name = name;
   152f6:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   152f8:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   152fa:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   152fc:	2000      	movs	r0, #0
   152fe:	76e0      	strb	r0, [r4, #27]
    dev->od_open_ref = 0;
   15300:	76a0      	strb	r0, [r4, #26]
    dev->od_init = od_init;
   15302:	9b01      	ldr	r3, [sp, #4]
   15304:	6123      	str	r3, [r4, #16]
    dev->od_init_arg = arg;
   15306:	9b02      	ldr	r3, [sp, #8]
   15308:	6163      	str	r3, [r4, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   1530a:	6020      	str	r0, [r4, #0]
   1530c:	6060      	str	r0, [r4, #4]
   1530e:	60a0      	str	r0, [r4, #8]
   15310:	60e0      	str	r0, [r4, #12]
}
   15312:	bc10      	pop	{r4}
   15314:	4770      	bx	lr
	...

00015318 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   15318:	b530      	push	{r4, r5, lr}
   1531a:	b083      	sub	sp, #12
   1531c:	4604      	mov	r4, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   1531e:	9d07      	ldr	r5, [sp, #28]
   15320:	9501      	str	r5, [sp, #4]
   15322:	9d06      	ldr	r5, [sp, #24]
   15324:	9500      	str	r5, [sp, #0]
   15326:	f7ff ffe4 	bl	152f2 <os_dev_init>
    if (rc != 0) {
   1532a:	b108      	cbz	r0, 15330 <os_dev_create+0x18>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   1532c:	b003      	add	sp, #12
   1532e:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   15330:	4620      	mov	r0, r4
   15332:	f7ff ff9d 	bl	15270 <os_dev_add>
    if (rc != 0) {
   15336:	2800      	cmp	r0, #0
   15338:	d1f8      	bne.n	1532c <os_dev_create+0x14>
    if (g_os_started) {
   1533a:	4b04      	ldr	r3, [pc, #16]	; (1534c <os_dev_create+0x34>)
   1533c:	681b      	ldr	r3, [r3, #0]
   1533e:	2b00      	cmp	r3, #0
   15340:	d0f4      	beq.n	1532c <os_dev_create+0x14>
        rc = os_dev_initialize(dev);
   15342:	4620      	mov	r0, r4
   15344:	f7ff ffc4 	bl	152d0 <os_dev_initialize>
    return (rc);
   15348:	e7f0      	b.n	1532c <os_dev_create+0x14>
   1534a:	bf00      	nop
   1534c:	10002508 	.word	0x10002508

00015350 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   15350:	b538      	push	{r3, r4, r5, lr}
   15352:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   15354:	4b08      	ldr	r3, [pc, #32]	; (15378 <os_dev_initialize_all+0x28>)
   15356:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   15358:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1535a:	e000      	b.n	1535e <os_dev_initialize_all+0xe>
   1535c:	6a24      	ldr	r4, [r4, #32]
   1535e:	b144      	cbz	r4, 15372 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   15360:	7e23      	ldrb	r3, [r4, #24]
   15362:	42ab      	cmp	r3, r5
   15364:	d1fa      	bne.n	1535c <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   15366:	4620      	mov	r0, r4
   15368:	f7ff ffb2 	bl	152d0 <os_dev_initialize>
            if (rc) {
   1536c:	4602      	mov	r2, r0
   1536e:	2800      	cmp	r0, #0
   15370:	d0f4      	beq.n	1535c <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   15372:	4610      	mov	r0, r2
   15374:	bd38      	pop	{r3, r4, r5, pc}
   15376:	bf00      	nop
   15378:	10002514 	.word	0x10002514

0001537c <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   1537c:	b538      	push	{r3, r4, r5, lr}
   1537e:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   15380:	4b05      	ldr	r3, [pc, #20]	; (15398 <os_dev_lookup+0x1c>)
   15382:	681c      	ldr	r4, [r3, #0]
   15384:	b134      	cbz	r4, 15394 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   15386:	4629      	mov	r1, r5
   15388:	69e0      	ldr	r0, [r4, #28]
   1538a:	f001 fbe4 	bl	16b56 <strcmp>
   1538e:	b108      	cbz	r0, 15394 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   15390:	6a24      	ldr	r4, [r4, #32]
   15392:	e7f7      	b.n	15384 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   15394:	4620      	mov	r0, r4
   15396:	bd38      	pop	{r3, r4, r5, pc}
   15398:	10002514 	.word	0x10002514

0001539c <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   1539c:	b570      	push	{r4, r5, r6, lr}
   1539e:	460d      	mov	r5, r1
   153a0:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   153a2:	f7ff ffeb 	bl	1537c <os_dev_lookup>
    if (dev == NULL) {
   153a6:	4604      	mov	r4, r0
   153a8:	b1a0      	cbz	r0, 153d4 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   153aa:	7ec3      	ldrb	r3, [r0, #27]
   153ac:	f013 0f01 	tst.w	r3, #1
   153b0:	d012      	beq.n	153d8 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   153b2:	6803      	ldr	r3, [r0, #0]
   153b4:	b11b      	cbz	r3, 153be <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   153b6:	4632      	mov	r2, r6
   153b8:	4629      	mov	r1, r5
   153ba:	4798      	blx	r3
        if (rc != 0) {
   153bc:	b970      	cbnz	r0, 153dc <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   153be:	f001 f9b5 	bl	1672c <os_arch_save_sr>
    ++dev->od_open_ref;
   153c2:	7ea3      	ldrb	r3, [r4, #26]
   153c4:	3301      	adds	r3, #1
   153c6:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   153c8:	7ee3      	ldrb	r3, [r4, #27]
   153ca:	f043 0302 	orr.w	r3, r3, #2
   153ce:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   153d0:	f001 f9b2 	bl	16738 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   153d4:	4620      	mov	r0, r4
   153d6:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   153d8:	2400      	movs	r4, #0
   153da:	e7fb      	b.n	153d4 <os_dev_open+0x38>
    return (NULL);
   153dc:	2400      	movs	r4, #0
   153de:	e7f9      	b.n	153d4 <os_dev_open+0x38>

000153e0 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   153e0:	4b02      	ldr	r3, [pc, #8]	; (153ec <os_dev_reset+0xc>)
   153e2:	2200      	movs	r2, #0
   153e4:	601a      	str	r2, [r3, #0]
   153e6:	605b      	str	r3, [r3, #4]
}
   153e8:	4770      	bx	lr
   153ea:	bf00      	nop
   153ec:	10002514 	.word	0x10002514

000153f0 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   153f0:	2200      	movs	r2, #0
   153f2:	6002      	str	r2, [r0, #0]
   153f4:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   153f6:	4603      	mov	r3, r0
   153f8:	f843 2f08 	str.w	r2, [r3, #8]!
   153fc:	60c3      	str	r3, [r0, #12]
}
   153fe:	4770      	bx	lr

00015400 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   15400:	68c0      	ldr	r0, [r0, #12]
}
   15402:	3800      	subs	r0, #0
   15404:	bf18      	it	ne
   15406:	2001      	movne	r0, #1
   15408:	4770      	bx	lr

0001540a <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   1540a:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   1540c:	b1f0      	cbz	r0, 1544c <os_eventq_put+0x42>
   1540e:	460c      	mov	r4, r1
   15410:	4606      	mov	r6, r0
   15412:	f7ff fff5 	bl	15400 <os_eventq_inited>
   15416:	b1c8      	cbz	r0, 1544c <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   15418:	f001 f988 	bl	1672c <os_arch_save_sr>
   1541c:	4605      	mov	r5, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   1541e:	7823      	ldrb	r3, [r4, #0]
   15420:	b9f3      	cbnz	r3, 15460 <os_eventq_put+0x56>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   15422:	2301      	movs	r3, #1
   15424:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   15426:	2300      	movs	r3, #0
   15428:	60e3      	str	r3, [r4, #12]
   1542a:	68f3      	ldr	r3, [r6, #12]
   1542c:	601c      	str	r4, [r3, #0]
   1542e:	340c      	adds	r4, #12
   15430:	60f4      	str	r4, [r6, #12]

    resched = 0;
    if (evq->evq_task) {
   15432:	6870      	ldr	r0, [r6, #4]
   15434:	b1d8      	cbz	r0, 1546e <os_eventq_put+0x64>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   15436:	7b03      	ldrb	r3, [r0, #12]
   15438:	2b02      	cmp	r3, #2
   1543a:	d014      	beq.n	15466 <os_eventq_put+0x5c>
    resched = 0;
   1543c:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   1543e:	2300      	movs	r3, #0
   15440:	6073      	str	r3, [r6, #4]
    }

    OS_EXIT_CRITICAL(sr);
   15442:	4628      	mov	r0, r5
   15444:	f001 f978 	bl	16738 <os_arch_restore_sr>

    if (resched) {
   15448:	b99c      	cbnz	r4, 15472 <os_eventq_put+0x68>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   1544a:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   1544c:	f7ff f90a 	bl	14664 <hal_debugger_connected>
   15450:	b100      	cbz	r0, 15454 <os_eventq_put+0x4a>
   15452:	be01      	bkpt	0x0001
   15454:	2300      	movs	r3, #0
   15456:	461a      	mov	r2, r3
   15458:	4619      	mov	r1, r3
   1545a:	4618      	mov	r0, r3
   1545c:	f7ff fca2 	bl	14da4 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   15460:	f001 f96a 	bl	16738 <os_arch_restore_sr>
        return;
   15464:	e7f1      	b.n	1544a <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   15466:	f000 fee1 	bl	1622c <os_sched_wakeup>
            resched = 1;
   1546a:	2401      	movs	r4, #1
   1546c:	e7e7      	b.n	1543e <os_eventq_put+0x34>
    resched = 0;
   1546e:	2400      	movs	r4, #0
   15470:	e7e7      	b.n	15442 <os_eventq_put+0x38>
        os_sched(NULL);
   15472:	2000      	movs	r0, #0
   15474:	f000 ff66 	bl	16344 <os_sched>
   15478:	e7e7      	b.n	1544a <os_eventq_put+0x40>

0001547a <os_eventq_get_no_wait>:

struct os_event *
os_eventq_get_no_wait(struct os_eventq *evq)
{
   1547a:	4603      	mov	r3, r0
    struct os_event *ev;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)evq);

    ev = STAILQ_FIRST(&evq->evq_list);
   1547c:	6880      	ldr	r0, [r0, #8]
    if (ev) {
   1547e:	b120      	cbz	r0, 1548a <os_eventq_get_no_wait+0x10>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   15480:	68c2      	ldr	r2, [r0, #12]
   15482:	609a      	str	r2, [r3, #8]
   15484:	b112      	cbz	r2, 1548c <os_eventq_get_no_wait+0x12>
        ev->ev_queued = 0;
   15486:	2300      	movs	r3, #0
   15488:	7003      	strb	r3, [r0, #0]
    }

    os_trace_api_ret_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)ev);

    return ev;
}
   1548a:	4770      	bx	lr
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1548c:	f103 0208 	add.w	r2, r3, #8
   15490:	60da      	str	r2, [r3, #12]
   15492:	e7f8      	b.n	15486 <os_eventq_get_no_wait+0xc>

00015494 <os_eventq_get>:

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
   15494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15496:	4606      	mov	r6, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
   15498:	f000 fe74 	bl	16184 <os_sched_get_current_task>
   1549c:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
   1549e:	6833      	ldr	r3, [r6, #0]
   154a0:	4283      	cmp	r3, r0
   154a2:	d001      	beq.n	154a8 <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
   154a4:	b9db      	cbnz	r3, 154de <os_eventq_get+0x4a>
            evq->evq_owner = t;
   154a6:	6030      	str	r0, [r6, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
   154a8:	f001 f940 	bl	1672c <os_arch_save_sr>
   154ac:	4605      	mov	r5, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
   154ae:	68b7      	ldr	r7, [r6, #8]
    if (ev) {
   154b0:	b9ff      	cbnz	r7, 154f2 <os_eventq_get+0x5e>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
   154b2:	6074      	str	r4, [r6, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
   154b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   154b8:	4620      	mov	r0, r4
   154ba:	f000 fe6f 	bl	1619c <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
   154be:	7b63      	ldrb	r3, [r4, #13]
   154c0:	f043 0308 	orr.w	r3, r3, #8
   154c4:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
   154c6:	4628      	mov	r0, r5
   154c8:	f001 f936 	bl	16738 <os_arch_restore_sr>

        os_sched(NULL);
   154cc:	2000      	movs	r0, #0
   154ce:	f000 ff39 	bl	16344 <os_sched>

        OS_ENTER_CRITICAL(sr);
   154d2:	f001 f92b 	bl	1672c <os_arch_save_sr>
   154d6:	4605      	mov	r5, r0
        evq->evq_task = NULL;
   154d8:	2300      	movs	r3, #0
   154da:	6073      	str	r3, [r6, #4]
        goto pull_one;
   154dc:	e7e7      	b.n	154ae <os_eventq_get+0x1a>
            assert(0);
   154de:	f7ff f8c1 	bl	14664 <hal_debugger_connected>
   154e2:	b100      	cbz	r0, 154e6 <os_eventq_get+0x52>
   154e4:	be01      	bkpt	0x0001
   154e6:	2300      	movs	r3, #0
   154e8:	461a      	mov	r2, r3
   154ea:	4619      	mov	r1, r3
   154ec:	4618      	mov	r0, r3
   154ee:	f7ff fc59 	bl	14da4 <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   154f2:	68fb      	ldr	r3, [r7, #12]
   154f4:	60b3      	str	r3, [r6, #8]
   154f6:	b153      	cbz	r3, 1550e <os_eventq_get+0x7a>
        ev->ev_queued = 0;
   154f8:	2300      	movs	r3, #0
   154fa:	703b      	strb	r3, [r7, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
   154fc:	7b63      	ldrb	r3, [r4, #13]
   154fe:	f023 0308 	bic.w	r3, r3, #8
   15502:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
   15504:	4628      	mov	r0, r5
   15506:	f001 f917 	bl	16738 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
   1550a:	4638      	mov	r0, r7
   1550c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1550e:	f106 0308 	add.w	r3, r6, #8
   15512:	60f3      	str	r3, [r6, #12]
   15514:	e7f0      	b.n	154f8 <os_eventq_get+0x64>

00015516 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
   15516:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
   15518:	f7ff ffbc 	bl	15494 <os_eventq_get>
    assert(ev->ev_cb != NULL);
   1551c:	6843      	ldr	r3, [r0, #4]
   1551e:	b10b      	cbz	r3, 15524 <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
   15520:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
   15522:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
   15524:	f7ff f89e 	bl	14664 <hal_debugger_connected>
   15528:	b100      	cbz	r0, 1552c <os_eventq_run+0x16>
   1552a:	be01      	bkpt	0x0001
   1552c:	2300      	movs	r3, #0
   1552e:	461a      	mov	r2, r3
   15530:	4619      	mov	r1, r3
   15532:	4618      	mov	r0, r3
   15534:	f7ff fc36 	bl	14da4 <__assert_func>

00015538 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
   15538:	b538      	push	{r3, r4, r5, lr}
   1553a:	4605      	mov	r5, r0
   1553c:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   1553e:	f001 f8f5 	bl	1672c <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
   15542:	7823      	ldrb	r3, [r4, #0]
   15544:	b14b      	cbz	r3, 1555a <os_eventq_remove+0x22>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   15546:	68ab      	ldr	r3, [r5, #8]
   15548:	42a3      	cmp	r3, r4
   1554a:	d00b      	beq.n	15564 <os_eventq_remove+0x2c>
   1554c:	461a      	mov	r2, r3
   1554e:	68db      	ldr	r3, [r3, #12]
   15550:	42a3      	cmp	r3, r4
   15552:	d1fb      	bne.n	1554c <os_eventq_remove+0x14>
   15554:	68db      	ldr	r3, [r3, #12]
   15556:	60d3      	str	r3, [r2, #12]
   15558:	b163      	cbz	r3, 15574 <os_eventq_remove+0x3c>
    }
    ev->ev_queued = 0;
   1555a:	2300      	movs	r3, #0
   1555c:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
   1555e:	f001 f8eb 	bl	16738 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
   15562:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   15564:	68db      	ldr	r3, [r3, #12]
   15566:	60ab      	str	r3, [r5, #8]
   15568:	2b00      	cmp	r3, #0
   1556a:	d1f6      	bne.n	1555a <os_eventq_remove+0x22>
   1556c:	f105 0308 	add.w	r3, r5, #8
   15570:	60eb      	str	r3, [r5, #12]
   15572:	e7f2      	b.n	1555a <os_eventq_remove+0x22>
   15574:	320c      	adds	r2, #12
   15576:	60ea      	str	r2, [r5, #12]
   15578:	e7ef      	b.n	1555a <os_eventq_remove+0x22>
	...

0001557c <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   1557c:	4800      	ldr	r0, [pc, #0]	; (15580 <os_eventq_dflt_get+0x4>)
   1557e:	4770      	bx	lr
   15580:	1000251c 	.word	0x1000251c

00015584 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
   15584:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
   15586:	2000      	movs	r0, #0
   15588:	6018      	str	r0, [r3, #0]
   1558a:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
   1558c:	6098      	str	r0, [r3, #8]
   1558e:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
   15590:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
   15592:	611a      	str	r2, [r3, #16]

    return (0);
}
   15594:	4770      	bx	lr

00015596 <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
   15596:	b538      	push	{r3, r4, r5, lr}
   15598:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1559a:	f001 f8c7 	bl	1672c <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
   1559e:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   155a0:	b114      	cbz	r4, 155a8 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   155a2:	6863      	ldr	r3, [r4, #4]
   155a4:	602b      	str	r3, [r5, #0]
   155a6:	b12b      	cbz	r3, 155b4 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   155a8:	f001 f8c6 	bl	16738 <os_arch_restore_sr>

    if (mp) {
   155ac:	b104      	cbz	r4, 155b0 <os_mqueue_get+0x1a>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
   155ae:	3c10      	subs	r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
   155b0:	4620      	mov	r0, r4
   155b2:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   155b4:	606d      	str	r5, [r5, #4]
   155b6:	e7f7      	b.n	155a8 <os_mqueue_get+0x12>

000155b8 <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
   155b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
   155ba:	7953      	ldrb	r3, [r2, #5]
   155bc:	2b07      	cmp	r3, #7
   155be:	d916      	bls.n	155ee <os_mqueue_put+0x36>
   155c0:	4605      	mov	r5, r0
   155c2:	460e      	mov	r6, r1
   155c4:	4614      	mov	r4, r2
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
   155c6:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   155ca:	f001 f8af 	bl	1672c <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
   155ce:	2300      	movs	r3, #0
   155d0:	f844 3f14 	str.w	r3, [r4, #20]!
   155d4:	686b      	ldr	r3, [r5, #4]
   155d6:	601f      	str	r7, [r3, #0]
   155d8:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   155da:	f001 f8ad 	bl	16738 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   155de:	b146      	cbz	r6, 155f2 <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
   155e0:	f105 0108 	add.w	r1, r5, #8
   155e4:	4630      	mov	r0, r6
   155e6:	f7ff ff10 	bl	1540a <os_eventq_put>
    }

    return (0);
   155ea:	2000      	movs	r0, #0
   155ec:	e000      	b.n	155f0 <os_mqueue_put+0x38>
err:
    return (rc);
   155ee:	2002      	movs	r0, #2
}
   155f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   155f2:	2000      	movs	r0, #0
   155f4:	e7fc      	b.n	155f0 <os_mqueue_put+0x38>

000155f6 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   155f6:	3a10      	subs	r2, #16
   155f8:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   155fa:	6041      	str	r1, [r0, #4]

    return (0);
}
   155fc:	2000      	movs	r0, #0
   155fe:	4770      	bx	lr

00015600 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
   15600:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
   15602:	8803      	ldrh	r3, [r0, #0]
   15604:	428b      	cmp	r3, r1
   15606:	d310      	bcc.n	1562a <os_mbuf_get+0x2a>
   15608:	4604      	mov	r4, r0
   1560a:	460d      	mov	r5, r1
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
   1560c:	6840      	ldr	r0, [r0, #4]
   1560e:	f000 fc0e 	bl	15e2e <os_memblock_get>
    if (!om) {
   15612:	b148      	cbz	r0, 15628 <os_mbuf_get+0x28>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
   15614:	2300      	movs	r3, #0
   15616:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
   15618:	7103      	strb	r3, [r0, #4]
    om->om_pkthdr_len = 0;
   1561a:	7143      	strb	r3, [r0, #5]
    om->om_len = 0;
   1561c:	80c3      	strh	r3, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   1561e:	f100 0110 	add.w	r1, r0, #16
   15622:	440d      	add	r5, r1
   15624:	6005      	str	r5, [r0, #0]
    om->om_omp = omp;
   15626:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
   15628:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1562a:	2000      	movs	r0, #0
    return om;
   1562c:	e7fc      	b.n	15628 <os_mbuf_get+0x28>

0001562e <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   1562e:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
   15630:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   15634:	8803      	ldrh	r3, [r0, #0]
   15636:	42ab      	cmp	r3, r5
   15638:	d30e      	bcc.n	15658 <os_mbuf_get_pkthdr+0x2a>
   1563a:	2dff      	cmp	r5, #255	; 0xff
   1563c:	d80e      	bhi.n	1565c <os_mbuf_get_pkthdr+0x2e>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
   1563e:	2100      	movs	r1, #0
   15640:	f7ff ffde 	bl	15600 <os_mbuf_get>
    if (om) {
   15644:	b138      	cbz	r0, 15656 <os_mbuf_get_pkthdr+0x28>
        om->om_pkthdr_len = pkthdr_len;
   15646:	7145      	strb	r5, [r0, #5]
        om->om_data += pkthdr_len;
   15648:	6803      	ldr	r3, [r0, #0]
   1564a:	441d      	add	r5, r3
   1564c:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   1564e:	2300      	movs	r3, #0
   15650:	8203      	strh	r3, [r0, #16]
        pkthdr->omp_flags = 0;
   15652:	8243      	strh	r3, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   15654:	6143      	str	r3, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
   15656:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   15658:	2000      	movs	r0, #0
   1565a:	e7fc      	b.n	15656 <os_mbuf_get_pkthdr+0x28>
   1565c:	2000      	movs	r0, #0
    return om;
   1565e:	e7fa      	b.n	15656 <os_mbuf_get_pkthdr+0x28>

00015660 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
   15660:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
   15662:	6883      	ldr	r3, [r0, #8]
   15664:	b123      	cbz	r3, 15670 <os_mbuf_free+0x10>
   15666:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
   15668:	6858      	ldr	r0, [r3, #4]
   1566a:	f000 fc08 	bl	15e7e <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
   1566e:	bd08      	pop	{r3, pc}
    rc = 0;
   15670:	2000      	movs	r0, #0
    return (rc);
   15672:	e7fc      	b.n	1566e <os_mbuf_free+0xe>

00015674 <os_mbuf_free_chain>:
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
   15674:	b158      	cbz	r0, 1568e <os_mbuf_free_chain+0x1a>
{
   15676:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   15678:	68c4      	ldr	r4, [r0, #12]

        rc = os_mbuf_free(om);
   1567a:	f7ff fff1 	bl	15660 <os_mbuf_free>
        if (rc != 0) {
   1567e:	4603      	mov	r3, r0
   15680:	b918      	cbnz	r0, 1568a <os_mbuf_free_chain+0x16>
            goto done;
        }

        om = next;
   15682:	4620      	mov	r0, r4
    while (om != NULL) {
   15684:	2c00      	cmp	r4, #0
   15686:	d1f7      	bne.n	15678 <os_mbuf_free_chain+0x4>
    }

    rc = 0;
   15688:	2300      	movs	r3, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
   1568a:	4618      	mov	r0, r3
   1568c:	bd10      	pop	{r4, pc}
    rc = 0;
   1568e:	2300      	movs	r3, #0
}
   15690:	4618      	mov	r0, r3
   15692:	4770      	bx	lr

00015694 <os_mbuf_len>:
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
}

uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
   15694:	4603      	mov	r3, r0
    uint16_t len;

    len = 0;
   15696:	2000      	movs	r0, #0
    while (om != NULL) {
   15698:	b123      	cbz	r3, 156a4 <os_mbuf_len+0x10>
        len += om->om_len;
   1569a:	88da      	ldrh	r2, [r3, #6]
   1569c:	4410      	add	r0, r2
   1569e:	b280      	uxth	r0, r0
        om = SLIST_NEXT(om, om_next);
   156a0:	68db      	ldr	r3, [r3, #12]
   156a2:	e7f9      	b.n	15698 <os_mbuf_len+0x4>
    }

    return len;
}
   156a4:	4770      	bx	lr

000156a6 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
   156a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   156aa:	2800      	cmp	r0, #0
   156ac:	d04b      	beq.n	15746 <os_mbuf_append+0xa0>
   156ae:	460f      	mov	r7, r1
   156b0:	4691      	mov	r9, r2
   156b2:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   156b4:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   156b8:	4603      	mov	r3, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   156ba:	461e      	mov	r6, r3
   156bc:	68db      	ldr	r3, [r3, #12]
   156be:	2b00      	cmp	r3, #0
   156c0:	d1fb      	bne.n	156ba <os_mbuf_append+0x14>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
   156c2:	464d      	mov	r5, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
   156c4:	68b3      	ldr	r3, [r6, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   156c6:	f106 0410 	add.w	r4, r6, #16
   156ca:	881b      	ldrh	r3, [r3, #0]
   156cc:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   156ce:	6830      	ldr	r0, [r6, #0]
   156d0:	88f3      	ldrh	r3, [r6, #6]
   156d2:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   156d4:	1a24      	subs	r4, r4, r0
   156d6:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   156d8:	b164      	cbz	r4, 156f4 <os_mbuf_append+0x4e>
        if (space > remainder) {
   156da:	454c      	cmp	r4, r9
   156dc:	dd00      	ble.n	156e0 <os_mbuf_append+0x3a>
            space = remainder;
   156de:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   156e0:	4622      	mov	r2, r4
   156e2:	4639      	mov	r1, r7
   156e4:	f001 f9f6 	bl	16ad4 <memcpy>

        last->om_len += space;
   156e8:	88f3      	ldrh	r3, [r6, #6]
   156ea:	4423      	add	r3, r4
   156ec:	80f3      	strh	r3, [r6, #6]
        data += space;
   156ee:	4427      	add	r7, r4
        remainder -= space;
   156f0:	eba9 0504 	sub.w	r5, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   156f4:	2d00      	cmp	r5, #0
   156f6:	dd16      	ble.n	15726 <os_mbuf_append+0x80>
        new = os_mbuf_get(omp, 0);
   156f8:	2100      	movs	r1, #0
   156fa:	4640      	mov	r0, r8
   156fc:	f7ff ff80 	bl	15600 <os_mbuf_get>
        if (!new) {
   15700:	4604      	mov	r4, r0
   15702:	b180      	cbz	r0, 15726 <os_mbuf_append+0x80>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
   15704:	f8b8 2000 	ldrh.w	r2, [r8]
   15708:	42aa      	cmp	r2, r5
   1570a:	bfa8      	it	ge
   1570c:	462a      	movge	r2, r5
   1570e:	b292      	uxth	r2, r2
   15710:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
   15712:	4639      	mov	r1, r7
   15714:	6800      	ldr	r0, [r0, #0]
   15716:	f001 f9dd 	bl	16ad4 <memcpy>
        data += new->om_len;
   1571a:	88e3      	ldrh	r3, [r4, #6]
   1571c:	441f      	add	r7, r3
        remainder -= new->om_len;
   1571e:	1aed      	subs	r5, r5, r3
        SLIST_NEXT(last, om_next) = new;
   15720:	60f4      	str	r4, [r6, #12]
        last = new;
   15722:	4626      	mov	r6, r4
   15724:	e7e6      	b.n	156f4 <os_mbuf_append+0x4e>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
   15726:	f89a 3005 	ldrb.w	r3, [sl, #5]
   1572a:	2b07      	cmp	r3, #7
   1572c:	d907      	bls.n	1573e <os_mbuf_append+0x98>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
   1572e:	eba9 0905 	sub.w	r9, r9, r5
   15732:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   15736:	fa13 f989 	uxtah	r9, r3, r9
   1573a:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   1573e:	b925      	cbnz	r5, 1574a <os_mbuf_append+0xa4>


    return (0);
err:
    return (rc);
}
   15740:	4628      	mov	r0, r5
   15742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   15746:	2502      	movs	r5, #2
   15748:	e7fa      	b.n	15740 <os_mbuf_append+0x9a>
        rc = OS_ENOMEM;
   1574a:	2501      	movs	r5, #1
   1574c:	e7f8      	b.n	15740 <os_mbuf_append+0x9a>

0001574e <os_mbuf_off>:

    /* Cast away const. */
    cur = (struct os_mbuf *)om;

    while (1) {
        if (cur == NULL) {
   1574e:	b170      	cbz	r0, 1576e <os_mbuf_off+0x20>
{
   15750:	b410      	push	{r4}
   15752:	e002      	b.n	1575a <os_mbuf_off+0xc>

            *out_off = off;
            return cur;
        }

        off -= cur->om_len;
   15754:	1ac9      	subs	r1, r1, r3
        cur = next;
   15756:	4620      	mov	r0, r4
        if (cur == NULL) {
   15758:	b13c      	cbz	r4, 1576a <os_mbuf_off+0x1c>
        next = SLIST_NEXT(cur, om_next);
   1575a:	68c4      	ldr	r4, [r0, #12]
        if (cur->om_len > off ||
   1575c:	88c3      	ldrh	r3, [r0, #6]
   1575e:	428b      	cmp	r3, r1
   15760:	dc02      	bgt.n	15768 <os_mbuf_off+0x1a>
   15762:	d1f7      	bne.n	15754 <os_mbuf_off+0x6>
            (cur->om_len == off && next == NULL)) {
   15764:	2c00      	cmp	r4, #0
   15766:	d1f5      	bne.n	15754 <os_mbuf_off+0x6>
            *out_off = off;
   15768:	8011      	strh	r1, [r2, #0]
    }
}
   1576a:	bc10      	pop	{r4}
   1576c:	4770      	bx	lr
   1576e:	4770      	bx	lr

00015770 <os_mbuf_appendfrom>:
{
   15770:	b5f0      	push	{r4, r5, r6, r7, lr}
   15772:	b083      	sub	sp, #12
   15774:	4607      	mov	r7, r0
   15776:	4608      	mov	r0, r1
   15778:	4611      	mov	r1, r2
   1577a:	461e      	mov	r6, r3
    src_cur_om = os_mbuf_off(src, src_off, &src_cur_off);
   1577c:	f10d 0206 	add.w	r2, sp, #6
   15780:	f7ff ffe5 	bl	1574e <os_mbuf_off>
   15784:	4605      	mov	r5, r0
    while (len > 0) {
   15786:	e005      	b.n	15794 <os_mbuf_appendfrom+0x24>
        len -= chunk_sz;
   15788:	1b34      	subs	r4, r6, r4
   1578a:	b2a6      	uxth	r6, r4
        src_cur_om = SLIST_NEXT(src_cur_om, om_next);
   1578c:	68ed      	ldr	r5, [r5, #12]
        src_cur_off = 0;
   1578e:	2300      	movs	r3, #0
   15790:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (len > 0) {
   15794:	b196      	cbz	r6, 157bc <os_mbuf_appendfrom+0x4c>
        if (src_cur_om == NULL) {
   15796:	b1ad      	cbz	r5, 157c4 <os_mbuf_appendfrom+0x54>
        chunk_sz = min(len, src_cur_om->om_len - src_cur_off);
   15798:	88ec      	ldrh	r4, [r5, #6]
   1579a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1579e:	1ae4      	subs	r4, r4, r3
   157a0:	42b4      	cmp	r4, r6
   157a2:	bfa8      	it	ge
   157a4:	4634      	movge	r4, r6
   157a6:	b2a4      	uxth	r4, r4
        rc = os_mbuf_append(dst, src_cur_om->om_data + src_cur_off, chunk_sz);
   157a8:	6829      	ldr	r1, [r5, #0]
   157aa:	4622      	mov	r2, r4
   157ac:	4419      	add	r1, r3
   157ae:	4638      	mov	r0, r7
   157b0:	f7ff ff79 	bl	156a6 <os_mbuf_append>
        if (rc != 0) {
   157b4:	4603      	mov	r3, r0
   157b6:	2800      	cmp	r0, #0
   157b8:	d0e6      	beq.n	15788 <os_mbuf_appendfrom+0x18>
   157ba:	e000      	b.n	157be <os_mbuf_appendfrom+0x4e>
    return 0;
   157bc:	2300      	movs	r3, #0
}
   157be:	4618      	mov	r0, r3
   157c0:	b003      	add	sp, #12
   157c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return OS_EINVAL;
   157c4:	2302      	movs	r3, #2
   157c6:	e7fa      	b.n	157be <os_mbuf_appendfrom+0x4e>

000157c8 <os_mbuf_copydata>:

int
os_mbuf_copydata(const struct os_mbuf *m, int off, int len, void *dst)
{
   157c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   157ca:	4604      	mov	r4, r0
   157cc:	461f      	mov	r7, r3
    unsigned int count;
    uint8_t *udst;

    if (!len) {
   157ce:	4616      	mov	r6, r2
   157d0:	b91a      	cbnz	r2, 157da <os_mbuf_copydata+0x12>
        return 0;
   157d2:	4610      	mov	r0, r2
   157d4:	e01e      	b.n	15814 <os_mbuf_copydata+0x4c>
            return (-1);
        }

        if (off < m->om_len)
            break;
        off -= m->om_len;
   157d6:	1a89      	subs	r1, r1, r2
        m = SLIST_NEXT(m, om_next);
   157d8:	68e4      	ldr	r4, [r4, #12]
    while (off > 0) {
   157da:	2900      	cmp	r1, #0
   157dc:	dd13      	ble.n	15806 <os_mbuf_copydata+0x3e>
        if (!m) {
   157de:	b1ec      	cbz	r4, 1581c <os_mbuf_copydata+0x54>
        if (off < m->om_len)
   157e0:	88e2      	ldrh	r2, [r4, #6]
   157e2:	428a      	cmp	r2, r1
   157e4:	ddf7      	ble.n	157d6 <os_mbuf_copydata+0xe>
   157e6:	e00e      	b.n	15806 <os_mbuf_copydata+0x3e>
    }
    while (len > 0 && m != NULL) {
        count = min(m->om_len - off, len);
   157e8:	88e5      	ldrh	r5, [r4, #6]
   157ea:	1a6d      	subs	r5, r5, r1
   157ec:	42b5      	cmp	r5, r6
   157ee:	bfa8      	it	ge
   157f0:	4635      	movge	r5, r6
        memcpy(udst, m->om_data + off, count);
   157f2:	6823      	ldr	r3, [r4, #0]
   157f4:	462a      	mov	r2, r5
   157f6:	4419      	add	r1, r3
   157f8:	4638      	mov	r0, r7
   157fa:	f001 f96b 	bl	16ad4 <memcpy>
        len -= count;
   157fe:	1b76      	subs	r6, r6, r5
        udst += count;
   15800:	442f      	add	r7, r5
        off = 0;
        m = SLIST_NEXT(m, om_next);
   15802:	68e4      	ldr	r4, [r4, #12]
        off = 0;
   15804:	2100      	movs	r1, #0
    while (len > 0 && m != NULL) {
   15806:	2e00      	cmp	r6, #0
   15808:	dd01      	ble.n	1580e <os_mbuf_copydata+0x46>
   1580a:	2c00      	cmp	r4, #0
   1580c:	d1ec      	bne.n	157e8 <os_mbuf_copydata+0x20>
    }

    return (len > 0 ? -1 : 0);
   1580e:	2e00      	cmp	r6, #0
   15810:	dc01      	bgt.n	15816 <os_mbuf_copydata+0x4e>
   15812:	2000      	movs	r0, #0
}
   15814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (len > 0 ? -1 : 0);
   15816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1581a:	e7fb      	b.n	15814 <os_mbuf_copydata+0x4c>
            return (-1);
   1581c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15820:	e7f8      	b.n	15814 <os_mbuf_copydata+0x4c>

00015822 <os_mbuf_adj>:
{
    int len = req_len;
    struct os_mbuf *m;
    int count;

    if ((m = mp) == NULL)
   15822:	2800      	cmp	r0, #0
   15824:	d04d      	beq.n	158c2 <os_mbuf_adj+0xa0>
{
   15826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15828:	4604      	mov	r4, r0
        return;
    if (len >= 0) {
   1582a:	2900      	cmp	r1, #0
   1582c:	db1b      	blt.n	15866 <os_mbuf_adj+0x44>
    if ((m = mp) == NULL)
   1582e:	4603      	mov	r3, r0
    int len = req_len;
   15830:	460a      	mov	r2, r1
   15832:	e005      	b.n	15840 <os_mbuf_adj+0x1e>
            if (m->om_len <= len) {
                len -= m->om_len;
                m->om_len = 0;
                m = SLIST_NEXT(m, om_next);
            } else {
                m->om_len -= len;
   15834:	1a80      	subs	r0, r0, r2
   15836:	80d8      	strh	r0, [r3, #6]
                m->om_data += len;
   15838:	6818      	ldr	r0, [r3, #0]
   1583a:	4402      	add	r2, r0
   1583c:	601a      	str	r2, [r3, #0]
                len = 0;
   1583e:	2200      	movs	r2, #0
        while (m != NULL && len > 0) {
   15840:	b14b      	cbz	r3, 15856 <os_mbuf_adj+0x34>
   15842:	2a00      	cmp	r2, #0
   15844:	dd07      	ble.n	15856 <os_mbuf_adj+0x34>
            if (m->om_len <= len) {
   15846:	88d8      	ldrh	r0, [r3, #6]
   15848:	4290      	cmp	r0, r2
   1584a:	dcf3      	bgt.n	15834 <os_mbuf_adj+0x12>
                len -= m->om_len;
   1584c:	1a12      	subs	r2, r2, r0
                m->om_len = 0;
   1584e:	2000      	movs	r0, #0
   15850:	80d8      	strh	r0, [r3, #6]
                m = SLIST_NEXT(m, om_next);
   15852:	68db      	ldr	r3, [r3, #12]
   15854:	e7f4      	b.n	15840 <os_mbuf_adj+0x1e>
            }
        }
        if (OS_MBUF_IS_PKTHDR(mp))
   15856:	7963      	ldrb	r3, [r4, #5]
   15858:	2b07      	cmp	r3, #7
   1585a:	d903      	bls.n	15864 <os_mbuf_adj+0x42>
            OS_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
   1585c:	1a52      	subs	r2, r2, r1
   1585e:	8a23      	ldrh	r3, [r4, #16]
   15860:	441a      	add	r2, r3
   15862:	8222      	strh	r2, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
   15864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        len = -len;
   15866:	424f      	negs	r7, r1
    if ((m = mp) == NULL)
   15868:	4603      	mov	r3, r0
        count = 0;
   1586a:	2200      	movs	r2, #0
            count += m->om_len;
   1586c:	88d8      	ldrh	r0, [r3, #6]
   1586e:	4402      	add	r2, r0
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
   15870:	461e      	mov	r6, r3
   15872:	68db      	ldr	r3, [r3, #12]
   15874:	2b00      	cmp	r3, #0
   15876:	d1f9      	bne.n	1586c <os_mbuf_adj+0x4a>
        if (m->om_len >= len) {
   15878:	42b8      	cmp	r0, r7
   1587a:	da0d      	bge.n	15898 <os_mbuf_adj+0x76>
        if (count < 0)
   1587c:	188a      	adds	r2, r1, r2
   1587e:	d415      	bmi.n	158ac <os_mbuf_adj+0x8a>
        if (OS_MBUF_IS_PKTHDR(m))
   15880:	7963      	ldrb	r3, [r4, #5]
   15882:	2b07      	cmp	r3, #7
   15884:	d900      	bls.n	15888 <os_mbuf_adj+0x66>
            OS_MBUF_PKTHDR(m)->omp_len = count;
   15886:	8222      	strh	r2, [r4, #16]
        for (; m; m = SLIST_NEXT(m, om_next)) {
   15888:	2c00      	cmp	r4, #0
   1588a:	d0eb      	beq.n	15864 <os_mbuf_adj+0x42>
            if (m->om_len >= count) {
   1588c:	88e3      	ldrh	r3, [r4, #6]
   1588e:	4293      	cmp	r3, r2
   15890:	da0e      	bge.n	158b0 <os_mbuf_adj+0x8e>
            count -= m->om_len;
   15892:	1ad2      	subs	r2, r2, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
   15894:	68e4      	ldr	r4, [r4, #12]
   15896:	e7f7      	b.n	15888 <os_mbuf_adj+0x66>
            m->om_len -= len;
   15898:	b2bf      	uxth	r7, r7
   1589a:	1bc0      	subs	r0, r0, r7
   1589c:	80f0      	strh	r0, [r6, #6]
            if (OS_MBUF_IS_PKTHDR(mp))
   1589e:	7963      	ldrb	r3, [r4, #5]
   158a0:	2b07      	cmp	r3, #7
   158a2:	d9df      	bls.n	15864 <os_mbuf_adj+0x42>
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
   158a4:	8a23      	ldrh	r3, [r4, #16]
   158a6:	1bdf      	subs	r7, r3, r7
   158a8:	8227      	strh	r7, [r4, #16]
            return;
   158aa:	e7db      	b.n	15864 <os_mbuf_adj+0x42>
            count = 0;
   158ac:	2200      	movs	r2, #0
   158ae:	e7e7      	b.n	15880 <os_mbuf_adj+0x5e>
                m->om_len = count;
   158b0:	80e2      	strh	r2, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
   158b2:	68e0      	ldr	r0, [r4, #12]
   158b4:	2800      	cmp	r0, #0
   158b6:	d0d5      	beq.n	15864 <os_mbuf_adj+0x42>
                    os_mbuf_free_chain(SLIST_NEXT(m, om_next));
   158b8:	f7ff fedc 	bl	15674 <os_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
   158bc:	2300      	movs	r3, #0
   158be:	60e3      	str	r3, [r4, #12]
   158c0:	e7d0      	b.n	15864 <os_mbuf_adj+0x42>
   158c2:	4770      	bx	lr

000158c4 <os_mbuf_cmpf>:

int
os_mbuf_cmpf(const struct os_mbuf *om, int off, const void *data, int len)
{
   158c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   158c8:	b082      	sub	sp, #8
    uint16_t chunk_sz;
    uint16_t data_off;
    uint16_t om_off;
    int rc;

    if (len <= 0) {
   158ca:	1e1e      	subs	r6, r3, #0
   158cc:	dd2d      	ble.n	1592a <os_mbuf_cmpf+0x66>
   158ce:	4617      	mov	r7, r2
        return 0;
    }

    data_off = 0;
    om = os_mbuf_off(om, off, &om_off);
   158d0:	f10d 0206 	add.w	r2, sp, #6
   158d4:	f7ff ff3b 	bl	1574e <os_mbuf_off>
   158d8:	4604      	mov	r4, r0
    data_off = 0;
   158da:	f04f 0800 	mov.w	r8, #0
   158de:	e009      	b.n	158f4 <os_mbuf_cmpf+0x30>
            if (rc != 0) {
                return rc;
            }
        }

        data_off += chunk_sz;
   158e0:	4445      	add	r5, r8
   158e2:	fa1f f885 	uxth.w	r8, r5
        if (data_off == len) {
   158e6:	45b0      	cmp	r8, r6
   158e8:	d027      	beq.n	1593a <os_mbuf_cmpf+0x76>
            return 0;
        }

        om = SLIST_NEXT(om, om_next);
   158ea:	68e4      	ldr	r4, [r4, #12]
        om_off = 0;
   158ec:	2300      	movs	r3, #0
   158ee:	f8ad 3006 	strh.w	r3, [sp, #6]

        if (om == NULL) {
   158f2:	b1bc      	cbz	r4, 15924 <os_mbuf_cmpf+0x60>
        if (om == NULL) {
   158f4:	b1f4      	cbz	r4, 15934 <os_mbuf_cmpf+0x70>
        chunk_sz = min(om->om_len - om_off, len - data_off);
   158f6:	eba6 0208 	sub.w	r2, r6, r8
   158fa:	88e3      	ldrh	r3, [r4, #6]
   158fc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   15900:	1a1b      	subs	r3, r3, r0
   15902:	429a      	cmp	r2, r3
   15904:	bfa8      	it	ge
   15906:	461a      	movge	r2, r3
   15908:	b295      	uxth	r5, r2
        if (chunk_sz > 0) {
   1590a:	2d00      	cmp	r5, #0
   1590c:	d0e8      	beq.n	158e0 <os_mbuf_cmpf+0x1c>
            rc = memcmp(om->om_data + om_off, data + data_off, chunk_sz);
   1590e:	6823      	ldr	r3, [r4, #0]
   15910:	462a      	mov	r2, r5
   15912:	eb07 0108 	add.w	r1, r7, r8
   15916:	4418      	add	r0, r3
   15918:	f001 f8b8 	bl	16a8c <memcmp>
            if (rc != 0) {
   1591c:	4603      	mov	r3, r0
   1591e:	2800      	cmp	r0, #0
   15920:	d0de      	beq.n	158e0 <os_mbuf_cmpf+0x1c>
   15922:	e003      	b.n	1592c <os_mbuf_cmpf+0x68>
            return INT_MAX;
   15924:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   15928:	e000      	b.n	1592c <os_mbuf_cmpf+0x68>
        return 0;
   1592a:	2300      	movs	r3, #0
        }
    }
}
   1592c:	4618      	mov	r0, r3
   1592e:	b002      	add	sp, #8
   15930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return INT_MAX;
   15934:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   15938:	e7f8      	b.n	1592c <os_mbuf_cmpf+0x68>
            return 0;
   1593a:	2300      	movs	r3, #0
   1593c:	e7f6      	b.n	1592c <os_mbuf_cmpf+0x68>

0001593e <os_mbuf_prepend>:
    }
}

struct os_mbuf *
os_mbuf_prepend(struct os_mbuf *om, int len)
{
   1593e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15940:	4604      	mov	r4, r0
   15942:	460e      	mov	r6, r1
   15944:	e019      	b.n	1597a <os_mbuf_prepend+0x3c>
    startoff = 0;
   15946:	2000      	movs	r0, #0
   15948:	e01b      	b.n	15982 <os_mbuf_prepend+0x44>
        /* The current head didn't have enough space; allocate a new head. */
        if (OS_MBUF_IS_PKTHDR(om)) {
            p = os_mbuf_get_pkthdr(om->om_omp,
                om->om_pkthdr_len - sizeof (struct os_mbuf_pkthdr));
        } else {
            p = os_mbuf_get(om->om_omp, 0);
   1594a:	2100      	movs	r1, #0
   1594c:	68a0      	ldr	r0, [r4, #8]
   1594e:	f7ff fe57 	bl	15600 <os_mbuf_get>
   15952:	4605      	mov	r5, r0
        }
        if (p == NULL) {
   15954:	2d00      	cmp	r5, #0
   15956:	d033      	beq.n	159c0 <os_mbuf_prepend+0x82>
            os_mbuf_free_chain(om);
            om = NULL;
            break;
        }

        if (OS_MBUF_IS_PKTHDR(om)) {
   15958:	7963      	ldrb	r3, [r4, #5]
   1595a:	2b07      	cmp	r3, #7
   1595c:	d836      	bhi.n	159cc <os_mbuf_prepend+0x8e>
    omp = om->om_omp;
   1595e:	68aa      	ldr	r2, [r5, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   15960:	f105 0310 	add.w	r3, r5, #16
   15964:	8812      	ldrh	r2, [r2, #0]
   15966:	4413      	add	r3, r2
      (om->om_data + om->om_len);
   15968:	6829      	ldr	r1, [r5, #0]
   1596a:	88ea      	ldrh	r2, [r5, #6]
   1596c:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1596e:	1a9b      	subs	r3, r3, r2
        }

        /* Move the new head's data pointer to the end so that data can be
         * prepended.
         */
        p->om_data += OS_MBUF_TRAILINGSPACE(p);
   15970:	fa11 f383 	uxtah	r3, r1, r3
   15974:	602b      	str	r3, [r5, #0]

        SLIST_NEXT(p, om_next) = om;
   15976:	60ec      	str	r4, [r5, #12]
        om = p;
   15978:	462c      	mov	r4, r5
    if (OS_MBUF_IS_PKTHDR(om)) {
   1597a:	7961      	ldrb	r1, [r4, #5]
   1597c:	2907      	cmp	r1, #7
   1597e:	d9e2      	bls.n	15946 <os_mbuf_prepend+0x8>
        startoff = om->om_pkthdr_len;
   15980:	b288      	uxth	r0, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   15982:	4623      	mov	r3, r4
   15984:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   15988:	4403      	add	r3, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1598a:	1ad3      	subs	r3, r2, r3
    return (leadingspace);
   1598c:	b29b      	uxth	r3, r3
        leading = min(len, OS_MBUF_LEADINGSPACE(om));
   1598e:	429e      	cmp	r6, r3
   15990:	da00      	bge.n	15994 <os_mbuf_prepend+0x56>
   15992:	4633      	mov	r3, r6
        om->om_data -= leading;
   15994:	1ad2      	subs	r2, r2, r3
   15996:	6022      	str	r2, [r4, #0]
        om->om_len += leading;
   15998:	b298      	uxth	r0, r3
   1599a:	88e2      	ldrh	r2, [r4, #6]
   1599c:	4402      	add	r2, r0
   1599e:	80e2      	strh	r2, [r4, #6]
        if (OS_MBUF_IS_PKTHDR(om)) {
   159a0:	2907      	cmp	r1, #7
   159a2:	d902      	bls.n	159aa <os_mbuf_prepend+0x6c>
            OS_MBUF_PKTHDR(om)->omp_len += leading;
   159a4:	8a22      	ldrh	r2, [r4, #16]
   159a6:	4410      	add	r0, r2
   159a8:	8220      	strh	r0, [r4, #16]
        if (len == 0) {
   159aa:	1af6      	subs	r6, r6, r3
   159ac:	d00c      	beq.n	159c8 <os_mbuf_prepend+0x8a>
        if (OS_MBUF_IS_PKTHDR(om)) {
   159ae:	2907      	cmp	r1, #7
   159b0:	d9cb      	bls.n	1594a <os_mbuf_prepend+0xc>
            p = os_mbuf_get_pkthdr(om->om_omp,
   159b2:	3908      	subs	r1, #8
   159b4:	b2c9      	uxtb	r1, r1
   159b6:	68a0      	ldr	r0, [r4, #8]
   159b8:	f7ff fe39 	bl	1562e <os_mbuf_get_pkthdr>
   159bc:	4605      	mov	r5, r0
   159be:	e7c9      	b.n	15954 <os_mbuf_prepend+0x16>
            os_mbuf_free_chain(om);
   159c0:	4620      	mov	r0, r4
   159c2:	f7ff fe57 	bl	15674 <os_mbuf_free_chain>
            om = NULL;
   159c6:	462c      	mov	r4, r5
    }

    return om;
}
   159c8:	4620      	mov	r0, r4
   159ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(new_buf->om_len == 0);
   159cc:	88eb      	ldrh	r3, [r5, #6]
   159ce:	b973      	cbnz	r3, 159ee <os_mbuf_prepend+0xb0>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   159d0:	f105 0710 	add.w	r7, r5, #16
   159d4:	7962      	ldrb	r2, [r4, #5]
   159d6:	f104 0110 	add.w	r1, r4, #16
   159da:	4638      	mov	r0, r7
   159dc:	f001 f87a 	bl	16ad4 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   159e0:	7963      	ldrb	r3, [r4, #5]
   159e2:	716b      	strb	r3, [r5, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   159e4:	441f      	add	r7, r3
   159e6:	602f      	str	r7, [r5, #0]
            om->om_pkthdr_len = 0;
   159e8:	2300      	movs	r3, #0
   159ea:	7163      	strb	r3, [r4, #5]
   159ec:	e7b7      	b.n	1595e <os_mbuf_prepend+0x20>
    assert(new_buf->om_len == 0);
   159ee:	f7fe fe39 	bl	14664 <hal_debugger_connected>
   159f2:	b100      	cbz	r0, 159f6 <os_mbuf_prepend+0xb8>
   159f4:	be01      	bkpt	0x0001
   159f6:	2300      	movs	r3, #0
   159f8:	461a      	mov	r2, r3
   159fa:	4619      	mov	r1, r3
   159fc:	4618      	mov	r0, r3
   159fe:	f7ff f9d1 	bl	14da4 <__assert_func>

00015a02 <os_mbuf_copyinto>:
    return om;
}

int
os_mbuf_copyinto(struct os_mbuf *om, int off, const void *src, int len)
{
   15a02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15a06:	b083      	sub	sp, #12
   15a08:	4681      	mov	r9, r0
   15a0a:	4688      	mov	r8, r1
   15a0c:	4617      	mov	r7, r2
   15a0e:	461e      	mov	r6, r3
    uint16_t cur_off;
    int copylen;
    int rc;

    /* Find the mbuf,offset pair for the start of the destination. */
    cur = os_mbuf_off(om, off, &cur_off);
   15a10:	f10d 0206 	add.w	r2, sp, #6
   15a14:	f7ff fe9b 	bl	1574e <os_mbuf_off>
    if (cur == NULL) {
   15a18:	4605      	mov	r5, r0
   15a1a:	b948      	cbnz	r0, 15a30 <os_mbuf_copyinto+0x2e>
        return -1;
   15a1c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   15a20:	e02d      	b.n	15a7e <os_mbuf_copyinto+0x7c>
            len -= copylen;

            copylen = 0;
        }

        if (len == 0) {
   15a22:	b366      	cbz	r6, 15a7e <os_mbuf_copyinto+0x7c>
            /* All the source data fit in the existing mbuf chain. */
            return 0;
        }

        next = SLIST_NEXT(cur, om_next);
   15a24:	68eb      	ldr	r3, [r5, #12]
        if (next == NULL) {
   15a26:	b1ab      	cbz	r3, 15a54 <os_mbuf_copyinto+0x52>
            break;
        }

        cur = next;
        cur_off = 0;
   15a28:	2200      	movs	r2, #0
   15a2a:	f8ad 2006 	strh.w	r2, [sp, #6]
        cur = next;
   15a2e:	461d      	mov	r5, r3
        copylen = min(cur->om_len - cur_off, len);
   15a30:	88ec      	ldrh	r4, [r5, #6]
   15a32:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   15a36:	1ae4      	subs	r4, r4, r3
   15a38:	42b4      	cmp	r4, r6
   15a3a:	bfa8      	it	ge
   15a3c:	4634      	movge	r4, r6
        if (copylen > 0) {
   15a3e:	2c00      	cmp	r4, #0
   15a40:	ddef      	ble.n	15a22 <os_mbuf_copyinto+0x20>
            memcpy(cur->om_data + cur_off, sptr, copylen);
   15a42:	6828      	ldr	r0, [r5, #0]
   15a44:	4622      	mov	r2, r4
   15a46:	4639      	mov	r1, r7
   15a48:	4418      	add	r0, r3
   15a4a:	f001 f843 	bl	16ad4 <memcpy>
            sptr += copylen;
   15a4e:	4427      	add	r7, r4
            len -= copylen;
   15a50:	1b36      	subs	r6, r6, r4
            copylen = 0;
   15a52:	e7e6      	b.n	15a22 <os_mbuf_copyinto+0x20>
    }

    /* Append the remaining data to the end of the chain. */
    rc = os_mbuf_append(cur, sptr, len);
   15a54:	b2b2      	uxth	r2, r6
   15a56:	4639      	mov	r1, r7
   15a58:	4628      	mov	r0, r5
   15a5a:	f7ff fe24 	bl	156a6 <os_mbuf_append>
    if (rc != 0) {
   15a5e:	b968      	cbnz	r0, 15a7c <os_mbuf_copyinto+0x7a>
        return rc;
    }

    /* Fix up the packet header, if one is present. */
    if (OS_MBUF_IS_PKTHDR(om)) {
   15a60:	f899 2005 	ldrb.w	r2, [r9, #5]
   15a64:	2a07      	cmp	r2, #7
   15a66:	d90e      	bls.n	15a86 <os_mbuf_copyinto+0x84>
        OS_MBUF_PKTHDR(om)->omp_len =
            max(OS_MBUF_PKTHDR(om)->omp_len, off + len);
   15a68:	4446      	add	r6, r8
   15a6a:	f8b9 8010 	ldrh.w	r8, [r9, #16]
   15a6e:	4546      	cmp	r6, r8
   15a70:	bfb8      	it	lt
   15a72:	4646      	movlt	r6, r8
        OS_MBUF_PKTHDR(om)->omp_len =
   15a74:	f8a9 6010 	strh.w	r6, [r9, #16]
    }

    return 0;
   15a78:	4606      	mov	r6, r0
   15a7a:	e000      	b.n	15a7e <os_mbuf_copyinto+0x7c>
        return rc;
   15a7c:	4606      	mov	r6, r0
}
   15a7e:	4630      	mov	r0, r6
   15a80:	b003      	add	sp, #12
   15a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
   15a86:	4606      	mov	r6, r0
   15a88:	e7f9      	b.n	15a7e <os_mbuf_copyinto+0x7c>

00015a8a <os_mbuf_concat>:
{
    struct os_mbuf *next;
    struct os_mbuf *cur;

    /* Point 'cur' to the last buffer in the first chain. */
    cur = first;
   15a8a:	4603      	mov	r3, r0
    while (1) {
        next = SLIST_NEXT(cur, om_next);
   15a8c:	461a      	mov	r2, r3
   15a8e:	68db      	ldr	r3, [r3, #12]
        if (next == NULL) {
   15a90:	2b00      	cmp	r3, #0
   15a92:	d1fb      	bne.n	15a8c <os_mbuf_concat+0x2>

        cur = next;
    }

    /* Attach the second chain to the end of the first. */
    SLIST_NEXT(cur, om_next) = second;
   15a94:	60d1      	str	r1, [r2, #12]

    /* If the first chain has a packet header, calculate the length of the
     * second chain and add it to the header length.
     */
    if (OS_MBUF_IS_PKTHDR(first)) {
   15a96:	7943      	ldrb	r3, [r0, #5]
   15a98:	2b07      	cmp	r3, #7
   15a9a:	d906      	bls.n	15aaa <os_mbuf_concat+0x20>
        if (OS_MBUF_IS_PKTHDR(second)) {
   15a9c:	794b      	ldrb	r3, [r1, #5]
   15a9e:	2b07      	cmp	r3, #7
   15aa0:	d906      	bls.n	15ab0 <os_mbuf_concat+0x26>
            OS_MBUF_PKTHDR(first)->omp_len += OS_MBUF_PKTHDR(second)->omp_len;
   15aa2:	8a0b      	ldrh	r3, [r1, #16]
   15aa4:	8a02      	ldrh	r2, [r0, #16]
   15aa6:	4413      	add	r3, r2
   15aa8:	8203      	strh	r3, [r0, #16]
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
            }
        }
    }

    second->om_pkthdr_len = 0;
   15aaa:	2300      	movs	r3, #0
   15aac:	714b      	strb	r3, [r1, #5]
   15aae:	4770      	bx	lr
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
   15ab0:	460b      	mov	r3, r1
   15ab2:	2900      	cmp	r1, #0
   15ab4:	d0f9      	beq.n	15aaa <os_mbuf_concat+0x20>
{
   15ab6:	b410      	push	{r4}
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
   15ab8:	88da      	ldrh	r2, [r3, #6]
   15aba:	8a04      	ldrh	r4, [r0, #16]
   15abc:	4422      	add	r2, r4
   15abe:	8202      	strh	r2, [r0, #16]
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
   15ac0:	68db      	ldr	r3, [r3, #12]
   15ac2:	2b00      	cmp	r3, #0
   15ac4:	d1f8      	bne.n	15ab8 <os_mbuf_concat+0x2e>
    second->om_pkthdr_len = 0;
   15ac6:	2300      	movs	r3, #0
   15ac8:	714b      	strb	r3, [r1, #5]
}
   15aca:	bc10      	pop	{r4}
   15acc:	4770      	bx	lr

00015ace <os_mbuf_extend>:

void *
os_mbuf_extend(struct os_mbuf *om, uint16_t len)
{
   15ace:	b570      	push	{r4, r5, r6, lr}
   15ad0:	4606      	mov	r6, r0
    struct os_mbuf *newm;
    struct os_mbuf *last;
    void *data;

    if (len > om->om_omp->omp_databuf_len) {
   15ad2:	6880      	ldr	r0, [r0, #8]
   15ad4:	8803      	ldrh	r3, [r0, #0]
   15ad6:	428b      	cmp	r3, r1
   15ad8:	d325      	bcc.n	15b26 <os_mbuf_extend+0x58>
   15ada:	460d      	mov	r5, r1
        return NULL;
    }

    /* Scroll to last mbuf in the chain */
    last = om;
   15adc:	4633      	mov	r3, r6
    while (SLIST_NEXT(last, om_next) != NULL) {
   15ade:	461c      	mov	r4, r3
   15ae0:	68db      	ldr	r3, [r3, #12]
   15ae2:	2b00      	cmp	r3, #0
   15ae4:	d1fb      	bne.n	15ade <os_mbuf_extend+0x10>
    omp = om->om_omp;
   15ae6:	68a2      	ldr	r2, [r4, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   15ae8:	f104 0310 	add.w	r3, r4, #16
   15aec:	8812      	ldrh	r2, [r2, #0]
   15aee:	4413      	add	r3, r2
      (om->om_data + om->om_len);
   15af0:	6822      	ldr	r2, [r4, #0]
   15af2:	88e1      	ldrh	r1, [r4, #6]
   15af4:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   15af6:	1a9b      	subs	r3, r3, r2
   15af8:	b29b      	uxth	r3, r3
        last = SLIST_NEXT(last, om_next);
    }

    if (OS_MBUF_TRAILINGSPACE(last) < len) {
   15afa:	429d      	cmp	r5, r3
   15afc:	d80b      	bhi.n	15b16 <os_mbuf_extend+0x48>

        SLIST_NEXT(last, om_next) = newm;
        last = newm;
    }

    data = last->om_data + last->om_len;
   15afe:	6820      	ldr	r0, [r4, #0]
   15b00:	88e3      	ldrh	r3, [r4, #6]
   15b02:	4418      	add	r0, r3
    last->om_len += len;
   15b04:	442b      	add	r3, r5
   15b06:	80e3      	strh	r3, [r4, #6]

    if (OS_MBUF_IS_PKTHDR(om)) {
   15b08:	7973      	ldrb	r3, [r6, #5]
   15b0a:	2b07      	cmp	r3, #7
   15b0c:	d902      	bls.n	15b14 <os_mbuf_extend+0x46>
        OS_MBUF_PKTHDR(om)->omp_len += len;
   15b0e:	8a33      	ldrh	r3, [r6, #16]
   15b10:	441d      	add	r5, r3
   15b12:	8235      	strh	r5, [r6, #16]
    }

    return data;
}
   15b14:	bd70      	pop	{r4, r5, r6, pc}
        newm = os_mbuf_get(om->om_omp, 0);
   15b16:	2100      	movs	r1, #0
   15b18:	f7ff fd72 	bl	15600 <os_mbuf_get>
        if (newm == NULL) {
   15b1c:	2800      	cmp	r0, #0
   15b1e:	d0f9      	beq.n	15b14 <os_mbuf_extend+0x46>
        SLIST_NEXT(last, om_next) = newm;
   15b20:	60e0      	str	r0, [r4, #12]
        last = newm;
   15b22:	4604      	mov	r4, r0
   15b24:	e7eb      	b.n	15afe <os_mbuf_extend+0x30>
        return NULL;
   15b26:	2000      	movs	r0, #0
   15b28:	e7f4      	b.n	15b14 <os_mbuf_extend+0x46>

00015b2a <os_mbuf_pullup>:


struct os_mbuf *
os_mbuf_pullup(struct os_mbuf *om, uint16_t len)
{
   15b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15b2e:	4604      	mov	r4, r0
    struct os_mbuf *next;
    struct os_mbuf *om2;
    int count;
    int space;

    omp = om->om_omp;
   15b30:	6880      	ldr	r0, [r0, #8]
    /*
     * If first mbuf has no cluster, and has room for len bytes
     * without shifting current data, pullup into it,
     * otherwise allocate a new mbuf to prepend to the chain.
     */
    if (om->om_len >= len) {
   15b32:	88e2      	ldrh	r2, [r4, #6]
   15b34:	428a      	cmp	r2, r1
   15b36:	d27a      	bcs.n	15c2e <os_mbuf_pullup+0x104>
   15b38:	460d      	mov	r5, r1
   15b3a:	f104 0310 	add.w	r3, r4, #16
   15b3e:	8806      	ldrh	r6, [r0, #0]
   15b40:	4433      	add	r3, r6
      (om->om_data + om->om_len);
   15b42:	6821      	ldr	r1, [r4, #0]
   15b44:	4411      	add	r1, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   15b46:	1a5b      	subs	r3, r3, r1
        return (om);
    }
    if (om->om_len + OS_MBUF_TRAILINGSPACE(om) >= len &&
   15b48:	fa12 f383 	uxtah	r3, r2, r3
   15b4c:	4629      	mov	r1, r5
   15b4e:	42ab      	cmp	r3, r5
   15b50:	db12      	blt.n	15b78 <os_mbuf_pullup+0x4e>
        SLIST_NEXT(om, om_next)) {
   15b52:	68e3      	ldr	r3, [r4, #12]
    if (om->om_len + OS_MBUF_TRAILINGSPACE(om) >= len &&
   15b54:	b183      	cbz	r3, 15b78 <os_mbuf_pullup+0x4e>
        om2 = om;
        om = SLIST_NEXT(om, om_next);
        len -= om2->om_len;
   15b56:	1aad      	subs	r5, r5, r2
   15b58:	b2ad      	uxth	r5, r5
        om2 = om;
   15b5a:	4627      	mov	r7, r4
        om = SLIST_NEXT(om, om_next);
   15b5c:	461c      	mov	r4, r3
    omp = om->om_omp;
   15b5e:	68bb      	ldr	r3, [r7, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   15b60:	f107 0810 	add.w	r8, r7, #16
   15b64:	881b      	ldrh	r3, [r3, #0]
   15b66:	4498      	add	r8, r3
      (om->om_data + om->om_len);
   15b68:	683b      	ldr	r3, [r7, #0]
   15b6a:	88fa      	ldrh	r2, [r7, #6]
   15b6c:	4413      	add	r3, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   15b6e:	eba8 0803 	sub.w	r8, r8, r3
   15b72:	fa1f f888 	uxth.w	r8, r8
   15b76:	e02c      	b.n	15bd2 <os_mbuf_pullup+0xa8>
    } else {
        if (len > omp->omp_databuf_len - om->om_pkthdr_len) {
   15b78:	7963      	ldrb	r3, [r4, #5]
   15b7a:	1af6      	subs	r6, r6, r3
   15b7c:	42b1      	cmp	r1, r6
   15b7e:	dc51      	bgt.n	15c24 <os_mbuf_pullup+0xfa>
            goto bad;
        }

        om2 = os_mbuf_get(omp, 0);
   15b80:	2100      	movs	r1, #0
   15b82:	f7ff fd3d 	bl	15600 <os_mbuf_get>
        if (om2 == NULL) {
   15b86:	4607      	mov	r7, r0
   15b88:	2800      	cmp	r0, #0
   15b8a:	d04b      	beq.n	15c24 <os_mbuf_pullup+0xfa>
            goto bad;
        }

        if (OS_MBUF_IS_PKTHDR(om)) {
   15b8c:	7963      	ldrb	r3, [r4, #5]
   15b8e:	2b07      	cmp	r3, #7
   15b90:	d9e5      	bls.n	15b5e <os_mbuf_pullup+0x34>
    assert(new_buf->om_len == 0);
   15b92:	88c3      	ldrh	r3, [r0, #6]
   15b94:	b963      	cbnz	r3, 15bb0 <os_mbuf_pullup+0x86>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   15b96:	f100 0610 	add.w	r6, r0, #16
   15b9a:	7962      	ldrb	r2, [r4, #5]
   15b9c:	f104 0110 	add.w	r1, r4, #16
   15ba0:	4630      	mov	r0, r6
   15ba2:	f000 ff97 	bl	16ad4 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   15ba6:	7963      	ldrb	r3, [r4, #5]
   15ba8:	717b      	strb	r3, [r7, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   15baa:	441e      	add	r6, r3
   15bac:	603e      	str	r6, [r7, #0]
}
   15bae:	e7d6      	b.n	15b5e <os_mbuf_pullup+0x34>
    assert(new_buf->om_len == 0);
   15bb0:	f7fe fd58 	bl	14664 <hal_debugger_connected>
   15bb4:	b100      	cbz	r0, 15bb8 <os_mbuf_pullup+0x8e>
   15bb6:	be01      	bkpt	0x0001
   15bb8:	2300      	movs	r3, #0
   15bba:	461a      	mov	r2, r3
   15bbc:	4619      	mov	r1, r3
   15bbe:	4618      	mov	r0, r3
   15bc0:	f7ff f8f0 	bl	14da4 <__assert_func>
        om->om_len -= count;
        space -= count;
        if (om->om_len) {
            om->om_data += count;
        } else {
            next = SLIST_NEXT(om, om_next);
   15bc4:	68e6      	ldr	r6, [r4, #12]
            os_mbuf_free(om);
   15bc6:	4620      	mov	r0, r4
   15bc8:	f7ff fd4a 	bl	15660 <os_mbuf_free>
            om = next;
   15bcc:	4634      	mov	r4, r6
        }
    } while (len > 0 && om);
   15bce:	b30d      	cbz	r5, 15c14 <os_mbuf_pullup+0xea>
   15bd0:	b304      	cbz	r4, 15c14 <os_mbuf_pullup+0xea>
        count = min(min(len, space), om->om_len);
   15bd2:	88e6      	ldrh	r6, [r4, #6]
   15bd4:	462b      	mov	r3, r5
   15bd6:	4545      	cmp	r5, r8
   15bd8:	bfa8      	it	ge
   15bda:	4643      	movge	r3, r8
   15bdc:	429e      	cmp	r6, r3
   15bde:	bfa8      	it	ge
   15be0:	461e      	movge	r6, r3
        memcpy(om2->om_data + om2->om_len, om->om_data, count);
   15be2:	6838      	ldr	r0, [r7, #0]
   15be4:	88fb      	ldrh	r3, [r7, #6]
   15be6:	4632      	mov	r2, r6
   15be8:	6821      	ldr	r1, [r4, #0]
   15bea:	4418      	add	r0, r3
   15bec:	f000 ff72 	bl	16ad4 <memcpy>
        len -= count;
   15bf0:	b2b2      	uxth	r2, r6
   15bf2:	1aad      	subs	r5, r5, r2
   15bf4:	b2ad      	uxth	r5, r5
        om2->om_len += count;
   15bf6:	88fb      	ldrh	r3, [r7, #6]
   15bf8:	4413      	add	r3, r2
   15bfa:	80fb      	strh	r3, [r7, #6]
        om->om_len -= count;
   15bfc:	88e3      	ldrh	r3, [r4, #6]
   15bfe:	1a9b      	subs	r3, r3, r2
   15c00:	b29b      	uxth	r3, r3
   15c02:	80e3      	strh	r3, [r4, #6]
        space -= count;
   15c04:	eba8 0806 	sub.w	r8, r8, r6
        if (om->om_len) {
   15c08:	2b00      	cmp	r3, #0
   15c0a:	d0db      	beq.n	15bc4 <os_mbuf_pullup+0x9a>
            om->om_data += count;
   15c0c:	6823      	ldr	r3, [r4, #0]
   15c0e:	441e      	add	r6, r3
   15c10:	6026      	str	r6, [r4, #0]
   15c12:	e7dc      	b.n	15bce <os_mbuf_pullup+0xa4>
    if (len > 0) {
   15c14:	b91d      	cbnz	r5, 15c1e <os_mbuf_pullup+0xf4>
        os_mbuf_free(om2);
        goto bad;
    }
    SLIST_NEXT(om2, om_next) = om;
   15c16:	60fc      	str	r4, [r7, #12]
    return (om2);
bad:
    os_mbuf_free_chain(om);
    return (NULL);
}
   15c18:	4638      	mov	r0, r7
   15c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        os_mbuf_free(om2);
   15c1e:	4638      	mov	r0, r7
   15c20:	f7ff fd1e 	bl	15660 <os_mbuf_free>
    os_mbuf_free_chain(om);
   15c24:	4620      	mov	r0, r4
   15c26:	f7ff fd25 	bl	15674 <os_mbuf_free_chain>
    return (NULL);
   15c2a:	2700      	movs	r7, #0
   15c2c:	e7f4      	b.n	15c18 <os_mbuf_pullup+0xee>
        return (om);
   15c2e:	4627      	mov	r7, r4
   15c30:	e7f2      	b.n	15c18 <os_mbuf_pullup+0xee>

00015c32 <os_mbuf_prepend_pullup>:
{
   15c32:	b510      	push	{r4, lr}
   15c34:	460c      	mov	r4, r1
    om = os_mbuf_prepend(om, len);
   15c36:	f7ff fe82 	bl	1593e <os_mbuf_prepend>
    if (om == NULL) {
   15c3a:	b110      	cbz	r0, 15c42 <os_mbuf_prepend_pullup+0x10>
    om = os_mbuf_pullup(om, len);
   15c3c:	4621      	mov	r1, r4
   15c3e:	f7ff ff74 	bl	15b2a <os_mbuf_pullup>
}
   15c42:	bd10      	pop	{r4, pc}

00015c44 <os_mbuf_trim_front>:

struct os_mbuf *
os_mbuf_trim_front(struct os_mbuf *om)
{
   15c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15c46:	4606      	mov	r6, r0
    struct os_mbuf *next;
    struct os_mbuf *cur;

    /* Abort early if there is nothing to trim. */
    if (om->om_len != 0) {
   15c48:	88c7      	ldrh	r7, [r0, #6]
   15c4a:	b9cf      	cbnz	r7, 15c80 <os_mbuf_trim_front+0x3c>
    }

    /* Starting with the second mbuf in the chain, continue removing and
     * freeing mbufs until an non-empty one is encountered.
     */
    cur = SLIST_NEXT(om, om_next);
   15c4c:	68c4      	ldr	r4, [r0, #12]
    while (cur != NULL && cur->om_len == 0) {
   15c4e:	b144      	cbz	r4, 15c62 <os_mbuf_trim_front+0x1e>
   15c50:	88e3      	ldrh	r3, [r4, #6]
   15c52:	b933      	cbnz	r3, 15c62 <os_mbuf_trim_front+0x1e>
        next = SLIST_NEXT(cur, om_next);
   15c54:	68e5      	ldr	r5, [r4, #12]

        SLIST_NEXT(om, om_next) = next;
   15c56:	60f5      	str	r5, [r6, #12]
        os_mbuf_free(cur);
   15c58:	4620      	mov	r0, r4
   15c5a:	f7ff fd01 	bl	15660 <os_mbuf_free>

        cur = next;
   15c5e:	462c      	mov	r4, r5
   15c60:	e7f5      	b.n	15c4e <os_mbuf_trim_front+0xa>
    }

    if (cur == NULL) {
   15c62:	b16c      	cbz	r4, 15c80 <os_mbuf_trim_front+0x3c>
    if (OS_MBUF_IS_PKTHDR(om)) {
   15c64:	7963      	ldrb	r3, [r4, #5]
   15c66:	2b07      	cmp	r3, #7
   15c68:	d900      	bls.n	15c6c <os_mbuf_trim_front+0x28>
        startoff = om->om_pkthdr_len;
   15c6a:	b29f      	uxth	r7, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   15c6c:	4620      	mov	r0, r4
   15c6e:	f850 3b10 	ldr.w	r3, [r0], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   15c72:	4407      	add	r7, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   15c74:	1bdf      	subs	r7, r3, r7
   15c76:	b2bf      	uxth	r7, r7
    }

    /* Try to remove the first mbuf in the chain.  If this buffer contains a
     * packet header, make sure the second buffer can accommodate it.
     */
    if (OS_MBUF_LEADINGSPACE(cur) >= om->om_pkthdr_len) {
   15c78:	7972      	ldrb	r2, [r6, #5]
   15c7a:	b293      	uxth	r3, r2
   15c7c:	42bb      	cmp	r3, r7
   15c7e:	d901      	bls.n	15c84 <os_mbuf_trim_front+0x40>
        os_mbuf_free(om);
        om = cur;
    }

    return om;
}
   15c80:	4630      	mov	r0, r6
   15c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        cur->om_pkthdr_len = om->om_pkthdr_len;
   15c84:	7162      	strb	r2, [r4, #5]
        memcpy(OS_MBUF_PKTHDR(cur), OS_MBUF_PKTHDR(om), om->om_pkthdr_len);
   15c86:	f106 0110 	add.w	r1, r6, #16
   15c8a:	f000 ff23 	bl	16ad4 <memcpy>
        os_mbuf_free(om);
   15c8e:	4630      	mov	r0, r6
   15c90:	f7ff fce6 	bl	15660 <os_mbuf_free>
        om = cur;
   15c94:	4626      	mov	r6, r4
   15c96:	e7f3      	b.n	15c80 <os_mbuf_trim_front+0x3c>

00015c98 <os_mbuf_pack_chains>:
    return 0;
}

struct os_mbuf *
os_mbuf_pack_chains(struct os_mbuf *m1, struct os_mbuf *m2)
{
   15c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t *dptr;
    struct os_mbuf *cur;
    struct os_mbuf *next;

    /* If m1 is NULL, return NULL */
    if (m1 == NULL) {
   15c9c:	4681      	mov	r9, r0
   15c9e:	2800      	cmp	r0, #0
   15ca0:	d04e      	beq.n	15d40 <os_mbuf_pack_chains+0xa8>

    /*
     * Concatenate the two chains to start. This will discard packet header in
     * m2 and adjust packet length in m1 if m1 has a packet header.
     */
    if (m2 != NULL) {
   15ca2:	b109      	cbz	r1, 15ca8 <os_mbuf_pack_chains+0x10>
        os_mbuf_concat(m1, m2);
   15ca4:	f7ff fef1 	bl	15a8a <os_mbuf_concat>
{
   15ca8:	464d      	mov	r5, r9
   15caa:	e006      	b.n	15cba <os_mbuf_pack_chains+0x22>
    startoff = 0;
   15cac:	2300      	movs	r3, #0
   15cae:	e008      	b.n	15cc2 <os_mbuf_pack_chains+0x2a>

    cur = m1;
    while (1) {
        /* If there is leading space in the mbuf, move data up */
        if (OS_MBUF_LEADINGSPACE(cur)) {
            dptr = &cur->om_databuf[0];
   15cb0:	4634      	mov	r4, r6
   15cb2:	e010      	b.n	15cd6 <os_mbuf_pack_chains+0x3e>
                }
            }
        }

        /* If no mbufs are left, we are done */
        if (next == NULL) {
   15cb4:	2c00      	cmp	r4, #0
   15cb6:	d043      	beq.n	15d40 <os_mbuf_pack_chains+0xa8>
            break;
        }

        /* Move cur to next as we filled up current */
        cur = next;
   15cb8:	4625      	mov	r5, r4
    if (OS_MBUF_IS_PKTHDR(om)) {
   15cba:	796a      	ldrb	r2, [r5, #5]
   15cbc:	2a07      	cmp	r2, #7
   15cbe:	d9f5      	bls.n	15cac <os_mbuf_pack_chains+0x14>
        startoff = om->om_pkthdr_len;
   15cc0:	b293      	uxth	r3, r2
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   15cc2:	462e      	mov	r6, r5
   15cc4:	f856 1b10 	ldr.w	r1, [r6], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   15cc8:	4433      	add	r3, r6
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   15cca:	1acb      	subs	r3, r1, r3
   15ccc:	b29b      	uxth	r3, r3
        if (OS_MBUF_LEADINGSPACE(cur)) {
   15cce:	b13b      	cbz	r3, 15ce0 <os_mbuf_pack_chains+0x48>
            if (OS_MBUF_IS_PKTHDR(cur)) {
   15cd0:	2a07      	cmp	r2, #7
   15cd2:	d9ed      	bls.n	15cb0 <os_mbuf_pack_chains+0x18>
                dptr += cur->om_pkthdr_len;
   15cd4:	18b4      	adds	r4, r6, r2
            memmove(dptr, cur->om_data, cur->om_len);
   15cd6:	88ea      	ldrh	r2, [r5, #6]
   15cd8:	4620      	mov	r0, r4
   15cda:	f000 ff08 	bl	16aee <memmove>
            cur->om_data = dptr;
   15cde:	602c      	str	r4, [r5, #0]
        dptr = cur->om_data + cur->om_len;
   15ce0:	682b      	ldr	r3, [r5, #0]
   15ce2:	f8b5 8006 	ldrh.w	r8, [r5, #6]
   15ce6:	4498      	add	r8, r3
        next = SLIST_NEXT(cur, om_next);
   15ce8:	68ec      	ldr	r4, [r5, #12]
    omp = om->om_omp;
   15cea:	68ab      	ldr	r3, [r5, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   15cec:	881f      	ldrh	r7, [r3, #0]
   15cee:	4437      	add	r7, r6
   15cf0:	eba7 0708 	sub.w	r7, r7, r8
   15cf4:	b2bf      	uxth	r7, r7
        while (rem_len && next) {
   15cf6:	2f00      	cmp	r7, #0
   15cf8:	d0dc      	beq.n	15cb4 <os_mbuf_pack_chains+0x1c>
   15cfa:	2c00      	cmp	r4, #0
   15cfc:	d0da      	beq.n	15cb4 <os_mbuf_pack_chains+0x1c>
            copylen = min(rem_len, next->om_len);
   15cfe:	88e6      	ldrh	r6, [r4, #6]
   15d00:	42be      	cmp	r6, r7
   15d02:	bf28      	it	cs
   15d04:	463e      	movcs	r6, r7
            memcpy(dptr, next->om_data, copylen);
   15d06:	4632      	mov	r2, r6
   15d08:	6821      	ldr	r1, [r4, #0]
   15d0a:	4640      	mov	r0, r8
   15d0c:	f000 fee2 	bl	16ad4 <memcpy>
            cur->om_len += copylen;
   15d10:	88eb      	ldrh	r3, [r5, #6]
   15d12:	4433      	add	r3, r6
   15d14:	80eb      	strh	r3, [r5, #6]
            dptr += copylen;
   15d16:	44b0      	add	r8, r6
            rem_len -= copylen;
   15d18:	1bbf      	subs	r7, r7, r6
   15d1a:	b2bf      	uxth	r7, r7
            next->om_data += copylen;
   15d1c:	6823      	ldr	r3, [r4, #0]
   15d1e:	4433      	add	r3, r6
   15d20:	6023      	str	r3, [r4, #0]
            next->om_len -= copylen;
   15d22:	88e3      	ldrh	r3, [r4, #6]
   15d24:	1b9e      	subs	r6, r3, r6
   15d26:	80e6      	strh	r6, [r4, #6]
            while (next->om_len == 0) {
   15d28:	88e3      	ldrh	r3, [r4, #6]
   15d2a:	2b00      	cmp	r3, #0
   15d2c:	d1e3      	bne.n	15cf6 <os_mbuf_pack_chains+0x5e>
                SLIST_NEXT(cur, om_next) = SLIST_NEXT(next, om_next);
   15d2e:	68e3      	ldr	r3, [r4, #12]
   15d30:	60eb      	str	r3, [r5, #12]
                os_mbuf_free(next);
   15d32:	4620      	mov	r0, r4
   15d34:	f7ff fc94 	bl	15660 <os_mbuf_free>
                next = SLIST_NEXT(cur, om_next);
   15d38:	68ec      	ldr	r4, [r5, #12]
                if (next == NULL) {
   15d3a:	2c00      	cmp	r4, #0
   15d3c:	d1f4      	bne.n	15d28 <os_mbuf_pack_chains+0x90>
   15d3e:	e7da      	b.n	15cf6 <os_mbuf_pack_chains+0x5e>
    }

    return m1;
}
   15d40:	4648      	mov	r0, r9
   15d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

00015d48 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   15d48:	2800      	cmp	r0, #0
   15d4a:	d031      	beq.n	15db0 <os_mempool_init_internal+0x68>
{
   15d4c:	b430      	push	{r4, r5}
   15d4e:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   15d50:	2a00      	cmp	r2, #0
   15d52:	d02f      	beq.n	15db4 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   15d54:	b1bb      	cbz	r3, 15d86 <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   15d56:	b113      	cbz	r3, 15d5e <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   15d58:	f013 0f03 	tst.w	r3, #3
   15d5c:	d12c      	bne.n	15db8 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   15d5e:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   15d60:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   15d62:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   15d64:	f89d 000c 	ldrb.w	r0, [sp, #12]
   15d68:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   15d6a:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   15d6c:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   15d6e:	9802      	ldr	r0, [sp, #8]
   15d70:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   15d72:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   15d74:	b199      	cbz	r1, 15d9e <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   15d76:	f012 0f03 	tst.w	r2, #3
   15d7a:	d002      	beq.n	15d82 <os_mempool_init_internal+0x3a>
   15d7c:	f022 0203 	bic.w	r2, r2, #3
   15d80:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   15d82:	2001      	movs	r0, #1
   15d84:	e007      	b.n	15d96 <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   15d86:	2900      	cmp	r1, #0
   15d88:	d0e5      	beq.n	15d56 <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   15d8a:	2003      	movs	r0, #3
   15d8c:	e00e      	b.n	15dac <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   15d8e:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   15d90:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   15d92:	3001      	adds	r0, #1
            block_addr += true_block_size;
   15d94:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   15d96:	4281      	cmp	r1, r0
   15d98:	dcf9      	bgt.n	15d8e <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   15d9a:	2200      	movs	r2, #0
   15d9c:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   15d9e:	2000      	movs	r0, #0
   15da0:	6120      	str	r0, [r4, #16]
   15da2:	4b06      	ldr	r3, [pc, #24]	; (15dbc <os_mempool_init_internal+0x74>)
   15da4:	685a      	ldr	r2, [r3, #4]
   15da6:	6014      	str	r4, [r2, #0]
   15da8:	3410      	adds	r4, #16
   15daa:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   15dac:	bc30      	pop	{r4, r5}
   15dae:	4770      	bx	lr
        return OS_INVALID_PARM;
   15db0:	2003      	movs	r0, #3
}
   15db2:	4770      	bx	lr
        return OS_INVALID_PARM;
   15db4:	2003      	movs	r0, #3
   15db6:	e7f9      	b.n	15dac <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   15db8:	2004      	movs	r0, #4
   15dba:	e7f7      	b.n	15dac <os_mempool_init_internal+0x64>
   15dbc:	1000252c 	.word	0x1000252c

00015dc0 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   15dc0:	b510      	push	{r4, lr}
   15dc2:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   15dc4:	2400      	movs	r4, #0
   15dc6:	9401      	str	r4, [sp, #4]
   15dc8:	9c04      	ldr	r4, [sp, #16]
   15dca:	9400      	str	r4, [sp, #0]
   15dcc:	f7ff ffbc 	bl	15d48 <os_mempool_init_internal>
}
   15dd0:	b002      	add	sp, #8
   15dd2:	bd10      	pop	{r4, pc}

00015dd4 <os_mempool_ext_init>:

os_error_t
os_mempool_ext_init(struct os_mempool_ext *mpe, uint16_t blocks,
                    uint32_t block_size, void *membuf, char *name)
{
   15dd4:	b530      	push	{r4, r5, lr}
   15dd6:	b083      	sub	sp, #12
   15dd8:	4604      	mov	r4, r0
    int rc;

    rc = os_mempool_init_internal(&mpe->mpe_mp, blocks, block_size, membuf,
   15dda:	2501      	movs	r5, #1
   15ddc:	9501      	str	r5, [sp, #4]
   15dde:	9d06      	ldr	r5, [sp, #24]
   15de0:	9500      	str	r5, [sp, #0]
   15de2:	f7ff ffb1 	bl	15d48 <os_mempool_init_internal>
                                  name, OS_MEMPOOL_F_EXT);
    if (rc != 0) {
   15de6:	b908      	cbnz	r0, 15dec <os_mempool_ext_init+0x18>
        return rc;
    }

    mpe->mpe_put_cb = NULL;
   15de8:	61e0      	str	r0, [r4, #28]
    mpe->mpe_put_arg = NULL;
   15dea:	6220      	str	r0, [r4, #32]

    return 0;
}
   15dec:	b003      	add	sp, #12
   15dee:	bd30      	pop	{r4, r5, pc}

00015df0 <os_memblock_from>:
    return true;
}

int
os_memblock_from(const struct os_mempool *mp, const void *block_addr)
{
   15df0:	b410      	push	{r4}

    static_assert(sizeof block_addr == sizeof baddr32,
                  "Pointer to void must be 32-bits.");

    baddr32 = (uint32_t)block_addr;
    true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   15df2:	6803      	ldr	r3, [r0, #0]
   15df4:	f013 0f03 	tst.w	r3, #3
   15df8:	d002      	beq.n	15e00 <os_memblock_from+0x10>
   15dfa:	f023 0303 	bic.w	r3, r3, #3
   15dfe:	3304      	adds	r3, #4
    end = mp->mp_membuf_addr + (mp->mp_num_blocks * true_block_size);
   15e00:	68c4      	ldr	r4, [r0, #12]
   15e02:	8882      	ldrh	r2, [r0, #4]
   15e04:	fb03 4202 	mla	r2, r3, r2, r4

    /* Check that the block is in the memory buffer range. */
    if ((baddr32 < mp->mp_membuf_addr) || (baddr32 >= end)) {
   15e08:	428c      	cmp	r4, r1
   15e0a:	d809      	bhi.n	15e20 <os_memblock_from+0x30>
   15e0c:	4291      	cmp	r1, r2
   15e0e:	d20a      	bcs.n	15e26 <os_memblock_from+0x36>
        return 0;
    }

    /* All freed blocks should be on true block size boundaries! */
    if (((baddr32 - mp->mp_membuf_addr) % true_block_size) != 0) {
   15e10:	1b09      	subs	r1, r1, r4
   15e12:	fbb1 f2f3 	udiv	r2, r1, r3
   15e16:	fb03 1112 	mls	r1, r3, r2, r1
   15e1a:	b931      	cbnz	r1, 15e2a <os_memblock_from+0x3a>
        return 0;
    }

    return 1;
   15e1c:	2001      	movs	r0, #1
   15e1e:	e000      	b.n	15e22 <os_memblock_from+0x32>
        return 0;
   15e20:	2000      	movs	r0, #0
}
   15e22:	bc10      	pop	{r4}
   15e24:	4770      	bx	lr
        return 0;
   15e26:	2000      	movs	r0, #0
   15e28:	e7fb      	b.n	15e22 <os_memblock_from+0x32>
        return 0;
   15e2a:	2000      	movs	r0, #0
   15e2c:	e7f9      	b.n	15e22 <os_memblock_from+0x32>

00015e2e <os_memblock_get>:

void *
os_memblock_get(struct os_mempool *mp)
{
   15e2e:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   15e30:	4604      	mov	r4, r0
   15e32:	b198      	cbz	r0, 15e5c <os_memblock_get+0x2e>
        OS_ENTER_CRITICAL(sr);
   15e34:	f000 fc7a 	bl	1672c <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   15e38:	88e3      	ldrh	r3, [r4, #6]
   15e3a:	b153      	cbz	r3, 15e52 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   15e3c:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   15e3e:	682a      	ldr	r2, [r5, #0]
   15e40:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   15e42:	3b01      	subs	r3, #1
   15e44:	b29b      	uxth	r3, r3
   15e46:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   15e48:	8922      	ldrh	r2, [r4, #8]
   15e4a:	4293      	cmp	r3, r2
   15e4c:	d202      	bcs.n	15e54 <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   15e4e:	8123      	strh	r3, [r4, #8]
   15e50:	e000      	b.n	15e54 <os_memblock_get+0x26>
    block = NULL;
   15e52:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   15e54:	f000 fc70 	bl	16738 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   15e58:	4628      	mov	r0, r5
   15e5a:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   15e5c:	4605      	mov	r5, r0
    return (void *)block;
   15e5e:	e7fb      	b.n	15e58 <os_memblock_get+0x2a>

00015e60 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
   15e60:	b538      	push	{r3, r4, r5, lr}
   15e62:	4604      	mov	r4, r0
   15e64:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
   15e66:	f000 fc61 	bl	1672c <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   15e6a:	6963      	ldr	r3, [r4, #20]
   15e6c:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   15e6e:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   15e70:	88e3      	ldrh	r3, [r4, #6]
   15e72:	3301      	adds	r3, #1
   15e74:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
   15e76:	f000 fc5f 	bl	16738 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
   15e7a:	2000      	movs	r0, #0
   15e7c:	bd38      	pop	{r3, r4, r5, pc}

00015e7e <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   15e7e:	b178      	cbz	r0, 15ea0 <os_memblock_put+0x22>
   15e80:	4603      	mov	r3, r0
   15e82:	b179      	cbz	r1, 15ea4 <os_memblock_put+0x26>
{
   15e84:	b510      	push	{r4, lr}
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
   15e86:	7a82      	ldrb	r2, [r0, #10]
   15e88:	f012 0f01 	tst.w	r2, #1
   15e8c:	d004      	beq.n	15e98 <os_memblock_put+0x1a>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   15e8e:	69c4      	ldr	r4, [r0, #28]
   15e90:	b114      	cbz	r4, 15e98 <os_memblock_put+0x1a>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   15e92:	6a02      	ldr	r2, [r0, #32]
   15e94:	47a0      	blx	r4
            goto done;
   15e96:	e002      	b.n	15e9e <os_memblock_put+0x20>
        }
    }

    /* No callback; free the block. */
    ret = os_memblock_put_from_cb(mp, block_addr);
   15e98:	4618      	mov	r0, r3
   15e9a:	f7ff ffe1 	bl	15e60 <os_memblock_put_from_cb>

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
   15e9e:	bd10      	pop	{r4, pc}
        ret = OS_INVALID_PARM;
   15ea0:	2003      	movs	r0, #3
   15ea2:	4770      	bx	lr
   15ea4:	2003      	movs	r0, #3
}
   15ea6:	4770      	bx	lr

00015ea8 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   15ea8:	4b02      	ldr	r3, [pc, #8]	; (15eb4 <os_mempool_module_init+0xc>)
   15eaa:	2200      	movs	r2, #0
   15eac:	601a      	str	r2, [r3, #0]
   15eae:	605b      	str	r3, [r3, #4]
}
   15eb0:	4770      	bx	lr
   15eb2:	bf00      	nop
   15eb4:	1000252c 	.word	0x1000252c

00015eb8 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   15eb8:	4b02      	ldr	r3, [pc, #8]	; (15ec4 <os_msys_find_biggest_pool+0xc>)
   15eba:	6818      	ldr	r0, [r3, #0]
   15ebc:	b108      	cbz	r0, 15ec2 <os_msys_find_biggest_pool+0xa>
   15ebe:	6858      	ldr	r0, [r3, #4]
   15ec0:	3808      	subs	r0, #8
}
   15ec2:	4770      	bx	lr
   15ec4:	10000170 	.word	0x10000170

00015ec8 <os_msys_find_pool>:

static struct os_mbuf_pool *
os_msys_find_pool(uint16_t dsize)
{
   15ec8:	4602      	mov	r2, r0
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   15eca:	4b09      	ldr	r3, [pc, #36]	; (15ef0 <os_msys_find_pool+0x28>)
   15ecc:	6819      	ldr	r1, [r3, #0]
   15ece:	4608      	mov	r0, r1
   15ed0:	b120      	cbz	r0, 15edc <os_msys_find_pool+0x14>
        if (dsize <= pool->omp_databuf_len) {
   15ed2:	8803      	ldrh	r3, [r0, #0]
   15ed4:	4293      	cmp	r3, r2
   15ed6:	d201      	bcs.n	15edc <os_msys_find_pool+0x14>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   15ed8:	6880      	ldr	r0, [r0, #8]
   15eda:	e7f9      	b.n	15ed0 <os_msys_find_pool+0x8>
            break;
        }
    }

    if (!pool) {
   15edc:	b100      	cbz	r0, 15ee0 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
   15ede:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   15ee0:	b119      	cbz	r1, 15eea <os_msys_find_pool+0x22>
   15ee2:	4b03      	ldr	r3, [pc, #12]	; (15ef0 <os_msys_find_pool+0x28>)
   15ee4:	6858      	ldr	r0, [r3, #4]
   15ee6:	3808      	subs	r0, #8
   15ee8:	4770      	bx	lr
   15eea:	4608      	mov	r0, r1
    return (pool);
   15eec:	e7f7      	b.n	15ede <os_msys_find_pool+0x16>
   15eee:	bf00      	nop
   15ef0:	10000170 	.word	0x10000170

00015ef4 <os_msys_register>:
{
   15ef4:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   15ef6:	4b11      	ldr	r3, [pc, #68]	; (15f3c <os_msys_register+0x48>)
   15ef8:	681d      	ldr	r5, [r3, #0]
   15efa:	462b      	mov	r3, r5
    prev = NULL;
   15efc:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   15efe:	b133      	cbz	r3, 15f0e <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   15f00:	8801      	ldrh	r1, [r0, #0]
   15f02:	881a      	ldrh	r2, [r3, #0]
   15f04:	4291      	cmp	r1, r2
   15f06:	d302      	bcc.n	15f0e <os_msys_register+0x1a>
        prev = pool;
   15f08:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   15f0a:	689b      	ldr	r3, [r3, #8]
   15f0c:	e7f7      	b.n	15efe <os_msys_register+0xa>
    if (prev) {
   15f0e:	b15c      	cbz	r4, 15f28 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   15f10:	68a3      	ldr	r3, [r4, #8]
   15f12:	6083      	str	r3, [r0, #8]
   15f14:	b11b      	cbz	r3, 15f1e <os_msys_register+0x2a>
   15f16:	60a0      	str	r0, [r4, #8]
}
   15f18:	2000      	movs	r0, #0
   15f1a:	bc30      	pop	{r4, r5}
   15f1c:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   15f1e:	f100 0308 	add.w	r3, r0, #8
   15f22:	4a06      	ldr	r2, [pc, #24]	; (15f3c <os_msys_register+0x48>)
   15f24:	6053      	str	r3, [r2, #4]
   15f26:	e7f6      	b.n	15f16 <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   15f28:	6085      	str	r5, [r0, #8]
   15f2a:	b115      	cbz	r5, 15f32 <os_msys_register+0x3e>
   15f2c:	4b03      	ldr	r3, [pc, #12]	; (15f3c <os_msys_register+0x48>)
   15f2e:	6018      	str	r0, [r3, #0]
   15f30:	e7f2      	b.n	15f18 <os_msys_register+0x24>
   15f32:	f100 0308 	add.w	r3, r0, #8
   15f36:	4a01      	ldr	r2, [pc, #4]	; (15f3c <os_msys_register+0x48>)
   15f38:	6053      	str	r3, [r2, #4]
   15f3a:	e7f7      	b.n	15f2c <os_msys_register+0x38>
   15f3c:	10000170 	.word	0x10000170

00015f40 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   15f40:	b530      	push	{r4, r5, lr}
   15f42:	b083      	sub	sp, #12
   15f44:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   15f46:	9d07      	ldr	r5, [sp, #28]
   15f48:	9501      	str	r5, [sp, #4]
   15f4a:	9d06      	ldr	r5, [sp, #24]
   15f4c:	9500      	str	r5, [sp, #0]
   15f4e:	f004 f99d 	bl	1a28c <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   15f52:	b928      	cbnz	r0, 15f60 <os_msys_init_once+0x20>

    rc = os_msys_register(mbuf_pool);
   15f54:	4620      	mov	r0, r4
   15f56:	f7ff ffcd 	bl	15ef4 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   15f5a:	b970      	cbnz	r0, 15f7a <os_msys_init_once+0x3a>
}
   15f5c:	b003      	add	sp, #12
   15f5e:	bd30      	pop	{r4, r5, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
   15f60:	f7fe fb80 	bl	14664 <hal_debugger_connected>
   15f64:	b100      	cbz	r0, 15f68 <os_msys_init_once+0x28>
   15f66:	be01      	bkpt	0x0001
   15f68:	2000      	movs	r0, #0
   15f6a:	9000      	str	r0, [sp, #0]
   15f6c:	4b09      	ldr	r3, [pc, #36]	; (15f94 <os_msys_init_once+0x54>)
   15f6e:	681d      	ldr	r5, [r3, #0]
   15f70:	4603      	mov	r3, r0
   15f72:	4602      	mov	r2, r0
   15f74:	4601      	mov	r1, r0
   15f76:	47a8      	blx	r5
   15f78:	e7ec      	b.n	15f54 <os_msys_init_once+0x14>
    SYSINIT_PANIC_ASSERT(rc == 0);
   15f7a:	f7fe fb73 	bl	14664 <hal_debugger_connected>
   15f7e:	b100      	cbz	r0, 15f82 <os_msys_init_once+0x42>
   15f80:	be01      	bkpt	0x0001
   15f82:	2000      	movs	r0, #0
   15f84:	9000      	str	r0, [sp, #0]
   15f86:	4b03      	ldr	r3, [pc, #12]	; (15f94 <os_msys_init_once+0x54>)
   15f88:	681c      	ldr	r4, [r3, #0]
   15f8a:	4603      	mov	r3, r0
   15f8c:	4602      	mov	r2, r0
   15f8e:	4601      	mov	r1, r0
   15f90:	47a0      	blx	r4
}
   15f92:	e7e3      	b.n	15f5c <os_msys_init_once+0x1c>
   15f94:	1000028c 	.word	0x1000028c

00015f98 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   15f98:	4b02      	ldr	r3, [pc, #8]	; (15fa4 <os_msys_reset+0xc>)
   15f9a:	2200      	movs	r2, #0
   15f9c:	601a      	str	r2, [r3, #0]
   15f9e:	605b      	str	r3, [r3, #4]
}
   15fa0:	4770      	bx	lr
   15fa2:	bf00      	nop
   15fa4:	10000170 	.word	0x10000170

00015fa8 <os_msys_get_pkthdr>:
{
   15fa8:	b510      	push	{r4, lr}
   15faa:	460c      	mov	r4, r1
    if (dsize == 0) {
   15fac:	b930      	cbnz	r0, 15fbc <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
   15fae:	f7ff ff83 	bl	15eb8 <os_msys_find_biggest_pool>
    if (!pool) {
   15fb2:	b110      	cbz	r0, 15fba <os_msys_get_pkthdr+0x12>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
   15fb4:	b2e1      	uxtb	r1, r4
   15fb6:	f7ff fb3a 	bl	1562e <os_mbuf_get_pkthdr>
}
   15fba:	bd10      	pop	{r4, pc}
   15fbc:	f101 0308 	add.w	r3, r1, #8
   15fc0:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
   15fc2:	4403      	add	r3, r0
   15fc4:	b298      	uxth	r0, r3
   15fc6:	f7ff ff7f 	bl	15ec8 <os_msys_find_pool>
   15fca:	e7f2      	b.n	15fb2 <os_msys_get_pkthdr+0xa>

00015fcc <os_msys_init>:

void
os_msys_init(void)
{
   15fcc:	b500      	push	{lr}
   15fce:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   15fd0:	f7ff ffe2 	bl	15f98 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   15fd4:	4b06      	ldr	r3, [pc, #24]	; (15ff0 <os_msys_init+0x24>)
   15fd6:	9301      	str	r3, [sp, #4]
   15fd8:	2370      	movs	r3, #112	; 0x70
   15fda:	9300      	str	r3, [sp, #0]
   15fdc:	2316      	movs	r3, #22
   15fde:	4a05      	ldr	r2, [pc, #20]	; (15ff4 <os_msys_init+0x28>)
   15fe0:	4905      	ldr	r1, [pc, #20]	; (15ff8 <os_msys_init+0x2c>)
   15fe2:	4806      	ldr	r0, [pc, #24]	; (15ffc <os_msys_init+0x30>)
   15fe4:	f7ff ffac 	bl	15f40 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   15fe8:	b003      	add	sp, #12
   15fea:	f85d fb04 	ldr.w	pc, [sp], #4
   15fee:	bf00      	nop
   15ff0:	00030680 	.word	0x00030680
   15ff4:	10002ed4 	.word	0x10002ed4
   15ff8:	10002ee0 	.word	0x10002ee0
   15ffc:	10002534 	.word	0x10002534

00016000 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   16000:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   16002:	4b05      	ldr	r3, [pc, #20]	; (16018 <os_sanity_check_list_lock+0x18>)
   16004:	6818      	ldr	r0, [r3, #0]
   16006:	b900      	cbnz	r0, 1600a <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   16008:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   1600a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1600e:	4803      	ldr	r0, [pc, #12]	; (1601c <os_sanity_check_list_lock+0x1c>)
   16010:	f000 fcc4 	bl	1699c <os_mutex_pend>
    if (rc != OS_OK) {
   16014:	e7f8      	b.n	16008 <os_sanity_check_list_lock+0x8>
   16016:	bf00      	nop
   16018:	10002508 	.word	0x10002508
   1601c:	10002f00 	.word	0x10002f00

00016020 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   16020:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   16022:	4b04      	ldr	r3, [pc, #16]	; (16034 <os_sanity_check_list_unlock+0x14>)
   16024:	6818      	ldr	r0, [r3, #0]
   16026:	b900      	cbnz	r0, 1602a <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   16028:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   1602a:	4803      	ldr	r0, [pc, #12]	; (16038 <os_sanity_check_list_unlock+0x18>)
   1602c:	f000 fc56 	bl	168dc <os_mutex_release>
    if (rc != 0) {
   16030:	e7fa      	b.n	16028 <os_sanity_check_list_unlock+0x8>
   16032:	bf00      	nop
   16034:	10002508 	.word	0x10002508
   16038:	10002f00 	.word	0x10002f00

0001603c <os_sanity_check_init>:
{
   1603c:	4603      	mov	r3, r0
    memset(sc, 0, sizeof(*sc));
   1603e:	2000      	movs	r0, #0
   16040:	6018      	str	r0, [r3, #0]
   16042:	6058      	str	r0, [r3, #4]
   16044:	6098      	str	r0, [r3, #8]
   16046:	60d8      	str	r0, [r3, #12]
   16048:	6118      	str	r0, [r3, #16]
}
   1604a:	4770      	bx	lr

0001604c <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   1604c:	b510      	push	{r4, lr}
   1604e:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   16050:	f7ff ffd6 	bl	16000 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   16054:	b100      	cbz	r0, 16058 <os_sanity_check_register+0xc>
    }

    return (0);
err:
    return (rc);
}
   16056:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   16058:	4b03      	ldr	r3, [pc, #12]	; (16068 <os_sanity_check_register+0x1c>)
   1605a:	681a      	ldr	r2, [r3, #0]
   1605c:	6122      	str	r2, [r4, #16]
   1605e:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   16060:	f7ff ffde 	bl	16020 <os_sanity_check_list_unlock>
    if (rc != OS_OK) {
   16064:	e7f7      	b.n	16056 <os_sanity_check_register+0xa>
   16066:	bf00      	nop
   16068:	10002efc 	.word	0x10002efc

0001606c <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   1606c:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   1606e:	f7ff ffc7 	bl	16000 <os_sanity_check_list_lock>
    if (rc != 0) {
   16072:	b910      	cbnz	r0, 1607a <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   16074:	4b1d      	ldr	r3, [pc, #116]	; (160ec <os_sanity_run+0x80>)
   16076:	681c      	ldr	r4, [r3, #0]
   16078:	e012      	b.n	160a0 <os_sanity_run+0x34>
        assert(0);
   1607a:	f7fe faf3 	bl	14664 <hal_debugger_connected>
   1607e:	b100      	cbz	r0, 16082 <os_sanity_run+0x16>
   16080:	be01      	bkpt	0x0001
   16082:	2300      	movs	r3, #0
   16084:	461a      	mov	r2, r3
   16086:	4619      	mov	r1, r3
   16088:	4618      	mov	r0, r3
   1608a:	f7fe fe8b 	bl	14da4 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   1608e:	f000 fa87 	bl	165a0 <os_time_get>
   16092:	6823      	ldr	r3, [r4, #0]
   16094:	6862      	ldr	r2, [r4, #4]
   16096:	4413      	add	r3, r2
   16098:	1ac0      	subs	r0, r0, r3
   1609a:	2800      	cmp	r0, #0
   1609c:	dc0d      	bgt.n	160ba <os_sanity_run+0x4e>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1609e:	6924      	ldr	r4, [r4, #16]
   160a0:	b1ac      	cbz	r4, 160ce <os_sanity_run+0x62>
        if (sc->sc_func) {
   160a2:	68a3      	ldr	r3, [r4, #8]
   160a4:	2b00      	cmp	r3, #0
   160a6:	d0f2      	beq.n	1608e <os_sanity_run+0x22>
            rc = sc->sc_func(sc, sc->sc_arg);
   160a8:	68e1      	ldr	r1, [r4, #12]
   160aa:	4620      	mov	r0, r4
   160ac:	4798      	blx	r3
            if (rc == OS_OK) {
   160ae:	2800      	cmp	r0, #0
   160b0:	d1ed      	bne.n	1608e <os_sanity_run+0x22>
                sc->sc_checkin_last = os_time_get();
   160b2:	f000 fa75 	bl	165a0 <os_time_get>
   160b6:	6020      	str	r0, [r4, #0]
                continue;
   160b8:	e7f1      	b.n	1609e <os_sanity_run+0x32>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   160ba:	f7fe fad3 	bl	14664 <hal_debugger_connected>
   160be:	b100      	cbz	r0, 160c2 <os_sanity_run+0x56>
   160c0:	be01      	bkpt	0x0001
   160c2:	2300      	movs	r3, #0
   160c4:	461a      	mov	r2, r3
   160c6:	4619      	mov	r1, r3
   160c8:	4618      	mov	r0, r3
   160ca:	f7fe fe6b 	bl	14da4 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   160ce:	f7ff ffa7 	bl	16020 <os_sanity_check_list_unlock>
    if (rc != 0) {
   160d2:	b900      	cbnz	r0, 160d6 <os_sanity_run+0x6a>
        assert(0);
    }
}
   160d4:	bd10      	pop	{r4, pc}
        assert(0);
   160d6:	f7fe fac5 	bl	14664 <hal_debugger_connected>
   160da:	b100      	cbz	r0, 160de <os_sanity_run+0x72>
   160dc:	be01      	bkpt	0x0001
   160de:	2300      	movs	r3, #0
   160e0:	461a      	mov	r2, r3
   160e2:	4619      	mov	r1, r3
   160e4:	4618      	mov	r0, r3
   160e6:	f7fe fe5d 	bl	14da4 <__assert_func>
   160ea:	bf00      	nop
   160ec:	10002efc 	.word	0x10002efc

000160f0 <os_sanity_init>:

int
os_sanity_init(void)
{
   160f0:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   160f2:	4802      	ldr	r0, [pc, #8]	; (160fc <os_sanity_init+0xc>)
   160f4:	f000 fbe8 	bl	168c8 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   160f8:	bd08      	pop	{r3, pc}
   160fa:	bf00      	nop
   160fc:	10002f00 	.word	0x10002f00

00016100 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   16100:	7b03      	ldrb	r3, [r0, #12]
   16102:	2b01      	cmp	r3, #1
   16104:	d001      	beq.n	1610a <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   16106:	2002      	movs	r0, #2
}
   16108:	4770      	bx	lr
{
   1610a:	b510      	push	{r4, lr}
   1610c:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1610e:	f000 fb0d 	bl	1672c <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   16112:	4b0f      	ldr	r3, [pc, #60]	; (16150 <os_sched_insert+0x50>)
   16114:	681b      	ldr	r3, [r3, #0]
   16116:	b12b      	cbz	r3, 16124 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   16118:	7ae1      	ldrb	r1, [r4, #11]
   1611a:	7ada      	ldrb	r2, [r3, #11]
   1611c:	4291      	cmp	r1, r2
   1611e:	d301      	bcc.n	16124 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   16120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   16122:	e7f8      	b.n	16116 <os_sched_insert+0x16>
    if (entry) {
   16124:	b153      	cbz	r3, 1613c <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   16126:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   16128:	64a2      	str	r2, [r4, #72]	; 0x48
   1612a:	6463      	str	r3, [r4, #68]	; 0x44
   1612c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1612e:	6014      	str	r4, [r2, #0]
   16130:	3444      	adds	r4, #68	; 0x44
   16132:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   16134:	f000 fb00 	bl	16738 <os_arch_restore_sr>
    return (0);
   16138:	2000      	movs	r0, #0
}
   1613a:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   1613c:	2300      	movs	r3, #0
   1613e:	6463      	str	r3, [r4, #68]	; 0x44
   16140:	4b03      	ldr	r3, [pc, #12]	; (16150 <os_sched_insert+0x50>)
   16142:	685a      	ldr	r2, [r3, #4]
   16144:	64a2      	str	r2, [r4, #72]	; 0x48
   16146:	6014      	str	r4, [r2, #0]
   16148:	3444      	adds	r4, #68	; 0x44
   1614a:	605c      	str	r4, [r3, #4]
   1614c:	e7f2      	b.n	16134 <os_sched_insert+0x34>
   1614e:	bf00      	nop
   16150:	10000178 	.word	0x10000178

00016154 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   16154:	b410      	push	{r4}
    stack = g_current_task->t_stackbottom;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(stack[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   16156:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   16158:	3301      	adds	r3, #1
   1615a:	63c3      	str	r3, [r0, #60]	; 0x3c
#if MYNEWT_VAL(OS_TASK_RUN_TIME_CPUTIME)
    ticks = os_cputime_get32();
#else
    ticks = g_os_time;
   1615c:	4b06      	ldr	r3, [pc, #24]	; (16178 <os_sched_ctx_sw_hook+0x24>)
   1615e:	6818      	ldr	r0, [r3, #0]
#endif
    g_current_task->t_run_time += ticks - g_os_last_ctx_sw_time;
   16160:	4b06      	ldr	r3, [pc, #24]	; (1617c <os_sched_ctx_sw_hook+0x28>)
   16162:	681c      	ldr	r4, [r3, #0]
   16164:	4906      	ldr	r1, [pc, #24]	; (16180 <os_sched_ctx_sw_hook+0x2c>)
   16166:	680b      	ldr	r3, [r1, #0]
   16168:	1ac2      	subs	r2, r0, r3
   1616a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1616c:	4413      	add	r3, r2
   1616e:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = ticks;
   16170:	6008      	str	r0, [r1, #0]
}
   16172:	bc10      	pop	{r4}
   16174:	4770      	bx	lr
   16176:	bf00      	nop
   16178:	10002f50 	.word	0x10002f50
   1617c:	10002f0c 	.word	0x10002f0c
   16180:	10002f10 	.word	0x10002f10

00016184 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   16184:	4b01      	ldr	r3, [pc, #4]	; (1618c <os_sched_get_current_task+0x8>)
   16186:	6818      	ldr	r0, [r3, #0]
   16188:	4770      	bx	lr
   1618a:	bf00      	nop
   1618c:	10002f0c 	.word	0x10002f0c

00016190 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   16190:	4b01      	ldr	r3, [pc, #4]	; (16198 <os_sched_set_current_task+0x8>)
   16192:	6018      	str	r0, [r3, #0]
}
   16194:	4770      	bx	lr
   16196:	bf00      	nop
   16198:	10002f0c 	.word	0x10002f0c

0001619c <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   1619c:	b538      	push	{r3, r4, r5, lr}
   1619e:	4604      	mov	r4, r0
   161a0:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   161a2:	6c43      	ldr	r3, [r0, #68]	; 0x44
   161a4:	b183      	cbz	r3, 161c8 <os_sched_sleep+0x2c>
   161a6:	6c82      	ldr	r2, [r0, #72]	; 0x48
   161a8:	649a      	str	r2, [r3, #72]	; 0x48
   161aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   161ac:	6c62      	ldr	r2, [r4, #68]	; 0x44
   161ae:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   161b0:	2302      	movs	r3, #2
   161b2:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   161b4:	f000 f9f4 	bl	165a0 <os_time_get>
   161b8:	4428      	add	r0, r5
   161ba:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   161bc:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   161c0:	d006      	beq.n	161d0 <os_sched_sleep+0x34>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   161c2:	4b18      	ldr	r3, [pc, #96]	; (16224 <os_sched_sleep+0x88>)
   161c4:	681b      	ldr	r3, [r3, #0]
   161c6:	e011      	b.n	161ec <os_sched_sleep+0x50>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   161c8:	6c82      	ldr	r2, [r0, #72]	; 0x48
   161ca:	4b17      	ldr	r3, [pc, #92]	; (16228 <os_sched_sleep+0x8c>)
   161cc:	605a      	str	r2, [r3, #4]
   161ce:	e7ec      	b.n	161aa <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   161d0:	7b63      	ldrb	r3, [r4, #13]
   161d2:	f043 0301 	orr.w	r3, r3, #1
   161d6:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   161d8:	2300      	movs	r3, #0
   161da:	6463      	str	r3, [r4, #68]	; 0x44
   161dc:	4b11      	ldr	r3, [pc, #68]	; (16224 <os_sched_sleep+0x88>)
   161de:	685a      	ldr	r2, [r3, #4]
   161e0:	64a2      	str	r2, [r4, #72]	; 0x48
   161e2:	6014      	str	r4, [r2, #0]
   161e4:	3444      	adds	r4, #68	; 0x44
   161e6:	605c      	str	r4, [r3, #4]
   161e8:	e011      	b.n	1620e <os_sched_sleep+0x72>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   161ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   161ec:	b13b      	cbz	r3, 161fe <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   161ee:	7b5a      	ldrb	r2, [r3, #13]
   161f0:	f012 0f01 	tst.w	r2, #1
   161f4:	d103      	bne.n	161fe <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   161f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   161f8:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   161fa:	2a00      	cmp	r2, #0
   161fc:	ddf5      	ble.n	161ea <os_sched_sleep+0x4e>
                break;
            }
        }
        if (entry) {
   161fe:	b143      	cbz	r3, 16212 <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   16200:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   16202:	64a2      	str	r2, [r4, #72]	; 0x48
   16204:	6463      	str	r3, [r4, #68]	; 0x44
   16206:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   16208:	6014      	str	r4, [r2, #0]
   1620a:	3444      	adds	r4, #68	; 0x44
   1620c:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   1620e:	2000      	movs	r0, #0
   16210:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   16212:	2300      	movs	r3, #0
   16214:	6463      	str	r3, [r4, #68]	; 0x44
   16216:	4b03      	ldr	r3, [pc, #12]	; (16224 <os_sched_sleep+0x88>)
   16218:	685a      	ldr	r2, [r3, #4]
   1621a:	64a2      	str	r2, [r4, #72]	; 0x48
   1621c:	6014      	str	r4, [r2, #0]
   1621e:	3444      	adds	r4, #68	; 0x44
   16220:	605c      	str	r4, [r3, #4]
   16222:	e7f4      	b.n	1620e <os_sched_sleep+0x72>
   16224:	10000180 	.word	0x10000180
   16228:	10000178 	.word	0x10000178

0001622c <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   1622c:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   1622e:	7b03      	ldrb	r3, [r0, #12]
   16230:	2b02      	cmp	r3, #2
   16232:	d121      	bne.n	16278 <os_sched_wakeup+0x4c>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   16234:	69c2      	ldr	r2, [r0, #28]
   16236:	b162      	cbz	r2, 16252 <os_sched_wakeup+0x26>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   16238:	6813      	ldr	r3, [r2, #0]
   1623a:	b33b      	cbz	r3, 1628c <os_sched_wakeup+0x60>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1623c:	4283      	cmp	r3, r0
   1623e:	d02f      	beq.n	162a0 <os_sched_wakeup+0x74>
   16240:	461a      	mov	r2, r3
   16242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   16244:	4283      	cmp	r3, r0
   16246:	d1fb      	bne.n	16240 <os_sched_wakeup+0x14>
   16248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1624a:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   1624c:	2300      	movs	r3, #0
   1624e:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   16250:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   16252:	2301      	movs	r3, #1
   16254:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   16256:	2300      	movs	r3, #0
   16258:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   1625a:	7b43      	ldrb	r3, [r0, #13]
   1625c:	f023 0301 	bic.w	r3, r3, #1
   16260:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   16262:	6c43      	ldr	r3, [r0, #68]	; 0x44
   16264:	b1fb      	cbz	r3, 162a6 <os_sched_wakeup+0x7a>
   16266:	6c82      	ldr	r2, [r0, #72]	; 0x48
   16268:	649a      	str	r2, [r3, #72]	; 0x48
   1626a:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1626c:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1626e:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   16270:	f7ff ff46 	bl	16100 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   16274:	2000      	movs	r0, #0
   16276:	bd08      	pop	{r3, pc}
    assert(t->t_state == OS_TASK_SLEEP);
   16278:	f7fe f9f4 	bl	14664 <hal_debugger_connected>
   1627c:	b100      	cbz	r0, 16280 <os_sched_wakeup+0x54>
   1627e:	be01      	bkpt	0x0001
   16280:	2300      	movs	r3, #0
   16282:	461a      	mov	r2, r3
   16284:	4619      	mov	r1, r3
   16286:	4618      	mov	r0, r3
   16288:	f7fe fd8c 	bl	14da4 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1628c:	f7fe f9ea 	bl	14664 <hal_debugger_connected>
   16290:	b100      	cbz	r0, 16294 <os_sched_wakeup+0x68>
   16292:	be01      	bkpt	0x0001
   16294:	2300      	movs	r3, #0
   16296:	461a      	mov	r2, r3
   16298:	4619      	mov	r1, r3
   1629a:	4618      	mov	r0, r3
   1629c:	f7fe fd82 	bl	14da4 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   162a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   162a2:	6013      	str	r3, [r2, #0]
   162a4:	e7d2      	b.n	1624c <os_sched_wakeup+0x20>
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   162a6:	6c82      	ldr	r2, [r0, #72]	; 0x48
   162a8:	4b01      	ldr	r3, [pc, #4]	; (162b0 <os_sched_wakeup+0x84>)
   162aa:	605a      	str	r2, [r3, #4]
   162ac:	e7dd      	b.n	1626a <os_sched_wakeup+0x3e>
   162ae:	bf00      	nop
   162b0:	10000180 	.word	0x10000180

000162b4 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   162b4:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   162b6:	f000 f973 	bl	165a0 <os_time_get>
   162ba:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   162bc:	f000 fa36 	bl	1672c <os_arch_save_sr>
   162c0:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   162c2:	4b0a      	ldr	r3, [pc, #40]	; (162ec <os_sched_os_timer_exp+0x38>)
   162c4:	6818      	ldr	r0, [r3, #0]
    while (t) {
   162c6:	e002      	b.n	162ce <os_sched_os_timer_exp+0x1a>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
            os_sched_wakeup(t);
   162c8:	f7ff ffb0 	bl	1622c <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   162cc:	4620      	mov	r0, r4
    while (t) {
   162ce:	b140      	cbz	r0, 162e2 <os_sched_os_timer_exp+0x2e>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   162d0:	7b43      	ldrb	r3, [r0, #13]
   162d2:	f013 0f01 	tst.w	r3, #1
   162d6:	d104      	bne.n	162e2 <os_sched_os_timer_exp+0x2e>
        next = TAILQ_NEXT(t, t_os_list);
   162d8:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   162da:	6b43      	ldr	r3, [r0, #52]	; 0x34
   162dc:	1aeb      	subs	r3, r5, r3
   162de:	2b00      	cmp	r3, #0
   162e0:	daf2      	bge.n	162c8 <os_sched_os_timer_exp+0x14>
    }

    OS_EXIT_CRITICAL(sr);
   162e2:	4630      	mov	r0, r6
   162e4:	f000 fa28 	bl	16738 <os_arch_restore_sr>
}
   162e8:	bd70      	pop	{r4, r5, r6, pc}
   162ea:	bf00      	nop
   162ec:	10000180 	.word	0x10000180

000162f0 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   162f0:	b510      	push	{r4, lr}
   162f2:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   162f4:	f000 fa23 	bl	1673e <os_arch_in_critical>
   162f8:	b150      	cbz	r0, 16310 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   162fa:	4b0e      	ldr	r3, [pc, #56]	; (16334 <os_sched_wakeup_ticks+0x44>)
   162fc:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   162fe:	b19b      	cbz	r3, 16328 <os_sched_wakeup_ticks+0x38>
   16300:	7b5a      	ldrb	r2, [r3, #13]
   16302:	f012 0f01 	tst.w	r2, #1
   16306:	d112      	bne.n	1632e <os_sched_wakeup_ticks+0x3e>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   16308:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1630a:	1b00      	subs	r0, r0, r4
   1630c:	d40a      	bmi.n	16324 <os_sched_wakeup_ticks+0x34>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   1630e:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   16310:	f7fe f9a8 	bl	14664 <hal_debugger_connected>
   16314:	b100      	cbz	r0, 16318 <os_sched_wakeup_ticks+0x28>
   16316:	be01      	bkpt	0x0001
   16318:	2300      	movs	r3, #0
   1631a:	461a      	mov	r2, r3
   1631c:	4619      	mov	r1, r3
   1631e:	4618      	mov	r0, r3
   16320:	f7fe fd40 	bl	14da4 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   16324:	2000      	movs	r0, #0
   16326:	e7f2      	b.n	1630e <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   16328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1632c:	e7ef      	b.n	1630e <os_sched_wakeup_ticks+0x1e>
   1632e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   16332:	e7ec      	b.n	1630e <os_sched_wakeup_ticks+0x1e>
   16334:	10000180 	.word	0x10000180

00016338 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   16338:	4b01      	ldr	r3, [pc, #4]	; (16340 <os_sched_next_task+0x8>)
   1633a:	6818      	ldr	r0, [r3, #0]
   1633c:	4770      	bx	lr
   1633e:	bf00      	nop
   16340:	10000178 	.word	0x10000178

00016344 <os_sched>:
{
   16344:	b538      	push	{r3, r4, r5, lr}
   16346:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   16348:	f000 f9f0 	bl	1672c <os_arch_save_sr>
   1634c:	4605      	mov	r5, r0
    if (!next_t) {
   1634e:	b134      	cbz	r4, 1635e <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   16350:	4620      	mov	r0, r4
   16352:	f000 f9e1 	bl	16718 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   16356:	4628      	mov	r0, r5
   16358:	f000 f9ee 	bl	16738 <os_arch_restore_sr>
}
   1635c:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   1635e:	f7ff ffeb 	bl	16338 <os_sched_next_task>
   16362:	4604      	mov	r4, r0
   16364:	e7f4      	b.n	16350 <os_sched+0xc>
	...

00016368 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   16368:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   1636a:	7b03      	ldrb	r3, [r0, #12]
   1636c:	2b01      	cmp	r3, #1
   1636e:	d000      	beq.n	16372 <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   16370:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   16372:	6c43      	ldr	r3, [r0, #68]	; 0x44
   16374:	b13b      	cbz	r3, 16386 <os_sched_resort+0x1e>
   16376:	6c82      	ldr	r2, [r0, #72]	; 0x48
   16378:	649a      	str	r2, [r3, #72]	; 0x48
   1637a:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1637c:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1637e:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   16380:	f7ff febe 	bl	16100 <os_sched_insert>
}
   16384:	e7f4      	b.n	16370 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   16386:	6c82      	ldr	r2, [r0, #72]	; 0x48
   16388:	4b01      	ldr	r3, [pc, #4]	; (16390 <os_sched_resort+0x28>)
   1638a:	605a      	str	r2, [r3, #4]
   1638c:	e7f5      	b.n	1637a <os_sched_resort+0x12>
   1638e:	bf00      	nop
   16390:	10000178 	.word	0x10000178

00016394 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   16394:	2300      	movs	r3, #0
   16396:	428b      	cmp	r3, r1
   16398:	da04      	bge.n	163a4 <_clear_stack+0x10>
        stack_bottom[i] = OS_STACK_PATTERN;
   1639a:	4a03      	ldr	r2, [pc, #12]	; (163a8 <_clear_stack+0x14>)
   1639c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   163a0:	3301      	adds	r3, #1
   163a2:	e7f8      	b.n	16396 <_clear_stack+0x2>
    }
}
   163a4:	4770      	bx	lr
   163a6:	bf00      	nop
   163a8:	deadbeef 	.word	0xdeadbeef

000163ac <os_task_stacktop_get>:
}

os_stack_t *
os_task_stacktop_get(struct os_task *t)
{
    return &t->t_stackbottom[t->t_stacksize];
   163ac:	6843      	ldr	r3, [r0, #4]
   163ae:	8900      	ldrh	r0, [r0, #8]
}
   163b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   163b4:	4770      	bx	lr
	...

000163b8 <os_task_init>:
{
   163b8:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
   163bc:	4604      	mov	r4, r0
   163be:	460d      	mov	r5, r1
   163c0:	4617      	mov	r7, r2
   163c2:	461e      	mov	r6, r3
   163c4:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    memset(t, 0, sizeof(*t));
   163c8:	2250      	movs	r2, #80	; 0x50
   163ca:	2100      	movs	r1, #0
   163cc:	f000 fba7 	bl	16b1e <memset>
    t->t_func = func;
   163d0:	6167      	str	r7, [r4, #20]
    t->t_arg = arg;
   163d2:	61a6      	str	r6, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   163d4:	f000 f9aa 	bl	1672c <os_arch_save_sr>
    rc = g_task_id;
   163d8:	4b2e      	ldr	r3, [pc, #184]	; (16494 <os_task_init+0xdc>)
   163da:	781e      	ldrb	r6, [r3, #0]
    g_task_id++;
   163dc:	1c72      	adds	r2, r6, #1
   163de:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   163e0:	f000 f9aa 	bl	16738 <os_arch_restore_sr>
    t->t_taskid = os_task_next_id();
   163e4:	72a6      	strb	r6, [r4, #10]
    t->t_prio = prio;
   163e6:	f89d 3018 	ldrb.w	r3, [sp, #24]
   163ea:	72e3      	strb	r3, [r4, #11]
    t->t_state = OS_TASK_READY;
   163ec:	2301      	movs	r3, #1
   163ee:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   163f0:	6125      	str	r5, [r4, #16]
    t->t_next_wakeup = 0;
   163f2:	2300      	movs	r3, #0
   163f4:	6363      	str	r3, [r4, #52]	; 0x34
    rc = os_sanity_check_init(&t->t_sanity_check);
   163f6:	f104 0620 	add.w	r6, r4, #32
   163fa:	4630      	mov	r0, r6
   163fc:	f7ff fe1e 	bl	1603c <os_sanity_check_init>
    if (rc != OS_OK) {
   16400:	4605      	mov	r5, r0
   16402:	2800      	cmp	r0, #0
   16404:	d139      	bne.n	1647a <os_task_init+0xc2>
    if (sanity_itvl != OS_WAIT_FOREVER) {
   16406:	9b07      	ldr	r3, [sp, #28]
   16408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1640c:	d005      	beq.n	1641a <os_task_init+0x62>
        sc->sc_checkin_itvl = sanity_itvl;
   1640e:	6263      	str	r3, [r4, #36]	; 0x24
        rc = os_sanity_check_register(sc);
   16410:	4630      	mov	r0, r6
   16412:	f7ff fe1b 	bl	1604c <os_sanity_check_register>
        if (rc != OS_OK) {
   16416:	4605      	mov	r5, r0
   16418:	bb78      	cbnz	r0, 1647a <os_task_init+0xc2>
    _clear_stack(stack_bottom, stack_size);
   1641a:	4649      	mov	r1, r9
   1641c:	9808      	ldr	r0, [sp, #32]
   1641e:	f7ff ffb9 	bl	16394 <_clear_stack>
    t->t_stackbottom = stack_bottom;
   16422:	9b08      	ldr	r3, [sp, #32]
   16424:	6063      	str	r3, [r4, #4]
    t->t_stacksize = stack_size;
   16426:	f8a4 9008 	strh.w	r9, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, os_task_stacktop_get(t),
   1642a:	4620      	mov	r0, r4
   1642c:	f7ff ffbe 	bl	163ac <os_task_stacktop_get>
   16430:	4601      	mov	r1, r0
   16432:	464a      	mov	r2, r9
   16434:	4620      	mov	r0, r4
   16436:	f000 f987 	bl	16748 <os_arch_task_stack_init>
   1643a:	6020      	str	r0, [r4, #0]
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1643c:	4b16      	ldr	r3, [pc, #88]	; (16498 <os_task_init+0xe0>)
   1643e:	681b      	ldr	r3, [r3, #0]
   16440:	b17b      	cbz	r3, 16462 <os_task_init+0xaa>
        assert(t->t_prio != task->t_prio);
   16442:	7ae1      	ldrb	r1, [r4, #11]
   16444:	7ada      	ldrb	r2, [r3, #11]
   16446:	4291      	cmp	r1, r2
   16448:	d001      	beq.n	1644e <os_task_init+0x96>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1644a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1644c:	e7f8      	b.n	16440 <os_task_init+0x88>
        assert(t->t_prio != task->t_prio);
   1644e:	f7fe f909 	bl	14664 <hal_debugger_connected>
   16452:	b100      	cbz	r0, 16456 <os_task_init+0x9e>
   16454:	be01      	bkpt	0x0001
   16456:	2300      	movs	r3, #0
   16458:	461a      	mov	r2, r3
   1645a:	4619      	mov	r1, r3
   1645c:	4618      	mov	r0, r3
   1645e:	f7fe fca1 	bl	14da4 <__assert_func>
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   16462:	6423      	str	r3, [r4, #64]	; 0x40
   16464:	4b0c      	ldr	r3, [pc, #48]	; (16498 <os_task_init+0xe0>)
   16466:	685a      	ldr	r2, [r3, #4]
   16468:	6014      	str	r4, [r2, #0]
   1646a:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1646e:	605a      	str	r2, [r3, #4]
    rc = os_sched_insert(t);
   16470:	4620      	mov	r0, r4
   16472:	f7ff fe45 	bl	16100 <os_sched_insert>
   16476:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   16478:	b110      	cbz	r0, 16480 <os_task_init+0xc8>
}
   1647a:	4628      	mov	r0, r5
   1647c:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    if (os_started()) {
   16480:	f7fe fd50 	bl	14f24 <os_started>
   16484:	b908      	cbnz	r0, 1648a <os_task_init+0xd2>
    return (0);
   16486:	4605      	mov	r5, r0
   16488:	e7f7      	b.n	1647a <os_task_init+0xc2>
        os_sched(NULL);
   1648a:	2000      	movs	r0, #0
   1648c:	f7ff ff5a 	bl	16344 <os_sched>
   16490:	e7f3      	b.n	1647a <os_task_init+0xc2>
   16492:	bf00      	nop
   16494:	10002f1c 	.word	0x10002f1c
   16498:	10002f14 	.word	0x10002f14

0001649c <os_task_info_get>:
    return rc;
}

void
os_task_info_get(const struct os_task *task, struct os_task_info *oti)
{
   1649c:	b570      	push	{r4, r5, r6, lr}
   1649e:	4606      	mov	r6, r0
    os_stack_t *bottom;
    os_stack_t *top;

    oti->oti_prio = task->t_prio;
   164a0:	7ac3      	ldrb	r3, [r0, #11]
   164a2:	700b      	strb	r3, [r1, #0]
    oti->oti_taskid = task->t_taskid;
   164a4:	7a83      	ldrb	r3, [r0, #10]
   164a6:	704b      	strb	r3, [r1, #1]
    oti->oti_state = task->t_state;
   164a8:	7b03      	ldrb	r3, [r0, #12]
   164aa:	708b      	strb	r3, [r1, #2]

    bottom = task->t_stackbottom;
   164ac:	6843      	ldr	r3, [r0, #4]
    top = bottom + task->t_stacksize;
   164ae:	8905      	ldrh	r5, [r0, #8]
   164b0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    while (bottom < top) {
   164b4:	42ab      	cmp	r3, r5
   164b6:	d205      	bcs.n	164c4 <os_task_info_get+0x28>
        if (*bottom != OS_STACK_PATTERN) {
   164b8:	681c      	ldr	r4, [r3, #0]
   164ba:	4a0e      	ldr	r2, [pc, #56]	; (164f4 <os_task_info_get+0x58>)
   164bc:	4294      	cmp	r4, r2
   164be:	d101      	bne.n	164c4 <os_task_info_get+0x28>
            break;
        }
        ++bottom;
   164c0:	3304      	adds	r3, #4
   164c2:	e7f7      	b.n	164b4 <os_task_info_get+0x18>
    }

    oti->oti_stkusage = (uint16_t) (top - bottom);
   164c4:	1aeb      	subs	r3, r5, r3
   164c6:	f3c3 038f 	ubfx	r3, r3, #2, #16
   164ca:	808b      	strh	r3, [r1, #4]
    oti->oti_stksize = task->t_stacksize;
   164cc:	8933      	ldrh	r3, [r6, #8]
   164ce:	80cb      	strh	r3, [r1, #6]
    oti->oti_cswcnt = task->t_ctx_sw_cnt;
   164d0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   164d2:	608b      	str	r3, [r1, #8]
    oti->oti_runtime = task->t_run_time;
   164d4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   164d6:	60cb      	str	r3, [r1, #12]
    oti->oti_last_checkin = task->t_sanity_check.sc_checkin_last;
   164d8:	6a33      	ldr	r3, [r6, #32]
   164da:	610b      	str	r3, [r1, #16]
    oti->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
                            task->t_sanity_check.sc_checkin_itvl;
   164dc:	6a72      	ldr	r2, [r6, #36]	; 0x24
    oti->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
   164de:	4413      	add	r3, r2
   164e0:	614b      	str	r3, [r1, #20]
    oti->oti_name[0] = '\0';
   164e2:	4608      	mov	r0, r1
   164e4:	2300      	movs	r3, #0
   164e6:	f800 3f18 	strb.w	r3, [r0, #24]!
    strncat(oti->oti_name, task->t_name, sizeof(oti->oti_name) - 1);
   164ea:	221f      	movs	r2, #31
   164ec:	6931      	ldr	r1, [r6, #16]
   164ee:	f000 fb45 	bl	16b7c <strncat>
}
   164f2:	bd70      	pop	{r4, r5, r6, pc}
   164f4:	deadbeef 	.word	0xdeadbeef

000164f8 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   164f8:	b430      	push	{r4, r5}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   164fa:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   164fc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   16500:	e9d1 4500 	ldrd	r4, r5, [r1]
   16504:	18e4      	adds	r4, r4, r3
   16506:	f145 0500 	adc.w	r5, r5, #0
   1650a:	e9c2 4500 	strd	r4, r5, [r2]
   1650e:	688b      	ldr	r3, [r1, #8]
   16510:	f641 6184 	movw	r1, #7812	; 0x1e84
   16514:	fb01 3000 	mla	r0, r1, r0, r3
   16518:	6090      	str	r0, [r2, #8]
   1651a:	4b07      	ldr	r3, [pc, #28]	; (16538 <os_deltatime+0x40>)
   1651c:	4298      	cmp	r0, r3
   1651e:	dd09      	ble.n	16534 <os_deltatime+0x3c>
   16520:	1c61      	adds	r1, r4, #1
   16522:	f145 0300 	adc.w	r3, r5, #0
   16526:	6011      	str	r1, [r2, #0]
   16528:	6053      	str	r3, [r2, #4]
   1652a:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   1652e:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   16532:	6090      	str	r0, [r2, #8]
}
   16534:	bc30      	pop	{r4, r5}
   16536:	4770      	bx	lr
   16538:	000f423f 	.word	0x000f423f

0001653c <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   1653c:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   1653e:	1e04      	subs	r4, r0, #0
   16540:	db0d      	blt.n	1655e <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   16542:	f000 f8f3 	bl	1672c <os_arch_save_sr>
   16546:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   16548:	4913      	ldr	r1, [pc, #76]	; (16598 <os_time_tick+0x5c>)
   1654a:	680a      	ldr	r2, [r1, #0]
    g_os_time += ticks;
   1654c:	18a3      	adds	r3, r4, r2
   1654e:	600b      	str	r3, [r1, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   16550:	ea93 0f02 	teq	r3, r2
   16554:	d40d      	bmi.n	16572 <os_time_tick+0x36>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   16556:	4628      	mov	r0, r5
   16558:	f000 f8ee 	bl	16738 <os_arch_restore_sr>
}
   1655c:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   1655e:	f7fe f881 	bl	14664 <hal_debugger_connected>
   16562:	b100      	cbz	r0, 16566 <os_time_tick+0x2a>
   16564:	be01      	bkpt	0x0001
   16566:	2300      	movs	r3, #0
   16568:	461a      	mov	r2, r3
   1656a:	4619      	mov	r1, r3
   1656c:	4618      	mov	r0, r3
   1656e:	f7fe fc19 	bl	14da4 <__assert_func>
        delta = g_os_time - basetod.ostime;
   16572:	4e0a      	ldr	r6, [pc, #40]	; (1659c <os_time_tick+0x60>)
   16574:	4631      	mov	r1, r6
   16576:	f851 4b08 	ldr.w	r4, [r1], #8
   1657a:	1b1c      	subs	r4, r3, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   1657c:	460a      	mov	r2, r1
   1657e:	4620      	mov	r0, r4
   16580:	f7ff ffba 	bl	164f8 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   16584:	f106 0118 	add.w	r1, r6, #24
   16588:	460a      	mov	r2, r1
   1658a:	4620      	mov	r0, r4
   1658c:	f7ff ffb4 	bl	164f8 <os_deltatime>
        basetod.ostime = g_os_time;
   16590:	4b01      	ldr	r3, [pc, #4]	; (16598 <os_time_tick+0x5c>)
   16592:	681b      	ldr	r3, [r3, #0]
   16594:	6033      	str	r3, [r6, #0]
   16596:	e7de      	b.n	16556 <os_time_tick+0x1a>
   16598:	10002f50 	.word	0x10002f50
   1659c:	10002f20 	.word	0x10002f20

000165a0 <os_time_get>:
}
   165a0:	4b01      	ldr	r3, [pc, #4]	; (165a8 <os_time_get+0x8>)
   165a2:	6818      	ldr	r0, [r3, #0]
   165a4:	4770      	bx	lr
   165a6:	bf00      	nop
   165a8:	10002f50 	.word	0x10002f50

000165ac <os_time_advance>:

void
os_time_advance(int ticks)
{
   165ac:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   165ae:	1e04      	subs	r4, r0, #0
   165b0:	db02      	blt.n	165b8 <os_time_advance+0xc>

    if (ticks > 0) {
   165b2:	2c00      	cmp	r4, #0
   165b4:	dc0a      	bgt.n	165cc <os_time_advance+0x20>
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   165b6:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   165b8:	f7fe f854 	bl	14664 <hal_debugger_connected>
   165bc:	b100      	cbz	r0, 165c0 <os_time_advance+0x14>
   165be:	be01      	bkpt	0x0001
   165c0:	2300      	movs	r3, #0
   165c2:	461a      	mov	r2, r3
   165c4:	4619      	mov	r1, r3
   165c6:	4618      	mov	r0, r3
   165c8:	f7fe fbec 	bl	14da4 <__assert_func>
        if (!os_started()) {
   165cc:	f7fe fcaa 	bl	14f24 <os_started>
   165d0:	b920      	cbnz	r0, 165dc <os_time_advance+0x30>
            g_os_time += ticks;
   165d2:	4b08      	ldr	r3, [pc, #32]	; (165f4 <os_time_advance+0x48>)
   165d4:	6818      	ldr	r0, [r3, #0]
   165d6:	4420      	add	r0, r4
   165d8:	6018      	str	r0, [r3, #0]
   165da:	e7ec      	b.n	165b6 <os_time_advance+0xa>
            os_time_tick(ticks);
   165dc:	4620      	mov	r0, r4
   165de:	f7ff ffad 	bl	1653c <os_time_tick>
            os_callout_tick();
   165e2:	f7fe fdf9 	bl	151d8 <os_callout_tick>
            os_sched_os_timer_exp();
   165e6:	f7ff fe65 	bl	162b4 <os_sched_os_timer_exp>
            os_sched(NULL);
   165ea:	2000      	movs	r0, #0
   165ec:	f7ff feaa 	bl	16344 <os_sched>
}
   165f0:	e7e1      	b.n	165b6 <os_time_advance+0xa>
   165f2:	bf00      	nop
   165f4:	10002f50 	.word	0x10002f50

000165f8 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   165f8:	b900      	cbnz	r0, 165fc <os_time_delay+0x4>
   165fa:	4770      	bx	lr
{
   165fc:	b538      	push	{r3, r4, r5, lr}
   165fe:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   16600:	f000 f894 	bl	1672c <os_arch_save_sr>
   16604:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   16606:	f7ff fdbd 	bl	16184 <os_sched_get_current_task>
   1660a:	4621      	mov	r1, r4
   1660c:	f7ff fdc6 	bl	1619c <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   16610:	4628      	mov	r0, r5
   16612:	f000 f891 	bl	16738 <os_arch_restore_sr>
        os_sched(NULL);
   16616:	2000      	movs	r0, #0
   16618:	f7ff fe94 	bl	16344 <os_sched>
    }
}
   1661c:	bd38      	pop	{r3, r4, r5, pc}
	...

00016620 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
   16620:	b570      	push	{r4, r5, r6, lr}
   16622:	4605      	mov	r5, r0
   16624:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
   16626:	f000 f881 	bl	1672c <os_arch_save_sr>
   1662a:	4606      	mov	r6, r0
    if (tv != NULL) {
   1662c:	b145      	cbz	r5, 16640 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
   1662e:	f7ff ffb7 	bl	165a0 <os_time_get>
   16632:	4908      	ldr	r1, [pc, #32]	; (16654 <os_gettimeofday+0x34>)
   16634:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
   16638:	462a      	mov	r2, r5
   1663a:	1ac0      	subs	r0, r0, r3
   1663c:	f7ff ff5c 	bl	164f8 <os_deltatime>
    }

    if (tz != NULL) {
   16640:	b114      	cbz	r4, 16648 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
   16642:	4b04      	ldr	r3, [pc, #16]	; (16654 <os_gettimeofday+0x34>)
   16644:	6a98      	ldr	r0, [r3, #40]	; 0x28
   16646:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
   16648:	4630      	mov	r0, r6
   1664a:	f000 f875 	bl	16738 <os_arch_restore_sr>

    return (0);
}
   1664e:	2000      	movs	r0, #0
   16650:	bd70      	pop	{r4, r5, r6, pc}
   16652:	bf00      	nop
   16654:	10002f20 	.word	0x10002f20

00016658 <os_get_uptime>:
    return basetod.utctime.tv_sec > 0;
}

void
os_get_uptime(struct os_timeval *tvp)
{
   16658:	b5f0      	push	{r4, r5, r6, r7, lr}
   1665a:	b085      	sub	sp, #20
   1665c:	4606      	mov	r6, r0
  struct os_timeval tv;
  os_time_t delta;
  os_sr_t sr;
  os_time_t ostime;

  OS_ENTER_CRITICAL(sr);
   1665e:	f000 f865 	bl	1672c <os_arch_save_sr>
   16662:	4607      	mov	r7, r0
  tv = basetod.uptime;
   16664:	4d0a      	ldr	r5, [pc, #40]	; (16690 <os_get_uptime+0x38>)
   16666:	466c      	mov	r4, sp
   16668:	f105 0308 	add.w	r3, r5, #8
   1666c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1666e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ostime = basetod.ostime;
   16672:	682d      	ldr	r5, [r5, #0]
  delta = os_time_get() - ostime;
   16674:	f7ff ff94 	bl	165a0 <os_time_get>
   16678:	1b45      	subs	r5, r0, r5
  OS_EXIT_CRITICAL(sr);
   1667a:	4638      	mov	r0, r7
   1667c:	f000 f85c 	bl	16738 <os_arch_restore_sr>

  os_deltatime(delta, &tv, tvp);
   16680:	4632      	mov	r2, r6
   16682:	4621      	mov	r1, r4
   16684:	4628      	mov	r0, r5
   16686:	f7ff ff37 	bl	164f8 <os_deltatime>
}
   1668a:	b005      	add	sp, #20
   1668c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1668e:	bf00      	nop
   16690:	10002f20 	.word	0x10002f20

00016694 <os_get_uptime_usec>:

int64_t
os_get_uptime_usec(void)
{
   16694:	b5f0      	push	{r4, r5, r6, r7, lr}
   16696:	b085      	sub	sp, #20
  struct os_timeval tv;

  os_get_uptime(&tv);
   16698:	4668      	mov	r0, sp
   1669a:	f7ff ffdd 	bl	16658 <os_get_uptime>

  return (tv.tv_sec * 1000000 + tv.tv_usec);
   1669e:	9900      	ldr	r1, [sp, #0]
   166a0:	9f01      	ldr	r7, [sp, #4]
   166a2:	0178      	lsls	r0, r7, #5
   166a4:	014b      	lsls	r3, r1, #5
   166a6:	ea40 62d1 	orr.w	r2, r0, r1, lsr #27
   166aa:	1a5b      	subs	r3, r3, r1
   166ac:	eb62 0207 	sbc.w	r2, r2, r7
   166b0:	0250      	lsls	r0, r2, #9
   166b2:	ea40 50d3 	orr.w	r0, r0, r3, lsr #23
   166b6:	025e      	lsls	r6, r3, #9
   166b8:	4602      	mov	r2, r0
   166ba:	1873      	adds	r3, r6, r1
   166bc:	eb47 0202 	adc.w	r2, r7, r2
   166c0:	0196      	lsls	r6, r2, #6
   166c2:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
   166c6:	0198      	lsls	r0, r3, #6
   166c8:	1ac3      	subs	r3, r0, r3
   166ca:	eb66 0202 	sbc.w	r2, r6, r2
   166ce:	185c      	adds	r4, r3, r1
   166d0:	eb42 0507 	adc.w	r5, r2, r7
}
   166d4:	9802      	ldr	r0, [sp, #8]
   166d6:	4603      	mov	r3, r0
   166d8:	1820      	adds	r0, r4, r0
   166da:	eb45 71e3 	adc.w	r1, r5, r3, asr #31
   166de:	b005      	add	sp, #20
   166e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000166e2 <os_time_ms_to_ticks>:

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
   166e2:	b570      	push	{r4, r5, r6, lr}
   166e4:	460e      	mov	r6, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   166e6:	0e45      	lsrs	r5, r0, #25
   166e8:	01c4      	lsls	r4, r0, #7
   166ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   166ee:	2300      	movs	r3, #0
   166f0:	4620      	mov	r0, r4
   166f2:	4629      	mov	r1, r5
   166f4:	f7fd fdba 	bl	1426c <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
   166f8:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
   166fc:	bf08      	it	eq
   166fe:	2c00      	cmpeq	r4, #0
   16700:	d202      	bcs.n	16708 <os_time_ms_to_ticks+0x26>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
   16702:	6030      	str	r0, [r6, #0]
    return 0;
   16704:	2000      	movs	r0, #0
}
   16706:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   16708:	2002      	movs	r0, #2
   1670a:	e7fc      	b.n	16706 <os_time_ms_to_ticks+0x24>

0001670c <os_arch_task_return_handler>:
{
    /*
     * If you are stuck here it means that task finished by
     * simple return which is not supported.
     */
    while (1);
   1670c:	e7fe      	b.n	1670c <os_arch_task_return_handler>

0001670e <timer_handler>:
{
   1670e:	b508      	push	{r3, lr}
    os_time_advance(1);
   16710:	2001      	movs	r0, #1
   16712:	f7ff ff4b 	bl	165ac <os_time_advance>
}
   16716:	bd08      	pop	{r3, pc}

00016718 <os_arch_ctx_sw>:
{
   16718:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   1671a:	f7ff fd1b 	bl	16154 <os_sched_ctx_sw_hook>
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   1671e:	4b02      	ldr	r3, [pc, #8]	; (16728 <os_arch_ctx_sw+0x10>)
   16720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   16724:	605a      	str	r2, [r3, #4]
}
   16726:	bd08      	pop	{r3, pc}
   16728:	e000ed00 	.word	0xe000ed00

0001672c <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1672c:	f3ef 8010 	mrs	r0, PRIMASK
    isr_ctx = __get_PRIMASK() & 1;
   16730:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("cpsid i" : : : "memory");
   16734:	b672      	cpsid	i
}
   16736:	4770      	bx	lr

00016738 <os_arch_restore_sr>:
    if (!isr_ctx) {
   16738:	b900      	cbnz	r0, 1673c <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   1673a:	b662      	cpsie	i
}
   1673c:	4770      	bx	lr

0001673e <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1673e:	f3ef 8010 	mrs	r0, PRIMASK
}
   16742:	f000 0001 	and.w	r0, r0, #1
   16746:	4770      	bx	lr

00016748 <os_arch_task_stack_init>:
}

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   16748:	b570      	push	{r4, r5, r6, lr}
   1674a:	4606      	mov	r6, r0
   1674c:	460c      	mov	r4, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   1674e:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40

    /* Zero out R1-R3, R12 */
    for (i = 9; i < 13; ++i) {
   16752:	2309      	movs	r3, #9
   16754:	e003      	b.n	1675e <os_arch_task_stack_init+0x16>
        s[i] = 0;
   16756:	2200      	movs	r2, #0
   16758:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    for (i = 9; i < 13; ++i) {
   1675c:	3301      	adds	r3, #1
   1675e:	2b0c      	cmp	r3, #12
   16760:	ddf9      	ble.n	16756 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   16762:	4628      	mov	r0, r5
   16764:	f7fd fd28 	bl	141b8 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   16768:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1676c:	f844 3c04 	str.w	r3, [r4, #-4]
    sf->pc = (uint32_t)t->t_func;
   16770:	6973      	ldr	r3, [r6, #20]
   16772:	f844 3c08 	str.w	r3, [r4, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   16776:	69b3      	ldr	r3, [r6, #24]
   16778:	f844 3c20 	str.w	r3, [r4, #-32]
    /* Set function to cache returns from tasks. */
    sf->lr = (uint32_t)os_arch_task_return_handler;
   1677c:	4b02      	ldr	r3, [pc, #8]	; (16788 <os_arch_task_stack_init+0x40>)
   1677e:	f844 3c0c 	str.w	r3, [r4, #-12]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
#endif

    return (s);
}
   16782:	4628      	mov	r0, r5
   16784:	bd70      	pop	{r4, r5, r6, pc}
   16786:	bf00      	nop
   16788:	0001670d 	.word	0x0001670d

0001678c <os_arch_init>:

void
os_arch_init(void)
{
   1678c:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1678e:	4a04      	ldr	r2, [pc, #16]	; (167a0 <os_arch_init+0x14>)
   16790:	6953      	ldr	r3, [r2, #20]
   16792:	f043 0310 	orr.w	r3, r3, #16
   16796:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   16798:	f7fe fbca 	bl	14f30 <os_init_idle_task>
}
   1679c:	bd08      	pop	{r3, pc}
   1679e:	bf00      	nop
   167a0:	e000ed00 	.word	0xe000ed00

000167a4 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   167a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   167a6:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   167aa:	b90c      	cbnz	r4, 167b0 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   167ac:	2400      	movs	r4, #0
   167ae:	e009      	b.n	167c4 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   167b0:	2007      	movs	r0, #7
   167b2:	e02e      	b.n	16812 <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   167b4:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   167b8:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   167bc:	26ff      	movs	r6, #255	; 0xff
   167be:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   167c2:	3401      	adds	r4, #1
   167c4:	2cef      	cmp	r4, #239	; 0xef
   167c6:	d9f5      	bls.n	167b4 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   167c8:	f06f 040d 	mvn.w	r4, #13
   167cc:	e007      	b.n	167de <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   167ce:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   167d0:	4e12      	ldr	r6, [pc, #72]	; (1681c <os_arch_os_init+0x78>)
   167d2:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   167d4:	3510      	adds	r5, #16
   167d6:	4f12      	ldr	r7, [pc, #72]	; (16820 <os_arch_os_init+0x7c>)
   167d8:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   167dc:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   167de:	2c19      	cmp	r4, #25
   167e0:	ddf5      	ble.n	167ce <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   167e2:	4c0e      	ldr	r4, [pc, #56]	; (1681c <os_arch_os_init+0x78>)
   167e4:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   167e6:	4e0f      	ldr	r6, [pc, #60]	; (16824 <os_arch_os_init+0x80>)
   167e8:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   167ea:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   167ec:	4e0e      	ldr	r6, [pc, #56]	; (16828 <os_arch_os_init+0x84>)
   167ee:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   167f0:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   167f2:	4e0e      	ldr	r6, [pc, #56]	; (1682c <os_arch_os_init+0x88>)
   167f4:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   167f6:	25e0      	movs	r5, #224	; 0xe0
   167f8:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   167fc:	2520      	movs	r5, #32
   167fe:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   16800:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   16804:	f014 0f01 	tst.w	r4, #1
   16808:	d004      	beq.n	16814 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   1680a:	f8df c024 	ldr.w	ip, [pc, #36]	; 16830 <os_arch_os_init+0x8c>
   1680e:	df00      	svc	0
        err = OS_OK;
   16810:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   16812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   16814:	f7ff ffba 	bl	1678c <os_arch_init>
        err = OS_OK;
   16818:	2000      	movs	r0, #0
   1681a:	e7fa      	b.n	16812 <os_arch_os_init+0x6e>
   1681c:	e000ed00 	.word	0xe000ed00
   16820:	0001423b 	.word	0x0001423b
   16824:	000141bf 	.word	0x000141bf
   16828:	00014205 	.word	0x00014205
   1682c:	0001422f 	.word	0x0001422f
   16830:	0001678d 	.word	0x0001678d

00016834 <os_arch_start>:

uint32_t
os_arch_start(void)
{
   16834:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   16836:	f7ff fd7f 	bl	16338 <os_sched_next_task>
   1683a:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   1683c:	f7ff fca8 	bl	16190 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   16840:	6823      	ldr	r3, [r4, #0]
   16842:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   16844:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   16848:	2106      	movs	r1, #6
   1684a:	2080      	movs	r0, #128	; 0x80
   1684c:	f015 ffd0 	bl	2c7f0 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   16850:	4b03      	ldr	r3, [pc, #12]	; (16860 <os_arch_start+0x2c>)
   16852:	2201      	movs	r2, #1
   16854:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   16856:	4620      	mov	r0, r4
   16858:	f7ff ff5e 	bl	16718 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   1685c:	69a0      	ldr	r0, [r4, #24]
   1685e:	bd10      	pop	{r4, pc}
   16860:	10002508 	.word	0x10002508

00016864 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   16864:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   16866:	4815      	ldr	r0, [pc, #84]	; (168bc <os_arch_os_start+0x58>)
   16868:	6800      	ldr	r0, [r0, #0]
   1686a:	3804      	subs	r0, #4
   1686c:	f7fd fc9a 	bl	141a4 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   16870:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   16874:	b9ec      	cbnz	r4, 168b2 <os_arch_os_start+0x4e>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   16876:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   1687a:	f004 0403 	and.w	r4, r4, #3
   1687e:	2c02      	cmp	r4, #2
   16880:	d00d      	beq.n	1689e <os_arch_os_start+0x3a>
   16882:	d803      	bhi.n	1688c <os_arch_os_start+0x28>
   16884:	2c01      	cmp	r4, #1
   16886:	d80f      	bhi.n	168a8 <os_arch_os_start+0x44>
   16888:	2008      	movs	r0, #8
            svc_os_arch_start();
        }
    }

    return err;
}
   1688a:	bd10      	pop	{r4, pc}
        switch (__get_CONTROL() & 0x03) {
   1688c:	2c03      	cmp	r4, #3
   1688e:	d10b      	bne.n	168a8 <os_arch_os_start+0x44>
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   16890:	4c0b      	ldr	r4, [pc, #44]	; (168c0 <os_arch_os_start+0x5c>)
   16892:	6824      	ldr	r4, [r4, #0]
   16894:	f014 0f01 	tst.w	r4, #1
   16898:	d106      	bne.n	168a8 <os_arch_os_start+0x44>
                err = OS_ERR_PRIV;
   1689a:	2008      	movs	r0, #8
   1689c:	e7f5      	b.n	1688a <os_arch_os_start+0x26>
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   1689e:	4c08      	ldr	r4, [pc, #32]	; (168c0 <os_arch_os_start+0x5c>)
   168a0:	6824      	ldr	r4, [r4, #0]
   168a2:	f014 0f01 	tst.w	r4, #1
   168a6:	d106      	bne.n	168b6 <os_arch_os_start+0x52>
    SVC_Call(os_arch_start);
   168a8:	f8df c018 	ldr.w	ip, [pc, #24]	; 168c4 <os_arch_os_start+0x60>
   168ac:	df00      	svc	0
}
   168ae:	2000      	movs	r0, #0
   168b0:	e7eb      	b.n	1688a <os_arch_os_start+0x26>
    err = OS_ERR_IN_ISR;
   168b2:	2007      	movs	r0, #7
   168b4:	e7e9      	b.n	1688a <os_arch_os_start+0x26>
                err = OS_ERR_PRIV;
   168b6:	2008      	movs	r0, #8
   168b8:	e7e7      	b.n	1688a <os_arch_os_start+0x26>
   168ba:	bf00      	nop
   168bc:	10001b60 	.word	0x10001b60
   168c0:	10002f54 	.word	0x10002f54
   168c4:	00016835 	.word	0x00016835

000168c8 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   168c8:	4603      	mov	r3, r0
   168ca:	b128      	cbz	r0, 168d8 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   168cc:	2000      	movs	r0, #0
   168ce:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   168d0:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   168d2:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   168d4:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
   168d6:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   168d8:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   168da:	4770      	bx	lr

000168dc <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   168dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   168de:	4b2e      	ldr	r3, [pc, #184]	; (16998 <os_mutex_release+0xbc>)
   168e0:	681b      	ldr	r3, [r3, #0]
   168e2:	2b00      	cmp	r3, #0
   168e4:	d050      	beq.n	16988 <os_mutex_release+0xac>
   168e6:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   168e8:	2800      	cmp	r0, #0
   168ea:	d04f      	beq.n	1698c <os_mutex_release+0xb0>
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   168ec:	f7ff fc4a 	bl	16184 <os_sched_get_current_task>
   168f0:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   168f2:	88e3      	ldrh	r3, [r4, #6]
   168f4:	2b00      	cmp	r3, #0
   168f6:	d04b      	beq.n	16990 <os_mutex_release+0xb4>
   168f8:	68a2      	ldr	r2, [r4, #8]
   168fa:	4282      	cmp	r2, r0
   168fc:	d14a      	bne.n	16994 <os_mutex_release+0xb8>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   168fe:	2b01      	cmp	r3, #1
   16900:	d003      	beq.n	1690a <os_mutex_release+0x2e>
        --mu->mu_level;
   16902:	3b01      	subs	r3, #1
   16904:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   16906:	2000      	movs	r0, #0
        goto done;
   16908:	e03f      	b.n	1698a <os_mutex_release+0xae>
    }

    OS_ENTER_CRITICAL(sr);
   1690a:	f7ff ff0f 	bl	1672c <os_arch_save_sr>
   1690e:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   16910:	88e3      	ldrh	r3, [r4, #6]
   16912:	3b01      	subs	r3, #1
   16914:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   16916:	7aea      	ldrb	r2, [r5, #11]
   16918:	7963      	ldrb	r3, [r4, #5]
   1691a:	429a      	cmp	r2, r3
   1691c:	d11e      	bne.n	1695c <os_mutex_release+0x80>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   1691e:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   16920:	b146      	cbz	r6, 16934 <os_mutex_release+0x58>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   16922:	69f3      	ldr	r3, [r6, #28]
   16924:	b1fb      	cbz	r3, 16966 <os_mutex_release+0x8a>
        os_sched_wakeup(rdy);
   16926:	4630      	mov	r0, r6
   16928:	f7ff fc80 	bl	1622c <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   1692c:	2301      	movs	r3, #1
   1692e:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   16930:	7af3      	ldrb	r3, [r6, #11]
   16932:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   16934:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   16936:	b116      	cbz	r6, 1693e <os_mutex_release+0x62>
        rdy->t_lockcnt++;
   16938:	7bb3      	ldrb	r3, [r6, #14]
   1693a:	3301      	adds	r3, #1
   1693c:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   1693e:	7bab      	ldrb	r3, [r5, #14]
   16940:	3b01      	subs	r3, #1
   16942:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   16944:	f7ff fcf8 	bl	16338 <os_sched_next_task>
   16948:	4604      	mov	r4, r0
    if (rdy != current) {
   1694a:	4285      	cmp	r5, r0
   1694c:	d015      	beq.n	1697a <os_mutex_release+0x9e>
        resched = 1;
   1694e:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   16950:	4638      	mov	r0, r7
   16952:	f7ff fef1 	bl	16738 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   16956:	b995      	cbnz	r5, 1697e <os_mutex_release+0xa2>
        os_sched(rdy);
    }

    ret = OS_OK;
   16958:	2000      	movs	r0, #0
   1695a:	e016      	b.n	1698a <os_mutex_release+0xae>
        current->t_prio = mu->mu_prio;
   1695c:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   1695e:	4628      	mov	r0, r5
   16960:	f7ff fd02 	bl	16368 <os_sched_resort>
   16964:	e7db      	b.n	1691e <os_mutex_release+0x42>
        assert(rdy->t_obj);
   16966:	f7fd fe7d 	bl	14664 <hal_debugger_connected>
   1696a:	b100      	cbz	r0, 1696e <os_mutex_release+0x92>
   1696c:	be01      	bkpt	0x0001
   1696e:	2300      	movs	r3, #0
   16970:	461a      	mov	r2, r3
   16972:	4619      	mov	r1, r3
   16974:	4618      	mov	r0, r3
   16976:	f7fe fa15 	bl	14da4 <__assert_func>
    resched = 0;
   1697a:	2500      	movs	r5, #0
   1697c:	e7e8      	b.n	16950 <os_mutex_release+0x74>
        os_sched(rdy);
   1697e:	4620      	mov	r0, r4
   16980:	f7ff fce0 	bl	16344 <os_sched>
    ret = OS_OK;
   16984:	2000      	movs	r0, #0
   16986:	e000      	b.n	1698a <os_mutex_release+0xae>
        ret = OS_NOT_STARTED;
   16988:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   1698a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   1698c:	2003      	movs	r0, #3
   1698e:	e7fc      	b.n	1698a <os_mutex_release+0xae>
        ret = OS_BAD_MUTEX;
   16990:	2005      	movs	r0, #5
   16992:	e7fa      	b.n	1698a <os_mutex_release+0xae>
   16994:	2005      	movs	r0, #5
   16996:	e7f8      	b.n	1698a <os_mutex_release+0xae>
   16998:	10002508 	.word	0x10002508

0001699c <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   1699c:	4b36      	ldr	r3, [pc, #216]	; (16a78 <os_mutex_pend+0xdc>)
   1699e:	681b      	ldr	r3, [r3, #0]
   169a0:	2b00      	cmp	r3, #0
   169a2:	d065      	beq.n	16a70 <os_mutex_pend+0xd4>
{
   169a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   169a8:	4605      	mov	r5, r0
   169aa:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   169ac:	2800      	cmp	r0, #0
   169ae:	d061      	beq.n	16a74 <os_mutex_pend+0xd8>
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   169b0:	f7ff febc 	bl	1672c <os_arch_save_sr>
   169b4:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   169b6:	f7ff fbe5 	bl	16184 <os_sched_get_current_task>
   169ba:	4604      	mov	r4, r0
    if (mu->mu_level == 0) {
   169bc:	88ea      	ldrh	r2, [r5, #6]
   169be:	b19a      	cbz	r2, 169e8 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   169c0:	68ab      	ldr	r3, [r5, #8]
   169c2:	4283      	cmp	r3, r0
   169c4:	d01d      	beq.n	16a02 <os_mutex_pend+0x66>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   169c6:	b31f      	cbz	r7, 16a10 <os_mutex_pend+0x74>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   169c8:	7ad9      	ldrb	r1, [r3, #11]
   169ca:	7ac2      	ldrb	r2, [r0, #11]
   169cc:	4291      	cmp	r1, r2
   169ce:	d824      	bhi.n	16a1a <os_mutex_pend+0x7e>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   169d0:	6828      	ldr	r0, [r5, #0]
   169d2:	b360      	cbz	r0, 16a2e <os_mutex_pend+0x92>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   169d4:	4603      	mov	r3, r0
    last = NULL;
   169d6:	2100      	movs	r1, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   169d8:	b323      	cbz	r3, 16a24 <os_mutex_pend+0x88>
            if (current->t_prio < entry->t_prio) {
   169da:	7ae6      	ldrb	r6, [r4, #11]
   169dc:	7ada      	ldrb	r2, [r3, #11]
   169de:	4296      	cmp	r6, r2
   169e0:	d320      	bcc.n	16a24 <os_mutex_pend+0x88>
                break;
            }
            last = entry;
   169e2:	4619      	mov	r1, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   169e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   169e6:	e7f7      	b.n	169d8 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   169e8:	60a8      	str	r0, [r5, #8]
        mu->mu_prio  = current->t_prio;
   169ea:	7ac3      	ldrb	r3, [r0, #11]
   169ec:	716b      	strb	r3, [r5, #5]
        current->t_lockcnt++;
   169ee:	7b83      	ldrb	r3, [r0, #14]
   169f0:	3301      	adds	r3, #1
   169f2:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   169f4:	2301      	movs	r3, #1
   169f6:	80eb      	strh	r3, [r5, #6]
        OS_EXIT_CRITICAL(sr);
   169f8:	4640      	mov	r0, r8
   169fa:	f7ff fe9d 	bl	16738 <os_arch_restore_sr>
        ret = OS_OK;
   169fe:	2000      	movs	r0, #0
        goto done;
   16a00:	e032      	b.n	16a68 <os_mutex_pend+0xcc>
        ++mu->mu_level;
   16a02:	3201      	adds	r2, #1
   16a04:	80ea      	strh	r2, [r5, #6]
        OS_EXIT_CRITICAL(sr);
   16a06:	4640      	mov	r0, r8
   16a08:	f7ff fe96 	bl	16738 <os_arch_restore_sr>
        ret = OS_OK;
   16a0c:	2000      	movs	r0, #0
        goto done;
   16a0e:	e02b      	b.n	16a68 <os_mutex_pend+0xcc>
        OS_EXIT_CRITICAL(sr);
   16a10:	4640      	mov	r0, r8
   16a12:	f7ff fe91 	bl	16738 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   16a16:	2006      	movs	r0, #6
        goto done;
   16a18:	e026      	b.n	16a68 <os_mutex_pend+0xcc>
        mu->mu_owner->t_prio = current->t_prio;
   16a1a:	72da      	strb	r2, [r3, #11]
        os_sched_resort(mu->mu_owner);
   16a1c:	68a8      	ldr	r0, [r5, #8]
   16a1e:	f7ff fca3 	bl	16368 <os_sched_resort>
   16a22:	e7d5      	b.n	169d0 <os_mutex_pend+0x34>
        }
    }

    if (last) {
   16a24:	b119      	cbz	r1, 16a2e <os_mutex_pend+0x92>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   16a26:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   16a28:	64e3      	str	r3, [r4, #76]	; 0x4c
   16a2a:	64cc      	str	r4, [r1, #76]	; 0x4c
   16a2c:	e001      	b.n	16a32 <os_mutex_pend+0x96>
    } else {
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   16a2e:	64e0      	str	r0, [r4, #76]	; 0x4c
   16a30:	602c      	str	r4, [r5, #0]
    }

    /* Set mutex pointer in task */
    current->t_obj = mu;
   16a32:	61e5      	str	r5, [r4, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   16a34:	7b63      	ldrb	r3, [r4, #13]
   16a36:	f043 0304 	orr.w	r3, r3, #4
   16a3a:	7363      	strb	r3, [r4, #13]
    os_sched_sleep(current, timeout);
   16a3c:	4639      	mov	r1, r7
   16a3e:	4620      	mov	r0, r4
   16a40:	f7ff fbac 	bl	1619c <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   16a44:	4640      	mov	r0, r8
   16a46:	f7ff fe77 	bl	16738 <os_arch_restore_sr>

    os_sched(NULL);
   16a4a:	2000      	movs	r0, #0
   16a4c:	f7ff fc7a 	bl	16344 <os_sched>

    OS_ENTER_CRITICAL(sr);
   16a50:	f7ff fe6c 	bl	1672c <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   16a54:	7b63      	ldrb	r3, [r4, #13]
   16a56:	f023 0304 	bic.w	r3, r3, #4
   16a5a:	7363      	strb	r3, [r4, #13]
    OS_EXIT_CRITICAL(sr);
   16a5c:	f7ff fe6c 	bl	16738 <os_arch_restore_sr>

    /* If we are owner we did not time out. */
    if (mu->mu_owner == current) {
   16a60:	68ab      	ldr	r3, [r5, #8]
   16a62:	42a3      	cmp	r3, r4
   16a64:	d002      	beq.n	16a6c <os_mutex_pend+0xd0>
        ret = OS_OK;
    } else {
        ret = OS_TIMEOUT;
   16a66:	2006      	movs	r0, #6
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   16a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = OS_OK;
   16a6c:	2000      	movs	r0, #0
   16a6e:	e7fb      	b.n	16a68 <os_mutex_pend+0xcc>
        ret = OS_NOT_STARTED;
   16a70:	2009      	movs	r0, #9
}
   16a72:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   16a74:	2003      	movs	r0, #3
   16a76:	e7f7      	b.n	16a68 <os_mutex_pend+0xcc>
   16a78:	10002508 	.word	0x10002508

00016a7c <lrand48>:
#include <stdint.h>

extern unsigned short __rand48_seed[3];	/* Common with mrand48.c, srand48.c */

long lrand48(void)
{
   16a7c:	b508      	push	{r3, lr}
	return (uint32_t) jrand48(__rand48_seed) >> 1;
   16a7e:	4802      	ldr	r0, [pc, #8]	; (16a88 <lrand48+0xc>)
   16a80:	f000 f892 	bl	16ba8 <jrand48>
}
   16a84:	0840      	lsrs	r0, r0, #1
   16a86:	bd08      	pop	{r3, pc}
   16a88:	10002f58 	.word	0x10002f58

00016a8c <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7) || defined(ARCH_cortex_m33)
    asm (".syntax unified                   \n"
   16a8c:	b470      	push	{r4, r5, r6}
   16a8e:	f04f 0500 	mov.w	r5, #0
   16a92:	f022 0603 	bic.w	r6, r2, #3
   16a96:	e005      	b.n	16aa4 <test1>

00016a98 <loop1>:
   16a98:	5943      	ldr	r3, [r0, r5]
   16a9a:	594c      	ldr	r4, [r1, r5]
   16a9c:	42a3      	cmp	r3, r4
   16a9e:	d104      	bne.n	16aaa <res1>
   16aa0:	f105 0504 	add.w	r5, r5, #4

00016aa4 <test1>:
   16aa4:	42b5      	cmp	r5, r6
   16aa6:	d1f7      	bne.n	16a98 <loop1>
   16aa8:	e00d      	b.n	16ac6 <test2>

00016aaa <res1>:
   16aaa:	ba1b      	rev	r3, r3
   16aac:	ba24      	rev	r4, r4
   16aae:	1b1b      	subs	r3, r3, r4
   16ab0:	bf8c      	ite	hi
   16ab2:	2301      	movhi	r3, #1
   16ab4:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   16ab8:	e009      	b.n	16ace <done>

00016aba <loop2>:
   16aba:	5d43      	ldrb	r3, [r0, r5]
   16abc:	5d4c      	ldrb	r4, [r1, r5]
   16abe:	1b1b      	subs	r3, r3, r4
   16ac0:	d105      	bne.n	16ace <done>
   16ac2:	f105 0501 	add.w	r5, r5, #1

00016ac6 <test2>:
   16ac6:	4295      	cmp	r5, r2
   16ac8:	d1f7      	bne.n	16aba <loop2>
   16aca:	f04f 0300 	mov.w	r3, #0

00016ace <done>:
   16ace:	4618      	mov	r0, r3
   16ad0:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   16ad2:	4770      	bx	lr

00016ad4 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   16ad4:	e001      	b.n	16ada <test1>

00016ad6 <loop1>:
   16ad6:	588b      	ldr	r3, [r1, r2]
   16ad8:	5083      	str	r3, [r0, r2]

00016ada <test1>:
   16ada:	3a04      	subs	r2, #4
   16adc:	d5fb      	bpl.n	16ad6 <loop1>
   16ade:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   16ae2:	e001      	b.n	16ae8 <test2>

00016ae4 <loop2>:
   16ae4:	5c8b      	ldrb	r3, [r1, r2]
   16ae6:	5483      	strb	r3, [r0, r2]

00016ae8 <test2>:
   16ae8:	3a01      	subs	r2, #1
   16aea:	d5fb      	bpl.n	16ae4 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   16aec:	4770      	bx	lr

00016aee <memmove>:
 */

#include <string.h>

void *memmove(void *dst, const void *src, size_t n)
{
   16aee:	b410      	push	{r4}
		q += (n - 1);
		asm volatile("std; rep; movsb; cld"
			     : "+c" (n), "+S"(p), "+D"(q));
	}
#else
	if (q < p) {
   16af0:	4281      	cmp	r1, r0
   16af2:	d809      	bhi.n	16b08 <memmove+0x1a>
		while (n--) {
			*q++ = *p++;
		}
	} else {
		p += n;
   16af4:	4411      	add	r1, r2
		q += n;
   16af6:	1883      	adds	r3, r0, r2
		while (n--) {
   16af8:	1e54      	subs	r4, r2, #1
   16afa:	b172      	cbz	r2, 16b1a <memmove+0x2c>
			*--q = *--p;
   16afc:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
   16b00:	f803 2d01 	strb.w	r2, [r3, #-1]!
		while (n--) {
   16b04:	4622      	mov	r2, r4
   16b06:	e7f7      	b.n	16af8 <memmove+0xa>
	char *q = dst;
   16b08:	4603      	mov	r3, r0
		while (n--) {
   16b0a:	1e54      	subs	r4, r2, #1
   16b0c:	b12a      	cbz	r2, 16b1a <memmove+0x2c>
			*q++ = *p++;
   16b0e:	f811 2b01 	ldrb.w	r2, [r1], #1
   16b12:	f803 2b01 	strb.w	r2, [r3], #1
		while (n--) {
   16b16:	4622      	mov	r2, r4
   16b18:	e7f7      	b.n	16b0a <memmove+0x1c>
		}
	}
#endif

	return dst;
}
   16b1a:	bc10      	pop	{r4}
   16b1c:	4770      	bx	lr

00016b1e <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   16b1e:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   16b20:	4605      	mov	r5, r0
   16b22:	b2c9      	uxtb	r1, r1
   16b24:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   16b28:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   16b2c:	18ab      	adds	r3, r5, r2
   16b2e:	2403      	movs	r4, #3
   16b30:	4023      	ands	r3, r4
   16b32:	1ad3      	subs	r3, r2, r3
   16b34:	d40b      	bmi.n	16b4e <memset+0x30>
   16b36:	e001      	b.n	16b3c <memset+0x1e>
   16b38:	3a01      	subs	r2, #1
   16b3a:	54a9      	strb	r1, [r5, r2]
   16b3c:	429a      	cmp	r2, r3
   16b3e:	d1fb      	bne.n	16b38 <memset+0x1a>
   16b40:	e000      	b.n	16b44 <memset+0x26>
   16b42:	50a9      	str	r1, [r5, r2]
   16b44:	3a04      	subs	r2, #4
   16b46:	d5fc      	bpl.n	16b42 <memset+0x24>
   16b48:	3204      	adds	r2, #4
   16b4a:	e000      	b.n	16b4e <memset+0x30>
   16b4c:	54a9      	strb	r1, [r5, r2]
   16b4e:	3a01      	subs	r2, #1
   16b50:	d5fc      	bpl.n	16b4c <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   16b52:	bc30      	pop	{r4, r5}
   16b54:	4770      	bx	lr

00016b56 <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   16b56:	b410      	push	{r4}
   16b58:	4604      	mov	r4, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   16b5a:	7822      	ldrb	r2, [r4, #0]
   16b5c:	3401      	adds	r4, #1
   16b5e:	7808      	ldrb	r0, [r1, #0]
   16b60:	3101      	adds	r1, #1
		if (d || !ch)
   16b62:	1a10      	subs	r0, r2, r0
   16b64:	d101      	bne.n	16b6a <strcmp+0x14>
   16b66:	2a00      	cmp	r2, #0
   16b68:	d1f7      	bne.n	16b5a <strcmp+0x4>
			break;
	}

	return d;
}
   16b6a:	bc10      	pop	{r4}
   16b6c:	4770      	bx	lr

00016b6e <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   16b6e:	4603      	mov	r3, r0
	while (*ss)
   16b70:	781a      	ldrb	r2, [r3, #0]
   16b72:	b10a      	cbz	r2, 16b78 <strlen+0xa>
		ss++;
   16b74:	3301      	adds	r3, #1
   16b76:	e7fb      	b.n	16b70 <strlen+0x2>
	return ss - s;
}
   16b78:	1a18      	subs	r0, r3, r0
   16b7a:	4770      	bx	lr

00016b7c <strncat>:
 */

#include <string.h>

char *strncat(char *dst, const char *src, size_t n)
{
   16b7c:	b570      	push	{r4, r5, r6, lr}
   16b7e:	4606      	mov	r6, r0
   16b80:	460c      	mov	r4, r1
   16b82:	4615      	mov	r5, r2
	char *q = strchr(dst, '\0');
   16b84:	f7ff fff3 	bl	16b6e <strlen>
   16b88:	4430      	add	r0, r6
	const char *p = src;
	char ch;

	while (n--) {
   16b8a:	462b      	mov	r3, r5
   16b8c:	3d01      	subs	r5, #1
   16b8e:	b13b      	cbz	r3, 16ba0 <strncat+0x24>
		*q++ = ch = *p++;
   16b90:	4621      	mov	r1, r4
   16b92:	f811 3b01 	ldrb.w	r3, [r1], #1
   16b96:	f800 3b01 	strb.w	r3, [r0], #1
		if (!ch)
   16b9a:	b113      	cbz	r3, 16ba2 <strncat+0x26>
		*q++ = ch = *p++;
   16b9c:	460c      	mov	r4, r1
   16b9e:	e7f4      	b.n	16b8a <strncat+0xe>
			return dst;
	}
	*q = '\0';
   16ba0:	7003      	strb	r3, [r0, #0]

	return dst;
}
   16ba2:	4630      	mov	r0, r6
   16ba4:	bd70      	pop	{r4, r5, r6, pc}
	...

00016ba8 <jrand48>:

#include <stdlib.h>
#include <stdint.h>

long jrand48(unsigned short xsubi[3])
{
   16ba8:	b4f0      	push	{r4, r5, r6, r7}
   16baa:	4601      	mov	r1, r0
	uint64_t x;

	/* The xsubi[] array is littleendian by spec */
	x = (uint64_t) (uint16_t) xsubi[0] +
   16bac:	8804      	ldrh	r4, [r0, #0]
   16bae:	2500      	movs	r5, #0
	    ((uint64_t) (uint16_t) xsubi[1] << 16) +
   16bb0:	8846      	ldrh	r6, [r0, #2]
   16bb2:	0432      	lsls	r2, r6, #16
	x = (uint64_t) (uint16_t) xsubi[0] +
   16bb4:	18a2      	adds	r2, r4, r2
   16bb6:	f04f 0000 	mov.w	r0, #0
   16bba:	eb45 0000 	adc.w	r0, r5, r0
	    ((uint64_t) (uint16_t) xsubi[2] << 32);
   16bbe:	2300      	movs	r3, #0
   16bc0:	888c      	ldrh	r4, [r1, #4]
	x = (uint64_t) (uint16_t) xsubi[0] +
   16bc2:	18d2      	adds	r2, r2, r3
   16bc4:	eb44 0000 	adc.w	r0, r4, r0

	x = (0x5deece66dULL * x) + 0xb;
   16bc8:	4c0a      	ldr	r4, [pc, #40]	; (16bf4 <jrand48+0x4c>)
   16bca:	2305      	movs	r3, #5
   16bcc:	fb03 f302 	mul.w	r3, r3, r2
   16bd0:	fb04 3000 	mla	r0, r4, r0, r3
   16bd4:	fba2 2304 	umull	r2, r3, r2, r4
   16bd8:	4403      	add	r3, r0
   16bda:	f112 000b 	adds.w	r0, r2, #11
   16bde:	f143 0300 	adc.w	r3, r3, #0

	xsubi[0] = (unsigned short)(uint16_t) x;
   16be2:	8008      	strh	r0, [r1, #0]
	xsubi[1] = (unsigned short)(uint16_t) (x >> 16);
   16be4:	0c00      	lsrs	r0, r0, #16
   16be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   16bea:	8048      	strh	r0, [r1, #2]
	xsubi[2] = (unsigned short)(uint16_t) (x >> 32);
   16bec:	808b      	strh	r3, [r1, #4]

	return (long)(int32_t) (x >> 16);
}
   16bee:	bcf0      	pop	{r4, r5, r6, r7}
   16bf0:	4770      	bx	lr
   16bf2:	bf00      	nop
   16bf4:	deece66d 	.word	0xdeece66d

00016bf8 <imgr_my_version>:
    return 0;
}

int
imgr_my_version(struct image_version *ver)
{
   16bf8:	b508      	push	{r3, lr}
   16bfa:	4601      	mov	r1, r0
    return img_mgmt_read_info(boot_current_slot, ver, NULL, NULL);
   16bfc:	2300      	movs	r3, #0
   16bfe:	461a      	mov	r2, r3
   16c00:	4802      	ldr	r0, [pc, #8]	; (16c0c <imgr_my_version+0x14>)
   16c02:	6800      	ldr	r0, [r0, #0]
   16c04:	f004 f858 	bl	1acb8 <img_mgmt_read_info>
}
   16c08:	bd08      	pop	{r3, pc}
   16c0a:	bf00      	nop
   16c0c:	10004fb0 	.word	0x10004fb0

00016c10 <imgmgr_find_best_area_id>:
    return -1;
}

int
imgmgr_find_best_area_id(void)
{
   16c10:	b530      	push	{r4, r5, lr}
   16c12:	b083      	sub	sp, #12
    struct image_version ver;
    int best = -1;
    int i;
    int rc;

    for (i = 0; i < 2; i++) {
   16c14:	2400      	movs	r4, #0
    int best = -1;
   16c16:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; i < 2; i++) {
   16c1a:	e000      	b.n	16c1e <imgmgr_find_best_area_id+0xe>
   16c1c:	3401      	adds	r4, #1
   16c1e:	2c01      	cmp	r4, #1
   16c20:	dc10      	bgt.n	16c44 <imgmgr_find_best_area_id+0x34>
        rc = img_mgmt_read_info(i, &ver, NULL, NULL);
   16c22:	2300      	movs	r3, #0
   16c24:	461a      	mov	r2, r3
   16c26:	4669      	mov	r1, sp
   16c28:	4620      	mov	r0, r4
   16c2a:	f004 f845 	bl	1acb8 <img_mgmt_read_info>
        if (rc < 0) {
   16c2e:	2800      	cmp	r0, #0
   16c30:	dbf4      	blt.n	16c1c <imgmgr_find_best_area_id+0xc>
            continue;
        }
        if (rc == 0) {
   16c32:	b930      	cbnz	r0, 16c42 <imgmgr_find_best_area_id+0x32>
            /* Image in slot is ok. */
            if (img_mgmt_slot_in_use(i)) {
   16c34:	4620      	mov	r0, r4
   16c36:	f004 fad8 	bl	1b1ea <img_mgmt_slot_in_use>
   16c3a:	2800      	cmp	r0, #0
   16c3c:	d1ee      	bne.n	16c1c <imgmgr_find_best_area_id+0xc>
            } else {
                /*
                 * Not active slot, but image is ok. Use it if there are
                 * no better candidates.
                 */
                best = i;
   16c3e:	4625      	mov	r5, r4
   16c40:	e7ec      	b.n	16c1c <imgmgr_find_best_area_id+0xc>
            }
            continue;
        }
        best = i;
   16c42:	4625      	mov	r5, r4
        break;
    }
    if (best >= 0) {
   16c44:	2d00      	cmp	r5, #0
   16c46:	da02      	bge.n	16c4e <imgmgr_find_best_area_id+0x3e>
        best = flash_area_id_from_image_slot(best);
    }
    return best;
}
   16c48:	4628      	mov	r0, r5
   16c4a:	b003      	add	sp, #12
   16c4c:	bd30      	pop	{r4, r5, pc}
        best = flash_area_id_from_image_slot(best);
   16c4e:	4628      	mov	r0, r5
   16c50:	f001 ffc9 	bl	18be6 <flash_area_id_from_image_slot>
   16c54:	4605      	mov	r5, r0
    return best;
   16c56:	e7f7      	b.n	16c48 <imgmgr_find_best_area_id+0x38>

00016c58 <imgr_erase_state>:

static int
imgr_erase_state(struct mgmt_ctxt *ctxt)
{
   16c58:	b570      	push	{r4, r5, r6, lr}
   16c5a:	b082      	sub	sp, #8
   16c5c:	4604      	mov	r4, r0
    const struct flash_area *fa;
    int area_id;
    int rc;
    CborError g_err = CborNoError;

    area_id = imgmgr_find_best_area_id();
   16c5e:	f7ff ffd7 	bl	16c10 <imgmgr_find_best_area_id>
    if (area_id >= 0) {
   16c62:	2800      	cmp	r0, #0
   16c64:	db1b      	blt.n	16c9e <imgr_erase_state+0x46>
        rc = flash_area_open(area_id, &fa);
   16c66:	a901      	add	r1, sp, #4
   16c68:	b2c0      	uxtb	r0, r0
   16c6a:	f001 ff07 	bl	18a7c <flash_area_open>
        if (rc) {
   16c6e:	b9d0      	cbnz	r0, 16ca6 <imgr_erase_state+0x4e>
            return img_mgmt_error_rsp(ctxt, MGMT_ERR_EINVAL,
                                      img_mgmt_err_str_flash_open_failed);
        }

        rc = flash_area_erase(fa, 0, sizeof(struct image_header));
   16c70:	2220      	movs	r2, #32
   16c72:	2100      	movs	r1, #0
   16c74:	9801      	ldr	r0, [sp, #4]
   16c76:	f001 ff7f 	bl	18b78 <flash_area_erase>
        if (rc) {
   16c7a:	4605      	mov	r5, r0
   16c7c:	b9a8      	cbnz	r0, 16caa <imgr_erase_state+0x52>
CBOR_API CborError cbor_encode_negative_int(CborEncoder *encoder, uint64_t absolute_value);
CBOR_API CborError cbor_encode_simple_value(CborEncoder *encoder, uint8_t value);
CBOR_API CborError cbor_encode_tag(CborEncoder *encoder, CborTag tag);
CBOR_API CborError cbor_encode_text_string(CborEncoder *encoder, const char *string, size_t length);
CBOR_INLINE_API CborError cbor_encode_text_stringz(CborEncoder *encoder, const char *string)
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   16c7e:	2202      	movs	r2, #2
   16c80:	490b      	ldr	r1, [pc, #44]	; (16cb0 <imgr_erase_state+0x58>)
   16c82:	4620      	mov	r0, r4
   16c84:	f012 f988 	bl	28f98 <cbor_encode_text_string>
   16c88:	4606      	mov	r6, r0
    } else {
        return img_mgmt_error_rsp(ctxt, MGMT_ERR_ENOMEM, img_mgmt_err_str_no_slot);
    }

    g_err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    g_err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
   16c8a:	2200      	movs	r2, #0
   16c8c:	2300      	movs	r3, #0
   16c8e:	4620      	mov	r0, r4
   16c90:	f012 f90d 	bl	28eae <cbor_encode_int>

    if (g_err) {
   16c94:	ea50 0306 	orrs.w	r3, r0, r6
   16c98:	d002      	beq.n	16ca0 <imgr_erase_state+0x48>
        return MGMT_ERR_ENOMEM;
   16c9a:	2502      	movs	r5, #2
   16c9c:	e000      	b.n	16ca0 <imgr_erase_state+0x48>
        return img_mgmt_error_rsp(ctxt, MGMT_ERR_ENOMEM, img_mgmt_err_str_no_slot);
   16c9e:	2502      	movs	r5, #2
    }

    return 0;
}
   16ca0:	4628      	mov	r0, r5
   16ca2:	b002      	add	sp, #8
   16ca4:	bd70      	pop	{r4, r5, r6, pc}
            return img_mgmt_error_rsp(ctxt, MGMT_ERR_EINVAL,
   16ca6:	2503      	movs	r5, #3
   16ca8:	e7fa      	b.n	16ca0 <imgr_erase_state+0x48>
            return img_mgmt_error_rsp(ctxt, MGMT_ERR_EINVAL,
   16caa:	2503      	movs	r5, #3
   16cac:	e7f8      	b.n	16ca0 <imgr_erase_state+0x48>
   16cae:	bf00      	nop
   16cb0:	00030688 	.word	0x00030688

00016cb4 <imgmgr_module_init>:

void
imgmgr_module_init(void)
{
   16cb4:	b508      	push	{r3, lr}
    int rc;
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   16cb6:	4b08      	ldr	r3, [pc, #32]	; (16cd8 <imgmgr_module_init+0x24>)
   16cb8:	781b      	ldrb	r3, [r3, #0]
   16cba:	b11b      	cbz	r3, 16cc4 <imgmgr_module_init+0x10>

    mgmt_register_group(&imgr_mgmt_group);
   16cbc:	4807      	ldr	r0, [pc, #28]	; (16cdc <imgmgr_module_init+0x28>)
   16cbe:	f005 f9f1 	bl	1c0a4 <mgmt_register_group>
    rc = imgr_cli_register();
    SYSINIT_PANIC_ASSERT(rc == 0);
#else
    (void) rc;
#endif
}
   16cc2:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   16cc4:	f7fd fcce 	bl	14664 <hal_debugger_connected>
   16cc8:	b100      	cbz	r0, 16ccc <imgmgr_module_init+0x18>
   16cca:	be01      	bkpt	0x0001
   16ccc:	2300      	movs	r3, #0
   16cce:	461a      	mov	r2, r3
   16cd0:	4619      	mov	r1, r3
   16cd2:	4618      	mov	r0, r3
   16cd4:	f7fe f866 	bl	14da4 <__assert_func>
   16cd8:	10003404 	.word	0x10003404
   16cdc:	10000188 	.word	0x10000188

00016ce0 <imgr_ver_str>:
    return 0;
}

int
imgr_ver_str(struct image_version *ver, char *dst)
{
   16ce0:	b500      	push	{lr}
   16ce2:	b083      	sub	sp, #12
   16ce4:	4602      	mov	r2, r0
   16ce6:	4608      	mov	r0, r1
    if (ver->iv_build_num) {
   16ce8:	6853      	ldr	r3, [r2, #4]
   16cea:	b153      	cbz	r3, 16d02 <imgr_ver_str+0x22>
        return sprintf(dst, "%u.%u.%u.%lu",
          ver->iv_major, ver->iv_minor, ver->iv_revision,
   16cec:	8851      	ldrh	r1, [r2, #2]
        return sprintf(dst, "%u.%u.%u.%lu",
   16cee:	9301      	str	r3, [sp, #4]
   16cf0:	9100      	str	r1, [sp, #0]
   16cf2:	7853      	ldrb	r3, [r2, #1]
   16cf4:	7812      	ldrb	r2, [r2, #0]
   16cf6:	4907      	ldr	r1, [pc, #28]	; (16d14 <imgr_ver_str+0x34>)
   16cf8:	f016 fdce 	bl	2d898 <sprintf>
          (unsigned long)ver->iv_build_num);
    } else {
        return sprintf(dst, "%u.%u.%u",
          ver->iv_major, ver->iv_minor, ver->iv_revision);
    }
}
   16cfc:	b003      	add	sp, #12
   16cfe:	f85d fb04 	ldr.w	pc, [sp], #4
          ver->iv_major, ver->iv_minor, ver->iv_revision);
   16d02:	8853      	ldrh	r3, [r2, #2]
        return sprintf(dst, "%u.%u.%u",
   16d04:	9300      	str	r3, [sp, #0]
   16d06:	7853      	ldrb	r3, [r2, #1]
   16d08:	7812      	ldrb	r2, [r2, #0]
   16d0a:	4903      	ldr	r1, [pc, #12]	; (16d18 <imgr_ver_str+0x38>)
   16d0c:	f016 fdc4 	bl	2d898 <sprintf>
   16d10:	e7f4      	b.n	16cfc <imgr_ver_str+0x1c>
   16d12:	bf00      	nop
   16d14:	000306c4 	.word	0x000306c4
   16d18:	000306d4 	.word	0x000306d4

00016d1c <smp_free_buf>:
}

static void
smp_free_buf(void *m, void *arg)
{
    if (!m) {
   16d1c:	b118      	cbz	r0, 16d26 <smp_free_buf+0xa>
{
   16d1e:	b508      	push	{r3, lr}
        return;
    }

    os_mbuf_free_chain(m);
   16d20:	f7fe fca8 	bl	15674 <os_mbuf_free_chain>
}
   16d24:	bd08      	pop	{r3, pc}
   16d26:	4770      	bx	lr

00016d28 <smp_init_writer>:
smp_init_writer(struct cbor_encoder_writer *writer, void *m,
		void *arg)
{
    struct cbor_mbuf_writer *cmw;
     
    if (!writer) {
   16d28:	b120      	cbz	r0, 16d34 <smp_init_writer+0xc>
{
   16d2a:	b508      	push	{r3, lr}
        return MGMT_ERR_EINVAL;
    }

    cmw = (struct cbor_mbuf_writer *)writer;
    cbor_mbuf_writer_init(cmw, m);
   16d2c:	f011 fff6 	bl	28d1c <cbor_mbuf_writer_init>

    return 0;
   16d30:	2000      	movs	r0, #0
}
   16d32:	bd08      	pop	{r3, pc}
        return MGMT_ERR_EINVAL;
   16d34:	2003      	movs	r0, #3
}
   16d36:	4770      	bx	lr

00016d38 <smp_init_reader>:
    if (!reader) {
   16d38:	b128      	cbz	r0, 16d46 <smp_init_reader+0xe>
{
   16d3a:	b508      	push	{r3, lr}
    cbor_mbuf_reader_init(cmr, m, 0);
   16d3c:	2200      	movs	r2, #0
   16d3e:	f011 ffb1 	bl	28ca4 <cbor_mbuf_reader_init>
    return 0;
   16d42:	2000      	movs	r0, #0
}
   16d44:	bd08      	pop	{r3, pc}
        return MGMT_ERR_EINVAL;
   16d46:	2003      	movs	r0, #3
}
   16d48:	4770      	bx	lr

00016d4a <smp_write_at>:
    if (!writer) {
   16d4a:	b160      	cbz	r0, 16d66 <smp_write_at+0x1c>
{
   16d4c:	b538      	push	{r3, r4, r5, lr}
   16d4e:	4605      	mov	r5, r0
    m = cmw->m;
   16d50:	6884      	ldr	r4, [r0, #8]
    if (offset > OS_MBUF_PKTLEN(m)) {
   16d52:	8a20      	ldrh	r0, [r4, #16]
   16d54:	4288      	cmp	r0, r1
   16d56:	d308      	bcc.n	16d6a <smp_write_at+0x20>
    rc = os_mbuf_copyinto(m, offset, data, len);
   16d58:	4620      	mov	r0, r4
   16d5a:	f7fe fe52 	bl	15a02 <os_mbuf_copyinto>
    if (rc) {
   16d5e:	b930      	cbnz	r0, 16d6e <smp_write_at+0x24>
    writer->bytes_written = OS_MBUF_PKTLEN(m);
   16d60:	8a23      	ldrh	r3, [r4, #16]
   16d62:	606b      	str	r3, [r5, #4]
}
   16d64:	bd38      	pop	{r3, r4, r5, pc}
        return MGMT_ERR_EINVAL;
   16d66:	2003      	movs	r0, #3
}
   16d68:	4770      	bx	lr
        return MGMT_ERR_EINVAL;
   16d6a:	2003      	movs	r0, #3
   16d6c:	e7fa      	b.n	16d64 <smp_write_at+0x1a>
        return MGMT_ERR_ENOMEM;
   16d6e:	2002      	movs	r0, #2
   16d70:	e7f8      	b.n	16d64 <smp_write_at+0x1a>

00016d72 <smp_reset_buf>:
    if (!m) {
   16d72:	b128      	cbz	r0, 16d80 <smp_reset_buf+0xe>
{
   16d74:	b508      	push	{r3, lr}
    os_mbuf_adj(m, -1 * OS_MBUF_PKTLEN((struct os_mbuf *)m));
   16d76:	8a01      	ldrh	r1, [r0, #16]
   16d78:	4249      	negs	r1, r1
   16d7a:	f7fe fd52 	bl	15822 <os_mbuf_adj>
}
   16d7e:	bd08      	pop	{r3, pc}
   16d80:	4770      	bx	lr

00016d82 <smp_trim_front>:
{
   16d82:	b508      	push	{r3, lr}
    os_mbuf_adj(m, len);
   16d84:	f7fe fd4d 	bl	15822 <os_mbuf_adj>
}
   16d88:	bd08      	pop	{r3, pc}

00016d8a <smp_alloc_rsp>:
{
   16d8a:	b538      	push	{r3, r4, r5, lr}
   if (!req) {
   16d8c:	4604      	mov	r4, r0
   16d8e:	b180      	cbz	r0, 16db2 <smp_alloc_rsp+0x28>
   rsp = os_msys_get_pkthdr(0, OS_MBUF_USRHDR_LEN(m));
   16d90:	7941      	ldrb	r1, [r0, #5]
   16d92:	3908      	subs	r1, #8
   16d94:	b289      	uxth	r1, r1
   16d96:	2000      	movs	r0, #0
   16d98:	f7ff f906 	bl	15fa8 <os_msys_get_pkthdr>
   if (!rsp) {
   16d9c:	4605      	mov	r5, r0
   16d9e:	b130      	cbz	r0, 16dae <smp_alloc_rsp+0x24>
   memcpy(OS_MBUF_USRHDR(rsp), OS_MBUF_USRHDR(m), OS_MBUF_USRHDR_LEN(m));
   16da0:	7962      	ldrb	r2, [r4, #5]
   16da2:	3a08      	subs	r2, #8
   16da4:	f104 0118 	add.w	r1, r4, #24
   16da8:	3018      	adds	r0, #24
   16daa:	f7ff fe93 	bl	16ad4 <memcpy>
}
   16dae:	4628      	mov	r0, r5
   16db0:	bd38      	pop	{r3, r4, r5, pc}
       return NULL;
   16db2:	4605      	mov	r5, r0
   16db4:	e7fb      	b.n	16dae <smp_alloc_rsp+0x24>

00016db6 <smp_rsp_frag_alloc>:
/**
 * Allocates an mbuf to costain an outgoing response fragment.
 */
static struct os_mbuf *
smp_rsp_frag_alloc(uint16_t frag_size, void *arg)
{
   16db6:	b538      	push	{r3, r4, r5, lr}
   16db8:	460c      	mov	r4, r1
    /* We need to duplicate the user header from the source response, as that
     * is where transport-specific information is stored.
     */
    src_rsp = arg;

    frag = os_msys_get_pkthdr(frag_size, OS_MBUF_USRHDR_LEN(src_rsp));
   16dba:	7949      	ldrb	r1, [r1, #5]
   16dbc:	3908      	subs	r1, #8
   16dbe:	b289      	uxth	r1, r1
   16dc0:	f7ff f8f2 	bl	15fa8 <os_msys_get_pkthdr>
    if (frag != NULL) {
   16dc4:	4605      	mov	r5, r0
   16dc6:	b130      	cbz	r0, 16dd6 <smp_rsp_frag_alloc+0x20>
        /* Copy the user header from the response into the fragmest mbuf. */
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
               OS_MBUF_USRHDR_LEN(src_rsp));
   16dc8:	7962      	ldrb	r2, [r4, #5]
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
   16dca:	3a08      	subs	r2, #8
   16dcc:	f104 0118 	add.w	r1, r4, #24
   16dd0:	3018      	adds	r0, #24
   16dd2:	f7ff fe7f 	bl	16ad4 <memcpy>
    }

    return frag;
}
   16dd6:	4628      	mov	r0, r5
   16dd8:	bd38      	pop	{r3, r4, r5, pc}
	...

00016ddc <smp_tx_rsp>:

int
smp_tx_rsp(struct smp_streamer *ns, void *rsp, void *arg)
{
   16ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
   16dde:	b083      	sub	sp, #12
   16de0:	460d      	mov	r5, r1
   16de2:	4616      	mov	r6, r2
    struct os_mbuf *m;
    uint16_t mtu;
    int rc;

    st = arg;
    m  = rsp;
   16de4:	9101      	str	r1, [sp, #4]

    mtu = st->st_get_mtu(rsp);
   16de6:	6b13      	ldr	r3, [r2, #48]	; 0x30
   16de8:	4608      	mov	r0, r1
   16dea:	4798      	blx	r3
    if (mtu == 0U) {
   16dec:	4607      	mov	r7, r0
   16dee:	b180      	cbz	r0, 16e12 <smp_tx_rsp+0x36>
        /* The transport cannot support a transmission right now. */
        return MGMT_ERR_EUNKNOWN;
    }

    while (m != NULL) {
   16df0:	9b01      	ldr	r3, [sp, #4]
   16df2:	b163      	cbz	r3, 16e0e <smp_tx_rsp+0x32>
        frag = mem_split_frag(&m, mtu, smp_rsp_frag_alloc, rsp);
   16df4:	462b      	mov	r3, r5
   16df6:	4a09      	ldr	r2, [pc, #36]	; (16e1c <smp_tx_rsp+0x40>)
   16df8:	4639      	mov	r1, r7
   16dfa:	a801      	add	r0, sp, #4
   16dfc:	f003 fa5e 	bl	1a2bc <mem_split_frag>
        if (frag == NULL) {
   16e00:	b150      	cbz	r0, 16e18 <smp_tx_rsp+0x3c>
            return MGMT_ERR_ENOMEM;
        }

        rc = st->st_output(frag);
   16e02:	6af4      	ldr	r4, [r6, #44]	; 0x2c
   16e04:	47a0      	blx	r4
        if (rc != 0) {
   16e06:	2800      	cmp	r0, #0
   16e08:	d0f2      	beq.n	16df0 <smp_tx_rsp+0x14>
            return MGMT_ERR_EUNKNOWN;
   16e0a:	2001      	movs	r0, #1
   16e0c:	e002      	b.n	16e14 <smp_tx_rsp+0x38>
        }
    }

    return 0;
   16e0e:	2000      	movs	r0, #0
   16e10:	e000      	b.n	16e14 <smp_tx_rsp+0x38>
        return MGMT_ERR_EUNKNOWN;
   16e12:	2001      	movs	r0, #1
}
   16e14:	b003      	add	sp, #12
   16e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return MGMT_ERR_ENOMEM;
   16e18:	2002      	movs	r0, #2
   16e1a:	e7fb      	b.n	16e14 <smp_tx_rsp+0x38>
   16e1c:	00016db7 	.word	0x00016db7

00016e20 <smp_process_packet>:
    struct cbor_mbuf_reader reader;
    struct cbor_mbuf_writer writer;
    struct os_mbuf *m;
    int rc;

    if (!st) {
   16e20:	b1c0      	cbz	r0, 16e54 <smp_process_packet+0x34>
{
   16e22:	b510      	push	{r4, lr}
   16e24:	b08c      	sub	sp, #48	; 0x30
   16e26:	4604      	mov	r4, r0
        return MGMT_ERR_EINVAL;
    }

    st->st_streamer = (struct smp_streamer) {
   16e28:	4b0e      	ldr	r3, [pc, #56]	; (16e64 <smp_process_packet+0x44>)
   16e2a:	6003      	str	r3, [r0, #0]
   16e2c:	6040      	str	r0, [r0, #4]
   16e2e:	ab03      	add	r3, sp, #12
   16e30:	6083      	str	r3, [r0, #8]
   16e32:	f8c0 d00c 	str.w	sp, [r0, #12]
   16e36:	4b0c      	ldr	r3, [pc, #48]	; (16e68 <smp_process_packet+0x48>)
   16e38:	6103      	str	r3, [r0, #16]
        },
        .tx_rsp_cb = smp_tx_rsp,
    };

    while (1) {
        m = os_mqueue_get(&st->st_imq);
   16e3a:	f104 0014 	add.w	r0, r4, #20
   16e3e:	f7fe fbaa 	bl	15596 <os_mqueue_get>
        if (!m) {
   16e42:	4601      	mov	r1, r0
   16e44:	b148      	cbz	r0, 16e5a <smp_process_packet+0x3a>
            break;
        }

        rc = smp_process_request_packet(&st->st_streamer, m);
   16e46:	4620      	mov	r0, r4
   16e48:	f005 fa9c 	bl	1c384 <smp_process_request_packet>
        if (rc) {
   16e4c:	4603      	mov	r3, r0
   16e4e:	2800      	cmp	r0, #0
   16e50:	d0f3      	beq.n	16e3a <smp_process_packet+0x1a>
   16e52:	e003      	b.n	16e5c <smp_process_packet+0x3c>
        return MGMT_ERR_EINVAL;
   16e54:	2303      	movs	r3, #3
            return rc;
        }
    }
    
    return 0;
}
   16e56:	4618      	mov	r0, r3
   16e58:	4770      	bx	lr
    return 0;
   16e5a:	2300      	movs	r3, #0
}
   16e5c:	4618      	mov	r0, r3
   16e5e:	b00c      	add	sp, #48	; 0x30
   16e60:	bd10      	pop	{r4, pc}
   16e62:	bf00      	nop
   16e64:	000306e0 	.word	0x000306e0
   16e68:	00016ddd 	.word	0x00016ddd

00016e6c <smp_event_data_in>:
    return rc;
}

static void
smp_event_data_in(struct os_event *ev)
{
   16e6c:	b508      	push	{r3, lr}
    smp_process_packet(ev->ev_arg);
   16e6e:	6880      	ldr	r0, [r0, #8]
   16e70:	f7ff ffd6 	bl	16e20 <smp_process_packet>
}
   16e74:	bd08      	pop	{r3, pc}
	...

00016e78 <mgmt_evq_set>:
    g_smp_evq = evq;
   16e78:	4b01      	ldr	r3, [pc, #4]	; (16e80 <mgmt_evq_set+0x8>)
   16e7a:	6018      	str	r0, [r3, #0]
}
   16e7c:	4770      	bx	lr
   16e7e:	bf00      	nop
   16e80:	10002f60 	.word	0x10002f60

00016e84 <smp_rx_req>:
{
   16e84:	b538      	push	{r3, r4, r5, lr}
   16e86:	4605      	mov	r5, r0
   16e88:	460c      	mov	r4, r1
    rc = os_mqueue_put(&st->st_imq, os_eventq_dflt_get(), req);
   16e8a:	f7fe fb77 	bl	1557c <os_eventq_dflt_get>
   16e8e:	4601      	mov	r1, r0
   16e90:	4622      	mov	r2, r4
   16e92:	f105 0014 	add.w	r0, r5, #20
   16e96:	f7fe fb8f 	bl	155b8 <os_mqueue_put>
    if (rc) {
   16e9a:	4605      	mov	r5, r0
   16e9c:	b908      	cbnz	r0, 16ea2 <smp_rx_req+0x1e>
}
   16e9e:	4628      	mov	r0, r5
   16ea0:	bd38      	pop	{r3, r4, r5, pc}
    os_mbuf_free_chain(req);
   16ea2:	4620      	mov	r0, r4
   16ea4:	f7fe fbe6 	bl	15674 <os_mbuf_free_chain>
    return rc;
   16ea8:	e7f9      	b.n	16e9e <smp_rx_req+0x1a>
	...

00016eac <smp_transport_init>:

int
smp_transport_init(struct smp_transport *st,
                   smp_transport_out_func_t output_func,
                   smp_transport_get_mtu_func_t get_mtu_func)
{
   16eac:	b508      	push	{r3, lr}
    int rc;

    st->st_output = output_func;
   16eae:	62c1      	str	r1, [r0, #44]	; 0x2c
    st->st_get_mtu = get_mtu_func;
   16eb0:	6302      	str	r2, [r0, #48]	; 0x30

    rc = os_mqueue_init(&st->st_imq, smp_event_data_in, st);
   16eb2:	4602      	mov	r2, r0
   16eb4:	4902      	ldr	r1, [pc, #8]	; (16ec0 <smp_transport_init+0x14>)
   16eb6:	3014      	adds	r0, #20
   16eb8:	f7fe fb64 	bl	15584 <os_mqueue_init>
    }

    return 0;
err:
    return rc;
}
   16ebc:	bd08      	pop	{r3, pc}
   16ebe:	bf00      	nop
   16ec0:	00016e6d 	.word	0x00016e6d

00016ec4 <smp_pkg_init>:

void
smp_pkg_init(void)
{
   16ec4:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   16ec6:	4b09      	ldr	r3, [pc, #36]	; (16eec <smp_pkg_init+0x28>)
   16ec8:	781b      	ldrb	r3, [r3, #0]
   16eca:	b123      	cbz	r3, 16ed6 <smp_pkg_init+0x12>

    mgmt_evq_set(os_eventq_dflt_get());
   16ecc:	f7fe fb56 	bl	1557c <os_eventq_dflt_get>
   16ed0:	f7ff ffd2 	bl	16e78 <mgmt_evq_set>
}
   16ed4:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   16ed6:	f7fd fbc5 	bl	14664 <hal_debugger_connected>
   16eda:	b100      	cbz	r0, 16ede <smp_pkg_init+0x1a>
   16edc:	be01      	bkpt	0x0001
   16ede:	2300      	movs	r3, #0
   16ee0:	461a      	mov	r2, r3
   16ee2:	4619      	mov	r1, r3
   16ee4:	4618      	mov	r0, r3
   16ee6:	f7fd ff5d 	bl	14da4 <__assert_func>
   16eea:	bf00      	nop
   16eec:	10003404 	.word	0x10003404

00016ef0 <smp_ble_get_mtu>:
            return BLE_ATT_ERR_UNLIKELY;
    }
}

uint16_t
smp_ble_get_mtu(struct os_mbuf *req) {
   16ef0:	b508      	push	{r3, lr}

    uint16_t conn_handle;
    uint16_t mtu;

    memcpy(&conn_handle, OS_MBUF_USRHDR(req), sizeof (conn_handle));
    mtu = ble_att_mtu(conn_handle);
   16ef2:	8b00      	ldrh	r0, [r0, #24]
   16ef4:	f005 fd93 	bl	1ca1e <ble_att_mtu>
    if (!mtu) {
   16ef8:	4603      	mov	r3, r0
   16efa:	b108      	cbz	r0, 16f00 <smp_ble_get_mtu+0x10>
        /* No longer connected. */
        return 0;
    }

    /* 3 is the number of bytes for ATT notification base */
    mtu = mtu - 3;
   16efc:	1ec3      	subs	r3, r0, #3
   16efe:	b29b      	uxth	r3, r3

    return (mtu);
}
   16f00:	4618      	mov	r0, r3
   16f02:	bd08      	pop	{r3, pc}

00016f04 <smp_ble_out>:
    }
}

static int
smp_ble_out(struct os_mbuf *om)
{
   16f04:	b538      	push	{r3, r4, r5, lr}
   16f06:	4604      	mov	r4, r0
    int rc;

    rc = os_mqueue_put(&g_smp_ble_mq, os_eventq_dflt_get(), om);
   16f08:	f7fe fb38 	bl	1557c <os_eventq_dflt_get>
   16f0c:	4601      	mov	r1, r0
   16f0e:	4622      	mov	r2, r4
   16f10:	4805      	ldr	r0, [pc, #20]	; (16f28 <smp_ble_out+0x24>)
   16f12:	f7fe fb51 	bl	155b8 <os_mqueue_put>
    if (rc != 0) {
   16f16:	4605      	mov	r5, r0
   16f18:	b908      	cbnz	r0, 16f1e <smp_ble_out+0x1a>

    return 0;
err:
    os_mbuf_free_chain(om);
    return rc;
}
   16f1a:	4628      	mov	r0, r5
   16f1c:	bd38      	pop	{r3, r4, r5, pc}
    os_mbuf_free_chain(om);
   16f1e:	4620      	mov	r0, r4
   16f20:	f7fe fba8 	bl	15674 <os_mbuf_free_chain>
    return rc;
   16f24:	e7f9      	b.n	16f1a <smp_ble_out+0x16>
   16f26:	bf00      	nop
   16f28:	10002f68 	.word	0x10002f68

00016f2c <smp_ble_event_data_in>:
{
   16f2c:	b508      	push	{r3, lr}
    while ((m_resp = os_mqueue_get(&g_smp_ble_mq)) != NULL) {
   16f2e:	480d      	ldr	r0, [pc, #52]	; (16f64 <smp_ble_event_data_in+0x38>)
   16f30:	f7fe fb31 	bl	15596 <os_mqueue_get>
   16f34:	4602      	mov	r2, r0
   16f36:	b198      	cbz	r0, 16f60 <smp_ble_event_data_in+0x34>
        assert(OS_MBUF_USRHDR_LEN(m_resp) >= sizeof (conn_handle));
   16f38:	7953      	ldrb	r3, [r2, #5]
   16f3a:	3b08      	subs	r3, #8
   16f3c:	2b01      	cmp	r3, #1
   16f3e:	d905      	bls.n	16f4c <smp_ble_event_data_in+0x20>
        ble_gattc_notify_custom(conn_handle, g_ble_smp_attr_handle,
   16f40:	4b09      	ldr	r3, [pc, #36]	; (16f68 <smp_ble_event_data_in+0x3c>)
   16f42:	8819      	ldrh	r1, [r3, #0]
   16f44:	8b10      	ldrh	r0, [r2, #24]
   16f46:	f009 fbbb 	bl	206c0 <ble_gattc_notify_custom>
   16f4a:	e7f0      	b.n	16f2e <smp_ble_event_data_in+0x2>
        assert(OS_MBUF_USRHDR_LEN(m_resp) >= sizeof (conn_handle));
   16f4c:	f7fd fb8a 	bl	14664 <hal_debugger_connected>
   16f50:	b100      	cbz	r0, 16f54 <smp_ble_event_data_in+0x28>
   16f52:	be01      	bkpt	0x0001
   16f54:	2300      	movs	r3, #0
   16f56:	461a      	mov	r2, r3
   16f58:	4619      	mov	r1, r3
   16f5a:	4618      	mov	r0, r3
   16f5c:	f7fd ff22 	bl	14da4 <__assert_func>
}
   16f60:	bd08      	pop	{r3, pc}
   16f62:	bf00      	nop
   16f64:	10002f68 	.word	0x10002f68
   16f68:	10002f64 	.word	0x10002f64

00016f6c <gatt_svr_chr_access_smp>:
{
   16f6c:	b570      	push	{r4, r5, r6, lr}
    switch (ctxt->op) {
   16f6e:	7813      	ldrb	r3, [r2, #0]
   16f70:	2b01      	cmp	r3, #1
   16f72:	d132      	bne.n	16fda <gatt_svr_chr_access_smp+0x6e>
   16f74:	4606      	mov	r6, r0
   16f76:	4614      	mov	r4, r2
            if (OS_MBUF_USRHDR_LEN(ctxt->om) >= sizeof (conn_handle)) {
   16f78:	6855      	ldr	r5, [r2, #4]
   16f7a:	796b      	ldrb	r3, [r5, #5]
   16f7c:	f1a3 0208 	sub.w	r2, r3, #8
   16f80:	2a01      	cmp	r2, #1
   16f82:	d908      	bls.n	16f96 <gatt_svr_chr_access_smp+0x2a>
                ctxt->om = NULL;
   16f84:	2300      	movs	r3, #0
   16f86:	6063      	str	r3, [r4, #4]
            memcpy(OS_MBUF_USRHDR(m_req), &conn_handle, sizeof(conn_handle));
   16f88:	832e      	strh	r6, [r5, #24]
            rc = smp_rx_req(&g_smp_ble_transport, m_req);
   16f8a:	4629      	mov	r1, r5
   16f8c:	481a      	ldr	r0, [pc, #104]	; (16ff8 <gatt_svr_chr_access_smp+0x8c>)
   16f8e:	f7ff ff79 	bl	16e84 <smp_rx_req>
            if (rc) {
   16f92:	bb70      	cbnz	r0, 16ff2 <gatt_svr_chr_access_smp+0x86>
}
   16f94:	bd70      	pop	{r4, r5, r6, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
   16f96:	2b07      	cmp	r3, #7
   16f98:	d90e      	bls.n	16fb8 <gatt_svr_chr_access_smp+0x4c>
        startoff = om->om_pkthdr_len;
   16f9a:	b29b      	uxth	r3, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   16f9c:	4629      	mov	r1, r5
   16f9e:	f851 2b10 	ldr.w	r2, [r1], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   16fa2:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   16fa4:	1ad3      	subs	r3, r2, r3
   16fa6:	b29b      	uxth	r3, r3
            } else if (OS_MBUF_LEADINGSPACE(ctxt->om) >=
   16fa8:	2b01      	cmp	r3, #1
   16faa:	d907      	bls.n	16fbc <gatt_svr_chr_access_smp+0x50>
                ctxt->om = NULL;
   16fac:	2300      	movs	r3, #0
   16fae:	6063      	str	r3, [r4, #4]
                m_req->om_pkthdr_len += sizeof (conn_handle);
   16fb0:	796b      	ldrb	r3, [r5, #5]
   16fb2:	3302      	adds	r3, #2
   16fb4:	716b      	strb	r3, [r5, #5]
   16fb6:	e7e7      	b.n	16f88 <gatt_svr_chr_access_smp+0x1c>
    startoff = 0;
   16fb8:	2300      	movs	r3, #0
   16fba:	e7ef      	b.n	16f9c <gatt_svr_chr_access_smp+0x30>
                m_req = os_msys_get_pkthdr(OS_MBUF_PKTLEN(ctxt->om),
   16fbc:	2102      	movs	r1, #2
   16fbe:	8a28      	ldrh	r0, [r5, #16]
   16fc0:	f7fe fff2 	bl	15fa8 <os_msys_get_pkthdr>
                if (!m_req) {
   16fc4:	4605      	mov	r5, r0
   16fc6:	b190      	cbz	r0, 16fee <gatt_svr_chr_access_smp+0x82>
                rc = os_mbuf_appendfrom(m_req, ctxt->om, 0,
   16fc8:	6861      	ldr	r1, [r4, #4]
   16fca:	8a0b      	ldrh	r3, [r1, #16]
   16fcc:	2200      	movs	r2, #0
   16fce:	f7fe fbcf 	bl	15770 <os_mbuf_appendfrom>
                if (rc) {
   16fd2:	2800      	cmp	r0, #0
   16fd4:	d0d8      	beq.n	16f88 <gatt_svr_chr_access_smp+0x1c>
                    return BLE_ATT_ERR_INSUFFICIENT_RES;
   16fd6:	2011      	movs	r0, #17
   16fd8:	e7dc      	b.n	16f94 <gatt_svr_chr_access_smp+0x28>
            assert(0);
   16fda:	f7fd fb43 	bl	14664 <hal_debugger_connected>
   16fde:	b100      	cbz	r0, 16fe2 <gatt_svr_chr_access_smp+0x76>
   16fe0:	be01      	bkpt	0x0001
   16fe2:	2300      	movs	r3, #0
   16fe4:	461a      	mov	r2, r3
   16fe6:	4619      	mov	r1, r3
   16fe8:	4618      	mov	r0, r3
   16fea:	f7fd fedb 	bl	14da4 <__assert_func>
                    return BLE_ATT_ERR_INSUFFICIENT_RES;
   16fee:	2011      	movs	r0, #17
   16ff0:	e7d0      	b.n	16f94 <gatt_svr_chr_access_smp+0x28>
                return BLE_ATT_ERR_UNLIKELY;
   16ff2:	200e      	movs	r0, #14
   16ff4:	e7ce      	b.n	16f94 <gatt_svr_chr_access_smp+0x28>
   16ff6:	bf00      	nop
   16ff8:	10002f80 	.word	0x10002f80

00016ffc <smp_ble_gatt_svr_init>:
 * @param eventq
 * @return 0 on success; non-zero on failure
 */
int
smp_ble_gatt_svr_init(void)
{
   16ffc:	b508      	push	{r3, lr}
    int rc;

    rc = ble_gatts_count_cfg(gatt_svr_svcs);
   16ffe:	480c      	ldr	r0, [pc, #48]	; (17030 <smp_ble_gatt_svr_init+0x34>)
   17000:	f00a fca6 	bl	21950 <ble_gatts_count_cfg>
    if (rc != 0) {
   17004:	4603      	mov	r3, r0
   17006:	b108      	cbz	r0, 1700c <smp_ble_gatt_svr_init+0x10>

    rc = smp_transport_init(&g_smp_ble_transport, smp_ble_out, smp_ble_get_mtu);

err:
    return rc;
}
   17008:	4618      	mov	r0, r3
   1700a:	bd08      	pop	{r3, pc}
    rc = ble_gatts_add_svcs(gatt_svr_svcs);
   1700c:	4808      	ldr	r0, [pc, #32]	; (17030 <smp_ble_gatt_svr_init+0x34>)
   1700e:	f00a fc7b 	bl	21908 <ble_gatts_add_svcs>
    if (rc != 0) {
   17012:	4603      	mov	r3, r0
   17014:	2800      	cmp	r0, #0
   17016:	d1f7      	bne.n	17008 <smp_ble_gatt_svr_init+0xc>
    os_mqueue_init(&g_smp_ble_mq, &smp_ble_event_data_in, NULL);
   17018:	2200      	movs	r2, #0
   1701a:	4906      	ldr	r1, [pc, #24]	; (17034 <smp_ble_gatt_svr_init+0x38>)
   1701c:	4806      	ldr	r0, [pc, #24]	; (17038 <smp_ble_gatt_svr_init+0x3c>)
   1701e:	f7fe fab1 	bl	15584 <os_mqueue_init>
    rc = smp_transport_init(&g_smp_ble_transport, smp_ble_out, smp_ble_get_mtu);
   17022:	4a06      	ldr	r2, [pc, #24]	; (1703c <smp_ble_gatt_svr_init+0x40>)
   17024:	4906      	ldr	r1, [pc, #24]	; (17040 <smp_ble_gatt_svr_init+0x44>)
   17026:	4807      	ldr	r0, [pc, #28]	; (17044 <smp_ble_gatt_svr_init+0x48>)
   17028:	f7ff ff40 	bl	16eac <smp_transport_init>
   1702c:	4603      	mov	r3, r0
   1702e:	e7eb      	b.n	17008 <smp_ble_gatt_svr_init+0xc>
   17030:	00030724 	.word	0x00030724
   17034:	00016f2d 	.word	0x00016f2d
   17038:	10002f68 	.word	0x10002f68
   1703c:	00016ef1 	.word	0x00016ef1
   17040:	00016f05 	.word	0x00016f05
   17044:	10002f80 	.word	0x10002f80

00017048 <smp_ble_pkg_init>:

void
smp_ble_pkg_init(void)
{
   17048:	b510      	push	{r4, lr}
   1704a:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1704c:	4b0f      	ldr	r3, [pc, #60]	; (1708c <smp_ble_pkg_init+0x44>)
   1704e:	781b      	ldrb	r3, [r3, #0]
   17050:	b123      	cbz	r3, 1705c <smp_ble_pkg_init+0x14>

    rc = smp_ble_gatt_svr_init();
   17052:	f7ff ffd3 	bl	16ffc <smp_ble_gatt_svr_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   17056:	b958      	cbnz	r0, 17070 <smp_ble_pkg_init+0x28>
}
   17058:	b002      	add	sp, #8
   1705a:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1705c:	f7fd fb02 	bl	14664 <hal_debugger_connected>
   17060:	b100      	cbz	r0, 17064 <smp_ble_pkg_init+0x1c>
   17062:	be01      	bkpt	0x0001
   17064:	2300      	movs	r3, #0
   17066:	461a      	mov	r2, r3
   17068:	4619      	mov	r1, r3
   1706a:	4618      	mov	r0, r3
   1706c:	f7fd fe9a 	bl	14da4 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   17070:	f7fd faf8 	bl	14664 <hal_debugger_connected>
   17074:	b100      	cbz	r0, 17078 <smp_ble_pkg_init+0x30>
   17076:	be01      	bkpt	0x0001
   17078:	2000      	movs	r0, #0
   1707a:	9000      	str	r0, [sp, #0]
   1707c:	4b04      	ldr	r3, [pc, #16]	; (17090 <smp_ble_pkg_init+0x48>)
   1707e:	681c      	ldr	r4, [r3, #0]
   17080:	4603      	mov	r3, r0
   17082:	4602      	mov	r2, r0
   17084:	4601      	mov	r1, r0
   17086:	47a0      	blx	r4
}
   17088:	e7e6      	b.n	17058 <smp_ble_pkg_init+0x10>
   1708a:	bf00      	nop
   1708c:	10003404 	.word	0x10003404
   17090:	1000028c 	.word	0x1000028c

00017094 <config_init_fcb>:
    .cf_fcb.f_sectors = conf_fcb_area,
};

static void
config_init_fcb(void)
{
   17094:	b510      	push	{r4, lr}
   17096:	b084      	sub	sp, #16
    int cnt;
    int rc;

    rc = flash_area_to_sectors(MYNEWT_VAL(CONFIG_FCB_FLASH_AREA), &cnt, NULL);
   17098:	2200      	movs	r2, #0
   1709a:	a903      	add	r1, sp, #12
   1709c:	2011      	movs	r0, #17
   1709e:	f001 fd07 	bl	18ab0 <flash_area_to_sectors>
    SYSINIT_PANIC_ASSERT(rc == 0);
   170a2:	bb20      	cbnz	r0, 170ee <config_init_fcb+0x5a>
    SYSINIT_PANIC_ASSERT(
   170a4:	9b03      	ldr	r3, [sp, #12]
   170a6:	2b09      	cmp	r3, #9
   170a8:	d82e      	bhi.n	17108 <config_init_fcb+0x74>
        cnt <= sizeof(conf_fcb_area) / sizeof(conf_fcb_area[0]));
    flash_area_to_sectors(
   170aa:	4a30      	ldr	r2, [pc, #192]	; (1716c <config_init_fcb+0xd8>)
   170ac:	a903      	add	r1, sp, #12
   170ae:	2011      	movs	r0, #17
   170b0:	f001 fcfe 	bl	18ab0 <flash_area_to_sectors>
        MYNEWT_VAL(CONFIG_FCB_FLASH_AREA), &cnt, conf_fcb_area);

    config_init_conf_fcb.cf_fcb.f_sector_cnt = cnt;
   170b4:	482e      	ldr	r0, [pc, #184]	; (17170 <config_init_fcb+0xdc>)
   170b6:	9b03      	ldr	r3, [sp, #12]
   170b8:	7343      	strb	r3, [r0, #13]

    rc = conf_fcb_src(&config_init_conf_fcb);
   170ba:	f000 fca3 	bl	17a04 <conf_fcb_src>
    if (rc) {
   170be:	4603      	mov	r3, r0
   170c0:	2800      	cmp	r0, #0
   170c2:	d032      	beq.n	1712a <config_init_fcb+0x96>
        for (cnt = 0;
   170c4:	2300      	movs	r3, #0
   170c6:	9303      	str	r3, [sp, #12]
             cnt < config_init_conf_fcb.cf_fcb.f_sector_cnt;
   170c8:	4b29      	ldr	r3, [pc, #164]	; (17170 <config_init_fcb+0xdc>)
   170ca:	7b5a      	ldrb	r2, [r3, #13]
   170cc:	9b03      	ldr	r3, [sp, #12]
        for (cnt = 0;
   170ce:	429a      	cmp	r2, r3
   170d0:	dd27      	ble.n	17122 <config_init_fcb+0x8e>
             cnt++) {

            flash_area_erase(&conf_fcb_area[cnt], 0,
   170d2:	4826      	ldr	r0, [pc, #152]	; (1716c <config_init_fcb+0xd8>)
   170d4:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   170d8:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   170dc:	689a      	ldr	r2, [r3, #8]
   170de:	2100      	movs	r1, #0
   170e0:	4618      	mov	r0, r3
   170e2:	f001 fd49 	bl	18b78 <flash_area_erase>
             cnt++) {
   170e6:	9b03      	ldr	r3, [sp, #12]
   170e8:	3301      	adds	r3, #1
   170ea:	9303      	str	r3, [sp, #12]
   170ec:	e7ec      	b.n	170c8 <config_init_fcb+0x34>
    SYSINIT_PANIC_ASSERT(rc == 0);
   170ee:	f7fd fab9 	bl	14664 <hal_debugger_connected>
   170f2:	b100      	cbz	r0, 170f6 <config_init_fcb+0x62>
   170f4:	be01      	bkpt	0x0001
   170f6:	2000      	movs	r0, #0
   170f8:	9000      	str	r0, [sp, #0]
   170fa:	4b1e      	ldr	r3, [pc, #120]	; (17174 <config_init_fcb+0xe0>)
   170fc:	681c      	ldr	r4, [r3, #0]
   170fe:	4603      	mov	r3, r0
   17100:	4602      	mov	r2, r0
   17102:	4601      	mov	r1, r0
   17104:	47a0      	blx	r4
   17106:	e7cd      	b.n	170a4 <config_init_fcb+0x10>
    SYSINIT_PANIC_ASSERT(
   17108:	f7fd faac 	bl	14664 <hal_debugger_connected>
   1710c:	b100      	cbz	r0, 17110 <config_init_fcb+0x7c>
   1710e:	be01      	bkpt	0x0001
   17110:	2000      	movs	r0, #0
   17112:	9000      	str	r0, [sp, #0]
   17114:	4b17      	ldr	r3, [pc, #92]	; (17174 <config_init_fcb+0xe0>)
   17116:	681c      	ldr	r4, [r3, #0]
   17118:	4603      	mov	r3, r0
   1711a:	4602      	mov	r2, r0
   1711c:	4601      	mov	r1, r0
   1711e:	47a0      	blx	r4
   17120:	e7c3      	b.n	170aa <config_init_fcb+0x16>
                             conf_fcb_area[cnt].fa_size);
        }
        rc = conf_fcb_src(&config_init_conf_fcb);
   17122:	4813      	ldr	r0, [pc, #76]	; (17170 <config_init_fcb+0xdc>)
   17124:	f000 fc6e 	bl	17a04 <conf_fcb_src>
   17128:	4603      	mov	r3, r0
    }
    SYSINIT_PANIC_ASSERT(rc == 0);
   1712a:	b92b      	cbnz	r3, 17138 <config_init_fcb+0xa4>
    rc = conf_fcb_dst(&config_init_conf_fcb);
   1712c:	4810      	ldr	r0, [pc, #64]	; (17170 <config_init_fcb+0xdc>)
   1712e:	f000 fc95 	bl	17a5c <conf_fcb_dst>
    SYSINIT_PANIC_ASSERT(rc == 0);
   17132:	b970      	cbnz	r0, 17152 <config_init_fcb+0xbe>
}
   17134:	b004      	add	sp, #16
   17136:	bd10      	pop	{r4, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
   17138:	f7fd fa94 	bl	14664 <hal_debugger_connected>
   1713c:	b100      	cbz	r0, 17140 <config_init_fcb+0xac>
   1713e:	be01      	bkpt	0x0001
   17140:	2000      	movs	r0, #0
   17142:	9000      	str	r0, [sp, #0]
   17144:	4b0b      	ldr	r3, [pc, #44]	; (17174 <config_init_fcb+0xe0>)
   17146:	681c      	ldr	r4, [r3, #0]
   17148:	4603      	mov	r3, r0
   1714a:	4602      	mov	r2, r0
   1714c:	4601      	mov	r1, r0
   1714e:	47a0      	blx	r4
   17150:	e7ec      	b.n	1712c <config_init_fcb+0x98>
    SYSINIT_PANIC_ASSERT(rc == 0);
   17152:	f7fd fa87 	bl	14664 <hal_debugger_connected>
   17156:	b100      	cbz	r0, 1715a <config_init_fcb+0xc6>
   17158:	be01      	bkpt	0x0001
   1715a:	2000      	movs	r0, #0
   1715c:	9000      	str	r0, [sp, #0]
   1715e:	4b05      	ldr	r3, [pc, #20]	; (17174 <config_init_fcb+0xe0>)
   17160:	681c      	ldr	r4, [r3, #0]
   17162:	4603      	mov	r3, r0
   17164:	4602      	mov	r2, r0
   17166:	4601      	mov	r1, r0
   17168:	47a0      	blx	r4
}
   1716a:	e7e3      	b.n	17134 <config_init_fcb+0xa0>
   1716c:	10002fb4 	.word	0x10002fb4
   17170:	100001c4 	.word	0x100001c4
   17174:	1000028c 	.word	0x1000028c

00017178 <config_pkg_init>:
#endif
#endif

void
config_pkg_init(void)
{
   17178:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1717a:	4b09      	ldr	r3, [pc, #36]	; (171a0 <config_pkg_init+0x28>)
   1717c:	781b      	ldrb	r3, [r3, #0]
   1717e:	b123      	cbz	r3, 1718a <config_pkg_init+0x12>

    conf_init();
   17180:	f000 f93e 	bl	17400 <conf_init>

#if MYNEWT_VAL(CONFIG_AUTO_INIT)
#if MYNEWT_VAL(CONFIG_NFFS)
    config_init_fs();
#elif MYNEWT_VAL(CONFIG_FCB)
    config_init_fcb();
   17184:	f7ff ff86 	bl	17094 <config_init_fcb>
#elif MYNEWT_VAL(CONFIG_FCB2)
    config_init_fcb2();
#endif
#endif
}
   17188:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1718a:	f7fd fa6b 	bl	14664 <hal_debugger_connected>
   1718e:	b100      	cbz	r0, 17192 <config_pkg_init+0x1a>
   17190:	be01      	bkpt	0x0001
   17192:	2300      	movs	r3, #0
   17194:	461a      	mov	r2, r3
   17196:	4619      	mov	r1, r3
   17198:	4618      	mov	r0, r3
   1719a:	f7fd fe03 	bl	14da4 <__assert_func>
   1719e:	bf00      	nop
   171a0:	10003404 	.word	0x10003404

000171a4 <config_pkg_init_stage2>:
     */
#if MYNEWT_VAL(CONFIG_NFFS)
    fs_mkdir(MYNEWT_VAL(CONFIG_NFFS_DIR));
#endif
#endif
}
   171a4:	4770      	bx	lr

000171a6 <conf_dup_check_cb>:
    return 0;
}

static void
conf_dup_check_cb(char *name, char *val, void *cb_arg)
{
   171a6:	b538      	push	{r3, r4, r5, lr}
   171a8:	460d      	mov	r5, r1
   171aa:	4614      	mov	r4, r2
    struct conf_dup_check_arg *cdca = (struct conf_dup_check_arg *)cb_arg;

    if (strcmp(name, cdca->name)) {
   171ac:	6811      	ldr	r1, [r2, #0]
   171ae:	f7ff fcd2 	bl	16b56 <strcmp>
   171b2:	b9a8      	cbnz	r0, 171e0 <conf_dup_check_cb+0x3a>
        return;
    }
    if (!val) {
   171b4:	b145      	cbz	r5, 171c8 <conf_dup_check_cb+0x22>
            cdca->is_dup = 1;
        } else {
            cdca->is_dup = 0;
        }
    } else {
        if (cdca->val && !strcmp(val, cdca->val)) {
   171b6:	6861      	ldr	r1, [r4, #4]
   171b8:	b181      	cbz	r1, 171dc <conf_dup_check_cb+0x36>
   171ba:	4628      	mov	r0, r5
   171bc:	f7ff fccb 	bl	16b56 <strcmp>
   171c0:	b960      	cbnz	r0, 171dc <conf_dup_check_cb+0x36>
            cdca->is_dup = 1;
   171c2:	2301      	movs	r3, #1
   171c4:	60a3      	str	r3, [r4, #8]
   171c6:	e00b      	b.n	171e0 <conf_dup_check_cb+0x3a>
        if (!cdca->val || cdca->val[0] == '\0') {
   171c8:	6863      	ldr	r3, [r4, #4]
   171ca:	b10b      	cbz	r3, 171d0 <conf_dup_check_cb+0x2a>
   171cc:	781b      	ldrb	r3, [r3, #0]
   171ce:	b913      	cbnz	r3, 171d6 <conf_dup_check_cb+0x30>
            cdca->is_dup = 1;
   171d0:	2301      	movs	r3, #1
   171d2:	60a3      	str	r3, [r4, #8]
   171d4:	e004      	b.n	171e0 <conf_dup_check_cb+0x3a>
            cdca->is_dup = 0;
   171d6:	2300      	movs	r3, #0
   171d8:	60a3      	str	r3, [r4, #8]
   171da:	e001      	b.n	171e0 <conf_dup_check_cb+0x3a>
        } else {
            cdca->is_dup = 0;
   171dc:	2300      	movs	r3, #0
   171de:	60a3      	str	r3, [r4, #8]
        }
    }
}
   171e0:	bd38      	pop	{r3, r4, r5, pc}

000171e2 <conf_load_cb>:
{
   171e2:	b538      	push	{r3, r4, r5, lr}
   171e4:	4604      	mov	r4, r0
   171e6:	460d      	mov	r5, r1
    if (!cb_arg || !strcmp((char*)cb_arg, name)) {
   171e8:	b122      	cbz	r2, 171f4 <conf_load_cb+0x12>
   171ea:	4610      	mov	r0, r2
   171ec:	4621      	mov	r1, r4
   171ee:	f7ff fcb2 	bl	16b56 <strcmp>
   171f2:	b918      	cbnz	r0, 171fc <conf_load_cb+0x1a>
        conf_set_value(name, val);
   171f4:	4629      	mov	r1, r5
   171f6:	4620      	mov	r0, r4
   171f8:	f000 fabd 	bl	17776 <conf_set_value>
}
   171fc:	bd38      	pop	{r3, r4, r5, pc}
	...

00017200 <conf_src_register>:
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
   17200:	4b08      	ldr	r3, [pc, #32]	; (17224 <conf_src_register+0x24>)
   17202:	6819      	ldr	r1, [r3, #0]
   17204:	460b      	mov	r3, r1
    prev = NULL;
   17206:	2200      	movs	r2, #0
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
   17208:	b113      	cbz	r3, 17210 <conf_src_register+0x10>
        prev = cur;
   1720a:	461a      	mov	r2, r3
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
   1720c:	681b      	ldr	r3, [r3, #0]
   1720e:	e7fb      	b.n	17208 <conf_src_register+0x8>
    if (!prev) {
   17210:	b11a      	cbz	r2, 1721a <conf_src_register+0x1a>
        SLIST_INSERT_AFTER(prev, cs, cs_next);
   17212:	6813      	ldr	r3, [r2, #0]
   17214:	6003      	str	r3, [r0, #0]
   17216:	6010      	str	r0, [r2, #0]
}
   17218:	4770      	bx	lr
        SLIST_INSERT_HEAD(&conf_load_srcs, cs, cs_next);
   1721a:	6001      	str	r1, [r0, #0]
   1721c:	4b01      	ldr	r3, [pc, #4]	; (17224 <conf_src_register+0x24>)
   1721e:	6018      	str	r0, [r3, #0]
   17220:	4770      	bx	lr
   17222:	bf00      	nop
   17224:	10003020 	.word	0x10003020

00017228 <conf_dst_register>:
    conf_save_dst = cs;
   17228:	4b01      	ldr	r3, [pc, #4]	; (17230 <conf_dst_register+0x8>)
   1722a:	6018      	str	r0, [r3, #0]
}
   1722c:	4770      	bx	lr
   1722e:	bf00      	nop
   17230:	10003028 	.word	0x10003028

00017234 <conf_load>:
{
   17234:	b510      	push	{r4, lr}
    conf_lock();
   17236:	f000 f90d 	bl	17454 <conf_lock>
    conf_loaded = true;
   1723a:	2301      	movs	r3, #1
   1723c:	4a0e      	ldr	r2, [pc, #56]	; (17278 <conf_load+0x44>)
   1723e:	7013      	strb	r3, [r2, #0]
    conf_loading = true;
   17240:	4a0e      	ldr	r2, [pc, #56]	; (1727c <conf_load+0x48>)
   17242:	7013      	strb	r3, [r2, #0]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   17244:	4b0e      	ldr	r3, [pc, #56]	; (17280 <conf_load+0x4c>)
   17246:	681c      	ldr	r4, [r3, #0]
   17248:	e003      	b.n	17252 <conf_load+0x1e>
            conf_commit(NULL);
   1724a:	2000      	movs	r0, #0
   1724c:	f000 fac8 	bl	177e0 <conf_commit>
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   17250:	6824      	ldr	r4, [r4, #0]
   17252:	b14c      	cbz	r4, 17268 <conf_load+0x34>
        cs->cs_itf->csi_load(cs, conf_load_cb, NULL);
   17254:	6863      	ldr	r3, [r4, #4]
   17256:	681b      	ldr	r3, [r3, #0]
   17258:	2200      	movs	r2, #0
   1725a:	490a      	ldr	r1, [pc, #40]	; (17284 <conf_load+0x50>)
   1725c:	4620      	mov	r0, r4
   1725e:	4798      	blx	r3
        if (SLIST_NEXT(cs, cs_next)) {
   17260:	6823      	ldr	r3, [r4, #0]
   17262:	2b00      	cmp	r3, #0
   17264:	d1f1      	bne.n	1724a <conf_load+0x16>
   17266:	e7f3      	b.n	17250 <conf_load+0x1c>
    conf_loading = false;
   17268:	4b04      	ldr	r3, [pc, #16]	; (1727c <conf_load+0x48>)
   1726a:	701c      	strb	r4, [r3, #0]
    conf_unlock();
   1726c:	f000 f8fc 	bl	17468 <conf_unlock>
    return conf_commit(NULL);
   17270:	4620      	mov	r0, r4
   17272:	f000 fab5 	bl	177e0 <conf_commit>
}
   17276:	bd10      	pop	{r4, pc}
   17278:	10003024 	.word	0x10003024
   1727c:	10003025 	.word	0x10003025
   17280:	10003020 	.word	0x10003020
   17284:	000171e3 	.word	0x000171e3

00017288 <conf_ensure_loaded>:
{
   17288:	b508      	push	{r3, lr}
    if (conf_loaded) {
   1728a:	4b04      	ldr	r3, [pc, #16]	; (1729c <conf_ensure_loaded+0x14>)
   1728c:	781b      	ldrb	r3, [r3, #0]
   1728e:	b10b      	cbz	r3, 17294 <conf_ensure_loaded+0xc>
        return 0;
   17290:	2000      	movs	r0, #0
}
   17292:	bd08      	pop	{r3, pc}
    return conf_load();
   17294:	f7ff ffce 	bl	17234 <conf_load>
   17298:	e7fb      	b.n	17292 <conf_ensure_loaded+0xa>
   1729a:	bf00      	nop
   1729c:	10003024 	.word	0x10003024

000172a0 <conf_save_one>:
/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int
conf_save_one(const char *name, char *value)
{
   172a0:	b570      	push	{r4, r5, r6, lr}
   172a2:	b084      	sub	sp, #16
   172a4:	4605      	mov	r5, r0
   172a6:	460e      	mov	r6, r1
    struct conf_store *cs;
    struct conf_dup_check_arg cdca;
    int rc;

    conf_lock();
   172a8:	f000 f8d4 	bl	17454 <conf_lock>
    if (!conf_save_dst) {
   172ac:	4b13      	ldr	r3, [pc, #76]	; (172fc <conf_save_one+0x5c>)
   172ae:	681b      	ldr	r3, [r3, #0]
   172b0:	b1fb      	cbz	r3, 172f2 <conf_save_one+0x52>
    }

    /*
     * Check if we're writing the same value again.
     */
    cdca.name = name;
   172b2:	9501      	str	r5, [sp, #4]
    cdca.val = value;
   172b4:	9602      	str	r6, [sp, #8]
    cdca.is_dup = 0;
   172b6:	2300      	movs	r3, #0
   172b8:	9303      	str	r3, [sp, #12]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   172ba:	4b11      	ldr	r3, [pc, #68]	; (17300 <conf_save_one+0x60>)
   172bc:	681c      	ldr	r4, [r3, #0]
   172be:	e006      	b.n	172ce <conf_save_one+0x2e>
        cs->cs_itf->csi_load(cs, conf_dup_check_cb, &cdca);
   172c0:	6863      	ldr	r3, [r4, #4]
   172c2:	681b      	ldr	r3, [r3, #0]
   172c4:	aa01      	add	r2, sp, #4
   172c6:	490f      	ldr	r1, [pc, #60]	; (17304 <conf_save_one+0x64>)
   172c8:	4620      	mov	r0, r4
   172ca:	4798      	blx	r3
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   172cc:	6824      	ldr	r4, [r4, #0]
   172ce:	2c00      	cmp	r4, #0
   172d0:	d1f6      	bne.n	172c0 <conf_save_one+0x20>
    }
    if (cdca.is_dup == 1) {
   172d2:	9b03      	ldr	r3, [sp, #12]
   172d4:	2b01      	cmp	r3, #1
   172d6:	d00e      	beq.n	172f6 <conf_save_one+0x56>
        rc = 0;
        goto out;
    }
    cs = conf_save_dst;
   172d8:	4b08      	ldr	r3, [pc, #32]	; (172fc <conf_save_one+0x5c>)
   172da:	6818      	ldr	r0, [r3, #0]
    rc = cs->cs_itf->csi_save(cs, name, value);
   172dc:	6843      	ldr	r3, [r0, #4]
   172de:	689b      	ldr	r3, [r3, #8]
   172e0:	4632      	mov	r2, r6
   172e2:	4629      	mov	r1, r5
   172e4:	4798      	blx	r3
   172e6:	4604      	mov	r4, r0
out:
    conf_unlock();
   172e8:	f000 f8be 	bl	17468 <conf_unlock>
    return rc;
}
   172ec:	4620      	mov	r0, r4
   172ee:	b004      	add	sp, #16
   172f0:	bd70      	pop	{r4, r5, r6, pc}
        rc = OS_ENOENT;
   172f2:	240a      	movs	r4, #10
   172f4:	e7f8      	b.n	172e8 <conf_save_one+0x48>
        rc = 0;
   172f6:	2400      	movs	r4, #0
   172f8:	e7f6      	b.n	172e8 <conf_save_one+0x48>
   172fa:	bf00      	nop
   172fc:	10003028 	.word	0x10003028
   17300:	10003020 	.word	0x10003020
   17304:	000171a7 	.word	0x000171a7

00017308 <conf_store_one>:

static void
conf_store_one(char *name, char *value)
{
   17308:	b508      	push	{r3, lr}
    conf_save_one(name, value);
   1730a:	f7ff ffc9 	bl	172a0 <conf_save_one>
}
   1730e:	bd08      	pop	{r3, pc}

00017310 <conf_save>:
 * Walk through all registered subsystems, and ask them to export their
 * config variables. Persist these settings.
 */
int
conf_save(void)
{
   17310:	b570      	push	{r4, r5, r6, lr}
    struct conf_store *cs;
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
   17312:	f000 f89f 	bl	17454 <conf_lock>
    cs = conf_save_dst;
   17316:	4b11      	ldr	r3, [pc, #68]	; (1735c <conf_save+0x4c>)
   17318:	681e      	ldr	r6, [r3, #0]
    if (!cs) {
   1731a:	b1e6      	cbz	r6, 17356 <conf_save+0x46>
        rc = OS_ENOENT;
        goto out;
    }

    if (cs->cs_itf->csi_save_start) {
   1731c:	6873      	ldr	r3, [r6, #4]
   1731e:	685b      	ldr	r3, [r3, #4]
   17320:	b10b      	cbz	r3, 17326 <conf_save+0x16>
        cs->cs_itf->csi_save_start(cs);
   17322:	4630      	mov	r0, r6
   17324:	4798      	blx	r3
    }
    rc = 0;
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   17326:	4b0e      	ldr	r3, [pc, #56]	; (17360 <conf_save+0x50>)
   17328:	681c      	ldr	r4, [r3, #0]
    rc = 0;
   1732a:	2500      	movs	r5, #0
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   1732c:	e000      	b.n	17330 <conf_save+0x20>
   1732e:	6824      	ldr	r4, [r4, #0]
   17330:	b144      	cbz	r4, 17344 <conf_save+0x34>
        rc2 = conf_export_cb(ch, conf_store_one, CONF_EXPORT_PERSIST);
   17332:	2200      	movs	r2, #0
   17334:	490b      	ldr	r1, [pc, #44]	; (17364 <conf_save+0x54>)
   17336:	4620      	mov	r0, r4
   17338:	f000 fa0a 	bl	17750 <conf_export_cb>
        if (!rc) {
   1733c:	2d00      	cmp	r5, #0
   1733e:	d1f6      	bne.n	1732e <conf_save+0x1e>
            rc = rc2;
   17340:	4605      	mov	r5, r0
   17342:	e7f4      	b.n	1732e <conf_save+0x1e>
        }
    }
    if (cs->cs_itf->csi_save_end) {
   17344:	6873      	ldr	r3, [r6, #4]
   17346:	68db      	ldr	r3, [r3, #12]
   17348:	b10b      	cbz	r3, 1734e <conf_save+0x3e>
        cs->cs_itf->csi_save_end(cs);
   1734a:	4630      	mov	r0, r6
   1734c:	4798      	blx	r3
    }
out:
    conf_unlock();
   1734e:	f000 f88b 	bl	17468 <conf_unlock>
    return rc;
}
   17352:	4628      	mov	r0, r5
   17354:	bd70      	pop	{r4, r5, r6, pc}
        rc = OS_ENOENT;
   17356:	250a      	movs	r5, #10
   17358:	e7f9      	b.n	1734e <conf_save+0x3e>
   1735a:	bf00      	nop
   1735c:	10003028 	.word	0x10003028
   17360:	1000302c 	.word	0x1000302c
   17364:	00017309 	.word	0x00017309

00017368 <conf_store_init>:

void
conf_store_init(void)
{
    conf_loaded = false;
   17368:	2300      	movs	r3, #0
   1736a:	4a02      	ldr	r2, [pc, #8]	; (17374 <conf_store_init+0xc>)
   1736c:	7013      	strb	r3, [r2, #0]
    SLIST_INIT(&conf_load_srcs);
   1736e:	4a02      	ldr	r2, [pc, #8]	; (17378 <conf_store_init+0x10>)
   17370:	6013      	str	r3, [r2, #0]
}
   17372:	4770      	bx	lr
   17374:	10003024 	.word	0x10003024
   17378:	10003020 	.word	0x10003020

0001737c <conf_get_cb>:
 * Executes a conf_handler's "get" callback and returns the result.
 */
static char *
conf_get_cb(struct conf_handler *ch, int argc, char **argv, char *val,
            int val_len_max)
{
   1737c:	b530      	push	{r4, r5, lr}
   1737e:	b083      	sub	sp, #12
   17380:	4604      	mov	r4, r0
   17382:	4608      	mov	r0, r1
   17384:	4611      	mov	r1, r2
   17386:	461a      	mov	r2, r3
    if (ch->ch_ext) {
   17388:	7a23      	ldrb	r3, [r4, #8]
   1738a:	b13b      	cbz	r3, 1739c <conf_get_cb+0x20>
        if (ch->ch_get_ext != NULL) {
   1738c:	68e5      	ldr	r5, [r4, #12]
   1738e:	b155      	cbz	r5, 173a6 <conf_get_cb+0x2a>
            return ch->ch_get_ext(argc, argv, val, val_len_max, ch->ch_arg);
   17390:	69e3      	ldr	r3, [r4, #28]
   17392:	9300      	str	r3, [sp, #0]
   17394:	9b06      	ldr	r3, [sp, #24]
   17396:	47a8      	blx	r5
            return ch->ch_get(argc, argv, val, val_len_max);
        }
    }

    return NULL;
}
   17398:	b003      	add	sp, #12
   1739a:	bd30      	pop	{r4, r5, pc}
        if (ch->ch_get != NULL) {
   1739c:	68e4      	ldr	r4, [r4, #12]
   1739e:	b124      	cbz	r4, 173aa <conf_get_cb+0x2e>
            return ch->ch_get(argc, argv, val, val_len_max);
   173a0:	9b06      	ldr	r3, [sp, #24]
   173a2:	47a0      	blx	r4
   173a4:	e7f8      	b.n	17398 <conf_get_cb+0x1c>
    return NULL;
   173a6:	2000      	movs	r0, #0
   173a8:	e7f6      	b.n	17398 <conf_get_cb+0x1c>
   173aa:	2000      	movs	r0, #0
   173ac:	e7f4      	b.n	17398 <conf_get_cb+0x1c>

000173ae <conf_set_cb>:
/**
 * Executes a conf_handler's "set" callback and returns the result.
 */
static int
conf_set_cb(struct conf_handler *ch, int argc, char **argv, char *val)
{
   173ae:	b538      	push	{r3, r4, r5, lr}
   173b0:	4604      	mov	r4, r0
   173b2:	4608      	mov	r0, r1
   173b4:	4611      	mov	r1, r2
   173b6:	461a      	mov	r2, r3
    if (ch->ch_ext) {
   173b8:	7a23      	ldrb	r3, [r4, #8]
   173ba:	b123      	cbz	r3, 173c6 <conf_set_cb+0x18>
        if (ch->ch_set_ext != NULL) {
   173bc:	6925      	ldr	r5, [r4, #16]
   173be:	b135      	cbz	r5, 173ce <conf_set_cb+0x20>
            return ch->ch_set_ext(argc, argv, val, ch->ch_arg);
   173c0:	69e3      	ldr	r3, [r4, #28]
   173c2:	47a8      	blx	r5
            return ch->ch_set(argc, argv, val);
        }
    }

    return OS_ERROR;
}
   173c4:	bd38      	pop	{r3, r4, r5, pc}
        if (ch->ch_set != NULL) {
   173c6:	6923      	ldr	r3, [r4, #16]
   173c8:	b11b      	cbz	r3, 173d2 <conf_set_cb+0x24>
            return ch->ch_set(argc, argv, val);
   173ca:	4798      	blx	r3
   173cc:	e7fa      	b.n	173c4 <conf_set_cb+0x16>
    return OS_ERROR;
   173ce:	200c      	movs	r0, #12
   173d0:	e7f8      	b.n	173c4 <conf_set_cb+0x16>
   173d2:	200c      	movs	r0, #12
   173d4:	e7f6      	b.n	173c4 <conf_set_cb+0x16>

000173d6 <conf_commit_cb>:
/**
 * Executes a conf_handler's "commit" callback and returns the result.
 */
static int
conf_commit_cb(struct conf_handler *ch)
{
   173d6:	b508      	push	{r3, lr}
    if (ch->ch_ext) {
   173d8:	7a03      	ldrb	r3, [r0, #8]
   173da:	b123      	cbz	r3, 173e6 <conf_commit_cb+0x10>
        if (ch->ch_commit_ext != NULL) {
   173dc:	6943      	ldr	r3, [r0, #20]
   173de:	b133      	cbz	r3, 173ee <conf_commit_cb+0x18>
            return ch->ch_commit_ext(ch->ch_arg);
   173e0:	69c0      	ldr	r0, [r0, #28]
   173e2:	4798      	blx	r3
            return ch->ch_commit();
        }
    }

    return 0;
}
   173e4:	bd08      	pop	{r3, pc}
        if (ch->ch_commit != NULL) {
   173e6:	6943      	ldr	r3, [r0, #20]
   173e8:	b11b      	cbz	r3, 173f2 <conf_commit_cb+0x1c>
            return ch->ch_commit();
   173ea:	4798      	blx	r3
   173ec:	e7fa      	b.n	173e4 <conf_commit_cb+0xe>
    return 0;
   173ee:	2000      	movs	r0, #0
   173f0:	e7f8      	b.n	173e4 <conf_commit_cb+0xe>
   173f2:	2000      	movs	r0, #0
   173f4:	e7f6      	b.n	173e4 <conf_commit_cb+0xe>

000173f6 <conf_ev_fn_load>:
{
   173f6:	b508      	push	{r3, lr}
    conf_ensure_loaded();
   173f8:	f7ff ff46 	bl	17288 <conf_ensure_loaded>
}
   173fc:	bd08      	pop	{r3, pc}
	...

00017400 <conf_init>:
{
   17400:	b510      	push	{r4, lr}
   17402:	b082      	sub	sp, #8
    os_mutex_init(&conf_mtx);
   17404:	480f      	ldr	r0, [pc, #60]	; (17444 <conf_init+0x44>)
   17406:	f7ff fa5f 	bl	168c8 <os_mutex_init>
    SLIST_INIT(&conf_handlers);
   1740a:	4b0f      	ldr	r3, [pc, #60]	; (17448 <conf_init+0x48>)
   1740c:	2200      	movs	r2, #0
   1740e:	601a      	str	r2, [r3, #0]
    conf_store_init();
   17410:	f7ff ffaa 	bl	17368 <conf_store_init>
    rc = conf_mgmt_register();
   17414:	f000 fc5e 	bl	17cd4 <conf_mgmt_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   17418:	b930      	cbnz	r0, 17428 <conf_init+0x28>
    os_eventq_put(os_eventq_dflt_get(), &conf_ev_load);
   1741a:	f7fe f8af 	bl	1557c <os_eventq_dflt_get>
   1741e:	490b      	ldr	r1, [pc, #44]	; (1744c <conf_init+0x4c>)
   17420:	f7fd fff3 	bl	1540a <os_eventq_put>
}
   17424:	b002      	add	sp, #8
   17426:	bd10      	pop	{r4, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
   17428:	f7fd f91c 	bl	14664 <hal_debugger_connected>
   1742c:	b100      	cbz	r0, 17430 <conf_init+0x30>
   1742e:	be01      	bkpt	0x0001
   17430:	2000      	movs	r0, #0
   17432:	9000      	str	r0, [sp, #0]
   17434:	4b06      	ldr	r3, [pc, #24]	; (17450 <conf_init+0x50>)
   17436:	681c      	ldr	r4, [r3, #0]
   17438:	4603      	mov	r3, r0
   1743a:	4602      	mov	r2, r0
   1743c:	4601      	mov	r1, r0
   1743e:	47a0      	blx	r4
   17440:	e7eb      	b.n	1741a <conf_init+0x1a>
   17442:	bf00      	nop
   17444:	10003030 	.word	0x10003030
   17448:	1000302c 	.word	0x1000302c
   1744c:	100001fc 	.word	0x100001fc
   17450:	1000028c 	.word	0x1000028c

00017454 <conf_lock>:
{
   17454:	b508      	push	{r3, lr}
    os_mutex_pend(&conf_mtx, 0xFFFFFFFF);
   17456:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1745a:	4802      	ldr	r0, [pc, #8]	; (17464 <conf_lock+0x10>)
   1745c:	f7ff fa9e 	bl	1699c <os_mutex_pend>
}
   17460:	bd08      	pop	{r3, pc}
   17462:	bf00      	nop
   17464:	10003030 	.word	0x10003030

00017468 <conf_unlock>:
{
   17468:	b508      	push	{r3, lr}
    os_mutex_release(&conf_mtx);
   1746a:	4802      	ldr	r0, [pc, #8]	; (17474 <conf_unlock+0xc>)
   1746c:	f7ff fa36 	bl	168dc <os_mutex_release>
}
   17470:	bd08      	pop	{r3, pc}
   17472:	bf00      	nop
   17474:	10003030 	.word	0x10003030

00017478 <conf_register>:
{
   17478:	b510      	push	{r4, lr}
   1747a:	4604      	mov	r4, r0
    conf_lock();
   1747c:	f7ff ffea 	bl	17454 <conf_lock>
    SLIST_INSERT_HEAD(&conf_handlers, handler, ch_list);
   17480:	4b03      	ldr	r3, [pc, #12]	; (17490 <conf_register+0x18>)
   17482:	681a      	ldr	r2, [r3, #0]
   17484:	6022      	str	r2, [r4, #0]
   17486:	601c      	str	r4, [r3, #0]
    conf_unlock();
   17488:	f7ff ffee 	bl	17468 <conf_unlock>
}
   1748c:	2000      	movs	r0, #0
   1748e:	bd10      	pop	{r4, pc}
   17490:	1000302c 	.word	0x1000302c

00017494 <conf_handler_lookup>:
{
   17494:	b538      	push	{r3, r4, r5, lr}
   17496:	4605      	mov	r5, r0
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   17498:	4b05      	ldr	r3, [pc, #20]	; (174b0 <conf_handler_lookup+0x1c>)
   1749a:	681c      	ldr	r4, [r3, #0]
   1749c:	b134      	cbz	r4, 174ac <conf_handler_lookup+0x18>
        if (!strcmp(name, ch->ch_name)) {
   1749e:	6861      	ldr	r1, [r4, #4]
   174a0:	4628      	mov	r0, r5
   174a2:	f7ff fb58 	bl	16b56 <strcmp>
   174a6:	b108      	cbz	r0, 174ac <conf_handler_lookup+0x18>
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   174a8:	6824      	ldr	r4, [r4, #0]
   174aa:	e7f7      	b.n	1749c <conf_handler_lookup+0x8>
}
   174ac:	4620      	mov	r0, r4
   174ae:	bd38      	pop	{r3, r4, r5, pc}
   174b0:	1000302c 	.word	0x1000302c

000174b4 <conf_parse_name>:
{
   174b4:	b570      	push	{r4, r5, r6, lr}
   174b6:	b082      	sub	sp, #8
   174b8:	460e      	mov	r6, r1
   174ba:	4615      	mov	r5, r2
    tok = strtok_r(name, sep, &tok_ptr);
   174bc:	aa01      	add	r2, sp, #4
   174be:	4909      	ldr	r1, [pc, #36]	; (174e4 <conf_parse_name+0x30>)
   174c0:	f016 fa22 	bl	2d908 <strtok_r>
    i = 0;
   174c4:	2300      	movs	r3, #0
    while (tok) {
   174c6:	b148      	cbz	r0, 174dc <conf_parse_name+0x28>
        name_argv[i++] = tok;
   174c8:	1c5c      	adds	r4, r3, #1
   174ca:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
        tok = strtok_r(NULL, sep, &tok_ptr);
   174ce:	aa01      	add	r2, sp, #4
   174d0:	4904      	ldr	r1, [pc, #16]	; (174e4 <conf_parse_name+0x30>)
   174d2:	2000      	movs	r0, #0
   174d4:	f016 fa18 	bl	2d908 <strtok_r>
        name_argv[i++] = tok;
   174d8:	4623      	mov	r3, r4
   174da:	e7f4      	b.n	174c6 <conf_parse_name+0x12>
    *name_argc = i;
   174dc:	6033      	str	r3, [r6, #0]
}
   174de:	b002      	add	sp, #8
   174e0:	bd70      	pop	{r4, r5, r6, pc}
   174e2:	bf00      	nop
   174e4:	00030744 	.word	0x00030744

000174e8 <conf_parse_and_lookup>:
{
   174e8:	b510      	push	{r4, lr}
   174ea:	4614      	mov	r4, r2
    rc = conf_parse_name(name, name_argc, name_argv);
   174ec:	f7ff ffe2 	bl	174b4 <conf_parse_name>
    if (rc) {
   174f0:	b918      	cbnz	r0, 174fa <conf_parse_and_lookup+0x12>
    return conf_handler_lookup(name_argv[0]);
   174f2:	6820      	ldr	r0, [r4, #0]
   174f4:	f7ff ffce 	bl	17494 <conf_handler_lookup>
}
   174f8:	bd10      	pop	{r4, pc}
        return NULL;
   174fa:	2000      	movs	r0, #0
   174fc:	e7fc      	b.n	174f8 <conf_parse_and_lookup+0x10>

000174fe <conf_value_from_str>:
    if (!val_str) {
   174fe:	2800      	cmp	r0, #0
   17500:	f000 80a0 	beq.w	17644 <conf_value_from_str+0x146>
{
   17504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17508:	b085      	sub	sp, #20
   1750a:	460c      	mov	r4, r1
   1750c:	4692      	mov	sl, r2
   1750e:	461d      	mov	r5, r3
   17510:	4683      	mov	fp, r0
    switch (type) {
   17512:	1e8b      	subs	r3, r1, #2
   17514:	2b0c      	cmp	r3, #12
   17516:	f200 8097 	bhi.w	17648 <conf_value_from_str+0x14a>
   1751a:	e8df f003 	tbb	[pc, r3]
   1751e:	0707      	.short	0x0707
   17520:	95830707 	.word	0x95830707
   17524:	55079595 	.word	0x55079595
   17528:	5555      	.short	0x5555
   1752a:	55          	.byte	0x55
   1752b:	00          	.byte	0x00
        val = strtoll(val_str, &eptr, 0);
   1752c:	2200      	movs	r2, #0
   1752e:	a903      	add	r1, sp, #12
   17530:	f016 f9fa 	bl	2d928 <strtoll>
   17534:	4602      	mov	r2, r0
   17536:	460b      	mov	r3, r1
        if (*eptr != '\0') {
   17538:	9903      	ldr	r1, [sp, #12]
   1753a:	7809      	ldrb	r1, [r1, #0]
   1753c:	2900      	cmp	r1, #0
   1753e:	f040 8085 	bne.w	1764c <conf_value_from_str+0x14e>
        if (type == CONF_BOOL) {
   17542:	2c0a      	cmp	r4, #10
   17544:	d009      	beq.n	1755a <conf_value_from_str+0x5c>
        } else if (type == CONF_INT8) {
   17546:	2c02      	cmp	r4, #2
   17548:	d013      	beq.n	17572 <conf_value_from_str+0x74>
        } else if (type == CONF_INT16) {
   1754a:	2c03      	cmp	r4, #3
   1754c:	d01e      	beq.n	1758c <conf_value_from_str+0x8e>
        } else if (type == CONF_INT32) {
   1754e:	2c04      	cmp	r4, #4
   17550:	d02a      	beq.n	175a8 <conf_value_from_str+0xaa>
            *(int64_t *)vp = val;
   17552:	e9ca 2300 	strd	r2, r3, [sl]
    return 0;
   17556:	2000      	movs	r0, #0
   17558:	e071      	b.n	1763e <conf_value_from_str+0x140>
            if (val < 0 || val > 1) {
   1755a:	2b00      	cmp	r3, #0
   1755c:	bf08      	it	eq
   1755e:	2a02      	cmpeq	r2, #2
   17560:	d276      	bcs.n	17650 <conf_value_from_str+0x152>
            *(bool *)vp = val;
   17562:	4313      	orrs	r3, r2
   17564:	bf14      	ite	ne
   17566:	2301      	movne	r3, #1
   17568:	2300      	moveq	r3, #0
   1756a:	f88a 3000 	strb.w	r3, [sl]
    return 0;
   1756e:	2000      	movs	r0, #0
   17570:	e065      	b.n	1763e <conf_value_from_str+0x140>
            if (val < INT8_MIN || val > INT8_MAX) {
   17572:	f112 0680 	adds.w	r6, r2, #128	; 0x80
   17576:	f143 0700 	adc.w	r7, r3, #0
   1757a:	2f00      	cmp	r7, #0
   1757c:	bf08      	it	eq
   1757e:	f5b6 7f80 	cmpeq.w	r6, #256	; 0x100
   17582:	d267      	bcs.n	17654 <conf_value_from_str+0x156>
            *(int8_t *)vp = val;
   17584:	f88a 2000 	strb.w	r2, [sl]
    return 0;
   17588:	2000      	movs	r0, #0
   1758a:	e058      	b.n	1763e <conf_value_from_str+0x140>
            if (val < INT16_MIN || val > INT16_MAX) {
   1758c:	f512 4800 	adds.w	r8, r2, #32768	; 0x8000
   17590:	f143 0900 	adc.w	r9, r3, #0
   17594:	f1b9 0f00 	cmp.w	r9, #0
   17598:	bf08      	it	eq
   1759a:	f5b8 3f80 	cmpeq.w	r8, #65536	; 0x10000
   1759e:	d25b      	bcs.n	17658 <conf_value_from_str+0x15a>
            *(int16_t *)vp = val;
   175a0:	f8aa 2000 	strh.w	r2, [sl]
    return 0;
   175a4:	2000      	movs	r0, #0
   175a6:	e04a      	b.n	1763e <conf_value_from_str+0x140>
            if (val < INT32_MIN || val > INT32_MAX) {
   175a8:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   175ac:	9100      	str	r1, [sp, #0]
   175ae:	f143 0100 	adc.w	r1, r3, #0
   175b2:	9101      	str	r1, [sp, #4]
   175b4:	e9dd 0100 	ldrd	r0, r1, [sp]
   175b8:	2901      	cmp	r1, #1
   175ba:	bf08      	it	eq
   175bc:	2800      	cmpeq	r0, #0
   175be:	d24d      	bcs.n	1765c <conf_value_from_str+0x15e>
            *(int32_t *)vp = val;
   175c0:	f8ca 2000 	str.w	r2, [sl]
    return 0;
   175c4:	2000      	movs	r0, #0
   175c6:	e03a      	b.n	1763e <conf_value_from_str+0x140>
        uval = strtoull(val_str, &eptr, 0);
   175c8:	2200      	movs	r2, #0
   175ca:	a903      	add	r1, sp, #12
   175cc:	f016 f9b2 	bl	2d934 <strtoull>
   175d0:	4602      	mov	r2, r0
   175d2:	460b      	mov	r3, r1
        if (*eptr != '\0') {
   175d4:	9903      	ldr	r1, [sp, #12]
   175d6:	7809      	ldrb	r1, [r1, #0]
   175d8:	2900      	cmp	r1, #0
   175da:	d141      	bne.n	17660 <conf_value_from_str+0x162>
        if (type == CONF_UINT8) {
   175dc:	2c0b      	cmp	r4, #11
   175de:	d007      	beq.n	175f0 <conf_value_from_str+0xf2>
        } else if (type == CONF_UINT16) {
   175e0:	2c0c      	cmp	r4, #12
   175e2:	d00e      	beq.n	17602 <conf_value_from_str+0x104>
        } else if (type == CONF_UINT32) {
   175e4:	2c0d      	cmp	r4, #13
   175e6:	d015      	beq.n	17614 <conf_value_from_str+0x116>
            *(uint64_t *)vp = uval;
   175e8:	e9ca 2300 	strd	r2, r3, [sl]
    return 0;
   175ec:	2000      	movs	r0, #0
   175ee:	e026      	b.n	1763e <conf_value_from_str+0x140>
            if (uval > UINT8_MAX) {
   175f0:	2b00      	cmp	r3, #0
   175f2:	bf08      	it	eq
   175f4:	f5b2 7f80 	cmpeq.w	r2, #256	; 0x100
   175f8:	d234      	bcs.n	17664 <conf_value_from_str+0x166>
            *(uint8_t *)vp = uval;
   175fa:	f88a 2000 	strb.w	r2, [sl]
    return 0;
   175fe:	2000      	movs	r0, #0
   17600:	e01d      	b.n	1763e <conf_value_from_str+0x140>
            if (uval > UINT16_MAX) {
   17602:	2b00      	cmp	r3, #0
   17604:	bf08      	it	eq
   17606:	f5b2 3f80 	cmpeq.w	r2, #65536	; 0x10000
   1760a:	d22d      	bcs.n	17668 <conf_value_from_str+0x16a>
            *(uint16_t *)vp = uval;
   1760c:	f8aa 2000 	strh.w	r2, [sl]
    return 0;
   17610:	2000      	movs	r0, #0
   17612:	e014      	b.n	1763e <conf_value_from_str+0x140>
            if (uval > UINT32_MAX) {
   17614:	2b01      	cmp	r3, #1
   17616:	bf08      	it	eq
   17618:	2a00      	cmpeq	r2, #0
   1761a:	d227      	bcs.n	1766c <conf_value_from_str+0x16e>
            *(uint32_t *)vp = uval;
   1761c:	f8ca 2000 	str.w	r2, [sl]
    return 0;
   17620:	2000      	movs	r0, #0
   17622:	e00c      	b.n	1763e <conf_value_from_str+0x140>
        val = strlen(val_str);
   17624:	f7ff faa3 	bl	16b6e <strlen>
   17628:	2100      	movs	r1, #0
        if (val + 1 > maxlen) {
   1762a:	17eb      	asrs	r3, r5, #31
   1762c:	42a8      	cmp	r0, r5
   1762e:	eb71 0303 	sbcs.w	r3, r1, r3
   17632:	da1d      	bge.n	17670 <conf_value_from_str+0x172>
        strcpy(vp, val_str);
   17634:	4659      	mov	r1, fp
   17636:	4650      	mov	r0, sl
   17638:	f016 f93e 	bl	2d8b8 <strcpy>
    return 0;
   1763c:	2000      	movs	r0, #0
}
   1763e:	b005      	add	sp, #20
   17640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return OS_INVALID_PARM;
   17644:	2003      	movs	r0, #3
}
   17646:	4770      	bx	lr
    if (!val_str) {
   17648:	2003      	movs	r0, #3
   1764a:	e7f8      	b.n	1763e <conf_value_from_str+0x140>
    return OS_INVALID_PARM;
   1764c:	2003      	movs	r0, #3
   1764e:	e7f6      	b.n	1763e <conf_value_from_str+0x140>
   17650:	2003      	movs	r0, #3
   17652:	e7f4      	b.n	1763e <conf_value_from_str+0x140>
   17654:	2003      	movs	r0, #3
   17656:	e7f2      	b.n	1763e <conf_value_from_str+0x140>
   17658:	2003      	movs	r0, #3
   1765a:	e7f0      	b.n	1763e <conf_value_from_str+0x140>
   1765c:	2003      	movs	r0, #3
   1765e:	e7ee      	b.n	1763e <conf_value_from_str+0x140>
   17660:	2003      	movs	r0, #3
   17662:	e7ec      	b.n	1763e <conf_value_from_str+0x140>
   17664:	2003      	movs	r0, #3
   17666:	e7ea      	b.n	1763e <conf_value_from_str+0x140>
   17668:	2003      	movs	r0, #3
   1766a:	e7e8      	b.n	1763e <conf_value_from_str+0x140>
   1766c:	2003      	movs	r0, #3
   1766e:	e7e6      	b.n	1763e <conf_value_from_str+0x140>
   17670:	2003      	movs	r0, #3
   17672:	e7e4      	b.n	1763e <conf_value_from_str+0x140>

00017674 <conf_str_from_value>:
{
   17674:	b530      	push	{r4, r5, lr}
   17676:	b083      	sub	sp, #12
   17678:	460d      	mov	r5, r1
    if (type == CONF_STRING) {
   1767a:	2806      	cmp	r0, #6
   1767c:	d046      	beq.n	1770c <conf_str_from_value+0x98>
   1767e:	4614      	mov	r4, r2
   17680:	4619      	mov	r1, r3
    switch (type) {
   17682:	280a      	cmp	r0, #10
   17684:	d012      	beq.n	176ac <conf_str_from_value+0x38>
   17686:	d90d      	bls.n	176a4 <conf_str_from_value+0x30>
   17688:	f1a0 020b 	sub.w	r2, r0, #11
   1768c:	b2d2      	uxtb	r2, r2
   1768e:	2a03      	cmp	r2, #3
   17690:	d841      	bhi.n	17716 <conf_str_from_value+0xa2>
        if (type == CONF_UINT8) {
   17692:	280b      	cmp	r0, #11
   17694:	d02a      	beq.n	176ec <conf_str_from_value+0x78>
        } else if (type == CONF_UINT16) {
   17696:	280c      	cmp	r0, #12
   17698:	d032      	beq.n	17700 <conf_str_from_value+0x8c>
        } else if (type == CONF_UINT32) {
   1769a:	280d      	cmp	r0, #13
   1769c:	d033      	beq.n	17706 <conf_str_from_value+0x92>
            uval = *(uint64_t *)vp;
   1769e:	e9d5 2300 	ldrd	r2, r3, [r5]
   176a2:	e025      	b.n	176f0 <conf_str_from_value+0x7c>
    switch (type) {
   176a4:	1e82      	subs	r2, r0, #2
   176a6:	b2d2      	uxtb	r2, r2
   176a8:	2a03      	cmp	r2, #3
   176aa:	d831      	bhi.n	17710 <conf_str_from_value+0x9c>
        if (type == CONF_BOOL) {
   176ac:	280a      	cmp	r0, #10
   176ae:	d008      	beq.n	176c2 <conf_str_from_value+0x4e>
        } else if (type == CONF_INT8) {
   176b0:	2802      	cmp	r0, #2
   176b2:	d010      	beq.n	176d6 <conf_str_from_value+0x62>
        } else if (type == CONF_INT16) {
   176b4:	2803      	cmp	r0, #3
   176b6:	d012      	beq.n	176de <conf_str_from_value+0x6a>
        } else if (type == CONF_INT32) {
   176b8:	2804      	cmp	r0, #4
   176ba:	d014      	beq.n	176e6 <conf_str_from_value+0x72>
            val = *(int64_t *)vp;
   176bc:	e9d5 2300 	ldrd	r2, r3, [r5]
   176c0:	e001      	b.n	176c6 <conf_str_from_value+0x52>
            val = *(bool *)vp;
   176c2:	782a      	ldrb	r2, [r5, #0]
   176c4:	2300      	movs	r3, #0
        snprintf(buf, buf_len, "%lld", val);
   176c6:	e9cd 2300 	strd	r2, r3, [sp]
   176ca:	4a14      	ldr	r2, [pc, #80]	; (1771c <conf_str_from_value+0xa8>)
   176cc:	4620      	mov	r0, r4
   176ce:	f016 fc94 	bl	2dffa <snprintf>
        return buf;
   176d2:	4620      	mov	r0, r4
   176d4:	e01d      	b.n	17712 <conf_str_from_value+0x9e>
            val = *(int8_t *)vp;
   176d6:	f995 2000 	ldrsb.w	r2, [r5]
   176da:	17d3      	asrs	r3, r2, #31
   176dc:	e7f3      	b.n	176c6 <conf_str_from_value+0x52>
            val = *(int16_t *)vp;
   176de:	f9b5 2000 	ldrsh.w	r2, [r5]
   176e2:	17d3      	asrs	r3, r2, #31
   176e4:	e7ef      	b.n	176c6 <conf_str_from_value+0x52>
            val = *(int32_t *)vp;
   176e6:	682a      	ldr	r2, [r5, #0]
   176e8:	17d3      	asrs	r3, r2, #31
   176ea:	e7ec      	b.n	176c6 <conf_str_from_value+0x52>
            uval = *(uint8_t *)vp;
   176ec:	782a      	ldrb	r2, [r5, #0]
   176ee:	2300      	movs	r3, #0
        snprintf(buf, buf_len, "%llu", uval);
   176f0:	e9cd 2300 	strd	r2, r3, [sp]
   176f4:	4a0a      	ldr	r2, [pc, #40]	; (17720 <conf_str_from_value+0xac>)
   176f6:	4620      	mov	r0, r4
   176f8:	f016 fc7f 	bl	2dffa <snprintf>
        return buf;
   176fc:	4620      	mov	r0, r4
   176fe:	e008      	b.n	17712 <conf_str_from_value+0x9e>
            uval = *(uint16_t *)vp;
   17700:	882a      	ldrh	r2, [r5, #0]
   17702:	2300      	movs	r3, #0
   17704:	e7f4      	b.n	176f0 <conf_str_from_value+0x7c>
            uval = *(uint32_t *)vp;
   17706:	682a      	ldr	r2, [r5, #0]
   17708:	2300      	movs	r3, #0
   1770a:	e7f1      	b.n	176f0 <conf_str_from_value+0x7c>
        return vp;
   1770c:	4608      	mov	r0, r1
   1770e:	e000      	b.n	17712 <conf_str_from_value+0x9e>
    switch (type) {
   17710:	2000      	movs	r0, #0
}
   17712:	b003      	add	sp, #12
   17714:	bd30      	pop	{r4, r5, pc}
    switch (type) {
   17716:	2000      	movs	r0, #0
   17718:	e7fb      	b.n	17712 <conf_str_from_value+0x9e>
   1771a:	bf00      	nop
   1771c:	00030748 	.word	0x00030748
   17720:	00030750 	.word	0x00030750

00017724 <conf_str_from_bytes>:
{
   17724:	b538      	push	{r3, r4, r5, lr}
   17726:	4615      	mov	r5, r2
    if (BASE64_ENCODE_SIZE(vp_len) > buf_len) {
   17728:	1e4a      	subs	r2, r1, #1
   1772a:	4c08      	ldr	r4, [pc, #32]	; (1774c <conf_str_from_bytes+0x28>)
   1772c:	fb84 c402 	smull	ip, r4, r4, r2
   17730:	eba4 74e2 	sub.w	r4, r4, r2, asr #31
   17734:	3401      	adds	r4, #1
   17736:	ebb3 0f84 	cmp.w	r3, r4, lsl #2
   1773a:	db05      	blt.n	17748 <conf_str_from_bytes+0x24>
    base64_encode(vp, vp_len, buf, 1);
   1773c:	2301      	movs	r3, #1
   1773e:	462a      	mov	r2, r5
   17740:	f011 f9a4 	bl	28a8c <base64_encode>
    return buf;
   17744:	4628      	mov	r0, r5
}
   17746:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
   17748:	2000      	movs	r0, #0
   1774a:	e7fc      	b.n	17746 <conf_str_from_bytes+0x22>
   1774c:	55555556 	.word	0x55555556

00017750 <conf_export_cb>:
 * Executes a conf_handler's "export" callback and returns the result.
 */
int
conf_export_cb(struct conf_handler *ch, conf_export_func_t export_func,
               conf_export_tgt_t tgt)
{
   17750:	b510      	push	{r4, lr}
   17752:	4603      	mov	r3, r0
   17754:	4608      	mov	r0, r1
   17756:	4611      	mov	r1, r2
    if (ch->ch_ext) {
   17758:	7a1a      	ldrb	r2, [r3, #8]
   1775a:	b122      	cbz	r2, 17766 <conf_export_cb+0x16>
        if (ch->ch_export_ext != NULL) {
   1775c:	699c      	ldr	r4, [r3, #24]
   1775e:	b134      	cbz	r4, 1776e <conf_export_cb+0x1e>
            return ch->ch_export_ext(export_func, tgt, ch->ch_arg);
   17760:	69da      	ldr	r2, [r3, #28]
   17762:	47a0      	blx	r4
            return ch->ch_export(export_func, tgt);
        }
    }

    return 0;
}
   17764:	bd10      	pop	{r4, pc}
        if (ch->ch_export != NULL) {
   17766:	699b      	ldr	r3, [r3, #24]
   17768:	b11b      	cbz	r3, 17772 <conf_export_cb+0x22>
            return ch->ch_export(export_func, tgt);
   1776a:	4798      	blx	r3
   1776c:	e7fa      	b.n	17764 <conf_export_cb+0x14>
    return 0;
   1776e:	2000      	movs	r0, #0
   17770:	e7f8      	b.n	17764 <conf_export_cb+0x14>
   17772:	2000      	movs	r0, #0
   17774:	e7f6      	b.n	17764 <conf_export_cb+0x14>

00017776 <conf_set_value>:

int
conf_set_value(char *name, char *val_str)
{
   17776:	b530      	push	{r4, r5, lr}
   17778:	b08b      	sub	sp, #44	; 0x2c
   1777a:	4604      	mov	r4, r0
   1777c:	460d      	mov	r5, r1
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;

    conf_lock();
   1777e:	f7ff fe69 	bl	17454 <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   17782:	aa01      	add	r2, sp, #4
   17784:	a909      	add	r1, sp, #36	; 0x24
   17786:	4620      	mov	r0, r4
   17788:	f7ff feae 	bl	174e8 <conf_parse_and_lookup>
    if (!ch) {
   1778c:	b158      	cbz	r0, 177a6 <conf_set_value+0x30>
        rc = OS_INVALID_PARM;
        goto out;
    }

    rc = conf_set_cb(ch, name_argc - 1, &name_argv[1], val_str);
   1778e:	462b      	mov	r3, r5
   17790:	aa02      	add	r2, sp, #8
   17792:	9909      	ldr	r1, [sp, #36]	; 0x24
   17794:	3901      	subs	r1, #1
   17796:	f7ff fe0a 	bl	173ae <conf_set_cb>
   1779a:	4604      	mov	r4, r0

out:
    conf_unlock();
   1779c:	f7ff fe64 	bl	17468 <conf_unlock>
    return rc;
}
   177a0:	4620      	mov	r0, r4
   177a2:	b00b      	add	sp, #44	; 0x2c
   177a4:	bd30      	pop	{r4, r5, pc}
        rc = OS_INVALID_PARM;
   177a6:	2403      	movs	r4, #3
   177a8:	e7f8      	b.n	1779c <conf_set_value+0x26>

000177aa <conf_get_value>:
 * Return value will be pointer to beginning of that buffer,
 * except for string it will pointer to beginning of string.
 */
char *
conf_get_value(char *name, char *buf, int buf_len)
{
   177aa:	b570      	push	{r4, r5, r6, lr}
   177ac:	b08c      	sub	sp, #48	; 0x30
   177ae:	4604      	mov	r4, r0
   177b0:	460d      	mov	r5, r1
   177b2:	4616      	mov	r6, r2
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    char *rval = NULL;

    conf_lock();
   177b4:	f7ff fe4e 	bl	17454 <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   177b8:	aa03      	add	r2, sp, #12
   177ba:	a90b      	add	r1, sp, #44	; 0x2c
   177bc:	4620      	mov	r0, r4
   177be:	f7ff fe93 	bl	174e8 <conf_parse_and_lookup>
    if (!ch) {
   177c2:	4604      	mov	r4, r0
   177c4:	b138      	cbz	r0, 177d6 <conf_get_value+0x2c>
        goto out;
    }

    rval = conf_get_cb(ch, name_argc - 1, &name_argv[1], buf, buf_len);
   177c6:	9600      	str	r6, [sp, #0]
   177c8:	462b      	mov	r3, r5
   177ca:	aa04      	add	r2, sp, #16
   177cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   177ce:	3901      	subs	r1, #1
   177d0:	f7ff fdd4 	bl	1737c <conf_get_cb>
   177d4:	4604      	mov	r4, r0

out:
    conf_unlock();
   177d6:	f7ff fe47 	bl	17468 <conf_unlock>
    return rval;
}
   177da:	4620      	mov	r0, r4
   177dc:	b00c      	add	sp, #48	; 0x30
   177de:	bd70      	pop	{r4, r5, r6, pc}

000177e0 <conf_commit>:


int
conf_commit(char *name)
{
   177e0:	b530      	push	{r4, r5, lr}
   177e2:	b08b      	sub	sp, #44	; 0x2c
   177e4:	4604      	mov	r4, r0
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
   177e6:	f7ff fe35 	bl	17454 <conf_lock>
    if (name) {
   177ea:	b16c      	cbz	r4, 17808 <conf_commit+0x28>
        ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   177ec:	aa01      	add	r2, sp, #4
   177ee:	a909      	add	r1, sp, #36	; 0x24
   177f0:	4620      	mov	r0, r4
   177f2:	f7ff fe79 	bl	174e8 <conf_parse_and_lookup>
        if (!ch) {
   177f6:	b1c0      	cbz	r0, 1782a <conf_commit+0x4a>
            rc = OS_INVALID_PARM;
            goto out;
        }
        rc = conf_commit_cb(ch);
   177f8:	f7ff fded 	bl	173d6 <conf_commit_cb>
   177fc:	4605      	mov	r5, r0
                }
            }
        }
    }
out:
    conf_unlock();
   177fe:	f7ff fe33 	bl	17468 <conf_unlock>
    return rc;
}
   17802:	4628      	mov	r0, r5
   17804:	b00b      	add	sp, #44	; 0x2c
   17806:	bd30      	pop	{r4, r5, pc}
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   17808:	4b09      	ldr	r3, [pc, #36]	; (17830 <conf_commit+0x50>)
   1780a:	681c      	ldr	r4, [r3, #0]
        rc = 0;
   1780c:	2500      	movs	r5, #0
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   1780e:	e000      	b.n	17812 <conf_commit+0x32>
   17810:	6824      	ldr	r4, [r4, #0]
   17812:	2c00      	cmp	r4, #0
   17814:	d0f3      	beq.n	177fe <conf_commit+0x1e>
            if (ch->ch_commit) {
   17816:	6963      	ldr	r3, [r4, #20]
   17818:	2b00      	cmp	r3, #0
   1781a:	d0f9      	beq.n	17810 <conf_commit+0x30>
                rc2 = conf_commit_cb(ch);
   1781c:	4620      	mov	r0, r4
   1781e:	f7ff fdda 	bl	173d6 <conf_commit_cb>
                if (!rc) {
   17822:	2d00      	cmp	r5, #0
   17824:	d1f4      	bne.n	17810 <conf_commit+0x30>
                    rc = rc2;
   17826:	4605      	mov	r5, r0
   17828:	e7f2      	b.n	17810 <conf_commit+0x30>
            rc = OS_INVALID_PARM;
   1782a:	2503      	movs	r5, #3
   1782c:	e7e7      	b.n	177fe <conf_commit+0x1e>
   1782e:	bf00      	nop
   17830:	1000302c 	.word	0x1000302c

00017834 <conf_fcb_load>:
    return 0;
}

static int
conf_fcb_load(struct conf_store *cs, conf_store_load_cb cb, void *cb_arg)
{
   17834:	b500      	push	{lr}
   17836:	b083      	sub	sp, #12
    struct conf_fcb *cf = (struct conf_fcb *)cs;
    struct conf_fcb_load_cb_arg arg;
    int rc;

    arg.cb = cb;
   17838:	9100      	str	r1, [sp, #0]
    arg.cb_arg = cb_arg;
   1783a:	9201      	str	r2, [sp, #4]
    rc = fcb_walk(&cf->cf_fcb, 0, conf_fcb_load_cb, &arg);
   1783c:	466b      	mov	r3, sp
   1783e:	4a05      	ldr	r2, [pc, #20]	; (17854 <conf_fcb_load+0x20>)
   17840:	2100      	movs	r1, #0
   17842:	3008      	adds	r0, #8
   17844:	f012 ff16 	bl	2a674 <fcb_walk>
    if (rc) {
   17848:	b910      	cbnz	r0, 17850 <conf_fcb_load+0x1c>
        return OS_EINVAL;
    }
    return OS_OK;
}
   1784a:	b003      	add	sp, #12
   1784c:	f85d fb04 	ldr.w	pc, [sp], #4
        return OS_EINVAL;
   17850:	2002      	movs	r0, #2
   17852:	e7fa      	b.n	1784a <conf_fcb_load+0x16>
   17854:	00017859 	.word	0x00017859

00017858 <conf_fcb_load_cb>:
{
   17858:	b530      	push	{r4, r5, lr}
   1785a:	b0db      	sub	sp, #364	; 0x16c
   1785c:	460d      	mov	r5, r1
    len = loc->fe_data_len;
   1785e:	8984      	ldrh	r4, [r0, #12]
    if (len >= sizeof(buf)) {
   17860:	f5b4 7fb0 	cmp.w	r4, #352	; 0x160
   17864:	d301      	bcc.n	1786a <conf_fcb_load_cb+0x12>
        len = sizeof(buf) - 1;
   17866:	f240 145f 	movw	r4, #351	; 0x15f
    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, len);
   1786a:	4623      	mov	r3, r4
   1786c:	aa02      	add	r2, sp, #8
   1786e:	6881      	ldr	r1, [r0, #8]
   17870:	6800      	ldr	r0, [r0, #0]
   17872:	f001 f95b 	bl	18b2c <flash_area_read>
    if (rc) {
   17876:	b110      	cbz	r0, 1787e <conf_fcb_load_cb+0x26>
}
   17878:	2000      	movs	r0, #0
   1787a:	b05b      	add	sp, #364	; 0x16c
   1787c:	bd30      	pop	{r4, r5, pc}
    buf[len] = '\0';
   1787e:	a802      	add	r0, sp, #8
   17880:	2300      	movs	r3, #0
   17882:	5503      	strb	r3, [r0, r4]
    rc = conf_line_parse(buf, &name_str, &val_str);
   17884:	466a      	mov	r2, sp
   17886:	a901      	add	r1, sp, #4
   17888:	f000 f910 	bl	17aac <conf_line_parse>
    if (rc) {
   1788c:	2800      	cmp	r0, #0
   1788e:	d1f3      	bne.n	17878 <conf_fcb_load_cb+0x20>
    argp->cb(name_str, val_str, argp->cb_arg);
   17890:	682b      	ldr	r3, [r5, #0]
   17892:	686a      	ldr	r2, [r5, #4]
   17894:	9900      	ldr	r1, [sp, #0]
   17896:	9801      	ldr	r0, [sp, #4]
   17898:	4798      	blx	r3
    return 0;
   1789a:	e7ed      	b.n	17878 <conf_fcb_load_cb+0x20>

0001789c <conf_fcb_var_read>:

static int
conf_fcb_var_read(struct fcb_entry *loc, char *buf, char **name, char **val)
{
   1789c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1789e:	4604      	mov	r4, r0
   178a0:	460d      	mov	r5, r1
   178a2:	4617      	mov	r7, r2
   178a4:	461e      	mov	r6, r3
    int rc;

    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, loc->fe_data_len);
   178a6:	8983      	ldrh	r3, [r0, #12]
   178a8:	460a      	mov	r2, r1
   178aa:	6881      	ldr	r1, [r0, #8]
   178ac:	6800      	ldr	r0, [r0, #0]
   178ae:	f001 f93d 	bl	18b2c <flash_area_read>
    if (rc) {
   178b2:	b100      	cbz	r0, 178b6 <conf_fcb_var_read+0x1a>
        return rc;
    }
    buf[loc->fe_data_len] = '\0';
    rc = conf_line_parse(buf, name, val);
    return rc;
}
   178b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    buf[loc->fe_data_len] = '\0';
   178b6:	89a3      	ldrh	r3, [r4, #12]
   178b8:	2200      	movs	r2, #0
   178ba:	54ea      	strb	r2, [r5, r3]
    rc = conf_line_parse(buf, name, val);
   178bc:	4632      	mov	r2, r6
   178be:	4639      	mov	r1, r7
   178c0:	4628      	mov	r0, r5
   178c2:	f000 f8f3 	bl	17aac <conf_line_parse>
    return rc;
   178c6:	e7f5      	b.n	178b4 <conf_fcb_var_read+0x18>

000178c8 <conf_fcb_compress_internal>:
static void
conf_fcb_compress_internal(struct fcb *fcb,
                           int (*copy_or_not)(const char *name, const char *val,
                                              void *cn_arg),
                           void *cn_arg)
{
   178c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   178ca:	f5ad 7d3d 	sub.w	sp, sp, #756	; 0x2f4
   178ce:	4604      	mov	r4, r0
   178d0:	460d      	mov	r5, r1
   178d2:	4616      	mov	r6, r2
    struct fcb_entry loc2;
    char *name1, *val1;
    char *name2, *val2;
    int copy;

    rc = fcb_append_to_scratch(fcb);
   178d4:	f012 fcc1 	bl	2a25a <fcb_append_to_scratch>
    if (rc) {
   178d8:	2800      	cmp	r0, #0
   178da:	d15d      	bne.n	17998 <conf_fcb_compress_internal+0xd0>
        return; /* XXX */
    }

    loc1.fe_area = NULL;
   178dc:	2300      	movs	r3, #0
   178de:	9308      	str	r3, [sp, #32]
    loc1.fe_elem_off = 0;
   178e0:	9309      	str	r3, [sp, #36]	; 0x24
    while (fcb_getnext(fcb, &loc1) == 0) {
   178e2:	a908      	add	r1, sp, #32
   178e4:	4620      	mov	r0, r4
   178e6:	f012 fe6f 	bl	2a5c8 <fcb_getnext>
   178ea:	2800      	cmp	r0, #0
   178ec:	d151      	bne.n	17992 <conf_fcb_compress_internal+0xca>
        if (loc1.fe_area != fcb->f_oldest) {
   178ee:	9a08      	ldr	r2, [sp, #32]
   178f0:	69a3      	ldr	r3, [r4, #24]
   178f2:	429a      	cmp	r2, r3
   178f4:	d14d      	bne.n	17992 <conf_fcb_compress_internal+0xca>
            break;
        }
        rc = conf_fcb_var_read(&loc1, buf1, &name1, &val1);
   178f6:	ab02      	add	r3, sp, #8
   178f8:	aa03      	add	r2, sp, #12
   178fa:	a964      	add	r1, sp, #400	; 0x190
   178fc:	a808      	add	r0, sp, #32
   178fe:	f7ff ffcd 	bl	1789c <conf_fcb_var_read>
        if (rc) {
   17902:	2800      	cmp	r0, #0
   17904:	d1ed      	bne.n	178e2 <conf_fcb_compress_internal+0x1a>
            continue;
        }
        if (!val1) {
   17906:	9b02      	ldr	r3, [sp, #8]
   17908:	2b00      	cmp	r3, #0
   1790a:	d0ea      	beq.n	178e2 <conf_fcb_compress_internal+0x1a>
            continue;
        }
        loc2 = loc1;
   1790c:	af04      	add	r7, sp, #16
   1790e:	ab08      	add	r3, sp, #32
   17910:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   17912:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
        copy = 1;
        while (fcb_getnext(fcb, &loc2) == 0) {
   17916:	a904      	add	r1, sp, #16
   17918:	4620      	mov	r0, r4
   1791a:	f012 fe55 	bl	2a5c8 <fcb_getnext>
   1791e:	b978      	cbnz	r0, 17940 <conf_fcb_compress_internal+0x78>
            rc = conf_fcb_var_read(&loc2, buf2, &name2, &val2);
   17920:	466b      	mov	r3, sp
   17922:	aa01      	add	r2, sp, #4
   17924:	a90c      	add	r1, sp, #48	; 0x30
   17926:	a804      	add	r0, sp, #16
   17928:	f7ff ffb8 	bl	1789c <conf_fcb_var_read>
            if (rc) {
   1792c:	2800      	cmp	r0, #0
   1792e:	d1f2      	bne.n	17916 <conf_fcb_compress_internal+0x4e>
                continue;
            }
            if (!strcmp(name1, name2)) {
   17930:	9901      	ldr	r1, [sp, #4]
   17932:	9803      	ldr	r0, [sp, #12]
   17934:	f7ff f90f 	bl	16b56 <strcmp>
   17938:	4603      	mov	r3, r0
   1793a:	2800      	cmp	r0, #0
   1793c:	d1eb      	bne.n	17916 <conf_fcb_compress_internal+0x4e>
   1793e:	e000      	b.n	17942 <conf_fcb_compress_internal+0x7a>
        copy = 1;
   17940:	2301      	movs	r3, #1
                copy = 0;
                break;
            }
        }
        if (!copy) {
   17942:	2b00      	cmp	r3, #0
   17944:	d0cd      	beq.n	178e2 <conf_fcb_compress_internal+0x1a>
            continue;
        }

        if (copy_or_not) {
   17946:	b12d      	cbz	r5, 17954 <conf_fcb_compress_internal+0x8c>
            if (copy_or_not(name1, val1, cn_arg)) {
   17948:	4632      	mov	r2, r6
   1794a:	9902      	ldr	r1, [sp, #8]
   1794c:	9803      	ldr	r0, [sp, #12]
   1794e:	47a8      	blx	r5
   17950:	2800      	cmp	r0, #0
   17952:	d1c6      	bne.n	178e2 <conf_fcb_compress_internal+0x1a>
            }
        }
        /*
         * Can't find one. Must copy.
         */
        rc = flash_area_read(loc1.fe_area, loc1.fe_data_off, buf1,
   17954:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   17958:	aa64      	add	r2, sp, #400	; 0x190
   1795a:	990a      	ldr	r1, [sp, #40]	; 0x28
   1795c:	9808      	ldr	r0, [sp, #32]
   1795e:	f001 f8e5 	bl	18b2c <flash_area_read>
          loc1.fe_data_len);
        if (rc) {
   17962:	2800      	cmp	r0, #0
   17964:	d1bd      	bne.n	178e2 <conf_fcb_compress_internal+0x1a>
            continue;
        }
        rc = fcb_append(fcb, loc1.fe_data_len, &loc2);
   17966:	aa04      	add	r2, sp, #16
   17968:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
   1796c:	4620      	mov	r0, r4
   1796e:	f012 fc8d 	bl	2a28c <fcb_append>
        if (rc) {
   17972:	2800      	cmp	r0, #0
   17974:	d1b5      	bne.n	178e2 <conf_fcb_compress_internal+0x1a>
            continue;
        }
        rc = flash_area_write(loc2.fe_area, loc2.fe_data_off, buf1,
   17976:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1797a:	aa64      	add	r2, sp, #400	; 0x190
   1797c:	9906      	ldr	r1, [sp, #24]
   1797e:	9804      	ldr	r0, [sp, #16]
   17980:	f001 f8e7 	bl	18b52 <flash_area_write>
          loc1.fe_data_len);
        if (rc) {
   17984:	2800      	cmp	r0, #0
   17986:	d1ac      	bne.n	178e2 <conf_fcb_compress_internal+0x1a>
            continue;
        }
        fcb_append_finish(fcb, &loc2);
   17988:	a904      	add	r1, sp, #16
   1798a:	4620      	mov	r0, r4
   1798c:	f012 fcfb 	bl	2a386 <fcb_append_finish>
   17990:	e7a7      	b.n	178e2 <conf_fcb_compress_internal+0x1a>
    }
    rc = fcb_rotate(fcb);
   17992:	4620      	mov	r0, r4
   17994:	f012 fe32 	bl	2a5fc <fcb_rotate>
    if (rc) {
        /* XXXX */
        ;
    }
}
   17998:	f50d 7d3d 	add.w	sp, sp, #756	; 0x2f4
   1799c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001799e <conf_fcb_append>:

static int
conf_fcb_append(struct fcb *fcb, char *buf, int len)
{
   1799e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   179a2:	b084      	sub	sp, #16
   179a4:	4606      	mov	r6, r0
   179a6:	4688      	mov	r8, r1
   179a8:	4617      	mov	r7, r2
    int rc;
    int i;
    struct fcb_entry loc;

    for (i = 0; i < 10; i++) {
   179aa:	2500      	movs	r5, #0
   179ac:	e005      	b.n	179ba <conf_fcb_append+0x1c>
            break;
        }
        if (fcb->f_scratch_cnt == 0) {
            return OS_ENOMEM;
        }
        conf_fcb_compress_internal(fcb, NULL, NULL);
   179ae:	2200      	movs	r2, #0
   179b0:	4611      	mov	r1, r2
   179b2:	4630      	mov	r0, r6
   179b4:	f7ff ff88 	bl	178c8 <conf_fcb_compress_internal>
    for (i = 0; i < 10; i++) {
   179b8:	3501      	adds	r5, #1
   179ba:	2d09      	cmp	r5, #9
   179bc:	dc0d      	bgt.n	179da <conf_fcb_append+0x3c>
        rc = fcb_append(fcb, len, &loc);
   179be:	466a      	mov	r2, sp
   179c0:	b2b9      	uxth	r1, r7
   179c2:	4630      	mov	r0, r6
   179c4:	f012 fc62 	bl	2a28c <fcb_append>
   179c8:	4604      	mov	r4, r0
        if (rc != FCB_ERR_NOSPACE) {
   179ca:	f110 0f04 	cmn.w	r0, #4
   179ce:	d104      	bne.n	179da <conf_fcb_append+0x3c>
        if (fcb->f_scratch_cnt == 0) {
   179d0:	79b3      	ldrb	r3, [r6, #6]
   179d2:	2b00      	cmp	r3, #0
   179d4:	d1eb      	bne.n	179ae <conf_fcb_append+0x10>
            return OS_ENOMEM;
   179d6:	2401      	movs	r4, #1
   179d8:	e00c      	b.n	179f4 <conf_fcb_append+0x56>
    }
    if (rc) {
   179da:	b97c      	cbnz	r4, 179fc <conf_fcb_append+0x5e>
        return OS_EINVAL;
    }
    rc = flash_area_write(loc.fe_area, loc.fe_data_off, buf, len);
   179dc:	463b      	mov	r3, r7
   179de:	4642      	mov	r2, r8
   179e0:	9902      	ldr	r1, [sp, #8]
   179e2:	9800      	ldr	r0, [sp, #0]
   179e4:	f001 f8b5 	bl	18b52 <flash_area_write>
    if (rc) {
   179e8:	4604      	mov	r4, r0
   179ea:	b948      	cbnz	r0, 17a00 <conf_fcb_append+0x62>
        return OS_EINVAL;
    }
    fcb_append_finish(fcb, &loc);
   179ec:	4669      	mov	r1, sp
   179ee:	4630      	mov	r0, r6
   179f0:	f012 fcc9 	bl	2a386 <fcb_append_finish>
    return OS_OK;
}
   179f4:	4620      	mov	r0, r4
   179f6:	b004      	add	sp, #16
   179f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return OS_EINVAL;
   179fc:	2402      	movs	r4, #2
   179fe:	e7f9      	b.n	179f4 <conf_fcb_append+0x56>
        return OS_EINVAL;
   17a00:	2402      	movs	r4, #2
   17a02:	e7f7      	b.n	179f4 <conf_fcb_append+0x56>

00017a04 <conf_fcb_src>:
{
   17a04:	b570      	push	{r4, r5, r6, lr}
   17a06:	4604      	mov	r4, r0
    cf->cf_fcb.f_version = CONF_FCB_VERS;
   17a08:	2301      	movs	r3, #1
   17a0a:	7303      	strb	r3, [r0, #12]
    if (cf->cf_fcb.f_sector_cnt > 1) {
   17a0c:	7b43      	ldrb	r3, [r0, #13]
   17a0e:	2b01      	cmp	r3, #1
   17a10:	d902      	bls.n	17a18 <conf_fcb_src+0x14>
        cf->cf_fcb.f_scratch_cnt = 1;
   17a12:	2301      	movs	r3, #1
   17a14:	7383      	strb	r3, [r0, #14]
   17a16:	e007      	b.n	17a28 <conf_fcb_src+0x24>
        cf->cf_fcb.f_scratch_cnt = 0;
   17a18:	2300      	movs	r3, #0
   17a1a:	7383      	strb	r3, [r0, #14]
   17a1c:	e004      	b.n	17a28 <conf_fcb_src+0x24>
            flash_area_erase(cf->cf_fcb.f_active.fe_area, 0,
   17a1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   17a20:	6882      	ldr	r2, [r0, #8]
   17a22:	2100      	movs	r1, #0
   17a24:	f001 f8a8 	bl	18b78 <flash_area_erase>
        rc = fcb_init(&cf->cf_fcb);
   17a28:	f104 0508 	add.w	r5, r4, #8
   17a2c:	4628      	mov	r0, r5
   17a2e:	f012 fb2d 	bl	2a08c <fcb_init>
        if (rc) {
   17a32:	4606      	mov	r6, r0
   17a34:	b968      	cbnz	r0, 17a52 <conf_fcb_src+0x4e>
        if (cf->cf_fcb.f_scratch_cnt &&
   17a36:	7ba3      	ldrb	r3, [r4, #14]
   17a38:	b123      	cbz	r3, 17a44 <conf_fcb_src+0x40>
            fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
   17a3a:	4628      	mov	r0, r5
   17a3c:	f012 faa3 	bl	29f86 <fcb_free_sector_cnt>
        if (cf->cf_fcb.f_scratch_cnt &&
   17a40:	2800      	cmp	r0, #0
   17a42:	ddec      	ble.n	17a1e <conf_fcb_src+0x1a>
    cf->cf_store.cs_itf = &conf_fcb_itf;
   17a44:	4b04      	ldr	r3, [pc, #16]	; (17a58 <conf_fcb_src+0x54>)
   17a46:	6063      	str	r3, [r4, #4]
    conf_src_register(&cf->cf_store);
   17a48:	4620      	mov	r0, r4
   17a4a:	f7ff fbd9 	bl	17200 <conf_src_register>
}
   17a4e:	4630      	mov	r0, r6
   17a50:	bd70      	pop	{r4, r5, r6, pc}
            return OS_INVALID_PARM;
   17a52:	2603      	movs	r6, #3
   17a54:	e7fb      	b.n	17a4e <conf_fcb_src+0x4a>
   17a56:	bf00      	nop
   17a58:	1000020c 	.word	0x1000020c

00017a5c <conf_fcb_dst>:
{
   17a5c:	b508      	push	{r3, lr}
    cf->cf_store.cs_itf = &conf_fcb_itf;
   17a5e:	4b03      	ldr	r3, [pc, #12]	; (17a6c <conf_fcb_dst+0x10>)
   17a60:	6043      	str	r3, [r0, #4]
    conf_dst_register(&cf->cf_store);
   17a62:	f7ff fbe1 	bl	17228 <conf_dst_register>
}
   17a66:	2000      	movs	r0, #0
   17a68:	bd08      	pop	{r3, pc}
   17a6a:	bf00      	nop
   17a6c:	1000020c 	.word	0x1000020c

00017a70 <conf_fcb_kv_save>:
conf_fcb_kv_save(struct fcb *fcb, const char *name, const char *value)
{
    char buf[CONF_MAX_NAME_LEN + CONF_MAX_VAL_LEN + 32];
    int len;

    if (!name) {
   17a70:	b199      	cbz	r1, 17a9a <conf_fcb_kv_save+0x2a>
{
   17a72:	b510      	push	{r4, lr}
   17a74:	b0d8      	sub	sp, #352	; 0x160
   17a76:	4604      	mov	r4, r0
   17a78:	4613      	mov	r3, r2
   17a7a:	460a      	mov	r2, r1
        return OS_INVALID_PARM;
    }

    len = conf_line_make(buf, sizeof(buf), name, value);
   17a7c:	f44f 71b0 	mov.w	r1, #352	; 0x160
   17a80:	4668      	mov	r0, sp
   17a82:	f000 f85f 	bl	17b44 <conf_line_make>
   17a86:	4602      	mov	r2, r0
    if (len < 0 || len + 2 > sizeof(buf)) {
   17a88:	f5b0 7faf 	cmp.w	r0, #350	; 0x15e
   17a8c:	d807      	bhi.n	17a9e <conf_fcb_kv_save+0x2e>
        return OS_INVALID_PARM;
    }
    return conf_fcb_append(fcb, buf, len);
   17a8e:	4669      	mov	r1, sp
   17a90:	4620      	mov	r0, r4
   17a92:	f7ff ff84 	bl	1799e <conf_fcb_append>
}
   17a96:	b058      	add	sp, #352	; 0x160
   17a98:	bd10      	pop	{r4, pc}
        return OS_INVALID_PARM;
   17a9a:	2003      	movs	r0, #3
}
   17a9c:	4770      	bx	lr
        return OS_INVALID_PARM;
   17a9e:	2003      	movs	r0, #3
   17aa0:	e7f9      	b.n	17a96 <conf_fcb_kv_save+0x26>

00017aa2 <conf_fcb_save>:
{
   17aa2:	b508      	push	{r3, lr}
    return conf_fcb_kv_save(&cf->cf_fcb, name, value);
   17aa4:	3008      	adds	r0, #8
   17aa6:	f7ff ffe3 	bl	17a70 <conf_fcb_kv_save>
}
   17aaa:	bd08      	pop	{r3, pc}

00017aac <conf_line_parse>:
#include "config/config.h"
#include "config_priv.h"

int
conf_line_parse(char *buf, char **namep, char **valp)
{
   17aac:	b410      	push	{r4}
        FIND_NAME_END,
        FIND_VAL,
        FIND_VAL_END
    } state = FIND_NAME;

    *valp = NULL;
   17aae:	2400      	movs	r4, #0
   17ab0:	6014      	str	r4, [r2, #0]
    for (cp = buf; *cp != '\0'; cp++) {
   17ab2:	e017      	b.n	17ae4 <conf_line_parse+0x38>
	return __c < 0x20;
}

__extern_inline int isspace(int __c)
{
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
   17ab4:	2b20      	cmp	r3, #32
   17ab6:	d014      	beq.n	17ae2 <conf_line_parse+0x36>
   17ab8:	2b0a      	cmp	r3, #10
   17aba:	d012      	beq.n	17ae2 <conf_line_parse+0x36>
   17abc:	2b09      	cmp	r3, #9
   17abe:	d010      	beq.n	17ae2 <conf_line_parse+0x36>
   17ac0:	2b0d      	cmp	r3, #13
   17ac2:	d00e      	beq.n	17ae2 <conf_line_parse+0x36>
        switch (state) {
        case FIND_NAME:
            if (!isspace((unsigned char)*cp)) {
                *namep = cp;
   17ac4:	6008      	str	r0, [r1, #0]
                state = FIND_NAME_END;
   17ac6:	2401      	movs	r4, #1
   17ac8:	e00b      	b.n	17ae2 <conf_line_parse+0x36>
            }
            break;
        case FIND_NAME_END:
            if (*cp == '=') {
   17aca:	2b3d      	cmp	r3, #61	; 0x3d
   17acc:	d01a      	beq.n	17b04 <conf_line_parse+0x58>
   17ace:	2b20      	cmp	r3, #32
   17ad0:	d005      	beq.n	17ade <conf_line_parse+0x32>
   17ad2:	2b0a      	cmp	r3, #10
   17ad4:	d003      	beq.n	17ade <conf_line_parse+0x32>
   17ad6:	2b09      	cmp	r3, #9
   17ad8:	d001      	beq.n	17ade <conf_line_parse+0x32>
   17ada:	2b0d      	cmp	r3, #13
   17adc:	d101      	bne.n	17ae2 <conf_line_parse+0x36>
                *cp = '\0';
                state = FIND_VAL;
            } else if (isspace((unsigned char)*cp)) {
                *cp = '\0';
   17ade:	2300      	movs	r3, #0
   17ae0:	7003      	strb	r3, [r0, #0]
    for (cp = buf; *cp != '\0'; cp++) {
   17ae2:	3001      	adds	r0, #1
   17ae4:	7803      	ldrb	r3, [r0, #0]
   17ae6:	b313      	cbz	r3, 17b2e <conf_line_parse+0x82>
        switch (state) {
   17ae8:	2c03      	cmp	r4, #3
   17aea:	d8fa      	bhi.n	17ae2 <conf_line_parse+0x36>
   17aec:	f20f 0c04 	addw	ip, pc, #4
   17af0:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   17af4:	00017ab5 	.word	0x00017ab5
   17af8:	00017acb 	.word	0x00017acb
   17afc:	00017b0d 	.word	0x00017b0d
   17b00:	00017b23 	.word	0x00017b23
                *cp = '\0';
   17b04:	2300      	movs	r3, #0
   17b06:	7003      	strb	r3, [r0, #0]
                state = FIND_VAL;
   17b08:	2402      	movs	r4, #2
   17b0a:	e7ea      	b.n	17ae2 <conf_line_parse+0x36>
   17b0c:	2b20      	cmp	r3, #32
   17b0e:	d0e8      	beq.n	17ae2 <conf_line_parse+0x36>
   17b10:	2b0a      	cmp	r3, #10
   17b12:	d0e6      	beq.n	17ae2 <conf_line_parse+0x36>
   17b14:	2b09      	cmp	r3, #9
   17b16:	d0e4      	beq.n	17ae2 <conf_line_parse+0x36>
   17b18:	2b0d      	cmp	r3, #13
   17b1a:	d0e2      	beq.n	17ae2 <conf_line_parse+0x36>
            }
            break;
        case FIND_VAL:
            if (!isspace((unsigned char)*cp)) {
                *valp = cp;
   17b1c:	6010      	str	r0, [r2, #0]
                state = FIND_VAL_END;
   17b1e:	2403      	movs	r4, #3
   17b20:	e7df      	b.n	17ae2 <conf_line_parse+0x36>
	    (__c >= '{' && __c <= '~');
}

__extern_inline int isprint(int __c)
{
	return (__c >= 0x20 && __c <= 0x7e);
   17b22:	3b20      	subs	r3, #32
            }
            break;
        case FIND_VAL_END:
            if (!isprint((unsigned char)*cp)) {
   17b24:	2b5e      	cmp	r3, #94	; 0x5e
   17b26:	d9dc      	bls.n	17ae2 <conf_line_parse+0x36>
                *cp = '\0';
   17b28:	2300      	movs	r3, #0
   17b2a:	7003      	strb	r3, [r0, #0]
   17b2c:	e7d9      	b.n	17ae2 <conf_line_parse+0x36>
            }
            break;
        }
    }
    if (state == FIND_VAL_END || state == FIND_VAL) {
   17b2e:	3c02      	subs	r4, #2
   17b30:	b2e4      	uxtb	r4, r4
   17b32:	2c01      	cmp	r4, #1
   17b34:	d802      	bhi.n	17b3c <conf_line_parse+0x90>
        return 0;
   17b36:	2000      	movs	r0, #0
    } else {
        return -1;
    }
}
   17b38:	bc10      	pop	{r4}
   17b3a:	4770      	bx	lr
        return -1;
   17b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17b40:	e7fa      	b.n	17b38 <conf_line_parse+0x8c>
   17b42:	bf00      	nop

00017b44 <conf_line_make>:

int
conf_line_make(char *dst, int dlen, const char *name, const char *value)
{
   17b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17b48:	4606      	mov	r6, r0
   17b4a:	4689      	mov	r9, r1
   17b4c:	4690      	mov	r8, r2
   17b4e:	461f      	mov	r7, r3
    int nlen;
    int vlen;
    int off;

    nlen = strlen(name);
   17b50:	4610      	mov	r0, r2
   17b52:	f7ff f80c 	bl	16b6e <strlen>
   17b56:	4605      	mov	r5, r0
    if (value) {
   17b58:	b1e7      	cbz	r7, 17b94 <conf_line_make+0x50>
        vlen = strlen(value);
   17b5a:	4638      	mov	r0, r7
   17b5c:	f7ff f807 	bl	16b6e <strlen>
   17b60:	4604      	mov	r4, r0
    } else {
        vlen = 0;
    }
    if (nlen + vlen + 2 > dlen) {
   17b62:	1963      	adds	r3, r4, r5
   17b64:	3301      	adds	r3, #1
   17b66:	454b      	cmp	r3, r9
   17b68:	da16      	bge.n	17b98 <conf_line_make+0x54>
        return -1;
    }
    memcpy(dst, name, nlen);
   17b6a:	462a      	mov	r2, r5
   17b6c:	4641      	mov	r1, r8
   17b6e:	4630      	mov	r0, r6
   17b70:	f7fe ffb0 	bl	16ad4 <memcpy>
    off = nlen;
    dst[off++] = '=';
   17b74:	f105 0801 	add.w	r8, r5, #1
   17b78:	233d      	movs	r3, #61	; 0x3d
   17b7a:	5573      	strb	r3, [r6, r5]

    memcpy(dst + off, value, vlen);
   17b7c:	4622      	mov	r2, r4
   17b7e:	4639      	mov	r1, r7
   17b80:	eb06 0008 	add.w	r0, r6, r8
   17b84:	f7fe ffa6 	bl	16ad4 <memcpy>
    off += vlen;
   17b88:	eb04 0008 	add.w	r0, r4, r8
    dst[off] = '\0';
   17b8c:	2300      	movs	r3, #0
   17b8e:	5433      	strb	r3, [r6, r0]

    return off;
}
   17b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        vlen = 0;
   17b94:	2400      	movs	r4, #0
   17b96:	e7e4      	b.n	17b62 <conf_line_make+0x1e>
        return -1;
   17b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17b9c:	e7f8      	b.n	17b90 <conf_line_make+0x4c>
	...

00017ba0 <conf_mgmt_write>:
#endif

#if CONFIG_MGMT_WRITE
static int
conf_mgmt_write(struct mgmt_ctxt *cb)
{
   17ba0:	b570      	push	{r4, r5, r6, lr}
   17ba2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
   17ba6:	4605      	mov	r5, r0
    int rc;
    char name_str[CONF_MAX_NAME_LEN];
    char val_str[CONF_MAX_VAL_LEN];
    bool do_save = false;
   17ba8:	f10d 06c7 	add.w	r6, sp, #199	; 0xc7
   17bac:	2400      	movs	r4, #0
   17bae:	f88d 40c7 	strb.w	r4, [sp, #199]	; 0xc7
    const struct cbor_attr_t val_attr[] = {
   17bb2:	22bc      	movs	r2, #188	; 0xbc
   17bb4:	4621      	mov	r1, r4
   17bb6:	a801      	add	r0, sp, #4
   17bb8:	f7fe ffb1 	bl	16b1e <memset>
   17bbc:	4b23      	ldr	r3, [pc, #140]	; (17c4c <conf_mgmt_write+0xac>)
   17bbe:	9300      	str	r3, [sp, #0]
   17bc0:	2304      	movs	r3, #4
   17bc2:	f88d 3004 	strb.w	r3, [sp, #4]
   17bc6:	aa72      	add	r2, sp, #456	; 0x1c8
   17bc8:	9202      	str	r2, [sp, #8]
   17bca:	2240      	movs	r2, #64	; 0x40
   17bcc:	920a      	str	r2, [sp, #40]	; 0x28
   17bce:	4a20      	ldr	r2, [pc, #128]	; (17c50 <conf_mgmt_write+0xb0>)
   17bd0:	920c      	str	r2, [sp, #48]	; 0x30
   17bd2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   17bd6:	ab32      	add	r3, sp, #200	; 0xc8
   17bd8:	930e      	str	r3, [sp, #56]	; 0x38
   17bda:	f44f 7280 	mov.w	r2, #256	; 0x100
   17bde:	9216      	str	r2, [sp, #88]	; 0x58
   17be0:	4a1c      	ldr	r2, [pc, #112]	; (17c54 <conf_mgmt_write+0xb4>)
   17be2:	9218      	str	r2, [sp, #96]	; 0x60
   17be4:	2205      	movs	r2, #5
   17be6:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
   17bea:	961a      	str	r6, [sp, #104]	; 0x68
        [3] = {
            .attribute = NULL
        }
    };

    name_str[0] = '\0';
   17bec:	f88d 41c8 	strb.w	r4, [sp, #456]	; 0x1c8
    val_str[0] = '\0';
   17bf0:	f88d 40c8 	strb.w	r4, [sp, #200]	; 0xc8

    rc = cbor_read_object(&cb->it, val_attr);
   17bf4:	4669      	mov	r1, sp
   17bf6:	f105 001c 	add.w	r0, r5, #28
   17bfa:	f003 f814 	bl	1ac26 <cbor_read_object>
    if (rc) {
   17bfe:	b9f8      	cbnz	r0, 17c40 <conf_mgmt_write+0xa0>
        return MGMT_ERR_EINVAL;
    }

    if (name_str[0] != '\0') {
   17c00:	f89d 31c8 	ldrb.w	r3, [sp, #456]	; 0x1c8
   17c04:	b13b      	cbz	r3, 17c16 <conf_mgmt_write+0x76>
        if (val_str[0] != '\0') {
   17c06:	f89d 30c8 	ldrb.w	r3, [sp, #200]	; 0xc8
   17c0a:	b173      	cbz	r3, 17c2a <conf_mgmt_write+0x8a>
            rc = conf_set_value(name_str, val_str);
   17c0c:	a932      	add	r1, sp, #200	; 0xc8
   17c0e:	a872      	add	r0, sp, #456	; 0x1c8
   17c10:	f7ff fdb1 	bl	17776 <conf_set_value>
        } else {
            rc = conf_set_value(name_str, NULL);
        }
        if (rc) {
   17c14:	b9b0      	cbnz	r0, 17c44 <conf_mgmt_write+0xa4>
            return MGMT_ERR_EINVAL;
        }
    }
    rc = conf_commit(NULL);
   17c16:	2000      	movs	r0, #0
   17c18:	f7ff fde2 	bl	177e0 <conf_commit>
    if (rc) {
   17c1c:	b9a0      	cbnz	r0, 17c48 <conf_mgmt_write+0xa8>
        return MGMT_ERR_EINVAL;
    }
    if (do_save) {
   17c1e:	f89d 30c7 	ldrb.w	r3, [sp, #199]	; 0xc7
   17c22:	b93b      	cbnz	r3, 17c34 <conf_mgmt_write+0x94>
        if (rc) {
            return MGMT_ERR_EINVAL;
        }
    }
    return 0;
}
   17c24:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   17c28:	bd70      	pop	{r4, r5, r6, pc}
            rc = conf_set_value(name_str, NULL);
   17c2a:	2100      	movs	r1, #0
   17c2c:	a872      	add	r0, sp, #456	; 0x1c8
   17c2e:	f7ff fda2 	bl	17776 <conf_set_value>
   17c32:	e7ef      	b.n	17c14 <conf_mgmt_write+0x74>
        rc = conf_save();
   17c34:	f7ff fb6c 	bl	17310 <conf_save>
        if (rc) {
   17c38:	2800      	cmp	r0, #0
   17c3a:	d0f3      	beq.n	17c24 <conf_mgmt_write+0x84>
            return MGMT_ERR_EINVAL;
   17c3c:	2003      	movs	r0, #3
   17c3e:	e7f1      	b.n	17c24 <conf_mgmt_write+0x84>
        return MGMT_ERR_EINVAL;
   17c40:	2003      	movs	r0, #3
   17c42:	e7ef      	b.n	17c24 <conf_mgmt_write+0x84>
            return MGMT_ERR_EINVAL;
   17c44:	2003      	movs	r0, #3
   17c46:	e7ed      	b.n	17c24 <conf_mgmt_write+0x84>
        return MGMT_ERR_EINVAL;
   17c48:	2003      	movs	r0, #3
   17c4a:	e7eb      	b.n	17c24 <conf_mgmt_write+0x84>
   17c4c:	00033b40 	.word	0x00033b40
   17c50:	00030758 	.word	0x00030758
   17c54:	0003075c 	.word	0x0003075c

00017c58 <conf_mgmt_read>:
{
   17c58:	b5f0      	push	{r4, r5, r6, r7, lr}
   17c5a:	b0e9      	sub	sp, #420	; 0x1a4
   17c5c:	4604      	mov	r4, r0
    const struct cbor_attr_t attr[2] = {
   17c5e:	225c      	movs	r2, #92	; 0x5c
   17c60:	2100      	movs	r1, #0
   17c62:	a801      	add	r0, sp, #4
   17c64:	f7fe ff5b 	bl	16b1e <memset>
   17c68:	4b18      	ldr	r3, [pc, #96]	; (17ccc <conf_mgmt_read+0x74>)
   17c6a:	9300      	str	r3, [sp, #0]
   17c6c:	2304      	movs	r3, #4
   17c6e:	f88d 3004 	strb.w	r3, [sp, #4]
   17c72:	ab58      	add	r3, sp, #352	; 0x160
   17c74:	9302      	str	r3, [sp, #8]
   17c76:	2340      	movs	r3, #64	; 0x40
   17c78:	930a      	str	r3, [sp, #40]	; 0x28
    rc = cbor_read_object(&cb->it, attr);
   17c7a:	4669      	mov	r1, sp
   17c7c:	f104 001c 	add.w	r0, r4, #28
   17c80:	f002 ffd1 	bl	1ac26 <cbor_read_object>
    if (rc) {
   17c84:	b9e0      	cbnz	r0, 17cc0 <conf_mgmt_read+0x68>
   17c86:	4605      	mov	r5, r0
    val = conf_get_value(name_str, val_str, sizeof(val_str));
   17c88:	f44f 7280 	mov.w	r2, #256	; 0x100
   17c8c:	a918      	add	r1, sp, #96	; 0x60
   17c8e:	a858      	add	r0, sp, #352	; 0x160
   17c90:	f7ff fd8b 	bl	177aa <conf_get_value>
    if (!val) {
   17c94:	4607      	mov	r7, r0
   17c96:	b1a8      	cbz	r0, 17cc4 <conf_mgmt_read+0x6c>
   17c98:	2203      	movs	r2, #3
   17c9a:	490d      	ldr	r1, [pc, #52]	; (17cd0 <conf_mgmt_read+0x78>)
   17c9c:	4620      	mov	r0, r4
   17c9e:	f011 f97b 	bl	28f98 <cbor_encode_text_string>
   17ca2:	4606      	mov	r6, r0
   17ca4:	4638      	mov	r0, r7
   17ca6:	f7fe ff62 	bl	16b6e <strlen>
   17caa:	4602      	mov	r2, r0
   17cac:	4639      	mov	r1, r7
   17cae:	4620      	mov	r0, r4
   17cb0:	f011 f972 	bl	28f98 <cbor_encode_text_string>
    if (g_err) {
   17cb4:	ea50 0306 	orrs.w	r3, r0, r6
   17cb8:	d106      	bne.n	17cc8 <conf_mgmt_read+0x70>
}
   17cba:	4628      	mov	r0, r5
   17cbc:	b069      	add	sp, #420	; 0x1a4
   17cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_EINVAL;
   17cc0:	2503      	movs	r5, #3
   17cc2:	e7fa      	b.n	17cba <conf_mgmt_read+0x62>
        return MGMT_ERR_EINVAL;
   17cc4:	2503      	movs	r5, #3
   17cc6:	e7f8      	b.n	17cba <conf_mgmt_read+0x62>
        return MGMT_ERR_ENOMEM;
   17cc8:	2502      	movs	r5, #2
   17cca:	e7f6      	b.n	17cba <conf_mgmt_read+0x62>
   17ccc:	00033b40 	.word	0x00033b40
   17cd0:	00030758 	.word	0x00030758

00017cd4 <conf_mgmt_register>:
#endif

int
conf_mgmt_register(void)
{
   17cd4:	b508      	push	{r3, lr}
     mgmt_register_group(&conf_mgmt_group);
   17cd6:	4802      	ldr	r0, [pc, #8]	; (17ce0 <conf_mgmt_register+0xc>)
   17cd8:	f004 f9e4 	bl	1c0a4 <mgmt_register_group>
     return 0;
}
   17cdc:	2000      	movs	r0, #0
   17cde:	bd08      	pop	{r3, pc}
   17ce0:	1000021c 	.word	0x1000021c

00017ce4 <add_ascii_num_with_char>:
 * Helper function for terminal escape sequences with number parameter.
 * It adds ascii encoded number plus one character.
 */
static char *
add_ascii_num_with_char(char *str, unsigned int num, char c)
{
   17ce4:	b470      	push	{r4, r5, r6}
    char *p = str;
   17ce6:	4604      	mov	r4, r0
    char *s;
    char tmp;

    /* Put digits in reverse order first. */
    do {
        *p++ = (num % 10) + '0';
   17ce8:	4b10      	ldr	r3, [pc, #64]	; (17d2c <add_ascii_num_with_char+0x48>)
   17cea:	fba3 5301 	umull	r5, r3, r3, r1
   17cee:	08db      	lsrs	r3, r3, #3
   17cf0:	461e      	mov	r6, r3
   17cf2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   17cf6:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
   17cfa:	4625      	mov	r5, r4
   17cfc:	3401      	adds	r4, #1
   17cfe:	3330      	adds	r3, #48	; 0x30
   17d00:	702b      	strb	r3, [r5, #0]
        num /= 10;
   17d02:	460b      	mov	r3, r1
   17d04:	4631      	mov	r1, r6
    } while (num);
   17d06:	2b09      	cmp	r3, #9
   17d08:	d8ee      	bhi.n	17ce8 <add_ascii_num_with_char+0x4>
    s = str;
    str = p;
    --p;
   17d0a:	462b      	mov	r3, r5
   17d0c:	e005      	b.n	17d1a <add_ascii_num_with_char+0x36>
    /* Revers order of characters, to get correct number representation */
    while (s < p) {
       tmp = *s;
   17d0e:	7801      	ldrb	r1, [r0, #0]
       *s++ = *p;
   17d10:	781e      	ldrb	r6, [r3, #0]
   17d12:	f800 6b01 	strb.w	r6, [r0], #1
       *p-- = tmp;
   17d16:	f803 1901 	strb.w	r1, [r3], #-1
    while (s < p) {
   17d1a:	4283      	cmp	r3, r0
   17d1c:	d8f7      	bhi.n	17d0e <add_ascii_num_with_char+0x2a>
    }

    *str++ = c;
   17d1e:	7022      	strb	r2, [r4, #0]
    *str = '\0';
   17d20:	2300      	movs	r3, #0
   17d22:	7063      	strb	r3, [r4, #1]

    return str;
}
   17d24:	1ca8      	adds	r0, r5, #2
   17d26:	bc70      	pop	{r4, r5, r6}
   17d28:	4770      	bx	lr
   17d2a:	bf00      	nop
   17d2c:	cccccccd 	.word	0xcccccccd

00017d30 <console_handle_line>:
    esc_state &= ~ESC_ANSI;
}

static void
console_handle_line(void)
{
   17d30:	b508      	push	{r3, lr}
    cur = 0;
   17d32:	2300      	movs	r3, #0
   17d34:	4a08      	ldr	r2, [pc, #32]	; (17d58 <console_handle_line+0x28>)
   17d36:	8013      	strh	r3, [r2, #0]
    trailing_chars = 0;
   17d38:	4a08      	ldr	r2, [pc, #32]	; (17d5c <console_handle_line+0x2c>)
   17d3a:	8013      	strh	r3, [r2, #0]
    os_eventq_put(lines_queue, current_line_ev);
   17d3c:	4b08      	ldr	r3, [pc, #32]	; (17d60 <console_handle_line+0x30>)
   17d3e:	6819      	ldr	r1, [r3, #0]
   17d40:	4b08      	ldr	r3, [pc, #32]	; (17d64 <console_handle_line+0x34>)
   17d42:	6818      	ldr	r0, [r3, #0]
   17d44:	f7fd fb61 	bl	1540a <os_eventq_put>

#if MYNEWT_VAL(CONSOLE_COMPAT)
    if (console_compat_rx_cb) {
   17d48:	4b07      	ldr	r3, [pc, #28]	; (17d68 <console_handle_line+0x38>)
   17d4a:	681b      	ldr	r3, [r3, #0]
   17d4c:	b103      	cbz	r3, 17d50 <console_handle_line+0x20>
        console_compat_rx_cb();
   17d4e:	4798      	blx	r3
    }
#endif

    current_line_ev = NULL;
   17d50:	4b03      	ldr	r3, [pc, #12]	; (17d60 <console_handle_line+0x30>)
   17d52:	2200      	movs	r2, #0
   17d54:	601a      	str	r2, [r3, #0]
}
   17d56:	bd08      	pop	{r3, pc}
   17d58:	1000306c 	.word	0x1000306c
   17d5c:	10003086 	.word	0x10003086
   17d60:	10003070 	.word	0x10003070
   17d64:	1000307c 	.word	0x1000307c
   17d68:	10003058 	.word	0x10003058

00017d6c <console_filter_out>:
{
   17d6c:	b508      	push	{r3, lr}
    if (g_console_silence) {
   17d6e:	4b0b      	ldr	r3, [pc, #44]	; (17d9c <console_filter_out+0x30>)
   17d70:	781b      	ldrb	r3, [r3, #0]
   17d72:	b95b      	cbnz	r3, 17d8c <console_filter_out+0x20>
    if (prompt_has_focus || g_is_output_nlip) {
   17d74:	4b0a      	ldr	r3, [pc, #40]	; (17da0 <console_filter_out+0x34>)
   17d76:	781b      	ldrb	r3, [r3, #0]
   17d78:	b94b      	cbnz	r3, 17d8e <console_filter_out+0x22>
    console_is_midline = c != '\n' && c != '\r';
   17d7a:	280a      	cmp	r0, #10
   17d7c:	d00c      	beq.n	17d98 <console_filter_out+0x2c>
   17d7e:	280d      	cmp	r0, #13
   17d80:	d008      	beq.n	17d94 <console_filter_out+0x28>
   17d82:	2201      	movs	r2, #1
   17d84:	4b07      	ldr	r3, [pc, #28]	; (17da4 <console_filter_out+0x38>)
   17d86:	601a      	str	r2, [r3, #0]
        c = console_out_nolock(c);
   17d88:	f000 fd7c 	bl	18884 <console_out_nolock>
}
   17d8c:	bd08      	pop	{r3, pc}
        return console_out_nolock(c);
   17d8e:	f000 fd79 	bl	18884 <console_out_nolock>
   17d92:	e7fb      	b.n	17d8c <console_filter_out+0x20>
    console_is_midline = c != '\n' && c != '\r';
   17d94:	2200      	movs	r2, #0
   17d96:	e7f5      	b.n	17d84 <console_filter_out+0x18>
   17d98:	2200      	movs	r2, #0
   17d9a:	e7f3      	b.n	17d84 <console_filter_out+0x18>
   17d9c:	10003079 	.word	0x10003079
   17da0:	1000307b 	.word	0x1000307b
   17da4:	1000305c 	.word	0x1000305c

00017da8 <console_filter_write>:
{
   17da8:	b570      	push	{r4, r5, r6, lr}
   17daa:	4606      	mov	r6, r0
   17dac:	460d      	mov	r5, r1
    for (i = 0; i < cnt; i++) {
   17dae:	2400      	movs	r4, #0
   17db0:	42ac      	cmp	r4, r5
   17db2:	da07      	bge.n	17dc4 <console_filter_write+0x1c>
        if (console_filter_out((int)str[i]) == EOF) {
   17db4:	5d30      	ldrb	r0, [r6, r4]
   17db6:	f7ff ffd9 	bl	17d6c <console_filter_out>
   17dba:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   17dbe:	d001      	beq.n	17dc4 <console_filter_write+0x1c>
    for (i = 0; i < cnt; i++) {
   17dc0:	3401      	adds	r4, #1
   17dc2:	e7f5      	b.n	17db0 <console_filter_write+0x8>
}
   17dc4:	bd70      	pop	{r4, r5, r6, pc}
	...

00017dc8 <console_append_char>:
    return handled;
}

static int
console_append_char(char *line, uint8_t byte)
{
   17dc8:	b508      	push	{r3, lr}
    if (cur + trailing_chars >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   17dca:	4b0d      	ldr	r3, [pc, #52]	; (17e00 <console_append_char+0x38>)
   17dcc:	881b      	ldrh	r3, [r3, #0]
   17dce:	4a0d      	ldr	r2, [pc, #52]	; (17e04 <console_append_char+0x3c>)
   17dd0:	8812      	ldrh	r2, [r2, #0]
   17dd2:	4413      	add	r3, r2
   17dd4:	2bfe      	cmp	r3, #254	; 0xfe
   17dd6:	dc0e      	bgt.n	17df6 <console_append_char+0x2e>
        return 0;
    }

    line[cur + trailing_chars] = byte;
   17dd8:	54c1      	strb	r1, [r0, r3]

    if (byte == '\0') {
   17dda:	b171      	cbz	r1, 17dfa <console_append_char+0x32>
        return 1;
    }

    if (echo) {
   17ddc:	4b0a      	ldr	r3, [pc, #40]	; (17e08 <console_append_char+0x40>)
   17dde:	681b      	ldr	r3, [r3, #0]
   17de0:	b92b      	cbnz	r3, 17dee <console_append_char+0x26>
        /* Echo back to console */
        console_switch_to_prompt();
        console_out_nolock(byte);
        console_switch_to_logs();
    }
    ++cur;
   17de2:	4a07      	ldr	r2, [pc, #28]	; (17e00 <console_append_char+0x38>)
   17de4:	8813      	ldrh	r3, [r2, #0]
   17de6:	3301      	adds	r3, #1
   17de8:	8013      	strh	r3, [r2, #0]
    return 1;
   17dea:	2001      	movs	r0, #1
}
   17dec:	bd08      	pop	{r3, pc}
        console_out_nolock(byte);
   17dee:	4608      	mov	r0, r1
   17df0:	f000 fd48 	bl	18884 <console_out_nolock>
        console_switch_to_logs();
   17df4:	e7f5      	b.n	17de2 <console_append_char+0x1a>
        return 0;
   17df6:	2000      	movs	r0, #0
   17df8:	e7f8      	b.n	17dec <console_append_char+0x24>
        return 1;
   17dfa:	2001      	movs	r0, #1
   17dfc:	e7f6      	b.n	17dec <console_append_char+0x24>
   17dfe:	bf00      	nop
   17e00:	1000306c 	.word	0x1000306c
   17e04:	10003086 	.word	0x10003086
   17e08:	10000228 	.word	0x10000228

00017e0c <console_write_nolock>:
{
   17e0c:	b570      	push	{r4, r5, r6, lr}
   17e0e:	4606      	mov	r6, r0
   17e10:	460d      	mov	r5, r1
    for (i = 0; i < cnt; i++) {
   17e12:	2400      	movs	r4, #0
   17e14:	42ac      	cmp	r4, r5
   17e16:	da07      	bge.n	17e28 <console_write_nolock+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) {
   17e18:	5d30      	ldrb	r0, [r6, r4]
   17e1a:	f000 fd33 	bl	18884 <console_out_nolock>
   17e1e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   17e22:	d001      	beq.n	17e28 <console_write_nolock+0x1c>
    for (i = 0; i < cnt; i++) {
   17e24:	3401      	adds	r4, #1
   17e26:	e7f5      	b.n	17e14 <console_write_nolock+0x8>
}
   17e28:	bd70      	pop	{r4, r5, r6, pc}
	...

00017e2c <handle_end>:
    if (trailing_chars) {
   17e2c:	4b11      	ldr	r3, [pc, #68]	; (17e74 <handle_end+0x48>)
   17e2e:	8819      	ldrh	r1, [r3, #0]
   17e30:	b901      	cbnz	r1, 17e34 <handle_end+0x8>
   17e32:	4770      	bx	lr
{
   17e34:	b510      	push	{r4, lr}
   17e36:	b084      	sub	sp, #16
    char seq[14] = CSI;
   17e38:	f645 331b 	movw	r3, #23323	; 0x5b1b
   17e3c:	9300      	str	r3, [sp, #0]
   17e3e:	2300      	movs	r3, #0
   17e40:	9301      	str	r3, [sp, #4]
   17e42:	9302      	str	r3, [sp, #8]
   17e44:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   17e48:	b949      	cbnz	r1, 17e5e <handle_end+0x32>
        cur += trailing_chars;
   17e4a:	490b      	ldr	r1, [pc, #44]	; (17e78 <handle_end+0x4c>)
   17e4c:	4a09      	ldr	r2, [pc, #36]	; (17e74 <handle_end+0x48>)
   17e4e:	880b      	ldrh	r3, [r1, #0]
   17e50:	8810      	ldrh	r0, [r2, #0]
   17e52:	4403      	add	r3, r0
   17e54:	800b      	strh	r3, [r1, #0]
        trailing_chars = 0;
   17e56:	2300      	movs	r3, #0
   17e58:	8013      	strh	r3, [r2, #0]
}
   17e5a:	b004      	add	sp, #16
   17e5c:	bd10      	pop	{r4, pc}
        p = add_ascii_num_with_char(seq + 2, count, 'C');
   17e5e:	466c      	mov	r4, sp
   17e60:	2243      	movs	r2, #67	; 0x43
   17e62:	f10d 0002 	add.w	r0, sp, #2
   17e66:	f7ff ff3d 	bl	17ce4 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   17e6a:	1b01      	subs	r1, r0, r4
   17e6c:	4620      	mov	r0, r4
   17e6e:	f7ff ffcd 	bl	17e0c <console_write_nolock>
   17e72:	e7ea      	b.n	17e4a <handle_end+0x1e>
   17e74:	10003086 	.word	0x10003086
   17e78:	1000306c 	.word	0x1000306c

00017e7c <handle_home>:
    if (cur) {
   17e7c:	4b11      	ldr	r3, [pc, #68]	; (17ec4 <handle_home+0x48>)
   17e7e:	8819      	ldrh	r1, [r3, #0]
   17e80:	b901      	cbnz	r1, 17e84 <handle_home+0x8>
   17e82:	4770      	bx	lr
{
   17e84:	b510      	push	{r4, lr}
   17e86:	b084      	sub	sp, #16
    char seq[14] = CSI;
   17e88:	f645 331b 	movw	r3, #23323	; 0x5b1b
   17e8c:	9300      	str	r3, [sp, #0]
   17e8e:	2300      	movs	r3, #0
   17e90:	9301      	str	r3, [sp, #4]
   17e92:	9302      	str	r3, [sp, #8]
   17e94:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   17e98:	b949      	cbnz	r1, 17eae <handle_home+0x32>
        trailing_chars += cur;
   17e9a:	490b      	ldr	r1, [pc, #44]	; (17ec8 <handle_home+0x4c>)
   17e9c:	4a09      	ldr	r2, [pc, #36]	; (17ec4 <handle_home+0x48>)
   17e9e:	880b      	ldrh	r3, [r1, #0]
   17ea0:	8810      	ldrh	r0, [r2, #0]
   17ea2:	4403      	add	r3, r0
   17ea4:	800b      	strh	r3, [r1, #0]
        cur = 0;
   17ea6:	2300      	movs	r3, #0
   17ea8:	8013      	strh	r3, [r2, #0]
}
   17eaa:	b004      	add	sp, #16
   17eac:	bd10      	pop	{r4, pc}
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   17eae:	466c      	mov	r4, sp
   17eb0:	2244      	movs	r2, #68	; 0x44
   17eb2:	f10d 0002 	add.w	r0, sp, #2
   17eb6:	f7ff ff15 	bl	17ce4 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   17eba:	1b01      	subs	r1, r0, r4
   17ebc:	4620      	mov	r0, r4
   17ebe:	f7ff ffa5 	bl	17e0c <console_write_nolock>
   17ec2:	e7ea      	b.n	17e9a <handle_home+0x1e>
   17ec4:	1000306c 	.word	0x1000306c
   17ec8:	10003086 	.word	0x10003086

00017ecc <del_char>:
{
   17ecc:	b530      	push	{r4, r5, lr}
   17ece:	b085      	sub	sp, #20
   17ed0:	4604      	mov	r4, r0
    left = trailing_chars;
   17ed2:	4b17      	ldr	r3, [pc, #92]	; (17f30 <del_char+0x64>)
   17ed4:	881b      	ldrh	r3, [r3, #0]
    while (left-- > 1) {
   17ed6:	1e5d      	subs	r5, r3, #1
   17ed8:	2b01      	cmp	r3, #1
   17eda:	dd06      	ble.n	17eea <del_char+0x1e>
        *pos = *(pos + 1);
   17edc:	7860      	ldrb	r0, [r4, #1]
   17ede:	f804 0b01 	strb.w	r0, [r4], #1
        console_out_nolock(*(pos++));
   17ee2:	f000 fccf 	bl	18884 <console_out_nolock>
    while (left-- > 1) {
   17ee6:	462b      	mov	r3, r5
   17ee8:	e7f5      	b.n	17ed6 <del_char+0xa>
    if (trailing_chars) {
   17eea:	4b11      	ldr	r3, [pc, #68]	; (17f30 <del_char+0x64>)
   17eec:	881b      	ldrh	r3, [r3, #0]
   17eee:	b90b      	cbnz	r3, 17ef4 <del_char+0x28>
}
   17ef0:	b005      	add	sp, #20
   17ef2:	bd30      	pop	{r4, r5, pc}
        console_out_nolock(' ');
   17ef4:	2020      	movs	r0, #32
   17ef6:	f000 fcc5 	bl	18884 <console_out_nolock>
        cursor_backward(trailing_chars);
   17efa:	4b0d      	ldr	r3, [pc, #52]	; (17f30 <del_char+0x64>)
   17efc:	8819      	ldrh	r1, [r3, #0]
    char seq[14] = CSI;
   17efe:	f645 331b 	movw	r3, #23323	; 0x5b1b
   17f02:	9300      	str	r3, [sp, #0]
   17f04:	2300      	movs	r3, #0
   17f06:	9301      	str	r3, [sp, #4]
   17f08:	9302      	str	r3, [sp, #8]
   17f0a:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   17f0e:	b921      	cbnz	r1, 17f1a <del_char+0x4e>
        trailing_chars--;
   17f10:	4a07      	ldr	r2, [pc, #28]	; (17f30 <del_char+0x64>)
   17f12:	8813      	ldrh	r3, [r2, #0]
   17f14:	3b01      	subs	r3, #1
   17f16:	8013      	strh	r3, [r2, #0]
}
   17f18:	e7ea      	b.n	17ef0 <del_char+0x24>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   17f1a:	466c      	mov	r4, sp
   17f1c:	2244      	movs	r2, #68	; 0x44
   17f1e:	f10d 0002 	add.w	r0, sp, #2
   17f22:	f7ff fedf 	bl	17ce4 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   17f26:	1b01      	subs	r1, r0, r4
   17f28:	4620      	mov	r0, r4
   17f2a:	f7ff ff6f 	bl	17e0c <console_write_nolock>
   17f2e:	e7ef      	b.n	17f10 <del_char+0x44>
   17f30:	10003086 	.word	0x10003086

00017f34 <handle_delete>:
{
   17f34:	b508      	push	{r3, lr}
    if (trailing_chars) {
   17f36:	4b05      	ldr	r3, [pc, #20]	; (17f4c <handle_delete+0x18>)
   17f38:	881b      	ldrh	r3, [r3, #0]
   17f3a:	b903      	cbnz	r3, 17f3e <handle_delete+0xa>
}
   17f3c:	bd08      	pop	{r3, pc}
        del_char(&line[cur]);
   17f3e:	4b04      	ldr	r3, [pc, #16]	; (17f50 <handle_delete+0x1c>)
   17f40:	881b      	ldrh	r3, [r3, #0]
   17f42:	4418      	add	r0, r3
   17f44:	f7ff ffc2 	bl	17ecc <del_char>
}
   17f48:	e7f8      	b.n	17f3c <handle_delete+0x8>
   17f4a:	bf00      	nop
   17f4c:	10003086 	.word	0x10003086
   17f50:	1000306c 	.word	0x1000306c

00017f54 <handle_ansi>:
{
   17f54:	4603      	mov	r3, r0
    if (esc_state & ESC_ANSI_FIRST) {
   17f56:	4a5e      	ldr	r2, [pc, #376]	; (180d0 <handle_ansi+0x17c>)
   17f58:	6812      	ldr	r2, [r2, #0]
   17f5a:	f012 0f04 	tst.w	r2, #4
   17f5e:	d025      	beq.n	17fac <handle_ansi+0x58>
        esc_state &= ~ESC_ANSI_FIRST;
   17f60:	f022 0204 	bic.w	r2, r2, #4
   17f64:	485a      	ldr	r0, [pc, #360]	; (180d0 <handle_ansi+0x17c>)
   17f66:	6002      	str	r2, [r0, #0]
        if (!isdigit(byte)) {
   17f68:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   17f6c:	2809      	cmp	r0, #9
   17f6e:	d912      	bls.n	17f96 <handle_ansi+0x42>
            ansi_val = 1;
   17f70:	4a58      	ldr	r2, [pc, #352]	; (180d4 <handle_ansi+0x180>)
   17f72:	2001      	movs	r0, #1
   17f74:	6010      	str	r0, [r2, #0]
{
   17f76:	b510      	push	{r4, lr}
   17f78:	b084      	sub	sp, #16
    switch (byte) {
   17f7a:	2b48      	cmp	r3, #72	; 0x48
   17f7c:	d840      	bhi.n	18000 <handle_ansi+0xac>
   17f7e:	2b43      	cmp	r3, #67	; 0x43
   17f80:	f0c0 8093 	bcc.w	180aa <handle_ansi+0x156>
   17f84:	3b43      	subs	r3, #67	; 0x43
   17f86:	2b05      	cmp	r3, #5
   17f88:	f200 808f 	bhi.w	180aa <handle_ansi+0x156>
   17f8c:	e8df f003 	tbb	[pc, r3]
   17f90:	948d4668 	.word	0x948d4668
   17f94:	8a8d      	.short	0x8a8d
        esc_state |= ESC_ANSI_VAL;
   17f96:	f042 0208 	orr.w	r2, r2, #8
   17f9a:	494d      	ldr	r1, [pc, #308]	; (180d0 <handle_ansi+0x17c>)
   17f9c:	600a      	str	r2, [r1, #0]
        ansi_val = byte - '0';
   17f9e:	3b30      	subs	r3, #48	; 0x30
   17fa0:	4a4c      	ldr	r2, [pc, #304]	; (180d4 <handle_ansi+0x180>)
   17fa2:	6013      	str	r3, [r2, #0]
        ansi_val_2 = 0;
   17fa4:	4b4c      	ldr	r3, [pc, #304]	; (180d8 <handle_ansi+0x184>)
   17fa6:	2200      	movs	r2, #0
   17fa8:	601a      	str	r2, [r3, #0]
        return;
   17faa:	4770      	bx	lr
    if (esc_state & ESC_ANSI_VAL) {
   17fac:	f012 0f08 	tst.w	r2, #8
   17fb0:	d0e1      	beq.n	17f76 <handle_ansi+0x22>
        if (isdigit(byte)) {
   17fb2:	3830      	subs	r0, #48	; 0x30
   17fb4:	2809      	cmp	r0, #9
   17fb6:	d906      	bls.n	17fc6 <handle_ansi+0x72>
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
   17fb8:	2b3b      	cmp	r3, #59	; 0x3b
   17fba:	d019      	beq.n	17ff0 <handle_ansi+0x9c>
        esc_state &= ~ESC_ANSI_VAL_2;
   17fbc:	f022 0218 	bic.w	r2, r2, #24
   17fc0:	4843      	ldr	r0, [pc, #268]	; (180d0 <handle_ansi+0x17c>)
   17fc2:	6002      	str	r2, [r0, #0]
   17fc4:	e7d7      	b.n	17f76 <handle_ansi+0x22>
            if (esc_state & ESC_ANSI_VAL_2) {
   17fc6:	f012 0f10 	tst.w	r2, #16
   17fca:	d008      	beq.n	17fde <handle_ansi+0x8a>
                ansi_val_2 *= 10;
   17fcc:	4942      	ldr	r1, [pc, #264]	; (180d8 <handle_ansi+0x184>)
   17fce:	680a      	ldr	r2, [r1, #0]
   17fd0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                ansi_val_2 += byte - '0';
   17fd4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   17fd8:	3b30      	subs	r3, #48	; 0x30
   17fda:	600b      	str	r3, [r1, #0]
   17fdc:	4770      	bx	lr
                ansi_val *= 10;
   17fde:	493d      	ldr	r1, [pc, #244]	; (180d4 <handle_ansi+0x180>)
   17fe0:	680a      	ldr	r2, [r1, #0]
   17fe2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                ansi_val += byte - '0';
   17fe6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   17fea:	3b30      	subs	r3, #48	; 0x30
   17fec:	600b      	str	r3, [r1, #0]
            return;
   17fee:	4770      	bx	lr
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
   17ff0:	f012 0f10 	tst.w	r2, #16
   17ff4:	d1e2      	bne.n	17fbc <handle_ansi+0x68>
            esc_state |= ESC_ANSI_VAL_2;
   17ff6:	f042 0210 	orr.w	r2, r2, #16
   17ffa:	4b35      	ldr	r3, [pc, #212]	; (180d0 <handle_ansi+0x17c>)
   17ffc:	601a      	str	r2, [r3, #0]
            return;
   17ffe:	4770      	bx	lr
    switch (byte) {
   18000:	2b7e      	cmp	r3, #126	; 0x7e
   18002:	d152      	bne.n	180aa <handle_ansi+0x156>
        switch (ansi_val) {
   18004:	4b33      	ldr	r3, [pc, #204]	; (180d4 <handle_ansi+0x180>)
   18006:	681b      	ldr	r3, [r3, #0]
   18008:	2b03      	cmp	r3, #3
   1800a:	d059      	beq.n	180c0 <handle_ansi+0x16c>
   1800c:	2b04      	cmp	r3, #4
   1800e:	d05b      	beq.n	180c8 <handle_ansi+0x174>
   18010:	2b01      	cmp	r3, #1
   18012:	d14a      	bne.n	180aa <handle_ansi+0x156>
            handle_home(line);
   18014:	4608      	mov	r0, r1
   18016:	f7ff ff31 	bl	17e7c <handle_home>
            break;
   1801a:	e046      	b.n	180aa <handle_ansi+0x156>
        if (ansi_val > cur) {
   1801c:	4b2f      	ldr	r3, [pc, #188]	; (180dc <handle_ansi+0x188>)
   1801e:	881b      	ldrh	r3, [r3, #0]
   18020:	4a2c      	ldr	r2, [pc, #176]	; (180d4 <handle_ansi+0x180>)
   18022:	6811      	ldr	r1, [r2, #0]
   18024:	428b      	cmp	r3, r1
   18026:	d340      	bcc.n	180aa <handle_ansi+0x156>
        trailing_chars += ansi_val;
   18028:	b28a      	uxth	r2, r1
   1802a:	4c2d      	ldr	r4, [pc, #180]	; (180e0 <handle_ansi+0x18c>)
   1802c:	8820      	ldrh	r0, [r4, #0]
   1802e:	4410      	add	r0, r2
   18030:	8020      	strh	r0, [r4, #0]
        cur -= ansi_val;
   18032:	1a9b      	subs	r3, r3, r2
   18034:	4a29      	ldr	r2, [pc, #164]	; (180dc <handle_ansi+0x188>)
   18036:	8013      	strh	r3, [r2, #0]
    char seq[14] = CSI;
   18038:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1803c:	9300      	str	r3, [sp, #0]
   1803e:	2300      	movs	r3, #0
   18040:	9301      	str	r3, [sp, #4]
   18042:	9302      	str	r3, [sp, #8]
   18044:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   18048:	b379      	cbz	r1, 180aa <handle_ansi+0x156>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   1804a:	466c      	mov	r4, sp
   1804c:	2244      	movs	r2, #68	; 0x44
   1804e:	f10d 0002 	add.w	r0, sp, #2
   18052:	f7ff fe47 	bl	17ce4 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   18056:	1b01      	subs	r1, r0, r4
   18058:	4620      	mov	r0, r4
   1805a:	f7ff fed7 	bl	17e0c <console_write_nolock>
}
   1805e:	e024      	b.n	180aa <handle_ansi+0x156>
        if (ansi_val > trailing_chars) {
   18060:	4b1f      	ldr	r3, [pc, #124]	; (180e0 <handle_ansi+0x18c>)
   18062:	881b      	ldrh	r3, [r3, #0]
   18064:	4a1b      	ldr	r2, [pc, #108]	; (180d4 <handle_ansi+0x180>)
   18066:	6811      	ldr	r1, [r2, #0]
   18068:	428b      	cmp	r3, r1
   1806a:	d31e      	bcc.n	180aa <handle_ansi+0x156>
        trailing_chars -= ansi_val;
   1806c:	b28a      	uxth	r2, r1
   1806e:	1a9b      	subs	r3, r3, r2
   18070:	481b      	ldr	r0, [pc, #108]	; (180e0 <handle_ansi+0x18c>)
   18072:	8003      	strh	r3, [r0, #0]
        cur += ansi_val;
   18074:	4b19      	ldr	r3, [pc, #100]	; (180dc <handle_ansi+0x188>)
   18076:	8818      	ldrh	r0, [r3, #0]
   18078:	4402      	add	r2, r0
   1807a:	801a      	strh	r2, [r3, #0]
    char seq[14] = CSI;
   1807c:	f645 331b 	movw	r3, #23323	; 0x5b1b
   18080:	9300      	str	r3, [sp, #0]
   18082:	2300      	movs	r3, #0
   18084:	9301      	str	r3, [sp, #4]
   18086:	9302      	str	r3, [sp, #8]
   18088:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   1808c:	b169      	cbz	r1, 180aa <handle_ansi+0x156>
        p = add_ascii_num_with_char(seq + 2, count, 'C');
   1808e:	466c      	mov	r4, sp
   18090:	2243      	movs	r2, #67	; 0x43
   18092:	f10d 0002 	add.w	r0, sp, #2
   18096:	f7ff fe25 	bl	17ce4 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   1809a:	1b01      	subs	r1, r0, r4
   1809c:	4620      	mov	r0, r4
   1809e:	f7ff feb5 	bl	17e0c <console_write_nolock>
}
   180a2:	e002      	b.n	180aa <handle_ansi+0x156>
        handle_home(line);
   180a4:	4608      	mov	r0, r1
   180a6:	f7ff fee9 	bl	17e7c <handle_home>
    esc_state &= ~ESC_ANSI;
   180aa:	4a09      	ldr	r2, [pc, #36]	; (180d0 <handle_ansi+0x17c>)
   180ac:	6813      	ldr	r3, [r2, #0]
   180ae:	f023 0302 	bic.w	r3, r3, #2
   180b2:	6013      	str	r3, [r2, #0]
}
   180b4:	b004      	add	sp, #16
   180b6:	bd10      	pop	{r4, pc}
        handle_end(line);
   180b8:	4608      	mov	r0, r1
   180ba:	f7ff feb7 	bl	17e2c <handle_end>
        break;
   180be:	e7f4      	b.n	180aa <handle_ansi+0x156>
            handle_delete(line);
   180c0:	4608      	mov	r0, r1
   180c2:	f7ff ff37 	bl	17f34 <handle_delete>
            break;
   180c6:	e7f0      	b.n	180aa <handle_ansi+0x156>
            handle_end(line);
   180c8:	4608      	mov	r0, r1
   180ca:	f7ff feaf 	bl	17e2c <handle_end>
            break;
   180ce:	e7ec      	b.n	180aa <handle_ansi+0x156>
   180d0:	10003074 	.word	0x10003074
   180d4:	1000303c 	.word	0x1000303c
   180d8:	10003040 	.word	0x10003040
   180dc:	1000306c 	.word	0x1000306c
   180e0:	10003086 	.word	0x10003086

000180e4 <handle_backspace>:

static void
handle_backspace(char *line)
{
    if (cur > 0) {
   180e4:	4b13      	ldr	r3, [pc, #76]	; (18134 <handle_backspace+0x50>)
   180e6:	881b      	ldrh	r3, [r3, #0]
   180e8:	b903      	cbnz	r3, 180ec <handle_backspace+0x8>
   180ea:	4770      	bx	lr
{
   180ec:	b530      	push	{r4, r5, lr}
   180ee:	b085      	sub	sp, #20
   180f0:	4604      	mov	r4, r0
    char seq[14] = CSI;
   180f2:	f645 331b 	movw	r3, #23323	; 0x5b1b
   180f6:	9300      	str	r3, [sp, #0]
   180f8:	2300      	movs	r3, #0
   180fa:	9301      	str	r3, [sp, #4]
   180fc:	9302      	str	r3, [sp, #8]
   180fe:	f8ad 300c 	strh.w	r3, [sp, #12]
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   18102:	466d      	mov	r5, sp
   18104:	2244      	movs	r2, #68	; 0x44
   18106:	2101      	movs	r1, #1
   18108:	f10d 0002 	add.w	r0, sp, #2
   1810c:	f7ff fdea 	bl	17ce4 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   18110:	1b41      	subs	r1, r0, r5
   18112:	4628      	mov	r0, r5
   18114:	f7ff fe7a 	bl	17e0c <console_write_nolock>
        cursor_backward(1);
        cur--;
   18118:	4a06      	ldr	r2, [pc, #24]	; (18134 <handle_backspace+0x50>)
   1811a:	8813      	ldrh	r3, [r2, #0]
   1811c:	3b01      	subs	r3, #1
   1811e:	b29b      	uxth	r3, r3
   18120:	8013      	strh	r3, [r2, #0]
        trailing_chars++;
   18122:	4905      	ldr	r1, [pc, #20]	; (18138 <handle_backspace+0x54>)
   18124:	880a      	ldrh	r2, [r1, #0]
   18126:	3201      	adds	r2, #1
   18128:	800a      	strh	r2, [r1, #0]
        del_char(&line[cur]);
   1812a:	18e0      	adds	r0, r4, r3
   1812c:	f7ff fece 	bl	17ecc <del_char>
    }
}
   18130:	b005      	add	sp, #20
   18132:	bd30      	pop	{r4, r5, pc}
   18134:	1000306c 	.word	0x1000306c
   18138:	10003086 	.word	0x10003086

0001813c <console_clear_line>:
{
   1813c:	b510      	push	{r4, lr}
   1813e:	b084      	sub	sp, #16
    if (cur) {
   18140:	4b13      	ldr	r3, [pc, #76]	; (18190 <console_clear_line+0x54>)
   18142:	8819      	ldrh	r1, [r3, #0]
   18144:	b979      	cbnz	r1, 18166 <console_clear_line+0x2a>
    cur = 0;
   18146:	2300      	movs	r3, #0
   18148:	4a11      	ldr	r2, [pc, #68]	; (18190 <console_clear_line+0x54>)
   1814a:	8013      	strh	r3, [r2, #0]
    trailing_chars = 0;
   1814c:	4a11      	ldr	r2, [pc, #68]	; (18194 <console_clear_line+0x58>)
   1814e:	8013      	strh	r3, [r2, #0]
    console_out_nolock(ESC);
   18150:	201b      	movs	r0, #27
   18152:	f000 fb97 	bl	18884 <console_out_nolock>
    console_out_nolock('[');
   18156:	205b      	movs	r0, #91	; 0x5b
   18158:	f000 fb94 	bl	18884 <console_out_nolock>
    console_out_nolock('K');
   1815c:	204b      	movs	r0, #75	; 0x4b
   1815e:	f000 fb91 	bl	18884 <console_out_nolock>
}
   18162:	b004      	add	sp, #16
   18164:	bd10      	pop	{r4, pc}
    char seq[14] = CSI;
   18166:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1816a:	9300      	str	r3, [sp, #0]
   1816c:	2300      	movs	r3, #0
   1816e:	9301      	str	r3, [sp, #4]
   18170:	9302      	str	r3, [sp, #8]
   18172:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   18176:	2900      	cmp	r1, #0
   18178:	d0e5      	beq.n	18146 <console_clear_line+0xa>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   1817a:	466c      	mov	r4, sp
   1817c:	2244      	movs	r2, #68	; 0x44
   1817e:	f10d 0002 	add.w	r0, sp, #2
   18182:	f7ff fdaf 	bl	17ce4 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   18186:	1b01      	subs	r1, r0, r4
   18188:	4620      	mov	r0, r4
   1818a:	f7ff fe3f 	bl	17e0c <console_write_nolock>
}
   1818e:	e7da      	b.n	18146 <console_clear_line+0xa>
   18190:	1000306c 	.word	0x1000306c
   18194:	10003086 	.word	0x10003086

00018198 <insert_char>:
        cur + trailing_chars >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   18198:	4b26      	ldr	r3, [pc, #152]	; (18234 <insert_char+0x9c>)
   1819a:	881b      	ldrh	r3, [r3, #0]
   1819c:	4a26      	ldr	r2, [pc, #152]	; (18238 <insert_char+0xa0>)
   1819e:	8812      	ldrh	r2, [r2, #0]
   181a0:	4413      	add	r3, r2
    if ((!MYNEWT_VAL(CONSOLE_HISTORY_AUTO_SEARCH) || !trailing_selection) &&
   181a2:	2bfe      	cmp	r3, #254	; 0xfe
   181a4:	dc44      	bgt.n	18230 <insert_char+0x98>
{
   181a6:	b570      	push	{r4, r5, r6, lr}
   181a8:	b084      	sub	sp, #16
   181aa:	4604      	mov	r4, r0
   181ac:	460e      	mov	r6, r1
    if (echo) {
   181ae:	4b23      	ldr	r3, [pc, #140]	; (1823c <insert_char+0xa4>)
   181b0:	681b      	ldr	r3, [r3, #0]
   181b2:	b95b      	cbnz	r3, 181cc <insert_char+0x34>
    ++cur;
   181b4:	4a1f      	ldr	r2, [pc, #124]	; (18234 <insert_char+0x9c>)
   181b6:	8813      	ldrh	r3, [r2, #0]
   181b8:	3301      	adds	r3, #1
   181ba:	8013      	strh	r3, [r2, #0]
    if (trailing_chars == 0) {
   181bc:	4b1e      	ldr	r3, [pc, #120]	; (18238 <insert_char+0xa0>)
   181be:	881b      	ldrh	r3, [r3, #0]
   181c0:	b903      	cbnz	r3, 181c4 <insert_char+0x2c>
        *pos = c;
   181c2:	7026      	strb	r6, [r4, #0]
    tmp = *pos;
   181c4:	7825      	ldrb	r5, [r4, #0]
    *(pos++) = c;
   181c6:	f804 6b01 	strb.w	r6, [r4], #1
    while (end-- > 0) {
   181ca:	e00d      	b.n	181e8 <insert_char+0x50>
        console_out_nolock(c);
   181cc:	4608      	mov	r0, r1
   181ce:	f000 fb59 	bl	18884 <console_out_nolock>
   181d2:	e7ef      	b.n	181b4 <insert_char+0x1c>
            console_out_nolock(tmp);
   181d4:	4628      	mov	r0, r5
   181d6:	f000 fb55 	bl	18884 <console_out_nolock>
        c = *pos;
   181da:	7822      	ldrb	r2, [r4, #0]
        *(pos++) = tmp;
   181dc:	4620      	mov	r0, r4
   181de:	f800 5b01 	strb.w	r5, [r0], #1
    while (end-- > 0) {
   181e2:	4633      	mov	r3, r6
        tmp = c;
   181e4:	4615      	mov	r5, r2
        *(pos++) = tmp;
   181e6:	4604      	mov	r4, r0
    while (end-- > 0) {
   181e8:	1e5e      	subs	r6, r3, #1
   181ea:	2b00      	cmp	r3, #0
   181ec:	dd04      	ble.n	181f8 <insert_char+0x60>
        if (echo) {
   181ee:	4b13      	ldr	r3, [pc, #76]	; (1823c <insert_char+0xa4>)
   181f0:	681b      	ldr	r3, [r3, #0]
   181f2:	2b00      	cmp	r3, #0
   181f4:	d0f1      	beq.n	181da <insert_char+0x42>
   181f6:	e7ed      	b.n	181d4 <insert_char+0x3c>
    if (echo) {
   181f8:	4b10      	ldr	r3, [pc, #64]	; (1823c <insert_char+0xa4>)
   181fa:	681b      	ldr	r3, [r3, #0]
   181fc:	b90b      	cbnz	r3, 18202 <insert_char+0x6a>
}
   181fe:	b004      	add	sp, #16
   18200:	bd70      	pop	{r4, r5, r6, pc}
        cursor_backward(trailing_chars);
   18202:	4b0d      	ldr	r3, [pc, #52]	; (18238 <insert_char+0xa0>)
   18204:	8819      	ldrh	r1, [r3, #0]
    char seq[14] = CSI;
   18206:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1820a:	9300      	str	r3, [sp, #0]
   1820c:	2300      	movs	r3, #0
   1820e:	9301      	str	r3, [sp, #4]
   18210:	9302      	str	r3, [sp, #8]
   18212:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   18216:	2900      	cmp	r1, #0
   18218:	d0f1      	beq.n	181fe <insert_char+0x66>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   1821a:	466c      	mov	r4, sp
   1821c:	2244      	movs	r2, #68	; 0x44
   1821e:	f10d 0002 	add.w	r0, sp, #2
   18222:	f7ff fd5f 	bl	17ce4 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   18226:	1b01      	subs	r1, r0, r4
   18228:	4620      	mov	r0, r4
   1822a:	f7ff fdef 	bl	17e0c <console_write_nolock>
}
   1822e:	e7e6      	b.n	181fe <insert_char+0x66>
   18230:	4770      	bx	lr
   18232:	bf00      	nop
   18234:	1000306c 	.word	0x1000306c
   18238:	10003086 	.word	0x10003086
   1823c:	10000228 	.word	0x10000228

00018240 <console_echo>:
    echo = on;
   18240:	4b01      	ldr	r3, [pc, #4]	; (18248 <console_echo+0x8>)
   18242:	6018      	str	r0, [r3, #0]
}
   18244:	4770      	bx	lr
   18246:	bf00      	nop
   18248:	10000228 	.word	0x10000228

0001824c <console_nlip_enable_echo>:
{
   1824c:	b508      	push	{r3, lr}
    console_echo(1);
   1824e:	2001      	movs	r0, #1
   18250:	f7ff fff6 	bl	18240 <console_echo>
}
   18254:	bd08      	pop	{r3, pc}

00018256 <console_nlip_disable_echo>:
{
   18256:	b508      	push	{r3, lr}
    console_echo(0);
   18258:	2000      	movs	r0, #0
   1825a:	f7ff fff1 	bl	18240 <console_echo>
}
   1825e:	bd08      	pop	{r3, pc}

00018260 <handle_nlip>:
{
   18260:	b570      	push	{r4, r5, r6, lr}
   18262:	4604      	mov	r4, r0
    input = current_line_ev->ev_arg;
   18264:	4b3b      	ldr	r3, [pc, #236]	; (18354 <handle_nlip+0xf4>)
   18266:	681b      	ldr	r3, [r3, #0]
   18268:	689d      	ldr	r5, [r3, #8]
    switch (nlip_state) {
   1826a:	4b3b      	ldr	r3, [pc, #236]	; (18358 <handle_nlip+0xf8>)
   1826c:	681b      	ldr	r3, [r3, #0]
   1826e:	3b04      	subs	r3, #4
   18270:	2b10      	cmp	r3, #16
   18272:	d852      	bhi.n	1831a <handle_nlip+0xba>
   18274:	e8df f003 	tbb	[pc, r3]
   18278:	511f5138 	.word	0x511f5138
   1827c:	51510951 	.word	0x51510951
   18280:	51515151 	.word	0x51515151
   18284:	51515151 	.word	0x51515151
   18288:	09          	.byte	0x09
   18289:	00          	.byte	0x00
        insert_char(&input->line[cur], byte);
   1828a:	4b34      	ldr	r3, [pc, #208]	; (1835c <handle_nlip+0xfc>)
   1828c:	8818      	ldrh	r0, [r3, #0]
   1828e:	4621      	mov	r1, r4
   18290:	4428      	add	r0, r5
   18292:	f7ff ff81 	bl	18198 <insert_char>
        if (byte == '\n') {
   18296:	2c0a      	cmp	r4, #10
   18298:	d001      	beq.n	1829e <handle_nlip+0x3e>
    handled = 1;
   1829a:	2001      	movs	r0, #1
}
   1829c:	bd70      	pop	{r4, r5, r6, pc}
            input->line[cur] = '\0';
   1829e:	4b2f      	ldr	r3, [pc, #188]	; (1835c <handle_nlip+0xfc>)
   182a0:	881b      	ldrh	r3, [r3, #0]
   182a2:	2400      	movs	r4, #0
   182a4:	54ec      	strb	r4, [r5, r3]
            console_nlip_enable_echo();
   182a6:	f7ff ffd1 	bl	1824c <console_nlip_enable_echo>
            nlip_state = 0;
   182aa:	4b2b      	ldr	r3, [pc, #172]	; (18358 <handle_nlip+0xf8>)
   182ac:	601c      	str	r4, [r3, #0]
            console_handle_line();
   182ae:	f7ff fd3f 	bl	17d30 <console_handle_line>
    handled = 1;
   182b2:	2001      	movs	r0, #1
   182b4:	e7f2      	b.n	1829c <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_PKT_START2) {
   182b6:	2809      	cmp	r0, #9
   182b8:	d005      	beq.n	182c6 <handle_nlip+0x66>
            nlip_state = 0;
   182ba:	4b27      	ldr	r3, [pc, #156]	; (18358 <handle_nlip+0xf8>)
   182bc:	2200      	movs	r2, #0
   182be:	601a      	str	r2, [r3, #0]
            handled = g_console_ignore_non_nlip;
   182c0:	4b27      	ldr	r3, [pc, #156]	; (18360 <handle_nlip+0x100>)
   182c2:	7818      	ldrb	r0, [r3, #0]
   182c4:	e7ea      	b.n	1829c <handle_nlip+0x3c>
            nlip_state = NLIP_PKT_START2;
   182c6:	4b24      	ldr	r3, [pc, #144]	; (18358 <handle_nlip+0xf8>)
   182c8:	6018      	str	r0, [r3, #0]
            console_nlip_disable_echo();
   182ca:	f7ff ffc4 	bl	18256 <console_nlip_disable_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START1);
   182ce:	4e23      	ldr	r6, [pc, #140]	; (1835c <handle_nlip+0xfc>)
   182d0:	8830      	ldrh	r0, [r6, #0]
   182d2:	2106      	movs	r1, #6
   182d4:	4428      	add	r0, r5
   182d6:	f7ff ff5f 	bl	18198 <insert_char>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START2);
   182da:	8830      	ldrh	r0, [r6, #0]
   182dc:	4621      	mov	r1, r4
   182de:	4428      	add	r0, r5
   182e0:	f7ff ff5a 	bl	18198 <insert_char>
    handled = 1;
   182e4:	2001      	movs	r0, #1
   182e6:	e7d9      	b.n	1829c <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_DATA_START2) {
   182e8:	2814      	cmp	r0, #20
   182ea:	d005      	beq.n	182f8 <handle_nlip+0x98>
            nlip_state = 0;
   182ec:	4b1a      	ldr	r3, [pc, #104]	; (18358 <handle_nlip+0xf8>)
   182ee:	2200      	movs	r2, #0
   182f0:	601a      	str	r2, [r3, #0]
            handled = g_console_ignore_non_nlip;
   182f2:	4b1b      	ldr	r3, [pc, #108]	; (18360 <handle_nlip+0x100>)
   182f4:	7818      	ldrb	r0, [r3, #0]
   182f6:	e7d1      	b.n	1829c <handle_nlip+0x3c>
            nlip_state = NLIP_DATA_START2;
   182f8:	4b17      	ldr	r3, [pc, #92]	; (18358 <handle_nlip+0xf8>)
   182fa:	6018      	str	r0, [r3, #0]
            console_nlip_disable_echo();
   182fc:	f7ff ffab 	bl	18256 <console_nlip_disable_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1);
   18300:	4e16      	ldr	r6, [pc, #88]	; (1835c <handle_nlip+0xfc>)
   18302:	8830      	ldrh	r0, [r6, #0]
   18304:	2104      	movs	r1, #4
   18306:	4428      	add	r0, r5
   18308:	f7ff ff46 	bl	18198 <insert_char>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START2);
   1830c:	8830      	ldrh	r0, [r6, #0]
   1830e:	4621      	mov	r1, r4
   18310:	4428      	add	r0, r5
   18312:	f7ff ff41 	bl	18198 <insert_char>
    handled = 1;
   18316:	2001      	movs	r0, #1
   18318:	e7c0      	b.n	1829c <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_DATA_START1) {
   1831a:	2804      	cmp	r0, #4
   1831c:	d00a      	beq.n	18334 <handle_nlip+0xd4>
        } else if (byte == CONSOLE_NLIP_PKT_START1) {
   1831e:	2806      	cmp	r0, #6
   18320:	d00d      	beq.n	1833e <handle_nlip+0xde>
            handled = g_console_ignore_non_nlip && byte != '\r' && byte != '\n';
   18322:	4b0f      	ldr	r3, [pc, #60]	; (18360 <handle_nlip+0x100>)
   18324:	781b      	ldrb	r3, [r3, #0]
   18326:	b18b      	cbz	r3, 1834c <handle_nlip+0xec>
   18328:	280d      	cmp	r0, #13
   1832a:	d011      	beq.n	18350 <handle_nlip+0xf0>
   1832c:	280a      	cmp	r0, #10
   1832e:	d00b      	beq.n	18348 <handle_nlip+0xe8>
   18330:	2001      	movs	r0, #1
    return handled;
   18332:	e7b3      	b.n	1829c <handle_nlip+0x3c>
            nlip_state = NLIP_DATA_START1;
   18334:	4b08      	ldr	r3, [pc, #32]	; (18358 <handle_nlip+0xf8>)
   18336:	2204      	movs	r2, #4
   18338:	601a      	str	r2, [r3, #0]
    handled = 1;
   1833a:	2001      	movs	r0, #1
   1833c:	e7ae      	b.n	1829c <handle_nlip+0x3c>
            nlip_state = NLIP_PKT_START1;
   1833e:	4b06      	ldr	r3, [pc, #24]	; (18358 <handle_nlip+0xf8>)
   18340:	2206      	movs	r2, #6
   18342:	601a      	str	r2, [r3, #0]
    handled = 1;
   18344:	2001      	movs	r0, #1
   18346:	e7a9      	b.n	1829c <handle_nlip+0x3c>
            handled = g_console_ignore_non_nlip && byte != '\r' && byte != '\n';
   18348:	2000      	movs	r0, #0
   1834a:	e7a7      	b.n	1829c <handle_nlip+0x3c>
   1834c:	2000      	movs	r0, #0
   1834e:	e7a5      	b.n	1829c <handle_nlip+0x3c>
   18350:	2000      	movs	r0, #0
   18352:	e7a3      	b.n	1829c <handle_nlip+0x3c>
   18354:	10003070 	.word	0x10003070
   18358:	10003080 	.word	0x10003080
   1835c:	1000306c 	.word	0x1000306c
   18360:	10003078 	.word	0x10003078

00018364 <console_lock>:
{
   18364:	b508      	push	{r3, lr}
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   18366:	4b0a      	ldr	r3, [pc, #40]	; (18390 <console_lock+0x2c>)
   18368:	685b      	ldr	r3, [r3, #4]
   1836a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   1836e:	b133      	cbz	r3, 1837e <console_lock+0x1a>
 *
 * @return number of times lock was called from current task
 */
static inline uint16_t os_mutex_get_level(struct os_mutex *mu)
{
    return mu->mu_level;
   18370:	4b08      	ldr	r3, [pc, #32]	; (18394 <console_lock+0x30>)
   18372:	88db      	ldrh	r3, [r3, #6]
        if (os_mutex_get_level(&console_write_lock)) {
   18374:	b90b      	cbnz	r3, 1837a <console_lock+0x16>
    int rc = OS_OK;
   18376:	2000      	movs	r0, #0
   18378:	e007      	b.n	1838a <console_lock+0x26>
            rc = OS_EBUSY;
   1837a:	200b      	movs	r0, #11
        goto end;
   1837c:	e005      	b.n	1838a <console_lock+0x26>
    rc = os_mutex_pend(&console_write_lock, timeout);
   1837e:	4601      	mov	r1, r0
   18380:	4804      	ldr	r0, [pc, #16]	; (18394 <console_lock+0x30>)
   18382:	f7fe fb0b 	bl	1699c <os_mutex_pend>
    if (rc == OS_NOT_STARTED) {
   18386:	2809      	cmp	r0, #9
   18388:	d000      	beq.n	1838c <console_lock+0x28>
}
   1838a:	bd08      	pop	{r3, pc}
        rc = OS_OK;
   1838c:	2000      	movs	r0, #0
    return rc;
   1838e:	e7fc      	b.n	1838a <console_lock+0x26>
   18390:	e000ed00 	.word	0xe000ed00
   18394:	10003060 	.word	0x10003060

00018398 <console_unlock>:
{
   18398:	b508      	push	{r3, lr}
   1839a:	4b0c      	ldr	r3, [pc, #48]	; (183cc <console_unlock+0x34>)
   1839c:	685b      	ldr	r3, [r3, #4]
   1839e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   183a2:	b10b      	cbz	r3, 183a8 <console_unlock+0x10>
    int rc = OS_OK;
   183a4:	2000      	movs	r0, #0
}
   183a6:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&console_write_lock);
   183a8:	4809      	ldr	r0, [pc, #36]	; (183d0 <console_unlock+0x38>)
   183aa:	f7fe fa97 	bl	168dc <os_mutex_release>
    assert(rc == OS_OK || rc == OS_NOT_STARTED);
   183ae:	2800      	cmp	r0, #0
   183b0:	d0f9      	beq.n	183a6 <console_unlock+0xe>
   183b2:	2809      	cmp	r0, #9
   183b4:	d0f7      	beq.n	183a6 <console_unlock+0xe>
   183b6:	f7fc f955 	bl	14664 <hal_debugger_connected>
   183ba:	b100      	cbz	r0, 183be <console_unlock+0x26>
   183bc:	be01      	bkpt	0x0001
   183be:	2300      	movs	r3, #0
   183c0:	461a      	mov	r2, r3
   183c2:	4619      	mov	r1, r3
   183c4:	4618      	mov	r0, r3
   183c6:	f7fc fced 	bl	14da4 <__assert_func>
   183ca:	bf00      	nop
   183cc:	e000ed00 	.word	0xe000ed00
   183d0:	10003060 	.word	0x10003060

000183d4 <console_write>:
{
   183d4:	b538      	push	{r3, r4, r5, lr}
   183d6:	4605      	mov	r5, r0
   183d8:	460c      	mov	r4, r1
    if (console_lock(timeout) != OS_OK) {
   183da:	2080      	movs	r0, #128	; 0x80
   183dc:	f7ff ffc2 	bl	18364 <console_lock>
   183e0:	b9e0      	cbnz	r0, 1841c <console_write+0x48>
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   183e2:	2c01      	cmp	r4, #1
   183e4:	dd02      	ble.n	183ec <console_write+0x18>
   183e6:	782b      	ldrb	r3, [r5, #0]
   183e8:	2b04      	cmp	r3, #4
   183ea:	d018      	beq.n	1841e <console_write+0x4a>
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   183ec:	2c02      	cmp	r4, #2
   183ee:	dd02      	ble.n	183f6 <console_write+0x22>
   183f0:	786b      	ldrb	r3, [r5, #1]
   183f2:	2b06      	cmp	r3, #6
   183f4:	d01a      	beq.n	1842c <console_write+0x58>
    if (!g_is_output_nlip && g_console_silence_non_nlip) {
   183f6:	4b13      	ldr	r3, [pc, #76]	; (18444 <console_write+0x70>)
   183f8:	781b      	ldrb	r3, [r3, #0]
   183fa:	b913      	cbnz	r3, 18402 <console_write+0x2e>
   183fc:	4b12      	ldr	r3, [pc, #72]	; (18448 <console_write+0x74>)
   183fe:	781b      	ldrb	r3, [r3, #0]
   18400:	b91b      	cbnz	r3, 1840a <console_write+0x36>
    console_filter_write(str, cnt);
   18402:	4621      	mov	r1, r4
   18404:	4628      	mov	r0, r5
   18406:	f7ff fccf 	bl	17da8 <console_filter_write>
    if (cnt > 0 && str[cnt - 1] == '\n') {
   1840a:	2c00      	cmp	r4, #0
   1840c:	dd04      	ble.n	18418 <console_write+0x44>
   1840e:	1928      	adds	r0, r5, r4
   18410:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   18414:	2b0a      	cmp	r3, #10
   18416:	d010      	beq.n	1843a <console_write+0x66>
    (void)console_unlock();
   18418:	f7ff ffbe 	bl	18398 <console_unlock>
}
   1841c:	bd38      	pop	{r3, r4, r5, pc}
        str[1] == CONSOLE_NLIP_DATA_START2) {
   1841e:	786b      	ldrb	r3, [r5, #1]
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   18420:	2b14      	cmp	r3, #20
   18422:	d1e3      	bne.n	183ec <console_write+0x18>
        g_is_output_nlip = 1;
   18424:	4b07      	ldr	r3, [pc, #28]	; (18444 <console_write+0x70>)
   18426:	2201      	movs	r2, #1
   18428:	701a      	strb	r2, [r3, #0]
   1842a:	e7df      	b.n	183ec <console_write+0x18>
        str[2] == CONSOLE_NLIP_PKT_START2) {
   1842c:	78ab      	ldrb	r3, [r5, #2]
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   1842e:	2b09      	cmp	r3, #9
   18430:	d1e1      	bne.n	183f6 <console_write+0x22>
        g_is_output_nlip = 1;
   18432:	4b04      	ldr	r3, [pc, #16]	; (18444 <console_write+0x70>)
   18434:	2201      	movs	r2, #1
   18436:	701a      	strb	r2, [r3, #0]
   18438:	e7dd      	b.n	183f6 <console_write+0x22>
        g_is_output_nlip = 0;
   1843a:	4b02      	ldr	r3, [pc, #8]	; (18444 <console_write+0x70>)
   1843c:	2200      	movs	r2, #0
   1843e:	701a      	strb	r2, [r3, #0]
   18440:	e7ea      	b.n	18418 <console_write+0x44>
   18442:	bf00      	nop
   18444:	1000307b 	.word	0x1000307b
   18448:	1000307a 	.word	0x1000307a

0001844c <console_blocking_mode>:
{
   1844c:	b508      	push	{r3, lr}
    uart_console_blocking_mode();
   1844e:	f000 fa03 	bl	18858 <uart_console_blocking_mode>
}
   18452:	bd08      	pop	{r3, pc}

00018454 <console_handle_char>:

int
console_handle_char(uint8_t byte)
{
   18454:	b570      	push	{r4, r5, r6, lr}
    return 0;
#endif
    struct console_input *input;
    static char prev_endl = '\0';

    if (!lines_queue) {
   18456:	4b57      	ldr	r3, [pc, #348]	; (185b4 <console_handle_char+0x160>)
   18458:	681b      	ldr	r3, [r3, #0]
   1845a:	2b00      	cmp	r3, #0
   1845c:	f000 80a5 	beq.w	185aa <console_handle_char+0x156>
   18460:	4604      	mov	r4, r0
        return 0;
    }

    if (!current_line_ev) {
   18462:	4b55      	ldr	r3, [pc, #340]	; (185b8 <console_handle_char+0x164>)
   18464:	681b      	ldr	r3, [r3, #0]
   18466:	b14b      	cbz	r3, 1847c <console_handle_char+0x28>
        if (!current_line_ev) {
            rx_stalled = true;
            return -1;
        }
    }
    input = current_line_ev->ev_arg;
   18468:	4b53      	ldr	r3, [pc, #332]	; (185b8 <console_handle_char+0x164>)
   1846a:	681b      	ldr	r3, [r3, #0]
   1846c:	689e      	ldr	r6, [r3, #8]

    if (handle_nlip(byte)) {
   1846e:	4620      	mov	r0, r4
   18470:	f7ff fef6 	bl	18260 <handle_nlip>
   18474:	b178      	cbz	r0, 18496 <console_handle_char+0x42>
        return 0;
   18476:	2500      	movs	r5, #0
    }
unlock:
    (void)console_unlock();

    return 0;
}
   18478:	4628      	mov	r0, r5
   1847a:	bd70      	pop	{r4, r5, r6, pc}
        current_line_ev = os_eventq_get_no_wait(&avail_queue);
   1847c:	484f      	ldr	r0, [pc, #316]	; (185bc <console_handle_char+0x168>)
   1847e:	f7fc fffc 	bl	1547a <os_eventq_get_no_wait>
   18482:	4b4d      	ldr	r3, [pc, #308]	; (185b8 <console_handle_char+0x164>)
   18484:	6018      	str	r0, [r3, #0]
        if (!current_line_ev) {
   18486:	2800      	cmp	r0, #0
   18488:	d1ee      	bne.n	18468 <console_handle_char+0x14>
            rx_stalled = true;
   1848a:	4b4d      	ldr	r3, [pc, #308]	; (185c0 <console_handle_char+0x16c>)
   1848c:	2201      	movs	r2, #1
   1848e:	701a      	strb	r2, [r3, #0]
            return -1;
   18490:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18494:	e7f0      	b.n	18478 <console_handle_char+0x24>
    if (console_lock(1000)) {
   18496:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1849a:	f7ff ff63 	bl	18364 <console_lock>
   1849e:	4605      	mov	r5, r0
   184a0:	2800      	cmp	r0, #0
   184a2:	f040 8084 	bne.w	185ae <console_handle_char+0x15a>
    if (esc_state & ESC_ANSI) {
   184a6:	4b47      	ldr	r3, [pc, #284]	; (185c4 <console_handle_char+0x170>)
   184a8:	681b      	ldr	r3, [r3, #0]
   184aa:	f013 0f02 	tst.w	r3, #2
   184ae:	d120      	bne.n	184f2 <console_handle_char+0x9e>
    if (esc_state & ESC_ESC) {
   184b0:	f013 0f01 	tst.w	r3, #1
   184b4:	d122      	bne.n	184fc <console_handle_char+0xa8>
   184b6:	f1a4 0320 	sub.w	r3, r4, #32
    if (!isprint(byte)) {
   184ba:	2b5e      	cmp	r3, #94	; 0x5e
   184bc:	d96c      	bls.n	18598 <console_handle_char+0x144>
        handle_ansi(byte, input->line);
   184be:	4631      	mov	r1, r6
   184c0:	4620      	mov	r0, r4
   184c2:	f7ff fd47 	bl	17f54 <handle_ansi>
        switch (byte) {
   184c6:	2c1b      	cmp	r4, #27
   184c8:	d828      	bhi.n	1851c <console_handle_char+0xc8>
   184ca:	2c03      	cmp	r4, #3
   184cc:	d332      	bcc.n	18534 <console_handle_char+0xe0>
   184ce:	1ee3      	subs	r3, r4, #3
   184d0:	2b18      	cmp	r3, #24
   184d2:	d82f      	bhi.n	18534 <console_handle_char+0xe0>
   184d4:	e8df f003 	tbb	[pc, r3]
   184d8:	2e2e2e59 	.word	0x2e2e2e59
   184dc:	344f242e 	.word	0x344f242e
   184e0:	2e345c2e 	.word	0x2e345c2e
   184e4:	2e2e2e2e 	.word	0x2e2e2e2e
   184e8:	2e2e2e2e 	.word	0x2e2e2e2e
   184ec:	2e2e2e2e 	.word	0x2e2e2e2e
   184f0:	28          	.byte	0x28
   184f1:	00          	.byte	0x00
        handle_ansi(byte, input->line);
   184f2:	4631      	mov	r1, r6
   184f4:	4620      	mov	r0, r4
   184f6:	f7ff fd2d 	bl	17f54 <handle_ansi>
        goto unlock;
   184fa:	e053      	b.n	185a4 <console_handle_char+0x150>
        esc_state &= ~ESC_ESC;
   184fc:	f023 0301 	bic.w	r3, r3, #1
   18500:	4a30      	ldr	r2, [pc, #192]	; (185c4 <console_handle_char+0x170>)
   18502:	6013      	str	r3, [r2, #0]
        handle_ansi(byte, input->line);
   18504:	4631      	mov	r1, r6
   18506:	4620      	mov	r0, r4
   18508:	f7ff fd24 	bl	17f54 <handle_ansi>
        switch (byte) {
   1850c:	2c5b      	cmp	r4, #91	; 0x5b
   1850e:	d149      	bne.n	185a4 <console_handle_char+0x150>
            esc_state |= ESC_ANSI;
   18510:	4a2c      	ldr	r2, [pc, #176]	; (185c4 <console_handle_char+0x170>)
   18512:	6813      	ldr	r3, [r2, #0]
            esc_state |= ESC_ANSI_FIRST;
   18514:	f043 0306 	orr.w	r3, r3, #6
   18518:	6013      	str	r3, [r2, #0]
        goto unlock;
   1851a:	e043      	b.n	185a4 <console_handle_char+0x150>
        switch (byte) {
   1851c:	2c7f      	cmp	r4, #127	; 0x7f
   1851e:	d109      	bne.n	18534 <console_handle_char+0xe0>
            handle_backspace(input->line);
   18520:	4630      	mov	r0, r6
   18522:	f7ff fddf 	bl	180e4 <handle_backspace>
            break;
   18526:	e03d      	b.n	185a4 <console_handle_char+0x150>
            esc_state |= ESC_ESC;
   18528:	4a26      	ldr	r2, [pc, #152]	; (185c4 <console_handle_char+0x170>)
   1852a:	6813      	ldr	r3, [r2, #0]
   1852c:	f043 0301 	orr.w	r3, r3, #1
   18530:	6013      	str	r3, [r2, #0]
            break;
   18532:	e037      	b.n	185a4 <console_handle_char+0x150>
            insert_char(&input->line[cur], byte);
   18534:	4b24      	ldr	r3, [pc, #144]	; (185c8 <console_handle_char+0x174>)
   18536:	8818      	ldrh	r0, [r3, #0]
   18538:	4621      	mov	r1, r4
   1853a:	4430      	add	r0, r6
   1853c:	f7ff fe2c 	bl	18198 <insert_char>
            if (byte == '\n' && prev_endl == '\r') {
   18540:	2c0a      	cmp	r4, #10
   18542:	d103      	bne.n	1854c <console_handle_char+0xf8>
   18544:	4b21      	ldr	r3, [pc, #132]	; (185cc <console_handle_char+0x178>)
   18546:	781b      	ldrb	r3, [r3, #0]
   18548:	2b0d      	cmp	r3, #13
   1854a:	d011      	beq.n	18570 <console_handle_char+0x11c>
            prev_endl = byte;
   1854c:	4b1f      	ldr	r3, [pc, #124]	; (185cc <console_handle_char+0x178>)
   1854e:	701c      	strb	r4, [r3, #0]
            input->line[cur + trailing_chars] = '\0';
   18550:	4b1d      	ldr	r3, [pc, #116]	; (185c8 <console_handle_char+0x174>)
   18552:	881b      	ldrh	r3, [r3, #0]
   18554:	4a1e      	ldr	r2, [pc, #120]	; (185d0 <console_handle_char+0x17c>)
   18556:	8812      	ldrh	r2, [r2, #0]
   18558:	4413      	add	r3, r2
   1855a:	2200      	movs	r2, #0
   1855c:	54f2      	strb	r2, [r6, r3]
                console_filter_out('\r');
   1855e:	200d      	movs	r0, #13
   18560:	f7ff fc04 	bl	17d6c <console_filter_out>
                console_filter_out('\n');
   18564:	200a      	movs	r0, #10
   18566:	f7ff fc01 	bl	17d6c <console_filter_out>
            console_handle_line();
   1856a:	f7ff fbe1 	bl	17d30 <console_handle_line>
            break;
   1856e:	e019      	b.n	185a4 <console_handle_char+0x150>
                prev_endl = byte;
   18570:	4b16      	ldr	r3, [pc, #88]	; (185cc <console_handle_char+0x178>)
   18572:	701c      	strb	r4, [r3, #0]
                break;
   18574:	e016      	b.n	185a4 <console_handle_char+0x150>
            if (completion && (!trailing_chars ||
   18576:	4b17      	ldr	r3, [pc, #92]	; (185d4 <console_handle_char+0x180>)
   18578:	681b      	ldr	r3, [r3, #0]
   1857a:	b19b      	cbz	r3, 185a4 <console_handle_char+0x150>
   1857c:	4a14      	ldr	r2, [pc, #80]	; (185d0 <console_handle_char+0x17c>)
   1857e:	8812      	ldrh	r2, [r2, #0]
   18580:	b982      	cbnz	r2, 185a4 <console_handle_char+0x150>
                completion(input->line, console_append_char);
   18582:	4915      	ldr	r1, [pc, #84]	; (185d8 <console_handle_char+0x184>)
   18584:	4630      	mov	r0, r6
   18586:	4798      	blx	r3
                console_switch_to_prompt();
   18588:	e00c      	b.n	185a4 <console_handle_char+0x150>
            console_clear_line();
   1858a:	f7ff fdd7 	bl	1813c <console_clear_line>
            break;
   1858e:	e009      	b.n	185a4 <console_handle_char+0x150>
                console_out_nolock(VT);
   18590:	200c      	movs	r0, #12
   18592:	f000 f977 	bl	18884 <console_out_nolock>
            break;
   18596:	e005      	b.n	185a4 <console_handle_char+0x150>
        insert_char(&input->line[cur], byte);
   18598:	4b0b      	ldr	r3, [pc, #44]	; (185c8 <console_handle_char+0x174>)
   1859a:	8818      	ldrh	r0, [r3, #0]
   1859c:	4621      	mov	r1, r4
   1859e:	4430      	add	r0, r6
   185a0:	f7ff fdfa 	bl	18198 <insert_char>
    (void)console_unlock();
   185a4:	f7ff fef8 	bl	18398 <console_unlock>
    return 0;
   185a8:	e766      	b.n	18478 <console_handle_char+0x24>
        return 0;
   185aa:	2500      	movs	r5, #0
   185ac:	e764      	b.n	18478 <console_handle_char+0x24>
        return -1;
   185ae:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   185b2:	e761      	b.n	18478 <console_handle_char+0x24>
   185b4:	1000307c 	.word	0x1000307c
   185b8:	10003070 	.word	0x10003070
   185bc:	10003044 	.word	0x10003044
   185c0:	10003085 	.word	0x10003085
   185c4:	10003074 	.word	0x10003074
   185c8:	1000306c 	.word	0x1000306c
   185cc:	10003084 	.word	0x10003084
   185d0:	10003086 	.word	0x10003086
   185d4:	10003054 	.word	0x10003054
   185d8:	00017dc9 	.word	0x00017dc9

000185dc <console_is_init>:

int
console_is_init(void)
{
   185dc:	b508      	push	{r3, lr}
#if MYNEWT_VAL(CONSOLE_UART)
    return uart_console_is_init();
   185de:	f000 f96d 	bl	188bc <uart_console_is_init>
#endif
#if MYNEWT_VAL(CONSOLE_TCP)
    return tcp_console_is_init();
#endif
    return 0;
}
   185e2:	bd08      	pop	{r3, pc}

000185e4 <console_pkg_init>:
}
#endif

void
console_pkg_init(void)
{
   185e4:	b510      	push	{r4, lr}
   185e6:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   185e8:	4b12      	ldr	r3, [pc, #72]	; (18634 <console_pkg_init+0x50>)
   185ea:	781b      	ldrb	r3, [r3, #0]
   185ec:	b153      	cbz	r3, 18604 <console_pkg_init+0x20>

    os_eventq_init(&avail_queue);
   185ee:	4812      	ldr	r0, [pc, #72]	; (18638 <console_pkg_init+0x54>)
   185f0:	f7fc fefe 	bl	153f0 <os_eventq_init>
    os_mutex_init(&console_write_lock);
   185f4:	4811      	ldr	r0, [pc, #68]	; (1863c <console_pkg_init+0x58>)
   185f6:	f7fe f967 	bl	168c8 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_UART)
    rc = uart_console_init();
   185fa:	f000 f967 	bl	188cc <uart_console_init>
#endif
#if MYNEWT_VAL(CONSOLE_RTT)
    rc = rtt_console_init();
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   185fe:	b958      	cbnz	r0, 18618 <console_pkg_init+0x34>
}
   18600:	b002      	add	sp, #8
   18602:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   18604:	f7fc f82e 	bl	14664 <hal_debugger_connected>
   18608:	b100      	cbz	r0, 1860c <console_pkg_init+0x28>
   1860a:	be01      	bkpt	0x0001
   1860c:	2300      	movs	r3, #0
   1860e:	461a      	mov	r2, r3
   18610:	4619      	mov	r1, r3
   18612:	4618      	mov	r0, r3
   18614:	f7fc fbc6 	bl	14da4 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   18618:	f7fc f824 	bl	14664 <hal_debugger_connected>
   1861c:	b100      	cbz	r0, 18620 <console_pkg_init+0x3c>
   1861e:	be01      	bkpt	0x0001
   18620:	2000      	movs	r0, #0
   18622:	9000      	str	r0, [sp, #0]
   18624:	4b06      	ldr	r3, [pc, #24]	; (18640 <console_pkg_init+0x5c>)
   18626:	681c      	ldr	r4, [r3, #0]
   18628:	4603      	mov	r3, r0
   1862a:	4602      	mov	r2, r0
   1862c:	4601      	mov	r1, r0
   1862e:	47a0      	blx	r4
}
   18630:	e7e6      	b.n	18600 <console_pkg_init+0x1c>
   18632:	bf00      	nop
   18634:	10003404 	.word	0x10003404
   18638:	10003044 	.word	0x10003044
   1863c:	10003060 	.word	0x10003060
   18640:	1000028c 	.word	0x1000028c

00018644 <console_vprintf>:

#if MYNEWT_VAL(BASELIBC_PRESENT)

int
console_vprintf(const char *fmt, va_list ap)
{
   18644:	b570      	push	{r4, r5, r6, lr}
   18646:	4604      	mov	r4, r0
   18648:	460d      	mov	r5, r1
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   1864a:	f000 f827 	bl	1869c <console_get_ticks>
   1864e:	b160      	cbz	r0, 1866a <console_vprintf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   18650:	4b09      	ldr	r3, [pc, #36]	; (18678 <console_vprintf+0x34>)
   18652:	681b      	ldr	r3, [r3, #0]
   18654:	b10b      	cbz	r3, 1865a <console_vprintf+0x16>
    num_chars = 0;
   18656:	2600      	movs	r6, #0
   18658:	e008      	b.n	1866c <console_vprintf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   1865a:	f7fd ffa1 	bl	165a0 <os_time_get>
   1865e:	4601      	mov	r1, r0
   18660:	4806      	ldr	r0, [pc, #24]	; (1867c <console_vprintf+0x38>)
   18662:	f015 fc9b 	bl	2df9c <printf>
   18666:	4606      	mov	r6, r0
   18668:	e000      	b.n	1866c <console_vprintf+0x28>
    num_chars = 0;
   1866a:	2600      	movs	r6, #0
        }
    }

    num_chars += vprintf(fmt, ap);
   1866c:	4629      	mov	r1, r5
   1866e:	4620      	mov	r0, r4
   18670:	f015 fcd2 	bl	2e018 <vprintf>

    return num_chars;
}
   18674:	4430      	add	r0, r6
   18676:	bd70      	pop	{r4, r5, r6, pc}
   18678:	1000305c 	.word	0x1000305c
   1867c:	0003076c 	.word	0x0003076c

00018680 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   18680:	b40f      	push	{r0, r1, r2, r3}
   18682:	b500      	push	{lr}
   18684:	b083      	sub	sp, #12
   18686:	a904      	add	r1, sp, #16
   18688:	f851 0b04 	ldr.w	r0, [r1], #4
    va_list args;
    int num_chars;

    va_start(args, fmt);
   1868c:	9101      	str	r1, [sp, #4]
    num_chars = console_vprintf(fmt, args);
   1868e:	f7ff ffd9 	bl	18644 <console_vprintf>
    va_end(args);

    return num_chars;
}
   18692:	b003      	add	sp, #12
   18694:	f85d eb04 	ldr.w	lr, [sp], #4
   18698:	b004      	add	sp, #16
   1869a:	4770      	bx	lr

0001869c <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   1869c:	4b01      	ldr	r3, [pc, #4]	; (186a4 <console_get_ticks+0x8>)
   1869e:	7818      	ldrb	r0, [r3, #0]
   186a0:	4770      	bx	lr
   186a2:	bf00      	nop
   186a4:	1000022c 	.word	0x1000022c

000186a8 <uart_blocking_tx>:
 *
 * @param dev		Uart device in question
 */
static inline void
uart_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   186a8:	b508      	push	{r3, lr}
    dev->ud_funcs.uf_blocking_tx(dev, byte);
   186aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   186ac:	4798      	blx	r3
}
   186ae:	bd08      	pop	{r3, pc}

000186b0 <uart_console_ring_add_char>:
}

static void
uart_console_ring_add_char(struct console_ring *cr, char ch)
{
    cr->buf[cr->head] = ch;
   186b0:	6842      	ldr	r2, [r0, #4]
   186b2:	7803      	ldrb	r3, [r0, #0]
   186b4:	54d1      	strb	r1, [r2, r3]
    cr->head = inc_and_wrap(cr->head, cr->size);
   186b6:	7803      	ldrb	r3, [r0, #0]
   186b8:	8842      	ldrh	r2, [r0, #2]
    return (i + 1) & (max - 1);
   186ba:	3301      	adds	r3, #1
   186bc:	3a01      	subs	r2, #1
   186be:	4013      	ands	r3, r2
    cr->head = inc_and_wrap(cr->head, cr->size);
   186c0:	7003      	strb	r3, [r0, #0]
}
   186c2:	4770      	bx	lr

000186c4 <uart_console_ring_pull_char>:

static uint8_t
uart_console_ring_pull_char(struct console_ring *cr)
{
   186c4:	4603      	mov	r3, r0
    uint8_t ch;

    ch = cr->buf[cr->tail];
   186c6:	6841      	ldr	r1, [r0, #4]
   186c8:	7842      	ldrb	r2, [r0, #1]
   186ca:	5c88      	ldrb	r0, [r1, r2]
    cr->tail = inc_and_wrap(cr->tail, cr->size);
   186cc:	8859      	ldrh	r1, [r3, #2]
    return (i + 1) & (max - 1);
   186ce:	3201      	adds	r2, #1
   186d0:	3901      	subs	r1, #1
   186d2:	400a      	ands	r2, r1
    cr->tail = inc_and_wrap(cr->tail, cr->size);
   186d4:	705a      	strb	r2, [r3, #1]
    return ch;
}
   186d6:	4770      	bx	lr

000186d8 <uart_console_ring_is_full>:

static bool
uart_console_ring_is_full(const struct console_ring *cr)
{
    return inc_and_wrap(cr->head, cr->size) == cr->tail;
   186d8:	7803      	ldrb	r3, [r0, #0]
   186da:	8842      	ldrh	r2, [r0, #2]
    return (i + 1) & (max - 1);
   186dc:	3301      	adds	r3, #1
   186de:	3a01      	subs	r2, #1
   186e0:	4013      	ands	r3, r2
    return inc_and_wrap(cr->head, cr->size) == cr->tail;
   186e2:	7840      	ldrb	r0, [r0, #1]
}
   186e4:	4298      	cmp	r0, r3
   186e6:	bf14      	ite	ne
   186e8:	2000      	movne	r0, #0
   186ea:	2001      	moveq	r0, #1
   186ec:	4770      	bx	lr

000186ee <uart_console_ring_is_empty>:

static bool
uart_console_ring_is_empty(const struct console_ring *cr)
{
    return cr->head == cr->tail;
   186ee:	7802      	ldrb	r2, [r0, #0]
   186f0:	7840      	ldrb	r0, [r0, #1]
}
   186f2:	4282      	cmp	r2, r0
   186f4:	bf14      	ite	ne
   186f6:	2000      	movne	r0, #0
   186f8:	2001      	moveq	r0, #1
   186fa:	4770      	bx	lr

000186fc <uart_console_tx_flush>:
/*
 * Flush cnt characters from console output queue.
 */
static void
uart_console_tx_flush(int cnt)
{
   186fc:	b538      	push	{r3, r4, r5, lr}
   186fe:	4605      	mov	r5, r0
    int i;
    uint8_t byte;

    for (i = 0; i < cnt; i++) {
   18700:	2400      	movs	r4, #0
   18702:	42ac      	cmp	r4, r5
   18704:	da0d      	bge.n	18722 <uart_console_tx_flush+0x26>
        if (uart_console_ring_is_empty(&cr_tx)) {
   18706:	4807      	ldr	r0, [pc, #28]	; (18724 <uart_console_tx_flush+0x28>)
   18708:	f7ff fff1 	bl	186ee <uart_console_ring_is_empty>
   1870c:	b948      	cbnz	r0, 18722 <uart_console_tx_flush+0x26>
            break;
        }
        byte = uart_console_ring_pull_char(&cr_tx);
   1870e:	4805      	ldr	r0, [pc, #20]	; (18724 <uart_console_tx_flush+0x28>)
   18710:	f7ff ffd8 	bl	186c4 <uart_console_ring_pull_char>
   18714:	4601      	mov	r1, r0
        uart_blocking_tx(uart_dev, byte);
   18716:	4b04      	ldr	r3, [pc, #16]	; (18728 <uart_console_tx_flush+0x2c>)
   18718:	6818      	ldr	r0, [r3, #0]
    dev->ud_funcs.uf_blocking_tx(dev, byte);
   1871a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   1871c:	4790      	blx	r2
    for (i = 0; i < cnt; i++) {
   1871e:	3401      	adds	r4, #1
   18720:	e7ef      	b.n	18702 <uart_console_tx_flush+0x6>
    }
}
   18722:	bd38      	pop	{r3, r4, r5, pc}
   18724:	100030b0 	.word	0x100030b0
   18728:	100030ec 	.word	0x100030ec

0001872c <uart_console_tx_char>:
 * Interrupts disabled when console_tx_char/console_rx_char are called.
 * Characters sent only in blocking mode.
 */
static int
uart_console_tx_char(void *arg)
{
   1872c:	b508      	push	{r3, lr}
    if (uart_console_ring_is_empty(&cr_tx)) {
   1872e:	4805      	ldr	r0, [pc, #20]	; (18744 <uart_console_tx_char+0x18>)
   18730:	f7ff ffdd 	bl	186ee <uart_console_ring_is_empty>
   18734:	b918      	cbnz	r0, 1873e <uart_console_tx_char+0x12>
        return -1;
    }
    return uart_console_ring_pull_char(&cr_tx);
   18736:	4803      	ldr	r0, [pc, #12]	; (18744 <uart_console_tx_char+0x18>)
   18738:	f7ff ffc4 	bl	186c4 <uart_console_ring_pull_char>
}
   1873c:	bd08      	pop	{r3, pc}
        return -1;
   1873e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18742:	e7fb      	b.n	1873c <uart_console_tx_char+0x10>
   18744:	100030b0 	.word	0x100030b0

00018748 <uart_console_queue_char>:
    if (((uart_dev->ud_dev.od_flags & OS_DEV_F_STATUS_OPEN) == 0) ||
   18748:	7ec3      	ldrb	r3, [r0, #27]
   1874a:	f003 0306 	and.w	r3, r3, #6
   1874e:	2b02      	cmp	r3, #2
   18750:	d000      	beq.n	18754 <uart_console_queue_char+0xc>
   18752:	4770      	bx	lr
{
   18754:	b570      	push	{r4, r5, r6, lr}
   18756:	4605      	mov	r5, r0
   18758:	460e      	mov	r6, r1
    OS_ENTER_CRITICAL(sr);
   1875a:	f7fd ffe7 	bl	1672c <os_arch_save_sr>
   1875e:	4604      	mov	r4, r0
    while (uart_console_ring_is_full(&cr_tx)) {
   18760:	e005      	b.n	1876e <uart_console_queue_char+0x26>
            os_time_delay(1);
   18762:	2001      	movs	r0, #1
   18764:	f7fd ff48 	bl	165f8 <os_time_delay>
        OS_ENTER_CRITICAL(sr);
   18768:	f7fd ffe0 	bl	1672c <os_arch_save_sr>
   1876c:	4604      	mov	r4, r0
    while (uart_console_ring_is_full(&cr_tx)) {
   1876e:	480b      	ldr	r0, [pc, #44]	; (1879c <uart_console_queue_char+0x54>)
   18770:	f7ff ffb2 	bl	186d8 <uart_console_ring_is_full>
   18774:	b150      	cbz	r0, 1878c <uart_console_queue_char+0x44>
    dev->ud_funcs.uf_start_tx(dev);
   18776:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   18778:	4628      	mov	r0, r5
   1877a:	4798      	blx	r3
        OS_EXIT_CRITICAL(sr);
   1877c:	4620      	mov	r0, r4
   1877e:	f7fd ffdb 	bl	16738 <os_arch_restore_sr>
        if (os_started()) {
   18782:	f7fc fbcf 	bl	14f24 <os_started>
   18786:	2800      	cmp	r0, #0
   18788:	d0ee      	beq.n	18768 <uart_console_queue_char+0x20>
   1878a:	e7ea      	b.n	18762 <uart_console_queue_char+0x1a>
    uart_console_ring_add_char(&cr_tx, ch);
   1878c:	4631      	mov	r1, r6
   1878e:	4803      	ldr	r0, [pc, #12]	; (1879c <uart_console_queue_char+0x54>)
   18790:	f7ff ff8e 	bl	186b0 <uart_console_ring_add_char>
    OS_EXIT_CRITICAL(sr);
   18794:	4620      	mov	r0, r4
   18796:	f7fd ffcf 	bl	16738 <os_arch_restore_sr>
}
   1879a:	bd70      	pop	{r4, r5, r6, pc}
   1879c:	100030b0 	.word	0x100030b0

000187a0 <uart_console_rx_char>:
/*
 * Interrupts disabled when console_tx_char/console_rx_char are called.
 */
static int
uart_console_rx_char(void *arg, uint8_t byte)
{
   187a0:	b510      	push	{r4, lr}
   187a2:	460c      	mov	r4, r1
#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
    if (uart_console_ring_is_full(&cr_rx)) {
   187a4:	480c      	ldr	r0, [pc, #48]	; (187d8 <uart_console_rx_char+0x38>)
   187a6:	f7ff ff97 	bl	186d8 <uart_console_ring_is_full>
   187aa:	b940      	cbnz	r0, 187be <uart_console_rx_char+0x1e>
        uart_console_rx_stalled = true;
        return -1;
    }

    uart_console_ring_add_char(&cr_rx, byte);
   187ac:	4621      	mov	r1, r4
   187ae:	480a      	ldr	r0, [pc, #40]	; (187d8 <uart_console_rx_char+0x38>)
   187b0:	f7ff ff7e 	bl	186b0 <uart_console_ring_add_char>

    if (!rx_ev.ev_queued) {
   187b4:	4b09      	ldr	r3, [pc, #36]	; (187dc <uart_console_rx_char+0x3c>)
   187b6:	781b      	ldrb	r3, [r3, #0]
   187b8:	b13b      	cbz	r3, 187ca <uart_console_rx_char+0x2a>
        os_eventq_put(os_eventq_dflt_get(), &rx_ev);
    }

    return 0;
   187ba:	2000      	movs	r0, #0
#else
    return console_handle_char(byte);
#endif
}
   187bc:	bd10      	pop	{r4, pc}
        uart_console_rx_stalled = true;
   187be:	4b08      	ldr	r3, [pc, #32]	; (187e0 <uart_console_rx_char+0x40>)
   187c0:	2201      	movs	r2, #1
   187c2:	701a      	strb	r2, [r3, #0]
        return -1;
   187c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   187c8:	e7f8      	b.n	187bc <uart_console_rx_char+0x1c>
        os_eventq_put(os_eventq_dflt_get(), &rx_ev);
   187ca:	f7fc fed7 	bl	1557c <os_eventq_dflt_get>
   187ce:	4903      	ldr	r1, [pc, #12]	; (187dc <uart_console_rx_char+0x3c>)
   187d0:	f7fc fe1b 	bl	1540a <os_eventq_put>
    return 0;
   187d4:	2000      	movs	r0, #0
   187d6:	e7f1      	b.n	187bc <uart_console_rx_char+0x1c>
   187d8:	10003088 	.word	0x10003088
   187dc:	100030d8 	.word	0x100030d8
   187e0:	100030e8 	.word	0x100030e8

000187e4 <uart_console_rx_char_event>:

#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
static void
uart_console_rx_char_event(struct os_event *ev)
{
   187e4:	b510      	push	{r4, lr}
    static int b = -1;
    int sr;
    int ret;

    /* We may have unhandled character - try it first */
    if (b >= 0) {
   187e6:	4b18      	ldr	r3, [pc, #96]	; (18848 <uart_console_rx_char_event+0x64>)
   187e8:	6818      	ldr	r0, [r3, #0]
   187ea:	2800      	cmp	r0, #0
   187ec:	db0b      	blt.n	18806 <uart_console_rx_char_event+0x22>
        ret = console_handle_char(b);
   187ee:	b2c0      	uxtb	r0, r0
   187f0:	f7ff fe30 	bl	18454 <console_handle_char>
        if (ret < 0) {
   187f4:	2800      	cmp	r0, #0
   187f6:	da06      	bge.n	18806 <uart_console_rx_char_event+0x22>
   187f8:	e024      	b.n	18844 <uart_console_rx_char_event+0x60>
        if (uart_console_rx_stalled) {
            uart_console_rx_stalled = false;
            uart_start_rx(uart_dev);
        }

        ret = console_handle_char(b);
   187fa:	4b13      	ldr	r3, [pc, #76]	; (18848 <uart_console_rx_char_event+0x64>)
   187fc:	7818      	ldrb	r0, [r3, #0]
   187fe:	f7ff fe29 	bl	18454 <console_handle_char>
        if (ret < 0) {
   18802:	2800      	cmp	r0, #0
   18804:	db1e      	blt.n	18844 <uart_console_rx_char_event+0x60>
    while (!uart_console_ring_is_empty(&cr_rx)) {
   18806:	4811      	ldr	r0, [pc, #68]	; (1884c <uart_console_rx_char_event+0x68>)
   18808:	f7ff ff71 	bl	186ee <uart_console_ring_is_empty>
   1880c:	b9b0      	cbnz	r0, 1883c <uart_console_rx_char_event+0x58>
        OS_ENTER_CRITICAL(sr);
   1880e:	f7fd ff8d 	bl	1672c <os_arch_save_sr>
   18812:	4604      	mov	r4, r0
        b = uart_console_ring_pull_char(&cr_rx);
   18814:	480d      	ldr	r0, [pc, #52]	; (1884c <uart_console_rx_char_event+0x68>)
   18816:	f7ff ff55 	bl	186c4 <uart_console_ring_pull_char>
   1881a:	4b0b      	ldr	r3, [pc, #44]	; (18848 <uart_console_rx_char_event+0x64>)
   1881c:	6018      	str	r0, [r3, #0]
        OS_EXIT_CRITICAL(sr);
   1881e:	4620      	mov	r0, r4
   18820:	f7fd ff8a 	bl	16738 <os_arch_restore_sr>
        if (uart_console_rx_stalled) {
   18824:	4b0a      	ldr	r3, [pc, #40]	; (18850 <uart_console_rx_char_event+0x6c>)
   18826:	781b      	ldrb	r3, [r3, #0]
   18828:	2b00      	cmp	r3, #0
   1882a:	d0e6      	beq.n	187fa <uart_console_rx_char_event+0x16>
            uart_console_rx_stalled = false;
   1882c:	4b08      	ldr	r3, [pc, #32]	; (18850 <uart_console_rx_char_event+0x6c>)
   1882e:	2200      	movs	r2, #0
   18830:	701a      	strb	r2, [r3, #0]
            uart_start_rx(uart_dev);
   18832:	4b08      	ldr	r3, [pc, #32]	; (18854 <uart_console_rx_char_event+0x70>)
   18834:	6818      	ldr	r0, [r3, #0]
    dev->ud_funcs.uf_start_rx(dev);
   18836:	6a83      	ldr	r3, [r0, #40]	; 0x28
   18838:	4798      	blx	r3
}
   1883a:	e7de      	b.n	187fa <uart_console_rx_char_event+0x16>
            return;
        }
    }

    b = -1;
   1883c:	4b02      	ldr	r3, [pc, #8]	; (18848 <uart_console_rx_char_event+0x64>)
   1883e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18842:	601a      	str	r2, [r3, #0]
}
   18844:	bd10      	pop	{r4, pc}
   18846:	bf00      	nop
   18848:	10000230 	.word	0x10000230
   1884c:	10003088 	.word	0x10003088
   18850:	100030e8 	.word	0x100030e8
   18854:	100030ec 	.word	0x100030ec

00018858 <uart_console_blocking_mode>:
{
   18858:	b510      	push	{r4, lr}
    OS_ENTER_CRITICAL(sr);
   1885a:	f7fd ff67 	bl	1672c <os_arch_save_sr>
   1885e:	4604      	mov	r4, r0
    if (write_char_cb) {
   18860:	4b06      	ldr	r3, [pc, #24]	; (1887c <uart_console_blocking_mode+0x24>)
   18862:	681b      	ldr	r3, [r3, #0]
   18864:	b12b      	cbz	r3, 18872 <uart_console_blocking_mode+0x1a>
        write_char_cb = uart_blocking_tx;
   18866:	4b05      	ldr	r3, [pc, #20]	; (1887c <uart_console_blocking_mode+0x24>)
   18868:	4a05      	ldr	r2, [pc, #20]	; (18880 <uart_console_blocking_mode+0x28>)
   1886a:	601a      	str	r2, [r3, #0]
        uart_console_tx_flush(MYNEWT_VAL(CONSOLE_UART_TX_BUF_SIZE));
   1886c:	2020      	movs	r0, #32
   1886e:	f7ff ff45 	bl	186fc <uart_console_tx_flush>
    OS_EXIT_CRITICAL(sr);
   18872:	4620      	mov	r0, r4
   18874:	f7fd ff60 	bl	16738 <os_arch_restore_sr>
}
   18878:	bd10      	pop	{r4, pc}
   1887a:	bf00      	nop
   1887c:	100030f0 	.word	0x100030f0
   18880:	000186a9 	.word	0x000186a9

00018884 <console_out_nolock>:
{
   18884:	b538      	push	{r3, r4, r5, lr}
   18886:	4604      	mov	r4, r0
    if (!write_char_cb) {
   18888:	4b0a      	ldr	r3, [pc, #40]	; (188b4 <console_out_nolock+0x30>)
   1888a:	681b      	ldr	r3, [r3, #0]
   1888c:	b153      	cbz	r3, 188a4 <console_out_nolock+0x20>
    if ('\n' == c) {
   1888e:	280a      	cmp	r0, #10
   18890:	d00a      	beq.n	188a8 <console_out_nolock+0x24>
    write_char_cb(uart_dev, c);
   18892:	4d09      	ldr	r5, [pc, #36]	; (188b8 <console_out_nolock+0x34>)
   18894:	4b07      	ldr	r3, [pc, #28]	; (188b4 <console_out_nolock+0x30>)
   18896:	681b      	ldr	r3, [r3, #0]
   18898:	b2e1      	uxtb	r1, r4
   1889a:	6828      	ldr	r0, [r5, #0]
   1889c:	4798      	blx	r3
    uart_start_tx(uart_dev);
   1889e:	6828      	ldr	r0, [r5, #0]
    dev->ud_funcs.uf_start_tx(dev);
   188a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   188a2:	4798      	blx	r3
}
   188a4:	4620      	mov	r0, r4
   188a6:	bd38      	pop	{r3, r4, r5, pc}
        write_char_cb(uart_dev, '\r');
   188a8:	210d      	movs	r1, #13
   188aa:	4a03      	ldr	r2, [pc, #12]	; (188b8 <console_out_nolock+0x34>)
   188ac:	6810      	ldr	r0, [r2, #0]
   188ae:	4798      	blx	r3
   188b0:	e7ef      	b.n	18892 <console_out_nolock+0xe>
   188b2:	bf00      	nop
   188b4:	100030f0 	.word	0x100030f0
   188b8:	100030ec 	.word	0x100030ec

000188bc <uart_console_is_init>:
#endif

int
uart_console_is_init(void)
{
    return uart_dev != NULL;
   188bc:	4b02      	ldr	r3, [pc, #8]	; (188c8 <uart_console_is_init+0xc>)
   188be:	6818      	ldr	r0, [r3, #0]
}
   188c0:	3800      	subs	r0, #0
   188c2:	bf18      	it	ne
   188c4:	2001      	movne	r0, #1
   188c6:	4770      	bx	lr
   188c8:	100030ec 	.word	0x100030ec

000188cc <uart_console_init>:
    return 0;
}

int
uart_console_init(void)
{
   188cc:	b500      	push	{lr}
   188ce:	b087      	sub	sp, #28
    struct uart_conf uc = {
   188d0:	2300      	movs	r3, #0
   188d2:	9301      	str	r3, [sp, #4]
   188d4:	9304      	str	r3, [sp, #16]
   188d6:	9305      	str	r3, [sp, #20]
   188d8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   188dc:	9300      	str	r3, [sp, #0]
   188de:	2308      	movs	r3, #8
   188e0:	f88d 3004 	strb.w	r3, [sp, #4]
   188e4:	2301      	movs	r3, #1
   188e6:	f88d 3005 	strb.w	r3, [sp, #5]
   188ea:	4b14      	ldr	r3, [pc, #80]	; (1893c <uart_console_init+0x70>)
   188ec:	9302      	str	r3, [sp, #8]
   188ee:	4b14      	ldr	r3, [pc, #80]	; (18940 <uart_console_init+0x74>)
   188f0:	9303      	str	r3, [sp, #12]
        .uc_flow_ctl = MYNEWT_VAL(CONSOLE_UART_FLOW_CONTROL),
        .uc_tx_char = uart_console_tx_char,
        .uc_rx_char = uart_console_rx_char,
    };

    cr_tx.size = MYNEWT_VAL(CONSOLE_UART_TX_BUF_SIZE);
   188f2:	4b14      	ldr	r3, [pc, #80]	; (18944 <uart_console_init+0x78>)
   188f4:	2220      	movs	r2, #32
   188f6:	805a      	strh	r2, [r3, #2]
    cr_tx.buf = cr_tx_buf;
   188f8:	4913      	ldr	r1, [pc, #76]	; (18948 <uart_console_init+0x7c>)
   188fa:	6059      	str	r1, [r3, #4]
    write_char_cb = uart_console_queue_char;
   188fc:	4b13      	ldr	r3, [pc, #76]	; (1894c <uart_console_init+0x80>)
   188fe:	4914      	ldr	r1, [pc, #80]	; (18950 <uart_console_init+0x84>)
   18900:	6019      	str	r1, [r3, #0]

#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
    cr_rx.size = MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE);
   18902:	4b14      	ldr	r3, [pc, #80]	; (18954 <uart_console_init+0x88>)
   18904:	805a      	strh	r2, [r3, #2]
    cr_rx.buf = cr_rx_buf;
   18906:	4a14      	ldr	r2, [pc, #80]	; (18958 <uart_console_init+0x8c>)
   18908:	605a      	str	r2, [r3, #4]

    rx_ev.ev_cb = uart_console_rx_char_event;
   1890a:	4b14      	ldr	r3, [pc, #80]	; (1895c <uart_console_init+0x90>)
   1890c:	4a14      	ldr	r2, [pc, #80]	; (18960 <uart_console_init+0x94>)
   1890e:	605a      	str	r2, [r3, #4]
#endif

    if (!uart_dev) {
   18910:	4b14      	ldr	r3, [pc, #80]	; (18964 <uart_console_init+0x98>)
   18912:	681b      	ldr	r3, [r3, #0]
   18914:	b11b      	cbz	r3, 1891e <uart_console_init+0x52>
          OS_TIMEOUT_NEVER, &uc);
        if (!uart_dev) {
            return -1;
        }
    }
    return 0;
   18916:	2000      	movs	r0, #0
}
   18918:	b007      	add	sp, #28
   1891a:	f85d fb04 	ldr.w	pc, [sp], #4
        uart_dev = (struct uart_dev *)os_dev_open(MYNEWT_VAL(CONSOLE_UART_DEV),
   1891e:	466a      	mov	r2, sp
   18920:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18924:	4810      	ldr	r0, [pc, #64]	; (18968 <uart_console_init+0x9c>)
   18926:	f7fc fd39 	bl	1539c <os_dev_open>
   1892a:	4b0e      	ldr	r3, [pc, #56]	; (18964 <uart_console_init+0x98>)
   1892c:	6018      	str	r0, [r3, #0]
        if (!uart_dev) {
   1892e:	b108      	cbz	r0, 18934 <uart_console_init+0x68>
    return 0;
   18930:	2000      	movs	r0, #0
   18932:	e7f1      	b.n	18918 <uart_console_init+0x4c>
            return -1;
   18934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18938:	e7ee      	b.n	18918 <uart_console_init+0x4c>
   1893a:	bf00      	nop
   1893c:	0001872d 	.word	0x0001872d
   18940:	000187a1 	.word	0x000187a1
   18944:	100030b0 	.word	0x100030b0
   18948:	100030b8 	.word	0x100030b8
   1894c:	100030f0 	.word	0x100030f0
   18950:	00018749 	.word	0x00018749
   18954:	10003088 	.word	0x10003088
   18958:	10003090 	.word	0x10003090
   1895c:	100030d8 	.word	0x100030d8
   18960:	000187e5 	.word	0x000187e5
   18964:	100030ec 	.word	0x100030ec
   18968:	00030774 	.word	0x00030774

0001896c <flash_area_find_idx>:
const struct flash_area *flash_map;
int flash_map_entries;

static int
flash_area_find_idx(uint8_t id)
{
   1896c:	4602      	mov	r2, r0
    int i;

    if (flash_map == NULL) {
   1896e:	4b0b      	ldr	r3, [pc, #44]	; (1899c <flash_area_find_idx+0x30>)
   18970:	6819      	ldr	r1, [r3, #0]
   18972:	b179      	cbz	r1, 18994 <flash_area_find_idx+0x28>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
   18974:	2000      	movs	r0, #0
   18976:	4b0a      	ldr	r3, [pc, #40]	; (189a0 <flash_area_find_idx+0x34>)
   18978:	681b      	ldr	r3, [r3, #0]
   1897a:	4283      	cmp	r3, r0
   1897c:	dd07      	ble.n	1898e <flash_area_find_idx+0x22>
        if (flash_map[i].fa_id == id) {
   1897e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18982:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
   18986:	4293      	cmp	r3, r2
   18988:	d006      	beq.n	18998 <flash_area_find_idx+0x2c>
    for (i = 0; i < flash_map_entries; i++) {
   1898a:	3001      	adds	r0, #1
   1898c:	e7f3      	b.n	18976 <flash_area_find_idx+0xa>
            return i;
        }
    }

    return -1;
   1898e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18992:	4770      	bx	lr
        return -1;
   18994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   18998:	4770      	bx	lr
   1899a:	bf00      	nop
   1899c:	100030f4 	.word	0x100030f4
   189a0:	100030f8 	.word	0x100030f8

000189a4 <flash_map_area_overlaps>:
    const struct flash_area *area2;
    uint32_t end1;
    uint32_t end2;
    int i;

    for (i = 0; i < flash_map_entries; i++) {
   189a4:	2300      	movs	r3, #0
   189a6:	4a13      	ldr	r2, [pc, #76]	; (189f4 <flash_map_area_overlaps+0x50>)
   189a8:	6812      	ldr	r2, [r2, #0]
   189aa:	429a      	cmp	r2, r3
   189ac:	dd1f      	ble.n	189ee <flash_map_area_overlaps+0x4a>
{
   189ae:	b430      	push	{r4, r5}
   189b0:	e004      	b.n	189bc <flash_map_area_overlaps+0x18>
    for (i = 0; i < flash_map_entries; i++) {
   189b2:	3301      	adds	r3, #1
   189b4:	4a0f      	ldr	r2, [pc, #60]	; (189f4 <flash_map_area_overlaps+0x50>)
   189b6:	6812      	ldr	r2, [r2, #0]
   189b8:	429a      	cmp	r2, r3
   189ba:	dd15      	ble.n	189e8 <flash_map_area_overlaps+0x44>
        area2 = &flash_map[i];
   189bc:	4a0e      	ldr	r2, [pc, #56]	; (189f8 <flash_map_area_overlaps+0x54>)
   189be:	6812      	ldr	r2, [r2, #0]
   189c0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   189c4:	eb02 0281 	add.w	r2, r2, r1, lsl #2

        if (area1->fa_device_id == area2->fa_device_id) {
   189c8:	7844      	ldrb	r4, [r0, #1]
   189ca:	7851      	ldrb	r1, [r2, #1]
   189cc:	428c      	cmp	r4, r1
   189ce:	d1f0      	bne.n	189b2 <flash_map_area_overlaps+0xe>
            end1 = area1->fa_off + area1->fa_size;
   189d0:	6845      	ldr	r5, [r0, #4]
   189d2:	6881      	ldr	r1, [r0, #8]
   189d4:	4429      	add	r1, r5
            end2 = area2->fa_off + area2->fa_size;
   189d6:	6854      	ldr	r4, [r2, #4]
   189d8:	6892      	ldr	r2, [r2, #8]
   189da:	4422      	add	r2, r4

            if (end1 > area2->fa_off && area1->fa_off < end2) {
   189dc:	428c      	cmp	r4, r1
   189de:	d2e8      	bcs.n	189b2 <flash_map_area_overlaps+0xe>
   189e0:	4295      	cmp	r5, r2
   189e2:	d2e6      	bcs.n	189b2 <flash_map_area_overlaps+0xe>
                return true;
   189e4:	2001      	movs	r0, #1
   189e6:	e000      	b.n	189ea <flash_map_area_overlaps+0x46>
            }
        }
    }

    return false;
   189e8:	2000      	movs	r0, #0
}
   189ea:	bc30      	pop	{r4, r5}
   189ec:	4770      	bx	lr
    return false;
   189ee:	2000      	movs	r0, #0
}
   189f0:	4770      	bx	lr
   189f2:	bf00      	nop
   189f4:	100030f8 	.word	0x100030f8
   189f8:	100030f4 	.word	0x100030f4

000189fc <flash_map_add_new_dflt_areas>:
 * Adds areas from the hardcoded flash map that aren't present in, and don't
 * overlap with, the manufacturing flash map.
 */
static void
flash_map_add_new_dflt_areas(void)
{
   189fc:	b570      	push	{r4, r5, r6, lr}

    const struct flash_area *dflt_area;
    struct flash_area *dst_area;
    int i;
    
    for (i = 0; i < num_dflt_entries; i++) {
   189fe:	2400      	movs	r4, #0
   18a00:	e00a      	b.n	18a18 <flash_map_add_new_dflt_areas+0x1c>
            /* Default flash map contains a new entry. */
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "no room: id=%d",
                               dflt_area->fa_id);
                DEBUG_PANIC();
   18a02:	f7fb fe2f 	bl	14664 <hal_debugger_connected>
   18a06:	b100      	cbz	r0, 18a0a <flash_map_add_new_dflt_areas+0xe>
   18a08:	be01      	bkpt	0x0001
   18a0a:	2300      	movs	r3, #0
   18a0c:	461a      	mov	r2, r3
   18a0e:	4619      	mov	r1, r3
   18a10:	4618      	mov	r0, r3
   18a12:	f7fc f9c7 	bl	14da4 <__assert_func>
    for (i = 0; i < num_dflt_entries; i++) {
   18a16:	3401      	adds	r4, #1
   18a18:	2c05      	cmp	r4, #5
   18a1a:	dc28      	bgt.n	18a6e <flash_map_add_new_dflt_areas+0x72>
        dflt_area = &sysflash_map_dflt[i];
   18a1c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   18a20:	4a13      	ldr	r2, [pc, #76]	; (18a70 <flash_map_add_new_dflt_areas+0x74>)
   18a22:	eb02 0683 	add.w	r6, r2, r3, lsl #2
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
   18a26:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   18a2a:	f7ff ff9f 	bl	1896c <flash_area_find_idx>
   18a2e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   18a32:	d1f0      	bne.n	18a16 <flash_map_add_new_dflt_areas+0x1a>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
   18a34:	4b0f      	ldr	r3, [pc, #60]	; (18a74 <flash_map_add_new_dflt_areas+0x78>)
   18a36:	681d      	ldr	r5, [r3, #0]
   18a38:	2d09      	cmp	r5, #9
   18a3a:	dce2      	bgt.n	18a02 <flash_map_add_new_dflt_areas+0x6>
                return;
            } 

            /* Add the default entry if it doesn't cause any overlaps. */
            if (flash_map_area_overlaps(dflt_area)) {
   18a3c:	4630      	mov	r0, r6
   18a3e:	f7ff ffb1 	bl	189a4 <flash_map_area_overlaps>
   18a42:	2800      	cmp	r0, #0
   18a44:	d1e7      	bne.n	18a16 <flash_map_add_new_dflt_areas+0x1a>
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "overlap: id=%d",
                               dflt_area->fa_id);
            } else {
                /* Cast away const. */
                dst_area = (struct flash_area *) &flash_map[flash_map_entries];
   18a46:	4b0c      	ldr	r3, [pc, #48]	; (18a78 <flash_map_add_new_dflt_areas+0x7c>)
   18a48:	681b      	ldr	r3, [r3, #0]
   18a4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   18a4e:	eb03 0585 	add.w	r5, r3, r5, lsl #2

                *dst_area = *dflt_area;
   18a52:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   18a56:	4a06      	ldr	r2, [pc, #24]	; (18a70 <flash_map_add_new_dflt_areas+0x74>)
   18a58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   18a5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   18a60:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                flash_map_entries++;
   18a64:	4a03      	ldr	r2, [pc, #12]	; (18a74 <flash_map_add_new_dflt_areas+0x78>)
   18a66:	6813      	ldr	r3, [r2, #0]
   18a68:	3301      	adds	r3, #1
   18a6a:	6013      	str	r3, [r2, #0]
   18a6c:	e7d3      	b.n	18a16 <flash_map_add_new_dflt_areas+0x1a>
            }
        }
    }
}
   18a6e:	bd70      	pop	{r4, r5, r6, pc}
   18a70:	00031578 	.word	0x00031578
   18a74:	100030f8 	.word	0x100030f8
   18a78:	100030f4 	.word	0x100030f4

00018a7c <flash_area_open>:
{
   18a7c:	b538      	push	{r3, r4, r5, lr}
    if (flash_map == NULL) {
   18a7e:	4b0b      	ldr	r3, [pc, #44]	; (18aac <flash_area_open+0x30>)
   18a80:	681c      	ldr	r4, [r3, #0]
   18a82:	b164      	cbz	r4, 18a9e <flash_area_open+0x22>
   18a84:	460d      	mov	r5, r1
    idx = flash_area_find_idx(id);
   18a86:	f7ff ff71 	bl	1896c <flash_area_find_idx>
    if (idx == -1) {
   18a8a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   18a8e:	d009      	beq.n	18aa4 <flash_area_open+0x28>
    *fap = &flash_map[idx];
   18a90:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18a94:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   18a98:	6028      	str	r0, [r5, #0]
    return 0;
   18a9a:	2000      	movs	r0, #0
}
   18a9c:	bd38      	pop	{r3, r4, r5, pc}
        return SYS_EACCES;
   18a9e:	f06f 0006 	mvn.w	r0, #6
   18aa2:	e7fb      	b.n	18a9c <flash_area_open+0x20>
        return SYS_ENOENT;
   18aa4:	f06f 0003 	mvn.w	r0, #3
   18aa8:	e7f8      	b.n	18a9c <flash_area_open+0x20>
   18aaa:	bf00      	nop
   18aac:	100030f4 	.word	0x100030f4

00018ab0 <flash_area_to_sectors>:
{
   18ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18ab4:	b084      	sub	sp, #16
   18ab6:	460f      	mov	r7, r1
   18ab8:	4616      	mov	r6, r2
    rc = flash_area_open(id, &fa);
   18aba:	fa5f f880 	uxtb.w	r8, r0
   18abe:	a903      	add	r1, sp, #12
   18ac0:	4640      	mov	r0, r8
   18ac2:	f7ff ffdb 	bl	18a7c <flash_area_open>
    if (rc != 0) {
   18ac6:	4681      	mov	r9, r0
   18ac8:	b118      	cbz	r0, 18ad2 <flash_area_to_sectors+0x22>
}
   18aca:	4648      	mov	r0, r9
   18acc:	b004      	add	sp, #16
   18ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *cnt = 0;
   18ad2:	2300      	movs	r3, #0
   18ad4:	603b      	str	r3, [r7, #0]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
   18ad6:	9b03      	ldr	r3, [sp, #12]
   18ad8:	7858      	ldrb	r0, [r3, #1]
   18ada:	f011 fe05 	bl	2a6e8 <hal_bsp_flash_dev>
   18ade:	4605      	mov	r5, r0
    for (i = 0; i < hf->hf_sector_cnt; i++) {
   18ae0:	464c      	mov	r4, r9
   18ae2:	e003      	b.n	18aec <flash_area_to_sectors+0x3c>
            (*cnt)++;
   18ae4:	683b      	ldr	r3, [r7, #0]
   18ae6:	3301      	adds	r3, #1
   18ae8:	603b      	str	r3, [r7, #0]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
   18aea:	3401      	adds	r4, #1
   18aec:	68eb      	ldr	r3, [r5, #12]
   18aee:	42a3      	cmp	r3, r4
   18af0:	ddeb      	ble.n	18aca <flash_area_to_sectors+0x1a>
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
   18af2:	682b      	ldr	r3, [r5, #0]
   18af4:	f8d3 a00c 	ldr.w	sl, [r3, #12]
   18af8:	ab01      	add	r3, sp, #4
   18afa:	aa02      	add	r2, sp, #8
   18afc:	4621      	mov	r1, r4
   18afe:	4628      	mov	r0, r5
   18b00:	47d0      	blx	sl
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
   18b02:	9903      	ldr	r1, [sp, #12]
   18b04:	684b      	ldr	r3, [r1, #4]
   18b06:	9a02      	ldr	r2, [sp, #8]
   18b08:	4293      	cmp	r3, r2
   18b0a:	d8ee      	bhi.n	18aea <flash_area_to_sectors+0x3a>
   18b0c:	6889      	ldr	r1, [r1, #8]
   18b0e:	440b      	add	r3, r1
   18b10:	429a      	cmp	r2, r3
   18b12:	d2ea      	bcs.n	18aea <flash_area_to_sectors+0x3a>
            if (ret) {
   18b14:	2e00      	cmp	r6, #0
   18b16:	d0e5      	beq.n	18ae4 <flash_area_to_sectors+0x34>
                ret->fa_id = id;
   18b18:	f886 8000 	strb.w	r8, [r6]
                ret->fa_device_id = fa->fa_device_id;
   18b1c:	9b03      	ldr	r3, [sp, #12]
   18b1e:	785b      	ldrb	r3, [r3, #1]
   18b20:	7073      	strb	r3, [r6, #1]
                ret->fa_off = start;
   18b22:	6072      	str	r2, [r6, #4]
                ret->fa_size = size;
   18b24:	9b01      	ldr	r3, [sp, #4]
   18b26:	60b3      	str	r3, [r6, #8]
                ret++;
   18b28:	360c      	adds	r6, #12
   18b2a:	e7db      	b.n	18ae4 <flash_area_to_sectors+0x34>

00018b2c <flash_area_read>:
{
   18b2c:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   18b2e:	6884      	ldr	r4, [r0, #8]
   18b30:	428c      	cmp	r4, r1
   18b32:	d308      	bcc.n	18b46 <flash_area_read+0x1a>
   18b34:	18cd      	adds	r5, r1, r3
   18b36:	42ac      	cmp	r4, r5
   18b38:	d308      	bcc.n	18b4c <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   18b3a:	6844      	ldr	r4, [r0, #4]
   18b3c:	4421      	add	r1, r4
   18b3e:	7840      	ldrb	r0, [r0, #1]
   18b40:	f011 fe15 	bl	2a76e <hal_flash_read>
}
   18b44:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   18b46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18b4a:	e7fb      	b.n	18b44 <flash_area_read+0x18>
   18b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18b50:	e7f8      	b.n	18b44 <flash_area_read+0x18>

00018b52 <flash_area_write>:
{
   18b52:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   18b54:	6884      	ldr	r4, [r0, #8]
   18b56:	428c      	cmp	r4, r1
   18b58:	d308      	bcc.n	18b6c <flash_area_write+0x1a>
   18b5a:	18cd      	adds	r5, r1, r3
   18b5c:	42ac      	cmp	r4, r5
   18b5e:	d308      	bcc.n	18b72 <flash_area_write+0x20>
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
   18b60:	6844      	ldr	r4, [r0, #4]
   18b62:	4421      	add	r1, r4
   18b64:	7840      	ldrb	r0, [r0, #1]
   18b66:	f011 fe2b 	bl	2a7c0 <hal_flash_write>
}
   18b6a:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   18b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18b70:	e7fb      	b.n	18b6a <flash_area_write+0x18>
   18b72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18b76:	e7f8      	b.n	18b6a <flash_area_write+0x18>

00018b78 <flash_area_erase>:
    if (off > fa->fa_size || off + len > fa->fa_size) {
   18b78:	6883      	ldr	r3, [r0, #8]
   18b7a:	428b      	cmp	r3, r1
   18b7c:	d309      	bcc.n	18b92 <flash_area_erase+0x1a>
{
   18b7e:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   18b80:	188c      	adds	r4, r1, r2
   18b82:	42a3      	cmp	r3, r4
   18b84:	d308      	bcc.n	18b98 <flash_area_erase+0x20>
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
   18b86:	6843      	ldr	r3, [r0, #4]
   18b88:	4419      	add	r1, r3
   18b8a:	7840      	ldrb	r0, [r0, #1]
   18b8c:	f011 fe50 	bl	2a830 <hal_flash_erase>
}
   18b90:	bd10      	pop	{r4, pc}
        return -1;
   18b92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   18b96:	4770      	bx	lr
        return -1;
   18b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18b9c:	e7f8      	b.n	18b90 <flash_area_erase+0x18>

00018b9e <flash_area_align>:
{
   18b9e:	b508      	push	{r3, lr}
    return hal_flash_align(fa->fa_device_id);
   18ba0:	7840      	ldrb	r0, [r0, #1]
   18ba2:	f011 fdd4 	bl	2a74e <hal_flash_align>
}
   18ba6:	bd08      	pop	{r3, pc}

00018ba8 <flash_area_erased_val>:
{
   18ba8:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
   18baa:	7840      	ldrb	r0, [r0, #1]
   18bac:	f011 fdd7 	bl	2a75e <hal_flash_erased_val>
}
   18bb0:	bd08      	pop	{r3, pc}

00018bb2 <flash_area_is_empty>:
{
   18bb2:	b510      	push	{r4, lr}
   18bb4:	460c      	mov	r4, r1
    *empty = false;
   18bb6:	2300      	movs	r3, #0
   18bb8:	700b      	strb	r3, [r1, #0]
    rc = hal_flash_isempty_no_buf(fa->fa_device_id, fa->fa_off, fa->fa_size);
   18bba:	6882      	ldr	r2, [r0, #8]
   18bbc:	6841      	ldr	r1, [r0, #4]
   18bbe:	7840      	ldrb	r0, [r0, #1]
   18bc0:	f011 fef0 	bl	2a9a4 <hal_flash_isempty_no_buf>
    if (rc < 0) {
   18bc4:	2800      	cmp	r0, #0
   18bc6:	db02      	blt.n	18bce <flash_area_is_empty+0x1c>
    } else if (rc == 1) {
   18bc8:	2801      	cmp	r0, #1
   18bca:	d001      	beq.n	18bd0 <flash_area_is_empty+0x1e>
    return 0;
   18bcc:	2000      	movs	r0, #0
}
   18bce:	bd10      	pop	{r4, pc}
        *empty = true;
   18bd0:	2301      	movs	r3, #1
   18bd2:	7023      	strb	r3, [r4, #0]
    return 0;
   18bd4:	2000      	movs	r0, #0
   18bd6:	e7fa      	b.n	18bce <flash_area_is_empty+0x1c>

00018bd8 <flash_area_read_is_empty>:
{
   18bd8:	b510      	push	{r4, lr}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
   18bda:	6844      	ldr	r4, [r0, #4]
   18bdc:	4421      	add	r1, r4
   18bde:	7840      	ldrb	r0, [r0, #1]
   18be0:	f011 feaf 	bl	2a942 <hal_flash_isempty>
}
   18be4:	bd10      	pop	{r4, pc}

00018be6 <flash_area_id_from_image_slot>:
    switch (slot) {
   18be6:	b170      	cbz	r0, 18c06 <flash_area_id_from_image_slot+0x20>
{
   18be8:	b508      	push	{r3, lr}
    switch (slot) {
   18bea:	2801      	cmp	r0, #1
   18bec:	d101      	bne.n	18bf2 <flash_area_id_from_image_slot+0xc>
        return FLASH_AREA_IMAGE_1;
   18bee:	2002      	movs	r0, #2
}
   18bf0:	bd08      	pop	{r3, pc}
        assert(0);
   18bf2:	f7fb fd37 	bl	14664 <hal_debugger_connected>
   18bf6:	b100      	cbz	r0, 18bfa <flash_area_id_from_image_slot+0x14>
   18bf8:	be01      	bkpt	0x0001
   18bfa:	2300      	movs	r3, #0
   18bfc:	461a      	mov	r2, r3
   18bfe:	4619      	mov	r1, r3
   18c00:	4618      	mov	r0, r3
   18c02:	f7fc f8cf 	bl	14da4 <__assert_func>
    switch (slot) {
   18c06:	2001      	movs	r0, #1
}
   18c08:	4770      	bx	lr
	...

00018c0c <flash_map_init>:

void
flash_map_init(void)
{
   18c0c:	b510      	push	{r4, lr}
   18c0e:	b082      	sub	sp, #8
#endif

    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   18c10:	4b13      	ldr	r3, [pc, #76]	; (18c60 <flash_map_init+0x54>)
   18c12:	781b      	ldrb	r3, [r3, #0]
   18c14:	b163      	cbz	r3, 18c30 <flash_map_init+0x24>

    rc = hal_flash_init();
   18c16:	f011 fd84 	bl	2a722 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   18c1a:	b998      	cbnz	r0, 18c44 <flash_map_init+0x38>
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   18c1c:	4b11      	ldr	r3, [pc, #68]	; (18c64 <flash_map_init+0x58>)
   18c1e:	4a12      	ldr	r2, [pc, #72]	; (18c68 <flash_map_init+0x5c>)
   18c20:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   18c22:	4b12      	ldr	r3, [pc, #72]	; (18c6c <flash_map_init+0x60>)
   18c24:	2206      	movs	r2, #6
   18c26:	601a      	str	r2, [r3, #0]

    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
   18c28:	f7ff fee8 	bl	189fc <flash_map_add_new_dflt_areas>
}
   18c2c:	b002      	add	sp, #8
   18c2e:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   18c30:	f7fb fd18 	bl	14664 <hal_debugger_connected>
   18c34:	b100      	cbz	r0, 18c38 <flash_map_init+0x2c>
   18c36:	be01      	bkpt	0x0001
   18c38:	2300      	movs	r3, #0
   18c3a:	461a      	mov	r2, r3
   18c3c:	4619      	mov	r1, r3
   18c3e:	4618      	mov	r0, r3
   18c40:	f7fc f8b0 	bl	14da4 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   18c44:	f7fb fd0e 	bl	14664 <hal_debugger_connected>
   18c48:	b100      	cbz	r0, 18c4c <flash_map_init+0x40>
   18c4a:	be01      	bkpt	0x0001
   18c4c:	2000      	movs	r0, #0
   18c4e:	9000      	str	r0, [sp, #0]
   18c50:	4b07      	ldr	r3, [pc, #28]	; (18c70 <flash_map_init+0x64>)
   18c52:	681c      	ldr	r4, [r3, #0]
   18c54:	4603      	mov	r3, r0
   18c56:	4602      	mov	r2, r0
   18c58:	4601      	mov	r1, r0
   18c5a:	47a0      	blx	r4
   18c5c:	e7de      	b.n	18c1c <flash_map_init+0x10>
   18c5e:	bf00      	nop
   18c60:	10003404 	.word	0x10003404
   18c64:	100030f4 	.word	0x100030f4
   18c68:	00031578 	.word	0x00031578
   18c6c:	100030f8 	.word	0x100030f8
   18c70:	1000028c 	.word	0x1000028c

00018c74 <id_conf_export>:
}

static int
id_conf_export(void (*export_func)(char *name, char *val),
  enum conf_export_tgt tgt)
{
   18c74:	b510      	push	{r4, lr}
   18c76:	b098      	sub	sp, #96	; 0x60
   18c78:	4604      	mov	r4, r0
    uint8_t src_buf[HAL_BSP_MAX_ID_LEN];
    char str[sizeof(src_buf) * 2];
    int len;

    if (tgt == CONF_EXPORT_SHOW) {
   18c7a:	2901      	cmp	r1, #1
   18c7c:	d005      	beq.n	18c8a <id_conf_export+0x16>
#if MYNEWT_VAL(ID_TARGET_PRESENT)
        export_func("id/target", MYNEWT_VAL(TARGET_NAME));
#endif
    }
#if MYNEWT_VAL(ID_SERIAL_PRESENT)
    export_func("id/serial", id_serial);
   18c7e:	4911      	ldr	r1, [pc, #68]	; (18cc4 <id_conf_export+0x50>)
   18c80:	4811      	ldr	r0, [pc, #68]	; (18cc8 <id_conf_export+0x54>)
   18c82:	47a0      	blx	r4
        export_func("id/model", (char *)id_model);
    }
#endif /* ID_MODEL_LOCAL */
#endif /* ID_MODEL_PRESENT */
    return 0;
}
   18c84:	2000      	movs	r0, #0
   18c86:	b018      	add	sp, #96	; 0x60
   18c88:	bd10      	pop	{r4, pc}
        len = hal_bsp_hw_id(src_buf, sizeof(src_buf));
   18c8a:	2120      	movs	r1, #32
   18c8c:	a810      	add	r0, sp, #64	; 0x40
   18c8e:	f011 fd37 	bl	2a700 <hal_bsp_hw_id>
        if (len > 0) {
   18c92:	1e01      	subs	r1, r0, #0
   18c94:	dc0e      	bgt.n	18cb4 <id_conf_export+0x40>
        export_func("id/hwid", str);
   18c96:	4669      	mov	r1, sp
   18c98:	480c      	ldr	r0, [pc, #48]	; (18ccc <id_conf_export+0x58>)
   18c9a:	47a0      	blx	r4
        export_func("id/bsp", (char *)id_bsp_str);
   18c9c:	4b0c      	ldr	r3, [pc, #48]	; (18cd0 <id_conf_export+0x5c>)
   18c9e:	6819      	ldr	r1, [r3, #0]
   18ca0:	480c      	ldr	r0, [pc, #48]	; (18cd4 <id_conf_export+0x60>)
   18ca2:	47a0      	blx	r4
        export_func("id/app", (char *)id_app_str);
   18ca4:	4b0c      	ldr	r3, [pc, #48]	; (18cd8 <id_conf_export+0x64>)
   18ca6:	6819      	ldr	r1, [r3, #0]
   18ca8:	480c      	ldr	r0, [pc, #48]	; (18cdc <id_conf_export+0x68>)
   18caa:	47a0      	blx	r4
        export_func("id/mfghash", (char *)id_mfghash);
   18cac:	490c      	ldr	r1, [pc, #48]	; (18ce0 <id_conf_export+0x6c>)
   18cae:	480d      	ldr	r0, [pc, #52]	; (18ce4 <id_conf_export+0x70>)
   18cb0:	47a0      	blx	r4
   18cb2:	e7e4      	b.n	18c7e <id_conf_export+0xa>
            conf_str_from_bytes(src_buf, len, str, sizeof(str));
   18cb4:	2340      	movs	r3, #64	; 0x40
   18cb6:	466a      	mov	r2, sp
   18cb8:	eb0d 0003 	add.w	r0, sp, r3
   18cbc:	f7fe fd32 	bl	17724 <conf_str_from_bytes>
   18cc0:	e7e9      	b.n	18c96 <id_conf_export+0x22>
   18cc2:	bf00      	nop
   18cc4:	10003158 	.word	0x10003158
   18cc8:	000307a0 	.word	0x000307a0
   18ccc:	0003077c 	.word	0x0003077c
   18cd0:	10000238 	.word	0x10000238
   18cd4:	00030784 	.word	0x00030784
   18cd8:	10000234 	.word	0x10000234
   18cdc:	0003078c 	.word	0x0003078c
   18ce0:	100030fc 	.word	0x100030fc
   18ce4:	00030794 	.word	0x00030794

00018ce8 <id_conf_get>:
    if (argc == 1) {
   18ce8:	2801      	cmp	r0, #1
   18cea:	d136      	bne.n	18d5a <id_conf_get+0x72>
{
   18cec:	b570      	push	{r4, r5, r6, lr}
   18cee:	b088      	sub	sp, #32
   18cf0:	4616      	mov	r6, r2
   18cf2:	461c      	mov	r4, r3
        if (!strcmp(argv[0], "hwid")) {
   18cf4:	680d      	ldr	r5, [r1, #0]
   18cf6:	491b      	ldr	r1, [pc, #108]	; (18d64 <id_conf_get+0x7c>)
   18cf8:	4628      	mov	r0, r5
   18cfa:	f7fd ff2c 	bl	16b56 <strcmp>
   18cfe:	b1a8      	cbz	r0, 18d2c <id_conf_get+0x44>
        } else if (!strcmp(argv[0], "bsp")) {
   18d00:	4919      	ldr	r1, [pc, #100]	; (18d68 <id_conf_get+0x80>)
   18d02:	4628      	mov	r0, r5
   18d04:	f7fd ff27 	bl	16b56 <strcmp>
   18d08:	b1f0      	cbz	r0, 18d48 <id_conf_get+0x60>
        } else if (!strcmp(argv[0], "app")) {
   18d0a:	4918      	ldr	r1, [pc, #96]	; (18d6c <id_conf_get+0x84>)
   18d0c:	4628      	mov	r0, r5
   18d0e:	f7fd ff22 	bl	16b56 <strcmp>
   18d12:	b1e8      	cbz	r0, 18d50 <id_conf_get+0x68>
        } else if (!strcmp(argv[0], "serial")) {
   18d14:	4916      	ldr	r1, [pc, #88]	; (18d70 <id_conf_get+0x88>)
   18d16:	4628      	mov	r0, r5
   18d18:	f7fd ff1d 	bl	16b56 <strcmp>
   18d1c:	b1f8      	cbz	r0, 18d5e <id_conf_get+0x76>
        } else if (!strcmp(argv[0], "mfghash")) {
   18d1e:	4915      	ldr	r1, [pc, #84]	; (18d74 <id_conf_get+0x8c>)
   18d20:	4628      	mov	r0, r5
   18d22:	f7fd ff18 	bl	16b56 <strcmp>
   18d26:	b9b0      	cbnz	r0, 18d56 <id_conf_get+0x6e>
            return id_mfghash;
   18d28:	4813      	ldr	r0, [pc, #76]	; (18d78 <id_conf_get+0x90>)
   18d2a:	e00f      	b.n	18d4c <id_conf_get+0x64>
            len = hal_bsp_hw_id(src_buf, sizeof(src_buf));
   18d2c:	2120      	movs	r1, #32
   18d2e:	4668      	mov	r0, sp
   18d30:	f011 fce6 	bl	2a700 <hal_bsp_hw_id>
            if (len > 0) {
   18d34:	1e01      	subs	r1, r0, #0
   18d36:	dc01      	bgt.n	18d3c <id_conf_get+0x54>
    return NULL;
   18d38:	2000      	movs	r0, #0
   18d3a:	e007      	b.n	18d4c <id_conf_get+0x64>
                return conf_str_from_bytes(src_buf, len, val, val_len_max);
   18d3c:	4623      	mov	r3, r4
   18d3e:	4632      	mov	r2, r6
   18d40:	4668      	mov	r0, sp
   18d42:	f7fe fcef 	bl	17724 <conf_str_from_bytes>
   18d46:	e001      	b.n	18d4c <id_conf_get+0x64>
            return (char *)id_bsp_str;
   18d48:	4b0c      	ldr	r3, [pc, #48]	; (18d7c <id_conf_get+0x94>)
   18d4a:	6818      	ldr	r0, [r3, #0]
}
   18d4c:	b008      	add	sp, #32
   18d4e:	bd70      	pop	{r4, r5, r6, pc}
            return (char *)id_app_str;
   18d50:	4b0b      	ldr	r3, [pc, #44]	; (18d80 <id_conf_get+0x98>)
   18d52:	6818      	ldr	r0, [r3, #0]
   18d54:	e7fa      	b.n	18d4c <id_conf_get+0x64>
    return NULL;
   18d56:	2000      	movs	r0, #0
   18d58:	e7f8      	b.n	18d4c <id_conf_get+0x64>
   18d5a:	2000      	movs	r0, #0
}
   18d5c:	4770      	bx	lr
            return (char *)id_serial;
   18d5e:	4809      	ldr	r0, [pc, #36]	; (18d84 <id_conf_get+0x9c>)
   18d60:	e7f4      	b.n	18d4c <id_conf_get+0x64>
   18d62:	bf00      	nop
   18d64:	000307ac 	.word	0x000307ac
   18d68:	000307b4 	.word	0x000307b4
   18d6c:	000307b8 	.word	0x000307b8
   18d70:	000307bc 	.word	0x000307bc
   18d74:	000307c4 	.word	0x000307c4
   18d78:	100030fc 	.word	0x100030fc
   18d7c:	10000238 	.word	0x10000238
   18d80:	10000234 	.word	0x10000234
   18d84:	10003158 	.word	0x10003158

00018d88 <id_conf_set>:
    if (argc == 1) {
   18d88:	2801      	cmp	r0, #1
   18d8a:	d001      	beq.n	18d90 <id_conf_set+0x8>
    return OS_ENOENT;
   18d8c:	200a      	movs	r0, #10
}
   18d8e:	4770      	bx	lr
{
   18d90:	b510      	push	{r4, lr}
   18d92:	460b      	mov	r3, r1
   18d94:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "serial")) {
   18d96:	4907      	ldr	r1, [pc, #28]	; (18db4 <id_conf_set+0x2c>)
   18d98:	6818      	ldr	r0, [r3, #0]
   18d9a:	f7fd fedc 	bl	16b56 <strcmp>
   18d9e:	b108      	cbz	r0, 18da4 <id_conf_set+0x1c>
    return OS_ENOENT;
   18da0:	200a      	movs	r0, #10
}
   18da2:	bd10      	pop	{r4, pc}
            return CONF_VALUE_SET(val, CONF_STRING, id_serial);
   18da4:	2340      	movs	r3, #64	; 0x40
   18da6:	4a04      	ldr	r2, [pc, #16]	; (18db8 <id_conf_set+0x30>)
   18da8:	2106      	movs	r1, #6
   18daa:	4620      	mov	r0, r4
   18dac:	f7fe fba7 	bl	174fe <conf_value_from_str>
   18db0:	e7f7      	b.n	18da2 <id_conf_set+0x1a>
   18db2:	bf00      	nop
   18db4:	000307bc 	.word	0x000307bc
   18db8:	10003158 	.word	0x10003158

00018dbc <id_read_mfghash>:

static void
id_read_mfghash(void)
{
   18dbc:	b530      	push	{r4, r5, lr}
   18dbe:	b08b      	sub	sp, #44	; 0x2c
    uint8_t raw_hash[MFG_HASH_SZ];
    struct mfg_reader reader;
    int str_off;
    int rc;

    memset(id_mfghash, 0, sizeof id_mfghash);
   18dc0:	225a      	movs	r2, #90	; 0x5a
   18dc2:	2100      	movs	r1, #0
   18dc4:	4814      	ldr	r0, [pc, #80]	; (18e18 <id_read_mfghash+0x5c>)
   18dc6:	f7fd feaa 	bl	16b1e <memset>

    mfg_open(&reader);
   18dca:	4668      	mov	r0, sp
   18dcc:	f000 fe6c 	bl	19aa8 <mfg_open>

    str_off = 0;
   18dd0:	2400      	movs	r4, #0
   18dd2:	e009      	b.n	18de8 <id_read_mfghash+0x2c>
            id_mfghash[str_off] = ':';
            str_off++;
        }

        /* Append the SHA256 hash as a base64-encoded string. */
        base64_encode(raw_hash, sizeof raw_hash, &id_mfghash[str_off], 1);
   18dd4:	4d10      	ldr	r5, [pc, #64]	; (18e18 <id_read_mfghash+0x5c>)
   18dd6:	2301      	movs	r3, #1
   18dd8:	192a      	adds	r2, r5, r4
   18dda:	2120      	movs	r1, #32
   18ddc:	a802      	add	r0, sp, #8
   18dde:	f00f fe55 	bl	28a8c <base64_encode>
        str_off += ID_BASE64_MFG_HASH_SZ;
   18de2:	342c      	adds	r4, #44	; 0x2c

        id_mfghash[str_off] = '\0';
   18de4:	2300      	movs	r3, #0
   18de6:	552b      	strb	r3, [r5, r4]
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_HASH);
   18de8:	2101      	movs	r1, #1
   18dea:	4668      	mov	r0, sp
   18dec:	f000 fe24 	bl	19a38 <mfg_seek_next_with_type>
        if (rc != 0) {
   18df0:	b978      	cbnz	r0, 18e12 <id_read_mfghash+0x56>
        if (str_off + ID_BASE64_MFG_HASH_SZ + 1 > sizeof id_mfghash) {
   18df2:	f104 032d 	add.w	r3, r4, #45	; 0x2d
   18df6:	2b5a      	cmp	r3, #90	; 0x5a
   18df8:	d80b      	bhi.n	18e12 <id_read_mfghash+0x56>
        rc = mfg_read_tlv_hash(&reader, raw_hash);
   18dfa:	a902      	add	r1, sp, #8
   18dfc:	4668      	mov	r0, sp
   18dfe:	f000 fe2d 	bl	19a5c <mfg_read_tlv_hash>
        if (rc != 0) {
   18e02:	b930      	cbnz	r0, 18e12 <id_read_mfghash+0x56>
        if (str_off != 0) {
   18e04:	2c00      	cmp	r4, #0
   18e06:	d0e5      	beq.n	18dd4 <id_read_mfghash+0x18>
            id_mfghash[str_off] = ':';
   18e08:	4b03      	ldr	r3, [pc, #12]	; (18e18 <id_read_mfghash+0x5c>)
   18e0a:	223a      	movs	r2, #58	; 0x3a
   18e0c:	551a      	strb	r2, [r3, r4]
            str_off++;
   18e0e:	3401      	adds	r4, #1
   18e10:	e7e0      	b.n	18dd4 <id_read_mfghash+0x18>
    }
}
   18e12:	b00b      	add	sp, #44	; 0x2c
   18e14:	bd30      	pop	{r4, r5, pc}
   18e16:	bf00      	nop
   18e18:	100030fc 	.word	0x100030fc

00018e1c <id_init>:

void
id_init(void)
{
   18e1c:	b510      	push	{r4, lr}
   18e1e:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   18e20:	4b10      	ldr	r3, [pc, #64]	; (18e64 <id_init+0x48>)
   18e22:	781b      	ldrb	r3, [r3, #0]
   18e24:	b13b      	cbz	r3, 18e36 <id_init+0x1a>

    rc = conf_register(&id_conf);
   18e26:	4810      	ldr	r0, [pc, #64]	; (18e68 <id_init+0x4c>)
   18e28:	f7fe fb26 	bl	17478 <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   18e2c:	b968      	cbnz	r0, 18e4a <id_init+0x2e>

    /* Attempt to read the manufacturing image hash from the meta region. */
    id_read_mfghash();
   18e2e:	f7ff ffc5 	bl	18dbc <id_read_mfghash>
}
   18e32:	b002      	add	sp, #8
   18e34:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   18e36:	f7fb fc15 	bl	14664 <hal_debugger_connected>
   18e3a:	b100      	cbz	r0, 18e3e <id_init+0x22>
   18e3c:	be01      	bkpt	0x0001
   18e3e:	2300      	movs	r3, #0
   18e40:	461a      	mov	r2, r3
   18e42:	4619      	mov	r1, r3
   18e44:	4618      	mov	r0, r3
   18e46:	f7fb ffad 	bl	14da4 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   18e4a:	f7fb fc0b 	bl	14664 <hal_debugger_connected>
   18e4e:	b100      	cbz	r0, 18e52 <id_init+0x36>
   18e50:	be01      	bkpt	0x0001
   18e52:	2000      	movs	r0, #0
   18e54:	9000      	str	r0, [sp, #0]
   18e56:	4b05      	ldr	r3, [pc, #20]	; (18e6c <id_init+0x50>)
   18e58:	681c      	ldr	r4, [r3, #0]
   18e5a:	4603      	mov	r3, r0
   18e5c:	4602      	mov	r2, r0
   18e5e:	4601      	mov	r1, r0
   18e60:	47a0      	blx	r4
   18e62:	e7e4      	b.n	18e2e <id_init+0x12>
   18e64:	10003404 	.word	0x10003404
   18e68:	1000023c 	.word	0x1000023c
   18e6c:	1000028c 	.word	0x1000028c

00018e70 <log_module_find_idx>:
    return (next);
}

static int
log_module_find_idx(uint8_t id)
{
   18e70:	4602      	mov	r2, r0
    const struct log_module_entry *entry;
    int i;

    for (i = 0; i < g_log_module_count; i++) {
   18e72:	2000      	movs	r0, #0
   18e74:	4b06      	ldr	r3, [pc, #24]	; (18e90 <log_module_find_idx+0x20>)
   18e76:	681b      	ldr	r3, [r3, #0]
   18e78:	4283      	cmp	r3, r0
   18e7a:	dd06      	ble.n	18e8a <log_module_find_idx+0x1a>
        entry = &g_log_module_list[i];
        if (entry->id == id) {
   18e7c:	4b05      	ldr	r3, [pc, #20]	; (18e94 <log_module_find_idx+0x24>)
   18e7e:	f933 3030 	ldrsh.w	r3, [r3, r0, lsl #3]
   18e82:	4293      	cmp	r3, r2
   18e84:	d003      	beq.n	18e8e <log_module_find_idx+0x1e>
    for (i = 0; i < g_log_module_count; i++) {
   18e86:	3001      	adds	r0, #1
   18e88:	e7f4      	b.n	18e74 <log_module_find_idx+0x4>
            return i;
        }
    }

    return -1;
   18e8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   18e8e:	4770      	bx	lr
   18e90:	100031a0 	.word	0x100031a0
   18e94:	100031a4 	.word	0x100031a4

00018e98 <log_registered>:
static int
log_registered(struct log *log)
{
    struct log *cur;

    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   18e98:	4b05      	ldr	r3, [pc, #20]	; (18eb0 <log_registered+0x18>)
   18e9a:	681b      	ldr	r3, [r3, #0]
   18e9c:	b11b      	cbz	r3, 18ea6 <log_registered+0xe>
        if (cur == log) {
   18e9e:	4283      	cmp	r3, r0
   18ea0:	d003      	beq.n	18eaa <log_registered+0x12>
    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   18ea2:	68db      	ldr	r3, [r3, #12]
   18ea4:	e7fa      	b.n	18e9c <log_registered+0x4>
            return 1;
        }
    }

    return 0;
   18ea6:	2000      	movs	r0, #0
   18ea8:	4770      	bx	lr
            return 1;
   18eaa:	2001      	movs	r0, #1
}
   18eac:	4770      	bx	lr
   18eae:	bf00      	nop
   18eb0:	1000025c 	.word	0x1000025c

00018eb4 <log_chk_type>:
{
    int rc;

    rc = OS_OK;

    switch(etype) {
   18eb4:	2802      	cmp	r0, #2
   18eb6:	d801      	bhi.n	18ebc <log_chk_type+0x8>
    rc = OS_OK;
   18eb8:	2000      	movs	r0, #0
   18eba:	4770      	bx	lr
        case LOG_ETYPE_STRING:
        case LOG_ETYPE_BINARY:
        case LOG_ETYPE_CBOR:
            break;
        default:
            rc = OS_ERROR;
   18ebc:	200c      	movs	r0, #12
            break;
    }

    return rc;
}
   18ebe:	4770      	bx	lr

00018ec0 <log_chk_max_entry_len>:
log_chk_max_entry_len(struct log *log, uint16_t len)
{
    int rc;

    rc = OS_OK;
    if (log->l_max_entry_len != 0) {
   18ec0:	8b43      	ldrh	r3, [r0, #26]
   18ec2:	b11b      	cbz	r3, 18ecc <log_chk_max_entry_len+0xc>
        if (len > log->l_max_entry_len) {
   18ec4:	428b      	cmp	r3, r1
   18ec6:	d303      	bcc.n	18ed0 <log_chk_max_entry_len+0x10>
    rc = OS_OK;
   18ec8:	2000      	movs	r0, #0
   18eca:	4770      	bx	lr
   18ecc:	2000      	movs	r0, #0
   18ece:	4770      	bx	lr
            LOG_STATS_INC(log, too_long);
            rc = OS_ENOMEM;
   18ed0:	2001      	movs	r0, #1
        }
    }

    return rc;
}
   18ed2:	4770      	bx	lr

00018ed4 <log_call_append_cb>:
/**
 * Calls the given log's append callback, if it has one.
 */
static void
log_call_append_cb(struct log *log, uint32_t idx)
{
   18ed4:	b500      	push	{lr}
   18ed6:	b083      	sub	sp, #12
     * preventing a TOCTTOU race.
     * (This all assumes that function pointer reads and writes are atomic.)
     */
    log_append_cb * volatile cb;

    cb = log->l_append_cb;
   18ed8:	6903      	ldr	r3, [r0, #16]
   18eda:	9301      	str	r3, [sp, #4]
    if (cb != NULL) {
   18edc:	9b01      	ldr	r3, [sp, #4]
   18ede:	b10b      	cbz	r3, 18ee4 <log_call_append_cb+0x10>
        cb(log, idx);
   18ee0:	9b01      	ldr	r3, [sp, #4]
   18ee2:	4798      	blx	r3
    }
}
   18ee4:	b003      	add	sp, #12
   18ee6:	f85d fb04 	ldr.w	pc, [sp], #4
   18eea:	0000      	movs	r0, r0
   18eec:	0000      	movs	r0, r0
	...

00018ef0 <log_append_prepare>:
{
   18ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ef4:	b085      	sub	sp, #20
   18ef6:	4606      	mov	r6, r0
   18ef8:	468a      	mov	sl, r1
   18efa:	4615      	mov	r5, r2
   18efc:	461f      	mov	r7, r3
   18efe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    rc = log_chk_type(etype);
   18f00:	4618      	mov	r0, r3
   18f02:	f7ff ffd7 	bl	18eb4 <log_chk_type>
    assert(rc == OS_OK);
   18f06:	2800      	cmp	r0, #0
   18f08:	d13e      	bne.n	18f88 <log_append_prepare+0x98>
    if (log->l_name == NULL || log->l_log == NULL) {
   18f0a:	6833      	ldr	r3, [r6, #0]
   18f0c:	2b00      	cmp	r3, #0
   18f0e:	d074      	beq.n	18ffa <log_append_prepare+0x10a>
   18f10:	6873      	ldr	r3, [r6, #4]
   18f12:	2b00      	cmp	r3, #0
   18f14:	d074      	beq.n	19000 <log_append_prepare+0x110>
    if (level > LOG_LEVEL_MAX) {
   18f16:	2d0f      	cmp	r5, #15
   18f18:	d900      	bls.n	18f1c <log_append_prepare+0x2c>
        level = LOG_LEVEL_MAX;
   18f1a:	250f      	movs	r5, #15
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   18f1c:	681b      	ldr	r3, [r3, #0]
   18f1e:	2b02      	cmp	r3, #2
   18f20:	d03c      	beq.n	18f9c <log_append_prepare+0xac>
    if (level < log->l_level) {
   18f22:	7e33      	ldrb	r3, [r6, #24]
   18f24:	42ab      	cmp	r3, r5
   18f26:	d86e      	bhi.n	19006 <log_append_prepare+0x116>
    if (level < log_level_get(module)) {
   18f28:	4650      	mov	r0, sl
   18f2a:	f000 fae7 	bl	194fc <log_level_get>
   18f2e:	42a8      	cmp	r0, r5
   18f30:	d86c      	bhi.n	1900c <log_append_prepare+0x11c>
    OS_ENTER_CRITICAL(sr);
   18f32:	f7fd fbfb 	bl	1672c <os_arch_save_sr>
    idx = g_log_info.li_next_index++;
   18f36:	4b3a      	ldr	r3, [pc, #232]	; (19020 <log_append_prepare+0x130>)
   18f38:	f8d3 b000 	ldr.w	fp, [r3]
   18f3c:	f10b 0201 	add.w	r2, fp, #1
   18f40:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   18f42:	f7fd fbf9 	bl	16738 <os_arch_restore_sr>
    rc = os_gettimeofday(&tv, NULL);
   18f46:	2100      	movs	r1, #0
   18f48:	4668      	mov	r0, sp
   18f4a:	f7fd fb69 	bl	16620 <os_gettimeofday>
    if (rc || tv.tv_sec < UTC01_01_2016) {
   18f4e:	4606      	mov	r6, r0
   18f50:	b938      	cbnz	r0, 18f62 <log_append_prepare+0x72>
   18f52:	e9dd 0100 	ldrd	r0, r1, [sp]
   18f56:	a330      	add	r3, pc, #192	; (adr r3, 19018 <log_append_prepare+0x128>)
   18f58:	e9d3 2300 	ldrd	r2, r3, [r3]
   18f5c:	4282      	cmp	r2, r0
   18f5e:	418b      	sbcs	r3, r1
   18f60:	db20      	blt.n	18fa4 <log_append_prepare+0xb4>
        ue->ue_ts = os_get_uptime_usec();
   18f62:	f7fd fb97 	bl	16694 <os_get_uptime_usec>
   18f66:	6020      	str	r0, [r4, #0]
   18f68:	6061      	str	r1, [r4, #4]
    ue->ue_level = level;
   18f6a:	7365      	strb	r5, [r4, #13]
    ue->ue_module = module;
   18f6c:	f884 a00c 	strb.w	sl, [r4, #12]
    ue->ue_index = idx;
   18f70:	f8c4 b008 	str.w	fp, [r4, #8]
    ue->ue_etype = etype;
   18f74:	7ba3      	ldrb	r3, [r4, #14]
   18f76:	f367 0303 	bfi	r3, r7, #0, #4
    ue->ue_flags = 0;
   18f7a:	f36f 1307 	bfc	r3, #4, #4
   18f7e:	73a3      	strb	r3, [r4, #14]
}
   18f80:	4630      	mov	r0, r6
   18f82:	b005      	add	sp, #20
   18f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(rc == OS_OK);
   18f88:	f7fb fb6c 	bl	14664 <hal_debugger_connected>
   18f8c:	b100      	cbz	r0, 18f90 <log_append_prepare+0xa0>
   18f8e:	be01      	bkpt	0x0001
   18f90:	2300      	movs	r3, #0
   18f92:	461a      	mov	r2, r3
   18f94:	4619      	mov	r1, r3
   18f96:	4618      	mov	r0, r3
   18f98:	f7fb ff04 	bl	14da4 <__assert_func>
        log_written = 1;
   18f9c:	4b21      	ldr	r3, [pc, #132]	; (19024 <log_append_prepare+0x134>)
   18f9e:	2201      	movs	r2, #1
   18fa0:	701a      	strb	r2, [r3, #0]
   18fa2:	e7be      	b.n	18f22 <log_append_prepare+0x32>
        ue->ue_ts = tv.tv_sec * 1000000 + tv.tv_usec;
   18fa4:	ea4f 1c41 	mov.w	ip, r1, lsl #5
   18fa8:	0143      	lsls	r3, r0, #5
   18faa:	ea4c 62d0 	orr.w	r2, ip, r0, lsr #27
   18fae:	1a1b      	subs	r3, r3, r0
   18fb0:	eb62 0201 	sbc.w	r2, r2, r1
   18fb4:	ea4f 2c42 	mov.w	ip, r2, lsl #9
   18fb8:	ea4c 5cd3 	orr.w	ip, ip, r3, lsr #23
   18fbc:	ea4f 2e43 	mov.w	lr, r3, lsl #9
   18fc0:	4662      	mov	r2, ip
   18fc2:	eb1e 0300 	adds.w	r3, lr, r0
   18fc6:	eb41 0202 	adc.w	r2, r1, r2
   18fca:	ea4f 1c82 	mov.w	ip, r2, lsl #6
   18fce:	ea4c 6c93 	orr.w	ip, ip, r3, lsr #26
   18fd2:	ea4f 1e83 	mov.w	lr, r3, lsl #6
   18fd6:	ebbe 0303 	subs.w	r3, lr, r3
   18fda:	eb6c 0202 	sbc.w	r2, ip, r2
   18fde:	eb13 0800 	adds.w	r8, r3, r0
   18fe2:	eb42 0901 	adc.w	r9, r2, r1
   18fe6:	9b02      	ldr	r3, [sp, #8]
   18fe8:	eb18 0803 	adds.w	r8, r8, r3
   18fec:	eb49 79e3 	adc.w	r9, r9, r3, asr #31
   18ff0:	f8c4 8000 	str.w	r8, [r4]
   18ff4:	f8c4 9004 	str.w	r9, [r4, #4]
   18ff8:	e7b7      	b.n	18f6a <log_append_prepare+0x7a>
        rc = -1;
   18ffa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   18ffe:	e7bf      	b.n	18f80 <log_append_prepare+0x90>
   19000:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   19004:	e7bc      	b.n	18f80 <log_append_prepare+0x90>
        rc = -1;
   19006:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1900a:	e7b9      	b.n	18f80 <log_append_prepare+0x90>
        rc = -1;
   1900c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    return (rc);
   19010:	e7b6      	b.n	18f80 <log_append_prepare+0x90>
   19012:	bf00      	nop
   19014:	f3af 8000 	nop.w
   19018:	5685c17f 	.word	0x5685c17f
   1901c:	00000000 	.word	0x00000000
   19020:	10003198 	.word	0x10003198
   19024:	100031ac 	.word	0x100031ac

00019028 <log_init>:
{
   19028:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1902a:	4b0d      	ldr	r3, [pc, #52]	; (19060 <log_init+0x38>)
   1902c:	781b      	ldrb	r3, [r3, #0]
   1902e:	b163      	cbz	r3, 1904a <log_init+0x22>
    log_written = 0;
   19030:	2300      	movs	r3, #0
   19032:	4a0c      	ldr	r2, [pc, #48]	; (19064 <log_init+0x3c>)
   19034:	7013      	strb	r3, [r2, #0]
    STAILQ_INIT(&g_log_list);
   19036:	4a0c      	ldr	r2, [pc, #48]	; (19068 <log_init+0x40>)
   19038:	6013      	str	r3, [r2, #0]
   1903a:	6052      	str	r2, [r2, #4]
    g_log_info.li_version = MYNEWT_VAL(LOG_VERSION);
   1903c:	4a0b      	ldr	r2, [pc, #44]	; (1906c <log_init+0x44>)
   1903e:	2103      	movs	r1, #3
   19040:	7111      	strb	r1, [r2, #4]
    g_log_info.li_next_index = 0;
   19042:	6013      	str	r3, [r2, #0]
    log_console_init();
   19044:	f000 fa2a 	bl	1949c <log_console_init>
}
   19048:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1904a:	f7fb fb0b 	bl	14664 <hal_debugger_connected>
   1904e:	b100      	cbz	r0, 19052 <log_init+0x2a>
   19050:	be01      	bkpt	0x0001
   19052:	2300      	movs	r3, #0
   19054:	461a      	mov	r2, r3
   19056:	4619      	mov	r1, r3
   19058:	4618      	mov	r0, r3
   1905a:	f7fb fea3 	bl	14da4 <__assert_func>
   1905e:	bf00      	nop
   19060:	10003404 	.word	0x10003404
   19064:	100031ac 	.word	0x100031ac
   19068:	1000025c 	.word	0x1000025c
   1906c:	10003198 	.word	0x10003198

00019070 <log_list_get_next>:
    if (log == NULL) {
   19070:	b108      	cbz	r0, 19076 <log_list_get_next+0x6>
        next = STAILQ_NEXT(log, l_next);
   19072:	68c0      	ldr	r0, [r0, #12]
}
   19074:	4770      	bx	lr
        next = STAILQ_FIRST(&g_log_list);
   19076:	4b01      	ldr	r3, [pc, #4]	; (1907c <log_list_get_next+0xc>)
   19078:	6818      	ldr	r0, [r3, #0]
   1907a:	4770      	bx	lr
   1907c:	1000025c 	.word	0x1000025c

00019080 <log_module_get_name>:
    switch (module) {
   19080:	2804      	cmp	r0, #4
   19082:	d00d      	beq.n	190a0 <log_module_get_name+0x20>
   19084:	2806      	cmp	r0, #6
   19086:	d00d      	beq.n	190a4 <log_module_get_name+0x24>
   19088:	b170      	cbz	r0, 190a8 <log_module_get_name+0x28>
{
   1908a:	b508      	push	{r3, lr}
        idx = log_module_find_idx(module);
   1908c:	f7ff fef0 	bl	18e70 <log_module_find_idx>
        if (idx != -1) {
   19090:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   19094:	d00a      	beq.n	190ac <log_module_get_name+0x2c>
            return g_log_module_list[idx].name;
   19096:	4b06      	ldr	r3, [pc, #24]	; (190b0 <log_module_get_name+0x30>)
   19098:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1909c:	6840      	ldr	r0, [r0, #4]
}
   1909e:	bd08      	pop	{r3, pc}
        return "NIMBLE_HOST";
   190a0:	4804      	ldr	r0, [pc, #16]	; (190b4 <log_module_get_name+0x34>)
   190a2:	4770      	bx	lr
        return "REBOOT";
   190a4:	4804      	ldr	r0, [pc, #16]	; (190b8 <log_module_get_name+0x38>)
   190a6:	4770      	bx	lr
    switch (module) {
   190a8:	4804      	ldr	r0, [pc, #16]	; (190bc <log_module_get_name+0x3c>)
}
   190aa:	4770      	bx	lr
    return NULL;
   190ac:	2000      	movs	r0, #0
   190ae:	e7f6      	b.n	1909e <log_module_get_name+0x1e>
   190b0:	100031a4 	.word	0x100031a4
   190b4:	000307f4 	.word	0x000307f4
   190b8:	000307e4 	.word	0x000307e4
   190bc:	000307ec 	.word	0x000307ec

000190c0 <log_hdr_len>:
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   190c0:	7b83      	ldrb	r3, [r0, #14]
   190c2:	f013 0f10 	tst.w	r3, #16
   190c6:	d101      	bne.n	190cc <log_hdr_len+0xc>
    return LOG_BASE_ENTRY_HDR_SIZE;
   190c8:	200f      	movs	r0, #15
   190ca:	4770      	bx	lr
        return LOG_BASE_ENTRY_HDR_SIZE + LOG_IMG_HASHLEN;
   190cc:	2013      	movs	r0, #19
}
   190ce:	4770      	bx	lr

000190d0 <log_append_body>:
}

int
log_append_body(struct log *log, uint8_t module, uint8_t level, uint8_t etype,
                const void *body, uint16_t body_len)
{
   190d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   190d4:	b089      	sub	sp, #36	; 0x24
   190d6:	4604      	mov	r4, r0
   190d8:	460d      	mov	r5, r1
   190da:	4691      	mov	r9, r2
   190dc:	461e      	mov	r6, r3
   190de:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
    struct log_entry_hdr hdr;
    int rc;

    LOG_STATS_INC(log, writes);

    rc = log_chk_max_entry_len(log, body_len);
   190e2:	4641      	mov	r1, r8
   190e4:	f7ff feec 	bl	18ec0 <log_chk_max_entry_len>
    if (rc != OS_OK) {
   190e8:	4607      	mov	r7, r0
   190ea:	b118      	cbz	r0, 190f4 <log_append_body+0x24>
    }

    log_call_append_cb(log, hdr.ue_index);

    return 0;
}
   190ec:	4638      	mov	r0, r7
   190ee:	b009      	add	sp, #36	; 0x24
   190f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = log_append_prepare(log, module, level, etype, &hdr);
   190f4:	ab03      	add	r3, sp, #12
   190f6:	9300      	str	r3, [sp, #0]
   190f8:	4633      	mov	r3, r6
   190fa:	464a      	mov	r2, r9
   190fc:	4629      	mov	r1, r5
   190fe:	4620      	mov	r0, r4
   19100:	f7ff fef6 	bl	18ef0 <log_append_prepare>
    if (rc != 0) {
   19104:	4607      	mov	r7, r0
   19106:	2800      	cmp	r0, #0
   19108:	d1f0      	bne.n	190ec <log_append_body+0x1c>
    rc = log->l_log->log_append_body(log, &hdr, body, body_len);
   1910a:	6863      	ldr	r3, [r4, #4]
   1910c:	691d      	ldr	r5, [r3, #16]
   1910e:	4643      	mov	r3, r8
   19110:	9a10      	ldr	r2, [sp, #64]	; 0x40
   19112:	a903      	add	r1, sp, #12
   19114:	4620      	mov	r0, r4
   19116:	47a8      	blx	r5
    if (rc != 0) {
   19118:	4607      	mov	r7, r0
   1911a:	2800      	cmp	r0, #0
   1911c:	d1e6      	bne.n	190ec <log_append_body+0x1c>
    log_call_append_cb(log, hdr.ue_index);
   1911e:	9905      	ldr	r1, [sp, #20]
   19120:	4620      	mov	r0, r4
   19122:	f7ff fed7 	bl	18ed4 <log_call_append_cb>
    return 0;
   19126:	e7e1      	b.n	190ec <log_append_body+0x1c>

00019128 <log_walk>:
}

int
log_walk(struct log *log, log_walk_func_t walk_func,
         struct log_offset *log_offset)
{
   19128:	b508      	push	{r3, lr}
    int rc;

    rc = log->l_log->log_walk(log, walk_func, log_offset);
   1912a:	6843      	ldr	r3, [r0, #4]
   1912c:	69db      	ldr	r3, [r3, #28]
   1912e:	4798      	blx	r3
    }

    return (0);
err:
    return (rc);
}
   19130:	bd08      	pop	{r3, pc}
	...

00019134 <log_read_last_hdr>:
{
   19134:	b530      	push	{r4, r5, lr}
   19136:	b089      	sub	sp, #36	; 0x24
    arg.hdr = out_hdr;
   19138:	9106      	str	r1, [sp, #24]
    arg.read_success = 0;
   1913a:	2300      	movs	r3, #0
   1913c:	9307      	str	r3, [sp, #28]
    log_offset.lo_arg = &arg;
   1913e:	aa06      	add	r2, sp, #24
   19140:	9204      	str	r2, [sp, #16]
    log_offset.lo_ts = -1;
   19142:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19146:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1914a:	e9cd 4500 	strd	r4, r5, [sp]
    log_offset.lo_index = 0;
   1914e:	9302      	str	r3, [sp, #8]
    log_offset.lo_data_len = 0;
   19150:	9303      	str	r3, [sp, #12]
    log_walk(log, log_read_hdr_walk, &log_offset);
   19152:	466a      	mov	r2, sp
   19154:	4905      	ldr	r1, [pc, #20]	; (1916c <log_read_last_hdr+0x38>)
   19156:	f7ff ffe7 	bl	19128 <log_walk>
    if (!arg.read_success) {
   1915a:	9b07      	ldr	r3, [sp, #28]
   1915c:	b113      	cbz	r3, 19164 <log_read_last_hdr+0x30>
    return 0;
   1915e:	2000      	movs	r0, #0
}
   19160:	b009      	add	sp, #36	; 0x24
   19162:	bd30      	pop	{r4, r5, pc}
        return -1;
   19164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19168:	e7fa      	b.n	19160 <log_read_last_hdr+0x2c>
   1916a:	bf00      	nop
   1916c:	0001935b 	.word	0x0001935b

00019170 <log_register>:
{
   19170:	b530      	push	{r4, r5, lr}
   19172:	b087      	sub	sp, #28
   19174:	460c      	mov	r4, r1
   19176:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
    assert(!log_written);
   1917a:	4d2f      	ldr	r5, [pc, #188]	; (19238 <log_register+0xc8>)
   1917c:	782d      	ldrb	r5, [r5, #0]
   1917e:	bb25      	cbnz	r5, 191ca <log_register+0x5a>
    if (level > LOG_LEVEL_MAX) {
   19180:	290f      	cmp	r1, #15
   19182:	d900      	bls.n	19186 <log_register+0x16>
        level = LOG_LEVEL_MAX;
   19184:	210f      	movs	r1, #15
    log->l_name = name;
   19186:	6020      	str	r0, [r4, #0]
    log->l_log = lh;
   19188:	6062      	str	r2, [r4, #4]
    log->l_arg = arg;
   1918a:	60a3      	str	r3, [r4, #8]
    log->l_level = level;
   1918c:	7621      	strb	r1, [r4, #24]
    log->l_append_cb = NULL;
   1918e:	2300      	movs	r3, #0
   19190:	6123      	str	r3, [r4, #16]
    log->l_max_entry_len = 0;
   19192:	8363      	strh	r3, [r4, #26]
    if (!log_registered(log)) {
   19194:	4620      	mov	r0, r4
   19196:	f7ff fe7f 	bl	18e98 <log_registered>
   1919a:	b938      	cbnz	r0, 191ac <log_register+0x3c>
        STAILQ_INSERT_TAIL(&g_log_list, log, l_next);
   1919c:	2300      	movs	r3, #0
   1919e:	60e3      	str	r3, [r4, #12]
   191a0:	4b26      	ldr	r3, [pc, #152]	; (1923c <log_register+0xcc>)
   191a2:	685a      	ldr	r2, [r3, #4]
   191a4:	6014      	str	r4, [r2, #0]
   191a6:	f104 020c 	add.w	r2, r4, #12
   191aa:	605a      	str	r2, [r3, #4]
    if (log->l_log->log_registered) {
   191ac:	6863      	ldr	r3, [r4, #4]
   191ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   191b0:	b11b      	cbz	r3, 191ba <log_register+0x4a>
        rc = log->l_log->log_registered(log);
   191b2:	4620      	mov	r0, r4
   191b4:	4798      	blx	r3
        if (rc) {
   191b6:	4605      	mov	r5, r0
   191b8:	b988      	cbnz	r0, 191de <log_register+0x6e>
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   191ba:	6863      	ldr	r3, [r4, #4]
   191bc:	681b      	ldr	r3, [r3, #0]
   191be:	2b02      	cmp	r3, #2
   191c0:	d024      	beq.n	1920c <log_register+0x9c>
    return (0);
   191c2:	2500      	movs	r5, #0
}
   191c4:	4628      	mov	r0, r5
   191c6:	b007      	add	sp, #28
   191c8:	bd30      	pop	{r4, r5, pc}
    assert(!log_written);
   191ca:	f7fb fa4b 	bl	14664 <hal_debugger_connected>
   191ce:	b100      	cbz	r0, 191d2 <log_register+0x62>
   191d0:	be01      	bkpt	0x0001
   191d2:	2300      	movs	r3, #0
   191d4:	461a      	mov	r2, r3
   191d6:	4619      	mov	r1, r3
   191d8:	4618      	mov	r0, r3
   191da:	f7fb fde3 	bl	14da4 <__assert_func>
            STAILQ_REMOVE(&g_log_list, log, log, l_next);
   191de:	4b17      	ldr	r3, [pc, #92]	; (1923c <log_register+0xcc>)
   191e0:	681b      	ldr	r3, [r3, #0]
   191e2:	42a3      	cmp	r3, r4
   191e4:	d00b      	beq.n	191fe <log_register+0x8e>
   191e6:	461a      	mov	r2, r3
   191e8:	68db      	ldr	r3, [r3, #12]
   191ea:	42a3      	cmp	r3, r4
   191ec:	d1fb      	bne.n	191e6 <log_register+0x76>
   191ee:	68db      	ldr	r3, [r3, #12]
   191f0:	60d3      	str	r3, [r2, #12]
   191f2:	2b00      	cmp	r3, #0
   191f4:	d1e6      	bne.n	191c4 <log_register+0x54>
   191f6:	320c      	adds	r2, #12
   191f8:	4b10      	ldr	r3, [pc, #64]	; (1923c <log_register+0xcc>)
   191fa:	605a      	str	r2, [r3, #4]
            return rc;
   191fc:	e7e2      	b.n	191c4 <log_register+0x54>
            STAILQ_REMOVE(&g_log_list, log, log, l_next);
   191fe:	68db      	ldr	r3, [r3, #12]
   19200:	4a0e      	ldr	r2, [pc, #56]	; (1923c <log_register+0xcc>)
   19202:	6013      	str	r3, [r2, #0]
   19204:	2b00      	cmp	r3, #0
   19206:	d1dd      	bne.n	191c4 <log_register+0x54>
   19208:	6052      	str	r2, [r2, #4]
   1920a:	e7db      	b.n	191c4 <log_register+0x54>
        rc = log_read_last_hdr(log, &hdr);
   1920c:	a901      	add	r1, sp, #4
   1920e:	4620      	mov	r0, r4
   19210:	f7ff ff90 	bl	19134 <log_read_last_hdr>
        if (rc == 0) {
   19214:	4605      	mov	r5, r0
   19216:	b108      	cbz	r0, 1921c <log_register+0xac>
    return (0);
   19218:	2500      	movs	r5, #0
   1921a:	e7d3      	b.n	191c4 <log_register+0x54>
            OS_ENTER_CRITICAL(sr);
   1921c:	f7fd fa86 	bl	1672c <os_arch_save_sr>
            if (hdr.ue_index >= g_log_info.li_next_index) {
   19220:	9b03      	ldr	r3, [sp, #12]
   19222:	4a07      	ldr	r2, [pc, #28]	; (19240 <log_register+0xd0>)
   19224:	6812      	ldr	r2, [r2, #0]
   19226:	4293      	cmp	r3, r2
   19228:	d302      	bcc.n	19230 <log_register+0xc0>
                g_log_info.li_next_index = hdr.ue_index + 1;
   1922a:	3301      	adds	r3, #1
   1922c:	4a04      	ldr	r2, [pc, #16]	; (19240 <log_register+0xd0>)
   1922e:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
   19230:	f7fd fa82 	bl	16738 <os_arch_restore_sr>
   19234:	e7c6      	b.n	191c4 <log_register+0x54>
   19236:	bf00      	nop
   19238:	100031ac 	.word	0x100031ac
   1923c:	1000025c 	.word	0x1000025c
   19240:	10003198 	.word	0x10003198

00019244 <log_walk_body>:
}

int
log_walk_body(struct log *log, log_walk_body_func_t walk_body_func,
              struct log_offset *log_offset)
{
   19244:	b510      	push	{r4, lr}
   19246:	b082      	sub	sp, #8
   19248:	4614      	mov	r4, r2
    struct log_walk_body_arg lwba = {
   1924a:	9100      	str	r1, [sp, #0]
        .fn = walk_body_func,
        .arg = log_offset->lo_arg,
   1924c:	6913      	ldr	r3, [r2, #16]
    struct log_walk_body_arg lwba = {
   1924e:	9301      	str	r3, [sp, #4]
    };
    int rc;

    log_offset->lo_arg = &lwba;
   19250:	f8c2 d010 	str.w	sp, [r2, #16]
    rc = log->l_log->log_walk(log, log_walk_body_fn, log_offset);
   19254:	6843      	ldr	r3, [r0, #4]
   19256:	69db      	ldr	r3, [r3, #28]
   19258:	4902      	ldr	r1, [pc, #8]	; (19264 <log_walk_body+0x20>)
   1925a:	4798      	blx	r3
    log_offset->lo_arg = lwba.arg;
   1925c:	9b01      	ldr	r3, [sp, #4]
   1925e:	6123      	str	r3, [r4, #16]

    return rc;
}
   19260:	b002      	add	sp, #8
   19262:	bd10      	pop	{r4, pc}
   19264:	000192c7 	.word	0x000192c7

00019268 <log_read>:
 * @return                      The number of bytes read; 0 on failure.
 */
int
log_read(struct log *log, const void *dptr, void *buf, uint16_t off,
         uint16_t len)
{
   19268:	b530      	push	{r4, r5, lr}
   1926a:	b083      	sub	sp, #12
    int rc;

    rc = log->l_log->log_read(log, dptr, buf, off, len);
   1926c:	6844      	ldr	r4, [r0, #4]
   1926e:	6864      	ldr	r4, [r4, #4]
   19270:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   19274:	9500      	str	r5, [sp, #0]
   19276:	47a0      	blx	r4

    return (rc);
}
   19278:	b003      	add	sp, #12
   1927a:	bd30      	pop	{r4, r5, pc}

0001927c <log_read_hdr>:

int
log_read_hdr(struct log *log, const void *dptr, struct log_entry_hdr *hdr)
{
   1927c:	b570      	push	{r4, r5, r6, lr}
   1927e:	b082      	sub	sp, #8
   19280:	4606      	mov	r6, r0
   19282:	460d      	mov	r5, r1
   19284:	4614      	mov	r4, r2
    int bytes_read;

    bytes_read = log_read(log, dptr, hdr, 0, LOG_BASE_ENTRY_HDR_SIZE);
   19286:	230f      	movs	r3, #15
   19288:	9300      	str	r3, [sp, #0]
   1928a:	2300      	movs	r3, #0
   1928c:	f7ff ffec 	bl	19268 <log_read>
    if (bytes_read != LOG_BASE_ENTRY_HDR_SIZE) {
   19290:	280f      	cmp	r0, #15
   19292:	d112      	bne.n	192ba <log_read_hdr+0x3e>
        return SYS_EIO;
    }

    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   19294:	7ba3      	ldrb	r3, [r4, #14]
   19296:	f013 0f10 	tst.w	r3, #16
   1929a:	d102      	bne.n	192a2 <log_read_hdr+0x26>
        if (bytes_read != LOG_IMG_HASHLEN) {
            return SYS_EIO;
        }
    }

    return 0;
   1929c:	2000      	movs	r0, #0
}
   1929e:	b002      	add	sp, #8
   192a0:	bd70      	pop	{r4, r5, r6, pc}
        bytes_read = log_read(log, dptr, hdr->ue_imghash,
   192a2:	2304      	movs	r3, #4
   192a4:	9300      	str	r3, [sp, #0]
   192a6:	230f      	movs	r3, #15
   192a8:	18e2      	adds	r2, r4, r3
   192aa:	4629      	mov	r1, r5
   192ac:	4630      	mov	r0, r6
   192ae:	f7ff ffdb 	bl	19268 <log_read>
        if (bytes_read != LOG_IMG_HASHLEN) {
   192b2:	2804      	cmp	r0, #4
   192b4:	d104      	bne.n	192c0 <log_read_hdr+0x44>
    return 0;
   192b6:	2000      	movs	r0, #0
   192b8:	e7f1      	b.n	1929e <log_read_hdr+0x22>
        return SYS_EIO;
   192ba:	f06f 0004 	mvn.w	r0, #4
   192be:	e7ee      	b.n	1929e <log_read_hdr+0x22>
            return SYS_EIO;
   192c0:	f06f 0004 	mvn.w	r0, #4
   192c4:	e7eb      	b.n	1929e <log_read_hdr+0x22>

000192c6 <log_walk_body_fn>:
{
   192c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   192ca:	b088      	sub	sp, #32
   192cc:	4607      	mov	r7, r0
   192ce:	460c      	mov	r4, r1
   192d0:	4615      	mov	r5, r2
   192d2:	4698      	mov	r8, r3
    lwba = log_offset->lo_arg;
   192d4:	690e      	ldr	r6, [r1, #16]
    rc = log_read_hdr(log, dptr, &ueh);
   192d6:	aa03      	add	r2, sp, #12
   192d8:	4629      	mov	r1, r5
   192da:	f7ff ffcf 	bl	1927c <log_read_hdr>
    if (rc != 0) {
   192de:	b9a0      	cbnz	r0, 1930a <log_walk_body_fn+0x44>
    if (log_offset->lo_index <= ueh.ue_index) {
   192e0:	68a2      	ldr	r2, [r4, #8]
   192e2:	9b05      	ldr	r3, [sp, #20]
   192e4:	429a      	cmp	r2, r3
   192e6:	d810      	bhi.n	1930a <log_walk_body_fn+0x44>
        len -= log_hdr_len(&ueh);
   192e8:	a803      	add	r0, sp, #12
   192ea:	f7ff fee9 	bl	190c0 <log_hdr_len>
   192ee:	eba8 0300 	sub.w	r3, r8, r0
   192f2:	b29b      	uxth	r3, r3
        log_offset->lo_arg = lwba->arg;
   192f4:	6872      	ldr	r2, [r6, #4]
   192f6:	6122      	str	r2, [r4, #16]
        rc = lwba->fn(log, log_offset, &ueh, dptr, len);
   192f8:	f8d6 8000 	ldr.w	r8, [r6]
   192fc:	9300      	str	r3, [sp, #0]
   192fe:	462b      	mov	r3, r5
   19300:	aa03      	add	r2, sp, #12
   19302:	4621      	mov	r1, r4
   19304:	4638      	mov	r0, r7
   19306:	47c0      	blx	r8
        log_offset->lo_arg = lwba;
   19308:	6126      	str	r6, [r4, #16]
}
   1930a:	b008      	add	sp, #32
   1930c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019310 <log_read_body>:

int
log_read_body(struct log *log, const void *dptr, void *buf, uint16_t off,
              uint16_t len)
{
   19310:	b5f0      	push	{r4, r5, r6, r7, lr}
   19312:	b089      	sub	sp, #36	; 0x24
   19314:	4604      	mov	r4, r0
   19316:	460f      	mov	r7, r1
   19318:	4616      	mov	r6, r2
   1931a:	461d      	mov	r5, r3
    int rc;
    struct log_entry_hdr hdr;

    rc = log_read_hdr(log, dptr, &hdr);
   1931c:	aa03      	add	r2, sp, #12
   1931e:	f7ff ffad 	bl	1927c <log_read_hdr>
    if (rc) {
   19322:	b108      	cbz	r0, 19328 <log_read_body+0x18>
        return rc;
    }

    return log_read(log, dptr, buf, log_hdr_len(&hdr) + off, len);
}
   19324:	b009      	add	sp, #36	; 0x24
   19326:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return log_read(log, dptr, buf, log_hdr_len(&hdr) + off, len);
   19328:	a803      	add	r0, sp, #12
   1932a:	f7ff fec9 	bl	190c0 <log_hdr_len>
   1932e:	1943      	adds	r3, r0, r5
   19330:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   19334:	9200      	str	r2, [sp, #0]
   19336:	b29b      	uxth	r3, r3
   19338:	4632      	mov	r2, r6
   1933a:	4639      	mov	r1, r7
   1933c:	4620      	mov	r0, r4
   1933e:	f7ff ff93 	bl	19268 <log_read>
   19342:	e7ef      	b.n	19324 <log_read_body+0x14>

00019344 <log_flush>:
    return log_read_mbuf(log, dptr, om, log_hdr_len(&hdr) + off, len);
}

int
log_flush(struct log *log)
{
   19344:	b508      	push	{r3, lr}
    int rc;

    rc = log->l_log->log_flush(log);
   19346:	6843      	ldr	r3, [r0, #4]
   19348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1934a:	4798      	blx	r3
    }

    return (0);
err:
    return (rc);
}
   1934c:	bd08      	pop	{r3, pc}

0001934e <log_fill_current_img_hash>:
    hdr->ue_flags |= LOG_FLAGS_IMG_HASH;

    /* We have to account for LOG_IMG_HASHLEN bytes of hash */
    return imgr_get_current_hash(hdr->ue_imghash, LOG_IMG_HASHLEN);
#endif
    memset(hdr->ue_imghash, 0, LOG_IMG_HASHLEN);
   1934e:	2300      	movs	r3, #0
   19350:	f8c0 300f 	str.w	r3, [r0, #15]

    return SYS_ENOTSUP;
}
   19354:	f06f 000b 	mvn.w	r0, #11
   19358:	4770      	bx	lr

0001935a <log_read_hdr_walk>:
{
   1935a:	b510      	push	{r4, lr}
   1935c:	b082      	sub	sp, #8
   1935e:	460b      	mov	r3, r1
   19360:	4611      	mov	r1, r2
    arg = log_offset->lo_arg;
   19362:	691c      	ldr	r4, [r3, #16]
    rc = log_read(log, dptr, arg->hdr, 0, LOG_BASE_ENTRY_HDR_SIZE);
   19364:	6822      	ldr	r2, [r4, #0]
   19366:	230f      	movs	r3, #15
   19368:	9300      	str	r3, [sp, #0]
   1936a:	2300      	movs	r3, #0
   1936c:	f7ff ff7c 	bl	19268 <log_read>
    if (rc >= LOG_BASE_ENTRY_HDR_SIZE) {
   19370:	280e      	cmp	r0, #14
   19372:	dd01      	ble.n	19378 <log_read_hdr_walk+0x1e>
        arg->read_success = 1;
   19374:	2301      	movs	r3, #1
   19376:	6063      	str	r3, [r4, #4]
    if (arg->hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   19378:	6820      	ldr	r0, [r4, #0]
   1937a:	7b83      	ldrb	r3, [r0, #14]
   1937c:	f013 0f10 	tst.w	r3, #16
   19380:	d102      	bne.n	19388 <log_read_hdr_walk+0x2e>
}
   19382:	2001      	movs	r0, #1
   19384:	b002      	add	sp, #8
   19386:	bd10      	pop	{r4, pc}
        rc = log_fill_current_img_hash(arg->hdr);
   19388:	f7ff ffe1 	bl	1934e <log_fill_current_img_hash>
        if (!rc || rc == SYS_ENOTSUP) {
   1938c:	b110      	cbz	r0, 19394 <log_read_hdr_walk+0x3a>
   1938e:	f110 0f0c 	cmn.w	r0, #12
   19392:	d1f6      	bne.n	19382 <log_read_hdr_walk+0x28>
            arg->read_success = 1;
   19394:	2301      	movs	r3, #1
   19396:	6063      	str	r3, [r4, #4]
   19398:	e7f3      	b.n	19382 <log_read_hdr_walk+0x28>

0001939a <log_console_read>:
log_console_read(struct log *log, const void *dptr, void *buf, uint16_t offset,
        uint16_t len)
{
    /* You don't read console, console read you */
    return (OS_EINVAL);
}
   1939a:	2002      	movs	r0, #2
   1939c:	4770      	bx	lr

0001939e <log_console_walk>:
log_console_walk(struct log *log, log_walk_func_t walk_func,
        struct log_offset *log_offset)
{
    /* You don't walk console, console walk you. */
    return (OS_EINVAL);
}
   1939e:	2002      	movs	r0, #2
   193a0:	4770      	bx	lr

000193a2 <log_console_flush>:
static int
log_console_flush(struct log *log)
{
    /* You don't flush console, console flush you. */
    return (OS_EINVAL);
}
   193a2:	2002      	movs	r0, #2
   193a4:	4770      	bx	lr
	...

000193a8 <log_console_print_hdr>:
{
   193a8:	b510      	push	{r4, lr}
   193aa:	b082      	sub	sp, #8
   193ac:	4604      	mov	r4, r0
                   hdr->ue_ts, hdr->ue_module, hdr->ue_level);
   193ae:	7b03      	ldrb	r3, [r0, #12]
   193b0:	7b42      	ldrb	r2, [r0, #13]
    console_printf("[ts=%lluus, mod=%u level=%u ",
   193b2:	9201      	str	r2, [sp, #4]
   193b4:	9300      	str	r3, [sp, #0]
   193b6:	6802      	ldr	r2, [r0, #0]
   193b8:	6843      	ldr	r3, [r0, #4]
   193ba:	480a      	ldr	r0, [pc, #40]	; (193e4 <log_console_print_hdr+0x3c>)
   193bc:	f7ff f960 	bl	18680 <console_printf>
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   193c0:	7ba3      	ldrb	r3, [r4, #14]
   193c2:	f013 0f10 	tst.w	r3, #16
   193c6:	d104      	bne.n	193d2 <log_console_print_hdr+0x2a>
    console_printf("]");
   193c8:	4807      	ldr	r0, [pc, #28]	; (193e8 <log_console_print_hdr+0x40>)
   193ca:	f7ff f959 	bl	18680 <console_printf>
}
   193ce:	b002      	add	sp, #8
   193d0:	bd10      	pop	{r4, pc}
                       hdr->ue_imghash[2], hdr->ue_imghash[3]);
   193d2:	7ca3      	ldrb	r3, [r4, #18]
        console_printf("ih=0x%x%x%x%x", hdr->ue_imghash[0], hdr->ue_imghash[1],
   193d4:	9300      	str	r3, [sp, #0]
   193d6:	7c63      	ldrb	r3, [r4, #17]
   193d8:	7c22      	ldrb	r2, [r4, #16]
   193da:	7be1      	ldrb	r1, [r4, #15]
   193dc:	4803      	ldr	r0, [pc, #12]	; (193ec <log_console_print_hdr+0x44>)
   193de:	f7ff f94f 	bl	18680 <console_printf>
   193e2:	e7f1      	b.n	193c8 <log_console_print_hdr+0x20>
   193e4:	00030800 	.word	0x00030800
   193e8:	00030830 	.word	0x00030830
   193ec:	00030820 	.word	0x00030820

000193f0 <log_console_dump_cbor_entry>:
{
   193f0:	b530      	push	{r4, r5, lr}
   193f2:	b095      	sub	sp, #84	; 0x54
   193f4:	460a      	mov	r2, r1
    cbor_buf_reader_init(&cbor_buf_reader, dptr, len);
   193f6:	4601      	mov	r1, r0
   193f8:	a805      	add	r0, sp, #20
   193fa:	f00f fbbf 	bl	28b7c <cbor_buf_reader_init>
    cbor_parser_init(&cbor_buf_reader.r, 0, &cbor_parser, &cbor_value);
   193fe:	ad0d      	add	r5, sp, #52	; 0x34
   19400:	462b      	mov	r3, r5
   19402:	aa11      	add	r2, sp, #68	; 0x44
   19404:	2100      	movs	r1, #0
   19406:	a805      	add	r0, sp, #20
   19408:	f010 f8ad 	bl	29566 <cbor_parser_init>

/* Human-readable (dump) API */
CBOR_API CborError cbor_value_to_pretty_advance(FILE *out, CborValue *value);
CBOR_INLINE_API CborError cbor_value_to_pretty(FILE *out, const CborValue *value)
{
    CborValue copy = *value;
   1940c:	ac01      	add	r4, sp, #4
   1940e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   19412:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return cbor_value_to_pretty_advance(out, &copy);
   19416:	4621      	mov	r1, r4
   19418:	4b05      	ldr	r3, [pc, #20]	; (19430 <log_console_dump_cbor_entry+0x40>)
   1941a:	6818      	ldr	r0, [r3, #0]
   1941c:	f010 fd70 	bl	29f00 <cbor_value_to_pretty_advance>
    console_write("\n", 1);
   19420:	2101      	movs	r1, #1
   19422:	4804      	ldr	r0, [pc, #16]	; (19434 <log_console_dump_cbor_entry+0x44>)
   19424:	f7fe ffd6 	bl	183d4 <console_write>
}
   19428:	2000      	movs	r0, #0
   1942a:	b015      	add	sp, #84	; 0x54
   1942c:	bd30      	pop	{r4, r5, pc}
   1942e:	bf00      	nop
   19430:	00033ad0 	.word	0x00033ad0
   19434:	000311a4 	.word	0x000311a4

00019438 <log_console_append_body>:
{
   19438:	b570      	push	{r4, r5, r6, lr}
   1943a:	460c      	mov	r4, r1
   1943c:	4616      	mov	r6, r2
   1943e:	461d      	mov	r5, r3
    if (!console_is_init()) {
   19440:	f7ff f8cc 	bl	185dc <console_is_init>
   19444:	b158      	cbz	r0, 1945e <log_console_append_body+0x26>
    if (!console_is_midline) {
   19446:	4b0b      	ldr	r3, [pc, #44]	; (19474 <log_console_append_body+0x3c>)
   19448:	681b      	ldr	r3, [r3, #0]
   1944a:	b153      	cbz	r3, 19462 <log_console_append_body+0x2a>
    if (hdr->ue_etype != LOG_ETYPE_CBOR) {
   1944c:	7ba3      	ldrb	r3, [r4, #14]
   1944e:	f003 030f 	and.w	r3, r3, #15
   19452:	2b01      	cmp	r3, #1
   19454:	d009      	beq.n	1946a <log_console_append_body+0x32>
        console_write(body, body_len);
   19456:	4629      	mov	r1, r5
   19458:	4630      	mov	r0, r6
   1945a:	f7fe ffbb 	bl	183d4 <console_write>
}
   1945e:	2000      	movs	r0, #0
   19460:	bd70      	pop	{r4, r5, r6, pc}
        log_console_print_hdr(hdr);
   19462:	4620      	mov	r0, r4
   19464:	f7ff ffa0 	bl	193a8 <log_console_print_hdr>
   19468:	e7f0      	b.n	1944c <log_console_append_body+0x14>
        log_console_dump_cbor_entry(body, body_len);
   1946a:	b2a9      	uxth	r1, r5
   1946c:	4630      	mov	r0, r6
   1946e:	f7ff ffbf 	bl	193f0 <log_console_dump_cbor_entry>
   19472:	e7f4      	b.n	1945e <log_console_append_body+0x26>
   19474:	1000305c 	.word	0x1000305c

00019478 <log_console_append>:
{
   19478:	b570      	push	{r4, r5, r6, lr}
   1947a:	4605      	mov	r5, r0
   1947c:	460c      	mov	r4, r1
   1947e:	4616      	mov	r6, r2
    hdr_len = log_hdr_len(buf);
   19480:	4608      	mov	r0, r1
   19482:	f7ff fe1d 	bl	190c0 <log_hdr_len>
    return log_console_append_body(log, buf, (uint8_t *)buf + hdr_len,
   19486:	1a33      	subs	r3, r6, r0
   19488:	1822      	adds	r2, r4, r0
   1948a:	4621      	mov	r1, r4
   1948c:	4628      	mov	r0, r5
   1948e:	f7ff ffd3 	bl	19438 <log_console_append_body>
}
   19492:	bd70      	pop	{r4, r5, r6, pc}

00019494 <log_console_get>:
}
   19494:	4800      	ldr	r0, [pc, #0]	; (19498 <log_console_get+0x4>)
   19496:	4770      	bx	lr
   19498:	100031b0 	.word	0x100031b0

0001949c <log_console_init>:
    .log_flush = log_console_flush,
};

void
log_console_init(void)
{
   1949c:	b510      	push	{r4, lr}
   1949e:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   194a0:	4b11      	ldr	r3, [pc, #68]	; (194e8 <log_console_init+0x4c>)
   194a2:	781b      	ldrb	r3, [r3, #0]
   194a4:	b14b      	cbz	r3, 194ba <log_console_init+0x1e>

    rc = log_register("console", &log_console, &log_console_handler, NULL,
   194a6:	2300      	movs	r3, #0
   194a8:	9300      	str	r3, [sp, #0]
   194aa:	4a10      	ldr	r2, [pc, #64]	; (194ec <log_console_init+0x50>)
   194ac:	4910      	ldr	r1, [pc, #64]	; (194f0 <log_console_init+0x54>)
   194ae:	4811      	ldr	r0, [pc, #68]	; (194f4 <log_console_init+0x58>)
   194b0:	f7ff fe5e 	bl	19170 <log_register>
                      MYNEWT_VAL(LOG_LEVEL));
    SYSINIT_PANIC_ASSERT(rc == 0);
   194b4:	b958      	cbnz	r0, 194ce <log_console_init+0x32>
}
   194b6:	b002      	add	sp, #8
   194b8:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   194ba:	f7fb f8d3 	bl	14664 <hal_debugger_connected>
   194be:	b100      	cbz	r0, 194c2 <log_console_init+0x26>
   194c0:	be01      	bkpt	0x0001
   194c2:	2300      	movs	r3, #0
   194c4:	461a      	mov	r2, r3
   194c6:	4619      	mov	r1, r3
   194c8:	4618      	mov	r0, r3
   194ca:	f7fb fc6b 	bl	14da4 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   194ce:	f7fb f8c9 	bl	14664 <hal_debugger_connected>
   194d2:	b100      	cbz	r0, 194d6 <log_console_init+0x3a>
   194d4:	be01      	bkpt	0x0001
   194d6:	2000      	movs	r0, #0
   194d8:	9000      	str	r0, [sp, #0]
   194da:	4b07      	ldr	r3, [pc, #28]	; (194f8 <log_console_init+0x5c>)
   194dc:	681c      	ldr	r4, [r3, #0]
   194de:	4603      	mov	r3, r0
   194e0:	4602      	mov	r2, r0
   194e2:	4601      	mov	r1, r0
   194e4:	47a0      	blx	r4
}
   194e6:	e7e6      	b.n	194b6 <log_console_init+0x1a>
   194e8:	10003404 	.word	0x10003404
   194ec:	0003083c 	.word	0x0003083c
   194f0:	100031b0 	.word	0x100031b0
   194f4:	00030834 	.word	0x00030834
   194f8:	1000028c 	.word	0x1000028c

000194fc <log_level_get>:
uint8_t
log_level_get(uint8_t module)
{
    uint8_t byte;

    byte = log_level_map[module / 2];
   194fc:	0843      	lsrs	r3, r0, #1
   194fe:	4a05      	ldr	r2, [pc, #20]	; (19514 <log_level_get+0x18>)
   19500:	5cd3      	ldrb	r3, [r2, r3]
    if (module % 2 == 0) {
   19502:	f010 0f01 	tst.w	r0, #1
   19506:	d102      	bne.n	1950e <log_level_get+0x12>
        return byte & 0x0f;
   19508:	f003 000f 	and.w	r0, r3, #15
   1950c:	4770      	bx	lr
    } else {
        return byte >> 4;
   1950e:	0918      	lsrs	r0, r3, #4
    }
}
   19510:	4770      	bx	lr
   19512:	bf00      	nop
   19514:	100031cc 	.word	0x100031cc

00019518 <modlog_find_by_module>:
    return cur;
}

static struct modlog_mapping *
modlog_find_by_module(uint8_t module, struct modlog_mapping **out_prev)
{
   19518:	b410      	push	{r4}
   1951a:	4602      	mov	r2, r0
    struct modlog_mapping *prev;
    struct modlog_mapping *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1951c:	4b07      	ldr	r3, [pc, #28]	; (1953c <modlog_find_by_module+0x24>)
   1951e:	6818      	ldr	r0, [r3, #0]
    prev = NULL;
   19520:	2400      	movs	r4, #0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   19522:	e001      	b.n	19528 <modlog_find_by_module+0x10>
        if (cur->desc.module > module) {
            cur = NULL;
            break;
        }

        prev = cur;
   19524:	4604      	mov	r4, r0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   19526:	6800      	ldr	r0, [r0, #0]
   19528:	b120      	cbz	r0, 19534 <modlog_find_by_module+0x1c>
        if (cur->desc.module == module) {
   1952a:	7a43      	ldrb	r3, [r0, #9]
   1952c:	4293      	cmp	r3, r2
   1952e:	d001      	beq.n	19534 <modlog_find_by_module+0x1c>
        if (cur->desc.module > module) {
   19530:	d9f8      	bls.n	19524 <modlog_find_by_module+0xc>
            cur = NULL;
   19532:	2000      	movs	r0, #0
    }

    if (out_prev != NULL) {
   19534:	b101      	cbz	r1, 19538 <modlog_find_by_module+0x20>
        *out_prev = prev;
   19536:	600c      	str	r4, [r1, #0]
    }

    return cur;
}
   19538:	bc10      	pop	{r4}
   1953a:	4770      	bx	lr
   1953c:	1000332c 	.word	0x1000332c

00019540 <modlog_insert>:

static void
modlog_insert(struct modlog_mapping *mm)
{
   19540:	b510      	push	{r4, lr}
   19542:	b082      	sub	sp, #8
   19544:	4604      	mov	r4, r0
    struct modlog_mapping *prev;

    modlog_find_by_module(mm->desc.module, &prev);
   19546:	a901      	add	r1, sp, #4
   19548:	7a40      	ldrb	r0, [r0, #9]
   1954a:	f7ff ffe5 	bl	19518 <modlog_find_by_module>
    if (prev == NULL) {
   1954e:	9b01      	ldr	r3, [sp, #4]
   19550:	b143      	cbz	r3, 19564 <modlog_insert+0x24>
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
    } else {
        SLIST_INSERT_AFTER(prev, mm, next);
   19552:	681b      	ldr	r3, [r3, #0]
   19554:	6023      	str	r3, [r4, #0]
   19556:	9b01      	ldr	r3, [sp, #4]
   19558:	601c      	str	r4, [r3, #0]
    }

    if (mm->desc.module == MODLOG_MODULE_DFLT) {
   1955a:	7a63      	ldrb	r3, [r4, #9]
   1955c:	2bff      	cmp	r3, #255	; 0xff
   1955e:	d006      	beq.n	1956e <modlog_insert+0x2e>
        modlog_first_dflt = mm;
    }
}
   19560:	b002      	add	sp, #8
   19562:	bd10      	pop	{r4, pc}
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
   19564:	4b03      	ldr	r3, [pc, #12]	; (19574 <modlog_insert+0x34>)
   19566:	681a      	ldr	r2, [r3, #0]
   19568:	6022      	str	r2, [r4, #0]
   1956a:	601c      	str	r4, [r3, #0]
   1956c:	e7f5      	b.n	1955a <modlog_insert+0x1a>
        modlog_first_dflt = mm;
   1956e:	4b02      	ldr	r3, [pc, #8]	; (19578 <modlog_insert+0x38>)
   19570:	601c      	str	r4, [r3, #0]
}
   19572:	e7f5      	b.n	19560 <modlog_insert+0x20>
   19574:	1000332c 	.word	0x1000332c
   19578:	1000324c 	.word	0x1000324c

0001957c <modlog_alloc>:
{
   1957c:	b508      	push	{r3, lr}
    mm = os_memblock_get(&modlog_mapping_pool);
   1957e:	4805      	ldr	r0, [pc, #20]	; (19594 <modlog_alloc+0x18>)
   19580:	f7fc fc55 	bl	15e2e <os_memblock_get>
    if (mm != NULL) {
   19584:	4603      	mov	r3, r0
   19586:	b118      	cbz	r0, 19590 <modlog_alloc+0x14>
        *mm = (struct modlog_mapping) { 0 };
   19588:	2200      	movs	r2, #0
   1958a:	6002      	str	r2, [r0, #0]
   1958c:	6042      	str	r2, [r0, #4]
   1958e:	6082      	str	r2, [r0, #8]
}
   19590:	4618      	mov	r0, r3
   19592:	bd08      	pop	{r3, pc}
   19594:	10003310 	.word	0x10003310

00019598 <modlog_infer_handle>:
{
   19598:	b508      	push	{r3, lr}
    off = (uintptr_t)mm - (uintptr_t)modlog_mapping_buf;
   1959a:	4a13      	ldr	r2, [pc, #76]	; (195e8 <modlog_infer_handle+0x50>)
   1959c:	1a82      	subs	r2, r0, r2
    idx = off / elem_sz;
   1959e:	4813      	ldr	r0, [pc, #76]	; (195ec <modlog_infer_handle+0x54>)
   195a0:	fba0 3002 	umull	r3, r0, r0, r2
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   195a4:	2abf      	cmp	r2, #191	; 0xbf
   195a6:	d80b      	bhi.n	195c0 <modlog_infer_handle+0x28>
   195a8:	08c0      	lsrs	r0, r0, #3
    assert(off % elem_sz == 0);
   195aa:	4b10      	ldr	r3, [pc, #64]	; (195ec <modlog_infer_handle+0x54>)
   195ac:	fba3 1302 	umull	r1, r3, r3, r2
   195b0:	08db      	lsrs	r3, r3, #3
   195b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   195b6:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   195ba:	d10b      	bne.n	195d4 <modlog_infer_handle+0x3c>
}
   195bc:	b2c0      	uxtb	r0, r0
   195be:	bd08      	pop	{r3, pc}
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   195c0:	f7fb f850 	bl	14664 <hal_debugger_connected>
   195c4:	b100      	cbz	r0, 195c8 <modlog_infer_handle+0x30>
   195c6:	be01      	bkpt	0x0001
   195c8:	2300      	movs	r3, #0
   195ca:	461a      	mov	r2, r3
   195cc:	4619      	mov	r1, r3
   195ce:	4618      	mov	r0, r3
   195d0:	f7fb fbe8 	bl	14da4 <__assert_func>
    assert(off % elem_sz == 0);
   195d4:	f7fb f846 	bl	14664 <hal_debugger_connected>
   195d8:	b100      	cbz	r0, 195dc <modlog_infer_handle+0x44>
   195da:	be01      	bkpt	0x0001
   195dc:	2300      	movs	r3, #0
   195de:	461a      	mov	r2, r3
   195e0:	4619      	mov	r1, r3
   195e2:	4618      	mov	r0, r3
   195e4:	f7fb fbde 	bl	14da4 <__assert_func>
   195e8:	10003250 	.word	0x10003250
   195ec:	aaaaaaab 	.word	0xaaaaaaab

000195f0 <modlog_register_no_lock>:
modlog_register_no_lock(uint8_t module, struct log *log, uint8_t min_level,
                        uint8_t *out_handle)
{
    struct modlog_mapping *mm;

    if (log == NULL) {
   195f0:	b1c9      	cbz	r1, 19626 <modlog_register_no_lock+0x36>
{
   195f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   195f6:	4607      	mov	r7, r0
   195f8:	4616      	mov	r6, r2
   195fa:	461d      	mov	r5, r3
   195fc:	4688      	mov	r8, r1
        return SYS_EINVAL;
    }

    mm = modlog_alloc();
   195fe:	f7ff ffbd 	bl	1957c <modlog_alloc>
    if (mm == NULL) {
   19602:	4604      	mov	r4, r0
   19604:	b190      	cbz	r0, 1962c <modlog_register_no_lock+0x3c>
        return SYS_ENOMEM;
    }

    mm->desc = (struct modlog_desc) {
        .log = log,
        .handle = modlog_infer_handle(mm),
   19606:	f7ff ffc7 	bl	19598 <modlog_infer_handle>
    mm->desc = (struct modlog_desc) {
   1960a:	f8c4 8004 	str.w	r8, [r4, #4]
   1960e:	7220      	strb	r0, [r4, #8]
   19610:	7267      	strb	r7, [r4, #9]
   19612:	72a6      	strb	r6, [r4, #10]
        .module = module,
        .min_level = min_level,
    };

    modlog_insert(mm);
   19614:	4620      	mov	r0, r4
   19616:	f7ff ff93 	bl	19540 <modlog_insert>

    if (out_handle != NULL) {
   1961a:	b155      	cbz	r5, 19632 <modlog_register_no_lock+0x42>
        *out_handle = mm->desc.handle;
   1961c:	7a23      	ldrb	r3, [r4, #8]
   1961e:	702b      	strb	r3, [r5, #0]
    }

    return 0;
   19620:	2000      	movs	r0, #0
}
   19622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   19626:	f06f 0001 	mvn.w	r0, #1
}
   1962a:	4770      	bx	lr
        return SYS_ENOMEM;
   1962c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19630:	e7f7      	b.n	19622 <modlog_register_no_lock+0x32>
    return 0;
   19632:	2000      	movs	r0, #0
   19634:	e7f5      	b.n	19622 <modlog_register_no_lock+0x32>

00019636 <modlog_append_one>:
}

static int
modlog_append_one(struct modlog_mapping *mm, uint8_t module, uint8_t level,
                  uint8_t etype, void *data, uint16_t len)
{
   19636:	b510      	push	{r4, lr}
   19638:	b082      	sub	sp, #8
    int rc;

    if (level >= mm->desc.min_level) {
   1963a:	7a84      	ldrb	r4, [r0, #10]
   1963c:	4294      	cmp	r4, r2
   1963e:	d902      	bls.n	19646 <modlog_append_one+0x10>
    } else {
        LOG_STATS_INC(mm->desc.log, writes);
        LOG_STATS_INC(mm->desc.log, drops);
    }

    return 0;
   19640:	2000      	movs	r0, #0
}
   19642:	b002      	add	sp, #8
   19644:	bd10      	pop	{r4, pc}
        rc = log_append_body(mm->desc.log, module, level, etype, data, len);
   19646:	f8bd 4014 	ldrh.w	r4, [sp, #20]
   1964a:	9401      	str	r4, [sp, #4]
   1964c:	9c04      	ldr	r4, [sp, #16]
   1964e:	9400      	str	r4, [sp, #0]
   19650:	6840      	ldr	r0, [r0, #4]
   19652:	f7ff fd3d 	bl	190d0 <log_append_body>
        if (rc != 0) {
   19656:	2800      	cmp	r0, #0
   19658:	d0f3      	beq.n	19642 <modlog_append_one+0xc>
            return SYS_EIO;
   1965a:	f06f 0004 	mvn.w	r0, #4
   1965e:	e7f0      	b.n	19642 <modlog_append_one+0xc>

00019660 <modlog_append_no_lock>:

static int
modlog_append_no_lock(uint8_t module, uint8_t level, uint8_t etype,
                      void *data, uint16_t len)
{
   19660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19664:	b083      	sub	sp, #12
   19666:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
    struct modlog_mapping *mm;
    int rc;

    if (module == MODLOG_MODULE_DFLT) {
   1966a:	28ff      	cmp	r0, #255	; 0xff
   1966c:	d030      	beq.n	196d0 <modlog_append_no_lock+0x70>
   1966e:	4605      	mov	r5, r0
   19670:	460e      	mov	r6, r1
   19672:	4617      	mov	r7, r2
   19674:	4698      	mov	r8, r3
        return SYS_EINVAL;
    }

    mm = modlog_find_by_module(module, NULL);
   19676:	2100      	movs	r1, #0
   19678:	f7ff ff4e 	bl	19518 <modlog_find_by_module>
    if (mm != NULL) {
   1967c:	4604      	mov	r4, r0
   1967e:	b988      	cbnz	r0, 196a4 <modlog_append_no_lock+0x44>
        }
        return 0;
    }

    /* No mappings match the specified module; write to the default set. */
    for (mm = modlog_first_dflt;
   19680:	4b17      	ldr	r3, [pc, #92]	; (196e0 <modlog_append_no_lock+0x80>)
   19682:	681c      	ldr	r4, [r3, #0]
   19684:	b314      	cbz	r4, 196cc <modlog_append_no_lock+0x6c>
         mm != NULL;
         mm = SLIST_NEXT(mm, next)) {

        rc = modlog_append_one(mm, module, level, etype, data, len);
   19686:	f8cd 9004 	str.w	r9, [sp, #4]
   1968a:	f8cd 8000 	str.w	r8, [sp]
   1968e:	463b      	mov	r3, r7
   19690:	4632      	mov	r2, r6
   19692:	4629      	mov	r1, r5
   19694:	4620      	mov	r0, r4
   19696:	f7ff ffce 	bl	19636 <modlog_append_one>
        if (rc != 0) {
   1969a:	4603      	mov	r3, r0
   1969c:	b9e0      	cbnz	r0, 196d8 <modlog_append_no_lock+0x78>
         mm = SLIST_NEXT(mm, next)) {
   1969e:	6824      	ldr	r4, [r4, #0]
   196a0:	e7f0      	b.n	19684 <modlog_append_no_lock+0x24>
            mm = SLIST_NEXT(mm, next);
   196a2:	6824      	ldr	r4, [r4, #0]
        while (mm != NULL && mm->desc.module == module) {
   196a4:	b1bc      	cbz	r4, 196d6 <modlog_append_no_lock+0x76>
   196a6:	7a60      	ldrb	r0, [r4, #9]
   196a8:	42a8      	cmp	r0, r5
   196aa:	d10d      	bne.n	196c8 <modlog_append_no_lock+0x68>
            rc = modlog_append_one(mm, module, level, etype, data, len);
   196ac:	f8cd 9004 	str.w	r9, [sp, #4]
   196b0:	f8cd 8000 	str.w	r8, [sp]
   196b4:	463b      	mov	r3, r7
   196b6:	4632      	mov	r2, r6
   196b8:	4629      	mov	r1, r5
   196ba:	4620      	mov	r0, r4
   196bc:	f7ff ffbb 	bl	19636 <modlog_append_one>
            if (rc != 0) {
   196c0:	4603      	mov	r3, r0
   196c2:	2800      	cmp	r0, #0
   196c4:	d0ed      	beq.n	196a2 <modlog_append_no_lock+0x42>
   196c6:	e007      	b.n	196d8 <modlog_append_no_lock+0x78>
        return 0;
   196c8:	2300      	movs	r3, #0
   196ca:	e005      	b.n	196d8 <modlog_append_no_lock+0x78>
            return rc;
        }
    }

    return 0;
   196cc:	2300      	movs	r3, #0
   196ce:	e003      	b.n	196d8 <modlog_append_no_lock+0x78>
        return SYS_EINVAL;
   196d0:	f06f 0301 	mvn.w	r3, #1
   196d4:	e000      	b.n	196d8 <modlog_append_no_lock+0x78>
        return 0;
   196d6:	2300      	movs	r3, #0
}
   196d8:	4618      	mov	r0, r3
   196da:	b003      	add	sp, #12
   196dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   196e0:	1000324c 	.word	0x1000324c

000196e4 <modlog_register>:
}

int
modlog_register(uint8_t module, struct log *log, uint8_t min_level,
                uint8_t *out_handle)
{
   196e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   196e8:	4604      	mov	r4, r0
   196ea:	460d      	mov	r5, r1
   196ec:	4616      	mov	r6, r2
   196ee:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_write(&modlog_rwl);
   196f0:	f8df 8020 	ldr.w	r8, [pc, #32]	; 19714 <modlog_register+0x30>
   196f4:	4640      	mov	r0, r8
   196f6:	f000 fe80 	bl	1a3fa <rwlock_acquire_write>
    rc = modlog_register_no_lock(module, log, min_level, out_handle);
   196fa:	463b      	mov	r3, r7
   196fc:	4632      	mov	r2, r6
   196fe:	4629      	mov	r1, r5
   19700:	4620      	mov	r0, r4
   19702:	f7ff ff75 	bl	195f0 <modlog_register_no_lock>
   19706:	4604      	mov	r4, r0
    rwlock_release_write(&modlog_rwl);
   19708:	4640      	mov	r0, r8
   1970a:	f000 fea0 	bl	1a44e <rwlock_release_write>

    return rc;
}
   1970e:	4620      	mov	r0, r4
   19710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19714:	10003330 	.word	0x10003330

00019718 <modlog_append>:
}

int
modlog_append(uint8_t module, uint8_t level, uint8_t etype,
              void *data, uint16_t len)
{
   19718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1971c:	b082      	sub	sp, #8
   1971e:	4604      	mov	r4, r0
   19720:	460d      	mov	r5, r1
   19722:	4616      	mov	r6, r2
   19724:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_read(&modlog_rwl);
   19726:	f8df 802c 	ldr.w	r8, [pc, #44]	; 19754 <modlog_append+0x3c>
   1972a:	4640      	mov	r0, r8
   1972c:	f000 fe25 	bl	1a37a <rwlock_acquire_read>
    rc = modlog_append_no_lock(module, level, etype, data, len);
   19730:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   19734:	9300      	str	r3, [sp, #0]
   19736:	463b      	mov	r3, r7
   19738:	4632      	mov	r2, r6
   1973a:	4629      	mov	r1, r5
   1973c:	4620      	mov	r0, r4
   1973e:	f7ff ff8f 	bl	19660 <modlog_append_no_lock>
   19742:	4604      	mov	r4, r0
    rwlock_release_read(&modlog_rwl);
   19744:	4640      	mov	r0, r8
   19746:	f000 fe45 	bl	1a3d4 <rwlock_release_read>

    return rc;
}
   1974a:	4620      	mov	r0, r4
   1974c:	b002      	add	sp, #8
   1974e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19752:	bf00      	nop
   19754:	10003330 	.word	0x10003330

00019758 <modlog_printf>:
    return rc;
}

void
modlog_printf(uint8_t module, uint8_t level, const char *msg, ...)
{
   19758:	b40c      	push	{r2, r3}
   1975a:	b530      	push	{r4, r5, lr}
   1975c:	b0a5      	sub	sp, #148	; 0x94
   1975e:	4604      	mov	r4, r0
   19760:	460d      	mov	r5, r1
   19762:	ab28      	add	r3, sp, #160	; 0xa0
   19764:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    char buf[MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)];
    int len;

    va_start(args, msg);
   19768:	9323      	str	r3, [sp, #140]	; 0x8c
    len = vsnprintf(buf, MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN), msg, args);
   1976a:	2180      	movs	r1, #128	; 0x80
   1976c:	a803      	add	r0, sp, #12
   1976e:	f014 fc27 	bl	2dfc0 <vsnprintf>
    va_end(args);

    if (len >= MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)) {
   19772:	287f      	cmp	r0, #127	; 0x7f
   19774:	dd00      	ble.n	19778 <modlog_printf+0x20>
        len = MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN) - 1;
   19776:	207f      	movs	r0, #127	; 0x7f
    }

    modlog_append(module, level, LOG_ETYPE_STRING, buf, len);
   19778:	b280      	uxth	r0, r0
   1977a:	9000      	str	r0, [sp, #0]
   1977c:	ab03      	add	r3, sp, #12
   1977e:	2200      	movs	r2, #0
   19780:	4629      	mov	r1, r5
   19782:	4620      	mov	r0, r4
   19784:	f7ff ffc8 	bl	19718 <modlog_append>
}
   19788:	b025      	add	sp, #148	; 0x94
   1978a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1978e:	b002      	add	sp, #8
   19790:	4770      	bx	lr
	...

00019794 <modlog_init>:

void
modlog_init(void)
{
   19794:	b510      	push	{r4, lr}
   19796:	b082      	sub	sp, #8
    int rc;

    SYSINIT_ASSERT_ACTIVE();
   19798:	4b28      	ldr	r3, [pc, #160]	; (1983c <modlog_init+0xa8>)
   1979a:	781b      	ldrb	r3, [r3, #0]
   1979c:	b1e3      	cbz	r3, 197d8 <modlog_init+0x44>

    rc = os_mempool_init(&modlog_mapping_pool, MYNEWT_VAL(MODLOG_MAX_MAPPINGS),
   1979e:	4b28      	ldr	r3, [pc, #160]	; (19840 <modlog_init+0xac>)
   197a0:	9300      	str	r3, [sp, #0]
   197a2:	4b28      	ldr	r3, [pc, #160]	; (19844 <modlog_init+0xb0>)
   197a4:	220c      	movs	r2, #12
   197a6:	2110      	movs	r1, #16
   197a8:	4827      	ldr	r0, [pc, #156]	; (19848 <modlog_init+0xb4>)
   197aa:	f7fc fb09 	bl	15dc0 <os_mempool_init>
                         sizeof (struct modlog_mapping), modlog_mapping_buf,
                         "modlog_mapping_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   197ae:	b9e8      	cbnz	r0, 197ec <modlog_init+0x58>

    SLIST_INIT(&modlog_mappings);
   197b0:	2300      	movs	r3, #0
   197b2:	4a26      	ldr	r2, [pc, #152]	; (1984c <modlog_init+0xb8>)
   197b4:	6013      	str	r3, [r2, #0]
    modlog_first_dflt = NULL;
   197b6:	4a26      	ldr	r2, [pc, #152]	; (19850 <modlog_init+0xbc>)
   197b8:	6013      	str	r3, [r2, #0]

    rc = rwlock_init(&modlog_rwl);
   197ba:	4826      	ldr	r0, [pc, #152]	; (19854 <modlog_init+0xc0>)
   197bc:	f000 fe56 	bl	1a46c <rwlock_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   197c0:	bb08      	cbnz	r0, 19806 <modlog_init+0x72>

    /* Register the default console mapping if configured. */
#if MYNEWT_VAL(MODLOG_CONSOLE_DFLT)
    rc = modlog_register(MODLOG_MODULE_DFLT, log_console_get(),
   197c2:	f7ff fe67 	bl	19494 <log_console_get>
   197c6:	4601      	mov	r1, r0
   197c8:	2300      	movs	r3, #0
   197ca:	461a      	mov	r2, r3
   197cc:	20ff      	movs	r0, #255	; 0xff
   197ce:	f7ff ff89 	bl	196e4 <modlog_register>
                         LOG_LEVEL_DEBUG, NULL);
    SYSINIT_PANIC_ASSERT(rc == 0);
   197d2:	bb28      	cbnz	r0, 19820 <modlog_init+0x8c>
#endif
}
   197d4:	b002      	add	sp, #8
   197d6:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   197d8:	f7fa ff44 	bl	14664 <hal_debugger_connected>
   197dc:	b100      	cbz	r0, 197e0 <modlog_init+0x4c>
   197de:	be01      	bkpt	0x0001
   197e0:	2300      	movs	r3, #0
   197e2:	461a      	mov	r2, r3
   197e4:	4619      	mov	r1, r3
   197e6:	4618      	mov	r0, r3
   197e8:	f7fb fadc 	bl	14da4 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   197ec:	f7fa ff3a 	bl	14664 <hal_debugger_connected>
   197f0:	b100      	cbz	r0, 197f4 <modlog_init+0x60>
   197f2:	be01      	bkpt	0x0001
   197f4:	2000      	movs	r0, #0
   197f6:	9000      	str	r0, [sp, #0]
   197f8:	4b17      	ldr	r3, [pc, #92]	; (19858 <modlog_init+0xc4>)
   197fa:	681c      	ldr	r4, [r3, #0]
   197fc:	4603      	mov	r3, r0
   197fe:	4602      	mov	r2, r0
   19800:	4601      	mov	r1, r0
   19802:	47a0      	blx	r4
   19804:	e7d4      	b.n	197b0 <modlog_init+0x1c>
    SYSINIT_PANIC_ASSERT(rc == 0);
   19806:	f7fa ff2d 	bl	14664 <hal_debugger_connected>
   1980a:	b100      	cbz	r0, 1980e <modlog_init+0x7a>
   1980c:	be01      	bkpt	0x0001
   1980e:	2000      	movs	r0, #0
   19810:	9000      	str	r0, [sp, #0]
   19812:	4b11      	ldr	r3, [pc, #68]	; (19858 <modlog_init+0xc4>)
   19814:	681c      	ldr	r4, [r3, #0]
   19816:	4603      	mov	r3, r0
   19818:	4602      	mov	r2, r0
   1981a:	4601      	mov	r1, r0
   1981c:	47a0      	blx	r4
   1981e:	e7d0      	b.n	197c2 <modlog_init+0x2e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   19820:	f7fa ff20 	bl	14664 <hal_debugger_connected>
   19824:	b100      	cbz	r0, 19828 <modlog_init+0x94>
   19826:	be01      	bkpt	0x0001
   19828:	2000      	movs	r0, #0
   1982a:	9000      	str	r0, [sp, #0]
   1982c:	4b0a      	ldr	r3, [pc, #40]	; (19858 <modlog_init+0xc4>)
   1982e:	681c      	ldr	r4, [r3, #0]
   19830:	4603      	mov	r3, r0
   19832:	4602      	mov	r2, r0
   19834:	4601      	mov	r1, r0
   19836:	47a0      	blx	r4
}
   19838:	e7cc      	b.n	197d4 <modlog_init+0x40>
   1983a:	bf00      	nop
   1983c:	10003404 	.word	0x10003404
   19840:	00030868 	.word	0x00030868
   19844:	10003250 	.word	0x10003250
   19848:	10003310 	.word	0x10003310
   1984c:	1000332c 	.word	0x1000332c
   19850:	1000324c 	.word	0x1000324c
   19854:	10003330 	.word	0x10003330
   19858:	1000028c 	.word	0x1000028c

0001985c <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   1985c:	b530      	push	{r4, r5, lr}
   1985e:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   19860:	7885      	ldrb	r5, [r0, #2]
   19862:	4b20      	ldr	r3, [pc, #128]	; (198e4 <mfg_seek_next_aux+0x88>)
   19864:	681b      	ldr	r3, [r3, #0]
   19866:	429d      	cmp	r5, r3
   19868:	da33      	bge.n	198d2 <mfg_seek_next_aux+0x76>
   1986a:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   1986c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   19870:	a901      	add	r1, sp, #4
   19872:	4a1d      	ldr	r2, [pc, #116]	; (198e8 <mfg_seek_next_aux+0x8c>)
   19874:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   19878:	f7ff f900 	bl	18a7c <flash_area_open>
    if (rc != 0) {
   1987c:	bb60      	cbnz	r0, 198d8 <mfg_seek_next_aux+0x7c>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1987e:	6862      	ldr	r2, [r4, #4]
   19880:	b9c2      	cbnz	r2, 198b4 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   19882:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   19886:	4b18      	ldr	r3, [pc, #96]	; (198e8 <mfg_seek_next_aux+0x8c>)
   19888:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   1988c:	686b      	ldr	r3, [r5, #4]
   1988e:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   19890:	6861      	ldr	r1, [r4, #4]
   19892:	9801      	ldr	r0, [sp, #4]
   19894:	6883      	ldr	r3, [r0, #8]
   19896:	3b08      	subs	r3, #8
   19898:	4299      	cmp	r1, r3
   1989a:	d313      	bcc.n	198c4 <mfg_seek_next_aux+0x68>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1989c:	78a3      	ldrb	r3, [r4, #2]
   1989e:	1c59      	adds	r1, r3, #1
   198a0:	4a10      	ldr	r2, [pc, #64]	; (198e4 <mfg_seek_next_aux+0x88>)
   198a2:	6812      	ldr	r2, [r2, #0]
   198a4:	4291      	cmp	r1, r2
   198a6:	da0a      	bge.n	198be <mfg_seek_next_aux+0x62>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   198a8:	2200      	movs	r2, #0
   198aa:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   198ac:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   198ae:	f06f 0005 	mvn.w	r0, #5
   198b2:	e00c      	b.n	198ce <mfg_seek_next_aux+0x72>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   198b4:	7863      	ldrb	r3, [r4, #1]
   198b6:	4413      	add	r3, r2
   198b8:	3302      	adds	r3, #2
   198ba:	6063      	str	r3, [r4, #4]
   198bc:	e7e8      	b.n	19890 <mfg_seek_next_aux+0x34>
            rc = SYS_EDONE;
   198be:	f06f 000e 	mvn.w	r0, #14
        }
        goto done;
   198c2:	e004      	b.n	198ce <mfg_seek_next_aux+0x72>
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   198c4:	2302      	movs	r3, #2
   198c6:	4622      	mov	r2, r4
   198c8:	f7ff f930 	bl	18b2c <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   198cc:	b938      	cbnz	r0, 198de <mfg_seek_next_aux+0x82>
    }

done:
    flash_area_close(fap);
    return rc;
}
   198ce:	b003      	add	sp, #12
   198d0:	bd30      	pop	{r4, r5, pc}
        return SYS_EINVAL;
   198d2:	f06f 0001 	mvn.w	r0, #1
   198d6:	e7fa      	b.n	198ce <mfg_seek_next_aux+0x72>
        return SYS_EIO;
   198d8:	f06f 0004 	mvn.w	r0, #4
   198dc:	e7f7      	b.n	198ce <mfg_seek_next_aux+0x72>
        rc = SYS_EIO;
   198de:	f06f 0004 	mvn.w	r0, #4
   198e2:	e7f4      	b.n	198ce <mfg_seek_next_aux+0x72>
   198e4:	10003370 	.word	0x10003370
   198e8:	10003358 	.word	0x10003358

000198ec <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   198ec:	b530      	push	{r4, r5, lr}
   198ee:	b085      	sub	sp, #20
   198f0:	4605      	mov	r5, r0
   198f2:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   198f4:	a903      	add	r1, sp, #12
   198f6:	f7ff f8c1 	bl	18a7c <flash_area_open>
    if (rc != 0) {
   198fa:	b9d8      	cbnz	r0, 19934 <mfg_read_mmr+0x48>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   198fc:	9803      	ldr	r0, [sp, #12]
   198fe:	6881      	ldr	r1, [r0, #8]
   19900:	2308      	movs	r3, #8
   19902:	aa01      	add	r2, sp, #4
   19904:	3908      	subs	r1, #8
   19906:	f7ff f911 	bl	18b2c <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   1990a:	b9b0      	cbnz	r0, 1993a <mfg_read_mmr+0x4e>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   1990c:	9a02      	ldr	r2, [sp, #8]
   1990e:	4b11      	ldr	r3, [pc, #68]	; (19954 <mfg_read_mmr+0x68>)
   19910:	429a      	cmp	r2, r3
   19912:	d115      	bne.n	19940 <mfg_read_mmr+0x54>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   19914:	f89d 3006 	ldrb.w	r3, [sp, #6]
   19918:	2b02      	cmp	r3, #2
   1991a:	d114      	bne.n	19946 <mfg_read_mmr+0x5a>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   1991c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   19920:	9b03      	ldr	r3, [sp, #12]
   19922:	689b      	ldr	r3, [r3, #8]
   19924:	429a      	cmp	r2, r3
   19926:	d811      	bhi.n	1994c <mfg_read_mmr+0x60>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   19928:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   1992a:	7025      	strb	r5, [r4, #0]
   1992c:	6063      	str	r3, [r4, #4]
   1992e:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   19930:	b005      	add	sp, #20
   19932:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   19934:	f06f 0004 	mvn.w	r0, #4
   19938:	e7fa      	b.n	19930 <mfg_read_mmr+0x44>
        return SYS_EIO;
   1993a:	f06f 0004 	mvn.w	r0, #4
   1993e:	e7f7      	b.n	19930 <mfg_read_mmr+0x44>
        return SYS_ENODEV;
   19940:	f06f 0008 	mvn.w	r0, #8
   19944:	e7f4      	b.n	19930 <mfg_read_mmr+0x44>
        return SYS_ENOTSUP;
   19946:	f06f 000b 	mvn.w	r0, #11
   1994a:	e7f1      	b.n	19930 <mfg_read_mmr+0x44>
        return SYS_ENODEV;
   1994c:	f06f 0008 	mvn.w	r0, #8
   19950:	e7ee      	b.n	19930 <mfg_read_mmr+0x44>
   19952:	bf00      	nop
   19954:	3bb2a269 	.word	0x3bb2a269

00019958 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   19958:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1995a:	2300      	movs	r3, #0
   1995c:	4a10      	ldr	r2, [pc, #64]	; (199a0 <mfg_read_next_mmr+0x48>)
   1995e:	6811      	ldr	r1, [r2, #0]
   19960:	4299      	cmp	r1, r3
   19962:	dd08      	ble.n	19976 <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   19964:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   19968:	490e      	ldr	r1, [pc, #56]	; (199a4 <mfg_read_next_mmr+0x4c>)
   1996a:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
   1996e:	4282      	cmp	r2, r0
   19970:	d010      	beq.n	19994 <mfg_read_next_mmr+0x3c>
    for (i = 0; i < mfg_num_mmrs; i++) {
   19972:	3301      	adds	r3, #1
   19974:	e7f2      	b.n	1995c <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   19976:	2901      	cmp	r1, #1
   19978:	dc0f      	bgt.n	1999a <mfg_read_next_mmr+0x42>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1997a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1997e:	4b09      	ldr	r3, [pc, #36]	; (199a4 <mfg_read_next_mmr+0x4c>)
   19980:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   19984:	f7ff ffb2 	bl	198ec <mfg_read_mmr>
    if (rc != 0) {
   19988:	b930      	cbnz	r0, 19998 <mfg_read_next_mmr+0x40>
        return rc;
    }

    mfg_num_mmrs++;
   1998a:	4a05      	ldr	r2, [pc, #20]	; (199a0 <mfg_read_next_mmr+0x48>)
   1998c:	6813      	ldr	r3, [r2, #0]
   1998e:	3301      	adds	r3, #1
   19990:	6013      	str	r3, [r2, #0]
    return 0;
   19992:	e001      	b.n	19998 <mfg_read_next_mmr+0x40>
            return SYS_EALREADY;
   19994:	f06f 000a 	mvn.w	r0, #10
}
   19998:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   1999a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1999e:	e7fb      	b.n	19998 <mfg_read_next_mmr+0x40>
   199a0:	10003370 	.word	0x10003370
   199a4:	10003358 	.word	0x10003358

000199a8 <mfg_open_flash_area>:
{
   199a8:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   199aa:	7883      	ldrb	r3, [r0, #2]
   199ac:	4a0c      	ldr	r2, [pc, #48]	; (199e0 <mfg_open_flash_area+0x38>)
   199ae:	6812      	ldr	r2, [r2, #0]
   199b0:	4293      	cmp	r3, r2
   199b2:	da08      	bge.n	199c6 <mfg_open_flash_area+0x1e>
    rc = flash_area_open(mmr->area_id, fap);
   199b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   199b8:	4a0a      	ldr	r2, [pc, #40]	; (199e4 <mfg_open_flash_area+0x3c>)
   199ba:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   199be:	f7ff f85d 	bl	18a7c <flash_area_open>
    if (rc != 0) {
   199c2:	b950      	cbnz	r0, 199da <mfg_open_flash_area+0x32>
}
   199c4:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   199c6:	f7fa fe4d 	bl	14664 <hal_debugger_connected>
   199ca:	b100      	cbz	r0, 199ce <mfg_open_flash_area+0x26>
   199cc:	be01      	bkpt	0x0001
   199ce:	2300      	movs	r3, #0
   199d0:	461a      	mov	r2, r3
   199d2:	4619      	mov	r1, r3
   199d4:	4618      	mov	r0, r3
   199d6:	f7fb f9e5 	bl	14da4 <__assert_func>
        return SYS_EIO;
   199da:	f06f 0004 	mvn.w	r0, #4
   199de:	e7f1      	b.n	199c4 <mfg_open_flash_area+0x1c>
   199e0:	10003370 	.word	0x10003370
   199e4:	10003358 	.word	0x10003358

000199e8 <mfg_read_tlv_body>:
{
   199e8:	b570      	push	{r4, r5, r6, lr}
   199ea:	b082      	sub	sp, #8
   199ec:	4606      	mov	r6, r0
   199ee:	460c      	mov	r4, r1
   199f0:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   199f2:	a901      	add	r1, sp, #4
   199f4:	f7ff ffd8 	bl	199a8 <mfg_open_flash_area>
    if (rc != 0) {
   199f8:	b108      	cbz	r0, 199fe <mfg_read_tlv_body+0x16>
}
   199fa:	b002      	add	sp, #8
   199fc:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   199fe:	462a      	mov	r2, r5
   19a00:	2100      	movs	r1, #0
   19a02:	4620      	mov	r0, r4
   19a04:	f7fd f88b 	bl	16b1e <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   19a08:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   19a0a:	6871      	ldr	r1, [r6, #4]
   19a0c:	42ab      	cmp	r3, r5
   19a0e:	bfa8      	it	ge
   19a10:	462b      	movge	r3, r5
   19a12:	4622      	mov	r2, r4
   19a14:	3102      	adds	r1, #2
   19a16:	9801      	ldr	r0, [sp, #4]
   19a18:	f7ff f888 	bl	18b2c <flash_area_read>
    if (rc != 0) {
   19a1c:	2800      	cmp	r0, #0
   19a1e:	d0ec      	beq.n	199fa <mfg_read_tlv_body+0x12>
        return SYS_EIO;
   19a20:	f06f 0004 	mvn.w	r0, #4
   19a24:	e7e9      	b.n	199fa <mfg_read_tlv_body+0x12>

00019a26 <mfg_seek_next>:
{
   19a26:	b510      	push	{r4, lr}
   19a28:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   19a2a:	4620      	mov	r0, r4
   19a2c:	f7ff ff16 	bl	1985c <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   19a30:	f110 0f06 	cmn.w	r0, #6
   19a34:	d0f9      	beq.n	19a2a <mfg_seek_next+0x4>
}
   19a36:	bd10      	pop	{r4, pc}

00019a38 <mfg_seek_next_with_type>:
{
   19a38:	b538      	push	{r3, r4, r5, lr}
   19a3a:	4604      	mov	r4, r0
   19a3c:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   19a3e:	4620      	mov	r0, r4
   19a40:	f7ff fff1 	bl	19a26 <mfg_seek_next>
        if (rc != 0) {
   19a44:	4602      	mov	r2, r0
   19a46:	b910      	cbnz	r0, 19a4e <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   19a48:	7823      	ldrb	r3, [r4, #0]
   19a4a:	42ab      	cmp	r3, r5
   19a4c:	d1f7      	bne.n	19a3e <mfg_seek_next_with_type+0x6>
}
   19a4e:	4610      	mov	r0, r2
   19a50:	bd38      	pop	{r3, r4, r5, pc}

00019a52 <mfg_read_tlv_mmr_ref>:
{
   19a52:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   19a54:	2201      	movs	r2, #1
   19a56:	f7ff ffc7 	bl	199e8 <mfg_read_tlv_body>
}
   19a5a:	bd08      	pop	{r3, pc}

00019a5c <mfg_read_tlv_hash>:
{
   19a5c:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_hash, MFG_HASH_SZ);
   19a5e:	2220      	movs	r2, #32
   19a60:	f7ff ffc2 	bl	199e8 <mfg_read_tlv_body>
}
   19a64:	bd08      	pop	{r3, pc}
	...

00019a68 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   19a68:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   19a6a:	4b0d      	ldr	r3, [pc, #52]	; (19aa0 <mfg_init+0x38>)
   19a6c:	781b      	ldrb	r3, [r3, #0]
   19a6e:	b94b      	cbnz	r3, 19a84 <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   19a70:	4b0b      	ldr	r3, [pc, #44]	; (19aa0 <mfg_init+0x38>)
   19a72:	2201      	movs	r2, #1
   19a74:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   19a76:	4b0b      	ldr	r3, [pc, #44]	; (19aa4 <mfg_init+0x3c>)
   19a78:	781b      	ldrb	r3, [r3, #0]
   19a7a:	b123      	cbz	r3, 19a86 <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   19a7c:	2000      	movs	r0, #0
   19a7e:	f7ff ff6b 	bl	19958 <mfg_read_next_mmr>
    if (rc != 0) {
   19a82:	b150      	cbz	r0, 19a9a <mfg_init+0x32>

    return;

err:
    MFG_LOG_ERROR("failed to read MMRs: rc=%d", rc);
}
   19a84:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   19a86:	f7fa fded 	bl	14664 <hal_debugger_connected>
   19a8a:	b100      	cbz	r0, 19a8e <mfg_init+0x26>
   19a8c:	be01      	bkpt	0x0001
   19a8e:	2300      	movs	r3, #0
   19a90:	461a      	mov	r2, r3
   19a92:	4619      	mov	r1, r3
   19a94:	4618      	mov	r0, r3
   19a96:	f7fb f985 	bl	14da4 <__assert_func>
    rc = mfg_read_mmr_refs();
   19a9a:	f000 f80d 	bl	19ab8 <mfg_read_mmr_refs>
    MFG_LOG_ERROR("failed to read MMRs: rc=%d", rc);
   19a9e:	e7f1      	b.n	19a84 <mfg_init+0x1c>
   19aa0:	10003354 	.word	0x10003354
   19aa4:	10003404 	.word	0x10003404

00019aa8 <mfg_open>:
{
   19aa8:	b510      	push	{r4, lr}
   19aaa:	4604      	mov	r4, r0
    mfg_init();
   19aac:	f7ff ffdc 	bl	19a68 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   19ab0:	2300      	movs	r3, #0
   19ab2:	6023      	str	r3, [r4, #0]
   19ab4:	6063      	str	r3, [r4, #4]
}
   19ab6:	bd10      	pop	{r4, pc}

00019ab8 <mfg_read_mmr_refs>:
{
   19ab8:	b500      	push	{lr}
   19aba:	b085      	sub	sp, #20
    mfg_open(&reader);
   19abc:	a801      	add	r0, sp, #4
   19abe:	f7ff fff3 	bl	19aa8 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   19ac2:	2104      	movs	r1, #4
   19ac4:	eb0d 0001 	add.w	r0, sp, r1
   19ac8:	f7ff ffb6 	bl	19a38 <mfg_seek_next_with_type>
        switch (rc) {
   19acc:	f110 0f0f 	cmn.w	r0, #15
   19ad0:	d00f      	beq.n	19af2 <mfg_read_mmr_refs+0x3a>
   19ad2:	b978      	cbnz	r0, 19af4 <mfg_read_mmr_refs+0x3c>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   19ad4:	a903      	add	r1, sp, #12
   19ad6:	a801      	add	r0, sp, #4
   19ad8:	f7ff ffbb 	bl	19a52 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   19adc:	b950      	cbnz	r0, 19af4 <mfg_read_mmr_refs+0x3c>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   19ade:	f89d 000c 	ldrb.w	r0, [sp, #12]
   19ae2:	f7ff ff39 	bl	19958 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   19ae6:	2800      	cmp	r0, #0
   19ae8:	d0eb      	beq.n	19ac2 <mfg_read_mmr_refs+0xa>
   19aea:	f110 0f0b 	cmn.w	r0, #11
   19aee:	d0e8      	beq.n	19ac2 <mfg_read_mmr_refs+0xa>
   19af0:	e000      	b.n	19af4 <mfg_read_mmr_refs+0x3c>
        switch (rc) {
   19af2:	2000      	movs	r0, #0
}
   19af4:	b005      	add	sp, #20
   19af6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00019afc <reboot_conf_export>:
reboot_conf_export(void (*func)(char *name, char *val),
                   enum conf_export_tgt tgt)
{
    char str[12];

    if (tgt == CONF_EXPORT_SHOW) {
   19afc:	2901      	cmp	r1, #1
   19afe:	d001      	beq.n	19b04 <reboot_conf_export+0x8>
        func("reboot/written",
             conf_str_from_value(CONF_BOOL, &log_reboot_written, str,
                                 sizeof str));
    }
    return 0;
}
   19b00:	2000      	movs	r0, #0
   19b02:	4770      	bx	lr
{
   19b04:	b510      	push	{r4, lr}
   19b06:	b084      	sub	sp, #16
   19b08:	4604      	mov	r4, r0
        func("reboot/reboot_cnt",
   19b0a:	230c      	movs	r3, #12
   19b0c:	aa01      	add	r2, sp, #4
   19b0e:	4909      	ldr	r1, [pc, #36]	; (19b34 <reboot_conf_export+0x38>)
   19b10:	2003      	movs	r0, #3
   19b12:	f7fd fdaf 	bl	17674 <conf_str_from_value>
   19b16:	4601      	mov	r1, r0
   19b18:	4807      	ldr	r0, [pc, #28]	; (19b38 <reboot_conf_export+0x3c>)
   19b1a:	47a0      	blx	r4
        func("reboot/written",
   19b1c:	230c      	movs	r3, #12
   19b1e:	aa01      	add	r2, sp, #4
   19b20:	4906      	ldr	r1, [pc, #24]	; (19b3c <reboot_conf_export+0x40>)
   19b22:	200a      	movs	r0, #10
   19b24:	f7fd fda6 	bl	17674 <conf_str_from_value>
   19b28:	4601      	mov	r1, r0
   19b2a:	4805      	ldr	r0, [pc, #20]	; (19b40 <reboot_conf_export+0x44>)
   19b2c:	47a0      	blx	r4
}
   19b2e:	2000      	movs	r0, #0
   19b30:	b004      	add	sp, #16
   19b32:	bd10      	pop	{r4, pc}
   19b34:	10003376 	.word	0x10003376
   19b38:	0003087c 	.word	0x0003087c
   19b3c:	10003374 	.word	0x10003374
   19b40:	00030890 	.word	0x00030890

00019b44 <reboot_conf_get>:
    if (argc == 1) {
   19b44:	2801      	cmp	r0, #1
   19b46:	d11d      	bne.n	19b84 <reboot_conf_get+0x40>
{
   19b48:	b570      	push	{r4, r5, r6, lr}
   19b4a:	4614      	mov	r4, r2
   19b4c:	461d      	mov	r5, r3
        if (!strcmp(argv[0], "reboot_cnt")) {
   19b4e:	680e      	ldr	r6, [r1, #0]
   19b50:	490d      	ldr	r1, [pc, #52]	; (19b88 <reboot_conf_get+0x44>)
   19b52:	4630      	mov	r0, r6
   19b54:	f7fc ffff 	bl	16b56 <strcmp>
   19b58:	b130      	cbz	r0, 19b68 <reboot_conf_get+0x24>
        } else if (!strcmp(argv[0], "written")) {
   19b5a:	490c      	ldr	r1, [pc, #48]	; (19b8c <reboot_conf_get+0x48>)
   19b5c:	4630      	mov	r0, r6
   19b5e:	f7fc fffa 	bl	16b56 <strcmp>
   19b62:	b140      	cbz	r0, 19b76 <reboot_conf_get+0x32>
    return NULL;
   19b64:	2000      	movs	r0, #0
}
   19b66:	bd70      	pop	{r4, r5, r6, pc}
            return conf_str_from_value(CONF_INT16, &reboot_cnt, buf, max_len);
   19b68:	462b      	mov	r3, r5
   19b6a:	4622      	mov	r2, r4
   19b6c:	4908      	ldr	r1, [pc, #32]	; (19b90 <reboot_conf_get+0x4c>)
   19b6e:	2003      	movs	r0, #3
   19b70:	f7fd fd80 	bl	17674 <conf_str_from_value>
   19b74:	e7f7      	b.n	19b66 <reboot_conf_get+0x22>
            return conf_str_from_value(CONF_BOOL, &log_reboot_written,
   19b76:	462b      	mov	r3, r5
   19b78:	4622      	mov	r2, r4
   19b7a:	4906      	ldr	r1, [pc, #24]	; (19b94 <reboot_conf_get+0x50>)
   19b7c:	200a      	movs	r0, #10
   19b7e:	f7fd fd79 	bl	17674 <conf_str_from_value>
   19b82:	e7f0      	b.n	19b66 <reboot_conf_get+0x22>
    return NULL;
   19b84:	2000      	movs	r0, #0
}
   19b86:	4770      	bx	lr
   19b88:	000308a0 	.word	0x000308a0
   19b8c:	000308ac 	.word	0x000308ac
   19b90:	10003376 	.word	0x10003376
   19b94:	10003374 	.word	0x10003374

00019b98 <reboot_conf_set>:
    if (argc == 1) {
   19b98:	2801      	cmp	r0, #1
   19b9a:	d001      	beq.n	19ba0 <reboot_conf_set+0x8>
    return OS_ENOENT;
   19b9c:	200a      	movs	r0, #10
}
   19b9e:	4770      	bx	lr
{
   19ba0:	b538      	push	{r3, r4, r5, lr}
   19ba2:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "reboot_cnt")) {
   19ba4:	680d      	ldr	r5, [r1, #0]
   19ba6:	490d      	ldr	r1, [pc, #52]	; (19bdc <reboot_conf_set+0x44>)
   19ba8:	4628      	mov	r0, r5
   19baa:	f7fc ffd4 	bl	16b56 <strcmp>
   19bae:	b130      	cbz	r0, 19bbe <reboot_conf_set+0x26>
        } else if (!strcmp(argv[0], "written")) {
   19bb0:	490b      	ldr	r1, [pc, #44]	; (19be0 <reboot_conf_set+0x48>)
   19bb2:	4628      	mov	r0, r5
   19bb4:	f7fc ffcf 	bl	16b56 <strcmp>
   19bb8:	b140      	cbz	r0, 19bcc <reboot_conf_set+0x34>
    return OS_ENOENT;
   19bba:	200a      	movs	r0, #10
}
   19bbc:	bd38      	pop	{r3, r4, r5, pc}
            return CONF_VALUE_SET(val, CONF_INT16, reboot_cnt);
   19bbe:	2302      	movs	r3, #2
   19bc0:	4a08      	ldr	r2, [pc, #32]	; (19be4 <reboot_conf_set+0x4c>)
   19bc2:	2103      	movs	r1, #3
   19bc4:	4620      	mov	r0, r4
   19bc6:	f7fd fc9a 	bl	174fe <conf_value_from_str>
   19bca:	e7f7      	b.n	19bbc <reboot_conf_set+0x24>
            return CONF_VALUE_SET(val, CONF_INT16, log_reboot_written);
   19bcc:	2301      	movs	r3, #1
   19bce:	4a06      	ldr	r2, [pc, #24]	; (19be8 <reboot_conf_set+0x50>)
   19bd0:	2103      	movs	r1, #3
   19bd2:	4620      	mov	r0, r4
   19bd4:	f7fd fc93 	bl	174fe <conf_value_from_str>
   19bd8:	e7f0      	b.n	19bbc <reboot_conf_set+0x24>
   19bda:	bf00      	nop
   19bdc:	000308a0 	.word	0x000308a0
   19be0:	000308ac 	.word	0x000308ac
   19be4:	10003376 	.word	0x10003376
   19be8:	10003374 	.word	0x10003374

00019bec <log_reboot_init_fcb>:
{
   19bec:	b510      	push	{r4, lr}
   19bee:	b084      	sub	sp, #16
    if (flash_area_open(MYNEWT_VAL(REBOOT_LOG_FLASH_AREA), &ptr)) {
   19bf0:	a903      	add	r1, sp, #12
   19bf2:	2010      	movs	r0, #16
   19bf4:	f7fe ff42 	bl	18a7c <flash_area_open>
   19bf8:	2800      	cmp	r0, #0
   19bfa:	d133      	bne.n	19c64 <log_reboot_init_fcb+0x78>
    reboot_log_fcb.fl_entries = MYNEWT_VAL(REBOOT_LOG_ENTRY_COUNT);
   19bfc:	4b1b      	ldr	r3, [pc, #108]	; (19c6c <log_reboot_init_fcb+0x80>)
   19bfe:	220a      	movs	r2, #10
   19c00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    reboot_sector = *ptr;
   19c04:	9a03      	ldr	r2, [sp, #12]
   19c06:	4c1a      	ldr	r4, [pc, #104]	; (19c70 <log_reboot_init_fcb+0x84>)
   19c08:	ca07      	ldmia	r2, {r0, r1, r2}
   19c0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    fcbp->f_magic = 0x7EADBADF;
   19c0e:	4a19      	ldr	r2, [pc, #100]	; (19c74 <log_reboot_init_fcb+0x88>)
   19c10:	601a      	str	r2, [r3, #0]
    fcbp->f_version = g_log_info.li_version;
   19c12:	4a19      	ldr	r2, [pc, #100]	; (19c78 <log_reboot_init_fcb+0x8c>)
   19c14:	7912      	ldrb	r2, [r2, #4]
   19c16:	711a      	strb	r2, [r3, #4]
    fcbp->f_sector_cnt = 1;
   19c18:	2201      	movs	r2, #1
   19c1a:	715a      	strb	r2, [r3, #5]
    fcbp->f_sectors = &reboot_sector;
   19c1c:	609c      	str	r4, [r3, #8]
    rc = fcb_init(fcbp);
   19c1e:	4618      	mov	r0, r3
   19c20:	f010 fa34 	bl	2a08c <fcb_init>
    if (rc) {
   19c24:	b148      	cbz	r0, 19c3a <log_reboot_init_fcb+0x4e>
        flash_area_erase(ptr, 0, ptr->fa_size);
   19c26:	9803      	ldr	r0, [sp, #12]
   19c28:	6882      	ldr	r2, [r0, #8]
   19c2a:	2100      	movs	r1, #0
   19c2c:	f7fe ffa4 	bl	18b78 <flash_area_erase>
        rc = fcb_init(fcbp);
   19c30:	480e      	ldr	r0, [pc, #56]	; (19c6c <log_reboot_init_fcb+0x80>)
   19c32:	f010 fa2b 	bl	2a08c <fcb_init>
        if (rc) {
   19c36:	4603      	mov	r3, r0
   19c38:	b948      	cbnz	r0, 19c4e <log_reboot_init_fcb+0x62>
    rc = log_register("reboot_log", &reboot_log, &log_fcb_handler,
   19c3a:	2300      	movs	r3, #0
   19c3c:	9300      	str	r3, [sp, #0]
   19c3e:	4b0b      	ldr	r3, [pc, #44]	; (19c6c <log_reboot_init_fcb+0x80>)
   19c40:	4a0e      	ldr	r2, [pc, #56]	; (19c7c <log_reboot_init_fcb+0x90>)
   19c42:	490f      	ldr	r1, [pc, #60]	; (19c80 <log_reboot_init_fcb+0x94>)
   19c44:	480f      	ldr	r0, [pc, #60]	; (19c84 <log_reboot_init_fcb+0x98>)
   19c46:	f7ff fa93 	bl	19170 <log_register>
    if (rc != 0) {
   19c4a:	4603      	mov	r3, r0
   19c4c:	b110      	cbz	r0, 19c54 <log_reboot_init_fcb+0x68>
}
   19c4e:	4618      	mov	r0, r3
   19c50:	b004      	add	sp, #16
   19c52:	bd10      	pop	{r4, pc}
    rc = modlog_register(LOG_MODULE_REBOOT, &reboot_log, LOG_SYSLEVEL,
   19c54:	2300      	movs	r3, #0
   19c56:	461a      	mov	r2, r3
   19c58:	4909      	ldr	r1, [pc, #36]	; (19c80 <log_reboot_init_fcb+0x94>)
   19c5a:	2006      	movs	r0, #6
   19c5c:	f7ff fd42 	bl	196e4 <modlog_register>
   19c60:	4603      	mov	r3, r0
    if (rc != 0) {
   19c62:	e7f4      	b.n	19c4e <log_reboot_init_fcb+0x62>
        return SYS_EUNKNOWN;
   19c64:	f06f 030c 	mvn.w	r3, #12
   19c68:	e7f1      	b.n	19c4e <log_reboot_init_fcb+0x62>
   19c6a:	bf00      	nop
   19c6c:	10003394 	.word	0x10003394
   19c70:	100033c8 	.word	0x100033c8
   19c74:	7eadbadf 	.word	0x7eadbadf
   19c78:	10003198 	.word	0x10003198
   19c7c:	00033adc 	.word	0x00033adc
   19c80:	10003378 	.word	0x10003378
   19c84:	000308b4 	.word	0x000308b4

00019c88 <log_reboot_init_console>:
{
   19c88:	b508      	push	{r3, lr}
    rc = modlog_register(LOG_MODULE_REBOOT, log_console_get(), LOG_SYSLEVEL,
   19c8a:	f7ff fc03 	bl	19494 <log_console_get>
   19c8e:	4601      	mov	r1, r0
   19c90:	2300      	movs	r3, #0
   19c92:	461a      	mov	r2, r3
   19c94:	2006      	movs	r0, #6
   19c96:	f7ff fd25 	bl	196e4 <modlog_register>
}
   19c9a:	bd08      	pop	{r3, pc}

00019c9c <log_reboot_reason_str>:

const char *
log_reboot_reason_str(enum hal_reset_reason reason)
{
   19c9c:	b510      	push	{r4, lr}
    static char str_reason[MYNEWT_VAL(REBOOT_LOG_REBOOT_REASON_SIZE)];

    if (reason >= HAL_RESET_OTHER) {
   19c9e:	28ff      	cmp	r0, #255	; 0xff
   19ca0:	d808      	bhi.n	19cb4 <log_reboot_reason_str+0x18>
        snprintf(str_reason,MYNEWT_VAL(REBOOT_LOG_REBOOT_REASON_SIZE),"OTHER: 0x%X",reason - HAL_RESET_OTHER);
        return str_reason;
    }

    switch (reason) {
   19ca2:	1e43      	subs	r3, r0, #1
   19ca4:	2b07      	cmp	r3, #7
   19ca6:	d81d      	bhi.n	19ce4 <log_reboot_reason_str+0x48>
   19ca8:	e8df f003 	tbb	[pc, r3]
   19cac:	1210250e 	.word	0x1210250e
   19cb0:	1a181614 	.word	0x1a181614
        snprintf(str_reason,MYNEWT_VAL(REBOOT_LOG_REBOOT_REASON_SIZE),"OTHER: 0x%X",reason - HAL_RESET_OTHER);
   19cb4:	4c11      	ldr	r4, [pc, #68]	; (19cfc <log_reboot_reason_str+0x60>)
   19cb6:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   19cba:	4a11      	ldr	r2, [pc, #68]	; (19d00 <log_reboot_reason_str+0x64>)
   19cbc:	2120      	movs	r1, #32
   19cbe:	4620      	mov	r0, r4
   19cc0:	f014 f99b 	bl	2dffa <snprintf>
        return str_reason;
   19cc4:	4620      	mov	r0, r4
    default:
        snprintf(str_reason,MYNEWT_VAL(REBOOT_LOG_REBOOT_REASON_SIZE),"UNKNOWN %d",reason);
        return str_reason;
        break;
    }
}
   19cc6:	bd10      	pop	{r4, pc}
    switch (reason) {
   19cc8:	480e      	ldr	r0, [pc, #56]	; (19d04 <log_reboot_reason_str+0x68>)
   19cca:	e7fc      	b.n	19cc6 <log_reboot_reason_str+0x2a>
        return "WDOG";
   19ccc:	480e      	ldr	r0, [pc, #56]	; (19d08 <log_reboot_reason_str+0x6c>)
   19cce:	e7fa      	b.n	19cc6 <log_reboot_reason_str+0x2a>
        return "SOFT";
   19cd0:	480e      	ldr	r0, [pc, #56]	; (19d0c <log_reboot_reason_str+0x70>)
   19cd2:	e7f8      	b.n	19cc6 <log_reboot_reason_str+0x2a>
        return "BROWNOUT";
   19cd4:	480e      	ldr	r0, [pc, #56]	; (19d10 <log_reboot_reason_str+0x74>)
   19cd6:	e7f6      	b.n	19cc6 <log_reboot_reason_str+0x2a>
        return "REQUESTED";
   19cd8:	480e      	ldr	r0, [pc, #56]	; (19d14 <log_reboot_reason_str+0x78>)
   19cda:	e7f4      	b.n	19cc6 <log_reboot_reason_str+0x2a>
        return "SYSTEM_OFF_INT";
   19cdc:	480e      	ldr	r0, [pc, #56]	; (19d18 <log_reboot_reason_str+0x7c>)
   19cde:	e7f2      	b.n	19cc6 <log_reboot_reason_str+0x2a>
        return "DFU";
   19ce0:	480e      	ldr	r0, [pc, #56]	; (19d1c <log_reboot_reason_str+0x80>)
   19ce2:	e7f0      	b.n	19cc6 <log_reboot_reason_str+0x2a>
        snprintf(str_reason,MYNEWT_VAL(REBOOT_LOG_REBOOT_REASON_SIZE),"UNKNOWN %d",reason);
   19ce4:	4c05      	ldr	r4, [pc, #20]	; (19cfc <log_reboot_reason_str+0x60>)
   19ce6:	4603      	mov	r3, r0
   19ce8:	4a0d      	ldr	r2, [pc, #52]	; (19d20 <log_reboot_reason_str+0x84>)
   19cea:	2120      	movs	r1, #32
   19cec:	4620      	mov	r0, r4
   19cee:	f014 f984 	bl	2dffa <snprintf>
        return str_reason;
   19cf2:	4620      	mov	r0, r4
   19cf4:	e7e7      	b.n	19cc6 <log_reboot_reason_str+0x2a>
        return "RESET_PIN";
   19cf6:	480b      	ldr	r0, [pc, #44]	; (19d24 <log_reboot_reason_str+0x88>)
        break;
   19cf8:	e7e5      	b.n	19cc6 <log_reboot_reason_str+0x2a>
   19cfa:	bf00      	nop
   19cfc:	100033d4 	.word	0x100033d4
   19d00:	00030910 	.word	0x00030910
   19d04:	00030908 	.word	0x00030908
   19d08:	000308cc 	.word	0x000308cc
   19d0c:	000308d4 	.word	0x000308d4
   19d10:	000308dc 	.word	0x000308dc
   19d14:	000308e8 	.word	0x000308e8
   19d18:	000308f4 	.word	0x000308f4
   19d1c:	00030904 	.word	0x00030904
   19d20:	0003091c 	.word	0x0003091c
   19d24:	000308c0 	.word	0x000308c0

00019d28 <log_reboot_write>:
{
   19d28:	b5f0      	push	{r4, r5, r6, r7, lr}
   19d2a:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
   19d2e:	4607      	mov	r7, r0
        if (flash_area_open(MYNEWT_VAL(REBOOT_LOG_FLASH_AREA), &ptr)) {
   19d30:	a904      	add	r1, sp, #16
   19d32:	2010      	movs	r0, #16
   19d34:	f7fe fea2 	bl	18a7c <flash_area_open>
   19d38:	b120      	cbz	r0, 19d44 <log_reboot_write+0x1c>
            return 0;
   19d3a:	2600      	movs	r6, #0
}
   19d3c:	4630      	mov	r0, r6
   19d3e:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
   19d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = img_mgmt_read_info(boot_current_slot, &ver, hash, &flags);
   19d44:	ab05      	add	r3, sp, #20
   19d46:	aa92      	add	r2, sp, #584	; 0x248
   19d48:	a99a      	add	r1, sp, #616	; 0x268
   19d4a:	4887      	ldr	r0, [pc, #540]	; (19f68 <log_reboot_write+0x240>)
   19d4c:	6800      	ldr	r0, [r0, #0]
   19d4e:	f000 ffb3 	bl	1acb8 <img_mgmt_read_info>
    if (rc != 0) {
   19d52:	4606      	mov	r6, r0
   19d54:	2800      	cmp	r0, #0
   19d56:	d1f1      	bne.n	19d3c <log_reboot_write+0x14>
    memset(cbor_enc_buf, 0, sizeof cbor_enc_buf);
   19d58:	f44f 7480 	mov.w	r4, #256	; 0x100
   19d5c:	4622      	mov	r2, r4
   19d5e:	2100      	movs	r1, #0
   19d60:	a812      	add	r0, sp, #72	; 0x48
   19d62:	f7fc fedc 	bl	16b1e <memset>
    cbor_buf_writer_init(&writer, cbor_enc_buf, sizeof cbor_enc_buf);
   19d66:	4622      	mov	r2, r4
   19d68:	a912      	add	r1, sp, #72	; 0x48
   19d6a:	a80e      	add	r0, sp, #56	; 0x38
   19d6c:	f00e ff38 	bl	28be0 <cbor_buf_writer_init>
    cbor_encoder_init(&enc, &writer.enc, 0);
   19d70:	2200      	movs	r2, #0
   19d72:	a90e      	add	r1, sp, #56	; 0x38
   19d74:	a80a      	add	r0, sp, #40	; 0x28
   19d76:	f00f f85d 	bl	28e34 <cbor_encoder_init>
    rc = cbor_encoder_create_map(&enc, &map, CborIndefiniteLength);
   19d7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19d7e:	a906      	add	r1, sp, #24
   19d80:	a80a      	add	r0, sp, #40	; 0x28
   19d82:	f00f f915 	bl	28fb0 <cbor_encoder_create_map>
    if (rc != 0) {
   19d86:	4606      	mov	r6, r0
   19d88:	2800      	cmp	r0, #0
   19d8a:	d1d7      	bne.n	19d3c <log_reboot_write+0x14>
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   19d8c:	2203      	movs	r2, #3
   19d8e:	4977      	ldr	r1, [pc, #476]	; (19f6c <log_reboot_write+0x244>)
   19d90:	a806      	add	r0, sp, #24
   19d92:	f00f f901 	bl	28f98 <cbor_encode_text_string>
    cbor_encode_text_stringz(&map,log_reboot_reason_str(info->reason));
   19d96:	8838      	ldrh	r0, [r7, #0]
   19d98:	f7ff ff80 	bl	19c9c <log_reboot_reason_str>
   19d9c:	4604      	mov	r4, r0
   19d9e:	f7fc fee6 	bl	16b6e <strlen>
   19da2:	4602      	mov	r2, r0
   19da4:	4621      	mov	r1, r4
   19da6:	a806      	add	r0, sp, #24
   19da8:	f00f f8f6 	bl	28f98 <cbor_encode_text_string>
   19dac:	2203      	movs	r2, #3
   19dae:	4970      	ldr	r1, [pc, #448]	; (19f70 <log_reboot_write+0x248>)
   19db0:	a806      	add	r0, sp, #24
   19db2:	f00f f8f1 	bl	28f98 <cbor_encode_text_string>
    cbor_encode_int(&map, reboot_cnt);
   19db6:	4b6f      	ldr	r3, [pc, #444]	; (19f74 <log_reboot_write+0x24c>)
   19db8:	881a      	ldrh	r2, [r3, #0]
   19dba:	2300      	movs	r3, #0
   19dbc:	a806      	add	r0, sp, #24
   19dbe:	f00f f876 	bl	28eae <cbor_encode_int>
   19dc2:	2203      	movs	r2, #3
   19dc4:	496c      	ldr	r1, [pc, #432]	; (19f78 <log_reboot_write+0x250>)
   19dc6:	a806      	add	r0, sp, #24
   19dc8:	f00f f8e6 	bl	28f98 <cbor_encode_text_string>
                  ver.iv_major, ver.iv_minor, ver.iv_revision,
   19dcc:	f89d 3269 	ldrb.w	r3, [sp, #617]	; 0x269
   19dd0:	f8bd 226a 	ldrh.w	r2, [sp, #618]	; 0x26a
    snprintf(buf, sizeof buf, "%u.%u.%u.%u",
   19dd4:	999b      	ldr	r1, [sp, #620]	; 0x26c
   19dd6:	9102      	str	r1, [sp, #8]
   19dd8:	9201      	str	r2, [sp, #4]
   19dda:	9300      	str	r3, [sp, #0]
   19ddc:	f89d 3268 	ldrb.w	r3, [sp, #616]	; 0x268
   19de0:	4a66      	ldr	r2, [pc, #408]	; (19f7c <log_reboot_write+0x254>)
   19de2:	f44f 7180 	mov.w	r1, #256	; 0x100
   19de6:	a852      	add	r0, sp, #328	; 0x148
   19de8:	f014 f907 	bl	2dffa <snprintf>
   19dec:	a852      	add	r0, sp, #328	; 0x148
   19dee:	f7fc febe 	bl	16b6e <strlen>
   19df2:	4602      	mov	r2, r0
   19df4:	a952      	add	r1, sp, #328	; 0x148
   19df6:	a806      	add	r0, sp, #24
   19df8:	f00f f8ce 	bl	28f98 <cbor_encode_text_string>
   19dfc:	2204      	movs	r2, #4
   19dfe:	4960      	ldr	r1, [pc, #384]	; (19f80 <log_reboot_write+0x258>)
   19e00:	a806      	add	r0, sp, #24
   19e02:	f00f f8c9 	bl	28f98 <cbor_encode_text_string>
    for (i = 0; i < sizeof hash; i++) {
   19e06:	4634      	mov	r4, r6
    off = 0;
   19e08:	4635      	mov	r5, r6
    for (i = 0; i < sizeof hash; i++) {
   19e0a:	2c1f      	cmp	r4, #31
   19e0c:	d80d      	bhi.n	19e2a <log_reboot_write+0x102>
                        (unsigned int)hash[i]);
   19e0e:	ab9c      	add	r3, sp, #624	; 0x270
   19e10:	4423      	add	r3, r4
        off += snprintf(buf + off, sizeof buf - off, "%02x",
   19e12:	f813 3c28 	ldrb.w	r3, [r3, #-40]
   19e16:	4a5b      	ldr	r2, [pc, #364]	; (19f84 <log_reboot_write+0x25c>)
   19e18:	f5c5 7180 	rsb	r1, r5, #256	; 0x100
   19e1c:	a852      	add	r0, sp, #328	; 0x148
   19e1e:	4428      	add	r0, r5
   19e20:	f014 f8eb 	bl	2dffa <snprintf>
   19e24:	4405      	add	r5, r0
    for (i = 0; i < sizeof hash; i++) {
   19e26:	3401      	adds	r4, #1
   19e28:	e7ef      	b.n	19e0a <log_reboot_write+0xe2>
   19e2a:	a852      	add	r0, sp, #328	; 0x148
   19e2c:	f7fc fe9f 	bl	16b6e <strlen>
   19e30:	4602      	mov	r2, r0
   19e32:	a952      	add	r1, sp, #328	; 0x148
   19e34:	a806      	add	r0, sp, #24
   19e36:	f00f f8af 	bl	28f98 <cbor_encode_text_string>
    if (info->file != NULL) {
   19e3a:	687b      	ldr	r3, [r7, #4]
   19e3c:	b1eb      	cbz	r3, 19e7a <log_reboot_write+0x152>
   19e3e:	2203      	movs	r2, #3
   19e40:	4951      	ldr	r1, [pc, #324]	; (19f88 <log_reboot_write+0x260>)
   19e42:	a806      	add	r0, sp, #24
   19e44:	f00f f8a8 	bl	28f98 <cbor_encode_text_string>
        if (strlen(info->file) > ((sizeof buf) / 3)) {
   19e48:	687c      	ldr	r4, [r7, #4]
   19e4a:	4620      	mov	r0, r4
   19e4c:	f7fc fe8f 	bl	16b6e <strlen>
   19e50:	2855      	cmp	r0, #85	; 0x55
   19e52:	d952      	bls.n	19efa <log_reboot_write+0x1d2>
            off = strlen(info->file) - ((sizeof buf) / 3);
   19e54:	f1a0 0355 	sub.w	r3, r0, #85	; 0x55
        snprintf(buf, sizeof buf, "%s:%d",
   19e58:	68ba      	ldr	r2, [r7, #8]
   19e5a:	9200      	str	r2, [sp, #0]
   19e5c:	4423      	add	r3, r4
   19e5e:	4a4b      	ldr	r2, [pc, #300]	; (19f8c <log_reboot_write+0x264>)
   19e60:	f44f 7180 	mov.w	r1, #256	; 0x100
   19e64:	a852      	add	r0, sp, #328	; 0x148
   19e66:	f014 f8c8 	bl	2dffa <snprintf>
   19e6a:	a852      	add	r0, sp, #328	; 0x148
   19e6c:	f7fc fe7f 	bl	16b6e <strlen>
   19e70:	4602      	mov	r2, r0
   19e72:	a952      	add	r1, sp, #328	; 0x148
   19e74:	a806      	add	r0, sp, #24
   19e76:	f00f f88f 	bl	28f98 <cbor_encode_text_string>
    if (info->pc != 0) {
   19e7a:	68fb      	ldr	r3, [r7, #12]
   19e7c:	2b00      	cmp	r3, #0
   19e7e:	d13e      	bne.n	19efe <log_reboot_write+0x1d6>
    state_flags = img_mgmt_state_flags(boot_current_slot);
   19e80:	4b39      	ldr	r3, [pc, #228]	; (19f68 <log_reboot_write+0x240>)
   19e82:	6818      	ldr	r0, [r3, #0]
   19e84:	f001 f968 	bl	1b158 <img_mgmt_state_flags>
   19e88:	4605      	mov	r5, r0
   19e8a:	2205      	movs	r2, #5
   19e8c:	4940      	ldr	r1, [pc, #256]	; (19f90 <log_reboot_write+0x268>)
   19e8e:	a806      	add	r0, sp, #24
   19e90:	f00f f882 	bl	28f98 <cbor_encode_text_string>
    buf[0] = '\0';
   19e94:	2300      	movs	r3, #0
   19e96:	f88d 3148 	strb.w	r3, [sp, #328]	; 0x148
    if (state_flags & IMG_MGMT_STATE_F_ACTIVE) {
   19e9a:	f015 0f04 	tst.w	r5, #4
   19e9e:	d139      	bne.n	19f14 <log_reboot_write+0x1ec>
    off = 0;
   19ea0:	4634      	mov	r4, r6
    if (!(flags & IMAGE_F_NON_BOOTABLE)) {
   19ea2:	9b05      	ldr	r3, [sp, #20]
   19ea4:	f013 0f10 	tst.w	r3, #16
   19ea8:	d03d      	beq.n	19f26 <log_reboot_write+0x1fe>
    if (state_flags & IMG_MGMT_STATE_F_CONFIRMED) {
   19eaa:	f015 0f02 	tst.w	r5, #2
   19eae:	d144      	bne.n	19f3a <log_reboot_write+0x212>
    if (state_flags & IMG_MGMT_STATE_F_PENDING) {
   19eb0:	f015 0f01 	tst.w	r5, #1
   19eb4:	d14b      	bne.n	19f4e <log_reboot_write+0x226>
    if (off > 1) {
   19eb6:	2c01      	cmp	r4, #1
   19eb8:	dd03      	ble.n	19ec2 <log_reboot_write+0x19a>
        buf[off - 1] = '\0';
   19eba:	3c01      	subs	r4, #1
   19ebc:	ab52      	add	r3, sp, #328	; 0x148
   19ebe:	2200      	movs	r2, #0
   19ec0:	551a      	strb	r2, [r3, r4]
   19ec2:	a852      	add	r0, sp, #328	; 0x148
   19ec4:	f7fc fe53 	bl	16b6e <strlen>
   19ec8:	4602      	mov	r2, r0
   19eca:	a952      	add	r1, sp, #328	; 0x148
   19ecc:	a806      	add	r0, sp, #24
   19ece:	f00f f863 	bl	28f98 <cbor_encode_text_string>
    cbor_buf_len = cbor_buf_writer_buffer_size(&writer, cbor_enc_buf) + 1;
   19ed2:	a912      	add	r1, sp, #72	; 0x48
   19ed4:	a80e      	add	r0, sp, #56	; 0x38
   19ed6:	f00e fe8d 	bl	28bf4 <cbor_buf_writer_buffer_size>
   19eda:	1c44      	adds	r4, r0, #1
    rc = cbor_encoder_close_container(&enc, &map);
   19edc:	a906      	add	r1, sp, #24
   19ede:	a80a      	add	r0, sp, #40	; 0x28
   19ee0:	f00f f87b 	bl	28fda <cbor_encoder_close_container>
    if (rc != 0) {
   19ee4:	2800      	cmp	r0, #0
   19ee6:	d13c      	bne.n	19f62 <log_reboot_write+0x23a>
    modlog_append(LOG_MODULE_REBOOT, LOG_LEVEL_CRITICAL, LOG_ETYPE_CBOR,
   19ee8:	b2a4      	uxth	r4, r4
   19eea:	9400      	str	r4, [sp, #0]
   19eec:	ab12      	add	r3, sp, #72	; 0x48
   19eee:	2201      	movs	r2, #1
   19ef0:	2104      	movs	r1, #4
   19ef2:	2006      	movs	r0, #6
   19ef4:	f7ff fc10 	bl	19718 <modlog_append>
    return 0;
   19ef8:	e720      	b.n	19d3c <log_reboot_write+0x14>
        off  = 0;
   19efa:	4633      	mov	r3, r6
   19efc:	e7ac      	b.n	19e58 <log_reboot_write+0x130>
   19efe:	2202      	movs	r2, #2
   19f00:	4924      	ldr	r1, [pc, #144]	; (19f94 <log_reboot_write+0x26c>)
   19f02:	a806      	add	r0, sp, #24
   19f04:	f00f f848 	bl	28f98 <cbor_encode_text_string>
        cbor_encode_int(&map, info->pc);
   19f08:	68fa      	ldr	r2, [r7, #12]
   19f0a:	2300      	movs	r3, #0
   19f0c:	a806      	add	r0, sp, #24
   19f0e:	f00e ffce 	bl	28eae <cbor_encode_int>
   19f12:	e7b5      	b.n	19e80 <log_reboot_write+0x158>
        off += snprintf(buf + off, sizeof buf - off, "%s ", "active");
   19f14:	4b20      	ldr	r3, [pc, #128]	; (19f98 <log_reboot_write+0x270>)
   19f16:	4a21      	ldr	r2, [pc, #132]	; (19f9c <log_reboot_write+0x274>)
   19f18:	f44f 7180 	mov.w	r1, #256	; 0x100
   19f1c:	a852      	add	r0, sp, #328	; 0x148
   19f1e:	f014 f86c 	bl	2dffa <snprintf>
   19f22:	2407      	movs	r4, #7
   19f24:	e7bd      	b.n	19ea2 <log_reboot_write+0x17a>
        off += snprintf(buf + off, sizeof buf - off, "%s ", "bootable");
   19f26:	4b1e      	ldr	r3, [pc, #120]	; (19fa0 <log_reboot_write+0x278>)
   19f28:	4a1c      	ldr	r2, [pc, #112]	; (19f9c <log_reboot_write+0x274>)
   19f2a:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   19f2e:	a852      	add	r0, sp, #328	; 0x148
   19f30:	4420      	add	r0, r4
   19f32:	f014 f862 	bl	2dffa <snprintf>
   19f36:	4404      	add	r4, r0
   19f38:	e7b7      	b.n	19eaa <log_reboot_write+0x182>
        off += snprintf(buf + off, sizeof buf - off, "%s ", "confirmed");
   19f3a:	4b1a      	ldr	r3, [pc, #104]	; (19fa4 <log_reboot_write+0x27c>)
   19f3c:	4a17      	ldr	r2, [pc, #92]	; (19f9c <log_reboot_write+0x274>)
   19f3e:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   19f42:	a852      	add	r0, sp, #328	; 0x148
   19f44:	4420      	add	r0, r4
   19f46:	f014 f858 	bl	2dffa <snprintf>
   19f4a:	4404      	add	r4, r0
   19f4c:	e7b0      	b.n	19eb0 <log_reboot_write+0x188>
        off += snprintf(buf + off, sizeof buf - off, "%s ", "pending");
   19f4e:	4b16      	ldr	r3, [pc, #88]	; (19fa8 <log_reboot_write+0x280>)
   19f50:	4a12      	ldr	r2, [pc, #72]	; (19f9c <log_reboot_write+0x274>)
   19f52:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   19f56:	a852      	add	r0, sp, #328	; 0x148
   19f58:	4420      	add	r0, r4
   19f5a:	f014 f84e 	bl	2dffa <snprintf>
   19f5e:	4404      	add	r4, r0
   19f60:	e7a9      	b.n	19eb6 <log_reboot_write+0x18e>
        return SYS_ENOMEM;
   19f62:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   19f66:	e6e9      	b.n	19d3c <log_reboot_write+0x14>
   19f68:	10004fb0 	.word	0x10004fb0
   19f6c:	00030928 	.word	0x00030928
   19f70:	0003092c 	.word	0x0003092c
   19f74:	10003376 	.word	0x10003376
   19f78:	00030930 	.word	0x00030930
   19f7c:	00030934 	.word	0x00030934
   19f80:	00030940 	.word	0x00030940
   19f84:	0003141c 	.word	0x0003141c
   19f88:	00030948 	.word	0x00030948
   19f8c:	0003094c 	.word	0x0003094c
   19f90:	00030958 	.word	0x00030958
   19f94:	00030954 	.word	0x00030954
   19f98:	00030960 	.word	0x00030960
   19f9c:	00030968 	.word	0x00030968
   19fa0:	0003096c 	.word	0x0003096c
   19fa4:	00030978 	.word	0x00030978
   19fa8:	00030984 	.word	0x00030984

00019fac <log_reboot>:
{
   19fac:	b538      	push	{r3, r4, r5, lr}
    if (log_reboot_written) {
   19fae:	4b0d      	ldr	r3, [pc, #52]	; (19fe4 <log_reboot+0x38>)
   19fb0:	f993 3000 	ldrsb.w	r3, [r3]
   19fb4:	b113      	cbz	r3, 19fbc <log_reboot+0x10>
        return 0;
   19fb6:	2500      	movs	r5, #0
}
   19fb8:	4628      	mov	r0, r5
   19fba:	bd38      	pop	{r3, r4, r5, pc}
   19fbc:	4604      	mov	r4, r0
    rc = log_reboot_write(info);
   19fbe:	f7ff feb3 	bl	19d28 <log_reboot_write>
    if (rc != 0) {
   19fc2:	4605      	mov	r5, r0
   19fc4:	2800      	cmp	r0, #0
   19fc6:	d1f7      	bne.n	19fb8 <log_reboot+0xc>
    if (info->reason != HAL_RESET_REQUESTED &&
   19fc8:	8823      	ldrh	r3, [r4, #0]
   19fca:	2b06      	cmp	r3, #6
   19fcc:	d0f4      	beq.n	19fb8 <log_reboot+0xc>
   19fce:	2b08      	cmp	r3, #8
   19fd0:	d0f2      	beq.n	19fb8 <log_reboot+0xc>
        log_reboot_written = 1;
   19fd2:	4b04      	ldr	r3, [pc, #16]	; (19fe4 <log_reboot+0x38>)
   19fd4:	2201      	movs	r2, #1
   19fd6:	701a      	strb	r2, [r3, #0]
        conf_save_one("reboot/written", "1");
   19fd8:	4903      	ldr	r1, [pc, #12]	; (19fe8 <log_reboot+0x3c>)
   19fda:	4804      	ldr	r0, [pc, #16]	; (19fec <log_reboot+0x40>)
   19fdc:	f7fd f960 	bl	172a0 <conf_save_one>
   19fe0:	e7ea      	b.n	19fb8 <log_reboot+0xc>
   19fe2:	bf00      	nop
   19fe4:	10003374 	.word	0x10003374
   19fe8:	000317c0 	.word	0x000317c0
   19fec:	00030890 	.word	0x00030890

00019ff0 <log_reboot_pkg_init>:

void
log_reboot_pkg_init(void)
{
   19ff0:	b510      	push	{r4, lr}
   19ff2:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   19ff4:	4b1f      	ldr	r3, [pc, #124]	; (1a074 <log_reboot_pkg_init+0x84>)
   19ff6:	781b      	ldrb	r3, [r3, #0]
   19ff8:	b15b      	cbz	r3, 1a012 <log_reboot_pkg_init+0x22>

    rc = conf_register(&reboot_conf_handler);
   19ffa:	481f      	ldr	r0, [pc, #124]	; (1a078 <log_reboot_pkg_init+0x88>)
   19ffc:	f7fd fa3c 	bl	17478 <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1a000:	b988      	cbnz	r0, 1a026 <log_reboot_pkg_init+0x36>

#if MYNEWT_VAL(REBOOT_LOG_FCB)
    rc = log_reboot_init_fcb();
   1a002:	f7ff fdf3 	bl	19bec <log_reboot_init_fcb>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1a006:	b9d8      	cbnz	r0, 1a040 <log_reboot_pkg_init+0x50>
#endif
#if MYNEWT_VAL(REBOOT_LOG_CONSOLE)
    rc = log_reboot_init_console();
   1a008:	f7ff fe3e 	bl	19c88 <log_reboot_init_console>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1a00c:	bb28      	cbnz	r0, 1a05a <log_reboot_pkg_init+0x6a>
#endif
}
   1a00e:	b002      	add	sp, #8
   1a010:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1a012:	f7fa fb27 	bl	14664 <hal_debugger_connected>
   1a016:	b100      	cbz	r0, 1a01a <log_reboot_pkg_init+0x2a>
   1a018:	be01      	bkpt	0x0001
   1a01a:	2300      	movs	r3, #0
   1a01c:	461a      	mov	r2, r3
   1a01e:	4619      	mov	r1, r3
   1a020:	4618      	mov	r0, r3
   1a022:	f7fa febf 	bl	14da4 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1a026:	f7fa fb1d 	bl	14664 <hal_debugger_connected>
   1a02a:	b100      	cbz	r0, 1a02e <log_reboot_pkg_init+0x3e>
   1a02c:	be01      	bkpt	0x0001
   1a02e:	2000      	movs	r0, #0
   1a030:	9000      	str	r0, [sp, #0]
   1a032:	4b12      	ldr	r3, [pc, #72]	; (1a07c <log_reboot_pkg_init+0x8c>)
   1a034:	681c      	ldr	r4, [r3, #0]
   1a036:	4603      	mov	r3, r0
   1a038:	4602      	mov	r2, r0
   1a03a:	4601      	mov	r1, r0
   1a03c:	47a0      	blx	r4
   1a03e:	e7e0      	b.n	1a002 <log_reboot_pkg_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1a040:	f7fa fb10 	bl	14664 <hal_debugger_connected>
   1a044:	b100      	cbz	r0, 1a048 <log_reboot_pkg_init+0x58>
   1a046:	be01      	bkpt	0x0001
   1a048:	2000      	movs	r0, #0
   1a04a:	9000      	str	r0, [sp, #0]
   1a04c:	4b0b      	ldr	r3, [pc, #44]	; (1a07c <log_reboot_pkg_init+0x8c>)
   1a04e:	681c      	ldr	r4, [r3, #0]
   1a050:	4603      	mov	r3, r0
   1a052:	4602      	mov	r2, r0
   1a054:	4601      	mov	r1, r0
   1a056:	47a0      	blx	r4
   1a058:	e7d6      	b.n	1a008 <log_reboot_pkg_init+0x18>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1a05a:	f7fa fb03 	bl	14664 <hal_debugger_connected>
   1a05e:	b100      	cbz	r0, 1a062 <log_reboot_pkg_init+0x72>
   1a060:	be01      	bkpt	0x0001
   1a062:	2000      	movs	r0, #0
   1a064:	9000      	str	r0, [sp, #0]
   1a066:	4b05      	ldr	r3, [pc, #20]	; (1a07c <log_reboot_pkg_init+0x8c>)
   1a068:	681c      	ldr	r4, [r3, #0]
   1a06a:	4603      	mov	r3, r0
   1a06c:	4602      	mov	r2, r0
   1a06e:	4601      	mov	r1, r0
   1a070:	47a0      	blx	r4
}
   1a072:	e7cc      	b.n	1a00e <log_reboot_pkg_init+0x1e>
   1a074:	10003404 	.word	0x10003404
   1a078:	10000264 	.word	0x10000264
   1a07c:	1000028c 	.word	0x1000028c

0001a080 <stats_offset>:
    STAILQ_HEAD_INITIALIZER(g_stats_registry);

static size_t
stats_offset(const struct stats_hdr *hdr)
{
    if (hdr->s_flags & STATS_HDR_F_PERSIST) {
   1a080:	88c3      	ldrh	r3, [r0, #6]
   1a082:	f013 0f01 	tst.w	r3, #1
   1a086:	d001      	beq.n	1a08c <stats_offset+0xc>
        return sizeof (struct stats_persisted_hdr);
   1a088:	2030      	movs	r0, #48	; 0x30
   1a08a:	4770      	bx	lr
    } else {
        return sizeof (struct stats_hdr);
   1a08c:	200c      	movs	r0, #12
    }
}
   1a08e:	4770      	bx	lr

0001a090 <stats_register_internal>:
    return (uint8_t *)hdr + offset;
}

static int
stats_register_internal(const char *name, struct stats_hdr *shdr)
{
   1a090:	b570      	push	{r4, r5, r6, lr}
   1a092:	4606      	mov	r6, r0
   1a094:	460d      	mov	r5, r1
    int rc;

    /* Don't allow duplicate entries, return an error if this stat
     * is already registered.
     */
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   1a096:	4b0f      	ldr	r3, [pc, #60]	; (1a0d4 <stats_register_internal+0x44>)
   1a098:	681c      	ldr	r4, [r3, #0]
   1a09a:	e000      	b.n	1a09e <stats_register_internal+0xe>
   1a09c:	68a4      	ldr	r4, [r4, #8]
   1a09e:	b14c      	cbz	r4, 1a0b4 <stats_register_internal+0x24>
        if (!strcmp(cur->s_name, name) || cur == shdr) {
   1a0a0:	4631      	mov	r1, r6
   1a0a2:	6820      	ldr	r0, [r4, #0]
   1a0a4:	f7fc fd57 	bl	16b56 <strcmp>
   1a0a8:	b188      	cbz	r0, 1a0ce <stats_register_internal+0x3e>
   1a0aa:	42ac      	cmp	r4, r5
   1a0ac:	d1f6      	bne.n	1a09c <stats_register_internal+0xc>

    STATS_INC(g_stats_stats, num_registered);

    return (0);
err:
    return (rc);
   1a0ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a0b2:	e00b      	b.n	1a0cc <stats_register_internal+0x3c>
    shdr->s_name = name;
   1a0b4:	602e      	str	r6, [r5, #0]
    STAILQ_INSERT_TAIL(&g_stats_registry, shdr, s_next);
   1a0b6:	2000      	movs	r0, #0
   1a0b8:	60a8      	str	r0, [r5, #8]
   1a0ba:	4b06      	ldr	r3, [pc, #24]	; (1a0d4 <stats_register_internal+0x44>)
   1a0bc:	685a      	ldr	r2, [r3, #4]
   1a0be:	6015      	str	r5, [r2, #0]
   1a0c0:	3508      	adds	r5, #8
   1a0c2:	605d      	str	r5, [r3, #4]
    STATS_INC(g_stats_stats, num_registered);
   1a0c4:	4a04      	ldr	r2, [pc, #16]	; (1a0d8 <stats_register_internal+0x48>)
   1a0c6:	68d3      	ldr	r3, [r2, #12]
   1a0c8:	3301      	adds	r3, #1
   1a0ca:	60d3      	str	r3, [r2, #12]
}
   1a0cc:	bd70      	pop	{r4, r5, r6, pc}
    return (rc);
   1a0ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a0d2:	e7fb      	b.n	1a0cc <stats_register_internal+0x3c>
   1a0d4:	10000284 	.word	0x10000284
   1a0d8:	100033f4 	.word	0x100033f4

0001a0dc <stats_size>:
    return hdr->s_cnt * hdr->s_size;
   1a0dc:	7943      	ldrb	r3, [r0, #5]
   1a0de:	7900      	ldrb	r0, [r0, #4]
}
   1a0e0:	fb00 f003 	mul.w	r0, r0, r3
   1a0e4:	4770      	bx	lr
	...

0001a0e8 <stats_walk>:
 * @return 0 on success, the return code of the walk_func on abort.
 *
 */
int
stats_walk(struct stats_hdr *hdr, stats_walk_func_t walk_func, void *arg)
{
   1a0e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a0ec:	b085      	sub	sp, #20
   1a0ee:	4605      	mov	r5, r0
   1a0f0:	460f      	mov	r7, r1
   1a0f2:	4690      	mov	r8, r2
    int rc;
#if MYNEWT_VAL(STATS_NAMES)
    int i;
#endif

    start = stats_offset(hdr);
   1a0f4:	f7ff ffc4 	bl	1a080 <stats_offset>
   1a0f8:	4681      	mov	r9, r0
   1a0fa:	b284      	uxth	r4, r0
    cur = start;
    end = start + stats_size(hdr);
   1a0fc:	4628      	mov	r0, r5
   1a0fe:	f7ff ffed 	bl	1a0dc <stats_size>
   1a102:	fa14 f680 	uxtah	r6, r4, r0
   1a106:	b2b6      	uxth	r6, r6

    while (cur < end) {
   1a108:	42b4      	cmp	r4, r6
   1a10a:	d21a      	bcs.n	1a142 <stats_walk+0x5a>
        /* Do this check irrespective of whether MYNEWT_VALUE(STATS_NAMES)
         * is set.  Users may only partially name elements in the statistics
         * structure.
         */
        if (name == NULL) {
            ent_n = (cur - start) / hdr->s_size;
   1a10c:	fa1f f389 	uxth.w	r3, r9
   1a110:	1ae3      	subs	r3, r4, r3
   1a112:	792a      	ldrb	r2, [r5, #4]
            len = snprintf(name_buf, sizeof(name_buf), "s%d", ent_n);
   1a114:	fb93 f3f2 	sdiv	r3, r3, r2
   1a118:	4a0c      	ldr	r2, [pc, #48]	; (1a14c <stats_walk+0x64>)
   1a11a:	210c      	movs	r1, #12
   1a11c:	a801      	add	r0, sp, #4
   1a11e:	f013 ff6c 	bl	2dffa <snprintf>
            name_buf[len] = '\0';
   1a122:	ab04      	add	r3, sp, #16
   1a124:	4418      	add	r0, r3
   1a126:	2300      	movs	r3, #0
   1a128:	f800 3c0c 	strb.w	r3, [r0, #-12]
            name = name_buf;
        }

        rc = walk_func(hdr, arg, name, cur);
   1a12c:	4623      	mov	r3, r4
   1a12e:	aa01      	add	r2, sp, #4
   1a130:	4641      	mov	r1, r8
   1a132:	4628      	mov	r0, r5
   1a134:	47b8      	blx	r7
        if (rc != 0) {
   1a136:	4603      	mov	r3, r0
   1a138:	b920      	cbnz	r0, 1a144 <stats_walk+0x5c>
        }

        /* Statistics are variable sized, move forward either 16, 32 or 64
         * bits in the structure.
         */
        cur += hdr->s_size;
   1a13a:	792b      	ldrb	r3, [r5, #4]
   1a13c:	441c      	add	r4, r3
   1a13e:	b2a4      	uxth	r4, r4
   1a140:	e7e2      	b.n	1a108 <stats_walk+0x20>
    }

    return (0);
   1a142:	2300      	movs	r3, #0
err:
    return (rc);
}
   1a144:	4618      	mov	r0, r3
   1a146:	b005      	add	sp, #20
   1a148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a14c:	00030994 	.word	0x00030994

0001a150 <stats_init>:
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_init(struct stats_hdr *shdr, uint8_t size, uint8_t cnt,
        const struct stats_name_map *map, uint8_t map_cnt)
{
   1a150:	b570      	push	{r4, r5, r6, lr}
   1a152:	4604      	mov	r4, r0
   1a154:	460e      	mov	r6, r1
   1a156:	4615      	mov	r5, r2
    size_t offset;

    offset = stats_offset(shdr);
   1a158:	f7ff ff92 	bl	1a080 <stats_offset>
    memset((uint8_t *)shdr + offset, 0, size * cnt);
   1a15c:	fb05 f206 	mul.w	r2, r5, r6
   1a160:	2100      	movs	r1, #0
   1a162:	4420      	add	r0, r4
   1a164:	f7fc fcdb 	bl	16b1e <memset>

    shdr->s_size = size;
   1a168:	7126      	strb	r6, [r4, #4]
    shdr->s_cnt = cnt;
   1a16a:	7165      	strb	r5, [r4, #5]
    shdr->s_flags = 0;
   1a16c:	2000      	movs	r0, #0
   1a16e:	80e0      	strh	r0, [r4, #6]
    shdr->s_map = map;
    shdr->s_map_cnt = map_cnt;
#endif

    return (0);
}
   1a170:	bd70      	pop	{r4, r5, r6, pc}
	...

0001a174 <stats_module_init_internal>:
{
   1a174:	b500      	push	{lr}
   1a176:	b083      	sub	sp, #12
    STAILQ_INIT(&g_stats_registry);
   1a178:	4a09      	ldr	r2, [pc, #36]	; (1a1a0 <stats_module_init_internal+0x2c>)
   1a17a:	2300      	movs	r3, #0
   1a17c:	6013      	str	r3, [r2, #0]
   1a17e:	6052      	str	r2, [r2, #4]
    rc = stats_init(STATS_HDR(g_stats_stats),
   1a180:	9300      	str	r3, [sp, #0]
   1a182:	2201      	movs	r2, #1
   1a184:	2104      	movs	r1, #4
   1a186:	4807      	ldr	r0, [pc, #28]	; (1a1a4 <stats_module_init_internal+0x30>)
   1a188:	f7ff ffe2 	bl	1a150 <stats_init>
    if (rc) {
   1a18c:	b110      	cbz	r0, 1a194 <stats_module_init_internal+0x20>
}
   1a18e:	b003      	add	sp, #12
   1a190:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = stats_register_internal("stat", STATS_HDR(g_stats_stats));
   1a194:	4903      	ldr	r1, [pc, #12]	; (1a1a4 <stats_module_init_internal+0x30>)
   1a196:	4804      	ldr	r0, [pc, #16]	; (1a1a8 <stats_module_init_internal+0x34>)
   1a198:	f7ff ff7a 	bl	1a090 <stats_register_internal>
    if (rc) {
   1a19c:	e7f7      	b.n	1a18e <stats_module_init_internal+0x1a>
   1a19e:	bf00      	nop
   1a1a0:	10000284 	.word	0x10000284
   1a1a4:	100033f4 	.word	0x100033f4
   1a1a8:	00030998 	.word	0x00030998

0001a1ac <stats_module_init>:
{
   1a1ac:	b510      	push	{r4, lr}
   1a1ae:	b082      	sub	sp, #8
    SYSINIT_ASSERT_ACTIVE();
   1a1b0:	4b11      	ldr	r3, [pc, #68]	; (1a1f8 <stats_module_init+0x4c>)
   1a1b2:	781b      	ldrb	r3, [r3, #0]
   1a1b4:	b123      	cbz	r3, 1a1c0 <stats_module_init+0x14>
    if (g_stats_stats.snum_registered) {
   1a1b6:	4b11      	ldr	r3, [pc, #68]	; (1a1fc <stats_module_init+0x50>)
   1a1b8:	68db      	ldr	r3, [r3, #12]
   1a1ba:	b15b      	cbz	r3, 1a1d4 <stats_module_init+0x28>
}
   1a1bc:	b002      	add	sp, #8
   1a1be:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1a1c0:	f7fa fa50 	bl	14664 <hal_debugger_connected>
   1a1c4:	b100      	cbz	r0, 1a1c8 <stats_module_init+0x1c>
   1a1c6:	be01      	bkpt	0x0001
   1a1c8:	2300      	movs	r3, #0
   1a1ca:	461a      	mov	r2, r3
   1a1cc:	4619      	mov	r1, r3
   1a1ce:	4618      	mov	r0, r3
   1a1d0:	f7fa fde8 	bl	14da4 <__assert_func>
    rc = stats_module_init_internal();
   1a1d4:	f7ff ffce 	bl	1a174 <stats_module_init_internal>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1a1d8:	2800      	cmp	r0, #0
   1a1da:	d0ef      	beq.n	1a1bc <stats_module_init+0x10>
   1a1dc:	f7fa fa42 	bl	14664 <hal_debugger_connected>
   1a1e0:	b100      	cbz	r0, 1a1e4 <stats_module_init+0x38>
   1a1e2:	be01      	bkpt	0x0001
   1a1e4:	2000      	movs	r0, #0
   1a1e6:	9000      	str	r0, [sp, #0]
   1a1e8:	4b05      	ldr	r3, [pc, #20]	; (1a200 <stats_module_init+0x54>)
   1a1ea:	681c      	ldr	r4, [r3, #0]
   1a1ec:	4603      	mov	r3, r0
   1a1ee:	4602      	mov	r2, r0
   1a1f0:	4601      	mov	r1, r0
   1a1f2:	47a0      	blx	r4
   1a1f4:	e7e2      	b.n	1a1bc <stats_module_init+0x10>
   1a1f6:	bf00      	nop
   1a1f8:	10003404 	.word	0x10003404
   1a1fc:	100033f4 	.word	0x100033f4
   1a200:	1000028c 	.word	0x1000028c

0001a204 <stats_group_find>:
 *
 * @return statistic structure if found, NULL if not found.
 */
struct stats_hdr *
stats_group_find(const char *name)
{
   1a204:	b538      	push	{r3, r4, r5, lr}
   1a206:	4605      	mov	r5, r0
    struct stats_hdr *cur;

    cur = NULL;
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   1a208:	4b05      	ldr	r3, [pc, #20]	; (1a220 <stats_group_find+0x1c>)
   1a20a:	681c      	ldr	r4, [r3, #0]
   1a20c:	b134      	cbz	r4, 1a21c <stats_group_find+0x18>
        if (!strcmp(cur->s_name, name)) {
   1a20e:	4629      	mov	r1, r5
   1a210:	6820      	ldr	r0, [r4, #0]
   1a212:	f7fc fca0 	bl	16b56 <strcmp>
   1a216:	b108      	cbz	r0, 1a21c <stats_group_find+0x18>
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   1a218:	68a4      	ldr	r4, [r4, #8]
   1a21a:	e7f7      	b.n	1a20c <stats_group_find+0x8>
            break;
        }
    }

    return (cur);
}
   1a21c:	4620      	mov	r0, r4
   1a21e:	bd38      	pop	{r3, r4, r5, pc}
   1a220:	10000284 	.word	0x10000284

0001a224 <stats_register>:
 *
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_register(const char *name, struct stats_hdr *shdr)
{
   1a224:	b538      	push	{r3, r4, r5, lr}
   1a226:	4604      	mov	r4, r0
   1a228:	460d      	mov	r5, r1
    /*
     * We should always have at least "stat" registered so if there are no stats
     * registered, try to initialize module first. This allows to register stat
     * before sysinit is called (e.g. from BSP).
     */
    if (g_stats_stats.snum_registered == 0) {
   1a22a:	4b07      	ldr	r3, [pc, #28]	; (1a248 <stats_register+0x24>)
   1a22c:	68db      	ldr	r3, [r3, #12]
   1a22e:	b913      	cbnz	r3, 1a236 <stats_register+0x12>
        if (stats_module_init_internal()) {
   1a230:	f7ff ffa0 	bl	1a174 <stats_module_init_internal>
   1a234:	b920      	cbnz	r0, 1a240 <stats_register+0x1c>
            return -1;
        }
    }

    return stats_register_internal(name, shdr);
   1a236:	4629      	mov	r1, r5
   1a238:	4620      	mov	r0, r4
   1a23a:	f7ff ff29 	bl	1a090 <stats_register_internal>
}
   1a23e:	bd38      	pop	{r3, r4, r5, pc}
            return -1;
   1a240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a244:	e7fb      	b.n	1a23e <stats_register+0x1a>
   1a246:	bf00      	nop
   1a248:	100033f4 	.word	0x100033f4

0001a24c <stats_init_and_reg>:
 */
int
stats_init_and_reg(struct stats_hdr *shdr, uint8_t size, uint8_t cnt,
                   const struct stats_name_map *map, uint8_t map_cnt,
                   const char *name)
{
   1a24c:	b530      	push	{r4, r5, lr}
   1a24e:	b083      	sub	sp, #12
   1a250:	4604      	mov	r4, r0
    int rc;

    rc = stats_init(shdr, size, cnt, map, map_cnt);
   1a252:	f89d 5018 	ldrb.w	r5, [sp, #24]
   1a256:	9500      	str	r5, [sp, #0]
   1a258:	f7ff ff7a 	bl	1a150 <stats_init>
    if (rc != 0) {
   1a25c:	b108      	cbz	r0, 1a262 <stats_init_and_reg+0x16>
    if (rc != 0) {
        return rc;
    }

    return rc;
}
   1a25e:	b003      	add	sp, #12
   1a260:	bd30      	pop	{r4, r5, pc}
    rc = stats_register(name, shdr);
   1a262:	4621      	mov	r1, r4
   1a264:	9807      	ldr	r0, [sp, #28]
   1a266:	f7ff ffdd 	bl	1a224 <stats_register>
    if (rc != 0) {
   1a26a:	e7f8      	b.n	1a25e <stats_init_and_reg+0x12>

0001a26c <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   1a26c:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   1a26e:	f7fa fd99 	bl	14da4 <__assert_func>
	...

0001a274 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   1a274:	4b01      	ldr	r3, [pc, #4]	; (1a27c <sysinit_start+0x8>)
   1a276:	2201      	movs	r2, #1
   1a278:	701a      	strb	r2, [r3, #0]
}
   1a27a:	4770      	bx	lr
   1a27c:	10003404 	.word	0x10003404

0001a280 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   1a280:	4b01      	ldr	r3, [pc, #4]	; (1a288 <sysinit_end+0x8>)
   1a282:	2200      	movs	r2, #0
   1a284:	701a      	strb	r2, [r3, #0]
}
   1a286:	4770      	bx	lr
   1a288:	10003404 	.word	0x10003404

0001a28c <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   1a28c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a28e:	b083      	sub	sp, #12
   1a290:	460d      	mov	r5, r1
   1a292:	4617      	mov	r7, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   1a294:	b29e      	uxth	r6, r3
   1a296:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a298:	9300      	str	r3, [sp, #0]
   1a29a:	4603      	mov	r3, r0
   1a29c:	9a08      	ldr	r2, [sp, #32]
   1a29e:	4631      	mov	r1, r6
   1a2a0:	4628      	mov	r0, r5
   1a2a2:	f7fb fd8d 	bl	15dc0 <os_mempool_init>
    if (rc != 0) {
   1a2a6:	b108      	cbz	r0, 1a2ac <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1a2a8:	b003      	add	sp, #12
   1a2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   1a2ac:	4633      	mov	r3, r6
   1a2ae:	9a08      	ldr	r2, [sp, #32]
   1a2b0:	b292      	uxth	r2, r2
   1a2b2:	4629      	mov	r1, r5
   1a2b4:	4638      	mov	r0, r7
   1a2b6:	f7fb f99e 	bl	155f6 <os_mbuf_pool_init>
    if (rc != 0) {
   1a2ba:	e7f5      	b.n	1a2a8 <mem_init_mbuf_pool+0x1c>

0001a2bc <mem_split_frag>:
 *                              NULL on failure.
 */
struct os_mbuf *
mem_split_frag(struct os_mbuf **om, uint16_t max_frag_sz,
               mem_frag_alloc_fn *alloc_cb, void *cb_arg)
{
   1a2bc:	b570      	push	{r4, r5, r6, lr}
   1a2be:	4604      	mov	r4, r0
   1a2c0:	460d      	mov	r5, r1
   1a2c2:	4619      	mov	r1, r3
    struct os_mbuf *frag;
    int rc;

    if (OS_MBUF_PKTLEN(*om) <= max_frag_sz) {
   1a2c4:	6806      	ldr	r6, [r0, #0]
   1a2c6:	8a33      	ldrh	r3, [r6, #16]
   1a2c8:	42ab      	cmp	r3, r5
   1a2ca:	d913      	bls.n	1a2f4 <mem_split_frag+0x38>
        *om = NULL;
        return frag;
    }

    /* Packet needs to be split.  Allocate a new buffer for the fragment. */
    frag = alloc_cb(max_frag_sz, cb_arg);
   1a2cc:	4628      	mov	r0, r5
   1a2ce:	4790      	blx	r2
    if (frag == NULL) {
   1a2d0:	4606      	mov	r6, r0
   1a2d2:	b190      	cbz	r0, 1a2fa <mem_split_frag+0x3e>
        goto err;
    }

    /* Move data from the front of the packet into the fragment mbuf. */
    rc = os_mbuf_appendfrom(frag, *om, 0, max_frag_sz);
   1a2d4:	462b      	mov	r3, r5
   1a2d6:	2200      	movs	r2, #0
   1a2d8:	6821      	ldr	r1, [r4, #0]
   1a2da:	f7fb fa49 	bl	15770 <os_mbuf_appendfrom>
    if (rc != 0) {
   1a2de:	b960      	cbnz	r0, 1a2fa <mem_split_frag+0x3e>
        goto err;
    }
    os_mbuf_adj(*om, max_frag_sz);
   1a2e0:	4629      	mov	r1, r5
   1a2e2:	6820      	ldr	r0, [r4, #0]
   1a2e4:	f7fb fa9d 	bl	15822 <os_mbuf_adj>

    /* Free unused portion of of source mbuf chain, if possible. */
    *om = os_mbuf_trim_front(*om);
   1a2e8:	6820      	ldr	r0, [r4, #0]
   1a2ea:	f7fb fcab 	bl	15c44 <os_mbuf_trim_front>
   1a2ee:	6020      	str	r0, [r4, #0]
    return frag;

err:
    os_mbuf_free_chain(frag);
    return NULL;
}
   1a2f0:	4630      	mov	r0, r6
   1a2f2:	bd70      	pop	{r4, r5, r6, pc}
        *om = NULL;
   1a2f4:	2300      	movs	r3, #0
   1a2f6:	6003      	str	r3, [r0, #0]
        return frag;
   1a2f8:	e7fa      	b.n	1a2f0 <mem_split_frag+0x34>
    os_mbuf_free_chain(frag);
   1a2fa:	4630      	mov	r0, r6
   1a2fc:	f7fb f9ba 	bl	15674 <os_mbuf_free_chain>
    return NULL;
   1a300:	2600      	movs	r6, #0
   1a302:	e7f5      	b.n	1a2f0 <mem_split_frag+0x34>

0001a304 <rwlock_complete_handoff>:
static void
rwlock_complete_handoff(struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);
    RWLOCK_DBG_ASSERT(lock->handoffs > 0);
    lock->handoffs--;
   1a304:	f890 3020 	ldrb.w	r3, [r0, #32]
   1a308:	3b01      	subs	r3, #1
   1a30a:	f880 3020 	strb.w	r3, [r0, #32]
}
   1a30e:	4770      	bx	lr

0001a310 <rwlock_read_must_block>:
static bool
rwlock_read_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   1a310:	69c3      	ldr	r3, [r0, #28]
           lock->pending_writers > 0 ||
   1a312:	f013 2fff 	tst.w	r3, #4278255360	; 0xff00ff00
   1a316:	d104      	bne.n	1a322 <rwlock_read_must_block+0x12>
           lock->handoffs > 0;
   1a318:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->pending_writers > 0 ||
   1a31c:	b11b      	cbz	r3, 1a326 <rwlock_read_must_block+0x16>
   1a31e:	2001      	movs	r0, #1
   1a320:	4770      	bx	lr
   1a322:	2001      	movs	r0, #1
   1a324:	4770      	bx	lr
   1a326:	2000      	movs	r0, #0
}
   1a328:	4770      	bx	lr

0001a32a <rwlock_write_must_block>:
static bool
rwlock_write_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   1a32a:	8b83      	ldrh	r3, [r0, #28]
           lock->num_readers > 0 ||
   1a32c:	b923      	cbnz	r3, 1a338 <rwlock_write_must_block+0xe>
           lock->handoffs > 0;
   1a32e:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->num_readers > 0 ||
   1a332:	b11b      	cbz	r3, 1a33c <rwlock_write_must_block+0x12>
   1a334:	2001      	movs	r0, #1
   1a336:	4770      	bx	lr
   1a338:	2001      	movs	r0, #1
   1a33a:	4770      	bx	lr
   1a33c:	2000      	movs	r0, #0
}
   1a33e:	4770      	bx	lr

0001a340 <rwlock_unblock>:
{
   1a340:	b510      	push	{r4, lr}
   1a342:	4604      	mov	r4, r0
    if (lock->pending_writers > 0) {
   1a344:	7fc3      	ldrb	r3, [r0, #31]
   1a346:	b91b      	cbnz	r3, 1a350 <rwlock_unblock+0x10>
        lock->handoffs = lock->pending_readers;
   1a348:	7f83      	ldrb	r3, [r0, #30]
   1a34a:	f880 3020 	strb.w	r3, [r0, #32]
        while (lock->pending_readers > 0) {
   1a34e:	e010      	b.n	1a372 <rwlock_unblock+0x32>
        lock->handoffs = 1;
   1a350:	2301      	movs	r3, #1
   1a352:	f880 3020 	strb.w	r3, [r0, #32]
        os_sem_release(&lock->wsem);
   1a356:	3014      	adds	r0, #20
   1a358:	f013 f90a 	bl	2d570 <os_sem_release>
        lock->pending_writers--;
   1a35c:	7fe3      	ldrb	r3, [r4, #31]
   1a35e:	3b01      	subs	r3, #1
   1a360:	77e3      	strb	r3, [r4, #31]
   1a362:	e009      	b.n	1a378 <rwlock_unblock+0x38>
            os_sem_release(&lock->rsem);
   1a364:	f104 000c 	add.w	r0, r4, #12
   1a368:	f013 f902 	bl	2d570 <os_sem_release>
            lock->pending_readers--;
   1a36c:	7fa3      	ldrb	r3, [r4, #30]
   1a36e:	3b01      	subs	r3, #1
   1a370:	77a3      	strb	r3, [r4, #30]
        while (lock->pending_readers > 0) {
   1a372:	7fa3      	ldrb	r3, [r4, #30]
   1a374:	2b00      	cmp	r3, #0
   1a376:	d1f5      	bne.n	1a364 <rwlock_unblock+0x24>
}
   1a378:	bd10      	pop	{r4, pc}

0001a37a <rwlock_acquire_read>:

void
rwlock_acquire_read(struct rwlock *lock)
{
   1a37a:	b538      	push	{r3, r4, r5, lr}
   1a37c:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1a37e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a382:	f7fc fb0b 	bl	1699c <os_mutex_pend>

    if (rwlock_read_must_block(lock)) {
   1a386:	4620      	mov	r0, r4
   1a388:	f7ff ffc2 	bl	1a310 <rwlock_read_must_block>
   1a38c:	b140      	cbz	r0, 1a3a0 <rwlock_acquire_read+0x26>
        lock->pending_readers++;
   1a38e:	7fa3      	ldrb	r3, [r4, #30]
   1a390:	3301      	adds	r3, #1
   1a392:	77a3      	strb	r3, [r4, #30]
        acquired = false;
   1a394:	2500      	movs	r5, #0
    } else {
        lock->num_readers++;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   1a396:	4620      	mov	r0, r4
   1a398:	f7fc faa0 	bl	168dc <os_mutex_release>

    if (acquired) {
   1a39c:	b12d      	cbz	r5, 1a3aa <rwlock_acquire_read+0x30>
    /* Record reader ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->num_readers++;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   1a39e:	bd38      	pop	{r3, r4, r5, pc}
        lock->num_readers++;
   1a3a0:	7f23      	ldrb	r3, [r4, #28]
   1a3a2:	3301      	adds	r3, #1
   1a3a4:	7723      	strb	r3, [r4, #28]
        acquired = true;
   1a3a6:	2501      	movs	r5, #1
   1a3a8:	e7f5      	b.n	1a396 <rwlock_acquire_read+0x1c>
    os_sem_pend(&lock->rsem, OS_TIMEOUT_NEVER);
   1a3aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a3ae:	f104 000c 	add.w	r0, r4, #12
   1a3b2:	f013 f90f 	bl	2d5d4 <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1a3b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a3ba:	4620      	mov	r0, r4
   1a3bc:	f7fc faee 	bl	1699c <os_mutex_pend>
    lock->num_readers++;
   1a3c0:	7f23      	ldrb	r3, [r4, #28]
   1a3c2:	3301      	adds	r3, #1
   1a3c4:	7723      	strb	r3, [r4, #28]
    rwlock_complete_handoff(lock);
   1a3c6:	4620      	mov	r0, r4
   1a3c8:	f7ff ff9c 	bl	1a304 <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   1a3cc:	4620      	mov	r0, r4
   1a3ce:	f7fc fa85 	bl	168dc <os_mutex_release>
   1a3d2:	e7e4      	b.n	1a39e <rwlock_acquire_read+0x24>

0001a3d4 <rwlock_release_read>:

void
rwlock_release_read(struct rwlock *lock)
{
   1a3d4:	b510      	push	{r4, lr}
   1a3d6:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1a3d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a3dc:	f7fc fade 	bl	1699c <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->num_readers > 0);
    lock->num_readers--;
   1a3e0:	7f23      	ldrb	r3, [r4, #28]
   1a3e2:	3b01      	subs	r3, #1
   1a3e4:	b2db      	uxtb	r3, r3
   1a3e6:	7723      	strb	r3, [r4, #28]

    /* If this is the last active reader, unblock a pending writer if there is
     * one.
     */
    if (lock->num_readers == 0) {
   1a3e8:	b11b      	cbz	r3, 1a3f2 <rwlock_release_read+0x1e>
        rwlock_unblock(lock);
    }

    os_mutex_release(&lock->mtx);
   1a3ea:	4620      	mov	r0, r4
   1a3ec:	f7fc fa76 	bl	168dc <os_mutex_release>
}
   1a3f0:	bd10      	pop	{r4, pc}
        rwlock_unblock(lock);
   1a3f2:	4620      	mov	r0, r4
   1a3f4:	f7ff ffa4 	bl	1a340 <rwlock_unblock>
   1a3f8:	e7f7      	b.n	1a3ea <rwlock_release_read+0x16>

0001a3fa <rwlock_acquire_write>:

void
rwlock_acquire_write(struct rwlock *lock)
{
   1a3fa:	b538      	push	{r3, r4, r5, lr}
   1a3fc:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1a3fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a402:	f7fc facb 	bl	1699c <os_mutex_pend>

    if (rwlock_write_must_block(lock)) {
   1a406:	4620      	mov	r0, r4
   1a408:	f7ff ff8f 	bl	1a32a <rwlock_write_must_block>
   1a40c:	b140      	cbz	r0, 1a420 <rwlock_acquire_write+0x26>
        lock->pending_writers++;
   1a40e:	7fe3      	ldrb	r3, [r4, #31]
   1a410:	3301      	adds	r3, #1
   1a412:	77e3      	strb	r3, [r4, #31]
        acquired = false;
   1a414:	2500      	movs	r5, #0
    } else {
        lock->active_writer = true;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   1a416:	4620      	mov	r0, r4
   1a418:	f7fc fa60 	bl	168dc <os_mutex_release>

    if (acquired) {
   1a41c:	b11d      	cbz	r5, 1a426 <rwlock_acquire_write+0x2c>
    /* Record writer ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->active_writer = true;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   1a41e:	bd38      	pop	{r3, r4, r5, pc}
        lock->active_writer = true;
   1a420:	2501      	movs	r5, #1
   1a422:	7765      	strb	r5, [r4, #29]
        acquired = true;
   1a424:	e7f7      	b.n	1a416 <rwlock_acquire_write+0x1c>
    os_sem_pend(&lock->wsem, OS_TIMEOUT_NEVER);
   1a426:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a42a:	f104 0014 	add.w	r0, r4, #20
   1a42e:	f013 f8d1 	bl	2d5d4 <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1a432:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a436:	4620      	mov	r0, r4
   1a438:	f7fc fab0 	bl	1699c <os_mutex_pend>
    lock->active_writer = true;
   1a43c:	2301      	movs	r3, #1
   1a43e:	7763      	strb	r3, [r4, #29]
    rwlock_complete_handoff(lock);
   1a440:	4620      	mov	r0, r4
   1a442:	f7ff ff5f 	bl	1a304 <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   1a446:	4620      	mov	r0, r4
   1a448:	f7fc fa48 	bl	168dc <os_mutex_release>
   1a44c:	e7e7      	b.n	1a41e <rwlock_acquire_write+0x24>

0001a44e <rwlock_release_write>:

void
rwlock_release_write(struct rwlock *lock)
{
   1a44e:	b510      	push	{r4, lr}
   1a450:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1a452:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a456:	f7fc faa1 	bl	1699c <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->active_writer);
    lock->active_writer = false;
   1a45a:	2300      	movs	r3, #0
   1a45c:	7763      	strb	r3, [r4, #29]

    rwlock_unblock(lock);
   1a45e:	4620      	mov	r0, r4
   1a460:	f7ff ff6e 	bl	1a340 <rwlock_unblock>

    os_mutex_release(&lock->mtx);
   1a464:	4620      	mov	r0, r4
   1a466:	f7fc fa39 	bl	168dc <os_mutex_release>
}
   1a46a:	bd10      	pop	{r4, pc}

0001a46c <rwlock_init>:

int
rwlock_init(struct rwlock *lock)
{
   1a46c:	b510      	push	{r4, lr}
   1a46e:	4604      	mov	r4, r0
    int rc;

    *lock = (struct rwlock) { 0 };
   1a470:	2224      	movs	r2, #36	; 0x24
   1a472:	2100      	movs	r1, #0
   1a474:	f7fc fb53 	bl	16b1e <memset>

    rc = os_mutex_init(&lock->mtx);
   1a478:	4620      	mov	r0, r4
   1a47a:	f7fc fa25 	bl	168c8 <os_mutex_init>
    if (rc != 0) {
   1a47e:	b100      	cbz	r0, 1a482 <rwlock_init+0x16>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1a480:	bd10      	pop	{r4, pc}
    rc = os_sem_init(&lock->rsem, 0);
   1a482:	2100      	movs	r1, #0
   1a484:	f104 000c 	add.w	r0, r4, #12
   1a488:	f013 f869 	bl	2d55e <os_sem_init>
    if (rc != 0) {
   1a48c:	2800      	cmp	r0, #0
   1a48e:	d1f7      	bne.n	1a480 <rwlock_init+0x14>
    rc = os_sem_init(&lock->wsem, 0);
   1a490:	2100      	movs	r1, #0
   1a492:	f104 0014 	add.w	r0, r4, #20
   1a496:	f013 f862 	bl	2d55e <os_sem_init>
    if (rc != 0) {
   1a49a:	e7f1      	b.n	1a480 <rwlock_init+0x14>

0001a49c <scfg_find_setting_by_val>:
static struct scfg_setting *
scfg_find_setting_by_val(const struct scfg_group *group, const void *val)
{
    const struct scfg_setting *setting;

    SCFG_FOREACH_SETTING(group, setting) {
   1a49c:	6803      	ldr	r3, [r0, #0]
   1a49e:	6818      	ldr	r0, [r3, #0]
   1a4a0:	b120      	cbz	r0, 1a4ac <scfg_find_setting_by_val+0x10>
        if (setting->val == val) {
   1a4a2:	685a      	ldr	r2, [r3, #4]
   1a4a4:	428a      	cmp	r2, r1
   1a4a6:	d002      	beq.n	1a4ae <scfg_find_setting_by_val+0x12>
    SCFG_FOREACH_SETTING(group, setting) {
   1a4a8:	3310      	adds	r3, #16
   1a4aa:	e7f8      	b.n	1a49e <scfg_find_setting_by_val+0x2>
   1a4ac:	4770      	bx	lr
            /* Cast away const. */
            return (struct scfg_setting *)setting;
   1a4ae:	4618      	mov	r0, r3
        }
    }

    return NULL;
}
   1a4b0:	4770      	bx	lr

0001a4b2 <scfg_setting_id>:
{
   1a4b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a4b6:	4680      	mov	r8, r0
   1a4b8:	460e      	mov	r6, r1
   1a4ba:	4614      	mov	r4, r2
    group_len = strlen(group_name);
   1a4bc:	f7fc fb57 	bl	16b6e <strlen>
   1a4c0:	4605      	mov	r5, r0
    setting_len = strlen(setting_name);
   1a4c2:	4630      	mov	r0, r6
   1a4c4:	f7fc fb53 	bl	16b6e <strlen>
    assert(group_len + 1 + setting_len < SCFG_SETTING_ID_BUF_SIZE);
   1a4c8:	f105 0a01 	add.w	sl, r5, #1
   1a4cc:	eb0a 0900 	add.w	r9, sl, r0
   1a4d0:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   1a4d4:	dc12      	bgt.n	1a4fc <scfg_setting_id+0x4a>
   1a4d6:	4607      	mov	r7, r0
    memcpy(&buf[off], group_name, group_len);
   1a4d8:	462a      	mov	r2, r5
   1a4da:	4641      	mov	r1, r8
   1a4dc:	4620      	mov	r0, r4
   1a4de:	f7fc faf9 	bl	16ad4 <memcpy>
    buf[off] = '/';
   1a4e2:	232f      	movs	r3, #47	; 0x2f
   1a4e4:	5563      	strb	r3, [r4, r5]
    memcpy(&buf[off], setting_name, setting_len);
   1a4e6:	463a      	mov	r2, r7
   1a4e8:	4631      	mov	r1, r6
   1a4ea:	eb04 000a 	add.w	r0, r4, sl
   1a4ee:	f7fc faf1 	bl	16ad4 <memcpy>
    buf[off] = '\0';
   1a4f2:	2300      	movs	r3, #0
   1a4f4:	f804 3009 	strb.w	r3, [r4, r9]
}
   1a4f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    assert(group_len + 1 + setting_len < SCFG_SETTING_ID_BUF_SIZE);
   1a4fc:	f7fa f8b2 	bl	14664 <hal_debugger_connected>
   1a500:	b100      	cbz	r0, 1a504 <scfg_setting_id+0x52>
   1a502:	be01      	bkpt	0x0001
   1a504:	2300      	movs	r3, #0
   1a506:	461a      	mov	r2, r3
   1a508:	4619      	mov	r1, r3
   1a50a:	4618      	mov	r0, r3
   1a50c:	f7fa fc4a 	bl	14da4 <__assert_func>

0001a510 <scfg_handler_export>:
}

static int
scfg_handler_export(void (*func)(char *name, char *val),
                    enum conf_export_tgt tgt, void *arg)
{
   1a510:	b570      	push	{r4, r5, r6, lr}
   1a512:	b098      	sub	sp, #96	; 0x60
   1a514:	4606      	mov	r6, r0
   1a516:	4615      	mov	r5, r2
    char val_buf[SCFG_NUM_STR_BUF_SIZE];
    char *val;

    group = arg;

    SCFG_FOREACH_SETTING(group, setting) {
   1a518:	6814      	ldr	r4, [r2, #0]
   1a51a:	e009      	b.n	1a530 <scfg_handler_export+0x20>
        scfg_setting_id(group->handler.ch_name, setting->name, id_buf);
        if (setting->private) {
            val = "<set>";
        } else {
            val = conf_str_from_value(setting->type, setting->val,
   1a51c:	2315      	movs	r3, #21
   1a51e:	aa01      	add	r2, sp, #4
   1a520:	6861      	ldr	r1, [r4, #4]
   1a522:	7b20      	ldrb	r0, [r4, #12]
   1a524:	f7fd f8a6 	bl	17674 <conf_str_from_value>
   1a528:	4601      	mov	r1, r0
                                      val_buf, sizeof val_buf);
        }
        func(id_buf, val);
   1a52a:	a807      	add	r0, sp, #28
   1a52c:	47b0      	blx	r6
    SCFG_FOREACH_SETTING(group, setting) {
   1a52e:	3410      	adds	r4, #16
   1a530:	6821      	ldr	r1, [r4, #0]
   1a532:	b141      	cbz	r1, 1a546 <scfg_handler_export+0x36>
        scfg_setting_id(group->handler.ch_name, setting->name, id_buf);
   1a534:	aa07      	add	r2, sp, #28
   1a536:	68a8      	ldr	r0, [r5, #8]
   1a538:	f7ff ffbb 	bl	1a4b2 <scfg_setting_id>
        if (setting->private) {
   1a53c:	7b63      	ldrb	r3, [r4, #13]
   1a53e:	2b00      	cmp	r3, #0
   1a540:	d0ec      	beq.n	1a51c <scfg_handler_export+0xc>
            val = "<set>";
   1a542:	4902      	ldr	r1, [pc, #8]	; (1a54c <scfg_handler_export+0x3c>)
   1a544:	e7f1      	b.n	1a52a <scfg_handler_export+0x1a>
    }

    return 0;
}
   1a546:	2000      	movs	r0, #0
   1a548:	b018      	add	sp, #96	; 0x60
   1a54a:	bd70      	pop	{r4, r5, r6, pc}
   1a54c:	000309a0 	.word	0x000309a0

0001a550 <scfg_find_setting_by_name>:
{
   1a550:	b538      	push	{r3, r4, r5, lr}
   1a552:	460d      	mov	r5, r1
    SCFG_FOREACH_SETTING(group, setting) {
   1a554:	6804      	ldr	r4, [r0, #0]
   1a556:	6820      	ldr	r0, [r4, #0]
   1a558:	b130      	cbz	r0, 1a568 <scfg_find_setting_by_name+0x18>
        if (strcmp(setting->name, setting_name) == 0) {
   1a55a:	4629      	mov	r1, r5
   1a55c:	f7fc fafb 	bl	16b56 <strcmp>
   1a560:	b108      	cbz	r0, 1a566 <scfg_find_setting_by_name+0x16>
    SCFG_FOREACH_SETTING(group, setting) {
   1a562:	3410      	adds	r4, #16
   1a564:	e7f7      	b.n	1a556 <scfg_find_setting_by_name+0x6>
            return (struct scfg_setting *)setting;
   1a566:	4620      	mov	r0, r4
}
   1a568:	bd38      	pop	{r3, r4, r5, pc}

0001a56a <scfg_handler_get>:
    if (argc < 1) {
   1a56a:	2800      	cmp	r0, #0
   1a56c:	dd0e      	ble.n	1a58c <scfg_handler_get+0x22>
{
   1a56e:	b538      	push	{r3, r4, r5, lr}
   1a570:	4614      	mov	r4, r2
   1a572:	461d      	mov	r5, r3
    setting = scfg_find_setting_by_name(group, argv[0]);
   1a574:	6809      	ldr	r1, [r1, #0]
   1a576:	9804      	ldr	r0, [sp, #16]
   1a578:	f7ff ffea 	bl	1a550 <scfg_find_setting_by_name>
    if (setting == NULL) {
   1a57c:	b128      	cbz	r0, 1a58a <scfg_handler_get+0x20>
    return conf_str_from_value(setting->type, setting->val, buf, max_len);
   1a57e:	462b      	mov	r3, r5
   1a580:	4622      	mov	r2, r4
   1a582:	6841      	ldr	r1, [r0, #4]
   1a584:	7b00      	ldrb	r0, [r0, #12]
   1a586:	f7fd f875 	bl	17674 <conf_str_from_value>
}
   1a58a:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
   1a58c:	2000      	movs	r0, #0
}
   1a58e:	4770      	bx	lr

0001a590 <scfg_handler_set>:
    if (argc < 1) {
   1a590:	2800      	cmp	r0, #0
   1a592:	dd12      	ble.n	1a5ba <scfg_handler_set+0x2a>
{
   1a594:	b510      	push	{r4, lr}
   1a596:	4614      	mov	r4, r2
    setting = scfg_find_setting_by_name(group, argv[0]);
   1a598:	6809      	ldr	r1, [r1, #0]
   1a59a:	4618      	mov	r0, r3
   1a59c:	f7ff ffd8 	bl	1a550 <scfg_find_setting_by_name>
    if (setting == NULL) {
   1a5a0:	b170      	cbz	r0, 1a5c0 <scfg_handler_set+0x30>
    rc = conf_value_from_str(val, setting->type, setting->val,
   1a5a2:	6883      	ldr	r3, [r0, #8]
   1a5a4:	6842      	ldr	r2, [r0, #4]
   1a5a6:	7b01      	ldrb	r1, [r0, #12]
   1a5a8:	4620      	mov	r0, r4
   1a5aa:	f7fc ffa8 	bl	174fe <conf_value_from_str>
    if (rc != 0) {
   1a5ae:	b900      	cbnz	r0, 1a5b2 <scfg_handler_set+0x22>
}
   1a5b0:	bd10      	pop	{r4, pc}
        return os_error_to_sys(rc);
   1a5b2:	b2c0      	uxtb	r0, r0
   1a5b4:	f012 ffb2 	bl	2d51c <os_error_to_sys>
   1a5b8:	e7fa      	b.n	1a5b0 <scfg_handler_set+0x20>
        return SYS_EINVAL;
   1a5ba:	f06f 0001 	mvn.w	r0, #1
}
   1a5be:	4770      	bx	lr
        return SYS_ENOENT;
   1a5c0:	f06f 0003 	mvn.w	r0, #3
   1a5c4:	e7f4      	b.n	1a5b0 <scfg_handler_set+0x20>

0001a5c6 <scfg_save_setting>:

int
scfg_save_setting(const struct scfg_group *group,
                  const struct scfg_setting *setting)
{
   1a5c6:	b570      	push	{r4, r5, r6, lr}
   1a5c8:	b098      	sub	sp, #96	; 0x60
   1a5ca:	4605      	mov	r5, r0
   1a5cc:	460c      	mov	r4, r1
    char id_buf[SCFG_SETTING_ID_BUF_SIZE];
    char val_buf[SCFG_NUM_STR_BUF_SIZE];
    char *val;
    int rc;

    val = conf_str_from_value(setting->type, setting->val,
   1a5ce:	2315      	movs	r3, #21
   1a5d0:	aa01      	add	r2, sp, #4
   1a5d2:	6849      	ldr	r1, [r1, #4]
   1a5d4:	7b20      	ldrb	r0, [r4, #12]
   1a5d6:	f7fd f84d 	bl	17674 <conf_str_from_value>
                              val_buf, sizeof val_buf);
    if (val == NULL) {
   1a5da:	b180      	cbz	r0, 1a5fe <scfg_save_setting+0x38>
   1a5dc:	4606      	mov	r6, r0
        return SYS_EUNKNOWN;
    }

    scfg_setting_id(group->handler.ch_name, setting->name, id_buf);
   1a5de:	aa07      	add	r2, sp, #28
   1a5e0:	6821      	ldr	r1, [r4, #0]
   1a5e2:	68a8      	ldr	r0, [r5, #8]
   1a5e4:	f7ff ff65 	bl	1a4b2 <scfg_setting_id>

    rc = conf_save_one(id_buf, val);
   1a5e8:	4631      	mov	r1, r6
   1a5ea:	a807      	add	r0, sp, #28
   1a5ec:	f7fc fe58 	bl	172a0 <conf_save_one>
    if (rc != 0) {
   1a5f0:	b908      	cbnz	r0, 1a5f6 <scfg_save_setting+0x30>
        return os_error_to_sys(rc);
    }

    return 0;
}
   1a5f2:	b018      	add	sp, #96	; 0x60
   1a5f4:	bd70      	pop	{r4, r5, r6, pc}
        return os_error_to_sys(rc);
   1a5f6:	b2c0      	uxtb	r0, r0
   1a5f8:	f012 ff90 	bl	2d51c <os_error_to_sys>
   1a5fc:	e7f9      	b.n	1a5f2 <scfg_save_setting+0x2c>
        return SYS_EUNKNOWN;
   1a5fe:	f06f 000c 	mvn.w	r0, #12
   1a602:	e7f6      	b.n	1a5f2 <scfg_save_setting+0x2c>

0001a604 <scfg_save_val>:
    return scfg_save_setting(group, setting);
}

int
scfg_save_val(const struct scfg_group *group, const void *val)
{
   1a604:	b510      	push	{r4, lr}
   1a606:	4604      	mov	r4, r0
    const struct scfg_setting *setting;

    setting = scfg_find_setting_by_val(group, val);
   1a608:	f7ff ff48 	bl	1a49c <scfg_find_setting_by_val>
    if (setting == NULL) {
   1a60c:	b120      	cbz	r0, 1a618 <scfg_save_val+0x14>
   1a60e:	4601      	mov	r1, r0
        return SYS_ENOENT;
    }

    return scfg_save_setting(group, setting);
   1a610:	4620      	mov	r0, r4
   1a612:	f7ff ffd8 	bl	1a5c6 <scfg_save_setting>
}
   1a616:	bd10      	pop	{r4, pc}
        return SYS_ENOENT;
   1a618:	f06f 0003 	mvn.w	r0, #3
   1a61c:	e7fb      	b.n	1a616 <scfg_save_val+0x12>
	...

0001a620 <scfg_register>:

int
scfg_register(struct scfg_group *group, char *name)
{
   1a620:	b570      	push	{r4, r5, r6, lr}
   1a622:	4604      	mov	r4, r0
   1a624:	460d      	mov	r5, r1
    const struct scfg_setting *setting;
    int rc;

    SCFG_FOREACH_SETTING(group, setting) {
   1a626:	6802      	ldr	r2, [r0, #0]
   1a628:	e004      	b.n	1a634 <scfg_register+0x14>
        switch (setting->type) {
   1a62a:	3b0a      	subs	r3, #10
   1a62c:	b2db      	uxtb	r3, r3
   1a62e:	2b04      	cmp	r3, #4
   1a630:	d823      	bhi.n	1a67a <scfg_register+0x5a>
    SCFG_FOREACH_SETTING(group, setting) {
   1a632:	3210      	adds	r2, #16
   1a634:	6813      	ldr	r3, [r2, #0]
   1a636:	b13b      	cbz	r3, 1a648 <scfg_register+0x28>
        switch (setting->type) {
   1a638:	7b13      	ldrb	r3, [r2, #12]
   1a63a:	2b06      	cmp	r3, #6
   1a63c:	d8f5      	bhi.n	1a62a <scfg_register+0xa>
   1a63e:	2b02      	cmp	r3, #2
   1a640:	d2f7      	bcs.n	1a632 <scfg_register+0x12>
   1a642:	f06f 0001 	mvn.w	r0, #1
    if (rc != 0) {
        return os_error_to_sys(rc);
    }

    return 0;
}
   1a646:	bd70      	pop	{r4, r5, r6, pc}
    group->handler = (struct conf_handler) {
   1a648:	1d26      	adds	r6, r4, #4
   1a64a:	2220      	movs	r2, #32
   1a64c:	2100      	movs	r1, #0
   1a64e:	4630      	mov	r0, r6
   1a650:	f7fc fa65 	bl	16b1e <memset>
   1a654:	60a5      	str	r5, [r4, #8]
   1a656:	2301      	movs	r3, #1
   1a658:	7323      	strb	r3, [r4, #12]
   1a65a:	4b09      	ldr	r3, [pc, #36]	; (1a680 <scfg_register+0x60>)
   1a65c:	6123      	str	r3, [r4, #16]
   1a65e:	4b09      	ldr	r3, [pc, #36]	; (1a684 <scfg_register+0x64>)
   1a660:	6163      	str	r3, [r4, #20]
   1a662:	4b09      	ldr	r3, [pc, #36]	; (1a688 <scfg_register+0x68>)
   1a664:	61e3      	str	r3, [r4, #28]
   1a666:	6224      	str	r4, [r4, #32]
    rc = conf_register(&group->handler);
   1a668:	4630      	mov	r0, r6
   1a66a:	f7fc ff05 	bl	17478 <conf_register>
    if (rc != 0) {
   1a66e:	2800      	cmp	r0, #0
   1a670:	d0e9      	beq.n	1a646 <scfg_register+0x26>
        return os_error_to_sys(rc);
   1a672:	b2c0      	uxtb	r0, r0
   1a674:	f012 ff52 	bl	2d51c <os_error_to_sys>
   1a678:	e7e5      	b.n	1a646 <scfg_register+0x26>
        switch (setting->type) {
   1a67a:	f06f 0001 	mvn.w	r0, #1
   1a67e:	e7e2      	b.n	1a646 <scfg_register+0x26>
   1a680:	0001a56b 	.word	0x0001a56b
   1a684:	0001a591 	.word	0x0001a591
   1a688:	0001a511 	.word	0x0001a511

0001a68c <valid_attr_type>:
 * one-to-one because of signedness of integers
 * and therefore we need a function to do this trickery */
static int
valid_attr_type(CborType ct, CborAttrType at)
{
    switch (at) {
   1a68c:	3901      	subs	r1, #1
   1a68e:	290b      	cmp	r1, #11
   1a690:	d822      	bhi.n	1a6d8 <valid_attr_type+0x4c>
   1a692:	e8df f001 	tbb	[pc, r1]
   1a696:	0606      	.short	0x0606
   1a698:	21110d09 	.word	0x21110d09
   1a69c:	19152121 	.word	0x19152121
   1a6a0:	1d21      	.short	0x1d21
    case CborAttrIntegerType:
    case CborAttrUnsignedIntegerType:
        if (ct == CborIntegerType) {
   1a6a2:	b1d8      	cbz	r0, 1a6dc <valid_attr_type+0x50>
        }
        break;
    default:
        break;
    }
    return 0;
   1a6a4:	2000      	movs	r0, #0
   1a6a6:	4770      	bx	lr
        if (ct == CborByteStringType) {
   1a6a8:	2840      	cmp	r0, #64	; 0x40
   1a6aa:	d019      	beq.n	1a6e0 <valid_attr_type+0x54>
    return 0;
   1a6ac:	2000      	movs	r0, #0
   1a6ae:	4770      	bx	lr
        if (ct == CborTextStringType) {
   1a6b0:	2860      	cmp	r0, #96	; 0x60
   1a6b2:	d017      	beq.n	1a6e4 <valid_attr_type+0x58>
    return 0;
   1a6b4:	2000      	movs	r0, #0
   1a6b6:	4770      	bx	lr
        if (ct == CborBooleanType) {
   1a6b8:	28f5      	cmp	r0, #245	; 0xf5
   1a6ba:	d015      	beq.n	1a6e8 <valid_attr_type+0x5c>
    return 0;
   1a6bc:	2000      	movs	r0, #0
   1a6be:	4770      	bx	lr
        if (ct == CborArrayType) {
   1a6c0:	2880      	cmp	r0, #128	; 0x80
   1a6c2:	d013      	beq.n	1a6ec <valid_attr_type+0x60>
    return 0;
   1a6c4:	2000      	movs	r0, #0
   1a6c6:	4770      	bx	lr
        if (ct == CborMapType) {
   1a6c8:	28a0      	cmp	r0, #160	; 0xa0
   1a6ca:	d011      	beq.n	1a6f0 <valid_attr_type+0x64>
    return 0;
   1a6cc:	2000      	movs	r0, #0
   1a6ce:	4770      	bx	lr
        if (ct == CborNullType) {
   1a6d0:	28f6      	cmp	r0, #246	; 0xf6
   1a6d2:	d00f      	beq.n	1a6f4 <valid_attr_type+0x68>
    return 0;
   1a6d4:	2000      	movs	r0, #0
   1a6d6:	4770      	bx	lr
   1a6d8:	2000      	movs	r0, #0
   1a6da:	4770      	bx	lr
            return 1;
   1a6dc:	2001      	movs	r0, #1
   1a6de:	4770      	bx	lr
            return 1;
   1a6e0:	2001      	movs	r0, #1
   1a6e2:	4770      	bx	lr
            return 1;
   1a6e4:	2001      	movs	r0, #1
   1a6e6:	4770      	bx	lr
            return 1;
   1a6e8:	2001      	movs	r0, #1
   1a6ea:	4770      	bx	lr
            return 1;
   1a6ec:	2001      	movs	r0, #1
   1a6ee:	4770      	bx	lr
            return 1;
   1a6f0:	2001      	movs	r0, #1
   1a6f2:	4770      	bx	lr
            return 1;
   1a6f4:	2001      	movs	r0, #1
}
   1a6f6:	4770      	bx	lr

0001a6f8 <cbor_target_address>:
cbor_target_address(const struct cbor_attr_t *cursor,
                    const struct cbor_array_t *parent, int offset)
{
    char *targetaddr = NULL;

    if (parent == NULL || parent->element_type != CborAttrStructObjectType) {
   1a6f8:	460b      	mov	r3, r1
   1a6fa:	b111      	cbz	r1, 1a702 <cbor_target_address+0xa>
   1a6fc:	7809      	ldrb	r1, [r1, #0]
   1a6fe:	290b      	cmp	r1, #11
   1a700:	d017      	beq.n	1a732 <cbor_target_address+0x3a>
        /* ordinary case - use the address in the cursor structure */
        switch (cursor->type) {
   1a702:	7903      	ldrb	r3, [r0, #4]
   1a704:	3b01      	subs	r3, #1
   1a706:	2b04      	cmp	r3, #4
   1a708:	d81a      	bhi.n	1a740 <cbor_target_address+0x48>
   1a70a:	e8df f003 	tbb	[pc, r3]
   1a70e:	0703      	.short	0x0703
   1a710:	0d0b      	.short	0x0d0b
   1a712:	0f          	.byte	0x0f
   1a713:	00          	.byte	0x00
        case CborAttrNullType:
            targetaddr = NULL;
            break;
        case CborAttrIntegerType:
            targetaddr = (char *)&cursor->addr.integer[offset];
   1a714:	6880      	ldr	r0, [r0, #8]
   1a716:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   1a71a:	4770      	bx	lr
        case CborAttrUnsignedIntegerType:
            targetaddr = (char *)&cursor->addr.uinteger[offset];
   1a71c:	6880      	ldr	r0, [r0, #8]
   1a71e:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   1a722:	4770      	bx	lr
        case CborAttrDoubleType:
            targetaddr = (char *)&cursor->addr.real[offset];
            break;
#endif
        case CborAttrByteStringType:
            targetaddr = (char *) cursor->addr.bytestring.data;
   1a724:	6880      	ldr	r0, [r0, #8]
            break;
   1a726:	4770      	bx	lr
        case CborAttrTextStringType:
            targetaddr = cursor->addr.string;
   1a728:	6880      	ldr	r0, [r0, #8]
            break;
   1a72a:	4770      	bx	lr
        case CborAttrBooleanType:
            targetaddr = (char *)&cursor->addr.boolean[offset];
   1a72c:	6880      	ldr	r0, [r0, #8]
   1a72e:	4410      	add	r0, r2
            break;
   1a730:	4770      	bx	lr
            break;
        }
    } else {
        /* tricky case - hacking a member in an array of structures */
        targetaddr =
            parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   1a732:	6899      	ldr	r1, [r3, #8]
   1a734:	68db      	ldr	r3, [r3, #12]
            cursor->addr.offset;
   1a736:	6880      	ldr	r0, [r0, #8]
            parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   1a738:	fb03 0202 	mla	r2, r3, r2, r0
        targetaddr =
   1a73c:	1888      	adds	r0, r1, r2
   1a73e:	4770      	bx	lr
        switch (cursor->type) {
   1a740:	2000      	movs	r0, #0
    }
    return targetaddr;
}
   1a742:	4770      	bx	lr

0001a744 <cbor_read_array>:
    return err;
}

int
cbor_read_array(struct CborValue *value, const struct cbor_array_t *arr)
{
   1a744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a748:	b08b      	sub	sp, #44	; 0x2c
   1a74a:	9003      	str	r0, [sp, #12]
   1a74c:	460c      	mov	r4, r1
    int off, arrcount;
    size_t len;
    void *lptr;
    char *tp;

    err = cbor_value_enter_container(value, &elem);
   1a74e:	a906      	add	r1, sp, #24
   1a750:	f00e ff3e 	bl	295d0 <cbor_value_enter_container>
    if (err) {
   1a754:	4605      	mov	r5, r0
   1a756:	2800      	cmp	r0, #0
   1a758:	f040 80ec 	bne.w	1a934 <cbor_read_array+0x1f0>
        return err;
    }
    arrcount = 0;
    tp = arr->arr.strings.store;
   1a75c:	f8d4 8008 	ldr.w	r8, [r4, #8]
    arrcount = 0;
   1a760:	2700      	movs	r7, #0
    for (off = 0; off < arr->maxlen; off++) {
   1a762:	463e      	mov	r6, r7
   1a764:	e0ac      	b.n	1a8c0 <cbor_read_array+0x17c>
        switch (arr->element_type) {
        case CborAttrBooleanType:
            lptr = &arr->arr.booleans.store[off];
   1a766:	6862      	ldr	r2, [r4, #4]
{ return value->type == CborBooleanType; }
   1a768:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    assert(cbor_value_is_boolean(value));
   1a76c:	2bf5      	cmp	r3, #245	; 0xf5
   1a76e:	d106      	bne.n	1a77e <cbor_read_array+0x3a>
    *result = !!value->extra;
   1a770:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   1a774:	3b00      	subs	r3, #0
   1a776:	bf18      	it	ne
   1a778:	2301      	movne	r3, #1
   1a77a:	5593      	strb	r3, [r2, r6]
            err |= cbor_value_get_boolean(&elem, lptr);
            break;
   1a77c:	e095      	b.n	1a8aa <cbor_read_array+0x166>
    assert(cbor_value_is_boolean(value));
   1a77e:	f7f9 ff71 	bl	14664 <hal_debugger_connected>
   1a782:	b100      	cbz	r0, 1a786 <cbor_read_array+0x42>
   1a784:	be01      	bkpt	0x0001
   1a786:	2300      	movs	r3, #0
   1a788:	461a      	mov	r2, r3
   1a78a:	4619      	mov	r1, r3
   1a78c:	4618      	mov	r0, r3
   1a78e:	f7fa fb09 	bl	14da4 <__assert_func>
        case CborAttrIntegerType:
            lptr = &arr->arr.integers.store[off];
   1a792:	f8d4 9004 	ldr.w	r9, [r4, #4]
   1a796:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   1a79a:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
{ return value->type == CborIntegerType; }
   1a79e:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    assert(cbor_value_is_integer(value));
   1a7a2:	b9eb      	cbnz	r3, 1a7e0 <cbor_read_array+0x9c>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   1a7a4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
                _cbor_value_decode_int64_internal(value) : value->extra;
   1a7a8:	f013 0f01 	tst.w	r3, #1
   1a7ac:	d122      	bne.n	1a7f4 <cbor_read_array+0xb0>
   1a7ae:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   1a7b2:	2300      	movs	r3, #0
   1a7b4:	e9cd 2300 	strd	r2, r3, [sp]
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   1a7b8:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a7bc:	f849 000b 	str.w	r0, [r9, fp]
   1a7c0:	f8ca 1004 	str.w	r1, [sl, #4]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   1a7c4:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
   1a7c8:	f011 0f02 	tst.w	r1, #2
   1a7cc:	d06d      	beq.n	1a8aa <cbor_read_array+0x166>
        *result = -*result - 1;
   1a7ce:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a7d2:	43c2      	mvns	r2, r0
   1a7d4:	43cb      	mvns	r3, r1
   1a7d6:	f849 200b 	str.w	r2, [r9, fp]
   1a7da:	f8ca 3004 	str.w	r3, [sl, #4]
            err |= cbor_value_get_int64(&elem, lptr);
            break;
   1a7de:	e064      	b.n	1a8aa <cbor_read_array+0x166>
    assert(cbor_value_is_integer(value));
   1a7e0:	f7f9 ff40 	bl	14664 <hal_debugger_connected>
   1a7e4:	b100      	cbz	r0, 1a7e8 <cbor_read_array+0xa4>
   1a7e6:	be01      	bkpt	0x0001
   1a7e8:	2300      	movs	r3, #0
   1a7ea:	461a      	mov	r2, r3
   1a7ec:	4619      	mov	r1, r3
   1a7ee:	4618      	mov	r0, r3
   1a7f0:	f7fa fad8 	bl	14da4 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   1a7f4:	a806      	add	r0, sp, #24
   1a7f6:	f00e fe6e 	bl	294d6 <_cbor_value_decode_int64_internal>
   1a7fa:	9000      	str	r0, [sp, #0]
   1a7fc:	9101      	str	r1, [sp, #4]
   1a7fe:	e7db      	b.n	1a7b8 <cbor_read_array+0x74>
        case CborAttrUnsignedIntegerType:
            lptr = &arr->arr.uintegers.store[off];
   1a800:	6863      	ldr	r3, [r4, #4]
   1a802:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
{ return value->type == CborIntegerType; }
   1a806:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   1a80a:	b933      	cbnz	r3, 1a81a <cbor_read_array+0xd6>
   1a80c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1a810:	f013 0f02 	tst.w	r3, #2
   1a814:	d00e      	beq.n	1a834 <cbor_read_array+0xf0>
   1a816:	2300      	movs	r3, #0
   1a818:	e000      	b.n	1a81c <cbor_read_array+0xd8>
   1a81a:	2300      	movs	r3, #0
    assert(cbor_value_is_unsigned_integer(value));
   1a81c:	b163      	cbz	r3, 1a838 <cbor_read_array+0xf4>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   1a81e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
                _cbor_value_decode_int64_internal(value) : value->extra;
   1a822:	f013 0f01 	tst.w	r3, #1
   1a826:	d111      	bne.n	1a84c <cbor_read_array+0x108>
   1a828:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   1a82c:	2300      	movs	r3, #0
    *result = _cbor_value_extract_int64_helper(value);
   1a82e:	e9c9 2300 	strd	r2, r3, [r9]
            err |= cbor_value_get_uint64(&elem, lptr);
            break;
   1a832:	e03a      	b.n	1a8aa <cbor_read_array+0x166>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   1a834:	2301      	movs	r3, #1
   1a836:	e7f1      	b.n	1a81c <cbor_read_array+0xd8>
    assert(cbor_value_is_unsigned_integer(value));
   1a838:	f7f9 ff14 	bl	14664 <hal_debugger_connected>
   1a83c:	b100      	cbz	r0, 1a840 <cbor_read_array+0xfc>
   1a83e:	be01      	bkpt	0x0001
   1a840:	2300      	movs	r3, #0
   1a842:	461a      	mov	r2, r3
   1a844:	4619      	mov	r1, r3
   1a846:	4618      	mov	r0, r3
   1a848:	f7fa faac 	bl	14da4 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   1a84c:	a806      	add	r0, sp, #24
   1a84e:	f00e fe42 	bl	294d6 <_cbor_value_decode_int64_internal>
   1a852:	4602      	mov	r2, r0
   1a854:	460b      	mov	r3, r1
   1a856:	e7ea      	b.n	1a82e <cbor_read_array+0xea>
            lptr = &arr->arr.reals.store[off];
            err |= cbor_value_get_double(&elem, lptr);
            break;
#endif
        case CborAttrTextStringType:
            len = arr->arr.strings.storelen - (tp - arr->arr.strings.store);
   1a858:	68e3      	ldr	r3, [r4, #12]
   1a85a:	68a2      	ldr	r2, [r4, #8]
   1a85c:	eba8 0202 	sub.w	r2, r8, r2
   1a860:	1a9b      	subs	r3, r3, r2
   1a862:	9305      	str	r3, [sp, #20]
{ return value->type == CborTextStringType; }
   1a864:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    assert(cbor_value_is_text_string(value));
   1a868:	2b60      	cmp	r3, #96	; 0x60
   1a86a:	d10d      	bne.n	1a888 <cbor_read_array+0x144>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   1a86c:	2300      	movs	r3, #0
   1a86e:	aa05      	add	r2, sp, #20
   1a870:	4641      	mov	r1, r8
   1a872:	a806      	add	r0, sp, #24
   1a874:	f00e ff7c 	bl	29770 <_cbor_value_copy_string>
            err |= cbor_value_copy_text_string(&elem, tp, &len, NULL);
   1a878:	4305      	orrs	r5, r0
            arr->arr.strings.ptrs[off] = tp;
   1a87a:	6863      	ldr	r3, [r4, #4]
   1a87c:	f843 8026 	str.w	r8, [r3, r6, lsl #2]
            tp += len + 1;
   1a880:	9b05      	ldr	r3, [sp, #20]
   1a882:	3301      	adds	r3, #1
   1a884:	4498      	add	r8, r3
            break;
   1a886:	e010      	b.n	1a8aa <cbor_read_array+0x166>
    assert(cbor_value_is_text_string(value));
   1a888:	f7f9 feec 	bl	14664 <hal_debugger_connected>
   1a88c:	b100      	cbz	r0, 1a890 <cbor_read_array+0x14c>
   1a88e:	be01      	bkpt	0x0001
   1a890:	2300      	movs	r3, #0
   1a892:	461a      	mov	r2, r3
   1a894:	4619      	mov	r1, r3
   1a896:	4618      	mov	r0, r3
   1a898:	f7fa fa84 	bl	14da4 <__assert_func>
        case CborAttrStructObjectType:
            err |= cbor_internal_read_object(&elem, arr->arr.objects.subtype,
   1a89c:	4633      	mov	r3, r6
   1a89e:	4622      	mov	r2, r4
   1a8a0:	6861      	ldr	r1, [r4, #4]
   1a8a2:	a806      	add	r0, sp, #24
   1a8a4:	f000 f84a 	bl	1a93c <cbor_internal_read_object>
   1a8a8:	4305      	orrs	r5, r0
            break;
        default:
            err |= CborErrorIllegalType;
            break;
        }
        arrcount++;
   1a8aa:	3701      	adds	r7, #1
        if (arr->element_type != CborAttrStructObjectType) {
   1a8ac:	7823      	ldrb	r3, [r4, #0]
   1a8ae:	2b0b      	cmp	r3, #11
   1a8b0:	d129      	bne.n	1a906 <cbor_read_array+0x1c2>
{ return value && value->type != CborInvalidType; }
   1a8b2:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1a8b6:	2bff      	cmp	r3, #255	; 0xff
   1a8b8:	d02a      	beq.n	1a910 <cbor_read_array+0x1cc>
   1a8ba:	2301      	movs	r3, #1
            err |= cbor_value_advance(&elem);
        }
        if (!cbor_value_is_valid(&elem)) {
   1a8bc:	b353      	cbz	r3, 1a914 <cbor_read_array+0x1d0>
    for (off = 0; off < arr->maxlen; off++) {
   1a8be:	3601      	adds	r6, #1
   1a8c0:	6963      	ldr	r3, [r4, #20]
   1a8c2:	42b3      	cmp	r3, r6
   1a8c4:	dd26      	ble.n	1a914 <cbor_read_array+0x1d0>
        switch (arr->element_type) {
   1a8c6:	7823      	ldrb	r3, [r4, #0]
   1a8c8:	3b01      	subs	r3, #1
   1a8ca:	2b0a      	cmp	r3, #10
   1a8cc:	d818      	bhi.n	1a900 <cbor_read_array+0x1bc>
   1a8ce:	a201      	add	r2, pc, #4	; (adr r2, 1a8d4 <cbor_read_array+0x190>)
   1a8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a8d4:	0001a793 	.word	0x0001a793
   1a8d8:	0001a801 	.word	0x0001a801
   1a8dc:	0001a901 	.word	0x0001a901
   1a8e0:	0001a859 	.word	0x0001a859
   1a8e4:	0001a767 	.word	0x0001a767
   1a8e8:	0001a901 	.word	0x0001a901
   1a8ec:	0001a901 	.word	0x0001a901
   1a8f0:	0001a901 	.word	0x0001a901
   1a8f4:	0001a901 	.word	0x0001a901
   1a8f8:	0001a901 	.word	0x0001a901
   1a8fc:	0001a89d 	.word	0x0001a89d
            err |= CborErrorIllegalType;
   1a900:	f445 7582 	orr.w	r5, r5, #260	; 0x104
            break;
   1a904:	e7d1      	b.n	1a8aa <cbor_read_array+0x166>
            err |= cbor_value_advance(&elem);
   1a906:	a806      	add	r0, sp, #24
   1a908:	f00e ff8f 	bl	2982a <cbor_value_advance>
   1a90c:	4305      	orrs	r5, r0
   1a90e:	e7d0      	b.n	1a8b2 <cbor_read_array+0x16e>
   1a910:	2300      	movs	r3, #0
   1a912:	e7d3      	b.n	1a8bc <cbor_read_array+0x178>
            break;
        }
    }
    if (arr->count) {
   1a914:	6923      	ldr	r3, [r4, #16]
   1a916:	b103      	cbz	r3, 1a91a <cbor_read_array+0x1d6>
        *arr->count = arrcount;
   1a918:	601f      	str	r7, [r3, #0]
{ return it->remaining == 0; }
   1a91a:	9b08      	ldr	r3, [sp, #32]
    }
    while (!cbor_value_at_end(&elem)) {
   1a91c:	b12b      	cbz	r3, 1a92a <cbor_read_array+0x1e6>
        err |= CborErrorDataTooLarge;
   1a91e:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
        cbor_value_advance(&elem);
   1a922:	a806      	add	r0, sp, #24
   1a924:	f00e ff81 	bl	2982a <cbor_value_advance>
   1a928:	e7f7      	b.n	1a91a <cbor_read_array+0x1d6>
    }
    err |= cbor_value_leave_container(value, &elem);
   1a92a:	a906      	add	r1, sp, #24
   1a92c:	9803      	ldr	r0, [sp, #12]
   1a92e:	f00e fef6 	bl	2971e <cbor_value_leave_container>
   1a932:	4328      	orrs	r0, r5
    return err;
}
   1a934:	b00b      	add	sp, #44	; 0x2c
   1a936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a93a:	bf00      	nop

0001a93c <cbor_internal_read_object>:
{
   1a93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a940:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
   1a944:	9001      	str	r0, [sp, #4]
   1a946:	9100      	str	r1, [sp, #0]
   1a948:	4691      	mov	r9, r2
   1a94a:	469a      	mov	sl, r3
    size_t len = 0;
   1a94c:	2300      	movs	r3, #0
   1a94e:	9304      	str	r3, [sp, #16]
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   1a950:	460c      	mov	r4, r1
   1a952:	e006      	b.n	1a962 <cbor_internal_read_object+0x26>
                    memcpy(lptr, &cursor->dflt.integer,
   1a954:	4623      	mov	r3, r4
   1a956:	f853 1f20 	ldr.w	r1, [r3, #32]!
   1a95a:	685b      	ldr	r3, [r3, #4]
   1a95c:	6001      	str	r1, [r0, #0]
   1a95e:	6043      	str	r3, [r0, #4]
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   1a960:	3430      	adds	r4, #48	; 0x30
   1a962:	6827      	ldr	r7, [r4, #0]
   1a964:	b1e7      	cbz	r7, 1a9a0 <cbor_internal_read_object+0x64>
        if (!cursor->nodefault) {
   1a966:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   1a96a:	2b00      	cmp	r3, #0
   1a96c:	d1f8      	bne.n	1a960 <cbor_internal_read_object+0x24>
            lptr = cbor_target_address(cursor, parent, offset);
   1a96e:	4652      	mov	r2, sl
   1a970:	4649      	mov	r1, r9
   1a972:	4620      	mov	r0, r4
   1a974:	f7ff fec0 	bl	1a6f8 <cbor_target_address>
            if (lptr != NULL) {
   1a978:	2800      	cmp	r0, #0
   1a97a:	d0f1      	beq.n	1a960 <cbor_internal_read_object+0x24>
                switch (cursor->type) {
   1a97c:	7923      	ldrb	r3, [r4, #4]
   1a97e:	2b02      	cmp	r3, #2
   1a980:	d0e8      	beq.n	1a954 <cbor_internal_read_object+0x18>
   1a982:	2b05      	cmp	r3, #5
   1a984:	d008      	beq.n	1a998 <cbor_internal_read_object+0x5c>
   1a986:	2b01      	cmp	r3, #1
   1a988:	d1ea      	bne.n	1a960 <cbor_internal_read_object+0x24>
                    memcpy(lptr, &cursor->dflt.integer, sizeof(long long int));
   1a98a:	4623      	mov	r3, r4
   1a98c:	f853 1f20 	ldr.w	r1, [r3, #32]!
   1a990:	685b      	ldr	r3, [r3, #4]
   1a992:	6001      	str	r1, [r0, #0]
   1a994:	6043      	str	r3, [r0, #4]
                    break;
   1a996:	e7e3      	b.n	1a960 <cbor_internal_read_object+0x24>
                    memcpy(lptr, &cursor->dflt.boolean, sizeof(bool));
   1a998:	f894 3020 	ldrb.w	r3, [r4, #32]
   1a99c:	7003      	strb	r3, [r0, #0]
                    break;
   1a99e:	e7df      	b.n	1a960 <cbor_internal_read_object+0x24>
{ return value->type == CborMapType; }
   1a9a0:	9801      	ldr	r0, [sp, #4]
   1a9a2:	7b83      	ldrb	r3, [r0, #14]
    if (cbor_value_is_map(root_value)) {
   1a9a4:	2ba0      	cmp	r3, #160	; 0xa0
   1a9a6:	d005      	beq.n	1a9b4 <cbor_internal_read_object+0x78>
        return err;
   1a9a8:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   1a9ac:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
   1a9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err |= cbor_value_enter_container(root_value, &cur_value);
   1a9b4:	a905      	add	r1, sp, #20
   1a9b6:	f00e fe0b 	bl	295d0 <cbor_value_enter_container>
   1a9ba:	4680      	mov	r8, r0
    while (cbor_value_is_valid(&cur_value) && !err) {
   1a9bc:	e07a      	b.n	1aab4 <cbor_internal_read_object+0x178>
            if (cbor_value_calculate_string_length(&cur_value, &len) == 0) {
   1a9be:	a904      	add	r1, sp, #16
   1a9c0:	a805      	add	r0, sp, #20
   1a9c2:	f00e ff48 	bl	29856 <cbor_value_calculate_string_length>
   1a9c6:	b978      	cbnz	r0, 1a9e8 <cbor_internal_read_object+0xac>
                if (len > CBORATTR_MAX_SIZE) {
   1a9c8:	9b04      	ldr	r3, [sp, #16]
   1a9ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1a9ce:	d81f      	bhi.n	1aa10 <cbor_internal_read_object+0xd4>
{ return value->type == CborTextStringType; }
   1a9d0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_text_string(value));
   1a9d4:	2b60      	cmp	r3, #96	; 0x60
   1a9d6:	d11e      	bne.n	1aa16 <cbor_internal_read_object+0xda>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   1a9d8:	2300      	movs	r3, #0
   1a9da:	aa04      	add	r2, sp, #16
   1a9dc:	a909      	add	r1, sp, #36	; 0x24
   1a9de:	a805      	add	r0, sp, #20
   1a9e0:	f00e fec6 	bl	29770 <_cbor_value_copy_string>
                err |= cbor_value_copy_text_string(&cur_value, attrbuf, &len,
   1a9e4:	ea48 0800 	orr.w	r8, r8, r0
            err |= cbor_value_advance(&cur_value);
   1a9e8:	a805      	add	r0, sp, #20
   1a9ea:	f00e ff1e 	bl	2982a <cbor_value_advance>
   1a9ee:	ea48 0800 	orr.w	r8, r8, r0
{ return value && value->type != CborInvalidType; }
   1a9f2:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
   1a9f6:	2eff      	cmp	r6, #255	; 0xff
   1a9f8:	d017      	beq.n	1aa2a <cbor_internal_read_object+0xee>
   1a9fa:	2301      	movs	r3, #1
            if (cbor_value_is_valid(&cur_value)) {
   1a9fc:	2b00      	cmp	r3, #0
   1a9fe:	d16a      	bne.n	1aad6 <cbor_internal_read_object+0x19a>
                err |= CborErrorIllegalType;
   1aa00:	f448 7882 	orr.w	r8, r8, #260	; 0x104
    if (!err) {
   1aa04:	f1b8 0f00 	cmp.w	r8, #0
   1aa08:	f000 8106 	beq.w	1ac18 <cbor_internal_read_object+0x2dc>
    return err;
   1aa0c:	4640      	mov	r0, r8
   1aa0e:	e7cd      	b.n	1a9ac <cbor_internal_read_object+0x70>
                    err |= CborErrorDataTooLarge;
   1aa10:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
                    break;
   1aa14:	e7f6      	b.n	1aa04 <cbor_internal_read_object+0xc8>
    assert(cbor_value_is_text_string(value));
   1aa16:	f7f9 fe25 	bl	14664 <hal_debugger_connected>
   1aa1a:	b100      	cbz	r0, 1aa1e <cbor_internal_read_object+0xe2>
   1aa1c:	be01      	bkpt	0x0001
   1aa1e:	2300      	movs	r3, #0
   1aa20:	461a      	mov	r2, r3
   1aa22:	4619      	mov	r1, r3
   1aa24:	4618      	mov	r0, r3
   1aa26:	f7fa f9bd 	bl	14da4 <__assert_func>
{ return value && value->type != CborInvalidType; }
   1aa2a:	2300      	movs	r3, #0
   1aa2c:	e7e6      	b.n	1a9fc <cbor_internal_read_object+0xc0>
                    attrbuf[0] == '\0') {
   1aa2e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
                if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   1aa32:	b963      	cbnz	r3, 1aa4e <cbor_internal_read_object+0x112>
                    best_match = cursor;
   1aa34:	46a3      	mov	fp, r4
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   1aa36:	3430      	adds	r4, #48	; 0x30
   1aa38:	6825      	ldr	r5, [r4, #0]
   1aa3a:	b1a5      	cbz	r5, 1aa66 <cbor_internal_read_object+0x12a>
            if (valid_attr_type(type, cursor->type)) {
   1aa3c:	7921      	ldrb	r1, [r4, #4]
   1aa3e:	4630      	mov	r0, r6
   1aa40:	f7ff fe24 	bl	1a68c <valid_attr_type>
   1aa44:	2800      	cmp	r0, #0
   1aa46:	d0f6      	beq.n	1aa36 <cbor_internal_read_object+0xfa>
                if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   1aa48:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1aa4c:	d0ef      	beq.n	1aa2e <cbor_internal_read_object+0xf2>
                } else if (strlen(cursor->attribute) == len &&
   1aa4e:	4628      	mov	r0, r5
   1aa50:	f7fc f88d 	bl	16b6e <strlen>
   1aa54:	9a04      	ldr	r2, [sp, #16]
   1aa56:	4290      	cmp	r0, r2
   1aa58:	d1ed      	bne.n	1aa36 <cbor_internal_read_object+0xfa>
                    !memcmp(cursor->attribute, attrbuf, len)) {
   1aa5a:	a909      	add	r1, sp, #36	; 0x24
   1aa5c:	4628      	mov	r0, r5
   1aa5e:	f7fc f815 	bl	16a8c <memcmp>
                } else if (strlen(cursor->attribute) == len &&
   1aa62:	2800      	cmp	r0, #0
   1aa64:	d1e7      	bne.n	1aa36 <cbor_internal_read_object+0xfa>
        if (!cursor->attribute && best_match) {
   1aa66:	b195      	cbz	r5, 1aa8e <cbor_internal_read_object+0x152>
        if (cursor->attribute != NULL) {
   1aa68:	6823      	ldr	r3, [r4, #0]
   1aa6a:	b1fb      	cbz	r3, 1aaac <cbor_internal_read_object+0x170>
            lptr = cbor_target_address(cursor, parent, offset);
   1aa6c:	4652      	mov	r2, sl
   1aa6e:	4649      	mov	r1, r9
   1aa70:	4620      	mov	r0, r4
   1aa72:	f7ff fe41 	bl	1a6f8 <cbor_target_address>
   1aa76:	4605      	mov	r5, r0
            switch (cursor->type) {
   1aa78:	7923      	ldrb	r3, [r4, #4]
   1aa7a:	3b01      	subs	r3, #1
   1aa7c:	2b09      	cmp	r3, #9
   1aa7e:	d815      	bhi.n	1aaac <cbor_internal_read_object+0x170>
   1aa80:	e8df f003 	tbb	[pc, r3]
   1aa84:	a0865d36 	.word	0xa0865d36
   1aa88:	1414140a 	.word	0x1414140a
   1aa8c:	bfb7      	.short	0xbfb7
        if (!cursor->attribute && best_match) {
   1aa8e:	f1bb 0f00 	cmp.w	fp, #0
   1aa92:	d0e9      	beq.n	1aa68 <cbor_internal_read_object+0x12c>
            cursor = best_match;
   1aa94:	465c      	mov	r4, fp
   1aa96:	e7e7      	b.n	1aa68 <cbor_internal_read_object+0x12c>
{ return value->type == CborBooleanType; }
   1aa98:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_boolean(value));
   1aa9c:	2bf5      	cmp	r3, #245	; 0xf5
   1aa9e:	d11d      	bne.n	1aadc <cbor_internal_read_object+0x1a0>
    *result = !!value->extra;
   1aaa0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1aaa4:	3b00      	subs	r3, #0
   1aaa6:	bf18      	it	ne
   1aaa8:	2301      	movne	r3, #1
   1aaaa:	7003      	strb	r3, [r0, #0]
        err = cbor_value_advance(&cur_value);
   1aaac:	a805      	add	r0, sp, #20
   1aaae:	f00e febc 	bl	2982a <cbor_value_advance>
   1aab2:	4680      	mov	r8, r0
{ return value && value->type != CborInvalidType; }
   1aab4:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
   1aab8:	2eff      	cmp	r6, #255	; 0xff
   1aaba:	f000 80ab 	beq.w	1ac14 <cbor_internal_read_object+0x2d8>
   1aabe:	2301      	movs	r3, #1
    while (cbor_value_is_valid(&cur_value) && !err) {
   1aac0:	2b00      	cmp	r3, #0
   1aac2:	d09f      	beq.n	1aa04 <cbor_internal_read_object+0xc8>
   1aac4:	f1b8 0f00 	cmp.w	r8, #0
   1aac8:	d19c      	bne.n	1aa04 <cbor_internal_read_object+0xc8>
        if (cbor_value_is_text_string(&cur_value)) {
   1aaca:	2e60      	cmp	r6, #96	; 0x60
   1aacc:	f43f af77 	beq.w	1a9be <cbor_internal_read_object+0x82>
            attrbuf[0] = '\0';
   1aad0:	2300      	movs	r3, #0
   1aad2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        best_match = NULL;
   1aad6:	46bb      	mov	fp, r7
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   1aad8:	9c00      	ldr	r4, [sp, #0]
   1aada:	e7ad      	b.n	1aa38 <cbor_internal_read_object+0xfc>
    assert(cbor_value_is_boolean(value));
   1aadc:	f7f9 fdc2 	bl	14664 <hal_debugger_connected>
   1aae0:	b100      	cbz	r0, 1aae4 <cbor_internal_read_object+0x1a8>
   1aae2:	be01      	bkpt	0x0001
   1aae4:	2300      	movs	r3, #0
   1aae6:	461a      	mov	r2, r3
   1aae8:	4619      	mov	r1, r3
   1aaea:	4618      	mov	r0, r3
   1aaec:	f7fa f95a 	bl	14da4 <__assert_func>
{ return value->type == CborIntegerType; }
   1aaf0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_integer(value));
   1aaf4:	b99b      	cbnz	r3, 1ab1e <cbor_internal_read_object+0x1e2>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   1aaf6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
                _cbor_value_decode_int64_internal(value) : value->extra;
   1aafa:	f013 0f01 	tst.w	r3, #1
   1aafe:	d118      	bne.n	1ab32 <cbor_internal_read_object+0x1f6>
   1ab00:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1ab04:	2400      	movs	r4, #0
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   1ab06:	602b      	str	r3, [r5, #0]
   1ab08:	606c      	str	r4, [r5, #4]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   1ab0a:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
   1ab0e:	f011 0f02 	tst.w	r1, #2
   1ab12:	d0cb      	beq.n	1aaac <cbor_internal_read_object+0x170>
        *result = -*result - 1;
   1ab14:	43da      	mvns	r2, r3
   1ab16:	43e3      	mvns	r3, r4
   1ab18:	602a      	str	r2, [r5, #0]
   1ab1a:	606b      	str	r3, [r5, #4]
    return CborNoError;
   1ab1c:	e7c6      	b.n	1aaac <cbor_internal_read_object+0x170>
    assert(cbor_value_is_integer(value));
   1ab1e:	f7f9 fda1 	bl	14664 <hal_debugger_connected>
   1ab22:	b100      	cbz	r0, 1ab26 <cbor_internal_read_object+0x1ea>
   1ab24:	be01      	bkpt	0x0001
   1ab26:	2300      	movs	r3, #0
   1ab28:	461a      	mov	r2, r3
   1ab2a:	4619      	mov	r1, r3
   1ab2c:	4618      	mov	r0, r3
   1ab2e:	f7fa f939 	bl	14da4 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   1ab32:	a805      	add	r0, sp, #20
   1ab34:	f00e fccf 	bl	294d6 <_cbor_value_decode_int64_internal>
   1ab38:	4603      	mov	r3, r0
   1ab3a:	460c      	mov	r4, r1
   1ab3c:	e7e3      	b.n	1ab06 <cbor_internal_read_object+0x1ca>
{ return value->type == CborIntegerType; }
   1ab3e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   1ab42:	b933      	cbnz	r3, 1ab52 <cbor_internal_read_object+0x216>
   1ab44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1ab48:	f013 0f02 	tst.w	r3, #2
   1ab4c:	d00e      	beq.n	1ab6c <cbor_internal_read_object+0x230>
   1ab4e:	2300      	movs	r3, #0
   1ab50:	e000      	b.n	1ab54 <cbor_internal_read_object+0x218>
   1ab52:	2300      	movs	r3, #0
    assert(cbor_value_is_unsigned_integer(value));
   1ab54:	b163      	cbz	r3, 1ab70 <cbor_internal_read_object+0x234>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   1ab56:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
                _cbor_value_decode_int64_internal(value) : value->extra;
   1ab5a:	f013 0f01 	tst.w	r3, #1
   1ab5e:	d111      	bne.n	1ab84 <cbor_internal_read_object+0x248>
   1ab60:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1ab64:	2300      	movs	r3, #0
    *result = _cbor_value_extract_int64_helper(value);
   1ab66:	e9c5 2300 	strd	r2, r3, [r5]
    return CborNoError;
   1ab6a:	e79f      	b.n	1aaac <cbor_internal_read_object+0x170>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   1ab6c:	2301      	movs	r3, #1
   1ab6e:	e7f1      	b.n	1ab54 <cbor_internal_read_object+0x218>
    assert(cbor_value_is_unsigned_integer(value));
   1ab70:	f7f9 fd78 	bl	14664 <hal_debugger_connected>
   1ab74:	b100      	cbz	r0, 1ab78 <cbor_internal_read_object+0x23c>
   1ab76:	be01      	bkpt	0x0001
   1ab78:	2300      	movs	r3, #0
   1ab7a:	461a      	mov	r2, r3
   1ab7c:	4619      	mov	r1, r3
   1ab7e:	4618      	mov	r0, r3
   1ab80:	f7fa f910 	bl	14da4 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   1ab84:	a805      	add	r0, sp, #20
   1ab86:	f00e fca6 	bl	294d6 <_cbor_value_decode_int64_internal>
   1ab8a:	4602      	mov	r2, r0
   1ab8c:	460b      	mov	r3, r1
   1ab8e:	e7ea      	b.n	1ab66 <cbor_internal_read_object+0x22a>
                size_t len = cursor->len;
   1ab90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1ab92:	9303      	str	r3, [sp, #12]
{ return value->type == CborByteStringType; }
   1ab94:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_byte_string(value));
   1ab98:	2b40      	cmp	r3, #64	; 0x40
   1ab9a:	d109      	bne.n	1abb0 <cbor_internal_read_object+0x274>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   1ab9c:	2300      	movs	r3, #0
   1ab9e:	aa03      	add	r2, sp, #12
   1aba0:	4601      	mov	r1, r0
   1aba2:	a805      	add	r0, sp, #20
   1aba4:	f00e fde4 	bl	29770 <_cbor_value_copy_string>
                *cursor->addr.bytestring.len = len;
   1aba8:	68e3      	ldr	r3, [r4, #12]
   1abaa:	9a03      	ldr	r2, [sp, #12]
   1abac:	601a      	str	r2, [r3, #0]
                break;
   1abae:	e77d      	b.n	1aaac <cbor_internal_read_object+0x170>
    assert(cbor_value_is_byte_string(value));
   1abb0:	f7f9 fd58 	bl	14664 <hal_debugger_connected>
   1abb4:	b100      	cbz	r0, 1abb8 <cbor_internal_read_object+0x27c>
   1abb6:	be01      	bkpt	0x0001
   1abb8:	2300      	movs	r3, #0
   1abba:	461a      	mov	r2, r3
   1abbc:	4619      	mov	r1, r3
   1abbe:	4618      	mov	r0, r3
   1abc0:	f7fa f8f0 	bl	14da4 <__assert_func>
                size_t len = cursor->len;
   1abc4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1abc6:	9303      	str	r3, [sp, #12]
{ return value->type == CborTextStringType; }
   1abc8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_text_string(value));
   1abcc:	2b60      	cmp	r3, #96	; 0x60
   1abce:	d106      	bne.n	1abde <cbor_internal_read_object+0x2a2>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   1abd0:	2300      	movs	r3, #0
   1abd2:	aa03      	add	r2, sp, #12
   1abd4:	4601      	mov	r1, r0
   1abd6:	a805      	add	r0, sp, #20
   1abd8:	f00e fdca 	bl	29770 <_cbor_value_copy_string>
                break;
   1abdc:	e766      	b.n	1aaac <cbor_internal_read_object+0x170>
    assert(cbor_value_is_text_string(value));
   1abde:	f7f9 fd41 	bl	14664 <hal_debugger_connected>
   1abe2:	b100      	cbz	r0, 1abe6 <cbor_internal_read_object+0x2aa>
   1abe4:	be01      	bkpt	0x0001
   1abe6:	2300      	movs	r3, #0
   1abe8:	461a      	mov	r2, r3
   1abea:	4619      	mov	r1, r3
   1abec:	4618      	mov	r0, r3
   1abee:	f7fa f8d9 	bl	14da4 <__assert_func>
                err |= cbor_read_array(&cur_value, &cursor->addr.array);
   1abf2:	f104 0108 	add.w	r1, r4, #8
   1abf6:	a805      	add	r0, sp, #20
   1abf8:	f7ff fda4 	bl	1a744 <cbor_read_array>
   1abfc:	ea48 0800 	orr.w	r8, r8, r0
                continue;
   1ac00:	e758      	b.n	1aab4 <cbor_internal_read_object+0x178>
                err |= cbor_internal_read_object(&cur_value, cursor->addr.obj,
   1ac02:	2300      	movs	r3, #0
   1ac04:	461a      	mov	r2, r3
   1ac06:	68a1      	ldr	r1, [r4, #8]
   1ac08:	a805      	add	r0, sp, #20
   1ac0a:	f7ff fe97 	bl	1a93c <cbor_internal_read_object>
   1ac0e:	ea48 0800 	orr.w	r8, r8, r0
                continue;
   1ac12:	e74f      	b.n	1aab4 <cbor_internal_read_object+0x178>
{ return value && value->type != CborInvalidType; }
   1ac14:	2300      	movs	r3, #0
   1ac16:	e753      	b.n	1aac0 <cbor_internal_read_object+0x184>
        err |= cbor_value_leave_container(root_value, &cur_value);
   1ac18:	a905      	add	r1, sp, #20
   1ac1a:	9801      	ldr	r0, [sp, #4]
   1ac1c:	f00e fd7f 	bl	2971e <cbor_value_leave_container>
   1ac20:	ea48 0800 	orr.w	r8, r8, r0
   1ac24:	e6f2      	b.n	1aa0c <cbor_internal_read_object+0xd0>

0001ac26 <cbor_read_object>:

int
cbor_read_object(struct CborValue *value, const struct cbor_attr_t *attrs)
{
   1ac26:	b508      	push	{r3, lr}
    int st;

    st = cbor_internal_read_object(value, attrs, NULL, 0);
   1ac28:	2300      	movs	r3, #0
   1ac2a:	461a      	mov	r2, r3
   1ac2c:	f7ff fe86 	bl	1a93c <cbor_internal_read_object>
    return st;
}
   1ac30:	bd08      	pop	{r3, pc}

0001ac32 <img_mgmt_find_tlvs>:
 * Finds the TLVs in the specified image slot, if any.
 */
static int
img_mgmt_find_tlvs(int slot, size_t *start_off, size_t *end_off,
                   uint16_t magic)
{
   1ac32:	b570      	push	{r4, r5, r6, lr}
   1ac34:	b082      	sub	sp, #8
   1ac36:	460c      	mov	r4, r1
   1ac38:	4616      	mov	r6, r2
   1ac3a:	461d      	mov	r5, r3
    struct image_tlv_info tlv_info;
    int rc;

    rc = img_mgmt_impl_read(slot, *start_off, &tlv_info, sizeof tlv_info);
   1ac3c:	2304      	movs	r3, #4
   1ac3e:	eb0d 0203 	add.w	r2, sp, r3
   1ac42:	6809      	ldr	r1, [r1, #0]
   1ac44:	f000 fdf5 	bl	1b832 <img_mgmt_impl_read>
    if (rc != 0) {
   1ac48:	b960      	cbnz	r0, 1ac64 <img_mgmt_find_tlvs+0x32>
        /* Read error. */
        return MGMT_ERR_EUNKNOWN;
    }

    if (tlv_info.it_magic != magic) {
   1ac4a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1ac4e:	42ab      	cmp	r3, r5
   1ac50:	d10a      	bne.n	1ac68 <img_mgmt_find_tlvs+0x36>
        /* No TLVs. */
        return MGMT_ERR_ENOENT;
    }

    *start_off += sizeof tlv_info;
   1ac52:	6823      	ldr	r3, [r4, #0]
   1ac54:	3304      	adds	r3, #4
   1ac56:	6023      	str	r3, [r4, #0]
    *end_off = *start_off + tlv_info.it_tlv_tot;
   1ac58:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1ac5c:	4413      	add	r3, r2
   1ac5e:	6033      	str	r3, [r6, #0]

    return 0;
}
   1ac60:	b002      	add	sp, #8
   1ac62:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_EUNKNOWN;
   1ac64:	2001      	movs	r0, #1
   1ac66:	e7fb      	b.n	1ac60 <img_mgmt_find_tlvs+0x2e>
        return MGMT_ERR_ENOENT;
   1ac68:	2005      	movs	r0, #5
   1ac6a:	e7f9      	b.n	1ac60 <img_mgmt_find_tlvs+0x2e>

0001ac6c <img_mgmt_upload_good_rsp>:
    return 0;
}

static int
img_mgmt_upload_good_rsp(struct mgmt_ctxt *ctxt)
{
   1ac6c:	b538      	push	{r3, r4, r5, lr}
   1ac6e:	4605      	mov	r5, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1ac70:	2202      	movs	r2, #2
   1ac72:	490e      	ldr	r1, [pc, #56]	; (1acac <img_mgmt_upload_good_rsp+0x40>)
   1ac74:	f00e f990 	bl	28f98 <cbor_encode_text_string>
   1ac78:	4604      	mov	r4, r0
    CborError err = CborNoError;

    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
   1ac7a:	2200      	movs	r2, #0
   1ac7c:	2300      	movs	r3, #0
   1ac7e:	4628      	mov	r0, r5
   1ac80:	f00e f915 	bl	28eae <cbor_encode_int>
   1ac84:	4304      	orrs	r4, r0
   1ac86:	2203      	movs	r2, #3
   1ac88:	4909      	ldr	r1, [pc, #36]	; (1acb0 <img_mgmt_upload_good_rsp+0x44>)
   1ac8a:	4628      	mov	r0, r5
   1ac8c:	f00e f984 	bl	28f98 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "off");
   1ac90:	4304      	orrs	r4, r0
    err |= cbor_encode_int(&ctxt->encoder, g_img_mgmt_state.off);
   1ac92:	4b08      	ldr	r3, [pc, #32]	; (1acb4 <img_mgmt_upload_good_rsp+0x48>)
   1ac94:	685a      	ldr	r2, [r3, #4]
   1ac96:	2300      	movs	r3, #0
   1ac98:	4628      	mov	r0, r5
   1ac9a:	f00e f908 	bl	28eae <cbor_encode_int>

    if (err != 0) {
   1ac9e:	ea54 0300 	orrs.w	r3, r4, r0
   1aca2:	d101      	bne.n	1aca8 <img_mgmt_upload_good_rsp+0x3c>
        return MGMT_ERR_ENOMEM;
    }

    return 0;
   1aca4:	2000      	movs	r0, #0
}
   1aca6:	bd38      	pop	{r3, r4, r5, pc}
        return MGMT_ERR_ENOMEM;
   1aca8:	2002      	movs	r0, #2
   1acaa:	e7fc      	b.n	1aca6 <img_mgmt_upload_good_rsp+0x3a>
   1acac:	00030688 	.word	0x00030688
   1acb0:	000309a8 	.word	0x000309a8
   1acb4:	10003408 	.word	0x10003408

0001acb8 <img_mgmt_read_info>:
{
   1acb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1acba:	b08d      	sub	sp, #52	; 0x34
   1acbc:	4604      	mov	r4, r0
   1acbe:	460d      	mov	r5, r1
   1acc0:	4616      	mov	r6, r2
   1acc2:	461f      	mov	r7, r3
    rc = img_mgmt_impl_erased_val(image_slot, &erased_val);
   1acc4:	f10d 0103 	add.w	r1, sp, #3
   1acc8:	f000 fe20 	bl	1b90c <img_mgmt_impl_erased_val>
    if (rc != 0) {
   1accc:	b118      	cbz	r0, 1acd6 <img_mgmt_read_info+0x1e>
        return MGMT_ERR_EUNKNOWN;
   1acce:	2501      	movs	r5, #1
}
   1acd0:	4628      	mov	r0, r5
   1acd2:	b00d      	add	sp, #52	; 0x34
   1acd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = img_mgmt_impl_read(image_slot, 0, &hdr, sizeof hdr);
   1acd6:	2320      	movs	r3, #32
   1acd8:	aa04      	add	r2, sp, #16
   1acda:	2100      	movs	r1, #0
   1acdc:	4620      	mov	r0, r4
   1acde:	f000 fda8 	bl	1b832 <img_mgmt_impl_read>
    if (rc != 0) {
   1ace2:	2800      	cmp	r0, #0
   1ace4:	d178      	bne.n	1add8 <img_mgmt_read_info+0x120>
    if (ver != NULL) {
   1ace6:	b12d      	cbz	r5, 1acf4 <img_mgmt_read_info+0x3c>
        memset(ver, erased_val, sizeof(*ver));
   1ace8:	2208      	movs	r2, #8
   1acea:	f89d 1003 	ldrb.w	r1, [sp, #3]
   1acee:	4628      	mov	r0, r5
   1acf0:	f7fb ff15 	bl	16b1e <memset>
    erased_val_32 = ERASED_VAL_32(erased_val);
   1acf4:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1acf8:	0413      	lsls	r3, r2, #16
   1acfa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1acfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1ad02:	431a      	orrs	r2, r3
    if (hdr.ih_magic == IMAGE_MAGIC) {
   1ad04:	9b04      	ldr	r3, [sp, #16]
   1ad06:	493a      	ldr	r1, [pc, #232]	; (1adf0 <img_mgmt_read_info+0x138>)
   1ad08:	428b      	cmp	r3, r1
   1ad0a:	d003      	beq.n	1ad14 <img_mgmt_read_info+0x5c>
    } else if (hdr.ih_magic == erased_val_32) {
   1ad0c:	4293      	cmp	r3, r2
   1ad0e:	d025      	beq.n	1ad5c <img_mgmt_read_info+0xa4>
        return MGMT_ERR_EUNKNOWN;
   1ad10:	2501      	movs	r5, #1
   1ad12:	e7dd      	b.n	1acd0 <img_mgmt_read_info+0x18>
        if (ver != NULL) {
   1ad14:	b11d      	cbz	r5, 1ad1e <img_mgmt_read_info+0x66>
            memcpy(ver, &hdr.ih_ver, sizeof(*ver));
   1ad16:	ab09      	add	r3, sp, #36	; 0x24
   1ad18:	cb03      	ldmia	r3!, {r0, r1}
   1ad1a:	6028      	str	r0, [r5, #0]
   1ad1c:	6069      	str	r1, [r5, #4]
    if (flags != NULL) {
   1ad1e:	b10f      	cbz	r7, 1ad24 <img_mgmt_read_info+0x6c>
        *flags = hdr.ih_flags;
   1ad20:	9b08      	ldr	r3, [sp, #32]
   1ad22:	603b      	str	r3, [r7, #0]
    data_off = hdr.ih_hdr_size + hdr.ih_img_size;
   1ad24:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1ad28:	9a07      	ldr	r2, [sp, #28]
   1ad2a:	4413      	add	r3, r2
   1ad2c:	9302      	str	r3, [sp, #8]
    rc = img_mgmt_find_tlvs(image_slot, &data_off, &data_end, IMAGE_TLV_PROT_INFO_MAGIC);
   1ad2e:	f646 1308 	movw	r3, #26888	; 0x6908
   1ad32:	aa01      	add	r2, sp, #4
   1ad34:	a902      	add	r1, sp, #8
   1ad36:	4620      	mov	r0, r4
   1ad38:	f7ff ff7b 	bl	1ac32 <img_mgmt_find_tlvs>
    if (!rc) {
   1ad3c:	b910      	cbnz	r0, 1ad44 <img_mgmt_read_info+0x8c>
        data_off = data_end - sizeof(struct image_tlv_info);
   1ad3e:	9b01      	ldr	r3, [sp, #4]
   1ad40:	3b04      	subs	r3, #4
   1ad42:	9302      	str	r3, [sp, #8]
    rc = img_mgmt_find_tlvs(image_slot, &data_off, &data_end, IMAGE_TLV_INFO_MAGIC);
   1ad44:	f646 1307 	movw	r3, #26887	; 0x6907
   1ad48:	aa01      	add	r2, sp, #4
   1ad4a:	a902      	add	r1, sp, #8
   1ad4c:	4620      	mov	r0, r4
   1ad4e:	f7ff ff70 	bl	1ac32 <img_mgmt_find_tlvs>
    if (rc != 0) {
   1ad52:	4605      	mov	r5, r0
   1ad54:	2800      	cmp	r0, #0
   1ad56:	d141      	bne.n	1addc <img_mgmt_read_info+0x124>
    hash_found = false;
   1ad58:	2700      	movs	r7, #0
   1ad5a:	e00f      	b.n	1ad7c <img_mgmt_read_info+0xc4>
        return MGMT_ERR_ENOENT;
   1ad5c:	2505      	movs	r5, #5
   1ad5e:	e7b7      	b.n	1acd0 <img_mgmt_read_info+0x18>
        if (tlv.it_type == 0xff && tlv.it_len == 0xffff) {
   1ad60:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1ad64:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1ad68:	4291      	cmp	r1, r2
   1ad6a:	d116      	bne.n	1ad9a <img_mgmt_read_info+0xe2>
            return MGMT_ERR_EUNKNOWN;
   1ad6c:	2501      	movs	r5, #1
   1ad6e:	e7af      	b.n	1acd0 <img_mgmt_read_info+0x18>
            data_off += sizeof tlv + tlv.it_len;
   1ad70:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1ad74:	9a02      	ldr	r2, [sp, #8]
   1ad76:	4413      	add	r3, r2
   1ad78:	3304      	adds	r3, #4
   1ad7a:	9302      	str	r3, [sp, #8]
    while (data_off + sizeof tlv <= data_end) {
   1ad7c:	9902      	ldr	r1, [sp, #8]
   1ad7e:	1d0a      	adds	r2, r1, #4
   1ad80:	9b01      	ldr	r3, [sp, #4]
   1ad82:	429a      	cmp	r2, r3
   1ad84:	d823      	bhi.n	1adce <img_mgmt_read_info+0x116>
        rc = img_mgmt_impl_read(image_slot, data_off, &tlv, sizeof tlv);
   1ad86:	2304      	movs	r3, #4
   1ad88:	aa03      	add	r2, sp, #12
   1ad8a:	4620      	mov	r0, r4
   1ad8c:	f000 fd51 	bl	1b832 <img_mgmt_impl_read>
        if (rc != 0) {
   1ad90:	bb30      	cbnz	r0, 1ade0 <img_mgmt_read_info+0x128>
        if (tlv.it_type == 0xff && tlv.it_len == 0xffff) {
   1ad92:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1ad96:	2bff      	cmp	r3, #255	; 0xff
   1ad98:	d0e2      	beq.n	1ad60 <img_mgmt_read_info+0xa8>
        if (tlv.it_type != IMAGE_TLV_SHA256 || tlv.it_len != IMAGE_HASH_LEN) {
   1ad9a:	2b10      	cmp	r3, #16
   1ad9c:	d1e8      	bne.n	1ad70 <img_mgmt_read_info+0xb8>
   1ad9e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1ada2:	2b20      	cmp	r3, #32
   1ada4:	d1e4      	bne.n	1ad70 <img_mgmt_read_info+0xb8>
        if (hash_found) {
   1ada6:	b9ef      	cbnz	r7, 1ade4 <img_mgmt_read_info+0x12c>
        data_off += sizeof tlv;
   1ada8:	9902      	ldr	r1, [sp, #8]
   1adaa:	3104      	adds	r1, #4
   1adac:	9102      	str	r1, [sp, #8]
        if (hash != NULL) {
   1adae:	b166      	cbz	r6, 1adca <img_mgmt_read_info+0x112>
            if (data_off + IMAGE_HASH_LEN > data_end) {
   1adb0:	f101 0320 	add.w	r3, r1, #32
   1adb4:	9a01      	ldr	r2, [sp, #4]
   1adb6:	4293      	cmp	r3, r2
   1adb8:	d816      	bhi.n	1ade8 <img_mgmt_read_info+0x130>
            rc = img_mgmt_impl_read(image_slot, data_off, hash,
   1adba:	2320      	movs	r3, #32
   1adbc:	4632      	mov	r2, r6
   1adbe:	4620      	mov	r0, r4
   1adc0:	f000 fd37 	bl	1b832 <img_mgmt_impl_read>
            if (rc != 0) {
   1adc4:	b990      	cbnz	r0, 1adec <img_mgmt_read_info+0x134>
        hash_found = true;
   1adc6:	2701      	movs	r7, #1
   1adc8:	e7d8      	b.n	1ad7c <img_mgmt_read_info+0xc4>
   1adca:	2701      	movs	r7, #1
   1adcc:	e7d6      	b.n	1ad7c <img_mgmt_read_info+0xc4>
    if (!hash_found) {
   1adce:	2f00      	cmp	r7, #0
   1add0:	f47f af7e 	bne.w	1acd0 <img_mgmt_read_info+0x18>
        return MGMT_ERR_EUNKNOWN;
   1add4:	2501      	movs	r5, #1
   1add6:	e77b      	b.n	1acd0 <img_mgmt_read_info+0x18>
        return MGMT_ERR_EUNKNOWN;
   1add8:	2501      	movs	r5, #1
   1adda:	e779      	b.n	1acd0 <img_mgmt_read_info+0x18>
        return MGMT_ERR_EUNKNOWN;
   1addc:	2501      	movs	r5, #1
   1adde:	e777      	b.n	1acd0 <img_mgmt_read_info+0x18>
            return MGMT_ERR_EUNKNOWN;
   1ade0:	2501      	movs	r5, #1
   1ade2:	e775      	b.n	1acd0 <img_mgmt_read_info+0x18>
            return MGMT_ERR_EUNKNOWN;
   1ade4:	2501      	movs	r5, #1
   1ade6:	e773      	b.n	1acd0 <img_mgmt_read_info+0x18>
                return MGMT_ERR_EUNKNOWN;
   1ade8:	2501      	movs	r5, #1
   1adea:	e771      	b.n	1acd0 <img_mgmt_read_info+0x18>
                return MGMT_ERR_EUNKNOWN;
   1adec:	2501      	movs	r5, #1
   1adee:	e76f      	b.n	1acd0 <img_mgmt_read_info+0x18>
   1adf0:	96f3b83d 	.word	0x96f3b83d

0001adf4 <img_mgmt_upload_log>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
img_mgmt_upload_log(bool is_first, bool is_last, int status)
{
   1adf4:	b510      	push	{r4, lr}
   1adf6:	b088      	sub	sp, #32
   1adf8:	4614      	mov	r4, r2
    uint8_t hash[IMAGE_HASH_LEN];
    const uint8_t *hashp;
    int rc;

    if (is_first) {
   1adfa:	b920      	cbnz	r0, 1ae06 <img_mgmt_upload_log+0x12>
        return img_mgmt_impl_log_upload_start(status);
    }

    if (is_last || status != 0) {
   1adfc:	b939      	cbnz	r1, 1ae0e <img_mgmt_upload_log+0x1a>
   1adfe:	b932      	cbnz	r2, 1ae0e <img_mgmt_upload_log+0x1a>

        return img_mgmt_impl_log_upload_done(status, hashp);
    }

    /* Nothing to log. */
    return 0;
   1ae00:	4610      	mov	r0, r2
}
   1ae02:	b008      	add	sp, #32
   1ae04:	bd10      	pop	{r4, pc}
        return img_mgmt_impl_log_upload_start(status);
   1ae06:	4610      	mov	r0, r2
   1ae08:	f000 fdaa 	bl	1b960 <img_mgmt_impl_log_upload_start>
   1ae0c:	e7f9      	b.n	1ae02 <img_mgmt_upload_log+0xe>
        rc = img_mgmt_read_info(1, NULL, hash, NULL);
   1ae0e:	2300      	movs	r3, #0
   1ae10:	466a      	mov	r2, sp
   1ae12:	4619      	mov	r1, r3
   1ae14:	2001      	movs	r0, #1
   1ae16:	f7ff ff4f 	bl	1acb8 <img_mgmt_read_info>
        if (rc != 0) {
   1ae1a:	b120      	cbz	r0, 1ae26 <img_mgmt_upload_log+0x32>
            hashp = NULL;
   1ae1c:	2100      	movs	r1, #0
        return img_mgmt_impl_log_upload_done(status, hashp);
   1ae1e:	4620      	mov	r0, r4
   1ae20:	f000 fda8 	bl	1b974 <img_mgmt_impl_log_upload_done>
   1ae24:	e7ed      	b.n	1ae02 <img_mgmt_upload_log+0xe>
            hashp = hash;
   1ae26:	4669      	mov	r1, sp
   1ae28:	e7f9      	b.n	1ae1e <img_mgmt_upload_log+0x2a>

0001ae2a <img_mgmt_find_by_hash>:
{
   1ae2a:	b570      	push	{r4, r5, r6, lr}
   1ae2c:	b088      	sub	sp, #32
   1ae2e:	4606      	mov	r6, r0
   1ae30:	460d      	mov	r5, r1
    for (i = 0; i < 2 * IMG_MGMT_UPDATABLE_IMAGE_NUMBER; i++) {
   1ae32:	2400      	movs	r4, #0
   1ae34:	e000      	b.n	1ae38 <img_mgmt_find_by_hash+0xe>
   1ae36:	3401      	adds	r4, #1
   1ae38:	2c01      	cmp	r4, #1
   1ae3a:	dc0f      	bgt.n	1ae5c <img_mgmt_find_by_hash+0x32>
        if (img_mgmt_read_info(i, ver, hash, NULL) != 0) {
   1ae3c:	2300      	movs	r3, #0
   1ae3e:	466a      	mov	r2, sp
   1ae40:	4629      	mov	r1, r5
   1ae42:	4620      	mov	r0, r4
   1ae44:	f7ff ff38 	bl	1acb8 <img_mgmt_read_info>
   1ae48:	2800      	cmp	r0, #0
   1ae4a:	d1f4      	bne.n	1ae36 <img_mgmt_find_by_hash+0xc>
        if (!memcmp(hash, find, IMAGE_HASH_LEN)) {
   1ae4c:	2220      	movs	r2, #32
   1ae4e:	4631      	mov	r1, r6
   1ae50:	4668      	mov	r0, sp
   1ae52:	f7fb fe1b 	bl	16a8c <memcmp>
   1ae56:	2800      	cmp	r0, #0
   1ae58:	d1ed      	bne.n	1ae36 <img_mgmt_find_by_hash+0xc>
   1ae5a:	e001      	b.n	1ae60 <img_mgmt_find_by_hash+0x36>
    return -1;
   1ae5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   1ae60:	4620      	mov	r0, r4
   1ae62:	b008      	add	sp, #32
   1ae64:	bd70      	pop	{r4, r5, r6, pc}
	...

0001ae68 <img_mgmt_dfu_stopped>:
    return img_mgmt_upload_good_rsp(ctxt);
}

void
img_mgmt_dfu_stopped(void)
{
   1ae68:	b508      	push	{r3, lr}
    if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_stopped_cb) {
   1ae6a:	4b03      	ldr	r3, [pc, #12]	; (1ae78 <img_mgmt_dfu_stopped+0x10>)
   1ae6c:	681b      	ldr	r3, [r3, #0]
   1ae6e:	b113      	cbz	r3, 1ae76 <img_mgmt_dfu_stopped+0xe>
   1ae70:	685b      	ldr	r3, [r3, #4]
   1ae72:	b103      	cbz	r3, 1ae76 <img_mgmt_dfu_stopped+0xe>
        img_mgmt_dfu_callbacks_fn->dfu_stopped_cb();
   1ae74:	4798      	blx	r3
    }
}
   1ae76:	bd08      	pop	{r3, pc}
   1ae78:	10003438 	.word	0x10003438

0001ae7c <img_mgmt_erase>:
{
   1ae7c:	b570      	push	{r4, r5, r6, lr}
   1ae7e:	b082      	sub	sp, #8
   1ae80:	4604      	mov	r4, r0
    rc = img_mgmt_read_info(1, &ver, NULL, NULL);
   1ae82:	2300      	movs	r3, #0
   1ae84:	461a      	mov	r2, r3
   1ae86:	4669      	mov	r1, sp
   1ae88:	2001      	movs	r0, #1
   1ae8a:	f7ff ff15 	bl	1acb8 <img_mgmt_read_info>
    if (rc == 0) {
   1ae8e:	b918      	cbnz	r0, 1ae98 <img_mgmt_erase+0x1c>
        if (img_mgmt_slot_in_use(1)) {
   1ae90:	2001      	movs	r0, #1
   1ae92:	f000 f9aa 	bl	1b1ea <img_mgmt_slot_in_use>
   1ae96:	b9b8      	cbnz	r0, 1aec8 <img_mgmt_erase+0x4c>
    rc = img_mgmt_impl_erase_slot();
   1ae98:	f000 fc56 	bl	1b748 <img_mgmt_impl_erase_slot>
    if (!rc) {
   1ae9c:	4606      	mov	r6, r0
   1ae9e:	b180      	cbz	r0, 1aec2 <img_mgmt_erase+0x46>
   1aea0:	2202      	movs	r2, #2
   1aea2:	490b      	ldr	r1, [pc, #44]	; (1aed0 <img_mgmt_erase+0x54>)
   1aea4:	4620      	mov	r0, r4
   1aea6:	f00e f877 	bl	28f98 <cbor_encode_text_string>
   1aeaa:	4605      	mov	r5, r0
    err |= cbor_encode_int(&ctxt->encoder, rc);
   1aeac:	4632      	mov	r2, r6
   1aeae:	17f3      	asrs	r3, r6, #31
   1aeb0:	4620      	mov	r0, r4
   1aeb2:	f00d fffc 	bl	28eae <cbor_encode_int>
    if (err != 0) {
   1aeb6:	ea50 0305 	orrs.w	r3, r0, r5
   1aeba:	d107      	bne.n	1aecc <img_mgmt_erase+0x50>
    return 0;
   1aebc:	2000      	movs	r0, #0
}
   1aebe:	b002      	add	sp, #8
   1aec0:	bd70      	pop	{r4, r5, r6, pc}
        img_mgmt_dfu_stopped();
   1aec2:	f7ff ffd1 	bl	1ae68 <img_mgmt_dfu_stopped>
   1aec6:	e7eb      	b.n	1aea0 <img_mgmt_erase+0x24>
            return MGMT_ERR_EBADSTATE;
   1aec8:	2006      	movs	r0, #6
   1aeca:	e7f8      	b.n	1aebe <img_mgmt_erase+0x42>
        return MGMT_ERR_ENOMEM;
   1aecc:	2002      	movs	r0, #2
   1aece:	e7f6      	b.n	1aebe <img_mgmt_erase+0x42>
   1aed0:	00030688 	.word	0x00030688

0001aed4 <img_mgmt_dfu_started>:

void
img_mgmt_dfu_started(void)
{
   1aed4:	b508      	push	{r3, lr}
    if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_started_cb) {
   1aed6:	4b03      	ldr	r3, [pc, #12]	; (1aee4 <img_mgmt_dfu_started+0x10>)
   1aed8:	681b      	ldr	r3, [r3, #0]
   1aeda:	b113      	cbz	r3, 1aee2 <img_mgmt_dfu_started+0xe>
   1aedc:	681b      	ldr	r3, [r3, #0]
   1aede:	b103      	cbz	r3, 1aee2 <img_mgmt_dfu_started+0xe>
        img_mgmt_dfu_callbacks_fn->dfu_started_cb();
   1aee0:	4798      	blx	r3
    }
}
   1aee2:	bd08      	pop	{r3, pc}
   1aee4:	10003438 	.word	0x10003438

0001aee8 <img_mgmt_dfu_pending>:

void
img_mgmt_dfu_pending(void)
{
   1aee8:	b508      	push	{r3, lr}
    if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_pending_cb) {
   1aeea:	4b03      	ldr	r3, [pc, #12]	; (1aef8 <img_mgmt_dfu_pending+0x10>)
   1aeec:	681b      	ldr	r3, [r3, #0]
   1aeee:	b113      	cbz	r3, 1aef6 <img_mgmt_dfu_pending+0xe>
   1aef0:	689b      	ldr	r3, [r3, #8]
   1aef2:	b103      	cbz	r3, 1aef6 <img_mgmt_dfu_pending+0xe>
        img_mgmt_dfu_callbacks_fn->dfu_pending_cb();
   1aef4:	4798      	blx	r3
    }
}
   1aef6:	bd08      	pop	{r3, pc}
   1aef8:	10003438 	.word	0x10003438

0001aefc <img_mgmt_upload>:
{
   1aefc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1af00:	f5ad 7d71 	sub.w	sp, sp, #964	; 0x3c4
   1af04:	4605      	mov	r5, r0
    struct img_mgmt_upload_req req = {
   1af06:	ac5c      	add	r4, sp, #368	; 0x170
   1af08:	f44f 7212 	mov.w	r2, #584	; 0x248
   1af0c:	2100      	movs	r1, #0
   1af0e:	4620      	mov	r0, r4
   1af10:	f7fb fe05 	bl	16b1e <memset>
   1af14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1af18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1af1c:	e9c4 2302 	strd	r2, r3, [r4, #8]
   1af20:	e9c4 2304 	strd	r2, r3, [r4, #16]
    const struct cbor_attr_t off_attr[] = {
   1af24:	f44f 72a8 	mov.w	r2, #336	; 0x150
   1af28:	2100      	movs	r1, #0
   1af2a:	a808      	add	r0, sp, #32
   1af2c:	f7fb fdf7 	bl	16b1e <memset>
   1af30:	4b71      	ldr	r3, [pc, #452]	; (1b0f8 <img_mgmt_upload+0x1fc>)
   1af32:	9308      	str	r3, [sp, #32]
   1af34:	2202      	movs	r2, #2
   1af36:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
   1af3a:	940a      	str	r4, [sp, #40]	; 0x28
   1af3c:	2301      	movs	r3, #1
   1af3e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
   1af42:	496e      	ldr	r1, [pc, #440]	; (1b0fc <img_mgmt_upload+0x200>)
   1af44:	9114      	str	r1, [sp, #80]	; 0x50
   1af46:	2103      	movs	r1, #3
   1af48:	f88d 1054 	strb.w	r1, [sp, #84]	; 0x54
   1af4c:	a864      	add	r0, sp, #400	; 0x190
   1af4e:	9016      	str	r0, [sp, #88]	; 0x58
   1af50:	a862      	add	r0, sp, #392	; 0x188
   1af52:	9017      	str	r0, [sp, #92]	; 0x5c
   1af54:	f44f 7000 	mov.w	r0, #512	; 0x200
   1af58:	901e      	str	r0, [sp, #120]	; 0x78
   1af5a:	4869      	ldr	r0, [pc, #420]	; (1b100 <img_mgmt_upload+0x204>)
   1af5c:	9020      	str	r0, [sp, #128]	; 0x80
   1af5e:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   1af62:	a860      	add	r0, sp, #384	; 0x180
   1af64:	9022      	str	r0, [sp, #136]	; 0x88
   1af66:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
   1af6a:	4866      	ldr	r0, [pc, #408]	; (1b104 <img_mgmt_upload+0x208>)
   1af6c:	902c      	str	r0, [sp, #176]	; 0xb0
   1af6e:	f88d 20b4 	strb.w	r2, [sp, #180]	; 0xb4
   1af72:	aa5e      	add	r2, sp, #376	; 0x178
   1af74:	922e      	str	r2, [sp, #184]	; 0xb8
   1af76:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
   1af7a:	4b63      	ldr	r3, [pc, #396]	; (1b108 <img_mgmt_upload+0x20c>)
   1af7c:	9338      	str	r3, [sp, #224]	; 0xe0
   1af7e:	f88d 10e4 	strb.w	r1, [sp, #228]	; 0xe4
   1af82:	abe4      	add	r3, sp, #912	; 0x390
   1af84:	933a      	str	r3, [sp, #232]	; 0xe8
   1af86:	ab63      	add	r3, sp, #396	; 0x18c
   1af88:	933b      	str	r3, [sp, #236]	; 0xec
   1af8a:	2320      	movs	r3, #32
   1af8c:	9342      	str	r3, [sp, #264]	; 0x108
   1af8e:	4b5f      	ldr	r3, [pc, #380]	; (1b10c <img_mgmt_upload+0x210>)
   1af90:	9344      	str	r3, [sp, #272]	; 0x110
   1af92:	2305      	movs	r3, #5
   1af94:	f88d 3114 	strb.w	r3, [sp, #276]	; 0x114
   1af98:	abec      	add	r3, sp, #944	; 0x3b0
   1af9a:	9346      	str	r3, [sp, #280]	; 0x118
    const char *errstr = NULL;
   1af9c:	2300      	movs	r3, #0
   1af9e:	9307      	str	r3, [sp, #28]
    rc = cbor_read_object(&ctxt->it, off_attr);
   1afa0:	a908      	add	r1, sp, #32
   1afa2:	f105 001c 	add.w	r0, r5, #28
   1afa6:	f7ff fe3e 	bl	1ac26 <cbor_read_object>
    if (rc != 0) {
   1afaa:	2800      	cmp	r0, #0
   1afac:	f040 809d 	bne.w	1b0ea <img_mgmt_upload+0x1ee>
    rc = img_mgmt_impl_upload_inspect(&req, &action, &errstr);
   1afb0:	aa07      	add	r2, sp, #28
   1afb2:	4669      	mov	r1, sp
   1afb4:	a85c      	add	r0, sp, #368	; 0x170
   1afb6:	f000 faff 	bl	1b5b8 <img_mgmt_impl_upload_inspect>
    if (rc != 0) {
   1afba:	4604      	mov	r4, r0
   1afbc:	2800      	cmp	r0, #0
   1afbe:	d13c      	bne.n	1b03a <img_mgmt_upload+0x13e>
    if (!action.proceed) {
   1afc0:	f89d 6010 	ldrb.w	r6, [sp, #16]
   1afc4:	2e00      	cmp	r6, #0
   1afc6:	d03b      	beq.n	1b040 <img_mgmt_upload+0x144>
    if (img_mgmt_upload_cb != NULL) {
   1afc8:	4b51      	ldr	r3, [pc, #324]	; (1b110 <img_mgmt_upload+0x214>)
   1afca:	681b      	ldr	r3, [r3, #0]
   1afcc:	b13b      	cbz	r3, 1afde <img_mgmt_upload+0xe2>
        rc = img_mgmt_upload_cb(req.off, action.size, img_mgmt_upload_arg);
   1afce:	4a51      	ldr	r2, [pc, #324]	; (1b114 <img_mgmt_upload+0x218>)
   1afd0:	6812      	ldr	r2, [r2, #0]
   1afd2:	9900      	ldr	r1, [sp, #0]
   1afd4:	985e      	ldr	r0, [sp, #376]	; 0x178
   1afd6:	4798      	blx	r3
        if (rc != 0) {
   1afd8:	4604      	mov	r4, r0
   1afda:	2800      	cmp	r0, #0
   1afdc:	d135      	bne.n	1b04a <img_mgmt_upload+0x14e>
    g_img_mgmt_state.area_id = action.area_id;
   1afde:	9a03      	ldr	r2, [sp, #12]
   1afe0:	4b4d      	ldr	r3, [pc, #308]	; (1b118 <img_mgmt_upload+0x21c>)
   1afe2:	601a      	str	r2, [r3, #0]
    g_img_mgmt_state.size = action.size;
   1afe4:	9a00      	ldr	r2, [sp, #0]
   1afe6:	609a      	str	r2, [r3, #8]
    if (req.off == 0) {
   1afe8:	e9dd 235e 	ldrd	r2, r3, [sp, #376]	; 0x178
   1afec:	4313      	orrs	r3, r2
   1afee:	d04a      	beq.n	1b086 <img_mgmt_upload+0x18a>
        cmd_status_arg.status = IMG_MGMT_ID_UPLOAD_STATUS_ONGOING;
   1aff0:	2301      	movs	r3, #1
   1aff2:	93ef      	str	r3, [sp, #956]	; 0x3bc
    if (req.data_len != 0) {
   1aff4:	9b62      	ldr	r3, [sp, #392]	; 0x188
   1aff6:	b353      	cbz	r3, 1b04e <img_mgmt_upload+0x152>
        if (g_img_mgmt_state.off + req.data_len == g_img_mgmt_state.size) {
   1aff8:	4a47      	ldr	r2, [pc, #284]	; (1b118 <img_mgmt_upload+0x21c>)
   1affa:	6851      	ldr	r1, [r2, #4]
   1affc:	440b      	add	r3, r1
   1affe:	6892      	ldr	r2, [r2, #8]
   1b000:	4293      	cmp	r3, r2
   1b002:	d000      	beq.n	1b006 <img_mgmt_upload+0x10a>
    bool last = false;
   1b004:	2600      	movs	r6, #0
        rc = img_mgmt_impl_write_image_data(req.off, req.img_data, action.write_bytes, last);
   1b006:	4633      	mov	r3, r6
   1b008:	9a02      	ldr	r2, [sp, #8]
   1b00a:	a964      	add	r1, sp, #400	; 0x190
   1b00c:	985e      	ldr	r0, [sp, #376]	; 0x178
   1b00e:	f000 fc29 	bl	1b864 <img_mgmt_impl_write_image_data>
        if (rc != 0) {
   1b012:	4604      	mov	r4, r0
   1b014:	2800      	cmp	r0, #0
   1b016:	d161      	bne.n	1b0dc <img_mgmt_upload+0x1e0>
            g_img_mgmt_state.off += action.write_bytes;
   1b018:	9b02      	ldr	r3, [sp, #8]
   1b01a:	4a3f      	ldr	r2, [pc, #252]	; (1b118 <img_mgmt_upload+0x21c>)
   1b01c:	6851      	ldr	r1, [r2, #4]
   1b01e:	440b      	add	r3, r1
   1b020:	6053      	str	r3, [r2, #4]
            if (g_img_mgmt_state.off == g_img_mgmt_state.size) {
   1b022:	6892      	ldr	r2, [r2, #8]
   1b024:	4293      	cmp	r3, r2
   1b026:	d112      	bne.n	1b04e <img_mgmt_upload+0x152>
                img_mgmt_dfu_pending();
   1b028:	f7ff ff5e 	bl	1aee8 <img_mgmt_dfu_pending>
                cmd_status_arg.status = IMG_MGMT_ID_UPLOAD_STATUS_COMPLETE;
   1b02c:	2302      	movs	r3, #2
   1b02e:	93ef      	str	r3, [sp, #956]	; 0x3bc
                g_img_mgmt_state.area_id = -1;
   1b030:	4b39      	ldr	r3, [pc, #228]	; (1b118 <img_mgmt_upload+0x21c>)
   1b032:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b036:	601a      	str	r2, [r3, #0]
   1b038:	e009      	b.n	1b04e <img_mgmt_upload+0x152>
        img_mgmt_dfu_stopped();
   1b03a:	f7ff ff15 	bl	1ae68 <img_mgmt_dfu_stopped>
        return rc;
   1b03e:	e055      	b.n	1b0ec <img_mgmt_upload+0x1f0>
        return img_mgmt_upload_good_rsp(ctxt);
   1b040:	4628      	mov	r0, r5
   1b042:	f7ff fe13 	bl	1ac6c <img_mgmt_upload_good_rsp>
   1b046:	4604      	mov	r4, r0
   1b048:	e050      	b.n	1b0ec <img_mgmt_upload+0x1f0>
            errstr = img_mgmt_err_str_app_reject;
   1b04a:	2300      	movs	r3, #0
   1b04c:	9307      	str	r3, [sp, #28]
    img_mgmt_upload_log(req.off == 0, g_img_mgmt_state.off == g_img_mgmt_state.size, rc);
   1b04e:	985e      	ldr	r0, [sp, #376]	; 0x178
   1b050:	9a5f      	ldr	r2, [sp, #380]	; 0x17c
   1b052:	4b31      	ldr	r3, [pc, #196]	; (1b118 <img_mgmt_upload+0x21c>)
   1b054:	6859      	ldr	r1, [r3, #4]
   1b056:	689b      	ldr	r3, [r3, #8]
   1b058:	4302      	orrs	r2, r0
   1b05a:	bf0c      	ite	eq
   1b05c:	2001      	moveq	r0, #1
   1b05e:	2000      	movne	r0, #0
   1b060:	4622      	mov	r2, r4
   1b062:	4299      	cmp	r1, r3
   1b064:	bf14      	ite	ne
   1b066:	2100      	movne	r1, #0
   1b068:	2101      	moveq	r1, #1
   1b06a:	f7ff fec3 	bl	1adf4 <img_mgmt_upload_log>
    mgmt_evt(MGMT_EVT_OP_CMD_STATUS, MGMT_GROUP_ID_IMAGE, IMG_MGMT_ID_UPLOAD,
   1b06e:	abef      	add	r3, sp, #956	; 0x3bc
   1b070:	2201      	movs	r2, #1
   1b072:	4611      	mov	r1, r2
   1b074:	2002      	movs	r0, #2
   1b076:	f001 f879 	bl	1c16c <mgmt_evt>
    if (rc != 0) {
   1b07a:	bb9c      	cbnz	r4, 1b0e4 <img_mgmt_upload+0x1e8>
    return img_mgmt_upload_good_rsp(ctxt);
   1b07c:	4628      	mov	r0, r5
   1b07e:	f7ff fdf5 	bl	1ac6c <img_mgmt_upload_good_rsp>
   1b082:	4604      	mov	r4, r0
   1b084:	e032      	b.n	1b0ec <img_mgmt_upload+0x1f0>
        g_img_mgmt_state.off = 0;
   1b086:	4f24      	ldr	r7, [pc, #144]	; (1b118 <img_mgmt_upload+0x21c>)
   1b088:	f04f 0900 	mov.w	r9, #0
   1b08c:	f8c7 9004 	str.w	r9, [r7, #4]
        img_mgmt_dfu_started();
   1b090:	f7ff ff20 	bl	1aed4 <img_mgmt_dfu_started>
        cmd_status_arg.status = IMG_MGMT_ID_UPLOAD_STATUS_START;
   1b094:	f8cd 93bc 	str.w	r9, [sp, #956]	; 0x3bc
        g_img_mgmt_state.data_sha_len = req.data_sha_len;
   1b098:	f8dd 818c 	ldr.w	r8, [sp, #396]	; 0x18c
   1b09c:	f887 800c 	strb.w	r8, [r7, #12]
        memcpy(g_img_mgmt_state.data_sha, req.data_sha, req.data_sha_len);
   1b0a0:	4642      	mov	r2, r8
   1b0a2:	a9e4      	add	r1, sp, #912	; 0x390
   1b0a4:	f107 000d 	add.w	r0, r7, #13
   1b0a8:	f7fb fd14 	bl	16ad4 <memcpy>
        memset(&g_img_mgmt_state.data_sha[req.data_sha_len], 0,
   1b0ac:	f108 0008 	add.w	r0, r8, #8
   1b0b0:	4438      	add	r0, r7
   1b0b2:	f1c8 0220 	rsb	r2, r8, #32
   1b0b6:	4649      	mov	r1, r9
   1b0b8:	3005      	adds	r0, #5
   1b0ba:	f7fb fd30 	bl	16b1e <memset>
        if (action.erase) {
   1b0be:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1b0c2:	2b00      	cmp	r3, #0
   1b0c4:	d096      	beq.n	1aff4 <img_mgmt_upload+0xf8>
            rc = img_mgmt_impl_erase_image_data(0, req.size);
   1b0c6:	9960      	ldr	r1, [sp, #384]	; 0x180
   1b0c8:	4648      	mov	r0, r9
   1b0ca:	f000 fbe2 	bl	1b892 <img_mgmt_impl_erase_image_data>
            if (rc != 0) {
   1b0ce:	4604      	mov	r4, r0
   1b0d0:	2800      	cmp	r0, #0
   1b0d2:	d08f      	beq.n	1aff4 <img_mgmt_upload+0xf8>
                errstr = img_mgmt_err_str_flash_erase_failed;
   1b0d4:	f8cd 901c 	str.w	r9, [sp, #28]
                rc = MGMT_ERR_EUNKNOWN;
   1b0d8:	2401      	movs	r4, #1
                goto end;
   1b0da:	e7b8      	b.n	1b04e <img_mgmt_upload+0x152>
            errstr = img_mgmt_err_str_flash_write_failed;
   1b0dc:	2300      	movs	r3, #0
   1b0de:	9307      	str	r3, [sp, #28]
            rc = MGMT_ERR_EUNKNOWN;
   1b0e0:	2401      	movs	r4, #1
            goto end;
   1b0e2:	e7b4      	b.n	1b04e <img_mgmt_upload+0x152>
        img_mgmt_dfu_stopped();
   1b0e4:	f7ff fec0 	bl	1ae68 <img_mgmt_dfu_stopped>
        return img_mgmt_error_rsp(ctxt, rc, errstr);
   1b0e8:	e000      	b.n	1b0ec <img_mgmt_upload+0x1f0>
        return MGMT_ERR_EINVAL;
   1b0ea:	2403      	movs	r4, #3
}
   1b0ec:	4620      	mov	r0, r4
   1b0ee:	f50d 7d71 	add.w	sp, sp, #964	; 0x3c4
   1b0f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b0f6:	bf00      	nop
   1b0f8:	000309ac 	.word	0x000309ac
   1b0fc:	000309b4 	.word	0x000309b4
   1b100:	000309bc 	.word	0x000309bc
   1b104:	000309a8 	.word	0x000309a8
   1b108:	000309c0 	.word	0x000309c0
   1b10c:	000309c4 	.word	0x000309c4
   1b110:	10003440 	.word	0x10003440
   1b114:	1000343c 	.word	0x1000343c
   1b118:	10003408 	.word	0x10003408

0001b11c <img_mgmt_dfu_confirmed>:

void
img_mgmt_dfu_confirmed(void)
{
   1b11c:	b508      	push	{r3, lr}
    if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_confirmed_cb) {
   1b11e:	4b03      	ldr	r3, [pc, #12]	; (1b12c <img_mgmt_dfu_confirmed+0x10>)
   1b120:	681b      	ldr	r3, [r3, #0]
   1b122:	b113      	cbz	r3, 1b12a <img_mgmt_dfu_confirmed+0xe>
   1b124:	68db      	ldr	r3, [r3, #12]
   1b126:	b103      	cbz	r3, 1b12a <img_mgmt_dfu_confirmed+0xe>
        img_mgmt_dfu_callbacks_fn->dfu_confirmed_cb();
   1b128:	4798      	blx	r3
    }
}
   1b12a:	bd08      	pop	{r3, pc}
   1b12c:	10003438 	.word	0x10003438

0001b130 <img_mgmt_my_version>:
}


int
img_mgmt_my_version(struct image_version *ver)
{
   1b130:	b508      	push	{r3, lr}
   1b132:	4601      	mov	r1, r0
    return img_mgmt_read_info(IMG_MGMT_BOOT_CURR_SLOT, ver, NULL, NULL);
   1b134:	2300      	movs	r3, #0
   1b136:	461a      	mov	r2, r3
   1b138:	4802      	ldr	r0, [pc, #8]	; (1b144 <img_mgmt_my_version+0x14>)
   1b13a:	6800      	ldr	r0, [r0, #0]
   1b13c:	f7ff fdbc 	bl	1acb8 <img_mgmt_read_info>
}
   1b140:	bd08      	pop	{r3, pc}
   1b142:	bf00      	nop
   1b144:	10004fb0 	.word	0x10004fb0

0001b148 <img_mgmt_register_group>:

void
img_mgmt_register_group(void)
{
   1b148:	b508      	push	{r3, lr}
    mgmt_register_group(&img_mgmt_group);
   1b14a:	4802      	ldr	r0, [pc, #8]	; (1b154 <img_mgmt_register_group+0xc>)
   1b14c:	f000 ffaa 	bl	1c0a4 <mgmt_register_group>
}
   1b150:	bd08      	pop	{r3, pc}
   1b152:	bf00      	nop
   1b154:	10000290 	.word	0x10000290

0001b158 <img_mgmt_state_flags>:
/**
 * Collects information about the specified image slot.
 */
uint8_t
img_mgmt_state_flags(int query_slot)
{
   1b158:	b510      	push	{r4, lr}
   1b15a:	4604      	mov	r4, r0
    flags = 0;

    /* Determine if this is is pending or confirmed (only applicable for
     * unified images and loaders.
     */
    swap_type = img_mgmt_impl_swap_type(query_slot);
   1b15c:	f000 fbae 	bl	1b8bc <img_mgmt_impl_swap_type>
    switch (swap_type) {
   1b160:	2803      	cmp	r0, #3
   1b162:	d825      	bhi.n	1b1b0 <img_mgmt_state_flags+0x58>
   1b164:	e8df f000 	tbb	[pc, r0]
   1b168:	1c140c02 	.word	0x1c140c02
    case IMG_MGMT_SWAP_TYPE_NONE:
        if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   1b16c:	4b14      	ldr	r3, [pc, #80]	; (1b1c0 <img_mgmt_state_flags+0x68>)
   1b16e:	681b      	ldr	r3, [r3, #0]
   1b170:	42a3      	cmp	r3, r4
   1b172:	d01f      	beq.n	1b1b4 <img_mgmt_state_flags+0x5c>
    flags = 0;
   1b174:	2000      	movs	r0, #0
        break;
    }

    /* Slot 0 is always active. */
    /* XXX: The slot 0 assumption only holds when running from flash. */
    if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   1b176:	4b12      	ldr	r3, [pc, #72]	; (1b1c0 <img_mgmt_state_flags+0x68>)
   1b178:	681b      	ldr	r3, [r3, #0]
   1b17a:	42a3      	cmp	r3, r4
   1b17c:	d01c      	beq.n	1b1b8 <img_mgmt_state_flags+0x60>
        flags |= IMG_MGMT_STATE_F_ACTIVE;
    }

    return flags;
}
   1b17e:	bd10      	pop	{r4, pc}
        if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   1b180:	4b0f      	ldr	r3, [pc, #60]	; (1b1c0 <img_mgmt_state_flags+0x68>)
   1b182:	681b      	ldr	r3, [r3, #0]
   1b184:	42a3      	cmp	r3, r4
   1b186:	d001      	beq.n	1b18c <img_mgmt_state_flags+0x34>
            flags |= IMG_MGMT_STATE_F_PENDING;
   1b188:	2001      	movs	r0, #1
   1b18a:	e7f4      	b.n	1b176 <img_mgmt_state_flags+0x1e>
            flags |= IMG_MGMT_STATE_F_CONFIRMED;
   1b18c:	2002      	movs	r0, #2
   1b18e:	e7f2      	b.n	1b176 <img_mgmt_state_flags+0x1e>
        if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   1b190:	4b0b      	ldr	r3, [pc, #44]	; (1b1c0 <img_mgmt_state_flags+0x68>)
   1b192:	681b      	ldr	r3, [r3, #0]
   1b194:	42a3      	cmp	r3, r4
   1b196:	d001      	beq.n	1b19c <img_mgmt_state_flags+0x44>
            flags |= IMG_MGMT_STATE_F_PENDING | IMG_MGMT_STATE_F_PERMANENT;
   1b198:	2009      	movs	r0, #9
   1b19a:	e7ec      	b.n	1b176 <img_mgmt_state_flags+0x1e>
            flags |= IMG_MGMT_STATE_F_CONFIRMED;
   1b19c:	2002      	movs	r0, #2
   1b19e:	e7ea      	b.n	1b176 <img_mgmt_state_flags+0x1e>
        if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   1b1a0:	4b07      	ldr	r3, [pc, #28]	; (1b1c0 <img_mgmt_state_flags+0x68>)
   1b1a2:	681b      	ldr	r3, [r3, #0]
   1b1a4:	42a3      	cmp	r3, r4
   1b1a6:	d001      	beq.n	1b1ac <img_mgmt_state_flags+0x54>
            flags |= IMG_MGMT_STATE_F_CONFIRMED;
   1b1a8:	2002      	movs	r0, #2
   1b1aa:	e7e4      	b.n	1b176 <img_mgmt_state_flags+0x1e>
            flags |= IMG_MGMT_STATE_F_ACTIVE;
   1b1ac:	2004      	movs	r0, #4
   1b1ae:	e7e2      	b.n	1b176 <img_mgmt_state_flags+0x1e>
    swap_type = img_mgmt_impl_swap_type(query_slot);
   1b1b0:	2000      	movs	r0, #0
   1b1b2:	e7e0      	b.n	1b176 <img_mgmt_state_flags+0x1e>
            flags |= IMG_MGMT_STATE_F_ACTIVE;
   1b1b4:	2006      	movs	r0, #6
   1b1b6:	e7de      	b.n	1b176 <img_mgmt_state_flags+0x1e>
        flags |= IMG_MGMT_STATE_F_ACTIVE;
   1b1b8:	f040 0004 	orr.w	r0, r0, #4
   1b1bc:	e7df      	b.n	1b17e <img_mgmt_state_flags+0x26>
   1b1be:	bf00      	nop
   1b1c0:	10004fb0 	.word	0x10004fb0

0001b1c4 <img_mgmt_state_any_pending>:
 * Indicates whether any image slot is pending (i.e., whether a test swap will
 * happen on the next reboot.
 */
int
img_mgmt_state_any_pending(void)
{
   1b1c4:	b508      	push	{r3, lr}
    return img_mgmt_state_flags(0) & IMG_MGMT_STATE_F_PENDING ||
   1b1c6:	2000      	movs	r0, #0
   1b1c8:	f7ff ffc6 	bl	1b158 <img_mgmt_state_flags>
   1b1cc:	f010 0f01 	tst.w	r0, #1
   1b1d0:	d001      	beq.n	1b1d6 <img_mgmt_state_any_pending+0x12>
   1b1d2:	2001      	movs	r0, #1
           img_mgmt_state_flags(1) & IMG_MGMT_STATE_F_PENDING;
}
   1b1d4:	bd08      	pop	{r3, pc}
           img_mgmt_state_flags(1) & IMG_MGMT_STATE_F_PENDING;
   1b1d6:	2001      	movs	r0, #1
   1b1d8:	f7ff ffbe 	bl	1b158 <img_mgmt_state_flags>
    return img_mgmt_state_flags(0) & IMG_MGMT_STATE_F_PENDING ||
   1b1dc:	f010 0f01 	tst.w	r0, #1
   1b1e0:	d101      	bne.n	1b1e6 <img_mgmt_state_any_pending+0x22>
   1b1e2:	2000      	movs	r0, #0
   1b1e4:	e7f6      	b.n	1b1d4 <img_mgmt_state_any_pending+0x10>
   1b1e6:	2001      	movs	r0, #1
   1b1e8:	e7f4      	b.n	1b1d4 <img_mgmt_state_any_pending+0x10>

0001b1ea <img_mgmt_slot_in_use>:
 * Indicates whether the specified slot has any flags.  If no flags are set,
 * the slot can be freely erased.
 */
int
img_mgmt_slot_in_use(int slot)
{
   1b1ea:	b508      	push	{r3, lr}
    uint8_t state_flags;

    state_flags = img_mgmt_state_flags(slot);
   1b1ec:	f7ff ffb4 	bl	1b158 <img_mgmt_state_flags>
    return state_flags & IMG_MGMT_STATE_F_ACTIVE       ||
           state_flags & IMG_MGMT_STATE_F_CONFIRMED    ||
   1b1f0:	f010 0f06 	tst.w	r0, #6
   1b1f4:	d104      	bne.n	1b200 <img_mgmt_slot_in_use+0x16>
   1b1f6:	f010 0f01 	tst.w	r0, #1
   1b1fa:	d003      	beq.n	1b204 <img_mgmt_slot_in_use+0x1a>
   1b1fc:	2001      	movs	r0, #1
   1b1fe:	e000      	b.n	1b202 <img_mgmt_slot_in_use+0x18>
   1b200:	2001      	movs	r0, #1
           state_flags & IMG_MGMT_STATE_F_PENDING;
}
   1b202:	bd08      	pop	{r3, pc}
           state_flags & IMG_MGMT_STATE_F_CONFIRMED    ||
   1b204:	2000      	movs	r0, #0
   1b206:	e7fc      	b.n	1b202 <img_mgmt_slot_in_use+0x18>

0001b208 <img_mgmt_state_set_pending>:
 * argument is specified, the system doesn't require a confirm after the swap
 * occurs.
 */
int
img_mgmt_state_set_pending(int slot, int permanent)
{
   1b208:	b570      	push	{r4, r5, r6, lr}
   1b20a:	b088      	sub	sp, #32
   1b20c:	4604      	mov	r4, r0
   1b20e:	460d      	mov	r5, r1
    uint8_t hash[IMAGE_HASH_LEN];
    uint8_t state_flags;
    const uint8_t *hashp;
    int rc;

    state_flags = img_mgmt_state_flags(slot);
   1b210:	f7ff ffa2 	bl	1b158 <img_mgmt_state_flags>

    /* Unconfirmed slots are always runable.  A confirmed slot can only be
     * run if it is a loader in a split image setup.
     */
    if (state_flags & IMG_MGMT_STATE_F_CONFIRMED && slot != 0) {
   1b214:	f010 0f02 	tst.w	r0, #2
   1b218:	d000      	beq.n	1b21c <img_mgmt_state_set_pending+0x14>
   1b21a:	b9b4      	cbnz	r4, 1b24a <img_mgmt_state_set_pending+0x42>
        rc = MGMT_ERR_EBADSTATE;
        goto done;
    }

    rc = img_mgmt_impl_write_pending(slot, permanent);
   1b21c:	1e29      	subs	r1, r5, #0
   1b21e:	bf18      	it	ne
   1b220:	2101      	movne	r1, #1
   1b222:	4620      	mov	r0, r4
   1b224:	f000 fab0 	bl	1b788 <img_mgmt_impl_write_pending>
    if (rc != 0) {
   1b228:	4606      	mov	r6, r0
   1b22a:	b980      	cbnz	r0, 1b24e <img_mgmt_state_set_pending+0x46>
        rc = MGMT_ERR_EUNKNOWN;
    }

done:
    /* Log the image hash if we know it. */
    if (img_mgmt_read_info(slot, NULL, hash, NULL)) {
   1b22c:	2300      	movs	r3, #0
   1b22e:	466a      	mov	r2, sp
   1b230:	4619      	mov	r1, r3
   1b232:	4620      	mov	r0, r4
   1b234:	f7ff fd40 	bl	1acb8 <img_mgmt_read_info>
   1b238:	b158      	cbz	r0, 1b252 <img_mgmt_state_set_pending+0x4a>
        hashp = NULL;
   1b23a:	2100      	movs	r1, #0
    } else {
        hashp = hash;
    }

    if (permanent) {
   1b23c:	b15d      	cbz	r5, 1b256 <img_mgmt_state_set_pending+0x4e>
        (void) img_mgmt_impl_log_confirm(rc, hashp);
   1b23e:	4630      	mov	r0, r6
   1b240:	f000 fbac 	bl	1b99c <img_mgmt_impl_log_confirm>
    } else {
        (void) img_mgmt_impl_log_pending(rc, hashp);
    }

    return rc;
}
   1b244:	4630      	mov	r0, r6
   1b246:	b008      	add	sp, #32
   1b248:	bd70      	pop	{r4, r5, r6, pc}
        rc = MGMT_ERR_EBADSTATE;
   1b24a:	2606      	movs	r6, #6
   1b24c:	e7ee      	b.n	1b22c <img_mgmt_state_set_pending+0x24>
        rc = MGMT_ERR_EUNKNOWN;
   1b24e:	2601      	movs	r6, #1
   1b250:	e7ec      	b.n	1b22c <img_mgmt_state_set_pending+0x24>
        hashp = hash;
   1b252:	4669      	mov	r1, sp
   1b254:	e7f2      	b.n	1b23c <img_mgmt_state_set_pending+0x34>
        (void) img_mgmt_impl_log_pending(rc, hashp);
   1b256:	4630      	mov	r0, r6
   1b258:	f000 fb96 	bl	1b988 <img_mgmt_impl_log_pending>
    return rc;
   1b25c:	e7f2      	b.n	1b244 <img_mgmt_state_set_pending+0x3c>

0001b25e <img_mgmt_state_confirm>:
 * Confirms the current image state.  Prevents a fallback from occurring on the
 * next reboot if the active image is currently being tested.
 */
int
img_mgmt_state_confirm(void)
{
   1b25e:	b510      	push	{r4, lr}
    int rc;

    /* Confirm disallowed if a test is pending. */
    if (img_mgmt_state_any_pending()) {
   1b260:	f7ff ffb0 	bl	1b1c4 <img_mgmt_state_any_pending>
   1b264:	b128      	cbz	r0, 1b272 <img_mgmt_state_confirm+0x14>
        rc = MGMT_ERR_EBADSTATE;
   1b266:	2406      	movs	r4, #6
        rc = MGMT_ERR_EUNKNOWN;
    }

     img_mgmt_dfu_confirmed();
err:
    return img_mgmt_impl_log_confirm(rc, NULL);
   1b268:	2100      	movs	r1, #0
   1b26a:	4620      	mov	r0, r4
   1b26c:	f000 fb96 	bl	1b99c <img_mgmt_impl_log_confirm>
}
   1b270:	bd10      	pop	{r4, pc}
    rc = img_mgmt_impl_write_confirmed();
   1b272:	f000 fac7 	bl	1b804 <img_mgmt_impl_write_confirmed>
    if (rc != 0) {
   1b276:	4604      	mov	r4, r0
   1b278:	b100      	cbz	r0, 1b27c <img_mgmt_state_confirm+0x1e>
        rc = MGMT_ERR_EUNKNOWN;
   1b27a:	2401      	movs	r4, #1
     img_mgmt_dfu_confirmed();
   1b27c:	f7ff ff4e 	bl	1b11c <img_mgmt_dfu_confirmed>
   1b280:	e7f2      	b.n	1b268 <img_mgmt_state_confirm+0xa>
	...

0001b284 <img_mgmt_state_read>:
/**
 * Command handler: image state read
 */
int
img_mgmt_state_read(struct mgmt_ctxt *ctxt)
{
   1b284:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b286:	b09b      	sub	sp, #108	; 0x6c
   1b288:	4607      	mov	r7, r0
   1b28a:	2206      	movs	r2, #6
   1b28c:	495b      	ldr	r1, [pc, #364]	; (1b3fc <img_mgmt_state_read+0x178>)
   1b28e:	f00d fe83 	bl	28f98 <cbor_encode_text_string>
   1b292:	4604      	mov	r4, r0
    int i;

    err = 0;
    err |= cbor_encode_text_stringz(&ctxt->encoder, "images");

    err |= cbor_encoder_create_array(&ctxt->encoder, &images,
   1b294:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b298:	a905      	add	r1, sp, #20
   1b29a:	4638      	mov	r0, r7
   1b29c:	f00d fe83 	bl	28fa6 <cbor_encoder_create_array>
   1b2a0:	4304      	orrs	r4, r0
                                       CborIndefiniteLength);

    for (i = 0; i < 2 * IMG_MGMT_UPDATABLE_IMAGE_NUMBER; i++) {
   1b2a2:	2500      	movs	r5, #0
   1b2a4:	e000      	b.n	1b2a8 <img_mgmt_state_read+0x24>
   1b2a6:	3501      	adds	r5, #1
   1b2a8:	2d01      	cmp	r5, #1
   1b2aa:	f300 808e 	bgt.w	1b3ca <img_mgmt_state_read+0x146>
        rc = img_mgmt_read_info(i, &ver, hash, &flags);
   1b2ae:	466b      	mov	r3, sp
   1b2b0:	aa0b      	add	r2, sp, #44	; 0x2c
   1b2b2:	a909      	add	r1, sp, #36	; 0x24
   1b2b4:	4628      	mov	r0, r5
   1b2b6:	f7ff fcff 	bl	1acb8 <img_mgmt_read_info>
        if (rc != 0) {
   1b2ba:	2800      	cmp	r0, #0
   1b2bc:	d1f3      	bne.n	1b2a6 <img_mgmt_state_read+0x22>
            continue;
        }

        state_flags = img_mgmt_state_flags(i);
   1b2be:	4628      	mov	r0, r5
   1b2c0:	f7ff ff4a 	bl	1b158 <img_mgmt_state_flags>
   1b2c4:	4606      	mov	r6, r0

        err |= cbor_encoder_create_map(&images, &image,
   1b2c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b2ca:	a901      	add	r1, sp, #4
   1b2cc:	a805      	add	r0, sp, #20
   1b2ce:	f00d fe6f 	bl	28fb0 <cbor_encoder_create_map>
   1b2d2:	4304      	orrs	r4, r0
   1b2d4:	2204      	movs	r2, #4
   1b2d6:	494a      	ldr	r1, [pc, #296]	; (1b400 <img_mgmt_state_read+0x17c>)
   1b2d8:	eb0d 0002 	add.w	r0, sp, r2
   1b2dc:	f00d fe5c 	bl	28f98 <cbor_encode_text_string>

#if IMG_MGMT_UPDATABLE_IMAGE_NUMBER > 1
        err |= cbor_encode_text_stringz(&image, "image");
        err |= cbor_encode_int(&image, i >> 1);
#endif
        err |= cbor_encode_text_stringz(&image, "slot");
   1b2e0:	4304      	orrs	r4, r0
        err |= cbor_encode_int(&image, i % 2);
   1b2e2:	2d00      	cmp	r5, #0
   1b2e4:	f005 0201 	and.w	r2, r5, #1
   1b2e8:	bfb8      	it	lt
   1b2ea:	4252      	neglt	r2, r2
   1b2ec:	17d3      	asrs	r3, r2, #31
   1b2ee:	a801      	add	r0, sp, #4
   1b2f0:	f00d fddd 	bl	28eae <cbor_encode_int>
   1b2f4:	4304      	orrs	r4, r0
   1b2f6:	2207      	movs	r2, #7
   1b2f8:	4942      	ldr	r1, [pc, #264]	; (1b404 <img_mgmt_state_read+0x180>)
   1b2fa:	a801      	add	r0, sp, #4
   1b2fc:	f00d fe4c 	bl	28f98 <cbor_encode_text_string>

        err |= cbor_encode_text_stringz(&image, "version");
   1b300:	4304      	orrs	r4, r0
        img_mgmt_ver_str(&ver, vers_str);
   1b302:	a913      	add	r1, sp, #76	; 0x4c
   1b304:	a809      	add	r0, sp, #36	; 0x24
   1b306:	f000 f8df 	bl	1b4c8 <img_mgmt_ver_str>
   1b30a:	a813      	add	r0, sp, #76	; 0x4c
   1b30c:	f7fb fc2f 	bl	16b6e <strlen>
   1b310:	4602      	mov	r2, r0
   1b312:	a913      	add	r1, sp, #76	; 0x4c
   1b314:	a801      	add	r0, sp, #4
   1b316:	f00d fe3f 	bl	28f98 <cbor_encode_text_string>
        err |= cbor_encode_text_stringz(&image, vers_str);
   1b31a:	4304      	orrs	r4, r0
   1b31c:	2204      	movs	r2, #4
   1b31e:	493a      	ldr	r1, [pc, #232]	; (1b408 <img_mgmt_state_read+0x184>)
   1b320:	eb0d 0002 	add.w	r0, sp, r2
   1b324:	f00d fe38 	bl	28f98 <cbor_encode_text_string>

        err |= cbor_encode_text_stringz(&image, "hash");
   1b328:	4304      	orrs	r4, r0
        err |= cbor_encode_byte_string(&image, hash, IMAGE_HASH_LEN);
   1b32a:	2220      	movs	r2, #32
   1b32c:	a90b      	add	r1, sp, #44	; 0x2c
   1b32e:	a801      	add	r0, sp, #4
   1b330:	f00d fe2b 	bl	28f8a <cbor_encode_byte_string>
   1b334:	4304      	orrs	r4, r0
   1b336:	2208      	movs	r2, #8
   1b338:	4934      	ldr	r1, [pc, #208]	; (1b40c <img_mgmt_state_read+0x188>)
   1b33a:	a801      	add	r0, sp, #4
   1b33c:	f00d fe2c 	bl	28f98 <cbor_encode_text_string>

        if (!IMG_MGMT_FRUGAL_LIST || !(flags & IMAGE_F_NON_BOOTABLE)) {
            err |= cbor_encode_text_stringz(&image, "bootable");
   1b340:	4304      	orrs	r4, r0
            err |= cbor_encode_boolean(&image, !(flags & IMAGE_F_NON_BOOTABLE));
   1b342:	9b00      	ldr	r3, [sp, #0]
   1b344:	f013 0f10 	tst.w	r3, #16
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1b348:	bf14      	ite	ne
   1b34a:	2114      	movne	r1, #20
   1b34c:	2115      	moveq	r1, #21
   1b34e:	a801      	add	r0, sp, #4
   1b350:	f00d fdec 	bl	28f2c <cbor_encode_simple_value>
   1b354:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1b356:	2207      	movs	r2, #7
   1b358:	492d      	ldr	r1, [pc, #180]	; (1b410 <img_mgmt_state_read+0x18c>)
   1b35a:	a801      	add	r0, sp, #4
   1b35c:	f00d fe1c 	bl	28f98 <cbor_encode_text_string>
        }

        if (!IMG_MGMT_FRUGAL_LIST || (state_flags & IMG_MGMT_STATE_F_PENDING)) {
            err |= cbor_encode_text_stringz(&image, "pending");
   1b360:	4304      	orrs	r4, r0
            err |= cbor_encode_boolean(&image,
   1b362:	f006 0101 	and.w	r1, r6, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1b366:	3114      	adds	r1, #20
   1b368:	a801      	add	r0, sp, #4
   1b36a:	f00d fddf 	bl	28f2c <cbor_encode_simple_value>
   1b36e:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1b370:	2209      	movs	r2, #9
   1b372:	4928      	ldr	r1, [pc, #160]	; (1b414 <img_mgmt_state_read+0x190>)
   1b374:	a801      	add	r0, sp, #4
   1b376:	f00d fe0f 	bl	28f98 <cbor_encode_text_string>
                                    state_flags & IMG_MGMT_STATE_F_PENDING);
        }

        if (!IMG_MGMT_FRUGAL_LIST ||
            (state_flags & IMG_MGMT_STATE_F_CONFIRMED)) {
            err |= cbor_encode_text_stringz(&image, "confirmed");
   1b37a:	4304      	orrs	r4, r0
            err |= cbor_encode_boolean(&image,
   1b37c:	f3c6 0140 	ubfx	r1, r6, #1, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1b380:	3114      	adds	r1, #20
   1b382:	a801      	add	r0, sp, #4
   1b384:	f00d fdd2 	bl	28f2c <cbor_encode_simple_value>
   1b388:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1b38a:	2206      	movs	r2, #6
   1b38c:	4922      	ldr	r1, [pc, #136]	; (1b418 <img_mgmt_state_read+0x194>)
   1b38e:	a801      	add	r0, sp, #4
   1b390:	f00d fe02 	bl	28f98 <cbor_encode_text_string>
                                    state_flags & IMG_MGMT_STATE_F_CONFIRMED);
        }

        if (!IMG_MGMT_FRUGAL_LIST || (state_flags & IMG_MGMT_STATE_F_ACTIVE)) {
            err |= cbor_encode_text_stringz(&image, "active");
   1b394:	4304      	orrs	r4, r0
            err |= cbor_encode_boolean(&image,
   1b396:	f3c6 0180 	ubfx	r1, r6, #2, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1b39a:	3114      	adds	r1, #20
   1b39c:	a801      	add	r0, sp, #4
   1b39e:	f00d fdc5 	bl	28f2c <cbor_encode_simple_value>
   1b3a2:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1b3a4:	2209      	movs	r2, #9
   1b3a6:	491d      	ldr	r1, [pc, #116]	; (1b41c <img_mgmt_state_read+0x198>)
   1b3a8:	a801      	add	r0, sp, #4
   1b3aa:	f00d fdf5 	bl	28f98 <cbor_encode_text_string>
                                    state_flags & IMG_MGMT_STATE_F_ACTIVE);
        }

        if (!IMG_MGMT_FRUGAL_LIST ||
            (state_flags & IMG_MGMT_STATE_F_PERMANENT)) {
            err |= cbor_encode_text_stringz(&image, "permanent");
   1b3ae:	4304      	orrs	r4, r0
            err |= cbor_encode_boolean(&image,
   1b3b0:	f3c6 01c0 	ubfx	r1, r6, #3, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1b3b4:	3114      	adds	r1, #20
   1b3b6:	a801      	add	r0, sp, #4
   1b3b8:	f00d fdb8 	bl	28f2c <cbor_encode_simple_value>
   1b3bc:	4304      	orrs	r4, r0
                                    state_flags & IMG_MGMT_STATE_F_PERMANENT);
        }

        err |= cbor_encoder_close_container(&images, &image);
   1b3be:	a901      	add	r1, sp, #4
   1b3c0:	a805      	add	r0, sp, #20
   1b3c2:	f00d fe0a 	bl	28fda <cbor_encoder_close_container>
   1b3c6:	4304      	orrs	r4, r0
   1b3c8:	e76d      	b.n	1b2a6 <img_mgmt_state_read+0x22>
    }

    err |= cbor_encoder_close_container(&ctxt->encoder, &images);
   1b3ca:	a905      	add	r1, sp, #20
   1b3cc:	4638      	mov	r0, r7
   1b3ce:	f00d fe04 	bl	28fda <cbor_encoder_close_container>
   1b3d2:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1b3d4:	220b      	movs	r2, #11
   1b3d6:	4912      	ldr	r1, [pc, #72]	; (1b420 <img_mgmt_state_read+0x19c>)
   1b3d8:	4638      	mov	r0, r7
   1b3da:	f00d fddd 	bl	28f98 <cbor_encode_text_string>

    /* splitStatus is always 0 so in frugal list it is not present at all */
    if (!IMG_MGMT_FRUGAL_LIST) {
        err |= cbor_encode_text_stringz(&ctxt->encoder, "splitStatus");
   1b3de:	4304      	orrs	r4, r0
        err |= cbor_encode_int(&ctxt->encoder, 0);
   1b3e0:	2200      	movs	r2, #0
   1b3e2:	2300      	movs	r3, #0
   1b3e4:	4638      	mov	r0, r7
   1b3e6:	f00d fd62 	bl	28eae <cbor_encode_int>
    }

    if (err != 0) {
   1b3ea:	ea54 0300 	orrs.w	r3, r4, r0
   1b3ee:	d102      	bne.n	1b3f6 <img_mgmt_state_read+0x172>
        return MGMT_ERR_ENOMEM;
    }

    return 0;
   1b3f0:	2000      	movs	r0, #0
}
   1b3f2:	b01b      	add	sp, #108	; 0x6c
   1b3f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1b3f6:	2002      	movs	r0, #2
   1b3f8:	e7fb      	b.n	1b3f2 <img_mgmt_state_read+0x16e>
   1b3fa:	bf00      	nop
   1b3fc:	000309fc 	.word	0x000309fc
   1b400:	00030a04 	.word	0x00030a04
   1b404:	00030a0c 	.word	0x00030a0c
   1b408:	00030940 	.word	0x00030940
   1b40c:	0003096c 	.word	0x0003096c
   1b410:	00030984 	.word	0x00030984
   1b414:	00030978 	.word	0x00030978
   1b418:	00030960 	.word	0x00030960
   1b41c:	00030a14 	.word	0x00030a14
   1b420:	00030a20 	.word	0x00030a20

0001b424 <img_mgmt_state_write>:
/**
 * Command handler: image state write
 */
int
img_mgmt_state_write(struct mgmt_ctxt *ctxt)
{
   1b424:	b510      	push	{r4, lr}
   1b426:	b0b0      	sub	sp, #192	; 0xc0
   1b428:	4604      	mov	r4, r0
    size_t hash_len;
    bool confirm;
    int slot;
    int rc;

    const struct cbor_attr_t write_attr[] = {
   1b42a:	228c      	movs	r2, #140	; 0x8c
   1b42c:	2100      	movs	r1, #0
   1b42e:	a801      	add	r0, sp, #4
   1b430:	f7fb fb75 	bl	16b1e <memset>
   1b434:	4b21      	ldr	r3, [pc, #132]	; (1b4bc <img_mgmt_state_write+0x98>)
   1b436:	9300      	str	r3, [sp, #0]
   1b438:	2303      	movs	r3, #3
   1b43a:	f88d 3004 	strb.w	r3, [sp, #4]
   1b43e:	ab27      	add	r3, sp, #156	; 0x9c
   1b440:	9302      	str	r3, [sp, #8]
   1b442:	ab26      	add	r3, sp, #152	; 0x98
   1b444:	9303      	str	r3, [sp, #12]
   1b446:	2321      	movs	r3, #33	; 0x21
   1b448:	930a      	str	r3, [sp, #40]	; 0x28
   1b44a:	4b1d      	ldr	r3, [pc, #116]	; (1b4c0 <img_mgmt_state_write+0x9c>)
   1b44c:	930c      	str	r3, [sp, #48]	; 0x30
   1b44e:	2305      	movs	r3, #5
   1b450:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   1b454:	f10d 0397 	add.w	r3, sp, #151	; 0x97
   1b458:	930e      	str	r3, [sp, #56]	; 0x38
            .dflt.boolean = false,
        },
        [2] = { 0 },
    };

    hash_len = 0;
   1b45a:	2300      	movs	r3, #0
   1b45c:	9326      	str	r3, [sp, #152]	; 0x98
    rc = cbor_read_object(&ctxt->it, write_attr);
   1b45e:	4669      	mov	r1, sp
   1b460:	f104 001c 	add.w	r0, r4, #28
   1b464:	f7ff fbdf 	bl	1ac26 <cbor_read_object>
    if (rc != 0) {
   1b468:	bb18      	cbnz	r0, 1b4b2 <img_mgmt_state_write+0x8e>
        return MGMT_ERR_EINVAL;
    }

    /* Determine which slot is being operated on. */
    if (hash_len == 0) {
   1b46a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1b46c:	b993      	cbnz	r3, 1b494 <img_mgmt_state_write+0x70>
        if (confirm) {
   1b46e:	f89d 3097 	ldrb.w	r3, [sp, #151]	; 0x97
   1b472:	b303      	cbz	r3, 1b4b6 <img_mgmt_state_write+0x92>
            slot = IMG_MGMT_BOOT_CURR_SLOT;
   1b474:	4b13      	ldr	r3, [pc, #76]	; (1b4c4 <img_mgmt_state_write+0xa0>)
   1b476:	6818      	ldr	r0, [r3, #0]
        if (slot < 0) {
            return MGMT_ERR_EINVAL;
        }
    }

    if (slot == IMG_MGMT_BOOT_CURR_SLOT && confirm) {
   1b478:	4b12      	ldr	r3, [pc, #72]	; (1b4c4 <img_mgmt_state_write+0xa0>)
   1b47a:	681b      	ldr	r3, [r3, #0]
   1b47c:	4283      	cmp	r3, r0
   1b47e:	d102      	bne.n	1b486 <img_mgmt_state_write+0x62>
   1b480:	f89d 3097 	ldrb.w	r3, [sp, #151]	; 0x97
   1b484:	b973      	cbnz	r3, 1b4a4 <img_mgmt_state_write+0x80>
        /* Confirm current setup. */
        rc = img_mgmt_state_confirm();
    } else {
        rc = img_mgmt_state_set_pending(slot, confirm);
   1b486:	f89d 1097 	ldrb.w	r1, [sp, #151]	; 0x97
   1b48a:	f7ff febd 	bl	1b208 <img_mgmt_state_set_pending>
    }
    if (rc != 0) {
   1b48e:	b160      	cbz	r0, 1b4aa <img_mgmt_state_write+0x86>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1b490:	b030      	add	sp, #192	; 0xc0
   1b492:	bd10      	pop	{r4, pc}
        slot = img_mgmt_find_by_hash(hash, NULL);
   1b494:	2100      	movs	r1, #0
   1b496:	a827      	add	r0, sp, #156	; 0x9c
   1b498:	f7ff fcc7 	bl	1ae2a <img_mgmt_find_by_hash>
        if (slot < 0) {
   1b49c:	2800      	cmp	r0, #0
   1b49e:	daeb      	bge.n	1b478 <img_mgmt_state_write+0x54>
            return MGMT_ERR_EINVAL;
   1b4a0:	2003      	movs	r0, #3
   1b4a2:	e7f5      	b.n	1b490 <img_mgmt_state_write+0x6c>
        rc = img_mgmt_state_confirm();
   1b4a4:	f7ff fedb 	bl	1b25e <img_mgmt_state_confirm>
   1b4a8:	e7f1      	b.n	1b48e <img_mgmt_state_write+0x6a>
    rc = img_mgmt_state_read(ctxt);
   1b4aa:	4620      	mov	r0, r4
   1b4ac:	f7ff feea 	bl	1b284 <img_mgmt_state_read>
    if (rc != 0) {
   1b4b0:	e7ee      	b.n	1b490 <img_mgmt_state_write+0x6c>
        return MGMT_ERR_EINVAL;
   1b4b2:	2003      	movs	r0, #3
   1b4b4:	e7ec      	b.n	1b490 <img_mgmt_state_write+0x6c>
            return MGMT_ERR_EINVAL;
   1b4b6:	2003      	movs	r0, #3
   1b4b8:	e7ea      	b.n	1b490 <img_mgmt_state_write+0x6c>
   1b4ba:	bf00      	nop
   1b4bc:	00030940 	.word	0x00030940
   1b4c0:	00030a2c 	.word	0x00030a2c
   1b4c4:	10004fb0 	.word	0x10004fb0

0001b4c8 <img_mgmt_ver_str>:
#include "img_mgmt/image.h"
#include "img_mgmt/img_mgmt.h"

int
img_mgmt_ver_str(const struct image_version *ver, char *dst)
{
   1b4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b4cc:	4605      	mov	r5, r0
   1b4ce:	460c      	mov	r4, r1
    int off;

    off = 0;

    off += ull_to_s(ver->iv_major, INT_MAX, dst + off);
   1b4d0:	460b      	mov	r3, r1
   1b4d2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1b4d6:	7828      	ldrb	r0, [r5, #0]
   1b4d8:	2100      	movs	r1, #0
   1b4da:	f000 ffd3 	bl	1c484 <ull_to_s>

    dst[off++] = '.';
   1b4de:	1c46      	adds	r6, r0, #1
   1b4e0:	f04f 082e 	mov.w	r8, #46	; 0x2e
   1b4e4:	f804 8000 	strb.w	r8, [r4, r0]
    off += ull_to_s(ver->iv_minor, INT_MAX, dst + off);
   1b4e8:	19a3      	adds	r3, r4, r6
   1b4ea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1b4ee:	7868      	ldrb	r0, [r5, #1]
   1b4f0:	2100      	movs	r1, #0
   1b4f2:	f000 ffc7 	bl	1c484 <ull_to_s>
   1b4f6:	4406      	add	r6, r0

    dst[off++] = '.';
   1b4f8:	1c77      	adds	r7, r6, #1
   1b4fa:	f804 8006 	strb.w	r8, [r4, r6]
    off += ull_to_s(ver->iv_revision, INT_MAX, dst + off);
   1b4fe:	19e3      	adds	r3, r4, r7
   1b500:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1b504:	8868      	ldrh	r0, [r5, #2]
   1b506:	2100      	movs	r1, #0
   1b508:	f000 ffbc 	bl	1c484 <ull_to_s>
   1b50c:	4407      	add	r7, r0

    if (ver->iv_build_num != 0) {
   1b50e:	686b      	ldr	r3, [r5, #4]
   1b510:	b913      	cbnz	r3, 1b518 <img_mgmt_ver_str+0x50>
        dst[off++] = '.';
        off += ull_to_s(ver->iv_build_num, INT_MAX, dst + off);
    }

    return 0;
}
   1b512:	2000      	movs	r0, #0
   1b514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        dst[off++] = '.';
   1b518:	1c7b      	adds	r3, r7, #1
   1b51a:	f804 8007 	strb.w	r8, [r4, r7]
        off += ull_to_s(ver->iv_build_num, INT_MAX, dst + off);
   1b51e:	4423      	add	r3, r4
   1b520:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1b524:	6868      	ldr	r0, [r5, #4]
   1b526:	2100      	movs	r1, #0
   1b528:	f000 ffac 	bl	1c484 <ull_to_s>
   1b52c:	e7f1      	b.n	1b512 <img_mgmt_ver_str+0x4a>

0001b52e <img_mgmt_vercmp>:
 * @return                       1 if a > b
 */
static int
img_mgmt_vercmp(const struct image_version *a, const struct image_version *b)
{
    if (a->iv_major < b->iv_major) {
   1b52e:	7802      	ldrb	r2, [r0, #0]
   1b530:	780b      	ldrb	r3, [r1, #0]
   1b532:	429a      	cmp	r2, r3
   1b534:	d30c      	bcc.n	1b550 <img_mgmt_vercmp+0x22>
        return -1;
    } else if (a->iv_major > b->iv_major) {
   1b536:	d80e      	bhi.n	1b556 <img_mgmt_vercmp+0x28>
        return 1;
    }

    if (a->iv_minor < b->iv_minor) {
   1b538:	7842      	ldrb	r2, [r0, #1]
   1b53a:	784b      	ldrb	r3, [r1, #1]
   1b53c:	429a      	cmp	r2, r3
   1b53e:	d30c      	bcc.n	1b55a <img_mgmt_vercmp+0x2c>
        return -1;
    } else if (a->iv_minor > b->iv_minor) {
   1b540:	d80e      	bhi.n	1b560 <img_mgmt_vercmp+0x32>
        return 1;
    }

    if (a->iv_revision < b->iv_revision) {
   1b542:	8842      	ldrh	r2, [r0, #2]
   1b544:	884b      	ldrh	r3, [r1, #2]
   1b546:	429a      	cmp	r2, r3
   1b548:	d30c      	bcc.n	1b564 <img_mgmt_vercmp+0x36>
        return -1;
    } else if (a->iv_revision > b->iv_revision) {
   1b54a:	d80e      	bhi.n	1b56a <img_mgmt_vercmp+0x3c>
        return 1;
    }

    /* Note: For semver compatibility, don't compare the 32-bit build num. */

    return 0;
   1b54c:	2000      	movs	r0, #0
   1b54e:	4770      	bx	lr
        return -1;
   1b550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b554:	4770      	bx	lr
        return 1;
   1b556:	2001      	movs	r0, #1
   1b558:	4770      	bx	lr
        return -1;
   1b55a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b55e:	4770      	bx	lr
        return 1;
   1b560:	2001      	movs	r0, #1
   1b562:	4770      	bx	lr
        return -1;
   1b564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b568:	4770      	bx	lr
        return 1;
   1b56a:	2001      	movs	r0, #1
}
   1b56c:	4770      	bx	lr

0001b56e <img_mgmt_find_best_area_id>:
{
   1b56e:	b530      	push	{r4, r5, lr}
   1b570:	b083      	sub	sp, #12
    for (i = 0; i < 2; i++) {
   1b572:	2400      	movs	r4, #0
    int best = -1;
   1b574:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; i < 2; i++) {
   1b578:	e000      	b.n	1b57c <img_mgmt_find_best_area_id+0xe>
   1b57a:	3401      	adds	r4, #1
   1b57c:	2c01      	cmp	r4, #1
   1b57e:	dc10      	bgt.n	1b5a2 <img_mgmt_find_best_area_id+0x34>
        rc = img_mgmt_read_info(i, &ver, NULL, NULL);
   1b580:	2300      	movs	r3, #0
   1b582:	461a      	mov	r2, r3
   1b584:	4669      	mov	r1, sp
   1b586:	4620      	mov	r0, r4
   1b588:	f7ff fb96 	bl	1acb8 <img_mgmt_read_info>
        if (rc < 0) {
   1b58c:	2800      	cmp	r0, #0
   1b58e:	dbf4      	blt.n	1b57a <img_mgmt_find_best_area_id+0xc>
        if (rc == 0) {
   1b590:	b930      	cbnz	r0, 1b5a0 <img_mgmt_find_best_area_id+0x32>
            if (img_mgmt_slot_in_use(i)) {
   1b592:	4620      	mov	r0, r4
   1b594:	f7ff fe29 	bl	1b1ea <img_mgmt_slot_in_use>
   1b598:	2800      	cmp	r0, #0
   1b59a:	d1ee      	bne.n	1b57a <img_mgmt_find_best_area_id+0xc>
                best = i;
   1b59c:	4625      	mov	r5, r4
   1b59e:	e7ec      	b.n	1b57a <img_mgmt_find_best_area_id+0xc>
        best = i;
   1b5a0:	4625      	mov	r5, r4
    if (best >= 0) {
   1b5a2:	2d00      	cmp	r5, #0
   1b5a4:	da02      	bge.n	1b5ac <img_mgmt_find_best_area_id+0x3e>
}
   1b5a6:	4628      	mov	r0, r5
   1b5a8:	b003      	add	sp, #12
   1b5aa:	bd30      	pop	{r4, r5, pc}
        best = flash_area_id_from_image_slot(best);
   1b5ac:	4628      	mov	r0, r5
   1b5ae:	f7fd fb1a 	bl	18be6 <flash_area_id_from_image_slot>
   1b5b2:	4605      	mov	r5, r0
    return best;
   1b5b4:	e7f7      	b.n	1b5a6 <img_mgmt_find_best_area_id+0x38>
	...

0001b5b8 <img_mgmt_impl_upload_inspect>:
 */
int
img_mgmt_impl_upload_inspect(const struct img_mgmt_upload_req *req,
                             struct img_mgmt_upload_action *action,
                             const char **errstr)
{
   1b5b8:	b570      	push	{r4, r5, r6, lr}
   1b5ba:	b084      	sub	sp, #16
   1b5bc:	4605      	mov	r5, r0
   1b5be:	460c      	mov	r4, r1
   1b5c0:	4616      	mov	r6, r2
    struct image_version cur_ver;
    uint8_t rem_bytes;
    bool empty;
    int rc;

    memset(action, 0, sizeof *action);
   1b5c2:	2300      	movs	r3, #0
   1b5c4:	600b      	str	r3, [r1, #0]
   1b5c6:	604b      	str	r3, [r1, #4]
   1b5c8:	608b      	str	r3, [r1, #8]
   1b5ca:	60cb      	str	r3, [r1, #12]
   1b5cc:	610b      	str	r3, [r1, #16]
   1b5ce:	614b      	str	r3, [r1, #20]

    if (req->off == -1) {
   1b5d0:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   1b5d4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1b5d8:	bf08      	it	eq
   1b5da:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   1b5de:	d03e      	beq.n	1b65e <img_mgmt_impl_upload_inspect+0xa6>
        /* Request did not include an `off` field. */
        *errstr = img_mgmt_err_str_hdr_malformed;
        return MGMT_ERR_EINVAL;
    }

    if (req->off == 0) {
   1b5e0:	ea50 0301 	orrs.w	r3, r0, r1
   1b5e4:	d167      	bne.n	1b6b6 <img_mgmt_impl_upload_inspect+0xfe>
        /* First upload chunk. */
        if (req->data_len < sizeof(struct image_header)) {
   1b5e6:	69ab      	ldr	r3, [r5, #24]
   1b5e8:	2b1f      	cmp	r3, #31
   1b5ea:	d93b      	bls.n	1b664 <img_mgmt_impl_upload_inspect+0xac>
             */
            *errstr = img_mgmt_err_str_hdr_malformed;
            return MGMT_ERR_EINVAL;
        }

        if (req->size == -1) {
   1b5ec:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   1b5f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1b5f4:	bf08      	it	eq
   1b5f6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1b5fa:	d037      	beq.n	1b66c <img_mgmt_impl_upload_inspect+0xb4>
            /* Request did not include a `len` field. */
            *errstr = img_mgmt_err_str_hdr_malformed;
            return MGMT_ERR_EINVAL;
        }
        action->size = req->size;
   1b5fc:	e9c4 2300 	strd	r2, r3, [r4]

        hdr = (struct image_header *)req->img_data;
        if (hdr->ih_magic != IMAGE_MAGIC) {
   1b600:	6a2a      	ldr	r2, [r5, #32]
   1b602:	4b4e      	ldr	r3, [pc, #312]	; (1b73c <img_mgmt_impl_upload_inspect+0x184>)
   1b604:	429a      	cmp	r2, r3
   1b606:	d135      	bne.n	1b674 <img_mgmt_impl_upload_inspect+0xbc>
            *errstr = img_mgmt_err_str_magic_mismatch;
            return MGMT_ERR_EINVAL;
        }

        if (req->data_sha_len > IMG_MGMT_DATA_SHA_LEN) {
   1b608:	69ea      	ldr	r2, [r5, #28]
   1b60a:	2a20      	cmp	r2, #32
   1b60c:	f200 808d 	bhi.w	1b72a <img_mgmt_impl_upload_inspect+0x172>
         * If request includes proper data hash we can check whether there is
         * upload in progress (interrupted due to e.g. link disconnection) with
         * the same data hash so we can just resume it by simply including
         * current upload offset in response.
         */
        if ((req->data_sha_len > 0) && (g_img_mgmt_state.area_id != -1)) {
   1b610:	b142      	cbz	r2, 1b624 <img_mgmt_impl_upload_inspect+0x6c>
   1b612:	4b4b      	ldr	r3, [pc, #300]	; (1b740 <img_mgmt_impl_upload_inspect+0x188>)
   1b614:	681b      	ldr	r3, [r3, #0]
   1b616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1b61a:	d003      	beq.n	1b624 <img_mgmt_impl_upload_inspect+0x6c>
            if ((g_img_mgmt_state.data_sha_len == req->data_sha_len) &&
   1b61c:	4b48      	ldr	r3, [pc, #288]	; (1b740 <img_mgmt_impl_upload_inspect+0x188>)
   1b61e:	7b1b      	ldrb	r3, [r3, #12]
   1b620:	429a      	cmp	r2, r3
   1b622:	d02b      	beq.n	1b67c <img_mgmt_impl_upload_inspect+0xc4>
                                                        req->data_sha_len)) {
                return 0;
            }
        }

        action->area_id = img_mgmt_find_best_area_id();
   1b624:	f7ff ffa3 	bl	1b56e <img_mgmt_find_best_area_id>
   1b628:	60e0      	str	r0, [r4, #12]
        if (action->area_id < 0) {
   1b62a:	2800      	cmp	r0, #0
   1b62c:	db2e      	blt.n	1b68c <img_mgmt_impl_upload_inspect+0xd4>
            /* No slot where to upload! */
            *errstr = img_mgmt_err_str_no_slot;
            return MGMT_ERR_ENOMEM;
        }

        if (req->upgrade) {
   1b62e:	f895 3240 	ldrb.w	r3, [r5, #576]	; 0x240
   1b632:	b15b      	cbz	r3, 1b64c <img_mgmt_impl_upload_inspect+0x94>
            /* User specified upgrade-only.  Make sure new image version is
             * greater than that of the currently running image.
             */
            rc = img_mgmt_my_version(&cur_ver);
   1b634:	a801      	add	r0, sp, #4
   1b636:	f7ff fd7b 	bl	1b130 <img_mgmt_my_version>
            if (rc != 0) {
   1b63a:	2800      	cmp	r0, #0
   1b63c:	d177      	bne.n	1b72e <img_mgmt_impl_upload_inspect+0x176>
                return MGMT_ERR_EUNKNOWN;
            }

            if (img_mgmt_vercmp(&cur_ver, &hdr->ih_ver) >= 0) {
   1b63e:	f105 0134 	add.w	r1, r5, #52	; 0x34
   1b642:	a801      	add	r0, sp, #4
   1b644:	f7ff ff73 	bl	1b52e <img_mgmt_vercmp>
   1b648:	2800      	cmp	r0, #0
   1b64a:	da23      	bge.n	1b694 <img_mgmt_impl_upload_inspect+0xdc>
        }

#if MYNEWT_VAL(IMG_MGMT_LAZY_ERASE)
        (void) empty;
#else
        rc = flash_area_open(action->area_id, &fa);
   1b64c:	a903      	add	r1, sp, #12
   1b64e:	7b20      	ldrb	r0, [r4, #12]
   1b650:	f7fd fa14 	bl	18a7c <flash_area_open>
        if (rc) {
   1b654:	b310      	cbz	r0, 1b69c <img_mgmt_impl_upload_inspect+0xe4>
            *errstr = img_mgmt_err_str_flash_open_failed;
   1b656:	2300      	movs	r3, #0
   1b658:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EUNKNOWN;
   1b65a:	2001      	movs	r0, #1
   1b65c:	e06c      	b.n	1b738 <img_mgmt_impl_upload_inspect+0x180>
        *errstr = img_mgmt_err_str_hdr_malformed;
   1b65e:	6013      	str	r3, [r2, #0]
        return MGMT_ERR_EINVAL;
   1b660:	2003      	movs	r0, #3
   1b662:	e069      	b.n	1b738 <img_mgmt_impl_upload_inspect+0x180>
            *errstr = img_mgmt_err_str_hdr_malformed;
   1b664:	2300      	movs	r3, #0
   1b666:	6013      	str	r3, [r2, #0]
            return MGMT_ERR_EINVAL;
   1b668:	2003      	movs	r0, #3
   1b66a:	e065      	b.n	1b738 <img_mgmt_impl_upload_inspect+0x180>
            *errstr = img_mgmt_err_str_hdr_malformed;
   1b66c:	2300      	movs	r3, #0
   1b66e:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EINVAL;
   1b670:	2003      	movs	r0, #3
   1b672:	e061      	b.n	1b738 <img_mgmt_impl_upload_inspect+0x180>
            *errstr = img_mgmt_err_str_magic_mismatch;
   1b674:	2300      	movs	r3, #0
   1b676:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EINVAL;
   1b678:	2003      	movs	r0, #3
   1b67a:	e05d      	b.n	1b738 <img_mgmt_impl_upload_inspect+0x180>
                            !memcmp(g_img_mgmt_state.data_sha, req->data_sha,
   1b67c:	f505 7108 	add.w	r1, r5, #544	; 0x220
   1b680:	4830      	ldr	r0, [pc, #192]	; (1b744 <img_mgmt_impl_upload_inspect+0x18c>)
   1b682:	f7fb fa03 	bl	16a8c <memcmp>
            if ((g_img_mgmt_state.data_sha_len == req->data_sha_len) &&
   1b686:	2800      	cmp	r0, #0
   1b688:	d1cc      	bne.n	1b624 <img_mgmt_impl_upload_inspect+0x6c>
   1b68a:	e055      	b.n	1b738 <img_mgmt_impl_upload_inspect+0x180>
            *errstr = img_mgmt_err_str_no_slot;
   1b68c:	2300      	movs	r3, #0
   1b68e:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_ENOMEM;
   1b690:	2002      	movs	r0, #2
   1b692:	e051      	b.n	1b738 <img_mgmt_impl_upload_inspect+0x180>
                *errstr = img_mgmt_err_str_downgrade;
   1b694:	2300      	movs	r3, #0
   1b696:	6033      	str	r3, [r6, #0]
                return MGMT_ERR_EBADSTATE;
   1b698:	2006      	movs	r0, #6
   1b69a:	e04d      	b.n	1b738 <img_mgmt_impl_upload_inspect+0x180>
        }

        rc = flash_area_is_empty(fa, &empty);
   1b69c:	f10d 0103 	add.w	r1, sp, #3
   1b6a0:	9803      	ldr	r0, [sp, #12]
   1b6a2:	f7fd fa86 	bl	18bb2 <flash_area_is_empty>
        flash_area_close(fa);
        if (rc) {
   1b6a6:	2800      	cmp	r0, #0
   1b6a8:	d143      	bne.n	1b732 <img_mgmt_impl_upload_inspect+0x17a>
            return MGMT_ERR_EUNKNOWN;
        }

        action->erase = !empty;
   1b6aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1b6ae:	f083 0301 	eor.w	r3, r3, #1
   1b6b2:	7463      	strb	r3, [r4, #17]
   1b6b4:	e00e      	b.n	1b6d4 <img_mgmt_impl_upload_inspect+0x11c>
#endif
    } else {
        /* Continuation of upload. */
        action->area_id = g_img_mgmt_state.area_id;
   1b6b6:	4922      	ldr	r1, [pc, #136]	; (1b740 <img_mgmt_impl_upload_inspect+0x188>)
   1b6b8:	680b      	ldr	r3, [r1, #0]
   1b6ba:	60e3      	str	r3, [r4, #12]
        action->size = g_img_mgmt_state.size;
   1b6bc:	688b      	ldr	r3, [r1, #8]
   1b6be:	6023      	str	r3, [r4, #0]
   1b6c0:	2300      	movs	r3, #0
   1b6c2:	6063      	str	r3, [r4, #4]

        if (req->off != g_img_mgmt_state.off) {
   1b6c4:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1b6c8:	6848      	ldr	r0, [r1, #4]
   1b6ca:	2100      	movs	r1, #0
   1b6cc:	428b      	cmp	r3, r1
   1b6ce:	bf08      	it	eq
   1b6d0:	4282      	cmpeq	r2, r0
   1b6d2:	d130      	bne.n	1b736 <img_mgmt_impl_upload_inspect+0x17e>
            return 0;
        }
    }

    /* Calculate size of flash write. */
    action->write_bytes = req->data_len;
   1b6d4:	69ab      	ldr	r3, [r5, #24]
   1b6d6:	60a3      	str	r3, [r4, #8]
    if (req->off + req->data_len < action->size) {
   1b6d8:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1b6dc:	69a9      	ldr	r1, [r5, #24]
   1b6de:	1852      	adds	r2, r2, r1
   1b6e0:	f143 0300 	adc.w	r3, r3, #0
   1b6e4:	e9d4 0100 	ldrd	r0, r1, [r4]
   1b6e8:	428b      	cmp	r3, r1
   1b6ea:	bf08      	it	eq
   1b6ec:	4282      	cmpeq	r2, r0
   1b6ee:	d303      	bcc.n	1b6f8 <img_mgmt_impl_upload_inspect+0x140>
        if (rem_bytes) {
            action->write_bytes -= rem_bytes;
        }
    }

    action->proceed = true;
   1b6f0:	2301      	movs	r3, #1
   1b6f2:	7423      	strb	r3, [r4, #16]
    return 0;
   1b6f4:	2000      	movs	r0, #0
   1b6f6:	e01f      	b.n	1b738 <img_mgmt_impl_upload_inspect+0x180>
        rc = flash_area_open(action->area_id, &fa);
   1b6f8:	a903      	add	r1, sp, #12
   1b6fa:	7b20      	ldrb	r0, [r4, #12]
   1b6fc:	f7fd f9be 	bl	18a7c <flash_area_open>
        if (rc) {
   1b700:	b118      	cbz	r0, 1b70a <img_mgmt_impl_upload_inspect+0x152>
            *errstr = img_mgmt_err_str_flash_open_failed;
   1b702:	2300      	movs	r3, #0
   1b704:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EUNKNOWN;
   1b706:	2001      	movs	r0, #1
   1b708:	e016      	b.n	1b738 <img_mgmt_impl_upload_inspect+0x180>
        rem_bytes = req->data_len % flash_area_align(fa);
   1b70a:	69ad      	ldr	r5, [r5, #24]
   1b70c:	9803      	ldr	r0, [sp, #12]
   1b70e:	f7fd fa46 	bl	18b9e <flash_area_align>
   1b712:	fbb5 f3f0 	udiv	r3, r5, r0
   1b716:	fb00 5313 	mls	r3, r0, r3, r5
        if (rem_bytes) {
   1b71a:	f013 0fff 	tst.w	r3, #255	; 0xff
   1b71e:	d0e7      	beq.n	1b6f0 <img_mgmt_impl_upload_inspect+0x138>
            action->write_bytes -= rem_bytes;
   1b720:	b2db      	uxtb	r3, r3
   1b722:	68a2      	ldr	r2, [r4, #8]
   1b724:	1ad3      	subs	r3, r2, r3
   1b726:	60a3      	str	r3, [r4, #8]
   1b728:	e7e2      	b.n	1b6f0 <img_mgmt_impl_upload_inspect+0x138>
            return MGMT_ERR_EINVAL;
   1b72a:	2003      	movs	r0, #3
   1b72c:	e004      	b.n	1b738 <img_mgmt_impl_upload_inspect+0x180>
                return MGMT_ERR_EUNKNOWN;
   1b72e:	2001      	movs	r0, #1
   1b730:	e002      	b.n	1b738 <img_mgmt_impl_upload_inspect+0x180>
            return MGMT_ERR_EUNKNOWN;
   1b732:	2001      	movs	r0, #1
   1b734:	e000      	b.n	1b738 <img_mgmt_impl_upload_inspect+0x180>
            return 0;
   1b736:	2000      	movs	r0, #0
}
   1b738:	b004      	add	sp, #16
   1b73a:	bd70      	pop	{r4, r5, r6, pc}
   1b73c:	96f3b83d 	.word	0x96f3b83d
   1b740:	10003408 	.word	0x10003408
   1b744:	10003415 	.word	0x10003415

0001b748 <img_mgmt_impl_erase_slot>:

int
img_mgmt_impl_erase_slot(void)
{
   1b748:	b500      	push	{lr}
   1b74a:	b083      	sub	sp, #12
    const struct flash_area *fa;
    bool empty;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_1, &fa);
   1b74c:	a901      	add	r1, sp, #4
   1b74e:	2002      	movs	r0, #2
   1b750:	f7fd f994 	bl	18a7c <flash_area_open>
    if (rc != 0) {
   1b754:	b118      	cbz	r0, 1b75e <img_mgmt_impl_erase_slot+0x16>
        return MGMT_ERR_EUNKNOWN;
   1b756:	2001      	movs	r0, #1
            return MGMT_ERR_EUNKNOWN;
        }
    }

    return 0;
}
   1b758:	b003      	add	sp, #12
   1b75a:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = flash_area_is_empty(fa, &empty);
   1b75e:	f10d 0103 	add.w	r1, sp, #3
   1b762:	9801      	ldr	r0, [sp, #4]
   1b764:	f7fd fa25 	bl	18bb2 <flash_area_is_empty>
    if (rc != 0) {
   1b768:	b960      	cbnz	r0, 1b784 <img_mgmt_impl_erase_slot+0x3c>
    if (!empty) {
   1b76a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1b76e:	2b00      	cmp	r3, #0
   1b770:	d1f2      	bne.n	1b758 <img_mgmt_impl_erase_slot+0x10>
        rc = flash_area_erase(fa, 0, fa->fa_size);
   1b772:	9801      	ldr	r0, [sp, #4]
   1b774:	6882      	ldr	r2, [r0, #8]
   1b776:	2100      	movs	r1, #0
   1b778:	f7fd f9fe 	bl	18b78 <flash_area_erase>
        if (rc != 0) {
   1b77c:	2800      	cmp	r0, #0
   1b77e:	d0eb      	beq.n	1b758 <img_mgmt_impl_erase_slot+0x10>
            return MGMT_ERR_EUNKNOWN;
   1b780:	2001      	movs	r0, #1
   1b782:	e7e9      	b.n	1b758 <img_mgmt_impl_erase_slot+0x10>
        return MGMT_ERR_EUNKNOWN;
   1b784:	2001      	movs	r0, #1
   1b786:	e7e7      	b.n	1b758 <img_mgmt_impl_erase_slot+0x10>

0001b788 <img_mgmt_impl_write_pending>:

int
img_mgmt_impl_write_pending(int slot, bool permanent)
{
   1b788:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b78a:	b083      	sub	sp, #12
   1b78c:	4604      	mov	r4, r0
   1b78e:	460f      	mov	r7, r1
    uint32_t image_flags;
    uint8_t state_flags;
    int split_app_active;
    int rc;

    state_flags = img_mgmt_state_flags(slot);
   1b790:	f7ff fce2 	bl	1b158 <img_mgmt_state_flags>
   1b794:	4605      	mov	r5, r0
    split_app_active = split_app_active_get();
   1b796:	f7f9 fae5 	bl	14d64 <split_app_active_get>
   1b79a:	4606      	mov	r6, r0

    /* Unconfirmed slots are always runable.  A confirmed slot can only be
     * run if it is a loader in a split image setup.
     */
    if (state_flags & IMG_MGMT_STATE_F_CONFIRMED &&
   1b79c:	f015 0f02 	tst.w	r5, #2
   1b7a0:	d001      	beq.n	1b7a6 <img_mgmt_impl_write_pending+0x1e>
   1b7a2:	bb44      	cbnz	r4, 1b7f6 <img_mgmt_impl_write_pending+0x6e>
        (slot != 0 || !split_app_active)) {
   1b7a4:	b348      	cbz	r0, 1b7fa <img_mgmt_impl_write_pending+0x72>

        return MGMT_ERR_EBADSTATE;
    }

    rc = img_mgmt_read_info(slot, NULL, NULL, &image_flags);
   1b7a6:	ab01      	add	r3, sp, #4
   1b7a8:	2200      	movs	r2, #0
   1b7aa:	4611      	mov	r1, r2
   1b7ac:	4620      	mov	r0, r4
   1b7ae:	f7ff fa83 	bl	1acb8 <img_mgmt_read_info>
    if (rc != 0) {
   1b7b2:	bb20      	cbnz	r0, 1b7fe <img_mgmt_impl_write_pending+0x76>
        return MGMT_ERR_EUNKNOWN;
    }

    if (!(image_flags & IMAGE_F_NON_BOOTABLE)) {
   1b7b4:	9b01      	ldr	r3, [sp, #4]
   1b7b6:	f013 0f10 	tst.w	r3, #16
   1b7ba:	d111      	bne.n	1b7e0 <img_mgmt_impl_write_pending+0x58>
        /* Unified image or loader. */
        if (!split_app_active) {
   1b7bc:	b136      	cbz	r6, 1b7cc <img_mgmt_impl_write_pending+0x44>
            if (rc != 0) {
                return MGMT_ERR_EUNKNOWN;
            }
        } else {
            /* Currently loader + app; testing loader-only. */
            if (permanent) {
   1b7be:	b15f      	cbz	r7, 1b7d8 <img_mgmt_impl_write_pending+0x50>
                rc = split_write_split(SPLIT_MODE_LOADER);
   1b7c0:	2000      	movs	r0, #0
   1b7c2:	f7f9 fae1 	bl	14d88 <split_write_split>
            } else {
                rc = split_write_split(SPLIT_MODE_TEST_LOADER);
            }
            if (rc != 0) {
   1b7c6:	b1d8      	cbz	r0, 1b800 <img_mgmt_impl_write_pending+0x78>
                return MGMT_ERR_EUNKNOWN;
   1b7c8:	2001      	movs	r0, #1
   1b7ca:	e019      	b.n	1b800 <img_mgmt_impl_write_pending+0x78>
            rc = boot_set_pending(permanent);
   1b7cc:	4638      	mov	r0, r7
   1b7ce:	f00c fd14 	bl	281fa <boot_set_pending>
            if (rc != 0) {
   1b7d2:	b1a8      	cbz	r0, 1b800 <img_mgmt_impl_write_pending+0x78>
                return MGMT_ERR_EUNKNOWN;
   1b7d4:	2001      	movs	r0, #1
   1b7d6:	e013      	b.n	1b800 <img_mgmt_impl_write_pending+0x78>
                rc = split_write_split(SPLIT_MODE_TEST_LOADER);
   1b7d8:	2003      	movs	r0, #3
   1b7da:	f7f9 fad5 	bl	14d88 <split_write_split>
   1b7de:	e7f2      	b.n	1b7c6 <img_mgmt_impl_write_pending+0x3e>
            }
        }
    } else {
        /* Testing split app. */
        if (permanent) {
   1b7e0:	b12f      	cbz	r7, 1b7ee <img_mgmt_impl_write_pending+0x66>
            rc = split_write_split(SPLIT_MODE_APP);
   1b7e2:	2002      	movs	r0, #2
   1b7e4:	f7f9 fad0 	bl	14d88 <split_write_split>
        } else {
            rc = split_write_split(SPLIT_MODE_TEST_APP);
        }
        if (rc != 0) {
   1b7e8:	b150      	cbz	r0, 1b800 <img_mgmt_impl_write_pending+0x78>
            return MGMT_ERR_EUNKNOWN;
   1b7ea:	2001      	movs	r0, #1
   1b7ec:	e008      	b.n	1b800 <img_mgmt_impl_write_pending+0x78>
            rc = split_write_split(SPLIT_MODE_TEST_APP);
   1b7ee:	2001      	movs	r0, #1
   1b7f0:	f7f9 faca 	bl	14d88 <split_write_split>
   1b7f4:	e7f8      	b.n	1b7e8 <img_mgmt_impl_write_pending+0x60>
        return MGMT_ERR_EBADSTATE;
   1b7f6:	2006      	movs	r0, #6
   1b7f8:	e002      	b.n	1b800 <img_mgmt_impl_write_pending+0x78>
   1b7fa:	2006      	movs	r0, #6
   1b7fc:	e000      	b.n	1b800 <img_mgmt_impl_write_pending+0x78>
        return MGMT_ERR_EUNKNOWN;
   1b7fe:	2001      	movs	r0, #1
        }
    }

    return 0;
}
   1b800:	b003      	add	sp, #12
   1b802:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001b804 <img_mgmt_impl_write_confirmed>:

int
img_mgmt_impl_write_confirmed(void)
{
   1b804:	b508      	push	{r3, lr}
    int rc;

    /* Confirm the unified image or loader in slot 0. */
    rc = boot_set_confirmed();
   1b806:	f00c fd1e 	bl	28246 <boot_set_confirmed>
    if (rc != 0) {
   1b80a:	b108      	cbz	r0, 1b810 <img_mgmt_impl_write_confirmed+0xc>
        return MGMT_ERR_EUNKNOWN;
   1b80c:	2001      	movs	r0, #1
            return MGMT_ERR_EUNKNOWN;
        }
    }

    return 0;
}
   1b80e:	bd08      	pop	{r3, pc}
    if (split_app_active_get()) {
   1b810:	f7f9 faa8 	bl	14d64 <split_app_active_get>
   1b814:	b130      	cbz	r0, 1b824 <img_mgmt_impl_write_confirmed+0x20>
        rc = split_write_split(SPLIT_MODE_APP);
   1b816:	2002      	movs	r0, #2
   1b818:	f7f9 fab6 	bl	14d88 <split_write_split>
        if (rc != 0) {
   1b81c:	2800      	cmp	r0, #0
   1b81e:	d0f6      	beq.n	1b80e <img_mgmt_impl_write_confirmed+0xa>
            return MGMT_ERR_EUNKNOWN;
   1b820:	2001      	movs	r0, #1
   1b822:	e7f4      	b.n	1b80e <img_mgmt_impl_write_confirmed+0xa>
        rc = split_write_split(SPLIT_MODE_LOADER);
   1b824:	2000      	movs	r0, #0
   1b826:	f7f9 faaf 	bl	14d88 <split_write_split>
        if (rc != 0) {
   1b82a:	2800      	cmp	r0, #0
   1b82c:	d0ef      	beq.n	1b80e <img_mgmt_impl_write_confirmed+0xa>
            return MGMT_ERR_EUNKNOWN;
   1b82e:	2001      	movs	r0, #1
   1b830:	e7ed      	b.n	1b80e <img_mgmt_impl_write_confirmed+0xa>

0001b832 <img_mgmt_impl_read>:

int
img_mgmt_impl_read(int slot, unsigned int offset, void *dst,
                   unsigned int num_bytes)
{
   1b832:	b570      	push	{r4, r5, r6, lr}
   1b834:	b082      	sub	sp, #8
   1b836:	460c      	mov	r4, r1
   1b838:	4615      	mov	r5, r2
   1b83a:	461e      	mov	r6, r3
    const struct flash_area *fa;
    int area_id;
    int rc;

    area_id = flash_area_id_from_image_slot(slot);
   1b83c:	f7fd f9d3 	bl	18be6 <flash_area_id_from_image_slot>
    rc = flash_area_open(area_id, &fa);
   1b840:	a901      	add	r1, sp, #4
   1b842:	b2c0      	uxtb	r0, r0
   1b844:	f7fd f91a 	bl	18a7c <flash_area_open>
    if (rc != 0) {
   1b848:	b110      	cbz	r0, 1b850 <img_mgmt_impl_read+0x1e>
        return MGMT_ERR_EUNKNOWN;
   1b84a:	2001      	movs	r0, #1
    if (rc != 0) {
        return MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   1b84c:	b002      	add	sp, #8
   1b84e:	bd70      	pop	{r4, r5, r6, pc}
    rc = flash_area_read(fa, offset, dst, num_bytes);
   1b850:	4633      	mov	r3, r6
   1b852:	462a      	mov	r2, r5
   1b854:	4621      	mov	r1, r4
   1b856:	9801      	ldr	r0, [sp, #4]
   1b858:	f7fd f968 	bl	18b2c <flash_area_read>
    if (rc != 0) {
   1b85c:	2800      	cmp	r0, #0
   1b85e:	d0f5      	beq.n	1b84c <img_mgmt_impl_read+0x1a>
        return MGMT_ERR_EUNKNOWN;
   1b860:	2001      	movs	r0, #1
   1b862:	e7f3      	b.n	1b84c <img_mgmt_impl_read+0x1a>

0001b864 <img_mgmt_impl_write_image_data>:

#else
int
img_mgmt_impl_write_image_data(unsigned int offset, const void *data,
                               unsigned int num_bytes, bool last)
{
   1b864:	b570      	push	{r4, r5, r6, lr}
   1b866:	b082      	sub	sp, #8
   1b868:	4604      	mov	r4, r0
   1b86a:	460d      	mov	r5, r1
   1b86c:	4616      	mov	r6, r2
    const struct flash_area *fa;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_1, &fa);
   1b86e:	a901      	add	r1, sp, #4
   1b870:	2002      	movs	r0, #2
   1b872:	f7fd f903 	bl	18a7c <flash_area_open>
    if (rc != 0) {
   1b876:	b110      	cbz	r0, 1b87e <img_mgmt_impl_write_image_data+0x1a>
        return MGMT_ERR_EUNKNOWN;
   1b878:	2001      	movs	r0, #1
    if (rc != 0) {
        return MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   1b87a:	b002      	add	sp, #8
   1b87c:	bd70      	pop	{r4, r5, r6, pc}
    rc = flash_area_write(fa, offset, data, num_bytes);
   1b87e:	4633      	mov	r3, r6
   1b880:	462a      	mov	r2, r5
   1b882:	4621      	mov	r1, r4
   1b884:	9801      	ldr	r0, [sp, #4]
   1b886:	f7fd f964 	bl	18b52 <flash_area_write>
    if (rc != 0) {
   1b88a:	2800      	cmp	r0, #0
   1b88c:	d0f5      	beq.n	1b87a <img_mgmt_impl_write_image_data+0x16>
        return MGMT_ERR_EUNKNOWN;
   1b88e:	2001      	movs	r0, #1
   1b890:	e7f3      	b.n	1b87a <img_mgmt_impl_write_image_data+0x16>

0001b892 <img_mgmt_impl_erase_image_data>:
#endif

int
img_mgmt_impl_erase_image_data(unsigned int off, unsigned int num_bytes)
{
   1b892:	b530      	push	{r4, r5, lr}
   1b894:	b083      	sub	sp, #12
   1b896:	4604      	mov	r4, r0
   1b898:	460d      	mov	r5, r1
    const struct flash_area *fa;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_1, &fa);
   1b89a:	a901      	add	r1, sp, #4
   1b89c:	2002      	movs	r0, #2
   1b89e:	f7fd f8ed 	bl	18a7c <flash_area_open>
    if (rc != 0) {
   1b8a2:	b110      	cbz	r0, 1b8aa <img_mgmt_impl_erase_image_data+0x18>
        return MGMT_ERR_EUNKNOWN;
   1b8a4:	2001      	movs	r0, #1
    if (rc != 0) {
        return MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   1b8a6:	b003      	add	sp, #12
   1b8a8:	bd30      	pop	{r4, r5, pc}
    rc = flash_area_erase(fa, off, num_bytes);
   1b8aa:	462a      	mov	r2, r5
   1b8ac:	4621      	mov	r1, r4
   1b8ae:	9801      	ldr	r0, [sp, #4]
   1b8b0:	f7fd f962 	bl	18b78 <flash_area_erase>
    if (rc != 0) {
   1b8b4:	2800      	cmp	r0, #0
   1b8b6:	d0f6      	beq.n	1b8a6 <img_mgmt_impl_erase_image_data+0x14>
        return MGMT_ERR_EUNKNOWN;
   1b8b8:	2001      	movs	r0, #1
   1b8ba:	e7f4      	b.n	1b8a6 <img_mgmt_impl_erase_image_data+0x14>

0001b8bc <img_mgmt_impl_swap_type>:
}
#endif

int
img_mgmt_impl_swap_type(int slot)
{
   1b8bc:	b508      	push	{r3, lr}
    assert(slot == 0 || slot == 1);
   1b8be:	2801      	cmp	r0, #1
   1b8c0:	d808      	bhi.n	1b8d4 <img_mgmt_impl_swap_type+0x18>

    switch (boot_swap_type()) {
   1b8c2:	f00c fc4d 	bl	28160 <boot_swap_type>
   1b8c6:	3801      	subs	r0, #1
   1b8c8:	2803      	cmp	r0, #3
   1b8ca:	d811      	bhi.n	1b8f0 <img_mgmt_impl_swap_type+0x34>
   1b8cc:	e8df f000 	tbb	[pc, r0]
   1b8d0:	0e0c1c1a 	.word	0x0e0c1c1a
    assert(slot == 0 || slot == 1);
   1b8d4:	f7f8 fec6 	bl	14664 <hal_debugger_connected>
   1b8d8:	b100      	cbz	r0, 1b8dc <img_mgmt_impl_swap_type+0x20>
   1b8da:	be01      	bkpt	0x0001
   1b8dc:	2300      	movs	r3, #0
   1b8de:	461a      	mov	r2, r3
   1b8e0:	4619      	mov	r1, r3
   1b8e2:	4618      	mov	r0, r3
   1b8e4:	f7f9 fa5e 	bl	14da4 <__assert_func>
    case BOOT_SWAP_TYPE_NONE:
        return IMG_MGMT_SWAP_TYPE_NONE;
    case BOOT_SWAP_TYPE_TEST:
        return IMG_MGMT_SWAP_TYPE_TEST;
    case BOOT_SWAP_TYPE_PERM:
        return IMG_MGMT_SWAP_TYPE_PERM;
   1b8e8:	2002      	movs	r0, #2
   1b8ea:	e00c      	b.n	1b906 <img_mgmt_impl_swap_type+0x4a>
    case BOOT_SWAP_TYPE_REVERT:
        return IMG_MGMT_SWAP_TYPE_REVERT;
   1b8ec:	2003      	movs	r0, #3
   1b8ee:	e00a      	b.n	1b906 <img_mgmt_impl_swap_type+0x4a>
    default:
        assert(0);
   1b8f0:	f7f8 feb8 	bl	14664 <hal_debugger_connected>
   1b8f4:	b100      	cbz	r0, 1b8f8 <img_mgmt_impl_swap_type+0x3c>
   1b8f6:	be01      	bkpt	0x0001
   1b8f8:	2300      	movs	r3, #0
   1b8fa:	461a      	mov	r2, r3
   1b8fc:	4619      	mov	r1, r3
   1b8fe:	4618      	mov	r0, r3
   1b900:	f7f9 fa50 	bl	14da4 <__assert_func>
    switch (boot_swap_type()) {
   1b904:	2000      	movs	r0, #0
        return IMG_MGMT_SWAP_TYPE_NONE;
    }
}
   1b906:	bd08      	pop	{r3, pc}
        return IMG_MGMT_SWAP_TYPE_TEST;
   1b908:	2001      	movs	r0, #1
   1b90a:	e7fc      	b.n	1b906 <img_mgmt_impl_swap_type+0x4a>

0001b90c <img_mgmt_impl_erased_val>:

int
img_mgmt_impl_erased_val(int slot, uint8_t *erased_val)
{
   1b90c:	b530      	push	{r4, r5, lr}
   1b90e:	b083      	sub	sp, #12
   1b910:	460c      	mov	r4, r1
    const struct flash_area *fa;
    int rc;

    rc = flash_area_open(flash_area_id_from_image_slot(slot), &fa);
   1b912:	f7fd f968 	bl	18be6 <flash_area_id_from_image_slot>
   1b916:	a901      	add	r1, sp, #4
   1b918:	b2c0      	uxtb	r0, r0
   1b91a:	f7fd f8af 	bl	18a7c <flash_area_open>
    if (rc != 0) {
   1b91e:	b118      	cbz	r0, 1b928 <img_mgmt_impl_erased_val+0x1c>
      return MGMT_ERR_EUNKNOWN;
   1b920:	2501      	movs	r5, #1

    *erased_val = flash_area_erased_val(fa);
    flash_area_close(fa);

    return 0;
}
   1b922:	4628      	mov	r0, r5
   1b924:	b003      	add	sp, #12
   1b926:	bd30      	pop	{r4, r5, pc}
   1b928:	4605      	mov	r5, r0
    *erased_val = flash_area_erased_val(fa);
   1b92a:	9801      	ldr	r0, [sp, #4]
   1b92c:	f7fd f93c 	bl	18ba8 <flash_area_erased_val>
   1b930:	7020      	strb	r0, [r4, #0]
    return 0;
   1b932:	e7f6      	b.n	1b922 <img_mgmt_impl_erased_val+0x16>

0001b934 <img_mgmt_module_init>:

void
img_mgmt_module_init(void)
{
   1b934:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1b936:	4b08      	ldr	r3, [pc, #32]	; (1b958 <img_mgmt_module_init+0x24>)
   1b938:	781b      	ldrb	r3, [r3, #0]
   1b93a:	b113      	cbz	r3, 1b942 <img_mgmt_module_init+0xe>

    img_mgmt_register_group();
   1b93c:	f7ff fc04 	bl	1b148 <img_mgmt_register_group>
}
   1b940:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1b942:	f7f8 fe8f 	bl	14664 <hal_debugger_connected>
   1b946:	b100      	cbz	r0, 1b94a <img_mgmt_module_init+0x16>
   1b948:	be01      	bkpt	0x0001
   1b94a:	2300      	movs	r3, #0
   1b94c:	461a      	mov	r2, r3
   1b94e:	4619      	mov	r1, r3
   1b950:	4618      	mov	r0, r3
   1b952:	f7f9 fa27 	bl	14da4 <__assert_func>
   1b956:	bf00      	nop
   1b958:	10003404 	.word	0x10003404

0001b95c <img_mgmt_log_gen>:
    modlog_append_mbuf(MYNEWT_VAL(IMG_MGMT_LOG_MOD), LOG_LEVEL_INFO,
                       LOG_ETYPE_CBOR, om);
#endif

    return 0;
}
   1b95c:	2000      	movs	r0, #0
   1b95e:	4770      	bx	lr

0001b960 <img_mgmt_impl_log_upload_start>:

int
img_mgmt_impl_log_upload_start(int status)
{
   1b960:	b508      	push	{r3, lr}
   1b962:	4601      	mov	r1, r0
    return img_mgmt_log_gen(IMG_MGMT_LOG_EV_UPSTART, status, NULL);
   1b964:	2200      	movs	r2, #0
   1b966:	4802      	ldr	r0, [pc, #8]	; (1b970 <img_mgmt_impl_log_upload_start+0x10>)
   1b968:	f7ff fff8 	bl	1b95c <img_mgmt_log_gen>
}
   1b96c:	bd08      	pop	{r3, pc}
   1b96e:	bf00      	nop
   1b970:	00030a34 	.word	0x00030a34

0001b974 <img_mgmt_impl_log_upload_done>:

int
img_mgmt_impl_log_upload_done(int status, const uint8_t *hash)
{
   1b974:	b508      	push	{r3, lr}
   1b976:	460a      	mov	r2, r1
    return img_mgmt_log_gen(IMG_MGMT_LOG_EV_UPDONE, 0, hash);
   1b978:	2100      	movs	r1, #0
   1b97a:	4802      	ldr	r0, [pc, #8]	; (1b984 <img_mgmt_impl_log_upload_done+0x10>)
   1b97c:	f7ff ffee 	bl	1b95c <img_mgmt_log_gen>
}
   1b980:	bd08      	pop	{r3, pc}
   1b982:	bf00      	nop
   1b984:	00030a3c 	.word	0x00030a3c

0001b988 <img_mgmt_impl_log_pending>:

int
img_mgmt_impl_log_pending(int status, const uint8_t *hash)
{
   1b988:	b508      	push	{r3, lr}
   1b98a:	460a      	mov	r2, r1
    return img_mgmt_log_gen(IMG_MGMT_LOG_EV_PEND, status, hash);
   1b98c:	4601      	mov	r1, r0
   1b98e:	4802      	ldr	r0, [pc, #8]	; (1b998 <img_mgmt_impl_log_pending+0x10>)
   1b990:	f7ff ffe4 	bl	1b95c <img_mgmt_log_gen>
}
   1b994:	bd08      	pop	{r3, pc}
   1b996:	bf00      	nop
   1b998:	00030a44 	.word	0x00030a44

0001b99c <img_mgmt_impl_log_confirm>:

int
img_mgmt_impl_log_confirm(int status, const uint8_t *hash)
{
   1b99c:	b508      	push	{r3, lr}
   1b99e:	460a      	mov	r2, r1
    return img_mgmt_log_gen(IMG_MGMT_LOG_EV_CONF, status, hash);
   1b9a0:	4601      	mov	r1, r0
   1b9a2:	4802      	ldr	r0, [pc, #8]	; (1b9ac <img_mgmt_impl_log_confirm+0x10>)
   1b9a4:	f7ff ffda 	bl	1b95c <img_mgmt_log_gen>
}
   1b9a8:	bd08      	pop	{r3, pc}
   1b9aa:	bf00      	nop
   1b9ac:	00030a4c 	.word	0x00030a4c

0001b9b0 <mynewt_log_mgmt_find_log>:
    void *arg;
};

static struct log *
mynewt_log_mgmt_find_log(const char *log_name)
{
   1b9b0:	b538      	push	{r3, r4, r5, lr}
   1b9b2:	4605      	mov	r5, r0
    struct log *log;

    log = NULL;
   1b9b4:	2400      	movs	r4, #0
    while (1) {
        log = log_list_get_next(log);
   1b9b6:	4620      	mov	r0, r4
   1b9b8:	f7fd fb5a 	bl	19070 <log_list_get_next>
        if (log == NULL) {
   1b9bc:	4604      	mov	r4, r0
   1b9be:	b128      	cbz	r0, 1b9cc <mynewt_log_mgmt_find_log+0x1c>
            return NULL;
        }

        if (strcmp(log->l_name, log_name) == 0) {
   1b9c0:	4629      	mov	r1, r5
   1b9c2:	6800      	ldr	r0, [r0, #0]
   1b9c4:	f7fb f8c7 	bl	16b56 <strcmp>
   1b9c8:	2800      	cmp	r0, #0
   1b9ca:	d1f4      	bne.n	1b9b6 <mynewt_log_mgmt_find_log+0x6>
            return log;
        }
    }
}
   1b9cc:	4620      	mov	r0, r4
   1b9ce:	bd38      	pop	{r3, r4, r5, pc}

0001b9d0 <mynewt_log_mgmt_walk_cb>:

static int
mynewt_log_mgmt_walk_cb(struct log *log, struct log_offset *log_offset,
                        const struct log_entry_hdr *leh,
                        const void *dptr, uint16_t len)
{
   1b9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b9d4:	b08d      	sub	sp, #52	; 0x34
   1b9d6:	4607      	mov	r7, r0
   1b9d8:	460c      	mov	r4, r1
   1b9da:	4698      	mov	r8, r3
   1b9dc:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
    int read_len;
    int offset;
    int rc;

    rc = 0;
    mynewt_log_mgmt_walk_arg = log_offset->lo_arg;
   1b9e0:	690e      	ldr	r6, [r1, #16]
     * If specified timestamp == 0: encode entries whose index >=
     *     specified index.
     * Else: encode entries whose timestamp >= specified timestamp and whose
     *      index >= specified index
     */
    if (log_offset->lo_ts == 0) {
   1b9e2:	e9d1 0100 	ldrd	r0, r1, [r1]
   1b9e6:	ea50 0301 	orrs.w	r3, r0, r1
   1b9ea:	d126      	bne.n	1ba3a <mynewt_log_mgmt_walk_cb+0x6a>
        if (log_offset->lo_index > leh->ue_index) {
   1b9ec:	68a1      	ldr	r1, [r4, #8]
   1b9ee:	6893      	ldr	r3, [r2, #8]
   1b9f0:	4299      	cmp	r1, r3
   1b9f2:	d851      	bhi.n	1ba98 <mynewt_log_mgmt_walk_cb+0xc8>
               (leh->ue_ts == log_offset->lo_ts &&
                leh->ue_index < log_offset->lo_index)) {
        return 0;
    }

    entry.ts = leh->ue_ts;
   1b9f4:	6811      	ldr	r1, [r2, #0]
   1b9f6:	6853      	ldr	r3, [r2, #4]
   1b9f8:	9102      	str	r1, [sp, #8]
   1b9fa:	9303      	str	r3, [sp, #12]
    entry.index = leh->ue_index;
   1b9fc:	6893      	ldr	r3, [r2, #8]
   1b9fe:	9304      	str	r3, [sp, #16]
    entry.module = leh->ue_module;
   1ba00:	7b13      	ldrb	r3, [r2, #12]
   1ba02:	f88d 301c 	strb.w	r3, [sp, #28]
    entry.level = leh->ue_level;
   1ba06:	7b53      	ldrb	r3, [r2, #13]
   1ba08:	f88d 301d 	strb.w	r3, [sp, #29]

    entry.type = leh->ue_etype;
   1ba0c:	7b93      	ldrb	r3, [r2, #14]
   1ba0e:	f89d 101e 	ldrb.w	r1, [sp, #30]
   1ba12:	f363 0103 	bfi	r1, r3, #0, #4
    entry.flags = leh->ue_flags;
   1ba16:	091b      	lsrs	r3, r3, #4
   1ba18:	f363 1107 	bfi	r1, r3, #4, #4
   1ba1c:	f88d 101e 	strb.w	r1, [sp, #30]
    entry.imghash = (leh->ue_flags & LOG_FLAGS_IMG_HASH) ?
        leh->ue_imghash : NULL;
   1ba20:	f013 0f01 	tst.w	r3, #1
   1ba24:	d01b      	beq.n	1ba5e <mynewt_log_mgmt_walk_cb+0x8e>
   1ba26:	320f      	adds	r2, #15
    entry.imghash = (leh->ue_flags & LOG_FLAGS_IMG_HASH) ?
   1ba28:	9208      	str	r2, [sp, #32]
    entry.len = len;
   1ba2a:	9506      	str	r5, [sp, #24]
    entry.data = mynewt_log_mgmt_walk_arg->chunk;
   1ba2c:	f106 0904 	add.w	r9, r6, #4
   1ba30:	f8cd 9014 	str.w	r9, [sp, #20]
    rc = 0;
   1ba34:	2300      	movs	r3, #0

    for (offset = 0; offset < len; offset += LOG_MGMT_CHUNK_LEN) {
   1ba36:	461c      	mov	r4, r3
   1ba38:	e027      	b.n	1ba8a <mynewt_log_mgmt_walk_cb+0xba>
    } else if (leh->ue_ts < log_offset->lo_ts   ||
   1ba3a:	f8d2 a000 	ldr.w	sl, [r2]
   1ba3e:	f8d2 b004 	ldr.w	fp, [r2, #4]
   1ba42:	4582      	cmp	sl, r0
   1ba44:	eb7b 0301 	sbcs.w	r3, fp, r1
   1ba48:	db28      	blt.n	1ba9c <mynewt_log_mgmt_walk_cb+0xcc>
   1ba4a:	4559      	cmp	r1, fp
   1ba4c:	bf08      	it	eq
   1ba4e:	4550      	cmpeq	r0, sl
   1ba50:	d1d0      	bne.n	1b9f4 <mynewt_log_mgmt_walk_cb+0x24>
                leh->ue_index < log_offset->lo_index)) {
   1ba52:	6891      	ldr	r1, [r2, #8]
   1ba54:	68a3      	ldr	r3, [r4, #8]
               (leh->ue_ts == log_offset->lo_ts &&
   1ba56:	4299      	cmp	r1, r3
   1ba58:	d2cc      	bcs.n	1b9f4 <mynewt_log_mgmt_walk_cb+0x24>
        return 0;
   1ba5a:	2300      	movs	r3, #0
   1ba5c:	e021      	b.n	1baa2 <mynewt_log_mgmt_walk_cb+0xd2>
        leh->ue_imghash : NULL;
   1ba5e:	2200      	movs	r2, #0
   1ba60:	e7e2      	b.n	1ba28 <mynewt_log_mgmt_walk_cb+0x58>
        if (len - offset < LOG_MGMT_CHUNK_LEN) {
            read_len = len - offset;
        } else {
            read_len = LOG_MGMT_CHUNK_LEN;
        }
        entry.offset = offset;
   1ba62:	9409      	str	r4, [sp, #36]	; 0x24
        entry.chunklen = read_len;
   1ba64:	920a      	str	r2, [sp, #40]	; 0x28

        rc = log_read_body(log, dptr, mynewt_log_mgmt_walk_arg->chunk, offset,
   1ba66:	b292      	uxth	r2, r2
   1ba68:	9200      	str	r2, [sp, #0]
   1ba6a:	b2a3      	uxth	r3, r4
   1ba6c:	464a      	mov	r2, r9
   1ba6e:	4641      	mov	r1, r8
   1ba70:	4638      	mov	r0, r7
   1ba72:	f7fd fc4d 	bl	19310 <log_read_body>
                           read_len);
        if (rc < 0) {
   1ba76:	2800      	cmp	r0, #0
   1ba78:	db12      	blt.n	1baa0 <mynewt_log_mgmt_walk_cb+0xd0>
            return LOG_MGMT_ERR_EUNKNOWN;
        }
        rc = mynewt_log_mgmt_walk_arg->cb(&entry, mynewt_log_mgmt_walk_arg->arg);
   1ba7a:	6833      	ldr	r3, [r6, #0]
   1ba7c:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
   1ba80:	a802      	add	r0, sp, #8
   1ba82:	4798      	blx	r3
        if (rc) {
   1ba84:	4603      	mov	r3, r0
   1ba86:	b960      	cbnz	r0, 1baa2 <mynewt_log_mgmt_walk_cb+0xd2>
    for (offset = 0; offset < len; offset += LOG_MGMT_CHUNK_LEN) {
   1ba88:	3480      	adds	r4, #128	; 0x80
   1ba8a:	42a5      	cmp	r5, r4
   1ba8c:	dd09      	ble.n	1baa2 <mynewt_log_mgmt_walk_cb+0xd2>
        if (len - offset < LOG_MGMT_CHUNK_LEN) {
   1ba8e:	1b2a      	subs	r2, r5, r4
   1ba90:	2a7f      	cmp	r2, #127	; 0x7f
   1ba92:	dde6      	ble.n	1ba62 <mynewt_log_mgmt_walk_cb+0x92>
            read_len = LOG_MGMT_CHUNK_LEN;
   1ba94:	2280      	movs	r2, #128	; 0x80
   1ba96:	e7e4      	b.n	1ba62 <mynewt_log_mgmt_walk_cb+0x92>
            return 0;
   1ba98:	2300      	movs	r3, #0
   1ba9a:	e002      	b.n	1baa2 <mynewt_log_mgmt_walk_cb+0xd2>
        return 0;
   1ba9c:	2300      	movs	r3, #0
   1ba9e:	e000      	b.n	1baa2 <mynewt_log_mgmt_walk_cb+0xd2>
            return LOG_MGMT_ERR_EUNKNOWN;
   1baa0:	2301      	movs	r3, #1
            break;
        }
    }

    return rc;
}
   1baa2:	4618      	mov	r0, r3
   1baa4:	b00d      	add	sp, #52	; 0x34
   1baa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001baaa <log_mgmt_impl_get_log>:
{
   1baaa:	b570      	push	{r4, r5, r6, lr}
   1baac:	4605      	mov	r5, r0
   1baae:	460e      	mov	r6, r1
    for (i = 0; i <= idx; i++) {
   1bab0:	2400      	movs	r4, #0
    log = NULL;
   1bab2:	4620      	mov	r0, r4
    for (i = 0; i <= idx; i++) {
   1bab4:	42ac      	cmp	r4, r5
   1bab6:	dc04      	bgt.n	1bac2 <log_mgmt_impl_get_log+0x18>
        log = log_list_get_next(log);
   1bab8:	f7fd fada 	bl	19070 <log_list_get_next>
        if (log == NULL) {
   1babc:	b140      	cbz	r0, 1bad0 <log_mgmt_impl_get_log+0x26>
    for (i = 0; i <= idx; i++) {
   1babe:	3401      	adds	r4, #1
   1bac0:	e7f8      	b.n	1bab4 <log_mgmt_impl_get_log+0xa>
    out_log->name = log->l_name;
   1bac2:	6803      	ldr	r3, [r0, #0]
   1bac4:	6033      	str	r3, [r6, #0]
    out_log->type = log->l_log->log_type;
   1bac6:	6843      	ldr	r3, [r0, #4]
   1bac8:	681b      	ldr	r3, [r3, #0]
   1baca:	6073      	str	r3, [r6, #4]
    return 0;
   1bacc:	2000      	movs	r0, #0
}
   1bace:	bd70      	pop	{r4, r5, r6, pc}
            return LOG_MGMT_ERR_ENOENT;
   1bad0:	2005      	movs	r0, #5
   1bad2:	e7fc      	b.n	1bace <log_mgmt_impl_get_log+0x24>

0001bad4 <log_mgmt_impl_get_module>:
{
   1bad4:	b510      	push	{r4, lr}
   1bad6:	460c      	mov	r4, r1
    name = LOG_MODULE_STR(idx);
   1bad8:	b2c0      	uxtb	r0, r0
   1bada:	f7fd fad1 	bl	19080 <log_module_get_name>
    if (name == NULL) {
   1bade:	b110      	cbz	r0, 1bae6 <log_mgmt_impl_get_module+0x12>
        *out_module_name = name;
   1bae0:	6020      	str	r0, [r4, #0]
        return 0;
   1bae2:	2000      	movs	r0, #0
}
   1bae4:	bd10      	pop	{r4, pc}
        return LOG_MGMT_ERR_ENOENT;
   1bae6:	2005      	movs	r0, #5
   1bae8:	e7fc      	b.n	1bae4 <log_mgmt_impl_get_module+0x10>
	...

0001baec <log_mgmt_impl_get_level>:
    if (idx >= LOG_LEVEL_MAX) {
   1baec:	280e      	cmp	r0, #14
   1baee:	dc1d      	bgt.n	1bb2c <log_mgmt_impl_get_level+0x40>
{
   1baf0:	b538      	push	{r3, r4, r5, lr}
   1baf2:	460c      	mov	r4, r1
    name = LOG_LEVEL_STR(idx);
   1baf4:	b158      	cbz	r0, 1bb0e <log_mgmt_impl_get_level+0x22>
   1baf6:	2801      	cmp	r0, #1
   1baf8:	d012      	beq.n	1bb20 <log_mgmt_impl_get_level+0x34>
   1bafa:	2802      	cmp	r0, #2
   1bafc:	d012      	beq.n	1bb24 <log_mgmt_impl_get_level+0x38>
   1bafe:	2803      	cmp	r0, #3
   1bb00:	d012      	beq.n	1bb28 <log_mgmt_impl_get_level+0x3c>
   1bb02:	2804      	cmp	r0, #4
   1bb04:	d001      	beq.n	1bb0a <log_mgmt_impl_get_level+0x1e>
   1bb06:	4d0b      	ldr	r5, [pc, #44]	; (1bb34 <log_mgmt_impl_get_level+0x48>)
   1bb08:	e002      	b.n	1bb10 <log_mgmt_impl_get_level+0x24>
   1bb0a:	4d0b      	ldr	r5, [pc, #44]	; (1bb38 <log_mgmt_impl_get_level+0x4c>)
   1bb0c:	e000      	b.n	1bb10 <log_mgmt_impl_get_level+0x24>
   1bb0e:	4d0b      	ldr	r5, [pc, #44]	; (1bb3c <log_mgmt_impl_get_level+0x50>)
    if (!strcmp(name, "UNKNOWN")) {
   1bb10:	4908      	ldr	r1, [pc, #32]	; (1bb34 <log_mgmt_impl_get_level+0x48>)
   1bb12:	4628      	mov	r0, r5
   1bb14:	f7fb f81f 	bl	16b56 <strcmp>
   1bb18:	b150      	cbz	r0, 1bb30 <log_mgmt_impl_get_level+0x44>
        *out_level_name = name;
   1bb1a:	6025      	str	r5, [r4, #0]
        return 0;
   1bb1c:	2000      	movs	r0, #0
}
   1bb1e:	bd38      	pop	{r3, r4, r5, pc}
    name = LOG_LEVEL_STR(idx);
   1bb20:	4d07      	ldr	r5, [pc, #28]	; (1bb40 <log_mgmt_impl_get_level+0x54>)
   1bb22:	e7f5      	b.n	1bb10 <log_mgmt_impl_get_level+0x24>
   1bb24:	4d07      	ldr	r5, [pc, #28]	; (1bb44 <log_mgmt_impl_get_level+0x58>)
   1bb26:	e7f3      	b.n	1bb10 <log_mgmt_impl_get_level+0x24>
   1bb28:	4d07      	ldr	r5, [pc, #28]	; (1bb48 <log_mgmt_impl_get_level+0x5c>)
   1bb2a:	e7f1      	b.n	1bb10 <log_mgmt_impl_get_level+0x24>
        return LOG_MGMT_ERR_ENOENT;
   1bb2c:	2005      	movs	r0, #5
}
   1bb2e:	4770      	bx	lr
        return LOG_MGMT_ERR_ENOENT;
   1bb30:	2005      	movs	r0, #5
   1bb32:	e7f4      	b.n	1bb1e <log_mgmt_impl_get_level+0x32>
   1bb34:	00030a74 	.word	0x00030a74
   1bb38:	00030a7c 	.word	0x00030a7c
   1bb3c:	00030a54 	.word	0x00030a54
   1bb40:	00030a64 	.word	0x00030a64
   1bb44:	00030a6c 	.word	0x00030a6c
   1bb48:	00030a5c 	.word	0x00030a5c

0001bb4c <log_mgmt_impl_get_next_idx>:
    *out_idx = g_log_info.li_next_index;
   1bb4c:	4b02      	ldr	r3, [pc, #8]	; (1bb58 <log_mgmt_impl_get_next_idx+0xc>)
   1bb4e:	681b      	ldr	r3, [r3, #0]
   1bb50:	6003      	str	r3, [r0, #0]
}
   1bb52:	2000      	movs	r0, #0
   1bb54:	4770      	bx	lr
   1bb56:	bf00      	nop
   1bb58:	10003198 	.word	0x10003198

0001bb5c <log_mgmt_impl_foreach_entry>:

int
log_mgmt_impl_foreach_entry(const char *log_name,
                            const struct log_mgmt_filter *filter,
                            log_mgmt_foreach_entry_fn *cb, void *arg)
{
   1bb5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bb5e:	b0a9      	sub	sp, #164	; 0xa4
   1bb60:	4604      	mov	r4, r0
   1bb62:	460f      	mov	r7, r1
   1bb64:	4616      	mov	r6, r2
   1bb66:	461d      	mov	r5, r3
    struct mynewt_log_mgmt_walk_arg walk_arg;
    struct log_offset offset;
    struct log *log;

    walk_arg = (struct mynewt_log_mgmt_walk_arg) {
   1bb68:	2280      	movs	r2, #128	; 0x80
   1bb6a:	2100      	movs	r1, #0
   1bb6c:	a807      	add	r0, sp, #28
   1bb6e:	f7fa ffd6 	bl	16b1e <memset>
   1bb72:	9606      	str	r6, [sp, #24]
   1bb74:	9527      	str	r5, [sp, #156]	; 0x9c
        .cb = cb,
        .arg = arg,
    };

    log = mynewt_log_mgmt_find_log(log_name);
   1bb76:	4620      	mov	r0, r4
   1bb78:	f7ff ff1a 	bl	1b9b0 <mynewt_log_mgmt_find_log>
    if (log == NULL) {
   1bb7c:	b1c0      	cbz	r0, 1bbb0 <log_mgmt_impl_foreach_entry+0x54>
   1bb7e:	4605      	mov	r5, r0
        return LOG_MGMT_ERR_ENOENT;
    }

    if (strcmp(log->l_name, log_name) == 0) {
   1bb80:	4621      	mov	r1, r4
   1bb82:	6800      	ldr	r0, [r0, #0]
   1bb84:	f7fa ffe7 	bl	16b56 <strcmp>
   1bb88:	b110      	cbz	r0, 1bb90 <log_mgmt_impl_foreach_entry+0x34>
        offset.lo_data_len = 0;

        return log_walk_body(log, mynewt_log_mgmt_walk_cb, &offset);
    }

    return LOG_MGMT_ERR_ENOENT;
   1bb8a:	2005      	movs	r0, #5
}
   1bb8c:	b029      	add	sp, #164	; 0xa4
   1bb8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        offset.lo_arg = &walk_arg;
   1bb90:	ab06      	add	r3, sp, #24
   1bb92:	9304      	str	r3, [sp, #16]
        offset.lo_ts = filter->min_timestamp;
   1bb94:	e9d7 2300 	ldrd	r2, r3, [r7]
   1bb98:	e9cd 2300 	strd	r2, r3, [sp]
        offset.lo_index = filter->min_index;
   1bb9c:	68bb      	ldr	r3, [r7, #8]
   1bb9e:	9302      	str	r3, [sp, #8]
        offset.lo_data_len = 0;
   1bba0:	2300      	movs	r3, #0
   1bba2:	9303      	str	r3, [sp, #12]
        return log_walk_body(log, mynewt_log_mgmt_walk_cb, &offset);
   1bba4:	466a      	mov	r2, sp
   1bba6:	4903      	ldr	r1, [pc, #12]	; (1bbb4 <log_mgmt_impl_foreach_entry+0x58>)
   1bba8:	4628      	mov	r0, r5
   1bbaa:	f7fd fb4b 	bl	19244 <log_walk_body>
   1bbae:	e7ed      	b.n	1bb8c <log_mgmt_impl_foreach_entry+0x30>
        return LOG_MGMT_ERR_ENOENT;
   1bbb0:	2005      	movs	r0, #5
   1bbb2:	e7eb      	b.n	1bb8c <log_mgmt_impl_foreach_entry+0x30>
   1bbb4:	0001b9d1 	.word	0x0001b9d1

0001bbb8 <log_mgmt_impl_clear>:

int
log_mgmt_impl_clear(const char *log_name)
{
   1bbb8:	b508      	push	{r3, lr}
    struct log *log;
    int rc;

    log = mynewt_log_mgmt_find_log(log_name);
   1bbba:	f7ff fef9 	bl	1b9b0 <mynewt_log_mgmt_find_log>
    if (log == NULL) {
   1bbbe:	b118      	cbz	r0, 1bbc8 <log_mgmt_impl_clear+0x10>
        return LOG_MGMT_ERR_ENOENT;
    }

    rc = log_flush(log);
   1bbc0:	f7fd fbc0 	bl	19344 <log_flush>
    if (rc != 0) {
   1bbc4:	b910      	cbnz	r0, 1bbcc <log_mgmt_impl_clear+0x14>
        return LOG_MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   1bbc6:	bd08      	pop	{r3, pc}
        return LOG_MGMT_ERR_ENOENT;
   1bbc8:	2005      	movs	r0, #5
   1bbca:	e7fc      	b.n	1bbc6 <log_mgmt_impl_clear+0xe>
        return LOG_MGMT_ERR_EUNKNOWN;
   1bbcc:	2001      	movs	r0, #1
   1bbce:	e7fa      	b.n	1bbc6 <log_mgmt_impl_clear+0xe>

0001bbd0 <log_mgmt_module_init>:

void
log_mgmt_module_init(void)
{
   1bbd0:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1bbd2:	4b08      	ldr	r3, [pc, #32]	; (1bbf4 <log_mgmt_module_init+0x24>)
   1bbd4:	781b      	ldrb	r3, [r3, #0]
   1bbd6:	b113      	cbz	r3, 1bbde <log_mgmt_module_init+0xe>

    log_mgmt_register_group();
   1bbd8:	f013 f9fe 	bl	2efd8 <log_mgmt_register_group>
}
   1bbdc:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1bbde:	f7f8 fd41 	bl	14664 <hal_debugger_connected>
   1bbe2:	b100      	cbz	r0, 1bbe6 <log_mgmt_module_init+0x16>
   1bbe4:	be01      	bkpt	0x0001
   1bbe6:	2300      	movs	r3, #0
   1bbe8:	461a      	mov	r2, r3
   1bbea:	4619      	mov	r1, r3
   1bbec:	4618      	mov	r0, r3
   1bbee:	f7f9 f8d9 	bl	14da4 <__assert_func>
   1bbf2:	bf00      	nop
   1bbf4:	10003404 	.word	0x10003404

0001bbf8 <os_mgmt_reset>:
/**
 * Command handler: os reset
 */
static int
os_mgmt_reset(struct mgmt_ctxt *ctxt)
{
   1bbf8:	b508      	push	{r3, lr}
    return os_mgmt_impl_reset(OS_MGMT_RESET_MS);
   1bbfa:	20fa      	movs	r0, #250	; 0xfa
   1bbfc:	f000 f966 	bl	1becc <os_mgmt_impl_reset>
}
   1bc00:	bd08      	pop	{r3, pc}
	...

0001bc04 <os_mgmt_taskstat_encode_one>:
{
   1bc04:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bc06:	b085      	sub	sp, #20
   1bc08:	4606      	mov	r6, r0
   1bc0a:	460d      	mov	r5, r1
    err |= cbor_encode_text_stringz(encoder, task_info->oti_name);
   1bc0c:	f101 0418 	add.w	r4, r1, #24
   1bc10:	4620      	mov	r0, r4
   1bc12:	f7fa ffac 	bl	16b6e <strlen>
   1bc16:	4602      	mov	r2, r0
   1bc18:	4621      	mov	r1, r4
   1bc1a:	4630      	mov	r0, r6
   1bc1c:	f00d f9bc 	bl	28f98 <cbor_encode_text_string>
   1bc20:	4604      	mov	r4, r0
    err |= cbor_encoder_create_map(encoder, &task_map, CborIndefiniteLength);
   1bc22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bc26:	4669      	mov	r1, sp
   1bc28:	4630      	mov	r0, r6
   1bc2a:	f00d f9c1 	bl	28fb0 <cbor_encoder_create_map>
   1bc2e:	4304      	orrs	r4, r0
   1bc30:	2204      	movs	r2, #4
   1bc32:	493c      	ldr	r1, [pc, #240]	; (1bd24 <os_mgmt_taskstat_encode_one+0x120>)
   1bc34:	4668      	mov	r0, sp
   1bc36:	f00d f9af 	bl	28f98 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "prio");
   1bc3a:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_prio);
   1bc3c:	782a      	ldrb	r2, [r5, #0]
   1bc3e:	2300      	movs	r3, #0
   1bc40:	4668      	mov	r0, sp
   1bc42:	f00d f8fc 	bl	28e3e <cbor_encode_uint>
   1bc46:	4304      	orrs	r4, r0
   1bc48:	2203      	movs	r2, #3
   1bc4a:	4937      	ldr	r1, [pc, #220]	; (1bd28 <os_mgmt_taskstat_encode_one+0x124>)
   1bc4c:	4668      	mov	r0, sp
   1bc4e:	f00d f9a3 	bl	28f98 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "tid");
   1bc52:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_taskid);
   1bc54:	786a      	ldrb	r2, [r5, #1]
   1bc56:	2300      	movs	r3, #0
   1bc58:	4668      	mov	r0, sp
   1bc5a:	f00d f8f0 	bl	28e3e <cbor_encode_uint>
   1bc5e:	4304      	orrs	r4, r0
   1bc60:	2205      	movs	r2, #5
   1bc62:	4932      	ldr	r1, [pc, #200]	; (1bd2c <os_mgmt_taskstat_encode_one+0x128>)
   1bc64:	4668      	mov	r0, sp
   1bc66:	f00d f997 	bl	28f98 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "state");
   1bc6a:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_state);
   1bc6c:	78aa      	ldrb	r2, [r5, #2]
   1bc6e:	2300      	movs	r3, #0
   1bc70:	4668      	mov	r0, sp
   1bc72:	f00d f8e4 	bl	28e3e <cbor_encode_uint>
   1bc76:	4304      	orrs	r4, r0
   1bc78:	2206      	movs	r2, #6
   1bc7a:	492d      	ldr	r1, [pc, #180]	; (1bd30 <os_mgmt_taskstat_encode_one+0x12c>)
   1bc7c:	4668      	mov	r0, sp
   1bc7e:	f00d f98b 	bl	28f98 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "stkuse");
   1bc82:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_stkusage);
   1bc84:	88aa      	ldrh	r2, [r5, #4]
   1bc86:	2300      	movs	r3, #0
   1bc88:	4668      	mov	r0, sp
   1bc8a:	f00d f8d8 	bl	28e3e <cbor_encode_uint>
   1bc8e:	4304      	orrs	r4, r0
   1bc90:	2206      	movs	r2, #6
   1bc92:	4928      	ldr	r1, [pc, #160]	; (1bd34 <os_mgmt_taskstat_encode_one+0x130>)
   1bc94:	4668      	mov	r0, sp
   1bc96:	f00d f97f 	bl	28f98 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "stksiz");
   1bc9a:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_stksize);
   1bc9c:	88ea      	ldrh	r2, [r5, #6]
   1bc9e:	2300      	movs	r3, #0
   1bca0:	4668      	mov	r0, sp
   1bca2:	f00d f8cc 	bl	28e3e <cbor_encode_uint>
   1bca6:	4304      	orrs	r4, r0
   1bca8:	2206      	movs	r2, #6
   1bcaa:	4923      	ldr	r1, [pc, #140]	; (1bd38 <os_mgmt_taskstat_encode_one+0x134>)
   1bcac:	4668      	mov	r0, sp
   1bcae:	f00d f973 	bl	28f98 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "cswcnt");
   1bcb2:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_cswcnt);
   1bcb4:	2700      	movs	r7, #0
   1bcb6:	68aa      	ldr	r2, [r5, #8]
   1bcb8:	463b      	mov	r3, r7
   1bcba:	4668      	mov	r0, sp
   1bcbc:	f00d f8bf 	bl	28e3e <cbor_encode_uint>
   1bcc0:	4304      	orrs	r4, r0
   1bcc2:	2207      	movs	r2, #7
   1bcc4:	491d      	ldr	r1, [pc, #116]	; (1bd3c <os_mgmt_taskstat_encode_one+0x138>)
   1bcc6:	4668      	mov	r0, sp
   1bcc8:	f00d f966 	bl	28f98 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "runtime");
   1bccc:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_runtime);
   1bcce:	68ea      	ldr	r2, [r5, #12]
   1bcd0:	463b      	mov	r3, r7
   1bcd2:	4668      	mov	r0, sp
   1bcd4:	f00d f8b3 	bl	28e3e <cbor_encode_uint>
   1bcd8:	4304      	orrs	r4, r0
   1bcda:	220c      	movs	r2, #12
   1bcdc:	4918      	ldr	r1, [pc, #96]	; (1bd40 <os_mgmt_taskstat_encode_one+0x13c>)
   1bcde:	4668      	mov	r0, sp
   1bce0:	f00d f95a 	bl	28f98 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "last_checkin");
   1bce4:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_last_checkin);
   1bce6:	692a      	ldr	r2, [r5, #16]
   1bce8:	463b      	mov	r3, r7
   1bcea:	4668      	mov	r0, sp
   1bcec:	f00d f8a7 	bl	28e3e <cbor_encode_uint>
   1bcf0:	4304      	orrs	r4, r0
   1bcf2:	220c      	movs	r2, #12
   1bcf4:	4913      	ldr	r1, [pc, #76]	; (1bd44 <os_mgmt_taskstat_encode_one+0x140>)
   1bcf6:	4668      	mov	r0, sp
   1bcf8:	f00d f94e 	bl	28f98 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "next_checkin");
   1bcfc:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_next_checkin);
   1bcfe:	696a      	ldr	r2, [r5, #20]
   1bd00:	463b      	mov	r3, r7
   1bd02:	4668      	mov	r0, sp
   1bd04:	f00d f89b 	bl	28e3e <cbor_encode_uint>
   1bd08:	4304      	orrs	r4, r0
    err |= cbor_encoder_close_container(encoder, &task_map);
   1bd0a:	4669      	mov	r1, sp
   1bd0c:	4630      	mov	r0, r6
   1bd0e:	f00d f964 	bl	28fda <cbor_encoder_close_container>
    if (err != 0) {
   1bd12:	ea54 0300 	orrs.w	r3, r4, r0
   1bd16:	d102      	bne.n	1bd1e <os_mgmt_taskstat_encode_one+0x11a>
    return 0;
   1bd18:	4638      	mov	r0, r7
}
   1bd1a:	b005      	add	sp, #20
   1bd1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1bd1e:	2002      	movs	r0, #2
   1bd20:	e7fb      	b.n	1bd1a <os_mgmt_taskstat_encode_one+0x116>
   1bd22:	bf00      	nop
   1bd24:	00030a88 	.word	0x00030a88
   1bd28:	00030a90 	.word	0x00030a90
   1bd2c:	00030a94 	.word	0x00030a94
   1bd30:	00030a9c 	.word	0x00030a9c
   1bd34:	00030aa4 	.word	0x00030aa4
   1bd38:	00030aac 	.word	0x00030aac
   1bd3c:	00030ab4 	.word	0x00030ab4
   1bd40:	00030abc 	.word	0x00030abc
   1bd44:	00030acc 	.word	0x00030acc

0001bd48 <os_mgmt_taskstat_read>:
{
   1bd48:	b570      	push	{r4, r5, r6, lr}
   1bd4a:	b092      	sub	sp, #72	; 0x48
   1bd4c:	4606      	mov	r6, r0
   1bd4e:	2205      	movs	r2, #5
   1bd50:	4918      	ldr	r1, [pc, #96]	; (1bdb4 <os_mgmt_taskstat_read+0x6c>)
   1bd52:	f00d f921 	bl	28f98 <cbor_encode_text_string>
   1bd56:	4604      	mov	r4, r0
    err |= cbor_encoder_create_map(&ctxt->encoder, &tasks_map,
   1bd58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bd5c:	4669      	mov	r1, sp
   1bd5e:	4630      	mov	r0, r6
   1bd60:	f00d f926 	bl	28fb0 <cbor_encoder_create_map>
    if (err != 0) {
   1bd64:	ea50 0304 	orrs.w	r3, r0, r4
   1bd68:	d11f      	bne.n	1bdaa <os_mgmt_taskstat_read+0x62>
    for (task_idx = 0; ; task_idx++) {
   1bd6a:	2500      	movs	r5, #0
   1bd6c:	e000      	b.n	1bd70 <os_mgmt_taskstat_read+0x28>
   1bd6e:	3501      	adds	r5, #1
        rc = os_mgmt_impl_task_info(task_idx, &task_info);
   1bd70:	a904      	add	r1, sp, #16
   1bd72:	4628      	mov	r0, r5
   1bd74:	f000 f883 	bl	1be7e <os_mgmt_impl_task_info>
   1bd78:	4604      	mov	r4, r0
        if (rc == MGMT_ERR_ENOENT) {
   1bd7a:	2805      	cmp	r0, #5
   1bd7c:	d00e      	beq.n	1bd9c <os_mgmt_taskstat_read+0x54>
        } else if (rc != 0) {
   1bd7e:	b950      	cbnz	r0, 1bd96 <os_mgmt_taskstat_read+0x4e>
        rc = os_mgmt_taskstat_encode_one(&tasks_map, &task_info);
   1bd80:	a904      	add	r1, sp, #16
   1bd82:	4668      	mov	r0, sp
   1bd84:	f7ff ff3e 	bl	1bc04 <os_mgmt_taskstat_encode_one>
        if (rc != 0) {
   1bd88:	4604      	mov	r4, r0
   1bd8a:	2800      	cmp	r0, #0
   1bd8c:	d0ef      	beq.n	1bd6e <os_mgmt_taskstat_read+0x26>
            cbor_encoder_close_container(&ctxt->encoder, &tasks_map);
   1bd8e:	4669      	mov	r1, sp
   1bd90:	4630      	mov	r0, r6
   1bd92:	f00d f922 	bl	28fda <cbor_encoder_close_container>
}
   1bd96:	4620      	mov	r0, r4
   1bd98:	b012      	add	sp, #72	; 0x48
   1bd9a:	bd70      	pop	{r4, r5, r6, pc}
    err = cbor_encoder_close_container(&ctxt->encoder, &tasks_map);
   1bd9c:	4669      	mov	r1, sp
   1bd9e:	4630      	mov	r0, r6
   1bda0:	f00d f91b 	bl	28fda <cbor_encoder_close_container>
    if (err != 0) {
   1bda4:	b918      	cbnz	r0, 1bdae <os_mgmt_taskstat_read+0x66>
    return 0;
   1bda6:	2400      	movs	r4, #0
   1bda8:	e7f5      	b.n	1bd96 <os_mgmt_taskstat_read+0x4e>
        return MGMT_ERR_ENOMEM;
   1bdaa:	2402      	movs	r4, #2
   1bdac:	e7f3      	b.n	1bd96 <os_mgmt_taskstat_read+0x4e>
        return MGMT_ERR_ENOMEM;
   1bdae:	2402      	movs	r4, #2
   1bdb0:	e7f1      	b.n	1bd96 <os_mgmt_taskstat_read+0x4e>
   1bdb2:	bf00      	nop
   1bdb4:	00030adc 	.word	0x00030adc

0001bdb8 <os_mgmt_echo>:
{
   1bdb8:	b530      	push	{r4, r5, lr}
   1bdba:	b0b9      	sub	sp, #228	; 0xe4
   1bdbc:	4604      	mov	r4, r0
    const struct cbor_attr_t attrs[2] = {
   1bdbe:	225c      	movs	r2, #92	; 0x5c
   1bdc0:	2100      	movs	r1, #0
   1bdc2:	a801      	add	r0, sp, #4
   1bdc4:	f7fa feab 	bl	16b1e <memset>
   1bdc8:	4b16      	ldr	r3, [pc, #88]	; (1be24 <os_mgmt_echo+0x6c>)
   1bdca:	9300      	str	r3, [sp, #0]
   1bdcc:	2304      	movs	r3, #4
   1bdce:	f88d 3004 	strb.w	r3, [sp, #4]
   1bdd2:	ab18      	add	r3, sp, #96	; 0x60
   1bdd4:	9302      	str	r3, [sp, #8]
   1bdd6:	2380      	movs	r3, #128	; 0x80
   1bdd8:	930a      	str	r3, [sp, #40]	; 0x28
   1bdda:	2301      	movs	r3, #1
   1bddc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    echo_buf[0] = '\0';
   1bde0:	2300      	movs	r3, #0
   1bde2:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    err = cbor_read_object(&ctxt->it, attrs);
   1bde6:	4669      	mov	r1, sp
   1bde8:	f104 001c 	add.w	r0, r4, #28
   1bdec:	f7fe ff1b 	bl	1ac26 <cbor_read_object>
    if (err != 0) {
   1bdf0:	b9a0      	cbnz	r0, 1be1c <os_mgmt_echo+0x64>
   1bdf2:	4605      	mov	r5, r0
   1bdf4:	2201      	movs	r2, #1
   1bdf6:	490c      	ldr	r1, [pc, #48]	; (1be28 <os_mgmt_echo+0x70>)
   1bdf8:	4620      	mov	r0, r4
   1bdfa:	f00d f8cd 	bl	28f98 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "r");
   1bdfe:	4305      	orrs	r5, r0
    err |= cbor_encode_text_string(&ctxt->encoder, echo_buf, strlen(echo_buf));
   1be00:	a818      	add	r0, sp, #96	; 0x60
   1be02:	f7fa feb4 	bl	16b6e <strlen>
   1be06:	4602      	mov	r2, r0
   1be08:	a918      	add	r1, sp, #96	; 0x60
   1be0a:	4620      	mov	r0, r4
   1be0c:	f00d f8c4 	bl	28f98 <cbor_encode_text_string>
    if (err != 0) {
   1be10:	ea55 0300 	orrs.w	r3, r5, r0
   1be14:	d104      	bne.n	1be20 <os_mgmt_echo+0x68>
    return 0;
   1be16:	2000      	movs	r0, #0
}
   1be18:	b039      	add	sp, #228	; 0xe4
   1be1a:	bd30      	pop	{r4, r5, pc}
        return MGMT_ERR_EINVAL;
   1be1c:	2003      	movs	r0, #3
   1be1e:	e7fb      	b.n	1be18 <os_mgmt_echo+0x60>
        return MGMT_ERR_ENOMEM;
   1be20:	2002      	movs	r0, #2
   1be22:	e7f9      	b.n	1be18 <os_mgmt_echo+0x60>
   1be24:	00030950 	.word	0x00030950
   1be28:	00030ae4 	.word	0x00030ae4

0001be2c <os_mgmt_register_group>:

void
os_mgmt_register_group(void)
{
   1be2c:	b508      	push	{r3, lr}
    mgmt_register_group(&os_mgmt_group);
   1be2e:	4802      	ldr	r0, [pc, #8]	; (1be38 <os_mgmt_register_group+0xc>)
   1be30:	f000 f938 	bl	1c0a4 <mgmt_register_group>
}
   1be34:	bd08      	pop	{r3, pc}
   1be36:	bf00      	nop
   1be38:	1000029c 	.word	0x1000029c

0001be3c <os_mgmt_module_init>:

void
os_mgmt_module_init(void)
{
   1be3c:	b508      	push	{r3, lr}
    os_mgmt_register_group();
   1be3e:	f7ff fff5 	bl	1be2c <os_mgmt_register_group>
}
   1be42:	bd08      	pop	{r3, pc}

0001be44 <mynewt_os_mgmt_task_at>:
    return oti.oti_stkusage;
}

static const struct os_task *
mynewt_os_mgmt_task_at(int idx)
{
   1be44:	4602      	mov	r2, r0
    const struct os_task *task;
    int i;

    task = STAILQ_FIRST(&g_os_task_list);
   1be46:	4b05      	ldr	r3, [pc, #20]	; (1be5c <mynewt_os_mgmt_task_at+0x18>)
   1be48:	6818      	ldr	r0, [r3, #0]
    for (i = 0; i < idx; i++) {
   1be4a:	2300      	movs	r3, #0
   1be4c:	4293      	cmp	r3, r2
   1be4e:	da03      	bge.n	1be58 <mynewt_os_mgmt_task_at+0x14>
        if (task == NULL) {
   1be50:	b110      	cbz	r0, 1be58 <mynewt_os_mgmt_task_at+0x14>
            break;
        }

        task = STAILQ_NEXT(task, t_os_task_list);
   1be52:	6c00      	ldr	r0, [r0, #64]	; 0x40
    for (i = 0; i < idx; i++) {
   1be54:	3301      	adds	r3, #1
   1be56:	e7f9      	b.n	1be4c <mynewt_os_mgmt_task_at+0x8>
    }

    return task;
}
   1be58:	4770      	bx	lr
   1be5a:	bf00      	nop
   1be5c:	10002f14 	.word	0x10002f14

0001be60 <mynewt_os_mgmt_stack_usage>:
{
   1be60:	b500      	push	{lr}
   1be62:	b08f      	sub	sp, #60	; 0x3c
    os_task_info_get(task, &oti);
   1be64:	4669      	mov	r1, sp
   1be66:	f7fa fb19 	bl	1649c <os_task_info_get>
}
   1be6a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1be6e:	b00f      	add	sp, #60	; 0x3c
   1be70:	f85d fb04 	ldr.w	pc, [sp], #4

0001be74 <mynewt_os_mgmt_reset_tmo>:
{
   1be74:	b508      	push	{r3, lr}
    hal_watchdog_tickle();
   1be76:	f010 fe71 	bl	2cb5c <hal_watchdog_tickle>
    hal_system_reset();
   1be7a:	f7f8 fbfb 	bl	14674 <hal_system_reset>

0001be7e <os_mgmt_impl_task_info>:

int
os_mgmt_impl_task_info(int idx, struct os_mgmt_task_info *out_info)
{
   1be7e:	b538      	push	{r3, r4, r5, lr}
   1be80:	460c      	mov	r4, r1
    const struct os_task *task;

    task = mynewt_os_mgmt_task_at(idx);
   1be82:	f7ff ffdf 	bl	1be44 <mynewt_os_mgmt_task_at>
    if (task == NULL) {
   1be86:	b1f0      	cbz	r0, 1bec6 <os_mgmt_impl_task_info+0x48>
   1be88:	4605      	mov	r5, r0
        return MGMT_ERR_ENOENT;
    }

    out_info->oti_prio = task->t_prio;
   1be8a:	7ac3      	ldrb	r3, [r0, #11]
   1be8c:	7023      	strb	r3, [r4, #0]
    out_info->oti_taskid = task->t_taskid;
   1be8e:	7a83      	ldrb	r3, [r0, #10]
   1be90:	7063      	strb	r3, [r4, #1]
    out_info->oti_state = task->t_state;
   1be92:	7b03      	ldrb	r3, [r0, #12]
   1be94:	70a3      	strb	r3, [r4, #2]
    out_info->oti_stkusage = mynewt_os_mgmt_stack_usage(task);
   1be96:	f7ff ffe3 	bl	1be60 <mynewt_os_mgmt_stack_usage>
   1be9a:	80a0      	strh	r0, [r4, #4]
    out_info->oti_stksize = task->t_stacksize;
   1be9c:	892b      	ldrh	r3, [r5, #8]
   1be9e:	80e3      	strh	r3, [r4, #6]
    out_info->oti_cswcnt = task->t_ctx_sw_cnt;
   1bea0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   1bea2:	60a3      	str	r3, [r4, #8]
    out_info->oti_runtime = task->t_run_time;
   1bea4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1bea6:	60e3      	str	r3, [r4, #12]
    out_info->oti_last_checkin = task->t_sanity_check.sc_checkin_last;
   1bea8:	6a2b      	ldr	r3, [r5, #32]
   1beaa:	6123      	str	r3, [r4, #16]
    out_info->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
                                 task->t_sanity_check.sc_checkin_itvl;
   1beac:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    out_info->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
   1beae:	4413      	add	r3, r2
   1beb0:	6163      	str	r3, [r4, #20]
    strncpy(out_info->oti_name, task->t_name, sizeof out_info->oti_name - 1);
   1beb2:	221f      	movs	r2, #31
   1beb4:	6929      	ldr	r1, [r5, #16]
   1beb6:	f104 0018 	add.w	r0, r4, #24
   1beba:	f011 fd07 	bl	2d8cc <strncpy>
    out_info->oti_name[sizeof out_info->oti_name - 1] = '\0';
   1bebe:	2000      	movs	r0, #0
   1bec0:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37

    return 0;
}
   1bec4:	bd38      	pop	{r3, r4, r5, pc}
        return MGMT_ERR_ENOENT;
   1bec6:	2005      	movs	r0, #5
   1bec8:	e7fc      	b.n	1bec4 <os_mgmt_impl_task_info+0x46>
	...

0001becc <os_mgmt_impl_reset>:

int
os_mgmt_impl_reset(unsigned int delay_ms)
{
   1becc:	b530      	push	{r4, r5, lr}
   1bece:	b085      	sub	sp, #20
   1bed0:	4604      	mov	r4, r0
#if MYNEWT_VAL(LOG_SOFT_RESET)
    struct log_reboot_info info = {
   1bed2:	2306      	movs	r3, #6
   1bed4:	f8ad 3000 	strh.w	r3, [sp]
   1bed8:	2300      	movs	r3, #0
   1beda:	9301      	str	r3, [sp, #4]
   1bedc:	9302      	str	r3, [sp, #8]
   1bede:	9303      	str	r3, [sp, #12]
        .file = NULL,
        .line = 0,
        .pc = 0,
    };

    if (img_mgmt_state_any_pending()) {
   1bee0:	f7ff f970 	bl	1b1c4 <img_mgmt_state_any_pending>
   1bee4:	b110      	cbz	r0, 1beec <os_mgmt_impl_reset+0x20>
        info.reason = HAL_RESET_DFU;
   1bee6:	2308      	movs	r3, #8
   1bee8:	f8ad 3000 	strh.w	r3, [sp]
    }
#endif
    os_callout_init(&mynewt_os_mgmt_reset_callout, os_eventq_dflt_get(),
   1beec:	f7f9 fb46 	bl	1557c <os_eventq_dflt_get>
   1bef0:	4601      	mov	r1, r0
   1bef2:	4d0a      	ldr	r5, [pc, #40]	; (1bf1c <os_mgmt_impl_reset+0x50>)
   1bef4:	2300      	movs	r3, #0
   1bef6:	4a0a      	ldr	r2, [pc, #40]	; (1bf20 <os_mgmt_impl_reset+0x54>)
   1bef8:	4628      	mov	r0, r5
   1befa:	f7f9 f901 	bl	15100 <os_callout_init>
                    mynewt_os_mgmt_reset_tmo, NULL);

#if MYNEWT_VAL(LOG_SOFT_RESET)
    log_reboot(&info);
   1befe:	4668      	mov	r0, sp
   1bf00:	f7fe f854 	bl	19fac <log_reboot>
#endif
    os_callout_reset(&mynewt_os_mgmt_reset_callout,
                     delay_ms * OS_TICKS_PER_SEC / 1000);
   1bf04:	01e4      	lsls	r4, r4, #7
   1bf06:	4907      	ldr	r1, [pc, #28]	; (1bf24 <os_mgmt_impl_reset+0x58>)
   1bf08:	fba1 3104 	umull	r3, r1, r1, r4
    os_callout_reset(&mynewt_os_mgmt_reset_callout,
   1bf0c:	0989      	lsrs	r1, r1, #6
   1bf0e:	4628      	mov	r0, r5
   1bf10:	f7f9 f922 	bl	15158 <os_callout_reset>

    return 0;
}
   1bf14:	2000      	movs	r0, #0
   1bf16:	b005      	add	sp, #20
   1bf18:	bd30      	pop	{r4, r5, pc}
   1bf1a:	bf00      	nop
   1bf1c:	10003444 	.word	0x10003444
   1bf20:	0001be75 	.word	0x0001be75
   1bf24:	10624dd3 	.word	0x10624dd3

0001bf28 <mynewt_stat_mgmt_walk_cb>:
}

static int
mynewt_stat_mgmt_walk_cb(struct stats_hdr *hdr, void *arg,
                         char *name, uint16_t off)
{
   1bf28:	b530      	push	{r4, r5, lr}
   1bf2a:	b085      	sub	sp, #20
    struct stat_mgmt_entry entry;
    void *stat_val;

    walk_arg = arg;

    stat_val = (uint8_t *)hdr + off;
   1bf2c:	18c5      	adds	r5, r0, r3
    switch (hdr->s_size) {
   1bf2e:	7904      	ldrb	r4, [r0, #4]
   1bf30:	2c04      	cmp	r4, #4
   1bf32:	d010      	beq.n	1bf56 <mynewt_stat_mgmt_walk_cb+0x2e>
   1bf34:	2c08      	cmp	r4, #8
   1bf36:	d013      	beq.n	1bf60 <mynewt_stat_mgmt_walk_cb+0x38>
   1bf38:	2c02      	cmp	r4, #2
   1bf3a:	d001      	beq.n	1bf40 <mynewt_stat_mgmt_walk_cb+0x18>
   1bf3c:	2001      	movs	r0, #1
   1bf3e:	e008      	b.n	1bf52 <mynewt_stat_mgmt_walk_cb+0x2a>
    case sizeof (uint16_t):
        entry.value = *(uint16_t *) stat_val;
   1bf40:	5ac4      	ldrh	r4, [r0, r3]
   1bf42:	2500      	movs	r5, #0
   1bf44:	e9cd 4502 	strd	r4, r5, [sp, #8]
        entry.value = *(uint64_t *) stat_val;
        break;
    default:
        return MGMT_ERR_EUNKNOWN;
    }
    entry.name = name;
   1bf48:	9200      	str	r2, [sp, #0]

    return walk_arg->cb(&entry, walk_arg->arg);
   1bf4a:	680b      	ldr	r3, [r1, #0]
   1bf4c:	6849      	ldr	r1, [r1, #4]
   1bf4e:	4668      	mov	r0, sp
   1bf50:	4798      	blx	r3
}
   1bf52:	b005      	add	sp, #20
   1bf54:	bd30      	pop	{r4, r5, pc}
        entry.value = *(uint32_t *) stat_val;
   1bf56:	58c3      	ldr	r3, [r0, r3]
   1bf58:	9302      	str	r3, [sp, #8]
   1bf5a:	2300      	movs	r3, #0
   1bf5c:	9303      	str	r3, [sp, #12]
        break;
   1bf5e:	e7f3      	b.n	1bf48 <mynewt_stat_mgmt_walk_cb+0x20>
        entry.value = *(uint64_t *) stat_val;
   1bf60:	e9d5 4500 	ldrd	r4, r5, [r5]
   1bf64:	e9cd 4502 	strd	r4, r5, [sp, #8]
        break;
   1bf68:	e7ee      	b.n	1bf48 <mynewt_stat_mgmt_walk_cb+0x20>
	...

0001bf6c <stat_mgmt_impl_get_group>:
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   1bf6c:	4b07      	ldr	r3, [pc, #28]	; (1bf8c <stat_mgmt_impl_get_group+0x20>)
   1bf6e:	681b      	ldr	r3, [r3, #0]
    i = 0;
   1bf70:	2200      	movs	r2, #0
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   1bf72:	b123      	cbz	r3, 1bf7e <stat_mgmt_impl_get_group+0x12>
        if (i == idx) {
   1bf74:	4282      	cmp	r2, r0
   1bf76:	d007      	beq.n	1bf88 <stat_mgmt_impl_get_group+0x1c>
        i++;
   1bf78:	3201      	adds	r2, #1
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   1bf7a:	689b      	ldr	r3, [r3, #8]
   1bf7c:	e7f9      	b.n	1bf72 <stat_mgmt_impl_get_group+0x6>
    rc = MGMT_ERR_ENOENT;
   1bf7e:	2005      	movs	r0, #5
    if (!rc) {
   1bf80:	b908      	cbnz	r0, 1bf86 <stat_mgmt_impl_get_group+0x1a>
        *out_name = cur->s_name;
   1bf82:	681b      	ldr	r3, [r3, #0]
   1bf84:	600b      	str	r3, [r1, #0]
}
   1bf86:	4770      	bx	lr
            rc = 0;
   1bf88:	2000      	movs	r0, #0
   1bf8a:	e7f9      	b.n	1bf80 <stat_mgmt_impl_get_group+0x14>
   1bf8c:	10000284 	.word	0x10000284

0001bf90 <stat_mgmt_impl_foreach_entry>:

int
stat_mgmt_impl_foreach_entry(const char *group_name,
                             stat_mgmt_foreach_entry_fn *cb,
                             void *arg)
{
   1bf90:	b530      	push	{r4, r5, lr}
   1bf92:	b083      	sub	sp, #12
   1bf94:	460d      	mov	r5, r1
   1bf96:	4614      	mov	r4, r2
    struct mynewt_stat_mgmt_walk_arg walk_arg;
    struct stats_hdr *hdr;

    hdr = stats_group_find(group_name);
   1bf98:	f7fe f934 	bl	1a204 <stats_group_find>
    if (hdr == NULL) {
   1bf9c:	b138      	cbz	r0, 1bfae <stat_mgmt_impl_foreach_entry+0x1e>
        return MGMT_ERR_ENOENT;
    }

    walk_arg = (struct mynewt_stat_mgmt_walk_arg) {
   1bf9e:	9500      	str	r5, [sp, #0]
   1bfa0:	9401      	str	r4, [sp, #4]
        .cb = cb,
        .arg = arg,
    };

    return stats_walk(hdr, mynewt_stat_mgmt_walk_cb, &walk_arg);
   1bfa2:	466a      	mov	r2, sp
   1bfa4:	4903      	ldr	r1, [pc, #12]	; (1bfb4 <stat_mgmt_impl_foreach_entry+0x24>)
   1bfa6:	f7fe f89f 	bl	1a0e8 <stats_walk>
}
   1bfaa:	b003      	add	sp, #12
   1bfac:	bd30      	pop	{r4, r5, pc}
        return MGMT_ERR_ENOENT;
   1bfae:	2005      	movs	r0, #5
   1bfb0:	e7fb      	b.n	1bfaa <stat_mgmt_impl_foreach_entry+0x1a>
   1bfb2:	bf00      	nop
   1bfb4:	0001bf29 	.word	0x0001bf29

0001bfb8 <stat_mgmt_module_init>:

void
stat_mgmt_module_init(void)
{
   1bfb8:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1bfba:	4b08      	ldr	r3, [pc, #32]	; (1bfdc <stat_mgmt_module_init+0x24>)
   1bfbc:	781b      	ldrb	r3, [r3, #0]
   1bfbe:	b113      	cbz	r3, 1bfc6 <stat_mgmt_module_init+0xe>

    stat_mgmt_register_group();
   1bfc0:	f013 f8d0 	bl	2f164 <stat_mgmt_register_group>
}
   1bfc4:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1bfc6:	f7f8 fb4d 	bl	14664 <hal_debugger_connected>
   1bfca:	b100      	cbz	r0, 1bfce <stat_mgmt_module_init+0x16>
   1bfcc:	be01      	bkpt	0x0001
   1bfce:	2300      	movs	r3, #0
   1bfd0:	461a      	mov	r2, r3
   1bfd2:	4619      	mov	r1, r3
   1bfd4:	4618      	mov	r0, r3
   1bfd6:	f7f8 fee5 	bl	14da4 <__assert_func>
   1bfda:	bf00      	nop
   1bfdc:	10003404 	.word	0x10003404

0001bfe0 <mgmt_find_group>:
    }
}

static struct mgmt_group *
mgmt_find_group(uint16_t group_id, uint16_t command_id)
{
   1bfe0:	4602      	mov	r2, r0
     * Find the group with the specified group id, if one exists
     * check the handler for the command id and make sure
     * that is not NULL. If that is not set, look for the group
     * with a command id that is set
     */
    for (group = mgmt_group_list; group != NULL; group = group->mg_next) {
   1bfe2:	4b12      	ldr	r3, [pc, #72]	; (1c02c <mgmt_find_group+0x4c>)
   1bfe4:	6818      	ldr	r0, [r3, #0]
   1bfe6:	b1f0      	cbz	r0, 1c026 <mgmt_find_group+0x46>
        if (group->mg_group_id == group_id) {
   1bfe8:	8943      	ldrh	r3, [r0, #10]
   1bfea:	4293      	cmp	r3, r2
   1bfec:	d016      	beq.n	1c01c <mgmt_find_group+0x3c>
    for (group = mgmt_group_list; group != NULL; group = group->mg_next) {
   1bfee:	6800      	ldr	r0, [r0, #0]
   1bff0:	e7f9      	b.n	1bfe6 <mgmt_find_group+0x6>
   1bff2:	6800      	ldr	r0, [r0, #0]
   1bff4:	b170      	cbz	r0, 1c014 <mgmt_find_group+0x34>
        if (group->mg_group_id == group_id) {
   1bff6:	8943      	ldrh	r3, [r0, #10]
   1bff8:	4293      	cmp	r3, r2
   1bffa:	d1fa      	bne.n	1bff2 <mgmt_find_group+0x12>
            if (command_id >= group->mg_handlers_count) {
   1bffc:	8903      	ldrh	r3, [r0, #8]
   1bffe:	428b      	cmp	r3, r1
   1c000:	d90a      	bls.n	1c018 <mgmt_find_group+0x38>
                return NULL;
            }

            if (!group->mg_handlers[command_id].mh_read &&
   1c002:	6843      	ldr	r3, [r0, #4]
   1c004:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
   1c008:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   1c00c:	b913      	cbnz	r3, 1c014 <mgmt_find_group+0x34>
                !group->mg_handlers[command_id].mh_write) {
   1c00e:	6863      	ldr	r3, [r4, #4]
            if (!group->mg_handlers[command_id].mh_read &&
   1c010:	2b00      	cmp	r3, #0
   1c012:	d0ee      	beq.n	1bff2 <mgmt_find_group+0x12>
            break;
        }
    }

    return group;
}
   1c014:	bc10      	pop	{r4}
   1c016:	4770      	bx	lr
                return NULL;
   1c018:	2000      	movs	r0, #0
   1c01a:	e7fb      	b.n	1c014 <mgmt_find_group+0x34>
            if (command_id >= group->mg_handlers_count) {
   1c01c:	8903      	ldrh	r3, [r0, #8]
   1c01e:	428b      	cmp	r3, r1
   1c020:	d902      	bls.n	1c028 <mgmt_find_group+0x48>
{
   1c022:	b410      	push	{r4}
   1c024:	e7ed      	b.n	1c002 <mgmt_find_group+0x22>
   1c026:	4770      	bx	lr
                return NULL;
   1c028:	2000      	movs	r0, #0
}
   1c02a:	4770      	bx	lr
   1c02c:	10003468 	.word	0x10003468

0001c030 <mgmt_streamer_alloc_rsp>:
{
   1c030:	b508      	push	{r3, lr}
   1c032:	4603      	mov	r3, r0
   1c034:	4608      	mov	r0, r1
    return streamer->cfg->alloc_rsp(req, streamer->cb_arg);
   1c036:	681a      	ldr	r2, [r3, #0]
   1c038:	6812      	ldr	r2, [r2, #0]
   1c03a:	6859      	ldr	r1, [r3, #4]
   1c03c:	4790      	blx	r2
}
   1c03e:	bd08      	pop	{r3, pc}

0001c040 <mgmt_streamer_trim_front>:
{
   1c040:	b510      	push	{r4, lr}
   1c042:	4603      	mov	r3, r0
   1c044:	4608      	mov	r0, r1
   1c046:	4611      	mov	r1, r2
    streamer->cfg->trim_front(buf, len, streamer->cb_arg);
   1c048:	681a      	ldr	r2, [r3, #0]
   1c04a:	6854      	ldr	r4, [r2, #4]
   1c04c:	685a      	ldr	r2, [r3, #4]
   1c04e:	47a0      	blx	r4
}
   1c050:	bd10      	pop	{r4, pc}

0001c052 <mgmt_streamer_reset_buf>:
{
   1c052:	b508      	push	{r3, lr}
   1c054:	4603      	mov	r3, r0
   1c056:	4608      	mov	r0, r1
    streamer->cfg->reset_buf(buf, streamer->cb_arg);
   1c058:	681a      	ldr	r2, [r3, #0]
   1c05a:	6892      	ldr	r2, [r2, #8]
   1c05c:	6859      	ldr	r1, [r3, #4]
   1c05e:	4790      	blx	r2
}
   1c060:	bd08      	pop	{r3, pc}

0001c062 <mgmt_streamer_write_at>:
{
   1c062:	b530      	push	{r4, r5, lr}
   1c064:	b083      	sub	sp, #12
    return streamer->cfg->write_at(streamer->writer, offset, data, len,
   1c066:	6804      	ldr	r4, [r0, #0]
   1c068:	68e4      	ldr	r4, [r4, #12]
   1c06a:	6845      	ldr	r5, [r0, #4]
   1c06c:	9500      	str	r5, [sp, #0]
   1c06e:	68c0      	ldr	r0, [r0, #12]
   1c070:	47a0      	blx	r4
}
   1c072:	b003      	add	sp, #12
   1c074:	bd30      	pop	{r4, r5, pc}

0001c076 <mgmt_streamer_init_reader>:
{
   1c076:	b508      	push	{r3, lr}
    return streamer->cfg->init_reader(streamer->reader, buf, streamer->cb_arg);
   1c078:	6803      	ldr	r3, [r0, #0]
   1c07a:	691b      	ldr	r3, [r3, #16]
   1c07c:	6842      	ldr	r2, [r0, #4]
   1c07e:	6880      	ldr	r0, [r0, #8]
   1c080:	4798      	blx	r3
}
   1c082:	bd08      	pop	{r3, pc}

0001c084 <mgmt_streamer_init_writer>:
{
   1c084:	b508      	push	{r3, lr}
    return streamer->cfg->init_writer(streamer->writer, buf, streamer->cb_arg);
   1c086:	6803      	ldr	r3, [r0, #0]
   1c088:	695b      	ldr	r3, [r3, #20]
   1c08a:	6842      	ldr	r2, [r0, #4]
   1c08c:	68c0      	ldr	r0, [r0, #12]
   1c08e:	4798      	blx	r3
}
   1c090:	bd08      	pop	{r3, pc}

0001c092 <mgmt_streamer_free_buf>:
{
   1c092:	b508      	push	{r3, lr}
   1c094:	4603      	mov	r3, r0
   1c096:	4608      	mov	r0, r1
    streamer->cfg->free_buf(buf, streamer->cb_arg);
   1c098:	681a      	ldr	r2, [r3, #0]
   1c09a:	6992      	ldr	r2, [r2, #24]
   1c09c:	6859      	ldr	r1, [r3, #4]
   1c09e:	4790      	blx	r2
}
   1c0a0:	bd08      	pop	{r3, pc}
	...

0001c0a4 <mgmt_register_group>:

void
mgmt_register_group(struct mgmt_group *group)
{
    if (mgmt_group_list_end == NULL) {
   1c0a4:	4b04      	ldr	r3, [pc, #16]	; (1c0b8 <mgmt_register_group+0x14>)
   1c0a6:	681b      	ldr	r3, [r3, #0]
   1c0a8:	b11b      	cbz	r3, 1c0b2 <mgmt_register_group+0xe>
        mgmt_group_list = group;
    } else {
        mgmt_group_list_end->mg_next = group;
   1c0aa:	6018      	str	r0, [r3, #0]
    }
    mgmt_group_list_end = group;
   1c0ac:	4b02      	ldr	r3, [pc, #8]	; (1c0b8 <mgmt_register_group+0x14>)
   1c0ae:	6018      	str	r0, [r3, #0]
}
   1c0b0:	4770      	bx	lr
        mgmt_group_list = group;
   1c0b2:	4b02      	ldr	r3, [pc, #8]	; (1c0bc <mgmt_register_group+0x18>)
   1c0b4:	6018      	str	r0, [r3, #0]
   1c0b6:	e7f9      	b.n	1c0ac <mgmt_register_group+0x8>
   1c0b8:	1000346c 	.word	0x1000346c
   1c0bc:	10003468 	.word	0x10003468

0001c0c0 <mgmt_find_handler>:

const struct mgmt_handler *
mgmt_find_handler(uint16_t group_id, uint16_t command_id)
{
   1c0c0:	b510      	push	{r4, lr}
   1c0c2:	460c      	mov	r4, r1
    const struct mgmt_group *group;

    group = mgmt_find_group(group_id, command_id);
   1c0c4:	f7ff ff8c 	bl	1bfe0 <mgmt_find_group>
    if (!group) {
   1c0c8:	4603      	mov	r3, r0
   1c0ca:	b110      	cbz	r0, 1c0d2 <mgmt_find_handler+0x12>
        return NULL;
    }

    return &group->mg_handlers[command_id];
   1c0cc:	6843      	ldr	r3, [r0, #4]
   1c0ce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
}
   1c0d2:	4618      	mov	r0, r3
   1c0d4:	bd10      	pop	{r4, pc}
	...

0001c0d8 <mgmt_write_rsp_status>:

int
mgmt_write_rsp_status(struct mgmt_ctxt *ctxt, int errcode)
{
   1c0d8:	b538      	push	{r3, r4, r5, lr}
   1c0da:	4604      	mov	r4, r0
   1c0dc:	460d      	mov	r5, r1
   1c0de:	2202      	movs	r2, #2
   1c0e0:	4905      	ldr	r1, [pc, #20]	; (1c0f8 <mgmt_write_rsp_status+0x20>)
   1c0e2:	f00c ff59 	bl	28f98 <cbor_encode_text_string>
    int rc;

    rc = cbor_encode_text_stringz(&ctxt->encoder, "rc");
    if (rc != 0) {
   1c0e6:	b100      	cbz	r0, 1c0ea <mgmt_write_rsp_status+0x12>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1c0e8:	bd38      	pop	{r3, r4, r5, pc}
    rc = cbor_encode_int(&ctxt->encoder, errcode);
   1c0ea:	462a      	mov	r2, r5
   1c0ec:	17eb      	asrs	r3, r5, #31
   1c0ee:	4620      	mov	r0, r4
   1c0f0:	f00c fedd 	bl	28eae <cbor_encode_int>
    if (rc != 0) {
   1c0f4:	e7f8      	b.n	1c0e8 <mgmt_write_rsp_status+0x10>
   1c0f6:	bf00      	nop
   1c0f8:	00030688 	.word	0x00030688

0001c0fc <mgmt_err_from_cbor>:

int
mgmt_err_from_cbor(int cbor_status)
{
    switch (cbor_status) {
   1c0fc:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   1c100:	d001      	beq.n	1c106 <mgmt_err_from_cbor+0xa>
   1c102:	b910      	cbnz	r0, 1c10a <mgmt_err_from_cbor+0xe>
   1c104:	4770      	bx	lr
        case CborNoError:           return MGMT_ERR_EOK;
        case CborErrorOutOfMemory:  return MGMT_ERR_ENOMEM;
   1c106:	2002      	movs	r0, #2
   1c108:	4770      	bx	lr
        default:                    return MGMT_ERR_EUNKNOWN;
   1c10a:	2001      	movs	r0, #1
    }
}
   1c10c:	4770      	bx	lr

0001c10e <mgmt_ctxt_init>:

int
mgmt_ctxt_init(struct mgmt_ctxt *ctxt, struct mgmt_streamer *streamer)
{
   1c10e:	b570      	push	{r4, r5, r6, lr}
   1c110:	4604      	mov	r4, r0
   1c112:	460d      	mov	r5, r1
    int rc;

    rc = cbor_parser_init(streamer->reader, 0, &ctxt->parser, &ctxt->it);
   1c114:	f100 031c 	add.w	r3, r0, #28
   1c118:	f100 0210 	add.w	r2, r0, #16
   1c11c:	2100      	movs	r1, #0
   1c11e:	68a8      	ldr	r0, [r5, #8]
   1c120:	f00d fa21 	bl	29566 <cbor_parser_init>
    if (rc != CborNoError) {
   1c124:	4606      	mov	r6, r0
   1c126:	b120      	cbz	r0, 1c132 <mgmt_ctxt_init+0x24>
        return mgmt_err_from_cbor(rc);
   1c128:	f7ff ffe8 	bl	1c0fc <mgmt_err_from_cbor>
   1c12c:	4606      	mov	r6, r0
    }

    cbor_encoder_init(&ctxt->encoder, streamer->writer, 0);

    return 0;
}
   1c12e:	4630      	mov	r0, r6
   1c130:	bd70      	pop	{r4, r5, r6, pc}
    cbor_encoder_init(&ctxt->encoder, streamer->writer, 0);
   1c132:	2200      	movs	r2, #0
   1c134:	68e9      	ldr	r1, [r5, #12]
   1c136:	4620      	mov	r0, r4
   1c138:	f00c fe7c 	bl	28e34 <cbor_encoder_init>
    return 0;
   1c13c:	e7f7      	b.n	1c12e <mgmt_ctxt_init+0x20>

0001c13e <mgmt_ntoh_hdr>:

void
mgmt_ntoh_hdr(struct mgmt_hdr *hdr)
{
    hdr->nh_len = ntohs(hdr->nh_len);
   1c13e:	8842      	ldrh	r2, [r0, #2]
   1c140:	0213      	lsls	r3, r2, #8
   1c142:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   1c146:	8043      	strh	r3, [r0, #2]
    hdr->nh_group = ntohs(hdr->nh_group);
   1c148:	8882      	ldrh	r2, [r0, #4]
   1c14a:	0213      	lsls	r3, r2, #8
   1c14c:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   1c150:	8083      	strh	r3, [r0, #4]
}
   1c152:	4770      	bx	lr

0001c154 <mgmt_hton_hdr>:

void
mgmt_hton_hdr(struct mgmt_hdr *hdr)
{
    hdr->nh_len = htons(hdr->nh_len);
   1c154:	8842      	ldrh	r2, [r0, #2]
   1c156:	0213      	lsls	r3, r2, #8
   1c158:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   1c15c:	8043      	strh	r3, [r0, #2]
    hdr->nh_group = htons(hdr->nh_group);
   1c15e:	8882      	ldrh	r2, [r0, #4]
   1c160:	0213      	lsls	r3, r2, #8
   1c162:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   1c166:	8083      	strh	r3, [r0, #4]
}
   1c168:	4770      	bx	lr
	...

0001c16c <mgmt_evt>:
    evt_cb = cb;
}

void
mgmt_evt(uint8_t opcode, uint16_t group, uint8_t id, void *arg)
{
   1c16c:	b510      	push	{r4, lr}
    if (evt_cb) {
   1c16e:	4c02      	ldr	r4, [pc, #8]	; (1c178 <mgmt_evt+0xc>)
   1c170:	6824      	ldr	r4, [r4, #0]
   1c172:	b104      	cbz	r4, 1c176 <mgmt_evt+0xa>
        evt_cb(opcode, group, id, arg);
   1c174:	47a0      	blx	r4
    }
}
   1c176:	bd10      	pop	{r4, pc}
   1c178:	10003464 	.word	0x10003464

0001c17c <smp_align4>:
static int
smp_align4(int x)
{
    int rem;

    rem = x % 4;
   1c17c:	4243      	negs	r3, r0
   1c17e:	f000 0203 	and.w	r2, r0, #3
   1c182:	f003 0303 	and.w	r3, r3, #3
   1c186:	bf58      	it	pl
   1c188:	425a      	negpl	r2, r3
    if (rem == 0) {
   1c18a:	f010 0f03 	tst.w	r0, #3
   1c18e:	d001      	beq.n	1c194 <smp_align4+0x18>
        return x;
    } else {
        return x - rem + 4;
   1c190:	1a80      	subs	r0, r0, r2
   1c192:	3004      	adds	r0, #4
    }
}
   1c194:	4770      	bx	lr

0001c196 <smp_rsp_op>:
 * Converts a request opcode to its corresponding response opcode.
 */
static uint8_t
smp_rsp_op(uint8_t req_op)
{
    if (req_op == MGMT_OP_READ) {
   1c196:	b908      	cbnz	r0, 1c19c <smp_rsp_op+0x6>
        return MGMT_OP_READ_RSP;
   1c198:	2001      	movs	r0, #1
   1c19a:	4770      	bx	lr
    } else {
        return MGMT_OP_WRITE_RSP;
   1c19c:	2003      	movs	r0, #3
    }
}
   1c19e:	4770      	bx	lr

0001c1a0 <smp_init_rsp_hdr>:

static void
smp_init_rsp_hdr(const struct mgmt_hdr *req_hdr, struct mgmt_hdr *rsp_hdr)
{
   1c1a0:	b570      	push	{r4, r5, r6, lr}
   1c1a2:	4605      	mov	r5, r0
   1c1a4:	460c      	mov	r4, r1
    *rsp_hdr = (struct mgmt_hdr) {
        .nh_len = 0,
        .nh_flags = 0,
        .nh_op = smp_rsp_op(req_hdr->nh_op),
   1c1a6:	7800      	ldrb	r0, [r0, #0]
   1c1a8:	f000 0007 	and.w	r0, r0, #7
   1c1ac:	f7ff fff3 	bl	1c196 <smp_rsp_op>
        .nh_group = req_hdr->nh_group,
   1c1b0:	88ae      	ldrh	r6, [r5, #4]
        .nh_seq = req_hdr->nh_seq,
   1c1b2:	79a9      	ldrb	r1, [r5, #6]
        .nh_id = req_hdr->nh_id,
   1c1b4:	79ea      	ldrb	r2, [r5, #7]
    *rsp_hdr = (struct mgmt_hdr) {
   1c1b6:	2300      	movs	r3, #0
   1c1b8:	6023      	str	r3, [r4, #0]
   1c1ba:	7823      	ldrb	r3, [r4, #0]
   1c1bc:	f360 0302 	bfi	r3, r0, #0, #3
   1c1c0:	7023      	strb	r3, [r4, #0]
   1c1c2:	80a6      	strh	r6, [r4, #4]
   1c1c4:	71a1      	strb	r1, [r4, #6]
   1c1c6:	71e2      	strb	r2, [r4, #7]
    };
}
   1c1c8:	bd70      	pop	{r4, r5, r6, pc}

0001c1ca <smp_read_hdr>:
static int
smp_read_hdr(struct smp_streamer *streamer, struct mgmt_hdr *dst_hdr)
{
    struct cbor_decoder_reader *reader;

    reader = streamer->mgmt_stmr.reader;
   1c1ca:	6880      	ldr	r0, [r0, #8]

    if (reader->message_size < sizeof *dst_hdr) {
   1c1cc:	6983      	ldr	r3, [r0, #24]
   1c1ce:	2b07      	cmp	r3, #7
   1c1d0:	d906      	bls.n	1c1e0 <smp_read_hdr+0x16>
{
   1c1d2:	b510      	push	{r4, lr}
        return MGMT_ERR_EINVAL;
    }

    reader->cpy(reader, (char *)dst_hdr, 0, sizeof *dst_hdr);
   1c1d4:	6944      	ldr	r4, [r0, #20]
   1c1d6:	2308      	movs	r3, #8
   1c1d8:	2200      	movs	r2, #0
   1c1da:	47a0      	blx	r4
    return 0;
   1c1dc:	2000      	movs	r0, #0
}
   1c1de:	bd10      	pop	{r4, pc}
        return MGMT_ERR_EINVAL;
   1c1e0:	2003      	movs	r0, #3
}
   1c1e2:	4770      	bx	lr

0001c1e4 <smp_handle_single_payload>:
 * @return                      A MGMT_ERR_[...] error code.
 */
static int
smp_handle_single_payload(struct mgmt_ctxt *cbuf,
                          const struct mgmt_hdr *req_hdr, bool *handler_found)
{
   1c1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c1e6:	b085      	sub	sp, #20
   1c1e8:	4605      	mov	r5, r0
   1c1ea:	460c      	mov	r4, r1
   1c1ec:	4616      	mov	r6, r2
    const struct mgmt_handler *handler;
    mgmt_handler_fn *handler_fn;
    struct CborEncoder payload_encoder;
    int rc;

    handler = mgmt_find_handler(req_hdr->nh_group, req_hdr->nh_id);
   1c1ee:	79c9      	ldrb	r1, [r1, #7]
   1c1f0:	88a0      	ldrh	r0, [r4, #4]
   1c1f2:	f7ff ff65 	bl	1c0c0 <mgmt_find_handler>
    if (handler == NULL) {
   1c1f6:	b370      	cbz	r0, 1c256 <smp_handle_single_payload+0x72>
   1c1f8:	4607      	mov	r7, r0
    }

    /* Begin response payload.  Response fields are inserted into the root
     * map as key value pairs.
     */
    rc = cbor_encoder_create_map(&cbuf->encoder, &payload_encoder,
   1c1fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c1fe:	4669      	mov	r1, sp
   1c200:	4628      	mov	r0, r5
   1c202:	f00c fed5 	bl	28fb0 <cbor_encoder_create_map>
                                 CborIndefiniteLength);
    rc = mgmt_err_from_cbor(rc);
   1c206:	f7ff ff79 	bl	1c0fc <mgmt_err_from_cbor>
    if (rc != 0) {
   1c20a:	4603      	mov	r3, r0
   1c20c:	b930      	cbnz	r0, 1c21c <smp_handle_single_payload+0x38>
        return rc;
    }

    switch (req_hdr->nh_op) {
   1c20e:	7823      	ldrb	r3, [r4, #0]
   1c210:	f013 0307 	ands.w	r3, r3, #7
   1c214:	d005      	beq.n	1c222 <smp_handle_single_payload+0x3e>
   1c216:	2b02      	cmp	r3, #2
   1c218:	d019      	beq.n	1c24e <smp_handle_single_payload+0x6a>
   1c21a:	2303      	movs	r3, #3
    }

    /* End response payload. */
    rc = cbor_encoder_close_container(&cbuf->encoder, &payload_encoder);
    return mgmt_err_from_cbor(rc);
}
   1c21c:	4618      	mov	r0, r3
   1c21e:	b005      	add	sp, #20
   1c220:	bdf0      	pop	{r4, r5, r6, r7, pc}
        handler_fn = handler->mh_read;
   1c222:	683f      	ldr	r7, [r7, #0]
    if (handler_fn) {
   1c224:	b1af      	cbz	r7, 1c252 <smp_handle_single_payload+0x6e>
        *handler_found = true;
   1c226:	2001      	movs	r0, #1
   1c228:	7030      	strb	r0, [r6, #0]
        mgmt_evt(MGMT_EVT_OP_CMD_RECV, req_hdr->nh_group, req_hdr->nh_id, NULL);
   1c22a:	2300      	movs	r3, #0
   1c22c:	79e2      	ldrb	r2, [r4, #7]
   1c22e:	88a1      	ldrh	r1, [r4, #4]
   1c230:	f7ff ff9c 	bl	1c16c <mgmt_evt>
        rc = handler_fn(cbuf);
   1c234:	4628      	mov	r0, r5
   1c236:	47b8      	blx	r7
    if (rc != 0) {
   1c238:	4603      	mov	r3, r0
   1c23a:	2800      	cmp	r0, #0
   1c23c:	d1ee      	bne.n	1c21c <smp_handle_single_payload+0x38>
    rc = cbor_encoder_close_container(&cbuf->encoder, &payload_encoder);
   1c23e:	4669      	mov	r1, sp
   1c240:	4628      	mov	r0, r5
   1c242:	f00c feca 	bl	28fda <cbor_encoder_close_container>
    return mgmt_err_from_cbor(rc);
   1c246:	f7ff ff59 	bl	1c0fc <mgmt_err_from_cbor>
   1c24a:	4603      	mov	r3, r0
   1c24c:	e7e6      	b.n	1c21c <smp_handle_single_payload+0x38>
        handler_fn = handler->mh_write;
   1c24e:	687f      	ldr	r7, [r7, #4]
        break;
   1c250:	e7e8      	b.n	1c224 <smp_handle_single_payload+0x40>
        rc = MGMT_ERR_ENOTSUP;
   1c252:	2308      	movs	r3, #8
        return rc;
   1c254:	e7e2      	b.n	1c21c <smp_handle_single_payload+0x38>
        return MGMT_ERR_ENOTSUP;
   1c256:	2308      	movs	r3, #8
   1c258:	e7e0      	b.n	1c21c <smp_handle_single_payload+0x38>

0001c25a <smp_write_hdr>:
{
   1c25a:	b508      	push	{r3, lr}
   1c25c:	460a      	mov	r2, r1
    rc = mgmt_streamer_write_at(&streamer->mgmt_stmr, 0, src_hdr,
   1c25e:	2308      	movs	r3, #8
   1c260:	2100      	movs	r1, #0
   1c262:	f7ff fefe 	bl	1c062 <mgmt_streamer_write_at>
    return mgmt_err_from_cbor(rc);
   1c266:	f7ff ff49 	bl	1c0fc <mgmt_err_from_cbor>
}
   1c26a:	bd08      	pop	{r3, pc}

0001c26c <smp_handle_single_req>:
 * @return                      A MGMT_ERR_[...] error code.
 */
static int
smp_handle_single_req(struct smp_streamer *streamer,
                      const struct mgmt_hdr *req_hdr, bool *handler_found)
{
   1c26c:	b570      	push	{r4, r5, r6, lr}
   1c26e:	b08e      	sub	sp, #56	; 0x38
   1c270:	4604      	mov	r4, r0
   1c272:	460d      	mov	r5, r1
   1c274:	4616      	mov	r6, r2
    struct mgmt_ctxt cbuf;
    struct mgmt_hdr rsp_hdr;
    int rc;

    rc = mgmt_ctxt_init(&cbuf, &streamer->mgmt_stmr);
   1c276:	4601      	mov	r1, r0
   1c278:	a803      	add	r0, sp, #12
   1c27a:	f7ff ff48 	bl	1c10e <mgmt_ctxt_init>
    if (rc != 0) {
   1c27e:	4603      	mov	r3, r0
   1c280:	b110      	cbz	r0, 1c288 <smp_handle_single_req+0x1c>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1c282:	4618      	mov	r0, r3
   1c284:	b00e      	add	sp, #56	; 0x38
   1c286:	bd70      	pop	{r4, r5, r6, pc}
    smp_init_rsp_hdr(req_hdr, &rsp_hdr);
   1c288:	a901      	add	r1, sp, #4
   1c28a:	4628      	mov	r0, r5
   1c28c:	f7ff ff88 	bl	1c1a0 <smp_init_rsp_hdr>
    rc = smp_write_hdr(streamer, &rsp_hdr);
   1c290:	a901      	add	r1, sp, #4
   1c292:	4620      	mov	r0, r4
   1c294:	f7ff ffe1 	bl	1c25a <smp_write_hdr>
    if (rc != 0) {
   1c298:	4603      	mov	r3, r0
   1c29a:	2800      	cmp	r0, #0
   1c29c:	d1f1      	bne.n	1c282 <smp_handle_single_req+0x16>
    rc = smp_handle_single_payload(&cbuf, req_hdr, handler_found);
   1c29e:	4632      	mov	r2, r6
   1c2a0:	4629      	mov	r1, r5
   1c2a2:	a803      	add	r0, sp, #12
   1c2a4:	f7ff ff9e 	bl	1c1e4 <smp_handle_single_payload>
    if (rc != 0) {
   1c2a8:	4603      	mov	r3, r0
   1c2aa:	2800      	cmp	r0, #0
   1c2ac:	d1e9      	bne.n	1c282 <smp_handle_single_req+0x16>
{   return encoder->writer->bytes_written; }
   1c2ae:	9b03      	ldr	r3, [sp, #12]
   1c2b0:	685b      	ldr	r3, [r3, #4]
    rsp_hdr.nh_len = cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE;
   1c2b2:	3b08      	subs	r3, #8
   1c2b4:	f8ad 3006 	strh.w	r3, [sp, #6]
    mgmt_hton_hdr(&rsp_hdr);
   1c2b8:	a801      	add	r0, sp, #4
   1c2ba:	f7ff ff4b 	bl	1c154 <mgmt_hton_hdr>
    rc = smp_write_hdr(streamer, &rsp_hdr);
   1c2be:	a901      	add	r1, sp, #4
   1c2c0:	4620      	mov	r0, r4
   1c2c2:	f7ff ffca 	bl	1c25a <smp_write_hdr>
   1c2c6:	4603      	mov	r3, r0
    if (rc != 0) {
   1c2c8:	e7db      	b.n	1c282 <smp_handle_single_req+0x16>

0001c2ca <smp_build_err_rsp>:
{
   1c2ca:	b570      	push	{r4, r5, r6, lr}
   1c2cc:	b092      	sub	sp, #72	; 0x48
   1c2ce:	4604      	mov	r4, r0
   1c2d0:	460d      	mov	r5, r1
   1c2d2:	4616      	mov	r6, r2
    rc = mgmt_ctxt_init(&cbuf, &streamer->mgmt_stmr);
   1c2d4:	4601      	mov	r1, r0
   1c2d6:	a803      	add	r0, sp, #12
   1c2d8:	f7ff ff19 	bl	1c10e <mgmt_ctxt_init>
    if (rc != 0) {
   1c2dc:	b108      	cbz	r0, 1c2e2 <smp_build_err_rsp+0x18>
}
   1c2de:	b012      	add	sp, #72	; 0x48
   1c2e0:	bd70      	pop	{r4, r5, r6, pc}
    smp_init_rsp_hdr(req_hdr, &rsp_hdr);
   1c2e2:	a901      	add	r1, sp, #4
   1c2e4:	4628      	mov	r0, r5
   1c2e6:	f7ff ff5b 	bl	1c1a0 <smp_init_rsp_hdr>
    rc = smp_write_hdr(streamer, &rsp_hdr);
   1c2ea:	a901      	add	r1, sp, #4
   1c2ec:	4620      	mov	r0, r4
   1c2ee:	f7ff ffb4 	bl	1c25a <smp_write_hdr>
    if (rc != 0) {
   1c2f2:	2800      	cmp	r0, #0
   1c2f4:	d1f3      	bne.n	1c2de <smp_build_err_rsp+0x14>
    rc = cbor_encoder_create_map(&cbuf.encoder, &map, CborIndefiniteLength);
   1c2f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c2fa:	a90e      	add	r1, sp, #56	; 0x38
   1c2fc:	a803      	add	r0, sp, #12
   1c2fe:	f00c fe57 	bl	28fb0 <cbor_encoder_create_map>
    if (rc != 0) {
   1c302:	2800      	cmp	r0, #0
   1c304:	d1eb      	bne.n	1c2de <smp_build_err_rsp+0x14>
    rc = mgmt_write_rsp_status(&cbuf, status);
   1c306:	4631      	mov	r1, r6
   1c308:	a803      	add	r0, sp, #12
   1c30a:	f7ff fee5 	bl	1c0d8 <mgmt_write_rsp_status>
    if (rc != 0) {
   1c30e:	2800      	cmp	r0, #0
   1c310:	d1e5      	bne.n	1c2de <smp_build_err_rsp+0x14>
    rc = cbor_encoder_close_container(&cbuf.encoder, &map);
   1c312:	a90e      	add	r1, sp, #56	; 0x38
   1c314:	a803      	add	r0, sp, #12
   1c316:	f00c fe60 	bl	28fda <cbor_encoder_close_container>
    if (rc != 0) {
   1c31a:	2800      	cmp	r0, #0
   1c31c:	d1df      	bne.n	1c2de <smp_build_err_rsp+0x14>
   1c31e:	9b03      	ldr	r3, [sp, #12]
   1c320:	685b      	ldr	r3, [r3, #4]
    rsp_hdr.nh_len = cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE;
   1c322:	3b08      	subs	r3, #8
   1c324:	f8ad 3006 	strh.w	r3, [sp, #6]
    mgmt_hton_hdr(&rsp_hdr);
   1c328:	a801      	add	r0, sp, #4
   1c32a:	f7ff ff13 	bl	1c154 <mgmt_hton_hdr>
    rc = smp_write_hdr(streamer, &rsp_hdr);
   1c32e:	a901      	add	r1, sp, #4
   1c330:	4620      	mov	r0, r4
   1c332:	f7ff ff92 	bl	1c25a <smp_write_hdr>
    if (rc != 0) {
   1c336:	e7d2      	b.n	1c2de <smp_build_err_rsp+0x14>

0001c338 <smp_on_err>:
 * @param status                The status to indicate in the error response.
 */
static void
smp_on_err(struct smp_streamer *streamer, const struct mgmt_hdr *req_hdr,
           void *req, void *rsp, int status)
{
   1c338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c33a:	4604      	mov	r4, r0
   1c33c:	460f      	mov	r7, r1
   1c33e:	4616      	mov	r6, r2
    int rc;

    /* Prefer the response buffer for holding the error response.  If no
     * response buffer was allocated, use the request buffer instead.
     */
    if (rsp == NULL) {
   1c340:	461d      	mov	r5, r3
   1c342:	b1e3      	cbz	r3, 1c37e <smp_on_err+0x46>
        rsp = req;
        req = NULL;
    }

    /* Clear the partial response from the buffer, if any. */
    mgmt_streamer_reset_buf(&streamer->mgmt_stmr, rsp);
   1c344:	4629      	mov	r1, r5
   1c346:	4620      	mov	r0, r4
   1c348:	f7ff fe83 	bl	1c052 <mgmt_streamer_reset_buf>
    mgmt_streamer_init_writer(&streamer->mgmt_stmr, rsp);
   1c34c:	4629      	mov	r1, r5
   1c34e:	4620      	mov	r0, r4
   1c350:	f7ff fe98 	bl	1c084 <mgmt_streamer_init_writer>

    /* Build and transmit the error response. */
    rc = smp_build_err_rsp(streamer, req_hdr, status);
   1c354:	9a06      	ldr	r2, [sp, #24]
   1c356:	4639      	mov	r1, r7
   1c358:	4620      	mov	r0, r4
   1c35a:	f7ff ffb6 	bl	1c2ca <smp_build_err_rsp>
    if (rc == 0) {
   1c35e:	b928      	cbnz	r0, 1c36c <smp_on_err+0x34>
        streamer->tx_rsp_cb(streamer, rsp, streamer->mgmt_stmr.cb_arg);
   1c360:	6923      	ldr	r3, [r4, #16]
   1c362:	6862      	ldr	r2, [r4, #4]
   1c364:	4629      	mov	r1, r5
   1c366:	4620      	mov	r0, r4
   1c368:	4798      	blx	r3
        rsp = NULL;
   1c36a:	2500      	movs	r5, #0
    }

    /* Free any extra buffers. */
    mgmt_streamer_free_buf(&streamer->mgmt_stmr, req);
   1c36c:	4631      	mov	r1, r6
   1c36e:	4620      	mov	r0, r4
   1c370:	f7ff fe8f 	bl	1c092 <mgmt_streamer_free_buf>
    mgmt_streamer_free_buf(&streamer->mgmt_stmr, rsp);
   1c374:	4629      	mov	r1, r5
   1c376:	4620      	mov	r0, r4
   1c378:	f7ff fe8b 	bl	1c092 <mgmt_streamer_free_buf>
}
   1c37c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        req = NULL;
   1c37e:	462e      	mov	r6, r5
        rsp = req;
   1c380:	4615      	mov	r5, r2
   1c382:	e7df      	b.n	1c344 <smp_on_err+0xc>

0001c384 <smp_process_request_packet>:
 *
 * @return                      0 on success, MGMT_ERR_[...] code on failure.
 */
int
smp_process_request_packet(struct smp_streamer *streamer, void *req)
{
   1c384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c388:	b086      	sub	sp, #24
   1c38a:	4604      	mov	r4, r0
   1c38c:	460e      	mov	r6, r1
    void *rsp;
    bool valid_hdr, handler_found;
    int rc;

    rsp = NULL;
    valid_hdr = true;
   1c38e:	e012      	b.n	1c3b6 <smp_process_request_packet+0x32>
            break;
        }

        /* Trim processed request to free up space for subsequent responses. */
        mgmt_streamer_trim_front(&streamer->mgmt_stmr, req,
                                 smp_align4(req_hdr.nh_len));
   1c390:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   1c394:	f7ff fef2 	bl	1c17c <smp_align4>
   1c398:	4602      	mov	r2, r0
        mgmt_streamer_trim_front(&streamer->mgmt_stmr, req,
   1c39a:	4631      	mov	r1, r6
   1c39c:	4620      	mov	r0, r4
   1c39e:	f7ff fe4f 	bl	1c040 <mgmt_streamer_trim_front>

        cmd_done_arg.err = MGMT_ERR_EOK;
   1c3a2:	2300      	movs	r3, #0
   1c3a4:	9303      	str	r3, [sp, #12]
        mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   1c3a6:	ab03      	add	r3, sp, #12
   1c3a8:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1c3ac:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1c3b0:	2003      	movs	r0, #3
   1c3b2:	f7ff fedb 	bl	1c16c <mgmt_evt>
        handler_found = false;
   1c3b6:	2300      	movs	r3, #0
   1c3b8:	f88d 300b 	strb.w	r3, [sp, #11]
        rc = mgmt_streamer_init_reader(&streamer->mgmt_stmr, req);
   1c3bc:	46a0      	mov	r8, r4
   1c3be:	4631      	mov	r1, r6
   1c3c0:	4620      	mov	r0, r4
   1c3c2:	f7ff fe58 	bl	1c076 <mgmt_streamer_init_reader>
        if (rc != 0) {
   1c3c6:	4605      	mov	r5, r0
   1c3c8:	bb60      	cbnz	r0, 1c424 <smp_process_request_packet+0xa0>
        rc = smp_read_hdr(streamer, &req_hdr);
   1c3ca:	a904      	add	r1, sp, #16
   1c3cc:	4620      	mov	r0, r4
   1c3ce:	f7ff fefc 	bl	1c1ca <smp_read_hdr>
        if (rc != 0) {
   1c3d2:	4605      	mov	r5, r0
   1c3d4:	bbb8      	cbnz	r0, 1c446 <smp_process_request_packet+0xc2>
        mgmt_ntoh_hdr(&req_hdr);
   1c3d6:	a804      	add	r0, sp, #16
   1c3d8:	f7ff feb1 	bl	1c13e <mgmt_ntoh_hdr>
        mgmt_streamer_trim_front(&streamer->mgmt_stmr, req, MGMT_HDR_SIZE);
   1c3dc:	2208      	movs	r2, #8
   1c3de:	4631      	mov	r1, r6
   1c3e0:	4620      	mov	r0, r4
   1c3e2:	f7ff fe2d 	bl	1c040 <mgmt_streamer_trim_front>
        rsp = mgmt_streamer_alloc_rsp(&streamer->mgmt_stmr, req);
   1c3e6:	4631      	mov	r1, r6
   1c3e8:	4620      	mov	r0, r4
   1c3ea:	f7ff fe21 	bl	1c030 <mgmt_streamer_alloc_rsp>
        if (rsp == NULL) {
   1c3ee:	4607      	mov	r7, r0
   1c3f0:	b360      	cbz	r0, 1c44c <smp_process_request_packet+0xc8>
        rc = mgmt_streamer_init_writer(&streamer->mgmt_stmr, rsp);
   1c3f2:	4601      	mov	r1, r0
   1c3f4:	4620      	mov	r0, r4
   1c3f6:	f7ff fe45 	bl	1c084 <mgmt_streamer_init_writer>
        if (rc != 0) {
   1c3fa:	4605      	mov	r5, r0
   1c3fc:	bb48      	cbnz	r0, 1c452 <smp_process_request_packet+0xce>
        rc = smp_handle_single_req(streamer, &req_hdr, &handler_found);
   1c3fe:	f10d 020b 	add.w	r2, sp, #11
   1c402:	a904      	add	r1, sp, #16
   1c404:	4620      	mov	r0, r4
   1c406:	f7ff ff31 	bl	1c26c <smp_handle_single_req>
        if (rc != 0) {
   1c40a:	4605      	mov	r5, r0
   1c40c:	bb18      	cbnz	r0, 1c456 <smp_process_request_packet+0xd2>
        rc = streamer->tx_rsp_cb(streamer, rsp, streamer->mgmt_stmr.cb_arg);
   1c40e:	6923      	ldr	r3, [r4, #16]
   1c410:	6862      	ldr	r2, [r4, #4]
   1c412:	4639      	mov	r1, r7
   1c414:	4620      	mov	r0, r4
   1c416:	4798      	blx	r3
        if (rc != 0) {
   1c418:	4605      	mov	r5, r0
   1c41a:	2800      	cmp	r0, #0
   1c41c:	d0b8      	beq.n	1c390 <smp_process_request_packet+0xc>
    valid_hdr = true;
   1c41e:	2301      	movs	r3, #1
        rsp = NULL;
   1c420:	2700      	movs	r7, #0
   1c422:	e001      	b.n	1c428 <smp_process_request_packet+0xa4>
            valid_hdr = false;
   1c424:	2300      	movs	r3, #0
   1c426:	461f      	mov	r7, r3
                 &cmd_done_arg);
    }

    if (rc != 0 && valid_hdr) {
   1c428:	b105      	cbz	r5, 1c42c <smp_process_request_packet+0xa8>
   1c42a:	b9b3      	cbnz	r3, 1c45a <smp_process_request_packet+0xd6>
        }

        return rc;
    }

    mgmt_streamer_free_buf(&streamer->mgmt_stmr, req);
   1c42c:	4631      	mov	r1, r6
   1c42e:	4640      	mov	r0, r8
   1c430:	f7ff fe2f 	bl	1c092 <mgmt_streamer_free_buf>
    mgmt_streamer_free_buf(&streamer->mgmt_stmr, rsp);
   1c434:	4639      	mov	r1, r7
   1c436:	4640      	mov	r0, r8
   1c438:	f7ff fe2b 	bl	1c092 <mgmt_streamer_free_buf>
    return 0;
   1c43c:	2500      	movs	r5, #0
}
   1c43e:	4628      	mov	r0, r5
   1c440:	b006      	add	sp, #24
   1c442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            valid_hdr = false;
   1c446:	2300      	movs	r3, #0
   1c448:	461f      	mov	r7, r3
   1c44a:	e7ed      	b.n	1c428 <smp_process_request_packet+0xa4>
            rc = MGMT_ERR_ENOMEM;
   1c44c:	2502      	movs	r5, #2
    valid_hdr = true;
   1c44e:	2301      	movs	r3, #1
   1c450:	e7ea      	b.n	1c428 <smp_process_request_packet+0xa4>
   1c452:	2301      	movs	r3, #1
   1c454:	e7e8      	b.n	1c428 <smp_process_request_packet+0xa4>
   1c456:	2301      	movs	r3, #1
   1c458:	e7e6      	b.n	1c428 <smp_process_request_packet+0xa4>
        smp_on_err(streamer, &req_hdr, req, rsp, rc);
   1c45a:	9500      	str	r5, [sp, #0]
   1c45c:	463b      	mov	r3, r7
   1c45e:	4632      	mov	r2, r6
   1c460:	a904      	add	r1, sp, #16
   1c462:	4620      	mov	r0, r4
   1c464:	f7ff ff68 	bl	1c338 <smp_on_err>
        if (handler_found) {
   1c468:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1c46c:	2b00      	cmp	r3, #0
   1c46e:	d0e6      	beq.n	1c43e <smp_process_request_packet+0xba>
            cmd_done_arg.err = rc;
   1c470:	9503      	str	r5, [sp, #12]
            mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   1c472:	ab03      	add	r3, sp, #12
   1c474:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1c478:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1c47c:	2003      	movs	r0, #3
   1c47e:	f7ff fe75 	bl	1c16c <mgmt_evt>
        return rc;
   1c482:	e7dc      	b.n	1c43e <smp_process_request_packet+0xba>

0001c484 <ull_to_s>:
#include <stdbool.h>
#include "util/mcumgr_util.h"

int
ull_to_s(unsigned long long val, int dst_max_len, char *dst)
{
   1c484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c488:	4604      	mov	r4, r0
   1c48a:	460d      	mov	r5, r1
   1c48c:	4699      	mov	r9, r3
    int digit;
    int off;
    int len;

    /* First, calculate the length of the resulting string. */
    copy = val;
   1c48e:	4601      	mov	r1, r0
    for (len = 0; copy != 0; len++) {
   1c490:	f04f 0800 	mov.w	r8, #0
   1c494:	b131      	cbz	r1, 1c4a4 <ull_to_s+0x20>
        copy /= 10;
   1c496:	4b19      	ldr	r3, [pc, #100]	; (1c4fc <ull_to_s+0x78>)
   1c498:	fba3 3101 	umull	r3, r1, r3, r1
   1c49c:	08c9      	lsrs	r1, r1, #3
    for (len = 0; copy != 0; len++) {
   1c49e:	f108 0801 	add.w	r8, r8, #1
   1c4a2:	e7f7      	b.n	1c494 <ull_to_s+0x10>
    }

    /* A value of 0 still requires one character ("0"). */
    if (len == 0) {
   1c4a4:	f1b8 0f00 	cmp.w	r8, #0
   1c4a8:	d101      	bne.n	1c4ae <ull_to_s+0x2a>
        len = 1;
   1c4aa:	f04f 0801 	mov.w	r8, #1
    }

    /* Ensure the buffer can accommodate the string and terminator. */
    if (len >= dst_max_len - 1) {
   1c4ae:	3a01      	subs	r2, #1
   1c4b0:	4542      	cmp	r2, r8
   1c4b2:	dd20      	ble.n	1c4f6 <ull_to_s+0x72>
        return -1;
    }

    /* Encode the string from right to left. */
    off = len;
    dst[off--] = '\0';
   1c4b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   1c4b8:	2300      	movs	r3, #0
   1c4ba:	f809 3008 	strb.w	r3, [r9, r8]
    do {
        digit = val % 10;
   1c4be:	220a      	movs	r2, #10
   1c4c0:	2300      	movs	r3, #0
   1c4c2:	4620      	mov	r0, r4
   1c4c4:	4629      	mov	r1, r5
   1c4c6:	f7f7 fed1 	bl	1426c <__aeabi_uldivmod>
        dst[off--] = '0' + digit;
   1c4ca:	3230      	adds	r2, #48	; 0x30
   1c4cc:	f809 200a 	strb.w	r2, [r9, sl]
   1c4d0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff

        val /= 10;
   1c4d4:	4626      	mov	r6, r4
   1c4d6:	462f      	mov	r7, r5
   1c4d8:	220a      	movs	r2, #10
   1c4da:	2300      	movs	r3, #0
   1c4dc:	4620      	mov	r0, r4
   1c4de:	4629      	mov	r1, r5
   1c4e0:	f7f7 fec4 	bl	1426c <__aeabi_uldivmod>
   1c4e4:	4604      	mov	r4, r0
   1c4e6:	460d      	mov	r5, r1
    } while (val > 0);
   1c4e8:	2f00      	cmp	r7, #0
   1c4ea:	bf08      	it	eq
   1c4ec:	2e0a      	cmpeq	r6, #10
   1c4ee:	d2e6      	bcs.n	1c4be <ull_to_s+0x3a>

    return len;
}
   1c4f0:	4640      	mov	r0, r8
   1c4f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return -1;
   1c4f6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1c4fa:	e7f9      	b.n	1c4f0 <ull_to_s+0x6c>
   1c4fc:	cccccccd 	.word	0xcccccccd

0001c500 <ble_att_rx_dispatch_entry_find>:
    STATS_NAME(ble_att_stats, write_cmd_tx)
STATS_NAME_END(ble_att_stats)

static const struct ble_att_rx_dispatch_entry *
ble_att_rx_dispatch_entry_find(uint8_t op)
{
   1c500:	4601      	mov	r1, r0
    const struct ble_att_rx_dispatch_entry *entry;
    int i;

    for (i = 0; i < BLE_ATT_RX_DISPATCH_SZ; i++) {
   1c502:	2300      	movs	r3, #0
   1c504:	2b1a      	cmp	r3, #26
   1c506:	d809      	bhi.n	1c51c <ble_att_rx_dispatch_entry_find+0x1c>
        entry = ble_att_rx_dispatch + i;
   1c508:	4a06      	ldr	r2, [pc, #24]	; (1c524 <ble_att_rx_dispatch_entry_find+0x24>)
   1c50a:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
        if (entry->bde_op == op) {
   1c50e:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   1c512:	428a      	cmp	r2, r1
   1c514:	d005      	beq.n	1c522 <ble_att_rx_dispatch_entry_find+0x22>
            return entry;
        }

        if (entry->bde_op > op) {
   1c516:	d803      	bhi.n	1c520 <ble_att_rx_dispatch_entry_find+0x20>
    for (i = 0; i < BLE_ATT_RX_DISPATCH_SZ; i++) {
   1c518:	3301      	adds	r3, #1
   1c51a:	e7f3      	b.n	1c504 <ble_att_rx_dispatch_entry_find+0x4>
            break;
        }
    }

    return NULL;
   1c51c:	2000      	movs	r0, #0
   1c51e:	4770      	bx	lr
   1c520:	2000      	movs	r0, #0
}
   1c522:	4770      	bx	lr
   1c524:	00030b20 	.word	0x00030b20

0001c528 <ble_att_inc_rx_stat>:
}

static void
ble_att_inc_rx_stat(uint8_t att_op)
{
    switch (att_op) {
   1c528:	3801      	subs	r0, #1
   1c52a:	2851      	cmp	r0, #81	; 0x51
   1c52c:	f200 80f2 	bhi.w	1c714 <ble_att_inc_rx_stat+0x1ec>
   1c530:	e8df f010 	tbh	[pc, r0, lsl #1]
   1c534:	00570052 	.word	0x00570052
   1c538:	0061005c 	.word	0x0061005c
   1c53c:	006b0066 	.word	0x006b0066
   1c540:	00750070 	.word	0x00750070
   1c544:	007f007a 	.word	0x007f007a
   1c548:	00890084 	.word	0x00890084
   1c54c:	0093008e 	.word	0x0093008e
   1c550:	009d0098 	.word	0x009d0098
   1c554:	00ab00a4 	.word	0x00ab00a4
   1c558:	00f000b2 	.word	0x00f000b2
   1c55c:	00b900f0 	.word	0x00b900f0
   1c560:	00c700c0 	.word	0x00c700c0
   1c564:	00f000ce 	.word	0x00f000ce
   1c568:	00f000d5 	.word	0x00f000d5
   1c56c:	00e300dc 	.word	0x00e300dc
   1c570:	00f000f0 	.word	0x00f000f0
   1c574:	00f000f0 	.word	0x00f000f0
   1c578:	00f000f0 	.word	0x00f000f0
   1c57c:	00f000f0 	.word	0x00f000f0
   1c580:	00f000f0 	.word	0x00f000f0
   1c584:	00f000f0 	.word	0x00f000f0
   1c588:	00f000f0 	.word	0x00f000f0
   1c58c:	00f000f0 	.word	0x00f000f0
   1c590:	00f000f0 	.word	0x00f000f0
   1c594:	00f000f0 	.word	0x00f000f0
   1c598:	00f000f0 	.word	0x00f000f0
   1c59c:	00f000f0 	.word	0x00f000f0
   1c5a0:	00f000f0 	.word	0x00f000f0
   1c5a4:	00f000f0 	.word	0x00f000f0
   1c5a8:	00f000f0 	.word	0x00f000f0
   1c5ac:	00f000f0 	.word	0x00f000f0
   1c5b0:	00f000f0 	.word	0x00f000f0
   1c5b4:	00f000f0 	.word	0x00f000f0
   1c5b8:	00f000f0 	.word	0x00f000f0
   1c5bc:	00f000f0 	.word	0x00f000f0
   1c5c0:	00f000f0 	.word	0x00f000f0
   1c5c4:	00f000f0 	.word	0x00f000f0
   1c5c8:	00f000f0 	.word	0x00f000f0
   1c5cc:	00f000f0 	.word	0x00f000f0
   1c5d0:	00f000f0 	.word	0x00f000f0
   1c5d4:	00ea00f0 	.word	0x00ea00f0
    case BLE_ATT_OP_ERROR_RSP:
        STATS_INC(ble_att_stats, error_rsp_rx);
   1c5d8:	4a4f      	ldr	r2, [pc, #316]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c5da:	68d3      	ldr	r3, [r2, #12]
   1c5dc:	3301      	adds	r3, #1
   1c5de:	60d3      	str	r3, [r2, #12]
        break;
   1c5e0:	4770      	bx	lr

    case BLE_ATT_OP_MTU_REQ:
        STATS_INC(ble_att_stats, mtu_req_rx);
   1c5e2:	4a4d      	ldr	r2, [pc, #308]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c5e4:	6953      	ldr	r3, [r2, #20]
   1c5e6:	3301      	adds	r3, #1
   1c5e8:	6153      	str	r3, [r2, #20]
        break;
   1c5ea:	4770      	bx	lr

    case BLE_ATT_OP_MTU_RSP:
        STATS_INC(ble_att_stats, mtu_rsp_rx);
   1c5ec:	4a4a      	ldr	r2, [pc, #296]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c5ee:	69d3      	ldr	r3, [r2, #28]
   1c5f0:	3301      	adds	r3, #1
   1c5f2:	61d3      	str	r3, [r2, #28]
        break;
   1c5f4:	4770      	bx	lr

    case BLE_ATT_OP_FIND_INFO_REQ:
        STATS_INC(ble_att_stats, find_info_req_rx);
   1c5f6:	4a48      	ldr	r2, [pc, #288]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c5f8:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1c5fa:	3301      	adds	r3, #1
   1c5fc:	6253      	str	r3, [r2, #36]	; 0x24
        break;
   1c5fe:	4770      	bx	lr

    case BLE_ATT_OP_FIND_INFO_RSP:
        STATS_INC(ble_att_stats, find_info_rsp_rx);
   1c600:	4a45      	ldr	r2, [pc, #276]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c602:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1c604:	3301      	adds	r3, #1
   1c606:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
   1c608:	4770      	bx	lr

    case BLE_ATT_OP_FIND_TYPE_VALUE_REQ:
        STATS_INC(ble_att_stats, find_type_value_req_rx);
   1c60a:	4a43      	ldr	r2, [pc, #268]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c60c:	6b53      	ldr	r3, [r2, #52]	; 0x34
   1c60e:	3301      	adds	r3, #1
   1c610:	6353      	str	r3, [r2, #52]	; 0x34
        break;
   1c612:	4770      	bx	lr

    case BLE_ATT_OP_FIND_TYPE_VALUE_RSP:
        STATS_INC(ble_att_stats, find_type_value_rsp_rx);
   1c614:	4a40      	ldr	r2, [pc, #256]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c616:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1c618:	3301      	adds	r3, #1
   1c61a:	63d3      	str	r3, [r2, #60]	; 0x3c
        break;
   1c61c:	4770      	bx	lr

    case BLE_ATT_OP_READ_TYPE_REQ:
        STATS_INC(ble_att_stats, read_type_req_rx);
   1c61e:	4a3e      	ldr	r2, [pc, #248]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c620:	6c53      	ldr	r3, [r2, #68]	; 0x44
   1c622:	3301      	adds	r3, #1
   1c624:	6453      	str	r3, [r2, #68]	; 0x44
        break;
   1c626:	4770      	bx	lr

    case BLE_ATT_OP_READ_TYPE_RSP:
        STATS_INC(ble_att_stats, read_type_rsp_rx);
   1c628:	4a3b      	ldr	r2, [pc, #236]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c62a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1c62c:	3301      	adds	r3, #1
   1c62e:	64d3      	str	r3, [r2, #76]	; 0x4c
        break;
   1c630:	4770      	bx	lr

    case BLE_ATT_OP_READ_REQ:
        STATS_INC(ble_att_stats, read_req_rx);
   1c632:	4a39      	ldr	r2, [pc, #228]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c634:	6d53      	ldr	r3, [r2, #84]	; 0x54
   1c636:	3301      	adds	r3, #1
   1c638:	6553      	str	r3, [r2, #84]	; 0x54
        break;
   1c63a:	4770      	bx	lr

    case BLE_ATT_OP_READ_RSP:
        STATS_INC(ble_att_stats, read_rsp_rx);
   1c63c:	4a36      	ldr	r2, [pc, #216]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c63e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1c640:	3301      	adds	r3, #1
   1c642:	65d3      	str	r3, [r2, #92]	; 0x5c
        break;
   1c644:	4770      	bx	lr

    case BLE_ATT_OP_READ_BLOB_REQ:
        STATS_INC(ble_att_stats, read_blob_req_rx);
   1c646:	4a34      	ldr	r2, [pc, #208]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c648:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1c64a:	3301      	adds	r3, #1
   1c64c:	6653      	str	r3, [r2, #100]	; 0x64
        break;
   1c64e:	4770      	bx	lr

    case BLE_ATT_OP_READ_BLOB_RSP:
        STATS_INC(ble_att_stats, read_blob_rsp_rx);
   1c650:	4a31      	ldr	r2, [pc, #196]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c652:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1c654:	3301      	adds	r3, #1
   1c656:	66d3      	str	r3, [r2, #108]	; 0x6c
        break;
   1c658:	4770      	bx	lr

    case BLE_ATT_OP_READ_MULT_REQ:
        STATS_INC(ble_att_stats, read_mult_req_rx);
   1c65a:	4a2f      	ldr	r2, [pc, #188]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c65c:	6f53      	ldr	r3, [r2, #116]	; 0x74
   1c65e:	3301      	adds	r3, #1
   1c660:	6753      	str	r3, [r2, #116]	; 0x74
        break;
   1c662:	4770      	bx	lr

    case BLE_ATT_OP_READ_MULT_RSP:
        STATS_INC(ble_att_stats, read_mult_rsp_rx);
   1c664:	4a2c      	ldr	r2, [pc, #176]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c666:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   1c668:	3301      	adds	r3, #1
   1c66a:	67d3      	str	r3, [r2, #124]	; 0x7c
        break;
   1c66c:	4770      	bx	lr

    case BLE_ATT_OP_READ_GROUP_TYPE_REQ:
        STATS_INC(ble_att_stats, read_group_type_req_rx);
   1c66e:	4a2a      	ldr	r2, [pc, #168]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c670:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1c674:	3301      	adds	r3, #1
   1c676:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        break;
   1c67a:	4770      	bx	lr

    case BLE_ATT_OP_READ_GROUP_TYPE_RSP:
        STATS_INC(ble_att_stats, read_group_type_rsp_rx);
   1c67c:	4a26      	ldr	r2, [pc, #152]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c67e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   1c682:	3301      	adds	r3, #1
   1c684:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        break;
   1c688:	4770      	bx	lr

    case BLE_ATT_OP_WRITE_REQ:
        STATS_INC(ble_att_stats, write_req_rx);
   1c68a:	4a23      	ldr	r2, [pc, #140]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c68c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   1c690:	3301      	adds	r3, #1
   1c692:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        break;
   1c696:	4770      	bx	lr

    case BLE_ATT_OP_WRITE_RSP:
        STATS_INC(ble_att_stats, write_rsp_rx);
   1c698:	4a1f      	ldr	r2, [pc, #124]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c69a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1c69e:	3301      	adds	r3, #1
   1c6a0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
        break;
   1c6a4:	4770      	bx	lr

    case BLE_ATT_OP_PREP_WRITE_REQ:
        STATS_INC(ble_att_stats, prep_write_req_rx);
   1c6a6:	4a1c      	ldr	r2, [pc, #112]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c6a8:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
   1c6ac:	3301      	adds	r3, #1
   1c6ae:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
        break;
   1c6b2:	4770      	bx	lr

    case BLE_ATT_OP_PREP_WRITE_RSP:
        STATS_INC(ble_att_stats, prep_write_rsp_rx);
   1c6b4:	4a18      	ldr	r2, [pc, #96]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c6b6:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
   1c6ba:	3301      	adds	r3, #1
   1c6bc:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
        break;
   1c6c0:	4770      	bx	lr

    case BLE_ATT_OP_EXEC_WRITE_REQ:
        STATS_INC(ble_att_stats, exec_write_req_rx);
   1c6c2:	4a15      	ldr	r2, [pc, #84]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c6c4:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
   1c6c8:	3301      	adds	r3, #1
   1c6ca:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
        break;
   1c6ce:	4770      	bx	lr

    case BLE_ATT_OP_EXEC_WRITE_RSP:
        STATS_INC(ble_att_stats, exec_write_rsp_rx);
   1c6d0:	4a11      	ldr	r2, [pc, #68]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c6d2:	f8d2 30bc 	ldr.w	r3, [r2, #188]	; 0xbc
   1c6d6:	3301      	adds	r3, #1
   1c6d8:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
        break;
   1c6dc:	4770      	bx	lr

    case BLE_ATT_OP_NOTIFY_REQ:
        STATS_INC(ble_att_stats, notify_req_rx);
   1c6de:	4a0e      	ldr	r2, [pc, #56]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c6e0:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
   1c6e4:	3301      	adds	r3, #1
   1c6e6:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
        break;
   1c6ea:	4770      	bx	lr

    case BLE_ATT_OP_INDICATE_REQ:
        STATS_INC(ble_att_stats, indicate_req_rx);
   1c6ec:	4a0a      	ldr	r2, [pc, #40]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c6ee:	f8d2 30cc 	ldr.w	r3, [r2, #204]	; 0xcc
   1c6f2:	3301      	adds	r3, #1
   1c6f4:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
        break;
   1c6f8:	4770      	bx	lr

    case BLE_ATT_OP_INDICATE_RSP:
        STATS_INC(ble_att_stats, indicate_rsp_rx);
   1c6fa:	4a07      	ldr	r2, [pc, #28]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c6fc:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
   1c700:	3301      	adds	r3, #1
   1c702:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
        break;
   1c706:	4770      	bx	lr

    case BLE_ATT_OP_WRITE_CMD:
        STATS_INC(ble_att_stats, write_cmd_rx);
   1c708:	4a03      	ldr	r2, [pc, #12]	; (1c718 <ble_att_inc_rx_stat+0x1f0>)
   1c70a:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   1c70e:	3301      	adds	r3, #1
   1c710:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
        break;

    default:
        break;
    }
}
   1c714:	4770      	bx	lr
   1c716:	bf00      	nop
   1c718:	10003474 	.word	0x10003474

0001c71c <ble_att_rx_handle_unknown_request>:
static void
ble_att_rx_handle_unknown_request(uint8_t op, uint16_t conn_handle,
                                  struct os_mbuf **om)
{
    /* If this is command (bit6 is set to 1), do nothing */
    if (op & 0x40) {
   1c71c:	f010 0f40 	tst.w	r0, #64	; 0x40
   1c720:	d000      	beq.n	1c724 <ble_att_rx_handle_unknown_request+0x8>
   1c722:	4770      	bx	lr
{
   1c724:	b570      	push	{r4, r5, r6, lr}
   1c726:	b082      	sub	sp, #8
   1c728:	4604      	mov	r4, r0
   1c72a:	460e      	mov	r6, r1
   1c72c:	4615      	mov	r5, r2
        return;
    }

    os_mbuf_adj(*om, OS_MBUF_PKTLEN(*om));
   1c72e:	6810      	ldr	r0, [r2, #0]
   1c730:	8a01      	ldrh	r1, [r0, #16]
   1c732:	f7f9 f876 	bl	15822 <os_mbuf_adj>
    ble_att_svr_tx_error_rsp(conn_handle, *om, op, 0,
   1c736:	2306      	movs	r3, #6
   1c738:	9300      	str	r3, [sp, #0]
   1c73a:	2300      	movs	r3, #0
   1c73c:	4622      	mov	r2, r4
   1c73e:	6829      	ldr	r1, [r5, #0]
   1c740:	4630      	mov	r0, r6
   1c742:	f001 f98f 	bl	1da64 <ble_att_svr_tx_error_rsp>
                             BLE_ATT_ERR_REQ_NOT_SUPPORTED);

    *om = NULL;
   1c746:	2300      	movs	r3, #0
   1c748:	602b      	str	r3, [r5, #0]
}
   1c74a:	b002      	add	sp, #8
   1c74c:	bd70      	pop	{r4, r5, r6, pc}

0001c74e <ble_att_rx>:

static int
ble_att_rx(struct ble_l2cap_chan *chan)
{
   1c74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c752:	b082      	sub	sp, #8
   1c754:	4604      	mov	r4, r0
    uint8_t op;
    uint16_t conn_handle;
    struct os_mbuf **om;
    int rc;

    conn_handle = ble_l2cap_get_conn_handle(chan);
   1c756:	f007 fca8 	bl	240aa <ble_l2cap_get_conn_handle>
    if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   1c75a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c75e:	4298      	cmp	r0, r3
   1c760:	d033      	beq.n	1c7ca <ble_att_rx+0x7c>
   1c762:	4605      	mov	r5, r0
        return BLE_HS_ENOTCONN;
    }

    om = &chan->rx_buf;
   1c764:	f104 0710 	add.w	r7, r4, #16
    BLE_HS_DBG_ASSERT(*om != NULL);

    rc = os_mbuf_copydata(*om, 0, 1, &op);
   1c768:	f10d 0307 	add.w	r3, sp, #7
   1c76c:	2201      	movs	r2, #1
   1c76e:	2100      	movs	r1, #0
   1c770:	6920      	ldr	r0, [r4, #16]
   1c772:	f7f9 f829 	bl	157c8 <os_mbuf_copydata>
    if (rc != 0) {
   1c776:	bb50      	cbnz	r0, 1c7ce <ble_att_rx+0x80>
        return BLE_HS_EMSGSIZE;
    }

    entry = ble_att_rx_dispatch_entry_find(op);
   1c778:	f89d 6007 	ldrb.w	r6, [sp, #7]
   1c77c:	4630      	mov	r0, r6
   1c77e:	f7ff febf 	bl	1c500 <ble_att_rx_dispatch_entry_find>
    if (entry == NULL) {
   1c782:	4680      	mov	r8, r0
   1c784:	b188      	cbz	r0, 1c7aa <ble_att_rx+0x5c>
        ble_att_rx_handle_unknown_request(op, conn_handle, om);
        return BLE_HS_ENOTSUP;
    }

    ble_att_inc_rx_stat(op);
   1c786:	4630      	mov	r0, r6
   1c788:	f7ff fece 	bl	1c528 <ble_att_inc_rx_stat>

    /* Strip L2CAP ATT header from the front of the mbuf. */
    os_mbuf_adj(*om, 1);
   1c78c:	2101      	movs	r1, #1
   1c78e:	6920      	ldr	r0, [r4, #16]
   1c790:	f7f9 f847 	bl	15822 <os_mbuf_adj>

    rc = entry->bde_fn(conn_handle, om);
   1c794:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c798:	4639      	mov	r1, r7
   1c79a:	4628      	mov	r0, r5
   1c79c:	4798      	blx	r3
    if (rc != 0) {
   1c79e:	4604      	mov	r4, r0
   1c7a0:	b950      	cbnz	r0, 1c7b8 <ble_att_rx+0x6a>
        }
        return rc;
    }

    return 0;
}
   1c7a2:	4620      	mov	r0, r4
   1c7a4:	b002      	add	sp, #8
   1c7a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ble_att_rx_handle_unknown_request(op, conn_handle, om);
   1c7aa:	463a      	mov	r2, r7
   1c7ac:	4629      	mov	r1, r5
   1c7ae:	4630      	mov	r0, r6
   1c7b0:	f7ff ffb4 	bl	1c71c <ble_att_rx_handle_unknown_request>
        return BLE_HS_ENOTSUP;
   1c7b4:	2408      	movs	r4, #8
   1c7b6:	e7f4      	b.n	1c7a2 <ble_att_rx+0x54>
        if (rc == BLE_HS_ENOTSUP) {
   1c7b8:	2808      	cmp	r0, #8
   1c7ba:	d1f2      	bne.n	1c7a2 <ble_att_rx+0x54>
            ble_att_rx_handle_unknown_request(op, conn_handle, om);
   1c7bc:	463a      	mov	r2, r7
   1c7be:	4629      	mov	r1, r5
   1c7c0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1c7c4:	f7ff ffaa 	bl	1c71c <ble_att_rx_handle_unknown_request>
        return rc;
   1c7c8:	e7eb      	b.n	1c7a2 <ble_att_rx+0x54>
        return BLE_HS_ENOTCONN;
   1c7ca:	2407      	movs	r4, #7
   1c7cc:	e7e9      	b.n	1c7a2 <ble_att_rx+0x54>
        return BLE_HS_EMSGSIZE;
   1c7ce:	2404      	movs	r4, #4
   1c7d0:	e7e7      	b.n	1c7a2 <ble_att_rx+0x54>

0001c7d2 <ble_att_conn_chan_find>:
{
   1c7d2:	b508      	push	{r3, lr}
   1c7d4:	4613      	mov	r3, r2
    return ble_hs_misc_conn_chan_find(conn_handle, BLE_L2CAP_CID_ATT,
   1c7d6:	460a      	mov	r2, r1
   1c7d8:	2104      	movs	r1, #4
   1c7da:	f007 f8c1 	bl	23960 <ble_hs_misc_conn_chan_find>
}
   1c7de:	bd08      	pop	{r3, pc}

0001c7e0 <ble_att_inc_tx_stat>:
    switch (att_op) {
   1c7e0:	3801      	subs	r0, #1
   1c7e2:	2851      	cmp	r0, #81	; 0x51
   1c7e4:	f200 80f4 	bhi.w	1c9d0 <ble_att_inc_tx_stat+0x1f0>
   1c7e8:	e8df f010 	tbh	[pc, r0, lsl #1]
   1c7ec:	00570052 	.word	0x00570052
   1c7f0:	0061005c 	.word	0x0061005c
   1c7f4:	006b0066 	.word	0x006b0066
   1c7f8:	00750070 	.word	0x00750070
   1c7fc:	007f007a 	.word	0x007f007a
   1c800:	00890084 	.word	0x00890084
   1c804:	0093008e 	.word	0x0093008e
   1c808:	009f0098 	.word	0x009f0098
   1c80c:	00ad00a6 	.word	0x00ad00a6
   1c810:	00f200b4 	.word	0x00f200b4
   1c814:	00bb00f2 	.word	0x00bb00f2
   1c818:	00c900c2 	.word	0x00c900c2
   1c81c:	00f200d0 	.word	0x00f200d0
   1c820:	00f200d7 	.word	0x00f200d7
   1c824:	00e500de 	.word	0x00e500de
   1c828:	00f200f2 	.word	0x00f200f2
   1c82c:	00f200f2 	.word	0x00f200f2
   1c830:	00f200f2 	.word	0x00f200f2
   1c834:	00f200f2 	.word	0x00f200f2
   1c838:	00f200f2 	.word	0x00f200f2
   1c83c:	00f200f2 	.word	0x00f200f2
   1c840:	00f200f2 	.word	0x00f200f2
   1c844:	00f200f2 	.word	0x00f200f2
   1c848:	00f200f2 	.word	0x00f200f2
   1c84c:	00f200f2 	.word	0x00f200f2
   1c850:	00f200f2 	.word	0x00f200f2
   1c854:	00f200f2 	.word	0x00f200f2
   1c858:	00f200f2 	.word	0x00f200f2
   1c85c:	00f200f2 	.word	0x00f200f2
   1c860:	00f200f2 	.word	0x00f200f2
   1c864:	00f200f2 	.word	0x00f200f2
   1c868:	00f200f2 	.word	0x00f200f2
   1c86c:	00f200f2 	.word	0x00f200f2
   1c870:	00f200f2 	.word	0x00f200f2
   1c874:	00f200f2 	.word	0x00f200f2
   1c878:	00f200f2 	.word	0x00f200f2
   1c87c:	00f200f2 	.word	0x00f200f2
   1c880:	00f200f2 	.word	0x00f200f2
   1c884:	00f200f2 	.word	0x00f200f2
   1c888:	00f200f2 	.word	0x00f200f2
   1c88c:	00ec00f2 	.word	0x00ec00f2
        STATS_INC(ble_att_stats, error_rsp_tx);
   1c890:	4a50      	ldr	r2, [pc, #320]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c892:	6913      	ldr	r3, [r2, #16]
   1c894:	3301      	adds	r3, #1
   1c896:	6113      	str	r3, [r2, #16]
        break;
   1c898:	4770      	bx	lr
        STATS_INC(ble_att_stats, mtu_req_tx);
   1c89a:	4a4e      	ldr	r2, [pc, #312]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c89c:	6993      	ldr	r3, [r2, #24]
   1c89e:	3301      	adds	r3, #1
   1c8a0:	6193      	str	r3, [r2, #24]
        break;
   1c8a2:	4770      	bx	lr
        STATS_INC(ble_att_stats, mtu_rsp_tx);
   1c8a4:	4a4b      	ldr	r2, [pc, #300]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c8a6:	6a13      	ldr	r3, [r2, #32]
   1c8a8:	3301      	adds	r3, #1
   1c8aa:	6213      	str	r3, [r2, #32]
        break;
   1c8ac:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_info_req_tx);
   1c8ae:	4a49      	ldr	r2, [pc, #292]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c8b0:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1c8b2:	3301      	adds	r3, #1
   1c8b4:	6293      	str	r3, [r2, #40]	; 0x28
        break;
   1c8b6:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_info_rsp_tx);
   1c8b8:	4a46      	ldr	r2, [pc, #280]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c8ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1c8bc:	3301      	adds	r3, #1
   1c8be:	6313      	str	r3, [r2, #48]	; 0x30
        break;
   1c8c0:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_type_value_req_tx);
   1c8c2:	4a44      	ldr	r2, [pc, #272]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c8c4:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1c8c6:	3301      	adds	r3, #1
   1c8c8:	6393      	str	r3, [r2, #56]	; 0x38
        break;
   1c8ca:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_type_value_rsp_tx);
   1c8cc:	4a41      	ldr	r2, [pc, #260]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c8ce:	6c13      	ldr	r3, [r2, #64]	; 0x40
   1c8d0:	3301      	adds	r3, #1
   1c8d2:	6413      	str	r3, [r2, #64]	; 0x40
        break;
   1c8d4:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_type_req_tx);
   1c8d6:	4a3f      	ldr	r2, [pc, #252]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c8d8:	6c93      	ldr	r3, [r2, #72]	; 0x48
   1c8da:	3301      	adds	r3, #1
   1c8dc:	6493      	str	r3, [r2, #72]	; 0x48
        break;
   1c8de:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_type_rsp_tx);
   1c8e0:	4a3c      	ldr	r2, [pc, #240]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c8e2:	6d13      	ldr	r3, [r2, #80]	; 0x50
   1c8e4:	3301      	adds	r3, #1
   1c8e6:	6513      	str	r3, [r2, #80]	; 0x50
        break;
   1c8e8:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_req_tx);
   1c8ea:	4a3a      	ldr	r2, [pc, #232]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c8ec:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1c8ee:	3301      	adds	r3, #1
   1c8f0:	6593      	str	r3, [r2, #88]	; 0x58
        break;
   1c8f2:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_rsp_tx);
   1c8f4:	4a37      	ldr	r2, [pc, #220]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c8f6:	6e13      	ldr	r3, [r2, #96]	; 0x60
   1c8f8:	3301      	adds	r3, #1
   1c8fa:	6613      	str	r3, [r2, #96]	; 0x60
        break;
   1c8fc:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_blob_req_tx);
   1c8fe:	4a35      	ldr	r2, [pc, #212]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c900:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1c902:	3301      	adds	r3, #1
   1c904:	6693      	str	r3, [r2, #104]	; 0x68
        break;
   1c906:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_blob_rsp_tx);
   1c908:	4a32      	ldr	r2, [pc, #200]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c90a:	6f13      	ldr	r3, [r2, #112]	; 0x70
   1c90c:	3301      	adds	r3, #1
   1c90e:	6713      	str	r3, [r2, #112]	; 0x70
        break;
   1c910:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_mult_req_tx);
   1c912:	4a30      	ldr	r2, [pc, #192]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c914:	6f93      	ldr	r3, [r2, #120]	; 0x78
   1c916:	3301      	adds	r3, #1
   1c918:	6793      	str	r3, [r2, #120]	; 0x78
        break;
   1c91a:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_mult_rsp_tx);
   1c91c:	4a2d      	ldr	r2, [pc, #180]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c91e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1c922:	3301      	adds	r3, #1
   1c924:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        break;
   1c928:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_group_type_req_tx);
   1c92a:	4a2a      	ldr	r2, [pc, #168]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c92c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1c930:	3301      	adds	r3, #1
   1c932:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
   1c936:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_group_type_rsp_tx);
   1c938:	4a26      	ldr	r2, [pc, #152]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c93a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1c93e:	3301      	adds	r3, #1
   1c940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        break;
   1c944:	4770      	bx	lr
        STATS_INC(ble_att_stats, write_req_tx);
   1c946:	4a23      	ldr	r2, [pc, #140]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c948:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   1c94c:	3301      	adds	r3, #1
   1c94e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
        break;
   1c952:	4770      	bx	lr
        STATS_INC(ble_att_stats, write_rsp_tx);
   1c954:	4a1f      	ldr	r2, [pc, #124]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c956:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
   1c95a:	3301      	adds	r3, #1
   1c95c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        break;
   1c960:	4770      	bx	lr
        STATS_INC(ble_att_stats, prep_write_req_tx);
   1c962:	4a1c      	ldr	r2, [pc, #112]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c964:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
   1c968:	3301      	adds	r3, #1
   1c96a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
        break;
   1c96e:	4770      	bx	lr
        STATS_INC(ble_att_stats, prep_write_rsp_tx);
   1c970:	4a18      	ldr	r2, [pc, #96]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c972:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
   1c976:	3301      	adds	r3, #1
   1c978:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
        break;
   1c97c:	4770      	bx	lr
        STATS_INC(ble_att_stats, exec_write_req_tx);
   1c97e:	4a15      	ldr	r2, [pc, #84]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c980:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   1c984:	3301      	adds	r3, #1
   1c986:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
        break;
   1c98a:	4770      	bx	lr
        STATS_INC(ble_att_stats, exec_write_rsp_tx);
   1c98c:	4a11      	ldr	r2, [pc, #68]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c98e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
   1c992:	3301      	adds	r3, #1
   1c994:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
        break;
   1c998:	4770      	bx	lr
        STATS_INC(ble_att_stats, notify_req_tx);
   1c99a:	4a0e      	ldr	r2, [pc, #56]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c99c:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
   1c9a0:	3301      	adds	r3, #1
   1c9a2:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
        break;
   1c9a6:	4770      	bx	lr
        STATS_INC(ble_att_stats, indicate_req_tx);
   1c9a8:	4a0a      	ldr	r2, [pc, #40]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c9aa:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
   1c9ae:	3301      	adds	r3, #1
   1c9b0:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
        break;
   1c9b4:	4770      	bx	lr
        STATS_INC(ble_att_stats, indicate_rsp_tx);
   1c9b6:	4a07      	ldr	r2, [pc, #28]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c9b8:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
   1c9bc:	3301      	adds	r3, #1
   1c9be:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
        break;
   1c9c2:	4770      	bx	lr
        STATS_INC(ble_att_stats, write_cmd_tx);
   1c9c4:	4a03      	ldr	r2, [pc, #12]	; (1c9d4 <ble_att_inc_tx_stat+0x1f4>)
   1c9c6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   1c9ca:	3301      	adds	r3, #1
   1c9cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   1c9d0:	4770      	bx	lr
   1c9d2:	bf00      	nop
   1c9d4:	10003474 	.word	0x10003474

0001c9d8 <ble_att_set_peer_mtu>:
    if (peer_mtu < BLE_ATT_MTU_DFLT) {
   1c9d8:	2916      	cmp	r1, #22
   1c9da:	d800      	bhi.n	1c9de <ble_att_set_peer_mtu+0x6>
        peer_mtu = BLE_ATT_MTU_DFLT;
   1c9dc:	2117      	movs	r1, #23
    chan->peer_mtu = peer_mtu;
   1c9de:	8181      	strh	r1, [r0, #12]
}
   1c9e0:	4770      	bx	lr

0001c9e2 <ble_att_chan_mtu>:
{
   1c9e2:	b510      	push	{r4, lr}
   1c9e4:	4604      	mov	r4, r0
    if (!(ble_l2cap_is_mtu_req_sent(chan)) ||
   1c9e6:	f007 fb2f 	bl	24048 <ble_l2cap_is_mtu_req_sent>
   1c9ea:	b130      	cbz	r0, 1c9fa <ble_att_chan_mtu+0x18>
        chan->peer_mtu == 0) {
   1c9ec:	89a0      	ldrh	r0, [r4, #12]
    if (!(ble_l2cap_is_mtu_req_sent(chan)) ||
   1c9ee:	b130      	cbz	r0, 1c9fe <ble_att_chan_mtu+0x1c>
        mtu = min(chan->my_mtu, chan->peer_mtu);
   1c9f0:	8963      	ldrh	r3, [r4, #10]
   1c9f2:	4298      	cmp	r0, r3
   1c9f4:	bf28      	it	cs
   1c9f6:	4618      	movcs	r0, r3
}
   1c9f8:	bd10      	pop	{r4, pc}
        mtu = BLE_ATT_MTU_DFLT;
   1c9fa:	2017      	movs	r0, #23
   1c9fc:	e7fc      	b.n	1c9f8 <ble_att_chan_mtu+0x16>
   1c9fe:	2017      	movs	r0, #23
   1ca00:	e7fa      	b.n	1c9f8 <ble_att_chan_mtu+0x16>

0001ca02 <ble_att_truncate_to_mtu>:
{
   1ca02:	b510      	push	{r4, lr}
   1ca04:	460c      	mov	r4, r1
    mtu = ble_att_chan_mtu(att_chan);
   1ca06:	f7ff ffec 	bl	1c9e2 <ble_att_chan_mtu>
    extra_len = OS_MBUF_PKTLEN(txom) - mtu;
   1ca0a:	8a21      	ldrh	r1, [r4, #16]
   1ca0c:	1a0b      	subs	r3, r1, r0
    if (extra_len > 0) {
   1ca0e:	2b00      	cmp	r3, #0
   1ca10:	dc00      	bgt.n	1ca14 <ble_att_truncate_to_mtu+0x12>
}
   1ca12:	bd10      	pop	{r4, pc}
        os_mbuf_adj(txom, -extra_len);
   1ca14:	1a41      	subs	r1, r0, r1
   1ca16:	4620      	mov	r0, r4
   1ca18:	f7f8 ff03 	bl	15822 <os_mbuf_adj>
}
   1ca1c:	e7f9      	b.n	1ca12 <ble_att_truncate_to_mtu+0x10>

0001ca1e <ble_att_mtu>:
{
   1ca1e:	b510      	push	{r4, lr}
   1ca20:	b082      	sub	sp, #8
   1ca22:	4604      	mov	r4, r0
    ble_hs_lock();
   1ca24:	f005 f86e 	bl	21b04 <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   1ca28:	aa01      	add	r2, sp, #4
   1ca2a:	4669      	mov	r1, sp
   1ca2c:	4620      	mov	r0, r4
   1ca2e:	f7ff fed0 	bl	1c7d2 <ble_att_conn_chan_find>
    if (rc == 0) {
   1ca32:	b128      	cbz	r0, 1ca40 <ble_att_mtu+0x22>
        mtu = 0;
   1ca34:	2400      	movs	r4, #0
    ble_hs_unlock();
   1ca36:	f005 f869 	bl	21b0c <ble_hs_unlock>
}
   1ca3a:	4620      	mov	r0, r4
   1ca3c:	b002      	add	sp, #8
   1ca3e:	bd10      	pop	{r4, pc}
        mtu = ble_att_chan_mtu(chan);
   1ca40:	9801      	ldr	r0, [sp, #4]
   1ca42:	f7ff ffce 	bl	1c9e2 <ble_att_chan_mtu>
   1ca46:	4604      	mov	r4, r0
   1ca48:	e7f5      	b.n	1ca36 <ble_att_mtu+0x18>
	...

0001ca4c <ble_att_create_chan>:
    return 0;
}

struct ble_l2cap_chan *
ble_att_create_chan(uint16_t conn_handle)
{
   1ca4c:	b508      	push	{r3, lr}
    struct ble_l2cap_chan *chan;

    chan = ble_l2cap_chan_alloc(conn_handle);
   1ca4e:	f007 facd 	bl	23fec <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   1ca52:	4603      	mov	r3, r0
   1ca54:	b138      	cbz	r0, 1ca66 <ble_att_create_chan+0x1a>
        return NULL;
    }

    chan->scid = BLE_L2CAP_CID_ATT;
   1ca56:	2204      	movs	r2, #4
   1ca58:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_ATT;
   1ca5a:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = ble_att_preferred_mtu_val;
   1ca5c:	4a03      	ldr	r2, [pc, #12]	; (1ca6c <ble_att_create_chan+0x20>)
   1ca5e:	8812      	ldrh	r2, [r2, #0]
   1ca60:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_att_rx;
   1ca62:	4a03      	ldr	r2, [pc, #12]	; (1ca70 <ble_att_create_chan+0x24>)
   1ca64:	6182      	str	r2, [r0, #24]

    return chan;
}
   1ca66:	4618      	mov	r0, r3
   1ca68:	bd08      	pop	{r3, pc}
   1ca6a:	bf00      	nop
   1ca6c:	10003470 	.word	0x10003470
   1ca70:	0001c74f 	.word	0x0001c74f

0001ca74 <ble_att_init>:

int
ble_att_init(void)
{
   1ca74:	b500      	push	{lr}
   1ca76:	b083      	sub	sp, #12
    int rc;

    ble_att_preferred_mtu_val = MYNEWT_VAL(BLE_ATT_PREFERRED_MTU);
   1ca78:	4b09      	ldr	r3, [pc, #36]	; (1caa0 <ble_att_init+0x2c>)
   1ca7a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1ca7e:	801a      	strh	r2, [r3, #0]

    rc = stats_init_and_reg(
   1ca80:	4b08      	ldr	r3, [pc, #32]	; (1caa4 <ble_att_init+0x30>)
   1ca82:	9301      	str	r3, [sp, #4]
   1ca84:	2300      	movs	r3, #0
   1ca86:	9300      	str	r3, [sp, #0]
   1ca88:	2236      	movs	r2, #54	; 0x36
   1ca8a:	2104      	movs	r1, #4
   1ca8c:	4806      	ldr	r0, [pc, #24]	; (1caa8 <ble_att_init+0x34>)
   1ca8e:	f7fd fbdd 	bl	1a24c <stats_init_and_reg>
        STATS_HDR(ble_att_stats), STATS_SIZE_INIT_PARMS(ble_att_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_att_stats), "ble_att");
    if (rc != 0) {
   1ca92:	b910      	cbnz	r0, 1ca9a <ble_att_init+0x26>
        return BLE_HS_EOS;
    }

    return 0;
}
   1ca94:	b003      	add	sp, #12
   1ca96:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   1ca9a:	200b      	movs	r0, #11
   1ca9c:	e7fa      	b.n	1ca94 <ble_att_init+0x20>
   1ca9e:	bf00      	nop
   1caa0:	10003470 	.word	0x10003470
   1caa4:	00030b18 	.word	0x00030b18
   1caa8:	10003474 	.word	0x10003474

0001caac <ble_att_clt_rx_error>:
 * $error response                                                           *
 *****************************************************************************/

int
ble_att_clt_rx_error(uint16_t conn_handle, struct os_mbuf **rxom)
{
   1caac:	b570      	push	{r4, r5, r6, lr}
   1caae:	4605      	mov	r5, r0
   1cab0:	460c      	mov	r4, r1
    struct ble_att_error_rsp *rsp;
    int rc;

    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*rsp));
   1cab2:	2104      	movs	r1, #4
   1cab4:	4620      	mov	r0, r4
   1cab6:	f006 ff28 	bl	2390a <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   1caba:	4606      	mov	r6, r0
   1cabc:	b108      	cbz	r0, 1cac2 <ble_att_clt_rx_error+0x16>

    ble_gattc_rx_err(conn_handle, le16toh(rsp->baep_handle),
                     le16toh(rsp->baep_error_code));

    return 0;
}
   1cabe:	4630      	mov	r0, r6
   1cac0:	bd70      	pop	{r4, r5, r6, pc}
    rsp = (struct ble_att_error_rsp *)(*rxom)->om_data;
   1cac2:	6823      	ldr	r3, [r4, #0]
   1cac4:	681b      	ldr	r3, [r3, #0]
    ble_gattc_rx_err(conn_handle, le16toh(rsp->baep_handle),
   1cac6:	78da      	ldrb	r2, [r3, #3]
   1cac8:	f8b3 1001 	ldrh.w	r1, [r3, #1]
   1cacc:	4628      	mov	r0, r5
   1cace:	f003 fea4 	bl	2081a <ble_gattc_rx_err>
    return 0;
   1cad2:	e7f4      	b.n	1cabe <ble_att_clt_rx_error+0x12>

0001cad4 <ble_att_clt_rx_mtu>:
    return rc;
}

int
ble_att_clt_rx_mtu(uint16_t conn_handle, struct os_mbuf **rxom)
{
   1cad4:	b570      	push	{r4, r5, r6, lr}
   1cad6:	b082      	sub	sp, #8
   1cad8:	4604      	mov	r4, r0
   1cada:	460d      	mov	r5, r1
    uint16_t mtu;
    int rc;

    mtu = 0;

    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*cmd));
   1cadc:	2102      	movs	r1, #2
   1cade:	4628      	mov	r0, r5
   1cae0:	f006 ff13 	bl	2390a <ble_hs_mbuf_pullup_base>
    if (rc == 0) {
   1cae4:	b148      	cbz	r0, 1cafa <ble_att_clt_rx_mtu+0x26>
   1cae6:	4606      	mov	r6, r0
    mtu = 0;
   1cae8:	2500      	movs	r5, #0
        if (rc == 0) {
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
        }
    }

    ble_gattc_rx_mtu(conn_handle, rc, mtu);
   1caea:	462a      	mov	r2, r5
   1caec:	4631      	mov	r1, r6
   1caee:	4620      	mov	r0, r4
   1caf0:	f003 fea9 	bl	20846 <ble_gattc_rx_mtu>
    return rc;
}
   1caf4:	4630      	mov	r0, r6
   1caf6:	b002      	add	sp, #8
   1caf8:	bd70      	pop	{r4, r5, r6, pc}
        cmd = (struct ble_att_mtu_cmd *)(*rxom)->om_data;
   1cafa:	682b      	ldr	r3, [r5, #0]
   1cafc:	681d      	ldr	r5, [r3, #0]
        ble_hs_lock();
   1cafe:	f005 f801 	bl	21b04 <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, NULL, &chan);
   1cb02:	aa01      	add	r2, sp, #4
   1cb04:	2100      	movs	r1, #0
   1cb06:	4620      	mov	r0, r4
   1cb08:	f7ff fe63 	bl	1c7d2 <ble_att_conn_chan_find>
        if (rc == 0) {
   1cb0c:	4606      	mov	r6, r0
   1cb0e:	b150      	cbz	r0, 1cb26 <ble_att_clt_rx_mtu+0x52>
    mtu = 0;
   1cb10:	2500      	movs	r5, #0
        ble_hs_unlock();
   1cb12:	f004 fffb 	bl	21b0c <ble_hs_unlock>
        if (rc == 0) {
   1cb16:	2e00      	cmp	r6, #0
   1cb18:	d1e7      	bne.n	1caea <ble_att_clt_rx_mtu+0x16>
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
   1cb1a:	462a      	mov	r2, r5
   1cb1c:	2104      	movs	r1, #4
   1cb1e:	4620      	mov	r0, r4
   1cb20:	f002 fe97 	bl	1f852 <ble_gap_mtu_event>
   1cb24:	e7e1      	b.n	1caea <ble_att_clt_rx_mtu+0x16>
            ble_att_set_peer_mtu(chan, le16toh(cmd->bamc_mtu));
   1cb26:	8829      	ldrh	r1, [r5, #0]
   1cb28:	9801      	ldr	r0, [sp, #4]
   1cb2a:	f7ff ff55 	bl	1c9d8 <ble_att_set_peer_mtu>
            mtu = ble_att_chan_mtu(chan);
   1cb2e:	9801      	ldr	r0, [sp, #4]
   1cb30:	f7ff ff57 	bl	1c9e2 <ble_att_chan_mtu>
   1cb34:	4605      	mov	r5, r0
   1cb36:	e7ec      	b.n	1cb12 <ble_att_clt_rx_mtu+0x3e>

0001cb38 <ble_att_clt_tx_find_info>:

    req->bafq_start_handle = htole16(start_handle);
    req->bafq_end_handle = htole16(end_handle);

    return ble_att_tx(conn_handle, txom);
}
   1cb38:	2008      	movs	r0, #8
   1cb3a:	4770      	bx	lr

0001cb3c <ble_att_clt_rx_find_info>:

done:
    /* Notify GATT that response processing is done. */
    ble_gattc_rx_find_info_complete(conn_handle, rc);
    return rc;
}
   1cb3c:	2008      	movs	r0, #8
   1cb3e:	4770      	bx	lr

0001cb40 <ble_att_clt_tx_find_type_value>:
    req->bavq_end_handle = htole16(end_handle);
    req->bavq_attr_type = htole16(attribute_type);
    memcpy(req->bavq_value, attribute_value, value_len);

    return ble_att_tx(conn_handle, txom);
}
   1cb40:	2008      	movs	r0, #8
   1cb42:	4770      	bx	lr

0001cb44 <ble_att_clt_rx_find_type_value>:

    /* Notify GATT client that the full response has been parsed. */
    ble_gattc_rx_find_type_value_complete(conn_handle, rc);

    return 0;
}
   1cb44:	2008      	movs	r0, #8
   1cb46:	4770      	bx	lr

0001cb48 <ble_att_clt_tx_read_type>:
    req->batq_end_handle = htole16(end_handle);

    ble_uuid_flat(uuid, req->uuid);

    return ble_att_tx(conn_handle, txom);
}
   1cb48:	2008      	movs	r0, #8
   1cb4a:	4770      	bx	lr

0001cb4c <ble_att_clt_rx_read_type>:
done:
    /* Notify GATT that the response is done being parsed. */
    ble_gattc_rx_read_type_complete(conn_handle, rc);
    return rc;

}
   1cb4c:	2008      	movs	r0, #8
   1cb4e:	4770      	bx	lr

0001cb50 <ble_att_clt_tx_read>:
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1cb50:	2008      	movs	r0, #8
   1cb52:	4770      	bx	lr

0001cb54 <ble_att_clt_rx_read>:
#endif

    /* Pass the Attribute Value field to GATT. */
    ble_gattc_rx_read_rsp(conn_handle, 0, rxom);
    return 0;
}
   1cb54:	2008      	movs	r0, #8
   1cb56:	4770      	bx	lr

0001cb58 <ble_att_clt_tx_read_blob>:
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1cb58:	2008      	movs	r0, #8
   1cb5a:	4770      	bx	lr

0001cb5c <ble_att_clt_rx_read_blob>:
#endif

    /* Pass the Attribute Value field to GATT. */
    ble_gattc_rx_read_blob_rsp(conn_handle, 0, rxom);
    return 0;
}
   1cb5c:	2008      	movs	r0, #8
   1cb5e:	4770      	bx	lr

0001cb60 <ble_att_clt_rx_read_mult>:
#endif

    /* Pass the Attribute Value field to GATT. */
    ble_gattc_rx_read_mult_rsp(conn_handle, 0, rxom);
    return 0;
}
   1cb60:	2008      	movs	r0, #8
   1cb62:	4770      	bx	lr

0001cb64 <ble_att_clt_tx_read_group_type>:
    req->bagq_start_handle = htole16(start_handle);
    req->bagq_end_handle = htole16(end_handle);
    ble_uuid_flat(uuid, req->uuid);

    return ble_att_tx(conn_handle, txom);
}
   1cb64:	2008      	movs	r0, #8
   1cb66:	4770      	bx	lr

0001cb68 <ble_att_clt_rx_read_group_type>:

done:
    /* Notify GATT that the response is done being parsed. */
    ble_gattc_rx_read_group_type_complete(conn_handle, rc);
    return rc;
}
   1cb68:	2008      	movs	r0, #8
   1cb6a:	4770      	bx	lr

0001cb6c <ble_att_clt_rx_write>:
#endif

    /* No payload. */
    ble_gattc_rx_write_rsp(conn_handle);
    return 0;
}
   1cb6c:	2008      	movs	r0, #8
   1cb6e:	4770      	bx	lr

0001cb70 <ble_att_clt_tx_prep_write>:
    return ble_att_tx(conn_handle, txom2);

err:
    os_mbuf_free_chain(txom);
    return rc;
}
   1cb70:	2008      	movs	r0, #8
   1cb72:	4770      	bx	lr

0001cb74 <ble_att_clt_rx_prep_write>:

done:
    /* Notify GATT client that the full response has been parsed. */
    ble_gattc_rx_prep_write_rsp(conn_handle, rc, handle, offset, rxom);
    return rc;
}
   1cb74:	2008      	movs	r0, #8
   1cb76:	4770      	bx	lr

0001cb78 <ble_att_clt_tx_exec_write>:
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1cb78:	2008      	movs	r0, #8
   1cb7a:	4770      	bx	lr

0001cb7c <ble_att_clt_rx_exec_write>:
    return BLE_HS_ENOTSUP;
#endif

    ble_gattc_rx_exec_write_rsp(conn_handle, 0);
    return 0;
}
   1cb7c:	2008      	movs	r0, #8
   1cb7e:	4770      	bx	lr

0001cb80 <ble_att_clt_tx_notify>:
 *****************************************************************************/

int
ble_att_clt_tx_notify(uint16_t conn_handle, uint16_t handle,
                      struct os_mbuf *txom)
{
   1cb80:	b570      	push	{r4, r5, r6, lr}
   1cb82:	b082      	sub	sp, #8
   1cb84:	4614      	mov	r4, r2

    struct ble_att_notify_req *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   1cb86:	b931      	cbnz	r1, 1cb96 <ble_att_clt_tx_notify+0x16>
        rc = BLE_HS_EINVAL;
   1cb88:	2503      	movs	r5, #3
    os_mbuf_concat(txom2, txom);

    return ble_att_tx(conn_handle, txom2);

err:
    os_mbuf_free_chain(txom);
   1cb8a:	4620      	mov	r0, r4
   1cb8c:	f7f8 fd72 	bl	15674 <os_mbuf_free_chain>
    return rc;
}
   1cb90:	4628      	mov	r0, r5
   1cb92:	b002      	add	sp, #8
   1cb94:	bd70      	pop	{r4, r5, r6, pc}
   1cb96:	4605      	mov	r5, r0
   1cb98:	460e      	mov	r6, r1
    req = ble_att_cmd_get(BLE_ATT_OP_NOTIFY_REQ, sizeof(*req), &txom2);
   1cb9a:	aa01      	add	r2, sp, #4
   1cb9c:	2102      	movs	r1, #2
   1cb9e:	201b      	movs	r0, #27
   1cba0:	f000 f846 	bl	1cc30 <ble_att_cmd_get>
    if (req == NULL) {
   1cba4:	b150      	cbz	r0, 1cbbc <ble_att_clt_tx_notify+0x3c>
    req->banq_handle = htole16(handle);
   1cba6:	8006      	strh	r6, [r0, #0]
    os_mbuf_concat(txom2, txom);
   1cba8:	4621      	mov	r1, r4
   1cbaa:	9801      	ldr	r0, [sp, #4]
   1cbac:	f7f8 ff6d 	bl	15a8a <os_mbuf_concat>
    return ble_att_tx(conn_handle, txom2);
   1cbb0:	9901      	ldr	r1, [sp, #4]
   1cbb2:	4628      	mov	r0, r5
   1cbb4:	f000 f84a 	bl	1cc4c <ble_att_tx>
   1cbb8:	4605      	mov	r5, r0
   1cbba:	e7e9      	b.n	1cb90 <ble_att_clt_tx_notify+0x10>
        rc = BLE_HS_ENOMEM;
   1cbbc:	2506      	movs	r5, #6
   1cbbe:	e7e4      	b.n	1cb8a <ble_att_clt_tx_notify+0xa>

0001cbc0 <ble_att_clt_tx_indicate>:
 *****************************************************************************/

int
ble_att_clt_tx_indicate(uint16_t conn_handle, uint16_t handle,
                        struct os_mbuf *txom)
{
   1cbc0:	b570      	push	{r4, r5, r6, lr}
   1cbc2:	b082      	sub	sp, #8
   1cbc4:	4614      	mov	r4, r2

    struct ble_att_indicate_req *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   1cbc6:	b931      	cbnz	r1, 1cbd6 <ble_att_clt_tx_indicate+0x16>
        rc = BLE_HS_EINVAL;
   1cbc8:	2503      	movs	r5, #3
    os_mbuf_concat(txom2, txom);

    return ble_att_tx(conn_handle, txom2);

err:
    os_mbuf_free_chain(txom);
   1cbca:	4620      	mov	r0, r4
   1cbcc:	f7f8 fd52 	bl	15674 <os_mbuf_free_chain>
    return rc;
}
   1cbd0:	4628      	mov	r0, r5
   1cbd2:	b002      	add	sp, #8
   1cbd4:	bd70      	pop	{r4, r5, r6, pc}
   1cbd6:	4605      	mov	r5, r0
   1cbd8:	460e      	mov	r6, r1
    req = ble_att_cmd_get(BLE_ATT_OP_INDICATE_REQ, sizeof(*req), &txom2);
   1cbda:	aa01      	add	r2, sp, #4
   1cbdc:	2102      	movs	r1, #2
   1cbde:	201d      	movs	r0, #29
   1cbe0:	f000 f826 	bl	1cc30 <ble_att_cmd_get>
    if (req == NULL) {
   1cbe4:	b150      	cbz	r0, 1cbfc <ble_att_clt_tx_indicate+0x3c>
    req->baiq_handle = htole16(handle);
   1cbe6:	8006      	strh	r6, [r0, #0]
    os_mbuf_concat(txom2, txom);
   1cbe8:	4621      	mov	r1, r4
   1cbea:	9801      	ldr	r0, [sp, #4]
   1cbec:	f7f8 ff4d 	bl	15a8a <os_mbuf_concat>
    return ble_att_tx(conn_handle, txom2);
   1cbf0:	9901      	ldr	r1, [sp, #4]
   1cbf2:	4628      	mov	r0, r5
   1cbf4:	f000 f82a 	bl	1cc4c <ble_att_tx>
   1cbf8:	4605      	mov	r5, r0
   1cbfa:	e7e9      	b.n	1cbd0 <ble_att_clt_tx_indicate+0x10>
        rc = BLE_HS_ENOMEM;
   1cbfc:	2506      	movs	r5, #6
   1cbfe:	e7e4      	b.n	1cbca <ble_att_clt_tx_indicate+0xa>

0001cc00 <ble_att_clt_rx_indicate>:

int
ble_att_clt_rx_indicate(uint16_t conn_handle, struct os_mbuf **rxom)
{
   1cc00:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_ATT_CLT_INDICATE
    return BLE_HS_ENOTSUP;
#endif

    /* No payload. */
    ble_gattc_rx_indicate_rsp(conn_handle);
   1cc02:	f003 fe32 	bl	2086a <ble_gattc_rx_indicate_rsp>
    return 0;
}
   1cc06:	2000      	movs	r0, #0
   1cc08:	bd08      	pop	{r3, pc}

0001cc0a <ble_att_cmd_prepare>:
#include "ble_hs_priv.h"

#if NIMBLE_BLE_CONNECT
void *
ble_att_cmd_prepare(uint8_t opcode, size_t len, struct os_mbuf *txom)
{
   1cc0a:	b570      	push	{r4, r5, r6, lr}
   1cc0c:	4606      	mov	r6, r0
   1cc0e:	4614      	mov	r4, r2
    struct ble_att_hdr *hdr;

    if (os_mbuf_extend(txom, sizeof(*hdr) + len) == NULL) {
   1cc10:	3101      	adds	r1, #1
   1cc12:	b289      	uxth	r1, r1
   1cc14:	4610      	mov	r0, r2
   1cc16:	f7f8 ff5a 	bl	15ace <os_mbuf_extend>
   1cc1a:	b120      	cbz	r0, 1cc26 <ble_att_cmd_prepare+0x1c>
        return NULL;
    }

    hdr = (struct ble_att_hdr *)(txom)->om_data;

    hdr->opcode = opcode;
   1cc1c:	6825      	ldr	r5, [r4, #0]
   1cc1e:	f805 6b01 	strb.w	r6, [r5], #1

    return hdr->data;
}
   1cc22:	4628      	mov	r0, r5
   1cc24:	bd70      	pop	{r4, r5, r6, pc}
   1cc26:	4605      	mov	r5, r0
        os_mbuf_free_chain(txom);
   1cc28:	4620      	mov	r0, r4
   1cc2a:	f7f8 fd23 	bl	15674 <os_mbuf_free_chain>
        return NULL;
   1cc2e:	e7f8      	b.n	1cc22 <ble_att_cmd_prepare+0x18>

0001cc30 <ble_att_cmd_get>:

void *
ble_att_cmd_get(uint8_t opcode, size_t len, struct os_mbuf **txom)
{
   1cc30:	b570      	push	{r4, r5, r6, lr}
   1cc32:	4605      	mov	r5, r0
   1cc34:	460e      	mov	r6, r1
   1cc36:	4614      	mov	r4, r2
    *txom = ble_hs_mbuf_l2cap_pkt();
   1cc38:	f006 fe48 	bl	238cc <ble_hs_mbuf_l2cap_pkt>
   1cc3c:	6020      	str	r0, [r4, #0]
    if (*txom == NULL) {
   1cc3e:	b120      	cbz	r0, 1cc4a <ble_att_cmd_get+0x1a>
        return NULL;
    }

    return ble_att_cmd_prepare(opcode, len, *txom);
   1cc40:	4602      	mov	r2, r0
   1cc42:	4631      	mov	r1, r6
   1cc44:	4628      	mov	r0, r5
   1cc46:	f7ff ffe0 	bl	1cc0a <ble_att_cmd_prepare>
}
   1cc4a:	bd70      	pop	{r4, r5, r6, pc}

0001cc4c <ble_att_tx>:

int
ble_att_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   1cc4c:	b530      	push	{r4, r5, lr}
   1cc4e:	b083      	sub	sp, #12
   1cc50:	4605      	mov	r5, r0
   1cc52:	460c      	mov	r4, r1
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;
    int rc;

    BLE_HS_DBG_ASSERT_EVAL(txom->om_len >= 1);
    ble_att_inc_tx_stat(txom->om_data[0]);
   1cc54:	680b      	ldr	r3, [r1, #0]
   1cc56:	7818      	ldrb	r0, [r3, #0]
   1cc58:	f7ff fdc2 	bl	1c7e0 <ble_att_inc_tx_stat>

    ble_hs_lock();
   1cc5c:	f004 ff52 	bl	21b04 <ble_hs_lock>

    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_ATT, &conn,
   1cc60:	ab01      	add	r3, sp, #4
   1cc62:	466a      	mov	r2, sp
   1cc64:	2104      	movs	r1, #4
   1cc66:	4628      	mov	r0, r5
   1cc68:	f006 fe92 	bl	23990 <ble_hs_misc_conn_chan_find_reqd>
                                         &chan);
    if (rc != 0) {
   1cc6c:	b140      	cbz	r0, 1cc80 <ble_att_tx+0x34>
   1cc6e:	4605      	mov	r5, r0
        os_mbuf_free_chain(txom);
   1cc70:	4620      	mov	r0, r4
   1cc72:	f7f8 fcff 	bl	15674 <os_mbuf_free_chain>
    } else {
        ble_att_truncate_to_mtu(chan, txom);
        rc = ble_l2cap_tx(conn, chan, txom);
    }

    ble_hs_unlock();
   1cc76:	f004 ff49 	bl	21b0c <ble_hs_unlock>

    return rc;
}
   1cc7a:	4628      	mov	r0, r5
   1cc7c:	b003      	add	sp, #12
   1cc7e:	bd30      	pop	{r4, r5, pc}
        ble_att_truncate_to_mtu(chan, txom);
   1cc80:	4621      	mov	r1, r4
   1cc82:	9801      	ldr	r0, [sp, #4]
   1cc84:	f7ff febd 	bl	1ca02 <ble_att_truncate_to_mtu>
        rc = ble_l2cap_tx(conn, chan, txom);
   1cc88:	4622      	mov	r2, r4
   1cc8a:	9901      	ldr	r1, [sp, #4]
   1cc8c:	9800      	ldr	r0, [sp, #0]
   1cc8e:	f007 faa7 	bl	241e0 <ble_l2cap_tx>
   1cc92:	4605      	mov	r5, r0
   1cc94:	e7ef      	b.n	1cc76 <ble_att_tx+0x2a>
	...

0001cc98 <ble_att_svr_next_id>:
static uint16_t
ble_att_svr_next_id(void)
{
    /* Rollover is fatal. */
    BLE_HS_DBG_ASSERT(ble_att_svr_id != UINT16_MAX);
    return ++ble_att_svr_id;
   1cc98:	4b02      	ldr	r3, [pc, #8]	; (1cca4 <ble_att_svr_next_id+0xc>)
   1cc9a:	8818      	ldrh	r0, [r3, #0]
   1cc9c:	3001      	adds	r0, #1
   1cc9e:	b280      	uxth	r0, r0
   1cca0:	8018      	strh	r0, [r3, #0]
}
   1cca2:	4770      	bx	lr
   1cca4:	10003580 	.word	0x10003580

0001cca8 <ble_att_svr_prep_find_prev>:
{
    struct ble_att_prep_entry *entry;
    struct ble_att_prep_entry *prev;

    prev = NULL;
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   1cca8:	6803      	ldr	r3, [r0, #0]
    prev = NULL;
   1ccaa:	2000      	movs	r0, #0
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   1ccac:	b16b      	cbz	r3, 1ccca <ble_att_svr_prep_find_prev+0x22>
{
   1ccae:	b410      	push	{r4}
   1ccb0:	e002      	b.n	1ccb8 <ble_att_svr_prep_find_prev+0x10>

        if (entry->bape_handle == handle && entry->bape_offset > offset) {
            break;
        }

        prev = entry;
   1ccb2:	4618      	mov	r0, r3
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   1ccb4:	681b      	ldr	r3, [r3, #0]
   1ccb6:	b133      	cbz	r3, 1ccc6 <ble_att_svr_prep_find_prev+0x1e>
        if (entry->bape_handle > handle) {
   1ccb8:	889c      	ldrh	r4, [r3, #4]
   1ccba:	428c      	cmp	r4, r1
   1ccbc:	d803      	bhi.n	1ccc6 <ble_att_svr_prep_find_prev+0x1e>
        if (entry->bape_handle == handle && entry->bape_offset > offset) {
   1ccbe:	d1f8      	bne.n	1ccb2 <ble_att_svr_prep_find_prev+0xa>
   1ccc0:	88dc      	ldrh	r4, [r3, #6]
   1ccc2:	4294      	cmp	r4, r2
   1ccc4:	d9f5      	bls.n	1ccb2 <ble_att_svr_prep_find_prev+0xa>
    }

    return prev;
}
   1ccc6:	bc10      	pop	{r4}
   1ccc8:	4770      	bx	lr
   1ccca:	4770      	bx	lr

0001cccc <ble_att_svr_prep_validate>:
    struct ble_att_prep_entry *entry;
    struct ble_att_prep_entry *prev;
    int cur_len;

    prev = NULL;
    SLIST_FOREACH(entry, prep_list, bape_next) {
   1cccc:	6803      	ldr	r3, [r0, #0]
    prev = NULL;
   1ccce:	2200      	movs	r2, #0
    SLIST_FOREACH(entry, prep_list, bape_next) {
   1ccd0:	b343      	cbz	r3, 1cd24 <ble_att_svr_prep_validate+0x58>
{
   1ccd2:	b410      	push	{r4}
   1ccd4:	e00b      	b.n	1ccee <ble_att_svr_prep_validate+0x22>
        if (prev == NULL || prev->bape_handle != entry->bape_handle) {
            /* Ensure attribute write starts at offset 0. */
            if (entry->bape_offset != 0) {
   1ccd6:	88da      	ldrh	r2, [r3, #6]
   1ccd8:	b9ca      	cbnz	r2, 1cd0e <ble_att_svr_prep_validate+0x42>
                *err_handle = entry->bape_handle;
                return BLE_ATT_ERR_INVALID_OFFSET;
            }
        }

        cur_len = entry->bape_offset + OS_MBUF_PKTLEN(entry->bape_value);
   1ccda:	88da      	ldrh	r2, [r3, #6]
   1ccdc:	6898      	ldr	r0, [r3, #8]
   1ccde:	8a00      	ldrh	r0, [r0, #16]
   1cce0:	4402      	add	r2, r0
        if (cur_len > BLE_ATT_ATTR_MAX_LEN) {
   1cce2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   1cce6:	dc16      	bgt.n	1cd16 <ble_att_svr_prep_validate+0x4a>
            *err_handle = entry->bape_handle;
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
        }

        prev = entry;
   1cce8:	461a      	mov	r2, r3
    SLIST_FOREACH(entry, prep_list, bape_next) {
   1ccea:	681b      	ldr	r3, [r3, #0]
   1ccec:	b1bb      	cbz	r3, 1cd1e <ble_att_svr_prep_validate+0x52>
        if (prev == NULL || prev->bape_handle != entry->bape_handle) {
   1ccee:	2a00      	cmp	r2, #0
   1ccf0:	d0f1      	beq.n	1ccd6 <ble_att_svr_prep_validate+0xa>
   1ccf2:	8894      	ldrh	r4, [r2, #4]
   1ccf4:	8898      	ldrh	r0, [r3, #4]
   1ccf6:	4284      	cmp	r4, r0
   1ccf8:	d1ed      	bne.n	1ccd6 <ble_att_svr_prep_validate+0xa>
            if (prev->bape_offset + OS_MBUF_PKTLEN(prev->bape_value) !=
   1ccfa:	88d4      	ldrh	r4, [r2, #6]
   1ccfc:	6892      	ldr	r2, [r2, #8]
   1ccfe:	8a12      	ldrh	r2, [r2, #16]
   1cd00:	4422      	add	r2, r4
                entry->bape_offset) {
   1cd02:	88dc      	ldrh	r4, [r3, #6]
            if (prev->bape_offset + OS_MBUF_PKTLEN(prev->bape_value) !=
   1cd04:	42a2      	cmp	r2, r4
   1cd06:	d0e8      	beq.n	1ccda <ble_att_svr_prep_validate+0xe>
                *err_handle = entry->bape_handle;
   1cd08:	8008      	strh	r0, [r1, #0]
                return BLE_ATT_ERR_INVALID_OFFSET;
   1cd0a:	2007      	movs	r0, #7
   1cd0c:	e008      	b.n	1cd20 <ble_att_svr_prep_validate+0x54>
                *err_handle = entry->bape_handle;
   1cd0e:	889b      	ldrh	r3, [r3, #4]
   1cd10:	800b      	strh	r3, [r1, #0]
                return BLE_ATT_ERR_INVALID_OFFSET;
   1cd12:	2007      	movs	r0, #7
   1cd14:	e004      	b.n	1cd20 <ble_att_svr_prep_validate+0x54>
            *err_handle = entry->bape_handle;
   1cd16:	889b      	ldrh	r3, [r3, #4]
   1cd18:	800b      	strh	r3, [r1, #0]
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   1cd1a:	200d      	movs	r0, #13
   1cd1c:	e000      	b.n	1cd20 <ble_att_svr_prep_validate+0x54>
    }

    return 0;
   1cd1e:	2000      	movs	r0, #0
}
   1cd20:	bc10      	pop	{r4}
   1cd22:	4770      	bx	lr
    return 0;
   1cd24:	2000      	movs	r0, #0
}
   1cd26:	4770      	bx	lr

0001cd28 <ble_att_svr_entry_alloc>:
{
   1cd28:	b508      	push	{r3, lr}
    entry = os_memblock_get(&ble_att_svr_entry_pool);
   1cd2a:	4806      	ldr	r0, [pc, #24]	; (1cd44 <ble_att_svr_entry_alloc+0x1c>)
   1cd2c:	f7f9 f87f 	bl	15e2e <os_memblock_get>
    if (entry != NULL) {
   1cd30:	4603      	mov	r3, r0
   1cd32:	b128      	cbz	r0, 1cd40 <ble_att_svr_entry_alloc+0x18>
        memset(entry, 0, sizeof *entry);
   1cd34:	2200      	movs	r2, #0
   1cd36:	6002      	str	r2, [r0, #0]
   1cd38:	6042      	str	r2, [r0, #4]
   1cd3a:	6082      	str	r2, [r0, #8]
   1cd3c:	60c2      	str	r2, [r0, #12]
   1cd3e:	6102      	str	r2, [r0, #16]
}
   1cd40:	4618      	mov	r0, r3
   1cd42:	bd08      	pop	{r3, pc}
   1cd44:	1000355c 	.word	0x1000355c

0001cd48 <ble_att_svr_get_sec_state>:
{
   1cd48:	b538      	push	{r3, r4, r5, lr}
   1cd4a:	4605      	mov	r5, r0
   1cd4c:	460c      	mov	r4, r1
    ble_hs_lock();
   1cd4e:	f004 fed9 	bl	21b04 <ble_hs_lock>
    conn = ble_hs_conn_find_assert(conn_handle);
   1cd52:	4628      	mov	r0, r5
   1cd54:	f005 fd4a 	bl	227ec <ble_hs_conn_find_assert>
    *out_sec_state = conn->bhc_sec_state;
   1cd58:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1cd5a:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   1cd5c:	f004 fed6 	bl	21b0c <ble_hs_unlock>
}
   1cd60:	bd38      	pop	{r3, r4, r5, pc}

0001cd62 <ble_att_svr_check_perms>:
{
   1cd62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cd66:	b0a6      	sub	sp, #152	; 0x98
   1cd68:	4605      	mov	r5, r0
   1cd6a:	4614      	mov	r4, r2
   1cd6c:	461e      	mov	r6, r3
    if (is_read) {
   1cd6e:	b389      	cbz	r1, 1cdd4 <ble_att_svr_check_perms+0x72>
        if (!(entry->ha_flags & BLE_ATT_F_READ)) {
   1cd70:	7a11      	ldrb	r1, [r2, #8]
   1cd72:	f011 0f01 	tst.w	r1, #1
   1cd76:	d029      	beq.n	1cdcc <ble_att_svr_check_perms+0x6a>
        enc = entry->ha_flags & BLE_ATT_F_READ_ENC;
   1cd78:	f001 0704 	and.w	r7, r1, #4
        authen = entry->ha_flags & BLE_ATT_F_READ_AUTHEN;
   1cd7c:	f001 0808 	and.w	r8, r1, #8
        author = entry->ha_flags & BLE_ATT_F_READ_AUTHOR;
   1cd80:	f001 0010 	and.w	r0, r1, #16
    if (!enc && !authen && !author) {
   1cd84:	b91f      	cbnz	r7, 1cd8e <ble_att_svr_check_perms+0x2c>
   1cd86:	f1b8 0f00 	cmp.w	r8, #0
   1cd8a:	d100      	bne.n	1cd8e <ble_att_svr_check_perms+0x2c>
   1cd8c:	b1d8      	cbz	r0, 1cdc6 <ble_att_svr_check_perms+0x64>
    ble_att_svr_get_sec_state(conn_handle, &sec_state);
   1cd8e:	a925      	add	r1, sp, #148	; 0x94
   1cd90:	4628      	mov	r0, r5
   1cd92:	f7ff ffd9 	bl	1cd48 <ble_att_svr_get_sec_state>
    if ((enc || authen) && !sec_state.encrypted) {
   1cd96:	b917      	cbnz	r7, 1cd9e <ble_att_svr_check_perms+0x3c>
   1cd98:	f1b8 0f00 	cmp.w	r8, #0
   1cd9c:	d004      	beq.n	1cda8 <ble_att_svr_check_perms+0x46>
   1cd9e:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   1cda2:	f013 0f01 	tst.w	r3, #1
   1cda6:	d024      	beq.n	1cdf2 <ble_att_svr_check_perms+0x90>
    if (authen && !sec_state.authenticated) {
   1cda8:	f1b8 0f00 	cmp.w	r8, #0
   1cdac:	d004      	beq.n	1cdb8 <ble_att_svr_check_perms+0x56>
   1cdae:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   1cdb2:	f013 0f02 	tst.w	r3, #2
   1cdb6:	d050      	beq.n	1ce5a <ble_att_svr_check_perms+0xf8>
    if (entry->ha_min_key_size > sec_state.key_size) {
   1cdb8:	7a63      	ldrb	r3, [r4, #9]
   1cdba:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
   1cdbe:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
   1cdc2:	d84f      	bhi.n	1ce64 <ble_att_svr_check_perms+0x102>
    return 0;
   1cdc4:	2000      	movs	r0, #0
}
   1cdc6:	b026      	add	sp, #152	; 0x98
   1cdc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            *out_att_err = BLE_ATT_ERR_READ_NOT_PERMITTED;
   1cdcc:	2302      	movs	r3, #2
   1cdce:	7033      	strb	r3, [r6, #0]
            return BLE_HS_EREJECT;
   1cdd0:	2010      	movs	r0, #16
   1cdd2:	e7f8      	b.n	1cdc6 <ble_att_svr_check_perms+0x64>
        if (!(entry->ha_flags & BLE_ATT_F_WRITE)) {
   1cdd4:	7a11      	ldrb	r1, [r2, #8]
   1cdd6:	f011 0f02 	tst.w	r1, #2
   1cdda:	d006      	beq.n	1cdea <ble_att_svr_check_perms+0x88>
        enc = entry->ha_flags & BLE_ATT_F_WRITE_ENC;
   1cddc:	f001 0720 	and.w	r7, r1, #32
        authen = entry->ha_flags & BLE_ATT_F_WRITE_AUTHEN;
   1cde0:	f001 0840 	and.w	r8, r1, #64	; 0x40
        author = entry->ha_flags & BLE_ATT_F_WRITE_AUTHOR;
   1cde4:	f001 0080 	and.w	r0, r1, #128	; 0x80
   1cde8:	e7cc      	b.n	1cd84 <ble_att_svr_check_perms+0x22>
            *out_att_err = BLE_ATT_ERR_WRITE_NOT_PERMITTED;
   1cdea:	2303      	movs	r3, #3
   1cdec:	7033      	strb	r3, [r6, #0]
            return BLE_HS_EREJECT;
   1cdee:	2010      	movs	r0, #16
   1cdf0:	e7e9      	b.n	1cdc6 <ble_att_svr_check_perms+0x64>
        ble_hs_lock();
   1cdf2:	f004 fe87 	bl	21b04 <ble_hs_lock>
        conn = ble_hs_conn_find(conn_handle);
   1cdf6:	4628      	mov	r0, r5
   1cdf8:	f005 fce0 	bl	227bc <ble_hs_conn_find>
        if (conn != NULL) {
   1cdfc:	b1a8      	cbz	r0, 1ce2a <ble_att_svr_check_perms+0xc8>
            ble_hs_conn_addrs(conn, &addrs);
   1cdfe:	a901      	add	r1, sp, #4
   1ce00:	f005 fd14 	bl	2282c <ble_hs_conn_addrs>
            memset(&key_sec, 0, sizeof key_sec);
   1ce04:	2300      	movs	r3, #0
   1ce06:	9309      	str	r3, [sp, #36]	; 0x24
   1ce08:	930a      	str	r3, [sp, #40]	; 0x28
   1ce0a:	930b      	str	r3, [sp, #44]	; 0x2c
   1ce0c:	930c      	str	r3, [sp, #48]	; 0x30
   1ce0e:	930d      	str	r3, [sp, #52]	; 0x34
   1ce10:	930e      	str	r3, [sp, #56]	; 0x38
   1ce12:	930f      	str	r3, [sp, #60]	; 0x3c
            key_sec.peer_addr = addrs.peer_id_addr;
   1ce14:	f8dd 000b 	ldr.w	r0, [sp, #11]
   1ce18:	9008      	str	r0, [sp, #32]
   1ce1a:	f8bd 200f 	ldrh.w	r2, [sp, #15]
   1ce1e:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1ce22:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   1ce26:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        ble_hs_unlock();
   1ce2a:	f004 fe6f 	bl	21b0c <ble_hs_unlock>
        rc = ble_store_read_peer_sec(&key_sec, &value_sec);
   1ce2e:	a910      	add	r1, sp, #64	; 0x40
   1ce30:	a808      	add	r0, sp, #32
   1ce32:	f009 fbaa 	bl	2658a <ble_store_read_peer_sec>
        if (rc == 0 && value_sec.ltk_present) {
   1ce36:	b938      	cbnz	r0, 1ce48 <ble_att_svr_check_perms+0xe6>
   1ce38:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   1ce3c:	f013 0f01 	tst.w	r3, #1
   1ce40:	d002      	beq.n	1ce48 <ble_att_svr_check_perms+0xe6>
            *out_att_err = BLE_ATT_ERR_INSUFFICIENT_ENC;
   1ce42:	230f      	movs	r3, #15
   1ce44:	7033      	strb	r3, [r6, #0]
   1ce46:	e001      	b.n	1ce4c <ble_att_svr_check_perms+0xea>
            *out_att_err = BLE_ATT_ERR_INSUFFICIENT_AUTHEN;
   1ce48:	2305      	movs	r3, #5
   1ce4a:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ATT_ERR(*out_att_err);
   1ce4c:	7830      	ldrb	r0, [r6, #0]
   1ce4e:	b110      	cbz	r0, 1ce56 <ble_att_svr_check_perms+0xf4>
   1ce50:	f500 7080 	add.w	r0, r0, #256	; 0x100
   1ce54:	e7b7      	b.n	1cdc6 <ble_att_svr_check_perms+0x64>
   1ce56:	2000      	movs	r0, #0
   1ce58:	e7b5      	b.n	1cdc6 <ble_att_svr_check_perms+0x64>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_AUTHEN;
   1ce5a:	2305      	movs	r3, #5
   1ce5c:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ATT_ERR(*out_att_err);
   1ce5e:	f240 1005 	movw	r0, #261	; 0x105
   1ce62:	e7b0      	b.n	1cdc6 <ble_att_svr_check_perms+0x64>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_KEY_SZ;
   1ce64:	230c      	movs	r3, #12
   1ce66:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ATT_ERR(*out_att_err);
   1ce68:	f44f 7086 	mov.w	r0, #268	; 0x10c
   1ce6c:	e7ab      	b.n	1cdc6 <ble_att_svr_check_perms+0x64>

0001ce6e <ble_att_svr_read>:
{
   1ce6e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ce70:	b087      	sub	sp, #28
   1ce72:	4606      	mov	r6, r0
   1ce74:	460c      	mov	r4, r1
   1ce76:	4615      	mov	r5, r2
   1ce78:	9303      	str	r3, [sp, #12]
    att_err = 0;    /* Silence gcc warning. */
   1ce7a:	2300      	movs	r3, #0
   1ce7c:	f88d 3017 	strb.w	r3, [sp, #23]
    if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   1ce80:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ce84:	4298      	cmp	r0, r3
   1ce86:	d10e      	bne.n	1cea6 <ble_att_svr_read+0x38>
    rc = entry->ha_cb(conn_handle, entry->ha_handle_id,
   1ce88:	68e7      	ldr	r7, [r4, #12]
   1ce8a:	6923      	ldr	r3, [r4, #16]
   1ce8c:	9301      	str	r3, [sp, #4]
   1ce8e:	ab03      	add	r3, sp, #12
   1ce90:	9300      	str	r3, [sp, #0]
   1ce92:	462b      	mov	r3, r5
   1ce94:	2201      	movs	r2, #1
   1ce96:	8961      	ldrh	r1, [r4, #10]
   1ce98:	4630      	mov	r0, r6
   1ce9a:	47b8      	blx	r7
    if (rc != 0) {
   1ce9c:	4603      	mov	r3, r0
   1ce9e:	b960      	cbnz	r0, 1ceba <ble_att_svr_read+0x4c>
}
   1cea0:	4618      	mov	r0, r3
   1cea2:	b007      	add	sp, #28
   1cea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = ble_att_svr_check_perms(conn_handle, 1, entry, &att_err);
   1cea6:	f10d 0317 	add.w	r3, sp, #23
   1ceaa:	460a      	mov	r2, r1
   1ceac:	2101      	movs	r1, #1
   1ceae:	f7ff ff58 	bl	1cd62 <ble_att_svr_check_perms>
        if (rc != 0) {
   1ceb2:	4603      	mov	r3, r0
   1ceb4:	2800      	cmp	r0, #0
   1ceb6:	d0e7      	beq.n	1ce88 <ble_att_svr_read+0x1a>
   1ceb8:	e002      	b.n	1cec0 <ble_att_svr_read+0x52>
        att_err = rc;
   1ceba:	f88d 0017 	strb.w	r0, [sp, #23]
        rc = BLE_HS_EAPP;
   1cebe:	2309      	movs	r3, #9
    if (out_att_err != NULL) {
   1cec0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1cec2:	2a00      	cmp	r2, #0
   1cec4:	d0ec      	beq.n	1cea0 <ble_att_svr_read+0x32>
        *out_att_err = att_err;
   1cec6:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1ceca:	990c      	ldr	r1, [sp, #48]	; 0x30
   1cecc:	700a      	strb	r2, [r1, #0]
   1cece:	e7e7      	b.n	1cea0 <ble_att_svr_read+0x32>

0001ced0 <ble_att_svr_write>:
{
   1ced0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ced4:	b085      	sub	sp, #20
   1ced6:	4605      	mov	r5, r0
   1ced8:	460c      	mov	r4, r1
   1ceda:	4616      	mov	r6, r2
   1cedc:	4698      	mov	r8, r3
   1cede:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    uint8_t att_err = 0;
   1cee0:	2200      	movs	r2, #0
   1cee2:	f88d 200f 	strb.w	r2, [sp, #15]
    if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   1cee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1ceea:	4290      	cmp	r0, r2
   1ceec:	d114      	bne.n	1cf18 <ble_att_svr_write+0x48>
    rc = entry->ha_cb(conn_handle, entry->ha_handle_id,
   1ceee:	f8d4 900c 	ldr.w	r9, [r4, #12]
   1cef2:	6923      	ldr	r3, [r4, #16]
   1cef4:	9301      	str	r3, [sp, #4]
   1cef6:	f8cd 8000 	str.w	r8, [sp]
   1cefa:	4633      	mov	r3, r6
   1cefc:	2202      	movs	r2, #2
   1cefe:	8961      	ldrh	r1, [r4, #10]
   1cf00:	4628      	mov	r0, r5
   1cf02:	47c8      	blx	r9
    if (rc != 0) {
   1cf04:	4602      	mov	r2, r0
   1cf06:	b988      	cbnz	r0, 1cf2c <ble_att_svr_write+0x5c>
    if (out_att_err != NULL) {
   1cf08:	b117      	cbz	r7, 1cf10 <ble_att_svr_write+0x40>
        *out_att_err = att_err;
   1cf0a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1cf0e:	703b      	strb	r3, [r7, #0]
}
   1cf10:	4610      	mov	r0, r2
   1cf12:	b005      	add	sp, #20
   1cf14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rc = ble_att_svr_check_perms(conn_handle, 0, entry, &att_err);
   1cf18:	f10d 030f 	add.w	r3, sp, #15
   1cf1c:	460a      	mov	r2, r1
   1cf1e:	2100      	movs	r1, #0
   1cf20:	f7ff ff1f 	bl	1cd62 <ble_att_svr_check_perms>
        if (rc != 0) {
   1cf24:	4602      	mov	r2, r0
   1cf26:	2800      	cmp	r0, #0
   1cf28:	d0e1      	beq.n	1ceee <ble_att_svr_write+0x1e>
   1cf2a:	e7ed      	b.n	1cf08 <ble_att_svr_write+0x38>
        att_err = rc;
   1cf2c:	f88d 000f 	strb.w	r0, [sp, #15]
        rc = BLE_HS_EAPP;
   1cf30:	2209      	movs	r2, #9
        goto done;
   1cf32:	e7e9      	b.n	1cf08 <ble_att_svr_write+0x38>

0001cf34 <ble_att_svr_pullup_req_base>:
{
   1cf34:	b510      	push	{r4, lr}
   1cf36:	4614      	mov	r4, r2
    rc = ble_hs_mbuf_pullup_base(om, base_len);
   1cf38:	f006 fce7 	bl	2390a <ble_hs_mbuf_pullup_base>
    if (rc == BLE_HS_ENOMEM) {
   1cf3c:	2806      	cmp	r0, #6
   1cf3e:	d003      	beq.n	1cf48 <ble_att_svr_pullup_req_base+0x14>
        att_err = 0;
   1cf40:	2300      	movs	r3, #0
    if (out_att_err != NULL) {
   1cf42:	b104      	cbz	r4, 1cf46 <ble_att_svr_pullup_req_base+0x12>
        *out_att_err = att_err;
   1cf44:	7023      	strb	r3, [r4, #0]
}
   1cf46:	bd10      	pop	{r4, pc}
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1cf48:	2311      	movs	r3, #17
   1cf4a:	e7fa      	b.n	1cf42 <ble_att_svr_pullup_req_base+0xe>

0001cf4c <ble_att_svr_build_mtu_rsp>:
{
   1cf4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cf50:	b083      	sub	sp, #12
   1cf52:	4606      	mov	r6, r0
   1cf54:	460f      	mov	r7, r1
   1cf56:	4615      	mov	r5, r2
   1cf58:	461c      	mov	r4, r3
   1cf5a:	f04f 0800 	mov.w	r8, #0
    *att_err = 0; /* Silence unnecessary warning. */
   1cf5e:	f883 8000 	strb.w	r8, [r3]
    ble_hs_lock();
   1cf62:	f004 fdcf 	bl	21b04 <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, NULL, &chan);
   1cf66:	aa01      	add	r2, sp, #4
   1cf68:	4641      	mov	r1, r8
   1cf6a:	4630      	mov	r0, r6
   1cf6c:	f7ff fc31 	bl	1c7d2 <ble_att_conn_chan_find>
    if (rc == 0) {
   1cf70:	4681      	mov	r9, r0
   1cf72:	b910      	cbnz	r0, 1cf7a <ble_att_svr_build_mtu_rsp+0x2e>
        mtu = chan->my_mtu;
   1cf74:	9b01      	ldr	r3, [sp, #4]
   1cf76:	f8b3 800a 	ldrh.w	r8, [r3, #10]
    ble_hs_unlock();
   1cf7a:	f004 fdc7 	bl	21b0c <ble_hs_unlock>
    if (rc != 0) {
   1cf7e:	f1b9 0f00 	cmp.w	r9, #0
   1cf82:	d005      	beq.n	1cf90 <ble_att_svr_build_mtu_rsp+0x44>
    txom = NULL;
   1cf84:	2600      	movs	r6, #0
    *out_txom = txom;
   1cf86:	602e      	str	r6, [r5, #0]
}
   1cf88:	4648      	mov	r0, r9
   1cf8a:	b003      	add	sp, #12
   1cf8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    txom = *rxom;
   1cf90:	683e      	ldr	r6, [r7, #0]
    *rxom = NULL;
   1cf92:	2300      	movs	r3, #0
   1cf94:	603b      	str	r3, [r7, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1cf96:	8a31      	ldrh	r1, [r6, #16]
   1cf98:	4630      	mov	r0, r6
   1cf9a:	f7f8 fc42 	bl	15822 <os_mbuf_adj>
    cmd = ble_att_cmd_prepare(BLE_ATT_OP_MTU_RSP, sizeof(*cmd), txom);
   1cf9e:	4632      	mov	r2, r6
   1cfa0:	2102      	movs	r1, #2
   1cfa2:	2003      	movs	r0, #3
   1cfa4:	f7ff fe31 	bl	1cc0a <ble_att_cmd_prepare>
    if (cmd == NULL) {
   1cfa8:	b110      	cbz	r0, 1cfb0 <ble_att_svr_build_mtu_rsp+0x64>
    cmd->bamc_mtu = htole16(mtu);
   1cfaa:	f8a0 8000 	strh.w	r8, [r0]
    rc = 0;
   1cfae:	e7ea      	b.n	1cf86 <ble_att_svr_build_mtu_rsp+0x3a>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1cfb0:	2311      	movs	r3, #17
   1cfb2:	7023      	strb	r3, [r4, #0]
        rc = BLE_HS_ENOMEM;
   1cfb4:	f04f 0906 	mov.w	r9, #6
        goto done;
   1cfb8:	e7e5      	b.n	1cf86 <ble_att_svr_build_mtu_rsp+0x3a>

0001cfba <ble_att_svr_pkt>:
{
   1cfba:	b570      	push	{r4, r5, r6, lr}
   1cfbc:	4606      	mov	r6, r0
   1cfbe:	460c      	mov	r4, r1
   1cfc0:	4615      	mov	r5, r2
    *out_txom = ble_hs_mbuf_l2cap_pkt();
   1cfc2:	f006 fc83 	bl	238cc <ble_hs_mbuf_l2cap_pkt>
   1cfc6:	6020      	str	r0, [r4, #0]
    if (*out_txom != NULL) {
   1cfc8:	b108      	cbz	r0, 1cfce <ble_att_svr_pkt+0x14>
        return 0;
   1cfca:	2000      	movs	r0, #0
}
   1cfcc:	bd70      	pop	{r4, r5, r6, pc}
    *out_txom = *rxom;
   1cfce:	6833      	ldr	r3, [r6, #0]
   1cfd0:	6023      	str	r3, [r4, #0]
    *rxom = NULL;
   1cfd2:	2300      	movs	r3, #0
   1cfd4:	6033      	str	r3, [r6, #0]
    *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1cfd6:	2311      	movs	r3, #17
   1cfd8:	702b      	strb	r3, [r5, #0]
    return BLE_HS_ENOMEM;
   1cfda:	2006      	movs	r0, #6
   1cfdc:	e7f6      	b.n	1cfcc <ble_att_svr_pkt+0x12>

0001cfde <ble_att_svr_build_write_rsp>:
{
   1cfde:	b570      	push	{r4, r5, r6, lr}
   1cfe0:	b082      	sub	sp, #8
   1cfe2:	460c      	mov	r4, r1
   1cfe4:	4615      	mov	r5, r2
    rc = ble_att_svr_pkt(rxom, &txom, att_err);
   1cfe6:	a901      	add	r1, sp, #4
   1cfe8:	f7ff ffe7 	bl	1cfba <ble_att_svr_pkt>
    if (rc != 0) {
   1cfec:	4606      	mov	r6, r0
   1cfee:	b120      	cbz	r0, 1cffa <ble_att_svr_build_write_rsp+0x1c>
    *out_txom = txom;
   1cff0:	9b01      	ldr	r3, [sp, #4]
   1cff2:	6023      	str	r3, [r4, #0]
}
   1cff4:	4630      	mov	r0, r6
   1cff6:	b002      	add	sp, #8
   1cff8:	bd70      	pop	{r4, r5, r6, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_WRITE_RSP, 0, txom) == NULL) {
   1cffa:	9a01      	ldr	r2, [sp, #4]
   1cffc:	2100      	movs	r1, #0
   1cffe:	2013      	movs	r0, #19
   1d000:	f7ff fe03 	bl	1cc0a <ble_att_cmd_prepare>
   1d004:	2800      	cmp	r0, #0
   1d006:	d1f3      	bne.n	1cff0 <ble_att_svr_build_write_rsp+0x12>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1d008:	2311      	movs	r3, #17
   1d00a:	702b      	strb	r3, [r5, #0]
        rc = BLE_HS_ENOMEM;
   1d00c:	2606      	movs	r6, #6
        goto done;
   1d00e:	e7ef      	b.n	1cff0 <ble_att_svr_build_write_rsp+0x12>

0001d010 <ble_att_svr_build_indicate_rsp>:
 * @return                      0 on success; nonzero on failure.
 */
static int
ble_att_svr_build_indicate_rsp(struct os_mbuf **rxom,
                               struct os_mbuf **out_txom, uint8_t *out_att_err)
{
   1d010:	b570      	push	{r4, r5, r6, lr}
   1d012:	b082      	sub	sp, #8
   1d014:	460c      	mov	r4, r1
   1d016:	4615      	mov	r5, r2

    /* Allocate a new buffer for the response.  An indicate response never
     * reuses the request buffer.  See the note at the top of this file for
     * details.
     */
    rc = ble_att_svr_pkt(rxom, &txom, out_att_err);
   1d018:	a901      	add	r1, sp, #4
   1d01a:	f7ff ffce 	bl	1cfba <ble_att_svr_pkt>
    if (rc != 0) {
   1d01e:	4606      	mov	r6, r0
   1d020:	b120      	cbz	r0, 1d02c <ble_att_svr_build_indicate_rsp+0x1c>
    }

    rc = 0;

done:
    *out_txom = txom;
   1d022:	9b01      	ldr	r3, [sp, #4]
   1d024:	6023      	str	r3, [r4, #0]
    return rc;
}
   1d026:	4630      	mov	r0, r6
   1d028:	b002      	add	sp, #8
   1d02a:	bd70      	pop	{r4, r5, r6, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_INDICATE_RSP, 0, txom) == NULL) {
   1d02c:	9a01      	ldr	r2, [sp, #4]
   1d02e:	2100      	movs	r1, #0
   1d030:	201e      	movs	r0, #30
   1d032:	f7ff fdea 	bl	1cc0a <ble_att_cmd_prepare>
   1d036:	2800      	cmp	r0, #0
   1d038:	d1f3      	bne.n	1d022 <ble_att_svr_build_indicate_rsp+0x12>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1d03a:	2311      	movs	r3, #17
   1d03c:	702b      	strb	r3, [r5, #0]
        rc = BLE_HS_ENOMEM;
   1d03e:	2606      	movs	r6, #6
        goto done;
   1d040:	e7ef      	b.n	1d022 <ble_att_svr_build_indicate_rsp+0x12>
	...

0001d044 <ble_att_svr_fill_info>:
{
   1d044:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d048:	4680      	mov	r8, r0
   1d04a:	460f      	mov	r7, r1
   1d04c:	4691      	mov	r9, r2
   1d04e:	469b      	mov	fp, r3
   1d050:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    *format = 0;
   1d054:	2600      	movs	r6, #0
   1d056:	f88a 6000 	strb.w	r6, [sl]
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1d05a:	4b20      	ldr	r3, [pc, #128]	; (1d0dc <ble_att_svr_fill_info+0x98>)
   1d05c:	681c      	ldr	r4, [r3, #0]
   1d05e:	e021      	b.n	1d0a4 <ble_att_svr_fill_info+0x60>
                if (*format == 0) {
   1d060:	f89a 3000 	ldrb.w	r3, [sl]
   1d064:	b923      	cbnz	r3, 1d070 <ble_att_svr_fill_info+0x2c>
                    *format = BLE_ATT_FIND_INFO_RSP_FORMAT_16BIT;
   1d066:	2301      	movs	r3, #1
   1d068:	f88a 3000 	strb.w	r3, [sl]
                entry_sz = 4;
   1d06c:	2104      	movs	r1, #4
   1d06e:	e006      	b.n	1d07e <ble_att_svr_fill_info+0x3a>
                } else if (*format != BLE_ATT_FIND_INFO_RSP_FORMAT_16BIT) {
   1d070:	2b01      	cmp	r3, #1
   1d072:	d12a      	bne.n	1d0ca <ble_att_svr_fill_info+0x86>
                entry_sz = 4;
   1d074:	2104      	movs	r1, #4
   1d076:	e002      	b.n	1d07e <ble_att_svr_fill_info+0x3a>
                } else if (*format != BLE_ATT_FIND_INFO_RSP_FORMAT_128BIT) {
   1d078:	2b02      	cmp	r3, #2
   1d07a:	d126      	bne.n	1d0ca <ble_att_svr_fill_info+0x86>
                entry_sz = 18;
   1d07c:	2112      	movs	r1, #18
            if (OS_MBUF_PKTLEN(om) + entry_sz > mtu) {
   1d07e:	f8b9 3010 	ldrh.w	r3, [r9, #16]
   1d082:	440b      	add	r3, r1
   1d084:	455b      	cmp	r3, fp
   1d086:	dc20      	bgt.n	1d0ca <ble_att_svr_fill_info+0x86>
            buf = os_mbuf_extend(om, entry_sz);
   1d088:	4648      	mov	r0, r9
   1d08a:	f7f8 fd20 	bl	15ace <os_mbuf_extend>
            if (buf == NULL) {
   1d08e:	4605      	mov	r5, r0
   1d090:	b1f8      	cbz	r0, 1d0d2 <ble_att_svr_fill_info+0x8e>
            put_le16(buf + 0, ha->ha_handle_id);
   1d092:	8961      	ldrh	r1, [r4, #10]
   1d094:	f010 fa00 	bl	2d498 <put_le16>
            ble_uuid_flat(ha->ha_uuid, buf + 2);
   1d098:	1ca9      	adds	r1, r5, #2
   1d09a:	6860      	ldr	r0, [r4, #4]
   1d09c:	f009 fc8e 	bl	269bc <ble_uuid_flat>
            num_entries++;
   1d0a0:	3601      	adds	r6, #1
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1d0a2:	6824      	ldr	r4, [r4, #0]
   1d0a4:	b18c      	cbz	r4, 1d0ca <ble_att_svr_fill_info+0x86>
        if (ha->ha_handle_id > end_handle) {
   1d0a6:	8965      	ldrh	r5, [r4, #10]
   1d0a8:	42bd      	cmp	r5, r7
   1d0aa:	d80e      	bhi.n	1d0ca <ble_att_svr_fill_info+0x86>
        if (ha->ha_handle_id >= start_handle) {
   1d0ac:	4545      	cmp	r5, r8
   1d0ae:	d3f8      	bcc.n	1d0a2 <ble_att_svr_fill_info+0x5e>
            if (ha->ha_uuid->type == BLE_UUID_TYPE_16) {
   1d0b0:	6863      	ldr	r3, [r4, #4]
   1d0b2:	781b      	ldrb	r3, [r3, #0]
   1d0b4:	2b10      	cmp	r3, #16
   1d0b6:	d0d3      	beq.n	1d060 <ble_att_svr_fill_info+0x1c>
                if (*format == 0) {
   1d0b8:	f89a 3000 	ldrb.w	r3, [sl]
   1d0bc:	2b00      	cmp	r3, #0
   1d0be:	d1db      	bne.n	1d078 <ble_att_svr_fill_info+0x34>
                    *format = BLE_ATT_FIND_INFO_RSP_FORMAT_128BIT;
   1d0c0:	2302      	movs	r3, #2
   1d0c2:	f88a 3000 	strb.w	r3, [sl]
                entry_sz = 18;
   1d0c6:	2112      	movs	r1, #18
   1d0c8:	e7d9      	b.n	1d07e <ble_att_svr_fill_info+0x3a>
    if (rc == 0 && num_entries == 0) {
   1d0ca:	b126      	cbz	r6, 1d0d6 <ble_att_svr_fill_info+0x92>
   1d0cc:	2000      	movs	r0, #0
}
   1d0ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                rc = BLE_HS_ENOMEM;
   1d0d2:	2006      	movs	r0, #6
        return rc;
   1d0d4:	e7fb      	b.n	1d0ce <ble_att_svr_fill_info+0x8a>
        return BLE_HS_ENOENT;
   1d0d6:	2005      	movs	r0, #5
   1d0d8:	e7f9      	b.n	1d0ce <ble_att_svr_fill_info+0x8a>
   1d0da:	bf00      	nop
   1d0dc:	10003584 	.word	0x10003584

0001d0e0 <ble_att_svr_build_find_info_rsp>:
{
   1d0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d0e4:	b082      	sub	sp, #8
   1d0e6:	4606      	mov	r6, r0
   1d0e8:	460d      	mov	r5, r1
   1d0ea:	4617      	mov	r7, r2
    txom = *rxom;
   1d0ec:	681c      	ldr	r4, [r3, #0]
    *rxom = NULL;
   1d0ee:	2100      	movs	r1, #0
   1d0f0:	6019      	str	r1, [r3, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1d0f2:	8a21      	ldrh	r1, [r4, #16]
   1d0f4:	4620      	mov	r0, r4
   1d0f6:	f7f8 fb94 	bl	15822 <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_FIND_INFO_RSP, sizeof(*rsp), txom);
   1d0fa:	4622      	mov	r2, r4
   1d0fc:	2101      	movs	r1, #1
   1d0fe:	2005      	movs	r0, #5
   1d100:	f7ff fd83 	bl	1cc0a <ble_att_cmd_prepare>
    if (rsp == NULL) {
   1d104:	b188      	cbz	r0, 1d12a <ble_att_svr_build_find_info_rsp+0x4a>
   1d106:	4680      	mov	r8, r0
    mtu = ble_att_mtu(conn_handle);
   1d108:	4630      	mov	r0, r6
   1d10a:	f7ff fc88 	bl	1ca1e <ble_att_mtu>
   1d10e:	4603      	mov	r3, r0
    rc = ble_att_svr_fill_info(start_handle, end_handle, txom, mtu,
   1d110:	f8cd 8000 	str.w	r8, [sp]
   1d114:	4622      	mov	r2, r4
   1d116:	4639      	mov	r1, r7
   1d118:	4628      	mov	r0, r5
   1d11a:	f7ff ff93 	bl	1d044 <ble_att_svr_fill_info>
    if (rc != 0) {
   1d11e:	b948      	cbnz	r0, 1d134 <ble_att_svr_build_find_info_rsp+0x54>
    *out_txom = txom;
   1d120:	9b08      	ldr	r3, [sp, #32]
   1d122:	601c      	str	r4, [r3, #0]
}
   1d124:	b002      	add	sp, #8
   1d126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1d12a:	2311      	movs	r3, #17
   1d12c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d12e:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   1d130:	2006      	movs	r0, #6
        goto done;
   1d132:	e7f5      	b.n	1d120 <ble_att_svr_build_find_info_rsp+0x40>
        *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   1d134:	230a      	movs	r3, #10
   1d136:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d138:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOENT;
   1d13a:	2005      	movs	r0, #5
        goto done;
   1d13c:	e7f0      	b.n	1d120 <ble_att_svr_build_find_info_rsp+0x40>

0001d13e <ble_att_svr_read_group_type_entry_write>:
{
   1d13e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d142:	460c      	mov	r4, r1
   1d144:	4617      	mov	r7, r2
   1d146:	461e      	mov	r6, r3
   1d148:	f8dd 8018 	ldr.w	r8, [sp, #24]
    if (service_uuid->type == BLE_UUID_TYPE_16) {
   1d14c:	f898 3000 	ldrb.w	r3, [r8]
   1d150:	2b10      	cmp	r3, #16
   1d152:	d016      	beq.n	1d182 <ble_att_svr_read_group_type_entry_write+0x44>
        len = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_128;
   1d154:	2114      	movs	r1, #20
    if (OS_MBUF_PKTLEN(om) + len > mtu) {
   1d156:	8a05      	ldrh	r5, [r0, #16]
   1d158:	440d      	add	r5, r1
   1d15a:	42a5      	cmp	r5, r4
   1d15c:	dc13      	bgt.n	1d186 <ble_att_svr_read_group_type_entry_write+0x48>
    buf = os_mbuf_extend(om, len);
   1d15e:	f7f8 fcb6 	bl	15ace <os_mbuf_extend>
    if (buf == NULL) {
   1d162:	4604      	mov	r4, r0
   1d164:	b188      	cbz	r0, 1d18a <ble_att_svr_read_group_type_entry_write+0x4c>
    put_le16(buf + 0, start_group_handle);
   1d166:	4639      	mov	r1, r7
   1d168:	f010 f996 	bl	2d498 <put_le16>
    put_le16(buf + 2, end_group_handle);
   1d16c:	4631      	mov	r1, r6
   1d16e:	1ca0      	adds	r0, r4, #2
   1d170:	f010 f992 	bl	2d498 <put_le16>
    ble_uuid_flat(service_uuid, buf + 4);
   1d174:	1d21      	adds	r1, r4, #4
   1d176:	4640      	mov	r0, r8
   1d178:	f009 fc20 	bl	269bc <ble_uuid_flat>
    return 0;
   1d17c:	2000      	movs	r0, #0
}
   1d17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        len = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_16;
   1d182:	2106      	movs	r1, #6
   1d184:	e7e7      	b.n	1d156 <ble_att_svr_read_group_type_entry_write+0x18>
        return BLE_HS_EMSGSIZE;
   1d186:	2004      	movs	r0, #4
   1d188:	e7f9      	b.n	1d17e <ble_att_svr_read_group_type_entry_write+0x40>
        return BLE_HS_ENOMEM;
   1d18a:	2006      	movs	r0, #6
   1d18c:	e7f7      	b.n	1d17e <ble_att_svr_read_group_type_entry_write+0x40>

0001d18e <ble_att_svr_is_valid_find_group_type>:
{
   1d18e:	b508      	push	{r3, lr}
    uuid16 = ble_uuid_u16(uuid);
   1d190:	f009 fbda 	bl	26948 <ble_uuid_u16>
    return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   1d194:	f5a0 5320 	sub.w	r3, r0, #10240	; 0x2800
   1d198:	b29b      	uxth	r3, r3
           uuid16 == BLE_ATT_UUID_SECONDARY_SERVICE ||
   1d19a:	2b01      	cmp	r3, #1
   1d19c:	d907      	bls.n	1d1ae <ble_att_svr_is_valid_find_group_type+0x20>
   1d19e:	f642 0303 	movw	r3, #10243	; 0x2803
   1d1a2:	4298      	cmp	r0, r3
   1d1a4:	d001      	beq.n	1d1aa <ble_att_svr_is_valid_find_group_type+0x1c>
   1d1a6:	2000      	movs	r0, #0
   1d1a8:	e002      	b.n	1d1b0 <ble_att_svr_is_valid_find_group_type+0x22>
   1d1aa:	2001      	movs	r0, #1
   1d1ac:	e000      	b.n	1d1b0 <ble_att_svr_is_valid_find_group_type+0x22>
   1d1ae:	2001      	movs	r0, #1
}
   1d1b0:	bd08      	pop	{r3, pc}

0001d1b2 <ble_att_svr_is_valid_group_end>:
    if (uuid_group->type != BLE_UUID_TYPE_16) {
   1d1b2:	7803      	ldrb	r3, [r0, #0]
   1d1b4:	2b10      	cmp	r3, #16
   1d1b6:	d126      	bne.n	1d206 <ble_att_svr_is_valid_group_end+0x54>
{
   1d1b8:	b510      	push	{r4, lr}
   1d1ba:	460c      	mov	r4, r1
    if (uuid->type != BLE_UUID_TYPE_16) {
   1d1bc:	780b      	ldrb	r3, [r1, #0]
   1d1be:	2b10      	cmp	r3, #16
   1d1c0:	d001      	beq.n	1d1c6 <ble_att_svr_is_valid_group_end+0x14>
        return 0;
   1d1c2:	2000      	movs	r0, #0
}
   1d1c4:	bd10      	pop	{r4, pc}
    switch (ble_uuid_u16(uuid_group)) {
   1d1c6:	f009 fbbf 	bl	26948 <ble_uuid_u16>
   1d1ca:	f642 0301 	movw	r3, #10241	; 0x2801
   1d1ce:	4298      	cmp	r0, r3
   1d1d0:	d907      	bls.n	1d1e2 <ble_att_svr_is_valid_group_end+0x30>
   1d1d2:	f642 0303 	movw	r3, #10243	; 0x2803
   1d1d6:	4298      	cmp	r0, r3
   1d1d8:	d108      	bne.n	1d1ec <ble_att_svr_is_valid_group_end+0x3a>
        return ble_att_svr_is_valid_find_group_type(uuid);
   1d1da:	4620      	mov	r0, r4
   1d1dc:	f7ff ffd7 	bl	1d18e <ble_att_svr_is_valid_find_group_type>
   1d1e0:	e7f0      	b.n	1d1c4 <ble_att_svr_is_valid_group_end+0x12>
    switch (ble_uuid_u16(uuid_group)) {
   1d1e2:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
   1d1e6:	d203      	bcs.n	1d1f0 <ble_att_svr_is_valid_group_end+0x3e>
   1d1e8:	2001      	movs	r0, #1
   1d1ea:	e7eb      	b.n	1d1c4 <ble_att_svr_is_valid_group_end+0x12>
   1d1ec:	2001      	movs	r0, #1
   1d1ee:	e7e9      	b.n	1d1c4 <ble_att_svr_is_valid_group_end+0x12>
        uuid16 = ble_uuid_u16(uuid);
   1d1f0:	4620      	mov	r0, r4
   1d1f2:	f009 fba9 	bl	26948 <ble_uuid_u16>
        return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   1d1f6:	f5a0 5020 	sub.w	r0, r0, #10240	; 0x2800
   1d1fa:	b280      	uxth	r0, r0
   1d1fc:	2801      	cmp	r0, #1
   1d1fe:	bf8c      	ite	hi
   1d200:	2000      	movhi	r0, #0
   1d202:	2001      	movls	r0, #1
   1d204:	e7de      	b.n	1d1c4 <ble_att_svr_is_valid_group_end+0x12>
        return 1;
   1d206:	2001      	movs	r0, #1
}
   1d208:	4770      	bx	lr

0001d20a <ble_att_svr_is_valid_read_group_type>:
{
   1d20a:	b508      	push	{r3, lr}
    uuid16 = ble_uuid_u16(uuid);
   1d20c:	f009 fb9c 	bl	26948 <ble_uuid_u16>
    return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   1d210:	f5a0 5020 	sub.w	r0, r0, #10240	; 0x2800
   1d214:	b280      	uxth	r0, r0
}
   1d216:	2801      	cmp	r0, #1
   1d218:	bf8c      	ite	hi
   1d21a:	2000      	movhi	r0, #0
   1d21c:	2001      	movls	r0, #1
   1d21e:	bd08      	pop	{r3, pc}

0001d220 <ble_att_svr_read_flat>:
{
   1d220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d224:	b082      	sub	sp, #8
   1d226:	4604      	mov	r4, r0
   1d228:	460d      	mov	r5, r1
   1d22a:	4616      	mov	r6, r2
   1d22c:	4698      	mov	r8, r3
    om = ble_hs_mbuf_l2cap_pkt();
   1d22e:	f006 fb4d 	bl	238cc <ble_hs_mbuf_l2cap_pkt>
    if (om == NULL) {
   1d232:	4607      	mov	r7, r0
   1d234:	b300      	cbz	r0, 1d278 <ble_att_svr_read_flat+0x58>
    rc = ble_att_svr_read(conn_handle, entry, offset, om, out_att_err);
   1d236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d238:	9300      	str	r3, [sp, #0]
   1d23a:	4603      	mov	r3, r0
   1d23c:	4632      	mov	r2, r6
   1d23e:	4629      	mov	r1, r5
   1d240:	4620      	mov	r0, r4
   1d242:	f7ff fe14 	bl	1ce6e <ble_att_svr_read>
    if (rc != 0) {
   1d246:	4604      	mov	r4, r0
   1d248:	b950      	cbnz	r0, 1d260 <ble_att_svr_read_flat+0x40>
    len = OS_MBUF_PKTLEN(om);
   1d24a:	8a3d      	ldrh	r5, [r7, #16]
    if (len > max_len) {
   1d24c:	4545      	cmp	r5, r8
   1d24e:	d80e      	bhi.n	1d26e <ble_att_svr_read_flat+0x4e>
    rc = os_mbuf_copydata(om, 0, len, dst);
   1d250:	9b08      	ldr	r3, [sp, #32]
   1d252:	462a      	mov	r2, r5
   1d254:	2100      	movs	r1, #0
   1d256:	4638      	mov	r0, r7
   1d258:	f7f8 fab6 	bl	157c8 <os_mbuf_copydata>
    *out_len = len;
   1d25c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d25e:	801d      	strh	r5, [r3, #0]
    os_mbuf_free_chain(om);
   1d260:	4638      	mov	r0, r7
   1d262:	f7f8 fa07 	bl	15674 <os_mbuf_free_chain>
}
   1d266:	4620      	mov	r0, r4
   1d268:	b002      	add	sp, #8
   1d26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *out_att_err = BLE_ATT_ERR_UNLIKELY;
   1d26e:	230e      	movs	r3, #14
   1d270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1d272:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_EMSGSIZE;
   1d274:	2404      	movs	r4, #4
        goto done;
   1d276:	e7f3      	b.n	1d260 <ble_att_svr_read_flat+0x40>
        rc = BLE_HS_ENOMEM;
   1d278:	2406      	movs	r4, #6
   1d27a:	e7f1      	b.n	1d260 <ble_att_svr_read_flat+0x40>

0001d27c <ble_att_svr_fill_type_value_entry>:
{
   1d27c:	b530      	push	{r4, r5, lr}
   1d27e:	b083      	sub	sp, #12
   1d280:	4604      	mov	r4, r0
    rsp_sz = OS_MBUF_PKTHDR(om)->omp_len + 4;
   1d282:	8a00      	ldrh	r0, [r0, #16]
   1d284:	3004      	adds	r0, #4
    if (rsp_sz > mtu) {
   1d286:	4298      	cmp	r0, r3
   1d288:	dd02      	ble.n	1d290 <ble_att_svr_fill_type_value_entry+0x14>
        return 0;
   1d28a:	2000      	movs	r0, #0
}
   1d28c:	b003      	add	sp, #12
   1d28e:	bd30      	pop	{r4, r5, pc}
   1d290:	4615      	mov	r5, r2
    put_le16(&u16, first);
   1d292:	f10d 0006 	add.w	r0, sp, #6
   1d296:	f010 f8ff 	bl	2d498 <put_le16>
    rc = os_mbuf_append(om, &u16, 2);
   1d29a:	2202      	movs	r2, #2
   1d29c:	f10d 0106 	add.w	r1, sp, #6
   1d2a0:	4620      	mov	r0, r4
   1d2a2:	f7f8 fa00 	bl	156a6 <os_mbuf_append>
    if (rc != 0) {
   1d2a6:	b968      	cbnz	r0, 1d2c4 <ble_att_svr_fill_type_value_entry+0x48>
    put_le16(&u16, last);
   1d2a8:	4629      	mov	r1, r5
   1d2aa:	f10d 0006 	add.w	r0, sp, #6
   1d2ae:	f010 f8f3 	bl	2d498 <put_le16>
    rc = os_mbuf_append(om, &u16, 2);
   1d2b2:	2202      	movs	r2, #2
   1d2b4:	f10d 0106 	add.w	r1, sp, #6
   1d2b8:	4620      	mov	r0, r4
   1d2ba:	f7f8 f9f4 	bl	156a6 <os_mbuf_append>
    if (rc != 0) {
   1d2be:	b930      	cbnz	r0, 1d2ce <ble_att_svr_fill_type_value_entry+0x52>
    return BLE_HS_EAGAIN;
   1d2c0:	2001      	movs	r0, #1
   1d2c2:	e7e3      	b.n	1d28c <ble_att_svr_fill_type_value_entry+0x10>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1d2c4:	2311      	movs	r3, #17
   1d2c6:	9a06      	ldr	r2, [sp, #24]
   1d2c8:	7013      	strb	r3, [r2, #0]
        return BLE_HS_ENOMEM;
   1d2ca:	2006      	movs	r0, #6
   1d2cc:	e7de      	b.n	1d28c <ble_att_svr_fill_type_value_entry+0x10>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1d2ce:	2311      	movs	r3, #17
   1d2d0:	9a06      	ldr	r2, [sp, #24]
   1d2d2:	7013      	strb	r3, [r2, #0]
        return BLE_HS_ENOMEM;
   1d2d4:	2006      	movs	r0, #6
   1d2d6:	e7d9      	b.n	1d28c <ble_att_svr_fill_type_value_entry+0x10>

0001d2d8 <ble_att_svr_fill_type_value>:
{
   1d2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d2dc:	b08d      	sub	sp, #52	; 0x34
   1d2de:	4682      	mov	sl, r0
   1d2e0:	460e      	mov	r6, r1
   1d2e2:	4690      	mov	r8, r2
   1d2e4:	9305      	str	r3, [sp, #20]
   1d2e6:	f8bd b060 	ldrh.w	fp, [sp, #96]	; 0x60
   1d2ea:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1d2ee:	4b33      	ldr	r3, [pc, #204]	; (1d3bc <ble_att_svr_fill_type_value+0xe4>)
   1d2f0:	681c      	ldr	r4, [r3, #0]
    prev = 0;
   1d2f2:	2700      	movs	r7, #0
    first = 0;
   1d2f4:	463d      	mov	r5, r7
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1d2f6:	e015      	b.n	1d324 <ble_att_svr_fill_type_value+0x4c>
            rc = ble_att_svr_fill_type_value_entry(txom, first, prev, mtu,
   1d2f8:	f8cd 9000 	str.w	r9, [sp]
   1d2fc:	465b      	mov	r3, fp
   1d2fe:	463a      	mov	r2, r7
   1d300:	4629      	mov	r1, r5
   1d302:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1d304:	f7ff ffba 	bl	1d27c <ble_att_svr_fill_type_value_entry>
   1d308:	4603      	mov	r3, r0
            if (rc != BLE_HS_EAGAIN) {
   1d30a:	2801      	cmp	r0, #1
   1d30c:	d13a      	bne.n	1d384 <ble_att_svr_fill_type_value+0xac>
            if (ha->ha_handle_id > end_handle) {
   1d30e:	8963      	ldrh	r3, [r4, #10]
   1d310:	4543      	cmp	r3, r8
   1d312:	d833      	bhi.n	1d37c <ble_att_svr_fill_type_value+0xa4>
            prev = 0;
   1d314:	2700      	movs	r7, #0
            first = 0;
   1d316:	463d      	mov	r5, r7
        if (ble_uuid_cmp(ha->ha_uuid, &attr_type.u) == 0) {
   1d318:	a905      	add	r1, sp, #20
   1d31a:	6860      	ldr	r0, [r4, #4]
   1d31c:	f009 faa2 	bl	26864 <ble_uuid_cmp>
   1d320:	b188      	cbz	r0, 1d346 <ble_att_svr_fill_type_value+0x6e>
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1d322:	6824      	ldr	r4, [r4, #0]
   1d324:	b364      	cbz	r4, 1d380 <ble_att_svr_fill_type_value+0xa8>
        if (ha->ha_handle_id < start_handle) {
   1d326:	8963      	ldrh	r3, [r4, #10]
   1d328:	42b3      	cmp	r3, r6
   1d32a:	d3fa      	bcc.n	1d322 <ble_att_svr_fill_type_value+0x4a>
        if (!first && ha->ha_handle_id > end_handle) {
   1d32c:	b90d      	cbnz	r5, 1d332 <ble_att_svr_fill_type_value+0x5a>
   1d32e:	4543      	cmp	r3, r8
   1d330:	d826      	bhi.n	1d380 <ble_att_svr_fill_type_value+0xa8>
        if (first) {
   1d332:	2d00      	cmp	r5, #0
   1d334:	d0f0      	beq.n	1d318 <ble_att_svr_fill_type_value+0x40>
            if (!ble_att_svr_is_valid_group_end(&attr_type.u, ha->ha_uuid)) {
   1d336:	6861      	ldr	r1, [r4, #4]
   1d338:	a805      	add	r0, sp, #20
   1d33a:	f7ff ff3a 	bl	1d1b2 <ble_att_svr_is_valid_group_end>
   1d33e:	2800      	cmp	r0, #0
   1d340:	d1da      	bne.n	1d2f8 <ble_att_svr_fill_type_value+0x20>
                prev = ha->ha_handle_id;
   1d342:	8967      	ldrh	r7, [r4, #10]
                continue;
   1d344:	e7ed      	b.n	1d322 <ble_att_svr_fill_type_value+0x4a>
            rc = ble_att_svr_read_flat(conn_handle, ha, 0, sizeof buf, buf,
   1d346:	f8cd 9008 	str.w	r9, [sp, #8]
   1d34a:	f10d 031e 	add.w	r3, sp, #30
   1d34e:	9301      	str	r3, [sp, #4]
   1d350:	ab08      	add	r3, sp, #32
   1d352:	9300      	str	r3, [sp, #0]
   1d354:	2310      	movs	r3, #16
   1d356:	2200      	movs	r2, #0
   1d358:	4621      	mov	r1, r4
   1d35a:	4650      	mov	r0, sl
   1d35c:	f7ff ff60 	bl	1d220 <ble_att_svr_read_flat>
            if (rc != 0) {
   1d360:	4603      	mov	r3, r0
   1d362:	b978      	cbnz	r0, 1d384 <ble_att_svr_fill_type_value+0xac>
            rc = os_mbuf_cmpf(rxom, sizeof(struct ble_att_find_type_value_req),
   1d364:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1d368:	aa08      	add	r2, sp, #32
   1d36a:	2106      	movs	r1, #6
   1d36c:	9816      	ldr	r0, [sp, #88]	; 0x58
   1d36e:	f7f8 faa9 	bl	158c4 <os_mbuf_cmpf>
            if (rc == 0) {
   1d372:	2800      	cmp	r0, #0
   1d374:	d1d5      	bne.n	1d322 <ble_att_svr_fill_type_value+0x4a>
                first = ha->ha_handle_id;
   1d376:	8965      	ldrh	r5, [r4, #10]
                prev = ha->ha_handle_id;
   1d378:	462f      	mov	r7, r5
   1d37a:	e7d2      	b.n	1d322 <ble_att_svr_fill_type_value+0x4a>
            prev = 0;
   1d37c:	2700      	movs	r7, #0
            first = 0;
   1d37e:	463d      	mov	r5, r7
    if (first) {
   1d380:	b94d      	cbnz	r5, 1d396 <ble_att_svr_fill_type_value+0xbe>
        rc = 0;
   1d382:	2300      	movs	r3, #0
    any_entries = OS_MBUF_PKTHDR(txom)->omp_len >
   1d384:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1d386:	8a12      	ldrh	r2, [r2, #16]
    if (rc == 0 && !any_entries) {
   1d388:	b90b      	cbnz	r3, 1d38e <ble_att_svr_fill_type_value+0xb6>
   1d38a:	2a01      	cmp	r2, #1
   1d38c:	d910      	bls.n	1d3b0 <ble_att_svr_fill_type_value+0xd8>
}
   1d38e:	4618      	mov	r0, r3
   1d390:	b00d      	add	sp, #52	; 0x34
   1d392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = ble_att_svr_fill_type_value_entry(txom, first, prev, mtu,
   1d396:	f8cd 9000 	str.w	r9, [sp]
   1d39a:	465b      	mov	r3, fp
   1d39c:	463a      	mov	r2, r7
   1d39e:	4629      	mov	r1, r5
   1d3a0:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1d3a2:	f7ff ff6b 	bl	1d27c <ble_att_svr_fill_type_value_entry>
   1d3a6:	4603      	mov	r3, r0
        if (rc == BLE_HS_EAGAIN) {
   1d3a8:	2801      	cmp	r0, #1
   1d3aa:	d1eb      	bne.n	1d384 <ble_att_svr_fill_type_value+0xac>
            rc = 0;
   1d3ac:	2300      	movs	r3, #0
   1d3ae:	e7e9      	b.n	1d384 <ble_att_svr_fill_type_value+0xac>
        *out_att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   1d3b0:	230a      	movs	r3, #10
   1d3b2:	f889 3000 	strb.w	r3, [r9]
        return BLE_HS_ENOENT;
   1d3b6:	2305      	movs	r3, #5
   1d3b8:	e7e9      	b.n	1d38e <ble_att_svr_fill_type_value+0xb6>
   1d3ba:	bf00      	nop
   1d3bc:	10003584 	.word	0x10003584

0001d3c0 <ble_att_svr_build_find_type_value_rsp>:
{
   1d3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d3c4:	b088      	sub	sp, #32
   1d3c6:	4604      	mov	r4, r0
   1d3c8:	4688      	mov	r8, r1
   1d3ca:	4617      	mov	r7, r2
   1d3cc:	9305      	str	r3, [sp, #20]
   1d3ce:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1d3d0:	9d10      	ldr	r5, [sp, #64]	; 0x40
    rc = ble_att_svr_pkt(rxom, &txom, out_att_err);
   1d3d2:	462a      	mov	r2, r5
   1d3d4:	a907      	add	r1, sp, #28
   1d3d6:	4630      	mov	r0, r6
   1d3d8:	f7ff fdef 	bl	1cfba <ble_att_svr_pkt>
    if (rc != 0) {
   1d3dc:	b128      	cbz	r0, 1d3ea <ble_att_svr_build_find_type_value_rsp+0x2a>
    *out_txom = txom;
   1d3de:	9a07      	ldr	r2, [sp, #28]
   1d3e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d3e2:	601a      	str	r2, [r3, #0]
}
   1d3e4:	b008      	add	sp, #32
   1d3e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    buf = ble_att_cmd_prepare(BLE_ATT_OP_FIND_TYPE_VALUE_RSP, 0, txom);
   1d3ea:	9a07      	ldr	r2, [sp, #28]
   1d3ec:	2100      	movs	r1, #0
   1d3ee:	2007      	movs	r0, #7
   1d3f0:	f7ff fc0b 	bl	1cc0a <ble_att_cmd_prepare>
    if (buf == NULL) {
   1d3f4:	b178      	cbz	r0, 1d416 <ble_att_svr_build_find_type_value_rsp+0x56>
    mtu = ble_att_mtu(conn_handle);
   1d3f6:	4620      	mov	r0, r4
   1d3f8:	f7ff fb11 	bl	1ca1e <ble_att_mtu>
    rc = ble_att_svr_fill_type_value(conn_handle, start_handle, end_handle,
   1d3fc:	9503      	str	r5, [sp, #12]
   1d3fe:	9002      	str	r0, [sp, #8]
   1d400:	9b07      	ldr	r3, [sp, #28]
   1d402:	9301      	str	r3, [sp, #4]
   1d404:	6833      	ldr	r3, [r6, #0]
   1d406:	9300      	str	r3, [sp, #0]
   1d408:	9b05      	ldr	r3, [sp, #20]
   1d40a:	463a      	mov	r2, r7
   1d40c:	4641      	mov	r1, r8
   1d40e:	4620      	mov	r0, r4
   1d410:	f7ff ff62 	bl	1d2d8 <ble_att_svr_fill_type_value>
    if (rc != 0) {
   1d414:	e7e3      	b.n	1d3de <ble_att_svr_build_find_type_value_rsp+0x1e>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1d416:	2311      	movs	r3, #17
   1d418:	702b      	strb	r3, [r5, #0]
        rc = BLE_HS_ENOMEM;
   1d41a:	2006      	movs	r0, #6
        goto done;
   1d41c:	e7df      	b.n	1d3de <ble_att_svr_build_find_type_value_rsp+0x1e>

0001d41e <ble_att_svr_service_uuid>:
{
   1d41e:	b510      	push	{r4, lr}
   1d420:	b08a      	sub	sp, #40	; 0x28
   1d422:	460c      	mov	r4, r1
    rc = ble_att_svr_read_flat(BLE_HS_CONN_HANDLE_NONE, entry, 0, sizeof(val), val,
   1d424:	9202      	str	r2, [sp, #8]
   1d426:	f10d 0316 	add.w	r3, sp, #22
   1d42a:	9301      	str	r3, [sp, #4]
   1d42c:	ab06      	add	r3, sp, #24
   1d42e:	9300      	str	r3, [sp, #0]
   1d430:	2310      	movs	r3, #16
   1d432:	2200      	movs	r2, #0
   1d434:	4601      	mov	r1, r0
   1d436:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1d43a:	f7ff fef1 	bl	1d220 <ble_att_svr_read_flat>
    if (rc != 0) {
   1d43e:	b108      	cbz	r0, 1d444 <ble_att_svr_service_uuid+0x26>
}
   1d440:	b00a      	add	sp, #40	; 0x28
   1d442:	bd10      	pop	{r4, pc}
    rc = ble_uuid_init_from_buf(uuid, val, attr_len);
   1d444:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1d448:	a906      	add	r1, sp, #24
   1d44a:	4620      	mov	r0, r4
   1d44c:	f009 f9e2 	bl	26814 <ble_uuid_init_from_buf>
    return rc;
   1d450:	e7f6      	b.n	1d440 <ble_att_svr_service_uuid+0x22>
	...

0001d454 <ble_att_svr_build_read_group_type_rsp>:
{
   1d454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d458:	b08b      	sub	sp, #44	; 0x2c
   1d45a:	460e      	mov	r6, r1
   1d45c:	4617      	mov	r7, r2
   1d45e:	4698      	mov	r8, r3
   1d460:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
   1d464:	2500      	movs	r5, #0
    *att_err = 0;
   1d466:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1d468:	701d      	strb	r5, [r3, #0]
    *err_handle = start_handle;
   1d46a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1d46c:	8019      	strh	r1, [r3, #0]
    mtu = ble_att_mtu(conn_handle);
   1d46e:	f7ff fad6 	bl	1ca1e <ble_att_mtu>
   1d472:	9003      	str	r0, [sp, #12]
    txom = *rxom;
   1d474:	f8d9 a000 	ldr.w	sl, [r9]
    *rxom = NULL;
   1d478:	f8c9 5000 	str.w	r5, [r9]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1d47c:	f8ba 1010 	ldrh.w	r1, [sl, #16]
   1d480:	4650      	mov	r0, sl
   1d482:	f7f8 f9ce 	bl	15822 <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_READ_GROUP_TYPE_RSP, sizeof(*rsp),
   1d486:	4652      	mov	r2, sl
   1d488:	2101      	movs	r1, #1
   1d48a:	2011      	movs	r0, #17
   1d48c:	f7ff fbbd 	bl	1cc0a <ble_att_cmd_prepare>
    if (rsp == NULL) {
   1d490:	b130      	cbz	r0, 1d4a0 <ble_att_svr_build_read_group_type_rsp+0x4c>
   1d492:	4683      	mov	fp, r0
    rsp->bagp_length = 0;
   1d494:	2500      	movs	r5, #0
   1d496:	7005      	strb	r5, [r0, #0]
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   1d498:	4b4b      	ldr	r3, [pc, #300]	; (1d5c8 <ble_att_svr_build_read_group_type_rsp+0x174>)
   1d49a:	681c      	ldr	r4, [r3, #0]
    end_group_handle = 0;
   1d49c:	46a9      	mov	r9, r5
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   1d49e:	e03e      	b.n	1d51e <ble_att_svr_build_read_group_type_rsp+0xca>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1d4a0:	2311      	movs	r3, #17
   1d4a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1d4a4:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   1d4a6:	2306      	movs	r3, #6
    end_group_handle = 0;
   1d4a8:	46a9      	mov	r9, r5
        goto done;
   1d4aa:	e059      	b.n	1d560 <ble_att_svr_build_read_group_type_rsp+0x10c>
            if (!ble_att_svr_is_valid_read_group_type(entry->ha_uuid)) {
   1d4ac:	6860      	ldr	r0, [r4, #4]
   1d4ae:	f7ff feac 	bl	1d20a <ble_att_svr_is_valid_read_group_type>
   1d4b2:	b910      	cbnz	r0, 1d4ba <ble_att_svr_build_read_group_type_rsp+0x66>
                end_group_handle = entry->ha_handle_id;
   1d4b4:	f8b4 900a 	ldrh.w	r9, [r4, #10]
   1d4b8:	e03a      	b.n	1d530 <ble_att_svr_build_read_group_type_rsp+0xdc>
                rc = ble_att_svr_read_group_type_entry_write(
   1d4ba:	ab05      	add	r3, sp, #20
   1d4bc:	9300      	str	r3, [sp, #0]
   1d4be:	464b      	mov	r3, r9
   1d4c0:	462a      	mov	r2, r5
   1d4c2:	9903      	ldr	r1, [sp, #12]
   1d4c4:	4650      	mov	r0, sl
   1d4c6:	f7ff fe3a 	bl	1d13e <ble_att_svr_read_group_type_entry_write>
                if (rc != 0) {
   1d4ca:	4603      	mov	r3, r0
   1d4cc:	b918      	cbnz	r0, 1d4d6 <ble_att_svr_build_read_group_type_rsp+0x82>
                end_group_handle = 0;
   1d4ce:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   1d4d2:	464d      	mov	r5, r9
   1d4d4:	e02e      	b.n	1d534 <ble_att_svr_build_read_group_type_rsp+0xe0>
                    *err_handle = entry->ha_handle_id;
   1d4d6:	8962      	ldrh	r2, [r4, #10]
   1d4d8:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1d4da:	800a      	strh	r2, [r1, #0]
                    if (rc == BLE_HS_ENOMEM) {
   1d4dc:	2806      	cmp	r0, #6
   1d4de:	d003      	beq.n	1d4e8 <ble_att_svr_build_read_group_type_rsp+0x94>
                end_group_handle = 0;
   1d4e0:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   1d4e4:	464d      	mov	r5, r9
                    goto done;
   1d4e6:	e03b      	b.n	1d560 <ble_att_svr_build_read_group_type_rsp+0x10c>
                        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1d4e8:	2211      	movs	r2, #17
   1d4ea:	9916      	ldr	r1, [sp, #88]	; 0x58
   1d4ec:	700a      	strb	r2, [r1, #0]
   1d4ee:	e7f7      	b.n	1d4e0 <ble_att_svr_build_read_group_type_rsp+0x8c>
                    *err_handle = entry->ha_handle_id;
   1d4f0:	8962      	ldrh	r2, [r4, #10]
   1d4f2:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1d4f4:	800a      	strh	r2, [r1, #0]
                    goto done;
   1d4f6:	e033      	b.n	1d560 <ble_att_svr_build_read_group_type_rsp+0x10c>
                    if (service_uuid.u.type == BLE_UUID_TYPE_16) {
   1d4f8:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1d4fc:	2b10      	cmp	r3, #16
   1d4fe:	d003      	beq.n	1d508 <ble_att_svr_build_read_group_type_rsp+0xb4>
                        rsp->bagp_length = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_128;
   1d500:	2314      	movs	r3, #20
   1d502:	f88b 3000 	strb.w	r3, [fp]
   1d506:	e007      	b.n	1d518 <ble_att_svr_build_read_group_type_rsp+0xc4>
                        rsp->bagp_length = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_16;
   1d508:	2306      	movs	r3, #6
   1d50a:	f88b 3000 	strb.w	r3, [fp]
   1d50e:	e003      	b.n	1d518 <ble_att_svr_build_read_group_type_rsp+0xc4>
                    if (service_uuid.u.type != BLE_UUID_TYPE_16) {
   1d510:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1d514:	2a10      	cmp	r2, #16
   1d516:	d123      	bne.n	1d560 <ble_att_svr_build_read_group_type_rsp+0x10c>
                start_group_handle = entry->ha_handle_id;
   1d518:	8965      	ldrh	r5, [r4, #10]
                end_group_handle = entry->ha_handle_id;
   1d51a:	46a9      	mov	r9, r5
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   1d51c:	6824      	ldr	r4, [r4, #0]
   1d51e:	2c00      	cmp	r4, #0
   1d520:	d03a      	beq.n	1d598 <ble_att_svr_build_read_group_type_rsp+0x144>
        if (entry->ha_handle_id < start_handle) {
   1d522:	8963      	ldrh	r3, [r4, #10]
   1d524:	42b3      	cmp	r3, r6
   1d526:	d3f9      	bcc.n	1d51c <ble_att_svr_build_read_group_type_rsp+0xc8>
        if (entry->ha_handle_id > end_handle) {
   1d528:	42bb      	cmp	r3, r7
   1d52a:	d837      	bhi.n	1d59c <ble_att_svr_build_read_group_type_rsp+0x148>
        if (start_group_handle != 0) {
   1d52c:	2d00      	cmp	r5, #0
   1d52e:	d1bd      	bne.n	1d4ac <ble_att_svr_build_read_group_type_rsp+0x58>
        if (start_group_handle == 0) {
   1d530:	2d00      	cmp	r5, #0
   1d532:	d1f3      	bne.n	1d51c <ble_att_svr_build_read_group_type_rsp+0xc8>
            if (ble_uuid_cmp(entry->ha_uuid, group_uuid) == 0) {
   1d534:	4641      	mov	r1, r8
   1d536:	6860      	ldr	r0, [r4, #4]
   1d538:	f009 f994 	bl	26864 <ble_uuid_cmp>
   1d53c:	2800      	cmp	r0, #0
   1d53e:	d1ed      	bne.n	1d51c <ble_att_svr_build_read_group_type_rsp+0xc8>
                rc = ble_att_svr_service_uuid(entry, &service_uuid, att_err);
   1d540:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1d542:	a905      	add	r1, sp, #20
   1d544:	4620      	mov	r0, r4
   1d546:	f7ff ff6a 	bl	1d41e <ble_att_svr_service_uuid>
                if (rc != 0) {
   1d54a:	4603      	mov	r3, r0
   1d54c:	2800      	cmp	r0, #0
   1d54e:	d1cf      	bne.n	1d4f0 <ble_att_svr_build_read_group_type_rsp+0x9c>
                switch (rsp->bagp_length) {
   1d550:	f89b 2000 	ldrb.w	r2, [fp]
   1d554:	2a06      	cmp	r2, #6
   1d556:	d0db      	beq.n	1d510 <ble_att_svr_build_read_group_type_rsp+0xbc>
   1d558:	2a14      	cmp	r2, #20
   1d55a:	d018      	beq.n	1d58e <ble_att_svr_build_read_group_type_rsp+0x13a>
   1d55c:	2a00      	cmp	r2, #0
   1d55e:	d0cb      	beq.n	1d4f8 <ble_att_svr_build_read_group_type_rsp+0xa4>
    if (rc == 0) {
   1d560:	bb2b      	cbnz	r3, 1d5ae <ble_att_svr_build_read_group_type_rsp+0x15a>
        if (start_group_handle != 0) {
   1d562:	b15d      	cbz	r5, 1d57c <ble_att_svr_build_read_group_type_rsp+0x128>
            if (entry == NULL) {
   1d564:	b1e4      	cbz	r4, 1d5a0 <ble_att_svr_build_read_group_type_rsp+0x14c>
            rc = ble_att_svr_read_group_type_entry_write(txom, mtu,
   1d566:	ab05      	add	r3, sp, #20
   1d568:	9300      	str	r3, [sp, #0]
   1d56a:	464b      	mov	r3, r9
   1d56c:	462a      	mov	r2, r5
   1d56e:	9903      	ldr	r1, [sp, #12]
   1d570:	4650      	mov	r0, sl
   1d572:	f7ff fde4 	bl	1d13e <ble_att_svr_read_group_type_entry_write>
   1d576:	4603      	mov	r3, r0
            if (rc == BLE_HS_ENOMEM) {
   1d578:	2806      	cmp	r0, #6
   1d57a:	d014      	beq.n	1d5a6 <ble_att_svr_build_read_group_type_rsp+0x152>
        if (OS_MBUF_PKTLEN(txom) <= BLE_ATT_READ_GROUP_TYPE_RSP_BASE_SZ) {
   1d57c:	f8ba 2010 	ldrh.w	r2, [sl, #16]
   1d580:	2a02      	cmp	r2, #2
   1d582:	d814      	bhi.n	1d5ae <ble_att_svr_build_read_group_type_rsp+0x15a>
            *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   1d584:	230a      	movs	r3, #10
   1d586:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1d588:	7013      	strb	r3, [r2, #0]
            rc = BLE_HS_ENOENT;
   1d58a:	2305      	movs	r3, #5
   1d58c:	e010      	b.n	1d5b0 <ble_att_svr_build_read_group_type_rsp+0x15c>
                    if (service_uuid.u.type == BLE_UUID_TYPE_16) {
   1d58e:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1d592:	2a10      	cmp	r2, #16
   1d594:	d1c0      	bne.n	1d518 <ble_att_svr_build_read_group_type_rsp+0xc4>
   1d596:	e7e3      	b.n	1d560 <ble_att_svr_build_read_group_type_rsp+0x10c>
    rc = 0;
   1d598:	2300      	movs	r3, #0
   1d59a:	e7e1      	b.n	1d560 <ble_att_svr_build_read_group_type_rsp+0x10c>
            rc = 0;
   1d59c:	2300      	movs	r3, #0
   1d59e:	e7df      	b.n	1d560 <ble_att_svr_build_read_group_type_rsp+0x10c>
                end_group_handle = 0xffff;
   1d5a0:	f64f 79ff 	movw	r9, #65535	; 0xffff
   1d5a4:	e7df      	b.n	1d566 <ble_att_svr_build_read_group_type_rsp+0x112>
                *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1d5a6:	2211      	movs	r2, #17
   1d5a8:	9916      	ldr	r1, [sp, #88]	; 0x58
   1d5aa:	700a      	strb	r2, [r1, #0]
   1d5ac:	e7e6      	b.n	1d57c <ble_att_svr_build_read_group_type_rsp+0x128>
    if (rc == 0 || rc == BLE_HS_EMSGSIZE) {
   1d5ae:	b10b      	cbz	r3, 1d5b4 <ble_att_svr_build_read_group_type_rsp+0x160>
   1d5b0:	2b04      	cmp	r3, #4
   1d5b2:	d006      	beq.n	1d5c2 <ble_att_svr_build_read_group_type_rsp+0x16e>
    *out_txom = txom;
   1d5b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1d5b6:	f8c2 a000 	str.w	sl, [r2]
}
   1d5ba:	4618      	mov	r0, r3
   1d5bc:	b00b      	add	sp, #44	; 0x2c
   1d5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = 0;
   1d5c2:	2300      	movs	r3, #0
   1d5c4:	e7f6      	b.n	1d5b4 <ble_att_svr_build_read_group_type_rsp+0x160>
   1d5c6:	bf00      	nop
   1d5c8:	10003584 	.word	0x10003584

0001d5cc <ble_att_svr_prep_free>:
    if (entry != NULL) {
   1d5cc:	b148      	cbz	r0, 1d5e2 <ble_att_svr_prep_free+0x16>
{
   1d5ce:	b510      	push	{r4, lr}
   1d5d0:	4604      	mov	r4, r0
        os_mbuf_free_chain(entry->bape_value);
   1d5d2:	6880      	ldr	r0, [r0, #8]
   1d5d4:	f7f8 f84e 	bl	15674 <os_mbuf_free_chain>
        os_memblock_put(&ble_att_svr_prep_entry_pool, entry);
   1d5d8:	4621      	mov	r1, r4
   1d5da:	4802      	ldr	r0, [pc, #8]	; (1d5e4 <ble_att_svr_prep_free+0x18>)
   1d5dc:	f7f8 fc4f 	bl	15e7e <os_memblock_put>
}
   1d5e0:	bd10      	pop	{r4, pc}
   1d5e2:	4770      	bx	lr
   1d5e4:	1000388c 	.word	0x1000388c

0001d5e8 <ble_att_svr_prep_alloc>:
{
   1d5e8:	b570      	push	{r4, r5, r6, lr}
   1d5ea:	4606      	mov	r6, r0
    entry = os_memblock_get(&ble_att_svr_prep_entry_pool);
   1d5ec:	480c      	ldr	r0, [pc, #48]	; (1d620 <ble_att_svr_prep_alloc+0x38>)
   1d5ee:	f7f8 fc1e 	bl	15e2e <os_memblock_get>
    if (entry == NULL) {
   1d5f2:	4604      	mov	r4, r0
   1d5f4:	b150      	cbz	r0, 1d60c <ble_att_svr_prep_alloc+0x24>
    memset(entry, 0, sizeof *entry);
   1d5f6:	2300      	movs	r3, #0
   1d5f8:	6003      	str	r3, [r0, #0]
   1d5fa:	6043      	str	r3, [r0, #4]
   1d5fc:	6083      	str	r3, [r0, #8]
    entry->bape_value = ble_hs_mbuf_l2cap_pkt();
   1d5fe:	f006 f965 	bl	238cc <ble_hs_mbuf_l2cap_pkt>
   1d602:	4605      	mov	r5, r0
   1d604:	60a0      	str	r0, [r4, #8]
    if (entry->bape_value == NULL) {
   1d606:	b120      	cbz	r0, 1d612 <ble_att_svr_prep_alloc+0x2a>
}
   1d608:	4620      	mov	r0, r4
   1d60a:	bd70      	pop	{r4, r5, r6, pc}
        *att_err = BLE_ATT_ERR_PREPARE_QUEUE_FULL;
   1d60c:	2309      	movs	r3, #9
   1d60e:	7033      	strb	r3, [r6, #0]
        return NULL;
   1d610:	e7fa      	b.n	1d608 <ble_att_svr_prep_alloc+0x20>
        ble_att_svr_prep_free(entry);
   1d612:	4620      	mov	r0, r4
   1d614:	f7ff ffda 	bl	1d5cc <ble_att_svr_prep_free>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1d618:	2311      	movs	r3, #17
   1d61a:	7033      	strb	r3, [r6, #0]
        return NULL;
   1d61c:	462c      	mov	r4, r5
   1d61e:	e7f3      	b.n	1d608 <ble_att_svr_prep_alloc+0x20>
   1d620:	1000388c 	.word	0x1000388c

0001d624 <ble_att_svr_insert_prep_entry>:
{
   1d624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d628:	4688      	mov	r8, r1
   1d62a:	4691      	mov	r9, r2
   1d62c:	461d      	mov	r5, r3
   1d62e:	9f08      	ldr	r7, [sp, #32]
    conn = ble_hs_conn_find_assert(conn_handle);
   1d630:	f005 f8dc 	bl	227ec <ble_hs_conn_find_assert>
   1d634:	4606      	mov	r6, r0
    prep_entry = ble_att_svr_prep_alloc(out_att_err);
   1d636:	4638      	mov	r0, r7
   1d638:	f7ff ffd6 	bl	1d5e8 <ble_att_svr_prep_alloc>
    if (prep_entry == NULL) {
   1d63c:	b368      	cbz	r0, 1d69a <ble_att_svr_insert_prep_entry+0x76>
   1d63e:	4604      	mov	r4, r0
    prep_entry->bape_handle = handle;
   1d640:	f8a0 8004 	strh.w	r8, [r0, #4]
    prep_entry->bape_offset = offset;
   1d644:	f8a0 9006 	strh.w	r9, [r0, #6]
        OS_MBUF_PKTLEN(rxom) - sizeof(struct ble_att_prep_write_cmd));
   1d648:	8a2b      	ldrh	r3, [r5, #16]
    rc = os_mbuf_appendfrom(
   1d64a:	3b04      	subs	r3, #4
   1d64c:	b29b      	uxth	r3, r3
   1d64e:	2204      	movs	r2, #4
   1d650:	4629      	mov	r1, r5
   1d652:	6880      	ldr	r0, [r0, #8]
   1d654:	f7f8 f88c 	bl	15770 <os_mbuf_appendfrom>
    if (rc != 0) {
   1d658:	4605      	mov	r5, r0
   1d65a:	b9a0      	cbnz	r0, 1d686 <ble_att_svr_insert_prep_entry+0x62>
    prep_prev = ble_att_svr_prep_find_prev(&conn->bhc_att_svr,
   1d65c:	464a      	mov	r2, r9
   1d65e:	4641      	mov	r1, r8
   1d660:	f106 0044 	add.w	r0, r6, #68	; 0x44
   1d664:	f7ff fb20 	bl	1cca8 <ble_att_svr_prep_find_prev>
    if (prep_prev == NULL) {
   1d668:	b198      	cbz	r0, 1d692 <ble_att_svr_insert_prep_entry+0x6e>
        SLIST_INSERT_AFTER(prep_prev, prep_entry, bape_next);
   1d66a:	6802      	ldr	r2, [r0, #0]
   1d66c:	6022      	str	r2, [r4, #0]
   1d66e:	6004      	str	r4, [r0, #0]
}

static inline uint32_t
ble_npl_time_get(void)
{
    return os_time_get();
   1d670:	f7f8 ff96 	bl	165a0 <os_time_get>
        ble_npl_time_get() + BLE_HS_ATT_SVR_QUEUED_WRITE_TMO;
   1d674:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
   1d678:	3030      	adds	r0, #48	; 0x30
    conn->bhc_att_svr.basc_prep_timeout_at =
   1d67a:	64b0      	str	r0, [r6, #72]	; 0x48
    ble_hs_timer_resched();
   1d67c:	f004 fb34 	bl	21ce8 <ble_hs_timer_resched>
}
   1d680:	4628      	mov	r0, r5
   1d682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ble_att_svr_prep_free(prep_entry);
   1d686:	4620      	mov	r0, r4
   1d688:	f7ff ffa0 	bl	1d5cc <ble_att_svr_prep_free>
        *out_att_err = BLE_ATT_ERR_PREPARE_QUEUE_FULL;
   1d68c:	2309      	movs	r3, #9
   1d68e:	703b      	strb	r3, [r7, #0]
        return rc;
   1d690:	e7f6      	b.n	1d680 <ble_att_svr_insert_prep_entry+0x5c>
        SLIST_INSERT_HEAD(&conn->bhc_att_svr.basc_prep_list, prep_entry,
   1d692:	6c73      	ldr	r3, [r6, #68]	; 0x44
   1d694:	6023      	str	r3, [r4, #0]
   1d696:	6474      	str	r4, [r6, #68]	; 0x44
   1d698:	e7ea      	b.n	1d670 <ble_att_svr_insert_prep_entry+0x4c>
        return BLE_HS_ENOMEM;
   1d69a:	2506      	movs	r5, #6
   1d69c:	e7f0      	b.n	1d680 <ble_att_svr_insert_prep_entry+0x5c>

0001d69e <ble_att_svr_prep_extract>:
{
   1d69e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d6a2:	4605      	mov	r5, r0
   1d6a4:	4689      	mov	r9, r1
   1d6a6:	4690      	mov	r8, r2
    first = SLIST_FIRST(prep_list);
   1d6a8:	6803      	ldr	r3, [r0, #0]
    attr_handle = first->bape_handle;
   1d6aa:	889f      	ldrh	r7, [r3, #4]
    om = NULL;
   1d6ac:	2600      	movs	r6, #0
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   1d6ae:	e00b      	b.n	1d6c8 <ble_att_svr_prep_extract+0x2a>
            os_mbuf_concat(om, entry->bape_value);
   1d6b0:	68a1      	ldr	r1, [r4, #8]
   1d6b2:	4630      	mov	r0, r6
   1d6b4:	f7f8 f9e9 	bl	15a8a <os_mbuf_concat>
        entry->bape_value = NULL;
   1d6b8:	2300      	movs	r3, #0
   1d6ba:	60a3      	str	r3, [r4, #8]
        SLIST_REMOVE_HEAD(prep_list, bape_next);
   1d6bc:	682b      	ldr	r3, [r5, #0]
   1d6be:	681b      	ldr	r3, [r3, #0]
   1d6c0:	602b      	str	r3, [r5, #0]
        ble_att_svr_prep_free(entry);
   1d6c2:	4620      	mov	r0, r4
   1d6c4:	f7ff ff82 	bl	1d5cc <ble_att_svr_prep_free>
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   1d6c8:	682c      	ldr	r4, [r5, #0]
   1d6ca:	b134      	cbz	r4, 1d6da <ble_att_svr_prep_extract+0x3c>
        if (entry->bape_handle != attr_handle) {
   1d6cc:	88a3      	ldrh	r3, [r4, #4]
   1d6ce:	42bb      	cmp	r3, r7
   1d6d0:	d103      	bne.n	1d6da <ble_att_svr_prep_extract+0x3c>
        if (om == NULL) {
   1d6d2:	2e00      	cmp	r6, #0
   1d6d4:	d1ec      	bne.n	1d6b0 <ble_att_svr_prep_extract+0x12>
            om = entry->bape_value;
   1d6d6:	68a6      	ldr	r6, [r4, #8]
   1d6d8:	e7ee      	b.n	1d6b8 <ble_att_svr_prep_extract+0x1a>
    *out_attr_handle = attr_handle;
   1d6da:	f8a9 7000 	strh.w	r7, [r9]
    *out_om = om;
   1d6de:	f8c8 6000 	str.w	r6, [r8]
}
   1d6e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0001d6e8 <ble_att_svr_free_start_mem>:
     */
}

static void
ble_att_svr_free_start_mem(void)
{
   1d6e8:	b510      	push	{r4, lr}
    free(ble_att_svr_entry_mem);
   1d6ea:	4c03      	ldr	r4, [pc, #12]	; (1d6f8 <ble_att_svr_free_start_mem+0x10>)
   1d6ec:	6820      	ldr	r0, [r4, #0]
   1d6ee:	f010 f883 	bl	2d7f8 <free>
    ble_att_svr_entry_mem = NULL;
   1d6f2:	2300      	movs	r3, #0
   1d6f4:	6023      	str	r3, [r4, #0]
}
   1d6f6:	bd10      	pop	{r4, pc}
   1d6f8:	10003558 	.word	0x10003558

0001d6fc <ble_att_svr_register>:
{
   1d6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d700:	4680      	mov	r8, r0
   1d702:	460f      	mov	r7, r1
   1d704:	4616      	mov	r6, r2
   1d706:	461d      	mov	r5, r3
    entry = ble_att_svr_entry_alloc();
   1d708:	f7ff fb0e 	bl	1cd28 <ble_att_svr_entry_alloc>
    if (entry == NULL) {
   1d70c:	b1b8      	cbz	r0, 1d73e <ble_att_svr_register+0x42>
   1d70e:	4604      	mov	r4, r0
    entry->ha_uuid = uuid;
   1d710:	f8c0 8004 	str.w	r8, [r0, #4]
    entry->ha_flags = flags;
   1d714:	7207      	strb	r7, [r0, #8]
    entry->ha_min_key_size = min_key_size;
   1d716:	7246      	strb	r6, [r0, #9]
    entry->ha_handle_id = ble_att_svr_next_id();
   1d718:	f7ff fabe 	bl	1cc98 <ble_att_svr_next_id>
   1d71c:	8160      	strh	r0, [r4, #10]
    entry->ha_cb = cb;
   1d71e:	9b06      	ldr	r3, [sp, #24]
   1d720:	60e3      	str	r3, [r4, #12]
    entry->ha_cb_arg = cb_arg;
   1d722:	9b07      	ldr	r3, [sp, #28]
   1d724:	6123      	str	r3, [r4, #16]
    STAILQ_INSERT_TAIL(&ble_att_svr_list, entry, ha_next);
   1d726:	2300      	movs	r3, #0
   1d728:	6023      	str	r3, [r4, #0]
   1d72a:	4b07      	ldr	r3, [pc, #28]	; (1d748 <ble_att_svr_register+0x4c>)
   1d72c:	685a      	ldr	r2, [r3, #4]
   1d72e:	6014      	str	r4, [r2, #0]
   1d730:	605c      	str	r4, [r3, #4]
    if (handle_id != NULL) {
   1d732:	b135      	cbz	r5, 1d742 <ble_att_svr_register+0x46>
        *handle_id = entry->ha_handle_id;
   1d734:	8963      	ldrh	r3, [r4, #10]
   1d736:	802b      	strh	r3, [r5, #0]
    return 0;
   1d738:	2000      	movs	r0, #0
}
   1d73a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_ENOMEM;
   1d73e:	2006      	movs	r0, #6
   1d740:	e7fb      	b.n	1d73a <ble_att_svr_register+0x3e>
    return 0;
   1d742:	2000      	movs	r0, #0
   1d744:	e7f9      	b.n	1d73a <ble_att_svr_register+0x3e>
   1d746:	bf00      	nop
   1d748:	10003584 	.word	0x10003584

0001d74c <ble_att_svr_prev_handle>:
}
   1d74c:	4b01      	ldr	r3, [pc, #4]	; (1d754 <ble_att_svr_prev_handle+0x8>)
   1d74e:	8818      	ldrh	r0, [r3, #0]
   1d750:	4770      	bx	lr
   1d752:	bf00      	nop
   1d754:	10003580 	.word	0x10003580

0001d758 <ble_att_svr_find_by_handle>:
{
   1d758:	4602      	mov	r2, r0
    for (entry = STAILQ_FIRST(&ble_att_svr_list);
   1d75a:	4b04      	ldr	r3, [pc, #16]	; (1d76c <ble_att_svr_find_by_handle+0x14>)
   1d75c:	6818      	ldr	r0, [r3, #0]
   1d75e:	b120      	cbz	r0, 1d76a <ble_att_svr_find_by_handle+0x12>
        if (entry->ha_handle_id == handle_id) {
   1d760:	8943      	ldrh	r3, [r0, #10]
   1d762:	4293      	cmp	r3, r2
   1d764:	d001      	beq.n	1d76a <ble_att_svr_find_by_handle+0x12>
         entry = STAILQ_NEXT(entry, ha_next)) {
   1d766:	6800      	ldr	r0, [r0, #0]
   1d768:	e7f9      	b.n	1d75e <ble_att_svr_find_by_handle+0x6>
}
   1d76a:	4770      	bx	lr
   1d76c:	10003584 	.word	0x10003584

0001d770 <ble_att_svr_write_handle>:
{
   1d770:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d772:	b083      	sub	sp, #12
   1d774:	4607      	mov	r7, r0
   1d776:	4614      	mov	r4, r2
   1d778:	461d      	mov	r5, r3
   1d77a:	9e08      	ldr	r6, [sp, #32]
    entry = ble_att_svr_find_by_handle(attr_handle);
   1d77c:	4608      	mov	r0, r1
   1d77e:	f7ff ffeb 	bl	1d758 <ble_att_svr_find_by_handle>
    if (entry == NULL) {
   1d782:	b140      	cbz	r0, 1d796 <ble_att_svr_write_handle+0x26>
   1d784:	4601      	mov	r1, r0
    rc = ble_att_svr_write(conn_handle, entry, offset, om, out_att_err);
   1d786:	9600      	str	r6, [sp, #0]
   1d788:	462b      	mov	r3, r5
   1d78a:	4622      	mov	r2, r4
   1d78c:	4638      	mov	r0, r7
   1d78e:	f7ff fb9f 	bl	1ced0 <ble_att_svr_write>
}
   1d792:	b003      	add	sp, #12
   1d794:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (out_att_err != NULL) {
   1d796:	b10e      	cbz	r6, 1d79c <ble_att_svr_write_handle+0x2c>
            *out_att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1d798:	2301      	movs	r3, #1
   1d79a:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ENOENT;
   1d79c:	2005      	movs	r0, #5
   1d79e:	e7f8      	b.n	1d792 <ble_att_svr_write_handle+0x22>

0001d7a0 <ble_att_svr_prep_write>:
{
   1d7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d7a4:	b084      	sub	sp, #16
   1d7a6:	4606      	mov	r6, r0
   1d7a8:	460d      	mov	r5, r1
   1d7aa:	4617      	mov	r7, r2
    *err_handle = 0; /* Silence unnecessary warning. */
   1d7ac:	2300      	movs	r3, #0
   1d7ae:	8013      	strh	r3, [r2, #0]
    rc = ble_att_svr_prep_validate(prep_list, err_handle);
   1d7b0:	4611      	mov	r1, r2
   1d7b2:	4628      	mov	r0, r5
   1d7b4:	f7ff fa8a 	bl	1cccc <ble_att_svr_prep_validate>
    if (rc != 0) {
   1d7b8:	4680      	mov	r8, r0
   1d7ba:	b9f8      	cbnz	r0, 1d7fc <ble_att_svr_prep_write+0x5c>
    while (!SLIST_EMPTY(prep_list)) {
   1d7bc:	682b      	ldr	r3, [r5, #0]
   1d7be:	b1eb      	cbz	r3, 1d7fc <ble_att_svr_prep_write+0x5c>
        ble_att_svr_prep_extract(prep_list, &attr_handle, &om);
   1d7c0:	aa03      	add	r2, sp, #12
   1d7c2:	f10d 010a 	add.w	r1, sp, #10
   1d7c6:	4628      	mov	r0, r5
   1d7c8:	f7ff ff69 	bl	1d69e <ble_att_svr_prep_extract>
        attr = ble_att_svr_find_by_handle(attr_handle);
   1d7cc:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   1d7d0:	f7ff ffc2 	bl	1d758 <ble_att_svr_find_by_handle>
   1d7d4:	4601      	mov	r1, r0
        rc = ble_att_svr_write(conn_handle, attr, 0, &om, &att_err);
   1d7d6:	f10d 0309 	add.w	r3, sp, #9
   1d7da:	9300      	str	r3, [sp, #0]
   1d7dc:	ab03      	add	r3, sp, #12
   1d7de:	2200      	movs	r2, #0
   1d7e0:	4630      	mov	r0, r6
   1d7e2:	f7ff fb75 	bl	1ced0 <ble_att_svr_write>
   1d7e6:	4604      	mov	r4, r0
        os_mbuf_free_chain(om);
   1d7e8:	9803      	ldr	r0, [sp, #12]
   1d7ea:	f7f7 ff43 	bl	15674 <os_mbuf_free_chain>
        if (rc != 0) {
   1d7ee:	2c00      	cmp	r4, #0
   1d7f0:	d0e4      	beq.n	1d7bc <ble_att_svr_prep_write+0x1c>
            *err_handle = attr_handle;
   1d7f2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1d7f6:	803b      	strh	r3, [r7, #0]
            return att_err;
   1d7f8:	f89d 8009 	ldrb.w	r8, [sp, #9]
}
   1d7fc:	4640      	mov	r0, r8
   1d7fe:	b004      	add	sp, #16
   1d800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d804 <ble_att_svr_find_by_uuid>:
{
   1d804:	b570      	push	{r4, r5, r6, lr}
   1d806:	460d      	mov	r5, r1
   1d808:	4616      	mov	r6, r2
    if (prev == NULL) {
   1d80a:	b108      	cbz	r0, 1d810 <ble_att_svr_find_by_uuid+0xc>
        entry = STAILQ_NEXT(prev, ha_next);
   1d80c:	6804      	ldr	r4, [r0, #0]
   1d80e:	e003      	b.n	1d818 <ble_att_svr_find_by_uuid+0x14>
        entry = STAILQ_FIRST(&ble_att_svr_list);
   1d810:	4b09      	ldr	r3, [pc, #36]	; (1d838 <ble_att_svr_find_by_uuid+0x34>)
   1d812:	681c      	ldr	r4, [r3, #0]
   1d814:	e000      	b.n	1d818 <ble_att_svr_find_by_uuid+0x14>
         entry = STAILQ_NEXT(entry, ha_next)) {
   1d816:	6824      	ldr	r4, [r4, #0]
    for (;
   1d818:	b15c      	cbz	r4, 1d832 <ble_att_svr_find_by_uuid+0x2e>
         entry != NULL && entry->ha_handle_id <= end_handle;
   1d81a:	8963      	ldrh	r3, [r4, #10]
   1d81c:	42b3      	cmp	r3, r6
   1d81e:	d807      	bhi.n	1d830 <ble_att_svr_find_by_uuid+0x2c>
        if (uuid == NULL || ble_uuid_cmp(entry->ha_uuid, uuid) == 0) {
   1d820:	b13d      	cbz	r5, 1d832 <ble_att_svr_find_by_uuid+0x2e>
   1d822:	4629      	mov	r1, r5
   1d824:	6860      	ldr	r0, [r4, #4]
   1d826:	f009 f81d 	bl	26864 <ble_uuid_cmp>
   1d82a:	2800      	cmp	r0, #0
   1d82c:	d1f3      	bne.n	1d816 <ble_att_svr_find_by_uuid+0x12>
   1d82e:	e000      	b.n	1d832 <ble_att_svr_find_by_uuid+0x2e>
    return NULL;
   1d830:	2400      	movs	r4, #0
}
   1d832:	4620      	mov	r0, r4
   1d834:	bd70      	pop	{r4, r5, r6, pc}
   1d836:	bf00      	nop
   1d838:	10003584 	.word	0x10003584

0001d83c <ble_att_svr_build_read_type_rsp>:
{
   1d83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d840:	b08f      	sub	sp, #60	; 0x3c
   1d842:	9005      	str	r0, [sp, #20]
   1d844:	460d      	mov	r5, r1
   1d846:	4616      	mov	r6, r2
   1d848:	461f      	mov	r7, r3
   1d84a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1d84c:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
    *att_err = 0;    /* Silence unnecessary warning. */
   1d850:	2200      	movs	r2, #0
   1d852:	f88b 2000 	strb.w	r2, [fp]
    *err_handle = start_handle;
   1d856:	991b      	ldr	r1, [sp, #108]	; 0x6c
   1d858:	800d      	strh	r5, [r1, #0]
    txom = *rxom;
   1d85a:	f8d3 8000 	ldr.w	r8, [r3]
    *rxom = NULL;
   1d85e:	601a      	str	r2, [r3, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1d860:	f8b8 1010 	ldrh.w	r1, [r8, #16]
   1d864:	4640      	mov	r0, r8
   1d866:	f7f7 ffdc 	bl	15822 <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_READ_TYPE_RSP, sizeof(*rsp), txom);
   1d86a:	4642      	mov	r2, r8
   1d86c:	2101      	movs	r1, #1
   1d86e:	2009      	movs	r0, #9
   1d870:	f7ff f9cb 	bl	1cc0a <ble_att_cmd_prepare>
    if (rsp == NULL) {
   1d874:	9007      	str	r0, [sp, #28]
   1d876:	b148      	cbz	r0, 1d88c <ble_att_svr_build_read_type_rsp+0x50>
    mtu = ble_att_mtu(conn_handle);
   1d878:	9805      	ldr	r0, [sp, #20]
   1d87a:	f7ff f8d0 	bl	1ca1e <ble_att_mtu>
   1d87e:	4681      	mov	r9, r0
    prev_attr_len = 0;
   1d880:	f04f 0a00 	mov.w	sl, #0
    entry_written = 0;
   1d884:	f8cd a018 	str.w	sl, [sp, #24]
    entry = NULL;
   1d888:	4654      	mov	r4, sl
   1d88a:	e029      	b.n	1d8e0 <ble_att_svr_build_read_type_rsp+0xa4>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1d88c:	2311      	movs	r3, #17
   1d88e:	f88b 3000 	strb.w	r3, [fp]
        *err_handle = 0;
   1d892:	2300      	movs	r3, #0
   1d894:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1d896:	8013      	strh	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   1d898:	2206      	movs	r2, #6
    prev_attr_len = 0;
   1d89a:	469a      	mov	sl, r3
    entry_written = 0;
   1d89c:	9306      	str	r3, [sp, #24]
        goto done;
   1d89e:	e052      	b.n	1d946 <ble_att_svr_build_read_type_rsp+0x10a>
                *err_handle = entry->ha_handle_id;
   1d8a0:	8963      	ldrh	r3, [r4, #10]
   1d8a2:	991b      	ldr	r1, [sp, #108]	; 0x6c
   1d8a4:	800b      	strh	r3, [r1, #0]
                goto done;
   1d8a6:	e04e      	b.n	1d946 <ble_att_svr_build_read_type_rsp+0x10a>
            } else if (prev_attr_len != attr_len) {
   1d8a8:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   1d8ac:	4553      	cmp	r3, sl
   1d8ae:	d14a      	bne.n	1d946 <ble_att_svr_build_read_type_rsp+0x10a>
            txomlen = OS_MBUF_PKTHDR(txom)->omp_len + 2 + attr_len;
   1d8b0:	f8b8 3010 	ldrh.w	r3, [r8, #16]
   1d8b4:	3302      	adds	r3, #2
   1d8b6:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   1d8ba:	440b      	add	r3, r1
            if (txomlen > mtu) {
   1d8bc:	4599      	cmp	r9, r3
   1d8be:	db42      	blt.n	1d946 <ble_att_svr_build_read_type_rsp+0x10a>
            data = os_mbuf_extend(txom, 2 + attr_len);
   1d8c0:	3102      	adds	r1, #2
   1d8c2:	b289      	uxth	r1, r1
   1d8c4:	4640      	mov	r0, r8
   1d8c6:	f7f8 f902 	bl	15ace <os_mbuf_extend>
            if (data == NULL) {
   1d8ca:	b398      	cbz	r0, 1d934 <ble_att_svr_build_read_type_rsp+0xf8>
            data->handle = htole16(entry->ha_handle_id);
   1d8cc:	8962      	ldrh	r2, [r4, #10]
   1d8ce:	f820 2b02 	strh.w	r2, [r0], #2
            memcpy(data->value, buf, attr_len);
   1d8d2:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   1d8d6:	a908      	add	r1, sp, #32
   1d8d8:	f7f9 f8fc 	bl	16ad4 <memcpy>
            entry_written = 1;
   1d8dc:	2301      	movs	r3, #1
   1d8de:	9306      	str	r3, [sp, #24]
        entry = ble_att_svr_find_by_uuid(entry, uuid, end_handle);
   1d8e0:	4632      	mov	r2, r6
   1d8e2:	4639      	mov	r1, r7
   1d8e4:	4620      	mov	r0, r4
   1d8e6:	f7ff ff8d 	bl	1d804 <ble_att_svr_find_by_uuid>
        if (entry == NULL) {
   1d8ea:	4604      	mov	r4, r0
   1d8ec:	b350      	cbz	r0, 1d944 <ble_att_svr_build_read_type_rsp+0x108>
        if (entry->ha_handle_id >= start_handle) {
   1d8ee:	8943      	ldrh	r3, [r0, #10]
   1d8f0:	42ab      	cmp	r3, r5
   1d8f2:	d3f5      	bcc.n	1d8e0 <ble_att_svr_build_read_type_rsp+0xa4>
            rc = ble_att_svr_read_flat(conn_handle, entry, 0, sizeof buf, buf,
   1d8f4:	f8cd b008 	str.w	fp, [sp, #8]
   1d8f8:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   1d8fc:	9301      	str	r3, [sp, #4]
   1d8fe:	ab08      	add	r3, sp, #32
   1d900:	9300      	str	r3, [sp, #0]
   1d902:	2313      	movs	r3, #19
   1d904:	2200      	movs	r2, #0
   1d906:	4601      	mov	r1, r0
   1d908:	9805      	ldr	r0, [sp, #20]
   1d90a:	f7ff fc89 	bl	1d220 <ble_att_svr_read_flat>
            if (rc != 0) {
   1d90e:	4602      	mov	r2, r0
   1d910:	2800      	cmp	r0, #0
   1d912:	d1c5      	bne.n	1d8a0 <ble_att_svr_build_read_type_rsp+0x64>
            if (attr_len > mtu - 4) {
   1d914:	f1a9 0303 	sub.w	r3, r9, #3
   1d918:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   1d91c:	428b      	cmp	r3, r1
   1d91e:	dc03      	bgt.n	1d928 <ble_att_svr_build_read_type_rsp+0xec>
                attr_len = mtu - 4;
   1d920:	f1a9 0304 	sub.w	r3, r9, #4
   1d924:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            if (prev_attr_len == 0) {
   1d928:	f1ba 0f00 	cmp.w	sl, #0
   1d92c:	d1bc      	bne.n	1d8a8 <ble_att_svr_build_read_type_rsp+0x6c>
                prev_attr_len = attr_len;
   1d92e:	f8bd a036 	ldrh.w	sl, [sp, #54]	; 0x36
   1d932:	e7bd      	b.n	1d8b0 <ble_att_svr_build_read_type_rsp+0x74>
                *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1d934:	2311      	movs	r3, #17
   1d936:	f88b 3000 	strb.w	r3, [fp]
                *err_handle = entry->ha_handle_id;
   1d93a:	8963      	ldrh	r3, [r4, #10]
   1d93c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1d93e:	8013      	strh	r3, [r2, #0]
                rc = BLE_HS_ENOMEM;
   1d940:	2206      	movs	r2, #6
                goto done;
   1d942:	e000      	b.n	1d946 <ble_att_svr_build_read_type_rsp+0x10a>
            rc = BLE_HS_ENOENT;
   1d944:	2205      	movs	r2, #5
    if (!entry_written) {
   1d946:	9b06      	ldr	r3, [sp, #24]
   1d948:	b943      	cbnz	r3, 1d95c <ble_att_svr_build_read_type_rsp+0x120>
        if (*att_err == 0) {
   1d94a:	f89b 3000 	ldrb.w	r3, [fp]
   1d94e:	b913      	cbnz	r3, 1d956 <ble_att_svr_build_read_type_rsp+0x11a>
            *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   1d950:	230a      	movs	r3, #10
   1d952:	f88b 3000 	strb.w	r3, [fp]
        if (rc == 0) {
   1d956:	b94a      	cbnz	r2, 1d96c <ble_att_svr_build_read_type_rsp+0x130>
            rc = BLE_HS_ENOENT;
   1d958:	2205      	movs	r2, #5
   1d95a:	e007      	b.n	1d96c <ble_att_svr_build_read_type_rsp+0x130>
        *att_err = 0;
   1d95c:	2200      	movs	r2, #0
   1d95e:	f88b 2000 	strb.w	r2, [fp]
        rsp->batp_length = sizeof(*data) + prev_attr_len;
   1d962:	f10a 0a02 	add.w	sl, sl, #2
   1d966:	9b07      	ldr	r3, [sp, #28]
   1d968:	f883 a000 	strb.w	sl, [r3]
    *out_txom = txom;
   1d96c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1d96e:	f8c3 8000 	str.w	r8, [r3]
}
   1d972:	4610      	mov	r0, r2
   1d974:	b00f      	add	sp, #60	; 0x3c
   1d976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001d97a <ble_att_svr_ticks_until_tmo>:
    if (SLIST_EMPTY(&svr->basc_prep_list)) {
   1d97a:	6802      	ldr	r2, [r0, #0]
   1d97c:	b11a      	cbz	r2, 1d986 <ble_att_svr_ticks_until_tmo+0xc>
    time_diff = svr->basc_prep_timeout_at - now;
   1d97e:	6840      	ldr	r0, [r0, #4]
    if (time_diff < 0) {
   1d980:	1a40      	subs	r0, r0, r1
   1d982:	d403      	bmi.n	1d98c <ble_att_svr_ticks_until_tmo+0x12>
}
   1d984:	4770      	bx	lr
        return BLE_HS_FOREVER;
   1d986:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1d98a:	4770      	bx	lr
        return 0;
   1d98c:	2000      	movs	r0, #0
   1d98e:	e7f9      	b.n	1d984 <ble_att_svr_ticks_until_tmo+0xa>

0001d990 <ble_att_svr_read_handle>:
{
   1d990:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d992:	b083      	sub	sp, #12
   1d994:	4607      	mov	r7, r0
   1d996:	4614      	mov	r4, r2
   1d998:	461d      	mov	r5, r3
   1d99a:	9e08      	ldr	r6, [sp, #32]
    entry = ble_att_svr_find_by_handle(attr_handle);
   1d99c:	4608      	mov	r0, r1
   1d99e:	f7ff fedb 	bl	1d758 <ble_att_svr_find_by_handle>
    if (entry == NULL) {
   1d9a2:	b140      	cbz	r0, 1d9b6 <ble_att_svr_read_handle+0x26>
   1d9a4:	4601      	mov	r1, r0
    rc = ble_att_svr_read(conn_handle, entry, offset, om, out_att_err);
   1d9a6:	9600      	str	r6, [sp, #0]
   1d9a8:	462b      	mov	r3, r5
   1d9aa:	4622      	mov	r2, r4
   1d9ac:	4638      	mov	r0, r7
   1d9ae:	f7ff fa5e 	bl	1ce6e <ble_att_svr_read>
}
   1d9b2:	b003      	add	sp, #12
   1d9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (out_att_err != NULL) {
   1d9b6:	b10e      	cbz	r6, 1d9bc <ble_att_svr_read_handle+0x2c>
            *out_att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1d9b8:	2301      	movs	r3, #1
   1d9ba:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ENOENT;
   1d9bc:	2005      	movs	r0, #5
   1d9be:	e7f8      	b.n	1d9b2 <ble_att_svr_read_handle+0x22>

0001d9c0 <ble_att_svr_build_read_mult_rsp>:
{
   1d9c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d9c4:	b084      	sub	sp, #16
   1d9c6:	4680      	mov	r8, r0
   1d9c8:	460c      	mov	r4, r1
   1d9ca:	4691      	mov	r9, r2
   1d9cc:	461e      	mov	r6, r3
    mtu = ble_att_mtu(conn_handle);
   1d9ce:	f7ff f826 	bl	1ca1e <ble_att_mtu>
   1d9d2:	4607      	mov	r7, r0
    rc = ble_att_svr_pkt(rxom, &txom, att_err);
   1d9d4:	4632      	mov	r2, r6
   1d9d6:	a903      	add	r1, sp, #12
   1d9d8:	4620      	mov	r0, r4
   1d9da:	f7ff faee 	bl	1cfba <ble_att_svr_pkt>
    if (rc != 0) {
   1d9de:	4682      	mov	sl, r0
   1d9e0:	b148      	cbz	r0, 1d9f6 <ble_att_svr_build_read_mult_rsp+0x36>
        *err_handle = 0;
   1d9e2:	2300      	movs	r3, #0
   1d9e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1d9e6:	8013      	strh	r3, [r2, #0]
    *out_txom = txom;
   1d9e8:	9b03      	ldr	r3, [sp, #12]
   1d9ea:	f8c9 3000 	str.w	r3, [r9]
}
   1d9ee:	4650      	mov	r0, sl
   1d9f0:	b004      	add	sp, #16
   1d9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_MULT_RSP, 0, txom) == NULL) {
   1d9f6:	9a03      	ldr	r2, [sp, #12]
   1d9f8:	2100      	movs	r1, #0
   1d9fa:	200f      	movs	r0, #15
   1d9fc:	f7ff f905 	bl	1cc0a <ble_att_cmd_prepare>
   1da00:	b318      	cbz	r0, 1da4a <ble_att_svr_build_read_mult_rsp+0x8a>
    while (OS_MBUF_PKTLEN(*rxom) >= 2 && OS_MBUF_PKTLEN(txom) < mtu) {
   1da02:	6823      	ldr	r3, [r4, #0]
   1da04:	8a1b      	ldrh	r3, [r3, #16]
   1da06:	2b01      	cmp	r3, #1
   1da08:	d9ee      	bls.n	1d9e8 <ble_att_svr_build_read_mult_rsp+0x28>
   1da0a:	9b03      	ldr	r3, [sp, #12]
   1da0c:	8a1b      	ldrh	r3, [r3, #16]
   1da0e:	42bb      	cmp	r3, r7
   1da10:	d2ea      	bcs.n	1d9e8 <ble_att_svr_build_read_mult_rsp+0x28>
        rc = ble_att_svr_pullup_req_base(rxom, 2, att_err);
   1da12:	4632      	mov	r2, r6
   1da14:	2102      	movs	r1, #2
   1da16:	4620      	mov	r0, r4
   1da18:	f7ff fa8c 	bl	1cf34 <ble_att_svr_pullup_req_base>
        if (rc != 0) {
   1da1c:	b9e8      	cbnz	r0, 1da5a <ble_att_svr_build_read_mult_rsp+0x9a>
        handle = get_le16((*rxom)->om_data);
   1da1e:	6823      	ldr	r3, [r4, #0]
   1da20:	6818      	ldr	r0, [r3, #0]
   1da22:	f00f fd47 	bl	2d4b4 <get_le16>
   1da26:	4605      	mov	r5, r0
        os_mbuf_adj(*rxom, 2);
   1da28:	2102      	movs	r1, #2
   1da2a:	6820      	ldr	r0, [r4, #0]
   1da2c:	f7f7 fef9 	bl	15822 <os_mbuf_adj>
        rc = ble_att_svr_read_handle(conn_handle, handle, 0, txom, att_err);
   1da30:	9600      	str	r6, [sp, #0]
   1da32:	9b03      	ldr	r3, [sp, #12]
   1da34:	2200      	movs	r2, #0
   1da36:	4629      	mov	r1, r5
   1da38:	4640      	mov	r0, r8
   1da3a:	f7ff ffa9 	bl	1d990 <ble_att_svr_read_handle>
        if (rc != 0) {
   1da3e:	2800      	cmp	r0, #0
   1da40:	d0df      	beq.n	1da02 <ble_att_svr_build_read_mult_rsp+0x42>
            *err_handle = handle;
   1da42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1da44:	8015      	strh	r5, [r2, #0]
        rc = ble_att_svr_read_handle(conn_handle, handle, 0, txom, att_err);
   1da46:	4682      	mov	sl, r0
            goto done;
   1da48:	e7ce      	b.n	1d9e8 <ble_att_svr_build_read_mult_rsp+0x28>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1da4a:	2311      	movs	r3, #17
   1da4c:	7033      	strb	r3, [r6, #0]
        *err_handle = 0;
   1da4e:	2300      	movs	r3, #0
   1da50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1da52:	8013      	strh	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   1da54:	f04f 0a06 	mov.w	sl, #6
        goto done;
   1da58:	e7c6      	b.n	1d9e8 <ble_att_svr_build_read_mult_rsp+0x28>
            *err_handle = 0;
   1da5a:	2200      	movs	r2, #0
   1da5c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1da5e:	800a      	strh	r2, [r1, #0]
        rc = ble_att_svr_pullup_req_base(rxom, 2, att_err);
   1da60:	4682      	mov	sl, r0
            goto done;
   1da62:	e7c1      	b.n	1d9e8 <ble_att_svr_build_read_mult_rsp+0x28>

0001da64 <ble_att_svr_tx_error_rsp>:
{
   1da64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1da66:	4605      	mov	r5, r0
   1da68:	460c      	mov	r4, r1
   1da6a:	4617      	mov	r7, r2
   1da6c:	461e      	mov	r6, r3
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_ERROR_RSP, sizeof(*rsp), txom);
   1da6e:	460a      	mov	r2, r1
   1da70:	2104      	movs	r1, #4
   1da72:	2001      	movs	r0, #1
   1da74:	f7ff f8c9 	bl	1cc0a <ble_att_cmd_prepare>
    if (rsp == NULL) {
   1da78:	b150      	cbz	r0, 1da90 <ble_att_svr_tx_error_rsp+0x2c>
    rsp->baep_req_op = req_op;
   1da7a:	7007      	strb	r7, [r0, #0]
    rsp->baep_handle = htole16(handle);
   1da7c:	f8a0 6001 	strh.w	r6, [r0, #1]
    rsp->baep_error_code = error_code;
   1da80:	f89d 2018 	ldrb.w	r2, [sp, #24]
   1da84:	70c2      	strb	r2, [r0, #3]
    return ble_att_tx(conn_handle, txom);
   1da86:	4621      	mov	r1, r4
   1da88:	4628      	mov	r0, r5
   1da8a:	f7ff f8df 	bl	1cc4c <ble_att_tx>
}
   1da8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   1da90:	2006      	movs	r0, #6
   1da92:	e7fc      	b.n	1da8e <ble_att_svr_tx_error_rsp+0x2a>

0001da94 <ble_att_svr_tx_rsp>:
{
   1da94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1da98:	b085      	sub	sp, #20
   1da9a:	4607      	mov	r7, r0
   1da9c:	4614      	mov	r4, r2
   1da9e:	461e      	mov	r6, r3
   1daa0:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
    if (hs_status != 0 && err_status == 0) {
   1daa4:	4689      	mov	r9, r1
   1daa6:	b111      	cbz	r1, 1daae <ble_att_svr_tx_rsp+0x1a>
   1daa8:	f1b8 0f00 	cmp.w	r8, #0
   1daac:	d03d      	beq.n	1db2a <ble_att_svr_tx_rsp+0x96>
        ble_hs_lock();
   1daae:	f004 f829 	bl	21b04 <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   1dab2:	aa03      	add	r2, sp, #12
   1dab4:	a902      	add	r1, sp, #8
   1dab6:	4638      	mov	r0, r7
   1dab8:	f7fe fe8b 	bl	1c7d2 <ble_att_conn_chan_find>
        if (rc != 0) {
   1dabc:	4605      	mov	r5, r0
   1dabe:	b918      	cbnz	r0, 1dac8 <ble_att_svr_tx_rsp+0x34>
            if (hs_status == 0) {
   1dac0:	f1b9 0f00 	cmp.w	r9, #0
   1dac4:	d018      	beq.n	1daf8 <ble_att_svr_tx_rsp+0x64>
   1dac6:	464d      	mov	r5, r9
        ble_hs_unlock();
   1dac8:	f004 f820 	bl	21b0c <ble_hs_unlock>
        if (hs_status != 0) {
   1dacc:	b375      	cbz	r5, 1db2c <ble_att_svr_tx_rsp+0x98>
            STATS_INC(ble_att_stats, error_rsp_tx);
   1dace:	4a1b      	ldr	r2, [pc, #108]	; (1db3c <ble_att_svr_tx_rsp+0xa8>)
   1dad0:	6913      	ldr	r3, [r2, #16]
   1dad2:	3301      	adds	r3, #1
   1dad4:	6113      	str	r3, [r2, #16]
            if (om == NULL) {
   1dad6:	b324      	cbz	r4, 1db22 <ble_att_svr_tx_rsp+0x8e>
                os_mbuf_adj(om, OS_MBUF_PKTLEN(om));
   1dad8:	8a21      	ldrh	r1, [r4, #16]
   1dada:	4620      	mov	r0, r4
   1dadc:	f7f7 fea1 	bl	15822 <os_mbuf_adj>
            if (om != NULL) {
   1dae0:	b324      	cbz	r4, 1db2c <ble_att_svr_tx_rsp+0x98>
                ble_att_svr_tx_error_rsp(conn_handle, om, att_op,
   1dae2:	f8cd 8000 	str.w	r8, [sp]
   1dae6:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1daea:	4632      	mov	r2, r6
   1daec:	4621      	mov	r1, r4
   1daee:	4638      	mov	r0, r7
   1daf0:	f7ff ffb8 	bl	1da64 <ble_att_svr_tx_error_rsp>
                om = NULL;
   1daf4:	2400      	movs	r4, #0
   1daf6:	e019      	b.n	1db2c <ble_att_svr_tx_rsp+0x98>
                ble_att_inc_tx_stat(om->om_data[0]);
   1daf8:	6823      	ldr	r3, [r4, #0]
   1dafa:	7818      	ldrb	r0, [r3, #0]
   1dafc:	f7fe fe70 	bl	1c7e0 <ble_att_inc_tx_stat>
                ble_att_truncate_to_mtu(chan, om);
   1db00:	4621      	mov	r1, r4
   1db02:	9803      	ldr	r0, [sp, #12]
   1db04:	f7fe ff7d 	bl	1ca02 <ble_att_truncate_to_mtu>
                hs_status = ble_l2cap_tx(conn, chan, om);
   1db08:	4622      	mov	r2, r4
   1db0a:	9903      	ldr	r1, [sp, #12]
   1db0c:	9802      	ldr	r0, [sp, #8]
   1db0e:	f006 fb67 	bl	241e0 <ble_l2cap_tx>
                if (hs_status != 0) {
   1db12:	4605      	mov	r5, r0
   1db14:	b908      	cbnz	r0, 1db1a <ble_att_svr_tx_rsp+0x86>
                om = NULL;
   1db16:	2400      	movs	r4, #0
   1db18:	e7d6      	b.n	1dac8 <ble_att_svr_tx_rsp+0x34>
                    err_status = BLE_ATT_ERR_UNLIKELY;
   1db1a:	f04f 080e 	mov.w	r8, #14
                om = NULL;
   1db1e:	2400      	movs	r4, #0
   1db20:	e7d2      	b.n	1dac8 <ble_att_svr_tx_rsp+0x34>
                om = ble_hs_mbuf_l2cap_pkt();
   1db22:	f005 fed3 	bl	238cc <ble_hs_mbuf_l2cap_pkt>
   1db26:	4604      	mov	r4, r0
   1db28:	e7da      	b.n	1dae0 <ble_att_svr_tx_rsp+0x4c>
   1db2a:	460d      	mov	r5, r1
    os_mbuf_free_chain(om);
   1db2c:	4620      	mov	r0, r4
   1db2e:	f7f7 fda1 	bl	15674 <os_mbuf_free_chain>
}
   1db32:	4628      	mov	r0, r5
   1db34:	b005      	add	sp, #20
   1db36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1db3a:	bf00      	nop
   1db3c:	10003474 	.word	0x10003474

0001db40 <ble_att_svr_rx_mtu>:
{
   1db40:	b570      	push	{r4, r5, r6, lr}
   1db42:	b086      	sub	sp, #24
   1db44:	4605      	mov	r5, r0
   1db46:	460c      	mov	r4, r1
    txom = NULL;
   1db48:	2300      	movs	r3, #0
   1db4a:	9303      	str	r3, [sp, #12]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*cmd), &att_err);
   1db4c:	f10d 020b 	add.w	r2, sp, #11
   1db50:	2102      	movs	r1, #2
   1db52:	4620      	mov	r0, r4
   1db54:	f7ff f9ee 	bl	1cf34 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1db58:	b180      	cbz	r0, 1db7c <ble_att_svr_rx_mtu+0x3c>
   1db5a:	4601      	mov	r1, r0
    mtu = 0;
   1db5c:	2600      	movs	r6, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_MTU_REQ,
   1db5e:	2300      	movs	r3, #0
   1db60:	9301      	str	r3, [sp, #4]
   1db62:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1db66:	9300      	str	r3, [sp, #0]
   1db68:	2302      	movs	r3, #2
   1db6a:	9a03      	ldr	r2, [sp, #12]
   1db6c:	4628      	mov	r0, r5
   1db6e:	f7ff ff91 	bl	1da94 <ble_att_svr_tx_rsp>
    if (rc == 0) {
   1db72:	4604      	mov	r4, r0
   1db74:	b170      	cbz	r0, 1db94 <ble_att_svr_rx_mtu+0x54>
}
   1db76:	4620      	mov	r0, r4
   1db78:	b006      	add	sp, #24
   1db7a:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_att_mtu_cmd *)(*rxom)->om_data;
   1db7c:	6823      	ldr	r3, [r4, #0]
   1db7e:	681b      	ldr	r3, [r3, #0]
    mtu = le16toh(cmd->bamc_mtu);
   1db80:	881e      	ldrh	r6, [r3, #0]
    rc = ble_att_svr_build_mtu_rsp(conn_handle, rxom, &txom, &att_err);
   1db82:	f10d 030b 	add.w	r3, sp, #11
   1db86:	aa03      	add	r2, sp, #12
   1db88:	4621      	mov	r1, r4
   1db8a:	4628      	mov	r0, r5
   1db8c:	f7ff f9de 	bl	1cf4c <ble_att_svr_build_mtu_rsp>
   1db90:	4601      	mov	r1, r0
    if (rc != 0) {
   1db92:	e7e4      	b.n	1db5e <ble_att_svr_rx_mtu+0x1e>
        ble_hs_lock();
   1db94:	f003 ffb6 	bl	21b04 <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   1db98:	aa05      	add	r2, sp, #20
   1db9a:	a904      	add	r1, sp, #16
   1db9c:	4628      	mov	r0, r5
   1db9e:	f7fe fe18 	bl	1c7d2 <ble_att_conn_chan_find>
        if (rc == 0) {
   1dba2:	4604      	mov	r4, r0
   1dba4:	b148      	cbz	r0, 1dbba <ble_att_svr_rx_mtu+0x7a>
        ble_hs_unlock();
   1dba6:	f003 ffb1 	bl	21b0c <ble_hs_unlock>
        if (rc == 0) {
   1dbaa:	2c00      	cmp	r4, #0
   1dbac:	d1e3      	bne.n	1db76 <ble_att_svr_rx_mtu+0x36>
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
   1dbae:	4632      	mov	r2, r6
   1dbb0:	2104      	movs	r1, #4
   1dbb2:	4628      	mov	r0, r5
   1dbb4:	f001 fe4d 	bl	1f852 <ble_gap_mtu_event>
    return rc;
   1dbb8:	e7dd      	b.n	1db76 <ble_att_svr_rx_mtu+0x36>
            ble_att_set_peer_mtu(chan, mtu);
   1dbba:	4631      	mov	r1, r6
   1dbbc:	9805      	ldr	r0, [sp, #20]
   1dbbe:	f7fe ff0b 	bl	1c9d8 <ble_att_set_peer_mtu>
            chan->flags |= BLE_L2CAP_CHAN_F_TXED_MTU;
   1dbc2:	9805      	ldr	r0, [sp, #20]
   1dbc4:	7b83      	ldrb	r3, [r0, #14]
   1dbc6:	f043 0301 	orr.w	r3, r3, #1
   1dbca:	7383      	strb	r3, [r0, #14]
            mtu = ble_att_chan_mtu(chan);
   1dbcc:	f7fe ff09 	bl	1c9e2 <ble_att_chan_mtu>
   1dbd0:	4606      	mov	r6, r0
   1dbd2:	e7e8      	b.n	1dba6 <ble_att_svr_rx_mtu+0x66>

0001dbd4 <ble_att_svr_rx_find_info>:
{
   1dbd4:	b570      	push	{r4, r5, r6, lr}
   1dbd6:	b084      	sub	sp, #16
   1dbd8:	4606      	mov	r6, r0
   1dbda:	460c      	mov	r4, r1
    txom = NULL;
   1dbdc:	2300      	movs	r3, #0
   1dbde:	9303      	str	r3, [sp, #12]
    att_err = 0;
   1dbe0:	f88d 300b 	strb.w	r3, [sp, #11]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1dbe4:	f10d 020b 	add.w	r2, sp, #11
   1dbe8:	2104      	movs	r1, #4
   1dbea:	4620      	mov	r0, r4
   1dbec:	f7ff f9a2 	bl	1cf34 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1dbf0:	bb20      	cbnz	r0, 1dc3c <ble_att_svr_rx_find_info+0x68>
    req = (struct ble_att_find_info_req *)(*rxom)->om_data;
   1dbf2:	6823      	ldr	r3, [r4, #0]
   1dbf4:	681b      	ldr	r3, [r3, #0]
    start_handle = le16toh(req->bafq_start_handle);
   1dbf6:	881d      	ldrh	r5, [r3, #0]
    end_handle = le16toh(req->bafq_end_handle);
   1dbf8:	885a      	ldrh	r2, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   1dbfa:	4295      	cmp	r5, r2
   1dbfc:	d800      	bhi.n	1dc00 <ble_att_svr_rx_find_info+0x2c>
   1dbfe:	b975      	cbnz	r5, 1dc1e <ble_att_svr_rx_find_info+0x4a>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1dc00:	2301      	movs	r3, #1
   1dc02:	f88d 300b 	strb.w	r3, [sp, #11]
        rc = BLE_HS_EBADDATA;
   1dc06:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_FIND_INFO_REQ,
   1dc08:	9501      	str	r5, [sp, #4]
   1dc0a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1dc0e:	9300      	str	r3, [sp, #0]
   1dc10:	2304      	movs	r3, #4
   1dc12:	9a03      	ldr	r2, [sp, #12]
   1dc14:	4630      	mov	r0, r6
   1dc16:	f7ff ff3d 	bl	1da94 <ble_att_svr_tx_rsp>
}
   1dc1a:	b004      	add	sp, #16
   1dc1c:	bd70      	pop	{r4, r5, r6, pc}
    rc = ble_att_svr_build_find_info_rsp(conn_handle,
   1dc1e:	f10d 030b 	add.w	r3, sp, #11
   1dc22:	9301      	str	r3, [sp, #4]
   1dc24:	ab03      	add	r3, sp, #12
   1dc26:	9300      	str	r3, [sp, #0]
   1dc28:	4623      	mov	r3, r4
   1dc2a:	4629      	mov	r1, r5
   1dc2c:	4630      	mov	r0, r6
   1dc2e:	f7ff fa57 	bl	1d0e0 <ble_att_svr_build_find_info_rsp>
    if (rc != 0) {
   1dc32:	4601      	mov	r1, r0
   1dc34:	2800      	cmp	r0, #0
   1dc36:	d1e7      	bne.n	1dc08 <ble_att_svr_rx_find_info+0x34>
    err_handle = 0;
   1dc38:	2500      	movs	r5, #0
   1dc3a:	e7e5      	b.n	1dc08 <ble_att_svr_rx_find_info+0x34>
   1dc3c:	4601      	mov	r1, r0
        err_handle = 0;
   1dc3e:	2500      	movs	r5, #0
   1dc40:	e7e2      	b.n	1dc08 <ble_att_svr_rx_find_info+0x34>

0001dc42 <ble_att_svr_rx_find_type_value>:
{
   1dc42:	b570      	push	{r4, r5, r6, lr}
   1dc44:	b088      	sub	sp, #32
   1dc46:	4605      	mov	r5, r0
   1dc48:	460c      	mov	r4, r1
    txom = NULL;
   1dc4a:	2300      	movs	r3, #0
   1dc4c:	9306      	str	r3, [sp, #24]
    att_err = 0;
   1dc4e:	f88d 3017 	strb.w	r3, [sp, #23]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1dc52:	f10d 0217 	add.w	r2, sp, #23
   1dc56:	2106      	movs	r1, #6
   1dc58:	4620      	mov	r0, r4
   1dc5a:	f7ff f96b 	bl	1cf34 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1dc5e:	bb58      	cbnz	r0, 1dcb8 <ble_att_svr_rx_find_type_value+0x76>
    req = (struct ble_att_find_type_value_req *)(*rxom)->om_data;
   1dc60:	6823      	ldr	r3, [r4, #0]
   1dc62:	681b      	ldr	r3, [r3, #0]
    start_handle = le16toh(req->bavq_start_handle);
   1dc64:	881e      	ldrh	r6, [r3, #0]
    end_handle = le16toh(req->bavq_end_handle);
   1dc66:	885a      	ldrh	r2, [r3, #2]
    attr_type = (ble_uuid16_t) BLE_UUID16_INIT(le16toh(req->bavq_attr_type));
   1dc68:	889b      	ldrh	r3, [r3, #4]
   1dc6a:	2110      	movs	r1, #16
   1dc6c:	f88d 101c 	strb.w	r1, [sp, #28]
   1dc70:	f8ad 301e 	strh.w	r3, [sp, #30]
    if (start_handle > end_handle || start_handle == 0) {
   1dc74:	4296      	cmp	r6, r2
   1dc76:	d800      	bhi.n	1dc7a <ble_att_svr_rx_find_type_value+0x38>
   1dc78:	b976      	cbnz	r6, 1dc98 <ble_att_svr_rx_find_type_value+0x56>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1dc7a:	2301      	movs	r3, #1
   1dc7c:	f88d 3017 	strb.w	r3, [sp, #23]
        rc = BLE_HS_EBADDATA;
   1dc80:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom,
   1dc82:	9601      	str	r6, [sp, #4]
   1dc84:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1dc88:	9300      	str	r3, [sp, #0]
   1dc8a:	2306      	movs	r3, #6
   1dc8c:	9a06      	ldr	r2, [sp, #24]
   1dc8e:	4628      	mov	r0, r5
   1dc90:	f7ff ff00 	bl	1da94 <ble_att_svr_tx_rsp>
}
   1dc94:	b008      	add	sp, #32
   1dc96:	bd70      	pop	{r4, r5, r6, pc}
    rc = ble_att_svr_build_find_type_value_rsp(conn_handle, start_handle,
   1dc98:	f10d 0317 	add.w	r3, sp, #23
   1dc9c:	9302      	str	r3, [sp, #8]
   1dc9e:	ab06      	add	r3, sp, #24
   1dca0:	9301      	str	r3, [sp, #4]
   1dca2:	9400      	str	r4, [sp, #0]
   1dca4:	9b07      	ldr	r3, [sp, #28]
   1dca6:	4631      	mov	r1, r6
   1dca8:	4628      	mov	r0, r5
   1dcaa:	f7ff fb89 	bl	1d3c0 <ble_att_svr_build_find_type_value_rsp>
    if (rc != 0) {
   1dcae:	4601      	mov	r1, r0
   1dcb0:	2800      	cmp	r0, #0
   1dcb2:	d1e6      	bne.n	1dc82 <ble_att_svr_rx_find_type_value+0x40>
    err_handle = 0;
   1dcb4:	2600      	movs	r6, #0
   1dcb6:	e7e4      	b.n	1dc82 <ble_att_svr_rx_find_type_value+0x40>
   1dcb8:	4601      	mov	r1, r0
   1dcba:	2600      	movs	r6, #0
   1dcbc:	e7e1      	b.n	1dc82 <ble_att_svr_rx_find_type_value+0x40>

0001dcbe <ble_att_svr_rx_read_type>:
{
   1dcbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dcc2:	b08c      	sub	sp, #48	; 0x30
   1dcc4:	4605      	mov	r5, r0
   1dcc6:	460c      	mov	r4, r1
    txom = NULL;
   1dcc8:	2300      	movs	r3, #0
   1dcca:	930b      	str	r3, [sp, #44]	; 0x2c
    err_handle = 0;
   1dccc:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    att_err = 0;
   1dcd0:	f88d 3013 	strb.w	r3, [sp, #19]
    pktlen = OS_MBUF_PKTLEN(*rxom);
   1dcd4:	680b      	ldr	r3, [r1, #0]
   1dcd6:	8a1e      	ldrh	r6, [r3, #16]
    if (pktlen != sizeof(*req) + 2 && pktlen != sizeof(*req) + 16) {
   1dcd8:	2e06      	cmp	r6, #6
   1dcda:	d001      	beq.n	1dce0 <ble_att_svr_rx_read_type+0x22>
   1dcdc:	2e14      	cmp	r6, #20
   1dcde:	d132      	bne.n	1dd46 <ble_att_svr_rx_read_type+0x88>
    rc = ble_att_svr_pullup_req_base(rxom, pktlen, &att_err);
   1dce0:	f10d 0213 	add.w	r2, sp, #19
   1dce4:	4631      	mov	r1, r6
   1dce6:	4620      	mov	r0, r4
   1dce8:	f7ff f924 	bl	1cf34 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1dcec:	4601      	mov	r1, r0
   1dcee:	bb58      	cbnz	r0, 1dd48 <ble_att_svr_rx_read_type+0x8a>
    req = (struct ble_att_read_type_req *)(*rxom)->om_data;
   1dcf0:	6821      	ldr	r1, [r4, #0]
   1dcf2:	680b      	ldr	r3, [r1, #0]
    start_handle = le16toh(req->batq_start_handle);
   1dcf4:	881a      	ldrh	r2, [r3, #0]
   1dcf6:	b297      	uxth	r7, r2
    end_handle = le16toh(req->batq_end_handle);
   1dcf8:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   1dcfc:	4547      	cmp	r7, r8
   1dcfe:	d800      	bhi.n	1dd02 <ble_att_svr_rx_read_type+0x44>
   1dd00:	b937      	cbnz	r7, 1dd10 <ble_att_svr_rx_read_type+0x52>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1dd02:	2301      	movs	r3, #1
   1dd04:	f88d 3013 	strb.w	r3, [sp, #19]
        err_handle = start_handle;
   1dd08:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
        rc = BLE_HS_EBADDATA;
   1dd0c:	210a      	movs	r1, #10
        goto done;
   1dd0e:	e01b      	b.n	1dd48 <ble_att_svr_rx_read_type+0x8a>
    rc = ble_uuid_init_from_att_mbuf(&uuid, *rxom, sizeof(*req),
   1dd10:	1f33      	subs	r3, r6, #4
   1dd12:	2204      	movs	r2, #4
   1dd14:	a805      	add	r0, sp, #20
   1dd16:	f008 fe3d 	bl	26994 <ble_uuid_init_from_att_mbuf>
    if (rc != 0) {
   1dd1a:	b118      	cbz	r0, 1dd24 <ble_att_svr_rx_read_type+0x66>
        att_err = BLE_ATT_ERR_INVALID_PDU;
   1dd1c:	2104      	movs	r1, #4
   1dd1e:	f88d 1013 	strb.w	r1, [sp, #19]
        goto done;
   1dd22:	e011      	b.n	1dd48 <ble_att_svr_rx_read_type+0x8a>
    rc = ble_att_svr_build_read_type_rsp(conn_handle, start_handle, end_handle,
   1dd24:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   1dd28:	9303      	str	r3, [sp, #12]
   1dd2a:	f10d 0313 	add.w	r3, sp, #19
   1dd2e:	9302      	str	r3, [sp, #8]
   1dd30:	ab0b      	add	r3, sp, #44	; 0x2c
   1dd32:	9301      	str	r3, [sp, #4]
   1dd34:	9400      	str	r4, [sp, #0]
   1dd36:	ab05      	add	r3, sp, #20
   1dd38:	4642      	mov	r2, r8
   1dd3a:	4639      	mov	r1, r7
   1dd3c:	4628      	mov	r0, r5
   1dd3e:	f7ff fd7d 	bl	1d83c <ble_att_svr_build_read_type_rsp>
   1dd42:	4601      	mov	r1, r0
    if (rc != 0) {
   1dd44:	e000      	b.n	1dd48 <ble_att_svr_rx_read_type+0x8a>
        rc = BLE_HS_EBADDATA;
   1dd46:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_TYPE_REQ,
   1dd48:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   1dd4c:	9301      	str	r3, [sp, #4]
   1dd4e:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1dd52:	9300      	str	r3, [sp, #0]
   1dd54:	2308      	movs	r3, #8
   1dd56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1dd58:	4628      	mov	r0, r5
   1dd5a:	f7ff fe9b 	bl	1da94 <ble_att_svr_tx_rsp>
}
   1dd5e:	b00c      	add	sp, #48	; 0x30
   1dd60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001dd64 <ble_att_svr_rx_read>:
{
   1dd64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dd68:	b084      	sub	sp, #16
   1dd6a:	4605      	mov	r5, r0
   1dd6c:	460c      	mov	r4, r1
    att_err = 0;
   1dd6e:	2300      	movs	r3, #0
   1dd70:	f88d 300f 	strb.w	r3, [sp, #15]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1dd74:	f10d 020f 	add.w	r2, sp, #15
   1dd78:	2102      	movs	r1, #2
   1dd7a:	4620      	mov	r0, r4
   1dd7c:	f7ff f8da 	bl	1cf34 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1dd80:	b170      	cbz	r0, 1dda0 <ble_att_svr_rx_read+0x3c>
   1dd82:	4601      	mov	r1, r0
    err_handle = 0;
   1dd84:	2600      	movs	r6, #0
    txom = NULL;
   1dd86:	4637      	mov	r7, r6
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_REQ,
   1dd88:	9601      	str	r6, [sp, #4]
   1dd8a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1dd8e:	9300      	str	r3, [sp, #0]
   1dd90:	230a      	movs	r3, #10
   1dd92:	463a      	mov	r2, r7
   1dd94:	4628      	mov	r0, r5
   1dd96:	f7ff fe7d 	bl	1da94 <ble_att_svr_tx_rsp>
}
   1dd9a:	b004      	add	sp, #16
   1dd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    req = (struct ble_att_read_req *)(*rxom)->om_data;
   1dda0:	6827      	ldr	r7, [r4, #0]
   1dda2:	683b      	ldr	r3, [r7, #0]
    err_handle = le16toh(req->barq_handle);
   1dda4:	881e      	ldrh	r6, [r3, #0]
    *rxom = NULL;
   1dda6:	f04f 0800 	mov.w	r8, #0
   1ddaa:	f8c4 8000 	str.w	r8, [r4]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1ddae:	8a39      	ldrh	r1, [r7, #16]
   1ddb0:	4638      	mov	r0, r7
   1ddb2:	f7f7 fd36 	bl	15822 <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_RSP, 0, txom) == NULL) {
   1ddb6:	463a      	mov	r2, r7
   1ddb8:	4641      	mov	r1, r8
   1ddba:	200b      	movs	r0, #11
   1ddbc:	f7fe ff25 	bl	1cc0a <ble_att_cmd_prepare>
   1ddc0:	b150      	cbz	r0, 1ddd8 <ble_att_svr_rx_read+0x74>
    rc = ble_att_svr_read_handle(conn_handle, err_handle, 0, txom, &att_err);
   1ddc2:	f10d 030f 	add.w	r3, sp, #15
   1ddc6:	9300      	str	r3, [sp, #0]
   1ddc8:	463b      	mov	r3, r7
   1ddca:	2200      	movs	r2, #0
   1ddcc:	4631      	mov	r1, r6
   1ddce:	4628      	mov	r0, r5
   1ddd0:	f7ff fdde 	bl	1d990 <ble_att_svr_read_handle>
   1ddd4:	4601      	mov	r1, r0
done:
   1ddd6:	e7d7      	b.n	1dd88 <ble_att_svr_rx_read+0x24>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1ddd8:	2311      	movs	r3, #17
   1ddda:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOMEM;
   1ddde:	2106      	movs	r1, #6
        goto done;
   1dde0:	e7d2      	b.n	1dd88 <ble_att_svr_rx_read+0x24>

0001dde2 <ble_att_svr_rx_read_blob>:
{
   1dde2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dde6:	b085      	sub	sp, #20
   1dde8:	4605      	mov	r5, r0
   1ddea:	460c      	mov	r4, r1
    att_err = 0;
   1ddec:	2300      	movs	r3, #0
   1ddee:	f88d 300f 	strb.w	r3, [sp, #15]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1ddf2:	f10d 020f 	add.w	r2, sp, #15
   1ddf6:	2104      	movs	r1, #4
   1ddf8:	4620      	mov	r0, r4
   1ddfa:	f7ff f89b 	bl	1cf34 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1ddfe:	b170      	cbz	r0, 1de1e <ble_att_svr_rx_read_blob+0x3c>
   1de00:	4601      	mov	r1, r0
    err_handle = 0;
   1de02:	2700      	movs	r7, #0
    txom = NULL;
   1de04:	463e      	mov	r6, r7
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_BLOB_REQ,
   1de06:	9701      	str	r7, [sp, #4]
   1de08:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1de0c:	9300      	str	r3, [sp, #0]
   1de0e:	230c      	movs	r3, #12
   1de10:	4632      	mov	r2, r6
   1de12:	4628      	mov	r0, r5
   1de14:	f7ff fe3e 	bl	1da94 <ble_att_svr_tx_rsp>
}
   1de18:	b005      	add	sp, #20
   1de1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_read_blob_req *)(*rxom)->om_data;
   1de1e:	6826      	ldr	r6, [r4, #0]
   1de20:	6833      	ldr	r3, [r6, #0]
    err_handle = le16toh(req->babq_handle);
   1de22:	881f      	ldrh	r7, [r3, #0]
    offset = le16toh(req->babq_offset);
   1de24:	f8b3 9002 	ldrh.w	r9, [r3, #2]
    *rxom = NULL;
   1de28:	f04f 0800 	mov.w	r8, #0
   1de2c:	f8c4 8000 	str.w	r8, [r4]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1de30:	8a31      	ldrh	r1, [r6, #16]
   1de32:	4630      	mov	r0, r6
   1de34:	f7f7 fcf5 	bl	15822 <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_BLOB_RSP, 0, txom) == NULL) {
   1de38:	4632      	mov	r2, r6
   1de3a:	4641      	mov	r1, r8
   1de3c:	200d      	movs	r0, #13
   1de3e:	f7fe fee4 	bl	1cc0a <ble_att_cmd_prepare>
   1de42:	b150      	cbz	r0, 1de5a <ble_att_svr_rx_read_blob+0x78>
    rc = ble_att_svr_read_handle(conn_handle, err_handle, offset,
   1de44:	f10d 030f 	add.w	r3, sp, #15
   1de48:	9300      	str	r3, [sp, #0]
   1de4a:	4633      	mov	r3, r6
   1de4c:	464a      	mov	r2, r9
   1de4e:	4639      	mov	r1, r7
   1de50:	4628      	mov	r0, r5
   1de52:	f7ff fd9d 	bl	1d990 <ble_att_svr_read_handle>
   1de56:	4601      	mov	r1, r0
    if (rc != 0) {
   1de58:	e7d5      	b.n	1de06 <ble_att_svr_rx_read_blob+0x24>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1de5a:	2311      	movs	r3, #17
   1de5c:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOMEM;
   1de60:	2106      	movs	r1, #6
        goto done;
   1de62:	e7d0      	b.n	1de06 <ble_att_svr_rx_read_blob+0x24>

0001de64 <ble_att_svr_rx_read_mult>:
{
   1de64:	b510      	push	{r4, lr}
   1de66:	b084      	sub	sp, #16
   1de68:	4604      	mov	r4, r0
    txom = NULL;
   1de6a:	2300      	movs	r3, #0
   1de6c:	9303      	str	r3, [sp, #12]
    err_handle = 0;
   1de6e:	f8ad 300a 	strh.w	r3, [sp, #10]
    att_err = 0;
   1de72:	f88d 3009 	strb.w	r3, [sp, #9]
    rc = ble_att_svr_build_read_mult_rsp(conn_handle, rxom, &txom, &att_err,
   1de76:	f10d 030a 	add.w	r3, sp, #10
   1de7a:	9300      	str	r3, [sp, #0]
   1de7c:	f10d 0309 	add.w	r3, sp, #9
   1de80:	aa03      	add	r2, sp, #12
   1de82:	f7ff fd9d 	bl	1d9c0 <ble_att_svr_build_read_mult_rsp>
   1de86:	4601      	mov	r1, r0
    return ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_MULT_REQ,
   1de88:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1de8c:	9301      	str	r3, [sp, #4]
   1de8e:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1de92:	9300      	str	r3, [sp, #0]
   1de94:	230e      	movs	r3, #14
   1de96:	9a03      	ldr	r2, [sp, #12]
   1de98:	4620      	mov	r0, r4
   1de9a:	f7ff fdfb 	bl	1da94 <ble_att_svr_tx_rsp>
}
   1de9e:	b004      	add	sp, #16
   1dea0:	bd10      	pop	{r4, pc}

0001dea2 <ble_att_svr_rx_read_group_type>:
{
   1dea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dea6:	b08c      	sub	sp, #48	; 0x30
   1dea8:	4605      	mov	r5, r0
   1deaa:	460c      	mov	r4, r1
    txom = NULL;
   1deac:	2300      	movs	r3, #0
   1deae:	930b      	str	r3, [sp, #44]	; 0x2c
    err_handle = 0;
   1deb0:	f8ad 3016 	strh.w	r3, [sp, #22]
    att_err = 0;
   1deb4:	f88d 3015 	strb.w	r3, [sp, #21]
    pktlen = OS_MBUF_PKTLEN(*rxom);
   1deb8:	680b      	ldr	r3, [r1, #0]
   1deba:	8a19      	ldrh	r1, [r3, #16]
    if (pktlen != sizeof(*req) + 2 && pktlen != sizeof(*req) + 16) {
   1debc:	2906      	cmp	r1, #6
   1debe:	d001      	beq.n	1dec4 <ble_att_svr_rx_read_group_type+0x22>
   1dec0:	2914      	cmp	r1, #20
   1dec2:	d140      	bne.n	1df46 <ble_att_svr_rx_read_group_type+0xa4>
    rc = ble_att_svr_pullup_req_base(rxom, pktlen, &att_err);
   1dec4:	f10d 0215 	add.w	r2, sp, #21
   1dec8:	4620      	mov	r0, r4
   1deca:	f7ff f833 	bl	1cf34 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1dece:	4601      	mov	r1, r0
   1ded0:	2800      	cmp	r0, #0
   1ded2:	d139      	bne.n	1df48 <ble_att_svr_rx_read_group_type+0xa6>
    req = (struct ble_att_read_group_type_req *)(*rxom)->om_data;
   1ded4:	6821      	ldr	r1, [r4, #0]
   1ded6:	680b      	ldr	r3, [r1, #0]
    start_handle = le16toh(req->bagq_start_handle);
   1ded8:	881e      	ldrh	r6, [r3, #0]
   1deda:	b2b7      	uxth	r7, r6
    end_handle = le16toh(req->bagq_end_handle);
   1dedc:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   1dee0:	4547      	cmp	r7, r8
   1dee2:	d800      	bhi.n	1dee6 <ble_att_svr_rx_read_group_type+0x44>
   1dee4:	b937      	cbnz	r7, 1def4 <ble_att_svr_rx_read_group_type+0x52>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1dee6:	2301      	movs	r3, #1
   1dee8:	f88d 3015 	strb.w	r3, [sp, #21]
        err_handle = start_handle;
   1deec:	f8ad 6016 	strh.w	r6, [sp, #22]
        rc = BLE_HS_EBADDATA;
   1def0:	210a      	movs	r1, #10
        goto done;
   1def2:	e029      	b.n	1df48 <ble_att_svr_rx_read_group_type+0xa6>
    om_uuid_len = OS_MBUF_PKTHDR(*rxom)->omp_len - sizeof(*req);
   1def4:	8a0b      	ldrh	r3, [r1, #16]
    rc = ble_uuid_init_from_att_mbuf(&uuid, *rxom, sizeof(*req), om_uuid_len);
   1def6:	3b04      	subs	r3, #4
   1def8:	2204      	movs	r2, #4
   1defa:	a806      	add	r0, sp, #24
   1defc:	f008 fd4a 	bl	26994 <ble_uuid_init_from_att_mbuf>
    if (rc != 0) {
   1df00:	b130      	cbz	r0, 1df10 <ble_att_svr_rx_read_group_type+0x6e>
        att_err = BLE_ATT_ERR_INVALID_PDU;
   1df02:	2304      	movs	r3, #4
   1df04:	f88d 3015 	strb.w	r3, [sp, #21]
        err_handle = start_handle;
   1df08:	f8ad 6016 	strh.w	r6, [sp, #22]
        rc = BLE_HS_EBADDATA;
   1df0c:	210a      	movs	r1, #10
        goto done;
   1df0e:	e01b      	b.n	1df48 <ble_att_svr_rx_read_group_type+0xa6>
    if (!ble_att_svr_is_valid_read_group_type(&uuid.u)) {
   1df10:	a806      	add	r0, sp, #24
   1df12:	f7ff f97a 	bl	1d20a <ble_att_svr_is_valid_read_group_type>
   1df16:	b928      	cbnz	r0, 1df24 <ble_att_svr_rx_read_group_type+0x82>
        att_err = BLE_ATT_ERR_UNSUPPORTED_GROUP;
   1df18:	2110      	movs	r1, #16
   1df1a:	f88d 1015 	strb.w	r1, [sp, #21]
        err_handle = start_handle;
   1df1e:	f8ad 6016 	strh.w	r6, [sp, #22]
        goto done;
   1df22:	e011      	b.n	1df48 <ble_att_svr_rx_read_group_type+0xa6>
    rc = ble_att_svr_build_read_group_type_rsp(conn_handle, start_handle,
   1df24:	f10d 0316 	add.w	r3, sp, #22
   1df28:	9303      	str	r3, [sp, #12]
   1df2a:	f10d 0315 	add.w	r3, sp, #21
   1df2e:	9302      	str	r3, [sp, #8]
   1df30:	ab0b      	add	r3, sp, #44	; 0x2c
   1df32:	9301      	str	r3, [sp, #4]
   1df34:	9400      	str	r4, [sp, #0]
   1df36:	ab06      	add	r3, sp, #24
   1df38:	4642      	mov	r2, r8
   1df3a:	4639      	mov	r1, r7
   1df3c:	4628      	mov	r0, r5
   1df3e:	f7ff fa89 	bl	1d454 <ble_att_svr_build_read_group_type_rsp>
   1df42:	4601      	mov	r1, r0
    if (rc != 0) {
   1df44:	e000      	b.n	1df48 <ble_att_svr_rx_read_group_type+0xa6>
        rc = BLE_HS_EBADDATA;
   1df46:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom,
   1df48:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1df4c:	9301      	str	r3, [sp, #4]
   1df4e:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1df52:	9300      	str	r3, [sp, #0]
   1df54:	2310      	movs	r3, #16
   1df56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1df58:	4628      	mov	r0, r5
   1df5a:	f7ff fd9b 	bl	1da94 <ble_att_svr_tx_rsp>
}
   1df5e:	b00c      	add	sp, #48	; 0x30
   1df60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001df64 <ble_att_svr_rx_write>:
{
   1df64:	b570      	push	{r4, r5, r6, lr}
   1df66:	b084      	sub	sp, #16
   1df68:	4605      	mov	r5, r0
   1df6a:	460c      	mov	r4, r1
    txom = NULL;
   1df6c:	2300      	movs	r3, #0
   1df6e:	9303      	str	r3, [sp, #12]
    att_err = 0;
   1df70:	f88d 300b 	strb.w	r3, [sp, #11]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1df74:	f10d 020b 	add.w	r2, sp, #11
   1df78:	2102      	movs	r1, #2
   1df7a:	4620      	mov	r0, r4
   1df7c:	f7fe ffda 	bl	1cf34 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1df80:	b160      	cbz	r0, 1df9c <ble_att_svr_rx_write+0x38>
   1df82:	4601      	mov	r1, r0
    handle = 0;
   1df84:	2600      	movs	r6, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_WRITE_REQ,
   1df86:	9601      	str	r6, [sp, #4]
   1df88:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1df8c:	9300      	str	r3, [sp, #0]
   1df8e:	2312      	movs	r3, #18
   1df90:	9a03      	ldr	r2, [sp, #12]
   1df92:	4628      	mov	r0, r5
   1df94:	f7ff fd7e 	bl	1da94 <ble_att_svr_tx_rsp>
}
   1df98:	b004      	add	sp, #16
   1df9a:	bd70      	pop	{r4, r5, r6, pc}
    req = (struct ble_att_write_req *)(*rxom)->om_data;
   1df9c:	6823      	ldr	r3, [r4, #0]
   1df9e:	681b      	ldr	r3, [r3, #0]
    handle = le16toh(req->bawq_handle);
   1dfa0:	881e      	ldrh	r6, [r3, #0]
    rc = ble_att_svr_build_write_rsp(rxom, &txom, &att_err);
   1dfa2:	f10d 020b 	add.w	r2, sp, #11
   1dfa6:	a903      	add	r1, sp, #12
   1dfa8:	4620      	mov	r0, r4
   1dfaa:	f7ff f818 	bl	1cfde <ble_att_svr_build_write_rsp>
    if (rc != 0) {
   1dfae:	4601      	mov	r1, r0
   1dfb0:	2800      	cmp	r0, #0
   1dfb2:	d1e8      	bne.n	1df86 <ble_att_svr_rx_write+0x22>
    os_mbuf_adj(*rxom, sizeof(*req));
   1dfb4:	2102      	movs	r1, #2
   1dfb6:	6820      	ldr	r0, [r4, #0]
   1dfb8:	f7f7 fc33 	bl	15822 <os_mbuf_adj>
    rc = ble_att_svr_write_handle(conn_handle, handle, 0, rxom, &att_err);
   1dfbc:	f10d 030b 	add.w	r3, sp, #11
   1dfc0:	9300      	str	r3, [sp, #0]
   1dfc2:	4623      	mov	r3, r4
   1dfc4:	2200      	movs	r2, #0
   1dfc6:	4631      	mov	r1, r6
   1dfc8:	4628      	mov	r0, r5
   1dfca:	f7ff fbd1 	bl	1d770 <ble_att_svr_write_handle>
   1dfce:	4601      	mov	r1, r0
    if (rc != 0) {
   1dfd0:	e7d9      	b.n	1df86 <ble_att_svr_rx_write+0x22>

0001dfd2 <ble_att_svr_rx_write_no_rsp>:
{
   1dfd2:	b570      	push	{r4, r5, r6, lr}
   1dfd4:	b084      	sub	sp, #16
   1dfd6:	4605      	mov	r5, r0
   1dfd8:	460c      	mov	r4, r1
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1dfda:	f10d 020f 	add.w	r2, sp, #15
   1dfde:	2102      	movs	r1, #2
   1dfe0:	4620      	mov	r0, r4
   1dfe2:	f7fe ffa7 	bl	1cf34 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1dfe6:	4603      	mov	r3, r0
   1dfe8:	b110      	cbz	r0, 1dff0 <ble_att_svr_rx_write_no_rsp+0x1e>
}
   1dfea:	4618      	mov	r0, r3
   1dfec:	b004      	add	sp, #16
   1dfee:	bd70      	pop	{r4, r5, r6, pc}
    req = (struct ble_att_write_req *)(*rxom)->om_data;
   1dff0:	6820      	ldr	r0, [r4, #0]
   1dff2:	6803      	ldr	r3, [r0, #0]
    handle = le16toh(req->bawq_handle);
   1dff4:	881e      	ldrh	r6, [r3, #0]
    os_mbuf_adj(*rxom, sizeof(*req));
   1dff6:	2102      	movs	r1, #2
   1dff8:	f7f7 fc13 	bl	15822 <os_mbuf_adj>
    return ble_att_svr_write_handle(conn_handle, handle, 0, rxom, &att_err);
   1dffc:	f10d 030f 	add.w	r3, sp, #15
   1e000:	9300      	str	r3, [sp, #0]
   1e002:	4623      	mov	r3, r4
   1e004:	2200      	movs	r2, #0
   1e006:	4631      	mov	r1, r6
   1e008:	4628      	mov	r0, r5
   1e00a:	f7ff fbb1 	bl	1d770 <ble_att_svr_write_handle>
   1e00e:	4603      	mov	r3, r0
   1e010:	e7eb      	b.n	1dfea <ble_att_svr_rx_write_no_rsp+0x18>

0001e012 <ble_att_svr_prep_clear>:
{
   1e012:	b510      	push	{r4, lr}
   1e014:	4604      	mov	r4, r0
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   1e016:	6820      	ldr	r0, [r4, #0]
   1e018:	b120      	cbz	r0, 1e024 <ble_att_svr_prep_clear+0x12>
        SLIST_REMOVE_HEAD(prep_list, bape_next);
   1e01a:	6803      	ldr	r3, [r0, #0]
   1e01c:	6023      	str	r3, [r4, #0]
        ble_att_svr_prep_free(entry);
   1e01e:	f7ff fad5 	bl	1d5cc <ble_att_svr_prep_free>
   1e022:	e7f8      	b.n	1e016 <ble_att_svr_prep_clear+0x4>
}
   1e024:	bd10      	pop	{r4, pc}

0001e026 <ble_att_svr_rx_prep_write>:
{
   1e026:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e02a:	b085      	sub	sp, #20
   1e02c:	4605      	mov	r5, r0
   1e02e:	460c      	mov	r4, r1
    att_err = 0;
   1e030:	2300      	movs	r3, #0
   1e032:	f88d 300f 	strb.w	r3, [sp, #15]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1e036:	f10d 020f 	add.w	r2, sp, #15
   1e03a:	2104      	movs	r1, #4
   1e03c:	4620      	mov	r0, r4
   1e03e:	f7fe ff79 	bl	1cf34 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1e042:	b178      	cbz	r0, 1e064 <ble_att_svr_rx_prep_write+0x3e>
   1e044:	4606      	mov	r6, r0
    err_handle = 0;
   1e046:	2700      	movs	r7, #0
    txom = NULL;
   1e048:	46b8      	mov	r8, r7
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_PREP_WRITE_REQ,
   1e04a:	9701      	str	r7, [sp, #4]
   1e04c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1e050:	9300      	str	r3, [sp, #0]
   1e052:	2316      	movs	r3, #22
   1e054:	4642      	mov	r2, r8
   1e056:	4631      	mov	r1, r6
   1e058:	4628      	mov	r0, r5
   1e05a:	f7ff fd1b 	bl	1da94 <ble_att_svr_tx_rsp>
}
   1e05e:	b005      	add	sp, #20
   1e060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_prep_write_cmd *)(*rxom)->om_data;
   1e064:	6823      	ldr	r3, [r4, #0]
   1e066:	f8d3 9000 	ldr.w	r9, [r3]
    err_handle = le16toh(req->bapc_handle);
   1e06a:	f8b9 7000 	ldrh.w	r7, [r9]
    attr_entry = ble_att_svr_find_by_handle(le16toh(req->bapc_handle));
   1e06e:	4638      	mov	r0, r7
   1e070:	f7ff fb72 	bl	1d758 <ble_att_svr_find_by_handle>
    if (attr_entry == NULL) {
   1e074:	4680      	mov	r8, r0
   1e076:	b158      	cbz	r0, 1e090 <ble_att_svr_rx_prep_write+0x6a>
    rc = ble_att_svr_check_perms(conn_handle, 0, attr_entry, &att_err);
   1e078:	f10d 030f 	add.w	r3, sp, #15
   1e07c:	4602      	mov	r2, r0
   1e07e:	2100      	movs	r1, #0
   1e080:	4628      	mov	r0, r5
   1e082:	f7fe fe6e 	bl	1cd62 <ble_att_svr_check_perms>
    if (rc != 0) {
   1e086:	4606      	mov	r6, r0
   1e088:	b138      	cbz	r0, 1e09a <ble_att_svr_rx_prep_write+0x74>
    txom = NULL;
   1e08a:	f04f 0800 	mov.w	r8, #0
   1e08e:	e7dc      	b.n	1e04a <ble_att_svr_rx_prep_write+0x24>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1e090:	2301      	movs	r3, #1
   1e092:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOENT;
   1e096:	2605      	movs	r6, #5
        goto done;
   1e098:	e7d7      	b.n	1e04a <ble_att_svr_rx_prep_write+0x24>
    ble_hs_lock();
   1e09a:	f003 fd33 	bl	21b04 <ble_hs_lock>
    rc = ble_att_svr_insert_prep_entry(conn_handle, le16toh(req->bapc_handle),
   1e09e:	f8b9 1000 	ldrh.w	r1, [r9]
                                       le16toh(req->bapc_offset), *rxom,
   1e0a2:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    rc = ble_att_svr_insert_prep_entry(conn_handle, le16toh(req->bapc_handle),
   1e0a6:	f10d 030f 	add.w	r3, sp, #15
   1e0aa:	9300      	str	r3, [sp, #0]
   1e0ac:	6823      	ldr	r3, [r4, #0]
   1e0ae:	4628      	mov	r0, r5
   1e0b0:	f7ff fab8 	bl	1d624 <ble_att_svr_insert_prep_entry>
   1e0b4:	4606      	mov	r6, r0
    ble_hs_unlock();
   1e0b6:	f003 fd29 	bl	21b0c <ble_hs_unlock>
    txom = *rxom;
   1e0ba:	f8d4 8000 	ldr.w	r8, [r4]
    *rxom = NULL;
   1e0be:	2300      	movs	r3, #0
   1e0c0:	6023      	str	r3, [r4, #0]
    if (rc != 0) {
   1e0c2:	2e00      	cmp	r6, #0
   1e0c4:	d1c1      	bne.n	1e04a <ble_att_svr_rx_prep_write+0x24>
    os_mbuf_prepend(txom, 1);
   1e0c6:	2101      	movs	r1, #1
   1e0c8:	4640      	mov	r0, r8
   1e0ca:	f7f7 fc38 	bl	1593e <os_mbuf_prepend>
    txom->om_data[0] = BLE_ATT_OP_PREP_WRITE_RSP;
   1e0ce:	f8d8 3000 	ldr.w	r3, [r8]
   1e0d2:	2217      	movs	r2, #23
   1e0d4:	701a      	strb	r2, [r3, #0]
    rc = 0;
   1e0d6:	e7b8      	b.n	1e04a <ble_att_svr_rx_prep_write+0x24>

0001e0d8 <ble_att_svr_rx_exec_write>:
{
   1e0d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e0dc:	b085      	sub	sp, #20
   1e0de:	4605      	mov	r5, r0
   1e0e0:	460c      	mov	r4, r1
    err_handle = 0;
   1e0e2:	2300      	movs	r3, #0
   1e0e4:	f8ad 300a 	strh.w	r3, [sp, #10]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1e0e8:	f10d 0209 	add.w	r2, sp, #9
   1e0ec:	2101      	movs	r1, #1
   1e0ee:	4620      	mov	r0, r4
   1e0f0:	f7fe ff20 	bl	1cf34 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1e0f4:	4607      	mov	r7, r0
   1e0f6:	b190      	cbz	r0, 1e11e <ble_att_svr_rx_exec_write+0x46>
        flags = 0;
   1e0f8:	f04f 0800 	mov.w	r8, #0
    txom = NULL;
   1e0fc:	4646      	mov	r6, r8
    if (rc == 0) {
   1e0fe:	b337      	cbz	r7, 1e14e <ble_att_svr_rx_exec_write+0x76>
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_EXEC_WRITE_REQ,
   1e100:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1e104:	9301      	str	r3, [sp, #4]
   1e106:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1e10a:	9300      	str	r3, [sp, #0]
   1e10c:	2318      	movs	r3, #24
   1e10e:	4632      	mov	r2, r6
   1e110:	4639      	mov	r1, r7
   1e112:	4628      	mov	r0, r5
   1e114:	f7ff fcbe 	bl	1da94 <ble_att_svr_tx_rsp>
}
   1e118:	b005      	add	sp, #20
   1e11a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_exec_write_req *)(*rxom)->om_data;
   1e11e:	6826      	ldr	r6, [r4, #0]
   1e120:	6833      	ldr	r3, [r6, #0]
    flags = req->baeq_flags;
   1e122:	f893 8000 	ldrb.w	r8, [r3]
    *rxom = NULL;
   1e126:	f04f 0900 	mov.w	r9, #0
   1e12a:	f8c4 9000 	str.w	r9, [r4]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1e12e:	8a31      	ldrh	r1, [r6, #16]
   1e130:	4630      	mov	r0, r6
   1e132:	f7f7 fb76 	bl	15822 <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_EXEC_WRITE_RSP, 0, txom) == NULL) {
   1e136:	4632      	mov	r2, r6
   1e138:	4649      	mov	r1, r9
   1e13a:	2019      	movs	r0, #25
   1e13c:	f7fe fd65 	bl	1cc0a <ble_att_cmd_prepare>
   1e140:	2800      	cmp	r0, #0
   1e142:	d1dc      	bne.n	1e0fe <ble_att_svr_rx_exec_write+0x26>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1e144:	2311      	movs	r3, #17
   1e146:	f88d 3009 	strb.w	r3, [sp, #9]
        rc = BLE_HS_ENOMEM;
   1e14a:	2706      	movs	r7, #6
        goto done;
   1e14c:	e7d7      	b.n	1e0fe <ble_att_svr_rx_exec_write+0x26>
        ble_hs_lock();
   1e14e:	f003 fcd9 	bl	21b04 <ble_hs_lock>
        conn = ble_hs_conn_find_assert(conn_handle);
   1e152:	4628      	mov	r0, r5
   1e154:	f004 fb4a 	bl	227ec <ble_hs_conn_find_assert>
        prep_list = conn->bhc_att_svr.basc_prep_list;
   1e158:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1e15a:	9303      	str	r3, [sp, #12]
        SLIST_INIT(&conn->bhc_att_svr.basc_prep_list);
   1e15c:	2300      	movs	r3, #0
   1e15e:	6443      	str	r3, [r0, #68]	; 0x44
        ble_hs_unlock();
   1e160:	f003 fcd4 	bl	21b0c <ble_hs_unlock>
        if (flags) {
   1e164:	f1b8 0f00 	cmp.w	r8, #0
   1e168:	d103      	bne.n	1e172 <ble_att_svr_rx_exec_write+0x9a>
        ble_att_svr_prep_clear(&prep_list);
   1e16a:	a803      	add	r0, sp, #12
   1e16c:	f7ff ff51 	bl	1e012 <ble_att_svr_prep_clear>
   1e170:	e7c6      	b.n	1e100 <ble_att_svr_rx_exec_write+0x28>
            att_err = ble_att_svr_prep_write(conn_handle, &prep_list,
   1e172:	f10d 020a 	add.w	r2, sp, #10
   1e176:	a903      	add	r1, sp, #12
   1e178:	4628      	mov	r0, r5
   1e17a:	f7ff fb11 	bl	1d7a0 <ble_att_svr_prep_write>
   1e17e:	b2c0      	uxtb	r0, r0
   1e180:	f88d 0009 	strb.w	r0, [sp, #9]
            if (att_err != 0) {
   1e184:	2800      	cmp	r0, #0
   1e186:	d0f0      	beq.n	1e16a <ble_att_svr_rx_exec_write+0x92>
                rc = BLE_HS_EAPP;
   1e188:	2709      	movs	r7, #9
   1e18a:	e7ee      	b.n	1e16a <ble_att_svr_rx_exec_write+0x92>

0001e18c <ble_att_svr_rx_notify>:
{
   1e18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e18e:	4605      	mov	r5, r0
   1e190:	460c      	mov	r4, r1
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), NULL);
   1e192:	2200      	movs	r2, #0
   1e194:	2102      	movs	r1, #2
   1e196:	4620      	mov	r0, r4
   1e198:	f7fe fecc 	bl	1cf34 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1e19c:	b988      	cbnz	r0, 1e1c2 <ble_att_svr_rx_notify+0x36>
   1e19e:	4606      	mov	r6, r0
    req = (struct ble_att_notify_req *)(*rxom)->om_data;
   1e1a0:	6820      	ldr	r0, [r4, #0]
   1e1a2:	6803      	ldr	r3, [r0, #0]
    handle = le16toh(req->banq_handle);
   1e1a4:	881f      	ldrh	r7, [r3, #0]
    if (handle == 0) {
   1e1a6:	b177      	cbz	r7, 1e1c6 <ble_att_svr_rx_notify+0x3a>
    os_mbuf_adj(*rxom, sizeof(*req));
   1e1a8:	2102      	movs	r1, #2
   1e1aa:	f7f7 fb3a 	bl	15822 <os_mbuf_adj>
    ble_gap_notify_rx_event(conn_handle, handle, *rxom, 0);
   1e1ae:	2300      	movs	r3, #0
   1e1b0:	6822      	ldr	r2, [r4, #0]
   1e1b2:	4639      	mov	r1, r7
   1e1b4:	4628      	mov	r0, r5
   1e1b6:	f001 face 	bl	1f756 <ble_gap_notify_rx_event>
    *rxom = NULL;
   1e1ba:	2300      	movs	r3, #0
   1e1bc:	6023      	str	r3, [r4, #0]
}
   1e1be:	4630      	mov	r0, r6
   1e1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   1e1c2:	2606      	movs	r6, #6
   1e1c4:	e7fb      	b.n	1e1be <ble_att_svr_rx_notify+0x32>
        return BLE_HS_EBADDATA;
   1e1c6:	260a      	movs	r6, #10
   1e1c8:	e7f9      	b.n	1e1be <ble_att_svr_rx_notify+0x32>

0001e1ca <ble_att_svr_rx_indicate>:
{
   1e1ca:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e1cc:	b085      	sub	sp, #20
   1e1ce:	4607      	mov	r7, r0
   1e1d0:	460c      	mov	r4, r1
    txom = NULL;
   1e1d2:	2200      	movs	r2, #0
   1e1d4:	9203      	str	r2, [sp, #12]
    att_err = 0;
   1e1d6:	f88d 200b 	strb.w	r2, [sp, #11]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), NULL);
   1e1da:	2102      	movs	r1, #2
   1e1dc:	4620      	mov	r0, r4
   1e1de:	f7fe fea9 	bl	1cf34 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1e1e2:	b9d0      	cbnz	r0, 1e21a <ble_att_svr_rx_indicate+0x50>
    req = (struct ble_att_indicate_req *)(*rxom)->om_data;
   1e1e4:	6823      	ldr	r3, [r4, #0]
   1e1e6:	681b      	ldr	r3, [r3, #0]
    handle = le16toh(req->baiq_handle);
   1e1e8:	881d      	ldrh	r5, [r3, #0]
    if (handle == 0) {
   1e1ea:	b90d      	cbnz	r5, 1e1f0 <ble_att_svr_rx_indicate+0x26>
        rc = BLE_HS_EBADDATA;
   1e1ec:	260a      	movs	r6, #10
   1e1ee:	e016      	b.n	1e21e <ble_att_svr_rx_indicate+0x54>
    rc = ble_att_svr_build_indicate_rsp(rxom, &txom, &att_err);
   1e1f0:	f10d 020b 	add.w	r2, sp, #11
   1e1f4:	a903      	add	r1, sp, #12
   1e1f6:	4620      	mov	r0, r4
   1e1f8:	f7fe ff0a 	bl	1d010 <ble_att_svr_build_indicate_rsp>
    if (rc != 0) {
   1e1fc:	4606      	mov	r6, r0
   1e1fe:	b970      	cbnz	r0, 1e21e <ble_att_svr_rx_indicate+0x54>
    os_mbuf_adj(*rxom, sizeof(*req));
   1e200:	2102      	movs	r1, #2
   1e202:	6820      	ldr	r0, [r4, #0]
   1e204:	f7f7 fb0d 	bl	15822 <os_mbuf_adj>
    ble_gap_notify_rx_event(conn_handle, handle, *rxom, 1);
   1e208:	2301      	movs	r3, #1
   1e20a:	6822      	ldr	r2, [r4, #0]
   1e20c:	4629      	mov	r1, r5
   1e20e:	4638      	mov	r0, r7
   1e210:	f001 faa1 	bl	1f756 <ble_gap_notify_rx_event>
    *rxom = NULL;
   1e214:	2300      	movs	r3, #0
   1e216:	6023      	str	r3, [r4, #0]
    rc = 0;
   1e218:	e001      	b.n	1e21e <ble_att_svr_rx_indicate+0x54>
   1e21a:	4606      	mov	r6, r0
    handle = 0;
   1e21c:	2500      	movs	r5, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_INDICATE_REQ,
   1e21e:	9501      	str	r5, [sp, #4]
   1e220:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1e224:	9300      	str	r3, [sp, #0]
   1e226:	231d      	movs	r3, #29
   1e228:	9a03      	ldr	r2, [sp, #12]
   1e22a:	4631      	mov	r1, r6
   1e22c:	4638      	mov	r0, r7
   1e22e:	f7ff fc31 	bl	1da94 <ble_att_svr_tx_rsp>
}
   1e232:	b005      	add	sp, #20
   1e234:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0001e238 <ble_att_svr_start>:

int
ble_att_svr_start(void)
{
   1e238:	b510      	push	{r4, lr}
   1e23a:	b082      	sub	sp, #8
    int rc;

    ble_att_svr_free_start_mem();
   1e23c:	f7ff fa54 	bl	1d6e8 <ble_att_svr_free_start_mem>

    if (ble_hs_max_attrs > 0) {
   1e240:	4b0f      	ldr	r3, [pc, #60]	; (1e280 <ble_att_svr_start+0x48>)
   1e242:	881c      	ldrh	r4, [r3, #0]
   1e244:	b91c      	cbnz	r4, 1e24e <ble_att_svr_start+0x16>
            rc = BLE_HS_EOS;
            goto err;
        }
    }

    return 0;
   1e246:	2400      	movs	r4, #0

err:
    ble_att_svr_free_start_mem();
    return rc;
}
   1e248:	4620      	mov	r0, r4
   1e24a:	b002      	add	sp, #8
   1e24c:	bd10      	pop	{r4, pc}
        ble_att_svr_entry_mem = malloc(
   1e24e:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   1e252:	0080      	lsls	r0, r0, #2
   1e254:	f00f fa9a 	bl	2d78c <malloc>
   1e258:	4603      	mov	r3, r0
   1e25a:	4a0a      	ldr	r2, [pc, #40]	; (1e284 <ble_att_svr_start+0x4c>)
   1e25c:	6010      	str	r0, [r2, #0]
        if (ble_att_svr_entry_mem == NULL) {
   1e25e:	b168      	cbz	r0, 1e27c <ble_att_svr_start+0x44>
        rc = os_mempool_init(&ble_att_svr_entry_pool, ble_hs_max_attrs,
   1e260:	4a09      	ldr	r2, [pc, #36]	; (1e288 <ble_att_svr_start+0x50>)
   1e262:	9200      	str	r2, [sp, #0]
   1e264:	2214      	movs	r2, #20
   1e266:	4621      	mov	r1, r4
   1e268:	4808      	ldr	r0, [pc, #32]	; (1e28c <ble_att_svr_start+0x54>)
   1e26a:	f7f7 fda9 	bl	15dc0 <os_mempool_init>
        if (rc != 0) {
   1e26e:	b908      	cbnz	r0, 1e274 <ble_att_svr_start+0x3c>
    return 0;
   1e270:	2400      	movs	r4, #0
   1e272:	e7e9      	b.n	1e248 <ble_att_svr_start+0x10>
            rc = BLE_HS_EOS;
   1e274:	240b      	movs	r4, #11
    ble_att_svr_free_start_mem();
   1e276:	f7ff fa37 	bl	1d6e8 <ble_att_svr_free_start_mem>
    return rc;
   1e27a:	e7e5      	b.n	1e248 <ble_att_svr_start+0x10>
            rc = BLE_HS_ENOMEM;
   1e27c:	2406      	movs	r4, #6
   1e27e:	e7fa      	b.n	1e276 <ble_att_svr_start+0x3e>
   1e280:	10003cb8 	.word	0x10003cb8
   1e284:	10003558 	.word	0x10003558
   1e288:	00030bf8 	.word	0x00030bf8
   1e28c:	1000355c 	.word	0x1000355c

0001e290 <ble_att_svr_init>:

int
ble_att_svr_init(void)
{
   1e290:	b500      	push	{lr}
   1e292:	b083      	sub	sp, #12
    int rc;

    if (MYNEWT_VAL(BLE_ATT_SVR_MAX_PREP_ENTRIES) > 0) {
        rc = os_mempool_init(&ble_att_svr_prep_entry_pool,
   1e294:	4b0a      	ldr	r3, [pc, #40]	; (1e2c0 <ble_att_svr_init+0x30>)
   1e296:	9300      	str	r3, [sp, #0]
   1e298:	4b0a      	ldr	r3, [pc, #40]	; (1e2c4 <ble_att_svr_init+0x34>)
   1e29a:	220c      	movs	r2, #12
   1e29c:	2140      	movs	r1, #64	; 0x40
   1e29e:	480a      	ldr	r0, [pc, #40]	; (1e2c8 <ble_att_svr_init+0x38>)
   1e2a0:	f7f7 fd8e 	bl	15dc0 <os_mempool_init>
                             MYNEWT_VAL(BLE_ATT_SVR_MAX_PREP_ENTRIES),
                             sizeof (struct ble_att_prep_entry),
                             ble_att_svr_prep_entry_mem,
                             "ble_att_svr_prep_entry_pool");
        if (rc != 0) {
   1e2a4:	b950      	cbnz	r0, 1e2bc <ble_att_svr_init+0x2c>
            return BLE_HS_EOS;
        }
    }

    STAILQ_INIT(&ble_att_svr_list);
   1e2a6:	4b09      	ldr	r3, [pc, #36]	; (1e2cc <ble_att_svr_init+0x3c>)
   1e2a8:	6018      	str	r0, [r3, #0]
   1e2aa:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&ble_att_svr_hidden_list);
   1e2ac:	4b08      	ldr	r3, [pc, #32]	; (1e2d0 <ble_att_svr_init+0x40>)
   1e2ae:	6018      	str	r0, [r3, #0]
   1e2b0:	605b      	str	r3, [r3, #4]

    ble_att_svr_id = 0;
   1e2b2:	4b08      	ldr	r3, [pc, #32]	; (1e2d4 <ble_att_svr_init+0x44>)
   1e2b4:	8018      	strh	r0, [r3, #0]

    return 0;
}
   1e2b6:	b003      	add	sp, #12
   1e2b8:	f85d fb04 	ldr.w	pc, [sp], #4
            return BLE_HS_EOS;
   1e2bc:	200b      	movs	r0, #11
   1e2be:	e7fa      	b.n	1e2b6 <ble_att_svr_init+0x26>
   1e2c0:	00030c10 	.word	0x00030c10
   1e2c4:	1000358c 	.word	0x1000358c
   1e2c8:	1000388c 	.word	0x1000388c
   1e2cc:	10003584 	.word	0x10003584
   1e2d0:	10003578 	.word	0x10003578
   1e2d4:	10003580 	.word	0x10003580

0001e2d8 <ble_gap_call_event_cb>:
ble_gap_event_listener_call(struct ble_gap_event *event);

static int
ble_gap_call_event_cb(struct ble_gap_event *event,
                      ble_gap_event_fn *cb, void *cb_arg)
{
   1e2d8:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (cb != NULL) {
   1e2da:	b119      	cbz	r1, 1e2e4 <ble_gap_call_event_cb+0xc>
   1e2dc:	460b      	mov	r3, r1
        rc = cb(event, cb_arg);
   1e2de:	4611      	mov	r1, r2
   1e2e0:	4798      	blx	r3
        }
        rc = 0;
    }

    return rc;
}
   1e2e2:	bd08      	pop	{r3, pc}
        if (event->type == BLE_GAP_EVENT_CONN_UPDATE_REQ) {
   1e2e4:	7803      	ldrb	r3, [r0, #0]
   1e2e6:	2b04      	cmp	r3, #4
   1e2e8:	d001      	beq.n	1e2ee <ble_gap_call_event_cb+0x16>
        rc = 0;
   1e2ea:	2000      	movs	r0, #0
    return rc;
   1e2ec:	e7f9      	b.n	1e2e2 <ble_gap_call_event_cb+0xa>
                *event->conn_update_req.peer_params;
   1e2ee:	6842      	ldr	r2, [r0, #4]
            *event->conn_update_req.self_params =
   1e2f0:	6883      	ldr	r3, [r0, #8]
   1e2f2:	6810      	ldr	r0, [r2, #0]
   1e2f4:	6851      	ldr	r1, [r2, #4]
   1e2f6:	6892      	ldr	r2, [r2, #8]
   1e2f8:	6018      	str	r0, [r3, #0]
   1e2fa:	6059      	str	r1, [r3, #4]
   1e2fc:	609a      	str	r2, [r3, #8]
        rc = 0;
   1e2fe:	2000      	movs	r0, #0
   1e300:	e7ef      	b.n	1e2e2 <ble_gap_call_event_cb+0xa>
	...

0001e304 <ble_gap_is_preempted>:
    if (ble_gap_master.preempted_op != BLE_GAP_OP_NULL) {
        return true;
    }
#endif
#if NIMBLE_BLE_ADVERTISE
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1e304:	2300      	movs	r3, #0
   1e306:	2b00      	cmp	r3, #0
   1e308:	dd01      	ble.n	1e30e <ble_gap_is_preempted+0xa>
        if (ble_gap_slave[i].preempted) {
            return true;
        }
    }
#endif
    return false;
   1e30a:	2000      	movs	r0, #0
}
   1e30c:	4770      	bx	lr
        if (ble_gap_slave[i].preempted) {
   1e30e:	4a05      	ldr	r2, [pc, #20]	; (1e324 <ble_gap_is_preempted+0x20>)
   1e310:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1e314:	7852      	ldrb	r2, [r2, #1]
   1e316:	f3c2 0080 	ubfx	r0, r2, #2, #1
   1e31a:	f012 0f04 	tst.w	r2, #4
   1e31e:	d1f5      	bne.n	1e30c <ble_gap_is_preempted+0x8>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1e320:	3301      	adds	r3, #1
   1e322:	e7f0      	b.n	1e306 <ble_gap_is_preempted+0x2>
   1e324:	1000396c 	.word	0x1000396c

0001e328 <ble_gap_has_client>:

#if MYNEWT_VAL(BLE_ROLE_CENTRAL) || MYNEWT_VAL(BLE_ROLE_PERIPHERAL) || MYNEWT_VAL(BLE_ROLE_OBSERVER)
static bool
ble_gap_has_client(struct ble_gap_master_state *out_state)
{
    if (!out_state) {
   1e328:	b120      	cbz	r0, 1e334 <ble_gap_has_client+0xc>
        return 0;
    }

    return out_state->cb != NULL;
   1e32a:	6880      	ldr	r0, [r0, #8]
   1e32c:	3800      	subs	r0, #0
   1e32e:	bf18      	it	ne
   1e330:	2001      	movne	r0, #1
   1e332:	4770      	bx	lr
        return 0;
   1e334:	2000      	movs	r0, #0
}
   1e336:	4770      	bx	lr

0001e338 <ble_gap_update_to_l2cap>:
#if NIMBLE_BLE_CONNECT
static void
ble_gap_update_to_l2cap(const struct ble_gap_upd_params *params,
                        struct ble_l2cap_sig_update_params *l2cap_params)
{
    l2cap_params->itvl_min = params->itvl_min;
   1e338:	8803      	ldrh	r3, [r0, #0]
   1e33a:	800b      	strh	r3, [r1, #0]
    l2cap_params->itvl_max = params->itvl_max;
   1e33c:	8843      	ldrh	r3, [r0, #2]
   1e33e:	804b      	strh	r3, [r1, #2]
    l2cap_params->slave_latency = params->latency;
   1e340:	8883      	ldrh	r3, [r0, #4]
   1e342:	808b      	strh	r3, [r1, #4]
    l2cap_params->timeout_multiplier = params->supervision_timeout;
   1e344:	88c3      	ldrh	r3, [r0, #6]
   1e346:	80cb      	strh	r3, [r1, #6]
}
   1e348:	4770      	bx	lr
	...

0001e34c <ble_gap_adv_active_instance>:
#if NIMBLE_BLE_ADVERTISE || NIMBLE_BLE_CONNECT
static int
ble_gap_adv_active_instance(uint8_t instance)
{
    /* Assume read is atomic; mutex not necessary. */
    return ble_gap_slave[instance].op == BLE_GAP_OP_S_ADV;
   1e34c:	0100      	lsls	r0, r0, #4
   1e34e:	4b03      	ldr	r3, [pc, #12]	; (1e35c <ble_gap_adv_active_instance+0x10>)
   1e350:	5c18      	ldrb	r0, [r3, r0]
}
   1e352:	2801      	cmp	r0, #1
   1e354:	bf14      	ite	ne
   1e356:	2000      	movne	r0, #0
   1e358:	2001      	moveq	r0, #1
   1e35a:	4770      	bx	lr
   1e35c:	1000396c 	.word	0x1000396c

0001e360 <ble_gap_accept_master_conn>:
static int
ble_gap_accept_master_conn(void)
{
    int rc;

    switch (ble_gap_master.op) {
   1e360:	4b05      	ldr	r3, [pc, #20]	; (1e378 <ble_gap_accept_master_conn+0x18>)
   1e362:	7c1b      	ldrb	r3, [r3, #16]
   1e364:	2b02      	cmp	r3, #2
   1e366:	d001      	beq.n	1e36c <ble_gap_accept_master_conn+0xc>
    case BLE_GAP_OP_NULL:
    case BLE_GAP_OP_M_DISC:
        rc = BLE_HS_ENOENT;
   1e368:	2005      	movs	r0, #5
    if (rc == 0) {
        STATS_INC(ble_gap_stats, connect_mst);
    }

    return rc;
}
   1e36a:	4770      	bx	lr
        STATS_INC(ble_gap_stats, connect_mst);
   1e36c:	4a03      	ldr	r2, [pc, #12]	; (1e37c <ble_gap_accept_master_conn+0x1c>)
   1e36e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1e370:	3301      	adds	r3, #1
   1e372:	65d3      	str	r3, [r2, #92]	; 0x5c
        rc = 0;
   1e374:	2000      	movs	r0, #0
   1e376:	4770      	bx	lr
   1e378:	1000396c 	.word	0x1000396c
   1e37c:	100038ac 	.word	0x100038ac

0001e380 <ble_gap_accept_slave_conn>:
static int
ble_gap_accept_slave_conn(uint8_t instance)
{
    int rc;

    if (instance >= BLE_ADV_INSTANCES) {
   1e380:	b988      	cbnz	r0, 1e3a6 <ble_gap_accept_slave_conn+0x26>
{
   1e382:	b510      	push	{r4, lr}
   1e384:	4604      	mov	r4, r0
       rc = BLE_HS_ENOENT;
    } else if (!ble_gap_adv_active_instance(instance)) {
   1e386:	f7ff ffe1 	bl	1e34c <ble_gap_adv_active_instance>
   1e38a:	b170      	cbz	r0, 1e3aa <ble_gap_accept_slave_conn+0x2a>
        rc = BLE_HS_ENOENT;
    } else {
        if (ble_gap_slave[instance].connectable) {
   1e38c:	4b09      	ldr	r3, [pc, #36]	; (1e3b4 <ble_gap_accept_slave_conn+0x34>)
   1e38e:	eb03 1404 	add.w	r4, r3, r4, lsl #4
   1e392:	7863      	ldrb	r3, [r4, #1]
   1e394:	f013 0f08 	tst.w	r3, #8
   1e398:	d009      	beq.n	1e3ae <ble_gap_accept_slave_conn+0x2e>
            rc = BLE_HS_ENOENT;
        }
    }

    if (rc == 0) {
        STATS_INC(ble_gap_stats, connect_slv);
   1e39a:	4a07      	ldr	r2, [pc, #28]	; (1e3b8 <ble_gap_accept_slave_conn+0x38>)
   1e39c:	6e13      	ldr	r3, [r2, #96]	; 0x60
   1e39e:	3301      	adds	r3, #1
   1e3a0:	6613      	str	r3, [r2, #96]	; 0x60
            rc = 0;
   1e3a2:	2000      	movs	r0, #0
    }

    return rc;
}
   1e3a4:	bd10      	pop	{r4, pc}
       rc = BLE_HS_ENOENT;
   1e3a6:	2005      	movs	r0, #5
}
   1e3a8:	4770      	bx	lr
        rc = BLE_HS_ENOENT;
   1e3aa:	2005      	movs	r0, #5
   1e3ac:	e7fa      	b.n	1e3a4 <ble_gap_accept_slave_conn+0x24>
            rc = BLE_HS_ENOENT;
   1e3ae:	2005      	movs	r0, #5
    return rc;
   1e3b0:	e7f8      	b.n	1e3a4 <ble_gap_accept_slave_conn+0x24>
   1e3b2:	bf00      	nop
   1e3b4:	1000396c 	.word	0x1000396c
   1e3b8:	100038ac 	.word	0x100038ac

0001e3bc <ble_gap_adv_type>:
 *****************************************************************************/
#if NIMBLE_BLE_ADVERTISE && !MYNEWT_VAL(BLE_EXT_ADV)
static int
ble_gap_adv_type(const struct ble_gap_adv_params *adv_params)
{
    switch (adv_params->conn_mode) {
   1e3bc:	7803      	ldrb	r3, [r0, #0]
   1e3be:	b11b      	cbz	r3, 1e3c8 <ble_gap_adv_type+0xc>
   1e3c0:	2b01      	cmp	r3, #1
   1e3c2:	d005      	beq.n	1e3d0 <ble_gap_adv_type+0x14>
   1e3c4:	2000      	movs	r0, #0
   1e3c6:	4770      	bx	lr
    case BLE_GAP_CONN_MODE_NON:
        if (adv_params->disc_mode == BLE_GAP_DISC_MODE_NON) {
   1e3c8:	7843      	ldrb	r3, [r0, #1]
   1e3ca:	b93b      	cbnz	r3, 1e3dc <ble_gap_adv_type+0x20>
            return BLE_HCI_ADV_TYPE_ADV_NONCONN_IND;
   1e3cc:	2003      	movs	r0, #3
   1e3ce:	4770      	bx	lr

    case BLE_GAP_CONN_MODE_UND:
        return BLE_HCI_ADV_TYPE_ADV_IND;

    case BLE_GAP_CONN_MODE_DIR:
        if (adv_params->high_duty_cycle) {
   1e3d0:	7a03      	ldrb	r3, [r0, #8]
   1e3d2:	f013 0f01 	tst.w	r3, #1
   1e3d6:	d003      	beq.n	1e3e0 <ble_gap_adv_type+0x24>
            return BLE_HCI_ADV_TYPE_ADV_DIRECT_IND_HD;
   1e3d8:	2001      	movs	r0, #1
   1e3da:	4770      	bx	lr
            return BLE_HCI_ADV_TYPE_ADV_SCAN_IND;
   1e3dc:	2002      	movs	r0, #2
   1e3de:	4770      	bx	lr
        } else {
            return BLE_HCI_ADV_TYPE_ADV_DIRECT_IND_LD;
   1e3e0:	2004      	movs	r0, #4

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_HCI_ADV_TYPE_ADV_IND;
    }
}
   1e3e2:	4770      	bx	lr

0001e3e4 <ble_gap_adv_dflt_itvls>:

static void
ble_gap_adv_dflt_itvls(uint8_t conn_mode,
                       uint16_t *out_itvl_min, uint16_t *out_itvl_max)
{
    switch (conn_mode) {
   1e3e4:	2801      	cmp	r0, #1
   1e3e6:	d011      	beq.n	1e40c <ble_gap_adv_dflt_itvls+0x28>
   1e3e8:	2802      	cmp	r0, #2
   1e3ea:	d00a      	beq.n	1e402 <ble_gap_adv_dflt_itvls+0x1e>
   1e3ec:	b120      	cbz	r0, 1e3f8 <ble_gap_adv_dflt_itvls+0x14>
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
        break;

    default:
        BLE_HS_DBG_ASSERT(0);
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
   1e3ee:	2330      	movs	r3, #48	; 0x30
   1e3f0:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
   1e3f2:	2360      	movs	r3, #96	; 0x60
   1e3f4:	8013      	strh	r3, [r2, #0]
        break;
    }
}
   1e3f6:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL2_MIN;
   1e3f8:	23a0      	movs	r3, #160	; 0xa0
   1e3fa:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL2_MAX;
   1e3fc:	23f0      	movs	r3, #240	; 0xf0
   1e3fe:	8013      	strh	r3, [r2, #0]
        break;
   1e400:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
   1e402:	2330      	movs	r3, #48	; 0x30
   1e404:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
   1e406:	2360      	movs	r3, #96	; 0x60
   1e408:	8013      	strh	r3, [r2, #0]
        break;
   1e40a:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
   1e40c:	2330      	movs	r3, #48	; 0x30
   1e40e:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
   1e410:	2360      	movs	r3, #96	; 0x60
   1e412:	8013      	strh	r3, [r2, #0]
        break;
   1e414:	4770      	bx	lr
	...

0001e418 <ble_gap_update_entry_find>:
}

static struct ble_gap_update_entry *
ble_gap_update_entry_find(uint16_t conn_handle,
                          struct ble_gap_update_entry **out_prev)
{
   1e418:	b410      	push	{r4}
   1e41a:	4602      	mov	r2, r0
    struct ble_gap_update_entry *prev;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    prev = NULL;
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   1e41c:	4b06      	ldr	r3, [pc, #24]	; (1e438 <ble_gap_update_entry_find+0x20>)
   1e41e:	6818      	ldr	r0, [r3, #0]
    prev = NULL;
   1e420:	2400      	movs	r4, #0
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   1e422:	b128      	cbz	r0, 1e430 <ble_gap_update_entry_find+0x18>
        if (entry->conn_handle == conn_handle) {
   1e424:	8a83      	ldrh	r3, [r0, #20]
   1e426:	4293      	cmp	r3, r2
   1e428:	d002      	beq.n	1e430 <ble_gap_update_entry_find+0x18>
            break;
        }

        prev = entry;
   1e42a:	4604      	mov	r4, r0
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   1e42c:	6800      	ldr	r0, [r0, #0]
   1e42e:	e7f8      	b.n	1e422 <ble_gap_update_entry_find+0xa>
    }

    if (out_prev != NULL) {
   1e430:	b101      	cbz	r1, 1e434 <ble_gap_update_entry_find+0x1c>
        *out_prev = prev;
   1e432:	600c      	str	r4, [r1, #0]
    }

    return entry;
}
   1e434:	bc10      	pop	{r4}
   1e436:	4770      	bx	lr
   1e438:	10003934 	.word	0x10003934

0001e43c <ble_gap_validate_conn_params>:
static bool
ble_gap_validate_conn_params(const struct ble_gap_upd_params *params)
{

    /* Requirements from Bluetooth spec. v4.2 [Vol 2, Part E], 7.8.18 */
    if (params->itvl_min > params->itvl_max) {
   1e43c:	8802      	ldrh	r2, [r0, #0]
   1e43e:	8843      	ldrh	r3, [r0, #2]
   1e440:	429a      	cmp	r2, r3
   1e442:	d814      	bhi.n	1e46e <ble_gap_validate_conn_params+0x32>
        return false;
    }

    if (params->itvl_min < 0x0006 || params->itvl_max > 0x0C80) {
   1e444:	2a05      	cmp	r2, #5
   1e446:	d914      	bls.n	1e472 <ble_gap_validate_conn_params+0x36>
   1e448:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1e44c:	d813      	bhi.n	1e476 <ble_gap_validate_conn_params+0x3a>
        return false;
    }

    if (params->latency > 0x01F3) {
   1e44e:	8882      	ldrh	r2, [r0, #4]
   1e450:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   1e454:	d211      	bcs.n	1e47a <ble_gap_validate_conn_params+0x3e>
    /* According to specification mentioned above we should make sure that:
     * supervision_timeout_ms > (1 + latency) * 2 * max_interval_ms
     *    =>
     * supervision_timeout * 10 ms > (1 + latency) * 2 * itvl_max * 1.25ms
     */
    if (params->supervision_timeout <=
   1e456:	88c1      	ldrh	r1, [r0, #6]
                   (((1 + params->latency) * params->itvl_max) / 4)) {
   1e458:	fb02 3303 	mla	r3, r2, r3, r3
   1e45c:	2b00      	cmp	r3, #0
   1e45e:	db04      	blt.n	1e46a <ble_gap_validate_conn_params+0x2e>
    if (params->supervision_timeout <=
   1e460:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
   1e464:	dd0b      	ble.n	1e47e <ble_gap_validate_conn_params+0x42>
        return false;
    }

    return true;
   1e466:	2001      	movs	r0, #1
   1e468:	4770      	bx	lr
                   (((1 + params->latency) * params->itvl_max) / 4)) {
   1e46a:	3303      	adds	r3, #3
   1e46c:	e7f8      	b.n	1e460 <ble_gap_validate_conn_params+0x24>
        return false;
   1e46e:	2000      	movs	r0, #0
   1e470:	4770      	bx	lr
        return false;
   1e472:	2000      	movs	r0, #0
   1e474:	4770      	bx	lr
   1e476:	2000      	movs	r0, #0
   1e478:	4770      	bx	lr
        return false;
   1e47a:	2000      	movs	r0, #0
   1e47c:	4770      	bx	lr
        return false;
   1e47e:	2000      	movs	r0, #0
}
   1e480:	4770      	bx	lr
	...

0001e484 <ble_gap_event_listener_call>:
    return rc;
}

static int
ble_gap_event_listener_call(struct ble_gap_event *event)
{
   1e484:	b538      	push	{r3, r4, r5, lr}
   1e486:	4605      	mov	r5, r0
    struct ble_gap_event_listener *evl = NULL;

    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   1e488:	4b05      	ldr	r3, [pc, #20]	; (1e4a0 <ble_gap_event_listener_call+0x1c>)
   1e48a:	681c      	ldr	r4, [r3, #0]
   1e48c:	b12c      	cbz	r4, 1e49a <ble_gap_event_listener_call+0x16>
        evl->fn(event, evl->arg);
   1e48e:	6823      	ldr	r3, [r4, #0]
   1e490:	6861      	ldr	r1, [r4, #4]
   1e492:	4628      	mov	r0, r5
   1e494:	4798      	blx	r3
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   1e496:	68a4      	ldr	r4, [r4, #8]
   1e498:	e7f8      	b.n	1e48c <ble_gap_event_listener_call+0x8>
    }

    return 0;
}
   1e49a:	2000      	movs	r0, #0
   1e49c:	bd38      	pop	{r3, r4, r5, pc}
   1e49e:	bf00      	nop
   1e4a0:	100038a8 	.word	0x100038a8

0001e4a4 <ble_gap_extract_conn_cb>:
{
   1e4a4:	b570      	push	{r4, r5, r6, lr}
   1e4a6:	4606      	mov	r6, r0
   1e4a8:	460d      	mov	r5, r1
   1e4aa:	4614      	mov	r4, r2
    ble_hs_lock();
   1e4ac:	f003 fb2a 	bl	21b04 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1e4b0:	4630      	mov	r0, r6
   1e4b2:	f004 f983 	bl	227bc <ble_hs_conn_find>
    if (conn != NULL) {
   1e4b6:	4606      	mov	r6, r0
   1e4b8:	b140      	cbz	r0, 1e4cc <ble_gap_extract_conn_cb+0x28>
        *out_cb = conn->bhc_cb;
   1e4ba:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1e4bc:	602b      	str	r3, [r5, #0]
        *out_cb_arg = conn->bhc_cb_arg;
   1e4be:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1e4c0:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   1e4c2:	f003 fb23 	bl	21b0c <ble_hs_unlock>
    if (conn == NULL) {
   1e4c6:	b12e      	cbz	r6, 1e4d4 <ble_gap_extract_conn_cb+0x30>
        return 0;
   1e4c8:	2000      	movs	r0, #0
}
   1e4ca:	bd70      	pop	{r4, r5, r6, pc}
        *out_cb = NULL;
   1e4cc:	2300      	movs	r3, #0
   1e4ce:	602b      	str	r3, [r5, #0]
        *out_cb_arg = NULL;
   1e4d0:	6023      	str	r3, [r4, #0]
   1e4d2:	e7f6      	b.n	1e4c2 <ble_gap_extract_conn_cb+0x1e>
        return BLE_HS_ENOTCONN;
   1e4d4:	2007      	movs	r0, #7
   1e4d6:	e7f8      	b.n	1e4ca <ble_gap_extract_conn_cb+0x26>

0001e4d8 <ble_gap_call_conn_event_cb>:
{
   1e4d8:	b510      	push	{r4, lr}
   1e4da:	b082      	sub	sp, #8
   1e4dc:	4604      	mov	r4, r0
   1e4de:	4608      	mov	r0, r1
    rc = ble_gap_extract_conn_cb(conn_handle, &cb, &cb_arg);
   1e4e0:	466a      	mov	r2, sp
   1e4e2:	a901      	add	r1, sp, #4
   1e4e4:	f7ff ffde 	bl	1e4a4 <ble_gap_extract_conn_cb>
    if (rc != 0) {
   1e4e8:	b108      	cbz	r0, 1e4ee <ble_gap_call_conn_event_cb+0x16>
}
   1e4ea:	b002      	add	sp, #8
   1e4ec:	bd10      	pop	{r4, pc}
    rc = ble_gap_call_event_cb(event, cb, cb_arg);
   1e4ee:	9a00      	ldr	r2, [sp, #0]
   1e4f0:	9901      	ldr	r1, [sp, #4]
   1e4f2:	4620      	mov	r0, r4
   1e4f4:	f7ff fef0 	bl	1e2d8 <ble_gap_call_event_cb>
    if (rc != 0) {
   1e4f8:	e7f7      	b.n	1e4ea <ble_gap_call_conn_event_cb+0x12>

0001e4fa <ble_gap_fill_conn_desc>:
{
   1e4fa:	b570      	push	{r4, r5, r6, lr}
   1e4fc:	b088      	sub	sp, #32
   1e4fe:	4605      	mov	r5, r0
   1e500:	460c      	mov	r4, r1
    ble_hs_conn_addrs(conn, &addrs);
   1e502:	ae01      	add	r6, sp, #4
   1e504:	4631      	mov	r1, r6
   1e506:	f004 f991 	bl	2282c <ble_hs_conn_addrs>
    desc->our_id_addr = addrs.our_id_addr;
   1e50a:	e896 0003 	ldmia.w	r6, {r0, r1}
   1e50e:	6060      	str	r0, [r4, #4]
   1e510:	f104 0308 	add.w	r3, r4, #8
   1e514:	f823 1b02 	strh.w	r1, [r3], #2
   1e518:	0c09      	lsrs	r1, r1, #16
   1e51a:	7019      	strb	r1, [r3, #0]
    desc->peer_id_addr = addrs.peer_id_addr;
   1e51c:	f8dd 300b 	ldr.w	r3, [sp, #11]
   1e520:	f8c4 300b 	str.w	r3, [r4, #11]
   1e524:	f8bd 200f 	ldrh.w	r2, [sp, #15]
   1e528:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1e52c:	f8a4 200f 	strh.w	r2, [r4, #15]
   1e530:	7463      	strb	r3, [r4, #17]
    desc->our_ota_addr = addrs.our_ota_addr;
   1e532:	f8dd 3012 	ldr.w	r3, [sp, #18]
   1e536:	f8c4 3012 	str.w	r3, [r4, #18]
   1e53a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1e53e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1e542:	82e2      	strh	r2, [r4, #22]
   1e544:	7623      	strb	r3, [r4, #24]
    desc->peer_ota_addr = addrs.peer_ota_addr;
   1e546:	f8dd 3019 	ldr.w	r3, [sp, #25]
   1e54a:	f8c4 3019 	str.w	r3, [r4, #25]
   1e54e:	f8bd 201d 	ldrh.w	r2, [sp, #29]
   1e552:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1e556:	f8a4 201d 	strh.w	r2, [r4, #29]
   1e55a:	77e3      	strb	r3, [r4, #31]
    desc->conn_handle = conn->bhc_handle;
   1e55c:	88ab      	ldrh	r3, [r5, #4]
   1e55e:	8423      	strh	r3, [r4, #32]
    desc->conn_itvl = conn->bhc_itvl;
   1e560:	8bab      	ldrh	r3, [r5, #28]
   1e562:	8463      	strh	r3, [r4, #34]	; 0x22
    desc->conn_latency = conn->bhc_latency;
   1e564:	8beb      	ldrh	r3, [r5, #30]
   1e566:	84a3      	strh	r3, [r4, #36]	; 0x24
    desc->supervision_timeout = conn->bhc_supervision_timeout;
   1e568:	8c2b      	ldrh	r3, [r5, #32]
   1e56a:	84e3      	strh	r3, [r4, #38]	; 0x26
    desc->master_clock_accuracy = conn->bhc_master_clock_accuracy;
   1e56c:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   1e570:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    desc->sec_state = conn->bhc_sec_state;
   1e574:	6dab      	ldr	r3, [r5, #88]	; 0x58
   1e576:	6023      	str	r3, [r4, #0]
    if (conn->bhc_flags & BLE_HS_CONN_F_MASTER) {
   1e578:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   1e57c:	f013 0f01 	tst.w	r3, #1
   1e580:	d004      	beq.n	1e58c <ble_gap_fill_conn_desc+0x92>
        desc->role = BLE_GAP_ROLE_MASTER;
   1e582:	2300      	movs	r3, #0
   1e584:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   1e588:	b008      	add	sp, #32
   1e58a:	bd70      	pop	{r4, r5, r6, pc}
        desc->role = BLE_GAP_ROLE_SLAVE;
   1e58c:	2301      	movs	r3, #1
   1e58e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   1e592:	e7f9      	b.n	1e588 <ble_gap_fill_conn_desc+0x8e>

0001e594 <ble_gap_conn_to_snapshot>:
{
   1e594:	b538      	push	{r3, r4, r5, lr}
   1e596:	4605      	mov	r5, r0
   1e598:	460c      	mov	r4, r1
    ble_gap_fill_conn_desc(conn, snap->desc);
   1e59a:	6809      	ldr	r1, [r1, #0]
   1e59c:	f7ff ffad 	bl	1e4fa <ble_gap_fill_conn_desc>
    snap->cb = conn->bhc_cb;
   1e5a0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1e5a2:	6063      	str	r3, [r4, #4]
    snap->cb_arg = conn->bhc_cb_arg;
   1e5a4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1e5a6:	60a3      	str	r3, [r4, #8]
}
   1e5a8:	bd38      	pop	{r3, r4, r5, pc}

0001e5aa <ble_gap_find_snapshot>:
{
   1e5aa:	b538      	push	{r3, r4, r5, lr}
   1e5ac:	4604      	mov	r4, r0
   1e5ae:	460d      	mov	r5, r1
    ble_hs_lock();
   1e5b0:	f003 faa8 	bl	21b04 <ble_hs_lock>
    conn = ble_hs_conn_find(handle);
   1e5b4:	4620      	mov	r0, r4
   1e5b6:	f004 f901 	bl	227bc <ble_hs_conn_find>
    if (conn != NULL) {
   1e5ba:	4604      	mov	r4, r0
   1e5bc:	b110      	cbz	r0, 1e5c4 <ble_gap_find_snapshot+0x1a>
        ble_gap_conn_to_snapshot(conn, snap);
   1e5be:	4629      	mov	r1, r5
   1e5c0:	f7ff ffe8 	bl	1e594 <ble_gap_conn_to_snapshot>
    ble_hs_unlock();
   1e5c4:	f003 faa2 	bl	21b0c <ble_hs_unlock>
    if (conn == NULL) {
   1e5c8:	b10c      	cbz	r4, 1e5ce <ble_gap_find_snapshot+0x24>
        return 0;
   1e5ca:	2000      	movs	r0, #0
}
   1e5cc:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOTCONN;
   1e5ce:	2007      	movs	r0, #7
   1e5d0:	e7fc      	b.n	1e5cc <ble_gap_find_snapshot+0x22>

0001e5d2 <ble_gap_rd_rem_sup_feat_tx>:
{
   1e5d2:	b500      	push	{lr}
   1e5d4:	b085      	sub	sp, #20
    cmd.conn_handle = htole16(handle);
   1e5d6:	f8ad 000c 	strh.w	r0, [sp, #12]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1e5da:	2300      	movs	r3, #0
   1e5dc:	9300      	str	r3, [sp, #0]
   1e5de:	2202      	movs	r2, #2
   1e5e0:	a903      	add	r1, sp, #12
   1e5e2:	f242 0016 	movw	r0, #8214	; 0x2016
   1e5e6:	f004 fc3d 	bl	22e64 <ble_hs_hci_cmd_tx>
}
   1e5ea:	b005      	add	sp, #20
   1e5ec:	f85d fb04 	ldr.w	pc, [sp], #4

0001e5f0 <ble_gap_conn_cancel_tx>:
{
   1e5f0:	b500      	push	{lr}
   1e5f2:	b083      	sub	sp, #12
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1e5f4:	2100      	movs	r1, #0
   1e5f6:	9100      	str	r1, [sp, #0]
   1e5f8:	460b      	mov	r3, r1
   1e5fa:	460a      	mov	r2, r1
   1e5fc:	f242 000e 	movw	r0, #8206	; 0x200e
   1e600:	f004 fc30 	bl	22e64 <ble_hs_hci_cmd_tx>
}
   1e604:	b003      	add	sp, #12
   1e606:	f85d fb04 	ldr.w	pc, [sp], #4

0001e60a <ble_gap_adv_enable_tx>:
{
   1e60a:	b500      	push	{lr}
   1e60c:	b085      	sub	sp, #20
    cmd.enable = !!enable;
   1e60e:	3800      	subs	r0, #0
   1e610:	bf18      	it	ne
   1e612:	2001      	movne	r0, #1
   1e614:	f88d 000c 	strb.w	r0, [sp, #12]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1e618:	2300      	movs	r3, #0
   1e61a:	9300      	str	r3, [sp, #0]
   1e61c:	2201      	movs	r2, #1
   1e61e:	a903      	add	r1, sp, #12
   1e620:	f242 000a 	movw	r0, #8202	; 0x200a
   1e624:	f004 fc1e 	bl	22e64 <ble_hs_hci_cmd_tx>
}
   1e628:	b005      	add	sp, #20
   1e62a:	f85d fb04 	ldr.w	pc, [sp], #4

0001e62e <ble_gap_adv_params_tx>:
{
   1e62e:	b570      	push	{r4, r5, r6, lr}
   1e630:	b08a      	sub	sp, #40	; 0x28
   1e632:	4606      	mov	r6, r0
   1e634:	460c      	mov	r4, r1
   1e636:	4615      	mov	r5, r2
    const ble_addr_t *peer_any = BLE_ADDR_ANY;
   1e638:	2300      	movs	r3, #0
   1e63a:	9308      	str	r3, [sp, #32]
   1e63c:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    if ((adv_params->itvl_min == 0) && (adv_params->itvl_max == 0)) {
   1e640:	8853      	ldrh	r3, [r2, #2]
   1e642:	b90b      	cbnz	r3, 1e648 <ble_gap_adv_params_tx+0x1a>
   1e644:	8892      	ldrh	r2, [r2, #4]
   1e646:	b342      	cbz	r2, 1e69a <ble_gap_adv_params_tx+0x6c>
        cmd.min_interval = htole16(adv_params->itvl_min);
   1e648:	f8ad 3010 	strh.w	r3, [sp, #16]
        cmd.max_interval = htole16(adv_params->itvl_max);
   1e64c:	88ab      	ldrh	r3, [r5, #4]
   1e64e:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.type = ble_gap_adv_type(adv_params);
   1e652:	4628      	mov	r0, r5
   1e654:	f7ff feb2 	bl	1e3bc <ble_gap_adv_type>
   1e658:	f88d 0014 	strb.w	r0, [sp, #20]
    cmd.own_addr_type = own_addr_type;
   1e65c:	f88d 6015 	strb.w	r6, [sp, #21]
    if (peer_addr == NULL) {
   1e660:	b354      	cbz	r4, 1e6b8 <ble_gap_adv_params_tx+0x8a>
    cmd.peer_addr_type = peer_addr->type;
   1e662:	7823      	ldrb	r3, [r4, #0]
   1e664:	f88d 3016 	strb.w	r3, [sp, #22]
    memcpy(&cmd.peer_addr, peer_addr->val, sizeof(cmd.peer_addr));
   1e668:	f854 3f01 	ldr.w	r3, [r4, #1]!
   1e66c:	f8cd 3017 	str.w	r3, [sp, #23]
   1e670:	88a3      	ldrh	r3, [r4, #4]
   1e672:	f8ad 301b 	strh.w	r3, [sp, #27]
    if (adv_params->channel_map == 0) {
   1e676:	79ab      	ldrb	r3, [r5, #6]
   1e678:	bb03      	cbnz	r3, 1e6bc <ble_gap_adv_params_tx+0x8e>
        cmd.chan_map = BLE_GAP_ADV_DFLT_CHANNEL_MAP;
   1e67a:	2307      	movs	r3, #7
   1e67c:	f88d 301d 	strb.w	r3, [sp, #29]
    cmd.filter_policy = adv_params->filter_policy;
   1e680:	79eb      	ldrb	r3, [r5, #7]
   1e682:	f88d 301e 	strb.w	r3, [sp, #30]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   1e686:	2300      	movs	r3, #0
   1e688:	9300      	str	r3, [sp, #0]
   1e68a:	220f      	movs	r2, #15
   1e68c:	a904      	add	r1, sp, #16
   1e68e:	f242 0006 	movw	r0, #8198	; 0x2006
   1e692:	f004 fbe7 	bl	22e64 <ble_hs_hci_cmd_tx>
}
   1e696:	b00a      	add	sp, #40	; 0x28
   1e698:	bd70      	pop	{r4, r5, r6, pc}
        ble_gap_adv_dflt_itvls(adv_params->conn_mode, &min, &max);
   1e69a:	aa03      	add	r2, sp, #12
   1e69c:	f10d 010e 	add.w	r1, sp, #14
   1e6a0:	7828      	ldrb	r0, [r5, #0]
   1e6a2:	f7ff fe9f 	bl	1e3e4 <ble_gap_adv_dflt_itvls>
        cmd.min_interval = htole16(min);
   1e6a6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1e6aa:	f8ad 3010 	strh.w	r3, [sp, #16]
        cmd.max_interval = htole16(max);
   1e6ae:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1e6b2:	f8ad 3012 	strh.w	r3, [sp, #18]
   1e6b6:	e7cc      	b.n	1e652 <ble_gap_adv_params_tx+0x24>
        peer_addr = peer_any;
   1e6b8:	ac08      	add	r4, sp, #32
   1e6ba:	e7d2      	b.n	1e662 <ble_gap_adv_params_tx+0x34>
        cmd.chan_map = adv_params->channel_map;
   1e6bc:	f88d 301d 	strb.w	r3, [sp, #29]
   1e6c0:	e7de      	b.n	1e680 <ble_gap_adv_params_tx+0x52>

0001e6c2 <ble_gap_tx_param_pos_reply>:
{
   1e6c2:	b500      	push	{lr}
   1e6c4:	b087      	sub	sp, #28
    cmd.conn_handle = htole16(conn_handle);
   1e6c6:	f8ad 0008 	strh.w	r0, [sp, #8]
    cmd.conn_itvl_min = htole16(params->itvl_min);
   1e6ca:	880b      	ldrh	r3, [r1, #0]
   1e6cc:	f8ad 300a 	strh.w	r3, [sp, #10]
    cmd.conn_itvl_max = htole16(params->itvl_max);
   1e6d0:	884b      	ldrh	r3, [r1, #2]
   1e6d2:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.conn_latency = htole16(params->latency);
   1e6d6:	888b      	ldrh	r3, [r1, #4]
   1e6d8:	f8ad 300e 	strh.w	r3, [sp, #14]
    cmd.supervision_timeout = htole16(params->supervision_timeout);
   1e6dc:	88cb      	ldrh	r3, [r1, #6]
   1e6de:	f8ad 3010 	strh.w	r3, [sp, #16]
    cmd.min_ce = htole16(params->min_ce_len);
   1e6e2:	890b      	ldrh	r3, [r1, #8]
   1e6e4:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.max_ce = htole16(params->max_ce_len);
   1e6e8:	894b      	ldrh	r3, [r1, #10]
   1e6ea:	f8ad 3014 	strh.w	r3, [sp, #20]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1e6ee:	2300      	movs	r3, #0
   1e6f0:	9300      	str	r3, [sp, #0]
   1e6f2:	220e      	movs	r2, #14
   1e6f4:	a902      	add	r1, sp, #8
   1e6f6:	f242 0020 	movw	r0, #8224	; 0x2020
   1e6fa:	f004 fbb3 	bl	22e64 <ble_hs_hci_cmd_tx>
}
   1e6fe:	b007      	add	sp, #28
   1e700:	f85d fb04 	ldr.w	pc, [sp], #4

0001e704 <ble_gap_tx_param_neg_reply>:
{
   1e704:	b500      	push	{lr}
   1e706:	b085      	sub	sp, #20
    cmd.conn_handle = htole16(conn_handle);
   1e708:	f8ad 000c 	strh.w	r0, [sp, #12]
    cmd.reason = reject_reason;
   1e70c:	f88d 100e 	strb.w	r1, [sp, #14]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1e710:	2300      	movs	r3, #0
   1e712:	9300      	str	r3, [sp, #0]
   1e714:	2203      	movs	r2, #3
   1e716:	a903      	add	r1, sp, #12
   1e718:	f242 0021 	movw	r0, #8225	; 0x2021
   1e71c:	f004 fba2 	bl	22e64 <ble_hs_hci_cmd_tx>
}
   1e720:	b005      	add	sp, #20
   1e722:	f85d fb04 	ldr.w	pc, [sp], #4

0001e726 <ble_gap_update_tx>:
{
   1e726:	b500      	push	{lr}
   1e728:	b087      	sub	sp, #28
    cmd.conn_handle = htole16(conn_handle);
   1e72a:	f8ad 0008 	strh.w	r0, [sp, #8]
    cmd.conn_itvl_min = htole16(params->itvl_min);
   1e72e:	880b      	ldrh	r3, [r1, #0]
   1e730:	f8ad 300a 	strh.w	r3, [sp, #10]
    cmd.conn_itvl_max = htole16(params->itvl_max);
   1e734:	884b      	ldrh	r3, [r1, #2]
   1e736:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.conn_latency = htole16(params->latency);
   1e73a:	888b      	ldrh	r3, [r1, #4]
   1e73c:	f8ad 300e 	strh.w	r3, [sp, #14]
    cmd.supervision_timeout = htole16(params->supervision_timeout);
   1e740:	88cb      	ldrh	r3, [r1, #6]
   1e742:	f8ad 3010 	strh.w	r3, [sp, #16]
    cmd.min_ce_len = htole16(params->min_ce_len);
   1e746:	890b      	ldrh	r3, [r1, #8]
   1e748:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.max_ce_len = htole16(params->max_ce_len);
   1e74c:	894b      	ldrh	r3, [r1, #10]
   1e74e:	f8ad 3014 	strh.w	r3, [sp, #20]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1e752:	2300      	movs	r3, #0
   1e754:	9300      	str	r3, [sp, #0]
   1e756:	220e      	movs	r2, #14
   1e758:	a902      	add	r1, sp, #8
   1e75a:	f242 0013 	movw	r0, #8211	; 0x2013
   1e75e:	f004 fb81 	bl	22e64 <ble_hs_hci_cmd_tx>
}
   1e762:	b007      	add	sp, #28
   1e764:	f85d fb04 	ldr.w	pc, [sp], #4

0001e768 <ble_gap_update_entry_remove>:
{
   1e768:	b510      	push	{r4, lr}
   1e76a:	b082      	sub	sp, #8
    entry = ble_gap_update_entry_find(conn_handle, &prev);
   1e76c:	a901      	add	r1, sp, #4
   1e76e:	f7ff fe53 	bl	1e418 <ble_gap_update_entry_find>
    if (entry != NULL) {
   1e772:	4604      	mov	r4, r0
   1e774:	b128      	cbz	r0, 1e782 <ble_gap_update_entry_remove+0x1a>
        if (prev == NULL) {
   1e776:	9b01      	ldr	r3, [sp, #4]
   1e778:	b133      	cbz	r3, 1e788 <ble_gap_update_entry_remove+0x20>
            SLIST_NEXT(prev, next) = SLIST_NEXT(entry, next);
   1e77a:	6802      	ldr	r2, [r0, #0]
   1e77c:	601a      	str	r2, [r3, #0]
        ble_hs_timer_resched();
   1e77e:	f003 fab3 	bl	21ce8 <ble_hs_timer_resched>
}
   1e782:	4620      	mov	r0, r4
   1e784:	b002      	add	sp, #8
   1e786:	bd10      	pop	{r4, pc}
            SLIST_REMOVE_HEAD(&ble_gap_update_entries, next);
   1e788:	4b02      	ldr	r3, [pc, #8]	; (1e794 <ble_gap_update_entry_remove+0x2c>)
   1e78a:	681a      	ldr	r2, [r3, #0]
   1e78c:	6812      	ldr	r2, [r2, #0]
   1e78e:	601a      	str	r2, [r3, #0]
   1e790:	e7f5      	b.n	1e77e <ble_gap_update_entry_remove+0x16>
   1e792:	bf00      	nop
   1e794:	10003934 	.word	0x10003934

0001e798 <ble_gap_slave_reset_state>:
{
   1e798:	b508      	push	{r3, lr}
    ble_gap_slave[instance].op = BLE_GAP_OP_NULL;
   1e79a:	4b06      	ldr	r3, [pc, #24]	; (1e7b4 <ble_gap_slave_reset_state+0x1c>)
   1e79c:	0101      	lsls	r1, r0, #4
   1e79e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   1e7a2:	2200      	movs	r2, #0
   1e7a4:	545a      	strb	r2, [r3, r1]
    ble_gap_slave[instance].exp_set = 0;
   1e7a6:	7843      	ldrb	r3, [r0, #1]
   1e7a8:	f362 1304 	bfi	r3, r2, #4, #1
   1e7ac:	7043      	strb	r3, [r0, #1]
    ble_hs_timer_resched();
   1e7ae:	f003 fa9b 	bl	21ce8 <ble_hs_timer_resched>
}
   1e7b2:	bd08      	pop	{r3, pc}
   1e7b4:	1000396c 	.word	0x1000396c

0001e7b8 <ble_gap_slave_extract_cb>:
{
   1e7b8:	b570      	push	{r4, r5, r6, lr}
   1e7ba:	4604      	mov	r4, r0
   1e7bc:	460e      	mov	r6, r1
   1e7be:	4615      	mov	r5, r2
    ble_hs_lock();
   1e7c0:	f003 f9a0 	bl	21b04 <ble_hs_lock>
    *out_cb = ble_gap_slave[instance].cb;
   1e7c4:	4b06      	ldr	r3, [pc, #24]	; (1e7e0 <ble_gap_slave_extract_cb+0x28>)
   1e7c6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1e7ca:	689a      	ldr	r2, [r3, #8]
   1e7cc:	6032      	str	r2, [r6, #0]
    *out_cb_arg = ble_gap_slave[instance].cb_arg;
   1e7ce:	68db      	ldr	r3, [r3, #12]
   1e7d0:	602b      	str	r3, [r5, #0]
    ble_gap_slave_reset_state(instance);
   1e7d2:	4620      	mov	r0, r4
   1e7d4:	f7ff ffe0 	bl	1e798 <ble_gap_slave_reset_state>
    ble_hs_unlock();
   1e7d8:	f003 f998 	bl	21b0c <ble_hs_unlock>
}
   1e7dc:	bd70      	pop	{r4, r5, r6, pc}
   1e7de:	bf00      	nop
   1e7e0:	1000396c 	.word	0x1000396c

0001e7e4 <ble_gap_adv_finished>:
{
   1e7e4:	b530      	push	{r4, r5, lr}
   1e7e6:	b091      	sub	sp, #68	; 0x44
   1e7e8:	4604      	mov	r4, r0
   1e7ea:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   1e7ec:	2234      	movs	r2, #52	; 0x34
   1e7ee:	2100      	movs	r1, #0
   1e7f0:	a803      	add	r0, sp, #12
   1e7f2:	f7f8 f994 	bl	16b1e <memset>
    event.type = BLE_GAP_EVENT_ADV_COMPLETE;
   1e7f6:	2309      	movs	r3, #9
   1e7f8:	f88d 300c 	strb.w	r3, [sp, #12]
    event.adv_complete.reason = reason;
   1e7fc:	9504      	str	r5, [sp, #16]
    ble_gap_event_listener_call(&event);
   1e7fe:	a803      	add	r0, sp, #12
   1e800:	f7ff fe40 	bl	1e484 <ble_gap_event_listener_call>
    ble_gap_slave_extract_cb(instance, &cb, &cb_arg);
   1e804:	aa01      	add	r2, sp, #4
   1e806:	a902      	add	r1, sp, #8
   1e808:	4620      	mov	r0, r4
   1e80a:	f7ff ffd5 	bl	1e7b8 <ble_gap_slave_extract_cb>
    if (cb != NULL) {
   1e80e:	9b02      	ldr	r3, [sp, #8]
   1e810:	b113      	cbz	r3, 1e818 <ble_gap_adv_finished+0x34>
        cb(&event, cb_arg);
   1e812:	9901      	ldr	r1, [sp, #4]
   1e814:	a803      	add	r0, sp, #12
   1e816:	4798      	blx	r3
}
   1e818:	b011      	add	sp, #68	; 0x44
   1e81a:	bd30      	pop	{r4, r5, pc}

0001e81c <ble_gap_master_reset_state>:
{
   1e81c:	b508      	push	{r3, lr}
    ble_gap_master.op = BLE_GAP_OP_NULL;
   1e81e:	4b08      	ldr	r3, [pc, #32]	; (1e840 <ble_gap_master_reset_state+0x24>)
   1e820:	2200      	movs	r2, #0
   1e822:	741a      	strb	r2, [r3, #16]
    ble_gap_master.exp_set = 0;
   1e824:	7c59      	ldrb	r1, [r3, #17]
   1e826:	f362 0100 	bfi	r1, r2, #0, #1
   1e82a:	7459      	strb	r1, [r3, #17]
    ble_gap_master.conn.cancel = 0;
   1e82c:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
   1e830:	f362 01c3 	bfi	r1, r2, #3, #1
   1e834:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
    ble_hs_timer_resched();
   1e838:	f003 fa56 	bl	21ce8 <ble_hs_timer_resched>
}
   1e83c:	bd08      	pop	{r3, pc}
   1e83e:	bf00      	nop
   1e840:	1000396c 	.word	0x1000396c

0001e844 <ble_gap_master_extract_state>:
{
   1e844:	b570      	push	{r4, r5, r6, lr}
   1e846:	4604      	mov	r4, r0
   1e848:	460e      	mov	r6, r1
    ble_hs_lock();
   1e84a:	f003 f95b 	bl	21b04 <ble_hs_lock>
    *out_state = ble_gap_master;
   1e84e:	4d08      	ldr	r5, [pc, #32]	; (1e870 <ble_gap_master_extract_state+0x2c>)
   1e850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1e854:	682b      	ldr	r3, [r5, #0]
   1e856:	6023      	str	r3, [r4, #0]
    if (reset_state) {
   1e858:	b916      	cbnz	r6, 1e860 <ble_gap_master_extract_state+0x1c>
    ble_hs_unlock();
   1e85a:	f003 f957 	bl	21b0c <ble_hs_unlock>
}
   1e85e:	bd70      	pop	{r4, r5, r6, pc}
        ble_gap_master_reset_state();
   1e860:	f7ff ffdc 	bl	1e81c <ble_gap_master_reset_state>
        ble_gap_master.preempted_op = BLE_GAP_OP_NULL;
   1e864:	f1a5 0320 	sub.w	r3, r5, #32
   1e868:	2200      	movs	r2, #0
   1e86a:	f883 2020 	strb.w	r2, [r3, #32]
   1e86e:	e7f4      	b.n	1e85a <ble_gap_master_extract_state+0x16>
   1e870:	1000397c 	.word	0x1000397c

0001e874 <ble_gap_master_connect_failure>:
{
   1e874:	b510      	push	{r4, lr}
   1e876:	b092      	sub	sp, #72	; 0x48
   1e878:	4604      	mov	r4, r0
    ble_gap_master_extract_state(&state, 1);
   1e87a:	2101      	movs	r1, #1
   1e87c:	a80d      	add	r0, sp, #52	; 0x34
   1e87e:	f7ff ffe1 	bl	1e844 <ble_gap_master_extract_state>
    if (ble_gap_has_client(&state)) {
   1e882:	a80d      	add	r0, sp, #52	; 0x34
   1e884:	f7ff fd50 	bl	1e328 <ble_gap_has_client>
   1e888:	b910      	cbnz	r0, 1e890 <ble_gap_master_connect_failure+0x1c>
        rc = 0;
   1e88a:	2000      	movs	r0, #0
}
   1e88c:	b012      	add	sp, #72	; 0x48
   1e88e:	bd10      	pop	{r4, pc}
        memset(&event, 0, sizeof event);
   1e890:	2234      	movs	r2, #52	; 0x34
   1e892:	2100      	movs	r1, #0
   1e894:	4668      	mov	r0, sp
   1e896:	f7f8 f942 	bl	16b1e <memset>
        event.type = BLE_GAP_EVENT_CONNECT;
   1e89a:	2300      	movs	r3, #0
   1e89c:	f88d 3000 	strb.w	r3, [sp]
        event.connect.status = status;
   1e8a0:	9401      	str	r4, [sp, #4]
        rc = state.cb(&event, state.cb_arg);
   1e8a2:	9910      	ldr	r1, [sp, #64]	; 0x40
   1e8a4:	4668      	mov	r0, sp
   1e8a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1e8a8:	4798      	blx	r3
   1e8aa:	e7ef      	b.n	1e88c <ble_gap_master_connect_failure+0x18>

0001e8ac <ble_gap_master_failed>:
{
   1e8ac:	b508      	push	{r3, lr}
    switch (ble_gap_master.op) {
   1e8ae:	4b06      	ldr	r3, [pc, #24]	; (1e8c8 <ble_gap_master_failed+0x1c>)
   1e8b0:	7c1b      	ldrb	r3, [r3, #16]
   1e8b2:	2b02      	cmp	r3, #2
   1e8b4:	d000      	beq.n	1e8b8 <ble_gap_master_failed+0xc>
}
   1e8b6:	bd08      	pop	{r3, pc}
        STATS_INC(ble_gap_stats, initiate_fail);
   1e8b8:	4a04      	ldr	r2, [pc, #16]	; (1e8cc <ble_gap_master_failed+0x20>)
   1e8ba:	6c13      	ldr	r3, [r2, #64]	; 0x40
   1e8bc:	3301      	adds	r3, #1
   1e8be:	6413      	str	r3, [r2, #64]	; 0x40
        ble_gap_master_connect_failure(status);
   1e8c0:	f7ff ffd8 	bl	1e874 <ble_gap_master_connect_failure>
}
   1e8c4:	e7f7      	b.n	1e8b6 <ble_gap_master_failed+0xa>
   1e8c6:	bf00      	nop
   1e8c8:	1000396c 	.word	0x1000396c
   1e8cc:	100038ac 	.word	0x100038ac

0001e8d0 <ble_gap_master_connect_cancelled>:
{
   1e8d0:	b510      	push	{r4, lr}
   1e8d2:	b092      	sub	sp, #72	; 0x48
    ble_gap_master_extract_state(&state, 1);
   1e8d4:	2101      	movs	r1, #1
   1e8d6:	a80d      	add	r0, sp, #52	; 0x34
   1e8d8:	f7ff ffb4 	bl	1e844 <ble_gap_master_extract_state>
    if (state.cb != NULL) {
   1e8dc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1e8de:	b1ac      	cbz	r4, 1e90c <ble_gap_master_connect_cancelled+0x3c>
        memset(&event, 0, sizeof event);
   1e8e0:	2234      	movs	r2, #52	; 0x34
   1e8e2:	2100      	movs	r1, #0
   1e8e4:	4668      	mov	r0, sp
   1e8e6:	f7f8 f91a 	bl	16b1e <memset>
        event.type = BLE_GAP_EVENT_CONNECT;
   1e8ea:	2300      	movs	r3, #0
   1e8ec:	f88d 3000 	strb.w	r3, [sp]
        event.connect.conn_handle = BLE_HS_CONN_HANDLE_NONE;
   1e8f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e8f4:	f8ad 3008 	strh.w	r3, [sp, #8]
        if (state.conn.cancel) {
   1e8f8:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
   1e8fc:	f013 0f08 	tst.w	r3, #8
   1e900:	d006      	beq.n	1e910 <ble_gap_master_connect_cancelled+0x40>
            event.connect.status = BLE_HS_EAPP;
   1e902:	2309      	movs	r3, #9
   1e904:	9301      	str	r3, [sp, #4]
        state.cb(&event, state.cb_arg);
   1e906:	9910      	ldr	r1, [sp, #64]	; 0x40
   1e908:	4668      	mov	r0, sp
   1e90a:	47a0      	blx	r4
}
   1e90c:	b012      	add	sp, #72	; 0x48
   1e90e:	bd10      	pop	{r4, pc}
            event.connect.status = BLE_HS_ETIMEOUT;
   1e910:	230d      	movs	r3, #13
   1e912:	9301      	str	r3, [sp, #4]
   1e914:	e7f7      	b.n	1e906 <ble_gap_master_connect_cancelled+0x36>
	...

0001e918 <ble_gap_update_entry_free>:
    if (entry != NULL) {
   1e918:	b128      	cbz	r0, 1e926 <ble_gap_update_entry_free+0xe>
{
   1e91a:	b508      	push	{r3, lr}
   1e91c:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_gap_update_entry_pool, entry);
   1e91e:	4802      	ldr	r0, [pc, #8]	; (1e928 <ble_gap_update_entry_free+0x10>)
   1e920:	f7f7 faad 	bl	15e7e <os_memblock_put>
}
   1e924:	bd08      	pop	{r3, pc}
   1e926:	4770      	bx	lr
   1e928:	10003950 	.word	0x10003950

0001e92c <ble_gap_master_ticks_until_exp>:
    if (ble_gap_master.op == BLE_GAP_OP_NULL || !ble_gap_master.exp_set) {
   1e92c:	4b0b      	ldr	r3, [pc, #44]	; (1e95c <ble_gap_master_ticks_until_exp+0x30>)
   1e92e:	7c1b      	ldrb	r3, [r3, #16]
   1e930:	b173      	cbz	r3, 1e950 <ble_gap_master_ticks_until_exp+0x24>
   1e932:	4b0a      	ldr	r3, [pc, #40]	; (1e95c <ble_gap_master_ticks_until_exp+0x30>)
   1e934:	7c5b      	ldrb	r3, [r3, #17]
   1e936:	f013 0f01 	tst.w	r3, #1
   1e93a:	d00c      	beq.n	1e956 <ble_gap_master_ticks_until_exp+0x2a>
{
   1e93c:	b510      	push	{r4, lr}
    ticks = ble_gap_master.exp_os_ticks - ble_npl_time_get();
   1e93e:	4b07      	ldr	r3, [pc, #28]	; (1e95c <ble_gap_master_ticks_until_exp+0x30>)
   1e940:	695c      	ldr	r4, [r3, #20]
   1e942:	f7f7 fe2d 	bl	165a0 <os_time_get>
   1e946:	1a20      	subs	r0, r4, r0
    if (ticks > 0) {
   1e948:	2800      	cmp	r0, #0
   1e94a:	dc00      	bgt.n	1e94e <ble_gap_master_ticks_until_exp+0x22>
    return 0;
   1e94c:	2000      	movs	r0, #0
}
   1e94e:	bd10      	pop	{r4, pc}
        return BLE_HS_FOREVER;
   1e950:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1e954:	4770      	bx	lr
   1e956:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   1e95a:	4770      	bx	lr
   1e95c:	1000396c 	.word	0x1000396c

0001e960 <ble_gap_update_next_exp>:
{
   1e960:	b538      	push	{r3, r4, r5, lr}
   1e962:	4605      	mov	r5, r0
   1e964:	f7f7 fe1c 	bl	165a0 <os_time_get>
   1e968:	4604      	mov	r4, r0
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   1e96a:	4b0b      	ldr	r3, [pc, #44]	; (1e998 <ble_gap_update_next_exp+0x38>)
   1e96c:	681a      	ldr	r2, [r3, #0]
    best_ticks = BLE_HS_FOREVER;
   1e96e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    conn_handle = BLE_HS_CONN_HANDLE_NONE;
   1e972:	f64f 70ff 	movw	r0, #65535	; 0xffff
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   1e976:	e002      	b.n	1e97e <ble_gap_update_next_exp+0x1e>
            ticks = 0;
   1e978:	2300      	movs	r3, #0
   1e97a:	e005      	b.n	1e988 <ble_gap_update_next_exp+0x28>
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   1e97c:	6812      	ldr	r2, [r2, #0]
   1e97e:	b142      	cbz	r2, 1e992 <ble_gap_update_next_exp+0x32>
        ticks = entry->exp_os_ticks - now;
   1e980:	6913      	ldr	r3, [r2, #16]
   1e982:	1b1b      	subs	r3, r3, r4
        if (ticks <= 0) {
   1e984:	2b00      	cmp	r3, #0
   1e986:	ddf7      	ble.n	1e978 <ble_gap_update_next_exp+0x18>
        if (ticks < best_ticks) {
   1e988:	4299      	cmp	r1, r3
   1e98a:	ddf7      	ble.n	1e97c <ble_gap_update_next_exp+0x1c>
            conn_handle = entry->conn_handle;
   1e98c:	8a90      	ldrh	r0, [r2, #20]
            best_ticks = ticks;
   1e98e:	4619      	mov	r1, r3
   1e990:	e7f4      	b.n	1e97c <ble_gap_update_next_exp+0x1c>
    if (out_ticks_from_now != NULL) {
   1e992:	b105      	cbz	r5, 1e996 <ble_gap_update_next_exp+0x36>
        *out_ticks_from_now = best_ticks;
   1e994:	6029      	str	r1, [r5, #0]
}
   1e996:	bd38      	pop	{r3, r4, r5, pc}
   1e998:	10003934 	.word	0x10003934

0001e99c <ble_gap_update_timer>:
{
   1e99c:	b510      	push	{r4, lr}
   1e99e:	b082      	sub	sp, #8
   1e9a0:	e007      	b.n	1e9b2 <ble_gap_update_timer+0x16>
        ble_hs_unlock();
   1e9a2:	f003 f8b3 	bl	21b0c <ble_hs_unlock>
            entry = NULL;
   1e9a6:	2400      	movs	r4, #0
   1e9a8:	e002      	b.n	1e9b0 <ble_gap_update_timer+0x14>
            ble_gap_update_entry_free(entry);
   1e9aa:	4620      	mov	r0, r4
   1e9ac:	f7ff ffb4 	bl	1e918 <ble_gap_update_entry_free>
    } while (entry != NULL);
   1e9b0:	b17c      	cbz	r4, 1e9d2 <ble_gap_update_timer+0x36>
        ble_hs_lock();
   1e9b2:	f003 f8a7 	bl	21b04 <ble_hs_lock>
        conn_handle = ble_gap_update_next_exp(&ticks_until_exp);
   1e9b6:	a801      	add	r0, sp, #4
   1e9b8:	f7ff ffd2 	bl	1e960 <ble_gap_update_next_exp>
        if (ticks_until_exp == 0) {
   1e9bc:	9b01      	ldr	r3, [sp, #4]
   1e9be:	2b00      	cmp	r3, #0
   1e9c0:	d1ef      	bne.n	1e9a2 <ble_gap_update_timer+0x6>
            entry = ble_gap_update_entry_remove(conn_handle);
   1e9c2:	f7ff fed1 	bl	1e768 <ble_gap_update_entry_remove>
   1e9c6:	4604      	mov	r4, r0
        ble_hs_unlock();
   1e9c8:	f003 f8a0 	bl	21b0c <ble_hs_unlock>
        if (entry != NULL) {
   1e9cc:	2c00      	cmp	r4, #0
   1e9ce:	d1ec      	bne.n	1e9aa <ble_gap_update_timer+0xe>
   1e9d0:	e7ee      	b.n	1e9b0 <ble_gap_update_timer+0x14>
}
   1e9d2:	9801      	ldr	r0, [sp, #4]
   1e9d4:	b002      	add	sp, #8
   1e9d6:	bd10      	pop	{r4, pc}

0001e9d8 <ble_gap_slave_ticks_until_exp>:
    if (ble_gap_slave[0].op == BLE_GAP_OP_NULL || !ble_gap_slave[0].exp_set) {
   1e9d8:	4b0b      	ldr	r3, [pc, #44]	; (1ea08 <ble_gap_slave_ticks_until_exp+0x30>)
   1e9da:	781b      	ldrb	r3, [r3, #0]
   1e9dc:	b173      	cbz	r3, 1e9fc <ble_gap_slave_ticks_until_exp+0x24>
   1e9de:	4b0a      	ldr	r3, [pc, #40]	; (1ea08 <ble_gap_slave_ticks_until_exp+0x30>)
   1e9e0:	785b      	ldrb	r3, [r3, #1]
   1e9e2:	f013 0f10 	tst.w	r3, #16
   1e9e6:	d00c      	beq.n	1ea02 <ble_gap_slave_ticks_until_exp+0x2a>
{
   1e9e8:	b510      	push	{r4, lr}
    ticks = ble_gap_slave[0].exp_os_ticks - ble_npl_time_get();
   1e9ea:	4b07      	ldr	r3, [pc, #28]	; (1ea08 <ble_gap_slave_ticks_until_exp+0x30>)
   1e9ec:	685c      	ldr	r4, [r3, #4]
   1e9ee:	f7f7 fdd7 	bl	165a0 <os_time_get>
   1e9f2:	1a20      	subs	r0, r4, r0
    if (ticks > 0) {
   1e9f4:	2800      	cmp	r0, #0
   1e9f6:	dc00      	bgt.n	1e9fa <ble_gap_slave_ticks_until_exp+0x22>
    return 0;
   1e9f8:	2000      	movs	r0, #0
}
   1e9fa:	bd10      	pop	{r4, pc}
        return BLE_HS_FOREVER;
   1e9fc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1ea00:	4770      	bx	lr
   1ea02:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   1ea06:	4770      	bx	lr
   1ea08:	1000396c 	.word	0x1000396c

0001ea0c <ble_gap_slave_timer>:
{
   1ea0c:	b508      	push	{r3, lr}
    ticks_until_exp = ble_gap_slave_ticks_until_exp();
   1ea0e:	f7ff ffe3 	bl	1e9d8 <ble_gap_slave_ticks_until_exp>
    if (ticks_until_exp != 0) {
   1ea12:	b100      	cbz	r0, 1ea16 <ble_gap_slave_timer+0xa>
}
   1ea14:	bd08      	pop	{r3, pc}
    rc = ble_gap_adv_enable_tx(0);
   1ea16:	2000      	movs	r0, #0
   1ea18:	f7ff fdf7 	bl	1e60a <ble_gap_adv_enable_tx>
    if (rc != 0) {
   1ea1c:	b108      	cbz	r0, 1ea22 <ble_gap_slave_timer+0x16>
        return 100;
   1ea1e:	2064      	movs	r0, #100	; 0x64
   1ea20:	e7f8      	b.n	1ea14 <ble_gap_slave_timer+0x8>
    ble_gap_slave_reset_state(0);
   1ea22:	f7ff feb9 	bl	1e798 <ble_gap_slave_reset_state>
    ble_gap_adv_finished(0, BLE_HS_ETIMEOUT, 0, 0);
   1ea26:	2300      	movs	r3, #0
   1ea28:	461a      	mov	r2, r3
   1ea2a:	210d      	movs	r1, #13
   1ea2c:	4618      	mov	r0, r3
   1ea2e:	f7ff fed9 	bl	1e7e4 <ble_gap_adv_finished>
    return BLE_HS_FOREVER;
   1ea32:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1ea36:	e7ed      	b.n	1ea14 <ble_gap_slave_timer+0x8>

0001ea38 <ble_gap_slave_set_timer>:
{
   1ea38:	b510      	push	{r4, lr}
   1ea3a:	4604      	mov	r4, r0
   1ea3c:	f7f7 fdb0 	bl	165a0 <os_time_get>
    ble_gap_slave[0].exp_os_ticks = ble_npl_time_get() + ticks_from_now;
   1ea40:	4404      	add	r4, r0
   1ea42:	4b04      	ldr	r3, [pc, #16]	; (1ea54 <ble_gap_slave_set_timer+0x1c>)
   1ea44:	605c      	str	r4, [r3, #4]
    ble_gap_slave[0].exp_set = 1;
   1ea46:	785a      	ldrb	r2, [r3, #1]
   1ea48:	f042 0210 	orr.w	r2, r2, #16
   1ea4c:	705a      	strb	r2, [r3, #1]
    ble_hs_timer_resched();
   1ea4e:	f003 f94b 	bl	21ce8 <ble_hs_timer_resched>
}
   1ea52:	bd10      	pop	{r4, pc}
   1ea54:	1000396c 	.word	0x1000396c

0001ea58 <ble_gap_log_adv>:
{
   1ea58:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ea5a:	b087      	sub	sp, #28
   1ea5c:	4606      	mov	r6, r0
   1ea5e:	460d      	mov	r5, r1
   1ea60:	4614      	mov	r4, r2
    BLE_HS_LOG(INFO, "disc_mode=%d", adv_params->disc_mode);
   1ea62:	7853      	ldrb	r3, [r2, #1]
   1ea64:	4a15      	ldr	r2, [pc, #84]	; (1eabc <ble_gap_log_adv+0x64>)
   1ea66:	2101      	movs	r1, #1
   1ea68:	2004      	movs	r0, #4
   1ea6a:	f7fa fe75 	bl	19758 <modlog_printf>
    if (direct_addr) {
   1ea6e:	b1ad      	cbz	r5, 1ea9c <ble_gap_log_adv+0x44>
        BLE_HS_LOG(INFO, " direct_addr_type=%d direct_addr=",
   1ea70:	782b      	ldrb	r3, [r5, #0]
   1ea72:	4a13      	ldr	r2, [pc, #76]	; (1eac0 <ble_gap_log_adv+0x68>)
   1ea74:	2101      	movs	r1, #1
   1ea76:	2004      	movs	r0, #4
   1ea78:	f7fa fe6e 	bl	19758 <modlog_printf>
        BLE_HS_LOG_ADDR(INFO, direct_addr->val);
   1ea7c:	796b      	ldrb	r3, [r5, #5]
   1ea7e:	792a      	ldrb	r2, [r5, #4]
   1ea80:	78e9      	ldrb	r1, [r5, #3]
   1ea82:	78a8      	ldrb	r0, [r5, #2]
   1ea84:	786f      	ldrb	r7, [r5, #1]
   1ea86:	9704      	str	r7, [sp, #16]
   1ea88:	9003      	str	r0, [sp, #12]
   1ea8a:	9102      	str	r1, [sp, #8]
   1ea8c:	9201      	str	r2, [sp, #4]
   1ea8e:	9300      	str	r3, [sp, #0]
   1ea90:	79ab      	ldrb	r3, [r5, #6]
   1ea92:	4a0c      	ldr	r2, [pc, #48]	; (1eac4 <ble_gap_log_adv+0x6c>)
   1ea94:	2101      	movs	r1, #1
   1ea96:	2004      	movs	r0, #4
   1ea98:	f7fa fe5e 	bl	19758 <modlog_printf>
    BLE_HS_LOG(INFO, " adv_channel_map=%d own_addr_type=%d "
   1ea9c:	79e3      	ldrb	r3, [r4, #7]
   1ea9e:	8862      	ldrh	r2, [r4, #2]
   1eaa0:	88a1      	ldrh	r1, [r4, #4]
   1eaa2:	9103      	str	r1, [sp, #12]
   1eaa4:	9202      	str	r2, [sp, #8]
   1eaa6:	9301      	str	r3, [sp, #4]
   1eaa8:	9600      	str	r6, [sp, #0]
   1eaaa:	79a3      	ldrb	r3, [r4, #6]
   1eaac:	4a06      	ldr	r2, [pc, #24]	; (1eac8 <ble_gap_log_adv+0x70>)
   1eaae:	2101      	movs	r1, #1
   1eab0:	2004      	movs	r0, #4
   1eab2:	f7fa fe51 	bl	19758 <modlog_printf>
}
   1eab6:	b007      	add	sp, #28
   1eab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1eaba:	bf00      	nop
   1eabc:	00030c5c 	.word	0x00030c5c
   1eac0:	00030c6c 	.word	0x00030c6c
   1eac4:	000303c0 	.word	0x000303c0
   1eac8:	00030c90 	.word	0x00030c90

0001eacc <ble_gap_log_update>:
{
   1eacc:	b570      	push	{r4, r5, r6, lr}
   1eace:	b086      	sub	sp, #24
   1ead0:	4603      	mov	r3, r0
    BLE_HS_LOG(INFO, "connection parameter update; "
   1ead2:	880a      	ldrh	r2, [r1, #0]
   1ead4:	8848      	ldrh	r0, [r1, #2]
   1ead6:	888c      	ldrh	r4, [r1, #4]
   1ead8:	88cd      	ldrh	r5, [r1, #6]
   1eada:	890e      	ldrh	r6, [r1, #8]
   1eadc:	8949      	ldrh	r1, [r1, #10]
   1eade:	9105      	str	r1, [sp, #20]
   1eae0:	9604      	str	r6, [sp, #16]
   1eae2:	9503      	str	r5, [sp, #12]
   1eae4:	9402      	str	r4, [sp, #8]
   1eae6:	9001      	str	r0, [sp, #4]
   1eae8:	9200      	str	r2, [sp, #0]
   1eaea:	4a03      	ldr	r2, [pc, #12]	; (1eaf8 <ble_gap_log_update+0x2c>)
   1eaec:	2101      	movs	r1, #1
   1eaee:	2004      	movs	r0, #4
   1eaf0:	f7fa fe32 	bl	19758 <modlog_printf>
}
   1eaf4:	b006      	add	sp, #24
   1eaf6:	bd70      	pop	{r4, r5, r6, pc}
   1eaf8:	00030cec 	.word	0x00030cec

0001eafc <ble_gap_master_timer>:
{
   1eafc:	b508      	push	{r3, lr}
    ticks_until_exp = ble_gap_master_ticks_until_exp();
   1eafe:	f7ff ff15 	bl	1e92c <ble_gap_master_ticks_until_exp>
    if (ticks_until_exp != 0) {
   1eb02:	b9e0      	cbnz	r0, 1eb3e <ble_gap_master_timer+0x42>
    switch (ble_gap_master.op) {
   1eb04:	4b0f      	ldr	r3, [pc, #60]	; (1eb44 <ble_gap_master_timer+0x48>)
   1eb06:	7c1b      	ldrb	r3, [r3, #16]
   1eb08:	2b01      	cmp	r3, #1
   1eb0a:	d00c      	beq.n	1eb26 <ble_gap_master_timer+0x2a>
   1eb0c:	2b02      	cmp	r3, #2
   1eb0e:	d114      	bne.n	1eb3a <ble_gap_master_timer+0x3e>
        rc = ble_gap_conn_cancel_tx();
   1eb10:	f7ff fd6e 	bl	1e5f0 <ble_gap_conn_cancel_tx>
        if (rc != 0) {
   1eb14:	b9a0      	cbnz	r0, 1eb40 <ble_gap_master_timer+0x44>
            ble_gap_master.exp_set = 0;
   1eb16:	4b0b      	ldr	r3, [pc, #44]	; (1eb44 <ble_gap_master_timer+0x48>)
   1eb18:	7c5a      	ldrb	r2, [r3, #17]
   1eb1a:	f36f 0200 	bfc	r2, #0, #1
   1eb1e:	745a      	strb	r2, [r3, #17]
    return BLE_HS_FOREVER;
   1eb20:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
        break;
   1eb24:	e00b      	b.n	1eb3e <ble_gap_master_timer+0x42>
        assert(0);
   1eb26:	f7f5 fd9d 	bl	14664 <hal_debugger_connected>
   1eb2a:	b100      	cbz	r0, 1eb2e <ble_gap_master_timer+0x32>
   1eb2c:	be01      	bkpt	0x0001
   1eb2e:	2300      	movs	r3, #0
   1eb30:	461a      	mov	r2, r3
   1eb32:	4619      	mov	r1, r3
   1eb34:	4618      	mov	r0, r3
   1eb36:	f7f6 f935 	bl	14da4 <__assert_func>
    switch (ble_gap_master.op) {
   1eb3a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   1eb3e:	bd08      	pop	{r3, pc}
            return ble_npl_time_ms_to_ticks32(BLE_GAP_CANCEL_RETRY_TIMEOUT_MS);
   1eb40:	200c      	movs	r0, #12
   1eb42:	e7fc      	b.n	1eb3e <ble_gap_master_timer+0x42>
   1eb44:	1000396c 	.word	0x1000396c

0001eb48 <ble_gap_adv_validate>:
    if (adv_params == NULL) {
   1eb48:	b34a      	cbz	r2, 1eb9e <ble_gap_adv_validate+0x56>
{
   1eb4a:	b508      	push	{r3, lr}
   1eb4c:	4613      	mov	r3, r2
    if (own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) {
   1eb4e:	2803      	cmp	r0, #3
   1eb50:	d827      	bhi.n	1eba2 <ble_gap_adv_validate+0x5a>
    if (adv_params->disc_mode >= BLE_GAP_DISC_MODE_MAX) {
   1eb52:	7852      	ldrb	r2, [r2, #1]
   1eb54:	2a02      	cmp	r2, #2
   1eb56:	d826      	bhi.n	1eba6 <ble_gap_adv_validate+0x5e>
    if (ble_gap_slave[0].op != BLE_GAP_OP_NULL) {
   1eb58:	4a1b      	ldr	r2, [pc, #108]	; (1ebc8 <ble_gap_adv_validate+0x80>)
   1eb5a:	7812      	ldrb	r2, [r2, #0]
   1eb5c:	bb2a      	cbnz	r2, 1ebaa <ble_gap_adv_validate+0x62>
    switch (adv_params->conn_mode) {
   1eb5e:	781a      	ldrb	r2, [r3, #0]
   1eb60:	2a01      	cmp	r2, #1
   1eb62:	d013      	beq.n	1eb8c <ble_gap_adv_validate+0x44>
   1eb64:	2a02      	cmp	r2, #2
   1eb66:	d008      	beq.n	1eb7a <ble_gap_adv_validate+0x32>
   1eb68:	b10a      	cbz	r2, 1eb6e <ble_gap_adv_validate+0x26>
   1eb6a:	2003      	movs	r0, #3
}
   1eb6c:	bd08      	pop	{r3, pc}
        if (adv_params->high_duty_cycle) {
   1eb6e:	7a1b      	ldrb	r3, [r3, #8]
   1eb70:	f013 0f01 	tst.w	r3, #1
   1eb74:	d11b      	bne.n	1ebae <ble_gap_adv_validate+0x66>
    return 0;
   1eb76:	2000      	movs	r0, #0
   1eb78:	e7f8      	b.n	1eb6c <ble_gap_adv_validate+0x24>
        if (adv_params->high_duty_cycle) {
   1eb7a:	7a1b      	ldrb	r3, [r3, #8]
   1eb7c:	f013 0f01 	tst.w	r3, #1
   1eb80:	d117      	bne.n	1ebb2 <ble_gap_adv_validate+0x6a>
        if (!ble_hs_conn_can_alloc()) {
   1eb82:	f003 fd4f 	bl	22624 <ble_hs_conn_can_alloc>
   1eb86:	b1b0      	cbz	r0, 1ebb6 <ble_gap_adv_validate+0x6e>
    return 0;
   1eb88:	2000      	movs	r0, #0
   1eb8a:	e7ef      	b.n	1eb6c <ble_gap_adv_validate+0x24>
        if (peer_addr == NULL) {
   1eb8c:	b1a9      	cbz	r1, 1ebba <ble_gap_adv_validate+0x72>
        if (peer_addr->type != BLE_ADDR_PUBLIC &&
   1eb8e:	780b      	ldrb	r3, [r1, #0]
   1eb90:	2b03      	cmp	r3, #3
   1eb92:	d814      	bhi.n	1ebbe <ble_gap_adv_validate+0x76>
        if (!ble_hs_conn_can_alloc()) {
   1eb94:	f003 fd46 	bl	22624 <ble_hs_conn_can_alloc>
   1eb98:	b198      	cbz	r0, 1ebc2 <ble_gap_adv_validate+0x7a>
    return 0;
   1eb9a:	2000      	movs	r0, #0
   1eb9c:	e7e6      	b.n	1eb6c <ble_gap_adv_validate+0x24>
        return BLE_HS_EINVAL;
   1eb9e:	2003      	movs	r0, #3
}
   1eba0:	4770      	bx	lr
        return BLE_HS_EINVAL;
   1eba2:	2003      	movs	r0, #3
   1eba4:	e7e2      	b.n	1eb6c <ble_gap_adv_validate+0x24>
        return BLE_HS_EINVAL;
   1eba6:	2003      	movs	r0, #3
   1eba8:	e7e0      	b.n	1eb6c <ble_gap_adv_validate+0x24>
        return BLE_HS_EALREADY;
   1ebaa:	2002      	movs	r0, #2
   1ebac:	e7de      	b.n	1eb6c <ble_gap_adv_validate+0x24>
            return BLE_HS_EINVAL;
   1ebae:	2003      	movs	r0, #3
   1ebb0:	e7dc      	b.n	1eb6c <ble_gap_adv_validate+0x24>
            return BLE_HS_EINVAL;
   1ebb2:	2003      	movs	r0, #3
   1ebb4:	e7da      	b.n	1eb6c <ble_gap_adv_validate+0x24>
            return BLE_HS_ENOMEM;
   1ebb6:	2006      	movs	r0, #6
   1ebb8:	e7d8      	b.n	1eb6c <ble_gap_adv_validate+0x24>
            return BLE_HS_EINVAL;
   1ebba:	2003      	movs	r0, #3
   1ebbc:	e7d6      	b.n	1eb6c <ble_gap_adv_validate+0x24>
            return BLE_HS_EINVAL;
   1ebbe:	2003      	movs	r0, #3
   1ebc0:	e7d4      	b.n	1eb6c <ble_gap_adv_validate+0x24>
            return BLE_HS_ENOMEM;
   1ebc2:	2006      	movs	r0, #6
   1ebc4:	e7d2      	b.n	1eb6c <ble_gap_adv_validate+0x24>
   1ebc6:	bf00      	nop
   1ebc8:	1000396c 	.word	0x1000396c

0001ebcc <ble_gap_update_entry_alloc>:
{
   1ebcc:	b508      	push	{r3, lr}
    entry = os_memblock_get(&ble_gap_update_entry_pool);
   1ebce:	4807      	ldr	r0, [pc, #28]	; (1ebec <ble_gap_update_entry_alloc+0x20>)
   1ebd0:	f7f7 f92d 	bl	15e2e <os_memblock_get>
    if (entry != NULL) {
   1ebd4:	4603      	mov	r3, r0
   1ebd6:	b130      	cbz	r0, 1ebe6 <ble_gap_update_entry_alloc+0x1a>
        memset(entry, 0, sizeof *entry);
   1ebd8:	2200      	movs	r2, #0
   1ebda:	6002      	str	r2, [r0, #0]
   1ebdc:	6042      	str	r2, [r0, #4]
   1ebde:	6082      	str	r2, [r0, #8]
   1ebe0:	60c2      	str	r2, [r0, #12]
   1ebe2:	6102      	str	r2, [r0, #16]
   1ebe4:	6142      	str	r2, [r0, #20]
}
   1ebe6:	4618      	mov	r0, r3
   1ebe8:	bd08      	pop	{r3, pc}
   1ebea:	bf00      	nop
   1ebec:	10003950 	.word	0x10003950

0001ebf0 <ble_gap_conn_find>:
{
   1ebf0:	b538      	push	{r3, r4, r5, lr}
   1ebf2:	4605      	mov	r5, r0
   1ebf4:	460c      	mov	r4, r1
    ble_hs_lock();
   1ebf6:	f002 ff85 	bl	21b04 <ble_hs_lock>
    conn = ble_hs_conn_find(handle);
   1ebfa:	4628      	mov	r0, r5
   1ebfc:	f003 fdde 	bl	227bc <ble_hs_conn_find>
    if (conn != NULL && out_desc != NULL) {
   1ec00:	4605      	mov	r5, r0
   1ec02:	b118      	cbz	r0, 1ec0c <ble_gap_conn_find+0x1c>
   1ec04:	b114      	cbz	r4, 1ec0c <ble_gap_conn_find+0x1c>
        ble_gap_fill_conn_desc(conn, out_desc);
   1ec06:	4621      	mov	r1, r4
   1ec08:	f7ff fc77 	bl	1e4fa <ble_gap_fill_conn_desc>
    ble_hs_unlock();
   1ec0c:	f002 ff7e 	bl	21b0c <ble_hs_unlock>
    if (conn == NULL) {
   1ec10:	b10d      	cbz	r5, 1ec16 <ble_gap_conn_find+0x26>
        return 0;
   1ec12:	2000      	movs	r0, #0
}
   1ec14:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOTCONN;
   1ec16:	2007      	movs	r0, #7
   1ec18:	e7fc      	b.n	1ec14 <ble_gap_conn_find+0x24>

0001ec1a <ble_gap_master_in_progress>:
}
   1ec1a:	2000      	movs	r0, #0
   1ec1c:	4770      	bx	lr

0001ec1e <ble_gap_rx_adv_report>:
}
   1ec1e:	4770      	bx	lr

0001ec20 <ble_gap_rx_rd_rem_sup_feat_complete>:
{
   1ec20:	b538      	push	{r3, r4, r5, lr}
   1ec22:	4604      	mov	r4, r0
    ble_hs_lock();
   1ec24:	f002 ff6e 	bl	21b04 <ble_hs_lock>
    conn = ble_hs_conn_find(le16toh(ev->conn_handle));
   1ec28:	8860      	ldrh	r0, [r4, #2]
   1ec2a:	f003 fdc7 	bl	227bc <ble_hs_conn_find>
    if ((conn != NULL) && (ev->status == 0)) {
   1ec2e:	b110      	cbz	r0, 1ec36 <ble_gap_rx_rd_rem_sup_feat_complete+0x16>
   1ec30:	4605      	mov	r5, r0
   1ec32:	7863      	ldrb	r3, [r4, #1]
   1ec34:	b113      	cbz	r3, 1ec3c <ble_gap_rx_rd_rem_sup_feat_complete+0x1c>
    ble_hs_unlock();
   1ec36:	f002 ff69 	bl	21b0c <ble_hs_unlock>
}
   1ec3a:	bd38      	pop	{r3, r4, r5, pc}
        conn->supported_feat = get_le32(ev->features);
   1ec3c:	1d20      	adds	r0, r4, #4
   1ec3e:	f00e fc3e 	bl	2d4be <get_le32>
   1ec42:	6268      	str	r0, [r5, #36]	; 0x24
   1ec44:	e7f7      	b.n	1ec36 <ble_gap_rx_rd_rem_sup_feat_complete+0x16>

0001ec46 <ble_gap_rx_l2cap_update_req>:
{
   1ec46:	b530      	push	{r4, r5, lr}
   1ec48:	b08f      	sub	sp, #60	; 0x3c
   1ec4a:	4604      	mov	r4, r0
   1ec4c:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   1ec4e:	2234      	movs	r2, #52	; 0x34
   1ec50:	2100      	movs	r1, #0
   1ec52:	a801      	add	r0, sp, #4
   1ec54:	f7f7 ff63 	bl	16b1e <memset>
    event.type = BLE_GAP_EVENT_L2CAP_UPDATE_REQ;
   1ec58:	2305      	movs	r3, #5
   1ec5a:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update_req.conn_handle = conn_handle;
   1ec5e:	f8ad 4010 	strh.w	r4, [sp, #16]
    event.conn_update_req.peer_params = params;
   1ec62:	9502      	str	r5, [sp, #8]
    rc = ble_gap_call_conn_event_cb(&event, conn_handle);
   1ec64:	4621      	mov	r1, r4
   1ec66:	a801      	add	r0, sp, #4
   1ec68:	f7ff fc36 	bl	1e4d8 <ble_gap_call_conn_event_cb>
}
   1ec6c:	b00f      	add	sp, #60	; 0x3c
   1ec6e:	bd30      	pop	{r4, r5, pc}

0001ec70 <ble_gap_rx_phy_update_complete>:
{
   1ec70:	b570      	push	{r4, r5, r6, lr}
   1ec72:	b08e      	sub	sp, #56	; 0x38
   1ec74:	4604      	mov	r4, r0
    uint16_t conn_handle = le16toh(ev->conn_handle);
   1ec76:	8845      	ldrh	r5, [r0, #2]
   1ec78:	b2ae      	uxth	r6, r5
    memset(&event, 0, sizeof event);
   1ec7a:	2234      	movs	r2, #52	; 0x34
   1ec7c:	2100      	movs	r1, #0
   1ec7e:	a801      	add	r0, sp, #4
   1ec80:	f7f7 ff4d 	bl	16b1e <memset>
    event.type = BLE_GAP_EVENT_PHY_UPDATE_COMPLETE;
   1ec84:	2312      	movs	r3, #18
   1ec86:	f88d 3004 	strb.w	r3, [sp, #4]
    event.phy_updated.status = ev->status;
   1ec8a:	7863      	ldrb	r3, [r4, #1]
   1ec8c:	9302      	str	r3, [sp, #8]
    event.phy_updated.conn_handle = conn_handle;
   1ec8e:	f8ad 500c 	strh.w	r5, [sp, #12]
    event.phy_updated.tx_phy = ev->tx_phy;
   1ec92:	7923      	ldrb	r3, [r4, #4]
   1ec94:	f88d 300e 	strb.w	r3, [sp, #14]
    event.phy_updated.rx_phy = ev->rx_phy;
   1ec98:	7963      	ldrb	r3, [r4, #5]
   1ec9a:	f88d 300f 	strb.w	r3, [sp, #15]
    ble_gap_event_listener_call(&event);
   1ec9e:	a801      	add	r0, sp, #4
   1eca0:	f7ff fbf0 	bl	1e484 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1eca4:	4631      	mov	r1, r6
   1eca6:	a801      	add	r0, sp, #4
   1eca8:	f7ff fc16 	bl	1e4d8 <ble_gap_call_conn_event_cb>
}
   1ecac:	b00e      	add	sp, #56	; 0x38
   1ecae:	bd70      	pop	{r4, r5, r6, pc}

0001ecb0 <ble_gap_timer>:
{
   1ecb0:	b510      	push	{r4, lr}
    master_ticks = ble_gap_master_timer();
   1ecb2:	f7ff ff23 	bl	1eafc <ble_gap_master_timer>
   1ecb6:	4604      	mov	r4, r0
    update_ticks = ble_gap_update_timer();
   1ecb8:	f7ff fe70 	bl	1e99c <ble_gap_update_timer>
    min_ticks = min(master_ticks, update_ticks);
   1ecbc:	4284      	cmp	r4, r0
   1ecbe:	bfa8      	it	ge
   1ecc0:	4604      	movge	r4, r0
    min_ticks = min(min_ticks, ble_gap_slave_timer());
   1ecc2:	f7ff fea3 	bl	1ea0c <ble_gap_slave_timer>
   1ecc6:	42a0      	cmp	r0, r4
   1ecc8:	dd01      	ble.n	1ecce <ble_gap_timer+0x1e>
}
   1ecca:	4620      	mov	r0, r4
   1eccc:	bd10      	pop	{r4, pc}
    min_ticks = min(min_ticks, ble_gap_slave_timer());
   1ecce:	f7ff fe9d 	bl	1ea0c <ble_gap_slave_timer>
   1ecd2:	4604      	mov	r4, r0
    return min_ticks;
   1ecd4:	e7f9      	b.n	1ecca <ble_gap_timer+0x1a>
	...

0001ecd8 <ble_gap_adv_start>:
{
   1ecd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ecdc:	b082      	sub	sp, #8
   1ecde:	4604      	mov	r4, r0
   1ece0:	460e      	mov	r6, r1
   1ece2:	4617      	mov	r7, r2
   1ece4:	461d      	mov	r5, r3
    STATS_INC(ble_gap_stats, adv_start);
   1ece6:	4a41      	ldr	r2, [pc, #260]	; (1edec <ble_gap_adv_start+0x114>)
   1ece8:	69d3      	ldr	r3, [r2, #28]
   1ecea:	3301      	adds	r3, #1
   1ecec:	61d3      	str	r3, [r2, #28]
    ble_hs_lock();
   1ecee:	f002 ff09 	bl	21b04 <ble_hs_lock>
    rc = ble_gap_adv_validate(own_addr_type, direct_addr, adv_params);
   1ecf2:	462a      	mov	r2, r5
   1ecf4:	4631      	mov	r1, r6
   1ecf6:	4620      	mov	r0, r4
   1ecf8:	f7ff ff26 	bl	1eb48 <ble_gap_adv_validate>
    if (rc != 0) {
   1ecfc:	4680      	mov	r8, r0
   1ecfe:	b9a8      	cbnz	r0, 1ed2c <ble_gap_adv_start+0x54>
    if (duration_ms != BLE_HS_FOREVER) {
   1ed00:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1ed04:	429f      	cmp	r7, r3
   1ed06:	d006      	beq.n	1ed16 <ble_gap_adv_start+0x3e>
}

static inline ble_npl_error_t
ble_npl_time_ms_to_ticks(uint32_t ms, ble_npl_time_t *out_ticks)
{
    return (ble_npl_error_t)os_time_ms_to_ticks(ms, out_ticks);
   1ed08:	a901      	add	r1, sp, #4
   1ed0a:	4638      	mov	r0, r7
   1ed0c:	f7f7 fce9 	bl	166e2 <os_time_ms_to_ticks>
        if (rc != 0) {
   1ed10:	f010 0fff 	tst.w	r0, #255	; 0xff
   1ed14:	d117      	bne.n	1ed46 <ble_gap_adv_start+0x6e>
    if (!ble_hs_is_enabled()) {
   1ed16:	f002 ff2d 	bl	21b74 <ble_hs_is_enabled>
   1ed1a:	b1c8      	cbz	r0, 1ed50 <ble_gap_adv_start+0x78>
    if (ble_gap_is_preempted()) {
   1ed1c:	f7ff faf2 	bl	1e304 <ble_gap_is_preempted>
   1ed20:	b9d8      	cbnz	r0, 1ed5a <ble_gap_adv_start+0x82>
    rc = ble_hs_id_use_addr(own_addr_type);
   1ed22:	4620      	mov	r0, r4
   1ed24:	f004 fd5f 	bl	237e6 <ble_hs_id_use_addr>
    if (rc != 0) {
   1ed28:	4680      	mov	r8, r0
   1ed2a:	b1d8      	cbz	r0, 1ed64 <ble_gap_adv_start+0x8c>
    ble_hs_unlock();
   1ed2c:	f002 feee 	bl	21b0c <ble_hs_unlock>
    if (rc != 0) {
   1ed30:	f1b8 0f00 	cmp.w	r8, #0
   1ed34:	d003      	beq.n	1ed3e <ble_gap_adv_start+0x66>
        STATS_INC(ble_gap_stats, adv_start_fail);
   1ed36:	4a2d      	ldr	r2, [pc, #180]	; (1edec <ble_gap_adv_start+0x114>)
   1ed38:	6a13      	ldr	r3, [r2, #32]
   1ed3a:	3301      	adds	r3, #1
   1ed3c:	6213      	str	r3, [r2, #32]
}
   1ed3e:	4640      	mov	r0, r8
   1ed40:	b002      	add	sp, #8
   1ed42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_unlock();
   1ed46:	f002 fee1 	bl	21b0c <ble_hs_unlock>
            rc = BLE_HS_EINVAL;
   1ed4a:	f04f 0803 	mov.w	r8, #3
   1ed4e:	e7f2      	b.n	1ed36 <ble_gap_adv_start+0x5e>
    ble_hs_unlock();
   1ed50:	f002 fedc 	bl	21b0c <ble_hs_unlock>
        rc = BLE_HS_EDISABLED;
   1ed54:	f04f 081e 	mov.w	r8, #30
   1ed58:	e7ed      	b.n	1ed36 <ble_gap_adv_start+0x5e>
    ble_hs_unlock();
   1ed5a:	f002 fed7 	bl	21b0c <ble_hs_unlock>
        rc = BLE_HS_EPREEMPTED;
   1ed5e:	f04f 081d 	mov.w	r8, #29
   1ed62:	e7e8      	b.n	1ed36 <ble_gap_adv_start+0x5e>
    BLE_HS_LOG(INFO, "GAP procedure initiated: advertise; ");
   1ed64:	4a22      	ldr	r2, [pc, #136]	; (1edf0 <ble_gap_adv_start+0x118>)
   1ed66:	2101      	movs	r1, #1
   1ed68:	2004      	movs	r0, #4
   1ed6a:	f7fa fcf5 	bl	19758 <modlog_printf>
    ble_gap_log_adv(own_addr_type, direct_addr, adv_params);
   1ed6e:	462a      	mov	r2, r5
   1ed70:	4631      	mov	r1, r6
   1ed72:	4620      	mov	r0, r4
   1ed74:	f7ff fe70 	bl	1ea58 <ble_gap_log_adv>
    BLE_HS_LOG(INFO, "\n");
   1ed78:	4a1e      	ldr	r2, [pc, #120]	; (1edf4 <ble_gap_adv_start+0x11c>)
   1ed7a:	2101      	movs	r1, #1
   1ed7c:	2004      	movs	r0, #4
   1ed7e:	f7fa fceb 	bl	19758 <modlog_printf>
    ble_gap_slave[0].cb = cb;
   1ed82:	4b1d      	ldr	r3, [pc, #116]	; (1edf8 <ble_gap_adv_start+0x120>)
   1ed84:	9a08      	ldr	r2, [sp, #32]
   1ed86:	609a      	str	r2, [r3, #8]
    ble_gap_slave[0].cb_arg = cb_arg;
   1ed88:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ed8a:	60da      	str	r2, [r3, #12]
    ble_gap_slave[0].our_addr_type = own_addr_type;
   1ed8c:	785a      	ldrb	r2, [r3, #1]
   1ed8e:	f364 0201 	bfi	r2, r4, #0, #2
   1ed92:	705a      	strb	r2, [r3, #1]
    if (adv_params->conn_mode != BLE_GAP_CONN_MODE_NON) {
   1ed94:	782b      	ldrb	r3, [r5, #0]
   1ed96:	b1d3      	cbz	r3, 1edce <ble_gap_adv_start+0xf6>
        ble_gap_slave[0].connectable = 1;
   1ed98:	4a17      	ldr	r2, [pc, #92]	; (1edf8 <ble_gap_adv_start+0x120>)
   1ed9a:	7853      	ldrb	r3, [r2, #1]
   1ed9c:	f043 0308 	orr.w	r3, r3, #8
   1eda0:	7053      	strb	r3, [r2, #1]
    rc = ble_gap_adv_params_tx(own_addr_type, direct_addr, adv_params);
   1eda2:	462a      	mov	r2, r5
   1eda4:	4631      	mov	r1, r6
   1eda6:	4620      	mov	r0, r4
   1eda8:	f7ff fc41 	bl	1e62e <ble_gap_adv_params_tx>
    if (rc != 0) {
   1edac:	4680      	mov	r8, r0
   1edae:	2800      	cmp	r0, #0
   1edb0:	d1bc      	bne.n	1ed2c <ble_gap_adv_start+0x54>
    ble_gap_slave[0].op = BLE_GAP_OP_S_ADV;
   1edb2:	2001      	movs	r0, #1
   1edb4:	4b10      	ldr	r3, [pc, #64]	; (1edf8 <ble_gap_adv_start+0x120>)
   1edb6:	7018      	strb	r0, [r3, #0]
    rc = ble_gap_adv_enable_tx(1);
   1edb8:	f7ff fc27 	bl	1e60a <ble_gap_adv_enable_tx>
    if (rc != 0) {
   1edbc:	4680      	mov	r8, r0
   1edbe:	b960      	cbnz	r0, 1edda <ble_gap_adv_start+0x102>
    if (duration_ms != BLE_HS_FOREVER) {
   1edc0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1edc4:	429f      	cmp	r7, r3
   1edc6:	d10c      	bne.n	1ede2 <ble_gap_adv_start+0x10a>
    ble_hs_unlock();
   1edc8:	f002 fea0 	bl	21b0c <ble_hs_unlock>
    if (rc != 0) {
   1edcc:	e7b7      	b.n	1ed3e <ble_gap_adv_start+0x66>
        ble_gap_slave[0].connectable = 0;
   1edce:	4b0a      	ldr	r3, [pc, #40]	; (1edf8 <ble_gap_adv_start+0x120>)
   1edd0:	785a      	ldrb	r2, [r3, #1]
   1edd2:	f36f 02c3 	bfc	r2, #3, #1
   1edd6:	705a      	strb	r2, [r3, #1]
   1edd8:	e7e3      	b.n	1eda2 <ble_gap_adv_start+0xca>
        ble_gap_slave_reset_state(0);
   1edda:	2000      	movs	r0, #0
   1eddc:	f7ff fcdc 	bl	1e798 <ble_gap_slave_reset_state>
        goto done;
   1ede0:	e7a4      	b.n	1ed2c <ble_gap_adv_start+0x54>
        ble_gap_slave_set_timer(duration_ticks);
   1ede2:	9801      	ldr	r0, [sp, #4]
   1ede4:	f7ff fe28 	bl	1ea38 <ble_gap_slave_set_timer>
   1ede8:	e7ee      	b.n	1edc8 <ble_gap_adv_start+0xf0>
   1edea:	bf00      	nop
   1edec:	100038ac 	.word	0x100038ac
   1edf0:	00030d9c 	.word	0x00030d9c
   1edf4:	000311a4 	.word	0x000311a4
   1edf8:	1000396c 	.word	0x1000396c

0001edfc <ble_gap_adv_set_data>:
{
   1edfc:	b510      	push	{r4, lr}
   1edfe:	b08a      	sub	sp, #40	; 0x28
   1ee00:	460c      	mov	r4, r1
    STATS_INC(ble_gap_stats, adv_set_data);
   1ee02:	4a0f      	ldr	r2, [pc, #60]	; (1ee40 <ble_gap_adv_set_data+0x44>)
   1ee04:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1ee06:	3301      	adds	r3, #1
   1ee08:	6253      	str	r3, [r2, #36]	; 0x24
    if (((data == NULL) && (data_len != 0)) ||
   1ee0a:	4601      	mov	r1, r0
   1ee0c:	b190      	cbz	r0, 1ee34 <ble_gap_adv_set_data+0x38>
   1ee0e:	2c1f      	cmp	r4, #31
   1ee10:	dc14      	bgt.n	1ee3c <ble_gap_adv_set_data+0x40>
    memcpy(cmd.adv_data, data, data_len);
   1ee12:	4622      	mov	r2, r4
   1ee14:	f10d 0009 	add.w	r0, sp, #9
   1ee18:	f7f7 fe5c 	bl	16ad4 <memcpy>
    cmd.adv_data_len = data_len;
   1ee1c:	f88d 4008 	strb.w	r4, [sp, #8]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   1ee20:	2300      	movs	r3, #0
   1ee22:	9300      	str	r3, [sp, #0]
   1ee24:	2220      	movs	r2, #32
   1ee26:	a902      	add	r1, sp, #8
   1ee28:	f242 0008 	movw	r0, #8200	; 0x2008
   1ee2c:	f004 f81a 	bl	22e64 <ble_hs_hci_cmd_tx>
}
   1ee30:	b00a      	add	sp, #40	; 0x28
   1ee32:	bd10      	pop	{r4, pc}
    if (((data == NULL) && (data_len != 0)) ||
   1ee34:	2c00      	cmp	r4, #0
   1ee36:	d0ea      	beq.n	1ee0e <ble_gap_adv_set_data+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1ee38:	2012      	movs	r0, #18
   1ee3a:	e7f9      	b.n	1ee30 <ble_gap_adv_set_data+0x34>
   1ee3c:	2012      	movs	r0, #18
   1ee3e:	e7f7      	b.n	1ee30 <ble_gap_adv_set_data+0x34>
   1ee40:	100038ac 	.word	0x100038ac

0001ee44 <ble_gap_adv_set_fields>:
{
   1ee44:	b500      	push	{lr}
   1ee46:	b08b      	sub	sp, #44	; 0x2c
    rc = ble_hs_adv_set_fields(adv_fields, buf, &buf_sz, sizeof buf);
   1ee48:	231f      	movs	r3, #31
   1ee4a:	f10d 0207 	add.w	r2, sp, #7
   1ee4e:	a902      	add	r1, sp, #8
   1ee50:	f003 fba6 	bl	225a0 <ble_hs_adv_set_fields>
    if (rc != 0) {
   1ee54:	b110      	cbz	r0, 1ee5c <ble_gap_adv_set_fields+0x18>
}
   1ee56:	b00b      	add	sp, #44	; 0x2c
   1ee58:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = ble_gap_adv_set_data(buf, buf_sz);
   1ee5c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1ee60:	a802      	add	r0, sp, #8
   1ee62:	f7ff ffcb 	bl	1edfc <ble_gap_adv_set_data>
    if (rc != 0) {
   1ee66:	e7f6      	b.n	1ee56 <ble_gap_adv_set_fields+0x12>

0001ee68 <ble_gap_adv_active>:
{
   1ee68:	b508      	push	{r3, lr}
    return ble_gap_adv_active_instance(0);
   1ee6a:	2000      	movs	r0, #0
   1ee6c:	f7ff fa6e 	bl	1e34c <ble_gap_adv_active_instance>
}
   1ee70:	bd08      	pop	{r3, pc}
	...

0001ee74 <ble_gap_rx_conn_complete>:
{
   1ee74:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ee76:	b091      	sub	sp, #68	; 0x44
    STATS_INC(ble_gap_stats, rx_conn_complete);
   1ee78:	4a6b      	ldr	r2, [pc, #428]	; (1f028 <ble_gap_rx_conn_complete+0x1b4>)
   1ee7a:	6f53      	ldr	r3, [r2, #116]	; 0x74
   1ee7c:	3301      	adds	r3, #1
   1ee7e:	6753      	str	r3, [r2, #116]	; 0x74
    if (evt->status != BLE_ERR_SUCCESS) {
   1ee80:	7803      	ldrb	r3, [r0, #0]
   1ee82:	b37b      	cbz	r3, 1eee4 <ble_gap_rx_conn_complete+0x70>
        switch (evt->status) {
   1ee84:	2b02      	cmp	r3, #2
   1ee86:	d00e      	beq.n	1eea6 <ble_gap_rx_conn_complete+0x32>
   1ee88:	2b3c      	cmp	r3, #60	; 0x3c
   1ee8a:	d11c      	bne.n	1eec6 <ble_gap_rx_conn_complete+0x52>
            if (ble_gap_adv_active()) {
   1ee8c:	f7ff ffec 	bl	1ee68 <ble_gap_adv_active>
   1ee90:	b910      	cbnz	r0, 1ee98 <ble_gap_rx_conn_complete+0x24>
        return 0;
   1ee92:	2000      	movs	r0, #0
}
   1ee94:	b011      	add	sp, #68	; 0x44
   1ee96:	bdf0      	pop	{r4, r5, r6, r7, pc}
                ble_gap_adv_finished(0, 0, 0, 0);
   1ee98:	2300      	movs	r3, #0
   1ee9a:	461a      	mov	r2, r3
   1ee9c:	4619      	mov	r1, r3
   1ee9e:	4618      	mov	r0, r3
   1eea0:	f7ff fca0 	bl	1e7e4 <ble_gap_adv_finished>
   1eea4:	e7f5      	b.n	1ee92 <ble_gap_rx_conn_complete+0x1e>
            if (ble_gap_master_in_progress()) {
   1eea6:	f7ff feb8 	bl	1ec1a <ble_gap_master_in_progress>
   1eeaa:	2800      	cmp	r0, #0
   1eeac:	d0f1      	beq.n	1ee92 <ble_gap_rx_conn_complete+0x1e>
                if (ble_gap_master.preempted_op == BLE_GAP_OP_M_CONN) {
   1eeae:	4b5f      	ldr	r3, [pc, #380]	; (1f02c <ble_gap_rx_conn_complete+0x1b8>)
   1eeb0:	f893 3020 	ldrb.w	r3, [r3, #32]
   1eeb4:	2b02      	cmp	r3, #2
   1eeb6:	d002      	beq.n	1eebe <ble_gap_rx_conn_complete+0x4a>
                    ble_gap_master_connect_cancelled();
   1eeb8:	f7ff fd0a 	bl	1e8d0 <ble_gap_master_connect_cancelled>
   1eebc:	e7e9      	b.n	1ee92 <ble_gap_rx_conn_complete+0x1e>
                    ble_gap_master_failed(BLE_HS_EPREEMPTED);
   1eebe:	201d      	movs	r0, #29
   1eec0:	f7ff fcf4 	bl	1e8ac <ble_gap_master_failed>
   1eec4:	e7e5      	b.n	1ee92 <ble_gap_rx_conn_complete+0x1e>
            BLE_HS_LOG(INFO, "controller reported invalid error code in conn"
   1eec6:	4a5a      	ldr	r2, [pc, #360]	; (1f030 <ble_gap_rx_conn_complete+0x1bc>)
   1eec8:	2101      	movs	r1, #1
   1eeca:	2004      	movs	r0, #4
   1eecc:	f7fa fc44 	bl	19758 <modlog_printf>
            assert(0);
   1eed0:	f7f5 fbc8 	bl	14664 <hal_debugger_connected>
   1eed4:	b100      	cbz	r0, 1eed8 <ble_gap_rx_conn_complete+0x64>
   1eed6:	be01      	bkpt	0x0001
   1eed8:	2300      	movs	r3, #0
   1eeda:	461a      	mov	r2, r3
   1eedc:	4619      	mov	r1, r3
   1eede:	4618      	mov	r0, r3
   1eee0:	f7f5 ff60 	bl	14da4 <__assert_func>
   1eee4:	4604      	mov	r4, r0
   1eee6:	460e      	mov	r6, r1
    if (ble_hs_atomic_conn_flags(evt->connection_handle, NULL) == 0) {
   1eee8:	2100      	movs	r1, #0
   1eeea:	8840      	ldrh	r0, [r0, #2]
   1eeec:	f003 fb75 	bl	225da <ble_hs_atomic_conn_flags>
   1eef0:	2800      	cmp	r0, #0
   1eef2:	d0cf      	beq.n	1ee94 <ble_gap_rx_conn_complete+0x20>
    switch (evt->role) {
   1eef4:	7923      	ldrb	r3, [r4, #4]
   1eef6:	2b00      	cmp	r3, #0
   1eef8:	d064      	beq.n	1efc4 <ble_gap_rx_conn_complete+0x150>
   1eefa:	2b01      	cmp	r3, #1
   1eefc:	d067      	beq.n	1efce <ble_gap_rx_conn_complete+0x15a>
    conn = ble_hs_conn_alloc(evt->connection_handle);
   1eefe:	8860      	ldrh	r0, [r4, #2]
   1ef00:	f003 fc0a 	bl	22718 <ble_hs_conn_alloc>
   1ef04:	4605      	mov	r5, r0
    conn->bhc_itvl = evt->conn_itvl;
   1ef06:	89a3      	ldrh	r3, [r4, #12]
   1ef08:	8383      	strh	r3, [r0, #28]
    conn->bhc_latency = evt->conn_latency;
   1ef0a:	89e3      	ldrh	r3, [r4, #14]
   1ef0c:	83c3      	strh	r3, [r0, #30]
    conn->bhc_supervision_timeout = evt->supervision_timeout;
   1ef0e:	8a23      	ldrh	r3, [r4, #16]
   1ef10:	8403      	strh	r3, [r0, #32]
    conn->bhc_master_clock_accuracy = evt->master_clk_acc;
   1ef12:	7ca3      	ldrb	r3, [r4, #18]
   1ef14:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    if (evt->role == BLE_HCI_LE_CONN_COMPLETE_ROLE_MASTER) {
   1ef18:	7923      	ldrb	r3, [r4, #4]
   1ef1a:	2b00      	cmp	r3, #0
   1ef1c:	d15d      	bne.n	1efda <ble_gap_rx_conn_complete+0x166>
        conn->bhc_cb = ble_gap_master.cb;
   1ef1e:	4b43      	ldr	r3, [pc, #268]	; (1f02c <ble_gap_rx_conn_complete+0x1b8>)
   1ef20:	699a      	ldr	r2, [r3, #24]
   1ef22:	65c2      	str	r2, [r0, #92]	; 0x5c
        conn->bhc_cb_arg = ble_gap_master.cb_arg;
   1ef24:	69da      	ldr	r2, [r3, #28]
   1ef26:	6602      	str	r2, [r0, #96]	; 0x60
        conn->bhc_flags |= BLE_HS_CONN_F_MASTER;
   1ef28:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
   1ef2c:	f042 0201 	orr.w	r2, r2, #1
   1ef30:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        conn->bhc_our_addr_type = ble_gap_master.conn.our_addr_type;
   1ef34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   1ef38:	f3c3 0341 	ubfx	r3, r3, #1, #2
   1ef3c:	7183      	strb	r3, [r0, #6]
        ble_gap_master_reset_state();
   1ef3e:	f7ff fc6d 	bl	1e81c <ble_gap_master_reset_state>
    conn->bhc_peer_addr.type = evt->peer_addr_type;
   1ef42:	7966      	ldrb	r6, [r4, #5]
   1ef44:	71ee      	strb	r6, [r5, #7]
    memcpy(conn->bhc_peer_addr.val, evt->peer_addr, 6);
   1ef46:	4623      	mov	r3, r4
   1ef48:	f853 2f06 	ldr.w	r2, [r3, #6]!
   1ef4c:	60aa      	str	r2, [r5, #8]
   1ef4e:	889b      	ldrh	r3, [r3, #4]
   1ef50:	81ab      	strh	r3, [r5, #12]
    conn->bhc_our_rpa_addr.type = BLE_ADDR_RANDOM;
   1ef52:	2301      	movs	r3, #1
   1ef54:	73ab      	strb	r3, [r5, #14]
    memcpy(conn->bhc_our_rpa_addr.val, evt->local_rpa, 6);
   1ef56:	4623      	mov	r3, r4
   1ef58:	f853 2f13 	ldr.w	r2, [r3, #19]!
   1ef5c:	f8c5 200f 	str.w	r2, [r5, #15]
   1ef60:	889b      	ldrh	r3, [r3, #4]
   1ef62:	f8a5 3013 	strh.w	r3, [r5, #19]
    if (memcmp(BLE_ADDR_ANY->val, evt->peer_rpa, 6) == 0) {
   1ef66:	2300      	movs	r3, #0
   1ef68:	930e      	str	r3, [sp, #56]	; 0x38
   1ef6a:	f8cd 303b 	str.w	r3, [sp, #59]	; 0x3b
   1ef6e:	f104 0719 	add.w	r7, r4, #25
   1ef72:	2206      	movs	r2, #6
   1ef74:	4639      	mov	r1, r7
   1ef76:	f10d 0039 	add.w	r0, sp, #57	; 0x39
   1ef7a:	f7f7 fd87 	bl	16a8c <memcmp>
   1ef7e:	2800      	cmp	r0, #0
   1ef80:	d14a      	bne.n	1f018 <ble_gap_rx_conn_complete+0x1a4>
        if (BLE_ADDR_IS_RPA(&conn->bhc_peer_addr)) {
   1ef82:	2e01      	cmp	r6, #1
   1ef84:	d038      	beq.n	1eff8 <ble_gap_rx_conn_complete+0x184>
    ble_hs_lock();
   1ef86:	f002 fdbd 	bl	21b04 <ble_hs_lock>
    memset(&event, 0, sizeof event);
   1ef8a:	2234      	movs	r2, #52	; 0x34
   1ef8c:	2100      	movs	r1, #0
   1ef8e:	a801      	add	r0, sp, #4
   1ef90:	f7f7 fdc5 	bl	16b1e <memset>
    ble_hs_conn_insert(conn);
   1ef94:	4628      	mov	r0, r5
   1ef96:	f003 fc1d 	bl	227d4 <ble_hs_conn_insert>
    ble_hs_unlock();
   1ef9a:	f002 fdb7 	bl	21b0c <ble_hs_unlock>
    event.type = BLE_GAP_EVENT_CONNECT;
   1ef9e:	2500      	movs	r5, #0
   1efa0:	f88d 5004 	strb.w	r5, [sp, #4]
    event.connect.conn_handle = evt->connection_handle;
   1efa4:	8863      	ldrh	r3, [r4, #2]
   1efa6:	f8ad 300c 	strh.w	r3, [sp, #12]
    event.connect.status = 0;
   1efaa:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
   1efac:	a801      	add	r0, sp, #4
   1efae:	f7ff fa69 	bl	1e484 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, evt->connection_handle);
   1efb2:	8861      	ldrh	r1, [r4, #2]
   1efb4:	a801      	add	r0, sp, #4
   1efb6:	f7ff fa8f 	bl	1e4d8 <ble_gap_call_conn_event_cb>
    ble_gap_rd_rem_sup_feat_tx(evt->connection_handle);
   1efba:	8860      	ldrh	r0, [r4, #2]
   1efbc:	f7ff fb09 	bl	1e5d2 <ble_gap_rd_rem_sup_feat_tx>
    return 0;
   1efc0:	4628      	mov	r0, r5
   1efc2:	e767      	b.n	1ee94 <ble_gap_rx_conn_complete+0x20>
        rc = ble_gap_accept_master_conn();
   1efc4:	f7ff f9cc 	bl	1e360 <ble_gap_accept_master_conn>
        if (rc != 0) {
   1efc8:	2800      	cmp	r0, #0
   1efca:	d098      	beq.n	1eefe <ble_gap_rx_conn_complete+0x8a>
   1efcc:	e762      	b.n	1ee94 <ble_gap_rx_conn_complete+0x20>
        rc = ble_gap_accept_slave_conn(instance);
   1efce:	4630      	mov	r0, r6
   1efd0:	f7ff f9d6 	bl	1e380 <ble_gap_accept_slave_conn>
        if (rc != 0) {
   1efd4:	2800      	cmp	r0, #0
   1efd6:	d092      	beq.n	1eefe <ble_gap_rx_conn_complete+0x8a>
   1efd8:	e75c      	b.n	1ee94 <ble_gap_rx_conn_complete+0x20>
        conn->bhc_cb = ble_gap_slave[instance].cb;
   1efda:	4b14      	ldr	r3, [pc, #80]	; (1f02c <ble_gap_rx_conn_complete+0x1b8>)
   1efdc:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   1efe0:	689a      	ldr	r2, [r3, #8]
   1efe2:	65c2      	str	r2, [r0, #92]	; 0x5c
        conn->bhc_cb_arg = ble_gap_slave[instance].cb_arg;
   1efe4:	68da      	ldr	r2, [r3, #12]
   1efe6:	6602      	str	r2, [r0, #96]	; 0x60
        conn->bhc_our_addr_type = ble_gap_slave[instance].our_addr_type;
   1efe8:	785b      	ldrb	r3, [r3, #1]
   1efea:	f3c3 0301 	ubfx	r3, r3, #0, #2
   1efee:	7183      	strb	r3, [r0, #6]
        ble_gap_slave_reset_state(instance);
   1eff0:	4630      	mov	r0, r6
   1eff2:	f7ff fbd1 	bl	1e798 <ble_gap_slave_reset_state>
   1eff6:	e7a4      	b.n	1ef42 <ble_gap_rx_conn_complete+0xce>
        if (BLE_ADDR_IS_RPA(&conn->bhc_peer_addr)) {
   1eff8:	7b6b      	ldrb	r3, [r5, #13]
   1effa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1effe:	2b40      	cmp	r3, #64	; 0x40
   1f000:	d1c1      	bne.n	1ef86 <ble_gap_rx_conn_complete+0x112>
            conn->bhc_peer_rpa_addr = conn->bhc_peer_addr;
   1f002:	462b      	mov	r3, r5
   1f004:	f853 2f07 	ldr.w	r2, [r3, #7]!
   1f008:	f8c5 2015 	str.w	r2, [r5, #21]
   1f00c:	889a      	ldrh	r2, [r3, #4]
   1f00e:	799b      	ldrb	r3, [r3, #6]
   1f010:	f8a5 2019 	strh.w	r2, [r5, #25]
   1f014:	76eb      	strb	r3, [r5, #27]
   1f016:	e7b6      	b.n	1ef86 <ble_gap_rx_conn_complete+0x112>
        conn->bhc_peer_rpa_addr.type = BLE_ADDR_RANDOM;
   1f018:	2301      	movs	r3, #1
   1f01a:	756b      	strb	r3, [r5, #21]
        memcpy(conn->bhc_peer_rpa_addr.val, evt->peer_rpa, 6);
   1f01c:	683b      	ldr	r3, [r7, #0]
   1f01e:	f8c5 3016 	str.w	r3, [r5, #22]
   1f022:	88bb      	ldrh	r3, [r7, #4]
   1f024:	836b      	strh	r3, [r5, #26]
   1f026:	e7ae      	b.n	1ef86 <ble_gap_rx_conn_complete+0x112>
   1f028:	100038ac 	.word	0x100038ac
   1f02c:	1000396c 	.word	0x1000396c
   1f030:	00030dc4 	.word	0x00030dc4

0001f034 <ble_gap_adv_stop_no_lock>:
{
   1f034:	b538      	push	{r3, r4, r5, lr}
    STATS_INC(ble_gap_stats, adv_stop);
   1f036:	4a0e      	ldr	r2, [pc, #56]	; (1f070 <ble_gap_adv_stop_no_lock+0x3c>)
   1f038:	6953      	ldr	r3, [r2, #20]
   1f03a:	3301      	adds	r3, #1
   1f03c:	6153      	str	r3, [r2, #20]
    active = ble_gap_adv_active();
   1f03e:	f7ff ff13 	bl	1ee68 <ble_gap_adv_active>
   1f042:	4604      	mov	r4, r0
    BLE_HS_LOG(INFO, "GAP procedure initiated: stop advertising.\n");
   1f044:	4a0b      	ldr	r2, [pc, #44]	; (1f074 <ble_gap_adv_stop_no_lock+0x40>)
   1f046:	2101      	movs	r1, #1
   1f048:	2004      	movs	r0, #4
   1f04a:	f7fa fb85 	bl	19758 <modlog_printf>
    rc = ble_gap_adv_enable_tx(0);
   1f04e:	2000      	movs	r0, #0
   1f050:	f7ff fadb 	bl	1e60a <ble_gap_adv_enable_tx>
    if (rc != 0) {
   1f054:	4605      	mov	r5, r0
   1f056:	b128      	cbz	r0, 1f064 <ble_gap_adv_stop_no_lock+0x30>
        STATS_INC(ble_gap_stats, adv_stop_fail);
   1f058:	4a05      	ldr	r2, [pc, #20]	; (1f070 <ble_gap_adv_stop_no_lock+0x3c>)
   1f05a:	6993      	ldr	r3, [r2, #24]
   1f05c:	3301      	adds	r3, #1
   1f05e:	6193      	str	r3, [r2, #24]
}
   1f060:	4628      	mov	r0, r5
   1f062:	bd38      	pop	{r3, r4, r5, pc}
    ble_gap_slave_reset_state(0);
   1f064:	f7ff fb98 	bl	1e798 <ble_gap_slave_reset_state>
    if (!active) {
   1f068:	2c00      	cmp	r4, #0
   1f06a:	d1f9      	bne.n	1f060 <ble_gap_adv_stop_no_lock+0x2c>
        rc = BLE_HS_EALREADY;
   1f06c:	2502      	movs	r5, #2
   1f06e:	e7f3      	b.n	1f058 <ble_gap_adv_stop_no_lock+0x24>
   1f070:	100038ac 	.word	0x100038ac
   1f074:	00030e08 	.word	0x00030e08

0001f078 <ble_gap_disc_active>:
}
   1f078:	2000      	movs	r0, #0
   1f07a:	4770      	bx	lr

0001f07c <ble_gap_conn_active>:
}
   1f07c:	2000      	movs	r0, #0
   1f07e:	4770      	bx	lr

0001f080 <ble_gap_conn_cancel_no_lock>:
{
   1f080:	b508      	push	{r3, lr}
    STATS_INC(ble_gap_stats, cancel);
   1f082:	4a0f      	ldr	r2, [pc, #60]	; (1f0c0 <ble_gap_conn_cancel_no_lock+0x40>)
   1f084:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1f086:	3301      	adds	r3, #1
   1f088:	64d3      	str	r3, [r2, #76]	; 0x4c
    if (!ble_gap_conn_active()) {
   1f08a:	f7ff fff7 	bl	1f07c <ble_gap_conn_active>
   1f08e:	b928      	cbnz	r0, 1f09c <ble_gap_conn_cancel_no_lock+0x1c>
        rc = BLE_HS_EALREADY;
   1f090:	2002      	movs	r0, #2
        STATS_INC(ble_gap_stats, cancel_fail);
   1f092:	4a0b      	ldr	r2, [pc, #44]	; (1f0c0 <ble_gap_conn_cancel_no_lock+0x40>)
   1f094:	6d13      	ldr	r3, [r2, #80]	; 0x50
   1f096:	3301      	adds	r3, #1
   1f098:	6513      	str	r3, [r2, #80]	; 0x50
}
   1f09a:	bd08      	pop	{r3, pc}
    BLE_HS_LOG(INFO, "GAP procedure initiated: cancel connection\n");
   1f09c:	4a09      	ldr	r2, [pc, #36]	; (1f0c4 <ble_gap_conn_cancel_no_lock+0x44>)
   1f09e:	2101      	movs	r1, #1
   1f0a0:	2004      	movs	r0, #4
   1f0a2:	f7fa fb59 	bl	19758 <modlog_printf>
    rc = ble_gap_conn_cancel_tx();
   1f0a6:	f7ff faa3 	bl	1e5f0 <ble_gap_conn_cancel_tx>
    if (rc != 0) {
   1f0aa:	2800      	cmp	r0, #0
   1f0ac:	d1f1      	bne.n	1f092 <ble_gap_conn_cancel_no_lock+0x12>
    ble_gap_master.conn.cancel = 1;
   1f0ae:	4a06      	ldr	r2, [pc, #24]	; (1f0c8 <ble_gap_conn_cancel_no_lock+0x48>)
   1f0b0:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
   1f0b4:	f043 0308 	orr.w	r3, r3, #8
   1f0b8:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
    if (rc != 0) {
   1f0bc:	e7ed      	b.n	1f09a <ble_gap_conn_cancel_no_lock+0x1a>
   1f0be:	bf00      	nop
   1f0c0:	100038ac 	.word	0x100038ac
   1f0c4:	00030e34 	.word	0x00030e34
   1f0c8:	1000396c 	.word	0x1000396c

0001f0cc <ble_gap_terminate_with_conn>:
    if (conn->bhc_flags & BLE_HS_CONN_F_TERMINATING) {
   1f0cc:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   1f0d0:	f013 0f02 	tst.w	r3, #2
   1f0d4:	d120      	bne.n	1f118 <ble_gap_terminate_with_conn+0x4c>
{
   1f0d6:	b530      	push	{r4, r5, lr}
   1f0d8:	b085      	sub	sp, #20
   1f0da:	4604      	mov	r4, r0
   1f0dc:	460d      	mov	r5, r1
    BLE_HS_LOG(INFO, "GAP procedure initiated: terminate connection; "
   1f0de:	9100      	str	r1, [sp, #0]
   1f0e0:	8883      	ldrh	r3, [r0, #4]
   1f0e2:	4a0e      	ldr	r2, [pc, #56]	; (1f11c <ble_gap_terminate_with_conn+0x50>)
   1f0e4:	2101      	movs	r1, #1
   1f0e6:	2004      	movs	r0, #4
   1f0e8:	f7fa fb36 	bl	19758 <modlog_printf>
    cmd.conn_handle = htole16(conn->bhc_handle);
   1f0ec:	88a3      	ldrh	r3, [r4, #4]
   1f0ee:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.reason = hci_reason;
   1f0f2:	f88d 500e 	strb.w	r5, [sp, #14]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LINK_CTRL,
   1f0f6:	2300      	movs	r3, #0
   1f0f8:	9300      	str	r3, [sp, #0]
   1f0fa:	2203      	movs	r2, #3
   1f0fc:	a903      	add	r1, sp, #12
   1f0fe:	f240 4006 	movw	r0, #1030	; 0x406
   1f102:	f003 feaf 	bl	22e64 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   1f106:	b928      	cbnz	r0, 1f114 <ble_gap_terminate_with_conn+0x48>
    conn->bhc_flags |= BLE_HS_CONN_F_TERMINATING;
   1f108:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1f10c:	f043 0302 	orr.w	r3, r3, #2
   1f110:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   1f114:	b005      	add	sp, #20
   1f116:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EALREADY;
   1f118:	2002      	movs	r0, #2
}
   1f11a:	4770      	bx	lr
   1f11c:	00030e60 	.word	0x00030e60

0001f120 <ble_gap_terminate>:
{
   1f120:	b538      	push	{r3, r4, r5, lr}
   1f122:	4604      	mov	r4, r0
   1f124:	460d      	mov	r5, r1
    STATS_INC(ble_gap_stats, terminate);
   1f126:	4a0d      	ldr	r2, [pc, #52]	; (1f15c <ble_gap_terminate+0x3c>)
   1f128:	6c53      	ldr	r3, [r2, #68]	; 0x44
   1f12a:	3301      	adds	r3, #1
   1f12c:	6453      	str	r3, [r2, #68]	; 0x44
    ble_hs_lock();
   1f12e:	f002 fce9 	bl	21b04 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1f132:	4620      	mov	r0, r4
   1f134:	f003 fb42 	bl	227bc <ble_hs_conn_find>
    if (conn == NULL) {
   1f138:	b160      	cbz	r0, 1f154 <ble_gap_terminate+0x34>
    rc = ble_gap_terminate_with_conn(conn, hci_reason);
   1f13a:	4629      	mov	r1, r5
   1f13c:	f7ff ffc6 	bl	1f0cc <ble_gap_terminate_with_conn>
   1f140:	4604      	mov	r4, r0
    ble_hs_unlock();
   1f142:	f002 fce3 	bl	21b0c <ble_hs_unlock>
    if (rc != 0) {
   1f146:	b11c      	cbz	r4, 1f150 <ble_gap_terminate+0x30>
        STATS_INC(ble_gap_stats, terminate_fail);
   1f148:	4a04      	ldr	r2, [pc, #16]	; (1f15c <ble_gap_terminate+0x3c>)
   1f14a:	6c93      	ldr	r3, [r2, #72]	; 0x48
   1f14c:	3301      	adds	r3, #1
   1f14e:	6493      	str	r3, [r2, #72]	; 0x48
}
   1f150:	4620      	mov	r0, r4
   1f152:	bd38      	pop	{r3, r4, r5, pc}
    ble_hs_unlock();
   1f154:	f002 fcda 	bl	21b0c <ble_hs_unlock>
        rc = BLE_HS_ENOTCONN;
   1f158:	2407      	movs	r4, #7
   1f15a:	e7f5      	b.n	1f148 <ble_gap_terminate+0x28>
   1f15c:	100038ac 	.word	0x100038ac

0001f160 <ble_gap_update_notify>:
{
   1f160:	b530      	push	{r4, r5, lr}
   1f162:	b08f      	sub	sp, #60	; 0x3c
   1f164:	4604      	mov	r4, r0
   1f166:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   1f168:	2234      	movs	r2, #52	; 0x34
   1f16a:	2100      	movs	r1, #0
   1f16c:	a801      	add	r0, sp, #4
   1f16e:	f7f7 fcd6 	bl	16b1e <memset>
    event.type = BLE_GAP_EVENT_CONN_UPDATE;
   1f172:	2303      	movs	r3, #3
   1f174:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update.conn_handle = conn_handle;
   1f178:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.conn_update.status = status;
   1f17c:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
   1f17e:	a801      	add	r0, sp, #4
   1f180:	f7ff f980 	bl	1e484 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1f184:	4621      	mov	r1, r4
   1f186:	a801      	add	r0, sp, #4
   1f188:	f7ff f9a6 	bl	1e4d8 <ble_gap_call_conn_event_cb>
    if (status == BLE_HS_ETIMEOUT) {
   1f18c:	2d0d      	cmp	r5, #13
   1f18e:	d001      	beq.n	1f194 <ble_gap_update_notify+0x34>
}
   1f190:	b00f      	add	sp, #60	; 0x3c
   1f192:	bd30      	pop	{r4, r5, pc}
        ble_gap_terminate(conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   1f194:	2113      	movs	r1, #19
   1f196:	4620      	mov	r0, r4
   1f198:	f7ff ffc2 	bl	1f120 <ble_gap_terminate>
}
   1f19c:	e7f8      	b.n	1f190 <ble_gap_update_notify+0x30>
	...

0001f1a0 <ble_gap_conn_broken>:
{
   1f1a0:	b570      	push	{r4, r5, r6, lr}
   1f1a2:	b090      	sub	sp, #64	; 0x40
   1f1a4:	4604      	mov	r4, r0
   1f1a6:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   1f1a8:	2234      	movs	r2, #52	; 0x34
   1f1aa:	2100      	movs	r1, #0
   1f1ac:	4668      	mov	r0, sp
   1f1ae:	f7f7 fcb6 	bl	16b1e <memset>
    snap.desc = &event.disconnect.conn;
   1f1b2:	ab02      	add	r3, sp, #8
   1f1b4:	930d      	str	r3, [sp, #52]	; 0x34
    rc = ble_gap_find_snapshot(conn_handle, &snap);
   1f1b6:	a90d      	add	r1, sp, #52	; 0x34
   1f1b8:	4620      	mov	r0, r4
   1f1ba:	f7ff f9f6 	bl	1e5aa <ble_gap_find_snapshot>
    if (rc != 0) {
   1f1be:	b108      	cbz	r0, 1f1c4 <ble_gap_conn_broken+0x24>
}
   1f1c0:	b010      	add	sp, #64	; 0x40
   1f1c2:	bd70      	pop	{r4, r5, r6, pc}
    ble_hs_lock();
   1f1c4:	f002 fc9e 	bl	21b04 <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   1f1c8:	4620      	mov	r0, r4
   1f1ca:	f7ff facd 	bl	1e768 <ble_gap_update_entry_remove>
   1f1ce:	4606      	mov	r6, r0
    ble_hs_unlock();
   1f1d0:	f002 fc9c 	bl	21b0c <ble_hs_unlock>
    if (entry != NULL) {
   1f1d4:	b136      	cbz	r6, 1f1e4 <ble_gap_conn_broken+0x44>
        ble_gap_update_notify(conn_handle, reason);
   1f1d6:	4629      	mov	r1, r5
   1f1d8:	4620      	mov	r0, r4
   1f1da:	f7ff ffc1 	bl	1f160 <ble_gap_update_notify>
        ble_gap_update_entry_free(entry);
   1f1de:	4630      	mov	r0, r6
   1f1e0:	f7ff fb9a 	bl	1e918 <ble_gap_update_entry_free>
    ble_l2cap_sig_conn_broken(conn_handle, reason);
   1f1e4:	4629      	mov	r1, r5
   1f1e6:	4620      	mov	r0, r4
   1f1e8:	f005 fa58 	bl	2469c <ble_l2cap_sig_conn_broken>
    ble_sm_connection_broken(conn_handle);
   1f1ec:	4620      	mov	r0, r4
   1f1ee:	f006 ff91 	bl	26114 <ble_sm_connection_broken>
    ble_gatts_connection_broken(conn_handle);
   1f1f2:	4620      	mov	r0, r4
   1f1f4:	f002 f928 	bl	21448 <ble_gatts_connection_broken>
    ble_gattc_connection_broken(conn_handle);
   1f1f8:	4620      	mov	r0, r4
   1f1fa:	f001 fb43 	bl	20884 <ble_gattc_connection_broken>
    ble_hs_flow_connection_broken(conn_handle);;
   1f1fe:	4620      	mov	r0, r4
   1f200:	f003 fc9c 	bl	22b3c <ble_hs_flow_connection_broken>
    ble_hs_atomic_conn_delete(conn_handle);
   1f204:	4620      	mov	r0, r4
   1f206:	f003 f9d3 	bl	225b0 <ble_hs_atomic_conn_delete>
    event.type = BLE_GAP_EVENT_DISCONNECT;
   1f20a:	2301      	movs	r3, #1
   1f20c:	f88d 3000 	strb.w	r3, [sp]
    event.disconnect.reason = reason;
   1f210:	9501      	str	r5, [sp, #4]
    ble_gap_event_listener_call(&event);
   1f212:	4668      	mov	r0, sp
   1f214:	f7ff f936 	bl	1e484 <ble_gap_event_listener_call>
    ble_gap_call_event_cb(&event, snap.cb, snap.cb_arg);
   1f218:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f21a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1f21c:	4668      	mov	r0, sp
   1f21e:	f7ff f85b 	bl	1e2d8 <ble_gap_call_event_cb>
    STATS_INC(ble_gap_stats, disconnect);
   1f222:	4a02      	ldr	r2, [pc, #8]	; (1f22c <ble_gap_conn_broken+0x8c>)
   1f224:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1f226:	3301      	adds	r3, #1
   1f228:	6653      	str	r3, [r2, #100]	; 0x64
   1f22a:	e7c9      	b.n	1f1c0 <ble_gap_conn_broken+0x20>
   1f22c:	100038ac 	.word	0x100038ac

0001f230 <ble_gap_rx_disconn_complete>:
{
   1f230:	b570      	push	{r4, r5, r6, lr}
   1f232:	b08e      	sub	sp, #56	; 0x38
   1f234:	4604      	mov	r4, r0
    uint16_t handle = le16toh(ev->conn_handle);
   1f236:	f8b0 5001 	ldrh.w	r5, [r0, #1]
   1f23a:	b2ae      	uxth	r6, r5
    STATS_INC(ble_gap_stats, rx_disconnect);
   1f23c:	4a14      	ldr	r2, [pc, #80]	; (1f290 <ble_gap_rx_disconn_complete+0x60>)
   1f23e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1f240:	3301      	adds	r3, #1
   1f242:	6693      	str	r3, [r2, #104]	; 0x68
    if (ev->status == 0) {
   1f244:	7803      	ldrb	r3, [r0, #0]
   1f246:	b953      	cbnz	r3, 1f25e <ble_gap_rx_disconn_complete+0x2e>
        ble_gap_conn_broken(handle, BLE_HS_HCI_ERR(ev->reason));
   1f248:	78c1      	ldrb	r1, [r0, #3]
   1f24a:	b111      	cbz	r1, 1f252 <ble_gap_rx_disconn_complete+0x22>
   1f24c:	f501 7100 	add.w	r1, r1, #512	; 0x200
   1f250:	e000      	b.n	1f254 <ble_gap_rx_disconn_complete+0x24>
   1f252:	2100      	movs	r1, #0
   1f254:	4630      	mov	r0, r6
   1f256:	f7ff ffa3 	bl	1f1a0 <ble_gap_conn_broken>
}
   1f25a:	b00e      	add	sp, #56	; 0x38
   1f25c:	bd70      	pop	{r4, r5, r6, pc}
        memset(&event, 0, sizeof event);
   1f25e:	2234      	movs	r2, #52	; 0x34
   1f260:	2100      	movs	r1, #0
   1f262:	a801      	add	r0, sp, #4
   1f264:	f7f7 fc5b 	bl	16b1e <memset>
        event.type = BLE_GAP_EVENT_TERM_FAILURE;
   1f268:	2306      	movs	r3, #6
   1f26a:	f88d 3004 	strb.w	r3, [sp, #4]
        event.term_failure.conn_handle = handle;
   1f26e:	f8ad 500c 	strh.w	r5, [sp, #12]
        event.term_failure.status = BLE_HS_HCI_ERR(ev->status);
   1f272:	7823      	ldrb	r3, [r4, #0]
   1f274:	b153      	cbz	r3, 1f28c <ble_gap_rx_disconn_complete+0x5c>
   1f276:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1f27a:	9302      	str	r3, [sp, #8]
        ble_gap_event_listener_call(&event);
   1f27c:	a801      	add	r0, sp, #4
   1f27e:	f7ff f901 	bl	1e484 <ble_gap_event_listener_call>
        ble_gap_call_conn_event_cb(&event, handle);
   1f282:	4631      	mov	r1, r6
   1f284:	a801      	add	r0, sp, #4
   1f286:	f7ff f927 	bl	1e4d8 <ble_gap_call_conn_event_cb>
}
   1f28a:	e7e6      	b.n	1f25a <ble_gap_rx_disconn_complete+0x2a>
        event.term_failure.status = BLE_HS_HCI_ERR(ev->status);
   1f28c:	2300      	movs	r3, #0
   1f28e:	e7f4      	b.n	1f27a <ble_gap_rx_disconn_complete+0x4a>
   1f290:	100038ac 	.word	0x100038ac

0001f294 <ble_gap_reset_state>:
{
   1f294:	b510      	push	{r4, lr}
   1f296:	4604      	mov	r4, r0
        conn_handle = ble_hs_atomic_first_conn_handle();
   1f298:	f003 f9b5 	bl	22606 <ble_hs_atomic_first_conn_handle>
        if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   1f29c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f2a0:	4298      	cmp	r0, r3
   1f2a2:	d003      	beq.n	1f2ac <ble_gap_reset_state+0x18>
        ble_gap_conn_broken(conn_handle, reason);
   1f2a4:	4621      	mov	r1, r4
   1f2a6:	f7ff ff7b 	bl	1f1a0 <ble_gap_conn_broken>
        conn_handle = ble_hs_atomic_first_conn_handle();
   1f2aa:	e7f5      	b.n	1f298 <ble_gap_reset_state+0x4>
    if (ble_gap_adv_active_instance(0)) {
   1f2ac:	2000      	movs	r0, #0
   1f2ae:	f7ff f84d 	bl	1e34c <ble_gap_adv_active_instance>
   1f2b2:	b918      	cbnz	r0, 1f2bc <ble_gap_reset_state+0x28>
    ble_gap_master_failed(reason);
   1f2b4:	4620      	mov	r0, r4
   1f2b6:	f7ff faf9 	bl	1e8ac <ble_gap_master_failed>
}
   1f2ba:	bd10      	pop	{r4, pc}
        ble_gap_adv_finished(0, reason, 0, 0);
   1f2bc:	2300      	movs	r3, #0
   1f2be:	461a      	mov	r2, r3
   1f2c0:	4621      	mov	r1, r4
   1f2c2:	4618      	mov	r0, r3
   1f2c4:	f7ff fa8e 	bl	1e7e4 <ble_gap_adv_finished>
   1f2c8:	e7f4      	b.n	1f2b4 <ble_gap_reset_state+0x20>
	...

0001f2cc <ble_gap_rx_update_complete>:
{
   1f2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f2ce:	b091      	sub	sp, #68	; 0x44
   1f2d0:	4604      	mov	r4, r0
    STATS_INC(ble_gap_stats, rx_update_complete);
   1f2d2:	4a2c      	ldr	r2, [pc, #176]	; (1f384 <ble_gap_rx_update_complete+0xb8>)
   1f2d4:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1f2d6:	3301      	adds	r3, #1
   1f2d8:	66d3      	str	r3, [r2, #108]	; 0x6c
    memset(&event, 0, sizeof event);
   1f2da:	2234      	movs	r2, #52	; 0x34
   1f2dc:	2100      	movs	r1, #0
   1f2de:	a801      	add	r0, sp, #4
   1f2e0:	f7f7 fc1d 	bl	16b1e <memset>
    memset(&l2cap_params, 0, sizeof l2cap_params);
   1f2e4:	2300      	movs	r3, #0
   1f2e6:	930e      	str	r3, [sp, #56]	; 0x38
   1f2e8:	930f      	str	r3, [sp, #60]	; 0x3c
    ble_hs_lock();
   1f2ea:	f002 fc0b 	bl	21b04 <ble_hs_lock>
    conn_handle = le16toh(ev->conn_handle);
   1f2ee:	8865      	ldrh	r5, [r4, #2]
    conn = ble_hs_conn_find(conn_handle);
   1f2f0:	4628      	mov	r0, r5
   1f2f2:	f003 fa63 	bl	227bc <ble_hs_conn_find>
    if (conn != NULL) {
   1f2f6:	b120      	cbz	r0, 1f302 <ble_gap_rx_update_complete+0x36>
   1f2f8:	4606      	mov	r6, r0
        switch (ev->status) {
   1f2fa:	7863      	ldrb	r3, [r4, #1]
   1f2fc:	b193      	cbz	r3, 1f324 <ble_gap_rx_update_complete+0x58>
   1f2fe:	2b1a      	cmp	r3, #26
   1f300:	d017      	beq.n	1f332 <ble_gap_rx_update_complete+0x66>
    if (l2cap_params.itvl_min == 0) {
   1f302:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1f306:	b353      	cbz	r3, 1f35e <ble_gap_rx_update_complete+0x92>
    ble_hs_unlock();
   1f308:	f002 fc00 	bl	21b0c <ble_hs_unlock>
    if (l2cap_params.itvl_min != 0) {
   1f30c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1f310:	bb5b      	cbnz	r3, 1f36a <ble_gap_rx_update_complete+0x9e>
        cb_status = BLE_HS_HCI_ERR(ev->status);
   1f312:	7861      	ldrb	r1, [r4, #1]
   1f314:	b399      	cbz	r1, 1f37e <ble_gap_rx_update_complete+0xb2>
   1f316:	f501 7100 	add.w	r1, r1, #512	; 0x200
        ble_gap_update_notify(conn_handle, cb_status);
   1f31a:	4628      	mov	r0, r5
   1f31c:	f7ff ff20 	bl	1f160 <ble_gap_update_notify>
}
   1f320:	b011      	add	sp, #68	; 0x44
   1f322:	bdf0      	pop	{r4, r5, r6, r7, pc}
            conn->bhc_itvl = le16toh(ev->conn_itvl);
   1f324:	88a3      	ldrh	r3, [r4, #4]
   1f326:	8383      	strh	r3, [r0, #28]
            conn->bhc_latency = le16toh(ev->conn_latency);
   1f328:	88e3      	ldrh	r3, [r4, #6]
   1f32a:	83c3      	strh	r3, [r0, #30]
            conn->bhc_supervision_timeout = le16toh(ev->supervision_timeout);
   1f32c:	8923      	ldrh	r3, [r4, #8]
   1f32e:	8403      	strh	r3, [r0, #32]
            break;
   1f330:	e7e7      	b.n	1f302 <ble_gap_rx_update_complete+0x36>
            entry = ble_gap_update_entry_find(conn_handle, NULL);
   1f332:	2100      	movs	r1, #0
   1f334:	4628      	mov	r0, r5
   1f336:	f7ff f86f 	bl	1e418 <ble_gap_update_entry_find>
            if (entry != NULL && !(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
   1f33a:	4607      	mov	r7, r0
   1f33c:	2800      	cmp	r0, #0
   1f33e:	d0e0      	beq.n	1f302 <ble_gap_rx_update_complete+0x36>
   1f340:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
   1f344:	f013 0f01 	tst.w	r3, #1
   1f348:	d1db      	bne.n	1f302 <ble_gap_rx_update_complete+0x36>
                ble_gap_update_to_l2cap(&entry->params, &l2cap_params);
   1f34a:	a90e      	add	r1, sp, #56	; 0x38
   1f34c:	3004      	adds	r0, #4
   1f34e:	f7fe fff3 	bl	1e338 <ble_gap_update_to_l2cap>
    return os_time_get();
   1f352:	f7f7 f925 	bl	165a0 <os_time_get>
                entry->exp_os_ticks = ble_npl_time_get() +
   1f356:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
   1f35a:	6138      	str	r0, [r7, #16]
   1f35c:	e7d1      	b.n	1f302 <ble_gap_rx_update_complete+0x36>
        entry = ble_gap_update_entry_remove(conn_handle);
   1f35e:	4628      	mov	r0, r5
   1f360:	f7ff fa02 	bl	1e768 <ble_gap_update_entry_remove>
        ble_gap_update_entry_free(entry);
   1f364:	f7ff fad8 	bl	1e918 <ble_gap_update_entry_free>
   1f368:	e7ce      	b.n	1f308 <ble_gap_rx_update_complete+0x3c>
        rc = ble_l2cap_sig_update(conn_handle, &l2cap_params,
   1f36a:	2300      	movs	r3, #0
   1f36c:	4a06      	ldr	r2, [pc, #24]	; (1f388 <ble_gap_rx_update_complete+0xbc>)
   1f36e:	a90e      	add	r1, sp, #56	; 0x38
   1f370:	4628      	mov	r0, r5
   1f372:	f005 f927 	bl	245c4 <ble_l2cap_sig_update>
        if (rc == 0) {
   1f376:	4601      	mov	r1, r0
   1f378:	2800      	cmp	r0, #0
   1f37a:	d0d1      	beq.n	1f320 <ble_gap_rx_update_complete+0x54>
   1f37c:	e7cd      	b.n	1f31a <ble_gap_rx_update_complete+0x4e>
        cb_status = BLE_HS_HCI_ERR(ev->status);
   1f37e:	2100      	movs	r1, #0
   1f380:	e7cb      	b.n	1f31a <ble_gap_rx_update_complete+0x4e>
   1f382:	bf00      	nop
   1f384:	100038ac 	.word	0x100038ac
   1f388:	0001f38d 	.word	0x0001f38d

0001f38c <ble_gap_update_l2cap_cb>:
{
   1f38c:	b570      	push	{r4, r5, r6, lr}
   1f38e:	4605      	mov	r5, r0
   1f390:	460e      	mov	r6, r1
    ble_hs_lock();
   1f392:	f002 fbb7 	bl	21b04 <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   1f396:	4628      	mov	r0, r5
   1f398:	f7ff f9e6 	bl	1e768 <ble_gap_update_entry_remove>
   1f39c:	4604      	mov	r4, r0
    ble_hs_unlock();
   1f39e:	f002 fbb5 	bl	21b0c <ble_hs_unlock>
    if (entry != NULL) {
   1f3a2:	b11c      	cbz	r4, 1f3ac <ble_gap_update_l2cap_cb+0x20>
        ble_gap_update_entry_free(entry);
   1f3a4:	4620      	mov	r0, r4
   1f3a6:	f7ff fab7 	bl	1e918 <ble_gap_update_entry_free>
        if (status != 0) {
   1f3aa:	b906      	cbnz	r6, 1f3ae <ble_gap_update_l2cap_cb+0x22>
}
   1f3ac:	bd70      	pop	{r4, r5, r6, pc}
            ble_gap_update_notify(conn_handle, status);
   1f3ae:	4631      	mov	r1, r6
   1f3b0:	4628      	mov	r0, r5
   1f3b2:	f7ff fed5 	bl	1f160 <ble_gap_update_notify>
}
   1f3b6:	e7f9      	b.n	1f3ac <ble_gap_update_l2cap_cb+0x20>

0001f3b8 <ble_gap_update_failed>:
{
   1f3b8:	b570      	push	{r4, r5, r6, lr}
   1f3ba:	4604      	mov	r4, r0
   1f3bc:	460d      	mov	r5, r1
    STATS_INC(ble_gap_stats, update_fail);
   1f3be:	4a0a      	ldr	r2, [pc, #40]	; (1f3e8 <ble_gap_update_failed+0x30>)
   1f3c0:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1f3c2:	3301      	adds	r3, #1
   1f3c4:	6593      	str	r3, [r2, #88]	; 0x58
    ble_hs_lock();
   1f3c6:	f002 fb9d 	bl	21b04 <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   1f3ca:	4620      	mov	r0, r4
   1f3cc:	f7ff f9cc 	bl	1e768 <ble_gap_update_entry_remove>
   1f3d0:	4606      	mov	r6, r0
    ble_hs_unlock();
   1f3d2:	f002 fb9b 	bl	21b0c <ble_hs_unlock>
    ble_gap_update_entry_free(entry);
   1f3d6:	4630      	mov	r0, r6
   1f3d8:	f7ff fa9e 	bl	1e918 <ble_gap_update_entry_free>
    ble_gap_update_notify(conn_handle, status);
   1f3dc:	4629      	mov	r1, r5
   1f3de:	4620      	mov	r0, r4
   1f3e0:	f7ff febe 	bl	1f160 <ble_gap_update_notify>
}
   1f3e4:	bd70      	pop	{r4, r5, r6, pc}
   1f3e6:	bf00      	nop
   1f3e8:	100038ac 	.word	0x100038ac

0001f3ec <ble_gap_rx_param_req>:
{
   1f3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f3f0:	b094      	sub	sp, #80	; 0x50
   1f3f2:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   1f3f4:	f04f 0834 	mov.w	r8, #52	; 0x34
   1f3f8:	4642      	mov	r2, r8
   1f3fa:	2100      	movs	r1, #0
   1f3fc:	a801      	add	r0, sp, #4
   1f3fe:	f7f7 fb8e 	bl	16b1e <memset>
    peer_params.itvl_min = le16toh(ev->min_interval);
   1f402:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   1f406:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    peer_params.itvl_max = le16toh(ev->max_interval);
   1f40a:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   1f40e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    peer_params.latency = le16toh(ev->latency);
   1f412:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   1f416:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
    peer_params.supervision_timeout = le16toh(ev->timeout);
   1f41a:	f8b4 3009 	ldrh.w	r3, [r4, #9]
   1f41e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    peer_params.min_ce_len = 0;
   1f422:	2300      	movs	r3, #0
   1f424:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    peer_params.max_ce_len = 0;
   1f428:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    self_params = peer_params;
   1f42c:	ae0e      	add	r6, sp, #56	; 0x38
   1f42e:	ad11      	add	r5, sp, #68	; 0x44
   1f430:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   1f434:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    conn_handle = le16toh(ev->conn_handle);
   1f438:	f8b4 7001 	ldrh.w	r7, [r4, #1]
   1f43c:	b2bc      	uxth	r4, r7
    memset(&event, 0, sizeof event);
   1f43e:	4642      	mov	r2, r8
   1f440:	4619      	mov	r1, r3
   1f442:	a801      	add	r0, sp, #4
   1f444:	f7f7 fb6b 	bl	16b1e <memset>
    event.type = BLE_GAP_EVENT_CONN_UPDATE_REQ;
   1f448:	2304      	movs	r3, #4
   1f44a:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update_req.conn_handle = conn_handle;
   1f44e:	f8ad 7010 	strh.w	r7, [sp, #16]
    event.conn_update_req.self_params = &self_params;
   1f452:	9603      	str	r6, [sp, #12]
    event.conn_update_req.peer_params = &peer_params;
   1f454:	9502      	str	r5, [sp, #8]
    rc = ble_gap_call_conn_event_cb(&event, conn_handle);
   1f456:	4621      	mov	r1, r4
   1f458:	eb0d 0003 	add.w	r0, sp, r3
   1f45c:	f7ff f83c 	bl	1e4d8 <ble_gap_call_conn_event_cb>
    if (rc == 0) {
   1f460:	b948      	cbnz	r0, 1f476 <ble_gap_rx_param_req+0x8a>
        rc = ble_gap_tx_param_pos_reply(conn_handle, &self_params);
   1f462:	a90e      	add	r1, sp, #56	; 0x38
   1f464:	4620      	mov	r0, r4
   1f466:	f7ff f92c 	bl	1e6c2 <ble_gap_tx_param_pos_reply>
        if (rc != 0) {
   1f46a:	4601      	mov	r1, r0
   1f46c:	b138      	cbz	r0, 1f47e <ble_gap_rx_param_req+0x92>
            ble_gap_update_failed(conn_handle, rc);
   1f46e:	4620      	mov	r0, r4
   1f470:	f7ff ffa2 	bl	1f3b8 <ble_gap_update_failed>
   1f474:	e003      	b.n	1f47e <ble_gap_rx_param_req+0x92>
        ble_gap_tx_param_neg_reply(conn_handle, rc);
   1f476:	b2c1      	uxtb	r1, r0
   1f478:	4620      	mov	r0, r4
   1f47a:	f7ff f943 	bl	1e704 <ble_gap_tx_param_neg_reply>
}
   1f47e:	b014      	add	sp, #80	; 0x50
   1f480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f484 <ble_gap_update_params>:
{
   1f484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f488:	b082      	sub	sp, #8
   1f48a:	4607      	mov	r7, r0
   1f48c:	460c      	mov	r4, r1
    if (!ble_gap_validate_conn_params(params)) {
   1f48e:	4608      	mov	r0, r1
   1f490:	f7fe ffd4 	bl	1e43c <ble_gap_validate_conn_params>
   1f494:	2800      	cmp	r0, #0
   1f496:	d07e      	beq.n	1f596 <ble_gap_update_params+0x112>
    STATS_INC(ble_gap_stats, update);
   1f498:	4a40      	ldr	r2, [pc, #256]	; (1f59c <ble_gap_update_params+0x118>)
   1f49a:	6d53      	ldr	r3, [r2, #84]	; 0x54
   1f49c:	3301      	adds	r3, #1
   1f49e:	6553      	str	r3, [r2, #84]	; 0x54
    memset(&l2cap_params, 0, sizeof l2cap_params);
   1f4a0:	2300      	movs	r3, #0
   1f4a2:	9300      	str	r3, [sp, #0]
   1f4a4:	9301      	str	r3, [sp, #4]
    ble_hs_lock();
   1f4a6:	f002 fb2d 	bl	21b04 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1f4aa:	4638      	mov	r0, r7
   1f4ac:	f003 f986 	bl	227bc <ble_hs_conn_find>
    if (conn == NULL) {
   1f4b0:	4606      	mov	r6, r0
   1f4b2:	2800      	cmp	r0, #0
   1f4b4:	d04d      	beq.n	1f552 <ble_gap_update_params+0xce>
    dup = ble_gap_update_entry_find(conn_handle, NULL);
   1f4b6:	2100      	movs	r1, #0
   1f4b8:	4638      	mov	r0, r7
   1f4ba:	f7fe ffad 	bl	1e418 <ble_gap_update_entry_find>
    if (dup != NULL) {
   1f4be:	b1c0      	cbz	r0, 1f4f2 <ble_gap_update_params+0x6e>
        rc = BLE_HS_EALREADY;
   1f4c0:	2502      	movs	r5, #2
    l2cap_update = 0;
   1f4c2:	f04f 0800 	mov.w	r8, #0
    entry = NULL;
   1f4c6:	4646      	mov	r6, r8
    ble_hs_unlock();
   1f4c8:	f002 fb20 	bl	21b0c <ble_hs_unlock>
    if (!l2cap_update) {
   1f4cc:	f1b8 0f00 	cmp.w	r8, #0
   1f4d0:	d14d      	bne.n	1f56e <ble_gap_update_params+0xea>
        ble_hs_timer_resched();
   1f4d2:	f002 fc09 	bl	21ce8 <ble_hs_timer_resched>
    ble_hs_lock();
   1f4d6:	f002 fb15 	bl	21b04 <ble_hs_lock>
    if (rc == 0) {
   1f4da:	2d00      	cmp	r5, #0
   1f4dc:	d153      	bne.n	1f586 <ble_gap_update_params+0x102>
        SLIST_INSERT_HEAD(&ble_gap_update_entries, entry, next);
   1f4de:	4b30      	ldr	r3, [pc, #192]	; (1f5a0 <ble_gap_update_params+0x11c>)
   1f4e0:	681a      	ldr	r2, [r3, #0]
   1f4e2:	6032      	str	r2, [r6, #0]
   1f4e4:	601e      	str	r6, [r3, #0]
    ble_hs_unlock();
   1f4e6:	f002 fb11 	bl	21b0c <ble_hs_unlock>
}
   1f4ea:	4628      	mov	r0, r5
   1f4ec:	b002      	add	sp, #8
   1f4ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    entry = ble_gap_update_entry_alloc();
   1f4f2:	f7ff fb6b 	bl	1ebcc <ble_gap_update_entry_alloc>
    if (entry == NULL) {
   1f4f6:	4680      	mov	r8, r0
   1f4f8:	b378      	cbz	r0, 1f55a <ble_gap_update_params+0xd6>
    entry->conn_handle = conn_handle;
   1f4fa:	8287      	strh	r7, [r0, #20]
    entry->params = *params;
   1f4fc:	1d03      	adds	r3, r0, #4
   1f4fe:	6820      	ldr	r0, [r4, #0]
   1f500:	6861      	ldr	r1, [r4, #4]
   1f502:	68a2      	ldr	r2, [r4, #8]
   1f504:	c307      	stmia	r3!, {r0, r1, r2}
   1f506:	f7f7 f84b 	bl	165a0 <os_time_get>
    entry->exp_os_ticks = ble_npl_time_get() +
   1f50a:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
   1f50e:	f8c8 0010 	str.w	r0, [r8, #16]
    BLE_HS_LOG(INFO, "GAP procedure initiated: ");
   1f512:	4a24      	ldr	r2, [pc, #144]	; (1f5a4 <ble_gap_update_params+0x120>)
   1f514:	2101      	movs	r1, #1
   1f516:	2004      	movs	r0, #4
   1f518:	f7fa f91e 	bl	19758 <modlog_printf>
    ble_gap_log_update(conn_handle, params);
   1f51c:	4621      	mov	r1, r4
   1f51e:	4638      	mov	r0, r7
   1f520:	f7ff fad4 	bl	1eacc <ble_gap_log_update>
    BLE_HS_LOG(INFO, "\n");
   1f524:	4a20      	ldr	r2, [pc, #128]	; (1f5a8 <ble_gap_update_params+0x124>)
   1f526:	2101      	movs	r1, #1
   1f528:	2004      	movs	r0, #4
   1f52a:	f7fa f915 	bl	19758 <modlog_printf>
    if ((conn->supported_feat & BLE_HS_HCI_LE_FEAT_CONN_PARAM_REQUEST) == 0 &&
   1f52e:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1f530:	f013 0f02 	tst.w	r3, #2
   1f534:	d104      	bne.n	1f540 <ble_gap_update_params+0xbc>
            !(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
   1f536:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    if ((conn->supported_feat & BLE_HS_HCI_LE_FEAT_CONN_PARAM_REQUEST) == 0 &&
   1f53a:	f013 0f01 	tst.w	r3, #1
   1f53e:	d011      	beq.n	1f564 <ble_gap_update_params+0xe0>
        rc = ble_gap_update_tx(conn_handle, params);
   1f540:	4621      	mov	r1, r4
   1f542:	4638      	mov	r0, r7
   1f544:	f7ff f8ef 	bl	1e726 <ble_gap_update_tx>
   1f548:	4605      	mov	r5, r0
    entry = ble_gap_update_entry_alloc();
   1f54a:	4646      	mov	r6, r8
    l2cap_update = 0;
   1f54c:	f04f 0800 	mov.w	r8, #0
   1f550:	e7ba      	b.n	1f4c8 <ble_gap_update_params+0x44>
        rc = BLE_HS_ENOTCONN;
   1f552:	2507      	movs	r5, #7
    l2cap_update = 0;
   1f554:	f04f 0800 	mov.w	r8, #0
   1f558:	e7b6      	b.n	1f4c8 <ble_gap_update_params+0x44>
    entry = ble_gap_update_entry_alloc();
   1f55a:	4606      	mov	r6, r0
        rc = BLE_HS_ENOMEM;
   1f55c:	2506      	movs	r5, #6
    l2cap_update = 0;
   1f55e:	f04f 0800 	mov.w	r8, #0
   1f562:	e7b1      	b.n	1f4c8 <ble_gap_update_params+0x44>
    entry = ble_gap_update_entry_alloc();
   1f564:	4646      	mov	r6, r8
        rc = 0;
   1f566:	2500      	movs	r5, #0
        l2cap_update = 1;
   1f568:	f04f 0801 	mov.w	r8, #1
   1f56c:	e7ac      	b.n	1f4c8 <ble_gap_update_params+0x44>
        ble_gap_update_to_l2cap(params, &l2cap_params);
   1f56e:	4669      	mov	r1, sp
   1f570:	4620      	mov	r0, r4
   1f572:	f7fe fee1 	bl	1e338 <ble_gap_update_to_l2cap>
        rc = ble_l2cap_sig_update(conn_handle, &l2cap_params,
   1f576:	2300      	movs	r3, #0
   1f578:	4a0c      	ldr	r2, [pc, #48]	; (1f5ac <ble_gap_update_params+0x128>)
   1f57a:	4669      	mov	r1, sp
   1f57c:	4638      	mov	r0, r7
   1f57e:	f005 f821 	bl	245c4 <ble_l2cap_sig_update>
   1f582:	4605      	mov	r5, r0
   1f584:	e7a7      	b.n	1f4d6 <ble_gap_update_params+0x52>
        ble_gap_update_entry_free(entry);
   1f586:	4630      	mov	r0, r6
   1f588:	f7ff f9c6 	bl	1e918 <ble_gap_update_entry_free>
        STATS_INC(ble_gap_stats, update_fail);
   1f58c:	4a03      	ldr	r2, [pc, #12]	; (1f59c <ble_gap_update_params+0x118>)
   1f58e:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1f590:	3301      	adds	r3, #1
   1f592:	6593      	str	r3, [r2, #88]	; 0x58
   1f594:	e7a7      	b.n	1f4e6 <ble_gap_update_params+0x62>
        return BLE_HS_EINVAL;
   1f596:	2503      	movs	r5, #3
   1f598:	e7a7      	b.n	1f4ea <ble_gap_update_params+0x66>
   1f59a:	bf00      	nop
   1f59c:	100038ac 	.word	0x100038ac
   1f5a0:	10003934 	.word	0x10003934
   1f5a4:	00030eb0 	.word	0x00030eb0
   1f5a8:	000311a4 	.word	0x000311a4
   1f5ac:	0001f38d 	.word	0x0001f38d

0001f5b0 <ble_gap_unpair>:
{
   1f5b0:	b510      	push	{r4, lr}
   1f5b2:	b082      	sub	sp, #8
   1f5b4:	4604      	mov	r4, r0
    if (ble_addr_cmp(peer_addr, BLE_ADDR_ANY) == 0) {
   1f5b6:	2300      	movs	r3, #0
   1f5b8:	9300      	str	r3, [sp, #0]
   1f5ba:	f8cd 3003 	str.w	r3, [sp, #3]

static inline int ble_addr_cmp(const ble_addr_t *a, const ble_addr_t *b)
{
    int type_diff;

    type_diff = a->type - b->type;
   1f5be:	7800      	ldrb	r0, [r0, #0]
    if (type_diff != 0) {
   1f5c0:	b928      	cbnz	r0, 1f5ce <ble_gap_unpair+0x1e>
        return type_diff;
    }

    return memcmp(a->val, b->val, sizeof(a->val));
   1f5c2:	2206      	movs	r2, #6
   1f5c4:	f10d 0101 	add.w	r1, sp, #1
   1f5c8:	1c60      	adds	r0, r4, #1
   1f5ca:	f7f7 fa5f 	bl	16a8c <memcmp>
   1f5ce:	b1a0      	cbz	r0, 1f5fa <ble_gap_unpair+0x4a>
    ble_hs_lock();
   1f5d0:	f002 fa98 	bl	21b04 <ble_hs_lock>
    conn = ble_hs_conn_find_by_addr(peer_addr);
   1f5d4:	4620      	mov	r0, r4
   1f5d6:	f003 f995 	bl	22904 <ble_hs_conn_find_by_addr>
    if (conn != NULL) {
   1f5da:	b110      	cbz	r0, 1f5e2 <ble_gap_unpair+0x32>
        ble_gap_terminate_with_conn(conn, BLE_ERR_REM_USER_CONN_TERM);
   1f5dc:	2113      	movs	r1, #19
   1f5de:	f7ff fd75 	bl	1f0cc <ble_gap_terminate_with_conn>
    ble_hs_unlock();
   1f5e2:	f002 fa93 	bl	21b0c <ble_hs_unlock>
                             peer_addr->val);
   1f5e6:	4621      	mov	r1, r4
    ble_hs_pvcy_remove_entry(peer_addr->type,
   1f5e8:	f811 0b01 	ldrb.w	r0, [r1], #1
   1f5ec:	f004 fa69 	bl	23ac2 <ble_hs_pvcy_remove_entry>
    return ble_store_util_delete_peer(peer_addr);
   1f5f0:	4620      	mov	r0, r4
   1f5f2:	f007 f8c0 	bl	26776 <ble_store_util_delete_peer>
}
   1f5f6:	b002      	add	sp, #8
   1f5f8:	bd10      	pop	{r4, pc}
        return BLE_HS_EINVAL;
   1f5fa:	2003      	movs	r0, #3
   1f5fc:	e7fb      	b.n	1f5f6 <ble_gap_unpair+0x46>

0001f5fe <ble_gap_unpair_oldest_peer>:
{
   1f5fe:	b500      	push	{lr}
   1f600:	b085      	sub	sp, #20
    rc = ble_store_util_bonded_peers(
   1f602:	2201      	movs	r2, #1
   1f604:	a901      	add	r1, sp, #4
   1f606:	a802      	add	r0, sp, #8
   1f608:	f007 f88e 	bl	26728 <ble_store_util_bonded_peers>
    if (rc != 0) {
   1f60c:	b920      	cbnz	r0, 1f618 <ble_gap_unpair_oldest_peer+0x1a>
    if (num_peers == 0) {
   1f60e:	9b01      	ldr	r3, [sp, #4]
   1f610:	b12b      	cbz	r3, 1f61e <ble_gap_unpair_oldest_peer+0x20>
    rc = ble_gap_unpair(&oldest_peer_id_addr);
   1f612:	a802      	add	r0, sp, #8
   1f614:	f7ff ffcc 	bl	1f5b0 <ble_gap_unpair>
}
   1f618:	b005      	add	sp, #20
   1f61a:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_ENOENT;
   1f61e:	2005      	movs	r0, #5
   1f620:	e7fa      	b.n	1f618 <ble_gap_unpair_oldest_peer+0x1a>

0001f622 <ble_gap_unpair_oldest_except>:
{
   1f622:	b570      	push	{r4, r5, r6, lr}
   1f624:	b088      	sub	sp, #32
   1f626:	4605      	mov	r5, r0
    rc = ble_store_util_bonded_peers(
   1f628:	2203      	movs	r2, #3
   1f62a:	a901      	add	r1, sp, #4
   1f62c:	a802      	add	r0, sp, #8
   1f62e:	f007 f87b 	bl	26728 <ble_store_util_bonded_peers>
    if (rc != 0) {
   1f632:	4604      	mov	r4, r0
   1f634:	bb18      	cbnz	r0, 1f67e <ble_gap_unpair_oldest_except+0x5c>
    if (num_peers == 0) {
   1f636:	9e01      	ldr	r6, [sp, #4]
   1f638:	b966      	cbnz	r6, 1f654 <ble_gap_unpair_oldest_except+0x32>
        return BLE_HS_ENOENT;
   1f63a:	2405      	movs	r4, #5
   1f63c:	e01f      	b.n	1f67e <ble_gap_unpair_oldest_except+0x5c>
   1f63e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1f642:	ab02      	add	r3, sp, #8
   1f644:	4419      	add	r1, r3
   1f646:	2206      	movs	r2, #6
   1f648:	3101      	adds	r1, #1
   1f64a:	1c68      	adds	r0, r5, #1
   1f64c:	f7f7 fa1e 	bl	16a8c <memcmp>
        if (ble_addr_cmp(peer_addr, &peer_id_addrs[i]) != 0) {
   1f650:	b960      	cbnz	r0, 1f66c <ble_gap_unpair_oldest_except+0x4a>
    for (i = 0; i < num_peers; i++) {
   1f652:	3401      	adds	r4, #1
   1f654:	42a6      	cmp	r6, r4
   1f656:	dd09      	ble.n	1f66c <ble_gap_unpair_oldest_except+0x4a>
    type_diff = a->type - b->type;
   1f658:	782b      	ldrb	r3, [r5, #0]
   1f65a:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   1f65e:	a908      	add	r1, sp, #32
   1f660:	440a      	add	r2, r1
   1f662:	f812 0c18 	ldrb.w	r0, [r2, #-24]
    if (type_diff != 0) {
   1f666:	1a18      	subs	r0, r3, r0
   1f668:	d0e9      	beq.n	1f63e <ble_gap_unpair_oldest_except+0x1c>
   1f66a:	e7f1      	b.n	1f650 <ble_gap_unpair_oldest_except+0x2e>
    if (i >= num_peers) {
   1f66c:	42a6      	cmp	r6, r4
   1f66e:	dd09      	ble.n	1f684 <ble_gap_unpair_oldest_except+0x62>
    return ble_gap_unpair(&peer_id_addrs[i]);
   1f670:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1f674:	ab02      	add	r3, sp, #8
   1f676:	1918      	adds	r0, r3, r4
   1f678:	f7ff ff9a 	bl	1f5b0 <ble_gap_unpair>
   1f67c:	4604      	mov	r4, r0
}
   1f67e:	4620      	mov	r0, r4
   1f680:	b008      	add	sp, #32
   1f682:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ENOMEM;
   1f684:	2406      	movs	r4, #6
   1f686:	e7fa      	b.n	1f67e <ble_gap_unpair_oldest_except+0x5c>

0001f688 <ble_gap_passkey_event>:
{
   1f688:	b530      	push	{r4, r5, lr}
   1f68a:	b08f      	sub	sp, #60	; 0x3c
   1f68c:	4604      	mov	r4, r0
   1f68e:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   1f690:	2234      	movs	r2, #52	; 0x34
   1f692:	2100      	movs	r1, #0
   1f694:	a801      	add	r0, sp, #4
   1f696:	f7f7 fa42 	bl	16b1e <memset>
    event.type = BLE_GAP_EVENT_PASSKEY_ACTION;
   1f69a:	230b      	movs	r3, #11
   1f69c:	f88d 3004 	strb.w	r3, [sp, #4]
    event.passkey.conn_handle = conn_handle;
   1f6a0:	f8ad 4010 	strh.w	r4, [sp, #16]
    event.passkey.params = *passkey_params;
   1f6a4:	ab02      	add	r3, sp, #8
   1f6a6:	e895 0003 	ldmia.w	r5, {r0, r1}
   1f6aa:	e883 0003 	stmia.w	r3, {r0, r1}
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1f6ae:	4621      	mov	r1, r4
   1f6b0:	a801      	add	r0, sp, #4
   1f6b2:	f7fe ff11 	bl	1e4d8 <ble_gap_call_conn_event_cb>
}
   1f6b6:	b00f      	add	sp, #60	; 0x3c
   1f6b8:	bd30      	pop	{r4, r5, pc}

0001f6ba <ble_gap_enc_event>:
{
   1f6ba:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f6bc:	b08f      	sub	sp, #60	; 0x3c
   1f6be:	4604      	mov	r4, r0
   1f6c0:	460d      	mov	r5, r1
   1f6c2:	4616      	mov	r6, r2
   1f6c4:	461f      	mov	r7, r3
    memset(&event, 0, sizeof event);
   1f6c6:	2234      	movs	r2, #52	; 0x34
   1f6c8:	2100      	movs	r1, #0
   1f6ca:	a801      	add	r0, sp, #4
   1f6cc:	f7f7 fa27 	bl	16b1e <memset>
    event.type = BLE_GAP_EVENT_ENC_CHANGE;
   1f6d0:	230a      	movs	r3, #10
   1f6d2:	f88d 3004 	strb.w	r3, [sp, #4]
    event.enc_change.conn_handle = conn_handle;
   1f6d6:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.enc_change.status = status;
   1f6da:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
   1f6dc:	a801      	add	r0, sp, #4
   1f6de:	f7fe fed1 	bl	1e484 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1f6e2:	4621      	mov	r1, r4
   1f6e4:	a801      	add	r0, sp, #4
   1f6e6:	f7fe fef7 	bl	1e4d8 <ble_gap_call_conn_event_cb>
    if (status != 0) {
   1f6ea:	b90d      	cbnz	r5, 1f6f0 <ble_gap_enc_event+0x36>
    if (security_restored) {
   1f6ec:	b916      	cbnz	r6, 1f6f4 <ble_gap_enc_event+0x3a>
    if (bonded) {
   1f6ee:	b92f      	cbnz	r7, 1f6fc <ble_gap_enc_event+0x42>
}
   1f6f0:	b00f      	add	sp, #60	; 0x3c
   1f6f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ble_gatts_bonding_restored(conn_handle);
   1f6f4:	4620      	mov	r0, r4
   1f6f6:	f002 f895 	bl	21824 <ble_gatts_bonding_restored>
        return;
   1f6fa:	e7f9      	b.n	1f6f0 <ble_gap_enc_event+0x36>
        ble_gatts_bonding_established(conn_handle);
   1f6fc:	4620      	mov	r0, r4
   1f6fe:	f002 f851 	bl	217a4 <ble_gatts_bonding_established>
   1f702:	e7f5      	b.n	1f6f0 <ble_gap_enc_event+0x36>

0001f704 <ble_gap_identity_event>:
{
   1f704:	b510      	push	{r4, lr}
   1f706:	b08e      	sub	sp, #56	; 0x38
   1f708:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   1f70a:	2234      	movs	r2, #52	; 0x34
   1f70c:	2100      	movs	r1, #0
   1f70e:	a801      	add	r0, sp, #4
   1f710:	f7f7 fa05 	bl	16b1e <memset>
    event.type = BLE_GAP_EVENT_IDENTITY_RESOLVED;
   1f714:	2310      	movs	r3, #16
   1f716:	f88d 3004 	strb.w	r3, [sp, #4]
    event.identity_resolved.conn_handle = conn_handle;
   1f71a:	f8ad 4008 	strh.w	r4, [sp, #8]
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1f71e:	4621      	mov	r1, r4
   1f720:	a801      	add	r0, sp, #4
   1f722:	f7fe fed9 	bl	1e4d8 <ble_gap_call_conn_event_cb>
}
   1f726:	b00e      	add	sp, #56	; 0x38
   1f728:	bd10      	pop	{r4, pc}

0001f72a <ble_gap_repeat_pairing_event>:
{
   1f72a:	b510      	push	{r4, lr}
   1f72c:	b08e      	sub	sp, #56	; 0x38
   1f72e:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   1f730:	2234      	movs	r2, #52	; 0x34
   1f732:	2100      	movs	r1, #0
   1f734:	a801      	add	r0, sp, #4
   1f736:	f7f7 f9f2 	bl	16b1e <memset>
    event.type = BLE_GAP_EVENT_REPEAT_PAIRING;
   1f73a:	2311      	movs	r3, #17
   1f73c:	f88d 3004 	strb.w	r3, [sp, #4]
    event.repeat_pairing = *rp;
   1f740:	6820      	ldr	r0, [r4, #0]
   1f742:	9002      	str	r0, [sp, #8]
   1f744:	88a3      	ldrh	r3, [r4, #4]
   1f746:	f8ad 300c 	strh.w	r3, [sp, #12]
    rc = ble_gap_call_conn_event_cb(&event, rp->conn_handle);
   1f74a:	8821      	ldrh	r1, [r4, #0]
   1f74c:	a801      	add	r0, sp, #4
   1f74e:	f7fe fec3 	bl	1e4d8 <ble_gap_call_conn_event_cb>
}
   1f752:	b00e      	add	sp, #56	; 0x38
   1f754:	bd10      	pop	{r4, pc}

0001f756 <ble_gap_notify_rx_event>:
{
   1f756:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f758:	b08f      	sub	sp, #60	; 0x3c
   1f75a:	4604      	mov	r4, r0
   1f75c:	460f      	mov	r7, r1
   1f75e:	4616      	mov	r6, r2
   1f760:	461d      	mov	r5, r3
    memset(&event, 0, sizeof event);
   1f762:	2234      	movs	r2, #52	; 0x34
   1f764:	2100      	movs	r1, #0
   1f766:	a801      	add	r0, sp, #4
   1f768:	f7f7 f9d9 	bl	16b1e <memset>
    event.type = BLE_GAP_EVENT_NOTIFY_RX;
   1f76c:	230c      	movs	r3, #12
   1f76e:	f88d 3004 	strb.w	r3, [sp, #4]
    event.notify_rx.conn_handle = conn_handle;
   1f772:	f8ad 400e 	strh.w	r4, [sp, #14]
    event.notify_rx.attr_handle = attr_handle;
   1f776:	f8ad 700c 	strh.w	r7, [sp, #12]
    event.notify_rx.om = om;
   1f77a:	9602      	str	r6, [sp, #8]
    event.notify_rx.indication = is_indication;
   1f77c:	f04f 0300 	mov.w	r3, #0
   1f780:	f365 0300 	bfi	r3, r5, #0, #1
   1f784:	f88d 3010 	strb.w	r3, [sp, #16]
    ble_gap_event_listener_call(&event);
   1f788:	a801      	add	r0, sp, #4
   1f78a:	f7fe fe7b 	bl	1e484 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1f78e:	4621      	mov	r1, r4
   1f790:	a801      	add	r0, sp, #4
   1f792:	f7fe fea1 	bl	1e4d8 <ble_gap_call_conn_event_cb>
    os_mbuf_free_chain(event.notify_rx.om);
   1f796:	9802      	ldr	r0, [sp, #8]
   1f798:	f7f5 ff6c 	bl	15674 <os_mbuf_free_chain>
}
   1f79c:	b00f      	add	sp, #60	; 0x3c
   1f79e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f7a0 <ble_gap_notify_tx_event>:
{
   1f7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f7a2:	b08f      	sub	sp, #60	; 0x3c
   1f7a4:	4607      	mov	r7, r0
   1f7a6:	460c      	mov	r4, r1
   1f7a8:	4616      	mov	r6, r2
   1f7aa:	461d      	mov	r5, r3
    memset(&event, 0, sizeof event);
   1f7ac:	2234      	movs	r2, #52	; 0x34
   1f7ae:	2100      	movs	r1, #0
   1f7b0:	a801      	add	r0, sp, #4
   1f7b2:	f7f7 f9b4 	bl	16b1e <memset>
    event.type = BLE_GAP_EVENT_NOTIFY_TX;
   1f7b6:	230d      	movs	r3, #13
   1f7b8:	f88d 3004 	strb.w	r3, [sp, #4]
    event.notify_tx.conn_handle = conn_handle;
   1f7bc:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.notify_tx.status = status;
   1f7c0:	9702      	str	r7, [sp, #8]
    event.notify_tx.attr_handle = attr_handle;
   1f7c2:	f8ad 600e 	strh.w	r6, [sp, #14]
    event.notify_tx.indication = is_indication;
   1f7c6:	f04f 0300 	mov.w	r3, #0
   1f7ca:	f365 0300 	bfi	r3, r5, #0, #1
   1f7ce:	f88d 3010 	strb.w	r3, [sp, #16]
    ble_gap_event_listener_call(&event);
   1f7d2:	a801      	add	r0, sp, #4
   1f7d4:	f7fe fe56 	bl	1e484 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1f7d8:	4621      	mov	r1, r4
   1f7da:	a801      	add	r0, sp, #4
   1f7dc:	f7fe fe7c 	bl	1e4d8 <ble_gap_call_conn_event_cb>
}
   1f7e0:	b00f      	add	sp, #60	; 0x3c
   1f7e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f7e4 <ble_gap_subscribe_event>:
{
   1f7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f7e6:	b08f      	sub	sp, #60	; 0x3c
   1f7e8:	4605      	mov	r5, r0
   1f7ea:	460f      	mov	r7, r1
   1f7ec:	4616      	mov	r6, r2
   1f7ee:	461c      	mov	r4, r3
    memset(&event, 0, sizeof event);
   1f7f0:	2234      	movs	r2, #52	; 0x34
   1f7f2:	2100      	movs	r1, #0
   1f7f4:	a801      	add	r0, sp, #4
   1f7f6:	f7f7 f992 	bl	16b1e <memset>
    event.type = BLE_GAP_EVENT_SUBSCRIBE;
   1f7fa:	230e      	movs	r3, #14
   1f7fc:	f88d 3004 	strb.w	r3, [sp, #4]
    event.subscribe.conn_handle = conn_handle;
   1f800:	f8ad 5008 	strh.w	r5, [sp, #8]
    event.subscribe.attr_handle = attr_handle;
   1f804:	f8ad 700a 	strh.w	r7, [sp, #10]
    event.subscribe.reason = reason;
   1f808:	f88d 600c 	strb.w	r6, [sp, #12]
    event.subscribe.cur_notify = !!cur_notify;
   1f80c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
   1f810:	3a00      	subs	r2, #0
   1f812:	bf18      	it	ne
   1f814:	2201      	movne	r2, #1
   1f816:	1e23      	subs	r3, r4, #0
   1f818:	bf18      	it	ne
   1f81a:	2301      	movne	r3, #1
   1f81c:	f362 0341 	bfi	r3, r2, #1, #1
    event.subscribe.prev_indicate = !!prev_indicate;
   1f820:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
   1f824:	3a00      	subs	r2, #0
   1f826:	bf18      	it	ne
   1f828:	2201      	movne	r2, #1
   1f82a:	f362 0382 	bfi	r3, r2, #2, #1
    event.subscribe.cur_indicate = !!cur_indicate;
   1f82e:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   1f832:	3a00      	subs	r2, #0
   1f834:	bf18      	it	ne
   1f836:	2201      	movne	r2, #1
   1f838:	f362 03c3 	bfi	r3, r2, #3, #1
   1f83c:	f88d 300d 	strb.w	r3, [sp, #13]
    ble_gap_event_listener_call(&event);
   1f840:	a801      	add	r0, sp, #4
   1f842:	f7fe fe1f 	bl	1e484 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1f846:	4629      	mov	r1, r5
   1f848:	a801      	add	r0, sp, #4
   1f84a:	f7fe fe45 	bl	1e4d8 <ble_gap_call_conn_event_cb>
}
   1f84e:	b00f      	add	sp, #60	; 0x3c
   1f850:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f852 <ble_gap_mtu_event>:
{
   1f852:	b570      	push	{r4, r5, r6, lr}
   1f854:	b08e      	sub	sp, #56	; 0x38
   1f856:	4604      	mov	r4, r0
   1f858:	460e      	mov	r6, r1
   1f85a:	4615      	mov	r5, r2
    memset(&event, 0, sizeof event);
   1f85c:	2234      	movs	r2, #52	; 0x34
   1f85e:	2100      	movs	r1, #0
   1f860:	a801      	add	r0, sp, #4
   1f862:	f7f7 f95c 	bl	16b1e <memset>
    event.type = BLE_GAP_EVENT_MTU;
   1f866:	230f      	movs	r3, #15
   1f868:	f88d 3004 	strb.w	r3, [sp, #4]
    event.mtu.conn_handle = conn_handle;
   1f86c:	f8ad 4008 	strh.w	r4, [sp, #8]
    event.mtu.channel_id = cid;
   1f870:	f8ad 600a 	strh.w	r6, [sp, #10]
    event.mtu.value = mtu;
   1f874:	f8ad 500c 	strh.w	r5, [sp, #12]
    ble_gap_event_listener_call(&event);
   1f878:	a801      	add	r0, sp, #4
   1f87a:	f7fe fe03 	bl	1e484 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1f87e:	4621      	mov	r1, r4
   1f880:	a801      	add	r0, sp, #4
   1f882:	f7fe fe29 	bl	1e4d8 <ble_gap_call_conn_event_cb>
}
   1f886:	b00e      	add	sp, #56	; 0x38
   1f888:	bd70      	pop	{r4, r5, r6, pc}
	...

0001f88c <ble_gap_preempt_no_lock>:
{
   1f88c:	b508      	push	{r3, lr}
    rc = ble_gap_adv_stop_no_lock();
   1f88e:	f7ff fbd1 	bl	1f034 <ble_gap_adv_stop_no_lock>
    if (rc == 0) {
   1f892:	b920      	cbnz	r0, 1f89e <ble_gap_preempt_no_lock+0x12>
        ble_gap_slave[0].preempted = 1;
   1f894:	4a06      	ldr	r2, [pc, #24]	; (1f8b0 <ble_gap_preempt_no_lock+0x24>)
   1f896:	7853      	ldrb	r3, [r2, #1]
   1f898:	f043 0304 	orr.w	r3, r3, #4
   1f89c:	7053      	strb	r3, [r2, #1]
    rc = ble_gap_conn_cancel_no_lock();
   1f89e:	f7ff fbef 	bl	1f080 <ble_gap_conn_cancel_no_lock>
    if (rc == 0) {
   1f8a2:	b918      	cbnz	r0, 1f8ac <ble_gap_preempt_no_lock+0x20>
        ble_gap_master.preempted_op = BLE_GAP_OP_M_CONN;
   1f8a4:	4b02      	ldr	r3, [pc, #8]	; (1f8b0 <ble_gap_preempt_no_lock+0x24>)
   1f8a6:	2202      	movs	r2, #2
   1f8a8:	f883 2020 	strb.w	r2, [r3, #32]
}
   1f8ac:	bd08      	pop	{r3, pc}
   1f8ae:	bf00      	nop
   1f8b0:	1000396c 	.word	0x1000396c

0001f8b4 <ble_gap_preempt>:
{
   1f8b4:	b508      	push	{r3, lr}
    ble_hs_lock();
   1f8b6:	f002 f925 	bl	21b04 <ble_hs_lock>
    if (!ble_gap_is_preempted()) {
   1f8ba:	f7fe fd23 	bl	1e304 <ble_gap_is_preempted>
   1f8be:	b110      	cbz	r0, 1f8c6 <ble_gap_preempt+0x12>
    ble_hs_unlock();
   1f8c0:	f002 f924 	bl	21b0c <ble_hs_unlock>
}
   1f8c4:	bd08      	pop	{r3, pc}
        ble_gap_preempt_no_lock();
   1f8c6:	f7ff ffe1 	bl	1f88c <ble_gap_preempt_no_lock>
   1f8ca:	e7f9      	b.n	1f8c0 <ble_gap_preempt+0xc>

0001f8cc <ble_gap_preempt_done>:
{
   1f8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f8ce:	b08f      	sub	sp, #60	; 0x3c
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   1f8d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f8d4:	482c      	ldr	r0, [pc, #176]	; (1f988 <ble_gap_preempt_done+0xbc>)
   1f8d6:	f7f7 f861 	bl	1699c <os_mutex_pend>
    memset(slaves, 0, sizeof(slaves));
   1f8da:	4b2c      	ldr	r3, [pc, #176]	; (1f98c <ble_gap_preempt_done+0xc0>)
   1f8dc:	2400      	movs	r4, #0
   1f8de:	601c      	str	r4, [r3, #0]
   1f8e0:	605c      	str	r4, [r3, #4]
    ble_hs_lock();
   1f8e2:	f002 f90f 	bl	21b04 <ble_hs_lock>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1f8e6:	4623      	mov	r3, r4
   1f8e8:	2b00      	cmp	r3, #0
   1f8ea:	dd15      	ble.n	1f918 <ble_gap_preempt_done+0x4c>
    if (ble_gap_master.preempted_op == BLE_GAP_OP_M_DISC) {
   1f8ec:	4b28      	ldr	r3, [pc, #160]	; (1f990 <ble_gap_preempt_done+0xc4>)
   1f8ee:	f893 3020 	ldrb.w	r3, [r3, #32]
   1f8f2:	2b01      	cmp	r3, #1
   1f8f4:	d028      	beq.n	1f948 <ble_gap_preempt_done+0x7c>
    disc_preempted = 0;
   1f8f6:	2700      	movs	r7, #0
    ble_hs_unlock();
   1f8f8:	f002 f908 	bl	21b0c <ble_hs_unlock>
    event.type = BLE_GAP_EVENT_ADV_COMPLETE;
   1f8fc:	2309      	movs	r3, #9
   1f8fe:	f88d 3004 	strb.w	r3, [sp, #4]
    event.adv_complete.reason = BLE_HS_EPREEMPTED;
   1f902:	231d      	movs	r3, #29
   1f904:	9302      	str	r3, [sp, #8]
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1f906:	2400      	movs	r4, #0
   1f908:	2c00      	cmp	r4, #0
   1f90a:	dd25      	ble.n	1f958 <ble_gap_preempt_done+0x8c>
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   1f90c:	481e      	ldr	r0, [pc, #120]	; (1f988 <ble_gap_preempt_done+0xbc>)
   1f90e:	f7f6 ffe5 	bl	168dc <os_mutex_release>
    if (disc_preempted) {
   1f912:	bb6f      	cbnz	r7, 1f970 <ble_gap_preempt_done+0xa4>
}
   1f914:	b00f      	add	sp, #60	; 0x3c
   1f916:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (ble_gap_slave[i].preempted) {
   1f918:	4a1d      	ldr	r2, [pc, #116]	; (1f990 <ble_gap_preempt_done+0xc4>)
   1f91a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1f91e:	7852      	ldrb	r2, [r2, #1]
   1f920:	f012 0f04 	tst.w	r2, #4
   1f924:	d00e      	beq.n	1f944 <ble_gap_preempt_done+0x78>
            ble_gap_slave[i].preempted = 0;
   1f926:	4a1a      	ldr	r2, [pc, #104]	; (1f990 <ble_gap_preempt_done+0xc4>)
   1f928:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1f92c:	7851      	ldrb	r1, [r2, #1]
   1f92e:	f36f 0182 	bfc	r1, #2, #1
   1f932:	7051      	strb	r1, [r2, #1]
            slaves[i].cb = ble_gap_slave[i].cb;
   1f934:	6890      	ldr	r0, [r2, #8]
   1f936:	4915      	ldr	r1, [pc, #84]	; (1f98c <ble_gap_preempt_done+0xc0>)
   1f938:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
            slaves[i].arg = ble_gap_slave[i].cb_arg;
   1f93c:	68d2      	ldr	r2, [r2, #12]
   1f93e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1f942:	604a      	str	r2, [r1, #4]
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1f944:	3301      	adds	r3, #1
   1f946:	e7cf      	b.n	1f8e8 <ble_gap_preempt_done+0x1c>
        ble_gap_master.preempted_op = BLE_GAP_OP_NULL;
   1f948:	4b11      	ldr	r3, [pc, #68]	; (1f990 <ble_gap_preempt_done+0xc4>)
   1f94a:	2200      	movs	r2, #0
   1f94c:	f883 2020 	strb.w	r2, [r3, #32]
        master_cb = ble_gap_master.cb;
   1f950:	699d      	ldr	r5, [r3, #24]
        master_arg = ble_gap_master.cb_arg;
   1f952:	69de      	ldr	r6, [r3, #28]
        disc_preempted = 1;
   1f954:	2701      	movs	r7, #1
   1f956:	e7cf      	b.n	1f8f8 <ble_gap_preempt_done+0x2c>
        if (slaves[i].cb) {
   1f958:	4b0c      	ldr	r3, [pc, #48]	; (1f98c <ble_gap_preempt_done+0xc0>)
   1f95a:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   1f95e:	b129      	cbz	r1, 1f96c <ble_gap_preempt_done+0xa0>
            ble_gap_call_event_cb(&event, slaves[i].cb, slaves[i].arg);
   1f960:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1f964:	685a      	ldr	r2, [r3, #4]
   1f966:	a801      	add	r0, sp, #4
   1f968:	f7fe fcb6 	bl	1e2d8 <ble_gap_call_event_cb>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1f96c:	3401      	adds	r4, #1
   1f96e:	e7cb      	b.n	1f908 <ble_gap_preempt_done+0x3c>
        event.type = BLE_GAP_EVENT_DISC_COMPLETE;
   1f970:	2308      	movs	r3, #8
   1f972:	f88d 3004 	strb.w	r3, [sp, #4]
        event.disc_complete.reason = BLE_HS_EPREEMPTED;
   1f976:	231d      	movs	r3, #29
   1f978:	9302      	str	r3, [sp, #8]
        ble_gap_call_event_cb(&event, master_cb, master_arg);
   1f97a:	4632      	mov	r2, r6
   1f97c:	4629      	mov	r1, r5
   1f97e:	a801      	add	r0, sp, #4
   1f980:	f7fe fcaa 	bl	1e2d8 <ble_gap_call_event_cb>
}
   1f984:	e7c6      	b.n	1f914 <ble_gap_preempt_done+0x48>
   1f986:	bf00      	nop
   1f988:	10003990 	.word	0x10003990
   1f98c:	1000399c 	.word	0x1000399c
   1f990:	1000396c 	.word	0x1000396c

0001f994 <ble_gap_event_listener_unregister>:
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   1f994:	4b0c      	ldr	r3, [pc, #48]	; (1f9c8 <ble_gap_event_listener_unregister+0x34>)
   1f996:	681a      	ldr	r2, [r3, #0]
   1f998:	4613      	mov	r3, r2
   1f99a:	b11b      	cbz	r3, 1f9a4 <ble_gap_event_listener_unregister+0x10>
        if (evl == listener) {
   1f99c:	4283      	cmp	r3, r0
   1f99e:	d001      	beq.n	1f9a4 <ble_gap_event_listener_unregister+0x10>
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   1f9a0:	689b      	ldr	r3, [r3, #8]
   1f9a2:	e7fa      	b.n	1f99a <ble_gap_event_listener_unregister+0x6>
    if (!evl) {
   1f9a4:	b173      	cbz	r3, 1f9c4 <ble_gap_event_listener_unregister+0x30>
        SLIST_REMOVE(&ble_gap_event_listener_list, listener,
   1f9a6:	4282      	cmp	r2, r0
   1f9a8:	d007      	beq.n	1f9ba <ble_gap_event_listener_unregister+0x26>
   1f9aa:	4613      	mov	r3, r2
   1f9ac:	6892      	ldr	r2, [r2, #8]
   1f9ae:	4282      	cmp	r2, r0
   1f9b0:	d1fb      	bne.n	1f9aa <ble_gap_event_listener_unregister+0x16>
   1f9b2:	6892      	ldr	r2, [r2, #8]
   1f9b4:	609a      	str	r2, [r3, #8]
        rc = 0;
   1f9b6:	2000      	movs	r0, #0
   1f9b8:	4770      	bx	lr
        SLIST_REMOVE(&ble_gap_event_listener_list, listener,
   1f9ba:	6892      	ldr	r2, [r2, #8]
   1f9bc:	4b02      	ldr	r3, [pc, #8]	; (1f9c8 <ble_gap_event_listener_unregister+0x34>)
   1f9be:	601a      	str	r2, [r3, #0]
        rc = 0;
   1f9c0:	2000      	movs	r0, #0
   1f9c2:	4770      	bx	lr
        rc = BLE_HS_ENOENT;
   1f9c4:	2005      	movs	r0, #5
}
   1f9c6:	4770      	bx	lr
   1f9c8:	100038a8 	.word	0x100038a8

0001f9cc <ble_gap_init>:
 * $init                                                                     *
 *****************************************************************************/

int
ble_gap_init(void)
{
   1f9cc:	b510      	push	{r4, lr}
   1f9ce:	b082      	sub	sp, #8
    int rc;

    memset(&ble_gap_master, 0, sizeof(ble_gap_master));
   1f9d0:	4b15      	ldr	r3, [pc, #84]	; (1fa28 <ble_gap_init+0x5c>)
   1f9d2:	2400      	movs	r4, #0
   1f9d4:	611c      	str	r4, [r3, #16]
   1f9d6:	615c      	str	r4, [r3, #20]
   1f9d8:	619c      	str	r4, [r3, #24]
   1f9da:	61dc      	str	r4, [r3, #28]
   1f9dc:	621c      	str	r4, [r3, #32]
    memset(ble_gap_slave, 0, sizeof(ble_gap_slave));
   1f9de:	601c      	str	r4, [r3, #0]
   1f9e0:	605c      	str	r4, [r3, #4]
   1f9e2:	609c      	str	r4, [r3, #8]
   1f9e4:	60dc      	str	r4, [r3, #12]
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   1f9e6:	4811      	ldr	r0, [pc, #68]	; (1fa2c <ble_gap_init+0x60>)
   1f9e8:	f7f6 ff6e 	bl	168c8 <os_mutex_init>
    memset(&ble_gap_sync, 0, sizeof(ble_gap_sync));
#endif

    ble_npl_mutex_init(&preempt_done_mutex);

    SLIST_INIT(&ble_gap_update_entries);
   1f9ec:	4b10      	ldr	r3, [pc, #64]	; (1fa30 <ble_gap_init+0x64>)
   1f9ee:	601c      	str	r4, [r3, #0]
    SLIST_INIT(&ble_gap_event_listener_list);
   1f9f0:	4b10      	ldr	r3, [pc, #64]	; (1fa34 <ble_gap_init+0x68>)
   1f9f2:	601c      	str	r4, [r3, #0]

    rc = os_mempool_init(&ble_gap_update_entry_pool,
   1f9f4:	4b10      	ldr	r3, [pc, #64]	; (1fa38 <ble_gap_init+0x6c>)
   1f9f6:	9300      	str	r3, [sp, #0]
   1f9f8:	4b10      	ldr	r3, [pc, #64]	; (1fa3c <ble_gap_init+0x70>)
   1f9fa:	2218      	movs	r2, #24
   1f9fc:	2101      	movs	r1, #1
   1f9fe:	4810      	ldr	r0, [pc, #64]	; (1fa40 <ble_gap_init+0x74>)
   1fa00:	f7f6 f9de 	bl	15dc0 <os_mempool_init>
                         MYNEWT_VAL(BLE_GAP_MAX_PENDING_CONN_PARAM_UPDATE),
                         sizeof (struct ble_gap_update_entry),
                         ble_gap_update_entry_mem,
                         "ble_gap_update");
    switch (rc) {
   1fa04:	b120      	cbz	r0, 1fa10 <ble_gap_init+0x44>
   1fa06:	2801      	cmp	r0, #1
   1fa08:	d10c      	bne.n	1fa24 <ble_gap_init+0x58>
   1fa0a:	2006      	movs	r0, #6

    return 0;

err:
    return rc;
}
   1fa0c:	b002      	add	sp, #8
   1fa0e:	bd10      	pop	{r4, pc}
    rc = stats_init_and_reg(
   1fa10:	4b0c      	ldr	r3, [pc, #48]	; (1fa44 <ble_gap_init+0x78>)
   1fa12:	9301      	str	r3, [sp, #4]
   1fa14:	2300      	movs	r3, #0
   1fa16:	9300      	str	r3, [sp, #0]
   1fa18:	221f      	movs	r2, #31
   1fa1a:	2104      	movs	r1, #4
   1fa1c:	480a      	ldr	r0, [pc, #40]	; (1fa48 <ble_gap_init+0x7c>)
   1fa1e:	f7fa fc15 	bl	1a24c <stats_init_and_reg>
    if (rc != 0) {
   1fa22:	e7f3      	b.n	1fa0c <ble_gap_init+0x40>
        rc = BLE_HS_EOS;
   1fa24:	200b      	movs	r0, #11
   1fa26:	e7f1      	b.n	1fa0c <ble_gap_init+0x40>
   1fa28:	1000396c 	.word	0x1000396c
   1fa2c:	10003990 	.word	0x10003990
   1fa30:	10003934 	.word	0x10003934
   1fa34:	100038a8 	.word	0x100038a8
   1fa38:	00030ecc 	.word	0x00030ecc
   1fa3c:	10003938 	.word	0x10003938
   1fa40:	10003950 	.word	0x10003950
   1fa44:	00030edc 	.word	0x00030edc
   1fa48:	100038ac 	.word	0x100038ac

0001fa4c <ble_gattc_err_dispatch_get>:
static ble_gattc_err_fn *
ble_gattc_err_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_err_dispatch[op];
}
   1fa4c:	4b01      	ldr	r3, [pc, #4]	; (1fa54 <ble_gattc_err_dispatch_get+0x8>)
   1fa4e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1fa52:	4770      	bx	lr
   1fa54:	00030f4c 	.word	0x00030f4c

0001fa58 <ble_gattc_resume_dispatch_get>:
static ble_gattc_resume_fn *
ble_gattc_resume_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_resume_dispatch[op];
}
   1fa58:	4b01      	ldr	r3, [pc, #4]	; (1fa60 <ble_gattc_resume_dispatch_get+0x8>)
   1fa5a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1fa5e:	4770      	bx	lr
   1fa60:	00030f88 	.word	0x00030f88

0001fa64 <ble_gattc_tmo_dispatch_get>:
static ble_gattc_tmo_fn *
ble_gattc_tmo_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_tmo_dispatch[op];
}
   1fa64:	4b01      	ldr	r3, [pc, #4]	; (1fa6c <ble_gattc_tmo_dispatch_get+0x8>)
   1fa66:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1fa6a:	4770      	bx	lr
   1fa6c:	00030fc4 	.word	0x00030fc4

0001fa70 <ble_gattc_proc_matches_conn_op>:
{
    const struct ble_gattc_criteria_conn_op *criteria;

    criteria = arg;

    if (criteria->conn_handle != proc->conn_handle) {
   1fa70:	880a      	ldrh	r2, [r1, #0]
   1fa72:	8903      	ldrh	r3, [r0, #8]
   1fa74:	429a      	cmp	r2, r3
   1fa76:	d107      	bne.n	1fa88 <ble_gattc_proc_matches_conn_op+0x18>
        return 0;
    }

    if (criteria->op != proc->op && criteria->op != BLE_GATT_OP_NONE) {
   1fa78:	788b      	ldrb	r3, [r1, #2]
   1fa7a:	7a82      	ldrb	r2, [r0, #10]
   1fa7c:	4293      	cmp	r3, r2
   1fa7e:	d005      	beq.n	1fa8c <ble_gattc_proc_matches_conn_op+0x1c>
   1fa80:	2bff      	cmp	r3, #255	; 0xff
   1fa82:	d105      	bne.n	1fa90 <ble_gattc_proc_matches_conn_op+0x20>
        return 0;
    }

    return 1;
   1fa84:	2001      	movs	r0, #1
   1fa86:	4770      	bx	lr
        return 0;
   1fa88:	2000      	movs	r0, #0
   1fa8a:	4770      	bx	lr
    return 1;
   1fa8c:	2001      	movs	r0, #1
   1fa8e:	4770      	bx	lr
        return 0;
   1fa90:	2000      	movs	r0, #0
}
   1fa92:	4770      	bx	lr

0001fa94 <ble_gattc_proc_matches_expired>:
    struct ble_gattc_criteria_exp *criteria;
    int32_t time_diff;

    criteria = arg;

    time_diff = proc->exp_os_ticks - criteria->now;
   1fa94:	6843      	ldr	r3, [r0, #4]
   1fa96:	680a      	ldr	r2, [r1, #0]
   1fa98:	1a9b      	subs	r3, r3, r2

    if (time_diff <= 0) {
   1fa9a:	2b00      	cmp	r3, #0
   1fa9c:	dd05      	ble.n	1faaa <ble_gattc_proc_matches_expired+0x16>
        /* Procedure is expired. */
        return 1;
    }

    /* Procedure isn't expired; determine if it is the next to expire. */
    if (time_diff < criteria->next_exp_in) {
   1fa9e:	684a      	ldr	r2, [r1, #4]
   1faa0:	429a      	cmp	r2, r3
   1faa2:	dd04      	ble.n	1faae <ble_gattc_proc_matches_expired+0x1a>
        criteria->next_exp_in = time_diff;
   1faa4:	604b      	str	r3, [r1, #4]
    }
    return 0;
   1faa6:	2000      	movs	r0, #0
   1faa8:	4770      	bx	lr
        return 1;
   1faaa:	2001      	movs	r0, #1
   1faac:	4770      	bx	lr
    return 0;
   1faae:	2000      	movs	r0, #0
}
   1fab0:	4770      	bx	lr

0001fab2 <ble_gattc_proc_matches_stalled>:
}

static int
ble_gattc_proc_matches_stalled(struct ble_gattc_proc *proc, void *unused)
{
    return proc->flags & BLE_GATTC_PROC_F_STALLED;
   1fab2:	7ac0      	ldrb	r0, [r0, #11]
}
   1fab4:	f000 0001 	and.w	r0, r0, #1
   1fab8:	4770      	bx	lr

0001faba <ble_gattc_proc_timeout>:
    return diff;
}

static void
ble_gattc_proc_timeout(struct ble_gattc_proc *proc)
{
   1faba:	b510      	push	{r4, lr}
   1fabc:	4604      	mov	r4, r0
    ble_gattc_tmo_fn *cb;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    cb = ble_gattc_tmo_dispatch_get(proc->op);
   1fabe:	7a80      	ldrb	r0, [r0, #10]
   1fac0:	f7ff ffd0 	bl	1fa64 <ble_gattc_tmo_dispatch_get>
    if (cb != NULL) {
   1fac4:	b110      	cbz	r0, 1facc <ble_gattc_proc_timeout+0x12>
   1fac6:	4603      	mov	r3, r0
        cb(proc);
   1fac8:	4620      	mov	r0, r4
   1faca:	4798      	blx	r3
    }
}
   1facc:	bd10      	pop	{r4, pc}
	...

0001fad0 <ble_gattc_error>:
ble_gattc_error(int status, uint16_t att_handle)
{
    static struct ble_gatt_error error;

    /* For consistency, always indicate a handle of 0 on success. */
    if (status == 0 || status == BLE_HS_EDONE) {
   1fad0:	4603      	mov	r3, r0
   1fad2:	b118      	cbz	r0, 1fadc <ble_gattc_error+0xc>
   1fad4:	280e      	cmp	r0, #14
   1fad6:	d102      	bne.n	1fade <ble_gattc_error+0xe>
        att_handle = 0;
   1fad8:	2100      	movs	r1, #0
   1fada:	e000      	b.n	1fade <ble_gattc_error+0xe>
   1fadc:	2100      	movs	r1, #0
    }

    error.status = status;
   1fade:	4802      	ldr	r0, [pc, #8]	; (1fae8 <ble_gattc_error+0x18>)
   1fae0:	8003      	strh	r3, [r0, #0]
    error.att_handle = att_handle;
   1fae2:	8041      	strh	r1, [r0, #2]
    return &error;
}
   1fae4:	4770      	bx	lr
   1fae6:	bf00      	nop
   1fae8:	10003b44 	.word	0x10003b44

0001faec <ble_gattc_mtu_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_mtu_cb(struct ble_gattc_proc *proc, int status, uint16_t att_handle,
                 uint16_t mtu)
{
   1faec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1faee:	4604      	mov	r4, r0
   1faf0:	461e      	mov	r6, r3
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1faf2:	4608      	mov	r0, r1
   1faf4:	b129      	cbz	r1, 1fb02 <ble_gattc_mtu_cb+0x16>
   1faf6:	290e      	cmp	r1, #14
   1faf8:	d003      	beq.n	1fb02 <ble_gattc_mtu_cb+0x16>
        STATS_INC(ble_gattc_stats, mtu_fail);
   1fafa:	4909      	ldr	r1, [pc, #36]	; (1fb20 <ble_gattc_mtu_cb+0x34>)
   1fafc:	690b      	ldr	r3, [r1, #16]
   1fafe:	3301      	adds	r3, #1
   1fb00:	610b      	str	r3, [r1, #16]
    }

    if (proc->mtu.cb == NULL) {
   1fb02:	68e5      	ldr	r5, [r4, #12]
   1fb04:	b14d      	cbz	r5, 1fb1a <ble_gattc_mtu_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->mtu.cb(proc->conn_handle,
   1fb06:	8927      	ldrh	r7, [r4, #8]
                          ble_gattc_error(status, att_handle),
   1fb08:	4611      	mov	r1, r2
   1fb0a:	f7ff ffe1 	bl	1fad0 <ble_gattc_error>
   1fb0e:	4601      	mov	r1, r0
        rc = proc->mtu.cb(proc->conn_handle,
   1fb10:	6923      	ldr	r3, [r4, #16]
   1fb12:	4632      	mov	r2, r6
   1fb14:	4638      	mov	r0, r7
   1fb16:	47a8      	blx	r5
                          mtu, proc->mtu.cb_arg);
    }

    return rc;
}
   1fb18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1fb1a:	2000      	movs	r0, #0
    return rc;
   1fb1c:	e7fc      	b.n	1fb18 <ble_gattc_mtu_cb+0x2c>
   1fb1e:	bf00      	nop
   1fb20:	10003aac 	.word	0x10003aac

0001fb24 <ble_gattc_mtu_tmo>:

static void
ble_gattc_mtu_tmo(struct ble_gattc_proc *proc)
{
   1fb24:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_mtu_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   1fb26:	2300      	movs	r3, #0
   1fb28:	461a      	mov	r2, r3
   1fb2a:	210d      	movs	r1, #13
   1fb2c:	f7ff ffde 	bl	1faec <ble_gattc_mtu_cb>
}
   1fb30:	bd08      	pop	{r3, pc}

0001fb32 <ble_gattc_mtu_err>:
/**
 * Handles an incoming ATT error response for the specified mtu-exchange proc.
 */
static void
ble_gattc_mtu_err(struct ble_gattc_proc *proc, int status, uint16_t att_handle)
{
   1fb32:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_mtu_cb(proc, status, att_handle, 0);
   1fb34:	2300      	movs	r3, #0
   1fb36:	f7ff ffd9 	bl	1faec <ble_gattc_mtu_cb>
}
   1fb3a:	bd08      	pop	{r3, pc}

0001fb3c <ble_gattc_disc_all_svcs_cb>:
 */
static int
ble_gattc_disc_all_svcs_cb(struct ble_gattc_proc *proc,
                           uint16_t status, uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   1fb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fb3e:	4604      	mov	r4, r0
   1fb40:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(service != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1fb42:	4608      	mov	r0, r1
   1fb44:	b129      	cbz	r1, 1fb52 <ble_gattc_disc_all_svcs_cb+0x16>
   1fb46:	290e      	cmp	r1, #14
   1fb48:	d003      	beq.n	1fb52 <ble_gattc_disc_all_svcs_cb+0x16>
        STATS_INC(ble_gattc_stats, disc_all_svcs_fail);
   1fb4a:	4909      	ldr	r1, [pc, #36]	; (1fb70 <ble_gattc_disc_all_svcs_cb+0x34>)
   1fb4c:	698b      	ldr	r3, [r1, #24]
   1fb4e:	3301      	adds	r3, #1
   1fb50:	618b      	str	r3, [r1, #24]
    }

    if (proc->disc_all_svcs.cb == NULL) {
   1fb52:	6925      	ldr	r5, [r4, #16]
   1fb54:	b14d      	cbz	r5, 1fb6a <ble_gattc_disc_all_svcs_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->disc_all_svcs.cb(proc->conn_handle,
   1fb56:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle),
   1fb58:	4611      	mov	r1, r2
   1fb5a:	f7ff ffb9 	bl	1fad0 <ble_gattc_error>
   1fb5e:	4601      	mov	r1, r0
        rc = proc->disc_all_svcs.cb(proc->conn_handle,
   1fb60:	6963      	ldr	r3, [r4, #20]
   1fb62:	4632      	mov	r2, r6
   1fb64:	4638      	mov	r0, r7
   1fb66:	47a8      	blx	r5
                                    service, proc->disc_all_svcs.cb_arg);
    }

    return rc;
}
   1fb68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1fb6a:	2000      	movs	r0, #0
    return rc;
   1fb6c:	e7fc      	b.n	1fb68 <ble_gattc_disc_all_svcs_cb+0x2c>
   1fb6e:	bf00      	nop
   1fb70:	10003aac 	.word	0x10003aac

0001fb74 <ble_gattc_disc_all_svcs_tmo>:

static void
ble_gattc_disc_all_svcs_tmo(struct ble_gattc_proc *proc)
{
   1fb74:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_svcs_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   1fb76:	2300      	movs	r3, #0
   1fb78:	461a      	mov	r2, r3
   1fb7a:	210d      	movs	r1, #13
   1fb7c:	f7ff ffde 	bl	1fb3c <ble_gattc_disc_all_svcs_cb>
}
   1fb80:	bd08      	pop	{r3, pc}

0001fb82 <ble_gattc_disc_all_svcs_err>:
 * discover-all-services proc.
 */
static void
ble_gattc_disc_all_svcs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1fb82:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   1fb84:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   1fb88:	d004      	beq.n	1fb94 <ble_gattc_disc_all_svcs_err+0x12>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_svcs_cb(proc, status, att_handle, NULL);
   1fb8a:	2300      	movs	r3, #0
   1fb8c:	b289      	uxth	r1, r1
   1fb8e:	f7ff ffd5 	bl	1fb3c <ble_gattc_disc_all_svcs_cb>
}
   1fb92:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   1fb94:	210e      	movs	r1, #14
   1fb96:	e7f8      	b.n	1fb8a <ble_gattc_disc_all_svcs_err+0x8>

0001fb98 <ble_gattc_disc_svc_uuid_cb>:
 */
static int
ble_gattc_disc_svc_uuid_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   1fb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fb9a:	4604      	mov	r4, r0
   1fb9c:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(service != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1fb9e:	4608      	mov	r0, r1
   1fba0:	b129      	cbz	r1, 1fbae <ble_gattc_disc_svc_uuid_cb+0x16>
   1fba2:	290e      	cmp	r1, #14
   1fba4:	d003      	beq.n	1fbae <ble_gattc_disc_svc_uuid_cb+0x16>
        STATS_INC(ble_gattc_stats, disc_svc_uuid_fail);
   1fba6:	4909      	ldr	r1, [pc, #36]	; (1fbcc <ble_gattc_disc_svc_uuid_cb+0x34>)
   1fba8:	6a0b      	ldr	r3, [r1, #32]
   1fbaa:	3301      	adds	r3, #1
   1fbac:	620b      	str	r3, [r1, #32]
    }

    if (proc->disc_svc_uuid.cb == NULL) {
   1fbae:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1fbb0:	b14d      	cbz	r5, 1fbc6 <ble_gattc_disc_svc_uuid_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->disc_svc_uuid.cb(proc->conn_handle,
   1fbb2:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle),
   1fbb4:	4611      	mov	r1, r2
   1fbb6:	f7ff ff8b 	bl	1fad0 <ble_gattc_error>
   1fbba:	4601      	mov	r1, r0
        rc = proc->disc_svc_uuid.cb(proc->conn_handle,
   1fbbc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1fbbe:	4632      	mov	r2, r6
   1fbc0:	4638      	mov	r0, r7
   1fbc2:	47a8      	blx	r5
                                    service, proc->disc_svc_uuid.cb_arg);
    }

    return rc;
}
   1fbc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1fbc6:	2000      	movs	r0, #0
    return rc;
   1fbc8:	e7fc      	b.n	1fbc4 <ble_gattc_disc_svc_uuid_cb+0x2c>
   1fbca:	bf00      	nop
   1fbcc:	10003aac 	.word	0x10003aac

0001fbd0 <ble_gattc_disc_svc_uuid_tmo>:

static void
ble_gattc_disc_svc_uuid_tmo(struct ble_gattc_proc *proc)
{
   1fbd0:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_svc_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   1fbd2:	2300      	movs	r3, #0
   1fbd4:	461a      	mov	r2, r3
   1fbd6:	210d      	movs	r1, #13
   1fbd8:	f7ff ffde 	bl	1fb98 <ble_gattc_disc_svc_uuid_cb>
}
   1fbdc:	bd08      	pop	{r3, pc}

0001fbde <ble_gattc_disc_svc_uuid_err>:
 * discover-service-by-uuid proc.
 */
static void
ble_gattc_disc_svc_uuid_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1fbde:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   1fbe0:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   1fbe4:	d003      	beq.n	1fbee <ble_gattc_disc_svc_uuid_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_svc_uuid_cb(proc, status, att_handle, NULL);
   1fbe6:	2300      	movs	r3, #0
   1fbe8:	f7ff ffd6 	bl	1fb98 <ble_gattc_disc_svc_uuid_cb>
}
   1fbec:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   1fbee:	210e      	movs	r1, #14
   1fbf0:	e7f9      	b.n	1fbe6 <ble_gattc_disc_svc_uuid_err+0x8>
	...

0001fbf4 <ble_gattc_find_inc_svcs_cb>:
 */
static int
ble_gattc_find_inc_svcs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   1fbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fbf6:	4604      	mov	r4, r0
   1fbf8:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(service != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1fbfa:	4608      	mov	r0, r1
   1fbfc:	b129      	cbz	r1, 1fc0a <ble_gattc_find_inc_svcs_cb+0x16>
   1fbfe:	290e      	cmp	r1, #14
   1fc00:	d003      	beq.n	1fc0a <ble_gattc_find_inc_svcs_cb+0x16>
        STATS_INC(ble_gattc_stats, find_inc_svcs_fail);
   1fc02:	4909      	ldr	r1, [pc, #36]	; (1fc28 <ble_gattc_find_inc_svcs_cb+0x34>)
   1fc04:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1fc06:	3301      	adds	r3, #1
   1fc08:	628b      	str	r3, [r1, #40]	; 0x28
    }

    if (proc->find_inc_svcs.cb == NULL) {
   1fc0a:	6965      	ldr	r5, [r4, #20]
   1fc0c:	b14d      	cbz	r5, 1fc22 <ble_gattc_find_inc_svcs_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->find_inc_svcs.cb(proc->conn_handle,
   1fc0e:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle),
   1fc10:	4611      	mov	r1, r2
   1fc12:	f7ff ff5d 	bl	1fad0 <ble_gattc_error>
   1fc16:	4601      	mov	r1, r0
        rc = proc->find_inc_svcs.cb(proc->conn_handle,
   1fc18:	69a3      	ldr	r3, [r4, #24]
   1fc1a:	4632      	mov	r2, r6
   1fc1c:	4638      	mov	r0, r7
   1fc1e:	47a8      	blx	r5
                                    service, proc->find_inc_svcs.cb_arg);
    }

    return rc;
}
   1fc20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1fc22:	2000      	movs	r0, #0
    return rc;
   1fc24:	e7fc      	b.n	1fc20 <ble_gattc_find_inc_svcs_cb+0x2c>
   1fc26:	bf00      	nop
   1fc28:	10003aac 	.word	0x10003aac

0001fc2c <ble_gattc_find_inc_svcs_tmo>:

static void
ble_gattc_find_inc_svcs_tmo(struct ble_gattc_proc *proc)
{
   1fc2c:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_find_inc_svcs_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   1fc2e:	2300      	movs	r3, #0
   1fc30:	461a      	mov	r2, r3
   1fc32:	210d      	movs	r1, #13
   1fc34:	f7ff ffde 	bl	1fbf4 <ble_gattc_find_inc_svcs_cb>
}
   1fc38:	bd08      	pop	{r3, pc}

0001fc3a <ble_gattc_find_inc_svcs_err>:
 * find-included-services proc.
 */
static void
ble_gattc_find_inc_svcs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1fc3a:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (proc->find_inc_svcs.cur_start == 0 &&
   1fc3c:	8a03      	ldrh	r3, [r0, #16]
   1fc3e:	b913      	cbnz	r3, 1fc46 <ble_gattc_find_inc_svcs_err+0xc>
   1fc40:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   1fc44:	d003      	beq.n	1fc4e <ble_gattc_find_inc_svcs_err+0x14>

        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_find_inc_svcs_cb(proc, status, att_handle, NULL);
   1fc46:	2300      	movs	r3, #0
   1fc48:	f7ff ffd4 	bl	1fbf4 <ble_gattc_find_inc_svcs_cb>
}
   1fc4c:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   1fc4e:	210e      	movs	r1, #14
   1fc50:	e7f9      	b.n	1fc46 <ble_gattc_find_inc_svcs_err+0xc>
	...

0001fc54 <ble_gattc_disc_all_chrs_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_all_chrs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_chr *chr)
{
   1fc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fc56:	4604      	mov	r4, r0
   1fc58:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(chr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1fc5a:	4608      	mov	r0, r1
   1fc5c:	b129      	cbz	r1, 1fc6a <ble_gattc_disc_all_chrs_cb+0x16>
   1fc5e:	290e      	cmp	r1, #14
   1fc60:	d003      	beq.n	1fc6a <ble_gattc_disc_all_chrs_cb+0x16>
        STATS_INC(ble_gattc_stats, disc_all_chrs_fail);
   1fc62:	4909      	ldr	r1, [pc, #36]	; (1fc88 <ble_gattc_disc_all_chrs_cb+0x34>)
   1fc64:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   1fc66:	3301      	adds	r3, #1
   1fc68:	630b      	str	r3, [r1, #48]	; 0x30
    }

    if (proc->disc_all_chrs.cb == NULL) {
   1fc6a:	6925      	ldr	r5, [r4, #16]
   1fc6c:	b14d      	cbz	r5, 1fc82 <ble_gattc_disc_all_chrs_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->disc_all_chrs.cb(proc->conn_handle,
   1fc6e:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle), chr,
   1fc70:	4611      	mov	r1, r2
   1fc72:	f7ff ff2d 	bl	1fad0 <ble_gattc_error>
   1fc76:	4601      	mov	r1, r0
        rc = proc->disc_all_chrs.cb(proc->conn_handle,
   1fc78:	6963      	ldr	r3, [r4, #20]
   1fc7a:	4632      	mov	r2, r6
   1fc7c:	4638      	mov	r0, r7
   1fc7e:	47a8      	blx	r5
                                    proc->disc_all_chrs.cb_arg);
    }

    return rc;
}
   1fc80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1fc82:	2000      	movs	r0, #0
    return rc;
   1fc84:	e7fc      	b.n	1fc80 <ble_gattc_disc_all_chrs_cb+0x2c>
   1fc86:	bf00      	nop
   1fc88:	10003aac 	.word	0x10003aac

0001fc8c <ble_gattc_disc_all_chrs_tmo>:

static void
ble_gattc_disc_all_chrs_tmo(struct ble_gattc_proc *proc)
{
   1fc8c:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_chrs_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   1fc8e:	2300      	movs	r3, #0
   1fc90:	461a      	mov	r2, r3
   1fc92:	210d      	movs	r1, #13
   1fc94:	f7ff ffde 	bl	1fc54 <ble_gattc_disc_all_chrs_cb>
}
   1fc98:	bd08      	pop	{r3, pc}

0001fc9a <ble_gattc_disc_all_chrs_err>:
 * discover-all-characteristics proc.
 */
static void
ble_gattc_disc_all_chrs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1fc9a:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   1fc9c:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   1fca0:	d003      	beq.n	1fcaa <ble_gattc_disc_all_chrs_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_chrs_cb(proc, status, att_handle, NULL);
   1fca2:	2300      	movs	r3, #0
   1fca4:	f7ff ffd6 	bl	1fc54 <ble_gattc_disc_all_chrs_cb>
}
   1fca8:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   1fcaa:	210e      	movs	r1, #14
   1fcac:	e7f9      	b.n	1fca2 <ble_gattc_disc_all_chrs_err+0x8>
	...

0001fcb0 <ble_gattc_disc_chr_uuid_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_chr_uuid_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_chr *chr)
{
   1fcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fcb2:	4604      	mov	r4, r0
   1fcb4:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(chr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1fcb6:	4608      	mov	r0, r1
   1fcb8:	b129      	cbz	r1, 1fcc6 <ble_gattc_disc_chr_uuid_cb+0x16>
   1fcba:	290e      	cmp	r1, #14
   1fcbc:	d003      	beq.n	1fcc6 <ble_gattc_disc_chr_uuid_cb+0x16>
        STATS_INC(ble_gattc_stats, disc_chrs_uuid_fail);
   1fcbe:	4909      	ldr	r1, [pc, #36]	; (1fce4 <ble_gattc_disc_chr_uuid_cb+0x34>)
   1fcc0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   1fcc2:	3301      	adds	r3, #1
   1fcc4:	638b      	str	r3, [r1, #56]	; 0x38
    }

    if (proc->disc_chr_uuid.cb == NULL) {
   1fcc6:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1fcc8:	b14d      	cbz	r5, 1fcde <ble_gattc_disc_chr_uuid_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->disc_chr_uuid.cb(proc->conn_handle,
   1fcca:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle), chr,
   1fccc:	4611      	mov	r1, r2
   1fcce:	f7ff feff 	bl	1fad0 <ble_gattc_error>
   1fcd2:	4601      	mov	r1, r0
        rc = proc->disc_chr_uuid.cb(proc->conn_handle,
   1fcd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1fcd6:	4632      	mov	r2, r6
   1fcd8:	4638      	mov	r0, r7
   1fcda:	47a8      	blx	r5
                                    proc->disc_chr_uuid.cb_arg);
    }

    return rc;
}
   1fcdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1fcde:	2000      	movs	r0, #0
    return rc;
   1fce0:	e7fc      	b.n	1fcdc <ble_gattc_disc_chr_uuid_cb+0x2c>
   1fce2:	bf00      	nop
   1fce4:	10003aac 	.word	0x10003aac

0001fce8 <ble_gattc_disc_chr_uuid_tmo>:

static void
ble_gattc_disc_chr_uuid_tmo(struct ble_gattc_proc *proc)
{
   1fce8:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_chr_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   1fcea:	2300      	movs	r3, #0
   1fcec:	461a      	mov	r2, r3
   1fcee:	210d      	movs	r1, #13
   1fcf0:	f7ff ffde 	bl	1fcb0 <ble_gattc_disc_chr_uuid_cb>
}
   1fcf4:	bd08      	pop	{r3, pc}

0001fcf6 <ble_gattc_disc_chr_uuid_err>:
 * discover-characteristic-by-uuid proc.
 */
static void
ble_gattc_disc_chr_uuid_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1fcf6:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   1fcf8:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   1fcfc:	d003      	beq.n	1fd06 <ble_gattc_disc_chr_uuid_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_chr_uuid_cb(proc, status, att_handle, NULL);
   1fcfe:	2300      	movs	r3, #0
   1fd00:	f7ff ffd6 	bl	1fcb0 <ble_gattc_disc_chr_uuid_cb>
}
   1fd04:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   1fd06:	210e      	movs	r1, #14
   1fd08:	e7f9      	b.n	1fcfe <ble_gattc_disc_chr_uuid_err+0x8>
	...

0001fd0c <ble_gattc_disc_all_dscs_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_all_dscs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_dsc *dsc)
{
   1fd0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fd0e:	b083      	sub	sp, #12
   1fd10:	4604      	mov	r4, r0
   1fd12:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(dsc != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1fd14:	4608      	mov	r0, r1
   1fd16:	b129      	cbz	r1, 1fd24 <ble_gattc_disc_all_dscs_cb+0x18>
   1fd18:	290e      	cmp	r1, #14
   1fd1a:	d003      	beq.n	1fd24 <ble_gattc_disc_all_dscs_cb+0x18>
        STATS_INC(ble_gattc_stats, disc_all_dscs_fail);
   1fd1c:	490a      	ldr	r1, [pc, #40]	; (1fd48 <ble_gattc_disc_all_dscs_cb+0x3c>)
   1fd1e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1fd20:	3301      	adds	r3, #1
   1fd22:	640b      	str	r3, [r1, #64]	; 0x40
    }

    if (proc->disc_all_dscs.cb == NULL) {
   1fd24:	6965      	ldr	r5, [r4, #20]
   1fd26:	b165      	cbz	r5, 1fd42 <ble_gattc_disc_all_dscs_cb+0x36>
        rc = 0;
    } else {
        rc = proc->disc_all_dscs.cb(proc->conn_handle,
   1fd28:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle),
   1fd2a:	4611      	mov	r1, r2
   1fd2c:	f7ff fed0 	bl	1fad0 <ble_gattc_error>
   1fd30:	4601      	mov	r1, r0
        rc = proc->disc_all_dscs.cb(proc->conn_handle,
   1fd32:	69a3      	ldr	r3, [r4, #24]
   1fd34:	9300      	str	r3, [sp, #0]
   1fd36:	4633      	mov	r3, r6
   1fd38:	89a2      	ldrh	r2, [r4, #12]
   1fd3a:	4638      	mov	r0, r7
   1fd3c:	47a8      	blx	r5
                                    proc->disc_all_dscs.chr_val_handle,
                                    dsc, proc->disc_all_dscs.cb_arg);
    }

    return rc;
}
   1fd3e:	b003      	add	sp, #12
   1fd40:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = 0;
   1fd42:	2000      	movs	r0, #0
    return rc;
   1fd44:	e7fb      	b.n	1fd3e <ble_gattc_disc_all_dscs_cb+0x32>
   1fd46:	bf00      	nop
   1fd48:	10003aac 	.word	0x10003aac

0001fd4c <ble_gattc_disc_all_dscs_tmo>:

static void
ble_gattc_disc_all_dscs_tmo(struct ble_gattc_proc *proc)
{
   1fd4c:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_dscs_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   1fd4e:	2300      	movs	r3, #0
   1fd50:	461a      	mov	r2, r3
   1fd52:	210d      	movs	r1, #13
   1fd54:	f7ff ffda 	bl	1fd0c <ble_gattc_disc_all_dscs_cb>
}
   1fd58:	bd08      	pop	{r3, pc}

0001fd5a <ble_gattc_disc_all_dscs_err>:
 * discover-all-descriptors proc.
 */
static void
ble_gattc_disc_all_dscs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1fd5a:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   1fd5c:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   1fd60:	d003      	beq.n	1fd6a <ble_gattc_disc_all_dscs_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_dscs_cb(proc, status, att_handle, NULL);
   1fd62:	2300      	movs	r3, #0
   1fd64:	f7ff ffd2 	bl	1fd0c <ble_gattc_disc_all_dscs_cb>
}
   1fd68:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   1fd6a:	210e      	movs	r1, #14
   1fd6c:	e7f9      	b.n	1fd62 <ble_gattc_disc_all_dscs_err+0x8>
	...

0001fd70 <ble_gattc_read_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_cb(struct ble_gattc_proc *proc, int status,
                  uint16_t att_handle, struct ble_gatt_attr *attr)
{
   1fd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fd72:	4604      	mov	r4, r0
   1fd74:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(attr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1fd76:	4608      	mov	r0, r1
   1fd78:	b129      	cbz	r1, 1fd86 <ble_gattc_read_cb+0x16>
   1fd7a:	290e      	cmp	r1, #14
   1fd7c:	d003      	beq.n	1fd86 <ble_gattc_read_cb+0x16>
        STATS_INC(ble_gattc_stats, read_fail);
   1fd7e:	4909      	ldr	r1, [pc, #36]	; (1fda4 <ble_gattc_read_cb+0x34>)
   1fd80:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   1fd82:	3301      	adds	r3, #1
   1fd84:	648b      	str	r3, [r1, #72]	; 0x48
    }

    if (proc->read.cb == NULL) {
   1fd86:	6925      	ldr	r5, [r4, #16]
   1fd88:	b14d      	cbz	r5, 1fd9e <ble_gattc_read_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->read.cb(proc->conn_handle,
   1fd8a:	8927      	ldrh	r7, [r4, #8]
                           ble_gattc_error(status, att_handle), attr,
   1fd8c:	4611      	mov	r1, r2
   1fd8e:	f7ff fe9f 	bl	1fad0 <ble_gattc_error>
   1fd92:	4601      	mov	r1, r0
        rc = proc->read.cb(proc->conn_handle,
   1fd94:	6963      	ldr	r3, [r4, #20]
   1fd96:	4632      	mov	r2, r6
   1fd98:	4638      	mov	r0, r7
   1fd9a:	47a8      	blx	r5
                           proc->read.cb_arg);
    }

    return rc;
}
   1fd9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1fd9e:	2000      	movs	r0, #0
    return rc;
   1fda0:	e7fc      	b.n	1fd9c <ble_gattc_read_cb+0x2c>
   1fda2:	bf00      	nop
   1fda4:	10003aac 	.word	0x10003aac

0001fda8 <ble_gattc_read_tmo>:

static void
ble_gattc_read_tmo(struct ble_gattc_proc *proc)
{
   1fda8:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   1fdaa:	2300      	movs	r3, #0
   1fdac:	461a      	mov	r2, r3
   1fdae:	210d      	movs	r1, #13
   1fdb0:	f7ff ffde 	bl	1fd70 <ble_gattc_read_cb>
}
   1fdb4:	bd08      	pop	{r3, pc}

0001fdb6 <ble_gattc_read_err>:
 * read-characteristic-value proc.
 */
static void
ble_gattc_read_err(struct ble_gattc_proc *proc, int status,
                   uint16_t att_handle)
{
   1fdb6:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_cb(proc, status, att_handle, NULL);
   1fdb8:	2300      	movs	r3, #0
   1fdba:	f7ff ffd9 	bl	1fd70 <ble_gattc_read_cb>
}
   1fdbe:	bd08      	pop	{r3, pc}

0001fdc0 <ble_gattc_read_uuid_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_uuid_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct ble_gatt_attr *attr)
{
   1fdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fdc2:	4604      	mov	r4, r0
   1fdc4:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(attr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1fdc6:	4608      	mov	r0, r1
   1fdc8:	b129      	cbz	r1, 1fdd6 <ble_gattc_read_uuid_cb+0x16>
   1fdca:	290e      	cmp	r1, #14
   1fdcc:	d003      	beq.n	1fdd6 <ble_gattc_read_uuid_cb+0x16>
        STATS_INC(ble_gattc_stats, read_uuid_fail);
   1fdce:	4909      	ldr	r1, [pc, #36]	; (1fdf4 <ble_gattc_read_uuid_cb+0x34>)
   1fdd0:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   1fdd2:	3301      	adds	r3, #1
   1fdd4:	650b      	str	r3, [r1, #80]	; 0x50
    }

    if (proc->read_uuid.cb == NULL) {
   1fdd6:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1fdd8:	b14d      	cbz	r5, 1fdee <ble_gattc_read_uuid_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->read_uuid.cb(proc->conn_handle,
   1fdda:	8927      	ldrh	r7, [r4, #8]
                                ble_gattc_error(status, att_handle), attr,
   1fddc:	4611      	mov	r1, r2
   1fdde:	f7ff fe77 	bl	1fad0 <ble_gattc_error>
   1fde2:	4601      	mov	r1, r0
        rc = proc->read_uuid.cb(proc->conn_handle,
   1fde4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1fde6:	4632      	mov	r2, r6
   1fde8:	4638      	mov	r0, r7
   1fdea:	47a8      	blx	r5
                                proc->read_uuid.cb_arg);
    }

    return rc;
}
   1fdec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1fdee:	2000      	movs	r0, #0
    return rc;
   1fdf0:	e7fc      	b.n	1fdec <ble_gattc_read_uuid_cb+0x2c>
   1fdf2:	bf00      	nop
   1fdf4:	10003aac 	.word	0x10003aac

0001fdf8 <ble_gattc_read_uuid_tmo>:

static void
ble_gattc_read_uuid_tmo(struct ble_gattc_proc *proc)
{
   1fdf8:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   1fdfa:	2300      	movs	r3, #0
   1fdfc:	461a      	mov	r2, r3
   1fdfe:	210d      	movs	r1, #13
   1fe00:	f7ff ffde 	bl	1fdc0 <ble_gattc_read_uuid_cb>
}
   1fe04:	bd08      	pop	{r3, pc}

0001fe06 <ble_gattc_read_uuid_err>:
 * read-using-characteristic-uuid proc.
 */
static void
ble_gattc_read_uuid_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   1fe06:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_uuid_cb(proc, status, att_handle, NULL);
   1fe08:	2300      	movs	r3, #0
   1fe0a:	f7ff ffd9 	bl	1fdc0 <ble_gattc_read_uuid_cb>
}
   1fe0e:	bd08      	pop	{r3, pc}

0001fe10 <ble_gattc_read_long_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_long_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct ble_gatt_attr *attr)
{
   1fe10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fe12:	4604      	mov	r4, r0
   1fe14:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(attr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1fe16:	4608      	mov	r0, r1
   1fe18:	b129      	cbz	r1, 1fe26 <ble_gattc_read_long_cb+0x16>
   1fe1a:	290e      	cmp	r1, #14
   1fe1c:	d003      	beq.n	1fe26 <ble_gattc_read_long_cb+0x16>
        STATS_INC(ble_gattc_stats, read_long_fail);
   1fe1e:	4909      	ldr	r1, [pc, #36]	; (1fe44 <ble_gattc_read_long_cb+0x34>)
   1fe20:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   1fe22:	3301      	adds	r3, #1
   1fe24:	658b      	str	r3, [r1, #88]	; 0x58
    }

    if (proc->read_long.cb == NULL) {
   1fe26:	6925      	ldr	r5, [r4, #16]
   1fe28:	b14d      	cbz	r5, 1fe3e <ble_gattc_read_long_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->read_long.cb(proc->conn_handle,
   1fe2a:	8927      	ldrh	r7, [r4, #8]
                                ble_gattc_error(status, att_handle), attr,
   1fe2c:	4611      	mov	r1, r2
   1fe2e:	f7ff fe4f 	bl	1fad0 <ble_gattc_error>
   1fe32:	4601      	mov	r1, r0
        rc = proc->read_long.cb(proc->conn_handle,
   1fe34:	6963      	ldr	r3, [r4, #20]
   1fe36:	4632      	mov	r2, r6
   1fe38:	4638      	mov	r0, r7
   1fe3a:	47a8      	blx	r5
                                proc->read_long.cb_arg);
    }

    return rc;
}
   1fe3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1fe3e:	2000      	movs	r0, #0
    return rc;
   1fe40:	e7fc      	b.n	1fe3c <ble_gattc_read_long_cb+0x2c>
   1fe42:	bf00      	nop
   1fe44:	10003aac 	.word	0x10003aac

0001fe48 <ble_gattc_read_long_tmo>:

static void
ble_gattc_read_long_tmo(struct ble_gattc_proc *proc)
{
   1fe48:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_long_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   1fe4a:	2300      	movs	r3, #0
   1fe4c:	461a      	mov	r2, r3
   1fe4e:	210d      	movs	r1, #13
   1fe50:	f7ff ffde 	bl	1fe10 <ble_gattc_read_long_cb>
}
   1fe54:	bd08      	pop	{r3, pc}

0001fe56 <ble_gattc_read_long_err>:
 * read-long-characteristic proc.
 */
static void
ble_gattc_read_long_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   1fe56:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_long_cb(proc, status, att_handle, NULL);
   1fe58:	2300      	movs	r3, #0
   1fe5a:	f7ff ffd9 	bl	1fe10 <ble_gattc_read_long_cb>
}
   1fe5e:	bd08      	pop	{r3, pc}

0001fe60 <ble_gattc_read_mult_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_mult_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct os_mbuf **om)
{
   1fe60:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fe62:	b083      	sub	sp, #12
   1fe64:	4606      	mov	r6, r0
   1fe66:	461c      	mov	r4, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(om != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1fe68:	4608      	mov	r0, r1
   1fe6a:	b129      	cbz	r1, 1fe78 <ble_gattc_read_mult_cb+0x18>
   1fe6c:	290e      	cmp	r1, #14
   1fe6e:	d003      	beq.n	1fe78 <ble_gattc_read_mult_cb+0x18>
        STATS_INC(ble_gattc_stats, read_mult_fail);
   1fe70:	490f      	ldr	r1, [pc, #60]	; (1feb0 <ble_gattc_read_mult_cb+0x50>)
   1fe72:	6e0b      	ldr	r3, [r1, #96]	; 0x60
   1fe74:	3301      	adds	r3, #1
   1fe76:	660b      	str	r3, [r1, #96]	; 0x60
    }

    attr.handle = 0;
   1fe78:	2300      	movs	r3, #0
   1fe7a:	f8ad 3000 	strh.w	r3, [sp]
    attr.offset = 0;
   1fe7e:	f8ad 3002 	strh.w	r3, [sp, #2]
    if (om == NULL) {
   1fe82:	b18c      	cbz	r4, 1fea8 <ble_gattc_read_mult_cb+0x48>
        attr.om = NULL;
    } else {
        attr.om = *om;
   1fe84:	6823      	ldr	r3, [r4, #0]
   1fe86:	9301      	str	r3, [sp, #4]
    }

    if (proc->read_mult.cb == NULL) {
   1fe88:	6a35      	ldr	r5, [r6, #32]
   1fe8a:	b17d      	cbz	r5, 1feac <ble_gattc_read_mult_cb+0x4c>
        rc = 0;
    } else {
        rc = proc->read_mult.cb(proc->conn_handle,
   1fe8c:	8937      	ldrh	r7, [r6, #8]
                                ble_gattc_error(status, att_handle), &attr,
   1fe8e:	4611      	mov	r1, r2
   1fe90:	f7ff fe1e 	bl	1fad0 <ble_gattc_error>
   1fe94:	4601      	mov	r1, r0
        rc = proc->read_mult.cb(proc->conn_handle,
   1fe96:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1fe98:	466a      	mov	r2, sp
   1fe9a:	4638      	mov	r0, r7
   1fe9c:	47a8      	blx	r5
                                proc->read_mult.cb_arg);
    }

    /* Indicate to the caller whether the application consumed the mbuf. */
    if (om != NULL) {
   1fe9e:	b10c      	cbz	r4, 1fea4 <ble_gattc_read_mult_cb+0x44>
        *om = attr.om;
   1fea0:	9b01      	ldr	r3, [sp, #4]
   1fea2:	6023      	str	r3, [r4, #0]
    }

    return rc;
}
   1fea4:	b003      	add	sp, #12
   1fea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        attr.om = NULL;
   1fea8:	9301      	str	r3, [sp, #4]
   1feaa:	e7ed      	b.n	1fe88 <ble_gattc_read_mult_cb+0x28>
        rc = 0;
   1feac:	2000      	movs	r0, #0
   1feae:	e7f6      	b.n	1fe9e <ble_gattc_read_mult_cb+0x3e>
   1feb0:	10003aac 	.word	0x10003aac

0001feb4 <ble_gattc_read_mult_tmo>:

static void
ble_gattc_read_mult_tmo(struct ble_gattc_proc *proc)
{
   1feb4:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_mult_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   1feb6:	2300      	movs	r3, #0
   1feb8:	461a      	mov	r2, r3
   1feba:	210d      	movs	r1, #13
   1febc:	f7ff ffd0 	bl	1fe60 <ble_gattc_read_mult_cb>
}
   1fec0:	bd08      	pop	{r3, pc}

0001fec2 <ble_gattc_read_mult_err>:
 * read-multiple-characteristics proc.
 */
static void
ble_gattc_read_mult_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   1fec2:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_mult_cb(proc, status, att_handle, NULL);
   1fec4:	2300      	movs	r3, #0
   1fec6:	f7ff ffcb 	bl	1fe60 <ble_gattc_read_mult_cb>
}
   1feca:	bd08      	pop	{r3, pc}

0001fecc <ble_gattc_write_long_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_write_long_cb(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   1fecc:	b570      	push	{r4, r5, r6, lr}
   1fece:	4604      	mov	r4, r0
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1fed0:	4608      	mov	r0, r1
   1fed2:	b129      	cbz	r1, 1fee0 <ble_gattc_write_long_cb+0x14>
   1fed4:	290e      	cmp	r1, #14
   1fed6:	d003      	beq.n	1fee0 <ble_gattc_write_long_cb+0x14>
        STATS_INC(ble_gattc_stats, write_long_fail);
   1fed8:	4909      	ldr	r1, [pc, #36]	; (1ff00 <ble_gattc_write_long_cb+0x34>)
   1feda:	6f8b      	ldr	r3, [r1, #120]	; 0x78
   1fedc:	3301      	adds	r3, #1
   1fede:	678b      	str	r3, [r1, #120]	; 0x78
    }

    if (proc->write_long.cb == NULL) {
   1fee0:	69a5      	ldr	r5, [r4, #24]
   1fee2:	b155      	cbz	r5, 1fefa <ble_gattc_write_long_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->write_long.cb(proc->conn_handle,
   1fee4:	8926      	ldrh	r6, [r4, #8]
                                 ble_gattc_error(status, att_handle),
   1fee6:	4611      	mov	r1, r2
   1fee8:	f7ff fdf2 	bl	1fad0 <ble_gattc_error>
   1feec:	4601      	mov	r1, r0
        rc = proc->write_long.cb(proc->conn_handle,
   1feee:	69e3      	ldr	r3, [r4, #28]
   1fef0:	f104 020c 	add.w	r2, r4, #12
   1fef4:	4630      	mov	r0, r6
   1fef6:	47a8      	blx	r5
                                 &proc->write_long.attr,
                                 proc->write_long.cb_arg);
    }

    return rc;
}
   1fef8:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   1fefa:	2000      	movs	r0, #0
    return rc;
   1fefc:	e7fc      	b.n	1fef8 <ble_gattc_write_long_cb+0x2c>
   1fefe:	bf00      	nop
   1ff00:	10003aac 	.word	0x10003aac

0001ff04 <ble_gattc_write_long_tmo>:

static void
ble_gattc_write_long_tmo(struct ble_gattc_proc *proc)
{
   1ff04:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_write_long_cb(proc, BLE_HS_ETIMEOUT, 0);
   1ff06:	2200      	movs	r2, #0
   1ff08:	210d      	movs	r1, #13
   1ff0a:	f7ff ffdf 	bl	1fecc <ble_gattc_write_long_cb>
}
   1ff0e:	bd08      	pop	{r3, pc}

0001ff10 <ble_gattc_write_reliable_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_write_reliable_cb(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1ff10:	b570      	push	{r4, r5, r6, lr}
   1ff12:	b082      	sub	sp, #8
   1ff14:	4604      	mov	r4, r0
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1ff16:	4608      	mov	r0, r1
   1ff18:	b139      	cbz	r1, 1ff2a <ble_gattc_write_reliable_cb+0x1a>
   1ff1a:	290e      	cmp	r1, #14
   1ff1c:	d005      	beq.n	1ff2a <ble_gattc_write_reliable_cb+0x1a>
        STATS_INC(ble_gattc_stats, write_reliable_fail);
   1ff1e:	490c      	ldr	r1, [pc, #48]	; (1ff50 <ble_gattc_write_reliable_cb+0x40>)
   1ff20:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   1ff24:	3301      	adds	r3, #1
   1ff26:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }

    if (proc->write_reliable.cb == NULL) {
   1ff2a:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1ff2c:	b175      	cbz	r5, 1ff4c <ble_gattc_write_reliable_cb+0x3c>
        rc = 0;
    } else {
        rc = proc->write_reliable.cb(proc->conn_handle,
   1ff2e:	8926      	ldrh	r6, [r4, #8]
                                     ble_gattc_error(status, att_handle),
   1ff30:	4611      	mov	r1, r2
   1ff32:	f7ff fdcd 	bl	1fad0 <ble_gattc_error>
   1ff36:	4601      	mov	r1, r0
        rc = proc->write_reliable.cb(proc->conn_handle,
   1ff38:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1ff3a:	9300      	str	r3, [sp, #0]
   1ff3c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   1ff40:	f104 020c 	add.w	r2, r4, #12
   1ff44:	4630      	mov	r0, r6
   1ff46:	47a8      	blx	r5
                                     proc->write_reliable.num_attrs,
                                     proc->write_reliable.cb_arg);
    }

    return rc;
}
   1ff48:	b002      	add	sp, #8
   1ff4a:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   1ff4c:	2000      	movs	r0, #0
    return rc;
   1ff4e:	e7fb      	b.n	1ff48 <ble_gattc_write_reliable_cb+0x38>
   1ff50:	10003aac 	.word	0x10003aac

0001ff54 <ble_gattc_write_reliable_tmo>:

static void
ble_gattc_write_reliable_tmo(struct ble_gattc_proc *proc)
{
   1ff54:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_write_reliable_cb(proc, BLE_HS_ETIMEOUT, 0);
   1ff56:	2200      	movs	r2, #0
   1ff58:	210d      	movs	r1, #13
   1ff5a:	f7ff ffd9 	bl	1ff10 <ble_gattc_write_reliable_cb>
}
   1ff5e:	bd08      	pop	{r3, pc}

0001ff60 <ble_gattc_proc_set_resume_timer>:
{
   1ff60:	b508      	push	{r3, lr}
    proc->flags |= BLE_GATTC_PROC_F_STALLED;
   1ff62:	7ac3      	ldrb	r3, [r0, #11]
   1ff64:	f043 0301 	orr.w	r3, r3, #1
   1ff68:	72c3      	strb	r3, [r0, #11]
    if (ble_gattc_resume_at == 0) {
   1ff6a:	4b07      	ldr	r3, [pc, #28]	; (1ff88 <ble_gattc_proc_set_resume_timer+0x28>)
   1ff6c:	681b      	ldr	r3, [r3, #0]
   1ff6e:	b103      	cbz	r3, 1ff72 <ble_gattc_proc_set_resume_timer+0x12>
}
   1ff70:	bd08      	pop	{r3, pc}
    return os_time_get();
   1ff72:	f7f6 fb15 	bl	165a0 <os_time_get>
        ble_gattc_resume_at = ble_npl_time_get() +
   1ff76:	3080      	adds	r0, #128	; 0x80
   1ff78:	4b03      	ldr	r3, [pc, #12]	; (1ff88 <ble_gattc_proc_set_resume_timer+0x28>)
   1ff7a:	6018      	str	r0, [r3, #0]
        if (ble_gattc_resume_at == 0) {
   1ff7c:	2800      	cmp	r0, #0
   1ff7e:	d1f7      	bne.n	1ff70 <ble_gattc_proc_set_resume_timer+0x10>
            ble_gattc_resume_at++;
   1ff80:	3001      	adds	r0, #1
   1ff82:	6018      	str	r0, [r3, #0]
}
   1ff84:	e7f4      	b.n	1ff70 <ble_gattc_proc_set_resume_timer+0x10>
   1ff86:	bf00      	nop
   1ff88:	10003aa8 	.word	0x10003aa8

0001ff8c <ble_gattc_process_resume_status>:
{
   1ff8c:	b508      	push	{r3, lr}
    switch (status) {
   1ff8e:	460b      	mov	r3, r1
   1ff90:	b121      	cbz	r1, 1ff9c <ble_gattc_process_resume_status+0x10>
   1ff92:	2906      	cmp	r1, #6
   1ff94:	d102      	bne.n	1ff9c <ble_gattc_process_resume_status+0x10>
        ble_gattc_proc_set_resume_timer(proc);
   1ff96:	f7ff ffe3 	bl	1ff60 <ble_gattc_proc_set_resume_timer>
        return 0;
   1ff9a:	2300      	movs	r3, #0
}
   1ff9c:	4618      	mov	r0, r3
   1ff9e:	bd08      	pop	{r3, pc}

0001ffa0 <ble_gattc_proc_set_exp_timer>:
{
   1ffa0:	b510      	push	{r4, lr}
   1ffa2:	4604      	mov	r4, r0
   1ffa4:	f7f6 fafc 	bl	165a0 <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   1ffa8:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   1ffac:	6060      	str	r0, [r4, #4]
}
   1ffae:	bd10      	pop	{r4, pc}

0001ffb0 <ble_gattc_ticks_until_resume>:
{
   1ffb0:	b508      	push	{r3, lr}
    if (ble_gattc_resume_at == 0) {
   1ffb2:	4b08      	ldr	r3, [pc, #32]	; (1ffd4 <ble_gattc_ticks_until_resume+0x24>)
   1ffb4:	681b      	ldr	r3, [r3, #0]
   1ffb6:	b13b      	cbz	r3, 1ffc8 <ble_gattc_ticks_until_resume+0x18>
   1ffb8:	f7f6 faf2 	bl	165a0 <os_time_get>
    diff = ble_gattc_resume_at - now;
   1ffbc:	4b05      	ldr	r3, [pc, #20]	; (1ffd4 <ble_gattc_ticks_until_resume+0x24>)
   1ffbe:	681b      	ldr	r3, [r3, #0]
   1ffc0:	1a18      	subs	r0, r3, r0
    if (diff <= 0) {
   1ffc2:	2800      	cmp	r0, #0
   1ffc4:	dd03      	ble.n	1ffce <ble_gattc_ticks_until_resume+0x1e>
}
   1ffc6:	bd08      	pop	{r3, pc}
        return BLE_HS_FOREVER;
   1ffc8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1ffcc:	e7fb      	b.n	1ffc6 <ble_gattc_ticks_until_resume+0x16>
        return 0;
   1ffce:	2000      	movs	r0, #0
   1ffd0:	e7f9      	b.n	1ffc6 <ble_gattc_ticks_until_resume+0x16>
   1ffd2:	bf00      	nop
   1ffd4:	10003aa8 	.word	0x10003aa8

0001ffd8 <ble_gattc_extract>:
{
   1ffd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ffdc:	4681      	mov	r9, r0
   1ffde:	4688      	mov	r8, r1
   1ffe0:	4692      	mov	sl, r2
   1ffe2:	461f      	mov	r7, r3
    STAILQ_INIT(dst_list);
   1ffe4:	2500      	movs	r5, #0
   1ffe6:	601d      	str	r5, [r3, #0]
   1ffe8:	605b      	str	r3, [r3, #4]
    ble_hs_lock();
   1ffea:	f001 fd8b 	bl	21b04 <ble_hs_lock>
    proc = STAILQ_FIRST(&ble_gattc_procs);
   1ffee:	4b17      	ldr	r3, [pc, #92]	; (2004c <ble_gattc_extract+0x74>)
   1fff0:	681c      	ldr	r4, [r3, #0]
    num_extracted = 0;
   1fff2:	46ab      	mov	fp, r5
    while (proc != NULL) {
   1fff4:	e00b      	b.n	2000e <ble_gattc_extract+0x36>
                STAILQ_REMOVE_HEAD(&ble_gattc_procs, next);
   1fff6:	4a15      	ldr	r2, [pc, #84]	; (2004c <ble_gattc_extract+0x74>)
   1fff8:	6813      	ldr	r3, [r2, #0]
   1fffa:	681b      	ldr	r3, [r3, #0]
   1fffc:	6013      	str	r3, [r2, #0]
   1fffe:	b9a3      	cbnz	r3, 2002a <ble_gattc_extract+0x52>
   20000:	6052      	str	r2, [r2, #4]
   20002:	e012      	b.n	2002a <ble_gattc_extract+0x52>
                STAILQ_REMOVE_AFTER(&ble_gattc_procs, prev, next);
   20004:	4b11      	ldr	r3, [pc, #68]	; (2004c <ble_gattc_extract+0x74>)
   20006:	605d      	str	r5, [r3, #4]
   20008:	e00f      	b.n	2002a <ble_gattc_extract+0x52>
            prev = proc;
   2000a:	4625      	mov	r5, r4
   2000c:	4634      	mov	r4, r6
    while (proc != NULL) {
   2000e:	b1c4      	cbz	r4, 20042 <ble_gattc_extract+0x6a>
        next = STAILQ_NEXT(proc, next);
   20010:	6826      	ldr	r6, [r4, #0]
        if (cb(proc, arg)) {
   20012:	4641      	mov	r1, r8
   20014:	4620      	mov	r0, r4
   20016:	47c8      	blx	r9
   20018:	2800      	cmp	r0, #0
   2001a:	d0f6      	beq.n	2000a <ble_gattc_extract+0x32>
            if (prev == NULL) {
   2001c:	2d00      	cmp	r5, #0
   2001e:	d0ea      	beq.n	1fff6 <ble_gattc_extract+0x1e>
                STAILQ_REMOVE_AFTER(&ble_gattc_procs, prev, next);
   20020:	682b      	ldr	r3, [r5, #0]
   20022:	681b      	ldr	r3, [r3, #0]
   20024:	602b      	str	r3, [r5, #0]
   20026:	2b00      	cmp	r3, #0
   20028:	d0ec      	beq.n	20004 <ble_gattc_extract+0x2c>
            STAILQ_INSERT_TAIL(dst_list, proc, next);
   2002a:	2300      	movs	r3, #0
   2002c:	6023      	str	r3, [r4, #0]
   2002e:	687b      	ldr	r3, [r7, #4]
   20030:	601c      	str	r4, [r3, #0]
   20032:	607c      	str	r4, [r7, #4]
            if (max_procs > 0) {
   20034:	f1ba 0f00 	cmp.w	sl, #0
   20038:	dde8      	ble.n	2000c <ble_gattc_extract+0x34>
                num_extracted++;
   2003a:	f10b 0b01 	add.w	fp, fp, #1
                if (num_extracted >= max_procs) {
   2003e:	45da      	cmp	sl, fp
   20040:	dce4      	bgt.n	2000c <ble_gattc_extract+0x34>
    ble_hs_unlock();
   20042:	f001 fd63 	bl	21b0c <ble_hs_unlock>
}
   20046:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2004a:	bf00      	nop
   2004c:	10003aa0 	.word	0x10003aa0

00020050 <ble_gattc_extract_expired>:
{
   20050:	b510      	push	{r4, lr}
   20052:	b082      	sub	sp, #8
   20054:	4604      	mov	r4, r0
   20056:	f7f6 faa3 	bl	165a0 <os_time_get>
    criteria.now = ble_npl_time_get();
   2005a:	9000      	str	r0, [sp, #0]
    criteria.next_exp_in = BLE_HS_FOREVER;
   2005c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   20060:	9301      	str	r3, [sp, #4]
    STAILQ_INIT(dst_list);
   20062:	2200      	movs	r2, #0
   20064:	6022      	str	r2, [r4, #0]
   20066:	6064      	str	r4, [r4, #4]
    ble_gattc_extract(ble_gattc_proc_matches_expired, &criteria, 0, dst_list);
   20068:	4623      	mov	r3, r4
   2006a:	4669      	mov	r1, sp
   2006c:	4802      	ldr	r0, [pc, #8]	; (20078 <ble_gattc_extract_expired+0x28>)
   2006e:	f7ff ffb3 	bl	1ffd8 <ble_gattc_extract>
}
   20072:	9801      	ldr	r0, [sp, #4]
   20074:	b002      	add	sp, #8
   20076:	bd10      	pop	{r4, pc}
   20078:	0001fa95 	.word	0x0001fa95

0002007c <ble_gattc_extract_stalled>:
{
   2007c:	b508      	push	{r3, lr}
   2007e:	4603      	mov	r3, r0
    ble_gattc_extract(ble_gattc_proc_matches_stalled, NULL, 0, dst_list);
   20080:	2200      	movs	r2, #0
   20082:	4611      	mov	r1, r2
   20084:	4801      	ldr	r0, [pc, #4]	; (2008c <ble_gattc_extract_stalled+0x10>)
   20086:	f7ff ffa7 	bl	1ffd8 <ble_gattc_extract>
}
   2008a:	bd08      	pop	{r3, pc}
   2008c:	0001fab3 	.word	0x0001fab3

00020090 <ble_gattc_extract_by_conn_op>:
{
   20090:	b500      	push	{lr}
   20092:	b083      	sub	sp, #12
    criteria.conn_handle = conn_handle;
   20094:	f8ad 0004 	strh.w	r0, [sp, #4]
    criteria.op = op;
   20098:	f88d 1006 	strb.w	r1, [sp, #6]
    ble_gattc_extract(ble_gattc_proc_matches_conn_op, &criteria, max_procs, dst_list);
   2009c:	a901      	add	r1, sp, #4
   2009e:	4803      	ldr	r0, [pc, #12]	; (200ac <ble_gattc_extract_by_conn_op+0x1c>)
   200a0:	f7ff ff9a 	bl	1ffd8 <ble_gattc_extract>
}
   200a4:	b003      	add	sp, #12
   200a6:	f85d fb04 	ldr.w	pc, [sp], #4
   200aa:	bf00      	nop
   200ac:	0001fa71 	.word	0x0001fa71

000200b0 <ble_gattc_extract_first_by_conn_op>:
{
   200b0:	b500      	push	{lr}
   200b2:	b083      	sub	sp, #12
    ble_gattc_extract_by_conn_op(conn_handle, op, 1, &dst_list);
   200b4:	466b      	mov	r3, sp
   200b6:	2201      	movs	r2, #1
   200b8:	f7ff ffea 	bl	20090 <ble_gattc_extract_by_conn_op>
}
   200bc:	9800      	ldr	r0, [sp, #0]
   200be:	b003      	add	sp, #12
   200c0:	f85d fb04 	ldr.w	pc, [sp], #4

000200c4 <ble_gattc_proc_insert>:
{
   200c4:	b510      	push	{r4, lr}
   200c6:	4604      	mov	r4, r0
    ble_hs_lock();
   200c8:	f001 fd1c 	bl	21b04 <ble_hs_lock>
    STAILQ_INSERT_TAIL(&ble_gattc_procs, proc, next);
   200cc:	2300      	movs	r3, #0
   200ce:	6023      	str	r3, [r4, #0]
   200d0:	4b03      	ldr	r3, [pc, #12]	; (200e0 <ble_gattc_proc_insert+0x1c>)
   200d2:	685a      	ldr	r2, [r3, #4]
   200d4:	6014      	str	r4, [r2, #0]
   200d6:	605c      	str	r4, [r3, #4]
    ble_hs_unlock();
   200d8:	f001 fd18 	bl	21b0c <ble_hs_unlock>
}
   200dc:	bd10      	pop	{r4, pc}
   200de:	bf00      	nop
   200e0:	10003aa0 	.word	0x10003aa0

000200e4 <ble_gattc_indicate_tmo>:
    ble_gatts_send_next_indicate(proc->conn_handle);
}

static void
ble_gattc_indicate_tmo(struct ble_gattc_proc *proc)
{
   200e4:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gap_notify_tx_event(BLE_HS_ETIMEOUT, proc->conn_handle,
   200e6:	2301      	movs	r3, #1
   200e8:	8982      	ldrh	r2, [r0, #12]
   200ea:	8901      	ldrh	r1, [r0, #8]
   200ec:	200d      	movs	r0, #13
   200ee:	f7ff fb57 	bl	1f7a0 <ble_gap_notify_tx_event>
                            proc->indicate.chr_val_handle, 1);
}
   200f2:	bd08      	pop	{r3, pc}

000200f4 <ble_gattc_write_cb>:
{
   200f4:	b570      	push	{r4, r5, r6, lr}
   200f6:	b082      	sub	sp, #8
   200f8:	4604      	mov	r4, r0
    if (status != 0 && status != BLE_HS_EDONE) {
   200fa:	4608      	mov	r0, r1
   200fc:	b129      	cbz	r1, 2010a <ble_gattc_write_cb+0x16>
   200fe:	290e      	cmp	r1, #14
   20100:	d003      	beq.n	2010a <ble_gattc_write_cb+0x16>
        STATS_INC(ble_gattc_stats, write_fail);
   20102:	490c      	ldr	r1, [pc, #48]	; (20134 <ble_gattc_write_cb+0x40>)
   20104:	6f0b      	ldr	r3, [r1, #112]	; 0x70
   20106:	3301      	adds	r3, #1
   20108:	670b      	str	r3, [r1, #112]	; 0x70
    if (proc->write.cb == NULL) {
   2010a:	6925      	ldr	r5, [r4, #16]
   2010c:	b185      	cbz	r5, 20130 <ble_gattc_write_cb+0x3c>
        memset(&attr, 0, sizeof attr);
   2010e:	2300      	movs	r3, #0
   20110:	9300      	str	r3, [sp, #0]
   20112:	9301      	str	r3, [sp, #4]
        attr.handle = proc->write.att_handle;
   20114:	89a3      	ldrh	r3, [r4, #12]
   20116:	f8ad 3000 	strh.w	r3, [sp]
        rc = proc->write.cb(proc->conn_handle,
   2011a:	8926      	ldrh	r6, [r4, #8]
                            ble_gattc_error(status, att_handle),
   2011c:	4611      	mov	r1, r2
   2011e:	f7ff fcd7 	bl	1fad0 <ble_gattc_error>
   20122:	4601      	mov	r1, r0
        rc = proc->write.cb(proc->conn_handle,
   20124:	6963      	ldr	r3, [r4, #20]
   20126:	466a      	mov	r2, sp
   20128:	4630      	mov	r0, r6
   2012a:	47a8      	blx	r5
}
   2012c:	b002      	add	sp, #8
   2012e:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   20130:	2000      	movs	r0, #0
    return rc;
   20132:	e7fb      	b.n	2012c <ble_gattc_write_cb+0x38>
   20134:	10003aac 	.word	0x10003aac

00020138 <ble_gattc_write_tmo>:
{
   20138:	b508      	push	{r3, lr}
    ble_gattc_write_cb(proc, BLE_HS_ETIMEOUT, 0);
   2013a:	2200      	movs	r2, #0
   2013c:	210d      	movs	r1, #13
   2013e:	f7ff ffd9 	bl	200f4 <ble_gattc_write_cb>
}
   20142:	bd08      	pop	{r3, pc}

00020144 <ble_gattc_write_err>:
{
   20144:	b508      	push	{r3, lr}
    ble_gattc_write_cb(proc, status, att_handle);
   20146:	f7ff ffd5 	bl	200f4 <ble_gattc_write_cb>
}
   2014a:	bd08      	pop	{r3, pc}

0002014c <ble_gattc_proc_free>:
    if (proc != NULL) {
   2014c:	b128      	cbz	r0, 2015a <ble_gattc_proc_free+0xe>
{
   2014e:	b508      	push	{r3, lr}
   20150:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_gattc_proc_pool, proc);
   20152:	4802      	ldr	r0, [pc, #8]	; (2015c <ble_gattc_proc_free+0x10>)
   20154:	f7f5 fe93 	bl	15e7e <os_memblock_put>
}
   20158:	bd08      	pop	{r3, pc}
   2015a:	4770      	bx	lr
   2015c:	10003a84 	.word	0x10003a84

00020160 <ble_gattc_fail_procs>:
{
   20160:	b530      	push	{r4, r5, lr}
   20162:	b083      	sub	sp, #12
   20164:	4615      	mov	r5, r2
    ble_gattc_extract_by_conn_op(conn_handle, op, 0, &temp_list);
   20166:	466b      	mov	r3, sp
   20168:	2200      	movs	r2, #0
   2016a:	f7ff ff91 	bl	20090 <ble_gattc_extract_by_conn_op>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   2016e:	e004      	b.n	2017a <ble_gattc_fail_procs+0x1a>
        STAILQ_REMOVE_HEAD(&temp_list, next);
   20170:	f8cd d004 	str.w	sp, [sp, #4]
        ble_gattc_proc_free(proc);
   20174:	4620      	mov	r0, r4
   20176:	f7ff ffe9 	bl	2014c <ble_gattc_proc_free>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   2017a:	9c00      	ldr	r4, [sp, #0]
   2017c:	b16c      	cbz	r4, 2019a <ble_gattc_fail_procs+0x3a>
        err_cb = ble_gattc_err_dispatch_get(proc->op);
   2017e:	7aa0      	ldrb	r0, [r4, #10]
   20180:	f7ff fc64 	bl	1fa4c <ble_gattc_err_dispatch_get>
   20184:	4603      	mov	r3, r0
        err_cb(proc, status, 0);
   20186:	2200      	movs	r2, #0
   20188:	4629      	mov	r1, r5
   2018a:	4620      	mov	r0, r4
   2018c:	4798      	blx	r3
        STAILQ_REMOVE_HEAD(&temp_list, next);
   2018e:	9b00      	ldr	r3, [sp, #0]
   20190:	681b      	ldr	r3, [r3, #0]
   20192:	9300      	str	r3, [sp, #0]
   20194:	2b00      	cmp	r3, #0
   20196:	d1ed      	bne.n	20174 <ble_gattc_fail_procs+0x14>
   20198:	e7ea      	b.n	20170 <ble_gattc_fail_procs+0x10>
}
   2019a:	b003      	add	sp, #12
   2019c:	bd30      	pop	{r4, r5, pc}

0002019e <ble_gattc_write_reliable_err>:
{
   2019e:	b510      	push	{r4, lr}
   201a0:	4604      	mov	r4, r0
    ble_gattc_write_reliable_cb(proc, status, att_handle);
   201a2:	f7ff feb5 	bl	1ff10 <ble_gattc_write_reliable_cb>
    if (proc->write_reliable.cur_attr < proc->write_reliable.num_attrs) {
   201a6:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   201aa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   201ae:	429a      	cmp	r2, r3
   201b0:	d300      	bcc.n	201b4 <ble_gattc_write_reliable_err+0x16>
}
   201b2:	bd10      	pop	{r4, pc}
        ble_att_clt_tx_exec_write(proc->conn_handle,
   201b4:	2100      	movs	r1, #0
   201b6:	8920      	ldrh	r0, [r4, #8]
   201b8:	f7fc fcde 	bl	1cb78 <ble_att_clt_tx_exec_write>
}
   201bc:	e7f9      	b.n	201b2 <ble_gattc_write_reliable_err+0x14>

000201be <ble_gattc_write_long_err>:
{
   201be:	b570      	push	{r4, r5, r6, lr}
   201c0:	4604      	mov	r4, r0
   201c2:	460d      	mov	r5, r1
   201c4:	4616      	mov	r6, r2
    if (proc->write_long.attr.offset > 0 &&
   201c6:	89c3      	ldrh	r3, [r0, #14]
   201c8:	b11b      	cbz	r3, 201d2 <ble_gattc_write_long_err+0x14>
            OS_MBUF_PKTLEN(proc->write_long.attr.om)) {
   201ca:	6902      	ldr	r2, [r0, #16]
   201cc:	8a12      	ldrh	r2, [r2, #16]
    if (proc->write_long.attr.offset > 0 &&
   201ce:	4293      	cmp	r3, r2
   201d0:	d305      	bcc.n	201de <ble_gattc_write_long_err+0x20>
    ble_gattc_write_long_cb(proc, status, att_handle);
   201d2:	4632      	mov	r2, r6
   201d4:	4629      	mov	r1, r5
   201d6:	4620      	mov	r0, r4
   201d8:	f7ff fe78 	bl	1fecc <ble_gattc_write_long_cb>
}
   201dc:	bd70      	pop	{r4, r5, r6, pc}
        ble_att_clt_tx_exec_write(proc->conn_handle,
   201de:	2100      	movs	r1, #0
   201e0:	8900      	ldrh	r0, [r0, #8]
   201e2:	f7fc fcc9 	bl	1cb78 <ble_att_clt_tx_exec_write>
   201e6:	e7f4      	b.n	201d2 <ble_gattc_write_long_err+0x14>

000201e8 <ble_gattc_write_reliable_tx>:
{
   201e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   201ec:	4604      	mov	r4, r0
    attr_idx = proc->write_reliable.cur_attr;
   201ee:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
    if (attr_idx >= proc->write_reliable.num_attrs) {
   201f2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   201f6:	429d      	cmp	r5, r3
   201f8:	d226      	bcs.n	20248 <ble_gattc_write_reliable_tx+0x60>
    attr = proc->write_reliable.attrs + attr_idx;
   201fa:	f100 070c 	add.w	r7, r0, #12
   201fe:	eb07 06c5 	add.w	r6, r7, r5, lsl #3
    max_sz = ble_att_mtu(proc->conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ;
   20202:	8900      	ldrh	r0, [r0, #8]
   20204:	f7fc fc0b 	bl	1ca1e <ble_att_mtu>
   20208:	3805      	subs	r0, #5
   2020a:	b280      	uxth	r0, r0
    if (max_sz <= 0) {
   2020c:	b348      	cbz	r0, 20262 <ble_gattc_write_reliable_tx+0x7a>
        min(max_sz, OS_MBUF_PKTLEN(attr->om) - attr->offset);
   2020e:	6873      	ldr	r3, [r6, #4]
   20210:	8a1b      	ldrh	r3, [r3, #16]
   20212:	8872      	ldrh	r2, [r6, #2]
   20214:	1a9b      	subs	r3, r3, r2
   20216:	4298      	cmp	r0, r3
   20218:	bfa8      	it	ge
   2021a:	4618      	movge	r0, r3
    proc->write_reliable.length =
   2021c:	85e0      	strh	r0, [r4, #46]	; 0x2e
    om = ble_hs_mbuf_att_pkt();
   2021e:	f003 fb5a 	bl	238d6 <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
   20222:	4680      	mov	r8, r0
   20224:	b308      	cbz	r0, 2026a <ble_gattc_write_reliable_tx+0x82>
    rc = os_mbuf_appendfrom(om, attr->om, attr->offset,
   20226:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   20228:	8872      	ldrh	r2, [r6, #2]
   2022a:	6871      	ldr	r1, [r6, #4]
   2022c:	f7f5 faa0 	bl	15770 <os_mbuf_appendfrom>
    if (rc != 0) {
   20230:	b9e8      	cbnz	r0, 2026e <ble_gattc_write_reliable_tx+0x86>
    rc = ble_att_clt_tx_prep_write(proc->conn_handle, attr->handle,
   20232:	4643      	mov	r3, r8
   20234:	8872      	ldrh	r2, [r6, #2]
   20236:	f837 1035 	ldrh.w	r1, [r7, r5, lsl #3]
   2023a:	8920      	ldrh	r0, [r4, #8]
   2023c:	f7fc fc98 	bl	1cb70 <ble_att_clt_tx_prep_write>
   20240:	4604      	mov	r4, r0
    om = NULL;
   20242:	f04f 0800 	mov.w	r8, #0
done:
   20246:	e006      	b.n	20256 <ble_gattc_write_reliable_tx+0x6e>
        rc = ble_att_clt_tx_exec_write(proc->conn_handle,
   20248:	2101      	movs	r1, #1
   2024a:	8900      	ldrh	r0, [r0, #8]
   2024c:	f7fc fc94 	bl	1cb78 <ble_att_clt_tx_exec_write>
   20250:	4604      	mov	r4, r0
    om = NULL;
   20252:	f04f 0800 	mov.w	r8, #0
    os_mbuf_free_chain(om);
   20256:	4640      	mov	r0, r8
   20258:	f7f5 fa0c 	bl	15674 <os_mbuf_free_chain>
}
   2025c:	4620      	mov	r0, r4
   2025e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOTCONN;
   20262:	2407      	movs	r4, #7
    om = NULL;
   20264:	f04f 0800 	mov.w	r8, #0
   20268:	e7f5      	b.n	20256 <ble_gattc_write_reliable_tx+0x6e>
        rc = BLE_HS_ENOMEM;
   2026a:	2406      	movs	r4, #6
   2026c:	e7f3      	b.n	20256 <ble_gattc_write_reliable_tx+0x6e>
        rc = BLE_HS_ENOMEM;
   2026e:	2406      	movs	r4, #6
   20270:	e7f1      	b.n	20256 <ble_gattc_write_reliable_tx+0x6e>

00020272 <ble_gattc_write_reliable_resume>:
{
   20272:	b538      	push	{r3, r4, r5, lr}
   20274:	4604      	mov	r4, r0
    status = ble_gattc_write_reliable_tx(proc);
   20276:	f7ff ffb7 	bl	201e8 <ble_gattc_write_reliable_tx>
   2027a:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   2027c:	4620      	mov	r0, r4
   2027e:	f7ff fe85 	bl	1ff8c <ble_gattc_process_resume_status>
    if (rc != 0) {
   20282:	4605      	mov	r5, r0
   20284:	b908      	cbnz	r0, 2028a <ble_gattc_write_reliable_resume+0x18>
}
   20286:	4628      	mov	r0, r5
   20288:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_write_reliable_cb(proc, rc, 0);
   2028a:	2200      	movs	r2, #0
   2028c:	4601      	mov	r1, r0
   2028e:	4620      	mov	r0, r4
   20290:	f7ff fe3e 	bl	1ff10 <ble_gattc_write_reliable_cb>
        return rc;
   20294:	e7f7      	b.n	20286 <ble_gattc_write_reliable_resume+0x14>

00020296 <ble_gattc_write_long_tx>:
{
   20296:	b538      	push	{r3, r4, r5, lr}
   20298:	4604      	mov	r4, r0
    max_sz = ble_att_mtu(proc->conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ;
   2029a:	8900      	ldrh	r0, [r0, #8]
   2029c:	f7fc fbbf 	bl	1ca1e <ble_att_mtu>
   202a0:	1f42      	subs	r2, r0, #5
    if (max_sz <= 0) {
   202a2:	2a00      	cmp	r2, #0
   202a4:	dd27      	ble.n	202f6 <ble_gattc_write_long_tx+0x60>
    write_len = min(max_sz,
   202a6:	6923      	ldr	r3, [r4, #16]
   202a8:	8a1b      	ldrh	r3, [r3, #16]
   202aa:	89e0      	ldrh	r0, [r4, #14]
   202ac:	1a18      	subs	r0, r3, r0
   202ae:	4290      	cmp	r0, r2
   202b0:	bfa8      	it	ge
   202b2:	4610      	movge	r0, r2
    if (write_len <= 0) {
   202b4:	2800      	cmp	r0, #0
   202b6:	dd17      	ble.n	202e8 <ble_gattc_write_long_tx+0x52>
    proc->write_long.length = write_len;
   202b8:	82a0      	strh	r0, [r4, #20]
    om = ble_hs_mbuf_att_pkt();
   202ba:	f003 fb0c 	bl	238d6 <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
   202be:	4605      	mov	r5, r0
   202c0:	b1e0      	cbz	r0, 202fc <ble_gattc_write_long_tx+0x66>
    rc = os_mbuf_appendfrom(om, proc->write_long.attr.om,
   202c2:	8aa3      	ldrh	r3, [r4, #20]
   202c4:	89e2      	ldrh	r2, [r4, #14]
   202c6:	6921      	ldr	r1, [r4, #16]
   202c8:	f7f5 fa52 	bl	15770 <os_mbuf_appendfrom>
    if (rc != 0) {
   202cc:	b9c0      	cbnz	r0, 20300 <ble_gattc_write_long_tx+0x6a>
    rc = ble_att_clt_tx_prep_write(proc->conn_handle,
   202ce:	462b      	mov	r3, r5
   202d0:	89e2      	ldrh	r2, [r4, #14]
   202d2:	89a1      	ldrh	r1, [r4, #12]
   202d4:	8920      	ldrh	r0, [r4, #8]
   202d6:	f7fc fc4b 	bl	1cb70 <ble_att_clt_tx_prep_write>
   202da:	4604      	mov	r4, r0
    om = NULL;
   202dc:	2500      	movs	r5, #0
    os_mbuf_free_chain(om);
   202de:	4628      	mov	r0, r5
   202e0:	f7f5 f9c8 	bl	15674 <os_mbuf_free_chain>
}
   202e4:	4620      	mov	r0, r4
   202e6:	bd38      	pop	{r3, r4, r5, pc}
        rc = ble_att_clt_tx_exec_write(proc->conn_handle,
   202e8:	2101      	movs	r1, #1
   202ea:	8920      	ldrh	r0, [r4, #8]
   202ec:	f7fc fc44 	bl	1cb78 <ble_att_clt_tx_exec_write>
   202f0:	4604      	mov	r4, r0
    om = NULL;
   202f2:	2500      	movs	r5, #0
        goto done;
   202f4:	e7f3      	b.n	202de <ble_gattc_write_long_tx+0x48>
        rc = BLE_HS_ENOTCONN;
   202f6:	2407      	movs	r4, #7
    om = NULL;
   202f8:	2500      	movs	r5, #0
   202fa:	e7f0      	b.n	202de <ble_gattc_write_long_tx+0x48>
        rc = BLE_HS_ENOMEM;
   202fc:	2406      	movs	r4, #6
   202fe:	e7ee      	b.n	202de <ble_gattc_write_long_tx+0x48>
        rc = BLE_HS_ENOMEM;
   20300:	2406      	movs	r4, #6
   20302:	e7ec      	b.n	202de <ble_gattc_write_long_tx+0x48>

00020304 <ble_gattc_write_long_resume>:
{
   20304:	b538      	push	{r3, r4, r5, lr}
   20306:	4604      	mov	r4, r0
    status = ble_gattc_write_long_tx(proc);
   20308:	f7ff ffc5 	bl	20296 <ble_gattc_write_long_tx>
   2030c:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   2030e:	4620      	mov	r0, r4
   20310:	f7ff fe3c 	bl	1ff8c <ble_gattc_process_resume_status>
    if (rc != 0) {
   20314:	4605      	mov	r5, r0
   20316:	b908      	cbnz	r0, 2031c <ble_gattc_write_long_resume+0x18>
}
   20318:	4628      	mov	r0, r5
   2031a:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_write_long_cb(proc, rc, 0);
   2031c:	2200      	movs	r2, #0
   2031e:	4601      	mov	r1, r0
   20320:	4620      	mov	r0, r4
   20322:	f7ff fdd3 	bl	1fecc <ble_gattc_write_long_cb>
        return rc;
   20326:	e7f7      	b.n	20318 <ble_gattc_write_long_resume+0x14>

00020328 <ble_gattc_read_long_tx>:
{
   20328:	b508      	push	{r3, lr}
    if (proc->read_long.offset == 0) {
   2032a:	89c2      	ldrh	r2, [r0, #14]
   2032c:	b922      	cbnz	r2, 20338 <ble_gattc_read_long_tx+0x10>
        rc = ble_att_clt_tx_read(proc->conn_handle, proc->read_long.handle);
   2032e:	8981      	ldrh	r1, [r0, #12]
   20330:	8900      	ldrh	r0, [r0, #8]
   20332:	f7fc fc0d 	bl	1cb50 <ble_att_clt_tx_read>
}
   20336:	bd08      	pop	{r3, pc}
        rc = ble_att_clt_tx_read_blob(proc->conn_handle,
   20338:	8981      	ldrh	r1, [r0, #12]
   2033a:	8900      	ldrh	r0, [r0, #8]
   2033c:	f7fc fc0c 	bl	1cb58 <ble_att_clt_tx_read_blob>
        if (rc != 0) {
   20340:	e7f9      	b.n	20336 <ble_gattc_read_long_tx+0xe>

00020342 <ble_gattc_read_long_resume>:
{
   20342:	b538      	push	{r3, r4, r5, lr}
   20344:	4604      	mov	r4, r0
    status = ble_gattc_read_long_tx(proc);
   20346:	f7ff ffef 	bl	20328 <ble_gattc_read_long_tx>
   2034a:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   2034c:	4620      	mov	r0, r4
   2034e:	f7ff fe1d 	bl	1ff8c <ble_gattc_process_resume_status>
    if (rc != 0) {
   20352:	4605      	mov	r5, r0
   20354:	b908      	cbnz	r0, 2035a <ble_gattc_read_long_resume+0x18>
}
   20356:	4628      	mov	r0, r5
   20358:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_read_long_cb(proc, rc, 0, NULL);
   2035a:	2300      	movs	r3, #0
   2035c:	461a      	mov	r2, r3
   2035e:	4601      	mov	r1, r0
   20360:	4620      	mov	r0, r4
   20362:	f7ff fd55 	bl	1fe10 <ble_gattc_read_long_cb>
        return rc;
   20366:	e7f6      	b.n	20356 <ble_gattc_read_long_resume+0x14>

00020368 <ble_gattc_disc_all_dscs_tx>:
{
   20368:	b508      	push	{r3, lr}
                                  proc->disc_all_dscs.prev_handle + 1,
   2036a:	89c1      	ldrh	r1, [r0, #14]
    rc = ble_att_clt_tx_find_info(proc->conn_handle,
   2036c:	3101      	adds	r1, #1
   2036e:	8a02      	ldrh	r2, [r0, #16]
   20370:	b289      	uxth	r1, r1
   20372:	8900      	ldrh	r0, [r0, #8]
   20374:	f7fc fbe0 	bl	1cb38 <ble_att_clt_tx_find_info>
}
   20378:	bd08      	pop	{r3, pc}

0002037a <ble_gattc_disc_all_dscs_resume>:
{
   2037a:	b538      	push	{r3, r4, r5, lr}
   2037c:	4604      	mov	r4, r0
    status = ble_gattc_disc_all_dscs_tx(proc);
   2037e:	f7ff fff3 	bl	20368 <ble_gattc_disc_all_dscs_tx>
   20382:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   20384:	4620      	mov	r0, r4
   20386:	f7ff fe01 	bl	1ff8c <ble_gattc_process_resume_status>
    if (rc != 0) {
   2038a:	4605      	mov	r5, r0
   2038c:	b908      	cbnz	r0, 20392 <ble_gattc_disc_all_dscs_resume+0x18>
}
   2038e:	4628      	mov	r0, r5
   20390:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_dscs_cb(proc, rc, 0, NULL);
   20392:	2300      	movs	r3, #0
   20394:	461a      	mov	r2, r3
   20396:	4601      	mov	r1, r0
   20398:	4620      	mov	r0, r4
   2039a:	f7ff fcb7 	bl	1fd0c <ble_gattc_disc_all_dscs_cb>
        return rc;
   2039e:	e7f6      	b.n	2038e <ble_gattc_disc_all_dscs_resume+0x14>

000203a0 <ble_gattc_disc_chr_uuid_tx>:
{
   203a0:	b500      	push	{lr}
   203a2:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   203a4:	4b06      	ldr	r3, [pc, #24]	; (203c0 <ble_gattc_disc_chr_uuid_tx+0x20>)
   203a6:	681b      	ldr	r3, [r3, #0]
   203a8:	9301      	str	r3, [sp, #4]
                                  proc->disc_chr_uuid.prev_handle + 1,
   203aa:	8c01      	ldrh	r1, [r0, #32]
    rc = ble_att_clt_tx_read_type(proc->conn_handle,
   203ac:	3101      	adds	r1, #1
   203ae:	ab01      	add	r3, sp, #4
   203b0:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   203b2:	b289      	uxth	r1, r1
   203b4:	8900      	ldrh	r0, [r0, #8]
   203b6:	f7fc fbc7 	bl	1cb48 <ble_att_clt_tx_read_type>
}
   203ba:	b003      	add	sp, #12
   203bc:	f85d fb04 	ldr.w	pc, [sp], #4
   203c0:	00030094 	.word	0x00030094

000203c4 <ble_gattc_disc_chr_uuid_resume>:
{
   203c4:	b538      	push	{r3, r4, r5, lr}
   203c6:	4604      	mov	r4, r0
    status = ble_gattc_disc_chr_uuid_tx(proc);
   203c8:	f7ff ffea 	bl	203a0 <ble_gattc_disc_chr_uuid_tx>
   203cc:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   203ce:	4620      	mov	r0, r4
   203d0:	f7ff fddc 	bl	1ff8c <ble_gattc_process_resume_status>
    if (rc != 0) {
   203d4:	4605      	mov	r5, r0
   203d6:	b908      	cbnz	r0, 203dc <ble_gattc_disc_chr_uuid_resume+0x18>
}
   203d8:	4628      	mov	r0, r5
   203da:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_chr_uuid_cb(proc, rc, 0, NULL);
   203dc:	2300      	movs	r3, #0
   203de:	461a      	mov	r2, r3
   203e0:	4601      	mov	r1, r0
   203e2:	4620      	mov	r0, r4
   203e4:	f7ff fc64 	bl	1fcb0 <ble_gattc_disc_chr_uuid_cb>
        return rc;
   203e8:	e7f6      	b.n	203d8 <ble_gattc_disc_chr_uuid_resume+0x14>
	...

000203ec <ble_gattc_disc_all_chrs_tx>:
{
   203ec:	b500      	push	{lr}
   203ee:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   203f0:	4b06      	ldr	r3, [pc, #24]	; (2040c <ble_gattc_disc_all_chrs_tx+0x20>)
   203f2:	681b      	ldr	r3, [r3, #0]
   203f4:	9301      	str	r3, [sp, #4]
                                  proc->disc_all_chrs.prev_handle + 1,
   203f6:	8981      	ldrh	r1, [r0, #12]
    rc = ble_att_clt_tx_read_type(proc->conn_handle,
   203f8:	3101      	adds	r1, #1
   203fa:	ab01      	add	r3, sp, #4
   203fc:	89c2      	ldrh	r2, [r0, #14]
   203fe:	b289      	uxth	r1, r1
   20400:	8900      	ldrh	r0, [r0, #8]
   20402:	f7fc fba1 	bl	1cb48 <ble_att_clt_tx_read_type>
}
   20406:	b003      	add	sp, #12
   20408:	f85d fb04 	ldr.w	pc, [sp], #4
   2040c:	00030094 	.word	0x00030094

00020410 <ble_gattc_disc_all_chrs_resume>:
{
   20410:	b538      	push	{r3, r4, r5, lr}
   20412:	4604      	mov	r4, r0
    status = ble_gattc_disc_all_chrs_tx(proc);
   20414:	f7ff ffea 	bl	203ec <ble_gattc_disc_all_chrs_tx>
   20418:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   2041a:	4620      	mov	r0, r4
   2041c:	f7ff fdb6 	bl	1ff8c <ble_gattc_process_resume_status>
    if (rc != 0) {
   20420:	4605      	mov	r5, r0
   20422:	b908      	cbnz	r0, 20428 <ble_gattc_disc_all_chrs_resume+0x18>
}
   20424:	4628      	mov	r0, r5
   20426:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_chrs_cb(proc, rc, 0, NULL);
   20428:	2300      	movs	r3, #0
   2042a:	461a      	mov	r2, r3
   2042c:	4601      	mov	r1, r0
   2042e:	4620      	mov	r0, r4
   20430:	f7ff fc10 	bl	1fc54 <ble_gattc_disc_all_chrs_cb>
        return rc;
   20434:	e7f6      	b.n	20424 <ble_gattc_disc_all_chrs_resume+0x14>
	...

00020438 <ble_gattc_find_inc_svcs_tx>:
{
   20438:	b500      	push	{lr}
   2043a:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_INCLUDE);
   2043c:	4b09      	ldr	r3, [pc, #36]	; (20464 <ble_gattc_find_inc_svcs_tx+0x2c>)
   2043e:	685b      	ldr	r3, [r3, #4]
   20440:	9301      	str	r3, [sp, #4]
    if (proc->find_inc_svcs.cur_start == 0) {
   20442:	8a01      	ldrh	r1, [r0, #16]
   20444:	b951      	cbnz	r1, 2045c <ble_gattc_find_inc_svcs_tx+0x24>
                                      proc->find_inc_svcs.prev_handle + 1,
   20446:	8981      	ldrh	r1, [r0, #12]
        rc = ble_att_clt_tx_read_type(proc->conn_handle,
   20448:	3101      	adds	r1, #1
   2044a:	ab01      	add	r3, sp, #4
   2044c:	89c2      	ldrh	r2, [r0, #14]
   2044e:	b289      	uxth	r1, r1
   20450:	8900      	ldrh	r0, [r0, #8]
   20452:	f7fc fb79 	bl	1cb48 <ble_att_clt_tx_read_type>
}
   20456:	b003      	add	sp, #12
   20458:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = ble_att_clt_tx_read(proc->conn_handle,
   2045c:	8900      	ldrh	r0, [r0, #8]
   2045e:	f7fc fb77 	bl	1cb50 <ble_att_clt_tx_read>
        if (rc != 0) {
   20462:	e7f8      	b.n	20456 <ble_gattc_find_inc_svcs_tx+0x1e>
   20464:	00030094 	.word	0x00030094

00020468 <ble_gattc_find_inc_svcs_resume>:
{
   20468:	b538      	push	{r3, r4, r5, lr}
   2046a:	4604      	mov	r4, r0
    status = ble_gattc_find_inc_svcs_tx(proc);
   2046c:	f7ff ffe4 	bl	20438 <ble_gattc_find_inc_svcs_tx>
   20470:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   20472:	4620      	mov	r0, r4
   20474:	f7ff fd8a 	bl	1ff8c <ble_gattc_process_resume_status>
    if (rc != 0) {
   20478:	4605      	mov	r5, r0
   2047a:	b908      	cbnz	r0, 20480 <ble_gattc_find_inc_svcs_resume+0x18>
}
   2047c:	4628      	mov	r0, r5
   2047e:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_find_inc_svcs_cb(proc, rc, 0, NULL);
   20480:	2300      	movs	r3, #0
   20482:	461a      	mov	r2, r3
   20484:	4601      	mov	r1, r0
   20486:	4620      	mov	r0, r4
   20488:	f7ff fbb4 	bl	1fbf4 <ble_gattc_find_inc_svcs_cb>
        return rc;
   2048c:	e7f6      	b.n	2047c <ble_gattc_find_inc_svcs_resume+0x14>

0002048e <ble_gattc_disc_svc_uuid_tx>:
{
   2048e:	b5f0      	push	{r4, r5, r6, r7, lr}
   20490:	b087      	sub	sp, #28
   20492:	4604      	mov	r4, r0
    ble_uuid_flat(&proc->disc_svc_uuid.service_uuid.u, val);
   20494:	f100 060c 	add.w	r6, r0, #12
   20498:	ad02      	add	r5, sp, #8
   2049a:	4629      	mov	r1, r5
   2049c:	4630      	mov	r0, r6
   2049e:	f006 fa8d 	bl	269bc <ble_uuid_flat>
    rc = ble_att_clt_tx_find_type_value(proc->conn_handle,
   204a2:	8927      	ldrh	r7, [r4, #8]
                                        proc->disc_svc_uuid.prev_handle + 1,
   204a4:	8c24      	ldrh	r4, [r4, #32]
    rc = ble_att_clt_tx_find_type_value(proc->conn_handle,
   204a6:	4630      	mov	r0, r6
   204a8:	f006 fab4 	bl	26a14 <ble_uuid_length>
   204ac:	1c61      	adds	r1, r4, #1
   204ae:	9001      	str	r0, [sp, #4]
   204b0:	9500      	str	r5, [sp, #0]
   204b2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   204b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   204ba:	b289      	uxth	r1, r1
   204bc:	4638      	mov	r0, r7
   204be:	f7fc fb3f 	bl	1cb40 <ble_att_clt_tx_find_type_value>
}
   204c2:	b007      	add	sp, #28
   204c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000204c6 <ble_gattc_disc_svc_uuid_resume>:
{
   204c6:	b538      	push	{r3, r4, r5, lr}
   204c8:	4604      	mov	r4, r0
    status = ble_gattc_disc_svc_uuid_tx(proc);
   204ca:	f7ff ffe0 	bl	2048e <ble_gattc_disc_svc_uuid_tx>
   204ce:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   204d0:	4620      	mov	r0, r4
   204d2:	f7ff fd5b 	bl	1ff8c <ble_gattc_process_resume_status>
    if (rc != 0) {
   204d6:	4605      	mov	r5, r0
   204d8:	b908      	cbnz	r0, 204de <ble_gattc_disc_svc_uuid_resume+0x18>
}
   204da:	4628      	mov	r0, r5
   204dc:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_svc_uuid_cb(proc, rc, 0, NULL);
   204de:	2300      	movs	r3, #0
   204e0:	461a      	mov	r2, r3
   204e2:	4601      	mov	r1, r0
   204e4:	4620      	mov	r0, r4
   204e6:	f7ff fb57 	bl	1fb98 <ble_gattc_disc_svc_uuid_cb>
        return rc;
   204ea:	e7f6      	b.n	204da <ble_gattc_disc_svc_uuid_resume+0x14>

000204ec <ble_gattc_disc_all_svcs_tx>:
{
   204ec:	b500      	push	{lr}
   204ee:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_PRIMARY_SERVICE);
   204f0:	4b07      	ldr	r3, [pc, #28]	; (20510 <ble_gattc_disc_all_svcs_tx+0x24>)
   204f2:	689b      	ldr	r3, [r3, #8]
   204f4:	9301      	str	r3, [sp, #4]
                                        proc->disc_all_svcs.prev_handle + 1,
   204f6:	8981      	ldrh	r1, [r0, #12]
    rc = ble_att_clt_tx_read_group_type(proc->conn_handle,
   204f8:	3101      	adds	r1, #1
   204fa:	ab01      	add	r3, sp, #4
   204fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   20500:	b289      	uxth	r1, r1
   20502:	8900      	ldrh	r0, [r0, #8]
   20504:	f7fc fb2e 	bl	1cb64 <ble_att_clt_tx_read_group_type>
}
   20508:	b003      	add	sp, #12
   2050a:	f85d fb04 	ldr.w	pc, [sp], #4
   2050e:	bf00      	nop
   20510:	00030094 	.word	0x00030094

00020514 <ble_gattc_disc_all_svcs_resume>:
{
   20514:	b538      	push	{r3, r4, r5, lr}
   20516:	4604      	mov	r4, r0
    status = ble_gattc_disc_all_svcs_tx(proc);
   20518:	f7ff ffe8 	bl	204ec <ble_gattc_disc_all_svcs_tx>
   2051c:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   2051e:	4620      	mov	r0, r4
   20520:	f7ff fd34 	bl	1ff8c <ble_gattc_process_resume_status>
    if (rc != 0) {
   20524:	4605      	mov	r5, r0
   20526:	b908      	cbnz	r0, 2052c <ble_gattc_disc_all_svcs_resume+0x18>
}
   20528:	4628      	mov	r0, r5
   2052a:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_svcs_cb(proc, rc, 0, NULL);
   2052c:	2300      	movs	r3, #0
   2052e:	461a      	mov	r2, r3
   20530:	b281      	uxth	r1, r0
   20532:	4620      	mov	r0, r4
   20534:	f7ff fb02 	bl	1fb3c <ble_gattc_disc_all_svcs_cb>
        return rc;
   20538:	e7f6      	b.n	20528 <ble_gattc_disc_all_svcs_resume+0x14>

0002053a <ble_gattc_process_status>:
{
   2053a:	b510      	push	{r4, lr}
   2053c:	4604      	mov	r4, r0
    switch (status) {
   2053e:	b961      	cbnz	r1, 2055a <ble_gattc_process_status+0x20>
        if (!(proc->flags & BLE_GATTC_PROC_F_STALLED)) {
   20540:	7ac3      	ldrb	r3, [r0, #11]
   20542:	f013 0f01 	tst.w	r3, #1
   20546:	d005      	beq.n	20554 <ble_gattc_process_status+0x1a>
        ble_gattc_proc_insert(proc);
   20548:	4620      	mov	r0, r4
   2054a:	f7ff fdbb 	bl	200c4 <ble_gattc_proc_insert>
        ble_hs_timer_resched();
   2054e:	f001 fbcb 	bl	21ce8 <ble_hs_timer_resched>
}
   20552:	bd10      	pop	{r4, pc}
            ble_gattc_proc_set_exp_timer(proc);
   20554:	f7ff fd24 	bl	1ffa0 <ble_gattc_proc_set_exp_timer>
   20558:	e7f6      	b.n	20548 <ble_gattc_process_status+0xe>
        ble_gattc_proc_free(proc);
   2055a:	f7ff fdf7 	bl	2014c <ble_gattc_proc_free>
}
   2055e:	e7f8      	b.n	20552 <ble_gattc_process_status+0x18>

00020560 <ble_gattc_resume_procs>:
{
   20560:	b510      	push	{r4, lr}
   20562:	b082      	sub	sp, #8
    ble_gattc_resume_at = 0;
   20564:	4b0c      	ldr	r3, [pc, #48]	; (20598 <ble_gattc_resume_procs+0x38>)
   20566:	2200      	movs	r2, #0
   20568:	601a      	str	r2, [r3, #0]
    ble_gattc_extract_stalled(&stall_list);
   2056a:	4668      	mov	r0, sp
   2056c:	f7ff fd86 	bl	2007c <ble_gattc_extract_stalled>
    STAILQ_FOREACH(proc, &stall_list, next) {
   20570:	9c00      	ldr	r4, [sp, #0]
   20572:	b17c      	cbz	r4, 20594 <ble_gattc_resume_procs+0x34>
        resume_cb = ble_gattc_resume_dispatch_get(proc->op);
   20574:	7aa0      	ldrb	r0, [r4, #10]
   20576:	f7ff fa6f 	bl	1fa58 <ble_gattc_resume_dispatch_get>
   2057a:	4602      	mov	r2, r0
        proc->flags &= ~BLE_GATTC_PROC_F_STALLED;
   2057c:	7ae3      	ldrb	r3, [r4, #11]
   2057e:	f023 0301 	bic.w	r3, r3, #1
   20582:	72e3      	strb	r3, [r4, #11]
        rc = resume_cb(proc);
   20584:	4620      	mov	r0, r4
   20586:	4790      	blx	r2
   20588:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   2058a:	4620      	mov	r0, r4
   2058c:	f7ff ffd5 	bl	2053a <ble_gattc_process_status>
    STAILQ_FOREACH(proc, &stall_list, next) {
   20590:	6824      	ldr	r4, [r4, #0]
   20592:	e7ee      	b.n	20572 <ble_gattc_resume_procs+0x12>
}
   20594:	b002      	add	sp, #8
   20596:	bd10      	pop	{r4, pc}
   20598:	10003aa8 	.word	0x10003aa8

0002059c <ble_gattc_proc_alloc>:
{
   2059c:	b510      	push	{r4, lr}
    proc = os_memblock_get(&ble_gattc_proc_pool);
   2059e:	4805      	ldr	r0, [pc, #20]	; (205b4 <ble_gattc_proc_alloc+0x18>)
   205a0:	f7f5 fc45 	bl	15e2e <os_memblock_get>
    if (proc != NULL) {
   205a4:	4604      	mov	r4, r0
   205a6:	b118      	cbz	r0, 205b0 <ble_gattc_proc_alloc+0x14>
        memset(proc, 0, sizeof *proc);
   205a8:	2238      	movs	r2, #56	; 0x38
   205aa:	2100      	movs	r1, #0
   205ac:	f7f6 fab7 	bl	16b1e <memset>
}
   205b0:	4620      	mov	r0, r4
   205b2:	bd10      	pop	{r4, pc}
   205b4:	10003a84 	.word	0x10003a84

000205b8 <ble_gattc_log_proc_init>:
{
   205b8:	b508      	push	{r3, lr}
   205ba:	4603      	mov	r3, r0
    BLE_HS_LOG(INFO, "GATT procedure initiated: %s", name);
   205bc:	4a02      	ldr	r2, [pc, #8]	; (205c8 <ble_gattc_log_proc_init+0x10>)
   205be:	2101      	movs	r1, #1
   205c0:	2004      	movs	r0, #4
   205c2:	f7f9 f8c9 	bl	19758 <modlog_printf>
}
   205c6:	bd08      	pop	{r3, pc}
   205c8:	00030ee4 	.word	0x00030ee4

000205cc <ble_gattc_log_notify>:
{
   205cc:	b510      	push	{r4, lr}
   205ce:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("notify; ");
   205d0:	4804      	ldr	r0, [pc, #16]	; (205e4 <ble_gattc_log_notify+0x18>)
   205d2:	f7ff fff1 	bl	205b8 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d\n", att_handle);
   205d6:	4623      	mov	r3, r4
   205d8:	4a03      	ldr	r2, [pc, #12]	; (205e8 <ble_gattc_log_notify+0x1c>)
   205da:	2101      	movs	r1, #1
   205dc:	2004      	movs	r0, #4
   205de:	f7f9 f8bb 	bl	19758 <modlog_printf>
}
   205e2:	bd10      	pop	{r4, pc}
   205e4:	00030f04 	.word	0x00030f04
   205e8:	00030f10 	.word	0x00030f10

000205ec <ble_gattc_log_indicate>:
{
   205ec:	b510      	push	{r4, lr}
   205ee:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("indicate; ");
   205f0:	4804      	ldr	r0, [pc, #16]	; (20604 <ble_gattc_log_indicate+0x18>)
   205f2:	f7ff ffe1 	bl	205b8 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d\n", att_handle);
   205f6:	4623      	mov	r3, r4
   205f8:	4a03      	ldr	r2, [pc, #12]	; (20608 <ble_gattc_log_indicate+0x1c>)
   205fa:	2101      	movs	r1, #1
   205fc:	2004      	movs	r0, #4
   205fe:	f7f9 f8ab 	bl	19758 <modlog_printf>
}
   20602:	bd10      	pop	{r4, pc}
   20604:	00030f20 	.word	0x00030f20
   20608:	00030f10 	.word	0x00030f10

0002060c <ble_gattc_indicate_err>:
{
   2060c:	b538      	push	{r3, r4, r5, lr}
   2060e:	4604      	mov	r4, r0
   20610:	460d      	mov	r5, r1
    if (status != BLE_HS_ENOTCONN) {
   20612:	2907      	cmp	r1, #7
   20614:	d004      	beq.n	20620 <ble_gattc_indicate_err+0x14>
        rc = ble_gatts_rx_indicate_ack(proc->conn_handle,
   20616:	8981      	ldrh	r1, [r0, #12]
   20618:	8900      	ldrh	r0, [r0, #8]
   2061a:	f001 f849 	bl	216b0 <ble_gatts_rx_indicate_ack>
        if (rc != 0) {
   2061e:	b940      	cbnz	r0, 20632 <ble_gattc_indicate_err+0x26>
    ble_gap_notify_tx_event(status, proc->conn_handle,
   20620:	2301      	movs	r3, #1
   20622:	89a2      	ldrh	r2, [r4, #12]
   20624:	8921      	ldrh	r1, [r4, #8]
   20626:	4628      	mov	r0, r5
   20628:	f7ff f8ba 	bl	1f7a0 <ble_gap_notify_tx_event>
    ble_gatts_send_next_indicate(proc->conn_handle);
   2062c:	8920      	ldrh	r0, [r4, #8]
   2062e:	f001 f813 	bl	21658 <ble_gatts_send_next_indicate>
}
   20632:	bd38      	pop	{r3, r4, r5, pc}

00020634 <ble_gattc_indicate_rx_rsp>:
 * Handles an incoming handle-value-confirmation for the specified indication
 * proc.
 */
static void
ble_gattc_indicate_rx_rsp(struct ble_gattc_proc *proc)
{
   20634:	b510      	push	{r4, lr}
   20636:	4604      	mov	r4, r0
    int rc;

    ble_gattc_dbg_assert_proc_not_inserted(proc);

    rc = ble_gatts_rx_indicate_ack(proc->conn_handle,
   20638:	8981      	ldrh	r1, [r0, #12]
   2063a:	8900      	ldrh	r0, [r0, #8]
   2063c:	f001 f838 	bl	216b0 <ble_gatts_rx_indicate_ack>
                                   proc->indicate.chr_val_handle);
    if (rc != 0) {
   20640:	b100      	cbz	r0, 20644 <ble_gattc_indicate_rx_rsp+0x10>
    ble_gap_notify_tx_event(BLE_HS_EDONE, proc->conn_handle,
                            proc->indicate.chr_val_handle, 1);

    /* Send the next indication if one is pending. */
    ble_gatts_send_next_indicate(proc->conn_handle);
}
   20642:	bd10      	pop	{r4, pc}
    ble_gap_notify_tx_event(BLE_HS_EDONE, proc->conn_handle,
   20644:	2301      	movs	r3, #1
   20646:	89a2      	ldrh	r2, [r4, #12]
   20648:	8921      	ldrh	r1, [r4, #8]
   2064a:	200e      	movs	r0, #14
   2064c:	f7ff f8a8 	bl	1f7a0 <ble_gap_notify_tx_event>
    ble_gatts_send_next_indicate(proc->conn_handle);
   20650:	8920      	ldrh	r0, [r4, #8]
   20652:	f001 f801 	bl	21658 <ble_gatts_send_next_indicate>
   20656:	e7f4      	b.n	20642 <ble_gattc_indicate_rx_rsp+0xe>

00020658 <ble_gattc_timer>:
{
   20658:	b530      	push	{r4, r5, lr}
   2065a:	b083      	sub	sp, #12
    ticks_until_exp = ble_gattc_extract_expired(&exp_list);
   2065c:	4668      	mov	r0, sp
   2065e:	f7ff fcf7 	bl	20050 <ble_gattc_extract_expired>
   20662:	4605      	mov	r5, r0
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   20664:	e004      	b.n	20670 <ble_gattc_timer+0x18>
        STAILQ_REMOVE_HEAD(&exp_list, next);
   20666:	f8cd d004 	str.w	sp, [sp, #4]
        ble_gattc_proc_free(proc);
   2066a:	4620      	mov	r0, r4
   2066c:	f7ff fd6e 	bl	2014c <ble_gattc_proc_free>
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   20670:	9c00      	ldr	r4, [sp, #0]
   20672:	b194      	cbz	r4, 2069a <ble_gattc_timer+0x42>
        STATS_INC(ble_gattc_stats, proc_timeout);
   20674:	4a11      	ldr	r2, [pc, #68]	; (206bc <ble_gattc_timer+0x64>)
   20676:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   2067a:	3301      	adds	r3, #1
   2067c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        ble_gattc_proc_timeout(proc);
   20680:	4620      	mov	r0, r4
   20682:	f7ff fa1a 	bl	1faba <ble_gattc_proc_timeout>
        ble_gap_terminate(proc->conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   20686:	2113      	movs	r1, #19
   20688:	8920      	ldrh	r0, [r4, #8]
   2068a:	f7fe fd49 	bl	1f120 <ble_gap_terminate>
        STAILQ_REMOVE_HEAD(&exp_list, next);
   2068e:	9b00      	ldr	r3, [sp, #0]
   20690:	681b      	ldr	r3, [r3, #0]
   20692:	9300      	str	r3, [sp, #0]
   20694:	2b00      	cmp	r3, #0
   20696:	d1e8      	bne.n	2066a <ble_gattc_timer+0x12>
   20698:	e7e5      	b.n	20666 <ble_gattc_timer+0xe>
    ticks_until_resume = ble_gattc_ticks_until_resume();
   2069a:	f7ff fc89 	bl	1ffb0 <ble_gattc_ticks_until_resume>
    if (ticks_until_resume == 0) {
   2069e:	4603      	mov	r3, r0
   206a0:	b128      	cbz	r0, 206ae <ble_gattc_timer+0x56>
}
   206a2:	42ab      	cmp	r3, r5
   206a4:	bfa8      	it	ge
   206a6:	462b      	movge	r3, r5
   206a8:	4618      	mov	r0, r3
   206aa:	b003      	add	sp, #12
   206ac:	bd30      	pop	{r4, r5, pc}
        ble_gattc_resume_procs();
   206ae:	f7ff ff57 	bl	20560 <ble_gattc_resume_procs>
        ticks_until_resume = ble_gattc_ticks_until_resume();
   206b2:	f7ff fc7d 	bl	1ffb0 <ble_gattc_ticks_until_resume>
   206b6:	4603      	mov	r3, r0
   206b8:	e7f3      	b.n	206a2 <ble_gattc_timer+0x4a>
   206ba:	bf00      	nop
   206bc:	10003aac 	.word	0x10003aac

000206c0 <ble_gattc_notify_custom>:
{
   206c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   206c2:	b083      	sub	sp, #12
   206c4:	4606      	mov	r6, r0
   206c6:	460d      	mov	r5, r1
   206c8:	4614      	mov	r4, r2
    STATS_INC(ble_gattc_stats, notify);
   206ca:	4a1c      	ldr	r2, [pc, #112]	; (2073c <ble_gattc_notify_custom+0x7c>)
   206cc:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   206d0:	3301      	adds	r3, #1
   206d2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    ble_gattc_log_notify(chr_val_handle);
   206d6:	4608      	mov	r0, r1
   206d8:	f7ff ff78 	bl	205cc <ble_gattc_log_notify>
    if (txom == NULL) {
   206dc:	b1cc      	cbz	r4, 20712 <ble_gattc_notify_custom+0x52>
    rc = ble_att_clt_tx_notify(conn_handle, chr_val_handle, txom);
   206de:	4622      	mov	r2, r4
   206e0:	4629      	mov	r1, r5
   206e2:	4630      	mov	r0, r6
   206e4:	f7fc fa4c 	bl	1cb80 <ble_att_clt_tx_notify>
    if (rc != 0) {
   206e8:	4607      	mov	r7, r0
   206ea:	b320      	cbz	r0, 20736 <ble_gattc_notify_custom+0x76>
   206ec:	2400      	movs	r4, #0
        STATS_INC(ble_gattc_stats, notify_fail);
   206ee:	4a13      	ldr	r2, [pc, #76]	; (2073c <ble_gattc_notify_custom+0x7c>)
   206f0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   206f4:	3301      	adds	r3, #1
   206f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    ble_gap_notify_tx_event(rc, conn_handle, chr_val_handle, 0);
   206fa:	2300      	movs	r3, #0
   206fc:	462a      	mov	r2, r5
   206fe:	4631      	mov	r1, r6
   20700:	4638      	mov	r0, r7
   20702:	f7ff f84d 	bl	1f7a0 <ble_gap_notify_tx_event>
    os_mbuf_free_chain(txom);
   20706:	4620      	mov	r0, r4
   20708:	f7f4 ffb4 	bl	15674 <os_mbuf_free_chain>
}
   2070c:	4638      	mov	r0, r7
   2070e:	b003      	add	sp, #12
   20710:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txom = ble_hs_mbuf_att_pkt();
   20712:	f003 f8e0 	bl	238d6 <ble_hs_mbuf_att_pkt>
        if (txom == NULL) {
   20716:	4604      	mov	r4, r0
   20718:	b158      	cbz	r0, 20732 <ble_gattc_notify_custom+0x72>
        rc = ble_att_svr_read_handle(BLE_HS_CONN_HANDLE_NONE,
   2071a:	2200      	movs	r2, #0
   2071c:	9200      	str	r2, [sp, #0]
   2071e:	4603      	mov	r3, r0
   20720:	4629      	mov	r1, r5
   20722:	f64f 70ff 	movw	r0, #65535	; 0xffff
   20726:	f7fd f933 	bl	1d990 <ble_att_svr_read_handle>
        if (rc != 0) {
   2072a:	2800      	cmp	r0, #0
   2072c:	d0d7      	beq.n	206de <ble_gattc_notify_custom+0x1e>
            rc = BLE_HS_EAPP;
   2072e:	2709      	movs	r7, #9
   20730:	e7dd      	b.n	206ee <ble_gattc_notify_custom+0x2e>
            rc = BLE_HS_ENOMEM;
   20732:	2706      	movs	r7, #6
   20734:	e7db      	b.n	206ee <ble_gattc_notify_custom+0x2e>
   20736:	2400      	movs	r4, #0
   20738:	e7df      	b.n	206fa <ble_gattc_notify_custom+0x3a>
   2073a:	bf00      	nop
   2073c:	10003aac 	.word	0x10003aac

00020740 <ble_gattc_notify>:
{
   20740:	b508      	push	{r3, lr}
    rc = ble_gattc_notify_custom(conn_handle, chr_val_handle, NULL);
   20742:	2200      	movs	r2, #0
   20744:	f7ff ffbc 	bl	206c0 <ble_gattc_notify_custom>
}
   20748:	bd08      	pop	{r3, pc}

0002074a <ble_gatts_indicate_fail_notconn>:
 * Causes the indication in progress for the specified connection (if any) to
 * fail with a status code of BLE_HS_ENOTCONN;
 */
void
ble_gatts_indicate_fail_notconn(uint16_t conn_handle)
{
   2074a:	b508      	push	{r3, lr}
    ble_gattc_fail_procs(conn_handle, BLE_GATT_OP_INDICATE, BLE_HS_ENOTCONN);
   2074c:	2207      	movs	r2, #7
   2074e:	210e      	movs	r1, #14
   20750:	f7ff fd06 	bl	20160 <ble_gattc_fail_procs>
}
   20754:	bd08      	pop	{r3, pc}
	...

00020758 <ble_gattc_indicate_custom>:

int
ble_gattc_indicate_custom(uint16_t conn_handle, uint16_t chr_val_handle,
                          struct os_mbuf *txom)
{
   20758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2075c:	b082      	sub	sp, #8
   2075e:	4606      	mov	r6, r0
   20760:	460c      	mov	r4, r1
   20762:	4615      	mov	r5, r2

    struct ble_gattc_proc *proc;
    struct ble_hs_conn *conn;
    int rc;

    STATS_INC(ble_gattc_stats, indicate);
   20764:	4a29      	ldr	r2, [pc, #164]	; (2080c <ble_gattc_indicate_custom+0xb4>)
   20766:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   2076a:	3301      	adds	r3, #1
   2076c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    proc = ble_gattc_proc_alloc();
   20770:	f7ff ff14 	bl	2059c <ble_gattc_proc_alloc>
    if (proc == NULL) {
   20774:	4680      	mov	r8, r0
   20776:	b360      	cbz	r0, 207d2 <ble_gattc_indicate_custom+0x7a>
        rc = BLE_HS_ENOMEM;
        goto done;
    }

    proc->op = BLE_GATT_OP_INDICATE;
   20778:	230e      	movs	r3, #14
   2077a:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   2077c:	8106      	strh	r6, [r0, #8]
    proc->indicate.chr_val_handle = chr_val_handle;
   2077e:	8184      	strh	r4, [r0, #12]

    ble_gattc_log_indicate(chr_val_handle);
   20780:	4620      	mov	r0, r4
   20782:	f7ff ff33 	bl	205ec <ble_gattc_log_indicate>

    if (txom == NULL) {
   20786:	b14d      	cbz	r5, 2079c <ble_gattc_indicate_custom+0x44>
            rc = BLE_HS_EAPP;
            goto done;
        }
    }

    rc = ble_att_clt_tx_indicate(conn_handle, chr_val_handle, txom);
   20788:	462a      	mov	r2, r5
   2078a:	4621      	mov	r1, r4
   2078c:	4630      	mov	r0, r6
   2078e:	f7fc fa17 	bl	1cbc0 <ble_att_clt_tx_indicate>
    txom = NULL;
    if (rc != 0) {
   20792:	4607      	mov	r7, r0
   20794:	b190      	cbz	r0, 207bc <ble_gattc_indicate_custom+0x64>
        conn->bhc_gatt_svr.indicate_val_handle = chr_val_handle;
    }
    ble_hs_unlock();

done:
    if (rc != 0) {
   20796:	b3b7      	cbz	r7, 20806 <ble_gattc_indicate_custom+0xae>
   20798:	2500      	movs	r5, #0
   2079a:	e01b      	b.n	207d4 <ble_gattc_indicate_custom+0x7c>
        txom = ble_hs_mbuf_att_pkt();
   2079c:	f003 f89b 	bl	238d6 <ble_hs_mbuf_att_pkt>
        if (txom == NULL) {
   207a0:	4605      	mov	r5, r0
   207a2:	b370      	cbz	r0, 20802 <ble_gattc_indicate_custom+0xaa>
        rc = ble_att_svr_read_handle(BLE_HS_CONN_HANDLE_NONE, chr_val_handle,
   207a4:	2200      	movs	r2, #0
   207a6:	9200      	str	r2, [sp, #0]
   207a8:	4603      	mov	r3, r0
   207aa:	4621      	mov	r1, r4
   207ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
   207b0:	f7fd f8ee 	bl	1d990 <ble_att_svr_read_handle>
        if (rc != 0) {
   207b4:	2800      	cmp	r0, #0
   207b6:	d0e7      	beq.n	20788 <ble_gattc_indicate_custom+0x30>
            rc = BLE_HS_EAPP;
   207b8:	2709      	movs	r7, #9
   207ba:	e00b      	b.n	207d4 <ble_gattc_indicate_custom+0x7c>
    ble_hs_lock();
   207bc:	f001 f9a2 	bl	21b04 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   207c0:	4630      	mov	r0, r6
   207c2:	f001 fffb 	bl	227bc <ble_hs_conn_find>
    if (conn != NULL) {
   207c6:	b108      	cbz	r0, 207cc <ble_gattc_indicate_custom+0x74>
        conn->bhc_gatt_svr.indicate_val_handle = chr_val_handle;
   207c8:	f8a0 4054 	strh.w	r4, [r0, #84]	; 0x54
    ble_hs_unlock();
   207cc:	f001 f99e 	bl	21b0c <ble_hs_unlock>
   207d0:	e7e1      	b.n	20796 <ble_gattc_indicate_custom+0x3e>
        rc = BLE_HS_ENOMEM;
   207d2:	2706      	movs	r7, #6
        STATS_INC(ble_gattc_stats, indicate_fail);
   207d4:	4a0d      	ldr	r2, [pc, #52]	; (2080c <ble_gattc_indicate_custom+0xb4>)
   207d6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   207da:	3301      	adds	r3, #1
   207dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Tell the application that an indication transmission was attempted. */
    ble_gap_notify_tx_event(rc, conn_handle, chr_val_handle, 1);
   207e0:	2301      	movs	r3, #1
   207e2:	4622      	mov	r2, r4
   207e4:	4631      	mov	r1, r6
   207e6:	4638      	mov	r0, r7
   207e8:	f7fe ffda 	bl	1f7a0 <ble_gap_notify_tx_event>

    ble_gattc_process_status(proc, rc);
   207ec:	4639      	mov	r1, r7
   207ee:	4640      	mov	r0, r8
   207f0:	f7ff fea3 	bl	2053a <ble_gattc_process_status>
    os_mbuf_free_chain(txom);
   207f4:	4628      	mov	r0, r5
   207f6:	f7f4 ff3d 	bl	15674 <os_mbuf_free_chain>
    return rc;
}
   207fa:	4638      	mov	r0, r7
   207fc:	b002      	add	sp, #8
   207fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_ENOMEM;
   20802:	2706      	movs	r7, #6
   20804:	e7e6      	b.n	207d4 <ble_gattc_indicate_custom+0x7c>
   20806:	2500      	movs	r5, #0
   20808:	e7ea      	b.n	207e0 <ble_gattc_indicate_custom+0x88>
   2080a:	bf00      	nop
   2080c:	10003aac 	.word	0x10003aac

00020810 <ble_gattc_indicate>:

int
ble_gattc_indicate(uint16_t conn_handle, uint16_t chr_val_handle)
{
   20810:	b508      	push	{r3, lr}
    return ble_gattc_indicate_custom(conn_handle, chr_val_handle, NULL);
   20812:	2200      	movs	r2, #0
   20814:	f7ff ffa0 	bl	20758 <ble_gattc_indicate_custom>
}
   20818:	bd08      	pop	{r3, pc}

0002081a <ble_gattc_rx_err>:
 * Dispatches an incoming ATT error-response to the appropriate active GATT
 * procedure.
 */
void
ble_gattc_rx_err(uint16_t conn_handle, uint16_t handle, uint16_t status)
{
   2081a:	b570      	push	{r4, r5, r6, lr}
   2081c:	460d      	mov	r5, r1
   2081e:	4614      	mov	r4, r2
    struct ble_gattc_proc *proc;
    ble_gattc_err_fn *err_cb;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle, BLE_GATT_OP_NONE);
   20820:	21ff      	movs	r1, #255	; 0xff
   20822:	f7ff fc45 	bl	200b0 <ble_gattc_extract_first_by_conn_op>
    if (proc != NULL) {
   20826:	b168      	cbz	r0, 20844 <ble_gattc_rx_err+0x2a>
   20828:	4606      	mov	r6, r0
        err_cb = ble_gattc_err_dispatch_get(proc->op);
   2082a:	7a80      	ldrb	r0, [r0, #10]
   2082c:	f7ff f90e 	bl	1fa4c <ble_gattc_err_dispatch_get>
        if (err_cb != NULL) {
   20830:	4603      	mov	r3, r0
   20832:	b120      	cbz	r0, 2083e <ble_gattc_rx_err+0x24>
            err_cb(proc, BLE_HS_ERR_ATT_BASE + status, handle);
   20834:	462a      	mov	r2, r5
   20836:	f504 7180 	add.w	r1, r4, #256	; 0x100
   2083a:	4630      	mov	r0, r6
   2083c:	4798      	blx	r3
        }
        ble_gattc_proc_free(proc);
   2083e:	4630      	mov	r0, r6
   20840:	f7ff fc84 	bl	2014c <ble_gattc_proc_free>
    }
}
   20844:	bd70      	pop	{r4, r5, r6, pc}

00020846 <ble_gattc_rx_mtu>:
 * Dispatches an incoming ATT exchange-mtu-response to the appropriate active
 * GATT procedure.
 */
void
ble_gattc_rx_mtu(uint16_t conn_handle, int status, uint16_t chan_mtu)
{
   20846:	b570      	push	{r4, r5, r6, lr}
   20848:	460c      	mov	r4, r1
   2084a:	4615      	mov	r5, r2
    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle, BLE_GATT_OP_MTU);
   2084c:	2100      	movs	r1, #0
   2084e:	f7ff fc2f 	bl	200b0 <ble_gattc_extract_first_by_conn_op>
    if (proc != NULL) {
   20852:	b148      	cbz	r0, 20868 <ble_gattc_rx_mtu+0x22>
   20854:	4606      	mov	r6, r0
        ble_gattc_mtu_cb(proc, status, 0, chan_mtu);
   20856:	462b      	mov	r3, r5
   20858:	2200      	movs	r2, #0
   2085a:	4621      	mov	r1, r4
   2085c:	f7ff f946 	bl	1faec <ble_gattc_mtu_cb>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   20860:	210e      	movs	r1, #14
   20862:	4630      	mov	r0, r6
   20864:	f7ff fe69 	bl	2053a <ble_gattc_process_status>
    }
}
   20868:	bd70      	pop	{r4, r5, r6, pc}

0002086a <ble_gattc_rx_indicate_rsp>:
 * Dispatches an incoming ATT handle-value-confirmation to the appropriate
 * active GATT procedure.
 */
void
ble_gattc_rx_indicate_rsp(uint16_t conn_handle)
{
   2086a:	b510      	push	{r4, lr}
    return;
#endif

    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   2086c:	210e      	movs	r1, #14
   2086e:	f7ff fc1f 	bl	200b0 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_INDICATE);
    if (proc != NULL) {
   20872:	b130      	cbz	r0, 20882 <ble_gattc_rx_indicate_rsp+0x18>
   20874:	4604      	mov	r4, r0
        ble_gattc_indicate_rx_rsp(proc);
   20876:	f7ff fedd 	bl	20634 <ble_gattc_indicate_rx_rsp>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   2087a:	210e      	movs	r1, #14
   2087c:	4620      	mov	r0, r4
   2087e:	f7ff fe5c 	bl	2053a <ble_gattc_process_status>
    }
}
   20882:	bd10      	pop	{r4, pc}

00020884 <ble_gattc_connection_broken>:
 * @param conn_handle           The handle of the connection that was
 *                                  terminated.
 */
void
ble_gattc_connection_broken(uint16_t conn_handle)
{
   20884:	b508      	push	{r3, lr}
    ble_gattc_fail_procs(conn_handle, BLE_GATT_OP_NONE, BLE_HS_ENOTCONN);
   20886:	2207      	movs	r2, #7
   20888:	21ff      	movs	r1, #255	; 0xff
   2088a:	f7ff fc69 	bl	20160 <ble_gattc_fail_procs>
}
   2088e:	bd08      	pop	{r3, pc}

00020890 <ble_gattc_init>:
    return !STAILQ_EMPTY(&ble_gattc_procs);
}

int
ble_gattc_init(void)
{
   20890:	b500      	push	{lr}
   20892:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_gattc_procs);
   20894:	4b0e      	ldr	r3, [pc, #56]	; (208d0 <ble_gattc_init+0x40>)
   20896:	2200      	movs	r2, #0
   20898:	601a      	str	r2, [r3, #0]
   2089a:	605b      	str	r3, [r3, #4]

    if (MYNEWT_VAL(BLE_GATT_MAX_PROCS) > 0) {
        rc = os_mempool_init(&ble_gattc_proc_pool,
   2089c:	4b0d      	ldr	r3, [pc, #52]	; (208d4 <ble_gattc_init+0x44>)
   2089e:	9300      	str	r3, [sp, #0]
   208a0:	4b0d      	ldr	r3, [pc, #52]	; (208d8 <ble_gattc_init+0x48>)
   208a2:	2238      	movs	r2, #56	; 0x38
   208a4:	2104      	movs	r1, #4
   208a6:	480d      	ldr	r0, [pc, #52]	; (208dc <ble_gattc_init+0x4c>)
   208a8:	f7f5 fa8a 	bl	15dc0 <os_mempool_init>
                             MYNEWT_VAL(BLE_GATT_MAX_PROCS),
                             sizeof (struct ble_gattc_proc),
                             ble_gattc_proc_mem,
                             "ble_gattc_proc_pool");
        if (rc != 0) {
   208ac:	b110      	cbz	r0, 208b4 <ble_gattc_init+0x24>
    if (rc != 0) {
        return BLE_HS_EOS;
    }

    return 0;
}
   208ae:	b003      	add	sp, #12
   208b0:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = stats_init_and_reg(
   208b4:	4b0a      	ldr	r3, [pc, #40]	; (208e0 <ble_gattc_init+0x50>)
   208b6:	9301      	str	r3, [sp, #4]
   208b8:	2300      	movs	r3, #0
   208ba:	9300      	str	r3, [sp, #0]
   208bc:	2223      	movs	r2, #35	; 0x23
   208be:	2104      	movs	r1, #4
   208c0:	4808      	ldr	r0, [pc, #32]	; (208e4 <ble_gattc_init+0x54>)
   208c2:	f7f9 fcc3 	bl	1a24c <stats_init_and_reg>
    if (rc != 0) {
   208c6:	2800      	cmp	r0, #0
   208c8:	d0f1      	beq.n	208ae <ble_gattc_init+0x1e>
        return BLE_HS_EOS;
   208ca:	200b      	movs	r0, #11
   208cc:	e7ef      	b.n	208ae <ble_gattc_init+0x1e>
   208ce:	bf00      	nop
   208d0:	10003aa0 	.word	0x10003aa0
   208d4:	00030f2c 	.word	0x00030f2c
   208d8:	100039a4 	.word	0x100039a4
   208dc:	10003a84 	.word	0x10003a84
   208e0:	00030f40 	.word	0x00030f40
   208e4:	10003aac 	.word	0x10003aac

000208e8 <ble_gatts_chr_clt_cfg_allowed>:
ble_gatts_chr_clt_cfg_allowed(const struct ble_gatt_chr_def *chr)
{
    uint16_t flags;

    flags = 0;
    if (chr->flags & BLE_GATT_CHR_F_NOTIFY) {
   208e8:	8a03      	ldrh	r3, [r0, #16]
   208ea:	f013 0010 	ands.w	r0, r3, #16
   208ee:	d000      	beq.n	208f2 <ble_gatts_chr_clt_cfg_allowed+0xa>
        flags |= BLE_GATTS_CLT_CFG_F_NOTIFY;
   208f0:	2001      	movs	r0, #1
    }
    if (chr->flags & BLE_GATT_CHR_F_INDICATE) {
   208f2:	f013 0f20 	tst.w	r3, #32
   208f6:	d001      	beq.n	208fc <ble_gatts_chr_clt_cfg_allowed+0x14>
        flags |= BLE_GATTS_CLT_CFG_F_INDICATE;
   208f8:	f040 0002 	orr.w	r0, r0, #2
    }

    return flags;
}
   208fc:	4770      	bx	lr

000208fe <ble_gatts_att_flags_from_chr_flags>:

static uint8_t
ble_gatts_att_flags_from_chr_flags(ble_gatt_chr_flags chr_flags)
{
   208fe:	4603      	mov	r3, r0
    uint8_t att_flags;

    att_flags = 0;
    if (chr_flags & BLE_GATT_CHR_F_READ) {
   20900:	f010 0f02 	tst.w	r0, #2
   20904:	d124      	bne.n	20950 <ble_gatts_att_flags_from_chr_flags+0x52>
    att_flags = 0;
   20906:	2000      	movs	r0, #0
        att_flags |= BLE_ATT_F_READ;
    }
    if (chr_flags & (BLE_GATT_CHR_F_WRITE_NO_RSP | BLE_GATT_CHR_F_WRITE)) {
   20908:	f013 0f0c 	tst.w	r3, #12
   2090c:	d001      	beq.n	20912 <ble_gatts_att_flags_from_chr_flags+0x14>
        att_flags |= BLE_ATT_F_WRITE;
   2090e:	f040 0002 	orr.w	r0, r0, #2
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_ENC) {
   20912:	f413 7f00 	tst.w	r3, #512	; 0x200
   20916:	d001      	beq.n	2091c <ble_gatts_att_flags_from_chr_flags+0x1e>
        att_flags |= BLE_ATT_F_READ_ENC;
   20918:	f040 0004 	orr.w	r0, r0, #4
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_AUTHEN) {
   2091c:	f413 6f80 	tst.w	r3, #1024	; 0x400
   20920:	d001      	beq.n	20926 <ble_gatts_att_flags_from_chr_flags+0x28>
        att_flags |= BLE_ATT_F_READ_AUTHEN;
   20922:	f040 0008 	orr.w	r0, r0, #8
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_AUTHOR) {
   20926:	f413 6f00 	tst.w	r3, #2048	; 0x800
   2092a:	d001      	beq.n	20930 <ble_gatts_att_flags_from_chr_flags+0x32>
        att_flags |= BLE_ATT_F_READ_AUTHOR;
   2092c:	f040 0010 	orr.w	r0, r0, #16
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_ENC) {
   20930:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   20934:	d001      	beq.n	2093a <ble_gatts_att_flags_from_chr_flags+0x3c>
        att_flags |= BLE_ATT_F_WRITE_ENC;
   20936:	f040 0020 	orr.w	r0, r0, #32
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_AUTHEN) {
   2093a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   2093e:	d001      	beq.n	20944 <ble_gatts_att_flags_from_chr_flags+0x46>
        att_flags |= BLE_ATT_F_WRITE_AUTHEN;
   20940:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_AUTHOR) {
   20944:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   20948:	d001      	beq.n	2094e <ble_gatts_att_flags_from_chr_flags+0x50>
        att_flags |= BLE_ATT_F_WRITE_AUTHOR;
   2094a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    }

    return att_flags;
}
   2094e:	4770      	bx	lr
        att_flags |= BLE_ATT_F_READ;
   20950:	2001      	movs	r0, #1
   20952:	e7d9      	b.n	20908 <ble_gatts_att_flags_from_chr_flags+0xa>

00020954 <ble_gatts_chr_properties>:
{
    uint8_t properties;

    properties = 0;

    if (chr->flags & BLE_GATT_CHR_F_BROADCAST) {
   20954:	8a03      	ldrh	r3, [r0, #16]
   20956:	f013 0f01 	tst.w	r3, #1
   2095a:	d124      	bne.n	209a6 <ble_gatts_chr_properties+0x52>
    properties = 0;
   2095c:	2000      	movs	r0, #0
        properties |= BLE_GATT_CHR_PROP_BROADCAST;
    }
    if (chr->flags & BLE_GATT_CHR_F_READ) {
   2095e:	f013 0f02 	tst.w	r3, #2
   20962:	d001      	beq.n	20968 <ble_gatts_chr_properties+0x14>
        properties |= BLE_GATT_CHR_PROP_READ;
   20964:	f040 0002 	orr.w	r0, r0, #2
    }
    if (chr->flags & BLE_GATT_CHR_F_WRITE_NO_RSP) {
   20968:	f013 0f04 	tst.w	r3, #4
   2096c:	d001      	beq.n	20972 <ble_gatts_chr_properties+0x1e>
        properties |= BLE_GATT_CHR_PROP_WRITE_NO_RSP;
   2096e:	f040 0004 	orr.w	r0, r0, #4
    }
    if (chr->flags & BLE_GATT_CHR_F_WRITE) {
   20972:	f013 0f08 	tst.w	r3, #8
   20976:	d001      	beq.n	2097c <ble_gatts_chr_properties+0x28>
        properties |= BLE_GATT_CHR_PROP_WRITE;
   20978:	f040 0008 	orr.w	r0, r0, #8
    }
    if (chr->flags & BLE_GATT_CHR_F_NOTIFY) {
   2097c:	f013 0f10 	tst.w	r3, #16
   20980:	d001      	beq.n	20986 <ble_gatts_chr_properties+0x32>
        properties |= BLE_GATT_CHR_PROP_NOTIFY;
   20982:	f040 0010 	orr.w	r0, r0, #16
    }
    if (chr->flags & BLE_GATT_CHR_F_INDICATE) {
   20986:	f013 0f20 	tst.w	r3, #32
   2098a:	d001      	beq.n	20990 <ble_gatts_chr_properties+0x3c>
        properties |= BLE_GATT_CHR_PROP_INDICATE;
   2098c:	f040 0020 	orr.w	r0, r0, #32
    }
    if (chr->flags & BLE_GATT_CHR_F_AUTH_SIGN_WRITE) {
   20990:	f013 0f40 	tst.w	r3, #64	; 0x40
   20994:	d001      	beq.n	2099a <ble_gatts_chr_properties+0x46>
        properties |= BLE_GATT_CHR_PROP_AUTH_SIGN_WRITE;
   20996:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    }
    if (chr->flags &
   2099a:	f413 7fc0 	tst.w	r3, #384	; 0x180
   2099e:	d001      	beq.n	209a4 <ble_gatts_chr_properties+0x50>
        (BLE_GATT_CHR_F_RELIABLE_WRITE | BLE_GATT_CHR_F_AUX_WRITE)) {

        properties |= BLE_GATT_CHR_PROP_EXTENDED;
   209a0:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    }

    return properties;
}
   209a4:	4770      	bx	lr
        properties |= BLE_GATT_CHR_PROP_BROADCAST;
   209a6:	2001      	movs	r0, #1
   209a8:	e7d9      	b.n	2095e <ble_gatts_chr_properties+0xa>

000209aa <ble_gatts_chr_is_sane>:
}

static int
ble_gatts_chr_is_sane(const struct ble_gatt_chr_def *chr)
{
    if (chr->uuid == NULL) {
   209aa:	6803      	ldr	r3, [r0, #0]
   209ac:	b11b      	cbz	r3, 209b6 <ble_gatts_chr_is_sane+0xc>
        return 0;
    }

    if (chr->access_cb == NULL) {
   209ae:	6843      	ldr	r3, [r0, #4]
   209b0:	b11b      	cbz	r3, 209ba <ble_gatts_chr_is_sane+0x10>
        return 0;
    }

    /* XXX: Check properties. */

    return 1;
   209b2:	2001      	movs	r0, #1
   209b4:	4770      	bx	lr
        return 0;
   209b6:	2000      	movs	r0, #0
   209b8:	4770      	bx	lr
        return 0;
   209ba:	2000      	movs	r0, #0
}
   209bc:	4770      	bx	lr

000209be <ble_gatts_chr_op>:

static uint8_t
ble_gatts_chr_op(uint8_t att_op)
{
    switch (att_op) {
   209be:	2802      	cmp	r0, #2
   209c0:	d001      	beq.n	209c6 <ble_gatts_chr_op+0x8>
    case BLE_ATT_ACCESS_OP_READ:
        return BLE_GATT_ACCESS_OP_READ_CHR;
   209c2:	2000      	movs	r0, #0
   209c4:	4770      	bx	lr

    case BLE_ATT_ACCESS_OP_WRITE:
        return BLE_GATT_ACCESS_OP_WRITE_CHR;
   209c6:	2001      	movs	r0, #1

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_GATT_ACCESS_OP_READ_CHR;
    }
}
   209c8:	4770      	bx	lr
	...

000209cc <ble_gatts_chr_inc_val_stat>:

static void
ble_gatts_chr_inc_val_stat(uint8_t gatt_op)
{
    switch (gatt_op) {
   209cc:	b110      	cbz	r0, 209d4 <ble_gatts_chr_inc_val_stat+0x8>
   209ce:	2801      	cmp	r0, #1
   209d0:	d005      	beq.n	209de <ble_gatts_chr_inc_val_stat+0x12>
   209d2:	4770      	bx	lr
    case BLE_GATT_ACCESS_OP_READ_CHR:
        STATS_INC(ble_gatts_stats, chr_val_reads);
   209d4:	4a04      	ldr	r2, [pc, #16]	; (209e8 <ble_gatts_chr_inc_val_stat+0x1c>)
   209d6:	6a53      	ldr	r3, [r2, #36]	; 0x24
   209d8:	3301      	adds	r3, #1
   209da:	6253      	str	r3, [r2, #36]	; 0x24
        break;
   209dc:	4770      	bx	lr

    case BLE_GATT_ACCESS_OP_WRITE_CHR:
        STATS_INC(ble_gatts_stats, chr_val_writes);
   209de:	4a02      	ldr	r2, [pc, #8]	; (209e8 <ble_gatts_chr_inc_val_stat+0x1c>)
   209e0:	6a93      	ldr	r3, [r2, #40]	; 0x28
   209e2:	3301      	adds	r3, #1
   209e4:	6293      	str	r3, [r2, #40]	; 0x28
        break;

    default:
        break;
    }
}
   209e6:	4770      	bx	lr
   209e8:	10003b78 	.word	0x10003b78

000209ec <ble_gatts_find_svc_entry_idx>:
    return rc;
}

static int
ble_gatts_find_svc_entry_idx(const struct ble_gatt_svc_def *svc)
{
   209ec:	4602      	mov	r2, r0
    int i;

    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   209ee:	2000      	movs	r0, #0
   209f0:	4b07      	ldr	r3, [pc, #28]	; (20a10 <ble_gatts_find_svc_entry_idx+0x24>)
   209f2:	881b      	ldrh	r3, [r3, #0]
   209f4:	4283      	cmp	r3, r0
   209f6:	dd07      	ble.n	20a08 <ble_gatts_find_svc_entry_idx+0x1c>
        if (ble_gatts_svc_entries[i].svc == svc) {
   209f8:	4b06      	ldr	r3, [pc, #24]	; (20a14 <ble_gatts_find_svc_entry_idx+0x28>)
   209fa:	681b      	ldr	r3, [r3, #0]
   209fc:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   20a00:	4293      	cmp	r3, r2
   20a02:	d003      	beq.n	20a0c <ble_gatts_find_svc_entry_idx+0x20>
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   20a04:	3001      	adds	r0, #1
   20a06:	e7f3      	b.n	209f0 <ble_gatts_find_svc_entry_idx+0x4>
            return i;
        }
    }

    return -1;
   20a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   20a0c:	4770      	bx	lr
   20a0e:	bf00      	nop
   20a10:	10003b74 	.word	0x10003b74
   20a14:	10003bb0 	.word	0x10003bb0

00020a18 <ble_gatts_svc_incs_satisfied>:

static int
ble_gatts_svc_incs_satisfied(const struct ble_gatt_svc_def *svc)
{
   20a18:	b538      	push	{r3, r4, r5, lr}
    int idx;
    int i;

    if (svc->includes == NULL) {
   20a1a:	6885      	ldr	r5, [r0, #8]
   20a1c:	b1ad      	cbz	r5, 20a4a <ble_gatts_svc_incs_satisfied+0x32>
        /* No included services. */
        return 1;
    }

    for (i = 0; svc->includes[i] != NULL; i++) {
   20a1e:	2400      	movs	r4, #0
   20a20:	e000      	b.n	20a24 <ble_gatts_svc_incs_satisfied+0xc>
   20a22:	3401      	adds	r4, #1
   20a24:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   20a28:	b168      	cbz	r0, 20a46 <ble_gatts_svc_incs_satisfied+0x2e>
        idx = ble_gatts_find_svc_entry_idx(svc->includes[i]);
   20a2a:	f7ff ffdf 	bl	209ec <ble_gatts_find_svc_entry_idx>
        if (idx == -1 || ble_gatts_svc_entries[idx].handle == 0) {
   20a2e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   20a32:	d00c      	beq.n	20a4e <ble_gatts_svc_incs_satisfied+0x36>
   20a34:	4b07      	ldr	r3, [pc, #28]	; (20a54 <ble_gatts_svc_incs_satisfied+0x3c>)
   20a36:	681b      	ldr	r3, [r3, #0]
   20a38:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   20a3c:	8883      	ldrh	r3, [r0, #4]
   20a3e:	2b00      	cmp	r3, #0
   20a40:	d1ef      	bne.n	20a22 <ble_gatts_svc_incs_satisfied+0xa>
            return 0;
   20a42:	2000      	movs	r0, #0
   20a44:	e000      	b.n	20a48 <ble_gatts_svc_incs_satisfied+0x30>
        }
    }

    return 1;
   20a46:	2001      	movs	r0, #1
}
   20a48:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
   20a4a:	2001      	movs	r0, #1
   20a4c:	e7fc      	b.n	20a48 <ble_gatts_svc_incs_satisfied+0x30>
            return 0;
   20a4e:	2000      	movs	r0, #0
   20a50:	e7fa      	b.n	20a48 <ble_gatts_svc_incs_satisfied+0x30>
   20a52:	bf00      	nop
   20a54:	10003bb0 	.word	0x10003bb0

00020a58 <ble_gatts_dsc_op>:
}

static uint8_t
ble_gatts_dsc_op(uint8_t att_op)
{
    switch (att_op) {
   20a58:	2802      	cmp	r0, #2
   20a5a:	d001      	beq.n	20a60 <ble_gatts_dsc_op+0x8>
    case BLE_ATT_ACCESS_OP_READ:
        return BLE_GATT_ACCESS_OP_READ_DSC;
   20a5c:	2002      	movs	r0, #2
   20a5e:	4770      	bx	lr

    case BLE_ATT_ACCESS_OP_WRITE:
        return BLE_GATT_ACCESS_OP_WRITE_DSC;
   20a60:	2003      	movs	r0, #3

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_GATT_ACCESS_OP_READ_DSC;
    }
}
   20a62:	4770      	bx	lr

00020a64 <ble_gatts_dsc_inc_stat>:

static void
ble_gatts_dsc_inc_stat(uint8_t gatt_op)
{
    switch (gatt_op) {
   20a64:	2802      	cmp	r0, #2
   20a66:	d002      	beq.n	20a6e <ble_gatts_dsc_inc_stat+0xa>
   20a68:	2803      	cmp	r0, #3
   20a6a:	d005      	beq.n	20a78 <ble_gatts_dsc_inc_stat+0x14>
   20a6c:	4770      	bx	lr
    case BLE_GATT_ACCESS_OP_READ_DSC:
        STATS_INC(ble_gatts_stats, dsc_reads);
   20a6e:	4a05      	ldr	r2, [pc, #20]	; (20a84 <ble_gatts_dsc_inc_stat+0x20>)
   20a70:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   20a72:	3301      	adds	r3, #1
   20a74:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
   20a76:	4770      	bx	lr

    case BLE_GATT_ACCESS_OP_WRITE_DSC:
        STATS_INC(ble_gatts_stats, dsc_writes);
   20a78:	4a02      	ldr	r2, [pc, #8]	; (20a84 <ble_gatts_dsc_inc_stat+0x20>)
   20a7a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   20a7c:	3301      	adds	r3, #1
   20a7e:	6313      	str	r3, [r2, #48]	; 0x30
        break;

    default:
        break;
    }
}
   20a80:	4770      	bx	lr
   20a82:	bf00      	nop
   20a84:	10003b78 	.word	0x10003b78

00020a88 <ble_gatts_dsc_is_sane>:
}

static int
ble_gatts_dsc_is_sane(const struct ble_gatt_dsc_def *dsc)
{
    if (dsc->uuid == NULL) {
   20a88:	6803      	ldr	r3, [r0, #0]
   20a8a:	b11b      	cbz	r3, 20a94 <ble_gatts_dsc_is_sane+0xc>
        return 0;
    }

    if (dsc->access_cb == NULL) {
   20a8c:	6883      	ldr	r3, [r0, #8]
   20a8e:	b11b      	cbz	r3, 20a98 <ble_gatts_dsc_is_sane+0x10>
        return 0;
    }

    return 1;
   20a90:	2001      	movs	r0, #1
   20a92:	4770      	bx	lr
        return 0;
   20a94:	2000      	movs	r0, #0
   20a96:	4770      	bx	lr
        return 0;
   20a98:	2000      	movs	r0, #0
}
   20a9a:	4770      	bx	lr

00020a9c <ble_gatts_clt_cfg_find_idx>:
}

static int
ble_gatts_clt_cfg_find_idx(struct ble_gatts_clt_cfg *cfgs,
                           uint16_t chr_val_handle)
{
   20a9c:	4602      	mov	r2, r0
    struct ble_gatts_clt_cfg *cfg;
    int i;

    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   20a9e:	2000      	movs	r0, #0
   20aa0:	4b06      	ldr	r3, [pc, #24]	; (20abc <ble_gatts_clt_cfg_find_idx+0x20>)
   20aa2:	681b      	ldr	r3, [r3, #0]
   20aa4:	4283      	cmp	r3, r0
   20aa6:	dd05      	ble.n	20ab4 <ble_gatts_clt_cfg_find_idx+0x18>
        cfg = cfgs + i;
        if (cfg->chr_val_handle == chr_val_handle) {
   20aa8:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
   20aac:	428b      	cmp	r3, r1
   20aae:	d003      	beq.n	20ab8 <ble_gatts_clt_cfg_find_idx+0x1c>
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   20ab0:	3001      	adds	r0, #1
   20ab2:	e7f5      	b.n	20aa0 <ble_gatts_clt_cfg_find_idx+0x4>
            return i;
        }
    }

    return -1;
   20ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   20ab8:	4770      	bx	lr
   20aba:	bf00      	nop
   20abc:	10003b6c 	.word	0x10003b6c

00020ac0 <ble_gatts_clt_cfg_find>:

static struct ble_gatts_clt_cfg *
ble_gatts_clt_cfg_find(struct ble_gatts_clt_cfg *cfgs,
                       uint16_t chr_val_handle)
{
   20ac0:	b510      	push	{r4, lr}
   20ac2:	4604      	mov	r4, r0
    int idx;

    idx = ble_gatts_clt_cfg_find_idx(cfgs, chr_val_handle);
   20ac4:	f7ff ffea 	bl	20a9c <ble_gatts_clt_cfg_find_idx>
    if (idx == -1) {
   20ac8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   20acc:	d002      	beq.n	20ad4 <ble_gatts_clt_cfg_find+0x14>
        return NULL;
    } else {
        return cfgs + idx;
   20ace:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    }
}
   20ad2:	bd10      	pop	{r4, pc}
        return NULL;
   20ad4:	2000      	movs	r0, #0
   20ad6:	e7fc      	b.n	20ad2 <ble_gatts_clt_cfg_find+0x12>

00020ad8 <ble_gatts_svc_type_to_uuid>:
}

static int
ble_gatts_svc_type_to_uuid(uint8_t svc_type, const ble_uuid_t **uuid)
{
    switch (svc_type) {
   20ad8:	2801      	cmp	r0, #1
   20ada:	d003      	beq.n	20ae4 <ble_gatts_svc_type_to_uuid+0xc>
   20adc:	2802      	cmp	r0, #2
   20ade:	d005      	beq.n	20aec <ble_gatts_svc_type_to_uuid+0x14>
   20ae0:	2003      	movs	r0, #3
   20ae2:	4770      	bx	lr
    case BLE_GATT_SVC_TYPE_PRIMARY:
        *uuid = uuid_pri;
   20ae4:	4b03      	ldr	r3, [pc, #12]	; (20af4 <ble_gatts_svc_type_to_uuid+0x1c>)
   20ae6:	600b      	str	r3, [r1, #0]
        return 0;
   20ae8:	2000      	movs	r0, #0
   20aea:	4770      	bx	lr

    case BLE_GATT_SVC_TYPE_SECONDARY:
        *uuid = uuid_sec;
   20aec:	4b02      	ldr	r3, [pc, #8]	; (20af8 <ble_gatts_svc_type_to_uuid+0x20>)
   20aee:	600b      	str	r3, [r1, #0]
        return 0;
   20af0:	2000      	movs	r0, #0

    default:
        return BLE_HS_EINVAL;
    }
}
   20af2:	4770      	bx	lr
   20af4:	100002a8 	.word	0x100002a8
   20af8:	100002ac 	.word	0x100002ac

00020afc <ble_gatts_svc_is_sane>:

static int
ble_gatts_svc_is_sane(const struct ble_gatt_svc_def *svc)
{
    if (svc->type != BLE_GATT_SVC_TYPE_PRIMARY &&
   20afc:	7803      	ldrb	r3, [r0, #0]
   20afe:	3b01      	subs	r3, #1
   20b00:	b2db      	uxtb	r3, r3
   20b02:	2b01      	cmp	r3, #1
   20b04:	d803      	bhi.n	20b0e <ble_gatts_svc_is_sane+0x12>
        svc->type != BLE_GATT_SVC_TYPE_SECONDARY) {

        return 0;
    }

    if (svc->uuid == NULL) {
   20b06:	6843      	ldr	r3, [r0, #4]
   20b08:	b11b      	cbz	r3, 20b12 <ble_gatts_svc_is_sane+0x16>
        return 0;
    }

    return 1;
   20b0a:	2001      	movs	r0, #1
   20b0c:	4770      	bx	lr
        return 0;
   20b0e:	2000      	movs	r0, #0
   20b10:	4770      	bx	lr
        return 0;
   20b12:	2000      	movs	r0, #0
}
   20b14:	4770      	bx	lr
	...

00020b18 <ble_gatts_clt_cfg_size>:
}

static int
ble_gatts_clt_cfg_size(void)
{
    return ble_gatts_num_cfgable_chrs * sizeof (struct ble_gatts_clt_cfg);
   20b18:	4b01      	ldr	r3, [pc, #4]	; (20b20 <ble_gatts_clt_cfg_size+0x8>)
   20b1a:	6818      	ldr	r0, [r3, #0]
}
   20b1c:	0080      	lsls	r0, r0, #2
   20b1e:	4770      	bx	lr
   20b20:	10003b6c 	.word	0x10003b6c

00020b24 <ble_gatts_schedule_update>:
 *                                  if any.  0 if nothing should get sent.
 */
static uint8_t
ble_gatts_schedule_update(struct ble_hs_conn *conn,
                          struct ble_gatts_clt_cfg *clt_cfg)
{
   20b24:	4603      	mov	r3, r0
    uint8_t att_op;

    if (!(clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED)) {
   20b26:	788a      	ldrb	r2, [r1, #2]
   20b28:	f991 0002 	ldrsb.w	r0, [r1, #2]
   20b2c:	2800      	cmp	r0, #0
   20b2e:	db01      	blt.n	20b34 <ble_gatts_schedule_update+0x10>
        /* Characteristic not modified.  Nothing to send. */
        att_op = 0;
   20b30:	2000      	movs	r0, #0
    if (att_op != 0) {
        clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
    }

    return att_op;
}
   20b32:	4770      	bx	lr
{
   20b34:	b410      	push	{r4}
    } else if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_NOTIFY) {
   20b36:	f012 0401 	ands.w	r4, r2, #1
   20b3a:	d107      	bne.n	20b4c <ble_gatts_schedule_update+0x28>
    } else if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_INDICATE) {
   20b3c:	f012 0002 	ands.w	r0, r2, #2
   20b40:	d008      	beq.n	20b54 <ble_gatts_schedule_update+0x30>
        if (conn->bhc_gatt_svr.indicate_val_handle != 0) {
   20b42:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
   20b46:	b93b      	cbnz	r3, 20b58 <ble_gatts_schedule_update+0x34>
            att_op = BLE_ATT_OP_INDICATE_REQ;
   20b48:	201d      	movs	r0, #29
   20b4a:	e000      	b.n	20b4e <ble_gatts_schedule_update+0x2a>
        att_op = BLE_ATT_OP_NOTIFY_REQ;
   20b4c:	201b      	movs	r0, #27
        clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
   20b4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   20b52:	708a      	strb	r2, [r1, #2]
}
   20b54:	bc10      	pop	{r4}
   20b56:	4770      	bx	lr
            att_op = 0;
   20b58:	4620      	mov	r0, r4
   20b5a:	e7fb      	b.n	20b54 <ble_gatts_schedule_update+0x30>

00020b5c <ble_gatts_count_resources>:
 *                                  invalid resource definition.
 */
static int
ble_gatts_count_resources(const struct ble_gatt_svc_def *svcs,
                          struct ble_gatt_resources *res)
{
   20b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20b60:	4682      	mov	sl, r0
   20b62:	460c      	mov	r4, r1
    int s;
    int i;
    int c;
    int d;

    for (s = 0; svcs[s].type != BLE_GATT_SVC_TYPE_END; s++) {
   20b64:	f04f 0900 	mov.w	r9, #0
   20b68:	e049      	b.n	20bfe <ble_gatts_count_resources+0xa2>
            for (i = 0; svc->includes[i] != NULL; i++) {
                /* Each include requires:
                 *     o 1 include
                 *     o 1 attribute
                 */
                res->incs++;
   20b6a:	8863      	ldrh	r3, [r4, #2]
   20b6c:	3301      	adds	r3, #1
   20b6e:	8063      	strh	r3, [r4, #2]
                res->attrs++;
   20b70:	8963      	ldrh	r3, [r4, #10]
   20b72:	3301      	adds	r3, #1
   20b74:	8163      	strh	r3, [r4, #10]
            for (i = 0; svc->includes[i] != NULL; i++) {
   20b76:	3201      	adds	r2, #1
   20b78:	68bb      	ldr	r3, [r7, #8]
   20b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   20b7e:	2b00      	cmp	r3, #0
   20b80:	d1f3      	bne.n	20b6a <ble_gatts_count_resources+0xe>
   20b82:	e050      	b.n	20c26 <ble_gatts_count_resources+0xca>
   20b84:	2200      	movs	r2, #0
   20b86:	e7f7      	b.n	20b78 <ble_gatts_count_resources+0x1c>
                    res->dscs++;
                    res->cccds++;
                    res->attrs++;
                }

                if (chr->descriptors != NULL) {
   20b88:	68f3      	ldr	r3, [r6, #12]
   20b8a:	bb1b      	cbnz	r3, 20bd4 <ble_gatts_count_resources+0x78>
            for (c = 0; svc->characteristics[c].uuid != NULL; c++) {
   20b8c:	f108 0801 	add.w	r8, r8, #1
   20b90:	68fb      	ldr	r3, [r7, #12]
   20b92:	eb08 0248 	add.w	r2, r8, r8, lsl #1
   20b96:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
   20b9a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   20b9e:	2b00      	cmp	r3, #0
   20ba0:	d02b      	beq.n	20bfa <ble_gatts_count_resources+0x9e>
                if (!ble_gatts_chr_is_sane(chr)) {
   20ba2:	4630      	mov	r0, r6
   20ba4:	f7ff ff01 	bl	209aa <ble_gatts_chr_is_sane>
   20ba8:	2800      	cmp	r0, #0
   20baa:	d046      	beq.n	20c3a <ble_gatts_count_resources+0xde>
                res->chrs++;
   20bac:	88a3      	ldrh	r3, [r4, #4]
   20bae:	3301      	adds	r3, #1
   20bb0:	80a3      	strh	r3, [r4, #4]
                res->attrs += 2;
   20bb2:	8963      	ldrh	r3, [r4, #10]
   20bb4:	3302      	adds	r3, #2
   20bb6:	b29b      	uxth	r3, r3
   20bb8:	8163      	strh	r3, [r4, #10]
                if (chr->flags & BLE_GATT_CHR_F_NOTIFY ||
   20bba:	8a32      	ldrh	r2, [r6, #16]
   20bbc:	f012 0f30 	tst.w	r2, #48	; 0x30
   20bc0:	d0e2      	beq.n	20b88 <ble_gatts_count_resources+0x2c>
                    res->dscs++;
   20bc2:	88e2      	ldrh	r2, [r4, #6]
   20bc4:	3201      	adds	r2, #1
   20bc6:	80e2      	strh	r2, [r4, #6]
                    res->cccds++;
   20bc8:	8922      	ldrh	r2, [r4, #8]
   20bca:	3201      	adds	r2, #1
   20bcc:	8122      	strh	r2, [r4, #8]
                    res->attrs++;
   20bce:	3301      	adds	r3, #1
   20bd0:	8163      	strh	r3, [r4, #10]
   20bd2:	e7d9      	b.n	20b88 <ble_gatts_count_resources+0x2c>
                    for (d = 0; chr->descriptors[d].uuid != NULL; d++) {
   20bd4:	2500      	movs	r5, #0
   20bd6:	68f2      	ldr	r2, [r6, #12]
   20bd8:	012b      	lsls	r3, r5, #4
   20bda:	eb02 1005 	add.w	r0, r2, r5, lsl #4
   20bde:	58d3      	ldr	r3, [r2, r3]
   20be0:	2b00      	cmp	r3, #0
   20be2:	d0d3      	beq.n	20b8c <ble_gatts_count_resources+0x30>
                        if (!ble_gatts_dsc_is_sane(chr->descriptors + d)) {
   20be4:	f7ff ff50 	bl	20a88 <ble_gatts_dsc_is_sane>
   20be8:	b348      	cbz	r0, 20c3e <ble_gatts_count_resources+0xe2>

                        /* Each descriptor requires:
                         *     o 1 descriptor
                         *     o 1 attribute
                         */
                        res->dscs++;
   20bea:	88e3      	ldrh	r3, [r4, #6]
   20bec:	3301      	adds	r3, #1
   20bee:	80e3      	strh	r3, [r4, #6]
                        res->attrs++;
   20bf0:	8963      	ldrh	r3, [r4, #10]
   20bf2:	3301      	adds	r3, #1
   20bf4:	8163      	strh	r3, [r4, #10]
                    for (d = 0; chr->descriptors[d].uuid != NULL; d++) {
   20bf6:	3501      	adds	r5, #1
   20bf8:	e7ed      	b.n	20bd6 <ble_gatts_count_resources+0x7a>
    for (s = 0; svcs[s].type != BLE_GATT_SVC_TYPE_END; s++) {
   20bfa:	f109 0901 	add.w	r9, r9, #1
   20bfe:	ea4f 1309 	mov.w	r3, r9, lsl #4
   20c02:	eb0a 1709 	add.w	r7, sl, r9, lsl #4
   20c06:	f81a 3003 	ldrb.w	r3, [sl, r3]
   20c0a:	b193      	cbz	r3, 20c32 <ble_gatts_count_resources+0xd6>
        if (!ble_gatts_svc_is_sane(svc)) {
   20c0c:	4638      	mov	r0, r7
   20c0e:	f7ff ff75 	bl	20afc <ble_gatts_svc_is_sane>
   20c12:	b180      	cbz	r0, 20c36 <ble_gatts_count_resources+0xda>
        res->svcs++;
   20c14:	8823      	ldrh	r3, [r4, #0]
   20c16:	3301      	adds	r3, #1
   20c18:	8023      	strh	r3, [r4, #0]
        res->attrs++;
   20c1a:	8963      	ldrh	r3, [r4, #10]
   20c1c:	3301      	adds	r3, #1
   20c1e:	8163      	strh	r3, [r4, #10]
        if (svc->includes != NULL) {
   20c20:	68bb      	ldr	r3, [r7, #8]
   20c22:	2b00      	cmp	r3, #0
   20c24:	d1ae      	bne.n	20b84 <ble_gatts_count_resources+0x28>
        if (svc->characteristics != NULL) {
   20c26:	68fb      	ldr	r3, [r7, #12]
   20c28:	2b00      	cmp	r3, #0
   20c2a:	d0e6      	beq.n	20bfa <ble_gatts_count_resources+0x9e>
            for (c = 0; svc->characteristics[c].uuid != NULL; c++) {
   20c2c:	f04f 0800 	mov.w	r8, #0
   20c30:	e7ae      	b.n	20b90 <ble_gatts_count_resources+0x34>
                }
            }
        }
    }

    return 0;
   20c32:	2000      	movs	r0, #0
   20c34:	e004      	b.n	20c40 <ble_gatts_count_resources+0xe4>
            return BLE_HS_EINVAL;
   20c36:	2003      	movs	r0, #3
   20c38:	e002      	b.n	20c40 <ble_gatts_count_resources+0xe4>
                    return BLE_HS_EINVAL;
   20c3a:	2003      	movs	r0, #3
   20c3c:	e000      	b.n	20c40 <ble_gatts_count_resources+0xe4>
                            return BLE_HS_EINVAL;
   20c3e:	2003      	movs	r0, #3
}
   20c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00020c44 <ble_gatts_clt_cfg_access_locked>:
{
   20c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20c48:	9e07      	ldr	r6, [sp, #28]
    out_cccd->chr_val_handle = 0;
   20c4a:	2300      	movs	r3, #0
   20c4c:	8133      	strh	r3, [r6, #8]
    chr_val_handle = attr_handle - 1;
   20c4e:	1e4c      	subs	r4, r1, #1
   20c50:	b2a4      	uxth	r4, r4
    if (chr_val_handle > attr_handle) {
   20c52:	42a1      	cmp	r1, r4
   20c54:	d366      	bcc.n	20d24 <ble_gatts_clt_cfg_access_locked+0xe0>
   20c56:	4605      	mov	r5, r0
   20c58:	4617      	mov	r7, r2
    clt_cfg = ble_gatts_clt_cfg_find(conn->bhc_gatt_svr.clt_cfgs,
   20c5a:	4621      	mov	r1, r4
   20c5c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   20c5e:	f7ff ff2f 	bl	20ac0 <ble_gatts_clt_cfg_find>
    if (clt_cfg == NULL) {
   20c62:	4680      	mov	r8, r0
   20c64:	2800      	cmp	r0, #0
   20c66:	d05f      	beq.n	20d28 <ble_gatts_clt_cfg_access_locked+0xe4>
    *out_prev_clt_cfg_flags = clt_cfg->flags;
   20c68:	7883      	ldrb	r3, [r0, #2]
   20c6a:	9a08      	ldr	r2, [sp, #32]
   20c6c:	7013      	strb	r3, [r2, #0]
    *out_cur_clt_cfg_flags = clt_cfg->flags;
   20c6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20c70:	7013      	strb	r3, [r2, #0]
    gatt_op = ble_gatts_dsc_op(att_op);
   20c72:	4638      	mov	r0, r7
   20c74:	f7ff fef0 	bl	20a58 <ble_gatts_dsc_op>
   20c78:	4607      	mov	r7, r0
    ble_gatts_dsc_inc_stat(gatt_op);
   20c7a:	f7ff fef3 	bl	20a64 <ble_gatts_dsc_inc_stat>
    switch (gatt_op) {
   20c7e:	2f02      	cmp	r7, #2
   20c80:	d005      	beq.n	20c8e <ble_gatts_clt_cfg_access_locked+0x4a>
   20c82:	2f03      	cmp	r7, #3
   20c84:	d015      	beq.n	20cb2 <ble_gatts_clt_cfg_access_locked+0x6e>
   20c86:	270e      	movs	r7, #14
}
   20c88:	4638      	mov	r0, r7
   20c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        STATS_INC(ble_gatts_stats, dsc_reads);
   20c8e:	4a29      	ldr	r2, [pc, #164]	; (20d34 <ble_gatts_clt_cfg_access_locked+0xf0>)
   20c90:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   20c92:	3301      	adds	r3, #1
   20c94:	62d3      	str	r3, [r2, #44]	; 0x2c
        buf = os_mbuf_extend(om, 2);
   20c96:	2102      	movs	r1, #2
   20c98:	9806      	ldr	r0, [sp, #24]
   20c9a:	f7f4 ff18 	bl	15ace <os_mbuf_extend>
        if (buf == NULL) {
   20c9e:	2800      	cmp	r0, #0
   20ca0:	d044      	beq.n	20d2c <ble_gatts_clt_cfg_access_locked+0xe8>
        put_le16(buf, clt_cfg->flags & ~BLE_GATTS_CLT_CFG_F_RESERVED);
   20ca2:	f898 1002 	ldrb.w	r1, [r8, #2]
   20ca6:	f001 0103 	and.w	r1, r1, #3
   20caa:	f00c fbf5 	bl	2d498 <put_le16>
    return 0;
   20cae:	2700      	movs	r7, #0
        break;
   20cb0:	e7ea      	b.n	20c88 <ble_gatts_clt_cfg_access_locked+0x44>
        STATS_INC(ble_gatts_stats, dsc_writes);
   20cb2:	4a20      	ldr	r2, [pc, #128]	; (20d34 <ble_gatts_clt_cfg_access_locked+0xf0>)
   20cb4:	6b13      	ldr	r3, [r2, #48]	; 0x30
   20cb6:	3301      	adds	r3, #1
   20cb8:	6313      	str	r3, [r2, #48]	; 0x30
        if (OS_MBUF_PKTLEN(om) != 2) {
   20cba:	9b06      	ldr	r3, [sp, #24]
   20cbc:	8a1b      	ldrh	r3, [r3, #16]
   20cbe:	2b02      	cmp	r3, #2
   20cc0:	d001      	beq.n	20cc6 <ble_gatts_clt_cfg_access_locked+0x82>
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   20cc2:	270d      	movs	r7, #13
   20cc4:	e7e0      	b.n	20c88 <ble_gatts_clt_cfg_access_locked+0x44>
        om = os_mbuf_pullup(om, 2);
   20cc6:	2102      	movs	r1, #2
   20cc8:	9806      	ldr	r0, [sp, #24]
   20cca:	f7f4 ff2e 	bl	15b2a <os_mbuf_pullup>
        flags = get_le16(om->om_data);
   20cce:	6800      	ldr	r0, [r0, #0]
   20cd0:	f00c fbf0 	bl	2d4b4 <get_le16>
        if ((flags & ~clt_cfg->allowed) != 0) {
   20cd4:	f898 7003 	ldrb.w	r7, [r8, #3]
   20cd8:	ea30 0707 	bics.w	r7, r0, r7
   20cdc:	d128      	bne.n	20d30 <ble_gatts_clt_cfg_access_locked+0xec>
        if (clt_cfg->flags != flags) {
   20cde:	f898 3002 	ldrb.w	r3, [r8, #2]
   20ce2:	4283      	cmp	r3, r0
   20ce4:	d0d0      	beq.n	20c88 <ble_gatts_clt_cfg_access_locked+0x44>
            clt_cfg->flags = flags;
   20ce6:	b2c0      	uxtb	r0, r0
   20ce8:	f888 0002 	strb.w	r0, [r8, #2]
            *out_cur_clt_cfg_flags = flags;
   20cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20cee:	7018      	strb	r0, [r3, #0]
            if (conn->bhc_sec_state.bonded) {
   20cf0:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
   20cf4:	f013 0f04 	tst.w	r3, #4
   20cf8:	d0c6      	beq.n	20c88 <ble_gatts_clt_cfg_access_locked+0x44>
                out_cccd->peer_addr = conn->bhc_peer_addr;
   20cfa:	462b      	mov	r3, r5
   20cfc:	f853 0f07 	ldr.w	r0, [r3, #7]!
   20d00:	6030      	str	r0, [r6, #0]
   20d02:	889a      	ldrh	r2, [r3, #4]
   20d04:	799b      	ldrb	r3, [r3, #6]
   20d06:	80b2      	strh	r2, [r6, #4]
   20d08:	71b3      	strb	r3, [r6, #6]
                    ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   20d0a:	79e8      	ldrb	r0, [r5, #7]
   20d0c:	f002 fe59 	bl	239c2 <ble_hs_misc_peer_addr_type_to_id>
                out_cccd->peer_addr.type =
   20d10:	7030      	strb	r0, [r6, #0]
                out_cccd->chr_val_handle = chr_val_handle;
   20d12:	8134      	strh	r4, [r6, #8]
                out_cccd->flags = clt_cfg->flags;
   20d14:	f898 3002 	ldrb.w	r3, [r8, #2]
   20d18:	8173      	strh	r3, [r6, #10]
                out_cccd->value_changed = 0;
   20d1a:	7b33      	ldrb	r3, [r6, #12]
   20d1c:	f36f 0300 	bfc	r3, #0, #1
   20d20:	7333      	strb	r3, [r6, #12]
   20d22:	e7b1      	b.n	20c88 <ble_gatts_clt_cfg_access_locked+0x44>
        return BLE_ATT_ERR_UNLIKELY;
   20d24:	270e      	movs	r7, #14
   20d26:	e7af      	b.n	20c88 <ble_gatts_clt_cfg_access_locked+0x44>
        return BLE_ATT_ERR_UNLIKELY;
   20d28:	270e      	movs	r7, #14
   20d2a:	e7ad      	b.n	20c88 <ble_gatts_clt_cfg_access_locked+0x44>
            return BLE_ATT_ERR_INSUFFICIENT_RES;
   20d2c:	2711      	movs	r7, #17
   20d2e:	e7ab      	b.n	20c88 <ble_gatts_clt_cfg_access_locked+0x44>
            return BLE_ATT_ERR_REQ_NOT_SUPPORTED;
   20d30:	2706      	movs	r7, #6
   20d32:	e7a9      	b.n	20c88 <ble_gatts_clt_cfg_access_locked+0x44>
   20d34:	10003b78 	.word	0x10003b78

00020d38 <ble_gatts_subscribe_event>:
{
   20d38:	b530      	push	{r4, r5, lr}
   20d3a:	b085      	sub	sp, #20
   20d3c:	f89d 4020 	ldrb.w	r4, [sp, #32]
    if ((prev_flags ^ cur_flags) & ~BLE_GATTS_CLT_CFG_F_RESERVED) {
   20d40:	ea83 0504 	eor.w	r5, r3, r4
   20d44:	f035 05fc 	bics.w	r5, r5, #252	; 0xfc
   20d48:	d101      	bne.n	20d4e <ble_gatts_subscribe_event+0x16>
}
   20d4a:	b005      	add	sp, #20
   20d4c:	bd30      	pop	{r4, r5, pc}
        ble_gap_subscribe_event(conn_handle,
   20d4e:	f004 0502 	and.w	r5, r4, #2
   20d52:	9502      	str	r5, [sp, #8]
   20d54:	f003 0502 	and.w	r5, r3, #2
   20d58:	9501      	str	r5, [sp, #4]
   20d5a:	f004 0401 	and.w	r4, r4, #1
   20d5e:	9400      	str	r4, [sp, #0]
   20d60:	f003 0301 	and.w	r3, r3, #1
   20d64:	f7fe fd3e 	bl	1f7e4 <ble_gap_subscribe_event>
}
   20d68:	e7ef      	b.n	20d4a <ble_gatts_subscribe_event+0x12>

00020d6a <ble_gatts_clt_cfg_access>:
{
   20d6a:	b5f0      	push	{r4, r5, r6, r7, lr}
   20d6c:	b08d      	sub	sp, #52	; 0x34
   20d6e:	4606      	mov	r6, r0
   20d70:	460d      	mov	r5, r1
   20d72:	4617      	mov	r7, r2
   20d74:	461c      	mov	r4, r3
    ble_hs_lock();
   20d76:	f000 fec5 	bl	21b04 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   20d7a:	4630      	mov	r0, r6
   20d7c:	f001 fd1e 	bl	227bc <ble_hs_conn_find>
    if (conn == NULL) {
   20d80:	b1b0      	cbz	r0, 20db0 <ble_gatts_clt_cfg_access+0x46>
        rc = ble_gatts_clt_cfg_access_locked(conn, attr_handle, op, offset,
   20d82:	f10d 0312 	add.w	r3, sp, #18
   20d86:	9303      	str	r3, [sp, #12]
   20d88:	f10d 0313 	add.w	r3, sp, #19
   20d8c:	9302      	str	r3, [sp, #8]
   20d8e:	ab08      	add	r3, sp, #32
   20d90:	9301      	str	r3, [sp, #4]
   20d92:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20d94:	681b      	ldr	r3, [r3, #0]
   20d96:	9300      	str	r3, [sp, #0]
   20d98:	4623      	mov	r3, r4
   20d9a:	463a      	mov	r2, r7
   20d9c:	4629      	mov	r1, r5
   20d9e:	f7ff ff51 	bl	20c44 <ble_gatts_clt_cfg_access_locked>
   20da2:	4604      	mov	r4, r0
    ble_hs_unlock();
   20da4:	f000 feb2 	bl	21b0c <ble_hs_unlock>
    if (rc != 0) {
   20da8:	b134      	cbz	r4, 20db8 <ble_gatts_clt_cfg_access+0x4e>
}
   20daa:	4620      	mov	r0, r4
   20dac:	b00d      	add	sp, #52	; 0x34
   20dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ble_hs_unlock();
   20db0:	f000 feac 	bl	21b0c <ble_hs_unlock>
        rc = BLE_ATT_ERR_UNLIKELY;
   20db4:	240e      	movs	r4, #14
   20db6:	e7f8      	b.n	20daa <ble_gatts_clt_cfg_access+0x40>
    chr_val_handle = attr_handle - 1;
   20db8:	1e69      	subs	r1, r5, #1
    ble_gatts_subscribe_event(conn_handle, chr_val_handle,
   20dba:	f89d 3012 	ldrb.w	r3, [sp, #18]
   20dbe:	9300      	str	r3, [sp, #0]
   20dc0:	f89d 3013 	ldrb.w	r3, [sp, #19]
   20dc4:	2201      	movs	r2, #1
   20dc6:	b289      	uxth	r1, r1
   20dc8:	4630      	mov	r0, r6
   20dca:	f7ff ffb5 	bl	20d38 <ble_gatts_subscribe_event>
    if (cccd_value.chr_val_handle != 0) {
   20dce:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   20dd2:	2b00      	cmp	r3, #0
   20dd4:	d0e9      	beq.n	20daa <ble_gatts_clt_cfg_access+0x40>
        if (cccd_value.flags == 0) {
   20dd6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   20dda:	b943      	cbnz	r3, 20dee <ble_gatts_clt_cfg_access+0x84>
            ble_store_key_from_value_cccd(&cccd_key, &cccd_value);
   20ddc:	a908      	add	r1, sp, #32
   20dde:	a805      	add	r0, sp, #20
   20de0:	f005 fc16 	bl	26610 <ble_store_key_from_value_cccd>
            rc = ble_store_delete_cccd(&cccd_key);
   20de4:	a805      	add	r0, sp, #20
   20de6:	f005 fc0d 	bl	26604 <ble_store_delete_cccd>
   20dea:	4604      	mov	r4, r0
   20dec:	e7dd      	b.n	20daa <ble_gatts_clt_cfg_access+0x40>
            rc = ble_store_write_cccd(&cccd_value);
   20dee:	a808      	add	r0, sp, #32
   20df0:	f005 fc02 	bl	265f8 <ble_store_write_cccd>
   20df4:	4604      	mov	r4, r0
   20df6:	e7d8      	b.n	20daa <ble_gatts_clt_cfg_access+0x40>

00020df8 <ble_gatts_register_inc>:
{
   20df8:	b500      	push	{lr}
   20dfa:	b085      	sub	sp, #20
    rc = ble_att_svr_register(uuid_inc, BLE_ATT_F_READ, 0, &handle,
   20dfc:	9001      	str	r0, [sp, #4]
   20dfe:	4b06      	ldr	r3, [pc, #24]	; (20e18 <ble_gatts_register_inc+0x20>)
   20e00:	9300      	str	r3, [sp, #0]
   20e02:	f10d 030e 	add.w	r3, sp, #14
   20e06:	2200      	movs	r2, #0
   20e08:	2101      	movs	r1, #1
   20e0a:	4804      	ldr	r0, [pc, #16]	; (20e1c <ble_gatts_register_inc+0x24>)
   20e0c:	f7fc fc76 	bl	1d6fc <ble_att_svr_register>
}
   20e10:	b005      	add	sp, #20
   20e12:	f85d fb04 	ldr.w	pc, [sp], #4
   20e16:	bf00      	nop
   20e18:	00021191 	.word	0x00021191
   20e1c:	100002b0 	.word	0x100002b0

00020e20 <ble_gatts_register_clt_cfg_dsc>:
{
   20e20:	b500      	push	{lr}
   20e22:	b083      	sub	sp, #12
   20e24:	4603      	mov	r3, r0
    rc = ble_att_svr_register(uuid_ccc, BLE_ATT_F_READ | BLE_ATT_F_WRITE, 0,
   20e26:	2200      	movs	r2, #0
   20e28:	9201      	str	r2, [sp, #4]
   20e2a:	4907      	ldr	r1, [pc, #28]	; (20e48 <ble_gatts_register_clt_cfg_dsc+0x28>)
   20e2c:	9100      	str	r1, [sp, #0]
   20e2e:	2103      	movs	r1, #3
   20e30:	4806      	ldr	r0, [pc, #24]	; (20e4c <ble_gatts_register_clt_cfg_dsc+0x2c>)
   20e32:	f7fc fc63 	bl	1d6fc <ble_att_svr_register>
    if (rc != 0) {
   20e36:	b918      	cbnz	r0, 20e40 <ble_gatts_register_clt_cfg_dsc+0x20>
    STATS_INC(ble_gatts_stats, dscs);
   20e38:	4a05      	ldr	r2, [pc, #20]	; (20e50 <ble_gatts_register_clt_cfg_dsc+0x30>)
   20e3a:	6953      	ldr	r3, [r2, #20]
   20e3c:	3301      	adds	r3, #1
   20e3e:	6153      	str	r3, [r2, #20]
}
   20e40:	b003      	add	sp, #12
   20e42:	f85d fb04 	ldr.w	pc, [sp], #4
   20e46:	bf00      	nop
   20e48:	00020d6b 	.word	0x00020d6b
   20e4c:	100002b8 	.word	0x100002b8
   20e50:	10003b78 	.word	0x10003b78

00020e54 <ble_gatts_register_dsc>:
{
   20e54:	b5f0      	push	{r4, r5, r6, r7, lr}
   20e56:	b089      	sub	sp, #36	; 0x24
   20e58:	4606      	mov	r6, r0
   20e5a:	460d      	mov	r5, r1
   20e5c:	4614      	mov	r4, r2
    if (!ble_gatts_dsc_is_sane(dsc)) {
   20e5e:	4610      	mov	r0, r2
   20e60:	f7ff fe12 	bl	20a88 <ble_gatts_dsc_is_sane>
   20e64:	b310      	cbz	r0, 20eac <ble_gatts_register_dsc+0x58>
    rc = ble_att_svr_register(dsc->uuid, dsc->att_flags, dsc->min_key_size,
   20e66:	9401      	str	r4, [sp, #4]
   20e68:	4b11      	ldr	r3, [pc, #68]	; (20eb0 <ble_gatts_register_dsc+0x5c>)
   20e6a:	9300      	str	r3, [sp, #0]
   20e6c:	f10d 030a 	add.w	r3, sp, #10
   20e70:	7962      	ldrb	r2, [r4, #5]
   20e72:	7921      	ldrb	r1, [r4, #4]
   20e74:	6820      	ldr	r0, [r4, #0]
   20e76:	f7fc fc41 	bl	1d6fc <ble_att_svr_register>
    if (rc != 0) {
   20e7a:	4607      	mov	r7, r0
   20e7c:	b998      	cbnz	r0, 20ea6 <ble_gatts_register_dsc+0x52>
    if (register_cb != NULL) {
   20e7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20e80:	b16b      	cbz	r3, 20e9e <ble_gatts_register_dsc+0x4a>
        register_ctxt.op = BLE_GATT_REGISTER_OP_DSC;
   20e82:	2303      	movs	r3, #3
   20e84:	f88d 300c 	strb.w	r3, [sp, #12]
        register_ctxt.dsc.handle = dsc_handle;
   20e88:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   20e8c:	f8ad 3010 	strh.w	r3, [sp, #16]
        register_ctxt.dsc.svc_def = svc;
   20e90:	9607      	str	r6, [sp, #28]
        register_ctxt.dsc.chr_def = chr;
   20e92:	9506      	str	r5, [sp, #24]
        register_ctxt.dsc.dsc_def = dsc;
   20e94:	9405      	str	r4, [sp, #20]
        register_cb(&register_ctxt, cb_arg);
   20e96:	990f      	ldr	r1, [sp, #60]	; 0x3c
   20e98:	a803      	add	r0, sp, #12
   20e9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20e9c:	4798      	blx	r3
    STATS_INC(ble_gatts_stats, dscs);
   20e9e:	4a05      	ldr	r2, [pc, #20]	; (20eb4 <ble_gatts_register_dsc+0x60>)
   20ea0:	6953      	ldr	r3, [r2, #20]
   20ea2:	3301      	adds	r3, #1
   20ea4:	6153      	str	r3, [r2, #20]
}
   20ea6:	4638      	mov	r0, r7
   20ea8:	b009      	add	sp, #36	; 0x24
   20eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EINVAL;
   20eac:	2703      	movs	r7, #3
   20eae:	e7fa      	b.n	20ea6 <ble_gatts_register_dsc+0x52>
   20eb0:	000212c3 	.word	0x000212c3
   20eb4:	10003b78 	.word	0x10003b78

00020eb8 <ble_gatts_register_chr>:
{
   20eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20ebc:	b08b      	sub	sp, #44	; 0x2c
   20ebe:	4607      	mov	r7, r0
   20ec0:	460c      	mov	r4, r1
   20ec2:	4616      	mov	r6, r2
   20ec4:	4698      	mov	r8, r3
    if (!ble_gatts_chr_is_sane(chr)) {
   20ec6:	4608      	mov	r0, r1
   20ec8:	f7ff fd6f 	bl	209aa <ble_gatts_chr_is_sane>
   20ecc:	2800      	cmp	r0, #0
   20ece:	d063      	beq.n	20f98 <ble_gatts_register_chr+0xe0>
    if (ble_gatts_chr_clt_cfg_allowed(chr) != 0) {
   20ed0:	4620      	mov	r0, r4
   20ed2:	f7ff fd09 	bl	208e8 <ble_gatts_chr_clt_cfg_allowed>
   20ed6:	b140      	cbz	r0, 20eea <ble_gatts_register_chr+0x32>
        if (ble_gatts_num_cfgable_chrs > ble_hs_max_client_configs) {
   20ed8:	4b33      	ldr	r3, [pc, #204]	; (20fa8 <ble_gatts_register_chr+0xf0>)
   20eda:	881a      	ldrh	r2, [r3, #0]
   20edc:	4b33      	ldr	r3, [pc, #204]	; (20fac <ble_gatts_register_chr+0xf4>)
   20ede:	681b      	ldr	r3, [r3, #0]
   20ee0:	429a      	cmp	r2, r3
   20ee2:	db5c      	blt.n	20f9e <ble_gatts_register_chr+0xe6>
        ble_gatts_num_cfgable_chrs++;
   20ee4:	3301      	adds	r3, #1
   20ee6:	4a31      	ldr	r2, [pc, #196]	; (20fac <ble_gatts_register_chr+0xf4>)
   20ee8:	6013      	str	r3, [r2, #0]
    rc = ble_att_svr_register(uuid_chr, BLE_ATT_F_READ, 0, &def_handle,
   20eea:	9401      	str	r4, [sp, #4]
   20eec:	4b30      	ldr	r3, [pc, #192]	; (20fb0 <ble_gatts_register_chr+0xf8>)
   20eee:	9300      	str	r3, [sp, #0]
   20ef0:	f10d 0312 	add.w	r3, sp, #18
   20ef4:	2200      	movs	r2, #0
   20ef6:	2101      	movs	r1, #1
   20ef8:	482e      	ldr	r0, [pc, #184]	; (20fb4 <ble_gatts_register_chr+0xfc>)
   20efa:	f7fc fbff 	bl	1d6fc <ble_att_svr_register>
    if (rc != 0) {
   20efe:	4681      	mov	r9, r0
   20f00:	b118      	cbz	r0, 20f0a <ble_gatts_register_chr+0x52>
}
   20f02:	4648      	mov	r0, r9
   20f04:	b00b      	add	sp, #44	; 0x2c
   20f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    att_flags = ble_gatts_att_flags_from_chr_flags(chr->flags);
   20f0a:	8a20      	ldrh	r0, [r4, #16]
   20f0c:	f7ff fcf7 	bl	208fe <ble_gatts_att_flags_from_chr_flags>
   20f10:	4601      	mov	r1, r0
    rc = ble_att_svr_register(chr->uuid, att_flags, chr->min_key_size,
   20f12:	9401      	str	r4, [sp, #4]
   20f14:	4b28      	ldr	r3, [pc, #160]	; (20fb8 <ble_gatts_register_chr+0x100>)
   20f16:	9300      	str	r3, [sp, #0]
   20f18:	ab04      	add	r3, sp, #16
   20f1a:	7ca2      	ldrb	r2, [r4, #18]
   20f1c:	6820      	ldr	r0, [r4, #0]
   20f1e:	f7fc fbed 	bl	1d6fc <ble_att_svr_register>
    if (rc != 0) {
   20f22:	4681      	mov	r9, r0
   20f24:	2800      	cmp	r0, #0
   20f26:	d1ec      	bne.n	20f02 <ble_gatts_register_chr+0x4a>
    if (chr->val_handle != NULL) {
   20f28:	6963      	ldr	r3, [r4, #20]
   20f2a:	b113      	cbz	r3, 20f32 <ble_gatts_register_chr+0x7a>
        *chr->val_handle = val_handle;
   20f2c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   20f30:	801a      	strh	r2, [r3, #0]
    if (register_cb != NULL) {
   20f32:	b17e      	cbz	r6, 20f54 <ble_gatts_register_chr+0x9c>
        register_ctxt.op = BLE_GATT_REGISTER_OP_CHR;
   20f34:	2302      	movs	r3, #2
   20f36:	f88d 3014 	strb.w	r3, [sp, #20]
        register_ctxt.chr.def_handle = def_handle;
   20f3a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   20f3e:	f8ad 3018 	strh.w	r3, [sp, #24]
        register_ctxt.chr.val_handle = val_handle;
   20f42:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   20f46:	f8ad 301a 	strh.w	r3, [sp, #26]
        register_ctxt.chr.svc_def = svc;
   20f4a:	9708      	str	r7, [sp, #32]
        register_ctxt.chr.chr_def = chr;
   20f4c:	9407      	str	r4, [sp, #28]
        register_cb(&register_ctxt, cb_arg);
   20f4e:	4641      	mov	r1, r8
   20f50:	a805      	add	r0, sp, #20
   20f52:	47b0      	blx	r6
    if (ble_gatts_chr_clt_cfg_allowed(chr) != 0) {
   20f54:	4620      	mov	r0, r4
   20f56:	f7ff fcc7 	bl	208e8 <ble_gatts_chr_clt_cfg_allowed>
   20f5a:	b980      	cbnz	r0, 20f7e <ble_gatts_register_chr+0xc6>
    if (chr->descriptors != NULL) {
   20f5c:	68e5      	ldr	r5, [r4, #12]
   20f5e:	b1b5      	cbz	r5, 20f8e <ble_gatts_register_chr+0xd6>
        for (dsc = chr->descriptors; dsc->uuid != NULL; dsc++) {
   20f60:	682b      	ldr	r3, [r5, #0]
   20f62:	b1a3      	cbz	r3, 20f8e <ble_gatts_register_chr+0xd6>
            rc = ble_gatts_register_dsc(svc, chr, dsc, def_handle, register_cb,
   20f64:	f8cd 8004 	str.w	r8, [sp, #4]
   20f68:	9600      	str	r6, [sp, #0]
   20f6a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   20f6e:	462a      	mov	r2, r5
   20f70:	4621      	mov	r1, r4
   20f72:	4638      	mov	r0, r7
   20f74:	f7ff ff6e 	bl	20e54 <ble_gatts_register_dsc>
            if (rc != 0) {
   20f78:	b9a0      	cbnz	r0, 20fa4 <ble_gatts_register_chr+0xec>
        for (dsc = chr->descriptors; dsc->uuid != NULL; dsc++) {
   20f7a:	3510      	adds	r5, #16
   20f7c:	e7f0      	b.n	20f60 <ble_gatts_register_chr+0xa8>
        rc = ble_gatts_register_clt_cfg_dsc(&dsc_handle);
   20f7e:	f10d 000e 	add.w	r0, sp, #14
   20f82:	f7ff ff4d 	bl	20e20 <ble_gatts_register_clt_cfg_dsc>
        if (rc != 0) {
   20f86:	2800      	cmp	r0, #0
   20f88:	d0e8      	beq.n	20f5c <ble_gatts_register_chr+0xa4>
            return rc;
   20f8a:	4681      	mov	r9, r0
   20f8c:	e7b9      	b.n	20f02 <ble_gatts_register_chr+0x4a>
    STATS_INC(ble_gatts_stats, chrs);
   20f8e:	4a0b      	ldr	r2, [pc, #44]	; (20fbc <ble_gatts_register_chr+0x104>)
   20f90:	6913      	ldr	r3, [r2, #16]
   20f92:	3301      	adds	r3, #1
   20f94:	6113      	str	r3, [r2, #16]
    return 0;
   20f96:	e7b4      	b.n	20f02 <ble_gatts_register_chr+0x4a>
        return BLE_HS_EINVAL;
   20f98:	f04f 0903 	mov.w	r9, #3
   20f9c:	e7b1      	b.n	20f02 <ble_gatts_register_chr+0x4a>
            return BLE_HS_ENOMEM;
   20f9e:	f04f 0906 	mov.w	r9, #6
   20fa2:	e7ae      	b.n	20f02 <ble_gatts_register_chr+0x4a>
                return rc;
   20fa4:	4681      	mov	r9, r0
   20fa6:	e7ac      	b.n	20f02 <ble_gatts_register_chr+0x4a>
   20fa8:	10003cba 	.word	0x10003cba
   20fac:	10003b6c 	.word	0x10003b6c
   20fb0:	00021135 	.word	0x00021135
   20fb4:	100002b4 	.word	0x100002b4
   20fb8:	0002128b 	.word	0x0002128b
   20fbc:	10003b78 	.word	0x10003b78

00020fc0 <ble_gatts_register_svc>:
{
   20fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20fc4:	b088      	sub	sp, #32
   20fc6:	4604      	mov	r4, r0
   20fc8:	460d      	mov	r5, r1
   20fca:	4616      	mov	r6, r2
   20fcc:	461f      	mov	r7, r3
    if (!ble_gatts_svc_incs_satisfied(svc)) {
   20fce:	f7ff fd23 	bl	20a18 <ble_gatts_svc_incs_satisfied>
   20fd2:	2800      	cmp	r0, #0
   20fd4:	d046      	beq.n	21064 <ble_gatts_register_svc+0xa4>
    if (!ble_gatts_svc_is_sane(svc)) {
   20fd6:	4620      	mov	r0, r4
   20fd8:	f7ff fd90 	bl	20afc <ble_gatts_svc_is_sane>
   20fdc:	2800      	cmp	r0, #0
   20fde:	d047      	beq.n	21070 <ble_gatts_register_svc+0xb0>
    uuid = NULL;
   20fe0:	f04f 0800 	mov.w	r8, #0
   20fe4:	f8cd 8008 	str.w	r8, [sp, #8]
    rc = ble_gatts_svc_type_to_uuid(svc->type, &uuid);
   20fe8:	a902      	add	r1, sp, #8
   20fea:	7820      	ldrb	r0, [r4, #0]
   20fec:	f7ff fd74 	bl	20ad8 <ble_gatts_svc_type_to_uuid>
    rc = ble_att_svr_register(uuid, BLE_ATT_F_READ, 0, out_handle,
   20ff0:	9401      	str	r4, [sp, #4]
   20ff2:	4b23      	ldr	r3, [pc, #140]	; (21080 <ble_gatts_register_svc+0xc0>)
   20ff4:	9300      	str	r3, [sp, #0]
   20ff6:	462b      	mov	r3, r5
   20ff8:	4642      	mov	r2, r8
   20ffa:	2101      	movs	r1, #1
   20ffc:	9802      	ldr	r0, [sp, #8]
   20ffe:	f7fc fb7d 	bl	1d6fc <ble_att_svr_register>
    if (rc != 0) {
   21002:	4680      	mov	r8, r0
   21004:	bb80      	cbnz	r0, 21068 <ble_gatts_register_svc+0xa8>
    if (register_cb != NULL) {
   21006:	b14e      	cbz	r6, 2101c <ble_gatts_register_svc+0x5c>
        register_ctxt.op = BLE_GATT_REGISTER_OP_SVC;
   21008:	2301      	movs	r3, #1
   2100a:	f88d 300c 	strb.w	r3, [sp, #12]
        register_ctxt.svc.handle = *out_handle;
   2100e:	882b      	ldrh	r3, [r5, #0]
   21010:	f8ad 3010 	strh.w	r3, [sp, #16]
        register_ctxt.svc.svc_def = svc;
   21014:	9405      	str	r4, [sp, #20]
        register_cb(&register_ctxt, cb_arg);
   21016:	4639      	mov	r1, r7
   21018:	a803      	add	r0, sp, #12
   2101a:	47b0      	blx	r6
    if (svc->includes != NULL) {
   2101c:	68a3      	ldr	r3, [r4, #8]
   2101e:	b17b      	cbz	r3, 21040 <ble_gatts_register_svc+0x80>
        for (i = 0; svc->includes[i] != NULL; i++) {
   21020:	4645      	mov	r5, r8
   21022:	68a3      	ldr	r3, [r4, #8]
   21024:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   21028:	b150      	cbz	r0, 21040 <ble_gatts_register_svc+0x80>
            idx = ble_gatts_find_svc_entry_idx(svc->includes[i]);
   2102a:	f7ff fcdf 	bl	209ec <ble_gatts_find_svc_entry_idx>
            rc = ble_gatts_register_inc(ble_gatts_svc_entries + idx);
   2102e:	4b15      	ldr	r3, [pc, #84]	; (21084 <ble_gatts_register_svc+0xc4>)
   21030:	681b      	ldr	r3, [r3, #0]
   21032:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   21036:	f7ff fedf 	bl	20df8 <ble_gatts_register_inc>
            if (rc != 0) {
   2103a:	b9e0      	cbnz	r0, 21076 <ble_gatts_register_svc+0xb6>
        for (i = 0; svc->includes[i] != NULL; i++) {
   2103c:	3501      	adds	r5, #1
   2103e:	e7f0      	b.n	21022 <ble_gatts_register_svc+0x62>
    if (svc->characteristics != NULL) {
   21040:	68e5      	ldr	r5, [r4, #12]
   21042:	b155      	cbz	r5, 2105a <ble_gatts_register_svc+0x9a>
        for (chr = svc->characteristics; chr->uuid != NULL; chr++) {
   21044:	682b      	ldr	r3, [r5, #0]
   21046:	b143      	cbz	r3, 2105a <ble_gatts_register_svc+0x9a>
            rc = ble_gatts_register_chr(svc, chr, register_cb, cb_arg);
   21048:	463b      	mov	r3, r7
   2104a:	4632      	mov	r2, r6
   2104c:	4629      	mov	r1, r5
   2104e:	4620      	mov	r0, r4
   21050:	f7ff ff32 	bl	20eb8 <ble_gatts_register_chr>
            if (rc != 0) {
   21054:	b988      	cbnz	r0, 2107a <ble_gatts_register_svc+0xba>
        for (chr = svc->characteristics; chr->uuid != NULL; chr++) {
   21056:	3518      	adds	r5, #24
   21058:	e7f4      	b.n	21044 <ble_gatts_register_svc+0x84>
    STATS_INC(ble_gatts_stats, svcs);
   2105a:	4a0b      	ldr	r2, [pc, #44]	; (21088 <ble_gatts_register_svc+0xc8>)
   2105c:	68d3      	ldr	r3, [r2, #12]
   2105e:	3301      	adds	r3, #1
   21060:	60d3      	str	r3, [r2, #12]
    return 0;
   21062:	e001      	b.n	21068 <ble_gatts_register_svc+0xa8>
        return BLE_HS_EAGAIN;
   21064:	f04f 0801 	mov.w	r8, #1
}
   21068:	4640      	mov	r0, r8
   2106a:	b008      	add	sp, #32
   2106c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_EINVAL;
   21070:	f04f 0803 	mov.w	r8, #3
   21074:	e7f8      	b.n	21068 <ble_gatts_register_svc+0xa8>
                return rc;
   21076:	4680      	mov	r8, r0
   21078:	e7f6      	b.n	21068 <ble_gatts_register_svc+0xa8>
                return rc;
   2107a:	4680      	mov	r8, r0
   2107c:	e7f4      	b.n	21068 <ble_gatts_register_svc+0xa8>
   2107e:	bf00      	nop
   21080:	00021101 	.word	0x00021101
   21084:	10003bb0 	.word	0x10003bb0
   21088:	10003b78 	.word	0x10003b78

0002108c <ble_gatts_register_round>:
{
   2108c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21090:	b083      	sub	sp, #12
   21092:	4607      	mov	r7, r0
   21094:	4689      	mov	r9, r1
   21096:	4690      	mov	r8, r2
    *out_num_registered = 0;
   21098:	2400      	movs	r4, #0
   2109a:	6004      	str	r4, [r0, #0]
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   2109c:	e009      	b.n	210b2 <ble_gatts_register_round+0x26>
                entry->handle = handle;
   2109e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   210a2:	80b3      	strh	r3, [r6, #4]
                entry->end_group_handle = ble_att_svr_prev_handle();
   210a4:	f7fc fb52 	bl	1d74c <ble_att_svr_prev_handle>
   210a8:	80f0      	strh	r0, [r6, #6]
                (*out_num_registered)++;
   210aa:	683b      	ldr	r3, [r7, #0]
   210ac:	3301      	adds	r3, #1
   210ae:	603b      	str	r3, [r7, #0]
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   210b0:	3401      	adds	r4, #1
   210b2:	4b11      	ldr	r3, [pc, #68]	; (210f8 <ble_gatts_register_round+0x6c>)
   210b4:	881b      	ldrh	r3, [r3, #0]
   210b6:	42a3      	cmp	r3, r4
   210b8:	dd17      	ble.n	210ea <ble_gatts_register_round+0x5e>
        entry = ble_gatts_svc_entries + i;
   210ba:	4b10      	ldr	r3, [pc, #64]	; (210fc <ble_gatts_register_round+0x70>)
   210bc:	681d      	ldr	r5, [r3, #0]
   210be:	eb05 06c4 	add.w	r6, r5, r4, lsl #3
        if (entry->handle == 0) {
   210c2:	88b3      	ldrh	r3, [r6, #4]
   210c4:	2b00      	cmp	r3, #0
   210c6:	d1f3      	bne.n	210b0 <ble_gatts_register_round+0x24>
            rc = ble_gatts_register_svc(entry->svc, &handle, cb, cb_arg);
   210c8:	4643      	mov	r3, r8
   210ca:	464a      	mov	r2, r9
   210cc:	f10d 0106 	add.w	r1, sp, #6
   210d0:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   210d4:	f7ff ff74 	bl	20fc0 <ble_gatts_register_svc>
            switch (rc) {
   210d8:	4603      	mov	r3, r0
   210da:	2800      	cmp	r0, #0
   210dc:	d0df      	beq.n	2109e <ble_gatts_register_round+0x12>
   210de:	2801      	cmp	r0, #1
   210e0:	d0e6      	beq.n	210b0 <ble_gatts_register_round+0x24>
}
   210e2:	4618      	mov	r0, r3
   210e4:	b003      	add	sp, #12
   210e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (*out_num_registered == 0) {
   210ea:	683b      	ldr	r3, [r7, #0]
   210ec:	b10b      	cbz	r3, 210f2 <ble_gatts_register_round+0x66>
    return 0;
   210ee:	2300      	movs	r3, #0
   210f0:	e7f7      	b.n	210e2 <ble_gatts_register_round+0x56>
        return BLE_HS_EINVAL;
   210f2:	2303      	movs	r3, #3
   210f4:	e7f5      	b.n	210e2 <ble_gatts_register_round+0x56>
   210f6:	bf00      	nop
   210f8:	10003b74 	.word	0x10003b74
   210fc:	10003bb0 	.word	0x10003bb0

00021100 <ble_gatts_svc_access>:
{
   21100:	b538      	push	{r3, r4, r5, lr}
   21102:	9c05      	ldr	r4, [sp, #20]
    STATS_INC(ble_gatts_stats, svc_def_reads);
   21104:	4a0a      	ldr	r2, [pc, #40]	; (21130 <ble_gatts_svc_access+0x30>)
   21106:	6993      	ldr	r3, [r2, #24]
   21108:	3301      	adds	r3, #1
   2110a:	6193      	str	r3, [r2, #24]
    buf = os_mbuf_extend(*om, ble_uuid_length(svc->uuid));
   2110c:	9b04      	ldr	r3, [sp, #16]
   2110e:	681d      	ldr	r5, [r3, #0]
   21110:	6860      	ldr	r0, [r4, #4]
   21112:	f005 fc7f 	bl	26a14 <ble_uuid_length>
   21116:	b281      	uxth	r1, r0
   21118:	4628      	mov	r0, r5
   2111a:	f7f4 fcd8 	bl	15ace <os_mbuf_extend>
    if (buf == NULL) {
   2111e:	b128      	cbz	r0, 2112c <ble_gatts_svc_access+0x2c>
   21120:	4601      	mov	r1, r0
    ble_uuid_flat(svc->uuid, buf);
   21122:	6860      	ldr	r0, [r4, #4]
   21124:	f005 fc4a 	bl	269bc <ble_uuid_flat>
    return 0;
   21128:	2000      	movs	r0, #0
}
   2112a:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   2112c:	2011      	movs	r0, #17
   2112e:	e7fc      	b.n	2112a <ble_gatts_svc_access+0x2a>
   21130:	10003b78 	.word	0x10003b78

00021134 <ble_gatts_chr_def_access>:
{
   21134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21136:	460c      	mov	r4, r1
   21138:	9f06      	ldr	r7, [sp, #24]
   2113a:	9e07      	ldr	r6, [sp, #28]
    STATS_INC(ble_gatts_stats, chr_def_reads);
   2113c:	4a13      	ldr	r2, [pc, #76]	; (2118c <ble_gatts_chr_def_access+0x58>)
   2113e:	6a13      	ldr	r3, [r2, #32]
   21140:	3301      	adds	r3, #1
   21142:	6213      	str	r3, [r2, #32]
    buf = os_mbuf_extend(*om, 3);
   21144:	2103      	movs	r1, #3
   21146:	6838      	ldr	r0, [r7, #0]
   21148:	f7f4 fcc1 	bl	15ace <os_mbuf_extend>
    if (buf == NULL) {
   2114c:	b1d0      	cbz	r0, 21184 <ble_gatts_chr_def_access+0x50>
   2114e:	4605      	mov	r5, r0
    buf[0] = ble_gatts_chr_properties(chr);
   21150:	4630      	mov	r0, r6
   21152:	f7ff fbff 	bl	20954 <ble_gatts_chr_properties>
   21156:	4603      	mov	r3, r0
   21158:	4628      	mov	r0, r5
   2115a:	f800 3b01 	strb.w	r3, [r0], #1
    put_le16(buf + 1, attr_handle + 1);
   2115e:	1c61      	adds	r1, r4, #1
   21160:	b289      	uxth	r1, r1
   21162:	f00c f999 	bl	2d498 <put_le16>
    buf = os_mbuf_extend(*om, ble_uuid_length(chr->uuid));
   21166:	683c      	ldr	r4, [r7, #0]
   21168:	6830      	ldr	r0, [r6, #0]
   2116a:	f005 fc53 	bl	26a14 <ble_uuid_length>
   2116e:	b281      	uxth	r1, r0
   21170:	4620      	mov	r0, r4
   21172:	f7f4 fcac 	bl	15ace <os_mbuf_extend>
    if (buf == NULL) {
   21176:	4601      	mov	r1, r0
   21178:	b130      	cbz	r0, 21188 <ble_gatts_chr_def_access+0x54>
    ble_uuid_flat(chr->uuid, buf);
   2117a:	6830      	ldr	r0, [r6, #0]
   2117c:	f005 fc1e 	bl	269bc <ble_uuid_flat>
    return 0;
   21180:	2000      	movs	r0, #0
}
   21182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   21184:	2011      	movs	r0, #17
   21186:	e7fc      	b.n	21182 <ble_gatts_chr_def_access+0x4e>
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   21188:	2011      	movs	r0, #17
   2118a:	e7fa      	b.n	21182 <ble_gatts_chr_def_access+0x4e>
   2118c:	10003b78 	.word	0x10003b78

00021190 <ble_gatts_inc_access>:
{
   21190:	b570      	push	{r4, r5, r6, lr}
   21192:	9e04      	ldr	r6, [sp, #16]
   21194:	9c05      	ldr	r4, [sp, #20]
    STATS_INC(ble_gatts_stats, svc_inc_reads);
   21196:	4a13      	ldr	r2, [pc, #76]	; (211e4 <ble_gatts_inc_access+0x54>)
   21198:	69d3      	ldr	r3, [r2, #28]
   2119a:	3301      	adds	r3, #1
   2119c:	61d3      	str	r3, [r2, #28]
    buf = os_mbuf_extend(*om, 4);
   2119e:	2104      	movs	r1, #4
   211a0:	6830      	ldr	r0, [r6, #0]
   211a2:	f7f4 fc94 	bl	15ace <os_mbuf_extend>
    if (buf == NULL) {
   211a6:	b1c8      	cbz	r0, 211dc <ble_gatts_inc_access+0x4c>
   211a8:	4605      	mov	r5, r0
    put_le16(buf + 0, entry->handle);
   211aa:	88a1      	ldrh	r1, [r4, #4]
   211ac:	f00c f974 	bl	2d498 <put_le16>
    put_le16(buf + 2, entry->end_group_handle);
   211b0:	88e1      	ldrh	r1, [r4, #6]
   211b2:	1ca8      	adds	r0, r5, #2
   211b4:	f00c f970 	bl	2d498 <put_le16>
    uuid16 = ble_uuid_u16(entry->svc->uuid);
   211b8:	6823      	ldr	r3, [r4, #0]
   211ba:	6858      	ldr	r0, [r3, #4]
   211bc:	f005 fbc4 	bl	26948 <ble_uuid_u16>
    if (uuid16 != 0) {
   211c0:	4604      	mov	r4, r0
   211c2:	b908      	cbnz	r0, 211c8 <ble_gatts_inc_access+0x38>
    return 0;
   211c4:	2000      	movs	r0, #0
}
   211c6:	bd70      	pop	{r4, r5, r6, pc}
        buf = os_mbuf_extend(*om, 2);
   211c8:	2102      	movs	r1, #2
   211ca:	6830      	ldr	r0, [r6, #0]
   211cc:	f7f4 fc7f 	bl	15ace <os_mbuf_extend>
        if (buf == NULL) {
   211d0:	b130      	cbz	r0, 211e0 <ble_gatts_inc_access+0x50>
        put_le16(buf, uuid16);
   211d2:	4621      	mov	r1, r4
   211d4:	f00c f960 	bl	2d498 <put_le16>
    return 0;
   211d8:	2000      	movs	r0, #0
   211da:	e7f4      	b.n	211c6 <ble_gatts_inc_access+0x36>
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   211dc:	2011      	movs	r0, #17
   211de:	e7f2      	b.n	211c6 <ble_gatts_inc_access+0x36>
            return BLE_ATT_ERR_INSUFFICIENT_RES;
   211e0:	2011      	movs	r0, #17
   211e2:	e7f0      	b.n	211c6 <ble_gatts_inc_access+0x36>
   211e4:	10003b78 	.word	0x10003b78

000211e8 <ble_gatts_val_access>:
{
   211e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   211ec:	4607      	mov	r7, r0
   211ee:	460d      	mov	r5, r1
   211f0:	4616      	mov	r6, r2
   211f2:	461c      	mov	r4, r3
   211f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
    switch (gatt_ctxt->op) {
   211f8:	781b      	ldrb	r3, [r3, #0]
   211fa:	2b03      	cmp	r3, #3
   211fc:	d841      	bhi.n	21282 <ble_gatts_val_access+0x9a>
   211fe:	e8df f003 	tbb	[pc, r3]
   21202:	3202      	.short	0x3202
   21204:	3202      	.short	0x3202
        if (offset == 0) {
   21206:	b9fe      	cbnz	r6, 21248 <ble_gatts_val_access+0x60>
            gatt_ctxt->om = *om;
   21208:	f8d8 3000 	ldr.w	r3, [r8]
   2120c:	6063      	str	r3, [r4, #4]
            new_om = 0;
   2120e:	f04f 0900 	mov.w	r9, #0
        initial_len = OS_MBUF_PKTLEN(gatt_ctxt->om);
   21212:	6863      	ldr	r3, [r4, #4]
   21214:	f8b3 a010 	ldrh.w	sl, [r3, #16]
        rc = access_cb(conn_handle, attr_handle, gatt_ctxt, cb_arg);
   21218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2121a:	4622      	mov	r2, r4
   2121c:	4629      	mov	r1, r5
   2121e:	4638      	mov	r0, r7
   21220:	9d09      	ldr	r5, [sp, #36]	; 0x24
   21222:	47a8      	blx	r5
        if (rc == 0) {
   21224:	4605      	mov	r5, r0
   21226:	b9b8      	cbnz	r0, 21258 <ble_gatts_val_access+0x70>
            attr_len = OS_MBUF_PKTLEN(gatt_ctxt->om) - initial_len - offset;
   21228:	6861      	ldr	r1, [r4, #4]
   2122a:	8a0b      	ldrh	r3, [r1, #16]
   2122c:	eba3 030a 	sub.w	r3, r3, sl
            if (attr_len >= 0) {
   21230:	1b9b      	subs	r3, r3, r6
   21232:	d410      	bmi.n	21256 <ble_gatts_val_access+0x6e>
                if (new_om) {
   21234:	f1b9 0f00 	cmp.w	r9, #0
   21238:	d00e      	beq.n	21258 <ble_gatts_val_access+0x70>
                    os_mbuf_appendfrom(*om, gatt_ctxt->om, offset, attr_len);
   2123a:	b29b      	uxth	r3, r3
   2123c:	4632      	mov	r2, r6
   2123e:	f8d8 0000 	ldr.w	r0, [r8]
   21242:	f7f4 fa95 	bl	15770 <os_mbuf_appendfrom>
   21246:	e007      	b.n	21258 <ble_gatts_val_access+0x70>
            gatt_ctxt->om = ble_hs_mbuf_att_pkt();
   21248:	f002 fb45 	bl	238d6 <ble_hs_mbuf_att_pkt>
   2124c:	6060      	str	r0, [r4, #4]
            if (gatt_ctxt->om == NULL) {
   2124e:	b1d0      	cbz	r0, 21286 <ble_gatts_val_access+0x9e>
            new_om = 1;
   21250:	f04f 0901 	mov.w	r9, #1
   21254:	e7dd      	b.n	21212 <ble_gatts_val_access+0x2a>
                rc = BLE_ATT_ERR_INVALID_OFFSET;
   21256:	2507      	movs	r5, #7
        if (new_om) {
   21258:	f1b9 0f00 	cmp.w	r9, #0
   2125c:	d00e      	beq.n	2127c <ble_gatts_val_access+0x94>
            os_mbuf_free_chain(gatt_ctxt->om);
   2125e:	6860      	ldr	r0, [r4, #4]
   21260:	f7f4 fa08 	bl	15674 <os_mbuf_free_chain>
   21264:	e00a      	b.n	2127c <ble_gatts_val_access+0x94>
        gatt_ctxt->om = *om;
   21266:	f8d8 3000 	ldr.w	r3, [r8]
   2126a:	6063      	str	r3, [r4, #4]
        rc = access_cb(conn_handle, attr_handle, gatt_ctxt, cb_arg);
   2126c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2126e:	4622      	mov	r2, r4
   21270:	9d09      	ldr	r5, [sp, #36]	; 0x24
   21272:	47a8      	blx	r5
   21274:	4605      	mov	r5, r0
        *om = gatt_ctxt->om;
   21276:	6863      	ldr	r3, [r4, #4]
   21278:	f8c8 3000 	str.w	r3, [r8]
}
   2127c:	4628      	mov	r0, r5
   2127e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (gatt_ctxt->op) {
   21282:	250e      	movs	r5, #14
   21284:	e7fa      	b.n	2127c <ble_gatts_val_access+0x94>
                return BLE_ATT_ERR_INSUFFICIENT_RES;
   21286:	2511      	movs	r5, #17
   21288:	e7f8      	b.n	2127c <ble_gatts_val_access+0x94>

0002128a <ble_gatts_chr_val_access>:
{
   2128a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2128c:	b089      	sub	sp, #36	; 0x24
   2128e:	4604      	mov	r4, r0
   21290:	460d      	mov	r5, r1
   21292:	461e      	mov	r6, r3
   21294:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    gatt_ctxt.op = ble_gatts_chr_op(att_op);
   21296:	4610      	mov	r0, r2
   21298:	f7ff fb91 	bl	209be <ble_gatts_chr_op>
   2129c:	f88d 0014 	strb.w	r0, [sp, #20]
    gatt_ctxt.chr = chr_def;
   212a0:	9707      	str	r7, [sp, #28]
    ble_gatts_chr_inc_val_stat(gatt_ctxt.op);
   212a2:	f7ff fb93 	bl	209cc <ble_gatts_chr_inc_val_stat>
    rc = ble_gatts_val_access(conn_handle, attr_handle, offset, &gatt_ctxt, om,
   212a6:	68bb      	ldr	r3, [r7, #8]
   212a8:	9302      	str	r3, [sp, #8]
   212aa:	687b      	ldr	r3, [r7, #4]
   212ac:	9301      	str	r3, [sp, #4]
   212ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   212b0:	9300      	str	r3, [sp, #0]
   212b2:	ab05      	add	r3, sp, #20
   212b4:	4632      	mov	r2, r6
   212b6:	4629      	mov	r1, r5
   212b8:	4620      	mov	r0, r4
   212ba:	f7ff ff95 	bl	211e8 <ble_gatts_val_access>
}
   212be:	b009      	add	sp, #36	; 0x24
   212c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000212c2 <ble_gatts_dsc_access>:
{
   212c2:	b5f0      	push	{r4, r5, r6, r7, lr}
   212c4:	b089      	sub	sp, #36	; 0x24
   212c6:	4604      	mov	r4, r0
   212c8:	460d      	mov	r5, r1
   212ca:	461e      	mov	r6, r3
   212cc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    gatt_ctxt.op = ble_gatts_dsc_op(att_op);
   212ce:	4610      	mov	r0, r2
   212d0:	f7ff fbc2 	bl	20a58 <ble_gatts_dsc_op>
   212d4:	f88d 0014 	strb.w	r0, [sp, #20]
    gatt_ctxt.dsc = dsc_def;
   212d8:	9707      	str	r7, [sp, #28]
    ble_gatts_dsc_inc_stat(gatt_ctxt.op);
   212da:	f7ff fbc3 	bl	20a64 <ble_gatts_dsc_inc_stat>
    rc = ble_gatts_val_access(conn_handle, attr_handle, offset, &gatt_ctxt, om,
   212de:	68fb      	ldr	r3, [r7, #12]
   212e0:	9302      	str	r3, [sp, #8]
   212e2:	68bb      	ldr	r3, [r7, #8]
   212e4:	9301      	str	r3, [sp, #4]
   212e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   212e8:	9300      	str	r3, [sp, #0]
   212ea:	ab05      	add	r3, sp, #20
   212ec:	4632      	mov	r2, r6
   212ee:	4629      	mov	r1, r5
   212f0:	4620      	mov	r0, r4
   212f2:	f7ff ff79 	bl	211e8 <ble_gatts_val_access>
}
   212f6:	b009      	add	sp, #36	; 0x24
   212f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000212fa <ble_gatts_mutable>:
{
   212fa:	b508      	push	{r3, lr}
    if (ble_gap_adv_active() ||
   212fc:	f7fd fdb4 	bl	1ee68 <ble_gap_adv_active>
   21300:	b108      	cbz	r0, 21306 <ble_gatts_mutable+0xc>
        return false;
   21302:	2000      	movs	r0, #0
}
   21304:	bd08      	pop	{r3, pc}
        ble_gap_disc_active() ||
   21306:	f7fd feb7 	bl	1f078 <ble_gap_disc_active>
    if (ble_gap_adv_active() ||
   2130a:	2800      	cmp	r0, #0
   2130c:	d1f9      	bne.n	21302 <ble_gatts_mutable+0x8>
        ble_gap_conn_active()) {
   2130e:	f7fd feb5 	bl	1f07c <ble_gap_conn_active>
        ble_gap_disc_active() ||
   21312:	2800      	cmp	r0, #0
   21314:	d1f5      	bne.n	21302 <ble_gatts_mutable+0x8>
    if (ble_hs_conn_first() != NULL) {
   21316:	f001 fa83 	bl	22820 <ble_hs_conn_first>
   2131a:	b108      	cbz	r0, 21320 <ble_gatts_mutable+0x26>
        return false;
   2131c:	2000      	movs	r0, #0
   2131e:	e7f1      	b.n	21304 <ble_gatts_mutable+0xa>
    return true;
   21320:	2001      	movs	r0, #1
   21322:	e7ef      	b.n	21304 <ble_gatts_mutable+0xa>

00021324 <ble_gatts_free_mem>:
{
   21324:	b538      	push	{r3, r4, r5, lr}
    free(ble_gatts_clt_cfg_mem);
   21326:	4c06      	ldr	r4, [pc, #24]	; (21340 <ble_gatts_free_mem+0x1c>)
   21328:	6820      	ldr	r0, [r4, #0]
   2132a:	f00c fa65 	bl	2d7f8 <free>
    ble_gatts_clt_cfg_mem = NULL;
   2132e:	2500      	movs	r5, #0
   21330:	6025      	str	r5, [r4, #0]
    free(ble_gatts_svc_entries);
   21332:	4c04      	ldr	r4, [pc, #16]	; (21344 <ble_gatts_free_mem+0x20>)
   21334:	6820      	ldr	r0, [r4, #0]
   21336:	f00c fa5f 	bl	2d7f8 <free>
    ble_gatts_svc_entries = NULL;
   2133a:	6025      	str	r5, [r4, #0]
}
   2133c:	bd38      	pop	{r3, r4, r5, pc}
   2133e:	bf00      	nop
   21340:	10003b48 	.word	0x10003b48
   21344:	10003bb0 	.word	0x10003bb0

00021348 <ble_gatts_free_svc_defs>:
{
   21348:	b510      	push	{r4, lr}
    free(ble_gatts_svc_defs);
   2134a:	4c04      	ldr	r4, [pc, #16]	; (2135c <ble_gatts_free_svc_defs+0x14>)
   2134c:	6820      	ldr	r0, [r4, #0]
   2134e:	f00c fa53 	bl	2d7f8 <free>
    ble_gatts_svc_defs = NULL;
   21352:	2300      	movs	r3, #0
   21354:	6023      	str	r3, [r4, #0]
    ble_gatts_num_svc_defs = 0;
   21356:	4a02      	ldr	r2, [pc, #8]	; (21360 <ble_gatts_free_svc_defs+0x18>)
   21358:	6013      	str	r3, [r2, #0]
}
   2135a:	bd10      	pop	{r4, pc}
   2135c:	10003bac 	.word	0x10003bac
   21360:	10003b70 	.word	0x10003b70

00021364 <ble_gatts_tx_notifications_one_chr>:
{
   21364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21368:	4680      	mov	r8, r0
    clt_cfg_idx = ble_gatts_clt_cfg_find_idx(ble_gatts_clt_cfgs,
   2136a:	4601      	mov	r1, r0
   2136c:	4b17      	ldr	r3, [pc, #92]	; (213cc <ble_gatts_tx_notifications_one_chr+0x68>)
   2136e:	6818      	ldr	r0, [r3, #0]
   21370:	f7ff fb94 	bl	20a9c <ble_gatts_clt_cfg_find_idx>
    if (clt_cfg_idx == -1) {
   21374:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   21378:	d026      	beq.n	213c8 <ble_gatts_tx_notifications_one_chr+0x64>
   2137a:	4681      	mov	r9, r0
    for (i = 0; ; i++) {
   2137c:	2600      	movs	r6, #0
   2137e:	e008      	b.n	21392 <ble_gatts_tx_notifications_one_chr+0x2e>
            att_op = 0;
   21380:	2400      	movs	r4, #0
            conn_handle = BLE_HS_CONN_HANDLE_NONE;
   21382:	f64f 77ff 	movw	r7, #65535	; 0xffff
   21386:	e013      	b.n	213b0 <ble_gatts_tx_notifications_one_chr+0x4c>
            ble_gattc_notify(conn_handle, chr_val_handle);
   21388:	4641      	mov	r1, r8
   2138a:	4638      	mov	r0, r7
   2138c:	f7ff f9d8 	bl	20740 <ble_gattc_notify>
    for (i = 0; ; i++) {
   21390:	3601      	adds	r6, #1
        ble_hs_lock();
   21392:	f000 fbb7 	bl	21b04 <ble_hs_lock>
        conn = ble_hs_conn_find_by_idx(i);
   21396:	4630      	mov	r0, r6
   21398:	f001 fa2c 	bl	227f4 <ble_hs_conn_find_by_idx>
        if (conn != NULL) {
   2139c:	4605      	mov	r5, r0
   2139e:	2800      	cmp	r0, #0
   213a0:	d0ee      	beq.n	21380 <ble_gatts_tx_notifications_one_chr+0x1c>
            clt_cfg = conn->bhc_gatt_svr.clt_cfgs + clt_cfg_idx;
   213a2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
            att_op = ble_gatts_schedule_update(conn, clt_cfg);
   213a4:	eb01 0189 	add.w	r1, r1, r9, lsl #2
   213a8:	f7ff fbbc 	bl	20b24 <ble_gatts_schedule_update>
   213ac:	4604      	mov	r4, r0
            conn_handle = conn->bhc_handle;
   213ae:	88af      	ldrh	r7, [r5, #4]
        ble_hs_unlock();
   213b0:	f000 fbac 	bl	21b0c <ble_hs_unlock>
        if (conn == NULL) {
   213b4:	b145      	cbz	r5, 213c8 <ble_gatts_tx_notifications_one_chr+0x64>
        switch (att_op) {
   213b6:	2c1b      	cmp	r4, #27
   213b8:	d0e6      	beq.n	21388 <ble_gatts_tx_notifications_one_chr+0x24>
   213ba:	2c1d      	cmp	r4, #29
   213bc:	d1e8      	bne.n	21390 <ble_gatts_tx_notifications_one_chr+0x2c>
            ble_gattc_indicate(conn_handle, chr_val_handle);
   213be:	4641      	mov	r1, r8
   213c0:	4638      	mov	r0, r7
   213c2:	f7ff fa25 	bl	20810 <ble_gattc_indicate>
            break;
   213c6:	e7e3      	b.n	21390 <ble_gatts_tx_notifications_one_chr+0x2c>
}
   213c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   213cc:	10003b68 	.word	0x10003b68

000213d0 <ble_gatts_register_svcs>:
{
   213d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   213d2:	b083      	sub	sp, #12
   213d4:	460e      	mov	r6, r1
   213d6:	4617      	mov	r7, r2
    for (i = 0; svcs[i].type != BLE_GATT_SVC_TYPE_END; i++) {
   213d8:	2400      	movs	r4, #0
   213da:	0123      	lsls	r3, r4, #4
   213dc:	eb00 1104 	add.w	r1, r0, r4, lsl #4
   213e0:	5cc3      	ldrb	r3, [r0, r3]
   213e2:	b19b      	cbz	r3, 2140c <ble_gatts_register_svcs+0x3c>
        idx = ble_gatts_num_svc_entries + i;
   213e4:	4b15      	ldr	r3, [pc, #84]	; (2143c <ble_gatts_register_svcs+0x6c>)
   213e6:	881b      	ldrh	r3, [r3, #0]
   213e8:	4423      	add	r3, r4
        if (idx >= ble_hs_max_services) {
   213ea:	4a15      	ldr	r2, [pc, #84]	; (21440 <ble_gatts_register_svcs+0x70>)
   213ec:	8812      	ldrh	r2, [r2, #0]
   213ee:	429a      	cmp	r2, r3
   213f0:	dd1f      	ble.n	21432 <ble_gatts_register_svcs+0x62>
        ble_gatts_svc_entries[idx].svc = svcs + i;
   213f2:	4a14      	ldr	r2, [pc, #80]	; (21444 <ble_gatts_register_svcs+0x74>)
   213f4:	6812      	ldr	r2, [r2, #0]
   213f6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   213fa:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        ble_gatts_svc_entries[idx].handle = 0;
   213fe:	2300      	movs	r3, #0
   21400:	80ab      	strh	r3, [r5, #4]
        ble_gatts_svc_entries[idx].end_group_handle = 0xffff;
   21402:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21406:	80eb      	strh	r3, [r5, #6]
    for (i = 0; svcs[i].type != BLE_GATT_SVC_TYPE_END; i++) {
   21408:	3401      	adds	r4, #1
   2140a:	e7e6      	b.n	213da <ble_gatts_register_svcs+0xa>
    ble_gatts_num_svc_entries += num_svcs;
   2140c:	4a0b      	ldr	r2, [pc, #44]	; (2143c <ble_gatts_register_svcs+0x6c>)
   2140e:	8813      	ldrh	r3, [r2, #0]
   21410:	4423      	add	r3, r4
   21412:	8013      	strh	r3, [r2, #0]
    total_registered = 0;
   21414:	2500      	movs	r5, #0
    while (total_registered < num_svcs) {
   21416:	42a5      	cmp	r5, r4
   21418:	da09      	bge.n	2142e <ble_gatts_register_svcs+0x5e>
        rc = ble_gatts_register_round(&cur_registered, cb, cb_arg);
   2141a:	463a      	mov	r2, r7
   2141c:	4631      	mov	r1, r6
   2141e:	a801      	add	r0, sp, #4
   21420:	f7ff fe34 	bl	2108c <ble_gatts_register_round>
        if (rc != 0) {
   21424:	4603      	mov	r3, r0
   21426:	b928      	cbnz	r0, 21434 <ble_gatts_register_svcs+0x64>
        total_registered += cur_registered;
   21428:	9b01      	ldr	r3, [sp, #4]
   2142a:	441d      	add	r5, r3
   2142c:	e7f3      	b.n	21416 <ble_gatts_register_svcs+0x46>
    return 0;
   2142e:	2300      	movs	r3, #0
   21430:	e000      	b.n	21434 <ble_gatts_register_svcs+0x64>
            return BLE_HS_ENOMEM;
   21432:	2306      	movs	r3, #6
}
   21434:	4618      	mov	r0, r3
   21436:	b003      	add	sp, #12
   21438:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2143a:	bf00      	nop
   2143c:	10003b74 	.word	0x10003b74
   21440:	10003cbc 	.word	0x10003cbc
   21444:	10003bb0 	.word	0x10003bb0

00021448 <ble_gatts_connection_broken>:
{
   21448:	b5f0      	push	{r4, r5, r6, r7, lr}
   2144a:	b083      	sub	sp, #12
   2144c:	4606      	mov	r6, r0
    ble_hs_lock();
   2144e:	f000 fb59 	bl	21b04 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   21452:	4630      	mov	r0, r6
   21454:	f001 f9b2 	bl	227bc <ble_hs_conn_find>
    if (conn != NULL) {
   21458:	4604      	mov	r4, r0
   2145a:	b120      	cbz	r0, 21466 <ble_gatts_connection_broken+0x1e>
        clt_cfgs = conn->bhc_gatt_svr.clt_cfgs;
   2145c:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
        num_clt_cfgs = conn->bhc_gatt_svr.num_clt_cfgs;
   2145e:	6d07      	ldr	r7, [r0, #80]	; 0x50
        conn->bhc_gatt_svr.clt_cfgs = NULL;
   21460:	2300      	movs	r3, #0
   21462:	64c3      	str	r3, [r0, #76]	; 0x4c
        conn->bhc_gatt_svr.num_clt_cfgs = 0;
   21464:	6503      	str	r3, [r0, #80]	; 0x50
    ble_hs_unlock();
   21466:	f000 fb51 	bl	21b0c <ble_hs_unlock>
    if (conn == NULL) {
   2146a:	b1bc      	cbz	r4, 2149c <ble_gatts_connection_broken+0x54>
    ble_gatts_indicate_fail_notconn(conn_handle);
   2146c:	4630      	mov	r0, r6
   2146e:	f7ff f96c 	bl	2074a <ble_gatts_indicate_fail_notconn>
    if (clt_cfgs != NULL) {
   21472:	b19d      	cbz	r5, 2149c <ble_gatts_connection_broken+0x54>
        for (i = 0; i < num_clt_cfgs; i++) {
   21474:	2400      	movs	r4, #0
   21476:	e00b      	b.n	21490 <ble_gatts_connection_broken+0x48>
            ble_gatts_subscribe_event(conn_handle, clt_cfgs[i].chr_val_handle,
   21478:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2147c:	789b      	ldrb	r3, [r3, #2]
   2147e:	f835 1024 	ldrh.w	r1, [r5, r4, lsl #2]
   21482:	2200      	movs	r2, #0
   21484:	9200      	str	r2, [sp, #0]
   21486:	2202      	movs	r2, #2
   21488:	4630      	mov	r0, r6
   2148a:	f7ff fc55 	bl	20d38 <ble_gatts_subscribe_event>
        for (i = 0; i < num_clt_cfgs; i++) {
   2148e:	3401      	adds	r4, #1
   21490:	42a7      	cmp	r7, r4
   21492:	dcf1      	bgt.n	21478 <ble_gatts_connection_broken+0x30>
        rc = os_memblock_put(&ble_gatts_clt_cfg_pool, clt_cfgs);
   21494:	4629      	mov	r1, r5
   21496:	4802      	ldr	r0, [pc, #8]	; (214a0 <ble_gatts_connection_broken+0x58>)
   21498:	f7f4 fcf1 	bl	15e7e <os_memblock_put>
}
   2149c:	b003      	add	sp, #12
   2149e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   214a0:	10003b4c 	.word	0x10003b4c

000214a4 <ble_gatts_start>:
{
   214a4:	b570      	push	{r4, r5, r6, lr}
   214a6:	b084      	sub	sp, #16
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   214a8:	4b43      	ldr	r3, [pc, #268]	; (215b8 <ble_gatts_start+0x114>)
   214aa:	681b      	ldr	r3, [r3, #0]
   214ac:	9303      	str	r3, [sp, #12]
    ble_hs_lock();
   214ae:	f000 fb29 	bl	21b04 <ble_hs_lock>
    if (!ble_gatts_mutable()) {
   214b2:	f7ff ff22 	bl	212fa <ble_gatts_mutable>
   214b6:	b948      	cbnz	r0, 214cc <ble_gatts_start+0x28>
        rc = BLE_HS_EBUSY;
   214b8:	240f      	movs	r4, #15
        ble_gatts_free_mem();
   214ba:	f7ff ff33 	bl	21324 <ble_gatts_free_mem>
        ble_gatts_free_svc_defs();
   214be:	f7ff ff43 	bl	21348 <ble_gatts_free_svc_defs>
    ble_hs_unlock();
   214c2:	f000 fb23 	bl	21b0c <ble_hs_unlock>
}
   214c6:	4620      	mov	r0, r4
   214c8:	b004      	add	sp, #16
   214ca:	bd70      	pop	{r4, r5, r6, pc}
    ble_gatts_free_mem();
   214cc:	f7ff ff2a 	bl	21324 <ble_gatts_free_mem>
    rc = ble_att_svr_start();
   214d0:	f7fc feb2 	bl	1e238 <ble_att_svr_start>
    if (rc != 0) {
   214d4:	4604      	mov	r4, r0
   214d6:	2800      	cmp	r0, #0
   214d8:	d168      	bne.n	215ac <ble_gatts_start+0x108>
    if (ble_hs_max_client_configs > 0) {
   214da:	4b38      	ldr	r3, [pc, #224]	; (215bc <ble_gatts_start+0x118>)
   214dc:	8818      	ldrh	r0, [r3, #0]
   214de:	b9b0      	cbnz	r0, 2150e <ble_gatts_start+0x6a>
    if (ble_hs_max_services > 0) {
   214e0:	4b37      	ldr	r3, [pc, #220]	; (215c0 <ble_gatts_start+0x11c>)
   214e2:	8818      	ldrh	r0, [r3, #0]
   214e4:	b9e0      	cbnz	r0, 21520 <ble_gatts_start+0x7c>
    ble_gatts_num_svc_entries = 0;
   214e6:	4b37      	ldr	r3, [pc, #220]	; (215c4 <ble_gatts_start+0x120>)
   214e8:	2200      	movs	r2, #0
   214ea:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < ble_gatts_num_svc_defs; i++) {
   214ec:	4b36      	ldr	r3, [pc, #216]	; (215c8 <ble_gatts_start+0x124>)
   214ee:	681b      	ldr	r3, [r3, #0]
   214f0:	42a3      	cmp	r3, r4
   214f2:	dd1e      	ble.n	21532 <ble_gatts_start+0x8e>
        rc = ble_gatts_register_svcs(ble_gatts_svc_defs[i],
   214f4:	4b35      	ldr	r3, [pc, #212]	; (215cc <ble_gatts_start+0x128>)
   214f6:	6818      	ldr	r0, [r3, #0]
   214f8:	4b35      	ldr	r3, [pc, #212]	; (215d0 <ble_gatts_start+0x12c>)
   214fa:	685a      	ldr	r2, [r3, #4]
   214fc:	6819      	ldr	r1, [r3, #0]
   214fe:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   21502:	f7ff ff65 	bl	213d0 <ble_gatts_register_svcs>
        if (rc != 0) {
   21506:	2800      	cmp	r0, #0
   21508:	d14f      	bne.n	215aa <ble_gatts_start+0x106>
    for (i = 0; i < ble_gatts_num_svc_defs; i++) {
   2150a:	3401      	adds	r4, #1
   2150c:	e7ee      	b.n	214ec <ble_gatts_start+0x48>
        ble_gatts_clt_cfg_mem = malloc(
   2150e:	0080      	lsls	r0, r0, #2
   21510:	f00c f93c 	bl	2d78c <malloc>
   21514:	4b2f      	ldr	r3, [pc, #188]	; (215d4 <ble_gatts_start+0x130>)
   21516:	6018      	str	r0, [r3, #0]
        if (ble_gatts_clt_cfg_mem == NULL) {
   21518:	2800      	cmp	r0, #0
   2151a:	d1e1      	bne.n	214e0 <ble_gatts_start+0x3c>
            rc = BLE_HS_ENOMEM;
   2151c:	2406      	movs	r4, #6
   2151e:	e7cc      	b.n	214ba <ble_gatts_start+0x16>
            malloc(ble_hs_max_services * sizeof *ble_gatts_svc_entries);
   21520:	00c0      	lsls	r0, r0, #3
   21522:	f00c f933 	bl	2d78c <malloc>
        ble_gatts_svc_entries =
   21526:	4b2c      	ldr	r3, [pc, #176]	; (215d8 <ble_gatts_start+0x134>)
   21528:	6018      	str	r0, [r3, #0]
        if (ble_gatts_svc_entries == NULL) {
   2152a:	2800      	cmp	r0, #0
   2152c:	d1db      	bne.n	214e6 <ble_gatts_start+0x42>
            rc = BLE_HS_ENOMEM;
   2152e:	2406      	movs	r4, #6
   21530:	e7c3      	b.n	214ba <ble_gatts_start+0x16>
    ble_gatts_free_svc_defs();
   21532:	f7ff ff09 	bl	21348 <ble_gatts_free_svc_defs>
    if (ble_gatts_num_cfgable_chrs == 0) {
   21536:	4b29      	ldr	r3, [pc, #164]	; (215dc <ble_gatts_start+0x138>)
   21538:	681c      	ldr	r4, [r3, #0]
   2153a:	2c00      	cmp	r4, #0
   2153c:	d0c1      	beq.n	214c2 <ble_gatts_start+0x1e>
    num_elems = ble_hs_max_client_configs / ble_gatts_num_cfgable_chrs;
   2153e:	4b1f      	ldr	r3, [pc, #124]	; (215bc <ble_gatts_start+0x118>)
   21540:	881b      	ldrh	r3, [r3, #0]
   21542:	fb93 f4f4 	sdiv	r4, r3, r4
                         ble_gatts_clt_cfg_size(), ble_gatts_clt_cfg_mem,
   21546:	f7ff fae7 	bl	20b18 <ble_gatts_clt_cfg_size>
   2154a:	4602      	mov	r2, r0
    rc = os_mempool_init(&ble_gatts_clt_cfg_pool, num_elems,
   2154c:	4b24      	ldr	r3, [pc, #144]	; (215e0 <ble_gatts_start+0x13c>)
   2154e:	9300      	str	r3, [sp, #0]
   21550:	4b20      	ldr	r3, [pc, #128]	; (215d4 <ble_gatts_start+0x130>)
   21552:	681b      	ldr	r3, [r3, #0]
   21554:	b2a1      	uxth	r1, r4
   21556:	4823      	ldr	r0, [pc, #140]	; (215e4 <ble_gatts_start+0x140>)
   21558:	f7f4 fc32 	bl	15dc0 <os_mempool_init>
   2155c:	4606      	mov	r6, r0
   2155e:	4604      	mov	r4, r0
    if (rc != 0) {
   21560:	b108      	cbz	r0, 21566 <ble_gatts_start+0xc2>
        rc = BLE_HS_EOS;
   21562:	240b      	movs	r4, #11
   21564:	e7a9      	b.n	214ba <ble_gatts_start+0x16>
    ble_gatts_clt_cfgs = os_memblock_get(&ble_gatts_clt_cfg_pool);
   21566:	481f      	ldr	r0, [pc, #124]	; (215e4 <ble_gatts_start+0x140>)
   21568:	f7f4 fc61 	bl	15e2e <os_memblock_get>
   2156c:	4b1e      	ldr	r3, [pc, #120]	; (215e8 <ble_gatts_start+0x144>)
   2156e:	6018      	str	r0, [r3, #0]
    if (ble_gatts_clt_cfgs == NULL) {
   21570:	b1f8      	cbz	r0, 215b2 <ble_gatts_start+0x10e>
    ha = NULL;
   21572:	2500      	movs	r5, #0
    while ((ha = ble_att_svr_find_by_uuid(ha, &uuid.u, 0xffff)) != NULL) {
   21574:	f64f 72ff 	movw	r2, #65535	; 0xffff
   21578:	a903      	add	r1, sp, #12
   2157a:	4628      	mov	r0, r5
   2157c:	f7fc f942 	bl	1d804 <ble_att_svr_find_by_uuid>
   21580:	4605      	mov	r5, r0
   21582:	b198      	cbz	r0, 215ac <ble_gatts_start+0x108>
        allowed_flags = ble_gatts_chr_clt_cfg_allowed(chr);
   21584:	6928      	ldr	r0, [r5, #16]
   21586:	f7ff f9af 	bl	208e8 <ble_gatts_chr_clt_cfg_allowed>
        if (allowed_flags != 0) {
   2158a:	4602      	mov	r2, r0
   2158c:	2800      	cmp	r0, #0
   2158e:	d0f1      	beq.n	21574 <ble_gatts_start+0xd0>
            ble_gatts_clt_cfgs[idx].chr_val_handle = ha->ha_handle_id + 1;
   21590:	896b      	ldrh	r3, [r5, #10]
   21592:	4915      	ldr	r1, [pc, #84]	; (215e8 <ble_gatts_start+0x144>)
   21594:	6808      	ldr	r0, [r1, #0]
   21596:	eb00 0186 	add.w	r1, r0, r6, lsl #2
   2159a:	3301      	adds	r3, #1
   2159c:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
            ble_gatts_clt_cfgs[idx].allowed = allowed_flags;
   215a0:	70ca      	strb	r2, [r1, #3]
            ble_gatts_clt_cfgs[idx].flags = 0;
   215a2:	2300      	movs	r3, #0
   215a4:	708b      	strb	r3, [r1, #2]
            idx++;
   215a6:	3601      	adds	r6, #1
   215a8:	e7e4      	b.n	21574 <ble_gatts_start+0xd0>
        rc = ble_gatts_register_svcs(ble_gatts_svc_defs[i],
   215aa:	4604      	mov	r4, r0
    if (rc != 0) {
   215ac:	2c00      	cmp	r4, #0
   215ae:	d088      	beq.n	214c2 <ble_gatts_start+0x1e>
   215b0:	e783      	b.n	214ba <ble_gatts_start+0x16>
        rc = BLE_HS_ENOMEM;
   215b2:	2406      	movs	r4, #6
   215b4:	e781      	b.n	214ba <ble_gatts_start+0x16>
   215b6:	bf00      	nop
   215b8:	000300a0 	.word	0x000300a0
   215bc:	10003cba 	.word	0x10003cba
   215c0:	10003cbc 	.word	0x10003cbc
   215c4:	10003b74 	.word	0x10003b74
   215c8:	10003b70 	.word	0x10003b70
   215cc:	10003bac 	.word	0x10003bac
   215d0:	100002bc 	.word	0x100002bc
   215d4:	10003b48 	.word	0x10003b48
   215d8:	10003bb0 	.word	0x10003bb0
   215dc:	10003b6c 	.word	0x10003b6c
   215e0:	00031000 	.word	0x00031000
   215e4:	10003b4c 	.word	0x10003b4c
   215e8:	10003b68 	.word	0x10003b68

000215ec <ble_gatts_conn_can_alloc>:
    return ble_gatts_num_cfgable_chrs == 0 ||
   215ec:	4b05      	ldr	r3, [pc, #20]	; (21604 <ble_gatts_conn_can_alloc+0x18>)
   215ee:	681b      	ldr	r3, [r3, #0]
   215f0:	b123      	cbz	r3, 215fc <ble_gatts_conn_can_alloc+0x10>
           ble_gatts_clt_cfg_pool.mp_num_free > 0;
   215f2:	4b05      	ldr	r3, [pc, #20]	; (21608 <ble_gatts_conn_can_alloc+0x1c>)
   215f4:	88db      	ldrh	r3, [r3, #6]
    return ble_gatts_num_cfgable_chrs == 0 ||
   215f6:	b11b      	cbz	r3, 21600 <ble_gatts_conn_can_alloc+0x14>
   215f8:	2001      	movs	r0, #1
   215fa:	4770      	bx	lr
   215fc:	2001      	movs	r0, #1
   215fe:	4770      	bx	lr
   21600:	2000      	movs	r0, #0
}
   21602:	4770      	bx	lr
   21604:	10003b6c 	.word	0x10003b6c
   21608:	10003b4c 	.word	0x10003b4c

0002160c <ble_gatts_conn_init>:
{
   2160c:	b570      	push	{r4, r5, r6, lr}
   2160e:	4604      	mov	r4, r0
    if (ble_gatts_num_cfgable_chrs > 0) {
   21610:	4b0e      	ldr	r3, [pc, #56]	; (2164c <ble_gatts_conn_init+0x40>)
   21612:	681b      	ldr	r3, [r3, #0]
   21614:	2b00      	cmp	r3, #0
   21616:	dc03      	bgt.n	21620 <ble_gatts_conn_init+0x14>
        gatts_conn->clt_cfgs = NULL;
   21618:	2000      	movs	r0, #0
   2161a:	6020      	str	r0, [r4, #0]
        gatts_conn->num_clt_cfgs = 0;
   2161c:	6060      	str	r0, [r4, #4]
}
   2161e:	bd70      	pop	{r4, r5, r6, pc}
        gatts_conn->clt_cfgs = os_memblock_get(&ble_gatts_clt_cfg_pool);
   21620:	480b      	ldr	r0, [pc, #44]	; (21650 <ble_gatts_conn_init+0x44>)
   21622:	f7f4 fc04 	bl	15e2e <os_memblock_get>
   21626:	4605      	mov	r5, r0
   21628:	6020      	str	r0, [r4, #0]
        if (gatts_conn->clt_cfgs == NULL) {
   2162a:	b168      	cbz	r0, 21648 <ble_gatts_conn_init+0x3c>
        memcpy(gatts_conn->clt_cfgs, ble_gatts_clt_cfgs,
   2162c:	4b09      	ldr	r3, [pc, #36]	; (21654 <ble_gatts_conn_init+0x48>)
   2162e:	681e      	ldr	r6, [r3, #0]
               ble_gatts_clt_cfg_size());
   21630:	f7ff fa72 	bl	20b18 <ble_gatts_clt_cfg_size>
   21634:	4602      	mov	r2, r0
        memcpy(gatts_conn->clt_cfgs, ble_gatts_clt_cfgs,
   21636:	4631      	mov	r1, r6
   21638:	4628      	mov	r0, r5
   2163a:	f7f5 fa4b 	bl	16ad4 <memcpy>
        gatts_conn->num_clt_cfgs = ble_gatts_num_cfgable_chrs;
   2163e:	4b03      	ldr	r3, [pc, #12]	; (2164c <ble_gatts_conn_init+0x40>)
   21640:	681b      	ldr	r3, [r3, #0]
   21642:	6063      	str	r3, [r4, #4]
    return 0;
   21644:	2000      	movs	r0, #0
   21646:	e7ea      	b.n	2161e <ble_gatts_conn_init+0x12>
            return BLE_HS_ENOMEM;
   21648:	2006      	movs	r0, #6
   2164a:	e7e8      	b.n	2161e <ble_gatts_conn_init+0x12>
   2164c:	10003b6c 	.word	0x10003b6c
   21650:	10003b4c 	.word	0x10003b4c
   21654:	10003b68 	.word	0x10003b68

00021658 <ble_gatts_send_next_indicate>:
{
   21658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2165a:	4606      	mov	r6, r0
    ble_hs_lock();
   2165c:	f000 fa52 	bl	21b04 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   21660:	4630      	mov	r0, r6
   21662:	f001 f8ab 	bl	227bc <ble_hs_conn_find>
    if (conn != NULL) {
   21666:	4604      	mov	r4, r0
   21668:	b108      	cbz	r0, 2166e <ble_gatts_send_next_indicate+0x16>
        for (i = 0; i < conn->bhc_gatt_svr.num_clt_cfgs; i++) {
   2166a:	2200      	movs	r2, #0
   2166c:	e002      	b.n	21674 <ble_gatts_send_next_indicate+0x1c>
    chr_val_handle = 0;
   2166e:	2700      	movs	r7, #0
   21670:	e011      	b.n	21696 <ble_gatts_send_next_indicate+0x3e>
        for (i = 0; i < conn->bhc_gatt_svr.num_clt_cfgs; i++) {
   21672:	3201      	adds	r2, #1
   21674:	6d23      	ldr	r3, [r4, #80]	; 0x50
   21676:	4293      	cmp	r3, r2
   21678:	dd0c      	ble.n	21694 <ble_gatts_send_next_indicate+0x3c>
            clt_cfg = conn->bhc_gatt_svr.clt_cfgs + i;
   2167a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   2167c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
            if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED) {
   21680:	789d      	ldrb	r5, [r3, #2]
   21682:	f993 1002 	ldrsb.w	r1, [r3, #2]
   21686:	2900      	cmp	r1, #0
   21688:	daf3      	bge.n	21672 <ble_gatts_send_next_indicate+0x1a>
                chr_val_handle = clt_cfg->chr_val_handle;
   2168a:	881f      	ldrh	r7, [r3, #0]
                clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
   2168c:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   21690:	709d      	strb	r5, [r3, #2]
                break;
   21692:	e000      	b.n	21696 <ble_gatts_send_next_indicate+0x3e>
    chr_val_handle = 0;
   21694:	2700      	movs	r7, #0
    ble_hs_unlock();
   21696:	f000 fa39 	bl	21b0c <ble_hs_unlock>
    if (conn == NULL) {
   2169a:	b12c      	cbz	r4, 216a8 <ble_gatts_send_next_indicate+0x50>
    if (chr_val_handle == 0) {
   2169c:	b137      	cbz	r7, 216ac <ble_gatts_send_next_indicate+0x54>
    rc = ble_gattc_indicate(conn_handle, chr_val_handle);
   2169e:	4639      	mov	r1, r7
   216a0:	4630      	mov	r0, r6
   216a2:	f7ff f8b5 	bl	20810 <ble_gattc_indicate>
}
   216a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOTCONN;
   216a8:	2007      	movs	r0, #7
   216aa:	e7fc      	b.n	216a6 <ble_gatts_send_next_indicate+0x4e>
        return BLE_HS_ENOENT;
   216ac:	2005      	movs	r0, #5
   216ae:	e7fa      	b.n	216a6 <ble_gatts_send_next_indicate+0x4e>

000216b0 <ble_gatts_rx_indicate_ack>:
{
   216b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   216b4:	b084      	sub	sp, #16
   216b6:	4606      	mov	r6, r0
   216b8:	460d      	mov	r5, r1
    clt_cfg_idx = ble_gatts_clt_cfg_find_idx(ble_gatts_clt_cfgs,
   216ba:	4b2f      	ldr	r3, [pc, #188]	; (21778 <ble_gatts_rx_indicate_ack+0xc8>)
   216bc:	681c      	ldr	r4, [r3, #0]
   216be:	4620      	mov	r0, r4
   216c0:	f7ff f9ec 	bl	20a9c <ble_gatts_clt_cfg_find_idx>
    if (clt_cfg_idx == -1) {
   216c4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   216c8:	d04e      	beq.n	21768 <ble_gatts_rx_indicate_ack+0xb8>
    clt_cfg = ble_gatts_clt_cfgs + clt_cfg_idx;
   216ca:	ea4f 0880 	mov.w	r8, r0, lsl #2
   216ce:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    if (!(clt_cfg->allowed & BLE_GATTS_CLT_CFG_F_INDICATE)) {
   216d2:	78e3      	ldrb	r3, [r4, #3]
   216d4:	f013 0f02 	tst.w	r3, #2
   216d8:	d048      	beq.n	2176c <ble_gatts_rx_indicate_ack+0xbc>
    ble_hs_lock();
   216da:	f000 fa13 	bl	21b04 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   216de:	4630      	mov	r0, r6
   216e0:	f001 f86c 	bl	227bc <ble_hs_conn_find>
   216e4:	4603      	mov	r3, r0
    if (conn->bhc_gatt_svr.indicate_val_handle == chr_val_handle) {
   216e6:	f8b0 2054 	ldrh.w	r2, [r0, #84]	; 0x54
   216ea:	42aa      	cmp	r2, r5
   216ec:	d006      	beq.n	216fc <ble_gatts_rx_indicate_ack+0x4c>
        rc = BLE_HS_ENOENT;
   216ee:	2405      	movs	r4, #5
    ble_hs_unlock();
   216f0:	f000 fa0c 	bl	21b0c <ble_hs_unlock>
    if (rc != 0) {
   216f4:	bbdc      	cbnz	r4, 2176e <ble_gatts_rx_indicate_ack+0xbe>
    if (persist) {
   216f6:	bb9f      	cbnz	r7, 21760 <ble_gatts_rx_indicate_ack+0xb0>
    return 0;
   216f8:	463c      	mov	r4, r7
   216fa:	e038      	b.n	2176e <ble_gatts_rx_indicate_ack+0xbe>
        conn->bhc_gatt_svr.indicate_val_handle = 0;
   216fc:	2200      	movs	r2, #0
   216fe:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
        clt_cfg = conn->bhc_gatt_svr.clt_cfgs + clt_cfg_idx;
   21702:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   21704:	4490      	add	r8, r2
        persist = conn->bhc_sec_state.bonded &&
   21706:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
   2170a:	f012 0f04 	tst.w	r2, #4
   2170e:	d024      	beq.n	2175a <ble_gatts_rx_indicate_ack+0xaa>
                  !(clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED);
   21710:	f998 2002 	ldrsb.w	r2, [r8, #2]
        persist = conn->bhc_sec_state.bonded &&
   21714:	2a00      	cmp	r2, #0
   21716:	da02      	bge.n	2171e <ble_gatts_rx_indicate_ack+0x6e>
        rc = 0;
   21718:	2400      	movs	r4, #0
        persist = conn->bhc_sec_state.bonded &&
   2171a:	4627      	mov	r7, r4
   2171c:	e7e8      	b.n	216f0 <ble_gatts_rx_indicate_ack+0x40>
            cccd_value.peer_addr = conn->bhc_peer_addr;
   2171e:	4602      	mov	r2, r0
   21720:	f852 0f07 	ldr.w	r0, [r2, #7]!
   21724:	9000      	str	r0, [sp, #0]
   21726:	8891      	ldrh	r1, [r2, #4]
   21728:	7992      	ldrb	r2, [r2, #6]
   2172a:	f8ad 1004 	strh.w	r1, [sp, #4]
   2172e:	f88d 2006 	strb.w	r2, [sp, #6]
                ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   21732:	79d8      	ldrb	r0, [r3, #7]
   21734:	f002 f945 	bl	239c2 <ble_hs_misc_peer_addr_type_to_id>
            cccd_value.peer_addr.type =
   21738:	f88d 0000 	strb.w	r0, [sp]
            cccd_value.chr_val_handle = chr_val_handle;
   2173c:	f8ad 5008 	strh.w	r5, [sp, #8]
            cccd_value.flags = clt_cfg->flags;
   21740:	f898 3002 	ldrb.w	r3, [r8, #2]
   21744:	f8ad 300a 	strh.w	r3, [sp, #10]
            cccd_value.value_changed = 0;
   21748:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2174c:	f36f 0300 	bfc	r3, #0, #1
   21750:	f88d 300c 	strb.w	r3, [sp, #12]
        rc = 0;
   21754:	2400      	movs	r4, #0
        persist = conn->bhc_sec_state.bonded &&
   21756:	2701      	movs	r7, #1
   21758:	e7ca      	b.n	216f0 <ble_gatts_rx_indicate_ack+0x40>
        rc = 0;
   2175a:	2400      	movs	r4, #0
        persist = conn->bhc_sec_state.bonded &&
   2175c:	4627      	mov	r7, r4
   2175e:	e7c7      	b.n	216f0 <ble_gatts_rx_indicate_ack+0x40>
        rc = ble_store_write_cccd(&cccd_value);
   21760:	4668      	mov	r0, sp
   21762:	f004 ff49 	bl	265f8 <ble_store_write_cccd>
        if (rc != 0) {
   21766:	e002      	b.n	2176e <ble_gatts_rx_indicate_ack+0xbe>
        return BLE_HS_ENOENT;
   21768:	2405      	movs	r4, #5
   2176a:	e000      	b.n	2176e <ble_gatts_rx_indicate_ack+0xbe>
        return BLE_HS_ENOENT;
   2176c:	2405      	movs	r4, #5
}
   2176e:	4620      	mov	r0, r4
   21770:	b004      	add	sp, #16
   21772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21776:	bf00      	nop
   21778:	10003b68 	.word	0x10003b68

0002177c <ble_gatts_tx_notifications>:
{
   2177c:	b510      	push	{r4, lr}
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   2177e:	2400      	movs	r4, #0
   21780:	4b06      	ldr	r3, [pc, #24]	; (2179c <ble_gatts_tx_notifications+0x20>)
   21782:	681b      	ldr	r3, [r3, #0]
   21784:	42a3      	cmp	r3, r4
   21786:	dd07      	ble.n	21798 <ble_gatts_tx_notifications+0x1c>
        chr_val_handle = ble_gatts_clt_cfgs[i].chr_val_handle;
   21788:	4b05      	ldr	r3, [pc, #20]	; (217a0 <ble_gatts_tx_notifications+0x24>)
   2178a:	681b      	ldr	r3, [r3, #0]
        ble_gatts_tx_notifications_one_chr(chr_val_handle);
   2178c:	f833 0024 	ldrh.w	r0, [r3, r4, lsl #2]
   21790:	f7ff fde8 	bl	21364 <ble_gatts_tx_notifications_one_chr>
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   21794:	3401      	adds	r4, #1
   21796:	e7f3      	b.n	21780 <ble_gatts_tx_notifications+0x4>
}
   21798:	bd10      	pop	{r4, pc}
   2179a:	bf00      	nop
   2179c:	10003b6c 	.word	0x10003b6c
   217a0:	10003b68 	.word	0x10003b68

000217a4 <ble_gatts_bonding_established>:
{
   217a4:	b570      	push	{r4, r5, r6, lr}
   217a6:	b084      	sub	sp, #16
   217a8:	4606      	mov	r6, r0
    ble_hs_lock();
   217aa:	f000 f9ab 	bl	21b04 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   217ae:	4630      	mov	r0, r6
   217b0:	f001 f804 	bl	227bc <ble_hs_conn_find>
   217b4:	4605      	mov	r5, r0
    cccd_value.peer_addr = conn->bhc_peer_addr;
   217b6:	4603      	mov	r3, r0
   217b8:	f853 0f07 	ldr.w	r0, [r3, #7]!
   217bc:	9000      	str	r0, [sp, #0]
   217be:	889a      	ldrh	r2, [r3, #4]
   217c0:	799b      	ldrb	r3, [r3, #6]
   217c2:	f8ad 2004 	strh.w	r2, [sp, #4]
   217c6:	f88d 3006 	strb.w	r3, [sp, #6]
        ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   217ca:	79e8      	ldrb	r0, [r5, #7]
   217cc:	f002 f8f9 	bl	239c2 <ble_hs_misc_peer_addr_type_to_id>
    cccd_value.peer_addr.type =
   217d0:	f88d 0000 	strb.w	r0, [sp]
    for (i = 0; i < gatt_srv->num_clt_cfgs; ++i) {
   217d4:	2400      	movs	r4, #0
   217d6:	e017      	b.n	21808 <ble_gatts_bonding_established+0x64>
            cccd_value.chr_val_handle = clt_cfg->chr_val_handle;
   217d8:	f832 2024 	ldrh.w	r2, [r2, r4, lsl #2]
   217dc:	f8ad 2008 	strh.w	r2, [sp, #8]
            cccd_value.flags = clt_cfg->flags;
   217e0:	789b      	ldrb	r3, [r3, #2]
   217e2:	f8ad 300a 	strh.w	r3, [sp, #10]
            cccd_value.value_changed = 0;
   217e6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   217ea:	f36f 0300 	bfc	r3, #0, #1
   217ee:	f88d 300c 	strb.w	r3, [sp, #12]
            ble_hs_unlock();
   217f2:	f000 f98b 	bl	21b0c <ble_hs_unlock>
            ble_store_write_cccd(&cccd_value);
   217f6:	4668      	mov	r0, sp
   217f8:	f004 fefe 	bl	265f8 <ble_store_write_cccd>
            ble_hs_lock();
   217fc:	f000 f982 	bl	21b04 <ble_hs_lock>
            conn = ble_hs_conn_find(conn_handle);
   21800:	4630      	mov	r0, r6
   21802:	f000 ffdb 	bl	227bc <ble_hs_conn_find>
    for (i = 0; i < gatt_srv->num_clt_cfgs; ++i) {
   21806:	3401      	adds	r4, #1
   21808:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   2180a:	42a3      	cmp	r3, r4
   2180c:	dd06      	ble.n	2181c <ble_gatts_bonding_established+0x78>
        clt_cfg = &gatt_srv->clt_cfgs[i];
   2180e:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   21810:	eb02 0384 	add.w	r3, r2, r4, lsl #2
        if (clt_cfg->flags != 0) {
   21814:	7899      	ldrb	r1, [r3, #2]
   21816:	2900      	cmp	r1, #0
   21818:	d0f5      	beq.n	21806 <ble_gatts_bonding_established+0x62>
   2181a:	e7dd      	b.n	217d8 <ble_gatts_bonding_established+0x34>
    ble_hs_unlock();
   2181c:	f000 f976 	bl	21b0c <ble_hs_unlock>
}
   21820:	b004      	add	sp, #16
   21822:	bd70      	pop	{r4, r5, r6, pc}

00021824 <ble_gatts_bonding_restored>:
{
   21824:	b570      	push	{r4, r5, r6, lr}
   21826:	b08a      	sub	sp, #40	; 0x28
   21828:	4606      	mov	r6, r0
    ble_hs_lock();
   2182a:	f000 f96b 	bl	21b04 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   2182e:	4630      	mov	r0, r6
   21830:	f000 ffc4 	bl	227bc <ble_hs_conn_find>
   21834:	4603      	mov	r3, r0
    cccd_key.peer_addr = conn->bhc_peer_addr;
   21836:	4602      	mov	r2, r0
   21838:	f852 0f07 	ldr.w	r0, [r2, #7]!
   2183c:	9003      	str	r0, [sp, #12]
   2183e:	8891      	ldrh	r1, [r2, #4]
   21840:	7992      	ldrb	r2, [r2, #6]
   21842:	f8ad 1010 	strh.w	r1, [sp, #16]
   21846:	f88d 2012 	strb.w	r2, [sp, #18]
        ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   2184a:	79d8      	ldrb	r0, [r3, #7]
   2184c:	f002 f8b9 	bl	239c2 <ble_hs_misc_peer_addr_type_to_id>
    cccd_key.peer_addr.type =
   21850:	f88d 000c 	strb.w	r0, [sp, #12]
    cccd_key.chr_val_handle = 0;
   21854:	2300      	movs	r3, #0
   21856:	f8ad 3014 	strh.w	r3, [sp, #20]
    cccd_key.idx = 0;
   2185a:	f88d 3016 	strb.w	r3, [sp, #22]
    ble_hs_unlock();
   2185e:	f000 f955 	bl	21b0c <ble_hs_unlock>
   21862:	e015      	b.n	21890 <ble_gatts_bonding_restored+0x6c>
        att_op = 0;
   21864:	2400      	movs	r4, #0
        ble_hs_unlock();
   21866:	f000 f951 	bl	21b0c <ble_hs_unlock>
        ble_gatts_subscribe_event(conn_handle, cccd_value.chr_val_handle,
   2186a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   2186e:	9300      	str	r3, [sp, #0]
   21870:	2300      	movs	r3, #0
   21872:	2203      	movs	r2, #3
   21874:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   21878:	4630      	mov	r0, r6
   2187a:	f7ff fa5d 	bl	20d38 <ble_gatts_subscribe_event>
        switch (att_op) {
   2187e:	2c1b      	cmp	r4, #27
   21880:	d029      	beq.n	218d6 <ble_gatts_bonding_restored+0xb2>
   21882:	2c1d      	cmp	r4, #29
   21884:	d038      	beq.n	218f8 <ble_gatts_bonding_restored+0xd4>
        cccd_key.idx++;
   21886:	f89d 3016 	ldrb.w	r3, [sp, #22]
   2188a:	3301      	adds	r3, #1
   2188c:	f88d 3016 	strb.w	r3, [sp, #22]
        rc = ble_store_read_cccd(&cccd_key, &cccd_value);
   21890:	a906      	add	r1, sp, #24
   21892:	a803      	add	r0, sp, #12
   21894:	f004 fea9 	bl	265ea <ble_store_read_cccd>
        if (rc != 0) {
   21898:	bba0      	cbnz	r0, 21904 <ble_gatts_bonding_restored+0xe0>
        ble_hs_lock();
   2189a:	f000 f933 	bl	21b04 <ble_hs_lock>
        conn = ble_hs_conn_find(conn_handle);
   2189e:	4630      	mov	r0, r6
   218a0:	f000 ff8c 	bl	227bc <ble_hs_conn_find>
   218a4:	4605      	mov	r5, r0
        clt_cfg = ble_gatts_clt_cfg_find(conn->bhc_gatt_svr.clt_cfgs,
   218a6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   218aa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   218ac:	f7ff f908 	bl	20ac0 <ble_gatts_clt_cfg_find>
        if (clt_cfg != NULL) {
   218b0:	4601      	mov	r1, r0
   218b2:	2800      	cmp	r0, #0
   218b4:	d0d6      	beq.n	21864 <ble_gatts_bonding_restored+0x40>
            clt_cfg->flags = cccd_value.flags;
   218b6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   218ba:	7083      	strb	r3, [r0, #2]
            if (cccd_value.value_changed) {
   218bc:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   218c0:	f014 0401 	ands.w	r4, r4, #1
   218c4:	d0cf      	beq.n	21866 <ble_gatts_bonding_restored+0x42>
                clt_cfg->flags |= BLE_GATTS_CLT_CFG_F_MODIFIED;
   218c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   218ca:	7083      	strb	r3, [r0, #2]
                att_op = ble_gatts_schedule_update(conn, clt_cfg);
   218cc:	4628      	mov	r0, r5
   218ce:	f7ff f929 	bl	20b24 <ble_gatts_schedule_update>
   218d2:	4604      	mov	r4, r0
   218d4:	e7c7      	b.n	21866 <ble_gatts_bonding_restored+0x42>
            rc = ble_gattc_notify(conn_handle, cccd_value.chr_val_handle);
   218d6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   218da:	4630      	mov	r0, r6
   218dc:	f7fe ff30 	bl	20740 <ble_gattc_notify>
            if (rc == 0) {
   218e0:	2800      	cmp	r0, #0
   218e2:	d1d0      	bne.n	21886 <ble_gatts_bonding_restored+0x62>
                cccd_value.value_changed = 0;
   218e4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   218e8:	f36f 0300 	bfc	r3, #0, #1
   218ec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                ble_store_write_cccd(&cccd_value);
   218f0:	a806      	add	r0, sp, #24
   218f2:	f004 fe81 	bl	265f8 <ble_store_write_cccd>
   218f6:	e7c6      	b.n	21886 <ble_gatts_bonding_restored+0x62>
            ble_gattc_indicate(conn_handle, cccd_value.chr_val_handle);
   218f8:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   218fc:	4630      	mov	r0, r6
   218fe:	f7fe ff87 	bl	20810 <ble_gattc_indicate>
            break;
   21902:	e7c0      	b.n	21886 <ble_gatts_bonding_restored+0x62>
}
   21904:	b00a      	add	sp, #40	; 0x28
   21906:	bd70      	pop	{r4, r5, r6, pc}

00021908 <ble_gatts_add_svcs>:
{
   21908:	b570      	push	{r4, r5, r6, lr}
   2190a:	4604      	mov	r4, r0
    ble_hs_lock();
   2190c:	f000 f8fa 	bl	21b04 <ble_hs_lock>
    if (!ble_gatts_mutable()) {
   21910:	f7ff fcf3 	bl	212fa <ble_gatts_mutable>
   21914:	b198      	cbz	r0, 2193e <ble_gatts_add_svcs+0x36>
                (ble_gatts_num_svc_defs + 1) * sizeof *ble_gatts_svc_defs);
   21916:	4b0c      	ldr	r3, [pc, #48]	; (21948 <ble_gatts_add_svcs+0x40>)
   21918:	681e      	ldr	r6, [r3, #0]
   2191a:	1c75      	adds	r5, r6, #1
    p = realloc(ble_gatts_svc_defs,
   2191c:	00a9      	lsls	r1, r5, #2
   2191e:	4b0b      	ldr	r3, [pc, #44]	; (2194c <ble_gatts_add_svcs+0x44>)
   21920:	6818      	ldr	r0, [r3, #0]
   21922:	f00b ff89 	bl	2d838 <realloc>
    if (p == NULL) {
   21926:	b160      	cbz	r0, 21942 <ble_gatts_add_svcs+0x3a>
    ble_gatts_svc_defs = p;
   21928:	4a08      	ldr	r2, [pc, #32]	; (2194c <ble_gatts_add_svcs+0x44>)
   2192a:	6010      	str	r0, [r2, #0]
    ble_gatts_svc_defs[ble_gatts_num_svc_defs] = svcs;
   2192c:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    ble_gatts_num_svc_defs++;
   21930:	4b05      	ldr	r3, [pc, #20]	; (21948 <ble_gatts_add_svcs+0x40>)
   21932:	601d      	str	r5, [r3, #0]
    rc = 0;
   21934:	2400      	movs	r4, #0
    ble_hs_unlock();
   21936:	f000 f8e9 	bl	21b0c <ble_hs_unlock>
}
   2193a:	4620      	mov	r0, r4
   2193c:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_EBUSY;
   2193e:	240f      	movs	r4, #15
   21940:	e7f9      	b.n	21936 <ble_gatts_add_svcs+0x2e>
        rc = BLE_HS_ENOMEM;
   21942:	2406      	movs	r4, #6
   21944:	e7f7      	b.n	21936 <ble_gatts_add_svcs+0x2e>
   21946:	bf00      	nop
   21948:	10003b70 	.word	0x10003b70
   2194c:	10003bac 	.word	0x10003bac

00021950 <ble_gatts_count_cfg>:
int
ble_gatts_count_cfg(const struct ble_gatt_svc_def *defs)
{
   21950:	b500      	push	{lr}
   21952:	b085      	sub	sp, #20
    struct ble_gatt_resources res = { 0 };
   21954:	2300      	movs	r3, #0
   21956:	9301      	str	r3, [sp, #4]
   21958:	9302      	str	r3, [sp, #8]
   2195a:	9303      	str	r3, [sp, #12]
    int rc;

    rc = ble_gatts_count_resources(defs, &res);
   2195c:	a901      	add	r1, sp, #4
   2195e:	f7ff f8fd 	bl	20b5c <ble_gatts_count_resources>
    if (rc != 0) {
   21962:	b990      	cbnz	r0, 2198a <ble_gatts_count_cfg+0x3a>
        return rc;
    }

    ble_hs_max_services += res.svcs;
   21964:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   21968:	4a09      	ldr	r2, [pc, #36]	; (21990 <ble_gatts_count_cfg+0x40>)
   2196a:	8811      	ldrh	r1, [r2, #0]
   2196c:	440b      	add	r3, r1
   2196e:	8013      	strh	r3, [r2, #0]
    ble_hs_max_attrs += res.attrs;
   21970:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   21974:	4a07      	ldr	r2, [pc, #28]	; (21994 <ble_gatts_count_cfg+0x44>)
   21976:	8811      	ldrh	r1, [r2, #0]
   21978:	440b      	add	r3, r1
   2197a:	8013      	strh	r3, [r2, #0]

    /* Reserve an extra CCCD for the cache. */
    ble_hs_max_client_configs +=
        res.cccds * (MYNEWT_VAL(BLE_MAX_CONNECTIONS) + 1);
   2197c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    ble_hs_max_client_configs +=
   21980:	4a05      	ldr	r2, [pc, #20]	; (21998 <ble_gatts_count_cfg+0x48>)
   21982:	8813      	ldrh	r3, [r2, #0]
   21984:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   21988:	8013      	strh	r3, [r2, #0]

    return 0;
}
   2198a:	b005      	add	sp, #20
   2198c:	f85d fb04 	ldr.w	pc, [sp], #4
   21990:	10003cbc 	.word	0x10003cbc
   21994:	10003cb8 	.word	0x10003cb8
   21998:	10003cba 	.word	0x10003cba

0002199c <ble_gatts_init>:
    return rc;
}

int
ble_gatts_init(void)
{
   2199c:	b500      	push	{lr}
   2199e:	b083      	sub	sp, #12
    int rc;

    ble_gatts_num_cfgable_chrs = 0;
   219a0:	2300      	movs	r3, #0
   219a2:	4a09      	ldr	r2, [pc, #36]	; (219c8 <ble_gatts_init+0x2c>)
   219a4:	6013      	str	r3, [r2, #0]
    ble_gatts_clt_cfgs = NULL;
   219a6:	4a09      	ldr	r2, [pc, #36]	; (219cc <ble_gatts_init+0x30>)
   219a8:	6013      	str	r3, [r2, #0]

    rc = stats_init_and_reg(
   219aa:	4a09      	ldr	r2, [pc, #36]	; (219d0 <ble_gatts_init+0x34>)
   219ac:	9201      	str	r2, [sp, #4]
   219ae:	9300      	str	r3, [sp, #0]
   219b0:	220a      	movs	r2, #10
   219b2:	2104      	movs	r1, #4
   219b4:	4807      	ldr	r0, [pc, #28]	; (219d4 <ble_gatts_init+0x38>)
   219b6:	f7f8 fc49 	bl	1a24c <stats_init_and_reg>
        STATS_HDR(ble_gatts_stats), STATS_SIZE_INIT_PARMS(ble_gatts_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_gatts_stats), "ble_gatts");
    if (rc != 0) {
   219ba:	b910      	cbnz	r0, 219c2 <ble_gatts_init+0x26>
        return BLE_HS_EOS;
    }

    return 0;

}
   219bc:	b003      	add	sp, #12
   219be:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   219c2:	200b      	movs	r0, #11
   219c4:	e7fa      	b.n	219bc <ble_gatts_init+0x20>
   219c6:	bf00      	nop
   219c8:	10003b6c 	.word	0x10003b6c
   219cc:	10003b68 	.word	0x10003b68
   219d0:	00031018 	.word	0x00031018
   219d4:	10003b78 	.word	0x10003b78

000219d8 <ble_hs_wakeup_tx_conn>:
    }
}

static int
ble_hs_wakeup_tx_conn(struct ble_hs_conn *conn)
{
   219d8:	b510      	push	{r4, lr}
   219da:	b082      	sub	sp, #8
   219dc:	4604      	mov	r4, r0
    struct os_mbuf_pkthdr *omp;
    struct os_mbuf *om;
    int rc;

    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   219de:	e00a      	b.n	219f6 <ble_hs_wakeup_tx_conn+0x1e>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   219e0:	f104 023c 	add.w	r2, r4, #60	; 0x3c
   219e4:	6422      	str	r2, [r4, #64]	; 0x40

        om = OS_MBUF_PKTHDR_TO_MBUF(omp);
   219e6:	3b10      	subs	r3, #16
   219e8:	9301      	str	r3, [sp, #4]
        rc = ble_hs_hci_acl_tx_now(conn, &om);
   219ea:	a901      	add	r1, sp, #4
   219ec:	4620      	mov	r0, r4
   219ee:	f001 fa9b 	bl	22f28 <ble_hs_hci_acl_tx_now>
        if (rc == BLE_HS_EAGAIN) {
   219f2:	2801      	cmp	r0, #1
   219f4:	d006      	beq.n	21a04 <ble_hs_wakeup_tx_conn+0x2c>
    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   219f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   219f8:	b17b      	cbz	r3, 21a1a <ble_hs_wakeup_tx_conn+0x42>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   219fa:	685a      	ldr	r2, [r3, #4]
   219fc:	63e2      	str	r2, [r4, #60]	; 0x3c
   219fe:	2a00      	cmp	r2, #0
   21a00:	d1f1      	bne.n	219e6 <ble_hs_wakeup_tx_conn+0xe>
   21a02:	e7ed      	b.n	219e0 <ble_hs_wakeup_tx_conn+0x8>
            /* Controller is at capacity.  This packet will be the first to
             * get transmitted next time around.
             */
            STAILQ_INSERT_HEAD(&conn->bhc_tx_q, OS_MBUF_PKTHDR(om), omp_next);
   21a04:	9b01      	ldr	r3, [sp, #4]
   21a06:	f103 0110 	add.w	r1, r3, #16
   21a0a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   21a0c:	615a      	str	r2, [r3, #20]
   21a0e:	b10a      	cbz	r2, 21a14 <ble_hs_wakeup_tx_conn+0x3c>
   21a10:	63e1      	str	r1, [r4, #60]	; 0x3c
            return BLE_HS_EAGAIN;
   21a12:	e003      	b.n	21a1c <ble_hs_wakeup_tx_conn+0x44>
            STAILQ_INSERT_HEAD(&conn->bhc_tx_q, OS_MBUF_PKTHDR(om), omp_next);
   21a14:	3314      	adds	r3, #20
   21a16:	6423      	str	r3, [r4, #64]	; 0x40
   21a18:	e7fa      	b.n	21a10 <ble_hs_wakeup_tx_conn+0x38>
        }
    }

    return 0;
   21a1a:	2000      	movs	r0, #0
}
   21a1c:	b002      	add	sp, #8
   21a1e:	bd10      	pop	{r4, pc}

00021a20 <ble_hs_event_rx_hci_ev>:
#endif
}

static void
ble_hs_event_rx_hci_ev(struct ble_npl_event *ev)
{
   21a20:	b510      	push	{r4, lr}
   21a22:	4601      	mov	r1, r0
    return ev->ev.ev_arg;
   21a24:	6884      	ldr	r4, [r0, #8]
    const struct ble_hci_ev *hci_ev;
    int rc;

    hci_ev = ble_npl_event_get_arg(ev);

    rc = os_memblock_put(&ble_hs_hci_ev_pool, ev);
   21a26:	4803      	ldr	r0, [pc, #12]	; (21a34 <ble_hs_event_rx_hci_ev+0x14>)
   21a28:	f7f4 fa29 	bl	15e7e <os_memblock_put>
#if BLE_MONITOR
    ble_monitor_send(BLE_MONITOR_OPCODE_EVENT_PKT, hci_ev,
                     hci_ev->length + sizeof(*hci_ev));
#endif

    ble_hs_hci_evt_process(hci_ev);
   21a2c:	4620      	mov	r0, r4
   21a2e:	f001 fd4d 	bl	234cc <ble_hs_hci_evt_process>
}
   21a32:	bd10      	pop	{r4, pc}
   21a34:	10003bfc 	.word	0x10003bfc

00021a38 <ble_hs_clear_rx_queue>:
{
   21a38:	b508      	push	{r3, lr}
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
   21a3a:	4805      	ldr	r0, [pc, #20]	; (21a50 <ble_hs_clear_rx_queue+0x18>)
   21a3c:	f001 ffde 	bl	239fc <ble_mqueue_get>
   21a40:	4603      	mov	r3, r0
   21a42:	b118      	cbz	r0, 21a4c <ble_hs_clear_rx_queue+0x14>
        os_mbuf_free_chain(om);
   21a44:	4618      	mov	r0, r3
   21a46:	f7f3 fe15 	bl	15674 <os_mbuf_free_chain>
   21a4a:	e7f6      	b.n	21a3a <ble_hs_clear_rx_queue+0x2>
}
   21a4c:	bd08      	pop	{r3, pc}
   21a4e:	bf00      	nop
   21a50:	10003cd4 	.word	0x10003cd4

00021a54 <ble_hs_rx_data>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
ble_hs_rx_data(struct os_mbuf *om, void *arg)
{
   21a54:	b510      	push	{r4, lr}
   21a56:	4604      	mov	r4, r0
    int rc;

    /* If flow control is enabled, mark this packet with its corresponding
     * connection handle.
     */
    ble_hs_flow_track_data_mbuf(om);
   21a58:	f001 f872 	bl	22b40 <ble_hs_flow_track_data_mbuf>

    rc = ble_mqueue_put(&ble_hs_rx_q, ble_hs_evq, om);
   21a5c:	4622      	mov	r2, r4
   21a5e:	4b06      	ldr	r3, [pc, #24]	; (21a78 <ble_hs_rx_data+0x24>)
   21a60:	6819      	ldr	r1, [r3, #0]
   21a62:	4806      	ldr	r0, [pc, #24]	; (21a7c <ble_hs_rx_data+0x28>)
   21a64:	f001 ffdb 	bl	23a1e <ble_mqueue_put>
    if (rc != 0) {
   21a68:	b900      	cbnz	r0, 21a6c <ble_hs_rx_data+0x18>
        os_mbuf_free_chain(om);
        return BLE_HS_EOS;
    }

    return 0;
}
   21a6a:	bd10      	pop	{r4, pc}
        os_mbuf_free_chain(om);
   21a6c:	4620      	mov	r0, r4
   21a6e:	f7f3 fe01 	bl	15674 <os_mbuf_free_chain>
        return BLE_HS_EOS;
   21a72:	200b      	movs	r0, #11
   21a74:	e7f9      	b.n	21a6a <ble_hs_rx_data+0x16>
   21a76:	bf00      	nop
   21a78:	10003bf8 	.word	0x10003bf8
   21a7c:	10003cd4 	.word	0x10003cd4

00021a80 <ble_hs_event_tx_notify>:
{
   21a80:	b508      	push	{r3, lr}
    ble_gatts_tx_notifications();
   21a82:	f7ff fe7b 	bl	2177c <ble_gatts_tx_notifications>
}
   21a86:	bd08      	pop	{r3, pc}

00021a88 <ble_hs_evq_get>:
}
   21a88:	4b01      	ldr	r3, [pc, #4]	; (21a90 <ble_hs_evq_get+0x8>)
   21a8a:	6818      	ldr	r0, [r3, #0]
   21a8c:	4770      	bx	lr
   21a8e:	bf00      	nop
   21a90:	10003bf8 	.word	0x10003bf8

00021a94 <ble_hs_sched_start_stage2>:
{
   21a94:	b508      	push	{r3, lr}
    ble_npl_eventq_put((struct ble_npl_eventq *)ble_hs_evq_get(),
   21a96:	f7ff fff7 	bl	21a88 <ble_hs_evq_get>
    os_eventq_put(&evq->evq, &ev->ev);
   21a9a:	4902      	ldr	r1, [pc, #8]	; (21aa4 <ble_hs_sched_start_stage2+0x10>)
   21a9c:	f7f3 fcb5 	bl	1540a <os_eventq_put>
}
   21aa0:	bd08      	pop	{r3, pc}
   21aa2:	bf00      	nop
   21aa4:	10003bd8 	.word	0x10003bd8

00021aa8 <ble_hs_event_start_stage1>:
{
   21aa8:	b508      	push	{r3, lr}
    ble_hs_sched_start_stage2();
   21aaa:	f7ff fff3 	bl	21a94 <ble_hs_sched_start_stage2>
}
   21aae:	bd08      	pop	{r3, pc}

00021ab0 <ble_hs_evq_set>:
    ble_hs_evq = evq;
   21ab0:	4b01      	ldr	r3, [pc, #4]	; (21ab8 <ble_hs_evq_set+0x8>)
   21ab2:	6018      	str	r0, [r3, #0]
}
   21ab4:	4770      	bx	lr
   21ab6:	bf00      	nop
   21ab8:	10003bf8 	.word	0x10003bf8

00021abc <ble_hs_is_parent_task>:
{
   21abc:	b508      	push	{r3, lr}
    return os_started();
   21abe:	f7f3 fa31 	bl	14f24 <os_started>
    return !ble_npl_os_started() ||
   21ac2:	b908      	cbnz	r0, 21ac8 <ble_hs_is_parent_task+0xc>
   21ac4:	2001      	movs	r0, #1
}
   21ac6:	bd08      	pop	{r3, pc}
    return os_sched_get_current_task();
   21ac8:	f7f4 fb5c 	bl	16184 <os_sched_get_current_task>
           ble_npl_get_current_task_id() == ble_hs_parent_task;
   21acc:	4b03      	ldr	r3, [pc, #12]	; (21adc <ble_hs_is_parent_task+0x20>)
   21ace:	681b      	ldr	r3, [r3, #0]
    return !ble_npl_os_started() ||
   21ad0:	4283      	cmp	r3, r0
   21ad2:	d001      	beq.n	21ad8 <ble_hs_is_parent_task+0x1c>
   21ad4:	2000      	movs	r0, #0
   21ad6:	e7f6      	b.n	21ac6 <ble_hs_is_parent_task+0xa>
   21ad8:	2001      	movs	r0, #1
   21ada:	e7f4      	b.n	21ac6 <ble_hs_is_parent_task+0xa>
   21adc:	10003ccc 	.word	0x10003ccc

00021ae0 <ble_hs_lock_nested>:
{
   21ae0:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   21ae2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21ae6:	4802      	ldr	r0, [pc, #8]	; (21af0 <ble_hs_lock_nested+0x10>)
   21ae8:	f7f4 ff58 	bl	1699c <os_mutex_pend>
}
   21aec:	bd08      	pop	{r3, pc}
   21aee:	bf00      	nop
   21af0:	10003cc0 	.word	0x10003cc0

00021af4 <ble_hs_unlock_nested>:
{
   21af4:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   21af6:	4802      	ldr	r0, [pc, #8]	; (21b00 <ble_hs_unlock_nested+0xc>)
   21af8:	f7f4 fef0 	bl	168dc <os_mutex_release>
}
   21afc:	bd08      	pop	{r3, pc}
   21afe:	bf00      	nop
   21b00:	10003cc0 	.word	0x10003cc0

00021b04 <ble_hs_lock>:
{
   21b04:	b508      	push	{r3, lr}
    ble_hs_lock_nested();
   21b06:	f7ff ffeb 	bl	21ae0 <ble_hs_lock_nested>
}
   21b0a:	bd08      	pop	{r3, pc}

00021b0c <ble_hs_unlock>:
{
   21b0c:	b508      	push	{r3, lr}
    ble_hs_unlock_nested();
   21b0e:	f7ff fff1 	bl	21af4 <ble_hs_unlock_nested>
}
   21b12:	bd08      	pop	{r3, pc}

00021b14 <ble_hs_process_rx_data_queue>:
{
   21b14:	b508      	push	{r3, lr}
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
   21b16:	4805      	ldr	r0, [pc, #20]	; (21b2c <ble_hs_process_rx_data_queue+0x18>)
   21b18:	f001 ff70 	bl	239fc <ble_mqueue_get>
   21b1c:	4603      	mov	r3, r0
   21b1e:	b118      	cbz	r0, 21b28 <ble_hs_process_rx_data_queue+0x14>
        ble_hs_hci_evt_acl_process(om);
   21b20:	4618      	mov	r0, r3
   21b22:	f001 fcf1 	bl	23508 <ble_hs_hci_evt_acl_process>
   21b26:	e7f6      	b.n	21b16 <ble_hs_process_rx_data_queue+0x2>
}
   21b28:	bd08      	pop	{r3, pc}
   21b2a:	bf00      	nop
   21b2c:	10003cd4 	.word	0x10003cd4

00021b30 <ble_hs_event_rx_data>:
{
   21b30:	b508      	push	{r3, lr}
    ble_hs_process_rx_data_queue();
   21b32:	f7ff ffef 	bl	21b14 <ble_hs_process_rx_data_queue>
}
   21b36:	bd08      	pop	{r3, pc}

00021b38 <ble_hs_wakeup_tx>:
{
   21b38:	b510      	push	{r4, lr}
    ble_hs_lock();
   21b3a:	f7ff ffe3 	bl	21b04 <ble_hs_lock>
    for (conn = ble_hs_conn_first();
   21b3e:	f000 fe6f 	bl	22820 <ble_hs_conn_first>
   21b42:	b148      	cbz	r0, 21b58 <ble_hs_wakeup_tx+0x20>
        if (conn->bhc_flags & BLE_HS_CONN_F_TX_FRAG) {
   21b44:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   21b48:	f013 0f04 	tst.w	r3, #4
   21b4c:	d101      	bne.n	21b52 <ble_hs_wakeup_tx+0x1a>
         conn = SLIST_NEXT(conn, bhc_next)) {
   21b4e:	6800      	ldr	r0, [r0, #0]
   21b50:	e7f7      	b.n	21b42 <ble_hs_wakeup_tx+0xa>
            rc = ble_hs_wakeup_tx_conn(conn);
   21b52:	f7ff ff41 	bl	219d8 <ble_hs_wakeup_tx_conn>
            if (rc != 0) {
   21b56:	b948      	cbnz	r0, 21b6c <ble_hs_wakeup_tx+0x34>
    for (conn = ble_hs_conn_first();
   21b58:	f000 fe62 	bl	22820 <ble_hs_conn_first>
   21b5c:	4604      	mov	r4, r0
   21b5e:	b12c      	cbz	r4, 21b6c <ble_hs_wakeup_tx+0x34>
        rc = ble_hs_wakeup_tx_conn(conn);
   21b60:	4620      	mov	r0, r4
   21b62:	f7ff ff39 	bl	219d8 <ble_hs_wakeup_tx_conn>
        if (rc != 0) {
   21b66:	b908      	cbnz	r0, 21b6c <ble_hs_wakeup_tx+0x34>
         conn = SLIST_NEXT(conn, bhc_next)) {
   21b68:	6824      	ldr	r4, [r4, #0]
   21b6a:	e7f8      	b.n	21b5e <ble_hs_wakeup_tx+0x26>
    ble_hs_unlock();
   21b6c:	f7ff ffce 	bl	21b0c <ble_hs_unlock>
}
   21b70:	bd10      	pop	{r4, pc}
	...

00021b74 <ble_hs_is_enabled>:
    return ble_hs_enabled_state == BLE_HS_ENABLED_STATE_ON;
   21b74:	4b03      	ldr	r3, [pc, #12]	; (21b84 <ble_hs_is_enabled+0x10>)
   21b76:	7818      	ldrb	r0, [r3, #0]
}
   21b78:	2802      	cmp	r0, #2
   21b7a:	bf14      	ite	ne
   21b7c:	2000      	movne	r0, #0
   21b7e:	2001      	moveq	r0, #1
   21b80:	4770      	bx	lr
   21b82:	bf00      	nop
   21b84:	10003bb4 	.word	0x10003bb4

00021b88 <ble_hs_timer_reset>:
{
   21b88:	b510      	push	{r4, lr}
   21b8a:	4604      	mov	r4, r0
    if (!ble_hs_is_enabled()) {
   21b8c:	f7ff fff2 	bl	21b74 <ble_hs_is_enabled>
   21b90:	b918      	cbnz	r0, 21b9a <ble_hs_timer_reset+0x12>
    os_callout_stop(&co->co);
   21b92:	4804      	ldr	r0, [pc, #16]	; (21ba4 <ble_hs_timer_reset+0x1c>)
   21b94:	f7f3 fac2 	bl	1511c <os_callout_stop>
}
   21b98:	bd10      	pop	{r4, pc}
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   21b9a:	4621      	mov	r1, r4
   21b9c:	4801      	ldr	r0, [pc, #4]	; (21ba4 <ble_hs_timer_reset+0x1c>)
   21b9e:	f7f3 fadb 	bl	15158 <os_callout_reset>
   21ba2:	e7f9      	b.n	21b98 <ble_hs_timer_reset+0x10>
   21ba4:	10003d28 	.word	0x10003d28

00021ba8 <ble_hs_timer_sched>:
    if (ticks_from_now == BLE_HS_FOREVER) {
   21ba8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   21bac:	4298      	cmp	r0, r3
   21bae:	d010      	beq.n	21bd2 <ble_hs_timer_sched+0x2a>
{
   21bb0:	b510      	push	{r4, lr}
   21bb2:	4604      	mov	r4, r0
    return os_time_get();
   21bb4:	f7f4 fcf4 	bl	165a0 <os_time_get>
    abs_time = ble_npl_time_get() + ticks_from_now;
   21bb8:	4420      	add	r0, r4
   21bba:	4b06      	ldr	r3, [pc, #24]	; (21bd4 <ble_hs_timer_sched+0x2c>)
   21bbc:	69db      	ldr	r3, [r3, #28]
    if (!ble_npl_callout_is_active(&ble_hs_timer) ||
   21bbe:	b123      	cbz	r3, 21bca <ble_hs_timer_sched+0x22>
    return co->co.c_ticks;
   21bc0:	4b04      	ldr	r3, [pc, #16]	; (21bd4 <ble_hs_timer_sched+0x2c>)
   21bc2:	695b      	ldr	r3, [r3, #20]
            ((ble_npl_stime_t)(abs_time -
   21bc4:	1ac0      	subs	r0, r0, r3
    if (!ble_npl_callout_is_active(&ble_hs_timer) ||
   21bc6:	2800      	cmp	r0, #0
   21bc8:	da02      	bge.n	21bd0 <ble_hs_timer_sched+0x28>
        ble_hs_timer_reset(ticks_from_now);
   21bca:	4620      	mov	r0, r4
   21bcc:	f7ff ffdc 	bl	21b88 <ble_hs_timer_reset>
}
   21bd0:	bd10      	pop	{r4, pc}
   21bd2:	4770      	bx	lr
   21bd4:	10003d28 	.word	0x10003d28

00021bd8 <ble_hs_sync>:
{
   21bd8:	b510      	push	{r4, lr}
    ble_hs_sync_state = BLE_HS_SYNC_STATE_BRINGUP;
   21bda:	4b14      	ldr	r3, [pc, #80]	; (21c2c <ble_hs_sync+0x54>)
   21bdc:	2201      	movs	r2, #1
   21bde:	701a      	strb	r2, [r3, #0]
    rc = ble_hs_startup_go();
   21be0:	f002 f96e 	bl	23ec0 <ble_hs_startup_go>
    if (rc == 0) {
   21be4:	4604      	mov	r4, r0
   21be6:	b940      	cbnz	r0, 21bfa <ble_hs_sync+0x22>
        ble_hs_sync_state = BLE_HS_SYNC_STATE_GOOD;
   21be8:	4b10      	ldr	r3, [pc, #64]	; (21c2c <ble_hs_sync+0x54>)
   21bea:	2202      	movs	r2, #2
   21bec:	701a      	strb	r2, [r3, #0]
    ble_hs_timer_sched(retry_tmo_ticks);
   21bee:	200c      	movs	r0, #12
   21bf0:	f7ff ffda 	bl	21ba8 <ble_hs_timer_sched>
    if (rc == 0) {
   21bf4:	b12c      	cbz	r4, 21c02 <ble_hs_sync+0x2a>
}
   21bf6:	4620      	mov	r0, r4
   21bf8:	bd10      	pop	{r4, pc}
        ble_hs_sync_state = BLE_HS_SYNC_STATE_BAD;
   21bfa:	4b0c      	ldr	r3, [pc, #48]	; (21c2c <ble_hs_sync+0x54>)
   21bfc:	2200      	movs	r2, #0
   21bfe:	701a      	strb	r2, [r3, #0]
   21c00:	e7f5      	b.n	21bee <ble_hs_sync+0x16>
        rc = ble_hs_misc_restore_irks();
   21c02:	f001 fee7 	bl	239d4 <ble_hs_misc_restore_irks>
        if (rc != 0) {
   21c06:	4604      	mov	r4, r0
   21c08:	b940      	cbnz	r0, 21c1c <ble_hs_sync+0x44>
        if (ble_hs_cfg.sync_cb != NULL) {
   21c0a:	4b09      	ldr	r3, [pc, #36]	; (21c30 <ble_hs_sync+0x58>)
   21c0c:	691b      	ldr	r3, [r3, #16]
   21c0e:	b103      	cbz	r3, 21c12 <ble_hs_sync+0x3a>
            ble_hs_cfg.sync_cb();
   21c10:	4798      	blx	r3
        STATS_INC(ble_hs_stats, sync);
   21c12:	4a08      	ldr	r2, [pc, #32]	; (21c34 <ble_hs_sync+0x5c>)
   21c14:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   21c16:	3301      	adds	r3, #1
   21c18:	62d3      	str	r3, [r2, #44]	; 0x2c
    return rc;
   21c1a:	e7ec      	b.n	21bf6 <ble_hs_sync+0x1e>
            BLE_HS_LOG(INFO, "Failed to restore IRKs from store; status=%d\n",
   21c1c:	4603      	mov	r3, r0
   21c1e:	4a06      	ldr	r2, [pc, #24]	; (21c38 <ble_hs_sync+0x60>)
   21c20:	2101      	movs	r1, #1
   21c22:	2004      	movs	r0, #4
   21c24:	f7f7 fd98 	bl	19758 <modlog_printf>
   21c28:	e7ef      	b.n	21c0a <ble_hs_sync+0x32>
   21c2a:	bf00      	nop
   21c2c:	10003d24 	.word	0x10003d24
   21c30:	100002bc 	.word	0x100002bc
   21c34:	10003cec 	.word	0x10003cec
   21c38:	00031024 	.word	0x00031024

00021c3c <ble_hs_reset>:
{
   21c3c:	b508      	push	{r3, lr}
    STATS_INC(ble_hs_stats, reset);
   21c3e:	4a0f      	ldr	r2, [pc, #60]	; (21c7c <ble_hs_reset+0x40>)
   21c40:	6a93      	ldr	r3, [r2, #40]	; 0x28
   21c42:	3301      	adds	r3, #1
   21c44:	6293      	str	r3, [r2, #40]	; 0x28
    ble_hs_sync_state = 0;
   21c46:	4b0e      	ldr	r3, [pc, #56]	; (21c80 <ble_hs_reset+0x44>)
   21c48:	2200      	movs	r2, #0
   21c4a:	701a      	strb	r2, [r3, #0]
    (void)ble_hci_trans_reset();
   21c4c:	f005 feaa 	bl	279a4 <ble_hci_trans_reset>
    ble_hs_clear_rx_queue();
   21c50:	f7ff fef2 	bl	21a38 <ble_hs_clear_rx_queue>
    ble_gap_reset_state(ble_hs_reset_reason);
   21c54:	4b0b      	ldr	r3, [pc, #44]	; (21c84 <ble_hs_reset+0x48>)
   21c56:	6818      	ldr	r0, [r3, #0]
   21c58:	f7fd fb1c 	bl	1f294 <ble_gap_reset_state>
    ble_hs_id_reset();
   21c5c:	f001 fdf8 	bl	23850 <ble_hs_id_reset>
    if (ble_hs_cfg.reset_cb != NULL && ble_hs_reset_reason != 0) {
   21c60:	4b09      	ldr	r3, [pc, #36]	; (21c88 <ble_hs_reset+0x4c>)
   21c62:	68db      	ldr	r3, [r3, #12]
   21c64:	b11b      	cbz	r3, 21c6e <ble_hs_reset+0x32>
   21c66:	4a07      	ldr	r2, [pc, #28]	; (21c84 <ble_hs_reset+0x48>)
   21c68:	6810      	ldr	r0, [r2, #0]
   21c6a:	b100      	cbz	r0, 21c6e <ble_hs_reset+0x32>
        ble_hs_cfg.reset_cb(ble_hs_reset_reason);
   21c6c:	4798      	blx	r3
    ble_hs_reset_reason = 0;
   21c6e:	4b05      	ldr	r3, [pc, #20]	; (21c84 <ble_hs_reset+0x48>)
   21c70:	2200      	movs	r2, #0
   21c72:	601a      	str	r2, [r3, #0]
    rc = ble_hs_sync();
   21c74:	f7ff ffb0 	bl	21bd8 <ble_hs_sync>
}
   21c78:	bd08      	pop	{r3, pc}
   21c7a:	bf00      	nop
   21c7c:	10003cec 	.word	0x10003cec
   21c80:	10003d24 	.word	0x10003d24
   21c84:	10003cd0 	.word	0x10003cd0
   21c88:	100002bc 	.word	0x100002bc

00021c8c <ble_hs_event_reset>:
{
   21c8c:	b508      	push	{r3, lr}
    ble_hs_reset();
   21c8e:	f7ff ffd5 	bl	21c3c <ble_hs_reset>
}
   21c92:	bd08      	pop	{r3, pc}

00021c94 <ble_hs_timer_exp>:
{
   21c94:	b508      	push	{r3, lr}
    switch (ble_hs_sync_state) {
   21c96:	4b13      	ldr	r3, [pc, #76]	; (21ce4 <ble_hs_timer_exp+0x50>)
   21c98:	781b      	ldrb	r3, [r3, #0]
   21c9a:	b1b3      	cbz	r3, 21cca <ble_hs_timer_exp+0x36>
   21c9c:	2b02      	cmp	r3, #2
   21c9e:	d117      	bne.n	21cd0 <ble_hs_timer_exp+0x3c>
        ticks_until_next = ble_gattc_timer();
   21ca0:	f7fe fcda 	bl	20658 <ble_gattc_timer>
        ble_hs_timer_sched(ticks_until_next);
   21ca4:	f7ff ff80 	bl	21ba8 <ble_hs_timer_sched>
        ticks_until_next = ble_l2cap_sig_timer();
   21ca8:	f002 fd14 	bl	246d4 <ble_l2cap_sig_timer>
        ble_hs_timer_sched(ticks_until_next);
   21cac:	f7ff ff7c 	bl	21ba8 <ble_hs_timer_sched>
        ticks_until_next = ble_sm_timer();
   21cb0:	f004 f912 	bl	25ed8 <ble_sm_timer>
        ble_hs_timer_sched(ticks_until_next);
   21cb4:	f7ff ff78 	bl	21ba8 <ble_hs_timer_sched>
        ticks_until_next = ble_hs_conn_timer();
   21cb8:	f000 fe64 	bl	22984 <ble_hs_conn_timer>
        ble_hs_timer_sched(ticks_until_next);
   21cbc:	f7ff ff74 	bl	21ba8 <ble_hs_timer_sched>
        ticks_until_next = ble_gap_timer();
   21cc0:	f7fc fff6 	bl	1ecb0 <ble_gap_timer>
        ble_hs_timer_sched(ticks_until_next);
   21cc4:	f7ff ff70 	bl	21ba8 <ble_hs_timer_sched>
}
   21cc8:	bd08      	pop	{r3, pc}
        ble_hs_reset();
   21cca:	f7ff ffb7 	bl	21c3c <ble_hs_reset>
        break;
   21cce:	e7fb      	b.n	21cc8 <ble_hs_timer_exp+0x34>
        assert(0);
   21cd0:	f7f2 fcc8 	bl	14664 <hal_debugger_connected>
   21cd4:	b100      	cbz	r0, 21cd8 <ble_hs_timer_exp+0x44>
   21cd6:	be01      	bkpt	0x0001
   21cd8:	2300      	movs	r3, #0
   21cda:	461a      	mov	r2, r3
   21cdc:	4619      	mov	r1, r3
   21cde:	4618      	mov	r0, r3
   21ce0:	f7f3 f860 	bl	14da4 <__assert_func>
   21ce4:	10003d24 	.word	0x10003d24

00021ce8 <ble_hs_timer_resched>:
{
   21ce8:	b508      	push	{r3, lr}
    ble_hs_timer_reset(0);
   21cea:	2000      	movs	r0, #0
   21cec:	f7ff ff4c 	bl	21b88 <ble_hs_timer_reset>
}
   21cf0:	bd08      	pop	{r3, pc}
	...

00021cf4 <ble_hs_enqueue_hci_event>:
{
   21cf4:	b510      	push	{r4, lr}
   21cf6:	4604      	mov	r4, r0
    ev = os_memblock_get(&ble_hs_hci_ev_pool);
   21cf8:	480a      	ldr	r0, [pc, #40]	; (21d24 <ble_hs_enqueue_hci_event+0x30>)
   21cfa:	f7f4 f898 	bl	15e2e <os_memblock_get>
    if (ev == NULL) {
   21cfe:	b160      	cbz	r0, 21d1a <ble_hs_enqueue_hci_event+0x26>
   21d00:	4601      	mov	r1, r0
    memset(ev, 0, sizeof(*ev));
   21d02:	2300      	movs	r3, #0
   21d04:	6003      	str	r3, [r0, #0]
   21d06:	60c3      	str	r3, [r0, #12]
    ev->ev.ev_queued = 0;
   21d08:	7003      	strb	r3, [r0, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   21d0a:	4b07      	ldr	r3, [pc, #28]	; (21d28 <ble_hs_enqueue_hci_event+0x34>)
   21d0c:	6043      	str	r3, [r0, #4]
    ev->ev.ev_arg = arg;
   21d0e:	6084      	str	r4, [r0, #8]
    os_eventq_put(&evq->evq, &ev->ev);
   21d10:	4b06      	ldr	r3, [pc, #24]	; (21d2c <ble_hs_enqueue_hci_event+0x38>)
   21d12:	6818      	ldr	r0, [r3, #0]
   21d14:	f7f3 fb79 	bl	1540a <os_eventq_put>
}
   21d18:	bd10      	pop	{r4, pc}
        ble_hci_trans_buf_free(hci_evt);
   21d1a:	4620      	mov	r0, r4
   21d1c:	f005 fe7c 	bl	27a18 <ble_hci_trans_buf_free>
   21d20:	e7fa      	b.n	21d18 <ble_hs_enqueue_hci_event+0x24>
   21d22:	bf00      	nop
   21d24:	10003bfc 	.word	0x10003bfc
   21d28:	00021a21 	.word	0x00021a21
   21d2c:	10003bf8 	.word	0x10003bf8

00021d30 <ble_hs_sched_reset>:
{
   21d30:	b508      	push	{r3, lr}
    ble_hs_reset_reason = reason;
   21d32:	4b04      	ldr	r3, [pc, #16]	; (21d44 <ble_hs_sched_reset+0x14>)
   21d34:	6018      	str	r0, [r3, #0]
   21d36:	4904      	ldr	r1, [pc, #16]	; (21d48 <ble_hs_sched_reset+0x18>)
   21d38:	4b04      	ldr	r3, [pc, #16]	; (21d4c <ble_hs_sched_reset+0x1c>)
   21d3a:	6818      	ldr	r0, [r3, #0]
   21d3c:	f7f3 fb65 	bl	1540a <os_eventq_put>
}
   21d40:	bd08      	pop	{r3, pc}
   21d42:	bf00      	nop
   21d44:	10003cd0 	.word	0x10003cd0
   21d48:	10003bb8 	.word	0x10003bb8
   21d4c:	10003bf8 	.word	0x10003bf8

00021d50 <ble_hs_hw_error>:
{
   21d50:	b508      	push	{r3, lr}
    ble_hs_sched_reset(BLE_HS_HW_ERR(hw_code));
   21d52:	f500 60c0 	add.w	r0, r0, #1536	; 0x600
   21d56:	f7ff ffeb 	bl	21d30 <ble_hs_sched_reset>
}
   21d5a:	bd08      	pop	{r3, pc}

00021d5c <ble_hs_start>:
{
   21d5c:	b510      	push	{r4, lr}
    ble_hs_lock();
   21d5e:	f7ff fed1 	bl	21b04 <ble_hs_lock>
    switch (ble_hs_enabled_state) {
   21d62:	4b18      	ldr	r3, [pc, #96]	; (21dc4 <ble_hs_start+0x68>)
   21d64:	781b      	ldrb	r3, [r3, #0]
   21d66:	2b01      	cmp	r3, #1
   21d68:	d028      	beq.n	21dbc <ble_hs_start+0x60>
   21d6a:	2b02      	cmp	r3, #2
   21d6c:	d021      	beq.n	21db2 <ble_hs_start+0x56>
   21d6e:	b14b      	cbz	r3, 21d84 <ble_hs_start+0x28>
        assert(0);
   21d70:	f7f2 fc78 	bl	14664 <hal_debugger_connected>
   21d74:	b100      	cbz	r0, 21d78 <ble_hs_start+0x1c>
   21d76:	be01      	bkpt	0x0001
   21d78:	2300      	movs	r3, #0
   21d7a:	461a      	mov	r2, r3
   21d7c:	4619      	mov	r1, r3
   21d7e:	4618      	mov	r0, r3
   21d80:	f7f3 f810 	bl	14da4 <__assert_func>
        ble_hs_enabled_state = BLE_HS_ENABLED_STATE_ON;
   21d84:	4b0f      	ldr	r3, [pc, #60]	; (21dc4 <ble_hs_start+0x68>)
   21d86:	2202      	movs	r2, #2
   21d88:	701a      	strb	r2, [r3, #0]
    ble_hs_unlock();
   21d8a:	f7ff febf 	bl	21b0c <ble_hs_unlock>
    return os_sched_get_current_task();
   21d8e:	f7f4 f9f9 	bl	16184 <os_sched_get_current_task>
    ble_hs_parent_task = ble_npl_get_current_task_id();
   21d92:	4b0d      	ldr	r3, [pc, #52]	; (21dc8 <ble_hs_start+0x6c>)
   21d94:	6018      	str	r0, [r3, #0]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   21d96:	2300      	movs	r3, #0
   21d98:	4a0c      	ldr	r2, [pc, #48]	; (21dcc <ble_hs_start+0x70>)
   21d9a:	490d      	ldr	r1, [pc, #52]	; (21dd0 <ble_hs_start+0x74>)
   21d9c:	6809      	ldr	r1, [r1, #0]
   21d9e:	480d      	ldr	r0, [pc, #52]	; (21dd4 <ble_hs_start+0x78>)
   21da0:	f7f3 f9ae 	bl	15100 <os_callout_init>
    rc = ble_gatts_start();
   21da4:	f7ff fb7e 	bl	214a4 <ble_gatts_start>
    if (rc != 0) {
   21da8:	4604      	mov	r4, r0
   21daa:	b928      	cbnz	r0, 21db8 <ble_hs_start+0x5c>
    ble_hs_sync();
   21dac:	f7ff ff14 	bl	21bd8 <ble_hs_sync>
    return 0;
   21db0:	e002      	b.n	21db8 <ble_hs_start+0x5c>
    ble_hs_unlock();
   21db2:	f7ff feab 	bl	21b0c <ble_hs_unlock>
        rc = BLE_HS_EALREADY;
   21db6:	2402      	movs	r4, #2
}
   21db8:	4620      	mov	r0, r4
   21dba:	bd10      	pop	{r4, pc}
    ble_hs_unlock();
   21dbc:	f7ff fea6 	bl	21b0c <ble_hs_unlock>
        rc = BLE_HS_EBUSY;
   21dc0:	240f      	movs	r4, #15
        return rc;
   21dc2:	e7f9      	b.n	21db8 <ble_hs_start+0x5c>
   21dc4:	10003bb4 	.word	0x10003bb4
   21dc8:	10003ccc 	.word	0x10003ccc
   21dcc:	00021c95 	.word	0x00021c95
   21dd0:	10003bf8 	.word	0x10003bf8
   21dd4:	10003d28 	.word	0x10003d28

00021dd8 <ble_hs_event_start_stage2>:
{
   21dd8:	b508      	push	{r3, lr}
    rc = ble_hs_start();
   21dda:	f7ff ffbf 	bl	21d5c <ble_hs_start>
    assert(rc == 0);
   21dde:	b900      	cbnz	r0, 21de2 <ble_hs_event_start_stage2+0xa>
}
   21de0:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   21de2:	f7f2 fc3f 	bl	14664 <hal_debugger_connected>
   21de6:	b100      	cbz	r0, 21dea <ble_hs_event_start_stage2+0x12>
   21de8:	be01      	bkpt	0x0001
   21dea:	2300      	movs	r3, #0
   21dec:	461a      	mov	r2, r3
   21dee:	4619      	mov	r1, r3
   21df0:	4618      	mov	r0, r3
   21df2:	f7f2 ffd7 	bl	14da4 <__assert_func>

00021df6 <ble_hs_tx_data>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_tx_data(struct os_mbuf *om)
{
   21df6:	b508      	push	{r3, lr}
#if BLE_MONITOR
    ble_monitor_send_om(BLE_MONITOR_OPCODE_ACL_TX_PKT, om);
#endif

    return ble_hci_trans_hs_acl_tx(om);
   21df8:	f005 fde6 	bl	279c8 <ble_hci_trans_hs_acl_tx>
}
   21dfc:	bd08      	pop	{r3, pc}
	...

00021e00 <ble_hs_init>:

void
ble_hs_init(void)
{
   21e00:	b510      	push	{r4, lr}
   21e02:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   21e04:	4b82      	ldr	r3, [pc, #520]	; (22010 <ble_hs_init+0x210>)
   21e06:	781b      	ldrb	r3, [r3, #0]
   21e08:	2b00      	cmp	r3, #0
   21e0a:	d074      	beq.n	21ef6 <ble_hs_init+0xf6>

    /* Create memory pool of OS events */
    rc = os_mempool_init(&ble_hs_hci_ev_pool, BLE_HS_HCI_EVT_COUNT,
   21e0c:	4b81      	ldr	r3, [pc, #516]	; (22014 <ble_hs_init+0x214>)
   21e0e:	9300      	str	r3, [sp, #0]
   21e10:	4b81      	ldr	r3, [pc, #516]	; (22018 <ble_hs_init+0x218>)
   21e12:	2210      	movs	r2, #16
   21e14:	210a      	movs	r1, #10
   21e16:	4881      	ldr	r0, [pc, #516]	; (2201c <ble_hs_init+0x21c>)
   21e18:	f7f3 ffd2 	bl	15dc0 <os_mempool_init>
                         sizeof (struct ble_npl_event), ble_hs_hci_os_event_buf,
                         "ble_hs_hci_ev_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   21e1c:	2800      	cmp	r0, #0
   21e1e:	d174      	bne.n	21f0a <ble_hs_init+0x10a>

    /* These get initialized here to allow unit tests to run without a zeroed
     * bss.
     */
    ble_hs_reset_reason = 0;
   21e20:	2300      	movs	r3, #0
   21e22:	4a7f      	ldr	r2, [pc, #508]	; (22020 <ble_hs_init+0x220>)
   21e24:	6013      	str	r3, [r2, #0]
    ble_hs_enabled_state = BLE_HS_ENABLED_STATE_OFF;
   21e26:	4a7f      	ldr	r2, [pc, #508]	; (22024 <ble_hs_init+0x224>)
   21e28:	7013      	strb	r3, [r2, #0]
    memset(ev, 0, sizeof(*ev));
   21e2a:	4a7f      	ldr	r2, [pc, #508]	; (22028 <ble_hs_init+0x228>)
   21e2c:	6013      	str	r3, [r2, #0]
   21e2e:	6093      	str	r3, [r2, #8]
   21e30:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   21e32:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   21e34:	497d      	ldr	r1, [pc, #500]	; (2202c <ble_hs_init+0x22c>)
   21e36:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   21e38:	4a7d      	ldr	r2, [pc, #500]	; (22030 <ble_hs_init+0x230>)
   21e3a:	6013      	str	r3, [r2, #0]
   21e3c:	6093      	str	r3, [r2, #8]
   21e3e:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   21e40:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   21e42:	497c      	ldr	r1, [pc, #496]	; (22034 <ble_hs_init+0x234>)
   21e44:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   21e46:	4a7c      	ldr	r2, [pc, #496]	; (22038 <ble_hs_init+0x238>)
   21e48:	6013      	str	r3, [r2, #0]
   21e4a:	6093      	str	r3, [r2, #8]
   21e4c:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   21e4e:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   21e50:	497a      	ldr	r1, [pc, #488]	; (2203c <ble_hs_init+0x23c>)
   21e52:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   21e54:	4a7a      	ldr	r2, [pc, #488]	; (22040 <ble_hs_init+0x240>)
   21e56:	6013      	str	r3, [r2, #0]
   21e58:	6093      	str	r3, [r2, #8]
   21e5a:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   21e5c:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   21e5e:	4b79      	ldr	r3, [pc, #484]	; (22044 <ble_hs_init+0x244>)
   21e60:	6053      	str	r3, [r2, #4]
    ble_npl_event_init(&ble_hs_ev_start_stage1, ble_hs_event_start_stage1,
                       NULL);
    ble_npl_event_init(&ble_hs_ev_start_stage2, ble_hs_event_start_stage2,
                       NULL);

    ble_hs_hci_init();
   21e62:	f001 f8d5 	bl	23010 <ble_hs_hci_init>

    rc = ble_hs_conn_init();
   21e66:	f000 fdcb 	bl	22a00 <ble_hs_conn_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21e6a:	2800      	cmp	r0, #0
   21e6c:	d15a      	bne.n	21f24 <ble_hs_init+0x124>
    rc = ble_hs_periodic_sync_init();
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif

#if NIMBLE_BLE_CONNECT
    rc = ble_l2cap_init();
   21e6e:	f002 f9d7 	bl	24220 <ble_l2cap_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21e72:	2800      	cmp	r0, #0
   21e74:	d163      	bne.n	21f3e <ble_hs_init+0x13e>

    rc = ble_att_init();
   21e76:	f7fa fdfd 	bl	1ca74 <ble_att_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21e7a:	2800      	cmp	r0, #0
   21e7c:	d16c      	bne.n	21f58 <ble_hs_init+0x158>

    rc = ble_att_svr_init();
   21e7e:	f7fc fa07 	bl	1e290 <ble_att_svr_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21e82:	2800      	cmp	r0, #0
   21e84:	d175      	bne.n	21f72 <ble_hs_init+0x172>

    rc = ble_gattc_init();
   21e86:	f7fe fd03 	bl	20890 <ble_gattc_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21e8a:	2800      	cmp	r0, #0
   21e8c:	d17e      	bne.n	21f8c <ble_hs_init+0x18c>

    rc = ble_gatts_init();
   21e8e:	f7ff fd85 	bl	2199c <ble_gatts_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21e92:	2800      	cmp	r0, #0
   21e94:	f040 8087 	bne.w	21fa6 <ble_hs_init+0x1a6>
#endif
    rc = ble_gap_init();
   21e98:	f7fd fd98 	bl	1f9cc <ble_gap_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21e9c:	2800      	cmp	r0, #0
   21e9e:	f040 808f 	bne.w	21fc0 <ble_hs_init+0x1c0>

    ble_hs_stop_init();
   21ea2:	f002 f87b 	bl	23f9c <ble_hs_stop_init>

    ble_mqueue_init(&ble_hs_rx_q, ble_hs_event_rx_data, NULL);
   21ea6:	2200      	movs	r2, #0
   21ea8:	4967      	ldr	r1, [pc, #412]	; (22048 <ble_hs_init+0x248>)
   21eaa:	4868      	ldr	r0, [pc, #416]	; (2204c <ble_hs_init+0x24c>)
   21eac:	f001 fd9c 	bl	239e8 <ble_mqueue_init>

    rc = stats_init_and_reg(
   21eb0:	4b67      	ldr	r3, [pc, #412]	; (22050 <ble_hs_init+0x250>)
   21eb2:	9301      	str	r3, [sp, #4]
   21eb4:	2300      	movs	r3, #0
   21eb6:	9300      	str	r3, [sp, #0]
   21eb8:	220b      	movs	r2, #11
   21eba:	2104      	movs	r1, #4
   21ebc:	4865      	ldr	r0, [pc, #404]	; (22054 <ble_hs_init+0x254>)
   21ebe:	f7f8 f9c5 	bl	1a24c <stats_init_and_reg>
        STATS_HDR(ble_hs_stats), STATS_SIZE_INIT_PARMS(ble_hs_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_hs_stats), "ble_hs");
    SYSINIT_PANIC_ASSERT(rc == 0);
   21ec2:	2800      	cmp	r0, #0
   21ec4:	f040 8089 	bne.w	21fda <ble_hs_init+0x1da>
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   21ec8:	4863      	ldr	r0, [pc, #396]	; (22058 <ble_hs_init+0x258>)
   21eca:	f7f4 fcfd 	bl	168c8 <os_mutex_init>

    rc = ble_npl_mutex_init(&ble_hs_mutex);
    SYSINIT_PANIC_ASSERT(rc == 0);
   21ece:	2800      	cmp	r0, #0
   21ed0:	f040 8090 	bne.w	21ff4 <ble_hs_init+0x1f4>
#if MYNEWT_VAL(BLE_HS_DEBUG)
    ble_hs_dbg_mutex_locked = 0;
#endif

#ifdef MYNEWT
    ble_hs_evq_set((struct ble_npl_eventq *)os_eventq_dflt_get());
   21ed4:	f7f3 fb52 	bl	1557c <os_eventq_dflt_get>
   21ed8:	f7ff fdea 	bl	21ab0 <ble_hs_evq_set>
#else
    ble_hs_evq_set(nimble_port_get_dflt_eventq());
#endif

    /* Configure the HCI transport to communicate with a host. */
    ble_hci_trans_cfg_hs(ble_hs_hci_rx_evt, NULL, ble_hs_rx_data, NULL);
   21edc:	2300      	movs	r3, #0
   21ede:	4a5f      	ldr	r2, [pc, #380]	; (2205c <ble_hs_init+0x25c>)
   21ee0:	4619      	mov	r1, r3
   21ee2:	485f      	ldr	r0, [pc, #380]	; (22060 <ble_hs_init+0x260>)
   21ee4:	f005 fd66 	bl	279b4 <ble_hci_trans_cfg_hs>
     * queue ensures the event won't run until the end of main().  This allows
     * the application to configure this package in the meantime.
     */
#if MYNEWT_VAL(BLE_HS_AUTO_START)
#ifdef MYNEWT
    ble_npl_eventq_put((struct ble_npl_eventq *)os_eventq_dflt_get(),
   21ee8:	f7f3 fb48 	bl	1557c <os_eventq_dflt_get>
    os_eventq_put(&evq->evq, &ev->ev);
   21eec:	4952      	ldr	r1, [pc, #328]	; (22038 <ble_hs_init+0x238>)
   21eee:	f7f3 fa8c 	bl	1540a <os_eventq_put>
#endif

#if BLE_MONITOR
    ble_monitor_new_index(0, (uint8_t[6]){ }, "nimble0");
#endif
}
   21ef2:	b002      	add	sp, #8
   21ef4:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   21ef6:	f7f2 fbb5 	bl	14664 <hal_debugger_connected>
   21efa:	b100      	cbz	r0, 21efe <ble_hs_init+0xfe>
   21efc:	be01      	bkpt	0x0001
   21efe:	2300      	movs	r3, #0
   21f00:	461a      	mov	r2, r3
   21f02:	4619      	mov	r1, r3
   21f04:	4618      	mov	r0, r3
   21f06:	f7f2 ff4d 	bl	14da4 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21f0a:	f7f2 fbab 	bl	14664 <hal_debugger_connected>
   21f0e:	b100      	cbz	r0, 21f12 <ble_hs_init+0x112>
   21f10:	be01      	bkpt	0x0001
   21f12:	2000      	movs	r0, #0
   21f14:	9000      	str	r0, [sp, #0]
   21f16:	4b53      	ldr	r3, [pc, #332]	; (22064 <ble_hs_init+0x264>)
   21f18:	681c      	ldr	r4, [r3, #0]
   21f1a:	4603      	mov	r3, r0
   21f1c:	4602      	mov	r2, r0
   21f1e:	4601      	mov	r1, r0
   21f20:	47a0      	blx	r4
   21f22:	e77d      	b.n	21e20 <ble_hs_init+0x20>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21f24:	f7f2 fb9e 	bl	14664 <hal_debugger_connected>
   21f28:	b100      	cbz	r0, 21f2c <ble_hs_init+0x12c>
   21f2a:	be01      	bkpt	0x0001
   21f2c:	2000      	movs	r0, #0
   21f2e:	9000      	str	r0, [sp, #0]
   21f30:	4b4c      	ldr	r3, [pc, #304]	; (22064 <ble_hs_init+0x264>)
   21f32:	681c      	ldr	r4, [r3, #0]
   21f34:	4603      	mov	r3, r0
   21f36:	4602      	mov	r2, r0
   21f38:	4601      	mov	r1, r0
   21f3a:	47a0      	blx	r4
   21f3c:	e797      	b.n	21e6e <ble_hs_init+0x6e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21f3e:	f7f2 fb91 	bl	14664 <hal_debugger_connected>
   21f42:	b100      	cbz	r0, 21f46 <ble_hs_init+0x146>
   21f44:	be01      	bkpt	0x0001
   21f46:	2000      	movs	r0, #0
   21f48:	9000      	str	r0, [sp, #0]
   21f4a:	4b46      	ldr	r3, [pc, #280]	; (22064 <ble_hs_init+0x264>)
   21f4c:	681c      	ldr	r4, [r3, #0]
   21f4e:	4603      	mov	r3, r0
   21f50:	4602      	mov	r2, r0
   21f52:	4601      	mov	r1, r0
   21f54:	47a0      	blx	r4
   21f56:	e78e      	b.n	21e76 <ble_hs_init+0x76>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21f58:	f7f2 fb84 	bl	14664 <hal_debugger_connected>
   21f5c:	b100      	cbz	r0, 21f60 <ble_hs_init+0x160>
   21f5e:	be01      	bkpt	0x0001
   21f60:	2000      	movs	r0, #0
   21f62:	9000      	str	r0, [sp, #0]
   21f64:	4b3f      	ldr	r3, [pc, #252]	; (22064 <ble_hs_init+0x264>)
   21f66:	681c      	ldr	r4, [r3, #0]
   21f68:	4603      	mov	r3, r0
   21f6a:	4602      	mov	r2, r0
   21f6c:	4601      	mov	r1, r0
   21f6e:	47a0      	blx	r4
   21f70:	e785      	b.n	21e7e <ble_hs_init+0x7e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21f72:	f7f2 fb77 	bl	14664 <hal_debugger_connected>
   21f76:	b100      	cbz	r0, 21f7a <ble_hs_init+0x17a>
   21f78:	be01      	bkpt	0x0001
   21f7a:	2000      	movs	r0, #0
   21f7c:	9000      	str	r0, [sp, #0]
   21f7e:	4b39      	ldr	r3, [pc, #228]	; (22064 <ble_hs_init+0x264>)
   21f80:	681c      	ldr	r4, [r3, #0]
   21f82:	4603      	mov	r3, r0
   21f84:	4602      	mov	r2, r0
   21f86:	4601      	mov	r1, r0
   21f88:	47a0      	blx	r4
   21f8a:	e77c      	b.n	21e86 <ble_hs_init+0x86>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21f8c:	f7f2 fb6a 	bl	14664 <hal_debugger_connected>
   21f90:	b100      	cbz	r0, 21f94 <ble_hs_init+0x194>
   21f92:	be01      	bkpt	0x0001
   21f94:	2000      	movs	r0, #0
   21f96:	9000      	str	r0, [sp, #0]
   21f98:	4b32      	ldr	r3, [pc, #200]	; (22064 <ble_hs_init+0x264>)
   21f9a:	681c      	ldr	r4, [r3, #0]
   21f9c:	4603      	mov	r3, r0
   21f9e:	4602      	mov	r2, r0
   21fa0:	4601      	mov	r1, r0
   21fa2:	47a0      	blx	r4
   21fa4:	e773      	b.n	21e8e <ble_hs_init+0x8e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21fa6:	f7f2 fb5d 	bl	14664 <hal_debugger_connected>
   21faa:	b100      	cbz	r0, 21fae <ble_hs_init+0x1ae>
   21fac:	be01      	bkpt	0x0001
   21fae:	2000      	movs	r0, #0
   21fb0:	9000      	str	r0, [sp, #0]
   21fb2:	4b2c      	ldr	r3, [pc, #176]	; (22064 <ble_hs_init+0x264>)
   21fb4:	681c      	ldr	r4, [r3, #0]
   21fb6:	4603      	mov	r3, r0
   21fb8:	4602      	mov	r2, r0
   21fba:	4601      	mov	r1, r0
   21fbc:	47a0      	blx	r4
   21fbe:	e76b      	b.n	21e98 <ble_hs_init+0x98>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21fc0:	f7f2 fb50 	bl	14664 <hal_debugger_connected>
   21fc4:	b100      	cbz	r0, 21fc8 <ble_hs_init+0x1c8>
   21fc6:	be01      	bkpt	0x0001
   21fc8:	2000      	movs	r0, #0
   21fca:	9000      	str	r0, [sp, #0]
   21fcc:	4b25      	ldr	r3, [pc, #148]	; (22064 <ble_hs_init+0x264>)
   21fce:	681c      	ldr	r4, [r3, #0]
   21fd0:	4603      	mov	r3, r0
   21fd2:	4602      	mov	r2, r0
   21fd4:	4601      	mov	r1, r0
   21fd6:	47a0      	blx	r4
   21fd8:	e763      	b.n	21ea2 <ble_hs_init+0xa2>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21fda:	f7f2 fb43 	bl	14664 <hal_debugger_connected>
   21fde:	b100      	cbz	r0, 21fe2 <ble_hs_init+0x1e2>
   21fe0:	be01      	bkpt	0x0001
   21fe2:	2000      	movs	r0, #0
   21fe4:	9000      	str	r0, [sp, #0]
   21fe6:	4b1f      	ldr	r3, [pc, #124]	; (22064 <ble_hs_init+0x264>)
   21fe8:	681c      	ldr	r4, [r3, #0]
   21fea:	4603      	mov	r3, r0
   21fec:	4602      	mov	r2, r0
   21fee:	4601      	mov	r1, r0
   21ff0:	47a0      	blx	r4
   21ff2:	e769      	b.n	21ec8 <ble_hs_init+0xc8>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21ff4:	f7f2 fb36 	bl	14664 <hal_debugger_connected>
   21ff8:	b100      	cbz	r0, 21ffc <ble_hs_init+0x1fc>
   21ffa:	be01      	bkpt	0x0001
   21ffc:	2000      	movs	r0, #0
   21ffe:	9000      	str	r0, [sp, #0]
   22000:	4b18      	ldr	r3, [pc, #96]	; (22064 <ble_hs_init+0x264>)
   22002:	681c      	ldr	r4, [r3, #0]
   22004:	4603      	mov	r3, r0
   22006:	4602      	mov	r2, r0
   22008:	4601      	mov	r1, r0
   2200a:	47a0      	blx	r4
   2200c:	e762      	b.n	21ed4 <ble_hs_init+0xd4>
   2200e:	bf00      	nop
   22010:	10003404 	.word	0x10003404
   22014:	00031054 	.word	0x00031054
   22018:	10003c18 	.word	0x10003c18
   2201c:	10003bfc 	.word	0x10003bfc
   22020:	10003cd0 	.word	0x10003cd0
   22024:	10003bb4 	.word	0x10003bb4
   22028:	10003be8 	.word	0x10003be8
   2202c:	00021a81 	.word	0x00021a81
   22030:	10003bb8 	.word	0x10003bb8
   22034:	00021c8d 	.word	0x00021c8d
   22038:	10003bc8 	.word	0x10003bc8
   2203c:	00021aa9 	.word	0x00021aa9
   22040:	10003bd8 	.word	0x10003bd8
   22044:	00021dd9 	.word	0x00021dd9
   22048:	00021b31 	.word	0x00021b31
   2204c:	10003cd4 	.word	0x10003cd4
   22050:	00031068 	.word	0x00031068
   22054:	10003cec 	.word	0x10003cec
   22058:	10003cc0 	.word	0x10003cc0
   2205c:	00021a55 	.word	0x00021a55
   22060:	00022ef5 	.word	0x00022ef5
   22064:	1000028c 	.word	0x1000028c

00022068 <ble_hs_adv_set_hdr>:
static ble_uuid128_t ble_hs_adv_uuids128[BLE_HS_ADV_MAX_FIELD_SZ / 16];

static int
ble_hs_adv_set_hdr(uint8_t type, uint8_t data_len, uint8_t max_len,
                   uint8_t *dst, uint8_t *dst_len, struct os_mbuf *om)
{
   22068:	b530      	push	{r4, r5, lr}
   2206a:	b083      	sub	sp, #12
   2206c:	9d06      	ldr	r5, [sp, #24]
   2206e:	9c07      	ldr	r4, [sp, #28]
   22070:	f88d 0007 	strb.w	r0, [sp, #7]
   22074:	f88d 1006 	strb.w	r1, [sp, #6]
    int rc;

    if (om ) {
   22078:	b18c      	cbz	r4, 2209e <ble_hs_adv_set_hdr+0x36>
        data_len++;
   2207a:	b2cb      	uxtb	r3, r1
   2207c:	3301      	adds	r3, #1
   2207e:	f88d 3006 	strb.w	r3, [sp, #6]
        rc = os_mbuf_append(om, &data_len, sizeof(data_len));
   22082:	2201      	movs	r2, #1
   22084:	f10d 0106 	add.w	r1, sp, #6
   22088:	4620      	mov	r0, r4
   2208a:	f7f3 fb0c 	bl	156a6 <os_mbuf_append>
        if (rc) {
   2208e:	b9c0      	cbnz	r0, 220c2 <ble_hs_adv_set_hdr+0x5a>
            return rc;
        }

        return os_mbuf_append(om, &type, sizeof(type));
   22090:	2201      	movs	r2, #1
   22092:	f10d 0107 	add.w	r1, sp, #7
   22096:	4620      	mov	r0, r4
   22098:	f7f3 fb05 	bl	156a6 <os_mbuf_append>
   2209c:	e011      	b.n	220c2 <ble_hs_adv_set_hdr+0x5a>
    }


    if (*dst_len + 2 + data_len > max_len) {
   2209e:	782c      	ldrb	r4, [r5, #0]
   220a0:	1ca0      	adds	r0, r4, #2
   220a2:	f89d 1006 	ldrb.w	r1, [sp, #6]
   220a6:	4408      	add	r0, r1
   220a8:	4290      	cmp	r0, r2
   220aa:	dc0c      	bgt.n	220c6 <ble_hs_adv_set_hdr+0x5e>
        return BLE_HS_EMSGSIZE;
    }

    dst[*dst_len] = data_len + 1;
   220ac:	3101      	adds	r1, #1
   220ae:	5519      	strb	r1, [r3, r4]
    dst[*dst_len + 1] = type;
   220b0:	782a      	ldrb	r2, [r5, #0]
   220b2:	3201      	adds	r2, #1
   220b4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   220b8:	5499      	strb	r1, [r3, r2]

    *dst_len += 2;
   220ba:	782b      	ldrb	r3, [r5, #0]
   220bc:	3302      	adds	r3, #2
   220be:	702b      	strb	r3, [r5, #0]

    return 0;
   220c0:	2000      	movs	r0, #0
}
   220c2:	b003      	add	sp, #12
   220c4:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EMSGSIZE;
   220c6:	2004      	movs	r0, #4
   220c8:	e7fb      	b.n	220c2 <ble_hs_adv_set_hdr+0x5a>

000220ca <ble_hs_adv_set_flat_mbuf>:

static int
ble_hs_adv_set_flat_mbuf(uint8_t type, int data_len, const void *data,
                         uint8_t *dst, uint8_t *dst_len, uint8_t max_len,
                         struct os_mbuf *om)
{
   220ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   220ce:	b082      	sub	sp, #8
   220d0:	460c      	mov	r4, r1
   220d2:	4615      	mov	r5, r2
   220d4:	4699      	mov	r9, r3
   220d6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   220d8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    int rc;

    BLE_HS_DBG_ASSERT(data_len > 0);

    rc = ble_hs_adv_set_hdr(type, data_len, max_len, dst, dst_len, om);
   220da:	fa5f fa81 	uxtb.w	sl, r1
   220de:	9601      	str	r6, [sp, #4]
   220e0:	9700      	str	r7, [sp, #0]
   220e2:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   220e6:	4651      	mov	r1, sl
   220e8:	f7ff ffbe 	bl	22068 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   220ec:	4680      	mov	r8, r0
   220ee:	b930      	cbnz	r0, 220fe <ble_hs_adv_set_flat_mbuf+0x34>
        return rc;
    }

    if (om) {
   220f0:	b14e      	cbz	r6, 22106 <ble_hs_adv_set_flat_mbuf+0x3c>
        return os_mbuf_append(om, data, data_len);
   220f2:	b2a2      	uxth	r2, r4
   220f4:	4629      	mov	r1, r5
   220f6:	4630      	mov	r0, r6
   220f8:	f7f3 fad5 	bl	156a6 <os_mbuf_append>
   220fc:	4680      	mov	r8, r0

    memcpy(dst + *dst_len, data, data_len);
    *dst_len += data_len;

    return 0;
}
   220fe:	4640      	mov	r0, r8
   22100:	b002      	add	sp, #8
   22102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    memcpy(dst + *dst_len, data, data_len);
   22106:	7838      	ldrb	r0, [r7, #0]
   22108:	4622      	mov	r2, r4
   2210a:	4629      	mov	r1, r5
   2210c:	4448      	add	r0, r9
   2210e:	f7f4 fce1 	bl	16ad4 <memcpy>
    *dst_len += data_len;
   22112:	7839      	ldrb	r1, [r7, #0]
   22114:	4451      	add	r1, sl
   22116:	7039      	strb	r1, [r7, #0]
    return 0;
   22118:	e7f1      	b.n	220fe <ble_hs_adv_set_flat_mbuf+0x34>

0002211a <ble_hs_adv_set_array_uuid16>:
static int
ble_hs_adv_set_array_uuid16(uint8_t type, uint8_t num_elems,
                            const ble_uuid16_t *elems, uint8_t *dst,
                            uint8_t *dst_len, uint8_t max_len,
                            struct os_mbuf *om)
{
   2211a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2211e:	b082      	sub	sp, #8
   22120:	460e      	mov	r6, r1
   22122:	4617      	mov	r7, r2
   22124:	4699      	mov	r9, r3
   22126:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   2212a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    int rc;
    int i;

    rc = ble_hs_adv_set_hdr(type, num_elems * 2, max_len, dst,
   2212c:	0049      	lsls	r1, r1, #1
   2212e:	9501      	str	r5, [sp, #4]
   22130:	f8cd 8000 	str.w	r8, [sp]
   22134:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   22138:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   2213c:	f7ff ff94 	bl	22068 <ble_hs_adv_set_hdr>
                            dst_len, om);
    if (rc != 0) {
   22140:	4682      	mov	sl, r0
   22142:	b9d0      	cbnz	r0, 2217a <ble_hs_adv_set_array_uuid16+0x60>
        return rc;
    }

    for (i = 0; i < num_elems; i++) {
   22144:	4604      	mov	r4, r0
   22146:	e00c      	b.n	22162 <ble_hs_adv_set_array_uuid16+0x48>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
            if (rc) {
                return rc;
            }
        } else {
            ble_uuid_flat(&elems[i].u, dst + *dst_len);
   22148:	f898 1000 	ldrb.w	r1, [r8]
   2214c:	4449      	add	r1, r9
   2214e:	eb07 0084 	add.w	r0, r7, r4, lsl #2
   22152:	f004 fc33 	bl	269bc <ble_uuid_flat>
            *dst_len += 2;
   22156:	f898 3000 	ldrb.w	r3, [r8]
   2215a:	3302      	adds	r3, #2
   2215c:	f888 3000 	strb.w	r3, [r8]
    for (i = 0; i < num_elems; i++) {
   22160:	3401      	adds	r4, #1
   22162:	42a6      	cmp	r6, r4
   22164:	dd09      	ble.n	2217a <ble_hs_adv_set_array_uuid16+0x60>
        if (om) {
   22166:	2d00      	cmp	r5, #0
   22168:	d0ee      	beq.n	22148 <ble_hs_adv_set_array_uuid16+0x2e>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
   2216a:	4629      	mov	r1, r5
   2216c:	eb07 0084 	add.w	r0, r7, r4, lsl #2
   22170:	f004 fc53 	bl	26a1a <ble_uuid_to_mbuf>
            if (rc) {
   22174:	2800      	cmp	r0, #0
   22176:	d0f3      	beq.n	22160 <ble_hs_adv_set_array_uuid16+0x46>
                return rc;
   22178:	4682      	mov	sl, r0
        }
    }

    return 0;
}
   2217a:	4650      	mov	r0, sl
   2217c:	b002      	add	sp, #8
   2217e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00022182 <ble_hs_adv_set_array_uuid128>:
static int
ble_hs_adv_set_array_uuid128(uint8_t type, uint8_t num_elems,
                             const ble_uuid128_t *elems, uint8_t *dst,
                             uint8_t *dst_len, uint8_t max_len,
                             struct os_mbuf *om)
{
   22182:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22186:	b082      	sub	sp, #8
   22188:	460e      	mov	r6, r1
   2218a:	4617      	mov	r7, r2
   2218c:	4699      	mov	r9, r3
   2218e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   22192:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    int rc;
    int i;

    rc = ble_hs_adv_set_hdr(type, num_elems * 16, max_len, dst,
   22194:	0109      	lsls	r1, r1, #4
   22196:	9501      	str	r5, [sp, #4]
   22198:	f8cd 8000 	str.w	r8, [sp]
   2219c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   221a0:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
   221a4:	f7ff ff60 	bl	22068 <ble_hs_adv_set_hdr>
                            dst_len, om);
    if (rc != 0) {
   221a8:	4682      	mov	sl, r0
   221aa:	b9e0      	cbnz	r0, 221e6 <ble_hs_adv_set_array_uuid128+0x64>
        return rc;
    }

    for (i = 0; i < num_elems; i++) {
   221ac:	4604      	mov	r4, r0
   221ae:	e00d      	b.n	221cc <ble_hs_adv_set_array_uuid128+0x4a>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
            if (rc) {
                return rc;
            }
        } else {
            ble_uuid_flat(&elems[i].u, dst + *dst_len);
   221b0:	eb04 1004 	add.w	r0, r4, r4, lsl #4
   221b4:	f898 1000 	ldrb.w	r1, [r8]
   221b8:	4449      	add	r1, r9
   221ba:	4438      	add	r0, r7
   221bc:	f004 fbfe 	bl	269bc <ble_uuid_flat>
            *dst_len += 16;
   221c0:	f898 3000 	ldrb.w	r3, [r8]
   221c4:	3310      	adds	r3, #16
   221c6:	f888 3000 	strb.w	r3, [r8]
    for (i = 0; i < num_elems; i++) {
   221ca:	3401      	adds	r4, #1
   221cc:	42a6      	cmp	r6, r4
   221ce:	dd0a      	ble.n	221e6 <ble_hs_adv_set_array_uuid128+0x64>
        if (om) {
   221d0:	2d00      	cmp	r5, #0
   221d2:	d0ed      	beq.n	221b0 <ble_hs_adv_set_array_uuid128+0x2e>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
   221d4:	eb04 1004 	add.w	r0, r4, r4, lsl #4
   221d8:	4629      	mov	r1, r5
   221da:	4438      	add	r0, r7
   221dc:	f004 fc1d 	bl	26a1a <ble_uuid_to_mbuf>
            if (rc) {
   221e0:	2800      	cmp	r0, #0
   221e2:	d0f2      	beq.n	221ca <ble_hs_adv_set_array_uuid128+0x48>
                return rc;
   221e4:	4682      	mov	sl, r0
        }
    }

    return 0;
}
   221e6:	4650      	mov	r0, sl
   221e8:	b002      	add	sp, #8
   221ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000221ee <ble_hs_adv_set_array_uuid32>:
{
   221ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   221f2:	b084      	sub	sp, #16
   221f4:	460e      	mov	r6, r1
   221f6:	4617      	mov	r7, r2
   221f8:	4699      	mov	r9, r3
   221fa:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   221fe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    rc = ble_hs_adv_set_hdr(type, num_elems * 4, max_len, dst,
   22200:	0089      	lsls	r1, r1, #2
   22202:	9501      	str	r5, [sp, #4]
   22204:	f8cd 8000 	str.w	r8, [sp]
   22208:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   2220c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   22210:	f7ff ff2a 	bl	22068 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   22214:	4682      	mov	sl, r0
   22216:	b9f8      	cbnz	r0, 22258 <ble_hs_adv_set_array_uuid32+0x6a>
    for (i = 0; i < num_elems; i++) {
   22218:	4604      	mov	r4, r0
   2221a:	e00d      	b.n	22238 <ble_hs_adv_set_array_uuid32+0x4a>
            put_le32(dst + *dst_len, elems[i].value);
   2221c:	f898 0000 	ldrb.w	r0, [r8]
   22220:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   22224:	6859      	ldr	r1, [r3, #4]
   22226:	4448      	add	r0, r9
   22228:	f00b f93a 	bl	2d4a0 <put_le32>
            *dst_len += 4;
   2222c:	f898 3000 	ldrb.w	r3, [r8]
   22230:	3304      	adds	r3, #4
   22232:	f888 3000 	strb.w	r3, [r8]
    for (i = 0; i < num_elems; i++) {
   22236:	3401      	adds	r4, #1
   22238:	42a6      	cmp	r6, r4
   2223a:	dd0d      	ble.n	22258 <ble_hs_adv_set_array_uuid32+0x6a>
        if (om) {
   2223c:	2d00      	cmp	r5, #0
   2223e:	d0ed      	beq.n	2221c <ble_hs_adv_set_array_uuid32+0x2e>
            uuid_le = htole32(elems[i].value);
   22240:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   22244:	685b      	ldr	r3, [r3, #4]
   22246:	9303      	str	r3, [sp, #12]
            rc = os_mbuf_append(om, &uuid_le, sizeof(uuid_le));
   22248:	2204      	movs	r2, #4
   2224a:	a903      	add	r1, sp, #12
   2224c:	4628      	mov	r0, r5
   2224e:	f7f3 fa2a 	bl	156a6 <os_mbuf_append>
            if (rc) {
   22252:	2800      	cmp	r0, #0
   22254:	d0ef      	beq.n	22236 <ble_hs_adv_set_array_uuid32+0x48>
                return rc;
   22256:	4682      	mov	sl, r0
}
   22258:	4650      	mov	r0, sl
   2225a:	b004      	add	sp, #16
   2225c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00022260 <ble_hs_adv_set_array16>:

static int
ble_hs_adv_set_array16(uint8_t type, uint8_t num_elems, const uint16_t *elems,
                       uint8_t *dst, uint8_t *dst_len, uint8_t max_len,
                       struct os_mbuf *om)
{
   22260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22264:	b084      	sub	sp, #16
   22266:	460e      	mov	r6, r1
   22268:	4617      	mov	r7, r2
   2226a:	4699      	mov	r9, r3
   2226c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   22270:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    uint16_t tmp;
    int rc;
    int i;

    rc = ble_hs_adv_set_hdr(type, num_elems * sizeof *elems, max_len, dst,
   22272:	0049      	lsls	r1, r1, #1
   22274:	9501      	str	r5, [sp, #4]
   22276:	f8cd 8000 	str.w	r8, [sp]
   2227a:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   2227e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   22282:	f7ff fef1 	bl	22068 <ble_hs_adv_set_hdr>
                            dst_len, om);
    if (rc != 0) {
   22286:	4682      	mov	sl, r0
   22288:	b9f8      	cbnz	r0, 222ca <ble_hs_adv_set_array16+0x6a>
        return rc;
    }

    for (i = 0; i < num_elems; i++) {
   2228a:	4604      	mov	r4, r0
   2228c:	e00c      	b.n	222a8 <ble_hs_adv_set_array16+0x48>
            rc = os_mbuf_append(om, &tmp, sizeof(tmp));
            if (rc) {
                return rc;
            }
        } else {
            put_le16(dst + *dst_len, elems[i]);
   2228e:	f898 0000 	ldrb.w	r0, [r8]
   22292:	f837 1014 	ldrh.w	r1, [r7, r4, lsl #1]
   22296:	4448      	add	r0, r9
   22298:	f00b f8fe 	bl	2d498 <put_le16>
            *dst_len += sizeof elems[i];
   2229c:	f898 3000 	ldrb.w	r3, [r8]
   222a0:	3302      	adds	r3, #2
   222a2:	f888 3000 	strb.w	r3, [r8]
    for (i = 0; i < num_elems; i++) {
   222a6:	3401      	adds	r4, #1
   222a8:	42a6      	cmp	r6, r4
   222aa:	dd0e      	ble.n	222ca <ble_hs_adv_set_array16+0x6a>
        if (om) {
   222ac:	2d00      	cmp	r5, #0
   222ae:	d0ee      	beq.n	2228e <ble_hs_adv_set_array16+0x2e>
            tmp = htole16(elems[i]);
   222b0:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
   222b4:	f8ad 300e 	strh.w	r3, [sp, #14]
            rc = os_mbuf_append(om, &tmp, sizeof(tmp));
   222b8:	2202      	movs	r2, #2
   222ba:	f10d 010e 	add.w	r1, sp, #14
   222be:	4628      	mov	r0, r5
   222c0:	f7f3 f9f1 	bl	156a6 <os_mbuf_append>
            if (rc) {
   222c4:	2800      	cmp	r0, #0
   222c6:	d0ee      	beq.n	222a6 <ble_hs_adv_set_array16+0x46>
                return rc;
   222c8:	4682      	mov	sl, r0
        }
    }

    return 0;
}
   222ca:	4650      	mov	r0, sl
   222cc:	b004      	add	sp, #16
   222ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000222d2 <adv_set_fields>:

static int
adv_set_fields(const struct ble_hs_adv_fields *adv_fields,
                      uint8_t *dst, uint8_t *dst_len, uint8_t max_len,
                      struct os_mbuf *om)
{
   222d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   222d6:	b086      	sub	sp, #24
   222d8:	4604      	mov	r4, r0
   222da:	460d      	mov	r5, r1
   222dc:	4690      	mov	r8, r2
   222de:	461e      	mov	r6, r3
   222e0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    uint8_t type;
    int8_t tx_pwr_lvl;
    uint8_t dst_len_local;
    int rc;

    dst_len_local = 0;
   222e2:	2300      	movs	r3, #0
   222e4:	f88d 3016 	strb.w	r3, [sp, #22]
     * 2. Explicitly specify the value (flags != 0).
     *
     * Note: The CSS prohibits advertising a flags value of 0, so this method
     * of specifying option 1 vs. 2 is sound.
     */
    if (adv_fields->flags != 0) {
   222e8:	7803      	ldrb	r3, [r0, #0]
   222ea:	2b00      	cmp	r3, #0
   222ec:	f040 80c0 	bne.w	22470 <adv_set_fields+0x19e>
            return rc;
        }
    }

    /*** 0x02,0x03 - 16-bit service class UUIDs. */
    if (adv_fields->uuids16 != NULL && adv_fields->num_uuids16) {
   222f0:	6862      	ldr	r2, [r4, #4]
   222f2:	b19a      	cbz	r2, 2231c <adv_set_fields+0x4a>
   222f4:	7a21      	ldrb	r1, [r4, #8]
   222f6:	b189      	cbz	r1, 2231c <adv_set_fields+0x4a>
        if (adv_fields->uuids16_is_complete) {
   222f8:	7a63      	ldrb	r3, [r4, #9]
   222fa:	f013 0f01 	tst.w	r3, #1
   222fe:	f000 80c7 	beq.w	22490 <adv_set_fields+0x1be>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS16;
   22302:	2003      	movs	r0, #3
        } else {
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS16;
        }

        rc = ble_hs_adv_set_array_uuid16(type, adv_fields->num_uuids16,
   22304:	9702      	str	r7, [sp, #8]
   22306:	9601      	str	r6, [sp, #4]
   22308:	f10d 0316 	add.w	r3, sp, #22
   2230c:	9300      	str	r3, [sp, #0]
   2230e:	462b      	mov	r3, r5
   22310:	f7ff ff03 	bl	2211a <ble_hs_adv_set_array_uuid16>
                                         adv_fields->uuids16, dst, &dst_len_local,
                                         max_len, om);
        if (rc != 0) {
   22314:	4603      	mov	r3, r0
   22316:	2800      	cmp	r0, #0
   22318:	f040 80a6 	bne.w	22468 <adv_set_fields+0x196>
            return rc;
        }
    }

    /*** 0x04,0x05 - 32-bit service class UUIDs. */
    if (adv_fields->uuids32 != NULL && adv_fields->num_uuids32) {
   2231c:	68e2      	ldr	r2, [r4, #12]
   2231e:	b19a      	cbz	r2, 22348 <adv_set_fields+0x76>
   22320:	7c21      	ldrb	r1, [r4, #16]
   22322:	b189      	cbz	r1, 22348 <adv_set_fields+0x76>
        if (adv_fields->uuids32_is_complete) {
   22324:	7c63      	ldrb	r3, [r4, #17]
   22326:	f013 0f01 	tst.w	r3, #1
   2232a:	f000 80b3 	beq.w	22494 <adv_set_fields+0x1c2>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS32;
   2232e:	2005      	movs	r0, #5
        } else {
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS32;
        }

        rc = ble_hs_adv_set_array_uuid32(type, adv_fields->num_uuids32,
   22330:	9702      	str	r7, [sp, #8]
   22332:	9601      	str	r6, [sp, #4]
   22334:	f10d 0316 	add.w	r3, sp, #22
   22338:	9300      	str	r3, [sp, #0]
   2233a:	462b      	mov	r3, r5
   2233c:	f7ff ff57 	bl	221ee <ble_hs_adv_set_array_uuid32>
                                         adv_fields->uuids32, dst, &dst_len_local,
                                         max_len, om);
        if (rc != 0) {
   22340:	4603      	mov	r3, r0
   22342:	2800      	cmp	r0, #0
   22344:	f040 8090 	bne.w	22468 <adv_set_fields+0x196>
            return rc;
        }
    }

    /*** 0x06,0x07 - 128-bit service class UUIDs. */
    if (adv_fields->uuids128 != NULL && adv_fields->num_uuids128 > 0) {
   22348:	6962      	ldr	r2, [r4, #20]
   2234a:	b192      	cbz	r2, 22372 <adv_set_fields+0xa0>
   2234c:	7e21      	ldrb	r1, [r4, #24]
   2234e:	b181      	cbz	r1, 22372 <adv_set_fields+0xa0>
        if (adv_fields->uuids128_is_complete) {
   22350:	7e63      	ldrb	r3, [r4, #25]
   22352:	f013 0f01 	tst.w	r3, #1
   22356:	f000 809f 	beq.w	22498 <adv_set_fields+0x1c6>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS128;
   2235a:	2007      	movs	r0, #7
        } else {
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS128;
        }

        rc = ble_hs_adv_set_array_uuid128(type, adv_fields->num_uuids128,
   2235c:	9702      	str	r7, [sp, #8]
   2235e:	9601      	str	r6, [sp, #4]
   22360:	f10d 0316 	add.w	r3, sp, #22
   22364:	9300      	str	r3, [sp, #0]
   22366:	462b      	mov	r3, r5
   22368:	f7ff ff0b 	bl	22182 <ble_hs_adv_set_array_uuid128>
                                          adv_fields->uuids128, dst, &dst_len_local,
                                          max_len, om);
        if (rc != 0) {
   2236c:	4603      	mov	r3, r0
   2236e:	2800      	cmp	r0, #0
   22370:	d17a      	bne.n	22468 <adv_set_fields+0x196>
            return rc;
        }
    }

    /*** 0x08,0x09 - Local name. */
    if (adv_fields->name != NULL && adv_fields->name_len > 0) {
   22372:	69e2      	ldr	r2, [r4, #28]
   22374:	b1a2      	cbz	r2, 223a0 <adv_set_fields+0xce>
   22376:	f894 1020 	ldrb.w	r1, [r4, #32]
   2237a:	b189      	cbz	r1, 223a0 <adv_set_fields+0xce>
        if (adv_fields->name_is_complete) {
   2237c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   22380:	f013 0f01 	tst.w	r3, #1
   22384:	f000 808a 	beq.w	2249c <adv_set_fields+0x1ca>
            type = BLE_HS_ADV_TYPE_COMP_NAME;
   22388:	2009      	movs	r0, #9
        } else {
            type = BLE_HS_ADV_TYPE_INCOMP_NAME;
        }

        rc = ble_hs_adv_set_flat_mbuf(type, adv_fields->name_len,
   2238a:	9702      	str	r7, [sp, #8]
   2238c:	9601      	str	r6, [sp, #4]
   2238e:	f10d 0316 	add.w	r3, sp, #22
   22392:	9300      	str	r3, [sp, #0]
   22394:	462b      	mov	r3, r5
   22396:	f7ff fe98 	bl	220ca <ble_hs_adv_set_flat_mbuf>
                                      adv_fields->name, dst, &dst_len_local, max_len,
                                      om);
        if (rc != 0) {
   2239a:	4603      	mov	r3, r0
   2239c:	2800      	cmp	r0, #0
   2239e:	d163      	bne.n	22468 <adv_set_fields+0x196>
            return rc;
        }
    }

    /*** 0x0a - Tx power level. */
    if (adv_fields->tx_pwr_lvl_is_present) {
   223a0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   223a4:	f013 0f01 	tst.w	r3, #1
   223a8:	d015      	beq.n	223d6 <adv_set_fields+0x104>
        /* Read the power level from the controller if requested; otherwise use
         * the explicitly specified value.
         */
        if (adv_fields->tx_pwr_lvl == BLE_HS_ADV_TX_PWR_LVL_AUTO) {
   223aa:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
   223ae:	f113 0f80 	cmn.w	r3, #128	; 0x80
   223b2:	d075      	beq.n	224a0 <adv_set_fields+0x1ce>
            rc = ble_hs_hci_util_read_adv_tx_pwr(&tx_pwr_lvl);
            if (rc != 0) {
                return rc;
            }
        } else {
            tx_pwr_lvl = adv_fields->tx_pwr_lvl;
   223b4:	f88d 3017 	strb.w	r3, [sp, #23]
        }

        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_TX_PWR_LVL, 1,
   223b8:	9702      	str	r7, [sp, #8]
   223ba:	9601      	str	r6, [sp, #4]
   223bc:	f10d 0316 	add.w	r3, sp, #22
   223c0:	9300      	str	r3, [sp, #0]
   223c2:	462b      	mov	r3, r5
   223c4:	f10d 0217 	add.w	r2, sp, #23
   223c8:	2101      	movs	r1, #1
   223ca:	200a      	movs	r0, #10
   223cc:	f7ff fe7d 	bl	220ca <ble_hs_adv_set_flat_mbuf>
                                      &tx_pwr_lvl, dst, &dst_len_local, max_len, om);
        if (rc != 0) {
   223d0:	4603      	mov	r3, r0
   223d2:	2800      	cmp	r0, #0
   223d4:	d148      	bne.n	22468 <adv_set_fields+0x196>
            return rc;
        }
    }

    /*** 0x12 - Slave connection interval range. */
    if (adv_fields->slave_itvl_range != NULL) {
   223d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   223d8:	b162      	cbz	r2, 223f4 <adv_set_fields+0x122>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SLAVE_ITVL_RANGE,
   223da:	9702      	str	r7, [sp, #8]
   223dc:	9601      	str	r6, [sp, #4]
   223de:	f10d 0316 	add.w	r3, sp, #22
   223e2:	9300      	str	r3, [sp, #0]
   223e4:	462b      	mov	r3, r5
   223e6:	2104      	movs	r1, #4
   223e8:	2012      	movs	r0, #18
   223ea:	f7ff fe6e 	bl	220ca <ble_hs_adv_set_flat_mbuf>
                                      BLE_HS_ADV_SLAVE_ITVL_RANGE_LEN,
                                      adv_fields->slave_itvl_range, dst,
                                      &dst_len_local, max_len, om);
        if (rc != 0) {
   223ee:	4603      	mov	r3, r0
   223f0:	2800      	cmp	r0, #0
   223f2:	d139      	bne.n	22468 <adv_set_fields+0x196>
            return rc;
        }
    }

    /*** 0x16 - Service data - 16-bit UUID. */
    if (adv_fields->svc_data_uuid16 != NULL && adv_fields->svc_data_uuid16_len) {
   223f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   223f6:	b11a      	cbz	r2, 22400 <adv_set_fields+0x12e>
   223f8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   223fc:	2900      	cmp	r1, #0
   223fe:	d157      	bne.n	224b0 <adv_set_fields+0x1de>
            return rc;
        }
    }

    /*** 0x17 - Public target address. */
    if (adv_fields->public_tgt_addr != NULL &&
   22400:	6b22      	ldr	r2, [r4, #48]	; 0x30
   22402:	b11a      	cbz	r2, 2240c <adv_set_fields+0x13a>
        adv_fields->num_public_tgt_addrs != 0) {
   22404:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    if (adv_fields->public_tgt_addr != NULL &&
   22408:	2900      	cmp	r1, #0
   2240a:	d15e      	bne.n	224ca <adv_set_fields+0x1f8>
            return rc;
        }
    }

    /*** 0x19 - Appearance. */
    if (adv_fields->appearance_is_present) {
   2240c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   22410:	f013 0f01 	tst.w	r3, #1
   22414:	d169      	bne.n	224ea <adv_set_fields+0x218>
            return rc;
        }
    }

    /*** 0x1a - Advertising interval. */
    if (adv_fields->adv_itvl_is_present) {
   22416:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   2241a:	f013 0f01 	tst.w	r3, #1
   2241e:	d174      	bne.n	2250a <adv_set_fields+0x238>
            return rc;
        }
    }

    /*** 0x20 - Service data - 32-bit UUID. */
    if (adv_fields->svc_data_uuid32 != NULL && adv_fields->svc_data_uuid32_len) {
   22420:	6c22      	ldr	r2, [r4, #64]	; 0x40
   22422:	b11a      	cbz	r2, 2242c <adv_set_fields+0x15a>
   22424:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
   22428:	2900      	cmp	r1, #0
   2242a:	d17f      	bne.n	2252c <adv_set_fields+0x25a>
            return rc;
        }
    }

    /*** 0x21 - Service data - 128-bit UUID. */
    if (adv_fields->svc_data_uuid128 != NULL && adv_fields->svc_data_uuid128_len) {
   2242c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2242e:	b122      	cbz	r2, 2243a <adv_set_fields+0x168>
   22430:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
   22434:	2900      	cmp	r1, #0
   22436:	f040 8087 	bne.w	22548 <adv_set_fields+0x276>
            return rc;
        }
    }

    /*** 0x24 - URI. */
    if (adv_fields->uri != NULL && adv_fields->uri_len) {
   2243a:	6d22      	ldr	r2, [r4, #80]	; 0x50
   2243c:	b122      	cbz	r2, 22448 <adv_set_fields+0x176>
   2243e:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
   22442:	2900      	cmp	r1, #0
   22444:	f040 808e 	bne.w	22564 <adv_set_fields+0x292>
            return rc;
        }
    }

    /*** 0xff - Manufacturer specific data. */
    if ((adv_fields->mfg_data != NULL) && (adv_fields->mfg_data_len >= 2)) {
   22448:	6da2      	ldr	r2, [r4, #88]	; 0x58
   2244a:	b122      	cbz	r2, 22456 <adv_set_fields+0x184>
   2244c:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
   22450:	2901      	cmp	r1, #1
   22452:	f200 8095 	bhi.w	22580 <adv_set_fields+0x2ae>
        if (rc != 0) {
            return rc;
        }
    }

    if (dst_len) {
   22456:	f1b8 0f00 	cmp.w	r8, #0
   2245a:	f000 809f 	beq.w	2259c <adv_set_fields+0x2ca>
        *dst_len = dst_len_local;
   2245e:	f89d 3016 	ldrb.w	r3, [sp, #22]
   22462:	f888 3000 	strb.w	r3, [r8]
    }

    return 0;
   22466:	2300      	movs	r3, #0
}
   22468:	4618      	mov	r0, r3
   2246a:	b006      	add	sp, #24
   2246c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_FLAGS, 1,
   22470:	9702      	str	r7, [sp, #8]
   22472:	9601      	str	r6, [sp, #4]
   22474:	f10d 0316 	add.w	r3, sp, #22
   22478:	9300      	str	r3, [sp, #0]
   2247a:	460b      	mov	r3, r1
   2247c:	4602      	mov	r2, r0
   2247e:	2101      	movs	r1, #1
   22480:	4608      	mov	r0, r1
   22482:	f7ff fe22 	bl	220ca <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   22486:	4603      	mov	r3, r0
   22488:	2800      	cmp	r0, #0
   2248a:	f43f af31 	beq.w	222f0 <adv_set_fields+0x1e>
   2248e:	e7eb      	b.n	22468 <adv_set_fields+0x196>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS16;
   22490:	2002      	movs	r0, #2
   22492:	e737      	b.n	22304 <adv_set_fields+0x32>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS32;
   22494:	2004      	movs	r0, #4
   22496:	e74b      	b.n	22330 <adv_set_fields+0x5e>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS128;
   22498:	2006      	movs	r0, #6
   2249a:	e75f      	b.n	2235c <adv_set_fields+0x8a>
            type = BLE_HS_ADV_TYPE_INCOMP_NAME;
   2249c:	2008      	movs	r0, #8
   2249e:	e774      	b.n	2238a <adv_set_fields+0xb8>
            rc = ble_hs_hci_util_read_adv_tx_pwr(&tx_pwr_lvl);
   224a0:	f10d 0017 	add.w	r0, sp, #23
   224a4:	f001 f888 	bl	235b8 <ble_hs_hci_util_read_adv_tx_pwr>
            if (rc != 0) {
   224a8:	4603      	mov	r3, r0
   224aa:	2800      	cmp	r0, #0
   224ac:	d084      	beq.n	223b8 <adv_set_fields+0xe6>
   224ae:	e7db      	b.n	22468 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID16,
   224b0:	9702      	str	r7, [sp, #8]
   224b2:	9601      	str	r6, [sp, #4]
   224b4:	f10d 0316 	add.w	r3, sp, #22
   224b8:	9300      	str	r3, [sp, #0]
   224ba:	462b      	mov	r3, r5
   224bc:	2016      	movs	r0, #22
   224be:	f7ff fe04 	bl	220ca <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   224c2:	4603      	mov	r3, r0
   224c4:	2800      	cmp	r0, #0
   224c6:	d09b      	beq.n	22400 <adv_set_fields+0x12e>
   224c8:	e7ce      	b.n	22468 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_PUBLIC_TGT_ADDR,
   224ca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   224ce:	9702      	str	r7, [sp, #8]
   224d0:	9601      	str	r6, [sp, #4]
   224d2:	f10d 0316 	add.w	r3, sp, #22
   224d6:	9300      	str	r3, [sp, #0]
   224d8:	462b      	mov	r3, r5
   224da:	0049      	lsls	r1, r1, #1
   224dc:	2017      	movs	r0, #23
   224de:	f7ff fdf4 	bl	220ca <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   224e2:	4603      	mov	r3, r0
   224e4:	2800      	cmp	r0, #0
   224e6:	d091      	beq.n	2240c <adv_set_fields+0x13a>
   224e8:	e7be      	b.n	22468 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_APPEARANCE,
   224ea:	9702      	str	r7, [sp, #8]
   224ec:	9601      	str	r6, [sp, #4]
   224ee:	f10d 0316 	add.w	r3, sp, #22
   224f2:	9300      	str	r3, [sp, #0]
   224f4:	462b      	mov	r3, r5
   224f6:	f104 0236 	add.w	r2, r4, #54	; 0x36
   224fa:	2102      	movs	r1, #2
   224fc:	2019      	movs	r0, #25
   224fe:	f7ff fde4 	bl	220ca <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   22502:	4603      	mov	r3, r0
   22504:	2800      	cmp	r0, #0
   22506:	d086      	beq.n	22416 <adv_set_fields+0x144>
   22508:	e7ae      	b.n	22468 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_array16(BLE_HS_ADV_TYPE_ADV_ITVL, 1,
   2250a:	9702      	str	r7, [sp, #8]
   2250c:	9601      	str	r6, [sp, #4]
   2250e:	f10d 0316 	add.w	r3, sp, #22
   22512:	9300      	str	r3, [sp, #0]
   22514:	462b      	mov	r3, r5
   22516:	f104 023a 	add.w	r2, r4, #58	; 0x3a
   2251a:	2101      	movs	r1, #1
   2251c:	201a      	movs	r0, #26
   2251e:	f7ff fe9f 	bl	22260 <ble_hs_adv_set_array16>
        if (rc != 0) {
   22522:	4603      	mov	r3, r0
   22524:	2800      	cmp	r0, #0
   22526:	f43f af7b 	beq.w	22420 <adv_set_fields+0x14e>
   2252a:	e79d      	b.n	22468 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID32,
   2252c:	9702      	str	r7, [sp, #8]
   2252e:	9601      	str	r6, [sp, #4]
   22530:	f10d 0316 	add.w	r3, sp, #22
   22534:	9300      	str	r3, [sp, #0]
   22536:	462b      	mov	r3, r5
   22538:	2020      	movs	r0, #32
   2253a:	f7ff fdc6 	bl	220ca <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   2253e:	4603      	mov	r3, r0
   22540:	2800      	cmp	r0, #0
   22542:	f43f af73 	beq.w	2242c <adv_set_fields+0x15a>
   22546:	e78f      	b.n	22468 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID128,
   22548:	9702      	str	r7, [sp, #8]
   2254a:	9601      	str	r6, [sp, #4]
   2254c:	f10d 0316 	add.w	r3, sp, #22
   22550:	9300      	str	r3, [sp, #0]
   22552:	462b      	mov	r3, r5
   22554:	2021      	movs	r0, #33	; 0x21
   22556:	f7ff fdb8 	bl	220ca <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   2255a:	4603      	mov	r3, r0
   2255c:	2800      	cmp	r0, #0
   2255e:	f43f af6c 	beq.w	2243a <adv_set_fields+0x168>
   22562:	e781      	b.n	22468 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_URI, adv_fields->uri_len,
   22564:	9702      	str	r7, [sp, #8]
   22566:	9601      	str	r6, [sp, #4]
   22568:	f10d 0316 	add.w	r3, sp, #22
   2256c:	9300      	str	r3, [sp, #0]
   2256e:	462b      	mov	r3, r5
   22570:	2024      	movs	r0, #36	; 0x24
   22572:	f7ff fdaa 	bl	220ca <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   22576:	4603      	mov	r3, r0
   22578:	2800      	cmp	r0, #0
   2257a:	f43f af65 	beq.w	22448 <adv_set_fields+0x176>
   2257e:	e773      	b.n	22468 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_MFG_DATA,
   22580:	9702      	str	r7, [sp, #8]
   22582:	9601      	str	r6, [sp, #4]
   22584:	f10d 0316 	add.w	r3, sp, #22
   22588:	9300      	str	r3, [sp, #0]
   2258a:	462b      	mov	r3, r5
   2258c:	20ff      	movs	r0, #255	; 0xff
   2258e:	f7ff fd9c 	bl	220ca <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   22592:	4603      	mov	r3, r0
   22594:	2800      	cmp	r0, #0
   22596:	f43f af5e 	beq.w	22456 <adv_set_fields+0x184>
   2259a:	e765      	b.n	22468 <adv_set_fields+0x196>
    return 0;
   2259c:	2300      	movs	r3, #0
   2259e:	e763      	b.n	22468 <adv_set_fields+0x196>

000225a0 <ble_hs_adv_set_fields>:
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_adv_set_fields(const struct ble_hs_adv_fields *adv_fields,
                      uint8_t *dst, uint8_t *dst_len, uint8_t max_len)
{
   225a0:	b510      	push	{r4, lr}
   225a2:	b082      	sub	sp, #8
#if !NIMBLE_BLE_ADVERTISE
    return BLE_HS_ENOTSUP;
#endif

    return adv_set_fields(adv_fields, dst, dst_len, max_len, NULL);
   225a4:	2400      	movs	r4, #0
   225a6:	9400      	str	r4, [sp, #0]
   225a8:	f7ff fe93 	bl	222d2 <adv_set_fields>
}
   225ac:	b002      	add	sp, #8
   225ae:	bd10      	pop	{r4, pc}

000225b0 <ble_hs_atomic_conn_delete>:

#include "ble_hs_priv.h"

int
ble_hs_atomic_conn_delete(uint16_t conn_handle)
{
   225b0:	b510      	push	{r4, lr}
   225b2:	4604      	mov	r4, r0
    struct ble_hs_conn *conn;

    ble_hs_lock();
   225b4:	f7ff faa6 	bl	21b04 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   225b8:	4620      	mov	r0, r4
   225ba:	f000 f8ff 	bl	227bc <ble_hs_conn_find>
    if (conn != NULL) {
   225be:	4604      	mov	r4, r0
   225c0:	b120      	cbz	r0, 225cc <ble_hs_atomic_conn_delete+0x1c>
        ble_hs_conn_remove(conn);
   225c2:	f000 f8e9 	bl	22798 <ble_hs_conn_remove>
#if MYNEWT_VAL(BLE_PERIODIC_ADV_SYNC_TRANSFER)
        if (conn->psync) {
            ble_hs_periodic_sync_free(conn->psync);
        }
#endif
        ble_hs_conn_free(conn);
   225c6:	4620      	mov	r0, r4
   225c8:	f000 f87e 	bl	226c8 <ble_hs_conn_free>

    }
    ble_hs_unlock();
   225cc:	f7ff fa9e 	bl	21b0c <ble_hs_unlock>

    return conn != NULL ? 0 : BLE_HS_ENOTCONN;
   225d0:	b10c      	cbz	r4, 225d6 <ble_hs_atomic_conn_delete+0x26>
   225d2:	2000      	movs	r0, #0
}
   225d4:	bd10      	pop	{r4, pc}
    return conn != NULL ? 0 : BLE_HS_ENOTCONN;
   225d6:	2007      	movs	r0, #7
   225d8:	e7fc      	b.n	225d4 <ble_hs_atomic_conn_delete+0x24>

000225da <ble_hs_atomic_conn_flags>:
    ble_hs_unlock();
}

int
ble_hs_atomic_conn_flags(uint16_t conn_handle, ble_hs_conn_flags_t *out_flags)
{
   225da:	b538      	push	{r3, r4, r5, lr}
   225dc:	4605      	mov	r5, r0
   225de:	460c      	mov	r4, r1
    struct ble_hs_conn *conn;
    int rc;

    ble_hs_lock();
   225e0:	f7ff fa90 	bl	21b04 <ble_hs_lock>

    conn = ble_hs_conn_find(conn_handle);
   225e4:	4628      	mov	r0, r5
   225e6:	f000 f8e9 	bl	227bc <ble_hs_conn_find>
    if (conn == NULL) {
   225ea:	b140      	cbz	r0, 225fe <ble_hs_atomic_conn_flags+0x24>
        rc = BLE_HS_ENOTCONN;
    } else {
        rc = 0;
        if (out_flags != NULL) {
   225ec:	b14c      	cbz	r4, 22602 <ble_hs_atomic_conn_flags+0x28>
            *out_flags = conn->bhc_flags;
   225ee:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   225f2:	7023      	strb	r3, [r4, #0]
        rc = 0;
   225f4:	2400      	movs	r4, #0
        }
    }

    ble_hs_unlock();
   225f6:	f7ff fa89 	bl	21b0c <ble_hs_unlock>

    return rc;
}
   225fa:	4620      	mov	r0, r4
   225fc:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTCONN;
   225fe:	2407      	movs	r4, #7
   22600:	e7f9      	b.n	225f6 <ble_hs_atomic_conn_flags+0x1c>
        rc = 0;
   22602:	2400      	movs	r4, #0
   22604:	e7f7      	b.n	225f6 <ble_hs_atomic_conn_flags+0x1c>

00022606 <ble_hs_atomic_first_conn_handle>:
    return rc;
}

uint16_t
ble_hs_atomic_first_conn_handle(void)
{
   22606:	b510      	push	{r4, lr}
    const struct ble_hs_conn *conn;
    uint16_t conn_handle;

    ble_hs_lock();
   22608:	f7ff fa7c 	bl	21b04 <ble_hs_lock>

    conn = ble_hs_conn_first();
   2260c:	f000 f908 	bl	22820 <ble_hs_conn_first>
    if (conn != NULL) {
   22610:	b120      	cbz	r0, 2261c <ble_hs_atomic_first_conn_handle+0x16>
        conn_handle = conn->bhc_handle;
   22612:	8884      	ldrh	r4, [r0, #4]
    } else {
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
    }

    ble_hs_unlock();
   22614:	f7ff fa7a 	bl	21b0c <ble_hs_unlock>

    return conn_handle;
}
   22618:	4620      	mov	r0, r4
   2261a:	bd10      	pop	{r4, pc}
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   2261c:	f64f 74ff 	movw	r4, #65535	; 0xffff
   22620:	e7f8      	b.n	22614 <ble_hs_atomic_first_conn_handle+0xe>
	...

00022624 <ble_hs_conn_can_alloc>:

static const uint8_t ble_hs_conn_null_addr[6];

int
ble_hs_conn_can_alloc(void)
{
   22624:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_CONNECT
    return 0;
#endif

    return ble_hs_conn_pool.mp_num_free >= 1 &&
   22626:	4b08      	ldr	r3, [pc, #32]	; (22648 <ble_hs_conn_can_alloc+0x24>)
   22628:	88db      	ldrh	r3, [r3, #6]
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   2262a:	b153      	cbz	r3, 22642 <ble_hs_conn_can_alloc+0x1e>
   2262c:	4b07      	ldr	r3, [pc, #28]	; (2264c <ble_hs_conn_can_alloc+0x28>)
   2262e:	88db      	ldrh	r3, [r3, #6]
    return ble_hs_conn_pool.mp_num_free >= 1 &&
   22630:	2b02      	cmp	r3, #2
   22632:	d801      	bhi.n	22638 <ble_hs_conn_can_alloc+0x14>
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   22634:	2000      	movs	r0, #0
   22636:	e005      	b.n	22644 <ble_hs_conn_can_alloc+0x20>
           ble_gatts_conn_can_alloc();
   22638:	f7fe ffd8 	bl	215ec <ble_gatts_conn_can_alloc>
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   2263c:	b110      	cbz	r0, 22644 <ble_hs_conn_can_alloc+0x20>
   2263e:	2001      	movs	r0, #1
   22640:	e000      	b.n	22644 <ble_hs_conn_can_alloc+0x20>
   22642:	2000      	movs	r0, #0
}
   22644:	bd08      	pop	{r3, pc}
   22646:	bf00      	nop
   22648:	10003dac 	.word	0x10003dac
   2264c:	10004018 	.word	0x10004018

00022650 <ble_hs_conn_chan_find_by_scid>:
    return NULL;
#endif

    struct ble_l2cap_chan *chan;

    SLIST_FOREACH(chan, &conn->bhc_channels, next) {
   22650:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   22652:	e000      	b.n	22656 <ble_hs_conn_chan_find_by_scid+0x6>
   22654:	6800      	ldr	r0, [r0, #0]
   22656:	b128      	cbz	r0, 22664 <ble_hs_conn_chan_find_by_scid+0x14>
        if (chan->scid == cid) {
   22658:	8903      	ldrh	r3, [r0, #8]
   2265a:	428b      	cmp	r3, r1
   2265c:	d001      	beq.n	22662 <ble_hs_conn_chan_find_by_scid+0x12>
            return chan;
        }
        if (chan->scid > cid) {
   2265e:	d9f9      	bls.n	22654 <ble_hs_conn_chan_find_by_scid+0x4>
            return NULL;
   22660:	2000      	movs	r0, #0
        }
    }

    return NULL;
}
   22662:	4770      	bx	lr
   22664:	4770      	bx	lr

00022666 <ble_hs_conn_chan_insert>:
    return false;
}

int
ble_hs_conn_chan_insert(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan)
{
   22666:	b470      	push	{r4, r5, r6}

    struct ble_l2cap_chan *prev;
    struct ble_l2cap_chan *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   22668:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   2266a:	4633      	mov	r3, r6
    prev = NULL;
   2266c:	2500      	movs	r5, #0
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   2266e:	e001      	b.n	22674 <ble_hs_conn_chan_insert+0xe>
        }
        if (cur->scid > chan->scid) {
            break;
        }

        prev = cur;
   22670:	461d      	mov	r5, r3
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   22672:	681b      	ldr	r3, [r3, #0]
   22674:	b123      	cbz	r3, 22680 <ble_hs_conn_chan_insert+0x1a>
        if (cur->scid == chan->scid) {
   22676:	891c      	ldrh	r4, [r3, #8]
   22678:	890a      	ldrh	r2, [r1, #8]
   2267a:	4294      	cmp	r4, r2
   2267c:	d00b      	beq.n	22696 <ble_hs_conn_chan_insert+0x30>
        if (cur->scid > chan->scid) {
   2267e:	d9f7      	bls.n	22670 <ble_hs_conn_chan_insert+0xa>
    }

    if (prev == NULL) {
   22680:	b12d      	cbz	r5, 2268e <ble_hs_conn_chan_insert+0x28>
        SLIST_INSERT_HEAD(&conn->bhc_channels, chan, next);
    } else {
        SLIST_INSERT_AFTER(prev, chan, next);
   22682:	682b      	ldr	r3, [r5, #0]
   22684:	600b      	str	r3, [r1, #0]
   22686:	6029      	str	r1, [r5, #0]
    }

    return 0;
   22688:	2000      	movs	r0, #0
}
   2268a:	bc70      	pop	{r4, r5, r6}
   2268c:	4770      	bx	lr
        SLIST_INSERT_HEAD(&conn->bhc_channels, chan, next);
   2268e:	600e      	str	r6, [r1, #0]
   22690:	62c1      	str	r1, [r0, #44]	; 0x2c
    return 0;
   22692:	2000      	movs	r0, #0
   22694:	e7f9      	b.n	2268a <ble_hs_conn_chan_insert+0x24>
            return BLE_HS_EALREADY;
   22696:	2002      	movs	r0, #2
   22698:	e7f7      	b.n	2268a <ble_hs_conn_chan_insert+0x24>

0002269a <ble_hs_conn_delete_chan>:
    return NULL;
}

void
ble_hs_conn_delete_chan(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan)
{
   2269a:	b508      	push	{r3, lr}
    if (conn->bhc_rx_chan == chan) {
   2269c:	6b03      	ldr	r3, [r0, #48]	; 0x30
   2269e:	428b      	cmp	r3, r1
   226a0:	d00b      	beq.n	226ba <ble_hs_conn_delete_chan+0x20>
        conn->bhc_rx_chan = NULL;
    }

    SLIST_REMOVE(&conn->bhc_channels, chan, ble_l2cap_chan, next);
   226a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   226a4:	428b      	cmp	r3, r1
   226a6:	d00b      	beq.n	226c0 <ble_hs_conn_delete_chan+0x26>
   226a8:	461a      	mov	r2, r3
   226aa:	681b      	ldr	r3, [r3, #0]
   226ac:	428b      	cmp	r3, r1
   226ae:	d1fb      	bne.n	226a8 <ble_hs_conn_delete_chan+0xe>
   226b0:	681b      	ldr	r3, [r3, #0]
   226b2:	6013      	str	r3, [r2, #0]
    ble_l2cap_chan_free(conn, chan);
   226b4:	f001 fcb4 	bl	24020 <ble_l2cap_chan_free>
}
   226b8:	bd08      	pop	{r3, pc}
        conn->bhc_rx_chan = NULL;
   226ba:	2300      	movs	r3, #0
   226bc:	6303      	str	r3, [r0, #48]	; 0x30
   226be:	e7f0      	b.n	226a2 <ble_hs_conn_delete_chan+0x8>
    SLIST_REMOVE(&conn->bhc_channels, chan, ble_l2cap_chan, next);
   226c0:	681b      	ldr	r3, [r3, #0]
   226c2:	62c3      	str	r3, [r0, #44]	; 0x2c
   226c4:	e7f6      	b.n	226b4 <ble_hs_conn_delete_chan+0x1a>
	...

000226c8 <ble_hs_conn_free>:

    struct ble_l2cap_chan *chan;
    struct os_mbuf_pkthdr *omp;
    int rc;

    if (conn == NULL) {
   226c8:	b300      	cbz	r0, 2270c <ble_hs_conn_free+0x44>
{
   226ca:	b510      	push	{r4, lr}
   226cc:	4604      	mov	r4, r0
        return;
    }

    ble_att_svr_prep_clear(&conn->bhc_att_svr.basc_prep_list);
   226ce:	3044      	adds	r0, #68	; 0x44
   226d0:	f7fb fc9f 	bl	1e012 <ble_att_svr_prep_clear>

    while ((chan = SLIST_FIRST(&conn->bhc_channels)) != NULL) {
   226d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   226d6:	b149      	cbz	r1, 226ec <ble_hs_conn_free+0x24>
        ble_hs_conn_delete_chan(conn, chan);
   226d8:	4620      	mov	r0, r4
   226da:	f7ff ffde 	bl	2269a <ble_hs_conn_delete_chan>
   226de:	e7f9      	b.n	226d4 <ble_hs_conn_free+0xc>
    }

    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   226e0:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   226e4:	6423      	str	r3, [r4, #64]	; 0x40
        os_mbuf_free_chain(OS_MBUF_PKTHDR_TO_MBUF(omp));
   226e6:	3810      	subs	r0, #16
   226e8:	f7f2 ffc4 	bl	15674 <os_mbuf_free_chain>
    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   226ec:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   226ee:	b120      	cbz	r0, 226fa <ble_hs_conn_free+0x32>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   226f0:	6843      	ldr	r3, [r0, #4]
   226f2:	63e3      	str	r3, [r4, #60]	; 0x3c
   226f4:	2b00      	cmp	r3, #0
   226f6:	d1f6      	bne.n	226e6 <ble_hs_conn_free+0x1e>
   226f8:	e7f2      	b.n	226e0 <ble_hs_conn_free+0x18>
    }

#if MYNEWT_VAL(BLE_HS_DEBUG)
    memset(conn, 0xff, sizeof *conn);
#endif
    rc = os_memblock_put(&ble_hs_conn_pool, conn);
   226fa:	4621      	mov	r1, r4
   226fc:	4804      	ldr	r0, [pc, #16]	; (22710 <ble_hs_conn_free+0x48>)
   226fe:	f7f3 fbbe 	bl	15e7e <os_memblock_put>
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    STATS_INC(ble_hs_stats, conn_delete);
   22702:	4a04      	ldr	r2, [pc, #16]	; (22714 <ble_hs_conn_free+0x4c>)
   22704:	6913      	ldr	r3, [r2, #16]
   22706:	3301      	adds	r3, #1
   22708:	6113      	str	r3, [r2, #16]
}
   2270a:	bd10      	pop	{r4, pc}
   2270c:	4770      	bx	lr
   2270e:	bf00      	nop
   22710:	10003dac 	.word	0x10003dac
   22714:	10003cec 	.word	0x10003cec

00022718 <ble_hs_conn_alloc>:
{
   22718:	b538      	push	{r3, r4, r5, lr}
   2271a:	4605      	mov	r5, r0
    conn = os_memblock_get(&ble_hs_conn_pool);
   2271c:	481c      	ldr	r0, [pc, #112]	; (22790 <ble_hs_conn_alloc+0x78>)
   2271e:	f7f3 fb86 	bl	15e2e <os_memblock_get>
    if (conn == NULL) {
   22722:	4604      	mov	r4, r0
   22724:	b370      	cbz	r0, 22784 <ble_hs_conn_alloc+0x6c>
    memset(conn, 0, sizeof *conn);
   22726:	2264      	movs	r2, #100	; 0x64
   22728:	2100      	movs	r1, #0
   2272a:	f7f4 f9f8 	bl	16b1e <memset>
    conn->bhc_handle = conn_handle;
   2272e:	80a5      	strh	r5, [r4, #4]
    chan = ble_att_create_chan(conn_handle);
   22730:	4628      	mov	r0, r5
   22732:	f7fa f98b 	bl	1ca4c <ble_att_create_chan>
    if (chan == NULL) {
   22736:	4601      	mov	r1, r0
   22738:	b320      	cbz	r0, 22784 <ble_hs_conn_alloc+0x6c>
    rc = ble_hs_conn_chan_insert(conn, chan);
   2273a:	4620      	mov	r0, r4
   2273c:	f7ff ff93 	bl	22666 <ble_hs_conn_chan_insert>
    if (rc != 0) {
   22740:	bb00      	cbnz	r0, 22784 <ble_hs_conn_alloc+0x6c>
    chan = ble_l2cap_sig_create_chan(conn_handle);
   22742:	4628      	mov	r0, r5
   22744:	f001 ff9a 	bl	2467c <ble_l2cap_sig_create_chan>
    if (chan == NULL) {
   22748:	4601      	mov	r1, r0
   2274a:	b1d8      	cbz	r0, 22784 <ble_hs_conn_alloc+0x6c>
    rc = ble_hs_conn_chan_insert(conn, chan);
   2274c:	4620      	mov	r0, r4
   2274e:	f7ff ff8a 	bl	22666 <ble_hs_conn_chan_insert>
    if (rc != 0) {
   22752:	b9b8      	cbnz	r0, 22784 <ble_hs_conn_alloc+0x6c>
    chan = ble_sm_create_chan(conn_handle);
   22754:	4628      	mov	r0, r5
   22756:	f003 fd0b 	bl	26170 <ble_sm_create_chan>
    if (chan == NULL) {
   2275a:	4601      	mov	r1, r0
   2275c:	b190      	cbz	r0, 22784 <ble_hs_conn_alloc+0x6c>
    rc = ble_hs_conn_chan_insert(conn, chan);
   2275e:	4620      	mov	r0, r4
   22760:	f7ff ff81 	bl	22666 <ble_hs_conn_chan_insert>
    if (rc != 0) {
   22764:	b970      	cbnz	r0, 22784 <ble_hs_conn_alloc+0x6c>
    rc = ble_gatts_conn_init(&conn->bhc_gatt_svr);
   22766:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   2276a:	f7fe ff4f 	bl	2160c <ble_gatts_conn_init>
    if (rc != 0) {
   2276e:	b948      	cbnz	r0, 22784 <ble_hs_conn_alloc+0x6c>
    STAILQ_INIT(&conn->bhc_tx_q);
   22770:	4623      	mov	r3, r4
   22772:	2200      	movs	r2, #0
   22774:	f843 2f3c 	str.w	r2, [r3, #60]!
   22778:	6423      	str	r3, [r4, #64]	; 0x40
    STATS_INC(ble_hs_stats, conn_create);
   2277a:	4a06      	ldr	r2, [pc, #24]	; (22794 <ble_hs_conn_alloc+0x7c>)
   2277c:	68d3      	ldr	r3, [r2, #12]
   2277e:	3301      	adds	r3, #1
   22780:	60d3      	str	r3, [r2, #12]
    return conn;
   22782:	e003      	b.n	2278c <ble_hs_conn_alloc+0x74>
    ble_hs_conn_free(conn);
   22784:	4620      	mov	r0, r4
   22786:	f7ff ff9f 	bl	226c8 <ble_hs_conn_free>
    return NULL;
   2278a:	2400      	movs	r4, #0
}
   2278c:	4620      	mov	r0, r4
   2278e:	bd38      	pop	{r3, r4, r5, pc}
   22790:	10003dac 	.word	0x10003dac
   22794:	10003cec 	.word	0x10003cec

00022798 <ble_hs_conn_remove>:
    return;
#endif

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    SLIST_REMOVE(&ble_hs_conns, conn, ble_hs_conn, bhc_next);
   22798:	4b07      	ldr	r3, [pc, #28]	; (227b8 <ble_hs_conn_remove+0x20>)
   2279a:	681b      	ldr	r3, [r3, #0]
   2279c:	4283      	cmp	r3, r0
   2279e:	d006      	beq.n	227ae <ble_hs_conn_remove+0x16>
   227a0:	461a      	mov	r2, r3
   227a2:	681b      	ldr	r3, [r3, #0]
   227a4:	4283      	cmp	r3, r0
   227a6:	d1fb      	bne.n	227a0 <ble_hs_conn_remove+0x8>
   227a8:	681b      	ldr	r3, [r3, #0]
   227aa:	6013      	str	r3, [r2, #0]
}
   227ac:	4770      	bx	lr
    SLIST_REMOVE(&ble_hs_conns, conn, ble_hs_conn, bhc_next);
   227ae:	681a      	ldr	r2, [r3, #0]
   227b0:	4b01      	ldr	r3, [pc, #4]	; (227b8 <ble_hs_conn_remove+0x20>)
   227b2:	601a      	str	r2, [r3, #0]
   227b4:	4770      	bx	lr
   227b6:	bf00      	nop
   227b8:	10003dc8 	.word	0x10003dc8

000227bc <ble_hs_conn_find>:

struct ble_hs_conn *
ble_hs_conn_find(uint16_t conn_handle)
{
   227bc:	4602      	mov	r2, r0

    struct ble_hs_conn *conn;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   227be:	4b04      	ldr	r3, [pc, #16]	; (227d0 <ble_hs_conn_find+0x14>)
   227c0:	6818      	ldr	r0, [r3, #0]
   227c2:	b120      	cbz	r0, 227ce <ble_hs_conn_find+0x12>
        if (conn->bhc_handle == conn_handle) {
   227c4:	8883      	ldrh	r3, [r0, #4]
   227c6:	4293      	cmp	r3, r2
   227c8:	d001      	beq.n	227ce <ble_hs_conn_find+0x12>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   227ca:	6800      	ldr	r0, [r0, #0]
   227cc:	e7f9      	b.n	227c2 <ble_hs_conn_find+0x6>
            return conn;
        }
    }

    return NULL;
}
   227ce:	4770      	bx	lr
   227d0:	10003dc8 	.word	0x10003dc8

000227d4 <ble_hs_conn_insert>:
{
   227d4:	b510      	push	{r4, lr}
   227d6:	4604      	mov	r4, r0
    BLE_HS_DBG_ASSERT_EVAL(ble_hs_conn_find(conn->bhc_handle) == NULL);
   227d8:	8880      	ldrh	r0, [r0, #4]
   227da:	f7ff ffef 	bl	227bc <ble_hs_conn_find>
    SLIST_INSERT_HEAD(&ble_hs_conns, conn, bhc_next);
   227de:	4b02      	ldr	r3, [pc, #8]	; (227e8 <ble_hs_conn_insert+0x14>)
   227e0:	681a      	ldr	r2, [r3, #0]
   227e2:	6022      	str	r2, [r4, #0]
   227e4:	601c      	str	r4, [r3, #0]
}
   227e6:	bd10      	pop	{r4, pc}
   227e8:	10003dc8 	.word	0x10003dc8

000227ec <ble_hs_conn_find_assert>:

struct ble_hs_conn *
ble_hs_conn_find_assert(uint16_t conn_handle)
{
   227ec:	b508      	push	{r3, lr}
    struct ble_hs_conn *conn;

    conn = ble_hs_conn_find(conn_handle);
   227ee:	f7ff ffe5 	bl	227bc <ble_hs_conn_find>
    BLE_HS_DBG_ASSERT(conn != NULL);

    return conn;
}
   227f2:	bd08      	pop	{r3, pc}

000227f4 <ble_hs_conn_find_by_idx>:
    return NULL;
}

struct ble_hs_conn *
ble_hs_conn_find_by_idx(int idx)
{
   227f4:	4602      	mov	r2, r0
    int i;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    i = 0;
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   227f6:	4b05      	ldr	r3, [pc, #20]	; (2280c <ble_hs_conn_find_by_idx+0x18>)
   227f8:	6818      	ldr	r0, [r3, #0]
    i = 0;
   227fa:	2300      	movs	r3, #0
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   227fc:	b120      	cbz	r0, 22808 <ble_hs_conn_find_by_idx+0x14>
        if (i == idx) {
   227fe:	4293      	cmp	r3, r2
   22800:	d002      	beq.n	22808 <ble_hs_conn_find_by_idx+0x14>
            return conn;
        }

        i++;
   22802:	3301      	adds	r3, #1
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   22804:	6800      	ldr	r0, [r0, #0]
   22806:	e7f9      	b.n	227fc <ble_hs_conn_find_by_idx+0x8>
    }

    return NULL;
}
   22808:	4770      	bx	lr
   2280a:	bf00      	nop
   2280c:	10003dc8 	.word	0x10003dc8

00022810 <ble_hs_conn_exists>:

int
ble_hs_conn_exists(uint16_t conn_handle)
{
   22810:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_CONNECT
    return 0;
#endif
    return ble_hs_conn_find(conn_handle) != NULL;
   22812:	f7ff ffd3 	bl	227bc <ble_hs_conn_find>
}
   22816:	3800      	subs	r0, #0
   22818:	bf18      	it	ne
   2281a:	2001      	movne	r0, #1
   2281c:	bd08      	pop	{r3, pc}
	...

00022820 <ble_hs_conn_first>:
    return NULL;
#endif

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());
    return SLIST_FIRST(&ble_hs_conns);
}
   22820:	4b01      	ldr	r3, [pc, #4]	; (22828 <ble_hs_conn_first+0x8>)
   22822:	6818      	ldr	r0, [r3, #0]
   22824:	4770      	bx	lr
   22826:	bf00      	nop
   22828:	10003dc8 	.word	0x10003dc8

0002282c <ble_hs_conn_addrs>:

void
ble_hs_conn_addrs(const struct ble_hs_conn *conn,
                  struct ble_hs_conn_addrs *addrs)
{
   2282c:	b530      	push	{r4, r5, lr}
   2282e:	b083      	sub	sp, #12
   22830:	4605      	mov	r5, r0
   22832:	460c      	mov	r4, r1
    const uint8_t *our_id_addr_val;
    int rc;

    /* Determine our address information. */
    addrs->our_id_addr.type =
        ble_hs_misc_own_addr_type_to_id(conn->bhc_our_addr_type);
   22834:	7980      	ldrb	r0, [r0, #6]
   22836:	f001 f8bc 	bl	239b2 <ble_hs_misc_own_addr_type_to_id>
    addrs->our_id_addr.type =
   2283a:	7020      	strb	r0, [r4, #0]
    } else {
        rc = ble_hs_id_addr(addrs->our_id_addr.type, &our_id_addr_val, NULL);
        assert(rc == 0);
    }
#else
    rc = ble_hs_id_addr(addrs->our_id_addr.type, &our_id_addr_val, NULL);
   2283c:	2200      	movs	r2, #0
   2283e:	a901      	add	r1, sp, #4
   22840:	f000 ff74 	bl	2372c <ble_hs_id_addr>
    assert(rc == 0);
   22844:	bb78      	cbnz	r0, 228a6 <ble_hs_conn_addrs+0x7a>
#endif

    memcpy(addrs->our_id_addr.val, our_id_addr_val, 6);
   22846:	9b01      	ldr	r3, [sp, #4]
   22848:	681a      	ldr	r2, [r3, #0]
   2284a:	f8c4 2001 	str.w	r2, [r4, #1]
   2284e:	889b      	ldrh	r3, [r3, #4]
   22850:	f8a4 3005 	strh.w	r3, [r4, #5]

    if (memcmp(conn->bhc_our_rpa_addr.val, ble_hs_conn_null_addr, 6) == 0) {
   22854:	2206      	movs	r2, #6
   22856:	492a      	ldr	r1, [pc, #168]	; (22900 <ble_hs_conn_addrs+0xd4>)
   22858:	f105 000f 	add.w	r0, r5, #15
   2285c:	f7f4 f916 	bl	16a8c <memcmp>
   22860:	bb58      	cbnz	r0, 228ba <ble_hs_conn_addrs+0x8e>
        addrs->our_ota_addr = addrs->our_id_addr;
   22862:	4623      	mov	r3, r4
   22864:	f853 2b0e 	ldr.w	r2, [r3], #14
   22868:	f8c4 200e 	str.w	r2, [r4, #14]
   2286c:	88a1      	ldrh	r1, [r4, #4]
   2286e:	79a2      	ldrb	r2, [r4, #6]
   22870:	8099      	strh	r1, [r3, #4]
   22872:	719a      	strb	r2, [r3, #6]
    } else {
        addrs->our_ota_addr = conn->bhc_our_rpa_addr;
    }

    /* Determine peer address information. */
    addrs->peer_id_addr = conn->bhc_peer_addr;
   22874:	462b      	mov	r3, r5
   22876:	f853 2f07 	ldr.w	r2, [r3, #7]!
   2287a:	f8c4 2007 	str.w	r2, [r4, #7]
   2287e:	8899      	ldrh	r1, [r3, #4]
   22880:	799a      	ldrb	r2, [r3, #6]
   22882:	f8a4 100b 	strh.w	r1, [r4, #11]
   22886:	7362      	strb	r2, [r4, #13]
    addrs->peer_ota_addr = conn->bhc_peer_addr;
   22888:	681a      	ldr	r2, [r3, #0]
   2288a:	f8c4 2015 	str.w	r2, [r4, #21]
   2288e:	889a      	ldrh	r2, [r3, #4]
   22890:	799b      	ldrb	r3, [r3, #6]
   22892:	f8a4 2019 	strh.w	r2, [r4, #25]
   22896:	76e3      	strb	r3, [r4, #27]
    switch (conn->bhc_peer_addr.type) {
   22898:	79eb      	ldrb	r3, [r5, #7]
   2289a:	2b02      	cmp	r3, #2
   2289c:	d017      	beq.n	228ce <ble_hs_conn_addrs+0xa2>
   2289e:	2b03      	cmp	r3, #3
   228a0:	d021      	beq.n	228e6 <ble_hs_conn_addrs+0xba>

    default:
        BLE_HS_DBG_ASSERT(0);
        break;
    }
}
   228a2:	b003      	add	sp, #12
   228a4:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
   228a6:	f7f1 fedd 	bl	14664 <hal_debugger_connected>
   228aa:	b100      	cbz	r0, 228ae <ble_hs_conn_addrs+0x82>
   228ac:	be01      	bkpt	0x0001
   228ae:	2300      	movs	r3, #0
   228b0:	461a      	mov	r2, r3
   228b2:	4619      	mov	r1, r3
   228b4:	4618      	mov	r0, r3
   228b6:	f7f2 fa75 	bl	14da4 <__assert_func>
        addrs->our_ota_addr = conn->bhc_our_rpa_addr;
   228ba:	462b      	mov	r3, r5
   228bc:	f853 2f0e 	ldr.w	r2, [r3, #14]!
   228c0:	f8c4 200e 	str.w	r2, [r4, #14]
   228c4:	889a      	ldrh	r2, [r3, #4]
   228c6:	799b      	ldrb	r3, [r3, #6]
   228c8:	8262      	strh	r2, [r4, #18]
   228ca:	7523      	strb	r3, [r4, #20]
   228cc:	e7d2      	b.n	22874 <ble_hs_conn_addrs+0x48>
        addrs->peer_id_addr.type = BLE_ADDR_PUBLIC;
   228ce:	2300      	movs	r3, #0
   228d0:	71e3      	strb	r3, [r4, #7]
        addrs->peer_ota_addr = conn->bhc_peer_rpa_addr;
   228d2:	f855 3f15 	ldr.w	r3, [r5, #21]!
   228d6:	f8c4 3015 	str.w	r3, [r4, #21]
   228da:	88aa      	ldrh	r2, [r5, #4]
   228dc:	79ab      	ldrb	r3, [r5, #6]
   228de:	f8a4 2019 	strh.w	r2, [r4, #25]
   228e2:	76e3      	strb	r3, [r4, #27]
        break;
   228e4:	e7dd      	b.n	228a2 <ble_hs_conn_addrs+0x76>
        addrs->peer_id_addr.type = BLE_ADDR_RANDOM;
   228e6:	2301      	movs	r3, #1
   228e8:	71e3      	strb	r3, [r4, #7]
        addrs->peer_ota_addr = conn->bhc_peer_rpa_addr;
   228ea:	f855 3f15 	ldr.w	r3, [r5, #21]!
   228ee:	f8c4 3015 	str.w	r3, [r4, #21]
   228f2:	88aa      	ldrh	r2, [r5, #4]
   228f4:	79ab      	ldrb	r3, [r5, #6]
   228f6:	f8a4 2019 	strh.w	r2, [r4, #25]
   228fa:	76e3      	strb	r3, [r4, #27]
}
   228fc:	e7d1      	b.n	228a2 <ble_hs_conn_addrs+0x76>
   228fe:	bf00      	nop
   22900:	00031084 	.word	0x00031084

00022904 <ble_hs_conn_find_by_addr>:
{
   22904:	b570      	push	{r4, r5, r6, lr}
   22906:	b088      	sub	sp, #32
    if (!addr) {
   22908:	4605      	mov	r5, r0
   2290a:	2800      	cmp	r0, #0
   2290c:	d033      	beq.n	22976 <ble_hs_conn_find_by_addr+0x72>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   2290e:	4b1c      	ldr	r3, [pc, #112]	; (22980 <ble_hs_conn_find_by_addr+0x7c>)
   22910:	681c      	ldr	r4, [r3, #0]
   22912:	e016      	b.n	22942 <ble_hs_conn_find_by_addr+0x3e>
        if (BLE_ADDR_IS_RPA(addr)) {
   22914:	79ab      	ldrb	r3, [r5, #6]
   22916:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2291a:	2b40      	cmp	r3, #64	; 0x40
   2291c:	d115      	bne.n	2294a <ble_hs_conn_find_by_addr+0x46>
    type_diff = a->type - b->type;
   2291e:	7d63      	ldrb	r3, [r4, #21]
    if (type_diff != 0) {
   22920:	1a18      	subs	r0, r3, r0
   22922:	d105      	bne.n	22930 <ble_hs_conn_find_by_addr+0x2c>
    return memcmp(a->val, b->val, sizeof(a->val));
   22924:	2206      	movs	r2, #6
   22926:	1c69      	adds	r1, r5, #1
   22928:	f104 0016 	add.w	r0, r4, #22
   2292c:	f7f4 f8ae 	bl	16a8c <memcmp>
            if (ble_addr_cmp(&conn->bhc_peer_rpa_addr, addr) == 0) {
   22930:	b930      	cbnz	r0, 22940 <ble_hs_conn_find_by_addr+0x3c>
   22932:	e021      	b.n	22978 <ble_hs_conn_find_by_addr+0x74>
   22934:	2206      	movs	r2, #6
   22936:	1c69      	adds	r1, r5, #1
   22938:	a803      	add	r0, sp, #12
   2293a:	f7f4 f8a7 	bl	16a8c <memcmp>
            if (ble_addr_cmp(&addrs.peer_id_addr, addr) == 0) {
   2293e:	b1d8      	cbz	r0, 22978 <ble_hs_conn_find_by_addr+0x74>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   22940:	6824      	ldr	r4, [r4, #0]
   22942:	b1cc      	cbz	r4, 22978 <ble_hs_conn_find_by_addr+0x74>
        if (BLE_ADDR_IS_RPA(addr)) {
   22944:	7828      	ldrb	r0, [r5, #0]
   22946:	2801      	cmp	r0, #1
   22948:	d0e4      	beq.n	22914 <ble_hs_conn_find_by_addr+0x10>
    type_diff = a->type - b->type;
   2294a:	79e6      	ldrb	r6, [r4, #7]
    if (type_diff != 0) {
   2294c:	1a30      	subs	r0, r6, r0
   2294e:	d105      	bne.n	2295c <ble_hs_conn_find_by_addr+0x58>
    return memcmp(a->val, b->val, sizeof(a->val));
   22950:	2206      	movs	r2, #6
   22952:	1c69      	adds	r1, r5, #1
   22954:	f104 0008 	add.w	r0, r4, #8
   22958:	f7f4 f898 	bl	16a8c <memcmp>
            if (ble_addr_cmp(&conn->bhc_peer_addr, addr) == 0) {
   2295c:	b160      	cbz	r0, 22978 <ble_hs_conn_find_by_addr+0x74>
            if (conn->bhc_peer_addr.type < BLE_OWN_ADDR_RPA_PUBLIC_DEFAULT) {
   2295e:	2e01      	cmp	r6, #1
   22960:	d9ee      	bls.n	22940 <ble_hs_conn_find_by_addr+0x3c>
            ble_hs_conn_addrs(conn, &addrs);
   22962:	a901      	add	r1, sp, #4
   22964:	4620      	mov	r0, r4
   22966:	f7ff ff61 	bl	2282c <ble_hs_conn_addrs>
    type_diff = a->type - b->type;
   2296a:	f89d 000b 	ldrb.w	r0, [sp, #11]
   2296e:	782b      	ldrb	r3, [r5, #0]
    if (type_diff != 0) {
   22970:	1ac0      	subs	r0, r0, r3
   22972:	d0df      	beq.n	22934 <ble_hs_conn_find_by_addr+0x30>
   22974:	e7e3      	b.n	2293e <ble_hs_conn_find_by_addr+0x3a>
        return NULL;
   22976:	4604      	mov	r4, r0
}
   22978:	4620      	mov	r0, r4
   2297a:	b008      	add	sp, #32
   2297c:	bd70      	pop	{r4, r5, r6, pc}
   2297e:	bf00      	nop
   22980:	10003dc8 	.word	0x10003dc8

00022984 <ble_hs_conn_timer>:

int32_t
ble_hs_conn_timer(void)
{
   22984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return os_time_get();
   22986:	f7f3 fe0b 	bl	165a0 <os_time_get>
   2298a:	4607      	mov	r7, r0
    for (;;) {
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
        next_exp_in = BLE_HS_FOREVER;
        now = ble_npl_time_get();

        ble_hs_lock();
   2298c:	f7ff f8ba 	bl	21b04 <ble_hs_lock>
         * 1. Determine if any connections need to be terminated due to timeout.
         *    If so, break out of the loop and terminate the connection.  This
         *    function will need to be executed again.
         * 2. Otherwise, determine when the next timeout will occur.
         */
        SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   22990:	4b1a      	ldr	r3, [pc, #104]	; (229fc <ble_hs_conn_timer+0x78>)
   22992:	681c      	ldr	r4, [r3, #0]
        next_exp_in = BLE_HS_FOREVER;
   22994:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
        SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   22998:	e00d      	b.n	229b6 <ble_hs_conn_timer+0x32>
                    if (time_diff <= 0) {
                        /* ACL reassembly has timed out.  Remember the connection
                         * handle so it can be terminated after the mutex is
                         * unlocked.
                         */
                        conn_handle = conn->bhc_handle;
   2299a:	88a4      	ldrh	r4, [r4, #4]
                        break;
   2299c:	e021      	b.n	229e2 <ble_hs_conn_timer+0x5e>
   2299e:	462e      	mov	r6, r5
#if BLE_HS_ATT_SVR_QUEUED_WRITE_TMO
                /* Check each connection's rx queued write timer.  If too much
                 * time passes after a prep write is received, the queue is
                 * cleared.
                 */
                time_diff = ble_att_svr_ticks_until_tmo(&conn->bhc_att_svr, now);
   229a0:	4639      	mov	r1, r7
   229a2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   229a6:	f7fa ffe8 	bl	1d97a <ble_att_svr_ticks_until_tmo>
                if (time_diff <= 0) {
   229aa:	1e05      	subs	r5, r0, #0
   229ac:	dd14      	ble.n	229d8 <ble_hs_conn_timer+0x54>
                    conn_handle = conn->bhc_handle;
                    break;
                }

                /* Determine if this connection is the soonest to time out. */
                if (time_diff < next_exp_in) {
   229ae:	42ae      	cmp	r6, r5
   229b0:	dc00      	bgt.n	229b4 <ble_hs_conn_timer+0x30>
   229b2:	4635      	mov	r5, r6
        SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   229b4:	6824      	ldr	r4, [r4, #0]
   229b6:	b194      	cbz	r4, 229de <ble_hs_conn_timer+0x5a>
            if (!(conn->bhc_flags & BLE_HS_CONN_F_TERMINATING)) {
   229b8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   229bc:	f013 0f02 	tst.w	r3, #2
   229c0:	d1f8      	bne.n	229b4 <ble_hs_conn_timer+0x30>
                if (conn->bhc_rx_chan != NULL) {
   229c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   229c4:	2b00      	cmp	r3, #0
   229c6:	d0ea      	beq.n	2299e <ble_hs_conn_timer+0x1a>
                    time_diff = conn->bhc_rx_timeout - now;
   229c8:	6b66      	ldr	r6, [r4, #52]	; 0x34
   229ca:	1bf6      	subs	r6, r6, r7
                    if (time_diff <= 0) {
   229cc:	2e00      	cmp	r6, #0
   229ce:	dde4      	ble.n	2299a <ble_hs_conn_timer+0x16>
                    if (time_diff < next_exp_in) {
   229d0:	42b5      	cmp	r5, r6
   229d2:	dce5      	bgt.n	229a0 <ble_hs_conn_timer+0x1c>
   229d4:	462e      	mov	r6, r5
   229d6:	e7e3      	b.n	229a0 <ble_hs_conn_timer+0x1c>
                    conn_handle = conn->bhc_handle;
   229d8:	88a4      	ldrh	r4, [r4, #4]
                    break;
   229da:	4635      	mov	r5, r6
   229dc:	e001      	b.n	229e2 <ble_hs_conn_timer+0x5e>
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   229de:	f64f 74ff 	movw	r4, #65535	; 0xffff
                }
#endif
            }
        }

        ble_hs_unlock();
   229e2:	f7ff f893 	bl	21b0c <ble_hs_unlock>

        /* If a connection has timed out, terminate it.  We need to repeatedly
         * call this function again to determine when the next timeout is.
         */
        if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   229e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   229ea:	429c      	cmp	r4, r3
   229ec:	d101      	bne.n	229f2 <ble_hs_conn_timer+0x6e>
            continue;
        }

        return next_exp_in;
    }
}
   229ee:	4628      	mov	r0, r5
   229f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ble_gap_terminate(conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   229f2:	2113      	movs	r1, #19
   229f4:	4620      	mov	r0, r4
   229f6:	f7fc fb93 	bl	1f120 <ble_gap_terminate>
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   229fa:	e7c4      	b.n	22986 <ble_hs_conn_timer+0x2>
   229fc:	10003dc8 	.word	0x10003dc8

00022a00 <ble_hs_conn_init>:

int
ble_hs_conn_init(void)
{
   22a00:	b500      	push	{lr}
   22a02:	b083      	sub	sp, #12
    int rc;

    rc = os_mempool_init(&ble_hs_conn_pool, MYNEWT_VAL(BLE_MAX_CONNECTIONS),
   22a04:	4b07      	ldr	r3, [pc, #28]	; (22a24 <ble_hs_conn_init+0x24>)
   22a06:	9300      	str	r3, [sp, #0]
   22a08:	4b07      	ldr	r3, [pc, #28]	; (22a28 <ble_hs_conn_init+0x28>)
   22a0a:	2264      	movs	r2, #100	; 0x64
   22a0c:	2101      	movs	r1, #1
   22a0e:	4807      	ldr	r0, [pc, #28]	; (22a2c <ble_hs_conn_init+0x2c>)
   22a10:	f7f3 f9d6 	bl	15dc0 <os_mempool_init>
                         sizeof (struct ble_hs_conn),
                         ble_hs_conn_elem_mem, "ble_hs_conn_pool");
    if (rc != 0) {
   22a14:	b920      	cbnz	r0, 22a20 <ble_hs_conn_init+0x20>
        return BLE_HS_EOS;
    }

    SLIST_INIT(&ble_hs_conns);
   22a16:	4b06      	ldr	r3, [pc, #24]	; (22a30 <ble_hs_conn_init+0x30>)
   22a18:	6018      	str	r0, [r3, #0]

    return 0;
}
   22a1a:	b003      	add	sp, #12
   22a1c:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   22a20:	200b      	movs	r0, #11
   22a22:	e7fa      	b.n	22a1a <ble_hs_conn_init+0x1a>
   22a24:	00031070 	.word	0x00031070
   22a28:	10003d48 	.word	0x10003d48
   22a2c:	10003dac 	.word	0x10003dac
   22a30:	10003dc8 	.word	0x10003dc8

00022a34 <ble_hs_flow_inc_completed_pkts>:
    ble_hs_unlock();
}

static void
ble_hs_flow_inc_completed_pkts(struct ble_hs_conn *conn)
{
   22a34:	b508      	push	{r3, lr}

    int rc;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    conn->bhc_completed_pkts++;
   22a36:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
   22a38:	3301      	adds	r3, #1
   22a3a:	8743      	strh	r3, [r0, #58]	; 0x3a
    ble_hs_flow_num_completed_pkts++;
   22a3c:	4a10      	ldr	r2, [pc, #64]	; (22a80 <ble_hs_flow_inc_completed_pkts+0x4c>)
   22a3e:	8813      	ldrh	r3, [r2, #0]
   22a40:	3301      	adds	r3, #1
   22a42:	b29b      	uxth	r3, r3
   22a44:	8013      	strh	r3, [r2, #0]

    if (ble_hs_flow_num_completed_pkts > MYNEWT_VAL(BLE_ACL_BUF_COUNT)) {
   22a46:	2b04      	cmp	r3, #4
   22a48:	d807      	bhi.n	22a5a <ble_hs_flow_inc_completed_pkts+0x26>
    }

    /* If the number of free buffers is at or below the configured threshold,
     * send an immediate number-of-copmleted-packets event.
     */
    num_free = MYNEWT_VAL(BLE_ACL_BUF_COUNT) - ble_hs_flow_num_completed_pkts;
   22a4a:	f1c3 0204 	rsb	r2, r3, #4
   22a4e:	b292      	uxth	r2, r2
    if (num_free <= MYNEWT_VAL(BLE_HS_FLOW_CTRL_THRESH)) {
   22a50:	2a02      	cmp	r2, #2
   22a52:	d906      	bls.n	22a62 <ble_hs_flow_inc_completed_pkts+0x2e>
        ble_npl_eventq_put(ble_hs_evq_get(), &ble_hs_flow_ev);
        ble_npl_callout_stop(&ble_hs_flow_timer);
    } else if (ble_hs_flow_num_completed_pkts == 1) {
   22a54:	2b01      	cmp	r3, #1
   22a56:	d00d      	beq.n	22a74 <ble_hs_flow_inc_completed_pkts+0x40>
        rc = ble_npl_callout_reset(&ble_hs_flow_timer, BLE_HS_FLOW_ITVL_TICKS);
        BLE_HS_DBG_ASSERT_EVAL(rc == 0);
    }
}
   22a58:	bd08      	pop	{r3, pc}
        ble_hs_sched_reset(BLE_HS_ECONTROLLER);
   22a5a:	200c      	movs	r0, #12
   22a5c:	f7ff f968 	bl	21d30 <ble_hs_sched_reset>
        return;
   22a60:	e7fa      	b.n	22a58 <ble_hs_flow_inc_completed_pkts+0x24>
        ble_npl_eventq_put(ble_hs_evq_get(), &ble_hs_flow_ev);
   22a62:	f7ff f811 	bl	21a88 <ble_hs_evq_get>
    os_eventq_put(&evq->evq, &ev->ev);
   22a66:	4907      	ldr	r1, [pc, #28]	; (22a84 <ble_hs_flow_inc_completed_pkts+0x50>)
   22a68:	f7f2 fccf 	bl	1540a <os_eventq_put>
    os_callout_stop(&co->co);
   22a6c:	4806      	ldr	r0, [pc, #24]	; (22a88 <ble_hs_flow_inc_completed_pkts+0x54>)
   22a6e:	f7f2 fb55 	bl	1511c <os_callout_stop>
}
   22a72:	e7f1      	b.n	22a58 <ble_hs_flow_inc_completed_pkts+0x24>
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   22a74:	2180      	movs	r1, #128	; 0x80
   22a76:	4804      	ldr	r0, [pc, #16]	; (22a88 <ble_hs_flow_inc_completed_pkts+0x54>)
   22a78:	f7f2 fb6e 	bl	15158 <os_callout_reset>
        BLE_HS_DBG_ASSERT_EVAL(rc == 0);
   22a7c:	e7ec      	b.n	22a58 <ble_hs_flow_inc_completed_pkts+0x24>
   22a7e:	bf00      	nop
   22a80:	10003de4 	.word	0x10003de4
   22a84:	10003dcc 	.word	0x10003dcc
   22a88:	10003de8 	.word	0x10003de8

00022a8c <ble_hs_flow_acl_free>:

static os_error_t
ble_hs_flow_acl_free(struct os_mempool_ext *mpe, void *data, void *arg)
{
   22a8c:	b538      	push	{r3, r4, r5, lr}
    const struct os_mempool *mp = om->om_omp->omp_pool;
   22a8e:	688a      	ldr	r2, [r1, #8]
   22a90:	6852      	ldr	r2, [r2, #4]
    idx = (addr - mp->mp_membuf_addr) / mp->mp_block_size;
   22a92:	68d4      	ldr	r4, [r2, #12]
   22a94:	1b0b      	subs	r3, r1, r4
   22a96:	6812      	ldr	r2, [r2, #0]
   22a98:	fbb3 f3f2 	udiv	r3, r3, r2
    int rc;

    om = data;

    idx = ble_hs_flow_mbuf_index(om);
    conn_handle = ble_hs_flow_mbuf_conn_handle[idx];
   22a9c:	4a09      	ldr	r2, [pc, #36]	; (22ac4 <ble_hs_flow_acl_free+0x38>)
   22a9e:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]

    /* Free the mbuf back to its pool. */
    rc = os_memblock_put_from_cb(&mpe->mpe_mp, data);
   22aa2:	f7f3 f9dd 	bl	15e60 <os_memblock_put_from_cb>
    if (rc != 0) {
   22aa6:	4604      	mov	r4, r0
   22aa8:	b108      	cbz	r0, 22aae <ble_hs_flow_acl_free+0x22>
    }

    ble_hs_unlock_nested();

    return 0;
}
   22aaa:	4620      	mov	r0, r4
   22aac:	bd38      	pop	{r3, r4, r5, pc}
    ble_hs_lock_nested();
   22aae:	f7ff f817 	bl	21ae0 <ble_hs_lock_nested>
    conn = ble_hs_conn_find(conn_handle);
   22ab2:	4628      	mov	r0, r5
   22ab4:	f7ff fe82 	bl	227bc <ble_hs_conn_find>
    if (conn != NULL) {
   22ab8:	b108      	cbz	r0, 22abe <ble_hs_flow_acl_free+0x32>
        ble_hs_flow_inc_completed_pkts(conn);
   22aba:	f7ff ffbb 	bl	22a34 <ble_hs_flow_inc_completed_pkts>
    ble_hs_unlock_nested();
   22abe:	f7ff f819 	bl	21af4 <ble_hs_unlock_nested>
    return 0;
   22ac2:	e7f2      	b.n	22aaa <ble_hs_flow_acl_free+0x1e>
   22ac4:	10003ddc 	.word	0x10003ddc

00022ac8 <ble_hs_flow_tx_num_comp_pkts>:
{
   22ac8:	b510      	push	{r4, lr}
   22aca:	b082      	sub	sp, #8
    for (conn = ble_hs_conn_first();
   22acc:	f7ff fea8 	bl	22820 <ble_hs_conn_first>
   22ad0:	4604      	mov	r4, r0
   22ad2:	e000      	b.n	22ad6 <ble_hs_flow_tx_num_comp_pkts+0xe>
         conn = SLIST_NEXT(conn, bhc_next)) {
   22ad4:	6824      	ldr	r4, [r4, #0]
    for (conn = ble_hs_conn_first();
   22ad6:	b1b4      	cbz	r4, 22b06 <ble_hs_flow_tx_num_comp_pkts+0x3e>
        if (conn->bhc_completed_pkts > 0) {
   22ad8:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
   22ada:	2b00      	cmp	r3, #0
   22adc:	d0fa      	beq.n	22ad4 <ble_hs_flow_tx_num_comp_pkts+0xc>
            cmd->handles = 1;
   22ade:	2201      	movs	r2, #1
   22ae0:	f88d 2000 	strb.w	r2, [sp]
            cmd->h[0].handle = htole16(conn->bhc_handle);
   22ae4:	88a2      	ldrh	r2, [r4, #4]
   22ae6:	f8ad 2001 	strh.w	r2, [sp, #1]
            cmd->h[0].count = htole16(conn->bhc_completed_pkts);
   22aea:	f8ad 3003 	strh.w	r3, [sp, #3]
            conn->bhc_completed_pkts = 0;
   22aee:	2300      	movs	r3, #0
   22af0:	8763      	strh	r3, [r4, #58]	; 0x3a
            rc = ble_hs_hci_cmd_tx_no_rsp(
   22af2:	2205      	movs	r2, #5
   22af4:	4669      	mov	r1, sp
   22af6:	f640 4035 	movw	r0, #3125	; 0xc35
   22afa:	f000 f9a3 	bl	22e44 <ble_hs_hci_cmd_tx_no_rsp>
            if (rc != 0) {
   22afe:	4603      	mov	r3, r0
   22b00:	2800      	cmp	r0, #0
   22b02:	d0e7      	beq.n	22ad4 <ble_hs_flow_tx_num_comp_pkts+0xc>
   22b04:	e000      	b.n	22b08 <ble_hs_flow_tx_num_comp_pkts+0x40>
    return 0;
   22b06:	2300      	movs	r3, #0
}
   22b08:	4618      	mov	r0, r3
   22b0a:	b002      	add	sp, #8
   22b0c:	bd10      	pop	{r4, pc}
	...

00022b10 <ble_hs_flow_event_cb>:
{
   22b10:	b508      	push	{r3, lr}
    ble_hs_lock();
   22b12:	f7fe fff7 	bl	21b04 <ble_hs_lock>
    if (ble_hs_flow_num_completed_pkts > 0) {
   22b16:	4b08      	ldr	r3, [pc, #32]	; (22b38 <ble_hs_flow_event_cb+0x28>)
   22b18:	881b      	ldrh	r3, [r3, #0]
   22b1a:	b913      	cbnz	r3, 22b22 <ble_hs_flow_event_cb+0x12>
    ble_hs_unlock();
   22b1c:	f7fe fff6 	bl	21b0c <ble_hs_unlock>
}
   22b20:	bd08      	pop	{r3, pc}
        rc = ble_hs_flow_tx_num_comp_pkts();
   22b22:	f7ff ffd1 	bl	22ac8 <ble_hs_flow_tx_num_comp_pkts>
        if (rc != 0) {
   22b26:	b918      	cbnz	r0, 22b30 <ble_hs_flow_event_cb+0x20>
        ble_hs_flow_num_completed_pkts = 0;
   22b28:	4b03      	ldr	r3, [pc, #12]	; (22b38 <ble_hs_flow_event_cb+0x28>)
   22b2a:	2200      	movs	r2, #0
   22b2c:	801a      	strh	r2, [r3, #0]
   22b2e:	e7f5      	b.n	22b1c <ble_hs_flow_event_cb+0xc>
            ble_hs_sched_reset(rc);
   22b30:	f7ff f8fe 	bl	21d30 <ble_hs_sched_reset>
   22b34:	e7f8      	b.n	22b28 <ble_hs_flow_event_cb+0x18>
   22b36:	bf00      	nop
   22b38:	10003de4 	.word	0x10003de4

00022b3c <ble_hs_flow_connection_broken>:
    MYNEWT_VAL(BLE_HS_FLOW_CTRL_TX_ON_DISCONNECT)
    ble_hs_lock();
    ble_hs_flow_tx_num_comp_pkts();
    ble_hs_unlock();
#endif
}
   22b3c:	4770      	bx	lr
	...

00022b40 <ble_hs_flow_track_data_mbuf>:
    const struct os_mempool *mp = om->om_omp->omp_pool;
   22b40:	6883      	ldr	r3, [r0, #8]
   22b42:	685a      	ldr	r2, [r3, #4]
    idx = (addr - mp->mp_membuf_addr) / mp->mp_block_size;
   22b44:	68d3      	ldr	r3, [r2, #12]
   22b46:	1ac3      	subs	r3, r0, r3
   22b48:	6812      	ldr	r2, [r2, #0]
   22b4a:	fbb3 f3f2 	udiv	r3, r3, r2
{
#if MYNEWT_VAL(BLE_HS_FLOW_CTRL)
    const struct hci_data_hdr *hdr;
    int idx = ble_hs_flow_mbuf_index(om);

    hdr = (void *)om->om_data;
   22b4e:	6802      	ldr	r2, [r0, #0]
    ble_hs_flow_mbuf_conn_handle[idx] = BLE_HCI_DATA_HANDLE(hdr->hdh_handle_pb_bc);
   22b50:	8812      	ldrh	r2, [r2, #0]
   22b52:	f3c2 020b 	ubfx	r2, r2, #0, #12
   22b56:	4902      	ldr	r1, [pc, #8]	; (22b60 <ble_hs_flow_track_data_mbuf+0x20>)
   22b58:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
#endif
}
   22b5c:	4770      	bx	lr
   22b5e:	bf00      	nop
   22b60:	10003ddc 	.word	0x10003ddc

00022b64 <ble_hs_flow_startup>:
 *
 * If flow control is disabled, this function is a no-op.
 */
int
ble_hs_flow_startup(void)
{
   22b64:	b530      	push	{r4, r5, lr}
   22b66:	b087      	sub	sp, #28
#if MYNEWT_VAL(BLE_HS_FLOW_CTRL)
    struct ble_hci_cb_ctlr_to_host_fc_cp enable_cmd;
    struct ble_hci_cb_host_buf_size_cp buf_size_cmd = {
   22b68:	2400      	movs	r4, #0
   22b6a:	f8cd 400e 	str.w	r4, [sp, #14]
   22b6e:	f88d 4012 	strb.w	r4, [sp, #18]
   22b72:	23ff      	movs	r3, #255	; 0xff
   22b74:	f8ad 300c 	strh.w	r3, [sp, #12]
   22b78:	2304      	movs	r3, #4
   22b7a:	f88d 300f 	strb.w	r3, [sp, #15]
   22b7e:	f88d 4010 	strb.w	r4, [sp, #16]
    memset(ev, 0, sizeof(*ev));
   22b82:	4b1f      	ldr	r3, [pc, #124]	; (22c00 <ble_hs_flow_startup+0x9c>)
   22b84:	601c      	str	r4, [r3, #0]
   22b86:	609c      	str	r4, [r3, #8]
   22b88:	60dc      	str	r4, [r3, #12]
    ev->ev.ev_queued = 0;
   22b8a:	701c      	strb	r4, [r3, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   22b8c:	4a1d      	ldr	r2, [pc, #116]	; (22c04 <ble_hs_flow_startup+0xa0>)
   22b8e:	605a      	str	r2, [r3, #4]
    int rc;

    ble_npl_event_init(&ble_hs_flow_ev, ble_hs_flow_event_cb, NULL);

    /* Assume failure. */
    ble_hci_trans_set_acl_free_cb(NULL, NULL);
   22b90:	4621      	mov	r1, r4
   22b92:	4620      	mov	r0, r4
   22b94:	f005 f8a8 	bl	27ce8 <ble_hci_trans_set_acl_free_cb>

#if MYNEWT_VAL(SELFTEST)
    ble_npl_callout_stop(&ble_hs_flow_timer);
#endif

    enable_cmd.enable = BLE_HCI_CTLR_TO_HOST_FC_ACL;
   22b98:	2201      	movs	r2, #1
   22b9a:	f88d 2014 	strb.w	r2, [sp, #20]

    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   22b9e:	9400      	str	r4, [sp, #0]
   22ba0:	4623      	mov	r3, r4
   22ba2:	a905      	add	r1, sp, #20
   22ba4:	f640 4031 	movw	r0, #3121	; 0xc31
   22ba8:	f000 f95c 	bl	22e64 <ble_hs_hci_cmd_tx>
                                      BLE_HCI_OCF_CB_SET_CTLR_TO_HOST_FC),
                           &enable_cmd, sizeof(enable_cmd), NULL, 0);
    if (rc != 0) {
   22bac:	4604      	mov	r4, r0
   22bae:	b110      	cbz	r0, 22bb6 <ble_hs_flow_startup+0x52>
    ble_npl_callout_init(&ble_hs_flow_timer, ble_hs_evq_get(),
                         ble_hs_flow_event_cb, NULL);
#endif

    return 0;
}
   22bb0:	4620      	mov	r0, r4
   22bb2:	b007      	add	sp, #28
   22bb4:	bd30      	pop	{r4, r5, pc}
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   22bb6:	2300      	movs	r3, #0
   22bb8:	9300      	str	r3, [sp, #0]
   22bba:	2207      	movs	r2, #7
   22bbc:	a903      	add	r1, sp, #12
   22bbe:	f640 4033 	movw	r0, #3123	; 0xc33
   22bc2:	f000 f94f 	bl	22e64 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   22bc6:	4604      	mov	r4, r0
   22bc8:	b978      	cbnz	r0, 22bea <ble_hs_flow_startup+0x86>
    ble_hs_flow_num_completed_pkts = 0;
   22bca:	2500      	movs	r5, #0
   22bcc:	4b0e      	ldr	r3, [pc, #56]	; (22c08 <ble_hs_flow_startup+0xa4>)
   22bce:	801d      	strh	r5, [r3, #0]
    ble_hci_trans_set_acl_free_cb(ble_hs_flow_acl_free, NULL);
   22bd0:	4629      	mov	r1, r5
   22bd2:	480e      	ldr	r0, [pc, #56]	; (22c0c <ble_hs_flow_startup+0xa8>)
   22bd4:	f005 f888 	bl	27ce8 <ble_hci_trans_set_acl_free_cb>
    ble_npl_callout_init(&ble_hs_flow_timer, ble_hs_evq_get(),
   22bd8:	f7fe ff56 	bl	21a88 <ble_hs_evq_get>
   22bdc:	4601      	mov	r1, r0
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   22bde:	462b      	mov	r3, r5
   22be0:	4a08      	ldr	r2, [pc, #32]	; (22c04 <ble_hs_flow_startup+0xa0>)
   22be2:	480b      	ldr	r0, [pc, #44]	; (22c10 <ble_hs_flow_startup+0xac>)
   22be4:	f7f2 fa8c 	bl	15100 <os_callout_init>
    return 0;
   22be8:	e7e2      	b.n	22bb0 <ble_hs_flow_startup+0x4c>
        enable_cmd.enable = BLE_HCI_CTLR_TO_HOST_FC_OFF;
   22bea:	2300      	movs	r3, #0
   22bec:	f88d 3014 	strb.w	r3, [sp, #20]
        ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   22bf0:	9300      	str	r3, [sp, #0]
   22bf2:	2201      	movs	r2, #1
   22bf4:	a905      	add	r1, sp, #20
   22bf6:	f640 4031 	movw	r0, #3121	; 0xc31
   22bfa:	f000 f933 	bl	22e64 <ble_hs_hci_cmd_tx>
        return rc;
   22bfe:	e7d7      	b.n	22bb0 <ble_hs_flow_startup+0x4c>
   22c00:	10003dcc 	.word	0x10003dcc
   22c04:	00022b11 	.word	0x00022b11
   22c08:	10003de4 	.word	0x10003de4
   22c0c:	00022a8d 	.word	0x00022a8d
   22c10:	10003de8 	.word	0x10003de8

00022c14 <ble_hs_hci_rx_cmd_complete>:
}

static int
ble_hs_hci_rx_cmd_complete(const void *data, int len,
                           struct ble_hs_hci_ack *out_ack)
{
   22c14:	4603      	mov	r3, r0
    const struct ble_hci_ev_command_complete *ev = data;
    const struct ble_hci_ev_command_complete_nop *nop = data;
    uint16_t opcode;

    if (len < sizeof(*ev)) {
   22c16:	2903      	cmp	r1, #3
   22c18:	d809      	bhi.n	22c2e <ble_hs_hci_rx_cmd_complete+0x1a>
        if (len < sizeof(*nop)) {
   22c1a:	2902      	cmp	r1, #2
   22c1c:	d91b      	bls.n	22c56 <ble_hs_hci_rx_cmd_complete+0x42>
            return BLE_HS_ECONTROLLER;
        }

        /* nop is special as it doesn't have status and response */

        opcode = le16toh(nop->opcode);
   22c1e:	f8b0 3001 	ldrh.w	r3, [r0, #1]
        if (opcode != BLE_HCI_OPCODE_NOP) {
   22c22:	b9d3      	cbnz	r3, 22c5a <ble_hs_hci_rx_cmd_complete+0x46>
            return BLE_HS_ECONTROLLER;
        }

        /* TODO Process num_pkts field. */

        out_ack->bha_status = 0;
   22c24:	2000      	movs	r0, #0
   22c26:	6010      	str	r0, [r2, #0]
        out_ack->bha_params = NULL;
   22c28:	6050      	str	r0, [r2, #4]
        out_ack->bha_params_len = 0;
   22c2a:	6090      	str	r0, [r2, #8]
        return 0;
   22c2c:	4770      	bx	lr
    }

    opcode = le16toh(ev->opcode);
   22c2e:	f8b0 0001 	ldrh.w	r0, [r0, #1]

    /* TODO Process num_pkts field. */

    out_ack->bha_opcode = opcode;
   22c32:	8190      	strh	r0, [r2, #12]

    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   22c34:	78d8      	ldrb	r0, [r3, #3]
   22c36:	b110      	cbz	r0, 22c3e <ble_hs_hci_rx_cmd_complete+0x2a>
   22c38:	f500 7000 	add.w	r0, r0, #512	; 0x200
   22c3c:	e000      	b.n	22c40 <ble_hs_hci_rx_cmd_complete+0x2c>
   22c3e:	2000      	movs	r0, #0
   22c40:	6010      	str	r0, [r2, #0]
    out_ack->bha_params_len = len - sizeof(*ev);
   22c42:	1f08      	subs	r0, r1, #4
   22c44:	6090      	str	r0, [r2, #8]
    if (out_ack->bha_params_len) {
   22c46:	b118      	cbz	r0, 22c50 <ble_hs_hci_rx_cmd_complete+0x3c>
        out_ack->bha_params = ev->return_params;
   22c48:	3304      	adds	r3, #4
   22c4a:	6053      	str	r3, [r2, #4]
    } else {
        out_ack->bha_params = NULL;
    }

    return 0;
   22c4c:	2000      	movs	r0, #0
   22c4e:	4770      	bx	lr
        out_ack->bha_params = NULL;
   22c50:	2300      	movs	r3, #0
   22c52:	6053      	str	r3, [r2, #4]
   22c54:	4770      	bx	lr
            return BLE_HS_ECONTROLLER;
   22c56:	200c      	movs	r0, #12
   22c58:	4770      	bx	lr
            return BLE_HS_ECONTROLLER;
   22c5a:	200c      	movs	r0, #12
}
   22c5c:	4770      	bx	lr

00022c5e <ble_hs_hci_rx_cmd_status>:
ble_hs_hci_rx_cmd_status(const void *data, int len,
                         struct ble_hs_hci_ack *out_ack)
{
    const struct ble_hci_ev_command_status *ev = data;

    if (len != sizeof(*ev)) {
   22c5e:	2904      	cmp	r1, #4
   22c60:	d10d      	bne.n	22c7e <ble_hs_hci_rx_cmd_status+0x20>
        return BLE_HS_ECONTROLLER;
    }

    /* XXX: Process num_pkts field. */

    out_ack->bha_opcode = le16toh(ev->opcode);
   22c62:	8843      	ldrh	r3, [r0, #2]
   22c64:	8193      	strh	r3, [r2, #12]
    out_ack->bha_params = NULL;
   22c66:	2300      	movs	r3, #0
   22c68:	6053      	str	r3, [r2, #4]
    out_ack->bha_params_len = 0;
   22c6a:	6093      	str	r3, [r2, #8]
    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   22c6c:	7803      	ldrb	r3, [r0, #0]
   22c6e:	b123      	cbz	r3, 22c7a <ble_hs_hci_rx_cmd_status+0x1c>
   22c70:	f503 7300 	add.w	r3, r3, #512	; 0x200
   22c74:	6013      	str	r3, [r2, #0]

    return 0;
   22c76:	2000      	movs	r0, #0
   22c78:	4770      	bx	lr
    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   22c7a:	2300      	movs	r3, #0
   22c7c:	e7fa      	b.n	22c74 <ble_hs_hci_rx_cmd_status+0x16>
        return BLE_HS_ECONTROLLER;
   22c7e:	200c      	movs	r0, #12
}
   22c80:	4770      	bx	lr
	...

00022c84 <ble_hs_hci_max_acl_payload_sz>:
     * The LE_Read_Buffer_Size command is used to read the maximum size of the
     * data portion of HCI LE ACL Data Packets sent from the Host to the
     * Controller.
     */
    return ble_hs_hci_buf_sz;
}
   22c84:	4b01      	ldr	r3, [pc, #4]	; (22c8c <ble_hs_hci_max_acl_payload_sz+0x8>)
   22c86:	8818      	ldrh	r0, [r3, #0]
   22c88:	4770      	bx	lr
   22c8a:	bf00      	nop
   22c8c:	10003e0e 	.word	0x10003e0e

00022c90 <ble_hs_hci_lock>:
{
   22c90:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   22c92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22c96:	4802      	ldr	r0, [pc, #8]	; (22ca0 <ble_hs_hci_lock+0x10>)
   22c98:	f7f3 fe80 	bl	1699c <os_mutex_pend>
}
   22c9c:	bd08      	pop	{r3, pc}
   22c9e:	bf00      	nop
   22ca0:	10003f54 	.word	0x10003f54

00022ca4 <ble_hs_hci_unlock>:
{
   22ca4:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   22ca6:	4802      	ldr	r0, [pc, #8]	; (22cb0 <ble_hs_hci_unlock+0xc>)
   22ca8:	f7f3 fe18 	bl	168dc <os_mutex_release>
}
   22cac:	bd08      	pop	{r3, pc}
   22cae:	bf00      	nop
   22cb0:	10003f54 	.word	0x10003f54

00022cb4 <ble_hs_hci_wait_for_ack>:
{
   22cb4:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_sem_pend(&sem->sem, timeout);
   22cb6:	f44f 7180 	mov.w	r1, #256	; 0x100
   22cba:	4807      	ldr	r0, [pc, #28]	; (22cd8 <ble_hs_hci_wait_for_ack+0x24>)
   22cbc:	f00a fc8a 	bl	2d5d4 <os_sem_pend>
    switch (rc) {
   22cc0:	b140      	cbz	r0, 22cd4 <ble_hs_hci_wait_for_ack+0x20>
   22cc2:	2806      	cmp	r0, #6
   22cc4:	d105      	bne.n	22cd2 <ble_hs_hci_wait_for_ack+0x1e>
        STATS_INC(ble_hs_stats, hci_timeout);
   22cc6:	4a05      	ldr	r2, [pc, #20]	; (22cdc <ble_hs_hci_wait_for_ack+0x28>)
   22cc8:	6a53      	ldr	r3, [r2, #36]	; 0x24
   22cca:	3301      	adds	r3, #1
   22ccc:	6253      	str	r3, [r2, #36]	; 0x24
        rc = BLE_HS_ETIMEOUT_HCI;
   22cce:	2013      	movs	r0, #19
        break;
   22cd0:	e000      	b.n	22cd4 <ble_hs_hci_wait_for_ack+0x20>
        rc = BLE_HS_EOS;
   22cd2:	200b      	movs	r0, #11
}
   22cd4:	bd08      	pop	{r3, pc}
   22cd6:	bf00      	nop
   22cd8:	10003f60 	.word	0x10003f60
   22cdc:	10003cec 	.word	0x10003cec

00022ce0 <ble_hs_hci_process_ack>:
{
   22ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22ce4:	4607      	mov	r7, r0
   22ce6:	460e      	mov	r6, r1
   22ce8:	4690      	mov	r8, r2
   22cea:	461c      	mov	r4, r3
    STATS_INC(ble_hs_stats, hci_event);
   22cec:	4a1e      	ldr	r2, [pc, #120]	; (22d68 <ble_hs_hci_process_ack+0x88>)
   22cee:	6993      	ldr	r3, [r2, #24]
   22cf0:	3301      	adds	r3, #1
   22cf2:	6193      	str	r3, [r2, #24]
    memset(out_ack, 0, sizeof *out_ack);
   22cf4:	2300      	movs	r3, #0
   22cf6:	6023      	str	r3, [r4, #0]
   22cf8:	6063      	str	r3, [r4, #4]
   22cfa:	60a3      	str	r3, [r4, #8]
   22cfc:	60e3      	str	r3, [r4, #12]
    switch (ble_hs_hci_ack->opcode) {
   22cfe:	4b1b      	ldr	r3, [pc, #108]	; (22d6c <ble_hs_hci_process_ack+0x8c>)
   22d00:	6818      	ldr	r0, [r3, #0]
   22d02:	7803      	ldrb	r3, [r0, #0]
   22d04:	2b0e      	cmp	r3, #14
   22d06:	d00a      	beq.n	22d1e <ble_hs_hci_process_ack+0x3e>
   22d08:	2b0f      	cmp	r3, #15
   22d0a:	d01e      	beq.n	22d4a <ble_hs_hci_process_ack+0x6a>
   22d0c:	2511      	movs	r5, #17
    if (rc != 0) {
   22d0e:	b11d      	cbz	r5, 22d18 <ble_hs_hci_process_ack+0x38>
        STATS_INC(ble_hs_stats, hci_invalid_ack);
   22d10:	4a15      	ldr	r2, [pc, #84]	; (22d68 <ble_hs_hci_process_ack+0x88>)
   22d12:	69d3      	ldr	r3, [r2, #28]
   22d14:	3301      	adds	r3, #1
   22d16:	61d3      	str	r3, [r2, #28]
}
   22d18:	4628      	mov	r0, r5
   22d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = ble_hs_hci_rx_cmd_complete(ble_hs_hci_ack->data,
   22d1e:	4622      	mov	r2, r4
   22d20:	7841      	ldrb	r1, [r0, #1]
   22d22:	3002      	adds	r0, #2
   22d24:	f7ff ff76 	bl	22c14 <ble_hs_hci_rx_cmd_complete>
   22d28:	4605      	mov	r5, r0
    if (rc == 0) {
   22d2a:	2d00      	cmp	r5, #0
   22d2c:	d1ef      	bne.n	22d0e <ble_hs_hci_process_ack+0x2e>
        if (params_buf == NULL || out_ack->bha_params == NULL) {
   22d2e:	b19e      	cbz	r6, 22d58 <ble_hs_hci_process_ack+0x78>
   22d30:	6861      	ldr	r1, [r4, #4]
   22d32:	b189      	cbz	r1, 22d58 <ble_hs_hci_process_ack+0x78>
            if (out_ack->bha_params_len > params_buf_len) {
   22d34:	68a3      	ldr	r3, [r4, #8]
   22d36:	4543      	cmp	r3, r8
   22d38:	dd02      	ble.n	22d40 <ble_hs_hci_process_ack+0x60>
                out_ack->bha_params_len = params_buf_len;
   22d3a:	f8c4 8008 	str.w	r8, [r4, #8]
                rc = BLE_HS_ECONTROLLER;
   22d3e:	250c      	movs	r5, #12
            memcpy(params_buf, out_ack->bha_params, out_ack->bha_params_len);
   22d40:	68a2      	ldr	r2, [r4, #8]
   22d42:	4630      	mov	r0, r6
   22d44:	f7f3 fec6 	bl	16ad4 <memcpy>
   22d48:	e008      	b.n	22d5c <ble_hs_hci_process_ack+0x7c>
        rc = ble_hs_hci_rx_cmd_status(ble_hs_hci_ack->data,
   22d4a:	4622      	mov	r2, r4
   22d4c:	7841      	ldrb	r1, [r0, #1]
   22d4e:	3002      	adds	r0, #2
   22d50:	f7ff ff85 	bl	22c5e <ble_hs_hci_rx_cmd_status>
   22d54:	4605      	mov	r5, r0
        break;
   22d56:	e7e8      	b.n	22d2a <ble_hs_hci_process_ack+0x4a>
            out_ack->bha_params_len = 0;
   22d58:	2300      	movs	r3, #0
   22d5a:	60a3      	str	r3, [r4, #8]
        out_ack->bha_params = params_buf;
   22d5c:	6066      	str	r6, [r4, #4]
        if (out_ack->bha_opcode != expected_opcode) {
   22d5e:	89a3      	ldrh	r3, [r4, #12]
   22d60:	42bb      	cmp	r3, r7
   22d62:	d0d4      	beq.n	22d0e <ble_hs_hci_process_ack+0x2e>
            rc = BLE_HS_ECONTROLLER;
   22d64:	250c      	movs	r5, #12
   22d66:	e7d3      	b.n	22d10 <ble_hs_hci_process_ack+0x30>
   22d68:	10003cec 	.word	0x10003cec
   22d6c:	10003e08 	.word	0x10003e08

00022d70 <ble_hs_hci_rx_ack>:
{
   22d70:	b508      	push	{r3, lr}
/**
 * Get current semaphore's count
 */
static inline uint16_t os_sem_get_count(struct os_sem *sem)
{
    return sem->sem_tokens;
   22d72:	4b06      	ldr	r3, [pc, #24]	; (22d8c <ble_hs_hci_rx_ack+0x1c>)
   22d74:	88db      	ldrh	r3, [r3, #6]
    if (ble_npl_sem_get_count(&ble_hs_hci_sem) > 0) {
   22d76:	b92b      	cbnz	r3, 22d84 <ble_hs_hci_rx_ack+0x14>
    ble_hs_hci_ack = (struct ble_hci_ev *) ack_ev;
   22d78:	4b05      	ldr	r3, [pc, #20]	; (22d90 <ble_hs_hci_rx_ack+0x20>)
   22d7a:	6018      	str	r0, [r3, #0]
    return (ble_npl_error_t)os_sem_release(&sem->sem);
   22d7c:	4803      	ldr	r0, [pc, #12]	; (22d8c <ble_hs_hci_rx_ack+0x1c>)
   22d7e:	f00a fbf7 	bl	2d570 <os_sem_release>
}
   22d82:	bd08      	pop	{r3, pc}
        ble_hci_trans_buf_free(ack_ev);
   22d84:	f004 fe48 	bl	27a18 <ble_hci_trans_buf_free>
        return;
   22d88:	e7fb      	b.n	22d82 <ble_hs_hci_rx_ack+0x12>
   22d8a:	bf00      	nop
   22d8c:	10003f60 	.word	0x10003f60
   22d90:	10003e08 	.word	0x10003e08

00022d94 <ble_hs_hci_frag_alloc>:
/**
 * Allocates an mbuf to contain an outgoing ACL data fragment.
 */
static struct os_mbuf *
ble_hs_hci_frag_alloc(uint16_t frag_size, void *arg)
{
   22d94:	b508      	push	{r3, lr}

    /* Prefer the dedicated one-element fragment pool. */
#if MYNEWT_VAL(BLE_CONTROLLER)
    om = os_mbuf_get_pkthdr(&ble_hs_hci_frag_mbuf_pool, sizeof(struct ble_mbuf_hdr));
#else
    om = os_mbuf_get_pkthdr(&ble_hs_hci_frag_mbuf_pool, 0);
   22d96:	2100      	movs	r1, #0
   22d98:	4805      	ldr	r0, [pc, #20]	; (22db0 <ble_hs_hci_frag_alloc+0x1c>)
   22d9a:	f7f2 fc48 	bl	1562e <os_mbuf_get_pkthdr>
#endif
    if (om != NULL) {
   22d9e:	b118      	cbz	r0, 22da8 <ble_hs_hci_frag_alloc+0x14>
        om->om_data += BLE_HCI_DATA_HDR_SZ;
   22da0:	6803      	ldr	r3, [r0, #0]
   22da2:	3304      	adds	r3, #4
   22da4:	6003      	str	r3, [r0, #0]
    if (om != NULL) {
        return om;
    }

    return NULL;
}
   22da6:	bd08      	pop	{r3, pc}
    om = ble_hs_mbuf_acl_pkt();
   22da8:	f000 fd8b 	bl	238c2 <ble_hs_mbuf_acl_pkt>
    if (om != NULL) {
   22dac:	e7fb      	b.n	22da6 <ble_hs_hci_frag_alloc+0x12>
   22dae:	bf00      	nop
   22db0:	10003f2c 	.word	0x10003f2c

00022db4 <ble_hs_hci_acl_hdr_prepend>:
}

static struct os_mbuf *
ble_hs_hci_acl_hdr_prepend(struct os_mbuf *om, uint16_t handle,
                           uint8_t pb_flag)
{
   22db4:	b510      	push	{r4, lr}
   22db6:	b082      	sub	sp, #8
   22db8:	4604      	mov	r4, r0
   22dba:	4608      	mov	r0, r1
   22dbc:	4611      	mov	r1, r2
    struct hci_data_hdr hci_hdr;
    struct os_mbuf *om2;

    put_le16(&hci_hdr.hdh_handle_pb_bc,
   22dbe:	2200      	movs	r2, #0
   22dc0:	f000 fbf2 	bl	235a8 <ble_hs_hci_util_handle_pb_bc_join>
   22dc4:	4601      	mov	r1, r0
   22dc6:	a801      	add	r0, sp, #4
   22dc8:	f00a fb66 	bl	2d498 <put_le16>
             ble_hs_hci_util_handle_pb_bc_join(handle, pb_flag, 0));
    put_le16(&hci_hdr.hdh_len, OS_MBUF_PKTHDR(om)->omp_len);
   22dcc:	8a21      	ldrh	r1, [r4, #16]
   22dce:	f10d 0006 	add.w	r0, sp, #6
   22dd2:	f00a fb61 	bl	2d498 <put_le16>

    om2 = os_mbuf_prepend(om, sizeof hci_hdr);
   22dd6:	2104      	movs	r1, #4
   22dd8:	4620      	mov	r0, r4
   22dda:	f7f2 fdb0 	bl	1593e <os_mbuf_prepend>
    if (om2 == NULL) {
   22dde:	4604      	mov	r4, r0
   22de0:	b158      	cbz	r0, 22dfa <ble_hs_hci_acl_hdr_prepend+0x46>
        return NULL;
    }

    om = om2;
    om = os_mbuf_pullup(om, sizeof hci_hdr);
   22de2:	2104      	movs	r1, #4
   22de4:	f7f2 fea1 	bl	15b2a <os_mbuf_pullup>
    if (om == NULL) {
   22de8:	4604      	mov	r4, r0
   22dea:	b130      	cbz	r0, 22dfa <ble_hs_hci_acl_hdr_prepend+0x46>
        return NULL;
    }

    memcpy(om->om_data, &hci_hdr, sizeof hci_hdr);
   22dec:	6803      	ldr	r3, [r0, #0]
   22dee:	9a01      	ldr	r2, [sp, #4]
   22df0:	601a      	str	r2, [r3, #0]

#if !BLE_MONITOR
    BLE_HS_LOG(DEBUG, "host tx hci data; handle=%d length=%d\n", handle,
   22df2:	f10d 0006 	add.w	r0, sp, #6
   22df6:	f00a fb5d 	bl	2d4b4 <get_le16>
               get_le16(&hci_hdr.hdh_len));
#endif

    return om;
}
   22dfa:	4620      	mov	r0, r4
   22dfc:	b002      	add	sp, #8
   22dfe:	bd10      	pop	{r4, pc}

00022e00 <ble_hs_hci_set_buf_sz>:
    if (pktlen == 0 || max_pkts == 0) {
   22e00:	b130      	cbz	r0, 22e10 <ble_hs_hci_set_buf_sz+0x10>
   22e02:	b139      	cbz	r1, 22e14 <ble_hs_hci_set_buf_sz+0x14>
    ble_hs_hci_buf_sz = pktlen;
   22e04:	4a04      	ldr	r2, [pc, #16]	; (22e18 <ble_hs_hci_set_buf_sz+0x18>)
   22e06:	8010      	strh	r0, [r2, #0]
    ble_hs_hci_avail_pkts = max_pkts;
   22e08:	4b04      	ldr	r3, [pc, #16]	; (22e1c <ble_hs_hci_set_buf_sz+0x1c>)
   22e0a:	8019      	strh	r1, [r3, #0]
    return 0;
   22e0c:	2000      	movs	r0, #0
   22e0e:	4770      	bx	lr
        return BLE_HS_EINVAL;
   22e10:	2003      	movs	r0, #3
   22e12:	4770      	bx	lr
   22e14:	2003      	movs	r0, #3
}
   22e16:	4770      	bx	lr
   22e18:	10003e0e 	.word	0x10003e0e
   22e1c:	10003e0c 	.word	0x10003e0c

00022e20 <ble_hs_hci_add_avail_pkts>:
{
   22e20:	b508      	push	{r3, lr}
    if (ble_hs_hci_avail_pkts + delta > UINT16_MAX) {
   22e22:	4b07      	ldr	r3, [pc, #28]	; (22e40 <ble_hs_hci_add_avail_pkts+0x20>)
   22e24:	881b      	ldrh	r3, [r3, #0]
   22e26:	181a      	adds	r2, r3, r0
   22e28:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   22e2c:	da03      	bge.n	22e36 <ble_hs_hci_add_avail_pkts+0x16>
        ble_hs_hci_avail_pkts += delta;
   22e2e:	4418      	add	r0, r3
   22e30:	4b03      	ldr	r3, [pc, #12]	; (22e40 <ble_hs_hci_add_avail_pkts+0x20>)
   22e32:	8018      	strh	r0, [r3, #0]
}
   22e34:	bd08      	pop	{r3, pc}
        ble_hs_sched_reset(BLE_HS_ECONTROLLER);
   22e36:	200c      	movs	r0, #12
   22e38:	f7fe ff7a 	bl	21d30 <ble_hs_sched_reset>
   22e3c:	e7fa      	b.n	22e34 <ble_hs_hci_add_avail_pkts+0x14>
   22e3e:	bf00      	nop
   22e40:	10003e0c 	.word	0x10003e0c

00022e44 <ble_hs_hci_cmd_tx_no_rsp>:
{
   22e44:	b570      	push	{r4, r5, r6, lr}
   22e46:	4604      	mov	r4, r0
   22e48:	460d      	mov	r5, r1
   22e4a:	4616      	mov	r6, r2
    ble_hs_hci_lock();
   22e4c:	f7ff ff20 	bl	22c90 <ble_hs_hci_lock>
    rc = ble_hs_hci_cmd_send_buf(opcode, cmd, cmd_len);
   22e50:	4632      	mov	r2, r6
   22e52:	4629      	mov	r1, r5
   22e54:	4620      	mov	r0, r4
   22e56:	f000 f927 	bl	230a8 <ble_hs_hci_cmd_send_buf>
   22e5a:	4604      	mov	r4, r0
    ble_hs_hci_unlock();
   22e5c:	f7ff ff22 	bl	22ca4 <ble_hs_hci_unlock>
}
   22e60:	4620      	mov	r0, r4
   22e62:	bd70      	pop	{r4, r5, r6, pc}

00022e64 <ble_hs_hci_cmd_tx>:
{
   22e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22e68:	b086      	sub	sp, #24
   22e6a:	4604      	mov	r4, r0
   22e6c:	460d      	mov	r5, r1
   22e6e:	4616      	mov	r6, r2
   22e70:	461f      	mov	r7, r3
   22e72:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
    ble_hs_hci_lock();
   22e76:	f7ff ff0b 	bl	22c90 <ble_hs_hci_lock>
    rc = ble_hs_hci_cmd_send_buf(opcode, cmd, cmd_len);
   22e7a:	4632      	mov	r2, r6
   22e7c:	4629      	mov	r1, r5
   22e7e:	4620      	mov	r0, r4
   22e80:	f000 f912 	bl	230a8 <ble_hs_hci_cmd_send_buf>
    if (rc != 0) {
   22e84:	4605      	mov	r5, r0
   22e86:	b168      	cbz	r0, 22ea4 <ble_hs_hci_cmd_tx+0x40>
    if (ble_hs_hci_ack != NULL) {
   22e88:	4b18      	ldr	r3, [pc, #96]	; (22eec <ble_hs_hci_cmd_tx+0x88>)
   22e8a:	6818      	ldr	r0, [r3, #0]
   22e8c:	b120      	cbz	r0, 22e98 <ble_hs_hci_cmd_tx+0x34>
        ble_hci_trans_buf_free((uint8_t *) ble_hs_hci_ack);
   22e8e:	f004 fdc3 	bl	27a18 <ble_hci_trans_buf_free>
        ble_hs_hci_ack = NULL;
   22e92:	4b16      	ldr	r3, [pc, #88]	; (22eec <ble_hs_hci_cmd_tx+0x88>)
   22e94:	2200      	movs	r2, #0
   22e96:	601a      	str	r2, [r3, #0]
    ble_hs_hci_unlock();
   22e98:	f7ff ff04 	bl	22ca4 <ble_hs_hci_unlock>
}
   22e9c:	4628      	mov	r0, r5
   22e9e:	b006      	add	sp, #24
   22ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = ble_hs_hci_wait_for_ack();
   22ea4:	f7ff ff06 	bl	22cb4 <ble_hs_hci_wait_for_ack>
    if (rc != 0) {
   22ea8:	4605      	mov	r5, r0
   22eaa:	b9a8      	cbnz	r0, 22ed8 <ble_hs_hci_cmd_tx+0x74>
    rc = ble_hs_hci_process_ack(opcode, rsp, rsp_len, &ack);
   22eac:	ab02      	add	r3, sp, #8
   22eae:	4642      	mov	r2, r8
   22eb0:	4639      	mov	r1, r7
   22eb2:	4620      	mov	r0, r4
   22eb4:	f7ff ff14 	bl	22ce0 <ble_hs_hci_process_ack>
    if (rc != 0) {
   22eb8:	4605      	mov	r5, r0
   22eba:	b980      	cbnz	r0, 22ede <ble_hs_hci_cmd_tx+0x7a>
    rc = ack.bha_status;
   22ebc:	9d02      	ldr	r5, [sp, #8]
    if (!rc && (ack.bha_params_len != rsp_len)) {
   22ebe:	b915      	cbnz	r5, 22ec6 <ble_hs_hci_cmd_tx+0x62>
   22ec0:	9b04      	ldr	r3, [sp, #16]
   22ec2:	4543      	cmp	r3, r8
   22ec4:	d10e      	bne.n	22ee4 <ble_hs_hci_cmd_tx+0x80>
    console_printf("opcode %d status %d rsp_len %d ack len %d\n", opcode, ack.bha_status, rsp_len, ack.bha_params_len);
   22ec6:	9b04      	ldr	r3, [sp, #16]
   22ec8:	9300      	str	r3, [sp, #0]
   22eca:	4643      	mov	r3, r8
   22ecc:	462a      	mov	r2, r5
   22ece:	4621      	mov	r1, r4
   22ed0:	4807      	ldr	r0, [pc, #28]	; (22ef0 <ble_hs_hci_cmd_tx+0x8c>)
   22ed2:	f7f5 fbd5 	bl	18680 <console_printf>
   22ed6:	e7d7      	b.n	22e88 <ble_hs_hci_cmd_tx+0x24>
        ble_hs_sched_reset(rc);
   22ed8:	f7fe ff2a 	bl	21d30 <ble_hs_sched_reset>
        goto done;
   22edc:	e7d4      	b.n	22e88 <ble_hs_hci_cmd_tx+0x24>
        ble_hs_sched_reset(rc);
   22ede:	f7fe ff27 	bl	21d30 <ble_hs_sched_reset>
        goto done;
   22ee2:	e7d1      	b.n	22e88 <ble_hs_hci_cmd_tx+0x24>
        ble_hs_sched_reset(rc);
   22ee4:	4628      	mov	r0, r5
   22ee6:	f7fe ff23 	bl	21d30 <ble_hs_sched_reset>
        goto done;
   22eea:	e7cd      	b.n	22e88 <ble_hs_hci_cmd_tx+0x24>
   22eec:	10003e08 	.word	0x10003e08
   22ef0:	0003108c 	.word	0x0003108c

00022ef4 <ble_hs_hci_rx_evt>:
{
   22ef4:	b508      	push	{r3, lr}
    switch (ev->opcode) {
   22ef6:	7803      	ldrb	r3, [r0, #0]
   22ef8:	2b0e      	cmp	r3, #14
   22efa:	d005      	beq.n	22f08 <ble_hs_hci_rx_evt+0x14>
   22efc:	2b0f      	cmp	r3, #15
   22efe:	d00d      	beq.n	22f1c <ble_hs_hci_rx_evt+0x28>
        ble_hs_enqueue_hci_event(hci_ev);
   22f00:	f7fe fef8 	bl	21cf4 <ble_hs_enqueue_hci_event>
}
   22f04:	2000      	movs	r0, #0
   22f06:	bd08      	pop	{r3, pc}
        enqueue = (cmd_complete->opcode == BLE_HCI_OPCODE_NOP);
   22f08:	f8b0 3003 	ldrh.w	r3, [r0, #3]
   22f0c:	fab3 f383 	clz	r3, r3
   22f10:	095b      	lsrs	r3, r3, #5
    if (enqueue) {
   22f12:	2b00      	cmp	r3, #0
   22f14:	d1f4      	bne.n	22f00 <ble_hs_hci_rx_evt+0xc>
        ble_hs_hci_rx_ack(hci_ev);
   22f16:	f7ff ff2b 	bl	22d70 <ble_hs_hci_rx_ack>
   22f1a:	e7f3      	b.n	22f04 <ble_hs_hci_rx_evt+0x10>
        enqueue = (cmd_status->opcode == BLE_HCI_OPCODE_NOP);
   22f1c:	8883      	ldrh	r3, [r0, #4]
   22f1e:	fab3 f383 	clz	r3, r3
   22f22:	095b      	lsrs	r3, r3, #5
        break;
   22f24:	e7f5      	b.n	22f12 <ble_hs_hci_rx_evt+0x1e>
	...

00022f28 <ble_hs_hci_acl_tx_now>:

int
ble_hs_hci_acl_tx_now(struct ble_hs_conn *conn, struct os_mbuf **om)
{
   22f28:	b570      	push	{r4, r5, r6, lr}
   22f2a:	b082      	sub	sp, #8
   22f2c:	4604      	mov	r4, r0
   22f2e:	460d      	mov	r5, r1
    uint8_t pb;
    int rc;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    txom = *om;
   22f30:	680b      	ldr	r3, [r1, #0]
   22f32:	9301      	str	r3, [sp, #4]
    *om = NULL;
   22f34:	2300      	movs	r3, #0
   22f36:	600b      	str	r3, [r1, #0]

    if (!(conn->bhc_flags & BLE_HS_CONN_F_TX_FRAG)) {
   22f38:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
   22f3c:	f016 0604 	ands.w	r6, r6, #4
   22f40:	d000      	beq.n	22f44 <ble_hs_hci_acl_tx_now+0x1c>
         * After sending the first fragment, pb gets set appropriately for all
         * subsequent fragments in this packet.
         */
        pb = BLE_HCI_PB_FIRST_NON_FLUSH;
    } else {
        pb = BLE_HCI_PB_MIDDLE;
   22f42:	2601      	movs	r6, #1
    }

    /* Send fragments until the entire packet has been sent. */
    while (txom != NULL && ble_hs_hci_avail_pkts > 0) {
   22f44:	9b01      	ldr	r3, [sp, #4]
   22f46:	b35b      	cbz	r3, 22fa0 <ble_hs_hci_acl_tx_now+0x78>
   22f48:	4a22      	ldr	r2, [pc, #136]	; (22fd4 <ble_hs_hci_acl_tx_now+0xac>)
   22f4a:	8812      	ldrh	r2, [r2, #0]
   22f4c:	b342      	cbz	r2, 22fa0 <ble_hs_hci_acl_tx_now+0x78>
        frag = mem_split_frag(&txom, ble_hs_hci_max_acl_payload_sz(),
   22f4e:	f7ff fe99 	bl	22c84 <ble_hs_hci_max_acl_payload_sz>
   22f52:	4601      	mov	r1, r0
   22f54:	2300      	movs	r3, #0
   22f56:	4a20      	ldr	r2, [pc, #128]	; (22fd8 <ble_hs_hci_acl_tx_now+0xb0>)
   22f58:	a801      	add	r0, sp, #4
   22f5a:	f7f7 f9af 	bl	1a2bc <mem_split_frag>
                              ble_hs_hci_frag_alloc, NULL);
        if (frag == NULL) {
   22f5e:	b1d8      	cbz	r0, 22f98 <ble_hs_hci_acl_tx_now+0x70>
            *om = txom;
            return BLE_HS_EAGAIN;
        }

        frag = ble_hs_hci_acl_hdr_prepend(frag, conn->bhc_handle, pb);
   22f60:	4632      	mov	r2, r6
   22f62:	88a1      	ldrh	r1, [r4, #4]
   22f64:	f7ff ff26 	bl	22db4 <ble_hs_hci_acl_hdr_prepend>
        if (frag == NULL) {
   22f68:	4606      	mov	r6, r0
   22f6a:	b328      	cbz	r0, 22fb8 <ble_hs_hci_acl_tx_now+0x90>
            goto err;
        }

#if !BLE_MONITOR
        BLE_HS_LOG(DEBUG, "ble_hs_hci_acl_tx(): ");
        ble_hs_log_mbuf(frag);
   22f6c:	f000 fc7c 	bl	23868 <ble_hs_log_mbuf>
        BLE_HS_LOG(DEBUG, "\n");
#endif

        rc = ble_hs_tx_data(frag);
   22f70:	4630      	mov	r0, r6
   22f72:	f7fe ff40 	bl	21df6 <ble_hs_tx_data>
        if (rc != 0) {
   22f76:	4606      	mov	r6, r0
   22f78:	b9f8      	cbnz	r0, 22fba <ble_hs_hci_acl_tx_now+0x92>
        }

        /* If any fragments remain, they should be marked as 'middle'
         * fragments.
         */
        conn->bhc_flags |= BLE_HS_CONN_F_TX_FRAG;
   22f7a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   22f7e:	f043 0304 	orr.w	r3, r3, #4
   22f82:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        pb = BLE_HCI_PB_MIDDLE;

        /* Account for the controller buf that will hold the txed fragment. */
        conn->bhc_outstanding_pkts++;
   22f86:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   22f88:	3301      	adds	r3, #1
   22f8a:	8723      	strh	r3, [r4, #56]	; 0x38
        ble_hs_hci_avail_pkts--;
   22f8c:	4a11      	ldr	r2, [pc, #68]	; (22fd4 <ble_hs_hci_acl_tx_now+0xac>)
   22f8e:	8813      	ldrh	r3, [r2, #0]
   22f90:	3b01      	subs	r3, #1
   22f92:	8013      	strh	r3, [r2, #0]
        pb = BLE_HCI_PB_MIDDLE;
   22f94:	2601      	movs	r6, #1
   22f96:	e7d5      	b.n	22f44 <ble_hs_hci_acl_tx_now+0x1c>
            *om = txom;
   22f98:	9b01      	ldr	r3, [sp, #4]
   22f9a:	602b      	str	r3, [r5, #0]
            return BLE_HS_EAGAIN;
   22f9c:	2601      	movs	r6, #1
   22f9e:	e015      	b.n	22fcc <ble_hs_hci_acl_tx_now+0xa4>
    }

    if (txom != NULL) {
   22fa0:	b113      	cbz	r3, 22fa8 <ble_hs_hci_acl_tx_now+0x80>
        /* The controller couldn't accommodate some or all of the packet. */
        *om = txom;
   22fa2:	602b      	str	r3, [r5, #0]
        return BLE_HS_EAGAIN;
   22fa4:	2601      	movs	r6, #1
   22fa6:	e011      	b.n	22fcc <ble_hs_hci_acl_tx_now+0xa4>
    }

    /* The entire packet was transmitted. */
    conn->bhc_flags &= ~BLE_HS_CONN_F_TX_FRAG;
   22fa8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   22fac:	f023 0304 	bic.w	r3, r3, #4
   22fb0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

    return 0;
   22fb4:	2600      	movs	r6, #0
   22fb6:	e009      	b.n	22fcc <ble_hs_hci_acl_tx_now+0xa4>
            rc = BLE_HS_ENOMEM;
   22fb8:	2606      	movs	r6, #6

err:
    BLE_HS_DBG_ASSERT(rc != 0);

    conn->bhc_flags &= ~BLE_HS_CONN_F_TX_FRAG;
   22fba:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   22fbe:	f023 0304 	bic.w	r3, r3, #4
   22fc2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    os_mbuf_free_chain(txom);
   22fc6:	9801      	ldr	r0, [sp, #4]
   22fc8:	f7f2 fb54 	bl	15674 <os_mbuf_free_chain>
    return rc;
}
   22fcc:	4630      	mov	r0, r6
   22fce:	b002      	add	sp, #8
   22fd0:	bd70      	pop	{r4, r5, r6, pc}
   22fd2:	bf00      	nop
   22fd4:	10003e0c 	.word	0x10003e0c
   22fd8:	00022d95 	.word	0x00022d95

00022fdc <ble_hs_hci_acl_tx>:
 *                                  error.
 *
 */
int
ble_hs_hci_acl_tx(struct ble_hs_conn *conn, struct os_mbuf **om)
{
   22fdc:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    /* If this conn is already backed up, don't even try to send. */
    if (STAILQ_FIRST(&conn->bhc_tx_q) != NULL) {
   22fde:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   22fe0:	b10b      	cbz	r3, 22fe6 <ble_hs_hci_acl_tx+0xa>
        return BLE_HS_EAGAIN;
   22fe2:	2001      	movs	r0, #1
    }

    return ble_hs_hci_acl_tx_now(conn, om);
}
   22fe4:	bd08      	pop	{r3, pc}
    return ble_hs_hci_acl_tx_now(conn, om);
   22fe6:	f7ff ff9f 	bl	22f28 <ble_hs_hci_acl_tx_now>
   22fea:	e7fb      	b.n	22fe4 <ble_hs_hci_acl_tx+0x8>

00022fec <ble_hs_hci_set_le_supported_feat>:

void
ble_hs_hci_set_le_supported_feat(uint32_t feat)
{
    ble_hs_hci_sup_feat = feat;
   22fec:	4b01      	ldr	r3, [pc, #4]	; (22ff4 <ble_hs_hci_set_le_supported_feat+0x8>)
   22fee:	6018      	str	r0, [r3, #0]
}
   22ff0:	4770      	bx	lr
   22ff2:	bf00      	nop
   22ff4:	10003f68 	.word	0x10003f68

00022ff8 <ble_hs_hci_set_hci_version>:
}

void
ble_hs_hci_set_hci_version(uint8_t hci_version)
{
    ble_hs_hci_version = hci_version;
   22ff8:	4b01      	ldr	r3, [pc, #4]	; (23000 <ble_hs_hci_set_hci_version+0x8>)
   22ffa:	7018      	strb	r0, [r3, #0]
}
   22ffc:	4770      	bx	lr
   22ffe:	bf00      	nop
   23000:	10003f6c 	.word	0x10003f6c

00023004 <ble_hs_hci_get_hci_version>:

uint8_t
ble_hs_hci_get_hci_version(void)
{
    return ble_hs_hci_version;
}
   23004:	4b01      	ldr	r3, [pc, #4]	; (2300c <ble_hs_hci_get_hci_version+0x8>)
   23006:	7818      	ldrb	r0, [r3, #0]
   23008:	4770      	bx	lr
   2300a:	bf00      	nop
   2300c:	10003f6c 	.word	0x10003f6c

00023010 <ble_hs_hci_init>:

void
ble_hs_hci_init(void)
{
   23010:	b500      	push	{lr}
   23012:	b083      	sub	sp, #12
    return (ble_npl_error_t)os_sem_init(&sem->sem, tokens);
   23014:	2100      	movs	r1, #0
   23016:	480a      	ldr	r0, [pc, #40]	; (23040 <ble_hs_hci_init+0x30>)
   23018:	f00a faa1 	bl	2d55e <os_sem_init>
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   2301c:	4809      	ldr	r0, [pc, #36]	; (23044 <ble_hs_hci_init+0x34>)
   2301e:	f7f3 fc53 	bl	168c8 <os_mutex_init>
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    rc = ble_npl_mutex_init(&ble_hs_hci_mutex);
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    rc = mem_init_mbuf_pool(ble_hs_hci_frag_data,
   23022:	4b09      	ldr	r3, [pc, #36]	; (23048 <ble_hs_hci_init+0x38>)
   23024:	9301      	str	r3, [sp, #4]
   23026:	f44f 738e 	mov.w	r3, #284	; 0x11c
   2302a:	9300      	str	r3, [sp, #0]
   2302c:	2301      	movs	r3, #1
   2302e:	4a07      	ldr	r2, [pc, #28]	; (2304c <ble_hs_hci_init+0x3c>)
   23030:	4907      	ldr	r1, [pc, #28]	; (23050 <ble_hs_hci_init+0x40>)
   23032:	4808      	ldr	r0, [pc, #32]	; (23054 <ble_hs_hci_init+0x44>)
   23034:	f7f7 f92a 	bl	1a28c <mem_init_mbuf_pool>
                            &ble_hs_hci_frag_mbuf_pool,
                            1,
                            BLE_HS_HCI_FRAG_MEMBLOCK_SIZE,
                            "ble_hs_hci_frag");
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);
}
   23038:	b003      	add	sp, #12
   2303a:	f85d fb04 	ldr.w	pc, [sp], #4
   2303e:	bf00      	nop
   23040:	10003f60 	.word	0x10003f60
   23044:	10003f54 	.word	0x10003f54
   23048:	000310b8 	.word	0x000310b8
   2304c:	10003f2c 	.word	0x10003f2c
   23050:	10003f38 	.word	0x10003f38
   23054:	10003e10 	.word	0x10003e10

00023058 <ble_hs_hci_cmd_transport>:
#include "ble_hs_priv.h"
#include "ble_monitor_priv.h"

static int
ble_hs_hci_cmd_transport(struct ble_hci_cmd *cmd)
{
   23058:	b508      	push	{r3, lr}
#if BLE_MONITOR
    ble_monitor_send(BLE_MONITOR_OPCODE_COMMAND_PKT, cmd,
                     cmd->length + sizeof(*cmd));
#endif

    rc = ble_hci_trans_hs_cmd_tx((uint8_t *) cmd);
   2305a:	f004 fe37 	bl	27ccc <ble_hci_trans_hs_cmd_tx>
    switch (rc) {
   2305e:	4603      	mov	r3, r0
   23060:	b110      	cbz	r0, 23068 <ble_hs_hci_cmd_transport+0x10>
   23062:	2807      	cmp	r0, #7
   23064:	d102      	bne.n	2306c <ble_hs_hci_cmd_transport+0x14>
    case 0:
        return 0;

    case BLE_ERR_MEM_CAPACITY:
        return BLE_HS_ENOMEM_EVT;
   23066:	2314      	movs	r3, #20

    default:
        return BLE_HS_EUNKNOWN;
    }
}
   23068:	4618      	mov	r0, r3
   2306a:	bd08      	pop	{r3, pc}
        return BLE_HS_EUNKNOWN;
   2306c:	2311      	movs	r3, #17
   2306e:	e7fb      	b.n	23068 <ble_hs_hci_cmd_transport+0x10>

00023070 <ble_hs_hci_cmd_send>:

static int
ble_hs_hci_cmd_send(uint16_t opcode, uint8_t len, const void *cmddata)
{
   23070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23072:	4606      	mov	r6, r0
   23074:	460d      	mov	r5, r1
   23076:	4617      	mov	r7, r2
    struct ble_hci_cmd *cmd;
    int rc;

    cmd = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_CMD);
   23078:	2003      	movs	r0, #3
   2307a:	f004 fca9 	bl	279d0 <ble_hci_trans_buf_alloc>
   2307e:	4604      	mov	r4, r0
    BLE_HS_DBG_ASSERT(cmd != NULL);

    cmd->opcode = htole16(opcode);
   23080:	8006      	strh	r6, [r0, #0]
    cmd->length = len;
   23082:	7085      	strb	r5, [r0, #2]
    if (len != 0) {
   23084:	b945      	cbnz	r5, 23098 <ble_hs_hci_cmd_send+0x28>
        memcpy(cmd->data, cmddata, len);
    }

    rc = ble_hs_hci_cmd_transport(cmd);
   23086:	4620      	mov	r0, r4
   23088:	f7ff ffe6 	bl	23058 <ble_hs_hci_cmd_transport>

    if (rc == 0) {
   2308c:	b918      	cbnz	r0, 23096 <ble_hs_hci_cmd_send+0x26>
        STATS_INC(ble_hs_stats, hci_cmd);
   2308e:	4a05      	ldr	r2, [pc, #20]	; (230a4 <ble_hs_hci_cmd_send+0x34>)
   23090:	6953      	ldr	r3, [r2, #20]
   23092:	3301      	adds	r3, #1
   23094:	6153      	str	r3, [r2, #20]
    } else {
        BLE_HS_LOG(DEBUG, "ble_hs_hci_cmd_send failure; rc=%d\n", rc);
    }

    return rc;
}
   23096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memcpy(cmd->data, cmddata, len);
   23098:	462a      	mov	r2, r5
   2309a:	4639      	mov	r1, r7
   2309c:	3003      	adds	r0, #3
   2309e:	f7f3 fd19 	bl	16ad4 <memcpy>
   230a2:	e7f0      	b.n	23086 <ble_hs_hci_cmd_send+0x16>
   230a4:	10003cec 	.word	0x10003cec

000230a8 <ble_hs_hci_cmd_send_buf>:

int
ble_hs_hci_cmd_send_buf(uint16_t opcode, const void *buf, uint8_t buf_len)
{
   230a8:	b570      	push	{r4, r5, r6, lr}
   230aa:	4604      	mov	r4, r0
   230ac:	460e      	mov	r6, r1
   230ae:	4615      	mov	r5, r2
    switch (ble_hs_sync_state) {
   230b0:	4b0a      	ldr	r3, [pc, #40]	; (230dc <ble_hs_hci_cmd_send_buf+0x34>)
   230b2:	781b      	ldrb	r3, [r3, #0]
   230b4:	2b01      	cmp	r3, #1
   230b6:	d006      	beq.n	230c6 <ble_hs_hci_cmd_send_buf+0x1e>
   230b8:	2b02      	cmp	r3, #2
   230ba:	d007      	beq.n	230cc <ble_hs_hci_cmd_send_buf+0x24>
   230bc:	b10b      	cbz	r3, 230c2 <ble_hs_hci_cmd_send_buf+0x1a>
    case BLE_HS_SYNC_STATE_GOOD:
        break;

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_HS_EUNKNOWN;
   230be:	2011      	movs	r0, #17
    }

    return ble_hs_hci_cmd_send(opcode, buf_len, buf);
}
   230c0:	bd70      	pop	{r4, r5, r6, pc}
    switch (ble_hs_sync_state) {
   230c2:	2016      	movs	r0, #22
   230c4:	e7fc      	b.n	230c0 <ble_hs_hci_cmd_send_buf+0x18>
        if (!ble_hs_is_parent_task()) {
   230c6:	f7fe fcf9 	bl	21abc <ble_hs_is_parent_task>
   230ca:	b128      	cbz	r0, 230d8 <ble_hs_hci_cmd_send_buf+0x30>
    return ble_hs_hci_cmd_send(opcode, buf_len, buf);
   230cc:	4632      	mov	r2, r6
   230ce:	4629      	mov	r1, r5
   230d0:	4620      	mov	r0, r4
   230d2:	f7ff ffcd 	bl	23070 <ble_hs_hci_cmd_send>
   230d6:	e7f3      	b.n	230c0 <ble_hs_hci_cmd_send_buf+0x18>
            return BLE_HS_ENOTSYNCED;
   230d8:	2016      	movs	r0, #22
   230da:	e7f1      	b.n	230c0 <ble_hs_hci_cmd_send_buf+0x18>
   230dc:	10003d24 	.word	0x10003d24

000230e0 <ble_hs_hci_evt_dispatch_find>:
#define BLE_HS_HCI_EVT_LE_DISPATCH_SZ \
    (sizeof ble_hs_hci_evt_le_dispatch / sizeof ble_hs_hci_evt_le_dispatch[0])

static const struct ble_hs_hci_evt_dispatch_entry *
ble_hs_hci_evt_dispatch_find(uint8_t event_code)
{
   230e0:	4601      	mov	r1, r0
    const struct ble_hs_hci_evt_dispatch_entry *entry;
    int i;

    for (i = 0; i < BLE_HS_HCI_EVT_DISPATCH_SZ; i++) {
   230e2:	2300      	movs	r3, #0
   230e4:	2b05      	cmp	r3, #5
   230e6:	d808      	bhi.n	230fa <ble_hs_hci_evt_dispatch_find+0x1a>
        entry = ble_hs_hci_evt_dispatch + i;
   230e8:	4a05      	ldr	r2, [pc, #20]	; (23100 <ble_hs_hci_evt_dispatch_find+0x20>)
   230ea:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
        if (entry->event_code == event_code) {
   230ee:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   230f2:	428a      	cmp	r2, r1
   230f4:	d002      	beq.n	230fc <ble_hs_hci_evt_dispatch_find+0x1c>
    for (i = 0; i < BLE_HS_HCI_EVT_DISPATCH_SZ; i++) {
   230f6:	3301      	adds	r3, #1
   230f8:	e7f4      	b.n	230e4 <ble_hs_hci_evt_dispatch_find+0x4>
            return entry;
        }
    }

    return NULL;
   230fa:	2000      	movs	r0, #0
}
   230fc:	4770      	bx	lr
   230fe:	bf00      	nop
   23100:	000310c8 	.word	0x000310c8

00023104 <ble_hs_hci_evt_le_dispatch_find>:

static ble_hs_hci_evt_le_fn *
ble_hs_hci_evt_le_dispatch_find(uint8_t event_code)
{
    if (event_code >= BLE_HS_HCI_EVT_LE_DISPATCH_SZ) {
   23104:	2818      	cmp	r0, #24
   23106:	d803      	bhi.n	23110 <ble_hs_hci_evt_le_dispatch_find+0xc>
        return NULL;
    }

    return ble_hs_hci_evt_le_dispatch[event_code];
   23108:	4b02      	ldr	r3, [pc, #8]	; (23114 <ble_hs_hci_evt_le_dispatch_find+0x10>)
   2310a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2310e:	4770      	bx	lr
        return NULL;
   23110:	2000      	movs	r0, #0
}
   23112:	4770      	bx	lr
   23114:	000310f8 	.word	0x000310f8

00023118 <ble_hs_hci_evt_le_meta>:
ble_hs_hci_evt_le_meta(uint8_t event_code, const void *data, unsigned int len)
{
    const struct ble_hci_ev_le_meta *ev = data;
    ble_hs_hci_evt_le_fn *fn;

    if (len < sizeof(*ev)) {
   23118:	b16a      	cbz	r2, 23136 <ble_hs_hci_evt_le_meta+0x1e>
{
   2311a:	b570      	push	{r4, r5, r6, lr}
   2311c:	460c      	mov	r4, r1
   2311e:	4616      	mov	r6, r2
        return BLE_HS_ECONTROLLER;
    }

    fn = ble_hs_hci_evt_le_dispatch_find(ev->subevent);
   23120:	780d      	ldrb	r5, [r1, #0]
   23122:	4628      	mov	r0, r5
   23124:	f7ff ffee 	bl	23104 <ble_hs_hci_evt_le_dispatch_find>
    if (fn) {
   23128:	4603      	mov	r3, r0
   2312a:	b130      	cbz	r0, 2313a <ble_hs_hci_evt_le_meta+0x22>
        return fn(ev->subevent, data, len);
   2312c:	4632      	mov	r2, r6
   2312e:	4621      	mov	r1, r4
   23130:	4628      	mov	r0, r5
   23132:	4798      	blx	r3
    }

    return 0;
}
   23134:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   23136:	200c      	movs	r0, #12
}
   23138:	4770      	bx	lr
    return 0;
   2313a:	2000      	movs	r0, #0
   2313c:	e7fa      	b.n	23134 <ble_hs_hci_evt_le_meta+0x1c>

0002313e <ble_hs_hci_evt_le_adv_rpt_first_pass>:
{
    const struct ble_hci_ev_le_subev_adv_rpt *ev = data;
    const struct adv_report *rpt;
    int i;

    if (len < sizeof(*ev)) {
   2313e:	2901      	cmp	r1, #1
   23140:	d91a      	bls.n	23178 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x3a>
{
   23142:	b410      	push	{r4}
        return BLE_HS_ECONTROLLER;
    }

    len -= sizeof(*ev);
   23144:	3902      	subs	r1, #2
    data += sizeof(*ev);
   23146:	1c84      	adds	r4, r0, #2

    if (ev->num_reports < BLE_HCI_LE_ADV_RPT_NUM_RPTS_MIN ||
   23148:	7840      	ldrb	r0, [r0, #1]
   2314a:	1e43      	subs	r3, r0, #1
   2314c:	b2db      	uxtb	r3, r3
   2314e:	2b18      	cmp	r3, #24
   23150:	d814      	bhi.n	2317c <ble_hs_hci_evt_le_adv_rpt_first_pass+0x3e>
        ev->num_reports > BLE_HCI_LE_ADV_RPT_NUM_RPTS_MAX) {
        return BLE_HS_EBADDATA;
    }

    for (i = 0; i < ev->num_reports; i++) {
   23152:	2200      	movs	r2, #0
   23154:	e003      	b.n	2315e <ble_hs_hci_evt_le_adv_rpt_first_pass+0x20>

        if (rpt->data_len > len) {
            return BLE_HS_ECONTROLLER;
        }

        len -= rpt->data_len;
   23156:	1ac9      	subs	r1, r1, r3
        data += rpt->data_len;
   23158:	3305      	adds	r3, #5
   2315a:	441c      	add	r4, r3
    for (i = 0; i < ev->num_reports; i++) {
   2315c:	3201      	adds	r2, #1
   2315e:	4290      	cmp	r0, r2
   23160:	dd07      	ble.n	23172 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x34>
        if (len < sizeof(*rpt) + 1) {
   23162:	2909      	cmp	r1, #9
   23164:	d90c      	bls.n	23180 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x42>
        len -= sizeof(*rpt) + 1;
   23166:	390a      	subs	r1, #10
        if (rpt->data_len > len) {
   23168:	7a23      	ldrb	r3, [r4, #8]
   2316a:	428b      	cmp	r3, r1
   2316c:	d9f3      	bls.n	23156 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x18>
            return BLE_HS_ECONTROLLER;
   2316e:	200c      	movs	r0, #12
   23170:	e007      	b.n	23182 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x44>
    }

    /* Make sure length was correct */
    if (len) {
   23172:	b941      	cbnz	r1, 23186 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x48>
        return BLE_HS_ECONTROLLER;
    }

    return 0;
   23174:	2000      	movs	r0, #0
   23176:	e004      	b.n	23182 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x44>
        return BLE_HS_ECONTROLLER;
   23178:	200c      	movs	r0, #12
}
   2317a:	4770      	bx	lr
        return BLE_HS_EBADDATA;
   2317c:	200a      	movs	r0, #10
   2317e:	e000      	b.n	23182 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x44>
            return BLE_HS_ECONTROLLER;
   23180:	200c      	movs	r0, #12
}
   23182:	bc10      	pop	{r4}
   23184:	4770      	bx	lr
        return BLE_HS_ECONTROLLER;
   23186:	200c      	movs	r0, #12
   23188:	e7fb      	b.n	23182 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x44>

0002318a <ble_hs_hci_evt_le_ext_adv_rpt>:

        report = (const void *) &report->data[report->data_len];
    }
#endif
    return 0;
}
   2318a:	2000      	movs	r0, #0
   2318c:	4770      	bx	lr

0002318e <ble_hs_hci_evt_le_periodic_adv_sync_estab>:

    ble_gap_rx_peroidic_adv_sync_estab(ev);
#endif

    return 0;
}
   2318e:	2000      	movs	r0, #0
   23190:	4770      	bx	lr

00023192 <ble_hs_hci_evt_le_periodic_adv_rpt>:

    ble_gap_rx_periodic_adv_rpt(ev);
#endif

return 0;
}
   23192:	2000      	movs	r0, #0
   23194:	4770      	bx	lr

00023196 <ble_hs_hci_evt_le_periodic_adv_sync_lost>:

    ble_gap_rx_periodic_adv_sync_lost(ev);

#endif
    return 0;
}
   23196:	2000      	movs	r0, #0
   23198:	4770      	bx	lr

0002319a <ble_hs_hci_evt_le_periodic_adv_sync_transfer>:

    ble_gap_rx_periodic_adv_sync_transfer(ev);

#endif
    return 0;
}
   2319a:	2000      	movs	r0, #0
   2319c:	4770      	bx	lr

0002319e <ble_hs_hci_evt_le_scan_timeout>:
    }

    ble_gap_rx_le_scan_timeout();
#endif
    return 0;
}
   2319e:	2000      	movs	r0, #0
   231a0:	4770      	bx	lr

000231a2 <ble_hs_hci_evt_le_adv_set_terminated>:
    }
    ble_gap_rx_adv_set_terminated(ev);
#endif

    return 0;
}
   231a2:	2000      	movs	r0, #0
   231a4:	4770      	bx	lr

000231a6 <ble_hs_hci_evt_le_scan_req_rcvd>:

    ble_gap_rx_scan_req_rcvd(ev);
#endif

    return 0;
}
   231a6:	2000      	movs	r0, #0
   231a8:	4770      	bx	lr

000231aa <ble_hs_hci_evt_hw_error>:
    if (len != sizeof(*ev)) {
   231aa:	2a01      	cmp	r2, #1
   231ac:	d001      	beq.n	231b2 <ble_hs_hci_evt_hw_error+0x8>
        return BLE_HS_ECONTROLLER;
   231ae:	200c      	movs	r0, #12
}
   231b0:	4770      	bx	lr
{
   231b2:	b508      	push	{r3, lr}
    ble_hs_hw_error(ev->hw_code);
   231b4:	7808      	ldrb	r0, [r1, #0]
   231b6:	f7fe fdcb 	bl	21d50 <ble_hs_hw_error>
    return 0;
   231ba:	2000      	movs	r0, #0
}
   231bc:	bd08      	pop	{r3, pc}

000231be <ble_hs_hci_evt_enc_key_refresh>:
    if (len != sizeof(*ev)) {
   231be:	2a03      	cmp	r2, #3
   231c0:	d001      	beq.n	231c6 <ble_hs_hci_evt_enc_key_refresh+0x8>
        return BLE_HS_ECONTROLLER;
   231c2:	200c      	movs	r0, #12
}
   231c4:	4770      	bx	lr
{
   231c6:	b508      	push	{r3, lr}
    ble_sm_enc_key_refresh_rx(ev);
   231c8:	4608      	mov	r0, r1
   231ca:	f002 fd6f 	bl	25cac <ble_sm_enc_key_refresh_rx>
    return 0;
   231ce:	2000      	movs	r0, #0
}
   231d0:	bd08      	pop	{r3, pc}

000231d2 <ble_hs_hci_evt_encrypt_change>:
    if (len != sizeof (*ev)) {
   231d2:	2a04      	cmp	r2, #4
   231d4:	d001      	beq.n	231da <ble_hs_hci_evt_encrypt_change+0x8>
        return BLE_HS_ECONTROLLER;
   231d6:	200c      	movs	r0, #12
}
   231d8:	4770      	bx	lr
{
   231da:	b508      	push	{r3, lr}
    ble_sm_enc_change_rx(ev);
   231dc:	4608      	mov	r0, r1
   231de:	f002 fd5b 	bl	25c98 <ble_sm_enc_change_rx>
    return 0;
   231e2:	2000      	movs	r0, #0
}
   231e4:	bd08      	pop	{r3, pc}

000231e6 <ble_hs_hci_evt_disconn_complete>:
    if (len != sizeof(*ev)) {
   231e6:	2a04      	cmp	r2, #4
   231e8:	d001      	beq.n	231ee <ble_hs_hci_evt_disconn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   231ea:	200c      	movs	r0, #12
}
   231ec:	4770      	bx	lr
{
   231ee:	b510      	push	{r4, lr}
   231f0:	460c      	mov	r4, r1
    ble_hs_lock();
   231f2:	f7fe fc87 	bl	21b04 <ble_hs_lock>
    conn = ble_hs_conn_find(le16toh(ev->conn_handle));
   231f6:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   231fa:	f7ff fadf 	bl	227bc <ble_hs_conn_find>
    if (conn != NULL) {
   231fe:	b110      	cbz	r0, 23206 <ble_hs_hci_evt_disconn_complete+0x20>
        ble_hs_hci_add_avail_pkts(conn->bhc_outstanding_pkts);
   23200:	8f00      	ldrh	r0, [r0, #56]	; 0x38
   23202:	f7ff fe0d 	bl	22e20 <ble_hs_hci_add_avail_pkts>
    ble_hs_unlock();
   23206:	f7fe fc81 	bl	21b0c <ble_hs_unlock>
    ble_gap_rx_disconn_complete(ev);
   2320a:	4620      	mov	r0, r4
   2320c:	f7fc f810 	bl	1f230 <ble_gap_rx_disconn_complete>
    ble_hs_wakeup_tx();
   23210:	f7fe fc92 	bl	21b38 <ble_hs_wakeup_tx>
    return 0;
   23214:	2000      	movs	r0, #0
}
   23216:	bd10      	pop	{r4, pc}

00023218 <ble_hs_hci_evt_num_completed_pkts>:
    if (len != sizeof(*ev) + (ev->count * sizeof(ev->completed[0]))) {
   23218:	780b      	ldrb	r3, [r1, #0]
   2321a:	009b      	lsls	r3, r3, #2
   2321c:	3301      	adds	r3, #1
   2321e:	4293      	cmp	r3, r2
   23220:	d129      	bne.n	23276 <ble_hs_hci_evt_num_completed_pkts+0x5e>
{
   23222:	b570      	push	{r4, r5, r6, lr}
   23224:	460d      	mov	r5, r1
    for (i = 0; i < ev->count; i++) {
   23226:	2400      	movs	r4, #0
   23228:	e008      	b.n	2323c <ble_hs_hci_evt_num_completed_pkts+0x24>
                    ble_hs_sched_reset(BLE_HS_ECONTROLLER);
   2322a:	200c      	movs	r0, #12
   2322c:	f7fe fd80 	bl	21d30 <ble_hs_sched_reset>
                ble_hs_hci_add_avail_pkts(num_pkts);
   23230:	4630      	mov	r0, r6
   23232:	f7ff fdf5 	bl	22e20 <ble_hs_hci_add_avail_pkts>
            ble_hs_unlock();
   23236:	f7fe fc69 	bl	21b0c <ble_hs_unlock>
    for (i = 0; i < ev->count; i++) {
   2323a:	3401      	adds	r4, #1
   2323c:	782b      	ldrb	r3, [r5, #0]
   2323e:	42a3      	cmp	r3, r4
   23240:	dd15      	ble.n	2326e <ble_hs_hci_evt_num_completed_pkts+0x56>
        num_pkts = le16toh(ev->completed[i].packets);
   23242:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   23246:	f8b3 6003 	ldrh.w	r6, [r3, #3]
        if (num_pkts > 0) {
   2324a:	2e00      	cmp	r6, #0
   2324c:	d0f5      	beq.n	2323a <ble_hs_hci_evt_num_completed_pkts+0x22>
            ble_hs_lock();
   2324e:	f7fe fc59 	bl	21b04 <ble_hs_lock>
            conn = ble_hs_conn_find(le16toh(ev->completed[i].handle));
   23252:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   23256:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   2325a:	f7ff faaf 	bl	227bc <ble_hs_conn_find>
            if (conn != NULL) {
   2325e:	2800      	cmp	r0, #0
   23260:	d0e9      	beq.n	23236 <ble_hs_hci_evt_num_completed_pkts+0x1e>
                if (conn->bhc_outstanding_pkts < num_pkts) {
   23262:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   23264:	42b3      	cmp	r3, r6
   23266:	d3e0      	bcc.n	2322a <ble_hs_hci_evt_num_completed_pkts+0x12>
                    conn->bhc_outstanding_pkts -= num_pkts;
   23268:	1b9b      	subs	r3, r3, r6
   2326a:	8703      	strh	r3, [r0, #56]	; 0x38
   2326c:	e7e0      	b.n	23230 <ble_hs_hci_evt_num_completed_pkts+0x18>
    ble_hs_wakeup_tx();
   2326e:	f7fe fc63 	bl	21b38 <ble_hs_wakeup_tx>
    return 0;
   23272:	2000      	movs	r0, #0
}
   23274:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   23276:	200c      	movs	r0, #12
}
   23278:	4770      	bx	lr

0002327a <ble_hs_hci_evt_le_phy_update_complete>:
ble_hs_hci_evt_le_phy_update_complete(uint8_t subevent, const void *data,
                                      unsigned int len)
{
    const struct ble_hci_ev_le_subev_phy_update_complete *ev = data;

    if (len != sizeof(*ev)) {
   2327a:	2a06      	cmp	r2, #6
   2327c:	d001      	beq.n	23282 <ble_hs_hci_evt_le_phy_update_complete+0x8>
        return BLE_HS_ECONTROLLER;
   2327e:	200c      	movs	r0, #12
    }

    ble_gap_rx_phy_update_complete(ev);

    return 0;
}
   23280:	4770      	bx	lr
{
   23282:	b508      	push	{r3, lr}
    ble_gap_rx_phy_update_complete(ev);
   23284:	4608      	mov	r0, r1
   23286:	f7fb fcf3 	bl	1ec70 <ble_gap_rx_phy_update_complete>
    return 0;
   2328a:	2000      	movs	r0, #0
}
   2328c:	bd08      	pop	{r3, pc}

0002328e <ble_hs_hci_evt_le_dir_adv_rpt>:
{
   2328e:	b530      	push	{r4, r5, lr}
   23290:	b087      	sub	sp, #28
    struct ble_gap_disc_desc desc = {0};
   23292:	2300      	movs	r3, #0
   23294:	9300      	str	r3, [sp, #0]
   23296:	9301      	str	r3, [sp, #4]
   23298:	9302      	str	r3, [sp, #8]
   2329a:	9304      	str	r3, [sp, #16]
   2329c:	9305      	str	r3, [sp, #20]
    if (len < sizeof(*ev) || len != ev->num_reports * sizeof(ev->reports[0])) {
   2329e:	2a01      	cmp	r2, #1
   232a0:	d932      	bls.n	23308 <ble_hs_hci_evt_le_dir_adv_rpt+0x7a>
   232a2:	460d      	mov	r5, r1
   232a4:	784b      	ldrb	r3, [r1, #1]
   232a6:	ebb2 1f03 	cmp.w	r2, r3, lsl #4
   232aa:	d12f      	bne.n	2330c <ble_hs_hci_evt_le_dir_adv_rpt+0x7e>
    desc.data = NULL;
   232ac:	2400      	movs	r4, #0
   232ae:	9403      	str	r4, [sp, #12]
    desc.length_data = 0;
   232b0:	f88d 4001 	strb.w	r4, [sp, #1]
    for (i = 0; i < ev->num_reports; i++) {
   232b4:	786b      	ldrb	r3, [r5, #1]
   232b6:	42a3      	cmp	r3, r4
   232b8:	dd23      	ble.n	23302 <ble_hs_hci_evt_le_dir_adv_rpt+0x74>
        desc.event_type = ev->reports[i].type;
   232ba:	eb05 1304 	add.w	r3, r5, r4, lsl #4
   232be:	789a      	ldrb	r2, [r3, #2]
   232c0:	f88d 2000 	strb.w	r2, [sp]
        desc.addr.type = ev->reports[i].addr_type;
   232c4:	78da      	ldrb	r2, [r3, #3]
   232c6:	f88d 2002 	strb.w	r2, [sp, #2]
        memcpy(desc.addr.val, ev->reports[i].addr, BLE_DEV_ADDR_LEN);
   232ca:	461a      	mov	r2, r3
   232cc:	f852 1f04 	ldr.w	r1, [r2, #4]!
   232d0:	f8cd 1003 	str.w	r1, [sp, #3]
   232d4:	8892      	ldrh	r2, [r2, #4]
   232d6:	f8ad 2007 	strh.w	r2, [sp, #7]
        desc.direct_addr.type = ev->reports[i].dir_addr_type;
   232da:	7a9a      	ldrb	r2, [r3, #10]
   232dc:	f88d 2010 	strb.w	r2, [sp, #16]
        memcpy(desc.direct_addr.val, ev->reports[i].dir_addr, BLE_DEV_ADDR_LEN);
   232e0:	461a      	mov	r2, r3
   232e2:	f852 1f0b 	ldr.w	r1, [r2, #11]!
   232e6:	f8cd 1011 	str.w	r1, [sp, #17]
   232ea:	8892      	ldrh	r2, [r2, #4]
   232ec:	f8ad 2015 	strh.w	r2, [sp, #21]
        desc.rssi = ev->reports[i].rssi;
   232f0:	f993 3011 	ldrsb.w	r3, [r3, #17]
   232f4:	f88d 3009 	strb.w	r3, [sp, #9]
        ble_gap_rx_adv_report(&desc);
   232f8:	4668      	mov	r0, sp
   232fa:	f7fb fc90 	bl	1ec1e <ble_gap_rx_adv_report>
    for (i = 0; i < ev->num_reports; i++) {
   232fe:	3401      	adds	r4, #1
   23300:	e7d8      	b.n	232b4 <ble_hs_hci_evt_le_dir_adv_rpt+0x26>
    return 0;
   23302:	2000      	movs	r0, #0
}
   23304:	b007      	add	sp, #28
   23306:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ECONTROLLER;
   23308:	200c      	movs	r0, #12
   2330a:	e7fb      	b.n	23304 <ble_hs_hci_evt_le_dir_adv_rpt+0x76>
   2330c:	200c      	movs	r0, #12
   2330e:	e7f9      	b.n	23304 <ble_hs_hci_evt_le_dir_adv_rpt+0x76>

00023310 <ble_hs_hci_evt_le_adv_rpt>:
{
   23310:	b5f0      	push	{r4, r5, r6, r7, lr}
   23312:	b087      	sub	sp, #28
   23314:	460e      	mov	r6, r1
    struct ble_gap_disc_desc desc = {0};
   23316:	2300      	movs	r3, #0
   23318:	9300      	str	r3, [sp, #0]
   2331a:	9301      	str	r3, [sp, #4]
   2331c:	9302      	str	r3, [sp, #8]
   2331e:	9303      	str	r3, [sp, #12]
   23320:	9304      	str	r3, [sp, #16]
   23322:	9305      	str	r3, [sp, #20]
    rc = ble_hs_hci_evt_le_adv_rpt_first_pass(data, len);
   23324:	4611      	mov	r1, r2
   23326:	4630      	mov	r0, r6
   23328:	f7ff ff09 	bl	2313e <ble_hs_hci_evt_le_adv_rpt_first_pass>
    if (rc != 0) {
   2332c:	4607      	mov	r7, r0
   2332e:	bb58      	cbnz	r0, 23388 <ble_hs_hci_evt_le_adv_rpt+0x78>
    data += sizeof(*ev);
   23330:	1cb3      	adds	r3, r6, #2
    desc.direct_addr = *BLE_ADDR_ANY;
   23332:	2200      	movs	r2, #0
   23334:	9204      	str	r2, [sp, #16]
   23336:	f8cd 2013 	str.w	r2, [sp, #19]
    for (i = 0; i < ev->num_reports; i++) {
   2333a:	4605      	mov	r5, r0
   2333c:	7872      	ldrb	r2, [r6, #1]
   2333e:	42aa      	cmp	r2, r5
   23340:	dd22      	ble.n	23388 <ble_hs_hci_evt_le_adv_rpt+0x78>
        data += sizeof(rpt) + rpt->data_len + 1;
   23342:	7a1c      	ldrb	r4, [r3, #8]
   23344:	3405      	adds	r4, #5
   23346:	441c      	add	r4, r3
        desc.event_type = rpt->type;
   23348:	781a      	ldrb	r2, [r3, #0]
   2334a:	f88d 2000 	strb.w	r2, [sp]
        desc.addr.type = rpt->addr_type;
   2334e:	785a      	ldrb	r2, [r3, #1]
   23350:	f88d 2002 	strb.w	r2, [sp, #2]
        memcpy(desc.addr.val, rpt->addr, BLE_DEV_ADDR_LEN);
   23354:	461a      	mov	r2, r3
   23356:	f852 1f02 	ldr.w	r1, [r2, #2]!
   2335a:	f8cd 1003 	str.w	r1, [sp, #3]
   2335e:	8892      	ldrh	r2, [r2, #4]
   23360:	f8ad 2007 	strh.w	r2, [sp, #7]
        desc.length_data = rpt->data_len;
   23364:	7a1a      	ldrb	r2, [r3, #8]
   23366:	f88d 2001 	strb.w	r2, [sp, #1]
        desc.data = rpt->data;
   2336a:	f103 0209 	add.w	r2, r3, #9
   2336e:	9203      	str	r2, [sp, #12]
        desc.rssi = rpt->data[rpt->data_len];
   23370:	7a1a      	ldrb	r2, [r3, #8]
   23372:	4413      	add	r3, r2
   23374:	f993 3009 	ldrsb.w	r3, [r3, #9]
   23378:	f88d 3009 	strb.w	r3, [sp, #9]
        ble_gap_rx_adv_report(&desc);
   2337c:	4668      	mov	r0, sp
   2337e:	f7fb fc4e 	bl	1ec1e <ble_gap_rx_adv_report>
    for (i = 0; i < ev->num_reports; i++) {
   23382:	3501      	adds	r5, #1
        data += sizeof(rpt) + rpt->data_len + 1;
   23384:	4623      	mov	r3, r4
   23386:	e7d9      	b.n	2333c <ble_hs_hci_evt_le_adv_rpt+0x2c>
}
   23388:	4638      	mov	r0, r7
   2338a:	b007      	add	sp, #28
   2338c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002338e <ble_hs_hci_evt_le_enh_conn_complete>:
    if (len != sizeof(*ev)) {
   2338e:	2a1f      	cmp	r2, #31
   23390:	d001      	beq.n	23396 <ble_hs_hci_evt_le_enh_conn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   23392:	200c      	movs	r0, #12
}
   23394:	4770      	bx	lr
{
   23396:	b510      	push	{r4, lr}
   23398:	b088      	sub	sp, #32
   2339a:	460c      	mov	r4, r1
    memset(&evt, 0, sizeof(evt));
   2339c:	2220      	movs	r2, #32
   2339e:	2100      	movs	r1, #0
   233a0:	4668      	mov	r0, sp
   233a2:	f7f3 fbbc 	bl	16b1e <memset>
    evt.status = ev->status;
   233a6:	7863      	ldrb	r3, [r4, #1]
   233a8:	f88d 3000 	strb.w	r3, [sp]
    if (evt.status == BLE_ERR_SUCCESS) {
   233ac:	bb63      	cbnz	r3, 23408 <ble_hs_hci_evt_le_enh_conn_complete+0x7a>
        evt.connection_handle = le16toh(ev->conn_handle);
   233ae:	8863      	ldrh	r3, [r4, #2]
   233b0:	f8ad 3002 	strh.w	r3, [sp, #2]
        evt.role = ev->role;
   233b4:	7923      	ldrb	r3, [r4, #4]
   233b6:	f88d 3004 	strb.w	r3, [sp, #4]
        evt.peer_addr_type = ev->peer_addr_type;
   233ba:	7963      	ldrb	r3, [r4, #5]
   233bc:	f88d 3005 	strb.w	r3, [sp, #5]
        memcpy(evt.peer_addr, ev->peer_addr, BLE_DEV_ADDR_LEN);
   233c0:	4623      	mov	r3, r4
   233c2:	f853 2f06 	ldr.w	r2, [r3, #6]!
   233c6:	f8cd 2006 	str.w	r2, [sp, #6]
   233ca:	889b      	ldrh	r3, [r3, #4]
   233cc:	f8ad 300a 	strh.w	r3, [sp, #10]
        memcpy(evt.local_rpa, ev->local_rpa, BLE_DEV_ADDR_LEN);
   233d0:	4623      	mov	r3, r4
   233d2:	f853 2f0c 	ldr.w	r2, [r3, #12]!
   233d6:	f8cd 2013 	str.w	r2, [sp, #19]
   233da:	889b      	ldrh	r3, [r3, #4]
   233dc:	f8ad 3017 	strh.w	r3, [sp, #23]
        memcpy(evt.peer_rpa,ev->peer_rpa, BLE_DEV_ADDR_LEN);
   233e0:	4623      	mov	r3, r4
   233e2:	f853 2f12 	ldr.w	r2, [r3, #18]!
   233e6:	f8cd 2019 	str.w	r2, [sp, #25]
   233ea:	889b      	ldrh	r3, [r3, #4]
   233ec:	f8ad 301d 	strh.w	r3, [sp, #29]
        evt.conn_itvl = le16toh(ev->conn_itvl);
   233f0:	8b23      	ldrh	r3, [r4, #24]
   233f2:	f8ad 300c 	strh.w	r3, [sp, #12]
        evt.conn_latency = le16toh(ev->conn_latency);
   233f6:	8b63      	ldrh	r3, [r4, #26]
   233f8:	f8ad 300e 	strh.w	r3, [sp, #14]
        evt.supervision_timeout = le16toh(ev->supervision_timeout);
   233fc:	8ba3      	ldrh	r3, [r4, #28]
   233fe:	f8ad 3010 	strh.w	r3, [sp, #16]
        evt.master_clk_acc = ev->mca;
   23402:	7fa3      	ldrb	r3, [r4, #30]
   23404:	f88d 3012 	strb.w	r3, [sp, #18]
    return ble_gap_rx_conn_complete(&evt, 0);
   23408:	2100      	movs	r1, #0
   2340a:	4668      	mov	r0, sp
   2340c:	f7fb fd32 	bl	1ee74 <ble_gap_rx_conn_complete>
}
   23410:	b008      	add	sp, #32
   23412:	bd10      	pop	{r4, pc}

00023414 <ble_hs_hci_evt_le_conn_complete>:
    if (len != sizeof(*ev)) {
   23414:	2a13      	cmp	r2, #19
   23416:	d001      	beq.n	2341c <ble_hs_hci_evt_le_conn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   23418:	200c      	movs	r0, #12
}
   2341a:	4770      	bx	lr
{
   2341c:	b510      	push	{r4, lr}
   2341e:	b088      	sub	sp, #32
   23420:	460c      	mov	r4, r1
    memset(&evt, 0, sizeof(evt));
   23422:	2220      	movs	r2, #32
   23424:	2100      	movs	r1, #0
   23426:	4668      	mov	r0, sp
   23428:	f7f3 fb79 	bl	16b1e <memset>
    evt.status = ev->status;
   2342c:	7863      	ldrb	r3, [r4, #1]
   2342e:	f88d 3000 	strb.w	r3, [sp]
    if (evt.status == BLE_ERR_SUCCESS) {
   23432:	b9e3      	cbnz	r3, 2346e <ble_hs_hci_evt_le_conn_complete+0x5a>
        evt.connection_handle = le16toh(ev->conn_handle);
   23434:	8863      	ldrh	r3, [r4, #2]
   23436:	f8ad 3002 	strh.w	r3, [sp, #2]
        evt.role = ev->role;
   2343a:	7923      	ldrb	r3, [r4, #4]
   2343c:	f88d 3004 	strb.w	r3, [sp, #4]
        evt.peer_addr_type = ev->peer_addr_type;
   23440:	7963      	ldrb	r3, [r4, #5]
   23442:	f88d 3005 	strb.w	r3, [sp, #5]
        memcpy(evt.peer_addr, ev->peer_addr, BLE_DEV_ADDR_LEN);
   23446:	4623      	mov	r3, r4
   23448:	f853 2f06 	ldr.w	r2, [r3, #6]!
   2344c:	f8cd 2006 	str.w	r2, [sp, #6]
   23450:	889b      	ldrh	r3, [r3, #4]
   23452:	f8ad 300a 	strh.w	r3, [sp, #10]
        evt.conn_itvl = le16toh(ev->conn_itvl);
   23456:	89a3      	ldrh	r3, [r4, #12]
   23458:	f8ad 300c 	strh.w	r3, [sp, #12]
        evt.conn_latency = le16toh(ev->conn_latency);
   2345c:	89e3      	ldrh	r3, [r4, #14]
   2345e:	f8ad 300e 	strh.w	r3, [sp, #14]
        evt.supervision_timeout = le16toh(ev->supervision_timeout);
   23462:	8a23      	ldrh	r3, [r4, #16]
   23464:	f8ad 3010 	strh.w	r3, [sp, #16]
        evt.master_clk_acc = ev->mca;
   23468:	7ca3      	ldrb	r3, [r4, #18]
   2346a:	f88d 3012 	strb.w	r3, [sp, #18]
    return ble_gap_rx_conn_complete(&evt, 0);
   2346e:	2100      	movs	r1, #0
   23470:	4668      	mov	r0, sp
   23472:	f7fb fcff 	bl	1ee74 <ble_gap_rx_conn_complete>
}
   23476:	b008      	add	sp, #32
   23478:	bd10      	pop	{r4, pc}

0002347a <ble_hs_hci_evt_le_conn_parm_req>:
    if (len != sizeof(*ev)) {
   2347a:	2a0b      	cmp	r2, #11
   2347c:	d001      	beq.n	23482 <ble_hs_hci_evt_le_conn_parm_req+0x8>
        return BLE_HS_ECONTROLLER;
   2347e:	200c      	movs	r0, #12
}
   23480:	4770      	bx	lr
{
   23482:	b508      	push	{r3, lr}
    ble_gap_rx_param_req(ev);
   23484:	4608      	mov	r0, r1
   23486:	f7fb ffb1 	bl	1f3ec <ble_gap_rx_param_req>
    return 0;
   2348a:	2000      	movs	r0, #0
}
   2348c:	bd08      	pop	{r3, pc}

0002348e <ble_hs_hci_evt_le_lt_key_req>:
    if (len != sizeof(*ev)) {
   2348e:	2a0d      	cmp	r2, #13
   23490:	d001      	beq.n	23496 <ble_hs_hci_evt_le_lt_key_req+0x8>
        return BLE_HS_ECONTROLLER;
   23492:	200c      	movs	r0, #12
}
   23494:	4770      	bx	lr
{
   23496:	b508      	push	{r3, lr}
    ble_sm_ltk_req_rx(ev);
   23498:	4608      	mov	r0, r1
   2349a:	f002 fc0f 	bl	25cbc <ble_sm_ltk_req_rx>
    return 0;
   2349e:	2000      	movs	r0, #0
}
   234a0:	bd08      	pop	{r3, pc}

000234a2 <ble_hs_hci_evt_le_rd_rem_used_feat_complete>:
    if (len != sizeof(*ev)) {
   234a2:	2a0c      	cmp	r2, #12
   234a4:	d001      	beq.n	234aa <ble_hs_hci_evt_le_rd_rem_used_feat_complete+0x8>
        return BLE_HS_ECONTROLLER;
   234a6:	200c      	movs	r0, #12
}
   234a8:	4770      	bx	lr
{
   234aa:	b508      	push	{r3, lr}
    ble_gap_rx_rd_rem_sup_feat_complete(ev);
   234ac:	4608      	mov	r0, r1
   234ae:	f7fb fbb7 	bl	1ec20 <ble_gap_rx_rd_rem_sup_feat_complete>
    return 0;
   234b2:	2000      	movs	r0, #0
}
   234b4:	bd08      	pop	{r3, pc}

000234b6 <ble_hs_hci_evt_le_conn_upd_complete>:
    if (len != sizeof(*ev)) {
   234b6:	2a0a      	cmp	r2, #10
   234b8:	d001      	beq.n	234be <ble_hs_hci_evt_le_conn_upd_complete+0x8>
        return BLE_HS_ECONTROLLER;
   234ba:	200c      	movs	r0, #12
}
   234bc:	4770      	bx	lr
{
   234be:	b508      	push	{r3, lr}
    ble_gap_rx_update_complete(ev);
   234c0:	4608      	mov	r0, r1
   234c2:	f7fb ff03 	bl	1f2cc <ble_gap_rx_update_complete>
    return 0;
   234c6:	2000      	movs	r0, #0
}
   234c8:	bd08      	pop	{r3, pc}
	...

000234cc <ble_hs_hci_evt_process>:
#endif

int
ble_hs_hci_evt_process(const struct ble_hci_ev *ev)
{
   234cc:	b538      	push	{r3, r4, r5, lr}
   234ce:	4604      	mov	r4, r0
    const struct ble_hs_hci_evt_dispatch_entry *entry;
    int rc;

    /* Count events received */
    STATS_INC(ble_hs_stats, hci_event);
   234d0:	4a0c      	ldr	r2, [pc, #48]	; (23504 <ble_hs_hci_evt_process+0x38>)
   234d2:	6993      	ldr	r3, [r2, #24]
   234d4:	3301      	adds	r3, #1
   234d6:	6193      	str	r3, [r2, #24]


    entry = ble_hs_hci_evt_dispatch_find(ev->opcode);
   234d8:	7805      	ldrb	r5, [r0, #0]
   234da:	4628      	mov	r0, r5
   234dc:	f7ff fe00 	bl	230e0 <ble_hs_hci_evt_dispatch_find>
    if (entry == NULL) {
   234e0:	b150      	cbz	r0, 234f8 <ble_hs_hci_evt_process+0x2c>
        STATS_INC(ble_hs_stats, hci_unknown_event);
        rc = BLE_HS_ENOTSUP;
    } else {
        rc = entry->cb(ev->opcode, ev->data, ev->length);
   234e2:	6843      	ldr	r3, [r0, #4]
   234e4:	7862      	ldrb	r2, [r4, #1]
   234e6:	1ca1      	adds	r1, r4, #2
   234e8:	4628      	mov	r0, r5
   234ea:	4798      	blx	r3
   234ec:	4605      	mov	r5, r0
    }

    ble_hci_trans_buf_free((uint8_t *) ev);
   234ee:	4620      	mov	r0, r4
   234f0:	f004 fa92 	bl	27a18 <ble_hci_trans_buf_free>

    return rc;
}
   234f4:	4628      	mov	r0, r5
   234f6:	bd38      	pop	{r3, r4, r5, pc}
        STATS_INC(ble_hs_stats, hci_unknown_event);
   234f8:	4a02      	ldr	r2, [pc, #8]	; (23504 <ble_hs_hci_evt_process+0x38>)
   234fa:	6a13      	ldr	r3, [r2, #32]
   234fc:	3301      	adds	r3, #1
   234fe:	6213      	str	r3, [r2, #32]
        rc = BLE_HS_ENOTSUP;
   23500:	2508      	movs	r5, #8
   23502:	e7f4      	b.n	234ee <ble_hs_hci_evt_process+0x22>
   23504:	10003cec 	.word	0x10003cec

00023508 <ble_hs_hci_evt_acl_process>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_hci_evt_acl_process(struct os_mbuf *om)
{
   23508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2350c:	b086      	sub	sp, #24
   2350e:	4604      	mov	r4, r0
    ble_l2cap_rx_fn *rx_cb;
    uint16_t conn_handle;
    int reject_cid;
    int rc;

    rc = ble_hs_hci_util_data_hdr_strip(om, &hci_hdr);
   23510:	a905      	add	r1, sp, #20
   23512:	f000 f8a5 	bl	23660 <ble_hs_hci_util_data_hdr_strip>
    if (rc != 0) {
   23516:	4605      	mov	r5, r0
   23518:	b130      	cbz	r0, 23528 <ble_hs_hci_evt_acl_process+0x20>
    }

    return 0;

err:
    os_mbuf_free_chain(om);
   2351a:	4620      	mov	r0, r4
   2351c:	f7f2 f8aa 	bl	15674 <os_mbuf_free_chain>
    return rc;
#else
    return BLE_HS_ENOTSUP;
#endif
}
   23520:	4628      	mov	r0, r5
   23522:	b006      	add	sp, #24
   23524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_log_mbuf(om);
   23528:	4620      	mov	r0, r4
   2352a:	f000 f99d 	bl	23868 <ble_hs_log_mbuf>
    if (hci_hdr.hdh_len != OS_MBUF_PKTHDR(om)->omp_len) {
   2352e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23532:	8a23      	ldrh	r3, [r4, #16]
   23534:	429a      	cmp	r2, r3
   23536:	d001      	beq.n	2353c <ble_hs_hci_evt_acl_process+0x34>
        rc = BLE_HS_EBADDATA;
   23538:	250a      	movs	r5, #10
   2353a:	e7ee      	b.n	2351a <ble_hs_hci_evt_acl_process+0x12>
    conn_handle = BLE_HCI_DATA_HANDLE(hci_hdr.hdh_handle_pb_bc);
   2353c:	f8bd 7014 	ldrh.w	r7, [sp, #20]
   23540:	f3c7 070b 	ubfx	r7, r7, #0, #12
    ble_hs_lock();
   23544:	f7fe fade 	bl	21b04 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   23548:	4638      	mov	r0, r7
   2354a:	f7ff f937 	bl	227bc <ble_hs_conn_find>
    if (conn == NULL) {
   2354e:	4680      	mov	r8, r0
   23550:	b198      	cbz	r0, 2357a <ble_hs_hci_evt_acl_process+0x72>
        rc = ble_l2cap_rx(conn, &hci_hdr, om, &rx_cb, &reject_cid);
   23552:	ab03      	add	r3, sp, #12
   23554:	9300      	str	r3, [sp, #0]
   23556:	ab04      	add	r3, sp, #16
   23558:	4622      	mov	r2, r4
   2355a:	a905      	add	r1, sp, #20
   2355c:	f000 fddb 	bl	24116 <ble_l2cap_rx>
   23560:	4606      	mov	r6, r0
        om = NULL;
   23562:	2400      	movs	r4, #0
    ble_hs_unlock();
   23564:	f7fe fad2 	bl	21b0c <ble_hs_unlock>
    switch (rc) {
   23568:	b166      	cbz	r6, 23584 <ble_hs_hci_evt_acl_process+0x7c>
   2356a:	2e01      	cmp	r6, #1
   2356c:	d0d8      	beq.n	23520 <ble_hs_hci_evt_acl_process+0x18>
        if (reject_cid != -1) {
   2356e:	9b03      	ldr	r3, [sp, #12]
   23570:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   23574:	d111      	bne.n	2359a <ble_hs_hci_evt_acl_process+0x92>
        goto err;
   23576:	4635      	mov	r5, r6
   23578:	e7cf      	b.n	2351a <ble_hs_hci_evt_acl_process+0x12>
        reject_cid = -1;
   2357a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2357e:	9303      	str	r3, [sp, #12]
        rc = BLE_HS_ENOTCONN;
   23580:	2607      	movs	r6, #7
   23582:	e7ef      	b.n	23564 <ble_hs_hci_evt_acl_process+0x5c>
        rc = rx_cb(conn->bhc_rx_chan);
   23584:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
   23588:	9b04      	ldr	r3, [sp, #16]
   2358a:	4798      	blx	r3
        ble_l2cap_remove_rx(conn, conn->bhc_rx_chan);
   2358c:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
   23590:	4640      	mov	r0, r8
   23592:	f000 fd90 	bl	240b6 <ble_l2cap_remove_rx>
    return 0;
   23596:	4635      	mov	r5, r6
        break;
   23598:	e7c2      	b.n	23520 <ble_hs_hci_evt_acl_process+0x18>
            ble_l2cap_sig_reject_invalid_cid_tx(conn_handle, 0, 0, reject_cid);
   2359a:	b29b      	uxth	r3, r3
   2359c:	2200      	movs	r2, #0
   2359e:	4611      	mov	r1, r2
   235a0:	4638      	mov	r0, r7
   235a2:	f001 f93b 	bl	2481c <ble_l2cap_sig_reject_invalid_cid_tx>
   235a6:	e7e6      	b.n	23576 <ble_hs_hci_evt_acl_process+0x6e>

000235a8 <ble_hs_hci_util_handle_pb_bc_join>:
{
    BLE_HS_DBG_ASSERT(handle <= 0x0fff);
    BLE_HS_DBG_ASSERT(pb <= 0x03);
    BLE_HS_DBG_ASSERT(bc <= 0x03);

    return (handle  << 0)   |
   235a8:	ea40 3001 	orr.w	r0, r0, r1, lsl #12
   235ac:	b200      	sxth	r0, r0
           (pb      << 12)  |
   235ae:	ea40 3082 	orr.w	r0, r0, r2, lsl #14
           (bc      << 14);
}
   235b2:	b280      	uxth	r0, r0
   235b4:	4770      	bx	lr
	...

000235b8 <ble_hs_hci_util_read_adv_tx_pwr>:

int
ble_hs_hci_util_read_adv_tx_pwr(int8_t *out_tx_pwr)
{
   235b8:	b530      	push	{r4, r5, lr}
   235ba:	b085      	sub	sp, #20
   235bc:	4604      	mov	r4, r0
    struct ble_hci_le_rd_adv_chan_txpwr_rp rsp;
    int rc;

    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   235be:	2301      	movs	r3, #1
   235c0:	9300      	str	r3, [sp, #0]
   235c2:	ab03      	add	r3, sp, #12
   235c4:	2200      	movs	r2, #0
   235c6:	4611      	mov	r1, r2
   235c8:	f242 0007 	movw	r0, #8199	; 0x2007
   235cc:	f7ff fc4a 	bl	22e64 <ble_hs_hci_cmd_tx>
                                      BLE_HCI_OCF_LE_RD_ADV_CHAN_TXPWR),
                           NULL, 0, &rsp, sizeof(rsp));
    if (rc != 0) {
   235d0:	4605      	mov	r5, r0
   235d2:	b930      	cbnz	r0, 235e2 <ble_hs_hci_util_read_adv_tx_pwr+0x2a>
        return rc;
    }

    *out_tx_pwr = rsp.power_level;
   235d4:	f99d 300c 	ldrsb.w	r3, [sp, #12]
   235d8:	7023      	strb	r3, [r4, #0]

    if (*out_tx_pwr < BLE_HCI_ADV_CHAN_TXPWR_MIN ||
   235da:	3314      	adds	r3, #20
   235dc:	b2db      	uxtb	r3, r3
   235de:	2b1e      	cmp	r3, #30
   235e0:	d802      	bhi.n	235e8 <ble_hs_hci_util_read_adv_tx_pwr+0x30>
        *out_tx_pwr > BLE_HCI_ADV_CHAN_TXPWR_MAX) {
        BLE_HS_LOG(WARN, "advertiser txpwr out of range\n");
    }

    return 0;
}
   235e2:	4628      	mov	r0, r5
   235e4:	b005      	add	sp, #20
   235e6:	bd30      	pop	{r4, r5, pc}
        BLE_HS_LOG(WARN, "advertiser txpwr out of range\n");
   235e8:	4a02      	ldr	r2, [pc, #8]	; (235f4 <ble_hs_hci_util_read_adv_tx_pwr+0x3c>)
   235ea:	2102      	movs	r1, #2
   235ec:	2004      	movs	r0, #4
   235ee:	f7f6 f8b3 	bl	19758 <modlog_printf>
   235f2:	e7f6      	b.n	235e2 <ble_hs_hci_util_read_adv_tx_pwr+0x2a>
   235f4:	0003115c 	.word	0x0003115c

000235f8 <ble_hs_hci_util_rand>:

int
ble_hs_hci_util_rand(void *dst, int len)
{
   235f8:	b570      	push	{r4, r5, r6, lr}
   235fa:	b084      	sub	sp, #16
   235fc:	4606      	mov	r6, r0
   235fe:	460c      	mov	r4, r1
    uint8_t *u8ptr;
    int chunk_sz;
    int rc;

    u8ptr = dst;
    while (len > 0) {
   23600:	2c00      	cmp	r4, #0
   23602:	dd16      	ble.n	23632 <ble_hs_hci_util_rand+0x3a>
        rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE, BLE_HCI_OCF_LE_RAND),
   23604:	2308      	movs	r3, #8
   23606:	9300      	str	r3, [sp, #0]
   23608:	446b      	add	r3, sp
   2360a:	2200      	movs	r2, #0
   2360c:	4611      	mov	r1, r2
   2360e:	f242 0018 	movw	r0, #8216	; 0x2018
   23612:	f7ff fc27 	bl	22e64 <ble_hs_hci_cmd_tx>
                               NULL, 0, &rsp, sizeof(rsp));
        if (rc != 0) {
   23616:	4603      	mov	r3, r0
   23618:	b960      	cbnz	r0, 23634 <ble_hs_hci_util_rand+0x3c>
            return rc;
        }

        chunk_sz = min(len, sizeof(rsp));
   2361a:	4625      	mov	r5, r4
   2361c:	2c08      	cmp	r4, #8
   2361e:	bf28      	it	cs
   23620:	2508      	movcs	r5, #8
        memcpy(u8ptr, &rsp.random_number, chunk_sz);
   23622:	462a      	mov	r2, r5
   23624:	a902      	add	r1, sp, #8
   23626:	4630      	mov	r0, r6
   23628:	f7f3 fa54 	bl	16ad4 <memcpy>

        len -= chunk_sz;
   2362c:	1b64      	subs	r4, r4, r5
        u8ptr += chunk_sz;
   2362e:	442e      	add	r6, r5
   23630:	e7e6      	b.n	23600 <ble_hs_hci_util_rand+0x8>
    }

    return 0;
   23632:	2300      	movs	r3, #0
}
   23634:	4618      	mov	r0, r3
   23636:	b004      	add	sp, #16
   23638:	bd70      	pop	{r4, r5, r6, pc}

0002363a <ble_hs_hci_util_set_random_addr>:
    return 0;
}

int
ble_hs_hci_util_set_random_addr(const uint8_t *addr)
{
   2363a:	b500      	push	{lr}
   2363c:	b085      	sub	sp, #20
   2363e:	4603      	mov	r3, r0
    struct ble_hci_le_set_rand_addr_cp cmd;

    memcpy(cmd.addr, addr, BLE_DEV_ADDR_LEN);
   23640:	6800      	ldr	r0, [r0, #0]
   23642:	9002      	str	r0, [sp, #8]
   23644:	889b      	ldrh	r3, [r3, #4]
   23646:	f8ad 300c 	strh.w	r3, [sp, #12]

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2364a:	2300      	movs	r3, #0
   2364c:	9300      	str	r3, [sp, #0]
   2364e:	2206      	movs	r2, #6
   23650:	a902      	add	r1, sp, #8
   23652:	f242 0005 	movw	r0, #8197	; 0x2005
   23656:	f7ff fc05 	bl	22e64 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_SET_RAND_ADDR),
                             &cmd, sizeof(cmd), NULL, 0);
}
   2365a:	b005      	add	sp, #20
   2365c:	f85d fb04 	ldr.w	pc, [sp], #4

00023660 <ble_hs_hci_util_data_hdr_strip>:
}

int
ble_hs_hci_util_data_hdr_strip(struct os_mbuf *om,
                               struct hci_data_hdr *out_hdr)
{
   23660:	b570      	push	{r4, r5, r6, lr}
   23662:	4605      	mov	r5, r0
   23664:	460c      	mov	r4, r1
    int rc;

    rc = os_mbuf_copydata(om, 0, BLE_HCI_DATA_HDR_SZ, out_hdr);
   23666:	460b      	mov	r3, r1
   23668:	2204      	movs	r2, #4
   2366a:	2100      	movs	r1, #0
   2366c:	f7f2 f8ac 	bl	157c8 <os_mbuf_copydata>
    if (rc != 0) {
   23670:	b980      	cbnz	r0, 23694 <ble_hs_hci_util_data_hdr_strip+0x34>
   23672:	4606      	mov	r6, r0
        return BLE_HS_ECONTROLLER;
    }

    /* Strip HCI ACL data header from the front of the packet. */
    os_mbuf_adj(om, BLE_HCI_DATA_HDR_SZ);
   23674:	2104      	movs	r1, #4
   23676:	4628      	mov	r0, r5
   23678:	f7f2 f8d3 	bl	15822 <os_mbuf_adj>

    out_hdr->hdh_handle_pb_bc = get_le16(&out_hdr->hdh_handle_pb_bc);
   2367c:	4620      	mov	r0, r4
   2367e:	f009 ff19 	bl	2d4b4 <get_le16>
   23682:	4623      	mov	r3, r4
   23684:	f823 0b02 	strh.w	r0, [r3], #2
    out_hdr->hdh_len = get_le16(&out_hdr->hdh_len);
   23688:	4618      	mov	r0, r3
   2368a:	f009 ff13 	bl	2d4b4 <get_le16>
   2368e:	8060      	strh	r0, [r4, #2]

    return 0;
}
   23690:	4630      	mov	r0, r6
   23692:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   23694:	260c      	movs	r6, #12
   23696:	e7fb      	b.n	23690 <ble_hs_hci_util_data_hdr_strip+0x30>

00023698 <ble_hs_id_set_pub>:
static uint8_t ble_hs_id_pub[6];
static uint8_t ble_hs_id_rnd[6];

void
ble_hs_id_set_pub(const uint8_t *pub_addr)
{
   23698:	b510      	push	{r4, lr}
   2369a:	4604      	mov	r4, r0
    ble_hs_lock();
   2369c:	f7fe fa32 	bl	21b04 <ble_hs_lock>
    memcpy(ble_hs_id_pub, pub_addr, 6);
   236a0:	4b03      	ldr	r3, [pc, #12]	; (236b0 <ble_hs_id_set_pub+0x18>)
   236a2:	6820      	ldr	r0, [r4, #0]
   236a4:	6018      	str	r0, [r3, #0]
   236a6:	88a2      	ldrh	r2, [r4, #4]
   236a8:	809a      	strh	r2, [r3, #4]
    ble_hs_unlock();
   236aa:	f7fe fa2f 	bl	21b0c <ble_hs_unlock>
}
   236ae:	bd10      	pop	{r4, pc}
   236b0:	10003f70 	.word	0x10003f70

000236b4 <ble_hs_id_set_rnd>:
    return 0;
}

int
ble_hs_id_set_rnd(const uint8_t *rnd_addr)
{
   236b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   236b6:	4604      	mov	r4, r0
    uint8_t addr_type_byte;
    int rc;
    int ones;

    ble_hs_lock();
   236b8:	f7fe fa24 	bl	21b04 <ble_hs_lock>

    /* Make sure random part of rnd_addr is not all ones or zeros. Reference:
     * Core v5.0, Vol 6, Part B, section 1.3.2.1 */
    addr_type_byte = rnd_addr[5] & 0xc0;
   236bc:	7967      	ldrb	r7, [r4, #5]
   236be:	f007 06c0 	and.w	r6, r7, #192	; 0xc0

    /* count bits set to 1 in random part of address */
    ones = __builtin_popcount(rnd_addr[0]);
   236c2:	7820      	ldrb	r0, [r4, #0]
   236c4:	f7f0 fdea 	bl	1429c <__popcountsi2>
   236c8:	4605      	mov	r5, r0
    ones += __builtin_popcount(rnd_addr[1]);
   236ca:	7860      	ldrb	r0, [r4, #1]
   236cc:	f7f0 fde6 	bl	1429c <__popcountsi2>
   236d0:	4405      	add	r5, r0
    ones += __builtin_popcount(rnd_addr[2]);
   236d2:	78a0      	ldrb	r0, [r4, #2]
   236d4:	f7f0 fde2 	bl	1429c <__popcountsi2>
   236d8:	4405      	add	r5, r0
    ones += __builtin_popcount(rnd_addr[3]);
   236da:	78e0      	ldrb	r0, [r4, #3]
   236dc:	f7f0 fdde 	bl	1429c <__popcountsi2>
   236e0:	4405      	add	r5, r0
    ones += __builtin_popcount(rnd_addr[4]);
   236e2:	7920      	ldrb	r0, [r4, #4]
   236e4:	f7f0 fdda 	bl	1429c <__popcountsi2>
   236e8:	4405      	add	r5, r0
    ones += __builtin_popcount(rnd_addr[5] & 0x3f);
   236ea:	f007 003f 	and.w	r0, r7, #63	; 0x3f
   236ee:	f7f0 fdd5 	bl	1429c <__popcountsi2>
   236f2:	4428      	add	r0, r5

    if ((addr_type_byte != 0x00 && addr_type_byte != 0xc0) ||
   236f4:	b10e      	cbz	r6, 236fa <ble_hs_id_set_rnd+0x46>
   236f6:	2ec0      	cmp	r6, #192	; 0xc0
   236f8:	d110      	bne.n	2371c <ble_hs_id_set_rnd+0x68>
   236fa:	b188      	cbz	r0, 23720 <ble_hs_id_set_rnd+0x6c>
            (ones == 0 || ones == 46)) {
   236fc:	282e      	cmp	r0, #46	; 0x2e
   236fe:	d011      	beq.n	23724 <ble_hs_id_set_rnd+0x70>
        rc = BLE_HS_EINVAL;
        goto done;
    }

    rc = ble_hs_hci_util_set_random_addr(rnd_addr);
   23700:	4620      	mov	r0, r4
   23702:	f7ff ff9a 	bl	2363a <ble_hs_hci_util_set_random_addr>
    if (rc != 0) {
   23706:	4605      	mov	r5, r0
   23708:	b920      	cbnz	r0, 23714 <ble_hs_id_set_rnd+0x60>
        goto done;
    }

    memcpy(ble_hs_id_rnd, rnd_addr, 6);
   2370a:	4b07      	ldr	r3, [pc, #28]	; (23728 <ble_hs_id_set_rnd+0x74>)
   2370c:	6820      	ldr	r0, [r4, #0]
   2370e:	6018      	str	r0, [r3, #0]
   23710:	88a2      	ldrh	r2, [r4, #4]
   23712:	809a      	strh	r2, [r3, #4]

done:
    ble_hs_unlock();
   23714:	f7fe f9fa 	bl	21b0c <ble_hs_unlock>
    return rc;
}
   23718:	4628      	mov	r0, r5
   2371a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = BLE_HS_EINVAL;
   2371c:	2503      	movs	r5, #3
   2371e:	e7f9      	b.n	23714 <ble_hs_id_set_rnd+0x60>
   23720:	2503      	movs	r5, #3
   23722:	e7f7      	b.n	23714 <ble_hs_id_set_rnd+0x60>
   23724:	2503      	movs	r5, #3
   23726:	e7f5      	b.n	23714 <ble_hs_id_set_rnd+0x60>
   23728:	10003f78 	.word	0x10003f78

0002372c <ble_hs_id_addr>:
 *                              Other BLE host core code on error.
 */
int
ble_hs_id_addr(uint8_t id_addr_type, const uint8_t **out_id_addr,
               int *out_is_nrpa)
{
   2372c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2372e:	460e      	mov	r6, r1
   23730:	4615      	mov	r5, r2
    const uint8_t *id_addr;
    int nrpa;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    switch (id_addr_type) {
   23732:	b148      	cbz	r0, 23748 <ble_hs_id_addr+0x1c>
   23734:	2801      	cmp	r0, #1
   23736:	d115      	bne.n	23764 <ble_hs_id_addr+0x38>
        nrpa = 0;
        break;

    case BLE_ADDR_RANDOM:
        id_addr = ble_hs_id_rnd;
        nrpa = (ble_hs_id_rnd[5] & 0xc0) == 0;
   23738:	4c0d      	ldr	r4, [pc, #52]	; (23770 <ble_hs_id_addr+0x44>)
   2373a:	7963      	ldrb	r3, [r4, #5]
   2373c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   23740:	bf0c      	ite	eq
   23742:	2701      	moveq	r7, #1
   23744:	2700      	movne	r7, #0
        break;
   23746:	e001      	b.n	2374c <ble_hs_id_addr+0x20>
    switch (id_addr_type) {
   23748:	2700      	movs	r7, #0
   2374a:	4c0a      	ldr	r4, [pc, #40]	; (23774 <ble_hs_id_addr+0x48>)

    default:
        return BLE_HS_EINVAL;
    }

    if (memcmp(id_addr, ble_hs_misc_null_addr, 6) == 0) {
   2374c:	2206      	movs	r2, #6
   2374e:	490a      	ldr	r1, [pc, #40]	; (23778 <ble_hs_id_addr+0x4c>)
   23750:	4620      	mov	r0, r4
   23752:	f7f3 f99b 	bl	16a8c <memcmp>
   23756:	b138      	cbz	r0, 23768 <ble_hs_id_addr+0x3c>
        return BLE_HS_ENOADDR;
    }

    if (out_id_addr != NULL) {
   23758:	b106      	cbz	r6, 2375c <ble_hs_id_addr+0x30>
        *out_id_addr = id_addr;
   2375a:	6034      	str	r4, [r6, #0]
    }
    if (out_is_nrpa != NULL) {
   2375c:	b135      	cbz	r5, 2376c <ble_hs_id_addr+0x40>
        *out_is_nrpa = nrpa;
   2375e:	602f      	str	r7, [r5, #0]
    }

    return 0;
   23760:	2000      	movs	r0, #0
   23762:	e000      	b.n	23766 <ble_hs_id_addr+0x3a>
    switch (id_addr_type) {
   23764:	2003      	movs	r0, #3
}
   23766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOADDR;
   23768:	2015      	movs	r0, #21
   2376a:	e7fc      	b.n	23766 <ble_hs_id_addr+0x3a>
    return 0;
   2376c:	2000      	movs	r0, #0
   2376e:	e7fa      	b.n	23766 <ble_hs_id_addr+0x3a>
   23770:	10003f78 	.word	0x10003f78
   23774:	10003f70 	.word	0x10003f70
   23778:	000311a8 	.word	0x000311a8

0002377c <ble_hs_id_addr_type_usable>:
    return rc;
}

static int
ble_hs_id_addr_type_usable(uint8_t own_addr_type)
{
   2377c:	b500      	push	{lr}
   2377e:	b083      	sub	sp, #12
    uint8_t id_addr_type;
    int nrpa;
    int rc;

    switch (own_addr_type) {
   23780:	2801      	cmp	r0, #1
   23782:	d90e      	bls.n	237a2 <ble_hs_id_addr_type_usable+0x26>
   23784:	1e83      	subs	r3, r0, #2
   23786:	b2db      	uxtb	r3, r3
   23788:	2b01      	cmp	r3, #1
   2378a:	d80f      	bhi.n	237ac <ble_hs_id_addr_type_usable+0x30>
        }
        break;

    case BLE_OWN_ADDR_RPA_PUBLIC_DEFAULT:
    case BLE_OWN_ADDR_RPA_RANDOM_DEFAULT:
        id_addr_type = ble_hs_misc_own_addr_type_to_id(own_addr_type);
   2378c:	f000 f911 	bl	239b2 <ble_hs_misc_own_addr_type_to_id>
        rc = ble_hs_id_addr(id_addr_type, NULL, &nrpa);
   23790:	aa01      	add	r2, sp, #4
   23792:	2100      	movs	r1, #0
   23794:	f7ff ffca 	bl	2372c <ble_hs_id_addr>
        if (rc != 0) {
   23798:	b948      	cbnz	r0, 237ae <ble_hs_id_addr_type_usable+0x32>
            return rc;
        }
        if (nrpa) {
   2379a:	9801      	ldr	r0, [sp, #4]
   2379c:	b138      	cbz	r0, 237ae <ble_hs_id_addr_type_usable+0x32>
            return BLE_HS_ENOADDR;
   2379e:	2015      	movs	r0, #21
   237a0:	e005      	b.n	237ae <ble_hs_id_addr_type_usable+0x32>
        rc = ble_hs_id_addr(own_addr_type, NULL, NULL);
   237a2:	2200      	movs	r2, #0
   237a4:	4611      	mov	r1, r2
   237a6:	f7ff ffc1 	bl	2372c <ble_hs_id_addr>
        if (rc != 0) {
   237aa:	e000      	b.n	237ae <ble_hs_id_addr_type_usable+0x32>
    switch (own_addr_type) {
   237ac:	2003      	movs	r0, #3
    default:
        return BLE_HS_EINVAL;
    }

    return 0;
}
   237ae:	b003      	add	sp, #12
   237b0:	f85d fb04 	ldr.w	pc, [sp], #4

000237b4 <ble_hs_id_copy_addr>:
{
   237b4:	b570      	push	{r4, r5, r6, lr}
   237b6:	b082      	sub	sp, #8
   237b8:	4605      	mov	r5, r0
   237ba:	460c      	mov	r4, r1
   237bc:	4616      	mov	r6, r2
    ble_hs_lock();
   237be:	f7fe f9a1 	bl	21b04 <ble_hs_lock>
    rc = ble_hs_id_addr(id_addr_type, &addr, out_is_nrpa);
   237c2:	4632      	mov	r2, r6
   237c4:	a901      	add	r1, sp, #4
   237c6:	4628      	mov	r0, r5
   237c8:	f7ff ffb0 	bl	2372c <ble_hs_id_addr>
    if (rc == 0 && out_id_addr != NULL) {
   237cc:	4605      	mov	r5, r0
   237ce:	b928      	cbnz	r0, 237dc <ble_hs_id_copy_addr+0x28>
   237d0:	b124      	cbz	r4, 237dc <ble_hs_id_copy_addr+0x28>
        memcpy(out_id_addr, addr, 6);
   237d2:	9b01      	ldr	r3, [sp, #4]
   237d4:	681a      	ldr	r2, [r3, #0]
   237d6:	6022      	str	r2, [r4, #0]
   237d8:	889b      	ldrh	r3, [r3, #4]
   237da:	80a3      	strh	r3, [r4, #4]
    ble_hs_unlock();
   237dc:	f7fe f996 	bl	21b0c <ble_hs_unlock>
}
   237e0:	4628      	mov	r0, r5
   237e2:	b002      	add	sp, #8
   237e4:	bd70      	pop	{r4, r5, r6, pc}

000237e6 <ble_hs_id_use_addr>:

int
ble_hs_id_use_addr(uint8_t own_addr_type)
{
   237e6:	b510      	push	{r4, lr}
   237e8:	4604      	mov	r4, r0
    int rc;

    rc = ble_hs_id_addr_type_usable(own_addr_type);
   237ea:	f7ff ffc7 	bl	2377c <ble_hs_id_addr_type_usable>
    if (rc != 0) {
   237ee:	b918      	cbnz	r0, 237f8 <ble_hs_id_use_addr+0x12>
        return rc;
    }

    /* If privacy is being used, make sure RPA rotation is in effect. */
    if (own_addr_type == BLE_OWN_ADDR_RPA_PUBLIC_DEFAULT ||
   237f0:	3c02      	subs	r4, #2
   237f2:	b2e4      	uxtb	r4, r4
   237f4:	2c01      	cmp	r4, #1
   237f6:	d900      	bls.n	237fa <ble_hs_id_use_addr+0x14>
            return rc;
        }
    }

    return 0;
}
   237f8:	bd10      	pop	{r4, pc}
        rc = ble_hs_pvcy_ensure_started();
   237fa:	f000 f97b 	bl	23af4 <ble_hs_pvcy_ensure_started>
        if (rc != 0) {
   237fe:	e7fb      	b.n	237f8 <ble_hs_id_use_addr+0x12>

00023800 <ble_hs_id_infer_auto>:

int
ble_hs_id_infer_auto(int privacy, uint8_t *out_addr_type)
{
   23800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23804:	4604      	mov	r4, r0
   23806:	460d      	mov	r5, r1
    uint8_t addr_type;
    int num_addr_types;
    int rc;
    int i;

    ble_hs_lock();
   23808:	f7fe f97c 	bl	21b04 <ble_hs_lock>

    if (privacy) {
   2380c:	b194      	cbz	r4, 23834 <ble_hs_id_infer_auto+0x34>
        addr_types = priv_addr_types;
   2380e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 23848 <ble_hs_id_infer_auto+0x48>
    } else {
        addr_types = pub_addr_types;
        num_addr_types = sizeof pub_addr_types / sizeof pub_addr_types[0];
    }

    for (i = 0; i < num_addr_types; i++) {
   23812:	2400      	movs	r4, #0
   23814:	2c01      	cmp	r4, #1
   23816:	dc14      	bgt.n	23842 <ble_hs_id_infer_auto+0x42>
        addr_type = addr_types[i];
   23818:	f818 7004 	ldrb.w	r7, [r8, r4]

        rc = ble_hs_id_addr_type_usable(addr_type);
   2381c:	4638      	mov	r0, r7
   2381e:	f7ff ffad 	bl	2377c <ble_hs_id_addr_type_usable>
        switch (rc) {
   23822:	4606      	mov	r6, r0
   23824:	b148      	cbz	r0, 2383a <ble_hs_id_infer_auto+0x3a>
   23826:	2815      	cmp	r0, #21
   23828:	d009      	beq.n	2383e <ble_hs_id_infer_auto+0x3e>
    }

    rc = BLE_HS_ENOADDR;

done:
    ble_hs_unlock();
   2382a:	f7fe f96f 	bl	21b0c <ble_hs_unlock>
    return rc;
}
   2382e:	4630      	mov	r0, r6
   23830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        addr_types = pub_addr_types;
   23834:	f8df 8014 	ldr.w	r8, [pc, #20]	; 2384c <ble_hs_id_infer_auto+0x4c>
   23838:	e7eb      	b.n	23812 <ble_hs_id_infer_auto+0x12>
            *out_addr_type = addr_type;
   2383a:	702f      	strb	r7, [r5, #0]
            goto done;
   2383c:	e7f5      	b.n	2382a <ble_hs_id_infer_auto+0x2a>
    for (i = 0; i < num_addr_types; i++) {
   2383e:	3401      	adds	r4, #1
   23840:	e7e8      	b.n	23814 <ble_hs_id_infer_auto+0x14>
    rc = BLE_HS_ENOADDR;
   23842:	2615      	movs	r6, #21
   23844:	e7f1      	b.n	2382a <ble_hs_id_infer_auto+0x2a>
   23846:	bf00      	nop
   23848:	0003117c 	.word	0x0003117c
   2384c:	00031180 	.word	0x00031180

00023850 <ble_hs_id_reset>:
 * when the controller loses its random address (e.g., on a stack reset).
 */
void
ble_hs_id_reset(void)
{
    memset(ble_hs_id_pub, 0, sizeof ble_hs_id_pub);
   23850:	4a03      	ldr	r2, [pc, #12]	; (23860 <ble_hs_id_reset+0x10>)
   23852:	2300      	movs	r3, #0
   23854:	6013      	str	r3, [r2, #0]
   23856:	8093      	strh	r3, [r2, #4]
    memset(ble_hs_id_rnd, 0, sizeof ble_hs_id_pub);
   23858:	4a02      	ldr	r2, [pc, #8]	; (23864 <ble_hs_id_reset+0x14>)
   2385a:	6013      	str	r3, [r2, #0]
   2385c:	8093      	strh	r3, [r2, #4]
}
   2385e:	4770      	bx	lr
   23860:	10003f70 	.word	0x10003f70
   23864:	10003f78 	.word	0x10003f78

00023868 <ble_hs_log_mbuf>:

struct log ble_hs_log;

void
ble_hs_log_mbuf(const struct os_mbuf *om)
{
   23868:	b530      	push	{r4, r5, lr}
   2386a:	b083      	sub	sp, #12
   2386c:	4605      	mov	r5, r0
    uint8_t u8;
    int i;

    for (i = 0; i < OS_MBUF_PKTLEN(om); i++) {
   2386e:	2400      	movs	r4, #0
   23870:	8a2b      	ldrh	r3, [r5, #16]
   23872:	42a3      	cmp	r3, r4
   23874:	dd08      	ble.n	23888 <ble_hs_log_mbuf+0x20>
        os_mbuf_copydata(om, i, 1, &u8);
   23876:	f10d 0307 	add.w	r3, sp, #7
   2387a:	2201      	movs	r2, #1
   2387c:	4621      	mov	r1, r4
   2387e:	4628      	mov	r0, r5
   23880:	f7f1 ffa2 	bl	157c8 <os_mbuf_copydata>
    for (i = 0; i < OS_MBUF_PKTLEN(om); i++) {
   23884:	3401      	adds	r4, #1
   23886:	e7f3      	b.n	23870 <ble_hs_log_mbuf+0x8>
        BLE_HS_LOG(DEBUG, "0x%02x ", u8);
    }
}
   23888:	b003      	add	sp, #12
   2388a:	bd30      	pop	{r4, r5, pc}

0002388c <ble_hs_log_flat_buf>:
{
    const uint8_t *u8ptr;
    int i;

    u8ptr = data;
    for (i = 0; i < len; i++) {
   2388c:	2300      	movs	r3, #0
   2388e:	428b      	cmp	r3, r1
   23890:	da01      	bge.n	23896 <ble_hs_log_flat_buf+0xa>
   23892:	3301      	adds	r3, #1
   23894:	e7fb      	b.n	2388e <ble_hs_log_flat_buf+0x2>
        BLE_HS_LOG(DEBUG, "0x%02x ", u8ptr[i]);
    }
}
   23896:	4770      	bx	lr

00023898 <ble_hs_mbuf_gen_pkt>:
/**
 * Allocates an mbuf for use by the nimble host.
 */
static struct os_mbuf *
ble_hs_mbuf_gen_pkt(uint16_t leading_space)
{
   23898:	b510      	push	{r4, lr}
   2389a:	4604      	mov	r4, r0
    int rc;

#if MYNEWT_VAL(BLE_CONTROLLER)
    om = os_msys_get_pkthdr(0, sizeof(struct ble_mbuf_hdr));
#else
    om = os_msys_get_pkthdr(0, 0);
   2389c:	2100      	movs	r1, #0
   2389e:	4608      	mov	r0, r1
   238a0:	f7f2 fb82 	bl	15fa8 <os_msys_get_pkthdr>
#endif
    if (om == NULL) {
   238a4:	4603      	mov	r3, r0
   238a6:	b130      	cbz	r0, 238b6 <ble_hs_mbuf_gen_pkt+0x1e>
        return NULL;
    }

    if (om->om_omp->omp_databuf_len < leading_space) {
   238a8:	6882      	ldr	r2, [r0, #8]
   238aa:	8812      	ldrh	r2, [r2, #0]
   238ac:	42a2      	cmp	r2, r4
   238ae:	d304      	bcc.n	238ba <ble_hs_mbuf_gen_pkt+0x22>
        rc = os_mbuf_free_chain(om);
        BLE_HS_DBG_ASSERT_EVAL(rc == 0);
        return NULL;
    }

    om->om_data += leading_space;
   238b0:	6800      	ldr	r0, [r0, #0]
   238b2:	4420      	add	r0, r4
   238b4:	6018      	str	r0, [r3, #0]

    return om;
}
   238b6:	4618      	mov	r0, r3
   238b8:	bd10      	pop	{r4, pc}
        rc = os_mbuf_free_chain(om);
   238ba:	f7f1 fedb 	bl	15674 <os_mbuf_free_chain>
        return NULL;
   238be:	2300      	movs	r3, #0
   238c0:	e7f9      	b.n	238b6 <ble_hs_mbuf_gen_pkt+0x1e>

000238c2 <ble_hs_mbuf_acl_pkt>:
 * @return                  An empty mbuf on success; null on memory
 *                              exhaustion.
 */
struct os_mbuf *
ble_hs_mbuf_acl_pkt(void)
{
   238c2:	b508      	push	{r3, lr}
    return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ);
   238c4:	2004      	movs	r0, #4
   238c6:	f7ff ffe7 	bl	23898 <ble_hs_mbuf_gen_pkt>
}
   238ca:	bd08      	pop	{r3, pc}

000238cc <ble_hs_mbuf_l2cap_pkt>:
 * @return                  An empty mbuf on success; null on memory
 *                              exhaustion.
 */
struct os_mbuf *
ble_hs_mbuf_l2cap_pkt(void)
{
   238cc:	b508      	push	{r3, lr}
    return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ + BLE_L2CAP_HDR_SZ);
   238ce:	2008      	movs	r0, #8
   238d0:	f7ff ffe2 	bl	23898 <ble_hs_mbuf_gen_pkt>
}
   238d4:	bd08      	pop	{r3, pc}

000238d6 <ble_hs_mbuf_att_pkt>:

struct os_mbuf *
ble_hs_mbuf_att_pkt(void)
{
   238d6:	b508      	push	{r3, lr}
    /* Prepare write request and response are the larget ATT commands which
     * contain attribute data.
     */
     return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ +
   238d8:	200d      	movs	r0, #13
   238da:	f7ff ffdd 	bl	23898 <ble_hs_mbuf_gen_pkt>
                                BLE_L2CAP_HDR_SZ +
                                BLE_ATT_PREP_WRITE_CMD_BASE_SZ);
}
   238de:	bd08      	pop	{r3, pc}

000238e0 <ble_hs_mbuf_to_flat>:
}

int
ble_hs_mbuf_to_flat(const struct os_mbuf *om, void *flat, uint16_t max_len,
                    uint16_t *out_copy_len)
{
   238e0:	b570      	push	{r4, r5, r6, lr}
   238e2:	4614      	mov	r4, r2
   238e4:	461e      	mov	r6, r3
    uint16_t copy_len;
    int rc;

    if (OS_MBUF_PKTLEN(om) <= max_len) {
   238e6:	8a05      	ldrh	r5, [r0, #16]
   238e8:	4295      	cmp	r5, r2
   238ea:	d900      	bls.n	238ee <ble_hs_mbuf_to_flat+0xe>
        copy_len = OS_MBUF_PKTLEN(om);
    } else {
        copy_len = max_len;
   238ec:	4615      	mov	r5, r2
    }

    rc = os_mbuf_copydata(om, 0, copy_len, flat);
   238ee:	460b      	mov	r3, r1
   238f0:	462a      	mov	r2, r5
   238f2:	2100      	movs	r1, #0
   238f4:	f7f1 ff68 	bl	157c8 <os_mbuf_copydata>
    if (rc != 0) {
   238f8:	b928      	cbnz	r0, 23906 <ble_hs_mbuf_to_flat+0x26>
        return BLE_HS_EUNKNOWN;
    }

    if (copy_len > max_len) {
   238fa:	42a5      	cmp	r5, r4
   238fc:	d900      	bls.n	23900 <ble_hs_mbuf_to_flat+0x20>
        rc = BLE_HS_EMSGSIZE;
   238fe:	2004      	movs	r0, #4
    } else {
        rc = 0;
    }

    if (out_copy_len != NULL) {
   23900:	b106      	cbz	r6, 23904 <ble_hs_mbuf_to_flat+0x24>
        *out_copy_len = copy_len;
   23902:	8035      	strh	r5, [r6, #0]
    }
    return rc;
}
   23904:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EUNKNOWN;
   23906:	2011      	movs	r0, #17
   23908:	e7fc      	b.n	23904 <ble_hs_mbuf_to_flat+0x24>

0002390a <ble_hs_mbuf_pullup_base>:

int
ble_hs_mbuf_pullup_base(struct os_mbuf **om, int base_len)
{
   2390a:	b510      	push	{r4, lr}
   2390c:	4604      	mov	r4, r0
    if (OS_MBUF_PKTLEN(*om) < base_len) {
   2390e:	6800      	ldr	r0, [r0, #0]
   23910:	8a03      	ldrh	r3, [r0, #16]
   23912:	428b      	cmp	r3, r1
   23914:	db06      	blt.n	23924 <ble_hs_mbuf_pullup_base+0x1a>
        return BLE_HS_EBADDATA;
    }

    *om = os_mbuf_pullup(*om, base_len);
   23916:	b289      	uxth	r1, r1
   23918:	f7f2 f907 	bl	15b2a <os_mbuf_pullup>
   2391c:	6020      	str	r0, [r4, #0]
    if (*om == NULL) {
   2391e:	b118      	cbz	r0, 23928 <ble_hs_mbuf_pullup_base+0x1e>
        return BLE_HS_ENOMEM;
    }

    return 0;
   23920:	2000      	movs	r0, #0
}
   23922:	bd10      	pop	{r4, pc}
        return BLE_HS_EBADDATA;
   23924:	200a      	movs	r0, #10
   23926:	e7fc      	b.n	23922 <ble_hs_mbuf_pullup_base+0x18>
        return BLE_HS_ENOMEM;
   23928:	2006      	movs	r0, #6
   2392a:	e7fa      	b.n	23922 <ble_hs_mbuf_pullup_base+0x18>

0002392c <ble_hs_misc_restore_one_irk>:
}

static int
ble_hs_misc_restore_one_irk(int obj_type, union ble_store_value *val,
                            void *cookie)
{
   2392c:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(obj_type == BLE_STORE_OBJ_TYPE_PEER_SEC);

    sec = &val->sec;
    if (sec->irk_present) {
   2392e:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
   23932:	f013 0f01 	tst.w	r3, #1
   23936:	d101      	bne.n	2393c <ble_hs_misc_restore_one_irk+0x10>
            BLE_HS_LOG(ERROR, "failed to configure restored IRK\n");
        }
    }

    return 0;
}
   23938:	2000      	movs	r0, #0
   2393a:	bd08      	pop	{r3, pc}
   2393c:	4608      	mov	r0, r1
                                   sec->irk);
   2393e:	460a      	mov	r2, r1
        rc = ble_hs_pvcy_add_entry(sec->peer_addr.val, sec->peer_addr.type,
   23940:	f812 1b29 	ldrb.w	r1, [r2], #41
   23944:	3001      	adds	r0, #1
   23946:	f000 f94f 	bl	23be8 <ble_hs_pvcy_add_entry>
        if (rc != 0) {
   2394a:	2800      	cmp	r0, #0
   2394c:	d0f4      	beq.n	23938 <ble_hs_misc_restore_one_irk+0xc>
            BLE_HS_LOG(ERROR, "failed to configure restored IRK\n");
   2394e:	4a03      	ldr	r2, [pc, #12]	; (2395c <ble_hs_misc_restore_one_irk+0x30>)
   23950:	2103      	movs	r1, #3
   23952:	2004      	movs	r0, #4
   23954:	f7f5 ff00 	bl	19758 <modlog_printf>
   23958:	e7ee      	b.n	23938 <ble_hs_misc_restore_one_irk+0xc>
   2395a:	bf00      	nop
   2395c:	00031184 	.word	0x00031184

00023960 <ble_hs_misc_conn_chan_find>:
{
   23960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23962:	460e      	mov	r6, r1
   23964:	4615      	mov	r5, r2
   23966:	461c      	mov	r4, r3
    conn = ble_hs_conn_find(conn_handle);
   23968:	f7fe ff28 	bl	227bc <ble_hs_conn_find>
    if (conn == NULL) {
   2396c:	4607      	mov	r7, r0
   2396e:	b160      	cbz	r0, 2398a <ble_hs_misc_conn_chan_find+0x2a>
        chan = ble_hs_conn_chan_find_by_scid(conn, cid);
   23970:	4631      	mov	r1, r6
   23972:	f7fe fe6d 	bl	22650 <ble_hs_conn_chan_find_by_scid>
        if (chan == NULL) {
   23976:	4603      	mov	r3, r0
   23978:	b128      	cbz	r0, 23986 <ble_hs_misc_conn_chan_find+0x26>
            rc = 0;
   2397a:	2000      	movs	r0, #0
    if (out_conn != NULL) {
   2397c:	b105      	cbz	r5, 23980 <ble_hs_misc_conn_chan_find+0x20>
        *out_conn = conn;
   2397e:	602f      	str	r7, [r5, #0]
    if (out_chan != NULL) {
   23980:	b104      	cbz	r4, 23984 <ble_hs_misc_conn_chan_find+0x24>
        *out_chan = chan;
   23982:	6023      	str	r3, [r4, #0]
}
   23984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rc = BLE_HS_ENOTCONN;
   23986:	2007      	movs	r0, #7
   23988:	e7f8      	b.n	2397c <ble_hs_misc_conn_chan_find+0x1c>
        chan = NULL;
   2398a:	4603      	mov	r3, r0
        rc = BLE_HS_ENOTCONN;
   2398c:	2007      	movs	r0, #7
   2398e:	e7f5      	b.n	2397c <ble_hs_misc_conn_chan_find+0x1c>

00023990 <ble_hs_misc_conn_chan_find_reqd>:
{
   23990:	b530      	push	{r4, r5, lr}
   23992:	b083      	sub	sp, #12
   23994:	4615      	mov	r5, r2
   23996:	461c      	mov	r4, r3
    rc = ble_hs_misc_conn_chan_find(conn_handle, cid, &conn, &chan);
   23998:	ab01      	add	r3, sp, #4
   2399a:	466a      	mov	r2, sp
   2399c:	f7ff ffe0 	bl	23960 <ble_hs_misc_conn_chan_find>
    if (rc != 0) {
   239a0:	b928      	cbnz	r0, 239ae <ble_hs_misc_conn_chan_find_reqd+0x1e>
    if (out_conn != NULL) {
   239a2:	b10d      	cbz	r5, 239a8 <ble_hs_misc_conn_chan_find_reqd+0x18>
        *out_conn = conn;
   239a4:	9b00      	ldr	r3, [sp, #0]
   239a6:	602b      	str	r3, [r5, #0]
    if (out_chan != NULL) {
   239a8:	b10c      	cbz	r4, 239ae <ble_hs_misc_conn_chan_find_reqd+0x1e>
        *out_chan = chan;
   239aa:	9b01      	ldr	r3, [sp, #4]
   239ac:	6023      	str	r3, [r4, #0]
}
   239ae:	b003      	add	sp, #12
   239b0:	bd30      	pop	{r4, r5, pc}

000239b2 <ble_hs_misc_own_addr_type_to_id>:
    switch (own_addr_type) {
   239b2:	2801      	cmp	r0, #1
   239b4:	d002      	beq.n	239bc <ble_hs_misc_own_addr_type_to_id+0xa>
   239b6:	2803      	cmp	r0, #3
   239b8:	d001      	beq.n	239be <ble_hs_misc_own_addr_type_to_id+0xc>
   239ba:	2000      	movs	r0, #0
}
   239bc:	4770      	bx	lr
         return BLE_ADDR_RANDOM;
   239be:	2001      	movs	r0, #1
   239c0:	4770      	bx	lr

000239c2 <ble_hs_misc_peer_addr_type_to_id>:
    switch (peer_addr_type) {
   239c2:	2801      	cmp	r0, #1
   239c4:	d002      	beq.n	239cc <ble_hs_misc_peer_addr_type_to_id+0xa>
   239c6:	2803      	cmp	r0, #3
   239c8:	d001      	beq.n	239ce <ble_hs_misc_peer_addr_type_to_id+0xc>
   239ca:	2000      	movs	r0, #0
}
   239cc:	4770      	bx	lr
            return BLE_ADDR_RANDOM;
   239ce:	2001      	movs	r0, #1
   239d0:	4770      	bx	lr
	...

000239d4 <ble_hs_misc_restore_irks>:

int
ble_hs_misc_restore_irks(void)
{
   239d4:	b508      	push	{r3, lr}
    int rc;

    rc = ble_store_iterate(BLE_STORE_OBJ_TYPE_PEER_SEC,
   239d6:	2200      	movs	r2, #0
   239d8:	4902      	ldr	r1, [pc, #8]	; (239e4 <ble_hs_misc_restore_irks+0x10>)
   239da:	2002      	movs	r0, #2
   239dc:	f002 fe39 	bl	26652 <ble_store_iterate>
                           ble_hs_misc_restore_one_irk,
                           NULL);
    return rc;
}
   239e0:	bd08      	pop	{r3, pc}
   239e2:	bf00      	nop
   239e4:	0002392d 	.word	0x0002392d

000239e8 <ble_mqueue_init>:

#include "ble_hs_priv.h"

int
ble_mqueue_init(struct ble_mqueue *mq, ble_npl_event_fn *ev_fn, void *ev_arg)
{
   239e8:	4603      	mov	r3, r0
    STAILQ_INIT(&mq->head);
   239ea:	2000      	movs	r0, #0
   239ec:	6018      	str	r0, [r3, #0]
   239ee:	605b      	str	r3, [r3, #4]
    memset(ev, 0, sizeof(*ev));
   239f0:	6098      	str	r0, [r3, #8]
   239f2:	6158      	str	r0, [r3, #20]
    ev->ev.ev_queued = 0;
   239f4:	7218      	strb	r0, [r3, #8]
    ev->ev.ev_cb = (os_event_fn *)fn;
   239f6:	60d9      	str	r1, [r3, #12]
    ev->ev.ev_arg = arg;
   239f8:	611a      	str	r2, [r3, #16]

    ble_npl_event_init(&mq->ev, ev_fn, ev_arg);

    return (0);
}
   239fa:	4770      	bx	lr

000239fc <ble_mqueue_get>:

struct os_mbuf *
ble_mqueue_get(struct ble_mqueue *mq)
{
   239fc:	b538      	push	{r3, r4, r5, lr}
   239fe:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *om;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   23a00:	f7f2 fe94 	bl	1672c <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->head);
   23a04:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   23a06:	b114      	cbz	r4, 23a0e <ble_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->head, omp_next);
   23a08:	6863      	ldr	r3, [r4, #4]
   23a0a:	602b      	str	r3, [r5, #0]
   23a0c:	b12b      	cbz	r3, 23a1a <ble_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   23a0e:	f7f2 fe93 	bl	16738 <os_arch_restore_sr>

    if (mp) {
   23a12:	b104      	cbz	r4, 23a16 <ble_mqueue_get+0x1a>
        om = OS_MBUF_PKTHDR_TO_MBUF(mp);
   23a14:	3c10      	subs	r4, #16
    } else {
        om = NULL;
    }

    return (om);
}
   23a16:	4620      	mov	r0, r4
   23a18:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->head, omp_next);
   23a1a:	606d      	str	r5, [r5, #4]
   23a1c:	e7f7      	b.n	23a0e <ble_mqueue_get+0x12>

00023a1e <ble_mqueue_put>:

int
ble_mqueue_put(struct ble_mqueue *mq, struct ble_npl_eventq *evq, struct os_mbuf *om)
{
   23a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(om)) {
   23a20:	7953      	ldrb	r3, [r2, #5]
   23a22:	2b07      	cmp	r3, #7
   23a24:	d916      	bls.n	23a54 <ble_mqueue_put+0x36>
   23a26:	4605      	mov	r5, r0
   23a28:	460e      	mov	r6, r1
   23a2a:	4614      	mov	r4, r2
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(om);
   23a2c:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   23a30:	f7f2 fe7c 	bl	1672c <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->head, mp, omp_next);
   23a34:	2300      	movs	r3, #0
   23a36:	f844 3f14 	str.w	r3, [r4, #20]!
   23a3a:	686b      	ldr	r3, [r5, #4]
   23a3c:	601f      	str	r7, [r3, #0]
   23a3e:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   23a40:	f7f2 fe7a 	bl	16738 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   23a44:	b146      	cbz	r6, 23a58 <ble_mqueue_put+0x3a>
    os_eventq_put(&evq->evq, &ev->ev);
   23a46:	f105 0108 	add.w	r1, r5, #8
   23a4a:	4630      	mov	r0, r6
   23a4c:	f7f1 fcdd 	bl	1540a <os_eventq_put>
        ble_npl_eventq_put(evq, &mq->ev);
    }

    return (0);
   23a50:	2000      	movs	r0, #0
}
   23a52:	e000      	b.n	23a56 <ble_mqueue_put+0x38>
err:
    return (rc);
   23a54:	2002      	movs	r0, #2
}
   23a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   23a58:	2000      	movs	r0, #0
   23a5a:	e7fc      	b.n	23a56 <ble_mqueue_put+0x38>

00023a5c <ble_hs_pvcy_set_addr_timeout>:
static int
ble_hs_pvcy_set_addr_timeout(uint16_t timeout)
{
    struct ble_hci_le_set_rpa_tmo_cp cmd;

    if (timeout == 0 || timeout > 0xA1B8) {
   23a5c:	1e43      	subs	r3, r0, #1
   23a5e:	b29b      	uxth	r3, r3
   23a60:	f24a 12b7 	movw	r2, #41399	; 0xa1b7
   23a64:	4293      	cmp	r3, r2
   23a66:	d80e      	bhi.n	23a86 <ble_hs_pvcy_set_addr_timeout+0x2a>
{
   23a68:	b500      	push	{lr}
   23a6a:	b085      	sub	sp, #20
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    cmd.rpa_timeout = htole16(timeout);
   23a6c:	f8ad 000c 	strh.w	r0, [sp, #12]

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   23a70:	2300      	movs	r3, #0
   23a72:	9300      	str	r3, [sp, #0]
   23a74:	2202      	movs	r2, #2
   23a76:	a903      	add	r1, sp, #12
   23a78:	f242 002e 	movw	r0, #8238	; 0x202e
   23a7c:	f7ff f9f2 	bl	22e64 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_SET_RPA_TMO),
                             &cmd, sizeof(cmd), NULL, 0);
}
   23a80:	b005      	add	sp, #20
   23a82:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_ERR_INV_HCI_CMD_PARMS;
   23a86:	2012      	movs	r0, #18
}
   23a88:	4770      	bx	lr

00023a8a <ble_hs_pvcy_clear_entries>:
                             &cmd, sizeof(cmd), NULL, 0);
}

static int
ble_hs_pvcy_clear_entries(void)
{
   23a8a:	b500      	push	{lr}
   23a8c:	b083      	sub	sp, #12
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   23a8e:	2100      	movs	r1, #0
   23a90:	9100      	str	r1, [sp, #0]
   23a92:	460b      	mov	r3, r1
   23a94:	460a      	mov	r2, r1
   23a96:	f242 0029 	movw	r0, #8233	; 0x2029
   23a9a:	f7ff f9e3 	bl	22e64 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_CLR_RESOLV_LIST),
                             NULL, 0, NULL, 0);
}
   23a9e:	b003      	add	sp, #12
   23aa0:	f85d fb04 	ldr.w	pc, [sp], #4

00023aa4 <ble_hs_pvcy_set_resolve_enabled>:
{
   23aa4:	b500      	push	{lr}
   23aa6:	b085      	sub	sp, #20
    cmd.enable = enable;
   23aa8:	f88d 000c 	strb.w	r0, [sp, #12]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   23aac:	2300      	movs	r3, #0
   23aae:	9300      	str	r3, [sp, #0]
   23ab0:	2201      	movs	r2, #1
   23ab2:	a903      	add	r1, sp, #12
   23ab4:	f242 002d 	movw	r0, #8237	; 0x202d
   23ab8:	f7ff f9d4 	bl	22e64 <ble_hs_hci_cmd_tx>
}
   23abc:	b005      	add	sp, #20
   23abe:	f85d fb04 	ldr.w	pc, [sp], #4

00023ac2 <ble_hs_pvcy_remove_entry>:
{
   23ac2:	b500      	push	{lr}
   23ac4:	b085      	sub	sp, #20
    if (addr_type > BLE_ADDR_RANDOM) {
   23ac6:	2801      	cmp	r0, #1
   23ac8:	d901      	bls.n	23ace <ble_hs_pvcy_remove_entry+0xc>
        addr_type = addr_type % 2;
   23aca:	f000 0001 	and.w	r0, r0, #1
    cmd.peer_addr_type = addr_type;
   23ace:	f88d 0008 	strb.w	r0, [sp, #8]
    memcpy(cmd.peer_id_addr, addr, BLE_DEV_ADDR_LEN);
   23ad2:	680b      	ldr	r3, [r1, #0]
   23ad4:	f8cd 3009 	str.w	r3, [sp, #9]
   23ad8:	888b      	ldrh	r3, [r1, #4]
   23ada:	f8ad 300d 	strh.w	r3, [sp, #13]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   23ade:	2300      	movs	r3, #0
   23ae0:	9300      	str	r3, [sp, #0]
   23ae2:	2207      	movs	r2, #7
   23ae4:	a902      	add	r1, sp, #8
   23ae6:	f242 0028 	movw	r0, #8232	; 0x2028
   23aea:	f7ff f9bb 	bl	22e64 <ble_hs_hci_cmd_tx>
}
   23aee:	b005      	add	sp, #20
   23af0:	f85d fb04 	ldr.w	pc, [sp], #4

00023af4 <ble_hs_pvcy_ensure_started>:
    return rc;
}

int
ble_hs_pvcy_ensure_started(void)
{
   23af4:	b508      	push	{r3, lr}
    int rc;

    if (ble_hs_pvcy_started) {
   23af6:	4b07      	ldr	r3, [pc, #28]	; (23b14 <ble_hs_pvcy_ensure_started+0x20>)
   23af8:	781b      	ldrb	r3, [r3, #0]
   23afa:	b10b      	cbz	r3, 23b00 <ble_hs_pvcy_ensure_started+0xc>
        return 0;
   23afc:	2000      	movs	r0, #0
    }

    ble_hs_pvcy_started = 1;

    return 0;
}
   23afe:	bd08      	pop	{r3, pc}
    rc = ble_hs_pvcy_set_addr_timeout(MYNEWT_VAL(BLE_RPA_TIMEOUT));
   23b00:	f44f 7096 	mov.w	r0, #300	; 0x12c
   23b04:	f7ff ffaa 	bl	23a5c <ble_hs_pvcy_set_addr_timeout>
    if (rc != 0) {
   23b08:	2800      	cmp	r0, #0
   23b0a:	d1f8      	bne.n	23afe <ble_hs_pvcy_ensure_started+0xa>
    ble_hs_pvcy_started = 1;
   23b0c:	4b01      	ldr	r3, [pc, #4]	; (23b14 <ble_hs_pvcy_ensure_started+0x20>)
   23b0e:	2201      	movs	r2, #1
   23b10:	701a      	strb	r2, [r3, #0]
    return 0;
   23b12:	e7f4      	b.n	23afe <ble_hs_pvcy_ensure_started+0xa>
   23b14:	10003f90 	.word	0x10003f90

00023b18 <ble_hs_pvcy_our_irk>:
int
ble_hs_pvcy_our_irk(const uint8_t **out_irk)
{
    /* XXX: Return error if privacy not supported. */

    *out_irk = ble_hs_pvcy_irk;
   23b18:	4b01      	ldr	r3, [pc, #4]	; (23b20 <ble_hs_pvcy_our_irk+0x8>)
   23b1a:	6003      	str	r3, [r0, #0]
    return 0;
}
   23b1c:	2000      	movs	r0, #0
   23b1e:	4770      	bx	lr
   23b20:	10003f80 	.word	0x10003f80

00023b24 <ble_hs_pvcy_set_mode>:
int
ble_hs_pvcy_set_mode(const ble_addr_t *addr, uint8_t priv_mode)
{
    struct ble_hci_le_set_privacy_mode_cp cmd;

    if (addr->type > BLE_ADDR_RANDOM) {
   23b24:	7803      	ldrb	r3, [r0, #0]
   23b26:	2b01      	cmp	r3, #1
   23b28:	d819      	bhi.n	23b5e <ble_hs_pvcy_set_mode+0x3a>
{
   23b2a:	b500      	push	{lr}
   23b2c:	b085      	sub	sp, #20
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    cmd.mode = priv_mode;
   23b2e:	f88d 100f 	strb.w	r1, [sp, #15]
    cmd.peer_id_addr_type = addr->type;
   23b32:	7803      	ldrb	r3, [r0, #0]
   23b34:	f88d 3008 	strb.w	r3, [sp, #8]
    memcpy(cmd.peer_id_addr, addr->val, BLE_DEV_ADDR_LEN);
   23b38:	f850 3f01 	ldr.w	r3, [r0, #1]!
   23b3c:	f8cd 3009 	str.w	r3, [sp, #9]
   23b40:	8883      	ldrh	r3, [r0, #4]
   23b42:	f8ad 300d 	strh.w	r3, [sp, #13]

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   23b46:	2300      	movs	r3, #0
   23b48:	9300      	str	r3, [sp, #0]
   23b4a:	2208      	movs	r2, #8
   23b4c:	eb0d 0102 	add.w	r1, sp, r2
   23b50:	f242 004e 	movw	r0, #8270	; 0x204e
   23b54:	f7ff f986 	bl	22e64 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_SET_PRIVACY_MODE),
                             &cmd, sizeof(cmd), NULL, 0);
}
   23b58:	b005      	add	sp, #20
   23b5a:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_ERR_INV_HCI_CMD_PARMS;
   23b5e:	2012      	movs	r0, #18
}
   23b60:	4770      	bx	lr
	...

00023b64 <ble_hs_pvcy_add_entry_hci>:
    if (addr_type > BLE_ADDR_RANDOM) {
   23b64:	2901      	cmp	r1, #1
   23b66:	d83a      	bhi.n	23bde <ble_hs_pvcy_add_entry_hci+0x7a>
{
   23b68:	b5f0      	push	{r4, r5, r6, r7, lr}
   23b6a:	b08f      	sub	sp, #60	; 0x3c
   23b6c:	4607      	mov	r7, r0
   23b6e:	460d      	mov	r5, r1
   23b70:	4614      	mov	r4, r2
    cmd.peer_addr_type = addr_type;
   23b72:	f88d 1010 	strb.w	r1, [sp, #16]
    memcpy(cmd.peer_id_addr, addr, 6);
   23b76:	6803      	ldr	r3, [r0, #0]
   23b78:	f8cd 3011 	str.w	r3, [sp, #17]
   23b7c:	8883      	ldrh	r3, [r0, #4]
   23b7e:	f8ad 3015 	strh.w	r3, [sp, #21]
    memcpy(cmd.local_irk, ble_hs_pvcy_irk, 16);
   23b82:	4e18      	ldr	r6, [pc, #96]	; (23be4 <ble_hs_pvcy_add_entry_hci+0x80>)
   23b84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   23b86:	f8cd 0027 	str.w	r0, [sp, #39]	; 0x27
   23b8a:	f8cd 102b 	str.w	r1, [sp, #43]	; 0x2b
   23b8e:	f8cd 202f 	str.w	r2, [sp, #47]	; 0x2f
   23b92:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    memcpy(cmd.peer_irk, irk, 16);
   23b96:	6820      	ldr	r0, [r4, #0]
   23b98:	6861      	ldr	r1, [r4, #4]
   23b9a:	68a2      	ldr	r2, [r4, #8]
   23b9c:	68e3      	ldr	r3, [r4, #12]
   23b9e:	f8cd 0017 	str.w	r0, [sp, #23]
   23ba2:	f8cd 101b 	str.w	r1, [sp, #27]
   23ba6:	f8cd 201f 	str.w	r2, [sp, #31]
   23baa:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   23bae:	2300      	movs	r3, #0
   23bb0:	9300      	str	r3, [sp, #0]
   23bb2:	2227      	movs	r2, #39	; 0x27
   23bb4:	a904      	add	r1, sp, #16
   23bb6:	f242 0027 	movw	r0, #8231	; 0x2027
   23bba:	f7ff f953 	bl	22e64 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   23bbe:	b108      	cbz	r0, 23bc4 <ble_hs_pvcy_add_entry_hci+0x60>
}
   23bc0:	b00f      	add	sp, #60	; 0x3c
   23bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    peer_addr.type = addr_type;
   23bc4:	f88d 5008 	strb.w	r5, [sp, #8]
    memcpy(peer_addr.val, addr, sizeof peer_addr.val);
   23bc8:	683b      	ldr	r3, [r7, #0]
   23bca:	f8cd 3009 	str.w	r3, [sp, #9]
   23bce:	88bb      	ldrh	r3, [r7, #4]
   23bd0:	f8ad 300d 	strh.w	r3, [sp, #13]
    rc = ble_hs_pvcy_set_mode(&peer_addr, BLE_GAP_PRIVATE_MODE_DEVICE);
   23bd4:	2101      	movs	r1, #1
   23bd6:	a802      	add	r0, sp, #8
   23bd8:	f7ff ffa4 	bl	23b24 <ble_hs_pvcy_set_mode>
    if (rc != 0) {
   23bdc:	e7f0      	b.n	23bc0 <ble_hs_pvcy_add_entry_hci+0x5c>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   23bde:	2012      	movs	r0, #18
}
   23be0:	4770      	bx	lr
   23be2:	bf00      	nop
   23be4:	10003f80 	.word	0x10003f80

00023be8 <ble_hs_pvcy_add_entry>:
{
   23be8:	b570      	push	{r4, r5, r6, lr}
   23bea:	4604      	mov	r4, r0
   23bec:	460d      	mov	r5, r1
   23bee:	4616      	mov	r6, r2
    STATS_INC(ble_hs_stats, pvcy_add_entry);
   23bf0:	4a0a      	ldr	r2, [pc, #40]	; (23c1c <ble_hs_pvcy_add_entry+0x34>)
   23bf2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   23bf4:	3301      	adds	r3, #1
   23bf6:	6313      	str	r3, [r2, #48]	; 0x30
    ble_gap_preempt();
   23bf8:	f7fb fe5c 	bl	1f8b4 <ble_gap_preempt>
    rc = ble_hs_pvcy_add_entry_hci(addr, addr_type, irk);
   23bfc:	4632      	mov	r2, r6
   23bfe:	4629      	mov	r1, r5
   23c00:	4620      	mov	r0, r4
   23c02:	f7ff ffaf 	bl	23b64 <ble_hs_pvcy_add_entry_hci>
   23c06:	4604      	mov	r4, r0
    ble_gap_preempt_done();
   23c08:	f7fb fe60 	bl	1f8cc <ble_gap_preempt_done>
    if (rc != 0) {
   23c0c:	b11c      	cbz	r4, 23c16 <ble_hs_pvcy_add_entry+0x2e>
        STATS_INC(ble_hs_stats, pvcy_add_entry_fail);
   23c0e:	4a03      	ldr	r2, [pc, #12]	; (23c1c <ble_hs_pvcy_add_entry+0x34>)
   23c10:	6b53      	ldr	r3, [r2, #52]	; 0x34
   23c12:	3301      	adds	r3, #1
   23c14:	6353      	str	r3, [r2, #52]	; 0x34
}
   23c16:	4620      	mov	r0, r4
   23c18:	bd70      	pop	{r4, r5, r6, pc}
   23c1a:	bf00      	nop
   23c1c:	10003cec 	.word	0x10003cec

00023c20 <ble_hs_pvcy_set_our_irk>:
{
   23c20:	b510      	push	{r4, lr}
   23c22:	b086      	sub	sp, #24
    if (irk != NULL) {
   23c24:	b170      	cbz	r0, 23c44 <ble_hs_pvcy_set_our_irk+0x24>
   23c26:	4603      	mov	r3, r0
        memcpy(new_irk, irk, 16);
   23c28:	466c      	mov	r4, sp
   23c2a:	6800      	ldr	r0, [r0, #0]
   23c2c:	6859      	ldr	r1, [r3, #4]
   23c2e:	689a      	ldr	r2, [r3, #8]
   23c30:	68db      	ldr	r3, [r3, #12]
   23c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    if (memcmp(ble_hs_pvcy_irk, new_irk, 16) != 0) {
   23c34:	2210      	movs	r2, #16
   23c36:	4669      	mov	r1, sp
   23c38:	4815      	ldr	r0, [pc, #84]	; (23c90 <ble_hs_pvcy_set_our_irk+0x70>)
   23c3a:	f7f2 ff27 	bl	16a8c <memcmp>
   23c3e:	b938      	cbnz	r0, 23c50 <ble_hs_pvcy_set_our_irk+0x30>
}
   23c40:	b006      	add	sp, #24
   23c42:	bd10      	pop	{r4, pc}
        memcpy(new_irk, ble_hs_pvcy_default_irk, 16);
   23c44:	4b13      	ldr	r3, [pc, #76]	; (23c94 <ble_hs_pvcy_set_our_irk+0x74>)
   23c46:	466c      	mov	r4, sp
   23c48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   23c4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   23c4e:	e7f1      	b.n	23c34 <ble_hs_pvcy_set_our_irk+0x14>
        memcpy(ble_hs_pvcy_irk, new_irk, 16);
   23c50:	4c0f      	ldr	r4, [pc, #60]	; (23c90 <ble_hs_pvcy_set_our_irk+0x70>)
   23c52:	466b      	mov	r3, sp
   23c54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   23c56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        rc = ble_hs_pvcy_set_resolve_enabled(0);
   23c5a:	2000      	movs	r0, #0
   23c5c:	f7ff ff22 	bl	23aa4 <ble_hs_pvcy_set_resolve_enabled>
        if (rc != 0) {
   23c60:	2800      	cmp	r0, #0
   23c62:	d1ed      	bne.n	23c40 <ble_hs_pvcy_set_our_irk+0x20>
        rc = ble_hs_pvcy_clear_entries();
   23c64:	f7ff ff11 	bl	23a8a <ble_hs_pvcy_clear_entries>
        if (rc != 0) {
   23c68:	2800      	cmp	r0, #0
   23c6a:	d1e9      	bne.n	23c40 <ble_hs_pvcy_set_our_irk+0x20>
        rc = ble_hs_pvcy_set_resolve_enabled(1);
   23c6c:	2001      	movs	r0, #1
   23c6e:	f7ff ff19 	bl	23aa4 <ble_hs_pvcy_set_resolve_enabled>
        if (rc != 0) {
   23c72:	2800      	cmp	r0, #0
   23c74:	d1e4      	bne.n	23c40 <ble_hs_pvcy_set_our_irk+0x20>
        memset(tmp_addr, 0, 6);
   23c76:	2100      	movs	r1, #0
   23c78:	9104      	str	r1, [sp, #16]
   23c7a:	f8ad 1014 	strh.w	r1, [sp, #20]
        memset(new_irk, 0, 16);
   23c7e:	9100      	str	r1, [sp, #0]
   23c80:	9101      	str	r1, [sp, #4]
   23c82:	9102      	str	r1, [sp, #8]
   23c84:	9103      	str	r1, [sp, #12]
        rc = ble_hs_pvcy_add_entry(tmp_addr, 0, new_irk);
   23c86:	466a      	mov	r2, sp
   23c88:	a804      	add	r0, sp, #16
   23c8a:	f7ff ffad 	bl	23be8 <ble_hs_pvcy_add_entry>
        if (rc != 0) {
   23c8e:	e7d7      	b.n	23c40 <ble_hs_pvcy_set_our_irk+0x20>
   23c90:	10003f80 	.word	0x10003f80
   23c94:	000311b0 	.word	0x000311b0

00023c98 <ble_hs_startup_reset_tx>:
    return 0;
}

static int
ble_hs_startup_reset_tx(void)
{
   23c98:	b500      	push	{lr}
   23c9a:	b083      	sub	sp, #12
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   23c9c:	2100      	movs	r1, #0
   23c9e:	9100      	str	r1, [sp, #0]
   23ca0:	460b      	mov	r3, r1
   23ca2:	460a      	mov	r2, r1
   23ca4:	f640 4003 	movw	r0, #3075	; 0xc03
   23ca8:	f7ff f8dc 	bl	22e64 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_CB_RESET),
                             NULL, 0, NULL, 0);
}
   23cac:	b003      	add	sp, #12
   23cae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00023cb4 <ble_hs_startup_read_sup_f_tx>:
{
   23cb4:	b500      	push	{lr}
   23cb6:	b085      	sub	sp, #20
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   23cb8:	2308      	movs	r3, #8
   23cba:	9300      	str	r3, [sp, #0]
   23cbc:	446b      	add	r3, sp
   23cbe:	2200      	movs	r2, #0
   23cc0:	4611      	mov	r1, r2
   23cc2:	f241 0003 	movw	r0, #4099	; 0x1003
   23cc6:	f7ff f8cd 	bl	22e64 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   23cca:	b928      	cbnz	r0, 23cd8 <ble_hs_startup_read_sup_f_tx+0x24>
    if (!(rsp.features & 0x0000006000000000)) {
   23ccc:	2200      	movs	r2, #0
   23cce:	9903      	ldr	r1, [sp, #12]
   23cd0:	f001 0360 	and.w	r3, r1, #96	; 0x60
   23cd4:	4313      	orrs	r3, r2
   23cd6:	d002      	beq.n	23cde <ble_hs_startup_read_sup_f_tx+0x2a>
}
   23cd8:	b005      	add	sp, #20
   23cda:	f85d fb04 	ldr.w	pc, [sp], #4
        BLE_HS_LOG(ERROR, "Controller doesn't support LE\n");
   23cde:	4a03      	ldr	r2, [pc, #12]	; (23cec <ble_hs_startup_read_sup_f_tx+0x38>)
   23ce0:	2103      	movs	r1, #3
   23ce2:	2004      	movs	r0, #4
   23ce4:	f7f5 fd38 	bl	19758 <modlog_printf>
        return BLE_HS_ECONTROLLER;
   23ce8:	200c      	movs	r0, #12
   23cea:	e7f5      	b.n	23cd8 <ble_hs_startup_read_sup_f_tx+0x24>
   23cec:	000311c4 	.word	0x000311c4

00023cf0 <ble_hs_startup_set_evmask_tx>:
{
   23cf0:	b510      	push	{r4, lr}
   23cf2:	b086      	sub	sp, #24
    version = ble_hs_hci_get_hci_version();
   23cf4:	f7ff f986 	bl	23004 <ble_hs_hci_get_hci_version>
   23cf8:	4604      	mov	r4, r0
    cmd.event_mask = htole64(0x2000800002008090);
   23cfa:	a311      	add	r3, pc, #68	; (adr r3, 23d40 <ble_hs_startup_set_evmask_tx+0x50>)
   23cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
   23d00:	e9cd 2304 	strd	r2, r3, [sp, #16]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   23d04:	2300      	movs	r3, #0
   23d06:	9300      	str	r3, [sp, #0]
   23d08:	2208      	movs	r2, #8
   23d0a:	a904      	add	r1, sp, #16
   23d0c:	f640 4001 	movw	r0, #3073	; 0xc01
   23d10:	f7ff f8a8 	bl	22e64 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   23d14:	b908      	cbnz	r0, 23d1a <ble_hs_startup_set_evmask_tx+0x2a>
    if (version >= BLE_HCI_VER_BCS_4_1) {
   23d16:	2c06      	cmp	r4, #6
   23d18:	d801      	bhi.n	23d1e <ble_hs_startup_set_evmask_tx+0x2e>
}
   23d1a:	b006      	add	sp, #24
   23d1c:	bd10      	pop	{r4, pc}
        cmd2.event_mask2 = htole64(0x0000000000800000);
   23d1e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   23d22:	2300      	movs	r3, #0
   23d24:	e9cd 2302 	strd	r2, r3, [sp, #8]
        rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   23d28:	2300      	movs	r3, #0
   23d2a:	9300      	str	r3, [sp, #0]
   23d2c:	2208      	movs	r2, #8
   23d2e:	eb0d 0102 	add.w	r1, sp, r2
   23d32:	f640 4063 	movw	r0, #3171	; 0xc63
   23d36:	f7ff f895 	bl	22e64 <ble_hs_hci_cmd_tx>
        if (rc != 0) {
   23d3a:	e7ee      	b.n	23d1a <ble_hs_startup_set_evmask_tx+0x2a>
   23d3c:	f3af 8000 	nop.w
   23d40:	02008090 	.word	0x02008090
   23d44:	20008000 	.word	0x20008000

00023d48 <ble_hs_startup_le_set_evmask_tx>:
{
   23d48:	b500      	push	{lr}
   23d4a:	b085      	sub	sp, #20
    version = ble_hs_hci_get_hci_version();
   23d4c:	f7ff f95a 	bl	23004 <ble_hs_hci_get_hci_version>
    if (version >= BLE_HCI_VER_BCS_4_1) {
   23d50:	2806      	cmp	r0, #6
   23d52:	d819      	bhi.n	23d88 <ble_hs_startup_le_set_evmask_tx+0x40>
    mask = 0x000000000000001f;
   23d54:	231f      	movs	r3, #31
   23d56:	2200      	movs	r2, #0
    if (version >= BLE_HCI_VER_BCS_4_2) {
   23d58:	2807      	cmp	r0, #7
   23d5a:	d901      	bls.n	23d60 <ble_hs_startup_le_set_evmask_tx+0x18>
        mask |= 0x0000000000000640;
   23d5c:	f443 63c8 	orr.w	r3, r3, #1600	; 0x640
    if (version >= BLE_HCI_VER_BCS_5_0) {
   23d60:	2808      	cmp	r0, #8
   23d62:	d903      	bls.n	23d6c <ble_hs_startup_le_set_evmask_tx+0x24>
        mask |= 0x00000000000ff800;
   23d64:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
   23d68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    cmd.event_mask = htole64(mask);
   23d6c:	9302      	str	r3, [sp, #8]
   23d6e:	9203      	str	r2, [sp, #12]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   23d70:	2300      	movs	r3, #0
   23d72:	9300      	str	r3, [sp, #0]
   23d74:	2208      	movs	r2, #8
   23d76:	eb0d 0102 	add.w	r1, sp, r2
   23d7a:	f242 0001 	movw	r0, #8193	; 0x2001
   23d7e:	f7ff f871 	bl	22e64 <ble_hs_hci_cmd_tx>
}
   23d82:	b005      	add	sp, #20
   23d84:	f85d fb04 	ldr.w	pc, [sp], #4
        mask |= 0x0000000000000020;
   23d88:	233f      	movs	r3, #63	; 0x3f
   23d8a:	2200      	movs	r2, #0
   23d8c:	e7e4      	b.n	23d58 <ble_hs_startup_le_set_evmask_tx+0x10>

00023d8e <ble_hs_startup_le_read_buf_sz_tx>:
{
   23d8e:	b530      	push	{r4, r5, lr}
   23d90:	b085      	sub	sp, #20
   23d92:	4605      	mov	r5, r0
   23d94:	460c      	mov	r4, r1
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   23d96:	2303      	movs	r3, #3
   23d98:	9300      	str	r3, [sp, #0]
   23d9a:	ab03      	add	r3, sp, #12
   23d9c:	2200      	movs	r2, #0
   23d9e:	4611      	mov	r1, r2
   23da0:	f242 0002 	movw	r0, #8194	; 0x2002
   23da4:	f7ff f85e 	bl	22e64 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   23da8:	b928      	cbnz	r0, 23db6 <ble_hs_startup_le_read_buf_sz_tx+0x28>
    *out_pktlen = le16toh(rsp.data_len);
   23daa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   23dae:	802b      	strh	r3, [r5, #0]
    *out_max_pkts = rsp.data_packets;
   23db0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   23db4:	7023      	strb	r3, [r4, #0]
}
   23db6:	b005      	add	sp, #20
   23db8:	bd30      	pop	{r4, r5, pc}

00023dba <ble_hs_startup_read_buf_sz_tx>:
{
   23dba:	b530      	push	{r4, r5, lr}
   23dbc:	b085      	sub	sp, #20
   23dbe:	4605      	mov	r5, r0
   23dc0:	460c      	mov	r4, r1
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   23dc2:	2307      	movs	r3, #7
   23dc4:	9300      	str	r3, [sp, #0]
   23dc6:	ab02      	add	r3, sp, #8
   23dc8:	2200      	movs	r2, #0
   23dca:	4611      	mov	r1, r2
   23dcc:	f241 0005 	movw	r0, #4101	; 0x1005
   23dd0:	f7ff f848 	bl	22e64 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   23dd4:	b928      	cbnz	r0, 23de2 <ble_hs_startup_read_buf_sz_tx+0x28>
    *out_pktlen = le16toh(rsp.acl_data_len);
   23dd6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   23dda:	802b      	strh	r3, [r5, #0]
    *out_max_pkts = le16toh(rsp.acl_num);
   23ddc:	f8bd 300b 	ldrh.w	r3, [sp, #11]
   23de0:	8023      	strh	r3, [r4, #0]
}
   23de2:	b005      	add	sp, #20
   23de4:	bd30      	pop	{r4, r5, pc}

00023de6 <ble_hs_startup_read_local_ver_tx>:
{
   23de6:	b510      	push	{r4, lr}
   23de8:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   23dea:	2308      	movs	r3, #8
   23dec:	9300      	str	r3, [sp, #0]
   23dee:	446b      	add	r3, sp
   23df0:	2200      	movs	r2, #0
   23df2:	4611      	mov	r1, r2
   23df4:	f241 0001 	movw	r0, #4097	; 0x1001
   23df8:	f7ff f834 	bl	22e64 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   23dfc:	4604      	mov	r4, r0
   23dfe:	b110      	cbz	r0, 23e06 <ble_hs_startup_read_local_ver_tx+0x20>
}
   23e00:	4620      	mov	r0, r4
   23e02:	b004      	add	sp, #16
   23e04:	bd10      	pop	{r4, pc}
    ble_hs_hci_set_hci_version(rsp.hci_ver);
   23e06:	f89d 0008 	ldrb.w	r0, [sp, #8]
   23e0a:	f7ff f8f5 	bl	22ff8 <ble_hs_hci_set_hci_version>
    return 0;
   23e0e:	e7f7      	b.n	23e00 <ble_hs_startup_read_local_ver_tx+0x1a>

00023e10 <ble_hs_startup_read_buf_sz>:
{
   23e10:	b500      	push	{lr}
   23e12:	b083      	sub	sp, #12
    uint16_t le_pktlen = 0;
   23e14:	2300      	movs	r3, #0
   23e16:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t max_pkts = 0;
   23e1a:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint16_t pktlen = 0;
   23e1e:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint8_t le_max_pkts = 0;
   23e22:	f88d 3001 	strb.w	r3, [sp, #1]
    rc = ble_hs_startup_le_read_buf_sz_tx(&le_pktlen, &le_max_pkts);
   23e26:	f10d 0101 	add.w	r1, sp, #1
   23e2a:	f10d 0006 	add.w	r0, sp, #6
   23e2e:	f7ff ffae 	bl	23d8e <ble_hs_startup_le_read_buf_sz_tx>
    if (rc != 0) {
   23e32:	4603      	mov	r3, r0
   23e34:	b978      	cbnz	r0, 23e56 <ble_hs_startup_read_buf_sz+0x46>
    if (le_pktlen != 0) {
   23e36:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   23e3a:	b183      	cbz	r3, 23e5e <ble_hs_startup_read_buf_sz+0x4e>
        pktlen = le_pktlen;
   23e3c:	f8ad 3002 	strh.w	r3, [sp, #2]
        max_pkts = le_max_pkts;
   23e40:	f89d 3001 	ldrb.w	r3, [sp, #1]
   23e44:	f8ad 3004 	strh.w	r3, [sp, #4]
    rc = ble_hs_hci_set_buf_sz(pktlen, max_pkts);
   23e48:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   23e4c:	f8bd 0002 	ldrh.w	r0, [sp, #2]
   23e50:	f7fe ffd6 	bl	22e00 <ble_hs_hci_set_buf_sz>
   23e54:	4603      	mov	r3, r0
}
   23e56:	4618      	mov	r0, r3
   23e58:	b003      	add	sp, #12
   23e5a:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = ble_hs_startup_read_buf_sz_tx(&pktlen, &max_pkts);
   23e5e:	a901      	add	r1, sp, #4
   23e60:	f10d 0002 	add.w	r0, sp, #2
   23e64:	f7ff ffa9 	bl	23dba <ble_hs_startup_read_buf_sz_tx>
        if (rc != 0) {
   23e68:	4603      	mov	r3, r0
   23e6a:	2800      	cmp	r0, #0
   23e6c:	d0ec      	beq.n	23e48 <ble_hs_startup_read_buf_sz+0x38>
   23e6e:	e7f2      	b.n	23e56 <ble_hs_startup_read_buf_sz+0x46>

00023e70 <ble_hs_startup_le_read_sup_f_tx>:
{
   23e70:	b510      	push	{r4, lr}
   23e72:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   23e74:	2308      	movs	r3, #8
   23e76:	9300      	str	r3, [sp, #0]
   23e78:	446b      	add	r3, sp
   23e7a:	2200      	movs	r2, #0
   23e7c:	4611      	mov	r1, r2
   23e7e:	f242 0003 	movw	r0, #8195	; 0x2003
   23e82:	f7fe ffef 	bl	22e64 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   23e86:	4604      	mov	r4, r0
   23e88:	b110      	cbz	r0, 23e90 <ble_hs_startup_le_read_sup_f_tx+0x20>
}
   23e8a:	4620      	mov	r0, r4
   23e8c:	b004      	add	sp, #16
   23e8e:	bd10      	pop	{r4, pc}
    ble_hs_hci_set_le_supported_feat(le64toh(rsp.features));
   23e90:	9802      	ldr	r0, [sp, #8]
   23e92:	f7ff f8ab 	bl	22fec <ble_hs_hci_set_le_supported_feat>
    return 0;
   23e96:	e7f8      	b.n	23e8a <ble_hs_startup_le_read_sup_f_tx+0x1a>

00023e98 <ble_hs_startup_read_bd_addr>:
{
   23e98:	b510      	push	{r4, lr}
   23e9a:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   23e9c:	2306      	movs	r3, #6
   23e9e:	9300      	str	r3, [sp, #0]
   23ea0:	ab02      	add	r3, sp, #8
   23ea2:	2200      	movs	r2, #0
   23ea4:	4611      	mov	r1, r2
   23ea6:	f241 0009 	movw	r0, #4105	; 0x1009
   23eaa:	f7fe ffdb 	bl	22e64 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   23eae:	4604      	mov	r4, r0
   23eb0:	b110      	cbz	r0, 23eb8 <ble_hs_startup_read_bd_addr+0x20>
}
   23eb2:	4620      	mov	r0, r4
   23eb4:	b004      	add	sp, #16
   23eb6:	bd10      	pop	{r4, pc}
    ble_hs_id_set_pub(rsp.addr);
   23eb8:	a802      	add	r0, sp, #8
   23eba:	f7ff fbed 	bl	23698 <ble_hs_id_set_pub>
    return 0;
   23ebe:	e7f8      	b.n	23eb2 <ble_hs_startup_read_bd_addr+0x1a>

00023ec0 <ble_hs_startup_go>:

int
ble_hs_startup_go(void)
{
   23ec0:	b510      	push	{r4, lr}
    int rc;

    rc = ble_hs_startup_reset_tx();
   23ec2:	f7ff fee9 	bl	23c98 <ble_hs_startup_reset_tx>
    if (rc != 0) {
   23ec6:	4604      	mov	r4, r0
   23ec8:	b108      	cbz	r0, 23ece <ble_hs_startup_go+0xe>

    /* If flow control is enabled, configure the controller to use it. */
    ble_hs_flow_startup();

    return 0;
}
   23eca:	4620      	mov	r0, r4
   23ecc:	bd10      	pop	{r4, pc}
    rc = ble_hs_startup_read_local_ver_tx();
   23ece:	f7ff ff8a 	bl	23de6 <ble_hs_startup_read_local_ver_tx>
    if (rc != 0) {
   23ed2:	4604      	mov	r4, r0
   23ed4:	2800      	cmp	r0, #0
   23ed6:	d1f8      	bne.n	23eca <ble_hs_startup_go+0xa>
    if (ble_hs_hci_get_hci_version() < BLE_HCI_VER_BCS_4_0) {
   23ed8:	f7ff f894 	bl	23004 <ble_hs_hci_get_hci_version>
   23edc:	2805      	cmp	r0, #5
   23ede:	d922      	bls.n	23f26 <ble_hs_startup_go+0x66>
    rc = ble_hs_startup_read_sup_f_tx();
   23ee0:	f7ff fee8 	bl	23cb4 <ble_hs_startup_read_sup_f_tx>
    if (rc != 0) {
   23ee4:	4604      	mov	r4, r0
   23ee6:	2800      	cmp	r0, #0
   23ee8:	d1ef      	bne.n	23eca <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_set_evmask_tx();
   23eea:	f7ff ff01 	bl	23cf0 <ble_hs_startup_set_evmask_tx>
    if (rc != 0) {
   23eee:	4604      	mov	r4, r0
   23ef0:	2800      	cmp	r0, #0
   23ef2:	d1ea      	bne.n	23eca <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_le_set_evmask_tx();
   23ef4:	f7ff ff28 	bl	23d48 <ble_hs_startup_le_set_evmask_tx>
    if (rc != 0) {
   23ef8:	4604      	mov	r4, r0
   23efa:	2800      	cmp	r0, #0
   23efc:	d1e5      	bne.n	23eca <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_read_buf_sz();
   23efe:	f7ff ff87 	bl	23e10 <ble_hs_startup_read_buf_sz>
    if (rc != 0) {
   23f02:	4604      	mov	r4, r0
   23f04:	2800      	cmp	r0, #0
   23f06:	d1e0      	bne.n	23eca <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_le_read_sup_f_tx();
   23f08:	f7ff ffb2 	bl	23e70 <ble_hs_startup_le_read_sup_f_tx>
    if (rc != 0) {
   23f0c:	4604      	mov	r4, r0
   23f0e:	2800      	cmp	r0, #0
   23f10:	d1db      	bne.n	23eca <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_read_bd_addr();
   23f12:	f7ff ffc1 	bl	23e98 <ble_hs_startup_read_bd_addr>
    if (rc != 0) {
   23f16:	4604      	mov	r4, r0
   23f18:	2800      	cmp	r0, #0
   23f1a:	d1d6      	bne.n	23eca <ble_hs_startup_go+0xa>
    ble_hs_pvcy_set_our_irk(NULL);
   23f1c:	f7ff fe80 	bl	23c20 <ble_hs_pvcy_set_our_irk>
    ble_hs_flow_startup();
   23f20:	f7fe fe20 	bl	22b64 <ble_hs_flow_startup>
    return 0;
   23f24:	e7d1      	b.n	23eca <ble_hs_startup_go+0xa>
        BLE_HS_LOG(ERROR, "Required controller version is 4.0 (6)\n");
   23f26:	4a03      	ldr	r2, [pc, #12]	; (23f34 <ble_hs_startup_go+0x74>)
   23f28:	2103      	movs	r1, #3
   23f2a:	2004      	movs	r0, #4
   23f2c:	f7f5 fc14 	bl	19758 <modlog_printf>
        return BLE_HS_ECONTROLLER;
   23f30:	240c      	movs	r4, #12
   23f32:	e7ca      	b.n	23eca <ble_hs_startup_go+0xa>
   23f34:	000311e4 	.word	0x000311e4

00023f38 <ble_hs_stop_done>:
/**
 * Called when a stop procedure has completed.
 */
static void
ble_hs_stop_done(int status)
{
   23f38:	b538      	push	{r3, r4, r5, lr}
   23f3a:	4605      	mov	r5, r0
    os_callout_stop(&co->co);
   23f3c:	480b      	ldr	r0, [pc, #44]	; (23f6c <ble_hs_stop_done+0x34>)
   23f3e:	f7f1 f8ed 	bl	1511c <os_callout_stop>
    struct ble_hs_stop_listener_slist slist;
    struct ble_hs_stop_listener *listener;

    ble_npl_callout_stop(&ble_hs_stop_terminate_tmo);

    ble_hs_lock();
   23f42:	f7fd fddf 	bl	21b04 <ble_hs_lock>

    ble_gap_event_listener_unregister(&ble_hs_stop_gap_listener);
   23f46:	480a      	ldr	r0, [pc, #40]	; (23f70 <ble_hs_stop_done+0x38>)
   23f48:	f7fb fd24 	bl	1f994 <ble_gap_event_listener_unregister>

    slist = ble_hs_stop_listeners;
   23f4c:	4a09      	ldr	r2, [pc, #36]	; (23f74 <ble_hs_stop_done+0x3c>)
   23f4e:	6814      	ldr	r4, [r2, #0]
    SLIST_INIT(&ble_hs_stop_listeners);
   23f50:	2300      	movs	r3, #0
   23f52:	6013      	str	r3, [r2, #0]

    ble_hs_enabled_state = BLE_HS_ENABLED_STATE_OFF;
   23f54:	4a08      	ldr	r2, [pc, #32]	; (23f78 <ble_hs_stop_done+0x40>)
   23f56:	7013      	strb	r3, [r2, #0]

    ble_hs_unlock();
   23f58:	f7fd fdd8 	bl	21b0c <ble_hs_unlock>

    SLIST_FOREACH(listener, &slist, link) {
   23f5c:	b12c      	cbz	r4, 23f6a <ble_hs_stop_done+0x32>
        listener->fn(status, listener->arg);
   23f5e:	6823      	ldr	r3, [r4, #0]
   23f60:	6861      	ldr	r1, [r4, #4]
   23f62:	4628      	mov	r0, r5
   23f64:	4798      	blx	r3
    SLIST_FOREACH(listener, &slist, link) {
   23f66:	68a4      	ldr	r4, [r4, #8]
   23f68:	e7f8      	b.n	23f5c <ble_hs_stop_done+0x24>
    }
}
   23f6a:	bd38      	pop	{r3, r4, r5, pc}
   23f6c:	10003fa4 	.word	0x10003fa4
   23f70:	10003f94 	.word	0x10003f94
   23f74:	10003fa0 	.word	0x10003fa0
   23f78:	10003bb4 	.word	0x10003bb4

00023f7c <ble_hs_stop_terminate_timeout_cb>:
 * This is called when host graceful disconnect timeout fires. That means some devices
 * are out of range and disconnection completed did no happen yet.
 */
static void
ble_hs_stop_terminate_timeout_cb(struct ble_npl_event *ev)
{
   23f7c:	b508      	push	{r3, lr}
    BLE_HS_LOG(ERROR, "ble_hs_stop_terminate_timeout_cb,"
   23f7e:	4b05      	ldr	r3, [pc, #20]	; (23f94 <ble_hs_stop_terminate_timeout_cb+0x18>)
   23f80:	781b      	ldrb	r3, [r3, #0]
   23f82:	4a05      	ldr	r2, [pc, #20]	; (23f98 <ble_hs_stop_terminate_timeout_cb+0x1c>)
   23f84:	2103      	movs	r1, #3
   23f86:	2004      	movs	r0, #4
   23f88:	f7f5 fbe6 	bl	19758 <modlog_printf>
                      "%d connection(s) still up \n", ble_hs_stop_conn_cnt);

    /* TODO: Shall we send error here? */
    ble_hs_stop_done(0);
   23f8c:	2000      	movs	r0, #0
   23f8e:	f7ff ffd3 	bl	23f38 <ble_hs_stop_done>
}
   23f92:	bd08      	pop	{r3, pc}
   23f94:	10003f91 	.word	0x10003f91
   23f98:	0003120c 	.word	0x0003120c

00023f9c <ble_hs_stop_init>:
    return 0;
}

void
ble_hs_stop_init(void)
{
   23f9c:	b508      	push	{r3, lr}
    return (struct ble_npl_eventq *) os_eventq_dflt_get();
   23f9e:	f7f1 faed 	bl	1557c <os_eventq_dflt_get>
   23fa2:	4601      	mov	r1, r0
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   23fa4:	2300      	movs	r3, #0
   23fa6:	4a02      	ldr	r2, [pc, #8]	; (23fb0 <ble_hs_stop_init+0x14>)
   23fa8:	4802      	ldr	r0, [pc, #8]	; (23fb4 <ble_hs_stop_init+0x18>)
   23faa:	f7f1 f8a9 	bl	15100 <os_callout_init>
                         ble_hs_stop_terminate_timeout_cb, NULL);
#else
    ble_npl_callout_init(&ble_hs_stop_terminate_tmo, nimble_port_get_dflt_eventq(),
                         ble_hs_stop_terminate_timeout_cb, NULL);
#endif
}
   23fae:	bd08      	pop	{r3, pc}
   23fb0:	00023f7d 	.word	0x00023f7d
   23fb4:	10003fa4 	.word	0x10003fa4

00023fb8 <ble_l2cap_get_mtu>:
    return rc;
}

static uint16_t
ble_l2cap_get_mtu(struct ble_l2cap_chan *chan)
{
   23fb8:	b508      	push	{r3, lr}
    if (chan->scid == BLE_L2CAP_CID_ATT) {
   23fba:	8903      	ldrh	r3, [r0, #8]
   23fbc:	2b04      	cmp	r3, #4
   23fbe:	d001      	beq.n	23fc4 <ble_l2cap_get_mtu+0xc>
         * done
         */
        return ble_att_chan_mtu(chan);
    }

    return chan->my_mtu;
   23fc0:	8940      	ldrh	r0, [r0, #10]
}
   23fc2:	bd08      	pop	{r3, pc}
        return ble_att_chan_mtu(chan);
   23fc4:	f7f8 fd0d 	bl	1c9e2 <ble_att_chan_mtu>
   23fc8:	e7fb      	b.n	23fc2 <ble_l2cap_get_mtu+0xa>

00023fca <ble_l2cap_append_rx>:
{
   23fca:	b508      	push	{r3, lr}
    m = os_mbuf_pack_chains(chan->rx_buf, frag);
   23fcc:	6900      	ldr	r0, [r0, #16]
   23fce:	f7f1 fe63 	bl	15c98 <os_mbuf_pack_chains>
    assert(m);
   23fd2:	b100      	cbz	r0, 23fd6 <ble_l2cap_append_rx+0xc>
}
   23fd4:	bd08      	pop	{r3, pc}
    assert(m);
   23fd6:	f7f0 fb45 	bl	14664 <hal_debugger_connected>
   23fda:	b100      	cbz	r0, 23fde <ble_l2cap_append_rx+0x14>
   23fdc:	be01      	bkpt	0x0001
   23fde:	2300      	movs	r3, #0
   23fe0:	461a      	mov	r2, r3
   23fe2:	4619      	mov	r1, r3
   23fe4:	4618      	mov	r0, r3
   23fe6:	f7f0 fedd 	bl	14da4 <__assert_func>
	...

00023fec <ble_l2cap_chan_alloc>:
{
   23fec:	b510      	push	{r4, lr}
   23fee:	4604      	mov	r4, r0
    chan = os_memblock_get(&ble_l2cap_chan_pool);
   23ff0:	4809      	ldr	r0, [pc, #36]	; (24018 <ble_l2cap_chan_alloc+0x2c>)
   23ff2:	f7f1 ff1c 	bl	15e2e <os_memblock_get>
    if (chan == NULL) {
   23ff6:	4603      	mov	r3, r0
   23ff8:	b160      	cbz	r0, 24014 <ble_l2cap_chan_alloc+0x28>
    memset(chan, 0, sizeof *chan);
   23ffa:	2200      	movs	r2, #0
   23ffc:	6002      	str	r2, [r0, #0]
   23ffe:	6042      	str	r2, [r0, #4]
   24000:	6082      	str	r2, [r0, #8]
   24002:	60c2      	str	r2, [r0, #12]
   24004:	6102      	str	r2, [r0, #16]
   24006:	6142      	str	r2, [r0, #20]
   24008:	6182      	str	r2, [r0, #24]
    chan->conn_handle = conn_handle;
   2400a:	8084      	strh	r4, [r0, #4]
    STATS_INC(ble_l2cap_stats, chan_create);
   2400c:	4903      	ldr	r1, [pc, #12]	; (2401c <ble_l2cap_chan_alloc+0x30>)
   2400e:	68ca      	ldr	r2, [r1, #12]
   24010:	3201      	adds	r2, #1
   24012:	60ca      	str	r2, [r1, #12]
}
   24014:	4618      	mov	r0, r3
   24016:	bd10      	pop	{r4, pc}
   24018:	10004018 	.word	0x10004018
   2401c:	10004034 	.word	0x10004034

00024020 <ble_l2cap_chan_free>:
    if (chan == NULL) {
   24020:	b169      	cbz	r1, 2403e <ble_l2cap_chan_free+0x1e>
{
   24022:	b510      	push	{r4, lr}
   24024:	460c      	mov	r4, r1
    os_mbuf_free_chain(chan->rx_buf);
   24026:	6908      	ldr	r0, [r1, #16]
   24028:	f7f1 fb24 	bl	15674 <os_mbuf_free_chain>
    rc = os_memblock_put(&ble_l2cap_chan_pool, chan);
   2402c:	4621      	mov	r1, r4
   2402e:	4804      	ldr	r0, [pc, #16]	; (24040 <ble_l2cap_chan_free+0x20>)
   24030:	f7f1 ff25 	bl	15e7e <os_memblock_put>
    STATS_INC(ble_l2cap_stats, chan_delete);
   24034:	4a03      	ldr	r2, [pc, #12]	; (24044 <ble_l2cap_chan_free+0x24>)
   24036:	6913      	ldr	r3, [r2, #16]
   24038:	3301      	adds	r3, #1
   2403a:	6113      	str	r3, [r2, #16]
}
   2403c:	bd10      	pop	{r4, pc}
   2403e:	4770      	bx	lr
   24040:	10004018 	.word	0x10004018
   24044:	10004034 	.word	0x10004034

00024048 <ble_l2cap_is_mtu_req_sent>:
    return (chan->flags & BLE_L2CAP_CHAN_F_TXED_MTU);
   24048:	7b80      	ldrb	r0, [r0, #14]
}
   2404a:	f000 0001 	and.w	r0, r0, #1
   2404e:	4770      	bx	lr

00024050 <ble_l2cap_parse_hdr>:
{
   24050:	b538      	push	{r3, r4, r5, lr}
   24052:	4614      	mov	r4, r2
    rc = os_mbuf_copydata(om, off, sizeof *l2cap_hdr, l2cap_hdr);
   24054:	4613      	mov	r3, r2
   24056:	2204      	movs	r2, #4
   24058:	f7f1 fbb6 	bl	157c8 <os_mbuf_copydata>
    if (rc != 0) {
   2405c:	b960      	cbnz	r0, 24078 <ble_l2cap_parse_hdr+0x28>
   2405e:	4605      	mov	r5, r0
    l2cap_hdr->len = get_le16(&l2cap_hdr->len);
   24060:	4620      	mov	r0, r4
   24062:	f009 fa27 	bl	2d4b4 <get_le16>
   24066:	4623      	mov	r3, r4
   24068:	f823 0b02 	strh.w	r0, [r3], #2
    l2cap_hdr->cid = get_le16(&l2cap_hdr->cid);
   2406c:	4618      	mov	r0, r3
   2406e:	f009 fa21 	bl	2d4b4 <get_le16>
   24072:	8060      	strh	r0, [r4, #2]
}
   24074:	4628      	mov	r0, r5
   24076:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_EMSGSIZE;
   24078:	2504      	movs	r5, #4
   2407a:	e7fb      	b.n	24074 <ble_l2cap_parse_hdr+0x24>

0002407c <ble_l2cap_prepend_hdr>:
{
   2407c:	b530      	push	{r4, r5, lr}
   2407e:	b083      	sub	sp, #12
   24080:	4604      	mov	r4, r0
   24082:	460d      	mov	r5, r1
    put_le16(&hdr.len, len);
   24084:	4611      	mov	r1, r2
   24086:	a801      	add	r0, sp, #4
   24088:	f009 fa06 	bl	2d498 <put_le16>
    put_le16(&hdr.cid, cid);
   2408c:	4629      	mov	r1, r5
   2408e:	f10d 0006 	add.w	r0, sp, #6
   24092:	f009 fa01 	bl	2d498 <put_le16>
    om = os_mbuf_prepend_pullup(om, sizeof hdr);
   24096:	2104      	movs	r1, #4
   24098:	4620      	mov	r0, r4
   2409a:	f7f1 fdca 	bl	15c32 <os_mbuf_prepend_pullup>
    if (om == NULL) {
   2409e:	b110      	cbz	r0, 240a6 <ble_l2cap_prepend_hdr+0x2a>
    memcpy(om->om_data, &hdr, sizeof hdr);
   240a0:	6803      	ldr	r3, [r0, #0]
   240a2:	9a01      	ldr	r2, [sp, #4]
   240a4:	601a      	str	r2, [r3, #0]
}
   240a6:	b003      	add	sp, #12
   240a8:	bd30      	pop	{r4, r5, pc}

000240aa <ble_l2cap_get_conn_handle>:
    if (!chan) {
   240aa:	b108      	cbz	r0, 240b0 <ble_l2cap_get_conn_handle+0x6>
    return chan->conn_handle;
   240ac:	8880      	ldrh	r0, [r0, #4]
   240ae:	4770      	bx	lr
        return BLE_HS_CONN_HANDLE_NONE;
   240b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   240b4:	4770      	bx	lr

000240b6 <ble_l2cap_remove_rx>:
{
   240b6:	b538      	push	{r3, r4, r5, lr}
   240b8:	460c      	mov	r4, r1
    conn->bhc_rx_chan = NULL;
   240ba:	2500      	movs	r5, #0
   240bc:	6305      	str	r5, [r0, #48]	; 0x30
    os_mbuf_free_chain(chan->rx_buf);
   240be:	6908      	ldr	r0, [r1, #16]
   240c0:	f7f1 fad8 	bl	15674 <os_mbuf_free_chain>
    chan->rx_buf = NULL;
   240c4:	6125      	str	r5, [r4, #16]
    chan->rx_len = 0;
   240c6:	82a5      	strh	r5, [r4, #20]
}
   240c8:	bd38      	pop	{r3, r4, r5, pc}

000240ca <ble_l2cap_rx_payload>:
{
   240ca:	b570      	push	{r4, r5, r6, lr}
   240cc:	4605      	mov	r5, r0
   240ce:	460c      	mov	r4, r1
   240d0:	4611      	mov	r1, r2
   240d2:	461e      	mov	r6, r3
    if (chan->rx_buf == NULL) {
   240d4:	6923      	ldr	r3, [r4, #16]
   240d6:	b163      	cbz	r3, 240f2 <ble_l2cap_rx_payload+0x28>
        ble_l2cap_append_rx(chan, om);
   240d8:	4620      	mov	r0, r4
   240da:	f7ff ff76 	bl	23fca <ble_l2cap_append_rx>
    len_diff = OS_MBUF_PKTLEN(chan->rx_buf) - chan->rx_len;
   240de:	6923      	ldr	r3, [r4, #16]
   240e0:	8a1a      	ldrh	r2, [r3, #16]
   240e2:	8aa0      	ldrh	r0, [r4, #20]
   240e4:	1a10      	subs	r0, r2, r0
    if (len_diff > 0) {
   240e6:	2800      	cmp	r0, #0
   240e8:	dc05      	bgt.n	240f6 <ble_l2cap_rx_payload+0x2c>
    } else if (len_diff == 0) {
   240ea:	b950      	cbnz	r0, 24102 <ble_l2cap_rx_payload+0x38>
        *out_rx_cb = chan->rx_fn;
   240ec:	69a3      	ldr	r3, [r4, #24]
   240ee:	6033      	str	r3, [r6, #0]
}
   240f0:	bd70      	pop	{r4, r5, r6, pc}
        chan->rx_buf = om;
   240f2:	6122      	str	r2, [r4, #16]
   240f4:	e7f3      	b.n	240de <ble_l2cap_rx_payload+0x14>
        ble_l2cap_remove_rx(conn, chan);
   240f6:	4621      	mov	r1, r4
   240f8:	4628      	mov	r0, r5
   240fa:	f7ff ffdc 	bl	240b6 <ble_l2cap_remove_rx>
        rc = BLE_HS_EBADDATA;
   240fe:	200a      	movs	r0, #10
   24100:	e7f6      	b.n	240f0 <ble_l2cap_rx_payload+0x26>
    return os_time_get();
   24102:	f7f2 fa4d 	bl	165a0 <os_time_get>
            ble_npl_time_get() + MYNEWT_VAL(BLE_L2CAP_RX_FRAG_TIMEOUT);
   24106:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
   2410a:	3030      	adds	r0, #48	; 0x30
        conn->bhc_rx_timeout =
   2410c:	6368      	str	r0, [r5, #52]	; 0x34
        ble_hs_timer_resched();
   2410e:	f7fd fdeb 	bl	21ce8 <ble_hs_timer_resched>
        rc = BLE_HS_EAGAIN;
   24112:	2001      	movs	r0, #1
    return rc;
   24114:	e7ec      	b.n	240f0 <ble_l2cap_rx_payload+0x26>

00024116 <ble_l2cap_rx>:
ble_l2cap_rx(struct ble_hs_conn *conn,
             struct hci_data_hdr *hci_hdr,
             struct os_mbuf *om,
             ble_l2cap_rx_fn **out_rx_cb,
             int *out_reject_cid)
{
   24116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2411a:	b082      	sub	sp, #8
   2411c:	4606      	mov	r6, r0
   2411e:	4614      	mov	r4, r2
   24120:	461f      	mov	r7, r3
   24122:	9d08      	ldr	r5, [sp, #32]
    struct ble_l2cap_chan *chan;
    struct ble_l2cap_hdr l2cap_hdr;
    uint8_t pb;
    int rc;

    *out_reject_cid = -1;
   24124:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24128:	602b      	str	r3, [r5, #0]

    pb = BLE_HCI_DATA_PB(hci_hdr->hdh_handle_pb_bc);
   2412a:	8809      	ldrh	r1, [r1, #0]
   2412c:	f3c1 3101 	ubfx	r1, r1, #12, #2
    switch (pb) {
   24130:	2901      	cmp	r1, #1
   24132:	d031      	beq.n	24198 <ble_l2cap_rx+0x82>
   24134:	2902      	cmp	r1, #2
   24136:	d141      	bne.n	241bc <ble_l2cap_rx+0xa6>
    case BLE_HCI_PB_FIRST_FLUSH:
        /* First fragment. */
        rc = ble_l2cap_parse_hdr(om, 0, &l2cap_hdr);
   24138:	aa01      	add	r2, sp, #4
   2413a:	2100      	movs	r1, #0
   2413c:	4620      	mov	r0, r4
   2413e:	f7ff ff87 	bl	24050 <ble_l2cap_parse_hdr>
        if (rc != 0) {
   24142:	4680      	mov	r8, r0
   24144:	bbe0      	cbnz	r0, 241c0 <ble_l2cap_rx+0xaa>
            goto err;
        }

        /* Strip L2CAP header from the front of the mbuf. */
        os_mbuf_adj(om, BLE_L2CAP_HDR_SZ);
   24146:	2104      	movs	r1, #4
   24148:	4620      	mov	r0, r4
   2414a:	f7f1 fb6a 	bl	15822 <os_mbuf_adj>

        chan = ble_hs_conn_chan_find_by_scid(conn, l2cap_hdr.cid);
   2414e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   24152:	4630      	mov	r0, r6
   24154:	f7fe fa7c 	bl	22650 <ble_hs_conn_chan_find_by_scid>
        if (chan == NULL) {
   24158:	4680      	mov	r8, r0
   2415a:	b198      	cbz	r0, 24184 <ble_l2cap_rx+0x6e>
                *out_reject_cid = l2cap_hdr.cid;
            }
            goto err;
        }

        if (chan->rx_buf != NULL) {
   2415c:	6903      	ldr	r3, [r0, #16]
   2415e:	b11b      	cbz	r3, 24168 <ble_l2cap_rx+0x52>
            /* Previous data packet never completed.  Discard old packet. */
            ble_l2cap_remove_rx(conn, chan);
   24160:	4601      	mov	r1, r0
   24162:	4630      	mov	r0, r6
   24164:	f7ff ffa7 	bl	240b6 <ble_l2cap_remove_rx>
        }

        if (l2cap_hdr.len > ble_l2cap_get_mtu(chan)) {
   24168:	f8bd 5004 	ldrh.w	r5, [sp, #4]
   2416c:	4640      	mov	r0, r8
   2416e:	f7ff ff23 	bl	23fb8 <ble_l2cap_get_mtu>
   24172:	4285      	cmp	r5, r0
   24174:	d82b      	bhi.n	241ce <ble_l2cap_rx+0xb8>
            ble_l2cap_disconnect(chan);
            goto err;
        }

        /* Remember channel and length of L2CAP data for reassembly. */
        conn->bhc_rx_chan = chan;
   24176:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
        chan->rx_len = l2cap_hdr.len;
   2417a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   2417e:	f8a8 3014 	strh.w	r3, [r8, #20]
        break;
   24182:	e011      	b.n	241a8 <ble_l2cap_rx+0x92>
            if (l2cap_hdr.cid != BLE_L2CAP_CID_BLACK_HOLE) {
   24184:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   24188:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2418c:	4293      	cmp	r3, r2
   2418e:	d000      	beq.n	24192 <ble_l2cap_rx+0x7c>
                *out_reject_cid = l2cap_hdr.cid;
   24190:	602b      	str	r3, [r5, #0]
            rc = BLE_HS_ENOENT;
   24192:	f04f 0805 	mov.w	r8, #5
            goto err;
   24196:	e013      	b.n	241c0 <ble_l2cap_rx+0xaa>

    case BLE_HCI_PB_MIDDLE:
        chan = conn->bhc_rx_chan;
   24198:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
        if (chan == NULL || chan->rx_buf == NULL) {
   2419c:	f1b8 0f00 	cmp.w	r8, #0
   241a0:	d018      	beq.n	241d4 <ble_l2cap_rx+0xbe>
   241a2:	f8d8 3010 	ldr.w	r3, [r8, #16]
   241a6:	b1c3      	cbz	r3, 241da <ble_l2cap_rx+0xc4>
    default:
        rc = BLE_HS_EBADDATA;
        goto err;
    }

    rc = ble_l2cap_rx_payload(conn, chan, om, out_rx_cb);
   241a8:	463b      	mov	r3, r7
   241aa:	4622      	mov	r2, r4
   241ac:	4641      	mov	r1, r8
   241ae:	4630      	mov	r0, r6
   241b0:	f7ff ff8b 	bl	240ca <ble_l2cap_rx_payload>
    om = NULL;
    if (rc != 0) {
   241b4:	4680      	mov	r8, r0
   241b6:	b130      	cbz	r0, 241c6 <ble_l2cap_rx+0xb0>
    om = NULL;
   241b8:	2400      	movs	r4, #0
   241ba:	e001      	b.n	241c0 <ble_l2cap_rx+0xaa>
    switch (pb) {
   241bc:	f04f 080a 	mov.w	r8, #10
    }

    return 0;

err:
    os_mbuf_free_chain(om);
   241c0:	4620      	mov	r0, r4
   241c2:	f7f1 fa57 	bl	15674 <os_mbuf_free_chain>
    return rc;
}
   241c6:	4640      	mov	r0, r8
   241c8:	b002      	add	sp, #8
   241ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_EBADDATA;
   241ce:	f04f 080a 	mov.w	r8, #10
   241d2:	e7f5      	b.n	241c0 <ble_l2cap_rx+0xaa>
            rc = BLE_HS_EBADDATA;
   241d4:	f04f 080a 	mov.w	r8, #10
   241d8:	e7f2      	b.n	241c0 <ble_l2cap_rx+0xaa>
   241da:	f04f 080a 	mov.w	r8, #10
   241de:	e7ef      	b.n	241c0 <ble_l2cap_rx+0xaa>

000241e0 <ble_l2cap_tx>:
 * @return                      0 on success; nonzero on error.
 */
int
ble_l2cap_tx(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan,
             struct os_mbuf *txom)
{
   241e0:	b510      	push	{r4, lr}
   241e2:	b082      	sub	sp, #8
   241e4:	4604      	mov	r4, r0
   241e6:	9201      	str	r2, [sp, #4]
    int rc;

    txom = ble_l2cap_prepend_hdr(txom, chan->dcid, OS_MBUF_PKTLEN(txom));
   241e8:	4610      	mov	r0, r2
   241ea:	8a12      	ldrh	r2, [r2, #16]
   241ec:	88c9      	ldrh	r1, [r1, #6]
   241ee:	f7ff ff45 	bl	2407c <ble_l2cap_prepend_hdr>
   241f2:	9001      	str	r0, [sp, #4]
    if (txom == NULL) {
   241f4:	b188      	cbz	r0, 2421a <ble_l2cap_tx+0x3a>
        return BLE_HS_ENOMEM;
    }

    rc = ble_hs_hci_acl_tx(conn, &txom);
   241f6:	a901      	add	r1, sp, #4
   241f8:	4620      	mov	r0, r4
   241fa:	f7fe feef 	bl	22fdc <ble_hs_hci_acl_tx>
    switch (rc) {
   241fe:	b150      	cbz	r0, 24216 <ble_l2cap_tx+0x36>
   24200:	2801      	cmp	r0, #1
   24202:	d108      	bne.n	24216 <ble_l2cap_tx+0x36>
        /* Success. */
        return 0;

    case BLE_HS_EAGAIN:
        /* Controller could not accommodate full packet.  Enqueue remainder. */
        STAILQ_INSERT_TAIL(&conn->bhc_tx_q, OS_MBUF_PKTHDR(txom), omp_next);
   24204:	9b01      	ldr	r3, [sp, #4]
   24206:	2000      	movs	r0, #0
   24208:	6158      	str	r0, [r3, #20]
   2420a:	6c22      	ldr	r2, [r4, #64]	; 0x40
   2420c:	3310      	adds	r3, #16
   2420e:	6013      	str	r3, [r2, #0]
   24210:	9b01      	ldr	r3, [sp, #4]
   24212:	3314      	adds	r3, #20
   24214:	6423      	str	r3, [r4, #64]	; 0x40

    default:
        /* Error. */
        return rc;
    }
}
   24216:	b002      	add	sp, #8
   24218:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOMEM;
   2421a:	2006      	movs	r0, #6
   2421c:	e7fb      	b.n	24216 <ble_l2cap_tx+0x36>
	...

00024220 <ble_l2cap_init>:

int
ble_l2cap_init(void)
{
   24220:	b500      	push	{lr}
   24222:	b083      	sub	sp, #12
    int rc;

    rc = os_mempool_init(&ble_l2cap_chan_pool,
   24224:	4b11      	ldr	r3, [pc, #68]	; (2426c <ble_l2cap_init+0x4c>)
   24226:	9300      	str	r3, [sp, #0]
   24228:	4b11      	ldr	r3, [pc, #68]	; (24270 <ble_l2cap_init+0x50>)
   2422a:	221c      	movs	r2, #28
   2422c:	2103      	movs	r1, #3
   2422e:	4811      	ldr	r0, [pc, #68]	; (24274 <ble_l2cap_init+0x54>)
   24230:	f7f1 fdc6 	bl	15dc0 <os_mempool_init>
                         MYNEWT_VAL(BLE_L2CAP_MAX_CHANS) +
                         MYNEWT_VAL(BLE_L2CAP_COC_MAX_NUM),
                         sizeof (struct ble_l2cap_chan),
                         ble_l2cap_chan_mem, "ble_l2cap_chan_pool");
    if (rc != 0) {
   24234:	b9a0      	cbnz	r0, 24260 <ble_l2cap_init+0x40>
        return BLE_HS_EOS;
    }

    rc = ble_l2cap_sig_init();
   24236:	f000 fa71 	bl	2471c <ble_l2cap_sig_init>
    if (rc != 0) {
   2423a:	4603      	mov	r3, r0
   2423c:	b988      	cbnz	r0, 24262 <ble_l2cap_init+0x42>
    rc = ble_l2cap_coc_init();
    if (rc != 0) {
        return rc;
    }

    rc = ble_sm_init();
   2423e:	f001 ff7d 	bl	2613c <ble_sm_init>
    if (rc != 0) {
   24242:	4603      	mov	r3, r0
   24244:	b968      	cbnz	r0, 24262 <ble_l2cap_init+0x42>
        return rc;
    }

    rc = stats_init_and_reg(
   24246:	4b0c      	ldr	r3, [pc, #48]	; (24278 <ble_l2cap_init+0x58>)
   24248:	9301      	str	r3, [sp, #4]
   2424a:	2300      	movs	r3, #0
   2424c:	9300      	str	r3, [sp, #0]
   2424e:	220a      	movs	r2, #10
   24250:	2104      	movs	r1, #4
   24252:	480a      	ldr	r0, [pc, #40]	; (2427c <ble_l2cap_init+0x5c>)
   24254:	f7f5 fffa 	bl	1a24c <stats_init_and_reg>
        STATS_HDR(ble_l2cap_stats), STATS_SIZE_INIT_PARMS(ble_l2cap_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_l2cap_stats), "ble_l2cap");
    if (rc != 0) {
   24258:	4603      	mov	r3, r0
   2425a:	b110      	cbz	r0, 24262 <ble_l2cap_init+0x42>
        return BLE_HS_EOS;
   2425c:	230b      	movs	r3, #11
   2425e:	e000      	b.n	24262 <ble_l2cap_init+0x42>
        return BLE_HS_EOS;
   24260:	230b      	movs	r3, #11
    }

    return 0;
}
   24262:	4618      	mov	r0, r3
   24264:	b003      	add	sp, #12
   24266:	f85d fb04 	ldr.w	pc, [sp], #4
   2426a:	bf00      	nop
   2426c:	0003124c 	.word	0x0003124c
   24270:	10003fc4 	.word	0x10003fc4
   24274:	10004018 	.word	0x10004018
   24278:	00031260 	.word	0x00031260
   2427c:	10004034 	.word	0x10004034

00024280 <ble_l2cap_sig_next_id>:
 *****************************************************************************/

static uint8_t
ble_l2cap_sig_next_id(void)
{
    ble_l2cap_sig_cur_id++;
   24280:	4a05      	ldr	r2, [pc, #20]	; (24298 <ble_l2cap_sig_next_id+0x18>)
   24282:	7813      	ldrb	r3, [r2, #0]
   24284:	3301      	adds	r3, #1
   24286:	b2db      	uxtb	r3, r3
   24288:	7013      	strb	r3, [r2, #0]
    if (ble_l2cap_sig_cur_id == 0) {
   2428a:	b913      	cbnz	r3, 24292 <ble_l2cap_sig_next_id+0x12>
        /* An ID of 0 is illegal. */
        ble_l2cap_sig_cur_id = 1;
   2428c:	4613      	mov	r3, r2
   2428e:	2201      	movs	r2, #1
   24290:	701a      	strb	r2, [r3, #0]
    }

    return ble_l2cap_sig_cur_id;
}
   24292:	4b01      	ldr	r3, [pc, #4]	; (24298 <ble_l2cap_sig_next_id+0x18>)
   24294:	7818      	ldrb	r0, [r3, #0]
   24296:	4770      	bx	lr
   24298:	10004068 	.word	0x10004068

0002429c <ble_l2cap_sig_dispatch_get>:

static ble_l2cap_sig_rx_fn *
ble_l2cap_sig_dispatch_get(uint8_t op)
{
    if (op >= BLE_L2CAP_SIG_OP_MAX) {
   2429c:	281a      	cmp	r0, #26
   2429e:	d803      	bhi.n	242a8 <ble_l2cap_sig_dispatch_get+0xc>
        return NULL;
    }

    return ble_l2cap_sig_dispatch[op];
   242a0:	4b02      	ldr	r3, [pc, #8]	; (242ac <ble_l2cap_sig_dispatch_get+0x10>)
   242a2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   242a6:	4770      	bx	lr
        return NULL;
   242a8:	2000      	movs	r0, #0
}
   242aa:	4770      	bx	lr
   242ac:	00031284 	.word	0x00031284

000242b0 <ble_l2cap_sig_proc_matches>:
 * @return                      1 if the proc matches; 0 otherwise.
 */
static int
ble_l2cap_sig_proc_matches(struct ble_l2cap_sig_proc *proc,
                           uint16_t conn_handle, uint8_t op, uint8_t id)
{
   242b0:	b410      	push	{r4}
    if (conn_handle != proc->conn_handle) {
   242b2:	8904      	ldrh	r4, [r0, #8]
   242b4:	428c      	cmp	r4, r1
   242b6:	d108      	bne.n	242ca <ble_l2cap_sig_proc_matches+0x1a>
        return 0;
    }

    if (op != proc->op) {
   242b8:	7a81      	ldrb	r1, [r0, #10]
   242ba:	4291      	cmp	r1, r2
   242bc:	d108      	bne.n	242d0 <ble_l2cap_sig_proc_matches+0x20>
        return 0;
    }

    if (id != 0 && id != proc->id) {
   242be:	b14b      	cbz	r3, 242d4 <ble_l2cap_sig_proc_matches+0x24>
   242c0:	7ac2      	ldrb	r2, [r0, #11]
   242c2:	429a      	cmp	r2, r3
   242c4:	d108      	bne.n	242d8 <ble_l2cap_sig_proc_matches+0x28>
        return 0;
    }

    return 1;
   242c6:	2001      	movs	r0, #1
   242c8:	e000      	b.n	242cc <ble_l2cap_sig_proc_matches+0x1c>
        return 0;
   242ca:	2000      	movs	r0, #0
}
   242cc:	bc10      	pop	{r4}
   242ce:	4770      	bx	lr
        return 0;
   242d0:	2000      	movs	r0, #0
   242d2:	e7fb      	b.n	242cc <ble_l2cap_sig_proc_matches+0x1c>
    return 1;
   242d4:	2001      	movs	r0, #1
   242d6:	e7f9      	b.n	242cc <ble_l2cap_sig_proc_matches+0x1c>
        return 0;
   242d8:	2000      	movs	r0, #0
   242da:	e7f7      	b.n	242cc <ble_l2cap_sig_proc_matches+0x1c>

000242dc <ble_l2cap_sig_rx_noop>:
ble_l2cap_sig_rx_noop(uint16_t conn_handle,
                      struct ble_l2cap_sig_hdr *hdr,
                      struct os_mbuf **om)
{
    return BLE_HS_ENOTSUP;
}
   242dc:	2008      	movs	r0, #8
   242de:	4770      	bx	lr

000242e0 <ble_l2cap_sig_update_call_cb>:
 * $update                                                                   *
 *****************************************************************************/

static void
ble_l2cap_sig_update_call_cb(struct ble_l2cap_sig_proc *proc, int status)
{
   242e0:	b510      	push	{r4, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (status != 0) {
   242e2:	460c      	mov	r4, r1
   242e4:	b119      	cbz	r1, 242ee <ble_l2cap_sig_update_call_cb+0xe>
        STATS_INC(ble_l2cap_stats, update_fail);
   242e6:	4a05      	ldr	r2, [pc, #20]	; (242fc <ble_l2cap_sig_update_call_cb+0x1c>)
   242e8:	69d3      	ldr	r3, [r2, #28]
   242ea:	3301      	adds	r3, #1
   242ec:	61d3      	str	r3, [r2, #28]
    }

    if (proc->update.cb != NULL) {
   242ee:	68c3      	ldr	r3, [r0, #12]
   242f0:	b11b      	cbz	r3, 242fa <ble_l2cap_sig_update_call_cb+0x1a>
        proc->update.cb(proc->conn_handle, status, proc->update.cb_arg);
   242f2:	6902      	ldr	r2, [r0, #16]
   242f4:	4621      	mov	r1, r4
   242f6:	8900      	ldrh	r0, [r0, #8]
   242f8:	4798      	blx	r3
    }
}
   242fa:	bd10      	pop	{r4, pc}
   242fc:	10004034 	.word	0x10004034

00024300 <ble_l2cap_sig_proc_insert>:
{
   24300:	b510      	push	{r4, lr}
   24302:	4604      	mov	r4, r0
    ble_hs_lock();
   24304:	f7fd fbfe 	bl	21b04 <ble_hs_lock>
    STAILQ_INSERT_HEAD(&ble_l2cap_sig_procs, proc, next);
   24308:	4b05      	ldr	r3, [pc, #20]	; (24320 <ble_l2cap_sig_proc_insert+0x20>)
   2430a:	681b      	ldr	r3, [r3, #0]
   2430c:	6023      	str	r3, [r4, #0]
   2430e:	b123      	cbz	r3, 2431a <ble_l2cap_sig_proc_insert+0x1a>
   24310:	4b03      	ldr	r3, [pc, #12]	; (24320 <ble_l2cap_sig_proc_insert+0x20>)
   24312:	601c      	str	r4, [r3, #0]
    ble_hs_unlock();
   24314:	f7fd fbfa 	bl	21b0c <ble_hs_unlock>
}
   24318:	bd10      	pop	{r4, pc}
    STAILQ_INSERT_HEAD(&ble_l2cap_sig_procs, proc, next);
   2431a:	4b01      	ldr	r3, [pc, #4]	; (24320 <ble_l2cap_sig_proc_insert+0x20>)
   2431c:	605c      	str	r4, [r3, #4]
   2431e:	e7f7      	b.n	24310 <ble_l2cap_sig_proc_insert+0x10>
   24320:	1000409c 	.word	0x1000409c

00024324 <ble_l2cap_sig_proc_extract>:
{
   24324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24328:	4607      	mov	r7, r0
   2432a:	460e      	mov	r6, r1
   2432c:	4615      	mov	r5, r2
    ble_hs_lock();
   2432e:	f7fd fbe9 	bl	21b04 <ble_hs_lock>
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   24332:	4b15      	ldr	r3, [pc, #84]	; (24388 <ble_l2cap_sig_proc_extract+0x64>)
   24334:	f8d3 9000 	ldr.w	r9, [r3]
   24338:	464c      	mov	r4, r9
    prev = NULL;
   2433a:	f04f 0800 	mov.w	r8, #0
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   2433e:	b194      	cbz	r4, 24366 <ble_l2cap_sig_proc_extract+0x42>
        if (ble_l2cap_sig_proc_matches(proc, conn_handle, op, identifier)) {
   24340:	462b      	mov	r3, r5
   24342:	4632      	mov	r2, r6
   24344:	4639      	mov	r1, r7
   24346:	4620      	mov	r0, r4
   24348:	f7ff ffb2 	bl	242b0 <ble_l2cap_sig_proc_matches>
   2434c:	b910      	cbnz	r0, 24354 <ble_l2cap_sig_proc_extract+0x30>
        prev = proc;
   2434e:	46a0      	mov	r8, r4
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   24350:	6824      	ldr	r4, [r4, #0]
   24352:	e7f4      	b.n	2433e <ble_l2cap_sig_proc_extract+0x1a>
            if (prev == NULL) {
   24354:	f1b8 0f00 	cmp.w	r8, #0
   24358:	d00a      	beq.n	24370 <ble_l2cap_sig_proc_extract+0x4c>
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
   2435a:	f8d8 3000 	ldr.w	r3, [r8]
   2435e:	681b      	ldr	r3, [r3, #0]
   24360:	f8c8 3000 	str.w	r3, [r8]
   24364:	b163      	cbz	r3, 24380 <ble_l2cap_sig_proc_extract+0x5c>
    ble_hs_unlock();
   24366:	f7fd fbd1 	bl	21b0c <ble_hs_unlock>
}
   2436a:	4620      	mov	r0, r4
   2436c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   24370:	f8d9 3000 	ldr.w	r3, [r9]
   24374:	4a04      	ldr	r2, [pc, #16]	; (24388 <ble_l2cap_sig_proc_extract+0x64>)
   24376:	6013      	str	r3, [r2, #0]
   24378:	2b00      	cmp	r3, #0
   2437a:	d1f4      	bne.n	24366 <ble_l2cap_sig_proc_extract+0x42>
   2437c:	6052      	str	r2, [r2, #4]
   2437e:	e7f2      	b.n	24366 <ble_l2cap_sig_proc_extract+0x42>
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
   24380:	4b01      	ldr	r3, [pc, #4]	; (24388 <ble_l2cap_sig_proc_extract+0x64>)
   24382:	f8c3 8004 	str.w	r8, [r3, #4]
   24386:	e7ee      	b.n	24366 <ble_l2cap_sig_proc_extract+0x42>
   24388:	1000409c 	.word	0x1000409c

0002438c <ble_l2cap_sig_proc_alloc>:
{
   2438c:	b508      	push	{r3, lr}
    proc = os_memblock_get(&ble_l2cap_sig_proc_pool);
   2438e:	4806      	ldr	r0, [pc, #24]	; (243a8 <ble_l2cap_sig_proc_alloc+0x1c>)
   24390:	f7f1 fd4d 	bl	15e2e <os_memblock_get>
    if (proc != NULL) {
   24394:	4603      	mov	r3, r0
   24396:	b128      	cbz	r0, 243a4 <ble_l2cap_sig_proc_alloc+0x18>
        memset(proc, 0, sizeof *proc);
   24398:	2200      	movs	r2, #0
   2439a:	6002      	str	r2, [r0, #0]
   2439c:	6042      	str	r2, [r0, #4]
   2439e:	6082      	str	r2, [r0, #8]
   243a0:	60c2      	str	r2, [r0, #12]
   243a2:	6102      	str	r2, [r0, #16]
}
   243a4:	4618      	mov	r0, r3
   243a6:	bd08      	pop	{r3, pc}
   243a8:	10004080 	.word	0x10004080

000243ac <ble_l2cap_sig_proc_set_timer>:
{
   243ac:	b510      	push	{r4, lr}
   243ae:	4604      	mov	r4, r0
   243b0:	f7f2 f8f6 	bl	165a0 <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   243b4:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   243b8:	6060      	str	r0, [r4, #4]
    ble_hs_timer_resched();
   243ba:	f7fd fc95 	bl	21ce8 <ble_hs_timer_resched>
}
   243be:	bd10      	pop	{r4, pc}

000243c0 <ble_l2cap_sig_extract_expired>:
 * @return                      The number of ticks until the next expiration
 *                                  occurs.
 */
static int32_t
ble_l2cap_sig_extract_expired(struct ble_l2cap_sig_proc_list *dst_list)
{
   243c0:	b570      	push	{r4, r5, r6, lr}
   243c2:	4604      	mov	r4, r0
   243c4:	f7f2 f8ec 	bl	165a0 <os_time_get>
   243c8:	4605      	mov	r5, r0
    ble_npl_time_t now;
    ble_npl_stime_t next_exp_in;
    ble_npl_stime_t time_diff;

    now = ble_npl_time_get();
    STAILQ_INIT(dst_list);
   243ca:	2300      	movs	r3, #0
   243cc:	6023      	str	r3, [r4, #0]
   243ce:	6064      	str	r4, [r4, #4]

    /* Assume each event is either expired or has infinite duration. */
    next_exp_in = BLE_HS_FOREVER;

    ble_hs_lock();
   243d0:	f7fd fb98 	bl	21b04 <ble_hs_lock>

    prev = NULL;
    proc = STAILQ_FIRST(&ble_l2cap_sig_procs);
   243d4:	4b0f      	ldr	r3, [pc, #60]	; (24414 <ble_l2cap_sig_extract_expired+0x54>)
   243d6:	681b      	ldr	r3, [r3, #0]
    next_exp_in = BLE_HS_FOREVER;
   243d8:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    while (proc != NULL) {
   243dc:	e00a      	b.n	243f4 <ble_l2cap_sig_extract_expired+0x34>

        time_diff = proc->exp_os_ticks - now;
        if (time_diff <= 0) {
            /* Procedure has expired; move it to the destination list. */
            if (prev == NULL) {
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   243de:	480d      	ldr	r0, [pc, #52]	; (24414 <ble_l2cap_sig_extract_expired+0x54>)
   243e0:	6802      	ldr	r2, [r0, #0]
   243e2:	6812      	ldr	r2, [r2, #0]
   243e4:	6002      	str	r2, [r0, #0]
   243e6:	b17a      	cbz	r2, 24408 <ble_l2cap_sig_extract_expired+0x48>
            } else {
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
            }
            STAILQ_INSERT_TAIL(dst_list, proc, next);
   243e8:	2200      	movs	r2, #0
   243ea:	601a      	str	r2, [r3, #0]
   243ec:	6862      	ldr	r2, [r4, #4]
   243ee:	6013      	str	r3, [r2, #0]
   243f0:	6063      	str	r3, [r4, #4]
        } else {
            if (time_diff < next_exp_in) {
                next_exp_in = time_diff;
   243f2:	460b      	mov	r3, r1
    while (proc != NULL) {
   243f4:	b153      	cbz	r3, 2440c <ble_l2cap_sig_extract_expired+0x4c>
        next = STAILQ_NEXT(proc, next);
   243f6:	6819      	ldr	r1, [r3, #0]
        time_diff = proc->exp_os_ticks - now;
   243f8:	685a      	ldr	r2, [r3, #4]
   243fa:	1b52      	subs	r2, r2, r5
        if (time_diff <= 0) {
   243fc:	2a00      	cmp	r2, #0
   243fe:	ddee      	ble.n	243de <ble_l2cap_sig_extract_expired+0x1e>
            if (time_diff < next_exp_in) {
   24400:	4296      	cmp	r6, r2
   24402:	ddf6      	ble.n	243f2 <ble_l2cap_sig_extract_expired+0x32>
                next_exp_in = time_diff;
   24404:	4616      	mov	r6, r2
   24406:	e7f4      	b.n	243f2 <ble_l2cap_sig_extract_expired+0x32>
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   24408:	6040      	str	r0, [r0, #4]
   2440a:	e7ed      	b.n	243e8 <ble_l2cap_sig_extract_expired+0x28>
        }

        proc = next;
    }

    ble_hs_unlock();
   2440c:	f7fd fb7e 	bl	21b0c <ble_hs_unlock>

    return next_exp_in;
}
   24410:	4630      	mov	r0, r6
   24412:	bd70      	pop	{r4, r5, r6, pc}
   24414:	1000409c 	.word	0x1000409c

00024418 <ble_l2cap_sig_proc_free>:
    if (proc != NULL) {
   24418:	b128      	cbz	r0, 24426 <ble_l2cap_sig_proc_free+0xe>
{
   2441a:	b508      	push	{r3, lr}
   2441c:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_l2cap_sig_proc_pool, proc);
   2441e:	4802      	ldr	r0, [pc, #8]	; (24428 <ble_l2cap_sig_proc_free+0x10>)
   24420:	f7f1 fd2d 	bl	15e7e <os_memblock_put>
}
   24424:	bd08      	pop	{r3, pc}
   24426:	4770      	bx	lr
   24428:	10004080 	.word	0x10004080

0002442c <ble_l2cap_sig_process_status>:
{
   2442c:	b510      	push	{r4, lr}
   2442e:	4604      	mov	r4, r0
    if (status == 0) {
   24430:	b929      	cbnz	r1, 2443e <ble_l2cap_sig_process_status+0x12>
        ble_l2cap_sig_proc_set_timer(proc);
   24432:	f7ff ffbb 	bl	243ac <ble_l2cap_sig_proc_set_timer>
        ble_l2cap_sig_proc_insert(proc);
   24436:	4620      	mov	r0, r4
   24438:	f7ff ff62 	bl	24300 <ble_l2cap_sig_proc_insert>
}
   2443c:	bd10      	pop	{r4, pc}
        ble_l2cap_sig_proc_free(proc);
   2443e:	f7ff ffeb 	bl	24418 <ble_l2cap_sig_proc_free>
}
   24442:	e7fb      	b.n	2443c <ble_l2cap_sig_process_status+0x10>

00024444 <ble_l2cap_sig_rx_reject>:
{
   24444:	b508      	push	{r3, lr}
    proc = ble_l2cap_sig_proc_extract(conn_handle,
   24446:	784a      	ldrb	r2, [r1, #1]
   24448:	2101      	movs	r1, #1
   2444a:	f7ff ff6b 	bl	24324 <ble_l2cap_sig_proc_extract>
   if (!proc) {
   2444e:	b108      	cbz	r0, 24454 <ble_l2cap_sig_rx_reject+0x10>
   ble_l2cap_sig_proc_free(proc);
   24450:	f7ff ffe2 	bl	24418 <ble_l2cap_sig_proc_free>
}
   24454:	2000      	movs	r0, #0
   24456:	bd08      	pop	{r3, pc}

00024458 <ble_l2cap_sig_update_rsp_rx>:
{
   24458:	b570      	push	{r4, r5, r6, lr}
   2445a:	4614      	mov	r4, r2
    proc = ble_l2cap_sig_proc_extract(conn_handle,
   2445c:	784a      	ldrb	r2, [r1, #1]
   2445e:	2100      	movs	r1, #0
   24460:	f7ff ff60 	bl	24324 <ble_l2cap_sig_proc_extract>
    if (proc == NULL) {
   24464:	b1d8      	cbz	r0, 2449e <ble_l2cap_sig_update_rsp_rx+0x46>
   24466:	4606      	mov	r6, r0
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_UPDATE_RSP_SZ);
   24468:	2102      	movs	r1, #2
   2446a:	4620      	mov	r0, r4
   2446c:	f7ff fa4d 	bl	2390a <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   24470:	4605      	mov	r5, r0
   24472:	b938      	cbnz	r0, 24484 <ble_l2cap_sig_update_rsp_rx+0x2c>
    rsp = (struct ble_l2cap_sig_update_rsp *)(*om)->om_data;
   24474:	6823      	ldr	r3, [r4, #0]
   24476:	681b      	ldr	r3, [r3, #0]
    switch (le16toh(rsp->result)) {
   24478:	881b      	ldrh	r3, [r3, #0]
   2447a:	b163      	cbz	r3, 24496 <ble_l2cap_sig_update_rsp_rx+0x3e>
   2447c:	2b01      	cmp	r3, #1
   2447e:	d10c      	bne.n	2449a <ble_l2cap_sig_update_rsp_rx+0x42>
        cb_status = BLE_HS_EREJECT;
   24480:	2110      	movs	r1, #16
   24482:	e000      	b.n	24486 <ble_l2cap_sig_update_rsp_rx+0x2e>
        cb_status = rc;
   24484:	4601      	mov	r1, r0
    ble_l2cap_sig_update_call_cb(proc, cb_status);
   24486:	4630      	mov	r0, r6
   24488:	f7ff ff2a 	bl	242e0 <ble_l2cap_sig_update_call_cb>
    ble_l2cap_sig_proc_free(proc);
   2448c:	4630      	mov	r0, r6
   2448e:	f7ff ffc3 	bl	24418 <ble_l2cap_sig_proc_free>
}
   24492:	4628      	mov	r0, r5
   24494:	bd70      	pop	{r4, r5, r6, pc}
    switch (le16toh(rsp->result)) {
   24496:	4601      	mov	r1, r0
   24498:	e7f5      	b.n	24486 <ble_l2cap_sig_update_rsp_rx+0x2e>
        cb_status = BLE_HS_EBADDATA;
   2449a:	210a      	movs	r1, #10
   2449c:	e7f3      	b.n	24486 <ble_l2cap_sig_update_rsp_rx+0x2e>
        return 0;
   2449e:	2500      	movs	r5, #0
   244a0:	e7f7      	b.n	24492 <ble_l2cap_sig_update_rsp_rx+0x3a>
	...

000244a4 <ble_l2cap_sig_rx>:
{
   244a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   244a6:	b085      	sub	sp, #20
   244a8:	4604      	mov	r4, r0
    conn_handle = chan->conn_handle;
   244aa:	8887      	ldrh	r7, [r0, #4]
    om = &chan->rx_buf;
   244ac:	f100 0610 	add.w	r6, r0, #16
    STATS_INC(ble_l2cap_stats, sig_rx);
   244b0:	4a1c      	ldr	r2, [pc, #112]	; (24524 <ble_l2cap_sig_rx+0x80>)
   244b2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   244b4:	3301      	adds	r3, #1
   244b6:	6293      	str	r3, [r2, #40]	; 0x28
    ble_hs_log_mbuf(*om);
   244b8:	6900      	ldr	r0, [r0, #16]
   244ba:	f7ff f9d5 	bl	23868 <ble_hs_log_mbuf>
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_HDR_SZ);
   244be:	2104      	movs	r1, #4
   244c0:	4630      	mov	r0, r6
   244c2:	f7ff fa22 	bl	2390a <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   244c6:	4605      	mov	r5, r0
   244c8:	b110      	cbz	r0, 244d0 <ble_l2cap_sig_rx+0x2c>
}
   244ca:	4628      	mov	r0, r5
   244cc:	b005      	add	sp, #20
   244ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ble_l2cap_sig_hdr_parse((*om)->om_data, (*om)->om_len, &hdr);
   244d0:	6923      	ldr	r3, [r4, #16]
   244d2:	aa03      	add	r2, sp, #12
   244d4:	88d9      	ldrh	r1, [r3, #6]
   244d6:	6818      	ldr	r0, [r3, #0]
   244d8:	f000 f957 	bl	2478a <ble_l2cap_sig_hdr_parse>
    os_mbuf_adj(*om, BLE_L2CAP_SIG_HDR_SZ);
   244dc:	2104      	movs	r1, #4
   244de:	6920      	ldr	r0, [r4, #16]
   244e0:	f7f1 f99f 	bl	15822 <os_mbuf_adj>
    if (OS_MBUF_PKTLEN(*om) != hdr.length) {
   244e4:	6923      	ldr	r3, [r4, #16]
   244e6:	8a1a      	ldrh	r2, [r3, #16]
   244e8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   244ec:	429a      	cmp	r2, r3
   244ee:	d117      	bne.n	24520 <ble_l2cap_sig_rx+0x7c>
    rx_cb = ble_l2cap_sig_dispatch_get(hdr.op);
   244f0:	f89d 000c 	ldrb.w	r0, [sp, #12]
   244f4:	f7ff fed2 	bl	2429c <ble_l2cap_sig_dispatch_get>
    if (rx_cb == NULL) {
   244f8:	4603      	mov	r3, r0
   244fa:	b178      	cbz	r0, 2451c <ble_l2cap_sig_rx+0x78>
        rc = rx_cb(conn_handle, &hdr, om);
   244fc:	4632      	mov	r2, r6
   244fe:	a903      	add	r1, sp, #12
   24500:	4638      	mov	r0, r7
   24502:	4798      	blx	r3
    if (rc) {
   24504:	4605      	mov	r5, r0
   24506:	2800      	cmp	r0, #0
   24508:	d0df      	beq.n	244ca <ble_l2cap_sig_rx+0x26>
        ble_l2cap_sig_reject_tx(conn_handle, hdr.identifier,
   2450a:	2200      	movs	r2, #0
   2450c:	9200      	str	r2, [sp, #0]
   2450e:	4613      	mov	r3, r2
   24510:	f89d 100d 	ldrb.w	r1, [sp, #13]
   24514:	4638      	mov	r0, r7
   24516:	f000 f95f 	bl	247d8 <ble_l2cap_sig_reject_tx>
   2451a:	e7d6      	b.n	244ca <ble_l2cap_sig_rx+0x26>
        rc = BLE_HS_EREJECT;
   2451c:	2510      	movs	r5, #16
   2451e:	e7f4      	b.n	2450a <ble_l2cap_sig_rx+0x66>
        return BLE_HS_EBADDATA;
   24520:	250a      	movs	r5, #10
   24522:	e7d2      	b.n	244ca <ble_l2cap_sig_rx+0x26>
   24524:	10004034 	.word	0x10004034

00024528 <ble_l2cap_sig_update_req_rx>:
{
   24528:	b5f0      	push	{r4, r5, r6, r7, lr}
   2452a:	b087      	sub	sp, #28
   2452c:	4607      	mov	r7, r0
   2452e:	460e      	mov	r6, r1
   24530:	4614      	mov	r4, r2
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_UPDATE_REQ_SZ);
   24532:	2108      	movs	r1, #8
   24534:	4610      	mov	r0, r2
   24536:	f7ff f9e8 	bl	2390a <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   2453a:	4605      	mov	r5, r0
   2453c:	b110      	cbz	r0, 24544 <ble_l2cap_sig_update_req_rx+0x1c>
}
   2453e:	4628      	mov	r0, r5
   24540:	b007      	add	sp, #28
   24542:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = ble_hs_atomic_conn_flags(conn_handle, &conn_flags);
   24544:	f10d 0107 	add.w	r1, sp, #7
   24548:	4638      	mov	r0, r7
   2454a:	f7fe f846 	bl	225da <ble_hs_atomic_conn_flags>
    if (rc != 0) {
   2454e:	4605      	mov	r5, r0
   24550:	2800      	cmp	r0, #0
   24552:	d1f4      	bne.n	2453e <ble_l2cap_sig_update_req_rx+0x16>
    sig_err = !(conn_flags & BLE_HS_CONN_F_MASTER);
   24554:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (sig_err) {
   24558:	f013 0f01 	tst.w	r3, #1
   2455c:	d030      	beq.n	245c0 <ble_l2cap_sig_update_req_rx+0x98>
    req = (struct ble_l2cap_sig_update_req *)(*om)->om_data;
   2455e:	6823      	ldr	r3, [r4, #0]
   24560:	681b      	ldr	r3, [r3, #0]
    params.itvl_min = le16toh(req->itvl_min);
   24562:	881a      	ldrh	r2, [r3, #0]
   24564:	f8ad 2008 	strh.w	r2, [sp, #8]
    params.itvl_max = le16toh(req->itvl_max);
   24568:	885a      	ldrh	r2, [r3, #2]
   2456a:	f8ad 200a 	strh.w	r2, [sp, #10]
    params.latency = le16toh(req->slave_latency);
   2456e:	889a      	ldrh	r2, [r3, #4]
   24570:	f8ad 200c 	strh.w	r2, [sp, #12]
    params.supervision_timeout = le16toh(req->timeout_multiplier);
   24574:	88db      	ldrh	r3, [r3, #6]
   24576:	f8ad 300e 	strh.w	r3, [sp, #14]
    params.min_ce_len = BLE_GAP_INITIAL_CONN_MIN_CE_LEN;
   2457a:	2300      	movs	r3, #0
   2457c:	f8ad 3010 	strh.w	r3, [sp, #16]
    params.max_ce_len = BLE_GAP_INITIAL_CONN_MAX_CE_LEN;
   24580:	f8ad 3012 	strh.w	r3, [sp, #18]
    rc = ble_gap_rx_l2cap_update_req(conn_handle, &params);
   24584:	a902      	add	r1, sp, #8
   24586:	4638      	mov	r0, r7
   24588:	f7fa fb5d 	bl	1ec46 <ble_gap_rx_l2cap_update_req>
    if (rc == 0) {
   2458c:	4603      	mov	r3, r0
   2458e:	b178      	cbz	r0, 245b0 <ble_l2cap_sig_update_req_rx+0x88>
    if (rc == 0) {
   24590:	b9a3      	cbnz	r3, 245bc <ble_l2cap_sig_update_req_rx+0x94>
        l2cap_result = BLE_L2CAP_SIG_UPDATE_RSP_RESULT_ACCEPT;
   24592:	2400      	movs	r4, #0
    rsp = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_UPDATE_RSP, hdr->identifier,
   24594:	ab05      	add	r3, sp, #20
   24596:	2202      	movs	r2, #2
   24598:	7871      	ldrb	r1, [r6, #1]
   2459a:	2013      	movs	r0, #19
   2459c:	f000 f8fc 	bl	24798 <ble_l2cap_sig_cmd_get>
    if (!rsp) {
   245a0:	2800      	cmp	r0, #0
   245a2:	d0cc      	beq.n	2453e <ble_l2cap_sig_update_req_rx+0x16>
    rsp->result = htole16(l2cap_result);
   245a4:	8004      	strh	r4, [r0, #0]
    ble_l2cap_sig_tx(conn_handle, txom);
   245a6:	9905      	ldr	r1, [sp, #20]
   245a8:	4638      	mov	r0, r7
   245aa:	f000 f8d1 	bl	24750 <ble_l2cap_sig_tx>
    return 0;
   245ae:	e7c6      	b.n	2453e <ble_l2cap_sig_update_req_rx+0x16>
        rc = ble_gap_update_params(conn_handle, &params);
   245b0:	a902      	add	r1, sp, #8
   245b2:	4638      	mov	r0, r7
   245b4:	f7fa ff66 	bl	1f484 <ble_gap_update_params>
   245b8:	4603      	mov	r3, r0
   245ba:	e7e9      	b.n	24590 <ble_l2cap_sig_update_req_rx+0x68>
        l2cap_result = BLE_L2CAP_SIG_UPDATE_RSP_RESULT_REJECT;
   245bc:	2401      	movs	r4, #1
   245be:	e7e9      	b.n	24594 <ble_l2cap_sig_update_req_rx+0x6c>
        return BLE_HS_EREJECT;
   245c0:	2510      	movs	r5, #16
   245c2:	e7bc      	b.n	2453e <ble_l2cap_sig_update_req_rx+0x16>

000245c4 <ble_l2cap_sig_update>:
{
   245c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   245c8:	b085      	sub	sp, #20
   245ca:	4604      	mov	r4, r0
   245cc:	460e      	mov	r6, r1
   245ce:	4691      	mov	r9, r2
   245d0:	4698      	mov	r8, r3
    STATS_INC(ble_l2cap_stats, update_init);
   245d2:	4b29      	ldr	r3, [pc, #164]	; (24678 <ble_l2cap_sig_update+0xb4>)
   245d4:	6959      	ldr	r1, [r3, #20]
   245d6:	3101      	adds	r1, #1
   245d8:	6159      	str	r1, [r3, #20]
    ble_hs_lock();
   245da:	f7fd fa93 	bl	21b04 <ble_hs_lock>
    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SIG,
   245de:	ab02      	add	r3, sp, #8
   245e0:	aa01      	add	r2, sp, #4
   245e2:	2105      	movs	r1, #5
   245e4:	4620      	mov	r0, r4
   245e6:	f7ff f9d3 	bl	23990 <ble_hs_misc_conn_chan_find_reqd>
    if (rc != 0) {
   245ea:	bb50      	cbnz	r0, 24642 <ble_l2cap_sig_update+0x7e>
    master = conn->bhc_flags & BLE_HS_CONN_F_MASTER;
   245ec:	9b01      	ldr	r3, [sp, #4]
   245ee:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
    ble_hs_unlock();
   245f2:	f7fd fa8b 	bl	21b0c <ble_hs_unlock>
    if (master) {
   245f6:	f015 0f01 	tst.w	r5, #1
   245fa:	d13a      	bne.n	24672 <ble_l2cap_sig_update+0xae>
    proc = ble_l2cap_sig_proc_alloc();
   245fc:	f7ff fec6 	bl	2438c <ble_l2cap_sig_proc_alloc>
    if (proc == NULL) {
   24600:	4607      	mov	r7, r0
   24602:	b350      	cbz	r0, 2465a <ble_l2cap_sig_update+0x96>
    proc->op = BLE_L2CAP_SIG_PROC_OP_UPDATE;
   24604:	2300      	movs	r3, #0
   24606:	7283      	strb	r3, [r0, #10]
    proc->id = ble_l2cap_sig_next_id();
   24608:	f7ff fe3a 	bl	24280 <ble_l2cap_sig_next_id>
   2460c:	4601      	mov	r1, r0
   2460e:	72f8      	strb	r0, [r7, #11]
    proc->conn_handle = conn_handle;
   24610:	813c      	strh	r4, [r7, #8]
    proc->update.cb = cb;
   24612:	f8c7 900c 	str.w	r9, [r7, #12]
    proc->update.cb_arg = cb_arg;
   24616:	f8c7 8010 	str.w	r8, [r7, #16]
    req = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_UPDATE_REQ, proc->id,
   2461a:	ab03      	add	r3, sp, #12
   2461c:	2208      	movs	r2, #8
   2461e:	2012      	movs	r0, #18
   24620:	f000 f8ba 	bl	24798 <ble_l2cap_sig_cmd_get>
    if (!req) {
   24624:	b1f8      	cbz	r0, 24666 <ble_l2cap_sig_update+0xa2>
    req->itvl_min = htole16(params->itvl_min);
   24626:	8832      	ldrh	r2, [r6, #0]
   24628:	8002      	strh	r2, [r0, #0]
    req->itvl_max = htole16(params->itvl_max);
   2462a:	8872      	ldrh	r2, [r6, #2]
   2462c:	8042      	strh	r2, [r0, #2]
    req->slave_latency = htole16(params->slave_latency);
   2462e:	88b2      	ldrh	r2, [r6, #4]
   24630:	8082      	strh	r2, [r0, #4]
    req->timeout_multiplier = htole16(params->timeout_multiplier);
   24632:	88f2      	ldrh	r2, [r6, #6]
   24634:	80c2      	strh	r2, [r0, #6]
    rc = ble_l2cap_sig_tx(conn_handle, txom);
   24636:	9903      	ldr	r1, [sp, #12]
   24638:	4620      	mov	r0, r4
   2463a:	f000 f889 	bl	24750 <ble_l2cap_sig_tx>
   2463e:	4605      	mov	r5, r0
   24640:	e003      	b.n	2464a <ble_l2cap_sig_update+0x86>
   24642:	4605      	mov	r5, r0
        ble_hs_unlock();
   24644:	f7fd fa62 	bl	21b0c <ble_hs_unlock>
    proc = NULL;
   24648:	2700      	movs	r7, #0
    ble_l2cap_sig_process_status(proc, rc);
   2464a:	4629      	mov	r1, r5
   2464c:	4638      	mov	r0, r7
   2464e:	f7ff feed 	bl	2442c <ble_l2cap_sig_process_status>
}
   24652:	4628      	mov	r0, r5
   24654:	b005      	add	sp, #20
   24656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        STATS_INC(ble_l2cap_stats, update_fail);
   2465a:	4a07      	ldr	r2, [pc, #28]	; (24678 <ble_l2cap_sig_update+0xb4>)
   2465c:	69d3      	ldr	r3, [r2, #28]
   2465e:	3301      	adds	r3, #1
   24660:	61d3      	str	r3, [r2, #28]
        rc = BLE_HS_ENOMEM;
   24662:	2506      	movs	r5, #6
        goto done;
   24664:	e7f1      	b.n	2464a <ble_l2cap_sig_update+0x86>
        STATS_INC(ble_l2cap_stats, update_fail);
   24666:	4a04      	ldr	r2, [pc, #16]	; (24678 <ble_l2cap_sig_update+0xb4>)
   24668:	69d3      	ldr	r3, [r2, #28]
   2466a:	3301      	adds	r3, #1
   2466c:	61d3      	str	r3, [r2, #28]
        rc = BLE_HS_ENOMEM;
   2466e:	2506      	movs	r5, #6
        goto done;
   24670:	e7eb      	b.n	2464a <ble_l2cap_sig_update+0x86>
        rc = BLE_HS_EINVAL;
   24672:	2503      	movs	r5, #3
    proc = NULL;
   24674:	2700      	movs	r7, #0
   24676:	e7e8      	b.n	2464a <ble_l2cap_sig_update+0x86>
   24678:	10004034 	.word	0x10004034

0002467c <ble_l2cap_sig_create_chan>:
{
   2467c:	b508      	push	{r3, lr}
    chan = ble_l2cap_chan_alloc(conn_handle);
   2467e:	f7ff fcb5 	bl	23fec <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   24682:	4603      	mov	r3, r0
   24684:	b130      	cbz	r0, 24694 <ble_l2cap_sig_create_chan+0x18>
    chan->scid = BLE_L2CAP_CID_SIG;
   24686:	2205      	movs	r2, #5
   24688:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_SIG;
   2468a:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = BLE_L2CAP_SIG_MTU;
   2468c:	2264      	movs	r2, #100	; 0x64
   2468e:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_l2cap_sig_rx;
   24690:	4a01      	ldr	r2, [pc, #4]	; (24698 <ble_l2cap_sig_create_chan+0x1c>)
   24692:	6182      	str	r2, [r0, #24]
}
   24694:	4618      	mov	r0, r3
   24696:	bd08      	pop	{r3, pc}
   24698:	000244a5 	.word	0x000244a5

0002469c <ble_l2cap_sig_conn_broken>:

void
ble_l2cap_sig_conn_broken(uint16_t conn_handle, int reason)
{
   2469c:	b538      	push	{r3, r4, r5, lr}
   2469e:	460d      	mov	r5, r1
    struct ble_l2cap_sig_proc *proc;

    /* Report a failure for each timed out procedure. */
    while ((proc = STAILQ_FIRST(&ble_l2cap_sig_procs)) != NULL) {
   246a0:	e00b      	b.n	246ba <ble_l2cap_sig_conn_broken+0x1e>
        switch(proc->op) {
            case BLE_L2CAP_SIG_PROC_OP_UPDATE:
                ble_l2cap_sig_update_call_cb(proc, reason);
   246a2:	4629      	mov	r1, r5
   246a4:	4620      	mov	r0, r4
   246a6:	f7ff fe1b 	bl	242e0 <ble_l2cap_sig_update_call_cb>
            break;
#endif
#endif
            }

            STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   246aa:	4a09      	ldr	r2, [pc, #36]	; (246d0 <ble_l2cap_sig_conn_broken+0x34>)
   246ac:	6813      	ldr	r3, [r2, #0]
   246ae:	681b      	ldr	r3, [r3, #0]
   246b0:	6013      	str	r3, [r2, #0]
   246b2:	b14b      	cbz	r3, 246c8 <ble_l2cap_sig_conn_broken+0x2c>
            ble_l2cap_sig_proc_free(proc);
   246b4:	4620      	mov	r0, r4
   246b6:	f7ff feaf 	bl	24418 <ble_l2cap_sig_proc_free>
    while ((proc = STAILQ_FIRST(&ble_l2cap_sig_procs)) != NULL) {
   246ba:	4b05      	ldr	r3, [pc, #20]	; (246d0 <ble_l2cap_sig_conn_broken+0x34>)
   246bc:	681c      	ldr	r4, [r3, #0]
   246be:	b12c      	cbz	r4, 246cc <ble_l2cap_sig_conn_broken+0x30>
        switch(proc->op) {
   246c0:	7aa3      	ldrb	r3, [r4, #10]
   246c2:	2b00      	cmp	r3, #0
   246c4:	d1f1      	bne.n	246aa <ble_l2cap_sig_conn_broken+0xe>
   246c6:	e7ec      	b.n	246a2 <ble_l2cap_sig_conn_broken+0x6>
            STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   246c8:	6052      	str	r2, [r2, #4]
   246ca:	e7f3      	b.n	246b4 <ble_l2cap_sig_conn_broken+0x18>
    }

}
   246cc:	bd38      	pop	{r3, r4, r5, pc}
   246ce:	bf00      	nop
   246d0:	1000409c 	.word	0x1000409c

000246d4 <ble_l2cap_sig_timer>:
 * @return                      The number of ticks until this function should
 *                                  be called again.
 */
int32_t
ble_l2cap_sig_timer(void)
{
   246d4:	b530      	push	{r4, r5, lr}
   246d6:	b083      	sub	sp, #12

    /* Remove timed-out procedures from the main list and insert them into a
     * temporary list.  This function also calculates the number of ticks until
     * the next expiration will occur.
     */
    ticks_until_exp = ble_l2cap_sig_extract_expired(&temp_list);
   246d8:	4668      	mov	r0, sp
   246da:	f7ff fe71 	bl	243c0 <ble_l2cap_sig_extract_expired>
   246de:	4605      	mov	r5, r0

    /* Report a failure for each timed out procedure. */
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   246e0:	e00a      	b.n	246f8 <ble_l2cap_sig_timer+0x24>
        STATS_INC(ble_l2cap_stats, proc_timeout);
        switch(proc->op) {
            case BLE_L2CAP_SIG_PROC_OP_UPDATE:
                ble_l2cap_sig_update_call_cb(proc, BLE_HS_ETIMEOUT);
   246e2:	210d      	movs	r1, #13
   246e4:	4620      	mov	r0, r4
   246e6:	f7ff fdfb 	bl	242e0 <ble_l2cap_sig_update_call_cb>
                ble_l2cap_sig_coc_disconnect_cb(proc, BLE_HS_ETIMEOUT);
            break;
#endif
        }

        STAILQ_REMOVE_HEAD(&temp_list, next);
   246ea:	9b00      	ldr	r3, [sp, #0]
   246ec:	681b      	ldr	r3, [r3, #0]
   246ee:	9300      	str	r3, [sp, #0]
   246f0:	b163      	cbz	r3, 2470c <ble_l2cap_sig_timer+0x38>
        ble_l2cap_sig_proc_free(proc);
   246f2:	4620      	mov	r0, r4
   246f4:	f7ff fe90 	bl	24418 <ble_l2cap_sig_proc_free>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   246f8:	9c00      	ldr	r4, [sp, #0]
   246fa:	b154      	cbz	r4, 24712 <ble_l2cap_sig_timer+0x3e>
        STATS_INC(ble_l2cap_stats, proc_timeout);
   246fc:	4a06      	ldr	r2, [pc, #24]	; (24718 <ble_l2cap_sig_timer+0x44>)
   246fe:	6a13      	ldr	r3, [r2, #32]
   24700:	3301      	adds	r3, #1
   24702:	6213      	str	r3, [r2, #32]
        switch(proc->op) {
   24704:	7aa3      	ldrb	r3, [r4, #10]
   24706:	2b00      	cmp	r3, #0
   24708:	d1ef      	bne.n	246ea <ble_l2cap_sig_timer+0x16>
   2470a:	e7ea      	b.n	246e2 <ble_l2cap_sig_timer+0xe>
        STAILQ_REMOVE_HEAD(&temp_list, next);
   2470c:	f8cd d004 	str.w	sp, [sp, #4]
   24710:	e7ef      	b.n	246f2 <ble_l2cap_sig_timer+0x1e>
    }

    return ticks_until_exp;
}
   24712:	4628      	mov	r0, r5
   24714:	b003      	add	sp, #12
   24716:	bd30      	pop	{r4, r5, pc}
   24718:	10004034 	.word	0x10004034

0002471c <ble_l2cap_sig_init>:

int
ble_l2cap_sig_init(void)
{
   2471c:	b500      	push	{lr}
   2471e:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_l2cap_sig_procs);
   24720:	4b07      	ldr	r3, [pc, #28]	; (24740 <ble_l2cap_sig_init+0x24>)
   24722:	2200      	movs	r2, #0
   24724:	601a      	str	r2, [r3, #0]
   24726:	605b      	str	r3, [r3, #4]

    rc = os_mempool_init(&ble_l2cap_sig_proc_pool,
   24728:	4b06      	ldr	r3, [pc, #24]	; (24744 <ble_l2cap_sig_init+0x28>)
   2472a:	9300      	str	r3, [sp, #0]
   2472c:	4b06      	ldr	r3, [pc, #24]	; (24748 <ble_l2cap_sig_init+0x2c>)
   2472e:	2214      	movs	r2, #20
   24730:	2101      	movs	r1, #1
   24732:	4806      	ldr	r0, [pc, #24]	; (2474c <ble_l2cap_sig_init+0x30>)
   24734:	f7f1 fb44 	bl	15dc0 <os_mempool_init>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   24738:	b003      	add	sp, #12
   2473a:	f85d fb04 	ldr.w	pc, [sp], #4
   2473e:	bf00      	nop
   24740:	1000409c 	.word	0x1000409c
   24744:	0003126c 	.word	0x0003126c
   24748:	1000406c 	.word	0x1000406c
   2474c:	10004080 	.word	0x10004080

00024750 <ble_l2cap_sig_tx>:

#if NIMBLE_BLE_CONNECT
/* this function consumes tx os_mbuf */
int
ble_l2cap_sig_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   24750:	b530      	push	{r4, r5, lr}
   24752:	b083      	sub	sp, #12
   24754:	4605      	mov	r5, r0
   24756:	460c      	mov	r4, r1
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;
    int rc;

    ble_hs_lock();
   24758:	f7fd f9d4 	bl	21b04 <ble_hs_lock>
    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SIG,
   2475c:	ab01      	add	r3, sp, #4
   2475e:	466a      	mov	r2, sp
   24760:	2105      	movs	r1, #5
   24762:	4628      	mov	r0, r5
   24764:	f7ff f914 	bl	23990 <ble_hs_misc_conn_chan_find_reqd>
                                         &conn, &chan);
    if (rc == 0) {
   24768:	b950      	cbnz	r0, 24780 <ble_l2cap_sig_tx+0x30>
        rc = ble_l2cap_tx(conn, chan, txom);
   2476a:	4622      	mov	r2, r4
   2476c:	9901      	ldr	r1, [sp, #4]
   2476e:	9800      	ldr	r0, [sp, #0]
   24770:	f7ff fd36 	bl	241e0 <ble_l2cap_tx>
   24774:	4605      	mov	r5, r0
    } else {
        os_mbuf_free_chain(txom);
    }
    ble_hs_unlock();
   24776:	f7fd f9c9 	bl	21b0c <ble_hs_unlock>

    return rc;
}
   2477a:	4628      	mov	r0, r5
   2477c:	b003      	add	sp, #12
   2477e:	bd30      	pop	{r4, r5, pc}
   24780:	4605      	mov	r5, r0
        os_mbuf_free_chain(txom);
   24782:	4620      	mov	r0, r4
   24784:	f7f0 ff76 	bl	15674 <os_mbuf_free_chain>
   24788:	e7f5      	b.n	24776 <ble_l2cap_sig_tx+0x26>

0002478a <ble_l2cap_sig_hdr_parse>:
{
    struct ble_l2cap_sig_hdr *src = payload;

    BLE_HS_DBG_ASSERT(len >= BLE_L2CAP_SIG_HDR_SZ);

    dst->op = src->op;
   2478a:	7803      	ldrb	r3, [r0, #0]
   2478c:	7013      	strb	r3, [r2, #0]
    dst->identifier = src->identifier;
   2478e:	7843      	ldrb	r3, [r0, #1]
   24790:	7053      	strb	r3, [r2, #1]
    dst->length = le16toh(src->length);
   24792:	8843      	ldrh	r3, [r0, #2]
   24794:	8053      	strh	r3, [r2, #2]
}
   24796:	4770      	bx	lr

00024798 <ble_l2cap_sig_cmd_get>:
}

void *
ble_l2cap_sig_cmd_get(uint8_t opcode, uint8_t id, uint16_t len,
                      struct os_mbuf **txom)
{
   24798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2479c:	4680      	mov	r8, r0
   2479e:	460f      	mov	r7, r1
   247a0:	4616      	mov	r6, r2
   247a2:	461d      	mov	r5, r3
    struct ble_l2cap_sig_hdr *hdr;

    *txom = ble_hs_mbuf_l2cap_pkt();
   247a4:	f7ff f892 	bl	238cc <ble_hs_mbuf_l2cap_pkt>
   247a8:	4604      	mov	r4, r0
   247aa:	6028      	str	r0, [r5, #0]
    if (*txom == NULL) {
   247ac:	b160      	cbz	r0, 247c8 <ble_l2cap_sig_cmd_get+0x30>
        return NULL;
    }

    if (os_mbuf_extend(*txom, sizeof(*hdr) + len) == NULL) {
   247ae:	1d31      	adds	r1, r6, #4
   247b0:	b289      	uxth	r1, r1
   247b2:	f7f1 f98c 	bl	15ace <os_mbuf_extend>
   247b6:	4604      	mov	r4, r0
   247b8:	b148      	cbz	r0, 247ce <ble_l2cap_sig_cmd_get+0x36>
        os_mbuf_free_chain(*txom);
        return NULL;
    }

    hdr = (struct ble_l2cap_sig_hdr *)(*txom)->om_data;
   247ba:	682b      	ldr	r3, [r5, #0]
   247bc:	681c      	ldr	r4, [r3, #0]

    hdr->op = opcode;
   247be:	f884 8000 	strb.w	r8, [r4]
    hdr->identifier = id;
   247c2:	7067      	strb	r7, [r4, #1]
    hdr->length = htole16(len);
   247c4:	8066      	strh	r6, [r4, #2]

    return hdr->data;
   247c6:	3404      	adds	r4, #4
}
   247c8:	4620      	mov	r0, r4
   247ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        os_mbuf_free_chain(*txom);
   247ce:	6828      	ldr	r0, [r5, #0]
   247d0:	f7f0 ff50 	bl	15674 <os_mbuf_free_chain>
        return NULL;
   247d4:	e7f8      	b.n	247c8 <ble_l2cap_sig_cmd_get+0x30>
	...

000247d8 <ble_l2cap_sig_reject_tx>:
{
   247d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   247da:	b083      	sub	sp, #12
   247dc:	4604      	mov	r4, r0
   247de:	4616      	mov	r6, r2
   247e0:	461d      	mov	r5, r3
   247e2:	9f08      	ldr	r7, [sp, #32]
    cmd = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_REJECT, id,
   247e4:	1cba      	adds	r2, r7, #2
   247e6:	ab01      	add	r3, sp, #4
   247e8:	b292      	uxth	r2, r2
   247ea:	2001      	movs	r0, #1
   247ec:	f7ff ffd4 	bl	24798 <ble_l2cap_sig_cmd_get>
    if (!cmd) {
   247f0:	b178      	cbz	r0, 24812 <ble_l2cap_sig_reject_tx+0x3a>
    cmd->reason = htole16(reason);
   247f2:	f820 6b02 	strh.w	r6, [r0], #2
    memcpy(cmd->data, data, data_len);
   247f6:	463a      	mov	r2, r7
   247f8:	4629      	mov	r1, r5
   247fa:	f7f2 f96b 	bl	16ad4 <memcpy>
    STATS_INC(ble_l2cap_stats, sig_rx);
   247fe:	4a06      	ldr	r2, [pc, #24]	; (24818 <ble_l2cap_sig_reject_tx+0x40>)
   24800:	6a93      	ldr	r3, [r2, #40]	; 0x28
   24802:	3301      	adds	r3, #1
   24804:	6293      	str	r3, [r2, #40]	; 0x28
    return ble_l2cap_sig_tx(conn_handle, txom);
   24806:	9901      	ldr	r1, [sp, #4]
   24808:	4620      	mov	r0, r4
   2480a:	f7ff ffa1 	bl	24750 <ble_l2cap_sig_tx>
}
   2480e:	b003      	add	sp, #12
   24810:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   24812:	2006      	movs	r0, #6
   24814:	e7fb      	b.n	2480e <ble_l2cap_sig_reject_tx+0x36>
   24816:	bf00      	nop
   24818:	10004034 	.word	0x10004034

0002481c <ble_l2cap_sig_reject_invalid_cid_tx>:
{
   2481c:	b500      	push	{lr}
   2481e:	b085      	sub	sp, #20
    } data = {
   24820:	f8ad 300c 	strh.w	r3, [sp, #12]
   24824:	f8ad 200e 	strh.w	r2, [sp, #14]
    return ble_l2cap_sig_reject_tx(conn_handle, id,
   24828:	2304      	movs	r3, #4
   2482a:	9300      	str	r3, [sp, #0]
   2482c:	ab03      	add	r3, sp, #12
   2482e:	2202      	movs	r2, #2
   24830:	f7ff ffd2 	bl	247d8 <ble_l2cap_sig_reject_tx>
}
   24834:	b005      	add	sp, #20
   24836:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0002483c <ble_sm_dispatch_get>:
}

static ble_sm_rx_fn *
ble_sm_dispatch_get(uint8_t op)
{
    if (op >= sizeof ble_sm_dispatch / sizeof ble_sm_dispatch[0]) {
   2483c:	280e      	cmp	r0, #14
   2483e:	d803      	bhi.n	24848 <ble_sm_dispatch_get+0xc>
        return NULL;
    }

    return ble_sm_dispatch[op];
   24840:	4b02      	ldr	r3, [pc, #8]	; (2484c <ble_sm_dispatch_get+0x10>)
   24842:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   24846:	4770      	bx	lr
        return NULL;
   24848:	2000      	movs	r0, #0
}
   2484a:	4770      	bx	lr
   2484c:	0003132c 	.word	0x0003132c

00024850 <ble_sm_proc_remove>:

static void
ble_sm_proc_remove(struct ble_sm_proc *proc,
                         struct ble_sm_proc *prev)
{
    if (prev == NULL) {
   24850:	b121      	cbz	r1, 2485c <ble_sm_proc_remove+0xc>
        BLE_HS_DBG_ASSERT(STAILQ_FIRST(&ble_sm_procs) == proc);
        STAILQ_REMOVE_HEAD(&ble_sm_procs, next);
    } else {
        BLE_HS_DBG_ASSERT(STAILQ_NEXT(prev, next) == proc);
        STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   24852:	680a      	ldr	r2, [r1, #0]
   24854:	6812      	ldr	r2, [r2, #0]
   24856:	600a      	str	r2, [r1, #0]
   24858:	b142      	cbz	r2, 2486c <ble_sm_proc_remove+0x1c>
    }

    ble_sm_dbg_assert_no_cycles();
}
   2485a:	4770      	bx	lr
        STAILQ_REMOVE_HEAD(&ble_sm_procs, next);
   2485c:	4a05      	ldr	r2, [pc, #20]	; (24874 <ble_sm_proc_remove+0x24>)
   2485e:	6813      	ldr	r3, [r2, #0]
   24860:	681b      	ldr	r3, [r3, #0]
   24862:	6013      	str	r3, [r2, #0]
   24864:	2b00      	cmp	r3, #0
   24866:	d1f8      	bne.n	2485a <ble_sm_proc_remove+0xa>
   24868:	6052      	str	r2, [r2, #4]
   2486a:	4770      	bx	lr
        STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   2486c:	4a01      	ldr	r2, [pc, #4]	; (24874 <ble_sm_proc_remove+0x24>)
   2486e:	6051      	str	r1, [r2, #4]
}
   24870:	e7f3      	b.n	2485a <ble_sm_proc_remove+0xa>
   24872:	bf00      	nop
   24874:	100041c0 	.word	0x100041c0

00024878 <ble_sm_proc_matches>:
}

static int
ble_sm_proc_matches(struct ble_sm_proc *proc, uint16_t conn_handle,
                    uint8_t state, int is_initiator)
{
   24878:	b410      	push	{r4}
    int proc_is_initiator;

    if (conn_handle != proc->conn_handle) {
   2487a:	8944      	ldrh	r4, [r0, #10]
   2487c:	428c      	cmp	r4, r1
   2487e:	d10e      	bne.n	2489e <ble_sm_proc_matches+0x26>
        return 0;
    }

    if (state != BLE_SM_PROC_STATE_NONE && state != proc->state) {
   24880:	2aff      	cmp	r2, #255	; 0xff
   24882:	d002      	beq.n	2488a <ble_sm_proc_matches+0x12>
   24884:	7b41      	ldrb	r1, [r0, #13]
   24886:	4291      	cmp	r1, r2
   24888:	d10c      	bne.n	248a4 <ble_sm_proc_matches+0x2c>
        return 0;
    }

    proc_is_initiator = !!(proc->flags & BLE_SM_PROC_F_INITIATOR);
   2488a:	7a02      	ldrb	r2, [r0, #8]
   2488c:	f002 0201 	and.w	r2, r2, #1
    if (is_initiator != -1 && is_initiator != proc_is_initiator) {
   24890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   24894:	d008      	beq.n	248a8 <ble_sm_proc_matches+0x30>
   24896:	429a      	cmp	r2, r3
   24898:	d108      	bne.n	248ac <ble_sm_proc_matches+0x34>
        return 0;
    }

    return 1;
   2489a:	2001      	movs	r0, #1
   2489c:	e000      	b.n	248a0 <ble_sm_proc_matches+0x28>
        return 0;
   2489e:	2000      	movs	r0, #0
}
   248a0:	bc10      	pop	{r4}
   248a2:	4770      	bx	lr
        return 0;
   248a4:	2000      	movs	r0, #0
   248a6:	e7fb      	b.n	248a0 <ble_sm_proc_matches+0x28>
    return 1;
   248a8:	2001      	movs	r0, #1
   248aa:	e7f9      	b.n	248a0 <ble_sm_proc_matches+0x28>
        return 0;
   248ac:	2000      	movs	r0, #0
   248ae:	e7f7      	b.n	248a0 <ble_sm_proc_matches+0x28>

000248b0 <ble_sm_insert>:
    STAILQ_FOREACH(cur, &ble_sm_procs, next) {
        BLE_HS_DBG_ASSERT(cur != proc);
    }
#endif

    STAILQ_INSERT_HEAD(&ble_sm_procs, proc, next);
   248b0:	4b04      	ldr	r3, [pc, #16]	; (248c4 <ble_sm_insert+0x14>)
   248b2:	681b      	ldr	r3, [r3, #0]
   248b4:	6003      	str	r3, [r0, #0]
   248b6:	b113      	cbz	r3, 248be <ble_sm_insert+0xe>
   248b8:	4b02      	ldr	r3, [pc, #8]	; (248c4 <ble_sm_insert+0x14>)
   248ba:	6018      	str	r0, [r3, #0]
}
   248bc:	4770      	bx	lr
    STAILQ_INSERT_HEAD(&ble_sm_procs, proc, next);
   248be:	4b01      	ldr	r3, [pc, #4]	; (248c4 <ble_sm_insert+0x14>)
   248c0:	6058      	str	r0, [r3, #4]
   248c2:	e7f9      	b.n	248b8 <ble_sm_insert+0x8>
   248c4:	100041c0 	.word	0x100041c0

000248c8 <ble_sm_rx_noop>:

static void
ble_sm_rx_noop(uint16_t conn_handle, struct os_mbuf **om,
               struct ble_sm_result *res)
{
    res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CMD_NOT_SUPP);
   248c8:	f240 4307 	movw	r3, #1031	; 0x407
   248cc:	6013      	str	r3, [r2, #0]
    res->sm_err = BLE_SM_ERR_CMD_NOT_SUPP;
   248ce:	2307      	movs	r3, #7
   248d0:	7113      	strb	r3, [r2, #4]
}
   248d2:	4770      	bx	lr

000248d4 <ble_sm_build_authreq>:

static uint8_t
ble_sm_build_authreq(void)
{
    return ble_hs_cfg.sm_bonding << 0  |
   248d4:	4b08      	ldr	r3, [pc, #32]	; (248f8 <ble_sm_build_authreq+0x24>)
   248d6:	7a5b      	ldrb	r3, [r3, #9]
   248d8:	f3c3 0040 	ubfx	r0, r3, #1, #1
           ble_hs_cfg.sm_mitm << 2     |
   248dc:	f3c3 0280 	ubfx	r2, r3, #2, #1
    return ble_hs_cfg.sm_bonding << 0  |
   248e0:	ea40 0082 	orr.w	r0, r0, r2, lsl #2
           ble_hs_cfg.sm_sc << 3       |
   248e4:	f3c3 02c0 	ubfx	r2, r3, #3, #1
           ble_hs_cfg.sm_mitm << 2     |
   248e8:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
           ble_hs_cfg.sm_keypress << 4;
   248ec:	f3c3 1300 	ubfx	r3, r3, #4, #1
}
   248f0:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
   248f4:	4770      	bx	lr
   248f6:	bf00      	nop
   248f8:	100002bc 	.word	0x100002bc

000248fc <ble_sm_key_dist>:
{
    struct ble_sm_pair_cmd *pair_rsp;

    pair_rsp = (struct ble_sm_pair_cmd *) &proc->pair_rsp[1];

    *out_init_key_dist = pair_rsp->init_key_dist;
   248fc:	7f03      	ldrb	r3, [r0, #28]
   248fe:	700b      	strb	r3, [r1, #0]
    *out_resp_key_dist = pair_rsp->resp_key_dist;
   24900:	7f43      	ldrb	r3, [r0, #29]
   24902:	7013      	strb	r3, [r2, #0]

    /* Encryption info and master ID are only sent in legacy pairing. */
    if (proc->flags & BLE_SM_PROC_F_SC) {
   24904:	7a03      	ldrb	r3, [r0, #8]
   24906:	f013 0f10 	tst.w	r3, #16
   2490a:	d007      	beq.n	2491c <ble_sm_key_dist+0x20>
        *out_init_key_dist &= ~BLE_SM_PAIR_KEY_DIST_ENC;
   2490c:	780b      	ldrb	r3, [r1, #0]
   2490e:	f023 0301 	bic.w	r3, r3, #1
   24912:	700b      	strb	r3, [r1, #0]
        *out_resp_key_dist &= ~BLE_SM_PAIR_KEY_DIST_ENC;
   24914:	7813      	ldrb	r3, [r2, #0]
   24916:	f023 0301 	bic.w	r3, r3, #1
   2491a:	7013      	strb	r3, [r2, #0]
    }
}
   2491c:	4770      	bx	lr

0002491e <ble_sm_chk_store_overflow_by_type>:
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   2491e:	2000      	movs	r0, #0
   24920:	4770      	bx	lr

00024922 <ble_sm_chk_store_overflow>:

static int
ble_sm_chk_store_overflow(uint16_t conn_handle)
{
   24922:	b510      	push	{r4, lr}
   24924:	4604      	mov	r4, r0
    int rc;

    rc = ble_sm_chk_store_overflow_by_type(BLE_STORE_OBJ_TYPE_PEER_SEC,
   24926:	4601      	mov	r1, r0
   24928:	2002      	movs	r0, #2
   2492a:	f7ff fff8 	bl	2491e <ble_sm_chk_store_overflow_by_type>
                                           conn_handle);
    if (rc != 0) {
   2492e:	b918      	cbnz	r0, 24938 <ble_sm_chk_store_overflow+0x16>
        return rc;
    }

    rc = ble_sm_chk_store_overflow_by_type(BLE_STORE_OBJ_TYPE_OUR_SEC,
   24930:	4621      	mov	r1, r4
   24932:	2001      	movs	r0, #1
   24934:	f7ff fff3 	bl	2491e <ble_sm_chk_store_overflow_by_type>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   24938:	bd10      	pop	{r4, pc}

0002493a <ble_sm_state_after_pair>:
 *****************************************************************************/

static uint8_t
ble_sm_state_after_pair(struct ble_sm_proc *proc)
{
    if (proc->flags & BLE_SM_PROC_F_SC) {
   2493a:	7a03      	ldrb	r3, [r0, #8]
   2493c:	f013 0f10 	tst.w	r3, #16
   24940:	d101      	bne.n	24946 <ble_sm_state_after_pair+0xc>
        return BLE_SM_PROC_STATE_PUBLIC_KEY;
    } else {
        return BLE_SM_PROC_STATE_CONFIRM;
   24942:	2001      	movs	r0, #1
    }
}
   24944:	4770      	bx	lr
        return BLE_SM_PROC_STATE_PUBLIC_KEY;
   24946:	2009      	movs	r0, #9
   24948:	4770      	bx	lr
	...

0002494c <ble_sm_pair_base_fill>:
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);
}

static void
ble_sm_pair_base_fill(struct ble_sm_pair_cmd *cmd)
{
   2494c:	b510      	push	{r4, lr}
   2494e:	4604      	mov	r4, r0
    cmd->io_cap = ble_hs_cfg.sm_io_cap;
   24950:	4b06      	ldr	r3, [pc, #24]	; (2496c <ble_sm_pair_base_fill+0x20>)
   24952:	7a1a      	ldrb	r2, [r3, #8]
   24954:	7002      	strb	r2, [r0, #0]
    cmd->oob_data_flag = ble_hs_cfg.sm_oob_data_flag;
   24956:	7a5b      	ldrb	r3, [r3, #9]
   24958:	f3c3 0300 	ubfx	r3, r3, #0, #1
   2495c:	7043      	strb	r3, [r0, #1]
    cmd->authreq = ble_sm_build_authreq();
   2495e:	f7ff ffb9 	bl	248d4 <ble_sm_build_authreq>
   24962:	70a0      	strb	r0, [r4, #2]
    cmd->max_enc_key_size = BLE_SM_PAIR_KEY_SZ_MAX;
   24964:	2310      	movs	r3, #16
   24966:	70e3      	strb	r3, [r4, #3]
}
   24968:	bd10      	pop	{r4, pc}
   2496a:	bf00      	nop
   2496c:	100002bc 	.word	0x100002bc

00024970 <ble_sm_pair_req_fill>:

static void
ble_sm_pair_req_fill(struct ble_sm_proc *proc)
{
   24970:	b510      	push	{r4, lr}
   24972:	4604      	mov	r4, r0
    struct ble_sm_pair_cmd *req;

    req = (void *)(proc->pair_req + 1);

    proc->pair_req[0] = BLE_SM_OP_PAIR_REQ;
   24974:	2301      	movs	r3, #1
   24976:	7403      	strb	r3, [r0, #16]
    ble_sm_pair_base_fill(req);
   24978:	3011      	adds	r0, #17
   2497a:	f7ff ffe7 	bl	2494c <ble_sm_pair_base_fill>
    req->init_key_dist = ble_hs_cfg.sm_our_key_dist;
   2497e:	4b03      	ldr	r3, [pc, #12]	; (2498c <ble_sm_pair_req_fill+0x1c>)
   24980:	7a9a      	ldrb	r2, [r3, #10]
   24982:	7562      	strb	r2, [r4, #21]
    req->resp_key_dist = ble_hs_cfg.sm_their_key_dist;
   24984:	7adb      	ldrb	r3, [r3, #11]
   24986:	75a3      	strb	r3, [r4, #22]
}
   24988:	bd10      	pop	{r4, pc}
   2498a:	bf00      	nop
   2498c:	100002bc 	.word	0x100002bc

00024990 <ble_sm_pair_rsp_fill>:

static void
ble_sm_pair_rsp_fill(struct ble_sm_proc *proc)
{
   24990:	b510      	push	{r4, lr}
   24992:	4604      	mov	r4, r0
    struct ble_sm_pair_cmd *rsp;

    req = (void *)(proc->pair_req + 1);
    rsp = (void *)(proc->pair_rsp + 1);

    proc->pair_rsp[0] = BLE_SM_OP_PAIR_RSP;
   24994:	2302      	movs	r3, #2
   24996:	75c3      	strb	r3, [r0, #23]
    ble_sm_pair_base_fill(rsp);
   24998:	3018      	adds	r0, #24
   2499a:	f7ff ffd7 	bl	2494c <ble_sm_pair_base_fill>

    /* The response's key distribution flags field is the intersection of
     * the peer's preferences and our capabilities.
     */
    rsp->init_key_dist = req->init_key_dist &
   2499e:	7d63      	ldrb	r3, [r4, #21]
                         ble_hs_cfg.sm_their_key_dist;
   249a0:	4a04      	ldr	r2, [pc, #16]	; (249b4 <ble_sm_pair_rsp_fill+0x24>)
   249a2:	7ad1      	ldrb	r1, [r2, #11]
    rsp->init_key_dist = req->init_key_dist &
   249a4:	400b      	ands	r3, r1
   249a6:	7723      	strb	r3, [r4, #28]
    rsp->resp_key_dist = req->resp_key_dist &
   249a8:	7da3      	ldrb	r3, [r4, #22]
                         ble_hs_cfg.sm_our_key_dist;
   249aa:	7a92      	ldrb	r2, [r2, #10]
    rsp->resp_key_dist = req->resp_key_dist &
   249ac:	4013      	ands	r3, r2
   249ae:	7763      	strb	r3, [r4, #29]
}
   249b0:	bd10      	pop	{r4, pc}
   249b2:	bf00      	nop
   249b4:	100002bc 	.word	0x100002bc

000249b8 <ble_sm_verify_auth_requirements>:
     */
    if (MYNEWT_VAL(BLE_SM_SC_LVL) >= 3 && !(cmd & BLE_SM_PAIR_AUTHREQ_MITM)) {
        return false;
    }
    return true;
}
   249b8:	2001      	movs	r0, #1
   249ba:	4770      	bx	lr

000249bc <ble_sm_gen_ediv>:
{
   249bc:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_rand(&master_id->ediv, sizeof master_id->ediv);
   249be:	2102      	movs	r1, #2
   249c0:	f7fe fe1a 	bl	235f8 <ble_hs_hci_util_rand>
}
   249c4:	bd08      	pop	{r3, pc}

000249c6 <ble_sm_gen_master_id_rand>:
{
   249c6:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_rand(&master_id->rand_val, sizeof master_id->rand_val);
   249c8:	2108      	movs	r1, #8
   249ca:	3002      	adds	r0, #2
   249cc:	f7fe fe14 	bl	235f8 <ble_hs_hci_util_rand>
}
   249d0:	bd08      	pop	{r3, pc}

000249d2 <ble_sm_gen_csrk>:
{
   249d2:	b508      	push	{r3, lr}
   249d4:	4608      	mov	r0, r1
    rc = ble_hs_hci_util_rand(csrk, 16);
   249d6:	2110      	movs	r1, #16
   249d8:	f7fe fe0e 	bl	235f8 <ble_hs_hci_util_rand>
}
   249dc:	bd08      	pop	{r3, pc}

000249de <ble_sm_io_action>:
{
   249de:	b508      	push	{r3, lr}
    if (proc->flags & BLE_SM_PROC_F_SC) {
   249e0:	7a03      	ldrb	r3, [r0, #8]
   249e2:	f013 0f10 	tst.w	r3, #16
   249e6:	d001      	beq.n	249ec <ble_sm_io_action+0xe>
        return ble_sm_sc_io_action(proc, action);
   249e8:	2008      	movs	r0, #8
}
   249ea:	bd08      	pop	{r3, pc}
        return ble_sm_lgcy_io_action(proc, action);
   249ec:	f001 fc28 	bl	26240 <ble_sm_lgcy_io_action>
   249f0:	e7fb      	b.n	249ea <ble_sm_io_action+0xc>

000249f2 <ble_sm_pair_cfg>:
{
   249f2:	b510      	push	{r4, lr}
   249f4:	b082      	sub	sp, #8
   249f6:	4604      	mov	r4, r0
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_SC &&
   249f8:	7cc3      	ldrb	r3, [r0, #19]
   249fa:	f013 0f08 	tst.w	r3, #8
   249fe:	d007      	beq.n	24a10 <ble_sm_pair_cfg+0x1e>
        pair_rsp->authreq & BLE_SM_PAIR_AUTHREQ_SC) {
   24a00:	7e83      	ldrb	r3, [r0, #26]
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_SC &&
   24a02:	f013 0f08 	tst.w	r3, #8
   24a06:	d003      	beq.n	24a10 <ble_sm_pair_cfg+0x1e>
        proc->flags |= BLE_SM_PROC_F_SC;
   24a08:	7a03      	ldrb	r3, [r0, #8]
   24a0a:	f043 0310 	orr.w	r3, r3, #16
   24a0e:	7203      	strb	r3, [r0, #8]
    ble_sm_key_dist(proc, &init_key_dist, &resp_key_dist);
   24a10:	f10d 0206 	add.w	r2, sp, #6
   24a14:	f10d 0107 	add.w	r1, sp, #7
   24a18:	4620      	mov	r0, r4
   24a1a:	f7ff ff6f 	bl	248fc <ble_sm_key_dist>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   24a1e:	7a22      	ldrb	r2, [r4, #8]
   24a20:	f012 0f01 	tst.w	r2, #1
   24a24:	d03b      	beq.n	24a9e <ble_sm_pair_cfg+0xac>
        rx_key_dist = resp_key_dist;
   24a26:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_BOND &&
   24a2a:	7ce1      	ldrb	r1, [r4, #19]
   24a2c:	f011 0f01 	tst.w	r1, #1
   24a30:	d006      	beq.n	24a40 <ble_sm_pair_cfg+0x4e>
        pair_rsp->authreq & BLE_SM_PAIR_AUTHREQ_BOND) {
   24a32:	7ea1      	ldrb	r1, [r4, #26]
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_BOND &&
   24a34:	f011 0f01 	tst.w	r1, #1
   24a38:	d002      	beq.n	24a40 <ble_sm_pair_cfg+0x4e>
        proc->flags |= BLE_SM_PROC_F_BONDING;
   24a3a:	f042 0220 	orr.w	r2, r2, #32
   24a3e:	7222      	strb	r2, [r4, #8]
    if (!(proc->flags & BLE_SM_PROC_F_SC) &&
   24a40:	7a22      	ldrb	r2, [r4, #8]
   24a42:	f012 0f10 	tst.w	r2, #16
   24a46:	d108      	bne.n	24a5a <ble_sm_pair_cfg+0x68>
        (init_key_dist == 0 && resp_key_dist == 0)) {
   24a48:	f89d 1007 	ldrb.w	r1, [sp, #7]
    if (!(proc->flags & BLE_SM_PROC_F_SC) &&
   24a4c:	b929      	cbnz	r1, 24a5a <ble_sm_pair_cfg+0x68>
        (init_key_dist == 0 && resp_key_dist == 0)) {
   24a4e:	f89d 1006 	ldrb.w	r1, [sp, #6]
   24a52:	b911      	cbnz	r1, 24a5a <ble_sm_pair_cfg+0x68>
        proc->flags &= ~BLE_SM_PROC_F_BONDING;
   24a54:	f022 0220 	bic.w	r2, r2, #32
   24a58:	7222      	strb	r2, [r4, #8]
    proc->rx_key_flags = 0;
   24a5a:	2200      	movs	r2, #0
   24a5c:	73a2      	strb	r2, [r4, #14]
    if (rx_key_dist & BLE_SM_PAIR_KEY_DIST_ENC) {
   24a5e:	f013 0f01 	tst.w	r3, #1
   24a62:	d001      	beq.n	24a68 <ble_sm_pair_cfg+0x76>
        proc->rx_key_flags |= BLE_SM_KE_F_ENC_INFO |
   24a64:	2203      	movs	r2, #3
   24a66:	73a2      	strb	r2, [r4, #14]
    if (rx_key_dist & BLE_SM_PAIR_KEY_DIST_ID) {
   24a68:	f013 0f02 	tst.w	r3, #2
   24a6c:	d003      	beq.n	24a76 <ble_sm_pair_cfg+0x84>
        proc->rx_key_flags |= BLE_SM_KE_F_ID_INFO |
   24a6e:	7ba2      	ldrb	r2, [r4, #14]
   24a70:	f042 020c 	orr.w	r2, r2, #12
   24a74:	73a2      	strb	r2, [r4, #14]
    if (rx_key_dist & BLE_SM_PAIR_KEY_DIST_SIGN) {
   24a76:	f013 0f04 	tst.w	r3, #4
   24a7a:	d003      	beq.n	24a84 <ble_sm_pair_cfg+0x92>
        proc->rx_key_flags |= BLE_SM_KE_F_SIGN_INFO;
   24a7c:	7ba3      	ldrb	r3, [r4, #14]
   24a7e:	f043 0310 	orr.w	r3, r3, #16
   24a82:	73a3      	strb	r3, [r4, #14]
    proc->key_size = min(pair_req->max_enc_key_size,
   24a84:	7ee3      	ldrb	r3, [r4, #27]
   24a86:	7d22      	ldrb	r2, [r4, #20]
   24a88:	4293      	cmp	r3, r2
   24a8a:	bf28      	it	cs
   24a8c:	4613      	movcs	r3, r2
   24a8e:	73e3      	strb	r3, [r4, #15]
    rc = ble_sm_io_action(proc, &ioact);
   24a90:	f10d 0105 	add.w	r1, sp, #5
   24a94:	4620      	mov	r0, r4
   24a96:	f7ff ffa2 	bl	249de <ble_sm_io_action>
}
   24a9a:	b002      	add	sp, #8
   24a9c:	bd10      	pop	{r4, pc}
        rx_key_dist = init_key_dist;
   24a9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24aa2:	e7c2      	b.n	24a2a <ble_sm_pair_cfg+0x38>

00024aa4 <ble_sm_gen_ltk>:
{
   24aa4:	b570      	push	{r4, r5, r6, lr}
   24aa6:	4605      	mov	r5, r0
   24aa8:	460c      	mov	r4, r1
    rc = ble_hs_hci_util_rand(ltk, proc->key_size);
   24aaa:	7bc1      	ldrb	r1, [r0, #15]
   24aac:	4620      	mov	r0, r4
   24aae:	f7fe fda3 	bl	235f8 <ble_hs_hci_util_rand>
    if (rc != 0) {
   24ab2:	4606      	mov	r6, r0
   24ab4:	b108      	cbz	r0, 24aba <ble_sm_gen_ltk+0x16>
}
   24ab6:	4630      	mov	r0, r6
   24ab8:	bd70      	pop	{r4, r5, r6, pc}
    memset(ltk + proc->key_size, 0, sizeof proc->ltk - proc->key_size);
   24aba:	7be8      	ldrb	r0, [r5, #15]
   24abc:	f1c0 0210 	rsb	r2, r0, #16
   24ac0:	2100      	movs	r1, #0
   24ac2:	4420      	add	r0, r4
   24ac4:	f7f2 f82b 	bl	16b1e <memset>
    return 0;
   24ac8:	e7f5      	b.n	24ab6 <ble_sm_gen_ltk+0x12>
	...

00024acc <ble_sm_exec>:
{
   24acc:	b570      	push	{r4, r5, r6, lr}
   24ace:	4606      	mov	r6, r0
   24ad0:	460c      	mov	r4, r1
   24ad2:	4615      	mov	r5, r2
    memset(res, 0, sizeof *res);
   24ad4:	2300      	movs	r3, #0
   24ad6:	600b      	str	r3, [r1, #0]
   24ad8:	604b      	str	r3, [r1, #4]
   24ada:	608b      	str	r3, [r1, #8]
   24adc:	60cb      	str	r3, [r1, #12]
   24ade:	610b      	str	r3, [r1, #16]
   24ae0:	614b      	str	r3, [r1, #20]
    if (!ble_hs_conn_exists(proc->conn_handle)) {
   24ae2:	8940      	ldrh	r0, [r0, #10]
   24ae4:	f7fd fe94 	bl	22810 <ble_hs_conn_exists>
   24ae8:	b910      	cbnz	r0, 24af0 <ble_sm_exec+0x24>
        res->app_status = BLE_HS_ENOTCONN;
   24aea:	2307      	movs	r3, #7
   24aec:	6023      	str	r3, [r4, #0]
}
   24aee:	bd70      	pop	{r4, r5, r6, pc}
        cb = ble_sm_state_dispatch[proc->state];
   24af0:	7b72      	ldrb	r2, [r6, #13]
   24af2:	4b04      	ldr	r3, [pc, #16]	; (24b04 <ble_sm_exec+0x38>)
   24af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        cb(proc, res, arg);
   24af8:	462a      	mov	r2, r5
   24afa:	4621      	mov	r1, r4
   24afc:	4630      	mov	r0, r6
   24afe:	4798      	blx	r3
}
   24b00:	e7f5      	b.n	24aee <ble_sm_exec+0x22>
   24b02:	bf00      	nop
   24b04:	00031368 	.word	0x00031368

00024b08 <ble_sm_sec_req_exec>:
 *****************************************************************************/

static void
ble_sm_sec_req_exec(struct ble_sm_proc *proc, struct ble_sm_result *res,
                    void *arg)
{
   24b08:	b570      	push	{r4, r5, r6, lr}
   24b0a:	b082      	sub	sp, #8
   24b0c:	4604      	mov	r4, r0
   24b0e:	460d      	mov	r5, r1
    struct ble_sm_sec_req *cmd;
    struct os_mbuf *txom;
    int rc;

    cmd = ble_sm_cmd_get(BLE_SM_OP_SEC_REQ, sizeof(*cmd), &txom);
   24b10:	aa01      	add	r2, sp, #4
   24b12:	2101      	movs	r1, #1
   24b14:	200b      	movs	r0, #11
   24b16:	f001 fb3b 	bl	26190 <ble_sm_cmd_get>
    if (!cmd) {
   24b1a:	b150      	cbz	r0, 24b32 <ble_sm_sec_req_exec+0x2a>
   24b1c:	4606      	mov	r6, r0
        res->app_status = BLE_HS_ENOMEM;
        return;
    }

    cmd->authreq = ble_sm_build_authreq();
   24b1e:	f7ff fed9 	bl	248d4 <ble_sm_build_authreq>
   24b22:	7030      	strb	r0, [r6, #0]
    rc = ble_sm_tx(proc->conn_handle, txom);
   24b24:	9901      	ldr	r1, [sp, #4]
   24b26:	8960      	ldrh	r0, [r4, #10]
   24b28:	f001 fb4c 	bl	261c4 <ble_sm_tx>
    if (rc != 0) {
   24b2c:	b920      	cbnz	r0, 24b38 <ble_sm_sec_req_exec+0x30>
        res->app_status = rc;
        return;
    }
}
   24b2e:	b002      	add	sp, #8
   24b30:	bd70      	pop	{r4, r5, r6, pc}
        res->app_status = BLE_HS_ENOMEM;
   24b32:	2306      	movs	r3, #6
   24b34:	602b      	str	r3, [r5, #0]
        return;
   24b36:	e7fa      	b.n	24b2e <ble_sm_sec_req_exec+0x26>
        res->app_status = rc;
   24b38:	6028      	str	r0, [r5, #0]
        return;
   24b3a:	e7f8      	b.n	24b2e <ble_sm_sec_req_exec+0x26>

00024b3c <ble_sm_fill_store_value>:
{
   24b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24b40:	4606      	mov	r6, r0
   24b42:	4688      	mov	r8, r1
   24b44:	4617      	mov	r7, r2
   24b46:	461d      	mov	r5, r3
   24b48:	9c06      	ldr	r4, [sp, #24]
    memset(value_sec, 0, sizeof *value_sec);
   24b4a:	2250      	movs	r2, #80	; 0x50
   24b4c:	2100      	movs	r1, #0
   24b4e:	4620      	mov	r0, r4
   24b50:	f7f1 ffe5 	bl	16b1e <memset>
    value_sec->peer_addr = *peer_addr;
   24b54:	6830      	ldr	r0, [r6, #0]
   24b56:	6020      	str	r0, [r4, #0]
   24b58:	88b2      	ldrh	r2, [r6, #4]
   24b5a:	79b3      	ldrb	r3, [r6, #6]
   24b5c:	80a2      	strh	r2, [r4, #4]
   24b5e:	71a3      	strb	r3, [r4, #6]
    if (keys->ediv_rand_valid && keys->ltk_valid) {
   24b60:	782b      	ldrb	r3, [r5, #0]
   24b62:	f003 0303 	and.w	r3, r3, #3
   24b66:	2b03      	cmp	r3, #3
   24b68:	d009      	beq.n	24b7e <ble_sm_fill_store_value+0x42>
    if (keys->irk_valid) {
   24b6a:	782b      	ldrb	r3, [r5, #0]
   24b6c:	f013 0f04 	tst.w	r3, #4
   24b70:	d12e      	bne.n	24bd0 <ble_sm_fill_store_value+0x94>
    if (keys->csrk_valid) {
   24b72:	782b      	ldrb	r3, [r5, #0]
   24b74:	f013 0f08 	tst.w	r3, #8
   24b78:	d13f      	bne.n	24bfa <ble_sm_fill_store_value+0xbe>
}
   24b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        value_sec->key_size = keys->key_size;
   24b7e:	7c6b      	ldrb	r3, [r5, #17]
   24b80:	71e3      	strb	r3, [r4, #7]
        value_sec->ediv = keys->ediv;
   24b82:	886b      	ldrh	r3, [r5, #2]
   24b84:	8123      	strh	r3, [r4, #8]
        value_sec->rand_num = keys->rand_val;
   24b86:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   24b8a:	e9c4 2304 	strd	r2, r3, [r4, #16]
        memcpy(value_sec->ltk, keys->ltk, sizeof value_sec->ltk);
   24b8e:	462b      	mov	r3, r5
   24b90:	f853 0f12 	ldr.w	r0, [r3, #18]!
   24b94:	6859      	ldr	r1, [r3, #4]
   24b96:	689a      	ldr	r2, [r3, #8]
   24b98:	68db      	ldr	r3, [r3, #12]
   24b9a:	61a0      	str	r0, [r4, #24]
   24b9c:	61e1      	str	r1, [r4, #28]
   24b9e:	6222      	str	r2, [r4, #32]
   24ba0:	6263      	str	r3, [r4, #36]	; 0x24
        value_sec->ltk_present = 1;
   24ba2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   24ba6:	f043 0301 	orr.w	r3, r3, #1
   24baa:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        value_sec->authenticated = !!authenticated;
   24bae:	f1b8 0800 	subs.w	r8, r8, #0
   24bb2:	bf18      	it	ne
   24bb4:	f04f 0801 	movne.w	r8, #1
   24bb8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   24bbc:	f368 0341 	bfi	r3, r8, #1, #1
        value_sec->sc = !!sc;
   24bc0:	3f00      	subs	r7, #0
   24bc2:	bf18      	it	ne
   24bc4:	2701      	movne	r7, #1
   24bc6:	f367 0382 	bfi	r3, r7, #2, #1
   24bca:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   24bce:	e7cc      	b.n	24b6a <ble_sm_fill_store_value+0x2e>
        memcpy(value_sec->irk, keys->irk, sizeof value_sec->irk);
   24bd0:	462b      	mov	r3, r5
   24bd2:	f853 0f22 	ldr.w	r0, [r3, #34]!
   24bd6:	6859      	ldr	r1, [r3, #4]
   24bd8:	689a      	ldr	r2, [r3, #8]
   24bda:	68db      	ldr	r3, [r3, #12]
   24bdc:	f8c4 0029 	str.w	r0, [r4, #41]	; 0x29
   24be0:	f8c4 102d 	str.w	r1, [r4, #45]	; 0x2d
   24be4:	f8c4 2031 	str.w	r2, [r4, #49]	; 0x31
   24be8:	f8c4 3035 	str.w	r3, [r4, #53]	; 0x35
        value_sec->irk_present = 1;
   24bec:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   24bf0:	f043 0301 	orr.w	r3, r3, #1
   24bf4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   24bf8:	e7bb      	b.n	24b72 <ble_sm_fill_store_value+0x36>
        memcpy(value_sec->csrk, keys->csrk, sizeof value_sec->csrk);
   24bfa:	f855 0f32 	ldr.w	r0, [r5, #50]!
   24bfe:	6869      	ldr	r1, [r5, #4]
   24c00:	68aa      	ldr	r2, [r5, #8]
   24c02:	68eb      	ldr	r3, [r5, #12]
   24c04:	f8c4 003a 	str.w	r0, [r4, #58]	; 0x3a
   24c08:	f8c4 103e 	str.w	r1, [r4, #62]	; 0x3e
   24c0c:	f8c4 2042 	str.w	r2, [r4, #66]	; 0x42
   24c10:	f8c4 3046 	str.w	r3, [r4, #70]	; 0x46
        value_sec->csrk_present = 1;
   24c14:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   24c18:	f043 0301 	orr.w	r3, r3, #1
   24c1c:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
   24c20:	e7ab      	b.n	24b7a <ble_sm_fill_store_value+0x3e>

00024c22 <ble_sm_update_sec_state>:
{
   24c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24c24:	460f      	mov	r7, r1
   24c26:	4615      	mov	r5, r2
   24c28:	461e      	mov	r6, r3
    conn = ble_hs_conn_find(conn_handle);
   24c2a:	f7fd fdc7 	bl	227bc <ble_hs_conn_find>
    if (conn != NULL) {
   24c2e:	b1e0      	cbz	r0, 24c6a <ble_sm_update_sec_state+0x48>
   24c30:	4604      	mov	r4, r0
        conn->bhc_sec_state.encrypted = encrypted;
   24c32:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
   24c36:	f367 0200 	bfi	r2, r7, #0, #1
   24c3a:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
        if (authenticated) {
   24c3e:	b125      	cbz	r5, 24c4a <ble_sm_update_sec_state+0x28>
            conn->bhc_sec_state.authenticated = 1;
   24c40:	b2d3      	uxtb	r3, r2
   24c42:	f043 0302 	orr.w	r3, r3, #2
   24c46:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
        if (bonded) {
   24c4a:	b12e      	cbz	r6, 24c58 <ble_sm_update_sec_state+0x36>
            conn->bhc_sec_state.bonded = 1;
   24c4c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   24c50:	f043 0304 	orr.w	r3, r3, #4
   24c54:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (key_size) {
   24c58:	9b06      	ldr	r3, [sp, #24]
   24c5a:	b133      	cbz	r3, 24c6a <ble_sm_update_sec_state+0x48>
            conn->bhc_sec_state.key_size = key_size;
   24c5c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   24c60:	9a06      	ldr	r2, [sp, #24]
   24c62:	f362 03c7 	bfi	r3, r2, #3, #5
   24c66:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
   24c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024c6c <ble_sm_key_exch_success>:
 * $key exchange                                                             *
 *****************************************************************************/

static void
ble_sm_key_exch_success(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   24c6c:	b530      	push	{r4, r5, lr}
   24c6e:	b083      	sub	sp, #12
   24c70:	4604      	mov	r4, r0
   24c72:	460d      	mov	r5, r1
    /* The procedure is now complete.  Update connection bonded state and
     * terminate procedure.
     */
    ble_sm_update_sec_state(proc->conn_handle, 1,
                            !!(proc->flags & BLE_SM_PROC_F_AUTHENTICATED),
   24c74:	7a02      	ldrb	r2, [r0, #8]
                            !!(proc->flags & BLE_SM_PROC_F_BONDING),
                            proc->key_size);
   24c76:	7bc3      	ldrb	r3, [r0, #15]
    ble_sm_update_sec_state(proc->conn_handle, 1,
   24c78:	9300      	str	r3, [sp, #0]
   24c7a:	f3c2 1340 	ubfx	r3, r2, #5, #1
   24c7e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   24c82:	2101      	movs	r1, #1
   24c84:	8940      	ldrh	r0, [r0, #10]
   24c86:	f7ff ffcc 	bl	24c22 <ble_sm_update_sec_state>
    proc->state = BLE_SM_PROC_STATE_NONE;
   24c8a:	23ff      	movs	r3, #255	; 0xff
   24c8c:	7363      	strb	r3, [r4, #13]

    res->app_status = 0;
   24c8e:	2300      	movs	r3, #0
   24c90:	602b      	str	r3, [r5, #0]
    res->enc_cb = 1;
   24c92:	7d2b      	ldrb	r3, [r5, #20]
   24c94:	f043 0302 	orr.w	r3, r3, #2
   24c98:	752b      	strb	r3, [r5, #20]
}
   24c9a:	b003      	add	sp, #12
   24c9c:	bd30      	pop	{r4, r5, pc}

00024c9e <ble_sm_key_exch_exec>:

static void
ble_sm_key_exch_exec(struct ble_sm_proc *proc, struct ble_sm_result *res,
                     void *arg)
{
   24c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24ca2:	b08a      	sub	sp, #40	; 0x28
   24ca4:	4604      	mov	r4, r0
   24ca6:	460e      	mov	r6, r1
    uint8_t our_key_dist;
    struct os_mbuf *txom;
    const uint8_t *irk;
    int rc;

    ble_sm_key_dist(proc, &init_key_dist, &resp_key_dist);
   24ca8:	f10d 020a 	add.w	r2, sp, #10
   24cac:	f10d 010b 	add.w	r1, sp, #11
   24cb0:	f7ff fe24 	bl	248fc <ble_sm_key_dist>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   24cb4:	7a23      	ldrb	r3, [r4, #8]
   24cb6:	f013 0f01 	tst.w	r3, #1
   24cba:	d018      	beq.n	24cee <ble_sm_key_exch_exec+0x50>
        our_key_dist = init_key_dist;
   24cbc:	f89d 500b 	ldrb.w	r5, [sp, #11]
    } else {
        our_key_dist = resp_key_dist;
    }

    if (our_key_dist & BLE_SM_PAIR_KEY_DIST_ENC) {
   24cc0:	f015 0f01 	tst.w	r5, #1
   24cc4:	d116      	bne.n	24cf4 <ble_sm_key_exch_exec+0x56>
        if (rc != 0) {
            goto err;
        }
    }

    if (our_key_dist & BLE_SM_PAIR_KEY_DIST_ID) {
   24cc6:	f015 0f02 	tst.w	r5, #2
   24cca:	d17a      	bne.n	24dc2 <ble_sm_key_exch_exec+0x124>
        if (rc != 0) {
            goto err;
        }
    }

    if (our_key_dist & BLE_SM_PAIR_KEY_DIST_SIGN) {
   24ccc:	f015 0f04 	tst.w	r5, #4
   24cd0:	f040 80e4 	bne.w	24e9c <ble_sm_key_exch_exec+0x1fe>
        if (rc != 0) {
            goto err;
        }
    }

    if (proc->flags & BLE_SM_PROC_F_INITIATOR || proc->rx_key_flags == 0) {
   24cd4:	7a23      	ldrb	r3, [r4, #8]
   24cd6:	f013 0f01 	tst.w	r3, #1
   24cda:	d103      	bne.n	24ce4 <ble_sm_key_exch_exec+0x46>
   24cdc:	7ba3      	ldrb	r3, [r4, #14]
   24cde:	2b00      	cmp	r3, #0
   24ce0:	f040 8110 	bne.w	24f04 <ble_sm_key_exch_exec+0x266>
        /* The procedure is now complete. */
        ble_sm_key_exch_success(proc, res);
   24ce4:	4631      	mov	r1, r6
   24ce6:	4620      	mov	r0, r4
   24ce8:	f7ff ffc0 	bl	24c6c <ble_sm_key_exch_success>
   24cec:	e10a      	b.n	24f04 <ble_sm_key_exch_exec+0x266>
        our_key_dist = resp_key_dist;
   24cee:	f89d 500a 	ldrb.w	r5, [sp, #10]
   24cf2:	e7e5      	b.n	24cc0 <ble_sm_key_exch_exec+0x22>
        enc_info = ble_sm_cmd_get(BLE_SM_OP_ENC_INFO, sizeof(*enc_info), &txom);
   24cf4:	aa01      	add	r2, sp, #4
   24cf6:	2110      	movs	r1, #16
   24cf8:	2006      	movs	r0, #6
   24cfa:	f001 fa49 	bl	26190 <ble_sm_cmd_get>
        if (!enc_info) {
   24cfe:	4601      	mov	r1, r0
   24d00:	2800      	cmp	r0, #0
   24d02:	f000 80f7 	beq.w	24ef4 <ble_sm_key_exch_exec+0x256>
        rc = ble_sm_gen_ltk(proc, enc_info->ltk);
   24d06:	4680      	mov	r8, r0
   24d08:	4620      	mov	r0, r4
   24d0a:	f7ff fecb 	bl	24aa4 <ble_sm_gen_ltk>
        if (rc != 0) {
   24d0e:	4607      	mov	r7, r0
   24d10:	2800      	cmp	r0, #0
   24d12:	d14a      	bne.n	24daa <ble_sm_key_exch_exec+0x10c>
        memcpy(proc->our_keys.ltk, enc_info->ltk, 16);
   24d14:	f8d8 0000 	ldr.w	r0, [r8]
   24d18:	f8d8 1004 	ldr.w	r1, [r8, #4]
   24d1c:	f8d8 2008 	ldr.w	r2, [r8, #8]
   24d20:	f8d8 300c 	ldr.w	r3, [r8, #12]
   24d24:	f8c4 0082 	str.w	r0, [r4, #130]	; 0x82
   24d28:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
   24d2c:	f8c4 208a 	str.w	r2, [r4, #138]	; 0x8a
   24d30:	f8c4 308e 	str.w	r3, [r4, #142]	; 0x8e
        proc->our_keys.key_size = proc->key_size;
   24d34:	7be3      	ldrb	r3, [r4, #15]
   24d36:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        proc->our_keys.ltk_valid = 1;
   24d3a:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   24d3e:	f043 0301 	orr.w	r3, r3, #1
   24d42:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        rc = ble_sm_tx(proc->conn_handle, txom);
   24d46:	9901      	ldr	r1, [sp, #4]
   24d48:	8960      	ldrh	r0, [r4, #10]
   24d4a:	f001 fa3b 	bl	261c4 <ble_sm_tx>
        if (rc != 0) {
   24d4e:	4607      	mov	r7, r0
   24d50:	2800      	cmp	r0, #0
   24d52:	f040 80d0 	bne.w	24ef6 <ble_sm_key_exch_exec+0x258>
        master_id = ble_sm_cmd_get(BLE_SM_OP_MASTER_ID, sizeof(*master_id),
   24d56:	aa01      	add	r2, sp, #4
   24d58:	210a      	movs	r1, #10
   24d5a:	2007      	movs	r0, #7
   24d5c:	f001 fa18 	bl	26190 <ble_sm_cmd_get>
        if (!master_id) {
   24d60:	4680      	mov	r8, r0
   24d62:	2800      	cmp	r0, #0
   24d64:	f000 80d1 	beq.w	24f0a <ble_sm_key_exch_exec+0x26c>
        rc = ble_sm_gen_ediv(master_id);
   24d68:	f7ff fe28 	bl	249bc <ble_sm_gen_ediv>
        if (rc != 0) {
   24d6c:	4607      	mov	r7, r0
   24d6e:	bb00      	cbnz	r0, 24db2 <ble_sm_key_exch_exec+0x114>
        rc = ble_sm_gen_master_id_rand(master_id);
   24d70:	4640      	mov	r0, r8
   24d72:	f7ff fe28 	bl	249c6 <ble_sm_gen_master_id_rand>
        if (rc != 0) {
   24d76:	4607      	mov	r7, r0
   24d78:	b9f8      	cbnz	r0, 24dba <ble_sm_key_exch_exec+0x11c>
        proc->our_keys.ediv_rand_valid = 1;
   24d7a:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   24d7e:	f043 0302 	orr.w	r3, r3, #2
   24d82:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        proc->our_keys.rand_val = master_id->rand_val;
   24d86:	f8d8 2002 	ldr.w	r2, [r8, #2]
   24d8a:	f8d8 3006 	ldr.w	r3, [r8, #6]
   24d8e:	67a2      	str	r2, [r4, #120]	; 0x78
   24d90:	67e3      	str	r3, [r4, #124]	; 0x7c
        proc->our_keys.ediv = master_id->ediv;
   24d92:	f8b8 3000 	ldrh.w	r3, [r8]
   24d96:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
        rc = ble_sm_tx(proc->conn_handle, txom);
   24d9a:	9901      	ldr	r1, [sp, #4]
   24d9c:	8960      	ldrh	r0, [r4, #10]
   24d9e:	f001 fa11 	bl	261c4 <ble_sm_tx>
        if (rc != 0) {
   24da2:	4607      	mov	r7, r0
   24da4:	2800      	cmp	r0, #0
   24da6:	d08e      	beq.n	24cc6 <ble_sm_key_exch_exec+0x28>
   24da8:	e0a5      	b.n	24ef6 <ble_sm_key_exch_exec+0x258>
            os_mbuf_free_chain(txom);
   24daa:	9801      	ldr	r0, [sp, #4]
   24dac:	f7f0 fc62 	bl	15674 <os_mbuf_free_chain>
            goto err;
   24db0:	e0a1      	b.n	24ef6 <ble_sm_key_exch_exec+0x258>
            os_mbuf_free_chain(txom);
   24db2:	9801      	ldr	r0, [sp, #4]
   24db4:	f7f0 fc5e 	bl	15674 <os_mbuf_free_chain>
            goto err;
   24db8:	e09d      	b.n	24ef6 <ble_sm_key_exch_exec+0x258>
            os_mbuf_free_chain(txom);
   24dba:	9801      	ldr	r0, [sp, #4]
   24dbc:	f7f0 fc5a 	bl	15674 <os_mbuf_free_chain>
            goto err;
   24dc0:	e099      	b.n	24ef6 <ble_sm_key_exch_exec+0x258>
        id_info = ble_sm_cmd_get(BLE_SM_OP_IDENTITY_INFO, sizeof(*id_info),
   24dc2:	aa01      	add	r2, sp, #4
   24dc4:	2110      	movs	r1, #16
   24dc6:	2008      	movs	r0, #8
   24dc8:	f001 f9e2 	bl	26190 <ble_sm_cmd_get>
        if (!id_info) {
   24dcc:	4680      	mov	r8, r0
   24dce:	2800      	cmp	r0, #0
   24dd0:	f000 809d 	beq.w	24f0e <ble_sm_key_exch_exec+0x270>
        rc = ble_hs_pvcy_our_irk(&irk);
   24dd4:	4668      	mov	r0, sp
   24dd6:	f7fe fe9f 	bl	23b18 <ble_hs_pvcy_our_irk>
        if (rc != 0) {
   24dda:	4607      	mov	r7, r0
   24ddc:	2800      	cmp	r0, #0
   24dde:	d159      	bne.n	24e94 <ble_sm_key_exch_exec+0x1f6>
        memcpy(id_info->irk, irk, 16);
   24de0:	9b00      	ldr	r3, [sp, #0]
   24de2:	6818      	ldr	r0, [r3, #0]
   24de4:	6859      	ldr	r1, [r3, #4]
   24de6:	689a      	ldr	r2, [r3, #8]
   24de8:	68db      	ldr	r3, [r3, #12]
   24dea:	f8c8 0000 	str.w	r0, [r8]
   24dee:	f8c8 1004 	str.w	r1, [r8, #4]
   24df2:	f8c8 2008 	str.w	r2, [r8, #8]
   24df6:	f8c8 300c 	str.w	r3, [r8, #12]
        proc->our_keys.irk_valid = 1;
   24dfa:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   24dfe:	f043 0304 	orr.w	r3, r3, #4
   24e02:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        rc = ble_sm_tx(proc->conn_handle, txom);
   24e06:	9901      	ldr	r1, [sp, #4]
   24e08:	8960      	ldrh	r0, [r4, #10]
   24e0a:	f001 f9db 	bl	261c4 <ble_sm_tx>
        if (rc != 0) {
   24e0e:	4607      	mov	r7, r0
   24e10:	2800      	cmp	r0, #0
   24e12:	d170      	bne.n	24ef6 <ble_sm_key_exch_exec+0x258>
        addr_info = ble_sm_cmd_get(BLE_SM_OP_IDENTITY_ADDR_INFO,
   24e14:	aa01      	add	r2, sp, #4
   24e16:	2107      	movs	r1, #7
   24e18:	2009      	movs	r0, #9
   24e1a:	f001 f9b9 	bl	26190 <ble_sm_cmd_get>
        if (!addr_info) {
   24e1e:	4607      	mov	r7, r0
   24e20:	2800      	cmp	r0, #0
   24e22:	d076      	beq.n	24f12 <ble_sm_key_exch_exec+0x274>
        conn = ble_hs_conn_find_assert(proc->conn_handle);
   24e24:	8960      	ldrh	r0, [r4, #10]
   24e26:	f7fd fce1 	bl	227ec <ble_hs_conn_find_assert>
        ble_hs_conn_addrs(conn, &addrs);
   24e2a:	a903      	add	r1, sp, #12
   24e2c:	f7fd fcfe 	bl	2282c <ble_hs_conn_addrs>
        addr_info->addr_type = addrs.our_id_addr.type;
   24e30:	f89d 200c 	ldrb.w	r2, [sp, #12]
   24e34:	463b      	mov	r3, r7
   24e36:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(addr_info->bd_addr, addrs.our_id_addr.val, 6);
   24e3a:	f8dd 200d 	ldr.w	r2, [sp, #13]
   24e3e:	f8c7 2001 	str.w	r2, [r7, #1]
   24e42:	f8bd 2011 	ldrh.w	r2, [sp, #17]
   24e46:	809a      	strh	r2, [r3, #4]
        proc->our_keys.addr_valid = 1;
   24e48:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
   24e4c:	f042 0210 	orr.w	r2, r2, #16
   24e50:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
        memcpy(proc->our_keys.irk, irk, 16);
   24e54:	9a00      	ldr	r2, [sp, #0]
   24e56:	f8d2 c000 	ldr.w	ip, [r2]
   24e5a:	6850      	ldr	r0, [r2, #4]
   24e5c:	6891      	ldr	r1, [r2, #8]
   24e5e:	68d2      	ldr	r2, [r2, #12]
   24e60:	f8c4 c092 	str.w	ip, [r4, #146]	; 0x92
   24e64:	f8c4 0096 	str.w	r0, [r4, #150]	; 0x96
   24e68:	f8c4 109a 	str.w	r1, [r4, #154]	; 0x9a
   24e6c:	f8c4 209e 	str.w	r2, [r4, #158]	; 0x9e
        proc->our_keys.addr_type = addr_info->addr_type;
   24e70:	783a      	ldrb	r2, [r7, #0]
   24e72:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
        memcpy(proc->our_keys.addr, addr_info->bd_addr, 6);
   24e76:	681a      	ldr	r2, [r3, #0]
   24e78:	f8c4 20b2 	str.w	r2, [r4, #178]	; 0xb2
   24e7c:	889b      	ldrh	r3, [r3, #4]
   24e7e:	f8a4 30b6 	strh.w	r3, [r4, #182]	; 0xb6
        rc = ble_sm_tx(proc->conn_handle, txom);
   24e82:	9901      	ldr	r1, [sp, #4]
   24e84:	8960      	ldrh	r0, [r4, #10]
   24e86:	f001 f99d 	bl	261c4 <ble_sm_tx>
        if (rc != 0) {
   24e8a:	4607      	mov	r7, r0
   24e8c:	2800      	cmp	r0, #0
   24e8e:	f43f af1d 	beq.w	24ccc <ble_sm_key_exch_exec+0x2e>
   24e92:	e030      	b.n	24ef6 <ble_sm_key_exch_exec+0x258>
            os_mbuf_free_chain(txom);
   24e94:	9801      	ldr	r0, [sp, #4]
   24e96:	f7f0 fbed 	bl	15674 <os_mbuf_free_chain>
            goto err;
   24e9a:	e02c      	b.n	24ef6 <ble_sm_key_exch_exec+0x258>
        sign_info = ble_sm_cmd_get(BLE_SM_OP_SIGN_INFO, sizeof(*sign_info),
   24e9c:	aa01      	add	r2, sp, #4
   24e9e:	2110      	movs	r1, #16
   24ea0:	200a      	movs	r0, #10
   24ea2:	f001 f975 	bl	26190 <ble_sm_cmd_get>
        if (!sign_info) {
   24ea6:	4601      	mov	r1, r0
   24ea8:	b3a8      	cbz	r0, 24f16 <ble_sm_key_exch_exec+0x278>
        rc = ble_sm_gen_csrk(proc, sign_info->sig_key);
   24eaa:	4605      	mov	r5, r0
   24eac:	4620      	mov	r0, r4
   24eae:	f7ff fd90 	bl	249d2 <ble_sm_gen_csrk>
        if (rc != 0) {
   24eb2:	4607      	mov	r7, r0
   24eb4:	b9d0      	cbnz	r0, 24eec <ble_sm_key_exch_exec+0x24e>
        proc->our_keys.csrk_valid = 1;
   24eb6:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   24eba:	f043 0308 	orr.w	r3, r3, #8
   24ebe:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        memcpy(proc->our_keys.csrk, sign_info->sig_key, 16);
   24ec2:	6828      	ldr	r0, [r5, #0]
   24ec4:	6869      	ldr	r1, [r5, #4]
   24ec6:	68aa      	ldr	r2, [r5, #8]
   24ec8:	68eb      	ldr	r3, [r5, #12]
   24eca:	f8c4 00a2 	str.w	r0, [r4, #162]	; 0xa2
   24ece:	f8c4 10a6 	str.w	r1, [r4, #166]	; 0xa6
   24ed2:	f8c4 20aa 	str.w	r2, [r4, #170]	; 0xaa
   24ed6:	f8c4 30ae 	str.w	r3, [r4, #174]	; 0xae
        rc = ble_sm_tx(proc->conn_handle, txom);
   24eda:	9901      	ldr	r1, [sp, #4]
   24edc:	8960      	ldrh	r0, [r4, #10]
   24ede:	f001 f971 	bl	261c4 <ble_sm_tx>
        if (rc != 0) {
   24ee2:	4607      	mov	r7, r0
   24ee4:	2800      	cmp	r0, #0
   24ee6:	f43f aef5 	beq.w	24cd4 <ble_sm_key_exch_exec+0x36>
   24eea:	e004      	b.n	24ef6 <ble_sm_key_exch_exec+0x258>
            os_mbuf_free_chain(txom);
   24eec:	9801      	ldr	r0, [sp, #4]
   24eee:	f7f0 fbc1 	bl	15674 <os_mbuf_free_chain>
            goto err;
   24ef2:	e000      	b.n	24ef6 <ble_sm_key_exch_exec+0x258>
            rc = BLE_HS_ENOMEM;
   24ef4:	2706      	movs	r7, #6
    }

    return;

err:
    res->app_status = rc;
   24ef6:	6037      	str	r7, [r6, #0]
    res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   24ef8:	2308      	movs	r3, #8
   24efa:	7133      	strb	r3, [r6, #4]
    res->enc_cb = 1;
   24efc:	7d33      	ldrb	r3, [r6, #20]
   24efe:	f043 0302 	orr.w	r3, r3, #2
   24f02:	7533      	strb	r3, [r6, #20]
}
   24f04:	b00a      	add	sp, #40	; 0x28
   24f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_ENOMEM;
   24f0a:	2706      	movs	r7, #6
   24f0c:	e7f3      	b.n	24ef6 <ble_sm_key_exch_exec+0x258>
            rc = BLE_HS_ENOMEM;
   24f0e:	2706      	movs	r7, #6
   24f10:	e7f1      	b.n	24ef6 <ble_sm_key_exch_exec+0x258>
            rc = BLE_HS_ENOMEM;
   24f12:	2706      	movs	r7, #6
   24f14:	e7ef      	b.n	24ef6 <ble_sm_key_exch_exec+0x258>
            rc = BLE_HS_ENOMEM;
   24f16:	2706      	movs	r7, #6
   24f18:	e7ed      	b.n	24ef6 <ble_sm_key_exch_exec+0x258>

00024f1a <ble_sm_key_rxed>:

static void
ble_sm_key_rxed(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   24f1a:	b508      	push	{r3, lr}
    BLE_HS_LOG(DEBUG, "rx_key_flags=0x%02x\n", proc->rx_key_flags);

    if (proc->rx_key_flags == 0) {
   24f1c:	7b83      	ldrb	r3, [r0, #14]
   24f1e:	b93b      	cbnz	r3, 24f30 <ble_sm_key_rxed+0x16>
        /* The peer is done sending keys.  If we are the initiator, we need to
         * send ours.  If we are the responder, the procedure is complete.
         */
        if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   24f20:	7a03      	ldrb	r3, [r0, #8]
   24f22:	f013 0f01 	tst.w	r3, #1
   24f26:	d004      	beq.n	24f32 <ble_sm_key_rxed+0x18>
            res->execute = 1;
   24f28:	7d0b      	ldrb	r3, [r1, #20]
   24f2a:	f043 0301 	orr.w	r3, r3, #1
   24f2e:	750b      	strb	r3, [r1, #20]
        } else {
            ble_sm_key_exch_success(proc, res);
        }
    }
}
   24f30:	bd08      	pop	{r3, pc}
            ble_sm_key_exch_success(proc, res);
   24f32:	f7ff fe9b 	bl	24c6c <ble_sm_key_exch_success>
}
   24f36:	e7fb      	b.n	24f30 <ble_sm_key_rxed+0x16>

00024f38 <ble_sm_start_encrypt_tx>:
{
   24f38:	b510      	push	{r4, lr}
   24f3a:	b08a      	sub	sp, #40	; 0x28
   24f3c:	4603      	mov	r3, r0
    cmd.conn_handle = htole16(params->connection_handle);
   24f3e:	8802      	ldrh	r2, [r0, #0]
   24f40:	f8ad 200c 	strh.w	r2, [sp, #12]
    cmd.div = htole16(params->encrypted_diversifier);
   24f44:	8842      	ldrh	r2, [r0, #2]
   24f46:	f8ad 2016 	strh.w	r2, [sp, #22]
    cmd.rand = htole64(params->random_number);
   24f4a:	6881      	ldr	r1, [r0, #8]
   24f4c:	68c2      	ldr	r2, [r0, #12]
   24f4e:	f8cd 100e 	str.w	r1, [sp, #14]
   24f52:	f8cd 2012 	str.w	r2, [sp, #18]
    memcpy(cmd.ltk, params->long_term_key, sizeof(cmd.ltk));
   24f56:	ac06      	add	r4, sp, #24
   24f58:	f853 0f10 	ldr.w	r0, [r3, #16]!
   24f5c:	6859      	ldr	r1, [r3, #4]
   24f5e:	689a      	ldr	r2, [r3, #8]
   24f60:	68db      	ldr	r3, [r3, #12]
   24f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   24f64:	2300      	movs	r3, #0
   24f66:	9300      	str	r3, [sp, #0]
   24f68:	221c      	movs	r2, #28
   24f6a:	a903      	add	r1, sp, #12
   24f6c:	f242 0019 	movw	r0, #8217	; 0x2019
   24f70:	f7fd ff78 	bl	22e64 <ble_hs_hci_cmd_tx>
}
   24f74:	b00a      	add	sp, #40	; 0x28
   24f76:	bd10      	pop	{r4, pc}

00024f78 <ble_sm_enc_restore_exec>:
{
   24f78:	b510      	push	{r4, lr}
   24f7a:	460c      	mov	r4, r1
    res->app_status = ble_sm_start_encrypt_tx(cmd);
   24f7c:	4610      	mov	r0, r2
   24f7e:	f7ff ffdb 	bl	24f38 <ble_sm_start_encrypt_tx>
   24f82:	6020      	str	r0, [r4, #0]
}
   24f84:	bd10      	pop	{r4, pc}

00024f86 <ble_sm_enc_start_exec>:
{
   24f86:	b530      	push	{r4, r5, lr}
   24f88:	b089      	sub	sp, #36	; 0x24
   24f8a:	4603      	mov	r3, r0
   24f8c:	460d      	mov	r5, r1
    cmd.connection_handle = proc->conn_handle;
   24f8e:	8942      	ldrh	r2, [r0, #10]
   24f90:	f8ad 2000 	strh.w	r2, [sp]
    cmd.encrypted_diversifier = 0;
   24f94:	2200      	movs	r2, #0
   24f96:	f8ad 2002 	strh.w	r2, [sp, #2]
    cmd.random_number = 0;
   24f9a:	2000      	movs	r0, #0
   24f9c:	2100      	movs	r1, #0
   24f9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    memcpy(cmd.long_term_key, proc->ltk, sizeof cmd.long_term_key);
   24fa2:	ac04      	add	r4, sp, #16
   24fa4:	f853 0f5e 	ldr.w	r0, [r3, #94]!
   24fa8:	6859      	ldr	r1, [r3, #4]
   24faa:	689a      	ldr	r2, [r3, #8]
   24fac:	68db      	ldr	r3, [r3, #12]
   24fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    rc = ble_sm_start_encrypt_tx(&cmd);
   24fb0:	4668      	mov	r0, sp
   24fb2:	f7ff ffc1 	bl	24f38 <ble_sm_start_encrypt_tx>
    if (rc != 0) {
   24fb6:	b130      	cbz	r0, 24fc6 <ble_sm_enc_start_exec+0x40>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   24fb8:	2208      	movs	r2, #8
   24fba:	712a      	strb	r2, [r5, #4]
        res->app_status = rc;
   24fbc:	6028      	str	r0, [r5, #0]
        res->enc_cb = 1;
   24fbe:	7d2b      	ldrb	r3, [r5, #20]
   24fc0:	f043 0302 	orr.w	r3, r3, #2
   24fc4:	752b      	strb	r3, [r5, #20]
}
   24fc6:	b009      	add	sp, #36	; 0x24
   24fc8:	bd30      	pop	{r4, r5, pc}

00024fca <ble_sm_ltk_req_reply_tx>:
{
   24fca:	b530      	push	{r4, r5, lr}
   24fcc:	b089      	sub	sp, #36	; 0x24
   24fce:	4604      	mov	r4, r0
    cmd.conn_handle = htole16(conn_handle);
   24fd0:	f8ad 000c 	strh.w	r0, [sp, #12]
    memcpy(cmd.ltk, ltk, 16);
   24fd4:	680d      	ldr	r5, [r1, #0]
   24fd6:	6848      	ldr	r0, [r1, #4]
   24fd8:	688a      	ldr	r2, [r1, #8]
   24fda:	68cb      	ldr	r3, [r1, #12]
   24fdc:	f8cd 500e 	str.w	r5, [sp, #14]
   24fe0:	f8cd 0012 	str.w	r0, [sp, #18]
   24fe4:	f8cd 2016 	str.w	r2, [sp, #22]
   24fe8:	f8cd 301a 	str.w	r3, [sp, #26]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   24fec:	2302      	movs	r3, #2
   24fee:	9300      	str	r3, [sp, #0]
   24ff0:	ab02      	add	r3, sp, #8
   24ff2:	2212      	movs	r2, #18
   24ff4:	a903      	add	r1, sp, #12
   24ff6:	f242 001a 	movw	r0, #8218	; 0x201a
   24ffa:	f7fd ff33 	bl	22e64 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   24ffe:	b918      	cbnz	r0, 25008 <ble_sm_ltk_req_reply_tx+0x3e>
    if (le16toh(rsp.conn_handle) != conn_handle) {
   25000:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   25004:	42a3      	cmp	r3, r4
   25006:	d101      	bne.n	2500c <ble_sm_ltk_req_reply_tx+0x42>
}
   25008:	b009      	add	sp, #36	; 0x24
   2500a:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ECONTROLLER;
   2500c:	200c      	movs	r0, #12
   2500e:	e7fb      	b.n	25008 <ble_sm_ltk_req_reply_tx+0x3e>

00025010 <ble_sm_ltk_start_exec>:
{
   25010:	b538      	push	{r3, r4, r5, lr}
   25012:	4604      	mov	r4, r0
   25014:	460d      	mov	r5, r1
    res->app_status = ble_sm_ltk_req_reply_tx(proc->conn_handle, proc->ltk);
   25016:	f100 015e 	add.w	r1, r0, #94	; 0x5e
   2501a:	8940      	ldrh	r0, [r0, #10]
   2501c:	f7ff ffd5 	bl	24fca <ble_sm_ltk_req_reply_tx>
   25020:	6028      	str	r0, [r5, #0]
    if (res->app_status == 0) {
   25022:	b910      	cbnz	r0, 2502a <ble_sm_ltk_start_exec+0x1a>
        proc->state = BLE_SM_PROC_STATE_ENC_START;
   25024:	2305      	movs	r3, #5
   25026:	7363      	strb	r3, [r4, #13]
}
   25028:	bd38      	pop	{r3, r4, r5, pc}
        res->enc_cb = 1;
   2502a:	7d2b      	ldrb	r3, [r5, #20]
   2502c:	f043 0302 	orr.w	r3, r3, #2
   25030:	752b      	strb	r3, [r5, #20]
}
   25032:	e7f9      	b.n	25028 <ble_sm_ltk_start_exec+0x18>

00025034 <ble_sm_ltk_req_neg_reply_tx>:
{
   25034:	b510      	push	{r4, lr}
   25036:	b084      	sub	sp, #16
   25038:	4604      	mov	r4, r0
    cmd.conn_handle = htole16(conn_handle);
   2503a:	f8ad 000c 	strh.w	r0, [sp, #12]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2503e:	2202      	movs	r2, #2
   25040:	9200      	str	r2, [sp, #0]
   25042:	ab02      	add	r3, sp, #8
   25044:	a903      	add	r1, sp, #12
   25046:	f242 001b 	movw	r0, #8219	; 0x201b
   2504a:	f7fd ff0b 	bl	22e64 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   2504e:	b918      	cbnz	r0, 25058 <ble_sm_ltk_req_neg_reply_tx+0x24>
    if (le16toh(rsp.conn_handle) != conn_handle) {
   25050:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   25054:	42a3      	cmp	r3, r4
   25056:	d101      	bne.n	2505c <ble_sm_ltk_req_neg_reply_tx+0x28>
}
   25058:	b004      	add	sp, #16
   2505a:	bd10      	pop	{r4, pc}
        return BLE_HS_ECONTROLLER;
   2505c:	200c      	movs	r0, #12
   2505e:	e7fb      	b.n	25058 <ble_sm_ltk_req_neg_reply_tx+0x24>

00025060 <ble_sm_ltk_restore_exec>:
{
   25060:	b570      	push	{r4, r5, r6, lr}
   25062:	4606      	mov	r6, r0
   25064:	460c      	mov	r4, r1
    if (value_sec != NULL) {
   25066:	b1e2      	cbz	r2, 250a2 <ble_sm_ltk_restore_exec+0x42>
   25068:	4615      	mov	r5, r2
        res->app_status = ble_sm_ltk_req_reply_tx(
   2506a:	f102 0118 	add.w	r1, r2, #24
   2506e:	8940      	ldrh	r0, [r0, #10]
   25070:	f7ff ffab 	bl	24fca <ble_sm_ltk_req_reply_tx>
   25074:	6020      	str	r0, [r4, #0]
        if (res->app_status == 0) {
   25076:	b958      	cbnz	r0, 25090 <ble_sm_ltk_restore_exec+0x30>
            proc->key_size = value_sec->key_size;
   25078:	79eb      	ldrb	r3, [r5, #7]
   2507a:	73f3      	strb	r3, [r6, #15]
            if (value_sec->authenticated) {
   2507c:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
   25080:	f013 0f02 	tst.w	r3, #2
   25084:	d008      	beq.n	25098 <ble_sm_ltk_restore_exec+0x38>
                proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   25086:	7a33      	ldrb	r3, [r6, #8]
   25088:	f043 0308 	orr.w	r3, r3, #8
   2508c:	7233      	strb	r3, [r6, #8]
   2508e:	e003      	b.n	25098 <ble_sm_ltk_restore_exec+0x38>
            res->enc_cb = 1;
   25090:	7d23      	ldrb	r3, [r4, #20]
   25092:	f043 0302 	orr.w	r3, r3, #2
   25096:	7523      	strb	r3, [r4, #20]
    if (res->app_status == 0) {
   25098:	6823      	ldr	r3, [r4, #0]
   2509a:	b90b      	cbnz	r3, 250a0 <ble_sm_ltk_restore_exec+0x40>
        proc->state = BLE_SM_PROC_STATE_ENC_RESTORE;
   2509c:	2306      	movs	r3, #6
   2509e:	7373      	strb	r3, [r6, #13]
}
   250a0:	bd70      	pop	{r4, r5, r6, pc}
        ble_sm_ltk_req_neg_reply_tx(proc->conn_handle);
   250a2:	8940      	ldrh	r0, [r0, #10]
   250a4:	f7ff ffc6 	bl	25034 <ble_sm_ltk_req_neg_reply_tx>
        res->app_status = BLE_HS_ENOENT;
   250a8:	2305      	movs	r3, #5
   250aa:	6023      	str	r3, [r4, #0]
   250ac:	e7f4      	b.n	25098 <ble_sm_ltk_restore_exec+0x38>

000250ae <ble_sm_random_exec>:
{
   250ae:	b508      	push	{r3, lr}
    if (proc->flags & BLE_SM_PROC_F_SC) {
   250b0:	7a03      	ldrb	r3, [r0, #8]
   250b2:	f013 0f10 	tst.w	r3, #16
   250b6:	d000      	beq.n	250ba <ble_sm_random_exec+0xc>
}
   250b8:	bd08      	pop	{r3, pc}
        ble_sm_lgcy_random_exec(proc, res);
   250ba:	f001 f966 	bl	2638a <ble_sm_lgcy_random_exec>
}
   250be:	e7fb      	b.n	250b8 <ble_sm_random_exec+0xa>

000250c0 <ble_sm_confirm_exec>:
{
   250c0:	b508      	push	{r3, lr}
    if (!(proc->flags & BLE_SM_PROC_F_SC)) {
   250c2:	7a03      	ldrb	r3, [r0, #8]
   250c4:	f013 0f10 	tst.w	r3, #16
   250c8:	d000      	beq.n	250cc <ble_sm_confirm_exec+0xc>
}
   250ca:	bd08      	pop	{r3, pc}
        ble_sm_lgcy_confirm_exec(proc, res);
   250cc:	f001 f90c 	bl	262e8 <ble_sm_lgcy_confirm_exec>
}
   250d0:	e7fb      	b.n	250ca <ble_sm_confirm_exec+0xa>

000250d2 <ble_sm_proc_set_timer>:
{
   250d2:	b510      	push	{r4, lr}
   250d4:	4604      	mov	r4, r0
   250d6:	f7f1 fa63 	bl	165a0 <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   250da:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   250de:	6060      	str	r0, [r4, #4]
    ble_hs_timer_resched();
   250e0:	f7fc fe02 	bl	21ce8 <ble_hs_timer_resched>
}
   250e4:	bd10      	pop	{r4, pc}
	...

000250e8 <ble_sm_extract_expired>:
{
   250e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   250ea:	4605      	mov	r5, r0
   250ec:	f7f1 fa58 	bl	165a0 <os_time_get>
   250f0:	4606      	mov	r6, r0
    STAILQ_INIT(dst_list);
   250f2:	2400      	movs	r4, #0
   250f4:	602c      	str	r4, [r5, #0]
   250f6:	606d      	str	r5, [r5, #4]
    ble_hs_lock();
   250f8:	f7fc fd04 	bl	21b04 <ble_hs_lock>
    proc = STAILQ_FIRST(&ble_sm_procs);
   250fc:	4b15      	ldr	r3, [pc, #84]	; (25154 <ble_sm_extract_expired+0x6c>)
   250fe:	681b      	ldr	r3, [r3, #0]
    next_exp_in = BLE_HS_FOREVER;
   25100:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    while (proc != NULL) {
   25104:	e00a      	b.n	2511c <ble_sm_extract_expired+0x34>
            if (prev == NULL) {
   25106:	b19c      	cbz	r4, 25130 <ble_sm_extract_expired+0x48>
                STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   25108:	6822      	ldr	r2, [r4, #0]
   2510a:	6812      	ldr	r2, [r2, #0]
   2510c:	6022      	str	r2, [r4, #0]
   2510e:	b1ba      	cbz	r2, 25140 <ble_sm_extract_expired+0x58>
            STAILQ_INSERT_HEAD(dst_list, proc, next);
   25110:	682a      	ldr	r2, [r5, #0]
   25112:	601a      	str	r2, [r3, #0]
   25114:	b1ba      	cbz	r2, 25146 <ble_sm_extract_expired+0x5e>
   25116:	602b      	str	r3, [r5, #0]
                next_exp_in = time_diff;
   25118:	461c      	mov	r4, r3
   2511a:	4603      	mov	r3, r0
    while (proc != NULL) {
   2511c:	b1ab      	cbz	r3, 2514a <ble_sm_extract_expired+0x62>
        next = STAILQ_NEXT(proc, next);
   2511e:	6818      	ldr	r0, [r3, #0]
        time_diff = proc->exp_os_ticks - now;
   25120:	685a      	ldr	r2, [r3, #4]
   25122:	1b92      	subs	r2, r2, r6
        if (time_diff <= 0) {
   25124:	2a00      	cmp	r2, #0
   25126:	ddee      	ble.n	25106 <ble_sm_extract_expired+0x1e>
            if (time_diff < next_exp_in) {
   25128:	4297      	cmp	r7, r2
   2512a:	ddf5      	ble.n	25118 <ble_sm_extract_expired+0x30>
                next_exp_in = time_diff;
   2512c:	4617      	mov	r7, r2
   2512e:	e7f3      	b.n	25118 <ble_sm_extract_expired+0x30>
                STAILQ_REMOVE_HEAD(&ble_sm_procs, next);
   25130:	4908      	ldr	r1, [pc, #32]	; (25154 <ble_sm_extract_expired+0x6c>)
   25132:	680a      	ldr	r2, [r1, #0]
   25134:	6812      	ldr	r2, [r2, #0]
   25136:	600a      	str	r2, [r1, #0]
   25138:	2a00      	cmp	r2, #0
   2513a:	d1e9      	bne.n	25110 <ble_sm_extract_expired+0x28>
   2513c:	6049      	str	r1, [r1, #4]
   2513e:	e7e7      	b.n	25110 <ble_sm_extract_expired+0x28>
                STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   25140:	4a04      	ldr	r2, [pc, #16]	; (25154 <ble_sm_extract_expired+0x6c>)
   25142:	6054      	str	r4, [r2, #4]
   25144:	e7e4      	b.n	25110 <ble_sm_extract_expired+0x28>
            STAILQ_INSERT_HEAD(dst_list, proc, next);
   25146:	606b      	str	r3, [r5, #4]
   25148:	e7e5      	b.n	25116 <ble_sm_extract_expired+0x2e>
    ble_hs_unlock();
   2514a:	f7fc fcdf 	bl	21b0c <ble_hs_unlock>
}
   2514e:	4638      	mov	r0, r7
   25150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25152:	bf00      	nop
   25154:	100041c0 	.word	0x100041c0

00025158 <ble_sm_pair_fail_tx>:
{
   25158:	b530      	push	{r4, r5, lr}
   2515a:	b083      	sub	sp, #12
   2515c:	4604      	mov	r4, r0
   2515e:	460d      	mov	r5, r1
    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_FAIL, sizeof(*cmd), &txom);
   25160:	aa01      	add	r2, sp, #4
   25162:	2101      	movs	r1, #1
   25164:	2005      	movs	r0, #5
   25166:	f001 f813 	bl	26190 <ble_sm_cmd_get>
    if (cmd) {
   2516a:	b130      	cbz	r0, 2517a <ble_sm_pair_fail_tx+0x22>
        cmd->reason = reason;
   2516c:	7005      	strb	r5, [r0, #0]
        rc = ble_sm_tx(conn_handle, txom);
   2516e:	9901      	ldr	r1, [sp, #4]
   25170:	4620      	mov	r0, r4
   25172:	f001 f827 	bl	261c4 <ble_sm_tx>
        if (rc) {
   25176:	4603      	mov	r3, r0
   25178:	b908      	cbnz	r0, 2517e <ble_sm_pair_fail_tx+0x26>
}
   2517a:	b003      	add	sp, #12
   2517c:	bd30      	pop	{r4, r5, pc}
            BLE_HS_LOG(ERROR, "ble_sm_pair_fail_tx failed, rc = %d\n", rc);
   2517e:	4a03      	ldr	r2, [pc, #12]	; (2518c <ble_sm_pair_fail_tx+0x34>)
   25180:	2103      	movs	r1, #3
   25182:	2004      	movs	r0, #4
   25184:	f7f4 fae8 	bl	19758 <modlog_printf>
}
   25188:	e7f7      	b.n	2517a <ble_sm_pair_fail_tx+0x22>
   2518a:	bf00      	nop
   2518c:	000312f0 	.word	0x000312f0

00025190 <ble_sm_persist_keys>:
{
   25190:	b570      	push	{r4, r5, r6, lr}
   25192:	b09a      	sub	sp, #104	; 0x68
   25194:	4604      	mov	r4, r0
    ble_hs_lock();
   25196:	f7fc fcb5 	bl	21b04 <ble_hs_lock>
    conn = ble_hs_conn_find(proc->conn_handle);
   2519a:	8960      	ldrh	r0, [r4, #10]
   2519c:	f7fd fb0e 	bl	227bc <ble_hs_conn_find>
   251a0:	4605      	mov	r5, r0
    if (proc->peer_keys.addr_valid) {
   251a2:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
   251a6:	f013 0f10 	tst.w	r3, #16
   251aa:	d053      	beq.n	25254 <ble_sm_persist_keys+0xc4>
        peer_addr.type = proc->peer_keys.addr_type;
   251ac:	f894 60c8 	ldrb.w	r6, [r4, #200]	; 0xc8
   251b0:	f88d 6008 	strb.w	r6, [sp, #8]
        memcpy(peer_addr.val, proc->peer_keys.addr, sizeof peer_addr.val);
   251b4:	4623      	mov	r3, r4
   251b6:	f853 2ffa 	ldr.w	r2, [r3, #250]!
   251ba:	f8cd 2009 	str.w	r2, [sp, #9]
   251be:	889b      	ldrh	r3, [r3, #4]
   251c0:	f8ad 300d 	strh.w	r3, [sp, #13]
        conn->bhc_peer_addr = peer_addr;
   251c4:	9802      	ldr	r0, [sp, #8]
   251c6:	f8c5 0007 	str.w	r0, [r5, #7]
   251ca:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   251ce:	f89d 300e 	ldrb.w	r3, [sp, #14]
   251d2:	f8a5 200b 	strh.w	r2, [r5, #11]
   251d6:	736b      	strb	r3, [r5, #13]
        if (memcmp(BLE_ADDR_ANY->val, &conn->bhc_peer_rpa_addr.val, 6) != 0) {
   251d8:	2300      	movs	r3, #0
   251da:	9318      	str	r3, [sp, #96]	; 0x60
   251dc:	f8cd 3063 	str.w	r3, [sp, #99]	; 0x63
   251e0:	2206      	movs	r2, #6
   251e2:	f105 0116 	add.w	r1, r5, #22
   251e6:	f10d 0061 	add.w	r0, sp, #97	; 0x61
   251ea:	f7f1 fc4f 	bl	16a8c <memcmp>
   251ee:	b128      	cbz	r0, 251fc <ble_sm_persist_keys+0x6c>
            switch (peer_addr.type) {
   251f0:	2e03      	cmp	r6, #3
   251f2:	d808      	bhi.n	25206 <ble_sm_persist_keys+0x76>
   251f4:	e8df f006 	tbb	[pc, r6]
   251f8:	2b052b05 	.word	0x2b052b05
    ble_hs_unlock();
   251fc:	f7fc fc86 	bl	21b0c <ble_hs_unlock>
    if (identity_ev) {
   25200:	e006      	b.n	25210 <ble_sm_persist_keys+0x80>
                conn->bhc_peer_addr.type = BLE_ADDR_PUBLIC_ID;
   25202:	2302      	movs	r3, #2
   25204:	71eb      	strb	r3, [r5, #7]
    ble_hs_unlock();
   25206:	f7fc fc81 	bl	21b0c <ble_hs_unlock>
        ble_gap_identity_event(proc->conn_handle);
   2520a:	8960      	ldrh	r0, [r4, #10]
   2520c:	f7fa fa7a 	bl	1f704 <ble_gap_identity_event>
    authenticated = proc->flags & BLE_SM_PROC_F_AUTHENTICATED;
   25210:	7a25      	ldrb	r5, [r4, #8]
   25212:	f005 0608 	and.w	r6, r5, #8
    sc = proc->flags & BLE_SM_PROC_F_SC;
   25216:	f005 0510 	and.w	r5, r5, #16
    ble_sm_fill_store_value(&peer_addr, authenticated, sc, &proc->our_keys,
   2521a:	ab04      	add	r3, sp, #16
   2521c:	9300      	str	r3, [sp, #0]
   2521e:	f104 0370 	add.w	r3, r4, #112	; 0x70
   25222:	462a      	mov	r2, r5
   25224:	4631      	mov	r1, r6
   25226:	a802      	add	r0, sp, #8
   25228:	f7ff fc88 	bl	24b3c <ble_sm_fill_store_value>
    ble_store_write_our_sec(&value_sec);
   2522c:	a804      	add	r0, sp, #16
   2522e:	f001 f9a6 	bl	2657e <ble_store_write_our_sec>
    ble_sm_fill_store_value(&peer_addr, authenticated, sc, &proc->peer_keys,
   25232:	ab04      	add	r3, sp, #16
   25234:	9300      	str	r3, [sp, #0]
   25236:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   2523a:	462a      	mov	r2, r5
   2523c:	4631      	mov	r1, r6
   2523e:	a802      	add	r0, sp, #8
   25240:	f7ff fc7c 	bl	24b3c <ble_sm_fill_store_value>
    ble_store_write_peer_sec(&value_sec);
   25244:	a804      	add	r0, sp, #16
   25246:	f001 f9a7 	bl	26598 <ble_store_write_peer_sec>
}
   2524a:	b01a      	add	sp, #104	; 0x68
   2524c:	bd70      	pop	{r4, r5, r6, pc}
                conn->bhc_peer_addr.type = BLE_ADDR_RANDOM_ID;
   2524e:	2303      	movs	r3, #3
   25250:	71eb      	strb	r3, [r5, #7]
                break;
   25252:	e7d8      	b.n	25206 <ble_sm_persist_keys+0x76>
        peer_addr = conn->bhc_peer_addr;
   25254:	4603      	mov	r3, r0
   25256:	f853 0f07 	ldr.w	r0, [r3, #7]!
   2525a:	9002      	str	r0, [sp, #8]
   2525c:	889a      	ldrh	r2, [r3, #4]
   2525e:	799b      	ldrb	r3, [r3, #6]
   25260:	f8ad 200c 	strh.w	r2, [sp, #12]
   25264:	f88d 300e 	strb.w	r3, [sp, #14]
            ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   25268:	79e8      	ldrb	r0, [r5, #7]
   2526a:	f7fe fbaa 	bl	239c2 <ble_hs_misc_peer_addr_type_to_id>
        peer_addr.type =
   2526e:	f88d 0008 	strb.w	r0, [sp, #8]
    ble_hs_unlock();
   25272:	f7fc fc4b 	bl	21b0c <ble_hs_unlock>
    if (identity_ev) {
   25276:	e7cb      	b.n	25210 <ble_sm_persist_keys+0x80>

00025278 <ble_sm_proc_free>:
    if (proc != NULL) {
   25278:	b128      	cbz	r0, 25286 <ble_sm_proc_free+0xe>
{
   2527a:	b508      	push	{r3, lr}
   2527c:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_sm_proc_pool, proc);
   2527e:	4802      	ldr	r0, [pc, #8]	; (25288 <ble_sm_proc_free+0x10>)
   25280:	f7f0 fdfd 	bl	15e7e <os_memblock_put>
}
   25284:	bd08      	pop	{r3, pc}
   25286:	4770      	bx	lr
   25288:	100041a4 	.word	0x100041a4

0002528c <ble_sm_proc_alloc>:
{
   2528c:	b510      	push	{r4, lr}
    proc = os_memblock_get(&ble_sm_proc_pool);
   2528e:	4806      	ldr	r0, [pc, #24]	; (252a8 <ble_sm_proc_alloc+0x1c>)
   25290:	f7f0 fdcd 	bl	15e2e <os_memblock_get>
    if (proc != NULL) {
   25294:	4604      	mov	r4, r0
   25296:	b120      	cbz	r0, 252a2 <ble_sm_proc_alloc+0x16>
        memset(proc, 0, sizeof *proc);
   25298:	f44f 7280 	mov.w	r2, #256	; 0x100
   2529c:	2100      	movs	r1, #0
   2529e:	f7f1 fc3e 	bl	16b1e <memset>
}
   252a2:	4620      	mov	r0, r4
   252a4:	bd10      	pop	{r4, pc}
   252a6:	bf00      	nop
   252a8:	100041a4 	.word	0x100041a4

000252ac <ble_sm_retrieve_ltk>:
{
   252ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   252ae:	b089      	sub	sp, #36	; 0x24
   252b0:	4606      	mov	r6, r0
   252b2:	4615      	mov	r5, r2
   252b4:	461c      	mov	r4, r3
   252b6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    memset(&key_sec, 0, sizeof key_sec);
   252b8:	2220      	movs	r2, #32
   252ba:	2100      	movs	r1, #0
   252bc:	4668      	mov	r0, sp
   252be:	f7f1 fc2e 	bl	16b1e <memset>
    key_sec.peer_addr.type = peer_addr_type;
   252c2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   252c6:	f88d 3000 	strb.w	r3, [sp]
    memcpy(key_sec.peer_addr.val, peer_addr, 6);
   252ca:	683b      	ldr	r3, [r7, #0]
   252cc:	f8cd 3001 	str.w	r3, [sp, #1]
   252d0:	88bb      	ldrh	r3, [r7, #4]
   252d2:	f8ad 3005 	strh.w	r3, [sp, #5]
    key_sec.ediv = ediv;
   252d6:	f8ad 6008 	strh.w	r6, [sp, #8]
    key_sec.rand_num = rand;
   252da:	9504      	str	r5, [sp, #16]
   252dc:	9405      	str	r4, [sp, #20]
    key_sec.ediv_rand_present = 1;
   252de:	2301      	movs	r3, #1
   252e0:	f88d 3018 	strb.w	r3, [sp, #24]
    rc = ble_store_read_our_sec(&key_sec, value_sec);
   252e4:	9910      	ldr	r1, [sp, #64]	; 0x40
   252e6:	4668      	mov	r0, sp
   252e8:	f001 f942 	bl	26570 <ble_store_read_our_sec>
}
   252ec:	b009      	add	sp, #36	; 0x24
   252ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000252f0 <ble_sm_fail_rx>:
 *****************************************************************************/

static void
ble_sm_fail_rx(uint16_t conn_handle, struct os_mbuf **om,
               struct ble_sm_result *res)
{
   252f0:	b538      	push	{r3, r4, r5, lr}
   252f2:	460d      	mov	r5, r1
   252f4:	4614      	mov	r4, r2
    struct ble_sm_pair_fail *cmd;

    res->enc_cb = 1;
   252f6:	7d13      	ldrb	r3, [r2, #20]
   252f8:	f043 0302 	orr.w	r3, r3, #2
   252fc:	7513      	strb	r3, [r2, #20]

    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   252fe:	2101      	movs	r1, #1
   25300:	4628      	mov	r0, r5
   25302:	f7fe fb02 	bl	2390a <ble_hs_mbuf_pullup_base>
   25306:	6020      	str	r0, [r4, #0]
    if (res->app_status == 0) {
   25308:	b930      	cbnz	r0, 25318 <ble_sm_fail_rx+0x28>
        cmd = (struct ble_sm_pair_fail *)(*om)->om_data;
   2530a:	682b      	ldr	r3, [r5, #0]
   2530c:	681b      	ldr	r3, [r3, #0]

        res->app_status = BLE_HS_SM_PEER_ERR(cmd->reason);
   2530e:	781b      	ldrb	r3, [r3, #0]
   25310:	b10b      	cbz	r3, 25316 <ble_sm_fail_rx+0x26>
   25312:	f503 60a0 	add.w	r0, r3, #1280	; 0x500
   25316:	6020      	str	r0, [r4, #0]
    }
}
   25318:	bd38      	pop	{r3, r4, r5, pc}

0002531a <ble_sm_read_bond>:
{
   2531a:	b510      	push	{r4, lr}
   2531c:	b094      	sub	sp, #80	; 0x50
   2531e:	460c      	mov	r4, r1
    rc = ble_gap_conn_find(conn_handle, &desc);
   25320:	a901      	add	r1, sp, #4
   25322:	f7f9 fc65 	bl	1ebf0 <ble_gap_conn_find>
    if (rc != 0) {
   25326:	b108      	cbz	r0, 2532c <ble_sm_read_bond+0x12>
}
   25328:	b014      	add	sp, #80	; 0x50
   2532a:	bd10      	pop	{r4, pc}
    memset(&key_sec, 0, sizeof key_sec);
   2532c:	900d      	str	r0, [sp, #52]	; 0x34
   2532e:	900e      	str	r0, [sp, #56]	; 0x38
   25330:	900f      	str	r0, [sp, #60]	; 0x3c
   25332:	9010      	str	r0, [sp, #64]	; 0x40
   25334:	9011      	str	r0, [sp, #68]	; 0x44
   25336:	9012      	str	r0, [sp, #72]	; 0x48
   25338:	9013      	str	r0, [sp, #76]	; 0x4c
    key_sec.peer_addr = desc.peer_id_addr;
   2533a:	f8dd 000f 	ldr.w	r0, [sp, #15]
   2533e:	900c      	str	r0, [sp, #48]	; 0x30
   25340:	f8bd 2013 	ldrh.w	r2, [sp, #19]
   25344:	f89d 3015 	ldrb.w	r3, [sp, #21]
   25348:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
   2534c:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    rc = ble_store_read_peer_sec(&key_sec, out_bond);
   25350:	4621      	mov	r1, r4
   25352:	a80c      	add	r0, sp, #48	; 0x30
   25354:	f001 f919 	bl	2658a <ble_store_read_peer_sec>
    return rc;
   25358:	e7e6      	b.n	25328 <ble_sm_read_bond+0xe>

0002535a <ble_sm_chk_repeat_pairing>:
{
   2535a:	b570      	push	{r4, r5, r6, lr}
   2535c:	b096      	sub	sp, #88	; 0x58
   2535e:	4604      	mov	r4, r0
   25360:	460d      	mov	r5, r1
   25362:	4616      	mov	r6, r2
        rc = ble_sm_read_bond(conn_handle, &bond);
   25364:	4669      	mov	r1, sp
   25366:	4620      	mov	r0, r4
   25368:	f7ff ffd7 	bl	2531a <ble_sm_read_bond>
        switch (rc) {
   2536c:	4603      	mov	r3, r0
   2536e:	b120      	cbz	r0, 2537a <ble_sm_chk_repeat_pairing+0x20>
   25370:	2805      	cmp	r0, #5
   25372:	d02f      	beq.n	253d4 <ble_sm_chk_repeat_pairing+0x7a>
}
   25374:	4618      	mov	r0, r3
   25376:	b016      	add	sp, #88	; 0x58
   25378:	bd70      	pop	{r4, r5, r6, pc}
        rp.conn_handle = conn_handle;
   2537a:	f8ad 4050 	strh.w	r4, [sp, #80]	; 0x50
        rp.cur_key_size = bond.key_size;
   2537e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   25382:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
        rp.cur_authenticated = bond.authenticated;
   25386:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   2538a:	f3c2 0140 	ubfx	r1, r2, #1, #1
   2538e:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   25392:	f361 0300 	bfi	r3, r1, #0, #1
        rp.cur_sc = bond.sc;
   25396:	f3c2 0280 	ubfx	r2, r2, #2, #1
   2539a:	f362 0341 	bfi	r3, r2, #1, #1
   2539e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
        rp.new_key_size = key_size;
   253a2:	f88d 6054 	strb.w	r6, [sp, #84]	; 0x54
        rp.new_authenticated = !!(proc_flags & BLE_SM_PROC_F_AUTHENTICATED);
   253a6:	f3c5 02c0 	ubfx	r2, r5, #3, #1
   253aa:	f89d 3055 	ldrb.w	r3, [sp, #85]	; 0x55
   253ae:	f362 0300 	bfi	r3, r2, #0, #1
        rp.new_sc = !!(proc_flags & BLE_SM_PROC_F_SC);
   253b2:	f3c5 1200 	ubfx	r2, r5, #4, #1
   253b6:	f362 0341 	bfi	r3, r2, #1, #1
        rp.new_bonding = !!(proc_flags & BLE_SM_PROC_F_BONDING);
   253ba:	f3c5 1240 	ubfx	r2, r5, #5, #1
   253be:	f362 0382 	bfi	r3, r2, #2, #1
   253c2:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
        rc = ble_gap_repeat_pairing_event(&rp);
   253c6:	a814      	add	r0, sp, #80	; 0x50
   253c8:	f7fa f9af 	bl	1f72a <ble_gap_repeat_pairing_event>
    } while (rc == BLE_GAP_REPEAT_PAIRING_RETRY);
   253cc:	2801      	cmp	r0, #1
   253ce:	d0c9      	beq.n	25364 <ble_sm_chk_repeat_pairing+0xa>
    return BLE_HS_EALREADY;
   253d0:	2302      	movs	r3, #2
   253d2:	e7cf      	b.n	25374 <ble_sm_chk_repeat_pairing+0x1a>
        switch (rc) {
   253d4:	2300      	movs	r3, #0
   253d6:	e7cd      	b.n	25374 <ble_sm_chk_repeat_pairing+0x1a>

000253d8 <ble_sm_gen_pair_rand>:
{
   253d8:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_rand(pair_rand, 16);
   253da:	2110      	movs	r1, #16
   253dc:	f7fe f90c 	bl	235f8 <ble_hs_hci_util_rand>
}
   253e0:	bd08      	pop	{r3, pc}

000253e2 <ble_sm_ia_ra>:
{
   253e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   253e6:	b088      	sub	sp, #32
   253e8:	4605      	mov	r5, r0
   253ea:	460f      	mov	r7, r1
   253ec:	4614      	mov	r4, r2
   253ee:	461e      	mov	r6, r3
   253f0:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    conn = ble_hs_conn_find_assert(proc->conn_handle);
   253f4:	8940      	ldrh	r0, [r0, #10]
   253f6:	f7fd f9f9 	bl	227ec <ble_hs_conn_find_assert>
    ble_hs_conn_addrs(conn, &addrs);
   253fa:	a901      	add	r1, sp, #4
   253fc:	f7fd fa16 	bl	2282c <ble_hs_conn_addrs>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   25400:	7a2b      	ldrb	r3, [r5, #8]
   25402:	f013 0f01 	tst.w	r3, #1
   25406:	d016      	beq.n	25436 <ble_sm_ia_ra+0x54>
        *out_iat = addrs.our_ota_addr.type;
   25408:	f89d 3012 	ldrb.w	r3, [sp, #18]
   2540c:	703b      	strb	r3, [r7, #0]
        memcpy(out_ia, addrs.our_ota_addr.val, 6);
   2540e:	f8dd 3013 	ldr.w	r3, [sp, #19]
   25412:	6023      	str	r3, [r4, #0]
   25414:	f8bd 3017 	ldrh.w	r3, [sp, #23]
   25418:	80a3      	strh	r3, [r4, #4]
        *out_rat = addrs.peer_ota_addr.type;
   2541a:	f89d 3019 	ldrb.w	r3, [sp, #25]
   2541e:	7033      	strb	r3, [r6, #0]
        memcpy(out_ra, addrs.peer_ota_addr.val, 6);
   25420:	f8dd 301a 	ldr.w	r3, [sp, #26]
   25424:	f8c8 3000 	str.w	r3, [r8]
   25428:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   2542c:	f8a8 3004 	strh.w	r3, [r8, #4]
}
   25430:	b008      	add	sp, #32
   25432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *out_iat = addrs.peer_ota_addr.type;
   25436:	f89d 3019 	ldrb.w	r3, [sp, #25]
   2543a:	703b      	strb	r3, [r7, #0]
        memcpy(out_ia, addrs.peer_ota_addr.val, 6);
   2543c:	f8dd 301a 	ldr.w	r3, [sp, #26]
   25440:	6023      	str	r3, [r4, #0]
   25442:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   25446:	80a3      	strh	r3, [r4, #4]
        *out_rat = addrs.our_ota_addr.type;
   25448:	f89d 3012 	ldrb.w	r3, [sp, #18]
   2544c:	7033      	strb	r3, [r6, #0]
        memcpy(out_ra, addrs.our_ota_addr.val, 6);
   2544e:	f8dd 3013 	ldr.w	r3, [sp, #19]
   25452:	f8c8 3000 	str.w	r3, [r8]
   25456:	f8bd 3017 	ldrh.w	r3, [sp, #23]
   2545a:	f8a8 3004 	strh.w	r3, [r8, #4]
}
   2545e:	e7e7      	b.n	25430 <ble_sm_ia_ra+0x4e>

00025460 <ble_sm_proc_find>:
{
   25460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25464:	4607      	mov	r7, r0
   25466:	460e      	mov	r6, r1
   25468:	4615      	mov	r5, r2
   2546a:	4699      	mov	r9, r3
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   2546c:	4b0b      	ldr	r3, [pc, #44]	; (2549c <ble_sm_proc_find+0x3c>)
   2546e:	681c      	ldr	r4, [r3, #0]
    prev = NULL;
   25470:	f04f 0800 	mov.w	r8, #0
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   25474:	b174      	cbz	r4, 25494 <ble_sm_proc_find+0x34>
        if (ble_sm_proc_matches(proc, conn_handle, state, is_initiator)) {
   25476:	462b      	mov	r3, r5
   25478:	4632      	mov	r2, r6
   2547a:	4639      	mov	r1, r7
   2547c:	4620      	mov	r0, r4
   2547e:	f7ff f9fb 	bl	24878 <ble_sm_proc_matches>
   25482:	b910      	cbnz	r0, 2548a <ble_sm_proc_find+0x2a>
        prev = proc;
   25484:	46a0      	mov	r8, r4
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   25486:	6824      	ldr	r4, [r4, #0]
   25488:	e7f4      	b.n	25474 <ble_sm_proc_find+0x14>
            if (out_prev != NULL) {
   2548a:	f1b9 0f00 	cmp.w	r9, #0
   2548e:	d001      	beq.n	25494 <ble_sm_proc_find+0x34>
                *out_prev = prev;
   25490:	f8c9 8000 	str.w	r8, [r9]
}
   25494:	4620      	mov	r0, r4
   25496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2549a:	bf00      	nop
   2549c:	100041c0 	.word	0x100041c0

000254a0 <ble_sm_sign_info_rx>:
{
   254a0:	b570      	push	{r4, r5, r6, lr}
   254a2:	4606      	mov	r6, r0
   254a4:	460d      	mov	r5, r1
   254a6:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   254a8:	2110      	movs	r1, #16
   254aa:	4628      	mov	r0, r5
   254ac:	f7fe fa2d 	bl	2390a <ble_hs_mbuf_pullup_base>
   254b0:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   254b2:	b130      	cbz	r0, 254c2 <ble_sm_sign_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   254b4:	2308      	movs	r3, #8
   254b6:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   254b8:	7d23      	ldrb	r3, [r4, #20]
   254ba:	f043 0302 	orr.w	r3, r3, #2
   254be:	7523      	strb	r3, [r4, #20]
}
   254c0:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_sign_info *)(*om)->om_data;
   254c2:	682b      	ldr	r3, [r5, #0]
   254c4:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   254c6:	f7fc fb1d 	bl	21b04 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   254ca:	2300      	movs	r3, #0
   254cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   254d0:	2107      	movs	r1, #7
   254d2:	4630      	mov	r0, r6
   254d4:	f7ff ffc4 	bl	25460 <ble_sm_proc_find>
    if (proc == NULL) {
   254d8:	4603      	mov	r3, r0
   254da:	b1e0      	cbz	r0, 25516 <ble_sm_sign_info_rx+0x76>
        proc->rx_key_flags &= ~BLE_SM_KE_F_SIGN_INFO;
   254dc:	7b82      	ldrb	r2, [r0, #14]
   254de:	f022 0210 	bic.w	r2, r2, #16
   254e2:	7382      	strb	r2, [r0, #14]
        memcpy(proc->peer_keys.csrk, cmd->sig_key, 16);
   254e4:	682e      	ldr	r6, [r5, #0]
   254e6:	6868      	ldr	r0, [r5, #4]
   254e8:	68a9      	ldr	r1, [r5, #8]
   254ea:	68ea      	ldr	r2, [r5, #12]
   254ec:	f8c3 60ea 	str.w	r6, [r3, #234]	; 0xea
   254f0:	f8c3 00ee 	str.w	r0, [r3, #238]	; 0xee
   254f4:	f8c3 10f2 	str.w	r1, [r3, #242]	; 0xf2
   254f8:	f8c3 20f6 	str.w	r2, [r3, #246]	; 0xf6
        proc->peer_keys.csrk_valid = 1;
   254fc:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
   25500:	f042 0208 	orr.w	r2, r2, #8
   25504:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        ble_sm_key_rxed(proc, res);
   25508:	4621      	mov	r1, r4
   2550a:	4618      	mov	r0, r3
   2550c:	f7ff fd05 	bl	24f1a <ble_sm_key_rxed>
    ble_hs_unlock();
   25510:	f7fc fafc 	bl	21b0c <ble_hs_unlock>
   25514:	e7d4      	b.n	254c0 <ble_sm_sign_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   25516:	2305      	movs	r3, #5
   25518:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2551a:	2308      	movs	r3, #8
   2551c:	7123      	strb	r3, [r4, #4]
   2551e:	e7f7      	b.n	25510 <ble_sm_sign_info_rx+0x70>

00025520 <ble_sm_id_addr_info_rx>:
{
   25520:	b570      	push	{r4, r5, r6, lr}
   25522:	4606      	mov	r6, r0
   25524:	460d      	mov	r5, r1
   25526:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   25528:	2107      	movs	r1, #7
   2552a:	4628      	mov	r0, r5
   2552c:	f7fe f9ed 	bl	2390a <ble_hs_mbuf_pullup_base>
   25530:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   25532:	b130      	cbz	r0, 25542 <ble_sm_id_addr_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   25534:	2308      	movs	r3, #8
   25536:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   25538:	7d23      	ldrb	r3, [r4, #20]
   2553a:	f043 0302 	orr.w	r3, r3, #2
   2553e:	7523      	strb	r3, [r4, #20]
}
   25540:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_id_addr_info *)(*om)->om_data;
   25542:	682b      	ldr	r3, [r5, #0]
   25544:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   25546:	f7fc fadd 	bl	21b04 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   2554a:	2300      	movs	r3, #0
   2554c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25550:	2107      	movs	r1, #7
   25552:	4630      	mov	r0, r6
   25554:	f7ff ff84 	bl	25460 <ble_sm_proc_find>
    if (proc == NULL) {
   25558:	b1d0      	cbz	r0, 25590 <ble_sm_id_addr_info_rx+0x70>
        proc->rx_key_flags &= ~BLE_SM_KE_F_ADDR_INFO;
   2555a:	7b82      	ldrb	r2, [r0, #14]
   2555c:	f022 0208 	bic.w	r2, r2, #8
   25560:	7382      	strb	r2, [r0, #14]
        proc->peer_keys.addr_valid = 1;
   25562:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
   25566:	f042 0210 	orr.w	r2, r2, #16
   2556a:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
        proc->peer_keys.addr_type = cmd->addr_type;
   2556e:	782a      	ldrb	r2, [r5, #0]
   25570:	f880 20c8 	strb.w	r2, [r0, #200]	; 0xc8
        memcpy(proc->peer_keys.addr, cmd->bd_addr, 6);
   25574:	462a      	mov	r2, r5
   25576:	f852 1f01 	ldr.w	r1, [r2, #1]!
   2557a:	f8c0 10fa 	str.w	r1, [r0, #250]	; 0xfa
   2557e:	8892      	ldrh	r2, [r2, #4]
   25580:	f8a0 20fe 	strh.w	r2, [r0, #254]	; 0xfe
        ble_sm_key_rxed(proc, res);
   25584:	4621      	mov	r1, r4
   25586:	f7ff fcc8 	bl	24f1a <ble_sm_key_rxed>
    ble_hs_unlock();
   2558a:	f7fc fabf 	bl	21b0c <ble_hs_unlock>
   2558e:	e7d7      	b.n	25540 <ble_sm_id_addr_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   25590:	2305      	movs	r3, #5
   25592:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   25594:	2308      	movs	r3, #8
   25596:	7123      	strb	r3, [r4, #4]
   25598:	e7f7      	b.n	2558a <ble_sm_id_addr_info_rx+0x6a>

0002559a <ble_sm_id_info_rx>:
{
   2559a:	b570      	push	{r4, r5, r6, lr}
   2559c:	4606      	mov	r6, r0
   2559e:	460d      	mov	r5, r1
   255a0:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   255a2:	2110      	movs	r1, #16
   255a4:	4628      	mov	r0, r5
   255a6:	f7fe f9b0 	bl	2390a <ble_hs_mbuf_pullup_base>
   255aa:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   255ac:	b130      	cbz	r0, 255bc <ble_sm_id_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   255ae:	2308      	movs	r3, #8
   255b0:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   255b2:	7d23      	ldrb	r3, [r4, #20]
   255b4:	f043 0302 	orr.w	r3, r3, #2
   255b8:	7523      	strb	r3, [r4, #20]
}
   255ba:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_id_info *)(*om)->om_data;
   255bc:	682b      	ldr	r3, [r5, #0]
   255be:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   255c0:	f7fc faa0 	bl	21b04 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   255c4:	2300      	movs	r3, #0
   255c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   255ca:	2107      	movs	r1, #7
   255cc:	4630      	mov	r0, r6
   255ce:	f7ff ff47 	bl	25460 <ble_sm_proc_find>
    if (proc == NULL) {
   255d2:	4603      	mov	r3, r0
   255d4:	b1e0      	cbz	r0, 25610 <ble_sm_id_info_rx+0x76>
        proc->rx_key_flags &= ~BLE_SM_KE_F_ID_INFO;
   255d6:	7b82      	ldrb	r2, [r0, #14]
   255d8:	f022 0204 	bic.w	r2, r2, #4
   255dc:	7382      	strb	r2, [r0, #14]
        memcpy(proc->peer_keys.irk, cmd->irk, 16);
   255de:	682e      	ldr	r6, [r5, #0]
   255e0:	6868      	ldr	r0, [r5, #4]
   255e2:	68a9      	ldr	r1, [r5, #8]
   255e4:	68ea      	ldr	r2, [r5, #12]
   255e6:	f8c3 60da 	str.w	r6, [r3, #218]	; 0xda
   255ea:	f8c3 00de 	str.w	r0, [r3, #222]	; 0xde
   255ee:	f8c3 10e2 	str.w	r1, [r3, #226]	; 0xe2
   255f2:	f8c3 20e6 	str.w	r2, [r3, #230]	; 0xe6
        proc->peer_keys.irk_valid = 1;
   255f6:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
   255fa:	f042 0204 	orr.w	r2, r2, #4
   255fe:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        ble_sm_key_rxed(proc, res);
   25602:	4621      	mov	r1, r4
   25604:	4618      	mov	r0, r3
   25606:	f7ff fc88 	bl	24f1a <ble_sm_key_rxed>
    ble_hs_unlock();
   2560a:	f7fc fa7f 	bl	21b0c <ble_hs_unlock>
   2560e:	e7d4      	b.n	255ba <ble_sm_id_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   25610:	2305      	movs	r3, #5
   25612:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   25614:	2308      	movs	r3, #8
   25616:	7123      	strb	r3, [r4, #4]
   25618:	e7f7      	b.n	2560a <ble_sm_id_info_rx+0x70>

0002561a <ble_sm_master_id_rx>:
{
   2561a:	b570      	push	{r4, r5, r6, lr}
   2561c:	4606      	mov	r6, r0
   2561e:	460d      	mov	r5, r1
   25620:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   25622:	210a      	movs	r1, #10
   25624:	4628      	mov	r0, r5
   25626:	f7fe f970 	bl	2390a <ble_hs_mbuf_pullup_base>
   2562a:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   2562c:	b130      	cbz	r0, 2563c <ble_sm_master_id_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2562e:	2308      	movs	r3, #8
   25630:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   25632:	7d23      	ldrb	r3, [r4, #20]
   25634:	f043 0302 	orr.w	r3, r3, #2
   25638:	7523      	strb	r3, [r4, #20]
}
   2563a:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_master_id *)(*om)->om_data;
   2563c:	682b      	ldr	r3, [r5, #0]
   2563e:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   25640:	f7fc fa60 	bl	21b04 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   25644:	2300      	movs	r3, #0
   25646:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2564a:	2107      	movs	r1, #7
   2564c:	4630      	mov	r0, r6
   2564e:	f7ff ff07 	bl	25460 <ble_sm_proc_find>
    if (proc == NULL) {
   25652:	b1d0      	cbz	r0, 2568a <ble_sm_master_id_rx+0x70>
        proc->rx_key_flags &= ~BLE_SM_KE_F_MASTER_ID;
   25654:	7b82      	ldrb	r2, [r0, #14]
   25656:	f022 0202 	bic.w	r2, r2, #2
   2565a:	7382      	strb	r2, [r0, #14]
        proc->peer_keys.ediv_rand_valid = 1;
   2565c:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
   25660:	f042 0202 	orr.w	r2, r2, #2
   25664:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
        proc->peer_keys.ediv = le16toh(cmd->ediv);
   25668:	882a      	ldrh	r2, [r5, #0]
   2566a:	f8a0 20ba 	strh.w	r2, [r0, #186]	; 0xba
        proc->peer_keys.rand_val = le64toh(cmd->rand_val);
   2566e:	f8d5 1002 	ldr.w	r1, [r5, #2]
   25672:	f8d5 2006 	ldr.w	r2, [r5, #6]
   25676:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
   2567a:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
        ble_sm_key_rxed(proc, res);
   2567e:	4621      	mov	r1, r4
   25680:	f7ff fc4b 	bl	24f1a <ble_sm_key_rxed>
    ble_hs_unlock();
   25684:	f7fc fa42 	bl	21b0c <ble_hs_unlock>
   25688:	e7d7      	b.n	2563a <ble_sm_master_id_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   2568a:	2305      	movs	r3, #5
   2568c:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2568e:	2308      	movs	r3, #8
   25690:	7123      	strb	r3, [r4, #4]
   25692:	e7f7      	b.n	25684 <ble_sm_master_id_rx+0x6a>

00025694 <ble_sm_enc_info_rx>:
{
   25694:	b570      	push	{r4, r5, r6, lr}
   25696:	4606      	mov	r6, r0
   25698:	460d      	mov	r5, r1
   2569a:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   2569c:	2110      	movs	r1, #16
   2569e:	4628      	mov	r0, r5
   256a0:	f7fe f933 	bl	2390a <ble_hs_mbuf_pullup_base>
   256a4:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   256a6:	b130      	cbz	r0, 256b6 <ble_sm_enc_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   256a8:	2308      	movs	r3, #8
   256aa:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   256ac:	7d23      	ldrb	r3, [r4, #20]
   256ae:	f043 0302 	orr.w	r3, r3, #2
   256b2:	7523      	strb	r3, [r4, #20]
}
   256b4:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_enc_info *)(*om)->om_data;
   256b6:	682b      	ldr	r3, [r5, #0]
   256b8:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   256ba:	f7fc fa23 	bl	21b04 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   256be:	2300      	movs	r3, #0
   256c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   256c4:	2107      	movs	r1, #7
   256c6:	4630      	mov	r0, r6
   256c8:	f7ff feca 	bl	25460 <ble_sm_proc_find>
    if (proc == NULL) {
   256cc:	4603      	mov	r3, r0
   256ce:	b1f8      	cbz	r0, 25710 <ble_sm_enc_info_rx+0x7c>
        proc->rx_key_flags &= ~BLE_SM_KE_F_ENC_INFO;
   256d0:	7b82      	ldrb	r2, [r0, #14]
   256d2:	f022 0201 	bic.w	r2, r2, #1
   256d6:	7382      	strb	r2, [r0, #14]
        proc->peer_keys.ltk_valid = 1;
   256d8:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
   256dc:	f042 0201 	orr.w	r2, r2, #1
   256e0:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
        memcpy(proc->peer_keys.ltk, cmd->ltk, 16);
   256e4:	682e      	ldr	r6, [r5, #0]
   256e6:	6868      	ldr	r0, [r5, #4]
   256e8:	68a9      	ldr	r1, [r5, #8]
   256ea:	68ea      	ldr	r2, [r5, #12]
   256ec:	f8c3 60ca 	str.w	r6, [r3, #202]	; 0xca
   256f0:	f8c3 00ce 	str.w	r0, [r3, #206]	; 0xce
   256f4:	f8c3 10d2 	str.w	r1, [r3, #210]	; 0xd2
   256f8:	f8c3 20d6 	str.w	r2, [r3, #214]	; 0xd6
        proc->peer_keys.key_size = proc->key_size;
   256fc:	7bda      	ldrb	r2, [r3, #15]
   256fe:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
        ble_sm_key_rxed(proc, res);
   25702:	4621      	mov	r1, r4
   25704:	4618      	mov	r0, r3
   25706:	f7ff fc08 	bl	24f1a <ble_sm_key_rxed>
    ble_hs_unlock();
   2570a:	f7fc f9ff 	bl	21b0c <ble_hs_unlock>
   2570e:	e7d1      	b.n	256b4 <ble_sm_enc_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   25710:	2305      	movs	r3, #5
   25712:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   25714:	2308      	movs	r3, #8
   25716:	7123      	strb	r3, [r4, #4]
   25718:	e7f7      	b.n	2570a <ble_sm_enc_info_rx+0x76>

0002571a <ble_sm_pair_req_rx>:
{
   2571a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2571e:	b082      	sub	sp, #8
   25720:	4606      	mov	r6, r0
   25722:	460d      	mov	r5, r1
   25724:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*req));
   25726:	2106      	movs	r1, #6
   25728:	4628      	mov	r0, r5
   2572a:	f7fe f8ee 	bl	2390a <ble_hs_mbuf_pullup_base>
   2572e:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   25730:	b110      	cbz	r0, 25738 <ble_sm_pair_req_rx+0x1e>
}
   25732:	b002      	add	sp, #8
   25734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    req = (struct ble_sm_pair_cmd *)(*om)->om_data;
   25738:	682b      	ldr	r3, [r5, #0]
   2573a:	681f      	ldr	r7, [r3, #0]
    ble_hs_lock();
   2573c:	f7fc f9e2 	bl	21b04 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, &prev);
   25740:	ab01      	add	r3, sp, #4
   25742:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25746:	21ff      	movs	r1, #255	; 0xff
   25748:	4630      	mov	r0, r6
   2574a:	f7ff fe89 	bl	25460 <ble_sm_proc_find>
    if (proc != NULL) {
   2574e:	4605      	mov	r5, r0
   25750:	b180      	cbz	r0, 25774 <ble_sm_pair_req_rx+0x5a>
        if (proc->state != BLE_SM_PROC_STATE_SEC_REQ) {
   25752:	7b43      	ldrb	r3, [r0, #13]
   25754:	2b08      	cmp	r3, #8
   25756:	d007      	beq.n	25768 <ble_sm_pair_req_rx+0x4e>
            res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   25758:	2308      	movs	r3, #8
   2575a:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_UNSPECIFIED);
   2575c:	f44f 6381 	mov.w	r3, #1032	; 0x408
   25760:	6023      	str	r3, [r4, #0]
            ble_hs_unlock();
   25762:	f7fc f9d3 	bl	21b0c <ble_hs_unlock>
            return;
   25766:	e7e4      	b.n	25732 <ble_sm_pair_req_rx+0x18>
        ble_sm_proc_remove(proc, prev);
   25768:	9901      	ldr	r1, [sp, #4]
   2576a:	f7ff f871 	bl	24850 <ble_sm_proc_remove>
        ble_sm_proc_free(proc);
   2576e:	4628      	mov	r0, r5
   25770:	f7ff fd82 	bl	25278 <ble_sm_proc_free>
    ble_hs_unlock();
   25774:	f7fc f9ca 	bl	21b0c <ble_hs_unlock>
    rc = ble_sm_chk_store_overflow(conn_handle);
   25778:	4630      	mov	r0, r6
   2577a:	f7ff f8d2 	bl	24922 <ble_sm_chk_store_overflow>
    if (rc != 0) {
   2577e:	b118      	cbz	r0, 25788 <ble_sm_pair_req_rx+0x6e>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   25780:	2208      	movs	r2, #8
   25782:	7122      	strb	r2, [r4, #4]
        res->app_status = rc;
   25784:	6020      	str	r0, [r4, #0]
        return;
   25786:	e7d4      	b.n	25732 <ble_sm_pair_req_rx+0x18>
    ble_hs_lock();
   25788:	f7fc f9bc 	bl	21b04 <ble_hs_lock>
    proc = ble_sm_proc_alloc();
   2578c:	f7ff fd7e 	bl	2528c <ble_sm_proc_alloc>
    if (proc != NULL) {
   25790:	4605      	mov	r5, r0
   25792:	2800      	cmp	r0, #0
   25794:	d048      	beq.n	25828 <ble_sm_pair_req_rx+0x10e>
        proc->conn_handle = conn_handle;
   25796:	8146      	strh	r6, [r0, #10]
        proc->state = BLE_SM_PROC_STATE_PAIR;
   25798:	2300      	movs	r3, #0
   2579a:	7343      	strb	r3, [r0, #13]
        ble_sm_insert(proc);
   2579c:	f7ff f888 	bl	248b0 <ble_sm_insert>
        proc->pair_req[0] = BLE_SM_OP_PAIR_REQ;
   257a0:	2301      	movs	r3, #1
   257a2:	742b      	strb	r3, [r5, #16]
        memcpy(proc->pair_req + 1, req, sizeof(*req));
   257a4:	683b      	ldr	r3, [r7, #0]
   257a6:	f8c5 3011 	str.w	r3, [r5, #17]
   257aa:	88bb      	ldrh	r3, [r7, #4]
   257ac:	f8a5 3015 	strh.w	r3, [r5, #21]
        conn = ble_hs_conn_find_assert(proc->conn_handle);
   257b0:	8968      	ldrh	r0, [r5, #10]
   257b2:	f7fd f81b 	bl	227ec <ble_hs_conn_find_assert>
        if (conn->bhc_flags & BLE_HS_CONN_F_MASTER) {
   257b6:	f890 8028 	ldrb.w	r8, [r0, #40]	; 0x28
   257ba:	f018 0801 	ands.w	r8, r8, #1
   257be:	d007      	beq.n	257d0 <ble_sm_pair_req_rx+0xb6>
            res->sm_err = BLE_SM_ERR_CMD_NOT_SUPP;
   257c0:	2307      	movs	r3, #7
   257c2:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CMD_NOT_SUPP);
   257c4:	f240 4307 	movw	r3, #1031	; 0x407
   257c8:	6023      	str	r3, [r4, #0]
    key_size = 0;
   257ca:	2500      	movs	r5, #0
    proc_flags = 0;
   257cc:	46a8      	mov	r8, r5
   257ce:	e02d      	b.n	2582c <ble_sm_pair_req_rx+0x112>
        } else if (req->max_enc_key_size < BLE_SM_PAIR_KEY_SZ_MIN) {
   257d0:	78fb      	ldrb	r3, [r7, #3]
   257d2:	2b06      	cmp	r3, #6
   257d4:	d806      	bhi.n	257e4 <ble_sm_pair_req_rx+0xca>
            res->sm_err = BLE_SM_ERR_ENC_KEY_SZ;
   257d6:	2306      	movs	r3, #6
   257d8:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_ENC_KEY_SZ);
   257da:	f240 4306 	movw	r3, #1030	; 0x406
   257de:	6023      	str	r3, [r4, #0]
    key_size = 0;
   257e0:	4645      	mov	r5, r8
   257e2:	e023      	b.n	2582c <ble_sm_pair_req_rx+0x112>
        } else if (req->max_enc_key_size > BLE_SM_PAIR_KEY_SZ_MAX) {
   257e4:	2b10      	cmp	r3, #16
   257e6:	d906      	bls.n	257f6 <ble_sm_pair_req_rx+0xdc>
            res->sm_err = BLE_SM_ERR_INVAL;
   257e8:	230a      	movs	r3, #10
   257ea:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_INVAL);
   257ec:	f240 430a 	movw	r3, #1034	; 0x40a
   257f0:	6023      	str	r3, [r4, #0]
    key_size = 0;
   257f2:	4645      	mov	r5, r8
   257f4:	e01a      	b.n	2582c <ble_sm_pair_req_rx+0x112>
        } else if (!ble_sm_verify_auth_requirements(req->authreq)) {
   257f6:	78b8      	ldrb	r0, [r7, #2]
   257f8:	f7ff f8de 	bl	249b8 <ble_sm_verify_auth_requirements>
   257fc:	b930      	cbnz	r0, 2580c <ble_sm_pair_req_rx+0xf2>
            res->sm_err = BLE_SM_ERR_AUTHREQ;
   257fe:	2303      	movs	r3, #3
   25800:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_AUTHREQ);
   25802:	f240 4303 	movw	r3, #1027	; 0x403
   25806:	6023      	str	r3, [r4, #0]
    key_size = 0;
   25808:	4645      	mov	r5, r8
   2580a:	e00f      	b.n	2582c <ble_sm_pair_req_rx+0x112>
            ble_sm_pair_rsp_fill(proc);
   2580c:	4628      	mov	r0, r5
   2580e:	f7ff f8bf 	bl	24990 <ble_sm_pair_rsp_fill>
            ble_sm_pair_cfg(proc);
   25812:	4628      	mov	r0, r5
   25814:	f7ff f8ed 	bl	249f2 <ble_sm_pair_cfg>
            proc_flags = proc->flags;
   25818:	f895 8008 	ldrb.w	r8, [r5, #8]
            key_size = proc->key_size;
   2581c:	7bed      	ldrb	r5, [r5, #15]
            res->execute = 1;
   2581e:	7d23      	ldrb	r3, [r4, #20]
   25820:	f043 0301 	orr.w	r3, r3, #1
   25824:	7523      	strb	r3, [r4, #20]
   25826:	e001      	b.n	2582c <ble_sm_pair_req_rx+0x112>
    key_size = 0;
   25828:	2500      	movs	r5, #0
    proc_flags = 0;
   2582a:	46a8      	mov	r8, r5
    ble_hs_unlock();
   2582c:	f7fc f96e 	bl	21b0c <ble_hs_unlock>
    if (res->app_status == 0) {
   25830:	6823      	ldr	r3, [r4, #0]
   25832:	2b00      	cmp	r3, #0
   25834:	f47f af7d 	bne.w	25732 <ble_sm_pair_req_rx+0x18>
        rc = ble_sm_chk_repeat_pairing(conn_handle, proc_flags, key_size);
   25838:	462a      	mov	r2, r5
   2583a:	4641      	mov	r1, r8
   2583c:	4630      	mov	r0, r6
   2583e:	f7ff fd8c 	bl	2535a <ble_sm_chk_repeat_pairing>
        if (rc != 0) {
   25842:	2800      	cmp	r0, #0
   25844:	f43f af75 	beq.w	25732 <ble_sm_pair_req_rx+0x18>
            res->app_status = rc;
   25848:	6020      	str	r0, [r4, #0]
            res->execute = 0;
   2584a:	7d23      	ldrb	r3, [r4, #20]
   2584c:	f36f 0300 	bfc	r3, #0, #1
   25850:	7523      	strb	r3, [r4, #20]
   25852:	e76e      	b.n	25732 <ble_sm_pair_req_rx+0x18>

00025854 <ble_sm_ioact_state>:
    switch (action) {
   25854:	2804      	cmp	r0, #4
   25856:	d00c      	beq.n	25872 <ble_sm_ioact_state+0x1e>
   25858:	d807      	bhi.n	2586a <ble_sm_ioact_state+0x16>
   2585a:	3801      	subs	r0, #1
   2585c:	b2c0      	uxtb	r0, r0
   2585e:	2802      	cmp	r0, #2
   25860:	d801      	bhi.n	25866 <ble_sm_ioact_state+0x12>
        return BLE_SM_PROC_STATE_CONFIRM;
   25862:	2001      	movs	r0, #1
   25864:	4770      	bx	lr
    switch (action) {
   25866:	20ff      	movs	r0, #255	; 0xff
   25868:	4770      	bx	lr
   2586a:	2805      	cmp	r0, #5
   2586c:	d103      	bne.n	25876 <ble_sm_ioact_state+0x22>
        return BLE_SM_PROC_STATE_RANDOM;
   2586e:	2002      	movs	r0, #2
   25870:	4770      	bx	lr
        return BLE_SM_PROC_STATE_DHKEY_CHECK;
   25872:	200a      	movs	r0, #10
   25874:	4770      	bx	lr
    switch (action) {
   25876:	20ff      	movs	r0, #255	; 0xff
}
   25878:	4770      	bx	lr

0002587a <ble_sm_proc_can_advance>:
{
   2587a:	b510      	push	{r4, lr}
   2587c:	b082      	sub	sp, #8
   2587e:	4604      	mov	r4, r0
    rc = ble_sm_io_action(proc, &ioact);
   25880:	f10d 0107 	add.w	r1, sp, #7
   25884:	f7ff f8ab 	bl	249de <ble_sm_io_action>
    if (ble_sm_ioact_state(ioact) != proc->state) {
   25888:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2588c:	f7ff ffe2 	bl	25854 <ble_sm_ioact_state>
   25890:	7b63      	ldrb	r3, [r4, #13]
   25892:	4298      	cmp	r0, r3
   25894:	d106      	bne.n	258a4 <ble_sm_proc_can_advance+0x2a>
    if (proc->flags & BLE_SM_PROC_F_IO_INJECTED &&
   25896:	7a23      	ldrb	r3, [r4, #8]
   25898:	f003 0306 	and.w	r3, r3, #6
   2589c:	2b06      	cmp	r3, #6
   2589e:	d004      	beq.n	258aa <ble_sm_proc_can_advance+0x30>
    return 0;
   258a0:	2000      	movs	r0, #0
   258a2:	e000      	b.n	258a6 <ble_sm_proc_can_advance+0x2c>
        return 1;
   258a4:	2001      	movs	r0, #1
}
   258a6:	b002      	add	sp, #8
   258a8:	bd10      	pop	{r4, pc}
        return 1;
   258aa:	2001      	movs	r0, #1
   258ac:	e7fb      	b.n	258a6 <ble_sm_proc_can_advance+0x2c>

000258ae <ble_sm_confirm_rx>:
{
   258ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   258b0:	b083      	sub	sp, #12
   258b2:	4606      	mov	r6, r0
   258b4:	460d      	mov	r5, r1
   258b6:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   258b8:	2110      	movs	r1, #16
   258ba:	4628      	mov	r0, r5
   258bc:	f7fe f825 	bl	2390a <ble_hs_mbuf_pullup_base>
   258c0:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   258c2:	b138      	cbz	r0, 258d4 <ble_sm_confirm_rx+0x26>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   258c4:	2308      	movs	r3, #8
   258c6:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   258c8:	7d23      	ldrb	r3, [r4, #20]
   258ca:	f043 0302 	orr.w	r3, r3, #2
   258ce:	7523      	strb	r3, [r4, #20]
}
   258d0:	b003      	add	sp, #12
   258d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_pair_confirm *)(*om)->om_data;
   258d4:	682b      	ldr	r3, [r5, #0]
   258d6:	681f      	ldr	r7, [r3, #0]
    ble_hs_lock();
   258d8:	f7fc f914 	bl	21b04 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_CONFIRM, -1, NULL);
   258dc:	2300      	movs	r3, #0
   258de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   258e2:	2101      	movs	r1, #1
   258e4:	4630      	mov	r0, r6
   258e6:	f7ff fdbb 	bl	25460 <ble_sm_proc_find>
    if (proc == NULL) {
   258ea:	4605      	mov	r5, r0
   258ec:	b1b0      	cbz	r0, 2591c <ble_sm_confirm_rx+0x6e>
        memcpy(proc->confirm_peer, cmd->value, 16);
   258ee:	6838      	ldr	r0, [r7, #0]
   258f0:	6879      	ldr	r1, [r7, #4]
   258f2:	68ba      	ldr	r2, [r7, #8]
   258f4:	68fb      	ldr	r3, [r7, #12]
   258f6:	f8c5 002e 	str.w	r0, [r5, #46]	; 0x2e
   258fa:	f8c5 1032 	str.w	r1, [r5, #50]	; 0x32
   258fe:	f8c5 2036 	str.w	r2, [r5, #54]	; 0x36
   25902:	f8c5 303a 	str.w	r3, [r5, #58]	; 0x3a
        if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   25906:	7a2b      	ldrb	r3, [r5, #8]
   25908:	f013 0f01 	tst.w	r3, #1
   2590c:	d00b      	beq.n	25926 <ble_sm_confirm_rx+0x78>
            proc->state = BLE_SM_PROC_STATE_RANDOM;
   2590e:	2302      	movs	r3, #2
   25910:	736b      	strb	r3, [r5, #13]
            res->execute = 1;
   25912:	7d23      	ldrb	r3, [r4, #20]
   25914:	f043 0301 	orr.w	r3, r3, #1
   25918:	7523      	strb	r3, [r4, #20]
   2591a:	e001      	b.n	25920 <ble_sm_confirm_rx+0x72>
        res->app_status = BLE_HS_ENOENT;
   2591c:	2305      	movs	r3, #5
   2591e:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   25920:	f7fc f8f4 	bl	21b0c <ble_hs_unlock>
   25924:	e7d4      	b.n	258d0 <ble_sm_confirm_rx+0x22>
            rc = ble_sm_io_action(proc, &ioact);
   25926:	f10d 0107 	add.w	r1, sp, #7
   2592a:	4628      	mov	r0, r5
   2592c:	f7ff f857 	bl	249de <ble_sm_io_action>
            if (ble_sm_ioact_state(ioact) == proc->state) {
   25930:	f89d 0007 	ldrb.w	r0, [sp, #7]
   25934:	f7ff ff8e 	bl	25854 <ble_sm_ioact_state>
   25938:	7b6b      	ldrb	r3, [r5, #13]
   2593a:	4298      	cmp	r0, r3
   2593c:	d009      	beq.n	25952 <ble_sm_confirm_rx+0xa4>
            if (ble_sm_proc_can_advance(proc)) {
   2593e:	4628      	mov	r0, r5
   25940:	f7ff ff9b 	bl	2587a <ble_sm_proc_can_advance>
   25944:	2800      	cmp	r0, #0
   25946:	d0eb      	beq.n	25920 <ble_sm_confirm_rx+0x72>
                res->execute = 1;
   25948:	7d23      	ldrb	r3, [r4, #20]
   2594a:	f043 0301 	orr.w	r3, r3, #1
   2594e:	7523      	strb	r3, [r4, #20]
   25950:	e7e6      	b.n	25920 <ble_sm_confirm_rx+0x72>
                proc->flags |= BLE_SM_PROC_F_ADVANCE_ON_IO;
   25952:	7a2b      	ldrb	r3, [r5, #8]
   25954:	f043 0304 	orr.w	r3, r3, #4
   25958:	722b      	strb	r3, [r5, #8]
   2595a:	e7f0      	b.n	2593e <ble_sm_confirm_rx+0x90>

0002595c <ble_sm_pair_rsp_rx>:
{
   2595c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2595e:	b083      	sub	sp, #12
   25960:	4606      	mov	r6, r0
   25962:	460d      	mov	r5, r1
   25964:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*rsp));
   25966:	2106      	movs	r1, #6
   25968:	4628      	mov	r0, r5
   2596a:	f7fd ffce 	bl	2390a <ble_hs_mbuf_pullup_base>
   2596e:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   25970:	b128      	cbz	r0, 2597e <ble_sm_pair_rsp_rx+0x22>
        res->enc_cb = 1;
   25972:	7d23      	ldrb	r3, [r4, #20]
   25974:	f043 0302 	orr.w	r3, r3, #2
   25978:	7523      	strb	r3, [r4, #20]
}
   2597a:	b003      	add	sp, #12
   2597c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rsp = (struct ble_sm_pair_cmd *)(*om)->om_data;
   2597e:	682b      	ldr	r3, [r5, #0]
   25980:	681f      	ldr	r7, [r3, #0]
    ble_hs_lock();
   25982:	f7fc f8bf 	bl	21b04 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_PAIR, 1, NULL);
   25986:	2300      	movs	r3, #0
   25988:	2201      	movs	r2, #1
   2598a:	4619      	mov	r1, r3
   2598c:	4630      	mov	r0, r6
   2598e:	f7ff fd67 	bl	25460 <ble_sm_proc_find>
    if (proc != NULL) {
   25992:	4605      	mov	r5, r0
   25994:	b168      	cbz	r0, 259b2 <ble_sm_pair_rsp_rx+0x56>
        proc->pair_rsp[0] = BLE_SM_OP_PAIR_RSP;
   25996:	2302      	movs	r3, #2
   25998:	75c3      	strb	r3, [r0, #23]
        memcpy(proc->pair_rsp + 1, rsp, sizeof(*rsp));
   2599a:	683b      	ldr	r3, [r7, #0]
   2599c:	6183      	str	r3, [r0, #24]
   2599e:	88bb      	ldrh	r3, [r7, #4]
   259a0:	8383      	strh	r3, [r0, #28]
        if (rsp->max_enc_key_size < BLE_SM_PAIR_KEY_SZ_MIN) {
   259a2:	78fb      	ldrb	r3, [r7, #3]
   259a4:	2b06      	cmp	r3, #6
   259a6:	d807      	bhi.n	259b8 <ble_sm_pair_rsp_rx+0x5c>
            res->sm_err = BLE_SM_ERR_ENC_KEY_SZ;
   259a8:	2306      	movs	r3, #6
   259aa:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_ENC_KEY_SZ);
   259ac:	f240 4306 	movw	r3, #1030	; 0x406
   259b0:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   259b2:	f7fc f8ab 	bl	21b0c <ble_hs_unlock>
   259b6:	e7e0      	b.n	2597a <ble_sm_pair_rsp_rx+0x1e>
        } else if (rsp->max_enc_key_size > BLE_SM_PAIR_KEY_SZ_MAX) {
   259b8:	2b10      	cmp	r3, #16
   259ba:	d905      	bls.n	259c8 <ble_sm_pair_rsp_rx+0x6c>
            res->sm_err = BLE_SM_ERR_INVAL;
   259bc:	230a      	movs	r3, #10
   259be:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_INVAL);
   259c0:	f240 430a 	movw	r3, #1034	; 0x40a
   259c4:	6023      	str	r3, [r4, #0]
   259c6:	e7f4      	b.n	259b2 <ble_sm_pair_rsp_rx+0x56>
        } else if (!ble_sm_verify_auth_requirements(rsp->authreq)) {
   259c8:	78b8      	ldrb	r0, [r7, #2]
   259ca:	f7fe fff5 	bl	249b8 <ble_sm_verify_auth_requirements>
   259ce:	b928      	cbnz	r0, 259dc <ble_sm_pair_rsp_rx+0x80>
            res->sm_err = BLE_SM_ERR_AUTHREQ;
   259d0:	2303      	movs	r3, #3
   259d2:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_AUTHREQ);
   259d4:	f240 4303 	movw	r3, #1027	; 0x403
   259d8:	6023      	str	r3, [r4, #0]
   259da:	e7ea      	b.n	259b2 <ble_sm_pair_rsp_rx+0x56>
            ble_sm_pair_cfg(proc);
   259dc:	4628      	mov	r0, r5
   259de:	f7ff f808 	bl	249f2 <ble_sm_pair_cfg>
            rc = ble_sm_io_action(proc, &ioact);
   259e2:	f10d 0107 	add.w	r1, sp, #7
   259e6:	4628      	mov	r0, r5
   259e8:	f7fe fff9 	bl	249de <ble_sm_io_action>
            if (rc != 0) {
   259ec:	b148      	cbz	r0, 25a02 <ble_sm_pair_rsp_rx+0xa6>
                res->sm_err = BLE_SM_ERR_AUTHREQ;
   259ee:	2303      	movs	r3, #3
   259f0:	7123      	strb	r3, [r4, #4]
                res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_AUTHREQ);
   259f2:	f240 4303 	movw	r3, #1027	; 0x403
   259f6:	6023      	str	r3, [r4, #0]
                res->enc_cb = 1;
   259f8:	7d23      	ldrb	r3, [r4, #20]
   259fa:	f043 0302 	orr.w	r3, r3, #2
   259fe:	7523      	strb	r3, [r4, #20]
   25a00:	e7d7      	b.n	259b2 <ble_sm_pair_rsp_rx+0x56>
                proc->state = ble_sm_state_after_pair(proc);
   25a02:	4628      	mov	r0, r5
   25a04:	f7fe ff99 	bl	2493a <ble_sm_state_after_pair>
   25a08:	4606      	mov	r6, r0
   25a0a:	7368      	strb	r0, [r5, #13]
                if (ble_sm_ioact_state(ioact) == proc->state) {
   25a0c:	f89d 7007 	ldrb.w	r7, [sp, #7]
   25a10:	4638      	mov	r0, r7
   25a12:	f7ff ff1f 	bl	25854 <ble_sm_ioact_state>
   25a16:	42b0      	cmp	r0, r6
   25a18:	d009      	beq.n	25a2e <ble_sm_pair_rsp_rx+0xd2>
                if (ble_sm_proc_can_advance(proc)) {
   25a1a:	4628      	mov	r0, r5
   25a1c:	f7ff ff2d 	bl	2587a <ble_sm_proc_can_advance>
   25a20:	2800      	cmp	r0, #0
   25a22:	d0c6      	beq.n	259b2 <ble_sm_pair_rsp_rx+0x56>
                    res->execute = 1;
   25a24:	7d23      	ldrb	r3, [r4, #20]
   25a26:	f043 0301 	orr.w	r3, r3, #1
   25a2a:	7523      	strb	r3, [r4, #20]
   25a2c:	e7c1      	b.n	259b2 <ble_sm_pair_rsp_rx+0x56>
                    res->passkey_params.action = ioact;
   25a2e:	7227      	strb	r7, [r4, #8]
   25a30:	e7f3      	b.n	25a1a <ble_sm_pair_rsp_rx+0xbe>

00025a32 <ble_sm_process_result>:
{
   25a32:	b5f0      	push	{r4, r5, r6, r7, lr}
   25a34:	b083      	sub	sp, #12
   25a36:	4607      	mov	r7, r0
   25a38:	460c      	mov	r4, r1
    rm = 0;
   25a3a:	2600      	movs	r6, #0
   25a3c:	e032      	b.n	25aa4 <ble_sm_process_result+0x72>
                ble_sm_exec(proc, res, res->state_arg);
   25a3e:	6922      	ldr	r2, [r4, #16]
   25a40:	4621      	mov	r1, r4
   25a42:	f7ff f843 	bl	24acc <ble_sm_exec>
   25a46:	e03c      	b.n	25ac2 <ble_sm_process_result+0x90>
                rm = 1;
   25a48:	2601      	movs	r6, #1
   25a4a:	e042      	b.n	25ad2 <ble_sm_process_result+0xa0>
                ble_sm_proc_set_timer(proc);
   25a4c:	4628      	mov	r0, r5
   25a4e:	f7ff fb40 	bl	250d2 <ble_sm_proc_set_timer>
   25a52:	e042      	b.n	25ada <ble_sm_process_result+0xa8>
            ble_sm_pair_fail_tx(conn_handle, res->sm_err);
   25a54:	4638      	mov	r0, r7
   25a56:	f7ff fb7f 	bl	25158 <ble_sm_pair_fail_tx>
   25a5a:	e041      	b.n	25ae0 <ble_sm_process_result+0xae>
            ble_gap_enc_event(conn_handle, res->app_status, res->restore, res->bonded);
   25a5c:	461a      	mov	r2, r3
   25a5e:	f3c3 0380 	ubfx	r3, r3, #2, #1
   25a62:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   25a66:	6821      	ldr	r1, [r4, #0]
   25a68:	4638      	mov	r0, r7
   25a6a:	f7f9 fe26 	bl	1f6ba <ble_gap_enc_event>
   25a6e:	e03e      	b.n	25aee <ble_sm_process_result+0xbc>
            ble_gap_passkey_event(conn_handle, &res->passkey_params);
   25a70:	f104 0108 	add.w	r1, r4, #8
   25a74:	4638      	mov	r0, r7
   25a76:	f7f9 fe07 	bl	1f688 <ble_gap_passkey_event>
   25a7a:	e03d      	b.n	25af8 <ble_sm_process_result+0xc6>
            ble_sm_persist_keys(proc);
   25a7c:	4628      	mov	r0, r5
   25a7e:	f7ff fb87 	bl	25190 <ble_sm_persist_keys>
        if (rm) {
   25a82:	2e00      	cmp	r6, #0
   25a84:	d142      	bne.n	25b0c <ble_sm_process_result+0xda>
        if (!res->execute) {
   25a86:	7d23      	ldrb	r3, [r4, #20]
   25a88:	f013 0f01 	tst.w	r3, #1
   25a8c:	d041      	beq.n	25b12 <ble_sm_process_result+0xe0>
        memset(res, 0, sizeof *res);
   25a8e:	2300      	movs	r3, #0
   25a90:	6023      	str	r3, [r4, #0]
   25a92:	6063      	str	r3, [r4, #4]
   25a94:	60a3      	str	r3, [r4, #8]
   25a96:	60e3      	str	r3, [r4, #12]
   25a98:	6123      	str	r3, [r4, #16]
   25a9a:	6163      	str	r3, [r4, #20]
        res->execute = 1;
   25a9c:	7d23      	ldrb	r3, [r4, #20]
   25a9e:	f043 0301 	orr.w	r3, r3, #1
   25aa2:	7523      	strb	r3, [r4, #20]
        ble_hs_lock();
   25aa4:	f7fc f82e 	bl	21b04 <ble_hs_lock>
        proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1,
   25aa8:	ab01      	add	r3, sp, #4
   25aaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25aae:	21ff      	movs	r1, #255	; 0xff
   25ab0:	4638      	mov	r0, r7
   25ab2:	f7ff fcd5 	bl	25460 <ble_sm_proc_find>
        if (proc != NULL) {
   25ab6:	4605      	mov	r5, r0
   25ab8:	b178      	cbz	r0, 25ada <ble_sm_process_result+0xa8>
            if (res->execute) {
   25aba:	7d23      	ldrb	r3, [r4, #20]
   25abc:	f013 0f01 	tst.w	r3, #1
   25ac0:	d1bd      	bne.n	25a3e <ble_sm_process_result+0xc>
            if (res->app_status != 0) {
   25ac2:	6823      	ldr	r3, [r4, #0]
   25ac4:	b103      	cbz	r3, 25ac8 <ble_sm_process_result+0x96>
                rm = 1;
   25ac6:	2601      	movs	r6, #1
            if (proc->state == BLE_SM_PROC_STATE_NONE) {
   25ac8:	7b6b      	ldrb	r3, [r5, #13]
   25aca:	2bff      	cmp	r3, #255	; 0xff
   25acc:	d0bc      	beq.n	25a48 <ble_sm_process_result+0x16>
            if (rm) {
   25ace:	2e00      	cmp	r6, #0
   25ad0:	d0bc      	beq.n	25a4c <ble_sm_process_result+0x1a>
                ble_sm_proc_remove(proc, prev);
   25ad2:	9901      	ldr	r1, [sp, #4]
   25ad4:	4628      	mov	r0, r5
   25ad6:	f7fe febb 	bl	24850 <ble_sm_proc_remove>
        if (res->sm_err != 0) {
   25ada:	7921      	ldrb	r1, [r4, #4]
   25adc:	2900      	cmp	r1, #0
   25ade:	d1b9      	bne.n	25a54 <ble_sm_process_result+0x22>
        ble_hs_unlock();
   25ae0:	f7fc f814 	bl	21b0c <ble_hs_unlock>
        if (proc == NULL) {
   25ae4:	b1ad      	cbz	r5, 25b12 <ble_sm_process_result+0xe0>
        if (res->enc_cb) {
   25ae6:	7d23      	ldrb	r3, [r4, #20]
   25ae8:	f013 0f02 	tst.w	r3, #2
   25aec:	d1b6      	bne.n	25a5c <ble_sm_process_result+0x2a>
        if (res->app_status == 0 &&
   25aee:	6823      	ldr	r3, [r4, #0]
   25af0:	b913      	cbnz	r3, 25af8 <ble_sm_process_result+0xc6>
            res->passkey_params.action != BLE_SM_IOACT_NONE) {
   25af2:	7a23      	ldrb	r3, [r4, #8]
        if (res->app_status == 0 &&
   25af4:	2b00      	cmp	r3, #0
   25af6:	d1bb      	bne.n	25a70 <ble_sm_process_result+0x3e>
        if (res->app_status == 0    &&
   25af8:	6823      	ldr	r3, [r4, #0]
   25afa:	2b00      	cmp	r3, #0
   25afc:	d1c1      	bne.n	25a82 <ble_sm_process_result+0x50>
   25afe:	2e00      	cmp	r6, #0
   25b00:	d0bf      	beq.n	25a82 <ble_sm_process_result+0x50>
            proc->flags & BLE_SM_PROC_F_BONDING) {
   25b02:	7a2b      	ldrb	r3, [r5, #8]
            rm                      &&
   25b04:	f013 0f20 	tst.w	r3, #32
   25b08:	d0bb      	beq.n	25a82 <ble_sm_process_result+0x50>
   25b0a:	e7b7      	b.n	25a7c <ble_sm_process_result+0x4a>
            ble_sm_proc_free(proc);
   25b0c:	4628      	mov	r0, r5
   25b0e:	f7ff fbb3 	bl	25278 <ble_sm_proc_free>
}
   25b12:	b003      	add	sp, #12
   25b14:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025b16 <ble_sm_enc_event_rx>:
{
   25b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25b1a:	b088      	sub	sp, #32
   25b1c:	4606      	mov	r6, r0
   25b1e:	460d      	mov	r5, r1
   25b20:	4617      	mov	r7, r2
    memset(&res, 0, sizeof res);
   25b22:	2400      	movs	r4, #0
   25b24:	9402      	str	r4, [sp, #8]
   25b26:	9403      	str	r4, [sp, #12]
   25b28:	9404      	str	r4, [sp, #16]
   25b2a:	9405      	str	r4, [sp, #20]
   25b2c:	9406      	str	r4, [sp, #24]
   25b2e:	9407      	str	r4, [sp, #28]
    ble_hs_lock();
   25b30:	f7fb ffe8 	bl	21b04 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, NULL);
   25b34:	4623      	mov	r3, r4
   25b36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25b3a:	21ff      	movs	r1, #255	; 0xff
   25b3c:	4630      	mov	r0, r6
   25b3e:	f7ff fc8f 	bl	25460 <ble_sm_proc_find>
    if (proc != NULL) {
   25b42:	4604      	mov	r4, r0
   25b44:	2800      	cmp	r0, #0
   25b46:	d03c      	beq.n	25bc2 <ble_sm_enc_event_rx+0xac>
        switch (proc->state) {
   25b48:	7b43      	ldrb	r3, [r0, #13]
   25b4a:	2b05      	cmp	r3, #5
   25b4c:	d00a      	beq.n	25b64 <ble_sm_enc_event_rx+0x4e>
   25b4e:	2b06      	cmp	r3, #6
   25b50:	d024      	beq.n	25b9c <ble_sm_enc_event_rx+0x86>
            proc->state = BLE_SM_PROC_STATE_NONE;
   25b52:	23ff      	movs	r3, #255	; 0xff
   25b54:	7343      	strb	r3, [r0, #13]
            res.sm_err = BLE_SM_ERR_UNSPECIFIED;
   25b56:	2308      	movs	r3, #8
   25b58:	f88d 300c 	strb.w	r3, [sp, #12]
    key_size = 0;
   25b5c:	2300      	movs	r3, #0
    bonded = 0;
   25b5e:	4698      	mov	r8, r3
    authenticated = 0;
   25b60:	461a      	mov	r2, r3
            break;
   25b62:	e031      	b.n	25bc8 <ble_sm_enc_event_rx+0xb2>
            if (evt_status == 0) {
   25b64:	b9b5      	cbnz	r5, 25b94 <ble_sm_enc_event_rx+0x7e>
                proc->state = BLE_SM_PROC_STATE_KEY_EXCH;
   25b66:	2307      	movs	r3, #7
   25b68:	7343      	strb	r3, [r0, #13]
                if (!(proc->flags & BLE_SM_PROC_F_INITIATOR) ||
   25b6a:	7a03      	ldrb	r3, [r0, #8]
   25b6c:	f013 0f01 	tst.w	r3, #1
   25b70:	d001      	beq.n	25b76 <ble_sm_enc_event_rx+0x60>
                    proc->rx_key_flags == 0) {
   25b72:	7b83      	ldrb	r3, [r0, #14]
                if (!(proc->flags & BLE_SM_PROC_F_INITIATOR) ||
   25b74:	b92b      	cbnz	r3, 25b82 <ble_sm_enc_event_rx+0x6c>
                    res.execute = 1;
   25b76:	f89d 301c 	ldrb.w	r3, [sp, #28]
   25b7a:	f043 0301 	orr.w	r3, r3, #1
   25b7e:	f88d 301c 	strb.w	r3, [sp, #28]
                key_size = proc->key_size;
   25b82:	7be3      	ldrb	r3, [r4, #15]
            if (proc->flags & BLE_SM_PROC_F_AUTHENTICATED) {
   25b84:	7a22      	ldrb	r2, [r4, #8]
   25b86:	f012 0f08 	tst.w	r2, #8
   25b8a:	d12c      	bne.n	25be6 <ble_sm_enc_event_rx+0xd0>
    bonded = 0;
   25b8c:	f04f 0800 	mov.w	r8, #0
    authenticated = 0;
   25b90:	4642      	mov	r2, r8
   25b92:	e019      	b.n	25bc8 <ble_sm_enc_event_rx+0xb2>
                proc->state = BLE_SM_PROC_STATE_NONE;
   25b94:	23ff      	movs	r3, #255	; 0xff
   25b96:	7343      	strb	r3, [r0, #13]
    key_size = 0;
   25b98:	2300      	movs	r3, #0
   25b9a:	e7f3      	b.n	25b84 <ble_sm_enc_event_rx+0x6e>
            proc->state = BLE_SM_PROC_STATE_NONE;
   25b9c:	23ff      	movs	r3, #255	; 0xff
   25b9e:	7343      	strb	r3, [r0, #13]
            if (proc->flags & BLE_SM_PROC_F_AUTHENTICATED) {
   25ba0:	7a03      	ldrb	r3, [r0, #8]
   25ba2:	f013 0f08 	tst.w	r3, #8
   25ba6:	d10a      	bne.n	25bbe <ble_sm_enc_event_rx+0xa8>
    authenticated = 0;
   25ba8:	2200      	movs	r2, #0
            res.restore = 1;
   25baa:	f89d 301c 	ldrb.w	r3, [sp, #28]
   25bae:	f043 0308 	orr.w	r3, r3, #8
   25bb2:	f88d 301c 	strb.w	r3, [sp, #28]
            key_size = proc->key_size;
   25bb6:	7be3      	ldrb	r3, [r4, #15]
            bonded = 1;
   25bb8:	f04f 0801 	mov.w	r8, #1
            break;
   25bbc:	e004      	b.n	25bc8 <ble_sm_enc_event_rx+0xb2>
                authenticated = 1;
   25bbe:	2201      	movs	r2, #1
   25bc0:	e7f3      	b.n	25baa <ble_sm_enc_event_rx+0x94>
    key_size = 0;
   25bc2:	2300      	movs	r3, #0
    bonded = 0;
   25bc4:	4698      	mov	r8, r3
    authenticated = 0;
   25bc6:	461a      	mov	r2, r3
    if (evt_status == 0) {
   25bc8:	b18d      	cbz	r5, 25bee <ble_sm_enc_event_rx+0xd8>
    if (proc == NULL || proc->state == BLE_SM_PROC_STATE_NONE) {
   25bca:	b114      	cbz	r4, 25bd2 <ble_sm_enc_event_rx+0xbc>
   25bcc:	7b63      	ldrb	r3, [r4, #13]
   25bce:	2bff      	cmp	r3, #255	; 0xff
   25bd0:	d116      	bne.n	25c00 <ble_sm_enc_event_rx+0xea>
        res.enc_cb = 1;
   25bd2:	f89d 301c 	ldrb.w	r3, [sp, #28]
   25bd6:	f043 0302 	orr.w	r3, r3, #2
   25bda:	f88d 301c 	strb.w	r3, [sp, #28]
        res.app_status = BLE_HS_HCI_ERR(evt_status);
   25bde:	b16d      	cbz	r5, 25bfc <ble_sm_enc_event_rx+0xe6>
   25be0:	f505 7500 	add.w	r5, r5, #512	; 0x200
   25be4:	e00b      	b.n	25bfe <ble_sm_enc_event_rx+0xe8>
    bonded = 0;
   25be6:	f04f 0800 	mov.w	r8, #0
                authenticated = 1;
   25bea:	2201      	movs	r2, #1
   25bec:	e7ec      	b.n	25bc8 <ble_sm_enc_event_rx+0xb2>
        ble_sm_update_sec_state(conn_handle, encrypted, authenticated, bonded,
   25bee:	9300      	str	r3, [sp, #0]
   25bf0:	4643      	mov	r3, r8
   25bf2:	4639      	mov	r1, r7
   25bf4:	4630      	mov	r0, r6
   25bf6:	f7ff f814 	bl	24c22 <ble_sm_update_sec_state>
   25bfa:	e7e6      	b.n	25bca <ble_sm_enc_event_rx+0xb4>
        res.app_status = BLE_HS_HCI_ERR(evt_status);
   25bfc:	2500      	movs	r5, #0
   25bfe:	9502      	str	r5, [sp, #8]
    ble_hs_unlock();
   25c00:	f7fb ff84 	bl	21b0c <ble_hs_unlock>
    res.bonded = bonded;
   25c04:	f89d 301c 	ldrb.w	r3, [sp, #28]
   25c08:	f368 0382 	bfi	r3, r8, #2, #1
   25c0c:	f88d 301c 	strb.w	r3, [sp, #28]
    ble_sm_process_result(conn_handle, &res);
   25c10:	a902      	add	r1, sp, #8
   25c12:	4630      	mov	r0, r6
   25c14:	f7ff ff0d 	bl	25a32 <ble_sm_process_result>
}
   25c18:	b008      	add	sp, #32
   25c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00025c20 <ble_sm_rx>:
    return res.app_status;
}

static int
ble_sm_rx(struct ble_l2cap_chan *chan)
{
   25c20:	b570      	push	{r4, r5, r6, lr}
   25c22:	b088      	sub	sp, #32
   25c24:	4604      	mov	r4, r0
    uint8_t op;
    uint16_t conn_handle;
    struct os_mbuf **om;
    int rc;

    STATS_INC(ble_l2cap_stats, sm_rx);
   25c26:	4a1b      	ldr	r2, [pc, #108]	; (25c94 <ble_sm_rx+0x74>)
   25c28:	6b13      	ldr	r3, [r2, #48]	; 0x30
   25c2a:	3301      	adds	r3, #1
   25c2c:	6313      	str	r3, [r2, #48]	; 0x30

    conn_handle = ble_l2cap_get_conn_handle(chan);
   25c2e:	f7fe fa3c 	bl	240aa <ble_l2cap_get_conn_handle>
    if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   25c32:	f64f 73ff 	movw	r3, #65535	; 0xffff
   25c36:	4298      	cmp	r0, r3
   25c38:	d026      	beq.n	25c88 <ble_sm_rx+0x68>
   25c3a:	4605      	mov	r5, r0
        return BLE_HS_ENOTCONN;
    }

    om = &chan->rx_buf;
   25c3c:	f104 0610 	add.w	r6, r4, #16
    BLE_HS_DBG_ASSERT(*om != NULL);

    rc = os_mbuf_copydata(*om, 0, 1, &op);
   25c40:	f10d 0307 	add.w	r3, sp, #7
   25c44:	2201      	movs	r2, #1
   25c46:	2100      	movs	r1, #0
   25c48:	6920      	ldr	r0, [r4, #16]
   25c4a:	f7ef fdbd 	bl	157c8 <os_mbuf_copydata>
    if (rc != 0) {
   25c4e:	b9e8      	cbnz	r0, 25c8c <ble_sm_rx+0x6c>
        return BLE_HS_EBADDATA;
    }

    /* Strip L2CAP SM header from the front of the mbuf. */
    os_mbuf_adj(*om, 1);
   25c50:	2101      	movs	r1, #1
   25c52:	6920      	ldr	r0, [r4, #16]
   25c54:	f7ef fde5 	bl	15822 <os_mbuf_adj>

    rx_cb = ble_sm_dispatch_get(op);
   25c58:	f89d 0007 	ldrb.w	r0, [sp, #7]
   25c5c:	f7fe fdee 	bl	2483c <ble_sm_dispatch_get>
    if (rx_cb != NULL) {
   25c60:	4604      	mov	r4, r0
   25c62:	b1a8      	cbz	r0, 25c90 <ble_sm_rx+0x70>
        memset(&res, 0, sizeof res);
   25c64:	2300      	movs	r3, #0
   25c66:	9302      	str	r3, [sp, #8]
   25c68:	9303      	str	r3, [sp, #12]
   25c6a:	9304      	str	r3, [sp, #16]
   25c6c:	9305      	str	r3, [sp, #20]
   25c6e:	9306      	str	r3, [sp, #24]
   25c70:	9307      	str	r3, [sp, #28]

        rx_cb(conn_handle, om, &res);
   25c72:	aa02      	add	r2, sp, #8
   25c74:	4631      	mov	r1, r6
   25c76:	4628      	mov	r0, r5
   25c78:	47a0      	blx	r4
        ble_sm_process_result(conn_handle, &res);
   25c7a:	a902      	add	r1, sp, #8
   25c7c:	4628      	mov	r0, r5
   25c7e:	f7ff fed8 	bl	25a32 <ble_sm_process_result>
        rc = res.app_status;
   25c82:	9802      	ldr	r0, [sp, #8]
    } else {
        rc = BLE_HS_ENOTSUP;
    }

    return rc;
}
   25c84:	b008      	add	sp, #32
   25c86:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ENOTCONN;
   25c88:	2007      	movs	r0, #7
   25c8a:	e7fb      	b.n	25c84 <ble_sm_rx+0x64>
        return BLE_HS_EBADDATA;
   25c8c:	200a      	movs	r0, #10
   25c8e:	e7f9      	b.n	25c84 <ble_sm_rx+0x64>
        rc = BLE_HS_ENOTSUP;
   25c90:	2008      	movs	r0, #8
   25c92:	e7f7      	b.n	25c84 <ble_sm_rx+0x64>
   25c94:	10004034 	.word	0x10004034

00025c98 <ble_sm_enc_change_rx>:
{
   25c98:	b508      	push	{r3, lr}
                        ev->enabled & 0x01);
   25c9a:	78c2      	ldrb	r2, [r0, #3]
    ble_sm_enc_event_rx(le16toh(ev->connection_handle), ev->status,
   25c9c:	f002 0201 	and.w	r2, r2, #1
   25ca0:	7801      	ldrb	r1, [r0, #0]
   25ca2:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   25ca6:	f7ff ff36 	bl	25b16 <ble_sm_enc_event_rx>
}
   25caa:	bd08      	pop	{r3, pc}

00025cac <ble_sm_enc_key_refresh_rx>:
{
   25cac:	b508      	push	{r3, lr}
    ble_sm_enc_event_rx(le16toh(ev->conn_handle), ev->status, 1);
   25cae:	2201      	movs	r2, #1
   25cb0:	7801      	ldrb	r1, [r0, #0]
   25cb2:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   25cb6:	f7ff ff2e 	bl	25b16 <ble_sm_enc_event_rx>
}
   25cba:	bd08      	pop	{r3, pc}

00025cbc <ble_sm_ltk_req_rx>:
{
   25cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   25cbe:	b0a9      	sub	sp, #164	; 0xa4
   25cc0:	4605      	mov	r5, r0
    uint16_t conn_handle = le16toh(ev->conn_handle);
   25cc2:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   25cc6:	b2be      	uxth	r6, r7
    memset(&res, 0, sizeof res);
   25cc8:	2400      	movs	r4, #0
   25cca:	9407      	str	r4, [sp, #28]
   25ccc:	9408      	str	r4, [sp, #32]
   25cce:	9409      	str	r4, [sp, #36]	; 0x24
   25cd0:	940a      	str	r4, [sp, #40]	; 0x28
   25cd2:	940b      	str	r4, [sp, #44]	; 0x2c
   25cd4:	940c      	str	r4, [sp, #48]	; 0x30
    ble_hs_lock();
   25cd6:	f7fb ff15 	bl	21b04 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, 0, NULL);
   25cda:	4623      	mov	r3, r4
   25cdc:	4622      	mov	r2, r4
   25cde:	21ff      	movs	r1, #255	; 0xff
   25ce0:	4630      	mov	r0, r6
   25ce2:	f7ff fbbd 	bl	25460 <ble_sm_proc_find>
    if (proc == NULL) {
   25ce6:	b168      	cbz	r0, 25d04 <ble_sm_ltk_req_rx+0x48>
   25ce8:	4604      	mov	r4, r0
    } else if (proc->state == BLE_SM_PROC_STATE_SEC_REQ) {
   25cea:	7b43      	ldrb	r3, [r0, #13]
   25cec:	2b08      	cmp	r3, #8
   25cee:	d01c      	beq.n	25d2a <ble_sm_ltk_req_rx+0x6e>
    } else if (proc->state == BLE_SM_PROC_STATE_LTK_START) {
   25cf0:	2b03      	cmp	r3, #3
   25cf2:	d13b      	bne.n	25d6c <ble_sm_ltk_req_rx+0xb0>
        res.execute = 1;
   25cf4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   25cf8:	f043 0301 	orr.w	r3, r3, #1
   25cfc:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        restore = 0;
   25d00:	2700      	movs	r7, #0
   25d02:	e026      	b.n	25d52 <ble_sm_ltk_req_rx+0x96>
        proc = ble_sm_proc_alloc();
   25d04:	f7ff fac2 	bl	2528c <ble_sm_proc_alloc>
        if (proc == NULL) {
   25d08:	4604      	mov	r4, r0
   25d0a:	b158      	cbz	r0, 25d24 <ble_sm_ltk_req_rx+0x68>
            proc->conn_handle = conn_handle;
   25d0c:	8147      	strh	r7, [r0, #10]
            proc->state = BLE_SM_PROC_STATE_LTK_RESTORE;
   25d0e:	2304      	movs	r3, #4
   25d10:	7343      	strb	r3, [r0, #13]
            ble_sm_insert(proc);
   25d12:	f7fe fdcd 	bl	248b0 <ble_sm_insert>
            res.execute = 1;
   25d16:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   25d1a:	f043 0301 	orr.w	r3, r3, #1
   25d1e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    if (restore) {
   25d22:	e00a      	b.n	25d3a <ble_sm_ltk_req_rx+0x7e>
            res.app_status = BLE_HS_ENOMEM;
   25d24:	2306      	movs	r3, #6
   25d26:	9307      	str	r3, [sp, #28]
    if (restore) {
   25d28:	e007      	b.n	25d3a <ble_sm_ltk_req_rx+0x7e>
        proc->state = BLE_SM_PROC_STATE_LTK_RESTORE;
   25d2a:	2304      	movs	r3, #4
   25d2c:	7343      	strb	r3, [r0, #13]
        res.execute = 1;
   25d2e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   25d32:	f043 0301 	orr.w	r3, r3, #1
   25d36:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        conn = ble_hs_conn_find_assert(conn_handle);
   25d3a:	4630      	mov	r0, r6
   25d3c:	f7fc fd56 	bl	227ec <ble_hs_conn_find_assert>
        ble_hs_conn_addrs(conn, &addrs);
   25d40:	a90d      	add	r1, sp, #52	; 0x34
   25d42:	f7fc fd73 	bl	2282c <ble_hs_conn_addrs>
        memcpy(peer_id_addr, addrs.peer_id_addr.val, 6);
   25d46:	9910      	ldr	r1, [sp, #64]	; 0x40
   25d48:	980f      	ldr	r0, [sp, #60]	; 0x3c
   25d4a:	9005      	str	r0, [sp, #20]
   25d4c:	f8ad 1018 	strh.w	r1, [sp, #24]
   25d50:	2701      	movs	r7, #1
    ble_hs_unlock();
   25d52:	f7fb fedb 	bl	21b0c <ble_hs_unlock>
    if (proc == NULL) {
   25d56:	b17c      	cbz	r4, 25d78 <ble_sm_ltk_req_rx+0xbc>
    if (res.app_status == 0) {
   25d58:	9b07      	ldr	r3, [sp, #28]
   25d5a:	b903      	cbnz	r3, 25d5e <ble_sm_ltk_req_rx+0xa2>
        if (restore) {
   25d5c:	b977      	cbnz	r7, 25d7c <ble_sm_ltk_req_rx+0xc0>
    ble_sm_process_result(conn_handle, &res);
   25d5e:	a907      	add	r1, sp, #28
   25d60:	4630      	mov	r0, r6
   25d62:	f7ff fe66 	bl	25a32 <ble_sm_process_result>
    return 0;
   25d66:	2000      	movs	r0, #0
}
   25d68:	b029      	add	sp, #164	; 0xa4
   25d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ble_sm_ltk_req_neg_reply_tx(conn_handle);
   25d6c:	4630      	mov	r0, r6
   25d6e:	f7ff f961 	bl	25034 <ble_sm_ltk_req_neg_reply_tx>
        restore = 0;
   25d72:	2700      	movs	r7, #0
        proc = NULL;
   25d74:	463c      	mov	r4, r7
   25d76:	e7ec      	b.n	25d52 <ble_sm_ltk_req_rx+0x96>
        return res.app_status;
   25d78:	9807      	ldr	r0, [sp, #28]
   25d7a:	e7f5      	b.n	25d68 <ble_sm_ltk_req_rx+0xac>
            store_rc = ble_sm_retrieve_ltk(le16toh(ev->div), le64toh(ev->rand),
   25d7c:	ab14      	add	r3, sp, #80	; 0x50
   25d7e:	9302      	str	r3, [sp, #8]
   25d80:	ab05      	add	r3, sp, #20
   25d82:	9301      	str	r3, [sp, #4]
   25d84:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   25d88:	9300      	str	r3, [sp, #0]
   25d8a:	f8d5 2003 	ldr.w	r2, [r5, #3]
   25d8e:	f8d5 3007 	ldr.w	r3, [r5, #7]
   25d92:	f8b5 000b 	ldrh.w	r0, [r5, #11]
   25d96:	f7ff fa89 	bl	252ac <ble_sm_retrieve_ltk>
            if (store_rc == 0) {
   25d9a:	b910      	cbnz	r0, 25da2 <ble_sm_ltk_req_rx+0xe6>
                res.state_arg = &value_sec;
   25d9c:	ab14      	add	r3, sp, #80	; 0x50
   25d9e:	930b      	str	r3, [sp, #44]	; 0x2c
   25da0:	e7dd      	b.n	25d5e <ble_sm_ltk_req_rx+0xa2>
                res.state_arg = NULL;
   25da2:	2300      	movs	r3, #0
   25da4:	930b      	str	r3, [sp, #44]	; 0x2c
   25da6:	e7da      	b.n	25d5e <ble_sm_ltk_req_rx+0xa2>

00025da8 <ble_sm_our_pair_rand>:
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   25da8:	7a03      	ldrb	r3, [r0, #8]
   25daa:	f013 0f01 	tst.w	r3, #1
   25dae:	d001      	beq.n	25db4 <ble_sm_our_pair_rand+0xc>
        return proc->randm;
   25db0:	303e      	adds	r0, #62	; 0x3e
   25db2:	4770      	bx	lr
        return proc->rands;
   25db4:	304e      	adds	r0, #78	; 0x4e
}
   25db6:	4770      	bx	lr

00025db8 <ble_sm_pair_exec>:
{
   25db8:	b5f0      	push	{r4, r5, r6, r7, lr}
   25dba:	b083      	sub	sp, #12
   25dbc:	4604      	mov	r4, r0
   25dbe:	460e      	mov	r6, r1
    is_req = proc->flags & BLE_SM_PROC_F_INITIATOR;
   25dc0:	7a03      	ldrb	r3, [r0, #8]
    cmd = ble_sm_cmd_get(is_req ? BLE_SM_OP_PAIR_REQ : BLE_SM_OP_PAIR_RSP,
   25dc2:	f013 0501 	ands.w	r5, r3, #1
   25dc6:	d01d      	beq.n	25e04 <ble_sm_pair_exec+0x4c>
   25dc8:	2001      	movs	r0, #1
   25dca:	aa01      	add	r2, sp, #4
   25dcc:	2106      	movs	r1, #6
   25dce:	f000 f9df 	bl	26190 <ble_sm_cmd_get>
    if (cmd == NULL) {
   25dd2:	4607      	mov	r7, r0
   25dd4:	2800      	cmp	r0, #0
   25dd6:	d03f      	beq.n	25e58 <ble_sm_pair_exec+0xa0>
    if (is_req) {
   25dd8:	b1b5      	cbz	r5, 25e08 <ble_sm_pair_exec+0x50>
        ble_sm_pair_req_fill(proc);
   25dda:	4620      	mov	r0, r4
   25ddc:	f7fe fdc8 	bl	24970 <ble_sm_pair_req_fill>
        memcpy(cmd, proc->pair_req + 1, sizeof(*cmd));
   25de0:	4623      	mov	r3, r4
   25de2:	f853 2f11 	ldr.w	r2, [r3, #17]!
   25de6:	603a      	str	r2, [r7, #0]
   25de8:	889b      	ldrh	r3, [r3, #4]
   25dea:	80bb      	strh	r3, [r7, #4]
    rc = ble_sm_tx(proc->conn_handle, txom);
   25dec:	9901      	ldr	r1, [sp, #4]
   25dee:	8960      	ldrh	r0, [r4, #10]
   25df0:	f000 f9e8 	bl	261c4 <ble_sm_tx>
    if (rc != 0) {
   25df4:	4603      	mov	r3, r0
   25df6:	b300      	cbz	r0, 25e3a <ble_sm_pair_exec+0x82>
    res->app_status = rc;
   25df8:	6033      	str	r3, [r6, #0]
    if (!is_req) {
   25dfa:	b90d      	cbnz	r5, 25e00 <ble_sm_pair_exec+0x48>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   25dfc:	2308      	movs	r3, #8
   25dfe:	7133      	strb	r3, [r6, #4]
}
   25e00:	b003      	add	sp, #12
   25e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cmd = ble_sm_cmd_get(is_req ? BLE_SM_OP_PAIR_REQ : BLE_SM_OP_PAIR_RSP,
   25e04:	2002      	movs	r0, #2
   25e06:	e7e0      	b.n	25dca <ble_sm_pair_exec+0x12>
        memcpy(cmd, proc->pair_rsp + 1, sizeof(*cmd));
   25e08:	4623      	mov	r3, r4
   25e0a:	f853 2f18 	ldr.w	r2, [r3, #24]!
   25e0e:	6002      	str	r2, [r0, #0]
   25e10:	889b      	ldrh	r3, [r3, #4]
   25e12:	8083      	strh	r3, [r0, #4]
        proc->state = ble_sm_state_after_pair(proc);
   25e14:	4620      	mov	r0, r4
   25e16:	f7fe fd90 	bl	2493a <ble_sm_state_after_pair>
   25e1a:	7360      	strb	r0, [r4, #13]
        rc = ble_sm_io_action(proc, &ioact);
   25e1c:	f10d 0103 	add.w	r1, sp, #3
   25e20:	4620      	mov	r0, r4
   25e22:	f7fe fddc 	bl	249de <ble_sm_io_action>
        if (ble_sm_ioact_state(ioact) == proc->state) {
   25e26:	f89d 7003 	ldrb.w	r7, [sp, #3]
   25e2a:	4638      	mov	r0, r7
   25e2c:	f7ff fd12 	bl	25854 <ble_sm_ioact_state>
   25e30:	7b63      	ldrb	r3, [r4, #13]
   25e32:	4298      	cmp	r0, r3
   25e34:	d1da      	bne.n	25dec <ble_sm_pair_exec+0x34>
            res->passkey_params.action = ioact;
   25e36:	7237      	strb	r7, [r6, #8]
   25e38:	e7d8      	b.n	25dec <ble_sm_pair_exec+0x34>
    res->app_status = ble_sm_gen_pair_rand(ble_sm_our_pair_rand(proc));
   25e3a:	4620      	mov	r0, r4
   25e3c:	f7ff ffb4 	bl	25da8 <ble_sm_our_pair_rand>
   25e40:	f7ff faca 	bl	253d8 <ble_sm_gen_pair_rand>
   25e44:	6030      	str	r0, [r6, #0]
    if (res->app_status != 0) {
   25e46:	2800      	cmp	r0, #0
   25e48:	d0da      	beq.n	25e00 <ble_sm_pair_exec+0x48>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   25e4a:	2308      	movs	r3, #8
   25e4c:	7133      	strb	r3, [r6, #4]
        res->enc_cb = 1;
   25e4e:	7d33      	ldrb	r3, [r6, #20]
   25e50:	f043 0302 	orr.w	r3, r3, #2
   25e54:	7533      	strb	r3, [r6, #20]
        return;
   25e56:	e7d3      	b.n	25e00 <ble_sm_pair_exec+0x48>
        rc = BLE_HS_ENOMEM;
   25e58:	2306      	movs	r3, #6
   25e5a:	e7cd      	b.n	25df8 <ble_sm_pair_exec+0x40>

00025e5c <ble_sm_peer_pair_rand>:
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   25e5c:	7a03      	ldrb	r3, [r0, #8]
   25e5e:	f013 0f01 	tst.w	r3, #1
   25e62:	d001      	beq.n	25e68 <ble_sm_peer_pair_rand+0xc>
        return proc->rands;
   25e64:	304e      	adds	r0, #78	; 0x4e
   25e66:	4770      	bx	lr
        return proc->randm;
   25e68:	303e      	adds	r0, #62	; 0x3e
}
   25e6a:	4770      	bx	lr

00025e6c <ble_sm_random_rx>:
{
   25e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25e6e:	4606      	mov	r6, r0
   25e70:	460d      	mov	r5, r1
   25e72:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   25e74:	2110      	movs	r1, #16
   25e76:	4628      	mov	r0, r5
   25e78:	f7fd fd47 	bl	2390a <ble_hs_mbuf_pullup_base>
   25e7c:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   25e7e:	b130      	cbz	r0, 25e8e <ble_sm_random_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   25e80:	2308      	movs	r3, #8
   25e82:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   25e84:	7d23      	ldrb	r3, [r4, #20]
   25e86:	f043 0302 	orr.w	r3, r3, #2
   25e8a:	7523      	strb	r3, [r4, #20]
}
   25e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_pair_random *)(*om)->om_data;
   25e8e:	682b      	ldr	r3, [r5, #0]
   25e90:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   25e92:	f7fb fe37 	bl	21b04 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_RANDOM, -1, NULL);
   25e96:	2300      	movs	r3, #0
   25e98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25e9c:	2102      	movs	r1, #2
   25e9e:	4630      	mov	r0, r6
   25ea0:	f7ff fade 	bl	25460 <ble_sm_proc_find>
    if (proc == NULL) {
   25ea4:	4606      	mov	r6, r0
   25ea6:	b190      	cbz	r0, 25ece <ble_sm_random_rx+0x62>
        memcpy(ble_sm_peer_pair_rand(proc), cmd->value, 16);
   25ea8:	f7ff ffd8 	bl	25e5c <ble_sm_peer_pair_rand>
   25eac:	682f      	ldr	r7, [r5, #0]
   25eae:	6869      	ldr	r1, [r5, #4]
   25eb0:	68aa      	ldr	r2, [r5, #8]
   25eb2:	68eb      	ldr	r3, [r5, #12]
   25eb4:	6007      	str	r7, [r0, #0]
   25eb6:	6041      	str	r1, [r0, #4]
   25eb8:	6082      	str	r2, [r0, #8]
   25eba:	60c3      	str	r3, [r0, #12]
        if (proc->flags & BLE_SM_PROC_F_SC) {
   25ebc:	7a33      	ldrb	r3, [r6, #8]
   25ebe:	f013 0f10 	tst.w	r3, #16
   25ec2:	d106      	bne.n	25ed2 <ble_sm_random_rx+0x66>
            ble_sm_lgcy_random_rx(proc, res);
   25ec4:	4621      	mov	r1, r4
   25ec6:	4630      	mov	r0, r6
   25ec8:	f000 fa93 	bl	263f2 <ble_sm_lgcy_random_rx>
   25ecc:	e001      	b.n	25ed2 <ble_sm_random_rx+0x66>
        res->app_status = BLE_HS_ENOENT;
   25ece:	2305      	movs	r3, #5
   25ed0:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   25ed2:	f7fb fe1b 	bl	21b0c <ble_hs_unlock>
   25ed6:	e7d9      	b.n	25e8c <ble_sm_random_rx+0x20>

00025ed8 <ble_sm_timer>:
{
   25ed8:	b530      	push	{r4, r5, lr}
   25eda:	b083      	sub	sp, #12
    ticks_until_exp = ble_sm_extract_expired(&exp_list);
   25edc:	4668      	mov	r0, sp
   25ede:	f7ff f903 	bl	250e8 <ble_sm_extract_expired>
   25ee2:	4605      	mov	r5, r0
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   25ee4:	e004      	b.n	25ef0 <ble_sm_timer+0x18>
        STAILQ_REMOVE_HEAD(&exp_list, next);
   25ee6:	f8cd d004 	str.w	sp, [sp, #4]
        ble_sm_proc_free(proc);
   25eea:	4620      	mov	r0, r4
   25eec:	f7ff f9c4 	bl	25278 <ble_sm_proc_free>
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   25ef0:	9c00      	ldr	r4, [sp, #0]
   25ef2:	b15c      	cbz	r4, 25f0c <ble_sm_timer+0x34>
        ble_gap_enc_event(proc->conn_handle, BLE_HS_ETIMEOUT, 0, 0);
   25ef4:	2300      	movs	r3, #0
   25ef6:	461a      	mov	r2, r3
   25ef8:	210d      	movs	r1, #13
   25efa:	8960      	ldrh	r0, [r4, #10]
   25efc:	f7f9 fbdd 	bl	1f6ba <ble_gap_enc_event>
        STAILQ_REMOVE_HEAD(&exp_list, next);
   25f00:	9b00      	ldr	r3, [sp, #0]
   25f02:	681b      	ldr	r3, [r3, #0]
   25f04:	9300      	str	r3, [sp, #0]
   25f06:	2b00      	cmp	r3, #0
   25f08:	d1ef      	bne.n	25eea <ble_sm_timer+0x12>
   25f0a:	e7ec      	b.n	25ee6 <ble_sm_timer+0xe>
}
   25f0c:	4628      	mov	r0, r5
   25f0e:	b003      	add	sp, #12
   25f10:	bd30      	pop	{r4, r5, pc}

00025f12 <ble_sm_pair_initiate>:
{
   25f12:	b530      	push	{r4, r5, lr}
   25f14:	b087      	sub	sp, #28
   25f16:	4605      	mov	r5, r0
    memset(&res, 0, sizeof(res));
   25f18:	2400      	movs	r4, #0
   25f1a:	9400      	str	r4, [sp, #0]
   25f1c:	9401      	str	r4, [sp, #4]
   25f1e:	9402      	str	r4, [sp, #8]
   25f20:	9403      	str	r4, [sp, #12]
   25f22:	9404      	str	r4, [sp, #16]
   25f24:	9405      	str	r4, [sp, #20]
    ble_hs_lock();
   25f26:	f7fb fded 	bl	21b04 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, NULL);
   25f2a:	4623      	mov	r3, r4
   25f2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25f30:	21ff      	movs	r1, #255	; 0xff
   25f32:	4628      	mov	r0, r5
   25f34:	f7ff fa94 	bl	25460 <ble_sm_proc_find>
   25f38:	4604      	mov	r4, r0
    ble_hs_unlock();
   25f3a:	f7fb fde7 	bl	21b0c <ble_hs_unlock>
    if (proc != NULL) {
   25f3e:	bb2c      	cbnz	r4, 25f8c <ble_sm_pair_initiate+0x7a>
    rc = ble_sm_chk_store_overflow(conn_handle);
   25f40:	4628      	mov	r0, r5
   25f42:	f7fe fcee 	bl	24922 <ble_sm_chk_store_overflow>
    if (rc != 0) {
   25f46:	bb10      	cbnz	r0, 25f8e <ble_sm_pair_initiate+0x7c>
    proc = ble_sm_proc_alloc();
   25f48:	f7ff f9a0 	bl	2528c <ble_sm_proc_alloc>
    if (proc == NULL) {
   25f4c:	4604      	mov	r4, r0
   25f4e:	b1d0      	cbz	r0, 25f86 <ble_sm_pair_initiate+0x74>
        proc->conn_handle = conn_handle;
   25f50:	8145      	strh	r5, [r0, #10]
        proc->state = BLE_SM_PROC_STATE_PAIR;
   25f52:	2300      	movs	r3, #0
   25f54:	7343      	strb	r3, [r0, #13]
        proc->flags |= BLE_SM_PROC_F_INITIATOR;
   25f56:	7a03      	ldrb	r3, [r0, #8]
   25f58:	f043 0301 	orr.w	r3, r3, #1
   25f5c:	7203      	strb	r3, [r0, #8]
        ble_hs_lock();
   25f5e:	f7fb fdd1 	bl	21b04 <ble_hs_lock>
        ble_sm_insert(proc);
   25f62:	4620      	mov	r0, r4
   25f64:	f7fe fca4 	bl	248b0 <ble_sm_insert>
        ble_hs_unlock();
   25f68:	f7fb fdd0 	bl	21b0c <ble_hs_unlock>
        res.execute = 1;
   25f6c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   25f70:	f043 0301 	orr.w	r3, r3, #1
   25f74:	f88d 3014 	strb.w	r3, [sp, #20]
    if (proc != NULL) {
   25f78:	b11c      	cbz	r4, 25f82 <ble_sm_pair_initiate+0x70>
        ble_sm_process_result(conn_handle, &res);
   25f7a:	4669      	mov	r1, sp
   25f7c:	4628      	mov	r0, r5
   25f7e:	f7ff fd58 	bl	25a32 <ble_sm_process_result>
    return res.app_status;
   25f82:	9800      	ldr	r0, [sp, #0]
   25f84:	e003      	b.n	25f8e <ble_sm_pair_initiate+0x7c>
        res.app_status = BLE_HS_ENOMEM;
   25f86:	2306      	movs	r3, #6
   25f88:	9300      	str	r3, [sp, #0]
   25f8a:	e7f5      	b.n	25f78 <ble_sm_pair_initiate+0x66>
        return BLE_HS_EALREADY;
   25f8c:	2002      	movs	r0, #2
}
   25f8e:	b007      	add	sp, #28
   25f90:	bd30      	pop	{r4, r5, pc}

00025f92 <ble_sm_enc_initiate>:
{
   25f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25f96:	b08e      	sub	sp, #56	; 0x38
   25f98:	4605      	mov	r5, r0
   25f9a:	4688      	mov	r8, r1
   25f9c:	4617      	mov	r7, r2
   25f9e:	461e      	mov	r6, r3
    memset(&res, 0, sizeof res);
   25fa0:	2400      	movs	r4, #0
   25fa2:	9408      	str	r4, [sp, #32]
   25fa4:	9409      	str	r4, [sp, #36]	; 0x24
   25fa6:	940a      	str	r4, [sp, #40]	; 0x28
   25fa8:	940b      	str	r4, [sp, #44]	; 0x2c
   25faa:	940c      	str	r4, [sp, #48]	; 0x30
   25fac:	940d      	str	r4, [sp, #52]	; 0x34
    ble_hs_lock();
   25fae:	f7fb fda9 	bl	21b04 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, NULL);
   25fb2:	4623      	mov	r3, r4
   25fb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25fb8:	21ff      	movs	r1, #255	; 0xff
   25fba:	4628      	mov	r0, r5
   25fbc:	f7ff fa50 	bl	25460 <ble_sm_proc_find>
    if (proc != NULL) {
   25fc0:	b158      	cbz	r0, 25fda <ble_sm_enc_initiate+0x48>
        res.app_status = BLE_HS_EALREADY;
   25fc2:	2302      	movs	r3, #2
   25fc4:	9308      	str	r3, [sp, #32]
    ble_hs_unlock();
   25fc6:	f7fb fda1 	bl	21b0c <ble_hs_unlock>
    ble_sm_process_result(conn_handle, &res);
   25fca:	a908      	add	r1, sp, #32
   25fcc:	4628      	mov	r0, r5
   25fce:	f7ff fd30 	bl	25a32 <ble_sm_process_result>
}
   25fd2:	9808      	ldr	r0, [sp, #32]
   25fd4:	b00e      	add	sp, #56	; 0x38
   25fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        proc = ble_sm_proc_alloc();
   25fda:	f7ff f957 	bl	2528c <ble_sm_proc_alloc>
        if (proc == NULL) {
   25fde:	4603      	mov	r3, r0
   25fe0:	b338      	cbz	r0, 26032 <ble_sm_enc_initiate+0xa0>
            proc->conn_handle = conn_handle;
   25fe2:	8145      	strh	r5, [r0, #10]
            proc->key_size = key_size;
   25fe4:	f880 800f 	strb.w	r8, [r0, #15]
            proc->state = BLE_SM_PROC_STATE_ENC_RESTORE;
   25fe8:	2206      	movs	r2, #6
   25fea:	7342      	strb	r2, [r0, #13]
            proc->flags |= BLE_SM_PROC_F_INITIATOR;
   25fec:	7a02      	ldrb	r2, [r0, #8]
   25fee:	f042 0201 	orr.w	r2, r2, #1
   25ff2:	7202      	strb	r2, [r0, #8]
            if (auth) {
   25ff4:	9916      	ldr	r1, [sp, #88]	; 0x58
   25ff6:	b111      	cbz	r1, 25ffe <ble_sm_enc_initiate+0x6c>
                proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   25ff8:	f042 0208 	orr.w	r2, r2, #8
   25ffc:	7202      	strb	r2, [r0, #8]
            ble_sm_insert(proc);
   25ffe:	4618      	mov	r0, r3
   26000:	f7fe fc56 	bl	248b0 <ble_sm_insert>
            cmd.connection_handle = conn_handle;
   26004:	f8ad 5000 	strh.w	r5, [sp]
            cmd.encrypted_diversifier = ediv;
   26008:	f8ad 6002 	strh.w	r6, [sp, #2]
            cmd.random_number = rand_val;
   2600c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   26010:	e9cd 2302 	strd	r2, r3, [sp, #8]
            memcpy(cmd.long_term_key, ltk, sizeof cmd.long_term_key);
   26014:	ac04      	add	r4, sp, #16
   26016:	6838      	ldr	r0, [r7, #0]
   26018:	6879      	ldr	r1, [r7, #4]
   2601a:	68ba      	ldr	r2, [r7, #8]
   2601c:	68fb      	ldr	r3, [r7, #12]
   2601e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            res.execute = 1;
   26020:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   26024:	f043 0301 	orr.w	r3, r3, #1
   26028:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
            res.state_arg = &cmd;
   2602c:	f8cd d030 	str.w	sp, [sp, #48]	; 0x30
   26030:	e7c9      	b.n	25fc6 <ble_sm_enc_initiate+0x34>
            res.app_status = BLE_HS_ENOMEM;
   26032:	2306      	movs	r3, #6
   26034:	9308      	str	r3, [sp, #32]
   26036:	e7c6      	b.n	25fc6 <ble_sm_enc_initiate+0x34>

00026038 <ble_sm_sec_req_rx>:
{
   26038:	b570      	push	{r4, r5, r6, lr}
   2603a:	b0a8      	sub	sp, #160	; 0xa0
   2603c:	4606      	mov	r6, r0
   2603e:	460d      	mov	r5, r1
   26040:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   26042:	2101      	movs	r1, #1
   26044:	4628      	mov	r0, r5
   26046:	f7fd fc60 	bl	2390a <ble_hs_mbuf_pullup_base>
   2604a:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   2604c:	b108      	cbz	r0, 26052 <ble_sm_sec_req_rx+0x1a>
}
   2604e:	b028      	add	sp, #160	; 0xa0
   26050:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_sec_req *)(*om)->om_data;
   26052:	682b      	ldr	r3, [r5, #0]
   26054:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   26056:	f7fb fd55 	bl	21b04 <ble_hs_lock>
    conn = ble_hs_conn_find_assert(conn_handle);
   2605a:	4630      	mov	r0, r6
   2605c:	f7fc fbc6 	bl	227ec <ble_hs_conn_find_assert>
    if (!(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
   26060:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   26064:	f013 0f01 	tst.w	r3, #1
   26068:	d132      	bne.n	260d0 <ble_sm_sec_req_rx+0x98>
        res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CMD_NOT_SUPP);
   2606a:	f240 4307 	movw	r3, #1031	; 0x407
   2606e:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_CMD_NOT_SUPP;
   26070:	2307      	movs	r3, #7
   26072:	7123      	strb	r3, [r4, #4]
    ble_hs_unlock();
   26074:	f7fb fd4a 	bl	21b0c <ble_hs_unlock>
    if (res->app_status == 0) {
   26078:	6823      	ldr	r3, [r4, #0]
   2607a:	2b00      	cmp	r3, #0
   2607c:	d1e7      	bne.n	2604e <ble_sm_sec_req_rx+0x16>
        if (cmd->authreq & BLE_SM_PAIR_AUTHREQ_BOND) {
   2607e:	782b      	ldrb	r3, [r5, #0]
   26080:	f013 0f01 	tst.w	r3, #1
   26084:	d13b      	bne.n	260fe <ble_sm_sec_req_rx+0xc6>
            res->app_status = BLE_HS_ENOENT;
   26086:	2305      	movs	r3, #5
   26088:	6023      	str	r3, [r4, #0]
        if (res->app_status == 0) {
   2608a:	6823      	ldr	r3, [r4, #0]
   2608c:	b953      	cbnz	r3, 260a4 <ble_sm_sec_req_rx+0x6c>
            authreq_mitm = cmd->authreq & BLE_SM_PAIR_AUTHREQ_MITM;
   2608e:	782b      	ldrb	r3, [r5, #0]
            if (authreq_mitm && !value_sec.authenticated) {
   26090:	f013 0f04 	tst.w	r3, #4
   26094:	d006      	beq.n	260a4 <ble_sm_sec_req_rx+0x6c>
   26096:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
   2609a:	f013 0f02 	tst.w	r3, #2
   2609e:	d101      	bne.n	260a4 <ble_sm_sec_req_rx+0x6c>
                res->app_status = BLE_HS_EREJECT;
   260a0:	2310      	movs	r3, #16
   260a2:	6023      	str	r3, [r4, #0]
        if (res->app_status == 0) {
   260a4:	6823      	ldr	r3, [r4, #0]
   260a6:	2b00      	cmp	r3, #0
   260a8:	d12f      	bne.n	2610a <ble_sm_sec_req_rx+0xd2>
                                                  value_sec.authenticated);
   260aa:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
   260ae:	f3c3 0340 	ubfx	r3, r3, #1, #1
            res->app_status = ble_sm_enc_initiate(conn_handle,
   260b2:	9302      	str	r3, [sp, #8]
   260b4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
   260b8:	e9cd 2300 	strd	r2, r3, [sp]
   260bc:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   260c0:	aa1a      	add	r2, sp, #104	; 0x68
   260c2:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
   260c6:	4630      	mov	r0, r6
   260c8:	f7ff ff63 	bl	25f92 <ble_sm_enc_initiate>
   260cc:	6020      	str	r0, [r4, #0]
   260ce:	e7be      	b.n	2604e <ble_sm_sec_req_rx+0x16>
        ble_hs_conn_addrs(conn, &addrs);
   260d0:	a905      	add	r1, sp, #20
   260d2:	f7fc fbab 	bl	2282c <ble_hs_conn_addrs>
        memset(&key_sec, 0, sizeof key_sec);
   260d6:	2300      	movs	r3, #0
   260d8:	930d      	str	r3, [sp, #52]	; 0x34
   260da:	930e      	str	r3, [sp, #56]	; 0x38
   260dc:	930f      	str	r3, [sp, #60]	; 0x3c
   260de:	9310      	str	r3, [sp, #64]	; 0x40
   260e0:	9311      	str	r3, [sp, #68]	; 0x44
   260e2:	9312      	str	r3, [sp, #72]	; 0x48
   260e4:	9313      	str	r3, [sp, #76]	; 0x4c
        key_sec.peer_addr = addrs.peer_id_addr;
   260e6:	f8dd 001b 	ldr.w	r0, [sp, #27]
   260ea:	900c      	str	r0, [sp, #48]	; 0x30
   260ec:	f8bd 201f 	ldrh.w	r2, [sp, #31]
   260f0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   260f4:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
   260f8:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
   260fc:	e7ba      	b.n	26074 <ble_sm_sec_req_rx+0x3c>
            res->app_status = ble_store_read_peer_sec(&key_sec, &value_sec);
   260fe:	a914      	add	r1, sp, #80	; 0x50
   26100:	a80c      	add	r0, sp, #48	; 0x30
   26102:	f000 fa42 	bl	2658a <ble_store_read_peer_sec>
   26106:	6020      	str	r0, [r4, #0]
   26108:	e7bf      	b.n	2608a <ble_sm_sec_req_rx+0x52>
            res->app_status = ble_sm_pair_initiate(conn_handle);
   2610a:	4630      	mov	r0, r6
   2610c:	f7ff ff01 	bl	25f12 <ble_sm_pair_initiate>
   26110:	6020      	str	r0, [r4, #0]
   26112:	e79c      	b.n	2604e <ble_sm_sec_req_rx+0x16>

00026114 <ble_sm_connection_broken>:
    return res.app_status;
}

void
ble_sm_connection_broken(uint16_t conn_handle)
{
   26114:	b500      	push	{lr}
   26116:	b087      	sub	sp, #28
    struct ble_sm_result res;

    memset(&res, 0, sizeof res);
   26118:	2300      	movs	r3, #0
   2611a:	9301      	str	r3, [sp, #4]
   2611c:	9302      	str	r3, [sp, #8]
   2611e:	9303      	str	r3, [sp, #12]
   26120:	9304      	str	r3, [sp, #16]
   26122:	9305      	str	r3, [sp, #20]
    res.app_status = BLE_HS_ENOTCONN;
   26124:	2307      	movs	r3, #7
   26126:	9300      	str	r3, [sp, #0]
    res.enc_cb = 1;
   26128:	2302      	movs	r3, #2
   2612a:	f88d 3014 	strb.w	r3, [sp, #20]

    ble_sm_process_result(conn_handle, &res);
   2612e:	4669      	mov	r1, sp
   26130:	f7ff fc7f 	bl	25a32 <ble_sm_process_result>
}
   26134:	b007      	add	sp, #28
   26136:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0002613c <ble_sm_init>:

int
ble_sm_init(void)
{
   2613c:	b500      	push	{lr}
   2613e:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_sm_procs);
   26140:	4b07      	ldr	r3, [pc, #28]	; (26160 <ble_sm_init+0x24>)
   26142:	2200      	movs	r2, #0
   26144:	601a      	str	r2, [r3, #0]
   26146:	605b      	str	r3, [r3, #4]

    rc = os_mempool_init(&ble_sm_proc_pool,
   26148:	4b06      	ldr	r3, [pc, #24]	; (26164 <ble_sm_init+0x28>)
   2614a:	9300      	str	r3, [sp, #0]
   2614c:	4b06      	ldr	r3, [pc, #24]	; (26168 <ble_sm_init+0x2c>)
   2614e:	f44f 7280 	mov.w	r2, #256	; 0x100
   26152:	2101      	movs	r1, #1
   26154:	4805      	ldr	r0, [pc, #20]	; (2616c <ble_sm_init+0x30>)
   26156:	f7ef fe33 	bl	15dc0 <os_mempool_init>
    }

    ble_sm_sc_init();

    return 0;
}
   2615a:	b003      	add	sp, #12
   2615c:	f85d fb04 	ldr.w	pc, [sp], #4
   26160:	100041c0 	.word	0x100041c0
   26164:	00031318 	.word	0x00031318
   26168:	100040a4 	.word	0x100040a4
   2616c:	100041a4 	.word	0x100041a4

00026170 <ble_sm_create_chan>:
}
#endif

struct ble_l2cap_chan *
ble_sm_create_chan(uint16_t conn_handle)
{
   26170:	b508      	push	{r3, lr}
    struct ble_l2cap_chan *chan;

    chan = ble_l2cap_chan_alloc(conn_handle);
   26172:	f7fd ff3b 	bl	23fec <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   26176:	4603      	mov	r3, r0
   26178:	b130      	cbz	r0, 26188 <ble_sm_create_chan+0x18>
        return NULL;
    }

    chan->scid = BLE_L2CAP_CID_SM;
   2617a:	2206      	movs	r2, #6
   2617c:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_SM;
   2617e:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = BLE_SM_MTU;
   26180:	2241      	movs	r2, #65	; 0x41
   26182:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_sm_rx;
   26184:	4a01      	ldr	r2, [pc, #4]	; (2618c <ble_sm_create_chan+0x1c>)
   26186:	6182      	str	r2, [r0, #24]

    return chan;
}
   26188:	4618      	mov	r0, r3
   2618a:	bd08      	pop	{r3, pc}
   2618c:	00025c21 	.word	0x00025c21

00026190 <ble_sm_cmd_get>:
#include "ble_hs_priv.h"

#if NIMBLE_BLE_CONNECT
void *
ble_sm_cmd_get(uint8_t opcode, size_t len, struct os_mbuf **txom)
{
   26190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26192:	4607      	mov	r7, r0
   26194:	460d      	mov	r5, r1
   26196:	4616      	mov	r6, r2
    struct ble_sm_hdr *hdr;

    *txom = ble_hs_mbuf_l2cap_pkt();
   26198:	f7fd fb98 	bl	238cc <ble_hs_mbuf_l2cap_pkt>
   2619c:	4604      	mov	r4, r0
   2619e:	6030      	str	r0, [r6, #0]
    if (*txom == NULL) {
   261a0:	b148      	cbz	r0, 261b6 <ble_sm_cmd_get+0x26>
        return NULL;
    }

    if (os_mbuf_extend(*txom, sizeof(*hdr) + len) == NULL) {
   261a2:	1c69      	adds	r1, r5, #1
   261a4:	b289      	uxth	r1, r1
   261a6:	f7ef fc92 	bl	15ace <os_mbuf_extend>
   261aa:	4604      	mov	r4, r0
   261ac:	b128      	cbz	r0, 261ba <ble_sm_cmd_get+0x2a>
        os_mbuf_free_chain(*txom);
        return NULL;
    }

    hdr = (struct ble_sm_hdr *)(*txom)->om_data;
   261ae:	6833      	ldr	r3, [r6, #0]

    hdr->opcode = opcode;
   261b0:	681c      	ldr	r4, [r3, #0]
   261b2:	f804 7b01 	strb.w	r7, [r4], #1

    return hdr->data;
}
   261b6:	4620      	mov	r0, r4
   261b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        os_mbuf_free_chain(*txom);
   261ba:	6830      	ldr	r0, [r6, #0]
   261bc:	f7ef fa5a 	bl	15674 <os_mbuf_free_chain>
        return NULL;
   261c0:	e7f9      	b.n	261b6 <ble_sm_cmd_get+0x26>
	...

000261c4 <ble_sm_tx>:

/* this function consumes tx os_mbuf */
int
ble_sm_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   261c4:	b530      	push	{r4, r5, lr}
   261c6:	b083      	sub	sp, #12
   261c8:	460c      	mov	r4, r1
    struct ble_hs_conn *conn;
    int rc;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    STATS_INC(ble_l2cap_stats, sm_tx);
   261ca:	4a0c      	ldr	r2, [pc, #48]	; (261fc <ble_sm_tx+0x38>)
   261cc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   261ce:	3301      	adds	r3, #1
   261d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SM,
   261d2:	ab01      	add	r3, sp, #4
   261d4:	466a      	mov	r2, sp
   261d6:	2106      	movs	r1, #6
   261d8:	f7fd fbda 	bl	23990 <ble_hs_misc_conn_chan_find_reqd>
                                         &conn, &chan);
    if (rc == 0) {
   261dc:	b940      	cbnz	r0, 261f0 <ble_sm_tx+0x2c>
        rc = ble_l2cap_tx(conn, chan, txom);
   261de:	4622      	mov	r2, r4
   261e0:	9901      	ldr	r1, [sp, #4]
   261e2:	9800      	ldr	r0, [sp, #0]
   261e4:	f7fd fffc 	bl	241e0 <ble_l2cap_tx>
   261e8:	4605      	mov	r5, r0
    } else {
        os_mbuf_free_chain(txom);
    }

    return rc;
}
   261ea:	4628      	mov	r0, r5
   261ec:	b003      	add	sp, #12
   261ee:	bd30      	pop	{r4, r5, pc}
   261f0:	4605      	mov	r5, r0
        os_mbuf_free_chain(txom);
   261f2:	4620      	mov	r0, r4
   261f4:	f7ef fa3e 	bl	15674 <os_mbuf_free_chain>
    return rc;
   261f8:	e7f7      	b.n	261ea <ble_sm_tx+0x26>
   261fa:	bf00      	nop
   261fc:	10004034 	.word	0x10004034

00026200 <ble_sm_gen_stk>:
    res->sm_err = BLE_SM_ERR_UNSPECIFIED;
}

static int
ble_sm_gen_stk(struct ble_sm_proc *proc)
{
   26200:	b570      	push	{r4, r5, r6, lr}
   26202:	b084      	sub	sp, #16
   26204:	4604      	mov	r4, r0
    uint8_t key[16];
    int rc;

    rc = ble_sm_alg_s1(proc->tk, proc->rands, proc->randm, key);
   26206:	466b      	mov	r3, sp
   26208:	f100 023e 	add.w	r2, r0, #62	; 0x3e
   2620c:	f100 014e 	add.w	r1, r0, #78	; 0x4e
   26210:	301e      	adds	r0, #30
   26212:	f000 fc46 	bl	26aa2 <ble_sm_alg_s1>
    if (rc != 0) {
   26216:	4605      	mov	r5, r0
   26218:	b110      	cbz	r0, 26220 <ble_sm_gen_stk+0x20>

    /* Ensure proper key size */
    memset(proc->ltk + proc->key_size, 0, sizeof key - proc->key_size);

    return 0;
}
   2621a:	4628      	mov	r0, r5
   2621c:	b004      	add	sp, #16
   2621e:	bd70      	pop	{r4, r5, r6, pc}
    memcpy(proc->ltk, key, proc->key_size);
   26220:	f104 065e 	add.w	r6, r4, #94	; 0x5e
   26224:	7be4      	ldrb	r4, [r4, #15]
   26226:	4622      	mov	r2, r4
   26228:	4669      	mov	r1, sp
   2622a:	4630      	mov	r0, r6
   2622c:	f7f0 fc52 	bl	16ad4 <memcpy>
    memset(proc->ltk + proc->key_size, 0, sizeof key - proc->key_size);
   26230:	f1c4 0210 	rsb	r2, r4, #16
   26234:	2100      	movs	r1, #0
   26236:	1930      	adds	r0, r6, r4
   26238:	f7f0 fc71 	bl	16b1e <memset>
    return 0;
   2623c:	e7ed      	b.n	2621a <ble_sm_gen_stk+0x1a>
	...

00026240 <ble_sm_lgcy_io_action>:
{
   26240:	b410      	push	{r4}
    if (pair_req->oob_data_flag == BLE_SM_PAIR_OOB_YES &&
   26242:	7c83      	ldrb	r3, [r0, #18]
   26244:	2b01      	cmp	r3, #1
   26246:	d00a      	beq.n	2625e <ble_sm_lgcy_io_action+0x1e>
    } else if (!(pair_req->authreq & BLE_SM_PAIR_AUTHREQ_MITM) &&
   26248:	7cc3      	ldrb	r3, [r0, #19]
   2624a:	f013 0f04 	tst.w	r3, #4
   2624e:	d10b      	bne.n	26268 <ble_sm_lgcy_io_action+0x28>
               !(pair_rsp->authreq & BLE_SM_PAIR_AUTHREQ_MITM)) {
   26250:	7e83      	ldrb	r3, [r0, #26]
    } else if (!(pair_req->authreq & BLE_SM_PAIR_AUTHREQ_MITM) &&
   26252:	f013 0f04 	tst.w	r3, #4
   26256:	d107      	bne.n	26268 <ble_sm_lgcy_io_action+0x28>
        *action = BLE_SM_IOACT_NONE;
   26258:	2300      	movs	r3, #0
   2625a:	700b      	strb	r3, [r1, #0]
   2625c:	e00c      	b.n	26278 <ble_sm_lgcy_io_action+0x38>
        pair_rsp->oob_data_flag == BLE_SM_PAIR_OOB_YES) {
   2625e:	7e43      	ldrb	r3, [r0, #25]
    if (pair_req->oob_data_flag == BLE_SM_PAIR_OOB_YES &&
   26260:	2b01      	cmp	r3, #1
   26262:	d1f1      	bne.n	26248 <ble_sm_lgcy_io_action+0x8>
        *action = BLE_SM_IOACT_OOB;
   26264:	700b      	strb	r3, [r1, #0]
   26266:	e007      	b.n	26278 <ble_sm_lgcy_io_action+0x38>
    } else if (pair_req->io_cap >= BLE_SM_IO_CAP_RESERVED ||
   26268:	7c43      	ldrb	r3, [r0, #17]
   2626a:	2b04      	cmp	r3, #4
   2626c:	d802      	bhi.n	26274 <ble_sm_lgcy_io_action+0x34>
               pair_rsp->io_cap >= BLE_SM_IO_CAP_RESERVED) {
   2626e:	7e02      	ldrb	r2, [r0, #24]
    } else if (pair_req->io_cap >= BLE_SM_IO_CAP_RESERVED ||
   26270:	2a04      	cmp	r2, #4
   26272:	d90a      	bls.n	2628a <ble_sm_lgcy_io_action+0x4a>
        *action = BLE_SM_IOACT_NONE;
   26274:	2300      	movs	r3, #0
   26276:	700b      	strb	r3, [r1, #0]
    switch (*action) {
   26278:	780b      	ldrb	r3, [r1, #0]
   2627a:	2b01      	cmp	r3, #1
   2627c:	d026      	beq.n	262cc <ble_sm_lgcy_io_action+0x8c>
   2627e:	d819      	bhi.n	262b4 <ble_sm_lgcy_io_action+0x74>
   26280:	b9ab      	cbnz	r3, 262ae <ble_sm_lgcy_io_action+0x6e>
        proc->pair_alg = BLE_SM_PAIR_ALG_JW;
   26282:	2300      	movs	r3, #0
   26284:	7303      	strb	r3, [r0, #12]
    return 0;
   26286:	4618      	mov	r0, r3
        break;
   26288:	e012      	b.n	262b0 <ble_sm_lgcy_io_action+0x70>
    } else if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   2628a:	7a04      	ldrb	r4, [r0, #8]
   2628c:	f014 0f01 	tst.w	r4, #1
   26290:	d006      	beq.n	262a0 <ble_sm_lgcy_io_action+0x60>
        *action = ble_sm_lgcy_init_ioa[pair_rsp->io_cap][pair_req->io_cap];
   26292:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   26296:	4c12      	ldr	r4, [pc, #72]	; (262e0 <ble_sm_lgcy_io_action+0xa0>)
   26298:	4422      	add	r2, r4
   2629a:	5cd3      	ldrb	r3, [r2, r3]
   2629c:	700b      	strb	r3, [r1, #0]
   2629e:	e7eb      	b.n	26278 <ble_sm_lgcy_io_action+0x38>
        *action = ble_sm_lgcy_resp_ioa[pair_rsp->io_cap][pair_req->io_cap];
   262a0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   262a4:	4c0f      	ldr	r4, [pc, #60]	; (262e4 <ble_sm_lgcy_io_action+0xa4>)
   262a6:	4422      	add	r2, r4
   262a8:	5cd3      	ldrb	r3, [r2, r3]
   262aa:	700b      	strb	r3, [r1, #0]
   262ac:	e7e4      	b.n	26278 <ble_sm_lgcy_io_action+0x38>
    switch (*action) {
   262ae:	2003      	movs	r0, #3
}
   262b0:	bc10      	pop	{r4}
   262b2:	4770      	bx	lr
    switch (*action) {
   262b4:	3b02      	subs	r3, #2
   262b6:	b2db      	uxtb	r3, r3
   262b8:	2b01      	cmp	r3, #1
   262ba:	d80f      	bhi.n	262dc <ble_sm_lgcy_io_action+0x9c>
        proc->pair_alg = BLE_SM_PAIR_ALG_PASSKEY;
   262bc:	2301      	movs	r3, #1
   262be:	7303      	strb	r3, [r0, #12]
        proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   262c0:	7a03      	ldrb	r3, [r0, #8]
   262c2:	f043 0308 	orr.w	r3, r3, #8
   262c6:	7203      	strb	r3, [r0, #8]
    return 0;
   262c8:	2000      	movs	r0, #0
        break;
   262ca:	e7f1      	b.n	262b0 <ble_sm_lgcy_io_action+0x70>
        proc->pair_alg = BLE_SM_PAIR_ALG_OOB;
   262cc:	2302      	movs	r3, #2
   262ce:	7303      	strb	r3, [r0, #12]
        proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   262d0:	7a03      	ldrb	r3, [r0, #8]
   262d2:	f043 0308 	orr.w	r3, r3, #8
   262d6:	7203      	strb	r3, [r0, #8]
    return 0;
   262d8:	2000      	movs	r0, #0
        break;
   262da:	e7e9      	b.n	262b0 <ble_sm_lgcy_io_action+0x70>
    switch (*action) {
   262dc:	2003      	movs	r0, #3
   262de:	e7e7      	b.n	262b0 <ble_sm_lgcy_io_action+0x70>
   262e0:	00031394 	.word	0x00031394
   262e4:	000313b0 	.word	0x000313b0

000262e8 <ble_sm_lgcy_confirm_exec>:
{
   262e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   262ec:	b08d      	sub	sp, #52	; 0x34
   262ee:	4604      	mov	r4, r0
   262f0:	460d      	mov	r5, r1
    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_CONFIRM, sizeof(*cmd), &txom);
   262f2:	aa0b      	add	r2, sp, #44	; 0x2c
   262f4:	2110      	movs	r1, #16
   262f6:	2003      	movs	r0, #3
   262f8:	f7ff ff4a 	bl	26190 <ble_sm_cmd_get>
    if (cmd == NULL) {
   262fc:	2800      	cmp	r0, #0
   262fe:	d042      	beq.n	26386 <ble_sm_lgcy_confirm_exec+0x9e>
   26300:	4681      	mov	r9, r0
    ble_sm_ia_ra(proc, &iat, ia, &rat, ra);
   26302:	f10d 0824 	add.w	r8, sp, #36	; 0x24
   26306:	af07      	add	r7, sp, #28
   26308:	9700      	str	r7, [sp, #0]
   2630a:	f10d 031a 	add.w	r3, sp, #26
   2630e:	4642      	mov	r2, r8
   26310:	f10d 011b 	add.w	r1, sp, #27
   26314:	4620      	mov	r0, r4
   26316:	f7ff f864 	bl	253e2 <ble_sm_ia_ra>
    rc = ble_sm_alg_c1(proc->tk, ble_sm_our_pair_rand(proc), proc->pair_req,
   2631a:	f104 061e 	add.w	r6, r4, #30
   2631e:	4620      	mov	r0, r4
   26320:	f7ff fd42 	bl	25da8 <ble_sm_our_pair_rand>
   26324:	4601      	mov	r1, r0
   26326:	f8cd 9010 	str.w	r9, [sp, #16]
   2632a:	9703      	str	r7, [sp, #12]
   2632c:	f8cd 8008 	str.w	r8, [sp, #8]
   26330:	f89d 301a 	ldrb.w	r3, [sp, #26]
   26334:	9301      	str	r3, [sp, #4]
   26336:	f89d 301b 	ldrb.w	r3, [sp, #27]
   2633a:	9300      	str	r3, [sp, #0]
   2633c:	f104 0317 	add.w	r3, r4, #23
   26340:	f104 0210 	add.w	r2, r4, #16
   26344:	4630      	mov	r0, r6
   26346:	f000 fbd4 	bl	26af2 <ble_sm_alg_c1>
    if (rc != 0) {
   2634a:	4606      	mov	r6, r0
   2634c:	b168      	cbz	r0, 2636a <ble_sm_lgcy_confirm_exec+0x82>
    if (txom) {
   2634e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   26350:	b108      	cbz	r0, 26356 <ble_sm_lgcy_confirm_exec+0x6e>
        os_mbuf_free_chain(txom);
   26352:	f7ef f98f 	bl	15674 <os_mbuf_free_chain>
    res->app_status = rc;
   26356:	602e      	str	r6, [r5, #0]
    res->enc_cb = 1;
   26358:	7d2b      	ldrb	r3, [r5, #20]
   2635a:	f043 0302 	orr.w	r3, r3, #2
   2635e:	752b      	strb	r3, [r5, #20]
    res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   26360:	2308      	movs	r3, #8
   26362:	712b      	strb	r3, [r5, #4]
}
   26364:	b00d      	add	sp, #52	; 0x34
   26366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = ble_sm_tx(proc->conn_handle, txom);
   2636a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2636c:	8960      	ldrh	r0, [r4, #10]
   2636e:	f7ff ff29 	bl	261c4 <ble_sm_tx>
    if (rc != 0) {
   26372:	4606      	mov	r6, r0
   26374:	2800      	cmp	r0, #0
   26376:	d1ea      	bne.n	2634e <ble_sm_lgcy_confirm_exec+0x66>
    if (!(proc->flags & BLE_SM_PROC_F_INITIATOR)) {
   26378:	7a23      	ldrb	r3, [r4, #8]
   2637a:	f013 0f01 	tst.w	r3, #1
   2637e:	d1f1      	bne.n	26364 <ble_sm_lgcy_confirm_exec+0x7c>
        proc->state = BLE_SM_PROC_STATE_RANDOM;
   26380:	2302      	movs	r3, #2
   26382:	7363      	strb	r3, [r4, #13]
   26384:	e7ee      	b.n	26364 <ble_sm_lgcy_confirm_exec+0x7c>
        rc = BLE_HS_ENOMEM;
   26386:	2606      	movs	r6, #6
   26388:	e7e1      	b.n	2634e <ble_sm_lgcy_confirm_exec+0x66>

0002638a <ble_sm_lgcy_random_exec>:

void
ble_sm_lgcy_random_exec(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   2638a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2638c:	b083      	sub	sp, #12
   2638e:	4606      	mov	r6, r0
   26390:	460c      	mov	r4, r1
    struct ble_sm_pair_random *cmd;
    struct os_mbuf *txom;
    int rc;

    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_RANDOM, sizeof(*cmd), &txom);
   26392:	aa01      	add	r2, sp, #4
   26394:	2110      	movs	r1, #16
   26396:	2004      	movs	r0, #4
   26398:	f7ff fefa 	bl	26190 <ble_sm_cmd_get>
    if (cmd == NULL) {
   2639c:	b1b8      	cbz	r0, 263ce <ble_sm_lgcy_random_exec+0x44>
   2639e:	4605      	mov	r5, r0
        res->enc_cb = 1;
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
        return;
    }

    memcpy(cmd->value, ble_sm_our_pair_rand(proc), 16);
   263a0:	4630      	mov	r0, r6
   263a2:	f7ff fd01 	bl	25da8 <ble_sm_our_pair_rand>
   263a6:	6807      	ldr	r7, [r0, #0]
   263a8:	6841      	ldr	r1, [r0, #4]
   263aa:	6882      	ldr	r2, [r0, #8]
   263ac:	68c3      	ldr	r3, [r0, #12]
   263ae:	602f      	str	r7, [r5, #0]
   263b0:	6069      	str	r1, [r5, #4]
   263b2:	60aa      	str	r2, [r5, #8]
   263b4:	60eb      	str	r3, [r5, #12]

    rc = ble_sm_tx(proc->conn_handle, txom);
   263b6:	9901      	ldr	r1, [sp, #4]
   263b8:	8970      	ldrh	r0, [r6, #10]
   263ba:	f7ff ff03 	bl	261c4 <ble_sm_tx>
    if (rc != 0) {
   263be:	b980      	cbnz	r0, 263e2 <ble_sm_lgcy_random_exec+0x58>
        res->enc_cb = 1;
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
        return;
    }

    if (!(proc->flags & BLE_SM_PROC_F_INITIATOR)) {
   263c0:	7a33      	ldrb	r3, [r6, #8]
   263c2:	f013 0f01 	tst.w	r3, #1
   263c6:	d10a      	bne.n	263de <ble_sm_lgcy_random_exec+0x54>
        proc->state = BLE_SM_PROC_STATE_LTK_START;
   263c8:	2303      	movs	r3, #3
   263ca:	7373      	strb	r3, [r6, #13]
   263cc:	e007      	b.n	263de <ble_sm_lgcy_random_exec+0x54>
        res->app_status = BLE_HS_ENOMEM;
   263ce:	2306      	movs	r3, #6
   263d0:	6023      	str	r3, [r4, #0]
        res->enc_cb = 1;
   263d2:	7d23      	ldrb	r3, [r4, #20]
   263d4:	f043 0302 	orr.w	r3, r3, #2
   263d8:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   263da:	2308      	movs	r3, #8
   263dc:	7123      	strb	r3, [r4, #4]
    }
}
   263de:	b003      	add	sp, #12
   263e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        res->app_status = rc;
   263e2:	6020      	str	r0, [r4, #0]
        res->enc_cb = 1;
   263e4:	7d23      	ldrb	r3, [r4, #20]
   263e6:	f043 0302 	orr.w	r3, r3, #2
   263ea:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   263ec:	2308      	movs	r3, #8
   263ee:	7123      	strb	r3, [r4, #4]
        return;
   263f0:	e7f5      	b.n	263de <ble_sm_lgcy_random_exec+0x54>

000263f2 <ble_sm_lgcy_random_rx>:

void
ble_sm_lgcy_random_rx(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   263f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   263f6:	b090      	sub	sp, #64	; 0x40
   263f8:	4604      	mov	r4, r0
   263fa:	460d      	mov	r5, r1
    uint8_t ra[6];
    uint8_t iat;
    uint8_t rat;
    int rc;

    ble_sm_ia_ra(proc, &iat, ia, &rat, ra);
   263fc:	ae0a      	add	r6, sp, #40	; 0x28
   263fe:	af08      	add	r7, sp, #32
   26400:	9700      	str	r7, [sp, #0]
   26402:	f10d 031e 	add.w	r3, sp, #30
   26406:	4632      	mov	r2, r6
   26408:	f10d 011f 	add.w	r1, sp, #31
   2640c:	f7fe ffe9 	bl	253e2 <ble_sm_ia_ra>

    rc = ble_sm_alg_c1(proc->tk, ble_sm_peer_pair_rand(proc), proc->pair_req,
   26410:	f104 081e 	add.w	r8, r4, #30
   26414:	4620      	mov	r0, r4
   26416:	f7ff fd21 	bl	25e5c <ble_sm_peer_pair_rand>
   2641a:	4601      	mov	r1, r0
   2641c:	ab0c      	add	r3, sp, #48	; 0x30
   2641e:	9304      	str	r3, [sp, #16]
   26420:	9703      	str	r7, [sp, #12]
   26422:	9602      	str	r6, [sp, #8]
   26424:	f89d 301e 	ldrb.w	r3, [sp, #30]
   26428:	9301      	str	r3, [sp, #4]
   2642a:	f89d 301f 	ldrb.w	r3, [sp, #31]
   2642e:	9300      	str	r3, [sp, #0]
   26430:	f104 0317 	add.w	r3, r4, #23
   26434:	f104 0210 	add.w	r2, r4, #16
   26438:	4640      	mov	r0, r8
   2643a:	f000 fb5a 	bl	26af2 <ble_sm_alg_c1>
                       proc->pair_rsp, iat, rat, ia, ra, confirm_val);
    if (rc != 0) {
   2643e:	b980      	cbnz	r0, 26462 <ble_sm_lgcy_random_rx+0x70>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
        res->enc_cb = 1;
        return;
    }

    if (memcmp(proc->confirm_peer, confirm_val, 16) != 0) {
   26440:	2210      	movs	r2, #16
   26442:	a90c      	add	r1, sp, #48	; 0x30
   26444:	f104 002e 	add.w	r0, r4, #46	; 0x2e
   26448:	f7f0 fb20 	bl	16a8c <memcmp>
   2644c:	b198      	cbz	r0, 26476 <ble_sm_lgcy_random_rx+0x84>
        /* Random number mismatch. */
        res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CONFIRM_MISMATCH);
   2644e:	f240 4304 	movw	r3, #1028	; 0x404
   26452:	602b      	str	r3, [r5, #0]
        res->sm_err = BLE_SM_ERR_CONFIRM_MISMATCH;
   26454:	2304      	movs	r3, #4
   26456:	712b      	strb	r3, [r5, #4]
        res->enc_cb = 1;
   26458:	7d2b      	ldrb	r3, [r5, #20]
   2645a:	f043 0302 	orr.w	r3, r3, #2
   2645e:	752b      	strb	r3, [r5, #20]
        return;
   26460:	e006      	b.n	26470 <ble_sm_lgcy_random_rx+0x7e>
        res->app_status = rc;
   26462:	6028      	str	r0, [r5, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   26464:	2308      	movs	r3, #8
   26466:	712b      	strb	r3, [r5, #4]
        res->enc_cb = 1;
   26468:	7d2b      	ldrb	r3, [r5, #20]
   2646a:	f043 0302 	orr.w	r3, r3, #2
   2646e:	752b      	strb	r3, [r5, #20]
         */
        proc->state = BLE_SM_PROC_STATE_ENC_START;
    }

    res->execute = 1;
}
   26470:	b010      	add	sp, #64	; 0x40
   26472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = ble_sm_gen_stk(proc);
   26476:	4620      	mov	r0, r4
   26478:	f7ff fec2 	bl	26200 <ble_sm_gen_stk>
    if (rc != 0) {
   2647c:	b950      	cbnz	r0, 26494 <ble_sm_lgcy_random_rx+0xa2>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   2647e:	7a23      	ldrb	r3, [r4, #8]
   26480:	f013 0f01 	tst.w	r3, #1
   26484:	d001      	beq.n	2648a <ble_sm_lgcy_random_rx+0x98>
        proc->state = BLE_SM_PROC_STATE_ENC_START;
   26486:	2305      	movs	r3, #5
   26488:	7363      	strb	r3, [r4, #13]
    res->execute = 1;
   2648a:	7d2b      	ldrb	r3, [r5, #20]
   2648c:	f043 0301 	orr.w	r3, r3, #1
   26490:	752b      	strb	r3, [r5, #20]
   26492:	e7ed      	b.n	26470 <ble_sm_lgcy_random_rx+0x7e>
        res->app_status = rc;
   26494:	6028      	str	r0, [r5, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   26496:	2308      	movs	r3, #8
   26498:	712b      	strb	r3, [r5, #4]
        res->enc_cb = 1;
   2649a:	7d2b      	ldrb	r3, [r5, #20]
   2649c:	f043 0302 	orr.w	r3, r3, #2
   264a0:	752b      	strb	r3, [r5, #20]
        return;
   264a2:	e7e5      	b.n	26470 <ble_sm_lgcy_random_rx+0x7e>

000264a4 <ble_store_status>:
    return rc;
}

static int
ble_store_status(struct ble_store_status_event *event)
{
   264a4:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (ble_hs_cfg.store_status_cb == NULL) {
   264a6:	4b04      	ldr	r3, [pc, #16]	; (264b8 <ble_store_status+0x14>)
   264a8:	6a1b      	ldr	r3, [r3, #32]
   264aa:	b11b      	cbz	r3, 264b4 <ble_store_status+0x10>
        rc = BLE_HS_ENOTSUP;
    } else {
        rc = ble_hs_cfg.store_status_cb(event, ble_hs_cfg.store_status_arg);
   264ac:	4a02      	ldr	r2, [pc, #8]	; (264b8 <ble_store_status+0x14>)
   264ae:	6a51      	ldr	r1, [r2, #36]	; 0x24
   264b0:	4798      	blx	r3
    }

    return rc;
}
   264b2:	bd08      	pop	{r3, pc}
        rc = BLE_HS_ENOTSUP;
   264b4:	2008      	movs	r0, #8
    return rc;
   264b6:	e7fc      	b.n	264b2 <ble_store_status+0xe>
   264b8:	100002bc 	.word	0x100002bc

000264bc <ble_store_read>:
{
   264bc:	b570      	push	{r4, r5, r6, lr}
   264be:	4604      	mov	r4, r0
   264c0:	460d      	mov	r5, r1
   264c2:	4616      	mov	r6, r2
    ble_hs_lock();
   264c4:	f7fb fb1e 	bl	21b04 <ble_hs_lock>
    if (ble_hs_cfg.store_read_cb == NULL) {
   264c8:	4b06      	ldr	r3, [pc, #24]	; (264e4 <ble_store_read+0x28>)
   264ca:	695b      	ldr	r3, [r3, #20]
   264cc:	b143      	cbz	r3, 264e0 <ble_store_read+0x24>
        rc = ble_hs_cfg.store_read_cb(obj_type, key, val);
   264ce:	4632      	mov	r2, r6
   264d0:	4629      	mov	r1, r5
   264d2:	4620      	mov	r0, r4
   264d4:	4798      	blx	r3
   264d6:	4604      	mov	r4, r0
    ble_hs_unlock();
   264d8:	f7fb fb18 	bl	21b0c <ble_hs_unlock>
}
   264dc:	4620      	mov	r0, r4
   264de:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_ENOTSUP;
   264e0:	2408      	movs	r4, #8
   264e2:	e7f9      	b.n	264d8 <ble_store_read+0x1c>
   264e4:	100002bc 	.word	0x100002bc

000264e8 <ble_store_delete>:
{
   264e8:	b538      	push	{r3, r4, r5, lr}
   264ea:	4604      	mov	r4, r0
   264ec:	460d      	mov	r5, r1
    ble_hs_lock();
   264ee:	f7fb fb09 	bl	21b04 <ble_hs_lock>
    if (ble_hs_cfg.store_delete_cb == NULL) {
   264f2:	4b06      	ldr	r3, [pc, #24]	; (2650c <ble_store_delete+0x24>)
   264f4:	69db      	ldr	r3, [r3, #28]
   264f6:	b13b      	cbz	r3, 26508 <ble_store_delete+0x20>
        rc = ble_hs_cfg.store_delete_cb(obj_type, key);
   264f8:	4629      	mov	r1, r5
   264fa:	4620      	mov	r0, r4
   264fc:	4798      	blx	r3
   264fe:	4604      	mov	r4, r0
    ble_hs_unlock();
   26500:	f7fb fb04 	bl	21b0c <ble_hs_unlock>
}
   26504:	4620      	mov	r0, r4
   26506:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTSUP;
   26508:	2408      	movs	r4, #8
   2650a:	e7f9      	b.n	26500 <ble_store_delete+0x18>
   2650c:	100002bc 	.word	0x100002bc

00026510 <ble_store_overflow_event>:

int
ble_store_overflow_event(int obj_type, const union ble_store_value *value)
{
   26510:	b500      	push	{lr}
   26512:	b085      	sub	sp, #20
    struct ble_store_status_event event;

    event.event_code = BLE_STORE_EVENT_OVERFLOW;
   26514:	2301      	movs	r3, #1
   26516:	9301      	str	r3, [sp, #4]
    event.overflow.obj_type = obj_type;
   26518:	9002      	str	r0, [sp, #8]
    event.overflow.value = value;
   2651a:	9103      	str	r1, [sp, #12]

    return ble_store_status(&event);
   2651c:	a801      	add	r0, sp, #4
   2651e:	f7ff ffc1 	bl	264a4 <ble_store_status>
}
   26522:	b005      	add	sp, #20
   26524:	f85d fb04 	ldr.w	pc, [sp], #4

00026528 <ble_store_write>:
{
   26528:	b570      	push	{r4, r5, r6, lr}
   2652a:	4606      	mov	r6, r0
   2652c:	460d      	mov	r5, r1
    if (ble_hs_cfg.store_write_cb == NULL) {
   2652e:	4b0d      	ldr	r3, [pc, #52]	; (26564 <ble_store_write+0x3c>)
   26530:	699b      	ldr	r3, [r3, #24]
   26532:	b1a3      	cbz	r3, 2655e <ble_store_write+0x36>
        ble_hs_lock();
   26534:	f7fb fae6 	bl	21b04 <ble_hs_lock>
        rc = ble_hs_cfg.store_write_cb(obj_type, val);
   26538:	4b0a      	ldr	r3, [pc, #40]	; (26564 <ble_store_write+0x3c>)
   2653a:	699b      	ldr	r3, [r3, #24]
   2653c:	4629      	mov	r1, r5
   2653e:	4630      	mov	r0, r6
   26540:	4798      	blx	r3
   26542:	4604      	mov	r4, r0
        ble_hs_unlock();
   26544:	f7fb fae2 	bl	21b0c <ble_hs_unlock>
        switch (rc) {
   26548:	b154      	cbz	r4, 26560 <ble_store_write+0x38>
   2654a:	2c1b      	cmp	r4, #27
   2654c:	d108      	bne.n	26560 <ble_store_write+0x38>
            rc = ble_store_overflow_event(obj_type, val);
   2654e:	4629      	mov	r1, r5
   26550:	4630      	mov	r0, r6
   26552:	f7ff ffdd 	bl	26510 <ble_store_overflow_event>
            if (rc != 0) {
   26556:	4604      	mov	r4, r0
   26558:	2800      	cmp	r0, #0
   2655a:	d0eb      	beq.n	26534 <ble_store_write+0xc>
   2655c:	e000      	b.n	26560 <ble_store_write+0x38>
        return BLE_HS_ENOTSUP;
   2655e:	2408      	movs	r4, #8
}
   26560:	4620      	mov	r0, r4
   26562:	bd70      	pop	{r4, r5, r6, pc}
   26564:	100002bc 	.word	0x100002bc

00026568 <ble_store_persist_sec>:
}

static int
ble_store_persist_sec(int obj_type,
                      const struct ble_store_value_sec *value_sec)
{
   26568:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(value_sec->ltk_present ||
                      value_sec->irk_present ||
                      value_sec->csrk_present);

    store_value = (void *)value_sec;
    rc = ble_store_write(obj_type, store_value);
   2656a:	f7ff ffdd 	bl	26528 <ble_store_write>
    return rc;
}
   2656e:	bd08      	pop	{r3, pc}

00026570 <ble_store_read_our_sec>:
{
   26570:	b508      	push	{r3, lr}
   26572:	460a      	mov	r2, r1
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_OUR_SEC, store_key, store_value);
   26574:	4601      	mov	r1, r0
   26576:	2001      	movs	r0, #1
   26578:	f7ff ffa0 	bl	264bc <ble_store_read>
}
   2657c:	bd08      	pop	{r3, pc}

0002657e <ble_store_write_our_sec>:

int
ble_store_write_our_sec(const struct ble_store_value_sec *value_sec)
{
   2657e:	b508      	push	{r3, lr}
   26580:	4601      	mov	r1, r0
    int rc;

    rc = ble_store_persist_sec(BLE_STORE_OBJ_TYPE_OUR_SEC, value_sec);
   26582:	2001      	movs	r0, #1
   26584:	f7ff fff0 	bl	26568 <ble_store_persist_sec>
    return rc;
}
   26588:	bd08      	pop	{r3, pc}

0002658a <ble_store_read_peer_sec>:
}

int
ble_store_read_peer_sec(const struct ble_store_key_sec *key_sec,
                        struct ble_store_value_sec *value_sec)
{
   2658a:	b508      	push	{r3, lr}
   2658c:	460a      	mov	r2, r1
    BLE_HS_DBG_ASSERT(key_sec->peer_addr.type == BLE_ADDR_PUBLIC ||
                      key_sec->peer_addr.type == BLE_ADDR_RANDOM);

    store_key = (void *)key_sec;
    store_value = (void *)value_sec;
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_PEER_SEC, store_key, store_value);
   2658e:	4601      	mov	r1, r0
   26590:	2002      	movs	r0, #2
   26592:	f7ff ff93 	bl	264bc <ble_store_read>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   26596:	bd08      	pop	{r3, pc}

00026598 <ble_store_write_peer_sec>:

int
ble_store_write_peer_sec(const struct ble_store_value_sec *value_sec)
{
   26598:	b570      	push	{r4, r5, r6, lr}
   2659a:	b082      	sub	sp, #8
   2659c:	4604      	mov	r4, r0
    int rc;

    rc = ble_store_persist_sec(BLE_STORE_OBJ_TYPE_PEER_SEC, value_sec);
   2659e:	4601      	mov	r1, r0
   265a0:	2002      	movs	r0, #2
   265a2:	f7ff ffe1 	bl	26568 <ble_store_persist_sec>
    if (rc != 0) {
   265a6:	4606      	mov	r6, r0
   265a8:	b990      	cbnz	r0, 265d0 <ble_store_write_peer_sec+0x38>
        return rc;
    }

    if (ble_addr_cmp(&value_sec->peer_addr, BLE_ADDR_ANY) &&
   265aa:	2300      	movs	r3, #0
   265ac:	9300      	str	r3, [sp, #0]
   265ae:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   265b2:	7825      	ldrb	r5, [r4, #0]
   265b4:	4628      	mov	r0, r5
    if (type_diff != 0) {
   265b6:	b92d      	cbnz	r5, 265c4 <ble_store_write_peer_sec+0x2c>
    return memcmp(a->val, b->val, sizeof(a->val));
   265b8:	2206      	movs	r2, #6
   265ba:	f10d 0101 	add.w	r1, sp, #1
   265be:	1c60      	adds	r0, r4, #1
   265c0:	f7f0 fa64 	bl	16a8c <memcmp>
   265c4:	b120      	cbz	r0, 265d0 <ble_store_write_peer_sec+0x38>
   265c6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   265ca:	f013 0f01 	tst.w	r3, #1
   265ce:	d102      	bne.n	265d6 <ble_store_write_peer_sec+0x3e>
            return rc;
        }
    }

    return 0;
}
   265d0:	4630      	mov	r0, r6
   265d2:	b002      	add	sp, #8
   265d4:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_hs_pvcy_add_entry(value_sec->peer_addr.val,
   265d6:	f104 0229 	add.w	r2, r4, #41	; 0x29
   265da:	4629      	mov	r1, r5
   265dc:	1c60      	adds	r0, r4, #1
   265de:	f7fd fb03 	bl	23be8 <ble_hs_pvcy_add_entry>
        if (rc != 0) {
   265e2:	2800      	cmp	r0, #0
   265e4:	d0f4      	beq.n	265d0 <ble_store_write_peer_sec+0x38>
            return rc;
   265e6:	4606      	mov	r6, r0
   265e8:	e7f2      	b.n	265d0 <ble_store_write_peer_sec+0x38>

000265ea <ble_store_read_cccd>:

int
ble_store_read_cccd(const struct ble_store_key_cccd *key,
                    struct ble_store_value_cccd *out_value)
{
   265ea:	b508      	push	{r3, lr}
   265ec:	460a      	mov	r2, r1
    union ble_store_key *store_key;
    int rc;

    store_key = (void *)key;
    store_value = (void *)out_value;
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_CCCD, store_key, store_value);
   265ee:	4601      	mov	r1, r0
   265f0:	2003      	movs	r0, #3
   265f2:	f7ff ff63 	bl	264bc <ble_store_read>
    return rc;
}
   265f6:	bd08      	pop	{r3, pc}

000265f8 <ble_store_write_cccd>:

int
ble_store_write_cccd(const struct ble_store_value_cccd *value)
{
   265f8:	b508      	push	{r3, lr}
   265fa:	4601      	mov	r1, r0
    union ble_store_value *store_value;
    int rc;

    store_value = (void *)value;
    rc = ble_store_write(BLE_STORE_OBJ_TYPE_CCCD, store_value);
   265fc:	2003      	movs	r0, #3
   265fe:	f7ff ff93 	bl	26528 <ble_store_write>
    return rc;
}
   26602:	bd08      	pop	{r3, pc}

00026604 <ble_store_delete_cccd>:

int
ble_store_delete_cccd(const struct ble_store_key_cccd *key)
{
   26604:	b508      	push	{r3, lr}
   26606:	4601      	mov	r1, r0
    union ble_store_key *store_key;
    int rc;

    store_key = (void *)key;
    rc = ble_store_delete(BLE_STORE_OBJ_TYPE_CCCD, store_key);
   26608:	2003      	movs	r0, #3
   2660a:	f7ff ff6d 	bl	264e8 <ble_store_delete>
    return rc;
}
   2660e:	bd08      	pop	{r3, pc}

00026610 <ble_store_key_from_value_cccd>:

void
ble_store_key_from_value_cccd(struct ble_store_key_cccd *out_key,
                              const struct ble_store_value_cccd *value)
{
   26610:	4603      	mov	r3, r0
    out_key->peer_addr = value->peer_addr;
   26612:	6808      	ldr	r0, [r1, #0]
   26614:	6018      	str	r0, [r3, #0]
   26616:	8888      	ldrh	r0, [r1, #4]
   26618:	798a      	ldrb	r2, [r1, #6]
   2661a:	8098      	strh	r0, [r3, #4]
   2661c:	719a      	strb	r2, [r3, #6]
    out_key->chr_val_handle = value->chr_val_handle;
   2661e:	890a      	ldrh	r2, [r1, #8]
   26620:	811a      	strh	r2, [r3, #8]
    out_key->idx = 0;
   26622:	2200      	movs	r2, #0
   26624:	729a      	strb	r2, [r3, #10]
}
   26626:	4770      	bx	lr

00026628 <ble_store_key_from_value_sec>:

void
ble_store_key_from_value_sec(struct ble_store_key_sec *out_key,
                             const struct ble_store_value_sec *value)
{
   26628:	4603      	mov	r3, r0
   2662a:	460a      	mov	r2, r1
    out_key->peer_addr = value->peer_addr;
   2662c:	e9d1 0100 	ldrd	r0, r1, [r1]
   26630:	6018      	str	r0, [r3, #0]
   26632:	8099      	strh	r1, [r3, #4]
   26634:	0c09      	lsrs	r1, r1, #16
   26636:	7199      	strb	r1, [r3, #6]

    out_key->ediv = value->ediv;
   26638:	8911      	ldrh	r1, [r2, #8]
   2663a:	8119      	strh	r1, [r3, #8]
    out_key->rand_num = value->rand_num;
   2663c:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
   26640:	e9c3 0104 	strd	r0, r1, [r3, #16]
    out_key->ediv_rand_present = 1;
   26644:	7e1a      	ldrb	r2, [r3, #24]
   26646:	f042 0201 	orr.w	r2, r2, #1
   2664a:	761a      	strb	r2, [r3, #24]
    out_key->idx = 0;
   2664c:	2200      	movs	r2, #0
   2664e:	765a      	strb	r2, [r3, #25]
}
   26650:	4770      	bx	lr

00026652 <ble_store_iterate>:

int
ble_store_iterate(int obj_type,
                  ble_store_iterator_fn *callback,
                  void *cookie)
{
   26652:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26656:	b09d      	sub	sp, #116	; 0x74
   26658:	4604      	mov	r4, r0
   2665a:	4688      	mov	r8, r1
   2665c:	4617      	mov	r7, r2
    int idx = 0;
    uint8_t *pidx;
    int rc;

    /* a magic value to retrieve anything */
    memset(&key, 0, sizeof(key));
   2665e:	2220      	movs	r2, #32
   26660:	2100      	movs	r1, #0
   26662:	a814      	add	r0, sp, #80	; 0x50
   26664:	f7f0 fa5b 	bl	16b1e <memset>
    switch(obj_type) {
   26668:	2c02      	cmp	r4, #2
   2666a:	dd08      	ble.n	2667e <ble_store_iterate+0x2c>
   2666c:	2c03      	cmp	r4, #3
   2666e:	d108      	bne.n	26682 <ble_store_iterate+0x30>
        case BLE_STORE_OBJ_TYPE_OUR_SEC:
            key.sec.peer_addr = *BLE_ADDR_ANY;
            pidx = &key.sec.idx;
            break;
        case BLE_STORE_OBJ_TYPE_CCCD:
            key.cccd.peer_addr = *BLE_ADDR_ANY;
   26670:	2300      	movs	r3, #0
   26672:	9314      	str	r3, [sp, #80]	; 0x50
   26674:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
            pidx = &key.cccd.idx;
   26678:	f10d 095a 	add.w	r9, sp, #90	; 0x5a
            break;
   2667c:	e009      	b.n	26692 <ble_store_iterate+0x40>
    switch(obj_type) {
   2667e:	2c00      	cmp	r4, #0
   26680:	dc01      	bgt.n	26686 <ble_store_iterate+0x34>
        default:
            BLE_HS_DBG_ASSERT(0);
            return BLE_HS_EINVAL;
   26682:	2503      	movs	r5, #3
   26684:	e011      	b.n	266aa <ble_store_iterate+0x58>
            key.sec.peer_addr = *BLE_ADDR_ANY;
   26686:	2300      	movs	r3, #0
   26688:	9314      	str	r3, [sp, #80]	; 0x50
   2668a:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
            pidx = &key.sec.idx;
   2668e:	f10d 0969 	add.w	r9, sp, #105	; 0x69
    int idx = 0;
   26692:	2600      	movs	r6, #0
    }

    while (1) {
        *pidx = idx;
   26694:	f889 6000 	strb.w	r6, [r9]
        rc = ble_store_read(obj_type, &key, &value);
   26698:	466a      	mov	r2, sp
   2669a:	a914      	add	r1, sp, #80	; 0x50
   2669c:	4620      	mov	r0, r4
   2669e:	f7ff ff0d 	bl	264bc <ble_store_read>
        switch (rc) {
   266a2:	4605      	mov	r5, r0
   266a4:	b128      	cbz	r0, 266b2 <ble_store_iterate+0x60>
   266a6:	2805      	cmp	r0, #5
   266a8:	d00e      	beq.n	266c8 <ble_store_iterate+0x76>
            return rc;
        }

        idx++;
    }
}
   266aa:	4628      	mov	r0, r5
   266ac:	b01d      	add	sp, #116	; 0x74
   266ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if (callback != NULL) {
   266b2:	f1b8 0f00 	cmp.w	r8, #0
   266b6:	d005      	beq.n	266c4 <ble_store_iterate+0x72>
                rc = callback(obj_type, &value, cookie);
   266b8:	463a      	mov	r2, r7
   266ba:	4669      	mov	r1, sp
   266bc:	4620      	mov	r0, r4
   266be:	47c0      	blx	r8
                if (rc != 0) {
   266c0:	2800      	cmp	r0, #0
   266c2:	d1f2      	bne.n	266aa <ble_store_iterate+0x58>
        idx++;
   266c4:	3601      	adds	r6, #1
        *pidx = idx;
   266c6:	e7e5      	b.n	26694 <ble_store_iterate+0x42>
        switch (rc) {
   266c8:	2500      	movs	r5, #0
   266ca:	e7ee      	b.n	266aa <ble_store_iterate+0x58>

000266cc <ble_store_util_iter_unique_peer>:

static int
ble_store_util_iter_unique_peer(int obj_type,
                                union ble_store_value *val,
                                void *arg)
{
   266cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   266ce:	460e      	mov	r6, r1
   266d0:	4615      	mov	r5, r2
                      obj_type == BLE_STORE_OBJ_TYPE_PEER_SEC);

    set = arg;

    /* Do nothing if this peer is a duplicate. */
    for (i = 0; i < set->num_peers; i++) {
   266d2:	2400      	movs	r4, #0
   266d4:	e006      	b.n	266e4 <ble_store_util_iter_unique_peer+0x18>
   266d6:	2206      	movs	r2, #6
   266d8:	1c71      	adds	r1, r6, #1
   266da:	1c78      	adds	r0, r7, #1
   266dc:	f7f0 f9d6 	bl	16a8c <memcmp>
        if (ble_addr_cmp(set->peer_id_addrs + i, &val->sec.peer_addr) == 0) {
   266e0:	b1e8      	cbz	r0, 2671e <ble_store_util_iter_unique_peer+0x52>
    for (i = 0; i < set->num_peers; i++) {
   266e2:	3401      	adds	r4, #1
   266e4:	686b      	ldr	r3, [r5, #4]
   266e6:	42a3      	cmp	r3, r4
   266e8:	dd08      	ble.n	266fc <ble_store_util_iter_unique_peer+0x30>
        if (ble_addr_cmp(set->peer_id_addrs + i, &val->sec.peer_addr) == 0) {
   266ea:	682a      	ldr	r2, [r5, #0]
   266ec:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   266f0:	18d7      	adds	r7, r2, r3
    type_diff = a->type - b->type;
   266f2:	5cd3      	ldrb	r3, [r2, r3]
   266f4:	7830      	ldrb	r0, [r6, #0]
    if (type_diff != 0) {
   266f6:	1a18      	subs	r0, r3, r0
   266f8:	d0ed      	beq.n	266d6 <ble_store_util_iter_unique_peer+0xa>
   266fa:	e7f1      	b.n	266e0 <ble_store_util_iter_unique_peer+0x14>
            return 0;
        }
    }

    if (set->num_peers >= set->max_peers) {
   266fc:	68aa      	ldr	r2, [r5, #8]
   266fe:	4293      	cmp	r3, r2
   26700:	da0e      	bge.n	26720 <ble_store_util_iter_unique_peer+0x54>
        /* Overflow; abort the iterate procedure. */
        set->status = BLE_HS_ENOMEM;
        return 1;
    }

    set->peer_id_addrs[set->num_peers] = val->sec.peer_addr;
   26702:	6829      	ldr	r1, [r5, #0]
   26704:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   26708:	18ca      	adds	r2, r1, r3
   2670a:	6830      	ldr	r0, [r6, #0]
   2670c:	50c8      	str	r0, [r1, r3]
   2670e:	88b1      	ldrh	r1, [r6, #4]
   26710:	79b3      	ldrb	r3, [r6, #6]
   26712:	8091      	strh	r1, [r2, #4]
   26714:	7193      	strb	r3, [r2, #6]
    set->num_peers++;
   26716:	686b      	ldr	r3, [r5, #4]
   26718:	3301      	adds	r3, #1
   2671a:	606b      	str	r3, [r5, #4]

    return 0;
   2671c:	2000      	movs	r0, #0
}
   2671e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        set->status = BLE_HS_ENOMEM;
   26720:	2306      	movs	r3, #6
   26722:	60eb      	str	r3, [r5, #12]
        return 1;
   26724:	2001      	movs	r0, #1
   26726:	e7fa      	b.n	2671e <ble_store_util_iter_unique_peer+0x52>

00026728 <ble_store_util_bonded_peers>:
 *                              Other nonzero on error.
 */
int
ble_store_util_bonded_peers(ble_addr_t *out_peer_id_addrs, int *out_num_peers,
                            int max_peers)
{
   26728:	b510      	push	{r4, lr}
   2672a:	b084      	sub	sp, #16
   2672c:	460c      	mov	r4, r1
    struct ble_store_util_peer_set set = {
   2672e:	9000      	str	r0, [sp, #0]
   26730:	2300      	movs	r3, #0
   26732:	9301      	str	r3, [sp, #4]
   26734:	9202      	str	r2, [sp, #8]
   26736:	9303      	str	r3, [sp, #12]
        .max_peers = max_peers,
        .status = 0,
    };
    int rc;

    rc = ble_store_iterate(BLE_STORE_OBJ_TYPE_OUR_SEC,
   26738:	466a      	mov	r2, sp
   2673a:	4906      	ldr	r1, [pc, #24]	; (26754 <ble_store_util_bonded_peers+0x2c>)
   2673c:	2001      	movs	r0, #1
   2673e:	f7ff ff88 	bl	26652 <ble_store_iterate>
                           ble_store_util_iter_unique_peer,
                           &set);
    if (rc != 0) {
   26742:	4603      	mov	r3, r0
   26744:	b918      	cbnz	r0, 2674e <ble_store_util_bonded_peers+0x26>
        return rc;
    }
    if (set.status != 0) {
   26746:	9b03      	ldr	r3, [sp, #12]
   26748:	b90b      	cbnz	r3, 2674e <ble_store_util_bonded_peers+0x26>
        return set.status;
    }

    *out_num_peers = set.num_peers;
   2674a:	9a01      	ldr	r2, [sp, #4]
   2674c:	6022      	str	r2, [r4, #0]
    return 0;
}
   2674e:	4618      	mov	r0, r3
   26750:	b004      	add	sp, #16
   26752:	bd10      	pop	{r4, pc}
   26754:	000266cd 	.word	0x000266cd

00026758 <ble_store_util_delete_all>:
 * @return                      0 on success;
 *                              Other nonzero on error.
 */
int
ble_store_util_delete_all(int type, const union ble_store_key *key)
{
   26758:	b538      	push	{r3, r4, r5, lr}
   2675a:	4605      	mov	r5, r0
   2675c:	460c      	mov	r4, r1
    int rc;

    do {
        rc = ble_store_delete(type, key);
   2675e:	4621      	mov	r1, r4
   26760:	4628      	mov	r0, r5
   26762:	f7ff fec1 	bl	264e8 <ble_store_delete>
    } while (rc == 0);
   26766:	4603      	mov	r3, r0
   26768:	2800      	cmp	r0, #0
   2676a:	d0f8      	beq.n	2675e <ble_store_util_delete_all+0x6>

    if (rc != BLE_HS_ENOENT) {
   2676c:	2805      	cmp	r0, #5
   2676e:	d100      	bne.n	26772 <ble_store_util_delete_all+0x1a>
        return rc;
    }

    return 0;
   26770:	2300      	movs	r3, #0
}
   26772:	4618      	mov	r0, r3
   26774:	bd38      	pop	{r3, r4, r5, pc}

00026776 <ble_store_util_delete_peer>:
{
   26776:	b510      	push	{r4, lr}
   26778:	b088      	sub	sp, #32
   2677a:	4604      	mov	r4, r0
    memset(&key, 0, sizeof key);
   2677c:	2220      	movs	r2, #32
   2677e:	2100      	movs	r1, #0
   26780:	4668      	mov	r0, sp
   26782:	f7f0 f9cc 	bl	16b1e <memset>
    key.sec.peer_addr = *peer_id_addr;
   26786:	6820      	ldr	r0, [r4, #0]
   26788:	9000      	str	r0, [sp, #0]
   2678a:	88a2      	ldrh	r2, [r4, #4]
   2678c:	79a3      	ldrb	r3, [r4, #6]
   2678e:	f8ad 2004 	strh.w	r2, [sp, #4]
   26792:	f88d 3006 	strb.w	r3, [sp, #6]
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_OUR_SEC, &key);
   26796:	4669      	mov	r1, sp
   26798:	2001      	movs	r0, #1
   2679a:	f7ff ffdd 	bl	26758 <ble_store_util_delete_all>
    if (rc != 0) {
   2679e:	4603      	mov	r3, r0
   267a0:	b110      	cbz	r0, 267a8 <ble_store_util_delete_peer+0x32>
}
   267a2:	4618      	mov	r0, r3
   267a4:	b008      	add	sp, #32
   267a6:	bd10      	pop	{r4, pc}
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_PEER_SEC, &key);
   267a8:	4669      	mov	r1, sp
   267aa:	2002      	movs	r0, #2
   267ac:	f7ff ffd4 	bl	26758 <ble_store_util_delete_all>
    if (rc != 0) {
   267b0:	4603      	mov	r3, r0
   267b2:	2800      	cmp	r0, #0
   267b4:	d1f5      	bne.n	267a2 <ble_store_util_delete_peer+0x2c>
    memset(&key, 0, sizeof key);
   267b6:	2220      	movs	r2, #32
   267b8:	2100      	movs	r1, #0
   267ba:	4668      	mov	r0, sp
   267bc:	f7f0 f9af 	bl	16b1e <memset>
    key.cccd.peer_addr = *peer_id_addr;
   267c0:	6820      	ldr	r0, [r4, #0]
   267c2:	9000      	str	r0, [sp, #0]
   267c4:	88a2      	ldrh	r2, [r4, #4]
   267c6:	79a3      	ldrb	r3, [r4, #6]
   267c8:	f8ad 2004 	strh.w	r2, [sp, #4]
   267cc:	f88d 3006 	strb.w	r3, [sp, #6]
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_CCCD, &key);
   267d0:	4669      	mov	r1, sp
   267d2:	2003      	movs	r0, #3
   267d4:	f7ff ffc0 	bl	26758 <ble_store_util_delete_all>
   267d8:	4603      	mov	r3, r0
    if (rc != 0) {
   267da:	e7e2      	b.n	267a2 <ble_store_util_delete_peer+0x2c>

000267dc <ble_store_util_status_rr>:
 * uninteresting peers could cause important bonds to be deleted.  This is
 * useful for demonstrations and sample apps.
 */
int
ble_store_util_status_rr(struct ble_store_status_event *event, void *arg)
{
   267dc:	b508      	push	{r3, lr}
    switch (event->event_code) {
   267de:	6803      	ldr	r3, [r0, #0]
   267e0:	2b01      	cmp	r3, #1
   267e2:	d003      	beq.n	267ec <ble_store_util_status_rr+0x10>
   267e4:	2b02      	cmp	r3, #2
   267e6:	d113      	bne.n	26810 <ble_store_util_status_rr+0x34>
   267e8:	2000      	movs	r0, #0
        return 0;

    default:
        return BLE_HS_EUNKNOWN;
    }
}
   267ea:	bd08      	pop	{r3, pc}
        switch (event->overflow.obj_type) {
   267ec:	6843      	ldr	r3, [r0, #4]
   267ee:	2b02      	cmp	r3, #2
   267f0:	dd05      	ble.n	267fe <ble_store_util_status_rr+0x22>
   267f2:	2b03      	cmp	r3, #3
   267f4:	d107      	bne.n	26806 <ble_store_util_status_rr+0x2a>
            return ble_gap_unpair_oldest_except(&event->overflow.value->cccd.peer_addr);
   267f6:	6880      	ldr	r0, [r0, #8]
   267f8:	f7f8 ff13 	bl	1f622 <ble_gap_unpair_oldest_except>
   267fc:	e7f5      	b.n	267ea <ble_store_util_status_rr+0xe>
        switch (event->overflow.obj_type) {
   267fe:	2b00      	cmp	r3, #0
   26800:	dc03      	bgt.n	2680a <ble_store_util_status_rr+0x2e>
   26802:	2011      	movs	r0, #17
   26804:	e7f1      	b.n	267ea <ble_store_util_status_rr+0xe>
   26806:	2011      	movs	r0, #17
   26808:	e7ef      	b.n	267ea <ble_store_util_status_rr+0xe>
            return ble_gap_unpair_oldest_peer();
   2680a:	f7f8 fef8 	bl	1f5fe <ble_gap_unpair_oldest_peer>
   2680e:	e7ec      	b.n	267ea <ble_store_util_status_rr+0xe>
        return BLE_HS_EUNKNOWN;
   26810:	2011      	movs	r0, #17
   26812:	e7ea      	b.n	267ea <ble_store_util_status_rr+0xe>

00026814 <ble_uuid_init_from_buf>:
#define VERIFY_UUID(uuid)
#endif

int
ble_uuid_init_from_buf(ble_uuid_any_t *uuid, const void *buf, size_t len)
{
   26814:	b570      	push	{r4, r5, r6, lr}
   26816:	4604      	mov	r4, r0
   26818:	4608      	mov	r0, r1
    switch (len) {
   2681a:	2a04      	cmp	r2, #4
   2681c:	d00c      	beq.n	26838 <ble_uuid_init_from_buf+0x24>
   2681e:	2a10      	cmp	r2, #16
   26820:	d011      	beq.n	26846 <ble_uuid_init_from_buf+0x32>
   26822:	2a02      	cmp	r2, #2
   26824:	d001      	beq.n	2682a <ble_uuid_init_from_buf+0x16>
   26826:	2003      	movs	r0, #3
        memcpy(uuid->u128.value, buf, 16);
        return 0;
    }

    return BLE_HS_EINVAL;
}
   26828:	bd70      	pop	{r4, r5, r6, pc}
        uuid->u.type = BLE_UUID_TYPE_16;
   2682a:	2310      	movs	r3, #16
   2682c:	7023      	strb	r3, [r4, #0]
        uuid->u16.value = get_le16(buf);
   2682e:	f006 fe41 	bl	2d4b4 <get_le16>
   26832:	8060      	strh	r0, [r4, #2]
        return 0;
   26834:	2000      	movs	r0, #0
   26836:	e7f7      	b.n	26828 <ble_uuid_init_from_buf+0x14>
        uuid->u.type = BLE_UUID_TYPE_32;
   26838:	2320      	movs	r3, #32
   2683a:	7023      	strb	r3, [r4, #0]
        uuid->u32.value = get_le32(buf);
   2683c:	f006 fe3f 	bl	2d4be <get_le32>
   26840:	6060      	str	r0, [r4, #4]
        return 0;
   26842:	2000      	movs	r0, #0
   26844:	e7f0      	b.n	26828 <ble_uuid_init_from_buf+0x14>
        uuid->u.type = BLE_UUID_TYPE_128;
   26846:	4623      	mov	r3, r4
   26848:	2280      	movs	r2, #128	; 0x80
   2684a:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(uuid->u128.value, buf, 16);
   2684e:	680e      	ldr	r6, [r1, #0]
   26850:	684d      	ldr	r5, [r1, #4]
   26852:	6889      	ldr	r1, [r1, #8]
   26854:	68c2      	ldr	r2, [r0, #12]
   26856:	f8c4 6001 	str.w	r6, [r4, #1]
   2685a:	605d      	str	r5, [r3, #4]
   2685c:	6099      	str	r1, [r3, #8]
   2685e:	60da      	str	r2, [r3, #12]
        return 0;
   26860:	2000      	movs	r0, #0
   26862:	e7e1      	b.n	26828 <ble_uuid_init_from_buf+0x14>

00026864 <ble_uuid_cmp>:

int
ble_uuid_cmp(const ble_uuid_t *uuid1, const ble_uuid_t *uuid2)
{
   26864:	b508      	push	{r3, lr}
    VERIFY_UUID(uuid1);
    VERIFY_UUID(uuid2);

    if (uuid1->type != uuid2->type) {
   26866:	7803      	ldrb	r3, [r0, #0]
   26868:	780a      	ldrb	r2, [r1, #0]
   2686a:	4293      	cmp	r3, r2
   2686c:	d001      	beq.n	26872 <ble_uuid_cmp+0xe>
      return uuid1->type - uuid2->type;
   2686e:	1a98      	subs	r0, r3, r2
    }

    BLE_HS_DBG_ASSERT(0);

    return -1;
}
   26870:	bd08      	pop	{r3, pc}
    switch (uuid1->type) {
   26872:	2b20      	cmp	r3, #32
   26874:	d00a      	beq.n	2688c <ble_uuid_cmp+0x28>
   26876:	2b80      	cmp	r3, #128	; 0x80
   26878:	d00c      	beq.n	26894 <ble_uuid_cmp+0x30>
   2687a:	2b10      	cmp	r3, #16
   2687c:	d002      	beq.n	26884 <ble_uuid_cmp+0x20>
   2687e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26882:	e7f5      	b.n	26870 <ble_uuid_cmp+0xc>
        return (int) BLE_UUID16(uuid1)->value - (int) BLE_UUID16(uuid2)->value;
   26884:	8840      	ldrh	r0, [r0, #2]
   26886:	884b      	ldrh	r3, [r1, #2]
   26888:	1ac0      	subs	r0, r0, r3
   2688a:	e7f1      	b.n	26870 <ble_uuid_cmp+0xc>
        return (int) BLE_UUID32(uuid1)->value - (int) BLE_UUID32(uuid2)->value;
   2688c:	6840      	ldr	r0, [r0, #4]
   2688e:	684b      	ldr	r3, [r1, #4]
   26890:	1ac0      	subs	r0, r0, r3
   26892:	e7ed      	b.n	26870 <ble_uuid_cmp+0xc>
        return memcmp(BLE_UUID128(uuid1)->value, BLE_UUID128(uuid2)->value, 16);
   26894:	2210      	movs	r2, #16
   26896:	3101      	adds	r1, #1
   26898:	3001      	adds	r0, #1
   2689a:	f7f0 f8f7 	bl	16a8c <memcmp>
   2689e:	e7e7      	b.n	26870 <ble_uuid_cmp+0xc>

000268a0 <ble_uuid_to_str>:
    }
}

char *
ble_uuid_to_str(const ble_uuid_t *uuid, char *dst)
{
   268a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   268a4:	b091      	sub	sp, #68	; 0x44
   268a6:	4688      	mov	r8, r1
    const uint8_t *u8p;

    switch (uuid->type) {
   268a8:	7803      	ldrb	r3, [r0, #0]
   268aa:	2b20      	cmp	r3, #32
   268ac:	d00f      	beq.n	268ce <ble_uuid_to_str+0x2e>
   268ae:	2b80      	cmp	r3, #128	; 0x80
   268b0:	d013      	beq.n	268da <ble_uuid_to_str+0x3a>
   268b2:	2b10      	cmp	r3, #16
   268b4:	d002      	beq.n	268bc <ble_uuid_to_str+0x1c>
                u8p[11], u8p[10],  u8p[9],  u8p[8],
                 u8p[7],  u8p[6],  u8p[5],  u8p[4],
                 u8p[3],  u8p[2],  u8p[1],  u8p[0]);
        break;
    default:
        dst[0] = '\0';
   268b6:	2300      	movs	r3, #0
   268b8:	700b      	strb	r3, [r1, #0]
        break;
   268ba:	e004      	b.n	268c6 <ble_uuid_to_str+0x26>
        sprintf(dst, "0x%04" PRIx16, BLE_UUID16(uuid)->value);
   268bc:	8842      	ldrh	r2, [r0, #2]
   268be:	491f      	ldr	r1, [pc, #124]	; (2693c <ble_uuid_to_str+0x9c>)
   268c0:	4640      	mov	r0, r8
   268c2:	f006 ffe9 	bl	2d898 <sprintf>
    }

    return dst;
}
   268c6:	4640      	mov	r0, r8
   268c8:	b011      	add	sp, #68	; 0x44
   268ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        sprintf(dst, "0x%08" PRIx32, BLE_UUID32(uuid)->value);
   268ce:	6842      	ldr	r2, [r0, #4]
   268d0:	491b      	ldr	r1, [pc, #108]	; (26940 <ble_uuid_to_str+0xa0>)
   268d2:	4640      	mov	r0, r8
   268d4:	f006 ffe0 	bl	2d898 <sprintf>
        break;
   268d8:	e7f5      	b.n	268c6 <ble_uuid_to_str+0x26>
                u8p[15], u8p[14], u8p[13], u8p[12],
   268da:	7b83      	ldrb	r3, [r0, #14]
   268dc:	930e      	str	r3, [sp, #56]	; 0x38
   268de:	7b42      	ldrb	r2, [r0, #13]
                u8p[11], u8p[10],  u8p[9],  u8p[8],
   268e0:	7b01      	ldrb	r1, [r0, #12]
   268e2:	7ac4      	ldrb	r4, [r0, #11]
   268e4:	940f      	str	r4, [sp, #60]	; 0x3c
   268e6:	7a84      	ldrb	r4, [r0, #10]
   268e8:	7a45      	ldrb	r5, [r0, #9]
                 u8p[7],  u8p[6],  u8p[5],  u8p[4],
   268ea:	7a06      	ldrb	r6, [r0, #8]
   268ec:	79c7      	ldrb	r7, [r0, #7]
   268ee:	f890 c006 	ldrb.w	ip, [r0, #6]
   268f2:	f890 e005 	ldrb.w	lr, [r0, #5]
                 u8p[3],  u8p[2],  u8p[1],  u8p[0]);
   268f6:	7903      	ldrb	r3, [r0, #4]
   268f8:	f890 9003 	ldrb.w	r9, [r0, #3]
   268fc:	f890 a002 	ldrb.w	sl, [r0, #2]
   26900:	f890 b001 	ldrb.w	fp, [r0, #1]
        sprintf(dst, "%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-"
   26904:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   26908:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
   2690c:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   26910:	930a      	str	r3, [sp, #40]	; 0x28
   26912:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
   26916:	f8cd c020 	str.w	ip, [sp, #32]
   2691a:	9707      	str	r7, [sp, #28]
   2691c:	9606      	str	r6, [sp, #24]
   2691e:	9505      	str	r5, [sp, #20]
   26920:	9404      	str	r4, [sp, #16]
   26922:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   26924:	9403      	str	r4, [sp, #12]
   26926:	9102      	str	r1, [sp, #8]
   26928:	9201      	str	r2, [sp, #4]
   2692a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2692c:	9300      	str	r3, [sp, #0]
   2692e:	7bc3      	ldrb	r3, [r0, #15]
   26930:	7c02      	ldrb	r2, [r0, #16]
   26932:	4904      	ldr	r1, [pc, #16]	; (26944 <ble_uuid_to_str+0xa4>)
   26934:	4640      	mov	r0, r8
   26936:	f006 ffaf 	bl	2d898 <sprintf>
        break;
   2693a:	e7c4      	b.n	268c6 <ble_uuid_to_str+0x26>
   2693c:	000313cc 	.word	0x000313cc
   26940:	000313d4 	.word	0x000313d4
   26944:	000313dc 	.word	0x000313dc

00026948 <ble_uuid_u16>:
uint16_t
ble_uuid_u16(const ble_uuid_t *uuid)
{
    VERIFY_UUID(uuid);

    return uuid->type == BLE_UUID_TYPE_16 ? BLE_UUID16(uuid)->value : 0;
   26948:	7803      	ldrb	r3, [r0, #0]
   2694a:	2b10      	cmp	r3, #16
   2694c:	d001      	beq.n	26952 <ble_uuid_u16+0xa>
   2694e:	2000      	movs	r0, #0
}
   26950:	4770      	bx	lr
    return uuid->type == BLE_UUID_TYPE_16 ? BLE_UUID16(uuid)->value : 0;
   26952:	8840      	ldrh	r0, [r0, #2]
   26954:	4770      	bx	lr

00026956 <ble_uuid_init_from_att_buf>:
    return rc;
}

int
ble_uuid_init_from_att_buf(ble_uuid_any_t *uuid, const void *buf, size_t len)
{
   26956:	b570      	push	{r4, r5, r6, lr}
   26958:	4604      	mov	r4, r0
    int rc = 0;

    if (len == 2) {
   2695a:	2a02      	cmp	r2, #2
   2695c:	d003      	beq.n	26966 <ble_uuid_init_from_att_buf+0x10>
        uuid->u.type = BLE_UUID_TYPE_16;
        uuid->u16.value = get_le16(buf);
    } else if (len == 16) {
   2695e:	2a10      	cmp	r2, #16
   26960:	d009      	beq.n	26976 <ble_uuid_init_from_att_buf+0x20>
        uuid->u.type = BLE_UUID_TYPE_128;
        memcpy(uuid->u128.value, buf, 16);
    } else {
        rc = BLE_HS_EINVAL;
   26962:	2003      	movs	r0, #3
    }

    return rc;
}
   26964:	bd70      	pop	{r4, r5, r6, pc}
        uuid->u.type = BLE_UUID_TYPE_16;
   26966:	2310      	movs	r3, #16
   26968:	7003      	strb	r3, [r0, #0]
        uuid->u16.value = get_le16(buf);
   2696a:	4608      	mov	r0, r1
   2696c:	f006 fda2 	bl	2d4b4 <get_le16>
   26970:	8060      	strh	r0, [r4, #2]
    int rc = 0;
   26972:	2000      	movs	r0, #0
   26974:	e7f6      	b.n	26964 <ble_uuid_init_from_att_buf+0xe>
        uuid->u.type = BLE_UUID_TYPE_128;
   26976:	4603      	mov	r3, r0
   26978:	2280      	movs	r2, #128	; 0x80
   2697a:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(uuid->u128.value, buf, 16);
   2697e:	680e      	ldr	r6, [r1, #0]
   26980:	684d      	ldr	r5, [r1, #4]
   26982:	6888      	ldr	r0, [r1, #8]
   26984:	68ca      	ldr	r2, [r1, #12]
   26986:	f8c4 6001 	str.w	r6, [r4, #1]
   2698a:	605d      	str	r5, [r3, #4]
   2698c:	6098      	str	r0, [r3, #8]
   2698e:	60da      	str	r2, [r3, #12]
    int rc = 0;
   26990:	2000      	movs	r0, #0
   26992:	e7e7      	b.n	26964 <ble_uuid_init_from_att_buf+0xe>

00026994 <ble_uuid_init_from_att_mbuf>:
{
   26994:	b530      	push	{r4, r5, lr}
   26996:	b085      	sub	sp, #20
   26998:	4605      	mov	r5, r0
   2699a:	4608      	mov	r0, r1
   2699c:	4611      	mov	r1, r2
   2699e:	461c      	mov	r4, r3
    rc = os_mbuf_copydata(om, off, len, val);
   269a0:	466b      	mov	r3, sp
   269a2:	4622      	mov	r2, r4
   269a4:	f7ee ff10 	bl	157c8 <os_mbuf_copydata>
    if (rc != 0) {
   269a8:	b108      	cbz	r0, 269ae <ble_uuid_init_from_att_mbuf+0x1a>
}
   269aa:	b005      	add	sp, #20
   269ac:	bd30      	pop	{r4, r5, pc}
    rc = ble_uuid_init_from_att_buf(uuid, val, len);
   269ae:	4622      	mov	r2, r4
   269b0:	4669      	mov	r1, sp
   269b2:	4628      	mov	r0, r5
   269b4:	f7ff ffcf 	bl	26956 <ble_uuid_init_from_att_buf>
    return rc;
   269b8:	e7f7      	b.n	269aa <ble_uuid_init_from_att_mbuf+0x16>
	...

000269bc <ble_uuid_flat>:
    return 0;
}

int
ble_uuid_flat(const ble_uuid_t *uuid, void *dst)
{
   269bc:	b570      	push	{r4, r5, r6, lr}
   269be:	4605      	mov	r5, r0
   269c0:	460c      	mov	r4, r1
    VERIFY_UUID(uuid);

    switch (uuid->type) {
   269c2:	7803      	ldrb	r3, [r0, #0]
   269c4:	2b20      	cmp	r3, #32
   269c6:	d00b      	beq.n	269e0 <ble_uuid_flat+0x24>
   269c8:	2b80      	cmp	r3, #128	; 0x80
   269ca:	d016      	beq.n	269fa <ble_uuid_flat+0x3e>
   269cc:	2b10      	cmp	r3, #16
   269ce:	d001      	beq.n	269d4 <ble_uuid_flat+0x18>
   269d0:	2003      	movs	r0, #3
    default:
        return BLE_HS_EINVAL;
    }

    return 0;
}
   269d2:	bd70      	pop	{r4, r5, r6, pc}
        put_le16(dst, BLE_UUID16(uuid)->value);
   269d4:	8841      	ldrh	r1, [r0, #2]
   269d6:	4620      	mov	r0, r4
   269d8:	f006 fd5e 	bl	2d498 <put_le16>
    return 0;
   269dc:	2000      	movs	r0, #0
        break;
   269de:	e7f8      	b.n	269d2 <ble_uuid_flat+0x16>
        memcpy(dst, ble_uuid_base, 16);
   269e0:	4e0b      	ldr	r6, [pc, #44]	; (26a10 <ble_uuid_flat+0x54>)
   269e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   269e4:	6020      	str	r0, [r4, #0]
   269e6:	6061      	str	r1, [r4, #4]
   269e8:	60a2      	str	r2, [r4, #8]
   269ea:	4620      	mov	r0, r4
   269ec:	f840 3f0c 	str.w	r3, [r0, #12]!
        put_le32(dst + 12, BLE_UUID32(uuid)->value);
   269f0:	6869      	ldr	r1, [r5, #4]
   269f2:	f006 fd55 	bl	2d4a0 <put_le32>
    return 0;
   269f6:	2000      	movs	r0, #0
        break;
   269f8:	e7eb      	b.n	269d2 <ble_uuid_flat+0x16>
        memcpy(dst, BLE_UUID128(uuid)->value, 16);
   269fa:	f855 0f01 	ldr.w	r0, [r5, #1]!
   269fe:	6869      	ldr	r1, [r5, #4]
   26a00:	68aa      	ldr	r2, [r5, #8]
   26a02:	68eb      	ldr	r3, [r5, #12]
   26a04:	6020      	str	r0, [r4, #0]
   26a06:	6061      	str	r1, [r4, #4]
   26a08:	60a2      	str	r2, [r4, #8]
   26a0a:	60e3      	str	r3, [r4, #12]
    return 0;
   26a0c:	2000      	movs	r0, #0
        break;
   26a0e:	e7e0      	b.n	269d2 <ble_uuid_flat+0x16>
   26a10:	00031424 	.word	0x00031424

00026a14 <ble_uuid_length>:
int
ble_uuid_length(const ble_uuid_t *uuid)
{
    VERIFY_UUID(uuid);

    return uuid->type >> 3;
   26a14:	7800      	ldrb	r0, [r0, #0]
}
   26a16:	08c0      	lsrs	r0, r0, #3
   26a18:	4770      	bx	lr

00026a1a <ble_uuid_to_mbuf>:
{
   26a1a:	b538      	push	{r3, r4, r5, lr}
   26a1c:	4605      	mov	r5, r0
   26a1e:	460c      	mov	r4, r1
    len = ble_uuid_length(uuid);
   26a20:	f7ff fff8 	bl	26a14 <ble_uuid_length>
    buf = os_mbuf_extend(om, len);
   26a24:	b281      	uxth	r1, r0
   26a26:	4620      	mov	r0, r4
   26a28:	f7ef f851 	bl	15ace <os_mbuf_extend>
    if (buf == NULL) {
   26a2c:	b128      	cbz	r0, 26a3a <ble_uuid_to_mbuf+0x20>
   26a2e:	4601      	mov	r1, r0
    ble_uuid_flat(uuid, buf);
   26a30:	4628      	mov	r0, r5
   26a32:	f7ff ffc3 	bl	269bc <ble_uuid_flat>
    return 0;
   26a36:	2000      	movs	r0, #0
}
   26a38:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOMEM;
   26a3a:	2006      	movs	r0, #6
   26a3c:	e7fc      	b.n	26a38 <ble_uuid_to_mbuf+0x1e>

00026a3e <ble_sm_alg_xor_128>:
static void
ble_sm_alg_xor_128(const uint8_t *p, const uint8_t *q, uint8_t *r)
{
    int i;

    for (i = 0; i < 16; i++) {
   26a3e:	2300      	movs	r3, #0
   26a40:	2b0f      	cmp	r3, #15
   26a42:	dc09      	bgt.n	26a58 <ble_sm_alg_xor_128+0x1a>
{
   26a44:	b430      	push	{r4, r5}
        r[i] = p[i] ^ q[i];
   26a46:	5cc4      	ldrb	r4, [r0, r3]
   26a48:	5ccd      	ldrb	r5, [r1, r3]
   26a4a:	406c      	eors	r4, r5
   26a4c:	54d4      	strb	r4, [r2, r3]
    for (i = 0; i < 16; i++) {
   26a4e:	3301      	adds	r3, #1
   26a50:	2b0f      	cmp	r3, #15
   26a52:	ddf8      	ble.n	26a46 <ble_sm_alg_xor_128+0x8>
    }
}
   26a54:	bc30      	pop	{r4, r5}
   26a56:	4770      	bx	lr
   26a58:	4770      	bx	lr

00026a5a <ble_sm_alg_encrypt>:

static int
ble_sm_alg_encrypt(const uint8_t *key, const uint8_t *plaintext,
                   uint8_t *enc_data)
{
   26a5a:	b530      	push	{r4, r5, lr}
   26a5c:	b0b1      	sub	sp, #196	; 0xc4
   26a5e:	460d      	mov	r5, r1
   26a60:	4614      	mov	r4, r2
    struct tc_aes_key_sched_struct s;
    uint8_t tmp[16];

    swap_buf(tmp, key, 16);
   26a62:	2210      	movs	r2, #16
   26a64:	4601      	mov	r1, r0
   26a66:	4668      	mov	r0, sp
   26a68:	f006 fd44 	bl	2d4f4 <swap_buf>

    if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   26a6c:	4669      	mov	r1, sp
   26a6e:	a804      	add	r0, sp, #16
   26a70:	f001 fbee 	bl	28250 <tc_aes128_set_encrypt_key>
   26a74:	b188      	cbz	r0, 26a9a <ble_sm_alg_encrypt+0x40>
        return BLE_HS_EUNKNOWN;
    }

    swap_buf(tmp, plaintext, 16);
   26a76:	2210      	movs	r2, #16
   26a78:	4629      	mov	r1, r5
   26a7a:	4668      	mov	r0, sp
   26a7c:	f006 fd3a 	bl	2d4f4 <swap_buf>

    if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   26a80:	aa04      	add	r2, sp, #16
   26a82:	4669      	mov	r1, sp
   26a84:	4620      	mov	r0, r4
   26a86:	f001 fc41 	bl	2830c <tc_aes_encrypt>
   26a8a:	b140      	cbz	r0, 26a9e <ble_sm_alg_encrypt+0x44>
        return BLE_HS_EUNKNOWN;
    }

    swap_in_place(enc_data, 16);
   26a8c:	2110      	movs	r1, #16
   26a8e:	4620      	mov	r0, r4
   26a90:	f006 fd20 	bl	2d4d4 <swap_in_place>

    return 0;
   26a94:	2000      	movs	r0, #0
}
   26a96:	b031      	add	sp, #196	; 0xc4
   26a98:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EUNKNOWN;
   26a9a:	2011      	movs	r0, #17
   26a9c:	e7fb      	b.n	26a96 <ble_sm_alg_encrypt+0x3c>
        return BLE_HS_EUNKNOWN;
   26a9e:	2011      	movs	r0, #17
   26aa0:	e7f9      	b.n	26a96 <ble_sm_alg_encrypt+0x3c>

00026aa2 <ble_sm_alg_s1>:

int
ble_sm_alg_s1(const uint8_t *k, const uint8_t *r1, const uint8_t *r2,
              uint8_t *out)
{
   26aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26aa6:	4607      	mov	r7, r0
   26aa8:	460e      	mov	r6, r1
   26aaa:	4615      	mov	r5, r2
   26aac:	461c      	mov	r4, r3
     * r1' is concatenated with r2' to generate r' which is used as
     * the 128-bit input parameter plaintextData to security function e:
     *
     *    r' = r1' || r2'
     */
    memcpy(out, r2, 8);
   26aae:	6812      	ldr	r2, [r2, #0]
   26ab0:	686b      	ldr	r3, [r5, #4]
   26ab2:	6022      	str	r2, [r4, #0]
   26ab4:	6063      	str	r3, [r4, #4]
    memcpy(out + 8, r1, 8);
   26ab6:	680a      	ldr	r2, [r1, #0]
   26ab8:	684b      	ldr	r3, [r1, #4]
   26aba:	60a2      	str	r2, [r4, #8]
   26abc:	60e3      	str	r3, [r4, #12]

    /* s1(k, r1 , r2) = e(k, r') */
    rc = ble_sm_alg_encrypt(k, out, out);
   26abe:	4622      	mov	r2, r4
   26ac0:	4621      	mov	r1, r4
   26ac2:	f7ff ffca 	bl	26a5a <ble_sm_alg_encrypt>
    if (rc != 0) {
   26ac6:	4680      	mov	r8, r0
   26ac8:	b110      	cbz	r0, 26ad0 <ble_sm_alg_s1+0x2e>
    BLE_HS_LOG(DEBUG, "\n    out=");
    ble_hs_log_flat_buf(out, 16);
    BLE_HS_LOG(DEBUG, "\n");

    return 0;
}
   26aca:	4640      	mov	r0, r8
   26acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_log_flat_buf(k, 16);
   26ad0:	2110      	movs	r1, #16
   26ad2:	4638      	mov	r0, r7
   26ad4:	f7fc feda 	bl	2388c <ble_hs_log_flat_buf>
    ble_hs_log_flat_buf(r1, 16);
   26ad8:	2110      	movs	r1, #16
   26ada:	4630      	mov	r0, r6
   26adc:	f7fc fed6 	bl	2388c <ble_hs_log_flat_buf>
    ble_hs_log_flat_buf(r2, 16);
   26ae0:	2110      	movs	r1, #16
   26ae2:	4628      	mov	r0, r5
   26ae4:	f7fc fed2 	bl	2388c <ble_hs_log_flat_buf>
    ble_hs_log_flat_buf(out, 16);
   26ae8:	2110      	movs	r1, #16
   26aea:	4620      	mov	r0, r4
   26aec:	f7fc fece 	bl	2388c <ble_hs_log_flat_buf>
    return 0;
   26af0:	e7eb      	b.n	26aca <ble_sm_alg_s1+0x28>

00026af2 <ble_sm_alg_c1>:
ble_sm_alg_c1(const uint8_t *k, const uint8_t *r,
              const uint8_t *preq, const uint8_t *pres,
              uint8_t iat, uint8_t rat,
              const uint8_t *ia, const uint8_t *ra,
              uint8_t *out_enc_data)
{
   26af2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26af6:	b088      	sub	sp, #32
   26af8:	4680      	mov	r8, r0
   26afa:	460f      	mov	r7, r1
   26afc:	4615      	mov	r5, r2
   26afe:	461c      	mov	r4, r3
   26b00:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   26b04:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   26b08:	9e14      	ldr	r6, [sp, #80]	; 0x50
    uint8_t p1[16], p2[16];
    int rc;

    BLE_HS_LOG(DEBUG, "ble_sm_alg_c1()\n    k=");
    ble_hs_log_flat_buf(k, 16);
   26b0a:	2110      	movs	r1, #16
   26b0c:	f7fc febe 	bl	2388c <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    r=");
    ble_hs_log_flat_buf(r, 16);
   26b10:	2110      	movs	r1, #16
   26b12:	4638      	mov	r0, r7
   26b14:	f7fc feba 	bl	2388c <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    iat=%d rat=%d", iat, rat);
    BLE_HS_LOG(DEBUG, "\n    ia=");
    ble_hs_log_flat_buf(ia, 6);
   26b18:	2106      	movs	r1, #6
   26b1a:	4648      	mov	r0, r9
   26b1c:	f7fc feb6 	bl	2388c <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    ra=");
    ble_hs_log_flat_buf(ra, 6);
   26b20:	2106      	movs	r1, #6
   26b22:	4650      	mov	r0, sl
   26b24:	f7fc feb2 	bl	2388c <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    preq=");
    ble_hs_log_flat_buf(preq, 7);
   26b28:	2107      	movs	r1, #7
   26b2a:	4628      	mov	r0, r5
   26b2c:	f7fc feae 	bl	2388c <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    pres=");
    ble_hs_log_flat_buf(pres, 7);
   26b30:	2107      	movs	r1, #7
   26b32:	4620      	mov	r0, r4
   26b34:	f7fc feaa 	bl	2388c <ble_hs_log_flat_buf>

    /* pres, preq, rat and iat are concatenated to generate p1 */
    p1[0] = iat;
   26b38:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   26b3c:	f88d 3010 	strb.w	r3, [sp, #16]
    p1[1] = rat;
   26b40:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   26b44:	f88d 3011 	strb.w	r3, [sp, #17]
    memcpy(p1 + 2, preq, 7);
   26b48:	682b      	ldr	r3, [r5, #0]
   26b4a:	f8cd 3012 	str.w	r3, [sp, #18]
   26b4e:	88aa      	ldrh	r2, [r5, #4]
   26b50:	79ab      	ldrb	r3, [r5, #6]
   26b52:	f8ad 2016 	strh.w	r2, [sp, #22]
   26b56:	f88d 3018 	strb.w	r3, [sp, #24]
    memcpy(p1 + 9, pres, 7);
   26b5a:	6823      	ldr	r3, [r4, #0]
   26b5c:	f8cd 3019 	str.w	r3, [sp, #25]
   26b60:	88a2      	ldrh	r2, [r4, #4]
   26b62:	79a3      	ldrb	r3, [r4, #6]
   26b64:	f8ad 201d 	strh.w	r2, [sp, #29]
   26b68:	f88d 301f 	strb.w	r3, [sp, #31]

    BLE_HS_LOG(DEBUG, "\n    p1=");
    ble_hs_log_flat_buf(p1, sizeof p1);
   26b6c:	2110      	movs	r1, #16
   26b6e:	eb0d 0001 	add.w	r0, sp, r1
   26b72:	f7fc fe8b 	bl	2388c <ble_hs_log_flat_buf>

    /* c1 = e(k, e(k, r XOR p1) XOR p2) */

    /* Using out_enc_data as temporary output buffer */
    ble_sm_alg_xor_128(r, p1, out_enc_data);
   26b76:	4632      	mov	r2, r6
   26b78:	a904      	add	r1, sp, #16
   26b7a:	4638      	mov	r0, r7
   26b7c:	f7ff ff5f 	bl	26a3e <ble_sm_alg_xor_128>

    rc = ble_sm_alg_encrypt(k, out_enc_data, out_enc_data);
   26b80:	4632      	mov	r2, r6
   26b82:	4631      	mov	r1, r6
   26b84:	4640      	mov	r0, r8
   26b86:	f7ff ff68 	bl	26a5a <ble_sm_alg_encrypt>
    if (rc != 0) {
   26b8a:	bb40      	cbnz	r0, 26bde <ble_sm_alg_c1+0xec>
        rc = BLE_HS_EUNKNOWN;
        goto done;
    }

    /* ra is concatenated with ia and padding to generate p2 */
    memcpy(p2, ra, 6);
   26b8c:	f8da 0000 	ldr.w	r0, [sl]
   26b90:	9000      	str	r0, [sp, #0]
   26b92:	f8ba 3004 	ldrh.w	r3, [sl, #4]
   26b96:	f8ad 3004 	strh.w	r3, [sp, #4]
    memcpy(p2 + 6, ia, 6);
   26b9a:	f8d9 3000 	ldr.w	r3, [r9]
   26b9e:	f8cd 3006 	str.w	r3, [sp, #6]
   26ba2:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   26ba6:	f8ad 300a 	strh.w	r3, [sp, #10]
    memset(p2 + 12, 0, 4);
   26baa:	2300      	movs	r3, #0
   26bac:	9303      	str	r3, [sp, #12]

    BLE_HS_LOG(DEBUG, "\n    p2=");
    ble_hs_log_flat_buf(p2, sizeof p2);
   26bae:	2110      	movs	r1, #16
   26bb0:	4668      	mov	r0, sp
   26bb2:	f7fc fe6b 	bl	2388c <ble_hs_log_flat_buf>

    ble_sm_alg_xor_128(out_enc_data, p2, out_enc_data);
   26bb6:	4632      	mov	r2, r6
   26bb8:	4669      	mov	r1, sp
   26bba:	4630      	mov	r0, r6
   26bbc:	f7ff ff3f 	bl	26a3e <ble_sm_alg_xor_128>

    rc = ble_sm_alg_encrypt(k, out_enc_data, out_enc_data);
   26bc0:	4632      	mov	r2, r6
   26bc2:	4631      	mov	r1, r6
   26bc4:	4640      	mov	r0, r8
   26bc6:	f7ff ff48 	bl	26a5a <ble_sm_alg_encrypt>
    if (rc != 0) {
   26bca:	4604      	mov	r4, r0
   26bcc:	b948      	cbnz	r0, 26be2 <ble_sm_alg_c1+0xf0>
        rc = BLE_HS_EUNKNOWN;
        goto done;
    }

    BLE_HS_LOG(DEBUG, "\n    out_enc_data=");
    ble_hs_log_flat_buf(out_enc_data, 16);
   26bce:	2110      	movs	r1, #16
   26bd0:	4630      	mov	r0, r6
   26bd2:	f7fc fe5b 	bl	2388c <ble_hs_log_flat_buf>
    rc = 0;

done:
    BLE_HS_LOG(DEBUG, "\n    rc=%d\n", rc);
    return rc;
}
   26bd6:	4620      	mov	r0, r4
   26bd8:	b008      	add	sp, #32
   26bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = BLE_HS_EUNKNOWN;
   26bde:	2411      	movs	r4, #17
   26be0:	e7f9      	b.n	26bd6 <ble_sm_alg_c1+0xe4>
        rc = BLE_HS_EUNKNOWN;
   26be2:	2411      	movs	r4, #17
    return rc;
   26be4:	e7f7      	b.n	26bd6 <ble_sm_alg_c1+0xe4>
	...

00026be8 <ble_svc_ans_new_alert_notify>:
 *
 * @return 0 on success, non-zero error code otherwise.
 */
static int
ble_svc_ans_new_alert_notify(uint8_t cat_id, const char * info_str)
{
   26be8:	b538      	push	{r3, r4, r5, lr}
    int info_str_len;

    /* Clear notification to remove old infomation that may persist */
    memset(&ble_svc_ans_new_alert_val, '\0',
   26bea:	4b17      	ldr	r3, [pc, #92]	; (26c48 <ble_svc_ans_new_alert_notify+0x60>)
   26bec:	2200      	movs	r2, #0
   26bee:	601a      	str	r2, [r3, #0]
   26bf0:	605a      	str	r2, [r3, #4]
   26bf2:	609a      	str	r2, [r3, #8]
   26bf4:	60da      	str	r2, [r3, #12]
   26bf6:	611a      	str	r2, [r3, #16]
           BLE_SVC_ANS_NEW_ALERT_MAX_LEN);

    /* Set ID and count values */
    ble_svc_ans_new_alert_val[0] = cat_id;
   26bf8:	7018      	strb	r0, [r3, #0]
    ble_svc_ans_new_alert_val[1] = ble_svc_ans_new_alert_cnt[cat_id];
   26bfa:	4a14      	ldr	r2, [pc, #80]	; (26c4c <ble_svc_ans_new_alert_notify+0x64>)
   26bfc:	5c12      	ldrb	r2, [r2, r0]
   26bfe:	705a      	strb	r2, [r3, #1]

    if (info_str) {
   26c00:	b1a9      	cbz	r1, 26c2e <ble_svc_ans_new_alert_notify+0x46>
   26c02:	460c      	mov	r4, r1
        info_str_len = strlen(info_str);
   26c04:	4608      	mov	r0, r1
   26c06:	f7ef ffb2 	bl	16b6e <strlen>
   26c0a:	4602      	mov	r2, r0
        if (info_str_len > BLE_SVC_ANS_INFO_STR_MAX_LEN) {
   26c0c:	2812      	cmp	r0, #18
   26c0e:	dd15      	ble.n	26c3c <ble_svc_ans_new_alert_notify+0x54>
            /* If info_str is longer than the max string length only
             * write up to the maximum length */
            memcpy(&ble_svc_ans_new_alert_val[2], info_str,
   26c10:	4b0d      	ldr	r3, [pc, #52]	; (26c48 <ble_svc_ans_new_alert_notify+0x60>)
   26c12:	6825      	ldr	r5, [r4, #0]
   26c14:	6860      	ldr	r0, [r4, #4]
   26c16:	68a1      	ldr	r1, [r4, #8]
   26c18:	68e2      	ldr	r2, [r4, #12]
   26c1a:	f8c3 5002 	str.w	r5, [r3, #2]
   26c1e:	f8c3 0006 	str.w	r0, [r3, #6]
   26c22:	f8c3 100a 	str.w	r1, [r3, #10]
   26c26:	f8c3 200e 	str.w	r2, [r3, #14]
   26c2a:	8a22      	ldrh	r2, [r4, #16]
   26c2c:	825a      	strh	r2, [r3, #18]
                   BLE_SVC_ANS_INFO_STR_MAX_LEN);
        } else {
            memcpy(&ble_svc_ans_new_alert_val[2], info_str, info_str_len);
        }
    }
    return ble_gattc_notify(ble_svc_ans_conn_handle,
   26c2e:	4b08      	ldr	r3, [pc, #32]	; (26c50 <ble_svc_ans_new_alert_notify+0x68>)
   26c30:	8819      	ldrh	r1, [r3, #0]
   26c32:	4b08      	ldr	r3, [pc, #32]	; (26c54 <ble_svc_ans_new_alert_notify+0x6c>)
   26c34:	8818      	ldrh	r0, [r3, #0]
   26c36:	f7f9 fd83 	bl	20740 <ble_gattc_notify>
                            ble_svc_ans_new_alert_val_handle);
}
   26c3a:	bd38      	pop	{r3, r4, r5, pc}
            memcpy(&ble_svc_ans_new_alert_val[2], info_str, info_str_len);
   26c3c:	4621      	mov	r1, r4
   26c3e:	4806      	ldr	r0, [pc, #24]	; (26c58 <ble_svc_ans_new_alert_notify+0x70>)
   26c40:	f7ef ff48 	bl	16ad4 <memcpy>
   26c44:	e7f3      	b.n	26c2e <ble_svc_ans_new_alert_notify+0x46>
   26c46:	bf00      	nop
   26c48:	100041d8 	.word	0x100041d8
   26c4c:	100041d0 	.word	0x100041d0
   26c50:	100041ec 	.word	0x100041ec
   26c54:	100041ca 	.word	0x100041ca
   26c58:	100041da 	.word	0x100041da

00026c5c <ble_svc_ans_unr_alert_notify>:
 *
 * @return 0 on success, non-zer0 error code otherwise.
 */
static int
ble_svc_ans_unr_alert_notify(uint8_t cat_id)
{
   26c5c:	b508      	push	{r3, lr}
    ble_svc_ans_unr_alert_stat[0] = cat_id;
   26c5e:	4b06      	ldr	r3, [pc, #24]	; (26c78 <ble_svc_ans_unr_alert_notify+0x1c>)
   26c60:	7018      	strb	r0, [r3, #0]
    ble_svc_ans_unr_alert_stat[1] = ble_svc_ans_unr_alert_cnt[cat_id];
   26c62:	4a06      	ldr	r2, [pc, #24]	; (26c7c <ble_svc_ans_unr_alert_notify+0x20>)
   26c64:	5c12      	ldrb	r2, [r2, r0]
   26c66:	705a      	strb	r2, [r3, #1]
    return ble_gattc_notify(ble_svc_ans_conn_handle,
   26c68:	4b05      	ldr	r3, [pc, #20]	; (26c80 <ble_svc_ans_unr_alert_notify+0x24>)
   26c6a:	8819      	ldrh	r1, [r3, #0]
   26c6c:	4b05      	ldr	r3, [pc, #20]	; (26c84 <ble_svc_ans_unr_alert_notify+0x28>)
   26c6e:	8818      	ldrh	r0, [r3, #0]
   26c70:	f7f9 fd66 	bl	20740 <ble_gattc_notify>
                            ble_svc_ans_unr_alert_val_handle);
}
   26c74:	bd08      	pop	{r3, pc}
   26c76:	bf00      	nop
   26c78:	100041fc 	.word	0x100041fc
   26c7c:	100041f4 	.word	0x100041f4
   26c80:	100041fe 	.word	0x100041fe
   26c84:	100041ca 	.word	0x100041ca

00026c88 <ble_svc_ans_chr_write>:
 */
static int
ble_svc_ans_chr_write(struct os_mbuf *om, uint16_t min_len,
                      uint16_t max_len, void *dst,
                      uint16_t *len)
{
   26c88:	b510      	push	{r4, lr}
   26c8a:	461c      	mov	r4, r3
    uint16_t om_len;
    int rc;

    om_len = OS_MBUF_PKTLEN(om);
   26c8c:	8a03      	ldrh	r3, [r0, #16]
    if (om_len < min_len || om_len > max_len) {
   26c8e:	428b      	cmp	r3, r1
   26c90:	d307      	bcc.n	26ca2 <ble_svc_ans_chr_write+0x1a>
   26c92:	4293      	cmp	r3, r2
   26c94:	d807      	bhi.n	26ca6 <ble_svc_ans_chr_write+0x1e>
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
    }

    rc = ble_hs_mbuf_to_flat(om, dst, max_len, len);
   26c96:	9b02      	ldr	r3, [sp, #8]
   26c98:	4621      	mov	r1, r4
   26c9a:	f7fc fe21 	bl	238e0 <ble_hs_mbuf_to_flat>
    if (rc != 0) {
   26c9e:	b920      	cbnz	r0, 26caa <ble_svc_ans_chr_write+0x22>
        return BLE_ATT_ERR_UNLIKELY;
    }

    return 0;
}
   26ca0:	bd10      	pop	{r4, pc}
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   26ca2:	200d      	movs	r0, #13
   26ca4:	e7fc      	b.n	26ca0 <ble_svc_ans_chr_write+0x18>
   26ca6:	200d      	movs	r0, #13
   26ca8:	e7fa      	b.n	26ca0 <ble_svc_ans_chr_write+0x18>
        return BLE_ATT_ERR_UNLIKELY;
   26caa:	200e      	movs	r0, #14
   26cac:	e7f8      	b.n	26ca0 <ble_svc_ans_chr_write+0x18>
	...

00026cb0 <ble_svc_ans_access>:
{
   26cb0:	b530      	push	{r4, r5, lr}
   26cb2:	b083      	sub	sp, #12
   26cb4:	4614      	mov	r4, r2
    uuid16 = ble_uuid_u16(ctxt->chr->uuid);
   26cb6:	6893      	ldr	r3, [r2, #8]
   26cb8:	6818      	ldr	r0, [r3, #0]
   26cba:	f7ff fe45 	bl	26948 <ble_uuid_u16>
    assert(uuid16 != 0);
   26cbe:	b150      	cbz	r0, 26cd6 <ble_svc_ans_access+0x26>
    switch (uuid16) {
   26cc0:	f5a0 5329 	sub.w	r3, r0, #10816	; 0x2a40
   26cc4:	3b04      	subs	r3, #4
   26cc6:	2b04      	cmp	r3, #4
   26cc8:	f200 80d7 	bhi.w	26e7a <ble_svc_ans_access+0x1ca>
   26ccc:	e8df f003 	tbb	[pc, r3]
   26cd0:	0d235a70 	.word	0x0d235a70
   26cd4:	45          	.byte	0x45
   26cd5:	00          	.byte	0x00
    assert(uuid16 != 0);
   26cd6:	f7ed fcc5 	bl	14664 <hal_debugger_connected>
   26cda:	b100      	cbz	r0, 26cde <ble_svc_ans_access+0x2e>
   26cdc:	be01      	bkpt	0x0001
   26cde:	2300      	movs	r3, #0
   26ce0:	461a      	mov	r2, r3
   26ce2:	4619      	mov	r1, r3
   26ce4:	4618      	mov	r0, r3
   26ce6:	f7ee f85d 	bl	14da4 <__assert_func>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   26cea:	7823      	ldrb	r3, [r4, #0]
   26cec:	b94b      	cbnz	r3, 26d02 <ble_svc_ans_access+0x52>
        rc = os_mbuf_append(ctxt->om, &ble_svc_ans_new_alert_cat,
   26cee:	2201      	movs	r2, #1
   26cf0:	4969      	ldr	r1, [pc, #420]	; (26e98 <ble_svc_ans_access+0x1e8>)
   26cf2:	6860      	ldr	r0, [r4, #4]
   26cf4:	f7ee fcd7 	bl	156a6 <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   26cf8:	4604      	mov	r4, r0
   26cfa:	2800      	cmp	r0, #0
   26cfc:	d05c      	beq.n	26db8 <ble_svc_ans_access+0x108>
   26cfe:	2411      	movs	r4, #17
   26d00:	e05a      	b.n	26db8 <ble_svc_ans_access+0x108>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   26d02:	f7ed fcaf 	bl	14664 <hal_debugger_connected>
   26d06:	b100      	cbz	r0, 26d0a <ble_svc_ans_access+0x5a>
   26d08:	be01      	bkpt	0x0001
   26d0a:	2300      	movs	r3, #0
   26d0c:	461a      	mov	r2, r3
   26d0e:	4619      	mov	r1, r3
   26d10:	4618      	mov	r0, r3
   26d12:	f7ee f847 	bl	14da4 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   26d16:	7823      	ldrb	r3, [r4, #0]
   26d18:	2b01      	cmp	r3, #1
   26d1a:	d00a      	beq.n	26d32 <ble_svc_ans_access+0x82>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   26d1c:	b99b      	cbnz	r3, 26d46 <ble_svc_ans_access+0x96>
            rc = os_mbuf_append(ctxt->om, &ble_svc_ans_new_alert_val,
   26d1e:	2214      	movs	r2, #20
   26d20:	495e      	ldr	r1, [pc, #376]	; (26e9c <ble_svc_ans_access+0x1ec>)
   26d22:	6860      	ldr	r0, [r4, #4]
   26d24:	f7ee fcbf 	bl	156a6 <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   26d28:	4604      	mov	r4, r0
   26d2a:	2800      	cmp	r0, #0
   26d2c:	d044      	beq.n	26db8 <ble_svc_ans_access+0x108>
   26d2e:	2411      	movs	r4, #17
   26d30:	e042      	b.n	26db8 <ble_svc_ans_access+0x108>
            rc = ble_svc_ans_chr_write(ctxt->om, 0,
   26d32:	4b5b      	ldr	r3, [pc, #364]	; (26ea0 <ble_svc_ans_access+0x1f0>)
   26d34:	9300      	str	r3, [sp, #0]
   26d36:	4b59      	ldr	r3, [pc, #356]	; (26e9c <ble_svc_ans_access+0x1ec>)
   26d38:	2214      	movs	r2, #20
   26d3a:	2100      	movs	r1, #0
   26d3c:	6860      	ldr	r0, [r4, #4]
   26d3e:	f7ff ffa3 	bl	26c88 <ble_svc_ans_chr_write>
   26d42:	4604      	mov	r4, r0
            return rc;
   26d44:	e038      	b.n	26db8 <ble_svc_ans_access+0x108>
        assert(0);
   26d46:	f7ed fc8d 	bl	14664 <hal_debugger_connected>
   26d4a:	b100      	cbz	r0, 26d4e <ble_svc_ans_access+0x9e>
   26d4c:	be01      	bkpt	0x0001
   26d4e:	2300      	movs	r3, #0
   26d50:	461a      	mov	r2, r3
   26d52:	4619      	mov	r1, r3
   26d54:	4618      	mov	r0, r3
   26d56:	f7ee f825 	bl	14da4 <__assert_func>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   26d5a:	7823      	ldrb	r3, [r4, #0]
   26d5c:	b943      	cbnz	r3, 26d70 <ble_svc_ans_access+0xc0>
        rc = os_mbuf_append(ctxt->om, &ble_svc_ans_unr_alert_cat,
   26d5e:	2201      	movs	r2, #1
   26d60:	4950      	ldr	r1, [pc, #320]	; (26ea4 <ble_svc_ans_access+0x1f4>)
   26d62:	6860      	ldr	r0, [r4, #4]
   26d64:	f7ee fc9f 	bl	156a6 <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   26d68:	4604      	mov	r4, r0
   26d6a:	b328      	cbz	r0, 26db8 <ble_svc_ans_access+0x108>
   26d6c:	2411      	movs	r4, #17
   26d6e:	e023      	b.n	26db8 <ble_svc_ans_access+0x108>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   26d70:	f7ed fc78 	bl	14664 <hal_debugger_connected>
   26d74:	b100      	cbz	r0, 26d78 <ble_svc_ans_access+0xc8>
   26d76:	be01      	bkpt	0x0001
   26d78:	2300      	movs	r3, #0
   26d7a:	461a      	mov	r2, r3
   26d7c:	4619      	mov	r1, r3
   26d7e:	4618      	mov	r0, r3
   26d80:	f7ee f810 	bl	14da4 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   26d84:	7823      	ldrb	r3, [r4, #0]
   26d86:	2b01      	cmp	r3, #1
   26d88:	d008      	beq.n	26d9c <ble_svc_ans_access+0xec>
            rc = os_mbuf_append(ctxt->om, &ble_svc_ans_unr_alert_stat,
   26d8a:	2202      	movs	r2, #2
   26d8c:	4946      	ldr	r1, [pc, #280]	; (26ea8 <ble_svc_ans_access+0x1f8>)
   26d8e:	6860      	ldr	r0, [r4, #4]
   26d90:	f7ee fc89 	bl	156a6 <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   26d94:	4604      	mov	r4, r0
   26d96:	b178      	cbz	r0, 26db8 <ble_svc_ans_access+0x108>
   26d98:	2411      	movs	r4, #17
   26d9a:	e00d      	b.n	26db8 <ble_svc_ans_access+0x108>
            rc = ble_svc_ans_chr_write(ctxt->om,
   26d9c:	2300      	movs	r3, #0
   26d9e:	9300      	str	r3, [sp, #0]
   26da0:	4b41      	ldr	r3, [pc, #260]	; (26ea8 <ble_svc_ans_access+0x1f8>)
   26da2:	2202      	movs	r2, #2
   26da4:	4611      	mov	r1, r2
   26da6:	6860      	ldr	r0, [r4, #4]
   26da8:	f7ff ff6e 	bl	26c88 <ble_svc_ans_chr_write>
   26dac:	4604      	mov	r4, r0
            return rc;
   26dae:	e003      	b.n	26db8 <ble_svc_ans_access+0x108>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   26db0:	7823      	ldrb	r3, [r4, #0]
   26db2:	2b01      	cmp	r3, #1
   26db4:	d003      	beq.n	26dbe <ble_svc_ans_access+0x10e>
        return rc;
   26db6:	240e      	movs	r4, #14
}
   26db8:	4620      	mov	r0, r4
   26dba:	b003      	add	sp, #12
   26dbc:	bd30      	pop	{r4, r5, pc}
            rc = ble_svc_ans_chr_write(ctxt->om,
   26dbe:	2300      	movs	r3, #0
   26dc0:	9300      	str	r3, [sp, #0]
   26dc2:	4b3a      	ldr	r3, [pc, #232]	; (26eac <ble_svc_ans_access+0x1fc>)
   26dc4:	2202      	movs	r2, #2
   26dc6:	4611      	mov	r1, r2
   26dc8:	6860      	ldr	r0, [r4, #4]
   26dca:	f7ff ff5d 	bl	26c88 <ble_svc_ans_chr_write>
            if (rc != 0) {
   26dce:	4604      	mov	r4, r0
   26dd0:	2800      	cmp	r0, #0
   26dd2:	d1f1      	bne.n	26db8 <ble_svc_ans_access+0x108>
            cmd_id = ble_svc_ans_alert_not_ctrl_pt[0];
   26dd4:	4b35      	ldr	r3, [pc, #212]	; (26eac <ble_svc_ans_access+0x1fc>)
   26dd6:	781a      	ldrb	r2, [r3, #0]
            cat_id = ble_svc_ans_alert_not_ctrl_pt[1];
   26dd8:	7858      	ldrb	r0, [r3, #1]
            if (cat_id < BLE_SVC_ANS_CAT_NUM) {
   26dda:	2807      	cmp	r0, #7
   26ddc:	d809      	bhi.n	26df2 <ble_svc_ans_access+0x142>
                cat_bit_mask = (1 << cat_id);
   26dde:	2301      	movs	r3, #1
   26de0:	4083      	lsls	r3, r0
   26de2:	b2db      	uxtb	r3, r3
            switch (cmd_id) {
   26de4:	2a05      	cmp	r2, #5
   26de6:	d854      	bhi.n	26e92 <ble_svc_ans_access+0x1e2>
   26de8:	e8df f002 	tbb	[pc, r2]
   26dec:	17110c07 	.word	0x17110c07
   26df0:	331d      	.short	0x331d
            } else if (cat_id == 0xff) {
   26df2:	28ff      	cmp	r0, #255	; 0xff
   26df4:	d14b      	bne.n	26e8e <ble_svc_ans_access+0x1de>
                cat_bit_mask = cat_id;
   26df6:	4603      	mov	r3, r0
   26df8:	e7f4      	b.n	26de4 <ble_svc_ans_access+0x134>
                ble_svc_ans_new_alert_cat |= cat_bit_mask;
   26dfa:	4a27      	ldr	r2, [pc, #156]	; (26e98 <ble_svc_ans_access+0x1e8>)
   26dfc:	7811      	ldrb	r1, [r2, #0]
   26dfe:	430b      	orrs	r3, r1
   26e00:	7013      	strb	r3, [r2, #0]
                break;
   26e02:	e7d9      	b.n	26db8 <ble_svc_ans_access+0x108>
                ble_svc_ans_unr_alert_cat |= cat_bit_mask;
   26e04:	4a27      	ldr	r2, [pc, #156]	; (26ea4 <ble_svc_ans_access+0x1f4>)
   26e06:	7811      	ldrb	r1, [r2, #0]
   26e08:	430b      	orrs	r3, r1
   26e0a:	7013      	strb	r3, [r2, #0]
                break;
   26e0c:	e7d4      	b.n	26db8 <ble_svc_ans_access+0x108>
                ble_svc_ans_new_alert_cat &= ~cat_bit_mask;
   26e0e:	4922      	ldr	r1, [pc, #136]	; (26e98 <ble_svc_ans_access+0x1e8>)
   26e10:	780a      	ldrb	r2, [r1, #0]
   26e12:	ea22 0303 	bic.w	r3, r2, r3
   26e16:	700b      	strb	r3, [r1, #0]
                break;
   26e18:	e7ce      	b.n	26db8 <ble_svc_ans_access+0x108>
                ble_svc_ans_unr_alert_cat &= ~cat_bit_mask;
   26e1a:	4922      	ldr	r1, [pc, #136]	; (26ea4 <ble_svc_ans_access+0x1f4>)
   26e1c:	780a      	ldrb	r2, [r1, #0]
   26e1e:	ea22 0303 	bic.w	r3, r2, r3
   26e22:	700b      	strb	r3, [r1, #0]
                break;
   26e24:	e7c8      	b.n	26db8 <ble_svc_ans_access+0x108>
                if (cat_id == 0xff) {
   26e26:	28ff      	cmp	r0, #255	; 0xff
   26e28:	d10f      	bne.n	26e4a <ble_svc_ans_access+0x19a>
                    for (i = BLE_SVC_ANS_CAT_NUM - 1; i > 0; --i) {
   26e2a:	2507      	movs	r5, #7
   26e2c:	e000      	b.n	26e30 <ble_svc_ans_access+0x180>
   26e2e:	3d01      	subs	r5, #1
   26e30:	2d00      	cmp	r5, #0
   26e32:	ddc1      	ble.n	26db8 <ble_svc_ans_access+0x108>
                        if ((ble_svc_ans_new_alert_cat >> i) & 0x01) {
   26e34:	4b18      	ldr	r3, [pc, #96]	; (26e98 <ble_svc_ans_access+0x1e8>)
   26e36:	781b      	ldrb	r3, [r3, #0]
   26e38:	412b      	asrs	r3, r5
   26e3a:	f013 0f01 	tst.w	r3, #1
   26e3e:	d0f6      	beq.n	26e2e <ble_svc_ans_access+0x17e>
                            ble_svc_ans_new_alert_notify(i, NULL);
   26e40:	2100      	movs	r1, #0
   26e42:	b2e8      	uxtb	r0, r5
   26e44:	f7ff fed0 	bl	26be8 <ble_svc_ans_new_alert_notify>
   26e48:	e7f1      	b.n	26e2e <ble_svc_ans_access+0x17e>
                    ble_svc_ans_new_alert_notify(cat_id, NULL);
   26e4a:	2100      	movs	r1, #0
   26e4c:	f7ff fecc 	bl	26be8 <ble_svc_ans_new_alert_notify>
   26e50:	e7b2      	b.n	26db8 <ble_svc_ans_access+0x108>
                if (cat_id == 0xff) {
   26e52:	28ff      	cmp	r0, #255	; 0xff
   26e54:	d10e      	bne.n	26e74 <ble_svc_ans_access+0x1c4>
                    for (i = BLE_SVC_ANS_CAT_NUM - 1; i > 0; --i) {
   26e56:	2507      	movs	r5, #7
   26e58:	e000      	b.n	26e5c <ble_svc_ans_access+0x1ac>
   26e5a:	3d01      	subs	r5, #1
   26e5c:	2d00      	cmp	r5, #0
   26e5e:	ddab      	ble.n	26db8 <ble_svc_ans_access+0x108>
                        if ((ble_svc_ans_unr_alert_cat >> i) & 0x01) {
   26e60:	4b10      	ldr	r3, [pc, #64]	; (26ea4 <ble_svc_ans_access+0x1f4>)
   26e62:	781b      	ldrb	r3, [r3, #0]
   26e64:	412b      	asrs	r3, r5
   26e66:	f013 0f01 	tst.w	r3, #1
   26e6a:	d0f6      	beq.n	26e5a <ble_svc_ans_access+0x1aa>
                            ble_svc_ans_unr_alert_notify(i);
   26e6c:	b2e8      	uxtb	r0, r5
   26e6e:	f7ff fef5 	bl	26c5c <ble_svc_ans_unr_alert_notify>
   26e72:	e7f2      	b.n	26e5a <ble_svc_ans_access+0x1aa>
                    ble_svc_ans_unr_alert_notify(cat_id);
   26e74:	f7ff fef2 	bl	26c5c <ble_svc_ans_unr_alert_notify>
            return 0;
   26e78:	e79e      	b.n	26db8 <ble_svc_ans_access+0x108>
        assert(0);
   26e7a:	f7ed fbf3 	bl	14664 <hal_debugger_connected>
   26e7e:	b100      	cbz	r0, 26e82 <ble_svc_ans_access+0x1d2>
   26e80:	be01      	bkpt	0x0001
   26e82:	2300      	movs	r3, #0
   26e84:	461a      	mov	r2, r3
   26e86:	4619      	mov	r1, r3
   26e88:	4618      	mov	r0, r3
   26e8a:	f7ed ff8b 	bl	14da4 <__assert_func>
                return BLE_ATT_ERR_UNLIKELY;
   26e8e:	240e      	movs	r4, #14
   26e90:	e792      	b.n	26db8 <ble_svc_ans_access+0x108>
   26e92:	24a0      	movs	r4, #160	; 0xa0
   26e94:	e790      	b.n	26db8 <ble_svc_ans_access+0x108>
   26e96:	bf00      	nop
   26e98:	100041cc 	.word	0x100041cc
   26e9c:	100041d8 	.word	0x100041d8
   26ea0:	100041ee 	.word	0x100041ee
   26ea4:	100041f0 	.word	0x100041f0
   26ea8:	100041fc 	.word	0x100041fc
   26eac:	100041c8 	.word	0x100041c8

00026eb0 <ble_svc_ans_init>:
 * XXX: We should technically be able to change the new alert and
 *      unread alert catagories when we have no active connections.
 */
void
ble_svc_ans_init(void)
{
   26eb0:	b510      	push	{r4, lr}
   26eb2:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   26eb4:	4b1a      	ldr	r3, [pc, #104]	; (26f20 <ble_svc_ans_init+0x70>)
   26eb6:	781b      	ldrb	r3, [r3, #0]
   26eb8:	b173      	cbz	r3, 26ed8 <ble_svc_ans_init+0x28>

    rc = ble_gatts_count_cfg(ble_svc_ans_defs);
   26eba:	481a      	ldr	r0, [pc, #104]	; (26f24 <ble_svc_ans_init+0x74>)
   26ebc:	f7fa fd48 	bl	21950 <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26ec0:	b9a0      	cbnz	r0, 26eec <ble_svc_ans_init+0x3c>

    rc = ble_gatts_add_svcs(ble_svc_ans_defs);
   26ec2:	4818      	ldr	r0, [pc, #96]	; (26f24 <ble_svc_ans_init+0x74>)
   26ec4:	f7fa fd20 	bl	21908 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26ec8:	b9e8      	cbnz	r0, 26f06 <ble_svc_ans_init+0x56>

    ble_svc_ans_new_alert_cat = MYNEWT_VAL(BLE_SVC_ANS_NEW_ALERT_CAT);
   26eca:	2300      	movs	r3, #0
   26ecc:	4a16      	ldr	r2, [pc, #88]	; (26f28 <ble_svc_ans_init+0x78>)
   26ece:	7013      	strb	r3, [r2, #0]
    ble_svc_ans_unr_alert_cat = MYNEWT_VAL(BLE_SVC_ANS_UNR_ALERT_CAT);
   26ed0:	4a16      	ldr	r2, [pc, #88]	; (26f2c <ble_svc_ans_init+0x7c>)
   26ed2:	7013      	strb	r3, [r2, #0]
}
   26ed4:	b002      	add	sp, #8
   26ed6:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   26ed8:	f7ed fbc4 	bl	14664 <hal_debugger_connected>
   26edc:	b100      	cbz	r0, 26ee0 <ble_svc_ans_init+0x30>
   26ede:	be01      	bkpt	0x0001
   26ee0:	2300      	movs	r3, #0
   26ee2:	461a      	mov	r2, r3
   26ee4:	4619      	mov	r1, r3
   26ee6:	4618      	mov	r0, r3
   26ee8:	f7ed ff5c 	bl	14da4 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26eec:	f7ed fbba 	bl	14664 <hal_debugger_connected>
   26ef0:	b100      	cbz	r0, 26ef4 <ble_svc_ans_init+0x44>
   26ef2:	be01      	bkpt	0x0001
   26ef4:	2000      	movs	r0, #0
   26ef6:	9000      	str	r0, [sp, #0]
   26ef8:	4b0d      	ldr	r3, [pc, #52]	; (26f30 <ble_svc_ans_init+0x80>)
   26efa:	681c      	ldr	r4, [r3, #0]
   26efc:	4603      	mov	r3, r0
   26efe:	4602      	mov	r2, r0
   26f00:	4601      	mov	r1, r0
   26f02:	47a0      	blx	r4
   26f04:	e7dd      	b.n	26ec2 <ble_svc_ans_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26f06:	f7ed fbad 	bl	14664 <hal_debugger_connected>
   26f0a:	b100      	cbz	r0, 26f0e <ble_svc_ans_init+0x5e>
   26f0c:	be01      	bkpt	0x0001
   26f0e:	2000      	movs	r0, #0
   26f10:	9000      	str	r0, [sp, #0]
   26f12:	4b07      	ldr	r3, [pc, #28]	; (26f30 <ble_svc_ans_init+0x80>)
   26f14:	681c      	ldr	r4, [r3, #0]
   26f16:	4603      	mov	r3, r0
   26f18:	4602      	mov	r2, r0
   26f1a:	4601      	mov	r1, r0
   26f1c:	47a0      	blx	r4
   26f1e:	e7d4      	b.n	26eca <ble_svc_ans_init+0x1a>
   26f20:	10003404 	.word	0x10003404
   26f24:	00031434 	.word	0x00031434
   26f28:	100041cc 	.word	0x100041cc
   26f2c:	100041f0 	.word	0x100041f0
   26f30:	1000028c 	.word	0x1000028c

00026f34 <ble_svc_dis_access>:
    (MYNEWT_VAL(BLE_SVC_DIS_MANUFACTURER_NAME_READ_PERM) >= 0) || \
    (MYNEWT_VAL(BLE_SVC_DIS_SYSTEM_ID_READ_PERM) >= 0)
static int
ble_svc_dis_access(uint16_t conn_handle, uint16_t attr_handle,
                   struct ble_gatt_access_ctxt *ctxt, void *arg)
{
   26f34:	b538      	push	{r3, r4, r5, lr}
   26f36:	4614      	mov	r4, r2
    uint16_t uuid    = ble_uuid_u16(ctxt->chr->uuid);
   26f38:	6893      	ldr	r3, [r2, #8]
   26f3a:	6818      	ldr	r0, [r3, #0]
   26f3c:	f7ff fd04 	bl	26948 <ble_uuid_u16>
    const char *info = NULL;

    switch(uuid) {
   26f40:	f642 2324 	movw	r3, #10788	; 0x2a24
   26f44:	4298      	cmp	r0, r3
   26f46:	d008      	beq.n	26f5a <ble_svc_dis_access+0x26>
   26f48:	f642 2326 	movw	r3, #10790	; 0x2a26
   26f4c:	4298      	cmp	r0, r3
   26f4e:	d109      	bne.n	26f64 <ble_svc_dis_access+0x30>
#endif
        break;
#endif
#if (MYNEWT_VAL(BLE_SVC_DIS_FIRMWARE_REVISION_READ_PERM) >= 0)
    case BLE_SVC_DIS_CHR_UUID16_FIRMWARE_REVISION:
        info = ble_svc_dis_data.firmware_revision;
   26f50:	4b0f      	ldr	r3, [pc, #60]	; (26f90 <ble_svc_dis_access+0x5c>)
   26f52:	689d      	ldr	r5, [r3, #8]
#ifdef MYNEWT_VAL_BLE_SVC_DIS_FIRMWARE_REVISION_DEFAULT
        if (info == NULL) {
   26f54:	b91d      	cbnz	r5, 26f5e <ble_svc_dis_access+0x2a>
    if (info != NULL) {
       int rc = os_mbuf_append(ctxt->om, info, strlen(info));
       return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
    }

    return 0;
   26f56:	2000      	movs	r0, #0
   26f58:	e003      	b.n	26f62 <ble_svc_dis_access+0x2e>
        info = ble_svc_dis_data.model_number;
   26f5a:	4b0d      	ldr	r3, [pc, #52]	; (26f90 <ble_svc_dis_access+0x5c>)
   26f5c:	681d      	ldr	r5, [r3, #0]
    if (info != NULL) {
   26f5e:	b95d      	cbnz	r5, 26f78 <ble_svc_dis_access+0x44>
    return 0;
   26f60:	2000      	movs	r0, #0
}
   26f62:	bd38      	pop	{r3, r4, r5, pc}
        assert(0);
   26f64:	f7ed fb7e 	bl	14664 <hal_debugger_connected>
   26f68:	b100      	cbz	r0, 26f6c <ble_svc_dis_access+0x38>
   26f6a:	be01      	bkpt	0x0001
   26f6c:	2300      	movs	r3, #0
   26f6e:	461a      	mov	r2, r3
   26f70:	4619      	mov	r1, r3
   26f72:	4618      	mov	r0, r3
   26f74:	f7ed ff16 	bl	14da4 <__assert_func>
       int rc = os_mbuf_append(ctxt->om, info, strlen(info));
   26f78:	4628      	mov	r0, r5
   26f7a:	f7ef fdf8 	bl	16b6e <strlen>
   26f7e:	b282      	uxth	r2, r0
   26f80:	4629      	mov	r1, r5
   26f82:	6860      	ldr	r0, [r4, #4]
   26f84:	f7ee fb8f 	bl	156a6 <os_mbuf_append>
       return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   26f88:	2800      	cmp	r0, #0
   26f8a:	d0ea      	beq.n	26f62 <ble_svc_dis_access+0x2e>
   26f8c:	2011      	movs	r0, #17
   26f8e:	e7e8      	b.n	26f62 <ble_svc_dis_access+0x2e>
   26f90:	100003e0 	.word	0x100003e0

00026f94 <ble_svc_dis_firmware_revision_set>:
}

int
ble_svc_dis_firmware_revision_set(const char *value)
{
    ble_svc_dis_data.firmware_revision = value;
   26f94:	4b01      	ldr	r3, [pc, #4]	; (26f9c <ble_svc_dis_firmware_revision_set+0x8>)
   26f96:	6098      	str	r0, [r3, #8]
    return 0;
}
   26f98:	2000      	movs	r0, #0
   26f9a:	4770      	bx	lr
   26f9c:	100003e0 	.word	0x100003e0

00026fa0 <ble_svc_dis_init>:
/**
 * Initialize the DIS package.
 */
void
ble_svc_dis_init(void)
{
   26fa0:	b510      	push	{r4, lr}
   26fa2:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   26fa4:	4b18      	ldr	r3, [pc, #96]	; (27008 <ble_svc_dis_init+0x68>)
   26fa6:	781b      	ldrb	r3, [r3, #0]
   26fa8:	b14b      	cbz	r3, 26fbe <ble_svc_dis_init+0x1e>

    rc = ble_gatts_count_cfg(ble_svc_dis_defs);
   26faa:	4818      	ldr	r0, [pc, #96]	; (2700c <ble_svc_dis_init+0x6c>)
   26fac:	f7fa fcd0 	bl	21950 <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26fb0:	b978      	cbnz	r0, 26fd2 <ble_svc_dis_init+0x32>

    rc = ble_gatts_add_svcs(ble_svc_dis_defs);
   26fb2:	4816      	ldr	r0, [pc, #88]	; (2700c <ble_svc_dis_init+0x6c>)
   26fb4:	f7fa fca8 	bl	21908 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26fb8:	b9c0      	cbnz	r0, 26fec <ble_svc_dis_init+0x4c>
}
   26fba:	b002      	add	sp, #8
   26fbc:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   26fbe:	f7ed fb51 	bl	14664 <hal_debugger_connected>
   26fc2:	b100      	cbz	r0, 26fc6 <ble_svc_dis_init+0x26>
   26fc4:	be01      	bkpt	0x0001
   26fc6:	2300      	movs	r3, #0
   26fc8:	461a      	mov	r2, r3
   26fca:	4619      	mov	r1, r3
   26fcc:	4618      	mov	r0, r3
   26fce:	f7ed fee9 	bl	14da4 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26fd2:	f7ed fb47 	bl	14664 <hal_debugger_connected>
   26fd6:	b100      	cbz	r0, 26fda <ble_svc_dis_init+0x3a>
   26fd8:	be01      	bkpt	0x0001
   26fda:	2000      	movs	r0, #0
   26fdc:	9000      	str	r0, [sp, #0]
   26fde:	4b0c      	ldr	r3, [pc, #48]	; (27010 <ble_svc_dis_init+0x70>)
   26fe0:	681c      	ldr	r4, [r3, #0]
   26fe2:	4603      	mov	r3, r0
   26fe4:	4602      	mov	r2, r0
   26fe6:	4601      	mov	r1, r0
   26fe8:	47a0      	blx	r4
   26fea:	e7e2      	b.n	26fb2 <ble_svc_dis_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26fec:	f7ed fb3a 	bl	14664 <hal_debugger_connected>
   26ff0:	b100      	cbz	r0, 26ff4 <ble_svc_dis_init+0x54>
   26ff2:	be01      	bkpt	0x0001
   26ff4:	2000      	movs	r0, #0
   26ff6:	9000      	str	r0, [sp, #0]
   26ff8:	4b05      	ldr	r3, [pc, #20]	; (27010 <ble_svc_dis_init+0x70>)
   26ffa:	681c      	ldr	r4, [r3, #0]
   26ffc:	4603      	mov	r3, r0
   26ffe:	4602      	mov	r2, r0
   27000:	4601      	mov	r1, r0
   27002:	47a0      	blx	r4
}
   27004:	e7d9      	b.n	26fba <ble_svc_dis_init+0x1a>
   27006:	bf00      	nop
   27008:	10003404 	.word	0x10003404
   2700c:	0003146c 	.word	0x0003146c
   27010:	1000028c 	.word	0x1000028c

00027014 <ble_svc_gap_device_name_write_access>:
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
}

static int
ble_svc_gap_device_name_write_access(struct ble_gatt_access_ctxt *ctxt)
{
   27014:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BLE_SVC_GAP_DEVICE_NAME_WRITE_PERM) < 0
    assert(0);
   27016:	f7ed fb25 	bl	14664 <hal_debugger_connected>
   2701a:	b100      	cbz	r0, 2701e <ble_svc_gap_device_name_write_access+0xa>
   2701c:	be01      	bkpt	0x0001
   2701e:	2300      	movs	r3, #0
   27020:	461a      	mov	r2, r3
   27022:	4619      	mov	r1, r3
   27024:	4618      	mov	r0, r3
   27026:	f7ed febd 	bl	14da4 <__assert_func>

0002702a <ble_svc_gap_appearance_write_access>:
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
}

static int
ble_svc_gap_appearance_write_access(struct ble_gatt_access_ctxt *ctxt)
{
   2702a:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BLE_SVC_GAP_APPEARANCE_WRITE_PERM) < 0
    assert(0);
   2702c:	f7ed fb1a 	bl	14664 <hal_debugger_connected>
   27030:	b100      	cbz	r0, 27034 <ble_svc_gap_appearance_write_access+0xa>
   27032:	be01      	bkpt	0x0001
   27034:	2300      	movs	r3, #0
   27036:	461a      	mov	r2, r3
   27038:	4619      	mov	r1, r3
   2703a:	4618      	mov	r0, r3
   2703c:	f7ed feb2 	bl	14da4 <__assert_func>

00027040 <ble_svc_gap_device_name_read_access>:
{
   27040:	b538      	push	{r3, r4, r5, lr}
   27042:	4604      	mov	r4, r0
    rc = os_mbuf_append(ctxt->om, ble_svc_gap_name, strlen(ble_svc_gap_name));
   27044:	4d06      	ldr	r5, [pc, #24]	; (27060 <ble_svc_gap_device_name_read_access+0x20>)
   27046:	4628      	mov	r0, r5
   27048:	f7ef fd91 	bl	16b6e <strlen>
   2704c:	b282      	uxth	r2, r0
   2704e:	4629      	mov	r1, r5
   27050:	6860      	ldr	r0, [r4, #4]
   27052:	f7ee fb28 	bl	156a6 <os_mbuf_append>
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   27056:	b900      	cbnz	r0, 2705a <ble_svc_gap_device_name_read_access+0x1a>
}
   27058:	bd38      	pop	{r3, r4, r5, pc}
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   2705a:	2011      	movs	r0, #17
   2705c:	e7fc      	b.n	27058 <ble_svc_gap_device_name_read_access+0x18>
   2705e:	bf00      	nop
   27060:	10000450 	.word	0x10000450

00027064 <ble_svc_gap_appearance_read_access>:
{
   27064:	b500      	push	{lr}
   27066:	b083      	sub	sp, #12
    uint16_t appearance = htole16(ble_svc_gap_appearance);
   27068:	4b07      	ldr	r3, [pc, #28]	; (27088 <ble_svc_gap_appearance_read_access+0x24>)
   2706a:	881b      	ldrh	r3, [r3, #0]
   2706c:	f8ad 3006 	strh.w	r3, [sp, #6]
    rc = os_mbuf_append(ctxt->om, &appearance, sizeof(appearance));
   27070:	2202      	movs	r2, #2
   27072:	f10d 0106 	add.w	r1, sp, #6
   27076:	6840      	ldr	r0, [r0, #4]
   27078:	f7ee fb15 	bl	156a6 <os_mbuf_append>
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   2707c:	b910      	cbnz	r0, 27084 <ble_svc_gap_appearance_read_access+0x20>
}
   2707e:	b003      	add	sp, #12
   27080:	f85d fb04 	ldr.w	pc, [sp], #4
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   27084:	2011      	movs	r0, #17
   27086:	e7fa      	b.n	2707e <ble_svc_gap_appearance_read_access+0x1a>
   27088:	10004200 	.word	0x10004200

0002708c <ble_svc_gap_access>:
}

static int
ble_svc_gap_access(uint16_t conn_handle, uint16_t attr_handle,
                   struct ble_gatt_access_ctxt *ctxt, void *arg)
{
   2708c:	b510      	push	{r4, lr}
   2708e:	4614      	mov	r4, r2
        htole16(MYNEWT_VAL(BLE_SVC_GAP_PPCP_SUPERVISION_TMO))
    };
#endif
    int rc;

    uuid16 = ble_uuid_u16(ctxt->chr->uuid);
   27090:	6893      	ldr	r3, [r2, #8]
   27092:	6818      	ldr	r0, [r3, #0]
   27094:	f7ff fc58 	bl	26948 <ble_uuid_u16>
    assert(uuid16 != 0);
   27098:	b1a0      	cbz	r0, 270c4 <ble_svc_gap_access+0x38>

    switch (uuid16) {
   2709a:	f5b0 5f28 	cmp.w	r0, #10752	; 0x2a00
   2709e:	d01b      	beq.n	270d8 <ble_svc_gap_access+0x4c>
   270a0:	f642 2201 	movw	r2, #10753	; 0x2a01
   270a4:	4290      	cmp	r0, r2
   270a6:	d133      	bne.n	27110 <ble_svc_gap_access+0x84>
            rc = BLE_ATT_ERR_UNLIKELY;
        }
        return rc;

    case BLE_SVC_GAP_CHR_UUID16_APPEARANCE:
        if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   270a8:	7823      	ldrb	r3, [r4, #0]
   270aa:	b353      	cbz	r3, 27102 <ble_svc_gap_access+0x76>
            rc = ble_svc_gap_appearance_read_access(ctxt);
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   270ac:	2b01      	cmp	r3, #1
   270ae:	d02c      	beq.n	2710a <ble_svc_gap_access+0x7e>
            rc = ble_svc_gap_appearance_write_access(ctxt);
        } else {
            assert(0);
   270b0:	f7ed fad8 	bl	14664 <hal_debugger_connected>
   270b4:	b100      	cbz	r0, 270b8 <ble_svc_gap_access+0x2c>
   270b6:	be01      	bkpt	0x0001
   270b8:	2300      	movs	r3, #0
   270ba:	461a      	mov	r2, r3
   270bc:	4619      	mov	r1, r3
   270be:	4618      	mov	r0, r3
   270c0:	f7ed fe70 	bl	14da4 <__assert_func>
    assert(uuid16 != 0);
   270c4:	f7ed face 	bl	14664 <hal_debugger_connected>
   270c8:	b100      	cbz	r0, 270cc <ble_svc_gap_access+0x40>
   270ca:	be01      	bkpt	0x0001
   270cc:	2300      	movs	r3, #0
   270ce:	461a      	mov	r2, r3
   270d0:	4619      	mov	r1, r3
   270d2:	4618      	mov	r0, r3
   270d4:	f7ed fe66 	bl	14da4 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   270d8:	7823      	ldrb	r3, [r4, #0]
   270da:	b15b      	cbz	r3, 270f4 <ble_svc_gap_access+0x68>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   270dc:	2b01      	cmp	r3, #1
   270de:	d00d      	beq.n	270fc <ble_svc_gap_access+0x70>
            assert(0);
   270e0:	f7ed fac0 	bl	14664 <hal_debugger_connected>
   270e4:	b100      	cbz	r0, 270e8 <ble_svc_gap_access+0x5c>
   270e6:	be01      	bkpt	0x0001
   270e8:	2300      	movs	r3, #0
   270ea:	461a      	mov	r2, r3
   270ec:	4619      	mov	r1, r3
   270ee:	4618      	mov	r0, r3
   270f0:	f7ed fe58 	bl	14da4 <__assert_func>
            rc = ble_svc_gap_device_name_read_access(ctxt);
   270f4:	4620      	mov	r0, r4
   270f6:	f7ff ffa3 	bl	27040 <ble_svc_gap_device_name_read_access>

    default:
        assert(0);
        return BLE_ATT_ERR_UNLIKELY;
    }
}
   270fa:	bd10      	pop	{r4, pc}
            rc = ble_svc_gap_device_name_write_access(ctxt);
   270fc:	4620      	mov	r0, r4
   270fe:	f7ff ff89 	bl	27014 <ble_svc_gap_device_name_write_access>
            rc = ble_svc_gap_appearance_read_access(ctxt);
   27102:	4620      	mov	r0, r4
   27104:	f7ff ffae 	bl	27064 <ble_svc_gap_appearance_read_access>
        return rc;
   27108:	e7f7      	b.n	270fa <ble_svc_gap_access+0x6e>
            rc = ble_svc_gap_appearance_write_access(ctxt);
   2710a:	4620      	mov	r0, r4
   2710c:	f7ff ff8d 	bl	2702a <ble_svc_gap_appearance_write_access>
        assert(0);
   27110:	f7ed faa8 	bl	14664 <hal_debugger_connected>
   27114:	b100      	cbz	r0, 27118 <ble_svc_gap_access+0x8c>
   27116:	be01      	bkpt	0x0001
   27118:	2300      	movs	r3, #0
   2711a:	461a      	mov	r2, r3
   2711c:	4619      	mov	r1, r3
   2711e:	4618      	mov	r0, r3
   27120:	f7ed fe40 	bl	14da4 <__assert_func>

00027124 <ble_svc_gap_device_name>:

const char *
ble_svc_gap_device_name(void)
{
    return ble_svc_gap_name;
}
   27124:	4800      	ldr	r0, [pc, #0]	; (27128 <ble_svc_gap_device_name+0x4>)
   27126:	4770      	bx	lr
   27128:	10000450 	.word	0x10000450

0002712c <ble_svc_gap_init>:
    ble_svc_gap_chr_changed_cb_fn = cb;
}

void
ble_svc_gap_init(void)
{
   2712c:	b510      	push	{r4, lr}
   2712e:	b082      	sub	sp, #8
#if NIMBLE_BLE_CONNECT
    int rc;
#endif

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   27130:	4b18      	ldr	r3, [pc, #96]	; (27194 <ble_svc_gap_init+0x68>)
   27132:	781b      	ldrb	r3, [r3, #0]
   27134:	b14b      	cbz	r3, 2714a <ble_svc_gap_init+0x1e>

#if NIMBLE_BLE_CONNECT
    rc = ble_gatts_count_cfg(ble_svc_gap_defs);
   27136:	4818      	ldr	r0, [pc, #96]	; (27198 <ble_svc_gap_init+0x6c>)
   27138:	f7fa fc0a 	bl	21950 <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2713c:	b978      	cbnz	r0, 2715e <ble_svc_gap_init+0x32>

    rc = ble_gatts_add_svcs(ble_svc_gap_defs);
   2713e:	4816      	ldr	r0, [pc, #88]	; (27198 <ble_svc_gap_init+0x6c>)
   27140:	f7fa fbe2 	bl	21908 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27144:	b9c0      	cbnz	r0, 27178 <ble_svc_gap_init+0x4c>
#endif
}
   27146:	b002      	add	sp, #8
   27148:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   2714a:	f7ed fa8b 	bl	14664 <hal_debugger_connected>
   2714e:	b100      	cbz	r0, 27152 <ble_svc_gap_init+0x26>
   27150:	be01      	bkpt	0x0001
   27152:	2300      	movs	r3, #0
   27154:	461a      	mov	r2, r3
   27156:	4619      	mov	r1, r3
   27158:	4618      	mov	r0, r3
   2715a:	f7ed fe23 	bl	14da4 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2715e:	f7ed fa81 	bl	14664 <hal_debugger_connected>
   27162:	b100      	cbz	r0, 27166 <ble_svc_gap_init+0x3a>
   27164:	be01      	bkpt	0x0001
   27166:	2000      	movs	r0, #0
   27168:	9000      	str	r0, [sp, #0]
   2716a:	4b0c      	ldr	r3, [pc, #48]	; (2719c <ble_svc_gap_init+0x70>)
   2716c:	681c      	ldr	r4, [r3, #0]
   2716e:	4603      	mov	r3, r0
   27170:	4602      	mov	r2, r0
   27172:	4601      	mov	r1, r0
   27174:	47a0      	blx	r4
   27176:	e7e2      	b.n	2713e <ble_svc_gap_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27178:	f7ed fa74 	bl	14664 <hal_debugger_connected>
   2717c:	b100      	cbz	r0, 27180 <ble_svc_gap_init+0x54>
   2717e:	be01      	bkpt	0x0001
   27180:	2000      	movs	r0, #0
   27182:	9000      	str	r0, [sp, #0]
   27184:	4b05      	ldr	r3, [pc, #20]	; (2719c <ble_svc_gap_init+0x70>)
   27186:	681c      	ldr	r4, [r3, #0]
   27188:	4603      	mov	r3, r0
   2718a:	4602      	mov	r2, r0
   2718c:	4601      	mov	r1, r0
   2718e:	47a0      	blx	r4
}
   27190:	e7d9      	b.n	27146 <ble_svc_gap_init+0x1a>
   27192:	bf00      	nop
   27194:	10003404 	.word	0x10003404
   27198:	0003148c 	.word	0x0003148c
   2719c:	1000028c 	.word	0x1000028c

000271a0 <ble_svc_gatt_access>:
};

static int
ble_svc_gatt_access(uint16_t conn_handle, uint16_t attr_handle,
                    struct ble_gatt_access_ctxt *ctxt, void *arg)
{
   271a0:	b510      	push	{r4, lr}
     * access callback gets called by the stack when it needs to read the
     * characteristic value to populate the outgoing indication command.
     * Therefore, this callback should only get called during an attempt to
     * read the characteristic.
     */
    assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   271a2:	7813      	ldrb	r3, [r2, #0]
   271a4:	b9a3      	cbnz	r3, 271d0 <ble_svc_gatt_access+0x30>
    assert(ctxt->chr == &ble_svc_gatt_defs[0].characteristics[0]);
   271a6:	6891      	ldr	r1, [r2, #8]
   271a8:	4b14      	ldr	r3, [pc, #80]	; (271fc <ble_svc_gatt_access+0x5c>)
   271aa:	4299      	cmp	r1, r3
   271ac:	d11a      	bne.n	271e4 <ble_svc_gatt_access+0x44>

    u8p = os_mbuf_extend(ctxt->om, 4);
   271ae:	2104      	movs	r1, #4
   271b0:	6850      	ldr	r0, [r2, #4]
   271b2:	f7ee fc8c 	bl	15ace <os_mbuf_extend>
    if (u8p == NULL) {
   271b6:	4604      	mov	r4, r0
   271b8:	b1f0      	cbz	r0, 271f8 <ble_svc_gatt_access+0x58>
        return BLE_HS_ENOMEM;
    }

    put_le16(u8p + 0, ble_svc_gatt_start_handle);
   271ba:	4b11      	ldr	r3, [pc, #68]	; (27200 <ble_svc_gatt_access+0x60>)
   271bc:	8819      	ldrh	r1, [r3, #0]
   271be:	f006 f96b 	bl	2d498 <put_le16>
    put_le16(u8p + 2, ble_svc_gatt_end_handle);
   271c2:	4b10      	ldr	r3, [pc, #64]	; (27204 <ble_svc_gatt_access+0x64>)
   271c4:	8819      	ldrh	r1, [r3, #0]
   271c6:	1ca0      	adds	r0, r4, #2
   271c8:	f006 f966 	bl	2d498 <put_le16>

    return 0;
   271cc:	2000      	movs	r0, #0
}
   271ce:	bd10      	pop	{r4, pc}
    assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   271d0:	f7ed fa48 	bl	14664 <hal_debugger_connected>
   271d4:	b100      	cbz	r0, 271d8 <ble_svc_gatt_access+0x38>
   271d6:	be01      	bkpt	0x0001
   271d8:	2300      	movs	r3, #0
   271da:	461a      	mov	r2, r3
   271dc:	4619      	mov	r1, r3
   271de:	4618      	mov	r0, r3
   271e0:	f7ed fde0 	bl	14da4 <__assert_func>
    assert(ctxt->chr == &ble_svc_gatt_defs[0].characteristics[0]);
   271e4:	f7ed fa3e 	bl	14664 <hal_debugger_connected>
   271e8:	b100      	cbz	r0, 271ec <ble_svc_gatt_access+0x4c>
   271ea:	be01      	bkpt	0x0001
   271ec:	2300      	movs	r3, #0
   271ee:	461a      	mov	r2, r3
   271f0:	4619      	mov	r1, r3
   271f2:	4618      	mov	r0, r3
   271f4:	f7ed fdd6 	bl	14da4 <__assert_func>
        return BLE_HS_ENOMEM;
   271f8:	2006      	movs	r0, #6
   271fa:	e7e8      	b.n	271ce <ble_svc_gatt_access+0x2e>
   271fc:	10000478 	.word	0x10000478
   27200:	10004206 	.word	0x10004206
   27204:	10004204 	.word	0x10004204

00027208 <ble_svc_gatt_init>:
    ble_gatts_chr_updated(ble_svc_gatt_changed_val_handle);
}

void
ble_svc_gatt_init(void)
{
   27208:	b510      	push	{r4, lr}
   2720a:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   2720c:	4b18      	ldr	r3, [pc, #96]	; (27270 <ble_svc_gatt_init+0x68>)
   2720e:	781b      	ldrb	r3, [r3, #0]
   27210:	b14b      	cbz	r3, 27226 <ble_svc_gatt_init+0x1e>

    rc = ble_gatts_count_cfg(ble_svc_gatt_defs);
   27212:	4818      	ldr	r0, [pc, #96]	; (27274 <ble_svc_gatt_init+0x6c>)
   27214:	f7fa fb9c 	bl	21950 <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27218:	b978      	cbnz	r0, 2723a <ble_svc_gatt_init+0x32>

    rc = ble_gatts_add_svcs(ble_svc_gatt_defs);
   2721a:	4816      	ldr	r0, [pc, #88]	; (27274 <ble_svc_gatt_init+0x6c>)
   2721c:	f7fa fb74 	bl	21908 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27220:	b9c0      	cbnz	r0, 27254 <ble_svc_gatt_init+0x4c>
}
   27222:	b002      	add	sp, #8
   27224:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   27226:	f7ed fa1d 	bl	14664 <hal_debugger_connected>
   2722a:	b100      	cbz	r0, 2722e <ble_svc_gatt_init+0x26>
   2722c:	be01      	bkpt	0x0001
   2722e:	2300      	movs	r3, #0
   27230:	461a      	mov	r2, r3
   27232:	4619      	mov	r1, r3
   27234:	4618      	mov	r0, r3
   27236:	f7ed fdb5 	bl	14da4 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2723a:	f7ed fa13 	bl	14664 <hal_debugger_connected>
   2723e:	b100      	cbz	r0, 27242 <ble_svc_gatt_init+0x3a>
   27240:	be01      	bkpt	0x0001
   27242:	2000      	movs	r0, #0
   27244:	9000      	str	r0, [sp, #0]
   27246:	4b0c      	ldr	r3, [pc, #48]	; (27278 <ble_svc_gatt_init+0x70>)
   27248:	681c      	ldr	r4, [r3, #0]
   2724a:	4603      	mov	r3, r0
   2724c:	4602      	mov	r2, r0
   2724e:	4601      	mov	r1, r0
   27250:	47a0      	blx	r4
   27252:	e7e2      	b.n	2721a <ble_svc_gatt_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27254:	f7ed fa06 	bl	14664 <hal_debugger_connected>
   27258:	b100      	cbz	r0, 2725c <ble_svc_gatt_init+0x54>
   2725a:	be01      	bkpt	0x0001
   2725c:	2000      	movs	r0, #0
   2725e:	9000      	str	r0, [sp, #0]
   27260:	4b05      	ldr	r3, [pc, #20]	; (27278 <ble_svc_gatt_init+0x70>)
   27262:	681c      	ldr	r4, [r3, #0]
   27264:	4603      	mov	r3, r0
   27266:	4602      	mov	r2, r0
   27268:	4601      	mov	r1, r0
   2726a:	47a0      	blx	r4
}
   2726c:	e7d9      	b.n	27222 <ble_svc_gatt_init+0x1a>
   2726e:	bf00      	nop
   27270:	10003404 	.word	0x10003404
   27274:	000314ac 	.word	0x000314ac
   27278:	1000028c 	.word	0x1000028c

0002727c <ble_store_config_find_sec>:

static int
ble_store_config_find_sec(const struct ble_store_key_sec *key_sec,
                          const struct ble_store_value_sec *value_secs,
                          int num_value_secs)
{
   2727c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27280:	b083      	sub	sp, #12
   27282:	4605      	mov	r5, r0
   27284:	460f      	mov	r7, r1
   27286:	4690      	mov	r8, r2
    int skipped;
    int i;

    skipped = 0;

    for (i = 0; i < num_value_secs; i++) {
   27288:	2400      	movs	r4, #0
    skipped = 0;
   2728a:	46a1      	mov	r9, r4
    for (i = 0; i < num_value_secs; i++) {
   2728c:	e004      	b.n	27298 <ble_store_config_find_sec+0x1c>
        return type_diff;
   2728e:	4650      	mov	r0, sl
   27290:	e019      	b.n	272c6 <ble_store_config_find_sec+0x4a>
                continue;
            }
        }

        if (key_sec->idx > skipped) {
            skipped++;
   27292:	f109 0901 	add.w	r9, r9, #1
    for (i = 0; i < num_value_secs; i++) {
   27296:	3401      	adds	r4, #1
   27298:	4544      	cmp	r4, r8
   2729a:	da38      	bge.n	2730e <ble_store_config_find_sec+0x92>
        cur = value_secs + i;
   2729c:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   272a0:	ea4f 1b06 	mov.w	fp, r6, lsl #4
   272a4:	eb07 1606 	add.w	r6, r7, r6, lsl #4
        if (ble_addr_cmp(&key_sec->peer_addr, BLE_ADDR_ANY)) {
   272a8:	2300      	movs	r3, #0
   272aa:	9300      	str	r3, [sp, #0]
   272ac:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   272b0:	f895 a000 	ldrb.w	sl, [r5]
    if (type_diff != 0) {
   272b4:	f1ba 0f00 	cmp.w	sl, #0
   272b8:	d1e9      	bne.n	2728e <ble_store_config_find_sec+0x12>
    return memcmp(a->val, b->val, sizeof(a->val));
   272ba:	2206      	movs	r2, #6
   272bc:	f10d 0101 	add.w	r1, sp, #1
   272c0:	1c68      	adds	r0, r5, #1
   272c2:	f7ef fbe3 	bl	16a8c <memcmp>
   272c6:	b158      	cbz	r0, 272e0 <ble_store_config_find_sec+0x64>
    type_diff = a->type - b->type;
   272c8:	f817 000b 	ldrb.w	r0, [r7, fp]
    if (type_diff != 0) {
   272cc:	ebb0 000a 	subs.w	r0, r0, sl
   272d0:	d104      	bne.n	272dc <ble_store_config_find_sec+0x60>
    return memcmp(a->val, b->val, sizeof(a->val));
   272d2:	2206      	movs	r2, #6
   272d4:	1c69      	adds	r1, r5, #1
   272d6:	1c70      	adds	r0, r6, #1
   272d8:	f7ef fbd8 	bl	16a8c <memcmp>
            if (ble_addr_cmp(&cur->peer_addr, &key_sec->peer_addr)) {
   272dc:	2800      	cmp	r0, #0
   272de:	d1da      	bne.n	27296 <ble_store_config_find_sec+0x1a>
        if (key_sec->ediv_rand_present) {
   272e0:	7e2b      	ldrb	r3, [r5, #24]
   272e2:	f013 0f01 	tst.w	r3, #1
   272e6:	d00b      	beq.n	27300 <ble_store_config_find_sec+0x84>
            if (cur->ediv != key_sec->ediv) {
   272e8:	8932      	ldrh	r2, [r6, #8]
   272ea:	892b      	ldrh	r3, [r5, #8]
   272ec:	429a      	cmp	r2, r3
   272ee:	d1d2      	bne.n	27296 <ble_store_config_find_sec+0x1a>
            if (cur->rand_num != key_sec->rand_num) {
   272f0:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
   272f4:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   272f8:	4299      	cmp	r1, r3
   272fa:	bf08      	it	eq
   272fc:	4290      	cmpeq	r0, r2
   272fe:	d1ca      	bne.n	27296 <ble_store_config_find_sec+0x1a>
        if (key_sec->idx > skipped) {
   27300:	7e6b      	ldrb	r3, [r5, #25]
   27302:	454b      	cmp	r3, r9
   27304:	dcc5      	bgt.n	27292 <ble_store_config_find_sec+0x16>

        return i;
    }

    return -1;
}
   27306:	4620      	mov	r0, r4
   27308:	b003      	add	sp, #12
   2730a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
   2730e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   27312:	e7f8      	b.n	27306 <ble_store_config_find_sec+0x8a>

00027314 <ble_store_config_read_peer_sec>:
}

static int
ble_store_config_read_peer_sec(const struct ble_store_key_sec *key_sec,
                               struct ble_store_value_sec *value_sec)
{
   27314:	b510      	push	{r4, lr}
   27316:	460c      	mov	r4, r1
    int idx;

    idx = ble_store_config_find_sec(key_sec, ble_store_config_peer_secs,
   27318:	4b0a      	ldr	r3, [pc, #40]	; (27344 <ble_store_config_read_peer_sec+0x30>)
   2731a:	681a      	ldr	r2, [r3, #0]
   2731c:	490a      	ldr	r1, [pc, #40]	; (27348 <ble_store_config_read_peer_sec+0x34>)
   2731e:	f7ff ffad 	bl	2727c <ble_store_config_find_sec>
                             ble_store_config_num_peer_secs);
    if (idx == -1) {
   27322:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27326:	d00a      	beq.n	2733e <ble_store_config_read_peer_sec+0x2a>
        return BLE_HS_ENOENT;
    }

    *value_sec = ble_store_config_peer_secs[idx];
   27328:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2732c:	2250      	movs	r2, #80	; 0x50
   2732e:	4906      	ldr	r1, [pc, #24]	; (27348 <ble_store_config_read_peer_sec+0x34>)
   27330:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   27334:	4620      	mov	r0, r4
   27336:	f7ef fbcd 	bl	16ad4 <memcpy>
    return 0;
   2733a:	2000      	movs	r0, #0
}
   2733c:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   2733e:	2005      	movs	r0, #5
   27340:	e7fc      	b.n	2733c <ble_store_config_read_peer_sec+0x28>
   27342:	bf00      	nop
   27344:	10004290 	.word	0x10004290
   27348:	10004388 	.word	0x10004388

0002734c <ble_store_config_read_our_sec>:
{
   2734c:	b510      	push	{r4, lr}
   2734e:	460c      	mov	r4, r1
    idx = ble_store_config_find_sec(key_sec, ble_store_config_our_secs,
   27350:	4b0a      	ldr	r3, [pc, #40]	; (2737c <ble_store_config_read_our_sec+0x30>)
   27352:	681a      	ldr	r2, [r3, #0]
   27354:	490a      	ldr	r1, [pc, #40]	; (27380 <ble_store_config_read_our_sec+0x34>)
   27356:	f7ff ff91 	bl	2727c <ble_store_config_find_sec>
    if (idx == -1) {
   2735a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2735e:	d00a      	beq.n	27376 <ble_store_config_read_our_sec+0x2a>
    *value_sec = ble_store_config_our_secs[idx];
   27360:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   27364:	2250      	movs	r2, #80	; 0x50
   27366:	4906      	ldr	r1, [pc, #24]	; (27380 <ble_store_config_read_our_sec+0x34>)
   27368:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   2736c:	4620      	mov	r0, r4
   2736e:	f7ef fbb1 	bl	16ad4 <memcpy>
    return 0;
   27372:	2000      	movs	r0, #0
}
   27374:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   27376:	2005      	movs	r0, #5
   27378:	e7fc      	b.n	27374 <ble_store_config_read_our_sec+0x28>
   2737a:	bf00      	nop
   2737c:	1000428c 	.word	0x1000428c
   27380:	10004298 	.word	0x10004298

00027384 <ble_store_config_find_cccd>:
 * $cccd                                                                     *
 *****************************************************************************/

static int
ble_store_config_find_cccd(const struct ble_store_key_cccd *key)
{
   27384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27388:	b082      	sub	sp, #8
   2738a:	4605      	mov	r5, r0
    struct ble_store_value_cccd *cccd;
    int skipped;
    int i;

    skipped = 0;
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   2738c:	2400      	movs	r4, #0
    skipped = 0;
   2738e:	46a0      	mov	r8, r4
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   27390:	e004      	b.n	2739c <ble_store_config_find_cccd+0x18>
        return type_diff;
   27392:	4630      	mov	r0, r6
   27394:	e019      	b.n	273ca <ble_store_config_find_cccd+0x46>
                continue;
            }
        }

        if (key->idx > skipped) {
            skipped++;
   27396:	f108 0801 	add.w	r8, r8, #1
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   2739a:	3401      	adds	r4, #1
   2739c:	4b18      	ldr	r3, [pc, #96]	; (27400 <ble_store_config_find_cccd+0x7c>)
   2739e:	681b      	ldr	r3, [r3, #0]
   273a0:	42a3      	cmp	r3, r4
   273a2:	dd2a      	ble.n	273fa <ble_store_config_find_cccd+0x76>
        cccd = ble_store_config_cccds + i;
   273a4:	ea4f 1a04 	mov.w	sl, r4, lsl #4
   273a8:	f8df 9058 	ldr.w	r9, [pc, #88]	; 27404 <ble_store_config_find_cccd+0x80>
   273ac:	eb09 1704 	add.w	r7, r9, r4, lsl #4
        if (ble_addr_cmp(&key->peer_addr, BLE_ADDR_ANY)) {
   273b0:	2300      	movs	r3, #0
   273b2:	9300      	str	r3, [sp, #0]
   273b4:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   273b8:	782e      	ldrb	r6, [r5, #0]
    if (type_diff != 0) {
   273ba:	2e00      	cmp	r6, #0
   273bc:	d1e9      	bne.n	27392 <ble_store_config_find_cccd+0xe>
    return memcmp(a->val, b->val, sizeof(a->val));
   273be:	2206      	movs	r2, #6
   273c0:	f10d 0101 	add.w	r1, sp, #1
   273c4:	1c68      	adds	r0, r5, #1
   273c6:	f7ef fb61 	bl	16a8c <memcmp>
   273ca:	b150      	cbz	r0, 273e2 <ble_store_config_find_cccd+0x5e>
    type_diff = a->type - b->type;
   273cc:	f819 000a 	ldrb.w	r0, [r9, sl]
    if (type_diff != 0) {
   273d0:	1b80      	subs	r0, r0, r6
   273d2:	d104      	bne.n	273de <ble_store_config_find_cccd+0x5a>
    return memcmp(a->val, b->val, sizeof(a->val));
   273d4:	2206      	movs	r2, #6
   273d6:	1c69      	adds	r1, r5, #1
   273d8:	1c78      	adds	r0, r7, #1
   273da:	f7ef fb57 	bl	16a8c <memcmp>
            if (ble_addr_cmp(&cccd->peer_addr, &key->peer_addr)) {
   273de:	2800      	cmp	r0, #0
   273e0:	d1db      	bne.n	2739a <ble_store_config_find_cccd+0x16>
        if (key->chr_val_handle != 0) {
   273e2:	892b      	ldrh	r3, [r5, #8]
   273e4:	b113      	cbz	r3, 273ec <ble_store_config_find_cccd+0x68>
            if (cccd->chr_val_handle != key->chr_val_handle) {
   273e6:	893a      	ldrh	r2, [r7, #8]
   273e8:	4293      	cmp	r3, r2
   273ea:	d1d6      	bne.n	2739a <ble_store_config_find_cccd+0x16>
        if (key->idx > skipped) {
   273ec:	7aab      	ldrb	r3, [r5, #10]
   273ee:	4543      	cmp	r3, r8
   273f0:	dcd1      	bgt.n	27396 <ble_store_config_find_cccd+0x12>

        return i;
    }

    return -1;
}
   273f2:	4620      	mov	r0, r4
   273f4:	b002      	add	sp, #8
   273f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return -1;
   273fa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   273fe:	e7f8      	b.n	273f2 <ble_store_config_find_cccd+0x6e>
   27400:	10004288 	.word	0x10004288
   27404:	10004208 	.word	0x10004208

00027408 <ble_store_config_read_cccd>:
}

static int
ble_store_config_read_cccd(const struct ble_store_key_cccd *key_cccd,
                           struct ble_store_value_cccd *value_cccd)
{
   27408:	b510      	push	{r4, lr}
   2740a:	460c      	mov	r4, r1
    int idx;

    idx = ble_store_config_find_cccd(key_cccd);
   2740c:	f7ff ffba 	bl	27384 <ble_store_config_find_cccd>
    if (idx == -1) {
   27410:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27414:	d007      	beq.n	27426 <ble_store_config_read_cccd+0x1e>
        return BLE_HS_ENOENT;
    }

    *value_cccd = ble_store_config_cccds[idx];
   27416:	4b05      	ldr	r3, [pc, #20]	; (2742c <ble_store_config_read_cccd+0x24>)
   27418:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   2741c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   2741e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return 0;
   27422:	2000      	movs	r0, #0
}
   27424:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   27426:	2005      	movs	r0, #5
   27428:	e7fc      	b.n	27424 <ble_store_config_read_cccd+0x1c>
   2742a:	bf00      	nop
   2742c:	10004208 	.word	0x10004208

00027430 <ble_store_config_print_key_sec>:
{
   27430:	b510      	push	{r4, lr}
   27432:	b082      	sub	sp, #8
   27434:	4604      	mov	r4, r0
    if (ble_addr_cmp(&key_sec->peer_addr, BLE_ADDR_ANY)) {
   27436:	2300      	movs	r3, #0
   27438:	9300      	str	r3, [sp, #0]
   2743a:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   2743e:	7800      	ldrb	r0, [r0, #0]
    if (type_diff != 0) {
   27440:	b928      	cbnz	r0, 2744e <ble_store_config_print_key_sec+0x1e>
    return memcmp(a->val, b->val, sizeof(a->val));
   27442:	2206      	movs	r2, #6
   27444:	f10d 0101 	add.w	r1, sp, #1
   27448:	1c60      	adds	r0, r4, #1
   2744a:	f7ef fb1f 	bl	16a8c <memcmp>
   2744e:	b908      	cbnz	r0, 27454 <ble_store_config_print_key_sec+0x24>
}
   27450:	b002      	add	sp, #8
   27452:	bd10      	pop	{r4, pc}
        ble_hs_log_flat_buf(key_sec->peer_addr.val, 6);
   27454:	2106      	movs	r1, #6
   27456:	1c60      	adds	r0, r4, #1
   27458:	f7fc fa18 	bl	2388c <ble_hs_log_flat_buf>
}
   2745c:	e7f8      	b.n	27450 <ble_store_config_print_key_sec+0x20>

0002745e <ble_store_config_read>:
 * @return                      0 if a key was found; else BLE_HS_ENOENT.
 */
int
ble_store_config_read(int obj_type, const union ble_store_key *key,
                      union ble_store_value *value)
{
   2745e:	b538      	push	{r3, r4, r5, lr}
   27460:	460c      	mov	r4, r1
   27462:	4615      	mov	r5, r2
    int rc;

    switch (obj_type) {
   27464:	2802      	cmp	r0, #2
   27466:	d005      	beq.n	27474 <ble_store_config_read+0x16>
   27468:	2803      	cmp	r0, #3
   2746a:	d013      	beq.n	27494 <ble_store_config_read+0x36>
   2746c:	2801      	cmp	r0, #1
   2746e:	d009      	beq.n	27484 <ble_store_config_read+0x26>
   27470:	2008      	movs	r0, #8
        return rc;

    default:
        return BLE_HS_ENOTSUP;
    }
}
   27472:	bd38      	pop	{r3, r4, r5, pc}
        ble_store_config_print_key_sec(&key->sec);
   27474:	4608      	mov	r0, r1
   27476:	f7ff ffdb 	bl	27430 <ble_store_config_print_key_sec>
        rc = ble_store_config_read_peer_sec(&key->sec, &value->sec);
   2747a:	4629      	mov	r1, r5
   2747c:	4620      	mov	r0, r4
   2747e:	f7ff ff49 	bl	27314 <ble_store_config_read_peer_sec>
        return rc;
   27482:	e7f6      	b.n	27472 <ble_store_config_read+0x14>
        ble_store_config_print_key_sec(&key->sec);
   27484:	4608      	mov	r0, r1
   27486:	f7ff ffd3 	bl	27430 <ble_store_config_print_key_sec>
        rc = ble_store_config_read_our_sec(&key->sec, &value->sec);
   2748a:	4629      	mov	r1, r5
   2748c:	4620      	mov	r0, r4
   2748e:	f7ff ff5d 	bl	2734c <ble_store_config_read_our_sec>
        return rc;
   27492:	e7ee      	b.n	27472 <ble_store_config_read+0x14>
        rc = ble_store_config_read_cccd(&key->cccd, &value->cccd);
   27494:	4611      	mov	r1, r2
   27496:	4620      	mov	r0, r4
   27498:	f7ff ffb6 	bl	27408 <ble_store_config_read_cccd>
        return rc;
   2749c:	e7e9      	b.n	27472 <ble_store_config_read+0x14>

0002749e <ble_store_config_print_value_sec>:
{
   2749e:	b510      	push	{r4, lr}
   274a0:	4604      	mov	r4, r0
    if (sec->ltk_present) {
   274a2:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   274a6:	f013 0f01 	tst.w	r3, #1
   274aa:	d10a      	bne.n	274c2 <ble_store_config_print_value_sec+0x24>
    if (sec->irk_present) {
   274ac:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   274b0:	f013 0f01 	tst.w	r3, #1
   274b4:	d10a      	bne.n	274cc <ble_store_config_print_value_sec+0x2e>
    if (sec->csrk_present) {
   274b6:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   274ba:	f013 0f01 	tst.w	r3, #1
   274be:	d10b      	bne.n	274d8 <ble_store_config_print_value_sec+0x3a>
}
   274c0:	bd10      	pop	{r4, pc}
        ble_hs_log_flat_buf(sec->ltk, 16);
   274c2:	2110      	movs	r1, #16
   274c4:	3018      	adds	r0, #24
   274c6:	f7fc f9e1 	bl	2388c <ble_hs_log_flat_buf>
   274ca:	e7ef      	b.n	274ac <ble_store_config_print_value_sec+0xe>
        ble_hs_log_flat_buf(sec->irk, 16);
   274cc:	2110      	movs	r1, #16
   274ce:	f104 0029 	add.w	r0, r4, #41	; 0x29
   274d2:	f7fc f9db 	bl	2388c <ble_hs_log_flat_buf>
   274d6:	e7ee      	b.n	274b6 <ble_store_config_print_value_sec+0x18>
        ble_hs_log_flat_buf(sec->csrk, 16);
   274d8:	2110      	movs	r1, #16
   274da:	f104 003a 	add.w	r0, r4, #58	; 0x3a
   274de:	f7fc f9d5 	bl	2388c <ble_hs_log_flat_buf>
}
   274e2:	e7ed      	b.n	274c0 <ble_store_config_print_value_sec+0x22>

000274e4 <ble_store_config_write_peer_sec>:
{
   274e4:	b530      	push	{r4, r5, lr}
   274e6:	b089      	sub	sp, #36	; 0x24
   274e8:	4604      	mov	r4, r0
    ble_store_config_print_value_sec(value_sec);
   274ea:	f7ff ffd8 	bl	2749e <ble_store_config_print_value_sec>
    ble_store_key_from_value_sec(&key_sec, value_sec);
   274ee:	4621      	mov	r1, r4
   274f0:	4668      	mov	r0, sp
   274f2:	f7ff f899 	bl	26628 <ble_store_key_from_value_sec>
    idx = ble_store_config_find_sec(&key_sec, ble_store_config_peer_secs,
   274f6:	4b0f      	ldr	r3, [pc, #60]	; (27534 <ble_store_config_write_peer_sec+0x50>)
   274f8:	681d      	ldr	r5, [r3, #0]
   274fa:	462a      	mov	r2, r5
   274fc:	490e      	ldr	r1, [pc, #56]	; (27538 <ble_store_config_write_peer_sec+0x54>)
   274fe:	4668      	mov	r0, sp
   27500:	f7ff febc 	bl	2727c <ble_store_config_find_sec>
    if (idx == -1) {
   27504:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27508:	d00b      	beq.n	27522 <ble_store_config_write_peer_sec+0x3e>
    ble_store_config_peer_secs[idx] = *value_sec;
   2750a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2750e:	2250      	movs	r2, #80	; 0x50
   27510:	4621      	mov	r1, r4
   27512:	4b09      	ldr	r3, [pc, #36]	; (27538 <ble_store_config_write_peer_sec+0x54>)
   27514:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   27518:	f7ef fadc 	bl	16ad4 <memcpy>
    return 0;
   2751c:	2000      	movs	r0, #0
}
   2751e:	b009      	add	sp, #36	; 0x24
   27520:	bd30      	pop	{r4, r5, pc}
        if (ble_store_config_num_peer_secs >= MYNEWT_VAL(BLE_STORE_MAX_BONDS)) {
   27522:	2d02      	cmp	r5, #2
   27524:	dc04      	bgt.n	27530 <ble_store_config_write_peer_sec+0x4c>
        ble_store_config_num_peer_secs++;
   27526:	1c6a      	adds	r2, r5, #1
   27528:	4b02      	ldr	r3, [pc, #8]	; (27534 <ble_store_config_write_peer_sec+0x50>)
   2752a:	601a      	str	r2, [r3, #0]
        idx = ble_store_config_num_peer_secs;
   2752c:	4628      	mov	r0, r5
   2752e:	e7ec      	b.n	2750a <ble_store_config_write_peer_sec+0x26>
            return BLE_HS_ESTORE_CAP;
   27530:	201b      	movs	r0, #27
   27532:	e7f4      	b.n	2751e <ble_store_config_write_peer_sec+0x3a>
   27534:	10004290 	.word	0x10004290
   27538:	10004388 	.word	0x10004388

0002753c <ble_store_config_write_our_sec>:
{
   2753c:	b530      	push	{r4, r5, lr}
   2753e:	b089      	sub	sp, #36	; 0x24
   27540:	4604      	mov	r4, r0
    ble_store_config_print_value_sec(value_sec);
   27542:	f7ff ffac 	bl	2749e <ble_store_config_print_value_sec>
    ble_store_key_from_value_sec(&key_sec, value_sec);
   27546:	4621      	mov	r1, r4
   27548:	4668      	mov	r0, sp
   2754a:	f7ff f86d 	bl	26628 <ble_store_key_from_value_sec>
    idx = ble_store_config_find_sec(&key_sec, ble_store_config_our_secs,
   2754e:	4b0f      	ldr	r3, [pc, #60]	; (2758c <ble_store_config_write_our_sec+0x50>)
   27550:	681d      	ldr	r5, [r3, #0]
   27552:	462a      	mov	r2, r5
   27554:	490e      	ldr	r1, [pc, #56]	; (27590 <ble_store_config_write_our_sec+0x54>)
   27556:	4668      	mov	r0, sp
   27558:	f7ff fe90 	bl	2727c <ble_store_config_find_sec>
    if (idx == -1) {
   2755c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27560:	d00b      	beq.n	2757a <ble_store_config_write_our_sec+0x3e>
    ble_store_config_our_secs[idx] = *value_sec;
   27562:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   27566:	2250      	movs	r2, #80	; 0x50
   27568:	4621      	mov	r1, r4
   2756a:	4b09      	ldr	r3, [pc, #36]	; (27590 <ble_store_config_write_our_sec+0x54>)
   2756c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   27570:	f7ef fab0 	bl	16ad4 <memcpy>
    return 0;
   27574:	2000      	movs	r0, #0
}
   27576:	b009      	add	sp, #36	; 0x24
   27578:	bd30      	pop	{r4, r5, pc}
        if (ble_store_config_num_our_secs >= MYNEWT_VAL(BLE_STORE_MAX_BONDS)) {
   2757a:	2d02      	cmp	r5, #2
   2757c:	dc04      	bgt.n	27588 <ble_store_config_write_our_sec+0x4c>
        ble_store_config_num_our_secs++;
   2757e:	1c6a      	adds	r2, r5, #1
   27580:	4b02      	ldr	r3, [pc, #8]	; (2758c <ble_store_config_write_our_sec+0x50>)
   27582:	601a      	str	r2, [r3, #0]
        idx = ble_store_config_num_our_secs;
   27584:	4628      	mov	r0, r5
   27586:	e7ec      	b.n	27562 <ble_store_config_write_our_sec+0x26>
            return BLE_HS_ESTORE_CAP;
   27588:	201b      	movs	r0, #27
   2758a:	e7f4      	b.n	27576 <ble_store_config_write_our_sec+0x3a>
   2758c:	1000428c 	.word	0x1000428c
   27590:	10004298 	.word	0x10004298

00027594 <ble_store_config_write_cccd>:
{
   27594:	b530      	push	{r4, r5, lr}
   27596:	b085      	sub	sp, #20
   27598:	4604      	mov	r4, r0
    ble_store_key_from_value_cccd(&key_cccd, value_cccd);
   2759a:	4601      	mov	r1, r0
   2759c:	a801      	add	r0, sp, #4
   2759e:	f7ff f837 	bl	26610 <ble_store_key_from_value_cccd>
    idx = ble_store_config_find_cccd(&key_cccd);
   275a2:	a801      	add	r0, sp, #4
   275a4:	f7ff feee 	bl	27384 <ble_store_config_find_cccd>
    if (idx == -1) {
   275a8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   275ac:	d009      	beq.n	275c2 <ble_store_config_write_cccd+0x2e>
    ble_store_config_cccds[idx] = *value_cccd;
   275ae:	4d0a      	ldr	r5, [pc, #40]	; (275d8 <ble_store_config_write_cccd+0x44>)
   275b0:	eb05 1500 	add.w	r5, r5, r0, lsl #4
   275b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   275b8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    return 0;
   275bc:	2000      	movs	r0, #0
}
   275be:	b005      	add	sp, #20
   275c0:	bd30      	pop	{r4, r5, pc}
        if (ble_store_config_num_cccds >= MYNEWT_VAL(BLE_STORE_MAX_CCCDS)) {
   275c2:	4b06      	ldr	r3, [pc, #24]	; (275dc <ble_store_config_write_cccd+0x48>)
   275c4:	6818      	ldr	r0, [r3, #0]
   275c6:	2807      	cmp	r0, #7
   275c8:	dc03      	bgt.n	275d2 <ble_store_config_write_cccd+0x3e>
        ble_store_config_num_cccds++;
   275ca:	1c43      	adds	r3, r0, #1
   275cc:	4a03      	ldr	r2, [pc, #12]	; (275dc <ble_store_config_write_cccd+0x48>)
   275ce:	6013      	str	r3, [r2, #0]
   275d0:	e7ed      	b.n	275ae <ble_store_config_write_cccd+0x1a>
            return BLE_HS_ESTORE_CAP;
   275d2:	201b      	movs	r0, #27
   275d4:	e7f3      	b.n	275be <ble_store_config_write_cccd+0x2a>
   275d6:	bf00      	nop
   275d8:	10004208 	.word	0x10004208
   275dc:	10004288 	.word	0x10004288

000275e0 <ble_store_config_write>:
 * @return                      0 on success;
 *                              BLE_HS_ESTORE_CAP if the database is full.
 */
int
ble_store_config_write(int obj_type, const union ble_store_value *val)
{
   275e0:	b508      	push	{r3, lr}
   275e2:	4603      	mov	r3, r0
   275e4:	4608      	mov	r0, r1
    int rc;

    switch (obj_type) {
   275e6:	2b02      	cmp	r3, #2
   275e8:	d005      	beq.n	275f6 <ble_store_config_write+0x16>
   275ea:	2b03      	cmp	r3, #3
   275ec:	d009      	beq.n	27602 <ble_store_config_write+0x22>
   275ee:	2b01      	cmp	r3, #1
   275f0:	d004      	beq.n	275fc <ble_store_config_write+0x1c>
   275f2:	2008      	movs	r0, #8
        return rc;

    default:
        return BLE_HS_ENOTSUP;
    }
}
   275f4:	bd08      	pop	{r3, pc}
        rc = ble_store_config_write_peer_sec(&val->sec);
   275f6:	f7ff ff75 	bl	274e4 <ble_store_config_write_peer_sec>
        return rc;
   275fa:	e7fb      	b.n	275f4 <ble_store_config_write+0x14>
        rc = ble_store_config_write_our_sec(&val->sec);
   275fc:	f7ff ff9e 	bl	2753c <ble_store_config_write_our_sec>
        return rc;
   27600:	e7f8      	b.n	275f4 <ble_store_config_write+0x14>
        rc = ble_store_config_write_cccd(&val->cccd);
   27602:	f7ff ffc7 	bl	27594 <ble_store_config_write_cccd>
        return rc;
   27606:	e7f5      	b.n	275f4 <ble_store_config_write+0x14>

00027608 <ble_store_config_delete_obj>:
{
   27608:	b510      	push	{r4, lr}
    (*num_values)--;
   2760a:	681c      	ldr	r4, [r3, #0]
   2760c:	3c01      	subs	r4, #1
   2760e:	601c      	str	r4, [r3, #0]
    if (idx < *num_values) {
   27610:	4294      	cmp	r4, r2
   27612:	dc01      	bgt.n	27618 <ble_store_config_delete_obj+0x10>
}
   27614:	2000      	movs	r0, #0
   27616:	bd10      	pop	{r4, pc}
        dst += idx * value_size;
   27618:	fb01 0002 	mla	r0, r1, r2, r0
        move_count = *num_values - idx;
   2761c:	1aa2      	subs	r2, r4, r2
        memmove(dst, src, move_count * value_size);
   2761e:	fb02 f201 	mul.w	r2, r2, r1
   27622:	4401      	add	r1, r0
   27624:	f7ef fa63 	bl	16aee <memmove>
   27628:	e7f4      	b.n	27614 <ble_store_config_delete_obj+0xc>

0002762a <ble_store_config_delete_sec>:
{
   2762a:	b538      	push	{r3, r4, r5, lr}
   2762c:	460d      	mov	r5, r1
   2762e:	4614      	mov	r4, r2
    idx = ble_store_config_find_sec(key_sec, value_secs, *num_value_secs);
   27630:	6812      	ldr	r2, [r2, #0]
   27632:	f7ff fe23 	bl	2727c <ble_store_config_find_sec>
    if (idx == -1) {
   27636:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2763a:	d006      	beq.n	2764a <ble_store_config_delete_sec+0x20>
   2763c:	4602      	mov	r2, r0
    rc = ble_store_config_delete_obj(value_secs, sizeof *value_secs, idx,
   2763e:	4623      	mov	r3, r4
   27640:	2150      	movs	r1, #80	; 0x50
   27642:	4628      	mov	r0, r5
   27644:	f7ff ffe0 	bl	27608 <ble_store_config_delete_obj>
}
   27648:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOENT;
   2764a:	2005      	movs	r0, #5
   2764c:	e7fc      	b.n	27648 <ble_store_config_delete_sec+0x1e>
	...

00027650 <ble_store_config_delete_peer_sec>:
{
   27650:	b508      	push	{r3, lr}
    rc = ble_store_config_delete_sec(key_sec, ble_store_config_peer_secs,
   27652:	4a02      	ldr	r2, [pc, #8]	; (2765c <ble_store_config_delete_peer_sec+0xc>)
   27654:	4902      	ldr	r1, [pc, #8]	; (27660 <ble_store_config_delete_peer_sec+0x10>)
   27656:	f7ff ffe8 	bl	2762a <ble_store_config_delete_sec>
}
   2765a:	bd08      	pop	{r3, pc}
   2765c:	10004290 	.word	0x10004290
   27660:	10004388 	.word	0x10004388

00027664 <ble_store_config_delete_our_sec>:
{
   27664:	b508      	push	{r3, lr}
    rc = ble_store_config_delete_sec(key_sec, ble_store_config_our_secs,
   27666:	4a02      	ldr	r2, [pc, #8]	; (27670 <ble_store_config_delete_our_sec+0xc>)
   27668:	4902      	ldr	r1, [pc, #8]	; (27674 <ble_store_config_delete_our_sec+0x10>)
   2766a:	f7ff ffde 	bl	2762a <ble_store_config_delete_sec>
}
   2766e:	bd08      	pop	{r3, pc}
   27670:	1000428c 	.word	0x1000428c
   27674:	10004298 	.word	0x10004298

00027678 <ble_store_config_delete_cccd>:
{
   27678:	b508      	push	{r3, lr}
    idx = ble_store_config_find_cccd(key_cccd);
   2767a:	f7ff fe83 	bl	27384 <ble_store_config_find_cccd>
    if (idx == -1) {
   2767e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27682:	d006      	beq.n	27692 <ble_store_config_delete_cccd+0x1a>
   27684:	4602      	mov	r2, r0
    rc = ble_store_config_delete_obj(ble_store_config_cccds,
   27686:	4b04      	ldr	r3, [pc, #16]	; (27698 <ble_store_config_delete_cccd+0x20>)
   27688:	2110      	movs	r1, #16
   2768a:	4804      	ldr	r0, [pc, #16]	; (2769c <ble_store_config_delete_cccd+0x24>)
   2768c:	f7ff ffbc 	bl	27608 <ble_store_config_delete_obj>
}
   27690:	bd08      	pop	{r3, pc}
        return BLE_HS_ENOENT;
   27692:	2005      	movs	r0, #5
   27694:	e7fc      	b.n	27690 <ble_store_config_delete_cccd+0x18>
   27696:	bf00      	nop
   27698:	10004288 	.word	0x10004288
   2769c:	10004208 	.word	0x10004208

000276a0 <ble_store_config_delete>:

int
ble_store_config_delete(int obj_type, const union ble_store_key *key)
{
   276a0:	b508      	push	{r3, lr}
   276a2:	4603      	mov	r3, r0
   276a4:	4608      	mov	r0, r1
    int rc;

    switch (obj_type) {
   276a6:	2b02      	cmp	r3, #2
   276a8:	d005      	beq.n	276b6 <ble_store_config_delete+0x16>
   276aa:	2b03      	cmp	r3, #3
   276ac:	d009      	beq.n	276c2 <ble_store_config_delete+0x22>
   276ae:	2b01      	cmp	r3, #1
   276b0:	d004      	beq.n	276bc <ble_store_config_delete+0x1c>
   276b2:	2008      	movs	r0, #8
        return rc;

    default:
        return BLE_HS_ENOTSUP;
    }
}
   276b4:	bd08      	pop	{r3, pc}
        rc = ble_store_config_delete_peer_sec(&key->sec);
   276b6:	f7ff ffcb 	bl	27650 <ble_store_config_delete_peer_sec>
        return rc;
   276ba:	e7fb      	b.n	276b4 <ble_store_config_delete+0x14>
        rc = ble_store_config_delete_our_sec(&key->sec);
   276bc:	f7ff ffd2 	bl	27664 <ble_store_config_delete_our_sec>
        return rc;
   276c0:	e7f8      	b.n	276b4 <ble_store_config_delete+0x14>
        rc = ble_store_config_delete_cccd(&key->cccd);
   276c2:	f7ff ffd9 	bl	27678 <ble_store_config_delete_cccd>
        return rc;
   276c6:	e7f5      	b.n	276b4 <ble_store_config_delete+0x14>

000276c8 <ble_store_config_init>:

void
ble_store_config_init(void)
{
   276c8:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   276ca:	4b0e      	ldr	r3, [pc, #56]	; (27704 <ble_store_config_init+0x3c>)
   276cc:	781b      	ldrb	r3, [r3, #0]
   276ce:	b173      	cbz	r3, 276ee <ble_store_config_init+0x26>

    ble_hs_cfg.store_read_cb = ble_store_config_read;
   276d0:	4b0d      	ldr	r3, [pc, #52]	; (27708 <ble_store_config_init+0x40>)
   276d2:	4a0e      	ldr	r2, [pc, #56]	; (2770c <ble_store_config_init+0x44>)
   276d4:	615a      	str	r2, [r3, #20]
    ble_hs_cfg.store_write_cb = ble_store_config_write;
   276d6:	4a0e      	ldr	r2, [pc, #56]	; (27710 <ble_store_config_init+0x48>)
   276d8:	619a      	str	r2, [r3, #24]
    ble_hs_cfg.store_delete_cb = ble_store_config_delete;
   276da:	4a0e      	ldr	r2, [pc, #56]	; (27714 <ble_store_config_init+0x4c>)
   276dc:	61da      	str	r2, [r3, #28]

    /* Re-initialize BSS values in case of unit tests. */
    ble_store_config_num_our_secs = 0;
   276de:	2300      	movs	r3, #0
   276e0:	4a0d      	ldr	r2, [pc, #52]	; (27718 <ble_store_config_init+0x50>)
   276e2:	6013      	str	r3, [r2, #0]
    ble_store_config_num_peer_secs = 0;
   276e4:	4a0d      	ldr	r2, [pc, #52]	; (2771c <ble_store_config_init+0x54>)
   276e6:	6013      	str	r3, [r2, #0]
    ble_store_config_num_cccds = 0;
   276e8:	4a0d      	ldr	r2, [pc, #52]	; (27720 <ble_store_config_init+0x58>)
   276ea:	6013      	str	r3, [r2, #0]

    ble_store_config_conf_init();
}
   276ec:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   276ee:	f7ec ffb9 	bl	14664 <hal_debugger_connected>
   276f2:	b100      	cbz	r0, 276f6 <ble_store_config_init+0x2e>
   276f4:	be01      	bkpt	0x0001
   276f6:	2300      	movs	r3, #0
   276f8:	461a      	mov	r2, r3
   276fa:	4619      	mov	r1, r3
   276fc:	4618      	mov	r0, r3
   276fe:	f7ed fb51 	bl	14da4 <__assert_func>
   27702:	bf00      	nop
   27704:	10003404 	.word	0x10003404
   27708:	100002bc 	.word	0x100002bc
   2770c:	0002745f 	.word	0x0002745f
   27710:	000275e1 	.word	0x000275e1
   27714:	000276a1 	.word	0x000276a1
   27718:	1000428c 	.word	0x1000428c
   2771c:	10004290 	.word	0x10004290
   27720:	10004288 	.word	0x10004288

00027724 <ble_hs_util_load_rand_addr>:
        return 0;
    }
#endif

    return BLE_HS_ENOADDR;
}
   27724:	2015      	movs	r0, #21
   27726:	4770      	bx	lr

00027728 <ble_hs_util_ensure_rand_addr>:

static int
ble_hs_util_ensure_rand_addr(void)
{
   27728:	b500      	push	{lr}
   2772a:	b083      	sub	sp, #12
    ble_addr_t addr;
    int rc;

    /* If we already have a random address, then we are done. */
    rc = ble_hs_id_copy_addr(BLE_ADDR_RANDOM, NULL, NULL);
   2772c:	2200      	movs	r2, #0
   2772e:	4611      	mov	r1, r2
   27730:	2001      	movs	r0, #1
   27732:	f7fc f83f 	bl	237b4 <ble_hs_id_copy_addr>
    if (rc == 0) {
   27736:	4603      	mov	r3, r0
   27738:	b120      	cbz	r0, 27744 <ble_hs_util_ensure_rand_addr+0x1c>
        return 0;
    }

    /* Otherwise, try to load a random address. */
    rc = ble_hs_util_load_rand_addr(&addr);
   2773a:	4668      	mov	r0, sp
   2773c:	f7ff fff2 	bl	27724 <ble_hs_util_load_rand_addr>
    if (rc != 0) {
   27740:	4603      	mov	r3, r0
   27742:	b118      	cbz	r0, 2774c <ble_hs_util_ensure_rand_addr+0x24>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   27744:	4618      	mov	r0, r3
   27746:	b003      	add	sp, #12
   27748:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = ble_hs_id_set_rnd(addr.val);
   2774c:	f10d 0001 	add.w	r0, sp, #1
   27750:	f7fb ffb0 	bl	236b4 <ble_hs_id_set_rnd>
   27754:	4603      	mov	r3, r0
    if (rc != 0) {
   27756:	e7f5      	b.n	27744 <ble_hs_util_ensure_rand_addr+0x1c>

00027758 <ble_hs_util_ensure_addr>:

int
ble_hs_util_ensure_addr(int prefer_random)
{
   27758:	b508      	push	{r3, lr}
    int rc;

    if (prefer_random) {
   2775a:	b150      	cbz	r0, 27772 <ble_hs_util_ensure_addr+0x1a>
        /* Try to load a random address. */
        rc = ble_hs_util_ensure_rand_addr();
   2775c:	f7ff ffe4 	bl	27728 <ble_hs_util_ensure_rand_addr>
        if (rc == BLE_HS_ENOADDR) {
   27760:	2815      	cmp	r0, #21
   27762:	d000      	beq.n	27766 <ble_hs_util_ensure_addr+0xe>
            rc = ble_hs_util_ensure_rand_addr();
        }
    }

    return rc;
}
   27764:	bd08      	pop	{r3, pc}
            rc = ble_hs_id_copy_addr(BLE_ADDR_PUBLIC, NULL, NULL);
   27766:	2200      	movs	r2, #0
   27768:	4611      	mov	r1, r2
   2776a:	4610      	mov	r0, r2
   2776c:	f7fc f822 	bl	237b4 <ble_hs_id_copy_addr>
   27770:	e7f8      	b.n	27764 <ble_hs_util_ensure_addr+0xc>
        rc = ble_hs_id_copy_addr(BLE_ADDR_PUBLIC, NULL, NULL);
   27772:	2200      	movs	r2, #0
   27774:	4611      	mov	r1, r2
   27776:	4610      	mov	r0, r2
   27778:	f7fc f81c 	bl	237b4 <ble_hs_id_copy_addr>
        if (rc == BLE_HS_ENOADDR) {
   2777c:	2815      	cmp	r0, #21
   2777e:	d1f1      	bne.n	27764 <ble_hs_util_ensure_addr+0xc>
            rc = ble_hs_util_ensure_rand_addr();
   27780:	f7ff ffd2 	bl	27728 <ble_hs_util_ensure_rand_addr>
    return rc;
   27784:	e7ee      	b.n	27764 <ble_hs_util_ensure_addr+0xc>
	...

00027788 <apollo3_update_wake>:
}

/* Wake update helper function */
static void
apollo3_update_wake(void)
{
   27788:	b500      	push	{lr}
   2778a:	b083      	sub	sp, #12
    AM_CRITICAL_BEGIN;
   2778c:	f004 fcd6 	bl	2c13c <am_hal_interrupt_master_disable>
   27790:	9001      	str	r0, [sp, #4]

    // We want to set WAKE if there's something in the write queue, but not if
    // SPISTATUS or IRQ is high.
    if ((BLEIFn(0)->BSTATUS_b.SPISTATUS == 0) && (BLE_IRQ_CHECK() == false))
   27792:	4b11      	ldr	r3, [pc, #68]	; (277d8 <apollo3_update_wake+0x50>)
   27794:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   27798:	f013 0f08 	tst.w	r3, #8
   2779c:	d105      	bne.n	277aa <apollo3_update_wake+0x22>
   2779e:	4b0e      	ldr	r3, [pc, #56]	; (277d8 <apollo3_update_wake+0x50>)
   277a0:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   277a4:	f013 0f80 	tst.w	r3, #128	; 0x80
   277a8:	d005      	beq.n	277b6 <apollo3_update_wake+0x2e>
        {
            am_hal_ble_wakeup_set(BLE, 0);
        }
    }

    AM_CRITICAL_END;
   277aa:	9801      	ldr	r0, [sp, #4]
   277ac:	f004 fcca 	bl	2c144 <am_hal_interrupt_master_set>
}
   277b0:	b003      	add	sp, #12
   277b2:	f85d fb04 	ldr.w	pc, [sp], #4
        am_hal_ble_wakeup_set(BLE, 1);
   277b6:	2101      	movs	r1, #1
   277b8:	4b08      	ldr	r3, [pc, #32]	; (277dc <apollo3_update_wake+0x54>)
   277ba:	6818      	ldr	r0, [r3, #0]
   277bc:	f003 fa6e 	bl	2ac9c <am_hal_ble_wakeup_set>
        if (BLE_IRQ_CHECK() == true)
   277c0:	4b05      	ldr	r3, [pc, #20]	; (277d8 <apollo3_update_wake+0x50>)
   277c2:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   277c6:	f013 0f80 	tst.w	r3, #128	; 0x80
   277ca:	d0ee      	beq.n	277aa <apollo3_update_wake+0x22>
            am_hal_ble_wakeup_set(BLE, 0);
   277cc:	2100      	movs	r1, #0
   277ce:	4b03      	ldr	r3, [pc, #12]	; (277dc <apollo3_update_wake+0x54>)
   277d0:	6818      	ldr	r0, [r3, #0]
   277d2:	f003 fa63 	bl	2ac9c <am_hal_ble_wakeup_set>
   277d6:	e7e8      	b.n	277aa <apollo3_update_wake+0x22>
   277d8:	5000c000 	.word	0x5000c000
   277dc:	10004478 	.word	0x10004478

000277e0 <apollo3_hci_radio_boot>:
{
   277e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   277e4:	b08e      	sub	sp, #56	; 0x38
   277e6:	4680      	mov	r8, r0
    uint32_t ui32Status = AM_HAL_STATUS_FAIL;
   277e8:	2401      	movs	r4, #1
    uint32_t ui32NumXtalRetries = 0;
   277ea:	2700      	movs	r7, #0
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
   277ec:	e01b      	b.n	27826 <apollo3_hci_radio_boot+0x46>
            os_time_delay(OS_TICKS_PER_SEC);
   277ee:	2080      	movs	r0, #128	; 0x80
   277f0:	f7ee ff02 	bl	165f8 <os_time_delay>
        ui32Status = am_hal_ble_boot(BLE);
   277f4:	4b33      	ldr	r3, [pc, #204]	; (278c4 <apollo3_hci_radio_boot+0xe4>)
   277f6:	6818      	ldr	r0, [r3, #0]
   277f8:	f004 fba2 	bl	2bf40 <am_hal_ble_boot>
        if (ui32Status == AM_HAL_STATUS_SUCCESS)
   277fc:	4604      	mov	r4, r0
   277fe:	2800      	cmp	r0, #0
   27800:	d039      	beq.n	27876 <apollo3_hci_radio_boot+0x96>
        else if (ui32Status == AM_HAL_BLE_32K_CLOCK_UNSTABLE)
   27802:	4b31      	ldr	r3, [pc, #196]	; (278c8 <apollo3_hci_radio_boot+0xe8>)
   27804:	4298      	cmp	r0, r3
   27806:	d12a      	bne.n	2785e <apollo3_hci_radio_boot+0x7e>
            am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
   27808:	4d2e      	ldr	r5, [pc, #184]	; (278c4 <apollo3_hci_radio_boot+0xe4>)
   2780a:	2101      	movs	r1, #1
   2780c:	6828      	ldr	r0, [r5, #0]
   2780e:	f003 fb6b 	bl	2aee8 <am_hal_ble_power_control>
            am_hal_ble_deinitialize(BLE);
   27812:	6828      	ldr	r0, [r5, #0]
   27814:	f003 faba 	bl	2ad8c <am_hal_ble_deinitialize>
            if (ui32NumXtalRetries++ < HCI_DRV_MAX_XTAL_RETRIES)
   27818:	1c7d      	adds	r5, r7, #1
   2781a:	2f09      	cmp	r7, #9
   2781c:	d827      	bhi.n	2786e <apollo3_hci_radio_boot+0x8e>
                os_time_delay(OS_TICKS_PER_SEC);
   2781e:	2080      	movs	r0, #128	; 0x80
   27820:	f7ee feea 	bl	165f8 <os_time_delay>
            if (ui32NumXtalRetries++ < HCI_DRV_MAX_XTAL_RETRIES)
   27824:	462f      	mov	r7, r5
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
   27826:	b334      	cbz	r4, 27876 <apollo3_hci_radio_boot+0x96>
        am_hal_pwrctrl_low_power_init();
   27828:	f004 fe7a 	bl	2c520 <am_hal_pwrctrl_low_power_init>
        am_hal_ble_initialize(0, &BLE);
   2782c:	4e25      	ldr	r6, [pc, #148]	; (278c4 <apollo3_hci_radio_boot+0xe4>)
   2782e:	4631      	mov	r1, r6
   27830:	2000      	movs	r0, #0
   27832:	f003 fa57 	bl	2ace4 <am_hal_ble_initialize>
        am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_ACTIVE);
   27836:	2100      	movs	r1, #0
   27838:	6830      	ldr	r0, [r6, #0]
   2783a:	f003 fb55 	bl	2aee8 <am_hal_ble_power_control>
        am_hal_ble_config_t sBleConfig =
   2783e:	ac01      	add	r4, sp, #4
   27840:	4d22      	ldr	r5, [pc, #136]	; (278cc <apollo3_hci_radio_boot+0xec>)
   27842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   27844:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   27846:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   2784a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        am_hal_ble_config(BLE, &sBleConfig);
   2784e:	a901      	add	r1, sp, #4
   27850:	6830      	ldr	r0, [r6, #0]
   27852:	f003 fac9 	bl	2ade8 <am_hal_ble_config>
        if ( bColdBoot )
   27856:	f1b8 0f00 	cmp.w	r8, #0
   2785a:	d0cb      	beq.n	277f4 <apollo3_hci_radio_boot+0x14>
   2785c:	e7c7      	b.n	277ee <apollo3_hci_radio_boot+0xe>
            am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
   2785e:	4c19      	ldr	r4, [pc, #100]	; (278c4 <apollo3_hci_radio_boot+0xe4>)
   27860:	2101      	movs	r1, #1
   27862:	6820      	ldr	r0, [r4, #0]
   27864:	f003 fb40 	bl	2aee8 <am_hal_ble_power_control>
            am_hal_ble_deinitialize(BLE);
   27868:	6820      	ldr	r0, [r4, #0]
   2786a:	f003 fa8f 	bl	2ad8c <am_hal_ble_deinitialize>
                return AM_HAL_STATUS_FAIL;
   2786e:	2001      	movs	r0, #1
}
   27870:	b00e      	add	sp, #56	; 0x38
   27872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    am_hal_ble_tx_power_set(BLE, TX_POWER_LEVEL_0P0_dBm);
   27876:	4c13      	ldr	r4, [pc, #76]	; (278c4 <apollo3_hci_radio_boot+0xe4>)
   27878:	2108      	movs	r1, #8
   2787a:	6820      	ldr	r0, [r4, #0]
   2787c:	f004 fb9a 	bl	2bfb4 <am_hal_ble_tx_power_set>
    am_hal_ble_int_clear(BLE, (AM_HAL_BLE_INT_CMDCMP |
   27880:	f240 2181 	movw	r1, #641	; 0x281
   27884:	6820      	ldr	r0, [r4, #0]
   27886:	f004 f921 	bl	2bacc <am_hal_ble_int_clear>
    am_hal_ble_int_enable(BLE, (AM_HAL_BLE_INT_CMDCMP |
   2788a:	f240 2181 	movw	r1, #641	; 0x281
   2788e:	6820      	ldr	r0, [r4, #0]
   27890:	f004 f8ec 	bl	2ba6c <am_hal_ble_int_enable>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   27894:	4b0e      	ldr	r3, [pc, #56]	; (278d0 <apollo3_hci_radio_boot+0xf0>)
   27896:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2789a:	601a      	str	r2, [r3, #0]
    if (bColdBoot)
   2789c:	f1b8 0f00 	cmp.w	r8, #0
   278a0:	d101      	bne.n	278a6 <apollo3_hci_radio_boot+0xc6>
    return AM_HAL_STATUS_SUCCESS;
   278a2:	2000      	movs	r0, #0
   278a4:	e7e4      	b.n	27870 <apollo3_hci_radio_boot+0x90>
        am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &sDevice);
   278a6:	a901      	add	r1, sp, #4
   278a8:	2001      	movs	r0, #1
   278aa:	f004 fcc9 	bl	2c240 <am_hal_mcuctrl_info_get>
        memcpy(g_ble_mac_address, &sDevice.ui32ChipID1, sizeof(sDevice.ui32ChipID1));
   278ae:	4a09      	ldr	r2, [pc, #36]	; (278d4 <apollo3_hci_radio_boot+0xf4>)
   278b0:	9b03      	ldr	r3, [sp, #12]
   278b2:	6013      	str	r3, [r2, #0]
        g_ble_mac_address[4] = (sDevice.ui32ChipID0 >> 8) & 0xFF;
   278b4:	9b02      	ldr	r3, [sp, #8]
   278b6:	0a19      	lsrs	r1, r3, #8
   278b8:	7111      	strb	r1, [r2, #4]
        g_ble_mac_address[5] = (sDevice.ui32ChipID0 >> 16) & 0xFF;
   278ba:	0c1b      	lsrs	r3, r3, #16
   278bc:	7153      	strb	r3, [r2, #5]
    return AM_HAL_STATUS_SUCCESS;
   278be:	2000      	movs	r0, #0
   278c0:	e7d6      	b.n	27870 <apollo3_hci_radio_boot+0x90>
   278c2:	bf00      	nop
   278c4:	10004478 	.word	0x10004478
   278c8:	0800000b 	.word	0x0800000b
   278cc:	000300a4 	.word	0x000300a4
   278d0:	e000e100 	.word	0xe000e100
   278d4:	10004ea8 	.word	0x10004ea8

000278d8 <apollo3_hci_radio_shutdown>:
{
   278d8:	b510      	push	{r4, lr}
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   278da:	4b10      	ldr	r3, [pc, #64]	; (2791c <apollo3_hci_radio_shutdown+0x44>)
   278dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   278e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   278e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   278e8:	f3bf 8f6f 	isb	sy
    am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
   278ec:	2101      	movs	r1, #1
   278ee:	4b0c      	ldr	r3, [pc, #48]	; (27920 <apollo3_hci_radio_shutdown+0x48>)
   278f0:	6818      	ldr	r0, [r3, #0]
   278f2:	f003 faf9 	bl	2aee8 <am_hal_ble_power_control>
    uint32_t timeout_ticks = 0;
   278f6:	2400      	movs	r4, #0
    while (PWRCTRL->DEVPWREN_b.PWRBLEL)
   278f8:	4b0a      	ldr	r3, [pc, #40]	; (27924 <apollo3_hci_radio_shutdown+0x4c>)
   278fa:	689b      	ldr	r3, [r3, #8]
   278fc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   27900:	d006      	beq.n	27910 <apollo3_hci_radio_shutdown+0x38>
        if (timeout_ticks >= OS_TICKS_PER_SEC)
   27902:	2c7f      	cmp	r4, #127	; 0x7f
   27904:	d804      	bhi.n	27910 <apollo3_hci_radio_shutdown+0x38>
        os_time_delay(1);
   27906:	2001      	movs	r0, #1
   27908:	f7ee fe76 	bl	165f8 <os_time_delay>
        timeout_ticks++;
   2790c:	3401      	adds	r4, #1
   2790e:	e7f3      	b.n	278f8 <apollo3_hci_radio_shutdown+0x20>
    am_hal_ble_deinitialize(BLE);
   27910:	4b03      	ldr	r3, [pc, #12]	; (27920 <apollo3_hci_radio_shutdown+0x48>)
   27912:	6818      	ldr	r0, [r3, #0]
   27914:	f003 fa3a 	bl	2ad8c <am_hal_ble_deinitialize>
}
   27918:	bd10      	pop	{r4, pc}
   2791a:	bf00      	nop
   2791c:	e000e100 	.word	0xe000e100
   27920:	10004478 	.word	0x10004478
   27924:	40021000 	.word	0x40021000

00027928 <apollo3_hci_write>:
apollo3_hci_write(uint8_t type, uint16_t len, uint8_t *pData)
{
    uint8_t *pui8Wptr;
    hci_drv_write_t psWriteBuffer;

    if (len > (HCI_DRV_MAX_TX_PACKET-1))  // comparison compensates for the type byte at index 0.
   27928:	29ff      	cmp	r1, #255	; 0xff
   2792a:	d824      	bhi.n	27976 <apollo3_hci_write+0x4e>
{
   2792c:	b510      	push	{r4, lr}
   2792e:	b0c2      	sub	sp, #264	; 0x108
    {
        return 0;
    }

    /* Set all of the fields in the hci write structure. */
    psWriteBuffer.len = len + 1;
   27930:	1c4b      	adds	r3, r1, #1
   27932:	9301      	str	r3, [sp, #4]

    pui8Wptr = (uint8_t *) psWriteBuffer.data;

    *pui8Wptr++ = type;
   27934:	f88d 0008 	strb.w	r0, [sp, #8]

    for (uint32_t i = 0; i < len; i++)
   27938:	2300      	movs	r3, #0
   2793a:	4299      	cmp	r1, r3
   2793c:	d905      	bls.n	2794a <apollo3_hci_write+0x22>
    {
        pui8Wptr[i] = pData[i];
   2793e:	5cd4      	ldrb	r4, [r2, r3]
   27940:	f10d 0009 	add.w	r0, sp, #9
   27944:	54c4      	strb	r4, [r0, r3]
    for (uint32_t i = 0; i < len; i++)
   27946:	3301      	adds	r3, #1
   27948:	e7f7      	b.n	2793a <apollo3_hci_write+0x12>
    }

    /* Wake up the BLE controller. */
    apollo3_update_wake();
   2794a:	f7ff ff1d 	bl	27788 <apollo3_update_wake>

    /* Wait on SPI status before writing */
    while ( BLEIFn(0)->BSTATUS_b.SPISTATUS )
   2794e:	e002      	b.n	27956 <apollo3_hci_write+0x2e>
    {
        os_time_delay(1);
   27950:	2001      	movs	r0, #1
   27952:	f7ee fe51 	bl	165f8 <os_time_delay>
    while ( BLEIFn(0)->BSTATUS_b.SPISTATUS )
   27956:	4b09      	ldr	r3, [pc, #36]	; (2797c <apollo3_hci_write+0x54>)
   27958:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2795c:	f013 0f08 	tst.w	r3, #8
   27960:	d1f6      	bne.n	27950 <apollo3_hci_write+0x28>
    }

    am_hal_ble_blocking_hci_write(BLE, AM_HAL_BLE_RAW, psWriteBuffer.data, psWriteBuffer.len);
   27962:	9b01      	ldr	r3, [sp, #4]
   27964:	aa02      	add	r2, sp, #8
   27966:	2100      	movs	r1, #0
   27968:	4805      	ldr	r0, [pc, #20]	; (27980 <apollo3_hci_write+0x58>)
   2796a:	6800      	ldr	r0, [r0, #0]
   2796c:	f003 fd56 	bl	2b41c <am_hal_ble_blocking_hci_write>

    return 0;
}
   27970:	2000      	movs	r0, #0
   27972:	b042      	add	sp, #264	; 0x108
   27974:	bd10      	pop	{r4, pc}
   27976:	2000      	movs	r0, #0
   27978:	4770      	bx	lr
   2797a:	bf00      	nop
   2797c:	5000c000 	.word	0x5000c000
   27980:	10004478 	.word	0x10004478

00027984 <ble_hci_trans_acl_tx>:
}
#endif

static int
ble_hci_trans_acl_tx(struct os_mbuf *om)
{
   27984:	b538      	push	{r3, r4, r5, lr}
   27986:	4605      	mov	r5, r0
    struct os_mbuf *x;
    int rc = 0;

    x = om;
   27988:	4604      	mov	r4, r0
    while (x) {
   2798a:	b134      	cbz	r4, 2799a <ble_hci_trans_acl_tx+0x16>
        rc = apollo3_hci_write(HCI_PKT_ACL, x->om_len, x->om_data);
   2798c:	6822      	ldr	r2, [r4, #0]
   2798e:	88e1      	ldrh	r1, [r4, #6]
   27990:	2002      	movs	r0, #2
   27992:	f7ff ffc9 	bl	27928 <apollo3_hci_write>
        if (rc < 0) {
            break;
        }
        x = SLIST_NEXT(x, om_next);
   27996:	68e4      	ldr	r4, [r4, #12]
   27998:	e7f7      	b.n	2798a <ble_hci_trans_acl_tx+0x6>
    }

    os_mbuf_free_chain(om);
   2799a:	4628      	mov	r0, r5
   2799c:	f7ed fe6a 	bl	15674 <os_mbuf_free_chain>

    return (rc < 0) ? BLE_ERR_MEM_CAPACITY : 0;
}
   279a0:	2000      	movs	r0, #0
   279a2:	bd38      	pop	{r3, r4, r5, pc}

000279a4 <ble_hci_trans_reset>:
{
   279a4:	b508      	push	{r3, lr}
    apollo3_hci_radio_shutdown();
   279a6:	f7ff ff97 	bl	278d8 <apollo3_hci_radio_shutdown>
    apollo3_hci_radio_boot(0);
   279aa:	2000      	movs	r0, #0
   279ac:	f7ff ff18 	bl	277e0 <apollo3_hci_radio_boot>
}
   279b0:	2000      	movs	r0, #0
   279b2:	bd08      	pop	{r3, pc}

000279b4 <ble_hci_trans_cfg_hs>:

#if MYNEWT_VAL(BLE_HOST) || MYNEWT_VAL(BLE_HCI_BRIDGE)
void
ble_hci_trans_cfg_hs(ble_hci_trans_rx_cmd_fn *evt_cb, void *evt_arg,
                     ble_hci_trans_rx_acl_fn *acl_cb, void *acl_arg)
{
   279b4:	b410      	push	{r4}
    apollo3_ble_hci_api.evt_cb = evt_cb;
   279b6:	4c03      	ldr	r4, [pc, #12]	; (279c4 <ble_hci_trans_cfg_hs+0x10>)
   279b8:	6020      	str	r0, [r4, #0]
    apollo3_ble_hci_api.evt_arg = evt_arg;
   279ba:	6061      	str	r1, [r4, #4]
    apollo3_ble_hci_api.acl_cb = acl_cb;
   279bc:	60a2      	str	r2, [r4, #8]
    apollo3_ble_hci_api.acl_arg = acl_arg;
   279be:	60e3      	str	r3, [r4, #12]
}
   279c0:	bc10      	pop	{r4}
   279c2:	4770      	bx	lr
   279c4:	1000447c 	.word	0x1000447c

000279c8 <ble_hci_trans_hs_acl_tx>:
    return (rc < 0) ? BLE_ERR_MEM_CAPACITY :  0;
}

int
ble_hci_trans_hs_acl_tx(struct os_mbuf *om)
{
   279c8:	b508      	push	{r3, lr}
    return ble_hci_trans_acl_tx(om);
   279ca:	f7ff ffdb 	bl	27984 <ble_hci_trans_acl_tx>
}
   279ce:	bd08      	pop	{r3, pc}

000279d0 <ble_hci_trans_buf_alloc>:
#endif

#if !MYNEWT_VAL(BLE_HCI_BRIDGE)
uint8_t *
ble_hci_trans_buf_alloc(int type)
{
   279d0:	b508      	push	{r3, lr}
    uint8_t *buf;

    switch (type) {
   279d2:	2802      	cmp	r0, #2
   279d4:	d011      	beq.n	279fa <ble_hci_trans_buf_alloc+0x2a>
   279d6:	2803      	cmp	r0, #3
   279d8:	d00b      	beq.n	279f2 <ble_hci_trans_buf_alloc+0x22>
   279da:	2801      	cmp	r0, #1
   279dc:	d011      	beq.n	27a02 <ble_hci_trans_buf_alloc+0x32>
        /* no break */
    case BLE_HCI_TRANS_BUF_EVT_LO:
        buf = os_memblock_get(&apollo3_ble_hci_pool_evt_lo);
        break;
    default:
        assert(0);
   279de:	f7ec fe41 	bl	14664 <hal_debugger_connected>
   279e2:	b100      	cbz	r0, 279e6 <ble_hci_trans_buf_alloc+0x16>
   279e4:	be01      	bkpt	0x0001
   279e6:	2300      	movs	r3, #0
   279e8:	461a      	mov	r2, r3
   279ea:	4619      	mov	r1, r3
   279ec:	4618      	mov	r0, r3
   279ee:	f7ed f9d9 	bl	14da4 <__assert_func>
        buf = os_memblock_get(&apollo3_ble_hci_pool_cmd_mempool);
   279f2:	4806      	ldr	r0, [pc, #24]	; (27a0c <ble_hci_trans_buf_alloc+0x3c>)
   279f4:	f7ee fa1b 	bl	15e2e <os_memblock_get>
        break;
   279f8:	e006      	b.n	27a08 <ble_hci_trans_buf_alloc+0x38>
        buf = os_memblock_get(&apollo3_ble_hci_pool_evt_hi);
   279fa:	4805      	ldr	r0, [pc, #20]	; (27a10 <ble_hci_trans_buf_alloc+0x40>)
   279fc:	f7ee fa17 	bl	15e2e <os_memblock_get>
        if (buf) {
   27a00:	b910      	cbnz	r0, 27a08 <ble_hci_trans_buf_alloc+0x38>
        buf = os_memblock_get(&apollo3_ble_hci_pool_evt_lo);
   27a02:	4804      	ldr	r0, [pc, #16]	; (27a14 <ble_hci_trans_buf_alloc+0x44>)
   27a04:	f7ee fa13 	bl	15e2e <os_memblock_get>
        buf = NULL;
    }

    return buf;
}
   27a08:	bd08      	pop	{r3, pc}
   27a0a:	bf00      	nop
   27a0c:	1000496c 	.word	0x1000496c
   27a10:	10004b90 	.word	0x10004b90
   27a14:	10004c3c 	.word	0x10004c3c

00027a18 <ble_hci_trans_buf_free>:

void
ble_hci_trans_buf_free(uint8_t *buf)
{
   27a18:	b510      	push	{r4, lr}
   27a1a:	4604      	mov	r4, r0
    int rc;

    if (os_memblock_from(&apollo3_ble_hci_pool_cmd_mempool, buf)) {
   27a1c:	4601      	mov	r1, r0
   27a1e:	4824      	ldr	r0, [pc, #144]	; (27ab0 <ble_hci_trans_buf_free+0x98>)
   27a20:	f7ee f9e6 	bl	15df0 <os_memblock_from>
   27a24:	b178      	cbz	r0, 27a46 <ble_hci_trans_buf_free+0x2e>
        rc = os_memblock_put(&apollo3_ble_hci_pool_cmd_mempool, buf);
   27a26:	4621      	mov	r1, r4
   27a28:	4821      	ldr	r0, [pc, #132]	; (27ab0 <ble_hci_trans_buf_free+0x98>)
   27a2a:	f7ee fa28 	bl	15e7e <os_memblock_put>
        assert(rc == 0);
   27a2e:	b900      	cbnz	r0, 27a32 <ble_hci_trans_buf_free+0x1a>
    } else {
        assert(os_memblock_from(&apollo3_ble_hci_pool_evt_lo, buf));
        rc = os_memblock_put(&apollo3_ble_hci_pool_evt_lo, buf);
        assert(rc == 0);
    }
}
   27a30:	bd10      	pop	{r4, pc}
        assert(rc == 0);
   27a32:	f7ec fe17 	bl	14664 <hal_debugger_connected>
   27a36:	b100      	cbz	r0, 27a3a <ble_hci_trans_buf_free+0x22>
   27a38:	be01      	bkpt	0x0001
   27a3a:	2300      	movs	r3, #0
   27a3c:	461a      	mov	r2, r3
   27a3e:	4619      	mov	r1, r3
   27a40:	4618      	mov	r0, r3
   27a42:	f7ed f9af 	bl	14da4 <__assert_func>
    } else if (os_memblock_from(&apollo3_ble_hci_pool_evt_hi, buf)) {
   27a46:	4621      	mov	r1, r4
   27a48:	481a      	ldr	r0, [pc, #104]	; (27ab4 <ble_hci_trans_buf_free+0x9c>)
   27a4a:	f7ee f9d1 	bl	15df0 <os_memblock_from>
   27a4e:	b178      	cbz	r0, 27a70 <ble_hci_trans_buf_free+0x58>
        rc = os_memblock_put(&apollo3_ble_hci_pool_evt_hi, buf);
   27a50:	4621      	mov	r1, r4
   27a52:	4818      	ldr	r0, [pc, #96]	; (27ab4 <ble_hci_trans_buf_free+0x9c>)
   27a54:	f7ee fa13 	bl	15e7e <os_memblock_put>
        assert(rc == 0);
   27a58:	2800      	cmp	r0, #0
   27a5a:	d0e9      	beq.n	27a30 <ble_hci_trans_buf_free+0x18>
   27a5c:	f7ec fe02 	bl	14664 <hal_debugger_connected>
   27a60:	b100      	cbz	r0, 27a64 <ble_hci_trans_buf_free+0x4c>
   27a62:	be01      	bkpt	0x0001
   27a64:	2300      	movs	r3, #0
   27a66:	461a      	mov	r2, r3
   27a68:	4619      	mov	r1, r3
   27a6a:	4618      	mov	r0, r3
   27a6c:	f7ed f99a 	bl	14da4 <__assert_func>
        assert(os_memblock_from(&apollo3_ble_hci_pool_evt_lo, buf));
   27a70:	4621      	mov	r1, r4
   27a72:	4811      	ldr	r0, [pc, #68]	; (27ab8 <ble_hci_trans_buf_free+0xa0>)
   27a74:	f7ee f9bc 	bl	15df0 <os_memblock_from>
   27a78:	b178      	cbz	r0, 27a9a <ble_hci_trans_buf_free+0x82>
        rc = os_memblock_put(&apollo3_ble_hci_pool_evt_lo, buf);
   27a7a:	4621      	mov	r1, r4
   27a7c:	480e      	ldr	r0, [pc, #56]	; (27ab8 <ble_hci_trans_buf_free+0xa0>)
   27a7e:	f7ee f9fe 	bl	15e7e <os_memblock_put>
        assert(rc == 0);
   27a82:	2800      	cmp	r0, #0
   27a84:	d0d4      	beq.n	27a30 <ble_hci_trans_buf_free+0x18>
   27a86:	f7ec fded 	bl	14664 <hal_debugger_connected>
   27a8a:	b100      	cbz	r0, 27a8e <ble_hci_trans_buf_free+0x76>
   27a8c:	be01      	bkpt	0x0001
   27a8e:	2300      	movs	r3, #0
   27a90:	461a      	mov	r2, r3
   27a92:	4619      	mov	r1, r3
   27a94:	4618      	mov	r0, r3
   27a96:	f7ed f985 	bl	14da4 <__assert_func>
        assert(os_memblock_from(&apollo3_ble_hci_pool_evt_lo, buf));
   27a9a:	f7ec fde3 	bl	14664 <hal_debugger_connected>
   27a9e:	b100      	cbz	r0, 27aa2 <ble_hci_trans_buf_free+0x8a>
   27aa0:	be01      	bkpt	0x0001
   27aa2:	2300      	movs	r3, #0
   27aa4:	461a      	mov	r2, r3
   27aa6:	4619      	mov	r1, r3
   27aa8:	4618      	mov	r0, r3
   27aaa:	f7ed f97b 	bl	14da4 <__assert_func>
   27aae:	bf00      	nop
   27ab0:	1000496c 	.word	0x1000496c
   27ab4:	10004b90 	.word	0x10004b90
   27ab8:	10004c3c 	.word	0x10004c3c

00027abc <apollo3_ble_hci_trans_rx_process>:
{
   27abc:	b530      	push	{r4, r5, lr}
   27abe:	b083      	sub	sp, #12
    memset(&apollo3_ble_hci_rx_data, 0, sizeof(apollo3_ble_hci_rx_data));
   27ac0:	4b67      	ldr	r3, [pc, #412]	; (27c60 <apollo3_ble_hci_trans_rx_process+0x1a4>)
   27ac2:	2400      	movs	r4, #0
   27ac4:	601c      	str	r4, [r3, #0]
   27ac6:	605c      	str	r4, [r3, #4]
   27ac8:	609c      	str	r4, [r3, #8]
   27aca:	60dc      	str	r4, [r3, #12]
    am_hal_ble_blocking_hci_read(BLE, g_read_buf, &len);
   27acc:	aa01      	add	r2, sp, #4
   27ace:	4965      	ldr	r1, [pc, #404]	; (27c64 <apollo3_ble_hci_trans_rx_process+0x1a8>)
   27ad0:	4b65      	ldr	r3, [pc, #404]	; (27c68 <apollo3_ble_hci_trans_rx_process+0x1ac>)
   27ad2:	6818      	ldr	r0, [r3, #0]
   27ad4:	f003 feec 	bl	2b8b0 <am_hal_ble_blocking_hci_read>
    for(int i=0; i < len; i++) console_printf("%d ",buf[i]);
   27ad8:	9b01      	ldr	r3, [sp, #4]
   27ada:	429c      	cmp	r4, r3
   27adc:	d206      	bcs.n	27aec <apollo3_ble_hci_trans_rx_process+0x30>
   27ade:	4b61      	ldr	r3, [pc, #388]	; (27c64 <apollo3_ble_hci_trans_rx_process+0x1a8>)
   27ae0:	5d19      	ldrb	r1, [r3, r4]
   27ae2:	4862      	ldr	r0, [pc, #392]	; (27c6c <apollo3_ble_hci_trans_rx_process+0x1b0>)
   27ae4:	f7f0 fdcc 	bl	18680 <console_printf>
   27ae8:	3401      	adds	r4, #1
   27aea:	e7f5      	b.n	27ad8 <apollo3_ble_hci_trans_rx_process+0x1c>
    console_printf("\n");
   27aec:	4860      	ldr	r0, [pc, #384]	; (27c70 <apollo3_ble_hci_trans_rx_process+0x1b4>)
   27aee:	f7f0 fdc7 	bl	18680 <console_printf>
    rxd->type = buf[0];
   27af2:	4b5c      	ldr	r3, [pc, #368]	; (27c64 <apollo3_ble_hci_trans_rx_process+0x1a8>)
   27af4:	781b      	ldrb	r3, [r3, #0]
   27af6:	4a5a      	ldr	r2, [pc, #360]	; (27c60 <apollo3_ble_hci_trans_rx_process+0x1a4>)
   27af8:	7013      	strb	r3, [r2, #0]
    assert((rxd->type == HCI_PKT_ACL) || (rxd->type == HCI_PKT_EVT));
   27afa:	2b02      	cmp	r3, #2
   27afc:	d001      	beq.n	27b02 <apollo3_ble_hci_trans_rx_process+0x46>
   27afe:	2b04      	cmp	r3, #4
   27b00:	d13b      	bne.n	27b7a <apollo3_ble_hci_trans_rx_process+0xbe>
    switch (rxd->type) {
   27b02:	2b02      	cmp	r3, #2
   27b04:	d05f      	beq.n	27bc6 <apollo3_ble_hci_trans_rx_process+0x10a>
   27b06:	2b04      	cmp	r3, #4
   27b08:	f040 80a0 	bne.w	27c4c <apollo3_ble_hci_trans_rx_process+0x190>
        rxd->len = HCI_EVT_HDR_LEN;
   27b0c:	4b54      	ldr	r3, [pc, #336]	; (27c60 <apollo3_ble_hci_trans_rx_process+0x1a4>)
   27b0e:	2202      	movs	r2, #2
   27b10:	80da      	strh	r2, [r3, #6]
        memcpy(rxd->hdr, &buf[1], rxd->len);
   27b12:	4a54      	ldr	r2, [pc, #336]	; (27c64 <apollo3_ble_hci_trans_rx_process+0x1a8>)
   27b14:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   27b18:	f8a3 2001 	strh.w	r2, [r3, #1]
        if (rxd->hdr[0] == BLE_HCI_EVCODE_LE_META) {
   27b1c:	785b      	ldrb	r3, [r3, #1]
   27b1e:	2b3e      	cmp	r3, #62	; 0x3e
   27b20:	d035      	beq.n	27b8e <apollo3_ble_hci_trans_rx_process+0xd2>
    int pool = BLE_HCI_TRANS_BUF_EVT_HI;
   27b22:	2402      	movs	r4, #2
        rxd->buf = ble_hci_trans_buf_alloc(pool);
   27b24:	4620      	mov	r0, r4
   27b26:	f7ff ff53 	bl	279d0 <ble_hci_trans_buf_alloc>
   27b2a:	4b4d      	ldr	r3, [pc, #308]	; (27c60 <apollo3_ble_hci_trans_rx_process+0x1a4>)
   27b2c:	60d8      	str	r0, [r3, #12]
        if (!rxd->buf) {
   27b2e:	2800      	cmp	r0, #0
   27b30:	d03d      	beq.n	27bae <apollo3_ble_hci_trans_rx_process+0xf2>
        rxd->expected_len = HCI_EVT_HDR_LEN + rxd->hdr[1];
   27b32:	4b4b      	ldr	r3, [pc, #300]	; (27c60 <apollo3_ble_hci_trans_rx_process+0x1a4>)
   27b34:	789a      	ldrb	r2, [r3, #2]
   27b36:	3202      	adds	r2, #2
   27b38:	811a      	strh	r2, [r3, #8]
        if (rxd->buf) {
   27b3a:	68d8      	ldr	r0, [r3, #12]
   27b3c:	b1b0      	cbz	r0, 27b6c <apollo3_ble_hci_trans_rx_process+0xb0>
            memcpy(rxd->buf, rxd->hdr, rxd->len);
   27b3e:	461c      	mov	r4, r3
   27b40:	88da      	ldrh	r2, [r3, #6]
   27b42:	1c59      	adds	r1, r3, #1
   27b44:	f7ee ffc6 	bl	16ad4 <memcpy>
            memcpy(&rxd->buf[rxd->len], &buf[1+rxd->len], rxd->expected_len - rxd->len);
   27b48:	68e0      	ldr	r0, [r4, #12]
   27b4a:	88e3      	ldrh	r3, [r4, #6]
   27b4c:	1c59      	adds	r1, r3, #1
   27b4e:	8922      	ldrh	r2, [r4, #8]
   27b50:	1ad2      	subs	r2, r2, r3
   27b52:	4d44      	ldr	r5, [pc, #272]	; (27c64 <apollo3_ble_hci_trans_rx_process+0x1a8>)
   27b54:	4429      	add	r1, r5
   27b56:	4418      	add	r0, r3
   27b58:	f7ee ffbc 	bl	16ad4 <memcpy>
            rxd->len = rxd->expected_len;
   27b5c:	8923      	ldrh	r3, [r4, #8]
   27b5e:	80e3      	strh	r3, [r4, #6]
            rc = apollo3_ble_hci_api.evt_cb(rxd->buf,
   27b60:	4b44      	ldr	r3, [pc, #272]	; (27c74 <apollo3_ble_hci_trans_rx_process+0x1b8>)
   27b62:	681a      	ldr	r2, [r3, #0]
   27b64:	6859      	ldr	r1, [r3, #4]
   27b66:	68e0      	ldr	r0, [r4, #12]
   27b68:	4790      	blx	r2
            if (rc != 0) {
   27b6a:	bb40      	cbnz	r0, 27bbe <apollo3_ble_hci_trans_rx_process+0x102>
        console_printf("rxd->len %d\n", rxd->len);
   27b6c:	4b3c      	ldr	r3, [pc, #240]	; (27c60 <apollo3_ble_hci_trans_rx_process+0x1a4>)
   27b6e:	88d9      	ldrh	r1, [r3, #6]
   27b70:	4841      	ldr	r0, [pc, #260]	; (27c78 <apollo3_ble_hci_trans_rx_process+0x1bc>)
   27b72:	f7f0 fd85 	bl	18680 <console_printf>
}
   27b76:	b003      	add	sp, #12
   27b78:	bd30      	pop	{r4, r5, pc}
    assert((rxd->type == HCI_PKT_ACL) || (rxd->type == HCI_PKT_EVT));
   27b7a:	f7ec fd73 	bl	14664 <hal_debugger_connected>
   27b7e:	b100      	cbz	r0, 27b82 <apollo3_ble_hci_trans_rx_process+0xc6>
   27b80:	be01      	bkpt	0x0001
   27b82:	2300      	movs	r3, #0
   27b84:	461a      	mov	r2, r3
   27b86:	4619      	mov	r1, r3
   27b88:	4618      	mov	r0, r3
   27b8a:	f7ed f90b 	bl	14da4 <__assert_func>
            memcpy(&rxd->hdr[rxd->len], &buf[1+rxd->len],1);
   27b8e:	4b35      	ldr	r3, [pc, #212]	; (27c64 <apollo3_ble_hci_trans_rx_process+0x1a8>)
   27b90:	78db      	ldrb	r3, [r3, #3]
   27b92:	4a33      	ldr	r2, [pc, #204]	; (27c60 <apollo3_ble_hci_trans_rx_process+0x1a4>)
   27b94:	70d3      	strb	r3, [r2, #3]
            rxd->len++;
   27b96:	2103      	movs	r1, #3
   27b98:	80d1      	strh	r1, [r2, #6]
            if ((rxd->hdr[2] == BLE_HCI_LE_SUBEV_ADV_RPT) ||
   27b9a:	2b02      	cmp	r3, #2
   27b9c:	d003      	beq.n	27ba6 <apollo3_ble_hci_trans_rx_process+0xea>
   27b9e:	2b0d      	cmp	r3, #13
   27ba0:	d003      	beq.n	27baa <apollo3_ble_hci_trans_rx_process+0xee>
    int pool = BLE_HCI_TRANS_BUF_EVT_HI;
   27ba2:	2402      	movs	r4, #2
   27ba4:	e7be      	b.n	27b24 <apollo3_ble_hci_trans_rx_process+0x68>
                pool = BLE_HCI_TRANS_BUF_EVT_LO;
   27ba6:	2401      	movs	r4, #1
   27ba8:	e7bc      	b.n	27b24 <apollo3_ble_hci_trans_rx_process+0x68>
   27baa:	2401      	movs	r4, #1
   27bac:	e7ba      	b.n	27b24 <apollo3_ble_hci_trans_rx_process+0x68>
            if (pool != BLE_HCI_TRANS_BUF_EVT_LO) {
   27bae:	2c01      	cmp	r4, #1
   27bb0:	d0bf      	beq.n	27b32 <apollo3_ble_hci_trans_rx_process+0x76>
                rxd->buf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_LO);
   27bb2:	2001      	movs	r0, #1
   27bb4:	f7ff ff0c 	bl	279d0 <ble_hci_trans_buf_alloc>
   27bb8:	4b29      	ldr	r3, [pc, #164]	; (27c60 <apollo3_ble_hci_trans_rx_process+0x1a4>)
   27bba:	60d8      	str	r0, [r3, #12]
   27bbc:	e7b9      	b.n	27b32 <apollo3_ble_hci_trans_rx_process+0x76>
                ble_hci_trans_buf_free(rxd->buf);
   27bbe:	68e0      	ldr	r0, [r4, #12]
   27bc0:	f7ff ff2a 	bl	27a18 <ble_hci_trans_buf_free>
   27bc4:	e7d2      	b.n	27b6c <apollo3_ble_hci_trans_rx_process+0xb0>
        rxd->len = HCI_ACL_HDR_LEN;
   27bc6:	4c26      	ldr	r4, [pc, #152]	; (27c60 <apollo3_ble_hci_trans_rx_process+0x1a4>)
   27bc8:	2304      	movs	r3, #4
   27bca:	80e3      	strh	r3, [r4, #6]
        memcpy(rxd->hdr, &buf[1], rxd->len);
   27bcc:	4b25      	ldr	r3, [pc, #148]	; (27c64 <apollo3_ble_hci_trans_rx_process+0x1a8>)
   27bce:	f8d3 3001 	ldr.w	r3, [r3, #1]
   27bd2:	f8c4 3001 	str.w	r3, [r4, #1]
        rxd->om = os_mbuf_get_pkthdr(&apollo3_ble_hci_pool_acl_mbuf,
   27bd6:	2110      	movs	r1, #16
   27bd8:	4828      	ldr	r0, [pc, #160]	; (27c7c <apollo3_ble_hci_trans_rx_process+0x1c0>)
   27bda:	f7ed fd28 	bl	1562e <os_mbuf_get_pkthdr>
   27bde:	60e0      	str	r0, [r4, #12]
        if (!rxd->om) {
   27be0:	b1f8      	cbz	r0, 27c22 <apollo3_ble_hci_trans_rx_process+0x166>
        os_mbuf_append(rxd->om, rxd->hdr, rxd->len);
   27be2:	4c1f      	ldr	r4, [pc, #124]	; (27c60 <apollo3_ble_hci_trans_rx_process+0x1a4>)
   27be4:	88e2      	ldrh	r2, [r4, #6]
   27be6:	1c61      	adds	r1, r4, #1
   27be8:	f7ed fd5d 	bl	156a6 <os_mbuf_append>
        rxd->expected_len = get_le16(&rxd->hdr[2]) + HCI_ACL_HDR_LEN;
   27bec:	1ce0      	adds	r0, r4, #3
   27bee:	f005 fc61 	bl	2d4b4 <get_le16>
   27bf2:	1d02      	adds	r2, r0, #4
   27bf4:	b292      	uxth	r2, r2
   27bf6:	8122      	strh	r2, [r4, #8]
        if (rxd->len != rxd->expected_len) {
   27bf8:	88e3      	ldrh	r3, [r4, #6]
   27bfa:	429a      	cmp	r2, r3
   27bfc:	d11b      	bne.n	27c36 <apollo3_ble_hci_trans_rx_process+0x17a>
        if (rxd->len == rxd->expected_len) {
   27bfe:	4b18      	ldr	r3, [pc, #96]	; (27c60 <apollo3_ble_hci_trans_rx_process+0x1a4>)
   27c00:	88da      	ldrh	r2, [r3, #6]
   27c02:	891b      	ldrh	r3, [r3, #8]
   27c04:	429a      	cmp	r2, r3
   27c06:	d1b6      	bne.n	27b76 <apollo3_ble_hci_trans_rx_process+0xba>
            rc = apollo3_ble_hci_api.acl_cb(rxd->om, apollo3_ble_hci_api.acl_arg);
   27c08:	4b1a      	ldr	r3, [pc, #104]	; (27c74 <apollo3_ble_hci_trans_rx_process+0x1b8>)
   27c0a:	689a      	ldr	r2, [r3, #8]
   27c0c:	68d9      	ldr	r1, [r3, #12]
   27c0e:	4b14      	ldr	r3, [pc, #80]	; (27c60 <apollo3_ble_hci_trans_rx_process+0x1a4>)
   27c10:	68d8      	ldr	r0, [r3, #12]
   27c12:	4790      	blx	r2
            if (rc != 0) {
   27c14:	2800      	cmp	r0, #0
   27c16:	d0ae      	beq.n	27b76 <apollo3_ble_hci_trans_rx_process+0xba>
                os_mbuf_free_chain(rxd->om);
   27c18:	4b11      	ldr	r3, [pc, #68]	; (27c60 <apollo3_ble_hci_trans_rx_process+0x1a4>)
   27c1a:	68d8      	ldr	r0, [r3, #12]
   27c1c:	f7ed fd2a 	bl	15674 <os_mbuf_free_chain>
   27c20:	e7a9      	b.n	27b76 <apollo3_ble_hci_trans_rx_process+0xba>
            assert(0);
   27c22:	f7ec fd1f 	bl	14664 <hal_debugger_connected>
   27c26:	b100      	cbz	r0, 27c2a <apollo3_ble_hci_trans_rx_process+0x16e>
   27c28:	be01      	bkpt	0x0001
   27c2a:	2300      	movs	r3, #0
   27c2c:	461a      	mov	r2, r3
   27c2e:	4619      	mov	r1, r3
   27c30:	4618      	mov	r0, r3
   27c32:	f7ed f8b7 	bl	14da4 <__assert_func>
            os_mbuf_append(rxd->om, &buf[1+rxd->len], rxd->expected_len - rxd->len);
   27c36:	1c59      	adds	r1, r3, #1
   27c38:	1ad2      	subs	r2, r2, r3
   27c3a:	b292      	uxth	r2, r2
   27c3c:	4b09      	ldr	r3, [pc, #36]	; (27c64 <apollo3_ble_hci_trans_rx_process+0x1a8>)
   27c3e:	4419      	add	r1, r3
   27c40:	68e0      	ldr	r0, [r4, #12]
   27c42:	f7ed fd30 	bl	156a6 <os_mbuf_append>
            rxd->len = rxd->expected_len;
   27c46:	8923      	ldrh	r3, [r4, #8]
   27c48:	80e3      	strh	r3, [r4, #6]
   27c4a:	e7d8      	b.n	27bfe <apollo3_ble_hci_trans_rx_process+0x142>
        assert(0);
   27c4c:	f7ec fd0a 	bl	14664 <hal_debugger_connected>
   27c50:	b100      	cbz	r0, 27c54 <apollo3_ble_hci_trans_rx_process+0x198>
   27c52:	be01      	bkpt	0x0001
   27c54:	2300      	movs	r3, #0
   27c56:	461a      	mov	r2, r3
   27c58:	4619      	mov	r1, r3
   27c5a:	4618      	mov	r0, r3
   27c5c:	f7ed f8a2 	bl	14da4 <__assert_func>
   27c60:	10004e98 	.word	0x10004e98
   27c64:	10004eb0 	.word	0x10004eb0
   27c68:	10004478 	.word	0x10004478
   27c6c:	00030330 	.word	0x00030330
   27c70:	000311a4 	.word	0x000311a4
   27c74:	1000447c 	.word	0x1000447c
   27c78:	000314cc 	.word	0x000314cc
   27c7c:	10004960 	.word	0x10004960

00027c80 <apollo3_hci_int>:
{
   27c80:	b538      	push	{r3, r4, r5, lr}
    uint32_t ui32Status = am_hal_ble_int_status(BLE, true);
   27c82:	4d11      	ldr	r5, [pc, #68]	; (27cc8 <apollo3_hci_int+0x48>)
   27c84:	2101      	movs	r1, #1
   27c86:	6828      	ldr	r0, [r5, #0]
   27c88:	f003 ff12 	bl	2bab0 <am_hal_ble_int_status>
   27c8c:	4604      	mov	r4, r0
    am_hal_ble_int_clear(BLE, ui32Status);
   27c8e:	4601      	mov	r1, r0
   27c90:	6828      	ldr	r0, [r5, #0]
   27c92:	f003 ff1b 	bl	2bacc <am_hal_ble_int_clear>
    am_hal_ble_int_service(BLE, ui32Status);
   27c96:	4621      	mov	r1, r4
   27c98:	6828      	ldr	r0, [r5, #0]
   27c9a:	f003 fe61 	bl	2b960 <am_hal_ble_int_service>
    if (ui32Status & AM_HAL_BLE_INT_BLECIRQ)
   27c9e:	f014 0f80 	tst.w	r4, #128	; 0x80
   27ca2:	d006      	beq.n	27cb2 <apollo3_hci_int+0x32>
        am_hal_ble_wakeup_set(BLE, 0);
   27ca4:	2100      	movs	r1, #0
   27ca6:	6828      	ldr	r0, [r5, #0]
   27ca8:	f002 fff8 	bl	2ac9c <am_hal_ble_wakeup_set>
        apollo3_ble_hci_trans_rx_process();
   27cac:	f7ff ff06 	bl	27abc <apollo3_ble_hci_trans_rx_process>
}
   27cb0:	bd38      	pop	{r3, r4, r5, pc}
        assert(0);
   27cb2:	f7ec fcd7 	bl	14664 <hal_debugger_connected>
   27cb6:	b100      	cbz	r0, 27cba <apollo3_hci_int+0x3a>
   27cb8:	be01      	bkpt	0x0001
   27cba:	2300      	movs	r3, #0
   27cbc:	461a      	mov	r2, r3
   27cbe:	4619      	mov	r1, r3
   27cc0:	4618      	mov	r0, r3
   27cc2:	f7ed f86f 	bl	14da4 <__assert_func>
   27cc6:	bf00      	nop
   27cc8:	10004478 	.word	0x10004478

00027ccc <ble_hci_trans_hs_cmd_tx>:
{
   27ccc:	b510      	push	{r4, lr}
   27cce:	4604      	mov	r4, r0
    int len = HCI_CMD_HDR_LEN + cmd[2];
   27cd0:	7881      	ldrb	r1, [r0, #2]
    rc = apollo3_hci_write(HCI_PKT_CMD, len, cmd);
   27cd2:	4602      	mov	r2, r0
   27cd4:	3103      	adds	r1, #3
   27cd6:	2001      	movs	r0, #1
   27cd8:	f7ff fe26 	bl	27928 <apollo3_hci_write>
    ble_hci_trans_buf_free(cmd);
   27cdc:	4620      	mov	r0, r4
   27cde:	f7ff fe9b 	bl	27a18 <ble_hci_trans_buf_free>
}
   27ce2:	2000      	movs	r0, #0
   27ce4:	bd10      	pop	{r4, pc}
	...

00027ce8 <ble_hci_trans_set_acl_free_cb>:

#if !MYNEWT_VAL(BLE_HCI_BRIDGE)
int
ble_hci_trans_set_acl_free_cb(os_mempool_put_fn *cb, void *arg)
{
    apollo3_ble_hci_pool_acl.mpe_put_cb = cb;
   27ce8:	4b02      	ldr	r3, [pc, #8]	; (27cf4 <ble_hci_trans_set_acl_free_cb+0xc>)
   27cea:	61d8      	str	r0, [r3, #28]
    apollo3_ble_hci_pool_acl.mpe_put_arg = arg;
   27cec:	6219      	str	r1, [r3, #32]

    return 0;
}
   27cee:	2000      	movs	r0, #0
   27cf0:	4770      	bx	lr
   27cf2:	bf00      	nop
   27cf4:	1000448c 	.word	0x1000448c

00027cf8 <apollo3_ble_hci_init>:
#endif

void
apollo3_ble_hci_init(void)
{
   27cf8:	b510      	push	{r4, lr}
   27cfa:	b082      	sub	sp, #8
    int rc;

    SYSINIT_ASSERT_ACTIVE();
   27cfc:	4b45      	ldr	r3, [pc, #276]	; (27e14 <apollo3_ble_hci_init+0x11c>)
   27cfe:	781b      	ldrb	r3, [r3, #0]
   27d00:	2b00      	cmp	r3, #0
   27d02:	d03b      	beq.n	27d7c <apollo3_ble_hci_init+0x84>

    rc = os_mempool_ext_init(&apollo3_ble_hci_pool_acl,
   27d04:	4b44      	ldr	r3, [pc, #272]	; (27e18 <apollo3_ble_hci_init+0x120>)
   27d06:	9300      	str	r3, [sp, #0]
   27d08:	4b44      	ldr	r3, [pc, #272]	; (27e1c <apollo3_ble_hci_init+0x124>)
   27d0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
   27d0e:	2104      	movs	r1, #4
   27d10:	4843      	ldr	r0, [pc, #268]	; (27e20 <apollo3_ble_hci_init+0x128>)
   27d12:	f7ee f85f 	bl	15dd4 <os_mempool_ext_init>
                             MYNEWT_VAL(BLE_ACL_BUF_COUNT), POOL_ACL_BLOCK_SIZE,
                             apollo3_ble_hci_pool_acl_buf,
                             "apollo3_ble_hci_pool_acl");
    SYSINIT_PANIC_ASSERT(rc == 0);
   27d16:	2800      	cmp	r0, #0
   27d18:	d13a      	bne.n	27d90 <apollo3_ble_hci_init+0x98>

    rc = os_mbuf_pool_init(&apollo3_ble_hci_pool_acl_mbuf,
   27d1a:	2304      	movs	r3, #4
   27d1c:	f44f 7296 	mov.w	r2, #300	; 0x12c
   27d20:	493f      	ldr	r1, [pc, #252]	; (27e20 <apollo3_ble_hci_init+0x128>)
   27d22:	4840      	ldr	r0, [pc, #256]	; (27e24 <apollo3_ble_hci_init+0x12c>)
   27d24:	f7ed fc67 	bl	155f6 <os_mbuf_pool_init>
                           &apollo3_ble_hci_pool_acl.mpe_mp, POOL_ACL_BLOCK_SIZE,
                           MYNEWT_VAL(BLE_ACL_BUF_COUNT));
    SYSINIT_PANIC_ASSERT(rc == 0);
   27d28:	2800      	cmp	r0, #0
   27d2a:	d13e      	bne.n	27daa <apollo3_ble_hci_init+0xb2>

#if !MYNEWT_VAL(BLE_HCI_BRIDGE)
    rc = os_mempool_init(&apollo3_ble_hci_pool_evt_hi,
   27d2c:	4b3e      	ldr	r3, [pc, #248]	; (27e28 <apollo3_ble_hci_init+0x130>)
   27d2e:	9300      	str	r3, [sp, #0]
   27d30:	4b3e      	ldr	r3, [pc, #248]	; (27e2c <apollo3_ble_hci_init+0x134>)
   27d32:	2246      	movs	r2, #70	; 0x46
   27d34:	2102      	movs	r1, #2
   27d36:	483e      	ldr	r0, [pc, #248]	; (27e30 <apollo3_ble_hci_init+0x138>)
   27d38:	f7ee f842 	bl	15dc0 <os_mempool_init>
                         MYNEWT_VAL(BLE_HCI_EVT_HI_BUF_COUNT),
                         MYNEWT_VAL(BLE_HCI_EVT_BUF_SIZE),
                         apollo3_ble_hci_pool_evt_hi_buf,
                         "apollo3_ble_hci_pool_evt_hi");
    SYSINIT_PANIC_ASSERT(rc == 0);
   27d3c:	2800      	cmp	r0, #0
   27d3e:	d141      	bne.n	27dc4 <apollo3_ble_hci_init+0xcc>

    rc = os_mempool_init(&apollo3_ble_hci_pool_evt_lo,
   27d40:	4b3c      	ldr	r3, [pc, #240]	; (27e34 <apollo3_ble_hci_init+0x13c>)
   27d42:	9300      	str	r3, [sp, #0]
   27d44:	4b3c      	ldr	r3, [pc, #240]	; (27e38 <apollo3_ble_hci_init+0x140>)
   27d46:	2246      	movs	r2, #70	; 0x46
   27d48:	2108      	movs	r1, #8
   27d4a:	483c      	ldr	r0, [pc, #240]	; (27e3c <apollo3_ble_hci_init+0x144>)
   27d4c:	f7ee f838 	bl	15dc0 <os_mempool_init>
                         MYNEWT_VAL(BLE_HCI_EVT_LO_BUF_COUNT),
                         MYNEWT_VAL(BLE_HCI_EVT_BUF_SIZE),
                         apollo3_ble_hci_pool_evt_lo_buf,
                         "apollo3_ble_hci_pool_evt_lo");
    SYSINIT_PANIC_ASSERT(rc == 0);
   27d50:	2800      	cmp	r0, #0
   27d52:	d144      	bne.n	27dde <apollo3_ble_hci_init+0xe6>

    rc = os_mempool_init(&apollo3_ble_hci_pool_cmd_mempool,
   27d54:	4b3a      	ldr	r3, [pc, #232]	; (27e40 <apollo3_ble_hci_init+0x148>)
   27d56:	9300      	str	r3, [sp, #0]
   27d58:	4b3a      	ldr	r3, [pc, #232]	; (27e44 <apollo3_ble_hci_init+0x14c>)
   27d5a:	f44f 7282 	mov.w	r2, #260	; 0x104
   27d5e:	2102      	movs	r1, #2
   27d60:	4839      	ldr	r0, [pc, #228]	; (27e48 <apollo3_ble_hci_init+0x150>)
   27d62:	f7ee f82d 	bl	15dc0 <os_mempool_init>
                         HCI_CMD_COUNT, BLE_HCI_TRANS_CMD_SZ,
                         apollo3_ble_hci_pool_cmd_mempool_buf,
                         "apollo3_ble_hci_pool_cmd_mempool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   27d66:	2800      	cmp	r0, #0
   27d68:	d146      	bne.n	27df8 <apollo3_ble_hci_init+0x100>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   27d6a:	4b38      	ldr	r3, [pc, #224]	; (27e4c <apollo3_ble_hci_init+0x154>)
   27d6c:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   27d6e:	4a38      	ldr	r2, [pc, #224]	; (27e50 <apollo3_ble_hci_init+0x158>)
   27d70:	671a      	str	r2, [r3, #112]	; 0x70

    /* Enable interrupt to handle read based on BLECIRQ */
    NVIC_SetVector(BLE_IRQn, (uint32_t)apollo3_hci_int);

    /* Initial coldboot configuration */
    apollo3_hci_radio_boot(1);
   27d72:	2001      	movs	r0, #1
   27d74:	f7ff fd34 	bl	277e0 <apollo3_hci_radio_boot>
}
   27d78:	b002      	add	sp, #8
   27d7a:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   27d7c:	f7ec fc72 	bl	14664 <hal_debugger_connected>
   27d80:	b100      	cbz	r0, 27d84 <apollo3_ble_hci_init+0x8c>
   27d82:	be01      	bkpt	0x0001
   27d84:	2300      	movs	r3, #0
   27d86:	461a      	mov	r2, r3
   27d88:	4619      	mov	r1, r3
   27d8a:	4618      	mov	r0, r3
   27d8c:	f7ed f80a 	bl	14da4 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27d90:	f7ec fc68 	bl	14664 <hal_debugger_connected>
   27d94:	b100      	cbz	r0, 27d98 <apollo3_ble_hci_init+0xa0>
   27d96:	be01      	bkpt	0x0001
   27d98:	2000      	movs	r0, #0
   27d9a:	9000      	str	r0, [sp, #0]
   27d9c:	4b2d      	ldr	r3, [pc, #180]	; (27e54 <apollo3_ble_hci_init+0x15c>)
   27d9e:	681c      	ldr	r4, [r3, #0]
   27da0:	4603      	mov	r3, r0
   27da2:	4602      	mov	r2, r0
   27da4:	4601      	mov	r1, r0
   27da6:	47a0      	blx	r4
   27da8:	e7b7      	b.n	27d1a <apollo3_ble_hci_init+0x22>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27daa:	f7ec fc5b 	bl	14664 <hal_debugger_connected>
   27dae:	b100      	cbz	r0, 27db2 <apollo3_ble_hci_init+0xba>
   27db0:	be01      	bkpt	0x0001
   27db2:	2000      	movs	r0, #0
   27db4:	9000      	str	r0, [sp, #0]
   27db6:	4b27      	ldr	r3, [pc, #156]	; (27e54 <apollo3_ble_hci_init+0x15c>)
   27db8:	681c      	ldr	r4, [r3, #0]
   27dba:	4603      	mov	r3, r0
   27dbc:	4602      	mov	r2, r0
   27dbe:	4601      	mov	r1, r0
   27dc0:	47a0      	blx	r4
   27dc2:	e7b3      	b.n	27d2c <apollo3_ble_hci_init+0x34>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27dc4:	f7ec fc4e 	bl	14664 <hal_debugger_connected>
   27dc8:	b100      	cbz	r0, 27dcc <apollo3_ble_hci_init+0xd4>
   27dca:	be01      	bkpt	0x0001
   27dcc:	2000      	movs	r0, #0
   27dce:	9000      	str	r0, [sp, #0]
   27dd0:	4b20      	ldr	r3, [pc, #128]	; (27e54 <apollo3_ble_hci_init+0x15c>)
   27dd2:	681c      	ldr	r4, [r3, #0]
   27dd4:	4603      	mov	r3, r0
   27dd6:	4602      	mov	r2, r0
   27dd8:	4601      	mov	r1, r0
   27dda:	47a0      	blx	r4
   27ddc:	e7b0      	b.n	27d40 <apollo3_ble_hci_init+0x48>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27dde:	f7ec fc41 	bl	14664 <hal_debugger_connected>
   27de2:	b100      	cbz	r0, 27de6 <apollo3_ble_hci_init+0xee>
   27de4:	be01      	bkpt	0x0001
   27de6:	2000      	movs	r0, #0
   27de8:	9000      	str	r0, [sp, #0]
   27dea:	4b1a      	ldr	r3, [pc, #104]	; (27e54 <apollo3_ble_hci_init+0x15c>)
   27dec:	681c      	ldr	r4, [r3, #0]
   27dee:	4603      	mov	r3, r0
   27df0:	4602      	mov	r2, r0
   27df2:	4601      	mov	r1, r0
   27df4:	47a0      	blx	r4
   27df6:	e7ad      	b.n	27d54 <apollo3_ble_hci_init+0x5c>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27df8:	f7ec fc34 	bl	14664 <hal_debugger_connected>
   27dfc:	b100      	cbz	r0, 27e00 <apollo3_ble_hci_init+0x108>
   27dfe:	be01      	bkpt	0x0001
   27e00:	2000      	movs	r0, #0
   27e02:	9000      	str	r0, [sp, #0]
   27e04:	4b13      	ldr	r3, [pc, #76]	; (27e54 <apollo3_ble_hci_init+0x15c>)
   27e06:	681c      	ldr	r4, [r3, #0]
   27e08:	4603      	mov	r3, r0
   27e0a:	4602      	mov	r2, r0
   27e0c:	4601      	mov	r1, r0
   27e0e:	47a0      	blx	r4
   27e10:	e7ab      	b.n	27d6a <apollo3_ble_hci_init+0x72>
   27e12:	bf00      	nop
   27e14:	10003404 	.word	0x10003404
   27e18:	000314dc 	.word	0x000314dc
   27e1c:	100044b0 	.word	0x100044b0
   27e20:	1000448c 	.word	0x1000448c
   27e24:	10004960 	.word	0x10004960
   27e28:	000314f8 	.word	0x000314f8
   27e2c:	10004bac 	.word	0x10004bac
   27e30:	10004b90 	.word	0x10004b90
   27e34:	00031514 	.word	0x00031514
   27e38:	10004c58 	.word	0x10004c58
   27e3c:	10004c3c 	.word	0x10004c3c
   27e40:	00031530 	.word	0x00031530
   27e44:	10004988 	.word	0x10004988
   27e48:	1000496c 	.word	0x1000496c
   27e4c:	e000ed00 	.word	0xe000ed00
   27e50:	00027c81 	.word	0x00027c81
   27e54:	1000028c 	.word	0x1000028c

00027e58 <boot_flag_decode>:
}

static int
boot_flag_decode(uint8_t flag)
{
    if (flag != BOOT_FLAG_SET) {
   27e58:	2801      	cmp	r0, #1
   27e5a:	d100      	bne.n	27e5e <boot_flag_decode+0x6>
        return BOOT_FLAG_BAD;
    }
    return BOOT_FLAG_SET;
}
   27e5c:	4770      	bx	lr
        return BOOT_FLAG_BAD;
   27e5e:	2002      	movs	r0, #2
   27e60:	e7fc      	b.n	27e5c <boot_flag_decode+0x4>
	...

00027e64 <boot_magic_decode>:
{
   27e64:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
   27e66:	2210      	movs	r2, #16
   27e68:	4903      	ldr	r1, [pc, #12]	; (27e78 <boot_magic_decode+0x14>)
   27e6a:	f7ee fe0f 	bl	16a8c <memcmp>
   27e6e:	b108      	cbz	r0, 27e74 <boot_magic_decode+0x10>
    return BOOT_MAGIC_BAD;
   27e70:	2002      	movs	r0, #2
}
   27e72:	bd08      	pop	{r3, pc}
        return BOOT_MAGIC_GOOD;
   27e74:	2001      	movs	r0, #1
   27e76:	e7fc      	b.n	27e72 <boot_magic_decode+0xe>
   27e78:	00031554 	.word	0x00031554

00027e7c <boot_swap_info_off>:

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ;
   27e7c:	6880      	ldr	r0, [r0, #8]

uint32_t
boot_swap_info_off(const struct flash_area *fap)
{
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
}
   27e7e:	3828      	subs	r0, #40	; 0x28
   27e80:	4770      	bx	lr

00027e82 <boot_magic_compatible_check>:
 *                              0 otherwise.
 */
int
boot_magic_compatible_check(uint8_t tbl_val, uint8_t val)
{
    switch (tbl_val) {
   27e82:	2804      	cmp	r0, #4
   27e84:	d00a      	beq.n	27e9c <boot_magic_compatible_check+0x1a>
   27e86:	2805      	cmp	r0, #5
   27e88:	d103      	bne.n	27e92 <boot_magic_compatible_check+0x10>
    case BOOT_MAGIC_ANY:
        return 1;

    case BOOT_MAGIC_NOTGOOD:
        return val != BOOT_MAGIC_GOOD;
   27e8a:	1e48      	subs	r0, r1, #1
   27e8c:	bf18      	it	ne
   27e8e:	2001      	movne	r0, #1
   27e90:	4770      	bx	lr

    default:
        return tbl_val == val;
   27e92:	4288      	cmp	r0, r1
   27e94:	bf14      	ite	ne
   27e96:	2000      	movne	r0, #0
   27e98:	2001      	moveq	r0, #1
   27e9a:	4770      	bx	lr
    switch (tbl_val) {
   27e9c:	2001      	movs	r0, #1
    }
}
   27e9e:	4770      	bx	lr

00027ea0 <bootutil_buffer_is_erased>:
{
    size_t i;
    uint8_t *u8b;
    uint8_t erased_val;

    if (buffer == NULL || len == 0) {
   27ea0:	b191      	cbz	r1, 27ec8 <bootutil_buffer_is_erased+0x28>
{
   27ea2:	b538      	push	{r3, r4, r5, lr}
   27ea4:	4614      	mov	r4, r2
   27ea6:	460d      	mov	r5, r1
    if (buffer == NULL || len == 0) {
   27ea8:	b90a      	cbnz	r2, 27eae <bootutil_buffer_is_erased+0xe>
        return false;
   27eaa:	2000      	movs	r0, #0
            return false;
        }
    }

    return true;
}
   27eac:	bd38      	pop	{r3, r4, r5, pc}
    erased_val = flash_area_erased_val(area);
   27eae:	f7f0 fe7b 	bl	18ba8 <flash_area_erased_val>
   27eb2:	b2c0      	uxtb	r0, r0
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
   27eb4:	2300      	movs	r3, #0
   27eb6:	42a3      	cmp	r3, r4
   27eb8:	d204      	bcs.n	27ec4 <bootutil_buffer_is_erased+0x24>
        if (u8b[i] != erased_val) {
   27eba:	5cea      	ldrb	r2, [r5, r3]
   27ebc:	4282      	cmp	r2, r0
   27ebe:	d105      	bne.n	27ecc <bootutil_buffer_is_erased+0x2c>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
   27ec0:	3301      	adds	r3, #1
   27ec2:	e7f8      	b.n	27eb6 <bootutil_buffer_is_erased+0x16>
    return true;
   27ec4:	2001      	movs	r0, #1
   27ec6:	e7f1      	b.n	27eac <bootutil_buffer_is_erased+0xc>
        return false;
   27ec8:	2000      	movs	r0, #0
}
   27eca:	4770      	bx	lr
            return false;
   27ecc:	2000      	movs	r0, #0
   27ece:	e7ed      	b.n	27eac <bootutil_buffer_is_erased+0xc>

00027ed0 <boot_read_flag>:

static int
boot_read_flag(const struct flash_area *fap, uint8_t *flag, uint32_t off)
{
   27ed0:	b538      	push	{r3, r4, r5, lr}
   27ed2:	4605      	mov	r5, r0
   27ed4:	460c      	mov	r4, r1
   27ed6:	4611      	mov	r1, r2
    int rc;

    rc = flash_area_read(fap, off, flag, sizeof *flag);
   27ed8:	2301      	movs	r3, #1
   27eda:	4622      	mov	r2, r4
   27edc:	f7f0 fe26 	bl	18b2c <flash_area_read>
    if (rc < 0) {
   27ee0:	2800      	cmp	r0, #0
   27ee2:	db0f      	blt.n	27f04 <boot_read_flag+0x34>
        return BOOT_EFLASH;
    }
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
   27ee4:	2201      	movs	r2, #1
   27ee6:	4621      	mov	r1, r4
   27ee8:	4628      	mov	r0, r5
   27eea:	f7ff ffd9 	bl	27ea0 <bootutil_buffer_is_erased>
   27eee:	b118      	cbz	r0, 27ef8 <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
   27ef0:	2303      	movs	r3, #3
   27ef2:	7023      	strb	r3, [r4, #0]
    } else {
        *flag = boot_flag_decode(*flag);
    }

    return 0;
   27ef4:	2000      	movs	r0, #0
   27ef6:	e006      	b.n	27f06 <boot_read_flag+0x36>
        *flag = boot_flag_decode(*flag);
   27ef8:	7820      	ldrb	r0, [r4, #0]
   27efa:	f7ff ffad 	bl	27e58 <boot_flag_decode>
   27efe:	7020      	strb	r0, [r4, #0]
    return 0;
   27f00:	2000      	movs	r0, #0
   27f02:	e000      	b.n	27f06 <boot_read_flag+0x36>
        return BOOT_EFLASH;
   27f04:	2001      	movs	r0, #1
}
   27f06:	bd38      	pop	{r3, r4, r5, pc}

00027f08 <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
   27f08:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
   27f0a:	6881      	ldr	r1, [r0, #8]
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
   27f0c:	2310      	movs	r3, #16
   27f0e:	4a04      	ldr	r2, [pc, #16]	; (27f20 <boot_write_magic+0x18>)
   27f10:	3910      	subs	r1, #16
   27f12:	f7f0 fe1e 	bl	18b52 <flash_area_write>
    if (rc != 0) {
   27f16:	b900      	cbnz	r0, 27f1a <boot_write_magic+0x12>
        return BOOT_EFLASH;
    }

    return 0;
}
   27f18:	bd08      	pop	{r3, pc}
        return BOOT_EFLASH;
   27f1a:	2001      	movs	r0, #1
   27f1c:	e7fc      	b.n	27f18 <boot_write_magic+0x10>
   27f1e:	bf00      	nop
   27f20:	00031554 	.word	0x00031554

00027f24 <boot_write_trailer>:
 * @returns 0 on success, != 0 on error.
 */
int
boot_write_trailer(const struct flash_area *fap, uint32_t off,
        const uint8_t *inbuf, uint8_t inlen)
{
   27f24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27f28:	b083      	sub	sp, #12
   27f2a:	4606      	mov	r6, r0
   27f2c:	460f      	mov	r7, r1
   27f2e:	4690      	mov	r8, r2
   27f30:	461d      	mov	r5, r3
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
   27f32:	f7f0 fe34 	bl	18b9e <flash_area_align>
    align = (inlen + align - 1) & ~(align - 1);
   27f36:	1944      	adds	r4, r0, r5
   27f38:	b2e4      	uxtb	r4, r4
   27f3a:	3c01      	subs	r4, #1
   27f3c:	b264      	sxtb	r4, r4
   27f3e:	4240      	negs	r0, r0
   27f40:	4004      	ands	r4, r0
   27f42:	b2e4      	uxtb	r4, r4
    if (align > BOOT_MAX_ALIGN) {
   27f44:	2c08      	cmp	r4, #8
   27f46:	d904      	bls.n	27f52 <boot_write_trailer+0x2e>
        return -1;
   27f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
   27f4c:	b003      	add	sp, #12
   27f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    erased_val = flash_area_erased_val(fap);
   27f52:	4630      	mov	r0, r6
   27f54:	f7f0 fe28 	bl	18ba8 <flash_area_erased_val>
   27f58:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
   27f5a:	462a      	mov	r2, r5
   27f5c:	4641      	mov	r1, r8
   27f5e:	4668      	mov	r0, sp
   27f60:	f7ee fdb8 	bl	16ad4 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
   27f64:	1b62      	subs	r2, r4, r5
   27f66:	fa5f f189 	uxtb.w	r1, r9
   27f6a:	eb0d 0005 	add.w	r0, sp, r5
   27f6e:	f7ee fdd6 	bl	16b1e <memset>
    rc = flash_area_write(fap, off, buf, align);
   27f72:	4623      	mov	r3, r4
   27f74:	466a      	mov	r2, sp
   27f76:	4639      	mov	r1, r7
   27f78:	4630      	mov	r0, r6
   27f7a:	f7f0 fdea 	bl	18b52 <flash_area_write>
    if (rc != 0) {
   27f7e:	2800      	cmp	r0, #0
   27f80:	d0e4      	beq.n	27f4c <boot_write_trailer+0x28>
        return BOOT_EFLASH;
   27f82:	2001      	movs	r0, #1
   27f84:	e7e2      	b.n	27f4c <boot_write_trailer+0x28>

00027f86 <boot_write_trailer_flag>:

int
boot_write_trailer_flag(const struct flash_area *fap, uint32_t off,
        uint8_t flag_val)
{
   27f86:	b500      	push	{lr}
   27f88:	b083      	sub	sp, #12
    const uint8_t buf[1] = { flag_val };
   27f8a:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
   27f8e:	2301      	movs	r3, #1
   27f90:	aa01      	add	r2, sp, #4
   27f92:	f7ff ffc7 	bl	27f24 <boot_write_trailer>
}
   27f96:	b003      	add	sp, #12
   27f98:	f85d fb04 	ldr.w	pc, [sp], #4

00027f9c <boot_write_image_ok>:

int
boot_write_image_ok(const struct flash_area *fap)
{
   27f9c:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
   27f9e:	6881      	ldr	r1, [r0, #8]

    off = boot_image_ok_off(fap);
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
   27fa0:	2201      	movs	r2, #1
   27fa2:	3918      	subs	r1, #24
   27fa4:	f7ff ffef 	bl	27f86 <boot_write_trailer_flag>
}
   27fa8:	bd08      	pop	{r3, pc}

00027faa <boot_read_image_ok>:

int
boot_read_image_ok(const struct flash_area *fap, uint8_t *image_ok)
{
   27faa:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
   27fac:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
   27fae:	3a18      	subs	r2, #24
   27fb0:	f7ff ff8e 	bl	27ed0 <boot_read_flag>
}
   27fb4:	bd08      	pop	{r3, pc}

00027fb6 <boot_read_swap_state>:
{
   27fb6:	b530      	push	{r4, r5, lr}
   27fb8:	b087      	sub	sp, #28
   27fba:	4604      	mov	r4, r0
   27fbc:	460d      	mov	r5, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
   27fbe:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   27fc0:	2310      	movs	r3, #16
   27fc2:	aa02      	add	r2, sp, #8
   27fc4:	3910      	subs	r1, #16
   27fc6:	f7f0 fdb1 	bl	18b2c <flash_area_read>
    if (rc < 0) {
   27fca:	2800      	cmp	r0, #0
   27fcc:	db3b      	blt.n	28046 <boot_read_swap_state+0x90>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
   27fce:	2210      	movs	r2, #16
   27fd0:	a902      	add	r1, sp, #8
   27fd2:	4620      	mov	r0, r4
   27fd4:	f7ff ff64 	bl	27ea0 <bootutil_buffer_is_erased>
   27fd8:	b358      	cbz	r0, 28032 <boot_read_swap_state+0x7c>
        state->magic = BOOT_MAGIC_UNSET;
   27fda:	2303      	movs	r3, #3
   27fdc:	702b      	strb	r3, [r5, #0]
    off = boot_swap_info_off(fap);
   27fde:	4620      	mov	r0, r4
   27fe0:	f7ff ff4c 	bl	27e7c <boot_swap_info_off>
   27fe4:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
   27fe6:	2301      	movs	r3, #1
   27fe8:	f10d 0207 	add.w	r2, sp, #7
   27fec:	4620      	mov	r0, r4
   27fee:	f7f0 fd9d 	bl	18b2c <flash_area_read>
    if (rc < 0) {
   27ff2:	2800      	cmp	r0, #0
   27ff4:	db2a      	blt.n	2804c <boot_read_swap_state+0x96>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   27ff6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27ffa:	f003 020f 	and.w	r2, r3, #15
   27ffe:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   28000:	091b      	lsrs	r3, r3, #4
   28002:	712b      	strb	r3, [r5, #4]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
   28004:	2201      	movs	r2, #1
   28006:	f10d 0107 	add.w	r1, sp, #7
   2800a:	4620      	mov	r0, r4
   2800c:	f7ff ff48 	bl	27ea0 <bootutil_buffer_is_erased>
   28010:	b910      	cbnz	r0, 28018 <boot_read_swap_state+0x62>
            state->swap_type > BOOT_SWAP_TYPE_REVERT) {
   28012:	786b      	ldrb	r3, [r5, #1]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
   28014:	2b04      	cmp	r3, #4
   28016:	d903      	bls.n	28020 <boot_read_swap_state+0x6a>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   28018:	2301      	movs	r3, #1
   2801a:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
   2801c:	2300      	movs	r3, #0
   2801e:	712b      	strb	r3, [r5, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
   28020:	68a2      	ldr	r2, [r4, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
   28022:	3a20      	subs	r2, #32
   28024:	1ca9      	adds	r1, r5, #2
   28026:	4620      	mov	r0, r4
   28028:	f7ff ff52 	bl	27ed0 <boot_read_flag>
    if (rc) {
   2802c:	b130      	cbz	r0, 2803c <boot_read_swap_state+0x86>
        return BOOT_EFLASH;
   2802e:	2001      	movs	r0, #1
   28030:	e00a      	b.n	28048 <boot_read_swap_state+0x92>
        state->magic = boot_magic_decode(magic);
   28032:	a802      	add	r0, sp, #8
   28034:	f7ff ff16 	bl	27e64 <boot_magic_decode>
   28038:	7028      	strb	r0, [r5, #0]
   2803a:	e7d0      	b.n	27fde <boot_read_swap_state+0x28>
    return boot_read_image_ok(fap, &state->image_ok);
   2803c:	1ce9      	adds	r1, r5, #3
   2803e:	4620      	mov	r0, r4
   28040:	f7ff ffb3 	bl	27faa <boot_read_image_ok>
   28044:	e000      	b.n	28048 <boot_read_swap_state+0x92>
        return BOOT_EFLASH;
   28046:	2001      	movs	r0, #1
}
   28048:	b007      	add	sp, #28
   2804a:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
   2804c:	2001      	movs	r0, #1
   2804e:	e7fb      	b.n	28048 <boot_read_swap_state+0x92>

00028050 <boot_read_swap_state_by_id>:
{
   28050:	b510      	push	{r4, lr}
   28052:	b082      	sub	sp, #8
   28054:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
   28056:	a901      	add	r1, sp, #4
   28058:	b2c0      	uxtb	r0, r0
   2805a:	f7f0 fd0f 	bl	18a7c <flash_area_open>
    if (rc != 0) {
   2805e:	b110      	cbz	r0, 28066 <boot_read_swap_state_by_id+0x16>
        return BOOT_EFLASH;
   28060:	2001      	movs	r0, #1
}
   28062:	b002      	add	sp, #8
   28064:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
   28066:	4621      	mov	r1, r4
   28068:	9801      	ldr	r0, [sp, #4]
   2806a:	f7ff ffa4 	bl	27fb6 <boot_read_swap_state>
    return rc;
   2806e:	e7f8      	b.n	28062 <boot_read_swap_state_by_id+0x12>

00028070 <boot_write_swap_info>:
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_info(const struct flash_area *fap, uint8_t swap_type,
                     uint8_t image_num)
{
   28070:	b510      	push	{r4, lr}
   28072:	b082      	sub	sp, #8
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   28074:	2a0e      	cmp	r2, #14
   28076:	d811      	bhi.n	2809c <boot_write_swap_info+0x2c>
   28078:	4604      	mov	r4, r0
   2807a:	290e      	cmp	r1, #14
   2807c:	d818      	bhi.n	280b0 <boot_write_swap_info+0x40>
   2807e:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   28082:	f88d 1007 	strb.w	r1, [sp, #7]
    off = boot_swap_info_off(fap);
   28086:	f7ff fef9 	bl	27e7c <boot_swap_info_off>
   2808a:	4601      	mov	r1, r0
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off), swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
   2808c:	2301      	movs	r3, #1
   2808e:	f10d 0207 	add.w	r2, sp, #7
   28092:	4620      	mov	r0, r4
   28094:	f7ff ff46 	bl	27f24 <boot_write_trailer>
}
   28098:	b002      	add	sp, #8
   2809a:	bd10      	pop	{r4, pc}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   2809c:	f7ec fae2 	bl	14664 <hal_debugger_connected>
   280a0:	b100      	cbz	r0, 280a4 <boot_write_swap_info+0x34>
   280a2:	be01      	bkpt	0x0001
   280a4:	2300      	movs	r3, #0
   280a6:	461a      	mov	r2, r3
   280a8:	4619      	mov	r1, r3
   280aa:	4618      	mov	r0, r3
   280ac:	f7ec fe7a 	bl	14da4 <__assert_func>
   280b0:	f7ec fad8 	bl	14664 <hal_debugger_connected>
   280b4:	b100      	cbz	r0, 280b8 <boot_write_swap_info+0x48>
   280b6:	be01      	bkpt	0x0001
   280b8:	2300      	movs	r3, #0
   280ba:	461a      	mov	r2, r3
   280bc:	4619      	mov	r1, r3
   280be:	4618      	mov	r0, r3
   280c0:	f7ec fe70 	bl	14da4 <__assert_func>

000280c4 <boot_swap_type_multi>:

int
boot_swap_type_multi(int image_index)
{
   280c4:	b530      	push	{r4, r5, lr}
   280c6:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
   280c8:	a902      	add	r1, sp, #8
   280ca:	2001      	movs	r0, #1
   280cc:	f7ff ffc0 	bl	28050 <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
   280d0:	2800      	cmp	r0, #0
   280d2:	d13e      	bne.n	28152 <boot_swap_type_multi+0x8e>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
   280d4:	4669      	mov	r1, sp
   280d6:	2002      	movs	r0, #2
   280d8:	f7ff ffba 	bl	28050 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
   280dc:	2800      	cmp	r0, #0
   280de:	d13a      	bne.n	28156 <boot_swap_type_multi+0x92>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   280e0:	2400      	movs	r4, #0
   280e2:	e007      	b.n	280f4 <boot_swap_type_multi+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   280e4:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   280e6:	2b04      	cmp	r3, #4
   280e8:	d029      	beq.n	2813e <boot_swap_type_multi+0x7a>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
   280ea:	f89d 200a 	ldrb.w	r2, [sp, #10]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   280ee:	4293      	cmp	r3, r2
   280f0:	d025      	beq.n	2813e <boot_swap_type_multi+0x7a>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   280f2:	3401      	adds	r4, #1
   280f4:	2c02      	cmp	r4, #2
   280f6:	d829      	bhi.n	2814c <boot_swap_type_multi+0x88>
        table = boot_swap_tables + i;
   280f8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   280fc:	4a17      	ldr	r2, [pc, #92]	; (2815c <boot_swap_type_multi+0x98>)
   280fe:	eb02 0543 	add.w	r5, r2, r3, lsl #1
        if (boot_magic_compatible_check(table->magic_primary_slot,
   28102:	f89d 1008 	ldrb.w	r1, [sp, #8]
   28106:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
   2810a:	f7ff feba 	bl	27e82 <boot_magic_compatible_check>
   2810e:	2800      	cmp	r0, #0
   28110:	d0ef      	beq.n	280f2 <boot_swap_type_multi+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
   28112:	f89d 1000 	ldrb.w	r1, [sp]
   28116:	7868      	ldrb	r0, [r5, #1]
   28118:	f7ff feb3 	bl	27e82 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
   2811c:	2800      	cmp	r0, #0
   2811e:	d0e8      	beq.n	280f2 <boot_swap_type_multi+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   28120:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
   28122:	2b04      	cmp	r3, #4
   28124:	d003      	beq.n	2812e <boot_swap_type_multi+0x6a>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   28126:	f89d 200b 	ldrb.w	r2, [sp, #11]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   2812a:	4293      	cmp	r3, r2
   2812c:	d1e1      	bne.n	280f2 <boot_swap_type_multi+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   2812e:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   28130:	2b04      	cmp	r3, #4
   28132:	d0d7      	beq.n	280e4 <boot_swap_type_multi+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   28134:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   28138:	4293      	cmp	r3, r2
   2813a:	d1da      	bne.n	280f2 <boot_swap_type_multi+0x2e>
   2813c:	e7d2      	b.n	280e4 <boot_swap_type_multi+0x20>
            BOOT_LOG_INF("Swap type: %s",
   2813e:	7968      	ldrb	r0, [r5, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
                    table->swap_type != BOOT_SWAP_TYPE_PERM &&
   28140:	1e83      	subs	r3, r0, #2
   28142:	b2db      	uxtb	r3, r3
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
   28144:	2b02      	cmp	r3, #2
   28146:	d902      	bls.n	2814e <boot_swap_type_multi+0x8a>
                    table->swap_type != BOOT_SWAP_TYPE_REVERT) {
                return BOOT_SWAP_TYPE_PANIC;
   28148:	20ff      	movs	r0, #255	; 0xff
   2814a:	e000      	b.n	2814e <boot_swap_type_multi+0x8a>
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
   2814c:	2001      	movs	r0, #1
}
   2814e:	b005      	add	sp, #20
   28150:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
   28152:	20ff      	movs	r0, #255	; 0xff
   28154:	e7fb      	b.n	2814e <boot_swap_type_multi+0x8a>
        return BOOT_SWAP_TYPE_PANIC;
   28156:	20ff      	movs	r0, #255	; 0xff
   28158:	e7f9      	b.n	2814e <boot_swap_type_multi+0x8a>
   2815a:	bf00      	nop
   2815c:	00031564 	.word	0x00031564

00028160 <boot_swap_type>:
 * This function is not used by the bootloader itself, but its required API
 * by external tooling like mcumgr.
 */
int
boot_swap_type(void)
{
   28160:	b508      	push	{r3, lr}
    return boot_swap_type_multi(0);
   28162:	2000      	movs	r0, #0
   28164:	f7ff ffae 	bl	280c4 <boot_swap_type_multi>
}
   28168:	bd08      	pop	{r3, pc}

0002816a <boot_set_pending_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending_multi(int image_index, int permanent)
{
   2816a:	b530      	push	{r4, r5, lr}
   2816c:	b085      	sub	sp, #20
   2816e:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
   28170:	a901      	add	r1, sp, #4
   28172:	2002      	movs	r0, #2
   28174:	f7ff ff6c 	bl	28050 <boot_read_swap_state_by_id>
                                    &state_secondary_slot);
    if (rc != 0) {
   28178:	4603      	mov	r3, r0
   2817a:	bba0      	cbnz	r0, 281e6 <boot_set_pending_multi+0x7c>
        return rc;
    }

    switch (state_secondary_slot.magic) {
   2817c:	f89d 5004 	ldrb.w	r5, [sp, #4]
   28180:	2d02      	cmp	r5, #2
   28182:	d02a      	beq.n	281da <boot_set_pending_multi+0x70>
   28184:	2d03      	cmp	r5, #3
   28186:	d00b      	beq.n	281a0 <boot_set_pending_multi+0x36>
   28188:	2d01      	cmp	r5, #1
   2818a:	d02c      	beq.n	281e6 <boot_set_pending_multi+0x7c>
        flash_area_erase(fap, 0, fap->fa_size);
        flash_area_close(fap);
        return BOOT_EBADIMAGE;

    default:
        assert(0);
   2818c:	f7ec fa6a 	bl	14664 <hal_debugger_connected>
   28190:	b100      	cbz	r0, 28194 <boot_set_pending_multi+0x2a>
   28192:	be01      	bkpt	0x0001
   28194:	2300      	movs	r3, #0
   28196:	461a      	mov	r2, r3
   28198:	4619      	mov	r1, r3
   2819a:	4618      	mov	r0, r3
   2819c:	f7ec fe02 	bl	14da4 <__assert_func>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap);
   281a0:	a903      	add	r1, sp, #12
   281a2:	2002      	movs	r0, #2
   281a4:	f7f0 fc6a 	bl	18a7c <flash_area_open>
        if (rc != 0) {
   281a8:	b150      	cbz	r0, 281c0 <boot_set_pending_multi+0x56>
            rc = BOOT_EFLASH;
   281aa:	2301      	movs	r3, #1
        if (rc == 0) {
   281ac:	b9db      	cbnz	r3, 281e6 <boot_set_pending_multi+0x7c>
            if (permanent) {
   281ae:	b904      	cbnz	r4, 281b2 <boot_set_pending_multi+0x48>
                swap_type = BOOT_SWAP_TYPE_TEST;
   281b0:	2502      	movs	r5, #2
            rc = boot_write_swap_info(fap, swap_type, 0);
   281b2:	2200      	movs	r2, #0
   281b4:	4629      	mov	r1, r5
   281b6:	9803      	ldr	r0, [sp, #12]
   281b8:	f7ff ff5a 	bl	28070 <boot_write_swap_info>
   281bc:	4603      	mov	r3, r0
   281be:	e012      	b.n	281e6 <boot_set_pending_multi+0x7c>
            rc = boot_write_magic(fap);
   281c0:	9803      	ldr	r0, [sp, #12]
   281c2:	f7ff fea1 	bl	27f08 <boot_write_magic>
        if (rc == 0 && permanent) {
   281c6:	4603      	mov	r3, r0
   281c8:	2800      	cmp	r0, #0
   281ca:	d1ef      	bne.n	281ac <boot_set_pending_multi+0x42>
   281cc:	2c00      	cmp	r4, #0
   281ce:	d0ed      	beq.n	281ac <boot_set_pending_multi+0x42>
            rc = boot_write_image_ok(fap);
   281d0:	9803      	ldr	r0, [sp, #12]
   281d2:	f7ff fee3 	bl	27f9c <boot_write_image_ok>
   281d6:	4603      	mov	r3, r0
   281d8:	e7e8      	b.n	281ac <boot_set_pending_multi+0x42>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap);
   281da:	a903      	add	r1, sp, #12
   281dc:	2002      	movs	r0, #2
   281de:	f7f0 fc4d 	bl	18a7c <flash_area_open>
        if (rc != 0) {
   281e2:	b118      	cbz	r0, 281ec <boot_set_pending_multi+0x82>
            return BOOT_EFLASH;
   281e4:	2301      	movs	r3, #1
        return BOOT_EBADIMAGE;
    }
}
   281e6:	4618      	mov	r0, r3
   281e8:	b005      	add	sp, #20
   281ea:	bd30      	pop	{r4, r5, pc}
        flash_area_erase(fap, 0, fap->fa_size);
   281ec:	9803      	ldr	r0, [sp, #12]
   281ee:	6882      	ldr	r2, [r0, #8]
   281f0:	2100      	movs	r1, #0
   281f2:	f7f0 fcc1 	bl	18b78 <flash_area_erase>
        return BOOT_EBADIMAGE;
   281f6:	2303      	movs	r3, #3
   281f8:	e7f5      	b.n	281e6 <boot_set_pending_multi+0x7c>

000281fa <boot_set_pending>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending(int permanent)
{
   281fa:	b508      	push	{r3, lr}
   281fc:	4601      	mov	r1, r0
    return boot_set_pending_multi(0, permanent);
   281fe:	2000      	movs	r0, #0
   28200:	f7ff ffb3 	bl	2816a <boot_set_pending_multi>
}
   28204:	bd08      	pop	{r3, pc}

00028206 <boot_set_confirmed_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed_multi(int image_index)
{
   28206:	b500      	push	{lr}
   28208:	b085      	sub	sp, #20
    const struct flash_area *fap;
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
   2820a:	a901      	add	r1, sp, #4
   2820c:	2001      	movs	r0, #1
   2820e:	f7ff ff1f 	bl	28050 <boot_read_swap_state_by_id>
                                    &state_primary_slot);
    if (rc != 0) {
   28212:	b998      	cbnz	r0, 2823c <boot_set_confirmed_multi+0x36>
        return rc;
    }

    switch (state_primary_slot.magic) {
   28214:	f89d 3004 	ldrb.w	r3, [sp, #4]
   28218:	2b02      	cmp	r3, #2
   2821a:	d00e      	beq.n	2823a <boot_set_confirmed_multi+0x34>
   2821c:	2b03      	cmp	r3, #3
   2821e:	d00d      	beq.n	2823c <boot_set_confirmed_multi+0x36>
    case BOOT_MAGIC_BAD:
        /* Unexpected state. */
        return BOOT_EBADVECT;
    }

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap);
   28220:	a903      	add	r1, sp, #12
   28222:	2001      	movs	r0, #1
   28224:	f7f0 fc2a 	bl	18a7c <flash_area_open>
    if (rc) {
   28228:	b958      	cbnz	r0, 28242 <boot_set_confirmed_multi+0x3c>
    /* Intentionally do not check copy_done flag
     * so can confirm a padded image which was programed using a programing
     * interface.
     */

    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   2822a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2822e:	2b03      	cmp	r3, #3
   28230:	d104      	bne.n	2823c <boot_set_confirmed_multi+0x36>
        /* Already confirmed. */
        goto done;
    }

    rc = boot_write_image_ok(fap);
   28232:	9803      	ldr	r0, [sp, #12]
   28234:	f7ff feb2 	bl	27f9c <boot_write_image_ok>
   28238:	e000      	b.n	2823c <boot_set_confirmed_multi+0x36>
        return BOOT_EBADVECT;
   2823a:	2004      	movs	r0, #4

done:
    flash_area_close(fap);
    return rc;
}
   2823c:	b005      	add	sp, #20
   2823e:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = BOOT_EFLASH;
   28242:	2001      	movs	r0, #1
   28244:	e7fa      	b.n	2823c <boot_set_confirmed_multi+0x36>

00028246 <boot_set_confirmed>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
   28246:	b508      	push	{r3, lr}
    return boot_set_confirmed_multi(0);
   28248:	2000      	movs	r0, #0
   2824a:	f7ff ffdc 	bl	28206 <boot_set_confirmed_multi>
}
   2824e:	bd08      	pop	{r3, pc}

00028250 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   28250:	b4f0      	push	{r4, r5, r6, r7}
   28252:	b08c      	sub	sp, #48	; 0x30
   28254:	4607      	mov	r7, r0
   28256:	460e      	mov	r6, r1
	const unsigned int rconst[11] = {
   28258:	ac01      	add	r4, sp, #4
   2825a:	4d2a      	ldr	r5, [pc, #168]	; (28304 <tc_aes128_set_encrypt_key+0xb4>)
   2825c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2825e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   28260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   28262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   28264:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   28268:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   2826c:	2f00      	cmp	r7, #0
   2826e:	d045      	beq.n	282fc <tc_aes128_set_encrypt_key+0xac>
   28270:	4638      	mov	r0, r7
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   28272:	2e00      	cmp	r6, #0
   28274:	d044      	beq.n	28300 <tc_aes128_set_encrypt_key+0xb0>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   28276:	2300      	movs	r3, #0
   28278:	e00f      	b.n	2829a <tc_aes128_set_encrypt_key+0x4a>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   2827a:	f816 4023 	ldrb.w	r4, [r6, r3, lsl #2]
   2827e:	eb06 0183 	add.w	r1, r6, r3, lsl #2
   28282:	784a      	ldrb	r2, [r1, #1]
   28284:	0412      	lsls	r2, r2, #16
   28286:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   2828a:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   2828c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   28290:	78c9      	ldrb	r1, [r1, #3]
   28292:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   28294:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   28298:	3301      	adds	r3, #1
   2829a:	2b03      	cmp	r3, #3
   2829c:	d9ed      	bls.n	2827a <tc_aes128_set_encrypt_key+0x2a>
   2829e:	e006      	b.n	282ae <tc_aes128_set_encrypt_key+0x5e>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   282a0:	1f19      	subs	r1, r3, #4
   282a2:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   282a6:	404a      	eors	r2, r1
   282a8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   282ac:	3301      	adds	r3, #1
   282ae:	2b2b      	cmp	r3, #43	; 0x2b
   282b0:	d820      	bhi.n	282f4 <tc_aes128_set_encrypt_key+0xa4>
		t = s->words[i-1];
   282b2:	1e5a      	subs	r2, r3, #1
   282b4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
   282b8:	f013 0f03 	tst.w	r3, #3
   282bc:	d1f0      	bne.n	282a0 <tc_aes128_set_encrypt_key+0x50>
	return (((a) >> 24)|((a) << 8));
   282be:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   282c2:	0e11      	lsrs	r1, r2, #24
   282c4:	4c10      	ldr	r4, [pc, #64]	; (28308 <tc_aes128_set_encrypt_key+0xb8>)
   282c6:	5c65      	ldrb	r5, [r4, r1]
   282c8:	f3c2 4107 	ubfx	r1, r2, #16, #8
   282cc:	5c61      	ldrb	r1, [r4, r1]
   282ce:	0409      	lsls	r1, r1, #16
   282d0:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   282d4:	f3c2 2507 	ubfx	r5, r2, #8, #8
   282d8:	5d65      	ldrb	r5, [r4, r5]
   282da:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   282de:	b2d2      	uxtb	r2, r2
   282e0:	5ca2      	ldrb	r2, [r4, r2]
   282e2:	4311      	orrs	r1, r2
   282e4:	f023 0203 	bic.w	r2, r3, #3
   282e8:	ac0c      	add	r4, sp, #48	; 0x30
   282ea:	4422      	add	r2, r4
   282ec:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   282f0:	404a      	eors	r2, r1
   282f2:	e7d5      	b.n	282a0 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   282f4:	2001      	movs	r0, #1
}
   282f6:	b00c      	add	sp, #48	; 0x30
   282f8:	bcf0      	pop	{r4, r5, r6, r7}
   282fa:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   282fc:	2000      	movs	r0, #0
   282fe:	e7fa      	b.n	282f6 <tc_aes128_set_encrypt_key+0xa6>
		return TC_CRYPTO_FAIL;
   28300:	2000      	movs	r0, #0
   28302:	e7f8      	b.n	282f6 <tc_aes128_set_encrypt_key+0xa6>
   28304:	000300c0 	.word	0x000300c0
   28308:	000315c0 	.word	0x000315c0

0002830c <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2830c:	2800      	cmp	r0, #0
   2830e:	f000 839a 	beq.w	28a46 <tc_aes_encrypt+0x73a>
{
   28312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28316:	b088      	sub	sp, #32
   28318:	4616      	mov	r6, r2
   2831a:	4607      	mov	r7, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2831c:	2900      	cmp	r1, #0
   2831e:	f000 8394 	beq.w	28a4a <tc_aes_encrypt+0x73e>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   28322:	2a00      	cmp	r2, #0
   28324:	f000 8393 	beq.w	28a4e <tc_aes_encrypt+0x742>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   28328:	2310      	movs	r3, #16
   2832a:	460a      	mov	r2, r1
   2832c:	4619      	mov	r1, r3
   2832e:	eb0d 0003 	add.w	r0, sp, r3
   28332:	f000 fb91 	bl	28a58 <_copy>
	add_round_key(state, s->words);
   28336:	4635      	mov	r5, r6
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   28338:	6833      	ldr	r3, [r6, #0]
   2833a:	f89d 2010 	ldrb.w	r2, [sp, #16]
   2833e:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   28342:	f88d 2010 	strb.w	r2, [sp, #16]
   28346:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2834a:	f89d 1011 	ldrb.w	r1, [sp, #17]
   2834e:	404a      	eors	r2, r1
   28350:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   28354:	f3c3 2207 	ubfx	r2, r3, #8, #8
   28358:	f89d 1012 	ldrb.w	r1, [sp, #18]
   2835c:	404a      	eors	r2, r1
   2835e:	f88d 2012 	strb.w	r2, [sp, #18]
   28362:	b2db      	uxtb	r3, r3
   28364:	f89d 2013 	ldrb.w	r2, [sp, #19]
   28368:	4053      	eors	r3, r2
   2836a:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2836e:	6873      	ldr	r3, [r6, #4]
   28370:	f89d 2014 	ldrb.w	r2, [sp, #20]
   28374:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   28378:	f88d 2014 	strb.w	r2, [sp, #20]
   2837c:	f3c3 4207 	ubfx	r2, r3, #16, #8
   28380:	f89d 1015 	ldrb.w	r1, [sp, #21]
   28384:	404a      	eors	r2, r1
   28386:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2838a:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2838e:	f89d 1016 	ldrb.w	r1, [sp, #22]
   28392:	404a      	eors	r2, r1
   28394:	f88d 2016 	strb.w	r2, [sp, #22]
   28398:	b2db      	uxtb	r3, r3
   2839a:	f89d 2017 	ldrb.w	r2, [sp, #23]
   2839e:	4053      	eors	r3, r2
   283a0:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   283a4:	68b3      	ldr	r3, [r6, #8]
   283a6:	f89d 2018 	ldrb.w	r2, [sp, #24]
   283aa:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   283ae:	f88d 2018 	strb.w	r2, [sp, #24]
   283b2:	f3c3 4207 	ubfx	r2, r3, #16, #8
   283b6:	f89d 1019 	ldrb.w	r1, [sp, #25]
   283ba:	404a      	eors	r2, r1
   283bc:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   283c0:	f3c3 2207 	ubfx	r2, r3, #8, #8
   283c4:	f89d 101a 	ldrb.w	r1, [sp, #26]
   283c8:	404a      	eors	r2, r1
   283ca:	f88d 201a 	strb.w	r2, [sp, #26]
   283ce:	b2db      	uxtb	r3, r3
   283d0:	f89d 201b 	ldrb.w	r2, [sp, #27]
   283d4:	4053      	eors	r3, r2
   283d6:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   283da:	68f3      	ldr	r3, [r6, #12]
   283dc:	f89d 201c 	ldrb.w	r2, [sp, #28]
   283e0:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   283e4:	f88d 201c 	strb.w	r2, [sp, #28]
   283e8:	f3c3 4207 	ubfx	r2, r3, #16, #8
   283ec:	f89d 101d 	ldrb.w	r1, [sp, #29]
   283f0:	404a      	eors	r2, r1
   283f2:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   283f6:	f3c3 2207 	ubfx	r2, r3, #8, #8
   283fa:	f89d 101e 	ldrb.w	r1, [sp, #30]
   283fe:	404a      	eors	r2, r1
   28400:	f88d 201e 	strb.w	r2, [sp, #30]
   28404:	b2db      	uxtb	r3, r3
   28406:	f89d 201f 	ldrb.w	r2, [sp, #31]
   2840a:	4053      	eors	r3, r2
   2840c:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
   28410:	2400      	movs	r4, #0
}
   28412:	e239      	b.n	28888 <tc_aes_encrypt+0x57c>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   28414:	f89d 3010 	ldrb.w	r3, [sp, #16]
   28418:	f88d 3000 	strb.w	r3, [sp]
   2841c:	f89d 3015 	ldrb.w	r3, [sp, #21]
   28420:	f88d 3001 	strb.w	r3, [sp, #1]
   28424:	f89d 301a 	ldrb.w	r3, [sp, #26]
   28428:	f88d 3002 	strb.w	r3, [sp, #2]
   2842c:	f89d 301f 	ldrb.w	r3, [sp, #31]
   28430:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   28434:	f89d 3014 	ldrb.w	r3, [sp, #20]
   28438:	f88d 3004 	strb.w	r3, [sp, #4]
   2843c:	f89d 3019 	ldrb.w	r3, [sp, #25]
   28440:	f88d 3005 	strb.w	r3, [sp, #5]
   28444:	f89d 301e 	ldrb.w	r3, [sp, #30]
   28448:	f88d 3006 	strb.w	r3, [sp, #6]
   2844c:	f89d 3013 	ldrb.w	r3, [sp, #19]
   28450:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   28454:	f89d 3018 	ldrb.w	r3, [sp, #24]
   28458:	f88d 3008 	strb.w	r3, [sp, #8]
   2845c:	f89d 301d 	ldrb.w	r3, [sp, #29]
   28460:	f88d 3009 	strb.w	r3, [sp, #9]
   28464:	f89d 3012 	ldrb.w	r3, [sp, #18]
   28468:	f88d 300a 	strb.w	r3, [sp, #10]
   2846c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   28470:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   28474:	f89d 301c 	ldrb.w	r3, [sp, #28]
   28478:	f88d 300c 	strb.w	r3, [sp, #12]
   2847c:	f89d 3011 	ldrb.w	r3, [sp, #17]
   28480:	f88d 300d 	strb.w	r3, [sp, #13]
   28484:	f89d 3016 	ldrb.w	r3, [sp, #22]
   28488:	f88d 300e 	strb.w	r3, [sp, #14]
   2848c:	f89d 301b 	ldrb.w	r3, [sp, #27]
   28490:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   28494:	2310      	movs	r3, #16
   28496:	466a      	mov	r2, sp
   28498:	4619      	mov	r1, r3
   2849a:	eb0d 0003 	add.w	r0, sp, r3
   2849e:	f000 fadb 	bl	28a58 <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   284a2:	f89d 0010 	ldrb.w	r0, [sp, #16]
   284a6:	f000 fae8 	bl	28a7a <_double_byte>
   284aa:	4680      	mov	r8, r0
   284ac:	f89d 0011 	ldrb.w	r0, [sp, #17]
   284b0:	f000 fae3 	bl	28a7a <_double_byte>
   284b4:	4601      	mov	r1, r0
   284b6:	f89d 0011 	ldrb.w	r0, [sp, #17]
   284ba:	f89d 2012 	ldrb.w	r2, [sp, #18]
   284be:	f89d 3013 	ldrb.w	r3, [sp, #19]
   284c2:	4041      	eors	r1, r0
   284c4:	ea88 0801 	eor.w	r8, r8, r1
   284c8:	ea82 0208 	eor.w	r2, r2, r8
   284cc:	4053      	eors	r3, r2
   284ce:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   284d2:	f89d 8010 	ldrb.w	r8, [sp, #16]
   284d6:	f000 fad0 	bl	28a7a <_double_byte>
   284da:	ea88 0800 	eor.w	r8, r8, r0
   284de:	fa5f f888 	uxtb.w	r8, r8
   284e2:	f89d 0012 	ldrb.w	r0, [sp, #18]
   284e6:	f000 fac8 	bl	28a7a <_double_byte>
   284ea:	4602      	mov	r2, r0
   284ec:	f89d 0012 	ldrb.w	r0, [sp, #18]
   284f0:	f89d 3013 	ldrb.w	r3, [sp, #19]
   284f4:	4042      	eors	r2, r0
   284f6:	ea88 0802 	eor.w	r8, r8, r2
   284fa:	ea83 0308 	eor.w	r3, r3, r8
   284fe:	f88d 3001 	strb.w	r3, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   28502:	f89d 8010 	ldrb.w	r8, [sp, #16]
   28506:	f89d 3011 	ldrb.w	r3, [sp, #17]
   2850a:	ea88 0803 	eor.w	r8, r8, r3
   2850e:	f000 fab4 	bl	28a7a <_double_byte>
   28512:	ea88 0800 	eor.w	r8, r8, r0
   28516:	fa5f f888 	uxtb.w	r8, r8
   2851a:	f89d 0013 	ldrb.w	r0, [sp, #19]
   2851e:	f000 faac 	bl	28a7a <_double_byte>
   28522:	f89d 3013 	ldrb.w	r3, [sp, #19]
   28526:	4058      	eors	r0, r3
   28528:	ea88 0800 	eor.w	r8, r8, r0
   2852c:	f88d 8002 	strb.w	r8, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   28530:	f89d 0010 	ldrb.w	r0, [sp, #16]
   28534:	f000 faa1 	bl	28a7a <_double_byte>
   28538:	f89d 2010 	ldrb.w	r2, [sp, #16]
   2853c:	f89d 3011 	ldrb.w	r3, [sp, #17]
   28540:	f89d 8012 	ldrb.w	r8, [sp, #18]
   28544:	4050      	eors	r0, r2
   28546:	4043      	eors	r3, r0
   28548:	ea88 0803 	eor.w	r8, r8, r3
   2854c:	fa5f f888 	uxtb.w	r8, r8
   28550:	f89d 0013 	ldrb.w	r0, [sp, #19]
   28554:	f000 fa91 	bl	28a7a <_double_byte>
   28558:	ea88 0800 	eor.w	r8, r8, r0
   2855c:	f88d 8003 	strb.w	r8, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   28560:	f89d 0014 	ldrb.w	r0, [sp, #20]
   28564:	f000 fa89 	bl	28a7a <_double_byte>
   28568:	4680      	mov	r8, r0
   2856a:	f89d 0015 	ldrb.w	r0, [sp, #21]
   2856e:	f000 fa84 	bl	28a7a <_double_byte>
   28572:	4601      	mov	r1, r0
   28574:	f89d 0015 	ldrb.w	r0, [sp, #21]
   28578:	f89d 2016 	ldrb.w	r2, [sp, #22]
   2857c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   28580:	4041      	eors	r1, r0
   28582:	ea88 0801 	eor.w	r8, r8, r1
   28586:	ea82 0208 	eor.w	r2, r2, r8
   2858a:	4053      	eors	r3, r2
   2858c:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   28590:	f89d 8014 	ldrb.w	r8, [sp, #20]
   28594:	f000 fa71 	bl	28a7a <_double_byte>
   28598:	ea88 0800 	eor.w	r8, r8, r0
   2859c:	fa5f f888 	uxtb.w	r8, r8
   285a0:	f89d 0016 	ldrb.w	r0, [sp, #22]
   285a4:	f000 fa69 	bl	28a7a <_double_byte>
   285a8:	4602      	mov	r2, r0
   285aa:	f89d 0016 	ldrb.w	r0, [sp, #22]
   285ae:	f89d 3017 	ldrb.w	r3, [sp, #23]
   285b2:	4042      	eors	r2, r0
   285b4:	ea88 0802 	eor.w	r8, r8, r2
   285b8:	ea83 0308 	eor.w	r3, r3, r8
   285bc:	f88d 3005 	strb.w	r3, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   285c0:	f89d 8014 	ldrb.w	r8, [sp, #20]
   285c4:	f89d 3015 	ldrb.w	r3, [sp, #21]
   285c8:	ea88 0803 	eor.w	r8, r8, r3
   285cc:	f000 fa55 	bl	28a7a <_double_byte>
   285d0:	ea88 0800 	eor.w	r8, r8, r0
   285d4:	fa5f f888 	uxtb.w	r8, r8
   285d8:	f89d 0017 	ldrb.w	r0, [sp, #23]
   285dc:	f000 fa4d 	bl	28a7a <_double_byte>
   285e0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   285e4:	4058      	eors	r0, r3
   285e6:	ea88 0800 	eor.w	r8, r8, r0
   285ea:	f88d 8006 	strb.w	r8, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   285ee:	f89d 0014 	ldrb.w	r0, [sp, #20]
   285f2:	f000 fa42 	bl	28a7a <_double_byte>
   285f6:	f89d 2014 	ldrb.w	r2, [sp, #20]
   285fa:	f89d 3015 	ldrb.w	r3, [sp, #21]
   285fe:	f89d 8016 	ldrb.w	r8, [sp, #22]
   28602:	4050      	eors	r0, r2
   28604:	4043      	eors	r3, r0
   28606:	ea88 0803 	eor.w	r8, r8, r3
   2860a:	fa5f f888 	uxtb.w	r8, r8
   2860e:	f89d 0017 	ldrb.w	r0, [sp, #23]
   28612:	f000 fa32 	bl	28a7a <_double_byte>
   28616:	ea88 0800 	eor.w	r8, r8, r0
   2861a:	f88d 8007 	strb.w	r8, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2861e:	f89d 0018 	ldrb.w	r0, [sp, #24]
   28622:	f000 fa2a 	bl	28a7a <_double_byte>
   28626:	4680      	mov	r8, r0
   28628:	f89d 0019 	ldrb.w	r0, [sp, #25]
   2862c:	f000 fa25 	bl	28a7a <_double_byte>
   28630:	4601      	mov	r1, r0
   28632:	f89d 0019 	ldrb.w	r0, [sp, #25]
   28636:	f89d 201a 	ldrb.w	r2, [sp, #26]
   2863a:	f89d 301b 	ldrb.w	r3, [sp, #27]
   2863e:	4041      	eors	r1, r0
   28640:	ea88 0801 	eor.w	r8, r8, r1
   28644:	ea82 0208 	eor.w	r2, r2, r8
   28648:	4053      	eors	r3, r2
   2864a:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2864e:	f89d 8018 	ldrb.w	r8, [sp, #24]
   28652:	f000 fa12 	bl	28a7a <_double_byte>
   28656:	ea88 0800 	eor.w	r8, r8, r0
   2865a:	fa5f f888 	uxtb.w	r8, r8
   2865e:	f89d 001a 	ldrb.w	r0, [sp, #26]
   28662:	f000 fa0a 	bl	28a7a <_double_byte>
   28666:	4602      	mov	r2, r0
   28668:	f89d 001a 	ldrb.w	r0, [sp, #26]
   2866c:	f89d 301b 	ldrb.w	r3, [sp, #27]
   28670:	4042      	eors	r2, r0
   28672:	ea88 0802 	eor.w	r8, r8, r2
   28676:	ea83 0308 	eor.w	r3, r3, r8
   2867a:	f88d 3009 	strb.w	r3, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2867e:	f89d 8018 	ldrb.w	r8, [sp, #24]
   28682:	f89d 3019 	ldrb.w	r3, [sp, #25]
   28686:	ea88 0803 	eor.w	r8, r8, r3
   2868a:	f000 f9f6 	bl	28a7a <_double_byte>
   2868e:	ea88 0800 	eor.w	r8, r8, r0
   28692:	fa5f f888 	uxtb.w	r8, r8
   28696:	f89d 001b 	ldrb.w	r0, [sp, #27]
   2869a:	f000 f9ee 	bl	28a7a <_double_byte>
   2869e:	f89d 301b 	ldrb.w	r3, [sp, #27]
   286a2:	4058      	eors	r0, r3
   286a4:	ea88 0800 	eor.w	r8, r8, r0
   286a8:	f88d 800a 	strb.w	r8, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   286ac:	f89d 0018 	ldrb.w	r0, [sp, #24]
   286b0:	f000 f9e3 	bl	28a7a <_double_byte>
   286b4:	f89d 2018 	ldrb.w	r2, [sp, #24]
   286b8:	f89d 3019 	ldrb.w	r3, [sp, #25]
   286bc:	f89d 801a 	ldrb.w	r8, [sp, #26]
   286c0:	4050      	eors	r0, r2
   286c2:	4043      	eors	r3, r0
   286c4:	ea88 0803 	eor.w	r8, r8, r3
   286c8:	fa5f f888 	uxtb.w	r8, r8
   286cc:	f89d 001b 	ldrb.w	r0, [sp, #27]
   286d0:	f000 f9d3 	bl	28a7a <_double_byte>
   286d4:	ea88 0800 	eor.w	r8, r8, r0
   286d8:	f88d 800b 	strb.w	r8, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   286dc:	f89d 001c 	ldrb.w	r0, [sp, #28]
   286e0:	f000 f9cb 	bl	28a7a <_double_byte>
   286e4:	4680      	mov	r8, r0
   286e6:	f89d 001d 	ldrb.w	r0, [sp, #29]
   286ea:	f000 f9c6 	bl	28a7a <_double_byte>
   286ee:	4601      	mov	r1, r0
   286f0:	f89d 001d 	ldrb.w	r0, [sp, #29]
   286f4:	f89d 201e 	ldrb.w	r2, [sp, #30]
   286f8:	f89d 301f 	ldrb.w	r3, [sp, #31]
   286fc:	4041      	eors	r1, r0
   286fe:	ea88 0801 	eor.w	r8, r8, r1
   28702:	ea82 0208 	eor.w	r2, r2, r8
   28706:	4053      	eors	r3, r2
   28708:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2870c:	f89d 801c 	ldrb.w	r8, [sp, #28]
   28710:	f000 f9b3 	bl	28a7a <_double_byte>
   28714:	ea88 0800 	eor.w	r8, r8, r0
   28718:	fa5f f888 	uxtb.w	r8, r8
   2871c:	f89d 001e 	ldrb.w	r0, [sp, #30]
   28720:	f000 f9ab 	bl	28a7a <_double_byte>
   28724:	4602      	mov	r2, r0
   28726:	f89d 001e 	ldrb.w	r0, [sp, #30]
   2872a:	f89d 301f 	ldrb.w	r3, [sp, #31]
   2872e:	4042      	eors	r2, r0
   28730:	ea88 0802 	eor.w	r8, r8, r2
   28734:	ea83 0308 	eor.w	r3, r3, r8
   28738:	f88d 300d 	strb.w	r3, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2873c:	f89d 801c 	ldrb.w	r8, [sp, #28]
   28740:	f89d 301d 	ldrb.w	r3, [sp, #29]
   28744:	ea88 0803 	eor.w	r8, r8, r3
   28748:	f000 f997 	bl	28a7a <_double_byte>
   2874c:	ea88 0800 	eor.w	r8, r8, r0
   28750:	fa5f f888 	uxtb.w	r8, r8
   28754:	f89d 001f 	ldrb.w	r0, [sp, #31]
   28758:	f000 f98f 	bl	28a7a <_double_byte>
   2875c:	f89d 301f 	ldrb.w	r3, [sp, #31]
   28760:	4058      	eors	r0, r3
   28762:	ea88 0800 	eor.w	r8, r8, r0
   28766:	f88d 800e 	strb.w	r8, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2876a:	f89d 001c 	ldrb.w	r0, [sp, #28]
   2876e:	f000 f984 	bl	28a7a <_double_byte>
   28772:	f89d 201c 	ldrb.w	r2, [sp, #28]
   28776:	f89d 301d 	ldrb.w	r3, [sp, #29]
   2877a:	f89d 801e 	ldrb.w	r8, [sp, #30]
   2877e:	4050      	eors	r0, r2
   28780:	4043      	eors	r3, r0
   28782:	ea88 0803 	eor.w	r8, r8, r3
   28786:	fa5f f888 	uxtb.w	r8, r8
   2878a:	f89d 001f 	ldrb.w	r0, [sp, #31]
   2878e:	f000 f974 	bl	28a7a <_double_byte>
   28792:	ea88 0800 	eor.w	r8, r8, r0
   28796:	f88d 800f 	strb.w	r8, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2879a:	2310      	movs	r3, #16
   2879c:	466a      	mov	r2, sp
   2879e:	4619      	mov	r1, r3
   287a0:	eb0d 0003 	add.w	r0, sp, r3
   287a4:	f000 f958 	bl	28a58 <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   287a8:	3401      	adds	r4, #1
   287aa:	0123      	lsls	r3, r4, #4
   287ac:	eb05 1204 	add.w	r2, r5, r4, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   287b0:	58eb      	ldr	r3, [r5, r3]
   287b2:	f89d 1010 	ldrb.w	r1, [sp, #16]
   287b6:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   287ba:	f88d 1010 	strb.w	r1, [sp, #16]
   287be:	f3c3 4107 	ubfx	r1, r3, #16, #8
   287c2:	f89d 0011 	ldrb.w	r0, [sp, #17]
   287c6:	4041      	eors	r1, r0
   287c8:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   287cc:	f3c3 2107 	ubfx	r1, r3, #8, #8
   287d0:	f89d 0012 	ldrb.w	r0, [sp, #18]
   287d4:	4041      	eors	r1, r0
   287d6:	f88d 1012 	strb.w	r1, [sp, #18]
   287da:	b2db      	uxtb	r3, r3
   287dc:	f89d 1013 	ldrb.w	r1, [sp, #19]
   287e0:	404b      	eors	r3, r1
   287e2:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   287e6:	6853      	ldr	r3, [r2, #4]
   287e8:	f89d 1014 	ldrb.w	r1, [sp, #20]
   287ec:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   287f0:	f88d 1014 	strb.w	r1, [sp, #20]
   287f4:	f3c3 4107 	ubfx	r1, r3, #16, #8
   287f8:	f89d 0015 	ldrb.w	r0, [sp, #21]
   287fc:	4041      	eors	r1, r0
   287fe:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   28802:	f3c3 2107 	ubfx	r1, r3, #8, #8
   28806:	f89d 0016 	ldrb.w	r0, [sp, #22]
   2880a:	4041      	eors	r1, r0
   2880c:	f88d 1016 	strb.w	r1, [sp, #22]
   28810:	b2db      	uxtb	r3, r3
   28812:	f89d 1017 	ldrb.w	r1, [sp, #23]
   28816:	404b      	eors	r3, r1
   28818:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2881c:	6893      	ldr	r3, [r2, #8]
   2881e:	f89d 1018 	ldrb.w	r1, [sp, #24]
   28822:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   28826:	f88d 1018 	strb.w	r1, [sp, #24]
   2882a:	f3c3 4107 	ubfx	r1, r3, #16, #8
   2882e:	f89d 0019 	ldrb.w	r0, [sp, #25]
   28832:	4041      	eors	r1, r0
   28834:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   28838:	f3c3 2107 	ubfx	r1, r3, #8, #8
   2883c:	f89d 001a 	ldrb.w	r0, [sp, #26]
   28840:	4041      	eors	r1, r0
   28842:	f88d 101a 	strb.w	r1, [sp, #26]
   28846:	b2db      	uxtb	r3, r3
   28848:	f89d 101b 	ldrb.w	r1, [sp, #27]
   2884c:	404b      	eors	r3, r1
   2884e:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   28852:	68d3      	ldr	r3, [r2, #12]
   28854:	f89d 201c 	ldrb.w	r2, [sp, #28]
   28858:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   2885c:	f88d 201c 	strb.w	r2, [sp, #28]
   28860:	f3c3 4207 	ubfx	r2, r3, #16, #8
   28864:	f89d 101d 	ldrb.w	r1, [sp, #29]
   28868:	404a      	eors	r2, r1
   2886a:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2886e:	f3c3 2207 	ubfx	r2, r3, #8, #8
   28872:	f89d 101e 	ldrb.w	r1, [sp, #30]
   28876:	404a      	eors	r2, r1
   28878:	f88d 201e 	strb.w	r2, [sp, #30]
   2887c:	b2db      	uxtb	r3, r3
   2887e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   28882:	4053      	eors	r3, r2
   28884:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
   28888:	2c08      	cmp	r4, #8
   2888a:	d80a      	bhi.n	288a2 <tc_aes_encrypt+0x596>
	for (i = 0; i < (Nb * Nk); ++i) {
   2888c:	2300      	movs	r3, #0
   2888e:	2b0f      	cmp	r3, #15
   28890:	f63f adc0 	bhi.w	28414 <tc_aes_encrypt+0x108>
		s[i] = sbox[s[i]];
   28894:	a904      	add	r1, sp, #16
   28896:	5cc8      	ldrb	r0, [r1, r3]
   28898:	4a6e      	ldr	r2, [pc, #440]	; (28a54 <tc_aes_encrypt+0x748>)
   2889a:	5c10      	ldrb	r0, [r2, r0]
   2889c:	54c8      	strb	r0, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   2889e:	3301      	adds	r3, #1
   288a0:	e7f5      	b.n	2888e <tc_aes_encrypt+0x582>
   288a2:	2300      	movs	r3, #0
   288a4:	e005      	b.n	288b2 <tc_aes_encrypt+0x5a6>
		s[i] = sbox[s[i]];
   288a6:	aa04      	add	r2, sp, #16
   288a8:	5cd1      	ldrb	r1, [r2, r3]
   288aa:	486a      	ldr	r0, [pc, #424]	; (28a54 <tc_aes_encrypt+0x748>)
   288ac:	5c41      	ldrb	r1, [r0, r1]
   288ae:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   288b0:	3301      	adds	r3, #1
   288b2:	2b0f      	cmp	r3, #15
   288b4:	d9f7      	bls.n	288a6 <tc_aes_encrypt+0x59a>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   288b6:	f89d 3010 	ldrb.w	r3, [sp, #16]
   288ba:	f88d 3000 	strb.w	r3, [sp]
   288be:	f89d 3015 	ldrb.w	r3, [sp, #21]
   288c2:	f88d 3001 	strb.w	r3, [sp, #1]
   288c6:	f89d 301a 	ldrb.w	r3, [sp, #26]
   288ca:	f88d 3002 	strb.w	r3, [sp, #2]
   288ce:	f89d 301f 	ldrb.w	r3, [sp, #31]
   288d2:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   288d6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   288da:	f88d 3004 	strb.w	r3, [sp, #4]
   288de:	f89d 3019 	ldrb.w	r3, [sp, #25]
   288e2:	f88d 3005 	strb.w	r3, [sp, #5]
   288e6:	f89d 301e 	ldrb.w	r3, [sp, #30]
   288ea:	f88d 3006 	strb.w	r3, [sp, #6]
   288ee:	f89d 3013 	ldrb.w	r3, [sp, #19]
   288f2:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   288f6:	f89d 3018 	ldrb.w	r3, [sp, #24]
   288fa:	f88d 3008 	strb.w	r3, [sp, #8]
   288fe:	f89d 301d 	ldrb.w	r3, [sp, #29]
   28902:	f88d 3009 	strb.w	r3, [sp, #9]
   28906:	f89d 3012 	ldrb.w	r3, [sp, #18]
   2890a:	f88d 300a 	strb.w	r3, [sp, #10]
   2890e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   28912:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   28916:	f89d 301c 	ldrb.w	r3, [sp, #28]
   2891a:	f88d 300c 	strb.w	r3, [sp, #12]
   2891e:	f89d 3011 	ldrb.w	r3, [sp, #17]
   28922:	f88d 300d 	strb.w	r3, [sp, #13]
   28926:	f89d 3016 	ldrb.w	r3, [sp, #22]
   2892a:	f88d 300e 	strb.w	r3, [sp, #14]
   2892e:	f89d 301b 	ldrb.w	r3, [sp, #27]
   28932:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   28936:	2310      	movs	r3, #16
   28938:	466a      	mov	r2, sp
   2893a:	4619      	mov	r1, r3
   2893c:	eb0d 0003 	add.w	r0, sp, r3
   28940:	f000 f88a 	bl	28a58 <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
   28944:	1c63      	adds	r3, r4, #1
   28946:	011a      	lsls	r2, r3, #4
   28948:	eb06 1303 	add.w	r3, r6, r3, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2894c:	58b2      	ldr	r2, [r6, r2]
   2894e:	f89d 1010 	ldrb.w	r1, [sp, #16]
   28952:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   28956:	f88d 1010 	strb.w	r1, [sp, #16]
   2895a:	f3c2 4107 	ubfx	r1, r2, #16, #8
   2895e:	f89d 0011 	ldrb.w	r0, [sp, #17]
   28962:	4041      	eors	r1, r0
   28964:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   28968:	f3c2 2107 	ubfx	r1, r2, #8, #8
   2896c:	f89d 0012 	ldrb.w	r0, [sp, #18]
   28970:	4041      	eors	r1, r0
   28972:	f88d 1012 	strb.w	r1, [sp, #18]
   28976:	b2d2      	uxtb	r2, r2
   28978:	f89d 1013 	ldrb.w	r1, [sp, #19]
   2897c:	404a      	eors	r2, r1
   2897e:	f88d 2013 	strb.w	r2, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   28982:	685a      	ldr	r2, [r3, #4]
   28984:	f89d 1014 	ldrb.w	r1, [sp, #20]
   28988:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   2898c:	f88d 1014 	strb.w	r1, [sp, #20]
   28990:	f3c2 4107 	ubfx	r1, r2, #16, #8
   28994:	f89d 0015 	ldrb.w	r0, [sp, #21]
   28998:	4041      	eors	r1, r0
   2899a:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2899e:	f3c2 2107 	ubfx	r1, r2, #8, #8
   289a2:	f89d 0016 	ldrb.w	r0, [sp, #22]
   289a6:	4041      	eors	r1, r0
   289a8:	f88d 1016 	strb.w	r1, [sp, #22]
   289ac:	b2d2      	uxtb	r2, r2
   289ae:	f89d 1017 	ldrb.w	r1, [sp, #23]
   289b2:	404a      	eors	r2, r1
   289b4:	f88d 2017 	strb.w	r2, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   289b8:	689a      	ldr	r2, [r3, #8]
   289ba:	f89d 1018 	ldrb.w	r1, [sp, #24]
   289be:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   289c2:	f88d 1018 	strb.w	r1, [sp, #24]
   289c6:	f3c2 4107 	ubfx	r1, r2, #16, #8
   289ca:	f89d 0019 	ldrb.w	r0, [sp, #25]
   289ce:	4041      	eors	r1, r0
   289d0:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   289d4:	f3c2 2107 	ubfx	r1, r2, #8, #8
   289d8:	f89d 001a 	ldrb.w	r0, [sp, #26]
   289dc:	4041      	eors	r1, r0
   289de:	f88d 101a 	strb.w	r1, [sp, #26]
   289e2:	b2d2      	uxtb	r2, r2
   289e4:	f89d 101b 	ldrb.w	r1, [sp, #27]
   289e8:	404a      	eors	r2, r1
   289ea:	f88d 201b 	strb.w	r2, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   289ee:	68db      	ldr	r3, [r3, #12]
   289f0:	f89d 201c 	ldrb.w	r2, [sp, #28]
   289f4:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   289f8:	f88d 201c 	strb.w	r2, [sp, #28]
   289fc:	f3c3 4207 	ubfx	r2, r3, #16, #8
   28a00:	f89d 101d 	ldrb.w	r1, [sp, #29]
   28a04:	404a      	eors	r2, r1
   28a06:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   28a0a:	f3c3 2207 	ubfx	r2, r3, #8, #8
   28a0e:	f89d 101e 	ldrb.w	r1, [sp, #30]
   28a12:	404a      	eors	r2, r1
   28a14:	f88d 201e 	strb.w	r2, [sp, #30]
   28a18:	b2db      	uxtb	r3, r3
   28a1a:	f89d 201f 	ldrb.w	r2, [sp, #31]
   28a1e:	4053      	eors	r3, r2
   28a20:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
   28a24:	2310      	movs	r3, #16
   28a26:	eb0d 0203 	add.w	r2, sp, r3
   28a2a:	4619      	mov	r1, r3
   28a2c:	4638      	mov	r0, r7
   28a2e:	f000 f813 	bl	28a58 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   28a32:	2210      	movs	r2, #16
   28a34:	2100      	movs	r1, #0
   28a36:	eb0d 0002 	add.w	r0, sp, r2
   28a3a:	f000 f81a 	bl	28a72 <_set>

	return TC_CRYPTO_SUCCESS;
   28a3e:	2001      	movs	r0, #1
}
   28a40:	b008      	add	sp, #32
   28a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   28a46:	2000      	movs	r0, #0
}
   28a48:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   28a4a:	2000      	movs	r0, #0
   28a4c:	e7f8      	b.n	28a40 <tc_aes_encrypt+0x734>
		return TC_CRYPTO_FAIL;
   28a4e:	2000      	movs	r0, #0
   28a50:	e7f6      	b.n	28a40 <tc_aes_encrypt+0x734>
   28a52:	bf00      	nop
   28a54:	000315c0 	.word	0x000315c0

00028a58 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   28a58:	428b      	cmp	r3, r1
   28a5a:	d901      	bls.n	28a60 <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
   28a5c:	2000      	movs	r0, #0
	}
}
   28a5e:	4770      	bx	lr
{
   28a60:	b538      	push	{r3, r4, r5, lr}
   28a62:	4615      	mov	r5, r2
   28a64:	461c      	mov	r4, r3
		(void)memcpy(to, from, from_len);
   28a66:	461a      	mov	r2, r3
   28a68:	4629      	mov	r1, r5
   28a6a:	f7ee f833 	bl	16ad4 <memcpy>
		return from_len;
   28a6e:	4620      	mov	r0, r4
}
   28a70:	bd38      	pop	{r3, r4, r5, pc}

00028a72 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   28a72:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
   28a74:	f7ee f853 	bl	16b1e <memset>
}
   28a78:	bd08      	pop	{r3, pc}

00028a7a <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   28a7a:	09c3      	lsrs	r3, r0, #7
   28a7c:	005a      	lsls	r2, r3, #1
   28a7e:	4413      	add	r3, r2
   28a80:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   28a84:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   28a88:	b2c0      	uxtb	r0, r0
   28a8a:	4770      	bx	lr

00028a8c <base64_encode>:
    return -1;
}

int
base64_encode(const void *data, int size, char *s, uint8_t should_pad)
{
   28a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28a8e:	4616      	mov	r6, r2
    int c;
    const unsigned char *q;
    char *last;
    int diff;

    p = s;
   28a90:	4615      	mov	r5, r2

    q = (const unsigned char *) data;
    last = NULL;
   28a92:	2400      	movs	r4, #0
    i = 0;
   28a94:	4622      	mov	r2, r4
    while (i < size) {
   28a96:	e019      	b.n	28acc <base64_encode+0x40>
            c += q[i];
        i++;
        c *= 256;
        if (i < size)
            c += q[i];
        i++;
   28a98:	3203      	adds	r2, #3
        p[0] = base64_chars[(c & 0x00fc0000) >> 18];
   28a9a:	f3c4 4c85 	ubfx	ip, r4, #18, #6
   28a9e:	4f1d      	ldr	r7, [pc, #116]	; (28b14 <base64_encode+0x88>)
   28aa0:	f817 c00c 	ldrb.w	ip, [r7, ip]
   28aa4:	f885 c000 	strb.w	ip, [r5]
        p[1] = base64_chars[(c & 0x0003f000) >> 12];
   28aa8:	f3c4 3c05 	ubfx	ip, r4, #12, #6
   28aac:	f817 c00c 	ldrb.w	ip, [r7, ip]
   28ab0:	f885 c001 	strb.w	ip, [r5, #1]
        p[2] = base64_chars[(c & 0x00000fc0) >> 6];
   28ab4:	f3c4 1c85 	ubfx	ip, r4, #6, #6
   28ab8:	f817 c00c 	ldrb.w	ip, [r7, ip]
   28abc:	f885 c002 	strb.w	ip, [r5, #2]
        p[3] = base64_chars[(c & 0x0000003f) >> 0];
   28ac0:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   28ac4:	5d3c      	ldrb	r4, [r7, r4]
   28ac6:	70ec      	strb	r4, [r5, #3]
        last = p;
   28ac8:	462c      	mov	r4, r5
        p += 4;
   28aca:	3504      	adds	r5, #4
    while (i < size) {
   28acc:	428a      	cmp	r2, r1
   28ace:	da0d      	bge.n	28aec <base64_encode+0x60>
        c = q[i++];
   28ad0:	1c57      	adds	r7, r2, #1
   28ad2:	5c84      	ldrb	r4, [r0, r2]
        c *= 256;
   28ad4:	0224      	lsls	r4, r4, #8
        if (i < size)
   28ad6:	42b9      	cmp	r1, r7
   28ad8:	dd01      	ble.n	28ade <base64_encode+0x52>
            c += q[i];
   28ada:	5dc7      	ldrb	r7, [r0, r7]
   28adc:	443c      	add	r4, r7
        i++;
   28ade:	1c97      	adds	r7, r2, #2
        c *= 256;
   28ae0:	0224      	lsls	r4, r4, #8
        if (i < size)
   28ae2:	42b9      	cmp	r1, r7
   28ae4:	ddd8      	ble.n	28a98 <base64_encode+0xc>
            c += q[i];
   28ae6:	5dc7      	ldrb	r7, [r0, r7]
   28ae8:	443c      	add	r4, r7
   28aea:	e7d5      	b.n	28a98 <base64_encode+0xc>
    }

    if (last) {
   28aec:	b134      	cbz	r4, 28afc <base64_encode+0x70>
        diff = i - size;
   28aee:	1a52      	subs	r2, r2, r1
        if (diff > 0) {
   28af0:	2a00      	cmp	r2, #0
   28af2:	dd03      	ble.n	28afc <base64_encode+0x70>
            if (should_pad) {
   28af4:	b933      	cbnz	r3, 28b04 <base64_encode+0x78>
                memset(last + (4 - diff), '=', diff);
            } else {
                p = last + (4 - diff);
   28af6:	f1c2 0304 	rsb	r3, r2, #4
   28afa:	18e5      	adds	r5, r4, r3
            }
        }
    }

    *p = 0;
   28afc:	2300      	movs	r3, #0
   28afe:	702b      	strb	r3, [r5, #0]

    return (p - s);
}
   28b00:	1ba8      	subs	r0, r5, r6
   28b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                memset(last + (4 - diff), '=', diff);
   28b04:	f1c2 0004 	rsb	r0, r2, #4
   28b08:	213d      	movs	r1, #61	; 0x3d
   28b0a:	4420      	add	r0, r4
   28b0c:	f7ee f807 	bl	16b1e <memset>
   28b10:	e7f4      	b.n	28afc <base64_encode+0x70>
   28b12:	bf00      	nop
   28b14:	000316c0 	.word	0x000316c0

00028b18 <cbuf_buf_reader_get8>:

static uint8_t
cbuf_buf_reader_get8(struct cbor_decoder_reader *d, int offset)
{
    struct cbor_buf_reader *cb = (struct cbor_buf_reader *) d;
    return cb->buffer[offset];
   28b18:	69c3      	ldr	r3, [r0, #28]
}
   28b1a:	5c58      	ldrb	r0, [r3, r1]
   28b1c:	4770      	bx	lr

00028b1e <cbor_buf_reader_cpy>:
}

static uintptr_t
cbor_buf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int src_offset,
                    size_t len)
{
   28b1e:	b510      	push	{r4, lr}
   28b20:	4604      	mov	r4, r0
   28b22:	4608      	mov	r0, r1
   28b24:	4611      	mov	r1, r2
    struct cbor_buf_reader *cb = (struct cbor_buf_reader *) d;
    return (uintptr_t) memcpy(dst, cb->buffer + src_offset, len);
   28b26:	69e4      	ldr	r4, [r4, #28]
   28b28:	461a      	mov	r2, r3
   28b2a:	4421      	add	r1, r4
   28b2c:	f7ed ffd2 	bl	16ad4 <memcpy>
}
   28b30:	bd10      	pop	{r4, pc}

00028b32 <cbor_buf_reader_cmp>:
{
   28b32:	b510      	push	{r4, lr}
   28b34:	4604      	mov	r4, r0
   28b36:	4608      	mov	r0, r1
   28b38:	4611      	mov	r1, r2
    return memcmp(dst, cb->buffer + src_offset, len) == 0;
   28b3a:	69e4      	ldr	r4, [r4, #28]
   28b3c:	461a      	mov	r2, r3
   28b3e:	4421      	add	r1, r4
   28b40:	f7ed ffa4 	bl	16a8c <memcmp>
}
   28b44:	fab0 f080 	clz	r0, r0
   28b48:	0940      	lsrs	r0, r0, #5
   28b4a:	bd10      	pop	{r4, pc}

00028b4c <cbuf_buf_reader_get64>:
{
   28b4c:	b410      	push	{r4}
   28b4e:	b083      	sub	sp, #12
    return get64(cb->buffer + offset);
   28b50:	69c2      	ldr	r2, [r0, #28]
   28b52:	1854      	adds	r4, r2, r1
}

static inline uint64_t get64(const uint8_t *ptr)
{
    uint64_t result;
    memcpy(&result, ptr, sizeof(result));
   28b54:	466b      	mov	r3, sp
   28b56:	5850      	ldr	r0, [r2, r1]
   28b58:	6861      	ldr	r1, [r4, #4]
   28b5a:	c303      	stmia	r3!, {r0, r1}
}
   28b5c:	ba08      	rev	r0, r1
   28b5e:	9900      	ldr	r1, [sp, #0]
   28b60:	ba09      	rev	r1, r1
   28b62:	b003      	add	sp, #12
   28b64:	bc10      	pop	{r4}
   28b66:	4770      	bx	lr

00028b68 <cbuf_buf_reader_get32>:
    val = get32(cb->buffer + offset);
   28b68:	69c3      	ldr	r3, [r0, #28]
    return cbor_ntohl(result);
   28b6a:	5858      	ldr	r0, [r3, r1]
}
   28b6c:	ba00      	rev	r0, r0
   28b6e:	4770      	bx	lr

00028b70 <cbuf_buf_reader_get16>:
    return get16(cb->buffer + offset);
   28b70:	69c3      	ldr	r3, [r0, #28]
    return cbor_ntohs(result);
   28b72:	5a58      	ldrh	r0, [r3, r1]
   28b74:	ba40      	rev16	r0, r0
}
   28b76:	b280      	uxth	r0, r0
   28b78:	4770      	bx	lr
	...

00028b7c <cbor_buf_reader_init>:

void
cbor_buf_reader_init(struct cbor_buf_reader *cb, const uint8_t *buffer,
                     size_t data)
{
    cb->buffer = buffer;
   28b7c:	61c1      	str	r1, [r0, #28]
    cb->r.get8 = &cbuf_buf_reader_get8;
   28b7e:	4b07      	ldr	r3, [pc, #28]	; (28b9c <cbor_buf_reader_init+0x20>)
   28b80:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbuf_buf_reader_get16;
   28b82:	4b07      	ldr	r3, [pc, #28]	; (28ba0 <cbor_buf_reader_init+0x24>)
   28b84:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbuf_buf_reader_get32;
   28b86:	4b07      	ldr	r3, [pc, #28]	; (28ba4 <cbor_buf_reader_init+0x28>)
   28b88:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbuf_buf_reader_get64;
   28b8a:	4b07      	ldr	r3, [pc, #28]	; (28ba8 <cbor_buf_reader_init+0x2c>)
   28b8c:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_buf_reader_cmp;
   28b8e:	4b07      	ldr	r3, [pc, #28]	; (28bac <cbor_buf_reader_init+0x30>)
   28b90:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_buf_reader_cpy;
   28b92:	4b07      	ldr	r3, [pc, #28]	; (28bb0 <cbor_buf_reader_init+0x34>)
   28b94:	6143      	str	r3, [r0, #20]
    cb->r.message_size = data;
   28b96:	6182      	str	r2, [r0, #24]
}
   28b98:	4770      	bx	lr
   28b9a:	bf00      	nop
   28b9c:	00028b19 	.word	0x00028b19
   28ba0:	00028b71 	.word	0x00028b71
   28ba4:	00028b69 	.word	0x00028b69
   28ba8:	00028b4d 	.word	0x00028b4d
   28bac:	00028b33 	.word	0x00028b33
   28bb0:	00028b1f 	.word	0x00028b1f

00028bb4 <cbor_buf_writer>:
    return (remaining < 0);
}

int
cbor_buf_writer(struct cbor_encoder_writer *arg, const char *data, int len)
{
   28bb4:	b538      	push	{r3, r4, r5, lr}
   28bb6:	4604      	mov	r4, r0
    ptrdiff_t remaining = (ptrdiff_t)cb->end;
   28bb8:	68c3      	ldr	r3, [r0, #12]
    remaining -= (ptrdiff_t)cb->ptr;
   28bba:	6880      	ldr	r0, [r0, #8]
   28bbc:	1a1b      	subs	r3, r3, r0
    remaining -= (ptrdiff_t)len;
   28bbe:	1a9b      	subs	r3, r3, r2
    struct cbor_buf_writer *cb = (struct cbor_buf_writer *) arg;

    if (would_overflow(cb, len)) {
   28bc0:	2b00      	cmp	r3, #0
   28bc2:	db0a      	blt.n	28bda <cbor_buf_writer+0x26>
   28bc4:	4615      	mov	r5, r2
        return CborErrorOutOfMemory;
    }

    memcpy(cb->ptr, data, len);
   28bc6:	f7ed ff85 	bl	16ad4 <memcpy>
    cb->ptr += len;
   28bca:	68a3      	ldr	r3, [r4, #8]
   28bcc:	442b      	add	r3, r5
   28bce:	60a3      	str	r3, [r4, #8]
    cb->enc.bytes_written += len;
   28bd0:	6862      	ldr	r2, [r4, #4]
   28bd2:	442a      	add	r2, r5
   28bd4:	6062      	str	r2, [r4, #4]
    return CborNoError;
   28bd6:	2000      	movs	r0, #0
}
   28bd8:	bd38      	pop	{r3, r4, r5, pc}
        return CborErrorOutOfMemory;
   28bda:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   28bde:	e7fb      	b.n	28bd8 <cbor_buf_writer+0x24>

00028be0 <cbor_buf_writer_init>:

void
cbor_buf_writer_init(struct cbor_buf_writer *cb, uint8_t *buffer, size_t size)
{
    cb->ptr = buffer;
   28be0:	6081      	str	r1, [r0, #8]
    cb->end = buffer + size;
   28be2:	4411      	add	r1, r2
   28be4:	60c1      	str	r1, [r0, #12]
    cb->enc.bytes_written = 0;
   28be6:	2300      	movs	r3, #0
   28be8:	6043      	str	r3, [r0, #4]
    cb->enc.write = cbor_buf_writer;
   28bea:	4b01      	ldr	r3, [pc, #4]	; (28bf0 <cbor_buf_writer_init+0x10>)
   28bec:	6003      	str	r3, [r0, #0]
}
   28bee:	4770      	bx	lr
   28bf0:	00028bb5 	.word	0x00028bb5

00028bf4 <cbor_buf_writer_buffer_size>:

size_t
cbor_buf_writer_buffer_size(struct cbor_buf_writer *cb, const uint8_t *buffer)
{
    return (size_t)(cb->ptr - buffer);
   28bf4:	6880      	ldr	r0, [r0, #8]
}
   28bf6:	1a40      	subs	r0, r0, r1
   28bf8:	4770      	bx	lr

00028bfa <cbor_mbuf_reader_cpy>:
}

static uintptr_t
cbor_mbuf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int offset,
                     size_t len)
{
   28bfa:	b538      	push	{r3, r4, r5, lr}
   28bfc:	4614      	mov	r4, r2
   28bfe:	461a      	mov	r2, r3
    int rc;
    struct cbor_mbuf_reader *cb = (struct cbor_mbuf_reader *) d;

    rc = os_mbuf_copydata(cb->m, offset + cb->init_off, len, dst);
   28c00:	69c5      	ldr	r5, [r0, #28]
   28c02:	460b      	mov	r3, r1
   28c04:	1929      	adds	r1, r5, r4
   28c06:	6a00      	ldr	r0, [r0, #32]
   28c08:	f7ec fdde 	bl	157c8 <os_mbuf_copydata>
    if (rc == 0) {
   28c0c:	b108      	cbz	r0, 28c12 <cbor_mbuf_reader_cpy+0x18>
        return true;
    }
    return false;
   28c0e:	2000      	movs	r0, #0
}
   28c10:	bd38      	pop	{r3, r4, r5, pc}
        return true;
   28c12:	2001      	movs	r0, #1
   28c14:	e7fc      	b.n	28c10 <cbor_mbuf_reader_cpy+0x16>

00028c16 <cbor_mbuf_reader_get8>:
{
   28c16:	b510      	push	{r4, lr}
   28c18:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   28c1a:	69c4      	ldr	r4, [r0, #28]
   28c1c:	f10d 0307 	add.w	r3, sp, #7
   28c20:	2201      	movs	r2, #1
   28c22:	4421      	add	r1, r4
   28c24:	6a00      	ldr	r0, [r0, #32]
   28c26:	f7ec fdcf 	bl	157c8 <os_mbuf_copydata>
}
   28c2a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   28c2e:	b002      	add	sp, #8
   28c30:	bd10      	pop	{r4, pc}

00028c32 <cbor_mbuf_reader_cmp>:
{
   28c32:	b538      	push	{r3, r4, r5, lr}
   28c34:	4614      	mov	r4, r2
    return os_mbuf_cmpf(cb->m, offset + cb->init_off, buf, len) == 0;
   28c36:	69c5      	ldr	r5, [r0, #28]
   28c38:	460a      	mov	r2, r1
   28c3a:	1929      	adds	r1, r5, r4
   28c3c:	6a00      	ldr	r0, [r0, #32]
   28c3e:	f7ec fe41 	bl	158c4 <os_mbuf_cmpf>
}
   28c42:	fab0 f080 	clz	r0, r0
   28c46:	0940      	lsrs	r0, r0, #5
   28c48:	bd38      	pop	{r3, r4, r5, pc}

00028c4a <cbor_mbuf_reader_get64>:
{
   28c4a:	b510      	push	{r4, lr}
   28c4c:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   28c4e:	69c4      	ldr	r4, [r0, #28]
   28c50:	466b      	mov	r3, sp
   28c52:	2208      	movs	r2, #8
   28c54:	4421      	add	r1, r4
   28c56:	6a00      	ldr	r0, [r0, #32]
   28c58:	f7ec fdb6 	bl	157c8 <os_mbuf_copydata>
}
   28c5c:	9801      	ldr	r0, [sp, #4]
   28c5e:	ba00      	rev	r0, r0
   28c60:	9900      	ldr	r1, [sp, #0]
   28c62:	ba09      	rev	r1, r1
   28c64:	b002      	add	sp, #8
   28c66:	bd10      	pop	{r4, pc}

00028c68 <cbor_mbuf_reader_get32>:
{
   28c68:	b510      	push	{r4, lr}
   28c6a:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   28c6c:	69c4      	ldr	r4, [r0, #28]
   28c6e:	ab01      	add	r3, sp, #4
   28c70:	2204      	movs	r2, #4
   28c72:	4421      	add	r1, r4
   28c74:	6a00      	ldr	r0, [r0, #32]
   28c76:	f7ec fda7 	bl	157c8 <os_mbuf_copydata>
}
   28c7a:	9801      	ldr	r0, [sp, #4]
   28c7c:	ba00      	rev	r0, r0
   28c7e:	b002      	add	sp, #8
   28c80:	bd10      	pop	{r4, pc}

00028c82 <cbor_mbuf_reader_get16>:
{
   28c82:	b510      	push	{r4, lr}
   28c84:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   28c86:	69c4      	ldr	r4, [r0, #28]
   28c88:	f10d 0306 	add.w	r3, sp, #6
   28c8c:	2202      	movs	r2, #2
   28c8e:	4421      	add	r1, r4
   28c90:	6a00      	ldr	r0, [r0, #32]
   28c92:	f7ec fd99 	bl	157c8 <os_mbuf_copydata>
    return cbor_ntohs(val);
   28c96:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   28c9a:	ba40      	rev16	r0, r0
}
   28c9c:	b280      	uxth	r0, r0
   28c9e:	b002      	add	sp, #8
   28ca0:	bd10      	pop	{r4, pc}
	...

00028ca4 <cbor_mbuf_reader_init>:

void
cbor_mbuf_reader_init(struct cbor_mbuf_reader *cb, struct os_mbuf *m,
                      int initial_offset)
{
   28ca4:	b508      	push	{r3, lr}
    struct os_mbuf_pkthdr *hdr;

    cb->r.get8 = &cbor_mbuf_reader_get8;
   28ca6:	4b0f      	ldr	r3, [pc, #60]	; (28ce4 <cbor_mbuf_reader_init+0x40>)
   28ca8:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbor_mbuf_reader_get16;
   28caa:	4b0f      	ldr	r3, [pc, #60]	; (28ce8 <cbor_mbuf_reader_init+0x44>)
   28cac:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbor_mbuf_reader_get32;
   28cae:	4b0f      	ldr	r3, [pc, #60]	; (28cec <cbor_mbuf_reader_init+0x48>)
   28cb0:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbor_mbuf_reader_get64;
   28cb2:	4b0f      	ldr	r3, [pc, #60]	; (28cf0 <cbor_mbuf_reader_init+0x4c>)
   28cb4:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_mbuf_reader_cmp;
   28cb6:	4b0f      	ldr	r3, [pc, #60]	; (28cf4 <cbor_mbuf_reader_init+0x50>)
   28cb8:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_mbuf_reader_cpy;
   28cba:	4b0f      	ldr	r3, [pc, #60]	; (28cf8 <cbor_mbuf_reader_init+0x54>)
   28cbc:	6143      	str	r3, [r0, #20]

    assert(OS_MBUF_IS_PKTHDR(m));
   28cbe:	794b      	ldrb	r3, [r1, #5]
   28cc0:	2b07      	cmp	r3, #7
   28cc2:	d905      	bls.n	28cd0 <cbor_mbuf_reader_init+0x2c>
    hdr = OS_MBUF_PKTHDR(m);
    cb->m = m;
   28cc4:	6201      	str	r1, [r0, #32]
    cb->init_off = initial_offset;
   28cc6:	61c2      	str	r2, [r0, #28]
    cb->r.message_size = hdr->omp_len - initial_offset;
   28cc8:	8a0b      	ldrh	r3, [r1, #16]
   28cca:	1a9a      	subs	r2, r3, r2
   28ccc:	6182      	str	r2, [r0, #24]
}
   28cce:	bd08      	pop	{r3, pc}
    assert(OS_MBUF_IS_PKTHDR(m));
   28cd0:	f7eb fcc8 	bl	14664 <hal_debugger_connected>
   28cd4:	b100      	cbz	r0, 28cd8 <cbor_mbuf_reader_init+0x34>
   28cd6:	be01      	bkpt	0x0001
   28cd8:	2300      	movs	r3, #0
   28cda:	461a      	mov	r2, r3
   28cdc:	4619      	mov	r1, r3
   28cde:	4618      	mov	r0, r3
   28ce0:	f7ec f860 	bl	14da4 <__assert_func>
   28ce4:	00028c17 	.word	0x00028c17
   28ce8:	00028c83 	.word	0x00028c83
   28cec:	00028c69 	.word	0x00028c69
   28cf0:	00028c4b 	.word	0x00028c4b
   28cf4:	00028c33 	.word	0x00028c33
   28cf8:	00028bfb 	.word	0x00028bfb

00028cfc <cbor_mbuf_writer>:
#include <tinycbor/cbor.h>
#include <tinycbor/cbor_mbuf_writer.h>

int
cbor_mbuf_writer(struct cbor_encoder_writer *arg, const char *data, int len)
{
   28cfc:	b538      	push	{r3, r4, r5, lr}
   28cfe:	4604      	mov	r4, r0
   28d00:	4615      	mov	r5, r2
    int rc;
    struct cbor_mbuf_writer *cb = (struct cbor_mbuf_writer *) arg;

    rc = os_mbuf_append(cb->m, data, len);
   28d02:	b292      	uxth	r2, r2
   28d04:	6880      	ldr	r0, [r0, #8]
   28d06:	f7ec fcce 	bl	156a6 <os_mbuf_append>
    if (rc) {
   28d0a:	b918      	cbnz	r0, 28d14 <cbor_mbuf_writer+0x18>
        return CborErrorOutOfMemory;
    }
    cb->enc.bytes_written += len;
   28d0c:	6862      	ldr	r2, [r4, #4]
   28d0e:	442a      	add	r2, r5
   28d10:	6062      	str	r2, [r4, #4]
    return CborNoError;
}
   28d12:	bd38      	pop	{r3, r4, r5, pc}
        return CborErrorOutOfMemory;
   28d14:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   28d18:	e7fb      	b.n	28d12 <cbor_mbuf_writer+0x16>
	...

00028d1c <cbor_mbuf_writer_init>:


void
cbor_mbuf_writer_init(struct cbor_mbuf_writer *cb, struct os_mbuf *m)
{
    cb->m = m;
   28d1c:	6081      	str	r1, [r0, #8]
    cb->enc.bytes_written = 0;
   28d1e:	2300      	movs	r3, #0
   28d20:	6043      	str	r3, [r0, #4]
    cb->enc.write = &cbor_mbuf_writer;
   28d22:	4b01      	ldr	r3, [pc, #4]	; (28d28 <cbor_mbuf_writer_init+0xc>)
   28d24:	6003      	str	r3, [r0, #0]
}
   28d26:	4770      	bx	lr
   28d28:	00028cfd 	.word	0x00028cfd

00028d2c <create_container>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static CborError create_container(CborEncoder *encoder, CborEncoder *container, size_t length, uint8_t shiftedMajorType)
{
   28d2c:	b5d0      	push	{r4, r6, r7, lr}
   28d2e:	b084      	sub	sp, #16
   28d30:	460c      	mov	r4, r1
    CborError err;
    container->writer = encoder->writer;
   28d32:	6801      	ldr	r1, [r0, #0]
   28d34:	6021      	str	r1, [r4, #0]
    ++encoder->added;
   28d36:	6881      	ldr	r1, [r0, #8]
   28d38:	3101      	adds	r1, #1
   28d3a:	6081      	str	r1, [r0, #8]
    container->added = 0;
   28d3c:	2100      	movs	r1, #0
   28d3e:	60a1      	str	r1, [r4, #8]

    cbor_static_assert(((MapType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == CborIteratorFlag_ContainerIsMap);
    cbor_static_assert(((ArrayType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == 0);
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;
   28d40:	f003 0120 	and.w	r1, r3, #32
   28d44:	60e1      	str	r1, [r4, #12]

    if (length == CborIndefiniteLength) {
   28d46:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   28d4a:	d10d      	bne.n	28d68 <create_container+0x3c>
        container->flags |= CborIteratorFlag_UnknownLength;
   28d4c:	f041 0104 	orr.w	r1, r1, #4
   28d50:	60e1      	str	r1, [r4, #12]
        err = append_byte_to_buffer(container, shiftedMajorType + IndefiniteLength);
   28d52:	331f      	adds	r3, #31
   28d54:	f88d 3000 	strb.w	r3, [sp]
    return encoder->writer->write(encoder->writer, data, len);
   28d58:	6820      	ldr	r0, [r4, #0]
   28d5a:	6803      	ldr	r3, [r0, #0]
   28d5c:	2201      	movs	r2, #1
   28d5e:	4669      	mov	r1, sp
   28d60:	4798      	blx	r3
    }
    if (err && !isOomError(err))
        return err;

    return CborNoError;
}
   28d62:	2000      	movs	r0, #0
   28d64:	b004      	add	sp, #16
   28d66:	bdd0      	pop	{r4, r6, r7, pc}
        err = encode_number_no_update(container, length, shiftedMajorType);
   28d68:	4616      	mov	r6, r2
   28d6a:	2700      	movs	r7, #0
    v = cbor_htonll(v);
   28d6c:	ba11      	rev	r1, r2
   28d6e:	2000      	movs	r0, #0
    memcpy(where, &v, sizeof(v));
   28d70:	9002      	str	r0, [sp, #8]
   28d72:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   28d74:	2a17      	cmp	r2, #23
   28d76:	d80b      	bhi.n	28d90 <create_container+0x64>
        *bufstart += shiftedMajorType;
   28d78:	eb03 6311 	add.w	r3, r3, r1, lsr #24
   28d7c:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   28d80:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   28d84:	6820      	ldr	r0, [r4, #0]
   28d86:	6803      	ldr	r3, [r0, #0]
   28d88:	aa04      	add	r2, sp, #16
   28d8a:	1a52      	subs	r2, r2, r1
   28d8c:	4798      	blx	r3
    return append_to_buffer(encoder, bufstart, bufend - bufstart);
   28d8e:	e7e8      	b.n	28d62 <create_container+0x36>
        if (ui > 0xffU)
   28d90:	2f00      	cmp	r7, #0
   28d92:	bf08      	it	eq
   28d94:	f5b2 7f80 	cmpeq.w	r2, #256	; 0x100
   28d98:	d210      	bcs.n	28dbc <create_container+0x90>
        unsigned more = 0;
   28d9a:	2200      	movs	r2, #0
        if (ui > 0xffffU)
   28d9c:	2f00      	cmp	r7, #0
   28d9e:	bf08      	it	eq
   28da0:	f5b6 3f80 	cmpeq.w	r6, #65536	; 0x10000
   28da4:	d300      	bcc.n	28da8 <create_container+0x7c>
            ++more;
   28da6:	3201      	adds	r2, #1
        bufstart -= (size_t)1 << more;
   28da8:	2101      	movs	r1, #1
   28daa:	fa01 f002 	lsl.w	r0, r1, r2
   28dae:	f10d 010f 	add.w	r1, sp, #15
   28db2:	1a09      	subs	r1, r1, r0
        *bufstart = shiftedMajorType + Value8Bit + more;
   28db4:	4413      	add	r3, r2
   28db6:	3318      	adds	r3, #24
   28db8:	700b      	strb	r3, [r1, #0]
   28dba:	e7e3      	b.n	28d84 <create_container+0x58>
            ++more;
   28dbc:	2201      	movs	r2, #1
   28dbe:	e7ed      	b.n	28d9c <create_container+0x70>

00028dc0 <encode_string>:
{
   28dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   28dc2:	b085      	sub	sp, #20
   28dc4:	4605      	mov	r5, r0
   28dc6:	460c      	mov	r4, r1
   28dc8:	461e      	mov	r6, r3
    ++encoder->added;
   28dca:	68ab      	ldr	r3, [r5, #8]
   28dcc:	3301      	adds	r3, #1
   28dce:	60ab      	str	r3, [r5, #8]
    v = cbor_htonll(v);
   28dd0:	ba23      	rev	r3, r4
   28dd2:	2700      	movs	r7, #0
    memcpy(where, &v, sizeof(v));
   28dd4:	9702      	str	r7, [sp, #8]
   28dd6:	9303      	str	r3, [sp, #12]
    if (ui < Value8Bit) {
   28dd8:	2c17      	cmp	r4, #23
   28dda:	d811      	bhi.n	28e00 <encode_string+0x40>
        *bufstart += shiftedMajorType;
   28ddc:	eb02 6213 	add.w	r2, r2, r3, lsr #24
   28de0:	f88d 200f 	strb.w	r2, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   28de4:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   28de8:	6828      	ldr	r0, [r5, #0]
   28dea:	6803      	ldr	r3, [r0, #0]
   28dec:	aa04      	add	r2, sp, #16
   28dee:	1a52      	subs	r2, r2, r1
   28df0:	4798      	blx	r3
   28df2:	6828      	ldr	r0, [r5, #0]
   28df4:	6803      	ldr	r3, [r0, #0]
   28df6:	4622      	mov	r2, r4
   28df8:	4631      	mov	r1, r6
   28dfa:	4798      	blx	r3
}
   28dfc:	b005      	add	sp, #20
   28dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28e00:	4620      	mov	r0, r4
   28e02:	2100      	movs	r1, #0
        if (ui > 0xffU)
   28e04:	2900      	cmp	r1, #0
   28e06:	bf08      	it	eq
   28e08:	f5b4 7f80 	cmpeq.w	r4, #256	; 0x100
   28e0c:	d210      	bcs.n	28e30 <encode_string+0x70>
        unsigned more = 0;
   28e0e:	2300      	movs	r3, #0
        if (ui > 0xffffU)
   28e10:	2900      	cmp	r1, #0
   28e12:	bf08      	it	eq
   28e14:	f5b0 3f80 	cmpeq.w	r0, #65536	; 0x10000
   28e18:	d300      	bcc.n	28e1c <encode_string+0x5c>
            ++more;
   28e1a:	3301      	adds	r3, #1
        bufstart -= (size_t)1 << more;
   28e1c:	2101      	movs	r1, #1
   28e1e:	fa01 f003 	lsl.w	r0, r1, r3
   28e22:	f10d 010f 	add.w	r1, sp, #15
   28e26:	1a09      	subs	r1, r1, r0
        *bufstart = shiftedMajorType + Value8Bit + more;
   28e28:	441a      	add	r2, r3
   28e2a:	3218      	adds	r2, #24
   28e2c:	700a      	strb	r2, [r1, #0]
   28e2e:	e7db      	b.n	28de8 <encode_string+0x28>
            ++more;
   28e30:	2301      	movs	r3, #1
   28e32:	e7ed      	b.n	28e10 <encode_string+0x50>

00028e34 <cbor_encoder_init>:
    encoder->writer = writer;
   28e34:	6001      	str	r1, [r0, #0]
    encoder->added = 0;
   28e36:	2300      	movs	r3, #0
   28e38:	6083      	str	r3, [r0, #8]
    encoder->flags = flags;
   28e3a:	60c2      	str	r2, [r0, #12]
}
   28e3c:	4770      	bx	lr

00028e3e <cbor_encode_uint>:
{
   28e3e:	b530      	push	{r4, r5, lr}
   28e40:	b085      	sub	sp, #20
   28e42:	4614      	mov	r4, r2
   28e44:	461d      	mov	r5, r3
    ++encoder->added;
   28e46:	6883      	ldr	r3, [r0, #8]
   28e48:	3301      	adds	r3, #1
   28e4a:	6083      	str	r3, [r0, #8]
    v = cbor_htonll(v);
   28e4c:	ba13      	rev	r3, r2
   28e4e:	ba2a      	rev	r2, r5
    memcpy(where, &v, sizeof(v));
   28e50:	9202      	str	r2, [sp, #8]
   28e52:	9303      	str	r3, [sp, #12]
    if (ui < Value8Bit) {
   28e54:	2d00      	cmp	r5, #0
   28e56:	bf08      	it	eq
   28e58:	2c18      	cmpeq	r4, #24
   28e5a:	d20c      	bcs.n	28e76 <cbor_encode_uint+0x38>
        *bufstart += shiftedMajorType;
   28e5c:	f3c3 6307 	ubfx	r3, r3, #24, #8
   28e60:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   28e64:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   28e68:	6800      	ldr	r0, [r0, #0]
   28e6a:	6803      	ldr	r3, [r0, #0]
   28e6c:	aa04      	add	r2, sp, #16
   28e6e:	1a52      	subs	r2, r2, r1
   28e70:	4798      	blx	r3
}
   28e72:	b005      	add	sp, #20
   28e74:	bd30      	pop	{r4, r5, pc}
        if (ui > 0xffU)
   28e76:	2d00      	cmp	r5, #0
   28e78:	bf08      	it	eq
   28e7a:	f5b4 7f80 	cmpeq.w	r4, #256	; 0x100
   28e7e:	d214      	bcs.n	28eaa <cbor_encode_uint+0x6c>
        unsigned more = 0;
   28e80:	2300      	movs	r3, #0
        if (ui > 0xffffU)
   28e82:	2d00      	cmp	r5, #0
   28e84:	bf08      	it	eq
   28e86:	f5b4 3f80 	cmpeq.w	r4, #65536	; 0x10000
   28e8a:	d300      	bcc.n	28e8e <cbor_encode_uint+0x50>
            ++more;
   28e8c:	3301      	adds	r3, #1
        if (ui > 0xffffffffU)
   28e8e:	2d01      	cmp	r5, #1
   28e90:	bf08      	it	eq
   28e92:	2c00      	cmpeq	r4, #0
   28e94:	d300      	bcc.n	28e98 <cbor_encode_uint+0x5a>
            ++more;
   28e96:	3301      	adds	r3, #1
        bufstart -= (size_t)1 << more;
   28e98:	2101      	movs	r1, #1
   28e9a:	fa01 f203 	lsl.w	r2, r1, r3
   28e9e:	f10d 010f 	add.w	r1, sp, #15
   28ea2:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   28ea4:	3318      	adds	r3, #24
   28ea6:	700b      	strb	r3, [r1, #0]
   28ea8:	e7de      	b.n	28e68 <cbor_encode_uint+0x2a>
            ++more;
   28eaa:	2301      	movs	r3, #1
   28eac:	e7e9      	b.n	28e82 <cbor_encode_uint+0x44>

00028eae <cbor_encode_int>:
{
   28eae:	b570      	push	{r4, r5, r6, lr}
   28eb0:	b084      	sub	sp, #16
    uint64_t ui = value >> 63;              /* extend sign to whole length */
   28eb2:	17d9      	asrs	r1, r3, #31
    uint8_t majorType = ui & 0x20;          /* extract major type */
   28eb4:	b2ce      	uxtb	r6, r1
   28eb6:	f006 0620 	and.w	r6, r6, #32
    ui ^= value;                            /* complement negatives */
   28eba:	ea82 0401 	eor.w	r4, r2, r1
   28ebe:	ea83 0501 	eor.w	r5, r3, r1
    ++encoder->added;
   28ec2:	6883      	ldr	r3, [r0, #8]
   28ec4:	3301      	adds	r3, #1
   28ec6:	6083      	str	r3, [r0, #8]
    v = cbor_htonll(v);
   28ec8:	ba23      	rev	r3, r4
   28eca:	ba2a      	rev	r2, r5
    memcpy(where, &v, sizeof(v));
   28ecc:	9202      	str	r2, [sp, #8]
   28ece:	9303      	str	r3, [sp, #12]
    if (ui < Value8Bit) {
   28ed0:	2d00      	cmp	r5, #0
   28ed2:	bf08      	it	eq
   28ed4:	2c18      	cmpeq	r4, #24
   28ed6:	d20c      	bcs.n	28ef2 <cbor_encode_int+0x44>
        *bufstart += shiftedMajorType;
   28ed8:	eb06 6613 	add.w	r6, r6, r3, lsr #24
   28edc:	f88d 600f 	strb.w	r6, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   28ee0:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   28ee4:	6800      	ldr	r0, [r0, #0]
   28ee6:	6803      	ldr	r3, [r0, #0]
   28ee8:	aa04      	add	r2, sp, #16
   28eea:	1a52      	subs	r2, r2, r1
   28eec:	4798      	blx	r3
}
   28eee:	b004      	add	sp, #16
   28ef0:	bd70      	pop	{r4, r5, r6, pc}
        if (ui > 0xffU)
   28ef2:	2d00      	cmp	r5, #0
   28ef4:	bf08      	it	eq
   28ef6:	f5b4 7f80 	cmpeq.w	r4, #256	; 0x100
   28efa:	d215      	bcs.n	28f28 <cbor_encode_int+0x7a>
        unsigned more = 0;
   28efc:	2300      	movs	r3, #0
        if (ui > 0xffffU)
   28efe:	2d00      	cmp	r5, #0
   28f00:	bf08      	it	eq
   28f02:	f5b4 3f80 	cmpeq.w	r4, #65536	; 0x10000
   28f06:	d300      	bcc.n	28f0a <cbor_encode_int+0x5c>
            ++more;
   28f08:	3301      	adds	r3, #1
        if (ui > 0xffffffffU)
   28f0a:	2d01      	cmp	r5, #1
   28f0c:	bf08      	it	eq
   28f0e:	2c00      	cmpeq	r4, #0
   28f10:	d300      	bcc.n	28f14 <cbor_encode_int+0x66>
            ++more;
   28f12:	3301      	adds	r3, #1
        bufstart -= (size_t)1 << more;
   28f14:	2101      	movs	r1, #1
   28f16:	fa01 f203 	lsl.w	r2, r1, r3
   28f1a:	f10d 010f 	add.w	r1, sp, #15
   28f1e:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   28f20:	441e      	add	r6, r3
   28f22:	3618      	adds	r6, #24
   28f24:	700e      	strb	r6, [r1, #0]
   28f26:	e7dd      	b.n	28ee4 <cbor_encode_int+0x36>
            ++more;
   28f28:	2301      	movs	r3, #1
   28f2a:	e7e8      	b.n	28efe <cbor_encode_int+0x50>

00028f2c <cbor_encode_simple_value>:
    if (value >= HalfPrecisionFloat && value <= Break)
   28f2c:	f1a1 0319 	sub.w	r3, r1, #25
   28f30:	b2db      	uxtb	r3, r3
   28f32:	2b06      	cmp	r3, #6
   28f34:	d926      	bls.n	28f84 <cbor_encode_simple_value+0x58>
{
   28f36:	b530      	push	{r4, r5, lr}
   28f38:	b085      	sub	sp, #20
    return encode_number(encoder, value, SimpleTypesType << MajorTypeShift);
   28f3a:	b2cc      	uxtb	r4, r1
   28f3c:	2500      	movs	r5, #0
    ++encoder->added;
   28f3e:	6883      	ldr	r3, [r0, #8]
   28f40:	3301      	adds	r3, #1
   28f42:	6083      	str	r3, [r0, #8]
    v = cbor_htonll(v);
   28f44:	ba09      	rev	r1, r1
   28f46:	2300      	movs	r3, #0
    memcpy(where, &v, sizeof(v));
   28f48:	9302      	str	r3, [sp, #8]
   28f4a:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   28f4c:	2d00      	cmp	r5, #0
   28f4e:	bf08      	it	eq
   28f50:	2c18      	cmpeq	r4, #24
   28f52:	d20d      	bcs.n	28f70 <cbor_encode_simple_value+0x44>
        *bufstart += shiftedMajorType;
   28f54:	f3c1 6107 	ubfx	r1, r1, #24, #8
   28f58:	3920      	subs	r1, #32
   28f5a:	f88d 100f 	strb.w	r1, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   28f5e:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   28f62:	6800      	ldr	r0, [r0, #0]
   28f64:	6803      	ldr	r3, [r0, #0]
   28f66:	aa04      	add	r2, sp, #16
   28f68:	1a52      	subs	r2, r2, r1
   28f6a:	4798      	blx	r3
}
   28f6c:	b005      	add	sp, #20
   28f6e:	bd30      	pop	{r4, r5, pc}
        unsigned more = 0;
   28f70:	2300      	movs	r3, #0
        bufstart -= (size_t)1 << more;
   28f72:	2101      	movs	r1, #1
   28f74:	fa01 f203 	lsl.w	r2, r1, r3
   28f78:	f10d 010f 	add.w	r1, sp, #15
   28f7c:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   28f7e:	3b08      	subs	r3, #8
   28f80:	700b      	strb	r3, [r1, #0]
   28f82:	e7ee      	b.n	28f62 <cbor_encode_simple_value+0x36>
        return CborErrorIllegalSimpleType;
   28f84:	f44f 7083 	mov.w	r0, #262	; 0x106
}
   28f88:	4770      	bx	lr

00028f8a <cbor_encode_byte_string>:
{
   28f8a:	b508      	push	{r3, lr}
   28f8c:	460b      	mov	r3, r1
   28f8e:	4611      	mov	r1, r2
    return encode_string(encoder, length, ByteStringType << MajorTypeShift, string);
   28f90:	2240      	movs	r2, #64	; 0x40
   28f92:	f7ff ff15 	bl	28dc0 <encode_string>
}
   28f96:	bd08      	pop	{r3, pc}

00028f98 <cbor_encode_text_string>:
{
   28f98:	b508      	push	{r3, lr}
   28f9a:	460b      	mov	r3, r1
   28f9c:	4611      	mov	r1, r2
    return encode_string(encoder, length, TextStringType << MajorTypeShift, string);
   28f9e:	2260      	movs	r2, #96	; 0x60
   28fa0:	f7ff ff0e 	bl	28dc0 <encode_string>
}
   28fa4:	bd08      	pop	{r3, pc}

00028fa6 <cbor_encoder_create_array>:
 * length instead.
 *
 * \sa cbor_encoder_create_map
 */
CborError cbor_encoder_create_array(CborEncoder *encoder, CborEncoder *arrayEncoder, size_t length)
{
   28fa6:	b508      	push	{r3, lr}
    return create_container(encoder, arrayEncoder, length, ArrayType << MajorTypeShift);
   28fa8:	2380      	movs	r3, #128	; 0x80
   28faa:	f7ff febf 	bl	28d2c <create_container>
}
   28fae:	bd08      	pop	{r3, pc}

00028fb0 <cbor_encoder_create_map>:
 * value, this function returns error CborErrorDataTooLarge.
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_map(CborEncoder *encoder, CborEncoder *mapEncoder, size_t length)
{
   28fb0:	b510      	push	{r4, lr}
    if (length != CborIndefiniteLength && length > SIZE_MAX / 2)
   28fb2:	f102 4400 	add.w	r4, r2, #2147483648	; 0x80000000
   28fb6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   28fba:	429c      	cmp	r4, r3
   28fbc:	d303      	bcc.n	28fc6 <cbor_encoder_create_map+0x16>
        return CborErrorDataTooLarge;
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
   28fbe:	23a0      	movs	r3, #160	; 0xa0
   28fc0:	f7ff feb4 	bl	28d2c <create_container>
}
   28fc4:	bd10      	pop	{r4, pc}
        return CborErrorDataTooLarge;
   28fc6:	f44f 6080 	mov.w	r0, #1024	; 0x400
   28fca:	e7fb      	b.n	28fc4 <cbor_encoder_create_map+0x14>

00028fcc <cbor_encoder_create_indef_byte_string>:
 * \a stringEncoder parameters.
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_indef_byte_string(CborEncoder *encoder, CborEncoder *stringEncoder)
{
   28fcc:	b508      	push	{r3, lr}
    return create_container(encoder, stringEncoder, CborIndefiniteLength, ByteStringType << MajorTypeShift);
   28fce:	2340      	movs	r3, #64	; 0x40
   28fd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28fd4:	f7ff feaa 	bl	28d2c <create_container>
}
   28fd8:	bd08      	pop	{r3, pc}

00028fda <cbor_encoder_close_container>:
 *
 * \sa cbor_encoder_create_array(), cbor_encoder_create_map()
 */
CborError cbor_encoder_close_container(CborEncoder *encoder, const CborEncoder *containerEncoder)
{
    encoder->writer = containerEncoder->writer;
   28fda:	680b      	ldr	r3, [r1, #0]
   28fdc:	6003      	str	r3, [r0, #0]

    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
   28fde:	68cb      	ldr	r3, [r1, #12]
   28fe0:	f013 0f04 	tst.w	r3, #4
   28fe4:	d101      	bne.n	28fea <cbor_encoder_close_container+0x10>
        return append_byte_to_buffer(encoder, BreakByte);
    return CborNoError;
   28fe6:	2000      	movs	r0, #0
}
   28fe8:	4770      	bx	lr
{
   28fea:	b500      	push	{lr}
   28fec:	b083      	sub	sp, #12
        return append_byte_to_buffer(encoder, BreakByte);
   28fee:	23ff      	movs	r3, #255	; 0xff
   28ff0:	f88d 3007 	strb.w	r3, [sp, #7]
    return encoder->writer->write(encoder->writer, data, len);
   28ff4:	6800      	ldr	r0, [r0, #0]
   28ff6:	6803      	ldr	r3, [r0, #0]
   28ff8:	2201      	movs	r2, #1
   28ffa:	f10d 0107 	add.w	r1, sp, #7
   28ffe:	4798      	blx	r3
}
   29000:	b003      	add	sp, #12
   29002:	f85d fb04 	ldr.w	pc, [sp], #4

00029006 <is_fixed_type>:
    return CborNoError;
}

static bool is_fixed_type(uint8_t type)
{
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   29006:	2860      	cmp	r0, #96	; 0x60
   29008:	d009      	beq.n	2901e <is_fixed_type+0x18>
   2900a:	2840      	cmp	r0, #64	; 0x40
   2900c:	d009      	beq.n	29022 <is_fixed_type+0x1c>
   2900e:	2880      	cmp	r0, #128	; 0x80
   29010:	d009      	beq.n	29026 <is_fixed_type+0x20>
   29012:	28a0      	cmp	r0, #160	; 0xa0
   29014:	d001      	beq.n	2901a <is_fixed_type+0x14>
   29016:	2001      	movs	r0, #1
           type != CborMapType;
}
   29018:	4770      	bx	lr
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   2901a:	2000      	movs	r0, #0
   2901c:	4770      	bx	lr
   2901e:	2000      	movs	r0, #0
   29020:	4770      	bx	lr
   29022:	2000      	movs	r0, #0
   29024:	4770      	bx	lr
   29026:	2000      	movs	r0, #0
   29028:	4770      	bx	lr

0002902a <iterate_noop>:
    (void)d;
    (void)dst;
    (void)src_offset;
    (void)len;
    return true;
}
   2902a:	2001      	movs	r0, #1
   2902c:	4770      	bx	lr

0002902e <preparse_value>:
{
   2902e:	b570      	push	{r4, r5, r6, lr}
    const CborParser *parser = it->parser;
   29030:	6805      	ldr	r5, [r0, #0]
    it->type = CborInvalidType;
   29032:	23ff      	movs	r3, #255	; 0xff
   29034:	7383      	strb	r3, [r0, #14]
    if (it->offset == parser->end)
   29036:	6841      	ldr	r1, [r0, #4]
   29038:	686b      	ldr	r3, [r5, #4]
   2903a:	4299      	cmp	r1, r3
   2903c:	f000 808d 	beq.w	2915a <preparse_value+0x12c>
   29040:	4604      	mov	r4, r0
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
   29042:	6828      	ldr	r0, [r5, #0]
   29044:	6803      	ldr	r3, [r0, #0]
   29046:	4798      	blx	r3
    uint8_t type = descriptor & MajorTypeMask;
   29048:	f000 06e0 	and.w	r6, r0, #224	; 0xe0
    it->type = type;
   2904c:	73a6      	strb	r6, [r4, #14]
    it->flags = 0;
   2904e:	2300      	movs	r3, #0
   29050:	73e3      	strb	r3, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
   29052:	f000 031f 	and.w	r3, r0, #31
   29056:	81a3      	strh	r3, [r4, #12]
    if (descriptor > Value64Bit) {
   29058:	2b1b      	cmp	r3, #27
   2905a:	d91d      	bls.n	29098 <preparse_value+0x6a>
        if (unlikely(descriptor != IndefiniteLength))
   2905c:	2b1f      	cmp	r3, #31
   2905e:	d10b      	bne.n	29078 <preparse_value+0x4a>
        if (likely(!is_fixed_type(type))) {
   29060:	4630      	mov	r0, r6
   29062:	f7ff ffd0 	bl	29006 <is_fixed_type>
   29066:	f080 0001 	eor.w	r0, r0, #1
   2906a:	f010 0fff 	tst.w	r0, #255	; 0xff
   2906e:	d00b      	beq.n	29088 <preparse_value+0x5a>
            it->flags |= CborIteratorFlag_UnknownLength;
   29070:	2304      	movs	r3, #4
   29072:	73e3      	strb	r3, [r4, #15]
            return CborNoError;
   29074:	2000      	movs	r0, #0
}
   29076:	bd70      	pop	{r4, r5, r6, pc}
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
   29078:	2ee0      	cmp	r6, #224	; 0xe0
   2907a:	d002      	beq.n	29082 <preparse_value+0x54>
   2907c:	f240 1005 	movw	r0, #261	; 0x105
   29080:	e7f9      	b.n	29076 <preparse_value+0x48>
   29082:	f240 1003 	movw	r0, #259	; 0x103
   29086:	e7f6      	b.n	29076 <preparse_value+0x48>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
   29088:	2ee0      	cmp	r6, #224	; 0xe0
   2908a:	d002      	beq.n	29092 <preparse_value+0x64>
   2908c:	f240 1005 	movw	r0, #261	; 0x105
   29090:	e7f1      	b.n	29076 <preparse_value+0x48>
   29092:	f44f 7081 	mov.w	r0, #258	; 0x102
   29096:	e7ee      	b.n	29076 <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   29098:	2b17      	cmp	r3, #23
   2909a:	d91a      	bls.n	290d2 <preparse_value+0xa4>
   2909c:	f1a3 0118 	sub.w	r1, r3, #24
   290a0:	2201      	movs	r2, #1
   290a2:	408a      	lsls	r2, r1
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
   290a4:	3201      	adds	r2, #1
   290a6:	6868      	ldr	r0, [r5, #4]
   290a8:	6861      	ldr	r1, [r4, #4]
   290aa:	1a40      	subs	r0, r0, r1
   290ac:	4282      	cmp	r2, r0
   290ae:	d857      	bhi.n	29160 <preparse_value+0x132>
    uint8_t majortype = type >> MajorTypeShift;
   290b0:	0972      	lsrs	r2, r6, #5
    if (majortype == NegativeIntegerType) {
   290b2:	2e20      	cmp	r6, #32
   290b4:	d00f      	beq.n	290d6 <preparse_value+0xa8>
    } else if (majortype == SimpleTypesType) {
   290b6:	2a07      	cmp	r2, #7
   290b8:	d012      	beq.n	290e0 <preparse_value+0xb2>
    if (descriptor < Value8Bit)
   290ba:	2b17      	cmp	r3, #23
   290bc:	d953      	bls.n	29166 <preparse_value+0x138>
    if (descriptor == Value8Bit)
   290be:	2b18      	cmp	r3, #24
   290c0:	d03d      	beq.n	2913e <preparse_value+0x110>
    else if (descriptor == Value16Bit)
   290c2:	2b19      	cmp	r3, #25
   290c4:	d042      	beq.n	2914c <preparse_value+0x11e>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   290c6:	7be3      	ldrb	r3, [r4, #15]
   290c8:	f043 0301 	orr.w	r3, r3, #1
   290cc:	73e3      	strb	r3, [r4, #15]
    return CborNoError;
   290ce:	2000      	movs	r0, #0
   290d0:	e7d1      	b.n	29076 <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   290d2:	2200      	movs	r2, #0
   290d4:	e7e6      	b.n	290a4 <preparse_value+0x76>
        it->flags |= CborIteratorFlag_NegativeInteger;
   290d6:	2202      	movs	r2, #2
   290d8:	73e2      	strb	r2, [r4, #15]
        it->type = CborIntegerType;
   290da:	2200      	movs	r2, #0
   290dc:	73a2      	strb	r2, [r4, #14]
   290de:	e7ec      	b.n	290ba <preparse_value+0x8c>
        switch (descriptor) {
   290e0:	3b14      	subs	r3, #20
   290e2:	2b0b      	cmp	r3, #11
   290e4:	d812      	bhi.n	2910c <preparse_value+0xde>
   290e6:	e8df f003 	tbb	[pc, r3]
   290ea:	0d06      	.short	0x0d06
   290ec:	0d130d0d 	.word	0x0d130d0d
   290f0:	20200b0b 	.word	0x20200b0b
   290f4:	2020      	.short	0x2020
            it->extra = false;
   290f6:	2300      	movs	r3, #0
   290f8:	81a3      	strh	r3, [r4, #12]
            it->type = CborBooleanType;
   290fa:	23f5      	movs	r3, #245	; 0xf5
   290fc:	73a3      	strb	r3, [r4, #14]
            break;
   290fe:	e005      	b.n	2910c <preparse_value+0xde>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
   29100:	2301      	movs	r3, #1
   29102:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
   29104:	6828      	ldr	r0, [r5, #0]
   29106:	6803      	ldr	r3, [r0, #0]
   29108:	4798      	blx	r3
   2910a:	73a0      	strb	r0, [r4, #14]
        return CborNoError;
   2910c:	2000      	movs	r0, #0
   2910e:	e7b2      	b.n	29076 <preparse_value+0x48>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   29110:	6828      	ldr	r0, [r5, #0]
   29112:	6803      	ldr	r3, [r0, #0]
   29114:	3101      	adds	r1, #1
   29116:	4798      	blx	r3
   29118:	b283      	uxth	r3, r0
   2911a:	81a3      	strh	r3, [r4, #12]
            if (unlikely(it->extra < 32)) {
   2911c:	2b1f      	cmp	r3, #31
   2911e:	d8f5      	bhi.n	2910c <preparse_value+0xde>
                it->type = CborInvalidType;
   29120:	23ff      	movs	r3, #255	; 0xff
   29122:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
   29124:	f44f 7083 	mov.w	r0, #262	; 0x106
   29128:	e7a5      	b.n	29076 <preparse_value+0x48>
            assert(false);  /* these conditions can't be reached */
   2912a:	f7eb fa9b 	bl	14664 <hal_debugger_connected>
   2912e:	b100      	cbz	r0, 29132 <preparse_value+0x104>
   29130:	be01      	bkpt	0x0001
   29132:	2300      	movs	r3, #0
   29134:	461a      	mov	r2, r3
   29136:	4619      	mov	r1, r3
   29138:	4618      	mov	r0, r3
   2913a:	f7eb fe33 	bl	14da4 <__assert_func>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
   2913e:	6828      	ldr	r0, [r5, #0]
   29140:	6803      	ldr	r3, [r0, #0]
   29142:	3101      	adds	r1, #1
   29144:	4798      	blx	r3
   29146:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   29148:	2000      	movs	r0, #0
   2914a:	e794      	b.n	29076 <preparse_value+0x48>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   2914c:	6828      	ldr	r0, [r5, #0]
   2914e:	6843      	ldr	r3, [r0, #4]
   29150:	3101      	adds	r1, #1
   29152:	4798      	blx	r3
   29154:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   29156:	2000      	movs	r0, #0
   29158:	e78d      	b.n	29076 <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   2915a:	f240 1001 	movw	r0, #257	; 0x101
   2915e:	e78a      	b.n	29076 <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   29160:	f240 1001 	movw	r0, #257	; 0x101
   29164:	e787      	b.n	29076 <preparse_value+0x48>
        return CborNoError;
   29166:	2000      	movs	r0, #0
   29168:	e785      	b.n	29076 <preparse_value+0x48>

0002916a <preparse_next_value>:
{
   2916a:	b510      	push	{r4, lr}
   2916c:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
   2916e:	6880      	ldr	r0, [r0, #8]
   29170:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   29174:	d00c      	beq.n	29190 <preparse_next_value+0x26>
        if (it->type != CborTagType && !--it->remaining) {
   29176:	7ba2      	ldrb	r2, [r4, #14]
   29178:	2ac0      	cmp	r2, #192	; 0xc0
   2917a:	d002      	beq.n	29182 <preparse_next_value+0x18>
   2917c:	3801      	subs	r0, #1
   2917e:	60a0      	str	r0, [r4, #8]
   29180:	b118      	cbz	r0, 2918a <preparse_next_value+0x20>
    return preparse_value(it);
   29182:	4620      	mov	r0, r4
   29184:	f7ff ff53 	bl	2902e <preparse_value>
}
   29188:	bd10      	pop	{r4, pc}
            it->type = CborInvalidType;
   2918a:	23ff      	movs	r3, #255	; 0xff
   2918c:	73a3      	strb	r3, [r4, #14]
            return CborNoError;
   2918e:	e7fb      	b.n	29188 <preparse_next_value+0x1e>
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   29190:	6861      	ldr	r1, [r4, #4]
   29192:	6823      	ldr	r3, [r4, #0]
   29194:	685a      	ldr	r2, [r3, #4]
   29196:	4291      	cmp	r1, r2
   29198:	d0f3      	beq.n	29182 <preparse_next_value+0x18>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
   2919a:	6818      	ldr	r0, [r3, #0]
   2919c:	6803      	ldr	r3, [r0, #0]
   2919e:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   291a0:	28ff      	cmp	r0, #255	; 0xff
   291a2:	d1ee      	bne.n	29182 <preparse_next_value+0x18>
        ++it->offset;
   291a4:	6863      	ldr	r3, [r4, #4]
   291a6:	3301      	adds	r3, #1
   291a8:	6063      	str	r3, [r4, #4]
        it->type = CborInvalidType;
   291aa:	23ff      	movs	r3, #255	; 0xff
   291ac:	73a3      	strb	r3, [r4, #14]
        it->remaining = 0;
   291ae:	2000      	movs	r0, #0
   291b0:	60a0      	str	r0, [r4, #8]
        return CborNoError;
   291b2:	e7e9      	b.n	29188 <preparse_next_value+0x1e>

000291b4 <extract_length>:
{
   291b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   291b8:	4605      	mov	r5, r0
   291ba:	460e      	mov	r6, r1
   291bc:	4617      	mov	r7, r2
    return cbor_ntohll(result);
}

static inline CborError extract_number(const CborParser *p, int *offset, uint64_t *len)
{
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   291be:	6800      	ldr	r0, [r0, #0]
   291c0:	6803      	ldr	r3, [r0, #0]
   291c2:	6809      	ldr	r1, [r1, #0]
   291c4:	4798      	blx	r3
   291c6:	f000 041f 	and.w	r4, r0, #31
    ++*offset;
   291ca:	6833      	ldr	r3, [r6, #0]
   291cc:	3301      	adds	r3, #1
   291ce:	6033      	str	r3, [r6, #0]
    *len = 1;
    if (additional_information < Value8Bit) {
   291d0:	2c17      	cmp	r4, #23
   291d2:	d91a      	bls.n	2920a <extract_length+0x56>
        *len = additional_information;
        return CborNoError;
    }
    if (unlikely(additional_information > Value64Bit))
   291d4:	2c1b      	cmp	r4, #27
   291d6:	d83a      	bhi.n	2924e <extract_length+0x9a>
        return CborErrorIllegalNumber;

    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   291d8:	3c18      	subs	r4, #24
   291da:	f04f 0801 	mov.w	r8, #1
   291de:	fa08 f804 	lsl.w	r8, r8, r4
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   291e2:	686b      	ldr	r3, [r5, #4]
   291e4:	6831      	ldr	r1, [r6, #0]
   291e6:	1a5b      	subs	r3, r3, r1
   291e8:	4598      	cmp	r8, r3
   291ea:	d835      	bhi.n	29258 <extract_length+0xa4>
        return CborErrorUnexpectedEOF;
    } else if (bytesNeeded == 1) {
   291ec:	f1b8 0f01 	cmp.w	r8, #1
   291f0:	d00f      	beq.n	29212 <extract_length+0x5e>
        *len = p->d->get8(p->d, *offset);
    } else if (bytesNeeded == 2) {
   291f2:	f1b8 0f02 	cmp.w	r8, #2
   291f6:	d01e      	beq.n	29236 <extract_length+0x82>
        *len =  p->d->get16(p->d, *offset);
    } else if (bytesNeeded == 4) {
   291f8:	f1b8 0f04 	cmp.w	r8, #4
   291fc:	d021      	beq.n	29242 <extract_length+0x8e>
        *len =  p->d->get32(p->d, *offset);
    } else {
        *len =  p->d->get64(p->d, *offset);
   291fe:	6828      	ldr	r0, [r5, #0]
   29200:	68c3      	ldr	r3, [r0, #12]
   29202:	4798      	blx	r3
   29204:	4604      	mov	r4, r0
   29206:	460d      	mov	r5, r1
   29208:	e008      	b.n	2921c <extract_length+0x68>
        *len = additional_information;
   2920a:	b2e4      	uxtb	r4, r4
   2920c:	2500      	movs	r5, #0
        return CborNoError;
   2920e:	2000      	movs	r0, #0
   29210:	e008      	b.n	29224 <extract_length+0x70>
        *len = p->d->get8(p->d, *offset);
   29212:	6828      	ldr	r0, [r5, #0]
   29214:	6803      	ldr	r3, [r0, #0]
   29216:	4798      	blx	r3
   29218:	4604      	mov	r4, r0
   2921a:	2500      	movs	r5, #0
    }
    *offset += bytesNeeded;
   2921c:	6833      	ldr	r3, [r6, #0]
   2921e:	4443      	add	r3, r8
   29220:	6033      	str	r3, [r6, #0]
    return CborNoError;
   29222:	2000      	movs	r0, #0
    if (err) {
   29224:	b9e8      	cbnz	r0, 29262 <extract_length+0xae>
    *len = v;
   29226:	603c      	str	r4, [r7, #0]
    if (v != *len)
   29228:	2300      	movs	r3, #0
   2922a:	42ab      	cmp	r3, r5
   2922c:	bf08      	it	eq
   2922e:	42a4      	cmpeq	r4, r4
   29230:	d11a      	bne.n	29268 <extract_length+0xb4>
}
   29232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *len =  p->d->get16(p->d, *offset);
   29236:	6828      	ldr	r0, [r5, #0]
   29238:	6843      	ldr	r3, [r0, #4]
   2923a:	4798      	blx	r3
   2923c:	4604      	mov	r4, r0
   2923e:	2500      	movs	r5, #0
   29240:	e7ec      	b.n	2921c <extract_length+0x68>
        *len =  p->d->get32(p->d, *offset);
   29242:	6828      	ldr	r0, [r5, #0]
   29244:	6883      	ldr	r3, [r0, #8]
   29246:	4798      	blx	r3
   29248:	4604      	mov	r4, r0
   2924a:	2500      	movs	r5, #0
   2924c:	e7e6      	b.n	2921c <extract_length+0x68>
    *len = 1;
   2924e:	2401      	movs	r4, #1
   29250:	2500      	movs	r5, #0
        return CborErrorIllegalNumber;
   29252:	f240 1005 	movw	r0, #261	; 0x105
   29256:	e7e5      	b.n	29224 <extract_length+0x70>
    *len = 1;
   29258:	2401      	movs	r4, #1
   2925a:	2500      	movs	r5, #0
        return CborErrorUnexpectedEOF;
   2925c:	f240 1001 	movw	r0, #257	; 0x101
   29260:	e7e0      	b.n	29224 <extract_length+0x70>
        *len = 0;
   29262:	2300      	movs	r3, #0
   29264:	603b      	str	r3, [r7, #0]
        return err;
   29266:	e7e4      	b.n	29232 <extract_length+0x7e>
        return CborErrorDataTooLarge;
   29268:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2926c:	e7e1      	b.n	29232 <extract_length+0x7e>

0002926e <iterate_string_chunks>:

static CborError iterate_string_chunks(const CborValue *value, char *buffer, size_t *buflen,
                                       bool *result, CborValue *next, IterateFunction func)
{
   2926e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29272:	b085      	sub	sp, #20
   29274:	4604      	mov	r4, r0
   29276:	4689      	mov	r9, r1
   29278:	4616      	mov	r6, r2
   2927a:	461d      	mov	r5, r3
{ return value->type == CborByteStringType; }
   2927c:	7b83      	ldrb	r3, [r0, #14]
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   2927e:	2b40      	cmp	r3, #64	; 0x40
   29280:	d001      	beq.n	29286 <iterate_string_chunks+0x18>
   29282:	2b60      	cmp	r3, #96	; 0x60
   29284:	d10c      	bne.n	292a0 <iterate_string_chunks+0x32>

    size_t total;
    CborError err;
    int offset = value->offset;
   29286:	6863      	ldr	r3, [r4, #4]
   29288:	9302      	str	r3, [sp, #8]
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   2928a:	7be2      	ldrb	r2, [r4, #15]
    if (cbor_value_is_length_known(value)) {
   2928c:	f012 0f04 	tst.w	r2, #4
   29290:	d010      	beq.n	292b4 <iterate_string_chunks+0x46>
        else
            *result = false;
        offset += total;
    } else {
        /* chunked */
        ++offset;
   29292:	3301      	adds	r3, #1
   29294:	9302      	str	r3, [sp, #8]
        total = 0;
   29296:	2300      	movs	r3, #0
   29298:	9303      	str	r3, [sp, #12]
        *result = true;
   2929a:	2301      	movs	r3, #1
   2929c:	702b      	strb	r3, [r5, #0]
   2929e:	e04c      	b.n	2933a <iterate_string_chunks+0xcc>
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   292a0:	f7eb f9e0 	bl	14664 <hal_debugger_connected>
   292a4:	b100      	cbz	r0, 292a8 <iterate_string_chunks+0x3a>
   292a6:	be01      	bkpt	0x0001
   292a8:	2300      	movs	r3, #0
   292aa:	461a      	mov	r2, r3
   292ac:	4619      	mov	r1, r3
   292ae:	4618      	mov	r0, r3
   292b0:	f7eb fd78 	bl	14da4 <__assert_func>
        err = extract_length(value->parser, &offset, &total);
   292b4:	aa03      	add	r2, sp, #12
   292b6:	a902      	add	r1, sp, #8
   292b8:	6820      	ldr	r0, [r4, #0]
   292ba:	f7ff ff7b 	bl	291b4 <extract_length>
        if (err)
   292be:	4603      	mov	r3, r0
   292c0:	2800      	cmp	r0, #0
   292c2:	d177      	bne.n	293b4 <iterate_string_chunks+0x146>
        if (total > (size_t)(value->parser->end - offset))
   292c4:	6820      	ldr	r0, [r4, #0]
   292c6:	6843      	ldr	r3, [r0, #4]
   292c8:	9a02      	ldr	r2, [sp, #8]
   292ca:	1a99      	subs	r1, r3, r2
   292cc:	9b03      	ldr	r3, [sp, #12]
   292ce:	4299      	cmp	r1, r3
   292d0:	f0c0 8083 	bcc.w	293da <iterate_string_chunks+0x16c>
        if (total <= *buflen)
   292d4:	6831      	ldr	r1, [r6, #0]
   292d6:	428b      	cmp	r3, r1
   292d8:	d81e      	bhi.n	29318 <iterate_string_chunks+0xaa>
            *result = !!func(value->parser->d, buffer, offset, total);
   292da:	4649      	mov	r1, r9
   292dc:	6800      	ldr	r0, [r0, #0]
   292de:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   292e0:	47b8      	blx	r7
   292e2:	3800      	subs	r0, #0
   292e4:	bf18      	it	ne
   292e6:	2001      	movne	r0, #1
   292e8:	7028      	strb	r0, [r5, #0]
        offset += total;
   292ea:	9b02      	ldr	r3, [sp, #8]
   292ec:	9a03      	ldr	r2, [sp, #12]
   292ee:	4413      	add	r3, r2
   292f0:	9302      	str	r3, [sp, #8]
            total = newTotal;
        }
    }

    /* is there enough room for the ending NUL byte? */
    if (*result && *buflen > total) {
   292f2:	782b      	ldrb	r3, [r5, #0]
   292f4:	b14b      	cbz	r3, 2930a <iterate_string_chunks+0x9c>
   292f6:	6832      	ldr	r2, [r6, #0]
   292f8:	9b03      	ldr	r3, [sp, #12]
   292fa:	429a      	cmp	r2, r3
   292fc:	d905      	bls.n	2930a <iterate_string_chunks+0x9c>
        /* we are just trying to write a NULL byte here,, but this is hard
         * because this is called by function pointer with an abstract
         * reader.  Since this is the output buffer, we can assume that if
         * we have a valid buffer its ok to write a NULL here  */
        if(buffer) {
   292fe:	f1b9 0f00 	cmp.w	r9, #0
   29302:	d002      	beq.n	2930a <iterate_string_chunks+0x9c>
            *(buffer + total) = '\0';
   29304:	2200      	movs	r2, #0
   29306:	f809 2003 	strb.w	r2, [r9, r3]
        }
    }
    *buflen = total;
   2930a:	9b03      	ldr	r3, [sp, #12]
   2930c:	6033      	str	r3, [r6, #0]

    if (next) {
   2930e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   29310:	2b00      	cmp	r3, #0
   29312:	d156      	bne.n	293c2 <iterate_string_chunks+0x154>
        *next = *value;
        next->offset = offset;
        return preparse_next_value(next);
    }
    return CborNoError;
   29314:	2300      	movs	r3, #0
   29316:	e04d      	b.n	293b4 <iterate_string_chunks+0x146>
            *result = false;
   29318:	2300      	movs	r3, #0
   2931a:	702b      	strb	r3, [r5, #0]
   2931c:	e7e5      	b.n	292ea <iterate_string_chunks+0x7c>
                ++offset;
   2931e:	9b02      	ldr	r3, [sp, #8]
   29320:	3301      	adds	r3, #1
   29322:	9302      	str	r3, [sp, #8]
                break;
   29324:	e7e5      	b.n	292f2 <iterate_string_chunks+0x84>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
   29326:	2201      	movs	r2, #1
   29328:	e023      	b.n	29372 <iterate_string_chunks+0x104>
                *result = false;
   2932a:	2300      	movs	r3, #0
   2932c:	702b      	strb	r3, [r5, #0]
            offset += chunkLen;
   2932e:	9b02      	ldr	r3, [sp, #8]
   29330:	9a01      	ldr	r2, [sp, #4]
   29332:	4413      	add	r3, r2
   29334:	9302      	str	r3, [sp, #8]
            total = newTotal;
   29336:	f8cd 800c 	str.w	r8, [sp, #12]
            if (offset == value->parser->end)
   2933a:	6823      	ldr	r3, [r4, #0]
   2933c:	685a      	ldr	r2, [r3, #4]
   2933e:	9902      	ldr	r1, [sp, #8]
   29340:	428a      	cmp	r2, r1
   29342:	d02f      	beq.n	293a4 <iterate_string_chunks+0x136>
            val = value->parser->d->get8(value->parser->d, offset);
   29344:	6818      	ldr	r0, [r3, #0]
   29346:	6803      	ldr	r3, [r0, #0]
   29348:	4798      	blx	r3
            if (val == (uint8_t)BreakByte) {
   2934a:	28ff      	cmp	r0, #255	; 0xff
   2934c:	d0e7      	beq.n	2931e <iterate_string_chunks+0xb0>
            if ((val & MajorTypeMask) != value->type)
   2934e:	f020 001f 	bic.w	r0, r0, #31
   29352:	7ba3      	ldrb	r3, [r4, #14]
   29354:	4298      	cmp	r0, r3
   29356:	d128      	bne.n	293aa <iterate_string_chunks+0x13c>
            err = extract_length(value->parser, &offset, &chunkLen);
   29358:	aa01      	add	r2, sp, #4
   2935a:	a902      	add	r1, sp, #8
   2935c:	6820      	ldr	r0, [r4, #0]
   2935e:	f7ff ff29 	bl	291b4 <extract_length>
            if (err)
   29362:	4603      	mov	r3, r0
   29364:	bb30      	cbnz	r0, 293b4 <iterate_string_chunks+0x146>
            if (unlikely(add_check_overflow(total, chunkLen, &newTotal)))
   29366:	9903      	ldr	r1, [sp, #12]
   29368:	9b01      	ldr	r3, [sp, #4]
   2936a:	2200      	movs	r2, #0
   2936c:	eb11 0803 	adds.w	r8, r1, r3
   29370:	d2d9      	bcs.n	29326 <iterate_string_chunks+0xb8>
   29372:	b9ea      	cbnz	r2, 293b0 <iterate_string_chunks+0x142>
            if (chunkLen > (size_t)(value->parser->end - offset))
   29374:	f8d4 c000 	ldr.w	ip, [r4]
   29378:	f8dc 0004 	ldr.w	r0, [ip, #4]
   2937c:	9a02      	ldr	r2, [sp, #8]
   2937e:	1a80      	subs	r0, r0, r2
   29380:	4283      	cmp	r3, r0
   29382:	d81b      	bhi.n	293bc <iterate_string_chunks+0x14e>
            if (*result && *buflen >= newTotal)
   29384:	7828      	ldrb	r0, [r5, #0]
   29386:	2800      	cmp	r0, #0
   29388:	d0cf      	beq.n	2932a <iterate_string_chunks+0xbc>
   2938a:	6830      	ldr	r0, [r6, #0]
   2938c:	4540      	cmp	r0, r8
   2938e:	d3cc      	bcc.n	2932a <iterate_string_chunks+0xbc>
                *result = !!func(value->parser->d, buffer + total, offset, chunkLen);
   29390:	4449      	add	r1, r9
   29392:	f8dc 0000 	ldr.w	r0, [ip]
   29396:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   29398:	47b8      	blx	r7
   2939a:	3800      	subs	r0, #0
   2939c:	bf18      	it	ne
   2939e:	2001      	movne	r0, #1
   293a0:	7028      	strb	r0, [r5, #0]
   293a2:	e7c4      	b.n	2932e <iterate_string_chunks+0xc0>
                return CborErrorUnexpectedEOF;
   293a4:	f240 1301 	movw	r3, #257	; 0x101
   293a8:	e004      	b.n	293b4 <iterate_string_chunks+0x146>
                return CborErrorIllegalType;
   293aa:	f44f 7382 	mov.w	r3, #260	; 0x104
   293ae:	e001      	b.n	293b4 <iterate_string_chunks+0x146>
                return CborErrorDataTooLarge;
   293b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
}
   293b4:	4618      	mov	r0, r3
   293b6:	b005      	add	sp, #20
   293b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return CborErrorUnexpectedEOF;
   293bc:	f240 1301 	movw	r3, #257	; 0x101
   293c0:	e7f8      	b.n	293b4 <iterate_string_chunks+0x146>
        *next = *value;
   293c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   293c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   293c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        next->offset = offset;
   293cc:	9b02      	ldr	r3, [sp, #8]
   293ce:	6063      	str	r3, [r4, #4]
        return preparse_next_value(next);
   293d0:	4620      	mov	r0, r4
   293d2:	f7ff feca 	bl	2916a <preparse_next_value>
   293d6:	4603      	mov	r3, r0
   293d8:	e7ec      	b.n	293b4 <iterate_string_chunks+0x146>
            return CborErrorUnexpectedEOF;
   293da:	f240 1301 	movw	r3, #257	; 0x101
   293de:	e7e9      	b.n	293b4 <iterate_string_chunks+0x146>

000293e0 <advance_internal>:
{
   293e0:	b570      	push	{r4, r5, r6, lr}
   293e2:	4604      	mov	r4, r0
    CborError err = extract_number(it->parser, &it->offset,  &length);
   293e4:	6806      	ldr	r6, [r0, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   293e6:	6830      	ldr	r0, [r6, #0]
   293e8:	6803      	ldr	r3, [r0, #0]
   293ea:	6861      	ldr	r1, [r4, #4]
   293ec:	4798      	blx	r3
   293ee:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   293f2:	6863      	ldr	r3, [r4, #4]
   293f4:	3301      	adds	r3, #1
   293f6:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   293f8:	2817      	cmp	r0, #23
   293fa:	d915      	bls.n	29428 <advance_internal+0x48>
    if (unlikely(additional_information > Value64Bit))
   293fc:	281b      	cmp	r0, #27
   293fe:	d842      	bhi.n	29486 <advance_internal+0xa6>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   29400:	3818      	subs	r0, #24
   29402:	2501      	movs	r5, #1
   29404:	4085      	lsls	r5, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   29406:	6873      	ldr	r3, [r6, #4]
   29408:	6861      	ldr	r1, [r4, #4]
   2940a:	1a5b      	subs	r3, r3, r1
   2940c:	429d      	cmp	r5, r3
   2940e:	d83f      	bhi.n	29490 <advance_internal+0xb0>
    } else if (bytesNeeded == 1) {
   29410:	2d01      	cmp	r5, #1
   29412:	d00d      	beq.n	29430 <advance_internal+0x50>
    } else if (bytesNeeded == 2) {
   29414:	2d02      	cmp	r5, #2
   29416:	d02a      	beq.n	2946e <advance_internal+0x8e>
    } else if (bytesNeeded == 4) {
   29418:	2d04      	cmp	r5, #4
   2941a:	d02e      	beq.n	2947a <advance_internal+0x9a>
        *len =  p->d->get64(p->d, *offset);
   2941c:	6830      	ldr	r0, [r6, #0]
   2941e:	68c3      	ldr	r3, [r0, #12]
   29420:	4798      	blx	r3
   29422:	4602      	mov	r2, r0
   29424:	460b      	mov	r3, r1
   29426:	e008      	b.n	2943a <advance_internal+0x5a>
        *len = additional_information;
   29428:	b2c2      	uxtb	r2, r0
   2942a:	2300      	movs	r3, #0
        return CborNoError;
   2942c:	2100      	movs	r1, #0
   2942e:	e008      	b.n	29442 <advance_internal+0x62>
        *len = p->d->get8(p->d, *offset);
   29430:	6830      	ldr	r0, [r6, #0]
   29432:	6803      	ldr	r3, [r0, #0]
   29434:	4798      	blx	r3
   29436:	4602      	mov	r2, r0
   29438:	2300      	movs	r3, #0
    *offset += bytesNeeded;
   2943a:	6860      	ldr	r0, [r4, #4]
   2943c:	4428      	add	r0, r5
   2943e:	6060      	str	r0, [r4, #4]
    return CborNoError;
   29440:	2100      	movs	r1, #0
    assert(err == CborNoError);
   29442:	bb51      	cbnz	r1, 2949a <advance_internal+0xba>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
   29444:	7ba1      	ldrb	r1, [r4, #14]
   29446:	2940      	cmp	r1, #64	; 0x40
   29448:	d001      	beq.n	2944e <advance_internal+0x6e>
   2944a:	2960      	cmp	r1, #96	; 0x60
   2944c:	d10b      	bne.n	29466 <advance_internal+0x86>
        assert(length == (size_t)length);
   2944e:	2100      	movs	r1, #0
   29450:	4299      	cmp	r1, r3
   29452:	bf08      	it	eq
   29454:	4292      	cmpeq	r2, r2
   29456:	d12a      	bne.n	294ae <advance_internal+0xce>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   29458:	7be3      	ldrb	r3, [r4, #15]
   2945a:	f013 0f04 	tst.w	r3, #4
   2945e:	d130      	bne.n	294c2 <advance_internal+0xe2>
        it->offset += length;
   29460:	6863      	ldr	r3, [r4, #4]
   29462:	4413      	add	r3, r2
   29464:	6063      	str	r3, [r4, #4]
    return preparse_next_value(it);
   29466:	4620      	mov	r0, r4
   29468:	f7ff fe7f 	bl	2916a <preparse_next_value>
}
   2946c:	bd70      	pop	{r4, r5, r6, pc}
        *len =  p->d->get16(p->d, *offset);
   2946e:	6830      	ldr	r0, [r6, #0]
   29470:	6843      	ldr	r3, [r0, #4]
   29472:	4798      	blx	r3
   29474:	4602      	mov	r2, r0
   29476:	2300      	movs	r3, #0
   29478:	e7df      	b.n	2943a <advance_internal+0x5a>
        *len =  p->d->get32(p->d, *offset);
   2947a:	6830      	ldr	r0, [r6, #0]
   2947c:	6883      	ldr	r3, [r0, #8]
   2947e:	4798      	blx	r3
   29480:	4602      	mov	r2, r0
   29482:	2300      	movs	r3, #0
   29484:	e7d9      	b.n	2943a <advance_internal+0x5a>
    *len = 1;
   29486:	2201      	movs	r2, #1
   29488:	2300      	movs	r3, #0
        return CborErrorIllegalNumber;
   2948a:	f240 1105 	movw	r1, #261	; 0x105
   2948e:	e7d8      	b.n	29442 <advance_internal+0x62>
    *len = 1;
   29490:	2201      	movs	r2, #1
   29492:	2300      	movs	r3, #0
        return CborErrorUnexpectedEOF;
   29494:	f240 1101 	movw	r1, #257	; 0x101
   29498:	e7d3      	b.n	29442 <advance_internal+0x62>
    assert(err == CborNoError);
   2949a:	f7eb f8e3 	bl	14664 <hal_debugger_connected>
   2949e:	b100      	cbz	r0, 294a2 <advance_internal+0xc2>
   294a0:	be01      	bkpt	0x0001
   294a2:	2300      	movs	r3, #0
   294a4:	461a      	mov	r2, r3
   294a6:	4619      	mov	r1, r3
   294a8:	4618      	mov	r0, r3
   294aa:	f7eb fc7b 	bl	14da4 <__assert_func>
        assert(length == (size_t)length);
   294ae:	f7eb f8d9 	bl	14664 <hal_debugger_connected>
   294b2:	b100      	cbz	r0, 294b6 <advance_internal+0xd6>
   294b4:	be01      	bkpt	0x0001
   294b6:	2300      	movs	r3, #0
   294b8:	461a      	mov	r2, r3
   294ba:	4619      	mov	r1, r3
   294bc:	4618      	mov	r0, r3
   294be:	f7eb fc71 	bl	14da4 <__assert_func>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   294c2:	f7eb f8cf 	bl	14664 <hal_debugger_connected>
   294c6:	b100      	cbz	r0, 294ca <advance_internal+0xea>
   294c8:	be01      	bkpt	0x0001
   294ca:	2300      	movs	r3, #0
   294cc:	461a      	mov	r2, r3
   294ce:	4619      	mov	r1, r3
   294d0:	4618      	mov	r0, r3
   294d2:	f7eb fc67 	bl	14da4 <__assert_func>

000294d6 <_cbor_value_decode_int64_internal>:
{
   294d6:	b510      	push	{r4, lr}
   294d8:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   294da:	6803      	ldr	r3, [r0, #0]
   294dc:	6818      	ldr	r0, [r3, #0]
   294de:	6803      	ldr	r3, [r0, #0]
   294e0:	6861      	ldr	r1, [r4, #4]
   294e2:	4798      	blx	r3
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   294e4:	7be3      	ldrb	r3, [r4, #15]
   294e6:	f013 0f01 	tst.w	r3, #1
   294ea:	d104      	bne.n	294f6 <_cbor_value_decode_int64_internal+0x20>
   294ec:	7ba3      	ldrb	r3, [r4, #14]
   294ee:	2bfa      	cmp	r3, #250	; 0xfa
   294f0:	d001      	beq.n	294f6 <_cbor_value_decode_int64_internal+0x20>
   294f2:	2bfb      	cmp	r3, #251	; 0xfb
   294f4:	d111      	bne.n	2951a <_cbor_value_decode_int64_internal+0x44>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   294f6:	f000 031e 	and.w	r3, r0, #30
   294fa:	2b1a      	cmp	r3, #26
   294fc:	d117      	bne.n	2952e <_cbor_value_decode_int64_internal+0x58>
    if ((val & 1) == (Value32Bit & 1))
   294fe:	f010 0f01 	tst.w	r0, #1
   29502:	d01e      	beq.n	29542 <_cbor_value_decode_int64_internal+0x6c>
    assert((val & SmallValueMask) == Value64Bit);
   29504:	f000 001f 	and.w	r0, r0, #31
   29508:	281b      	cmp	r0, #27
   2950a:	d122      	bne.n	29552 <_cbor_value_decode_int64_internal+0x7c>
        return value->parser->d->get64(value->parser->d, value->offset + 1);
   2950c:	6823      	ldr	r3, [r4, #0]
   2950e:	6818      	ldr	r0, [r3, #0]
   29510:	68c3      	ldr	r3, [r0, #12]
   29512:	6861      	ldr	r1, [r4, #4]
   29514:	3101      	adds	r1, #1
   29516:	4798      	blx	r3
}
   29518:	bd10      	pop	{r4, pc}
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   2951a:	f7eb f8a3 	bl	14664 <hal_debugger_connected>
   2951e:	b100      	cbz	r0, 29522 <_cbor_value_decode_int64_internal+0x4c>
   29520:	be01      	bkpt	0x0001
   29522:	2300      	movs	r3, #0
   29524:	461a      	mov	r2, r3
   29526:	4619      	mov	r1, r3
   29528:	4618      	mov	r0, r3
   2952a:	f7eb fc3b 	bl	14da4 <__assert_func>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   2952e:	f7eb f899 	bl	14664 <hal_debugger_connected>
   29532:	b100      	cbz	r0, 29536 <_cbor_value_decode_int64_internal+0x60>
   29534:	be01      	bkpt	0x0001
   29536:	2300      	movs	r3, #0
   29538:	461a      	mov	r2, r3
   2953a:	4619      	mov	r1, r3
   2953c:	4618      	mov	r0, r3
   2953e:	f7eb fc31 	bl	14da4 <__assert_func>
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   29542:	6823      	ldr	r3, [r4, #0]
   29544:	6818      	ldr	r0, [r3, #0]
   29546:	6883      	ldr	r3, [r0, #8]
   29548:	6861      	ldr	r1, [r4, #4]
   2954a:	3101      	adds	r1, #1
   2954c:	4798      	blx	r3
   2954e:	2100      	movs	r1, #0
   29550:	e7e2      	b.n	29518 <_cbor_value_decode_int64_internal+0x42>
    assert((val & SmallValueMask) == Value64Bit);
   29552:	f7eb f887 	bl	14664 <hal_debugger_connected>
   29556:	b100      	cbz	r0, 2955a <_cbor_value_decode_int64_internal+0x84>
   29558:	be01      	bkpt	0x0001
   2955a:	2300      	movs	r3, #0
   2955c:	461a      	mov	r2, r3
   2955e:	4619      	mov	r1, r3
   29560:	4618      	mov	r0, r3
   29562:	f7eb fc1f 	bl	14da4 <__assert_func>

00029566 <cbor_parser_init>:
{
   29566:	b510      	push	{r4, lr}
   29568:	4604      	mov	r4, r0
   2956a:	4618      	mov	r0, r3
    memset(parser, 0, sizeof(*parser));
   2956c:	2300      	movs	r3, #0
   2956e:	6053      	str	r3, [r2, #4]
   29570:	6093      	str	r3, [r2, #8]
    parser->d = d;
   29572:	6014      	str	r4, [r2, #0]
    parser->end = d->message_size;
   29574:	69a4      	ldr	r4, [r4, #24]
   29576:	6054      	str	r4, [r2, #4]
    parser->flags = flags;
   29578:	6091      	str	r1, [r2, #8]
    it->parser = parser;
   2957a:	6002      	str	r2, [r0, #0]
    it->offset = 0;
   2957c:	6043      	str	r3, [r0, #4]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   2957e:	2301      	movs	r3, #1
   29580:	6083      	str	r3, [r0, #8]
    return preparse_value(it);
   29582:	f7ff fd54 	bl	2902e <preparse_value>
}
   29586:	bd10      	pop	{r4, pc}

00029588 <cbor_value_advance_fixed>:
{
   29588:	b510      	push	{r4, lr}
   2958a:	4604      	mov	r4, r0
    assert(it->type != CborInvalidType);
   2958c:	7b80      	ldrb	r0, [r0, #14]
   2958e:	28ff      	cmp	r0, #255	; 0xff
   29590:	d008      	beq.n	295a4 <cbor_value_advance_fixed+0x1c>
    assert(is_fixed_type(it->type));
   29592:	f7ff fd38 	bl	29006 <is_fixed_type>
   29596:	b178      	cbz	r0, 295b8 <cbor_value_advance_fixed+0x30>
    if (!it->remaining)
   29598:	68a3      	ldr	r3, [r4, #8]
   2959a:	b1bb      	cbz	r3, 295cc <cbor_value_advance_fixed+0x44>
    return advance_internal(it);
   2959c:	4620      	mov	r0, r4
   2959e:	f7ff ff1f 	bl	293e0 <advance_internal>
}
   295a2:	bd10      	pop	{r4, pc}
    assert(it->type != CborInvalidType);
   295a4:	f7eb f85e 	bl	14664 <hal_debugger_connected>
   295a8:	b100      	cbz	r0, 295ac <cbor_value_advance_fixed+0x24>
   295aa:	be01      	bkpt	0x0001
   295ac:	2300      	movs	r3, #0
   295ae:	461a      	mov	r2, r3
   295b0:	4619      	mov	r1, r3
   295b2:	4618      	mov	r0, r3
   295b4:	f7eb fbf6 	bl	14da4 <__assert_func>
    assert(is_fixed_type(it->type));
   295b8:	f7eb f854 	bl	14664 <hal_debugger_connected>
   295bc:	b100      	cbz	r0, 295c0 <cbor_value_advance_fixed+0x38>
   295be:	be01      	bkpt	0x0001
   295c0:	2300      	movs	r3, #0
   295c2:	461a      	mov	r2, r3
   295c4:	4619      	mov	r1, r3
   295c6:	4618      	mov	r0, r3
   295c8:	f7eb fbec 	bl	14da4 <__assert_func>
        return CborErrorAdvancePastEOF;
   295cc:	2003      	movs	r0, #3
   295ce:	e7e8      	b.n	295a2 <cbor_value_advance_fixed+0x1a>

000295d0 <cbor_value_enter_container>:
{
   295d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   295d2:	4605      	mov	r5, r0
   295d4:	460c      	mov	r4, r1
{ return it->type == CborArrayType || it->type == CborMapType; }
   295d6:	7b83      	ldrb	r3, [r0, #14]
   295d8:	2b80      	cmp	r3, #128	; 0x80
   295da:	d021      	beq.n	29620 <cbor_value_enter_container+0x50>
   295dc:	2ba0      	cmp	r3, #160	; 0xa0
   295de:	d01d      	beq.n	2961c <cbor_value_enter_container+0x4c>
   295e0:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   295e2:	b1fb      	cbz	r3, 29624 <cbor_value_enter_container+0x54>
    *recursed = *it;
   295e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   295e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (it->flags & CborIteratorFlag_UnknownLength) {
   295ec:	7beb      	ldrb	r3, [r5, #15]
   295ee:	f013 0f04 	tst.w	r3, #4
   295f2:	d021      	beq.n	29638 <cbor_value_enter_container+0x68>
        recursed->remaining = UINT32_MAX;
   295f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   295f8:	60a3      	str	r3, [r4, #8]
        ++recursed->offset;
   295fa:	460b      	mov	r3, r1
   295fc:	3301      	adds	r3, #1
   295fe:	6063      	str	r3, [r4, #4]
        err = preparse_value(recursed);
   29600:	4620      	mov	r0, r4
   29602:	f7ff fd14 	bl	2902e <preparse_value>
        if (err != CborErrorUnexpectedBreak)
   29606:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   2960a:	d106      	bne.n	2961a <cbor_value_enter_container+0x4a>
        ++recursed->offset;
   2960c:	6863      	ldr	r3, [r4, #4]
   2960e:	3301      	adds	r3, #1
   29610:	6063      	str	r3, [r4, #4]
    recursed->type = CborInvalidType;
   29612:	23ff      	movs	r3, #255	; 0xff
   29614:	73a3      	strb	r3, [r4, #14]
    recursed->remaining = 0;
   29616:	2000      	movs	r0, #0
   29618:	60a0      	str	r0, [r4, #8]
}
   2961a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2961c:	2301      	movs	r3, #1
   2961e:	e7e0      	b.n	295e2 <cbor_value_enter_container+0x12>
   29620:	2301      	movs	r3, #1
   29622:	e7de      	b.n	295e2 <cbor_value_enter_container+0x12>
    assert(cbor_value_is_container(it));
   29624:	f7eb f81e 	bl	14664 <hal_debugger_connected>
   29628:	b100      	cbz	r0, 2962c <cbor_value_enter_container+0x5c>
   2962a:	be01      	bkpt	0x0001
   2962c:	2300      	movs	r3, #0
   2962e:	461a      	mov	r2, r3
   29630:	4619      	mov	r1, r3
   29632:	4618      	mov	r0, r3
   29634:	f7eb fbb6 	bl	14da4 <__assert_func>
        err = extract_number(recursed->parser, &recursed->offset, &len);
   29638:	6827      	ldr	r7, [r4, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   2963a:	6838      	ldr	r0, [r7, #0]
   2963c:	6803      	ldr	r3, [r0, #0]
   2963e:	6861      	ldr	r1, [r4, #4]
   29640:	4798      	blx	r3
   29642:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   29646:	6863      	ldr	r3, [r4, #4]
   29648:	3301      	adds	r3, #1
   2964a:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   2964c:	2817      	cmp	r0, #23
   2964e:	d915      	bls.n	2967c <cbor_value_enter_container+0xac>
    if (unlikely(additional_information > Value64Bit))
   29650:	281b      	cmp	r0, #27
   29652:	d841      	bhi.n	296d8 <cbor_value_enter_container+0x108>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   29654:	3818      	subs	r0, #24
   29656:	2601      	movs	r6, #1
   29658:	4086      	lsls	r6, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   2965a:	687b      	ldr	r3, [r7, #4]
   2965c:	6861      	ldr	r1, [r4, #4]
   2965e:	1a5b      	subs	r3, r3, r1
   29660:	429e      	cmp	r6, r3
   29662:	d83e      	bhi.n	296e2 <cbor_value_enter_container+0x112>
    } else if (bytesNeeded == 1) {
   29664:	2e01      	cmp	r6, #1
   29666:	d00d      	beq.n	29684 <cbor_value_enter_container+0xb4>
    } else if (bytesNeeded == 2) {
   29668:	2e02      	cmp	r6, #2
   2966a:	d029      	beq.n	296c0 <cbor_value_enter_container+0xf0>
    } else if (bytesNeeded == 4) {
   2966c:	2e04      	cmp	r6, #4
   2966e:	d02d      	beq.n	296cc <cbor_value_enter_container+0xfc>
        *len =  p->d->get64(p->d, *offset);
   29670:	6838      	ldr	r0, [r7, #0]
   29672:	68c3      	ldr	r3, [r0, #12]
   29674:	4798      	blx	r3
   29676:	4602      	mov	r2, r0
   29678:	460b      	mov	r3, r1
   2967a:	e008      	b.n	2968e <cbor_value_enter_container+0xbe>
        *len = additional_information;
   2967c:	b2c2      	uxtb	r2, r0
   2967e:	2300      	movs	r3, #0
        return CborNoError;
   29680:	2100      	movs	r1, #0
   29682:	e008      	b.n	29696 <cbor_value_enter_container+0xc6>
        *len = p->d->get8(p->d, *offset);
   29684:	6838      	ldr	r0, [r7, #0]
   29686:	6803      	ldr	r3, [r0, #0]
   29688:	4798      	blx	r3
   2968a:	4602      	mov	r2, r0
   2968c:	2300      	movs	r3, #0
    *offset += bytesNeeded;
   2968e:	6860      	ldr	r0, [r4, #4]
   29690:	4430      	add	r0, r6
   29692:	6060      	str	r0, [r4, #4]
    return CborNoError;
   29694:	2100      	movs	r1, #0
        assert(err == CborNoError);
   29696:	bb49      	cbnz	r1, 296ec <cbor_value_enter_container+0x11c>
        recursed->remaining = (uint32_t)len;
   29698:	60a2      	str	r2, [r4, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
   2969a:	2100      	movs	r1, #0
   2969c:	4299      	cmp	r1, r3
   2969e:	bf08      	it	eq
   296a0:	4292      	cmpeq	r2, r2
   296a2:	d12d      	bne.n	29700 <cbor_value_enter_container+0x130>
   296a4:	2b00      	cmp	r3, #0
   296a6:	bf08      	it	eq
   296a8:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   296ac:	d028      	beq.n	29700 <cbor_value_enter_container+0x130>
        if (recursed->type == CborMapType) {
   296ae:	7ba1      	ldrb	r1, [r4, #14]
   296b0:	29a0      	cmp	r1, #160	; 0xa0
   296b2:	d02a      	beq.n	2970a <cbor_value_enter_container+0x13a>
        if (len != 0)
   296b4:	4313      	orrs	r3, r2
   296b6:	d0ac      	beq.n	29612 <cbor_value_enter_container+0x42>
            return preparse_value(recursed);
   296b8:	4620      	mov	r0, r4
   296ba:	f7ff fcb8 	bl	2902e <preparse_value>
   296be:	e7ac      	b.n	2961a <cbor_value_enter_container+0x4a>
        *len =  p->d->get16(p->d, *offset);
   296c0:	6838      	ldr	r0, [r7, #0]
   296c2:	6843      	ldr	r3, [r0, #4]
   296c4:	4798      	blx	r3
   296c6:	4602      	mov	r2, r0
   296c8:	2300      	movs	r3, #0
   296ca:	e7e0      	b.n	2968e <cbor_value_enter_container+0xbe>
        *len =  p->d->get32(p->d, *offset);
   296cc:	6838      	ldr	r0, [r7, #0]
   296ce:	6883      	ldr	r3, [r0, #8]
   296d0:	4798      	blx	r3
   296d2:	4602      	mov	r2, r0
   296d4:	2300      	movs	r3, #0
   296d6:	e7da      	b.n	2968e <cbor_value_enter_container+0xbe>
    *len = 1;
   296d8:	2201      	movs	r2, #1
   296da:	2300      	movs	r3, #0
        return CborErrorIllegalNumber;
   296dc:	f240 1105 	movw	r1, #261	; 0x105
   296e0:	e7d9      	b.n	29696 <cbor_value_enter_container+0xc6>
    *len = 1;
   296e2:	2201      	movs	r2, #1
   296e4:	2300      	movs	r3, #0
        return CborErrorUnexpectedEOF;
   296e6:	f240 1101 	movw	r1, #257	; 0x101
   296ea:	e7d4      	b.n	29696 <cbor_value_enter_container+0xc6>
        assert(err == CborNoError);
   296ec:	f7ea ffba 	bl	14664 <hal_debugger_connected>
   296f0:	b100      	cbz	r0, 296f4 <cbor_value_enter_container+0x124>
   296f2:	be01      	bkpt	0x0001
   296f4:	2300      	movs	r3, #0
   296f6:	461a      	mov	r2, r3
   296f8:	4619      	mov	r1, r3
   296fa:	4618      	mov	r0, r3
   296fc:	f7eb fb52 	bl	14da4 <__assert_func>
            recursed->offset = it->offset;
   29700:	686b      	ldr	r3, [r5, #4]
   29702:	6063      	str	r3, [r4, #4]
            return CborErrorDataTooLarge;
   29704:	f44f 6080 	mov.w	r0, #1024	; 0x400
   29708:	e787      	b.n	2961a <cbor_value_enter_container+0x4a>
            if (recursed->remaining > UINT32_MAX / 2) {
   2970a:	2a00      	cmp	r2, #0
   2970c:	db02      	blt.n	29714 <cbor_value_enter_container+0x144>
            recursed->remaining *= 2;
   2970e:	0056      	lsls	r6, r2, #1
   29710:	60a6      	str	r6, [r4, #8]
   29712:	e7cf      	b.n	296b4 <cbor_value_enter_container+0xe4>
                recursed->offset = it->offset;
   29714:	686b      	ldr	r3, [r5, #4]
   29716:	6063      	str	r3, [r4, #4]
                return CborErrorDataTooLarge;
   29718:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2971c:	e77d      	b.n	2961a <cbor_value_enter_container+0x4a>

0002971e <cbor_value_leave_container>:
{
   2971e:	b508      	push	{r3, lr}
   29720:	7b83      	ldrb	r3, [r0, #14]
   29722:	2b80      	cmp	r3, #128	; 0x80
   29724:	d00d      	beq.n	29742 <cbor_value_leave_container+0x24>
   29726:	2ba0      	cmp	r3, #160	; 0xa0
   29728:	d009      	beq.n	2973e <cbor_value_leave_container+0x20>
   2972a:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   2972c:	b15b      	cbz	r3, 29746 <cbor_value_leave_container+0x28>
    assert(recursed->type == CborInvalidType);
   2972e:	7b8b      	ldrb	r3, [r1, #14]
   29730:	2bff      	cmp	r3, #255	; 0xff
   29732:	d112      	bne.n	2975a <cbor_value_leave_container+0x3c>
    it->offset = recursed->offset;
   29734:	684b      	ldr	r3, [r1, #4]
   29736:	6043      	str	r3, [r0, #4]
    return preparse_next_value(it);
   29738:	f7ff fd17 	bl	2916a <preparse_next_value>
}
   2973c:	bd08      	pop	{r3, pc}
   2973e:	2301      	movs	r3, #1
   29740:	e7f4      	b.n	2972c <cbor_value_leave_container+0xe>
   29742:	2301      	movs	r3, #1
   29744:	e7f2      	b.n	2972c <cbor_value_leave_container+0xe>
    assert(cbor_value_is_container(it));
   29746:	f7ea ff8d 	bl	14664 <hal_debugger_connected>
   2974a:	b100      	cbz	r0, 2974e <cbor_value_leave_container+0x30>
   2974c:	be01      	bkpt	0x0001
   2974e:	2300      	movs	r3, #0
   29750:	461a      	mov	r2, r3
   29752:	4619      	mov	r1, r3
   29754:	4618      	mov	r0, r3
   29756:	f7eb fb25 	bl	14da4 <__assert_func>
    assert(recursed->type == CborInvalidType);
   2975a:	f7ea ff83 	bl	14664 <hal_debugger_connected>
   2975e:	b100      	cbz	r0, 29762 <cbor_value_leave_container+0x44>
   29760:	be01      	bkpt	0x0001
   29762:	2300      	movs	r3, #0
   29764:	461a      	mov	r2, r3
   29766:	4619      	mov	r1, r3
   29768:	4618      	mov	r0, r3
   2976a:	f7eb fb1b 	bl	14da4 <__assert_func>
	...

00029770 <_cbor_value_copy_string>:
 * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
   29770:	b510      	push	{r4, lr}
   29772:	b084      	sub	sp, #16
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   29774:	460c      	mov	r4, r1
   29776:	b179      	cbz	r1, 29798 <_cbor_value_copy_string+0x28>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
   29778:	6801      	ldr	r1, [r0, #0]
   2977a:	6809      	ldr	r1, [r1, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   2977c:	6949      	ldr	r1, [r1, #20]
   2977e:	9101      	str	r1, [sp, #4]
   29780:	9300      	str	r3, [sp, #0]
   29782:	f10d 030f 	add.w	r3, sp, #15
   29786:	4621      	mov	r1, r4
   29788:	f7ff fd71 	bl	2926e <iterate_string_chunks>
    return err ? err :
   2978c:	b910      	cbnz	r0, 29794 <_cbor_value_copy_string+0x24>
                 copied_all ? CborNoError : CborErrorOutOfMemory;
   2978e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    return err ? err :
   29792:	b11b      	cbz	r3, 2979c <_cbor_value_copy_string+0x2c>
}
   29794:	b004      	add	sp, #16
   29796:	bd10      	pop	{r4, pc}
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   29798:	4902      	ldr	r1, [pc, #8]	; (297a4 <_cbor_value_copy_string+0x34>)
   2979a:	e7f0      	b.n	2977e <_cbor_value_copy_string+0xe>
    return err ? err :
   2979c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   297a0:	e7f8      	b.n	29794 <_cbor_value_copy_string+0x24>
   297a2:	bf00      	nop
   297a4:	0002902b 	.word	0x0002902b

000297a8 <advance_recursive>:
{
   297a8:	b570      	push	{r4, r5, r6, lr}
   297aa:	b086      	sub	sp, #24
   297ac:	4604      	mov	r4, r0
   297ae:	460d      	mov	r5, r1
    if (is_fixed_type(it->type))
   297b0:	7b86      	ldrb	r6, [r0, #14]
   297b2:	4630      	mov	r0, r6
   297b4:	f7ff fc27 	bl	29006 <is_fixed_type>
   297b8:	b9c0      	cbnz	r0, 297ec <advance_recursive+0x44>
   297ba:	2e80      	cmp	r6, #128	; 0x80
   297bc:	d01f      	beq.n	297fe <advance_recursive+0x56>
   297be:	2ea0      	cmp	r6, #160	; 0xa0
   297c0:	d01b      	beq.n	297fa <advance_recursive+0x52>
   297c2:	2300      	movs	r3, #0
    if (!cbor_value_is_container(it)) {
   297c4:	b1eb      	cbz	r3, 29802 <advance_recursive+0x5a>
    if (nestingLevel == CBOR_PARSER_MAX_RECURSIONS)
   297c6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   297ca:	d02b      	beq.n	29824 <advance_recursive+0x7c>
    err = cbor_value_enter_container(it, &recursed);
   297cc:	a902      	add	r1, sp, #8
   297ce:	4620      	mov	r0, r4
   297d0:	f7ff fefe 	bl	295d0 <cbor_value_enter_container>
    if (err)
   297d4:	4603      	mov	r3, r0
   297d6:	b968      	cbnz	r0, 297f4 <advance_recursive+0x4c>
{ return it->remaining == 0; }
   297d8:	9b04      	ldr	r3, [sp, #16]
    while (!cbor_value_at_end(&recursed)) {
   297da:	b1eb      	cbz	r3, 29818 <advance_recursive+0x70>
        err = advance_recursive(&recursed, nestingLevel + 1);
   297dc:	1c69      	adds	r1, r5, #1
   297de:	a802      	add	r0, sp, #8
   297e0:	f7ff ffe2 	bl	297a8 <advance_recursive>
        if (err)
   297e4:	4603      	mov	r3, r0
   297e6:	2800      	cmp	r0, #0
   297e8:	d0f6      	beq.n	297d8 <advance_recursive+0x30>
   297ea:	e003      	b.n	297f4 <advance_recursive+0x4c>
        return advance_internal(it);
   297ec:	4620      	mov	r0, r4
   297ee:	f7ff fdf7 	bl	293e0 <advance_internal>
   297f2:	4603      	mov	r3, r0
}
   297f4:	4618      	mov	r0, r3
   297f6:	b006      	add	sp, #24
   297f8:	bd70      	pop	{r4, r5, r6, pc}
{ return it->type == CborArrayType || it->type == CborMapType; }
   297fa:	2301      	movs	r3, #1
   297fc:	e7e2      	b.n	297c4 <advance_recursive+0x1c>
   297fe:	2301      	movs	r3, #1
   29800:	e7e0      	b.n	297c4 <advance_recursive+0x1c>
        size_t len = SIZE_MAX;
   29802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29806:	9301      	str	r3, [sp, #4]
        return _cbor_value_copy_string(it, NULL, &len, it);
   29808:	4623      	mov	r3, r4
   2980a:	aa01      	add	r2, sp, #4
   2980c:	2100      	movs	r1, #0
   2980e:	4620      	mov	r0, r4
   29810:	f7ff ffae 	bl	29770 <_cbor_value_copy_string>
   29814:	4603      	mov	r3, r0
   29816:	e7ed      	b.n	297f4 <advance_recursive+0x4c>
    return cbor_value_leave_container(it, &recursed);
   29818:	a902      	add	r1, sp, #8
   2981a:	4620      	mov	r0, r4
   2981c:	f7ff ff7f 	bl	2971e <cbor_value_leave_container>
   29820:	4603      	mov	r3, r0
   29822:	e7e7      	b.n	297f4 <advance_recursive+0x4c>
        return CborErrorNestingTooDeep;
   29824:	f240 4301 	movw	r3, #1025	; 0x401
   29828:	e7e4      	b.n	297f4 <advance_recursive+0x4c>

0002982a <cbor_value_advance>:
{
   2982a:	b508      	push	{r3, lr}
    assert(it->type != CborInvalidType);
   2982c:	7b83      	ldrb	r3, [r0, #14]
   2982e:	2bff      	cmp	r3, #255	; 0xff
   29830:	d005      	beq.n	2983e <cbor_value_advance+0x14>
    if (!it->remaining)
   29832:	6883      	ldr	r3, [r0, #8]
   29834:	b16b      	cbz	r3, 29852 <cbor_value_advance+0x28>
    return advance_recursive(it, 0);
   29836:	2100      	movs	r1, #0
   29838:	f7ff ffb6 	bl	297a8 <advance_recursive>
}
   2983c:	bd08      	pop	{r3, pc}
    assert(it->type != CborInvalidType);
   2983e:	f7ea ff11 	bl	14664 <hal_debugger_connected>
   29842:	b100      	cbz	r0, 29846 <cbor_value_advance+0x1c>
   29844:	be01      	bkpt	0x0001
   29846:	2300      	movs	r3, #0
   29848:	461a      	mov	r2, r3
   2984a:	4619      	mov	r1, r3
   2984c:	4618      	mov	r0, r3
   2984e:	f7eb faa9 	bl	14da4 <__assert_func>
        return CborErrorAdvancePastEOF;
   29852:	2003      	movs	r0, #3
   29854:	e7f2      	b.n	2983c <cbor_value_advance+0x12>

00029856 <cbor_value_calculate_string_length>:
{
   29856:	b508      	push	{r3, lr}
   29858:	460a      	mov	r2, r1
    *len = SIZE_MAX;
   2985a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2985e:	600b      	str	r3, [r1, #0]
    return _cbor_value_copy_string(value, NULL, len, NULL);
   29860:	2300      	movs	r3, #0
   29862:	4619      	mov	r1, r3
   29864:	f7ff ff84 	bl	29770 <_cbor_value_copy_string>
}
   29868:	bd08      	pop	{r3, pc}
	...

0002986c <hexDump>:
 *      by a colon (":"), enclosed in curly braces ("{" and "}").
 *      If the map length is indeterminate, an underscore ("_") appears immediately after the opening brace.
 */

static int hexDump(FILE *out, const uint8_t *buffer, size_t n)
{
   2986c:	b570      	push	{r4, r5, r6, lr}
   2986e:	4606      	mov	r6, r0
   29870:	460c      	mov	r4, r1
   29872:	4615      	mov	r5, r2
    while (n--) {
   29874:	462b      	mov	r3, r5
   29876:	3d01      	subs	r5, #1
   29878:	b143      	cbz	r3, 2988c <hexDump+0x20>
        int r = fprintf(out, "%02" PRIx8, *buffer++);
   2987a:	f814 2b01 	ldrb.w	r2, [r4], #1
   2987e:	4904      	ldr	r1, [pc, #16]	; (29890 <hexDump+0x24>)
   29880:	4630      	mov	r0, r6
   29882:	f004 fb7d 	bl	2df80 <fprintf>
        if (r < 0)
   29886:	2800      	cmp	r0, #0
   29888:	daf4      	bge.n	29874 <hexDump+0x8>
   2988a:	e000      	b.n	2988e <hexDump+0x22>
            return r;
    }
    return 0;   /* should be n * 2, but we don't have the original n anymore */
   2988c:	2000      	movs	r0, #0
}
   2988e:	bd70      	pop	{r4, r5, r6, pc}
   29890:	00031704 	.word	0x00031704

00029894 <utf8EscapedDump>:

/* This function decodes buffer as UTF-8 and prints as escaped UTF-16.
 * On UTF-8 decoding error, it returns CborErrorInvalidUtf8TextString */
static int utf8EscapedDump(FILE *out, const char *buffer, size_t n)
{
   29894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29896:	4606      	mov	r6, r0
    uint32_t uc;
    while (n--) {
   29898:	e07e      	b.n	29998 <utf8EscapedDump+0x104>
        uc = (uint8_t)*buffer++;
        if (uc < 0x80) {
            /* single-byte UTF-8 */
            if (uc < 0x7f && uc >= 0x20 && uc != '\\' && uc != '"') {
                if (fprintf(out, "%c", (char)uc) < 0)
   2989a:	4985      	ldr	r1, [pc, #532]	; (29ab0 <utf8EscapedDump+0x21c>)
   2989c:	4630      	mov	r0, r6
   2989e:	f004 fb6f 	bl	2df80 <fprintf>
   298a2:	2800      	cmp	r0, #0
   298a4:	f2c0 80e0 	blt.w	29a68 <utf8EscapedDump+0x1d4>
        uc = (uint8_t)*buffer++;
   298a8:	4629      	mov	r1, r5
   298aa:	e074      	b.n	29996 <utf8EscapedDump+0x102>
                continue;
            }

            /* print as an escape sequence */
            char escaped = (char)uc;
            switch (uc) {
   298ac:	2a5c      	cmp	r2, #92	; 0x5c
   298ae:	d169      	bne.n	29984 <utf8EscapedDump+0xf0>
                escaped = 't';
                break;
            default:
                goto print_utf16;
            }
            if (fprintf(out, "\\%c", escaped) < 0)
   298b0:	4980      	ldr	r1, [pc, #512]	; (29ab4 <utf8EscapedDump+0x220>)
   298b2:	4630      	mov	r0, r6
   298b4:	f004 fb64 	bl	2df80 <fprintf>
   298b8:	2800      	cmp	r0, #0
   298ba:	f2c0 80d7 	blt.w	29a6c <utf8EscapedDump+0x1d8>
        uc = (uint8_t)*buffer++;
   298be:	4629      	mov	r1, r5
   298c0:	e069      	b.n	29996 <utf8EscapedDump+0x102>
                escaped = 'f';
   298c2:	2266      	movs	r2, #102	; 0x66
                break;
   298c4:	e7f4      	b.n	298b0 <utf8EscapedDump+0x1c>
                escaped = 'n';
   298c6:	226e      	movs	r2, #110	; 0x6e
                break;
   298c8:	e7f2      	b.n	298b0 <utf8EscapedDump+0x1c>
                escaped = 'r';
   298ca:	2272      	movs	r2, #114	; 0x72
                break;
   298cc:	e7f0      	b.n	298b0 <utf8EscapedDump+0x1c>
                escaped = 't';
   298ce:	2274      	movs	r2, #116	; 0x74
                break;
   298d0:	e7ee      	b.n	298b0 <utf8EscapedDump+0x1c>
                escaped = 'b';
   298d2:	2262      	movs	r2, #98	; 0x62
   298d4:	e7ec      	b.n	298b0 <utf8EscapedDump+0x1c>
        }

        /* multi-byte UTF-8, decode it */
        unsigned charsNeeded;
        uint32_t min_uc;
        if (unlikely(uc <= 0xC1))
   298d6:	2ac1      	cmp	r2, #193	; 0xc1
   298d8:	f240 80ca 	bls.w	29a70 <utf8EscapedDump+0x1dc>
            return CborErrorInvalidUtf8TextString;
        if (uc < 0xE0) {
   298dc:	2adf      	cmp	r2, #223	; 0xdf
   298de:	d830      	bhi.n	29942 <utf8EscapedDump+0xae>
            /* two-byte UTF-8 */
            charsNeeded = 2;
            min_uc = 0x80;
            uc &= 0x1f;
   298e0:	f002 021f 	and.w	r2, r2, #31
            min_uc = 0x80;
   298e4:	f04f 0c80 	mov.w	ip, #128	; 0x80
            charsNeeded = 2;
   298e8:	2302      	movs	r3, #2
            uc &= 0x07;
        } else {
            return CborErrorInvalidUtf8TextString;
        }

        if (n < charsNeeded - 1)
   298ea:	1e58      	subs	r0, r3, #1
   298ec:	42b8      	cmp	r0, r7
   298ee:	f200 80c5 	bhi.w	29a7c <utf8EscapedDump+0x1e8>
            return CborErrorInvalidUtf8TextString;

        /* first continuation character */
        uint8_t b = (uint8_t)*buffer++;
   298f2:	3102      	adds	r1, #2
   298f4:	782c      	ldrb	r4, [r5, #0]
        if ((b & 0xc0) != 0x80)
   298f6:	f004 00c0 	and.w	r0, r4, #192	; 0xc0
   298fa:	2880      	cmp	r0, #128	; 0x80
   298fc:	f040 80c1 	bne.w	29a82 <utf8EscapedDump+0x1ee>
            return CborErrorInvalidUtf8TextString;
        uc <<= 6;
        uc |= b & 0x3f;
   29900:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   29904:	ea44 1482 	orr.w	r4, r4, r2, lsl #6

        if (charsNeeded > 2) {
   29908:	2b02      	cmp	r3, #2
   2990a:	d92b      	bls.n	29964 <utf8EscapedDump+0xd0>
            /* second continuation character */
            b = (uint8_t)*buffer++;
   2990c:	1ca8      	adds	r0, r5, #2
   2990e:	786a      	ldrb	r2, [r5, #1]
            if ((b & 0xc0) != 0x80)
   29910:	f002 01c0 	and.w	r1, r2, #192	; 0xc0
   29914:	2980      	cmp	r1, #128	; 0x80
   29916:	f040 80b7 	bne.w	29a88 <utf8EscapedDump+0x1f4>
                return CborErrorInvalidUtf8TextString;
            uc <<= 6;
            uc |= b & 0x3f;
   2991a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   2991e:	ea42 1484 	orr.w	r4, r2, r4, lsl #6

            if (charsNeeded > 3) {
   29922:	2b03      	cmp	r3, #3
   29924:	f240 808c 	bls.w	29a40 <utf8EscapedDump+0x1ac>
                /* third continuation character */
                b = (uint8_t)*buffer++;
   29928:	1ce8      	adds	r0, r5, #3
   2992a:	78aa      	ldrb	r2, [r5, #2]
                if ((b & 0xc0) != 0x80)
   2992c:	f002 01c0 	and.w	r1, r2, #192	; 0xc0
   29930:	2980      	cmp	r1, #128	; 0x80
   29932:	f040 80ac 	bne.w	29a8e <utf8EscapedDump+0x1fa>
                    return CborErrorInvalidUtf8TextString;
                uc <<= 6;
                uc |= b & 0x3f;
   29936:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   2993a:	ea42 1484 	orr.w	r4, r2, r4, lsl #6
                b = (uint8_t)*buffer++;
   2993e:	4605      	mov	r5, r0
   29940:	e011      	b.n	29966 <utf8EscapedDump+0xd2>
        } else if (uc < 0xF0) {
   29942:	2aef      	cmp	r2, #239	; 0xef
   29944:	d805      	bhi.n	29952 <utf8EscapedDump+0xbe>
            uc &= 0x0f;
   29946:	f002 020f 	and.w	r2, r2, #15
            min_uc = 0x800;
   2994a:	f44f 6c00 	mov.w	ip, #2048	; 0x800
            charsNeeded = 3;
   2994e:	2303      	movs	r3, #3
   29950:	e7cb      	b.n	298ea <utf8EscapedDump+0x56>
        } else if (uc < 0xF5) {
   29952:	2af4      	cmp	r2, #244	; 0xf4
   29954:	f200 808f 	bhi.w	29a76 <utf8EscapedDump+0x1e2>
            uc &= 0x07;
   29958:	f002 0207 	and.w	r2, r2, #7
            min_uc = 0x10000;
   2995c:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
            charsNeeded = 4;
   29960:	2304      	movs	r3, #4
   29962:	e7c2      	b.n	298ea <utf8EscapedDump+0x56>
        uint8_t b = (uint8_t)*buffer++;
   29964:	460d      	mov	r5, r1
            }
        }

        /* overlong sequence? surrogate pair? out or range? */
        if (uc < min_uc || uc - 0xd800U < 2048U || uc > 0x10ffff)
   29966:	4564      	cmp	r4, ip
   29968:	f0c0 8094 	bcc.w	29a94 <utf8EscapedDump+0x200>
   2996c:	f5a4 4258 	sub.w	r2, r4, #55296	; 0xd800
   29970:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   29974:	f0c0 8091 	bcc.w	29a9a <utf8EscapedDump+0x206>
   29978:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
   2997c:	f080 8090 	bcs.w	29aa0 <utf8EscapedDump+0x20c>
            return CborErrorInvalidUtf8TextString;

        /* now print the sequence */
        if (charsNeeded > 3) {
   29980:	2b03      	cmp	r3, #3
   29982:	d85f      	bhi.n	29a44 <utf8EscapedDump+0x1b0>
                        (uc % 0x0400) + 0xdc00) < 0)
                return CborErrorIO;
        } else {
print_utf16:
            /* no surrogate pair needed */
            if (fprintf(out, "\\u%04" PRIX32, uc) < 0)
   29984:	4622      	mov	r2, r4
   29986:	494c      	ldr	r1, [pc, #304]	; (29ab8 <utf8EscapedDump+0x224>)
   29988:	4630      	mov	r0, r6
   2998a:	f004 faf9 	bl	2df80 <fprintf>
   2998e:	2800      	cmp	r0, #0
   29990:	f2c0 808b 	blt.w	29aaa <utf8EscapedDump+0x216>
   29994:	4629      	mov	r1, r5
   29996:	463a      	mov	r2, r7
    while (n--) {
   29998:	1e57      	subs	r7, r2, #1
   2999a:	2a00      	cmp	r2, #0
   2999c:	d062      	beq.n	29a64 <utf8EscapedDump+0x1d0>
        uc = (uint8_t)*buffer++;
   2999e:	460d      	mov	r5, r1
   299a0:	f815 2b01 	ldrb.w	r2, [r5], #1
   299a4:	4614      	mov	r4, r2
        if (uc < 0x80) {
   299a6:	2a7f      	cmp	r2, #127	; 0x7f
   299a8:	d895      	bhi.n	298d6 <utf8EscapedDump+0x42>
            if (uc < 0x7f && uc >= 0x20 && uc != '\\' && uc != '"') {
   299aa:	f1a2 0320 	sub.w	r3, r2, #32
   299ae:	2b5e      	cmp	r3, #94	; 0x5e
   299b0:	d804      	bhi.n	299bc <utf8EscapedDump+0x128>
   299b2:	2a5c      	cmp	r2, #92	; 0x5c
   299b4:	d002      	beq.n	299bc <utf8EscapedDump+0x128>
   299b6:	2a22      	cmp	r2, #34	; 0x22
   299b8:	f47f af6f 	bne.w	2989a <utf8EscapedDump+0x6>
            switch (uc) {
   299bc:	2a22      	cmp	r2, #34	; 0x22
   299be:	f63f af75 	bhi.w	298ac <utf8EscapedDump+0x18>
   299c2:	2a08      	cmp	r2, #8
   299c4:	d3de      	bcc.n	29984 <utf8EscapedDump+0xf0>
   299c6:	f1a2 0308 	sub.w	r3, r2, #8
   299ca:	2b1a      	cmp	r3, #26
   299cc:	d8da      	bhi.n	29984 <utf8EscapedDump+0xf0>
   299ce:	a101      	add	r1, pc, #4	; (adr r1, 299d4 <utf8EscapedDump+0x140>)
   299d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   299d4:	000298d3 	.word	0x000298d3
   299d8:	000298cf 	.word	0x000298cf
   299dc:	000298c7 	.word	0x000298c7
   299e0:	00029985 	.word	0x00029985
   299e4:	000298c3 	.word	0x000298c3
   299e8:	000298cb 	.word	0x000298cb
   299ec:	00029985 	.word	0x00029985
   299f0:	00029985 	.word	0x00029985
   299f4:	00029985 	.word	0x00029985
   299f8:	00029985 	.word	0x00029985
   299fc:	00029985 	.word	0x00029985
   29a00:	00029985 	.word	0x00029985
   29a04:	00029985 	.word	0x00029985
   29a08:	00029985 	.word	0x00029985
   29a0c:	00029985 	.word	0x00029985
   29a10:	00029985 	.word	0x00029985
   29a14:	00029985 	.word	0x00029985
   29a18:	00029985 	.word	0x00029985
   29a1c:	00029985 	.word	0x00029985
   29a20:	00029985 	.word	0x00029985
   29a24:	00029985 	.word	0x00029985
   29a28:	00029985 	.word	0x00029985
   29a2c:	00029985 	.word	0x00029985
   29a30:	00029985 	.word	0x00029985
   29a34:	00029985 	.word	0x00029985
   29a38:	00029985 	.word	0x00029985
   29a3c:	000298b1 	.word	0x000298b1
            b = (uint8_t)*buffer++;
   29a40:	4605      	mov	r5, r0
   29a42:	e790      	b.n	29966 <utf8EscapedDump+0xd2>
                        (uc % 0x0400) + 0xdc00) < 0)
   29a44:	f3c4 0309 	ubfx	r3, r4, #0, #10
            if (fprintf(out, "\\u%04" PRIX32 "\\u%04" PRIX32,
   29a48:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
   29a4c:	f24d 72c0 	movw	r2, #55232	; 0xd7c0
   29a50:	eb02 2294 	add.w	r2, r2, r4, lsr #10
   29a54:	4919      	ldr	r1, [pc, #100]	; (29abc <utf8EscapedDump+0x228>)
   29a56:	4630      	mov	r0, r6
   29a58:	f004 fa92 	bl	2df80 <fprintf>
   29a5c:	2800      	cmp	r0, #0
   29a5e:	db22      	blt.n	29aa6 <utf8EscapedDump+0x212>
   29a60:	4629      	mov	r1, r5
   29a62:	e798      	b.n	29996 <utf8EscapedDump+0x102>
                return CborErrorIO;
        }
    }
    return CborNoError;
   29a64:	2000      	movs	r0, #0
   29a66:	e002      	b.n	29a6e <utf8EscapedDump+0x1da>
                    return CborErrorIO;
   29a68:	2004      	movs	r0, #4
   29a6a:	e000      	b.n	29a6e <utf8EscapedDump+0x1da>
                return CborErrorIO;
   29a6c:	2004      	movs	r0, #4
}
   29a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return CborErrorInvalidUtf8TextString;
   29a70:	f44f 7001 	mov.w	r0, #516	; 0x204
   29a74:	e7fb      	b.n	29a6e <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   29a76:	f44f 7001 	mov.w	r0, #516	; 0x204
   29a7a:	e7f8      	b.n	29a6e <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   29a7c:	f44f 7001 	mov.w	r0, #516	; 0x204
   29a80:	e7f5      	b.n	29a6e <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   29a82:	f44f 7001 	mov.w	r0, #516	; 0x204
   29a86:	e7f2      	b.n	29a6e <utf8EscapedDump+0x1da>
                return CborErrorInvalidUtf8TextString;
   29a88:	f44f 7001 	mov.w	r0, #516	; 0x204
   29a8c:	e7ef      	b.n	29a6e <utf8EscapedDump+0x1da>
                    return CborErrorInvalidUtf8TextString;
   29a8e:	f44f 7001 	mov.w	r0, #516	; 0x204
   29a92:	e7ec      	b.n	29a6e <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   29a94:	f44f 7001 	mov.w	r0, #516	; 0x204
   29a98:	e7e9      	b.n	29a6e <utf8EscapedDump+0x1da>
   29a9a:	f44f 7001 	mov.w	r0, #516	; 0x204
   29a9e:	e7e6      	b.n	29a6e <utf8EscapedDump+0x1da>
   29aa0:	f44f 7001 	mov.w	r0, #516	; 0x204
   29aa4:	e7e3      	b.n	29a6e <utf8EscapedDump+0x1da>
                return CborErrorIO;
   29aa6:	2004      	movs	r0, #4
   29aa8:	e7e1      	b.n	29a6e <utf8EscapedDump+0x1da>
                return CborErrorIO;
   29aaa:	2004      	movs	r0, #4
   29aac:	e7df      	b.n	29a6e <utf8EscapedDump+0x1da>
   29aae:	bf00      	nop
   29ab0:	0003170c 	.word	0x0003170c
   29ab4:	00031710 	.word	0x00031710
   29ab8:	00031724 	.word	0x00031724
   29abc:	00031714 	.word	0x00031714

00029ac0 <value_to_pretty>:
    }
    return CborNoError;
}

static CborError value_to_pretty(FILE *out, CborValue *it)
{
   29ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
   29ac2:	b087      	sub	sp, #28
   29ac4:	4607      	mov	r7, r0
   29ac6:	460d      	mov	r5, r1
{ return (CborType)value->type; }
   29ac8:	7b8c      	ldrb	r4, [r1, #14]
    CborError err;
    CborType type = cbor_value_get_type(it);
    switch (type) {
   29aca:	2cc0      	cmp	r4, #192	; 0xc0
   29acc:	f000 8138 	beq.w	29d40 <value_to_pretty+0x280>
   29ad0:	d849      	bhi.n	29b66 <value_to_pretty+0xa6>
   29ad2:	2c60      	cmp	r4, #96	; 0x60
   29ad4:	f000 80f5 	beq.w	29cc2 <value_to_pretty+0x202>
   29ad8:	d920      	bls.n	29b1c <value_to_pretty+0x5c>
   29ada:	2c80      	cmp	r4, #128	; 0x80
   29adc:	d002      	beq.n	29ae4 <value_to_pretty+0x24>
   29ade:	2ca0      	cmp	r4, #160	; 0xa0
   29ae0:	f040 81c2 	bne.w	29e68 <value_to_pretty+0x3a8>
    case CborArrayType:
    case CborMapType: {
        /* recursive type */
        CborValue recursed;

        if (fprintf(out, type == CborArrayType ? "[" : "{") < 0)
   29ae4:	2c80      	cmp	r4, #128	; 0x80
   29ae6:	d062      	beq.n	29bae <value_to_pretty+0xee>
   29ae8:	49ac      	ldr	r1, [pc, #688]	; (29d9c <value_to_pretty+0x2dc>)
   29aea:	4638      	mov	r0, r7
   29aec:	f004 fa48 	bl	2df80 <fprintf>
   29af0:	2800      	cmp	r0, #0
   29af2:	db7d      	blt.n	29bf0 <value_to_pretty+0x130>
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   29af4:	7beb      	ldrb	r3, [r5, #15]
            return CborErrorIO;
        if (!cbor_value_is_length_known(it)) {
   29af6:	f013 0f04 	tst.w	r3, #4
   29afa:	d005      	beq.n	29b08 <value_to_pretty+0x48>
            if (fprintf(out, "_ ") < 0)
   29afc:	49a8      	ldr	r1, [pc, #672]	; (29da0 <value_to_pretty+0x2e0>)
   29afe:	4638      	mov	r0, r7
   29b00:	f004 fa3e 	bl	2df80 <fprintf>
   29b04:	2800      	cmp	r0, #0
   29b06:	db75      	blt.n	29bf4 <value_to_pretty+0x134>
                return CborErrorIO;
        }

        err = cbor_value_enter_container(it, &recursed);
   29b08:	a902      	add	r1, sp, #8
   29b0a:	4628      	mov	r0, r5
   29b0c:	f7ff fd60 	bl	295d0 <cbor_value_enter_container>
        if (err) {
   29b10:	4606      	mov	r6, r0
   29b12:	2800      	cmp	r0, #0
   29b14:	d04d      	beq.n	29bb2 <value_to_pretty+0xf2>
            it->offset = recursed.offset;
   29b16:	9b03      	ldr	r3, [sp, #12]
   29b18:	606b      	str	r3, [r5, #4]
            return err;       /* parse error */
   29b1a:	e181      	b.n	29e20 <value_to_pretty+0x360>
    switch (type) {
   29b1c:	2c00      	cmp	r4, #0
   29b1e:	d06b      	beq.n	29bf8 <value_to_pretty+0x138>
   29b20:	2c40      	cmp	r4, #64	; 0x40
   29b22:	f040 81a1 	bne.w	29e68 <value_to_pretty+0x3a8>
        }
        break;
    }

    case CborByteStringType:{
        size_t n = 0;
   29b26:	2300      	movs	r3, #0
   29b28:	9301      	str	r3, [sp, #4]
{ return value->type == CborByteStringType; }
   29b2a:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_byte_string(value));
   29b2c:	2b40      	cmp	r3, #64	; 0x40
   29b2e:	f040 80ab 	bne.w	29c88 <value_to_pretty+0x1c8>
    return _cbor_value_dup_string(value, (void **)buffer, buflen, next);
   29b32:	460b      	mov	r3, r1
   29b34:	aa01      	add	r2, sp, #4
   29b36:	a902      	add	r1, sp, #8
   29b38:	4628      	mov	r0, r5
   29b3a:	f000 f9e5 	bl	29f08 <_cbor_value_dup_string>
        uint8_t *buffer;
        err = cbor_value_dup_byte_string(it, &buffer, &n, it);
        if (err)
   29b3e:	4606      	mov	r6, r0
   29b40:	2800      	cmp	r0, #0
   29b42:	f040 816d 	bne.w	29e20 <value_to_pretty+0x360>
            return err;

        bool failed = fprintf(out, "h'") < 0 || hexDump(out, buffer, n) < 0 || fprintf(out, "'") < 0;
   29b46:	4997      	ldr	r1, [pc, #604]	; (29da4 <value_to_pretty+0x2e4>)
   29b48:	4638      	mov	r0, r7
   29b4a:	f004 fa19 	bl	2df80 <fprintf>
   29b4e:	2800      	cmp	r0, #0
   29b50:	f280 80a4 	bge.w	29c9c <value_to_pretty+0x1dc>
   29b54:	2401      	movs	r4, #1
        free(buffer);
   29b56:	9802      	ldr	r0, [sp, #8]
   29b58:	f003 fe4e 	bl	2d7f8 <free>
        return failed ? CborErrorIO : CborNoError;
   29b5c:	2c00      	cmp	r4, #0
   29b5e:	f000 815f 	beq.w	29e20 <value_to_pretty+0x360>
   29b62:	2604      	movs	r6, #4
   29b64:	e15c      	b.n	29e20 <value_to_pretty+0x360>
    switch (type) {
   29b66:	2cf7      	cmp	r4, #247	; 0xf7
   29b68:	f200 817e 	bhi.w	29e68 <value_to_pretty+0x3a8>
   29b6c:	2ce0      	cmp	r4, #224	; 0xe0
   29b6e:	f0c0 817b 	bcc.w	29e68 <value_to_pretty+0x3a8>
   29b72:	3ce0      	subs	r4, #224	; 0xe0
   29b74:	2c17      	cmp	r4, #23
   29b76:	f200 8177 	bhi.w	29e68 <value_to_pretty+0x3a8>
   29b7a:	e8df f014 	tbh	[pc, r4, lsl #1]
   29b7e:	0131      	.short	0x0131
   29b80:	01750175 	.word	0x01750175
   29b84:	01750175 	.word	0x01750175
   29b88:	01750175 	.word	0x01750175
   29b8c:	01750175 	.word	0x01750175
   29b90:	01750175 	.word	0x01750175
   29b94:	01750175 	.word	0x01750175
   29b98:	01750175 	.word	0x01750175
   29b9c:	01750175 	.word	0x01750175
   29ba0:	01750175 	.word	0x01750175
   29ba4:	01750175 	.word	0x01750175
   29ba8:	0147015c 	.word	0x0147015c
   29bac:	0154      	.short	0x0154
        if (fprintf(out, type == CborArrayType ? "[" : "{") < 0)
   29bae:	497e      	ldr	r1, [pc, #504]	; (29da8 <value_to_pretty+0x2e8>)
   29bb0:	e79b      	b.n	29aea <value_to_pretty+0x2a>
        err = container_to_pretty(out, &recursed, type);
   29bb2:	4622      	mov	r2, r4
   29bb4:	a902      	add	r1, sp, #8
   29bb6:	4638      	mov	r0, r7
   29bb8:	f000 f970 	bl	29e9c <container_to_pretty>
        if (err) {
   29bbc:	4606      	mov	r6, r0
   29bbe:	b110      	cbz	r0, 29bc6 <value_to_pretty+0x106>
            it->offset = recursed.offset;
   29bc0:	9b03      	ldr	r3, [sp, #12]
   29bc2:	606b      	str	r3, [r5, #4]
            return err;       /* parse error */
   29bc4:	e12c      	b.n	29e20 <value_to_pretty+0x360>
        err = cbor_value_leave_container(it, &recursed);
   29bc6:	a902      	add	r1, sp, #8
   29bc8:	4628      	mov	r0, r5
   29bca:	f7ff fda8 	bl	2971e <cbor_value_leave_container>
        if (err)
   29bce:	4606      	mov	r6, r0
   29bd0:	2800      	cmp	r0, #0
   29bd2:	f040 8125 	bne.w	29e20 <value_to_pretty+0x360>
        if (fprintf(out, type == CborArrayType ? "]" : "}") < 0)
   29bd6:	2c80      	cmp	r4, #128	; 0x80
   29bd8:	d008      	beq.n	29bec <value_to_pretty+0x12c>
   29bda:	4974      	ldr	r1, [pc, #464]	; (29dac <value_to_pretty+0x2ec>)
   29bdc:	4638      	mov	r0, r7
   29bde:	f004 f9cf 	bl	2df80 <fprintf>
   29be2:	2800      	cmp	r0, #0
   29be4:	f280 811c 	bge.w	29e20 <value_to_pretty+0x360>
            return CborErrorIO;
   29be8:	2604      	movs	r6, #4
   29bea:	e119      	b.n	29e20 <value_to_pretty+0x360>
        if (fprintf(out, type == CborArrayType ? "]" : "}") < 0)
   29bec:	4970      	ldr	r1, [pc, #448]	; (29db0 <value_to_pretty+0x2f0>)
   29bee:	e7f5      	b.n	29bdc <value_to_pretty+0x11c>
            return CborErrorIO;
   29bf0:	2604      	movs	r6, #4
   29bf2:	e115      	b.n	29e20 <value_to_pretty+0x360>
                return CborErrorIO;
   29bf4:	2604      	movs	r6, #4
   29bf6:	e113      	b.n	29e20 <value_to_pretty+0x360>
{ return value->type == CborIntegerType; }
   29bf8:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_integer(value));
   29bfa:	b96b      	cbnz	r3, 29c18 <value_to_pretty+0x158>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   29bfc:	7bcb      	ldrb	r3, [r1, #15]
                _cbor_value_decode_int64_internal(value) : value->extra;
   29bfe:	f013 0f01 	tst.w	r3, #1
   29c02:	d113      	bne.n	29c2c <value_to_pretty+0x16c>
   29c04:	898a      	ldrh	r2, [r1, #12]
   29c06:	2300      	movs	r3, #0
{ return value->type == CborIntegerType; }
   29c08:	7ba9      	ldrb	r1, [r5, #14]
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   29c0a:	b9a9      	cbnz	r1, 29c38 <value_to_pretty+0x178>
   29c0c:	7be9      	ldrb	r1, [r5, #15]
   29c0e:	f011 0f02 	tst.w	r1, #2
   29c12:	d027      	beq.n	29c64 <value_to_pretty+0x1a4>
   29c14:	2100      	movs	r1, #0
   29c16:	e010      	b.n	29c3a <value_to_pretty+0x17a>
    assert(cbor_value_is_integer(value));
   29c18:	f7ea fd24 	bl	14664 <hal_debugger_connected>
   29c1c:	b100      	cbz	r0, 29c20 <value_to_pretty+0x160>
   29c1e:	be01      	bkpt	0x0001
   29c20:	2300      	movs	r3, #0
   29c22:	461a      	mov	r2, r3
   29c24:	4619      	mov	r1, r3
   29c26:	4618      	mov	r0, r3
   29c28:	f7eb f8bc 	bl	14da4 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   29c2c:	4608      	mov	r0, r1
   29c2e:	f7ff fc52 	bl	294d6 <_cbor_value_decode_int64_internal>
   29c32:	4602      	mov	r2, r0
   29c34:	460b      	mov	r3, r1
   29c36:	e7e7      	b.n	29c08 <value_to_pretty+0x148>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   29c38:	2100      	movs	r1, #0
        if (cbor_value_is_unsigned_integer(it)) {
   29c3a:	b9a9      	cbnz	r1, 29c68 <value_to_pretty+0x1a8>
            if (++val) {                /* unsigned overflow may happen */
   29c3c:	1c50      	adds	r0, r2, #1
   29c3e:	f143 0100 	adc.w	r1, r3, #0
   29c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29c46:	bf08      	it	eq
   29c48:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   29c4c:	d014      	beq.n	29c78 <value_to_pretty+0x1b8>
                if (fprintf(out, "-%" PRIu64, val) < 0)
   29c4e:	4602      	mov	r2, r0
   29c50:	460b      	mov	r3, r1
   29c52:	4958      	ldr	r1, [pc, #352]	; (29db4 <value_to_pretty+0x2f4>)
   29c54:	4638      	mov	r0, r7
   29c56:	f004 f993 	bl	2df80 <fprintf>
   29c5a:	2800      	cmp	r0, #0
   29c5c:	f280 80dc 	bge.w	29e18 <value_to_pretty+0x358>
        break;

    case CborBooleanType: {
        bool val;
        cbor_value_get_boolean(it, &val);       /* can't fail */
        if (fprintf(out, val ? "true" : "false") < 0)
   29c60:	2604      	movs	r6, #4
   29c62:	e0dd      	b.n	29e20 <value_to_pretty+0x360>
   29c64:	2101      	movs	r1, #1
   29c66:	e7e8      	b.n	29c3a <value_to_pretty+0x17a>
            if (fprintf(out, "%" PRIu64, val) < 0)
   29c68:	4953      	ldr	r1, [pc, #332]	; (29db8 <value_to_pretty+0x2f8>)
   29c6a:	4638      	mov	r0, r7
   29c6c:	f004 f988 	bl	2df80 <fprintf>
   29c70:	2800      	cmp	r0, #0
   29c72:	f280 80d1 	bge.w	29e18 <value_to_pretty+0x358>
   29c76:	e7f3      	b.n	29c60 <value_to_pretty+0x1a0>
                if (fprintf(out, "-18446744073709551616") < 0)
   29c78:	4950      	ldr	r1, [pc, #320]	; (29dbc <value_to_pretty+0x2fc>)
   29c7a:	4638      	mov	r0, r7
   29c7c:	f004 f980 	bl	2df80 <fprintf>
   29c80:	2800      	cmp	r0, #0
   29c82:	f280 80c9 	bge.w	29e18 <value_to_pretty+0x358>
   29c86:	e7eb      	b.n	29c60 <value_to_pretty+0x1a0>
    assert(cbor_value_is_byte_string(value));
   29c88:	f7ea fcec 	bl	14664 <hal_debugger_connected>
   29c8c:	b100      	cbz	r0, 29c90 <value_to_pretty+0x1d0>
   29c8e:	be01      	bkpt	0x0001
   29c90:	2300      	movs	r3, #0
   29c92:	461a      	mov	r2, r3
   29c94:	4619      	mov	r1, r3
   29c96:	4618      	mov	r0, r3
   29c98:	f7eb f884 	bl	14da4 <__assert_func>
        bool failed = fprintf(out, "h'") < 0 || hexDump(out, buffer, n) < 0 || fprintf(out, "'") < 0;
   29c9c:	9a01      	ldr	r2, [sp, #4]
   29c9e:	9902      	ldr	r1, [sp, #8]
   29ca0:	4638      	mov	r0, r7
   29ca2:	f7ff fde3 	bl	2986c <hexDump>
   29ca6:	2800      	cmp	r0, #0
   29ca8:	da01      	bge.n	29cae <value_to_pretty+0x1ee>
   29caa:	2401      	movs	r4, #1
   29cac:	e753      	b.n	29b56 <value_to_pretty+0x96>
   29cae:	4944      	ldr	r1, [pc, #272]	; (29dc0 <value_to_pretty+0x300>)
   29cb0:	4638      	mov	r0, r7
   29cb2:	f004 f965 	bl	2df80 <fprintf>
   29cb6:	2800      	cmp	r0, #0
   29cb8:	db01      	blt.n	29cbe <value_to_pretty+0x1fe>
   29cba:	2400      	movs	r4, #0
   29cbc:	e74b      	b.n	29b56 <value_to_pretty+0x96>
   29cbe:	2401      	movs	r4, #1
   29cc0:	e749      	b.n	29b56 <value_to_pretty+0x96>
        size_t n = 0;
   29cc2:	2300      	movs	r3, #0
   29cc4:	9301      	str	r3, [sp, #4]
{ return value->type == CborTextStringType; }
   29cc6:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_text_string(value));
   29cc8:	2b60      	cmp	r3, #96	; 0x60
   29cca:	d11c      	bne.n	29d06 <value_to_pretty+0x246>
    return _cbor_value_dup_string(value, (void **)buffer, buflen, next);
   29ccc:	460b      	mov	r3, r1
   29cce:	aa01      	add	r2, sp, #4
   29cd0:	a902      	add	r1, sp, #8
   29cd2:	4628      	mov	r0, r5
   29cd4:	f000 f918 	bl	29f08 <_cbor_value_dup_string>
        if (err)
   29cd8:	4606      	mov	r6, r0
   29cda:	2800      	cmp	r0, #0
   29cdc:	f040 80a0 	bne.w	29e20 <value_to_pretty+0x360>
        bool failed = fprintf(out, "\"") < 0
   29ce0:	4938      	ldr	r1, [pc, #224]	; (29dc4 <value_to_pretty+0x304>)
   29ce2:	4638      	mov	r0, r7
   29ce4:	f004 f94c 	bl	2df80 <fprintf>
                      || fprintf(out, "\"") < 0;
   29ce8:	2800      	cmp	r0, #0
   29cea:	da16      	bge.n	29d1a <value_to_pretty+0x25a>
   29cec:	2301      	movs	r3, #1
        bool failed = fprintf(out, "\"") < 0
   29cee:	461c      	mov	r4, r3
        free(buffer);
   29cf0:	9802      	ldr	r0, [sp, #8]
   29cf2:	f003 fd81 	bl	2d7f8 <free>
        return err != CborNoError ? err :
   29cf6:	2e00      	cmp	r6, #0
   29cf8:	f040 8092 	bne.w	29e20 <value_to_pretty+0x360>
   29cfc:	2c00      	cmp	r4, #0
   29cfe:	f000 808f 	beq.w	29e20 <value_to_pretty+0x360>
   29d02:	2604      	movs	r6, #4
   29d04:	e08c      	b.n	29e20 <value_to_pretty+0x360>
    assert(cbor_value_is_text_string(value));
   29d06:	f7ea fcad 	bl	14664 <hal_debugger_connected>
   29d0a:	b100      	cbz	r0, 29d0e <value_to_pretty+0x24e>
   29d0c:	be01      	bkpt	0x0001
   29d0e:	2300      	movs	r3, #0
   29d10:	461a      	mov	r2, r3
   29d12:	4619      	mov	r1, r3
   29d14:	4618      	mov	r0, r3
   29d16:	f7eb f845 	bl	14da4 <__assert_func>
                      || (err = utf8EscapedDump(out, buffer, n)) != CborNoError
   29d1a:	9a01      	ldr	r2, [sp, #4]
   29d1c:	9902      	ldr	r1, [sp, #8]
   29d1e:	4638      	mov	r0, r7
   29d20:	f7ff fdb8 	bl	29894 <utf8EscapedDump>
   29d24:	4606      	mov	r6, r0
   29d26:	b108      	cbz	r0, 29d2c <value_to_pretty+0x26c>
                      || fprintf(out, "\"") < 0;
   29d28:	2301      	movs	r3, #1
   29d2a:	e7e0      	b.n	29cee <value_to_pretty+0x22e>
   29d2c:	4925      	ldr	r1, [pc, #148]	; (29dc4 <value_to_pretty+0x304>)
   29d2e:	4638      	mov	r0, r7
   29d30:	f004 f926 	bl	2df80 <fprintf>
   29d34:	2800      	cmp	r0, #0
   29d36:	db01      	blt.n	29d3c <value_to_pretty+0x27c>
   29d38:	2300      	movs	r3, #0
   29d3a:	e7d8      	b.n	29cee <value_to_pretty+0x22e>
   29d3c:	2301      	movs	r3, #1
   29d3e:	e7d6      	b.n	29cee <value_to_pretty+0x22e>
{ return value->type == CborTagType; }
   29d40:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_tag(value));
   29d42:	2bc0      	cmp	r3, #192	; 0xc0
   29d44:	d120      	bne.n	29d88 <value_to_pretty+0x2c8>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   29d46:	7bcb      	ldrb	r3, [r1, #15]
                _cbor_value_decode_int64_internal(value) : value->extra;
   29d48:	f013 0f01 	tst.w	r3, #1
   29d4c:	d140      	bne.n	29dd0 <value_to_pretty+0x310>
   29d4e:	898a      	ldrh	r2, [r1, #12]
   29d50:	2300      	movs	r3, #0
        if (fprintf(out, "%" PRIu64 "(", tag) < 0)
   29d52:	491d      	ldr	r1, [pc, #116]	; (29dc8 <value_to_pretty+0x308>)
   29d54:	4638      	mov	r0, r7
   29d56:	f004 f913 	bl	2df80 <fprintf>
   29d5a:	2800      	cmp	r0, #0
   29d5c:	db3e      	blt.n	29ddc <value_to_pretty+0x31c>
        err = cbor_value_advance_fixed(it);
   29d5e:	4628      	mov	r0, r5
   29d60:	f7ff fc12 	bl	29588 <cbor_value_advance_fixed>
        if (err)
   29d64:	4606      	mov	r6, r0
   29d66:	2800      	cmp	r0, #0
   29d68:	d15a      	bne.n	29e20 <value_to_pretty+0x360>
        err = value_to_pretty(out, it);
   29d6a:	4629      	mov	r1, r5
   29d6c:	4638      	mov	r0, r7
   29d6e:	f7ff fea7 	bl	29ac0 <value_to_pretty>
        if (err)
   29d72:	4606      	mov	r6, r0
   29d74:	2800      	cmp	r0, #0
   29d76:	d153      	bne.n	29e20 <value_to_pretty+0x360>
        if (fprintf(out, ")") < 0)
   29d78:	4914      	ldr	r1, [pc, #80]	; (29dcc <value_to_pretty+0x30c>)
   29d7a:	4638      	mov	r0, r7
   29d7c:	f004 f900 	bl	2df80 <fprintf>
   29d80:	2800      	cmp	r0, #0
   29d82:	da4d      	bge.n	29e20 <value_to_pretty+0x360>
            return CborErrorIO;
   29d84:	2604      	movs	r6, #4
   29d86:	e04b      	b.n	29e20 <value_to_pretty+0x360>
    assert(cbor_value_is_tag(value));
   29d88:	f7ea fc6c 	bl	14664 <hal_debugger_connected>
   29d8c:	b100      	cbz	r0, 29d90 <value_to_pretty+0x2d0>
   29d8e:	be01      	bkpt	0x0001
   29d90:	2300      	movs	r3, #0
   29d92:	461a      	mov	r2, r3
   29d94:	4619      	mov	r1, r3
   29d96:	4618      	mov	r0, r3
   29d98:	f7eb f804 	bl	14da4 <__assert_func>
   29d9c:	0003172c 	.word	0x0003172c
   29da0:	00031748 	.word	0x00031748
   29da4:	0003176c 	.word	0x0003176c
   29da8:	00031730 	.word	0x00031730
   29dac:	00031734 	.word	0x00031734
   29db0:	00030830 	.word	0x00030830
   29db4:	0003174c 	.word	0x0003174c
   29db8:	00030750 	.word	0x00030750
   29dbc:	00031754 	.word	0x00031754
   29dc0:	00031770 	.word	0x00031770
   29dc4:	00031774 	.word	0x00031774
   29dc8:	00031778 	.word	0x00031778
   29dcc:	00031780 	.word	0x00031780
                _cbor_value_decode_int64_internal(value) : value->extra;
   29dd0:	4608      	mov	r0, r1
   29dd2:	f7ff fb80 	bl	294d6 <_cbor_value_decode_int64_internal>
   29dd6:	4602      	mov	r2, r0
   29dd8:	460b      	mov	r3, r1
   29dda:	e7ba      	b.n	29d52 <value_to_pretty+0x292>
            return CborErrorIO;
   29ddc:	2604      	movs	r6, #4
   29dde:	e01f      	b.n	29e20 <value_to_pretty+0x360>
{ return value->type == CborSimpleType; }
   29de0:	7bab      	ldrb	r3, [r5, #14]
    assert(cbor_value_is_simple_type(value));
   29de2:	2be0      	cmp	r3, #224	; 0xe0
   29de4:	d108      	bne.n	29df8 <value_to_pretty+0x338>
        if (fprintf(out, "simple(%" PRIu8 ")", simple_type) < 0)
   29de6:	7b2a      	ldrb	r2, [r5, #12]
   29de8:	4926      	ldr	r1, [pc, #152]	; (29e84 <value_to_pretty+0x3c4>)
   29dea:	4638      	mov	r0, r7
   29dec:	f004 f8c8 	bl	2df80 <fprintf>
   29df0:	2800      	cmp	r0, #0
   29df2:	da11      	bge.n	29e18 <value_to_pretty+0x358>
            return CborErrorIO;
   29df4:	2604      	movs	r6, #4
   29df6:	e013      	b.n	29e20 <value_to_pretty+0x360>
   29df8:	f7ea fc34 	bl	14664 <hal_debugger_connected>
   29dfc:	b100      	cbz	r0, 29e00 <value_to_pretty+0x340>
   29dfe:	be01      	bkpt	0x0001
   29e00:	2300      	movs	r3, #0
   29e02:	461a      	mov	r2, r3
   29e04:	4619      	mov	r1, r3
   29e06:	4618      	mov	r0, r3
   29e08:	f7ea ffcc 	bl	14da4 <__assert_func>
        if (fprintf(out, "null") < 0)
   29e0c:	491e      	ldr	r1, [pc, #120]	; (29e88 <value_to_pretty+0x3c8>)
   29e0e:	4638      	mov	r0, r7
   29e10:	f004 f8b6 	bl	2df80 <fprintf>
   29e14:	2800      	cmp	r0, #0
   29e16:	db30      	blt.n	29e7a <value_to_pretty+0x3ba>
        if (fprintf(out, "invalid") < 0)
            return CborErrorIO;
        return CborErrorUnknownType;
    }

    err = cbor_value_advance_fixed(it);
   29e18:	4628      	mov	r0, r5
   29e1a:	f7ff fbb5 	bl	29588 <cbor_value_advance_fixed>
   29e1e:	4606      	mov	r6, r0
    return err;
}
   29e20:	4630      	mov	r0, r6
   29e22:	b007      	add	sp, #28
   29e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (fprintf(out, "undefined") < 0)
   29e26:	4919      	ldr	r1, [pc, #100]	; (29e8c <value_to_pretty+0x3cc>)
   29e28:	4638      	mov	r0, r7
   29e2a:	f004 f8a9 	bl	2df80 <fprintf>
   29e2e:	2800      	cmp	r0, #0
   29e30:	daf2      	bge.n	29e18 <value_to_pretty+0x358>
            return CborErrorIO;
   29e32:	2604      	movs	r6, #4
   29e34:	e7f4      	b.n	29e20 <value_to_pretty+0x360>
{ return value->type == CborBooleanType; }
   29e36:	7bab      	ldrb	r3, [r5, #14]
    assert(cbor_value_is_boolean(value));
   29e38:	2bf5      	cmp	r3, #245	; 0xf5
   29e3a:	d109      	bne.n	29e50 <value_to_pretty+0x390>
    *result = !!value->extra;
   29e3c:	89ab      	ldrh	r3, [r5, #12]
        if (fprintf(out, val ? "true" : "false") < 0)
   29e3e:	b18b      	cbz	r3, 29e64 <value_to_pretty+0x3a4>
   29e40:	4913      	ldr	r1, [pc, #76]	; (29e90 <value_to_pretty+0x3d0>)
   29e42:	4638      	mov	r0, r7
   29e44:	f004 f89c 	bl	2df80 <fprintf>
   29e48:	2800      	cmp	r0, #0
   29e4a:	dae5      	bge.n	29e18 <value_to_pretty+0x358>
            return CborErrorIO;
   29e4c:	2604      	movs	r6, #4
   29e4e:	e7e7      	b.n	29e20 <value_to_pretty+0x360>
    assert(cbor_value_is_boolean(value));
   29e50:	f7ea fc08 	bl	14664 <hal_debugger_connected>
   29e54:	b100      	cbz	r0, 29e58 <value_to_pretty+0x398>
   29e56:	be01      	bkpt	0x0001
   29e58:	2300      	movs	r3, #0
   29e5a:	461a      	mov	r2, r3
   29e5c:	4619      	mov	r1, r3
   29e5e:	4618      	mov	r0, r3
   29e60:	f7ea ffa0 	bl	14da4 <__assert_func>
        if (fprintf(out, val ? "true" : "false") < 0)
   29e64:	490b      	ldr	r1, [pc, #44]	; (29e94 <value_to_pretty+0x3d4>)
   29e66:	e7ec      	b.n	29e42 <value_to_pretty+0x382>
        if (fprintf(out, "invalid") < 0)
   29e68:	490b      	ldr	r1, [pc, #44]	; (29e98 <value_to_pretty+0x3d8>)
   29e6a:	4638      	mov	r0, r7
   29e6c:	f004 f888 	bl	2df80 <fprintf>
   29e70:	2800      	cmp	r0, #0
   29e72:	db04      	blt.n	29e7e <value_to_pretty+0x3be>
        return CborErrorUnknownType;
   29e74:	f240 1603 	movw	r6, #259	; 0x103
   29e78:	e7d2      	b.n	29e20 <value_to_pretty+0x360>
            return CborErrorIO;
   29e7a:	2604      	movs	r6, #4
   29e7c:	e7d0      	b.n	29e20 <value_to_pretty+0x360>
            return CborErrorIO;
   29e7e:	2604      	movs	r6, #4
   29e80:	e7ce      	b.n	29e20 <value_to_pretty+0x360>
   29e82:	bf00      	nop
   29e84:	00031784 	.word	0x00031784
   29e88:	00031794 	.word	0x00031794
   29e8c:	0003179c 	.word	0x0003179c
   29e90:	00031740 	.word	0x00031740
   29e94:	00031738 	.word	0x00031738
   29e98:	000317a8 	.word	0x000317a8

00029e9c <container_to_pretty>:
{
   29e9c:	b570      	push	{r4, r5, r6, lr}
   29e9e:	4604      	mov	r4, r0
   29ea0:	460d      	mov	r5, r1
   29ea2:	4616      	mov	r6, r2
    const char *comma = "";
   29ea4:	4a12      	ldr	r2, [pc, #72]	; (29ef0 <container_to_pretty+0x54>)
    while (!cbor_value_at_end(it)) {
   29ea6:	e000      	b.n	29eaa <container_to_pretty+0xe>
{
   29ea8:	4a12      	ldr	r2, [pc, #72]	; (29ef4 <container_to_pretty+0x58>)
{ return it->remaining == 0; }
   29eaa:	68ab      	ldr	r3, [r5, #8]
    while (!cbor_value_at_end(it)) {
   29eac:	b1e3      	cbz	r3, 29ee8 <container_to_pretty+0x4c>
        if (fprintf(out, "%s", comma) < 0)
   29eae:	4912      	ldr	r1, [pc, #72]	; (29ef8 <container_to_pretty+0x5c>)
   29eb0:	4620      	mov	r0, r4
   29eb2:	f004 f865 	bl	2df80 <fprintf>
   29eb6:	2800      	cmp	r0, #0
   29eb8:	db15      	blt.n	29ee6 <container_to_pretty+0x4a>
        CborError err = value_to_pretty(out, it);
   29eba:	4629      	mov	r1, r5
   29ebc:	4620      	mov	r0, r4
   29ebe:	f7ff fdff 	bl	29ac0 <value_to_pretty>
        if (err)
   29ec2:	4603      	mov	r3, r0
   29ec4:	b980      	cbnz	r0, 29ee8 <container_to_pretty+0x4c>
        if (containerType == CborArrayType)
   29ec6:	2e80      	cmp	r6, #128	; 0x80
   29ec8:	d0ee      	beq.n	29ea8 <container_to_pretty+0xc>
        if (fprintf(out, ": ") < 0)
   29eca:	490c      	ldr	r1, [pc, #48]	; (29efc <container_to_pretty+0x60>)
   29ecc:	4620      	mov	r0, r4
   29ece:	f004 f857 	bl	2df80 <fprintf>
   29ed2:	2800      	cmp	r0, #0
   29ed4:	db0a      	blt.n	29eec <container_to_pretty+0x50>
        err = value_to_pretty(out, it);
   29ed6:	4629      	mov	r1, r5
   29ed8:	4620      	mov	r0, r4
   29eda:	f7ff fdf1 	bl	29ac0 <value_to_pretty>
        if (err)
   29ede:	4603      	mov	r3, r0
   29ee0:	2800      	cmp	r0, #0
   29ee2:	d0e1      	beq.n	29ea8 <container_to_pretty+0xc>
   29ee4:	e000      	b.n	29ee8 <container_to_pretty+0x4c>
            return CborErrorIO;
   29ee6:	2304      	movs	r3, #4
}
   29ee8:	4618      	mov	r0, r3
   29eea:	bd70      	pop	{r4, r5, r6, pc}
            return CborErrorIO;
   29eec:	2304      	movs	r3, #4
   29eee:	e7fb      	b.n	29ee8 <container_to_pretty+0x4c>
   29ef0:	00031248 	.word	0x00031248
   29ef4:	000317b0 	.word	0x000317b0
   29ef8:	000317b4 	.word	0x000317b4
   29efc:	000317b8 	.word	0x000317b8

00029f00 <cbor_value_to_pretty_advance>:
 * done by appending a comma to the output stream.
 *
 * \sa cbor_value_to_pretty(), cbor_value_to_json_advance()
 */
CborError cbor_value_to_pretty_advance(FILE *out, CborValue *value)
{
   29f00:	b508      	push	{r3, lr}
    return value_to_pretty(out, value);
   29f02:	f7ff fddd 	bl	29ac0 <value_to_pretty>
}
   29f06:	bd08      	pop	{r3, pc}

00029f08 <_cbor_value_dup_string>:
 * malloc'ed block.
 *
 * \sa cbor_value_copy_byte_string(), cbor_value_dup_text_string()
 */
CborError _cbor_value_dup_string(const CborValue *value, void **buffer, size_t *buflen, CborValue *next)
{
   29f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert(buffer);
   29f0c:	b181      	cbz	r1, 29f30 <_cbor_value_dup_string+0x28>
   29f0e:	4605      	mov	r5, r0
   29f10:	4614      	mov	r4, r2
   29f12:	461e      	mov	r6, r3
   29f14:	460f      	mov	r7, r1
    assert(buflen);
   29f16:	b1aa      	cbz	r2, 29f44 <_cbor_value_dup_string+0x3c>
    *buflen = SIZE_MAX;
   29f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29f1c:	6013      	str	r3, [r2, #0]
    CborError err = _cbor_value_copy_string(value, NULL, buflen, NULL);
   29f1e:	2300      	movs	r3, #0
   29f20:	4619      	mov	r1, r3
   29f22:	f7ff fc25 	bl	29770 <_cbor_value_copy_string>
    if (err)
   29f26:	4680      	mov	r8, r0
   29f28:	b1b0      	cbz	r0, 29f58 <_cbor_value_dup_string+0x50>
    if (err) {
        free(*buffer);
        return err;
    }
    return CborNoError;
}
   29f2a:	4640      	mov	r0, r8
   29f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(buffer);
   29f30:	f7ea fb98 	bl	14664 <hal_debugger_connected>
   29f34:	b100      	cbz	r0, 29f38 <_cbor_value_dup_string+0x30>
   29f36:	be01      	bkpt	0x0001
   29f38:	2300      	movs	r3, #0
   29f3a:	461a      	mov	r2, r3
   29f3c:	4619      	mov	r1, r3
   29f3e:	4618      	mov	r0, r3
   29f40:	f7ea ff30 	bl	14da4 <__assert_func>
    assert(buflen);
   29f44:	f7ea fb8e 	bl	14664 <hal_debugger_connected>
   29f48:	b100      	cbz	r0, 29f4c <_cbor_value_dup_string+0x44>
   29f4a:	be01      	bkpt	0x0001
   29f4c:	2300      	movs	r3, #0
   29f4e:	461a      	mov	r2, r3
   29f50:	4619      	mov	r1, r3
   29f52:	4618      	mov	r0, r3
   29f54:	f7ea ff26 	bl	14da4 <__assert_func>
    ++*buflen;
   29f58:	6820      	ldr	r0, [r4, #0]
   29f5a:	3001      	adds	r0, #1
   29f5c:	6020      	str	r0, [r4, #0]
    *buffer = malloc(*buflen);
   29f5e:	f003 fc15 	bl	2d78c <malloc>
   29f62:	4601      	mov	r1, r0
   29f64:	6038      	str	r0, [r7, #0]
    if (!*buffer) {
   29f66:	b158      	cbz	r0, 29f80 <_cbor_value_dup_string+0x78>
    err = _cbor_value_copy_string(value, *buffer, buflen, next);
   29f68:	4633      	mov	r3, r6
   29f6a:	4622      	mov	r2, r4
   29f6c:	4628      	mov	r0, r5
   29f6e:	f7ff fbff 	bl	29770 <_cbor_value_copy_string>
    if (err) {
   29f72:	4680      	mov	r8, r0
   29f74:	2800      	cmp	r0, #0
   29f76:	d0d8      	beq.n	29f2a <_cbor_value_dup_string+0x22>
        free(*buffer);
   29f78:	6838      	ldr	r0, [r7, #0]
   29f7a:	f003 fc3d 	bl	2d7f8 <free>
        return err;
   29f7e:	e7d4      	b.n	29f2a <_cbor_value_dup_string+0x22>
        return CborErrorOutOfMemory;
   29f80:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
   29f84:	e7d1      	b.n	29f2a <_cbor_value_dup_string+0x22>

00029f86 <fcb_free_sector_cnt>:
    return rc;
}

int
fcb_free_sector_cnt(struct fcb *fcb)
{
   29f86:	b538      	push	{r3, r4, r5, lr}
   29f88:	4604      	mov	r4, r0
    int i;
    struct flash_area *fa;

    fa = fcb->f_active.fe_area;
   29f8a:	69c1      	ldr	r1, [r0, #28]
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   29f8c:	2500      	movs	r5, #0
   29f8e:	7963      	ldrb	r3, [r4, #5]
   29f90:	42ab      	cmp	r3, r5
   29f92:	dd08      	ble.n	29fa6 <fcb_free_sector_cnt+0x20>
        fa = fcb_getnext_area(fcb, fa);
   29f94:	4620      	mov	r0, r4
   29f96:	f000 fac7 	bl	2a528 <fcb_getnext_area>
   29f9a:	4601      	mov	r1, r0
        if (fa == fcb->f_oldest) {
   29f9c:	69a3      	ldr	r3, [r4, #24]
   29f9e:	4283      	cmp	r3, r0
   29fa0:	d001      	beq.n	29fa6 <fcb_free_sector_cnt+0x20>
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   29fa2:	3501      	adds	r5, #1
   29fa4:	e7f3      	b.n	29f8e <fcb_free_sector_cnt+0x8>
            break;
        }
    }
    return i;
}
   29fa6:	4628      	mov	r0, r5
   29fa8:	bd38      	pop	{r3, r4, r5, pc}

00029faa <fcb_is_empty>:

int
fcb_is_empty(struct fcb *fcb)
{
    return (fcb->f_active.fe_area == fcb->f_oldest &&
   29faa:	69c2      	ldr	r2, [r0, #28]
   29fac:	6983      	ldr	r3, [r0, #24]
   29fae:	429a      	cmp	r2, r3
   29fb0:	d001      	beq.n	29fb6 <fcb_is_empty+0xc>
   29fb2:	2000      	movs	r0, #0
   29fb4:	4770      	bx	lr
      fcb->f_active.fe_elem_off == sizeof(struct fcb_disk_area));
   29fb6:	6a03      	ldr	r3, [r0, #32]
    return (fcb->f_active.fe_area == fcb->f_oldest &&
   29fb8:	2b08      	cmp	r3, #8
   29fba:	d001      	beq.n	29fc0 <fcb_is_empty+0x16>
   29fbc:	2000      	movs	r0, #0
   29fbe:	4770      	bx	lr
   29fc0:	2001      	movs	r0, #1
}
   29fc2:	4770      	bx	lr

00029fc4 <fcb_put_len>:
 * 1 byte for lengths < 128 bytes, and 2 bytes for < 16384.
 */
int
fcb_put_len(uint8_t *buf, uint16_t len)
{
    if (len < 0x80) {
   29fc4:	297f      	cmp	r1, #127	; 0x7f
   29fc6:	d90a      	bls.n	29fde <fcb_put_len+0x1a>
        buf[0] = len;
        return 1;
    } else if (len < FCB_MAX_LEN) {
   29fc8:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   29fcc:	4299      	cmp	r1, r3
   29fce:	d809      	bhi.n	29fe4 <fcb_put_len+0x20>
        buf[0] = (len & 0x7f) | 0x80;
   29fd0:	f061 037f 	orn	r3, r1, #127	; 0x7f
   29fd4:	7003      	strb	r3, [r0, #0]
        buf[1] = len >> 7;
   29fd6:	09c9      	lsrs	r1, r1, #7
   29fd8:	7041      	strb	r1, [r0, #1]
        return 2;
   29fda:	2002      	movs	r0, #2
   29fdc:	4770      	bx	lr
        buf[0] = len;
   29fde:	7001      	strb	r1, [r0, #0]
        return 1;
   29fe0:	2001      	movs	r0, #1
   29fe2:	4770      	bx	lr
    } else {
        return FCB_ERR_ARGS;
   29fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
   29fe8:	4770      	bx	lr

00029fea <fcb_get_len>:
int
fcb_get_len(uint8_t *buf, uint16_t *len)
{
    int rc;

    if (buf[0] & 0x80) {
   29fea:	7803      	ldrb	r3, [r0, #0]
   29fec:	f990 2000 	ldrsb.w	r2, [r0]
   29ff0:	2a00      	cmp	r2, #0
   29ff2:	db02      	blt.n	29ffa <fcb_get_len+0x10>
        *len = (buf[0] & 0x7f) | (buf[1] << 7);
        rc = 2;
    } else {
        *len = buf[0];
   29ff4:	800b      	strh	r3, [r1, #0]
        rc = 1;
   29ff6:	2001      	movs	r0, #1
    }
    return rc;
}
   29ff8:	4770      	bx	lr
        *len = (buf[0] & 0x7f) | (buf[1] << 7);
   29ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   29ffe:	7842      	ldrb	r2, [r0, #1]
   2a000:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   2a004:	800b      	strh	r3, [r1, #0]
        rc = 2;
   2a006:	2002      	movs	r0, #2
   2a008:	4770      	bx	lr

0002a00a <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_area *fap, uint16_t id)
{
   2a00a:	b500      	push	{lr}
   2a00c:	b083      	sub	sp, #12
   2a00e:	4603      	mov	r3, r0
   2a010:	4608      	mov	r0, r1
    struct fcb_disk_area fda;
    int rc;

    fda.fd_magic = fcb->f_magic;
   2a012:	6819      	ldr	r1, [r3, #0]
   2a014:	9100      	str	r1, [sp, #0]
    fda.fd_ver = fcb->f_version;
   2a016:	791b      	ldrb	r3, [r3, #4]
   2a018:	f88d 3004 	strb.w	r3, [sp, #4]
    fda._pad = 0xff;
   2a01c:	23ff      	movs	r3, #255	; 0xff
   2a01e:	f88d 3005 	strb.w	r3, [sp, #5]
    fda.fd_id = id;
   2a022:	f8ad 2006 	strh.w	r2, [sp, #6]

    rc = flash_area_write(fap, 0, &fda, sizeof(fda));
   2a026:	2308      	movs	r3, #8
   2a028:	466a      	mov	r2, sp
   2a02a:	2100      	movs	r1, #0
   2a02c:	f7ee fd91 	bl	18b52 <flash_area_write>
    if (rc) {
   2a030:	b910      	cbnz	r0, 2a038 <fcb_sector_hdr_init+0x2e>
        return FCB_ERR_FLASH;
    }
    return 0;
}
   2a032:	b003      	add	sp, #12
   2a034:	f85d fb04 	ldr.w	pc, [sp], #4
        return FCB_ERR_FLASH;
   2a038:	f06f 0001 	mvn.w	r0, #1
   2a03c:	e7f9      	b.n	2a032 <fcb_sector_hdr_init+0x28>

0002a03e <fcb_sector_hdr_read>:
 * Returns 1 if sector has data.
 */
int
fcb_sector_hdr_read(struct fcb *fcb, struct flash_area *fap,
  struct fcb_disk_area *fdap)
{
   2a03e:	b530      	push	{r4, r5, lr}
   2a040:	b083      	sub	sp, #12
   2a042:	4604      	mov	r4, r0
   2a044:	4608      	mov	r0, r1
    struct fcb_disk_area fda;
    int rc;

    if (!fdap) {
   2a046:	4615      	mov	r5, r2
   2a048:	b19a      	cbz	r2, 2a072 <fcb_sector_hdr_read+0x34>
        fdap = &fda;
    }
    rc = flash_area_read_is_empty(fap, 0, fdap, sizeof(*fdap));
   2a04a:	2308      	movs	r3, #8
   2a04c:	462a      	mov	r2, r5
   2a04e:	2100      	movs	r1, #0
   2a050:	f7ee fdc2 	bl	18bd8 <flash_area_read_is_empty>
    if (rc < 0) {
   2a054:	1e03      	subs	r3, r0, #0
   2a056:	db0e      	blt.n	2a076 <fcb_sector_hdr_read+0x38>
        return FCB_ERR_FLASH;
    } else if (rc == 1) {
   2a058:	2b01      	cmp	r3, #1
   2a05a:	d00f      	beq.n	2a07c <fcb_sector_hdr_read+0x3e>
        return 0;
    }
    if (fdap->fd_magic != fcb->f_magic) {
   2a05c:	682a      	ldr	r2, [r5, #0]
   2a05e:	6823      	ldr	r3, [r4, #0]
   2a060:	429a      	cmp	r2, r3
   2a062:	d10d      	bne.n	2a080 <fcb_sector_hdr_read+0x42>
        return FCB_ERR_MAGIC;
    }
    if (fdap->fd_ver != fcb->f_version) {
   2a064:	792a      	ldrb	r2, [r5, #4]
   2a066:	7923      	ldrb	r3, [r4, #4]
   2a068:	429a      	cmp	r2, r3
   2a06a:	d10c      	bne.n	2a086 <fcb_sector_hdr_read+0x48>
        return FCB_ERR_VERSION;
    }
    return 1;
   2a06c:	2001      	movs	r0, #1
}
   2a06e:	b003      	add	sp, #12
   2a070:	bd30      	pop	{r4, r5, pc}
        fdap = &fda;
   2a072:	466d      	mov	r5, sp
   2a074:	e7e9      	b.n	2a04a <fcb_sector_hdr_read+0xc>
        return FCB_ERR_FLASH;
   2a076:	f06f 0001 	mvn.w	r0, #1
   2a07a:	e7f8      	b.n	2a06e <fcb_sector_hdr_read+0x30>
        return 0;
   2a07c:	2000      	movs	r0, #0
   2a07e:	e7f6      	b.n	2a06e <fcb_sector_hdr_read+0x30>
        return FCB_ERR_MAGIC;
   2a080:	f06f 0006 	mvn.w	r0, #6
   2a084:	e7f3      	b.n	2a06e <fcb_sector_hdr_read+0x30>
        return FCB_ERR_VERSION;
   2a086:	f06f 0007 	mvn.w	r0, #7
   2a08a:	e7f0      	b.n	2a06e <fcb_sector_hdr_read+0x30>

0002a08c <fcb_init>:
{
   2a08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a090:	b085      	sub	sp, #20
    if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   2a092:	6883      	ldr	r3, [r0, #8]
   2a094:	2b00      	cmp	r3, #0
   2a096:	f000 8087 	beq.w	2a1a8 <fcb_init+0x11c>
   2a09a:	4606      	mov	r6, r0
   2a09c:	7943      	ldrb	r3, [r0, #5]
   2a09e:	7982      	ldrb	r2, [r0, #6]
   2a0a0:	1a9b      	subs	r3, r3, r2
   2a0a2:	2b00      	cmp	r3, #0
   2a0a4:	f340 8083 	ble.w	2a1ae <fcb_init+0x122>
    struct flash_area *oldest_fap = NULL, *newest_fap = NULL;
   2a0a8:	f04f 0b00 	mov.w	fp, #0
   2a0ac:	f8cd b004 	str.w	fp, [sp, #4]
    int oldest = -1, newest = -1;
   2a0b0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   2a0b4:	46d1      	mov	r9, sl
    int max_align = 1;
   2a0b6:	f04f 0801 	mov.w	r8, #1
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   2a0ba:	465f      	mov	r7, fp
   2a0bc:	e00a      	b.n	2a0d4 <fcb_init+0x48>
            max_align = flash_area_align(fap);
   2a0be:	4620      	mov	r0, r4
   2a0c0:	f7ee fd6d 	bl	18b9e <flash_area_align>
   2a0c4:	4680      	mov	r8, r0
   2a0c6:	e012      	b.n	2a0ee <fcb_init+0x62>
            oldest = newest = fda.fd_id;
   2a0c8:	f8bd 900e 	ldrh.w	r9, [sp, #14]
            oldest_fap = newest_fap = fap;
   2a0cc:	46a3      	mov	fp, r4
   2a0ce:	9401      	str	r4, [sp, #4]
            oldest = newest = fda.fd_id;
   2a0d0:	46ca      	mov	sl, r9
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   2a0d2:	3701      	adds	r7, #1
   2a0d4:	7973      	ldrb	r3, [r6, #5]
   2a0d6:	42bb      	cmp	r3, r7
   2a0d8:	dd29      	ble.n	2a12e <fcb_init+0xa2>
        fap = &fcb->f_sectors[i];
   2a0da:	68b4      	ldr	r4, [r6, #8]
   2a0dc:	eb07 0347 	add.w	r3, r7, r7, lsl #1
   2a0e0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
        align = flash_area_align(fap);
   2a0e4:	4620      	mov	r0, r4
   2a0e6:	f7ee fd5a 	bl	18b9e <flash_area_align>
        if (align > max_align) {
   2a0ea:	4580      	cmp	r8, r0
   2a0ec:	dbe7      	blt.n	2a0be <fcb_init+0x32>
        rc = fcb_sector_hdr_read(fcb, fap, &fda);
   2a0ee:	aa02      	add	r2, sp, #8
   2a0f0:	4621      	mov	r1, r4
   2a0f2:	4630      	mov	r0, r6
   2a0f4:	f7ff ffa3 	bl	2a03e <fcb_sector_hdr_read>
        if (rc < 0) {
   2a0f8:	1e05      	subs	r5, r0, #0
   2a0fa:	db3b      	blt.n	2a174 <fcb_init+0xe8>
        if (rc == 0) {
   2a0fc:	2d00      	cmp	r5, #0
   2a0fe:	d0e8      	beq.n	2a0d2 <fcb_init+0x46>
        if (oldest < 0) {
   2a100:	f1b9 0f00 	cmp.w	r9, #0
   2a104:	dbe0      	blt.n	2a0c8 <fcb_init+0x3c>
        if (FCB_ID_GT(fda.fd_id, newest)) {
   2a106:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2a10a:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
   2a10e:	fa0f f38a 	sxth.w	r3, sl
   2a112:	1ad3      	subs	r3, r2, r3
   2a114:	2b00      	cmp	r3, #0
   2a116:	dd02      	ble.n	2a11e <fcb_init+0x92>
            newest = fda.fd_id;
   2a118:	468a      	mov	sl, r1
            newest_fap = fap;
   2a11a:	46a3      	mov	fp, r4
   2a11c:	e7d9      	b.n	2a0d2 <fcb_init+0x46>
        } else if (FCB_ID_GT(oldest, fda.fd_id)) {
   2a11e:	fa0f f389 	sxth.w	r3, r9
   2a122:	1a9a      	subs	r2, r3, r2
   2a124:	2a00      	cmp	r2, #0
   2a126:	ddd4      	ble.n	2a0d2 <fcb_init+0x46>
            oldest = fda.fd_id;
   2a128:	4689      	mov	r9, r1
            oldest_fap = fap;
   2a12a:	9401      	str	r4, [sp, #4]
   2a12c:	e7d1      	b.n	2a0d2 <fcb_init+0x46>
    if (oldest < 0) {
   2a12e:	f1b9 0f00 	cmp.w	r9, #0
   2a132:	db23      	blt.n	2a17c <fcb_init+0xf0>
    fcb->f_align = max_align;
   2a134:	fa5f f888 	uxtb.w	r8, r8
   2a138:	f886 802e 	strb.w	r8, [r6, #46]	; 0x2e
    fcb->f_oldest = oldest_fap;
   2a13c:	9b01      	ldr	r3, [sp, #4]
   2a13e:	61b3      	str	r3, [r6, #24]
    fcb->f_active.fe_area = newest_fap;
   2a140:	f8c6 b01c 	str.w	fp, [r6, #28]
    fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   2a144:	2308      	movs	r3, #8
   2a146:	6233      	str	r3, [r6, #32]
    fcb->f_active_id = newest;
   2a148:	f8a6 a02c 	strh.w	sl, [r6, #44]	; 0x2c
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   2a14c:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
   2a150:	ea18 0505 	ands.w	r5, r8, r5
   2a154:	d11e      	bne.n	2a194 <fcb_init+0x108>
        rc = fcb_getnext_in_area(fcb, &fcb->f_active);
   2a156:	f106 011c 	add.w	r1, r6, #28
   2a15a:	4630      	mov	r0, r6
   2a15c:	f000 f9c0 	bl	2a4e0 <fcb_getnext_in_area>
        if (rc == FCB_ERR_NOVAR) {
   2a160:	f110 0f03 	cmn.w	r0, #3
   2a164:	d002      	beq.n	2a16c <fcb_init+0xe0>
        if (rc != 0) {
   2a166:	2800      	cmp	r0, #0
   2a168:	d0f5      	beq.n	2a156 <fcb_init+0xca>
        rc = fcb_getnext_in_area(fcb, &fcb->f_active);
   2a16a:	4605      	mov	r5, r0
    os_mutex_init(&fcb->f_mtx);
   2a16c:	f106 000c 	add.w	r0, r6, #12
   2a170:	f7ec fbaa 	bl	168c8 <os_mutex_init>
}
   2a174:	4628      	mov	r0, r5
   2a176:	b005      	add	sp, #20
   2a178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        oldest_fap = newest_fap = &fcb->f_sectors[0];
   2a17c:	68b3      	ldr	r3, [r6, #8]
   2a17e:	461c      	mov	r4, r3
   2a180:	9301      	str	r3, [sp, #4]
        rc = fcb_sector_hdr_init(fcb, oldest_fap, 0);
   2a182:	2200      	movs	r2, #0
   2a184:	4619      	mov	r1, r3
   2a186:	4630      	mov	r0, r6
   2a188:	f7ff ff3f 	bl	2a00a <fcb_sector_hdr_init>
        if (rc) {
   2a18c:	4682      	mov	sl, r0
   2a18e:	b988      	cbnz	r0, 2a1b4 <fcb_init+0x128>
        oldest_fap = newest_fap = &fcb->f_sectors[0];
   2a190:	46a3      	mov	fp, r4
   2a192:	e7cf      	b.n	2a134 <fcb_init+0xa8>
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   2a194:	f7ea fa66 	bl	14664 <hal_debugger_connected>
   2a198:	b100      	cbz	r0, 2a19c <fcb_init+0x110>
   2a19a:	be01      	bkpt	0x0001
   2a19c:	2300      	movs	r3, #0
   2a19e:	461a      	mov	r2, r3
   2a1a0:	4619      	mov	r1, r3
   2a1a2:	4618      	mov	r0, r3
   2a1a4:	f7ea fdfe 	bl	14da4 <__assert_func>
        return FCB_ERR_ARGS;
   2a1a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2a1ac:	e7e2      	b.n	2a174 <fcb_init+0xe8>
   2a1ae:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2a1b2:	e7df      	b.n	2a174 <fcb_init+0xe8>
            return rc;
   2a1b4:	4605      	mov	r5, r0
   2a1b6:	e7dd      	b.n	2a174 <fcb_init+0xe8>

0002a1b8 <fcb_offset_last_n>:
 * @return 0 on there are any fcbs aviable; FCB_ERR_NOVAR otherwise
 */
int
fcb_offset_last_n(struct fcb *fcb, uint8_t entries,
        struct fcb_entry *last_n_entry)
{
   2a1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a1ba:	b085      	sub	sp, #20
   2a1bc:	4606      	mov	r6, r0
   2a1be:	4615      	mov	r5, r2
    struct fcb_entry loc;
    int i;

    /* assure a minimum amount of entries */
    if (!entries) {
   2a1c0:	460f      	mov	r7, r1
   2a1c2:	b901      	cbnz	r1, 2a1c6 <fcb_offset_last_n+0xe>
        entries = 1;
   2a1c4:	2701      	movs	r7, #1
    }

    i = 0;
    memset(&loc, 0, sizeof(loc));
   2a1c6:	2400      	movs	r4, #0
   2a1c8:	9400      	str	r4, [sp, #0]
   2a1ca:	9401      	str	r4, [sp, #4]
   2a1cc:	9402      	str	r4, [sp, #8]
   2a1ce:	9403      	str	r4, [sp, #12]
    while (!fcb_getnext(fcb, &loc)) {
   2a1d0:	e002      	b.n	2a1d8 <fcb_offset_last_n+0x20>
        if (i == 0) {
            /* Start from the beginning of fcb entries */
            *last_n_entry = loc;
        } else if (i > (entries - 1)) {
   2a1d2:	42a7      	cmp	r7, r4
   2a1d4:	dd0d      	ble.n	2a1f2 <fcb_offset_last_n+0x3a>
            /* Update last_n_entry after n entries and keep updating */
            fcb_getnext(fcb, last_n_entry);
        }
        i++;
   2a1d6:	3401      	adds	r4, #1
    while (!fcb_getnext(fcb, &loc)) {
   2a1d8:	4669      	mov	r1, sp
   2a1da:	4630      	mov	r0, r6
   2a1dc:	f000 f9f4 	bl	2a5c8 <fcb_getnext>
   2a1e0:	b960      	cbnz	r0, 2a1fc <fcb_offset_last_n+0x44>
        if (i == 0) {
   2a1e2:	2c00      	cmp	r4, #0
   2a1e4:	d1f5      	bne.n	2a1d2 <fcb_offset_last_n+0x1a>
            *last_n_entry = loc;
   2a1e6:	ab04      	add	r3, sp, #16
   2a1e8:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   2a1ec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   2a1f0:	e7f1      	b.n	2a1d6 <fcb_offset_last_n+0x1e>
            fcb_getnext(fcb, last_n_entry);
   2a1f2:	4629      	mov	r1, r5
   2a1f4:	4630      	mov	r0, r6
   2a1f6:	f000 f9e7 	bl	2a5c8 <fcb_getnext>
   2a1fa:	e7ec      	b.n	2a1d6 <fcb_offset_last_n+0x1e>
    }

    return (i == 0) ? FCB_ERR_NOVAR : 0;
   2a1fc:	b114      	cbz	r4, 2a204 <fcb_offset_last_n+0x4c>
   2a1fe:	2000      	movs	r0, #0
}
   2a200:	b005      	add	sp, #20
   2a202:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (i == 0) ? FCB_ERR_NOVAR : 0;
   2a204:	f06f 0002 	mvn.w	r0, #2
   2a208:	e7fa      	b.n	2a200 <fcb_offset_last_n+0x48>

0002a20a <fcb_clear>:
 * @param fcb
 * @return 0 on success; non-zero on failure
 */
int
fcb_clear(struct fcb *fcb)
{
   2a20a:	b538      	push	{r3, r4, r5, lr}
   2a20c:	4604      	mov	r4, r0
    int rc;

    rc = 0;
   2a20e:	2500      	movs	r5, #0
    while (!fcb_is_empty(fcb)) {
   2a210:	4620      	mov	r0, r4
   2a212:	f7ff feca 	bl	29faa <fcb_is_empty>
   2a216:	b928      	cbnz	r0, 2a224 <fcb_clear+0x1a>
        rc = fcb_rotate(fcb);
   2a218:	4620      	mov	r0, r4
   2a21a:	f000 f9ef 	bl	2a5fc <fcb_rotate>
        if (rc) {
   2a21e:	4605      	mov	r5, r0
   2a220:	2800      	cmp	r0, #0
   2a222:	d0f5      	beq.n	2a210 <fcb_clear+0x6>
            break;
        }
    }
    return rc;
}
   2a224:	4628      	mov	r0, r5
   2a226:	bd38      	pop	{r3, r4, r5, pc}

0002a228 <fcb_new_area>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

static struct flash_area *
fcb_new_area(struct fcb *fcb, int cnt)
{
   2a228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a22a:	4605      	mov	r5, r0
   2a22c:	460f      	mov	r7, r1
    struct flash_area *rfa;
    int i;

    rfa = NULL;
    i = 0;
    fa = fcb->f_active.fe_area;
   2a22e:	69c1      	ldr	r1, [r0, #28]
    i = 0;
   2a230:	2400      	movs	r4, #0
    rfa = NULL;
   2a232:	4626      	mov	r6, r4
   2a234:	e006      	b.n	2a244 <fcb_new_area+0x1c>
    do {
        fa = fcb_getnext_area(fcb, fa);
        if (!rfa) {
            rfa = fa;
        }
        if (fa == fcb->f_oldest) {
   2a236:	69ab      	ldr	r3, [r5, #24]
   2a238:	428b      	cmp	r3, r1
   2a23a:	d00b      	beq.n	2a254 <fcb_new_area+0x2c>
            return NULL;
        }
    } while (i++ < cnt);
   2a23c:	1c63      	adds	r3, r4, #1
   2a23e:	42bc      	cmp	r4, r7
   2a240:	da09      	bge.n	2a256 <fcb_new_area+0x2e>
   2a242:	461c      	mov	r4, r3
        fa = fcb_getnext_area(fcb, fa);
   2a244:	4628      	mov	r0, r5
   2a246:	f000 f96f 	bl	2a528 <fcb_getnext_area>
   2a24a:	4601      	mov	r1, r0
        if (!rfa) {
   2a24c:	2e00      	cmp	r6, #0
   2a24e:	d1f2      	bne.n	2a236 <fcb_new_area+0xe>
            rfa = fa;
   2a250:	4606      	mov	r6, r0
   2a252:	e7f0      	b.n	2a236 <fcb_new_area+0xe>
            return NULL;
   2a254:	2600      	movs	r6, #0
    return rfa;
}
   2a256:	4630      	mov	r0, r6
   2a258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a25a <fcb_append_to_scratch>:
/*
 * Take one of the scratch blocks into use, if at all possible.
 */
int
fcb_append_to_scratch(struct fcb *fcb)
{
   2a25a:	b538      	push	{r3, r4, r5, lr}
   2a25c:	4604      	mov	r4, r0
    struct flash_area *fa;
    int rc;

    fa = fcb_new_area(fcb, 0);
   2a25e:	2100      	movs	r1, #0
   2a260:	f7ff ffe2 	bl	2a228 <fcb_new_area>
    if (!fa) {
   2a264:	b178      	cbz	r0, 2a286 <fcb_append_to_scratch+0x2c>
   2a266:	4605      	mov	r5, r0
        return FCB_ERR_NOSPACE;
    }
    rc = fcb_sector_hdr_init(fcb, fa, fcb->f_active_id + 1);
   2a268:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   2a26a:	3201      	adds	r2, #1
   2a26c:	b292      	uxth	r2, r2
   2a26e:	4601      	mov	r1, r0
   2a270:	4620      	mov	r0, r4
   2a272:	f7ff feca 	bl	2a00a <fcb_sector_hdr_init>
    if (rc) {
   2a276:	b928      	cbnz	r0, 2a284 <fcb_append_to_scratch+0x2a>
        return rc;
    }
    fcb->f_active.fe_area = fa;
   2a278:	61e5      	str	r5, [r4, #28]
    fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   2a27a:	2308      	movs	r3, #8
   2a27c:	6223      	str	r3, [r4, #32]
    fcb->f_active_id++;
   2a27e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   2a280:	3301      	adds	r3, #1
   2a282:	85a3      	strh	r3, [r4, #44]	; 0x2c
    return FCB_OK;
}
   2a284:	bd38      	pop	{r3, r4, r5, pc}
        return FCB_ERR_NOSPACE;
   2a286:	f06f 0003 	mvn.w	r0, #3
   2a28a:	e7fb      	b.n	2a284 <fcb_append_to_scratch+0x2a>

0002a28c <fcb_append>:

int
fcb_append(struct fcb *fcb, uint16_t len, struct fcb_entry *append_loc)
{
   2a28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a290:	b082      	sub	sp, #8
   2a292:	4605      	mov	r5, r0
   2a294:	460c      	mov	r4, r1
   2a296:	4617      	mov	r7, r2
    struct flash_area *fa;
    uint8_t tmp_str[2];
    int cnt;
    int rc;

    cnt = fcb_put_len(tmp_str, len);
   2a298:	a801      	add	r0, sp, #4
   2a29a:	f7ff fe93 	bl	29fc4 <fcb_put_len>
    if (cnt < 0) {
   2a29e:	1e06      	subs	r6, r0, #0
   2a2a0:	db58      	blt.n	2a354 <fcb_append+0xc8>
int fcb_get_len(uint8_t *buf, uint16_t *len);

static inline int
fcb_len_in_flash(struct fcb *fcb, uint16_t len)
{
    if (fcb->f_align <= 1) {
   2a2a2:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   2a2a6:	2b01      	cmp	r3, #1
   2a2a8:	d933      	bls.n	2a312 <fcb_append+0x86>
        return len;
    }
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2a2aa:	1e58      	subs	r0, r3, #1
   2a2ac:	fa10 f686 	uxtah	r6, r0, r6
   2a2b0:	4258      	negs	r0, r3
   2a2b2:	4006      	ands	r6, r0
    if (fcb->f_align <= 1) {
   2a2b4:	2b01      	cmp	r3, #1
   2a2b6:	d903      	bls.n	2a2c0 <fcb_append+0x34>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2a2b8:	1e59      	subs	r1, r3, #1
   2a2ba:	440c      	add	r4, r1
   2a2bc:	4259      	negs	r1, r3
   2a2be:	400c      	ands	r4, r1
        return cnt;
    }
    cnt = fcb_len_in_flash(fcb, cnt);
    len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   2a2c0:	b2a1      	uxth	r1, r4
    if (fcb->f_align <= 1) {
   2a2c2:	2b01      	cmp	r3, #1
   2a2c4:	d927      	bls.n	2a316 <fcb_append+0x8a>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2a2c6:	425c      	negs	r4, r3
   2a2c8:	401c      	ands	r4, r3
   2a2ca:	440c      	add	r4, r1
   2a2cc:	b2a4      	uxth	r4, r4

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   2a2ce:	f105 080c 	add.w	r8, r5, #12
   2a2d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2a2d6:	4640      	mov	r0, r8
   2a2d8:	f7ec fb60 	bl	1699c <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   2a2dc:	b108      	cbz	r0, 2a2e2 <fcb_append+0x56>
   2a2de:	2809      	cmp	r0, #9
   2a2e0:	d14e      	bne.n	2a380 <fcb_append+0xf4>
        return FCB_ERR_ARGS;
    }
    active = &fcb->f_active;
    if (active->fe_elem_off + len + cnt > active->fe_area->fa_size) {
   2a2e2:	6a2b      	ldr	r3, [r5, #32]
   2a2e4:	4423      	add	r3, r4
   2a2e6:	46b1      	mov	r9, r6
   2a2e8:	441e      	add	r6, r3
   2a2ea:	69eb      	ldr	r3, [r5, #28]
   2a2ec:	689b      	ldr	r3, [r3, #8]
   2a2ee:	429e      	cmp	r6, r3
   2a2f0:	d923      	bls.n	2a33a <fcb_append+0xae>
        fa = fcb_new_area(fcb, fcb->f_scratch_cnt);
   2a2f2:	79a9      	ldrb	r1, [r5, #6]
   2a2f4:	4628      	mov	r0, r5
   2a2f6:	f7ff ff97 	bl	2a228 <fcb_new_area>
        if (!fa || (fa->fa_size <
   2a2fa:	4682      	mov	sl, r0
   2a2fc:	2800      	cmp	r0, #0
   2a2fe:	d03c      	beq.n	2a37a <fcb_append+0xee>
   2a300:	6882      	ldr	r2, [r0, #8]
            sizeof(struct fcb_disk_area) + len + cnt)) {
   2a302:	eb04 0309 	add.w	r3, r4, r9
   2a306:	3308      	adds	r3, #8
        if (!fa || (fa->fa_size <
   2a308:	429a      	cmp	r2, r3
   2a30a:	d206      	bcs.n	2a31a <fcb_append+0x8e>
            rc = FCB_ERR_NOSPACE;
   2a30c:	f06f 0603 	mvn.w	r6, #3
   2a310:	e01d      	b.n	2a34e <fcb_append+0xc2>
        return len;
   2a312:	b2b6      	uxth	r6, r6
   2a314:	e7ce      	b.n	2a2b4 <fcb_append+0x28>
   2a316:	2401      	movs	r4, #1
   2a318:	e7d7      	b.n	2a2ca <fcb_append+0x3e>
            goto err;
        }
        rc = fcb_sector_hdr_init(fcb, fa, fcb->f_active_id + 1);
   2a31a:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
   2a31c:	3201      	adds	r2, #1
   2a31e:	b292      	uxth	r2, r2
   2a320:	4601      	mov	r1, r0
   2a322:	4628      	mov	r0, r5
   2a324:	f7ff fe71 	bl	2a00a <fcb_sector_hdr_init>
        if (rc) {
   2a328:	4606      	mov	r6, r0
   2a32a:	b980      	cbnz	r0, 2a34e <fcb_append+0xc2>
            goto err;
        }
        fcb->f_active.fe_area = fa;
   2a32c:	f8c5 a01c 	str.w	sl, [r5, #28]
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   2a330:	2308      	movs	r3, #8
   2a332:	622b      	str	r3, [r5, #32]
        fcb->f_active_id++;
   2a334:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   2a336:	3301      	adds	r3, #1
   2a338:	85ab      	strh	r3, [r5, #44]	; 0x2c
    }

    rc = flash_area_write(active->fe_area, active->fe_elem_off, tmp_str, cnt);
   2a33a:	464b      	mov	r3, r9
   2a33c:	aa01      	add	r2, sp, #4
   2a33e:	6a29      	ldr	r1, [r5, #32]
   2a340:	69e8      	ldr	r0, [r5, #28]
   2a342:	f7ee fc06 	bl	18b52 <flash_area_write>
    if (rc) {
   2a346:	4606      	mov	r6, r0
   2a348:	b140      	cbz	r0, 2a35c <fcb_append+0xd0>
        rc = FCB_ERR_FLASH;
   2a34a:	f06f 0601 	mvn.w	r6, #1

    os_mutex_release(&fcb->f_mtx);

    return FCB_OK;
err:
    os_mutex_release(&fcb->f_mtx);
   2a34e:	4640      	mov	r0, r8
   2a350:	f7ec fac4 	bl	168dc <os_mutex_release>
    return rc;
}
   2a354:	4630      	mov	r0, r6
   2a356:	b002      	add	sp, #8
   2a358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    append_loc->fe_area = active->fe_area;
   2a35c:	69eb      	ldr	r3, [r5, #28]
   2a35e:	603b      	str	r3, [r7, #0]
    append_loc->fe_elem_off = active->fe_elem_off;
   2a360:	6a2b      	ldr	r3, [r5, #32]
   2a362:	607b      	str	r3, [r7, #4]
    append_loc->fe_data_off = active->fe_elem_off + cnt;
   2a364:	444b      	add	r3, r9
   2a366:	60bb      	str	r3, [r7, #8]
    active->fe_elem_off = append_loc->fe_data_off + len;
   2a368:	4423      	add	r3, r4
   2a36a:	622b      	str	r3, [r5, #32]
    active->fe_data_off = append_loc->fe_data_off;
   2a36c:	68bb      	ldr	r3, [r7, #8]
   2a36e:	626b      	str	r3, [r5, #36]	; 0x24
    active->fe_data_len = len;
   2a370:	852c      	strh	r4, [r5, #40]	; 0x28
    os_mutex_release(&fcb->f_mtx);
   2a372:	4640      	mov	r0, r8
   2a374:	f7ec fab2 	bl	168dc <os_mutex_release>
    return FCB_OK;
   2a378:	e7ec      	b.n	2a354 <fcb_append+0xc8>
            rc = FCB_ERR_NOSPACE;
   2a37a:	f06f 0603 	mvn.w	r6, #3
   2a37e:	e7e6      	b.n	2a34e <fcb_append+0xc2>
        return FCB_ERR_ARGS;
   2a380:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2a384:	e7e6      	b.n	2a354 <fcb_append+0xc8>

0002a386 <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   2a386:	b530      	push	{r4, r5, lr}
   2a388:	b083      	sub	sp, #12
   2a38a:	4605      	mov	r5, r0
   2a38c:	460c      	mov	r4, r1
    int rc;
    uint8_t crc8;
    uint32_t off;

    rc = fcb_elem_crc8(fcb, loc, &crc8);
   2a38e:	f10d 0207 	add.w	r2, sp, #7
   2a392:	f000 f818 	bl	2a3c6 <fcb_elem_crc8>
    if (rc) {
   2a396:	b988      	cbnz	r0, 2a3bc <fcb_append_finish+0x36>
        return rc;
    }
    off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   2a398:	68a0      	ldr	r0, [r4, #8]
   2a39a:	89a1      	ldrh	r1, [r4, #12]
    if (fcb->f_align <= 1) {
   2a39c:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   2a3a0:	2b01      	cmp	r3, #1
   2a3a2:	d903      	bls.n	2a3ac <fcb_append_finish+0x26>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2a3a4:	1e5a      	subs	r2, r3, #1
   2a3a6:	4411      	add	r1, r2
   2a3a8:	425b      	negs	r3, r3
   2a3aa:	4019      	ands	r1, r3

    rc = flash_area_write(loc->fe_area, off, &crc8, sizeof(crc8));
   2a3ac:	2301      	movs	r3, #1
   2a3ae:	f10d 0207 	add.w	r2, sp, #7
   2a3b2:	4401      	add	r1, r0
   2a3b4:	6820      	ldr	r0, [r4, #0]
   2a3b6:	f7ee fbcc 	bl	18b52 <flash_area_write>
    if (rc) {
   2a3ba:	b908      	cbnz	r0, 2a3c0 <fcb_append_finish+0x3a>
        return FCB_ERR_FLASH;
    }
    return 0;
}
   2a3bc:	b003      	add	sp, #12
   2a3be:	bd30      	pop	{r4, r5, pc}
        return FCB_ERR_FLASH;
   2a3c0:	f06f 0001 	mvn.w	r0, #1
   2a3c4:	e7fa      	b.n	2a3bc <fcb_append_finish+0x36>

0002a3c6 <fcb_elem_crc8>:
 * Given offset in flash area, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, uint8_t *c8p)
{
   2a3c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a3ca:	b08b      	sub	sp, #44	; 0x2c
   2a3cc:	4605      	mov	r5, r0
   2a3ce:	4688      	mov	r8, r1
   2a3d0:	4691      	mov	r9, r2
    uint16_t len;
    uint32_t off;
    uint32_t end;
    int rc;

    if (loc->fe_elem_off + 2 > loc->fe_area->fa_size) {
   2a3d2:	6849      	ldr	r1, [r1, #4]
   2a3d4:	1c8a      	adds	r2, r1, #2
   2a3d6:	f8d8 0000 	ldr.w	r0, [r8]
   2a3da:	6883      	ldr	r3, [r0, #8]
   2a3dc:	429a      	cmp	r2, r3
   2a3de:	d84a      	bhi.n	2a476 <fcb_elem_crc8+0xb0>
        return FCB_ERR_NOVAR;
    }
    rc = flash_area_read_is_empty(loc->fe_area, loc->fe_elem_off, tmp_str, 2);
   2a3e0:	2302      	movs	r3, #2
   2a3e2:	aa02      	add	r2, sp, #8
   2a3e4:	f7ee fbf8 	bl	18bd8 <flash_area_read_is_empty>
    if (rc < 0) {
   2a3e8:	1e03      	subs	r3, r0, #0
   2a3ea:	db47      	blt.n	2a47c <fcb_elem_crc8+0xb6>
        return FCB_ERR_FLASH;
    } else if (rc == 1) {
   2a3ec:	2b01      	cmp	r3, #1
   2a3ee:	d048      	beq.n	2a482 <fcb_elem_crc8+0xbc>
        return FCB_ERR_NOVAR;
    }

    cnt = fcb_get_len(tmp_str, &len);
   2a3f0:	f10d 0106 	add.w	r1, sp, #6
   2a3f4:	a802      	add	r0, sp, #8
   2a3f6:	f7ff fdf8 	bl	29fea <fcb_get_len>
   2a3fa:	4604      	mov	r4, r0
    loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   2a3fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
    if (fcb->f_align <= 1) {
   2a400:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   2a404:	2b01      	cmp	r3, #1
   2a406:	d918      	bls.n	2a43a <fcb_elem_crc8+0x74>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2a408:	1e5a      	subs	r2, r3, #1
   2a40a:	fa12 f280 	uxtah	r2, r2, r0
   2a40e:	425b      	negs	r3, r3
   2a410:	4013      	ands	r3, r2
   2a412:	440b      	add	r3, r1
   2a414:	f8c8 3008 	str.w	r3, [r8, #8]
    loc->fe_data_len = len;
   2a418:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2a41c:	f8a8 300c 	strh.w	r3, [r8, #12]

    crc8 = crc8_init();
   2a420:	f004 f9ec 	bl	2e7fc <crc8_init>
    crc8 = crc8_calc(crc8, tmp_str, cnt);
   2a424:	4622      	mov	r2, r4
   2a426:	a902      	add	r1, sp, #8
   2a428:	f004 f9ea 	bl	2e800 <crc8_calc>
   2a42c:	4606      	mov	r6, r0

    off = loc->fe_data_off;
   2a42e:	f8d8 5008 	ldr.w	r5, [r8, #8]
    end = loc->fe_data_off + len;
   2a432:	f8bd 7006 	ldrh.w	r7, [sp, #6]
   2a436:	442f      	add	r7, r5
    for (; off < end; off += blk_sz) {
   2a438:	e010      	b.n	2a45c <fcb_elem_crc8+0x96>
        return len;
   2a43a:	b283      	uxth	r3, r0
   2a43c:	e7e9      	b.n	2a412 <fcb_elem_crc8+0x4c>
        blk_sz = end - off;
        if (blk_sz > sizeof(tmp_str)) {
            blk_sz = sizeof(tmp_str);
        }

        rc = flash_area_read(loc->fe_area, off, tmp_str, blk_sz);
   2a43e:	4623      	mov	r3, r4
   2a440:	aa02      	add	r2, sp, #8
   2a442:	4629      	mov	r1, r5
   2a444:	f8d8 0000 	ldr.w	r0, [r8]
   2a448:	f7ee fb70 	bl	18b2c <flash_area_read>
        if (rc) {
   2a44c:	b9e0      	cbnz	r0, 2a488 <fcb_elem_crc8+0xc2>
            return FCB_ERR_FLASH;
        }
        crc8 = crc8_calc(crc8, tmp_str, blk_sz);
   2a44e:	4622      	mov	r2, r4
   2a450:	a902      	add	r1, sp, #8
   2a452:	4630      	mov	r0, r6
   2a454:	f004 f9d4 	bl	2e800 <crc8_calc>
   2a458:	4606      	mov	r6, r0
    for (; off < end; off += blk_sz) {
   2a45a:	4425      	add	r5, r4
   2a45c:	42bd      	cmp	r5, r7
   2a45e:	d204      	bcs.n	2a46a <fcb_elem_crc8+0xa4>
        blk_sz = end - off;
   2a460:	1b7c      	subs	r4, r7, r5
        if (blk_sz > sizeof(tmp_str)) {
   2a462:	2c20      	cmp	r4, #32
   2a464:	d9eb      	bls.n	2a43e <fcb_elem_crc8+0x78>
            blk_sz = sizeof(tmp_str);
   2a466:	2420      	movs	r4, #32
   2a468:	e7e9      	b.n	2a43e <fcb_elem_crc8+0x78>
    }
    *c8p = crc8;
   2a46a:	f889 6000 	strb.w	r6, [r9]

    return 0;
   2a46e:	2000      	movs	r0, #0
}
   2a470:	b00b      	add	sp, #44	; 0x2c
   2a472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return FCB_ERR_NOVAR;
   2a476:	f06f 0002 	mvn.w	r0, #2
   2a47a:	e7f9      	b.n	2a470 <fcb_elem_crc8+0xaa>
        return FCB_ERR_FLASH;
   2a47c:	f06f 0001 	mvn.w	r0, #1
   2a480:	e7f6      	b.n	2a470 <fcb_elem_crc8+0xaa>
        return FCB_ERR_NOVAR;
   2a482:	f06f 0002 	mvn.w	r0, #2
   2a486:	e7f3      	b.n	2a470 <fcb_elem_crc8+0xaa>
            return FCB_ERR_FLASH;
   2a488:	f06f 0001 	mvn.w	r0, #1
   2a48c:	e7f0      	b.n	2a470 <fcb_elem_crc8+0xaa>

0002a48e <fcb_elem_info>:

int
fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   2a48e:	b530      	push	{r4, r5, lr}
   2a490:	b083      	sub	sp, #12
   2a492:	4605      	mov	r5, r0
   2a494:	460c      	mov	r4, r1
    int rc;
    uint8_t crc8;
    uint8_t fl_crc8;
    uint32_t off;

    rc = fcb_elem_crc8(fcb, loc, &crc8);
   2a496:	f10d 0207 	add.w	r2, sp, #7
   2a49a:	f7ff ff94 	bl	2a3c6 <fcb_elem_crc8>
    if (rc) {
   2a49e:	b9b8      	cbnz	r0, 2a4d0 <fcb_elem_info+0x42>
        return rc;
    }
    off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   2a4a0:	68a0      	ldr	r0, [r4, #8]
   2a4a2:	89a1      	ldrh	r1, [r4, #12]
    if (fcb->f_align <= 1) {
   2a4a4:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   2a4a8:	2b01      	cmp	r3, #1
   2a4aa:	d903      	bls.n	2a4b4 <fcb_elem_info+0x26>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2a4ac:	1e5a      	subs	r2, r3, #1
   2a4ae:	4411      	add	r1, r2
   2a4b0:	425b      	negs	r3, r3
   2a4b2:	4019      	ands	r1, r3

    rc = flash_area_read(loc->fe_area, off, &fl_crc8, sizeof(fl_crc8));
   2a4b4:	2301      	movs	r3, #1
   2a4b6:	f10d 0206 	add.w	r2, sp, #6
   2a4ba:	4401      	add	r1, r0
   2a4bc:	6820      	ldr	r0, [r4, #0]
   2a4be:	f7ee fb35 	bl	18b2c <flash_area_read>
    if (rc) {
   2a4c2:	b938      	cbnz	r0, 2a4d4 <fcb_elem_info+0x46>
        return FCB_ERR_FLASH;
    }

    if (fl_crc8 != crc8) {
   2a4c4:	f89d 2006 	ldrb.w	r2, [sp, #6]
   2a4c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2a4cc:	429a      	cmp	r2, r3
   2a4ce:	d104      	bne.n	2a4da <fcb_elem_info+0x4c>
        return FCB_ERR_CRC;
    }
    return 0;
}
   2a4d0:	b003      	add	sp, #12
   2a4d2:	bd30      	pop	{r4, r5, pc}
        return FCB_ERR_FLASH;
   2a4d4:	f06f 0001 	mvn.w	r0, #1
   2a4d8:	e7fa      	b.n	2a4d0 <fcb_elem_info+0x42>
        return FCB_ERR_CRC;
   2a4da:	f06f 0005 	mvn.w	r0, #5
   2a4de:	e7f7      	b.n	2a4d0 <fcb_elem_info+0x42>

0002a4e0 <fcb_getnext_in_area>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

int
fcb_getnext_in_area(struct fcb *fcb, struct fcb_entry *loc)
{
   2a4e0:	b570      	push	{r4, r5, r6, lr}
   2a4e2:	4606      	mov	r6, r0
   2a4e4:	460d      	mov	r5, r1
    int rc;

    rc = fcb_elem_info(fcb, loc);
   2a4e6:	f7ff ffd2 	bl	2a48e <fcb_elem_info>
    if (rc == 0 || rc == FCB_ERR_CRC) {
   2a4ea:	b168      	cbz	r0, 2a508 <fcb_getnext_in_area+0x28>
   2a4ec:	f110 0f06 	cmn.w	r0, #6
   2a4f0:	d00a      	beq.n	2a508 <fcb_getnext_in_area+0x28>
                break;
            }
        } while (rc == FCB_ERR_CRC);
    }
    return rc;
}
   2a4f2:	bd70      	pop	{r4, r5, r6, pc}
        return len;
   2a4f4:	2301      	movs	r3, #1
              fcb_len_in_flash(fcb, loc->fe_data_len) +
   2a4f6:	4413      	add	r3, r2
            loc->fe_elem_off = loc->fe_data_off +
   2a4f8:	606b      	str	r3, [r5, #4]
            rc = fcb_elem_info(fcb, loc);
   2a4fa:	4629      	mov	r1, r5
   2a4fc:	4630      	mov	r0, r6
   2a4fe:	f7ff ffc6 	bl	2a48e <fcb_elem_info>
            if (rc != FCB_ERR_CRC) {
   2a502:	f110 0f06 	cmn.w	r0, #6
   2a506:	d1f4      	bne.n	2a4f2 <fcb_getnext_in_area+0x12>
            loc->fe_elem_off = loc->fe_data_off +
   2a508:	68ac      	ldr	r4, [r5, #8]
              fcb_len_in_flash(fcb, loc->fe_data_len) +
   2a50a:	89aa      	ldrh	r2, [r5, #12]
    if (fcb->f_align <= 1) {
   2a50c:	f896 302e 	ldrb.w	r3, [r6, #46]	; 0x2e
   2a510:	2b01      	cmp	r3, #1
   2a512:	d903      	bls.n	2a51c <fcb_getnext_in_area+0x3c>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2a514:	1e59      	subs	r1, r3, #1
   2a516:	440a      	add	r2, r1
   2a518:	4259      	negs	r1, r3
   2a51a:	400a      	ands	r2, r1
            loc->fe_elem_off = loc->fe_data_off +
   2a51c:	4422      	add	r2, r4
    if (fcb->f_align <= 1) {
   2a51e:	2b01      	cmp	r3, #1
   2a520:	d9e8      	bls.n	2a4f4 <fcb_getnext_in_area+0x14>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2a522:	4259      	negs	r1, r3
   2a524:	400b      	ands	r3, r1
   2a526:	e7e6      	b.n	2a4f6 <fcb_getnext_in_area+0x16>

0002a528 <fcb_getnext_area>:

struct flash_area *
fcb_getnext_area(struct fcb *fcb, struct flash_area *fap)
{
   2a528:	4603      	mov	r3, r0
    fap++;
   2a52a:	310c      	adds	r1, #12
    if (fap >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   2a52c:	6880      	ldr	r0, [r0, #8]
   2a52e:	795b      	ldrb	r3, [r3, #5]
   2a530:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2a534:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   2a538:	428b      	cmp	r3, r1
   2a53a:	d900      	bls.n	2a53e <fcb_getnext_area+0x16>
    fap++;
   2a53c:	4608      	mov	r0, r1
        fap = &fcb->f_sectors[0];
    }
    return fap;
}
   2a53e:	4770      	bx	lr

0002a540 <fcb_getnext_nolock>:

int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
   2a540:	b538      	push	{r3, r4, r5, lr}
   2a542:	4605      	mov	r5, r0
   2a544:	460c      	mov	r4, r1
    int rc;

    if (loc->fe_area == NULL) {
   2a546:	680b      	ldr	r3, [r1, #0]
   2a548:	b313      	cbz	r3, 2a590 <fcb_getnext_nolock+0x50>
        /*
         * Find the first one we have in flash.
         */
        loc->fe_area = fcb->f_oldest;
    }
    if (loc->fe_elem_off == 0) {
   2a54a:	6863      	ldr	r3, [r4, #4]
   2a54c:	bb1b      	cbnz	r3, 2a596 <fcb_getnext_nolock+0x56>
        /*
         * If offset is zero, we serve the first entry from the area.
         */
        loc->fe_elem_off = sizeof(struct fcb_disk_area);
   2a54e:	2308      	movs	r3, #8
   2a550:	6063      	str	r3, [r4, #4]
        rc = fcb_elem_info(fcb, loc);
   2a552:	4621      	mov	r1, r4
   2a554:	4628      	mov	r0, r5
   2a556:	f7ff ff9a 	bl	2a48e <fcb_elem_info>
   2a55a:	4603      	mov	r3, r0
    } else {
        rc = fcb_getnext_in_area(fcb, loc);
    }
    switch (rc) {
   2a55c:	f113 0f06 	cmn.w	r3, #6
   2a560:	d01f      	beq.n	2a5a2 <fcb_getnext_nolock+0x62>
   2a562:	b19b      	cbz	r3, 2a58c <fcb_getnext_nolock+0x4c>
        if (rc != FCB_ERR_CRC) {
            /*
             * Moving to next sector.
             */
next_sector:
            if (loc->fe_area == fcb->f_active.fe_area) {
   2a564:	6821      	ldr	r1, [r4, #0]
   2a566:	69eb      	ldr	r3, [r5, #28]
   2a568:	4299      	cmp	r1, r3
   2a56a:	d02a      	beq.n	2a5c2 <fcb_getnext_nolock+0x82>
                return FCB_ERR_NOVAR;
            }
            loc->fe_area = fcb_getnext_area(fcb, loc->fe_area);
   2a56c:	4628      	mov	r0, r5
   2a56e:	f7ff ffdb 	bl	2a528 <fcb_getnext_area>
   2a572:	6020      	str	r0, [r4, #0]
            loc->fe_elem_off = sizeof(struct fcb_disk_area);
   2a574:	2308      	movs	r3, #8
   2a576:	6063      	str	r3, [r4, #4]
            rc = fcb_elem_info(fcb, loc);
   2a578:	4621      	mov	r1, r4
   2a57a:	4628      	mov	r0, r5
   2a57c:	f7ff ff87 	bl	2a48e <fcb_elem_info>
   2a580:	4603      	mov	r3, r0
            switch (rc) {
   2a582:	f110 0f06 	cmn.w	r0, #6
   2a586:	d00c      	beq.n	2a5a2 <fcb_getnext_nolock+0x62>
   2a588:	2800      	cmp	r0, #0
   2a58a:	d1eb      	bne.n	2a564 <fcb_getnext_nolock+0x24>
            }
        }
    }

    return 0;
}
   2a58c:	4618      	mov	r0, r3
   2a58e:	bd38      	pop	{r3, r4, r5, pc}
        loc->fe_area = fcb->f_oldest;
   2a590:	6983      	ldr	r3, [r0, #24]
   2a592:	600b      	str	r3, [r1, #0]
   2a594:	e7d9      	b.n	2a54a <fcb_getnext_nolock+0xa>
        rc = fcb_getnext_in_area(fcb, loc);
   2a596:	4621      	mov	r1, r4
   2a598:	4628      	mov	r0, r5
   2a59a:	f7ff ffa1 	bl	2a4e0 <fcb_getnext_in_area>
   2a59e:	4603      	mov	r3, r0
   2a5a0:	e7dc      	b.n	2a55c <fcb_getnext_nolock+0x1c>
    while (rc == FCB_ERR_CRC) {
   2a5a2:	f113 0f06 	cmn.w	r3, #6
   2a5a6:	d10a      	bne.n	2a5be <fcb_getnext_nolock+0x7e>
        rc = fcb_getnext_in_area(fcb, loc);
   2a5a8:	4621      	mov	r1, r4
   2a5aa:	4628      	mov	r0, r5
   2a5ac:	f7ff ff98 	bl	2a4e0 <fcb_getnext_in_area>
        if (rc == 0) {
   2a5b0:	4603      	mov	r3, r0
   2a5b2:	2800      	cmp	r0, #0
   2a5b4:	d0ea      	beq.n	2a58c <fcb_getnext_nolock+0x4c>
        if (rc != FCB_ERR_CRC) {
   2a5b6:	f110 0f06 	cmn.w	r0, #6
   2a5ba:	d0f2      	beq.n	2a5a2 <fcb_getnext_nolock+0x62>
next_sector:
   2a5bc:	e7d2      	b.n	2a564 <fcb_getnext_nolock+0x24>
    return 0;
   2a5be:	2300      	movs	r3, #0
   2a5c0:	e7e4      	b.n	2a58c <fcb_getnext_nolock+0x4c>
                return FCB_ERR_NOVAR;
   2a5c2:	f06f 0302 	mvn.w	r3, #2
   2a5c6:	e7e1      	b.n	2a58c <fcb_getnext_nolock+0x4c>

0002a5c8 <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   2a5c8:	b570      	push	{r4, r5, r6, lr}
   2a5ca:	4604      	mov	r4, r0
   2a5cc:	460d      	mov	r5, r1
    int rc;

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   2a5ce:	f100 060c 	add.w	r6, r0, #12
   2a5d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2a5d6:	4630      	mov	r0, r6
   2a5d8:	f7ec f9e0 	bl	1699c <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   2a5dc:	b108      	cbz	r0, 2a5e2 <fcb_getnext+0x1a>
   2a5de:	2809      	cmp	r0, #9
   2a5e0:	d109      	bne.n	2a5f6 <fcb_getnext+0x2e>
        return FCB_ERR_ARGS;
    }
    rc = fcb_getnext_nolock(fcb, loc);
   2a5e2:	4629      	mov	r1, r5
   2a5e4:	4620      	mov	r0, r4
   2a5e6:	f7ff ffab 	bl	2a540 <fcb_getnext_nolock>
   2a5ea:	4604      	mov	r4, r0
    os_mutex_release(&fcb->f_mtx);
   2a5ec:	4630      	mov	r0, r6
   2a5ee:	f7ec f975 	bl	168dc <os_mutex_release>

    return rc;
}
   2a5f2:	4620      	mov	r0, r4
   2a5f4:	bd70      	pop	{r4, r5, r6, pc}
        return FCB_ERR_ARGS;
   2a5f6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2a5fa:	e7fa      	b.n	2a5f2 <fcb_getnext+0x2a>

0002a5fc <fcb_rotate>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   2a5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a5fe:	4604      	mov	r4, r0
    struct flash_area *fap;
    int rc = 0;

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   2a600:	f100 050c 	add.w	r5, r0, #12
   2a604:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2a608:	4628      	mov	r0, r5
   2a60a:	f7ec f9c7 	bl	1699c <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   2a60e:	b108      	cbz	r0, 2a614 <fcb_rotate+0x18>
   2a610:	2809      	cmp	r0, #9
   2a612:	d12c      	bne.n	2a66e <fcb_rotate+0x72>
        return FCB_ERR_ARGS;
    }

    rc = flash_area_erase(fcb->f_oldest, 0, fcb->f_oldest->fa_size);
   2a614:	69a0      	ldr	r0, [r4, #24]
   2a616:	6882      	ldr	r2, [r0, #8]
   2a618:	2100      	movs	r1, #0
   2a61a:	f7ee faad 	bl	18b78 <flash_area_erase>
    if (rc) {
   2a61e:	4606      	mov	r6, r0
   2a620:	bb10      	cbnz	r0, 2a668 <fcb_rotate+0x6c>
        rc = FCB_ERR_FLASH;
        goto out;
    }
    if (fcb->f_oldest == fcb->f_active.fe_area) {
   2a622:	69a1      	ldr	r1, [r4, #24]
   2a624:	69e3      	ldr	r3, [r4, #28]
   2a626:	4299      	cmp	r1, r3
   2a628:	d009      	beq.n	2a63e <fcb_rotate+0x42>
        }
        fcb->f_active.fe_area = fap;
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
        fcb->f_active_id++;
    }
    fcb->f_oldest = fcb_getnext_area(fcb, fcb->f_oldest);
   2a62a:	69a1      	ldr	r1, [r4, #24]
   2a62c:	4620      	mov	r0, r4
   2a62e:	f7ff ff7b 	bl	2a528 <fcb_getnext_area>
   2a632:	61a0      	str	r0, [r4, #24]
out:
    os_mutex_release(&fcb->f_mtx);
   2a634:	4628      	mov	r0, r5
   2a636:	f7ec f951 	bl	168dc <os_mutex_release>
    return rc;
}
   2a63a:	4630      	mov	r0, r6
   2a63c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        fap = fcb_getnext_area(fcb, fcb->f_oldest);
   2a63e:	4620      	mov	r0, r4
   2a640:	f7ff ff72 	bl	2a528 <fcb_getnext_area>
   2a644:	4607      	mov	r7, r0
        rc = fcb_sector_hdr_init(fcb, fap, fcb->f_active_id + 1);
   2a646:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   2a648:	3201      	adds	r2, #1
   2a64a:	b292      	uxth	r2, r2
   2a64c:	4601      	mov	r1, r0
   2a64e:	4620      	mov	r0, r4
   2a650:	f7ff fcdb 	bl	2a00a <fcb_sector_hdr_init>
        if (rc) {
   2a654:	4606      	mov	r6, r0
   2a656:	2800      	cmp	r0, #0
   2a658:	d1ec      	bne.n	2a634 <fcb_rotate+0x38>
        fcb->f_active.fe_area = fap;
   2a65a:	61e7      	str	r7, [r4, #28]
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   2a65c:	2308      	movs	r3, #8
   2a65e:	6223      	str	r3, [r4, #32]
        fcb->f_active_id++;
   2a660:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   2a662:	3301      	adds	r3, #1
   2a664:	85a3      	strh	r3, [r4, #44]	; 0x2c
   2a666:	e7e0      	b.n	2a62a <fcb_rotate+0x2e>
        rc = FCB_ERR_FLASH;
   2a668:	f06f 0601 	mvn.w	r6, #1
   2a66c:	e7e2      	b.n	2a634 <fcb_rotate+0x38>
        return FCB_ERR_ARGS;
   2a66e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2a672:	e7e2      	b.n	2a63a <fcb_rotate+0x3e>

0002a674 <fcb_walk>:
 * Call 'cb' for every element in flash circular buffer. If fap is specified,
 * only elements with that flash_area are reported.
 */
int
fcb_walk(struct fcb *fcb, struct flash_area *fap, fcb_walk_cb cb, void *cb_arg)
{
   2a674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a678:	b084      	sub	sp, #16
   2a67a:	4606      	mov	r6, r0
   2a67c:	460d      	mov	r5, r1
   2a67e:	4617      	mov	r7, r2
   2a680:	4698      	mov	r8, r3
    struct fcb_entry loc;
    int rc;

    loc.fe_area = fap;
   2a682:	9100      	str	r1, [sp, #0]
    loc.fe_elem_off = 0;
   2a684:	2300      	movs	r3, #0
   2a686:	9301      	str	r3, [sp, #4]

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   2a688:	f100 040c 	add.w	r4, r0, #12
   2a68c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2a690:	4620      	mov	r0, r4
   2a692:	f7ec f983 	bl	1699c <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   2a696:	b170      	cbz	r0, 2a6b6 <fcb_walk+0x42>
   2a698:	2809      	cmp	r0, #9
   2a69a:	d00c      	beq.n	2a6b6 <fcb_walk+0x42>
        return FCB_ERR_ARGS;
   2a69c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a6a0:	e01e      	b.n	2a6e0 <fcb_walk+0x6c>
    while ((rc = fcb_getnext_nolock(fcb, &loc)) != FCB_ERR_NOVAR) {
        os_mutex_release(&fcb->f_mtx);
        if (fap && loc.fe_area != fap) {
            return 0;
        }
        rc = cb(&loc, cb_arg);
   2a6a2:	4641      	mov	r1, r8
   2a6a4:	4668      	mov	r0, sp
   2a6a6:	47b8      	blx	r7
        if (rc) {
   2a6a8:	4603      	mov	r3, r0
   2a6aa:	b9c8      	cbnz	r0, 2a6e0 <fcb_walk+0x6c>
            return rc;
        }
        os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   2a6ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2a6b0:	4620      	mov	r0, r4
   2a6b2:	f7ec f973 	bl	1699c <os_mutex_pend>
    while ((rc = fcb_getnext_nolock(fcb, &loc)) != FCB_ERR_NOVAR) {
   2a6b6:	4669      	mov	r1, sp
   2a6b8:	4630      	mov	r0, r6
   2a6ba:	f7ff ff41 	bl	2a540 <fcb_getnext_nolock>
   2a6be:	f110 0f03 	cmn.w	r0, #3
   2a6c2:	d009      	beq.n	2a6d8 <fcb_walk+0x64>
        os_mutex_release(&fcb->f_mtx);
   2a6c4:	4620      	mov	r0, r4
   2a6c6:	f7ec f909 	bl	168dc <os_mutex_release>
        if (fap && loc.fe_area != fap) {
   2a6ca:	2d00      	cmp	r5, #0
   2a6cc:	d0e9      	beq.n	2a6a2 <fcb_walk+0x2e>
   2a6ce:	9900      	ldr	r1, [sp, #0]
   2a6d0:	42a9      	cmp	r1, r5
   2a6d2:	d0e6      	beq.n	2a6a2 <fcb_walk+0x2e>
            return 0;
   2a6d4:	2300      	movs	r3, #0
   2a6d6:	e003      	b.n	2a6e0 <fcb_walk+0x6c>
    }
    os_mutex_release(&fcb->f_mtx);
   2a6d8:	4620      	mov	r0, r4
   2a6da:	f7ec f8ff 	bl	168dc <os_mutex_release>
    return 0;
   2a6de:	2300      	movs	r3, #0
}
   2a6e0:	4618      	mov	r0, r3
   2a6e2:	b004      	add	sp, #16
   2a6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a6e8 <hal_bsp_flash_dev>:
};

const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    if (id != 0) {
   2a6e8:	b908      	cbnz	r0, 2a6ee <hal_bsp_flash_dev+0x6>
        return (NULL);
    }
    return &apollo3_flash_dev;
   2a6ea:	4802      	ldr	r0, [pc, #8]	; (2a6f4 <hal_bsp_flash_dev+0xc>)
   2a6ec:	4770      	bx	lr
        return (NULL);
   2a6ee:	2000      	movs	r0, #0
}
   2a6f0:	4770      	bx	lr
   2a6f2:	bf00      	nop
   2a6f4:	00033874 	.word	0x00033874

0002a6f8 <hal_bsp_init>:
    return dump_cfg;
}

void
hal_bsp_init(void)
{
   2a6f8:	b508      	push	{r3, lr}
    /* Create all available Apollo3 peripherals */
    apollo3_periph_create();
   2a6fa:	f000 f9d1 	bl	2aaa0 <apollo3_periph_create>
}
   2a6fe:	bd08      	pop	{r3, pc}

0002a700 <hal_bsp_hw_id>:

int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
    return 0;
}
   2a700:	2000      	movs	r0, #0
   2a702:	4770      	bx	lr

0002a704 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   2a704:	6843      	ldr	r3, [r0, #4]
   2a706:	428b      	cmp	r3, r1
   2a708:	d805      	bhi.n	2a716 <hal_flash_check_addr+0x12>
   2a70a:	6882      	ldr	r2, [r0, #8]
   2a70c:	4413      	add	r3, r2
   2a70e:	428b      	cmp	r3, r1
   2a710:	d304      	bcc.n	2a71c <hal_flash_check_addr+0x18>
        return SYS_EINVAL;
    }
    return 0;
   2a712:	2000      	movs	r0, #0
   2a714:	4770      	bx	lr
        return SYS_EINVAL;
   2a716:	f06f 0001 	mvn.w	r0, #1
   2a71a:	4770      	bx	lr
   2a71c:	f06f 0001 	mvn.w	r0, #1
}
   2a720:	4770      	bx	lr

0002a722 <hal_flash_init>:
{
   2a722:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   2a724:	2500      	movs	r5, #0
    for (i = 0; i < max_id; i++) {
   2a726:	462c      	mov	r4, r5
   2a728:	e001      	b.n	2a72e <hal_flash_init+0xc>
   2a72a:	3401      	adds	r4, #1
   2a72c:	b2e4      	uxtb	r4, r4
   2a72e:	2cff      	cmp	r4, #255	; 0xff
   2a730:	d00b      	beq.n	2a74a <hal_flash_init+0x28>
        hf = hal_bsp_flash_dev(i);
   2a732:	4620      	mov	r0, r4
   2a734:	f7ff ffd8 	bl	2a6e8 <hal_bsp_flash_dev>
        if (!hf) {
   2a738:	b138      	cbz	r0, 2a74a <hal_flash_init+0x28>
        if (hf->hf_itf->hff_init(hf)) {
   2a73a:	6802      	ldr	r2, [r0, #0]
   2a73c:	6952      	ldr	r2, [r2, #20]
   2a73e:	4790      	blx	r2
   2a740:	2800      	cmp	r0, #0
   2a742:	d0f2      	beq.n	2a72a <hal_flash_init+0x8>
            rc = SYS_EIO;
   2a744:	f06f 0504 	mvn.w	r5, #4
   2a748:	e7ef      	b.n	2a72a <hal_flash_init+0x8>
}
   2a74a:	4628      	mov	r0, r5
   2a74c:	bd38      	pop	{r3, r4, r5, pc}

0002a74e <hal_flash_align>:
{
   2a74e:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   2a750:	f7ff ffca 	bl	2a6e8 <hal_bsp_flash_dev>
    if (!hf) {
   2a754:	b108      	cbz	r0, 2a75a <hal_flash_align+0xc>
    return hf->hf_align;
   2a756:	7c00      	ldrb	r0, [r0, #16]
}
   2a758:	bd08      	pop	{r3, pc}
        return 1;
   2a75a:	2001      	movs	r0, #1
   2a75c:	e7fc      	b.n	2a758 <hal_flash_align+0xa>

0002a75e <hal_flash_erased_val>:
{
   2a75e:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   2a760:	f7ff ffc2 	bl	2a6e8 <hal_bsp_flash_dev>
    if (!hf) {
   2a764:	b108      	cbz	r0, 2a76a <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
   2a766:	7d00      	ldrb	r0, [r0, #20]
}
   2a768:	bd08      	pop	{r3, pc}
        return 1;
   2a76a:	2001      	movs	r0, #1
   2a76c:	e7fc      	b.n	2a768 <hal_flash_erased_val+0xa>

0002a76e <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   2a76e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a772:	460c      	mov	r4, r1
   2a774:	4617      	mov	r7, r2
   2a776:	461d      	mov	r5, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   2a778:	f7ff ffb6 	bl	2a6e8 <hal_bsp_flash_dev>
    if (!hf) {
   2a77c:	b1a0      	cbz	r0, 2a7a8 <hal_flash_read+0x3a>
   2a77e:	4606      	mov	r6, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   2a780:	4621      	mov	r1, r4
   2a782:	f7ff ffbf 	bl	2a704 <hal_flash_check_addr>
   2a786:	b990      	cbnz	r0, 2a7ae <hal_flash_read+0x40>
      hal_flash_check_addr(hf, address + num_bytes)) {
   2a788:	1961      	adds	r1, r4, r5
   2a78a:	4630      	mov	r0, r6
   2a78c:	f7ff ffba 	bl	2a704 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   2a790:	b980      	cbnz	r0, 2a7b4 <hal_flash_read+0x46>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   2a792:	6833      	ldr	r3, [r6, #0]
   2a794:	f8d3 8000 	ldr.w	r8, [r3]
   2a798:	462b      	mov	r3, r5
   2a79a:	463a      	mov	r2, r7
   2a79c:	4621      	mov	r1, r4
   2a79e:	4630      	mov	r0, r6
   2a7a0:	47c0      	blx	r8
    if (rc != 0) {
   2a7a2:	b950      	cbnz	r0, 2a7ba <hal_flash_read+0x4c>
        return SYS_EIO;
    }

    return 0;
}
   2a7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   2a7a8:	f06f 0001 	mvn.w	r0, #1
   2a7ac:	e7fa      	b.n	2a7a4 <hal_flash_read+0x36>
        return SYS_EINVAL;
   2a7ae:	f06f 0001 	mvn.w	r0, #1
   2a7b2:	e7f7      	b.n	2a7a4 <hal_flash_read+0x36>
   2a7b4:	f06f 0001 	mvn.w	r0, #1
   2a7b8:	e7f4      	b.n	2a7a4 <hal_flash_read+0x36>
        return SYS_EIO;
   2a7ba:	f06f 0004 	mvn.w	r0, #4
   2a7be:	e7f1      	b.n	2a7a4 <hal_flash_read+0x36>

0002a7c0 <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
   2a7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a7c4:	4604      	mov	r4, r0
   2a7c6:	460d      	mov	r5, r1
   2a7c8:	4690      	mov	r8, r2
   2a7ca:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   2a7cc:	f7ff ff8c 	bl	2a6e8 <hal_bsp_flash_dev>
    if (!hf) {
   2a7d0:	b1e8      	cbz	r0, 2a80e <hal_flash_write+0x4e>
   2a7d2:	4607      	mov	r7, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   2a7d4:	4629      	mov	r1, r5
   2a7d6:	f7ff ff95 	bl	2a704 <hal_flash_check_addr>
   2a7da:	b9d8      	cbnz	r0, 2a814 <hal_flash_write+0x54>
      hal_flash_check_addr(hf, address + num_bytes)) {
   2a7dc:	19a9      	adds	r1, r5, r6
   2a7de:	4638      	mov	r0, r7
   2a7e0:	f7ff ff90 	bl	2a704 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   2a7e4:	b9c8      	cbnz	r0, 2a81a <hal_flash_write+0x5a>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   2a7e6:	08e3      	lsrs	r3, r4, #3
   2a7e8:	4a10      	ldr	r2, [pc, #64]	; (2a82c <hal_flash_write+0x6c>)
   2a7ea:	5cd0      	ldrb	r0, [r2, r3]
   2a7ec:	f004 0407 	and.w	r4, r4, #7
   2a7f0:	fa40 f404 	asr.w	r4, r0, r4
   2a7f4:	f014 0f01 	tst.w	r4, #1
   2a7f8:	d112      	bne.n	2a820 <hal_flash_write+0x60>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
   2a7fa:	683b      	ldr	r3, [r7, #0]
   2a7fc:	685c      	ldr	r4, [r3, #4]
   2a7fe:	4633      	mov	r3, r6
   2a800:	4642      	mov	r2, r8
   2a802:	4629      	mov	r1, r5
   2a804:	4638      	mov	r0, r7
   2a806:	47a0      	blx	r4
    if (rc != 0) {
   2a808:	b968      	cbnz	r0, 2a826 <hal_flash_write+0x66>
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
   2a80a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   2a80e:	f06f 0001 	mvn.w	r0, #1
   2a812:	e7fa      	b.n	2a80a <hal_flash_write+0x4a>
        return SYS_EINVAL;
   2a814:	f06f 0001 	mvn.w	r0, #1
   2a818:	e7f7      	b.n	2a80a <hal_flash_write+0x4a>
   2a81a:	f06f 0001 	mvn.w	r0, #1
   2a81e:	e7f4      	b.n	2a80a <hal_flash_write+0x4a>
        return SYS_EACCES;
   2a820:	f06f 0006 	mvn.w	r0, #6
   2a824:	e7f1      	b.n	2a80a <hal_flash_write+0x4a>
        return SYS_EIO;
   2a826:	f06f 0004 	mvn.w	r0, #4
   2a82a:	e7ee      	b.n	2a80a <hal_flash_write+0x4a>
   2a82c:	10004fb4 	.word	0x10004fb4

0002a830 <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   2a830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a834:	b082      	sub	sp, #8
   2a836:	4605      	mov	r5, r0
   2a838:	460e      	mov	r6, r1
   2a83a:	4691      	mov	r9, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
   2a83c:	f7ff ff54 	bl	2a6e8 <hal_bsp_flash_dev>
    if (!hf) {
   2a840:	2800      	cmp	r0, #0
   2a842:	d051      	beq.n	2a8e8 <hal_flash_erase+0xb8>
   2a844:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   2a846:	4631      	mov	r1, r6
   2a848:	f7ff ff5c 	bl	2a704 <hal_flash_check_addr>
   2a84c:	2800      	cmp	r0, #0
   2a84e:	d14e      	bne.n	2a8ee <hal_flash_erase+0xbe>
      hal_flash_check_addr(hf, address + num_bytes)) {
   2a850:	eb06 0809 	add.w	r8, r6, r9
   2a854:	4641      	mov	r1, r8
   2a856:	4620      	mov	r0, r4
   2a858:	f7ff ff54 	bl	2a704 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   2a85c:	2800      	cmp	r0, #0
   2a85e:	d149      	bne.n	2a8f4 <hal_flash_erase+0xc4>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   2a860:	08eb      	lsrs	r3, r5, #3
   2a862:	4a2a      	ldr	r2, [pc, #168]	; (2a90c <hal_flash_erase+0xdc>)
   2a864:	5cd7      	ldrb	r7, [r2, r3]
   2a866:	f005 0507 	and.w	r5, r5, #7
   2a86a:	fa47 f505 	asr.w	r5, r7, r5
   2a86e:	f015 0a01 	ands.w	sl, r5, #1
   2a872:	d142      	bne.n	2a8fa <hal_flash_erase+0xca>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
   2a874:	45b0      	cmp	r8, r6
   2a876:	d943      	bls.n	2a900 <hal_flash_erase+0xd0>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
   2a878:	6823      	ldr	r3, [r4, #0]
   2a87a:	699b      	ldr	r3, [r3, #24]
   2a87c:	2b00      	cmp	r3, #0
   2a87e:	d031      	beq.n	2a8e4 <hal_flash_erase+0xb4>
        if (hf->hf_itf->hff_erase(hf, address, num_bytes)) {
   2a880:	464a      	mov	r2, r9
   2a882:	4631      	mov	r1, r6
   2a884:	4620      	mov	r0, r4
   2a886:	4798      	blx	r3
   2a888:	4682      	mov	sl, r0
   2a88a:	2800      	cmp	r0, #0
   2a88c:	d13b      	bne.n	2a906 <hal_flash_erase+0xd6>
#endif
            }
        }
    }
    return 0;
}
   2a88e:	4650      	mov	r0, sl
   2a890:	b002      	add	sp, #8
   2a892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            assert(rc == 0);
   2a896:	f7e9 fee5 	bl	14664 <hal_debugger_connected>
   2a89a:	b100      	cbz	r0, 2a89e <hal_flash_erase+0x6e>
   2a89c:	be01      	bkpt	0x0001
   2a89e:	2300      	movs	r3, #0
   2a8a0:	461a      	mov	r2, r3
   2a8a2:	4619      	mov	r1, r3
   2a8a4:	4618      	mov	r0, r3
   2a8a6:	f7ea fa7d 	bl	14da4 <__assert_func>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   2a8aa:	3501      	adds	r5, #1
   2a8ac:	68e3      	ldr	r3, [r4, #12]
   2a8ae:	42ab      	cmp	r3, r5
   2a8b0:	dded      	ble.n	2a88e <hal_flash_erase+0x5e>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
   2a8b2:	6823      	ldr	r3, [r4, #0]
   2a8b4:	68df      	ldr	r7, [r3, #12]
   2a8b6:	466b      	mov	r3, sp
   2a8b8:	aa01      	add	r2, sp, #4
   2a8ba:	4629      	mov	r1, r5
   2a8bc:	4620      	mov	r0, r4
   2a8be:	47b8      	blx	r7
            assert(rc == 0);
   2a8c0:	2800      	cmp	r0, #0
   2a8c2:	d1e8      	bne.n	2a896 <hal_flash_erase+0x66>
            end_area = start + size;
   2a8c4:	9901      	ldr	r1, [sp, #4]
   2a8c6:	9b00      	ldr	r3, [sp, #0]
   2a8c8:	440b      	add	r3, r1
            if (address < end_area && end > start) {
   2a8ca:	429e      	cmp	r6, r3
   2a8cc:	d2ed      	bcs.n	2a8aa <hal_flash_erase+0x7a>
   2a8ce:	4588      	cmp	r8, r1
   2a8d0:	d9eb      	bls.n	2a8aa <hal_flash_erase+0x7a>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
   2a8d2:	6823      	ldr	r3, [r4, #0]
   2a8d4:	689b      	ldr	r3, [r3, #8]
   2a8d6:	4620      	mov	r0, r4
   2a8d8:	4798      	blx	r3
   2a8da:	2800      	cmp	r0, #0
   2a8dc:	d0e5      	beq.n	2a8aa <hal_flash_erase+0x7a>
                    return SYS_EIO;
   2a8de:	f06f 0a04 	mvn.w	sl, #4
   2a8e2:	e7d4      	b.n	2a88e <hal_flash_erase+0x5e>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   2a8e4:	4655      	mov	r5, sl
   2a8e6:	e7e1      	b.n	2a8ac <hal_flash_erase+0x7c>
        return SYS_EINVAL;
   2a8e8:	f06f 0a01 	mvn.w	sl, #1
   2a8ec:	e7cf      	b.n	2a88e <hal_flash_erase+0x5e>
        return SYS_EINVAL;
   2a8ee:	f06f 0a01 	mvn.w	sl, #1
   2a8f2:	e7cc      	b.n	2a88e <hal_flash_erase+0x5e>
   2a8f4:	f06f 0a01 	mvn.w	sl, #1
   2a8f8:	e7c9      	b.n	2a88e <hal_flash_erase+0x5e>
        return SYS_EACCES;
   2a8fa:	f06f 0a06 	mvn.w	sl, #6
   2a8fe:	e7c6      	b.n	2a88e <hal_flash_erase+0x5e>
        return SYS_EINVAL;
   2a900:	f06f 0a01 	mvn.w	sl, #1
   2a904:	e7c3      	b.n	2a88e <hal_flash_erase+0x5e>
            return SYS_EIO;
   2a906:	f06f 0a04 	mvn.w	sl, #4
   2a90a:	e7c0      	b.n	2a88e <hal_flash_erase+0x5e>
   2a90c:	10004fb4 	.word	0x10004fb4

0002a910 <hal_flash_is_erased>:

int
hal_flash_is_erased(const struct hal_flash *hf, uint32_t address, void *dst,
        uint32_t num_bytes)
{
   2a910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a914:	4606      	mov	r6, r0
   2a916:	4690      	mov	r8, r2
   2a918:	461f      	mov	r7, r3
    uint8_t *buf;
    int rc;

    buf = dst;

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   2a91a:	6804      	ldr	r4, [r0, #0]
   2a91c:	6824      	ldr	r4, [r4, #0]
   2a91e:	47a0      	blx	r4
    if (rc != 0) {
   2a920:	b960      	cbnz	r0, 2a93c <hal_flash_is_erased+0x2c>
        return SYS_EIO;
    }

    for (i = 0; i < num_bytes; i++) {
   2a922:	2100      	movs	r1, #0
   2a924:	42b9      	cmp	r1, r7
   2a926:	d206      	bcs.n	2a936 <hal_flash_is_erased+0x26>
        if (buf[i] != hf->hf_erased_val) {
   2a928:	f818 5001 	ldrb.w	r5, [r8, r1]
   2a92c:	7d34      	ldrb	r4, [r6, #20]
   2a92e:	42a5      	cmp	r5, r4
   2a930:	d102      	bne.n	2a938 <hal_flash_is_erased+0x28>
    for (i = 0; i < num_bytes; i++) {
   2a932:	3101      	adds	r1, #1
   2a934:	e7f6      	b.n	2a924 <hal_flash_is_erased+0x14>
            return 0;
        }
    }
    return 1;
   2a936:	2001      	movs	r0, #1
}
   2a938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   2a93c:	f06f 0004 	mvn.w	r0, #4
   2a940:	e7fa      	b.n	2a938 <hal_flash_is_erased+0x28>

0002a942 <hal_flash_isempty>:

int
hal_flash_isempty(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   2a942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a946:	460c      	mov	r4, r1
   2a948:	4690      	mov	r8, r2
   2a94a:	461d      	mov	r5, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   2a94c:	f7ff fecc 	bl	2a6e8 <hal_bsp_flash_dev>
    if (!hf) {
   2a950:	b1f8      	cbz	r0, 2a992 <hal_flash_isempty+0x50>
   2a952:	4606      	mov	r6, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   2a954:	4621      	mov	r1, r4
   2a956:	f7ff fed5 	bl	2a704 <hal_flash_check_addr>
   2a95a:	b9e8      	cbnz	r0, 2a998 <hal_flash_isempty+0x56>
      hal_flash_check_addr(hf, address + num_bytes)) {
   2a95c:	1961      	adds	r1, r4, r5
   2a95e:	4630      	mov	r0, r6
   2a960:	f7ff fed0 	bl	2a704 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   2a964:	b9d8      	cbnz	r0, 2a99e <hal_flash_isempty+0x5c>
        return SYS_EINVAL;
    }
    if (hf->hf_itf->hff_is_empty) {
   2a966:	6833      	ldr	r3, [r6, #0]
   2a968:	691f      	ldr	r7, [r3, #16]
   2a96a:	b15f      	cbz	r7, 2a984 <hal_flash_isempty+0x42>
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
   2a96c:	462b      	mov	r3, r5
   2a96e:	4642      	mov	r2, r8
   2a970:	4621      	mov	r1, r4
   2a972:	4630      	mov	r0, r6
   2a974:	47b8      	blx	r7
        if (rc < 0) {
   2a976:	2800      	cmp	r0, #0
   2a978:	db01      	blt.n	2a97e <hal_flash_isempty+0x3c>
            return rc;
        }
    } else {
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    }
}
   2a97a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return SYS_EIO;
   2a97e:	f06f 0004 	mvn.w	r0, #4
   2a982:	e7fa      	b.n	2a97a <hal_flash_isempty+0x38>
        return hal_flash_is_erased(hf, address, dst, num_bytes);
   2a984:	462b      	mov	r3, r5
   2a986:	4642      	mov	r2, r8
   2a988:	4621      	mov	r1, r4
   2a98a:	4630      	mov	r0, r6
   2a98c:	f7ff ffc0 	bl	2a910 <hal_flash_is_erased>
   2a990:	e7f3      	b.n	2a97a <hal_flash_isempty+0x38>
        return SYS_EINVAL;
   2a992:	f06f 0001 	mvn.w	r0, #1
   2a996:	e7f0      	b.n	2a97a <hal_flash_isempty+0x38>
        return SYS_EINVAL;
   2a998:	f06f 0001 	mvn.w	r0, #1
   2a99c:	e7ed      	b.n	2a97a <hal_flash_isempty+0x38>
   2a99e:	f06f 0001 	mvn.w	r0, #1
   2a9a2:	e7ea      	b.n	2a97a <hal_flash_isempty+0x38>

0002a9a4 <hal_flash_isempty_no_buf>:

int
hal_flash_isempty_no_buf(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   2a9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a9a6:	b085      	sub	sp, #20
   2a9a8:	4607      	mov	r7, r0
   2a9aa:	460e      	mov	r6, r1
   2a9ac:	4615      	mov	r5, r2
    uint32_t blksz;
    uint32_t rem;
    uint32_t off;
    int empty;

    for (off = 0; off < num_bytes; off += sizeof buf) {
   2a9ae:	2400      	movs	r4, #0
   2a9b0:	e007      	b.n	2a9c2 <hal_flash_isempty_no_buf+0x1e>
        blksz = sizeof buf;
        if (blksz > rem) {
            blksz = rem;
        }

        empty = hal_flash_isempty(id, address + off, buf, blksz);
   2a9b2:	466a      	mov	r2, sp
   2a9b4:	19a1      	adds	r1, r4, r6
   2a9b6:	4638      	mov	r0, r7
   2a9b8:	f7ff ffc3 	bl	2a942 <hal_flash_isempty>
        if (empty != 1) {
   2a9bc:	2801      	cmp	r0, #1
   2a9be:	d108      	bne.n	2a9d2 <hal_flash_isempty_no_buf+0x2e>
    for (off = 0; off < num_bytes; off += sizeof buf) {
   2a9c0:	3410      	adds	r4, #16
   2a9c2:	42ac      	cmp	r4, r5
   2a9c4:	d204      	bcs.n	2a9d0 <hal_flash_isempty_no_buf+0x2c>
        rem = num_bytes - off;
   2a9c6:	1b2b      	subs	r3, r5, r4
        if (blksz > rem) {
   2a9c8:	2b0f      	cmp	r3, #15
   2a9ca:	d9f2      	bls.n	2a9b2 <hal_flash_isempty_no_buf+0xe>
        blksz = sizeof buf;
   2a9cc:	2310      	movs	r3, #16
   2a9ce:	e7f0      	b.n	2a9b2 <hal_flash_isempty_no_buf+0xe>
            return empty;
        }
    }

    return 1;
   2a9d0:	2001      	movs	r0, #1
}
   2a9d2:	b005      	add	sp, #20
   2a9d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a9d6 <apollo3_periph_create_timers>:
#endif
#endif

static void
apollo3_periph_create_timers(void)
{
   2a9d6:	b500      	push	{lr}
   2a9d8:	b083      	sub	sp, #12

    (void) timer_cfg;
    (void) rc;

#if MYNEWT_VAL(TIMER_0)
    timer_cfg.source = MYNEWT_VAL(TIMER_0_SOURCE);
   2a9da:	2302      	movs	r3, #2
   2a9dc:	f88d 3004 	strb.w	r3, [sp, #4]
    rc = hal_timer_init(0, &timer_cfg);
   2a9e0:	a901      	add	r1, sp, #4
   2a9e2:	2000      	movs	r0, #0
   2a9e4:	f002 f852 	bl	2ca8c <hal_timer_init>
    assert(rc == 0);
   2a9e8:	b938      	cbnz	r0, 2a9fa <apollo3_periph_create_timers+0x24>
    rc = hal_timer_init(1, &timer_cfg);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   2a9ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2a9ee:	f002 fd8f 	bl	2d510 <os_cputime_init>
    assert(rc == 0);
   2a9f2:	b960      	cbnz	r0, 2aa0e <apollo3_periph_create_timers+0x38>
#endif
}
   2a9f4:	b003      	add	sp, #12
   2a9f6:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   2a9fa:	f7e9 fe33 	bl	14664 <hal_debugger_connected>
   2a9fe:	b100      	cbz	r0, 2aa02 <apollo3_periph_create_timers+0x2c>
   2aa00:	be01      	bkpt	0x0001
   2aa02:	2300      	movs	r3, #0
   2aa04:	461a      	mov	r2, r3
   2aa06:	4619      	mov	r1, r3
   2aa08:	4618      	mov	r0, r3
   2aa0a:	f7ea f9cb 	bl	14da4 <__assert_func>
    assert(rc == 0);
   2aa0e:	f7e9 fe29 	bl	14664 <hal_debugger_connected>
   2aa12:	b100      	cbz	r0, 2aa16 <apollo3_periph_create_timers+0x40>
   2aa14:	be01      	bkpt	0x0001
   2aa16:	2300      	movs	r3, #0
   2aa18:	461a      	mov	r2, r3
   2aa1a:	4619      	mov	r1, r3
   2aa1c:	4618      	mov	r0, r3
   2aa1e:	f7ea f9c1 	bl	14da4 <__assert_func>
	...

0002aa24 <apollo3_periph_create_uart>:
#endif
}

static void
apollo3_periph_create_uart(void)
{
   2aa24:	b500      	push	{lr}
   2aa26:	b083      	sub	sp, #12
    int rc;

    (void)rc;

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create(&os_bsp_uart0.ud_dev, "uart0",
   2aa28:	4b16      	ldr	r3, [pc, #88]	; (2aa84 <apollo3_periph_create_uart+0x60>)
   2aa2a:	9301      	str	r3, [sp, #4]
   2aa2c:	4b16      	ldr	r3, [pc, #88]	; (2aa88 <apollo3_periph_create_uart+0x64>)
   2aa2e:	9300      	str	r3, [sp, #0]
   2aa30:	2300      	movs	r3, #0
   2aa32:	2201      	movs	r2, #1
   2aa34:	4915      	ldr	r1, [pc, #84]	; (2aa8c <apollo3_periph_create_uart+0x68>)
   2aa36:	4816      	ldr	r0, [pc, #88]	; (2aa90 <apollo3_periph_create_uart+0x6c>)
   2aa38:	f7ea fc6e 	bl	15318 <os_dev_create>
                       OS_DEV_INIT_PRIMARY, 0, uart_hal_init,
                       (void *)&os_bsp_uart0_cfg);
    assert(rc == 0);
   2aa3c:	b968      	cbnz	r0, 2aa5a <apollo3_periph_create_uart+0x36>
#endif
#if MYNEWT_VAL(UART_1)
    rc = os_dev_create(&os_bsp_uart1.ud_dev, "uart1",
   2aa3e:	4b15      	ldr	r3, [pc, #84]	; (2aa94 <apollo3_periph_create_uart+0x70>)
   2aa40:	9301      	str	r3, [sp, #4]
   2aa42:	4b11      	ldr	r3, [pc, #68]	; (2aa88 <apollo3_periph_create_uart+0x64>)
   2aa44:	9300      	str	r3, [sp, #0]
   2aa46:	2301      	movs	r3, #1
   2aa48:	461a      	mov	r2, r3
   2aa4a:	4913      	ldr	r1, [pc, #76]	; (2aa98 <apollo3_periph_create_uart+0x74>)
   2aa4c:	4813      	ldr	r0, [pc, #76]	; (2aa9c <apollo3_periph_create_uart+0x78>)
   2aa4e:	f7ea fc63 	bl	15318 <os_dev_create>
                       OS_DEV_INIT_PRIMARY, 1, uart_hal_init,
                       (void *)&os_bsp_uart1_cfg);
    assert(rc == 0);
   2aa52:	b960      	cbnz	r0, 2aa6e <apollo3_periph_create_uart+0x4a>
#endif
}
   2aa54:	b003      	add	sp, #12
   2aa56:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   2aa5a:	f7e9 fe03 	bl	14664 <hal_debugger_connected>
   2aa5e:	b100      	cbz	r0, 2aa62 <apollo3_periph_create_uart+0x3e>
   2aa60:	be01      	bkpt	0x0001
   2aa62:	2300      	movs	r3, #0
   2aa64:	461a      	mov	r2, r3
   2aa66:	4619      	mov	r1, r3
   2aa68:	4618      	mov	r0, r3
   2aa6a:	f7ea f99b 	bl	14da4 <__assert_func>
    assert(rc == 0);
   2aa6e:	f7e9 fdf9 	bl	14664 <hal_debugger_connected>
   2aa72:	b100      	cbz	r0, 2aa76 <apollo3_periph_create_uart+0x52>
   2aa74:	be01      	bkpt	0x0001
   2aa76:	2300      	movs	r3, #0
   2aa78:	461a      	mov	r2, r3
   2aa7a:	4619      	mov	r1, r3
   2aa7c:	4618      	mov	r0, r3
   2aa7e:	f7ea f991 	bl	14da4 <__assert_func>
   2aa82:	bf00      	nop
   2aa84:	000317c4 	.word	0x000317c4
   2aa88:	0002f2cd 	.word	0x0002f2cd
   2aa8c:	00030774 	.word	0x00030774
   2aa90:	10004fb8 	.word	0x10004fb8
   2aa94:	000317c8 	.word	0x000317c8
   2aa98:	000317bc 	.word	0x000317bc
   2aa9c:	10004ff4 	.word	0x10004ff4

0002aaa0 <apollo3_periph_create>:
#endif
}

void
apollo3_periph_create(void)
{
   2aaa0:	b508      	push	{r3, lr}
    apollo3_periph_create_timers();
   2aaa2:	f7ff ff98 	bl	2a9d6 <apollo3_periph_create_timers>
    apollo3_periph_create_adc();
    apollo3_periph_create_uart();
   2aaa6:	f7ff ffbd 	bl	2aa24 <apollo3_periph_create_uart>
    apollo3_periph_create_i2c();
    apollo3_periph_create_spi();
}
   2aaaa:	bd08      	pop	{r3, pc}

0002aaac <buffer_compare>:
buffer_compare(void *b1, void *b2, uint32_t len)
{
    uint8_t *p1 = b1;
    uint8_t *p2 = b2;

    for (uint32_t i = 0; i < len; i++)
   2aaac:	2300      	movs	r3, #0
   2aaae:	4293      	cmp	r3, r2
   2aab0:	d20c      	bcs.n	2aacc <buffer_compare+0x20>
{
   2aab2:	b430      	push	{r4, r5}
    {
        if (p1[i] != p2[i])
   2aab4:	5cc5      	ldrb	r5, [r0, r3]
   2aab6:	5ccc      	ldrb	r4, [r1, r3]
   2aab8:	42a5      	cmp	r5, r4
   2aaba:	d105      	bne.n	2aac8 <buffer_compare+0x1c>
    for (uint32_t i = 0; i < len; i++)
   2aabc:	3301      	adds	r3, #1
   2aabe:	4293      	cmp	r3, r2
   2aac0:	d3f8      	bcc.n	2aab4 <buffer_compare+0x8>
        {
            return false;
        }
    }

    return true;
   2aac2:	2001      	movs	r0, #1
}
   2aac4:	bc30      	pop	{r4, r5}
   2aac6:	4770      	bx	lr
            return false;
   2aac8:	2000      	movs	r0, #0
   2aaca:	e7fb      	b.n	2aac4 <buffer_compare+0x18>
    return true;
   2aacc:	2001      	movs	r0, #1
}
   2aace:	4770      	bx	lr

0002aad0 <am_hal_ble_crc_nz>:
// Helper function for CRC caculation of BLE patch.
//
//*****************************************************************************
static uint16_t
am_hal_ble_crc_nz(uint8_t *pui8Data, uint32_t len)
{
   2aad0:	b430      	push	{r4, r5}
   2aad2:	4605      	mov	r5, r0
    uint16_t ui16CurValue = 0;
    uint32_t i;

    for (i = 0; i < len; i++)
   2aad4:	2300      	movs	r3, #0
    uint16_t ui16CurValue = 0;
   2aad6:	4618      	mov	r0, r3
    for (i = 0; i < len; i++)
   2aad8:	428b      	cmp	r3, r1
   2aada:	d20a      	bcs.n	2aaf2 <am_hal_ble_crc_nz+0x22>
    {
        ui16CurValue = ccitt_table[(((uint8_t)(ui16CurValue >> 8)) ^ pui8Data[i]) & 0xFF] ^ (ui16CurValue << 8);
   2aadc:	5cea      	ldrb	r2, [r5, r3]
   2aade:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
   2aae2:	4c05      	ldr	r4, [pc, #20]	; (2aaf8 <am_hal_ble_crc_nz+0x28>)
   2aae4:	f934 2012 	ldrsh.w	r2, [r4, r2, lsl #1]
   2aae8:	ea82 2000 	eor.w	r0, r2, r0, lsl #8
   2aaec:	b280      	uxth	r0, r0
    for (i = 0; i < len; i++)
   2aaee:	3301      	adds	r3, #1
   2aaf0:	e7f2      	b.n	2aad8 <am_hal_ble_crc_nz+0x8>
    }

    return ((ui16CurValue ^ 0) & ((1 << 16) - 1));
}
   2aaf2:	bc30      	pop	{r4, r5}
   2aaf4:	4770      	bx	lr
   2aaf6:	bf00      	nop
   2aaf8:	000317cc 	.word	0x000317cc

0002aafc <am_hal_ble_check_status>:
// Return true if BSTATUS is high.
//
//*****************************************************************************
static bool
am_hal_ble_check_status(am_hal_ble_state_t *pBle)
{
   2aafc:	4603      	mov	r3, r0
    //
    // We need to make a special exception for "continue" packets, since the
    // BLE radio may deassert the STATUS signal mid-packet.
    //
    if (pBle->bContinuePacket)
   2aafe:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
   2ab02:	b928      	cbnz	r0, 2ab10 <am_hal_ble_check_status+0x14>
    {
        pBle->bContinuePacket = false;
        return true;
    }

    if ( BLEIFn(0)->BSTATUS_b.SPISTATUS == 0)
   2ab04:	4b04      	ldr	r3, [pc, #16]	; (2ab18 <am_hal_ble_check_status+0x1c>)
   2ab06:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
   2ab0a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    {
        return false;
    }

    return true;
} // am_hal_ble_check_status()
   2ab0e:	4770      	bx	lr
        pBle->bContinuePacket = false;
   2ab10:	2200      	movs	r2, #0
   2ab12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        return true;
   2ab16:	4770      	bx	lr
   2ab18:	5000c000 	.word	0x5000c000

0002ab1c <am_hal_ble_bus_release>:
//
//*****************************************************************************
static void
am_hal_ble_bus_release(am_hal_ble_state_t *pBle)
{
    pBle->bBusy = false;
   2ab1c:	2300      	movs	r3, #0
   2ab1e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_11);
}
   2ab22:	4770      	bx	lr

0002ab24 <am_hal_ble_cmd_write>:
    uint32_t ui32Module;

    //
    // Check the handle.
    //
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2ab24:	2800      	cmp	r0, #0
   2ab26:	d035      	beq.n	2ab94 <am_hal_ble_cmd_write+0x70>
   2ab28:	6803      	ldr	r3, [r0, #0]
   2ab2a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2ab2e:	4a1c      	ldr	r2, [pc, #112]	; (2aba0 <am_hal_ble_cmd_write+0x7c>)
   2ab30:	4293      	cmp	r3, r2
   2ab32:	d131      	bne.n	2ab98 <am_hal_ble_cmd_write+0x74>
{
   2ab34:	b430      	push	{r4, r5}
    ui32Module = ((am_hal_ble_state_t *) pHandle)->ui32Module;

    //
    // Figure out the command word and the offset register. Then write them.
    //
    switch (psTransfer->ui8OffsetLen)
   2ab36:	79cb      	ldrb	r3, [r1, #7]
   2ab38:	2b03      	cmp	r3, #3
   2ab3a:	d82f      	bhi.n	2ab9c <am_hal_ble_cmd_write+0x78>
   2ab3c:	e8df f003 	tbb	[pc, r3]
   2ab40:	0a060211 	.word	0x0a060211
            ui32CmdWord = 0;
            ui32OffsetHigh = 0;
            break;

        case 1:
            ui32CmdWord = _VAL2FLD(BLEIF_CMD_OFFSETLO, psTransfer->pui8Offset[0]);
   2ab44:	790c      	ldrb	r4, [r1, #4]
   2ab46:	0624      	lsls	r4, r4, #24
            ui32OffsetHigh = 0;
   2ab48:	2000      	movs	r0, #0
            break;
   2ab4a:	e00c      	b.n	2ab66 <am_hal_ble_cmd_write+0x42>

        case 2:
            ui32CmdWord = _VAL2FLD(BLEIF_CMD_OFFSETLO, psTransfer->pui8Offset[1]);
   2ab4c:	794c      	ldrb	r4, [r1, #5]
   2ab4e:	0624      	lsls	r4, r4, #24
            ui32OffsetHigh = psTransfer->pui8Offset[0];
   2ab50:	7908      	ldrb	r0, [r1, #4]
            break;
   2ab52:	e008      	b.n	2ab66 <am_hal_ble_cmd_write+0x42>

        case 3:
            ui32CmdWord = _VAL2FLD(BLEIF_CMD_OFFSETLO, psTransfer->pui8Offset[2]);
   2ab54:	798c      	ldrb	r4, [r1, #6]
   2ab56:	0624      	lsls	r4, r4, #24
            ui32OffsetHigh = ((psTransfer->pui8Offset[1]) |
   2ab58:	7948      	ldrb	r0, [r1, #5]
                              (psTransfer->pui8Offset[0] << 8));
   2ab5a:	790a      	ldrb	r2, [r1, #4]
            ui32OffsetHigh = ((psTransfer->pui8Offset[1]) |
   2ab5c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
            break;
   2ab60:	e001      	b.n	2ab66 <am_hal_ble_cmd_write+0x42>
    switch (psTransfer->ui8OffsetLen)
   2ab62:	2000      	movs	r0, #0
   2ab64:	4604      	mov	r4, r0
        default:
            // Offset length was incorrect.
            return AM_HAL_STATUS_INVALID_ARG;
    }

    ui32CmdWord |= (_VAL2FLD(BLEIF_CMD_OFFSETCNT, psTransfer->ui8OffsetLen) |
   2ab66:	015b      	lsls	r3, r3, #5
   2ab68:	f003 0360 	and.w	r3, r3, #96	; 0x60
                    _VAL2FLD(BLEIF_CMD_TSIZE, psTransfer->ui16Length)       |
   2ab6c:	890d      	ldrh	r5, [r1, #8]
   2ab6e:	4a0d      	ldr	r2, [pc, #52]	; (2aba4 <am_hal_ble_cmd_write+0x80>)
   2ab70:	ea02 2205 	and.w	r2, r2, r5, lsl #8
    ui32CmdWord |= (_VAL2FLD(BLEIF_CMD_OFFSETCNT, psTransfer->ui8OffsetLen) |
   2ab74:	4313      	orrs	r3, r2
                    _VAL2FLD(BLEIF_CMD_CONT, psTransfer->bContinue)         |
   2ab76:	7b0a      	ldrb	r2, [r1, #12]
   2ab78:	01d2      	lsls	r2, r2, #7
   2ab7a:	b2d2      	uxtb	r2, r2
                    _VAL2FLD(BLEIF_CMD_TSIZE, psTransfer->ui16Length)       |
   2ab7c:	4313      	orrs	r3, r2
                    psTransfer->ui8Command);
   2ab7e:	7a8a      	ldrb	r2, [r1, #10]
                    _VAL2FLD(BLEIF_CMD_CONT, psTransfer->bContinue)         |
   2ab80:	4313      	orrs	r3, r2
    ui32CmdWord |= (_VAL2FLD(BLEIF_CMD_OFFSETCNT, psTransfer->ui8OffsetLen) |
   2ab82:	4323      	orrs	r3, r4

    BLEIFn(ui32Module)->OFFSETHI = ui32OffsetHigh;
   2ab84:	4a08      	ldr	r2, [pc, #32]	; (2aba8 <am_hal_ble_cmd_write+0x84>)
   2ab86:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
    BLEIFn(ui32Module)->CMD = ui32CmdWord;
   2ab8a:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   2ab8e:	2000      	movs	r0, #0
} // am_hal_ble_cmd_write()
   2ab90:	bc30      	pop	{r4, r5}
   2ab92:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2ab94:	2002      	movs	r0, #2
   2ab96:	4770      	bx	lr
   2ab98:	2002      	movs	r0, #2
} // am_hal_ble_cmd_write()
   2ab9a:	4770      	bx	lr
    switch (psTransfer->ui8OffsetLen)
   2ab9c:	2006      	movs	r0, #6
   2ab9e:	e7f7      	b.n	2ab90 <am_hal_ble_cmd_write+0x6c>
   2aba0:	01775230 	.word	0x01775230
   2aba4:	000fff00 	.word	0x000fff00
   2aba8:	5000c000 	.word	0x5000c000

0002abac <am_hal_ble_fifo_read>:
am_hal_ble_fifo_read(void *pHandle, uint32_t *pui32Data, uint32_t ui32NumBytes)
{
    uint32_t ui32Index;
    uint32_t ui32Module = ((am_hal_ble_state_t *) pHandle)->ui32Module;

    for (ui32Index = 0; (ui32Index * 4) < ui32NumBytes; ui32Index++)
   2abac:	2300      	movs	r3, #0
   2abae:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   2abb2:	d90e      	bls.n	2abd2 <am_hal_ble_fifo_read+0x26>
{
   2abb4:	b410      	push	{r4}
    {
        pui32Data[ui32Index] = BLEIFn(ui32Module)->FIFOPOP;
   2abb6:	4807      	ldr	r0, [pc, #28]	; (2abd4 <am_hal_ble_fifo_read+0x28>)
   2abb8:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   2abbc:	f841 4023 	str.w	r4, [r1, r3, lsl #2]

#ifndef AM_HAL_BLE_NO_FIFO_PROTECTION
        BLEIFn(ui32Module)->FIFOPOP = 0;
   2abc0:	2400      	movs	r4, #0
   2abc2:	f8c0 4108 	str.w	r4, [r0, #264]	; 0x108
    for (ui32Index = 0; (ui32Index * 4) < ui32NumBytes; ui32Index++)
   2abc6:	3301      	adds	r3, #1
   2abc8:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   2abcc:	d8f3      	bhi.n	2abb6 <am_hal_ble_fifo_read+0xa>
#endif

    }
} // am_hal_ble_fifo_read()
   2abce:	bc10      	pop	{r4}
   2abd0:	4770      	bx	lr
   2abd2:	4770      	bx	lr
   2abd4:	5000c000 	.word	0x5000c000

0002abd8 <am_hal_ble_fifo_drain>:
{
   2abd8:	b538      	push	{r3, r4, r5, lr}
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2abda:	b308      	cbz	r0, 2ac20 <am_hal_ble_fifo_drain+0x48>
   2abdc:	4604      	mov	r4, r0
   2abde:	6803      	ldr	r3, [r0, #0]
   2abe0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2abe4:	4a12      	ldr	r2, [pc, #72]	; (2ac30 <am_hal_ble_fifo_drain+0x58>)
   2abe6:	4293      	cmp	r3, r2
   2abe8:	d11c      	bne.n	2ac24 <am_hal_ble_fifo_drain+0x4c>
    ui32RxDataLen = BLEIFn(ui32Module)->FIFOPTR_b.FIFO1SIZ;
   2abea:	4b12      	ldr	r3, [pc, #72]	; (2ac34 <am_hal_ble_fifo_drain+0x5c>)
   2abec:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   2abf0:	f3c3 4307 	ubfx	r3, r3, #16, #8
    ui32BytesLeft = (pTransfer->ui16Length - pBle->ui32TransferIndex);
   2abf4:	8a81      	ldrh	r1, [r0, #20]
   2abf6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   2abf8:	1a8d      	subs	r5, r1, r2
    if (ui32RxDataLen < 4)
   2abfa:	2b03      	cmp	r3, #3
   2abfc:	d915      	bls.n	2ac2a <am_hal_ble_fifo_drain+0x52>
    else if (ui32RxDataLen >= pTransfer->ui16Length)
   2abfe:	b298      	uxth	r0, r3
   2ac00:	4281      	cmp	r1, r0
   2ac02:	d901      	bls.n	2ac08 <am_hal_ble_fifo_drain+0x30>
        ui32ReadSize = ui32RxDataLen & (~0x3);
   2ac04:	f023 0503 	bic.w	r5, r3, #3
    pDest = &pTransfer->pui32Data[pBle->ui32TransferIndex / 4];
   2ac08:	68e3      	ldr	r3, [r4, #12]
   2ac0a:	f022 0103 	bic.w	r1, r2, #3
    am_hal_ble_fifo_read(pHandle, pDest, ui32ReadSize);
   2ac0e:	462a      	mov	r2, r5
   2ac10:	4419      	add	r1, r3
   2ac12:	4620      	mov	r0, r4
   2ac14:	f7ff ffca 	bl	2abac <am_hal_ble_fifo_read>
    pBle->ui32TransferIndex += ui32ReadSize;
   2ac18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2ac1a:	442b      	add	r3, r5
   2ac1c:	63e3      	str	r3, [r4, #60]	; 0x3c
    return ui32ReadSize;
   2ac1e:	e002      	b.n	2ac26 <am_hal_ble_fifo_drain+0x4e>
        return 0;
   2ac20:	2500      	movs	r5, #0
   2ac22:	e000      	b.n	2ac26 <am_hal_ble_fifo_drain+0x4e>
   2ac24:	2500      	movs	r5, #0
} // am_hal_ble_fifo_drain()
   2ac26:	4628      	mov	r0, r5
   2ac28:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
   2ac2a:	2500      	movs	r5, #0
   2ac2c:	e7fb      	b.n	2ac26 <am_hal_ble_fifo_drain+0x4e>
   2ac2e:	bf00      	nop
   2ac30:	01775230 	.word	0x01775230
   2ac34:	5000c000 	.word	0x5000c000

0002ac38 <am_hal_ble_read_trimdata_from_info1>:
am_hal_ble_read_trimdata_from_info1(void)
{
    uint32_t ui32TrimValue = 0, temp = 0;
    uint8_t TrimData = 0;

    temp = ui32TrimValue = AM_REGVAL(0x50023808);
   2ac38:	4b08      	ldr	r3, [pc, #32]	; (2ac5c <am_hal_ble_read_trimdata_from_info1+0x24>)
   2ac3a:	6818      	ldr	r0, [r3, #0]
    temp &= 0xffffff00;
   2ac3c:	f020 02ff 	bic.w	r2, r0, #255	; 0xff

    if ( temp == 0x18240600 )
   2ac40:	4b07      	ldr	r3, [pc, #28]	; (2ac60 <am_hal_ble_read_trimdata_from_info1+0x28>)
   2ac42:	429a      	cmp	r2, r3
   2ac44:	d007      	beq.n	2ac56 <am_hal_ble_read_trimdata_from_info1+0x1e>
    {
        TrimData = ui32TrimValue & 0xFF;
    }
    else
    {
        TrimData = 0;
   2ac46:	2000      	movs	r0, #0
    }

    if ( (TrimData > 0x50) || (TrimData < 0x20) )   // change from 0x40 to 0x50 for improving the FT2 yield.
   2ac48:	f1a0 0320 	sub.w	r3, r0, #32
   2ac4c:	b2db      	uxtb	r3, r3
   2ac4e:	2b30      	cmp	r3, #48	; 0x30
   2ac50:	d900      	bls.n	2ac54 <am_hal_ble_read_trimdata_from_info1+0x1c>
    {
        TrimData = 0;
   2ac52:	2000      	movs	r0, #0
    }

    return TrimData;
} // am_hal_ble_read_trimdata_from_info1()
   2ac54:	4770      	bx	lr
        TrimData = ui32TrimValue & 0xFF;
   2ac56:	b2c0      	uxtb	r0, r0
   2ac58:	e7f6      	b.n	2ac48 <am_hal_ble_read_trimdata_from_info1+0x10>
   2ac5a:	bf00      	nop
   2ac5c:	50023808 	.word	0x50023808
   2ac60:	18240600 	.word	0x18240600

0002ac64 <am_hal_ble_bus_lock>:
{
   2ac64:	b510      	push	{r4, lr}
   2ac66:	b082      	sub	sp, #8
   2ac68:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN;
   2ac6a:	f001 fa67 	bl	2c13c <am_hal_interrupt_master_disable>
   2ac6e:	9001      	str	r0, [sp, #4]
    if (pBle->bBusy == false)
   2ac70:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   2ac74:	b983      	cbnz	r3, 2ac98 <am_hal_ble_bus_lock+0x34>
        pBle->bBusy = true;
   2ac76:	2301      	movs	r3, #1
   2ac78:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        pBle->bCmdComplete = 0;
   2ac7c:	2200      	movs	r2, #0
   2ac7e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
        pBle->bDmaComplete = 0;
   2ac82:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
        pBle->bFlowControlComplete = 0;
   2ac86:	f884 2047 	strb.w	r2, [r4, #71]	; 0x47
        bLockObtained = true;
   2ac8a:	461c      	mov	r4, r3
    AM_CRITICAL_END;
   2ac8c:	9801      	ldr	r0, [sp, #4]
   2ac8e:	f001 fa59 	bl	2c144 <am_hal_interrupt_master_set>
} // am_hal_ble_bus_lock()
   2ac92:	4620      	mov	r0, r4
   2ac94:	b002      	add	sp, #8
   2ac96:	bd10      	pop	{r4, pc}
        bLockObtained = false;
   2ac98:	2400      	movs	r4, #0
   2ac9a:	e7f7      	b.n	2ac8c <am_hal_ble_bus_lock+0x28>

0002ac9c <am_hal_ble_wakeup_set>:
    if ( !AM_HAL_BLE_CHK_HANDLE(pHandle) )
   2ac9c:	b1c8      	cbz	r0, 2acd2 <am_hal_ble_wakeup_set+0x36>
   2ac9e:	6803      	ldr	r3, [r0, #0]
   2aca0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2aca4:	4a0d      	ldr	r2, [pc, #52]	; (2acdc <am_hal_ble_wakeup_set+0x40>)
   2aca6:	4293      	cmp	r3, r2
   2aca8:	d115      	bne.n	2acd6 <am_hal_ble_wakeup_set+0x3a>
    if ( ui32Mode )
   2acaa:	b141      	cbz	r1, 2acbe <am_hal_ble_wakeup_set+0x22>
        BLEIFn(pBle->ui32Module)->BLECFG_b.WAKEUPCTL = BLEIF_BLECFG_WAKEUPCTL_ON;
   2acac:	4a0c      	ldr	r2, [pc, #48]	; (2ace0 <am_hal_ble_wakeup_set+0x44>)
   2acae:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   2acb2:	f043 030c 	orr.w	r3, r3, #12
   2acb6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    return AM_HAL_STATUS_SUCCESS;
   2acba:	2000      	movs	r0, #0
   2acbc:	4770      	bx	lr
        BLEIFn(pBle->ui32Module)->BLECFG_b.WAKEUPCTL = BLEIF_BLECFG_WAKEUPCTL_OFF;
   2acbe:	4b08      	ldr	r3, [pc, #32]	; (2ace0 <am_hal_ble_wakeup_set+0x44>)
   2acc0:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
   2acc4:	2002      	movs	r0, #2
   2acc6:	f360 0283 	bfi	r2, r0, #2, #2
   2acca:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return AM_HAL_STATUS_SUCCESS;
   2acce:	4608      	mov	r0, r1
   2acd0:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2acd2:	2002      	movs	r0, #2
   2acd4:	4770      	bx	lr
   2acd6:	2002      	movs	r0, #2
}
   2acd8:	4770      	bx	lr
   2acda:	bf00      	nop
   2acdc:	01775230 	.word	0x01775230
   2ace0:	5000c000 	.word	0x5000c000

0002ace4 <am_hal_ble_initialize>:
    if (ui32Module >= AM_REG_BLEIF_NUM_MODULES)
   2ace4:	2800      	cmp	r0, #0
   2ace6:	d147      	bne.n	2ad78 <am_hal_ble_initialize+0x94>
   2ace8:	4602      	mov	r2, r0
    if (!ppHandle)
   2acea:	2900      	cmp	r1, #0
   2acec:	d046      	beq.n	2ad7c <am_hal_ble_initialize+0x98>
    if (g_sBLEState[ui32Module].prefix.s.bInit)
   2acee:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
   2acf2:	4824      	ldr	r0, [pc, #144]	; (2ad84 <am_hal_ble_initialize+0xa0>)
   2acf4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   2acf8:	78db      	ldrb	r3, [r3, #3]
   2acfa:	f013 0f01 	tst.w	r3, #1
   2acfe:	d13f      	bne.n	2ad80 <am_hal_ble_initialize+0x9c>
{
   2ad00:	b4f0      	push	{r4, r5, r6, r7}
    memset(&g_sBLEState[ui32Module].sCurrentTransfer, 0, sizeof(am_hal_ble_transfer_t));
   2ad02:	4604      	mov	r4, r0
   2ad04:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   2ad08:	00c0      	lsls	r0, r0, #3
   2ad0a:	3008      	adds	r0, #8
   2ad0c:	4420      	add	r0, r4
   2ad0e:	2300      	movs	r3, #0
   2ad10:	6043      	str	r3, [r0, #4]
   2ad12:	6083      	str	r3, [r0, #8]
   2ad14:	60c3      	str	r3, [r0, #12]
   2ad16:	6103      	str	r3, [r0, #16]
   2ad18:	6143      	str	r3, [r0, #20]
   2ad1a:	6183      	str	r3, [r0, #24]
    memset(&g_sBLEState[ui32Module].sSavedTransfer, 0, sizeof(am_hal_ble_transfer_t));
   2ad1c:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   2ad20:	00c0      	lsls	r0, r0, #3
   2ad22:	3020      	adds	r0, #32
   2ad24:	4420      	add	r0, r4
   2ad26:	6043      	str	r3, [r0, #4]
   2ad28:	6083      	str	r3, [r0, #8]
   2ad2a:	60c3      	str	r3, [r0, #12]
   2ad2c:	6103      	str	r3, [r0, #16]
   2ad2e:	6143      	str	r3, [r0, #20]
   2ad30:	6183      	str	r3, [r0, #24]
    g_sBLEState[ui32Module].prefix.s.bInit = true;
   2ad32:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   2ad36:	00c6      	lsls	r6, r0, #3
   2ad38:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   2ad3c:	78c5      	ldrb	r5, [r0, #3]
   2ad3e:	f045 0501 	orr.w	r5, r5, #1
   2ad42:	70c5      	strb	r5, [r0, #3]
    g_sBLEState[ui32Module].prefix.s.magic = AM_HAL_MAGIC_BLE;
   2ad44:	59a5      	ldr	r5, [r4, r6]
   2ad46:	4f10      	ldr	r7, [pc, #64]	; (2ad88 <am_hal_ble_initialize+0xa4>)
   2ad48:	f367 0517 	bfi	r5, r7, #0, #24
   2ad4c:	51a5      	str	r5, [r4, r6]
    g_sBLEState[ui32Module].ui32Module = ui32Module;
   2ad4e:	6042      	str	r2, [r0, #4]
    g_sBLEState[ui32Module].ui32TransferIndex = 0;
   2ad50:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_sBLEState[ui32Module].bPatchComplete = 0;
   2ad52:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    g_sBLEState[ui32Module].bContinuePacket = 0;
   2ad56:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    g_sBLEState[ui32Module].bSavedPacket = 0;
   2ad5a:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
    g_sBLEState[ui32Module].bBusy = 0;
   2ad5e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    g_sBLEState[ui32Module].bCmdComplete = 0;
   2ad62:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    g_sBLEState[ui32Module].bDmaComplete = 0;
   2ad66:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
    g_sBLEState[ui32Module].bFlowControlComplete = 0;
   2ad6a:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
    g_sBLEState[ui32Module].bUseDefaultPatches = false;
   2ad6e:	7203      	strb	r3, [r0, #8]
    *ppHandle = &g_sBLEState[ui32Module];
   2ad70:	6008      	str	r0, [r1, #0]
    return AM_HAL_STATUS_SUCCESS;
   2ad72:	4610      	mov	r0, r2
} // am_hal_ble_initialize()
   2ad74:	bcf0      	pop	{r4, r5, r6, r7}
   2ad76:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   2ad78:	2005      	movs	r0, #5
   2ad7a:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   2ad7c:	2006      	movs	r0, #6
   2ad7e:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   2ad80:	2007      	movs	r0, #7
} // am_hal_ble_initialize()
   2ad82:	4770      	bx	lr
   2ad84:	100050b4 	.word	0x100050b4
   2ad88:	00775230 	.word	0x00775230

0002ad8c <am_hal_ble_deinitialize>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2ad8c:	4603      	mov	r3, r0
   2ad8e:	b338      	cbz	r0, 2ade0 <am_hal_ble_deinitialize+0x54>
   2ad90:	6802      	ldr	r2, [r0, #0]
   2ad92:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   2ad96:	4913      	ldr	r1, [pc, #76]	; (2ade4 <am_hal_ble_deinitialize+0x58>)
   2ad98:	428a      	cmp	r2, r1
   2ad9a:	d001      	beq.n	2ada0 <am_hal_ble_deinitialize+0x14>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2ad9c:	2002      	movs	r0, #2
} // am_hal_ble_deinitialize()
   2ad9e:	4770      	bx	lr
    memset(&(pBLE->sCurrentTransfer), 0, sizeof(am_hal_ble_transfer_t));
   2ada0:	2000      	movs	r0, #0
   2ada2:	60d8      	str	r0, [r3, #12]
   2ada4:	6118      	str	r0, [r3, #16]
   2ada6:	6158      	str	r0, [r3, #20]
   2ada8:	6198      	str	r0, [r3, #24]
   2adaa:	61d8      	str	r0, [r3, #28]
   2adac:	6218      	str	r0, [r3, #32]
    pBLE->prefix.s.bInit = false;
   2adae:	78da      	ldrb	r2, [r3, #3]
   2adb0:	f360 0200 	bfi	r2, r0, #0, #1
   2adb4:	70da      	strb	r2, [r3, #3]
    pBLE->prefix.s.magic = 0;
   2adb6:	681a      	ldr	r2, [r3, #0]
   2adb8:	f360 0217 	bfi	r2, r0, #0, #24
   2adbc:	601a      	str	r2, [r3, #0]
    pBLE->ui32Module = 0;
   2adbe:	6058      	str	r0, [r3, #4]
    pBLE->ui32TransferIndex = 0;
   2adc0:	63d8      	str	r0, [r3, #60]	; 0x3c
    pBLE->bPatchComplete = 0;
   2adc2:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    pBLE->bContinuePacket = 0;
   2adc6:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    pBLE->bSavedPacket = 0;
   2adca:	f883 0043 	strb.w	r0, [r3, #67]	; 0x43
    pBLE->bBusy = 0;
   2adce:	f883 0044 	strb.w	r0, [r3, #68]	; 0x44
    pBLE->bCmdComplete = 0;
   2add2:	f883 0045 	strb.w	r0, [r3, #69]	; 0x45
    pBLE->bDmaComplete = 0;
   2add6:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
    pBLE->bFlowControlComplete = 0;
   2adda:	f883 0047 	strb.w	r0, [r3, #71]	; 0x47
    return AM_HAL_STATUS_SUCCESS;
   2adde:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2ade0:	2002      	movs	r0, #2
   2ade2:	4770      	bx	lr
   2ade4:	01775230 	.word	0x01775230

0002ade8 <am_hal_ble_config>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2ade8:	2800      	cmp	r0, #0
   2adea:	d06f      	beq.n	2aecc <am_hal_ble_config+0xe4>
{
   2adec:	b570      	push	{r4, r5, r6, lr}
   2adee:	460c      	mov	r4, r1
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2adf0:	6803      	ldr	r3, [r0, #0]
   2adf2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2adf6:	4937      	ldr	r1, [pc, #220]	; (2aed4 <am_hal_ble_config+0xec>)
   2adf8:	428b      	cmp	r3, r1
   2adfa:	d169      	bne.n	2aed0 <am_hal_ble_config+0xe8>
    ui32Module = ((am_hal_ble_state_t *) pHandle)->ui32Module;
   2adfc:	6845      	ldr	r5, [r0, #4]
    BLEIFn(ui32Module)->MSPICFG = 0x3;
   2adfe:	4b36      	ldr	r3, [pc, #216]	; (2aed8 <am_hal_ble_config+0xf0>)
   2ae00:	2203      	movs	r2, #3
   2ae02:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    BLEIFn(ui32Module)->MSPICFG_b.RDFC = 0;
   2ae06:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   2ae0a:	f36f 4251 	bfc	r2, #17, #1
   2ae0e:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    BLEIFn(ui32Module)->MSPICFG_b.WTFC = 0;
   2ae12:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   2ae16:	f36f 4210 	bfc	r2, #16, #1
   2ae1a:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    BLEIFn(ui32Module)->MSPICFG_b.WTFCPOL = 1;
   2ae1e:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   2ae22:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   2ae26:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    BLEIFn(ui32Module)->FIFOTHR_b.FIFOWTHR = psConfig->ui32WriteThreshold;
   2ae2a:	68a1      	ldr	r1, [r4, #8]
   2ae2c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   2ae30:	f361 220d 	bfi	r2, r1, #8, #6
   2ae34:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    BLEIFn(ui32Module)->FIFOTHR_b.FIFORTHR = psConfig->ui32ReadThreshold;
   2ae38:	6861      	ldr	r1, [r4, #4]
   2ae3a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   2ae3e:	f361 0205 	bfi	r2, r1, #0, #6
   2ae42:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    BLEIFn(ui32Module)->FIFOCTRL |= BLEIF_FIFOCTRL_POPWR_Msk;
   2ae46:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   2ae4a:	f042 0201 	orr.w	r2, r2, #1
   2ae4e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    ui32BleClkConfig =  _VAL2FLD(BLEIF_CLKCFG_FSEL, psConfig->ui32SpiClkCfg);
   2ae52:	6823      	ldr	r3, [r4, #0]
   2ae54:	021b      	lsls	r3, r3, #8
   2ae56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    ui32BleClkConfig |= _VAL2FLD(BLEIF_CLKCFG_IOCLKEN, 1);
   2ae5a:	f043 0201 	orr.w	r2, r3, #1
    if (psConfig->ui32BleClockConfig == AM_HAL_BLE_CORE_MCU_CLK)
   2ae5e:	68e1      	ldr	r1, [r4, #12]
   2ae60:	2902      	cmp	r1, #2
   2ae62:	d010      	beq.n	2ae86 <am_hal_ble_config+0x9e>
    BLEIFn(ui32Module)->CLKCFG = ui32BleClkConfig;
   2ae64:	4b1c      	ldr	r3, [pc, #112]	; (2aed8 <am_hal_ble_config+0xf0>)
   2ae66:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    if (APOLLO3_A1)
   2ae6a:	4b1c      	ldr	r3, [pc, #112]	; (2aedc <am_hal_ble_config+0xf4>)
   2ae6c:	68db      	ldr	r3, [r3, #12]
   2ae6e:	b2db      	uxtb	r3, r3
   2ae70:	2b12      	cmp	r3, #18
   2ae72:	d00d      	beq.n	2ae90 <am_hal_ble_config+0xa8>
    g_sBLEState[ui32Module].bUseDefaultPatches = psConfig->bUseDefaultPatches;
   2ae74:	7ea2      	ldrb	r2, [r4, #26]
   2ae76:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   2ae7a:	4b19      	ldr	r3, [pc, #100]	; (2aee0 <am_hal_ble_config+0xf8>)
   2ae7c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2ae80:	722a      	strb	r2, [r5, #8]
    return AM_HAL_STATUS_SUCCESS;
   2ae82:	2000      	movs	r0, #0
} // am_hal_ble_config()
   2ae84:	bd70      	pop	{r4, r5, r6, pc}
        ui32BleClkConfig |= _VAL2FLD(BLEIF_CLKCFG_CLK32KEN, 1);
   2ae86:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
   2ae8a:	f042 0201 	orr.w	r2, r2, #1
   2ae8e:	e7e9      	b.n	2ae64 <am_hal_ble_config+0x7c>
        uint8_t *pui8NVDSData = (uint8_t *) am_ble_nvds_patch.pui32Data;
   2ae90:	4e14      	ldr	r6, [pc, #80]	; (2aee4 <am_hal_ble_config+0xfc>)
   2ae92:	68f0      	ldr	r0, [r6, #12]
            (psConfig->ui32BleClockConfig & 0xFF);
   2ae94:	68e3      	ldr	r3, [r4, #12]
        pui8NVDSData[AM_HAL_BLE_NVDS_CLOCKSOURCE_OFFSET + 3] =
   2ae96:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
            (psConfig->ui32ClockDrift & 0x00FF);
   2ae9a:	6923      	ldr	r3, [r4, #16]
        pui8NVDSData[AM_HAL_BLE_NVDS_CLOCKDRIFT_OFFSET + 3] =
   2ae9c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
            (psConfig->ui32ClockDrift & 0xFF00) >> 8;
   2aea0:	6923      	ldr	r3, [r4, #16]
   2aea2:	0a1b      	lsrs	r3, r3, #8
        pui8NVDSData[AM_HAL_BLE_NVDS_CLOCKDRIFT_OFFSET + 4] =
   2aea4:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
            (psConfig->ui32SleepClockDrift & 0x00FF);
   2aea8:	6963      	ldr	r3, [r4, #20]
        pui8NVDSData[AM_HAL_BLE_NVDS_SLEEPCLOCKDRIFT_OFFSET + 3] =
   2aeaa:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
            (psConfig->ui32SleepClockDrift & 0xFF00) >> 8;
   2aeae:	6963      	ldr	r3, [r4, #20]
   2aeb0:	0a1b      	lsrs	r3, r3, #8
        pui8NVDSData[AM_HAL_BLE_NVDS_SLEEPCLOCKDRIFT_OFFSET + 4] =
   2aeb2:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
        pui8NVDSData[AM_HAL_BLE_NVDS_SLEEPENABLE_OFFSET + 3] = (psConfig->bSleepEnabled == true) ? 1 : 0;
   2aeb6:	7e63      	ldrb	r3, [r4, #25]
   2aeb8:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
        pui8NVDSData[AM_HAL_BLE_NVDS_AGC_OFFSET + 3] = (psConfig->bAgcEnabled == true) ? 1 : 0;
   2aebc:	7e23      	ldrb	r3, [r4, #24]
   2aebe:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
        am_ble_nvds_patch.ui32CRC = am_hal_ble_crc_nz(pui8NVDSData,
   2aec2:	6871      	ldr	r1, [r6, #4]
   2aec4:	f7ff fe04 	bl	2aad0 <am_hal_ble_crc_nz>
   2aec8:	60b0      	str	r0, [r6, #8]
   2aeca:	e7d3      	b.n	2ae74 <am_hal_ble_config+0x8c>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2aecc:	2002      	movs	r0, #2
} // am_hal_ble_config()
   2aece:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2aed0:	2002      	movs	r0, #2
   2aed2:	e7d7      	b.n	2ae84 <am_hal_ble_config+0x9c>
   2aed4:	01775230 	.word	0x01775230
   2aed8:	5000c000 	.word	0x5000c000
   2aedc:	40020000 	.word	0x40020000
   2aee0:	100050b4 	.word	0x100050b4
   2aee4:	10000578 	.word	0x10000578

0002aee8 <am_hal_ble_power_control>:
{
   2aee8:	b538      	push	{r3, r4, r5, lr}
    if ( !AM_HAL_BLE_CHK_HANDLE(pHandle) )
   2aeea:	2800      	cmp	r0, #0
   2aeec:	f000 808f 	beq.w	2b00e <am_hal_ble_power_control+0x126>
   2aef0:	460c      	mov	r4, r1
   2aef2:	6803      	ldr	r3, [r0, #0]
   2aef4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2aef8:	4a4c      	ldr	r2, [pc, #304]	; (2b02c <am_hal_ble_power_control+0x144>)
   2aefa:	4293      	cmp	r3, r2
   2aefc:	f040 8089 	bne.w	2b012 <am_hal_ble_power_control+0x12a>
    if (ui32PowerState == AM_HAL_BLE_POWER_ACTIVE)
   2af00:	2900      	cmp	r1, #0
   2af02:	d155      	bne.n	2afb0 <am_hal_ble_power_control+0xc8>
        if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
   2af04:	4b4a      	ldr	r3, [pc, #296]	; (2b030 <am_hal_ble_power_control+0x148>)
   2af06:	699b      	ldr	r3, [r3, #24]
   2af08:	f413 7f80 	tst.w	r3, #256	; 0x100
   2af0c:	f040 8082 	bne.w	2b014 <am_hal_ble_power_control+0x12c>
            MCUCTRL->FEATUREENABLE |= 1;
   2af10:	4a48      	ldr	r2, [pc, #288]	; (2b034 <am_hal_ble_power_control+0x14c>)
   2af12:	6993      	ldr	r3, [r2, #24]
   2af14:	f043 0301 	orr.w	r3, r3, #1
   2af18:	6193      	str	r3, [r2, #24]
            WHILE_TIMEOUT_MS ( ((MCUCTRL->FEATUREENABLE & 0x7) != 0x7), 100,
   2af1a:	4b46      	ldr	r3, [pc, #280]	; (2b034 <am_hal_ble_power_control+0x14c>)
   2af1c:	699b      	ldr	r3, [r3, #24]
   2af1e:	f003 0307 	and.w	r3, r3, #7
   2af22:	2b07      	cmp	r3, #7
   2af24:	d007      	beq.n	2af36 <am_hal_ble_power_control+0x4e>
   2af26:	4b44      	ldr	r3, [pc, #272]	; (2b038 <am_hal_ble_power_control+0x150>)
   2af28:	429c      	cmp	r4, r3
   2af2a:	d875      	bhi.n	2b018 <am_hal_ble_power_control+0x130>
   2af2c:	2010      	movs	r0, #16
   2af2e:	f001 f8c3 	bl	2c0b8 <am_hal_flash_delay>
   2af32:	3401      	adds	r4, #1
   2af34:	e7f1      	b.n	2af1a <am_hal_ble_power_control+0x32>
            if (am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_PERIPH_BLEL) !=
   2af36:	200e      	movs	r0, #14
   2af38:	f001 fa48 	bl	2c3cc <am_hal_pwrctrl_periph_enable>
   2af3c:	4604      	mov	r4, r0
   2af3e:	2800      	cmp	r0, #0
   2af40:	d16c      	bne.n	2b01c <am_hal_ble_power_control+0x134>
            BLEIFn(ui32Module)->CLKCFG = _VAL2FLD(BLEIF_CLKCFG_CLK32KEN, 1);
   2af42:	4b3e      	ldr	r3, [pc, #248]	; (2b03c <am_hal_ble_power_control+0x154>)
   2af44:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2af48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
            BLEIFn(ui32Module)->BLEDBG_b.DBGDATA = 1 << 14;
   2af4c:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   2af50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   2af54:	f361 02df 	bfi	r2, r1, #3, #29
   2af58:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
            if ( APOLLO3_GE_A1 )
   2af5c:	4b35      	ldr	r3, [pc, #212]	; (2b034 <am_hal_ble_power_control+0x14c>)
   2af5e:	68db      	ldr	r3, [r3, #12]
   2af60:	b2db      	uxtb	r3, r3
   2af62:	2b11      	cmp	r3, #17
   2af64:	d920      	bls.n	2afa8 <am_hal_ble_power_control+0xc0>
                MCUCTRL->MISCCTRL_b.BLE_RESETN = 1;
   2af66:	4a33      	ldr	r2, [pc, #204]	; (2b034 <am_hal_ble_power_control+0x14c>)
   2af68:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
   2af6c:	f043 0320 	orr.w	r3, r3, #32
   2af70:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
            delay_ms(5);
   2af74:	4832      	ldr	r0, [pc, #200]	; (2b040 <am_hal_ble_power_control+0x158>)
   2af76:	f001 f89f 	bl	2c0b8 <am_hal_flash_delay>
            BLEIFn(ui32Module)->BLECFG_b.PWRSMEN = 1;
   2af7a:	4a30      	ldr	r2, [pc, #192]	; (2b03c <am_hal_ble_power_control+0x154>)
   2af7c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   2af80:	f043 0301 	orr.w	r3, r3, #1
   2af84:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
            WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.PWRST != 3, 1000,
   2af88:	4625      	mov	r5, r4
   2af8a:	4b2c      	ldr	r3, [pc, #176]	; (2b03c <am_hal_ble_power_control+0x154>)
   2af8c:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2af90:	f3c3 2302 	ubfx	r3, r3, #8, #3
   2af94:	2b03      	cmp	r3, #3
   2af96:	d03d      	beq.n	2b014 <am_hal_ble_power_control+0x12c>
   2af98:	4b2a      	ldr	r3, [pc, #168]	; (2b044 <am_hal_ble_power_control+0x15c>)
   2af9a:	429d      	cmp	r5, r3
   2af9c:	d840      	bhi.n	2b020 <am_hal_ble_power_control+0x138>
   2af9e:	2010      	movs	r0, #16
   2afa0:	f001 f88a 	bl	2c0b8 <am_hal_flash_delay>
   2afa4:	3501      	adds	r5, #1
   2afa6:	e7f0      	b.n	2af8a <am_hal_ble_power_control+0xa2>
                AM_REGVAL(0x40020198) = 0x1 << 2;
   2afa8:	4b27      	ldr	r3, [pc, #156]	; (2b048 <am_hal_ble_power_control+0x160>)
   2afaa:	2204      	movs	r2, #4
   2afac:	601a      	str	r2, [r3, #0]
   2afae:	e7e1      	b.n	2af74 <am_hal_ble_power_control+0x8c>
    else if (ui32PowerState == AM_HAL_BLE_POWER_OFF)
   2afb0:	2901      	cmp	r1, #1
   2afb2:	d137      	bne.n	2b024 <am_hal_ble_power_control+0x13c>
        BLEIFn(ui32Module)->CLKCFG = 0;
   2afb4:	4b21      	ldr	r3, [pc, #132]	; (2b03c <am_hal_ble_power_control+0x154>)
   2afb6:	2100      	movs	r1, #0
   2afb8:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
        BLEIF->BLEDBG_b.DBGDATA = 0;
   2afbc:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   2afc0:	f361 02df 	bfi	r2, r1, #3, #29
   2afc4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
        if ( APOLLO3_GE_A1 )
   2afc8:	4b1a      	ldr	r3, [pc, #104]	; (2b034 <am_hal_ble_power_control+0x14c>)
   2afca:	68db      	ldr	r3, [r3, #12]
   2afcc:	b2db      	uxtb	r3, r3
   2afce:	2b11      	cmp	r3, #17
   2afd0:	d917      	bls.n	2b002 <am_hal_ble_power_control+0x11a>
            MCUCTRL->MISCCTRL_b.BLE_RESETN = 0;
   2afd2:	4b18      	ldr	r3, [pc, #96]	; (2b034 <am_hal_ble_power_control+0x14c>)
   2afd4:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
   2afd8:	f36f 1245 	bfc	r2, #5, #1
   2afdc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
        BLEIF->BLECFG_b.PWRSMEN = 0;
   2afe0:	4b16      	ldr	r3, [pc, #88]	; (2b03c <am_hal_ble_power_control+0x154>)
   2afe2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
   2afe6:	f36f 0200 	bfc	r2, #0, #1
   2afea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        if (am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_BLEL) !=
   2afee:	200e      	movs	r0, #14
   2aff0:	f001 fa34 	bl	2c45c <am_hal_pwrctrl_periph_disable>
   2aff4:	4604      	mov	r4, r0
   2aff6:	b9b8      	cbnz	r0, 2b028 <am_hal_ble_power_control+0x140>
        delay_us(100);
   2aff8:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   2affc:	f001 f85c 	bl	2c0b8 <am_hal_flash_delay>
   2b000:	e008      	b.n	2b014 <am_hal_ble_power_control+0x12c>
            AM_REGVAL(0x40020198) &= ~(0x1 << 2);
   2b002:	4a11      	ldr	r2, [pc, #68]	; (2b048 <am_hal_ble_power_control+0x160>)
   2b004:	6813      	ldr	r3, [r2, #0]
   2b006:	f023 0304 	bic.w	r3, r3, #4
   2b00a:	6013      	str	r3, [r2, #0]
   2b00c:	e7e8      	b.n	2afe0 <am_hal_ble_power_control+0xf8>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2b00e:	2402      	movs	r4, #2
   2b010:	e000      	b.n	2b014 <am_hal_ble_power_control+0x12c>
   2b012:	2402      	movs	r4, #2
} // am_hal_ble_power_control()
   2b014:	4620      	mov	r0, r4
   2b016:	bd38      	pop	{r3, r4, r5, pc}
            WHILE_TIMEOUT_MS ( ((MCUCTRL->FEATUREENABLE & 0x7) != 0x7), 100,
   2b018:	4c0c      	ldr	r4, [pc, #48]	; (2b04c <am_hal_ble_power_control+0x164>)
   2b01a:	e7fb      	b.n	2b014 <am_hal_ble_power_control+0x12c>
                return AM_HAL_BLE_REGULATOR_FAILED;
   2b01c:	4c0c      	ldr	r4, [pc, #48]	; (2b050 <am_hal_ble_power_control+0x168>)
   2b01e:	e7f9      	b.n	2b014 <am_hal_ble_power_control+0x12c>
            WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.PWRST != 3, 1000,
   2b020:	4c0c      	ldr	r4, [pc, #48]	; (2b054 <am_hal_ble_power_control+0x16c>)
   2b022:	e7f7      	b.n	2b014 <am_hal_ble_power_control+0x12c>
        return AM_HAL_STATUS_INVALID_OPERATION;
   2b024:	2407      	movs	r4, #7
   2b026:	e7f5      	b.n	2b014 <am_hal_ble_power_control+0x12c>
            return AM_HAL_BLE_SHUTDOWN_FAILED;
   2b028:	4c0b      	ldr	r4, [pc, #44]	; (2b058 <am_hal_ble_power_control+0x170>)
   2b02a:	e7f3      	b.n	2b014 <am_hal_ble_power_control+0x12c>
   2b02c:	01775230 	.word	0x01775230
   2b030:	40021000 	.word	0x40021000
   2b034:	40020000 	.word	0x40020000
   2b038:	0001869f 	.word	0x0001869f
   2b03c:	5000c000 	.word	0x5000c000
   2b040:	00013880 	.word	0x00013880
   2b044:	000f423f 	.word	0x000f423f
   2b048:	40020198 	.word	0x40020198
   2b04c:	08000005 	.word	0x08000005
   2b050:	08000007 	.word	0x08000007
   2b054:	08000008 	.word	0x08000008
   2b058:	08000006 	.word	0x08000006

0002b05c <am_hal_ble_default_trim_set_ramcode>:
    if (APOLLO3_B0)
   2b05c:	4b1b      	ldr	r3, [pc, #108]	; (2b0cc <am_hal_ble_default_trim_set_ramcode+0x70>)
   2b05e:	68db      	ldr	r3, [r3, #12]
   2b060:	b2db      	uxtb	r3, r3
   2b062:	2b21      	cmp	r3, #33	; 0x21
   2b064:	d02e      	beq.n	2b0c4 <am_hal_ble_default_trim_set_ramcode+0x68>
        pRamCode = (uint32_t *) (am_ble_performance_patch.pui32Data);
   2b066:	4b1a      	ldr	r3, [pc, #104]	; (2b0d0 <am_hal_ble_default_trim_set_ramcode+0x74>)
   2b068:	68d8      	ldr	r0, [r3, #12]
    ui32TrimValue = AM_REGVAL(0x50023800);
   2b06a:	4b1a      	ldr	r3, [pc, #104]	; (2b0d4 <am_hal_ble_default_trim_set_ramcode+0x78>)
   2b06c:	681a      	ldr	r2, [r3, #0]
                            ((ui32TrimValue & 0x0000FF00) << 8) |
   2b06e:	0213      	lsls	r3, r2, #8
   2b070:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    ui32TrimValueSwapped = (((ui32TrimValue & 0x000000FF) << 24) |
   2b074:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                            ((ui32TrimValue & 0x00FF0000) >> 8) |
   2b078:	0a11      	lsrs	r1, r2, #8
   2b07a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
                            ((ui32TrimValue & 0x0000FF00) << 8) |
   2b07e:	430b      	orrs	r3, r1
    ui32TrimValueSwapped = (((ui32TrimValue & 0x000000FF) << 24) |
   2b080:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    if (ui32TrimValueSwapped != 0xFFFFFFFF)
   2b084:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2b088:	d000      	beq.n	2b08c <am_hal_ble_default_trim_set_ramcode+0x30>
        pRamCode[2] = ui32TrimValueSwapped;
   2b08a:	6083      	str	r3, [r0, #8]
    ui32TrimValue = AM_REGVAL(0x50023804);
   2b08c:	4b12      	ldr	r3, [pc, #72]	; (2b0d8 <am_hal_ble_default_trim_set_ramcode+0x7c>)
   2b08e:	681a      	ldr	r2, [r3, #0]
    if (ui32TrimValue != 0xFFFFFFFF)
   2b090:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2b094:	d001      	beq.n	2b09a <am_hal_ble_default_trim_set_ramcode+0x3e>
        ui32TrimValue += 0x40000000;  // Increase the retention voltage to > 0.75v
   2b096:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
                            ((ui32TrimValue & 0x0000FF00) << 8) |
   2b09a:	0213      	lsls	r3, r2, #8
   2b09c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    ui32TrimValueSwapped = (((ui32TrimValue & 0x000000FF) << 24) |
   2b0a0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                            ((ui32TrimValue & 0x00FF0000) >> 8) |
   2b0a4:	0a11      	lsrs	r1, r2, #8
   2b0a6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
                            ((ui32TrimValue & 0x0000FF00) << 8) |
   2b0aa:	430b      	orrs	r3, r1
    ui32TrimValueSwapped = (((ui32TrimValue & 0x000000FF) << 24) |
   2b0ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    if ( ui32TrimValueSwapped != 0xFFFFFFFF )
   2b0b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2b0b4:	d004      	beq.n	2b0c0 <am_hal_ble_default_trim_set_ramcode+0x64>
        pRamCode[3] = ((pRamCode[3] & (~0x1F0)) | ui32TrimValueSwapped);
   2b0b6:	68c2      	ldr	r2, [r0, #12]
   2b0b8:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
   2b0bc:	4313      	orrs	r3, r2
   2b0be:	60c3      	str	r3, [r0, #12]
} // am_hal_ble_default_trim_set_ramcode()
   2b0c0:	2000      	movs	r0, #0
   2b0c2:	4770      	bx	lr
        pRamCode = (uint32_t *) (am_ble_performance_patch_b0.pui32Data);
   2b0c4:	4b05      	ldr	r3, [pc, #20]	; (2b0dc <am_hal_ble_default_trim_set_ramcode+0x80>)
   2b0c6:	68d8      	ldr	r0, [r3, #12]
   2b0c8:	e7cf      	b.n	2b06a <am_hal_ble_default_trim_set_ramcode+0xe>
   2b0ca:	bf00      	nop
   2b0cc:	40020000 	.word	0x40020000
   2b0d0:	10000598 	.word	0x10000598
   2b0d4:	50023800 	.word	0x50023800
   2b0d8:	50023804 	.word	0x50023804
   2b0dc:	100007ac 	.word	0x100007ac

0002b0e0 <am_hal_ble_vs_command_build>:
{
   2b0e0:	b410      	push	{r4}
    pui8Dest[0] = 0x01;
   2b0e2:	2401      	movs	r4, #1
   2b0e4:	7004      	strb	r4, [r0, #0]
    pui8Dest[1] = ui32OpCode & 0xFF;
   2b0e6:	7041      	strb	r1, [r0, #1]
    pui8Dest[2] = (ui32OpCode >> 8) & 0xFF;
   2b0e8:	0a09      	lsrs	r1, r1, #8
   2b0ea:	7081      	strb	r1, [r0, #2]
    pui8Dest[3] = (ui32TotalLength - 4) & 0xFF;
   2b0ec:	1f11      	subs	r1, r2, #4
   2b0ee:	70c1      	strb	r1, [r0, #3]
    for (uint32_t i = 4; i < ui32TotalLength; i++)
   2b0f0:	2104      	movs	r1, #4
   2b0f2:	4291      	cmp	r1, r2
   2b0f4:	d205      	bcs.n	2b102 <am_hal_ble_vs_command_build+0x22>
        pui8Dest[i] = pui8Parameters[i - 4];
   2b0f6:	185c      	adds	r4, r3, r1
   2b0f8:	f814 4c04 	ldrb.w	r4, [r4, #-4]
   2b0fc:	5444      	strb	r4, [r0, r1]
    for (uint32_t i = 4; i < ui32TotalLength; i++)
   2b0fe:	3101      	adds	r1, #1
   2b100:	e7f7      	b.n	2b0f2 <am_hal_ble_vs_command_build+0x12>
} // am_hal_ble_vs_command_build()
   2b102:	2000      	movs	r0, #0
   2b104:	bc10      	pop	{r4}
   2b106:	4770      	bx	lr

0002b108 <am_hal_ble_blocking_transfer>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2b108:	2800      	cmp	r0, #0
   2b10a:	f000 8171 	beq.w	2b3f0 <am_hal_ble_blocking_transfer+0x2e8>
{
   2b10e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b112:	b083      	sub	sp, #12
   2b114:	4689      	mov	r9, r1
   2b116:	4606      	mov	r6, r0
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2b118:	6803      	ldr	r3, [r0, #0]
   2b11a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2b11e:	4ab9      	ldr	r2, [pc, #740]	; (2b404 <am_hal_ble_blocking_transfer+0x2fc>)
   2b120:	4293      	cmp	r3, r2
   2b122:	f040 8167 	bne.w	2b3f4 <am_hal_ble_blocking_transfer+0x2ec>
    if (psTransfer->ui16Length == 0)
   2b126:	890b      	ldrh	r3, [r1, #8]
   2b128:	2b00      	cmp	r3, #0
   2b12a:	f000 8167 	beq.w	2b3fc <am_hal_ble_blocking_transfer+0x2f4>
    ui32IntEnable = BLEIFn(ui32Module)->INTEN;
   2b12e:	4bb6      	ldr	r3, [pc, #728]	; (2b408 <am_hal_ble_blocking_transfer+0x300>)
   2b130:	f8d3 b220 	ldr.w	fp, [r3, #544]	; 0x220
    BLEIFn(ui32Module)->INTEN_b.BLECIRQ = 0;
   2b134:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
   2b138:	f36f 12c7 	bfc	r2, #7, #1
   2b13c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
    BLEIFn(ui32Module)->INTEN_b.BLECSSTAT = 0;
   2b140:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
   2b144:	f36f 2208 	bfc	r2, #8, #1
   2b148:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
    BLEIFn(ui32Module)->INTEN_b.CMDCMP = 0;
   2b14c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
   2b150:	f36f 0200 	bfc	r2, #0, #1
   2b154:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
    BLEIFn(ui32Module)->INTEN_b.THR = 0;
   2b158:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
   2b15c:	f36f 0241 	bfc	r2, #1, #1
   2b160:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
    BLEIFn(ui32Module)->INTCLR_b.CMDCMP = 1;
   2b164:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
   2b168:	f042 0201 	orr.w	r2, r2, #1
   2b16c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    BLEIFn(ui32Module)->INTCLR_b.BLECSSTAT = 1;
   2b170:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
   2b174:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   2b178:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    if (psTransfer->ui8Command == AM_HAL_BLE_WRITE)
   2b17c:	7a8b      	ldrb	r3, [r1, #10]
   2b17e:	2b01      	cmp	r3, #1
   2b180:	d039      	beq.n	2b1f6 <am_hal_ble_blocking_transfer+0xee>
        if (BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0)
   2b182:	4ba1      	ldr	r3, [pc, #644]	; (2b408 <am_hal_ble_blocking_transfer+0x300>)
   2b184:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2b188:	f013 0f80 	tst.w	r3, #128	; 0x80
   2b18c:	f000 8093 	beq.w	2b2b6 <am_hal_ble_blocking_transfer+0x1ae>
        if (!am_hal_ble_bus_lock(pBle))
   2b190:	f7ff fd68 	bl	2ac64 <am_hal_ble_bus_lock>
   2b194:	2800      	cmp	r0, #0
   2b196:	f000 8093 	beq.w	2b2c0 <am_hal_ble_blocking_transfer+0x1b8>
    if (psTransfer->bContinue)
   2b19a:	f899 300c 	ldrb.w	r3, [r9, #12]
   2b19e:	b113      	cbz	r3, 2b1a6 <am_hal_ble_blocking_transfer+0x9e>
        pBle->bContinuePacket = true;
   2b1a0:	2301      	movs	r3, #1
   2b1a2:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
    memcpy(&pBle->sCurrentTransfer, psTransfer, sizeof(am_hal_ble_transfer_t));
   2b1a6:	f106 0a0c 	add.w	sl, r6, #12
   2b1aa:	f8d9 2000 	ldr.w	r2, [r9]
   2b1ae:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2b1b2:	f8d9 0008 	ldr.w	r0, [r9, #8]
   2b1b6:	f8d9 100c 	ldr.w	r1, [r9, #12]
   2b1ba:	60f2      	str	r2, [r6, #12]
   2b1bc:	6133      	str	r3, [r6, #16]
   2b1be:	6170      	str	r0, [r6, #20]
   2b1c0:	61b1      	str	r1, [r6, #24]
   2b1c2:	f8d9 2010 	ldr.w	r2, [r9, #16]
   2b1c6:	f8d9 3014 	ldr.w	r3, [r9, #20]
   2b1ca:	61f2      	str	r2, [r6, #28]
   2b1cc:	6233      	str	r3, [r6, #32]
    AM_CRITICAL_BEGIN;
   2b1ce:	f000 ffb5 	bl	2c13c <am_hal_interrupt_master_disable>
   2b1d2:	9001      	str	r0, [sp, #4]
    am_hal_ble_cmd_write(pHandle, psTransfer);
   2b1d4:	4649      	mov	r1, r9
   2b1d6:	4630      	mov	r0, r6
   2b1d8:	f7ff fca4 	bl	2ab24 <am_hal_ble_cmd_write>
    if (psTransfer->ui8Command == AM_HAL_BLE_WRITE)
   2b1dc:	f899 300a 	ldrb.w	r3, [r9, #10]
   2b1e0:	2b01      	cmp	r3, #1
   2b1e2:	d073      	beq.n	2b2cc <am_hal_ble_blocking_transfer+0x1c4>
        while (pBle->ui32TransferIndex < pBle->sCurrentTransfer.ui16Length)
   2b1e4:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
   2b1e6:	8ab3      	ldrh	r3, [r6, #20]
   2b1e8:	429a      	cmp	r2, r3
   2b1ea:	f080 80b4 	bcs.w	2b356 <am_hal_ble_blocking_transfer+0x24e>
            am_hal_ble_fifo_drain(pHandle);
   2b1ee:	4630      	mov	r0, r6
   2b1f0:	f7ff fcf2 	bl	2abd8 <am_hal_ble_fifo_drain>
   2b1f4:	e7f6      	b.n	2b1e4 <am_hal_ble_blocking_transfer+0xdc>
        if ( pBle->bLastPacketWasTX == true)
   2b1f6:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   2b1fa:	b12b      	cbz	r3, 2b208 <am_hal_ble_blocking_transfer+0x100>
            if (!pBle->bPatchComplete)
   2b1fc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   2b200:	b1ab      	cbz	r3, 2b22e <am_hal_ble_blocking_transfer+0x126>
            pBle->bLastPacketWasTX = false;
   2b202:	2300      	movs	r3, #0
   2b204:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        if (pBle->bPatchComplete)
   2b208:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
   2b20c:	b9a3      	cbnz	r3, 2b238 <am_hal_ble_blocking_transfer+0x130>
        BLEIFn(0)->BLEDBG_b.IOCLKON = 1;
   2b20e:	4a7e      	ldr	r2, [pc, #504]	; (2b408 <am_hal_ble_blocking_transfer+0x300>)
   2b210:	f8d2 3410 	ldr.w	r3, [r2, #1040]	; 0x410
   2b214:	f043 0302 	orr.w	r3, r3, #2
   2b218:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
        delay_us(5);
   2b21c:	2050      	movs	r0, #80	; 0x50
   2b21e:	f000 ff4b 	bl	2c0b8 <am_hal_flash_delay>
        am_hal_ble_wakeup_set(pBle, 1);
   2b222:	2101      	movs	r1, #1
   2b224:	4630      	mov	r0, r6
   2b226:	f7ff fd39 	bl	2ac9c <am_hal_ble_wakeup_set>
        uint32_t ui32Timeout = 0;
   2b22a:	2400      	movs	r4, #0
   2b22c:	e01a      	b.n	2b264 <am_hal_ble_blocking_transfer+0x15c>
                delay_ms(3);
   2b22e:	f64b 3080 	movw	r0, #48000	; 0xbb80
   2b232:	f000 ff41 	bl	2c0b8 <am_hal_flash_delay>
   2b236:	e7e4      	b.n	2b202 <am_hal_ble_blocking_transfer+0xfa>
            uint32_t statusTimeout = 0;
   2b238:	2400      	movs	r4, #0
            while (am_hal_ble_check_status(pBle) == true)
   2b23a:	4630      	mov	r0, r6
   2b23c:	f7ff fc5e 	bl	2aafc <am_hal_ble_check_status>
   2b240:	2800      	cmp	r0, #0
   2b242:	d0e4      	beq.n	2b20e <am_hal_ble_blocking_transfer+0x106>
                statusTimeout++;
   2b244:	3401      	adds	r4, #1
                delay_us(10);
   2b246:	20a0      	movs	r0, #160	; 0xa0
   2b248:	f000 ff36 	bl	2c0b8 <am_hal_flash_delay>
                if (statusTimeout > 300)
   2b24c:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
   2b250:	d9f3      	bls.n	2b23a <am_hal_ble_blocking_transfer+0x132>
   2b252:	e7dc      	b.n	2b20e <am_hal_ble_blocking_transfer+0x106>
                if (am_hal_ble_bus_lock(pBle))
   2b254:	4630      	mov	r0, r6
   2b256:	f7ff fd05 	bl	2ac64 <am_hal_ble_bus_lock>
   2b25a:	bb20      	cbnz	r0, 2b2a6 <am_hal_ble_blocking_transfer+0x19e>
            ui32Timeout++;
   2b25c:	3401      	adds	r4, #1
            delay_us(10);
   2b25e:	20a0      	movs	r0, #160	; 0xa0
   2b260:	f000 ff2a 	bl	2c0b8 <am_hal_flash_delay>
            if (am_hal_ble_check_status(pBle) == true)
   2b264:	4630      	mov	r0, r6
   2b266:	f7ff fc49 	bl	2aafc <am_hal_ble_check_status>
   2b26a:	2800      	cmp	r0, #0
   2b26c:	d1f2      	bne.n	2b254 <am_hal_ble_blocking_transfer+0x14c>
            else if ((ui32Timeout >= ui32TimeoutLimit) ||
   2b26e:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
   2b272:	d205      	bcs.n	2b280 <am_hal_ble_blocking_transfer+0x178>
                     (BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ))
   2b274:	4b64      	ldr	r3, [pc, #400]	; (2b408 <am_hal_ble_blocking_transfer+0x300>)
   2b276:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
            else if ((ui32Timeout >= ui32TimeoutLimit) ||
   2b27a:	f013 0f80 	tst.w	r3, #128	; 0x80
   2b27e:	d0ed      	beq.n	2b25c <am_hal_ble_blocking_transfer+0x154>
                am_hal_ble_wakeup_set(pBle, 0);
   2b280:	2100      	movs	r1, #0
   2b282:	4630      	mov	r0, r6
   2b284:	f7ff fd0a 	bl	2ac9c <am_hal_ble_wakeup_set>
        BLEIFn(0)->BLEDBG_b.IOCLKON = 0;
   2b288:	4b5f      	ldr	r3, [pc, #380]	; (2b408 <am_hal_ble_blocking_transfer+0x300>)
   2b28a:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   2b28e:	f36f 0241 	bfc	r2, #1, #1
   2b292:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
            BLEIFn(ui32Module)->INTEN = ui32IntEnable;
   2b296:	f8c3 b220 	str.w	fp, [r3, #544]	; 0x220
            am_hal_ble_wakeup_set(pBle, 0);
   2b29a:	2100      	movs	r1, #0
   2b29c:	4630      	mov	r0, r6
   2b29e:	f7ff fcfd 	bl	2ac9c <am_hal_ble_wakeup_set>
            return ui32SpiStatus;
   2b2a2:	485a      	ldr	r0, [pc, #360]	; (2b40c <am_hal_ble_blocking_transfer+0x304>)
   2b2a4:	e0a7      	b.n	2b3f6 <am_hal_ble_blocking_transfer+0x2ee>
        BLEIFn(0)->BLEDBG_b.IOCLKON = 0;
   2b2a6:	4b58      	ldr	r3, [pc, #352]	; (2b408 <am_hal_ble_blocking_transfer+0x300>)
   2b2a8:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   2b2ac:	f36f 0241 	bfc	r2, #1, #1
   2b2b0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
        if (ui32SpiStatus != AM_HAL_STATUS_SUCCESS)
   2b2b4:	e771      	b.n	2b19a <am_hal_ble_blocking_transfer+0x92>
            BLEIFn(ui32Module)->INTEN = ui32IntEnable;
   2b2b6:	4b54      	ldr	r3, [pc, #336]	; (2b408 <am_hal_ble_blocking_transfer+0x300>)
   2b2b8:	f8c3 b220 	str.w	fp, [r3, #544]	; 0x220
            return AM_HAL_BLE_STATUS_IRQ_LOW;
   2b2bc:	4854      	ldr	r0, [pc, #336]	; (2b410 <am_hal_ble_blocking_transfer+0x308>)
   2b2be:	e09a      	b.n	2b3f6 <am_hal_ble_blocking_transfer+0x2ee>
            BLEIFn(ui32Module)->INTEN = ui32IntEnable;
   2b2c0:	4b51      	ldr	r3, [pc, #324]	; (2b408 <am_hal_ble_blocking_transfer+0x300>)
   2b2c2:	f8c3 b220 	str.w	fp, [r3, #544]	; 0x220
            return AM_HAL_BLE_STATUS_BUS_BUSY;
   2b2c6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   2b2ca:	e094      	b.n	2b3f6 <am_hal_ble_blocking_transfer+0x2ee>
        uint32_t ui32Bytes = pBle->sCurrentTransfer.ui16Length;
   2b2cc:	8ab7      	ldrh	r7, [r6, #20]
        uint32_t *pui32Buffer = pBle->sCurrentTransfer.pui32Data;
   2b2ce:	68f5      	ldr	r5, [r6, #12]
        am_hal_ble_cmd_write(pHandle, psTransfer);
   2b2d0:	4649      	mov	r1, r9
   2b2d2:	4630      	mov	r0, r6
   2b2d4:	f7ff fc26 	bl	2ab24 <am_hal_ble_cmd_write>
        bool bCmdCmp = false;
   2b2d8:	2400      	movs	r4, #0
        while (ui32Bytes)
   2b2da:	b1d7      	cbz	r7, 2b312 <am_hal_ble_blocking_transfer+0x20a>
            numWait = 0;
   2b2dc:	2200      	movs	r2, #0
            while ((ui32FifoRem = BLEIFn(ui32Module)->FIFOPTR_b.FIFO0REM) < 4)
   2b2de:	4b4a      	ldr	r3, [pc, #296]	; (2b408 <am_hal_ble_blocking_transfer+0x300>)
   2b2e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   2b2e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
   2b2e8:	2b03      	cmp	r3, #3
   2b2ea:	d80f      	bhi.n	2b30c <am_hal_ble_blocking_transfer+0x204>
                bCmdCmp = BLEIFn(ui32Module)->INTSTAT_b.CMDCMP;
   2b2ec:	4946      	ldr	r1, [pc, #280]	; (2b408 <am_hal_ble_blocking_transfer+0x300>)
   2b2ee:	f8d1 4224 	ldr.w	r4, [r1, #548]	; 0x224
                if (bCmdCmp || (numWait++ >= AM_HAL_IOM_MAX_BLOCKING_WAIT))
   2b2f2:	f014 0401 	ands.w	r4, r4, #1
   2b2f6:	d109      	bne.n	2b30c <am_hal_ble_blocking_transfer+0x204>
   2b2f8:	f102 0801 	add.w	r8, r2, #1
   2b2fc:	4945      	ldr	r1, [pc, #276]	; (2b414 <am_hal_ble_blocking_transfer+0x30c>)
   2b2fe:	428a      	cmp	r2, r1
   2b300:	d804      	bhi.n	2b30c <am_hal_ble_blocking_transfer+0x204>
                    am_hal_flash_delay( FLASH_CYCLES_US(1) );
   2b302:	2010      	movs	r0, #16
   2b304:	f000 fed8 	bl	2c0b8 <am_hal_flash_delay>
                if (bCmdCmp || (numWait++ >= AM_HAL_IOM_MAX_BLOCKING_WAIT))
   2b308:	4642      	mov	r2, r8
   2b30a:	e7e8      	b.n	2b2de <am_hal_ble_blocking_transfer+0x1d6>
            if (bCmdCmp || (ui32FifoRem < 4))
   2b30c:	b90c      	cbnz	r4, 2b312 <am_hal_ble_blocking_transfer+0x20a>
   2b30e:	2b03      	cmp	r3, #3
   2b310:	d80f      	bhi.n	2b332 <am_hal_ble_blocking_transfer+0x22a>
        bool bCmdCmp = false;
   2b312:	2400      	movs	r4, #0
       WHILE_TIMEOUT_MS_BREAK ( BLEIFn(ui32Module)->INTSTAT_b.CMDCMP == 0, 2,
   2b314:	4b3c      	ldr	r3, [pc, #240]	; (2b408 <am_hal_ble_blocking_transfer+0x300>)
   2b316:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
   2b31a:	f013 0f01 	tst.w	r3, #1
   2b31e:	d116      	bne.n	2b34e <am_hal_ble_blocking_transfer+0x246>
   2b320:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
   2b324:	d213      	bcs.n	2b34e <am_hal_ble_blocking_transfer+0x246>
   2b326:	2010      	movs	r0, #16
   2b328:	f000 fec6 	bl	2c0b8 <am_hal_flash_delay>
   2b32c:	3401      	adds	r4, #1
   2b32e:	e7f1      	b.n	2b314 <am_hal_ble_blocking_transfer+0x20c>
                    ui32Bytes = 0;
   2b330:	2700      	movs	r7, #0
            while ((ui32FifoRem >= 4) && ui32Bytes)
   2b332:	2b03      	cmp	r3, #3
   2b334:	d9d1      	bls.n	2b2da <am_hal_ble_blocking_transfer+0x1d2>
   2b336:	2f00      	cmp	r7, #0
   2b338:	d0cf      	beq.n	2b2da <am_hal_ble_blocking_transfer+0x1d2>
                BLEIFn(ui32Module)->FIFOPUSH = *pui32Buffer++;
   2b33a:	f855 1b04 	ldr.w	r1, [r5], #4
   2b33e:	4a32      	ldr	r2, [pc, #200]	; (2b408 <am_hal_ble_blocking_transfer+0x300>)
   2b340:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
                ui32FifoRem -= 4;
   2b344:	3b04      	subs	r3, #4
                if (ui32Bytes >= 4)
   2b346:	2f03      	cmp	r7, #3
   2b348:	d9f2      	bls.n	2b330 <am_hal_ble_blocking_transfer+0x228>
                    ui32Bytes -= 4;
   2b34a:	3f04      	subs	r7, #4
   2b34c:	e7f1      	b.n	2b332 <am_hal_ble_blocking_transfer+0x22a>
       am_hal_ble_wakeup_set(pBle, 0);
   2b34e:	2100      	movs	r1, #0
   2b350:	4630      	mov	r0, r6
   2b352:	f7ff fca3 	bl	2ac9c <am_hal_ble_wakeup_set>
    AM_CRITICAL_END;
   2b356:	9801      	ldr	r0, [sp, #4]
   2b358:	f000 fef4 	bl	2c144 <am_hal_interrupt_master_set>
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->INTSTAT_b.CMDCMP == 0, 10,
   2b35c:	2400      	movs	r4, #0
   2b35e:	4b2a      	ldr	r3, [pc, #168]	; (2b408 <am_hal_ble_blocking_transfer+0x300>)
   2b360:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
   2b364:	f013 0f01 	tst.w	r3, #1
   2b368:	d108      	bne.n	2b37c <am_hal_ble_blocking_transfer+0x274>
   2b36a:	f242 730f 	movw	r3, #9999	; 0x270f
   2b36e:	429c      	cmp	r4, r3
   2b370:	d846      	bhi.n	2b400 <am_hal_ble_blocking_transfer+0x2f8>
   2b372:	2010      	movs	r0, #16
   2b374:	f000 fea0 	bl	2c0b8 <am_hal_flash_delay>
   2b378:	3401      	adds	r4, #1
   2b37a:	e7f0      	b.n	2b35e <am_hal_ble_blocking_transfer+0x256>
    BLEIFn(ui32Module)->INTCLR_b.CMDCMP = 1;
   2b37c:	4b22      	ldr	r3, [pc, #136]	; (2b408 <am_hal_ble_blocking_transfer+0x300>)
   2b37e:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
   2b382:	f042 0201 	orr.w	r2, r2, #1
   2b386:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    BLEIFn(ui32Module)->INTCLR_b.THR = 1;
   2b38a:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
   2b38e:	f042 0202 	orr.w	r2, r2, #2
   2b392:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    memset(&pBle->sCurrentTransfer, 0, sizeof(am_hal_ble_transfer_t));
   2b396:	2300      	movs	r3, #0
   2b398:	60f3      	str	r3, [r6, #12]
   2b39a:	f8ca 3004 	str.w	r3, [sl, #4]
   2b39e:	f8ca 3008 	str.w	r3, [sl, #8]
   2b3a2:	f8ca 300c 	str.w	r3, [sl, #12]
   2b3a6:	f8ca 3010 	str.w	r3, [sl, #16]
   2b3aa:	f8ca 3014 	str.w	r3, [sl, #20]
    pBle->ui32TransferIndex = 0;
   2b3ae:	63f3      	str	r3, [r6, #60]	; 0x3c
    if (psTransfer->ui8Command == AM_HAL_BLE_WRITE)
   2b3b0:	f899 300a 	ldrb.w	r3, [r9, #10]
   2b3b4:	2b01      	cmp	r3, #1
   2b3b6:	d00b      	beq.n	2b3d0 <am_hal_ble_blocking_transfer+0x2c8>
    if ((psTransfer->ui8Command == AM_HAL_BLE_READ) &&
   2b3b8:	f899 300a 	ldrb.w	r3, [r9, #10]
   2b3bc:	2b02      	cmp	r3, #2
   2b3be:	d00f      	beq.n	2b3e0 <am_hal_ble_blocking_transfer+0x2d8>
    BLEIFn(ui32Module)->INTEN = ui32IntEnable;
   2b3c0:	4b11      	ldr	r3, [pc, #68]	; (2b408 <am_hal_ble_blocking_transfer+0x300>)
   2b3c2:	f8c3 b220 	str.w	fp, [r3, #544]	; 0x220
    am_hal_ble_bus_release(pBle);
   2b3c6:	4630      	mov	r0, r6
   2b3c8:	f7ff fba8 	bl	2ab1c <am_hal_ble_bus_release>
    return AM_HAL_STATUS_SUCCESS;
   2b3cc:	2000      	movs	r0, #0
   2b3ce:	e012      	b.n	2b3f6 <am_hal_ble_blocking_transfer+0x2ee>
        am_hal_ble_wakeup_set(pBle, 0);
   2b3d0:	2100      	movs	r1, #0
   2b3d2:	4630      	mov	r0, r6
   2b3d4:	f7ff fc62 	bl	2ac9c <am_hal_ble_wakeup_set>
        pBle->bLastPacketWasTX = true;
   2b3d8:	2301      	movs	r3, #1
   2b3da:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
   2b3de:	e7eb      	b.n	2b3b8 <am_hal_ble_blocking_transfer+0x2b0>
        (pBle->bPatchComplete == true))
   2b3e0:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
    if ((psTransfer->ui8Command == AM_HAL_BLE_READ) &&
   2b3e4:	2b00      	cmp	r3, #0
   2b3e6:	d0eb      	beq.n	2b3c0 <am_hal_ble_blocking_transfer+0x2b8>
        pBle->bLastPacketWasTX = false;
   2b3e8:	2300      	movs	r3, #0
   2b3ea:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
   2b3ee:	e7e7      	b.n	2b3c0 <am_hal_ble_blocking_transfer+0x2b8>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2b3f0:	2002      	movs	r0, #2
} // am_hal_ble_blocking_transfer()
   2b3f2:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2b3f4:	2002      	movs	r0, #2
} // am_hal_ble_blocking_transfer()
   2b3f6:	b003      	add	sp, #12
   2b3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return AM_HAL_STATUS_SUCCESS;
   2b3fc:	2000      	movs	r0, #0
   2b3fe:	e7fa      	b.n	2b3f6 <am_hal_ble_blocking_transfer+0x2ee>
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->INTSTAT_b.CMDCMP == 0, 10,
   2b400:	4805      	ldr	r0, [pc, #20]	; (2b418 <am_hal_ble_blocking_transfer+0x310>)
   2b402:	e7f8      	b.n	2b3f6 <am_hal_ble_blocking_transfer+0x2ee>
   2b404:	01775230 	.word	0x01775230
   2b408:	5000c000 	.word	0x5000c000
   2b40c:	08000002 	.word	0x08000002
   2b410:	08000001 	.word	0x08000001
   2b414:	0007a11f 	.word	0x0007a11f
   2b418:	08000009 	.word	0x08000009

0002b41c <am_hal_ble_blocking_hci_write>:
{
   2b41c:	b500      	push	{lr}
   2b41e:	b087      	sub	sp, #28
    am_hal_ble_transfer_t HciWrite =
   2b420:	9200      	str	r2, [sp, #0]
   2b422:	f88d 1004 	strb.w	r1, [sp, #4]
   2b426:	2200      	movs	r2, #0
   2b428:	f88d 2005 	strb.w	r2, [sp, #5]
   2b42c:	f88d 2006 	strb.w	r2, [sp, #6]
   2b430:	f88d 2007 	strb.w	r2, [sp, #7]
   2b434:	f8ad 3008 	strh.w	r3, [sp, #8]
   2b438:	2301      	movs	r3, #1
   2b43a:	f88d 300a 	strb.w	r3, [sp, #10]
   2b43e:	f88d 200b 	strb.w	r2, [sp, #11]
   2b442:	f88d 200c 	strb.w	r2, [sp, #12]
   2b446:	9204      	str	r2, [sp, #16]
   2b448:	9205      	str	r2, [sp, #20]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2b44a:	b178      	cbz	r0, 2b46c <am_hal_ble_blocking_hci_write+0x50>
   2b44c:	4602      	mov	r2, r0
   2b44e:	6803      	ldr	r3, [r0, #0]
   2b450:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2b454:	4808      	ldr	r0, [pc, #32]	; (2b478 <am_hal_ble_blocking_hci_write+0x5c>)
   2b456:	4283      	cmp	r3, r0
   2b458:	d10a      	bne.n	2b470 <am_hal_ble_blocking_hci_write+0x54>
    if (ui8Type != AM_HAL_BLE_RAW)
   2b45a:	b111      	cbz	r1, 2b462 <am_hal_ble_blocking_hci_write+0x46>
        HciWrite.ui8OffsetLen = 1;
   2b45c:	2301      	movs	r3, #1
   2b45e:	f88d 3007 	strb.w	r3, [sp, #7]
    ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &HciWrite);
   2b462:	4669      	mov	r1, sp
   2b464:	4610      	mov	r0, r2
   2b466:	f7ff fe4f 	bl	2b108 <am_hal_ble_blocking_transfer>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
   2b46a:	e002      	b.n	2b472 <am_hal_ble_blocking_hci_write+0x56>
        return 0;
   2b46c:	2000      	movs	r0, #0
   2b46e:	e000      	b.n	2b472 <am_hal_ble_blocking_hci_write+0x56>
   2b470:	2000      	movs	r0, #0
} // am_hal_ble_blocking_hci_write()
   2b472:	b007      	add	sp, #28
   2b474:	f85d fb04 	ldr.w	pc, [sp], #4
   2b478:	01775230 	.word	0x01775230

0002b47c <am_hal_ble_patch_apply>:
{
   2b47c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b480:	b093      	sub	sp, #76	; 0x4c
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2b482:	2800      	cmp	r0, #0
   2b484:	f000 812d 	beq.w	2b6e2 <am_hal_ble_patch_apply+0x266>
   2b488:	460f      	mov	r7, r1
   2b48a:	4606      	mov	r6, r0
   2b48c:	6803      	ldr	r3, [r0, #0]
   2b48e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2b492:	4a9f      	ldr	r2, [pc, #636]	; (2b710 <am_hal_ble_patch_apply+0x294>)
   2b494:	4293      	cmp	r3, r2
   2b496:	f040 8126 	bne.w	2b6e6 <am_hal_ble_patch_apply+0x26a>
    psPatchBuffer.bytes[0] = 0x01;
   2b49a:	2301      	movs	r3, #1
   2b49c:	f88d 3000 	strb.w	r3, [sp]
    psPatchBuffer.bytes[1] = psPatch->ui32Type;
   2b4a0:	680b      	ldr	r3, [r1, #0]
   2b4a2:	f88d 3001 	strb.w	r3, [sp, #1]
    psPatchBuffer.bytes[2] = 0xF1;
   2b4a6:	23f1      	movs	r3, #241	; 0xf1
   2b4a8:	f88d 3002 	strb.w	r3, [sp, #2]
    psPatchBuffer.bytes[3] = 0x02;
   2b4ac:	2302      	movs	r3, #2
   2b4ae:	f88d 3003 	strb.w	r3, [sp, #3]
    psPatchBuffer.bytes[4] = (psPatch->ui32Length & 0xFF);
   2b4b2:	684b      	ldr	r3, [r1, #4]
   2b4b4:	f88d 3004 	strb.w	r3, [sp, #4]
    psPatchBuffer.bytes[5] = ((psPatch->ui32Length >> 8) & 0xFF);
   2b4b8:	0a1b      	lsrs	r3, r3, #8
   2b4ba:	f88d 3005 	strb.w	r3, [sp, #5]
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_TRIALS; ui32Trial++)
   2b4be:	2500      	movs	r5, #0
   2b4c0:	f241 3387 	movw	r3, #4999	; 0x1387
   2b4c4:	429d      	cmp	r5, r3
   2b4c6:	d809      	bhi.n	2b4dc <am_hal_ble_patch_apply+0x60>
        ui32ErrorStatus = am_hal_ble_blocking_hci_write(pHandle,
   2b4c8:	2306      	movs	r3, #6
   2b4ca:	466a      	mov	r2, sp
   2b4cc:	2100      	movs	r1, #0
   2b4ce:	4630      	mov	r0, r6
   2b4d0:	f7ff ffa4 	bl	2b41c <am_hal_ble_blocking_hci_write>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
   2b4d4:	4604      	mov	r4, r0
   2b4d6:	b108      	cbz	r0, 2b4dc <am_hal_ble_patch_apply+0x60>
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_TRIALS; ui32Trial++)
   2b4d8:	3501      	adds	r5, #1
   2b4da:	e7f1      	b.n	2b4c0 <am_hal_ble_patch_apply+0x44>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
   2b4dc:	2c00      	cmp	r4, #0
   2b4de:	f040 8103 	bne.w	2b6e8 <am_hal_ble_patch_apply+0x26c>
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000,
   2b4e2:	4b8c      	ldr	r3, [pc, #560]	; (2b714 <am_hal_ble_patch_apply+0x298>)
   2b4e4:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2b4e8:	f013 0f80 	tst.w	r3, #128	; 0x80
   2b4ec:	d108      	bne.n	2b500 <am_hal_ble_patch_apply+0x84>
   2b4ee:	4b8a      	ldr	r3, [pc, #552]	; (2b718 <am_hal_ble_patch_apply+0x29c>)
   2b4f0:	429c      	cmp	r4, r3
   2b4f2:	f200 80fd 	bhi.w	2b6f0 <am_hal_ble_patch_apply+0x274>
   2b4f6:	2010      	movs	r0, #16
   2b4f8:	f000 fdde 	bl	2c0b8 <am_hal_flash_delay>
   2b4fc:	3401      	adds	r4, #1
   2b4fe:	e7f0      	b.n	2b4e2 <am_hal_ble_patch_apply+0x66>
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
   2b500:	2300      	movs	r3, #0
   2b502:	9305      	str	r3, [sp, #20]
   2b504:	9306      	str	r3, [sp, #24]
   2b506:	9307      	str	r3, [sp, #28]
   2b508:	9308      	str	r3, [sp, #32]
   2b50a:	9309      	str	r3, [sp, #36]	; 0x24
    sTransfer.ui8Command = AM_HAL_BLE_READ;
   2b50c:	2302      	movs	r3, #2
   2b50e:	f88d 301a 	strb.w	r3, [sp, #26]
    sTransfer.pui32Data = psPatchBuffer.words;
   2b512:	f8cd d010 	str.w	sp, [sp, #16]
    sTransfer.ui16Length = 5;
   2b516:	2305      	movs	r3, #5
   2b518:	f8ad 3018 	strh.w	r3, [sp, #24]
    ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   2b51c:	a904      	add	r1, sp, #16
   2b51e:	4630      	mov	r0, r6
   2b520:	f7ff fdf2 	bl	2b108 <am_hal_ble_blocking_transfer>
    if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   2b524:	4604      	mov	r4, r0
   2b526:	2800      	cmp	r0, #0
   2b528:	f040 80de 	bne.w	2b6e8 <am_hal_ble_patch_apply+0x26c>
    pui8ExpectedResponse[0] = 0x04;
   2b52c:	2304      	movs	r3, #4
   2b52e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    pui8ExpectedResponse[1] = psPatch->ui32Type;
   2b532:	683b      	ldr	r3, [r7, #0]
   2b534:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    pui8ExpectedResponse[2] = 0xF1;
   2b538:	23f1      	movs	r3, #241	; 0xf1
   2b53a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    pui8ExpectedResponse[3] = 0x01;
   2b53e:	2301      	movs	r3, #1
   2b540:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    pui8ExpectedResponse[4] = 0x00;
   2b544:	2300      	movs	r3, #0
   2b546:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    if (!buffer_compare(psPatchBuffer.words, pui8ExpectedResponse, 5))
   2b54a:	2205      	movs	r2, #5
   2b54c:	a90a      	add	r1, sp, #40	; 0x28
   2b54e:	4668      	mov	r0, sp
   2b550:	f7ff faac 	bl	2aaac <buffer_compare>
   2b554:	2800      	cmp	r0, #0
   2b556:	f000 80cd 	beq.w	2b6f4 <am_hal_ble_patch_apply+0x278>
    uint32_t ui32RemainingBytes = psPatch->ui32Length;
   2b55a:	f8d7 9004 	ldr.w	r9, [r7, #4]
    while (ui32RemainingBytes)
   2b55e:	e02e      	b.n	2b5be <am_hal_ble_patch_apply+0x142>
        memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
   2b560:	2300      	movs	r3, #0
   2b562:	9305      	str	r3, [sp, #20]
   2b564:	9306      	str	r3, [sp, #24]
   2b566:	9307      	str	r3, [sp, #28]
   2b568:	9308      	str	r3, [sp, #32]
   2b56a:	9309      	str	r3, [sp, #36]	; 0x24
        sTransfer.ui8Command = AM_HAL_BLE_READ;
   2b56c:	2302      	movs	r3, #2
   2b56e:	f88d 301a 	strb.w	r3, [sp, #26]
        sTransfer.pui32Data = psPatchBuffer.words;
   2b572:	f8cd d010 	str.w	sp, [sp, #16]
        sTransfer.ui16Length = 5;
   2b576:	2305      	movs	r3, #5
   2b578:	f8ad 3018 	strh.w	r3, [sp, #24]
        ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   2b57c:	a904      	add	r1, sp, #16
   2b57e:	4630      	mov	r0, r6
   2b580:	f7ff fdc2 	bl	2b108 <am_hal_ble_blocking_transfer>
        if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   2b584:	2800      	cmp	r0, #0
   2b586:	f040 80bb 	bne.w	2b700 <am_hal_ble_patch_apply+0x284>
        pui8ExpectedResponse[0] = 0x04;
   2b58a:	2304      	movs	r3, #4
   2b58c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        pui8ExpectedResponse[1] = psPatch->ui32Type;
   2b590:	683b      	ldr	r3, [r7, #0]
   2b592:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
        pui8ExpectedResponse[2] = 0xF2;
   2b596:	23f2      	movs	r3, #242	; 0xf2
   2b598:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        pui8ExpectedResponse[3] = 0x01;
   2b59c:	2301      	movs	r3, #1
   2b59e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        pui8ExpectedResponse[4] = 0x00;
   2b5a2:	2300      	movs	r3, #0
   2b5a4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        if (!buffer_compare(psPatchBuffer.words, pui8ExpectedResponse, 5))
   2b5a8:	2205      	movs	r2, #5
   2b5aa:	a90a      	add	r1, sp, #40	; 0x28
   2b5ac:	4668      	mov	r0, sp
   2b5ae:	f7ff fa7d 	bl	2aaac <buffer_compare>
   2b5b2:	2800      	cmp	r0, #0
   2b5b4:	f000 80a6 	beq.w	2b704 <am_hal_ble_patch_apply+0x288>
        ui32RemainingBytes -= ui32TransferSize;
   2b5b8:	eba9 0908 	sub.w	r9, r9, r8
        ui32Index += ui32TransferSize;
   2b5bc:	4444      	add	r4, r8
    while (ui32RemainingBytes)
   2b5be:	f1b9 0f00 	cmp.w	r9, #0
   2b5c2:	d03a      	beq.n	2b63a <am_hal_ble_patch_apply+0x1be>
        uint32_t ui32TransferSize = (ui32RemainingBytes > MAX_PATCH_PACKET_LEN ?
   2b5c4:	46c8      	mov	r8, r9
   2b5c6:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
   2b5ca:	bf28      	it	cs
   2b5cc:	f04f 0880 	movcs.w	r8, #128	; 0x80
        memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
   2b5d0:	2300      	movs	r3, #0
   2b5d2:	9305      	str	r3, [sp, #20]
   2b5d4:	9306      	str	r3, [sp, #24]
   2b5d6:	9307      	str	r3, [sp, #28]
   2b5d8:	9308      	str	r3, [sp, #32]
   2b5da:	9309      	str	r3, [sp, #36]	; 0x24
        sTransfer.ui8Command = AM_HAL_BLE_WRITE;
   2b5dc:	2201      	movs	r2, #1
   2b5de:	f88d 201a 	strb.w	r2, [sp, #26]
        sTransfer.pui32Data = g_psPatchBuffer.words;
   2b5e2:	484e      	ldr	r0, [pc, #312]	; (2b71c <am_hal_ble_patch_apply+0x2a0>)
   2b5e4:	9004      	str	r0, [sp, #16]
        sTransfer.ui16Length = ui32TransferSize + 4;
   2b5e6:	f108 0104 	add.w	r1, r8, #4
   2b5ea:	f8ad 1018 	strh.w	r1, [sp, #24]
        sTransfer.bContinue = false;
   2b5ee:	f88d 301c 	strb.w	r3, [sp, #28]
        g_psPatchBuffer.bytes[0] = 0x01;
   2b5f2:	7002      	strb	r2, [r0, #0]
        g_psPatchBuffer.bytes[1] = psPatch->ui32Type;
   2b5f4:	683b      	ldr	r3, [r7, #0]
   2b5f6:	7043      	strb	r3, [r0, #1]
        g_psPatchBuffer.bytes[2] = 0xF2;
   2b5f8:	23f2      	movs	r3, #242	; 0xf2
   2b5fa:	7083      	strb	r3, [r0, #2]
        g_psPatchBuffer.bytes[3] = ui32TransferSize;
   2b5fc:	f880 8003 	strb.w	r8, [r0, #3]
        memcpy(&g_psPatchBuffer.bytes[4], (uint8_t *)&(psPatch->pui32Data[ui32Index / 4]), ui32TransferSize);
   2b600:	68fb      	ldr	r3, [r7, #12]
   2b602:	f024 0103 	bic.w	r1, r4, #3
   2b606:	4642      	mov	r2, r8
   2b608:	4419      	add	r1, r3
   2b60a:	3004      	adds	r0, #4
   2b60c:	f7eb fa62 	bl	16ad4 <memcpy>
        ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   2b610:	a904      	add	r1, sp, #16
   2b612:	4630      	mov	r0, r6
   2b614:	f7ff fd78 	bl	2b108 <am_hal_ble_blocking_transfer>
        if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   2b618:	4605      	mov	r5, r0
   2b61a:	2800      	cmp	r0, #0
   2b61c:	d16c      	bne.n	2b6f8 <am_hal_ble_patch_apply+0x27c>
        WHILE_TIMEOUT_MS( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000,
   2b61e:	4b3d      	ldr	r3, [pc, #244]	; (2b714 <am_hal_ble_patch_apply+0x298>)
   2b620:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2b624:	f013 0f80 	tst.w	r3, #128	; 0x80
   2b628:	d19a      	bne.n	2b560 <am_hal_ble_patch_apply+0xe4>
   2b62a:	4b3b      	ldr	r3, [pc, #236]	; (2b718 <am_hal_ble_patch_apply+0x29c>)
   2b62c:	429d      	cmp	r5, r3
   2b62e:	d865      	bhi.n	2b6fc <am_hal_ble_patch_apply+0x280>
   2b630:	2010      	movs	r0, #16
   2b632:	f000 fd41 	bl	2c0b8 <am_hal_flash_delay>
   2b636:	3501      	adds	r5, #1
   2b638:	e7f1      	b.n	2b61e <am_hal_ble_patch_apply+0x1a2>
    psPatchBuffer.bytes[0] = 0x01;
   2b63a:	2301      	movs	r3, #1
   2b63c:	f88d 3000 	strb.w	r3, [sp]
    psPatchBuffer.bytes[1] = psPatch->ui32Type;
   2b640:	683b      	ldr	r3, [r7, #0]
   2b642:	f88d 3001 	strb.w	r3, [sp, #1]
    psPatchBuffer.bytes[2] = 0xF3;
   2b646:	23f3      	movs	r3, #243	; 0xf3
   2b648:	f88d 3002 	strb.w	r3, [sp, #2]
    psPatchBuffer.bytes[3] = 0x02;
   2b64c:	2302      	movs	r3, #2
   2b64e:	f88d 3003 	strb.w	r3, [sp, #3]
    psPatchBuffer.bytes[4] = (psPatch->ui32CRC & 0xFF);
   2b652:	68bb      	ldr	r3, [r7, #8]
   2b654:	f88d 3004 	strb.w	r3, [sp, #4]
    psPatchBuffer.bytes[5] = ((psPatch->ui32CRC >> 8) & 0xFF);
   2b658:	0a1b      	lsrs	r3, r3, #8
   2b65a:	f88d 3005 	strb.w	r3, [sp, #5]
    if (am_hal_ble_blocking_hci_write(pHandle, AM_HAL_BLE_RAW, psPatchBuffer.words, 6) !=
   2b65e:	2306      	movs	r3, #6
   2b660:	466a      	mov	r2, sp
   2b662:	2100      	movs	r1, #0
   2b664:	4630      	mov	r0, r6
   2b666:	f7ff fed9 	bl	2b41c <am_hal_ble_blocking_hci_write>
   2b66a:	4604      	mov	r4, r0
   2b66c:	2800      	cmp	r0, #0
   2b66e:	d14b      	bne.n	2b708 <am_hal_ble_patch_apply+0x28c>
    WHILE_TIMEOUT_MS( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000,
   2b670:	4b28      	ldr	r3, [pc, #160]	; (2b714 <am_hal_ble_patch_apply+0x298>)
   2b672:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2b676:	f013 0f80 	tst.w	r3, #128	; 0x80
   2b67a:	d107      	bne.n	2b68c <am_hal_ble_patch_apply+0x210>
   2b67c:	4b26      	ldr	r3, [pc, #152]	; (2b718 <am_hal_ble_patch_apply+0x29c>)
   2b67e:	429c      	cmp	r4, r3
   2b680:	d844      	bhi.n	2b70c <am_hal_ble_patch_apply+0x290>
   2b682:	2010      	movs	r0, #16
   2b684:	f000 fd18 	bl	2c0b8 <am_hal_flash_delay>
   2b688:	3401      	adds	r4, #1
   2b68a:	e7f1      	b.n	2b670 <am_hal_ble_patch_apply+0x1f4>
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
   2b68c:	2300      	movs	r3, #0
   2b68e:	9305      	str	r3, [sp, #20]
   2b690:	9306      	str	r3, [sp, #24]
   2b692:	9307      	str	r3, [sp, #28]
   2b694:	9308      	str	r3, [sp, #32]
   2b696:	9309      	str	r3, [sp, #36]	; 0x24
    sTransfer.ui8Command = AM_HAL_BLE_READ;
   2b698:	2302      	movs	r3, #2
   2b69a:	f88d 301a 	strb.w	r3, [sp, #26]
    sTransfer.pui32Data = psPatchBuffer.words;
   2b69e:	f8cd d010 	str.w	sp, [sp, #16]
    sTransfer.ui16Length = 5;
   2b6a2:	2305      	movs	r3, #5
   2b6a4:	f8ad 3018 	strh.w	r3, [sp, #24]
    ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   2b6a8:	a904      	add	r1, sp, #16
   2b6aa:	4630      	mov	r0, r6
   2b6ac:	f7ff fd2c 	bl	2b108 <am_hal_ble_blocking_transfer>
    if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   2b6b0:	4604      	mov	r4, r0
   2b6b2:	b9c8      	cbnz	r0, 2b6e8 <am_hal_ble_patch_apply+0x26c>
    pui8ExpectedResponse[0] = 0x04;
   2b6b4:	2304      	movs	r3, #4
   2b6b6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    pui8ExpectedResponse[1] = psPatch->ui32Type;
   2b6ba:	683b      	ldr	r3, [r7, #0]
   2b6bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    pui8ExpectedResponse[2] = 0xF3;
   2b6c0:	23f3      	movs	r3, #243	; 0xf3
   2b6c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    pui8ExpectedResponse[3] = 0x01;
   2b6c6:	2301      	movs	r3, #1
   2b6c8:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    pui8ExpectedResponse[4] = 0x00;
   2b6cc:	2300      	movs	r3, #0
   2b6ce:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    if (!buffer_compare(psPatchBuffer.words, pui8ExpectedResponse, 5))
   2b6d2:	2205      	movs	r2, #5
   2b6d4:	a90a      	add	r1, sp, #40	; 0x28
   2b6d6:	4668      	mov	r0, sp
   2b6d8:	f7ff f9e8 	bl	2aaac <buffer_compare>
   2b6dc:	b920      	cbnz	r0, 2b6e8 <am_hal_ble_patch_apply+0x26c>
        return AM_HAL_STATUS_FAIL;
   2b6de:	2401      	movs	r4, #1
   2b6e0:	e002      	b.n	2b6e8 <am_hal_ble_patch_apply+0x26c>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2b6e2:	2402      	movs	r4, #2
   2b6e4:	e000      	b.n	2b6e8 <am_hal_ble_patch_apply+0x26c>
   2b6e6:	2402      	movs	r4, #2
} // am_hal_ble_patch_apply()
   2b6e8:	4620      	mov	r0, r4
   2b6ea:	b013      	add	sp, #76	; 0x4c
   2b6ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000,
   2b6f0:	4c0b      	ldr	r4, [pc, #44]	; (2b720 <am_hal_ble_patch_apply+0x2a4>)
   2b6f2:	e7f9      	b.n	2b6e8 <am_hal_ble_patch_apply+0x26c>
        return AM_HAL_STATUS_FAIL;
   2b6f4:	2401      	movs	r4, #1
   2b6f6:	e7f7      	b.n	2b6e8 <am_hal_ble_patch_apply+0x26c>
            return ui32ErrorStatus;
   2b6f8:	4604      	mov	r4, r0
   2b6fa:	e7f5      	b.n	2b6e8 <am_hal_ble_patch_apply+0x26c>
        WHILE_TIMEOUT_MS( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000,
   2b6fc:	4c08      	ldr	r4, [pc, #32]	; (2b720 <am_hal_ble_patch_apply+0x2a4>)
   2b6fe:	e7f3      	b.n	2b6e8 <am_hal_ble_patch_apply+0x26c>
            return ui32ErrorStatus;
   2b700:	4604      	mov	r4, r0
   2b702:	e7f1      	b.n	2b6e8 <am_hal_ble_patch_apply+0x26c>
            return AM_HAL_STATUS_FAIL;
   2b704:	2401      	movs	r4, #1
   2b706:	e7ef      	b.n	2b6e8 <am_hal_ble_patch_apply+0x26c>
        return AM_HAL_STATUS_FAIL;
   2b708:	2401      	movs	r4, #1
   2b70a:	e7ed      	b.n	2b6e8 <am_hal_ble_patch_apply+0x26c>
    WHILE_TIMEOUT_MS( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000,
   2b70c:	4c04      	ldr	r4, [pc, #16]	; (2b720 <am_hal_ble_patch_apply+0x2a4>)
   2b70e:	e7eb      	b.n	2b6e8 <am_hal_ble_patch_apply+0x26c>
   2b710:	01775230 	.word	0x01775230
   2b714:	5000c000 	.word	0x5000c000
   2b718:	000f423f 	.word	0x000f423f
   2b71c:	10005030 	.word	0x10005030
   2b720:	08000004 	.word	0x08000004

0002b724 <am_hal_ble_default_patch_apply>:
{
   2b724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b728:	4607      	mov	r7, r0
    if (APOLLO3_A0 || APOLLO3_A1)
   2b72a:	4b16      	ldr	r3, [pc, #88]	; (2b784 <am_hal_ble_default_patch_apply+0x60>)
   2b72c:	68db      	ldr	r3, [r3, #12]
   2b72e:	b2db      	uxtb	r3, r3
   2b730:	2b11      	cmp	r3, #17
   2b732:	d00a      	beq.n	2b74a <am_hal_ble_default_patch_apply+0x26>
   2b734:	4b13      	ldr	r3, [pc, #76]	; (2b784 <am_hal_ble_default_patch_apply+0x60>)
   2b736:	68db      	ldr	r3, [r3, #12]
   2b738:	b2db      	uxtb	r3, r3
   2b73a:	2b12      	cmp	r3, #18
   2b73c:	d005      	beq.n	2b74a <am_hal_ble_default_patch_apply+0x26>
        ui32NumPatches = am_hal_ble_num_default_patches_b0;
   2b73e:	4b12      	ldr	r3, [pc, #72]	; (2b788 <am_hal_ble_default_patch_apply+0x64>)
   2b740:	f8d3 8000 	ldr.w	r8, [r3]
        psDefaultPatches = am_hal_ble_default_patches_b0;
   2b744:	4b11      	ldr	r3, [pc, #68]	; (2b78c <am_hal_ble_default_patch_apply+0x68>)
   2b746:	681e      	ldr	r6, [r3, #0]
   2b748:	e004      	b.n	2b754 <am_hal_ble_default_patch_apply+0x30>
        ui32NumPatches = am_hal_ble_num_default_patches;
   2b74a:	4b11      	ldr	r3, [pc, #68]	; (2b790 <am_hal_ble_default_patch_apply+0x6c>)
   2b74c:	f8d3 8000 	ldr.w	r8, [r3]
        psDefaultPatches = am_hal_ble_default_patches;
   2b750:	4b10      	ldr	r3, [pc, #64]	; (2b794 <am_hal_ble_default_patch_apply+0x70>)
   2b752:	681e      	ldr	r6, [r3, #0]
    for ( i = 0; i < ui32NumPatches; i++ )
   2b754:	2400      	movs	r4, #0
   2b756:	4544      	cmp	r4, r8
   2b758:	d20f      	bcs.n	2b77a <am_hal_ble_default_patch_apply+0x56>
        ui16Crc = am_hal_ble_crc_nz((uint8_t*)(psDefaultPatches[i]->pui32Data), psDefaultPatches[i]->ui32Length);
   2b75a:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
   2b75e:	6869      	ldr	r1, [r5, #4]
   2b760:	68e8      	ldr	r0, [r5, #12]
   2b762:	f7ff f9b5 	bl	2aad0 <am_hal_ble_crc_nz>
        psDefaultPatches[i]->ui32CRC = ui16Crc;
   2b766:	60a8      	str	r0, [r5, #8]
        ui32Status = am_hal_ble_patch_apply(pHandle, psDefaultPatches[i]);
   2b768:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   2b76c:	4638      	mov	r0, r7
   2b76e:	f7ff fe85 	bl	2b47c <am_hal_ble_patch_apply>
        if (ui32Status != AM_HAL_STATUS_SUCCESS)
   2b772:	4603      	mov	r3, r0
   2b774:	b910      	cbnz	r0, 2b77c <am_hal_ble_default_patch_apply+0x58>
    for ( i = 0; i < ui32NumPatches; i++ )
   2b776:	3401      	adds	r4, #1
   2b778:	e7ed      	b.n	2b756 <am_hal_ble_default_patch_apply+0x32>
    return AM_HAL_STATUS_SUCCESS;
   2b77a:	2300      	movs	r3, #0
} // am_hal_ble_default_patch_apply()
   2b77c:	4618      	mov	r0, r3
   2b77e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b782:	bf00      	nop
   2b784:	40020000 	.word	0x40020000
   2b788:	0003373c 	.word	0x0003373c
   2b78c:	10001a7c 	.word	0x10001a7c
   2b790:	00033018 	.word	0x00033018
   2b794:	100006c0 	.word	0x100006c0

0002b798 <am_hal_ble_patch_copy_end_apply>:
{
   2b798:	b570      	push	{r4, r5, r6, lr}
   2b79a:	b092      	sub	sp, #72	; 0x48
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2b79c:	2800      	cmp	r0, #0
   2b79e:	d060      	beq.n	2b862 <am_hal_ble_patch_copy_end_apply+0xca>
   2b7a0:	4606      	mov	r6, r0
   2b7a2:	6803      	ldr	r3, [r0, #0]
   2b7a4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2b7a8:	4a32      	ldr	r2, [pc, #200]	; (2b874 <am_hal_ble_patch_copy_end_apply+0xdc>)
   2b7aa:	4293      	cmp	r3, r2
   2b7ac:	d15b      	bne.n	2b866 <am_hal_ble_patch_copy_end_apply+0xce>
    psPatchBuffer.bytes[0] = 0x01;
   2b7ae:	2301      	movs	r3, #1
   2b7b0:	f88d 3000 	strb.w	r3, [sp]
    psPatchBuffer.bytes[1] = 0xEE;
   2b7b4:	23ee      	movs	r3, #238	; 0xee
   2b7b6:	f88d 3001 	strb.w	r3, [sp, #1]
    psPatchBuffer.bytes[2] = 0xF1;
   2b7ba:	23f1      	movs	r3, #241	; 0xf1
   2b7bc:	f88d 3002 	strb.w	r3, [sp, #2]
    psPatchBuffer.bytes[3] = 0x02;
   2b7c0:	2302      	movs	r3, #2
   2b7c2:	f88d 3003 	strb.w	r3, [sp, #3]
    psPatchBuffer.bytes[4] = 0x00;
   2b7c6:	2400      	movs	r4, #0
   2b7c8:	f88d 4004 	strb.w	r4, [sp, #4]
    psPatchBuffer.bytes[5] = 0x00;
   2b7cc:	f88d 4005 	strb.w	r4, [sp, #5]
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_TRIALS; ui32Trial++)
   2b7d0:	f241 3387 	movw	r3, #4999	; 0x1387
   2b7d4:	429c      	cmp	r4, r3
   2b7d6:	d809      	bhi.n	2b7ec <am_hal_ble_patch_copy_end_apply+0x54>
        ui32ErrorStatus = am_hal_ble_blocking_hci_write(pHandle,
   2b7d8:	2306      	movs	r3, #6
   2b7da:	466a      	mov	r2, sp
   2b7dc:	2100      	movs	r1, #0
   2b7de:	4630      	mov	r0, r6
   2b7e0:	f7ff fe1c 	bl	2b41c <am_hal_ble_blocking_hci_write>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
   2b7e4:	4605      	mov	r5, r0
   2b7e6:	b108      	cbz	r0, 2b7ec <am_hal_ble_patch_copy_end_apply+0x54>
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_TRIALS; ui32Trial++)
   2b7e8:	3401      	adds	r4, #1
   2b7ea:	e7f1      	b.n	2b7d0 <am_hal_ble_patch_copy_end_apply+0x38>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
   2b7ec:	2d00      	cmp	r5, #0
   2b7ee:	d13b      	bne.n	2b868 <am_hal_ble_patch_copy_end_apply+0xd0>
    WHILE_TIMEOUT_MS( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000, AM_HAL_BLE_NO_HCI_RESPONSE);
   2b7f0:	4b21      	ldr	r3, [pc, #132]	; (2b878 <am_hal_ble_patch_copy_end_apply+0xe0>)
   2b7f2:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2b7f6:	f013 0f80 	tst.w	r3, #128	; 0x80
   2b7fa:	d107      	bne.n	2b80c <am_hal_ble_patch_copy_end_apply+0x74>
   2b7fc:	4b1f      	ldr	r3, [pc, #124]	; (2b87c <am_hal_ble_patch_copy_end_apply+0xe4>)
   2b7fe:	429d      	cmp	r5, r3
   2b800:	d835      	bhi.n	2b86e <am_hal_ble_patch_copy_end_apply+0xd6>
   2b802:	2010      	movs	r0, #16
   2b804:	f000 fc58 	bl	2c0b8 <am_hal_flash_delay>
   2b808:	3501      	adds	r5, #1
   2b80a:	e7f1      	b.n	2b7f0 <am_hal_ble_patch_copy_end_apply+0x58>
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
   2b80c:	2300      	movs	r3, #0
   2b80e:	9305      	str	r3, [sp, #20]
   2b810:	9306      	str	r3, [sp, #24]
   2b812:	9307      	str	r3, [sp, #28]
   2b814:	9308      	str	r3, [sp, #32]
   2b816:	9309      	str	r3, [sp, #36]	; 0x24
    sTransfer.ui8Command = AM_HAL_BLE_READ;
   2b818:	2302      	movs	r3, #2
   2b81a:	f88d 301a 	strb.w	r3, [sp, #26]
    sTransfer.pui32Data = psPatchBuffer.words;
   2b81e:	f8cd d010 	str.w	sp, [sp, #16]
    sTransfer.ui16Length = 5;
   2b822:	2305      	movs	r3, #5
   2b824:	f8ad 3018 	strh.w	r3, [sp, #24]
    ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   2b828:	a904      	add	r1, sp, #16
   2b82a:	4630      	mov	r0, r6
   2b82c:	f7ff fc6c 	bl	2b108 <am_hal_ble_blocking_transfer>
    if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   2b830:	4605      	mov	r5, r0
   2b832:	b9c8      	cbnz	r0, 2b868 <am_hal_ble_patch_copy_end_apply+0xd0>
    pui8ExpectedResponse[0] = 0x04;
   2b834:	2304      	movs	r3, #4
   2b836:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    pui8ExpectedResponse[1] = 0xEE;
   2b83a:	23ee      	movs	r3, #238	; 0xee
   2b83c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    pui8ExpectedResponse[2] = 0xF1;
   2b840:	23f1      	movs	r3, #241	; 0xf1
   2b842:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    pui8ExpectedResponse[3] = 0x01;
   2b846:	2301      	movs	r3, #1
   2b848:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    pui8ExpectedResponse[4] = 0x00;
   2b84c:	2300      	movs	r3, #0
   2b84e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    if (!buffer_compare(psPatchBuffer.words, pui8ExpectedResponse, 5))
   2b852:	2205      	movs	r2, #5
   2b854:	a90a      	add	r1, sp, #40	; 0x28
   2b856:	4668      	mov	r0, sp
   2b858:	f7ff f928 	bl	2aaac <buffer_compare>
   2b85c:	b920      	cbnz	r0, 2b868 <am_hal_ble_patch_copy_end_apply+0xd0>
        return AM_HAL_STATUS_FAIL;
   2b85e:	2501      	movs	r5, #1
   2b860:	e002      	b.n	2b868 <am_hal_ble_patch_copy_end_apply+0xd0>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2b862:	2502      	movs	r5, #2
   2b864:	e000      	b.n	2b868 <am_hal_ble_patch_copy_end_apply+0xd0>
   2b866:	2502      	movs	r5, #2
} // am_hal_ble_patch_copy_end_apply()
   2b868:	4628      	mov	r0, r5
   2b86a:	b012      	add	sp, #72	; 0x48
   2b86c:	bd70      	pop	{r4, r5, r6, pc}
    WHILE_TIMEOUT_MS( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000, AM_HAL_BLE_NO_HCI_RESPONSE);
   2b86e:	4d04      	ldr	r5, [pc, #16]	; (2b880 <am_hal_ble_patch_copy_end_apply+0xe8>)
   2b870:	e7fa      	b.n	2b868 <am_hal_ble_patch_copy_end_apply+0xd0>
   2b872:	bf00      	nop
   2b874:	01775230 	.word	0x01775230
   2b878:	5000c000 	.word	0x5000c000
   2b87c:	000f423f 	.word	0x000f423f
   2b880:	08000004 	.word	0x08000004

0002b884 <am_hal_ble_default_copy_patch_apply>:
{
   2b884:	b570      	push	{r4, r5, r6, lr}
   2b886:	4604      	mov	r4, r0
    psCopyPatch = am_hal_ble_default_copy_patches;
   2b888:	4b08      	ldr	r3, [pc, #32]	; (2b8ac <am_hal_ble_default_copy_patch_apply+0x28>)
   2b88a:	681e      	ldr	r6, [r3, #0]
    ui16Crc = am_hal_ble_crc_nz((uint8_t*)(psCopyPatch[0]->pui32Data), psCopyPatch[0]->ui32Length);
   2b88c:	6835      	ldr	r5, [r6, #0]
   2b88e:	6869      	ldr	r1, [r5, #4]
   2b890:	68e8      	ldr	r0, [r5, #12]
   2b892:	f7ff f91d 	bl	2aad0 <am_hal_ble_crc_nz>
    psCopyPatch[0]->ui32CRC = ui16Crc;
   2b896:	60a8      	str	r0, [r5, #8]
    ui32Status = am_hal_ble_patch_apply(pHandle, psCopyPatch[0]);
   2b898:	6831      	ldr	r1, [r6, #0]
   2b89a:	4620      	mov	r0, r4
   2b89c:	f7ff fdee 	bl	2b47c <am_hal_ble_patch_apply>
    if (ui32Status != AM_HAL_STATUS_SUCCESS)
   2b8a0:	b100      	cbz	r0, 2b8a4 <am_hal_ble_default_copy_patch_apply+0x20>
}
   2b8a2:	bd70      	pop	{r4, r5, r6, pc}
    ui32Status = am_hal_ble_patch_copy_end_apply(pHandle);
   2b8a4:	4620      	mov	r0, r4
   2b8a6:	f7ff ff77 	bl	2b798 <am_hal_ble_patch_copy_end_apply>
    if ( ui32Status != AM_HAL_STATUS_SUCCESS )
   2b8aa:	e7fa      	b.n	2b8a2 <am_hal_ble_default_copy_patch_apply+0x1e>
   2b8ac:	100006b0 	.word	0x100006b0

0002b8b0 <am_hal_ble_blocking_hci_read>:
{
   2b8b0:	b570      	push	{r4, r5, r6, lr}
   2b8b2:	b088      	sub	sp, #32
   2b8b4:	4614      	mov	r4, r2
    am_hal_ble_transfer_t HciRead =
   2b8b6:	ab07      	add	r3, sp, #28
   2b8b8:	9301      	str	r3, [sp, #4]
   2b8ba:	4b26      	ldr	r3, [pc, #152]	; (2b954 <am_hal_ble_blocking_hci_read+0xa4>)
   2b8bc:	681b      	ldr	r3, [r3, #0]
   2b8be:	f8ad 3008 	strh.w	r3, [sp, #8]
   2b8c2:	0c1b      	lsrs	r3, r3, #16
   2b8c4:	f88d 300a 	strb.w	r3, [sp, #10]
   2b8c8:	2300      	movs	r3, #0
   2b8ca:	f88d 300b 	strb.w	r3, [sp, #11]
   2b8ce:	2202      	movs	r2, #2
   2b8d0:	f8ad 200c 	strh.w	r2, [sp, #12]
   2b8d4:	f88d 200e 	strb.w	r2, [sp, #14]
   2b8d8:	f88d 300f 	strb.w	r3, [sp, #15]
   2b8dc:	f88d 3010 	strb.w	r3, [sp, #16]
   2b8e0:	9305      	str	r3, [sp, #20]
   2b8e2:	9306      	str	r3, [sp, #24]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2b8e4:	b360      	cbz	r0, 2b940 <am_hal_ble_blocking_hci_read+0x90>
   2b8e6:	460d      	mov	r5, r1
   2b8e8:	4606      	mov	r6, r0
   2b8ea:	6803      	ldr	r3, [r0, #0]
   2b8ec:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2b8f0:	4a19      	ldr	r2, [pc, #100]	; (2b958 <am_hal_ble_blocking_hci_read+0xa8>)
   2b8f2:	4293      	cmp	r3, r2
   2b8f4:	d126      	bne.n	2b944 <am_hal_ble_blocking_hci_read+0x94>
    if ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ )
   2b8f6:	4b19      	ldr	r3, [pc, #100]	; (2b95c <am_hal_ble_blocking_hci_read+0xac>)
   2b8f8:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2b8fc:	f013 0f80 	tst.w	r3, #128	; 0x80
   2b900:	d104      	bne.n	2b90c <am_hal_ble_blocking_hci_read+0x5c>
        ui32NumBytes = 0;
   2b902:	2300      	movs	r3, #0
    if (pui32BytesReceived)
   2b904:	b31c      	cbz	r4, 2b94e <am_hal_ble_blocking_hci_read+0x9e>
        *pui32BytesReceived = ui32NumBytes;
   2b906:	6023      	str	r3, [r4, #0]
    return AM_HAL_STATUS_SUCCESS;
   2b908:	2000      	movs	r0, #0
   2b90a:	e01c      	b.n	2b946 <am_hal_ble_blocking_hci_read+0x96>
        ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &HciRead);
   2b90c:	a901      	add	r1, sp, #4
   2b90e:	f7ff fbfb 	bl	2b108 <am_hal_ble_blocking_transfer>
        if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
   2b912:	b9c0      	cbnz	r0, 2b946 <am_hal_ble_blocking_hci_read+0x96>
        HciRead.pui32Data = pui32Data;
   2b914:	9501      	str	r5, [sp, #4]
        HciRead.ui16Length = (sLengthBytes.bytes[0] +
   2b916:	f89d 301c 	ldrb.w	r3, [sp, #28]
                              (sLengthBytes.bytes[1] << 8));
   2b91a:	f89d 201d 	ldrb.w	r2, [sp, #29]
        HciRead.ui16Length = (sLengthBytes.bytes[0] +
   2b91e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   2b922:	b29b      	uxth	r3, r3
   2b924:	f8ad 300c 	strh.w	r3, [sp, #12]
        if ( (HciRead.ui16Length == 0) || (HciRead.ui16Length > 256) )
   2b928:	3b01      	subs	r3, #1
   2b92a:	b29b      	uxth	r3, r3
   2b92c:	2bff      	cmp	r3, #255	; 0xff
   2b92e:	d80c      	bhi.n	2b94a <am_hal_ble_blocking_hci_read+0x9a>
        ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &HciRead);
   2b930:	a901      	add	r1, sp, #4
   2b932:	4630      	mov	r0, r6
   2b934:	f7ff fbe8 	bl	2b108 <am_hal_ble_blocking_transfer>
        if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
   2b938:	b928      	cbnz	r0, 2b946 <am_hal_ble_blocking_hci_read+0x96>
        ui32NumBytes =  HciRead.ui16Length;
   2b93a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2b93e:	e7e1      	b.n	2b904 <am_hal_ble_blocking_hci_read+0x54>
        return 0;
   2b940:	2000      	movs	r0, #0
   2b942:	e000      	b.n	2b946 <am_hal_ble_blocking_hci_read+0x96>
   2b944:	2000      	movs	r0, #0
} // am_hal_ble_blocking_hci_read()
   2b946:	b008      	add	sp, #32
   2b948:	bd70      	pop	{r4, r5, r6, pc}
            return AM_HAL_STATUS_OUT_OF_RANGE;
   2b94a:	2005      	movs	r0, #5
   2b94c:	e7fb      	b.n	2b946 <am_hal_ble_blocking_hci_read+0x96>
    return AM_HAL_STATUS_SUCCESS;
   2b94e:	2000      	movs	r0, #0
   2b950:	e7f9      	b.n	2b946 <am_hal_ble_blocking_hci_read+0x96>
   2b952:	bf00      	nop
   2b954:	000300ec 	.word	0x000300ec
   2b958:	01775230 	.word	0x01775230
   2b95c:	5000c000 	.word	0x5000c000

0002b960 <am_hal_ble_int_service>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2b960:	2800      	cmp	r0, #0
   2b962:	d06d      	beq.n	2ba40 <am_hal_ble_int_service+0xe0>
{
   2b964:	b510      	push	{r4, lr}
   2b966:	4604      	mov	r4, r0
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2b968:	6803      	ldr	r3, [r0, #0]
   2b96a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2b96e:	4a3b      	ldr	r2, [pc, #236]	; (2ba5c <am_hal_ble_int_service+0xfc>)
   2b970:	4293      	cmp	r3, r2
   2b972:	d167      	bne.n	2ba44 <am_hal_ble_int_service+0xe4>
    if ( ui32Status & BLEIF_INTSTAT_CMDCMP_Msk )
   2b974:	f011 0f01 	tst.w	r1, #1
   2b978:	d002      	beq.n	2b980 <am_hal_ble_int_service+0x20>
        pBle->bCmdComplete = true;
   2b97a:	2301      	movs	r3, #1
   2b97c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    if ( ui32Status & BLEIF_INTSTAT_DCMP_Msk )
   2b980:	f411 7f00 	tst.w	r1, #512	; 0x200
   2b984:	d002      	beq.n	2b98c <am_hal_ble_int_service+0x2c>
        pBle->bDmaComplete = true;
   2b986:	2301      	movs	r3, #1
   2b988:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
    if (APOLLO3_GE_B0)
   2b98c:	4b34      	ldr	r3, [pc, #208]	; (2ba60 <am_hal_ble_int_service+0x100>)
   2b98e:	68db      	ldr	r3, [r3, #12]
   2b990:	b2db      	uxtb	r3, r3
   2b992:	2b20      	cmp	r3, #32
   2b994:	d90b      	bls.n	2b9ae <am_hal_ble_int_service+0x4e>
        if ( (ui32Status & BLEIF_INTSTAT_BLECIRQN_Msk)  &&
   2b996:	f411 4f00 	tst.w	r1, #32768	; 0x8000
   2b99a:	d002      	beq.n	2b9a2 <am_hal_ble_int_service+0x42>
             (pBle->sCurrentTransfer.ui8Command == AM_HAL_BLE_READ) )
   2b99c:	7da3      	ldrb	r3, [r4, #22]
        if ( (ui32Status & BLEIF_INTSTAT_BLECIRQN_Msk)  &&
   2b99e:	2b02      	cmp	r3, #2
   2b9a0:	d037      	beq.n	2ba12 <am_hal_ble_int_service+0xb2>
        if ( (ui32Status & BLEIF_INTSTAT_BLECSSTATN_Msk ) &&
   2b9a2:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   2b9a6:	d002      	beq.n	2b9ae <am_hal_ble_int_service+0x4e>
             (pBle->sCurrentTransfer.ui8Command == AM_HAL_BLE_WRITE) )
   2b9a8:	7da3      	ldrb	r3, [r4, #22]
        if ( (ui32Status & BLEIF_INTSTAT_BLECSSTATN_Msk ) &&
   2b9aa:	2b01      	cmp	r3, #1
   2b9ac:	d035      	beq.n	2ba1a <am_hal_ble_int_service+0xba>
    if ( pBle->bCmdComplete && pBle->bDmaComplete &&
   2b9ae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   2b9b2:	2b00      	cmp	r3, #0
   2b9b4:	d048      	beq.n	2ba48 <am_hal_ble_int_service+0xe8>
   2b9b6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   2b9ba:	2b00      	cmp	r3, #0
   2b9bc:	d046      	beq.n	2ba4c <am_hal_ble_int_service+0xec>
         ((pBle->bFlowControlComplete) || (!APOLLO3_GE_B0) || SKIP_FALLING_EDGES) )
   2b9be:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   2b9c2:	b923      	cbnz	r3, 2b9ce <am_hal_ble_int_service+0x6e>
   2b9c4:	4b26      	ldr	r3, [pc, #152]	; (2ba60 <am_hal_ble_int_service+0x100>)
   2b9c6:	68db      	ldr	r3, [r3, #12]
   2b9c8:	b2db      	uxtb	r3, r3
   2b9ca:	2b20      	cmp	r3, #32
   2b9cc:	d840      	bhi.n	2ba50 <am_hal_ble_int_service+0xf0>
        pBle->bCmdComplete = false;
   2b9ce:	2300      	movs	r3, #0
   2b9d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        pBle->bDmaComplete = false;
   2b9d4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
        pBle->bFlowControlComplete = false;
   2b9d8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
        if ( BLEIFn(ui32Module)->FIFOPTR != 0x20002000 )
   2b9dc:	4b21      	ldr	r3, [pc, #132]	; (2ba64 <am_hal_ble_int_service+0x104>)
   2b9de:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   2b9e2:	f1b3 2f20 	cmp.w	r3, #536879104	; 0x20002000
   2b9e6:	d135      	bne.n	2ba54 <am_hal_ble_int_service+0xf4>
        if ((pBle->sCurrentTransfer.ui8Command == AM_HAL_BLE_WRITE) &&
   2b9e8:	7da3      	ldrb	r3, [r4, #22]
   2b9ea:	2b01      	cmp	r3, #1
   2b9ec:	d018      	beq.n	2ba20 <am_hal_ble_int_service+0xc0>
        if (pBle->sCurrentTransfer.ui8Command == AM_HAL_BLE_READ)
   2b9ee:	7da3      	ldrb	r3, [r4, #22]
   2b9f0:	2b02      	cmp	r3, #2
   2b9f2:	d021      	beq.n	2ba38 <am_hal_ble_int_service+0xd8>
        BLEIFn(ui32Module)->DMACFG = 0;
   2b9f4:	4b1b      	ldr	r3, [pc, #108]	; (2ba64 <am_hal_ble_int_service+0x104>)
   2b9f6:	2200      	movs	r2, #0
   2b9f8:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
        am_hal_ble_bus_release(pBle);
   2b9fc:	4620      	mov	r0, r4
   2b9fe:	f7ff f88d 	bl	2ab1c <am_hal_ble_bus_release>
        if ( pBle->sCurrentTransfer.pfnTransferCompleteCB )
   2ba02:	69e3      	ldr	r3, [r4, #28]
   2ba04:	b343      	cbz	r3, 2ba58 <am_hal_ble_int_service+0xf8>
            pfnCallback(pui8Data, ui32Length, pvContext);
   2ba06:	6a22      	ldr	r2, [r4, #32]
   2ba08:	8aa1      	ldrh	r1, [r4, #20]
   2ba0a:	68e0      	ldr	r0, [r4, #12]
   2ba0c:	4798      	blx	r3
    return AM_HAL_STATUS_SUCCESS;
   2ba0e:	2000      	movs	r0, #0
   2ba10:	e019      	b.n	2ba46 <am_hal_ble_int_service+0xe6>
            pBle->bFlowControlComplete = true;
   2ba12:	2301      	movs	r3, #1
   2ba14:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
   2ba18:	e7c3      	b.n	2b9a2 <am_hal_ble_int_service+0x42>
            pBle->bFlowControlComplete = true;
   2ba1a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
   2ba1e:	e7c6      	b.n	2b9ae <am_hal_ble_int_service+0x4e>
            (pBle->bPatchComplete == true))
   2ba20:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
        if ((pBle->sCurrentTransfer.ui8Command == AM_HAL_BLE_WRITE) &&
   2ba24:	2b00      	cmp	r3, #0
   2ba26:	d0e2      	beq.n	2b9ee <am_hal_ble_int_service+0x8e>
            pBle->bLastPacketWasTX = true;
   2ba28:	2301      	movs	r3, #1
   2ba2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
            am_hal_ble_wakeup_set(pBle, 0);
   2ba2e:	2100      	movs	r1, #0
   2ba30:	4620      	mov	r0, r4
   2ba32:	f7ff f933 	bl	2ac9c <am_hal_ble_wakeup_set>
   2ba36:	e7da      	b.n	2b9ee <am_hal_ble_int_service+0x8e>
            pBle->bLastPacketWasTX = false;
   2ba38:	2300      	movs	r3, #0
   2ba3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   2ba3e:	e7d9      	b.n	2b9f4 <am_hal_ble_int_service+0x94>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2ba40:	2002      	movs	r0, #2
} // am_hal_ble_int_service()
   2ba42:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2ba44:	2002      	movs	r0, #2
} // am_hal_ble_int_service()
   2ba46:	bd10      	pop	{r4, pc}
    return AM_HAL_STATUS_SUCCESS;
   2ba48:	2000      	movs	r0, #0
   2ba4a:	e7fc      	b.n	2ba46 <am_hal_ble_int_service+0xe6>
   2ba4c:	2000      	movs	r0, #0
   2ba4e:	e7fa      	b.n	2ba46 <am_hal_ble_int_service+0xe6>
   2ba50:	2000      	movs	r0, #0
   2ba52:	e7f8      	b.n	2ba46 <am_hal_ble_int_service+0xe6>
            return AM_HAL_BLE_FIFO_ERROR;
   2ba54:	4804      	ldr	r0, [pc, #16]	; (2ba68 <am_hal_ble_int_service+0x108>)
   2ba56:	e7f6      	b.n	2ba46 <am_hal_ble_int_service+0xe6>
    return AM_HAL_STATUS_SUCCESS;
   2ba58:	2000      	movs	r0, #0
   2ba5a:	e7f4      	b.n	2ba46 <am_hal_ble_int_service+0xe6>
   2ba5c:	01775230 	.word	0x01775230
   2ba60:	40020000 	.word	0x40020000
   2ba64:	5000c000 	.word	0x5000c000
   2ba68:	0800000a 	.word	0x0800000a

0002ba6c <am_hal_ble_int_enable>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2ba6c:	b1c8      	cbz	r0, 2baa2 <am_hal_ble_int_enable+0x36>
{
   2ba6e:	b510      	push	{r4, lr}
   2ba70:	b082      	sub	sp, #8
   2ba72:	460c      	mov	r4, r1
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2ba74:	6803      	ldr	r3, [r0, #0]
   2ba76:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2ba7a:	4a0b      	ldr	r2, [pc, #44]	; (2baa8 <am_hal_ble_int_enable+0x3c>)
   2ba7c:	4293      	cmp	r3, r2
   2ba7e:	d002      	beq.n	2ba86 <am_hal_ble_int_enable+0x1a>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2ba80:	2002      	movs	r0, #2
} // am_hal_ble_int_enable()
   2ba82:	b002      	add	sp, #8
   2ba84:	bd10      	pop	{r4, pc}
    AM_CRITICAL_BEGIN
   2ba86:	f000 fb59 	bl	2c13c <am_hal_interrupt_master_disable>
   2ba8a:	9001      	str	r0, [sp, #4]
    BLEIFn(ui32Module)->INTEN |= ui32InterruptMask;
   2ba8c:	4b07      	ldr	r3, [pc, #28]	; (2baac <am_hal_ble_int_enable+0x40>)
   2ba8e:	f8d3 1220 	ldr.w	r1, [r3, #544]	; 0x220
   2ba92:	4321      	orrs	r1, r4
   2ba94:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
    AM_CRITICAL_END
   2ba98:	9801      	ldr	r0, [sp, #4]
   2ba9a:	f000 fb53 	bl	2c144 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
   2ba9e:	2000      	movs	r0, #0
   2baa0:	e7ef      	b.n	2ba82 <am_hal_ble_int_enable+0x16>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2baa2:	2002      	movs	r0, #2
} // am_hal_ble_int_enable()
   2baa4:	4770      	bx	lr
   2baa6:	bf00      	nop
   2baa8:	01775230 	.word	0x01775230
   2baac:	5000c000 	.word	0x5000c000

0002bab0 <am_hal_ble_int_status>:
    if (bEnabledOnly)
   2bab0:	b131      	cbz	r1, 2bac0 <am_hal_ble_int_status+0x10>
        uint32_t ui32IntEn = BLEIFn(ui32Module)->INTEN;
   2bab2:	4b05      	ldr	r3, [pc, #20]	; (2bac8 <am_hal_ble_int_status+0x18>)
   2bab4:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
        return ( BLEIFn(ui32Module)->INTSTAT & ui32IntEn );
   2bab8:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
   2babc:	4010      	ands	r0, r2
   2babe:	4770      	bx	lr
        return BLEIFn(ui32Module)->INTSTAT;
   2bac0:	4b01      	ldr	r3, [pc, #4]	; (2bac8 <am_hal_ble_int_status+0x18>)
   2bac2:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
} // am_hal_ble_int_status()
   2bac6:	4770      	bx	lr
   2bac8:	5000c000 	.word	0x5000c000

0002bacc <am_hal_ble_int_clear>:
    if ( !AM_HAL_BLE_CHK_HANDLE(pHandle) )
   2bacc:	b150      	cbz	r0, 2bae4 <am_hal_ble_int_clear+0x18>
   2bace:	6803      	ldr	r3, [r0, #0]
   2bad0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2bad4:	4a05      	ldr	r2, [pc, #20]	; (2baec <am_hal_ble_int_clear+0x20>)
   2bad6:	4293      	cmp	r3, r2
   2bad8:	d106      	bne.n	2bae8 <am_hal_ble_int_clear+0x1c>
    BLEIFn(ui32Module)->INTCLR = ui32InterruptMask;
   2bada:	4b05      	ldr	r3, [pc, #20]	; (2baf0 <am_hal_ble_int_clear+0x24>)
   2badc:	f8c3 1228 	str.w	r1, [r3, #552]	; 0x228
    return AM_HAL_STATUS_SUCCESS;
   2bae0:	2000      	movs	r0, #0
   2bae2:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2bae4:	2002      	movs	r0, #2
   2bae6:	4770      	bx	lr
   2bae8:	2002      	movs	r0, #2
} // am_hal_ble_int_clear()
   2baea:	4770      	bx	lr
   2baec:	01775230 	.word	0x01775230
   2baf0:	5000c000 	.word	0x5000c000

0002baf4 <am_hal_ble_plf_reg_read>:
{
   2baf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2baf8:	b08c      	sub	sp, #48	; 0x30
   2bafa:	4605      	mov	r5, r0
   2bafc:	4616      	mov	r6, r2
    pui8Parameter[0] = ui32Address;
   2bafe:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
    pui8Parameter[1] = (ui32Address >> 8);
   2bb02:	0a0b      	lsrs	r3, r1, #8
   2bb04:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    pui8Parameter[2] = (ui32Address >> 16);
   2bb08:	0c0b      	lsrs	r3, r1, #16
   2bb0a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    pui8Parameter[3] = (ui32Address >> 24);
   2bb0e:	0e09      	lsrs	r1, r1, #24
   2bb10:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
    sResponse.words[0] = 0;
   2bb14:	2400      	movs	r4, #0
   2bb16:	9401      	str	r4, [sp, #4]
    sResponse.words[1] = 0;
   2bb18:	9402      	str	r4, [sp, #8]
    sResponse.words[2] = 0;
   2bb1a:	9403      	str	r4, [sp, #12]
    am_hal_ble_vs_command_build(sWriteCommand.words,
   2bb1c:	ab0b      	add	r3, sp, #44	; 0x2c
   2bb1e:	2208      	movs	r2, #8
   2bb20:	f64f 5102 	movw	r1, #64770	; 0xfd02
   2bb24:	a809      	add	r0, sp, #36	; 0x24
   2bb26:	f7ff fadb 	bl	2b0e0 <am_hal_ble_vs_command_build>
    ui32IntEnable = BLEIFn(ui32Module)->INTEN;
   2bb2a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 2bb98 <am_hal_ble_plf_reg_read+0xa4>
   2bb2e:	f8d8 7220 	ldr.w	r7, [r8, #544]	; 0x220
    BLEIFn(ui32Module)->INTEN = 0;
   2bb32:	f8c8 4220 	str.w	r4, [r8, #544]	; 0x220
    am_hal_ble_blocking_hci_write(pBLE,
   2bb36:	2308      	movs	r3, #8
   2bb38:	aa09      	add	r2, sp, #36	; 0x24
   2bb3a:	4621      	mov	r1, r4
   2bb3c:	4628      	mov	r0, r5
   2bb3e:	f7ff fc6d 	bl	2b41c <am_hal_ble_blocking_hci_write>
    BLEIFn(ui32Module)->BLEDBG_b.IOCLKON = 1;
   2bb42:	f8d8 3410 	ldr.w	r3, [r8, #1040]	; 0x410
   2bb46:	f043 0302 	orr.w	r3, r3, #2
   2bb4a:	f8c8 3410 	str.w	r3, [r8, #1040]	; 0x410
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 500,
   2bb4e:	4b12      	ldr	r3, [pc, #72]	; (2bb98 <am_hal_ble_plf_reg_read+0xa4>)
   2bb50:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2bb54:	f013 0f80 	tst.w	r3, #128	; 0x80
   2bb58:	d107      	bne.n	2bb6a <am_hal_ble_plf_reg_read+0x76>
   2bb5a:	4b10      	ldr	r3, [pc, #64]	; (2bb9c <am_hal_ble_plf_reg_read+0xa8>)
   2bb5c:	429c      	cmp	r4, r3
   2bb5e:	d818      	bhi.n	2bb92 <am_hal_ble_plf_reg_read+0x9e>
   2bb60:	2010      	movs	r0, #16
   2bb62:	f000 faa9 	bl	2c0b8 <am_hal_flash_delay>
   2bb66:	3401      	adds	r4, #1
   2bb68:	e7f1      	b.n	2bb4e <am_hal_ble_plf_reg_read+0x5a>
    am_hal_ble_blocking_hci_read(pBLE, sResponse.words, 0);
   2bb6a:	2200      	movs	r2, #0
   2bb6c:	a901      	add	r1, sp, #4
   2bb6e:	4628      	mov	r0, r5
   2bb70:	f7ff fe9e 	bl	2b8b0 <am_hal_ble_blocking_hci_read>
    *pui32Value = (((sResponse.words[1] & 0xFF000000) >> 24) |
   2bb74:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2bb78:	9a03      	ldr	r2, [sp, #12]
   2bb7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2bb7e:	6033      	str	r3, [r6, #0]
    BLEIFn(ui32Module)->INTCLR = ui32IntEnable;
   2bb80:	4b05      	ldr	r3, [pc, #20]	; (2bb98 <am_hal_ble_plf_reg_read+0xa4>)
   2bb82:	f8c3 7228 	str.w	r7, [r3, #552]	; 0x228
    BLEIFn(ui32Module)->INTEN = ui32IntEnable;
   2bb86:	f8c3 7220 	str.w	r7, [r3, #544]	; 0x220
    return AM_HAL_STATUS_SUCCESS;
   2bb8a:	2000      	movs	r0, #0
} // am_hal_ble_plf_reg_read()
   2bb8c:	b00c      	add	sp, #48	; 0x30
   2bb8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 500,
   2bb92:	4803      	ldr	r0, [pc, #12]	; (2bba0 <am_hal_ble_plf_reg_read+0xac>)
   2bb94:	e7fa      	b.n	2bb8c <am_hal_ble_plf_reg_read+0x98>
   2bb96:	bf00      	nop
   2bb98:	5000c000 	.word	0x5000c000
   2bb9c:	0007a11f 	.word	0x0007a11f
   2bba0:	08000004 	.word	0x08000004

0002bba4 <am_hal_ble_check_32k_clock>:
{
   2bba4:	b500      	push	{lr}
   2bba6:	b083      	sub	sp, #12
    uint32_t rc32k_clock = 0xFFFFFFFF;
   2bba8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2bbac:	9301      	str	r3, [sp, #4]
    if (APOLLO3_B0)
   2bbae:	4b0d      	ldr	r3, [pc, #52]	; (2bbe4 <am_hal_ble_check_32k_clock+0x40>)
   2bbb0:	68db      	ldr	r3, [r3, #12]
   2bbb2:	b2db      	uxtb	r3, r3
   2bbb4:	2b21      	cmp	r3, #33	; 0x21
   2bbb6:	d00d      	beq.n	2bbd4 <am_hal_ble_check_32k_clock+0x30>
        am_hal_ble_plf_reg_read(pBLE, AM_HAL_BLE_IP_RAM_32K_CLOCK_ADDR_A1, &rc32k_clock);
   2bbb8:	aa01      	add	r2, sp, #4
   2bbba:	490b      	ldr	r1, [pc, #44]	; (2bbe8 <am_hal_ble_check_32k_clock+0x44>)
   2bbbc:	f7ff ff9a 	bl	2baf4 <am_hal_ble_plf_reg_read>
    if ( (rc32k_clock > 0x8200) || (rc32k_clock < 0x7B00) )
   2bbc0:	9b01      	ldr	r3, [sp, #4]
   2bbc2:	f5a3 43f6 	sub.w	r3, r3, #31488	; 0x7b00
   2bbc6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   2bbca:	d908      	bls.n	2bbde <am_hal_ble_check_32k_clock+0x3a>
        return AM_HAL_STATUS_FAIL;
   2bbcc:	2001      	movs	r0, #1
} // am_hal_ble_check_32k_clock()
   2bbce:	b003      	add	sp, #12
   2bbd0:	f85d fb04 	ldr.w	pc, [sp], #4
        am_hal_ble_plf_reg_read(pBLE, AM_HAL_BLE_IP_RAM_32K_CLOCK_ADDR_B0, &rc32k_clock);
   2bbd4:	aa01      	add	r2, sp, #4
   2bbd6:	4905      	ldr	r1, [pc, #20]	; (2bbec <am_hal_ble_check_32k_clock+0x48>)
   2bbd8:	f7ff ff8c 	bl	2baf4 <am_hal_ble_plf_reg_read>
   2bbdc:	e7f0      	b.n	2bbc0 <am_hal_ble_check_32k_clock+0x1c>
        return AM_HAL_STATUS_SUCCESS;
   2bbde:	2000      	movs	r0, #0
   2bbe0:	e7f5      	b.n	2bbce <am_hal_ble_check_32k_clock+0x2a>
   2bbe2:	bf00      	nop
   2bbe4:	40020000 	.word	0x40020000
   2bbe8:	20006054 	.word	0x20006054
   2bbec:	20006858 	.word	0x20006858

0002bbf0 <am_hal_ble_plf_reg_write>:
{
   2bbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bbf2:	b08b      	sub	sp, #44	; 0x2c
   2bbf4:	4605      	mov	r5, r0
    pui8Parameter[0] = ui32Address;
   2bbf6:	f88d 1020 	strb.w	r1, [sp, #32]
    pui8Parameter[1] = (ui32Address >> 8);
   2bbfa:	0a0b      	lsrs	r3, r1, #8
   2bbfc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    pui8Parameter[2] = (ui32Address >> 16);
   2bc00:	0c0b      	lsrs	r3, r1, #16
   2bc02:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    pui8Parameter[3] = (ui32Address >> 24);
   2bc06:	0e09      	lsrs	r1, r1, #24
   2bc08:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
    pui8Parameter[4] = ui32Value;
   2bc0c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    pui8Parameter[5] = (ui32Value >> 8);
   2bc10:	0a13      	lsrs	r3, r2, #8
   2bc12:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    pui8Parameter[6] = (ui32Value >> 16);
   2bc16:	0c13      	lsrs	r3, r2, #16
   2bc18:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    pui8Parameter[7] = (ui32Value >> 24);
   2bc1c:	0e12      	lsrs	r2, r2, #24
   2bc1e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    am_hal_ble_vs_command_build(sWriteCommand.words,
   2bc22:	ab08      	add	r3, sp, #32
   2bc24:	220c      	movs	r2, #12
   2bc26:	f64f 5103 	movw	r1, #64771	; 0xfd03
   2bc2a:	a805      	add	r0, sp, #20
   2bc2c:	f7ff fa58 	bl	2b0e0 <am_hal_ble_vs_command_build>
    ui32IntEnable = BLEIFn(ui32Module)->INTEN;
   2bc30:	4e17      	ldr	r6, [pc, #92]	; (2bc90 <am_hal_ble_plf_reg_write+0xa0>)
   2bc32:	f8d6 7220 	ldr.w	r7, [r6, #544]	; 0x220
    BLEIFn(ui32Module)->INTEN = 0;
   2bc36:	2400      	movs	r4, #0
   2bc38:	f8c6 4220 	str.w	r4, [r6, #544]	; 0x220
    am_hal_ble_blocking_hci_write(pBLE,
   2bc3c:	230c      	movs	r3, #12
   2bc3e:	aa05      	add	r2, sp, #20
   2bc40:	4621      	mov	r1, r4
   2bc42:	4628      	mov	r0, r5
   2bc44:	f7ff fbea 	bl	2b41c <am_hal_ble_blocking_hci_write>
    BLEIFn(ui32Module)->BLEDBG_b.IOCLKON = 1;
   2bc48:	f8d6 3410 	ldr.w	r3, [r6, #1040]	; 0x410
   2bc4c:	f043 0302 	orr.w	r3, r3, #2
   2bc50:	f8c6 3410 	str.w	r3, [r6, #1040]	; 0x410
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 50,
   2bc54:	4b0e      	ldr	r3, [pc, #56]	; (2bc90 <am_hal_ble_plf_reg_write+0xa0>)
   2bc56:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2bc5a:	f013 0f80 	tst.w	r3, #128	; 0x80
   2bc5e:	d108      	bne.n	2bc72 <am_hal_ble_plf_reg_write+0x82>
   2bc60:	f24c 334f 	movw	r3, #49999	; 0xc34f
   2bc64:	429c      	cmp	r4, r3
   2bc66:	d811      	bhi.n	2bc8c <am_hal_ble_plf_reg_write+0x9c>
   2bc68:	2010      	movs	r0, #16
   2bc6a:	f000 fa25 	bl	2c0b8 <am_hal_flash_delay>
   2bc6e:	3401      	adds	r4, #1
   2bc70:	e7f0      	b.n	2bc54 <am_hal_ble_plf_reg_write+0x64>
    am_hal_ble_blocking_hci_read(pBLE, sResponse.words, 0);
   2bc72:	2200      	movs	r2, #0
   2bc74:	a901      	add	r1, sp, #4
   2bc76:	4628      	mov	r0, r5
   2bc78:	f7ff fe1a 	bl	2b8b0 <am_hal_ble_blocking_hci_read>
    BLEIFn(ui32Module)->INTCLR = ui32IntEnable;
   2bc7c:	4b04      	ldr	r3, [pc, #16]	; (2bc90 <am_hal_ble_plf_reg_write+0xa0>)
   2bc7e:	f8c3 7228 	str.w	r7, [r3, #552]	; 0x228
    BLEIFn(ui32Module)->INTEN = ui32IntEnable;
   2bc82:	f8c3 7220 	str.w	r7, [r3, #544]	; 0x220
    return AM_HAL_STATUS_SUCCESS;
   2bc86:	2000      	movs	r0, #0
} // am_hal_ble_plf_reg_write()
   2bc88:	b00b      	add	sp, #44	; 0x2c
   2bc8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 50,
   2bc8c:	4801      	ldr	r0, [pc, #4]	; (2bc94 <am_hal_ble_plf_reg_write+0xa4>)
   2bc8e:	e7fb      	b.n	2bc88 <am_hal_ble_plf_reg_write+0x98>
   2bc90:	5000c000 	.word	0x5000c000
   2bc94:	08000004 	.word	0x08000004

0002bc98 <am_hal_ble_transmitter_modex_set>:
// parameter default value is 0x34, increase to get larger frequency offset
//
//*****************************************************************************
uint32_t
am_hal_ble_transmitter_modex_set(void *pHandle, uint8_t ui8ModFrqOffset)
{
   2bc98:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bc9a:	b085      	sub	sp, #20
   2bc9c:	4604      	mov	r4, r0
    am_hal_ble_state_t *pBLE = pHandle;
    uint32_t RegValueMCGR, RegValueBACKCR, RegValueSTCR, RegValueDACSPICR, temp = 0;
   2bc9e:	2300      	movs	r3, #0
   2bca0:	9300      	str	r3, [sp, #0]

    ui8ModFrqOffset &= 0x7F;
   2bca2:	f001 057f 	and.w	r5, r1, #127	; 0x7f

    am_hal_ble_plf_reg_read(pBLE, 0x43000004, &RegValueMCGR);
   2bca6:	4e2a      	ldr	r6, [pc, #168]	; (2bd50 <am_hal_ble_transmitter_modex_set+0xb8>)
   2bca8:	aa03      	add	r2, sp, #12
   2bcaa:	4631      	mov	r1, r6
   2bcac:	f7ff ff22 	bl	2baf4 <am_hal_ble_plf_reg_read>

    //
    // Unlock the BLE registers.
    //
    am_hal_ble_plf_reg_write(pBLE, 0x43000004, 0xFFFFFFFF);
   2bcb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bcb4:	4631      	mov	r1, r6
   2bcb6:	4620      	mov	r0, r4
   2bcb8:	f7ff ff9a 	bl	2bbf0 <am_hal_ble_plf_reg_write>
    am_hal_ble_plf_reg_read(pBLE, 0x52000008, &temp);
   2bcbc:	4e25      	ldr	r6, [pc, #148]	; (2bd54 <am_hal_ble_transmitter_modex_set+0xbc>)
   2bcbe:	466a      	mov	r2, sp
   2bcc0:	4631      	mov	r1, r6
   2bcc2:	4620      	mov	r0, r4
   2bcc4:	f7ff ff16 	bl	2baf4 <am_hal_ble_plf_reg_read>
    temp |= 0x08;
   2bcc8:	9b00      	ldr	r3, [sp, #0]
   2bcca:	f043 0308 	orr.w	r3, r3, #8
   2bcce:	9300      	str	r3, [sp, #0]
    am_hal_ble_plf_reg_read(pBLE, 0x52000000, &RegValueSTCR);
   2bcd0:	aa01      	add	r2, sp, #4
   2bcd2:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   2bcd6:	4620      	mov	r0, r4
   2bcd8:	f7ff ff0c 	bl	2baf4 <am_hal_ble_plf_reg_read>
    RegValueSTCR |= (1 << 10);
   2bcdc:	9a01      	ldr	r2, [sp, #4]
   2bcde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   2bce2:	9201      	str	r2, [sp, #4]
    am_hal_ble_plf_reg_write(pBLE, 0x52000000, RegValueSTCR);
   2bce4:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   2bce8:	4620      	mov	r0, r4
   2bcea:	f7ff ff81 	bl	2bbf0 <am_hal_ble_plf_reg_write>

    am_hal_ble_plf_reg_read(pBLE, 0x45800070, &RegValueBACKCR);
   2bcee:	4f1a      	ldr	r7, [pc, #104]	; (2bd58 <am_hal_ble_transmitter_modex_set+0xc0>)
   2bcf0:	aa02      	add	r2, sp, #8
   2bcf2:	4639      	mov	r1, r7
   2bcf4:	4620      	mov	r0, r4
   2bcf6:	f7ff fefd 	bl	2baf4 <am_hal_ble_plf_reg_read>
    am_hal_ble_plf_reg_write(pBLE, 0x45800070, (RegValueBACKCR | 0x8));
   2bcfa:	9a02      	ldr	r2, [sp, #8]
   2bcfc:	f042 0208 	orr.w	r2, r2, #8
   2bd00:	4639      	mov	r1, r7
   2bd02:	4620      	mov	r0, r4
   2bd04:	f7ff ff74 	bl	2bbf0 <am_hal_ble_plf_reg_write>
    RegValueDACSPICR = (ui8ModFrqOffset << 1) | 0x1;
   2bd08:	006a      	lsls	r2, r5, #1
    am_hal_ble_plf_reg_write(pBLE, 0x52000014, RegValueDACSPICR);
   2bd0a:	f042 0201 	orr.w	r2, r2, #1
   2bd0e:	4913      	ldr	r1, [pc, #76]	; (2bd5c <am_hal_ble_transmitter_modex_set+0xc4>)
   2bd10:	4620      	mov	r0, r4
   2bd12:	f7ff ff6d 	bl	2bbf0 <am_hal_ble_plf_reg_write>

    am_hal_ble_plf_reg_write(pBLE, 0x52000008, temp);
   2bd16:	9a00      	ldr	r2, [sp, #0]
   2bd18:	4631      	mov	r1, r6
   2bd1a:	4620      	mov	r0, r4
   2bd1c:	f7ff ff68 	bl	2bbf0 <am_hal_ble_plf_reg_write>

    if (APOLLO3_B0)
   2bd20:	4b0f      	ldr	r3, [pc, #60]	; (2bd60 <am_hal_ble_transmitter_modex_set+0xc8>)
   2bd22:	68db      	ldr	r3, [r3, #12]
   2bd24:	b2db      	uxtb	r3, r3
   2bd26:	2b21      	cmp	r3, #33	; 0x21
   2bd28:	d00c      	beq.n	2bd44 <am_hal_ble_transmitter_modex_set+0xac>
    {
        am_hal_ble_plf_reg_write(pBLE, AM_HAL_BLE_IP_RAM_MODEX_TRIM_ADDR_B0, ui8ModFrqOffset);
    }
    else
    {
        am_hal_ble_plf_reg_write(pBLE, AM_HAL_BLE_IP_RAM_MODEX_TRIM_ADDR_A1, ui8ModFrqOffset);
   2bd2a:	462a      	mov	r2, r5
   2bd2c:	490d      	ldr	r1, [pc, #52]	; (2bd64 <am_hal_ble_transmitter_modex_set+0xcc>)
   2bd2e:	4620      	mov	r0, r4
   2bd30:	f7ff ff5e 	bl	2bbf0 <am_hal_ble_plf_reg_write>
    }
    am_hal_ble_plf_reg_write(pBLE, 0x43000004, RegValueMCGR);
   2bd34:	9a03      	ldr	r2, [sp, #12]
   2bd36:	4906      	ldr	r1, [pc, #24]	; (2bd50 <am_hal_ble_transmitter_modex_set+0xb8>)
   2bd38:	4620      	mov	r0, r4
   2bd3a:	f7ff ff59 	bl	2bbf0 <am_hal_ble_plf_reg_write>

    return AM_HAL_STATUS_SUCCESS;
} // am_hal_ble_transmitter_modex_set()
   2bd3e:	2000      	movs	r0, #0
   2bd40:	b005      	add	sp, #20
   2bd42:	bdf0      	pop	{r4, r5, r6, r7, pc}
        am_hal_ble_plf_reg_write(pBLE, AM_HAL_BLE_IP_RAM_MODEX_TRIM_ADDR_B0, ui8ModFrqOffset);
   2bd44:	462a      	mov	r2, r5
   2bd46:	4908      	ldr	r1, [pc, #32]	; (2bd68 <am_hal_ble_transmitter_modex_set+0xd0>)
   2bd48:	4620      	mov	r0, r4
   2bd4a:	f7ff ff51 	bl	2bbf0 <am_hal_ble_plf_reg_write>
   2bd4e:	e7f1      	b.n	2bd34 <am_hal_ble_transmitter_modex_set+0x9c>
   2bd50:	43000004 	.word	0x43000004
   2bd54:	52000008 	.word	0x52000008
   2bd58:	45800070 	.word	0x45800070
   2bd5c:	52000014 	.word	0x52000014
   2bd60:	40020000 	.word	0x40020000
   2bd64:	20006070 	.word	0x20006070
   2bd68:	20006874 	.word	0x20006874

0002bd6c <am_hal_ble_load_modex_trim_set>:
{
   2bd6c:	b510      	push	{r4, lr}
   2bd6e:	4604      	mov	r4, r0
    ui8TrimValue = am_hal_ble_read_trimdata_from_info1();
   2bd70:	f7fe ff62 	bl	2ac38 <am_hal_ble_read_trimdata_from_info1>
    if ( ui8TrimValue )
   2bd74:	b908      	cbnz	r0, 2bd7a <am_hal_ble_load_modex_trim_set+0xe>
        return AM_HAL_STATUS_FAIL;
   2bd76:	2001      	movs	r0, #1
} // am_hal_ble_load_modex_trim_set()
   2bd78:	bd10      	pop	{r4, pc}
   2bd7a:	4601      	mov	r1, r0
        am_hal_ble_transmitter_modex_set(pHandle, ui8TrimValue);
   2bd7c:	4620      	mov	r0, r4
   2bd7e:	f7ff ff8b 	bl	2bc98 <am_hal_ble_transmitter_modex_set>
        return AM_HAL_STATUS_SUCCESS;
   2bd82:	2000      	movs	r0, #0
   2bd84:	e7f8      	b.n	2bd78 <am_hal_ble_load_modex_trim_set+0xc>
	...

0002bd88 <am_hal_ble_patch_complete>:
{
   2bd88:	b570      	push	{r4, r5, r6, lr}
   2bd8a:	b08c      	sub	sp, #48	; 0x30
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2bd8c:	2800      	cmp	r0, #0
   2bd8e:	f000 80c6 	beq.w	2bf1e <am_hal_ble_patch_complete+0x196>
   2bd92:	4605      	mov	r5, r0
   2bd94:	6803      	ldr	r3, [r0, #0]
   2bd96:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2bd9a:	4a64      	ldr	r2, [pc, #400]	; (2bf2c <am_hal_ble_patch_complete+0x1a4>)
   2bd9c:	4293      	cmp	r3, r2
   2bd9e:	d003      	beq.n	2bda8 <am_hal_ble_patch_complete+0x20>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2bda0:	2402      	movs	r4, #2
} // am_hal_ble_patch_complete()
   2bda2:	4620      	mov	r0, r4
   2bda4:	b00c      	add	sp, #48	; 0x30
   2bda6:	bd70      	pop	{r4, r5, r6, pc}
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
   2bda8:	2400      	movs	r4, #0
   2bdaa:	9407      	str	r4, [sp, #28]
   2bdac:	9408      	str	r4, [sp, #32]
   2bdae:	9409      	str	r4, [sp, #36]	; 0x24
   2bdb0:	940a      	str	r4, [sp, #40]	; 0x28
   2bdb2:	940b      	str	r4, [sp, #44]	; 0x2c
    sTransfer.ui8Command = AM_HAL_BLE_WRITE;
   2bdb4:	2301      	movs	r3, #1
   2bdb6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    sTransfer.pui32Data = sTxBuffer.words;
   2bdba:	aa03      	add	r2, sp, #12
   2bdbc:	9206      	str	r2, [sp, #24]
    sTransfer.ui16Length = 6;
   2bdbe:	2206      	movs	r2, #6
   2bdc0:	f8ad 2020 	strh.w	r2, [sp, #32]
    sTxBuffer.bytes[0] = 0x01;
   2bdc4:	f88d 300c 	strb.w	r3, [sp, #12]
    sTxBuffer.bytes[1] = 0xEE;
   2bdc8:	23ee      	movs	r3, #238	; 0xee
   2bdca:	f88d 300d 	strb.w	r3, [sp, #13]
    sTxBuffer.bytes[2] = 0xF1;
   2bdce:	23f1      	movs	r3, #241	; 0xf1
   2bdd0:	f88d 300e 	strb.w	r3, [sp, #14]
    sTxBuffer.bytes[3] = 0x02;
   2bdd4:	2302      	movs	r3, #2
   2bdd6:	f88d 300f 	strb.w	r3, [sp, #15]
    sTxBuffer.bytes[4] = 0x00;
   2bdda:	f88d 4010 	strb.w	r4, [sp, #16]
    sTxBuffer.bytes[5] = 0x00;
   2bdde:	f88d 4011 	strb.w	r4, [sp, #17]
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_CMP_TRIALS; ui32Trial++)
   2bde2:	f241 3387 	movw	r3, #4999	; 0x1387
   2bde6:	429c      	cmp	r4, r3
   2bde8:	d806      	bhi.n	2bdf8 <am_hal_ble_patch_complete+0x70>
        ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   2bdea:	a906      	add	r1, sp, #24
   2bdec:	4628      	mov	r0, r5
   2bdee:	f7ff f98b 	bl	2b108 <am_hal_ble_blocking_transfer>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
   2bdf2:	b108      	cbz	r0, 2bdf8 <am_hal_ble_patch_complete+0x70>
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_CMP_TRIALS; ui32Trial++)
   2bdf4:	3401      	adds	r4, #1
   2bdf6:	e7f4      	b.n	2bde2 <am_hal_ble_patch_complete+0x5a>
   2bdf8:	2400      	movs	r4, #0
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 100,
   2bdfa:	4b4d      	ldr	r3, [pc, #308]	; (2bf30 <am_hal_ble_patch_complete+0x1a8>)
   2bdfc:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2be00:	f013 0f80 	tst.w	r3, #128	; 0x80
   2be04:	d108      	bne.n	2be18 <am_hal_ble_patch_complete+0x90>
   2be06:	4b4b      	ldr	r3, [pc, #300]	; (2bf34 <am_hal_ble_patch_complete+0x1ac>)
   2be08:	429c      	cmp	r4, r3
   2be0a:	f200 808a 	bhi.w	2bf22 <am_hal_ble_patch_complete+0x19a>
   2be0e:	2010      	movs	r0, #16
   2be10:	f000 f952 	bl	2c0b8 <am_hal_flash_delay>
   2be14:	3401      	adds	r4, #1
   2be16:	e7f0      	b.n	2bdfa <am_hal_ble_patch_complete+0x72>
    sTransfer.ui8Command = AM_HAL_BLE_READ;
   2be18:	2302      	movs	r3, #2
   2be1a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    sTransfer.pui32Data = sRxBuffer.words;
   2be1e:	f8cd d018 	str.w	sp, [sp, #24]
    sTransfer.ui16Length = 2;
   2be22:	f8ad 3020 	strh.w	r3, [sp, #32]
    ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   2be26:	a906      	add	r1, sp, #24
   2be28:	4628      	mov	r0, r5
   2be2a:	f7ff f96d 	bl	2b108 <am_hal_ble_blocking_transfer>
    if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   2be2e:	4604      	mov	r4, r0
   2be30:	2800      	cmp	r0, #0
   2be32:	d1b6      	bne.n	2bda2 <am_hal_ble_patch_complete+0x1a>
    if ( sRxBuffer.bytes[1] == 0xEE )
   2be34:	f89d 2001 	ldrb.w	r2, [sp, #1]
   2be38:	2aee      	cmp	r2, #238	; 0xee
   2be3a:	d010      	beq.n	2be5e <am_hal_ble_patch_complete+0xd6>
        sTransfer.ui16Length = (sRxBuffer.bytes[0] + (sRxBuffer.bytes[1] << 8));
   2be3c:	f89d 3000 	ldrb.w	r3, [sp]
   2be40:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   2be44:	f8ad 3020 	strh.w	r3, [sp, #32]
        ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   2be48:	a906      	add	r1, sp, #24
   2be4a:	4628      	mov	r0, r5
   2be4c:	f7ff f95c 	bl	2b108 <am_hal_ble_blocking_transfer>
        if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   2be50:	4604      	mov	r4, r0
   2be52:	2800      	cmp	r0, #0
   2be54:	d1a5      	bne.n	2bda2 <am_hal_ble_patch_complete+0x1a>
        pBLE->bPatchComplete = true;
   2be56:	2301      	movs	r3, #1
   2be58:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return AM_HAL_STATUS_SUCCESS;
   2be5c:	e7a1      	b.n	2bda2 <am_hal_ble_patch_complete+0x1a>
        sTransfer.ui16Length = 3;
   2be5e:	2303      	movs	r3, #3
   2be60:	f8ad 3020 	strh.w	r3, [sp, #32]
        ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   2be64:	a906      	add	r1, sp, #24
   2be66:	4628      	mov	r0, r5
   2be68:	f7ff f94e 	bl	2b108 <am_hal_ble_blocking_transfer>
        if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   2be6c:	4604      	mov	r4, r0
   2be6e:	2800      	cmp	r0, #0
   2be70:	d197      	bne.n	2bda2 <am_hal_ble_patch_complete+0x1a>
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
   2be72:	2300      	movs	r3, #0
   2be74:	9307      	str	r3, [sp, #28]
   2be76:	9308      	str	r3, [sp, #32]
   2be78:	9309      	str	r3, [sp, #36]	; 0x24
   2be7a:	930a      	str	r3, [sp, #40]	; 0x28
   2be7c:	930b      	str	r3, [sp, #44]	; 0x2c
    sTransfer.ui8Command = AM_HAL_BLE_WRITE;
   2be7e:	2301      	movs	r3, #1
   2be80:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    sTransfer.pui32Data = sTxBuffer.words;
   2be84:	aa03      	add	r2, sp, #12
   2be86:	9206      	str	r2, [sp, #24]
    sTransfer.ui16Length = 5;
   2be88:	2205      	movs	r2, #5
   2be8a:	f8ad 2020 	strh.w	r2, [sp, #32]
    sTxBuffer.bytes[0] = 0x01;
   2be8e:	f88d 300c 	strb.w	r3, [sp, #12]
    sTxBuffer.bytes[1] = 0x04;
   2be92:	2204      	movs	r2, #4
   2be94:	f88d 200d 	strb.w	r2, [sp, #13]
    sTxBuffer.bytes[2] = 0xFD;
   2be98:	22fd      	movs	r2, #253	; 0xfd
   2be9a:	f88d 200e 	strb.w	r2, [sp, #14]
    sTxBuffer.bytes[3] = 0x01;
   2be9e:	f88d 300f 	strb.w	r3, [sp, #15]
    sTxBuffer.bytes[4] = 0x01;
   2bea2:	f88d 3010 	strb.w	r3, [sp, #16]
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_CMP_TRIALS; ui32Trial++)
   2bea6:	4606      	mov	r6, r0
   2bea8:	f241 3387 	movw	r3, #4999	; 0x1387
   2beac:	429e      	cmp	r6, r3
   2beae:	d807      	bhi.n	2bec0 <am_hal_ble_patch_complete+0x138>
        ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   2beb0:	a906      	add	r1, sp, #24
   2beb2:	4628      	mov	r0, r5
   2beb4:	f7ff f928 	bl	2b108 <am_hal_ble_blocking_transfer>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
   2beb8:	4604      	mov	r4, r0
   2beba:	b108      	cbz	r0, 2bec0 <am_hal_ble_patch_complete+0x138>
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_CMP_TRIALS; ui32Trial++)
   2bebc:	3601      	adds	r6, #1
   2bebe:	e7f3      	b.n	2bea8 <am_hal_ble_patch_complete+0x120>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
   2bec0:	2c00      	cmp	r4, #0
   2bec2:	f47f af6e 	bne.w	2bda2 <am_hal_ble_patch_complete+0x1a>
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 100,
   2bec6:	4b1a      	ldr	r3, [pc, #104]	; (2bf30 <am_hal_ble_patch_complete+0x1a8>)
   2bec8:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2becc:	f013 0f80 	tst.w	r3, #128	; 0x80
   2bed0:	d107      	bne.n	2bee2 <am_hal_ble_patch_complete+0x15a>
   2bed2:	4b18      	ldr	r3, [pc, #96]	; (2bf34 <am_hal_ble_patch_complete+0x1ac>)
   2bed4:	429c      	cmp	r4, r3
   2bed6:	d826      	bhi.n	2bf26 <am_hal_ble_patch_complete+0x19e>
   2bed8:	2010      	movs	r0, #16
   2beda:	f000 f8ed 	bl	2c0b8 <am_hal_flash_delay>
   2bede:	3401      	adds	r4, #1
   2bee0:	e7f1      	b.n	2bec6 <am_hal_ble_patch_complete+0x13e>
    sTransfer.ui8Command = AM_HAL_BLE_READ;
   2bee2:	2302      	movs	r3, #2
   2bee4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    sTransfer.pui32Data = sRxBuffer.words;
   2bee8:	f8cd d018 	str.w	sp, [sp, #24]
    sTransfer.ui16Length = 9;
   2beec:	2309      	movs	r3, #9
   2beee:	f8ad 3020 	strh.w	r3, [sp, #32]
    ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   2bef2:	a906      	add	r1, sp, #24
   2bef4:	4628      	mov	r0, r5
   2bef6:	f7ff f907 	bl	2b108 <am_hal_ble_blocking_transfer>
    if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   2befa:	4604      	mov	r4, r0
   2befc:	2800      	cmp	r0, #0
   2befe:	f47f af50 	bne.w	2bda2 <am_hal_ble_patch_complete+0x1a>
    am_hal_ble_wakeup_set(pBLE, 0);
   2bf02:	2100      	movs	r1, #0
   2bf04:	4628      	mov	r0, r5
   2bf06:	f7fe fec9 	bl	2ac9c <am_hal_ble_wakeup_set>
    pBLE->bPatchComplete = true;
   2bf0a:	2301      	movs	r3, #1
   2bf0c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    delay_ms(500);
   2bf10:	4809      	ldr	r0, [pc, #36]	; (2bf38 <am_hal_ble_patch_complete+0x1b0>)
   2bf12:	f000 f8d1 	bl	2c0b8 <am_hal_flash_delay>
    am_hal_ble_load_modex_trim_set(pBLE);
   2bf16:	4628      	mov	r0, r5
   2bf18:	f7ff ff28 	bl	2bd6c <am_hal_ble_load_modex_trim_set>
    return AM_HAL_STATUS_SUCCESS;
   2bf1c:	e741      	b.n	2bda2 <am_hal_ble_patch_complete+0x1a>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2bf1e:	2402      	movs	r4, #2
   2bf20:	e73f      	b.n	2bda2 <am_hal_ble_patch_complete+0x1a>
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 100,
   2bf22:	4c06      	ldr	r4, [pc, #24]	; (2bf3c <am_hal_ble_patch_complete+0x1b4>)
   2bf24:	e73d      	b.n	2bda2 <am_hal_ble_patch_complete+0x1a>
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 100,
   2bf26:	4c05      	ldr	r4, [pc, #20]	; (2bf3c <am_hal_ble_patch_complete+0x1b4>)
   2bf28:	e73b      	b.n	2bda2 <am_hal_ble_patch_complete+0x1a>
   2bf2a:	bf00      	nop
   2bf2c:	01775230 	.word	0x01775230
   2bf30:	5000c000 	.word	0x5000c000
   2bf34:	0001869f 	.word	0x0001869f
   2bf38:	007a1200 	.word	0x007a1200
   2bf3c:	08000004 	.word	0x08000004

0002bf40 <am_hal_ble_boot>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2bf40:	b370      	cbz	r0, 2bfa0 <am_hal_ble_boot+0x60>
{
   2bf42:	b510      	push	{r4, lr}
   2bf44:	4604      	mov	r4, r0
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2bf46:	6803      	ldr	r3, [r0, #0]
   2bf48:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2bf4c:	4a16      	ldr	r2, [pc, #88]	; (2bfa8 <am_hal_ble_boot+0x68>)
   2bf4e:	4293      	cmp	r3, r2
   2bf50:	d128      	bne.n	2bfa4 <am_hal_ble_boot+0x64>
    if (pBLE->bUseDefaultPatches)
   2bf52:	7a03      	ldrb	r3, [r0, #8]
   2bf54:	b1ab      	cbz	r3, 2bf82 <am_hal_ble_boot+0x42>
        if (APOLLO3_A0 || APOLLO3_A1)
   2bf56:	4b15      	ldr	r3, [pc, #84]	; (2bfac <am_hal_ble_boot+0x6c>)
   2bf58:	68db      	ldr	r3, [r3, #12]
   2bf5a:	b2db      	uxtb	r3, r3
   2bf5c:	2b11      	cmp	r3, #17
   2bf5e:	d017      	beq.n	2bf90 <am_hal_ble_boot+0x50>
   2bf60:	4b12      	ldr	r3, [pc, #72]	; (2bfac <am_hal_ble_boot+0x6c>)
   2bf62:	68db      	ldr	r3, [r3, #12]
   2bf64:	b2db      	uxtb	r3, r3
   2bf66:	2b12      	cmp	r3, #18
   2bf68:	d012      	beq.n	2bf90 <am_hal_ble_boot+0x50>
        ui32Status = am_hal_ble_default_trim_set_ramcode(pHandle);
   2bf6a:	4620      	mov	r0, r4
   2bf6c:	f7ff f876 	bl	2b05c <am_hal_ble_default_trim_set_ramcode>
        if (ui32Status != AM_HAL_STATUS_SUCCESS)
   2bf70:	b9c8      	cbnz	r0, 2bfa6 <am_hal_ble_boot+0x66>
        ui32Status = am_hal_ble_default_patch_apply(pHandle);
   2bf72:	4620      	mov	r0, r4
   2bf74:	f7ff fbd6 	bl	2b724 <am_hal_ble_default_patch_apply>
        if (ui32Status != AM_HAL_STATUS_SUCCESS)
   2bf78:	b9a8      	cbnz	r0, 2bfa6 <am_hal_ble_boot+0x66>
        ui32Status = am_hal_ble_patch_complete(pHandle);
   2bf7a:	4620      	mov	r0, r4
   2bf7c:	f7ff ff04 	bl	2bd88 <am_hal_ble_patch_complete>
        if (ui32Status != AM_HAL_STATUS_SUCCESS)
   2bf80:	b988      	cbnz	r0, 2bfa6 <am_hal_ble_boot+0x66>
    if (am_hal_ble_check_32k_clock(pBLE) == AM_HAL_STATUS_FAIL)
   2bf82:	4620      	mov	r0, r4
   2bf84:	f7ff fe0e 	bl	2bba4 <am_hal_ble_check_32k_clock>
   2bf88:	2801      	cmp	r0, #1
   2bf8a:	d007      	beq.n	2bf9c <am_hal_ble_boot+0x5c>
        return AM_HAL_STATUS_SUCCESS;
   2bf8c:	2000      	movs	r0, #0
   2bf8e:	e00a      	b.n	2bfa6 <am_hal_ble_boot+0x66>
            ui32Status = am_hal_ble_default_copy_patch_apply(pHandle);
   2bf90:	4620      	mov	r0, r4
   2bf92:	f7ff fc77 	bl	2b884 <am_hal_ble_default_copy_patch_apply>
            if (ui32Status != AM_HAL_STATUS_SUCCESS)
   2bf96:	2800      	cmp	r0, #0
   2bf98:	d0e7      	beq.n	2bf6a <am_hal_ble_boot+0x2a>
   2bf9a:	e004      	b.n	2bfa6 <am_hal_ble_boot+0x66>
        return AM_HAL_BLE_32K_CLOCK_UNSTABLE;
   2bf9c:	4804      	ldr	r0, [pc, #16]	; (2bfb0 <am_hal_ble_boot+0x70>)
   2bf9e:	e002      	b.n	2bfa6 <am_hal_ble_boot+0x66>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2bfa0:	2002      	movs	r0, #2
} // am_hal_ble_boot()
   2bfa2:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2bfa4:	2002      	movs	r0, #2
} // am_hal_ble_boot()
   2bfa6:	bd10      	pop	{r4, pc}
   2bfa8:	01775230 	.word	0x01775230
   2bfac:	40020000 	.word	0x40020000
   2bfb0:	0800000b 	.word	0x0800000b

0002bfb4 <am_hal_ble_tx_power_set>:
// ui32TxPower: 0x04->-10dBm 0x05->-5dBm 0x08->0dBm 0x0F->3dBm
//
//*****************************************************************************
uint32_t
am_hal_ble_tx_power_set(void *pHandle, uint8_t ui32TxPower)
{
   2bfb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bfb6:	b083      	sub	sp, #12
   2bfb8:	4604      	mov	r4, r0
   2bfba:	460d      	mov	r5, r1
    am_hal_ble_state_t *pBLE = pHandle;
    uint32_t RegValueMCGR, tempreg = 0;
   2bfbc:	2300      	movs	r3, #0
   2bfbe:	9300      	str	r3, [sp, #0]
    uint32_t ui32PowerValue = 0x00000008;
    ui32PowerValue |= (ui32TxPower & 0xF) << 16;
   2bfc0:	040e      	lsls	r6, r1, #16
   2bfc2:	f406 2670 	and.w	r6, r6, #983040	; 0xf0000
   2bfc6:	f046 0608 	orr.w	r6, r6, #8

    am_hal_ble_plf_reg_read(pBLE, 0x43000004, &RegValueMCGR);
   2bfca:	4f1d      	ldr	r7, [pc, #116]	; (2c040 <am_hal_ble_tx_power_set+0x8c>)
   2bfcc:	aa01      	add	r2, sp, #4
   2bfce:	4639      	mov	r1, r7
   2bfd0:	f7ff fd90 	bl	2baf4 <am_hal_ble_plf_reg_read>

    //
    // Unlock the BLE controller registers.
    //
    am_hal_ble_plf_reg_write(pBLE, 0x43000004, 0xFFFFFFFF);
   2bfd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bfd8:	4639      	mov	r1, r7
   2bfda:	4620      	mov	r0, r4
   2bfdc:	f7ff fe08 	bl	2bbf0 <am_hal_ble_plf_reg_write>

    // set tx power register at 0x52400018
    am_hal_ble_plf_reg_write(pBLE, 0x52400018, ui32PowerValue);
   2bfe0:	4632      	mov	r2, r6
   2bfe2:	4918      	ldr	r1, [pc, #96]	; (2c044 <am_hal_ble_tx_power_set+0x90>)
   2bfe4:	4620      	mov	r0, r4
   2bfe6:	f7ff fe03 	bl	2bbf0 <am_hal_ble_plf_reg_write>

    // Lock BLE controller registers
    am_hal_ble_plf_reg_write(pBLE, 0x43000004, RegValueMCGR);
   2bfea:	9a01      	ldr	r2, [sp, #4]
   2bfec:	4639      	mov	r1, r7
   2bfee:	4620      	mov	r0, r4
   2bff0:	f7ff fdfe 	bl	2bbf0 <am_hal_ble_plf_reg_write>
    // Note:
    //    Register values may be lost when BLE controller enters deepsleep.
    //    BLE controller loads RAM settings back upon wakeup.
    //    To retain the setting, BLE controller RAM settings should be updated.
    //
    if (APOLLO3_B0)
   2bff4:	4b14      	ldr	r3, [pc, #80]	; (2c048 <am_hal_ble_tx_power_set+0x94>)
   2bff6:	68db      	ldr	r3, [r3, #12]
   2bff8:	b2db      	uxtb	r3, r3
   2bffa:	2b21      	cmp	r3, #33	; 0x21
   2bffc:	d015      	beq.n	2c02a <am_hal_ble_tx_power_set+0x76>
    {
        am_hal_ble_plf_reg_read(pBLE, AM_HAL_BLE_IP_RAM_POWER_LEVEL_ADDR_B0, &tempreg);
    }
    else
    {
        am_hal_ble_plf_reg_read(pBLE, AM_HAL_BLE_IP_RAM_POWER_LEVEL_ADDR_A1, &tempreg);
   2bffe:	466a      	mov	r2, sp
   2c000:	4912      	ldr	r1, [pc, #72]	; (2c04c <am_hal_ble_tx_power_set+0x98>)
   2c002:	4620      	mov	r0, r4
   2c004:	f7ff fd76 	bl	2baf4 <am_hal_ble_plf_reg_read>
    }

    tempreg &= 0xffffff00;
   2c008:	9a00      	ldr	r2, [sp, #0]
   2c00a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    tempreg |= ui32TxPower;
   2c00e:	432a      	orrs	r2, r5
   2c010:	9200      	str	r2, [sp, #0]

    if (APOLLO3_B0)
   2c012:	4b0d      	ldr	r3, [pc, #52]	; (2c048 <am_hal_ble_tx_power_set+0x94>)
   2c014:	68db      	ldr	r3, [r3, #12]
   2c016:	b2db      	uxtb	r3, r3
   2c018:	2b21      	cmp	r3, #33	; 0x21
   2c01a:	d00c      	beq.n	2c036 <am_hal_ble_tx_power_set+0x82>
    {
        am_hal_ble_plf_reg_write(pBLE, AM_HAL_BLE_IP_RAM_POWER_LEVEL_ADDR_B0, tempreg);
    }
    else
    {
        am_hal_ble_plf_reg_write(pBLE, AM_HAL_BLE_IP_RAM_POWER_LEVEL_ADDR_A1, tempreg);
   2c01c:	490b      	ldr	r1, [pc, #44]	; (2c04c <am_hal_ble_tx_power_set+0x98>)
   2c01e:	4620      	mov	r0, r4
   2c020:	f7ff fde6 	bl	2bbf0 <am_hal_ble_plf_reg_write>
    }

    return AM_HAL_STATUS_SUCCESS;
} // am_hal_ble_tx_power_set()
   2c024:	2000      	movs	r0, #0
   2c026:	b003      	add	sp, #12
   2c028:	bdf0      	pop	{r4, r5, r6, r7, pc}
        am_hal_ble_plf_reg_read(pBLE, AM_HAL_BLE_IP_RAM_POWER_LEVEL_ADDR_B0, &tempreg);
   2c02a:	466a      	mov	r2, sp
   2c02c:	4908      	ldr	r1, [pc, #32]	; (2c050 <am_hal_ble_tx_power_set+0x9c>)
   2c02e:	4620      	mov	r0, r4
   2c030:	f7ff fd60 	bl	2baf4 <am_hal_ble_plf_reg_read>
   2c034:	e7e8      	b.n	2c008 <am_hal_ble_tx_power_set+0x54>
        am_hal_ble_plf_reg_write(pBLE, AM_HAL_BLE_IP_RAM_POWER_LEVEL_ADDR_B0, tempreg);
   2c036:	4906      	ldr	r1, [pc, #24]	; (2c050 <am_hal_ble_tx_power_set+0x9c>)
   2c038:	4620      	mov	r0, r4
   2c03a:	f7ff fdd9 	bl	2bbf0 <am_hal_ble_plf_reg_write>
   2c03e:	e7f1      	b.n	2c024 <am_hal_ble_tx_power_set+0x70>
   2c040:	43000004 	.word	0x43000004
   2c044:	52400018 	.word	0x52400018
   2c048:	40020000 	.word	0x40020000
   2c04c:	20006038 	.word	0x20006038
   2c050:	20006838 	.word	0x20006838

0002c054 <am_hal_flash_page_erase>:
//
//*****************************************************************************
int
am_hal_flash_page_erase(uint32_t ui32ProgramKey, uint32_t ui32FlashInst,
                        uint32_t ui32PageNum)
{
   2c054:	b508      	push	{r3, lr}
    return g_am_hal_flash.flash_page_erase(ui32ProgramKey,
   2c056:	4b01      	ldr	r3, [pc, #4]	; (2c05c <am_hal_flash_page_erase+0x8>)
   2c058:	4798      	blx	r3
                                           ui32FlashInst,
                                           ui32PageNum);
} // am_hal_flash_page_erase()
   2c05a:	bd08      	pop	{r3, pc}
   2c05c:	08000051 	.word	0x08000051

0002c060 <am_hal_flash_program_main>:
//
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32ProgramKey, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
   2c060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c064:	b082      	sub	sp, #8
   2c066:	4605      	mov	r5, r0
   2c068:	4616      	mov	r6, r2
   2c06a:	461c      	mov	r4, r3
    uint32_t ui32MaxSrcAddr = (uint32_t)pui32Src + (ui32NumWords << 2);
   2c06c:	eb01 0783 	add.w	r7, r1, r3, lsl #2

    //
    // Workaround, the last word of SRAM cannot be the source
    // of programming by BootRom, check to see if it is the last
    //
    if ( ui32MaxSrcAddr == ui32SramMaxAddr )
   2c070:	4b0f      	ldr	r3, [pc, #60]	; (2c0b0 <am_hal_flash_program_main+0x50>)
   2c072:	429f      	cmp	r7, r3
   2c074:	d005      	beq.n	2c082 <am_hal_flash_program_main+0x22>
                        &ui32Temp,
                        pui32Dst + ui32NumWords - 1,
                        1);
    }

    return g_am_hal_flash.flash_program_main(ui32ProgramKey, pui32Src,
   2c076:	4623      	mov	r3, r4
   2c078:	4c0e      	ldr	r4, [pc, #56]	; (2c0b4 <am_hal_flash_program_main+0x54>)
   2c07a:	47a0      	blx	r4
                                             pui32Dst, ui32NumWords);
} // am_hal_flash_program_main()
   2c07c:	b002      	add	sp, #8
   2c07e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ( ui32NumWords > 1 )
   2c082:	2c01      	cmp	r4, #1
   2c084:	d905      	bls.n	2c092 <am_hal_flash_program_main+0x32>
            iRetVal = g_am_hal_flash.flash_program_main(
   2c086:	1e63      	subs	r3, r4, #1
   2c088:	f8df 8028 	ldr.w	r8, [pc, #40]	; 2c0b4 <am_hal_flash_program_main+0x54>
   2c08c:	47c0      	blx	r8
            if ( iRetVal != 0 )
   2c08e:	2800      	cmp	r0, #0
   2c090:	d1f4      	bne.n	2c07c <am_hal_flash_program_main+0x1c>
        ui32Temp = *(uint32_t *)(ui32MaxSrcAddr - 4);
   2c092:	f857 3c04 	ldr.w	r3, [r7, #-4]
   2c096:	9301      	str	r3, [sp, #4]
                        pui32Dst + ui32NumWords - 1,
   2c098:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   2c09c:	3a01      	subs	r2, #1
        return g_am_hal_flash.flash_program_main(
   2c09e:	2301      	movs	r3, #1
   2c0a0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   2c0a4:	a901      	add	r1, sp, #4
   2c0a6:	4628      	mov	r0, r5
   2c0a8:	4c02      	ldr	r4, [pc, #8]	; (2c0b4 <am_hal_flash_program_main+0x54>)
   2c0aa:	47a0      	blx	r4
   2c0ac:	e7e6      	b.n	2c07c <am_hal_flash_program_main+0x1c>
   2c0ae:	bf00      	nop
   2c0b0:	10060000 	.word	0x10060000
   2c0b4:	08000055 	.word	0x08000055

0002c0b8 <am_hal_flash_delay>:
//! @return None.
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
   2c0b8:	b508      	push	{r3, lr}
    // as computing the cycle count adjustment itself.
    // Let's account for these delays as much as possible.
    //
    register uint32_t ui32CycleCntAdj;

    if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
   2c0ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2c0be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2c0c0:	f013 0f04 	tst.w	r3, #4
   2c0c4:	d007      	beq.n	2c0d6 <am_hal_flash_delay+0x1e>
    {
        ui32Iterations <<= 1;
   2c0c6:	0040      	lsls	r0, r0, #1

        //
        // There's an additional shift to account for.
        //
        ui32CycleCntAdj = ((13 * 2) + 16) / 3;
   2c0c8:	230e      	movs	r3, #14

    //
    // Allow for the overhead of the burst-mode check and these comparisons
    // by eliminating an appropriate number of iterations.
    //
    if ( ui32Iterations > ui32CycleCntAdj )
   2c0ca:	4298      	cmp	r0, r3
   2c0cc:	d902      	bls.n	2c0d4 <am_hal_flash_delay+0x1c>
    {
        ui32Iterations -= ui32CycleCntAdj;

        g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
   2c0ce:	1ac0      	subs	r0, r0, r3
   2c0d0:	4b02      	ldr	r3, [pc, #8]	; (2c0dc <am_hal_flash_delay+0x24>)
   2c0d2:	4798      	blx	r3
    }

} // am_hal_flash_delay()
   2c0d4:	bd08      	pop	{r3, pc}
        ui32CycleCntAdj = ((13 * 1) + 20) / 3;
   2c0d6:	230b      	movs	r3, #11
   2c0d8:	e7f7      	b.n	2c0ca <am_hal_flash_delay+0x12>
   2c0da:	bf00      	nop
   2c0dc:	0800009d 	.word	0x0800009d

0002c0e0 <am_hal_flash_delay_status_check>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_check(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                uint32_t ui32Mask, uint32_t ui32Value,
                                bool bIsEqual)
{
   2c0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c0e4:	460f      	mov	r7, r1
   2c0e6:	4616      	mov	r6, r2
   2c0e8:	461d      	mov	r5, r3
   2c0ea:	f89d 8018 	ldrb.w	r8, [sp, #24]
   2c0ee:	e009      	b.n	2c104 <am_hal_flash_delay_status_check+0x24>
                return AM_HAL_STATUS_SUCCESS;
            }
        }
        else
        {
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
   2c0f0:	683c      	ldr	r4, [r7, #0]
   2c0f2:	4034      	ands	r4, r6
   2c0f4:	42ac      	cmp	r4, r5
   2c0f6:	d10e      	bne.n	2c116 <am_hal_flash_delay_status_check+0x36>
            {
                return AM_HAL_STATUS_SUCCESS;
            }
        }

        if ( ui32usMaxDelay-- )
   2c0f8:	1e44      	subs	r4, r0, #1
   2c0fa:	b170      	cbz	r0, 2c11a <am_hal_flash_delay_status_check+0x3a>
        {
            //
            // Call the BOOTROM cycle function to delay for about 1 microsecond.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(1) );
   2c0fc:	2010      	movs	r0, #16
   2c0fe:	f7ff ffdb 	bl	2c0b8 <am_hal_flash_delay>
        if ( ui32usMaxDelay-- )
   2c102:	4620      	mov	r0, r4
        if ( bIsEqual )
   2c104:	f1b8 0f00 	cmp.w	r8, #0
   2c108:	d0f2      	beq.n	2c0f0 <am_hal_flash_delay_status_check+0x10>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
   2c10a:	683c      	ldr	r4, [r7, #0]
   2c10c:	4034      	ands	r4, r6
   2c10e:	42ac      	cmp	r4, r5
   2c110:	d1f2      	bne.n	2c0f8 <am_hal_flash_delay_status_check+0x18>
                return AM_HAL_STATUS_SUCCESS;
   2c112:	2000      	movs	r0, #0
   2c114:	e002      	b.n	2c11c <am_hal_flash_delay_status_check+0x3c>
                return AM_HAL_STATUS_SUCCESS;
   2c116:	2000      	movs	r0, #0
   2c118:	e000      	b.n	2c11c <am_hal_flash_delay_status_check+0x3c>
        {
            break;
        }
    }

    return AM_HAL_STATUS_TIMEOUT;
   2c11a:	2004      	movs	r0, #4

} // am_hal_flash_delay_status_check()
   2c11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c120 <am_hal_flash_load_ui32>:
//! @return The value read from the given address.
//
//*****************************************************************************
uint32_t
am_hal_flash_load_ui32(uint32_t *pui32Address)
{
   2c120:	b508      	push	{r3, lr}
    return g_am_hal_flash.flash_util_read_word(pui32Address);
   2c122:	4b01      	ldr	r3, [pc, #4]	; (2c128 <am_hal_flash_load_ui32+0x8>)
   2c124:	4798      	blx	r3
} // am_hal_flash_load_ui32()
   2c126:	bd08      	pop	{r3, pc}
   2c128:	08000075 	.word	0x08000075

0002c12c <am_hal_flash_store_ui32>:
#error Compiler is unknown, please contact Ambiq support team
#endif

void
am_hal_flash_store_ui32(uint32_t *pui32Address, uint32_t ui32Value)
{
   2c12c:	b508      	push	{r3, lr}
    // Call the simple routine that has been coded in SRAM.
    // First set up a function pointer to the array, being sure to set the
    //  .T bit (Thumb bit, bit0) in the branch address, then use that
    //  function ptr to call the SRAM function.
    //
    uint32_t SRAMCode = (uint32_t)SRAM_write_ui32 | 0x1;
   2c12e:	4b02      	ldr	r3, [pc, #8]	; (2c138 <am_hal_flash_store_ui32+0xc>)
   2c130:	f043 0301 	orr.w	r3, r3, #1
    uint32_t (*pFunc)(uint32_t*, uint32_t) = (uint32_t (*)(uint32_t*, uint32_t))SRAMCode;
    (*pFunc)(pui32Address, ui32Value);
   2c134:	4798      	blx	r3

} // am_hal_flash_store_ui32()
   2c136:	bd08      	pop	{r3, pc}
   2c138:	10001a80 	.word	0x10001a80

0002c13c <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
   2c13c:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
   2c140:	b672      	cpsid	i
    __asm("    bx lr");
   2c142:	4770      	bx	lr

0002c144 <am_hal_interrupt_master_set>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
   2c144:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
   2c148:	4770      	bx	lr
	...

0002c14c <device_info_get>:
device_info_get(am_hal_mcuctrl_device_t *psDevice)
{
    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
   2c14c:	4a2a      	ldr	r2, [pc, #168]	; (2c1f8 <device_info_get+0xac>)
   2c14e:	6813      	ldr	r3, [r2, #0]
   2c150:	6003      	str	r3, [r0, #0]

    //
    // Read the Chip ID0.
    //
    psDevice->ui32ChipID0 = MCUCTRL->CHIPID0;
   2c152:	6851      	ldr	r1, [r2, #4]
   2c154:	6041      	str	r1, [r0, #4]

    //
    // Read the Chip ID1.
    //
    psDevice->ui32ChipID1 = MCUCTRL->CHIPID1;
   2c156:	6891      	ldr	r1, [r2, #8]
   2c158:	6081      	str	r1, [r0, #8]

    //
    // Read the Chip Revision.
    //
    psDevice->ui32ChipRev = MCUCTRL->CHIPREV;
   2c15a:	68d1      	ldr	r1, [r2, #12]
   2c15c:	60c1      	str	r1, [r0, #12]

    //
    // Read the Chip VENDOR ID.
    //
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
   2c15e:	6911      	ldr	r1, [r2, #16]
   2c160:	6101      	str	r1, [r0, #16]

    //
    // Read the SKU (new for Apollo3).
    //
    psDevice->ui32SKU = MCUCTRL->SKU;
   2c162:	6952      	ldr	r2, [r2, #20]
   2c164:	6142      	str	r2, [r0, #20]

    //
    // Qualified from Part Number.
    //
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
   2c166:	f003 0201 	and.w	r2, r3, #1
   2c16a:	6182      	str	r2, [r0, #24]
    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
        g_am_hal_mcuctrl_flash_size[
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_FLASHSIZE_M) >>
   2c16c:	f3c3 5103 	ubfx	r1, r3, #20, #4
        g_am_hal_mcuctrl_flash_size[
   2c170:	4a22      	ldr	r2, [pc, #136]	; (2c1fc <device_info_get+0xb0>)
   2c172:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    psDevice->ui32FlashSize =
   2c176:	61c2      	str	r2, [r0, #28]
    //
    // SRAM size from Part Number.
    //
    psDevice->ui32SRAMSize =
        g_am_hal_mcuctrl_sram_size[
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_SRAMSIZE_M) >>
   2c178:	f3c3 4303 	ubfx	r3, r3, #16, #4
        g_am_hal_mcuctrl_sram_size[
   2c17c:	4a20      	ldr	r2, [pc, #128]	; (2c200 <device_info_get+0xb4>)
   2c17e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    psDevice->ui32SRAMSize =
   2c182:	6203      	str	r3, [r0, #32]
    // Bits [7:4] are 0xE for Apollo, 0xD for Apollo2, 0xC for Apollo3.
    // Bits [3:0] are defined differently for Apollo and Apollo2/Apollo3.
    //   For Apollo, the low nibble is 0x0.
    //   For Apollo2/Apollo3, the low nibble indicates flash and SRAM size.
    //
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
   2c184:	4a1f      	ldr	r2, [pc, #124]	; (2c204 <device_info_get+0xb8>)
   2c186:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   2c18a:	b2db      	uxtb	r3, r3
   2c18c:	6243      	str	r3, [r0, #36]	; 0x24
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
   2c18e:	f8d2 10e4 	ldr.w	r1, [r2, #228]	; 0xe4
   2c192:	f001 010f 	and.w	r1, r1, #15
   2c196:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   2c19a:	6243      	str	r3, [r0, #36]	; 0x24

    //
    // JEPID is the JEP-106 Manufacturer ID Code, which is assigned to Ambiq as
    //  0x1B, with parity bit is 0x9B.  It is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
   2c19c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
   2c1a0:	f3c3 1303 	ubfx	r3, r3, #4, #4
   2c1a4:	6283      	str	r3, [r0, #40]	; 0x28
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
   2c1a6:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
   2c1aa:	f001 010f 	and.w	r1, r1, #15
   2c1ae:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
   2c1b2:	6283      	str	r3, [r0, #40]	; 0x28

    //
    // CHIPREV is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
   2c1b4:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
   2c1b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   2c1bc:	62c3      	str	r3, [r0, #44]	; 0x2c
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
   2c1be:	f8d2 10ec 	ldr.w	r1, [r2, #236]	; 0xec
   2c1c2:	f3c1 1103 	ubfx	r1, r1, #4, #4
   2c1c6:	430b      	orrs	r3, r1
   2c1c8:	62c3      	str	r3, [r0, #44]	; 0x2c

    //
    // Let's get the Coresight ID (32-bits across 4 registers)
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = JEDEC->CID3_b.CID << 24;
   2c1ca:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   2c1ce:	061b      	lsls	r3, r3, #24
   2c1d0:	6303      	str	r3, [r0, #48]	; 0x30
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
   2c1d2:	f8d2 10f8 	ldr.w	r1, [r2, #248]	; 0xf8
   2c1d6:	b2c9      	uxtb	r1, r1
   2c1d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2c1dc:	6303      	str	r3, [r0, #48]	; 0x30
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
   2c1de:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
   2c1e2:	b2c9      	uxtb	r1, r1
   2c1e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   2c1e8:	6303      	str	r3, [r0, #48]	; 0x30
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
   2c1ea:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
   2c1ee:	b2d2      	uxtb	r2, r2
   2c1f0:	4313      	orrs	r3, r2
   2c1f2:	6303      	str	r3, [r0, #48]	; 0x30
} // device_info_get()
   2c1f4:	4770      	bx	lr
   2c1f6:	bf00      	nop
   2c1f8:	40020000 	.word	0x40020000
   2c1fc:	00033740 	.word	0x00033740
   2c200:	00033780 	.word	0x00033780
   2c204:	f0000f00 	.word	0xf0000f00

0002c208 <mcuctrl_fault_status>:
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
   2c208:	4a0c      	ldr	r2, [pc, #48]	; (2c23c <mcuctrl_fault_status+0x34>)
   2c20a:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
   2c20e:	f003 0101 	and.w	r1, r3, #1
   2c212:	7001      	strb	r1, [r0, #0]
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
   2c214:	f3c3 0140 	ubfx	r1, r3, #1, #1
   2c218:	7201      	strb	r1, [r0, #8]
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
   2c21a:	f3c3 0380 	ubfx	r3, r3, #2, #1
   2c21e:	7403      	strb	r3, [r0, #16]

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = MCUCTRL->DCODEFAULTADDR;
   2c220:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
   2c224:	60c3      	str	r3, [r0, #12]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
   2c226:	f8d2 11c0 	ldr.w	r1, [r2, #448]	; 0x1c0
   2c22a:	6843      	ldr	r3, [r0, #4]
   2c22c:	430b      	orrs	r3, r1
   2c22e:	6043      	str	r3, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
   2c230:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
   2c234:	6943      	ldr	r3, [r0, #20]
   2c236:	4313      	orrs	r3, r2
   2c238:	6143      	str	r3, [r0, #20]
} // mcuctrl_fault_status()
   2c23a:	4770      	bx	lr
   2c23c:	40020000 	.word	0x40020000

0002c240 <am_hal_mcuctrl_info_get>:
am_hal_mcuctrl_info_get(am_hal_mcuctrl_infoget_e eInfoGet, void *pInfo)
{
    am_hal_mcuctrl_feature_t *psFeature;
    uint32_t ui32Feature;

    if ( pInfo == NULL )
   2c240:	b339      	cbz	r1, 2c292 <am_hal_mcuctrl_info_get+0x52>
{
   2c242:	b508      	push	{r3, lr}
   2c244:	4603      	mov	r3, r0
   2c246:	4608      	mov	r0, r1
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    switch ( eInfoGet )
   2c248:	2b01      	cmp	r3, #1
   2c24a:	d01a      	beq.n	2c282 <am_hal_mcuctrl_info_get+0x42>
   2c24c:	2b02      	cmp	r3, #2
   2c24e:	d01c      	beq.n	2c28a <am_hal_mcuctrl_info_get+0x4a>
   2c250:	b10b      	cbz	r3, 2c256 <am_hal_mcuctrl_info_get+0x16>
   2c252:	2006      	movs	r0, #6
    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_mcuctrl_info_get()
   2c254:	bd08      	pop	{r3, pc}
            ui32Feature = MCUCTRL->FEATUREENABLE;
   2c256:	4a10      	ldr	r2, [pc, #64]	; (2c298 <am_hal_mcuctrl_info_get+0x58>)
   2c258:	6993      	ldr	r3, [r2, #24]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
   2c25a:	f3c3 1180 	ubfx	r1, r3, #6, #1
            psFeature->bBurstAvail =
   2c25e:	7001      	strb	r1, [r0, #0]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
   2c260:	f3c3 0380 	ubfx	r3, r3, #2, #1
            psFeature->bBLEavail =
   2c264:	7043      	strb	r3, [r0, #1]
            ui32Feature = MCUCTRL->BOOTLOADER;
   2c266:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
                _FLD2VAL(MCUCTRL_BOOTLOADER_SECBOOTFEATURE, ui32Feature);
   2c26a:	f3c3 6381 	ubfx	r3, r3, #26, #2
            psFeature->ui8SecBootFeature =
   2c26e:	7103      	strb	r3, [r0, #4]
            ui32Feature = MCUCTRL->SKU;
   2c270:	6953      	ldr	r3, [r2, #20]
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
   2c272:	f3c3 0240 	ubfx	r2, r3, #1, #1
            psFeature->bBLEFeature =
   2c276:	7082      	strb	r2, [r0, #2]
                _FLD2VAL(MCUCTRL_SKU_ALLOWBURST, ui32Feature);
   2c278:	f003 0301 	and.w	r3, r3, #1
            psFeature->bBurstFeature =
   2c27c:	70c3      	strb	r3, [r0, #3]
    return AM_HAL_STATUS_SUCCESS;
   2c27e:	2000      	movs	r0, #0
            break;
   2c280:	e7e8      	b.n	2c254 <am_hal_mcuctrl_info_get+0x14>
            device_info_get((am_hal_mcuctrl_device_t *)pInfo);
   2c282:	f7ff ff63 	bl	2c14c <device_info_get>
    return AM_HAL_STATUS_SUCCESS;
   2c286:	2000      	movs	r0, #0
            break;
   2c288:	e7e4      	b.n	2c254 <am_hal_mcuctrl_info_get+0x14>
            mcuctrl_fault_status((am_hal_mcuctrl_fault_t*)pInfo);
   2c28a:	f7ff ffbd 	bl	2c208 <mcuctrl_fault_status>
    return AM_HAL_STATUS_SUCCESS;
   2c28e:	2000      	movs	r0, #0
            break;
   2c290:	e7e0      	b.n	2c254 <am_hal_mcuctrl_info_get+0x14>
        return AM_HAL_STATUS_INVALID_ARG;
   2c292:	2006      	movs	r0, #6
} // am_hal_mcuctrl_info_get()
   2c294:	4770      	bx	lr
   2c296:	bf00      	nop
   2c298:	40020000 	.word	0x40020000

0002c29c <pwrctrl_periph_disable_msk_check>:
// ****************************************************************************
static uint32_t
pwrctrl_periph_disable_msk_check(am_hal_pwrctrl_periph_e ePeripheral)
{
    uint32_t retVal = AM_HAL_STATUS_FAIL;
    uint32_t HCPxMask = PWRCTRL->DEVPWREN;
   2c29c:	4b1c      	ldr	r3, [pc, #112]	; (2c310 <pwrctrl_periph_disable_msk_check+0x74>)
   2c29e:	689b      	ldr	r3, [r3, #8]

    switch (am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus)
   2c2a0:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   2c2a4:	4a1b      	ldr	r2, [pc, #108]	; (2c314 <pwrctrl_periph_disable_msk_check+0x78>)
   2c2a6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   2c2aa:	6852      	ldr	r2, [r2, #4]
   2c2ac:	2a08      	cmp	r2, #8
   2c2ae:	d010      	beq.n	2c2d2 <pwrctrl_periph_disable_msk_check+0x36>
   2c2b0:	2a10      	cmp	r2, #16
   2c2b2:	d01a      	beq.n	2c2ea <pwrctrl_periph_disable_msk_check+0x4e>
   2c2b4:	2a04      	cmp	r2, #4
   2c2b6:	d001      	beq.n	2c2bc <pwrctrl_periph_disable_msk_check+0x20>
   2c2b8:	2001      	movs	r0, #1
   2c2ba:	4770      	bx	lr
    {
        case (PWRCTRL_DEVPWRSTATUS_HCPA_Msk):
            if (((HCPxMask & HCPA_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   2c2bc:	f240 5281 	movw	r2, #1409	; 0x581
   2c2c0:	4213      	tst	r3, r2
   2c2c2:	d01e      	beq.n	2c302 <pwrctrl_periph_disable_msk_check+0x66>
   2c2c4:	4a13      	ldr	r2, [pc, #76]	; (2c314 <pwrctrl_periph_disable_msk_check+0x78>)
   2c2c6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   2c2ca:	4018      	ands	r0, r3
   2c2cc:	d01e      	beq.n	2c30c <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   2c2ce:	2001      	movs	r0, #1
   2c2d0:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPB_Msk):
            if (((HCPxMask & HCPB_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   2c2d2:	f013 0f0e 	tst.w	r3, #14
   2c2d6:	d016      	beq.n	2c306 <pwrctrl_periph_disable_msk_check+0x6a>
   2c2d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   2c2dc:	4a0d      	ldr	r2, [pc, #52]	; (2c314 <pwrctrl_periph_disable_msk_check+0x78>)
   2c2de:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   2c2e2:	4018      	ands	r0, r3
   2c2e4:	d012      	beq.n	2c30c <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   2c2e6:	2001      	movs	r0, #1
   2c2e8:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPC_Msk):
            if (((HCPxMask & HCPC_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   2c2ea:	f013 0f70 	tst.w	r3, #112	; 0x70
   2c2ee:	d00c      	beq.n	2c30a <pwrctrl_periph_disable_msk_check+0x6e>
   2c2f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   2c2f4:	4a07      	ldr	r2, [pc, #28]	; (2c314 <pwrctrl_periph_disable_msk_check+0x78>)
   2c2f6:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   2c2fa:	4018      	ands	r0, r3
   2c2fc:	d006      	beq.n	2c30c <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   2c2fe:	2001      	movs	r0, #1
   2c300:	4770      	bx	lr
   2c302:	2001      	movs	r0, #1
   2c304:	4770      	bx	lr
   2c306:	2001      	movs	r0, #1
   2c308:	4770      	bx	lr
   2c30a:	2001      	movs	r0, #1
        default:
            break;
    }

    return retVal;
}
   2c30c:	4770      	bx	lr
   2c30e:	bf00      	nop
   2c310:	40021000 	.word	0x40021000
   2c314:	000337c0 	.word	0x000337c0

0002c318 <simobuck_updates>:
simobuck_updates(void)
{
    //
    // Adjust the SIMOBUCK LP settings.
    //
    if ( APOLLO3_GE_B0 )
   2c318:	4b2b      	ldr	r3, [pc, #172]	; (2c3c8 <simobuck_updates+0xb0>)
   2c31a:	68db      	ldr	r3, [r3, #12]
   2c31c:	b2db      	uxtb	r3, r3
   2c31e:	2b20      	cmp	r3, #32
   2c320:	d944      	bls.n	2c3ac <simobuck_updates+0x94>
{
   2c322:	b410      	push	{r4}
    {
        MCUCTRL->SIMOBUCK2_b.SIMOBUCKCORELPHIGHTONTRIM  = 2;
   2c324:	4b28      	ldr	r3, [pc, #160]	; (2c3c8 <simobuck_updates+0xb0>)
   2c326:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
   2c32a:	2002      	movs	r0, #2
   2c32c:	f360 4213 	bfi	r2, r0, #16, #4
   2c330:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
        MCUCTRL->SIMOBUCK2_b.SIMOBUCKCORELPLOWTONTRIM   = 3;
   2c334:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
   2c338:	2203      	movs	r2, #3
   2c33a:	f362 5117 	bfi	r1, r2, #20, #4
   2c33e:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
        MCUCTRL->SIMOBUCK3_b.SIMOBUCKCORELPHIGHTOFFTRIM = 5;
   2c342:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   2c346:	2405      	movs	r4, #5
   2c348:	f364 0103 	bfi	r1, r4, #0, #4
   2c34c:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
        MCUCTRL->SIMOBUCK3_b.SIMOBUCKCORELPLOWTOFFTRIM  = 2;
   2c350:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   2c354:	f360 1107 	bfi	r1, r0, #4, #4
   2c358:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
        MCUCTRL->SIMOBUCK3_b.SIMOBUCKMEMLPHIGHTOFFTRIM  = 6;
   2c35c:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   2c360:	2006      	movs	r0, #6
   2c362:	f360 210b 	bfi	r1, r0, #8, #4
   2c366:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
        MCUCTRL->SIMOBUCK3_b.SIMOBUCKMEMLPLOWTOFFTRIM   = 1;
   2c36a:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   2c36e:	2001      	movs	r0, #1
   2c370:	f360 310f 	bfi	r1, r0, #12, #4
   2c374:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
        MCUCTRL->SIMOBUCK3_b.SIMOBUCKMEMLPHIGHTONTRIM   = 3;
   2c378:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   2c37c:	f362 61de 	bfi	r1, r2, #27, #4
   2c380:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
        MCUCTRL->SIMOBUCK4_b.SIMOBUCKMEMLPLOWTONTRIM    = 3;
   2c384:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
   2c388:	f362 0103 	bfi	r1, r2, #0, #4
   2c38c:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    }

    //
    // Adjust the SIMOBUCK Timeout settings.
    //
    if ( APOLLO3_GE_A1 )
   2c390:	4b0d      	ldr	r3, [pc, #52]	; (2c3c8 <simobuck_updates+0xb0>)
   2c392:	68db      	ldr	r3, [r3, #12]
   2c394:	b2db      	uxtb	r3, r3
   2c396:	2b11      	cmp	r3, #17
   2c398:	d906      	bls.n	2c3a8 <simobuck_updates+0x90>
    {
        MCUCTRL->SIMOBUCK4_b.SIMOBUCKCOMP2TIMEOUTEN = 0;
   2c39a:	4b0b      	ldr	r3, [pc, #44]	; (2c3c8 <simobuck_updates+0xb0>)
   2c39c:	f8d3 235c 	ldr.w	r2, [r3, #860]	; 0x35c
   2c3a0:	f36f 6218 	bfc	r2, #24, #1
   2c3a4:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    }

} // simobuck_updates()
   2c3a8:	bc10      	pop	{r4}
   2c3aa:	4770      	bx	lr
    if ( APOLLO3_GE_A1 )
   2c3ac:	4b06      	ldr	r3, [pc, #24]	; (2c3c8 <simobuck_updates+0xb0>)
   2c3ae:	68db      	ldr	r3, [r3, #12]
   2c3b0:	b2db      	uxtb	r3, r3
   2c3b2:	2b11      	cmp	r3, #17
   2c3b4:	d907      	bls.n	2c3c6 <simobuck_updates+0xae>
        MCUCTRL->SIMOBUCK4_b.SIMOBUCKCOMP2TIMEOUTEN = 0;
   2c3b6:	4b04      	ldr	r3, [pc, #16]	; (2c3c8 <simobuck_updates+0xb0>)
   2c3b8:	f8d3 235c 	ldr.w	r2, [r3, #860]	; 0x35c
   2c3bc:	f36f 6218 	bfc	r2, #24, #1
   2c3c0:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
   2c3c4:	4770      	bx	lr
   2c3c6:	4770      	bx	lr
   2c3c8:	40020000 	.word	0x40020000

0002c3cc <am_hal_pwrctrl_periph_enable>:
{
   2c3cc:	b570      	push	{r4, r5, r6, lr}
   2c3ce:	b082      	sub	sp, #8
   2c3d0:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
   2c3d2:	f7ff feb3 	bl	2c13c <am_hal_interrupt_master_disable>
   2c3d6:	9000      	str	r0, [sp, #0]
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   2c3d8:	4a1e      	ldr	r2, [pc, #120]	; (2c454 <am_hal_pwrctrl_periph_enable+0x88>)
   2c3da:	6893      	ldr	r3, [r2, #8]
   2c3dc:	4626      	mov	r6, r4
   2c3de:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   2c3e2:	491d      	ldr	r1, [pc, #116]	; (2c458 <am_hal_pwrctrl_periph_enable+0x8c>)
   2c3e4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   2c3e8:	430b      	orrs	r3, r1
   2c3ea:	6093      	str	r3, [r2, #8]
    AM_CRITICAL_END
   2c3ec:	9800      	ldr	r0, [sp, #0]
   2c3ee:	f7ff fea9 	bl	2c144 <am_hal_interrupt_master_set>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   2c3f2:	2500      	movs	r5, #0
   2c3f4:	2d13      	cmp	r5, #19
   2c3f6:	d80e      	bhi.n	2c416 <am_hal_pwrctrl_periph_enable+0x4a>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   2c3f8:	20a0      	movs	r0, #160	; 0xa0
   2c3fa:	f7ff fe5d 	bl	2c0b8 <am_hal_flash_delay>
        if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
   2c3fe:	4b15      	ldr	r3, [pc, #84]	; (2c454 <am_hal_pwrctrl_periph_enable+0x88>)
   2c400:	6999      	ldr	r1, [r3, #24]
   2c402:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   2c406:	4a14      	ldr	r2, [pc, #80]	; (2c458 <am_hal_pwrctrl_periph_enable+0x8c>)
   2c408:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2c40c:	685b      	ldr	r3, [r3, #4]
   2c40e:	4219      	tst	r1, r3
   2c410:	d101      	bne.n	2c416 <am_hal_pwrctrl_periph_enable+0x4a>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   2c412:	350a      	adds	r5, #10
   2c414:	e7ee      	b.n	2c3f4 <am_hal_pwrctrl_periph_enable+0x28>
    if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
   2c416:	4b0f      	ldr	r3, [pc, #60]	; (2c454 <am_hal_pwrctrl_periph_enable+0x88>)
   2c418:	6999      	ldr	r1, [r3, #24]
   2c41a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2c41e:	4a0e      	ldr	r2, [pc, #56]	; (2c458 <am_hal_pwrctrl_periph_enable+0x8c>)
   2c420:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2c424:	685b      	ldr	r3, [r3, #4]
   2c426:	4219      	tst	r1, r3
   2c428:	d002      	beq.n	2c430 <am_hal_pwrctrl_periph_enable+0x64>
        return AM_HAL_STATUS_SUCCESS;
   2c42a:	2000      	movs	r0, #0
} // am_hal_pwrctrl_periph_enable()
   2c42c:	b002      	add	sp, #8
   2c42e:	bd70      	pop	{r4, r5, r6, pc}
        AM_CRITICAL_BEGIN
   2c430:	f7ff fe84 	bl	2c13c <am_hal_interrupt_master_disable>
   2c434:	9001      	str	r0, [sp, #4]
        PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   2c436:	4a07      	ldr	r2, [pc, #28]	; (2c454 <am_hal_pwrctrl_periph_enable+0x88>)
   2c438:	6893      	ldr	r3, [r2, #8]
   2c43a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2c43e:	4906      	ldr	r1, [pc, #24]	; (2c458 <am_hal_pwrctrl_periph_enable+0x8c>)
   2c440:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   2c444:	ea23 0301 	bic.w	r3, r3, r1
   2c448:	6093      	str	r3, [r2, #8]
        AM_CRITICAL_END
   2c44a:	9801      	ldr	r0, [sp, #4]
   2c44c:	f7ff fe7a 	bl	2c144 <am_hal_interrupt_master_set>
        return AM_HAL_STATUS_FAIL;
   2c450:	2001      	movs	r0, #1
   2c452:	e7eb      	b.n	2c42c <am_hal_pwrctrl_periph_enable+0x60>
   2c454:	40021000 	.word	0x40021000
   2c458:	000337c0 	.word	0x000337c0

0002c45c <am_hal_pwrctrl_periph_disable>:
{
   2c45c:	b570      	push	{r4, r5, r6, lr}
   2c45e:	b082      	sub	sp, #8
   2c460:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
   2c462:	f7ff fe6b 	bl	2c13c <am_hal_interrupt_master_disable>
   2c466:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   2c468:	4a17      	ldr	r2, [pc, #92]	; (2c4c8 <am_hal_pwrctrl_periph_disable+0x6c>)
   2c46a:	6893      	ldr	r3, [r2, #8]
   2c46c:	4626      	mov	r6, r4
   2c46e:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   2c472:	4916      	ldr	r1, [pc, #88]	; (2c4cc <am_hal_pwrctrl_periph_disable+0x70>)
   2c474:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   2c478:	ea23 0301 	bic.w	r3, r3, r1
   2c47c:	6093      	str	r3, [r2, #8]
    AM_CRITICAL_END
   2c47e:	9801      	ldr	r0, [sp, #4]
   2c480:	f7ff fe60 	bl	2c144 <am_hal_interrupt_master_set>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   2c484:	2500      	movs	r5, #0
   2c486:	2d13      	cmp	r5, #19
   2c488:	d80e      	bhi.n	2c4a8 <am_hal_pwrctrl_periph_disable+0x4c>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   2c48a:	20a0      	movs	r0, #160	; 0xa0
   2c48c:	f7ff fe14 	bl	2c0b8 <am_hal_flash_delay>
        if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
   2c490:	4b0d      	ldr	r3, [pc, #52]	; (2c4c8 <am_hal_pwrctrl_periph_disable+0x6c>)
   2c492:	6999      	ldr	r1, [r3, #24]
   2c494:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   2c498:	4a0c      	ldr	r2, [pc, #48]	; (2c4cc <am_hal_pwrctrl_periph_disable+0x70>)
   2c49a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2c49e:	685b      	ldr	r3, [r3, #4]
   2c4a0:	4219      	tst	r1, r3
   2c4a2:	d001      	beq.n	2c4a8 <am_hal_pwrctrl_periph_disable+0x4c>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   2c4a4:	350a      	adds	r5, #10
   2c4a6:	e7ee      	b.n	2c486 <am_hal_pwrctrl_periph_disable+0x2a>
    if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
   2c4a8:	4b07      	ldr	r3, [pc, #28]	; (2c4c8 <am_hal_pwrctrl_periph_disable+0x6c>)
   2c4aa:	6998      	ldr	r0, [r3, #24]
   2c4ac:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2c4b0:	4a06      	ldr	r2, [pc, #24]	; (2c4cc <am_hal_pwrctrl_periph_disable+0x70>)
   2c4b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2c4b6:	685b      	ldr	r3, [r3, #4]
   2c4b8:	4018      	ands	r0, r3
   2c4ba:	d101      	bne.n	2c4c0 <am_hal_pwrctrl_periph_disable+0x64>
} // am_hal_pwrctrl_periph_disable()
   2c4bc:	b002      	add	sp, #8
   2c4be:	bd70      	pop	{r4, r5, r6, pc}
        return pwrctrl_periph_disable_msk_check(ePeripheral);
   2c4c0:	4620      	mov	r0, r4
   2c4c2:	f7ff feeb 	bl	2c29c <pwrctrl_periph_disable_msk_check>
   2c4c6:	e7f9      	b.n	2c4bc <am_hal_pwrctrl_periph_disable+0x60>
   2c4c8:	40021000 	.word	0x40021000
   2c4cc:	000337c0 	.word	0x000337c0

0002c4d0 <am_hal_pwrctrl_blebuck_trim>:
void am_hal_pwrctrl_blebuck_trim(void)
{
  //
  // Enable the BLE buck trim values
  //
  if ( APOLLO3_GE_A1 )
   2c4d0:	4b12      	ldr	r3, [pc, #72]	; (2c51c <am_hal_pwrctrl_blebuck_trim+0x4c>)
   2c4d2:	68db      	ldr	r3, [r3, #12]
   2c4d4:	b2db      	uxtb	r3, r3
   2c4d6:	2b11      	cmp	r3, #17
   2c4d8:	d800      	bhi.n	2c4dc <am_hal_pwrctrl_blebuck_trim+0xc>
   2c4da:	4770      	bx	lr
{
   2c4dc:	b500      	push	{lr}
   2c4de:	b083      	sub	sp, #12
  {
    AM_CRITICAL_BEGIN
   2c4e0:	f7ff fe2c 	bl	2c13c <am_hal_interrupt_master_disable>
   2c4e4:	9001      	str	r0, [sp, #4]
    MCUCTRL->BLEBUCK2_b.BLEBUCKTONHITRIM = 0x19;
   2c4e6:	4b0d      	ldr	r3, [pc, #52]	; (2c51c <am_hal_pwrctrl_blebuck_trim+0x4c>)
   2c4e8:	f8d3 2368 	ldr.w	r2, [r3, #872]	; 0x368
   2c4ec:	2119      	movs	r1, #25
   2c4ee:	f361 128b 	bfi	r2, r1, #6, #6
   2c4f2:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
    MCUCTRL->BLEBUCK2_b.BLEBUCKTONLOWTRIM = 0xC;
   2c4f6:	f8d3 2368 	ldr.w	r2, [r3, #872]	; 0x368
   2c4fa:	210c      	movs	r1, #12
   2c4fc:	f361 0205 	bfi	r2, r1, #0, #6
   2c500:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
    CLKGEN->BLEBUCKTONADJ_b.TONADJUSTEN = CLKGEN_BLEBUCKTONADJ_TONADJUSTEN_DIS;
   2c504:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2c508:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   2c50a:	f36f 5296 	bfc	r2, #22, #1
   2c50e:	63da      	str	r2, [r3, #60]	; 0x3c
    AM_CRITICAL_END
   2c510:	9801      	ldr	r0, [sp, #4]
   2c512:	f7ff fe17 	bl	2c144 <am_hal_interrupt_master_set>
  }
} // am_hal_pwrctrl_blebuck_trim()
   2c516:	b003      	add	sp, #12
   2c518:	f85d fb04 	ldr.w	pc, [sp], #4
   2c51c:	40020000 	.word	0x40020000

0002c520 <am_hal_pwrctrl_low_power_init>:
{
   2c520:	b500      	push	{lr}
   2c522:	b083      	sub	sp, #12
    if ( !gAmHalResetStatus )
   2c524:	4b2f      	ldr	r3, [pc, #188]	; (2c5e4 <am_hal_pwrctrl_low_power_init+0xc4>)
   2c526:	681b      	ldr	r3, [r3, #0]
   2c528:	b91b      	cbnz	r3, 2c532 <am_hal_pwrctrl_low_power_init+0x12>
        gAmHalResetStatus = RSTGEN->STAT;
   2c52a:	4b2f      	ldr	r3, [pc, #188]	; (2c5e8 <am_hal_pwrctrl_low_power_init+0xc8>)
   2c52c:	681a      	ldr	r2, [r3, #0]
   2c52e:	4b2d      	ldr	r3, [pc, #180]	; (2c5e4 <am_hal_pwrctrl_low_power_init+0xc4>)
   2c530:	601a      	str	r2, [r3, #0]
    if ((APOLLO3_A1) && (1 == PWRCTRL->SUPPLYSTATUS_b.SIMOBUCKON))
   2c532:	4b2e      	ldr	r3, [pc, #184]	; (2c5ec <am_hal_pwrctrl_low_power_init+0xcc>)
   2c534:	68db      	ldr	r3, [r3, #12]
   2c536:	b2db      	uxtb	r3, r3
   2c538:	2b12      	cmp	r3, #18
   2c53a:	d104      	bne.n	2c546 <am_hal_pwrctrl_low_power_init+0x26>
   2c53c:	4b2c      	ldr	r3, [pc, #176]	; (2c5f0 <am_hal_pwrctrl_low_power_init+0xd0>)
   2c53e:	685b      	ldr	r3, [r3, #4]
   2c540:	f013 0f01 	tst.w	r3, #1
   2c544:	d10e      	bne.n	2c564 <am_hal_pwrctrl_low_power_init+0x44>
    simobuck_updates();
   2c546:	f7ff fee7 	bl	2c318 <simobuck_updates>
    am_hal_cachectrl_control(AM_HAL_CACHECTRL_CONTROL_LPMMODE_RECOMMENDED, 0);
   2c54a:	2100      	movs	r1, #0
   2c54c:	200c      	movs	r0, #12
   2c54e:	f000 fb6d 	bl	2cc2c <am_hal_cachectrl_control>
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
   2c552:	4b27      	ldr	r3, [pc, #156]	; (2c5f0 <am_hal_pwrctrl_low_power_init+0xd0>)
   2c554:	699b      	ldr	r3, [r3, #24]
   2c556:	f413 7f80 	tst.w	r3, #256	; 0x100
   2c55a:	d009      	beq.n	2c570 <am_hal_pwrctrl_low_power_init+0x50>
    return AM_HAL_STATUS_SUCCESS;
   2c55c:	2000      	movs	r0, #0
} // am_hal_pwrctrl_low_power_init()
   2c55e:	b003      	add	sp, #12
   2c560:	f85d fb04 	ldr.w	pc, [sp], #4
        ui32Status = am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_PERIPH_PDM);
   2c564:	200d      	movs	r0, #13
   2c566:	f7ff ff31 	bl	2c3cc <am_hal_pwrctrl_periph_enable>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
   2c56a:	2800      	cmp	r0, #0
   2c56c:	d0eb      	beq.n	2c546 <am_hal_pwrctrl_low_power_init+0x26>
   2c56e:	e7f6      	b.n	2c55e <am_hal_pwrctrl_low_power_init+0x3e>
        am_hal_pwrctrl_blebuck_trim();
   2c570:	f7ff ffae 	bl	2c4d0 <am_hal_pwrctrl_blebuck_trim>
        MCUCTRL->FEATUREENABLE_b.BLEREQ = 1;
   2c574:	4a1d      	ldr	r2, [pc, #116]	; (2c5ec <am_hal_pwrctrl_low_power_init+0xcc>)
   2c576:	6993      	ldr	r3, [r2, #24]
   2c578:	f043 0301 	orr.w	r3, r3, #1
   2c57c:	6193      	str	r3, [r2, #24]
        ui32Status = am_hal_flash_delay_status_check(10000,
   2c57e:	2301      	movs	r3, #1
   2c580:	9300      	str	r3, [sp, #0]
   2c582:	2307      	movs	r3, #7
   2c584:	461a      	mov	r2, r3
   2c586:	491b      	ldr	r1, [pc, #108]	; (2c5f4 <am_hal_pwrctrl_low_power_init+0xd4>)
   2c588:	f242 7010 	movw	r0, #10000	; 0x2710
   2c58c:	f7ff fda8 	bl	2c0e0 <am_hal_flash_delay_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
   2c590:	bb30      	cbnz	r0, 2c5e0 <am_hal_pwrctrl_low_power_init+0xc0>
        PWRCTRL->SUPPLYSRC |= _VAL2FLD(PWRCTRL_SUPPLYSRC_BLEBUCKEN,
   2c592:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   2c596:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
   2c59a:	681a      	ldr	r2, [r3, #0]
   2c59c:	f042 0201 	orr.w	r2, r2, #1
   2c5a0:	601a      	str	r2, [r3, #0]
        PWRCTRL->MISC |= _VAL2FLD(PWRCTRL_MISC_MEMVRLPBLE,
   2c5a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2c5a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   2c5a8:	625a      	str	r2, [r3, #36]	; 0x24
        if ( APOLLO3_A0 )
   2c5aa:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   2c5ae:	68db      	ldr	r3, [r3, #12]
   2c5b0:	b2db      	uxtb	r3, r3
   2c5b2:	2b11      	cmp	r3, #17
   2c5b4:	d1d3      	bne.n	2c55e <am_hal_pwrctrl_low_power_init+0x3e>
            MCUCTRL->SIMOBUCK4_b.SIMOBUCKCLKDIVSEL = 0x0;
   2c5b6:	4b0d      	ldr	r3, [pc, #52]	; (2c5ec <am_hal_pwrctrl_low_power_init+0xcc>)
   2c5b8:	f8d3 235c 	ldr.w	r2, [r3, #860]	; 0x35c
   2c5bc:	f36f 5256 	bfc	r2, #21, #2
   2c5c0:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONHITRIM   = 0xF;
   2c5c4:	f8d3 2368 	ldr.w	r2, [r3, #872]	; 0x368
   2c5c8:	210f      	movs	r1, #15
   2c5ca:	f361 128b 	bfi	r2, r1, #6, #6
   2c5ce:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONLOWTRIM  = 0xF;
   2c5d2:	f8d3 2368 	ldr.w	r2, [r3, #872]	; 0x368
   2c5d6:	f361 0205 	bfi	r2, r1, #0, #6
   2c5da:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
   2c5de:	e7be      	b.n	2c55e <am_hal_pwrctrl_low_power_init+0x3e>
            return AM_HAL_STATUS_TIMEOUT;
   2c5e0:	2004      	movs	r0, #4
   2c5e2:	e7bc      	b.n	2c55e <am_hal_pwrctrl_low_power_init+0x3e>
   2c5e4:	100050fc 	.word	0x100050fc
   2c5e8:	4ffff000 	.word	0x4ffff000
   2c5ec:	40020000 	.word	0x40020000
   2c5f0:	40021000 	.word	0x40021000
   2c5f4:	40020018 	.word	0x40020018

0002c5f8 <apollo3_flash_sector_info>:

static int
apollo3_flash_sector_info(const struct hal_flash *dev, int idx, uint32_t *addr,
    uint32_t *sz)
{
    *addr = idx * AM_HAL_FLASH_PAGE_SIZE;
   2c5f8:	0349      	lsls	r1, r1, #13
   2c5fa:	6011      	str	r1, [r2, #0]
    *sz = AM_HAL_FLASH_PAGE_SIZE;
   2c5fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2c600:	601a      	str	r2, [r3, #0]

    return (0);
}
   2c602:	2000      	movs	r0, #0
   2c604:	4770      	bx	lr

0002c606 <apollo3_flash_init>:

static int
apollo3_flash_init(const struct hal_flash *dev)
{
    return (0);
}
   2c606:	2000      	movs	r0, #0
   2c608:	4770      	bx	lr
	...

0002c60c <apollo3_flash_erase_sector>:
{
   2c60c:	b508      	push	{r3, lr}
    rc = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, inst, page);
   2c60e:	f3c1 3245 	ubfx	r2, r1, #13, #6
   2c612:	f3c1 41c0 	ubfx	r1, r1, #19, #1
   2c616:	4802      	ldr	r0, [pc, #8]	; (2c620 <apollo3_flash_erase_sector+0x14>)
   2c618:	f7ff fd1c 	bl	2c054 <am_hal_flash_page_erase>
}
   2c61c:	bd08      	pop	{r3, pc}
   2c61e:	bf00      	nop
   2c620:	12344321 	.word	0x12344321

0002c624 <apollo3_flash_write_odd>:
{
   2c624:	b510      	push	{r4, lr}
   2c626:	b082      	sub	sp, #8
   2c628:	460c      	mov	r4, r1
   2c62a:	4611      	mov	r1, r2
   2c62c:	461a      	mov	r2, r3
    offset = address % 4;
   2c62e:	f004 0003 	and.w	r0, r4, #3
    assert(offset + num_bytes <= 4);
   2c632:	18c3      	adds	r3, r0, r3
   2c634:	2b04      	cmp	r3, #4
   2c636:	d80e      	bhi.n	2c656 <apollo3_flash_write_odd+0x32>
    base = (uint32_t *)(address - offset);
   2c638:	1a24      	subs	r4, r4, r0
    word = *base;
   2c63a:	6823      	ldr	r3, [r4, #0]
   2c63c:	9301      	str	r3, [sp, #4]
    memcpy(u8p, src, num_bytes);
   2c63e:	ab01      	add	r3, sp, #4
   2c640:	4418      	add	r0, r3
   2c642:	f7ea fa47 	bl	16ad4 <memcpy>
    rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, &word,
   2c646:	2301      	movs	r3, #1
   2c648:	4622      	mov	r2, r4
   2c64a:	a901      	add	r1, sp, #4
   2c64c:	4807      	ldr	r0, [pc, #28]	; (2c66c <apollo3_flash_write_odd+0x48>)
   2c64e:	f7ff fd07 	bl	2c060 <am_hal_flash_program_main>
}
   2c652:	b002      	add	sp, #8
   2c654:	bd10      	pop	{r4, pc}
    assert(offset + num_bytes <= 4);
   2c656:	f7e8 f805 	bl	14664 <hal_debugger_connected>
   2c65a:	b100      	cbz	r0, 2c65e <apollo3_flash_write_odd+0x3a>
   2c65c:	be01      	bkpt	0x0001
   2c65e:	2300      	movs	r3, #0
   2c660:	461a      	mov	r2, r3
   2c662:	4619      	mov	r1, r3
   2c664:	4618      	mov	r0, r3
   2c666:	f7e8 fb9d 	bl	14da4 <__assert_func>
   2c66a:	bf00      	nop
   2c66c:	12344321 	.word	0x12344321

0002c670 <apollo3_flash_write>:
{
   2c670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c674:	4607      	mov	r7, r0
   2c676:	460d      	mov	r5, r1
   2c678:	4616      	mov	r6, r2
   2c67a:	4698      	mov	r8, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2c67c:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2c680:	b672      	cpsid	i
    if (lead_off != 0) {
   2c682:	f011 0403 	ands.w	r4, r1, #3
   2c686:	d010      	beq.n	2c6aa <apollo3_flash_write+0x3a>
        lead_size = 4 - lead_off;
   2c688:	f1c4 0404 	rsb	r4, r4, #4
        if (lead_size > num_bytes) {
   2c68c:	429c      	cmp	r4, r3
   2c68e:	d900      	bls.n	2c692 <apollo3_flash_write+0x22>
            lead_size = num_bytes;
   2c690:	461c      	mov	r4, r3
        rc = apollo3_flash_write_odd(dev, address, u8p, lead_size);
   2c692:	4623      	mov	r3, r4
   2c694:	4632      	mov	r2, r6
   2c696:	4629      	mov	r1, r5
   2c698:	4638      	mov	r0, r7
   2c69a:	f7ff ffc3 	bl	2c624 <apollo3_flash_write_odd>
        if (rc != 0) {
   2c69e:	4603      	mov	r3, r0
   2c6a0:	bb98      	cbnz	r0, 2c70a <apollo3_flash_write+0x9a>
        u8p += lead_size;
   2c6a2:	4426      	add	r6, r4
        num_bytes -= lead_size;
   2c6a4:	eba8 0804 	sub.w	r8, r8, r4
        address += lead_size;
   2c6a8:	4425      	add	r5, r4
    if (num_bytes == 0) {
   2c6aa:	f1b8 0f00 	cmp.w	r8, #0
   2c6ae:	d02b      	beq.n	2c708 <apollo3_flash_write+0x98>
    words = num_bytes / 4;
   2c6b0:	ea4f 0b98 	mov.w	fp, r8, lsr #2
   2c6b4:	46d9      	mov	r9, fp
    if ((uint32_t)u8p % 4 == 0) {
   2c6b6:	f016 0f03 	tst.w	r6, #3
   2c6ba:	d00e      	beq.n	2c6da <apollo3_flash_write+0x6a>
        for (i = 0; i < words; i++) {
   2c6bc:	2400      	movs	r4, #0
   2c6be:	454c      	cmp	r4, r9
   2c6c0:	da13      	bge.n	2c6ea <apollo3_flash_write+0x7a>
            rc = apollo3_flash_write_odd(dev, address + i * 4, u8p + i * 4, 4);
   2c6c2:	2304      	movs	r3, #4
   2c6c4:	eb06 0284 	add.w	r2, r6, r4, lsl #2
   2c6c8:	eb05 0184 	add.w	r1, r5, r4, lsl #2
   2c6cc:	4638      	mov	r0, r7
   2c6ce:	f7ff ffa9 	bl	2c624 <apollo3_flash_write_odd>
            if (rc != 0) {
   2c6d2:	4603      	mov	r3, r0
   2c6d4:	b9c8      	cbnz	r0, 2c70a <apollo3_flash_write+0x9a>
        for (i = 0; i < words; i++) {
   2c6d6:	3401      	adds	r4, #1
   2c6d8:	e7f1      	b.n	2c6be <apollo3_flash_write+0x4e>
        rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY,
   2c6da:	465b      	mov	r3, fp
   2c6dc:	462a      	mov	r2, r5
   2c6de:	4631      	mov	r1, r6
   2c6e0:	480d      	ldr	r0, [pc, #52]	; (2c718 <apollo3_flash_write+0xa8>)
   2c6e2:	f7ff fcbd 	bl	2c060 <am_hal_flash_program_main>
        if (rc != 0) {
   2c6e6:	4603      	mov	r3, r0
   2c6e8:	b978      	cbnz	r0, 2c70a <apollo3_flash_write+0x9a>
    remainder = num_bytes - (words * 4);
   2c6ea:	ea4f 018b 	mov.w	r1, fp, lsl #2
   2c6ee:	eba8 038b 	sub.w	r3, r8, fp, lsl #2
    if (remainder > 0) {
   2c6f2:	2b00      	cmp	r3, #0
   2c6f4:	dc01      	bgt.n	2c6fa <apollo3_flash_write+0x8a>
    rc = 0;
   2c6f6:	2300      	movs	r3, #0
   2c6f8:	e007      	b.n	2c70a <apollo3_flash_write+0x9a>
        rc = apollo3_flash_write_odd(dev,
   2c6fa:	1872      	adds	r2, r6, r1
   2c6fc:	4429      	add	r1, r5
   2c6fe:	4638      	mov	r0, r7
   2c700:	f7ff ff90 	bl	2c624 <apollo3_flash_write_odd>
   2c704:	4603      	mov	r3, r0
        if (rc != 0) {
   2c706:	e000      	b.n	2c70a <apollo3_flash_write+0x9a>
        rc = 0;
   2c708:	2300      	movs	r3, #0
    __HAL_ENABLE_INTERRUPTS(sr);
   2c70a:	f1ba 0f00 	cmp.w	sl, #0
   2c70e:	d100      	bne.n	2c712 <apollo3_flash_write+0xa2>
  __ASM volatile ("cpsie i" : : : "memory");
   2c710:	b662      	cpsie	i
}
   2c712:	4618      	mov	r0, r3
   2c714:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c718:	12344321 	.word	0x12344321

0002c71c <apollo3_flash_read>:
{
   2c71c:	b508      	push	{r3, lr}
   2c71e:	4610      	mov	r0, r2
    memcpy(dst, (void *) address, num_bytes);
   2c720:	461a      	mov	r2, r3
   2c722:	f7ea f9d7 	bl	16ad4 <memcpy>
}
   2c726:	2000      	movs	r0, #0
   2c728:	bd08      	pop	{r3, pc}
	...

0002c72c <apollo2_os_tick_set_timer>:
/*** Number of system ticks per single OS tick. */
static uint32_t apollo2_os_tick_dur;

static void
apollo2_os_tick_set_timer(int os_ticks)
{
   2c72c:	b538      	push	{r3, r4, r5, lr}
   2c72e:	4604      	mov	r4, r0
    uint32_t sys_ticks;
    uint32_t cfg;

    OS_ASSERT_CRITICAL();
   2c730:	f7ea f805 	bl	1673e <os_arch_in_critical>
   2c734:	b180      	cbz	r0, 2c758 <apollo2_os_tick_set_timer+0x2c>

    sys_ticks = os_ticks * apollo2_os_tick_dur;
   2c736:	4b0d      	ldr	r3, [pc, #52]	; (2c76c <apollo2_os_tick_set_timer+0x40>)
   2c738:	6818      	ldr	r0, [r3, #0]
   2c73a:	fb00 f404 	mul.w	r4, r0, r4

    /* Freeze time, set timer expiry, then unfreeze time. */
    cfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
   2c73e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   2c742:	f000 fe33 	bl	2d3ac <am_hal_stimer_config>
   2c746:	4605      	mov	r5, r0
    am_hal_stimer_compare_delta_set(0, sys_ticks);
   2c748:	4621      	mov	r1, r4
   2c74a:	2000      	movs	r0, #0
   2c74c:	f000 fe58 	bl	2d400 <am_hal_stimer_compare_delta_set>
    am_hal_stimer_config(cfg);
   2c750:	4628      	mov	r0, r5
   2c752:	f000 fe2b 	bl	2d3ac <am_hal_stimer_config>
}
   2c756:	bd38      	pop	{r3, r4, r5, pc}
    OS_ASSERT_CRITICAL();
   2c758:	f7e7 ff84 	bl	14664 <hal_debugger_connected>
   2c75c:	b100      	cbz	r0, 2c760 <apollo2_os_tick_set_timer+0x34>
   2c75e:	be01      	bkpt	0x0001
   2c760:	2300      	movs	r3, #0
   2c762:	461a      	mov	r2, r3
   2c764:	4619      	mov	r1, r3
   2c766:	4618      	mov	r0, r3
   2c768:	f7e8 fb1c 	bl	14da4 <__assert_func>
   2c76c:	10005100 	.word	0x10005100

0002c770 <apollo2_os_tick_handler>:

static void
apollo2_os_tick_handler(void)
{
   2c770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t cur;
    int os_ticks;
    int delta;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   2c772:	f7e9 ffdb 	bl	1672c <os_arch_save_sr>
   2c776:	4605      	mov	r5, r0

    /* Calculate elapsed ticks and advance OS time. */
    cur = am_hal_stimer_counter_get();
   2c778:	f000 fe22 	bl	2d3c0 <am_hal_stimer_counter_get>
    delta = cur - apollo2_os_tick_prev;
   2c77c:	4e0c      	ldr	r6, [pc, #48]	; (2c7b0 <apollo2_os_tick_handler+0x40>)
   2c77e:	6834      	ldr	r4, [r6, #0]
   2c780:	1b04      	subs	r4, r0, r4
    os_ticks = delta / apollo2_os_tick_dur;
   2c782:	4f0c      	ldr	r7, [pc, #48]	; (2c7b4 <apollo2_os_tick_handler+0x44>)
   2c784:	6838      	ldr	r0, [r7, #0]
   2c786:	fbb4 f4f0 	udiv	r4, r4, r0
    os_time_advance(os_ticks);
   2c78a:	4620      	mov	r0, r4
   2c78c:	f7e9 ff0e 	bl	165ac <os_time_advance>

    /* Clear timer interrupt. */
    am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   2c790:	2001      	movs	r0, #1
   2c792:	f000 fe7b 	bl	2d48c <am_hal_stimer_int_clear>

    /* Update the time associated with the most recent tick. */
    apollo2_os_tick_prev += os_ticks * apollo2_os_tick_dur;
   2c796:	683b      	ldr	r3, [r7, #0]
   2c798:	6830      	ldr	r0, [r6, #0]
   2c79a:	fb03 0404 	mla	r4, r3, r4, r0
   2c79e:	6034      	str	r4, [r6, #0]

    /* Schedule timer to interrupt at the next tick. */
    apollo2_os_tick_set_timer(1);
   2c7a0:	2001      	movs	r0, #1
   2c7a2:	f7ff ffc3 	bl	2c72c <apollo2_os_tick_set_timer>

    OS_EXIT_CRITICAL(sr);
   2c7a6:	4628      	mov	r0, r5
   2c7a8:	f7e9 ffc6 	bl	16738 <os_arch_restore_sr>
}
   2c7ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c7ae:	bf00      	nop
   2c7b0:	10005104 	.word	0x10005104
   2c7b4:	10005100 	.word	0x10005100

0002c7b8 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   2c7b8:	b510      	push	{r4, lr}
   2c7ba:	4604      	mov	r4, r0
    OS_ASSERT_CRITICAL();
   2c7bc:	f7e9 ffbf 	bl	1673e <os_arch_in_critical>
   2c7c0:	b128      	cbz	r0, 2c7ce <os_tick_idle+0x16>
     */

    /* Only set the timer for nonzero tick values.  For values of 0, just let
     * the timer expire on the next tick, as scheduled earlier.
     */
    if (ticks > 0) {
   2c7c2:	b974      	cbnz	r4, 2c7e2 <os_tick_idle+0x2a>
  __ASM volatile ("dsb 0xF":::"memory");
   2c7c4:	f3bf 8f4f 	dsb	sy
        apollo2_os_tick_set_timer(ticks);
    }

    __DSB();
    __WFI();
   2c7c8:	bf30      	wfi

    if (ticks > 0) {
   2c7ca:	b974      	cbnz	r4, 2c7ea <os_tick_idle+0x32>
        apollo2_os_tick_handler();
    }
}
   2c7cc:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   2c7ce:	f7e7 ff49 	bl	14664 <hal_debugger_connected>
   2c7d2:	b100      	cbz	r0, 2c7d6 <os_tick_idle+0x1e>
   2c7d4:	be01      	bkpt	0x0001
   2c7d6:	2300      	movs	r3, #0
   2c7d8:	461a      	mov	r2, r3
   2c7da:	4619      	mov	r1, r3
   2c7dc:	4618      	mov	r0, r3
   2c7de:	f7e8 fae1 	bl	14da4 <__assert_func>
        apollo2_os_tick_set_timer(ticks);
   2c7e2:	4620      	mov	r0, r4
   2c7e4:	f7ff ffa2 	bl	2c72c <apollo2_os_tick_set_timer>
   2c7e8:	e7ec      	b.n	2c7c4 <os_tick_idle+0xc>
        apollo2_os_tick_handler();
   2c7ea:	f7ff ffc1 	bl	2c770 <apollo2_os_tick_handler>
}
   2c7ee:	e7ed      	b.n	2c7cc <os_tick_idle+0x14>

0002c7f0 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   2c7f0:	b538      	push	{r3, r4, r5, lr}
   2c7f2:	4605      	mov	r5, r0
   2c7f4:	460c      	mov	r4, r1
    os_sr_t sr;

    /* Reset the timer to 0. */
    am_hal_stimer_counter_clear();
   2c7f6:	f000 fdf3 	bl	2d3e0 <am_hal_stimer_counter_clear>

    /* The OS tick timer uses:
     * o The 1024 Hz low-frequency RC oscillator (LFRC)
     * o The first comparator (COMPAREA)
     */
    am_hal_stimer_config(AM_HAL_STIMER_LFRC_1KHZ |
   2c7fa:	f44f 7083 	mov.w	r0, #262	; 0x106
   2c7fe:	f000 fdd5 	bl	2d3ac <am_hal_stimer_config>
                         AM_HAL_STIMER_CFG_COMPARE_A_ENABLE);
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA);
   2c802:	2001      	movs	r0, #1
   2c804:	f000 fe38 	bl	2d478 <am_hal_stimer_int_enable>

    apollo2_os_tick_dur = APOLLO2_OS_TICK_FREQ / os_ticks_per_sec;
   2c808:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2c80c:	fbb3 f5f5 	udiv	r5, r3, r5
   2c810:	4b0c      	ldr	r3, [pc, #48]	; (2c844 <os_tick_init+0x54>)
   2c812:	601d      	str	r5, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2c814:	0164      	lsls	r4, r4, #5
   2c816:	b2e4      	uxtb	r4, r4
   2c818:	4b0b      	ldr	r3, [pc, #44]	; (2c848 <os_tick_init+0x58>)
   2c81a:	f883 4317 	strb.w	r4, [r3, #791]	; 0x317
  uint32_t vectors = (uint32_t )SCB->VTOR;
   2c81e:	4a0b      	ldr	r2, [pc, #44]	; (2c84c <os_tick_init+0x5c>)
   2c820:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   2c822:	490b      	ldr	r1, [pc, #44]	; (2c850 <os_tick_init+0x60>)
   2c824:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2c828:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2c82c:	601a      	str	r2, [r3, #0]
    NVIC_SetPriority(APOLLO2_OS_TICK_IRQ, prio);
    NVIC_SetVector(APOLLO2_OS_TICK_IRQ, (uint32_t)apollo2_os_tick_handler);
    NVIC_EnableIRQ(APOLLO2_OS_TICK_IRQ);

    /* Schedule timer to interrupt at the next tick. */
    OS_ENTER_CRITICAL(sr);
   2c82e:	f7e9 ff7d 	bl	1672c <os_arch_save_sr>
   2c832:	4604      	mov	r4, r0
    apollo2_os_tick_set_timer(1);
   2c834:	2001      	movs	r0, #1
   2c836:	f7ff ff79 	bl	2c72c <apollo2_os_tick_set_timer>
    OS_EXIT_CRITICAL(sr);
   2c83a:	4620      	mov	r0, r4
   2c83c:	f7e9 ff7c 	bl	16738 <os_arch_restore_sr>
}
   2c840:	bd38      	pop	{r3, r4, r5, pc}
   2c842:	bf00      	nop
   2c844:	10005100 	.word	0x10005100
   2c848:	e000e100 	.word	0xe000e100
   2c84c:	e000ed00 	.word	0xe000ed00
   2c850:	0002c771 	.word	0x0002c771

0002c854 <apollo3_timer_resolve>:
#endif

static struct apollo3_timer *
apollo3_timer_resolve(int timer_num)
{
    switch (timer_num) {
   2c854:	b908      	cbnz	r0, 2c85a <apollo3_timer_resolve+0x6>
#if MYNEWT_VAL(TIMER_0)
        case 0:     return &apollo3_timer_0;
   2c856:	4802      	ldr	r0, [pc, #8]	; (2c860 <apollo3_timer_resolve+0xc>)
   2c858:	4770      	bx	lr
        case 1:     return &apollo3_timer_1;
#endif
#if MYNEWT_VAL(ADC_0)
        case 3:     return &apollo3_timer_adc;
#endif
        default:    return NULL;
   2c85a:	2000      	movs	r0, #0
    }
}
   2c85c:	4770      	bx	lr
   2c85e:	bf00      	nop
   2c860:	10001a8c 	.word	0x10001a8c

0002c864 <apollo3_timer_tbl_find>:
 * matches the one specified.
 */
static const struct apollo3_timer_freq_entry *
apollo3_timer_tbl_find(const struct apollo3_timer_freq_entry *table,
                       uint32_t freq)
{
   2c864:	b430      	push	{r4, r5}
   2c866:	4604      	mov	r4, r0
    int i;

    /* If the requested value is less than all entries in the table, return the
     * smallest one.
     */
    if (table[0].freq >= freq) {
   2c868:	6803      	ldr	r3, [r0, #0]
   2c86a:	428b      	cmp	r3, r1
   2c86c:	d218      	bcs.n	2c8a0 <apollo3_timer_tbl_find+0x3c>

    /* Find the first entry with a frequency value that is greater than the one
     * being requested.  Then determine which of it or its predecessor is
     * closer to the specified value.
     */
    for (i = 1; table[i].freq != 0; i++) {
   2c86e:	2301      	movs	r3, #1
   2c870:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
   2c874:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
   2c878:	b16a      	cbz	r2, 2c896 <apollo3_timer_tbl_find+0x32>
        cur = &table[i];
        if (cur->freq >= freq) {
   2c87a:	428a      	cmp	r2, r1
   2c87c:	d201      	bcs.n	2c882 <apollo3_timer_tbl_find+0x1e>
    for (i = 1; table[i].freq != 0; i++) {
   2c87e:	3301      	adds	r3, #1
   2c880:	e7f6      	b.n	2c870 <apollo3_timer_tbl_find+0xc>
            prev = cur - 1;
   2c882:	f1a0 0408 	sub.w	r4, r0, #8
            delta1 = freq - prev->freq;
   2c886:	f850 3c08 	ldr.w	r3, [r0, #-8]
   2c88a:	1acb      	subs	r3, r1, r3
            delta2 = cur->freq - freq;
   2c88c:	1a52      	subs	r2, r2, r1

            if (delta1 <= delta2) {
   2c88e:	4293      	cmp	r3, r2
   2c890:	d806      	bhi.n	2c8a0 <apollo3_timer_tbl_find+0x3c>
                return prev;
   2c892:	4620      	mov	r0, r4
   2c894:	e004      	b.n	2c8a0 <apollo3_timer_tbl_find+0x3c>
    }

    /* Requested value is greater than all entries in the table; return the
     * largest.
     */
    return table + i - 1;
   2c896:	f103 5000 	add.w	r0, r3, #536870912	; 0x20000000
   2c89a:	3801      	subs	r0, #1
   2c89c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
}
   2c8a0:	bc30      	pop	{r4, r5}
   2c8a2:	4770      	bx	lr

0002c8a4 <apollo3_timer_sdk_cfg>:
 * ORed in, depending on the MCU timer being configured.
 */
static int
apollo3_timer_sdk_cfg(const struct apollo3_timer_cfg *cfg, uint32_t freq_hz,
                      uint32_t *out_actual_hz, uint32_t *out_cfg)
{
   2c8a4:	b538      	push	{r3, r4, r5, lr}
   2c8a6:	4615      	mov	r5, r2
   2c8a8:	461c      	mov	r4, r3
    const struct apollo3_timer_freq_entry *entry;

    switch (cfg->source) {
   2c8aa:	7800      	ldrb	r0, [r0, #0]
   2c8ac:	3801      	subs	r0, #1
   2c8ae:	2804      	cmp	r0, #4
   2c8b0:	d82b      	bhi.n	2c90a <apollo3_timer_sdk_cfg+0x66>
   2c8b2:	e8df f000 	tbb	[pc, r0]
   2c8b6:	0c03      	.short	0x0c03
   2c8b8:	1e15      	.short	0x1e15
   2c8ba:	24          	.byte	0x24
   2c8bb:	00          	.byte	0x00
    case APOLLO3_TIMER_SOURCE_HFRC:
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_hfrc, freq_hz);
   2c8bc:	4814      	ldr	r0, [pc, #80]	; (2c910 <apollo3_timer_sdk_cfg+0x6c>)
   2c8be:	f7ff ffd1 	bl	2c864 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   2c8c2:	6803      	ldr	r3, [r0, #0]
   2c8c4:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   2c8c6:	6843      	ldr	r3, [r0, #4]
   2c8c8:	6023      	str	r3, [r4, #0]
        return 0;
   2c8ca:	2000      	movs	r0, #0
        return 0;

    default:
        return SYS_EINVAL;
    }
}
   2c8cc:	bd38      	pop	{r3, r4, r5, pc}
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_xt, freq_hz);
   2c8ce:	4811      	ldr	r0, [pc, #68]	; (2c914 <apollo3_timer_sdk_cfg+0x70>)
   2c8d0:	f7ff ffc8 	bl	2c864 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   2c8d4:	6803      	ldr	r3, [r0, #0]
   2c8d6:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   2c8d8:	6843      	ldr	r3, [r0, #4]
   2c8da:	6023      	str	r3, [r4, #0]
        return 0;
   2c8dc:	2000      	movs	r0, #0
   2c8de:	e7f5      	b.n	2c8cc <apollo3_timer_sdk_cfg+0x28>
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_lfrc, freq_hz);
   2c8e0:	480d      	ldr	r0, [pc, #52]	; (2c918 <apollo3_timer_sdk_cfg+0x74>)
   2c8e2:	f7ff ffbf 	bl	2c864 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   2c8e6:	6803      	ldr	r3, [r0, #0]
   2c8e8:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   2c8ea:	6843      	ldr	r3, [r0, #4]
   2c8ec:	6023      	str	r3, [r4, #0]
        return 0;
   2c8ee:	2000      	movs	r0, #0
   2c8f0:	e7ec      	b.n	2c8cc <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 100;
   2c8f2:	2364      	movs	r3, #100	; 0x64
   2c8f4:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_RTC_100HZ;
   2c8f6:	231c      	movs	r3, #28
   2c8f8:	6023      	str	r3, [r4, #0]
        return 0;
   2c8fa:	2000      	movs	r0, #0
   2c8fc:	e7e6      	b.n	2c8cc <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 48000000;
   2c8fe:	4b07      	ldr	r3, [pc, #28]	; (2c91c <apollo3_timer_sdk_cfg+0x78>)
   2c900:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_HCLK_DIV4;
   2c902:	231e      	movs	r3, #30
   2c904:	6023      	str	r3, [r4, #0]
        return 0;
   2c906:	2000      	movs	r0, #0
   2c908:	e7e0      	b.n	2c8cc <apollo3_timer_sdk_cfg+0x28>
    switch (cfg->source) {
   2c90a:	f06f 0001 	mvn.w	r0, #1
   2c90e:	e7dd      	b.n	2c8cc <apollo3_timer_sdk_cfg+0x28>
   2c910:	000338a8 	.word	0x000338a8
   2c914:	00033900 	.word	0x00033900
   2c918:	000338d8 	.word	0x000338d8
   2c91c:	02dc6c00 	.word	0x02dc6c00

0002c920 <apollo3_timer_isr_cfg>:
 */ 
static int
apollo3_timer_isr_cfg(const struct apollo3_timer *bsp_timer,
                      uint32_t *out_isr_cfg)
{
    switch (bsp_timer->once_timer_idx) {
   2c920:	7c43      	ldrb	r3, [r0, #17]
   2c922:	2b01      	cmp	r3, #1
   2c924:	d103      	bne.n	2c92e <apollo3_timer_isr_cfg+0xe>
#if MYNEWT_VAL(TIMER_0)
    case 1:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA1C0;
   2c926:	2304      	movs	r3, #4
   2c928:	600b      	str	r3, [r1, #0]
        return 0;
   2c92a:	2000      	movs	r0, #0
   2c92c:	4770      	bx	lr
    case 3:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA3C0;
        return 0;
#endif
    default:
        return SYS_EINVAL;
   2c92e:	f06f 0001 	mvn.w	r0, #1
    }
}
   2c932:	4770      	bx	lr

0002c934 <apollo3_timer_cur_ticks>:
/**
 * Retrieves the current time from the specified timer.
 */
static uint32_t
apollo3_timer_cur_ticks(const struct apollo3_timer *bsp_timer)
{
   2c934:	b508      	push	{r3, lr}
    return am_hal_ctimer_read(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   2c936:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2c93a:	7c00      	ldrb	r0, [r0, #16]
   2c93c:	f000 fafa 	bl	2cf34 <am_hal_ctimer_read>
}
   2c940:	bd08      	pop	{r3, pc}

0002c942 <apollo3_timer_set_ocmp>:
 * time.
 */
static void
apollo3_timer_set_ocmp(const struct apollo3_timer *bsp_timer,
                       uint32_t ticks_from_now)
{
   2c942:	b530      	push	{r4, r5, lr}
   2c944:	b083      	sub	sp, #12
   2c946:	4604      	mov	r4, r0
   2c948:	460d      	mov	r5, r1
    uint32_t isr_cfg;
    int rc;

    /* Calculate the ISR flags for the "once" timer. */
    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   2c94a:	a901      	add	r1, sp, #4
   2c94c:	f7ff ffe8 	bl	2c920 <apollo3_timer_isr_cfg>
    assert(rc == 0);
   2c950:	b9e8      	cbnz	r0, 2c98e <apollo3_timer_set_ocmp+0x4c>

    /* Clear any pending interrupt for this timer. */
    am_hal_ctimer_int_clear(isr_cfg);
   2c952:	9801      	ldr	r0, [sp, #4]
   2c954:	f000 fba8 	bl	2d0a8 <am_hal_ctimer_int_clear>

    /* Stop and clear the "once" timer. */
    am_hal_ctimer_stop(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   2c958:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2c95c:	7c60      	ldrb	r0, [r4, #17]
   2c95e:	f000 fabf 	bl	2cee0 <am_hal_ctimer_stop>
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   2c962:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2c966:	7c60      	ldrb	r0, [r4, #17]
   2c968:	f000 fad0 	bl	2cf0c <am_hal_ctimer_clear>

    /* Schedule an interrupt at the requested relative time. */
    am_hal_ctimer_period_set(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
   2c96c:	2300      	movs	r3, #0
   2c96e:	462a      	mov	r2, r5
   2c970:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2c974:	7c60      	ldrb	r0, [r4, #17]
   2c976:	f000 fb25 	bl	2cfc4 <am_hal_ctimer_period_set>
                             ticks_from_now, 0);

    /* Enable interrupts for this timer, in case they haven't been enabled
     * yet.
     */
    am_hal_ctimer_int_enable(isr_cfg);
   2c97a:	9801      	ldr	r0, [sp, #4]
   2c97c:	f000 fb6c 	bl	2d058 <am_hal_ctimer_int_enable>

    /* Restart the timer. */
    am_hal_ctimer_start(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   2c980:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2c984:	7c60      	ldrb	r0, [r4, #17]
   2c986:	f000 fa81 	bl	2ce8c <am_hal_ctimer_start>
}
   2c98a:	b003      	add	sp, #12
   2c98c:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
   2c98e:	f7e7 fe69 	bl	14664 <hal_debugger_connected>
   2c992:	b100      	cbz	r0, 2c996 <apollo3_timer_set_ocmp+0x54>
   2c994:	be01      	bkpt	0x0001
   2c996:	2300      	movs	r3, #0
   2c998:	461a      	mov	r2, r3
   2c99a:	4619      	mov	r1, r3
   2c99c:	4618      	mov	r0, r3
   2c99e:	f7e8 fa01 	bl	14da4 <__assert_func>

0002c9a2 <apollo3_timer_set_ocmp_at>:
 * Configures a BSP timer to generate an interrupt at the specified absolute
 * time.
 */
static void
apollo3_timer_set_ocmp_at(const struct apollo3_timer *bsp_timer, uint32_t at)
{
   2c9a2:	b530      	push	{r4, r5, lr}
   2c9a4:	b083      	sub	sp, #12
   2c9a6:	4605      	mov	r5, r0
   2c9a8:	460c      	mov	r4, r1
    uint32_t isr_cfg;
    uint32_t now;
    int32_t ticks_from_now;
    int rc;

    now = apollo3_timer_cur_ticks(bsp_timer);
   2c9aa:	f7ff ffc3 	bl	2c934 <apollo3_timer_cur_ticks>
    ticks_from_now = at - now;
   2c9ae:	1a21      	subs	r1, r4, r0
    if (ticks_from_now <= 0) {
   2c9b0:	2900      	cmp	r1, #0
   2c9b2:	dd04      	ble.n	2c9be <apollo3_timer_set_ocmp_at+0x1c>
        /* Event already occurred. */
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
        assert(rc == 0);
        am_hal_ctimer_int_set(isr_cfg);
    } else {
        apollo3_timer_set_ocmp(bsp_timer, ticks_from_now);
   2c9b4:	4628      	mov	r0, r5
   2c9b6:	f7ff ffc4 	bl	2c942 <apollo3_timer_set_ocmp>
    }
}
   2c9ba:	b003      	add	sp, #12
   2c9bc:	bd30      	pop	{r4, r5, pc}
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   2c9be:	a901      	add	r1, sp, #4
   2c9c0:	4628      	mov	r0, r5
   2c9c2:	f7ff ffad 	bl	2c920 <apollo3_timer_isr_cfg>
        assert(rc == 0);
   2c9c6:	b918      	cbnz	r0, 2c9d0 <apollo3_timer_set_ocmp_at+0x2e>
        am_hal_ctimer_int_set(isr_cfg);
   2c9c8:	9801      	ldr	r0, [sp, #4]
   2c9ca:	f000 fb7d 	bl	2d0c8 <am_hal_ctimer_int_set>
   2c9ce:	e7f4      	b.n	2c9ba <apollo3_timer_set_ocmp_at+0x18>
        assert(rc == 0);
   2c9d0:	f7e7 fe48 	bl	14664 <hal_debugger_connected>
   2c9d4:	b100      	cbz	r0, 2c9d8 <apollo3_timer_set_ocmp_at+0x36>
   2c9d6:	be01      	bkpt	0x0001
   2c9d8:	2300      	movs	r3, #0
   2c9da:	461a      	mov	r2, r3
   2c9dc:	4619      	mov	r1, r3
   2c9de:	4618      	mov	r0, r3
   2c9e0:	f7e8 f9e0 	bl	14da4 <__assert_func>

0002c9e4 <apollo3_timer_clear_ocmp>:
/**
 * Unsets a scheduled interrupt for the specified BSP timer.
 */
static void
apollo3_timer_clear_ocmp(const struct apollo3_timer *bsp_timer)
{
   2c9e4:	b500      	push	{lr}
   2c9e6:	b083      	sub	sp, #12
    uint32_t isr_cfg;
    int rc;

    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   2c9e8:	a901      	add	r1, sp, #4
   2c9ea:	f7ff ff99 	bl	2c920 <apollo3_timer_isr_cfg>
    assert(rc == 0);
   2c9ee:	b928      	cbnz	r0, 2c9fc <apollo3_timer_clear_ocmp+0x18>

    am_hal_ctimer_int_disable(isr_cfg);
   2c9f0:	9801      	ldr	r0, [sp, #4]
   2c9f2:	f000 fb45 	bl	2d080 <am_hal_ctimer_int_disable>
}
   2c9f6:	b003      	add	sp, #12
   2c9f8:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   2c9fc:	f7e7 fe32 	bl	14664 <hal_debugger_connected>
   2ca00:	b100      	cbz	r0, 2ca04 <apollo3_timer_clear_ocmp+0x20>
   2ca02:	be01      	bkpt	0x0001
   2ca04:	2300      	movs	r3, #0
   2ca06:	461a      	mov	r2, r3
   2ca08:	4619      	mov	r1, r3
   2ca0a:	4618      	mov	r0, r3
   2ca0c:	f7e8 f9ca 	bl	14da4 <__assert_func>

0002ca10 <apollo3_timer_chk_queue>:
 * Executes callbacks for all expired timers in a BSP timer's queue.  This
 * function is called when a timer interrupt is handled.
 */
static void
apollo3_timer_chk_queue(struct apollo3_timer *bsp_timer)
{
   2ca10:	b570      	push	{r4, r5, r6, lr}
   2ca12:	4605      	mov	r5, r0
    struct hal_timer *timer;
    uint32_t ticks;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   2ca14:	f7e9 fe8a 	bl	1672c <os_arch_save_sr>
   2ca18:	4606      	mov	r6, r0

    /* Remove and process each expired timer in the sorted queue. */
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
   2ca1a:	e009      	b.n	2ca30 <apollo3_timer_chk_queue+0x20>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
        if ((int32_t)(ticks - timer->expiry) >= 0) {
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   2ca1c:	6963      	ldr	r3, [r4, #20]
   2ca1e:	606b      	str	r3, [r5, #4]
   2ca20:	6963      	ldr	r3, [r4, #20]
   2ca22:	6922      	ldr	r2, [r4, #16]
   2ca24:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   2ca26:	2300      	movs	r3, #0
   2ca28:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   2ca2a:	6863      	ldr	r3, [r4, #4]
   2ca2c:	68a0      	ldr	r0, [r4, #8]
   2ca2e:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
   2ca30:	682c      	ldr	r4, [r5, #0]
   2ca32:	b164      	cbz	r4, 2ca4e <apollo3_timer_chk_queue+0x3e>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
   2ca34:	4628      	mov	r0, r5
   2ca36:	f7ff ff7d 	bl	2c934 <apollo3_timer_cur_ticks>
        if ((int32_t)(ticks - timer->expiry) >= 0) {
   2ca3a:	68e3      	ldr	r3, [r4, #12]
   2ca3c:	1ac0      	subs	r0, r0, r3
   2ca3e:	2800      	cmp	r0, #0
   2ca40:	db05      	blt.n	2ca4e <apollo3_timer_chk_queue+0x3e>
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   2ca42:	6923      	ldr	r3, [r4, #16]
   2ca44:	2b00      	cmp	r3, #0
   2ca46:	d0e9      	beq.n	2ca1c <apollo3_timer_chk_queue+0xc>
   2ca48:	6962      	ldr	r2, [r4, #20]
   2ca4a:	615a      	str	r2, [r3, #20]
   2ca4c:	e7e8      	b.n	2ca20 <apollo3_timer_chk_queue+0x10>
    }

    /* If any timers remain, schedule an interrupt for the timer that expires
     * next.
     */
    if (timer != NULL) {
   2ca4e:	b13c      	cbz	r4, 2ca60 <apollo3_timer_chk_queue+0x50>
        apollo3_timer_set_ocmp_at(bsp_timer, timer->expiry);
   2ca50:	68e1      	ldr	r1, [r4, #12]
   2ca52:	4628      	mov	r0, r5
   2ca54:	f7ff ffa5 	bl	2c9a2 <apollo3_timer_set_ocmp_at>
    } else {
        apollo3_timer_clear_ocmp(bsp_timer);
    }

    OS_EXIT_CRITICAL(sr);
   2ca58:	4630      	mov	r0, r6
   2ca5a:	f7e9 fe6d 	bl	16738 <os_arch_restore_sr>
}
   2ca5e:	bd70      	pop	{r4, r5, r6, pc}
        apollo3_timer_clear_ocmp(bsp_timer);
   2ca60:	4628      	mov	r0, r5
   2ca62:	f7ff ffbf 	bl	2c9e4 <apollo3_timer_clear_ocmp>
   2ca66:	e7f7      	b.n	2ca58 <apollo3_timer_chk_queue+0x48>

0002ca68 <apollo3_timer_isr>:
/**
 * Handles a ctimer interrupt.
 */
static void
apollo3_timer_isr(void)
{
   2ca68:	b510      	push	{r4, lr}
    uint32_t status;

    /* Read the ctimer status to determine which timers generated the
     * interrupt.
     */
    status = am_hal_ctimer_int_status_get(true);
   2ca6a:	2001      	movs	r0, #1
   2ca6c:	f000 fb3c 	bl	2d0e8 <am_hal_ctimer_int_status_get>
   2ca70:	4604      	mov	r4, r0
    am_hal_ctimer_int_clear(status);
   2ca72:	f000 fb19 	bl	2d0a8 <am_hal_ctimer_int_clear>

    /* Service the appropriate timers. */
#if MYNEWT_VAL(TIMER_0)
    if (status & (AM_HAL_CTIMER_INT_TIMERA1C0 | AM_HAL_CTIMER_INT_TIMERA1C1)) {
   2ca76:	f014 1f04 	tst.w	r4, #262148	; 0x40004
   2ca7a:	d100      	bne.n	2ca7e <apollo3_timer_isr+0x16>
#if MYNEWT_VAL(ADC_0)
    if (status & AM_HAL_CTIMER_INT_TIMERA3C0) {
        apollo3_timer_chk_queue(&apollo3_timer_adc);
    }
#endif
}
   2ca7c:	bd10      	pop	{r4, pc}
        apollo3_timer_chk_queue(&apollo3_timer_0);
   2ca7e:	4802      	ldr	r0, [pc, #8]	; (2ca88 <apollo3_timer_isr+0x20>)
   2ca80:	f7ff ffc6 	bl	2ca10 <apollo3_timer_chk_queue>
}
   2ca84:	e7fa      	b.n	2ca7c <apollo3_timer_isr+0x14>
   2ca86:	bf00      	nop
   2ca88:	10001a8c 	.word	0x10001a8c

0002ca8c <hal_timer_init>:
 *
 * @return int          0: success; error code otherwise
 */
int
hal_timer_init(int timer_num, void *vcfg)
{
   2ca8c:	b510      	push	{r4, lr}
   2ca8e:	460c      	mov	r4, r1
    static int nvic_configured;

    const struct apollo3_timer_cfg *bsp_cfg;
    struct apollo3_timer *bsp_timer;

    bsp_timer = apollo3_timer_resolve(timer_num);
   2ca90:	f7ff fee0 	bl	2c854 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
   2ca94:	b1b8      	cbz	r0, 2cac6 <hal_timer_init+0x3a>
   2ca96:	4603      	mov	r3, r0
        return SYS_EINVAL;
    }

    if (!nvic_configured) {
   2ca98:	4a0c      	ldr	r2, [pc, #48]	; (2cacc <hal_timer_init+0x40>)
   2ca9a:	6812      	ldr	r2, [r2, #0]
   2ca9c:	b97a      	cbnz	r2, 2cabe <hal_timer_init+0x32>
        nvic_configured = 1;
   2ca9e:	4a0b      	ldr	r2, [pc, #44]	; (2cacc <hal_timer_init+0x40>)
   2caa0:	2101      	movs	r1, #1
   2caa2:	6011      	str	r1, [r2, #0]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   2caa4:	4a0a      	ldr	r2, [pc, #40]	; (2cad0 <hal_timer_init+0x44>)
   2caa6:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   2caa8:	490a      	ldr	r1, [pc, #40]	; (2cad4 <hal_timer_init+0x48>)
   2caaa:	6791      	str	r1, [r2, #120]	; 0x78
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2caac:	4a0a      	ldr	r2, [pc, #40]	; (2cad8 <hal_timer_init+0x4c>)
   2caae:	21e0      	movs	r1, #224	; 0xe0
   2cab0:	f882 130e 	strb.w	r1, [r2, #782]	; 0x30e
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2cab4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   2cab8:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2cabc:	6011      	str	r1, [r2, #0]
        NVIC_ClearPendingIRQ(CTIMER_IRQn);
        NVIC_EnableIRQ(CTIMER_IRQn);
    }

    bsp_cfg = vcfg;
    bsp_timer->cfg = *bsp_cfg;
   2cabe:	7822      	ldrb	r2, [r4, #0]
   2cac0:	721a      	strb	r2, [r3, #8]

    return 0;
   2cac2:	2000      	movs	r0, #0
}
   2cac4:	bd10      	pop	{r4, pc}
        return SYS_EINVAL;
   2cac6:	f06f 0001 	mvn.w	r0, #1
   2caca:	e7fb      	b.n	2cac4 <hal_timer_init+0x38>
   2cacc:	10005108 	.word	0x10005108
   2cad0:	e000ed00 	.word	0xe000ed00
   2cad4:	0002ca69 	.word	0x0002ca69
   2cad8:	e000e100 	.word	0xe000e100

0002cadc <hal_timer_config>:
 *
 * @return int
 */
int
hal_timer_config(int timer_num, uint32_t freq_hz)
{
   2cadc:	b570      	push	{r4, r5, r6, lr}
   2cade:	b082      	sub	sp, #8
   2cae0:	460d      	mov	r5, r1
    uint32_t cont_cfg;
    uint32_t once_cfg;
    uint32_t sdk_cfg;
    int rc;

    bsp_timer = apollo3_timer_resolve(timer_num);
   2cae2:	f7ff feb7 	bl	2c854 <apollo3_timer_resolve>
    if (bsp_timer == NULL || bsp_timer->is_adc_clk) {
   2cae6:	b380      	cbz	r0, 2cb4a <hal_timer_config+0x6e>
   2cae8:	4604      	mov	r4, r0
   2caea:	7c83      	ldrb	r3, [r0, #18]
   2caec:	bb83      	cbnz	r3, 2cb50 <hal_timer_config+0x74>
        return SYS_EINVAL;
    }

    rc = apollo3_timer_sdk_cfg(&bsp_timer->cfg, freq_hz, &bsp_timer->freq_hz,
   2caee:	ab01      	add	r3, sp, #4
   2caf0:	f100 020c 	add.w	r2, r0, #12
   2caf4:	4629      	mov	r1, r5
   2caf6:	3008      	adds	r0, #8
   2caf8:	f7ff fed4 	bl	2c8a4 <apollo3_timer_sdk_cfg>
                               &sdk_cfg);
    if (rc != 0) {
   2cafc:	4605      	mov	r5, r0
   2cafe:	b110      	cbz	r0, 2cb06 <hal_timer_config+0x2a>

    /* Start the continuous timer. */
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);

    return 0;
}
   2cb00:	4628      	mov	r0, r5
   2cb02:	b002      	add	sp, #8
   2cb04:	bd70      	pop	{r4, r5, r6, pc}
    cont_cfg = sdk_cfg | AM_HAL_CTIMER_FN_CONTINUOUS;
   2cb06:	9e01      	ldr	r6, [sp, #4]
   2cb08:	f446 76c0 	orr.w	r6, r6, #384	; 0x180
    am_hal_ctimer_clear(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   2cb0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2cb10:	7c20      	ldrb	r0, [r4, #16]
   2cb12:	f000 f9fb 	bl	2cf0c <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH,
   2cb16:	4632      	mov	r2, r6
   2cb18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2cb1c:	7c20      	ldrb	r0, [r4, #16]
   2cb1e:	f000 f975 	bl	2ce0c <am_hal_ctimer_config_single>
    once_cfg = sdk_cfg | AM_HAL_CTIMER_FN_ONCE | AM_HAL_CTIMER_INT_ENABLE;
   2cb22:	9e01      	ldr	r6, [sp, #4]
   2cb24:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   2cb28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2cb2c:	7c60      	ldrb	r0, [r4, #17]
   2cb2e:	f000 f9ed 	bl	2cf0c <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
   2cb32:	4632      	mov	r2, r6
   2cb34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2cb38:	7c60      	ldrb	r0, [r4, #17]
   2cb3a:	f000 f967 	bl	2ce0c <am_hal_ctimer_config_single>
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   2cb3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2cb42:	7c20      	ldrb	r0, [r4, #16]
   2cb44:	f000 f9a2 	bl	2ce8c <am_hal_ctimer_start>
    return 0;
   2cb48:	e7da      	b.n	2cb00 <hal_timer_config+0x24>
        return SYS_EINVAL;
   2cb4a:	f06f 0501 	mvn.w	r5, #1
   2cb4e:	e7d7      	b.n	2cb00 <hal_timer_config+0x24>
   2cb50:	f06f 0501 	mvn.w	r5, #1
   2cb54:	e7d4      	b.n	2cb00 <hal_timer_config+0x24>

0002cb56 <hal_watchdog_init>:
int
hal_watchdog_init(uint32_t expire_msecs)
{
    /* XXX: Unimplemented. */
    return 0;
}
   2cb56:	2000      	movs	r0, #0
   2cb58:	4770      	bx	lr

0002cb5a <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    /* XXX: Unimplemented. */
}
   2cb5a:	4770      	bx	lr

0002cb5c <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    /* XXX: Unimplemented. */
}
   2cb5c:	4770      	bx	lr
	...

0002cb60 <set_LPMMODE>:
set_LPMMODE(uint32_t ui32value)
{
    uint32_t ui32Val;
    uint32_t *pui32RegAddr;

    if ( ui32value > (CACHECTRL_FLASHCFG_LPMMODE_Msk >> CACHECTRL_FLASHCFG_LPMMODE_Pos) )
   2cb60:	2803      	cmp	r0, #3
   2cb62:	d901      	bls.n	2cb68 <set_LPMMODE+0x8>
    {
        return false;
   2cb64:	2000      	movs	r0, #0
               _VAL2FLD(CACHECTRL_FLASHCFG_LPM_RD_WAIT, 0x7);
    am_hal_flash_store_ui32(pui32RegAddr, ui32Val);
    AM_CRITICAL_END

    return true;
} // set_LPMMODE()
   2cb66:	4770      	bx	lr
{
   2cb68:	b530      	push	{r4, r5, lr}
   2cb6a:	b083      	sub	sp, #12
   2cb6c:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
   2cb6e:	f7ff fae5 	bl	2c13c <am_hal_interrupt_master_disable>
   2cb72:	9001      	str	r0, [sp, #4]
    ui32Val = am_hal_flash_load_ui32(pui32RegAddr);
   2cb74:	4d0a      	ldr	r5, [pc, #40]	; (2cba0 <set_LPMMODE+0x40>)
   2cb76:	4628      	mov	r0, r5
   2cb78:	f7ff fad2 	bl	2c120 <am_hal_flash_load_ui32>
    ui32Val &= ~(CACHECTRL_FLASHCFG_LPMMODE_Msk                 |
   2cb7c:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    ui32Val |= _VAL2FLD(CACHECTRL_FLASHCFG_LPMMODE, ui32value)    |
   2cb80:	0321      	lsls	r1, r4, #12
   2cb82:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
   2cb86:	4301      	orrs	r1, r0
    am_hal_flash_store_ui32(pui32RegAddr, ui32Val);
   2cb88:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   2cb8c:	4628      	mov	r0, r5
   2cb8e:	f7ff facd 	bl	2c12c <am_hal_flash_store_ui32>
    AM_CRITICAL_END
   2cb92:	9801      	ldr	r0, [sp, #4]
   2cb94:	f7ff fad6 	bl	2c144 <am_hal_interrupt_master_set>
    return true;
   2cb98:	2001      	movs	r0, #1
} // set_LPMMODE()
   2cb9a:	b003      	add	sp, #12
   2cb9c:	bd30      	pop	{r4, r5, pc}
   2cb9e:	bf00      	nop
   2cba0:	40018004 	.word	0x40018004

0002cba4 <set_SEDELAY>:
set_SEDELAY(uint32_t ui32value)
{
    uint32_t ui32Val;
    uint32_t *pui32RegAddr;

    if ( ui32value > (CACHECTRL_FLASHCFG_SEDELAY_Msk >> CACHECTRL_FLASHCFG_SEDELAY_Pos) )
   2cba4:	2807      	cmp	r0, #7
   2cba6:	d901      	bls.n	2cbac <set_SEDELAY+0x8>
    {
        return false;
   2cba8:	2000      	movs	r0, #0
               _VAL2FLD(CACHECTRL_FLASHCFG_LPM_RD_WAIT, 0x7);
    am_hal_flash_store_ui32(pui32RegAddr, ui32Val);
    AM_CRITICAL_END

    return true;
} // set_SEDELAY()
   2cbaa:	4770      	bx	lr
{
   2cbac:	b530      	push	{r4, r5, lr}
   2cbae:	b083      	sub	sp, #12
   2cbb0:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
   2cbb2:	f7ff fac3 	bl	2c13c <am_hal_interrupt_master_disable>
   2cbb6:	9001      	str	r0, [sp, #4]
    ui32Val = am_hal_flash_load_ui32(pui32RegAddr);
   2cbb8:	4d0a      	ldr	r5, [pc, #40]	; (2cbe4 <set_SEDELAY+0x40>)
   2cbba:	4628      	mov	r0, r5
   2cbbc:	f7ff fab0 	bl	2c120 <am_hal_flash_load_ui32>
    ui32Val &= ~(CACHECTRL_FLASHCFG_SEDELAY_Msk                 |
   2cbc0:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    ui32Val |= _VAL2FLD(CACHECTRL_FLASHCFG_SEDELAY, ui32value)    |
   2cbc4:	0121      	lsls	r1, r4, #4
   2cbc6:	f001 0170 	and.w	r1, r1, #112	; 0x70
   2cbca:	4301      	orrs	r1, r0
    am_hal_flash_store_ui32(pui32RegAddr, ui32Val);
   2cbcc:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   2cbd0:	4628      	mov	r0, r5
   2cbd2:	f7ff faab 	bl	2c12c <am_hal_flash_store_ui32>
    AM_CRITICAL_END
   2cbd6:	9801      	ldr	r0, [sp, #4]
   2cbd8:	f7ff fab4 	bl	2c144 <am_hal_interrupt_master_set>
    return true;
   2cbdc:	2001      	movs	r0, #1
} // set_SEDELAY()
   2cbde:	b003      	add	sp, #12
   2cbe0:	bd30      	pop	{r4, r5, pc}
   2cbe2:	bf00      	nop
   2cbe4:	40018004 	.word	0x40018004

0002cbe8 <set_RDWAIT>:
set_RDWAIT(uint32_t ui32value)
{
    uint32_t ui32Val;
    uint32_t *pui32RegAddr;

    if ( ui32value > (CACHECTRL_FLASHCFG_RD_WAIT_Msk >> CACHECTRL_FLASHCFG_RD_WAIT_Pos) )
   2cbe8:	280f      	cmp	r0, #15
   2cbea:	d901      	bls.n	2cbf0 <set_RDWAIT+0x8>
    {
        return false;
   2cbec:	2000      	movs	r0, #0
               _VAL2FLD(CACHECTRL_FLASHCFG_LPM_RD_WAIT, 0x7);
    am_hal_flash_store_ui32(pui32RegAddr, ui32Val);
    AM_CRITICAL_END

    return true;
} // set_RDWAIT()
   2cbee:	4770      	bx	lr
{
   2cbf0:	b530      	push	{r4, r5, lr}
   2cbf2:	b083      	sub	sp, #12
   2cbf4:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
   2cbf6:	f7ff faa1 	bl	2c13c <am_hal_interrupt_master_disable>
   2cbfa:	9001      	str	r0, [sp, #4]
    ui32Val = am_hal_flash_load_ui32(pui32RegAddr);
   2cbfc:	4d0a      	ldr	r5, [pc, #40]	; (2cc28 <set_RDWAIT+0x40>)
   2cbfe:	4628      	mov	r0, r5
   2cc00:	f7ff fa8e 	bl	2c120 <am_hal_flash_load_ui32>
    ui32Val &= ~(CACHECTRL_FLASHCFG_RD_WAIT_Msk                 |
   2cc04:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   2cc08:	f021 010f 	bic.w	r1, r1, #15
    ui32Val |= _VAL2FLD(CACHECTRL_FLASHCFG_RD_WAIT, ui32value)  |
   2cc0c:	f004 040f 	and.w	r4, r4, #15
   2cc10:	4321      	orrs	r1, r4
    am_hal_flash_store_ui32(pui32RegAddr, ui32Val);
   2cc12:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   2cc16:	4628      	mov	r0, r5
   2cc18:	f7ff fa88 	bl	2c12c <am_hal_flash_store_ui32>
    AM_CRITICAL_END
   2cc1c:	9801      	ldr	r0, [sp, #4]
   2cc1e:	f7ff fa91 	bl	2c144 <am_hal_interrupt_master_set>
    return true;
   2cc22:	2001      	movs	r0, #1
} // set_RDWAIT()
   2cc24:	b003      	add	sp, #12
   2cc26:	bd30      	pop	{r4, r5, pc}
   2cc28:	40018004 	.word	0x40018004

0002cc2c <am_hal_cachectrl_control>:
//  Select the cache configuration type.
//
//*****************************************************************************
uint32_t
am_hal_cachectrl_control(am_hal_cachectrl_control_e eControl, void *pArgs)
{
   2cc2c:	b500      	push	{lr}
   2cc2e:	b083      	sub	sp, #12
    uint32_t ui32Arg;
    uint32_t ui32SetMask = 0;

    switch ( eControl )
   2cc30:	3801      	subs	r0, #1
   2cc32:	2810      	cmp	r0, #16
   2cc34:	f200 80b9 	bhi.w	2cdaa <am_hal_cachectrl_control+0x17e>
   2cc38:	e8df f000 	tbb	[pc, r0]
   2cc3c:	b20911b5 	.word	0xb20911b5
   2cc40:	a8abaeb0 	.word	0xa8abaeb0
   2cc44:	45332619 	.word	0x45332619
   2cc48:	7b726957 	.word	0x7b726957
   2cc4c:	84          	.byte	0x84
   2cc4d:	00          	.byte	0x00
{
   2cc4e:	f44f 6388 	mov.w	r3, #1088	; 0x440
    // Important note - setting of an enable and disable simultanously has
    // unpredicable results.
    //
    if ( ui32SetMask )
    {
        CACHECTRL->CTRL = ui32SetMask;
   2cc52:	4a62      	ldr	r2, [pc, #392]	; (2cddc <am_hal_cachectrl_control+0x1b0>)
   2cc54:	6093      	str	r3, [r2, #8]
    }

    return AM_HAL_STATUS_SUCCESS;
   2cc56:	2000      	movs	r0, #0

} // am_hal_cachectrl_control()
   2cc58:	b003      	add	sp, #12
   2cc5a:	f85d fb04 	ldr.w	pc, [sp], #4
            if ( !_FLD2VAL(CACHECTRL_CACHECFG_ENABLE_MONITOR, CACHECTRL->CACHECFG) )
   2cc5e:	4b5f      	ldr	r3, [pc, #380]	; (2cddc <am_hal_cachectrl_control+0x1b0>)
   2cc60:	681b      	ldr	r3, [r3, #0]
   2cc62:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   2cc66:	f000 80a2 	beq.w	2cdae <am_hal_cachectrl_control+0x182>
                ui32SetMask = CACHECTRL_CTRL_RESET_STAT_Msk;
   2cc6a:	2302      	movs	r3, #2
   2cc6c:	e7f1      	b.n	2cc52 <am_hal_cachectrl_control+0x26>
            AM_CRITICAL_BEGIN
   2cc6e:	f7ff fa65 	bl	2c13c <am_hal_interrupt_master_disable>
   2cc72:	9000      	str	r0, [sp, #0]
            CACHECTRL->CACHECFG |= CACHECTRL_CACHECFG_ENABLE_MONITOR_Msk;
   2cc74:	4a59      	ldr	r2, [pc, #356]	; (2cddc <am_hal_cachectrl_control+0x1b0>)
   2cc76:	6813      	ldr	r3, [r2, #0]
   2cc78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   2cc7c:	6013      	str	r3, [r2, #0]
            AM_CRITICAL_END
   2cc7e:	9800      	ldr	r0, [sp, #0]
   2cc80:	f7ff fa60 	bl	2c144 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
   2cc84:	2000      	movs	r0, #0
   2cc86:	e7e7      	b.n	2cc58 <am_hal_cachectrl_control+0x2c>
            AM_CRITICAL_BEGIN
   2cc88:	f7ff fa58 	bl	2c13c <am_hal_interrupt_master_disable>
   2cc8c:	9001      	str	r0, [sp, #4]
            CACHECTRL->CACHECFG &= ~CACHECTRL_CACHECFG_ENABLE_MONITOR_Msk;
   2cc8e:	4a53      	ldr	r2, [pc, #332]	; (2cddc <am_hal_cachectrl_control+0x1b0>)
   2cc90:	6813      	ldr	r3, [r2, #0]
   2cc92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   2cc96:	6013      	str	r3, [r2, #0]
            AM_CRITICAL_END
   2cc98:	9801      	ldr	r0, [sp, #4]
   2cc9a:	f7ff fa53 	bl	2c144 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
   2cc9e:	2000      	movs	r0, #0
   2cca0:	e7da      	b.n	2cc58 <am_hal_cachectrl_control+0x2c>
            if ( !set_LPMMODE(AM_HAL_CACHECTRL_FLASHCFG_LPMMODE_NEVER)      ||
   2cca2:	2000      	movs	r0, #0
   2cca4:	f7ff ff5c 	bl	2cb60 <set_LPMMODE>
   2cca8:	b908      	cbnz	r0, 2ccae <am_hal_cachectrl_control+0x82>
                return AM_HAL_STATUS_FAIL;
   2ccaa:	2001      	movs	r0, #1
   2ccac:	e7d4      	b.n	2cc58 <am_hal_cachectrl_control+0x2c>
                 !set_SEDELAY(0x7)                                          ||
   2ccae:	2007      	movs	r0, #7
   2ccb0:	f7ff ff78 	bl	2cba4 <set_SEDELAY>
            if ( !set_LPMMODE(AM_HAL_CACHECTRL_FLASHCFG_LPMMODE_NEVER)      ||
   2ccb4:	2800      	cmp	r0, #0
   2ccb6:	d0f8      	beq.n	2ccaa <am_hal_cachectrl_control+0x7e>
                 !set_RDWAIT(0x3) )
   2ccb8:	2003      	movs	r0, #3
   2ccba:	f7ff ff95 	bl	2cbe8 <set_RDWAIT>
                 !set_SEDELAY(0x7)                                          ||
   2ccbe:	2800      	cmp	r0, #0
   2ccc0:	d0f3      	beq.n	2ccaa <am_hal_cachectrl_control+0x7e>
    return AM_HAL_STATUS_SUCCESS;
   2ccc2:	2000      	movs	r0, #0
   2ccc4:	e7c8      	b.n	2cc58 <am_hal_cachectrl_control+0x2c>
            if ( !set_LPMMODE(AM_HAL_CACHECTRL_FLASHCFG_LPMMODE_STANDBY)    ||
   2ccc6:	2001      	movs	r0, #1
   2ccc8:	f7ff ff4a 	bl	2cb60 <set_LPMMODE>
   2cccc:	b908      	cbnz	r0, 2ccd2 <am_hal_cachectrl_control+0xa6>
                return AM_HAL_STATUS_FAIL;
   2ccce:	2001      	movs	r0, #1
   2ccd0:	e7c2      	b.n	2cc58 <am_hal_cachectrl_control+0x2c>
                 !set_SEDELAY(0x5)                                          ||
   2ccd2:	2005      	movs	r0, #5
   2ccd4:	f7ff ff66 	bl	2cba4 <set_SEDELAY>
            if ( !set_LPMMODE(AM_HAL_CACHECTRL_FLASHCFG_LPMMODE_STANDBY)    ||
   2ccd8:	2800      	cmp	r0, #0
   2ccda:	d0f8      	beq.n	2ccce <am_hal_cachectrl_control+0xa2>
                 !set_RDWAIT(0x1) )
   2ccdc:	2001      	movs	r0, #1
   2ccde:	f7ff ff83 	bl	2cbe8 <set_RDWAIT>
                 !set_SEDELAY(0x5)                                          ||
   2cce2:	2800      	cmp	r0, #0
   2cce4:	d0f3      	beq.n	2ccce <am_hal_cachectrl_control+0xa2>
    return AM_HAL_STATUS_SUCCESS;
   2cce6:	2000      	movs	r0, #0
   2cce8:	e7b6      	b.n	2cc58 <am_hal_cachectrl_control+0x2c>
            if ( !set_LPMMODE(AM_HAL_CACHECTRL_FLASHCFG_LPMMODE_STANDBY)    ||
   2ccea:	2001      	movs	r0, #1
   2ccec:	f7ff ff38 	bl	2cb60 <set_LPMMODE>
   2ccf0:	b908      	cbnz	r0, 2ccf6 <am_hal_cachectrl_control+0xca>
                return AM_HAL_STATUS_FAIL;
   2ccf2:	2001      	movs	r0, #1
   2ccf4:	e7b0      	b.n	2cc58 <am_hal_cachectrl_control+0x2c>
                 !set_SEDELAY(0x6)                                          ||
   2ccf6:	2006      	movs	r0, #6
   2ccf8:	f7ff ff54 	bl	2cba4 <set_SEDELAY>
            if ( !set_LPMMODE(AM_HAL_CACHECTRL_FLASHCFG_LPMMODE_STANDBY)    ||
   2ccfc:	2800      	cmp	r0, #0
   2ccfe:	d0f8      	beq.n	2ccf2 <am_hal_cachectrl_control+0xc6>
                 !set_RDWAIT(0x1) )
   2cd00:	2001      	movs	r0, #1
   2cd02:	f7ff ff71 	bl	2cbe8 <set_RDWAIT>
                 !set_SEDELAY(0x6)                                          ||
   2cd06:	2800      	cmp	r0, #0
   2cd08:	d0f3      	beq.n	2ccf2 <am_hal_cachectrl_control+0xc6>
    return AM_HAL_STATUS_SUCCESS;
   2cd0a:	2000      	movs	r0, #0
   2cd0c:	e7a4      	b.n	2cc58 <am_hal_cachectrl_control+0x2c>
            if ( !pArgs )
   2cd0e:	2900      	cmp	r1, #0
   2cd10:	d04f      	beq.n	2cdb2 <am_hal_cachectrl_control+0x186>
            if ( !set_LPMMODE(ui32Arg) )
   2cd12:	6808      	ldr	r0, [r1, #0]
   2cd14:	f7ff ff24 	bl	2cb60 <set_LPMMODE>
   2cd18:	2800      	cmp	r0, #0
   2cd1a:	d04c      	beq.n	2cdb6 <am_hal_cachectrl_control+0x18a>
    return AM_HAL_STATUS_SUCCESS;
   2cd1c:	2000      	movs	r0, #0
   2cd1e:	e79b      	b.n	2cc58 <am_hal_cachectrl_control+0x2c>
            if ( !pArgs )
   2cd20:	2900      	cmp	r1, #0
   2cd22:	d04a      	beq.n	2cdba <am_hal_cachectrl_control+0x18e>
            if ( !set_SEDELAY(ui32Arg) )
   2cd24:	6808      	ldr	r0, [r1, #0]
   2cd26:	f7ff ff3d 	bl	2cba4 <set_SEDELAY>
   2cd2a:	2800      	cmp	r0, #0
   2cd2c:	d047      	beq.n	2cdbe <am_hal_cachectrl_control+0x192>
    return AM_HAL_STATUS_SUCCESS;
   2cd2e:	2000      	movs	r0, #0
   2cd30:	e792      	b.n	2cc58 <am_hal_cachectrl_control+0x2c>
            if ( !pArgs )
   2cd32:	2900      	cmp	r1, #0
   2cd34:	d045      	beq.n	2cdc2 <am_hal_cachectrl_control+0x196>
            if ( !set_RDWAIT(ui32Arg) )
   2cd36:	6808      	ldr	r0, [r1, #0]
   2cd38:	f7ff ff56 	bl	2cbe8 <set_RDWAIT>
   2cd3c:	2800      	cmp	r0, #0
   2cd3e:	d042      	beq.n	2cdc6 <am_hal_cachectrl_control+0x19a>
    return AM_HAL_STATUS_SUCCESS;
   2cd40:	2000      	movs	r0, #0
   2cd42:	e789      	b.n	2cc58 <am_hal_cachectrl_control+0x2c>
            if ( pArgs == NULL )
   2cd44:	2900      	cmp	r1, #0
   2cd46:	d040      	beq.n	2cdca <am_hal_cachectrl_control+0x19e>
            if ((pNcCfg->ui32StartAddr & ~CACHECTRL_NCR0START_ADDR_Msk) ||
   2cd48:	684a      	ldr	r2, [r1, #4]
   2cd4a:	4b25      	ldr	r3, [pc, #148]	; (2cde0 <am_hal_cachectrl_control+0x1b4>)
   2cd4c:	4013      	ands	r3, r2
   2cd4e:	2b00      	cmp	r3, #0
   2cd50:	d13d      	bne.n	2cdce <am_hal_cachectrl_control+0x1a2>
                (pNcCfg->ui32EndAddr & ~CACHECTRL_NCR0START_ADDR_Msk))
   2cd52:	688b      	ldr	r3, [r1, #8]
   2cd54:	4822      	ldr	r0, [pc, #136]	; (2cde0 <am_hal_cachectrl_control+0x1b4>)
   2cd56:	4018      	ands	r0, r3
            if ((pNcCfg->ui32StartAddr & ~CACHECTRL_NCR0START_ADDR_Msk) ||
   2cd58:	2800      	cmp	r0, #0
   2cd5a:	d13a      	bne.n	2cdd2 <am_hal_cachectrl_control+0x1a6>
            if (pNcCfg->eNCRegion == AM_HAL_CACHECTRL_NCR0)
   2cd5c:	780b      	ldrb	r3, [r1, #0]
   2cd5e:	b94b      	cbnz	r3, 2cd74 <am_hal_cachectrl_control+0x148>
                CACHECTRL->NCR0START = pNcCfg->ui32StartAddr;
   2cd60:	4b1e      	ldr	r3, [pc, #120]	; (2cddc <am_hal_cachectrl_control+0x1b0>)
   2cd62:	611a      	str	r2, [r3, #16]
                CACHECTRL->NCR0END   = pNcCfg->ui32EndAddr;
   2cd64:	688a      	ldr	r2, [r1, #8]
   2cd66:	615a      	str	r2, [r3, #20]
                CACHECTRL->CACHECFG_b.ENABLE_NC0 = pNcCfg->bEnable;
   2cd68:	7849      	ldrb	r1, [r1, #1]
   2cd6a:	681a      	ldr	r2, [r3, #0]
   2cd6c:	f361 0282 	bfi	r2, r1, #2, #1
   2cd70:	601a      	str	r2, [r3, #0]
   2cd72:	e771      	b.n	2cc58 <am_hal_cachectrl_control+0x2c>
            else if (pNcCfg->eNCRegion == AM_HAL_CACHECTRL_NCR1)
   2cd74:	2b01      	cmp	r3, #1
   2cd76:	d12e      	bne.n	2cdd6 <am_hal_cachectrl_control+0x1aa>
                CACHECTRL->NCR1START = pNcCfg->ui32StartAddr;
   2cd78:	4b18      	ldr	r3, [pc, #96]	; (2cddc <am_hal_cachectrl_control+0x1b0>)
   2cd7a:	619a      	str	r2, [r3, #24]
                CACHECTRL->NCR1END   = pNcCfg->ui32EndAddr;
   2cd7c:	688a      	ldr	r2, [r1, #8]
   2cd7e:	61da      	str	r2, [r3, #28]
                CACHECTRL->CACHECFG_b.ENABLE_NC1 = pNcCfg->bEnable;
   2cd80:	7849      	ldrb	r1, [r1, #1]
   2cd82:	681a      	ldr	r2, [r3, #0]
   2cd84:	f361 02c3 	bfi	r2, r1, #3, #1
   2cd88:	601a      	str	r2, [r3, #0]
   2cd8a:	e765      	b.n	2cc58 <am_hal_cachectrl_control+0x2c>
            ui32SetMask = CACHECTRL_CTRL_FLASH1_SLM_DISABLE_Msk;
   2cd8c:	f44f 7300 	mov.w	r3, #512	; 0x200
   2cd90:	e75f      	b.n	2cc52 <am_hal_cachectrl_control+0x26>
            ui32SetMask = CACHECTRL_CTRL_FLASH1_SLM_ENABLE_Msk;
   2cd92:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2cd96:	e75c      	b.n	2cc52 <am_hal_cachectrl_control+0x26>
            ui32SetMask = CACHECTRL_CTRL_FLASH0_SLM_DISABLE_Msk;
   2cd98:	2320      	movs	r3, #32
   2cd9a:	e75a      	b.n	2cc52 <am_hal_cachectrl_control+0x26>
            ui32SetMask = CACHECTRL_CTRL_FLASH0_SLM_ENABLE_Msk;
   2cd9c:	2340      	movs	r3, #64	; 0x40
   2cd9e:	e758      	b.n	2cc52 <am_hal_cachectrl_control+0x26>
            ui32SetMask = CACHECTRL_CTRL_FLASH0_SLM_DISABLE_Msk     |
   2cda0:	f44f 7308 	mov.w	r3, #544	; 0x220
   2cda4:	e755      	b.n	2cc52 <am_hal_cachectrl_control+0x26>
            ui32SetMask = CACHECTRL_CTRL_INVALIDATE_Msk;
   2cda6:	2301      	movs	r3, #1
   2cda8:	e753      	b.n	2cc52 <am_hal_cachectrl_control+0x26>
                ui32SetMask = CACHECTRL_CTRL_RESET_STAT_Msk;
   2cdaa:	2006      	movs	r0, #6
   2cdac:	e754      	b.n	2cc58 <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_INVALID_OPERATION;
   2cdae:	2007      	movs	r0, #7
   2cdb0:	e752      	b.n	2cc58 <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_INVALID_ARG;
   2cdb2:	2006      	movs	r0, #6
   2cdb4:	e750      	b.n	2cc58 <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_FAIL;
   2cdb6:	2001      	movs	r0, #1
   2cdb8:	e74e      	b.n	2cc58 <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_INVALID_ARG;
   2cdba:	2006      	movs	r0, #6
   2cdbc:	e74c      	b.n	2cc58 <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_FAIL;
   2cdbe:	2001      	movs	r0, #1
   2cdc0:	e74a      	b.n	2cc58 <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_INVALID_ARG;
   2cdc2:	2006      	movs	r0, #6
   2cdc4:	e748      	b.n	2cc58 <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_FAIL;
   2cdc6:	2001      	movs	r0, #1
   2cdc8:	e746      	b.n	2cc58 <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_INVALID_ARG;
   2cdca:	2006      	movs	r0, #6
   2cdcc:	e744      	b.n	2cc58 <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_INVALID_ARG;
   2cdce:	2006      	movs	r0, #6
   2cdd0:	e742      	b.n	2cc58 <am_hal_cachectrl_control+0x2c>
   2cdd2:	2006      	movs	r0, #6
   2cdd4:	e740      	b.n	2cc58 <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_INVALID_ARG;
   2cdd6:	2006      	movs	r0, #6
   2cdd8:	e73e      	b.n	2cc58 <am_hal_cachectrl_control+0x2c>
   2cdda:	bf00      	nop
   2cddc:	40018000 	.word	0x40018000
   2cde0:	f800000f 	.word	0xf800000f

0002cde4 <ctimer_clr>:
// the CLR bit at that time.
//
//*****************************************************************************
static void
ctimer_clr(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   2cde4:	b570      	push	{r4, r5, r6, lr}
   2cde6:	b082      	sub	sp, #8
   2cde8:	460c      	mov	r4, r1
    //
    // Find the address of the correct control register and set the CLR bit
    // for the timer segment in that control register.
    //
    volatile uint32_t *pui32ConfigReg =
        (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   2cdea:	0145      	lsls	r5, r0, #5
   2cdec:	4e06      	ldr	r6, [pc, #24]	; (2ce08 <ctimer_clr+0x24>)

    AM_CRITICAL_BEGIN
   2cdee:	f7ff f9a5 	bl	2c13c <am_hal_interrupt_master_disable>
   2cdf2:	9001      	str	r0, [sp, #4]
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
   2cdf4:	59a9      	ldr	r1, [r5, r6]
   2cdf6:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
   2cdfa:	430c      	orrs	r4, r1
   2cdfc:	51ac      	str	r4, [r5, r6]
                                  (CTIMER_CTRL0_TMRA0CLR_Msk |
                                   CTIMER_CTRL0_TMRB0CLR_Msk));
    AM_CRITICAL_END
   2cdfe:	9801      	ldr	r0, [sp, #4]
   2ce00:	f7ff f9a0 	bl	2c144 <am_hal_interrupt_master_set>

} // ctimer_clr()
   2ce04:	b002      	add	sp, #8
   2ce06:	bd70      	pop	{r4, r5, r6, pc}
   2ce08:	4000800c 	.word	0x4000800c

0002ce0c <am_hal_ctimer_config_single>:
//*****************************************************************************
void
am_hal_ctimer_config_single(uint32_t ui32TimerNumber,
                            uint32_t ui32TimerSegment,
                            uint32_t ui32ConfigVal)
{
   2ce0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ce10:	b082      	sub	sp, #8
   2ce12:	4606      	mov	r6, r0
   2ce14:	460c      	mov	r4, r1
   2ce16:	4615      	mov	r5, r2

    //
    // Make sure the timer is completely initialized on configuration by
    // setting the CLR bit.
    //
    ctimer_clr(ui32TimerNumber, ui32TimerSegment);
   2ce18:	f7ff ffe4 	bl	2cde4 <ctimer_clr>

    //
    // Find the correct register to write based on the timer number.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   2ce1c:	ea4f 1846 	mov.w	r8, r6, lsl #5
   2ce20:	4f18      	ldr	r7, [pc, #96]	; (2ce84 <am_hal_ctimer_config_single+0x78>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
   2ce22:	f7ff f98b 	bl	2c13c <am_hal_interrupt_master_disable>
   2ce26:	9001      	str	r0, [sp, #4]
    uint32_t ui32WriteVal;

    //
    // Save the value that's already in the register.
    //
    ui32WriteVal = AM_REGVAL(pui32ConfigReg);
   2ce28:	f858 3007 	ldr.w	r3, [r8, r7]

    //
    // If we're working with TIMERB, we need to shift our configuration value
    // up by 16 bits.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   2ce2c:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   2ce30:	d017      	beq.n	2ce62 <am_hal_ctimer_config_single+0x56>

    //
    // Replace part of the saved register value with the configuration value
    // from the caller.
    //
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
   2ce32:	ea23 0304 	bic.w	r3, r3, r4
   2ce36:	432b      	orrs	r3, r5

    //
    // If we're configuring both timers, we need to set the "link" bit.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_BOTH )
   2ce38:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   2ce3c:	d013      	beq.n	2ce66 <am_hal_ctimer_config_single+0x5a>
    }

    //
    // Write our completed configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
   2ce3e:	f848 3007 	str.w	r3, [r8, r7]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2ce42:	9801      	ldr	r0, [sp, #4]
   2ce44:	f7ff f97e 	bl	2c144 <am_hal_interrupt_master_set>

    //
    // Save the clock source for this timer.
    //
    switch ( ui32TimerSegment )
   2ce48:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   2ce4c:	d010      	beq.n	2ce70 <am_hal_ctimer_config_single+0x64>
   2ce4e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   2ce52:	d015      	beq.n	2ce80 <am_hal_ctimer_config_single+0x74>
   2ce54:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2ce58:	429c      	cmp	r4, r3
   2ce5a:	d007      	beq.n	2ce6c <am_hal_ctimer_config_single+0x60>
    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;

} // am_hal_ctimer_config_single()
   2ce5c:	b002      	add	sp, #8
   2ce5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ui32ConfigVal = ((ui32ConfigVal & 0xFFFF) << 16);
   2ce62:	042d      	lsls	r5, r5, #16
   2ce64:	e7e5      	b.n	2ce32 <am_hal_ctimer_config_single+0x26>
        ui32WriteVal |= AM_HAL_CTIMER_LINK;
   2ce66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2ce6a:	e7e8      	b.n	2ce3e <am_hal_ctimer_config_single+0x32>
    switch ( ui32TimerSegment )
   2ce6c:	2300      	movs	r3, #0
   2ce6e:	e000      	b.n	2ce72 <am_hal_ctimer_config_single+0x66>
            ui32Seg = 1;
   2ce70:	2301      	movs	r3, #1
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;
   2ce72:	f3c5 0544 	ubfx	r5, r5, #1, #5
   2ce76:	4804      	ldr	r0, [pc, #16]	; (2ce88 <am_hal_ctimer_config_single+0x7c>)
   2ce78:	eb00 0646 	add.w	r6, r0, r6, lsl #1
   2ce7c:	54f5      	strb	r5, [r6, r3]
   2ce7e:	e7ed      	b.n	2ce5c <am_hal_ctimer_config_single+0x50>
    switch ( ui32TimerSegment )
   2ce80:	2300      	movs	r3, #0
   2ce82:	e7f6      	b.n	2ce72 <am_hal_ctimer_config_single+0x66>
   2ce84:	4000800c 	.word	0x4000800c
   2ce88:	10001aa0 	.word	0x10001aa0

0002ce8c <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   2ce8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ce8e:	b083      	sub	sp, #12
   2ce90:	4605      	mov	r5, r0
   2ce92:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   2ce94:	0147      	lsls	r7, r0, #5
   2ce96:	4e10      	ldr	r6, [pc, #64]	; (2ced8 <am_hal_ctimer_start+0x4c>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
   2ce98:	f7ff f950 	bl	2c13c <am_hal_interrupt_master_disable>
   2ce9c:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    uint32_t ui32ConfigVal = *pui32ConfigReg;
   2ce9e:	59bb      	ldr	r3, [r7, r6]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (CTIMER_CTRL0_TMRA0CLR_Msk |
   2cea0:	f004 2208 	and.w	r2, r4, #134219776	; 0x8000800
   2cea4:	ea23 0202 	bic.w	r2, r3, r2
                                           CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (CTIMER_CTRL0_TMRA0EN_Msk |
   2cea8:	f004 1301 	and.w	r3, r4, #65537	; 0x10001
   2ceac:	4313      	orrs	r3, r2
                                          CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // While we already have the CTRL reg, get and save the CLKSRC.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   2ceae:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   2ceb2:	d00c      	beq.n	2cece <am_hal_ctimer_start+0x42>
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
    }
    else
    {
        ui32Seg = 0;
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32ConfigVal);
   2ceb4:	f3c3 0144 	ubfx	r1, r3, #1, #5
        ui32Seg = 0;
   2ceb8:	2200      	movs	r2, #0
    }

    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui32ClkSrc;
   2ceba:	4808      	ldr	r0, [pc, #32]	; (2cedc <am_hal_ctimer_start+0x50>)
   2cebc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
   2cec0:	54a9      	strb	r1, [r5, r2]

    //
    // Write the configuration to start the timer.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
   2cec2:	51bb      	str	r3, [r7, r6]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2cec4:	9801      	ldr	r0, [sp, #4]
   2cec6:	f7ff f93d 	bl	2c144 <am_hal_interrupt_master_set>

} // am_hal_ctimer_start()
   2ceca:	b003      	add	sp, #12
   2cecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
   2cece:	f3c3 4144 	ubfx	r1, r3, #17, #5
        ui32Seg = 1;
   2ced2:	2201      	movs	r2, #1
   2ced4:	e7f1      	b.n	2ceba <am_hal_ctimer_start+0x2e>
   2ced6:	bf00      	nop
   2ced8:	4000800c 	.word	0x4000800c
   2cedc:	10001aa0 	.word	0x10001aa0

0002cee0 <am_hal_ctimer_stop>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_stop(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   2cee0:	b570      	push	{r4, r5, r6, lr}
   2cee2:	b082      	sub	sp, #8
   2cee4:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   2cee6:	0145      	lsls	r5, r0, #5
   2cee8:	4e07      	ldr	r6, [pc, #28]	; (2cf08 <am_hal_ctimer_stop+0x28>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   2ceea:	f7ff f927 	bl	2c13c <am_hal_interrupt_master_disable>
   2ceee:	9001      	str	r0, [sp, #4]

    //
    // Clear the "enable" bit
    //
    AM_REGVAL(pui32ConfigReg) &= ~(ui32TimerSegment &
   2cef0:	59a9      	ldr	r1, [r5, r6]
   2cef2:	f004 1401 	and.w	r4, r4, #65537	; 0x10001
   2cef6:	ea21 0404 	bic.w	r4, r1, r4
   2cefa:	51ac      	str	r4, [r5, r6]
                                    CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2cefc:	9801      	ldr	r0, [sp, #4]
   2cefe:	f7ff f921 	bl	2c144 <am_hal_interrupt_master_set>

} // am_hal_ctimer_stop()
   2cf02:	b002      	add	sp, #8
   2cf04:	bd70      	pop	{r4, r5, r6, pc}
   2cf06:	bf00      	nop
   2cf08:	4000800c 	.word	0x4000800c

0002cf0c <am_hal_ctimer_clear>:
//!
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   2cf0c:	b570      	push	{r4, r5, r6, lr}
   2cf0e:	b082      	sub	sp, #8
   2cf10:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   2cf12:	0145      	lsls	r5, r0, #5
   2cf14:	4e06      	ldr	r6, [pc, #24]	; (2cf30 <am_hal_ctimer_clear+0x24>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   2cf16:	f7ff f911 	bl	2c13c <am_hal_interrupt_master_disable>
   2cf1a:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
   2cf1c:	59a9      	ldr	r1, [r5, r6]
   2cf1e:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
   2cf22:	430c      	orrs	r4, r1
   2cf24:	51ac      	str	r4, [r5, r6]
                                   CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2cf26:	9801      	ldr	r0, [sp, #4]
   2cf28:	f7ff f90c 	bl	2c144 <am_hal_interrupt_master_set>

} // am_hal_ctimer_clear()
   2cf2c:	b002      	add	sp, #8
   2cf2e:	bd70      	pop	{r4, r5, r6, pc}
   2cf30:	4000800c 	.word	0x4000800c

0002cf34 <am_hal_ctimer_read>:
//! @return Current timer value.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_read(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   2cf34:	b530      	push	{r4, r5, lr}
   2cf36:	b085      	sub	sp, #20
   2cf38:	4602      	mov	r2, r0
   2cf3a:	460c      	mov	r4, r1
    uint32_t ui32Values[3];

    //
    // Determine the timer segment.
    //
    ui32Seg = ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB ) ? 1 : 0;
   2cf3c:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
   2cf40:	bf14      	ite	ne
   2cf42:	2100      	movne	r1, #0
   2cf44:	2101      	moveq	r1, #1

    //
    // Get the address of the register for this timer.
    //
    ui32TmrAddr = g_ui32TMRAddrTbl[ui32TimerNumber];
   2cf46:	4b1c      	ldr	r3, [pc, #112]	; (2cfb8 <am_hal_ctimer_read+0x84>)
   2cf48:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

    //
    // Get the clock source for this timer.
    //
    ui8ClkSrc = g_ui8ClkSrc[ui32TimerNumber][ui32Seg];
   2cf4c:	4b1b      	ldr	r3, [pc, #108]	; (2cfbc <am_hal_ctimer_read+0x88>)
   2cf4e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   2cf52:	5c5b      	ldrb	r3, [r3, r1]

    if ( ui8ClkSrc == 0xFF )
   2cf54:	2bff      	cmp	r3, #255	; 0xff
   2cf56:	d018      	beq.n	2cf8a <am_hal_ctimer_read+0x56>
    }

    //
    // Based on the source clock, mask off bits not needed for the comparison.
    //
    ui32ClkMsk = g_ui8TmrClkSrcMask[ui8ClkSrc & _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, 0xFFFFFFFF)];
   2cf58:	f003 031f 	and.w	r3, r3, #31
   2cf5c:	4a18      	ldr	r2, [pc, #96]	; (2cfc0 <am_hal_ctimer_read+0x8c>)
   2cf5e:	5cd3      	ldrb	r3, [r2, r3]

    if ( ui32ClkMsk != 0 )
   2cf60:	b30b      	cbz	r3, 2cfa6 <am_hal_ctimer_read+0x72>
    {
        if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
   2cf62:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   2cf66:	6b52      	ldr	r2, [r2, #52]	; 0x34
   2cf68:	f012 0f04 	tst.w	r2, #4
   2cf6c:	d002      	beq.n	2cf74 <am_hal_ctimer_read+0x40>
        {
            //
            // In burst mode, extend the mask by 1 bit.
            //
            ui32ClkMsk <<= 1;
   2cf6e:	005b      	lsls	r3, r3, #1
            ui32ClkMsk |= 0x1;
   2cf70:	f043 0301 	orr.w	r3, r3, #1
        }

        //
        // Invert the mask so that the unneeded bits can be masked off.
        //
        ui32ClkMsk = ~ui32ClkMsk;
   2cf74:	43dd      	mvns	r5, r3

        //
        // Read the register into ui32Values[].
        //
        am_hal_triple_read(ui32TmrAddr, ui32Values);
   2cf76:	a901      	add	r1, sp, #4
   2cf78:	f000 f8d0 	bl	2d11c <am_hal_triple_read>
        //
        // Now determine which of the three values is the correct value.
        // If the first 2 match, then the values are both correct and we're done.
        // Otherwise, the third value is taken to be the correct value.
        //
        if ( (ui32Values[0] & ui32ClkMsk)  == (ui32Values[1] & ui32ClkMsk) )
   2cf7c:	9802      	ldr	r0, [sp, #8]
   2cf7e:	9b01      	ldr	r3, [sp, #4]
   2cf80:	4043      	eors	r3, r0
   2cf82:	422b      	tst	r3, r5
   2cf84:	d010      	beq.n	2cfa8 <am_hal_ctimer_read+0x74>
            //
            ui32RetVal = ui32Values[1];
        }
        else
        {
            ui32RetVal = ui32Values[2];
   2cf86:	9803      	ldr	r0, [sp, #12]
   2cf88:	e00e      	b.n	2cfa8 <am_hal_ctimer_read+0x74>
        ui32Ctrl = AM_REGVAL(ui32TmrAddr + 0xC);
   2cf8a:	68c3      	ldr	r3, [r0, #12]
        if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   2cf8c:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   2cf90:	d006      	beq.n	2cfa0 <am_hal_ctimer_read+0x6c>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32Ctrl);
   2cf92:	f3c3 0344 	ubfx	r3, r3, #1, #5
        g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui8ClkSrc;
   2cf96:	4d09      	ldr	r5, [pc, #36]	; (2cfbc <am_hal_ctimer_read+0x88>)
   2cf98:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   2cf9c:	5453      	strb	r3, [r2, r1]
   2cf9e:	e7db      	b.n	2cf58 <am_hal_ctimer_read+0x24>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32Ctrl);
   2cfa0:	f3c3 4344 	ubfx	r3, r3, #17, #5
   2cfa4:	e7f7      	b.n	2cf96 <am_hal_ctimer_read+0x62>
    else
    {
        //
        // No need for the workaround.  Just read and return the register.
        //
        ui32RetVal = AM_REGVAL(ui32TmrAddr);
   2cfa6:	6800      	ldr	r0, [r0, #0]
    }

    //
    // Get the correct return value
    //
    ui32RetVal &= ui32TimerSegment;
   2cfa8:	4020      	ands	r0, r4

    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   2cfaa:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   2cfae:	d001      	beq.n	2cfb4 <am_hal_ctimer_read+0x80>
        ui32RetVal >>= 16;
    }

    return ui32RetVal;

} // am_hal_ctimer_read()
   2cfb0:	b005      	add	sp, #20
   2cfb2:	bd30      	pop	{r4, r5, pc}
        ui32RetVal >>= 16;
   2cfb4:	0c00      	lsrs	r0, r0, #16
    return ui32RetVal;
   2cfb6:	e7fb      	b.n	2cfb0 <am_hal_ctimer_read+0x7c>
   2cfb8:	00033928 	.word	0x00033928
   2cfbc:	10001aa0 	.word	0x10001aa0
   2cfc0:	00033948 	.word	0x00033948

0002cfc4 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
   2cfc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2cfc8:	b083      	sub	sp, #12
   2cfca:	460d      	mov	r5, r1
   2cfcc:	4614      	mov	r4, r2
   2cfce:	461f      	mov	r7, r3

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   2cfd0:	0146      	lsls	r6, r0, #5

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRA0);
   2cfd2:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2d050 <am_hal_ctimer_period_set+0x8c>

    pui32CompareRegB = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRB0);
   2cfd6:	f8df 907c 	ldr.w	r9, [pc, #124]	; 2d054 <am_hal_ctimer_period_set+0x90>

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   2cfda:	f7ff f8af 	bl	2c13c <am_hal_interrupt_master_disable>
   2cfde:	9001      	str	r0, [sp, #4]

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
   2cfe0:	4b1a      	ldr	r3, [pc, #104]	; (2d04c <am_hal_ctimer_period_set+0x88>)
   2cfe2:	58f2      	ldr	r2, [r6, r3]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   2cfe4:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
   2cfe8:	d007      	beq.n	2cffa <am_hal_ctimer_period_set+0x36>
    }

    //
    // Mask to get to the bits we're interested in.
    //
    ui32Mode = ui32Mode & CTIMER_CTRL0_TMRA0FN_Msk;
   2cfea:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
   2cfee:	2a80      	cmp	r2, #128	; 0x80
   2cff0:	d005      	beq.n	2cffe <am_hal_ctimer_period_set+0x3a>
   2cff2:	2ac0      	cmp	r2, #192	; 0xc0
   2cff4:	d003      	beq.n	2cffe <am_hal_ctimer_period_set+0x3a>
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
   2cff6:	2300      	movs	r3, #0
   2cff8:	e003      	b.n	2d002 <am_hal_ctimer_period_set+0x3e>
        ui32Mode = ui32Mode >> 16;
   2cffa:	0c12      	lsrs	r2, r2, #16
   2cffc:	e7f5      	b.n	2cfea <am_hal_ctimer_period_set+0x26>
        ui32Comp1 = ui32Period;
   2cffe:	4623      	mov	r3, r4
        ui32Comp0 = ui32Period - ui32OnTime;
   2d000:	1be4      	subs	r4, r4, r7

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
   2d002:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2d006:	4295      	cmp	r5, r2
   2d008:	d013      	beq.n	2d032 <am_hal_ctimer_period_set+0x6e>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   2d00a:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
   2d00e:	d016      	beq.n	2d03e <am_hal_ctimer_period_set+0x7a>
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   2d010:	b2a2      	uxth	r2, r4
   2d012:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2d016:	f846 2008 	str.w	r2, [r6, r8]
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));

        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1 >> 16));
   2d01a:	0c1b      	lsrs	r3, r3, #16
   2d01c:	041b      	lsls	r3, r3, #16
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
   2d01e:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
   2d022:	f846 3009 	str.w	r3, [r6, r9]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2d026:	9801      	ldr	r0, [sp, #4]
   2d028:	f7ff f88c 	bl	2c144 <am_hal_interrupt_master_set>

} // am_hal_ctimer_period_set()
   2d02c:	b003      	add	sp, #12
   2d02e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   2d032:	b2a4      	uxth	r4, r4
   2d034:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   2d038:	f846 3008 	str.w	r3, [r6, r8]
   2d03c:	e7f3      	b.n	2d026 <am_hal_ctimer_period_set+0x62>
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   2d03e:	b2a4      	uxth	r4, r4
   2d040:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   2d044:	f846 3009 	str.w	r3, [r6, r9]
   2d048:	e7ed      	b.n	2d026 <am_hal_ctimer_period_set+0x62>
   2d04a:	bf00      	nop
   2d04c:	4000800c 	.word	0x4000800c
   2d050:	40008004 	.word	0x40008004
   2d054:	40008008 	.word	0x40008008

0002d058 <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
   2d058:	b510      	push	{r4, lr}
   2d05a:	b082      	sub	sp, #8
   2d05c:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   2d05e:	f7ff f86d 	bl	2c13c <am_hal_interrupt_master_disable>
   2d062:	9001      	str	r0, [sp, #4]

    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN |= ui32Interrupt;
   2d064:	4a05      	ldr	r2, [pc, #20]	; (2d07c <am_hal_ctimer_int_enable+0x24>)
   2d066:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   2d06a:	4323      	orrs	r3, r4
   2d06c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2d070:	9801      	ldr	r0, [sp, #4]
   2d072:	f7ff f867 	bl	2c144 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_enable()
   2d076:	b002      	add	sp, #8
   2d078:	bd10      	pop	{r4, pc}
   2d07a:	bf00      	nop
   2d07c:	40008000 	.word	0x40008000

0002d080 <am_hal_ctimer_int_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_disable(uint32_t ui32Interrupt)
{
   2d080:	b510      	push	{r4, lr}
   2d082:	b082      	sub	sp, #8
   2d084:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   2d086:	f7ff f859 	bl	2c13c <am_hal_interrupt_master_disable>
   2d08a:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN &= ~ui32Interrupt;
   2d08c:	4a05      	ldr	r2, [pc, #20]	; (2d0a4 <am_hal_ctimer_int_disable+0x24>)
   2d08e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   2d092:	ea23 0304 	bic.w	r3, r3, r4
   2d096:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2d09a:	9801      	ldr	r0, [sp, #4]
   2d09c:	f7ff f852 	bl	2c144 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_disable()
   2d0a0:	b002      	add	sp, #8
   2d0a2:	bd10      	pop	{r4, pc}
   2d0a4:	40008000 	.word	0x40008000

0002d0a8 <am_hal_ctimer_int_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
   2d0a8:	b510      	push	{r4, lr}
   2d0aa:	b082      	sub	sp, #8
   2d0ac:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   2d0ae:	f7ff f845 	bl	2c13c <am_hal_interrupt_master_disable>
   2d0b2:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTCLR = ui32Interrupt;
   2d0b4:	4b03      	ldr	r3, [pc, #12]	; (2d0c4 <am_hal_ctimer_int_clear+0x1c>)
   2d0b6:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2d0ba:	9801      	ldr	r0, [sp, #4]
   2d0bc:	f7ff f842 	bl	2c144 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_clear()
   2d0c0:	b002      	add	sp, #8
   2d0c2:	bd10      	pop	{r4, pc}
   2d0c4:	40008000 	.word	0x40008000

0002d0c8 <am_hal_ctimer_int_set>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_set(uint32_t ui32Interrupt)
{
   2d0c8:	b510      	push	{r4, lr}
   2d0ca:	b082      	sub	sp, #8
   2d0cc:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   2d0ce:	f7ff f835 	bl	2c13c <am_hal_interrupt_master_disable>
   2d0d2:	9001      	str	r0, [sp, #4]

    //
    // Set the interrupts.
    //
    CTIMERn(0)->INTSET = ui32Interrupt;
   2d0d4:	4b03      	ldr	r3, [pc, #12]	; (2d0e4 <am_hal_ctimer_int_set+0x1c>)
   2d0d6:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2d0da:	9801      	ldr	r0, [sp, #4]
   2d0dc:	f7ff f832 	bl	2c144 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_set()
   2d0e0:	b002      	add	sp, #8
   2d0e2:	bd10      	pop	{r4, pc}
   2d0e4:	40008000 	.word	0x40008000

0002d0e8 <am_hal_ctimer_int_status_get>:
//! @return ui32RetVal either the timer interrupt status, or interrupt enabled.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_int_status_get(bool bEnabledOnly)
{
   2d0e8:	b510      	push	{r4, lr}
   2d0ea:	b082      	sub	sp, #8
   2d0ec:	4604      	mov	r4, r0
    uint32_t ui32RetVal = 0;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   2d0ee:	f7ff f825 	bl	2c13c <am_hal_interrupt_master_disable>
   2d0f2:	9001      	str	r0, [sp, #4]

    //
    // Return the desired status.
    //

    if ( bEnabledOnly )
   2d0f4:	b15c      	cbz	r4, 2d10e <am_hal_ctimer_int_status_get+0x26>
    {
        ui32RetVal  = CTIMERn(0)->INTSTAT;
   2d0f6:	4b08      	ldr	r3, [pc, #32]	; (2d118 <am_hal_ctimer_int_status_get+0x30>)
   2d0f8:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
        ui32RetVal &= CTIMERn(0)->INTEN;
   2d0fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   2d100:	401c      	ands	r4, r3
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2d102:	9801      	ldr	r0, [sp, #4]
   2d104:	f7ff f81e 	bl	2c144 <am_hal_interrupt_master_set>

    return ui32RetVal;

} // am_hal_ctimer_int_status_get()
   2d108:	4620      	mov	r0, r4
   2d10a:	b002      	add	sp, #8
   2d10c:	bd10      	pop	{r4, pc}
        ui32RetVal = CTIMERn(0)->INTSTAT;
   2d10e:	4b02      	ldr	r3, [pc, #8]	; (2d118 <am_hal_ctimer_int_status_get+0x30>)
   2d110:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   2d114:	e7f5      	b.n	2d102 <am_hal_ctimer_int_status_get+0x1a>
   2d116:	bf00      	nop
   2d118:	40008000 	.word	0x40008000

0002d11c <am_hal_triple_read>:
#elif defined(__GNUC_STDC_INLINE__)
__attribute__((naked))
void
am_hal_triple_read(uint32_t ui32TimerAddr, uint32_t ui32Data[])
{
    __asm
   2d11c:	b412      	push	{r1, r4}
   2d11e:	f3ef 8410 	mrs	r4, PRIMASK
   2d122:	b672      	cpsid	i
   2d124:	6801      	ldr	r1, [r0, #0]
   2d126:	6802      	ldr	r2, [r0, #0]
   2d128:	6803      	ldr	r3, [r0, #0]
   2d12a:	f384 8810 	msr	PRIMASK, r4
   2d12e:	bc11      	pop	{r0, r4}
   2d130:	6001      	str	r1, [r0, #0]
   2d132:	6042      	str	r2, [r0, #4]
   2d134:	6083      	str	r3, [r0, #8]
   2d136:	4770      	bx	lr

0002d138 <pincfg_equ>:

    //
    // We're assuming that am_hal_gpio_pincfg_t boils down to a uint32_t,
    // which is its intent.
    //
    ui32A = *((uint32_t*)cfg1);
   2d138:	6800      	ldr	r0, [r0, #0]
    ui32B = *((uint32_t*)cfg2);
   2d13a:	680b      	ldr	r3, [r1, #0]

    return ui32A == ui32B ? true : false;

} // pincfg_equ()
   2d13c:	4298      	cmp	r0, r3
   2d13e:	bf14      	ite	ne
   2d140:	2000      	movne	r0, #0
   2d142:	2001      	moveq	r0, #1
   2d144:	4770      	bx	lr
	...

0002d148 <am_hal_gpio_pinconfig>:
//
//*****************************************************************************
uint32_t
am_hal_gpio_pinconfig(uint32_t ui32Pin, am_hal_gpio_pincfg_t bfGpioCfg)

{
   2d148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d14c:	b087      	sub	sp, #28
   2d14e:	9103      	str	r1, [sp, #12]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
   2d150:	2831      	cmp	r0, #49	; 0x31
   2d152:	f200 8102 	bhi.w	2d35a <am_hal_gpio_pinconfig+0x212>
   2d156:	4604      	mov	r4, r0
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
   2d158:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2d15c:	f003 0107 	and.w	r1, r3, #7
    ui32PowerSw = bfGpioCfg.ePowerSw;
   2d160:	f3c3 05c1 	ubfx	r5, r3, #3, #2

    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
   2d164:	00ca      	lsls	r2, r1, #3

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
   2d166:	f013 03e0 	ands.w	r3, r3, #224	; 0xe0
   2d16a:	d013      	beq.n	2d194 <am_hal_gpio_pinconfig+0x4c>
    {
        //
        // This setting is needed for all pullup settings including
        // AM_HAL_GPIO_PIN_PULLUP_WEAK and AM_HAL_GPIO_PIN_PULLDOWN.
        //
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
   2d16c:	f042 0201 	orr.w	r2, r2, #1

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
   2d170:	f89d 000c 	ldrb.w	r0, [sp, #12]
   2d174:	0940      	lsrs	r0, r0, #5
   2d176:	1d86      	adds	r6, r0, #6
   2d178:	f006 0607 	and.w	r6, r6, #7
   2d17c:	2e03      	cmp	r6, #3
   2d17e:	f200 80a2 	bhi.w	2d2c6 <am_hal_gpio_pinconfig+0x17e>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
   2d182:	3802      	subs	r0, #2
   2d184:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
                           PADREG_FLD_76_S);
#ifndef AM_HAL_DISABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
   2d188:	4b7a      	ldr	r3, [pc, #488]	; (2d374 <am_hal_gpio_pinconfig+0x22c>)
   2d18a:	5d1b      	ldrb	r3, [r3, r4]
   2d18c:	f013 0f01 	tst.w	r3, #1
   2d190:	f000 80e5 	beq.w	2d35e <am_hal_gpio_pinconfig+0x216>
    }

    //
    // Check if requesting a power switch pin
    //
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
   2d194:	b16d      	cbz	r5, 2d1b2 <am_hal_gpio_pinconfig+0x6a>
    {
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
   2d196:	2d01      	cmp	r5, #1
   2d198:	f000 80a4 	beq.w	2d2e4 <am_hal_gpio_pinconfig+0x19c>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
        {
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
        }
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
   2d19c:	2d02      	cmp	r5, #2
   2d19e:	f040 80e0 	bne.w	2d362 <am_hal_gpio_pinconfig+0x21a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
   2d1a2:	4b74      	ldr	r3, [pc, #464]	; (2d374 <am_hal_gpio_pinconfig+0x22c>)
   2d1a4:	5d1b      	ldrb	r3, [r3, r4]
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
   2d1a6:	f013 0f04 	tst.w	r3, #4
   2d1aa:	f000 80dc 	beq.w	2d366 <am_hal_gpio_pinconfig+0x21e>
        {
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
   2d1ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    }

    //
    // Depending on the selected pin and FNSEL, determine if INPEN needs to be set.
    //
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
   2d1b2:	4b71      	ldr	r3, [pc, #452]	; (2d378 <am_hal_gpio_pinconfig+0x230>)
   2d1b4:	5d1d      	ldrb	r5, [r3, r4]
   2d1b6:	410d      	asrs	r5, r1
   2d1b8:	006d      	lsls	r5, r5, #1
   2d1ba:	f005 0502 	and.w	r5, r5, #2
   2d1be:	4315      	orrs	r5, r2

    //
    // Configure ui32GpCfg based on whether nCE requested.
    //
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
   2d1c0:	4b6e      	ldr	r3, [pc, #440]	; (2d37c <am_hal_gpio_pinconfig+0x234>)
   2d1c2:	5d1b      	ldrb	r3, [r3, r4]
   2d1c4:	428b      	cmp	r3, r1
   2d1c6:	f000 8096 	beq.w	2d2f6 <am_hal_gpio_pinconfig+0x1ae>
    {
        //
        // It's not nCE, it's one of the other funcsels.
        // Start by setting the value of the requested GPIO input.
        //
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
   2d1ca:	f89d 700d 	ldrb.w	r7, [sp, #13]
   2d1ce:	f3c7 1300 	ubfx	r3, r7, #4, #1
   2d1d2:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
        //  GPIOCFG register field, which is a 4-bit field:
        //  [INTD(1):OUTCFG(2):INCFG(1)].
        // Bit0 of eIntDir maps to GPIOCFG.INTD  (b3).
        // Bit1 of eIntDir maps to GPIOCFG.INCFG (b0).
        //
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
   2d1d6:	f3c7 0281 	ubfx	r2, r7, #2, #2
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
   2d1da:	f3c7 1341 	ubfx	r3, r7, #5, #2
   2d1de:	00de      	lsls	r6, r3, #3
   2d1e0:	f006 0608 	and.w	r6, r6, #8
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
   2d1e4:	ea46 0642 	orr.w	r6, r6, r2, lsl #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
   2d1e8:	ea46 0653 	orr.w	r6, r6, r3, lsr #1
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);

        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
   2d1ec:	f007 030c 	and.w	r3, r7, #12
   2d1f0:	2b04      	cmp	r3, #4
   2d1f2:	f000 80a5 	beq.w	2d340 <am_hal_gpio_pinconfig+0x1f8>
             pincfg_equ(&bfGpioCfg, (void*)&g_AM_HAL_GPIO_DISABLE) )
   2d1f6:	4962      	ldr	r1, [pc, #392]	; (2d380 <am_hal_gpio_pinconfig+0x238>)
   2d1f8:	a803      	add	r0, sp, #12
   2d1fa:	f7ff ff9d 	bl	2d138 <pincfg_equ>
   2d1fe:	9002      	str	r0, [sp, #8]
        //  use when GPIO interrupts are not in use and can be used when no
        //  eIntDir setting is provided.
        // If eIntDir is provided, eGPRdZero is ignored and can only be
        //  achieved via the AM_HAL_GPIO_PIN_INTDIR_NONE setting.
        //
        if ( bfGpioCfg.eIntDir == 0 )
   2d200:	f017 0f60 	tst.w	r7, #96	; 0x60
   2d204:	d104      	bne.n	2d210 <am_hal_gpio_pinconfig+0xc8>
        {
            ui32GPCfg &= ~(1 << GPIOCFG_FLD_INCFG_S);
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
   2d206:	f89d 300d 	ldrb.w	r3, [sp, #13]
   2d20a:	09db      	lsrs	r3, r3, #7
   2d20c:	f363 0600 	bfi	r6, r3, #0, #1
        }
    }

    switch ( bfGpioCfg.eDriveStrength )
   2d210:	f89d 300d 	ldrb.w	r3, [sp, #13]
   2d214:	f003 0303 	and.w	r3, r3, #3
   2d218:	2b02      	cmp	r3, #2
   2d21a:	f000 809c 	beq.w	2d356 <am_hal_gpio_pinconfig+0x20e>
   2d21e:	2b03      	cmp	r3, #3
   2d220:	f000 8095 	beq.w	2d34e <am_hal_gpio_pinconfig+0x206>
   2d224:	2b01      	cmp	r3, #1
   2d226:	f000 808e 	beq.w	2d346 <am_hal_gpio_pinconfig+0x1fe>
   2d22a:	2000      	movs	r0, #0
    //
    uint32_t ui32GPCfgAddr, ui32PadregAddr, ui32AltpadAddr;
    uint32_t ui32GPCfgClearMask, ui32PadClearMask;
    uint32_t ui32GPCfgShft, ui32PadShft;

    ui32GPCfgAddr       = AM_REGADDR(GPIO, CFGA)       + ((ui32Pin >> 1) & ~0x3);
   2d22c:	ea4f 0854 	mov.w	r8, r4, lsr #1
   2d230:	f028 0803 	bic.w	r8, r8, #3
   2d234:	f8df b170 	ldr.w	fp, [pc, #368]	; 2d3a8 <am_hal_gpio_pinconfig+0x260>
    ui32PadregAddr      = AM_REGADDR(GPIO, PADREGA)    + (ui32Pin & ~0x3);
   2d238:	f024 0a03 	bic.w	sl, r4, #3
   2d23c:	f10a 4980 	add.w	r9, sl, #1073741824	; 0x40000000
   2d240:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    ui32AltpadAddr      = AM_REGADDR(GPIO, ALTPADCFGA) + (ui32Pin & ~0x3);

    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
   2d244:	00a2      	lsls	r2, r4, #2
   2d246:	f002 021c 	and.w	r2, r2, #28
    ui32PadShft         = ((ui32Pin & 0x3) << 3);
   2d24a:	00e3      	lsls	r3, r4, #3
   2d24c:	f003 0318 	and.w	r3, r3, #24
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
   2d250:	210f      	movs	r1, #15
   2d252:	4091      	lsls	r1, r2
   2d254:	43c9      	mvns	r1, r1
   2d256:	9100      	str	r1, [sp, #0]
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
   2d258:	27ff      	movs	r7, #255	; 0xff
   2d25a:	409f      	lsls	r7, r3
   2d25c:	43ff      	mvns	r7, r7

    //
    // Get the new values into their rightful bit positions.
    //
    ui32Padreg    <<= ui32PadShft;
   2d25e:	409d      	lsls	r5, r3
    ui32AltPadCfg <<= ui32PadShft;
   2d260:	fa00 f303 	lsl.w	r3, r0, r3
   2d264:	9301      	str	r3, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
   2d266:	4096      	lsls	r6, r2

    AM_CRITICAL_BEGIN
   2d268:	f7fe ff68 	bl	2c13c <am_hal_interrupt_master_disable>
   2d26c:	9005      	str	r0, [sp, #20]

    if ( bClearEnable )
   2d26e:	9b02      	ldr	r3, [sp, #8]
   2d270:	b143      	cbz	r3, 2d284 <am_hal_gpio_pinconfig+0x13c>
    {
        //
        // We're configuring a mode that requires clearing the Enable bit.
        //
        am_hal_gpio_output_tristate_disable(ui32Pin);
   2d272:	f004 021f 	and.w	r2, r4, #31
   2d276:	08e4      	lsrs	r4, r4, #3
   2d278:	f004 0404 	and.w	r4, r4, #4
   2d27c:	2301      	movs	r3, #1
   2d27e:	4093      	lsls	r3, r2
   2d280:	4a40      	ldr	r2, [pc, #256]	; (2d384 <am_hal_gpio_pinconfig+0x23c>)
   2d282:	50a3      	str	r3, [r4, r2]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
   2d284:	4a40      	ldr	r2, [pc, #256]	; (2d388 <am_hal_gpio_pinconfig+0x240>)
   2d286:	2373      	movs	r3, #115	; 0x73
   2d288:	6613      	str	r3, [r2, #96]	; 0x60

    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
   2d28a:	f8d9 3000 	ldr.w	r3, [r9]
   2d28e:	403b      	ands	r3, r7
   2d290:	431d      	orrs	r5, r3
   2d292:	f8c9 5000 	str.w	r5, [r9]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
   2d296:	f858 300b 	ldr.w	r3, [r8, fp]
   2d29a:	9900      	ldr	r1, [sp, #0]
   2d29c:	400b      	ands	r3, r1
   2d29e:	431e      	orrs	r6, r3
   2d2a0:	f848 600b 	str.w	r6, [r8, fp]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
   2d2a4:	4939      	ldr	r1, [pc, #228]	; (2d38c <am_hal_gpio_pinconfig+0x244>)
   2d2a6:	f85a 3001 	ldr.w	r3, [sl, r1]
   2d2aa:	401f      	ands	r7, r3
   2d2ac:	9b01      	ldr	r3, [sp, #4]
   2d2ae:	431f      	orrs	r7, r3
   2d2b0:	f84a 7001 	str.w	r7, [sl, r1]

    GPIO->PADKEY = 0;
   2d2b4:	2400      	movs	r4, #0
   2d2b6:	6614      	str	r4, [r2, #96]	; 0x60

    AM_CRITICAL_END
   2d2b8:	9805      	ldr	r0, [sp, #20]
   2d2ba:	f7fe ff43 	bl	2c144 <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
   2d2be:	4620      	mov	r0, r4

} // am_hal_gpio_pinconfig()
   2d2c0:	b007      	add	sp, #28
   2d2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
   2d2c6:	2bc0      	cmp	r3, #192	; 0xc0
   2d2c8:	d007      	beq.n	2d2da <am_hal_gpio_pinconfig+0x192>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
   2d2ca:	2b20      	cmp	r3, #32
   2d2cc:	f47f af62 	bne.w	2d194 <am_hal_gpio_pinconfig+0x4c>
            if ( ui32Pin == 20 )
   2d2d0:	2c14      	cmp	r4, #20
   2d2d2:	f47f af5f 	bne.w	2d194 <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLUP;
   2d2d6:	482e      	ldr	r0, [pc, #184]	; (2d390 <am_hal_gpio_pinconfig+0x248>)
   2d2d8:	e7f2      	b.n	2d2c0 <am_hal_gpio_pinconfig+0x178>
            if ( ui32Pin != 20 )
   2d2da:	2c14      	cmp	r4, #20
   2d2dc:	f43f af5a 	beq.w	2d194 <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLDOWN;
   2d2e0:	482c      	ldr	r0, [pc, #176]	; (2d394 <am_hal_gpio_pinconfig+0x24c>)
   2d2e2:	e7ed      	b.n	2d2c0 <am_hal_gpio_pinconfig+0x178>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
   2d2e4:	4b23      	ldr	r3, [pc, #140]	; (2d374 <am_hal_gpio_pinconfig+0x22c>)
   2d2e6:	5d1b      	ldrb	r3, [r3, r4]
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
   2d2e8:	f013 0f02 	tst.w	r3, #2
   2d2ec:	f43f af56 	beq.w	2d19c <am_hal_gpio_pinconfig+0x54>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
   2d2f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   2d2f4:	e75d      	b.n	2d1b2 <am_hal_gpio_pinconfig+0x6a>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
   2d2f6:	f89d 300e 	ldrb.w	r3, [sp, #14]
   2d2fa:	f003 0307 	and.w	r3, r3, #7
   2d2fe:	2b07      	cmp	r3, #7
   2d300:	d033      	beq.n	2d36a <am_hal_gpio_pinconfig+0x222>
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
   2d302:	f89d 300e 	ldrb.w	r3, [sp, #14]
   2d306:	f003 0107 	and.w	r1, r3, #7
   2d30a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   2d30e:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
   2d312:	2300      	movs	r3, #0
   2d314:	2b03      	cmp	r3, #3
   2d316:	d807      	bhi.n	2d328 <am_hal_gpio_pinconfig+0x1e0>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
   2d318:	4a1f      	ldr	r2, [pc, #124]	; (2d398 <am_hal_gpio_pinconfig+0x250>)
   2d31a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
   2d31e:	5cd2      	ldrb	r2, [r2, r3]
   2d320:	428a      	cmp	r2, r1
   2d322:	d001      	beq.n	2d328 <am_hal_gpio_pinconfig+0x1e0>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
   2d324:	3301      	adds	r3, #1
   2d326:	e7f5      	b.n	2d314 <am_hal_gpio_pinconfig+0x1cc>
        if ( ui32Outcfg >= 4 )
   2d328:	2b03      	cmp	r3, #3
   2d32a:	d820      	bhi.n	2d36e <am_hal_gpio_pinconfig+0x226>
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
   2d32c:	f89d 600e 	ldrb.w	r6, [sp, #14]
   2d330:	f3c6 1640 	ubfx	r6, r6, #5, #1
   2d334:	00f6      	lsls	r6, r6, #3
   2d336:	ea46 0643 	orr.w	r6, r6, r3, lsl #1
    bool bClearEnable = false;
   2d33a:	2300      	movs	r3, #0
   2d33c:	9302      	str	r3, [sp, #8]
   2d33e:	e767      	b.n	2d210 <am_hal_gpio_pinconfig+0xc8>
            bClearEnable = true;
   2d340:	2301      	movs	r3, #1
   2d342:	9302      	str	r3, [sp, #8]
   2d344:	e75c      	b.n	2d200 <am_hal_gpio_pinconfig+0xb8>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
   2d346:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (0 << 0);
   2d34a:	2000      	movs	r0, #0
            break;
   2d34c:	e76e      	b.n	2d22c <am_hal_gpio_pinconfig+0xe4>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
   2d34e:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (1 << 0);
   2d352:	2001      	movs	r0, #1
            break;
   2d354:	e76a      	b.n	2d22c <am_hal_gpio_pinconfig+0xe4>
            ui32AltPadCfg |= (1 << 0);
   2d356:	2001      	movs	r0, #1
   2d358:	e768      	b.n	2d22c <am_hal_gpio_pinconfig+0xe4>
        return AM_HAL_STATUS_INVALID_ARG;
   2d35a:	2006      	movs	r0, #6
   2d35c:	e7b0      	b.n	2d2c0 <am_hal_gpio_pinconfig+0x178>
                return AM_HAL_GPIO_ERR_PULLUP;
   2d35e:	480c      	ldr	r0, [pc, #48]	; (2d390 <am_hal_gpio_pinconfig+0x248>)
   2d360:	e7ae      	b.n	2d2c0 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_PWRSW;
   2d362:	480e      	ldr	r0, [pc, #56]	; (2d39c <am_hal_gpio_pinconfig+0x254>)
   2d364:	e7ac      	b.n	2d2c0 <am_hal_gpio_pinconfig+0x178>
   2d366:	480d      	ldr	r0, [pc, #52]	; (2d39c <am_hal_gpio_pinconfig+0x254>)
   2d368:	e7aa      	b.n	2d2c0 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
   2d36a:	480d      	ldr	r0, [pc, #52]	; (2d3a0 <am_hal_gpio_pinconfig+0x258>)
   2d36c:	e7a8      	b.n	2d2c0 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCEPIN;
   2d36e:	480d      	ldr	r0, [pc, #52]	; (2d3a4 <am_hal_gpio_pinconfig+0x25c>)
   2d370:	e7a6      	b.n	2d2c0 <am_hal_gpio_pinconfig+0x178>
   2d372:	bf00      	nop
   2d374:	0003396c 	.word	0x0003396c
   2d378:	000339a0 	.word	0x000339a0
   2d37c:	00033a9c 	.word	0x00033a9c
   2d380:	00033968 	.word	0x00033968
   2d384:	400100b4 	.word	0x400100b4
   2d388:	40010000 	.word	0x40010000
   2d38c:	400100e0 	.word	0x400100e0
   2d390:	08000100 	.word	0x08000100
   2d394:	08000101 	.word	0x08000101
   2d398:	000339d4 	.word	0x000339d4
   2d39c:	08000102 	.word	0x08000102
   2d3a0:	08000103 	.word	0x08000103
   2d3a4:	08000104 	.word	0x08000104
   2d3a8:	40010040 	.word	0x40010040

0002d3ac <am_hal_stimer_config>:
//! @return The 32-bit current config of the STimer Config register
//
//*****************************************************************************
uint32_t
am_hal_stimer_config(uint32_t ui32STimerConfig)
{
   2d3ac:	4603      	mov	r3, r0
    uint32_t ui32CurrVal;

    //
    // Read the current config
    //
    ui32CurrVal = CTIMER->STCFG;
   2d3ae:	4a03      	ldr	r2, [pc, #12]	; (2d3bc <am_hal_stimer_config+0x10>)
   2d3b0:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140

    //
    // Write our configuration value.
    //
    CTIMER->STCFG = ui32STimerConfig;
   2d3b4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        PWRCTRL->MISC_b.FORCEMEMVRLPTIMERS = 1;
    }
#endif

    return ui32CurrVal;
}
   2d3b8:	4770      	bx	lr
   2d3ba:	bf00      	nop
   2d3bc:	40008000 	.word	0x40008000

0002d3c0 <am_hal_stimer_counter_get>:
//! @return The 32-bit value from the STimer counter register.
//
//*****************************************************************************
uint32_t
am_hal_stimer_counter_get(void)
{
   2d3c0:	b500      	push	{lr}
   2d3c2:	b085      	sub	sp, #20
    uint32_t ui32RetVal;

    //
    // Read the register into ui32Values[].
    //
    am_hal_triple_read(ui32TmrAddr, ui32Values);
   2d3c4:	a901      	add	r1, sp, #4
   2d3c6:	4805      	ldr	r0, [pc, #20]	; (2d3dc <am_hal_stimer_counter_get+0x1c>)
   2d3c8:	f7ff fea8 	bl	2d11c <am_hal_triple_read>
    //
    // Now determine which of the three values is the correct value.
    // If the first 2 match, then the values are both correct and we're done.
    // Otherwise, the third value is taken to be the correct value.
    //
    if ( ui32Values[0] == ui32Values[1] )
   2d3cc:	9802      	ldr	r0, [sp, #8]
   2d3ce:	9b01      	ldr	r3, [sp, #4]
   2d3d0:	4283      	cmp	r3, r0
   2d3d2:	d000      	beq.n	2d3d6 <am_hal_stimer_counter_get+0x16>
        //
        ui32RetVal = ui32Values[1];
    }
    else
    {
        ui32RetVal = ui32Values[2];
   2d3d4:	9803      	ldr	r0, [sp, #12]
    }
    return ui32RetVal;
}
   2d3d6:	b005      	add	sp, #20
   2d3d8:	f85d fb04 	ldr.w	pc, [sp], #4
   2d3dc:	40008144 	.word	0x40008144

0002d3e0 <am_hal_stimer_counter_clear>:
am_hal_stimer_counter_clear(void)
{
    //
    // Set the clear bit
    //
    CTIMER->STCFG |= CTIMER_STCFG_CLEAR_Msk;
   2d3e0:	4b06      	ldr	r3, [pc, #24]	; (2d3fc <am_hal_stimer_counter_clear+0x1c>)
   2d3e2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   2d3e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
   2d3ea:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

    //
    // Reset the clear bit
    //
    CTIMER->STCFG &= ~CTIMER_STCFG_CLEAR_Msk;
   2d3ee:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   2d3f2:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
   2d3f6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
   2d3fa:	4770      	bx	lr
   2d3fc:	40008000 	.word	0x40008000

0002d400 <am_hal_stimer_compare_delta_set>:
am_hal_stimer_compare_delta_set(uint32_t ui32CmprInstance, uint32_t ui32Delta)
{
    uint32_t cfgVal;
    uint32_t numTries = 0;

    if ( ui32CmprInstance > 7 )
   2d400:	2807      	cmp	r0, #7
   2d402:	d900      	bls.n	2d406 <am_hal_stimer_compare_delta_set+0x6>
   2d404:	4770      	bx	lr
{
   2d406:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d408:	b083      	sub	sp, #12
   2d40a:	4605      	mov	r5, r0
   2d40c:	460c      	mov	r4, r1
    // that delta value is at least > 1

    //
    // Start a critical section.
    //
    AM_CRITICAL_BEGIN
   2d40e:	f7fe fe95 	bl	2c13c <am_hal_interrupt_master_disable>
   2d412:	9001      	str	r0, [sp, #4]

    //
    // Get current CFG value
    //
    cfgVal = CTIMER->STCFG;
   2d414:	4b16      	ldr	r3, [pc, #88]	; (2d470 <am_hal_stimer_compare_delta_set+0x70>)
   2d416:	f8d3 6140 	ldr.w	r6, [r3, #320]	; 0x140

    //
    // Disable the compare if already enabled, when setting the new value
    //
    CTIMER->STCFG &= ~((AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance));
   2d41a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   2d41e:	f44f 7080 	mov.w	r0, #256	; 0x100
   2d422:	40a8      	lsls	r0, r5
   2d424:	ea22 0200 	bic.w	r2, r2, r0
   2d428:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    uint32_t numTries = 0;
   2d42c:	2100      	movs	r1, #0

    // In rare case the delta might not be effective
    // We retry if that is the case.
    // Allow for some variability in the value owing to execution latency
    while (numTries++ < 4)
   2d42e:	2903      	cmp	r1, #3
   2d430:	f101 0101 	add.w	r1, r1, #1
   2d434:	d810      	bhi.n	2d458 <am_hal_stimer_compare_delta_set+0x58>
        uint32_t expVal;
        uint32_t expMax;
        uint32_t cmpVal;

        // Expected value
        expVal = CTIMER->STTMR + ui32Delta;
   2d436:	4b0e      	ldr	r3, [pc, #56]	; (2d470 <am_hal_stimer_compare_delta_set+0x70>)
   2d438:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   2d43c:	4423      	add	r3, r4

        // Max allowed - taking care of latency
        expMax = expVal + 10;
   2d43e:	f103 070a 	add.w	r7, r3, #10

        //
        // Set the delta
        //
        AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance)) = ui32Delta;
   2d442:	4a0c      	ldr	r2, [pc, #48]	; (2d474 <am_hal_stimer_compare_delta_set+0x74>)
   2d444:	442a      	add	r2, r5
   2d446:	0092      	lsls	r2, r2, #2
   2d448:	6014      	str	r4, [r2, #0]

        // Read back the compare value
        cmpVal = AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance));
   2d44a:	6812      	ldr	r2, [r2, #0]

        // Make sure the value is in expected range
        if (!AM_HAL_U32_SMALLER(cmpVal, expVal) && !AM_HAL_U32_GREATER(cmpVal, expMax))
   2d44c:	1ad3      	subs	r3, r2, r3
   2d44e:	2b00      	cmp	r3, #0
   2d450:	dbed      	blt.n	2d42e <am_hal_stimer_compare_delta_set+0x2e>
   2d452:	1bd2      	subs	r2, r2, r7
   2d454:	2a00      	cmp	r2, #0
   2d456:	dcea      	bgt.n	2d42e <am_hal_stimer_compare_delta_set+0x2e>


    //
    // Restore Compare Enable bit
    //
    CTIMER->STCFG |= cfgVal & (AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance);
   2d458:	4a05      	ldr	r2, [pc, #20]	; (2d470 <am_hal_stimer_compare_delta_set+0x70>)
   2d45a:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
   2d45e:	4030      	ands	r0, r6
   2d460:	4318      	orrs	r0, r3
   2d462:	f8c2 0140 	str.w	r0, [r2, #320]	; 0x140

    //
    // End the critical section.
    //
    AM_CRITICAL_END
   2d466:	9801      	ldr	r0, [sp, #4]
   2d468:	f7fe fe6c 	bl	2c144 <am_hal_interrupt_master_set>
}
   2d46c:	b003      	add	sp, #12
   2d46e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d470:	40008000 	.word	0x40008000
   2d474:	10002054 	.word	0x10002054

0002d478 <am_hal_stimer_int_enable>:
am_hal_stimer_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTEN |= ui32Interrupt;
   2d478:	4a03      	ldr	r2, [pc, #12]	; (2d488 <am_hal_stimer_int_enable+0x10>)
   2d47a:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
   2d47e:	4303      	orrs	r3, r0
   2d480:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
   2d484:	4770      	bx	lr
   2d486:	bf00      	nop
   2d488:	40008000 	.word	0x40008000

0002d48c <am_hal_stimer_int_clear>:
am_hal_stimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTCLR = ui32Interrupt;
   2d48c:	4b01      	ldr	r3, [pc, #4]	; (2d494 <am_hal_stimer_int_clear+0x8>)
   2d48e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
}
   2d492:	4770      	bx	lr
   2d494:	40008000 	.word	0x40008000

0002d498 <put_le16>:
put_le16(void *buf, uint16_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   2d498:	7001      	strb	r1, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   2d49a:	0a09      	lsrs	r1, r1, #8
   2d49c:	7041      	strb	r1, [r0, #1]
}
   2d49e:	4770      	bx	lr

0002d4a0 <put_le32>:
put_le32(void *buf, uint32_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   2d4a0:	7001      	strb	r1, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   2d4a2:	f3c1 2307 	ubfx	r3, r1, #8, #8
   2d4a6:	7043      	strb	r3, [r0, #1]
    u8ptr[2] = (uint8_t)(x >> 16);
   2d4a8:	f3c1 4307 	ubfx	r3, r1, #16, #8
   2d4ac:	7083      	strb	r3, [r0, #2]
    u8ptr[3] = (uint8_t)(x >> 24);
   2d4ae:	0e09      	lsrs	r1, r1, #24
   2d4b0:	70c1      	strb	r1, [r0, #3]
}
   2d4b2:	4770      	bx	lr

0002d4b4 <get_le16>:
{
    const uint8_t *u8ptr;
    uint16_t x;

    u8ptr = buf;
    x = u8ptr[0];
   2d4b4:	7803      	ldrb	r3, [r0, #0]
    x |= (uint16_t)u8ptr[1] << 8;
   2d4b6:	7840      	ldrb	r0, [r0, #1]

    return x;
}
   2d4b8:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   2d4bc:	4770      	bx	lr

0002d4be <get_le32>:
{
    const uint8_t *u8ptr;
    uint32_t x;

    u8ptr = buf;
    x = u8ptr[0];
   2d4be:	7803      	ldrb	r3, [r0, #0]
    x |= (uint32_t)u8ptr[1] << 8;
   2d4c0:	7842      	ldrb	r2, [r0, #1]
   2d4c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    x |= (uint32_t)u8ptr[2] << 16;
   2d4c6:	7882      	ldrb	r2, [r0, #2]
   2d4c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    x |= (uint32_t)u8ptr[3] << 24;
   2d4cc:	78c0      	ldrb	r0, [r0, #3]

    return x;
}
   2d4ce:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   2d4d2:	4770      	bx	lr

0002d4d4 <swap_in_place>:
    int i;
    int j;

    u8ptr = buf;

    for (i = 0, j = len - 1; i < j; i++, j--) {
   2d4d4:	3901      	subs	r1, #1
   2d4d6:	2300      	movs	r3, #0
   2d4d8:	428b      	cmp	r3, r1
   2d4da:	da0a      	bge.n	2d4f2 <swap_in_place+0x1e>
{
   2d4dc:	b410      	push	{r4}
        tmp = u8ptr[i];
   2d4de:	5cc2      	ldrb	r2, [r0, r3]

        u8ptr[i] = u8ptr[j];
   2d4e0:	5c44      	ldrb	r4, [r0, r1]
   2d4e2:	54c4      	strb	r4, [r0, r3]
        u8ptr[j] = tmp;
   2d4e4:	5442      	strb	r2, [r0, r1]
    for (i = 0, j = len - 1; i < j; i++, j--) {
   2d4e6:	3301      	adds	r3, #1
   2d4e8:	3901      	subs	r1, #1
   2d4ea:	428b      	cmp	r3, r1
   2d4ec:	dbf7      	blt.n	2d4de <swap_in_place+0xa>
    }
}
   2d4ee:	bc10      	pop	{r4}
   2d4f0:	4770      	bx	lr
   2d4f2:	4770      	bx	lr

0002d4f4 <swap_buf>:
void
swap_buf(uint8_t *dst, const uint8_t *src, int len)
{
    int i;

    for (i = 0; i < len; i++) {
   2d4f4:	2300      	movs	r3, #0
   2d4f6:	4293      	cmp	r3, r2
   2d4f8:	da09      	bge.n	2d50e <swap_buf+0x1a>
{
   2d4fa:	b430      	push	{r4, r5}
        dst[len - 1 - i] = src[i];
   2d4fc:	1e54      	subs	r4, r2, #1
   2d4fe:	1ae4      	subs	r4, r4, r3
   2d500:	5ccd      	ldrb	r5, [r1, r3]
   2d502:	5505      	strb	r5, [r0, r4]
    for (i = 0; i < len; i++) {
   2d504:	3301      	adds	r3, #1
   2d506:	4293      	cmp	r3, r2
   2d508:	dbf8      	blt.n	2d4fc <swap_buf+0x8>
    }
}
   2d50a:	bc30      	pop	{r4, r5}
   2d50c:	4770      	bx	lr
   2d50e:	4770      	bx	lr

0002d510 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   2d510:	b508      	push	{r3, lr}
   2d512:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   2d514:	2000      	movs	r0, #0
   2d516:	f7ff fae1 	bl	2cadc <hal_timer_config>
    return rc;
}
   2d51a:	bd08      	pop	{r3, pc}

0002d51c <os_error_to_sys>:
#include "os/os_error.h"

int
os_error_to_sys(os_error_t os_error)
{
    switch (os_error) {
   2d51c:	280b      	cmp	r0, #11
   2d51e:	d818      	bhi.n	2d552 <os_error_to_sys+0x36>
   2d520:	e8df f000 	tbb	[pc, r0]
   2d524:	0b081a06 	.word	0x0b081a06
   2d528:	170e1717 	.word	0x170e1717
   2d52c:	14111717 	.word	0x14111717
        case OS_ENOMEM:         return SYS_ENOMEM; 
        case OS_EINVAL:         return SYS_EINVAL; 
        case OS_INVALID_PARM:   return SYS_EINVAL; 
        case OS_TIMEOUT:        return SYS_ETIMEOUT; 
        case OS_ENOENT:         return SYS_ENOENT; 
        case OS_EBUSY:          return SYS_EBUSY; 
   2d530:	2000      	movs	r0, #0
   2d532:	4770      	bx	lr
        case OS_EINVAL:         return SYS_EINVAL; 
   2d534:	f06f 0001 	mvn.w	r0, #1
   2d538:	4770      	bx	lr
        case OS_INVALID_PARM:   return SYS_EINVAL; 
   2d53a:	f06f 0001 	mvn.w	r0, #1
   2d53e:	4770      	bx	lr
        case OS_TIMEOUT:        return SYS_ETIMEOUT; 
   2d540:	f06f 0002 	mvn.w	r0, #2
   2d544:	4770      	bx	lr
        case OS_ENOENT:         return SYS_ENOENT; 
   2d546:	f06f 0003 	mvn.w	r0, #3
   2d54a:	4770      	bx	lr
        case OS_EBUSY:          return SYS_EBUSY; 
   2d54c:	f06f 0007 	mvn.w	r0, #7
   2d550:	4770      	bx	lr
        default:                return SYS_EUNKNOWN;
   2d552:	f06f 000c 	mvn.w	r0, #12
   2d556:	4770      	bx	lr
        case OS_ENOMEM:         return SYS_ENOMEM; 
   2d558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
   2d55c:	4770      	bx	lr

0002d55e <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   2d55e:	4603      	mov	r3, r0
   2d560:	b118      	cbz	r0, 2d56a <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   2d562:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   2d564:	2000      	movs	r0, #0
   2d566:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
   2d568:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   2d56a:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   2d56c:	4770      	bx	lr
	...

0002d570 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   2d570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   2d572:	4b17      	ldr	r3, [pc, #92]	; (2d5d0 <os_sem_release+0x60>)
   2d574:	681b      	ldr	r3, [r3, #0]
   2d576:	b33b      	cbz	r3, 2d5c8 <os_sem_release+0x58>
   2d578:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   2d57a:	b338      	cbz	r0, 2d5cc <os_sem_release+0x5c>
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   2d57c:	f7e8 fe02 	bl	16184 <os_sched_get_current_task>
   2d580:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   2d582:	f7e9 f8d3 	bl	1672c <os_arch_save_sr>
   2d586:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   2d588:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   2d58a:	b165      	cbz	r5, 2d5a6 <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   2d58c:	7b6b      	ldrb	r3, [r5, #13]
   2d58e:	f023 0302 	bic.w	r3, r3, #2
   2d592:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   2d594:	4628      	mov	r0, r5
   2d596:	f7e8 fe49 	bl	1622c <os_sched_wakeup>
         * switch may already started, in that case start next
         * context switch. In worst case scenario second task
         * switch interrupt will check that there is no need
         * for switching.
         */
        if (current->t_prio >= rdy->t_prio) {
   2d59a:	7afa      	ldrb	r2, [r7, #11]
   2d59c:	7aeb      	ldrb	r3, [r5, #11]
   2d59e:	429a      	cmp	r2, r3
   2d5a0:	d20b      	bcs.n	2d5ba <os_sem_release+0x4a>
    resched = 0;
   2d5a2:	2400      	movs	r4, #0
   2d5a4:	e003      	b.n	2d5ae <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   2d5a6:	88e3      	ldrh	r3, [r4, #6]
   2d5a8:	3301      	adds	r3, #1
   2d5aa:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   2d5ac:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   2d5ae:	4630      	mov	r0, r6
   2d5b0:	f7e9 f8c2 	bl	16738 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   2d5b4:	b91c      	cbnz	r4, 2d5be <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   2d5b6:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   2d5b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   2d5ba:	2401      	movs	r4, #1
   2d5bc:	e7f7      	b.n	2d5ae <os_sem_release+0x3e>
        os_sched(rdy);
   2d5be:	4628      	mov	r0, r5
   2d5c0:	f7e8 fec0 	bl	16344 <os_sched>
    ret = OS_OK;
   2d5c4:	2000      	movs	r0, #0
   2d5c6:	e7f7      	b.n	2d5b8 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   2d5c8:	2009      	movs	r0, #9
   2d5ca:	e7f5      	b.n	2d5b8 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   2d5cc:	2003      	movs	r0, #3
   2d5ce:	e7f3      	b.n	2d5b8 <os_sem_release+0x48>
   2d5d0:	10002508 	.word	0x10002508

0002d5d4 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   2d5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   2d5d6:	4b2b      	ldr	r3, [pc, #172]	; (2d684 <os_sem_pend+0xb0>)
   2d5d8:	681b      	ldr	r3, [r3, #0]
   2d5da:	2b00      	cmp	r3, #0
   2d5dc:	d04d      	beq.n	2d67a <os_sem_pend+0xa6>
   2d5de:	4604      	mov	r4, r0
   2d5e0:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   2d5e2:	2800      	cmp	r0, #0
   2d5e4:	d04b      	beq.n	2d67e <os_sem_pend+0xaa>
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   2d5e6:	f7e8 fdcd 	bl	16184 <os_sched_get_current_task>
   2d5ea:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   2d5ec:	f7e9 f89e 	bl	1672c <os_arch_save_sr>
   2d5f0:	4606      	mov	r6, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   2d5f2:	88e3      	ldrh	r3, [r4, #6]
   2d5f4:	b14b      	cbz	r3, 2d60a <os_sem_pend+0x36>
        sem->sem_tokens--;
   2d5f6:	3b01      	subs	r3, #1
   2d5f8:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   2d5fa:	2400      	movs	r4, #0
    sched = 0;
   2d5fc:	4627      	mov	r7, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   2d5fe:	4630      	mov	r0, r6
   2d600:	f7e9 f89a 	bl	16738 <os_arch_restore_sr>

    if (sched) {
   2d604:	bb47      	cbnz	r7, 2d658 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   2d606:	4620      	mov	r0, r4
   2d608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   2d60a:	b317      	cbz	r7, 2d652 <os_sem_pend+0x7e>
        current->t_obj = sem;
   2d60c:	61ec      	str	r4, [r5, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   2d60e:	7b6b      	ldrb	r3, [r5, #13]
   2d610:	f043 0302 	orr.w	r3, r3, #2
   2d614:	736b      	strb	r3, [r5, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   2d616:	f8d4 c000 	ldr.w	ip, [r4]
   2d61a:	f1bc 0f00 	cmp.w	ip, #0
   2d61e:	d00e      	beq.n	2d63e <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   2d620:	4663      	mov	r3, ip
        last = NULL;
   2d622:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   2d624:	b133      	cbz	r3, 2d634 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   2d626:	7ae9      	ldrb	r1, [r5, #11]
   2d628:	7ada      	ldrb	r2, [r3, #11]
   2d62a:	4291      	cmp	r1, r2
   2d62c:	d302      	bcc.n	2d634 <os_sem_pend+0x60>
                last = entry;
   2d62e:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   2d630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2d632:	e7f7      	b.n	2d624 <os_sem_pend+0x50>
        if (last) {
   2d634:	b118      	cbz	r0, 2d63e <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   2d636:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2d638:	64eb      	str	r3, [r5, #76]	; 0x4c
   2d63a:	64c5      	str	r5, [r0, #76]	; 0x4c
   2d63c:	e002      	b.n	2d644 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   2d63e:	f8c5 c04c 	str.w	ip, [r5, #76]	; 0x4c
   2d642:	6025      	str	r5, [r4, #0]
        os_sched_sleep(current, timeout);
   2d644:	4639      	mov	r1, r7
   2d646:	4628      	mov	r0, r5
   2d648:	f7e8 fda8 	bl	1619c <os_sched_sleep>
        ret = OS_OK;
   2d64c:	2400      	movs	r4, #0
        sched = 1;
   2d64e:	2701      	movs	r7, #1
   2d650:	e7d5      	b.n	2d5fe <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   2d652:	2406      	movs	r4, #6
    sched = 0;
   2d654:	2700      	movs	r7, #0
   2d656:	e7d2      	b.n	2d5fe <os_sem_pend+0x2a>
        os_sched(NULL);
   2d658:	2000      	movs	r0, #0
   2d65a:	f7e8 fe73 	bl	16344 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   2d65e:	7b6c      	ldrb	r4, [r5, #13]
   2d660:	f014 0402 	ands.w	r4, r4, #2
   2d664:	d0cf      	beq.n	2d606 <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   2d666:	f7e9 f861 	bl	1672c <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   2d66a:	7b6b      	ldrb	r3, [r5, #13]
   2d66c:	f023 0302 	bic.w	r3, r3, #2
   2d670:	736b      	strb	r3, [r5, #13]
            OS_EXIT_CRITICAL(sr);
   2d672:	f7e9 f861 	bl	16738 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   2d676:	2406      	movs	r4, #6
   2d678:	e7c5      	b.n	2d606 <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   2d67a:	2409      	movs	r4, #9
   2d67c:	e7c3      	b.n	2d606 <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   2d67e:	2403      	movs	r4, #3
   2d680:	e7c1      	b.n	2d606 <os_sem_pend+0x32>
   2d682:	bf00      	nop
   2d684:	10002508 	.word	0x10002508

0002d688 <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
   2d688:	2001      	movs	r0, #1
   2d68a:	4770      	bx	lr

0002d68c <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
   2d68c:	4770      	bx	lr

0002d68e <__malloc_from_block>:
static void *__malloc_from_block(struct free_arena_header *fp, size_t size)
{
    size_t fsize;
    struct free_arena_header *nfp, *na, *fpn, *fpp;

    fsize = fp->a.size;
   2d68e:	6842      	ldr	r2, [r0, #4]

    /* We need the 2* to account for the larger requirements of a
       free block */
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
   2d690:	f101 0320 	add.w	r3, r1, #32
   2d694:	4293      	cmp	r3, r2
   2d696:	d816      	bhi.n	2d6c6 <__malloc_from_block+0x38>
{
   2d698:	b430      	push	{r4, r5}
        /* Bigger block than required -- split block */
        nfp = (struct free_arena_header *)((char *)fp + size);
   2d69a:	1843      	adds	r3, r0, r1
        na = fp->a.next;
   2d69c:	6884      	ldr	r4, [r0, #8]

        nfp->a.type = ARENA_TYPE_FREE;
   2d69e:	2501      	movs	r5, #1
   2d6a0:	5045      	str	r5, [r0, r1]
        nfp->a.size = fsize - size;
   2d6a2:	1a52      	subs	r2, r2, r1
   2d6a4:	605a      	str	r2, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
   2d6a6:	2200      	movs	r2, #0
   2d6a8:	6002      	str	r2, [r0, #0]
        fp->a.size = size;
   2d6aa:	6041      	str	r1, [r0, #4]

        /* Insert into all-block chain */
        nfp->a.prev = fp;
   2d6ac:	60d8      	str	r0, [r3, #12]
        nfp->a.next = na;
   2d6ae:	609c      	str	r4, [r3, #8]
        na->a.prev = nfp;
   2d6b0:	60e3      	str	r3, [r4, #12]
        fp->a.next = nfp;
   2d6b2:	6083      	str	r3, [r0, #8]

        /* Replace current block on free chain */
        nfp->next_free = fpn = fp->next_free;
   2d6b4:	6901      	ldr	r1, [r0, #16]
   2d6b6:	6119      	str	r1, [r3, #16]
        nfp->prev_free = fpp = fp->prev_free;
   2d6b8:	6942      	ldr	r2, [r0, #20]
   2d6ba:	615a      	str	r2, [r3, #20]
        fpn->prev_free = nfp;
   2d6bc:	614b      	str	r3, [r1, #20]
        fpp->next_free = nfp;
   2d6be:	6113      	str	r3, [r2, #16]
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
        remove_from_free_chain(fp);
    }

    return (void *)(&fp->a + 1);
}
   2d6c0:	3010      	adds	r0, #16
   2d6c2:	bc30      	pop	{r4, r5}
   2d6c4:	4770      	bx	lr
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
   2d6c6:	2300      	movs	r3, #0
   2d6c8:	6003      	str	r3, [r0, #0]
    ap = ah->prev_free;
   2d6ca:	6942      	ldr	r2, [r0, #20]
    an = ah->next_free;
   2d6cc:	6903      	ldr	r3, [r0, #16]
    ap->next_free = an;
   2d6ce:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   2d6d0:	615a      	str	r2, [r3, #20]
}
   2d6d2:	3010      	adds	r0, #16
   2d6d4:	4770      	bx	lr
	...

0002d6d8 <__free_block>:

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
   2d6d8:	b410      	push	{r4}
   2d6da:	4603      	mov	r3, r0
    struct free_arena_header *pah, *nah;

    pah = ah->a.prev;
   2d6dc:	68c0      	ldr	r0, [r0, #12]
    nah = ah->a.next;
   2d6de:	6899      	ldr	r1, [r3, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
   2d6e0:	6802      	ldr	r2, [r0, #0]
   2d6e2:	2a01      	cmp	r2, #1
   2d6e4:	d00e      	beq.n	2d704 <__free_block+0x2c>

        ah = pah;
        pah = ah->a.prev;
    } else {
        /* Need to add this block to the free chain */
        ah->a.type = ARENA_TYPE_FREE;
   2d6e6:	2201      	movs	r2, #1
   2d6e8:	601a      	str	r2, [r3, #0]

        ah->next_free = __malloc_head.next_free;
   2d6ea:	4a13      	ldr	r2, [pc, #76]	; (2d738 <__free_block+0x60>)
   2d6ec:	6910      	ldr	r0, [r2, #16]
   2d6ee:	6118      	str	r0, [r3, #16]
        ah->prev_free = &__malloc_head;
   2d6f0:	615a      	str	r2, [r3, #20]
        __malloc_head.next_free = ah;
   2d6f2:	6113      	str	r3, [r2, #16]
        ah->next_free->prev_free = ah;
   2d6f4:	691a      	ldr	r2, [r3, #16]
   2d6f6:	6153      	str	r3, [r2, #20]
   2d6f8:	4618      	mov	r0, r3
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
   2d6fa:	680b      	ldr	r3, [r1, #0]
   2d6fc:	2b01      	cmp	r3, #1
   2d6fe:	d00b      	beq.n	2d718 <__free_block+0x40>
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
   2d700:	bc10      	pop	{r4}
   2d702:	4770      	bx	lr
        (char *)pah + pah->a.size == (char *)ah) {
   2d704:	6842      	ldr	r2, [r0, #4]
   2d706:	1884      	adds	r4, r0, r2
    if (pah->a.type == ARENA_TYPE_FREE &&
   2d708:	429c      	cmp	r4, r3
   2d70a:	d1ec      	bne.n	2d6e6 <__free_block+0xe>
        pah->a.size += ah->a.size;
   2d70c:	685b      	ldr	r3, [r3, #4]
   2d70e:	441a      	add	r2, r3
   2d710:	6042      	str	r2, [r0, #4]
        pah->a.next = nah;
   2d712:	6081      	str	r1, [r0, #8]
        nah->a.prev = pah;
   2d714:	60c8      	str	r0, [r1, #12]
        pah = ah->a.prev;
   2d716:	e7f0      	b.n	2d6fa <__free_block+0x22>
        (char *)ah + ah->a.size == (char *)nah) {
   2d718:	6843      	ldr	r3, [r0, #4]
   2d71a:	18c2      	adds	r2, r0, r3
    if (nah->a.type == ARENA_TYPE_FREE &&
   2d71c:	428a      	cmp	r2, r1
   2d71e:	d1ef      	bne.n	2d700 <__free_block+0x28>
        ah->a.size += nah->a.size;
   2d720:	684a      	ldr	r2, [r1, #4]
   2d722:	4413      	add	r3, r2
   2d724:	6043      	str	r3, [r0, #4]
    ap = ah->prev_free;
   2d726:	694a      	ldr	r2, [r1, #20]
    an = ah->next_free;
   2d728:	690b      	ldr	r3, [r1, #16]
    ap->next_free = an;
   2d72a:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   2d72c:	615a      	str	r2, [r3, #20]
    ap = ah->a.prev;
   2d72e:	68ca      	ldr	r2, [r1, #12]
    an = ah->a.next;
   2d730:	688b      	ldr	r3, [r1, #8]
    ap->a.next = an;
   2d732:	6093      	str	r3, [r2, #8]
    an->a.prev = ap;
   2d734:	60da      	str	r2, [r3, #12]
    return ah;
   2d736:	e7e3      	b.n	2d700 <__free_block+0x28>
   2d738:	10001ab0 	.word	0x10001ab0

0002d73c <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
   2d73c:	2917      	cmp	r1, #23
   2d73e:	d91e      	bls.n	2d77e <add_malloc_block+0x42>
{
   2d740:	b510      	push	{r4, lr}
   2d742:	4604      	mov	r4, r0
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
   2d744:	2301      	movs	r3, #1
   2d746:	6003      	str	r3, [r0, #0]
    fp->a.size = size;
   2d748:	6041      	str	r1, [r0, #4]

    if (!malloc_lock())
   2d74a:	4b0d      	ldr	r3, [pc, #52]	; (2d780 <add_malloc_block+0x44>)
   2d74c:	681b      	ldr	r3, [r3, #0]
   2d74e:	4798      	blx	r3
   2d750:	b1a0      	cbz	r0, 2d77c <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
   2d752:	4b0c      	ldr	r3, [pc, #48]	; (2d784 <add_malloc_block+0x48>)
   2d754:	68db      	ldr	r3, [r3, #12]
   2d756:	681a      	ldr	r2, [r3, #0]
   2d758:	2a02      	cmp	r2, #2
   2d75a:	d003      	beq.n	2d764 <add_malloc_block+0x28>
         pah = pah->a.prev) {
        if (pah < fp)
   2d75c:	42a3      	cmp	r3, r4
   2d75e:	d301      	bcc.n	2d764 <add_malloc_block+0x28>
         pah = pah->a.prev) {
   2d760:	68db      	ldr	r3, [r3, #12]
   2d762:	e7f8      	b.n	2d756 <add_malloc_block+0x1a>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
   2d764:	689a      	ldr	r2, [r3, #8]
   2d766:	60a2      	str	r2, [r4, #8]
    fp->a.prev = pah;
   2d768:	60e3      	str	r3, [r4, #12]
    pah->a.next = fp;
   2d76a:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
   2d76c:	68a3      	ldr	r3, [r4, #8]
   2d76e:	60dc      	str	r4, [r3, #12]

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
   2d770:	4620      	mov	r0, r4
   2d772:	f7ff ffb1 	bl	2d6d8 <__free_block>

    malloc_unlock();
   2d776:	4b04      	ldr	r3, [pc, #16]	; (2d788 <add_malloc_block+0x4c>)
   2d778:	681b      	ldr	r3, [r3, #0]
   2d77a:	4798      	blx	r3
}
   2d77c:	bd10      	pop	{r4, pc}
   2d77e:	4770      	bx	lr
   2d780:	10001ac8 	.word	0x10001ac8
   2d784:	10001ab0 	.word	0x10001ab0
   2d788:	10001acc 	.word	0x10001acc

0002d78c <malloc>:
{
   2d78c:	b538      	push	{r3, r4, r5, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   2d78e:	1e43      	subs	r3, r0, #1
   2d790:	f113 0f12 	cmn.w	r3, #18
   2d794:	d825      	bhi.n	2d7e2 <malloc+0x56>
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   2d796:	301f      	adds	r0, #31
   2d798:	f020 040f 	bic.w	r4, r0, #15
    if (!malloc_lock())
   2d79c:	4b13      	ldr	r3, [pc, #76]	; (2d7ec <malloc+0x60>)
   2d79e:	681b      	ldr	r3, [r3, #0]
   2d7a0:	4798      	blx	r3
   2d7a2:	b300      	cbz	r0, 2d7e6 <malloc+0x5a>
    void *result = NULL;
   2d7a4:	2500      	movs	r5, #0
   2d7a6:	e00d      	b.n	2d7c4 <malloc+0x38>
            result = __malloc_from_block(fp, size);
   2d7a8:	4621      	mov	r1, r4
   2d7aa:	f7ff ff70 	bl	2d68e <__malloc_from_block>
   2d7ae:	4605      	mov	r5, r0
    if (result == NULL) {
   2d7b0:	b995      	cbnz	r5, 2d7d8 <malloc+0x4c>
        more_mem = _sbrk(size);
   2d7b2:	4620      	mov	r0, r4
   2d7b4:	f7e6 ff38 	bl	14628 <_sbrk>
        if (more_mem != (void *)-1) {
   2d7b8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2d7bc:	d00c      	beq.n	2d7d8 <malloc+0x4c>
            add_malloc_block(more_mem, size);
   2d7be:	4621      	mov	r1, r4
   2d7c0:	f7ff ffbc 	bl	2d73c <add_malloc_block>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
   2d7c4:	4b0a      	ldr	r3, [pc, #40]	; (2d7f0 <malloc+0x64>)
   2d7c6:	6918      	ldr	r0, [r3, #16]
   2d7c8:	6803      	ldr	r3, [r0, #0]
   2d7ca:	2b02      	cmp	r3, #2
   2d7cc:	d0f0      	beq.n	2d7b0 <malloc+0x24>
        if (fp->a.size >= size) {
   2d7ce:	6843      	ldr	r3, [r0, #4]
   2d7d0:	42a3      	cmp	r3, r4
   2d7d2:	d2e9      	bcs.n	2d7a8 <malloc+0x1c>
         fp = fp->next_free) {
   2d7d4:	6900      	ldr	r0, [r0, #16]
   2d7d6:	e7f7      	b.n	2d7c8 <malloc+0x3c>
    malloc_unlock();
   2d7d8:	4b06      	ldr	r3, [pc, #24]	; (2d7f4 <malloc+0x68>)
   2d7da:	681b      	ldr	r3, [r3, #0]
   2d7dc:	4798      	blx	r3
}
   2d7de:	4628      	mov	r0, r5
   2d7e0:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
   2d7e2:	2500      	movs	r5, #0
   2d7e4:	e7fb      	b.n	2d7de <malloc+0x52>
        return NULL;
   2d7e6:	2500      	movs	r5, #0
   2d7e8:	e7f9      	b.n	2d7de <malloc+0x52>
   2d7ea:	bf00      	nop
   2d7ec:	10001ac8 	.word	0x10001ac8
   2d7f0:	10001ab0 	.word	0x10001ab0
   2d7f4:	10001acc 	.word	0x10001acc

0002d7f8 <free>:

void free(void *ptr)
{
    struct free_arena_header *ah;

    if (!ptr)
   2d7f8:	b170      	cbz	r0, 2d818 <free+0x20>
{
   2d7fa:	b510      	push	{r4, lr}
        return;

    ah = (struct free_arena_header *)
   2d7fc:	f1a0 0410 	sub.w	r4, r0, #16

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
   2d800:	4b06      	ldr	r3, [pc, #24]	; (2d81c <free+0x24>)
   2d802:	681b      	ldr	r3, [r3, #0]
   2d804:	4798      	blx	r3
   2d806:	b900      	cbnz	r0, 2d80a <free+0x12>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
    malloc_unlock();
}
   2d808:	bd10      	pop	{r4, pc}
    ah = __free_block(ah);
   2d80a:	4620      	mov	r0, r4
   2d80c:	f7ff ff64 	bl	2d6d8 <__free_block>
    malloc_unlock();
   2d810:	4b03      	ldr	r3, [pc, #12]	; (2d820 <free+0x28>)
   2d812:	681b      	ldr	r3, [r3, #0]
   2d814:	4798      	blx	r3
   2d816:	e7f7      	b.n	2d808 <free+0x10>
   2d818:	4770      	bx	lr
   2d81a:	bf00      	nop
   2d81c:	10001ac8 	.word	0x10001ac8
   2d820:	10001acc 	.word	0x10001acc

0002d824 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   2d824:	2000      	movs	r0, #0
   2d826:	4770      	bx	lr

0002d828 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   2d828:	b510      	push	{r4, lr}
   2d82a:	4608      	mov	r0, r1
   2d82c:	4614      	mov	r4, r2
    console_write(bp, n);
   2d82e:	4611      	mov	r1, r2
   2d830:	f7ea fdd0 	bl	183d4 <console_write>
    return n;
}
   2d834:	4620      	mov	r0, r4
   2d836:	bd10      	pop	{r4, pc}

0002d838 <realloc>:
#include "malloc.h"

/* FIXME: This is cheesy, it should be fixed later */

void *realloc(void *ptr, size_t size)
{
   2d838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct free_arena_header *ah;
	void *newptr;
	size_t oldsize;

	if (!ptr)
   2d83a:	b300      	cbz	r0, 2d87e <realloc+0x46>
   2d83c:	4606      	mov	r6, r0
		return malloc(size);

	if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   2d83e:	1e4b      	subs	r3, r1, #1
   2d840:	f113 0f12 	cmn.w	r3, #18
   2d844:	d820      	bhi.n	2d888 <realloc+0x50>
		free(ptr);
		return NULL;
	}

	/* Add the obligatory arena header, and round up */
	size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   2d846:	311f      	adds	r1, #31
   2d848:	f021 040f 	bic.w	r4, r1, #15

	ah = (struct free_arena_header *)
	    ((struct arena_header *)ptr - 1);

	if (ah->a.size >= size && size >= (ah->a.size >> 2)) {
   2d84c:	f850 5c0c 	ldr.w	r5, [r0, #-12]
   2d850:	42a5      	cmp	r5, r4
   2d852:	d302      	bcc.n	2d85a <realloc+0x22>
   2d854:	ebb4 0f95 	cmp.w	r4, r5, lsr #2
   2d858:	d21c      	bcs.n	2d894 <realloc+0x5c>
	} else {
		/* Make me a new block.  This is kind of bogus; we should
		   be checking the following block to see if we can do an
		   in-place adjustment... fix that later. */

		oldsize = ah->a.size - sizeof(struct arena_header);
   2d85a:	3d10      	subs	r5, #16

		newptr = malloc(size);
   2d85c:	4620      	mov	r0, r4
   2d85e:	f7ff ff95 	bl	2d78c <malloc>
                if (newptr) {
   2d862:	4607      	mov	r7, r0
   2d864:	b1a0      	cbz	r0, 2d890 <realloc+0x58>
                    memcpy(newptr, ptr, (size < oldsize) ? size : oldsize);
   2d866:	4622      	mov	r2, r4
   2d868:	42ac      	cmp	r4, r5
   2d86a:	bf28      	it	cs
   2d86c:	462a      	movcs	r2, r5
   2d86e:	4631      	mov	r1, r6
   2d870:	f7e9 f930 	bl	16ad4 <memcpy>
                    free(ptr);
   2d874:	4630      	mov	r0, r6
   2d876:	f7ff ffbf 	bl	2d7f8 <free>
                } else {
                    newptr = ptr;
                }
		return newptr;
	}
}
   2d87a:	4638      	mov	r0, r7
   2d87c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return malloc(size);
   2d87e:	4608      	mov	r0, r1
   2d880:	f7ff ff84 	bl	2d78c <malloc>
   2d884:	4607      	mov	r7, r0
   2d886:	e7f8      	b.n	2d87a <realloc+0x42>
		free(ptr);
   2d888:	f7ff ffb6 	bl	2d7f8 <free>
		return NULL;
   2d88c:	2700      	movs	r7, #0
   2d88e:	e7f4      	b.n	2d87a <realloc+0x42>
                    newptr = ptr;
   2d890:	4637      	mov	r7, r6
		return newptr;
   2d892:	e7f2      	b.n	2d87a <realloc+0x42>
		return ptr;
   2d894:	4607      	mov	r7, r0
   2d896:	e7f0      	b.n	2d87a <realloc+0x42>

0002d898 <sprintf>:

#include <stdio.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   2d898:	b40e      	push	{r1, r2, r3}
   2d89a:	b500      	push	{lr}
   2d89c:	b082      	sub	sp, #8
   2d89e:	ab03      	add	r3, sp, #12
   2d8a0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   2d8a4:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   2d8a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2d8aa:	f000 fb89 	bl	2dfc0 <vsnprintf>
	va_end(ap);

	return rv;
}
   2d8ae:	b002      	add	sp, #8
   2d8b0:	f85d eb04 	ldr.w	lr, [sp], #4
   2d8b4:	b003      	add	sp, #12
   2d8b6:	4770      	bx	lr

0002d8b8 <strcpy>:
 */

#include <string.h>

char *strcpy(char *dst, const char *src)
{
   2d8b8:	b410      	push	{r4}
	char *q = dst;
   2d8ba:	4602      	mov	r2, r0
	const char *p = src;
	char ch;

	do {
		*q++ = ch = *p++;
   2d8bc:	780c      	ldrb	r4, [r1, #0]
   2d8be:	3101      	adds	r1, #1
   2d8c0:	7014      	strb	r4, [r2, #0]
   2d8c2:	3201      	adds	r2, #1
	} while (ch);
   2d8c4:	2c00      	cmp	r4, #0
   2d8c6:	d1f9      	bne.n	2d8bc <strcpy+0x4>

	return dst;
}
   2d8c8:	bc10      	pop	{r4}
   2d8ca:	4770      	bx	lr

0002d8cc <strncpy>:
 */

#include <string.h>

char *strncpy(char *dst, const char *src, size_t n)
{
   2d8cc:	b510      	push	{r4, lr}
   2d8ce:	4604      	mov	r4, r0
	char *q = dst;
	const char *p = src;
	char ch;

	while (n) {
   2d8d0:	b132      	cbz	r2, 2d8e0 <strncpy+0x14>
		n--;
   2d8d2:	3a01      	subs	r2, #1
		*q++ = ch = *p++;
   2d8d4:	f811 3b01 	ldrb.w	r3, [r1], #1
   2d8d8:	f800 3b01 	strb.w	r3, [r0], #1
		if (!ch)
   2d8dc:	2b00      	cmp	r3, #0
   2d8de:	d1f7      	bne.n	2d8d0 <strncpy+0x4>
			break;
	}

	/* The specs say strncpy() fills the entire buffer with NUL.  Sigh. */
	memset(q, 0, n);
   2d8e0:	2100      	movs	r1, #0
   2d8e2:	f7e9 f91c 	bl	16b1e <memset>

	return dst;
}
   2d8e6:	4620      	mov	r0, r4
   2d8e8:	bd10      	pop	{r4, pc}

0002d8ea <strsep>:
 */

#include <string.h>

char *strsep(char **stringp, const char *delim)
{
   2d8ea:	b538      	push	{r3, r4, r5, lr}
	char *s = *stringp;
   2d8ec:	6805      	ldr	r5, [r0, #0]
	char *e;

	if (!s)
   2d8ee:	b14d      	cbz	r5, 2d904 <strsep+0x1a>
   2d8f0:	4604      	mov	r4, r0
		return NULL;

	e = strpbrk(s, delim);
   2d8f2:	4628      	mov	r0, r5
   2d8f4:	f000 fc4c 	bl	2e190 <strpbrk>
	if (e)
   2d8f8:	4603      	mov	r3, r0
   2d8fa:	b110      	cbz	r0, 2d902 <strsep+0x18>
		*e++ = '\0';
   2d8fc:	2200      	movs	r2, #0
   2d8fe:	f803 2b01 	strb.w	r2, [r3], #1

	*stringp = e;
   2d902:	6023      	str	r3, [r4, #0]
	return s;
}
   2d904:	4628      	mov	r0, r5
   2d906:	bd38      	pop	{r3, r4, r5, pc}

0002d908 <strtok_r>:
#include <string.h>

char *strtok_r(char *s, const char *delim, char **holder)
{
   2d908:	b538      	push	{r3, r4, r5, lr}
   2d90a:	460d      	mov	r5, r1
   2d90c:	4614      	mov	r4, r2
	if (s)
   2d90e:	b100      	cbz	r0, 2d912 <strtok_r+0xa>
		*holder = s;
   2d910:	6020      	str	r0, [r4, #0]

	do {
		s = strsep(holder, delim);
   2d912:	4629      	mov	r1, r5
   2d914:	4620      	mov	r0, r4
   2d916:	f7ff ffe8 	bl	2d8ea <strsep>
	} while (s && !*s);
   2d91a:	4603      	mov	r3, r0
   2d91c:	b110      	cbz	r0, 2d924 <strtok_r+0x1c>
   2d91e:	7800      	ldrb	r0, [r0, #0]
   2d920:	2800      	cmp	r0, #0
   2d922:	d0f6      	beq.n	2d912 <strtok_r+0xa>

	return s;
}
   2d924:	4618      	mov	r0, r3
   2d926:	bd38      	pop	{r3, r4, r5, pc}

0002d928 <strtoll>:
#include <stddef.h>
#include <stdlib.h>
#include <strntoimax.h>

TYPE NAME(const char *nptr, char **endptr, int base)
{
   2d928:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   2d92a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d92e:	f000 fba1 	bl	2e074 <strntoumax>
}
   2d932:	bd08      	pop	{r3, pc}

0002d934 <strtoull>:
{
   2d934:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   2d936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d93a:	f000 fb9b 	bl	2e074 <strntoumax>
}
   2d93e:	bd08      	pop	{r3, pc}

0002d940 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   2d940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d944:	b087      	sub	sp, #28
   2d946:	4604      	mov	r4, r0
   2d948:	4692      	mov	sl, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   2d94a:	6853      	ldr	r3, [r2, #4]
   2d94c:	9304      	str	r3, [sp, #16]

    if (p->hh == 1) {
   2d94e:	7893      	ldrb	r3, [r2, #2]
   2d950:	f003 0330 	and.w	r3, r3, #48	; 0x30
   2d954:	2b10      	cmp	r3, #16
   2d956:	d018      	beq.n	2d98a <ui2a+0x4a>
   2d958:	460d      	mov	r5, r1
        num = (unsigned short int)num;
    } else if (p->hh == 2) {
   2d95a:	2b20      	cmp	r3, #32
   2d95c:	d019      	beq.n	2d992 <ui2a+0x52>
{
   2d95e:	2601      	movs	r6, #1
   2d960:	2700      	movs	r7, #0
        num = (unsigned char)num;
    }

    while (num / d >= p->base)
   2d962:	4632      	mov	r2, r6
   2d964:	463b      	mov	r3, r7
   2d966:	4620      	mov	r0, r4
   2d968:	4629      	mov	r1, r5
   2d96a:	f7e6 fc7f 	bl	1426c <__aeabi_uldivmod>
   2d96e:	f89a 8003 	ldrb.w	r8, [sl, #3]
   2d972:	f04f 0900 	mov.w	r9, #0
   2d976:	4549      	cmp	r1, r9
   2d978:	bf08      	it	eq
   2d97a:	4540      	cmpeq	r0, r8
   2d97c:	d30e      	bcc.n	2d99c <ui2a+0x5c>
        d *= p->base;
   2d97e:	fb08 f307 	mul.w	r3, r8, r7
   2d982:	fba6 6708 	umull	r6, r7, r6, r8
   2d986:	441f      	add	r7, r3
   2d988:	e7eb      	b.n	2d962 <ui2a+0x22>
        num = (unsigned short int)num;
   2d98a:	b283      	uxth	r3, r0
   2d98c:	461c      	mov	r4, r3
   2d98e:	2500      	movs	r5, #0
   2d990:	e7e5      	b.n	2d95e <ui2a+0x1e>
        num = (unsigned char)num;
   2d992:	f000 03ff 	and.w	r3, r0, #255	; 0xff
   2d996:	461c      	mov	r4, r3
   2d998:	2500      	movs	r5, #0
   2d99a:	e7e0      	b.n	2d95e <ui2a+0x1e>
    int n = 0;
   2d99c:	f04f 0b00 	mov.w	fp, #0
   2d9a0:	f8cd a014 	str.w	sl, [sp, #20]
   2d9a4:	e00c      	b.n	2d9c0 <ui2a+0x80>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   2d9a6:	2230      	movs	r2, #48	; 0x30
   2d9a8:	9b04      	ldr	r3, [sp, #16]
   2d9aa:	9c00      	ldr	r4, [sp, #0]
   2d9ac:	4414      	add	r4, r2
   2d9ae:	f803 4b01 	strb.w	r4, [r3], #1
            ++n;
   2d9b2:	f10b 0b01 	add.w	fp, fp, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   2d9b6:	9304      	str	r3, [sp, #16]
   2d9b8:	4606      	mov	r6, r0
   2d9ba:	460f      	mov	r7, r1
   2d9bc:	9c02      	ldr	r4, [sp, #8]
   2d9be:	9d03      	ldr	r5, [sp, #12]
    while (d != 0) {
   2d9c0:	ea56 0307 	orrs.w	r3, r6, r7
   2d9c4:	d034      	beq.n	2da30 <ui2a+0xf0>
        unsigned long long  dgt = num / d;
   2d9c6:	4632      	mov	r2, r6
   2d9c8:	463b      	mov	r3, r7
   2d9ca:	4620      	mov	r0, r4
   2d9cc:	4629      	mov	r1, r5
   2d9ce:	f7e6 fc4d 	bl	1426c <__aeabi_uldivmod>
   2d9d2:	9000      	str	r0, [sp, #0]
   2d9d4:	9101      	str	r1, [sp, #4]
        num %= d;
   2d9d6:	4632      	mov	r2, r6
   2d9d8:	463b      	mov	r3, r7
   2d9da:	4620      	mov	r0, r4
   2d9dc:	4629      	mov	r1, r5
   2d9de:	f7e6 fc45 	bl	1426c <__aeabi_uldivmod>
   2d9e2:	9202      	str	r2, [sp, #8]
   2d9e4:	9303      	str	r3, [sp, #12]
        d /= p->base;
   2d9e6:	9b05      	ldr	r3, [sp, #20]
   2d9e8:	f893 8003 	ldrb.w	r8, [r3, #3]
   2d9ec:	f04f 0900 	mov.w	r9, #0
   2d9f0:	4642      	mov	r2, r8
   2d9f2:	464b      	mov	r3, r9
   2d9f4:	4630      	mov	r0, r6
   2d9f6:	4639      	mov	r1, r7
   2d9f8:	f7e6 fc38 	bl	1426c <__aeabi_uldivmod>
        if (n || dgt > 0 || d == 0) {
   2d9fc:	f1bb 0f00 	cmp.w	fp, #0
   2da00:	d107      	bne.n	2da12 <ui2a+0xd2>
   2da02:	42bd      	cmp	r5, r7
   2da04:	bf08      	it	eq
   2da06:	42b4      	cmpeq	r4, r6
   2da08:	d203      	bcs.n	2da12 <ui2a+0xd2>
   2da0a:	454f      	cmp	r7, r9
   2da0c:	bf08      	it	eq
   2da0e:	4546      	cmpeq	r6, r8
   2da10:	d2d2      	bcs.n	2d9b8 <ui2a+0x78>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   2da12:	e9dd 3400 	ldrd	r3, r4, [sp]
   2da16:	2c00      	cmp	r4, #0
   2da18:	bf08      	it	eq
   2da1a:	2b0a      	cmpeq	r3, #10
   2da1c:	d3c3      	bcc.n	2d9a6 <ui2a+0x66>
   2da1e:	9b05      	ldr	r3, [sp, #20]
   2da20:	789b      	ldrb	r3, [r3, #2]
   2da22:	f013 0f04 	tst.w	r3, #4
   2da26:	d001      	beq.n	2da2c <ui2a+0xec>
   2da28:	2237      	movs	r2, #55	; 0x37
   2da2a:	e7bd      	b.n	2d9a8 <ui2a+0x68>
   2da2c:	2257      	movs	r2, #87	; 0x57
   2da2e:	e7bb      	b.n	2d9a8 <ui2a+0x68>
        }
    }
    *bf = 0;
   2da30:	2300      	movs	r3, #0
   2da32:	9a04      	ldr	r2, [sp, #16]
   2da34:	7013      	strb	r3, [r2, #0]
}
   2da36:	b007      	add	sp, #28
   2da38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002da3c <i2a>:

static void i2a(long long int num, struct param *p)
{
   2da3c:	b510      	push	{r4, lr}
   2da3e:	4604      	mov	r4, r0
   2da40:	460b      	mov	r3, r1
   2da42:	4620      	mov	r0, r4
   2da44:	4619      	mov	r1, r3
    if (num < 0) {
   2da46:	2c00      	cmp	r4, #0
   2da48:	f173 0300 	sbcs.w	r3, r3, #0
   2da4c:	db02      	blt.n	2da54 <i2a+0x18>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   2da4e:	f7ff ff77 	bl	2d940 <ui2a>
}
   2da52:	bd10      	pop	{r4, pc}
        num = -num;
   2da54:	4260      	negs	r0, r4
   2da56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   2da5a:	7893      	ldrb	r3, [r2, #2]
   2da5c:	f043 0301 	orr.w	r3, r3, #1
   2da60:	7093      	strb	r3, [r2, #2]
   2da62:	e7f4      	b.n	2da4e <i2a+0x12>

0002da64 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   2da64:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2da68:	b2db      	uxtb	r3, r3
   2da6a:	2b09      	cmp	r3, #9
   2da6c:	d90b      	bls.n	2da86 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   2da6e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   2da72:	b2db      	uxtb	r3, r3
   2da74:	2b05      	cmp	r3, #5
   2da76:	d908      	bls.n	2da8a <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   2da78:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2da7c:	b2db      	uxtb	r3, r3
   2da7e:	2b05      	cmp	r3, #5
   2da80:	d805      	bhi.n	2da8e <a2d+0x2a>
        return ch - 'A' + 10;
   2da82:	3837      	subs	r0, #55	; 0x37
   2da84:	4770      	bx	lr
        return ch - '0';
   2da86:	3830      	subs	r0, #48	; 0x30
   2da88:	4770      	bx	lr
        return ch - 'a' + 10;
   2da8a:	3857      	subs	r0, #87	; 0x57
   2da8c:	4770      	bx	lr
    else
        return -1;
   2da8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2da92:	4770      	bx	lr

0002da94 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   2da94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2da98:	4605      	mov	r5, r0
   2da9a:	4688      	mov	r8, r1
   2da9c:	4616      	mov	r6, r2
   2da9e:	4699      	mov	r9, r3
    const char *p = *src;
   2daa0:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   2daa2:	2700      	movs	r7, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   2daa4:	4628      	mov	r0, r5
   2daa6:	f7ff ffdd 	bl	2da64 <a2d>
   2daaa:	2800      	cmp	r0, #0
   2daac:	db06      	blt.n	2dabc <a2i+0x28>
        if (digit > base)
   2daae:	42b0      	cmp	r0, r6
   2dab0:	dc04      	bgt.n	2dabc <a2i+0x28>
            break;
        num = num * base + digit;
   2dab2:	fb06 0707 	mla	r7, r6, r7, r0
        ch = *p++;
   2dab6:	f814 5b01 	ldrb.w	r5, [r4], #1
   2daba:	e7f3      	b.n	2daa4 <a2i+0x10>
    }
    *src = p;
   2dabc:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   2dac0:	f889 7000 	strb.w	r7, [r9]
    return ch;
}
   2dac4:	4628      	mov	r0, r5
   2dac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002daca <putf>:

static int putf(FILE *putp, char c)
{
   2daca:	b500      	push	{lr}
   2dacc:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   2dace:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   2dad2:	6803      	ldr	r3, [r0, #0]
   2dad4:	681b      	ldr	r3, [r3, #0]
   2dad6:	b143      	cbz	r3, 2daea <putf+0x20>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   2dad8:	2201      	movs	r2, #1
   2dada:	f10d 0107 	add.w	r1, sp, #7
   2dade:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   2dae0:	2801      	cmp	r0, #1
   2dae2:	d102      	bne.n	2daea <putf+0x20>
    if (fputc(c, putp) == EOF)
        return 0;
    else
        return 1;
}
   2dae4:	b003      	add	sp, #12
   2dae6:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   2daea:	2000      	movs	r0, #0
   2daec:	e7fa      	b.n	2dae4 <putf+0x1a>
	...

0002daf0 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   2daf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2daf4:	4607      	mov	r7, r0
   2daf6:	4688      	mov	r8, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   2daf8:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   2dafa:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   2dafc:	f813 2b01 	ldrb.w	r2, [r3], #1
   2db00:	b11a      	cbz	r2, 2db0a <putchw+0x1a>
   2db02:	2c00      	cmp	r4, #0
   2db04:	dd01      	ble.n	2db0a <putchw+0x1a>
        n--;
   2db06:	3c01      	subs	r4, #1
   2db08:	e7f8      	b.n	2dafc <putchw+0xc>
    if (p->sign)
   2db0a:	f898 3002 	ldrb.w	r3, [r8, #2]
   2db0e:	f013 0f01 	tst.w	r3, #1
   2db12:	d000      	beq.n	2db16 <putchw+0x26>
        n--;
   2db14:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   2db16:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   2db1a:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   2db1e:	b29b      	uxth	r3, r3
   2db20:	f241 0202 	movw	r2, #4098	; 0x1002
   2db24:	4293      	cmp	r3, r2
   2db26:	d028      	beq.n	2db7a <putchw+0x8a>
        n -= 2;
    else if (p->alt && p->base == 8)
   2db28:	f640 0202 	movw	r2, #2050	; 0x802
   2db2c:	4293      	cmp	r3, r2
   2db2e:	d026      	beq.n	2db7e <putchw+0x8e>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   2db30:	f8d8 3000 	ldr.w	r3, [r8]
   2db34:	4e36      	ldr	r6, [pc, #216]	; (2dc10 <putchw+0x120>)
   2db36:	401e      	ands	r6, r3
   2db38:	b34e      	cbz	r6, 2db8e <putchw+0x9e>
    unsigned written = 0;
   2db3a:	2600      	movs	r6, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   2db3c:	f898 3002 	ldrb.w	r3, [r8, #2]
   2db40:	f013 0f01 	tst.w	r3, #1
   2db44:	d128      	bne.n	2db98 <putchw+0xa8>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   2db46:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   2db4a:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   2db4e:	b29b      	uxth	r3, r3
   2db50:	f241 0202 	movw	r2, #4098	; 0x1002
   2db54:	4293      	cmp	r3, r2
   2db56:	d025      	beq.n	2dba4 <putchw+0xb4>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   2db58:	f640 0202 	movw	r2, #2050	; 0x802
   2db5c:	4293      	cmp	r3, r2
   2db5e:	d033      	beq.n	2dbc8 <putchw+0xd8>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   2db60:	f898 3001 	ldrb.w	r3, [r8, #1]
   2db64:	bbe3      	cbnz	r3, 2dbe0 <putchw+0xf0>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   2db66:	f8d8 5004 	ldr.w	r5, [r8, #4]
    while ((ch = *bf++))
   2db6a:	f815 1b01 	ldrb.w	r1, [r5], #1
   2db6e:	b3e1      	cbz	r1, 2dbea <putchw+0xfa>
        written += putf(putp, ch);
   2db70:	4638      	mov	r0, r7
   2db72:	f7ff ffaa 	bl	2daca <putf>
   2db76:	4406      	add	r6, r0
   2db78:	e7f7      	b.n	2db6a <putchw+0x7a>
        n -= 2;
   2db7a:	3c02      	subs	r4, #2
   2db7c:	e7d8      	b.n	2db30 <putchw+0x40>
        n--;
   2db7e:	3c01      	subs	r4, #1
   2db80:	e7d6      	b.n	2db30 <putchw+0x40>
            written += putf(putp, ' ');
   2db82:	2120      	movs	r1, #32
   2db84:	4638      	mov	r0, r7
   2db86:	f7ff ffa0 	bl	2daca <putf>
   2db8a:	4406      	add	r6, r0
        while (n-- > 0)
   2db8c:	462c      	mov	r4, r5
   2db8e:	1e65      	subs	r5, r4, #1
   2db90:	2c00      	cmp	r4, #0
   2db92:	dcf6      	bgt.n	2db82 <putchw+0x92>
   2db94:	462c      	mov	r4, r5
   2db96:	e7d1      	b.n	2db3c <putchw+0x4c>
        written += putf(putp, '-');
   2db98:	212d      	movs	r1, #45	; 0x2d
   2db9a:	4638      	mov	r0, r7
   2db9c:	f7ff ff95 	bl	2daca <putf>
   2dba0:	4406      	add	r6, r0
   2dba2:	e7d0      	b.n	2db46 <putchw+0x56>
        written += putf(putp, '0');
   2dba4:	2130      	movs	r1, #48	; 0x30
   2dba6:	4638      	mov	r0, r7
   2dba8:	f7ff ff8f 	bl	2daca <putf>
   2dbac:	4406      	add	r6, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   2dbae:	f898 3002 	ldrb.w	r3, [r8, #2]
   2dbb2:	f013 0f04 	tst.w	r3, #4
   2dbb6:	d005      	beq.n	2dbc4 <putchw+0xd4>
   2dbb8:	2158      	movs	r1, #88	; 0x58
   2dbba:	4638      	mov	r0, r7
   2dbbc:	f7ff ff85 	bl	2daca <putf>
   2dbc0:	4406      	add	r6, r0
   2dbc2:	e7cd      	b.n	2db60 <putchw+0x70>
   2dbc4:	2178      	movs	r1, #120	; 0x78
   2dbc6:	e7f8      	b.n	2dbba <putchw+0xca>
        written += putf(putp, '0');
   2dbc8:	2130      	movs	r1, #48	; 0x30
   2dbca:	4638      	mov	r0, r7
   2dbcc:	f7ff ff7d 	bl	2daca <putf>
   2dbd0:	4406      	add	r6, r0
   2dbd2:	e7c5      	b.n	2db60 <putchw+0x70>
            written += putf(putp, '0');
   2dbd4:	2130      	movs	r1, #48	; 0x30
   2dbd6:	4638      	mov	r0, r7
   2dbd8:	f7ff ff77 	bl	2daca <putf>
   2dbdc:	4406      	add	r6, r0
        while (n-- > 0)
   2dbde:	462c      	mov	r4, r5
   2dbe0:	1e65      	subs	r5, r4, #1
   2dbe2:	2c00      	cmp	r4, #0
   2dbe4:	dcf6      	bgt.n	2dbd4 <putchw+0xe4>
   2dbe6:	462c      	mov	r4, r5
   2dbe8:	e7bd      	b.n	2db66 <putchw+0x76>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   2dbea:	f898 3002 	ldrb.w	r3, [r8, #2]
   2dbee:	f013 0f08 	tst.w	r3, #8
   2dbf2:	d102      	bne.n	2dbfa <putchw+0x10a>
        while (n-- > 0)
            written += putf(putp, ' ');
    }
    
    return written;
}
   2dbf4:	4630      	mov	r0, r6
   2dbf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (n-- > 0)
   2dbfa:	1e65      	subs	r5, r4, #1
   2dbfc:	2c00      	cmp	r4, #0
   2dbfe:	ddf9      	ble.n	2dbf4 <putchw+0x104>
            written += putf(putp, ' ');
   2dc00:	2120      	movs	r1, #32
   2dc02:	4638      	mov	r0, r7
   2dc04:	f7ff ff61 	bl	2daca <putf>
   2dc08:	4406      	add	r6, r0
        while (n-- > 0)
   2dc0a:	462c      	mov	r4, r5
   2dc0c:	e7f5      	b.n	2dbfa <putchw+0x10a>
   2dc0e:	bf00      	nop
   2dc10:	0008ff00 	.word	0x0008ff00

0002dc14 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   2dc14:	b160      	cbz	r0, 2dc30 <intarg+0x1c>
   2dc16:	2801      	cmp	r0, #1
   2dc18:	d017      	beq.n	2dc4a <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   2dc1a:	b319      	cbz	r1, 2dc64 <intarg+0x50>
            val = va_arg(*va, long long);
   2dc1c:	6813      	ldr	r3, [r2, #0]
   2dc1e:	3307      	adds	r3, #7
   2dc20:	f023 0307 	bic.w	r3, r3, #7
   2dc24:	f103 0108 	add.w	r1, r3, #8
   2dc28:	6011      	str	r1, [r2, #0]
   2dc2a:	e9d3 0100 	ldrd	r0, r1, [r3]
   2dc2e:	4770      	bx	lr
        if (sign) {
   2dc30:	b129      	cbz	r1, 2dc3e <intarg+0x2a>
            val = va_arg(*va, int);
   2dc32:	6813      	ldr	r3, [r2, #0]
   2dc34:	1d19      	adds	r1, r3, #4
   2dc36:	6011      	str	r1, [r2, #0]
   2dc38:	6818      	ldr	r0, [r3, #0]
   2dc3a:	17c1      	asrs	r1, r0, #31
   2dc3c:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   2dc3e:	6813      	ldr	r3, [r2, #0]
   2dc40:	1d19      	adds	r1, r3, #4
   2dc42:	6011      	str	r1, [r2, #0]
   2dc44:	6818      	ldr	r0, [r3, #0]
   2dc46:	2100      	movs	r1, #0
   2dc48:	4770      	bx	lr
        if (sign) {
   2dc4a:	b129      	cbz	r1, 2dc58 <intarg+0x44>
            val = va_arg(*va, long);
   2dc4c:	6813      	ldr	r3, [r2, #0]
   2dc4e:	1d19      	adds	r1, r3, #4
   2dc50:	6011      	str	r1, [r2, #0]
   2dc52:	6818      	ldr	r0, [r3, #0]
   2dc54:	17c1      	asrs	r1, r0, #31
   2dc56:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   2dc58:	6813      	ldr	r3, [r2, #0]
   2dc5a:	1d19      	adds	r1, r3, #4
   2dc5c:	6011      	str	r1, [r2, #0]
   2dc5e:	6818      	ldr	r0, [r3, #0]
   2dc60:	2100      	movs	r1, #0
   2dc62:	4770      	bx	lr
        } else {
            val = va_arg(*va, unsigned long long);
   2dc64:	6813      	ldr	r3, [r2, #0]
   2dc66:	3307      	adds	r3, #7
   2dc68:	f023 0307 	bic.w	r3, r3, #7
   2dc6c:	f103 0108 	add.w	r1, r3, #8
   2dc70:	6011      	str	r1, [r2, #0]
   2dc72:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   2dc76:	4770      	bx	lr

0002dc78 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   2dc78:	b570      	push	{r4, r5, r6, lr}
   2dc7a:	b08a      	sub	sp, #40	; 0x28
   2dc7c:	4606      	mov	r6, r0
   2dc7e:	9101      	str	r1, [sp, #4]
   2dc80:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   2dc82:	ab02      	add	r3, sp, #8
   2dc84:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   2dc86:	2500      	movs	r5, #0

    while ((ch = *(fmt++))) {
   2dc88:	9b01      	ldr	r3, [sp, #4]
   2dc8a:	1c5a      	adds	r2, r3, #1
   2dc8c:	9201      	str	r2, [sp, #4]
   2dc8e:	7819      	ldrb	r1, [r3, #0]
   2dc90:	2900      	cmp	r1, #0
   2dc92:	f000 816e 	beq.w	2df72 <tfp_format+0x2fa>
        if (ch != '%') {
   2dc96:	2925      	cmp	r1, #37	; 0x25
   2dc98:	d004      	beq.n	2dca4 <tfp_format+0x2c>
            written += putf(putp, ch);
   2dc9a:	4630      	mov	r0, r6
   2dc9c:	f7ff ff15 	bl	2daca <putf>
   2dca0:	4405      	add	r5, r0
   2dca2:	e7f1      	b.n	2dc88 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   2dca4:	2200      	movs	r2, #0
   2dca6:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   2dcaa:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   2dcae:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
            p.hh = 0;
   2dcb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   2dcb6:	f362 1305 	bfi	r3, r2, #4, #2
   2dcba:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   2dcbe:	9b01      	ldr	r3, [sp, #4]
   2dcc0:	1c5a      	adds	r2, r3, #1
   2dcc2:	9201      	str	r2, [sp, #4]
   2dcc4:	781c      	ldrb	r4, [r3, #0]
   2dcc6:	b12c      	cbz	r4, 2dcd4 <tfp_format+0x5c>
                switch (ch) {
   2dcc8:	2c2d      	cmp	r4, #45	; 0x2d
   2dcca:	d073      	beq.n	2ddb4 <tfp_format+0x13c>
   2dccc:	2c30      	cmp	r4, #48	; 0x30
   2dcce:	d061      	beq.n	2dd94 <tfp_format+0x11c>
   2dcd0:	2c23      	cmp	r4, #35	; 0x23
   2dcd2:	d068      	beq.n	2dda6 <tfp_format+0x12e>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   2dcd4:	2c2a      	cmp	r4, #42	; 0x2a
   2dcd6:	d077      	beq.n	2ddc8 <tfp_format+0x150>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   2dcd8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   2dcdc:	b2db      	uxtb	r3, r3
   2dcde:	2b09      	cmp	r3, #9
   2dce0:	f240 8086 	bls.w	2ddf0 <tfp_format+0x178>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   2dce4:	2c6c      	cmp	r4, #108	; 0x6c
   2dce6:	f000 808b 	beq.w	2de00 <tfp_format+0x188>

                if (ch == 'l') {
                    ch = *(fmt++);
                    lng = 2;
                }
            } else if (ch == 'h') {
   2dcea:	2c68      	cmp	r4, #104	; 0x68
   2dcec:	f000 8095 	beq.w	2de1a <tfp_format+0x1a2>
            lng = 0;
   2dcf0:	2000      	movs	r0, #0
                    ch = *(fmt++);
                    p.hh = 2;
                }
            }

            if (ch == 'z') {
   2dcf2:	2c7a      	cmp	r4, #122	; 0x7a
   2dcf4:	f000 80ab 	beq.w	2de4e <tfp_format+0x1d6>
                ch = *(fmt++);
            }

            switch (ch) {
   2dcf8:	2c78      	cmp	r4, #120	; 0x78
   2dcfa:	d8c5      	bhi.n	2dc88 <tfp_format+0x10>
   2dcfc:	2c58      	cmp	r4, #88	; 0x58
   2dcfe:	f0c0 80ab 	bcc.w	2de58 <tfp_format+0x1e0>
   2dd02:	f1a4 0358 	sub.w	r3, r4, #88	; 0x58
   2dd06:	2b20      	cmp	r3, #32
   2dd08:	d8be      	bhi.n	2dc88 <tfp_format+0x10>
   2dd0a:	a201      	add	r2, pc, #4	; (adr r2, 2dd10 <tfp_format+0x98>)
   2dd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2dd10:	0002deb1 	.word	0x0002deb1
   2dd14:	0002dc89 	.word	0x0002dc89
   2dd18:	0002dc89 	.word	0x0002dc89
   2dd1c:	0002dc89 	.word	0x0002dc89
   2dd20:	0002dc89 	.word	0x0002dc89
   2dd24:	0002dc89 	.word	0x0002dc89
   2dd28:	0002dc89 	.word	0x0002dc89
   2dd2c:	0002dc89 	.word	0x0002dc89
   2dd30:	0002dc89 	.word	0x0002dc89
   2dd34:	0002dc89 	.word	0x0002dc89
   2dd38:	0002dc89 	.word	0x0002dc89
   2dd3c:	0002df47 	.word	0x0002df47
   2dd40:	0002de91 	.word	0x0002de91
   2dd44:	0002dc89 	.word	0x0002dc89
   2dd48:	0002dc89 	.word	0x0002dc89
   2dd4c:	0002dc89 	.word	0x0002dc89
   2dd50:	0002dc89 	.word	0x0002dc89
   2dd54:	0002de91 	.word	0x0002de91
   2dd58:	0002dc89 	.word	0x0002dc89
   2dd5c:	0002dc89 	.word	0x0002dc89
   2dd60:	0002dc89 	.word	0x0002dc89
   2dd64:	0002dc89 	.word	0x0002dc89
   2dd68:	0002dc89 	.word	0x0002dc89
   2dd6c:	0002dee5 	.word	0x0002dee5
   2dd70:	0002df05 	.word	0x0002df05
   2dd74:	0002dc89 	.word	0x0002dc89
   2dd78:	0002dc89 	.word	0x0002dc89
   2dd7c:	0002df59 	.word	0x0002df59
   2dd80:	0002dc89 	.word	0x0002dc89
   2dd84:	0002de71 	.word	0x0002de71
   2dd88:	0002dc89 	.word	0x0002dc89
   2dd8c:	0002dc89 	.word	0x0002dc89
   2dd90:	0002deb1 	.word	0x0002deb1
                    if (!p.left) {
   2dd94:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   2dd98:	f013 0f08 	tst.w	r3, #8
   2dd9c:	d18f      	bne.n	2dcbe <tfp_format+0x46>
                        p.lz = 1;
   2dd9e:	2301      	movs	r3, #1
   2dda0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   2dda4:	e78b      	b.n	2dcbe <tfp_format+0x46>
                    p.alt = 1;
   2dda6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   2ddaa:	f043 0302 	orr.w	r3, r3, #2
   2ddae:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   2ddb2:	e784      	b.n	2dcbe <tfp_format+0x46>
                    p.left = 1;
   2ddb4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   2ddb8:	f043 0308 	orr.w	r3, r3, #8
   2ddbc:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   2ddc0:	2300      	movs	r3, #0
   2ddc2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   2ddc6:	e77a      	b.n	2dcbe <tfp_format+0x46>
                i = intarg(0, 1, &va);
   2ddc8:	466a      	mov	r2, sp
   2ddca:	2101      	movs	r1, #1
   2ddcc:	2000      	movs	r0, #0
   2ddce:	f7ff ff21 	bl	2dc14 <intarg>
                if (i > UCHAR_MAX) {
   2ddd2:	28ff      	cmp	r0, #255	; 0xff
   2ddd4:	dd07      	ble.n	2dde6 <tfp_format+0x16e>
                    p.width = UCHAR_MAX;
   2ddd6:	23ff      	movs	r3, #255	; 0xff
   2ddd8:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   2dddc:	9b01      	ldr	r3, [sp, #4]
   2ddde:	1c5a      	adds	r2, r3, #1
   2dde0:	9201      	str	r2, [sp, #4]
   2dde2:	781c      	ldrb	r4, [r3, #0]
   2dde4:	e77e      	b.n	2dce4 <tfp_format+0x6c>
                } else if (i > 0) {
   2dde6:	2800      	cmp	r0, #0
   2dde8:	ddf8      	ble.n	2dddc <tfp_format+0x164>
                    p.width = i;
   2ddea:	f88d 0020 	strb.w	r0, [sp, #32]
   2ddee:	e7f5      	b.n	2dddc <tfp_format+0x164>
                ch = a2i(ch, &fmt, 10, &(p.width));
   2ddf0:	ab08      	add	r3, sp, #32
   2ddf2:	220a      	movs	r2, #10
   2ddf4:	a901      	add	r1, sp, #4
   2ddf6:	4620      	mov	r0, r4
   2ddf8:	f7ff fe4c 	bl	2da94 <a2i>
   2ddfc:	4604      	mov	r4, r0
   2ddfe:	e771      	b.n	2dce4 <tfp_format+0x6c>
                ch = *(fmt++);
   2de00:	9b01      	ldr	r3, [sp, #4]
   2de02:	1c5a      	adds	r2, r3, #1
   2de04:	9201      	str	r2, [sp, #4]
   2de06:	781c      	ldrb	r4, [r3, #0]
                if (ch == 'l') {
   2de08:	2c6c      	cmp	r4, #108	; 0x6c
   2de0a:	d001      	beq.n	2de10 <tfp_format+0x198>
                lng = 1;
   2de0c:	2001      	movs	r0, #1
   2de0e:	e770      	b.n	2dcf2 <tfp_format+0x7a>
                    ch = *(fmt++);
   2de10:	1c9a      	adds	r2, r3, #2
   2de12:	9201      	str	r2, [sp, #4]
   2de14:	785c      	ldrb	r4, [r3, #1]
                    lng = 2;
   2de16:	2002      	movs	r0, #2
   2de18:	e76b      	b.n	2dcf2 <tfp_format+0x7a>
                ch = *(fmt++);
   2de1a:	9b01      	ldr	r3, [sp, #4]
   2de1c:	1c5a      	adds	r2, r3, #1
   2de1e:	9201      	str	r2, [sp, #4]
   2de20:	781c      	ldrb	r4, [r3, #0]
                p.hh = 1;
   2de22:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
   2de26:	2001      	movs	r0, #1
   2de28:	f360 1105 	bfi	r1, r0, #4, #2
   2de2c:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
                if (ch == 'h') {
   2de30:	2c68      	cmp	r4, #104	; 0x68
   2de32:	d001      	beq.n	2de38 <tfp_format+0x1c0>
            lng = 0;
   2de34:	2000      	movs	r0, #0
   2de36:	e75c      	b.n	2dcf2 <tfp_format+0x7a>
                    ch = *(fmt++);
   2de38:	4402      	add	r2, r0
   2de3a:	9201      	str	r2, [sp, #4]
   2de3c:	785c      	ldrb	r4, [r3, #1]
                    p.hh = 2;
   2de3e:	b2cb      	uxtb	r3, r1
   2de40:	2202      	movs	r2, #2
   2de42:	f362 1305 	bfi	r3, r2, #4, #2
   2de46:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;
   2de4a:	2000      	movs	r0, #0
   2de4c:	e751      	b.n	2dcf2 <tfp_format+0x7a>
                ch = *(fmt++);
   2de4e:	9b01      	ldr	r3, [sp, #4]
   2de50:	1c5a      	adds	r2, r3, #1
   2de52:	9201      	str	r2, [sp, #4]
   2de54:	781c      	ldrb	r4, [r3, #0]
   2de56:	e74f      	b.n	2dcf8 <tfp_format+0x80>
            switch (ch) {
   2de58:	2c00      	cmp	r4, #0
   2de5a:	f000 808a 	beq.w	2df72 <tfp_format+0x2fa>
   2de5e:	2c25      	cmp	r4, #37	; 0x25
   2de60:	f47f af12 	bne.w	2dc88 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   2de64:	4621      	mov	r1, r4
   2de66:	4630      	mov	r0, r6
   2de68:	f7ff fe2f 	bl	2daca <putf>
   2de6c:	4405      	add	r5, r0
                break;
   2de6e:	e70b      	b.n	2dc88 <tfp_format+0x10>
                p.base = 10;
   2de70:	230a      	movs	r3, #10
   2de72:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   2de76:	466a      	mov	r2, sp
   2de78:	2100      	movs	r1, #0
   2de7a:	f7ff fecb 	bl	2dc14 <intarg>
   2de7e:	aa08      	add	r2, sp, #32
   2de80:	f7ff fd5e 	bl	2d940 <ui2a>
                written += putchw(putp, &p);
   2de84:	a908      	add	r1, sp, #32
   2de86:	4630      	mov	r0, r6
   2de88:	f7ff fe32 	bl	2daf0 <putchw>
   2de8c:	4405      	add	r5, r0
                break;
   2de8e:	e6fb      	b.n	2dc88 <tfp_format+0x10>
                p.base = 10;
   2de90:	230a      	movs	r3, #10
   2de92:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   2de96:	466a      	mov	r2, sp
   2de98:	2101      	movs	r1, #1
   2de9a:	f7ff febb 	bl	2dc14 <intarg>
   2de9e:	aa08      	add	r2, sp, #32
   2dea0:	f7ff fdcc 	bl	2da3c <i2a>
                written += putchw(putp, &p);
   2dea4:	a908      	add	r1, sp, #32
   2dea6:	4630      	mov	r0, r6
   2dea8:	f7ff fe22 	bl	2daf0 <putchw>
   2deac:	4405      	add	r5, r0
                break;
   2deae:	e6eb      	b.n	2dc88 <tfp_format+0x10>
                p.base = 16;
   2deb0:	2310      	movs	r3, #16
   2deb2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   2deb6:	2c58      	cmp	r4, #88	; 0x58
   2deb8:	bf14      	ite	ne
   2deba:	2400      	movne	r4, #0
   2debc:	2401      	moveq	r4, #1
   2debe:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   2dec2:	f364 0382 	bfi	r3, r4, #2, #1
   2dec6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   2deca:	466a      	mov	r2, sp
   2decc:	2100      	movs	r1, #0
   2dece:	f7ff fea1 	bl	2dc14 <intarg>
   2ded2:	aa08      	add	r2, sp, #32
   2ded4:	f7ff fd34 	bl	2d940 <ui2a>
                written += putchw(putp, &p);
   2ded8:	a908      	add	r1, sp, #32
   2deda:	4630      	mov	r0, r6
   2dedc:	f7ff fe08 	bl	2daf0 <putchw>
   2dee0:	4405      	add	r5, r0
                break;
   2dee2:	e6d1      	b.n	2dc88 <tfp_format+0x10>
                p.base = 8;
   2dee4:	2308      	movs	r3, #8
   2dee6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   2deea:	466a      	mov	r2, sp
   2deec:	2100      	movs	r1, #0
   2deee:	f7ff fe91 	bl	2dc14 <intarg>
   2def2:	aa08      	add	r2, sp, #32
   2def4:	f7ff fd24 	bl	2d940 <ui2a>
                written += putchw(putp, &p);
   2def8:	a908      	add	r1, sp, #32
   2defa:	4630      	mov	r0, r6
   2defc:	f7ff fdf8 	bl	2daf0 <putchw>
   2df00:	4405      	add	r5, r0
                break;
   2df02:	e6c1      	b.n	2dc88 <tfp_format+0x10>
                v = va_arg(va, void *);
   2df04:	9b00      	ldr	r3, [sp, #0]
   2df06:	1d1a      	adds	r2, r3, #4
   2df08:	9200      	str	r2, [sp, #0]
   2df0a:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   2df0c:	2310      	movs	r3, #16
   2df0e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   2df12:	aa08      	add	r2, sp, #32
   2df14:	2100      	movs	r1, #0
   2df16:	f7ff fd13 	bl	2d940 <ui2a>
                p.width = 2 * sizeof(void*);
   2df1a:	2308      	movs	r3, #8
   2df1c:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   2df20:	2301      	movs	r3, #1
   2df22:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   2df26:	2130      	movs	r1, #48	; 0x30
   2df28:	4630      	mov	r0, r6
   2df2a:	f7ff fdce 	bl	2daca <putf>
   2df2e:	4405      	add	r5, r0
                written += putf(putp, 'x');
   2df30:	2178      	movs	r1, #120	; 0x78
   2df32:	4630      	mov	r0, r6
   2df34:	f7ff fdc9 	bl	2daca <putf>
   2df38:	4405      	add	r5, r0
                written += putchw(putp, &p);
   2df3a:	a908      	add	r1, sp, #32
   2df3c:	4630      	mov	r0, r6
   2df3e:	f7ff fdd7 	bl	2daf0 <putchw>
   2df42:	4405      	add	r5, r0
                break;
   2df44:	e6a0      	b.n	2dc88 <tfp_format+0x10>
                written += putf(putp, (char)(va_arg(va, int)));
   2df46:	9b00      	ldr	r3, [sp, #0]
   2df48:	1d1a      	adds	r2, r3, #4
   2df4a:	9200      	str	r2, [sp, #0]
   2df4c:	7819      	ldrb	r1, [r3, #0]
   2df4e:	4630      	mov	r0, r6
   2df50:	f7ff fdbb 	bl	2daca <putf>
   2df54:	4405      	add	r5, r0
                break;
   2df56:	e697      	b.n	2dc88 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   2df58:	9b00      	ldr	r3, [sp, #0]
   2df5a:	1d1a      	adds	r2, r3, #4
   2df5c:	9200      	str	r2, [sp, #0]
   2df5e:	681b      	ldr	r3, [r3, #0]
   2df60:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   2df62:	a908      	add	r1, sp, #32
   2df64:	4630      	mov	r0, r6
   2df66:	f7ff fdc3 	bl	2daf0 <putchw>
   2df6a:	4405      	add	r5, r0
                p.bf = bf;
   2df6c:	ab02      	add	r3, sp, #8
   2df6e:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   2df70:	e68a      	b.n	2dc88 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   2df72:	4628      	mov	r0, r5
   2df74:	b00a      	add	sp, #40	; 0x28
   2df76:	bd70      	pop	{r4, r5, r6, pc}

0002df78 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   2df78:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   2df7a:	f7ff fe7d 	bl	2dc78 <tfp_format>
}
   2df7e:	bd08      	pop	{r3, pc}

0002df80 <fprintf>:

int fprintf(FILE *f, const char *fmt, ...)
{
   2df80:	b40e      	push	{r1, r2, r3}
   2df82:	b500      	push	{lr}
   2df84:	b082      	sub	sp, #8
   2df86:	aa03      	add	r2, sp, #12
   2df88:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   2df8c:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(f, fmt, va);
   2df8e:	f7ff fff3 	bl	2df78 <vfprintf>
    va_end(va);
    return rv;
}
   2df92:	b002      	add	sp, #8
   2df94:	f85d eb04 	ldr.w	lr, [sp], #4
   2df98:	b003      	add	sp, #12
   2df9a:	4770      	bx	lr

0002df9c <printf>:

int printf(const char *fmt, ...)
{
   2df9c:	b40f      	push	{r0, r1, r2, r3}
   2df9e:	b500      	push	{lr}
   2dfa0:	b083      	sub	sp, #12
   2dfa2:	aa04      	add	r2, sp, #16
   2dfa4:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   2dfa8:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   2dfaa:	4b04      	ldr	r3, [pc, #16]	; (2dfbc <printf+0x20>)
   2dfac:	6818      	ldr	r0, [r3, #0]
   2dfae:	f7ff ffe3 	bl	2df78 <vfprintf>
    va_end(va);
    return rv;
}
   2dfb2:	b003      	add	sp, #12
   2dfb4:	f85d eb04 	ldr.w	lr, [sp], #4
   2dfb8:	b004      	add	sp, #16
   2dfba:	4770      	bx	lr
   2dfbc:	00033ad0 	.word	0x00033ad0

0002dfc0 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   2dfc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2dfc2:	b085      	sub	sp, #20
   2dfc4:	4605      	mov	r5, r0
   2dfc6:	460c      	mov	r4, r1
   2dfc8:	4616      	mov	r6, r2
   2dfca:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   2dfcc:	460a      	mov	r2, r1
   2dfce:	4601      	mov	r1, r0
   2dfd0:	4668      	mov	r0, sp
   2dfd2:	f000 f843 	bl	2e05c <fmemopen_w>
    tfp_format(f, fmt, va);
   2dfd6:	463a      	mov	r2, r7
   2dfd8:	4631      	mov	r1, r6
   2dfda:	f7ff fe4d 	bl	2dc78 <tfp_format>
    if (size > 0) {
   2dfde:	b12c      	cbz	r4, 2dfec <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   2dfe0:	9b02      	ldr	r3, [sp, #8]
   2dfe2:	42a3      	cmp	r3, r4
   2dfe4:	d205      	bcs.n	2dff2 <vsnprintf+0x32>
            *(state.buffer) = '\0';
   2dfe6:	9b01      	ldr	r3, [sp, #4]
   2dfe8:	2200      	movs	r2, #0
   2dfea:	701a      	strb	r2, [r3, #0]
        } else {
            str[size - 1] = '\0';
        }
    }
    return state.bytes_written;
}
   2dfec:	9802      	ldr	r0, [sp, #8]
   2dfee:	b005      	add	sp, #20
   2dff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            str[size - 1] = '\0';
   2dff2:	3c01      	subs	r4, #1
   2dff4:	2300      	movs	r3, #0
   2dff6:	552b      	strb	r3, [r5, r4]
   2dff8:	e7f8      	b.n	2dfec <vsnprintf+0x2c>

0002dffa <snprintf>:

int snprintf(char *str, size_t size, const char *fmt, ...)
{
   2dffa:	b40c      	push	{r2, r3}
   2dffc:	b500      	push	{lr}
   2dffe:	b083      	sub	sp, #12
   2e000:	ab04      	add	r3, sp, #16
   2e002:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list va;
    va_start(va, fmt);
   2e006:	9301      	str	r3, [sp, #4]
    int rv = vsnprintf(str, size, fmt, va);
   2e008:	f7ff ffda 	bl	2dfc0 <vsnprintf>
    va_end(va);
    return rv;
}
   2e00c:	b003      	add	sp, #12
   2e00e:	f85d eb04 	ldr.w	lr, [sp], #4
   2e012:	b002      	add	sp, #8
   2e014:	4770      	bx	lr
	...

0002e018 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   2e018:	b508      	push	{r3, lr}
   2e01a:	460a      	mov	r2, r1
	return vfprintf(stdout, format, ap);
   2e01c:	4601      	mov	r1, r0
   2e01e:	4b02      	ldr	r3, [pc, #8]	; (2e028 <vprintf+0x10>)
   2e020:	6818      	ldr	r0, [r3, #0]
   2e022:	f7ff ffa9 	bl	2df78 <vfprintf>
}
   2e026:	bd08      	pop	{r3, pc}
   2e028:	00033ad0 	.word	0x00033ad0

0002e02c <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   2e02c:	b430      	push	{r4, r5}
   2e02e:	4604      	mov	r4, r0
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   2e030:	2000      	movs	r0, #0
    
    while (n--)
   2e032:	e000      	b.n	2e036 <memfile_write+0xa>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   2e034:	462a      	mov	r2, r5
    while (n--)
   2e036:	1e55      	subs	r5, r2, #1
   2e038:	b16a      	cbz	r2, 2e056 <memfile_write+0x2a>
        f->bytes_written++;
   2e03a:	68a3      	ldr	r3, [r4, #8]
   2e03c:	3301      	adds	r3, #1
   2e03e:	60a3      	str	r3, [r4, #8]
        if (f->bytes_written <= f->size)
   2e040:	68e2      	ldr	r2, [r4, #12]
   2e042:	4293      	cmp	r3, r2
   2e044:	d8f6      	bhi.n	2e034 <memfile_write+0x8>
            *f->buffer++ = *bp++;
   2e046:	6863      	ldr	r3, [r4, #4]
   2e048:	1c5a      	adds	r2, r3, #1
   2e04a:	6062      	str	r2, [r4, #4]
   2e04c:	f811 2b01 	ldrb.w	r2, [r1], #1
   2e050:	701a      	strb	r2, [r3, #0]
            i++;
   2e052:	3001      	adds	r0, #1
   2e054:	e7ee      	b.n	2e034 <memfile_write+0x8>
        }
    }
    
    return i;
}
   2e056:	bc30      	pop	{r4, r5}
   2e058:	4770      	bx	lr
	...

0002e05c <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   2e05c:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   2e05e:	4c04      	ldr	r4, [pc, #16]	; (2e070 <fmemopen_w+0x14>)
   2e060:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   2e062:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   2e064:	2100      	movs	r1, #0
   2e066:	6081      	str	r1, [r0, #8]
    storage->size = size;
   2e068:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   2e06a:	bc10      	pop	{r4}
   2e06c:	4770      	bx	lr
   2e06e:	bf00      	nop
   2e070:	00033ad4 	.word	0x00033ad4

0002e074 <strntoumax>:
		return -1;
	}
}

uintmax_t strntoumax(const char *nptr, char **endptr, int base, size_t n)
{
   2e074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2e078:	4605      	mov	r5, r0
   2e07a:	468c      	mov	ip, r1
	int minus = 0;
	uintmax_t v = 0;
	int d;

	while (n && isspace((unsigned char)*nptr)) {
   2e07c:	e001      	b.n	2e082 <strntoumax+0xe>
		nptr++;
   2e07e:	3501      	adds	r5, #1
		n--;
   2e080:	3b01      	subs	r3, #1
	while (n && isspace((unsigned char)*nptr)) {
   2e082:	b143      	cbz	r3, 2e096 <strntoumax+0x22>
   2e084:	7829      	ldrb	r1, [r5, #0]
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
   2e086:	2920      	cmp	r1, #32
   2e088:	d0f9      	beq.n	2e07e <strntoumax+0xa>
   2e08a:	290a      	cmp	r1, #10
   2e08c:	d0f7      	beq.n	2e07e <strntoumax+0xa>
   2e08e:	2909      	cmp	r1, #9
   2e090:	d0f5      	beq.n	2e07e <strntoumax+0xa>
   2e092:	290d      	cmp	r1, #13
   2e094:	d0f3      	beq.n	2e07e <strntoumax+0xa>
	}

	/* Single optional + or - */
	if (n) {
   2e096:	b1a3      	cbz	r3, 2e0c2 <strntoumax+0x4e>
		char c = *nptr;
   2e098:	f895 e000 	ldrb.w	lr, [r5]
		if (c == '-' || c == '+') {
   2e09c:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   2e0a0:	d005      	beq.n	2e0ae <strntoumax+0x3a>
   2e0a2:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   2e0a6:	d002      	beq.n	2e0ae <strntoumax+0x3a>
	int minus = 0;
   2e0a8:	f04f 0e00 	mov.w	lr, #0
   2e0ac:	e00b      	b.n	2e0c6 <strntoumax+0x52>
			minus = (c == '-');
   2e0ae:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   2e0b2:	bf14      	ite	ne
   2e0b4:	f04f 0e00 	movne.w	lr, #0
   2e0b8:	f04f 0e01 	moveq.w	lr, #1
			nptr++;
   2e0bc:	3501      	adds	r5, #1
			n--;
   2e0be:	3b01      	subs	r3, #1
   2e0c0:	e001      	b.n	2e0c6 <strntoumax+0x52>
	int minus = 0;
   2e0c2:	f04f 0e00 	mov.w	lr, #0
		}
	}

	if (base == 0) {
   2e0c6:	b9ba      	cbnz	r2, 2e0f8 <strntoumax+0x84>
		if (n >= 2 && nptr[0] == '0' &&
   2e0c8:	2b01      	cmp	r3, #1
   2e0ca:	d902      	bls.n	2e0d2 <strntoumax+0x5e>
   2e0cc:	782a      	ldrb	r2, [r5, #0]
   2e0ce:	2a30      	cmp	r2, #48	; 0x30
   2e0d0:	d005      	beq.n	2e0de <strntoumax+0x6a>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
			n -= 2;
			nptr += 2;
			base = 16;
		} else if (n >= 1 && nptr[0] == '0') {
   2e0d2:	b32b      	cbz	r3, 2e120 <strntoumax+0xac>
   2e0d4:	782a      	ldrb	r2, [r5, #0]
   2e0d6:	2a30      	cmp	r2, #48	; 0x30
   2e0d8:	d00a      	beq.n	2e0f0 <strntoumax+0x7c>
			n--;
			nptr++;
			base = 8;
		} else {
			base = 10;
   2e0da:	220a      	movs	r2, #10
   2e0dc:	e00e      	b.n	2e0fc <strntoumax+0x88>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   2e0de:	786a      	ldrb	r2, [r5, #1]
		if (n >= 2 && nptr[0] == '0' &&
   2e0e0:	2a78      	cmp	r2, #120	; 0x78
   2e0e2:	d001      	beq.n	2e0e8 <strntoumax+0x74>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   2e0e4:	2a58      	cmp	r2, #88	; 0x58
   2e0e6:	d1f4      	bne.n	2e0d2 <strntoumax+0x5e>
			n -= 2;
   2e0e8:	3b02      	subs	r3, #2
			nptr += 2;
   2e0ea:	3502      	adds	r5, #2
			base = 16;
   2e0ec:	2210      	movs	r2, #16
   2e0ee:	e005      	b.n	2e0fc <strntoumax+0x88>
			n--;
   2e0f0:	3b01      	subs	r3, #1
			nptr++;
   2e0f2:	3501      	adds	r5, #1
			base = 8;
   2e0f4:	2208      	movs	r2, #8
   2e0f6:	e001      	b.n	2e0fc <strntoumax+0x88>
		}
	} else if (base == 16) {
   2e0f8:	2a10      	cmp	r2, #16
   2e0fa:	d004      	beq.n	2e106 <strntoumax+0x92>
			base = 16;
   2e0fc:	f04f 0800 	mov.w	r8, #0
   2e100:	f04f 0900 	mov.w	r9, #0
   2e104:	e026      	b.n	2e154 <strntoumax+0xe0>
		if (n >= 2 && nptr[0] == '0' &&
   2e106:	2b01      	cmp	r3, #1
   2e108:	d9f8      	bls.n	2e0fc <strntoumax+0x88>
   2e10a:	7829      	ldrb	r1, [r5, #0]
   2e10c:	2930      	cmp	r1, #48	; 0x30
   2e10e:	d1f5      	bne.n	2e0fc <strntoumax+0x88>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   2e110:	7869      	ldrb	r1, [r5, #1]
		if (n >= 2 && nptr[0] == '0' &&
   2e112:	2978      	cmp	r1, #120	; 0x78
   2e114:	d001      	beq.n	2e11a <strntoumax+0xa6>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   2e116:	2958      	cmp	r1, #88	; 0x58
   2e118:	d1f0      	bne.n	2e0fc <strntoumax+0x88>
			n -= 2;
   2e11a:	3b02      	subs	r3, #2
			nptr += 2;
   2e11c:	3502      	adds	r5, #2
   2e11e:	e7ed      	b.n	2e0fc <strntoumax+0x88>
			base = 10;
   2e120:	220a      	movs	r2, #10
   2e122:	e7eb      	b.n	2e0fc <strntoumax+0x88>
		return ch - '0';
   2e124:	4634      	mov	r4, r6
   2e126:	e002      	b.n	2e12e <strntoumax+0xba>
		return ch - 'A' + 10;
   2e128:	3c37      	subs	r4, #55	; 0x37
   2e12a:	e000      	b.n	2e12e <strntoumax+0xba>
		return ch - 'a' + 10;
   2e12c:	3c57      	subs	r4, #87	; 0x57
		}
	}

	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   2e12e:	2c00      	cmp	r4, #0
   2e130:	db1e      	blt.n	2e170 <strntoumax+0xfc>
   2e132:	42a2      	cmp	r2, r4
   2e134:	dd1c      	ble.n	2e170 <strntoumax+0xfc>
		v = v * base + d;
   2e136:	fb02 f109 	mul.w	r1, r2, r9
   2e13a:	17d7      	asrs	r7, r2, #31
   2e13c:	fb08 1607 	mla	r6, r8, r7, r1
   2e140:	fba2 0108 	umull	r0, r1, r2, r8
   2e144:	4431      	add	r1, r6
   2e146:	1900      	adds	r0, r0, r4
   2e148:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   2e14c:	4680      	mov	r8, r0
   2e14e:	4689      	mov	r9, r1
		n--;
   2e150:	3b01      	subs	r3, #1
		nptr++;
   2e152:	3501      	adds	r5, #1
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   2e154:	b163      	cbz	r3, 2e170 <strntoumax+0xfc>
   2e156:	782c      	ldrb	r4, [r5, #0]
	if (ch >= '0' && ch <= '9') {
   2e158:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   2e15c:	2e09      	cmp	r6, #9
   2e15e:	d9e1      	bls.n	2e124 <strntoumax+0xb0>
	} else if (ch >= 'A' && ch <= 'Z') {
   2e160:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   2e164:	2e19      	cmp	r6, #25
   2e166:	d9df      	bls.n	2e128 <strntoumax+0xb4>
	} else if (ch >= 'a' && ch <= 'z') {
   2e168:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   2e16c:	2e19      	cmp	r6, #25
   2e16e:	d9dd      	bls.n	2e12c <strntoumax+0xb8>
	}

	if (endptr)
   2e170:	f1bc 0f00 	cmp.w	ip, #0
   2e174:	d001      	beq.n	2e17a <strntoumax+0x106>
		*endptr = (char *)nptr;
   2e176:	f8cc 5000 	str.w	r5, [ip]

	return minus ? -v : v;
   2e17a:	f1be 0f00 	cmp.w	lr, #0
   2e17e:	d003      	beq.n	2e188 <strntoumax+0x114>
   2e180:	f1d8 0800 	rsbs	r8, r8, #0
   2e184:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
}
   2e188:	4640      	mov	r0, r8
   2e18a:	4649      	mov	r1, r9
   2e18c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002e190 <strpbrk>:
#include <string.h>

char *strpbrk(const char *s1, const char *s2)
{
  const char *c = s2;
  if (!*s1)
   2e190:	7803      	ldrb	r3, [r0, #0]
   2e192:	b193      	cbz	r3, 2e1ba <strpbrk+0x2a>
{
   2e194:	b410      	push	{r4}
  const char *c = s2;
   2e196:	460a      	mov	r2, r1
   2e198:	e001      	b.n	2e19e <strpbrk+0xe>
      for (c = s2; *c; c++)
	{
	  if (*s1 == *c)
	    break;
	}
      if (*c)
   2e19a:	b953      	cbnz	r3, 2e1b2 <strpbrk+0x22>
	break;
      s1++;
   2e19c:	3001      	adds	r0, #1
  while (*s1)
   2e19e:	7804      	ldrb	r4, [r0, #0]
   2e1a0:	b13c      	cbz	r4, 2e1b2 <strpbrk+0x22>
      for (c = s2; *c; c++)
   2e1a2:	460a      	mov	r2, r1
   2e1a4:	7813      	ldrb	r3, [r2, #0]
   2e1a6:	2b00      	cmp	r3, #0
   2e1a8:	d0f7      	beq.n	2e19a <strpbrk+0xa>
	  if (*s1 == *c)
   2e1aa:	42a3      	cmp	r3, r4
   2e1ac:	d0f5      	beq.n	2e19a <strpbrk+0xa>
      for (c = s2; *c; c++)
   2e1ae:	3201      	adds	r2, #1
   2e1b0:	e7f8      	b.n	2e1a4 <strpbrk+0x14>
    }

  if (*c == '\0')
   2e1b2:	7813      	ldrb	r3, [r2, #0]
   2e1b4:	b11b      	cbz	r3, 2e1be <strpbrk+0x2e>
    s1 = NULL;

  return (char *) s1;
}
   2e1b6:	bc10      	pop	{r4}
   2e1b8:	4770      	bx	lr
    return (char *) NULL;
   2e1ba:	2000      	movs	r0, #0
}
   2e1bc:	4770      	bx	lr
    s1 = NULL;
   2e1be:	2000      	movs	r0, #0
   2e1c0:	e7f9      	b.n	2e1b6 <strpbrk+0x26>

0002e1c2 <log_fcb_registered>:
    /* Initialize watermark to designated unknown value*/
    fl->fl_watermark_off = 0xffffffff;
#endif
#endif
    return 0;
}
   2e1c2:	2000      	movs	r0, #0
   2e1c4:	4770      	bx	lr

0002e1c6 <log_fcb_flush>:
{
   2e1c6:	b508      	push	{r3, lr}
    return fcb_clear(fcb);
   2e1c8:	6880      	ldr	r0, [r0, #8]
   2e1ca:	f7fc f81e 	bl	2a20a <fcb_clear>
}
   2e1ce:	bd08      	pop	{r3, pc}

0002e1d0 <fcb_get_fa_hdr>:
{
   2e1d0:	b570      	push	{r4, r5, r6, lr}
   2e1d2:	460d      	mov	r5, r1
   2e1d4:	4614      	mov	r4, r2
   2e1d6:	461e      	mov	r6, r3
    rc = fcb_getnext(fcb, fcb_entry);
   2e1d8:	4611      	mov	r1, r2
   2e1da:	f7fc f9f5 	bl	2a5c8 <fcb_getnext>
    if (rc == 0) {
   2e1de:	b100      	cbz	r0, 2e1e2 <fcb_get_fa_hdr+0x12>
}
   2e1e0:	bd70      	pop	{r4, r5, r6, pc}
        return log_read_hdr(log, fcb_entry, hdr);
   2e1e2:	4632      	mov	r2, r6
   2e1e4:	4621      	mov	r1, r4
   2e1e6:	4628      	mov	r0, r5
   2e1e8:	f7eb f848 	bl	1927c <log_read_hdr>
   2e1ec:	e7f8      	b.n	2e1e0 <fcb_get_fa_hdr+0x10>

0002e1ee <fcb_walk_back_find_start>:
{
   2e1ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e1f2:	b08a      	sub	sp, #40	; 0x28
   2e1f4:	4606      	mov	r6, r0
   2e1f6:	4688      	mov	r8, r1
   2e1f8:	4617      	mov	r7, r2
   2e1fa:	4699      	mov	r9, r3
    struct fcb_entry iter_entry = {0};
   2e1fc:	2300      	movs	r3, #0
   2e1fe:	9302      	str	r3, [sp, #8]
   2e200:	9303      	str	r3, [sp, #12]
   2e202:	9304      	str	r3, [sp, #16]
    iter_entry.fe_area = fcb->f_oldest;
   2e204:	6983      	ldr	r3, [r0, #24]
   2e206:	9301      	str	r3, [sp, #4]
    rc = fcb_get_fa_hdr(fcb, log, &iter_entry, &hdr);
   2e208:	ab05      	add	r3, sp, #20
   2e20a:	aa01      	add	r2, sp, #4
   2e20c:	f7ff ffe0 	bl	2e1d0 <fcb_get_fa_hdr>
    if (rc != 0) {
   2e210:	4682      	mov	sl, r0
   2e212:	bb58      	cbnz	r0, 2e26c <fcb_walk_back_find_start+0x7e>
    if (hdr.ue_index >= log_offset->lo_index) {
   2e214:	68bb      	ldr	r3, [r7, #8]
   2e216:	9a07      	ldr	r2, [sp, #28]
   2e218:	429a      	cmp	r2, r3
   2e21a:	d21d      	bcs.n	2e258 <fcb_walk_back_find_start+0x6a>
    fap = fcb->f_active.fe_area;
   2e21c:	69f4      	ldr	r4, [r6, #28]
    for (hdr.ue_index = log_offset->lo_index; hdr.ue_index >= log_offset->lo_index;) {
   2e21e:	9307      	str	r3, [sp, #28]
   2e220:	e005      	b.n	2e22e <fcb_walk_back_find_start+0x40>
            fap = &(fcb->f_sectors[fcb->f_sector_cnt-1]);
   2e222:	7974      	ldrb	r4, [r6, #5]
   2e224:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2e228:	00a4      	lsls	r4, r4, #2
   2e22a:	3c0c      	subs	r4, #12
   2e22c:	441c      	add	r4, r3
    for (hdr.ue_index = log_offset->lo_index; hdr.ue_index >= log_offset->lo_index;) {
   2e22e:	68bb      	ldr	r3, [r7, #8]
   2e230:	9a07      	ldr	r2, [sp, #28]
   2e232:	429a      	cmp	r2, r3
   2e234:	d310      	bcc.n	2e258 <fcb_walk_back_find_start+0x6a>
        memset(&iter_entry, 0, sizeof(iter_entry));
   2e236:	2500      	movs	r5, #0
   2e238:	9502      	str	r5, [sp, #8]
   2e23a:	9503      	str	r5, [sp, #12]
   2e23c:	9504      	str	r5, [sp, #16]
        iter_entry.fe_area = fap;
   2e23e:	9401      	str	r4, [sp, #4]
        rc = fcb_get_fa_hdr(fcb, log, &iter_entry, &hdr);
   2e240:	ab05      	add	r3, sp, #20
   2e242:	aa01      	add	r2, sp, #4
   2e244:	4641      	mov	r1, r8
   2e246:	4630      	mov	r0, r6
   2e248:	f7ff ffc2 	bl	2e1d0 <fcb_get_fa_hdr>
        if (rc != 0) {
   2e24c:	b990      	cbnz	r0, 2e274 <fcb_walk_back_find_start+0x86>
        if (fap == &fcb->f_sectors[0]) {
   2e24e:	68b3      	ldr	r3, [r6, #8]
   2e250:	42a3      	cmp	r3, r4
   2e252:	d0e6      	beq.n	2e222 <fcb_walk_back_find_start+0x34>
            fap--;
   2e254:	3c0c      	subs	r4, #12
   2e256:	e7ea      	b.n	2e22e <fcb_walk_back_find_start+0x40>
    memcpy(fcb_entry, &iter_entry, sizeof(struct fcb_entry));
   2e258:	ac01      	add	r4, sp, #4
   2e25a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2e25c:	f8c9 0000 	str.w	r0, [r9]
   2e260:	f8c9 1004 	str.w	r1, [r9, #4]
   2e264:	f8c9 2008 	str.w	r2, [r9, #8]
   2e268:	f8c9 300c 	str.w	r3, [r9, #12]
}
   2e26c:	4650      	mov	r0, sl
   2e26e:	b00a      	add	sp, #40	; 0x28
   2e270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return rc;
   2e274:	4682      	mov	sl, r0
   2e276:	e7f9      	b.n	2e26c <fcb_walk_back_find_start+0x7e>

0002e278 <log_fcb_find_gte>:
{
   2e278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2e27c:	b087      	sub	sp, #28
   2e27e:	4606      	mov	r6, r0
   2e280:	460f      	mov	r7, r1
   2e282:	4614      	mov	r4, r2
    fcb_log = log->l_arg;
   2e284:	f8d0 9008 	ldr.w	r9, [r0, #8]
    memset(out_entry, 0, sizeof *out_entry);
   2e288:	2300      	movs	r3, #0
   2e28a:	6013      	str	r3, [r2, #0]
   2e28c:	6053      	str	r3, [r2, #4]
   2e28e:	6093      	str	r3, [r2, #8]
   2e290:	60d3      	str	r3, [r2, #12]
    rc = fcb_getnext(fcb, out_entry);
   2e292:	4611      	mov	r1, r2
   2e294:	4648      	mov	r0, r9
   2e296:	f7fc f997 	bl	2a5c8 <fcb_getnext>
    if (rc == FCB_ERR_NOVAR) {
   2e29a:	f110 0f03 	cmn.w	r0, #3
   2e29e:	d03d      	beq.n	2e31c <log_fcb_find_gte+0xa4>
   2e2a0:	46c8      	mov	r8, r9
   2e2a2:	4605      	mov	r5, r0
    } else if (rc != 0) {
   2e2a4:	2800      	cmp	r0, #0
   2e2a6:	d13c      	bne.n	2e322 <log_fcb_find_gte+0xaa>
    if (log_offset->lo_ts < 0) {
   2e2a8:	e9d7 2300 	ldrd	r2, r3, [r7]
   2e2ac:	2a00      	cmp	r2, #0
   2e2ae:	f173 0300 	sbcs.w	r3, r3, #0
   2e2b2:	db20      	blt.n	2e2f6 <log_fcb_find_gte+0x7e>
    rc = log_read_hdr(log, &fcb->f_active, &hdr);
   2e2b4:	aa01      	add	r2, sp, #4
   2e2b6:	f109 011c 	add.w	r1, r9, #28
   2e2ba:	4630      	mov	r0, r6
   2e2bc:	f7ea ffde 	bl	1927c <log_read_hdr>
    if (rc != 0) {
   2e2c0:	4605      	mov	r5, r0
   2e2c2:	b9e8      	cbnz	r0, 2e300 <log_fcb_find_gte+0x88>
    if (log_offset->lo_index > hdr.ue_index) {
   2e2c4:	68bb      	ldr	r3, [r7, #8]
   2e2c6:	9a03      	ldr	r2, [sp, #12]
   2e2c8:	4293      	cmp	r3, r2
   2e2ca:	d82d      	bhi.n	2e328 <log_fcb_find_gte+0xb0>
    if ((bmark_found == false) && (log_offset->lo_index != 0)) {
   2e2cc:	b9e3      	cbnz	r3, 2e308 <log_fcb_find_gte+0x90>
        rc = log_read_hdr(log, out_entry, &hdr);
   2e2ce:	aa01      	add	r2, sp, #4
   2e2d0:	4621      	mov	r1, r4
   2e2d2:	4630      	mov	r0, r6
   2e2d4:	f7ea ffd2 	bl	1927c <log_read_hdr>
        if (rc != 0) {
   2e2d8:	4605      	mov	r5, r0
   2e2da:	b988      	cbnz	r0, 2e300 <log_fcb_find_gte+0x88>
        if (hdr.ue_index >= log_offset->lo_index) {
   2e2dc:	68bb      	ldr	r3, [r7, #8]
   2e2de:	9a03      	ldr	r2, [sp, #12]
   2e2e0:	429a      	cmp	r2, r3
   2e2e2:	d20d      	bcs.n	2e300 <log_fcb_find_gte+0x88>
    } while (fcb_getnext(fcb, out_entry) == 0);
   2e2e4:	4621      	mov	r1, r4
   2e2e6:	4640      	mov	r0, r8
   2e2e8:	f7fc f96e 	bl	2a5c8 <fcb_getnext>
   2e2ec:	2800      	cmp	r0, #0
   2e2ee:	d0ee      	beq.n	2e2ce <log_fcb_find_gte+0x56>
    return SYS_ENOENT;
   2e2f0:	f06f 0503 	mvn.w	r5, #3
   2e2f4:	e004      	b.n	2e300 <log_fcb_find_gte+0x88>
        *out_entry = fcb->f_active;
   2e2f6:	f109 001c 	add.w	r0, r9, #28
   2e2fa:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   2e2fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   2e300:	4628      	mov	r0, r5
   2e302:	b007      	add	sp, #28
   2e304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rc = fcb_walk_back_find_start(fcb, log, log_offset, out_entry);
   2e308:	4623      	mov	r3, r4
   2e30a:	463a      	mov	r2, r7
   2e30c:	4631      	mov	r1, r6
   2e30e:	4648      	mov	r0, r9
   2e310:	f7ff ff6d 	bl	2e1ee <fcb_walk_back_find_start>
        if (rc != 0) {
   2e314:	4605      	mov	r5, r0
   2e316:	2800      	cmp	r0, #0
   2e318:	d0d9      	beq.n	2e2ce <log_fcb_find_gte+0x56>
   2e31a:	e7f1      	b.n	2e300 <log_fcb_find_gte+0x88>
        return SYS_ENOENT;
   2e31c:	f06f 0503 	mvn.w	r5, #3
   2e320:	e7ee      	b.n	2e300 <log_fcb_find_gte+0x88>
        return SYS_EUNKNOWN;
   2e322:	f06f 050c 	mvn.w	r5, #12
   2e326:	e7eb      	b.n	2e300 <log_fcb_find_gte+0x88>
        return SYS_ENOENT;
   2e328:	f06f 0503 	mvn.w	r5, #3
   2e32c:	e7e8      	b.n	2e300 <log_fcb_find_gte+0x88>

0002e32e <log_fcb_walk_impl>:
{
   2e32e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e332:	b085      	sub	sp, #20
   2e334:	4604      	mov	r4, r0
   2e336:	460f      	mov	r7, r1
   2e338:	4615      	mov	r5, r2
   2e33a:	461e      	mov	r6, r3
    fcb_log = log->l_arg;
   2e33c:	f8d0 9008 	ldr.w	r9, [r0, #8]
    rc = log_fcb_find_gte(log, log_offset, &loc);
   2e340:	466a      	mov	r2, sp
   2e342:	4629      	mov	r1, r5
   2e344:	f7ff ff98 	bl	2e278 <log_fcb_find_gte>
    switch (rc) {
   2e348:	f110 0f04 	cmn.w	r0, #4
   2e34c:	d01d      	beq.n	2e38a <log_fcb_walk_impl+0x5c>
   2e34e:	4680      	mov	r8, r0
   2e350:	b9e8      	cbnz	r0, 2e38e <log_fcb_walk_impl+0x60>
    fap = loc.fe_area;
   2e352:	f8dd b000 	ldr.w	fp, [sp]
   2e356:	e00c      	b.n	2e372 <log_fcb_walk_impl+0x44>
        rc = walk_func(log, log_offset, &loc, loc.fe_data_len);
   2e358:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2e35c:	466a      	mov	r2, sp
   2e35e:	4629      	mov	r1, r5
   2e360:	4620      	mov	r0, r4
   2e362:	47b8      	blx	r7
        if (rc != 0) {
   2e364:	4682      	mov	sl, r0
   2e366:	b950      	cbnz	r0, 2e37e <log_fcb_walk_impl+0x50>
    } while (fcb_getnext(fcb, &loc) == 0);
   2e368:	4669      	mov	r1, sp
   2e36a:	4648      	mov	r0, r9
   2e36c:	f7fc f92c 	bl	2a5c8 <fcb_getnext>
   2e370:	b948      	cbnz	r0, 2e386 <log_fcb_walk_impl+0x58>
        if (area) {
   2e372:	2e00      	cmp	r6, #0
   2e374:	d0f0      	beq.n	2e358 <log_fcb_walk_impl+0x2a>
            if (fap != loc.fe_area) {
   2e376:	9b00      	ldr	r3, [sp, #0]
   2e378:	455b      	cmp	r3, fp
   2e37a:	d0ed      	beq.n	2e358 <log_fcb_walk_impl+0x2a>
   2e37c:	e007      	b.n	2e38e <log_fcb_walk_impl+0x60>
            if (rc < 0) {
   2e37e:	2800      	cmp	r0, #0
   2e380:	da05      	bge.n	2e38e <log_fcb_walk_impl+0x60>
                return rc;
   2e382:	4680      	mov	r8, r0
   2e384:	e003      	b.n	2e38e <log_fcb_walk_impl+0x60>
    return 0;
   2e386:	46d0      	mov	r8, sl
   2e388:	e001      	b.n	2e38e <log_fcb_walk_impl+0x60>
    switch (rc) {
   2e38a:	f04f 0800 	mov.w	r8, #0
}
   2e38e:	4640      	mov	r0, r8
   2e390:	b005      	add	sp, #20
   2e392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e396 <log_fcb_walk_area>:
{
   2e396:	b508      	push	{r3, lr}
    return log_fcb_walk_impl(log, walk_func, log_offset, true);
   2e398:	2301      	movs	r3, #1
   2e39a:	f7ff ffc8 	bl	2e32e <log_fcb_walk_impl>
}
   2e39e:	bd08      	pop	{r3, pc}

0002e3a0 <log_fcb_walk>:
{
   2e3a0:	b508      	push	{r3, lr}
    return log_fcb_walk_impl(log, walk_func, log_offset, false);
   2e3a2:	2300      	movs	r3, #0
   2e3a4:	f7ff ffc3 	bl	2e32e <log_fcb_walk_impl>
}
   2e3a8:	bd08      	pop	{r3, pc}

0002e3aa <log_fcb_write_mbuf>:
{
   2e3aa:	b538      	push	{r3, r4, r5, lr}
   2e3ac:	4605      	mov	r5, r0
   2e3ae:	460c      	mov	r4, r1
    while (om) {
   2e3b0:	b164      	cbz	r4, 2e3cc <log_fcb_write_mbuf+0x22>
        rc = flash_area_write(loc->fe_area, loc->fe_data_off, om->om_data,
   2e3b2:	88e3      	ldrh	r3, [r4, #6]
   2e3b4:	6822      	ldr	r2, [r4, #0]
   2e3b6:	68a9      	ldr	r1, [r5, #8]
   2e3b8:	6828      	ldr	r0, [r5, #0]
   2e3ba:	f7ea fbca 	bl	18b52 <flash_area_write>
        if (rc != 0) {
   2e3be:	b938      	cbnz	r0, 2e3d0 <log_fcb_write_mbuf+0x26>
        loc->fe_data_off += om->om_len;
   2e3c0:	88e2      	ldrh	r2, [r4, #6]
   2e3c2:	68ab      	ldr	r3, [r5, #8]
   2e3c4:	4413      	add	r3, r2
   2e3c6:	60ab      	str	r3, [r5, #8]
        om = SLIST_NEXT(om, om_next);
   2e3c8:	68e4      	ldr	r4, [r4, #12]
   2e3ca:	e7f1      	b.n	2e3b0 <log_fcb_write_mbuf+0x6>
    return 0;
   2e3cc:	2000      	movs	r0, #0
}
   2e3ce:	bd38      	pop	{r3, r4, r5, pc}
            return SYS_EIO;
   2e3d0:	f06f 0004 	mvn.w	r0, #4
   2e3d4:	e7fb      	b.n	2e3ce <log_fcb_write_mbuf+0x24>

0002e3d6 <log_fcb_hdr_body_bytes>:
{
   2e3d6:	b508      	push	{r3, lr}
   2e3d8:	4603      	mov	r3, r0
    assert((align & (align - 1)) == 0);
   2e3da:	3801      	subs	r0, #1
   2e3dc:	4018      	ands	r0, r3
   2e3de:	d105      	bne.n	2e3ec <log_fcb_hdr_body_bytes+0x16>
    mod = hdr_len & (align - 1);
   2e3e0:	1e5a      	subs	r2, r3, #1
   2e3e2:	b252      	sxtb	r2, r2
    if (mod == 0) {
   2e3e4:	400a      	ands	r2, r1
   2e3e6:	d000      	beq.n	2e3ea <log_fcb_hdr_body_bytes+0x14>
    return align - mod;
   2e3e8:	1a98      	subs	r0, r3, r2
}
   2e3ea:	bd08      	pop	{r3, pc}
    assert((align & (align - 1)) == 0);
   2e3ec:	f7e6 f93a 	bl	14664 <hal_debugger_connected>
   2e3f0:	b100      	cbz	r0, 2e3f4 <log_fcb_hdr_body_bytes+0x1e>
   2e3f2:	be01      	bkpt	0x0001
   2e3f4:	2300      	movs	r3, #0
   2e3f6:	461a      	mov	r2, r3
   2e3f8:	4619      	mov	r1, r3
   2e3fa:	4618      	mov	r0, r3
   2e3fc:	f7e6 fcd2 	bl	14da4 <__assert_func>

0002e400 <log_fcb_read>:
{
   2e400:	b538      	push	{r3, r4, r5, lr}
   2e402:	460d      	mov	r5, r1
   2e404:	4619      	mov	r1, r3
   2e406:	f8bd 4010 	ldrh.w	r4, [sp, #16]
    if (offset + len > loc->fe_data_len) {
   2e40a:	4423      	add	r3, r4
   2e40c:	89a8      	ldrh	r0, [r5, #12]
   2e40e:	4283      	cmp	r3, r0
   2e410:	dd01      	ble.n	2e416 <log_fcb_read+0x16>
        len = loc->fe_data_len - offset;
   2e412:	1a40      	subs	r0, r0, r1
   2e414:	b284      	uxth	r4, r0
    rc = flash_area_read(loc->fe_area, loc->fe_data_off + offset, buf, len);
   2e416:	68a8      	ldr	r0, [r5, #8]
   2e418:	4623      	mov	r3, r4
   2e41a:	4401      	add	r1, r0
   2e41c:	6828      	ldr	r0, [r5, #0]
   2e41e:	f7ea fb85 	bl	18b2c <flash_area_read>
    if (rc == 0) {
   2e422:	b908      	cbnz	r0, 2e428 <log_fcb_read+0x28>
        return len;
   2e424:	4620      	mov	r0, r4
}
   2e426:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
   2e428:	2000      	movs	r0, #0
   2e42a:	e7fc      	b.n	2e426 <log_fcb_read+0x26>

0002e42c <log_fcb_copy_entry>:
 * @return 0 on success; non-zero on error
 */
static int
log_fcb_copy_entry(struct log *log, struct fcb_entry *entry,
                   struct fcb *dst_fcb)
{
   2e42c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e42e:	b0cd      	sub	sp, #308	; 0x134
   2e430:	4604      	mov	r4, r0
   2e432:	460e      	mov	r6, r1
   2e434:	4615      	mov	r5, r2
    uint16_t hdr_len;
    int dlen;
    int rc;
    struct fcb *fcb_tmp;

    rc = log_fcb_read(log, entry, &ueh, 0, LOG_BASE_ENTRY_HDR_SIZE);
   2e436:	230f      	movs	r3, #15
   2e438:	9300      	str	r3, [sp, #0]
   2e43a:	2300      	movs	r3, #0
   2e43c:	aa47      	add	r2, sp, #284	; 0x11c
   2e43e:	f7ff ffdf 	bl	2e400 <log_fcb_read>

    if (rc != LOG_BASE_ENTRY_HDR_SIZE) {
   2e442:	280f      	cmp	r0, #15
   2e444:	d001      	beq.n	2e44a <log_fcb_copy_entry+0x1e>
        goto err;
    }

err:
    return (rc);
}
   2e446:	b04d      	add	sp, #308	; 0x134
   2e448:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdr_len = log_hdr_len(&ueh);
   2e44a:	a847      	add	r0, sp, #284	; 0x11c
   2e44c:	f7ea fe38 	bl	190c0 <log_hdr_len>
    dlen = min(entry->fe_data_len, MYNEWT_VAL(LOG_FCB_COPY_MAX_ENTRY_LEN) +
   2e450:	f100 03ff 	add.w	r3, r0, #255	; 0xff
   2e454:	89b7      	ldrh	r7, [r6, #12]
   2e456:	42bb      	cmp	r3, r7
   2e458:	da01      	bge.n	2e45e <log_fcb_copy_entry+0x32>
   2e45a:	f500 7780 	add.w	r7, r0, #256	; 0x100
    rc = log_fcb_read(log, entry, data, 0, dlen);
   2e45e:	b2bb      	uxth	r3, r7
   2e460:	9300      	str	r3, [sp, #0]
   2e462:	2300      	movs	r3, #0
   2e464:	aa02      	add	r2, sp, #8
   2e466:	4631      	mov	r1, r6
   2e468:	4620      	mov	r0, r4
   2e46a:	f7ff ffc9 	bl	2e400 <log_fcb_read>
    if (rc < 0) {
   2e46e:	2800      	cmp	r0, #0
   2e470:	dbe9      	blt.n	2e446 <log_fcb_copy_entry+0x1a>
    fcb_tmp = &((struct fcb_log *)log->l_arg)->fl_fcb;
   2e472:	68a6      	ldr	r6, [r4, #8]
    log->l_arg = dst_fcb;
   2e474:	60a5      	str	r5, [r4, #8]
    rc = log_fcb_append(log, data, dlen);
   2e476:	463a      	mov	r2, r7
   2e478:	a902      	add	r1, sp, #8
   2e47a:	4620      	mov	r0, r4
   2e47c:	f000 f97f 	bl	2e77e <log_fcb_append>
    log->l_arg = fcb_tmp;
   2e480:	60a6      	str	r6, [r4, #8]
    return (rc);
   2e482:	e7e0      	b.n	2e446 <log_fcb_copy_entry+0x1a>

0002e484 <log_fcb_copy>:
 * @return 0 on success; non-zero on error
 */
static int
log_fcb_copy(struct log *log, struct fcb *src_fcb, struct fcb *dst_fcb,
             uint32_t offset)
{
   2e484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2e488:	b085      	sub	sp, #20
   2e48a:	4681      	mov	r9, r0
   2e48c:	460d      	mov	r5, r1
   2e48e:	4690      	mov	r8, r2
   2e490:	461e      	mov	r6, r3
    struct fcb_entry entry;
    int rc;

    rc = 0;
    memset(&entry, 0, sizeof(entry));
   2e492:	2700      	movs	r7, #0
   2e494:	9700      	str	r7, [sp, #0]
   2e496:	9701      	str	r7, [sp, #4]
   2e498:	9702      	str	r7, [sp, #8]
   2e49a:	9703      	str	r7, [sp, #12]
    while (!fcb_getnext(src_fcb, &entry)) {
   2e49c:	4669      	mov	r1, sp
   2e49e:	4628      	mov	r0, r5
   2e4a0:	f7fc f892 	bl	2a5c8 <fcb_getnext>
   2e4a4:	b950      	cbnz	r0, 2e4bc <log_fcb_copy+0x38>
        if (entry.fe_elem_off < offset) {
   2e4a6:	9c01      	ldr	r4, [sp, #4]
   2e4a8:	42b4      	cmp	r4, r6
   2e4aa:	d3f7      	bcc.n	2e49c <log_fcb_copy+0x18>
            continue;
        }
        rc = log_fcb_copy_entry(log, &entry, dst_fcb);
   2e4ac:	4642      	mov	r2, r8
   2e4ae:	4669      	mov	r1, sp
   2e4b0:	4648      	mov	r0, r9
   2e4b2:	f7ff ffbb 	bl	2e42c <log_fcb_copy_entry>
        if (rc) {
   2e4b6:	4607      	mov	r7, r0
   2e4b8:	2800      	cmp	r0, #0
   2e4ba:	d0ef      	beq.n	2e49c <log_fcb_copy+0x18>
            break;
        }
    }

    return (rc);
}
   2e4bc:	4638      	mov	r0, r7
   2e4be:	b005      	add	sp, #20
   2e4c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002e4c4 <log_fcb_rtr_erase>:
    struct fcb_entry entry;
    int rc;
    struct flash_area sector;

    rc = 0;
    if (!log) {
   2e4c4:	2800      	cmp	r0, #0
   2e4c6:	d045      	beq.n	2e554 <log_fcb_rtr_erase+0x90>
{
   2e4c8:	b530      	push	{r4, r5, lr}
   2e4ca:	b095      	sub	sp, #84	; 0x54
   2e4cc:	4604      	mov	r4, r0
        rc = -1;
        goto err;
    }

    fcb_log = log->l_arg;
   2e4ce:	6885      	ldr	r5, [r0, #8]
    fcb = &fcb_log->fl_fcb;

    memset(&fcb_scratch, 0, sizeof(fcb_scratch));
   2e4d0:	2230      	movs	r2, #48	; 0x30
   2e4d2:	2100      	movs	r1, #0
   2e4d4:	a808      	add	r0, sp, #32
   2e4d6:	f7e8 fb22 	bl	16b1e <memset>

    if (flash_area_open(FLASH_AREA_IMAGE_SCRATCH, &ptr)) {
   2e4da:	a907      	add	r1, sp, #28
   2e4dc:	2003      	movs	r0, #3
   2e4de:	f7ea facd 	bl	18a7c <flash_area_open>
   2e4e2:	b110      	cbz	r0, 2e4ea <log_fcb_rtr_erase+0x26>
    rc = 0;
   2e4e4:	2000      	movs	r0, #0
    /* Copy back from scratch */
    rc = log_fcb_copy(log, &fcb_scratch, fcb, 0);

err:
    return (rc);
}
   2e4e6:	b015      	add	sp, #84	; 0x54
   2e4e8:	bd30      	pop	{r4, r5, pc}
    sector = *ptr;
   2e4ea:	9a07      	ldr	r2, [sp, #28]
   2e4ec:	466b      	mov	r3, sp
   2e4ee:	ca07      	ldmia	r2, {r0, r1, r2}
   2e4f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    fcb_scratch.f_sectors = &sector;
   2e4f4:	930a      	str	r3, [sp, #40]	; 0x28
    fcb_scratch.f_sector_cnt = 1;
   2e4f6:	2201      	movs	r2, #1
   2e4f8:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    fcb_scratch.f_magic = 0x7EADBADF;
   2e4fc:	4a17      	ldr	r2, [pc, #92]	; (2e55c <log_fcb_rtr_erase+0x98>)
   2e4fe:	9208      	str	r2, [sp, #32]
    fcb_scratch.f_version = g_log_info.li_version;
   2e500:	4a17      	ldr	r2, [pc, #92]	; (2e560 <log_fcb_rtr_erase+0x9c>)
   2e502:	7912      	ldrb	r2, [r2, #4]
   2e504:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    flash_area_erase(&sector, 0, sector.fa_size);
   2e508:	9a02      	ldr	r2, [sp, #8]
   2e50a:	2100      	movs	r1, #0
   2e50c:	4618      	mov	r0, r3
   2e50e:	f7ea fb33 	bl	18b78 <flash_area_erase>
    rc = fcb_init(&fcb_scratch);
   2e512:	a808      	add	r0, sp, #32
   2e514:	f7fb fdba 	bl	2a08c <fcb_init>
    if (rc) {
   2e518:	2800      	cmp	r0, #0
   2e51a:	d1e4      	bne.n	2e4e6 <log_fcb_rtr_erase+0x22>
    rc = fcb_offset_last_n(fcb, fcb_log->fl_entries, &entry);
   2e51c:	aa03      	add	r2, sp, #12
   2e51e:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
   2e522:	4628      	mov	r0, r5
   2e524:	f7fb fe48 	bl	2a1b8 <fcb_offset_last_n>
    if (rc) {
   2e528:	2800      	cmp	r0, #0
   2e52a:	d1dc      	bne.n	2e4e6 <log_fcb_rtr_erase+0x22>
    rc = log_fcb_copy(log, fcb, &fcb_scratch, entry.fe_elem_off);
   2e52c:	9b04      	ldr	r3, [sp, #16]
   2e52e:	aa08      	add	r2, sp, #32
   2e530:	4629      	mov	r1, r5
   2e532:	4620      	mov	r0, r4
   2e534:	f7ff ffa6 	bl	2e484 <log_fcb_copy>
    if (rc) {
   2e538:	2800      	cmp	r0, #0
   2e53a:	d1d4      	bne.n	2e4e6 <log_fcb_rtr_erase+0x22>
    rc = log_fcb_flush(log);
   2e53c:	4620      	mov	r0, r4
   2e53e:	f7ff fe42 	bl	2e1c6 <log_fcb_flush>
   2e542:	4603      	mov	r3, r0
    if (rc) {
   2e544:	2800      	cmp	r0, #0
   2e546:	d1ce      	bne.n	2e4e6 <log_fcb_rtr_erase+0x22>
    rc = log_fcb_copy(log, &fcb_scratch, fcb, 0);
   2e548:	462a      	mov	r2, r5
   2e54a:	a908      	add	r1, sp, #32
   2e54c:	4620      	mov	r0, r4
   2e54e:	f7ff ff99 	bl	2e484 <log_fcb_copy>
   2e552:	e7c8      	b.n	2e4e6 <log_fcb_rtr_erase+0x22>
        rc = -1;
   2e554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2e558:	4770      	bx	lr
   2e55a:	bf00      	nop
   2e55c:	7eadbadf 	.word	0x7eadbadf
   2e560:	10003198 	.word	0x10003198

0002e564 <log_fcb_start_append>:
{
   2e564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e568:	4604      	mov	r4, r0
   2e56a:	460f      	mov	r7, r1
   2e56c:	4616      	mov	r6, r2
    fcb_log = (struct fcb_log *)log->l_arg;
   2e56e:	f8d0 8008 	ldr.w	r8, [r0, #8]
    fcb = &fcb_log->fl_fcb;
   2e572:	4645      	mov	r5, r8
   2e574:	e00d      	b.n	2e592 <log_fcb_start_append+0x2e>
            rc = log_fcb_rtr_erase(log);
   2e576:	4620      	mov	r0, r4
   2e578:	f7ff ffa4 	bl	2e4c4 <log_fcb_rtr_erase>
            if (rc) {
   2e57c:	4603      	mov	r3, r0
   2e57e:	b140      	cbz	r0, 2e592 <log_fcb_start_append+0x2e>
}
   2e580:	4618      	mov	r0, r3
   2e582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = fcb_rotate(fcb);
   2e586:	4628      	mov	r0, r5
   2e588:	f7fc f838 	bl	2a5fc <fcb_rotate>
        if (rc) {
   2e58c:	4603      	mov	r3, r0
   2e58e:	2800      	cmp	r0, #0
   2e590:	d1f6      	bne.n	2e580 <log_fcb_start_append+0x1c>
        rc = fcb_append(fcb, len, loc);
   2e592:	4632      	mov	r2, r6
   2e594:	b2b9      	uxth	r1, r7
   2e596:	4628      	mov	r0, r5
   2e598:	f7fb fe78 	bl	2a28c <fcb_append>
        if (rc == 0) {
   2e59c:	4603      	mov	r3, r0
   2e59e:	2800      	cmp	r0, #0
   2e5a0:	d0ee      	beq.n	2e580 <log_fcb_start_append+0x1c>
        if (rc != FCB_ERR_NOSPACE) {
   2e5a2:	f110 0f04 	cmn.w	r0, #4
   2e5a6:	d1eb      	bne.n	2e580 <log_fcb_start_append+0x1c>
        if (fcb_log->fl_entries) {
   2e5a8:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
   2e5ac:	2b00      	cmp	r3, #0
   2e5ae:	d1e2      	bne.n	2e576 <log_fcb_start_append+0x12>
        if (log->l_rotate_notify_cb != NULL) {
   2e5b0:	6963      	ldr	r3, [r4, #20]
   2e5b2:	2b00      	cmp	r3, #0
   2e5b4:	d0e7      	beq.n	2e586 <log_fcb_start_append+0x22>
            fcb_append_to_scratch(fcb);
   2e5b6:	4628      	mov	r0, r5
   2e5b8:	f7fb fe4f 	bl	2a25a <fcb_append_to_scratch>
            log->l_rotate_notify_cb(log);
   2e5bc:	6963      	ldr	r3, [r4, #20]
   2e5be:	4620      	mov	r0, r4
   2e5c0:	4798      	blx	r3
   2e5c2:	e7e0      	b.n	2e586 <log_fcb_start_append+0x22>

0002e5c4 <log_fcb_append_mbuf_body>:
{
   2e5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e5c8:	b084      	sub	sp, #16
    fcb_log = (struct fcb_log *)log->l_arg;
   2e5ca:	f8d0 8008 	ldr.w	r8, [r0, #8]
    if (fcb->f_align != 1) {
   2e5ce:	f898 302e 	ldrb.w	r3, [r8, #46]	; 0x2e
   2e5d2:	2b01      	cmp	r3, #1
   2e5d4:	d13d      	bne.n	2e652 <log_fcb_append_mbuf_body+0x8e>
   2e5d6:	4604      	mov	r4, r0
   2e5d8:	460d      	mov	r5, r1
   2e5da:	4616      	mov	r6, r2
    len = log_hdr_len(hdr) + os_mbuf_len(om);
   2e5dc:	4608      	mov	r0, r1
   2e5de:	f7ea fd6f 	bl	190c0 <log_hdr_len>
   2e5e2:	4607      	mov	r7, r0
   2e5e4:	4630      	mov	r0, r6
   2e5e6:	f7e7 f855 	bl	15694 <os_mbuf_len>
    rc = log_fcb_start_append(log, len, &loc);
   2e5ea:	466a      	mov	r2, sp
   2e5ec:	1839      	adds	r1, r7, r0
   2e5ee:	4620      	mov	r0, r4
   2e5f0:	f7ff ffb8 	bl	2e564 <log_fcb_start_append>
    if (rc != 0) {
   2e5f4:	4603      	mov	r3, r0
   2e5f6:	b118      	cbz	r0, 2e600 <log_fcb_append_mbuf_body+0x3c>
}
   2e5f8:	4618      	mov	r0, r3
   2e5fa:	b004      	add	sp, #16
   2e5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = flash_area_write(loc.fe_area, loc.fe_data_off, hdr,
   2e600:	230f      	movs	r3, #15
   2e602:	462a      	mov	r2, r5
   2e604:	9902      	ldr	r1, [sp, #8]
   2e606:	9800      	ldr	r0, [sp, #0]
   2e608:	f7ea faa3 	bl	18b52 <flash_area_write>
    if (rc != 0) {
   2e60c:	4603      	mov	r3, r0
   2e60e:	2800      	cmp	r0, #0
   2e610:	d1f2      	bne.n	2e5f8 <log_fcb_append_mbuf_body+0x34>
    loc.fe_data_off += LOG_BASE_ENTRY_HDR_SIZE;
   2e612:	9902      	ldr	r1, [sp, #8]
   2e614:	310f      	adds	r1, #15
   2e616:	9102      	str	r1, [sp, #8]
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   2e618:	7bab      	ldrb	r3, [r5, #14]
   2e61a:	f013 0f10 	tst.w	r3, #16
   2e61e:	d00b      	beq.n	2e638 <log_fcb_append_mbuf_body+0x74>
        rc = flash_area_write(loc.fe_area, loc.fe_data_off, hdr->ue_imghash,
   2e620:	2304      	movs	r3, #4
   2e622:	f105 020f 	add.w	r2, r5, #15
   2e626:	9800      	ldr	r0, [sp, #0]
   2e628:	f7ea fa93 	bl	18b52 <flash_area_write>
        if (rc != 0) {
   2e62c:	4603      	mov	r3, r0
   2e62e:	2800      	cmp	r0, #0
   2e630:	d1e2      	bne.n	2e5f8 <log_fcb_append_mbuf_body+0x34>
        loc.fe_data_off += LOG_IMG_HASHLEN;
   2e632:	9b02      	ldr	r3, [sp, #8]
   2e634:	3304      	adds	r3, #4
   2e636:	9302      	str	r3, [sp, #8]
    rc = log_fcb_write_mbuf(&loc, om);
   2e638:	4631      	mov	r1, r6
   2e63a:	4668      	mov	r0, sp
   2e63c:	f7ff feb5 	bl	2e3aa <log_fcb_write_mbuf>
    if (rc != 0) {
   2e640:	4603      	mov	r3, r0
   2e642:	2800      	cmp	r0, #0
   2e644:	d1d8      	bne.n	2e5f8 <log_fcb_append_mbuf_body+0x34>
    rc = fcb_append_finish(fcb, &loc);
   2e646:	4669      	mov	r1, sp
   2e648:	4640      	mov	r0, r8
   2e64a:	f7fb fe9c 	bl	2a386 <fcb_append_finish>
   2e64e:	4603      	mov	r3, r0
    if (rc != 0) {
   2e650:	e7d2      	b.n	2e5f8 <log_fcb_append_mbuf_body+0x34>
        return SYS_ENOTSUP;
   2e652:	f06f 030b 	mvn.w	r3, #11
   2e656:	e7cf      	b.n	2e5f8 <log_fcb_append_mbuf_body+0x34>

0002e658 <log_fcb_append_mbuf>:
{
   2e658:	b570      	push	{r4, r5, r6, lr}
   2e65a:	b086      	sub	sp, #24
   2e65c:	4606      	mov	r6, r0
   2e65e:	460c      	mov	r4, r1
    mlen = os_mbuf_len(om);
   2e660:	4608      	mov	r0, r1
   2e662:	f7e7 f817 	bl	15694 <os_mbuf_len>
    if (mlen < LOG_BASE_ENTRY_HDR_SIZE) {
   2e666:	280e      	cmp	r0, #14
   2e668:	d928      	bls.n	2e6bc <log_fcb_append_mbuf+0x64>
    om = os_mbuf_pullup(om, LOG_BASE_ENTRY_HDR_SIZE);
   2e66a:	210f      	movs	r1, #15
   2e66c:	4620      	mov	r0, r4
   2e66e:	f7e7 fa5c 	bl	15b2a <os_mbuf_pullup>
   2e672:	4604      	mov	r4, r0
    hdr_len = log_hdr_len((struct log_entry_hdr *)om->om_data);
   2e674:	6800      	ldr	r0, [r0, #0]
   2e676:	f7ea fd23 	bl	190c0 <log_hdr_len>
   2e67a:	4605      	mov	r5, r0
    om = os_mbuf_pullup(om, hdr_len);
   2e67c:	4601      	mov	r1, r0
   2e67e:	4620      	mov	r0, r4
   2e680:	f7e7 fa53 	bl	15b2a <os_mbuf_pullup>
   2e684:	4604      	mov	r4, r0
    memcpy(&hdr, om->om_data, hdr_len);
   2e686:	462a      	mov	r2, r5
   2e688:	6801      	ldr	r1, [r0, #0]
   2e68a:	a801      	add	r0, sp, #4
   2e68c:	f7e8 fa22 	bl	16ad4 <memcpy>
    os_mbuf_adj(om, hdr_len);
   2e690:	4629      	mov	r1, r5
   2e692:	4620      	mov	r0, r4
   2e694:	f7e7 f8c5 	bl	15822 <os_mbuf_adj>
    rc = log_fcb_append_mbuf_body(log, &hdr, om);
   2e698:	4622      	mov	r2, r4
   2e69a:	a901      	add	r1, sp, #4
   2e69c:	4630      	mov	r0, r6
   2e69e:	f7ff ff91 	bl	2e5c4 <log_fcb_append_mbuf_body>
   2e6a2:	4606      	mov	r6, r0
    os_mbuf_prepend(om, hdr_len);
   2e6a4:	4629      	mov	r1, r5
   2e6a6:	4620      	mov	r0, r4
   2e6a8:	f7e7 f949 	bl	1593e <os_mbuf_prepend>
    memcpy(om->om_data, &hdr, hdr_len);
   2e6ac:	462a      	mov	r2, r5
   2e6ae:	a901      	add	r1, sp, #4
   2e6b0:	6820      	ldr	r0, [r4, #0]
   2e6b2:	f7e8 fa0f 	bl	16ad4 <memcpy>
}
   2e6b6:	4630      	mov	r0, r6
   2e6b8:	b006      	add	sp, #24
   2e6ba:	bd70      	pop	{r4, r5, r6, pc}
        return SYS_ENOMEM;
   2e6bc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2e6c0:	e7f9      	b.n	2e6b6 <log_fcb_append_mbuf+0x5e>

0002e6c2 <log_fcb_append_body>:
{
   2e6c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e6c6:	b08d      	sub	sp, #52	; 0x34
   2e6c8:	461d      	mov	r5, r3
    fcb_log = (struct fcb_log *)log->l_arg;
   2e6ca:	f8d0 9008 	ldr.w	r9, [r0, #8]
    if (fcb->f_align > LOG_FCB_MAX_ALIGN) {
   2e6ce:	f899 302e 	ldrb.w	r3, [r9, #46]	; 0x2e
   2e6d2:	2b08      	cmp	r3, #8
   2e6d4:	d850      	bhi.n	2e778 <log_fcb_append_body+0xb6>
   2e6d6:	4606      	mov	r6, r0
   2e6d8:	460c      	mov	r4, r1
   2e6da:	4690      	mov	r8, r2
    hdr_len = log_hdr_len(hdr);
   2e6dc:	4608      	mov	r0, r1
   2e6de:	f7ea fcef 	bl	190c0 <log_hdr_len>
   2e6e2:	4607      	mov	r7, r0
    rc = log_fcb_start_append(log, hdr_len + body_len, &loc);
   2e6e4:	eb00 0a05 	add.w	sl, r0, r5
   2e6e8:	aa01      	add	r2, sp, #4
   2e6ea:	4651      	mov	r1, sl
   2e6ec:	4630      	mov	r0, r6
   2e6ee:	f7ff ff39 	bl	2e564 <log_fcb_start_append>
    if (rc != 0) {
   2e6f2:	4603      	mov	r3, r0
   2e6f4:	b118      	cbz	r0, 2e6fe <log_fcb_append_body+0x3c>
}
   2e6f6:	4618      	mov	r0, r3
   2e6f8:	b00d      	add	sp, #52	; 0x34
   2e6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdr_alignment = log_fcb_hdr_body_bytes(fcb->f_align, hdr_len);
   2e6fe:	b2f9      	uxtb	r1, r7
   2e700:	f899 002e 	ldrb.w	r0, [r9, #46]	; 0x2e
   2e704:	f7ff fe67 	bl	2e3d6 <log_fcb_hdr_body_bytes>
   2e708:	4683      	mov	fp, r0
    if (hdr_alignment > body_len) {
   2e70a:	4285      	cmp	r5, r0
   2e70c:	db01      	blt.n	2e712 <log_fcb_append_body+0x50>
        chunk_sz = hdr_len + hdr_alignment;
   2e70e:	eb07 0a00 	add.w	sl, r7, r0
    memcpy(buf, hdr, LOG_BASE_ENTRY_HDR_SIZE);
   2e712:	ae05      	add	r6, sp, #20
   2e714:	6820      	ldr	r0, [r4, #0]
   2e716:	6861      	ldr	r1, [r4, #4]
   2e718:	68a2      	ldr	r2, [r4, #8]
   2e71a:	c607      	stmia	r6!, {r0, r1, r2}
   2e71c:	89a2      	ldrh	r2, [r4, #12]
   2e71e:	7ba3      	ldrb	r3, [r4, #14]
   2e720:	8032      	strh	r2, [r6, #0]
   2e722:	70b3      	strb	r3, [r6, #2]
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   2e724:	f013 0f10 	tst.w	r3, #16
   2e728:	d003      	beq.n	2e732 <log_fcb_append_body+0x70>
        memcpy(buf + LOG_BASE_ENTRY_HDR_SIZE, hdr->ue_imghash, LOG_IMG_HASHLEN);
   2e72a:	f8d4 300f 	ldr.w	r3, [r4, #15]
   2e72e:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    memcpy(buf + hdr_len, u8p, hdr_alignment);
   2e732:	465a      	mov	r2, fp
   2e734:	4641      	mov	r1, r8
   2e736:	ab05      	add	r3, sp, #20
   2e738:	19d8      	adds	r0, r3, r7
   2e73a:	f7e8 f9cb 	bl	16ad4 <memcpy>
    rc = flash_area_write(loc.fe_area, loc.fe_data_off, buf, chunk_sz);
   2e73e:	4653      	mov	r3, sl
   2e740:	aa05      	add	r2, sp, #20
   2e742:	9903      	ldr	r1, [sp, #12]
   2e744:	9801      	ldr	r0, [sp, #4]
   2e746:	f7ea fa04 	bl	18b52 <flash_area_write>
    if (rc != 0) {
   2e74a:	4603      	mov	r3, r0
   2e74c:	2800      	cmp	r0, #0
   2e74e:	d1d2      	bne.n	2e6f6 <log_fcb_append_body+0x34>
    u8p += hdr_alignment;
   2e750:	eb08 020b 	add.w	r2, r8, fp
    body_len -= hdr_alignment;
   2e754:	eba5 030b 	sub.w	r3, r5, fp
    if (body_len > 0) {
   2e758:	2b00      	cmp	r3, #0
   2e75a:	dd07      	ble.n	2e76c <log_fcb_append_body+0xaa>
        rc = flash_area_write(loc.fe_area, loc.fe_data_off + chunk_sz, u8p,
   2e75c:	9903      	ldr	r1, [sp, #12]
   2e75e:	4451      	add	r1, sl
   2e760:	9801      	ldr	r0, [sp, #4]
   2e762:	f7ea f9f6 	bl	18b52 <flash_area_write>
        if (rc != 0) {
   2e766:	4603      	mov	r3, r0
   2e768:	2800      	cmp	r0, #0
   2e76a:	d1c4      	bne.n	2e6f6 <log_fcb_append_body+0x34>
    rc = fcb_append_finish(fcb, &loc);
   2e76c:	a901      	add	r1, sp, #4
   2e76e:	4648      	mov	r0, r9
   2e770:	f7fb fe09 	bl	2a386 <fcb_append_finish>
   2e774:	4603      	mov	r3, r0
    if (rc != 0) {
   2e776:	e7be      	b.n	2e6f6 <log_fcb_append_body+0x34>
        return SYS_ENOTSUP;
   2e778:	f06f 030b 	mvn.w	r3, #11
   2e77c:	e7bb      	b.n	2e6f6 <log_fcb_append_body+0x34>

0002e77e <log_fcb_append>:
{
   2e77e:	b570      	push	{r4, r5, r6, lr}
   2e780:	4605      	mov	r5, r0
   2e782:	460c      	mov	r4, r1
   2e784:	4616      	mov	r6, r2
    hdr_len = log_hdr_len(buf);
   2e786:	4608      	mov	r0, r1
   2e788:	f7ea fc9a 	bl	190c0 <log_hdr_len>
    return log_fcb_append_body(log, buf, (uint8_t *)buf + hdr_len,
   2e78c:	1a33      	subs	r3, r6, r0
   2e78e:	1822      	adds	r2, r4, r0
   2e790:	4621      	mov	r1, r4
   2e792:	4628      	mov	r0, r5
   2e794:	f7ff ff95 	bl	2e6c2 <log_fcb_append_body>
}
   2e798:	bd70      	pop	{r4, r5, r6, pc}

0002e79a <log_fcb_read_mbuf>:
{
   2e79a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2e79e:	b0a1      	sub	sp, #132	; 0x84
   2e7a0:	460f      	mov	r7, r1
   2e7a2:	4690      	mov	r8, r2
   2e7a4:	461e      	mov	r6, r3
   2e7a6:	f8bd 90a0 	ldrh.w	r9, [sp, #160]	; 0xa0
    if (offset + len > loc->fe_data_len) {
   2e7aa:	eb03 0209 	add.w	r2, r3, r9
   2e7ae:	898b      	ldrh	r3, [r1, #12]
   2e7b0:	429a      	cmp	r2, r3
   2e7b2:	dd03      	ble.n	2e7bc <log_fcb_read_mbuf+0x22>
        len = loc->fe_data_len - offset;
   2e7b4:	eba3 0906 	sub.w	r9, r3, r6
   2e7b8:	fa1f f989 	uxth.w	r9, r9
    rem_len = len;
   2e7bc:	464d      	mov	r5, r9
    while (rem_len > 0) {
   2e7be:	e003      	b.n	2e7c8 <log_fcb_read_mbuf+0x2e>
        rem_len -= read_len;
   2e7c0:	1b2d      	subs	r5, r5, r4
   2e7c2:	b2ad      	uxth	r5, r5
        offset += read_len;
   2e7c4:	4434      	add	r4, r6
   2e7c6:	b2a6      	uxth	r6, r4
    while (rem_len > 0) {
   2e7c8:	b19d      	cbz	r5, 2e7f2 <log_fcb_read_mbuf+0x58>
        read_len = min(rem_len, sizeof(data));
   2e7ca:	462c      	mov	r4, r5
   2e7cc:	2d80      	cmp	r5, #128	; 0x80
   2e7ce:	bf28      	it	cs
   2e7d0:	2480      	movcs	r4, #128	; 0x80
   2e7d2:	b2a4      	uxth	r4, r4
        rc = flash_area_read(loc->fe_area, loc->fe_data_off + offset, data,
   2e7d4:	68b9      	ldr	r1, [r7, #8]
   2e7d6:	4623      	mov	r3, r4
   2e7d8:	466a      	mov	r2, sp
   2e7da:	4431      	add	r1, r6
   2e7dc:	6838      	ldr	r0, [r7, #0]
   2e7de:	f7ea f9a5 	bl	18b2c <flash_area_read>
        if (rc) {
   2e7e2:	b930      	cbnz	r0, 2e7f2 <log_fcb_read_mbuf+0x58>
        rc = os_mbuf_append(om, data, read_len);
   2e7e4:	4622      	mov	r2, r4
   2e7e6:	4669      	mov	r1, sp
   2e7e8:	4640      	mov	r0, r8
   2e7ea:	f7e6 ff5c 	bl	156a6 <os_mbuf_append>
        if (rc) {
   2e7ee:	2800      	cmp	r0, #0
   2e7f0:	d0e6      	beq.n	2e7c0 <log_fcb_read_mbuf+0x26>
}
   2e7f2:	eba9 0005 	sub.w	r0, r9, r5
   2e7f6:	b021      	add	sp, #132	; 0x84
   2e7f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002e7fc <crc8_init>:

uint8_t
crc8_init(void)
{
    return 0xff;
}
   2e7fc:	20ff      	movs	r0, #255	; 0xff
   2e7fe:	4770      	bx	lr

0002e800 <crc8_calc>:

uint8_t
crc8_calc(uint8_t val, void *buf, int cnt)
{
   2e800:	b430      	push	{r4, r5}
	int i;
	uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
   2e802:	2400      	movs	r4, #0
   2e804:	4294      	cmp	r4, r2
   2e806:	da0f      	bge.n	2e828 <crc8_calc+0x28>
		val ^= p[i];
   2e808:	5d0b      	ldrb	r3, [r1, r4]
   2e80a:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_small_table[val >> 4];
   2e80c:	0918      	lsrs	r0, r3, #4
   2e80e:	4d07      	ldr	r5, [pc, #28]	; (2e82c <crc8_calc+0x2c>)
   2e810:	5628      	ldrsb	r0, [r5, r0]
   2e812:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   2e816:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_small_table[val >> 4];
   2e818:	f3c0 1003 	ubfx	r0, r0, #4, #4
   2e81c:	5628      	ldrsb	r0, [r5, r0]
   2e81e:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   2e822:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   2e824:	3401      	adds	r4, #1
   2e826:	e7ed      	b.n	2e804 <crc8_calc+0x4>
	}
	return val;
}
   2e828:	bc30      	pop	{r4, r5}
   2e82a:	4770      	bx	lr
   2e82c:	00033b08 	.word	0x00033b08

0002e830 <cbor_cnt_writer>:
};

static inline int
cbor_cnt_writer(struct cbor_encoder_writer *arg, const char *data, int len) {
    struct CborCntWriter *cb = (struct CborCntWriter *) arg;
    cb->enc.bytes_written += len;
   2e830:	6843      	ldr	r3, [r0, #4]
   2e832:	4413      	add	r3, r2
   2e834:	6043      	str	r3, [r0, #4]
    return CborNoError;
}
   2e836:	2000      	movs	r0, #0
   2e838:	4770      	bx	lr
	...

0002e83c <log_mgmt_logs_list>:
/**
 * Command handler: log list
 */
static int
log_mgmt_logs_list(struct mgmt_ctxt *ctxt)
{
   2e83c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e83e:	b087      	sub	sp, #28
   2e840:	4607      	mov	r7, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   2e842:	2202      	movs	r2, #2
   2e844:	4921      	ldr	r1, [pc, #132]	; (2e8cc <log_mgmt_logs_list+0x90>)
   2e846:	f7fa fba7 	bl	28f98 <cbor_encode_text_string>
   2e84a:	4606      	mov	r6, r0
    int log_idx;
    int rc;

    err = 0;
    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    err |= cbor_encode_int(&ctxt->encoder, LOG_MGMT_ERR_EOK);
   2e84c:	2200      	movs	r2, #0
   2e84e:	2300      	movs	r3, #0
   2e850:	4638      	mov	r0, r7
   2e852:	f7fa fb2c 	bl	28eae <cbor_encode_int>
   2e856:	4306      	orrs	r6, r0
   2e858:	2208      	movs	r2, #8
   2e85a:	491d      	ldr	r1, [pc, #116]	; (2e8d0 <log_mgmt_logs_list+0x94>)
   2e85c:	4638      	mov	r0, r7
   2e85e:	f7fa fb9b 	bl	28f98 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "log_list");
   2e862:	4306      	orrs	r6, r0
    err |= cbor_encoder_create_array(&ctxt->encoder, &log_list,
   2e864:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2e868:	4669      	mov	r1, sp
   2e86a:	4638      	mov	r0, r7
   2e86c:	f7fa fb9b 	bl	28fa6 <cbor_encoder_create_array>
   2e870:	4306      	orrs	r6, r0
                                     CborIndefiniteLength);

    for (log_idx = 0; ; log_idx++) {
   2e872:	2500      	movs	r5, #0
   2e874:	e011      	b.n	2e89a <log_mgmt_logs_list+0x5e>
        rc = log_mgmt_impl_get_log(log_idx, &log);
        if (rc == LOG_MGMT_ERR_ENOENT) {
            break;
        }
        if (rc != 0) {
            cbor_encoder_close_container(&ctxt->encoder, &log_list);
   2e876:	4669      	mov	r1, sp
   2e878:	4638      	mov	r0, r7
   2e87a:	f7fa fbae 	bl	28fda <cbor_encoder_close_container>
    if (err != 0) {
        return LOG_MGMT_ERR_ENOMEM;
    }

    return 0;
}
   2e87e:	4620      	mov	r0, r4
   2e880:	b007      	add	sp, #28
   2e882:	bdf0      	pop	{r4, r5, r6, r7, pc}
            err |= cbor_encode_text_stringz(&log_list, log.name);
   2e884:	9c04      	ldr	r4, [sp, #16]
   2e886:	4620      	mov	r0, r4
   2e888:	f7e8 f971 	bl	16b6e <strlen>
   2e88c:	4602      	mov	r2, r0
   2e88e:	4621      	mov	r1, r4
   2e890:	4668      	mov	r0, sp
   2e892:	f7fa fb81 	bl	28f98 <cbor_encode_text_string>
   2e896:	4306      	orrs	r6, r0
    for (log_idx = 0; ; log_idx++) {
   2e898:	3501      	adds	r5, #1
        rc = log_mgmt_impl_get_log(log_idx, &log);
   2e89a:	a904      	add	r1, sp, #16
   2e89c:	4628      	mov	r0, r5
   2e89e:	f7ed f904 	bl	1baaa <log_mgmt_impl_get_log>
   2e8a2:	4604      	mov	r4, r0
        if (rc == LOG_MGMT_ERR_ENOENT) {
   2e8a4:	2805      	cmp	r0, #5
   2e8a6:	d005      	beq.n	2e8b4 <log_mgmt_logs_list+0x78>
        if (rc != 0) {
   2e8a8:	2800      	cmp	r0, #0
   2e8aa:	d1e4      	bne.n	2e876 <log_mgmt_logs_list+0x3a>
        if (log.type != LOG_MGMT_TYPE_STREAM) {
   2e8ac:	9b05      	ldr	r3, [sp, #20]
   2e8ae:	2b00      	cmp	r3, #0
   2e8b0:	d0f2      	beq.n	2e898 <log_mgmt_logs_list+0x5c>
   2e8b2:	e7e7      	b.n	2e884 <log_mgmt_logs_list+0x48>
    err |= cbor_encoder_close_container(&ctxt->encoder, &log_list);
   2e8b4:	4669      	mov	r1, sp
   2e8b6:	4638      	mov	r0, r7
   2e8b8:	f7fa fb8f 	bl	28fda <cbor_encoder_close_container>
    if (err != 0) {
   2e8bc:	ea56 0300 	orrs.w	r3, r6, r0
   2e8c0:	d101      	bne.n	2e8c6 <log_mgmt_logs_list+0x8a>
    return 0;
   2e8c2:	2400      	movs	r4, #0
   2e8c4:	e7db      	b.n	2e87e <log_mgmt_logs_list+0x42>
        return LOG_MGMT_ERR_ENOMEM;
   2e8c6:	2402      	movs	r4, #2
   2e8c8:	e7d9      	b.n	2e87e <log_mgmt_logs_list+0x42>
   2e8ca:	bf00      	nop
   2e8cc:	00030688 	.word	0x00030688
   2e8d0:	00033b18 	.word	0x00033b18

0002e8d4 <log_mgmt_level_list>:
/**
 * Command handler: log level_list
 */
static int
log_mgmt_level_list(struct mgmt_ctxt *ctxt)
{
   2e8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e8d6:	b087      	sub	sp, #28
   2e8d8:	4607      	mov	r7, r0
   2e8da:	2202      	movs	r2, #2
   2e8dc:	4923      	ldr	r1, [pc, #140]	; (2e96c <log_mgmt_level_list+0x98>)
   2e8de:	f7fa fb5b 	bl	28f98 <cbor_encode_text_string>
   2e8e2:	4606      	mov	r6, r0
    int level;
    int rc;

    err = 0;
    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    err |= cbor_encode_int(&ctxt->encoder, LOG_MGMT_ERR_EOK);
   2e8e4:	2200      	movs	r2, #0
   2e8e6:	2300      	movs	r3, #0
   2e8e8:	4638      	mov	r0, r7
   2e8ea:	f7fa fae0 	bl	28eae <cbor_encode_int>
   2e8ee:	4306      	orrs	r6, r0
   2e8f0:	2209      	movs	r2, #9
   2e8f2:	491f      	ldr	r1, [pc, #124]	; (2e970 <log_mgmt_level_list+0x9c>)
   2e8f4:	4638      	mov	r0, r7
   2e8f6:	f7fa fb4f 	bl	28f98 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "level_map");
   2e8fa:	4306      	orrs	r6, r0
    err |= cbor_encoder_create_map(&ctxt->encoder, &level_map,
   2e8fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2e900:	a901      	add	r1, sp, #4
   2e902:	4638      	mov	r0, r7
   2e904:	f7fa fb54 	bl	28fb0 <cbor_encoder_create_map>
   2e908:	4306      	orrs	r6, r0
                                   CborIndefiniteLength);

    for (level = 0; ; level++) {
   2e90a:	2500      	movs	r5, #0
   2e90c:	e016      	b.n	2e93c <log_mgmt_level_list+0x68>
        rc = log_mgmt_impl_get_level(level, &level_name);
        if (rc == LOG_MGMT_ERR_ENOENT) {
            break;
        }
        if (rc != 0) {
            cbor_encoder_close_container(&ctxt->encoder, &level_map);
   2e90e:	a901      	add	r1, sp, #4
   2e910:	4638      	mov	r0, r7
   2e912:	f7fa fb62 	bl	28fda <cbor_encoder_close_container>
    if (err != 0) {
        return LOG_MGMT_ERR_ENOMEM;
    }

    return 0;
}
   2e916:	4620      	mov	r0, r4
   2e918:	b007      	add	sp, #28
   2e91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e91c:	4620      	mov	r0, r4
   2e91e:	f7e8 f926 	bl	16b6e <strlen>
   2e922:	4602      	mov	r2, r0
   2e924:	4621      	mov	r1, r4
   2e926:	a801      	add	r0, sp, #4
   2e928:	f7fa fb36 	bl	28f98 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&level_map, level_name);
   2e92c:	4306      	orrs	r6, r0
            err |= cbor_encode_uint(&level_map, level);
   2e92e:	462a      	mov	r2, r5
   2e930:	17eb      	asrs	r3, r5, #31
   2e932:	a801      	add	r0, sp, #4
   2e934:	f7fa fa83 	bl	28e3e <cbor_encode_uint>
   2e938:	4306      	orrs	r6, r0
    for (level = 0; ; level++) {
   2e93a:	3501      	adds	r5, #1
        rc = log_mgmt_impl_get_level(level, &level_name);
   2e93c:	a905      	add	r1, sp, #20
   2e93e:	4628      	mov	r0, r5
   2e940:	f7ed f8d4 	bl	1baec <log_mgmt_impl_get_level>
   2e944:	4604      	mov	r4, r0
        if (rc == LOG_MGMT_ERR_ENOENT) {
   2e946:	2805      	cmp	r0, #5
   2e948:	d005      	beq.n	2e956 <log_mgmt_level_list+0x82>
        if (rc != 0) {
   2e94a:	2800      	cmp	r0, #0
   2e94c:	d1df      	bne.n	2e90e <log_mgmt_level_list+0x3a>
        if (level_name != NULL) {
   2e94e:	9c05      	ldr	r4, [sp, #20]
   2e950:	2c00      	cmp	r4, #0
   2e952:	d1e3      	bne.n	2e91c <log_mgmt_level_list+0x48>
   2e954:	e7f1      	b.n	2e93a <log_mgmt_level_list+0x66>
    err |= cbor_encoder_close_container(&ctxt->encoder, &level_map);
   2e956:	a901      	add	r1, sp, #4
   2e958:	4638      	mov	r0, r7
   2e95a:	f7fa fb3e 	bl	28fda <cbor_encoder_close_container>
    if (err != 0) {
   2e95e:	ea56 0300 	orrs.w	r3, r6, r0
   2e962:	d101      	bne.n	2e968 <log_mgmt_level_list+0x94>
    return 0;
   2e964:	2400      	movs	r4, #0
   2e966:	e7d6      	b.n	2e916 <log_mgmt_level_list+0x42>
        return LOG_MGMT_ERR_ENOMEM;
   2e968:	2402      	movs	r4, #2
   2e96a:	e7d4      	b.n	2e916 <log_mgmt_level_list+0x42>
   2e96c:	00030688 	.word	0x00030688
   2e970:	00033b24 	.word	0x00033b24

0002e974 <log_mgmt_module_list>:
{
   2e974:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e976:	b087      	sub	sp, #28
   2e978:	4607      	mov	r7, r0
   2e97a:	2202      	movs	r2, #2
   2e97c:	4923      	ldr	r1, [pc, #140]	; (2ea0c <log_mgmt_module_list+0x98>)
   2e97e:	f7fa fb0b 	bl	28f98 <cbor_encode_text_string>
   2e982:	4606      	mov	r6, r0
    err |= cbor_encode_int(&ctxt->encoder, LOG_MGMT_ERR_EOK);
   2e984:	2200      	movs	r2, #0
   2e986:	2300      	movs	r3, #0
   2e988:	4638      	mov	r0, r7
   2e98a:	f7fa fa90 	bl	28eae <cbor_encode_int>
   2e98e:	4306      	orrs	r6, r0
   2e990:	220a      	movs	r2, #10
   2e992:	491f      	ldr	r1, [pc, #124]	; (2ea10 <log_mgmt_module_list+0x9c>)
   2e994:	4638      	mov	r0, r7
   2e996:	f7fa faff 	bl	28f98 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "module_map");
   2e99a:	4306      	orrs	r6, r0
    err |= cbor_encoder_create_map(&ctxt->encoder, &modules,
   2e99c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2e9a0:	a901      	add	r1, sp, #4
   2e9a2:	4638      	mov	r0, r7
   2e9a4:	f7fa fb04 	bl	28fb0 <cbor_encoder_create_map>
   2e9a8:	4306      	orrs	r6, r0
    for (module = 0; ; module++) {
   2e9aa:	2500      	movs	r5, #0
   2e9ac:	e016      	b.n	2e9dc <log_mgmt_module_list+0x68>
            cbor_encoder_close_container(&ctxt->encoder, &modules);
   2e9ae:	a901      	add	r1, sp, #4
   2e9b0:	4638      	mov	r0, r7
   2e9b2:	f7fa fb12 	bl	28fda <cbor_encoder_close_container>
}
   2e9b6:	4620      	mov	r0, r4
   2e9b8:	b007      	add	sp, #28
   2e9ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e9bc:	4620      	mov	r0, r4
   2e9be:	f7e8 f8d6 	bl	16b6e <strlen>
   2e9c2:	4602      	mov	r2, r0
   2e9c4:	4621      	mov	r1, r4
   2e9c6:	a801      	add	r0, sp, #4
   2e9c8:	f7fa fae6 	bl	28f98 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&modules, module_name);
   2e9cc:	4306      	orrs	r6, r0
            err |= cbor_encode_uint(&modules, module);
   2e9ce:	462a      	mov	r2, r5
   2e9d0:	17eb      	asrs	r3, r5, #31
   2e9d2:	a801      	add	r0, sp, #4
   2e9d4:	f7fa fa33 	bl	28e3e <cbor_encode_uint>
   2e9d8:	4306      	orrs	r6, r0
    for (module = 0; ; module++) {
   2e9da:	3501      	adds	r5, #1
        rc = log_mgmt_impl_get_module(module, &module_name);
   2e9dc:	a905      	add	r1, sp, #20
   2e9de:	4628      	mov	r0, r5
   2e9e0:	f7ed f878 	bl	1bad4 <log_mgmt_impl_get_module>
   2e9e4:	4604      	mov	r4, r0
        if (rc == LOG_MGMT_ERR_ENOENT) {
   2e9e6:	2805      	cmp	r0, #5
   2e9e8:	d005      	beq.n	2e9f6 <log_mgmt_module_list+0x82>
        if (rc != 0) {
   2e9ea:	2800      	cmp	r0, #0
   2e9ec:	d1df      	bne.n	2e9ae <log_mgmt_module_list+0x3a>
        if (module_name != NULL) {
   2e9ee:	9c05      	ldr	r4, [sp, #20]
   2e9f0:	2c00      	cmp	r4, #0
   2e9f2:	d1e3      	bne.n	2e9bc <log_mgmt_module_list+0x48>
   2e9f4:	e7f1      	b.n	2e9da <log_mgmt_module_list+0x66>
    err |= cbor_encoder_close_container(&ctxt->encoder, &modules);
   2e9f6:	a901      	add	r1, sp, #4
   2e9f8:	4638      	mov	r0, r7
   2e9fa:	f7fa faee 	bl	28fda <cbor_encoder_close_container>
    if (err != 0) {
   2e9fe:	ea56 0300 	orrs.w	r3, r6, r0
   2ea02:	d101      	bne.n	2ea08 <log_mgmt_module_list+0x94>
    return 0;
   2ea04:	2400      	movs	r4, #0
   2ea06:	e7d6      	b.n	2e9b6 <log_mgmt_module_list+0x42>
        return LOG_MGMT_ERR_ENOMEM;
   2ea08:	2402      	movs	r4, #2
   2ea0a:	e7d4      	b.n	2e9b6 <log_mgmt_module_list+0x42>
   2ea0c:	00030688 	.word	0x00030688
   2ea10:	00033b30 	.word	0x00033b30

0002ea14 <log_mgmt_clear>:
/**
 * Command handler: log clear
 */
static int
log_mgmt_clear(struct mgmt_ctxt *ctxt)
{
   2ea14:	b570      	push	{r4, r5, r6, lr}
   2ea16:	b0aa      	sub	sp, #168	; 0xa8
   2ea18:	4605      	mov	r5, r0
    struct log_mgmt_log log;
    char name[LOG_MGMT_NAME_LEN] = {0};
   2ea1a:	2400      	movs	r4, #0
   2ea1c:	9418      	str	r4, [sp, #96]	; 0x60
   2ea1e:	223c      	movs	r2, #60	; 0x3c
   2ea20:	4621      	mov	r1, r4
   2ea22:	a819      	add	r0, sp, #100	; 0x64
   2ea24:	f7e8 f87b 	bl	16b1e <memset>
    int name_len;
    int log_idx;
    int rc;

    const struct cbor_attr_t attr[] = {
   2ea28:	225c      	movs	r2, #92	; 0x5c
   2ea2a:	4621      	mov	r1, r4
   2ea2c:	a801      	add	r0, sp, #4
   2ea2e:	f7e8 f876 	bl	16b1e <memset>
   2ea32:	4b1d      	ldr	r3, [pc, #116]	; (2eaa8 <log_mgmt_clear+0x94>)
   2ea34:	9300      	str	r3, [sp, #0]
   2ea36:	2304      	movs	r3, #4
   2ea38:	f88d 3004 	strb.w	r3, [sp, #4]
   2ea3c:	ab18      	add	r3, sp, #96	; 0x60
   2ea3e:	9302      	str	r3, [sp, #8]
   2ea40:	2340      	movs	r3, #64	; 0x40
   2ea42:	930a      	str	r3, [sp, #40]	; 0x28
        {
            .attribute = NULL
        },
    };

    name[0] = '\0';
   2ea44:	f88d 4060 	strb.w	r4, [sp, #96]	; 0x60
    rc = cbor_read_object(&ctxt->it, attr);
   2ea48:	4669      	mov	r1, sp
   2ea4a:	f105 001c 	add.w	r0, r5, #28
   2ea4e:	f7ec f8ea 	bl	1ac26 <cbor_read_object>
    if (rc != 0) {
   2ea52:	b9f8      	cbnz	r0, 2ea94 <log_mgmt_clear+0x80>
   2ea54:	4606      	mov	r6, r0
        return LOG_MGMT_ERR_EINVAL;
    }
    name_len = strlen(name);
   2ea56:	a818      	add	r0, sp, #96	; 0x60
   2ea58:	f7e8 f889 	bl	16b6e <strlen>
   2ea5c:	4605      	mov	r5, r0

    for (log_idx = 0; ; log_idx++) {
   2ea5e:	4634      	mov	r4, r6
   2ea60:	e005      	b.n	2ea6e <log_mgmt_clear+0x5a>
            return rc;
        }

        if (log.type != LOG_MGMT_TYPE_STREAM) {
            if (name_len == 0 || strcmp(log.name, name) == 0) {
                rc = log_mgmt_impl_clear(log.name);
   2ea62:	9828      	ldr	r0, [sp, #160]	; 0xa0
   2ea64:	f7ed f8a8 	bl	1bbb8 <log_mgmt_impl_clear>
                if (rc != 0) {
   2ea68:	b9d0      	cbnz	r0, 2eaa0 <log_mgmt_clear+0x8c>
                    return rc;
                }

                if (name_len != 0) {
   2ea6a:	b9dd      	cbnz	r5, 2eaa4 <log_mgmt_clear+0x90>
    for (log_idx = 0; ; log_idx++) {
   2ea6c:	3401      	adds	r4, #1
        rc = log_mgmt_impl_get_log(log_idx, &log);
   2ea6e:	a928      	add	r1, sp, #160	; 0xa0
   2ea70:	4620      	mov	r0, r4
   2ea72:	f7ed f81a 	bl	1baaa <log_mgmt_impl_get_log>
        if (rc == LOG_MGMT_ERR_ENOENT) {
   2ea76:	2805      	cmp	r0, #5
   2ea78:	d00f      	beq.n	2ea9a <log_mgmt_clear+0x86>
        if (rc != 0) {
   2ea7a:	b968      	cbnz	r0, 2ea98 <log_mgmt_clear+0x84>
        if (log.type != LOG_MGMT_TYPE_STREAM) {
   2ea7c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   2ea7e:	2b00      	cmp	r3, #0
   2ea80:	d0f4      	beq.n	2ea6c <log_mgmt_clear+0x58>
            if (name_len == 0 || strcmp(log.name, name) == 0) {
   2ea82:	2d00      	cmp	r5, #0
   2ea84:	d0ed      	beq.n	2ea62 <log_mgmt_clear+0x4e>
   2ea86:	a918      	add	r1, sp, #96	; 0x60
   2ea88:	9828      	ldr	r0, [sp, #160]	; 0xa0
   2ea8a:	f7e8 f864 	bl	16b56 <strcmp>
   2ea8e:	2800      	cmp	r0, #0
   2ea90:	d1ec      	bne.n	2ea6c <log_mgmt_clear+0x58>
   2ea92:	e7e6      	b.n	2ea62 <log_mgmt_clear+0x4e>
        return LOG_MGMT_ERR_EINVAL;
   2ea94:	2603      	movs	r6, #3
   2ea96:	e000      	b.n	2ea9a <log_mgmt_clear+0x86>
            return rc;
   2ea98:	4606      	mov	r6, r0
    if (name_len != 0) {
        return LOG_MGMT_ERR_ENOENT;
    }

    return 0;
}
   2ea9a:	4630      	mov	r0, r6
   2ea9c:	b02a      	add	sp, #168	; 0xa8
   2ea9e:	bd70      	pop	{r4, r5, r6, pc}
                    return rc;
   2eaa0:	4606      	mov	r6, r0
   2eaa2:	e7fa      	b.n	2ea9a <log_mgmt_clear+0x86>
                    return 0;
   2eaa4:	4606      	mov	r6, r0
   2eaa6:	e7f8      	b.n	2ea9a <log_mgmt_clear+0x86>
   2eaa8:	00033b3c 	.word	0x00033b3c

0002eaac <log_encode_entries>:
{
   2eaac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2eab0:	b09b      	sub	sp, #108	; 0x6c
   2eab2:	4606      	mov	r6, r0
   2eab4:	460d      	mov	r5, r1
   2eab6:	4690      	mov	r8, r2
   2eab8:	461f      	mov	r7, r3

static inline void
cbor_cnt_writer_init(struct CborCntWriter *cb) {
    cb->enc.bytes_written = 0;
   2eaba:	2200      	movs	r2, #0
   2eabc:	9219      	str	r2, [sp, #100]	; 0x64
    cb->enc.write = &cbor_cnt_writer;
   2eabe:	4b2b      	ldr	r3, [pc, #172]	; (2eb6c <log_encode_entries+0xc0>)
   2eac0:	9318      	str	r3, [sp, #96]	; 0x60
    cbor_encoder_init(&cnt_encoder, &cnt_writer.enc, 0);
   2eac2:	a918      	add	r1, sp, #96	; 0x60
   2eac4:	a804      	add	r0, sp, #16
   2eac6:	f7fa f9b5 	bl	28e34 <cbor_encoder_init>
   2eaca:	2207      	movs	r2, #7
   2eacc:	4928      	ldr	r1, [pc, #160]	; (2eb70 <log_encode_entries+0xc4>)
   2eace:	a804      	add	r0, sp, #16
   2ead0:	f7fa fa62 	bl	28f98 <cbor_encode_text_string>
   2ead4:	4604      	mov	r4, r0
    err |= cbor_encoder_create_array(&cnt_encoder, &entries,
   2ead6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2eada:	4669      	mov	r1, sp
   2eadc:	a804      	add	r0, sp, #16
   2eade:	f7fa fa62 	bl	28fa6 <cbor_encoder_create_array>
   2eae2:	4304      	orrs	r4, r0
    err |= cbor_encoder_close_container(&cnt_encoder, &entries);
   2eae4:	4669      	mov	r1, sp
   2eae6:	a804      	add	r0, sp, #16
   2eae8:	f7fa fa77 	bl	28fda <cbor_encoder_close_container>
   2eaec:	ea44 0900 	orr.w	r9, r4, r0
{   return encoder->writer->bytes_written; }
   2eaf0:	682b      	ldr	r3, [r5, #0]
   2eaf2:	685b      	ldr	r3, [r3, #4]
   2eaf4:	9a04      	ldr	r2, [sp, #16]
   2eaf6:	6854      	ldr	r4, [r2, #4]
    rsp_len = cbor_encode_bytes_written(enc) +
   2eaf8:	441c      	add	r4, r3
    if (rsp_len > LOG_MGMT_MAX_RSP_LEN) {
   2eafa:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
   2eafe:	dd04      	ble.n	2eb0a <log_encode_entries+0x5e>
        rc = LOG_MGMT_ERR_EUNKNOWN;
   2eb00:	2601      	movs	r6, #1
}
   2eb02:	4630      	mov	r0, r6
   2eb04:	b01b      	add	sp, #108	; 0x6c
   2eb06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   2eb0a:	2207      	movs	r2, #7
   2eb0c:	4918      	ldr	r1, [pc, #96]	; (2eb70 <log_encode_entries+0xc4>)
   2eb0e:	4628      	mov	r0, r5
   2eb10:	f7fa fa42 	bl	28f98 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(enc, "entries");
   2eb14:	ea49 0400 	orr.w	r4, r9, r0
    err |= cbor_encoder_create_array(enc, &entries, CborIndefiniteLength);
   2eb18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2eb1c:	4669      	mov	r1, sp
   2eb1e:	4628      	mov	r0, r5
   2eb20:	f7fa fa41 	bl	28fa6 <cbor_encoder_create_array>
   2eb24:	4304      	orrs	r4, r0
    filter = (struct log_mgmt_filter) {
   2eb26:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   2eb2a:	9715      	str	r7, [sp, #84]	; 0x54
   2eb2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2eb2e:	9316      	str	r3, [sp, #88]	; 0x58
{   return encoder->writer->bytes_written; }
   2eb30:	682b      	ldr	r3, [r5, #0]
   2eb32:	685f      	ldr	r7, [r3, #4]
    ctxt = (struct log_walk_ctxt) {
   2eb34:	2230      	movs	r2, #48	; 0x30
   2eb36:	2100      	movs	r1, #0
   2eb38:	a808      	add	r0, sp, #32
   2eb3a:	f7e7 fff0 	bl	16b1e <memset>
   2eb3e:	9709      	str	r7, [sp, #36]	; 0x24
   2eb40:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
    rc = log_mgmt_impl_foreach_entry(log->name, &filter,
   2eb44:	ab08      	add	r3, sp, #32
   2eb46:	4a0b      	ldr	r2, [pc, #44]	; (2eb74 <log_encode_entries+0xc8>)
   2eb48:	a914      	add	r1, sp, #80	; 0x50
   2eb4a:	6830      	ldr	r0, [r6, #0]
   2eb4c:	f7ed f806 	bl	1bb5c <log_mgmt_impl_foreach_entry>
    if (rc < 0) {
   2eb50:	1e06      	subs	r6, r0, #0
   2eb52:	db08      	blt.n	2eb66 <log_encode_entries+0xba>
    err |= cbor_encoder_close_container(enc, &entries);
   2eb54:	4669      	mov	r1, sp
   2eb56:	4628      	mov	r0, r5
   2eb58:	f7fa fa3f 	bl	28fda <cbor_encoder_close_container>
    if (err != 0) {
   2eb5c:	ea54 0300 	orrs.w	r3, r4, r0
   2eb60:	d0cf      	beq.n	2eb02 <log_encode_entries+0x56>
        return LOG_MGMT_ERR_ENOMEM;
   2eb62:	2602      	movs	r6, #2
   2eb64:	e7cd      	b.n	2eb02 <log_encode_entries+0x56>
        rc = -1 * rc;
   2eb66:	4276      	negs	r6, r6
   2eb68:	e7f4      	b.n	2eb54 <log_encode_entries+0xa8>
   2eb6a:	bf00      	nop
   2eb6c:	0002e831 	.word	0x0002e831
   2eb70:	00033b48 	.word	0x00033b48
   2eb74:	0002ef55 	.word	0x0002ef55

0002eb78 <log_encode>:
{
   2eb78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2eb7c:	b087      	sub	sp, #28
   2eb7e:	4605      	mov	r5, r0
   2eb80:	460e      	mov	r6, r1
   2eb82:	4690      	mov	r8, r2
   2eb84:	461f      	mov	r7, r3
    err |= cbor_encoder_create_map(ctxt, &logs, CborIndefiniteLength);
   2eb86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2eb8a:	a902      	add	r1, sp, #8
   2eb8c:	4630      	mov	r0, r6
   2eb8e:	f7fa fa0f 	bl	28fb0 <cbor_encoder_create_map>
   2eb92:	4604      	mov	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   2eb94:	2204      	movs	r2, #4
   2eb96:	491c      	ldr	r1, [pc, #112]	; (2ec08 <log_encode+0x90>)
   2eb98:	a802      	add	r0, sp, #8
   2eb9a:	f7fa f9fd 	bl	28f98 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&logs, "name");
   2eb9e:	4304      	orrs	r4, r0
    err |= cbor_encode_text_stringz(&logs, log->name);
   2eba0:	f8d5 9000 	ldr.w	r9, [r5]
   2eba4:	4648      	mov	r0, r9
   2eba6:	f7e7 ffe2 	bl	16b6e <strlen>
   2ebaa:	4602      	mov	r2, r0
   2ebac:	4649      	mov	r1, r9
   2ebae:	a802      	add	r0, sp, #8
   2ebb0:	f7fa f9f2 	bl	28f98 <cbor_encode_text_string>
   2ebb4:	4304      	orrs	r4, r0
   2ebb6:	2204      	movs	r2, #4
   2ebb8:	4914      	ldr	r1, [pc, #80]	; (2ec0c <log_encode+0x94>)
   2ebba:	a802      	add	r0, sp, #8
   2ebbc:	f7fa f9ec 	bl	28f98 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&logs, "type");
   2ebc0:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&logs, log->type);
   2ebc2:	686a      	ldr	r2, [r5, #4]
   2ebc4:	17d3      	asrs	r3, r2, #31
   2ebc6:	a802      	add	r0, sp, #8
   2ebc8:	f7fa f939 	bl	28e3e <cbor_encode_uint>
   2ebcc:	4304      	orrs	r4, r0
    rc = log_encode_entries(log, &logs, timestamp, index);
   2ebce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2ebd0:	9300      	str	r3, [sp, #0]
   2ebd2:	4642      	mov	r2, r8
   2ebd4:	463b      	mov	r3, r7
   2ebd6:	a902      	add	r1, sp, #8
   2ebd8:	4628      	mov	r0, r5
   2ebda:	f7ff ff67 	bl	2eaac <log_encode_entries>
    if (rc != 0) {
   2ebde:	4605      	mov	r5, r0
   2ebe0:	b950      	cbnz	r0, 2ebf8 <log_encode+0x80>
    err |= cbor_encoder_close_container(ctxt, &logs);
   2ebe2:	a902      	add	r1, sp, #8
   2ebe4:	4630      	mov	r0, r6
   2ebe6:	f7fa f9f8 	bl	28fda <cbor_encoder_close_container>
    if (err != 0) {
   2ebea:	ea54 0300 	orrs.w	r3, r4, r0
   2ebee:	d108      	bne.n	2ec02 <log_encode+0x8a>
}
   2ebf0:	4628      	mov	r0, r5
   2ebf2:	b007      	add	sp, #28
   2ebf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        cbor_encoder_close_container(ctxt, &logs);
   2ebf8:	a902      	add	r1, sp, #8
   2ebfa:	4630      	mov	r0, r6
   2ebfc:	f7fa f9ed 	bl	28fda <cbor_encoder_close_container>
        return rc;
   2ec00:	e7f6      	b.n	2ebf0 <log_encode+0x78>
        return LOG_MGMT_ERR_ENOMEM;
   2ec02:	2502      	movs	r5, #2
   2ec04:	e7f4      	b.n	2ebf0 <log_encode+0x78>
   2ec06:	bf00      	nop
   2ec08:	00033b40 	.word	0x00033b40
   2ec0c:	00033b50 	.word	0x00033b50

0002ec10 <log_mgmt_show>:
{
   2ec10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ec14:	b0ce      	sub	sp, #312	; 0x138
   2ec16:	4606      	mov	r6, r0
    const struct cbor_attr_t attr[] = {
   2ec18:	22bc      	movs	r2, #188	; 0xbc
   2ec1a:	2100      	movs	r1, #0
   2ec1c:	a803      	add	r0, sp, #12
   2ec1e:	f7e7 ff7e 	bl	16b1e <memset>
   2ec22:	4b4b      	ldr	r3, [pc, #300]	; (2ed50 <log_mgmt_show+0x140>)
   2ec24:	9302      	str	r3, [sp, #8]
   2ec26:	2304      	movs	r3, #4
   2ec28:	f88d 300c 	strb.w	r3, [sp, #12]
   2ec2c:	ab3e      	add	r3, sp, #248	; 0xf8
   2ec2e:	9304      	str	r3, [sp, #16]
   2ec30:	2340      	movs	r3, #64	; 0x40
   2ec32:	930c      	str	r3, [sp, #48]	; 0x30
   2ec34:	4b47      	ldr	r3, [pc, #284]	; (2ed54 <log_mgmt_show+0x144>)
   2ec36:	930e      	str	r3, [sp, #56]	; 0x38
   2ec38:	2301      	movs	r3, #1
   2ec3a:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   2ec3e:	ab32      	add	r3, sp, #200	; 0xc8
   2ec40:	9310      	str	r3, [sp, #64]	; 0x40
   2ec42:	4b45      	ldr	r3, [pc, #276]	; (2ed58 <log_mgmt_show+0x148>)
   2ec44:	931a      	str	r3, [sp, #104]	; 0x68
   2ec46:	2302      	movs	r3, #2
   2ec48:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   2ec4c:	ab36      	add	r3, sp, #216	; 0xd8
   2ec4e:	931c      	str	r3, [sp, #112]	; 0x70
    name[0] = '\0';
   2ec50:	2300      	movs	r3, #0
   2ec52:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    rc = cbor_read_object(&ctxt->it, attr);
   2ec56:	a902      	add	r1, sp, #8
   2ec58:	f106 001c 	add.w	r0, r6, #28
   2ec5c:	f7eb ffe3 	bl	1ac26 <cbor_read_object>
    if (rc != 0) {
   2ec60:	2800      	cmp	r0, #0
   2ec62:	d16e      	bne.n	2ed42 <log_mgmt_show+0x132>
    name_len = strlen(name);
   2ec64:	a83e      	add	r0, sp, #248	; 0xf8
   2ec66:	f7e7 ff82 	bl	16b6e <strlen>
   2ec6a:	4682      	mov	sl, r0
   2ec6c:	4607      	mov	r7, r0
    rc = log_mgmt_impl_get_next_idx(&next_idx);
   2ec6e:	a835      	add	r0, sp, #212	; 0xd4
   2ec70:	f7ec ff6c 	bl	1bb4c <log_mgmt_impl_get_next_idx>
    if (rc != 0) {
   2ec74:	4681      	mov	r9, r0
   2ec76:	b110      	cbz	r0, 2ec7e <log_mgmt_show+0x6e>
        return LOG_MGMT_ERR_EUNKNOWN;
   2ec78:	f04f 0901 	mov.w	r9, #1
   2ec7c:	e063      	b.n	2ed46 <log_mgmt_show+0x136>
   2ec7e:	220a      	movs	r2, #10
   2ec80:	4936      	ldr	r1, [pc, #216]	; (2ed5c <log_mgmt_show+0x14c>)
   2ec82:	4630      	mov	r0, r6
   2ec84:	f7fa f988 	bl	28f98 <cbor_encode_text_string>
   2ec88:	4680      	mov	r8, r0
    err |= cbor_encode_uint(&ctxt->encoder, next_idx);
   2ec8a:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   2ec8c:	2300      	movs	r3, #0
   2ec8e:	4630      	mov	r0, r6
   2ec90:	f7fa f8d5 	bl	28e3e <cbor_encode_uint>
   2ec94:	ea40 0808 	orr.w	r8, r0, r8
   2ec98:	2204      	movs	r2, #4
   2ec9a:	4931      	ldr	r1, [pc, #196]	; (2ed60 <log_mgmt_show+0x150>)
   2ec9c:	4630      	mov	r0, r6
   2ec9e:	f7fa f97b 	bl	28f98 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "logs");
   2eca2:	ea48 0800 	orr.w	r8, r8, r0
    err |= cbor_encoder_create_array(&ctxt->encoder, &logs,
   2eca6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2ecaa:	a938      	add	r1, sp, #224	; 0xe0
   2ecac:	4630      	mov	r0, r6
   2ecae:	f7fa f97a 	bl	28fa6 <cbor_encoder_create_array>
   2ecb2:	ea48 0800 	orr.w	r8, r8, r0
    for (log_idx = 0; ; log_idx++) {
   2ecb6:	464d      	mov	r5, r9
   2ecb8:	e02e      	b.n	2ed18 <log_mgmt_show+0x108>
            if (name_len != 0) {
   2ecba:	f1ba 0f00 	cmp.w	sl, #0
   2ecbe:	d117      	bne.n	2ecf0 <log_mgmt_show+0xe0>
    err |= cbor_encoder_close_container(&ctxt->encoder, &logs);
   2ecc0:	a938      	add	r1, sp, #224	; 0xe0
   2ecc2:	4630      	mov	r0, r6
   2ecc4:	f7fa f989 	bl	28fda <cbor_encoder_close_container>
   2ecc8:	ea48 0800 	orr.w	r8, r8, r0
   2eccc:	2202      	movs	r2, #2
   2ecce:	4925      	ldr	r1, [pc, #148]	; (2ed64 <log_mgmt_show+0x154>)
   2ecd0:	4630      	mov	r0, r6
   2ecd2:	f7fa f961 	bl	28f98 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
   2ecd6:	ea48 0800 	orr.w	r8, r8, r0
    err |= cbor_encode_int(&ctxt->encoder, rc);
   2ecda:	4622      	mov	r2, r4
   2ecdc:	17e3      	asrs	r3, r4, #31
   2ecde:	4630      	mov	r0, r6
   2ece0:	f7fa f8e5 	bl	28eae <cbor_encode_int>
    if (err != 0) {
   2ece4:	ea58 0300 	orrs.w	r3, r8, r0
   2ece8:	d02d      	beq.n	2ed46 <log_mgmt_show+0x136>
        return LOG_MGMT_ERR_ENOMEM;
   2ecea:	f04f 0902 	mov.w	r9, #2
   2ecee:	e02a      	b.n	2ed46 <log_mgmt_show+0x136>
                cbor_encoder_close_container(&ctxt->encoder, &logs);
   2ecf0:	a938      	add	r1, sp, #224	; 0xe0
   2ecf2:	4630      	mov	r0, r6
   2ecf4:	f7fa f971 	bl	28fda <cbor_encoder_close_container>
                return LOG_MGMT_ERR_ENOENT;
   2ecf8:	46a1      	mov	r9, r4
   2ecfa:	e024      	b.n	2ed46 <log_mgmt_show+0x136>
                rc = log_encode(&log, &logs, timestamp, index);
   2ecfc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   2ecfe:	9300      	str	r3, [sp, #0]
   2ed00:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
   2ed04:	a938      	add	r1, sp, #224	; 0xe0
   2ed06:	a83c      	add	r0, sp, #240	; 0xf0
   2ed08:	f7ff ff36 	bl	2eb78 <log_encode>
                if (rc) {
   2ed0c:	4604      	mov	r4, r0
   2ed0e:	2800      	cmp	r0, #0
   2ed10:	d1d6      	bne.n	2ecc0 <log_mgmt_show+0xb0>
                if (name_len > 0) {
   2ed12:	2f00      	cmp	r7, #0
   2ed14:	dcd4      	bgt.n	2ecc0 <log_mgmt_show+0xb0>
    for (log_idx = 0; ; log_idx++) {
   2ed16:	3501      	adds	r5, #1
        rc = log_mgmt_impl_get_log(log_idx, &log);
   2ed18:	a93c      	add	r1, sp, #240	; 0xf0
   2ed1a:	4628      	mov	r0, r5
   2ed1c:	f7ec fec5 	bl	1baaa <log_mgmt_impl_get_log>
   2ed20:	4604      	mov	r4, r0
        if (rc == LOG_MGMT_ERR_ENOENT) {
   2ed22:	2805      	cmp	r0, #5
   2ed24:	d0c9      	beq.n	2ecba <log_mgmt_show+0xaa>
        } else if (rc != 0) {
   2ed26:	2800      	cmp	r0, #0
   2ed28:	d1ca      	bne.n	2ecc0 <log_mgmt_show+0xb0>
        if (log.type != LOG_MGMT_TYPE_STREAM) {
   2ed2a:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
   2ed2c:	2b00      	cmp	r3, #0
   2ed2e:	d0f2      	beq.n	2ed16 <log_mgmt_show+0x106>
            if (name_len == 0 || strcmp(name, log.name) == 0) {
   2ed30:	2f00      	cmp	r7, #0
   2ed32:	d0e3      	beq.n	2ecfc <log_mgmt_show+0xec>
   2ed34:	993c      	ldr	r1, [sp, #240]	; 0xf0
   2ed36:	a83e      	add	r0, sp, #248	; 0xf8
   2ed38:	f7e7 ff0d 	bl	16b56 <strcmp>
   2ed3c:	2800      	cmp	r0, #0
   2ed3e:	d1ea      	bne.n	2ed16 <log_mgmt_show+0x106>
   2ed40:	e7dc      	b.n	2ecfc <log_mgmt_show+0xec>
        return LOG_MGMT_ERR_EINVAL;
   2ed42:	f04f 0903 	mov.w	r9, #3
}
   2ed46:	4648      	mov	r0, r9
   2ed48:	b04e      	add	sp, #312	; 0x138
   2ed4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2ed4e:	bf00      	nop
   2ed50:	00033b3c 	.word	0x00033b3c
   2ed54:	00033b58 	.word	0x00033b58
   2ed58:	00033b5c 	.word	0x00033b5c
   2ed5c:	00033b64 	.word	0x00033b64
   2ed60:	00033b70 	.word	0x00033b70
   2ed64:	00030688 	.word	0x00030688

0002ed68 <log_mgmt_encode_entry>:
{
   2ed68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ed6c:	b083      	sub	sp, #12
   2ed6e:	4681      	mov	r9, r0
   2ed70:	460e      	mov	r6, r1
   2ed72:	9200      	str	r2, [sp, #0]
   2ed74:	4698      	mov	r8, r3
{   return encoder->writer->bytes_written; }
   2ed76:	6803      	ldr	r3, [r0, #0]
   2ed78:	685b      	ldr	r3, [r3, #4]
   2ed7a:	9301      	str	r3, [sp, #4]
    if (entry->offset == 0) {
   2ed7c:	69cb      	ldr	r3, [r1, #28]
   2ed7e:	2b00      	cmp	r3, #0
   2ed80:	f040 80ab 	bne.w	2eeda <log_mgmt_encode_entry+0x172>
        err |= cbor_encoder_create_map(enc, &lmec->mapenc, CborIndefiniteLength);
   2ed84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2ed88:	4641      	mov	r1, r8
   2ed8a:	f7fa f911 	bl	28fb0 <cbor_encoder_create_map>
   2ed8e:	4607      	mov	r7, r0
        switch (entry->type) {
   2ed90:	7db3      	ldrb	r3, [r6, #22]
   2ed92:	f003 030f 	and.w	r3, r3, #15
   2ed96:	2b01      	cmp	r3, #1
   2ed98:	d005      	beq.n	2eda6 <log_mgmt_encode_entry+0x3e>
   2ed9a:	2b02      	cmp	r3, #2
   2ed9c:	d056      	beq.n	2ee4c <log_mgmt_encode_entry+0xe4>
   2ed9e:	2b00      	cmp	r3, #0
   2eda0:	d061      	beq.n	2ee66 <log_mgmt_encode_entry+0xfe>
   2eda2:	2007      	movs	r0, #7
   2eda4:	e0b1      	b.n	2ef0a <log_mgmt_encode_entry+0x1a2>
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   2eda6:	2204      	movs	r2, #4
   2eda8:	4960      	ldr	r1, [pc, #384]	; (2ef2c <log_mgmt_encode_entry+0x1c4>)
   2edaa:	4640      	mov	r0, r8
   2edac:	f7fa f8f4 	bl	28f98 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "type");
   2edb0:	4307      	orrs	r7, r0
   2edb2:	2204      	movs	r2, #4
   2edb4:	495e      	ldr	r1, [pc, #376]	; (2ef30 <log_mgmt_encode_entry+0x1c8>)
   2edb6:	4640      	mov	r0, r8
   2edb8:	f7fa f8ee 	bl	28f98 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "cbor");
   2edbc:	4307      	orrs	r7, r0
   2edbe:	2202      	movs	r2, #2
   2edc0:	495c      	ldr	r1, [pc, #368]	; (2ef34 <log_mgmt_encode_entry+0x1cc>)
   2edc2:	4640      	mov	r0, r8
   2edc4:	f7fa f8e8 	bl	28f98 <cbor_encode_text_string>
        err |= cbor_encode_text_stringz(&lmec->mapenc, "ts");
   2edc8:	4307      	orrs	r7, r0
        err |= cbor_encode_int(&lmec->mapenc, entry->ts);
   2edca:	e9d6 2300 	ldrd	r2, r3, [r6]
   2edce:	4640      	mov	r0, r8
   2edd0:	f7fa f86d 	bl	28eae <cbor_encode_int>
   2edd4:	4307      	orrs	r7, r0
   2edd6:	2205      	movs	r2, #5
   2edd8:	4957      	ldr	r1, [pc, #348]	; (2ef38 <log_mgmt_encode_entry+0x1d0>)
   2edda:	4640      	mov	r0, r8
   2eddc:	f7fa f8dc 	bl	28f98 <cbor_encode_text_string>
        err |= cbor_encode_text_stringz(&lmec->mapenc, "level");
   2ede0:	4307      	orrs	r7, r0
        err |= cbor_encode_uint(&lmec->mapenc, entry->level);
   2ede2:	7d72      	ldrb	r2, [r6, #21]
   2ede4:	2300      	movs	r3, #0
   2ede6:	4640      	mov	r0, r8
   2ede8:	f7fa f829 	bl	28e3e <cbor_encode_uint>
   2edec:	4307      	orrs	r7, r0
   2edee:	2205      	movs	r2, #5
   2edf0:	4952      	ldr	r1, [pc, #328]	; (2ef3c <log_mgmt_encode_entry+0x1d4>)
   2edf2:	4640      	mov	r0, r8
   2edf4:	f7fa f8d0 	bl	28f98 <cbor_encode_text_string>
        err |= cbor_encode_text_stringz(&lmec->mapenc, "index");
   2edf8:	4307      	orrs	r7, r0
        err |= cbor_encode_uint(&lmec->mapenc, entry->index);
   2edfa:	68b2      	ldr	r2, [r6, #8]
   2edfc:	2300      	movs	r3, #0
   2edfe:	4640      	mov	r0, r8
   2ee00:	f7fa f81d 	bl	28e3e <cbor_encode_uint>
   2ee04:	4307      	orrs	r7, r0
   2ee06:	2206      	movs	r2, #6
   2ee08:	494d      	ldr	r1, [pc, #308]	; (2ef40 <log_mgmt_encode_entry+0x1d8>)
   2ee0a:	4640      	mov	r0, r8
   2ee0c:	f7fa f8c4 	bl	28f98 <cbor_encode_text_string>
        err |= cbor_encode_text_stringz(&lmec->mapenc, "module");
   2ee10:	4307      	orrs	r7, r0
        err |= cbor_encode_uint(&lmec->mapenc, entry->module);
   2ee12:	7d32      	ldrb	r2, [r6, #20]
   2ee14:	2300      	movs	r3, #0
   2ee16:	4640      	mov	r0, r8
   2ee18:	f7fa f811 	bl	28e3e <cbor_encode_uint>
   2ee1c:	4307      	orrs	r7, r0
        if (entry->flags & LOG_MGMT_FLAGS_IMG_HASH) {
   2ee1e:	7db3      	ldrb	r3, [r6, #22]
   2ee20:	f013 0f10 	tst.w	r3, #16
   2ee24:	d12c      	bne.n	2ee80 <log_mgmt_encode_entry+0x118>
   2ee26:	2203      	movs	r2, #3
   2ee28:	4946      	ldr	r1, [pc, #280]	; (2ef44 <log_mgmt_encode_entry+0x1dc>)
   2ee2a:	4640      	mov	r0, r8
   2ee2c:	f7fa f8b4 	bl	28f98 <cbor_encode_text_string>
        err |= cbor_encode_text_stringz(&lmec->mapenc, "msg");
   2ee30:	4307      	orrs	r7, r0
        err |= cbor_encoder_create_indef_byte_string(&lmec->mapenc, &lmec->msgenc);
   2ee32:	f108 0b10 	add.w	fp, r8, #16
   2ee36:	4659      	mov	r1, fp
   2ee38:	4640      	mov	r0, r8
   2ee3a:	f7fa f8c7 	bl	28fcc <cbor_encoder_create_indef_byte_string>
   2ee3e:	4307      	orrs	r7, r0
        if (out_len != NULL) {
   2ee40:	9b00      	ldr	r3, [sp, #0]
   2ee42:	2b00      	cmp	r3, #0
   2ee44:	d041      	beq.n	2eeca <log_mgmt_encode_entry+0x162>
    bytes_encoded = 0;
   2ee46:	2500      	movs	r5, #0
            for (off = 0; off < entry->len; off += entry->chunklen) {
   2ee48:	462b      	mov	r3, r5
   2ee4a:	e030      	b.n	2eeae <log_mgmt_encode_entry+0x146>
   2ee4c:	2204      	movs	r2, #4
   2ee4e:	4937      	ldr	r1, [pc, #220]	; (2ef2c <log_mgmt_encode_entry+0x1c4>)
   2ee50:	4640      	mov	r0, r8
   2ee52:	f7fa f8a1 	bl	28f98 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "type");
   2ee56:	4307      	orrs	r7, r0
   2ee58:	2203      	movs	r2, #3
   2ee5a:	493b      	ldr	r1, [pc, #236]	; (2ef48 <log_mgmt_encode_entry+0x1e0>)
   2ee5c:	4640      	mov	r0, r8
   2ee5e:	f7fa f89b 	bl	28f98 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "bin");
   2ee62:	4307      	orrs	r7, r0
            break;
   2ee64:	e7ab      	b.n	2edbe <log_mgmt_encode_entry+0x56>
   2ee66:	2204      	movs	r2, #4
   2ee68:	4930      	ldr	r1, [pc, #192]	; (2ef2c <log_mgmt_encode_entry+0x1c4>)
   2ee6a:	4640      	mov	r0, r8
   2ee6c:	f7fa f894 	bl	28f98 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "type");
   2ee70:	4307      	orrs	r7, r0
   2ee72:	2203      	movs	r2, #3
   2ee74:	4935      	ldr	r1, [pc, #212]	; (2ef4c <log_mgmt_encode_entry+0x1e4>)
   2ee76:	4640      	mov	r0, r8
   2ee78:	f7fa f88e 	bl	28f98 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "str");
   2ee7c:	4307      	orrs	r7, r0
            break;
   2ee7e:	e79e      	b.n	2edbe <log_mgmt_encode_entry+0x56>
   2ee80:	2207      	movs	r2, #7
   2ee82:	4933      	ldr	r1, [pc, #204]	; (2ef50 <log_mgmt_encode_entry+0x1e8>)
   2ee84:	4640      	mov	r0, r8
   2ee86:	f7fa f887 	bl	28f98 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "imghash");
   2ee8a:	4307      	orrs	r7, r0
            err |= cbor_encode_byte_string(&lmec->mapenc, entry->imghash,
   2ee8c:	2204      	movs	r2, #4
   2ee8e:	69b1      	ldr	r1, [r6, #24]
   2ee90:	4640      	mov	r0, r8
   2ee92:	f7fa f87a 	bl	28f8a <cbor_encode_byte_string>
   2ee96:	4307      	orrs	r7, r0
   2ee98:	e7c5      	b.n	2ee26 <log_mgmt_encode_entry+0xbe>
                err |= cbor_encode_byte_string(&lmec->msgenc, entry->data, chunklen);
   2ee9a:	4622      	mov	r2, r4
   2ee9c:	68f1      	ldr	r1, [r6, #12]
   2ee9e:	4658      	mov	r0, fp
   2eea0:	f7fa f873 	bl	28f8a <cbor_encode_byte_string>
   2eea4:	4307      	orrs	r7, r0
                bytes_encoded += chunklen;
   2eea6:	4425      	add	r5, r4
   2eea8:	b2ad      	uxth	r5, r5
            for (off = 0; off < entry->len; off += entry->chunklen) {
   2eeaa:	6a33      	ldr	r3, [r6, #32]
   2eeac:	4453      	add	r3, sl
   2eeae:	6932      	ldr	r2, [r6, #16]
   2eeb0:	469a      	mov	sl, r3
   2eeb2:	429a      	cmp	r2, r3
   2eeb4:	d919      	bls.n	2eeea <log_mgmt_encode_entry+0x182>
                chunklen = entry->chunklen;
   2eeb6:	6a31      	ldr	r1, [r6, #32]
   2eeb8:	b28c      	uxth	r4, r1
                if (entry->chunklen > entry->len - off) {
   2eeba:	1ad0      	subs	r0, r2, r3
   2eebc:	4281      	cmp	r1, r0
   2eebe:	d9ec      	bls.n	2ee9a <log_mgmt_encode_entry+0x132>
                    chunklen = entry->len - off;
   2eec0:	b294      	uxth	r4, r2
   2eec2:	b29b      	uxth	r3, r3
   2eec4:	1ae3      	subs	r3, r4, r3
   2eec6:	b29c      	uxth	r4, r3
   2eec8:	e7e7      	b.n	2ee9a <log_mgmt_encode_entry+0x132>
            err |= cbor_encode_byte_string(&lmec->msgenc, entry->data, entry->chunklen);
   2eeca:	6a32      	ldr	r2, [r6, #32]
   2eecc:	68f1      	ldr	r1, [r6, #12]
   2eece:	4658      	mov	r0, fp
   2eed0:	f7fa f85b 	bl	28f8a <cbor_encode_byte_string>
   2eed4:	4307      	orrs	r7, r0
            bytes_encoded = entry->chunklen;
   2eed6:	8c35      	ldrh	r5, [r6, #32]
   2eed8:	e007      	b.n	2eeea <log_mgmt_encode_entry+0x182>
        err |= cbor_encode_byte_string(&lmec->msgenc, entry->data, entry->chunklen);
   2eeda:	6a0a      	ldr	r2, [r1, #32]
   2eedc:	68c9      	ldr	r1, [r1, #12]
   2eede:	f108 0010 	add.w	r0, r8, #16
   2eee2:	f7fa f852 	bl	28f8a <cbor_encode_byte_string>
   2eee6:	4607      	mov	r7, r0
        bytes_encoded = entry->chunklen;
   2eee8:	8c35      	ldrh	r5, [r6, #32]
   if (entry->offset + bytes_encoded >= entry->len) {
   2eeea:	69f4      	ldr	r4, [r6, #28]
   2eeec:	4425      	add	r5, r4
   2eeee:	6933      	ldr	r3, [r6, #16]
   2eef0:	429d      	cmp	r5, r3
   2eef2:	d20d      	bcs.n	2ef10 <log_mgmt_encode_entry+0x1a8>
   if (out_len) {
   2eef4:	9900      	ldr	r1, [sp, #0]
   2eef6:	b131      	cbz	r1, 2ef06 <log_mgmt_encode_entry+0x19e>
{   return encoder->writer->bytes_written; }
   2eef8:	f8d9 3000 	ldr.w	r3, [r9]
   2eefc:	685a      	ldr	r2, [r3, #4]
       *out_len = cbor_encode_bytes_written(enc) - len;
   2eefe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   2ef02:	1ad3      	subs	r3, r2, r3
   2ef04:	600b      	str	r3, [r1, #0]
   if (err != 0) {
   2ef06:	b97f      	cbnz	r7, 2ef28 <log_mgmt_encode_entry+0x1c0>
   return LOG_MGMT_ERR_EOK;
   2ef08:	2000      	movs	r0, #0
}
   2ef0a:	b003      	add	sp, #12
   2ef0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
       err |= cbor_encoder_close_container(&lmec->mapenc, &lmec->msgenc);
   2ef10:	f108 0110 	add.w	r1, r8, #16
   2ef14:	4640      	mov	r0, r8
   2ef16:	f7fa f860 	bl	28fda <cbor_encoder_close_container>
   2ef1a:	4307      	orrs	r7, r0
       err |= cbor_encoder_close_container(enc, &lmec->mapenc);
   2ef1c:	4641      	mov	r1, r8
   2ef1e:	4648      	mov	r0, r9
   2ef20:	f7fa f85b 	bl	28fda <cbor_encoder_close_container>
   2ef24:	4307      	orrs	r7, r0
   2ef26:	e7e5      	b.n	2eef4 <log_mgmt_encode_entry+0x18c>
       return LOG_MGMT_ERR_ENOMEM;
   2ef28:	2002      	movs	r0, #2
   2ef2a:	e7ee      	b.n	2ef0a <log_mgmt_encode_entry+0x1a2>
   2ef2c:	00033b50 	.word	0x00033b50
   2ef30:	00033b78 	.word	0x00033b78
   2ef34:	00033b58 	.word	0x00033b58
   2ef38:	00033b88 	.word	0x00033b88
   2ef3c:	00033b5c 	.word	0x00033b5c
   2ef40:	00033b90 	.word	0x00033b90
   2ef44:	00033ba0 	.word	0x00033ba0
   2ef48:	00033b80 	.word	0x00033b80
   2ef4c:	00033b84 	.word	0x00033b84
   2ef50:	00033b98 	.word	0x00033b98

0002ef54 <log_mgmt_cb_encode>:
{
   2ef54:	b570      	push	{r4, r5, r6, lr}
   2ef56:	b088      	sub	sp, #32
   2ef58:	4605      	mov	r5, r0
   2ef5a:	460c      	mov	r4, r1
    lmec = &ctxt->lmec;
   2ef5c:	f101 0610 	add.w	r6, r1, #16
    if (entry->offset == 0) {
   2ef60:	69c3      	ldr	r3, [r0, #28]
   2ef62:	b9b3      	cbnz	r3, 2ef92 <log_mgmt_cb_encode+0x3e>
    cb->enc.bytes_written = 0;
   2ef64:	2200      	movs	r2, #0
   2ef66:	9207      	str	r2, [sp, #28]
    cb->enc.write = &cbor_cnt_writer;
   2ef68:	4b19      	ldr	r3, [pc, #100]	; (2efd0 <log_mgmt_cb_encode+0x7c>)
   2ef6a:	9306      	str	r3, [sp, #24]
        cbor_encoder_init(&cnt_encoder, &cnt_writer.enc, 0);
   2ef6c:	a906      	add	r1, sp, #24
   2ef6e:	a802      	add	r0, sp, #8
   2ef70:	f7f9 ff60 	bl	28e34 <cbor_encoder_init>
        rc = log_mgmt_encode_entry(&cnt_encoder, entry, &entry_len, lmec);
   2ef74:	4633      	mov	r3, r6
   2ef76:	aa01      	add	r2, sp, #4
   2ef78:	4629      	mov	r1, r5
   2ef7a:	a802      	add	r0, sp, #8
   2ef7c:	f7ff fef4 	bl	2ed68 <log_mgmt_encode_entry>
        if (rc != 0) {
   2ef80:	b998      	cbnz	r0, 2efaa <log_mgmt_cb_encode+0x56>
        if (ctxt->rsp_len + entry_len + 1 > LOG_MGMT_MAX_RSP_LEN) {
   2ef82:	6862      	ldr	r2, [r4, #4]
   2ef84:	9b01      	ldr	r3, [sp, #4]
   2ef86:	441a      	add	r2, r3
   2ef88:	1c51      	adds	r1, r2, #1
   2ef8a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2ef8e:	d80e      	bhi.n	2efae <log_mgmt_cb_encode+0x5a>
        ctxt->rsp_len += entry_len;
   2ef90:	6062      	str	r2, [r4, #4]
    rc = log_mgmt_encode_entry(ctxt->enc, entry, NULL, lmec);
   2ef92:	4633      	mov	r3, r6
   2ef94:	2200      	movs	r2, #0
   2ef96:	4629      	mov	r1, r5
   2ef98:	68a0      	ldr	r0, [r4, #8]
   2ef9a:	f7ff fee5 	bl	2ed68 <log_mgmt_encode_entry>
    if (rc != 0) {
   2ef9e:	b920      	cbnz	r0, 2efaa <log_mgmt_cb_encode+0x56>
    ctxt->counter++;
   2efa0:	68e3      	ldr	r3, [r4, #12]
   2efa2:	3301      	adds	r3, #1
   2efa4:	60e3      	str	r3, [r4, #12]
    ctxt->last_enc_index = entry->index;
   2efa6:	68ab      	ldr	r3, [r5, #8]
   2efa8:	6023      	str	r3, [r4, #0]
}
   2efaa:	b008      	add	sp, #32
   2efac:	bd70      	pop	{r4, r5, r6, pc}
            if (ctxt->counter == 0) {
   2efae:	68e2      	ldr	r2, [r4, #12]
   2efb0:	b112      	cbz	r2, 2efb8 <log_mgmt_cb_encode+0x64>
            return -1 * LOG_MGMT_ERR_EUNKNOWN;
   2efb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2efb6:	e7f8      	b.n	2efaa <log_mgmt_cb_encode+0x56>
                entry->type = LOG_ETYPE_STRING;
   2efb8:	7daa      	ldrb	r2, [r5, #22]
   2efba:	f36f 0203 	bfc	r2, #0, #4
   2efbe:	75aa      	strb	r2, [r5, #22]
                snprintf((char *)entry->data, LOG_MGMT_MAX_RSP_LEN,
   2efc0:	4a04      	ldr	r2, [pc, #16]	; (2efd4 <log_mgmt_cb_encode+0x80>)
   2efc2:	f44f 7100 	mov.w	r1, #512	; 0x200
   2efc6:	68e8      	ldr	r0, [r5, #12]
   2efc8:	f7ff f817 	bl	2dffa <snprintf>
   2efcc:	e7f1      	b.n	2efb2 <log_mgmt_cb_encode+0x5e>
   2efce:	bf00      	nop
   2efd0:	0002e831 	.word	0x0002e831
   2efd4:	00033ba4 	.word	0x00033ba4

0002efd8 <log_mgmt_register_group>:

void
log_mgmt_register_group(void)
{
   2efd8:	b508      	push	{r3, lr}
    mgmt_register_group(&log_mgmt_group);
   2efda:	4802      	ldr	r0, [pc, #8]	; (2efe4 <log_mgmt_register_group+0xc>)
   2efdc:	f7ed f862 	bl	1c0a4 <mgmt_register_group>
}
   2efe0:	bd08      	pop	{r3, pc}
   2efe2:	bf00      	nop
   2efe4:	10001adc 	.word	0x10001adc

0002efe8 <stat_mgmt_list>:
/**
 * Command handler: stat list
 */
static int
stat_mgmt_list(struct mgmt_ctxt *ctxt)
{
   2efe8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2efea:	b087      	sub	sp, #28
   2efec:	4607      	mov	r7, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   2efee:	2202      	movs	r2, #2
   2eff0:	491e      	ldr	r1, [pc, #120]	; (2f06c <stat_mgmt_list+0x84>)
   2eff2:	f7f9 ffd1 	bl	28f98 <cbor_encode_text_string>
   2eff6:	4606      	mov	r6, r0
    int rc;
    int i;

    err = CborNoError;
    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
   2eff8:	2200      	movs	r2, #0
   2effa:	2300      	movs	r3, #0
   2effc:	4638      	mov	r0, r7
   2effe:	f7f9 ff56 	bl	28eae <cbor_encode_int>
   2f002:	4306      	orrs	r6, r0
   2f004:	2209      	movs	r2, #9
   2f006:	491a      	ldr	r1, [pc, #104]	; (2f070 <stat_mgmt_list+0x88>)
   2f008:	4638      	mov	r0, r7
   2f00a:	f7f9 ffc5 	bl	28f98 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "stat_list");
   2f00e:	4306      	orrs	r6, r0
    err |= cbor_encoder_create_array(&ctxt->encoder, &arr_enc,
   2f010:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2f014:	a901      	add	r1, sp, #4
   2f016:	4638      	mov	r0, r7
   2f018:	f7f9 ffc5 	bl	28fa6 <cbor_encoder_create_array>
   2f01c:	4306      	orrs	r6, r0
                                     CborIndefiniteLength);

    /* Iterate the list of stat groups, encoding each group's name in the CBOR
     * array.
     */
    for (i = 0; ; i++) {
   2f01e:	2500      	movs	r5, #0
        rc = stat_mgmt_impl_get_group(i, &group_name);
   2f020:	a905      	add	r1, sp, #20
   2f022:	4628      	mov	r0, r5
   2f024:	f7ec ffa2 	bl	1bf6c <stat_mgmt_impl_get_group>
   2f028:	4604      	mov	r4, r0
        if (rc == MGMT_ERR_ENOENT) {
   2f02a:	2805      	cmp	r0, #5
   2f02c:	d013      	beq.n	2f056 <stat_mgmt_list+0x6e>
            /* No more stat groups. */
            break;
        } else if (rc != 0) {
   2f02e:	b958      	cbnz	r0, 2f048 <stat_mgmt_list+0x60>
            /* Error. */
            cbor_encoder_close_container(&ctxt->encoder, &arr_enc);
            return rc;
        }

        err |= cbor_encode_text_stringz(&ctxt->encoder, group_name);
   2f030:	9c05      	ldr	r4, [sp, #20]
   2f032:	4620      	mov	r0, r4
   2f034:	f7e7 fd9b 	bl	16b6e <strlen>
   2f038:	4602      	mov	r2, r0
   2f03a:	4621      	mov	r1, r4
   2f03c:	4638      	mov	r0, r7
   2f03e:	f7f9 ffab 	bl	28f98 <cbor_encode_text_string>
   2f042:	4306      	orrs	r6, r0
    for (i = 0; ; i++) {
   2f044:	3501      	adds	r5, #1
        rc = stat_mgmt_impl_get_group(i, &group_name);
   2f046:	e7eb      	b.n	2f020 <stat_mgmt_list+0x38>
            cbor_encoder_close_container(&ctxt->encoder, &arr_enc);
   2f048:	a901      	add	r1, sp, #4
   2f04a:	4638      	mov	r0, r7
   2f04c:	f7f9 ffc5 	bl	28fda <cbor_encoder_close_container>

    if (err != 0) {
        return MGMT_ERR_ENOMEM;
    }
    return 0;
}
   2f050:	4620      	mov	r0, r4
   2f052:	b007      	add	sp, #28
   2f054:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err |= cbor_encoder_close_container(&ctxt->encoder, &arr_enc);
   2f056:	a901      	add	r1, sp, #4
   2f058:	4638      	mov	r0, r7
   2f05a:	f7f9 ffbe 	bl	28fda <cbor_encoder_close_container>
    if (err != 0) {
   2f05e:	ea56 0300 	orrs.w	r3, r6, r0
   2f062:	d101      	bne.n	2f068 <stat_mgmt_list+0x80>
    return 0;
   2f064:	2400      	movs	r4, #0
   2f066:	e7f3      	b.n	2f050 <stat_mgmt_list+0x68>
        return MGMT_ERR_ENOMEM;
   2f068:	2402      	movs	r4, #2
   2f06a:	e7f1      	b.n	2f050 <stat_mgmt_list+0x68>
   2f06c:	00030688 	.word	0x00030688
   2f070:	00033bc8 	.word	0x00033bc8

0002f074 <stat_mgmt_show>:
{
   2f074:	b570      	push	{r4, r5, r6, lr}
   2f076:	b0a4      	sub	sp, #144	; 0x90
   2f078:	4605      	mov	r5, r0
    struct cbor_attr_t attrs[] = {
   2f07a:	225c      	movs	r2, #92	; 0x5c
   2f07c:	2100      	movs	r1, #0
   2f07e:	a801      	add	r0, sp, #4
   2f080:	f7e7 fd4d 	bl	16b1e <memset>
   2f084:	4b26      	ldr	r3, [pc, #152]	; (2f120 <stat_mgmt_show+0xac>)
   2f086:	9300      	str	r3, [sp, #0]
   2f088:	2304      	movs	r3, #4
   2f08a:	f88d 3004 	strb.w	r3, [sp, #4]
   2f08e:	ab1c      	add	r3, sp, #112	; 0x70
   2f090:	9302      	str	r3, [sp, #8]
   2f092:	2320      	movs	r3, #32
   2f094:	930a      	str	r3, [sp, #40]	; 0x28
    err = cbor_read_object(&ctxt->it, attrs);
   2f096:	4669      	mov	r1, sp
   2f098:	f105 001c 	add.w	r0, r5, #28
   2f09c:	f7eb fdc3 	bl	1ac26 <cbor_read_object>
    if (err != 0) {
   2f0a0:	2800      	cmp	r0, #0
   2f0a2:	d138      	bne.n	2f116 <stat_mgmt_show+0xa2>
   2f0a4:	4604      	mov	r4, r0
   2f0a6:	2202      	movs	r2, #2
   2f0a8:	491e      	ldr	r1, [pc, #120]	; (2f124 <stat_mgmt_show+0xb0>)
   2f0aa:	4628      	mov	r0, r5
   2f0ac:	f7f9 ff74 	bl	28f98 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
   2f0b0:	4304      	orrs	r4, r0
    err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
   2f0b2:	2200      	movs	r2, #0
   2f0b4:	2300      	movs	r3, #0
   2f0b6:	4628      	mov	r0, r5
   2f0b8:	f7f9 fef9 	bl	28eae <cbor_encode_int>
   2f0bc:	4304      	orrs	r4, r0
   2f0be:	2204      	movs	r2, #4
   2f0c0:	4917      	ldr	r1, [pc, #92]	; (2f120 <stat_mgmt_show+0xac>)
   2f0c2:	4628      	mov	r0, r5
   2f0c4:	f7f9 ff68 	bl	28f98 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "name");
   2f0c8:	4304      	orrs	r4, r0
   2f0ca:	a81c      	add	r0, sp, #112	; 0x70
   2f0cc:	f7e7 fd4f 	bl	16b6e <strlen>
   2f0d0:	4602      	mov	r2, r0
   2f0d2:	a91c      	add	r1, sp, #112	; 0x70
   2f0d4:	4628      	mov	r0, r5
   2f0d6:	f7f9 ff5f 	bl	28f98 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, stat_name);
   2f0da:	4304      	orrs	r4, r0
   2f0dc:	2206      	movs	r2, #6
   2f0de:	4912      	ldr	r1, [pc, #72]	; (2f128 <stat_mgmt_show+0xb4>)
   2f0e0:	4628      	mov	r0, r5
   2f0e2:	f7f9 ff59 	bl	28f98 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "fields");
   2f0e6:	4304      	orrs	r4, r0
    err |= cbor_encoder_create_map(&ctxt->encoder, &map_enc,
   2f0e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2f0ec:	a918      	add	r1, sp, #96	; 0x60
   2f0ee:	4628      	mov	r0, r5
   2f0f0:	f7f9 ff5e 	bl	28fb0 <cbor_encoder_create_map>
   2f0f4:	4304      	orrs	r4, r0
    rc = stat_mgmt_impl_foreach_entry(stat_name, stat_mgmt_cb_encode,
   2f0f6:	aa18      	add	r2, sp, #96	; 0x60
   2f0f8:	490c      	ldr	r1, [pc, #48]	; (2f12c <stat_mgmt_show+0xb8>)
   2f0fa:	a81c      	add	r0, sp, #112	; 0x70
   2f0fc:	f7ec ff48 	bl	1bf90 <stat_mgmt_impl_foreach_entry>
   2f100:	4606      	mov	r6, r0
    err |= cbor_encoder_close_container(&ctxt->encoder, &map_enc);
   2f102:	a918      	add	r1, sp, #96	; 0x60
   2f104:	4628      	mov	r0, r5
   2f106:	f7f9 ff68 	bl	28fda <cbor_encoder_close_container>
    if (err != 0) {
   2f10a:	ea54 0300 	orrs.w	r3, r4, r0
   2f10e:	d104      	bne.n	2f11a <stat_mgmt_show+0xa6>
}
   2f110:	4630      	mov	r0, r6
   2f112:	b024      	add	sp, #144	; 0x90
   2f114:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_EINVAL;
   2f116:	2603      	movs	r6, #3
   2f118:	e7fa      	b.n	2f110 <stat_mgmt_show+0x9c>
        rc = MGMT_ERR_ENOMEM;
   2f11a:	2602      	movs	r6, #2
   2f11c:	e7f8      	b.n	2f110 <stat_mgmt_show+0x9c>
   2f11e:	bf00      	nop
   2f120:	00033b40 	.word	0x00033b40
   2f124:	00030688 	.word	0x00030688
   2f128:	00033bd4 	.word	0x00033bd4
   2f12c:	0002f131 	.word	0x0002f131

0002f130 <stat_mgmt_cb_encode>:
{
   2f130:	b570      	push	{r4, r5, r6, lr}
   2f132:	4605      	mov	r5, r0
   2f134:	460c      	mov	r4, r1
    err |= cbor_encode_text_stringz(enc, entry->name);
   2f136:	6806      	ldr	r6, [r0, #0]
   2f138:	4630      	mov	r0, r6
   2f13a:	f7e7 fd18 	bl	16b6e <strlen>
   2f13e:	4602      	mov	r2, r0
   2f140:	4631      	mov	r1, r6
   2f142:	4620      	mov	r0, r4
   2f144:	f7f9 ff28 	bl	28f98 <cbor_encode_text_string>
   2f148:	4606      	mov	r6, r0
    err |= cbor_encode_uint(enc, entry->value);
   2f14a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   2f14e:	4620      	mov	r0, r4
   2f150:	f7f9 fe75 	bl	28e3e <cbor_encode_uint>
    if (err != 0) {
   2f154:	ea50 0306 	orrs.w	r3, r0, r6
   2f158:	d101      	bne.n	2f15e <stat_mgmt_cb_encode+0x2e>
    return 0;
   2f15a:	2000      	movs	r0, #0
}
   2f15c:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_ENOMEM;
   2f15e:	2002      	movs	r0, #2
   2f160:	e7fc      	b.n	2f15c <stat_mgmt_cb_encode+0x2c>
	...

0002f164 <stat_mgmt_register_group>:

void
stat_mgmt_register_group(void)
{
   2f164:	b508      	push	{r3, lr}
    mgmt_register_group(&stat_mgmt_group);
   2f166:	4802      	ldr	r0, [pc, #8]	; (2f170 <stat_mgmt_register_group+0xc>)
   2f168:	f7ec ff9c 	bl	1c0a4 <mgmt_register_group>
}
   2f16c:	bd08      	pop	{r3, pc}
   2f16e:	bf00      	nop
   2f170:	10001b18 	.word	0x10001b18

0002f174 <uart_hal_blocking_tx>:
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   2f174:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   2f176:	6b80      	ldr	r0, [r0, #56]	; 0x38
   2f178:	b118      	cbz	r0, 2f182 <uart_hal_blocking_tx+0xe>

    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
   2f17a:	3801      	subs	r0, #1
   2f17c:	f000 fa26 	bl	2f5cc <hal_uart_blocking_tx>
}
   2f180:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   2f182:	f7e5 fa6f 	bl	14664 <hal_debugger_connected>
   2f186:	b100      	cbz	r0, 2f18a <uart_hal_blocking_tx+0x16>
   2f188:	be01      	bkpt	0x0001
   2f18a:	2300      	movs	r3, #0
   2f18c:	461a      	mov	r2, r3
   2f18e:	4619      	mov	r1, r3
   2f190:	4618      	mov	r0, r3
   2f192:	f7e5 fe07 	bl	14da4 <__assert_func>

0002f196 <uart_hal_start_rx>:
{
   2f196:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   2f198:	6b80      	ldr	r0, [r0, #56]	; 0x38
   2f19a:	b118      	cbz	r0, 2f1a4 <uart_hal_start_rx+0xe>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
   2f19c:	3801      	subs	r0, #1
   2f19e:	f000 f9e1 	bl	2f564 <hal_uart_start_rx>
}
   2f1a2:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   2f1a4:	f7e5 fa5e 	bl	14664 <hal_debugger_connected>
   2f1a8:	b100      	cbz	r0, 2f1ac <uart_hal_start_rx+0x16>
   2f1aa:	be01      	bkpt	0x0001
   2f1ac:	2300      	movs	r3, #0
   2f1ae:	461a      	mov	r2, r3
   2f1b0:	4619      	mov	r1, r3
   2f1b2:	4618      	mov	r0, r3
   2f1b4:	f7e5 fdf6 	bl	14da4 <__assert_func>

0002f1b8 <uart_hal_start_tx>:
{
   2f1b8:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   2f1ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
   2f1bc:	b118      	cbz	r0, 2f1c6 <uart_hal_start_tx+0xe>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
   2f1be:	3801      	subs	r0, #1
   2f1c0:	f000 f97e 	bl	2f4c0 <hal_uart_start_tx>
}
   2f1c4:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   2f1c6:	f7e5 fa4d 	bl	14664 <hal_debugger_connected>
   2f1ca:	b100      	cbz	r0, 2f1ce <uart_hal_start_tx+0x16>
   2f1cc:	be01      	bkpt	0x0001
   2f1ce:	2300      	movs	r3, #0
   2f1d0:	461a      	mov	r2, r3
   2f1d2:	4619      	mov	r1, r3
   2f1d4:	4618      	mov	r0, r3
   2f1d6:	f7e5 fde5 	bl	14da4 <__assert_func>

0002f1da <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
   2f1da:	b510      	push	{r4, lr}
   2f1dc:	b082      	sub	sp, #8
    return (intptr_t)(dev->ud_priv) - 1;
   2f1de:	6b84      	ldr	r4, [r0, #56]	; 0x38
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
                         ucp->uc_databits, ucp->uc_stopbits,
                         (enum hal_uart_parity)ucp->uc_parity,
   2f1e0:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
                         (enum hal_uart_flow_ctl)ucp->uc_flow_ctl);
   2f1e4:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
   2f1e8:	9201      	str	r2, [sp, #4]
   2f1ea:	9300      	str	r3, [sp, #0]
   2f1ec:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   2f1f0:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
   2f1f4:	6b01      	ldr	r1, [r0, #48]	; 0x30
   2f1f6:	1e60      	subs	r0, r4, #1
   2f1f8:	f000 fc4c 	bl	2fa94 <hal_uart_config>
    if (rc) {
   2f1fc:	b908      	cbnz	r0, 2f202 <uart_hal_resume+0x28>
        return OS_EINVAL;
    }

    return OS_OK;
}
   2f1fe:	b002      	add	sp, #8
   2f200:	bd10      	pop	{r4, pc}
        return OS_EINVAL;
   2f202:	2002      	movs	r0, #2
   2f204:	e7fb      	b.n	2f1fe <uart_hal_resume+0x24>

0002f206 <uart_hal_suspend>:
{
   2f206:	b570      	push	{r4, r5, r6, lr}
   2f208:	4606      	mov	r6, r0
   2f20a:	460c      	mov	r4, r1
   2f20c:	4615      	mov	r5, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
   2f20e:	f7e7 f9c7 	bl	165a0 <os_time_get>
   2f212:	1a24      	subs	r4, r4, r0
   2f214:	2c00      	cmp	r4, #0
   2f216:	dc06      	bgt.n	2f226 <uart_hal_suspend+0x20>
   2f218:	b13d      	cbz	r5, 2f22a <uart_hal_suspend+0x24>
    return (intptr_t)(dev->ud_priv) - 1;
   2f21a:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   2f21c:	3801      	subs	r0, #1
   2f21e:	f000 fcd3 	bl	2fbc8 <hal_uart_close>
    if (rc) {
   2f222:	b920      	cbnz	r0, 2f22e <uart_hal_suspend+0x28>
}
   2f224:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   2f226:	2002      	movs	r0, #2
   2f228:	e7fc      	b.n	2f224 <uart_hal_suspend+0x1e>
   2f22a:	2002      	movs	r0, #2
   2f22c:	e7fa      	b.n	2f224 <uart_hal_suspend+0x1e>
        return OS_EINVAL;
   2f22e:	2002      	movs	r0, #2
   2f230:	e7f8      	b.n	2f224 <uart_hal_suspend+0x1e>

0002f232 <uart_hal_close>:
{
   2f232:	b508      	push	{r3, lr}
    return (intptr_t)(dev->ud_priv) - 1;
   2f234:	6b80      	ldr	r0, [r0, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   2f236:	3801      	subs	r0, #1
   2f238:	f000 fcc6 	bl	2fbc8 <hal_uart_close>
    if (rc) {
   2f23c:	b900      	cbnz	r0, 2f240 <uart_hal_close+0xe>
}
   2f23e:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
   2f240:	2002      	movs	r0, #2
   2f242:	e7fc      	b.n	2f23e <uart_hal_close+0xc>

0002f244 <uart_hal_open>:
{
   2f244:	b550      	push	{r4, r6, lr}
   2f246:	b083      	sub	sp, #12
   2f248:	4606      	mov	r6, r0
    assert(dev->ud_priv);
   2f24a:	6b80      	ldr	r0, [r0, #56]	; 0x38
   2f24c:	2800      	cmp	r0, #0
   2f24e:	d02b      	beq.n	2f2a8 <uart_hal_open+0x64>
   2f250:	4614      	mov	r4, r2
    if (!uc) {
   2f252:	2a00      	cmp	r2, #0
   2f254:	d032      	beq.n	2f2bc <uart_hal_open+0x78>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
   2f256:	7ef3      	ldrb	r3, [r6, #27]
   2f258:	f013 0f02 	tst.w	r3, #2
   2f25c:	d130      	bne.n	2f2c0 <uart_hal_open+0x7c>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
   2f25e:	7913      	ldrb	r3, [r2, #4]
   2f260:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
   2f264:	79d3      	ldrb	r3, [r2, #7]
   2f266:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
   2f26a:	7993      	ldrb	r3, [r2, #6]
   2f26c:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
   2f270:	6813      	ldr	r3, [r2, #0]
   2f272:	6333      	str	r3, [r6, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
   2f274:	7953      	ldrb	r3, [r2, #5]
   2f276:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
   2f27a:	6953      	ldr	r3, [r2, #20]
   2f27c:	9300      	str	r3, [sp, #0]
   2f27e:	68d3      	ldr	r3, [r2, #12]
   2f280:	6912      	ldr	r2, [r2, #16]
   2f282:	68a1      	ldr	r1, [r4, #8]
   2f284:	3801      	subs	r0, #1
   2f286:	f000 f8fb 	bl	2f480 <hal_uart_init_cbs>
    if (rc) {
   2f28a:	b9e0      	cbnz	r0, 2f2c6 <uart_hal_open+0x82>
    return (intptr_t)(dev->ud_priv) - 1;
   2f28c:	6bb0      	ldr	r0, [r6, #56]	; 0x38
      uc->uc_stopbits, (enum hal_uart_parity)uc->uc_parity, (enum hal_uart_flow_ctl)uc->uc_flow_ctl);
   2f28e:	79a3      	ldrb	r3, [r4, #6]
   2f290:	79e2      	ldrb	r2, [r4, #7]
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
   2f292:	9201      	str	r2, [sp, #4]
   2f294:	9300      	str	r3, [sp, #0]
   2f296:	7963      	ldrb	r3, [r4, #5]
   2f298:	7922      	ldrb	r2, [r4, #4]
   2f29a:	6821      	ldr	r1, [r4, #0]
   2f29c:	3801      	subs	r0, #1
   2f29e:	f000 fbf9 	bl	2fa94 <hal_uart_config>
    if (rc) {
   2f2a2:	b170      	cbz	r0, 2f2c2 <uart_hal_open+0x7e>
        return OS_EINVAL;
   2f2a4:	2002      	movs	r0, #2
   2f2a6:	e00c      	b.n	2f2c2 <uart_hal_open+0x7e>
    assert(dev->ud_priv);
   2f2a8:	f7e5 f9dc 	bl	14664 <hal_debugger_connected>
   2f2ac:	b100      	cbz	r0, 2f2b0 <uart_hal_open+0x6c>
   2f2ae:	be01      	bkpt	0x0001
   2f2b0:	2300      	movs	r3, #0
   2f2b2:	461a      	mov	r2, r3
   2f2b4:	4619      	mov	r1, r3
   2f2b6:	4618      	mov	r0, r3
   2f2b8:	f7e5 fd74 	bl	14da4 <__assert_func>
        return OS_EINVAL;
   2f2bc:	2002      	movs	r0, #2
   2f2be:	e000      	b.n	2f2c2 <uart_hal_open+0x7e>
        return OS_EBUSY;
   2f2c0:	200b      	movs	r0, #11
}
   2f2c2:	b003      	add	sp, #12
   2f2c4:	bd50      	pop	{r4, r6, pc}
        return OS_EINVAL;
   2f2c6:	2002      	movs	r0, #2
   2f2c8:	e7fb      	b.n	2f2c2 <uart_hal_open+0x7e>
	...

0002f2cc <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
   2f2cc:	b570      	push	{r4, r5, r6, lr}
   2f2ce:	4604      	mov	r4, r0
   2f2d0:	460e      	mov	r6, r1
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
   2f2d2:	69c5      	ldr	r5, [r0, #28]
   2f2d4:	4628      	mov	r0, r5
   2f2d6:	f7e7 fc4a 	bl	16b6e <strlen>
   2f2da:	3801      	subs	r0, #1
   2f2dc:	5c28      	ldrb	r0, [r5, r0]
    if (!isdigit((unsigned char)ch)) {
   2f2de:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2f2e2:	2b09      	cmp	r3, #9
   2f2e4:	d816      	bhi.n	2f314 <uart_hal_init+0x48>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
   2f2e6:	f1a0 032f 	sub.w	r3, r0, #47	; 0x2f
   2f2ea:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
   2f2ec:	4b0a      	ldr	r3, [pc, #40]	; (2f318 <uart_hal_init+0x4c>)
   2f2ee:	6023      	str	r3, [r4, #0]
   2f2f0:	4b0a      	ldr	r3, [pc, #40]	; (2f31c <uart_hal_init+0x50>)
   2f2f2:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
   2f2f4:	4b0a      	ldr	r3, [pc, #40]	; (2f320 <uart_hal_init+0x54>)
   2f2f6:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
   2f2f8:	4b0a      	ldr	r3, [pc, #40]	; (2f324 <uart_hal_init+0x58>)
   2f2fa:	60a3      	str	r3, [r4, #8]

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
   2f2fc:	4b0a      	ldr	r3, [pc, #40]	; (2f328 <uart_hal_init+0x5c>)
   2f2fe:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
   2f300:	4b0a      	ldr	r3, [pc, #40]	; (2f32c <uart_hal_init+0x60>)
   2f302:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
   2f304:	4b0a      	ldr	r3, [pc, #40]	; (2f330 <uart_hal_init+0x64>)
   2f306:	62e3      	str	r3, [r4, #44]	; 0x2c

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
   2f308:	4631      	mov	r1, r6
   2f30a:	3830      	subs	r0, #48	; 0x30
   2f30c:	f000 f974 	bl	2f5f8 <hal_uart_init>

    return OS_OK;
   2f310:	2000      	movs	r0, #0
}
   2f312:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   2f314:	2002      	movs	r0, #2
   2f316:	e7fc      	b.n	2f312 <uart_hal_init+0x46>
   2f318:	0002f245 	.word	0x0002f245
   2f31c:	0002f233 	.word	0x0002f233
   2f320:	0002f207 	.word	0x0002f207
   2f324:	0002f1db 	.word	0x0002f1db
   2f328:	0002f1b9 	.word	0x0002f1b9
   2f32c:	0002f197 	.word	0x0002f197
   2f330:	0002f175 	.word	0x0002f175

0002f334 <apollo3_uart_irqh_x>:
    UARTn(0)->DR = data;
}

static void
apollo3_uart_irqh_x(int num)
{
   2f334:	b538      	push	{r3, r4, r5, lr}
   2f336:	4604      	mov	r4, r0

    os_trace_isr_enter();

    u = &uarts[num];

    status = UARTn(0)->IES;
   2f338:	4b2f      	ldr	r3, [pc, #188]	; (2f3f8 <apollo3_uart_irqh_x+0xc4>)
   2f33a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    UARTn(0)->IEC &= ~status;
   2f33c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2f33e:	ea22 0205 	bic.w	r2, r2, r5
   2f342:	645a      	str	r2, [r3, #68]	; 0x44

    if (status & (UART0_IES_TXRIS_Msk)) {
   2f344:	f015 0f20 	tst.w	r5, #32
   2f348:	d034      	beq.n	2f3b4 <apollo3_uart_irqh_x+0x80>
        if (u->u_tx_started) {
   2f34a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   2f34e:	4a2b      	ldr	r2, [pc, #172]	; (2f3fc <apollo3_uart_irqh_x+0xc8>)
   2f350:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   2f354:	f013 0f04 	tst.w	r3, #4
   2f358:	d02c      	beq.n	2f3b4 <apollo3_uart_irqh_x+0x80>
            while (1) {
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
   2f35a:	4b27      	ldr	r3, [pc, #156]	; (2f3f8 <apollo3_uart_irqh_x+0xc4>)
   2f35c:	699b      	ldr	r3, [r3, #24]
   2f35e:	f013 0f20 	tst.w	r3, #32
   2f362:	d127      	bne.n	2f3b4 <apollo3_uart_irqh_x+0x80>
                    break;
                }

                data = u->u_tx_func(u->u_func_arg);
   2f364:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2f368:	4a24      	ldr	r2, [pc, #144]	; (2f3fc <apollo3_uart_irqh_x+0xc8>)
   2f36a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2f36e:	689a      	ldr	r2, [r3, #8]
   2f370:	6918      	ldr	r0, [r3, #16]
   2f372:	4790      	blx	r2
                if (data < 0) {
   2f374:	2800      	cmp	r0, #0
   2f376:	db02      	blt.n	2f37e <apollo3_uart_irqh_x+0x4a>
                    apollo3_uart_disable_tx_irq();
                    u->u_tx_started = 0;
                    break;
                }

                UARTn(0)->DR = data;
   2f378:	4b1f      	ldr	r3, [pc, #124]	; (2f3f8 <apollo3_uart_irqh_x+0xc4>)
   2f37a:	6018      	str	r0, [r3, #0]
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
   2f37c:	e7ed      	b.n	2f35a <apollo3_uart_irqh_x+0x26>
                    if (u->u_tx_done) {
   2f37e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2f382:	4a1e      	ldr	r2, [pc, #120]	; (2f3fc <apollo3_uart_irqh_x+0xc8>)
   2f384:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2f388:	68d9      	ldr	r1, [r3, #12]
   2f38a:	b129      	cbz	r1, 2f398 <apollo3_uart_irqh_x+0x64>
                        u->u_tx_done(u->u_func_arg);
   2f38c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2f390:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2f394:	6918      	ldr	r0, [r3, #16]
   2f396:	4788      	blx	r1
    UARTn(0)->IER &= ~(AM_HAL_UART_INT_TX);
   2f398:	4a17      	ldr	r2, [pc, #92]	; (2f3f8 <apollo3_uart_irqh_x+0xc4>)
   2f39a:	6b93      	ldr	r3, [r2, #56]	; 0x38
   2f39c:	f023 0320 	bic.w	r3, r3, #32
   2f3a0:	6393      	str	r3, [r2, #56]	; 0x38
                    u->u_tx_started = 0;
   2f3a2:	4b16      	ldr	r3, [pc, #88]	; (2f3fc <apollo3_uart_irqh_x+0xc8>)
   2f3a4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   2f3a8:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
   2f3ac:	f36f 0182 	bfc	r1, #2, #1
   2f3b0:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
            }
        }
    }

    if (status & (UART0_IES_RXRIS_Msk | UART0_IES_RTRIS_Msk)) {
   2f3b4:	f015 0f50 	tst.w	r5, #80	; 0x50
   2f3b8:	d100      	bne.n	2f3bc <apollo3_uart_irqh_x+0x88>
            }
        }
    }

    os_trace_isr_exit();
}
   2f3ba:	bd38      	pop	{r3, r4, r5, pc}
        while (!(UARTn(0)->FR & UART0_FR_RXFE_Msk)) {
   2f3bc:	4b0e      	ldr	r3, [pc, #56]	; (2f3f8 <apollo3_uart_irqh_x+0xc4>)
   2f3be:	699b      	ldr	r3, [r3, #24]
   2f3c0:	f013 0f10 	tst.w	r3, #16
   2f3c4:	d1f9      	bne.n	2f3ba <apollo3_uart_irqh_x+0x86>
            u->u_rx_buf = UARTn(0)->DR;
   2f3c6:	4b0c      	ldr	r3, [pc, #48]	; (2f3f8 <apollo3_uart_irqh_x+0xc4>)
   2f3c8:	6819      	ldr	r1, [r3, #0]
   2f3ca:	b2c9      	uxtb	r1, r1
   2f3cc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2f3d0:	4a0a      	ldr	r2, [pc, #40]	; (2f3fc <apollo3_uart_irqh_x+0xc8>)
   2f3d2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2f3d6:	7059      	strb	r1, [r3, #1]
            rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   2f3d8:	685a      	ldr	r2, [r3, #4]
   2f3da:	6918      	ldr	r0, [r3, #16]
   2f3dc:	4790      	blx	r2
            if (rc < 0) {
   2f3de:	2800      	cmp	r0, #0
   2f3e0:	daec      	bge.n	2f3bc <apollo3_uart_irqh_x+0x88>
                u->u_rx_stall = 1;
   2f3e2:	4a06      	ldr	r2, [pc, #24]	; (2f3fc <apollo3_uart_irqh_x+0xc8>)
   2f3e4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2f3e8:	f812 3034 	ldrb.w	r3, [r2, r4, lsl #3]
   2f3ec:	f043 0302 	orr.w	r3, r3, #2
   2f3f0:	f802 3034 	strb.w	r3, [r2, r4, lsl #3]
                break;
   2f3f4:	e7e1      	b.n	2f3ba <apollo3_uart_irqh_x+0x86>
   2f3f6:	bf00      	nop
   2f3f8:	4001c000 	.word	0x4001c000
   2f3fc:	10005210 	.word	0x10005210

0002f400 <apollo3_uart_irqh_0>:

static void apollo3_uart_irqh_0(void) { apollo3_uart_irqh_x(0); }
   2f400:	b508      	push	{r3, lr}
   2f402:	2000      	movs	r0, #0
   2f404:	f7ff ff96 	bl	2f334 <apollo3_uart_irqh_x>
   2f408:	bd08      	pop	{r3, pc}

0002f40a <apollo3_uart_irqh_1>:
static void apollo3_uart_irqh_1(void) { apollo3_uart_irqh_x(1); }
   2f40a:	b508      	push	{r3, lr}
   2f40c:	2001      	movs	r0, #1
   2f40e:	f7ff ff91 	bl	2f334 <apollo3_uart_irqh_x>
   2f412:	bd08      	pop	{r3, pc}

0002f414 <apollo3_uart_irq_info>:
apollo3_uart_irq_info(int port, int *out_irqn, apollo3_uart_irqh_t **out_irqh)
{
    apollo3_uart_irqh_t *irqh;
    int irqn;

    switch (port) {
   2f414:	b148      	cbz	r0, 2f42a <apollo3_uart_irq_info+0x16>
   2f416:	2801      	cmp	r0, #1
   2f418:	d10a      	bne.n	2f430 <apollo3_uart_irq_info+0x1c>
        irqn = UART0_IRQn;
        irqh = apollo3_uart_irqh_0;
        break;

    case 1:
        irqn = UART1_IRQn;
   2f41a:	2010      	movs	r0, #16
        irqh = apollo3_uart_irqh_1;
   2f41c:	4b07      	ldr	r3, [pc, #28]	; (2f43c <apollo3_uart_irq_info+0x28>)

    default:
        return -1;
    }

    if (out_irqn != NULL) {
   2f41e:	b101      	cbz	r1, 2f422 <apollo3_uart_irq_info+0xe>
        *out_irqn = irqn;
   2f420:	6008      	str	r0, [r1, #0]
    }
    if (out_irqh != NULL) {
   2f422:	b142      	cbz	r2, 2f436 <apollo3_uart_irq_info+0x22>
        *out_irqh = irqh;
   2f424:	6013      	str	r3, [r2, #0]
    }
    return 0;
   2f426:	2000      	movs	r0, #0
   2f428:	4770      	bx	lr
    switch (port) {
   2f42a:	200f      	movs	r0, #15
   2f42c:	4b04      	ldr	r3, [pc, #16]	; (2f440 <apollo3_uart_irq_info+0x2c>)
   2f42e:	e7f6      	b.n	2f41e <apollo3_uart_irq_info+0xa>
   2f430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f434:	4770      	bx	lr
    return 0;
   2f436:	2000      	movs	r0, #0
}
   2f438:	4770      	bx	lr
   2f43a:	bf00      	nop
   2f43c:	0002f40b 	.word	0x0002f40b
   2f440:	0002f401 	.word	0x0002f401

0002f444 <apollo3_uart_set_nvic>:

static void
apollo3_uart_set_nvic(int port)
{
   2f444:	b500      	push	{lr}
   2f446:	b083      	sub	sp, #12
    apollo3_uart_irqh_t *irqh;
    int irqn;
    int rc;

    rc = apollo3_uart_irq_info(port, &irqn, &irqh);
   2f448:	aa01      	add	r2, sp, #4
   2f44a:	4669      	mov	r1, sp
   2f44c:	f7ff ffe2 	bl	2f414 <apollo3_uart_irq_info>
    assert(rc == 0);
   2f450:	b950      	cbnz	r0, 2f468 <apollo3_uart_set_nvic+0x24>

    NVIC_SetVector(irqn, (uint32_t)irqh);
   2f452:	f99d 3000 	ldrsb.w	r3, [sp]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   2f456:	4a09      	ldr	r2, [pc, #36]	; (2f47c <apollo3_uart_set_nvic+0x38>)
   2f458:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   2f45a:	3310      	adds	r3, #16
   2f45c:	9901      	ldr	r1, [sp, #4]
   2f45e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   2f462:	b003      	add	sp, #12
   2f464:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   2f468:	f7e5 f8fc 	bl	14664 <hal_debugger_connected>
   2f46c:	b100      	cbz	r0, 2f470 <apollo3_uart_set_nvic+0x2c>
   2f46e:	be01      	bkpt	0x0001
   2f470:	2300      	movs	r3, #0
   2f472:	461a      	mov	r2, r3
   2f474:	4619      	mov	r1, r3
   2f476:	4618      	mov	r0, r3
   2f478:	f7e5 fc94 	bl	14da4 <__assert_func>
   2f47c:	e000ed00 	.word	0xe000ed00

0002f480 <hal_uart_init_cbs>:
    if (port >= UART_CNT) {
   2f480:	2801      	cmp	r0, #1
   2f482:	dc14      	bgt.n	2f4ae <hal_uart_init_cbs+0x2e>
{
   2f484:	b430      	push	{r4, r5}
    if (u->u_open) {
   2f486:	eb00 0440 	add.w	r4, r0, r0, lsl #1
   2f48a:	4d0c      	ldr	r5, [pc, #48]	; (2f4bc <hal_uart_init_cbs+0x3c>)
   2f48c:	f815 4034 	ldrb.w	r4, [r5, r4, lsl #3]
   2f490:	f014 0f01 	tst.w	r4, #1
   2f494:	d10e      	bne.n	2f4b4 <hal_uart_init_cbs+0x34>
    u->u_rx_func = rx_func;
   2f496:	eb00 0440 	add.w	r4, r0, r0, lsl #1
   2f49a:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   2f49e:	6063      	str	r3, [r4, #4]
    u->u_tx_func = tx_func;
   2f4a0:	60a1      	str	r1, [r4, #8]
    u->u_tx_done = tx_done;
   2f4a2:	60e2      	str	r2, [r4, #12]
    u->u_func_arg = arg;
   2f4a4:	9b02      	ldr	r3, [sp, #8]
   2f4a6:	6123      	str	r3, [r4, #16]
    return 0;
   2f4a8:	2000      	movs	r0, #0
}
   2f4aa:	bc30      	pop	{r4, r5}
   2f4ac:	4770      	bx	lr
        return -1;
   2f4ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2f4b2:	4770      	bx	lr
        return -1;
   2f4b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f4b8:	e7f7      	b.n	2f4aa <hal_uart_init_cbs+0x2a>
   2f4ba:	bf00      	nop
   2f4bc:	10005210 	.word	0x10005210

0002f4c0 <hal_uart_start_tx>:
    if (port >= UART_CNT) {
   2f4c0:	2801      	cmp	r0, #1
   2f4c2:	dc49      	bgt.n	2f558 <hal_uart_start_tx+0x98>
{
   2f4c4:	b538      	push	{r3, r4, r5, lr}
   2f4c6:	4604      	mov	r4, r0
    if (!u->u_open) {
   2f4c8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   2f4cc:	4a23      	ldr	r2, [pc, #140]	; (2f55c <hal_uart_start_tx+0x9c>)
   2f4ce:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   2f4d2:	f013 0f01 	tst.w	r3, #1
   2f4d6:	d100      	bne.n	2f4da <hal_uart_start_tx+0x1a>
}
   2f4d8:	bd38      	pop	{r3, r4, r5, pc}
    OS_ENTER_CRITICAL(sr);
   2f4da:	f7e7 f927 	bl	1672c <os_arch_save_sr>
   2f4de:	4605      	mov	r5, r0
    if (u->u_tx_started == 0) {
   2f4e0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2f4e4:	4a1d      	ldr	r2, [pc, #116]	; (2f55c <hal_uart_start_tx+0x9c>)
   2f4e6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   2f4ea:	f013 0f04 	tst.w	r3, #4
   2f4ee:	d11f      	bne.n	2f530 <hal_uart_start_tx+0x70>
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
   2f4f0:	4b1b      	ldr	r3, [pc, #108]	; (2f560 <hal_uart_start_tx+0xa0>)
   2f4f2:	699b      	ldr	r3, [r3, #24]
   2f4f4:	f013 0f20 	tst.w	r3, #32
   2f4f8:	d10c      	bne.n	2f514 <hal_uart_start_tx+0x54>
            data = u->u_tx_func(u->u_func_arg);
   2f4fa:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2f4fe:	4a17      	ldr	r2, [pc, #92]	; (2f55c <hal_uart_start_tx+0x9c>)
   2f500:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2f504:	689a      	ldr	r2, [r3, #8]
   2f506:	6918      	ldr	r0, [r3, #16]
   2f508:	4790      	blx	r2
            if (data < 0) {
   2f50a:	2800      	cmp	r0, #0
   2f50c:	db14      	blt.n	2f538 <hal_uart_start_tx+0x78>
            UARTn(0)->DR = data;
   2f50e:	4b14      	ldr	r3, [pc, #80]	; (2f560 <hal_uart_start_tx+0xa0>)
   2f510:	6018      	str	r0, [r3, #0]
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
   2f512:	e7ed      	b.n	2f4f0 <hal_uart_start_tx+0x30>
                u->u_tx_started = 1;
   2f514:	4a11      	ldr	r2, [pc, #68]	; (2f55c <hal_uart_start_tx+0x9c>)
   2f516:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2f51a:	f812 3034 	ldrb.w	r3, [r2, r4, lsl #3]
   2f51e:	f043 0304 	orr.w	r3, r3, #4
   2f522:	f802 3034 	strb.w	r3, [r2, r4, lsl #3]
    UARTn(0)->IER |= (AM_HAL_UART_INT_TX);
   2f526:	4a0e      	ldr	r2, [pc, #56]	; (2f560 <hal_uart_start_tx+0xa0>)
   2f528:	6b93      	ldr	r3, [r2, #56]	; 0x38
   2f52a:	f043 0320 	orr.w	r3, r3, #32
   2f52e:	6393      	str	r3, [r2, #56]	; 0x38
    OS_EXIT_CRITICAL(sr);
   2f530:	4628      	mov	r0, r5
   2f532:	f7e7 f901 	bl	16738 <os_arch_restore_sr>
   2f536:	e7cf      	b.n	2f4d8 <hal_uart_start_tx+0x18>
                if (u->u_tx_done) {
   2f538:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2f53c:	4a07      	ldr	r2, [pc, #28]	; (2f55c <hal_uart_start_tx+0x9c>)
   2f53e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2f542:	68da      	ldr	r2, [r3, #12]
   2f544:	2a00      	cmp	r2, #0
   2f546:	d0f3      	beq.n	2f530 <hal_uart_start_tx+0x70>
                    u->u_tx_done(u->u_func_arg);
   2f548:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2f54c:	4b03      	ldr	r3, [pc, #12]	; (2f55c <hal_uart_start_tx+0x9c>)
   2f54e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   2f552:	6920      	ldr	r0, [r4, #16]
   2f554:	4790      	blx	r2
   2f556:	e7eb      	b.n	2f530 <hal_uart_start_tx+0x70>
   2f558:	4770      	bx	lr
   2f55a:	bf00      	nop
   2f55c:	10005210 	.word	0x10005210
   2f560:	4001c000 	.word	0x4001c000

0002f564 <hal_uart_start_rx>:
    if (port >= UART_CNT) {
   2f564:	2801      	cmp	r0, #1
   2f566:	dc2c      	bgt.n	2f5c2 <hal_uart_start_rx+0x5e>
{
   2f568:	b538      	push	{r3, r4, r5, lr}
   2f56a:	4604      	mov	r4, r0
    if (!u->u_open) {
   2f56c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   2f570:	4a14      	ldr	r2, [pc, #80]	; (2f5c4 <hal_uart_start_rx+0x60>)
   2f572:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   2f576:	f013 0f01 	tst.w	r3, #1
   2f57a:	d002      	beq.n	2f582 <hal_uart_start_rx+0x1e>
    if (u->u_rx_stall) {
   2f57c:	f013 0f02 	tst.w	r3, #2
   2f580:	d100      	bne.n	2f584 <hal_uart_start_rx+0x20>
}
   2f582:	bd38      	pop	{r3, r4, r5, pc}
        OS_ENTER_CRITICAL(sr);
   2f584:	f7e7 f8d2 	bl	1672c <os_arch_save_sr>
   2f588:	4605      	mov	r5, r0
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   2f58a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2f58e:	4a0d      	ldr	r2, [pc, #52]	; (2f5c4 <hal_uart_start_rx+0x60>)
   2f590:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2f594:	685a      	ldr	r2, [r3, #4]
   2f596:	7859      	ldrb	r1, [r3, #1]
   2f598:	6918      	ldr	r0, [r3, #16]
   2f59a:	4790      	blx	r2
        if (rc == 0) {
   2f59c:	b968      	cbnz	r0, 2f5ba <hal_uart_start_rx+0x56>
            u->u_rx_stall = 0;
   2f59e:	4b09      	ldr	r3, [pc, #36]	; (2f5c4 <hal_uart_start_rx+0x60>)
   2f5a0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2f5a4:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
   2f5a8:	f36f 0241 	bfc	r2, #1, #1
   2f5ac:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
    UARTn(0)->IER |= (AM_HAL_UART_INT_RX |
   2f5b0:	4a05      	ldr	r2, [pc, #20]	; (2f5c8 <hal_uart_start_rx+0x64>)
   2f5b2:	6b93      	ldr	r3, [r2, #56]	; 0x38
   2f5b4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   2f5b8:	6393      	str	r3, [r2, #56]	; 0x38
        OS_EXIT_CRITICAL(sr);
   2f5ba:	4628      	mov	r0, r5
   2f5bc:	f7e7 f8bc 	bl	16738 <os_arch_restore_sr>
   2f5c0:	e7df      	b.n	2f582 <hal_uart_start_rx+0x1e>
   2f5c2:	4770      	bx	lr
   2f5c4:	10005210 	.word	0x10005210
   2f5c8:	4001c000 	.word	0x4001c000

0002f5cc <hal_uart_blocking_tx>:
    if (port >= UART_CNT) {
   2f5cc:	2801      	cmp	r0, #1
   2f5ce:	dc0e      	bgt.n	2f5ee <hal_uart_blocking_tx+0x22>
    if (!u->u_open) {
   2f5d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   2f5d4:	4b06      	ldr	r3, [pc, #24]	; (2f5f0 <hal_uart_blocking_tx+0x24>)
   2f5d6:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
   2f5da:	f013 0f01 	tst.w	r3, #1
   2f5de:	d006      	beq.n	2f5ee <hal_uart_blocking_tx+0x22>
    while (UARTn(0)->FR & UART0_FR_TXFF_Msk);
   2f5e0:	4b04      	ldr	r3, [pc, #16]	; (2f5f4 <hal_uart_blocking_tx+0x28>)
   2f5e2:	699b      	ldr	r3, [r3, #24]
   2f5e4:	f013 0f20 	tst.w	r3, #32
   2f5e8:	d1fa      	bne.n	2f5e0 <hal_uart_blocking_tx+0x14>
    UARTn(0)->DR = data;
   2f5ea:	4b02      	ldr	r3, [pc, #8]	; (2f5f4 <hal_uart_blocking_tx+0x28>)
   2f5ec:	6019      	str	r1, [r3, #0]
}
   2f5ee:	4770      	bx	lr
   2f5f0:	10005210 	.word	0x10005210
   2f5f4:	4001c000 	.word	0x4001c000

0002f5f8 <hal_uart_init>:
    struct apollo3_uart_cfg *cfg;
    am_hal_gpio_pincfg_t pincfg;

    cfg = arg;

    if (port >= UART_CNT) {
   2f5f8:	2801      	cmp	r0, #1
   2f5fa:	f300 822f 	bgt.w	2fa5c <hal_uart_init+0x464>
{
   2f5fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f600:	b083      	sub	sp, #12
   2f602:	4604      	mov	r4, r0
   2f604:	460f      	mov	r7, r1
        return SYS_EINVAL;
    }

    am_hal_uart_initialize(port, &(uarts[port].uart_handle));
   2f606:	4e92      	ldr	r6, [pc, #584]	; (2f850 <hal_uart_init+0x258>)
   2f608:	0045      	lsls	r5, r0, #1
   2f60a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   2f60e:	00db      	lsls	r3, r3, #3
   2f610:	3310      	adds	r3, #16
   2f612:	4433      	add	r3, r6
   2f614:	1d19      	adds	r1, r3, #4
   2f616:	f000 fb71 	bl	2fcfc <am_hal_uart_initialize>

    am_hal_uart_power_control(uarts[port].uart_handle, AM_HAL_SYSCTRL_WAKE, false);
   2f61a:	4425      	add	r5, r4
   2f61c:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   2f620:	2200      	movs	r2, #0
   2f622:	4611      	mov	r1, r2
   2f624:	6968      	ldr	r0, [r5, #20]
   2f626:	f000 fca3 	bl	2ff70 <am_hal_uart_power_control>

    am_hal_uart_clock_speed_e eUartClockSpeed = eUART_CLK_SPEED_DEFAULT;
   2f62a:	2100      	movs	r1, #0
   2f62c:	f88d 1007 	strb.w	r1, [sp, #7]
    am_hal_uart_control(uarts[port].uart_handle, AM_HAL_UART_CONTROL_CLKSEL, &eUartClockSpeed);
   2f630:	f10d 0207 	add.w	r2, sp, #7
   2f634:	6968      	ldr	r0, [r5, #20]
   2f636:	f000 fd0f 	bl	30058 <am_hal_uart_control>
    am_hal_uart_configure(uarts[port].uart_handle, &g_sUartConfig);
   2f63a:	4986      	ldr	r1, [pc, #536]	; (2f854 <hal_uart_init+0x25c>)
   2f63c:	6968      	ldr	r0, [r5, #20]
   2f63e:	f000 fbfb 	bl	2fe38 <am_hal_uart_configure>

    switch (port) {
   2f642:	b12c      	cbz	r4, 2f650 <hal_uart_init+0x58>
   2f644:	2c01      	cmp	r4, #1
   2f646:	d061      	beq.n	2f70c <hal_uart_init+0x114>
   2f648:	f06f 0001 	mvn.w	r0, #1
    }

    apollo3_uart_set_nvic(port);

    return 0;
}
   2f64c:	b003      	add	sp, #12
   2f64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        switch (cfg->suc_pin_tx) {
   2f650:	f997 3000 	ldrsb.w	r3, [r7]
   2f654:	3b01      	subs	r3, #1
   2f656:	2b2f      	cmp	r3, #47	; 0x2f
   2f658:	f200 8203 	bhi.w	2fa62 <hal_uart_init+0x46a>
   2f65c:	e8df f013 	tbh	[pc, r3, lsl #1]
   2f660:	02010042 	.word	0x02010042
   2f664:	02010201 	.word	0x02010201
   2f668:	02010201 	.word	0x02010201
   2f66c:	0201004c 	.word	0x0201004c
   2f670:	02010201 	.word	0x02010201
   2f674:	02010201 	.word	0x02010201
   2f678:	02010201 	.word	0x02010201
   2f67c:	00510201 	.word	0x00510201
   2f680:	02010201 	.word	0x02010201
   2f684:	00470201 	.word	0x00470201
   2f688:	00300201 	.word	0x00300201
   2f68c:	02010201 	.word	0x02010201
   2f690:	00510201 	.word	0x00510201
   2f694:	00510201 	.word	0x00510201
   2f698:	00470201 	.word	0x00470201
   2f69c:	02010201 	.word	0x02010201
   2f6a0:	02010201 	.word	0x02010201
   2f6a4:	02010201 	.word	0x02010201
   2f6a8:	02010201 	.word	0x02010201
   2f6ac:	02010030 	.word	0x02010030
   2f6b0:	02010051 	.word	0x02010051
   2f6b4:	00510201 	.word	0x00510201
   2f6b8:	02010201 	.word	0x02010201
   2f6bc:	00300201 	.word	0x00300201
            pincfg.uFuncSel = 0;
   2f6c0:	2500      	movs	r5, #0
   2f6c2:	f36f 0502 	bfc	r5, #0, #3
    pincfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA;
   2f6c6:	f36f 2509 	bfc	r5, #8, #2
    am_hal_gpio_pinconfig(cfg->suc_pin_tx, pincfg);
   2f6ca:	4629      	mov	r1, r5
   2f6cc:	f997 0000 	ldrsb.w	r0, [r7]
   2f6d0:	f7fd fd3a 	bl	2d148 <am_hal_gpio_pinconfig>
    switch (port) {
   2f6d4:	2c00      	cmp	r4, #0
   2f6d6:	d062      	beq.n	2f79e <hal_uart_init+0x1a6>
   2f6d8:	2c01      	cmp	r4, #1
   2f6da:	f000 80bd 	beq.w	2f858 <hal_uart_init+0x260>
   2f6de:	f06f 0001 	mvn.w	r0, #1
   2f6e2:	e7b3      	b.n	2f64c <hal_uart_init+0x54>
            pincfg.uFuncSel = 2;
   2f6e4:	2500      	movs	r5, #0
   2f6e6:	2302      	movs	r3, #2
   2f6e8:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f6ec:	e7eb      	b.n	2f6c6 <hal_uart_init+0xce>
            pincfg.uFuncSel = 4;
   2f6ee:	2500      	movs	r5, #0
   2f6f0:	2304      	movs	r3, #4
   2f6f2:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f6f6:	e7e6      	b.n	2f6c6 <hal_uart_init+0xce>
            pincfg.uFuncSel = 5;
   2f6f8:	2500      	movs	r5, #0
   2f6fa:	2305      	movs	r3, #5
   2f6fc:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f700:	e7e1      	b.n	2f6c6 <hal_uart_init+0xce>
            pincfg.uFuncSel = 6;
   2f702:	2500      	movs	r5, #0
   2f704:	2306      	movs	r3, #6
   2f706:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f70a:	e7dc      	b.n	2f6c6 <hal_uart_init+0xce>
        switch (cfg->suc_pin_tx) {
   2f70c:	f997 3000 	ldrsb.w	r3, [r7]
   2f710:	3b08      	subs	r3, #8
   2f712:	2b26      	cmp	r3, #38	; 0x26
   2f714:	f200 81a8 	bhi.w	2fa68 <hal_uart_init+0x470>
   2f718:	e8df f013 	tbh	[pc, r3, lsl #1]
   2f71c:	01a6003a 	.word	0x01a6003a
   2f720:	01a60027 	.word	0x01a60027
   2f724:	01a6003f 	.word	0x01a6003f
   2f728:	01a60030 	.word	0x01a60030
   2f72c:	01a601a6 	.word	0x01a601a6
   2f730:	01a6003a 	.word	0x01a6003a
   2f734:	01a60035 	.word	0x01a60035
   2f738:	01a601a6 	.word	0x01a601a6
   2f73c:	01a60027 	.word	0x01a60027
   2f740:	01a601a6 	.word	0x01a601a6
   2f744:	01a601a6 	.word	0x01a601a6
   2f748:	01a601a6 	.word	0x01a601a6
   2f74c:	01a601a6 	.word	0x01a601a6
   2f750:	003001a6 	.word	0x003001a6
   2f754:	003501a6 	.word	0x003501a6
   2f758:	002b01a6 	.word	0x002b01a6
   2f75c:	01a601a6 	.word	0x01a601a6
   2f760:	01a60027 	.word	0x01a60027
   2f764:	01a601a6 	.word	0x01a601a6
   2f768:	003a      	.short	0x003a
            pincfg.uFuncSel = 0;
   2f76a:	2500      	movs	r5, #0
   2f76c:	f36f 0502 	bfc	r5, #0, #3
            break;
   2f770:	e7a9      	b.n	2f6c6 <hal_uart_init+0xce>
            pincfg.uFuncSel = 1;
   2f772:	2500      	movs	r5, #0
   2f774:	2301      	movs	r3, #1
   2f776:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f77a:	e7a4      	b.n	2f6c6 <hal_uart_init+0xce>
            pincfg.uFuncSel = 2;
   2f77c:	2500      	movs	r5, #0
   2f77e:	2302      	movs	r3, #2
   2f780:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f784:	e79f      	b.n	2f6c6 <hal_uart_init+0xce>
            pincfg.uFuncSel = 5;
   2f786:	2500      	movs	r5, #0
   2f788:	2305      	movs	r3, #5
   2f78a:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f78e:	e79a      	b.n	2f6c6 <hal_uart_init+0xce>
            pincfg.uFuncSel = 6;
   2f790:	2500      	movs	r5, #0
   2f792:	2306      	movs	r3, #6
   2f794:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f798:	e795      	b.n	2f6c6 <hal_uart_init+0xce>
            pincfg.uFuncSel = 7;
   2f79a:	2507      	movs	r5, #7
            break;
   2f79c:	e793      	b.n	2f6c6 <hal_uart_init+0xce>
        switch (cfg->suc_pin_rx) {
   2f79e:	f997 3001 	ldrsb.w	r3, [r7, #1]
   2f7a2:	3b02      	subs	r3, #2
   2f7a4:	2b2f      	cmp	r3, #47	; 0x2f
   2f7a6:	f200 8162 	bhi.w	2fa6e <hal_uart_init+0x476>
   2f7aa:	e8df f013 	tbh	[pc, r3, lsl #1]
   2f7ae:	0044      	.short	0x0044
   2f7b0:	01600160 	.word	0x01600160
   2f7b4:	01600160 	.word	0x01600160
   2f7b8:	01600160 	.word	0x01600160
   2f7bc:	01600160 	.word	0x01600160
   2f7c0:	0160004c 	.word	0x0160004c
   2f7c4:	01600160 	.word	0x01600160
   2f7c8:	01600160 	.word	0x01600160
   2f7cc:	0160004c 	.word	0x0160004c
   2f7d0:	01600160 	.word	0x01600160
   2f7d4:	01600048 	.word	0x01600048
   2f7d8:	01600030 	.word	0x01600030
   2f7dc:	01600160 	.word	0x01600160
   2f7e0:	01600030 	.word	0x01600030
   2f7e4:	0160004c 	.word	0x0160004c
   2f7e8:	01600048 	.word	0x01600048
   2f7ec:	004c0160 	.word	0x004c0160
   2f7f0:	01600160 	.word	0x01600160
   2f7f4:	01600160 	.word	0x01600160
   2f7f8:	00300160 	.word	0x00300160
   2f7fc:	01600160 	.word	0x01600160
   2f800:	01600160 	.word	0x01600160
   2f804:	0160004c 	.word	0x0160004c
   2f808:	01600160 	.word	0x01600160
   2f80c:	0030      	.short	0x0030
            pincfg.uFuncSel = 0;
   2f80e:	f36f 0502 	bfc	r5, #0, #3
    am_hal_gpio_pinconfig(cfg->suc_pin_rx, pincfg);
   2f812:	4629      	mov	r1, r5
   2f814:	f997 0001 	ldrsb.w	r0, [r7, #1]
   2f818:	f7fd fc96 	bl	2d148 <am_hal_gpio_pinconfig>
    if (cfg->suc_pin_rts >= 0) {
   2f81c:	f997 0002 	ldrsb.w	r0, [r7, #2]
   2f820:	2800      	cmp	r0, #0
   2f822:	f2c0 80b3 	blt.w	2f98c <hal_uart_init+0x394>
      switch (port) {
   2f826:	2c00      	cmp	r4, #0
   2f828:	d062      	beq.n	2f8f0 <hal_uart_init+0x2f8>
   2f82a:	2c01      	cmp	r4, #1
   2f82c:	f000 8090 	beq.w	2f950 <hal_uart_init+0x358>
   2f830:	f06f 0001 	mvn.w	r0, #1
   2f834:	e70a      	b.n	2f64c <hal_uart_init+0x54>
            pincfg.uFuncSel = 2;
   2f836:	2302      	movs	r3, #2
   2f838:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f83c:	e7e9      	b.n	2f812 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 4;
   2f83e:	2304      	movs	r3, #4
   2f840:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f844:	e7e5      	b.n	2f812 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 6;
   2f846:	2306      	movs	r3, #6
   2f848:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f84c:	e7e1      	b.n	2f812 <hal_uart_init+0x21a>
   2f84e:	bf00      	nop
   2f850:	10005210 	.word	0x10005210
   2f854:	00033bdc 	.word	0x00033bdc
        switch (cfg->suc_pin_rx) {
   2f858:	f997 3001 	ldrsb.w	r3, [r7, #1]
   2f85c:	3b02      	subs	r3, #2
   2f85e:	2b2d      	cmp	r3, #45	; 0x2d
   2f860:	f200 8108 	bhi.w	2fa74 <hal_uart_init+0x47c>
   2f864:	e8df f013 	tbh	[pc, r3, lsl #1]
   2f868:	0106002e 	.word	0x0106002e
   2f86c:	01060039 	.word	0x01060039
   2f870:	01060106 	.word	0x01060106
   2f874:	003d0106 	.word	0x003d0106
   2f878:	01060106 	.word	0x01060106
   2f87c:	00410106 	.word	0x00410106
   2f880:	00350106 	.word	0x00350106
   2f884:	01060106 	.word	0x01060106
   2f888:	003d0106 	.word	0x003d0106
   2f88c:	00390106 	.word	0x00390106
   2f890:	01060106 	.word	0x01060106
   2f894:	002e0106 	.word	0x002e0106
   2f898:	01060106 	.word	0x01060106
   2f89c:	01060106 	.word	0x01060106
   2f8a0:	01060106 	.word	0x01060106
   2f8a4:	01060106 	.word	0x01060106
   2f8a8:	01060106 	.word	0x01060106
   2f8ac:	01060035 	.word	0x01060035
   2f8b0:	0106003d 	.word	0x0106003d
   2f8b4:	01060031 	.word	0x01060031
   2f8b8:	002e0106 	.word	0x002e0106
   2f8bc:	01060106 	.word	0x01060106
   2f8c0:	003d0106 	.word	0x003d0106
            pincfg.uFuncSel = 0;
   2f8c4:	f36f 0502 	bfc	r5, #0, #3
            break;
   2f8c8:	e7a3      	b.n	2f812 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 1;
   2f8ca:	2301      	movs	r3, #1
   2f8cc:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f8d0:	e79f      	b.n	2f812 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 2;
   2f8d2:	2302      	movs	r3, #2
   2f8d4:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f8d8:	e79b      	b.n	2f812 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 5;
   2f8da:	2305      	movs	r3, #5
   2f8dc:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f8e0:	e797      	b.n	2f812 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 6;
   2f8e2:	2306      	movs	r3, #6
   2f8e4:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f8e8:	e793      	b.n	2f812 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 7;
   2f8ea:	f045 0507 	orr.w	r5, r5, #7
            break;
   2f8ee:	e790      	b.n	2f812 <hal_uart_init+0x21a>
          switch (cfg->suc_pin_rts) {
   2f8f0:	1ec3      	subs	r3, r0, #3
   2f8f2:	2b26      	cmp	r3, #38	; 0x26
   2f8f4:	f200 80c1 	bhi.w	2fa7a <hal_uart_init+0x482>
   2f8f8:	e8df f003 	tbb	[pc, r3]
   2f8fc:	bf17bf14 	.word	0xbf17bf14
   2f900:	bfbfbfbf 	.word	0xbfbfbfbf
   2f904:	bf23bfbf 	.word	0xbf23bfbf
   2f908:	1bbfbfbf 	.word	0x1bbfbfbf
   2f90c:	bfbfbfbf 	.word	0xbfbfbfbf
   2f910:	bfbfbfbf 	.word	0xbfbfbfbf
   2f914:	bfbfbfbf 	.word	0xbfbfbfbf
   2f918:	1fbfbfbf 	.word	0x1fbfbfbf
   2f91c:	bf17bf23 	.word	0xbf17bf23
   2f920:	bfbf      	.short	0xbfbf
   2f922:	27          	.byte	0x27
   2f923:	00          	.byte	0x00
              pincfg.uFuncSel = 0;
   2f924:	f36f 0502 	bfc	r5, #0, #3
              break;
   2f928:	e02d      	b.n	2f986 <hal_uart_init+0x38e>
              pincfg.uFuncSel = 2;
   2f92a:	2302      	movs	r3, #2
   2f92c:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   2f930:	e029      	b.n	2f986 <hal_uart_init+0x38e>
              pincfg.uFuncSel = 4;
   2f932:	2304      	movs	r3, #4
   2f934:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   2f938:	e025      	b.n	2f986 <hal_uart_init+0x38e>
              pincfg.uFuncSel = 5;
   2f93a:	2305      	movs	r3, #5
   2f93c:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   2f940:	e021      	b.n	2f986 <hal_uart_init+0x38e>
              pincfg.uFuncSel = 6;
   2f942:	2306      	movs	r3, #6
   2f944:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   2f948:	e01d      	b.n	2f986 <hal_uart_init+0x38e>
              pincfg.uFuncSel = 7;
   2f94a:	f045 0507 	orr.w	r5, r5, #7
              break;
   2f94e:	e01a      	b.n	2f986 <hal_uart_init+0x38e>
          switch (cfg->suc_pin_rts) {
   2f950:	f1a0 030a 	sub.w	r3, r0, #10
   2f954:	2b22      	cmp	r3, #34	; 0x22
   2f956:	f200 8093 	bhi.w	2fa80 <hal_uart_init+0x488>
   2f95a:	e8df f003 	tbb	[pc, r3]
   2f95e:	9125      	.short	0x9125
   2f960:	91919191 	.word	0x91919191
   2f964:	91919129 	.word	0x91919129
   2f968:	91919129 	.word	0x91919129
   2f96c:	91919191 	.word	0x91919191
   2f970:	29259191 	.word	0x29259191
   2f974:	91219191 	.word	0x91219191
   2f978:	91919191 	.word	0x91919191
   2f97c:	91912591 	.word	0x91912591
   2f980:	12          	.byte	0x12
   2f981:	00          	.byte	0x00
              pincfg.uFuncSel = 0;
   2f982:	f36f 0502 	bfc	r5, #0, #3
      am_hal_gpio_pinconfig(cfg->suc_pin_rts, pincfg);
   2f986:	4629      	mov	r1, r5
   2f988:	f7fd fbde 	bl	2d148 <am_hal_gpio_pinconfig>
    if (cfg->suc_pin_cts >= 0) {
   2f98c:	f997 0003 	ldrsb.w	r0, [r7, #3]
   2f990:	2800      	cmp	r0, #0
   2f992:	db57      	blt.n	2fa44 <hal_uart_init+0x44c>
      switch (port) {
   2f994:	b17c      	cbz	r4, 2f9b6 <hal_uart_init+0x3be>
   2f996:	2c01      	cmp	r4, #1
   2f998:	d037      	beq.n	2fa0a <hal_uart_init+0x412>
   2f99a:	f06f 0001 	mvn.w	r0, #1
   2f99e:	e655      	b.n	2f64c <hal_uart_init+0x54>
              pincfg.uFuncSel = 2;
   2f9a0:	2302      	movs	r3, #2
   2f9a2:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   2f9a6:	e7ee      	b.n	2f986 <hal_uart_init+0x38e>
              pincfg.uFuncSel = 5;
   2f9a8:	2305      	movs	r3, #5
   2f9aa:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   2f9ae:	e7ea      	b.n	2f986 <hal_uart_init+0x38e>
              pincfg.uFuncSel = 7;
   2f9b0:	f045 0507 	orr.w	r5, r5, #7
              break;
   2f9b4:	e7e7      	b.n	2f986 <hal_uart_init+0x38e>
          switch (cfg->suc_pin_cts) {
   2f9b6:	1f03      	subs	r3, r0, #4
   2f9b8:	2b22      	cmp	r3, #34	; 0x22
   2f9ba:	d864      	bhi.n	2fa86 <hal_uart_init+0x48e>
   2f9bc:	e8df f003 	tbb	[pc, r3]
   2f9c0:	63156312 	.word	0x63156312
   2f9c4:	63636363 	.word	0x63636363
   2f9c8:	63636321 	.word	0x63636321
   2f9cc:	63636363 	.word	0x63636363
   2f9d0:	63636363 	.word	0x63636363
   2f9d4:	63636319 	.word	0x63636319
   2f9d8:	63631963 	.word	0x63631963
   2f9dc:	63631d63 	.word	0x63631d63
   2f9e0:	6321      	.short	0x6321
   2f9e2:	15          	.byte	0x15
   2f9e3:	00          	.byte	0x00
              pincfg.uFuncSel = 0;
   2f9e4:	f36f 0502 	bfc	r5, #0, #3
              break;
   2f9e8:	e029      	b.n	2fa3e <hal_uart_init+0x446>
              pincfg.uFuncSel = 2;
   2f9ea:	2302      	movs	r3, #2
   2f9ec:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   2f9f0:	e025      	b.n	2fa3e <hal_uart_init+0x446>
              pincfg.uFuncSel = 4;
   2f9f2:	2304      	movs	r3, #4
   2f9f4:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   2f9f8:	e021      	b.n	2fa3e <hal_uart_init+0x446>
              pincfg.uFuncSel = 5;
   2f9fa:	2305      	movs	r3, #5
   2f9fc:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   2fa00:	e01d      	b.n	2fa3e <hal_uart_init+0x446>
              pincfg.uFuncSel = 6;
   2fa02:	2306      	movs	r3, #6
   2fa04:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   2fa08:	e019      	b.n	2fa3e <hal_uart_init+0x446>
          switch (cfg->suc_pin_cts) {
   2fa0a:	f1a0 030b 	sub.w	r3, r0, #11
   2fa0e:	2b22      	cmp	r3, #34	; 0x22
   2fa10:	d83c      	bhi.n	2fa8c <hal_uart_init+0x494>
   2fa12:	e8df f003 	tbb	[pc, r3]
   2fa16:	3b1c      	.short	0x3b1c
   2fa18:	3b3b3b3b 	.word	0x3b3b3b3b
   2fa1c:	3b3b3b20 	.word	0x3b3b3b20
   2fa20:	3b3b3b20 	.word	0x3b3b3b20
   2fa24:	3b3b203b 	.word	0x3b3b203b
   2fa28:	203b3b1c 	.word	0x203b3b1c
   2fa2c:	1c3b3b3b 	.word	0x1c3b3b3b
   2fa30:	3b3b3b3b 	.word	0x3b3b3b3b
   2fa34:	3b3b3b1c 	.word	0x3b3b3b1c
   2fa38:	12          	.byte	0x12
   2fa39:	00          	.byte	0x00
              pincfg.uFuncSel = 0;
   2fa3a:	f36f 0502 	bfc	r5, #0, #3
      am_hal_gpio_pinconfig(cfg->suc_pin_cts, pincfg);
   2fa3e:	4629      	mov	r1, r5
   2fa40:	f7fd fb82 	bl	2d148 <am_hal_gpio_pinconfig>
    apollo3_uart_set_nvic(port);
   2fa44:	4620      	mov	r0, r4
   2fa46:	f7ff fcfd 	bl	2f444 <apollo3_uart_set_nvic>
    return 0;
   2fa4a:	2000      	movs	r0, #0
   2fa4c:	e5fe      	b.n	2f64c <hal_uart_init+0x54>
              pincfg.uFuncSel = 5;
   2fa4e:	2305      	movs	r3, #5
   2fa50:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   2fa54:	e7f3      	b.n	2fa3e <hal_uart_init+0x446>
              pincfg.uFuncSel = 7;
   2fa56:	f045 0507 	orr.w	r5, r5, #7
              break;
   2fa5a:	e7f0      	b.n	2fa3e <hal_uart_init+0x446>
        return SYS_EINVAL;
   2fa5c:	f06f 0001 	mvn.w	r0, #1
}
   2fa60:	4770      	bx	lr
        switch (cfg->suc_pin_tx) {
   2fa62:	f06f 0001 	mvn.w	r0, #1
   2fa66:	e5f1      	b.n	2f64c <hal_uart_init+0x54>
        switch (cfg->suc_pin_tx) {
   2fa68:	f06f 0001 	mvn.w	r0, #1
   2fa6c:	e5ee      	b.n	2f64c <hal_uart_init+0x54>
        switch (cfg->suc_pin_rx) {
   2fa6e:	f06f 0001 	mvn.w	r0, #1
   2fa72:	e5eb      	b.n	2f64c <hal_uart_init+0x54>
        switch (cfg->suc_pin_rx) {
   2fa74:	f06f 0001 	mvn.w	r0, #1
   2fa78:	e5e8      	b.n	2f64c <hal_uart_init+0x54>
      switch (port) {
   2fa7a:	f06f 0001 	mvn.w	r0, #1
   2fa7e:	e5e5      	b.n	2f64c <hal_uart_init+0x54>
   2fa80:	f06f 0001 	mvn.w	r0, #1
   2fa84:	e5e2      	b.n	2f64c <hal_uart_init+0x54>
      switch (port) {
   2fa86:	f06f 0001 	mvn.w	r0, #1
   2fa8a:	e5df      	b.n	2f64c <hal_uart_init+0x54>
   2fa8c:	f06f 0001 	mvn.w	r0, #1
   2fa90:	e5dc      	b.n	2f64c <hal_uart_init+0x54>
   2fa92:	bf00      	nop

0002fa94 <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
   2fa94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2fa98:	b08d      	sub	sp, #52	; 0x34
   2fa9a:	4604      	mov	r4, r0
   2fa9c:	4688      	mov	r8, r1
   2fa9e:	4615      	mov	r5, r2
   2faa0:	461e      	mov	r6, r3
   2faa2:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
   2faa6:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    struct apollo3_uart *u;
    int irqn;
    int rc;

    am_hal_uart_config_t uart_cfg =
   2faaa:	2228      	movs	r2, #40	; 0x28
   2faac:	2100      	movs	r1, #0
   2faae:	a801      	add	r0, sp, #4
   2fab0:	f7e7 f835 	bl	16b1e <memset>
   2fab4:	2312      	movs	r3, #18
   2fab6:	9306      	str	r3, [sp, #24]
        .ui32TxBufferSize = 0,
        .pui8RxBuffer = 0,
        .ui32RxBufferSize = 0,
    };

    if (port >= UART_CNT) {
   2fab8:	2c01      	cmp	r4, #1
   2faba:	dc6f      	bgt.n	2fb9c <hal_uart_config+0x108>
        return -1;
    }

    u = &uarts[port];
    if (u->u_open) {
   2fabc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2fac0:	4a3e      	ldr	r2, [pc, #248]	; (2fbbc <hal_uart_config+0x128>)
   2fac2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   2fac6:	f013 0f01 	tst.w	r3, #1
   2faca:	d16a      	bne.n	2fba2 <hal_uart_config+0x10e>
        return -1;
    }

    switch (databits) {
   2facc:	1f6a      	subs	r2, r5, #5
   2face:	2a03      	cmp	r2, #3
   2fad0:	d86a      	bhi.n	2fba8 <hal_uart_config+0x114>
   2fad2:	e8df f002 	tbb	[pc, r2]
   2fad6:	1d20      	.short	0x1d20
   2fad8:	021a      	.short	0x021a
    case 8:
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_8;
   2fada:	2360      	movs	r3, #96	; 0x60
   2fadc:	9302      	str	r3, [sp, #8]
        break;
    default:
        return -1;
    }

    switch (stopbits) {
   2fade:	2e01      	cmp	r6, #1
   2fae0:	d01c      	beq.n	2fb1c <hal_uart_config+0x88>
   2fae2:	2e02      	cmp	r6, #2
   2fae4:	d163      	bne.n	2fbae <hal_uart_config+0x11a>
    case 2:
        uart_cfg.ui32StopBits = AM_HAL_UART_TWO_STOP_BITS;
   2fae6:	2308      	movs	r3, #8
   2fae8:	9304      	str	r3, [sp, #16]
        break;
    default:
        return -1;
    }

    rc = apollo3_uart_irq_info(port, &irqn, NULL);
   2faea:	2200      	movs	r2, #0
   2faec:	a90b      	add	r1, sp, #44	; 0x2c
   2faee:	4620      	mov	r0, r4
   2faf0:	f7ff fc90 	bl	2f414 <apollo3_uart_irq_info>
    if (rc != 0) {
   2faf4:	4605      	mov	r5, r0
   2faf6:	2800      	cmp	r0, #0
   2faf8:	d15c      	bne.n	2fbb4 <hal_uart_config+0x120>
        return -1;
    }

    switch (parity) {
   2fafa:	b197      	cbz	r7, 2fb22 <hal_uart_config+0x8e>
   2fafc:	3f01      	subs	r7, #1
   2fafe:	b2ff      	uxtb	r7, r7
   2fb00:	2f01      	cmp	r7, #1
   2fb02:	d810      	bhi.n	2fb26 <hal_uart_config+0x92>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
        break;
    case HAL_UART_PARITY_ODD:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_ODD;
    case HAL_UART_PARITY_EVEN:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_EVEN;
   2fb04:	2306      	movs	r3, #6
   2fb06:	9303      	str	r3, [sp, #12]
        break;
   2fb08:	e00d      	b.n	2fb26 <hal_uart_config+0x92>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_7;
   2fb0a:	2340      	movs	r3, #64	; 0x40
   2fb0c:	9302      	str	r3, [sp, #8]
        break;
   2fb0e:	e7e6      	b.n	2fade <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_6;
   2fb10:	2320      	movs	r3, #32
   2fb12:	9302      	str	r3, [sp, #8]
        break;
   2fb14:	e7e3      	b.n	2fade <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_5;
   2fb16:	2300      	movs	r3, #0
   2fb18:	9302      	str	r3, [sp, #8]
        break;
   2fb1a:	e7e0      	b.n	2fade <hal_uart_config+0x4a>
        uart_cfg.ui32StopBits = AM_HAL_UART_ONE_STOP_BIT;
   2fb1c:	2300      	movs	r3, #0
   2fb1e:	9304      	str	r3, [sp, #16]
        break;
   2fb20:	e7e3      	b.n	2faea <hal_uart_config+0x56>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
   2fb22:	2300      	movs	r3, #0
   2fb24:	9303      	str	r3, [sp, #12]
    }

    switch (flow_ctl) {
   2fb26:	f1b9 0f00 	cmp.w	r9, #0
   2fb2a:	d030      	beq.n	2fb8e <hal_uart_config+0xfa>
   2fb2c:	f1b9 0f01 	cmp.w	r9, #1
   2fb30:	d030      	beq.n	2fb94 <hal_uart_config+0x100>
    case HAL_UART_FLOW_CTL_RTS_CTS:
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
        break;
    }

    uart_cfg.ui32BaudRate = baudrate;
   2fb32:	f8cd 8004 	str.w	r8, [sp, #4]

    am_hal_uart_configure(uarts[port].uart_handle, &uart_cfg);
   2fb36:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2fb3a:	4a20      	ldr	r2, [pc, #128]	; (2fbbc <hal_uart_config+0x128>)
   2fb3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2fb40:	a901      	add	r1, sp, #4
   2fb42:	6958      	ldr	r0, [r3, #20]
   2fb44:	f000 f978 	bl	2fe38 <am_hal_uart_configure>

    NVIC_EnableIRQ(irqn);
   2fb48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2fb4a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   2fb4c:	2b00      	cmp	r3, #0
   2fb4e:	db08      	blt.n	2fb62 <hal_uart_config+0xce>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2fb50:	f002 021f 	and.w	r2, r2, #31
   2fb54:	095b      	lsrs	r3, r3, #5
   2fb56:	2101      	movs	r1, #1
   2fb58:	fa01 f202 	lsl.w	r2, r1, r2
   2fb5c:	4918      	ldr	r1, [pc, #96]	; (2fbc0 <hal_uart_config+0x12c>)
   2fb5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    UARTn(0)->IER |= (AM_HAL_UART_INT_RX |
   2fb62:	4a18      	ldr	r2, [pc, #96]	; (2fbc4 <hal_uart_config+0x130>)
   2fb64:	6b93      	ldr	r3, [r2, #56]	; 0x38
   2fb66:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   2fb6a:	6393      	str	r3, [r2, #56]	; 0x38

    apollo3_uart_enable_rx_irq();

    u->u_rx_stall = 0;
   2fb6c:	4a13      	ldr	r2, [pc, #76]	; (2fbbc <hal_uart_config+0x128>)
   2fb6e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2fb72:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    u->u_tx_started = 0;
    u->u_open = 1;
   2fb76:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2fb7a:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
   2fb7e:	f043 0301 	orr.w	r3, r3, #1
   2fb82:	f802 3034 	strb.w	r3, [r2, r4, lsl #3]

    return 0;
}
   2fb86:	4628      	mov	r0, r5
   2fb88:	b00d      	add	sp, #52	; 0x34
   2fb8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_NONE;
   2fb8e:	2300      	movs	r3, #0
   2fb90:	9305      	str	r3, [sp, #20]
        break;
   2fb92:	e7ce      	b.n	2fb32 <hal_uart_config+0x9e>
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
   2fb94:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   2fb98:	9305      	str	r3, [sp, #20]
        break;
   2fb9a:	e7ca      	b.n	2fb32 <hal_uart_config+0x9e>
        return -1;
   2fb9c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2fba0:	e7f1      	b.n	2fb86 <hal_uart_config+0xf2>
        return -1;
   2fba2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2fba6:	e7ee      	b.n	2fb86 <hal_uart_config+0xf2>
    if (u->u_open) {
   2fba8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2fbac:	e7eb      	b.n	2fb86 <hal_uart_config+0xf2>
    switch (stopbits) {
   2fbae:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2fbb2:	e7e8      	b.n	2fb86 <hal_uart_config+0xf2>
        return -1;
   2fbb4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2fbb8:	e7e5      	b.n	2fb86 <hal_uart_config+0xf2>
   2fbba:	bf00      	nop
   2fbbc:	10005210 	.word	0x10005210
   2fbc0:	e000e100 	.word	0xe000e100
   2fbc4:	4001c000 	.word	0x4001c000

0002fbc8 <hal_uart_close>:
int
hal_uart_close(int port)
{
    struct apollo3_uart *u;

    if (port >= UART_CNT) {
   2fbc8:	2801      	cmp	r0, #1
   2fbca:	dc34      	bgt.n	2fc36 <hal_uart_close+0x6e>
{
   2fbcc:	b510      	push	{r4, lr}
   2fbce:	b082      	sub	sp, #8
   2fbd0:	4604      	mov	r4, r0
        return -1;
    }

    u = &uarts[port];
    if (!u->u_open) {
   2fbd2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   2fbd6:	4a1b      	ldr	r2, [pc, #108]	; (2fc44 <hal_uart_close+0x7c>)
   2fbd8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   2fbdc:	f013 0f01 	tst.w	r3, #1
   2fbe0:	d02c      	beq.n	2fc3c <hal_uart_close+0x74>
        return -1;
    }

    u->u_open = 0;
   2fbe2:	4613      	mov	r3, r2
   2fbe4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   2fbe8:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
   2fbec:	f36f 0100 	bfc	r1, #0, #1
   2fbf0:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
    AM_CRITICAL_BEGIN
   2fbf4:	f7fc faa2 	bl	2c13c <am_hal_interrupt_master_disable>
   2fbf8:	9001      	str	r0, [sp, #4]
    UARTn(port)->CR_b.UARTEN = 0;
   2fbfa:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
   2fbfe:	331c      	adds	r3, #28
   2fc00:	031b      	lsls	r3, r3, #12
   2fc02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   2fc04:	f36f 0200 	bfc	r2, #0, #1
   2fc08:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.RXE = 0;
   2fc0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   2fc0c:	f36f 2249 	bfc	r2, #9, #1
   2fc10:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.TXE = 0;
   2fc12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   2fc14:	f36f 2208 	bfc	r2, #8, #1
   2fc18:	631a      	str	r2, [r3, #48]	; 0x30
    AM_CRITICAL_END
   2fc1a:	9801      	ldr	r0, [sp, #4]
   2fc1c:	f7fc fa92 	bl	2c144 <am_hal_interrupt_master_set>
    UARTn(0)->CR_b.CLKEN = 0;
   2fc20:	4b09      	ldr	r3, [pc, #36]	; (2fc48 <hal_uart_close+0x80>)
   2fc22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   2fc24:	f36f 02c3 	bfc	r2, #3, #1
   2fc28:	631a      	str	r2, [r3, #48]	; 0x30
    am_hal_pwrctrl_periph_disable(port);
   2fc2a:	b2e0      	uxtb	r0, r4
   2fc2c:	f7fc fc16 	bl	2c45c <am_hal_pwrctrl_periph_disable>
    return 0;
   2fc30:	2000      	movs	r0, #0
}
   2fc32:	b002      	add	sp, #8
   2fc34:	bd10      	pop	{r4, pc}
        return -1;
   2fc36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2fc3a:	4770      	bx	lr
        return -1;
   2fc3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fc40:	e7f7      	b.n	2fc32 <hal_uart_close+0x6a>
   2fc42:	bf00      	nop
   2fc44:	10005210 	.word	0x10005210
   2fc48:	4001c000 	.word	0x4001c000

0002fc4c <config_baudrate>:
    uint32_t ui32UartClkFreq;

    //
    // Check that the baudrate is in range.
    //
    if (APOLLO3_A1)
   2fc4c:	4b23      	ldr	r3, [pc, #140]	; (2fcdc <config_baudrate+0x90>)
   2fc4e:	68db      	ldr	r3, [r3, #12]
   2fc50:	b2db      	uxtb	r3, r3
   2fc52:	2b12      	cmp	r3, #18
   2fc54:	d016      	beq.n	2fc84 <config_baudrate+0x38>
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }
    if (APOLLO3_GE_B0)
   2fc56:	4b21      	ldr	r3, [pc, #132]	; (2fcdc <config_baudrate+0x90>)
   2fc58:	68db      	ldr	r3, [r3, #12]
   2fc5a:	b2db      	uxtb	r3, r3
   2fc5c:	2b20      	cmp	r3, #32
   2fc5e:	d902      	bls.n	2fc66 <config_baudrate+0x1a>
    {
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_B0)
   2fc60:	4b1f      	ldr	r3, [pc, #124]	; (2fce0 <config_baudrate+0x94>)
   2fc62:	4299      	cmp	r1, r3
   2fc64:	d838      	bhi.n	2fcd8 <config_baudrate+0x8c>
{
   2fc66:	b430      	push	{r4, r5}
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }

    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
   2fc68:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
   2fc6c:	301c      	adds	r0, #28
   2fc6e:	0300      	lsls	r0, r0, #12
   2fc70:	6b03      	ldr	r3, [r0, #48]	; 0x30
   2fc72:	f3c3 1302 	ubfx	r3, r3, #4, #3
   2fc76:	3b01      	subs	r3, #1
   2fc78:	2b03      	cmp	r3, #3
   2fc7a:	d80c      	bhi.n	2fc96 <config_baudrate+0x4a>
   2fc7c:	e8df f003 	tbb	[pc, r3]
   2fc80:	0907260f 	.word	0x0907260f
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
   2fc84:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   2fc88:	d9e5      	bls.n	2fc56 <config_baudrate+0xa>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   2fc8a:	4816      	ldr	r0, [pc, #88]	; (2fce4 <config_baudrate+0x98>)
   2fc8c:	4770      	bx	lr
        case UART0_CR_CLKSEL_12MHZ:
            ui32UartClkFreq = 12000000;
            break;

        case UART0_CR_CLKSEL_6MHZ:
            ui32UartClkFreq = 6000000;
   2fc8e:	4c16      	ldr	r4, [pc, #88]	; (2fce8 <config_baudrate+0x9c>)
            break;
   2fc90:	e006      	b.n	2fca0 <config_baudrate+0x54>

        case UART0_CR_CLKSEL_3MHZ:
            ui32UartClkFreq = 3000000;
   2fc92:	4c16      	ldr	r4, [pc, #88]	; (2fcec <config_baudrate+0xa0>)
            break;
   2fc94:	e004      	b.n	2fca0 <config_baudrate+0x54>

        default:
            *pui32ActualBaud = 0;
   2fc96:	2300      	movs	r3, #0
   2fc98:	6013      	str	r3, [r2, #0]
            return AM_HAL_UART_STATUS_CLOCK_NOT_CONFIGURED;
   2fc9a:	4815      	ldr	r0, [pc, #84]	; (2fcf0 <config_baudrate+0xa4>)
   2fc9c:	e014      	b.n	2fcc8 <config_baudrate+0x7c>
    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
   2fc9e:	4c15      	ldr	r4, [pc, #84]	; (2fcf4 <config_baudrate+0xa8>)
    }

    //
    // Calculate register values.
    //
    ui32BaudClk = BAUDCLK * ui32DesiredBaudrate;
   2fca0:	0109      	lsls	r1, r1, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
   2fca2:	fbb4 f5f1 	udiv	r5, r4, r1
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
   2fca6:	01a3      	lsls	r3, r4, #6
   2fca8:	fbb3 f3f1 	udiv	r3, r3, r1
    ui64FractionDivisorLong = ui64IntermediateLong - (ui32IntegerDivisor * 64);
    ui32FractionDivisor = (uint32_t)ui64FractionDivisorLong;
   2fcac:	eba3 1385 	sub.w	r3, r3, r5, lsl #6

    //
    // Check the result.
    //
    if (ui32IntegerDivisor == 0)
   2fcb0:	428c      	cmp	r4, r1
   2fcb2:	d30d      	bcc.n	2fcd0 <config_baudrate+0x84>
    }

    //
    // Write the UART regs.
    //
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
   2fcb4:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
   2fcb6:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->FBRD = ui32FractionDivisor;
   2fcb8:	6283      	str	r3, [r0, #40]	; 0x28

    //
    // Return the actual baud rate.
    //
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor / 4));
   2fcba:	089b      	lsrs	r3, r3, #2
   2fcbc:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   2fcc0:	fbb4 f3f3 	udiv	r3, r4, r3
   2fcc4:	6013      	str	r3, [r2, #0]
    return AM_HAL_STATUS_SUCCESS;
   2fcc6:	2000      	movs	r0, #0
} // config_baudrate()
   2fcc8:	bc30      	pop	{r4, r5}
   2fcca:	4770      	bx	lr
            ui32UartClkFreq = 12000000;
   2fccc:	4c0a      	ldr	r4, [pc, #40]	; (2fcf8 <config_baudrate+0xac>)
   2fcce:	e7e7      	b.n	2fca0 <config_baudrate+0x54>
        *pui32ActualBaud = 0;
   2fcd0:	2300      	movs	r3, #0
   2fcd2:	6013      	str	r3, [r2, #0]
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   2fcd4:	4803      	ldr	r0, [pc, #12]	; (2fce4 <config_baudrate+0x98>)
   2fcd6:	e7f7      	b.n	2fcc8 <config_baudrate+0x7c>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   2fcd8:	4802      	ldr	r0, [pc, #8]	; (2fce4 <config_baudrate+0x98>)
} // config_baudrate()
   2fcda:	4770      	bx	lr
   2fcdc:	40020000 	.word	0x40020000
   2fce0:	0016e360 	.word	0x0016e360
   2fce4:	08000003 	.word	0x08000003
   2fce8:	005b8d80 	.word	0x005b8d80
   2fcec:	002dc6c0 	.word	0x002dc6c0
   2fcf0:	08000002 	.word	0x08000002
   2fcf4:	016e3600 	.word	0x016e3600
   2fcf8:	00b71b00 	.word	0x00b71b00

0002fcfc <am_hal_uart_initialize>:
    if (ui32Module >= AM_REG_UART_NUM_MODULES )
   2fcfc:	2801      	cmp	r0, #1
   2fcfe:	d81e      	bhi.n	2fd3e <am_hal_uart_initialize+0x42>
    if (!ppHandle)
   2fd00:	b1f9      	cbz	r1, 2fd42 <am_hal_uart_initialize+0x46>
    if (g_am_hal_uart_states[ui32Module].prefix.s.bInit)
   2fd02:	4a12      	ldr	r2, [pc, #72]	; (2fd4c <am_hal_uart_initialize+0x50>)
   2fd04:	2368      	movs	r3, #104	; 0x68
   2fd06:	fb03 2300 	mla	r3, r3, r0, r2
   2fd0a:	78db      	ldrb	r3, [r3, #3]
   2fd0c:	f013 0f01 	tst.w	r3, #1
   2fd10:	d119      	bne.n	2fd46 <am_hal_uart_initialize+0x4a>
{
   2fd12:	b470      	push	{r4, r5, r6}
    g_am_hal_uart_states[ui32Module].prefix.s.bInit = true;
   2fd14:	4614      	mov	r4, r2
   2fd16:	2268      	movs	r2, #104	; 0x68
   2fd18:	fb02 f200 	mul.w	r2, r2, r0
   2fd1c:	18a3      	adds	r3, r4, r2
   2fd1e:	78dd      	ldrb	r5, [r3, #3]
   2fd20:	f045 0501 	orr.w	r5, r5, #1
   2fd24:	70dd      	strb	r5, [r3, #3]
    g_am_hal_uart_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_UART;
   2fd26:	58a5      	ldr	r5, [r4, r2]
   2fd28:	4e09      	ldr	r6, [pc, #36]	; (2fd50 <am_hal_uart_initialize+0x54>)
   2fd2a:	f366 0517 	bfi	r5, r6, #0, #24
   2fd2e:	50a5      	str	r5, [r4, r2]
    g_am_hal_uart_states[ui32Module].ui32Module = ui32Module;
   2fd30:	6258      	str	r0, [r3, #36]	; 0x24
    g_am_hal_uart_states[ui32Module].sRegState.bValid = false;
   2fd32:	2000      	movs	r0, #0
   2fd34:	7118      	strb	r0, [r3, #4]
    g_am_hal_uart_states[ui32Module].ui32BaudRate = 0;
   2fd36:	6618      	str	r0, [r3, #96]	; 0x60
    *ppHandle = (void *)&g_am_hal_uart_states[ui32Module];
   2fd38:	600b      	str	r3, [r1, #0]
} // am_hal_uart_initialize()
   2fd3a:	bc70      	pop	{r4, r5, r6}
   2fd3c:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   2fd3e:	2005      	movs	r0, #5
   2fd40:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   2fd42:	2006      	movs	r0, #6
   2fd44:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   2fd46:	2007      	movs	r0, #7
} // am_hal_uart_initialize()
   2fd48:	4770      	bx	lr
   2fd4a:	bf00      	nop
   2fd4c:	10005240 	.word	0x10005240
   2fd50:	00ea9e06 	.word	0x00ea9e06

0002fd54 <am_hal_uart_interrupt_enable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_enable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   2fd54:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   2fd56:	b170      	cbz	r0, 2fd76 <am_hal_uart_interrupt_enable+0x22>
   2fd58:	6802      	ldr	r2, [r0, #0]
   2fd5a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   2fd5e:	4808      	ldr	r0, [pc, #32]	; (2fd80 <am_hal_uart_interrupt_enable+0x2c>)
   2fd60:	4282      	cmp	r2, r0
   2fd62:	d10a      	bne.n	2fd7a <am_hal_uart_interrupt_enable+0x26>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER |= ui32IntMask;
   2fd64:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   2fd68:	331c      	adds	r3, #28
   2fd6a:	031b      	lsls	r3, r3, #12
   2fd6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2fd6e:	4311      	orrs	r1, r2
   2fd70:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
   2fd72:	2000      	movs	r0, #0
   2fd74:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2fd76:	2002      	movs	r0, #2
   2fd78:	4770      	bx	lr
   2fd7a:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_enable()
   2fd7c:	4770      	bx	lr
   2fd7e:	bf00      	nop
   2fd80:	01ea9e06 	.word	0x01ea9e06

0002fd84 <am_hal_uart_interrupt_disable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_disable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   2fd84:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   2fd86:	b178      	cbz	r0, 2fda8 <am_hal_uart_interrupt_disable+0x24>
   2fd88:	6802      	ldr	r2, [r0, #0]
   2fd8a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   2fd8e:	4808      	ldr	r0, [pc, #32]	; (2fdb0 <am_hal_uart_interrupt_disable+0x2c>)
   2fd90:	4282      	cmp	r2, r0
   2fd92:	d10b      	bne.n	2fdac <am_hal_uart_interrupt_disable+0x28>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER &= ~ui32IntMask;
   2fd94:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   2fd98:	331c      	adds	r3, #28
   2fd9a:	031b      	lsls	r3, r3, #12
   2fd9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2fd9e:	ea22 0101 	bic.w	r1, r2, r1
   2fda2:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
   2fda4:	2000      	movs	r0, #0
   2fda6:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2fda8:	2002      	movs	r0, #2
   2fdaa:	4770      	bx	lr
   2fdac:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_disable()
   2fdae:	4770      	bx	lr
   2fdb0:	01ea9e06 	.word	0x01ea9e06

0002fdb4 <buffer_configure>:
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   2fdb4:	b3d0      	cbz	r0, 2fe2c <buffer_configure+0x78>
{
   2fdb6:	b538      	push	{r3, r4, r5, lr}
   2fdb8:	461d      	mov	r5, r3
   2fdba:	4604      	mov	r4, r0
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   2fdbc:	6800      	ldr	r0, [r0, #0]
   2fdbe:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
   2fdc2:	4b1c      	ldr	r3, [pc, #112]	; (2fe34 <buffer_configure+0x80>)
   2fdc4:	4298      	cmp	r0, r3
   2fdc6:	d133      	bne.n	2fe30 <buffer_configure+0x7c>
    if (pui8TxBuffer && ui32TxBufferSize)
   2fdc8:	b101      	cbz	r1, 2fdcc <buffer_configure+0x18>
   2fdca:	b992      	cbnz	r2, 2fdf2 <buffer_configure+0x3e>
        pState->bEnableTxQueue = false;
   2fdcc:	2300      	movs	r3, #0
   2fdce:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, AM_HAL_UART_INT_TX);
   2fdd2:	2120      	movs	r1, #32
   2fdd4:	4620      	mov	r0, r4
   2fdd6:	f7ff ffd5 	bl	2fd84 <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   2fdda:	bb50      	cbnz	r0, 2fe32 <buffer_configure+0x7e>
    if (pui8RxBuffer && ui32RxBufferSize)
   2fddc:	b10d      	cbz	r5, 2fde2 <buffer_configure+0x2e>
   2fdde:	9b04      	ldr	r3, [sp, #16]
   2fde0:	b9bb      	cbnz	r3, 2fe12 <buffer_configure+0x5e>
        pState->bEnableRxQueue = false;
   2fde2:	2300      	movs	r3, #0
   2fde4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, (AM_HAL_UART_INT_RX |
   2fde8:	2150      	movs	r1, #80	; 0x50
   2fdea:	4620      	mov	r0, r4
   2fdec:	f7ff ffca 	bl	2fd84 <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   2fdf0:	e01f      	b.n	2fe32 <buffer_configure+0x7e>
        pState->bEnableTxQueue = true;
   2fdf2:	2001      	movs	r0, #1
   2fdf4:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
        am_hal_queue_init(&pState->sTxQueue, pui8TxBuffer, 1, ui32TxBufferSize);
   2fdf8:	4613      	mov	r3, r2
   2fdfa:	4602      	mov	r2, r0
   2fdfc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   2fe00:	f000 f93c 	bl	3007c <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, AM_HAL_UART_INT_TX);
   2fe04:	2120      	movs	r1, #32
   2fe06:	4620      	mov	r0, r4
   2fe08:	f7ff ffa4 	bl	2fd54 <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   2fe0c:	2800      	cmp	r0, #0
   2fe0e:	d0e5      	beq.n	2fddc <buffer_configure+0x28>
   2fe10:	e00f      	b.n	2fe32 <buffer_configure+0x7e>
        pState->bEnableRxQueue = true;
   2fe12:	2201      	movs	r2, #1
   2fe14:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        am_hal_queue_init(&pState->sRxQueue, pui8RxBuffer, 1, ui32RxBufferSize);
   2fe18:	4629      	mov	r1, r5
   2fe1a:	f104 0048 	add.w	r0, r4, #72	; 0x48
   2fe1e:	f000 f92d 	bl	3007c <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, (AM_HAL_UART_INT_RX |
   2fe22:	2150      	movs	r1, #80	; 0x50
   2fe24:	4620      	mov	r0, r4
   2fe26:	f7ff ff95 	bl	2fd54 <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   2fe2a:	e002      	b.n	2fe32 <buffer_configure+0x7e>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2fe2c:	2002      	movs	r0, #2
} // buffer_configure()
   2fe2e:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2fe30:	2002      	movs	r0, #2
} // buffer_configure()
   2fe32:	bd38      	pop	{r3, r4, r5, pc}
   2fe34:	01ea9e06 	.word	0x01ea9e06

0002fe38 <am_hal_uart_configure>:
{
   2fe38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fe3c:	b086      	sub	sp, #24
    uint32_t ui32Module = pState->ui32Module;
   2fe3e:	6a47      	ldr	r7, [r0, #36]	; 0x24
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   2fe40:	2800      	cmp	r0, #0
   2fe42:	d073      	beq.n	2ff2c <am_hal_uart_configure+0xf4>
   2fe44:	4605      	mov	r5, r0
   2fe46:	460e      	mov	r6, r1
   2fe48:	6803      	ldr	r3, [r0, #0]
   2fe4a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2fe4e:	4a3c      	ldr	r2, [pc, #240]	; (2ff40 <am_hal_uart_configure+0x108>)
   2fe50:	4293      	cmp	r3, r2
   2fe52:	d16d      	bne.n	2ff30 <am_hal_uart_configure+0xf8>
    UARTn(ui32Module)->CR = 0;
   2fe54:	f507 2480 	add.w	r4, r7, #262144	; 0x40000
   2fe58:	341c      	adds	r4, #28
   2fe5a:	0324      	lsls	r4, r4, #12
   2fe5c:	2300      	movs	r3, #0
   2fe5e:	6323      	str	r3, [r4, #48]	; 0x30
    am_hal_uart_clock_speed_e eUartClkSpeed = pState->eUartClockSpeed ;
   2fe60:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    if ( eUartClkSpeed >= eUART_CLK_SPEED_INVALID )
   2fe64:	2b05      	cmp	r3, #5
   2fe66:	d868      	bhi.n	2ff3a <am_hal_uart_configure+0x102>
                                   UART0_CR_CLKSEL_24MHZ :
   2fe68:	2b00      	cmp	r3, #0
   2fe6a:	d05c      	beq.n	2ff26 <am_hal_uart_configure+0xee>
   2fe6c:	3b01      	subs	r3, #1
   2fe6e:	fa5f f883 	uxtb.w	r8, r3
    AM_CRITICAL_BEGIN
   2fe72:	f7fc f963 	bl	2c13c <am_hal_interrupt_master_disable>
   2fe76:	9003      	str	r0, [sp, #12]
    UARTn(ui32Module)->CR_b.CLKEN = 1;
   2fe78:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2fe7a:	f043 0308 	orr.w	r3, r3, #8
   2fe7e:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CLKSEL = eClkSel;
   2fe80:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2fe82:	f368 1306 	bfi	r3, r8, #4, #3
   2fe86:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   2fe88:	9803      	ldr	r0, [sp, #12]
   2fe8a:	f7fc f95b 	bl	2c144 <am_hal_interrupt_master_set>
    AM_CRITICAL_BEGIN
   2fe8e:	f7fc f955 	bl	2c13c <am_hal_interrupt_master_disable>
   2fe92:	9004      	str	r0, [sp, #16]
    UARTn(ui32Module)->CR_b.UARTEN = 0;
   2fe94:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2fe96:	f36f 0300 	bfc	r3, #0, #1
   2fe9a:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 0;
   2fe9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2fe9e:	f36f 2349 	bfc	r3, #9, #1
   2fea2:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 0;
   2fea4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2fea6:	f36f 2308 	bfc	r3, #8, #1
   2feaa:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   2feac:	9804      	ldr	r0, [sp, #16]
   2feae:	f7fc f949 	bl	2c144 <am_hal_interrupt_master_set>
    ui32ErrorStatus = config_baudrate(ui32Module, psConfig->ui32BaudRate,
   2feb2:	f105 0260 	add.w	r2, r5, #96	; 0x60
   2feb6:	6831      	ldr	r1, [r6, #0]
   2feb8:	4638      	mov	r0, r7
   2feba:	f7ff fec7 	bl	2fc4c <config_baudrate>
    RETURN_ON_ERROR(ui32ErrorStatus);
   2febe:	4607      	mov	r7, r0
   2fec0:	2800      	cmp	r0, #0
   2fec2:	d136      	bne.n	2ff32 <am_hal_uart_configure+0xfa>
    UARTn(ui32Module)->CR_b.RTSEN = 0;
   2fec4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2fec6:	f36f 338e 	bfc	r3, #14, #1
   2feca:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CTSEN = 0;
   2fecc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2fece:	f36f 33cf 	bfc	r3, #15, #1
   2fed2:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR |= psConfig->ui32FlowControl;
   2fed4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2fed6:	6932      	ldr	r2, [r6, #16]
   2fed8:	4313      	orrs	r3, r2
   2feda:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->IFLS = psConfig->ui32FifoLevels;
   2fedc:	6973      	ldr	r3, [r6, #20]
   2fede:	6363      	str	r3, [r4, #52]	; 0x34
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   2fee0:	6873      	ldr	r3, [r6, #4]
                               psConfig->ui32Parity     |
   2fee2:	68b2      	ldr	r2, [r6, #8]
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   2fee4:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
   2fee6:	68f2      	ldr	r2, [r6, #12]
                               psConfig->ui32Parity     |
   2fee8:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
   2feea:	f043 0310 	orr.w	r3, r3, #16
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   2feee:	62e3      	str	r3, [r4, #44]	; 0x2c
    AM_CRITICAL_BEGIN
   2fef0:	f7fc f924 	bl	2c13c <am_hal_interrupt_master_disable>
   2fef4:	9005      	str	r0, [sp, #20]
    UARTn(ui32Module)->CR_b.UARTEN = 1;
   2fef6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2fef8:	f043 0301 	orr.w	r3, r3, #1
   2fefc:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 1;
   2fefe:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2ff00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2ff04:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 1;
   2ff06:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2ff08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2ff0c:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   2ff0e:	9805      	ldr	r0, [sp, #20]
   2ff10:	f7fc f918 	bl	2c144 <am_hal_interrupt_master_set>
    buffer_configure(pHandle,
   2ff14:	6a73      	ldr	r3, [r6, #36]	; 0x24
   2ff16:	9300      	str	r3, [sp, #0]
   2ff18:	6a33      	ldr	r3, [r6, #32]
   2ff1a:	69f2      	ldr	r2, [r6, #28]
   2ff1c:	69b1      	ldr	r1, [r6, #24]
   2ff1e:	4628      	mov	r0, r5
   2ff20:	f7ff ff48 	bl	2fdb4 <buffer_configure>
    return AM_HAL_STATUS_SUCCESS;
   2ff24:	e005      	b.n	2ff32 <am_hal_uart_configure+0xfa>
                                   UART0_CR_CLKSEL_24MHZ :
   2ff26:	f04f 0801 	mov.w	r8, #1
   2ff2a:	e7a2      	b.n	2fe72 <am_hal_uart_configure+0x3a>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2ff2c:	2702      	movs	r7, #2
   2ff2e:	e000      	b.n	2ff32 <am_hal_uart_configure+0xfa>
   2ff30:	2702      	movs	r7, #2
} // am_hal_uart_configure()
   2ff32:	4638      	mov	r0, r7
   2ff34:	b006      	add	sp, #24
   2ff36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_INVALID_ARG ;
   2ff3a:	2706      	movs	r7, #6
   2ff3c:	e7f9      	b.n	2ff32 <am_hal_uart_configure+0xfa>
   2ff3e:	bf00      	nop
   2ff40:	01ea9e06 	.word	0x01ea9e06

0002ff44 <am_hal_uart_interrupt_clear>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_clear(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   2ff44:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   2ff46:	b160      	cbz	r0, 2ff62 <am_hal_uart_interrupt_clear+0x1e>
   2ff48:	6802      	ldr	r2, [r0, #0]
   2ff4a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   2ff4e:	4807      	ldr	r0, [pc, #28]	; (2ff6c <am_hal_uart_interrupt_clear+0x28>)
   2ff50:	4282      	cmp	r2, r0
   2ff52:	d108      	bne.n	2ff66 <am_hal_uart_interrupt_clear+0x22>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IEC = ui32IntMask;
   2ff54:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   2ff58:	331c      	adds	r3, #28
   2ff5a:	031b      	lsls	r3, r3, #12
   2ff5c:	6459      	str	r1, [r3, #68]	; 0x44

    return AM_HAL_STATUS_SUCCESS;
   2ff5e:	2000      	movs	r0, #0
   2ff60:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2ff62:	2002      	movs	r0, #2
   2ff64:	4770      	bx	lr
   2ff66:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_clear()
   2ff68:	4770      	bx	lr
   2ff6a:	bf00      	nop
   2ff6c:	01ea9e06 	.word	0x01ea9e06

0002ff70 <am_hal_uart_power_control>:
{
   2ff70:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ff72:	b083      	sub	sp, #12
   2ff74:	4604      	mov	r4, r0
    uint32_t ui32Module = pState->ui32Module;
   2ff76:	6a45      	ldr	r5, [r0, #36]	; 0x24
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   2ff78:	2800      	cmp	r0, #0
   2ff7a:	d061      	beq.n	30040 <am_hal_uart_power_control+0xd0>
   2ff7c:	4616      	mov	r6, r2
   2ff7e:	b2e8      	uxtb	r0, r5
   2ff80:	3008      	adds	r0, #8
   2ff82:	b2c7      	uxtb	r7, r0
   2ff84:	6823      	ldr	r3, [r4, #0]
   2ff86:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2ff8a:	4a32      	ldr	r2, [pc, #200]	; (30054 <am_hal_uart_power_control+0xe4>)
   2ff8c:	4293      	cmp	r3, r2
   2ff8e:	d159      	bne.n	30044 <am_hal_uart_power_control+0xd4>
    switch (ePowerState)
   2ff90:	b1a9      	cbz	r1, 2ffbe <am_hal_uart_power_control+0x4e>
   2ff92:	3901      	subs	r1, #1
   2ff94:	b2c9      	uxtb	r1, r1
   2ff96:	2901      	cmp	r1, #1
   2ff98:	d857      	bhi.n	3004a <am_hal_uart_power_control+0xda>
            if (bRetainState)
   2ff9a:	2e00      	cmp	r6, #0
   2ff9c:	d135      	bne.n	3000a <am_hal_uart_power_control+0x9a>
            am_hal_uart_interrupt_clear(pState, 0xFFFFFFFF);
   2ff9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2ffa2:	4620      	mov	r0, r4
   2ffa4:	f7ff ffce 	bl	2ff44 <am_hal_uart_interrupt_clear>
            UARTn(ui32Module)->CR = 0;
   2ffa8:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   2ffac:	351c      	adds	r5, #28
   2ffae:	032d      	lsls	r5, r5, #12
   2ffb0:	2400      	movs	r4, #0
   2ffb2:	632c      	str	r4, [r5, #48]	; 0x30
            am_hal_pwrctrl_periph_disable(eUARTPowerModule);
   2ffb4:	4638      	mov	r0, r7
   2ffb6:	f7fc fa51 	bl	2c45c <am_hal_pwrctrl_periph_disable>
    return AM_HAL_STATUS_SUCCESS;
   2ffba:	4620      	mov	r0, r4
            break;
   2ffbc:	e043      	b.n	30046 <am_hal_uart_power_control+0xd6>
            if (bRetainState && !pState->sRegState.bValid)
   2ffbe:	b116      	cbz	r6, 2ffc6 <am_hal_uart_power_control+0x56>
   2ffc0:	7923      	ldrb	r3, [r4, #4]
   2ffc2:	2b00      	cmp	r3, #0
   2ffc4:	d043      	beq.n	3004e <am_hal_uart_power_control+0xde>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
   2ffc6:	4638      	mov	r0, r7
   2ffc8:	f7fc fa00 	bl	2c3cc <am_hal_pwrctrl_periph_enable>
            if (bRetainState)
   2ffcc:	b90e      	cbnz	r6, 2ffd2 <am_hal_uart_power_control+0x62>
    return AM_HAL_STATUS_SUCCESS;
   2ffce:	2000      	movs	r0, #0
   2ffd0:	e039      	b.n	30046 <am_hal_uart_power_control+0xd6>
                AM_CRITICAL_BEGIN
   2ffd2:	f7fc f8b3 	bl	2c13c <am_hal_interrupt_master_disable>
   2ffd6:	9000      	str	r0, [sp, #0]
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
   2ffd8:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   2ffdc:	351c      	adds	r5, #28
   2ffde:	032d      	lsls	r5, r5, #12
   2ffe0:	68a3      	ldr	r3, [r4, #8]
   2ffe2:	622b      	str	r3, [r5, #32]
                UARTn(ui32Module)->IBRD = pState->sRegState.regIBRD;
   2ffe4:	68e3      	ldr	r3, [r4, #12]
   2ffe6:	626b      	str	r3, [r5, #36]	; 0x24
                UARTn(ui32Module)->FBRD = pState->sRegState.regFBRD;
   2ffe8:	6923      	ldr	r3, [r4, #16]
   2ffea:	62ab      	str	r3, [r5, #40]	; 0x28
                UARTn(ui32Module)->LCRH = pState->sRegState.regLCRH;
   2ffec:	6963      	ldr	r3, [r4, #20]
   2ffee:	62eb      	str	r3, [r5, #44]	; 0x2c
                UARTn(ui32Module)->CR   = pState->sRegState.regCR;
   2fff0:	69a3      	ldr	r3, [r4, #24]
   2fff2:	632b      	str	r3, [r5, #48]	; 0x30
                UARTn(ui32Module)->IFLS = pState->sRegState.regIFLS;
   2fff4:	69e3      	ldr	r3, [r4, #28]
   2fff6:	636b      	str	r3, [r5, #52]	; 0x34
                UARTn(ui32Module)->IER  = pState->sRegState.regIER;
   2fff8:	6a23      	ldr	r3, [r4, #32]
   2fffa:	63ab      	str	r3, [r5, #56]	; 0x38
                pState->sRegState.bValid = false;
   2fffc:	2500      	movs	r5, #0
   2fffe:	7125      	strb	r5, [r4, #4]
                AM_CRITICAL_END
   30000:	9800      	ldr	r0, [sp, #0]
   30002:	f7fc f89f 	bl	2c144 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
   30006:	4628      	mov	r0, r5
   30008:	e01d      	b.n	30046 <am_hal_uart_power_control+0xd6>
                AM_CRITICAL_BEGIN
   3000a:	f7fc f897 	bl	2c13c <am_hal_interrupt_master_disable>
   3000e:	9001      	str	r0, [sp, #4]
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
   30010:	f505 2380 	add.w	r3, r5, #262144	; 0x40000
   30014:	331c      	adds	r3, #28
   30016:	031b      	lsls	r3, r3, #12
   30018:	6a1a      	ldr	r2, [r3, #32]
   3001a:	60a2      	str	r2, [r4, #8]
                pState->sRegState.regIBRD = UARTn(ui32Module)->IBRD;
   3001c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   3001e:	60e2      	str	r2, [r4, #12]
                pState->sRegState.regFBRD = UARTn(ui32Module)->FBRD;
   30020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   30022:	6122      	str	r2, [r4, #16]
                pState->sRegState.regLCRH = UARTn(ui32Module)->LCRH;
   30024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   30026:	6162      	str	r2, [r4, #20]
                pState->sRegState.regCR   = UARTn(ui32Module)->CR;
   30028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   3002a:	61a2      	str	r2, [r4, #24]
                pState->sRegState.regIFLS = UARTn(ui32Module)->IFLS;
   3002c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   3002e:	61e2      	str	r2, [r4, #28]
                pState->sRegState.regIER  = UARTn(ui32Module)->IER;
   30030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   30032:	6223      	str	r3, [r4, #32]
                pState->sRegState.bValid = true;
   30034:	2301      	movs	r3, #1
   30036:	7123      	strb	r3, [r4, #4]
                AM_CRITICAL_END
   30038:	9801      	ldr	r0, [sp, #4]
   3003a:	f7fc f883 	bl	2c144 <am_hal_interrupt_master_set>
   3003e:	e7ae      	b.n	2ff9e <am_hal_uart_power_control+0x2e>
        return AM_HAL_STATUS_INVALID_HANDLE;
   30040:	2002      	movs	r0, #2
   30042:	e000      	b.n	30046 <am_hal_uart_power_control+0xd6>
   30044:	2002      	movs	r0, #2
} // am_hal_uart_power_control()
   30046:	b003      	add	sp, #12
   30048:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (ePowerState)
   3004a:	2006      	movs	r0, #6
   3004c:	e7fb      	b.n	30046 <am_hal_uart_power_control+0xd6>
                return AM_HAL_STATUS_INVALID_OPERATION;
   3004e:	2007      	movs	r0, #7
   30050:	e7f9      	b.n	30046 <am_hal_uart_power_control+0xd6>
   30052:	bf00      	nop
   30054:	01ea9e06 	.word	0x01ea9e06

00030058 <am_hal_uart_control>:
// ****************************************************************************
uint32_t
am_hal_uart_control(void *pHandle, am_hal_uart_control_e eControl, void *pArgs)
{
    #ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( pArgs == (void *) 0 || pHandle == (void *) 0)
   30058:	b142      	cbz	r2, 3006c <am_hal_uart_control+0x14>
   3005a:	b148      	cbz	r0, 30070 <am_hal_uart_control+0x18>
    #endif // AM_HAL_DISABLE_API_VALIDATION

    am_hal_status_e     eHalStatus  = AM_HAL_STATUS_SUCCESS ;
    am_hal_uart_state_t *pState    = (am_hal_uart_state_t *) pHandle;

    switch ( eControl )
   3005c:	b951      	cbnz	r1, 30074 <am_hal_uart_control+0x1c>
        case AM_HAL_UART_CONTROL_CLKSEL:
        {
            //
            // save the uart input clock setting
            //
            am_hal_uart_clock_speed_e eClkSpeed = *((am_hal_uart_clock_speed_e *)  pArgs) ;
   3005e:	7813      	ldrb	r3, [r2, #0]
            if (eClkSpeed >= eUART_CLK_SPEED_INVALID)
   30060:	2b05      	cmp	r3, #5
   30062:	d809      	bhi.n	30078 <am_hal_uart_control+0x20>
            {
                eHalStatus = AM_HAL_STATUS_INVALID_ARG ;
                break ;
            }

            pState->eUartClockSpeed = eClkSpeed ;
   30064:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
    am_hal_status_e     eHalStatus  = AM_HAL_STATUS_SUCCESS ;
   30068:	2000      	movs	r0, #0
            break ;
   3006a:	4770      	bx	lr
        return (uint32_t) AM_HAL_STATUS_INVALID_ARG ;
   3006c:	2006      	movs	r0, #6
   3006e:	4770      	bx	lr
   30070:	2006      	movs	r0, #6
   30072:	4770      	bx	lr
        }

        default:

            eHalStatus = AM_HAL_STATUS_INVALID_ARG ;
   30074:	2006      	movs	r0, #6
   30076:	4770      	bx	lr
                eHalStatus = AM_HAL_STATUS_INVALID_ARG ;
   30078:	2006      	movs	r0, #6
            break ;
    } // switch

    return (uint32_t) eHalStatus ;
}
   3007a:	4770      	bx	lr

0003007c <am_hal_queue_init>:
//
//*****************************************************************************
void
am_hal_queue_init(am_hal_queue_t *psQueue, void *pvData, uint32_t ui32ItemSize,
                  uint32_t ui32ArraySize)
{
   3007c:	b410      	push	{r4}
    psQueue->ui32WriteIndex = 0;
   3007e:	2400      	movs	r4, #0
   30080:	6004      	str	r4, [r0, #0]
    psQueue->ui32ReadIndex = 0;
   30082:	6044      	str	r4, [r0, #4]
    psQueue->ui32Length = 0;
   30084:	6084      	str	r4, [r0, #8]
    psQueue->ui32Capacity = ui32ArraySize;
   30086:	60c3      	str	r3, [r0, #12]
    psQueue->ui32ItemSize = ui32ItemSize;
   30088:	6102      	str	r2, [r0, #16]
    psQueue->pui8Data = (uint8_t *) pvData;
   3008a:	6141      	str	r1, [r0, #20]
}
   3008c:	bc10      	pop	{r4}
   3008e:	4770      	bx	lr
   30090:	18110010 	.word	0x18110010
   30094:	28030010 	.word	0x28030010
   30098:	28020010 	.word	0x28020010
   3009c:	28000010 	.word	0x28000010
   300a0:	28030010 	.word	0x28030010
   300a4:	00000004 	.word	0x00000004
   300a8:	00000020 	.word	0x00000020
   300ac:	00000020 	.word	0x00000020
   300b0:	00000002 	.word	0x00000002
   300b4:	00000000 	.word	0x00000000
   300b8:	00000032 	.word	0x00000032
   300bc:	00010101 	.word	0x00010101
   300c0:	00000000 	.word	0x00000000
   300c4:	01000000 	.word	0x01000000
   300c8:	02000000 	.word	0x02000000
   300cc:	04000000 	.word	0x04000000
   300d0:	08000000 	.word	0x08000000
   300d4:	10000000 	.word	0x10000000
   300d8:	20000000 	.word	0x20000000
   300dc:	40000000 	.word	0x40000000
   300e0:	80000000 	.word	0x80000000
   300e4:	1b000000 	.word	0x1b000000
   300e8:	36000000 	.word	0x36000000
   300ec:	00000000 	.word	0x00000000
   300f0:	65736552 	.word	0x65736552
   300f4:	6e697474 	.word	0x6e697474
   300f8:	74732067 	.word	0x74732067
   300fc:	3b657461 	.word	0x3b657461
   30100:	61657220 	.word	0x61657220
   30104:	3d6e6f73 	.word	0x3d6e6f73
   30108:	000a6425 	.word	0x000a6425
   3010c:	6f727265 	.word	0x6f727265
   30110:	65642072 	.word	0x65642072
   30114:	6d726574 	.word	0x6d726574
   30118:	6e696e69 	.word	0x6e696e69
   3011c:	64612067 	.word	0x64612067
   30120:	73657264 	.word	0x73657264
   30124:	79742073 	.word	0x79742073
   30128:	203b6570 	.word	0x203b6570
   3012c:	253d6372 	.word	0x253d6372
   30130:	00000a64 	.word	0x00000a64
   30134:	6f727265 	.word	0x6f727265
   30138:	65732072 	.word	0x65732072
   3013c:	6e697474 	.word	0x6e697474
   30140:	64612067 	.word	0x64612067
   30144:	74726576 	.word	0x74726576
   30148:	6d657369 	.word	0x6d657369
   3014c:	20746e65 	.word	0x20746e65
   30150:	61746164 	.word	0x61746164
   30154:	6372203b 	.word	0x6372203b
   30158:	0a64253d 	.word	0x0a64253d
   3015c:	00000000 	.word	0x00000000
   30160:	6f727265 	.word	0x6f727265
   30164:	6e652072 	.word	0x6e652072
   30168:	696c6261 	.word	0x696c6261
   3016c:	6120676e 	.word	0x6120676e
   30170:	72657664 	.word	0x72657664
   30174:	65736974 	.word	0x65736974
   30178:	746e656d 	.word	0x746e656d
   3017c:	6372203b 	.word	0x6372203b
   30180:	0a64253d 	.word	0x0a64253d
   30184:	00000000 	.word	0x00000000
   30188:	646e6168 	.word	0x646e6168
   3018c:	253d656c 	.word	0x253d656c
   30190:	756f2064 	.word	0x756f2064
   30194:	746f5f72 	.word	0x746f5f72
   30198:	64615f61 	.word	0x64615f61
   3019c:	745f7264 	.word	0x745f7264
   301a0:	3d657079 	.word	0x3d657079
   301a4:	6f206425 	.word	0x6f206425
   301a8:	6f5f7275 	.word	0x6f5f7275
   301ac:	615f6174 	.word	0x615f6174
   301b0:	3d726464 	.word	0x3d726464
   301b4:	00000000 	.word	0x00000000
   301b8:	72756f20 	.word	0x72756f20
   301bc:	5f64695f 	.word	0x5f64695f
   301c0:	72646461 	.word	0x72646461
   301c4:	7079745f 	.word	0x7079745f
   301c8:	64253d65 	.word	0x64253d65
   301cc:	72756f20 	.word	0x72756f20
   301d0:	5f64695f 	.word	0x5f64695f
   301d4:	72646461 	.word	0x72646461
   301d8:	0000003d 	.word	0x0000003d
   301dc:	65657020 	.word	0x65657020
   301e0:	746f5f72 	.word	0x746f5f72
   301e4:	64615f61 	.word	0x64615f61
   301e8:	745f7264 	.word	0x745f7264
   301ec:	3d657079 	.word	0x3d657079
   301f0:	70206425 	.word	0x70206425
   301f4:	5f726565 	.word	0x5f726565
   301f8:	5f61746f 	.word	0x5f61746f
   301fc:	72646461 	.word	0x72646461
   30200:	0000003d 	.word	0x0000003d
   30204:	65657020 	.word	0x65657020
   30208:	64695f72 	.word	0x64695f72
   3020c:	6464615f 	.word	0x6464615f
   30210:	79745f72 	.word	0x79745f72
   30214:	253d6570 	.word	0x253d6570
   30218:	65702064 	.word	0x65702064
   3021c:	695f7265 	.word	0x695f7265
   30220:	64615f64 	.word	0x64615f64
   30224:	003d7264 	.word	0x003d7264
   30228:	6e6f6320 	.word	0x6e6f6320
   3022c:	74695f6e 	.word	0x74695f6e
   30230:	253d6c76 	.word	0x253d6c76
   30234:	6f632064 	.word	0x6f632064
   30238:	6c5f6e6e 	.word	0x6c5f6e6e
   3023c:	6e657461 	.word	0x6e657461
   30240:	253d7963 	.word	0x253d7963
   30244:	75732064 	.word	0x75732064
   30248:	76726570 	.word	0x76726570
   3024c:	6f697369 	.word	0x6f697369
   30250:	69745f6e 	.word	0x69745f6e
   30254:	756f656d 	.word	0x756f656d
   30258:	64253d74 	.word	0x64253d74
   3025c:	636e6520 	.word	0x636e6520
   30260:	74707972 	.word	0x74707972
   30264:	253d6465 	.word	0x253d6465
   30268:	75612064 	.word	0x75612064
   3026c:	6e656874 	.word	0x6e656874
   30270:	61636974 	.word	0x61636974
   30274:	3d646574 	.word	0x3d646574
   30278:	62206425 	.word	0x62206425
   3027c:	65646e6f 	.word	0x65646e6f
   30280:	64253d64 	.word	0x64253d64
   30284:	0000000a 	.word	0x0000000a
   30288:	6c696166 	.word	0x6c696166
   3028c:	00006465 	.word	0x00006465
   30290:	61747365 	.word	0x61747365
   30294:	73696c62 	.word	0x73696c62
   30298:	00646568 	.word	0x00646568
   3029c:	6e6e6f63 	.word	0x6e6e6f63
   302a0:	69746365 	.word	0x69746365
   302a4:	25206e6f 	.word	0x25206e6f
   302a8:	73203b73 	.word	0x73203b73
   302ac:	75746174 	.word	0x75746174
   302b0:	64253d73 	.word	0x64253d73
   302b4:	00000020 	.word	0x00000020
   302b8:	63736964 	.word	0x63736964
   302bc:	656e6e6f 	.word	0x656e6e6f
   302c0:	203b7463 	.word	0x203b7463
   302c4:	73616572 	.word	0x73616572
   302c8:	253d6e6f 	.word	0x253d6e6f
   302cc:	00002064 	.word	0x00002064
   302d0:	6e6e6f63 	.word	0x6e6e6f63
   302d4:	69746365 	.word	0x69746365
   302d8:	75206e6f 	.word	0x75206e6f
   302dc:	74616470 	.word	0x74616470
   302e0:	203b6465 	.word	0x203b6465
   302e4:	74617473 	.word	0x74617473
   302e8:	253d7375 	.word	0x253d7375
   302ec:	00002064 	.word	0x00002064
   302f0:	65766461 	.word	0x65766461
   302f4:	73697472 	.word	0x73697472
   302f8:	6f632065 	.word	0x6f632065
   302fc:	656c706d 	.word	0x656c706d
   30300:	203b6574 	.word	0x203b6574
   30304:	73616572 	.word	0x73616572
   30308:	253d6e6f 	.word	0x253d6e6f
   3030c:	00000064 	.word	0x00000064
   30310:	72636e65 	.word	0x72636e65
   30314:	69747079 	.word	0x69747079
   30318:	63206e6f 	.word	0x63206e6f
   3031c:	676e6168 	.word	0x676e6168
   30320:	76652065 	.word	0x76652065
   30324:	3b746e65 	.word	0x3b746e65
   30328:	61747320 	.word	0x61747320
   3032c:	3d737574 	.word	0x3d737574
   30330:	00206425 	.word	0x00206425
   30334:	73627573 	.word	0x73627573
   30338:	62697263 	.word	0x62697263
   3033c:	76652065 	.word	0x76652065
   30340:	3b746e65 	.word	0x3b746e65
   30344:	6e6f6320 	.word	0x6e6f6320
   30348:	61685f6e 	.word	0x61685f6e
   3034c:	656c646e 	.word	0x656c646e
   30350:	2064253d 	.word	0x2064253d
   30354:	72747461 	.word	0x72747461
   30358:	6e61685f 	.word	0x6e61685f
   3035c:	3d656c64 	.word	0x3d656c64
   30360:	72206425 	.word	0x72206425
   30364:	6f736165 	.word	0x6f736165
   30368:	64253d6e 	.word	0x64253d6e
   3036c:	65727020 	.word	0x65727020
   30370:	253d6e76 	.word	0x253d6e76
   30374:	75632064 	.word	0x75632064
   30378:	253d6e72 	.word	0x253d6e72
   3037c:	72702064 	.word	0x72702064
   30380:	3d697665 	.word	0x3d697665
   30384:	63206425 	.word	0x63206425
   30388:	3d697275 	.word	0x3d697275
   3038c:	000a6425 	.word	0x000a6425
   30390:	2075746d 	.word	0x2075746d
   30394:	61647075 	.word	0x61647075
   30398:	65206574 	.word	0x65206574
   3039c:	746e6576 	.word	0x746e6576
   303a0:	6f63203b 	.word	0x6f63203b
   303a4:	685f6e6e 	.word	0x685f6e6e
   303a8:	6c646e61 	.word	0x6c646e61
   303ac:	64253d65 	.word	0x64253d65
   303b0:	64696320 	.word	0x64696320
   303b4:	2064253d 	.word	0x2064253d
   303b8:	3d75746d 	.word	0x3d75746d
   303bc:	000a6425 	.word	0x000a6425
   303c0:	78323025 	.word	0x78323025
   303c4:	3230253a 	.word	0x3230253a
   303c8:	30253a78 	.word	0x30253a78
   303cc:	253a7832 	.word	0x253a7832
   303d0:	3a783230 	.word	0x3a783230
   303d4:	78323025 	.word	0x78323025
   303d8:	3230253a 	.word	0x3230253a
   303dc:	00000078 	.word	0x00000078
   303e0:	69676572 	.word	0x69676572
   303e4:	72657473 	.word	0x72657473
   303e8:	73206465 	.word	0x73206465
   303ec:	69767265 	.word	0x69767265
   303f0:	25206563 	.word	0x25206563
   303f4:	69772073 	.word	0x69772073
   303f8:	68206874 	.word	0x68206874
   303fc:	6c646e61 	.word	0x6c646e61
   30400:	64253d65 	.word	0x64253d65
   30404:	0000000a 	.word	0x0000000a
   30408:	69676572 	.word	0x69676572
   3040c:	72657473 	.word	0x72657473
   30410:	20676e69 	.word	0x20676e69
   30414:	72616863 	.word	0x72616863
   30418:	65746361 	.word	0x65746361
   3041c:	74736972 	.word	0x74736972
   30420:	25206369 	.word	0x25206369
   30424:	69772073 	.word	0x69772073
   30428:	64206874 	.word	0x64206874
   3042c:	685f6665 	.word	0x685f6665
   30430:	6c646e61 	.word	0x6c646e61
   30434:	64253d65 	.word	0x64253d65
   30438:	6c617620 	.word	0x6c617620
   3043c:	6e61685f 	.word	0x6e61685f
   30440:	3d656c64 	.word	0x3d656c64
   30444:	000a6425 	.word	0x000a6425
   30448:	69676572 	.word	0x69676572
   3044c:	72657473 	.word	0x72657473
   30450:	20676e69 	.word	0x20676e69
   30454:	63736564 	.word	0x63736564
   30458:	74706972 	.word	0x74706972
   3045c:	2520726f 	.word	0x2520726f
   30460:	69772073 	.word	0x69772073
   30464:	68206874 	.word	0x68206874
   30468:	6c646e61 	.word	0x6c646e61
   3046c:	64253d65 	.word	0x64253d65
   30470:	0000000a 	.word	0x0000000a

00030474 <gatt_svr_chr_sec_test_rand_uuid>:
   30474:	c96df680 16007107 7e45e1b0 3a659e89     ..m..q....E~..e:
   30484:	0000005c                                \...

00030488 <gatt_svr_chr_sec_test_static_uuid>:
   30488:	c96df780 16007107 7e45e1b0 3a659e89     ..m..q....E~..e:
   30498:	0000005c                                \...

0003049c <gatt_svr_svc_sec_test_uuid>:
   3049c:	a2712d80 c858b459 43999912 462f1295     .-q.Y.X....C../F
   304ac:	00000059                                Y...

000304b0 <gatt_svr_svcs>:
   304b0:	00000001 0003049c 00000000 10000104     ................
	...
   304d0:	696c7073 00000074 74617473 00007375     split...status..

000304e0 <__compound_literal.0>:
   304e0:	000304d8 10001b5f 00000000 00000002     ...._...........
	...
   30500:	65737341 40207472 25783020 00000a78     Assert @ 0x%x...
   30510:	65737341 40207472 25783020 202d2078     Assert @ 0x%x - 
   30520:	253a7325 00000a64 61686e55 656c646e     %s:%d...Unhandle
   30530:	6e692064 72726574 20747075 646c2528     d interrupt (%ld
   30540:	65202c29 70656378 6e6f6974 20707320     ), exception sp 
   30550:	30257830 0a786c38 00000000 3a307220     0x%08lx..... r0:
   30560:	30257830 20786c38 3a317220 30257830     0x%08lx  r1:0x%0
   30570:	20786c38 3a327220 30257830 20786c38     8lx  r2:0x%08lx 
   30580:	3a337220 30257830 0a786c38 00000000      r3:0x%08lx.....
   30590:	3a347220 30257830 20786c38 3a357220      r4:0x%08lx  r5:
   305a0:	30257830 20786c38 3a367220 30257830     0x%08lx  r6:0x%0
   305b0:	20786c38 3a377220 30257830 0a786c38     8lx  r7:0x%08lx.
   305c0:	00000000 3a387220 30257830 20786c38     .... r8:0x%08lx 
   305d0:	3a397220 30257830 20786c38 3a303172      r9:0x%08lx r10:
   305e0:	30257830 20786c38 3a313172 30257830     0x%08lx r11:0x%0
   305f0:	0a786c38 00000000 3a323172 30257830     8lx.....r12:0x%0
   30600:	20786c38 3a726c20 30257830 20786c38     8lx  lr:0x%08lx 
   30610:	3a637020 30257830 20786c38 3a727370      pc:0x%08lx psr:
   30620:	30257830 0a786c38 00000000 52534349     0x%08lx.....ICSR
   30630:	2578303a 786c3830 53464820 78303a52     :0x%08lx HFSR:0x
   30640:	6c383025 46432078 303a5253 38302578     %08lx CFSR:0x%08
   30650:	000a786c 52414642 2578303a 786c3830     lx..BFAR:0x%08lx
   30660:	464d4d20 303a5241 38302578 000a786c      MMFAR:0x%08lx..
   30670:	656c6469 00000000 6e69616d 00000000     idle....main....
   30680:	7379736d 0000315f 00006372              msys_1..rc..

0003068c <imgr_mgmt_handlers>:
	...
   306c0:	00016c59 252e7525 75252e75 756c252e     Yl..%u.%u.%u.%lu
   306d0:	00000000 252e7525 75252e75 00000000     ....%u.%u.%u....

000306e0 <g_smp_cbor_cfg>:
   306e0:	00016d8b 00016d83 00016d73 00016d4b     .m...m..sm..Km..
   306f0:	00016d39 00016d29 00016d1d              9m..)m...m..

000306fc <gatt_svr_chr_smp>:
   306fc:	997c4880 9e261174 ce4e01ae 2e7828fb     .H|.t.&...N..(x.
   3070c:	000000da                                ....

00030710 <gatt_svr_svc_smp>:
   30710:	60aa8480 8b8a5274 b74cd386 53dc1d1d     ...`tR....L....S
   30720:	0000008d                                ....

00030724 <gatt_svr_svcs>:
   30724:	00000001 00030710 00000000 10000194     ................
	...
   30744:	0000002f 646c6c25 00000000 756c6c25     /...%lld....%llu
   30754:	00000000 006c6176 65766173 00000000     ....val.save....

00030764 <conf_mgmt_handlers>:
   30764:	00017c59 00017ba1 6c363025 00002075     Y|...{..%06lu ..
   30774:	74726175 00000030 682f6469 00646977     uart0...id/hwid.
   30784:	622f6469 00007073 612f6469 00007070     id/bsp..id/app..
   30794:	6d2f6469 61686766 00006873 732f6469     id/mfghash..id/s
   307a4:	61697265 0000006c 64697768 00000000     erial...hwid....
   307b4:	00707362 00707061 69726573 00006c61     bsp.app.serial..
   307c4:	6867666d 00687361 00006469 70656c62     mfghash.id..blep
   307d4:	00687072 6c6f7061 5f336f6c 00627665     rph.apollo3_evb.
   307e4:	4f424552 0000544f 41464544 00544c55     REBOOT..DEFAULT.
   307f4:	424d494e 485f454c 0054534f 3d73745b     NIMBLE_HOST.[ts=
   30804:	756c6c25 202c7375 3d646f6d 6c207525     %lluus, mod=%u l
   30814:	6c657665 2075253d 00000000 303d6869     evel=%u ....ih=0
   30824:	25782578 25782578 00000078 0000005d     x%x%x%x%x...]...
   30834:	736e6f63 00656c6f                       console.

0003083c <log_console_handler>:
   3083c:	00000000 0001939b 00000000 00019479     ............y...
   3084c:	00019439 00000000 00000000 0001939f     9...............
   3085c:	00000000 000193a3 00000000 6c646f6d     ............modl
   3086c:	6d5f676f 69707061 705f676e 006c6f6f     og_mapping_pool.
   3087c:	6f626572 722f746f 6f6f6265 6e635f74     reboot/reboot_cn
   3088c:	00000074 6f626572 772f746f 74746972     t...reboot/writt
   3089c:	00006e65 6f626572 635f746f 0000746e     en..reboot_cnt..
   308ac:	74697277 006e6574 6f626572 6c5f746f     written.reboot_l
   308bc:	0000676f 45534552 49505f54 0000004e     og..RESET_PIN...
   308cc:	474f4457 00000000 54464f53 00000000     WDOG....SOFT....
   308dc:	574f5242 54554f4e 00000000 55514552     BROWNOUT....REQU
   308ec:	45545345 00000044 54535953 4f5f4d45     ESTED...SYSTEM_O
   308fc:	495f4646 0000544e 00554644 44524148     FF_INT..DFU.HARD
   3090c:	00000000 4548544f 30203a52 00582578     ....OTHER: 0x%X.
   3091c:	4e4b4e55 204e574f 00006425 006e7372     UNKNOWN %d..rsn.
   3092c:	00746e63 00676d69 252e7525 75252e75     cnt.img.%u.%u.%u
   3093c:	0075252e 68736168 00000000 00656964     .%u.hash....die.
   3094c:	253a7325 00000064 00006370 67616c66     %s:%d...pc..flag
   3095c:	00000073 69746361 00006576 00207325     s...active..%s .
   3096c:	746f6f62 656c6261 00000000 666e6f63     bootable....conf
   3097c:	656d7269 00000064 646e6570 00676e69     irmed...pending.
   3098c:	6f626572 0000746f 00642573 74617473     reboot..s%d.stat
   3099c:	00000000 7465733c 0000003e 0066666f     ....<set>...off.
   309ac:	67616d69 00000065 61746164 00000000     image...data....
   309bc:	006e656c 00616873 72677075 00656461     len.sha.upgrade.

000309cc <img_mgmt_handlers>:
   309cc:	0001b285 0001b425 00000000 0001aefd     ....%...........
	...
   309f8:	0001ae7d 67616d69 00007365 746f6c73     }...images..slot
   30a08:	00000000 73726576 006e6f69 6d726570     ....version.perm
   30a18:	6e656e61 00000074 696c7073 61745374     anent...splitSta
   30a28:	00737574 666e6f63 006d7269 74737075     tus.confirm.upst
   30a38:	00747261 6f647075 0000656e 646e6570     art.updone..pend
   30a48:	00000000 666e6f63 00000000 55424544     ....conf....DEBU
   30a58:	00000047 4f525245 00000052 4f464e49     G...ERROR...INFO
   30a68:	00000000 4e524157 00000000 4e4b4e55     ....WARN....UNKN
   30a78:	004e574f 54495243 4c414349 00000000     OWN.CRITICAL....
   30a88:	6f697270 00000000 00646974 74617473     prio....tid.stat
   30a98:	00000065 756b7473 00006573 736b7473     e...stkuse..stks
   30aa8:	00007a69 63777363 0000746e 746e7572     iz..cswcnt..runt
   30ab8:	00656d69 7473616c 6568635f 6e696b63     ime.last_checkin
   30ac8:	00000000 7478656e 6568635f 6e696b63     ....next_checkin
   30ad8:	00000000 6b736174 00000073 00000072     ....tasks...r...

00030ae8 <os_mgmt_group_handlers>:
   30ae8:	0001bdb9 0001bdb9 00000000 00000000     ................
   30af8:	0001bd49 00000000 00000000 00000000     I...............
	...
   30b14:	0001bbf9 5f656c62 00747461              ....ble_att.

00030b20 <ble_att_rx_dispatch>:
   30b20:	00000001 0001caad 00000002 0001db41     ............A...
   30b30:	00000003 0001cad5 00000004 0001dbd5     ................
   30b40:	00000005 0001cb3d 00000006 0001dc43     ....=.......C...
   30b50:	00000007 0001cb45 00000008 0001dcbf     ....E...........
   30b60:	00000009 0001cb4d 0000000a 0001dd65     ....M.......e...
   30b70:	0000000b 0001cb55 0000000c 0001dde3     ....U...........
   30b80:	0000000d 0001cb5d 0000000e 0001de65     ....].......e...
   30b90:	0000000f 0001cb61 00000010 0001dea3     ....a...........
   30ba0:	00000011 0001cb69 00000012 0001df65     ....i.......e...
   30bb0:	00000013 0001cb6d 00000016 0001e027     ....m.......'...
   30bc0:	00000017 0001cb75 00000018 0001e0d9     ....u...........
   30bd0:	00000019 0001cb7d 0000001b 0001e18d     ....}...........
   30be0:	0000001d 0001e1cb 0000001e 0001cc01     ................
   30bf0:	00000052 0001dfd3 5f656c62 5f747461     R.......ble_att_
   30c00:	5f727673 72746e65 6f705f79 00006c6f     svr_entry_pool..
   30c10:	5f656c62 5f747461 5f727673 70657270     ble_att_svr_prep
   30c20:	746e655f 705f7972 006c6f6f 6e756f63     _entry_pool.coun
   30c30:	64253d74 00000020 72746e65 64252d79     t=%d ...entry-%d
   30c40:	64617b3d 745f7264 3d657079 61206425     ={addr_type=%d a
   30c50:	3d726464 00000000 0000207d 63736964     ddr=....} ..disc
   30c60:	646f6d5f 64253d65 00000000 72696420     _mode=%d.... dir
   30c70:	5f746365 72646461 7079745f 64253d65     ect_addr_type=%d
   30c80:	72696420 5f746365 72646461 0000003d      direct_addr=...
   30c90:	76646120 6168635f 6c656e6e 70616d5f      adv_channel_map
   30ca0:	2064253d 5f6e776f 72646461 7079745f     =%d own_addr_typ
   30cb0:	64253d65 76646120 6c69665f 5f726574     e=%d adv_filter_
   30cc0:	696c6f70 253d7963 64612064 74695f76     policy=%d adv_it
   30cd0:	6d5f6c76 253d6e69 64612064 74695f76     vl_min=%d adv_it
   30ce0:	6d5f6c76 253d7861 00000064 6e6e6f63     vl_max=%d...conn
   30cf0:	69746365 70206e6f 6d617261 72657465     ection parameter
   30d00:	64707520 3b657461 6e6f6320 61685f6e      update; conn_ha
   30d10:	656c646e 2064253d 6c767469 6e696d5f     ndle=%d itvl_min
   30d20:	2064253d 6c767469 78616d5f 2064253d     =%d itvl_max=%d 
   30d30:	6574616c 3d79636e 73206425 72657075     latency=%d super
   30d40:	69736976 745f6e6f 6f656d69 253d7475     vision_timeout=%
   30d50:	696d2064 65635f6e 6e656c5f 2064253d     d min_ce_len=%d 
   30d60:	5f78616d 6c5f6563 253d6e65 00000064     max_ce_len=%d...
   30d70:	20504147 636f7270 72756465 6e692065     GAP procedure in
   30d80:	61697469 3a646574 74657320 69687720     itiated: set whi
   30d90:	696c6574 203b7473 00000000 20504147     telist; ....GAP 
   30da0:	636f7270 72756465 6e692065 61697469     procedure initia
   30db0:	3a646574 76646120 69747265 203b6573     ted: advertise; 
   30dc0:	00000000 746e6f63 6c6c6f72 72207265     ....controller r
   30dd0:	726f7065 20646574 61766e69 2064696c     eported invalid 
   30de0:	6f727265 6f632072 69206564 6f63206e     error code in co
   30df0:	6f636e6e 656c706d 65206574 746e6576     nncomplete event
   30e00:	7525203a 00000000 20504147 636f7270     : %u....GAP proc
   30e10:	72756465 6e692065 61697469 3a646574     edure initiated:
   30e20:	6f747320 64612070 74726576 6e697369      stop advertisin
   30e30:	000a2e67 20504147 636f7270 72756465     g...GAP procedur
   30e40:	6e692065 61697469 3a646574 6e616320     e initiated: can
   30e50:	206c6563 6e6e6f63 69746365 000a6e6f     cel connection..
   30e60:	20504147 636f7270 72756465 6e692065     GAP procedure in
   30e70:	61697469 3a646574 72657420 616e696d     itiated: termina
   30e80:	63206574 656e6e6f 6f697463 63203b6e     te connection; c
   30e90:	5f6e6e6f 646e6168 253d656c 63682064     onn_handle=%d hc
   30ea0:	65725f69 6e6f7361 0a64253d 00000000     i_reason=%d.....
   30eb0:	20504147 636f7270 72756465 6e692065     GAP procedure in
   30ec0:	61697469 3a646574 00000020 5f656c62     itiated: ...ble_
   30ed0:	5f706167 61647075 00006574 5f656c62     gap_update..ble_
   30ee0:	00706167 54544147 6f727020 75646563     gap.GATT procedu
   30ef0:	69206572 6974696e 64657461 7325203a     re initiated: %s
   30f00:	00000000 69746f6e 203b7966 00000000     ....notify; ....
   30f10:	5f747461 646e6168 253d656c 00000a64     att_handle=%d...
   30f20:	69646e69 65746163 0000203b 5f656c62     indicate; ..ble_
   30f30:	74746167 72705f63 705f636f 006c6f6f     gattc_proc_pool.
   30f40:	5f656c62 74746167 00000063              ble_gattc...

00030f4c <ble_gattc_err_dispatch>:
   30f4c:	0001fb33 0001fb83 0001fbdf 0001fc3b     3...........;...
   30f5c:	0001fc9b 0001fcf7 0001fd5b 0001fdb7     ........[.......
   30f6c:	0001fe07 0001fe57 0001fec3 00020145     ....W.......E...
   30f7c:	000201bf 0002019f 0002060d              ............

00030f88 <ble_gattc_resume_dispatch>:
   30f88:	00000000 00020515 000204c7 00020469     ............i...
   30f98:	00020411 000203c5 0002037b 00000000     ........{.......
   30fa8:	00000000 00020343 00000000 00000000     ....C...........
   30fb8:	00020305 00020273 00000000              ....s.......

00030fc4 <ble_gattc_tmo_dispatch>:
   30fc4:	0001fb25 0001fb75 0001fbd1 0001fc2d     %...u.......-...
   30fd4:	0001fc8d 0001fce9 0001fd4d 0001fda9     ........M.......
   30fe4:	0001fdf9 0001fe49 0001feb5 00020139     ....I.......9...
   30ff4:	0001ff05 0001ff55 000200e5 5f656c62     ....U.......ble_
   31004:	74746167 6c635f73 66635f74 6f705f67     gatts_clt_cfg_po
   31014:	00006c6f 5f656c62 74746167 00000073     ol..ble_gatts...
   31024:	6c696146 74206465 6572206f 726f7473     Failed to restor
   31034:	52492065 6620734b 206d6f72 726f7473     e IRKs from stor
   31044:	73203b65 75746174 64253d73 0000000a     e; status=%d....
   31054:	5f656c62 685f7368 655f6963 6f705f76     ble_hs_hci_ev_po
   31064:	00006c6f 5f656c62 00007368 5f656c62     ol..ble_hs..ble_
   31074:	635f7368 5f6e6e6f 6c6f6f70 00000000     hs_conn_pool....

00031084 <ble_hs_conn_null_addr>:
	...
   3108c:	6f63706f 25206564 74732064 73757461     opcode %d status
   3109c:	20642520 5f707372 206e656c 61206425      %d rsp_len %d a
   310ac:	6c206b63 25206e65 00000a64 5f656c62     ck len %d...ble_
   310bc:	685f7368 665f6963 00676172              hs_hci_frag.

000310c8 <ble_hs_hci_evt_dispatch>:
   310c8:	0000003e 00023119 00000013 00023219     >....1.......2..
   310d8:	00000005 000231e7 00000008 000231d3     .....1.......1..
   310e8:	00000030 000231bf 00000010 000231ab     0....1.......1..

000310f8 <ble_hs_hci_evt_le_dispatch>:
   310f8:	00000000 00023415 00023311 000234b7     .....4...3...4..
   31108:	000234a3 0002348f 0002347b 00000000     .4...4..{4......
	...
   31120:	0002338f 0002328f 0002327b 0002318b     .3...2..{2...1..
   31130:	0002318f 00023193 00023197 0002319f     .1...1...1...1..
   31140:	000231a3 000231a7 00000000 00000000     .1...1..........
	...
   31158:	0002319b 65766461 73697472 74207265     .1..advertiser t
   31168:	72777078 74756f20 20666f20 676e6172     xpwr out of rang
   31178:	00000a65                                e...

0003117c <priv_addr_types.23228>:
   3117c:	00000203                                ....

00031180 <pub_addr_types.23227>:
   31180:	00000001 6c696166 74206465 6f63206f     ....failed to co
   31190:	6769666e 20657275 74736572 6465726f     nfigure restored
   311a0:	4b524920 0000000a                        IRK....

000311a8 <ble_hs_misc_null_addr>:
	...
   311b0:	16e28def 0d43ec4f 34dd5bbf b81e53c0     ....O.C..[.4.S..
   311c0:	00000000 746e6f43 6c6c6f72 64207265     ....Controller d
   311d0:	6e73656f 73207427 6f707075 4c207472     oesn't support L
   311e0:	00000a45 75716552 64657269 6e6f6320     E...Required con
   311f0:	6c6f7274 2072656c 73726576 206e6f69     troller version 
   31200:	34207369 2820302e 000a2936 5f656c62     is 4.0 (6)..ble_
   31210:	735f7368 5f706f74 6d726574 74616e69     hs_stop_terminat
   31220:	69745f65 756f656d 62635f74 2064252c     e_timeout_cb,%d 
   31230:	6e6e6f63 69746365 73286e6f 74732029     connection(s) st
   31240:	206c6c69 0a207075 00000000 5f656c62     ill up .....ble_
   31250:	6163326c 68635f70 705f6e61 006c6f6f     l2cap_chan_pool.
   31260:	5f656c62 6163326c 00000070 5f656c62     ble_l2cap...ble_
   31270:	6163326c 69735f70 72705f67 705f636f     l2cap_sig_proc_p
   31280:	006c6f6f                                ool.

00031284 <ble_l2cap_sig_dispatch>:
   31284:	00000000 00024445 00000000 000242dd     ....ED.......B..
   31294:	00000000 000242dd 000242dd 000242dd     .....B...B...B..
   312a4:	00000000 000242dd 00000000 000242dd     .....B.......B..
   312b4:	00000000 000242dd 00000000 000242dd     .....B.......B..
   312c4:	00000000 000242dd 00024529 00024459     .....B..)E..YD..
   312d4:	000242dd 000242dd 000242dd 000242dd     .B...B...B...B..
   312e4:	000242dd 000242dd 000242dd 5f656c62     .B...B...B..ble_
   312f4:	705f6d73 5f726961 6c696166 2078745f     sm_pair_fail_tx 
   31304:	6c696166 202c6465 3d206372 0a642520     failed, rc = %d.
   31314:	00000000 5f656c62 705f6d73 5f636f72     ....ble_sm_proc_
   31324:	6c6f6f70 00000000                       pool....

0003132c <ble_sm_dispatch>:
   3132c:	00000000 0002571b 0002595d 000258af     .....W..]Y...X..
   3133c:	00025e6d 000252f1 00025695 0002561b     m^...R...V...V..
   3134c:	0002559b 00025521 000254a1 00026039     .U..!U...T..9`..
   3135c:	000248c9 000248c9 000248c9              .H...H...H..

00031368 <ble_sm_state_dispatch>:
   31368:	00025db9 000250c1 000250af 00025011     .]...P...P...P..
   31378:	00025061 00024f87 00024f79 00024c9f     aP...O..yO...L..
   31388:	00024b09 00000000 00000000              .K..........

00031394 <ble_sm_lgcy_init_ioa>:
   31394:	00020000 02000002 03030200 00030002     ................
   313a4:	00000000 00020303 00000003              ............

000313b0 <ble_sm_lgcy_resp_ioa>:
   313b0:	00030000 03000003 02020300 00020002     ................
   313c0:	00000000 00030202 00000002 30257830     ............0x%0
   313d0:	00786834 30257830 00786c38 78323025     4hx.0x%08lx.%02x
   313e0:	78323025 78323025 78323025 3230252d     %02x%02x%02x-%02
   313f0:	32302578 30252d78 30257832 252d7832     x%02x-%02x%02x-%
   31400:	25783230 2d783230 78323025 78323025     02x%02x-%02x%02x
   31410:	78323025 78323025 78323025 78323025     %02x%02x%02x%02x
   31420:	00000000                                ....

00031424 <ble_uuid_base>:
   31424:	5f9b34fb 80000080 00001000 00000000     .4._............

00031434 <ble_svc_ans_defs>:
   31434:	00000001 100002e4 00000000 100002fc     ................
	...
   31454:	63617041 4d206568 77656e79 694e2074     Apache Mynewt Ni
   31464:	454c426d 00000000                       mBLE....

0003146c <ble_svc_dis_defs>:
   3146c:	00000001 1000038c 00000000 10000398     ................
	...

0003148c <ble_svc_gap_defs>:
   3148c:	00000001 100003fc 00000000 10000408     ................
	...

000314ac <ble_svc_gatt_defs>:
   314ac:	00000001 10000470 00000000 10000478     ....p.......x...
	...
   314cc:	2d647872 6e656c3e 0a642520 00000000     rxd->len %d.....
   314dc:	6c6f7061 5f336f6c 5f656c62 5f696368     apollo3_ble_hci_
   314ec:	6c6f6f70 6c63615f 00000000 6c6f7061     pool_acl....apol
   314fc:	5f336f6c 5f656c62 5f696368 6c6f6f70     lo3_ble_hci_pool
   3150c:	7476655f 0069685f 6c6f7061 5f336f6c     _evt_hi.apollo3_
   3151c:	5f656c62 5f696368 6c6f6f70 7476655f     ble_hci_pool_evt
   3152c:	006f6c5f 6c6f7061 5f336f6c 5f656c62     _lo.apollo3_ble_
   3153c:	5f696368 6c6f6f70 646d635f 6d656d5f     hci_pool_cmd_mem
   3154c:	6c6f6f70 00000000                       pool....

00031554 <boot_img_magic>:
   31554:	f395c277 7fefd260 0f505235 8079b62c     w...`...5RP.,.y.

00031564 <boot_swap_tables>:
   31564:	03040104 01040204 03040104 04030301     ................
   31574:	00000401                                ....

00031578 <sysflash_map_dflt>:
   31578:	00000000 0000c000 00008000 00000001     ................
   31588:	00014000 00038000 00000002 0004c000     .@..............
   31598:	00038000 00000003 00084000 00002000     .........@... ..
   315a8:	00000010 00086000 00004000 00000011     .....`...@......
   315b8:	0008a000 00004000                       .....@..

000315c0 <sbox>:
   315c0:	7b777c63 c56f6bf2 2b670130 76abd7fe     c|w{.ko.0.g+...v
   315d0:	7dc982ca f04759fa afa2d4ad c072a49c     ...}.YG.......r.
   315e0:	2693fdb7 ccf73f36 f1e5a534 1531d871     ...&6?..4...q.1.
   315f0:	c323c704 9a059618 e2801207 75b227eb     ..#..........'.u
   31600:	1a2c8309 a05a6e1b b3d63b52 842fe329     ..,..nZ.R;..)./.
   31610:	ed00d153 5bb1fc20 39becb6a cf584c4a     S... ..[j..9JLX.
   31620:	fbaaefd0 85334d43 7f02f945 a89f3c50     ....CM3.E...P<..
   31630:	8f40a351 f5389d92 21dab6bc d2f3ff10     Q.@...8....!....
   31640:	ec130ccd 1744975f 3d7ea7c4 73195d64     ...._.D...~=d].s
   31650:	dc4f8160 88902a22 14b8ee46 db0b5ede     `.O."*..F....^..
   31660:	0a3a32e0 5c240649 62acd3c2 79e49591     .2:.I.$\...b...y
   31670:	6d37c8e7 a94ed58d eaf4566c 08ae7a65     ..7m..N.lV..ez..
   31680:	2e2578ba c6b4a61c 1f74dde8 8a8bbd4b     .x%.......t.K...
   31690:	66b53e70 0ef60348 b9573561 9e1dc186     p>.fH...a5W.....
   316a0:	1198f8e1 948ed969 e9871e9b df2855ce     ....i........U(.
   316b0:	0d89a18c 6842e6bf 0f2d9941 16bb54b0     ......BhA.-..T..

000316c0 <base64_chars>:
   316c0:	44434241 48474645 4c4b4a49 504f4e4d     ABCDEFGHIJKLMNOP
   316d0:	54535251 58575655 62615a59 66656463     QRSTUVWXYZabcdef
   316e0:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   316f0:	7a797877 33323130 37363534 2f2b3938     wxyz0123456789+/
   31700:	00000000 68323025 00007868 00006325     ....%02hhx..%c..
   31710:	0063255c 3025755c 5c586c34 34302575     \%c.\u%04lX\u%04
   31720:	0000586c 3025755c 00586c34 0000007b     lX..\u%04lX.{...
   31730:	0000005b 0000007d 736c6166 00000065     [...}...false...
   31740:	65757274 00000000 0000205f 6c6c252d     true...._ ..-%ll
   31750:	00000075 3438312d 34373634 33373034     u...-18446744073
   31760:	35393037 31363135 00000036 00002768     709551616...h'..
   31770:	00000027 00000022 756c6c25 00000028     '..."...%llu(...
   31780:	00000029 706d6973 2528656c 29756868     )...simple(%hhu)
   31790:	00000000 6c6c756e 00000000 65646e75     ....null....unde
   317a0:	656e6966 00000064 61766e69 0064696c     fined...invalid.
   317b0:	0000202c 00007325 0000203a 74726175     , ..%s..: ..uart
   317c0:	00000031                                1...

000317c4 <os_bsp_uart0_cfg>:
   317c4:	26251716                                ..%&

000317c8 <os_bsp_uart1_cfg>:
   317c8:	2d2c2423                                #$,-

000317cc <ccitt_table>:
   317cc:	80050000 000a800f 001e801b 80110014     ................
   317dc:	00368033 8039003c 802d0028 00228027     3.6.<.9.(.-.'.".
   317ec:	00668063 8069006c 807d0078 00728077     c.f.l.i.x.}.w.r.
   317fc:	80550050 005a805f 004e804b 80410044     P.U._.Z.K.N.D.A.
   3180c:	00c680c3 80c900cc 80dd00d8 00d280d7     ................
   3181c:	80f500f0 00fa80ff 00ee80eb 80e100e4     ................
   3182c:	80a500a0 00aa80af 00be80bb 80b100b4     ................
   3183c:	00968093 8099009c 808d0088 00828087     ................
   3184c:	01868183 8189018c 819d0198 01928197     ................
   3185c:	81b501b0 01ba81bf 01ae81ab 81a101a4     ................
   3186c:	81e501e0 01ea81ef 01fe81fb 81f101f4     ................
   3187c:	01d681d3 81d901dc 81cd01c8 01c281c7     ................
   3188c:	81450140 014a814f 015e815b 81510154     @.E.O.J.[.^.T.Q.
   3189c:	01768173 8179017c 816d0168 01628167     s.v.|.y.h.m.g.b.
   318ac:	01268123 8129012c 813d0138 01328137     #.&.,.).8.=.7.2.
   318bc:	81150110 011a811f 010e810b 81010104     ................
   318cc:	03068303 8309030c 831d0318 03128317     ................
   318dc:	83350330 033a833f 032e832b 83210324     0.5.?.:.+...$.!.
   318ec:	83650360 036a836f 037e837b 83710374     `.e.o.j.{.~.t.q.
   318fc:	03568353 8359035c 834d0348 03428347     S.V.\.Y.H.M.G.B.
   3190c:	83c503c0 03ca83cf 03de83db 83d103d4     ................
   3191c:	03f683f3 83f903fc 83ed03e8 03e283e7     ................
   3192c:	03a683a3 83a903ac 83bd03b8 03b283b7     ................
   3193c:	83950390 039a839f 038e838b 83810384     ................
   3194c:	82850280 028a828f 029e829b 82910294     ................
   3195c:	02b682b3 82b902bc 82ad02a8 02a282a7     ................
   3196c:	02e682e3 82e902ec 82fd02f8 02f282f7     ................
   3197c:	82d502d0 02da82df 02ce82cb 82c102c4     ................
   3198c:	02468243 8249024c 825d0258 02528257     C.F.L.I.X.].W.R.
   3199c:	82750270 027a827f 026e826b 82610264     p.u...z.k.n.d.a.
   319ac:	82250220 022a822f 023e823b 82310234      .%./.*.;.>.4.1.
   319bc:	02168213 8219021c 820d0208 02028207     ................

000319cc <am_ble_buffer_patch_data>:
   319cc:	0d382200 0000ffff 00093532 00093965     ."8.....25..e9..
   319dc:	0009452b 000948a9 000953f7 00095c1a     +E...H...S...\..
   319ec:	0009641c 00096afd 0009751a 00097bde     .d...j...u...{..
   319fc:	0009854b 00098bb3 0009951f 00099c4f     K...........O...
   31a0c:	0009a2f5 0009ad1e 00000000 00000000     ................
	...
   31a48:	47004800 20004841 bf00bf00 b005bf00     .H.GAH. ........
   31a58:	0000bdf0 20006790 00002710 20001000     .....g. .'..... 
   31a68:	00001388 20001018 000003ff b0ffb5ff     ....... ........
   31a78:	4607b082 4616460c 48302500 99846006     ...F.F.F.%0H.`..
   31a88:	28eed004 2003d002 bd707360 28f17c60     ...(... `sp.`|.(
   31a98:	28f2d006 28f3d004 2002d002 bd707360     ...(...(... `sp.
   31aa8:	73602000 0000bd70 20001018 2000100a     . `sp...... ... 
   31ab8:	47004800 20004d81 28008870 2014d116     .H.G.M. p..(... 
   31ac8:	200b2101 fcc6f7ed 0000bd10 47004800     .!. .........H.G
   31ad8:	20004e15 d0022800 28017808 7808d01a     .N. .(...x.(...x
   31ae8:	d0172802 d00e2800 d00c2801 fed9f7f0     .(...(...(......
   31af8:	d0082800 f816f000 f7ef2032 f7f0f851     .(......2 ..Q...
   31b08:	e000e180 e000e100 68014802 43912228     .........H.h(".C
   31b18:	47706001 52c00000 47004800 20004881     .`pG...R.H.G.H. 
   31b28:	47706001 52c00000 68014802 43912250     .`pG...R.H.hP".C
   31b38:	47706001 52c00000 47004800 200048a1     .`pG...R.H.G.H. 
   31b48:	508040c0 460bb510 24024611 4350220c     .@.P...F.F.$."PC
   31b58:	18804a06 d0062800 2a006842 4618d003     .J...(..Bh.*...F
   31b68:	fb10f000 46204604 0000bd10 00015698     .....F F.....V..
   31b78:	47084900 20004e99 fd5cf7f3 5b00207c     .I.G.N. ..\.| .[
   31b88:	1940f80b 2900b2c1 3440d003 f7f98fa0     ..@....)..@4....
   31b98:	bd70fd73 e7e12101 47084900 20005081     s.p..!...I.G.P. 
   31ba8:	8810f380 f7f34628 2100f94d 8810f381     ....(F..M..!....
   31bb8:	d00f2800 460a8881 2a463a0a 1c64d20c     .(.....F.:F*..d.
   31bc8:	03d20bd2 84c2430a f3802000 47708810     .....C... ....pG
   31bd8:	00000466 50804440 47084900 200050ed     f...@D.P.I.G.P. 
   31be8:	8f809011 9812900e 900d3008 30309812     .........0....00
   31bf8:	9812900c 900b3044 900a2000 980c2501     ....D0... ...%..
   31c08:	f8a4f007 d02d2800 bf00bf00 bf00bf00     .....(-.........
   31c18:	bf00bf00 bf00bf00 bf00bf00 9a0ce091     ................
   31c28:	232220ff 300a4611 fb9ef7fd 88617007     . "#.F.0.....pa.
   31c38:	88a181c1 88e18201 892180c1 7aa18101     ..........!....z
   31c48:	e02301c0 9802e077 01401a08 42900940     ..#.w.....@.@..B
   31c58:	9802d91c 01401a40 42400940 9802e016     ....@.@.@.@B....
   31c68:	bf00bf00 bf00bf00 bf00bf00 bf00bf00     ................
   31c78:	2000bf00 9802e00a 01401a38 42900940     ... ....8.@.@..B
   31c88:	607565c1 84b88960 20019a04 88607550     .eu``...... Pu`.
   31c98:	9a0485f8 75107860 47004800 200048e1     ....`x.u.H.G.H. 
   31ca8:	0000bf00 8d3a8960 b2801e40 d1034282     ....`.:.@....B..
   31cb8:	43012008 71819803 bdf0b007 20006160     . .C...q....`a. 
	...
   31cd8:	00000021 00000000 00000001 00000000     !...............
   31ce8:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   31cf8:	00002001 00007d89 00002002 000076fd     . ...}... ...v..
   31d08:	8c001810 9b080bc0 42181e5b 9808d105     ........[..B....
   31d18:	47004800 200048c1 0000bf00 18d24b80     .H.G.H. .....K..
   31d28:	20018450 8810f380 280068b8 2000d016     P.. .....h.(... 
   31d38:	d0192800 28006b38 2000d012 d0132800     .(..8k.(... .(..
   31d48:	1900fc9f 68594b06 088a1809 1b090094     .....KYh........
   31d58:	01416059 18801a08 0000bd10 2000602c     Y`A.........,`. 
   31d68:	200067b8 47084900 20005579 6a80217d     .g. .I.GyU. }!.j
   31d78:	42880209 1a40d302 e0002201 2a001a08     ...B..@..".....*
   31d88:	1a081929 f7ee4621 b288feb1 3028bd70     )...!F......p.(0
   31d98:	7e003060 b4104770 32404602 24068cd3     `0.~pG...F@2...$
   31da8:	8d144363 b29b18e3 30608493 46187541     cC........`0Au.F
   31db8:	4770bc10 30603028 28007d40 20002000     ..pG(0`0@}.(. . 
   31dc8:	07007940 2004d502 e0347060 f0056928     @y..... `p4.(i..
   31dd8:	2800fb51 2002d002 e02c7060 f0039803     Q..(... `p,.....
   31de8:	2804fe4d 4668d107 20027901 d0054388     M..(..hF.y. .C..
   31df8:	28002000 2000d004 e01c7060 e7f82001     . .(... `p... ..
   31e08:	20006758 50800040 200067b8 04000000     Xg. @..P.g. ....
   31e18:	200067c8 47084900 200055cd 207d6a81     .g. .I.G.U. .j} 
   31e28:	42810200 1a08d302 e0002201 2a001a40     ...B....."..@..*
   31e38:	4360d004 fca4f7eb e0031a20 f7eb4360     ..`C.... ...`C..
   31e48:	2400b5f8 7800481c d12d2800 68704e1b     ...$.H.x.(-..Nph
   31e58:	28004d1b 4f1bda09 200b2101 210147b8     .M.(...O.!. .G.!
   31e68:	47a8200b 28006870 2100dbf6 47a8200b     . .Gph.(...!. .G
   31e78:	200a4e15 270547b0 69f8073f 0d2d0505     .N. .G.'?..i..-.
   31e88:	d1042d00 68c04811 0e800580 2c64d00c     .-...H.h......d,
   31e98:	2014d20a 69f847b0 0d000500 d90442a8     ... .G.i.....B..
   31ea8:	1c644605 d3f42c64 4903bdf8 70082001     .Fd.d,.....I. .p
   31eb8:	70084907 0000bdf8 20001001 45800080     .I.p....... ...E
   31ec8:	00002455 00002391 00003ba1 52c00000     U$...#...;.....R
   31ed8:	20001000 4818b510 29406801 2140d201     ... ...H.h@)..@!
   31ee8:	7a806001 d00107c0 bd102000 47804813     .`.z..... ...H.G
   31ef8:	07002005 491269c0 d0040500 28017808     . ...i.I.....x.(
   31f08:	2802d014 7808d012 d0082800 d0062801     ...(...x.(...(..
   31f18:	d0042802 4780480b 2032490b 490b4788     .(...H.G.I2 .G.I
   31f28:	47882004 4780480a bd102000 20044909     . .G.H.G. ...I. 
   31f38:	20014788 0000bd10 200067b8 00009305     .G. .....g. ....
   31f48:	20001018 00014b25 00003ba1 00014441     ... %K...;..AD..
   31f58:	00014aaf 00014489 b08db5f0 496c4604     .J...D.......FlI
   31f68:	4788a804 5b00207c 25009003 90022000     ...G| .[...%. ..
   31f78:	f3802001 6c608810 f3812100 46268810     . ....`l.!....&F
   31f88:	28003660 4621d06b 910c3144 910b3928     `6.(k.!FD1..(9..
   31f98:	910a3164 00ca8881 1851495e 0bc98cc9     d1......^IQ.....
   31fa8:	d05c2900 f3812101 68008810 495a9001     .)\..!.....h..ZI
   31fb8:	4788980c 69e04607 d0032800 28002000     ...G.F.i.(... .(
   31fc8:	e008d002 e7fa2001 980b4953 28004788     ..... ..SI...G.(
   31fd8:	4952d001 20004788 8810f380 494d88b8     ..RI.G. ......MI
   31fe8:	184000c0 0bd28cc2 84c203d2 280788b8     ..@............(
   31ff8:	7e30d21e 76301e40 f3802001 6b208810     ..0~@.0v. .... k
   32008:	d0132800 28002000 980ad005 798021fb     .(... .(.....!.y
   32018:	990a4008 49417188 47884638 f3802000     .@...qAI8F.G. ..
   32028:	4a3f8810 98037b39 e0154790 e7ea2001     ..?J9{...G... ..
   32038:	d90f2809 184000c0 0a008d00 49399000     .(....@.......9I
   32048:	47884638 d0072800 28009800 1c6dd004     8F.G.(.....(..m.
   32058:	e001b2ed b2ed1c6d 28009801 9803d19a     ....m......(....
   32068:	d00e2807 d00c2d00 f3802001 7e308810     .(...-... ....0~
   32078:	76301b40 f3802000 4a2b8810 98034629     @.0v. ....+J)F..
   32088:	20014790 8810f380 4f234828 47b89009     .G. ....(H#O...G
   32098:	20004604 8810f380 d0360020 88e04e1f     .F. .... .6..N..
   320a8:	42889903 2807d112 7aa1d007 4f209100     ...B...(...z.. O
   320b8:	7b227ae3 47b88921 4b1ee005 89207921     .z"{!..G...K!y .
   320c8:	4798462a 46209002 e00347b0 46214a1a     *F.G.. F.G...J!F
   320d8:	4790a804 f3802001 490f8810 47889809     ...G. .....I...G
   320e8:	00204604 9804d10c d0032800 28002000     .F ......(... .(
   320f8:	e005d002 e7fa2001 a9044a10 47909809     ..... ...J.....G
   32108:	f3802000 2c008810 9802d1c9 bdf0b00d     . .....,........
   32118:	000038b5 50804440 00003945 000093a5     .8..@D.PE9......
   32128:	0000b809 0000565d 0000b705 200061b8     ....]V.......a. 
   32138:	0000b729 00012235 00003967 0000390f     )...5"..g9...9..
   32148:	2400b5f1 4e164d15 f3802001 98008810     ...$.M.N. ......
   32158:	210047a8 8810f381 d0172800 460a8881     .G.!.....(.....F
   32168:	2a463a0a 00c9d214 8d091989 21010a0f     .:F*...........!
   32178:	8810f381 4788490b d0032800 d0012f00     .....I.G.(.../..
   32188:	b2e41c64 f3802000 e7dd8810 bdf84620     d.... ...... F..
   32198:	29491fc9 4904d3d8 e7d54788 00003945     ..I)...I.G..E9..
   321a8:	50804440 0000565d 000093a5 b092b5f1     @D.P]V..........
   321b8:	30409812 8f809011 9812900e 900d3008     ..@0.........0..
   321c8:	30309812 9812900c 900b3044 900a2000     ..00....D0... ..
   321d8:	980c2501 2c006804 2000d003 d0022800     .%...h.,... .(..
   321e8:	2001e093 980ee7fa 48f900c1 90101808     ... .......H....
   321f8:	0bc08cc0 d06e2800 49f6980e 900f0080     .....(n....I....
   32208:	30a05808 20017946 d5190771 d0172c00     .X.0Fy. q....,..
   32218:	06b04ff1 7b20d507 078047b8 2000d401     .O.... {.G..... 
   32228:	2001e006 7b20e004 07c047b8 2001d003     ... .. {.G..... 
   32238:	d0022800 2000e004 6824e7fa d1e82c00     .(..... ..$h.,..
   32248:	d0622800 22004be5 980c4621 68a64798     .(b..K."!F...G.h
   32258:	a9094ae3 47904630 d1562800 4fdc88a0     .J..0F.G.(V....O
   32268:	19c000c0 49df8d40 20001841 7912aa08     ....@..IA.. ...y
   32278:	dd062a00 540a5c32 aa081c40 42907912     .*..2\.T@....y.B
   32288:	49d9dbf8 478868a0 980f49d2 30a05808     ...I.h.G.I...X.0
   32298:	07c07940 a908d003 1d007908 a8089009     @y.......y......
   322a8:	98107901 02098d02 430ab2d2 21038502     .y.........C...!
   322b8:	8d029810 430a438a 98118502 21008f80     .....C.C.......!
   322c8:	19c000c0 980b84c1 28006800 2000d004     .........h.(... 
   322d8:	d0032800 e018e010 e7f92001 88a1980b     .(....... ......
   322e8:	00ca6840 888049c1 00c01851 8cc219c0     @h...I..Q.......
   322f8:	03d20bd2 84c2430a 46214abd 4790980b     .....C...J!F...G
   32308:	30609812 1c497e01 98117601 28078f80     ..`0.~I..v.....(
   32318:	990ed208 49af008a 31a05889 07497949     .......I.X.1IyI.
   32328:	2500d500 6809990d d01f2900 462a2100     ...%...h.)...!*F
   32338:	d077438a d2762807 48ae49af 90094788     .Cw..(v..I.H.G..
   32348:	90082000 8f809811 48a20081 30a05840     . .........H@X.0
   32358:	07c07940 90070fc0 6806980d d0092e00     @y.........h....
   32368:	6830990d 28006008 e003d002 e7de2101     ..0h.`.(.....!..
   32378:	6048990d d07d2e00 90062000 90039812     ..H`..}.. ......
   32388:	9004a806 9b099f07 25089705 20005f75     ...........%u_. 
   32398:	90019002 90002001 8e429811 b2d44684     ..... ....B..F..
   323a8:	46292001 b2893109 2f009f05 1d09d001     . )F.1...../....
   323b8:	00c9b289 b2893108 8e3f4667 d205428f     .....1..gF?..B..
   323c8:	05793f50 42a20e0c b2d4d200 dd0142a5     P?y....B.....B..
   323d8:	00640864 1a6f4621 42971c62 1909db05     d.d.!Fo.b..B....
   323e8:	b2c01c40 42971a6f 4298daf9 2500d901     @...o..B...B...%
   323f8:	9904e034 4f817008 487e4981 46014788     4....p.O.I~H.G.F
   32408:	28009800 2000d012 7ab09000 0f800780     ...(... ...z....
   32418:	d0092801 72882002 88c268f0 88809202     .(... .r.h......
   32428:	e0099001 e058e062 e7f42001 72882001     ....b.X.. ... .r
   32438:	19009802 9002b280 dd0142a5 e00072cc     .........B...r..
   32448:	980172cd 980280c8 1b288108 2d00b205     .r........(....-
   32458:	2201dc22 98039b05 250147b8 d0202d00     "..".....G.%.- .
   32468:	7e004668 18099908 9108b2c9 1a089909     hF.~............
   32478:	e000b280 9009e035 69c09812 d01a2800     ....5......i.(..
   32488:	6a009812 98126006 20006206 98086030     ...j.`...b. 0`..
   32498:	d913280a e0242500 9b052200 47b89803     .(...%$..".....G
   324a8:	980de7aa 28006800 990dd101 6030604e     .....h.(....N`0`
   324b8:	6006980d 9812e015 e7e461c6 6806980d     ...`.....a.....h
   324c8:	d0062e00 6830990d 28006008 990dd101     ......0h.`.(....
   324d8:	2e006048 e74fd000 4a4ae003 980b990d     H`....O...JJ....
   324e8:	2d004790 4948d002 4788980d 6800980b     .G.-..HI...G...h
   324f8:	d0032800 28002000 e04bd002 e7fa2001     .(... .(..K.. ..
   32508:	8f809811 d2452807 30809812 280478c0     .....(E....0.x.(
   32518:	493bd140 47884837 d03b2800 21008882     @.;I7H.G.(;....!
   32528:	00d24b2b 855118d2 00c98881 8d8a18c9     +K....Q.........
   32538:	0c640454 858c2200 00c98881 8d0c18c9     T.d.."..........
   32548:	850cb2e4 24018881 18c900c9 08ad8d0d     .......$........
   32558:	432500ad 8881850d 18c900c9 0be48ccc     ..%C............
   32568:	84cc03e4 8884990b 00e56849 88894c1f     ........Ih...L..
   32578:	00c9192c 8ccb18c9 03db0bdb 84cb4323     ,...........#C..
   32588:	6809990b d00d2900 6849990b 990b6008     ...h.)....Ih.`..
   32598:	60026048 6800980b d0062800 29002100     H`.`...h.(...!.)
   325a8:	e03cd005 6008990b 2101e7f1 2800e7f7     ..<....`...!...(
   325b8:	4a07d00a 00c98881 8cc91889 29000bc9     ...J...........)
   325c8:	6800d024 d1f52800 d0262800 0000e027     $..h.(...(&.'...
   325d8:	50804440 20006160 0000af81 00003817     @D.P`a. .....8..
   325e8:	00010341 50804000 000093a5 00000466     A....@.P....f...
   325f8:	00003967 200061e4 000039bb 00010011     g9...a. .9......
   32608:	00003945 0000390f 000038b5 00ca8881     E9...9...8......
   32618:	18514907 910ab289 2000e7d6 990a900a     .IQ........ ....
   32628:	225a980e 4a034350 84811880 bdf0b013     ..Z"PC.J........
   32638:	00000466 50804080 2300b410 46022114     f....@.P...#.!.F
   32648:	4911434a 6809247d 42a10224 1b09d902     JC.I}$.h$..B....
   32658:	e0002301 43481a61 18410081 0c0c0a88     .#..a.HC..A.....
   32668:	0c4c1900 0d4c1900 0e4c1900 0fc91900     ..L...L...L.....
   32678:	08c01840 d0012b00 e0011810 1e401a10     @....+........@.
   32688:	bc101e40 00004770 20006054 2300b4f0     @...pG..T`. ...#
   32698:	6be54c18 227d4918 02126809 d3024291     .L.k.I}".h...B..
   326a8:	23011a8a 1a52e000 43564606 435113f2     ...#..R..FVC..QC
   326b8:	261e1a71 104f434e 118f19f6 124919f6     q..&NCO.......I.
   326c8:	13ce1871 d0012b00 e0001a80 19421810     q....+........B.
   326d8:	008d0891 2b001b52 0143d004 18401a18     ....R..+..C...@.
   326e8:	e0031b80 1a180143 19801840 bcf063e2     ....C...@....c..
   326f8:	00004770 20006780 20006054              pG...g. T`. 

00032704 <am_ble_performance_copy_patch_data>:
   32704:	006e1100 00000400 00000000 01c50101     ..n.............
   32714:	00000039 00000000 00000000 00000000     9...............
   32724:	00000000 ffffffff 2000b570 8849490c     ........p.. .II.
   32734:	188b4a0c 490c881a 24001c9b 022d2513     .J.....I...$.%-.
   32744:	1c40540c dbfb42a8 2a002000 5c1cdd04     .T@..B... .*...\
   32754:	1c40540c dbfa4290 47804804 bd702000     .T@..B...H.G. p.
   32764:	20004800 20004802 20003500 000133af     .H. .H. .5. .3..
   32774:	b51f08a0 98002400 d243281d 44790001     .....$...(C...yD
   32784:	18497909 130e448f 40251a40 40404040     .yI..D..@.%@@@@@
   32794:	40404040 402a4040 2d404040 35403240     @@@@@@*@@@@-@2@5
   327a4:	00404038 b2c09801 fa07f000 9802e02c     8@@.........,...
   327b4:	9801b2c1 f000b2c0 e025f8b8 b2839806     ..........%.....
   327c4:	b2829803 b2c19802 b2c09801 f971f000     ..............q.
   327d4:	9801e01a f000b2c0 e015f90a f829f000     ..............).
   327e4:	9801e012 f000b280 e00df962 fb3bf000     ........b.....;.
   327f4:	f000e00a e007fb94 b2c09801 fac7f000     ................
   32804:	e0014604 43e42400 b0044620 b403bd10     .F...$.C F......
   32814:	90014801 2739bd01 b4030000 90014801     .H....9'.....H..
   32824:	2895bd01 b4030000 90014801 0101bd01     ...(.....H......
   32834:	b4f00000 22432000 68510612 340124ff     ..... C"..Qh.$.4
   32844:	60514321 03236851 60514319 05db23a3     !CQ`Qh#..CQ`.#..
   32854:	08496819 60190049 6909492a 4d29b2ce     .hI.I..`*I.i..)M
   32864:	88294f2a d30142b9 e00d2004 42b94f28     *O)..B... ..(O.B
   32874:	2003d301 4f26e008 d30142b9 e0032002     ... ..&O.B... ..
   32884:	42b94f25 2001d300 18394f24 7e093120     %O.B... $O9. 1.~
   32894:	da0942b1 dd012800 b2401e40 7a091839     .B...(..@.@.9..z
   328a4:	19c00040 e00b8b00 da042804 42b15c39     @........(..9\.B
   328b4:	1c40db01 1839b240 00407a09 8b0019c0     ..@.@.9..z@.....
   328c4:	62314e17 08496819 60190049 6b314e15     .N1b.hI.I..`.N1k
   328d4:	4327460f 62986337 633143a1 68518028     .F'C7c.b.C1c(.Qh
   328e4:	438103b0 78004810 0fc007c0 43190503     ...C.H.x.......C
   328f4:	68516051 43a10200 60514301 4770bcf0     Q`Qh...C.CQ`..pG
   32904:	00800000 604e4580 3ff62000 38f60000     .....EN`. .?...8
   32914:	2df60000 09f60000 67fc0000 04802000     ...-.......g. ..
   32924:	004050c0 603a4580 b5f02000 2243b082     .P@..E:`. ....C"
   32934:	68530612 04642401 60534323 0fd207ca     ..Sh.$d.#CS`....
   32944:	078a4696 074a0fd3 070a0fd4 92010fd2     .F....J.........
   32954:	0fd206ca 068a9200 46940fd2 0fd5064a     ...........FJ...
   32964:	4a1f09ce 27036811 43b9057f 4f1d6912     ...J.h.'...C.i.O
   32974:	2800403a 2801d006 2701d009 280205bf     :@.(...(...'...(
   32984:	4339d003 d0062800 4339e01b 2701e7fa     ..9C.(....9C...'
   32994:	4339057f 0330e7f6 016a4310 46624310     ..9C..0..Cj..CbF
   329a4:	431002d2 01d29a00 9a014310 43100192     ...C.....C.....C
   329b4:	431002a2 4310025a 02124672 4a084310     ...CZ..CrF...C.J
   329c4:	48076110 20436001 68410600 04522201     .a.H.`C ..Ah."R.
   329d4:	4a054391 07d27812 43110b92 b0026041     .C.J.x.....CA`..
   329e4:	0000bdf0 e00343c0 603affff b5f82000     .....C....:`. ..
   329f4:	20432400 68410600 03bf2701 60414339     .$C ..Ah.'..9CA`
   32a04:	00ba6841 60414311 68054821 430d1c51     Ah...CA`!H.hQ..C
   32a14:	4e1f6005 47b020c8 6888491f 60884338     .`.N. .G.I.h8C.`
   32a24:	68f0460e 0fc70400 2001491a 46204788     .F.h.....I. .G F
   32a34:	1c64491a d8014288 d0f22f00 40054818     .Id..B.../...H.@
   32a44:	60054813 03402001 68f160b0 40014815     .H.`. @..`.h.H.@
   32a54:	4a146870 43084010 68306070 0289213f     ph.J.@.Cp`0h?!..
   32a64:	60304388 06092143 2001684a 43820380     .C0`C!..Jh. ...C
   32a74:	7800480e 0fc007c0 431a0383 684a604a     .H.x.......CJ`Jh
   32a84:	041b2301 0400439a 604a4302 0000bdf8     .#...C...CJ`....
   32a94:	3ba15240 00000000 271051c0 fffe0000     @R.;.....Q.'....
   32aa4:	3f3ffffe c0c00000 603affff 47702000     ..??......:`. pG
   32ab4:	b5f00000 2508b083 2000493c 20437008     .......%<I. .pC 
   32ac4:	68410600 431102aa 27296041 067f4938     ..Ah...CA`)'8I..
   32ad4:	684160f9 43914b37 07db781b 43190c9b     .`Ah7K.C.x.....C
   32ae4:	24256041 684101a4 60414311 10526841     A`%$..Ah.CA`AhR.
   32af4:	60414311 210368f8 43880649 43060356     .CA`.h.!I..CV..C
   32b04:	43060390 200168b8 fe81f7ff 20104621     ...C.h. ....!F. 
   32b14:	fe83f7ff 43060328 2d002400 60fed90c     ....(..C.$.-...`
   32b24:	20644925 68f84788 0a004669 55081c80     %Id .G.hiF.....U
   32b34:	b2e41c64 d3f242ac 79d0466a 18407991     d....B..jF.y.y@.
   32b44:	79127951 18401889 78d1466a 78901841     Qy.y..@.jF.xA..x
   32b54:	78501809 78101809 46291808 fe63f7ff     ..Px...x..)F..c.
   32b64:	b2c04912 68397008 02922201 60394311     .I...p9h."...C9`
   32b74:	1c400040 20006178 fe49f7ff 06092143     @.@.xa. ..I.C!..
   32b84:	2001684a 43820300 7800480a 0fc007c0     Jh. ...C.H.x....
   32b94:	431a0303 684a604a 035b2301 0340439a     ...CJ`Jh.#[..C@.
   32ba4:	604a4302 bdf0b003 60700000 34cc2000     .CJ`......p`. .4
   32bb4:	603a0263 3ba12000 b4700000 06092143     c.:`. .;..p.C!..
   32bc4:	24016848 432004a4 20c46048 05d22287     Hh.$.. CH`. ."..
   32bd4:	485c6010 68486150 43a04a5c 07d27812     .`\HPaHh\J.C.x..
   32be4:	04930fd2 60484318 4b58208b 634305c0     .....CH`. XK..Cc
   32bf4:	25014b58 250660dd 250560cd 688563c5     XK.%.`.%.`.%.c.h
   32c04:	3df0086d 68c56085 355d086d 690560c5     m..=.`.hm.]5.`.i
   32c14:	6105086d 086d6945 69856145 6185086d     m..aEim.Ea.im..a
   32c24:	086d69c5 6a0561c5 6205086d 086d6a45     .im..a.jm..bEjm.
   32c34:	6a856245 6285086d 086d6ac5 250162c5     Eb.jm..b.jm..b.%
   32c44:	625d611d 4b43639d 4d43601d 6a1d615d     .a]b.cCK.`CM]a.j
   32c54:	621d086d 25016ac3 62c3432b 10a36848     m..b.j.%+C.bHh..
   32c64:	60484318 109b6848 60484318 4b3b483d     .CH`Hh...CH`=H;K
   32c74:	68836143 05ad253f 6083432b 60c32300     Ca.h?%..+C.`.#.`
   32c84:	61834b39 682b4d39 43b3261e 6a83602b     9K.a9M+h.&.C+`.j
   32c94:	43ab03f5 6283191b 10a36848 04134398     ...C...bHh...C..
   32ca4:	60484318 11236848 03934398 60484318     .CH`Hh#..C...CH`
   32cb4:	11636848 60484318 06402029 09246a04     Hhc..CH`) @..j$.
   32cc4:	34080124 68486204 03534398 60484318     $..4.bHh.CS..CH`
   32cd4:	23016848 4318051b 24286048 05c020a3     Hh.#...CH`($. ..
   32ce4:	4d226004 6285882d 05126848 43104398     .`"M-..bHh...C.C
   32cf4:	481f6048 700121e6 4a1d7204 8310481e     H`.H.!.p.r.J.H..
   32d04:	23e0481e 4c1a7603 706222d4 7262223c     .H.#.v.L."bp<"br
   32d14:	83624a1b 22c87641 4d1570a2 72ac2446     .Jb.Av.".p.MF$.r
   32d24:	83ac4c18 46297681 215070ca 72d1462a     .L...v)F.pP!*F.r
   32d34:	83d14915 215a76c3 49137311 77038411     .I...vZ!.s.I...w
   32d44:	4770bc70 7fff0000 603a0000 02492000     p.pG......:`. I.
   32d54:	00400000 00804580 021e4580 00030000     ..@..E...E......
   32d64:	0000003c 00085240 0000000f 604e51c0     <...@R.......QN`
   32d74:	67fc2000 07f62000 681c0000 09f62000     . .g. .....h. ..
   32d84:	2df60000 38f60000 3ff60000 b5f80000     ...-...8...?....
   32d94:	6800482d d1542800 06122243 21016850     -H.h.(T.C"..Ph.!
   32da4:	430803c9 4f286050 2501683c 06002003     ...CP`(O<h.%. ..
   32db4:	60384320 49252600 4788201e 20014924      C8`.&%I. .G$I. 
   32dc4:	68784788 0fc007c0 4a214631 42911c76     .Gxh....1F!Jv..B
   32dd4:	2800d801 481cd0f2 481e6881 20006001     ...(...H.h.H.`. 
   32de4:	2d002600 4b1cd011 25004632 41aa1acb     .&.-...K2F.%...A
   32df4:	1c40da14 4f184605 4633434d 1b7d2200     ..@..F.OMC3F."}.
   32e04:	1b4d419a dbf44193 4b14e008 d2054299     .AM..A.....K.B..
   32e14:	46021c40 1a9a434a d8f9428a 06092101     @..FJC...B...!..
   32e24:	0049438c 4908430c 2243600c 68510612     .CI..C.I.`C"..Qh
   32e34:	03db2301 4b0a4399 07db781b 43190c1b     .#...C.K.x.....C
   32e44:	bdf86051 605c0000 00002000 3ba14440     Q`....\`. ..@D.;
   32e54:	27100000 60600000 20002000 d000bebc     ...'..``. . ....
   32e64:	603a1312 b5702000 47804823 06242443     ..:`. p.#H.GC$$.
   32e74:	68602101 43080489 481f6060 481f4780     .!`h...C``.H.G.H
   32e84:	28aa7800 68a0d106 d1030780 4788491d     .x.(...h.....I.G
   32e94:	6008491d 05c020a1 21026b02 430a438a     .I.`. ...k.!.C.C
   32ea4:	21016302 438a6b02 6302430a 26046b01     .c.!.k.C.C.c.k.&
   32eb4:	433143b1 4c146301 4d146860 d5040080     .C1C.c.L`h.M....
   32ec4:	47a82001 00806860 4c11d4fa 6060200f     . .G`h.....L. ``
   32ed4:	47a82001 60602007 47a82004 60602006     . .G. ``. .G. ``
   32ee4:	480c218b 600805c9 6901480c 61014331     .!.H...`.H.i1C.a
   32ef4:	bd70bf30 37350000 9c390000 602c0000     0.p...57..9...,`
   32f04:	39d12000 60540000 00802000 3ba14580     . .9..T`. ...E.;
   32f14:	00400000 03264580 ed000000 b570e000     ..@..E&.......p.
   32f24:	200f4d2f 248b6068 682005e4 02492101     /M. h`.$.. h.!I.
   32f34:	60204388 4780482b f3802001 48298810     .C `+H.G. ....)H
   32f44:	49296840 d4060080 22086820 60204310     @h)I.... h.".C `
   32f54:	47882001 2001e001 48244788 48244780     . .G... .G$H.G$H
   32f64:	78004925 200d4788 48236068 20434780     %I.x.G. h`#H.GC 
   32f74:	68410600 035b2301 60414319 4a1f2129     ..Ah.#[..CA`)!.J
   32f84:	60ca0649 09126a0a 32080112 680a620a     I..`.j.....2.b.h
   32f94:	432210dc 4a1a600a 00527812 614a1c52     .."C.`.J.xR.R.Ja
   32fa4:	49186842 7809439a 0fc907c9 431a034b     Bh.I.C.x....K..C
   32fb4:	68436042 431302a2 24286043 05db23a3     B`Ch...CC`($.#..
   32fc4:	4c11601c 629c8824 05096843 430b4393     .`.L$..bCh...C.C
   32fd4:	20006043 8810f380 4780480d 0040bd70     C`. .....H.Gp.@.
   32fe4:	3b854580 00800001 44894580 346d0001     .E.;.....E.D..m4
   32ff4:	60400001 3ba12000 4d990000 34cc0001     ..@`. .;...M...4
   33004:	60700463 603a2000 604e2000 34ad2000     c.p`. :`. N`. .4
   33014:	00000001                                ....

00033018 <am_hal_ble_num_default_patches>:
   33018:	00000003                                ....

0003301c <am_ble_buffer_patch_data_b0>:
   3301c:	07202200 00003fff 0007f584 0007fd73     ." ..?......s...
   3302c:	00080575 00080b17 000815a9 00081b18     u...............
   3303c:	0008232d 00082cc5 000832f4 000839ff     -#...,...2...9..
   3304c:	00084364 000849f9 000851ee 00085c54     dC...I...Q..T\..
	...
   33068:	f7ec2021 2800fcf9 2000d00a 46039000     ! .....(... ...F
   33078:	46014602 20216824 47a03435 bd38bf00     .F.F$h! 54.G..8.
   33088:	fefbf7ef 2800490f 7808d002 d0122801     .....I.(...x.(..
   33098:	28027808 2800d00f 2801d006 f000d004     .x.(...(...(....
   330a8:	20006e0c 04000000 20006e1c 47084900     .n. .....n. .I.G
   330b8:	20004301 7cca4e23 6ac96875 d01d2a00     .C. #N.|uh.j.*..
   330c8:	0212227d d3024291 20011a8a 1a52e000     }"...B..... ..R.
   330d8:	d0052800 43504620 fa02f7ea e0041a20     .(.. FPC.... ...
   330e8:	f9def7ea 02011900 186900c2 18891812     ..........i.....
   330f8:	02530a4a 60711ac9 4348211e bd701880     J.S...q`.!HC..p.
   33108:	2000682c 20006e0c 47084900 20004331     ,h. .n. .I.G1C. 
   33118:	6ac07cc1 d0152900 0209217d d3024288     .|.j.)..}!...B..
   33128:	2004d502 e0347060 f0066928 2800f8b5     ... `p4.(i.....(
   33138:	2002d002 e02c7060 f0049803 2804fa1f     ... `p,........(
   33148:	4668d107 20027901 d0054388 28002000     ..hF.y. .C... .(
   33158:	bf00d004 e01c2000 e7f82001 900088f0     ..... ... ......
   33168:	00000021 00000000 00000001 00000000     !...............
   33178:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   33188:	00002001 0000848d 00002002 00007dcd     . ....... ...}..
   33198:	00002003 00007ed1 00002005 000084fd     . ...~... ......
   331a8:	30286928 8d013040 1a409800 b280492a     (i(0@0....@.*I..
   331b8:	bf00bf00 22054628 30631c71 fdacf7f3     ....(F."q.c0....
   331c8:	99006928 fbdff001 70602001 2003e001     (i....... `p... 
   331d8:	2f007060 7860d139 d2362806 44790001     `p./9.`x.(6...yD
   331e8:	bf00bf00 22568931 46315351 fe3ef001     ....1.V"QS1F..>.
   331f8:	70602001 2003e001 2f007060 7860d167     . `p... `p./g.`x
   33208:	d2642806 44790001 18497909 185f448f     .(d...yD.yI..D_.
   33218:	1207020c 98052128 fc54f7ff 213de057     ....(!....T.W.=!
   33228:	20006878 20006dac 50800040 00002017     xh. .m. @..P. ..
   33238:	00000801 5080407e 200068d8 47084900     ....~@.P.h. .I.G
   33248:	20004391 78c34311 021b7882 0412431a     .C. .C.x.x...C..
   33258:	4c1a430a 79426062 02127901 79c34311     .C.Lb`By.y...C.y
   33268:	d01b2e13 550e21a1 46692202 724e720a     .....!.U."iF.rNr
   33278:	4308210f 46019001 f7fe4638 4669f909     .!.C...F8F....iF
   33288:	b2e87a0a f7ffa902 3440ff55 8aa220ff     .z......U.@4. ..
   33298:	30034639 bf00bf00 bdf0b003 21a12216     9F.0.........".!
   332a8:	00808820 30405838 07c07f00 2500d005      ...8X@0.......%
   332b8:	8820e02f fd22f008 4668e02b 20017a01     /. ...".+.hF.z. 
   332c8:	d0034388 28002000 e001d108 e7fa2001     .C... .(..... ..
   332d8:	43882004 2000d004 d0032800 e018253a     . .C... .(..:%..
   332e8:	83814311 4630210f fb12f7fc f0034628     .C...!0F....(F..
   332f8:	2804f885 7861d103 f7fe4628 2000fd83     ...(..ax(F..... 
   33308:	0000bd70 20006964 4c02b430 bc3046a4     p...di. 0..L.F0.
   33318:	00004760 20004439 4601fae9 98039000     `G..9D. ...F....
   33328:	80688820 f0014628 2000f8b5 0000bdf8      .h.(F..... ....
   33338:	00002015 00000801 20006964 b083b5f0     . ......di. ....
   33348:	24004618 7ae94d18 d0002900 46212400     .F.$.M.z.)...$!F
   33358:	fe42f00a d1242c00 96012601 aa024c13     ..B..,$..&...L..
   33368:	4604fdf9 4630e003 fe5cf00b 46214604     ...F..0F..\..F!F
   33378:	f00a4638 2000ffa3 0000bdf8 0000202e     8F..... ..... ..
   33388:	ffffdfd9 200068f8 b082b510 461c460a     .....h. .....F.F
   33398:	480d2100 2b007ac3 bf00d000 d10c2100     .!.H.z.+.....!..
   333a8:	fe3af7ee 281678a0 2019d302 e0137020     ..:..x.(...  p..
   333b8:	4a0c210c 5c114348 d00242b1 70202019     .!.JHC.\.B...  p
   333c8:	2100e00a 1c6d7021 1e761880 6883b2ad     ...!!pm...v....h
   333d8:	1ca2b2f1 47984628 bd704620 50804480     ....(F.G Fp..D.P
   333e8:	6b114a08 4b086b52 d9014298 47702000     .J.kRk.K.B... pG
   333f8:	43424341 0c900989 49041808 d9f64288     ACBC.......I.B..
   33408:	47702000 20007ec0 001e8480 03938700     . pG.~. ........
   33418:	4913b410 4a136b89 d9024290 2000bc10     ...I.k.J.B..... 
   33428:	4a114770 6813247d 02242214 42a34342     pG.J}$.h."$.BC.B
   33438:	4341d903 18100c08 4341e002 1a100c08     ..AC......AC....
   33448:	4288490a 2000d902 4770bc10 d0002800     .I.B... ..pG.(..
   33458:	42a31e40 2800d2f8 bc10d0f6 47701e40     @..B...(....@.pG
   33468:	20007ec0 000186a0 20006858 001e8480     .~. ....Xh. ....
   33478:	f3efb4f0 b2cc8110 f3812101 78428810     .........!....Bx
   33488:	02127801 78c34311 021b7882 0412431a     .x...C.x.x...C..
   33498:	4d1d430a 7942606a 02127901 79c34311     .C.Mj`By.y...C.y
   334a8:	021b7982 0412431a 60aa430a 7a017a42     .y...C...C.`Bz.z
   334b8:	43110212 7a827ac3 431a021b 430a0412     ...C.z.z...C...C
   334c8:	7b4260ea 02127b01 7bc34311 021b7b82     .`B{.{...C.{.{..
   334d8:	0412431a 612a430a 23103010 21004a0b     .C...C*a.0.#.J.!
   334e8:	54565c46 b2891c49 d3f94299 6168206e     F\VTI....B..n ha
   334f8:	60282001 21014806 f3847401 bcf08810     . (`.H.!.t......
   33508:	20104904 00004708 508000c0 5080406e     .I. .G.....Pn@.P
   33518:	200068d8 000159a1 b085b5ff 461f460e     .h. .Y.......F.F
   33528:	90022000 46304974 46014788 98059001     . ..tI0F.G.F....
   33538:	00804a72 58149004 35a04625 0718796b     rJ.....X%F.5ky..
   33548:	78e8d507 d004280d 213d4a6d 47909805     ...x.(..mJ=!...G
   33558:	2001e0ce d00d4388 28002000 78e8d074     ... .C... .(t..x
   33568:	92034a68 d0702805 2801dc06 2804d01b     hJ...(p....(...(
   33578:	e074d16a e7f02001 d02d2807 d163280d     j.t.. ...(-..(c.
   33588:	d46106d8 716c2400 4b5f221a 98052100     ..a..$lq."_K.!..
   33598:	46684798 08497901 91010049 46304a5b     .GhF.yI.I...[J0F
   335a8:	70ec4790 7878e0a4 d14d280e 4a5820ff     .G.p..xx.(M.. XJ
   335b8:	30034631 46224790 4b563269 9905201a     1F.0.G"Fi2VK. ..
   335c8:	46684798 08497901 91010049 46304a4f     .GhF.yI.I...OJ0F
   335d8:	20004790 e08b70e8 280f7878 20ffd134     .G. .p..xx.(4.. 
   335e8:	46314a4b 47903003 30604620 22fd7a41     KJ1F.0.G F`0Az."
   335f8:	72414011 98054948 28034788 4620d026     .@ArHI...G.(&. F
   33608:	46013040 06428b80 2240d510 83884390     @0.F..B...@".C..
   33618:	21049803 40087f00 2001d000 d0052800     ...!...@... .(..
   33628:	32286922 201a4b3d 47989905 21004a3c     "i(2=K. ...G<J.!
   33638:	47909805 79014668 00490849 4a339101     ...GhF.yI.I...3J
   33648:	47904630 70e82000 e041e052 9804492b     0F.G. .pR.A.+I..
   33658:	68005808 70012102 47884932 7878e048     .X.h.!.p2I.GH.xx
   33668:	d1452814 4a2a20ff 30034631 20014790     .(E.. *J1F.0.G. 
   33678:	74a03440 21409803 40087f00 2001d000     @4.t..@!...@... 
   33688:	d01a2800 07807ce0 230cd417 223e4f27     .(...|.....#'O>"
   33698:	99054825 210747b8 99057001 89218041     %H...G.!.p..A.!.
   336a8:	8a218101 88e18141 89e18081 492080c1     ..!.A......... I
   336b8:	7ce04788 43082102 466874e0 08497901     .G.|.!.C.thF.yI.
   336c8:	91010049 46304a11 20004790 e00f70e8     I....J0F.G. .p..
   336d8:	28127878 0849d10c 91010049 46304a0b     xx.(..I.I....J0F
   336e8:	20004790 20ff70e8 46314a09 47903003     .G. .p. .J1F.0.G
   336f8:	b0099802 0000bdf0 00009f0d 20006964     ............di. 
   33708:	0000c425 200068b8 0000a805 00009f31     %....h. ....1...
   33718:	0000a189 0000b01d 00010a1d 0000ab09     ................
   33728:	0000c405 00009e31 00000804 00009df5     ....1...........
   33738:	00008fb5                                ....

0003373c <am_hal_ble_num_default_patches_b0>:
   3373c:	00000003                                ....

00033740 <g_am_hal_mcuctrl_flash_size>:
   33740:	00004000 00008000 00010000 00020000     .@..............
   33750:	00040000 00080000 00100000 00200000     .............. .
   33760:	00180000 00000000 00000000 00000000     ................
	...

00033780 <g_am_hal_mcuctrl_sram_size>:
   33780:	00004000 00008000 00010000 00020000     .@..............
   33790:	00040000 00080000 00100000 00060000     ................
   337a0:	000c0000 00000000 00000000 00000000     ................
	...

000337c0 <am_hal_pwrctrl_peripheral_control>:
	...
   337cc:	00000001 00000004 00000004 00000002     ................
   337dc:	00000008 00000008 00000004 00000008     ................
   337ec:	00000008 00000008 00000008 00000008     ................
   337fc:	00000010 00000010 00000010 00000020     ............ ...
   3380c:	00000010 00000010 00000040 00000010     ........@.......
   3381c:	00000010 00000080 00000004 00000004     ................
   3382c:	00000100 00000004 00000004 00000200     ................
   3383c:	00000020 00000020 00000400 00000004      ... ...........
   3384c:	00000004 00000800 00000040 00000040     ........@...@...
   3385c:	00001000 00000080 00000080 00002000     ............. ..
   3386c:	00000100 00000100                       ........

00033874 <apollo3_flash_dev>:
   33874:	0003388c 00000000 00100000 00000080     .8..............
   33884:	00000001 000000ff                       ........

0003388c <apollo3_flash_funcs>:
   3388c:	0002c71d 0002c671 0002c60d 0002c5f9     ....q...........
   3389c:	00000000 0002c607 00000000              ............

000338a8 <apollo3_timer_tbl_hfrc>:
   338a8:	00002ee0 0000000a 0000b798 00000008     ................
   338b8:	0002dc6c 00000006 002dc6c0 00000004     l.........-.....
   338c8:	00b71b00 00000002 00000000 00000000     ................

000338d8 <apollo3_timer_tbl_lfrc>:
   338d8:	00000001 00000018 00000020 00000016     ........ .......
   338e8:	00000200 00000014 00000400 0000001a     ................
	...

00033900 <apollo3_timer_tbl_xt>:
   33900:	00000100 00000012 00000800 00000010     ................
   33910:	00004000 0000000e 00008000 0000000c     .@..............
	...

00033928 <g_ui32TMRAddrTbl>:
   33928:	40008000 40008020 40008040 40008060     ...@ ..@@..@`..@
   33938:	40008080 400080a0 400080c0 400080e0     ...@...@...@...@

00033948 <g_ui8TmrClkSrcMask>:
   33948:	01030f0f 00000101 00000000 00000000     ................
   33958:	00000000 0f0f0f0f 0f0f0f0f 0000000f     ................

00033968 <g_AM_HAL_GPIO_DISABLE>:
   33968:	00000003                                ....

0003396c <g_ui8Bit76Capabilities>:
   3396c:	02800101 80010180 80800101 80808080     ................
   3397c:	80808080 80808008 01800180 80808080     ................
   3398c:	80808080 01800402 01010401 80808080     ................
   3399c:	00000101                                ....

000339a0 <g_ui8Inpen>:
   339a0:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   339b0:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   339c0:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   339d0:	00003130                                01..

000339d4 <g_ui8NCEtable>:
   339d4:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   339e4:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   339f4:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   33a04:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   33a14:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   33a24:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   33a34:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   33a44:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   33a54:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   33a64:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   33a74:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   33a84:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   33a94:	32221202 43231303                       .."2..#C

00033a9c <g_ui8nCEpins>:
   33a9c:	02070707 00080802 01020202 01010101     ................
   33aac:	01010101 01010101 01010101 01010101     ................
   33abc:	01010101 08010101 01010008 01010101     ................
   33acc:	00000101                                ....

00033ad0 <stdout>:
   33ad0:	10001ad0                                ....

00033ad4 <MemFile_methods>:
   33ad4:	0002e02d 00000000                       -.......

00033adc <log_fcb_handler>:
   33adc:	00000002 0002e401 0002e79b 0002e77f     ................
   33aec:	0002e6c3 0002e659 0002e5c5 0002e3a1     ....Y...........
   33afc:	0002e397 0002e1c7 0002e1c3              ............

00033b08 <crc8_small_table>:
   33b08:	090e0700 15121b1c 31363f38 2d2a2324     ........8?61$#*-
   33b18:	5f676f6c 7473696c 00000000 6576656c     log_list....leve
   33b28:	616d5f6c 00000070 75646f6d 6d5f656c     l_map...module_m
   33b38:	00007061 5f676f6c 656d616e 00000000     ap..log_name....
   33b48:	72746e65 00736569 65707974 00000000     entries.type....
   33b58:	00007374 65646e69 00000078 7478656e     ts..index...next
   33b68:	646e695f 00007865 73676f6c 00000000     _index..logs....
   33b78:	726f6263 00000000 006e6962 00727473     cbor....bin.str.
   33b88:	6576656c 0000006c 75646f6d 0000656c     level...module..
   33b98:	68676d69 00687361 0067736d 6f727265     imghash.msg.erro
   33ba8:	65203a72 7972746e 6f6f7420 72616c20     r: entry too lar
   33bb8:	28206567 20757a25 65747962 00002973     ge (%zu bytes)..
   33bc8:	74617473 73696c5f 00000074 6c656966     stat_list...fiel
   33bd8:	00007364                                ds..

00033bdc <g_sUartConfig>:
   33bdc:	0001c200 00000060 00000000 00000000     ....`...........
   33bec:	00000000 00000012 10005110 00000100     .........Q......
   33bfc:	1000510c 00000002                       .Q......

/Users/tianzeng/Documents/workspace/playground/bin/targets/ble_test_target/app/apps/bleprph/bleprph.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 130044	   6708	  14584	 151336	  24f28	/Users/tianzeng/Documents/workspace/playground/bin/targets/ble_test_target/app/apps/bleprph/bleprph.elf
